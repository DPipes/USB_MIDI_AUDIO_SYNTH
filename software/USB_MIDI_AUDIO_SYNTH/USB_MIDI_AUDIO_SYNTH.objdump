
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00029900 memsz 0x00029900 flags r-x
    LOAD off    0x0002a920 vaddr 0x00029920 paddr 0x0002cafc align 2**12
         filesz 0x000031dc memsz 0x000031dc flags rw-
    LOAD off    0x0002dcd8 vaddr 0x0002fcd8 paddr 0x0002fcd8 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000227b8  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006f38  000229e8  000229e8  000239e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031dc  00029920  0002cafc  0002a920  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0002fcd8  0002fcd8  0002dcd8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0002ff84  0002ff84  0002dafc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002dafc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001998  00000000  00000000  0002db20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000522e9  00000000  00000000  0002f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000104ed  00000000  00000000  000817a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014e9e  00000000  00000000  00091c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005808  00000000  00000000  000a6b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000fc05  00000000  00000000  000ac334  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00022609  00000000  00000000  000bbf39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000de544  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000028e8  00000000  00000000  000de5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000f96e6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000f96e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000f96ee  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000f96ef  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000f96f0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000f96f4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000f96f8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000f96fc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000f9707  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000f9712  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000f971d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000f9731  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000f975c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ee53  00000000  00000000  000febe3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000229e8 l    d  .rodata	00000000 .rodata
00029920 l    d  .rwdata	00000000 .rwdata
0002fcd8 l    d  .bss	00000000 .bss
0002ff84 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002b404 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b405 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b406 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b407 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002b408 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b409 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b40a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b40b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002fcd8 l     O .bss	00000001 _ZL9usb_error
0002fcd9 l     O .bss	00000001 _ZL14usb_task_state
0002fcdc l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002b414 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b415 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b416 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b417 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002b418 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00022b02 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003d58 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
0002b438 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002b439 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002b43a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002b43b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002b43c l     O .rwdata	00000002 _ZL9pstrSpace
0002b440 l     O .rwdata	00000003 _ZL8pstrCRLF
0002b444 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002b448 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002b44c l     O .rwdata	00000004 _ZL13pstrTripleTab
0002b450 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00022c50 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00022c64 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00022c70 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00022c7c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00022c88 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00022c94 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00022ca4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002b458 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002b460 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002b468 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002b470 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00022cb0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00022cbc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002b474 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002b478 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00022cc8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00022cd8 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002b480 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002b488 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00022ce8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002b490 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00022cf8 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002b498 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00022d10 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002b49c l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00022d1c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00022d28 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002b4a4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002b4ac l     O .rwdata	00000006 _ZL14pstrUsageMouse
00022d34 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00022d40 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002b4b4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002b4bc l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00022d4c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00022d5c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002b4c4 l     O .rwdata	00000002 _ZL10pstrUsageX
0002b4c8 l     O .rwdata	00000002 _ZL10pstrUsageY
0002b4cc l     O .rwdata	00000002 _ZL10pstrUsageZ
0002b4d0 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002b4d4 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002b4d8 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002b4dc l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002b4e4 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002b4ec l     O .rwdata	00000006 _ZL14pstrUsageWheel
00022d70 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00022d7c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00022d88 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00022d94 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002b4f4 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002b4fc l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002b500 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002b504 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002b508 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002b50c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002b514 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002b51c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002b524 l     O .rwdata	00000004 _ZL12pstrUsageVno
00022da4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00022db4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00022dc0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00022dcc l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00022ddc l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00022de8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00022df4 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00022e08 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00022e18 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00022e28 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00022e38 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00022e48 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00022e58 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00022e68 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00022e78 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00022e84 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00022e94 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00022ea8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00022ebc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00022ec8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00022ed4 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00022ee0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00022eec l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00022ef8 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00022f04 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00022f10 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00022f1c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00022f28 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00022f34 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00022f40 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00022f50 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00022f5c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00022f6c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00022f7c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00022f8c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00022f9c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00022fac l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00022fc4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00022fdc l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00022ff4 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00023004 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00023014 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00023024 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00023034 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00023044 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00023054 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00023064 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00023074 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00023084 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00023094 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000230ac l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000230bc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000230d0 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000230e0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000230ec l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000230f8 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00023104 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002b528 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00023110 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00023120 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00023134 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00023148 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00023158 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00023168 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00023174 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00023188 l     O .rodata	00000009 _ZL17pstrUsageElevator
00023194 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002b530 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000231a4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000231b0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000231bc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000231cc l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000231dc l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002b538 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000231e8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000231f4 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00023200 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002b540 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002b548 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002b550 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002b558 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0002320c l     O .rodata	00000009 _ZL17pstrUsageSteering
00023218 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00023224 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00023230 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002b560 l     O .rwdata	00000008 _ZL16pstrUsageBallast
0002323c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0002324c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00023258 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00023264 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002b568 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00023270 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002b570 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002b578 l     O .rwdata	00000006 _ZL14pstrUsageGlove
0002327c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00023288 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00023294 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000232a0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002b580 l     O .rwdata	00000005 _ZL13pstrUsageVest
000232ac l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000232b8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000232c4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000232d4 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000232e4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000232f0 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000232fc l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002b588 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002b58c l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002b594 l     O .rwdata	00000005 _ZL13pstrUsageRate
00023308 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00023314 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00023324 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00023334 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00023344 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00023350 l     O .rodata	0000000b _ZL18pstrUsageStickType
0002335c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002b59c l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002b5a4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002b5ac l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002b5b4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002b5bc l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002b5c4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002b5cc l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002b5d4 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002b5dc l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002b5e4 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002b5ec l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002b5f4 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00023368 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00023374 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00023380 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002b5fc l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002b604 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002b60c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002b614 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002b61c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0002338c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0002339c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002b624 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002b62c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000233a8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000233b8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000233c8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000233d8 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000233e8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000233f8 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00023408 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00023418 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00023428 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002b630 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00023438 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002b638 l     O .rwdata	00000005 _ZL13pstrUsageBump
00023448 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00023454 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002b640 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00023460 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0002346c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002b648 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00023478 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00023488 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00023494 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000234a0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000234ac l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000234c0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000234d0 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000234e0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000234ec l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000234f8 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00023510 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00023524 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0002353c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00023550 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0002355c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00023568 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002b650 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002b658 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002b660 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002b664 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002b66c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002b670 l     O .rwdata	00000005 _ZL13pstrUsageMute
00023574 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00023580 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00023590 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002b678 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000235a0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000235b0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002b680 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002b688 l     O .rwdata	00000007 _ZL15pstrUsageStereo
000235bc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000235d0 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002b690 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002b694 l     O .rwdata	00000004 _ZL12pstrUsageCLV
000235dc l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
000235f0 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002b698 l     O .rwdata	00000005 _ZL13pstrUsageRing
000235fc l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00023608 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002b6a0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002b6a8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002b6b0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002b6b8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00023614 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002b6c0 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002b6c8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00023620 l     O .rodata	00000009 _ZL17pstrUsageCoverage
0002362c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00023638 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00023644 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002b6cc l     O .rwdata	00000005 _ZL19pstrUsageConference
00023650 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002b6d4 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002b6dc l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002b6e4 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0002365c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002b6ec l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002b6f4 l     O .rwdata	00000006 _ZL14pstrUsageReady
00023668 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00023674 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002b6fc l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002b704 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002b708 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002b70c l     O .rwdata	00000005 _ZL13pstrUsageStop
0002b714 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00023680 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002b71c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002b724 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002b72c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002b730 l     O .rwdata	00000006 _ZL14pstrUsageError
0002368c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
0002369c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000236b0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002b738 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000236c8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000236d4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000236e4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002b740 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
000236f4 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00023704 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00023718 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0002372c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00023740 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00023754 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002b748 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00023764 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00023770 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002b750 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0002377c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00023788 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002b758 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00023798 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000237a4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002b760 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002b768 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000237b0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000237bc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002b770 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002b778 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002b780 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002b788 l     O .rwdata	00000007 _ZL15pstrUsageRedial
000237c8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002b790 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002b798 l     O .rwdata	00000005 _ZL13pstrUsagePark
000237d4 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
000237e0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002b7a0 l     O .rwdata	00000005 _ZL13pstrUsageLine
000237ec l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
000237f8 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00023804 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00023810 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0002381c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002b7a8 l     O .rwdata	00000005 _ZL13pstrUsageSend
00023828 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00023834 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00023840 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0002384c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00023858 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00023864 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002b7b0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00023874 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00023884 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00023898 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
000238ac l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000238c0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000238d4 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
000238e4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
000238f4 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00023908 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00023918 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00023928 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00023938 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00023944 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00023950 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0002395c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002b7b4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002b7bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002b7c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002b7c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002b7c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002b7cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002b7d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002b7d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002b7d8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002b7dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002b7e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002b7e4 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002b7e8 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002b7ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002b7f0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002b7f4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002b7f8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00023970 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00023980 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0002398c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00023998 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002b7fc l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002b800 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002b808 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002b810 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002b818 l     O .rwdata	00000006 _ZL14pstrUsageSleep
000239a4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
000239b0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002b820 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
000239bc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002b828 l     O .rwdata	00000005 _ZL13pstrUsageMenu
000239c8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002b830 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
000239d4 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
000239e0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
000239ec l     O .rodata	0000000b _ZL18pstrUsageMenuRight
000239f8 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00023a04 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00023a14 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00023a24 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00023a30 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00023a3c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002b838 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00023a4c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00023a5c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002b840 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002b848 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00023a68 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00023a74 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00023a80 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00023a8c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00023a9c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002b84c l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002b854 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00023aa8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00023ab8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00023ac4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00023ad0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00023adc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00023ae8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00023af4 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00023b00 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00023b10 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00023b1c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00023b28 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00023b34 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002b85c l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002b864 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00023b44 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00023b54 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00023b60 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00023b6c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00023b7c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00023b8c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002b86c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002b874 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00023b9c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002b87c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002b884 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002b88c l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002b894 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002b89c l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00023ba8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00023bb4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002b8a4 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002b8ac l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00023bc0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00023bcc l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00023bd8 l     O .rodata	00000009 _ZL17pstrUsageTracking
00023be4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00023bf0 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002b8b4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00023bfc l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002b8bc l     O .rwdata	00000005 _ZL13pstrUsageMark
00023c08 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00023c14 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00023c20 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00023c2c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00023c3c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00023c50 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00023c60 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00023c70 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00023c7c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00023c88 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00023c94 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00023ca0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002b8c4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002b8c8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002b8d0 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002b8d8 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00023cac l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00023cb8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002b8e0 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002b8e8 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002b8ec l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002b8f4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002b8fc l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00023cc4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00023cd0 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00023cdc l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00023ce8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002b904 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00023cf4 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00023d00 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00023d0c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00023d18 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00023d28 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00023d38 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00023d44 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00023d50 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00023d5c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002b90c l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002b914 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00023d68 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00023d74 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002b91c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00023d80 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00023d90 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00023da0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00023dac l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00023db8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00023dc4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002b924 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002b92c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00023dd0 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00023ddc l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00023de8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00023df4 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002b934 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00023e04 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00023e10 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002b93c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002b944 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002b94c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00023e20 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00023e2c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00023e38 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00023e44 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00023e50 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00023e60 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00023e74 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00023e80 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00023e94 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00023ea4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00023eb0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00023ec0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00023ed0 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00023ee0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00023eec l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00023efc l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00023f08 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00023f18 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00023f28 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00023f38 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00023f48 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00023f5c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002b954 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00023f6c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00023f80 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00023f94 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00023fa4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00023fb4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00023fc4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00023fd0 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00023fdc l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00023fe8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00023ff4 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00024000 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00024010 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00024028 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00024034 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00024040 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002404c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00024058 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00024064 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00024070 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00024084 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002b95c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00024090 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002b964 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002409c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000240a8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000240b8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000240c4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000240d4 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000240e4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000240f4 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00024100 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002410c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00024118 l     O .rodata	00000009 _ZL16pstrUsageALClock
00024124 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00024134 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00024140 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002414c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00024158 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00024164 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00024178 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00024188 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00024194 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000241a8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000241b4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000241c4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000241d8 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000241ec l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00024200 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00024210 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00024228 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002423c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002424c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002425c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002b96c l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002b974 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00024270 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002b97c l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002b984 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002b98c l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002b994 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002427c l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002b99c l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002b9a4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002b9ac l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002b9b4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00024288 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00024294 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002b9bc l     O .rwdata	00000008 _ZL15pstrUsageACFind
000242a0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000242b0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002b9c4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002b9cc l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002b9d4 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002b9dc l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002b9e4 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000242bc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000242c8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000242d8 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000242e8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002b9ec l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000242f4 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00024300 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002430c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002b9f4 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00024318 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00024324 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00024334 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00024340 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00024350 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00024360 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002436c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00024378 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002b9fc l     O .rwdata	00000007 _ZL14pstrUsageACPan
00024388 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00024394 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000243a4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002ba04 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002ba0c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002ba14 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002ba1c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000243b4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000243c0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002ba24 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000243cc l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000243d8 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000243e4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000243f0 l     O .rodata	0000000a _ZL17pstrUsageACResize
000243fc l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00024408 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00024414 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00024420 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002442c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00024438 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00024444 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00024450 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00024460 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00024470 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00024480 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00024490 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002449c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000244ac l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000244b8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000244c8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000244d8 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000244e8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000244f4 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00024500 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002450c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00024518 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002ba2c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002ba34 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00024524 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002ba3c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002ba44 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00024530 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002ba4c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002453c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002454c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00024558 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00024568 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00024578 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00024588 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002ba54 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002ba5c l     O .rwdata	00000008 _ZL15pstrUsageACLock
00024594 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002ba64 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000245a0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000245ac l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000245bc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000245c8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000245d8 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000245e4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
000245f0 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
000245fc l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00024608 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00024614 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00024620 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002ba6c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002ba74 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002462c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00024638 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002ba7c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00024648 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00024654 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00024660 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00024670 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00024680 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002468c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00024698 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000246a4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002ba84 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000246b0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000246bc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000246c8 l     O .rodata	00000009 _ZL16pstrUsageACReply
000246d4 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000246e4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002ba8c l     O .rwdata	00000007 _ZL15pstrUsageACSend
000246f0 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002ba94 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002ba9c l     O .rwdata	00000008 _ZL19pstrUsageACDownload
000246fc l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00024708 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00024714 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00024720 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002472c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00024738 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00024744 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00024750 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002475c l     O .rodata	0000000a _ZL17pstrUsageACRename
00024768 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00024774 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00024780 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002478c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00024798 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002baa4 l     O .rwdata	00000004 _ZL12pstrUsagePen
000247a4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000247b0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000247bc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000247c8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
000247d4 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002baa8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
000247e4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002bab0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
000247f0 l     O .rodata	00000009 _ZL17pstrUsageArmature
000247fc l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00024810 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002bab8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002bac0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002bac8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00024820 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002482c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00024838 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002bad0 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002bad8 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002bae0 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002bae4 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00024844 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00024850 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00024860 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00024870 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002baec l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002baf4 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002bafc l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002bb04 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00024880 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002bb0c l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002bb14 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002488c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002bb1c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002bb24 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00024898 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
000248a4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
000248b4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
000248c0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000248d0 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
000248dc l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
000248ec l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
000248f8 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00024908 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00024914 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00024924 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00024934 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00024940 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002494c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00024958 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00024964 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00024970 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002497c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00024988 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00024998 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
000249a8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002bb2c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002bb30 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002bb34 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002bb3c l     O .rwdata	00000005 _ZL16pstrUsageColumns
000249b4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
000249c0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
000249cc l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
000249d8 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002bb44 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
000249e4 l     O .rodata	00000009 _ZL17pstrUsageFontData
000249f0 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
000249fc l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00024a08 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00024a18 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00024a28 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00024a38 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00024a44 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00024a50 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00024a5c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00024a68 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00024a74 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00024a80 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00024a8c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00024a98 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00024aa4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00024ab4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00024ac4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00024ad4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00024ae0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00024aec l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00024afc l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002bb4c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00024b08 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00024b18 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00024b28 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00024b34 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00024b40 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00024b50 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00024b60 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00024b70 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00024b80 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00024b8c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00024b98 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00024ba4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00024bb4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00024bc4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00024bd4 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00024be4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002bb54 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002bb5c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00024bf4 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002bb64 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002bb6c l     O .rwdata	00000005 _ZL13pstrUsageNext
0002bb74 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002bb7c l     O .rwdata	00000006 _ZL14pstrUsagePrint
00024c00 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002bb84 l     O .rwdata	00000005 _ZL13pstrUsageCine
00024c0c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002bb8c l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002bb94 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00024c18 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00024c28 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00024c38 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00024c48 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00024c54 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00024c60 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00024c74 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00024c88 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00024c9c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00024cb0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00024cc0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00024cd0 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00024cdc l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00024ce8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00024cf8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002bba8 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bba9 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bbaa l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bbab l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002bbb0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bbb1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bbb2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bbb3 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002bbb4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bbb5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bbb6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bbb7 l     O .rwdata	00000001 _ZL9SPI_MODE3
00024f52 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00024f62 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008b7c l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002bbc0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002bbc1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002bbc2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002bbc3 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002bbc4 l     O .rwdata	00000002 _ZL9pstrSpace
0002bbc8 l     O .rwdata	00000003 _ZL8pstrCRLF
0002bbcc l     O .rwdata	00000002 _ZL13pstrSingleTab
0002bbd0 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002bbd4 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002bbd8 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
0002502c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00025040 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
0002504c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00025058 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00025064 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00025070 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00025080 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002bbe0 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002bbe8 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002bbf0 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002bbf8 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0002508c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00025098 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002bbfc l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002bc00 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000250a4 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000250b4 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002bc08 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002bc10 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000250c4 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002bc18 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000250d4 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002bc20 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000250ec l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002bc24 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000250f8 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00025104 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002bc2c l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002bc34 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00025110 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0002511c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002bc3c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002bc44 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00025128 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00025138 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002bc4c l     O .rwdata	00000002 _ZL10pstrUsageX
0002bc50 l     O .rwdata	00000002 _ZL10pstrUsageY
0002bc54 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002bc58 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002bc5c l     O .rwdata	00000003 _ZL11pstrUsageRy
0002bc60 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002bc64 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002bc6c l     O .rwdata	00000005 _ZL13pstrUsageDial
0002bc74 l     O .rwdata	00000006 _ZL14pstrUsageWheel
0002514c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00025158 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00025164 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00025170 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002bc7c l     O .rwdata	00000006 _ZL14pstrUsageStart
0002bc84 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002bc88 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002bc8c l     O .rwdata	00000003 _ZL11pstrUsageVy
0002bc90 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002bc94 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002bc9c l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002bca4 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002bcac l     O .rwdata	00000004 _ZL12pstrUsageVno
00025180 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00025190 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0002519c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000251a8 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000251b8 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000251c4 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000251d0 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000251e4 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000251f4 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00025204 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00025214 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00025224 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00025234 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00025244 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00025254 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00025260 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00025270 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00025284 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00025298 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000252a4 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000252b0 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000252bc l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000252c8 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000252d4 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000252e0 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000252ec l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000252f8 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00025304 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00025310 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0002531c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0002532c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00025338 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00025348 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00025358 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00025368 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00025378 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00025388 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000253a0 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000253b8 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000253d0 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000253e0 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000253f0 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00025400 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00025410 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00025420 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00025430 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00025440 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00025450 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00025460 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00025470 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00025488 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00025498 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000254ac l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000254bc l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000254c8 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000254d4 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000254e0 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002bcb0 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000254ec l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000254fc l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00025510 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00025524 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00025534 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00025544 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00025550 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00025564 l     O .rodata	00000009 _ZL17pstrUsageElevator
00025570 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002bcb8 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00025580 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0002558c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00025598 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000255a8 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000255b8 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002bcc0 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000255c4 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000255d0 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000255dc l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002bcc8 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002bcd0 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002bcd8 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002bce0 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000255e8 l     O .rodata	00000009 _ZL17pstrUsageSteering
000255f4 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00025600 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0002560c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002bce8 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00025618 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00025628 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00025634 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00025640 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002bcf0 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0002564c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002bcf8 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002bd00 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00025658 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00025664 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00025670 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0002567c l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002bd08 l     O .rwdata	00000005 _ZL13pstrUsageVest
00025688 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00025694 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000256a0 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000256b0 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000256c0 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000256cc l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000256d8 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002bd10 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002bd14 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002bd1c l     O .rwdata	00000005 _ZL13pstrUsageRate
000256e4 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
000256f0 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00025700 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00025710 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00025720 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0002572c l     O .rodata	0000000b _ZL18pstrUsageStickType
00025738 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002bd24 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002bd2c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002bd34 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002bd3c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002bd44 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002bd4c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002bd54 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002bd5c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002bd64 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002bd6c l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002bd74 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002bd7c l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00025744 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00025750 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0002575c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002bd84 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002bd8c l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002bd94 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002bd9c l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002bda4 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00025768 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00025778 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002bdac l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002bdb4 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00025784 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00025794 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000257a4 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000257b4 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000257c4 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000257d4 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
000257e4 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
000257f4 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00025804 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002bdb8 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00025814 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002bdc0 l     O .rwdata	00000005 _ZL13pstrUsageBump
00025824 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00025830 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002bdc8 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0002583c l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00025848 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002bdd0 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00025854 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00025864 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00025870 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
0002587c l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00025888 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0002589c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000258ac l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
000258bc l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
000258c8 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
000258d4 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
000258ec l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00025900 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00025918 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
0002592c l     O .rodata	00000009 _ZL16pstrUsageNumLock
00025938 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00025944 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002bdd8 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002bde0 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002bde8 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002bdec l     O .rwdata	00000006 _ZL14pstrUsageShift
0002bdf4 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002bdf8 l     O .rwdata	00000005 _ZL13pstrUsageMute
00025950 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0002595c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
0002596c l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002be00 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
0002597c l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
0002598c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002be08 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002be10 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00025998 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000259ac l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002be18 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002be1c l     O .rwdata	00000004 _ZL12pstrUsageCLV
000259b8 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
000259cc l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002be20 l     O .rwdata	00000005 _ZL13pstrUsageRing
000259d8 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
000259e4 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002be28 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002be30 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002be38 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002be40 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
000259f0 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002be48 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002be50 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
000259fc l     O .rodata	00000009 _ZL17pstrUsageCoverage
00025a08 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00025a14 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00025a20 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002be54 l     O .rwdata	00000005 _ZL19pstrUsageConference
00025a2c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002be5c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002be64 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002be6c l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00025a38 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002be74 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002be7c l     O .rwdata	00000006 _ZL14pstrUsageReady
00025a44 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00025a50 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002be84 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002be8c l     O .rwdata	00000004 _ZL16pstrUsageForward
0002be90 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002be94 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002be9c l     O .rwdata	00000007 _ZL15pstrUsageRewind
00025a5c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002bea4 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002beac l     O .rwdata	00000006 _ZL14pstrUsagePause
0002beb4 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002beb8 l     O .rwdata	00000006 _ZL14pstrUsageError
00025a68 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00025a78 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00025a8c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002bec0 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00025aa4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00025ab0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00025ac0 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002bec8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00025ad0 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00025ae0 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00025af4 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00025b08 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00025b1c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00025b30 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002bed0 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00025b40 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00025b4c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002bed8 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00025b58 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00025b64 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002bee0 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00025b74 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00025b80 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002bee8 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002bef0 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00025b8c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00025b98 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002bef8 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002bf00 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002bf08 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002bf10 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00025ba4 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002bf18 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002bf20 l     O .rwdata	00000005 _ZL13pstrUsagePark
00025bb0 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00025bbc l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002bf28 l     O .rwdata	00000005 _ZL13pstrUsageLine
00025bc8 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00025bd4 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00025be0 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00025bec l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00025bf8 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002bf30 l     O .rwdata	00000005 _ZL13pstrUsageSend
00025c04 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00025c10 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00025c1c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00025c28 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00025c34 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00025c40 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002bf38 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00025c50 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00025c60 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00025c74 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00025c88 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00025c9c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00025cb0 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00025cc0 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00025cd0 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00025ce4 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00025cf4 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00025d04 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00025d14 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00025d20 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00025d2c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00025d38 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002bf3c l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002bf44 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002bf48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002bf4c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002bf50 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002bf54 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002bf58 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002bf5c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002bf60 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002bf64 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002bf68 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002bf6c l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002bf70 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002bf74 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002bf78 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002bf7c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002bf80 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00025d4c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00025d5c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00025d68 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00025d74 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002bf84 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002bf88 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002bf90 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002bf98 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002bfa0 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00025d80 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00025d8c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002bfa8 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00025d98 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002bfb0 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00025da4 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002bfb8 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00025db0 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00025dbc l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00025dc8 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00025dd4 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00025de0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00025df0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00025e00 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00025e0c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00025e18 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002bfc0 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00025e28 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00025e38 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002bfc8 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002bfd0 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00025e44 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00025e50 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00025e5c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00025e68 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00025e78 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002bfd4 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002bfdc l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00025e84 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00025e94 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00025ea0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00025eac l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00025eb8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00025ec4 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00025ed0 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00025edc l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00025eec l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00025ef8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00025f04 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00025f10 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002bfe4 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002bfec l     O .rwdata	00000005 _ZL13pstrUsageHelp
00025f20 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00025f30 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00025f3c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00025f48 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00025f58 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00025f68 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002bff4 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002bffc l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00025f78 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002c004 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002c00c l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002c014 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002c01c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002c024 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00025f84 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00025f90 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002c02c l     O .rwdata	00000006 _ZL14pstrUsageEject
0002c034 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00025f9c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00025fa8 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00025fb4 l     O .rodata	00000009 _ZL17pstrUsageTracking
00025fc0 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00025fcc l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002c03c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00025fd8 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002c044 l     O .rwdata	00000005 _ZL13pstrUsageMark
00025fe4 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00025ff0 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00025ffc l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00026008 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00026018 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0002602c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0002603c l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002604c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00026058 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00026064 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00026070 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0002607c l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002c04c l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002c050 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002c058 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002c060 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00026088 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00026094 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002c068 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002c070 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002c074 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002c07c l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002c084 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000260a0 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000260ac l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000260b8 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000260c4 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002c08c l     O .rwdata	00000005 _ZL13pstrUsageSlow
000260d0 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000260dc l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000260e8 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000260f4 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00026104 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00026114 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00026120 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0002612c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00026138 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002c094 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002c09c l     O .rwdata	00000007 _ZL15pstrUsageMotion
00026144 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00026150 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002c0a4 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002615c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002616c l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002617c l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00026188 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00026194 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000261a0 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002c0ac l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002c0b4 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000261ac l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000261b8 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000261c4 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000261d0 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002c0bc l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000261e0 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000261ec l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002c0c4 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002c0cc l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002c0d4 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000261fc l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00026208 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00026214 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00026220 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0002622c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0002623c l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00026250 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002625c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00026270 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00026280 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002628c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002629c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000262ac l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000262bc l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000262c8 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000262d8 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000262e4 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000262f4 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00026304 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00026314 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00026324 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00026338 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002c0dc l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00026348 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002635c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00026370 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00026380 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00026390 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000263a0 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000263ac l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000263b8 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000263c4 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000263d0 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000263dc l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000263ec l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00026404 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00026410 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002641c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00026428 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00026434 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00026440 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002644c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00026460 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002c0e4 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002646c l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002c0ec l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00026478 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00026484 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00026494 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000264a0 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000264b0 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000264c0 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000264d0 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000264dc l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000264e8 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000264f4 l     O .rodata	00000009 _ZL16pstrUsageALClock
00026500 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00026510 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002651c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00026528 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00026534 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00026540 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00026554 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00026564 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00026570 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00026584 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00026590 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000265a0 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000265b4 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000265c8 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000265dc l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000265ec l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00026604 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00026618 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00026628 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00026638 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002c0f4 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002c0fc l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002664c l     O .rodata	00000009 _ZL16pstrUsageACClose
0002c104 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002c10c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002c114 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002c11c l     O .rwdata	00000008 _ZL15pstrUsageACSave
00026658 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002c124 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002c12c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002c134 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002c13c l     O .rwdata	00000007 _ZL14pstrUsageACCut
00026664 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00026670 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002c144 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002667c l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002668c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002c14c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002c154 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002c15c l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002c164 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002c16c l     O .rwdata	00000008 _ZL15pstrUsageACStop
00026698 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000266a4 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000266b4 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000266c4 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002c174 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000266d0 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
000266dc l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
000266e8 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002c17c l     O .rwdata	00000008 _ZL15pstrUsageACZoom
000266f4 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00026700 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00026710 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002671c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002672c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002673c l     O .rodata	0000000a _ZL17pstrUsageACScroll
00026748 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00026754 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002c184 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00026764 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00026770 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00026780 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002c18c l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002c194 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002c19c l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002c1a4 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00026790 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002679c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002c1ac l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000267a8 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000267b4 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000267c0 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000267cc l     O .rodata	0000000a _ZL17pstrUsageACResize
000267d8 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
000267e4 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
000267f0 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
000267fc l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00026808 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00026814 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00026820 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002682c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002683c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002684c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002685c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002686c l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00026878 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00026888 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00026894 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000268a4 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000268b4 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
000268c4 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
000268d0 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
000268dc l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
000268e8 l     O .rodata	0000000b _ZL18pstrUsageACPromote
000268f4 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002c1b4 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002c1bc l     O .rwdata	00000006 _ZL13pstrUsageACNo
00026900 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002c1c4 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002c1cc l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002690c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002c1d4 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00026918 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00026928 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00026934 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00026944 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00026954 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00026964 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002c1dc l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002c1e4 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00026970 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002c1ec l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002697c l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00026988 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00026998 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000269a4 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000269b4 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
000269c0 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
000269cc l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
000269d8 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
000269e4 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
000269f0 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
000269fc l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002c1f4 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002c1fc l     O .rwdata	00000008 _ZL15pstrUsageACSort
00026a08 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00026a14 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002c204 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00026a24 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00026a30 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00026a3c l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00026a4c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00026a5c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00026a68 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00026a74 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00026a80 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002c20c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00026a8c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00026a98 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00026aa4 l     O .rodata	00000009 _ZL16pstrUsageACReply
00026ab0 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00026ac0 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002c214 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00026acc l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002c21c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002c224 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00026ad8 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00026ae4 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00026af0 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00026afc l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00026b08 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00026b14 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00026b20 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00026b2c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00026b38 l     O .rodata	0000000a _ZL17pstrUsageACRename
00026b44 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00026b50 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00026b5c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00026b68 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00026b74 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002c22c l     O .rwdata	00000004 _ZL12pstrUsagePen
00026b80 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00026b8c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00026b98 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00026ba4 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00026bb0 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002c230 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00026bc0 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002c238 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00026bcc l     O .rodata	00000009 _ZL17pstrUsageArmature
00026bd8 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00026bec l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002c240 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002c248 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002c250 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00026bfc l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00026c08 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00026c14 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002c258 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002c260 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002c268 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002c26c l     O .rwdata	00000005 _ZL16pstrUsageQuality
00026c20 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00026c2c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00026c3c l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00026c4c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002c274 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002c27c l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002c284 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002c28c l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00026c5c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002c294 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002c29c l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00026c68 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002c2a4 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002c2ac l     O .rwdata	00000007 _ZL15pstrUsageEraser
00026c74 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00026c80 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00026c90 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00026c9c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00026cac l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00026cb8 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00026cc8 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00026cd4 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00026ce4 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00026cf0 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00026d00 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00026d10 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00026d1c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00026d28 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00026d34 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00026d40 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00026d4c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00026d58 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00026d64 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00026d74 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00026d84 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002c2b4 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002c2b8 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002c2bc l     O .rwdata	00000005 _ZL13pstrUsageRows
0002c2c4 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00026d90 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00026d9c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00026da8 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00026db4 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002c2cc l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00026dc0 l     O .rodata	00000009 _ZL17pstrUsageFontData
00026dcc l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00026dd8 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00026de4 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00026df4 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00026e04 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00026e14 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00026e20 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00026e2c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00026e38 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00026e44 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00026e50 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00026e5c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00026e68 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00026e74 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00026e80 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00026e90 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00026ea0 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00026eb0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00026ebc l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00026ec8 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00026ed8 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002c2d4 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00026ee4 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00026ef4 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00026f04 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00026f10 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00026f1c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00026f2c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00026f3c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00026f4c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00026f5c l     O .rodata	0000000a _ZL17pstrUsageBlitData
00026f68 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00026f74 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00026f80 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00026f90 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00026fa0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00026fb0 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00026fc0 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002c2dc l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002c2e4 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00026fd0 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002c2ec l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002c2f4 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002c2fc l     O .rwdata	00000005 _ZL13pstrUsageSave
0002c304 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00026fdc l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002c30c l     O .rwdata	00000005 _ZL13pstrUsageCine
00026fe8 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002c314 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002c31c l     O .rwdata	00000006 _ZL14pstrUsageDepth
00026ff4 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00027004 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00027014 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00027024 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00027030 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002703c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00027050 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00027064 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00027078 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002708c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002709c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000270ac l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000270b8 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000270c4 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000270d4 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002c322 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c323 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c324 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c325 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002c328 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c329 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c32a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c32b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c32c l     O .rwdata	00000002 _ZL9pstrSpace
0002c330 l     O .rwdata	00000003 _ZL8pstrCRLF
0002c334 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c338 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c33c l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c340 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000271b4 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000271c8 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000271d4 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000271e0 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000271ec l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000271f8 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00027208 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c348 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c350 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c358 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c360 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00027214 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00027220 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c364 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c368 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0002722c l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
0002723c l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c370 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c378 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0002724c l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c380 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0002725c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c388 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00027274 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c38c l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00027280 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0002728c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c394 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c39c l     O .rwdata	00000006 _ZL14pstrUsageMouse
00027298 l     O .rodata	00000009 _ZL17pstrUsageJoystick
000272a4 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c3a4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c3ac l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000272b0 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000272c0 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c3b4 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c3b8 l     O .rwdata	00000002 _ZL10pstrUsageY
0002c3bc l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c3c0 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c3c4 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c3c8 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c3cc l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c3d4 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c3dc l     O .rwdata	00000006 _ZL14pstrUsageWheel
000272d4 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000272e0 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000272ec l     O .rodata	0000000b _ZL18pstrUsageByteCount
000272f8 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c3e4 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c3ec l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c3f0 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c3f4 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c3f8 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002c3fc l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002c404 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002c40c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002c414 l     O .rwdata	00000004 _ZL12pstrUsageVno
00027308 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00027318 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00027324 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00027330 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00027340 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0002734c l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00027358 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0002736c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0002737c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0002738c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0002739c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000273ac l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000273bc l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000273cc l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000273dc l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000273e8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000273f8 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0002740c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00027420 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0002742c l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00027438 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00027444 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00027450 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0002745c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00027468 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00027474 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00027480 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0002748c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00027498 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000274a4 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000274b4 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000274c0 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000274d0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000274e0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000274f0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00027500 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00027510 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00027528 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00027540 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00027558 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00027568 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00027578 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00027588 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00027598 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000275a8 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000275b8 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000275c8 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000275d8 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000275e8 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000275f8 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00027610 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00027620 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00027634 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00027644 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00027650 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0002765c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00027668 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002c418 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00027674 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00027684 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00027698 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000276ac l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000276bc l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000276cc l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000276d8 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000276ec l     O .rodata	00000009 _ZL17pstrUsageElevator
000276f8 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002c420 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00027708 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00027714 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00027720 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00027730 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00027740 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002c428 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0002774c l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00027758 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00027764 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002c430 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002c438 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002c440 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002c448 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00027770 l     O .rodata	00000009 _ZL17pstrUsageSteering
0002777c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00027788 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00027794 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002c450 l     O .rwdata	00000008 _ZL16pstrUsageBallast
000277a0 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000277b0 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000277bc l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000277c8 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002c458 l     O .rwdata	00000005 _ZL13pstrUsageBelt
000277d4 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002c460 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002c468 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000277e0 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000277ec l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000277f8 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00027804 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002c470 l     O .rwdata	00000005 _ZL13pstrUsageVest
00027810 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0002781c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00027828 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00027838 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00027848 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00027854 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00027860 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002c478 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002c47c l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002c484 l     O .rwdata	00000005 _ZL13pstrUsageRate
0002786c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00027878 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00027888 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00027898 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
000278a8 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
000278b4 l     O .rodata	0000000b _ZL18pstrUsageStickType
000278c0 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002c48c l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002c494 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002c49c l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002c4a4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002c4ac l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002c4b4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002c4bc l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002c4c4 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002c4cc l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002c4d4 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002c4dc l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002c4e4 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
000278cc l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000278d8 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000278e4 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002c4ec l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002c4f4 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002c4fc l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002c504 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002c50c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000278f0 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00027900 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002c514 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002c51c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
0002790c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
0002791c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
0002792c l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
0002793c l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
0002794c l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
0002795c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
0002796c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
0002797c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0002798c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002c520 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0002799c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002c528 l     O .rwdata	00000005 _ZL13pstrUsageBump
000279ac l     O .rodata	00000009 _ZL16pstrUsageNewGame
000279b8 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002c530 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
000279c4 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
000279d0 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002c538 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
000279dc l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
000279ec l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000279f8 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00027a04 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00027a10 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00027a24 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00027a34 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00027a44 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00027a50 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00027a5c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00027a74 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00027a88 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00027aa0 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00027ab4 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00027ac0 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00027acc l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002c540 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002c548 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002c550 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002c554 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002c55c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002c560 l     O .rwdata	00000005 _ZL13pstrUsageMute
00027ad8 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00027ae4 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00027af4 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002c568 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00027b04 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00027b14 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002c570 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002c578 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00027b20 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00027b34 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002c580 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002c584 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00027b40 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00027b54 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002c588 l     O .rwdata	00000005 _ZL13pstrUsageRing
00027b60 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00027b6c l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002c590 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002c598 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002c5a0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002c5a8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00027b78 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002c5b0 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002c5b8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00027b84 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00027b90 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00027b9c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00027ba8 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002c5bc l     O .rwdata	00000005 _ZL19pstrUsageConference
00027bb4 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002c5c4 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002c5cc l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002c5d4 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00027bc0 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002c5dc l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002c5e4 l     O .rwdata	00000006 _ZL14pstrUsageReady
00027bcc l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00027bd8 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002c5ec l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002c5f4 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002c5f8 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002c5fc l     O .rwdata	00000005 _ZL13pstrUsageStop
0002c604 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00027be4 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002c60c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002c614 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002c61c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002c620 l     O .rwdata	00000006 _ZL14pstrUsageError
00027bf0 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00027c00 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00027c14 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002c628 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00027c2c l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00027c38 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00027c48 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002c630 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00027c58 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00027c68 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00027c7c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00027c90 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00027ca4 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00027cb8 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002c638 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00027cc8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00027cd4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002c640 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00027ce0 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00027cec l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002c648 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00027cfc l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00027d08 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002c650 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002c658 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00027d14 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00027d20 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002c660 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002c668 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002c670 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002c678 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00027d2c l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002c680 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002c688 l     O .rwdata	00000005 _ZL13pstrUsagePark
00027d38 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00027d44 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002c690 l     O .rwdata	00000005 _ZL13pstrUsageLine
00027d50 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00027d5c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00027d68 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00027d74 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00027d80 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002c698 l     O .rwdata	00000005 _ZL13pstrUsageSend
00027d8c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00027d98 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00027da4 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00027db0 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00027dbc l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00027dc8 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002c6a0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00027dd8 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00027de8 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00027dfc l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00027e10 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00027e24 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00027e38 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00027e48 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00027e58 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00027e6c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00027e7c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00027e8c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00027e9c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00027ea8 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00027eb4 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00027ec0 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002c6a4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002c6ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002c6b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002c6b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002c6b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002c6bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002c6c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002c6c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002c6c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002c6cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002c6d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002c6d4 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002c6d8 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002c6dc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002c6e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002c6e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002c6e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00027ed4 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00027ee4 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00027ef0 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027efc l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002c6ec l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002c6f0 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002c6f8 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002c700 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002c708 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00027f08 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00027f14 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002c710 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00027f20 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002c718 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00027f2c l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002c720 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00027f38 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00027f44 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00027f50 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00027f5c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00027f68 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00027f78 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00027f88 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00027f94 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00027fa0 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002c728 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00027fb0 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00027fc0 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002c730 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002c738 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027fcc l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00027fd8 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00027fe4 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00027ff0 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00028000 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002c73c l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002c744 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0002800c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0002801c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00028028 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00028034 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00028040 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0002804c l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00028058 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00028064 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00028074 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00028080 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0002808c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00028098 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002c74c l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002c754 l     O .rwdata	00000005 _ZL13pstrUsageHelp
000280a8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
000280b8 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
000280c4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
000280d0 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
000280e0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
000280f0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002c75c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002c764 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00028100 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002c76c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002c774 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002c77c l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002c784 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002c78c l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0002810c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00028118 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002c794 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002c79c l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00028124 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00028130 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0002813c l     O .rodata	00000009 _ZL17pstrUsageTracking
00028148 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00028154 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002c7a4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00028160 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002c7ac l     O .rwdata	00000005 _ZL13pstrUsageMark
0002816c l     O .rodata	00000009 _ZL18pstrUsageClearMark
00028178 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00028184 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00028190 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
000281a0 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
000281b4 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
000281c4 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
000281d4 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
000281e0 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
000281ec l     O .rodata	0000000b _ZL18pstrUsageStopEject
000281f8 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00028204 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002c7b4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002c7b8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002c7c0 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002c7c8 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00028210 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0002821c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002c7d0 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002c7d8 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002c7dc l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002c7e4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002c7ec l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00028228 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00028234 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00028240 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0002824c l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002c7f4 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00028258 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00028264 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00028270 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0002827c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0002828c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002829c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000282a8 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
000282b4 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
000282c0 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002c7fc l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002c804 l     O .rwdata	00000007 _ZL15pstrUsageMotion
000282cc l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
000282d8 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002c80c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
000282e4 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
000282f4 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00028304 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00028310 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0002831c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00028328 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002c814 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002c81c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00028334 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00028340 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002834c l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00028358 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002c824 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00028368 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00028374 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002c82c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002c834 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002c83c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00028384 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00028390 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002839c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000283a8 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000283b4 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000283c4 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000283d8 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000283e4 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
000283f8 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00028408 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00028414 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00028424 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00028434 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00028444 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00028450 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00028460 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002846c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002847c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002848c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002849c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
000284ac l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
000284c0 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002c844 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
000284d0 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000284e4 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000284f8 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00028508 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00028518 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00028528 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00028534 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00028540 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002854c l     O .rodata	00000009 _ZL16pstrUsageALLogon
00028558 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00028564 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00028574 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002858c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00028598 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000285a4 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
000285b0 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
000285bc l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
000285c8 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000285d4 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000285e8 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002c84c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000285f4 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002c854 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00028600 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0002860c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0002861c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00028628 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00028638 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00028648 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00028658 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00028664 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00028670 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002867c l     O .rodata	00000009 _ZL16pstrUsageALClock
00028688 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00028698 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000286a4 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000286b0 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000286bc l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
000286c8 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000286dc l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000286ec l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000286f8 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0002870c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00028718 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00028728 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0002873c l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00028750 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00028764 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00028774 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002878c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000287a0 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
000287b0 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
000287c0 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002c85c l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002c864 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
000287d4 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002c86c l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002c874 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002c87c l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002c884 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000287e0 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002c88c l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002c894 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002c89c l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002c8a4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
000287ec l     O .rodata	00000009 _ZL16pstrUsageACPaste
000287f8 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002c8ac l     O .rwdata	00000008 _ZL15pstrUsageACFind
00028804 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00028814 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002c8b4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002c8bc l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002c8c4 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002c8cc l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002c8d4 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00028820 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0002882c l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0002883c l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002884c l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002c8dc l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00028858 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00028864 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00028870 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002c8e4 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002887c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00028888 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00028898 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
000288a4 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
000288b4 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
000288c4 l     O .rodata	0000000a _ZL17pstrUsageACScroll
000288d0 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
000288dc l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002c8ec l     O .rwdata	00000007 _ZL14pstrUsageACPan
000288ec l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000288f8 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00028908 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002c8f4 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002c8fc l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002c904 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002c90c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00028918 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00028924 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002c914 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00028930 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0002893c l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00028948 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00028954 l     O .rodata	0000000a _ZL17pstrUsageACResize
00028960 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0002896c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00028978 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00028984 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00028990 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002899c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
000289a8 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
000289b4 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
000289c4 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
000289d4 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
000289e4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000289f4 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00028a00 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00028a10 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00028a1c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00028a2c l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00028a3c l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00028a4c l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00028a58 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00028a64 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00028a70 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00028a7c l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002c91c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002c924 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00028a88 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002c92c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002c934 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00028a94 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002c93c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00028aa0 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00028ab0 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00028abc l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00028acc l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00028adc l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00028aec l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002c944 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002c94c l     O .rwdata	00000008 _ZL15pstrUsageACLock
00028af8 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002c954 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00028b04 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00028b10 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00028b20 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00028b2c l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00028b3c l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00028b48 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00028b54 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00028b60 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00028b6c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00028b78 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00028b84 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002c95c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002c964 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00028b90 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00028b9c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002c96c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00028bac l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00028bb8 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00028bc4 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00028bd4 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00028be4 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00028bf0 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00028bfc l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00028c08 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002c974 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00028c14 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00028c20 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00028c2c l     O .rodata	00000009 _ZL16pstrUsageACReply
00028c38 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00028c48 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002c97c l     O .rwdata	00000007 _ZL15pstrUsageACSend
00028c54 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002c984 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002c98c l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00028c60 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00028c6c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00028c78 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00028c84 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00028c90 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00028c9c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00028ca8 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00028cb4 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00028cc0 l     O .rodata	0000000a _ZL17pstrUsageACRename
00028ccc l     O .rodata	00000009 _ZL16pstrUsageACMerge
00028cd8 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00028ce4 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00028cf0 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00028cfc l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002c994 l     O .rwdata	00000004 _ZL12pstrUsagePen
00028d08 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00028d14 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00028d20 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00028d2c l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00028d38 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002c998 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00028d48 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002c9a0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00028d54 l     O .rodata	00000009 _ZL17pstrUsageArmature
00028d60 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00028d74 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002c9a8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002c9b0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002c9b8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00028d84 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00028d90 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00028d9c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002c9c0 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002c9c8 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002c9d0 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002c9d4 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00028da8 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00028db4 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00028dc4 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00028dd4 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002c9dc l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002c9e4 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002c9ec l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002c9f4 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00028de4 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002c9fc l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002ca04 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00028df0 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002ca0c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002ca14 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00028dfc l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00028e08 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00028e18 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00028e24 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00028e34 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00028e40 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00028e50 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00028e5c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00028e6c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00028e78 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00028e88 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00028e98 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00028ea4 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00028eb0 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00028ebc l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00028ec8 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00028ed4 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00028ee0 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028eec l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028efc l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00028f0c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002ca1c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002ca20 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002ca24 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002ca2c l     O .rwdata	00000005 _ZL16pstrUsageColumns
00028f18 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00028f24 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00028f30 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00028f3c l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002ca34 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00028f48 l     O .rodata	00000009 _ZL17pstrUsageFontData
00028f54 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00028f60 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00028f6c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028f7c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00028f8c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00028f9c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00028fa8 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00028fb4 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00028fc0 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028fcc l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00028fd8 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00028fe4 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00028ff0 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028ffc l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00029008 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00029018 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00029028 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00029038 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00029044 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00029050 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00029060 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002ca3c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002906c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002907c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002908c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00029098 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
000290a4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
000290b4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
000290c4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
000290d4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
000290e4 l     O .rodata	0000000a _ZL17pstrUsageBlitData
000290f0 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
000290fc l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00029108 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00029118 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00029128 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00029138 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00029148 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002ca44 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002ca4c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00029158 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002ca54 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002ca5c l     O .rwdata	00000005 _ZL13pstrUsageNext
0002ca64 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002ca6c l     O .rwdata	00000006 _ZL14pstrUsagePrint
00029164 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002ca74 l     O .rwdata	00000005 _ZL13pstrUsageCine
00029170 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002ca7c l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002ca84 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002917c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002918c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002919c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
000291ac l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
000291b8 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
000291c4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
000291d8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
000291ec l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00029200 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00029214 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00029224 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00029234 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00029240 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002924c l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002925c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002926a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002927a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0000a200 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a268 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b49c l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b540 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000b74c l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000b7a0 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000b82c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000b960 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000b9e8 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000bc14 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c4ec l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000c7d4 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0002fe4c l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000c88c l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000ca3c l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0002fce8 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000cd1c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0002fcf0 l     O .bss	00000004 fc_static
0000ce34 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000cef4 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
00029920 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000295fe l     O .rodata	00000010 zeroes.4389
0002960e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002961e l     O .rodata	00000010 zeroes.4404
000129f0 l     F .text	000000bc __sbprintf
0002962e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012c00 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00014758 l     F .text	00000008 __fp_unlock
0001476c l     F .text	0000019c __sinit.part.1
00014908 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002a16c l     O .rwdata	00000020 lc_ctype_charset
0002a14c l     O .rwdata	00000020 lc_message_charset
0002a18c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002965c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00029780 l     O .rodata	00000010 zeroes.4333
00029790 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
00018908 l     F .text	000000fc __sprint_r.part.0
000297a0 l     O .rodata	00000010 zeroes.4349
00019f44 l     F .text	000000bc __sbprintf
000297b0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0001ddb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001dec4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001df24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001e038 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001e120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001e28c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001e378 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001e554 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002cae4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001e7c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001e8ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001e9e8 l     F .text	00000034 alt_dev_reg
0002a36c l     O .rwdata	00000038 i2c_0
0002a3a4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001eac8 l     F .text	00000110 optional_irq_callback
0001ec28 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020904 l     F .text	0000020c altera_avalon_jtag_uart_irq
00020b10 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00021344 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000216dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021bcc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00021d2c l     F .text	0000003c alt_get_errno
00021d68 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002fd28 g     O .bss	00000004 alt_instruction_exception_handler
0000c994 g     F .text	00000028 __cxa_free_exception
00022b68  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ddb8 g     F .text	00000018 putchar
0000aff0 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
000169a4 g     F .text	00000074 _mprec_log10
00004894  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b43c g     F .text	00000018 _ZSt10unexpectedv
00016a90 g     F .text	0000008c __any_on
0001a650 g     F .text	00000054 _isatty_r
00029668 g     O .rodata	00000028 __mprec_tinytens
0001e490 g     F .text	0000007c alt_main
0000695c g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000ddd0 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
0002fe84 g     O .bss	00000100 alt_irq
0000cb30 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00009388 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001a6a4 g     F .text	00000060 _lseek_r
0000cfb0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002cafc g       *ABS*	00000000 __flash_rwdata_start
000062fc g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001c788 g     F .text	00000088 .hidden __eqdf2
00004894  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
00002920 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c5c0 g     F .text	00000084 __cxa_rethrow
0000cf3c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b478 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006ba0 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000cfa0 g     F .text	00000010 .hidden _Unwind_GetIP
0002ff84 g       *ABS*	00000000 __alt_heap_start
00008cc8  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000e19c g     F .text	0000005c _kill_r
00006f0c g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000dd74 g     F .text	0000003c printf
00022b8c  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001a764 g     F .text	0000009c _wcrtomb_r
0000df64 g     F .text	00000084 _signal_r
00006084  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
00017334 g     F .text	0000005c __sseek
00014ab8 g     F .text	00000010 __sinit
0001a000 g     F .text	00000140 __swbuf_r
000099fc g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000ca10 g     F .text	0000002c __cxa_free_dependent_exception
0000a344 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00004834  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
0001558c g     F .text	0000007c _setlocale_r
00029344  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00014910 g     F .text	00000078 __sfmoreglue
0001f320 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001e530 g     F .text	00000024 __malloc_unlock
0000cb30 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00008618 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000ad78 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008db0  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	00000764 _ZN3USB11ConfiguringEhhb
0000c7b4 g     F .text	00000020 _ZSt18uncaught_exceptionv
00020538 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
00009dd0 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000b06c g     F .text	00000020 __cxa_deleted_virtual
0001f0a4 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002d90  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00008e74 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
0000980c g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00015908 g     F .text	0000015c memmove
00005da0  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000cb08 g     F .text	00000004 _ZNSt9exceptionD2Ev
00014aa0 g     F .text	00000018 _cleanup
0000a090 g     F .text	00000088 _Z7controlv
0001fd88 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00015a64 g     F .text	000000a8 _Balloc
00003e94 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001c810 g     F .text	000000dc .hidden __gtdf2
00003f58 g     F .text	000000f8 _ZN7XBOXONE4PollEv
00029578  w    O .rodata	00000014 _ZTVSt13bad_exception
000223bc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001e804 g     F .text	00000078 times
00008d30  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000cfec g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002b420  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000859c g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004d60  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001a5f4 g     F .text	0000005c _fstat_r
000094d8 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0002fd00 g     O .bss	00000004 errno
00005ae0 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
000172b0 g     F .text	00000008 __seofread
00009084 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
00017568 g     F .text	000013a0 ___svfiprintf_internal_r
0000d1c8 g     F .text	00000074 .hidden _Unwind_Backtrace
0002fd14 g     O .bss	00000004 alt_argv
00003520 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00033404 g       *ABS*	00000000 _gp
0001e87c g     F .text	00000030 usleep
0002057c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00007f28 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002bbb8  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001e018 g     F .text	00000020 getpid
0000c2bc g     F .text	00000230 __cxa_call_unexpected
0000c644 g     F .text	00000008 __cxa_get_exception_ptr
0001f234 g     F .text	00000044 alt_avalon_i2c_is_busy
0002a1ec g     O .rwdata	00000180 alt_fd_list
00009234 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00022ad8  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00006f0c g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
0000466c g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ddb0 g     F .text	00000008 _putchar_r
0000d0dc g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0001efd8 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000cf6c g     F .text	00000018 .hidden _Unwind_GetCFA
0000b454 g     F .text	00000014 _ZSt13set_terminatePFvvE
0002187c g     F .text	00000090 alt_find_dev
00022acc  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
000106f0 g     F .text	00000008 _times_r
0000dad4 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00005e68  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000c9bc g     F .text	00000054 __cxa_allocate_dependent_exception
00014760 g     F .text	0000000c _cleanup_r
0000b104 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001dbc8 g     F .text	000000dc .hidden __floatsidf
00022b80  w    O .rodata	0000000c _ZTV13USBReadParser
00021cb0 g     F .text	0000007c alt_io_redirect
0001c8ec g     F .text	000000f4 .hidden __ltdf2
00004bb4  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
000229e8 g       *ABS*	00000000 __DTOR_END__
0000b11c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0001fbc8 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000de90 g     F .text	00000014 puts
000293cc  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000225ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007fb0 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000092bc g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
000171e8 g     F .text	00000074 __fpclassifyd
00009f58 g     F .text	00000138 _Z9MIDI_pollv
00016900 g     F .text	000000a4 __ratio
00019f28 g     F .text	0000001c __vfiprintf_internal
00007a2c g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00020d08 g     F .text	0000021c altera_avalon_jtag_uart_read
0000d2a0 g     F .text	00000014 malloc
0000dd44 g     F .text	00000030 _printf_r
0000cc38 g     F .text	00000064 .hidden __udivsi3
0001e074 g     F .text	000000ac isatty
0000dfe8 g     F .text	000000bc _raise_r
00009478 g     F .text	0000003c _ZN8MAX3421eC2Ev
000296b8 g     O .rodata	000000c8 __mprec_tens
00006c0c g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
00015608 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004b6c  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0001ee44 g     F .text	00000098 alt_avalon_i2c_enable
0002fcfc g     O .bss	00000004 __malloc_top_pad
0000e1f8 g     F .text	00000004 _getpid_r
0002046c g     F .text	00000068 alt_avalon_i2c_int_disable
0002fce0 g     O .bss	00000001 usb_task_state
0002cac4 g     O .rwdata	00000004 __mb_cur_max
00015638 g     F .text	0000000c _localeconv_r
0000a608 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003ec4 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
0000708c g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00015e98 g     F .text	0000003c __i2b
00014f3c g     F .text	000004c8 __sfvwrite_r
0000b29c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000e0a4 g     F .text	000000a8 __sigtramp_r
000082e4 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002e48  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000dea4 g     F .text	00000054 _sbrk_r
00029414  w    O .rodata	00000020 _ZTVSt9type_info
00004c64  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
0000911c g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001a704 g     F .text	00000060 _read_r
0000cb10 g     F .text	0000000c _ZNKSt9exception4whatEv
0002cadc g     O .rwdata	00000004 alt_max_fd
00006154 g     F .text	00000050 _Z9E_Notifycci
00008424 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001a2e8 g     F .text	000000f0 _fclose_r
00014728 g     F .text	00000030 fflush
00009e68 g     F .text	00000078 _Z6onInitv
0002fcf8 g     O .bss	00000004 __malloc_max_sbrked_mem
00009784 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0001ff94 g     F .text	00000210 alt_avalon_i2c_master_receive
00024fe8  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001b50c g     F .text	000008ac .hidden __adddf3
00029378  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004c90  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008b7c g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
000166a8 g     F .text	0000010c __b2d
0001af48 g     F .text	000005c4 .hidden __umoddi3
0001e3b4 g     F .text	000000dc lseek
00005e90  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b160 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000062ac g     F .text	00000028 _Z8E_Notifyhi
0000b048 g     F .text	00000004 _ZdlPv
000204d4 g     F .text	00000064 alt_avalon_i2c_int_enable
0002cab4 g     O .rwdata	00000004 _global_impure_ptr
0000a618 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00016c84 g     F .text	00000564 _realloc_r
0002ff84 g       *ABS*	00000000 __bss_end
00021adc g     F .text	000000f0 alt_iic_isr_register
000222b4 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000cf24 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001a94c g     F .text	000005fc .hidden __udivdi3
00020394 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001a550 g     F .text	00000024 _fputwc_r
00029690 g     O .rodata	00000028 __mprec_bigtens
00015c7c g     F .text	00000104 __s2b
0000d23c g     F .text	00000018 abort
0001dca4 g     F .text	000000a8 .hidden __floatunsidf
00024dac  w    O .rodata	00000014 _ZTS17MouseReportParser
000163e8 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00008dec  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
00003704 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000c700 g     F .text	000000b4 __cxa_end_catch
000091b0 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00014ad8 g     F .text	00000018 __fp_lock_all
00022bc4  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00021a90 g     F .text	0000004c alt_ic_irq_enabled
0000cb0c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00003114  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00005e40  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00022218 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00024f74  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0001ecc4 g     F .text	00000054 alt_avalon_i2c_register_callback
0002fd1c g     O .bss	00000004 alt_irq_active
0001ed18 g     F .text	000000ec alt_avalon_i2c_init
0000b414 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002a1c4 g     O .rwdata	00000028 alt_dev_null
0000a64c g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000060b8  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000cb38 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004f10  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
000032c0  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002be8 g     F .text	00000084 _ZN3USB7setConfEhhh
00008cc0 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00029470  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
000216bc g     F .text	00000020 alt_dcache_flush_all
00015d80 g     F .text	00000068 __hi0bits
00024ff4  w    O .rodata	0000000c _ZTI14MidiDescParser
000099d4 g     F .text	00000028 _Z10Vbus_powerb
0002ca9c  w    O .rwdata	00000008 _ZTISt9exception
0001db48 g     F .text	00000080 .hidden __fixdfsi
00024dc0  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a298  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002cafc g       *ABS*	00000000 __ram_rwdata_end
0000afec g     F .text	00000004 _ZNSt9type_infoD1Ev
0002cad4 g     O .rwdata	00000008 alt_dev_list
0000cb38 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001e8e8 g     F .text	00000100 write
00016b1c g     F .text	000000a0 _putc_r
00009e44 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0001f654 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000b000 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004d88  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
00020430 g     F .text	0000003c alt_avalon_i2c_int_clear
00008e48  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00022ab8  w    O .rodata	00000014 _ZTV11AddressPool
00029920 g       *ABS*	00000000 __ram_rodata_end
0001df60 g     F .text	000000b8 fstat
00002cc4  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001e15c g     F .text	00000130 kill
00006130  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001c8ec g     F .text	000000f4 .hidden __ledf2
00022bec  w    O .rodata	00000020 _ZTI7XBOXONE
0002cae8 g     O .rwdata	00000008 alt_avalon_i2c_list
00004af4  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00024d06 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
00016160 g     F .text	00000140 __pow5mult
000050dc  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
00018a1c g     F .text	0000150c ___vfiprintf_internal_r
0002fd0c g     O .bss	00000004 __nlocale_changed
0000cc9c g     F .text	00000058 .hidden __umodsi3
0000aff8 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
000048d0  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
00009ee0 g     F .text	00000078 _Z10MIDI_setupv
00002760 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b468 g     F .text	00000010 _ZSt13get_terminatev
0002ff84 g       *ABS*	00000000 end
00022b74  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004edc  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
00009698 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00006050  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000d1b0 g     F .text	00000018 .hidden _Unwind_DeleteException
00020844 g     F .text	000000c0 altera_avalon_jtag_uart_init
00005e18  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001ee04 g     F .text	00000040 alt_avalon_i2c_open
00024d1c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b1cc g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000a608 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002bbac g     O .rwdata	00000004 UsbDEBUGlvl
000229e0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001f7dc g     F .text	000000e8 alt_avalon_i2c_master_tx
000213bc g     F .text	0000007c alt_avalon_timer_sc_init
0001dd4c g     F .text	00000064 .hidden __clzsi2
0000b08c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00020f24 g     F .text	00000224 altera_avalon_jtag_uart_write
00014ac8 g     F .text	00000004 __sfp_lock_acquire
00029500  w    O .rodata	00000012 _ZTSSt13bad_exception
00015824 g     F .text	000000e4 memchr
000106f8 g     F .text	000022dc ___vfprintf_internal_r
0000e1fc g     F .text	00000058 _sprintf_r
00004834  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00014c2c g     F .text	00000310 _free_r
00021fb0 g     F .text	0000022c alt_printf
00015614 g     F .text	00000010 __locale_mb_cur_max
00022828 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0002fd08 g     O .bss	00000004 __mlocale_changed
0001ebd8 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002cabc g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003e9c g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0002fd20 g     O .bss	00000004 _alt_tick_rate
00029404  w    O .rodata	0000000d _ZTSSt9type_info
000201a4 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000b04c g     F .text	00000020 __cxa_pure_virtual
00022aa4  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00022c2c  w    O .rodata	00000010 _ZTS13USBReadParser
000205c8 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
000162a0 g     F .text	00000148 __lshift
00021148 g     F .text	000001fc alt_avalon_spi_command
0002fd24 g     O .bss	00000004 _alt_nticks
0000e160 g     F .text	00000018 signal
0001e590 g     F .text	00000104 read
00005608 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001ea54 g     F .text	00000074 alt_sys_init
00022b28  w    O .rodata	00000040 _ZTV7XBOXONE
00017398 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00022710 g     F .text	00000118 __register_exitproc
00002b54 g     F .text	00000094 _ZN3USB7setAddrEhhh
000061a4 g     F .text	00000084 _Z8E_NotifyPKci
00024fb0  w    O .rodata	0000000c _ZTV14MidiDescParser
00008d58  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00003354  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a388 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000601c  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00004d20  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001fa00 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00015ed4 g     F .text	0000028c __multiply
00002aac g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002bb9a g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00020bb0 g     F .text	00000068 altera_avalon_jtag_uart_close
00002cc4  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000ccf4 g     F .text	00000028 .hidden __mulsi3
00029920 g       *ABS*	00000000 __ram_rwdata_start
0000d00c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
000229e8 g       *ABS*	00000000 __ram_rodata_start
0002fe5c g     O .bss	00000028 __malloc_current_mallinfo
00004f78  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000d120 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
000167b4 g     F .text	0000014c __d2b
000295a0  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000afec g     F .text	00000004 _ZNSt9type_infoD2Ev
00008d08  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
0000498c  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002b40c  w    O .rwdata	00000008 _ZTI11AddressPool
0000cb3c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a584 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00025000  w    O .rodata	00000011 _ZTS14MidiDescParser
000293a4  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
000206e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000224e8 g     F .text	000000c4 alt_get_fd
00005824 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
00021564 g     F .text	00000158 alt_busy_sleep
000066fc g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002caac  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001a1b8 g     F .text	00000054 _close_r
00022694 g     F .text	0000007c memcmp
0001f278 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000207a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007b00 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
0002ff84 g       *ABS*	00000000 __alt_stack_base
000207f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000a344 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00007d68 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
000045cc g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00012aac g     F .text	00000154 __swsetup_r
0000d164 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0002fce4 g     O .bss	00000004 i2c_dev
0001bdb8 g     F .text	000009d0 .hidden __divdf3
0000a2e8  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00014988 g     F .text	00000118 __sfp
00016a18 g     F .text	00000078 __copybits
0000aff0 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00029d44 g     O .rwdata	00000408 __malloc_av_
00004950  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00014ad4 g     F .text	00000004 __sinit_lock_release
0001c9e0 g     F .text	0000086c .hidden __muldf3
0001725c g     F .text	00000054 __sread
00004f44  w    F .text	00000034 _ZN13USBReadParserC2Ev
00029564  w    O .rodata	00000014 _ZTVSt9exception
0000cb34 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002c90  w    F .text	00000034 _ZN11AddressPoolC2Ev
000223e0 g     F .text	00000108 alt_find_file
00004c38  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00021718 g     F .text	000000a4 alt_dev_llist_insert
0001e50c g     F .text	00000024 __malloc_lock
0001e718 g     F .text	000000b0 sbrk
0000e434 g     F .text	000022bc ___svfprintf_internal_r
0001f6a0 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0001f608 g     F .text	0000004c alt_avalon_i2c_check_nack
000294a0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c530 g     F .text	00000090 __cxa_throw
000146cc g     F .text	0000005c _fflush_r
0000cfd0 g     F .text	00000010 .hidden _Unwind_SetIP
00006b08 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001a20c g     F .text	000000dc _calloc_r
00022c18  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
000062d4 g     F .text	00000028 _Z8E_Notifydi
00007924 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
0002fcd8 g       *ABS*	00000000 __bss_start
0002b430  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000dc1c g     F .text	00000128 memset
00008424 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00005158  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000a118 g     F .text	000000e8 main
0000970c g     F .text	00000078 _ZN8MAX3421e5regRdEh
00009908 g     F .text	000000cc _ZN8MAX3421e5resetEv
0001f5d4 g     F .text	00000034 alt_avalon_i2c_master_target_set
0002fd18 g     O .bss	00000004 alt_envp
00022c3c  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0002fcf4 g     O .bss	00000004 __malloc_max_total_mem
00020740 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002fce1 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001a140 g     F .text	00000018 __swbuf
0000caf0 g     F .text	0000000c __cxa_get_globals_fast
000203ec g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00006db8 g     F .text	000000d4 _Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s
00009478 g     F .text	0000003c _ZN8MAX3421eC1Ev
00004f10  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002c6c  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00017390 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001a3d8 g     F .text	00000014 fclose
0000a310  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
000044a0 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
00006228 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00012e28 g     F .text	00001688 _dtoa_r
0000d2c8 g     F .text	0000080c _malloc_r
0001a8c0 g     F .text	00000030 __ascii_wctomb
0000cb1c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002cae0 g     O .rwdata	00000004 alt_errno
00024da0  w    O .rodata	0000000c _ZTI17MouseReportParser
0000e178 g     F .text	00000010 _init_signal
000029b4 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
000068b4 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
00029494  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00004710 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
00015404 g     F .text	000000c4 _fwalk
000094b4 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00003258  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000cb0c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00016bbc g     F .text	000000c8 putc
0000cb40 g     F .text	00000084 .hidden __divsi3
00025014  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00014b08 g     F .text	00000124 _malloc_trim_r
000229e8 g       *ABS*	00000000 __CTOR_END__
00004b30  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00008e14  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00024d54  w    O .rodata	00000028 _ZTV17MouseReportParser
0000e2c0 g     F .text	000000dc strcmp
00003520 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
000229e8 g       *ABS*	00000000 __flash_rodata_start
0002958c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a2c0  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
000229e8 g       *ABS*	00000000 __DTOR_LIST__
00024fbc  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001c788 g     F .text	00000088 .hidden __nedf2
0001ea1c g     F .text	00000038 alt_irq_init
0001e694 g     F .text	00000084 alt_release_fd
0000a354 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00022c0c  w    O .rodata	00000009 _ZTS7XBOXONE
0000e254 g     F .text	0000006c sprintf
000297c0 g     O .rodata	00000100 .hidden __clz_tab
0002fd04 g     O .bss	00000004 _PathLocale
00022648 g     F .text	00000014 atexit
0001a158 g     F .text	00000060 _write_r
00002898 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002e1c  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
00015644 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00024d28  w    O .rodata	0000002c _ZTV20KeyboardReportParser
0000988c g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000d004 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
000293d8  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000ca98 g     F .text	00000058 __cxa_call_terminate
0002cab8 g     O .rwdata	00000004 _impure_ptr
0002caa4  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00022af4  w    O .rodata	0000000e _ZTS11AddressPool
0002fd10 g     O .bss	00000004 alt_argc
00003458  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
000144b0 g     F .text	0000021c __sflush_r
00008e14  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
000030a8  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0002181c g     F .text	00000060 _do_dtors
0002fde8 g     O .bss	00000064 Midi
00015630 g     F .text	00000008 __locale_cjk_lang
0001f59c g     F .text	00000038 alt_avalon_i2c_master_target_get
0001f4ac g     F .text	000000f0 alt_avalon_i2c_send_address
0000b48c g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002c90  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
00016644 g     F .text	00000064 __ulp
0000cff4 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00014af0 g     F .text	00000018 __fp_unlock_all
00004f78  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
00004590 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004bd8  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002cacc g     O .rwdata	00000008 alt_fs_list
00029540  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00024d88  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004f44  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000cfe0 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004c04  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000c64c g     F .text	000000b4 __cxa_begin_catch
00004788 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b11c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b42c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00005df0  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001565c g     F .text	0000000c localeconv
00009bf8 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004db0  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000cb2c g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00020678 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002ca98 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00006e8c g     F .text	00000080 _Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00008f14 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
0002192c g     F .text	00000050 alt_ic_isr_register
0001eedc g     F .text	0000004c alt_avalon_i2c_disable
0000c934 g     F .text	00000060 __cxa_allocate_exception
0002936c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002cafc g       *ABS*	00000000 _edata
00004edc  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
0002ff84 g       *ABS*	00000000 _end
0000a774 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000bcbc g     F .text	00000600 __gxx_personality_sj0
0001a3ec g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00020c18 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002b428  w    O .rwdata	00000008 _ZTI13USBReadParser
0001ef28 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000cb08 g     F .text	00000004 _ZNSt9exceptionD1Ev
00021a04 g     F .text	0000008c alt_ic_irq_disable
00005d78  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
000172b8 g     F .text	0000007c __swrite
0002cac0 g     O .rwdata	00000004 __malloc_trim_threshold
00015624 g     F .text	0000000c __locale_msgcharset
0002265c g     F .text	00000038 exit
0000cf84 g     F .text	0000001c .hidden _Unwind_SetGR
00005dc8  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
000154c8 g     F .text	000000c4 _fwalk_reent
0000a4e8 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00016448 g     F .text	000001fc __mdiff
0000b354 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000cbc4 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00014acc g     F .text	00000004 __sfp_lock_release
00029514  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000060e0  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00004050 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0001f138 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009ae0 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
0001f3c8 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00024fc8  w    O .rodata	00000020 _ZTI9USBH_MIDI
00004418 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
000078ac g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001def0 g     F .text	00000034 _exit
00021438 g     F .text	0000012c alt_alarm_start
00024d7c  w    O .rodata	0000000c _ZTI20KeyboardReportParser
00007ec4 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000cf50 g     F .text	0000001c .hidden _Unwind_GetGR
0000cafc g     F .text	0000000c __cxa_get_globals
00006404 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
00015668 g     F .text	000001bc __smakebuf_r
0002ca94 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004b90  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000e39c g     F .text	00000098 strlen
0000def8 g     F .text	0000006c _init_signal_r
0002ca8c  w    O .rwdata	00000008 _ZTISt9type_info
00021e54 g     F .text	0000015c open
0001c810 g     F .text	000000dc .hidden __gedf2
000221dc g     F .text	0000003c alt_putchar
000294f0  w    O .rodata	0000000d _ZTSSt9exception
0000d254 g     F .text	0000004c clock
00006108  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
00009d6c g     F .text	00000064 _ZN8MAX3421e4TaskEv
00024d10 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009564 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002cac8 g     O .rwdata	00000004 __wctomb
0000cb28 g     F .text	00000004 _ZNSt9exceptionD0Ev
00018a04 g     F .text	00000018 __sprint_r
0002190c g     F .text	00000020 alt_icache_flush_all
0000cffc g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0002fd2c g     O .bss	000000bc Usb
0002caf0 g     O .rwdata	00000004 alt_priority_mask
00004950  w    F .text	0000003c _ZN11ByteSkipperC2Ev
0002197c g     F .text	00000088 alt_ic_irq_enable
000129d4 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001a8f0 g     F .text	0000005c _wctomb_r
0001d24c g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003d58 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00015de8 g     F .text	000000b0 __lo0bits
0002caf4 g     O .rwdata	00000008 alt_alarm_list
000217bc g     F .text	00000060 _do_ctors
00022bb8  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000e188 g     F .text	00000014 __sigtramp
00008fcc g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001a800 g     F .text	000000c0 wcrtomb
0001ddec g     F .text	000000d8 close
0002062c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00029520  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001e2f4 g     F .text	00000084 alt_load
0001f8c4 g     F .text	0000013c alt_avalon_i2c_master_rx
0000b004 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000049f4  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001a574 g     F .text	00000080 fputwc
0000e14c g     F .text	00000014 raise
0002bba0  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000d2b4 g     F .text	00000014 free
00014ad0 g     F .text	00000004 __sinit_lock_acquire
00015b34 g     F .text	00000148 __multadd
0000b12c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00015b0c g     F .text	00000028 _Bfree
00006658 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10bfa104 	addi	r2,r2,-380
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10bfa104 	addi	r2,r2,-380
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b24917 	ldw	r2,-14044(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b24917 	ldw	r2,-14044(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d68d0114 	ori	gp,gp,13316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     244:	10bf3614 	ori	r2,r2,64728

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18ffe114 	ori	r3,r3,65412

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001e2f40 	call	1e2f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001e4900 	call	1e490 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210a7a04 	addi	r4,r4,10728
     28c:	000de900 	call	de90 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210a7d04 	addi	r4,r4,10740
     2d0:	000de900 	call	de90 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210a8204 	addi	r4,r4,10760
     304:	000de900 	call	de90 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210a8504 	addi	r4,r4,10772
     340:	000de900 	call	de90 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210a8904 	addi	r4,r4,10788
     374:	000de900 	call	de90 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210a8d04 	addi	r4,r4,10804
     3b0:	000de900 	call	de90 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210a9004 	addi	r4,r4,10816
     3ec:	000de900 	call	de90 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210a9304 	addi	r4,r4,10828
     428:	000de900 	call	de90 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210a9604 	addi	r4,r4,10840
     464:	000de900 	call	de90 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210a9904 	addi	r4,r4,10852
     4a0:	000de900 	call	de90 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210a9d04 	addi	r4,r4,10868
     4dc:	000de900 	call	de90 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210aa104 	addi	r4,r4,10884
     510:	000de900 	call	de90 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000ccf40 	call	ccf4 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000cc380 	call	cc38 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000cc380 	call	cc38 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000cc380 	call	cc38 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000ccf40 	call	ccf4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000cc380 	call	cc38 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000cc380 	call	cc38 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000ccf40 	call	ccf4 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000cc380 	call	cc38 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000ccf40 	call	ccf4 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000ccf40 	call	ccf4 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000cc380 	call	cc38 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000ccf40 	call	ccf4 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000d2540 	call	d254 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000d2540 	call	d254 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000d2540 	call	d254 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00094780 	call	9478 <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	0002cc40 	call	2cc4 <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23545 	stb	r2,-14123(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23543 	ldbu	r2,-14123(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23545 	stb	r2,-14123(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002d900 	call	2d90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002d900 	call	2d90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002d900 	call	2d90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00095640 	call	9564 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	00097840 	call	9784 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00095640 	call	9564 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	0009d6c0 	call	9d6c <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00094b40 	call	94b4 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23543 	ldbu	r2,-14123(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23543 	ldbu	r2,-14123(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23615 	stw	r2,-14120(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23545 	stb	r2,-14123(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23543 	ldbu	r2,-14123(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23545 	stb	r2,-14123(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23617 	ldw	r2,-14120(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23545 	stb	r2,-14123(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23545 	stb	r2,-14123(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23545 	stb	r2,-14123(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23545 	stb	r2,-14123(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23615 	stw	r2,-14120(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23617 	ldw	r2,-14120(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23545 	stb	r2,-14123(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b23505 	stb	r2,-14124(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b23545 	stb	r2,-14123(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b23545 	stb	r2,-14123(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	0002d900 	call	2d90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	0002e480 	call	2e48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	0002d900 	call	2d90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	0002b540 	call	2b54 <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	00030a80 	call	30a8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	0002c6c0 	call	2c6c <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	0001a706 	br	274c <_ZN3USB11ConfiguringEhhb+0x750>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00028980 	call	2898 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff043 	ldbu	r2,-63(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff043 	ldbu	r2,-63(fp)
    222c:	00014706 	br	274c <_ZN3USB11ConfiguringEhhb+0x750>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2278:	e03ff005 	stb	zero,-64(fp)
    227c:	e0bff003 	ldbu	r2,-64(fp)
    2280:	10800428 	cmpgeui	r2,r2,16
    2284:	1000921e 	bne	r2,zero,24d0 <_ZN3USB11ConfiguringEhhb+0x4d4>
        		printf("%d\n", devConfigIndex);
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	100b883a 	mov	r5,r2
    2290:	010000b4 	movhi	r4,2
    2294:	210aa504 	addi	r4,r4,10900
    2298:	000dd740 	call	dd74 <printf>
        		printf("%X\n", devConfig[devConfigIndex]);
    229c:	e0bff003 	ldbu	r2,-64(fp)
    22a0:	e0fffc17 	ldw	r3,-16(fp)
    22a4:	10800784 	addi	r2,r2,30
    22a8:	1085883a 	add	r2,r2,r2
    22ac:	1085883a 	add	r2,r2,r2
    22b0:	1885883a 	add	r2,r3,r2
    22b4:	10800017 	ldw	r2,0(r2)
    22b8:	100b883a 	mov	r5,r2
    22bc:	010000b4 	movhi	r4,2
    22c0:	210aa604 	addi	r4,r4,10904
    22c4:	000dd740 	call	dd74 <printf>
                if(!devConfig[devConfigIndex]) continue; // no driver
    22c8:	e0bff003 	ldbu	r2,-64(fp)
    22cc:	e0fffc17 	ldw	r3,-16(fp)
    22d0:	10800784 	addi	r2,r2,30
    22d4:	1085883a 	add	r2,r2,r2
    22d8:	1085883a 	add	r2,r2,r2
    22dc:	1885883a 	add	r2,r3,r2
    22e0:	10800017 	ldw	r2,0(r2)
    22e4:	10007226 	beq	r2,zero,24b0 <_ZN3USB11ConfiguringEhhb+0x4b4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    22e8:	e0bff003 	ldbu	r2,-64(fp)
    22ec:	e0fffc17 	ldw	r3,-16(fp)
    22f0:	10800784 	addi	r2,r2,30
    22f4:	1085883a 	add	r2,r2,r2
    22f8:	1085883a 	add	r2,r2,r2
    22fc:	1885883a 	add	r2,r3,r2
    2300:	10800017 	ldw	r2,0(r2)
    2304:	10800017 	ldw	r2,0(r2)
    2308:	10800404 	addi	r2,r2,16
    230c:	10c00017 	ldw	r3,0(r2)
    2310:	e0bff003 	ldbu	r2,-64(fp)
    2314:	e13ffc17 	ldw	r4,-16(fp)
    2318:	10800784 	addi	r2,r2,30
    231c:	1085883a 	add	r2,r2,r2
    2320:	1085883a 	add	r2,r2,r2
    2324:	2085883a 	add	r2,r4,r2
    2328:	10800017 	ldw	r2,0(r2)
    232c:	1009883a 	mov	r4,r2
    2330:	183ee83a 	callr	r3
    2334:	10803fcc 	andi	r2,r2,255
    2338:	1004c03a 	cmpne	r2,r2,zero
    233c:	10803fcc 	andi	r2,r2,255
    2340:	10005d1e 	bne	r2,zero,24b8 <_ZN3USB11ConfiguringEhhb+0x4bc>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    2344:	e0bff003 	ldbu	r2,-64(fp)
    2348:	e0fffc17 	ldw	r3,-16(fp)
    234c:	10800784 	addi	r2,r2,30
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	1885883a 	add	r2,r3,r2
    235c:	10800017 	ldw	r2,0(r2)
    2360:	10800017 	ldw	r2,0(r2)
    2364:	10800804 	addi	r2,r2,32
    2368:	10c00017 	ldw	r3,0(r2)
    236c:	e0bff003 	ldbu	r2,-64(fp)
    2370:	e13ffc17 	ldw	r4,-16(fp)
    2374:	10800784 	addi	r2,r2,30
    2378:	1085883a 	add	r2,r2,r2
    237c:	1085883a 	add	r2,r2,r2
    2380:	2085883a 	add	r2,r4,r2
    2384:	10800017 	ldw	r2,0(r2)
    2388:	e13ff643 	ldbu	r4,-39(fp)
    238c:	200b883a 	mov	r5,r4
    2390:	1009883a 	mov	r4,r2
    2394:	183ee83a 	callr	r3
    2398:	10803fcc 	andi	r2,r2,255
    239c:	10003226 	beq	r2,zero,2468 <_ZN3USB11ConfiguringEhhb+0x46c>
    23a0:	e0bff003 	ldbu	r2,-64(fp)
    23a4:	e0fffc17 	ldw	r3,-16(fp)
    23a8:	10800784 	addi	r2,r2,30
    23ac:	1085883a 	add	r2,r2,r2
    23b0:	1085883a 	add	r2,r2,r2
    23b4:	1885883a 	add	r2,r3,r2
    23b8:	10800017 	ldw	r2,0(r2)
    23bc:	10800017 	ldw	r2,0(r2)
    23c0:	10800604 	addi	r2,r2,24
    23c4:	10c00017 	ldw	r3,0(r2)
    23c8:	e0bff003 	ldbu	r2,-64(fp)
    23cc:	e13ffc17 	ldw	r4,-16(fp)
    23d0:	10800784 	addi	r2,r2,30
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1085883a 	add	r2,r2,r2
    23dc:	2085883a 	add	r2,r4,r2
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	e13ff50b 	ldhu	r4,-44(fp)
    23e8:	e17ff58b 	ldhu	r5,-42(fp)
    23ec:	280d883a 	mov	r6,r5
    23f0:	200b883a 	mov	r5,r4
    23f4:	1009883a 	mov	r4,r2
    23f8:	183ee83a 	callr	r3
    23fc:	10803fcc 	andi	r2,r2,255
    2400:	1000171e 	bne	r2,zero,2460 <_ZN3USB11ConfiguringEhhb+0x464>
    2404:	e0bff003 	ldbu	r2,-64(fp)
    2408:	e0fffc17 	ldw	r3,-16(fp)
    240c:	10800784 	addi	r2,r2,30
    2410:	1085883a 	add	r2,r2,r2
    2414:	1085883a 	add	r2,r2,r2
    2418:	1885883a 	add	r2,r3,r2
    241c:	10800017 	ldw	r2,0(r2)
    2420:	10800017 	ldw	r2,0(r2)
    2424:	10800704 	addi	r2,r2,28
    2428:	10c00017 	ldw	r3,0(r2)
    242c:	e0bff003 	ldbu	r2,-64(fp)
    2430:	e13ffc17 	ldw	r4,-16(fp)
    2434:	10800784 	addi	r2,r2,30
    2438:	1085883a 	add	r2,r2,r2
    243c:	1085883a 	add	r2,r2,r2
    2440:	2085883a 	add	r2,r4,r2
    2444:	10800017 	ldw	r2,0(r2)
    2448:	e13ff603 	ldbu	r4,-40(fp)
    244c:	200b883a 	mov	r5,r4
    2450:	1009883a 	mov	r4,r2
    2454:	183ee83a 	callr	r3
    2458:	10803fcc 	andi	r2,r2,255
    245c:	10000226 	beq	r2,zero,2468 <_ZN3USB11ConfiguringEhhb+0x46c>
    2460:	00800044 	movi	r2,1
    2464:	00000106 	br	246c <_ZN3USB11ConfiguringEhhb+0x470>
    2468:	0005883a 	mov	r2,zero
    246c:	10803fcc 	andi	r2,r2,255
    2470:	10001226 	beq	r2,zero,24bc <_ZN3USB11ConfiguringEhhb+0x4c0>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2474:	e0fff003 	ldbu	r3,-64(fp)
    2478:	e13ffd03 	ldbu	r4,-12(fp)
    247c:	e17ffe03 	ldbu	r5,-8(fp)
    2480:	e0bfff03 	ldbu	r2,-4(fp)
    2484:	d8800015 	stw	r2,0(sp)
    2488:	280f883a 	mov	r7,r5
    248c:	200d883a 	mov	r6,r4
    2490:	180b883a 	mov	r5,r3
    2494:	e13ffc17 	ldw	r4,-16(fp)
    2498:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    249c:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    24a0:	e0bff043 	ldbu	r2,-63(fp)
    24a4:	10803460 	cmpeqi	r2,r2,209
    24a8:	10000826 	beq	r2,zero,24cc <_ZN3USB11ConfiguringEhhb+0x4d0>
    24ac:	00000306 	br	24bc <_ZN3USB11ConfiguringEhhb+0x4c0>
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
        		printf("%d\n", devConfigIndex);
        		printf("%X\n", devConfig[devConfigIndex]);
                if(!devConfig[devConfigIndex]) continue; // no driver
    24b0:	0001883a 	nop
    24b4:	00000106 	br	24bc <_ZN3USB11ConfiguringEhhb+0x4c0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    24b8:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    24bc:	e0bff003 	ldbu	r2,-64(fp)
    24c0:	10800044 	addi	r2,r2,1
    24c4:	e0bff005 	stb	r2,-64(fp)
    24c8:	003f6c06 	br	227c <__alt_data_end+0xfc00227c>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
    24cc:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
    24d0:	e0bff003 	ldbu	r2,-64(fp)
    24d4:	10800428 	cmpgeui	r2,r2,16
    24d8:	1000021e 	bne	r2,zero,24e4 <_ZN3USB11ConfiguringEhhb+0x4e8>
                return rcode;
    24dc:	e0bff043 	ldbu	r2,-63(fp)
    24e0:	00009a06 	br	274c <_ZN3USB11ConfiguringEhhb+0x750>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    24e4:	e03ff005 	stb	zero,-64(fp)
    24e8:	e0bff003 	ldbu	r2,-64(fp)
    24ec:	10800428 	cmpgeui	r2,r2,16
    24f0:	10008c1e 	bne	r2,zero,2724 <_ZN3USB11ConfiguringEhhb+0x728>
                if(!devConfig[devConfigIndex]) continue;
    24f4:	e0bff003 	ldbu	r2,-64(fp)
    24f8:	e0fffc17 	ldw	r3,-16(fp)
    24fc:	10800784 	addi	r2,r2,30
    2500:	1085883a 	add	r2,r2,r2
    2504:	1085883a 	add	r2,r2,r2
    2508:	1885883a 	add	r2,r3,r2
    250c:	10800017 	ldw	r2,0(r2)
    2510:	10007b26 	beq	r2,zero,2700 <_ZN3USB11ConfiguringEhhb+0x704>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2514:	e0bff003 	ldbu	r2,-64(fp)
    2518:	e0fffc17 	ldw	r3,-16(fp)
    251c:	10800784 	addi	r2,r2,30
    2520:	1085883a 	add	r2,r2,r2
    2524:	1085883a 	add	r2,r2,r2
    2528:	1885883a 	add	r2,r3,r2
    252c:	10800017 	ldw	r2,0(r2)
    2530:	10800017 	ldw	r2,0(r2)
    2534:	10800404 	addi	r2,r2,16
    2538:	10c00017 	ldw	r3,0(r2)
    253c:	e0bff003 	ldbu	r2,-64(fp)
    2540:	e13ffc17 	ldw	r4,-16(fp)
    2544:	10800784 	addi	r2,r2,30
    2548:	1085883a 	add	r2,r2,r2
    254c:	1085883a 	add	r2,r2,r2
    2550:	2085883a 	add	r2,r4,r2
    2554:	10800017 	ldw	r2,0(r2)
    2558:	1009883a 	mov	r4,r2
    255c:	183ee83a 	callr	r3
    2560:	10803fcc 	andi	r2,r2,255
    2564:	1004c03a 	cmpne	r2,r2,zero
    2568:	10803fcc 	andi	r2,r2,255
    256c:	1000661e 	bne	r2,zero,2708 <_ZN3USB11ConfiguringEhhb+0x70c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2570:	e0bff003 	ldbu	r2,-64(fp)
    2574:	e0fffc17 	ldw	r3,-16(fp)
    2578:	10800784 	addi	r2,r2,30
    257c:	1085883a 	add	r2,r2,r2
    2580:	1085883a 	add	r2,r2,r2
    2584:	1885883a 	add	r2,r3,r2
    2588:	10800017 	ldw	r2,0(r2)
    258c:	10800017 	ldw	r2,0(r2)
    2590:	10800804 	addi	r2,r2,32
    2594:	10c00017 	ldw	r3,0(r2)
    2598:	e0bff003 	ldbu	r2,-64(fp)
    259c:	e13ffc17 	ldw	r4,-16(fp)
    25a0:	10800784 	addi	r2,r2,30
    25a4:	1085883a 	add	r2,r2,r2
    25a8:	1085883a 	add	r2,r2,r2
    25ac:	2085883a 	add	r2,r4,r2
    25b0:	10800017 	ldw	r2,0(r2)
    25b4:	e13ff643 	ldbu	r4,-39(fp)
    25b8:	200b883a 	mov	r5,r4
    25bc:	1009883a 	mov	r4,r2
    25c0:	183ee83a 	callr	r3
    25c4:	10803fcc 	andi	r2,r2,255
    25c8:	10003226 	beq	r2,zero,2694 <_ZN3USB11ConfiguringEhhb+0x698>
    25cc:	e0bff003 	ldbu	r2,-64(fp)
    25d0:	e0fffc17 	ldw	r3,-16(fp)
    25d4:	10800784 	addi	r2,r2,30
    25d8:	1085883a 	add	r2,r2,r2
    25dc:	1085883a 	add	r2,r2,r2
    25e0:	1885883a 	add	r2,r3,r2
    25e4:	10800017 	ldw	r2,0(r2)
    25e8:	10800017 	ldw	r2,0(r2)
    25ec:	10800604 	addi	r2,r2,24
    25f0:	10c00017 	ldw	r3,0(r2)
    25f4:	e0bff003 	ldbu	r2,-64(fp)
    25f8:	e13ffc17 	ldw	r4,-16(fp)
    25fc:	10800784 	addi	r2,r2,30
    2600:	1085883a 	add	r2,r2,r2
    2604:	1085883a 	add	r2,r2,r2
    2608:	2085883a 	add	r2,r4,r2
    260c:	10800017 	ldw	r2,0(r2)
    2610:	e13ff50b 	ldhu	r4,-44(fp)
    2614:	e17ff58b 	ldhu	r5,-42(fp)
    2618:	280d883a 	mov	r6,r5
    261c:	200b883a 	mov	r5,r4
    2620:	1009883a 	mov	r4,r2
    2624:	183ee83a 	callr	r3
    2628:	10803fcc 	andi	r2,r2,255
    262c:	1000171e 	bne	r2,zero,268c <_ZN3USB11ConfiguringEhhb+0x690>
    2630:	e0bff003 	ldbu	r2,-64(fp)
    2634:	e0fffc17 	ldw	r3,-16(fp)
    2638:	10800784 	addi	r2,r2,30
    263c:	1085883a 	add	r2,r2,r2
    2640:	1085883a 	add	r2,r2,r2
    2644:	1885883a 	add	r2,r3,r2
    2648:	10800017 	ldw	r2,0(r2)
    264c:	10800017 	ldw	r2,0(r2)
    2650:	10800704 	addi	r2,r2,28
    2654:	10c00017 	ldw	r3,0(r2)
    2658:	e0bff003 	ldbu	r2,-64(fp)
    265c:	e13ffc17 	ldw	r4,-16(fp)
    2660:	10800784 	addi	r2,r2,30
    2664:	1085883a 	add	r2,r2,r2
    2668:	1085883a 	add	r2,r2,r2
    266c:	2085883a 	add	r2,r4,r2
    2670:	10800017 	ldw	r2,0(r2)
    2674:	e13ff603 	ldbu	r4,-40(fp)
    2678:	200b883a 	mov	r5,r4
    267c:	1009883a 	mov	r4,r2
    2680:	183ee83a 	callr	r3
    2684:	10803fcc 	andi	r2,r2,255
    2688:	10000226 	beq	r2,zero,2694 <_ZN3USB11ConfiguringEhhb+0x698>
    268c:	00800044 	movi	r2,1
    2690:	00000106 	br	2698 <_ZN3USB11ConfiguringEhhb+0x69c>
    2694:	0005883a 	mov	r2,zero
    2698:	10803fcc 	andi	r2,r2,255
    269c:	10001c1e 	bne	r2,zero,2710 <_ZN3USB11ConfiguringEhhb+0x714>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    26a0:	e0fff003 	ldbu	r3,-64(fp)
    26a4:	e13ffd03 	ldbu	r4,-12(fp)
    26a8:	e17ffe03 	ldbu	r5,-8(fp)
    26ac:	e0bfff03 	ldbu	r2,-4(fp)
    26b0:	d8800015 	stw	r2,0(sp)
    26b4:	280f883a 	mov	r7,r5
    26b8:	200d883a 	mov	r6,r4
    26bc:	180b883a 	mov	r5,r3
    26c0:	e13ffc17 	ldw	r4,-16(fp)
    26c4:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    26c8:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    26cc:	e0bff043 	ldbu	r2,-63(fp)
    26d0:	10803460 	cmpeqi	r2,r2,209
    26d4:	10000f1e 	bne	r2,zero,2714 <_ZN3USB11ConfiguringEhhb+0x718>
    26d8:	e0bff043 	ldbu	r2,-63(fp)
    26dc:	10803660 	cmpeqi	r2,r2,217
    26e0:	10000c1e 	bne	r2,zero,2714 <_ZN3USB11ConfiguringEhhb+0x718>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                	printf("2: %X\n", rcode);
    26e4:	e0bff043 	ldbu	r2,-63(fp)
    26e8:	100b883a 	mov	r5,r2
    26ec:	010000b4 	movhi	r4,2
    26f0:	210aa704 	addi	r4,r4,10908
    26f4:	000dd740 	call	dd74 <printf>
                        return rcode;
    26f8:	e0bff043 	ldbu	r2,-63(fp)
    26fc:	00001306 	br	274c <_ZN3USB11ConfiguringEhhb+0x750>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    2700:	0001883a 	nop
    2704:	00000306 	br	2714 <_ZN3USB11ConfiguringEhhb+0x718>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2708:	0001883a 	nop
    270c:	00000106 	br	2714 <_ZN3USB11ConfiguringEhhb+0x718>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2710:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2714:	e0bff003 	ldbu	r2,-64(fp)
    2718:	10800044 	addi	r2,r2,1
    271c:	e0bff005 	stb	r2,-64(fp)
    2720:	003f7106 	br	24e8 <__alt_data_end+0xfc0024e8>
                	printf("2: %X\n", rcode);
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    2724:	e0bffd03 	ldbu	r2,-12(fp)
    2728:	e0fffe03 	ldbu	r3,-8(fp)
    272c:	e13fff03 	ldbu	r4,-4(fp)
    2730:	200f883a 	mov	r7,r4
    2734:	180d883a 	mov	r6,r3
    2738:	100b883a 	mov	r5,r2
    273c:	e13ffc17 	ldw	r4,-16(fp)
    2740:	0001c0c0 	call	1c0c <_ZN3USB17DefaultAddressingEhhb>
    2744:	e0bff045 	stb	r2,-63(fp)

        return rcode;
    2748:	e0bff043 	ldbu	r2,-63(fp)
}
    274c:	e037883a 	mov	sp,fp
    2750:	dfc00117 	ldw	ra,4(sp)
    2754:	df000017 	ldw	fp,0(sp)
    2758:	dec00204 	addi	sp,sp,8
    275c:	f800283a 	ret

00002760 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    2760:	defffb04 	addi	sp,sp,-20
    2764:	dfc00415 	stw	ra,16(sp)
    2768:	df000315 	stw	fp,12(sp)
    276c:	df000304 	addi	fp,sp,12
    2770:	e13ffe15 	stw	r4,-8(fp)
    2774:	2805883a 	mov	r2,r5
    2778:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    277c:	e0bfff03 	ldbu	r2,-4(fp)
    2780:	1000021e 	bne	r2,zero,278c <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    2784:	0005883a 	mov	r2,zero
    2788:	00003e06 	br	2884 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    278c:	e03ffd05 	stb	zero,-12(fp)
    2790:	e0bffd03 	ldbu	r2,-12(fp)
    2794:	10800428 	cmpgeui	r2,r2,16
    2798:	1000391e 	bne	r2,zero,2880 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    279c:	e0bffd03 	ldbu	r2,-12(fp)
    27a0:	e0fffe17 	ldw	r3,-8(fp)
    27a4:	10800784 	addi	r2,r2,30
    27a8:	1085883a 	add	r2,r2,r2
    27ac:	1085883a 	add	r2,r2,r2
    27b0:	1885883a 	add	r2,r3,r2
    27b4:	10800017 	ldw	r2,0(r2)
    27b8:	10002c26 	beq	r2,zero,286c <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    27bc:	e0bffd03 	ldbu	r2,-12(fp)
    27c0:	e0fffe17 	ldw	r3,-8(fp)
    27c4:	10800784 	addi	r2,r2,30
    27c8:	1085883a 	add	r2,r2,r2
    27cc:	1085883a 	add	r2,r2,r2
    27d0:	1885883a 	add	r2,r3,r2
    27d4:	10800017 	ldw	r2,0(r2)
    27d8:	10800017 	ldw	r2,0(r2)
    27dc:	10800404 	addi	r2,r2,16
    27e0:	10c00017 	ldw	r3,0(r2)
    27e4:	e0bffd03 	ldbu	r2,-12(fp)
    27e8:	e13ffe17 	ldw	r4,-8(fp)
    27ec:	10800784 	addi	r2,r2,30
    27f0:	1085883a 	add	r2,r2,r2
    27f4:	1085883a 	add	r2,r2,r2
    27f8:	2085883a 	add	r2,r4,r2
    27fc:	10800017 	ldw	r2,0(r2)
    2800:	1009883a 	mov	r4,r2
    2804:	183ee83a 	callr	r3
    2808:	10c03fcc 	andi	r3,r2,255
    280c:	e0bfff03 	ldbu	r2,-4(fp)
    2810:	1885003a 	cmpeq	r2,r3,r2
    2814:	10803fcc 	andi	r2,r2,255
    2818:	10001526 	beq	r2,zero,2870 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    281c:	e0bffd03 	ldbu	r2,-12(fp)
    2820:	e0fffe17 	ldw	r3,-8(fp)
    2824:	10800784 	addi	r2,r2,30
    2828:	1085883a 	add	r2,r2,r2
    282c:	1085883a 	add	r2,r2,r2
    2830:	1885883a 	add	r2,r3,r2
    2834:	10800017 	ldw	r2,0(r2)
    2838:	10800017 	ldw	r2,0(r2)
    283c:	10800204 	addi	r2,r2,8
    2840:	10c00017 	ldw	r3,0(r2)
    2844:	e0bffd03 	ldbu	r2,-12(fp)
    2848:	e13ffe17 	ldw	r4,-8(fp)
    284c:	10800784 	addi	r2,r2,30
    2850:	1085883a 	add	r2,r2,r2
    2854:	1085883a 	add	r2,r2,r2
    2858:	2085883a 	add	r2,r4,r2
    285c:	10800017 	ldw	r2,0(r2)
    2860:	1009883a 	mov	r4,r2
    2864:	183ee83a 	callr	r3
    2868:	00000606 	br	2884 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    286c:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2870:	e0bffd03 	ldbu	r2,-12(fp)
    2874:	10800044 	addi	r2,r2,1
    2878:	e0bffd05 	stb	r2,-12(fp)
    287c:	003fc406 	br	2790 <__alt_data_end+0xfc002790>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    2880:	0005883a 	mov	r2,zero
}
    2884:	e037883a 	mov	sp,fp
    2888:	dfc00117 	ldw	ra,4(sp)
    288c:	df000017 	ldw	fp,0(sp)
    2890:	dec00204 	addi	sp,sp,8
    2894:	f800283a 	ret

00002898 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2898:	defff204 	addi	sp,sp,-56
    289c:	dfc00d15 	stw	ra,52(sp)
    28a0:	df000c15 	stw	fp,48(sp)
    28a4:	df000c04 	addi	fp,sp,48
    28a8:	e13ffc15 	stw	r4,-16(fp)
    28ac:	2809883a 	mov	r4,r5
    28b0:	3007883a 	mov	r3,r6
    28b4:	3805883a 	mov	r2,r7
    28b8:	e13ffd05 	stb	r4,-12(fp)
    28bc:	e0fffe05 	stb	r3,-8(fp)
    28c0:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    28c4:	e17ffd03 	ldbu	r5,-12(fp)
    28c8:	e1bffe03 	ldbu	r6,-8(fp)
    28cc:	e0bfff0b 	ldhu	r2,-4(fp)
    28d0:	e0ffff0b 	ldhu	r3,-4(fp)
    28d4:	d8000715 	stw	zero,28(sp)
    28d8:	e1000217 	ldw	r4,8(fp)
    28dc:	d9000615 	stw	r4,24(sp)
    28e0:	d8c00515 	stw	r3,20(sp)
    28e4:	d8800415 	stw	r2,16(sp)
    28e8:	d8000315 	stw	zero,12(sp)
    28ec:	00800044 	movi	r2,1
    28f0:	d8800215 	stw	r2,8(sp)
    28f4:	d8000115 	stw	zero,4(sp)
    28f8:	00800184 	movi	r2,6
    28fc:	d8800015 	stw	r2,0(sp)
    2900:	01c02004 	movi	r7,128
    2904:	e13ffc17 	ldw	r4,-16(fp)
    2908:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    290c:	e037883a 	mov	sp,fp
    2910:	dfc00117 	ldw	ra,4(sp)
    2914:	df000017 	ldw	fp,0(sp)
    2918:	dec00204 	addi	sp,sp,8
    291c:	f800283a 	ret

00002920 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    2920:	defff104 	addi	sp,sp,-60
    2924:	dfc00e15 	stw	ra,56(sp)
    2928:	df000d15 	stw	fp,52(sp)
    292c:	df000d04 	addi	fp,sp,52
    2930:	e13ffb15 	stw	r4,-20(fp)
    2934:	3009883a 	mov	r4,r6
    2938:	3807883a 	mov	r3,r7
    293c:	e0800217 	ldw	r2,8(fp)
    2940:	e17ffc05 	stb	r5,-16(fp)
    2944:	e13ffd05 	stb	r4,-12(fp)
    2948:	e0fffe0d 	sth	r3,-8(fp)
    294c:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    2950:	e23ffc03 	ldbu	r8,-16(fp)
    2954:	e1bffd03 	ldbu	r6,-12(fp)
    2958:	e0bfff03 	ldbu	r2,-4(fp)
    295c:	e0fffe0b 	ldhu	r3,-8(fp)
    2960:	e13ffe0b 	ldhu	r4,-8(fp)
    2964:	d8000715 	stw	zero,28(sp)
    2968:	e1400317 	ldw	r5,12(fp)
    296c:	d9400615 	stw	r5,24(sp)
    2970:	d9000515 	stw	r4,20(sp)
    2974:	d8c00415 	stw	r3,16(sp)
    2978:	d8000315 	stw	zero,12(sp)
    297c:	00c00084 	movi	r3,2
    2980:	d8c00215 	stw	r3,8(sp)
    2984:	d8800115 	stw	r2,4(sp)
    2988:	00800184 	movi	r2,6
    298c:	d8800015 	stw	r2,0(sp)
    2990:	01c02004 	movi	r7,128
    2994:	400b883a 	mov	r5,r8
    2998:	e13ffb17 	ldw	r4,-20(fp)
    299c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    29a0:	e037883a 	mov	sp,fp
    29a4:	dfc00117 	ldw	ra,4(sp)
    29a8:	df000017 	ldw	fp,0(sp)
    29ac:	dec00204 	addi	sp,sp,8
    29b0:	f800283a 	ret

000029b4 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    29b4:	deffdf04 	addi	sp,sp,-132
    29b8:	dfc02015 	stw	ra,128(sp)
    29bc:	df001f15 	stw	fp,124(sp)
    29c0:	df001f04 	addi	fp,sp,124
    29c4:	e13ffc15 	stw	r4,-16(fp)
    29c8:	2809883a 	mov	r4,r5
    29cc:	3007883a 	mov	r3,r6
    29d0:	3805883a 	mov	r2,r7
    29d4:	e13ffd05 	stb	r4,-12(fp)
    29d8:	e0fffe05 	stb	r3,-8(fp)
    29dc:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    29e0:	00801004 	movi	r2,64
    29e4:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    29e8:	e0bfec04 	addi	r2,fp,-80
    29ec:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    29f0:	e13ffd03 	ldbu	r4,-12(fp)
    29f4:	e17ffe03 	ldbu	r5,-8(fp)
    29f8:	e0bfff03 	ldbu	r2,-4(fp)
    29fc:	e0ffec04 	addi	r3,fp,-80
    2a00:	d8c00115 	stw	r3,4(sp)
    2a04:	d8800015 	stw	r2,0(sp)
    2a08:	01c00244 	movi	r7,9
    2a0c:	280d883a 	mov	r6,r5
    2a10:	200b883a 	mov	r5,r4
    2a14:	e13ffc17 	ldw	r4,-16(fp)
    2a18:	00029200 	call	2920 <_ZN3USB12getConfDescrEhhthPh>
    2a1c:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    2a20:	e0bfeb03 	ldbu	r2,-84(fp)
    2a24:	10000226 	beq	r2,zero,2a30 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    2a28:	e0bfeb03 	ldbu	r2,-84(fp)
    2a2c:	00001a06 	br	2a98 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    2a30:	e0bfea17 	ldw	r2,-88(fp)
    2a34:	10c00083 	ldbu	r3,2(r2)
    2a38:	108000c3 	ldbu	r2,3(r2)
    2a3c:	1004923a 	slli	r2,r2,8
    2a40:	10c4b03a 	or	r2,r2,r3
    2a44:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    2a48:	e17ffd03 	ldbu	r5,-12(fp)
    2a4c:	e1bffe03 	ldbu	r6,-8(fp)
    2a50:	e0bfff03 	ldbu	r2,-4(fp)
    2a54:	e0ffeb8b 	ldhu	r3,-82(fp)
    2a58:	e1000217 	ldw	r4,8(fp)
    2a5c:	d9000715 	stw	r4,28(sp)
    2a60:	e13fec04 	addi	r4,fp,-80
    2a64:	d9000615 	stw	r4,24(sp)
    2a68:	01001004 	movi	r4,64
    2a6c:	d9000515 	stw	r4,20(sp)
    2a70:	d8c00415 	stw	r3,16(sp)
    2a74:	d8000315 	stw	zero,12(sp)
    2a78:	00c00084 	movi	r3,2
    2a7c:	d8c00215 	stw	r3,8(sp)
    2a80:	d8800115 	stw	r2,4(sp)
    2a84:	00800184 	movi	r2,6
    2a88:	d8800015 	stw	r2,0(sp)
    2a8c:	01c02004 	movi	r7,128
    2a90:	e13ffc17 	ldw	r4,-16(fp)
    2a94:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2a98:	e037883a 	mov	sp,fp
    2a9c:	dfc00117 	ldw	ra,4(sp)
    2aa0:	df000017 	ldw	fp,0(sp)
    2aa4:	dec00204 	addi	sp,sp,8
    2aa8:	f800283a 	ret

00002aac <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2aac:	defff004 	addi	sp,sp,-64
    2ab0:	dfc00f15 	stw	ra,60(sp)
    2ab4:	df000e15 	stw	fp,56(sp)
    2ab8:	df000e04 	addi	fp,sp,56
    2abc:	e13ffa15 	stw	r4,-24(fp)
    2ac0:	2811883a 	mov	r8,r5
    2ac4:	300b883a 	mov	r5,r6
    2ac8:	3809883a 	mov	r4,r7
    2acc:	e0c00217 	ldw	r3,8(fp)
    2ad0:	e0800317 	ldw	r2,12(fp)
    2ad4:	e23ffb05 	stb	r8,-20(fp)
    2ad8:	e17ffc05 	stb	r5,-16(fp)
    2adc:	e13ffd0d 	sth	r4,-12(fp)
    2ae0:	e0fffe05 	stb	r3,-8(fp)
    2ae4:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2ae8:	e23ffb03 	ldbu	r8,-20(fp)
    2aec:	e27ffc03 	ldbu	r9,-16(fp)
    2af0:	e0bffe03 	ldbu	r2,-8(fp)
    2af4:	e0ffff0b 	ldhu	r3,-4(fp)
    2af8:	e13ffd0b 	ldhu	r4,-12(fp)
    2afc:	e17ffd0b 	ldhu	r5,-12(fp)
    2b00:	d8000715 	stw	zero,28(sp)
    2b04:	e1800417 	ldw	r6,16(fp)
    2b08:	d9800615 	stw	r6,24(sp)
    2b0c:	d9400515 	stw	r5,20(sp)
    2b10:	d9000415 	stw	r4,16(sp)
    2b14:	d8c00315 	stw	r3,12(sp)
    2b18:	00c000c4 	movi	r3,3
    2b1c:	d8c00215 	stw	r3,8(sp)
    2b20:	d8800115 	stw	r2,4(sp)
    2b24:	00800184 	movi	r2,6
    2b28:	d8800015 	stw	r2,0(sp)
    2b2c:	01c02004 	movi	r7,128
    2b30:	480d883a 	mov	r6,r9
    2b34:	400b883a 	mov	r5,r8
    2b38:	e13ffa17 	ldw	r4,-24(fp)
    2b3c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2b40:	e037883a 	mov	sp,fp
    2b44:	dfc00117 	ldw	ra,4(sp)
    2b48:	df000017 	ldw	fp,0(sp)
    2b4c:	dec00204 	addi	sp,sp,8
    2b50:	f800283a 	ret

00002b54 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    2b54:	defff104 	addi	sp,sp,-60
    2b58:	dfc00e15 	stw	ra,56(sp)
    2b5c:	df000d15 	stw	fp,52(sp)
    2b60:	df000d04 	addi	fp,sp,52
    2b64:	e13ffc15 	stw	r4,-16(fp)
    2b68:	2809883a 	mov	r4,r5
    2b6c:	3007883a 	mov	r3,r6
    2b70:	3805883a 	mov	r2,r7
    2b74:	e13ffd05 	stb	r4,-12(fp)
    2b78:	e0fffe05 	stb	r3,-8(fp)
    2b7c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2b80:	e0fffd03 	ldbu	r3,-12(fp)
    2b84:	e13ffe03 	ldbu	r4,-8(fp)
    2b88:	e0bfff03 	ldbu	r2,-4(fp)
    2b8c:	d8000715 	stw	zero,28(sp)
    2b90:	d8000615 	stw	zero,24(sp)
    2b94:	d8000515 	stw	zero,20(sp)
    2b98:	d8000415 	stw	zero,16(sp)
    2b9c:	d8000315 	stw	zero,12(sp)
    2ba0:	d8000215 	stw	zero,8(sp)
    2ba4:	d8800115 	stw	r2,4(sp)
    2ba8:	00800144 	movi	r2,5
    2bac:	d8800015 	stw	r2,0(sp)
    2bb0:	000f883a 	mov	r7,zero
    2bb4:	200d883a 	mov	r6,r4
    2bb8:	180b883a 	mov	r5,r3
    2bbc:	e13ffc17 	ldw	r4,-16(fp)
    2bc0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2bc4:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2bc8:	01004b04 	movi	r4,300
    2bcc:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2bd0:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2bd4:	e037883a 	mov	sp,fp
    2bd8:	dfc00117 	ldw	ra,4(sp)
    2bdc:	df000017 	ldw	fp,0(sp)
    2be0:	dec00204 	addi	sp,sp,8
    2be4:	f800283a 	ret

00002be8 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2be8:	defff204 	addi	sp,sp,-56
    2bec:	dfc00d15 	stw	ra,52(sp)
    2bf0:	df000c15 	stw	fp,48(sp)
    2bf4:	df000c04 	addi	fp,sp,48
    2bf8:	e13ffc15 	stw	r4,-16(fp)
    2bfc:	2809883a 	mov	r4,r5
    2c00:	3007883a 	mov	r3,r6
    2c04:	3805883a 	mov	r2,r7
    2c08:	e13ffd05 	stb	r4,-12(fp)
    2c0c:	e0fffe05 	stb	r3,-8(fp)
    2c10:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2c14:	e0fffd03 	ldbu	r3,-12(fp)
    2c18:	e13ffe03 	ldbu	r4,-8(fp)
    2c1c:	e0bfff03 	ldbu	r2,-4(fp)
    2c20:	d8000715 	stw	zero,28(sp)
    2c24:	d8000615 	stw	zero,24(sp)
    2c28:	d8000515 	stw	zero,20(sp)
    2c2c:	d8000415 	stw	zero,16(sp)
    2c30:	d8000315 	stw	zero,12(sp)
    2c34:	d8000215 	stw	zero,8(sp)
    2c38:	d8800115 	stw	r2,4(sp)
    2c3c:	00800244 	movi	r2,9
    2c40:	d8800015 	stw	r2,0(sp)
    2c44:	000f883a 	mov	r7,zero
    2c48:	200d883a 	mov	r6,r4
    2c4c:	180b883a 	mov	r5,r3
    2c50:	e13ffc17 	ldw	r4,-16(fp)
    2c54:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2c58:	e037883a 	mov	sp,fp
    2c5c:	dfc00117 	ldw	ra,4(sp)
    2c60:	df000017 	ldw	fp,0(sp)
    2c64:	dec00204 	addi	sp,sp,8
    2c68:	f800283a 	ret

00002c6c <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2c6c:	defffe04 	addi	sp,sp,-8
    2c70:	df000115 	stw	fp,4(sp)
    2c74:	df000104 	addi	fp,sp,4
    2c78:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2c7c:	e0bfff17 	ldw	r2,-4(fp)
        };
    2c80:	e037883a 	mov	sp,fp
    2c84:	df000017 	ldw	fp,0(sp)
    2c88:	dec00104 	addi	sp,sp,4
    2c8c:	f800283a 	ret

00002c90 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2c90:	defffe04 	addi	sp,sp,-8
    2c94:	df000115 	stw	fp,4(sp)
    2c98:	df000104 	addi	fp,sp,4
    2c9c:	e13fff15 	stw	r4,-4(fp)
    2ca0:	008000b4 	movhi	r2,2
    2ca4:	108ab004 	addi	r2,r2,10944
    2ca8:	e0ffff17 	ldw	r3,-4(fp)
    2cac:	18800015 	stw	r2,0(r3)
    2cb0:	0001883a 	nop
    2cb4:	e037883a 	mov	sp,fp
    2cb8:	df000017 	ldw	fp,0(sp)
    2cbc:	dec00104 	addi	sp,sp,4
    2cc0:	f800283a 	ret

00002cc4 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2cc4:	defffd04 	addi	sp,sp,-12
    2cc8:	dfc00215 	stw	ra,8(sp)
    2ccc:	df000115 	stw	fp,4(sp)
    2cd0:	df000104 	addi	fp,sp,4
    2cd4:	e13fff15 	stw	r4,-4(fp)
    2cd8:	e0bfff17 	ldw	r2,-4(fp)
    2cdc:	1009883a 	mov	r4,r2
    2ce0:	0002c900 	call	2c90 <_ZN11AddressPoolC1Ev>
    2ce4:	008000b4 	movhi	r2,2
    2ce8:	108aab04 	addi	r2,r2,10924
    2cec:	e0ffff17 	ldw	r3,-4(fp)
    2cf0:	18800015 	stw	r2,0(r3)
    2cf4:	e0bfff17 	ldw	r2,-4(fp)
    2cf8:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2cfc:	000b883a 	mov	r5,zero
    2d00:	e13fff17 	ldw	r4,-4(fp)
    2d04:	00031140 	call	3114 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    2d08:	e0bfff17 	ldw	r2,-4(fp)
    2d0c:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2d10:	e0bfff17 	ldw	r2,-4(fp)
    2d14:	10c00104 	addi	r3,r2,4
    2d18:	e0bfff17 	ldw	r2,-4(fp)
    2d1c:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    2d20:	e0bfff17 	ldw	r2,-4(fp)
    2d24:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    2d28:	e0bfff17 	ldw	r2,-4(fp)
    2d2c:	00c00204 	movi	r3,8
    2d30:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    2d34:	e0bfff17 	ldw	r2,-4(fp)
    2d38:	11000183 	ldbu	r4,6(r2)
    2d3c:	00ffff84 	movi	r3,-2
    2d40:	20c6703a 	and	r3,r4,r3
    2d44:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    2d48:	e0bfff17 	ldw	r2,-4(fp)
    2d4c:	11000183 	ldbu	r4,6(r2)
    2d50:	00ffff44 	movi	r3,-3
    2d54:	20c6703a 	and	r3,r4,r3
    2d58:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2d5c:	e0bfff17 	ldw	r2,-4(fp)
    2d60:	10c00183 	ldbu	r3,6(r2)
    2d64:	18c000cc 	andi	r3,r3,3
    2d68:	18c00f14 	ori	r3,r3,60
    2d6c:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2d70:	e13fff17 	ldw	r4,-4(fp)
    2d74:	00032580 	call	3258 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2d78:	0001883a 	nop
    2d7c:	e037883a 	mov	sp,fp
    2d80:	dfc00117 	ldw	ra,4(sp)
    2d84:	df000017 	ldw	fp,0(sp)
    2d88:	dec00204 	addi	sp,sp,8
    2d8c:	f800283a 	ret

00002d90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2d90:	defffa04 	addi	sp,sp,-24
    2d94:	dfc00515 	stw	ra,20(sp)
    2d98:	df000415 	stw	fp,16(sp)
    2d9c:	dc000315 	stw	r16,12(sp)
    2da0:	df000404 	addi	fp,sp,16
    2da4:	e13ffd15 	stw	r4,-12(fp)
    2da8:	2805883a 	mov	r2,r5
    2dac:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2db0:	e0bffe03 	ldbu	r2,-8(fp)
    2db4:	1000031e 	bne	r2,zero,2dc4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2db8:	e0bffd17 	ldw	r2,-12(fp)
    2dbc:	10800204 	addi	r2,r2,8
    2dc0:	00001006 	br	2e04 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2dc4:	e0bffe03 	ldbu	r2,-8(fp)
    2dc8:	100b883a 	mov	r5,r2
    2dcc:	e13ffd17 	ldw	r4,-12(fp)
    2dd0:	00032c00 	call	32c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2dd4:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2dd8:	e0bffc03 	ldbu	r2,-16(fp)
    2ddc:	10000826 	beq	r2,zero,2e00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2de0:	e0bffd17 	ldw	r2,-12(fp)
    2de4:	14000204 	addi	r16,r2,8
    2de8:	e0bffc03 	ldbu	r2,-16(fp)
    2dec:	014001c4 	movi	r5,7
    2df0:	1009883a 	mov	r4,r2
    2df4:	000ccf40 	call	ccf4 <__mulsi3>
    2df8:	8085883a 	add	r2,r16,r2
    2dfc:	00000106 	br	2e04 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2e00:	0005883a 	mov	r2,zero
        };
    2e04:	e6ffff04 	addi	sp,fp,-4
    2e08:	dfc00217 	ldw	ra,8(sp)
    2e0c:	df000117 	ldw	fp,4(sp)
    2e10:	dc000017 	ldw	r16,0(sp)
    2e14:	dec00304 	addi	sp,sp,12
    2e18:	f800283a 	ret

00002e1c <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2e1c:	defffd04 	addi	sp,sp,-12
    2e20:	df000215 	stw	fp,8(sp)
    2e24:	df000204 	addi	fp,sp,8
    2e28:	2005883a 	mov	r2,r4
    2e2c:	e17fff15 	stw	r5,-4(fp)
    2e30:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2e34:	0001883a 	nop
    2e38:	e037883a 	mov	sp,fp
    2e3c:	df000017 	ldw	fp,0(sp)
    2e40:	dec00104 	addi	sp,sp,4
    2e44:	f800283a 	ret

00002e48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2e48:	defff804 	addi	sp,sp,-32
    2e4c:	dfc00715 	stw	ra,28(sp)
    2e50:	df000615 	stw	fp,24(sp)
    2e54:	dc000515 	stw	r16,20(sp)
    2e58:	df000604 	addi	fp,sp,24
    2e5c:	e13ffb15 	stw	r4,-20(fp)
    2e60:	2809883a 	mov	r4,r5
    2e64:	3007883a 	mov	r3,r6
    2e68:	3805883a 	mov	r2,r7
    2e6c:	e13ffc05 	stb	r4,-16(fp)
    2e70:	e0fffd05 	stb	r3,-12(fp)
    2e74:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2e78:	e0bffc03 	ldbu	r2,-16(fp)
    2e7c:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2e80:	e0fffa43 	ldbu	r3,-23(fp)
    2e84:	00bfe004 	movi	r2,-128
    2e88:	1884703a 	and	r2,r3,r2
    2e8c:	10803fcc 	andi	r2,r2,255
    2e90:	1000031e 	bne	r2,zero,2ea0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2e94:	e0bffe03 	ldbu	r2,-8(fp)
    2e98:	10800230 	cmpltui	r2,r2,8
    2e9c:	1000021e 	bne	r2,zero,2ea8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2ea0:	0005883a 	mov	r2,zero
    2ea4:	00007a06 	br	3090 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2ea8:	e0bffd03 	ldbu	r2,-12(fp)
    2eac:	10000726 	beq	r2,zero,2ecc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2eb0:	e0bffb17 	ldw	r2,-20(fp)
    2eb4:	108001c3 	ldbu	r2,7(r2)
    2eb8:	10803fcc 	andi	r2,r2,255
    2ebc:	108001d8 	cmpnei	r2,r2,7
    2ec0:	1000021e 	bne	r2,zero,2ecc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2ec4:	0005883a 	mov	r2,zero
    2ec8:	00007106 	br	3090 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2ecc:	000b883a 	mov	r5,zero
    2ed0:	e13ffb17 	ldw	r4,-20(fp)
    2ed4:	00032c00 	call	32c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2ed8:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2edc:	e0bffa03 	ldbu	r2,-24(fp)
    2ee0:	1000021e 	bne	r2,zero,2eec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2ee4:	0005883a 	mov	r2,zero
    2ee8:	00006906 	br	3090 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2eec:	e0bffa43 	ldbu	r2,-23(fp)
    2ef0:	10803fcc 	andi	r2,r2,255
    2ef4:	1000241e 	bne	r2,zero,2f88 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2ef8:	e0bffd03 	ldbu	r2,-12(fp)
    2efc:	10001026 	beq	r2,zero,2f40 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2f00:	e0bffa03 	ldbu	r2,-24(fp)
    2f04:	e43ffb17 	ldw	r16,-20(fp)
    2f08:	014001c4 	movi	r5,7
    2f0c:	1009883a 	mov	r4,r2
    2f10:	000ccf40 	call	ccf4 <__mulsi3>
    2f14:	8085883a 	add	r2,r16,r2
    2f18:	10800304 	addi	r2,r2,12
    2f1c:	00c01044 	movi	r3,65
    2f20:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2f24:	e0bffb17 	ldw	r2,-20(fp)
    2f28:	108001c3 	ldbu	r2,7(r2)
    2f2c:	10800044 	addi	r2,r2,1
    2f30:	1007883a 	mov	r3,r2
    2f34:	e0bffb17 	ldw	r2,-20(fp)
    2f38:	10c001c5 	stb	r3,7(r2)
    2f3c:	00000906 	br	2f64 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2f40:	e0bffa03 	ldbu	r2,-24(fp)
    2f44:	e43ffb17 	ldw	r16,-20(fp)
    2f48:	014001c4 	movi	r5,7
    2f4c:	1009883a 	mov	r4,r2
    2f50:	000ccf40 	call	ccf4 <__mulsi3>
    2f54:	8085883a 	add	r2,r16,r2
    2f58:	10800304 	addi	r2,r2,12
    2f5c:	00c00044 	movi	r3,1
    2f60:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2f64:	e0bffa03 	ldbu	r2,-24(fp)
    2f68:	e43ffb17 	ldw	r16,-20(fp)
    2f6c:	014001c4 	movi	r5,7
    2f70:	1009883a 	mov	r4,r2
    2f74:	000ccf40 	call	ccf4 <__mulsi3>
    2f78:	8085883a 	add	r2,r16,r2
    2f7c:	10800304 	addi	r2,r2,12
    2f80:	10800003 	ldbu	r2,0(r2)
    2f84:	00004206 	br	3090 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2f88:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2f8c:	e0bffa43 	ldbu	r2,-23(fp)
    2f90:	108001cc 	andi	r2,r2,7
    2f94:	108001cc 	andi	r2,r2,7
    2f98:	100890fa 	slli	r4,r2,3
    2f9c:	e0fffa83 	ldbu	r3,-22(fp)
    2fa0:	00bff1c4 	movi	r2,-57
    2fa4:	1884703a 	and	r2,r3,r2
    2fa8:	1007883a 	mov	r3,r2
    2fac:	2005883a 	mov	r2,r4
    2fb0:	1884b03a 	or	r2,r3,r2
    2fb4:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2fb8:	e0bffd03 	ldbu	r2,-12(fp)
    2fbc:	10001526 	beq	r2,zero,3014 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2fc0:	e0bffa83 	ldbu	r2,-22(fp)
    2fc4:	10801014 	ori	r2,r2,64
    2fc8:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2fcc:	e0bffb17 	ldw	r2,-20(fp)
    2fd0:	108001c3 	ldbu	r2,7(r2)
    2fd4:	10800044 	addi	r2,r2,1
    2fd8:	1007883a 	mov	r3,r2
    2fdc:	e0bffb17 	ldw	r2,-20(fp)
    2fe0:	10c001c5 	stb	r3,7(r2)
    2fe4:	e0bffb17 	ldw	r2,-20(fp)
    2fe8:	108001c3 	ldbu	r2,7(r2)
    2fec:	108001cc 	andi	r2,r2,7
    2ff0:	110001cc 	andi	r4,r2,7
    2ff4:	e0fffa83 	ldbu	r3,-22(fp)
    2ff8:	00bffe04 	movi	r2,-8
    2ffc:	1884703a 	and	r2,r3,r2
    3000:	1007883a 	mov	r3,r2
    3004:	2005883a 	mov	r2,r4
    3008:	1884b03a 	or	r2,r3,r2
    300c:	e0bffa85 	stb	r2,-22(fp)
    3010:	00000e06 	br	304c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    3014:	e0fffa83 	ldbu	r3,-22(fp)
    3018:	00bfefc4 	movi	r2,-65
    301c:	1884703a 	and	r2,r3,r2
    3020:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    3024:	e0bffe03 	ldbu	r2,-8(fp)
    3028:	108001cc 	andi	r2,r2,7
    302c:	110001cc 	andi	r4,r2,7
    3030:	e0fffa83 	ldbu	r3,-22(fp)
    3034:	00bffe04 	movi	r2,-8
    3038:	1884703a 	and	r2,r3,r2
    303c:	1007883a 	mov	r3,r2
    3040:	2005883a 	mov	r2,r4
    3044:	1884b03a 	or	r2,r3,r2
    3048:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    304c:	e0bffa03 	ldbu	r2,-24(fp)
    3050:	e43ffb17 	ldw	r16,-20(fp)
    3054:	014001c4 	movi	r5,7
    3058:	1009883a 	mov	r4,r2
    305c:	000ccf40 	call	ccf4 <__mulsi3>
    3060:	8085883a 	add	r2,r16,r2
    3064:	10800304 	addi	r2,r2,12
    3068:	e0fffa83 	ldbu	r3,-22(fp)
    306c:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    3070:	e0bffa03 	ldbu	r2,-24(fp)
    3074:	e43ffb17 	ldw	r16,-20(fp)
    3078:	014001c4 	movi	r5,7
    307c:	1009883a 	mov	r4,r2
    3080:	000ccf40 	call	ccf4 <__mulsi3>
    3084:	8085883a 	add	r2,r16,r2
    3088:	10800304 	addi	r2,r2,12
    308c:	10800003 	ldbu	r2,0(r2)
        };
    3090:	e6ffff04 	addi	sp,fp,-4
    3094:	dfc00217 	ldw	ra,8(sp)
    3098:	df000117 	ldw	fp,4(sp)
    309c:	dc000017 	ldw	r16,0(sp)
    30a0:	dec00304 	addi	sp,sp,12
    30a4:	f800283a 	ret

000030a8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    30a8:	defffb04 	addi	sp,sp,-20
    30ac:	dfc00415 	stw	ra,16(sp)
    30b0:	df000315 	stw	fp,12(sp)
    30b4:	df000304 	addi	fp,sp,12
    30b8:	e13ffe15 	stw	r4,-8(fp)
    30bc:	2805883a 	mov	r2,r5
    30c0:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    30c4:	e0bfff03 	ldbu	r2,-4(fp)
    30c8:	10801058 	cmpnei	r2,r2,65
    30cc:	1000031e 	bne	r2,zero,30dc <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    30d0:	e13ffe17 	ldw	r4,-8(fp)
    30d4:	00032580 	call	3258 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    30d8:	00000906 	br	3100 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    30dc:	e0bfff03 	ldbu	r2,-4(fp)
    30e0:	100b883a 	mov	r5,r2
    30e4:	e13ffe17 	ldw	r4,-8(fp)
    30e8:	00032c00 	call	32c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    30ec:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    30f0:	e0bffd03 	ldbu	r2,-12(fp)
    30f4:	100b883a 	mov	r5,r2
    30f8:	e13ffe17 	ldw	r4,-8(fp)
    30fc:	00033540 	call	3354 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    3100:	e037883a 	mov	sp,fp
    3104:	dfc00117 	ldw	ra,4(sp)
    3108:	df000017 	ldw	fp,0(sp)
    310c:	dec00204 	addi	sp,sp,8
    3110:	f800283a 	ret

00003114 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    3114:	defffa04 	addi	sp,sp,-24
    3118:	dfc00515 	stw	ra,20(sp)
    311c:	df000415 	stw	fp,16(sp)
    3120:	dc400315 	stw	r17,12(sp)
    3124:	dc000215 	stw	r16,8(sp)
    3128:	df000404 	addi	fp,sp,16
    312c:	e13ffc15 	stw	r4,-16(fp)
    3130:	2805883a 	mov	r2,r5
    3134:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    3138:	e0bffd03 	ldbu	r2,-12(fp)
    313c:	e43ffc17 	ldw	r16,-16(fp)
    3140:	014001c4 	movi	r5,7
    3144:	1009883a 	mov	r4,r2
    3148:	000ccf40 	call	ccf4 <__mulsi3>
    314c:	8085883a 	add	r2,r16,r2
    3150:	10800304 	addi	r2,r2,12
    3154:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    3158:	e0bffd03 	ldbu	r2,-12(fp)
    315c:	e43ffc17 	ldw	r16,-16(fp)
    3160:	014001c4 	movi	r5,7
    3164:	1009883a 	mov	r4,r2
    3168:	000ccf40 	call	ccf4 <__mulsi3>
    316c:	8085883a 	add	r2,r16,r2
    3170:	10800344 	addi	r2,r2,13
    3174:	00c00044 	movi	r3,1
    3178:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    317c:	e0bffd03 	ldbu	r2,-12(fp)
    3180:	e43ffc17 	ldw	r16,-16(fp)
    3184:	014001c4 	movi	r5,7
    3188:	1009883a 	mov	r4,r2
    318c:	000ccf40 	call	ccf4 <__mulsi3>
    3190:	8085883a 	add	r2,r16,r2
    3194:	10800384 	addi	r2,r2,14
    3198:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    319c:	e0fffd03 	ldbu	r3,-12(fp)
    31a0:	e0bffc17 	ldw	r2,-16(fp)
    31a4:	14000104 	addi	r16,r2,4
    31a8:	e47ffc17 	ldw	r17,-16(fp)
    31ac:	014001c4 	movi	r5,7
    31b0:	1809883a 	mov	r4,r3
    31b4:	000ccf40 	call	ccf4 <__mulsi3>
    31b8:	8885883a 	add	r2,r17,r2
    31bc:	10800204 	addi	r2,r2,8
    31c0:	81403fcc 	andi	r5,r16,255
    31c4:	10c00003 	ldbu	r3,0(r2)
    31c8:	1806703a 	and	r3,r3,zero
    31cc:	1809883a 	mov	r4,r3
    31d0:	2807883a 	mov	r3,r5
    31d4:	20c6b03a 	or	r3,r4,r3
    31d8:	10c00005 	stb	r3,0(r2)
    31dc:	8006d23a 	srli	r3,r16,8
    31e0:	19403fcc 	andi	r5,r3,255
    31e4:	10c00043 	ldbu	r3,1(r2)
    31e8:	1806703a 	and	r3,r3,zero
    31ec:	1809883a 	mov	r4,r3
    31f0:	2807883a 	mov	r3,r5
    31f4:	20c6b03a 	or	r3,r4,r3
    31f8:	10c00045 	stb	r3,1(r2)
    31fc:	8006d43a 	srli	r3,r16,16
    3200:	19403fcc 	andi	r5,r3,255
    3204:	10c00083 	ldbu	r3,2(r2)
    3208:	1806703a 	and	r3,r3,zero
    320c:	1809883a 	mov	r4,r3
    3210:	2807883a 	mov	r3,r5
    3214:	20c6b03a 	or	r3,r4,r3
    3218:	10c00085 	stb	r3,2(r2)
    321c:	800ad63a 	srli	r5,r16,24
    3220:	10c000c3 	ldbu	r3,3(r2)
    3224:	1806703a 	and	r3,r3,zero
    3228:	1809883a 	mov	r4,r3
    322c:	2807883a 	mov	r3,r5
    3230:	20c6b03a 	or	r3,r4,r3
    3234:	10c000c5 	stb	r3,3(r2)
        };
    3238:	0001883a 	nop
    323c:	e6fffe04 	addi	sp,fp,-8
    3240:	dfc00317 	ldw	ra,12(sp)
    3244:	df000217 	ldw	fp,8(sp)
    3248:	dc400117 	ldw	r17,4(sp)
    324c:	dc000017 	ldw	r16,0(sp)
    3250:	dec00404 	addi	sp,sp,16
    3254:	f800283a 	ret

00003258 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    3258:	defffc04 	addi	sp,sp,-16
    325c:	dfc00315 	stw	ra,12(sp)
    3260:	df000215 	stw	fp,8(sp)
    3264:	df000204 	addi	fp,sp,8
    3268:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    326c:	00800044 	movi	r2,1
    3270:	e0bffe05 	stb	r2,-8(fp)
    3274:	e0bffe03 	ldbu	r2,-8(fp)
    3278:	10800428 	cmpgeui	r2,r2,16
    327c:	1000081e 	bne	r2,zero,32a0 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    3280:	e0bffe03 	ldbu	r2,-8(fp)
    3284:	100b883a 	mov	r5,r2
    3288:	e13fff17 	ldw	r4,-4(fp)
    328c:	00031140 	call	3114 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    3290:	e0bffe03 	ldbu	r2,-8(fp)
    3294:	10800044 	addi	r2,r2,1
    3298:	e0bffe05 	stb	r2,-8(fp)
    329c:	003ff506 	br	3274 <__alt_data_end+0xfc003274>
                        InitEntry(i);

                hubCounter = 0;
    32a0:	e0bfff17 	ldw	r2,-4(fp)
    32a4:	100001c5 	stb	zero,7(r2)
        };
    32a8:	0001883a 	nop
    32ac:	e037883a 	mov	sp,fp
    32b0:	dfc00117 	ldw	ra,4(sp)
    32b4:	df000017 	ldw	fp,0(sp)
    32b8:	dec00204 	addi	sp,sp,8
    32bc:	f800283a 	ret

000032c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    32c0:	defffa04 	addi	sp,sp,-24
    32c4:	dfc00515 	stw	ra,20(sp)
    32c8:	df000415 	stw	fp,16(sp)
    32cc:	dc000315 	stw	r16,12(sp)
    32d0:	df000404 	addi	fp,sp,16
    32d4:	e13ffd15 	stw	r4,-12(fp)
    32d8:	2805883a 	mov	r2,r5
    32dc:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    32e0:	00800044 	movi	r2,1
    32e4:	e0bffc05 	stb	r2,-16(fp)
    32e8:	e0bffc03 	ldbu	r2,-16(fp)
    32ec:	10800428 	cmpgeui	r2,r2,16
    32f0:	1000111e 	bne	r2,zero,3338 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    32f4:	e0bffc03 	ldbu	r2,-16(fp)
    32f8:	e43ffd17 	ldw	r16,-12(fp)
    32fc:	014001c4 	movi	r5,7
    3300:	1009883a 	mov	r4,r2
    3304:	000ccf40 	call	ccf4 <__mulsi3>
    3308:	8085883a 	add	r2,r16,r2
    330c:	10800304 	addi	r2,r2,12
    3310:	10800003 	ldbu	r2,0(r2)
    3314:	10c03fcc 	andi	r3,r2,255
    3318:	e0bffe03 	ldbu	r2,-8(fp)
    331c:	1880021e 	bne	r3,r2,3328 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    3320:	e0bffc03 	ldbu	r2,-16(fp)
    3324:	00000506 	br	333c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    3328:	e0bffc03 	ldbu	r2,-16(fp)
    332c:	10800044 	addi	r2,r2,1
    3330:	e0bffc05 	stb	r2,-16(fp)
    3334:	003fec06 	br	32e8 <__alt_data_end+0xfc0032e8>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    3338:	0005883a 	mov	r2,zero
        };
    333c:	e6ffff04 	addi	sp,fp,-4
    3340:	dfc00217 	ldw	ra,8(sp)
    3344:	df000117 	ldw	fp,4(sp)
    3348:	dc000017 	ldw	r16,0(sp)
    334c:	dec00304 	addi	sp,sp,12
    3350:	f800283a 	ret

00003354 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    3354:	defffa04 	addi	sp,sp,-24
    3358:	dfc00515 	stw	ra,20(sp)
    335c:	df000415 	stw	fp,16(sp)
    3360:	dc000315 	stw	r16,12(sp)
    3364:	df000404 	addi	fp,sp,16
    3368:	e13ffd15 	stw	r4,-12(fp)
    336c:	2805883a 	mov	r2,r5
    3370:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    3374:	e0bffe03 	ldbu	r2,-8(fp)
    3378:	10003026 	beq	r2,zero,343c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    337c:	e0bffe03 	ldbu	r2,-8(fp)
    3380:	e43ffd17 	ldw	r16,-12(fp)
    3384:	014001c4 	movi	r5,7
    3388:	1009883a 	mov	r4,r2
    338c:	000ccf40 	call	ccf4 <__mulsi3>
    3390:	8085883a 	add	r2,r16,r2
    3394:	10800304 	addi	r2,r2,12
    3398:	10800003 	ldbu	r2,0(r2)
    339c:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    33a0:	e0bffc43 	ldbu	r2,-15(fp)
    33a4:	1080100c 	andi	r2,r2,64
    33a8:	10803fcc 	andi	r2,r2,255
    33ac:	10001e26 	beq	r2,zero,3428 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    33b0:	00800044 	movi	r2,1
    33b4:	e0bffc05 	stb	r2,-16(fp)
    33b8:	e0bffc03 	ldbu	r2,-16(fp)
    33bc:	100d883a 	mov	r6,r2
    33c0:	e17ffc43 	ldbu	r5,-15(fp)
    33c4:	e13ffd17 	ldw	r4,-12(fp)
    33c8:	00034580 	call	3458 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    33cc:	e0bffc05 	stb	r2,-16(fp)
    33d0:	e0bffc03 	ldbu	r2,-16(fp)
    33d4:	1004c03a 	cmpne	r2,r2,zero
    33d8:	10803fcc 	andi	r2,r2,255
    33dc:	10000526 	beq	r2,zero,33f4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    33e0:	e0bffc03 	ldbu	r2,-16(fp)
    33e4:	100b883a 	mov	r5,r2
    33e8:	e13ffd17 	ldw	r4,-12(fp)
    33ec:	00033540 	call	3354 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    33f0:	003ff106 	br	33b8 <__alt_data_end+0xfc0033b8>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    33f4:	e0bffd17 	ldw	r2,-12(fp)
    33f8:	10c001c3 	ldbu	r3,7(r2)
    33fc:	e0bffc43 	ldbu	r2,-15(fp)
    3400:	108001cc 	andi	r2,r2,7
    3404:	18c03fcc 	andi	r3,r3,255
    3408:	10803fcc 	andi	r2,r2,255
    340c:	1880061e 	bne	r3,r2,3428 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    3410:	e0bffd17 	ldw	r2,-12(fp)
    3414:	108001c3 	ldbu	r2,7(r2)
    3418:	10bfffc4 	addi	r2,r2,-1
    341c:	1007883a 	mov	r3,r2
    3420:	e0bffd17 	ldw	r2,-12(fp)
    3424:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    3428:	e0bffe03 	ldbu	r2,-8(fp)
    342c:	100b883a 	mov	r5,r2
    3430:	e13ffd17 	ldw	r4,-12(fp)
    3434:	00031140 	call	3114 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    3438:	00000106 	br	3440 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    343c:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    3440:	e6ffff04 	addi	sp,fp,-4
    3444:	dfc00217 	ldw	ra,8(sp)
    3448:	df000117 	ldw	fp,4(sp)
    344c:	dc000017 	ldw	r16,0(sp)
    3450:	dec00304 	addi	sp,sp,12
    3454:	f800283a 	ret

00003458 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3458:	defff904 	addi	sp,sp,-28
    345c:	dfc00615 	stw	ra,24(sp)
    3460:	df000515 	stw	fp,20(sp)
    3464:	dc000415 	stw	r16,16(sp)
    3468:	df000504 	addi	fp,sp,20
    346c:	e13ffc15 	stw	r4,-16(fp)
    3470:	e17ffd05 	stb	r5,-12(fp)
    3474:	3005883a 	mov	r2,r6
    3478:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    347c:	e0bffe03 	ldbu	r2,-8(fp)
    3480:	10000526 	beq	r2,zero,3498 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3484:	e0bffe03 	ldbu	r2,-8(fp)
    3488:	10800428 	cmpgeui	r2,r2,16
    348c:	1000021e 	bne	r2,zero,3498 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3490:	e0bffe03 	ldbu	r2,-8(fp)
    3494:	00000106 	br	349c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3498:	00800044 	movi	r2,1
    349c:	e0bffb05 	stb	r2,-20(fp)
    34a0:	e0bffb03 	ldbu	r2,-20(fp)
    34a4:	10800428 	cmpgeui	r2,r2,16
    34a8:	1000161e 	bne	r2,zero,3504 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    34ac:	e0bffb03 	ldbu	r2,-20(fp)
    34b0:	e43ffc17 	ldw	r16,-16(fp)
    34b4:	014001c4 	movi	r5,7
    34b8:	1009883a 	mov	r4,r2
    34bc:	000ccf40 	call	ccf4 <__mulsi3>
    34c0:	8085883a 	add	r2,r16,r2
    34c4:	10800304 	addi	r2,r2,12
    34c8:	10800003 	ldbu	r2,0(r2)
    34cc:	1004d0fa 	srli	r2,r2,3
    34d0:	108001cc 	andi	r2,r2,7
    34d4:	1007883a 	mov	r3,r2
    34d8:	e0bffd03 	ldbu	r2,-12(fp)
    34dc:	108001cc 	andi	r2,r2,7
    34e0:	18c03fcc 	andi	r3,r3,255
    34e4:	10803fcc 	andi	r2,r2,255
    34e8:	1880021e 	bne	r3,r2,34f4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    34ec:	e0bffb03 	ldbu	r2,-20(fp)
    34f0:	00000506 	br	3508 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    34f4:	e0bffb03 	ldbu	r2,-20(fp)
    34f8:	10800044 	addi	r2,r2,1
    34fc:	e0bffb05 	stb	r2,-20(fp)
    3500:	003fe706 	br	34a0 <__alt_data_end+0xfc0034a0>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    3504:	0005883a 	mov	r2,zero
        };
    3508:	e6ffff04 	addi	sp,fp,-4
    350c:	dfc00217 	ldw	ra,8(sp)
    3510:	df000117 	ldw	fp,4(sp)
    3514:	dc000017 	ldw	r16,0(sp)
    3518:	dec00304 	addi	sp,sp,12
    351c:	f800283a 	ret

00003520 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    3520:	defffb04 	addi	sp,sp,-20
    3524:	dfc00415 	stw	ra,16(sp)
    3528:	df000315 	stw	fp,12(sp)
    352c:	df000304 	addi	fp,sp,12
    3530:	e13ffe15 	stw	r4,-8(fp)
    3534:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    3538:	e0bffe17 	ldw	r2,-8(fp)
    353c:	1009883a 	mov	r4,r2
    3540:	0004edc0 	call	4edc <_ZN15USBDeviceConfigC1Ev>
    3544:	e0bffe17 	ldw	r2,-8(fp)
    3548:	10800104 	addi	r2,r2,4
    354c:	1009883a 	mov	r4,r2
    3550:	0004f100 	call	4f10 <_ZN17UsbConfigXtracterC1Ev>
    3554:	008000b4 	movhi	r2,2
    3558:	108acc04 	addi	r2,r2,11056
    355c:	e0fffe17 	ldw	r3,-8(fp)
    3560:	18800015 	stw	r2,0(r3)
    3564:	008000b4 	movhi	r2,2
    3568:	108ad904 	addi	r2,r2,11108
    356c:	e0fffe17 	ldw	r3,-8(fp)
    3570:	18800115 	stw	r2,4(r3)
    3574:	e0bffe17 	ldw	r2,-8(fp)
    3578:	e0ffff17 	ldw	r3,-4(fp)
    357c:	10c00315 	stw	r3,12(r2)
    3580:	e0bffe17 	ldw	r2,-8(fp)
    3584:	10000405 	stb	zero,16(r2)
    3588:	e0bffe17 	ldw	r2,-8(fp)
    358c:	00c00044 	movi	r3,1
    3590:	10c006c5 	stb	r3,27(r2)
    3594:	e0bffe17 	ldw	r2,-8(fp)
    3598:	10000715 	stw	zero,28(r2)
    359c:	e0bffe17 	ldw	r2,-8(fp)
    35a0:	10000905 	stb	zero,36(r2)
    35a4:	e0bffe17 	ldw	r2,-8(fp)
    35a8:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    35ac:	e03ffd05 	stb	zero,-12(fp)
    35b0:	e0bffd03 	ldbu	r2,-12(fp)
    35b4:	108000e8 	cmpgeui	r2,r2,3
    35b8:	1000431e 	bne	r2,zero,36c8 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    35bc:	e0fffd03 	ldbu	r3,-12(fp)
    35c0:	e13ffe17 	ldw	r4,-8(fp)
    35c4:	1805883a 	mov	r2,r3
    35c8:	1085883a 	add	r2,r2,r2
    35cc:	10c5883a 	add	r2,r2,r3
    35d0:	2085883a 	add	r2,r4,r2
    35d4:	10800444 	addi	r2,r2,17
    35d8:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    35dc:	e13ffd03 	ldbu	r4,-12(fp)
    35e0:	e0bffd03 	ldbu	r2,-12(fp)
    35e4:	10000226 	beq	r2,zero,35f0 <_ZN7XBOXONEC1EP3USB+0xd0>
    35e8:	0007883a 	mov	r3,zero
    35ec:	00000106 	br	35f4 <_ZN7XBOXONEC1EP3USB+0xd4>
    35f0:	00c00204 	movi	r3,8
    35f4:	e17ffe17 	ldw	r5,-8(fp)
    35f8:	2005883a 	mov	r2,r4
    35fc:	1085883a 	add	r2,r2,r2
    3600:	1105883a 	add	r2,r2,r4
    3604:	2885883a 	add	r2,r5,r2
    3608:	10800484 	addi	r2,r2,18
    360c:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    3610:	e0fffd03 	ldbu	r3,-12(fp)
    3614:	e13ffe17 	ldw	r4,-8(fp)
    3618:	1805883a 	mov	r2,r3
    361c:	1085883a 	add	r2,r2,r2
    3620:	10c5883a 	add	r2,r2,r3
    3624:	2085883a 	add	r2,r4,r2
    3628:	10800404 	addi	r2,r2,16
    362c:	110000c3 	ldbu	r4,3(r2)
    3630:	00ffff84 	movi	r3,-2
    3634:	20c6703a 	and	r3,r4,r3
    3638:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    363c:	e0fffd03 	ldbu	r3,-12(fp)
    3640:	e13ffe17 	ldw	r4,-8(fp)
    3644:	1805883a 	mov	r2,r3
    3648:	1085883a 	add	r2,r2,r2
    364c:	10c5883a 	add	r2,r2,r3
    3650:	2085883a 	add	r2,r4,r2
    3654:	10800404 	addi	r2,r2,16
    3658:	110000c3 	ldbu	r4,3(r2)
    365c:	00ffff44 	movi	r3,-3
    3660:	20c6703a 	and	r3,r4,r3
    3664:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3668:	e13ffd03 	ldbu	r4,-12(fp)
    366c:	e0bffd03 	ldbu	r2,-12(fp)
    3670:	10000226 	beq	r2,zero,367c <_ZN7XBOXONEC1EP3USB+0x15c>
    3674:	00c00044 	movi	r3,1
    3678:	00000106 	br	3680 <_ZN7XBOXONEC1EP3USB+0x160>
    367c:	00c003c4 	movi	r3,15
    3680:	e17ffe17 	ldw	r5,-8(fp)
    3684:	2005883a 	mov	r2,r4
    3688:	1085883a 	add	r2,r2,r2
    368c:	1105883a 	add	r2,r2,r4
    3690:	2885883a 	add	r2,r5,r2
    3694:	10800404 	addi	r2,r2,16
    3698:	18c7883a 	add	r3,r3,r3
    369c:	18cb883a 	add	r5,r3,r3
    36a0:	10c000c3 	ldbu	r3,3(r2)
    36a4:	18c000cc 	andi	r3,r3,3
    36a8:	1809883a 	mov	r4,r3
    36ac:	2807883a 	mov	r3,r5
    36b0:	20c6b03a 	or	r3,r4,r3
    36b4:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    36b8:	e0bffd03 	ldbu	r2,-12(fp)
    36bc:	10800044 	addi	r2,r2,1
    36c0:	e0bffd05 	stb	r2,-12(fp)
    36c4:	003fba06 	br	35b0 <__alt_data_end+0xfc0035b0>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    36c8:	e0bffe17 	ldw	r2,-8(fp)
    36cc:	10800317 	ldw	r2,12(r2)
    36d0:	10000626 	beq	r2,zero,36ec <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    36d4:	e0bffe17 	ldw	r2,-8(fp)
    36d8:	10800317 	ldw	r2,12(r2)
    36dc:	e0fffe17 	ldw	r3,-8(fp)
    36e0:	180b883a 	mov	r5,r3
    36e4:	1009883a 	mov	r4,r2
    36e8:	0004c900 	call	4c90 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    36ec:	0001883a 	nop
    36f0:	e037883a 	mov	sp,fp
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	df000017 	ldw	fp,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	f800283a 	ret

00003704 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    3704:	deffde04 	addi	sp,sp,-136
    3708:	dfc02115 	stw	ra,132(sp)
    370c:	df002015 	stw	fp,128(sp)
    3710:	df002004 	addi	fp,sp,128
    3714:	e13ffc15 	stw	r4,-16(fp)
    3718:	2809883a 	mov	r4,r5
    371c:	3007883a 	mov	r3,r6
    3720:	3805883a 	mov	r2,r7
    3724:	e13ffd05 	stb	r4,-12(fp)
    3728:	e0fffe05 	stb	r3,-8(fp)
    372c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    3730:	e0bfe744 	addi	r2,fp,-99
    3734:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    3738:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    373c:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    3740:	e0bffc17 	ldw	r2,-16(fp)
    3744:	10800317 	ldw	r2,12(r2)
    3748:	1009883a 	mov	r4,r2
    374c:	0002c6c0 	call	2c6c <_ZN3USB14GetAddressPoolEv>
    3750:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    3754:	e0bffc17 	ldw	r2,-16(fp)
    3758:	10800403 	ldbu	r2,16(r2)
    375c:	10803fcc 	andi	r2,r2,255
    3760:	10000226 	beq	r2,zero,376c <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    3764:	00bff644 	movi	r2,-39
    3768:	00017606 	br	3d44 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    376c:	e0bfe517 	ldw	r2,-108(fp)
    3770:	10800017 	ldw	r2,0(r2)
    3774:	10800017 	ldw	r2,0(r2)
    3778:	000b883a 	mov	r5,zero
    377c:	e13fe517 	ldw	r4,-108(fp)
    3780:	103ee83a 	callr	r2
    3784:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3788:	e0bfe317 	ldw	r2,-116(fp)
    378c:	1000021e 	bne	r2,zero,3798 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3790:	00bff584 	movi	r2,-42
    3794:	00016b06 	br	3d44 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3798:	e0bfe317 	ldw	r2,-116(fp)
    379c:	10c00003 	ldbu	r3,0(r2)
    37a0:	11000043 	ldbu	r4,1(r2)
    37a4:	2008923a 	slli	r4,r4,8
    37a8:	20c6b03a 	or	r3,r4,r3
    37ac:	11000083 	ldbu	r4,2(r2)
    37b0:	2008943a 	slli	r4,r4,16
    37b4:	20c6b03a 	or	r3,r4,r3
    37b8:	108000c3 	ldbu	r2,3(r2)
    37bc:	1004963a 	slli	r2,r2,24
    37c0:	10c4b03a 	or	r2,r2,r3
    37c4:	1000021e 	bne	r2,zero,37d0 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    37c8:	00bff5c4 	movi	r2,-41
    37cc:	00015d06 	br	3d44 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    37d0:	e0bfe317 	ldw	r2,-116(fp)
    37d4:	10c00003 	ldbu	r3,0(r2)
    37d8:	11000043 	ldbu	r4,1(r2)
    37dc:	2008923a 	slli	r4,r4,8
    37e0:	20c6b03a 	or	r3,r4,r3
    37e4:	11000083 	ldbu	r4,2(r2)
    37e8:	2008943a 	slli	r4,r4,16
    37ec:	20c6b03a 	or	r3,r4,r3
    37f0:	108000c3 	ldbu	r2,3(r2)
    37f4:	1004963a 	slli	r2,r2,24
    37f8:	10c4b03a 	or	r2,r2,r3
    37fc:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    3800:	e0bffc17 	ldw	r2,-16(fp)
    3804:	10c00444 	addi	r3,r2,17
    3808:	e0bfe317 	ldw	r2,-116(fp)
    380c:	19803fcc 	andi	r6,r3,255
    3810:	11000003 	ldbu	r4,0(r2)
    3814:	2008703a 	and	r4,r4,zero
    3818:	200b883a 	mov	r5,r4
    381c:	3009883a 	mov	r4,r6
    3820:	2908b03a 	or	r4,r5,r4
    3824:	11000005 	stb	r4,0(r2)
    3828:	1808d23a 	srli	r4,r3,8
    382c:	21803fcc 	andi	r6,r4,255
    3830:	11000043 	ldbu	r4,1(r2)
    3834:	2008703a 	and	r4,r4,zero
    3838:	200b883a 	mov	r5,r4
    383c:	3009883a 	mov	r4,r6
    3840:	2908b03a 	or	r4,r5,r4
    3844:	11000045 	stb	r4,1(r2)
    3848:	1808d43a 	srli	r4,r3,16
    384c:	21803fcc 	andi	r6,r4,255
    3850:	11000083 	ldbu	r4,2(r2)
    3854:	2008703a 	and	r4,r4,zero
    3858:	200b883a 	mov	r5,r4
    385c:	3009883a 	mov	r4,r6
    3860:	2908b03a 	or	r4,r5,r4
    3864:	11000085 	stb	r4,2(r2)
    3868:	180ad63a 	srli	r5,r3,24
    386c:	10c000c3 	ldbu	r3,3(r2)
    3870:	1806703a 	and	r3,r3,zero
    3874:	1809883a 	mov	r4,r3
    3878:	2807883a 	mov	r3,r5
    387c:	20c6b03a 	or	r3,r4,r3
    3880:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    3884:	e0bfe317 	ldw	r2,-116(fp)
    3888:	e0ffff03 	ldbu	r3,-4(fp)
    388c:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    3890:	e0bffc17 	ldw	r2,-16(fp)
    3894:	10c00317 	ldw	r3,12(r2)
    3898:	00800484 	movi	r2,18
    389c:	113fffcc 	andi	r4,r2,65535
    38a0:	e0bfe744 	addi	r2,fp,-99
    38a4:	d8800015 	stw	r2,0(sp)
    38a8:	200f883a 	mov	r7,r4
    38ac:	000d883a 	mov	r6,zero
    38b0:	000b883a 	mov	r5,zero
    38b4:	1809883a 	mov	r4,r3
    38b8:	00028980 	call	2898 <_ZN3USB11getDevDescrEhhtPh>
    38bc:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    38c0:	e0bfe317 	ldw	r2,-116(fp)
    38c4:	e0ffe417 	ldw	r3,-112(fp)
    38c8:	19403fcc 	andi	r5,r3,255
    38cc:	10c00003 	ldbu	r3,0(r2)
    38d0:	1806703a 	and	r3,r3,zero
    38d4:	1809883a 	mov	r4,r3
    38d8:	2807883a 	mov	r3,r5
    38dc:	20c6b03a 	or	r3,r4,r3
    38e0:	10c00005 	stb	r3,0(r2)
    38e4:	e0ffe417 	ldw	r3,-112(fp)
    38e8:	1806d23a 	srli	r3,r3,8
    38ec:	19403fcc 	andi	r5,r3,255
    38f0:	10c00043 	ldbu	r3,1(r2)
    38f4:	1806703a 	and	r3,r3,zero
    38f8:	1809883a 	mov	r4,r3
    38fc:	2807883a 	mov	r3,r5
    3900:	20c6b03a 	or	r3,r4,r3
    3904:	10c00045 	stb	r3,1(r2)
    3908:	e0ffe417 	ldw	r3,-112(fp)
    390c:	1806d43a 	srli	r3,r3,16
    3910:	19403fcc 	andi	r5,r3,255
    3914:	10c00083 	ldbu	r3,2(r2)
    3918:	1806703a 	and	r3,r3,zero
    391c:	1809883a 	mov	r4,r3
    3920:	2807883a 	mov	r3,r5
    3924:	20c6b03a 	or	r3,r4,r3
    3928:	10c00085 	stb	r3,2(r2)
    392c:	e0ffe417 	ldw	r3,-112(fp)
    3930:	180ad63a 	srli	r5,r3,24
    3934:	10c000c3 	ldbu	r3,3(r2)
    3938:	1806703a 	and	r3,r3,zero
    393c:	1809883a 	mov	r4,r3
    3940:	2807883a 	mov	r3,r5
    3944:	20c6b03a 	or	r3,r4,r3
    3948:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    394c:	e0bfe103 	ldbu	r2,-124(fp)
    3950:	1000e61e 	bne	r2,zero,3cec <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    3954:	e0bfe217 	ldw	r2,-120(fp)
    3958:	10c00203 	ldbu	r3,8(r2)
    395c:	10800243 	ldbu	r2,9(r2)
    3960:	1004923a 	slli	r2,r2,8
    3964:	10c4b03a 	or	r2,r2,r3
    3968:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    396c:	e0bfe217 	ldw	r2,-120(fp)
    3970:	10c00283 	ldbu	r3,10(r2)
    3974:	108002c3 	ldbu	r2,11(r2)
    3978:	1004923a 	slli	r2,r2,8
    397c:	10c4b03a 	or	r2,r2,r3
    3980:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3984:	e0bffc17 	ldw	r2,-16(fp)
    3988:	10800017 	ldw	r2,0(r2)
    398c:	10800604 	addi	r2,r2,24
    3990:	10800017 	ldw	r2,0(r2)
    3994:	e0ffe60b 	ldhu	r3,-104(fp)
    3998:	e13fe68b 	ldhu	r4,-102(fp)
    399c:	200d883a 	mov	r6,r4
    39a0:	180b883a 	mov	r5,r3
    39a4:	e13ffc17 	ldw	r4,-16(fp)
    39a8:	103ee83a 	callr	r2
    39ac:	1080005c 	xori	r2,r2,1
    39b0:	10803fcc 	andi	r2,r2,255
    39b4:	1000d51e 	bne	r2,zero,3d0c <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    39b8:	e0bfe517 	ldw	r2,-108(fp)
    39bc:	10800017 	ldw	r2,0(r2)
    39c0:	10800104 	addi	r2,r2,4
    39c4:	10800017 	ldw	r2,0(r2)
    39c8:	e0fffd03 	ldbu	r3,-12(fp)
    39cc:	e13ffe03 	ldbu	r4,-8(fp)
    39d0:	200f883a 	mov	r7,r4
    39d4:	000d883a 	mov	r6,zero
    39d8:	180b883a 	mov	r5,r3
    39dc:	e13fe517 	ldw	r4,-108(fp)
    39e0:	103ee83a 	callr	r2
    39e4:	1007883a 	mov	r3,r2
    39e8:	e0bffc17 	ldw	r2,-16(fp)
    39ec:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    39f0:	e0bffc17 	ldw	r2,-16(fp)
    39f4:	10800403 	ldbu	r2,16(r2)
    39f8:	10803fcc 	andi	r2,r2,255
    39fc:	1000021e 	bne	r2,zero,3a08 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    3a00:	00bff504 	movi	r2,-44
    3a04:	0000cf06 	br	3d44 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    3a08:	e0bfe217 	ldw	r2,-120(fp)
    3a0c:	10c001c3 	ldbu	r3,7(r2)
    3a10:	e0bffc17 	ldw	r2,-16(fp)
    3a14:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    3a18:	e0bffc17 	ldw	r2,-16(fp)
    3a1c:	10c00317 	ldw	r3,12(r2)
    3a20:	e0bffc17 	ldw	r2,-16(fp)
    3a24:	10800403 	ldbu	r2,16(r2)
    3a28:	10803fcc 	andi	r2,r2,255
    3a2c:	100f883a 	mov	r7,r2
    3a30:	000d883a 	mov	r6,zero
    3a34:	000b883a 	mov	r5,zero
    3a38:	1809883a 	mov	r4,r3
    3a3c:	0002b540 	call	2b54 <_ZN3USB7setAddrEhhh>
    3a40:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    3a44:	e0bfe103 	ldbu	r2,-124(fp)
    3a48:	10001026 	beq	r2,zero,3a8c <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    3a4c:	e0bfe317 	ldw	r2,-116(fp)
    3a50:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    3a54:	e0bfe517 	ldw	r2,-108(fp)
    3a58:	10800017 	ldw	r2,0(r2)
    3a5c:	10800204 	addi	r2,r2,8
    3a60:	10800017 	ldw	r2,0(r2)
    3a64:	e0fffc17 	ldw	r3,-16(fp)
    3a68:	18c00403 	ldbu	r3,16(r3)
    3a6c:	18c03fcc 	andi	r3,r3,255
    3a70:	180b883a 	mov	r5,r3
    3a74:	e13fe517 	ldw	r4,-108(fp)
    3a78:	103ee83a 	callr	r2
                bAddress = 0;
    3a7c:	e0bffc17 	ldw	r2,-16(fp)
    3a80:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3a84:	e0bfe103 	ldbu	r2,-124(fp)
    3a88:	0000ae06 	br	3d44 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3a8c:	e0bfe317 	ldw	r2,-116(fp)
    3a90:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3a94:	e0bfe517 	ldw	r2,-108(fp)
    3a98:	10800017 	ldw	r2,0(r2)
    3a9c:	10800017 	ldw	r2,0(r2)
    3aa0:	e0fffc17 	ldw	r3,-16(fp)
    3aa4:	18c00403 	ldbu	r3,16(r3)
    3aa8:	18c03fcc 	andi	r3,r3,255
    3aac:	180b883a 	mov	r5,r3
    3ab0:	e13fe517 	ldw	r4,-108(fp)
    3ab4:	103ee83a 	callr	r2
    3ab8:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3abc:	e0bfe317 	ldw	r2,-116(fp)
    3ac0:	1000021e 	bne	r2,zero,3acc <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3ac4:	00bff584 	movi	r2,-42
    3ac8:	00009e06 	br	3d44 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3acc:	e0bfe317 	ldw	r2,-116(fp)
    3ad0:	e0ffff03 	ldbu	r3,-4(fp)
    3ad4:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3ad8:	e0bffc17 	ldw	r2,-16(fp)
    3adc:	10c00317 	ldw	r3,12(r2)
    3ae0:	e0bffc17 	ldw	r2,-16(fp)
    3ae4:	10800403 	ldbu	r2,16(r2)
    3ae8:	11003fcc 	andi	r4,r2,255
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	10800444 	addi	r2,r2,17
    3af4:	100f883a 	mov	r7,r2
    3af8:	01800044 	movi	r6,1
    3afc:	200b883a 	mov	r5,r4
    3b00:	1809883a 	mov	r4,r3
    3b04:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3b08:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3b0c:	e0bfe103 	ldbu	r2,-124(fp)
    3b10:	1000781e 	bne	r2,zero,3cf4 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3b14:	e0bfe217 	ldw	r2,-120(fp)
    3b18:	10800443 	ldbu	r2,17(r2)
    3b1c:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    3b20:	e0bfe703 	ldbu	r2,-100(fp)
    3b24:	01402004 	movi	r5,128
    3b28:	1009883a 	mov	r4,r2
    3b2c:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3b30:	e03fe145 	stb	zero,-123(fp)
    3b34:	e0ffe143 	ldbu	r3,-123(fp)
    3b38:	e0bfe703 	ldbu	r2,-100(fp)
    3b3c:	1880222e 	bgeu	r3,r2,3bc8 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    3b40:	e0bffc17 	ldw	r2,-16(fp)
    3b44:	10c00104 	addi	r3,r2,4
    3b48:	e0bfed04 	addi	r2,fp,-76
    3b4c:	180b883a 	mov	r5,r3
    3b50:	1009883a 	mov	r4,r2
    3b54:	0004f780 	call	4f78 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3b58:	e0bffc17 	ldw	r2,-16(fp)
    3b5c:	10c00317 	ldw	r3,12(r2)
    3b60:	e0bffc17 	ldw	r2,-16(fp)
    3b64:	10800403 	ldbu	r2,16(r2)
    3b68:	11003fcc 	andi	r4,r2,255
    3b6c:	e17fe143 	ldbu	r5,-123(fp)
    3b70:	e0bfed04 	addi	r2,fp,-76
    3b74:	d8800015 	stw	r2,0(sp)
    3b78:	280f883a 	mov	r7,r5
    3b7c:	000d883a 	mov	r6,zero
    3b80:	200b883a 	mov	r5,r4
    3b84:	1809883a 	mov	r4,r3
    3b88:	00029b40 	call	29b4 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3b8c:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3b90:	e0bfe103 	ldbu	r2,-124(fp)
    3b94:	10000226 	beq	r2,zero,3ba0 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3b98:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3b9c:	00006206 	br	3d28 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3ba0:	e0bffc17 	ldw	r2,-16(fp)
    3ba4:	108006c3 	ldbu	r2,27(r2)
    3ba8:	10803fcc 	andi	r2,r2,255
    3bac:	108000f0 	cmpltui	r2,r2,3
    3bb0:	10000426 	beq	r2,zero,3bc4 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3bb4:	e0bfe143 	ldbu	r2,-123(fp)
    3bb8:	10800044 	addi	r2,r2,1
    3bbc:	e0bfe145 	stb	r2,-123(fp)
    3bc0:	003fdc06 	br	3b34 <__alt_data_end+0xfc003b34>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3bc4:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3bc8:	e0bffc17 	ldw	r2,-16(fp)
    3bcc:	108006c3 	ldbu	r2,27(r2)
    3bd0:	10803fcc 	andi	r2,r2,255
    3bd4:	108000e8 	cmpgeui	r2,r2,3
    3bd8:	10004e26 	beq	r2,zero,3d14 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3bdc:	e0bffc17 	ldw	r2,-16(fp)
    3be0:	10c00317 	ldw	r3,12(r2)
    3be4:	e0bffc17 	ldw	r2,-16(fp)
    3be8:	10800403 	ldbu	r2,16(r2)
    3bec:	11003fcc 	andi	r4,r2,255
    3bf0:	e0bffc17 	ldw	r2,-16(fp)
    3bf4:	108006c3 	ldbu	r2,27(r2)
    3bf8:	11403fcc 	andi	r5,r2,255
    3bfc:	e0bffc17 	ldw	r2,-16(fp)
    3c00:	10800444 	addi	r2,r2,17
    3c04:	100f883a 	mov	r7,r2
    3c08:	280d883a 	mov	r6,r5
    3c0c:	200b883a 	mov	r5,r4
    3c10:	1809883a 	mov	r4,r3
    3c14:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3c18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3c1c:	e0bfe103 	ldbu	r2,-124(fp)
    3c20:	1000361e 	bne	r2,zero,3cfc <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    3c24:	01003204 	movi	r4,200
    3c28:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    3c2c:	e0bffc17 	ldw	r2,-16(fp)
    3c30:	10c00317 	ldw	r3,12(r2)
    3c34:	e0bffc17 	ldw	r2,-16(fp)
    3c38:	10800403 	ldbu	r2,16(r2)
    3c3c:	11003fcc 	andi	r4,r2,255
    3c40:	e0bffc17 	ldw	r2,-16(fp)
    3c44:	10800443 	ldbu	r2,17(r2)
    3c48:	11403fcc 	andi	r5,r2,255
    3c4c:	e0bffc17 	ldw	r2,-16(fp)
    3c50:	10800683 	ldbu	r2,26(r2)
    3c54:	10803fcc 	andi	r2,r2,255
    3c58:	100f883a 	mov	r7,r2
    3c5c:	280d883a 	mov	r6,r5
    3c60:	200b883a 	mov	r5,r4
    3c64:	1809883a 	mov	r4,r3
    3c68:	0002be80 	call	2be8 <_ZN3USB7setConfEhhh>
    3c6c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3c70:	e0bfe103 	ldbu	r2,-124(fp)
    3c74:	1000231e 	bne	r2,zero,3d04 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3c78:	01003204 	movi	r4,200
    3c7c:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3c80:	e0bffc17 	ldw	r2,-16(fp)
    3c84:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3c88:	00800144 	movi	r2,5
    3c8c:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3c90:	00800804 	movi	r2,32
    3c94:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3c98:	00800044 	movi	r2,1
    3c9c:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3ca0:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3ca4:	e0bfebc4 	addi	r2,fp,-81
    3ca8:	01800144 	movi	r6,5
    3cac:	100b883a 	mov	r5,r2
    3cb0:	e13ffc17 	ldw	r4,-16(fp)
    3cb4:	00045cc0 	call	45cc <_ZN7XBOXONE11XboxCommandEPht>
    3cb8:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3cbc:	e0bfe103 	ldbu	r2,-124(fp)
    3cc0:	1000181e 	bne	r2,zero,3d24 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3cc4:	e13ffc17 	ldw	r4,-16(fp)
    3cc8:	000466c0 	call	466c <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3ccc:	e0bffc17 	ldw	r2,-16(fp)
    3cd0:	00c00044 	movi	r3,1
    3cd4:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3cd8:	e0bffc17 	ldw	r2,-16(fp)
    3cdc:	00c00044 	movi	r3,1
    3ce0:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3ce4:	0005883a 	mov	r2,zero
    3ce8:	00001606 	br	3d44 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3cec:	0001883a 	nop
    3cf0:	00000d06 	br	3d28 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3cf4:	0001883a 	nop
    3cf8:	00000b06 	br	3d28 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3cfc:	0001883a 	nop
    3d00:	00000906 	br	3d28 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3d04:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3d08:	00000706 	br	3d28 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3d0c:	0001883a 	nop
    3d10:	00000106 	br	3d18 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3d14:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3d18:	00bff444 	movi	r2,-47
    3d1c:	e0bfe105 	stb	r2,-124(fp)
    3d20:	00000106 	br	3d28 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    3d24:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    3d28:	e0bffc17 	ldw	r2,-16(fp)
    3d2c:	10800017 	ldw	r2,0(r2)
    3d30:	10800204 	addi	r2,r2,8
    3d34:	10800017 	ldw	r2,0(r2)
    3d38:	e13ffc17 	ldw	r4,-16(fp)
    3d3c:	103ee83a 	callr	r2
        return rcode;
    3d40:	e0bfe103 	ldbu	r2,-124(fp)
}
    3d44:	e037883a 	mov	sp,fp
    3d48:	dfc00117 	ldw	ra,4(sp)
    3d4c:	df000017 	ldw	fp,0(sp)
    3d50:	dec00204 	addi	sp,sp,8
    3d54:	f800283a 	ret

00003d58 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3d58:	defff904 	addi	sp,sp,-28
    3d5c:	df000615 	stw	fp,24(sp)
    3d60:	df000604 	addi	fp,sp,24
    3d64:	e13ffb15 	stw	r4,-20(fp)
    3d68:	3009883a 	mov	r4,r6
    3d6c:	3807883a 	mov	r3,r7
    3d70:	e0800117 	ldw	r2,4(fp)
    3d74:	e17ffc05 	stb	r5,-16(fp)
    3d78:	e13ffd05 	stb	r4,-12(fp)
    3d7c:	e0fffe05 	stb	r3,-8(fp)
    3d80:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3d84:	e0bffb17 	ldw	r2,-20(fp)
    3d88:	e0fffc03 	ldbu	r3,-16(fp)
    3d8c:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3d90:	e0800217 	ldw	r2,8(fp)
    3d94:	108000c3 	ldbu	r2,3(r2)
    3d98:	10803fcc 	andi	r2,r2,255
    3d9c:	108000cc 	andi	r2,r2,3
    3da0:	108000d8 	cmpnei	r2,r2,3
    3da4:	1000361e 	bne	r2,zero,3e80 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3da8:	e0800217 	ldw	r2,8(fp)
    3dac:	10800083 	ldbu	r2,2(r2)
    3db0:	10803fcc 	andi	r2,r2,255
    3db4:	1080201c 	xori	r2,r2,128
    3db8:	10bfe004 	addi	r2,r2,-128
    3dbc:	1000020e 	bge	r2,zero,3dc8 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3dc0:	00800084 	movi	r2,2
    3dc4:	00000106 	br	3dcc <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3dc8:	00800044 	movi	r2,1
    3dcc:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3dd0:	e0fffa03 	ldbu	r3,-24(fp)
    3dd4:	e0800217 	ldw	r2,8(fp)
    3dd8:	10800083 	ldbu	r2,2(r2)
    3ddc:	108003cc 	andi	r2,r2,15
    3de0:	100b883a 	mov	r5,r2
    3de4:	e13ffb17 	ldw	r4,-20(fp)
    3de8:	1805883a 	mov	r2,r3
    3dec:	1085883a 	add	r2,r2,r2
    3df0:	10c5883a 	add	r2,r2,r3
    3df4:	2085883a 	add	r2,r4,r2
    3df8:	10800444 	addi	r2,r2,17
    3dfc:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3e00:	e0fffa03 	ldbu	r3,-24(fp)
    3e04:	e0800217 	ldw	r2,8(fp)
    3e08:	11000103 	ldbu	r4,4(r2)
    3e0c:	10800143 	ldbu	r2,5(r2)
    3e10:	1004923a 	slli	r2,r2,8
    3e14:	1104b03a 	or	r2,r2,r4
    3e18:	100b883a 	mov	r5,r2
    3e1c:	e13ffb17 	ldw	r4,-20(fp)
    3e20:	1805883a 	mov	r2,r3
    3e24:	1085883a 	add	r2,r2,r2
    3e28:	10c5883a 	add	r2,r2,r3
    3e2c:	2085883a 	add	r2,r4,r2
    3e30:	10800484 	addi	r2,r2,18
    3e34:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3e38:	e0bffb17 	ldw	r2,-20(fp)
    3e3c:	10c00903 	ldbu	r3,36(r2)
    3e40:	e0800217 	ldw	r2,8(fp)
    3e44:	10800183 	ldbu	r2,6(r2)
    3e48:	18c03fcc 	andi	r3,r3,255
    3e4c:	10803fcc 	andi	r2,r2,255
    3e50:	1880042e 	bgeu	r3,r2,3e64 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3e54:	e0800217 	ldw	r2,8(fp)
    3e58:	10c00183 	ldbu	r3,6(r2)
    3e5c:	e0bffb17 	ldw	r2,-20(fp)
    3e60:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3e64:	e0bffb17 	ldw	r2,-20(fp)
    3e68:	108006c3 	ldbu	r2,27(r2)
    3e6c:	10800044 	addi	r2,r2,1
    3e70:	1007883a 	mov	r3,r2
    3e74:	e0bffb17 	ldw	r2,-20(fp)
    3e78:	10c006c5 	stb	r3,27(r2)
    3e7c:	00000106 	br	3e84 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3e80:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3e84:	e037883a 	mov	sp,fp
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00104 	addi	sp,sp,4
    3e90:	f800283a 	ret

00003e94 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3e94:	213fff04 	addi	r4,r4,-4
    3e98:	0003d581 	jmpi	3d58 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003e9c <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3e9c:	defffd04 	addi	sp,sp,-12
    3ea0:	df000215 	stw	fp,8(sp)
    3ea4:	df000204 	addi	fp,sp,8
    3ea8:	e13ffe15 	stw	r4,-8(fp)
    3eac:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3eb0:	0001883a 	nop
    3eb4:	e037883a 	mov	sp,fp
    3eb8:	df000017 	ldw	fp,0(sp)
    3ebc:	dec00104 	addi	sp,sp,4
    3ec0:	f800283a 	ret

00003ec4 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3ec4:	defffd04 	addi	sp,sp,-12
    3ec8:	dfc00215 	stw	ra,8(sp)
    3ecc:	df000115 	stw	fp,4(sp)
    3ed0:	df000104 	addi	fp,sp,4
    3ed4:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3ed8:	e0bfff17 	ldw	r2,-4(fp)
    3edc:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3ee0:	e0bfff17 	ldw	r2,-4(fp)
    3ee4:	10800317 	ldw	r2,12(r2)
    3ee8:	1009883a 	mov	r4,r2
    3eec:	0002c6c0 	call	2c6c <_ZN3USB14GetAddressPoolEv>
    3ef0:	1009883a 	mov	r4,r2
    3ef4:	20800017 	ldw	r2,0(r4)
    3ef8:	10800204 	addi	r2,r2,8
    3efc:	10800017 	ldw	r2,0(r2)
    3f00:	e0ffff17 	ldw	r3,-4(fp)
    3f04:	18c00403 	ldbu	r3,16(r3)
    3f08:	18c03fcc 	andi	r3,r3,255
    3f0c:	180b883a 	mov	r5,r3
    3f10:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3f14:	e0bfff17 	ldw	r2,-4(fp)
    3f18:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	00c00044 	movi	r3,1
    3f24:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3f30:	e0bfff17 	ldw	r2,-4(fp)
    3f34:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3f38:	e0bfff17 	ldw	r2,-4(fp)
    3f3c:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3f40:	0005883a 	mov	r2,zero
}
    3f44:	e037883a 	mov	sp,fp
    3f48:	dfc00117 	ldw	ra,4(sp)
    3f4c:	df000017 	ldw	fp,0(sp)
    3f50:	dec00204 	addi	sp,sp,8
    3f54:	f800283a 	ret

00003f58 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3f58:	defffa04 	addi	sp,sp,-24
    3f5c:	dfc00515 	stw	ra,20(sp)
    3f60:	df000415 	stw	fp,16(sp)
    3f64:	df000404 	addi	fp,sp,16
    3f68:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3f6c:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3f70:	e0bfff17 	ldw	r2,-4(fp)
    3f74:	10800943 	ldbu	r2,37(r2)
    3f78:	1080005c 	xori	r2,r2,1
    3f7c:	10803fcc 	andi	r2,r2,255
    3f80:	10000226 	beq	r2,zero,3f8c <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3f84:	0005883a 	mov	r2,zero
    3f88:	00002c06 	br	403c <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3f8c:	00006dc0 	call	6dc <_Z6millisv>
    3f90:	1007883a 	mov	r3,r2
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	10800717 	ldw	r2,28(r2)
    3f9c:	1885c83a 	sub	r2,r3,r2
    3fa0:	0084303a 	nor	r2,zero,r2
    3fa4:	1004d7fa 	srli	r2,r2,31
    3fa8:	10803fcc 	andi	r2,r2,255
    3fac:	10002226 	beq	r2,zero,4038 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3fb0:	00006dc0 	call	6dc <_Z6millisv>
    3fb4:	1007883a 	mov	r3,r2
    3fb8:	e0bfff17 	ldw	r2,-4(fp)
    3fbc:	10800903 	ldbu	r2,36(r2)
    3fc0:	10803fcc 	andi	r2,r2,255
    3fc4:	1887883a 	add	r3,r3,r2
    3fc8:	e0bfff17 	ldw	r2,-4(fp)
    3fcc:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3fd0:	e0bfff17 	ldw	r2,-4(fp)
    3fd4:	10800603 	ldbu	r2,24(r2)
    3fd8:	10803fcc 	andi	r2,r2,255
    3fdc:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3fe0:	e0bfff17 	ldw	r2,-4(fp)
    3fe4:	11000317 	ldw	r4,12(r2)
    3fe8:	e0bfff17 	ldw	r2,-4(fp)
    3fec:	10800403 	ldbu	r2,16(r2)
    3ff0:	11403fcc 	andi	r5,r2,255
    3ff4:	e0bfff17 	ldw	r2,-4(fp)
    3ff8:	108005c3 	ldbu	r2,23(r2)
    3ffc:	11803fcc 	andi	r6,r2,255
    4000:	e0bfff17 	ldw	r2,-4(fp)
    4004:	10800f84 	addi	r2,r2,62
    4008:	e0ffff17 	ldw	r3,-4(fp)
    400c:	18c00903 	ldbu	r3,36(r3)
    4010:	18c03fcc 	andi	r3,r3,255
    4014:	e1fffe84 	addi	r7,fp,-6
    4018:	d8c00115 	stw	r3,4(sp)
    401c:	d8800015 	stw	r2,0(sp)
    4020:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    4024:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    4028:	e0bffe43 	ldbu	r2,-7(fp)
    402c:	1000021e 	bne	r2,zero,4038 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    4030:	e13fff17 	ldw	r4,-4(fp)
    4034:	00040500 	call	4050 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    4038:	e0bffe03 	ldbu	r2,-8(fp)
}
    403c:	e037883a 	mov	sp,fp
    4040:	dfc00117 	ldw	ra,4(sp)
    4044:	df000017 	ldw	fp,0(sp)
    4048:	dec00204 	addi	sp,sp,8
    404c:	f800283a 	ret

00004050 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    4050:	defffd04 	addi	sp,sp,-12
    4054:	df000215 	stw	fp,8(sp)
    4058:	df000204 	addi	fp,sp,8
    405c:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    4060:	e0bfff17 	ldw	r2,-4(fp)
    4064:	10800f83 	ldbu	r2,62(r2)
    4068:	10803fcc 	andi	r2,r2,255
    406c:	108001d8 	cmpnei	r2,r2,7
    4070:	10002f1e 	bne	r2,zero,4130 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    4074:	e0bfff17 	ldw	r2,-4(fp)
    4078:	10801083 	ldbu	r2,66(r2)
    407c:	10803fcc 	andi	r2,r2,255
    4080:	10800058 	cmpnei	r2,r2,1
    4084:	10000a1e 	bne	r2,zero,40b0 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	10c0098b 	ldhu	r3,38(r2)
    4090:	008000b4 	movhi	r2,2
    4094:	108ac884 	addi	r2,r2,11042
    4098:	1080000b 	ldhu	r2,0(r2)
    409c:	1884b03a 	or	r2,r3,r2
    40a0:	1007883a 	mov	r3,r2
    40a4:	e0bfff17 	ldw	r2,-4(fp)
    40a8:	10c0098d 	sth	r3,38(r2)
    40ac:	00000b06 	br	40dc <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	1080098b 	ldhu	r2,38(r2)
    40b8:	1007883a 	mov	r3,r2
    40bc:	008000b4 	movhi	r2,2
    40c0:	108ac884 	addi	r2,r2,11042
    40c4:	1080000b 	ldhu	r2,0(r2)
    40c8:	0084303a 	nor	r2,zero,r2
    40cc:	1884703a 	and	r2,r3,r2
    40d0:	1007883a 	mov	r3,r2
    40d4:	e0bfff17 	ldw	r2,-4(fp)
    40d8:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    40dc:	e0bfff17 	ldw	r2,-4(fp)
    40e0:	10c0098b 	ldhu	r3,38(r2)
    40e4:	e0bfff17 	ldw	r2,-4(fp)
    40e8:	10800a0b 	ldhu	r2,40(r2)
    40ec:	18ffffcc 	andi	r3,r3,65535
    40f0:	10bfffcc 	andi	r2,r2,65535
    40f4:	18800e26 	beq	r3,r2,4130 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    40f8:	e0bfff17 	ldw	r2,-4(fp)
    40fc:	1080098b 	ldhu	r2,38(r2)
    4100:	1007883a 	mov	r3,r2
    4104:	e0bfff17 	ldw	r2,-4(fp)
    4108:	10800a0b 	ldhu	r2,40(r2)
    410c:	0084303a 	nor	r2,zero,r2
    4110:	1884703a 	and	r2,r3,r2
    4114:	1007883a 	mov	r3,r2
    4118:	e0bfff17 	ldw	r2,-4(fp)
    411c:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    4120:	e0bfff17 	ldw	r2,-4(fp)
    4124:	10c0098b 	ldhu	r3,38(r2)
    4128:	e0bfff17 	ldw	r2,-4(fp)
    412c:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    4130:	e0bfff17 	ldw	r2,-4(fp)
    4134:	10800f83 	ldbu	r2,62(r2)
    4138:	10803fcc 	andi	r2,r2,255
    413c:	10800820 	cmpeqi	r2,r2,32
    4140:	1000b026 	beq	r2,zero,4404 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    4144:	e0bfff17 	ldw	r2,-4(fp)
    4148:	10c0098b 	ldhu	r3,38(r2)
    414c:	008000b4 	movhi	r2,2
    4150:	108ac884 	addi	r2,r2,11042
    4154:	1080000b 	ldhu	r2,0(r2)
    4158:	1884703a 	and	r2,r3,r2
    415c:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    4160:	e0bfff17 	ldw	r2,-4(fp)
    4164:	108010c3 	ldbu	r2,67(r2)
    4168:	10803fcc 	andi	r2,r2,255
    416c:	108003cc 	andi	r2,r2,15
    4170:	1004923a 	slli	r2,r2,8
    4174:	1007883a 	mov	r3,r2
    4178:	e0bffe0b 	ldhu	r2,-8(fp)
    417c:	1884b03a 	or	r2,r3,r2
    4180:	1007883a 	mov	r3,r2
    4184:	e0bfff17 	ldw	r2,-4(fp)
    4188:	10801083 	ldbu	r2,66(r2)
    418c:	10803fcc 	andi	r2,r2,255
    4190:	10803c0c 	andi	r2,r2,240
    4194:	1884b03a 	or	r2,r3,r2
    4198:	1007883a 	mov	r3,r2
    419c:	e0bfff17 	ldw	r2,-4(fp)
    41a0:	10801083 	ldbu	r2,66(r2)
    41a4:	10803fcc 	andi	r2,r2,255
    41a8:	1080030c 	andi	r2,r2,12
    41ac:	100492ba 	slli	r2,r2,10
    41b0:	1884b03a 	or	r2,r3,r2
    41b4:	1007883a 	mov	r3,r2
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	10801083 	ldbu	r2,66(r2)
    41c0:	10803fcc 	andi	r2,r2,255
    41c4:	1080004c 	andi	r2,r2,1
    41c8:	100490fa 	slli	r2,r2,3
    41cc:	1884b03a 	or	r2,r3,r2
    41d0:	1007883a 	mov	r3,r2
    41d4:	e0bfff17 	ldw	r2,-4(fp)
    41d8:	108010c3 	ldbu	r2,67(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	1080300c 	andi	r2,r2,192
    41e4:	1004923a 	slli	r2,r2,8
    41e8:	1884b03a 	or	r2,r3,r2
    41ec:	1007883a 	mov	r3,r2
    41f0:	e0bfff17 	ldw	r2,-4(fp)
    41f4:	108010c3 	ldbu	r2,67(r2)
    41f8:	10803fcc 	andi	r2,r2,255
    41fc:	10800c0c 	andi	r2,r2,48
    4200:	1005d13a 	srai	r2,r2,4
    4204:	1884b03a 	or	r2,r3,r2
    4208:	1007883a 	mov	r3,r2
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    4214:	e0bfff17 	ldw	r2,-4(fp)
    4218:	10801143 	ldbu	r2,69(r2)
    421c:	10803fcc 	andi	r2,r2,255
    4220:	1004923a 	slli	r2,r2,8
    4224:	1007883a 	mov	r3,r2
    4228:	e0bfff17 	ldw	r2,-4(fp)
    422c:	10801103 	ldbu	r2,68(r2)
    4230:	10803fcc 	andi	r2,r2,255
    4234:	1884b03a 	or	r2,r3,r2
    4238:	1007883a 	mov	r3,r2
    423c:	e0bfff17 	ldw	r2,-4(fp)
    4240:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    4244:	e0bfff17 	ldw	r2,-4(fp)
    4248:	108011c3 	ldbu	r2,71(r2)
    424c:	10803fcc 	andi	r2,r2,255
    4250:	1004923a 	slli	r2,r2,8
    4254:	1007883a 	mov	r3,r2
    4258:	e0bfff17 	ldw	r2,-4(fp)
    425c:	10801183 	ldbu	r2,70(r2)
    4260:	10803fcc 	andi	r2,r2,255
    4264:	1884b03a 	or	r2,r3,r2
    4268:	1007883a 	mov	r3,r2
    426c:	e0bfff17 	ldw	r2,-4(fp)
    4270:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    4274:	e0bfff17 	ldw	r2,-4(fp)
    4278:	10801243 	ldbu	r2,73(r2)
    427c:	10803fcc 	andi	r2,r2,255
    4280:	1004923a 	slli	r2,r2,8
    4284:	1007883a 	mov	r3,r2
    4288:	e0bfff17 	ldw	r2,-4(fp)
    428c:	10801203 	ldbu	r2,72(r2)
    4290:	10803fcc 	andi	r2,r2,255
    4294:	1884b03a 	or	r2,r3,r2
    4298:	1007883a 	mov	r3,r2
    429c:	e0bfff17 	ldw	r2,-4(fp)
    42a0:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    42a4:	e0bfff17 	ldw	r2,-4(fp)
    42a8:	108012c3 	ldbu	r2,75(r2)
    42ac:	10803fcc 	andi	r2,r2,255
    42b0:	1004923a 	slli	r2,r2,8
    42b4:	1007883a 	mov	r3,r2
    42b8:	e0bfff17 	ldw	r2,-4(fp)
    42bc:	10801283 	ldbu	r2,74(r2)
    42c0:	10803fcc 	andi	r2,r2,255
    42c4:	1884b03a 	or	r2,r3,r2
    42c8:	1007883a 	mov	r3,r2
    42cc:	e0bfff17 	ldw	r2,-4(fp)
    42d0:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    42d4:	e0bfff17 	ldw	r2,-4(fp)
    42d8:	10801343 	ldbu	r2,77(r2)
    42dc:	10803fcc 	andi	r2,r2,255
    42e0:	1004923a 	slli	r2,r2,8
    42e4:	1007883a 	mov	r3,r2
    42e8:	e0bfff17 	ldw	r2,-4(fp)
    42ec:	10801303 	ldbu	r2,76(r2)
    42f0:	10803fcc 	andi	r2,r2,255
    42f4:	1884b03a 	or	r2,r3,r2
    42f8:	1007883a 	mov	r3,r2
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    4304:	e0bfff17 	ldw	r2,-4(fp)
    4308:	108013c3 	ldbu	r2,79(r2)
    430c:	10803fcc 	andi	r2,r2,255
    4310:	1004923a 	slli	r2,r2,8
    4314:	1007883a 	mov	r3,r2
    4318:	e0bfff17 	ldw	r2,-4(fp)
    431c:	10801383 	ldbu	r2,78(r2)
    4320:	10803fcc 	andi	r2,r2,255
    4324:	1884b03a 	or	r2,r3,r2
    4328:	1007883a 	mov	r3,r2
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	10c0098b 	ldhu	r3,38(r2)
    433c:	e0bfff17 	ldw	r2,-4(fp)
    4340:	10800a0b 	ldhu	r2,40(r2)
    4344:	18ffffcc 	andi	r3,r3,65535
    4348:	10bfffcc 	andi	r2,r2,65535
    434c:	18800e26 	beq	r3,r2,4388 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    4350:	e0bfff17 	ldw	r2,-4(fp)
    4354:	1080098b 	ldhu	r2,38(r2)
    4358:	1007883a 	mov	r3,r2
    435c:	e0bfff17 	ldw	r2,-4(fp)
    4360:	10800a0b 	ldhu	r2,40(r2)
    4364:	0084303a 	nor	r2,zero,r2
    4368:	1884703a 	and	r2,r3,r2
    436c:	1007883a 	mov	r3,r2
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    4378:	e0bfff17 	ldw	r2,-4(fp)
    437c:	10c0098b 	ldhu	r3,38(r2)
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    4388:	e0bfff17 	ldw	r2,-4(fp)
    438c:	10800d0b 	ldhu	r2,52(r2)
    4390:	10bfffcc 	andi	r2,r2,65535
    4394:	10000726 	beq	r2,zero,43b4 <_ZN7XBOXONE10readReportEv+0x364>
    4398:	e0bfff17 	ldw	r2,-4(fp)
    439c:	10800e0b 	ldhu	r2,56(r2)
    43a0:	10bfffcc 	andi	r2,r2,65535
    43a4:	1000031e 	bne	r2,zero,43b4 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    43a8:	e0bfff17 	ldw	r2,-4(fp)
    43ac:	00c00044 	movi	r3,1
    43b0:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    43b4:	e0bfff17 	ldw	r2,-4(fp)
    43b8:	10c00d0b 	ldhu	r3,52(r2)
    43bc:	e0bfff17 	ldw	r2,-4(fp)
    43c0:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    43c4:	e0bfff17 	ldw	r2,-4(fp)
    43c8:	10800d8b 	ldhu	r2,54(r2)
    43cc:	10bfffcc 	andi	r2,r2,65535
    43d0:	10000726 	beq	r2,zero,43f0 <_ZN7XBOXONE10readReportEv+0x3a0>
    43d4:	e0bfff17 	ldw	r2,-4(fp)
    43d8:	10800e8b 	ldhu	r2,58(r2)
    43dc:	10bfffcc 	andi	r2,r2,65535
    43e0:	1000031e 	bne	r2,zero,43f0 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    43e4:	e0bfff17 	ldw	r2,-4(fp)
    43e8:	00c00044 	movi	r3,1
    43ec:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    43f0:	e0bfff17 	ldw	r2,-4(fp)
    43f4:	10c00d8b 	ldhu	r3,54(r2)
    43f8:	e0bfff17 	ldw	r2,-4(fp)
    43fc:	10c00e8d 	sth	r3,58(r2)
    4400:	00000106 	br	4408 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    4404:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    4408:	e037883a 	mov	sp,fp
    440c:	df000017 	ldw	fp,0(sp)
    4410:	dec00104 	addi	sp,sp,4
    4414:	f800283a 	ret

00004418 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    4418:	defffd04 	addi	sp,sp,-12
    441c:	df000215 	stw	fp,8(sp)
    4420:	df000204 	addi	fp,sp,8
    4424:	e13ffe15 	stw	r4,-8(fp)
    4428:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    442c:	e0bfff17 	ldw	r2,-4(fp)
    4430:	10800218 	cmpnei	r2,r2,8
    4434:	1000031e 	bne	r2,zero,4444 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    4438:	e0bffe17 	ldw	r2,-8(fp)
    443c:	10800d0b 	ldhu	r2,52(r2)
    4440:	00001306 	br	4490 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    4444:	e0bfff17 	ldw	r2,-4(fp)
    4448:	10800258 	cmpnei	r2,r2,9
    444c:	1000031e 	bne	r2,zero,445c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    4450:	e0bffe17 	ldw	r2,-8(fp)
    4454:	10800d8b 	ldhu	r2,54(r2)
    4458:	00000d06 	br	4490 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    445c:	e0bffe17 	ldw	r2,-8(fp)
    4460:	10c0098b 	ldhu	r3,38(r2)
    4464:	e0bfff17 	ldw	r2,-4(fp)
    4468:	10803fcc 	andi	r2,r2,255
    446c:	1089883a 	add	r4,r2,r2
    4470:	008000b4 	movhi	r2,2
    4474:	108ac084 	addi	r2,r2,11010
    4478:	2085883a 	add	r2,r4,r2
    447c:	1080000b 	ldhu	r2,0(r2)
    4480:	1884703a 	and	r2,r3,r2
    4484:	10bfffcc 	andi	r2,r2,65535
    4488:	1004c03a 	cmpne	r2,r2,zero
    448c:	10803fcc 	andi	r2,r2,255
}
    4490:	e037883a 	mov	sp,fp
    4494:	df000017 	ldw	fp,0(sp)
    4498:	dec00104 	addi	sp,sp,4
    449c:	f800283a 	ret

000044a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    44a0:	defffc04 	addi	sp,sp,-16
    44a4:	df000315 	stw	fp,12(sp)
    44a8:	df000304 	addi	fp,sp,12
    44ac:	e13ffe15 	stw	r4,-8(fp)
    44b0:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    44b4:	e0bfff17 	ldw	r2,-4(fp)
    44b8:	10800218 	cmpnei	r2,r2,8
    44bc:	10000a1e 	bne	r2,zero,44e8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    44c0:	e0bffe17 	ldw	r2,-8(fp)
    44c4:	10800f03 	ldbu	r2,60(r2)
    44c8:	10803fcc 	andi	r2,r2,255
    44cc:	10000426 	beq	r2,zero,44e0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    44d0:	e0bffe17 	ldw	r2,-8(fp)
    44d4:	10000f05 	stb	zero,60(r2)
                        return true;
    44d8:	00800044 	movi	r2,1
    44dc:	00002806 	br	4580 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    44e0:	0005883a 	mov	r2,zero
    44e4:	00002606 	br	4580 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    44e8:	e0bfff17 	ldw	r2,-4(fp)
    44ec:	10800258 	cmpnei	r2,r2,9
    44f0:	10000a1e 	bne	r2,zero,451c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    44f4:	e0bffe17 	ldw	r2,-8(fp)
    44f8:	10800f43 	ldbu	r2,61(r2)
    44fc:	10803fcc 	andi	r2,r2,255
    4500:	10000426 	beq	r2,zero,4514 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10000f45 	stb	zero,61(r2)
                        return true;
    450c:	00800044 	movi	r2,1
    4510:	00001b06 	br	4580 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4514:	0005883a 	mov	r2,zero
    4518:	00001906 	br	4580 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    451c:	e0bfff17 	ldw	r2,-4(fp)
    4520:	10803fcc 	andi	r2,r2,255
    4524:	1087883a 	add	r3,r2,r2
    4528:	008000b4 	movhi	r2,2
    452c:	108ac084 	addi	r2,r2,11010
    4530:	1885883a 	add	r2,r3,r2
    4534:	1080000b 	ldhu	r2,0(r2)
    4538:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    453c:	e0bffe17 	ldw	r2,-8(fp)
    4540:	10c00a8b 	ldhu	r3,42(r2)
    4544:	e0bffd0b 	ldhu	r2,-12(fp)
    4548:	1884703a 	and	r2,r3,r2
    454c:	10bfffcc 	andi	r2,r2,65535
    4550:	1004c03a 	cmpne	r2,r2,zero
    4554:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4558:	e0bffe17 	ldw	r2,-8(fp)
    455c:	10800a8b 	ldhu	r2,42(r2)
    4560:	1007883a 	mov	r3,r2
    4564:	e0bffd0b 	ldhu	r2,-12(fp)
    4568:	0084303a 	nor	r2,zero,r2
    456c:	1884703a 	and	r2,r3,r2
    4570:	1007883a 	mov	r3,r2
    4574:	e0bffe17 	ldw	r2,-8(fp)
    4578:	10c00a8d 	sth	r3,42(r2)
        return click;
    457c:	e0bffd83 	ldbu	r2,-10(fp)
}
    4580:	e037883a 	mov	sp,fp
    4584:	df000017 	ldw	fp,0(sp)
    4588:	dec00104 	addi	sp,sp,4
    458c:	f800283a 	ret

00004590 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    4590:	defffd04 	addi	sp,sp,-12
    4594:	df000215 	stw	fp,8(sp)
    4598:	df000204 	addi	fp,sp,8
    459c:	e13ffe15 	stw	r4,-8(fp)
    45a0:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    45a4:	e0bfff17 	ldw	r2,-4(fp)
    45a8:	e0fffe17 	ldw	r3,-8(fp)
    45ac:	10800584 	addi	r2,r2,22
    45b0:	1085883a 	add	r2,r2,r2
    45b4:	1885883a 	add	r2,r3,r2
    45b8:	1080000b 	ldhu	r2,0(r2)
}
    45bc:	e037883a 	mov	sp,fp
    45c0:	df000017 	ldw	fp,0(sp)
    45c4:	dec00104 	addi	sp,sp,4
    45c8:	f800283a 	ret

000045cc <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    45cc:	defff904 	addi	sp,sp,-28
    45d0:	dfc00615 	stw	ra,24(sp)
    45d4:	df000515 	stw	fp,20(sp)
    45d8:	df000504 	addi	fp,sp,20
    45dc:	e13ffd15 	stw	r4,-12(fp)
    45e0:	e17ffe15 	stw	r5,-8(fp)
    45e4:	3005883a 	mov	r2,r6
    45e8:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    45ec:	e0bffe17 	ldw	r2,-8(fp)
    45f0:	10c00084 	addi	r3,r2,2
    45f4:	e0bffd17 	ldw	r2,-12(fp)
    45f8:	10801f83 	ldbu	r2,126(r2)
    45fc:	11000044 	addi	r4,r2,1
    4600:	200b883a 	mov	r5,r4
    4604:	e13ffd17 	ldw	r4,-12(fp)
    4608:	21401f85 	stb	r5,126(r4)
    460c:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    4610:	e0bffd17 	ldw	r2,-12(fp)
    4614:	10c00317 	ldw	r3,12(r2)
    4618:	e0bffd17 	ldw	r2,-12(fp)
    461c:	10800403 	ldbu	r2,16(r2)
    4620:	11003fcc 	andi	r4,r2,255
    4624:	e0bffd17 	ldw	r2,-12(fp)
    4628:	10800503 	ldbu	r2,20(r2)
    462c:	11403fcc 	andi	r5,r2,255
    4630:	e1bfff0b 	ldhu	r6,-4(fp)
    4634:	e0bffe17 	ldw	r2,-8(fp)
    4638:	d8800015 	stw	r2,0(sp)
    463c:	300f883a 	mov	r7,r6
    4640:	280d883a 	mov	r6,r5
    4644:	200b883a 	mov	r5,r4
    4648:	1809883a 	mov	r4,r3
    464c:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    4650:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    4654:	e0bffc03 	ldbu	r2,-16(fp)
}
    4658:	e037883a 	mov	sp,fp
    465c:	dfc00117 	ldw	ra,4(sp)
    4660:	df000017 	ldw	fp,0(sp)
    4664:	dec00204 	addi	sp,sp,8
    4668:	f800283a 	ret

0000466c <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    466c:	defff904 	addi	sp,sp,-28
    4670:	dfc00615 	stw	ra,24(sp)
    4674:	df000515 	stw	fp,20(sp)
    4678:	df000504 	addi	fp,sp,20
    467c:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4680:	00800244 	movi	r2,9
    4684:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4688:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    468c:	00800244 	movi	r2,9
    4690:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4694:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4698:	008003c4 	movi	r2,15
    469c:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    46a0:	00800104 	movi	r2,4
    46a4:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    46a8:	00800104 	movi	r2,4
    46ac:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    46b0:	00800804 	movi	r2,32
    46b4:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    46b8:	00800804 	movi	r2,32
    46bc:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    46c0:	00bfe004 	movi	r2,-128
    46c4:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    46c8:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    46cc:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    46d0:	01800344 	movi	r6,13
    46d4:	e17ffb04 	addi	r5,fp,-20
    46d8:	e13fff17 	ldw	r4,-4(fp)
    46dc:	00045cc0 	call	45cc <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    46e0:	e0bfff17 	ldw	r2,-4(fp)
    46e4:	10800817 	ldw	r2,32(r2)
    46e8:	10000326 	beq	r2,zero,46f8 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    46ec:	e0bfff17 	ldw	r2,-4(fp)
    46f0:	10800817 	ldw	r2,32(r2)
    46f4:	103ee83a 	callr	r2
}
    46f8:	0001883a 	nop
    46fc:	e037883a 	mov	sp,fp
    4700:	dfc00117 	ldw	ra,4(sp)
    4704:	df000017 	ldw	fp,0(sp)
    4708:	dec00204 	addi	sp,sp,8
    470c:	f800283a 	ret

00004710 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    4710:	defff904 	addi	sp,sp,-28
    4714:	dfc00615 	stw	ra,24(sp)
    4718:	df000515 	stw	fp,20(sp)
    471c:	df000504 	addi	fp,sp,20
    4720:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4724:	00800244 	movi	r2,9
    4728:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    472c:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4730:	00800244 	movi	r2,9
    4734:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4738:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    473c:	008003c4 	movi	r2,15
    4740:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    4744:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    4748:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    474c:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    4750:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    4754:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4758:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    475c:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4760:	01800344 	movi	r6,13
    4764:	e17ffb04 	addi	r5,fp,-20
    4768:	e13fff17 	ldw	r4,-4(fp)
    476c:	00045cc0 	call	45cc <_ZN7XBOXONE11XboxCommandEPht>
}
    4770:	0001883a 	nop
    4774:	e037883a 	mov	sp,fp
    4778:	dfc00117 	ldw	ra,4(sp)
    477c:	df000017 	ldw	fp,0(sp)
    4780:	dec00204 	addi	sp,sp,8
    4784:	f800283a 	ret

00004788 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4788:	defff504 	addi	sp,sp,-44
    478c:	dfc00a15 	stw	ra,40(sp)
    4790:	df000915 	stw	fp,36(sp)
    4794:	df000904 	addi	fp,sp,36
    4798:	e13ffb15 	stw	r4,-20(fp)
    479c:	3009883a 	mov	r4,r6
    47a0:	3807883a 	mov	r3,r7
    47a4:	e0800217 	ldw	r2,8(fp)
    47a8:	e17ffc05 	stb	r5,-16(fp)
    47ac:	e13ffd05 	stb	r4,-12(fp)
    47b0:	e0fffe05 	stb	r3,-8(fp)
    47b4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    47b8:	00800244 	movi	r2,9
    47bc:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    47c0:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    47c4:	00800244 	movi	r2,9
    47c8:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    47cc:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    47d0:	008003c4 	movi	r2,15
    47d4:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    47d8:	e0bffc03 	ldbu	r2,-16(fp)
    47dc:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    47e0:	e0bffd03 	ldbu	r2,-12(fp)
    47e4:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    47e8:	e0bffe03 	ldbu	r2,-8(fp)
    47ec:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    47f0:	e0bfff03 	ldbu	r2,-4(fp)
    47f4:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    47f8:	00bfffc4 	movi	r2,-1
    47fc:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    4800:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    4804:	00bfffc4 	movi	r2,-1
    4808:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    480c:	01800344 	movi	r6,13
    4810:	e17ff704 	addi	r5,fp,-36
    4814:	e13ffb17 	ldw	r4,-20(fp)
    4818:	00045cc0 	call	45cc <_ZN7XBOXONE11XboxCommandEPht>
}
    481c:	0001883a 	nop
    4820:	e037883a 	mov	sp,fp
    4824:	dfc00117 	ldw	ra,4(sp)
    4828:	df000017 	ldw	fp,0(sp)
    482c:	dec00204 	addi	sp,sp,8
    4830:	f800283a 	ret

00004834 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    4834:	defffe04 	addi	sp,sp,-8
    4838:	df000115 	stw	fp,4(sp)
    483c:	df000104 	addi	fp,sp,4
    4840:	e13fff15 	stw	r4,-4(fp)
    4844:	e0bfff17 	ldw	r2,-4(fp)
    4848:	10000005 	stb	zero,0(r2)
    484c:	e0bfff17 	ldw	r2,-4(fp)
    4850:	10c00043 	ldbu	r3,1(r2)
    4854:	1806703a 	and	r3,r3,zero
    4858:	10c00045 	stb	r3,1(r2)
    485c:	10c00083 	ldbu	r3,2(r2)
    4860:	1806703a 	and	r3,r3,zero
    4864:	10c00085 	stb	r3,2(r2)
    4868:	10c000c3 	ldbu	r3,3(r2)
    486c:	1806703a 	and	r3,r3,zero
    4870:	10c000c5 	stb	r3,3(r2)
    4874:	10c00103 	ldbu	r3,4(r2)
    4878:	1806703a 	and	r3,r3,zero
    487c:	10c00105 	stb	r3,4(r2)
        };
    4880:	0001883a 	nop
    4884:	e037883a 	mov	sp,fp
    4888:	df000017 	ldw	fp,0(sp)
    488c:	dec00104 	addi	sp,sp,4
    4890:	f800283a 	ret

00004894 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    4894:	defffe04 	addi	sp,sp,-8
    4898:	df000115 	stw	fp,4(sp)
    489c:	df000104 	addi	fp,sp,4
    48a0:	e13fff15 	stw	r4,-4(fp)
    48a4:	e0bfff17 	ldw	r2,-4(fp)
    48a8:	10000015 	stw	zero,0(r2)
    48ac:	e0bfff17 	ldw	r2,-4(fp)
    48b0:	10000105 	stb	zero,4(r2)
    48b4:	e0bfff17 	ldw	r2,-4(fp)
    48b8:	10000145 	stb	zero,5(r2)
        };
    48bc:	0001883a 	nop
    48c0:	e037883a 	mov	sp,fp
    48c4:	df000017 	ldw	fp,0(sp)
    48c8:	dec00104 	addi	sp,sp,4
    48cc:	f800283a 	ret

000048d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    48d0:	defffd04 	addi	sp,sp,-12
    48d4:	df000215 	stw	fp,8(sp)
    48d8:	df000204 	addi	fp,sp,8
    48dc:	e13ffe15 	stw	r4,-8(fp)
    48e0:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    48e4:	e0bfff17 	ldw	r2,-4(fp)
    48e8:	10c00043 	ldbu	r3,1(r2)
    48ec:	11000083 	ldbu	r4,2(r2)
    48f0:	2008923a 	slli	r4,r4,8
    48f4:	20c6b03a 	or	r3,r4,r3
    48f8:	110000c3 	ldbu	r4,3(r2)
    48fc:	2008943a 	slli	r4,r4,16
    4900:	20c6b03a 	or	r3,r4,r3
    4904:	10800103 	ldbu	r2,4(r2)
    4908:	1004963a 	slli	r2,r2,24
    490c:	10c4b03a 	or	r2,r2,r3
    4910:	1007883a 	mov	r3,r2
    4914:	e0bffe17 	ldw	r2,-8(fp)
    4918:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    491c:	e0bfff17 	ldw	r2,-4(fp)
    4920:	10c00003 	ldbu	r3,0(r2)
    4924:	e0bffe17 	ldw	r2,-8(fp)
    4928:	10c00145 	stb	r3,5(r2)
    492c:	e0bffe17 	ldw	r2,-8(fp)
    4930:	10c00143 	ldbu	r3,5(r2)
    4934:	e0bffe17 	ldw	r2,-8(fp)
    4938:	10c00105 	stb	r3,4(r2)
        };
    493c:	0001883a 	nop
    4940:	e037883a 	mov	sp,fp
    4944:	df000017 	ldw	fp,0(sp)
    4948:	dec00104 	addi	sp,sp,4
    494c:	f800283a 	ret

00004950 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    4950:	defffe04 	addi	sp,sp,-8
    4954:	df000115 	stw	fp,4(sp)
    4958:	df000104 	addi	fp,sp,4
    495c:	e13fff15 	stw	r4,-4(fp)
    4960:	e0bfff17 	ldw	r2,-4(fp)
    4964:	10000015 	stw	zero,0(r2)
    4968:	e0bfff17 	ldw	r2,-4(fp)
    496c:	10000105 	stb	zero,4(r2)
    4970:	e0bfff17 	ldw	r2,-4(fp)
    4974:	1000018d 	sth	zero,6(r2)
        };
    4978:	0001883a 	nop
    497c:	e037883a 	mov	sp,fp
    4980:	df000017 	ldw	fp,0(sp)
    4984:	dec00104 	addi	sp,sp,4
    4988:	f800283a 	ret

0000498c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    498c:	defffd04 	addi	sp,sp,-12
    4990:	df000215 	stw	fp,8(sp)
    4994:	df000204 	addi	fp,sp,8
    4998:	e13ffe15 	stw	r4,-8(fp)
    499c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    49a0:	e0bfff17 	ldw	r2,-4(fp)
    49a4:	10c00043 	ldbu	r3,1(r2)
    49a8:	11000083 	ldbu	r4,2(r2)
    49ac:	2008923a 	slli	r4,r4,8
    49b0:	20c6b03a 	or	r3,r4,r3
    49b4:	110000c3 	ldbu	r4,3(r2)
    49b8:	2008943a 	slli	r4,r4,16
    49bc:	20c6b03a 	or	r3,r4,r3
    49c0:	10800103 	ldbu	r2,4(r2)
    49c4:	1004963a 	slli	r2,r2,24
    49c8:	10c4b03a 	or	r2,r2,r3
    49cc:	1007883a 	mov	r3,r2
    49d0:	e0bffe17 	ldw	r2,-8(fp)
    49d4:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    49d8:	e0bffe17 	ldw	r2,-8(fp)
    49dc:	1000018d 	sth	zero,6(r2)
        };
    49e0:	0001883a 	nop
    49e4:	e037883a 	mov	sp,fp
    49e8:	df000017 	ldw	fp,0(sp)
    49ec:	dec00104 	addi	sp,sp,4
    49f0:	f800283a 	ret

000049f4 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    49f4:	defffb04 	addi	sp,sp,-20
    49f8:	df000415 	stw	fp,16(sp)
    49fc:	df000404 	addi	fp,sp,16
    4a00:	e13ffc15 	stw	r4,-16(fp)
    4a04:	e17ffd15 	stw	r5,-12(fp)
    4a08:	e1bffe15 	stw	r6,-8(fp)
    4a0c:	3805883a 	mov	r2,r7
    4a10:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    4a14:	e0bffc17 	ldw	r2,-16(fp)
    4a18:	10800103 	ldbu	r2,4(r2)
    4a1c:	10803fcc 	andi	r2,r2,255
    4a20:	10000326 	beq	r2,zero,4a30 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    4a24:	10800060 	cmpeqi	r2,r2,1
    4a28:	10000a1e 	bne	r2,zero,4a54 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    4a2c:	00002906 	br	4ad4 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    4a30:	e0bffc17 	ldw	r2,-16(fp)
    4a34:	e0ffff0b 	ldhu	r3,-4(fp)
    4a38:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    4a3c:	e0bffc17 	ldw	r2,-16(fp)
    4a40:	10800103 	ldbu	r2,4(r2)
    4a44:	10800044 	addi	r2,r2,1
    4a48:	1007883a 	mov	r3,r2
    4a4c:	e0bffc17 	ldw	r2,-16(fp)
    4a50:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    4a54:	e0bffc17 	ldw	r2,-16(fp)
    4a58:	1080018b 	ldhu	r2,6(r2)
    4a5c:	10bfffcc 	andi	r2,r2,65535
    4a60:	10001626 	beq	r2,zero,4abc <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a64:	e0bffe17 	ldw	r2,-8(fp)
    4a68:	1080000b 	ldhu	r2,0(r2)
    4a6c:	10bfffcc 	andi	r2,r2,65535
    4a70:	10001226 	beq	r2,zero,4abc <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a74:	e0bffc17 	ldw	r2,-16(fp)
    4a78:	1080018b 	ldhu	r2,6(r2)
    4a7c:	10bfffc4 	addi	r2,r2,-1
    4a80:	1007883a 	mov	r3,r2
    4a84:	e0bffc17 	ldw	r2,-16(fp)
    4a88:	10c0018d 	sth	r3,6(r2)
    4a8c:	e0bffd17 	ldw	r2,-12(fp)
    4a90:	10800017 	ldw	r2,0(r2)
    4a94:	10c00044 	addi	r3,r2,1
    4a98:	e0bffd17 	ldw	r2,-12(fp)
    4a9c:	10c00015 	stw	r3,0(r2)
    4aa0:	e0bffe17 	ldw	r2,-8(fp)
    4aa4:	1080000b 	ldhu	r2,0(r2)
    4aa8:	10bfffc4 	addi	r2,r2,-1
    4aac:	1007883a 	mov	r3,r2
    4ab0:	e0bffe17 	ldw	r2,-8(fp)
    4ab4:	10c0000d 	sth	r3,0(r2)
    4ab8:	003fe606 	br	4a54 <__alt_data_end+0xfc004a54>

                                if(!countDown)
    4abc:	e0bffc17 	ldw	r2,-16(fp)
    4ac0:	1080018b 	ldhu	r2,6(r2)
    4ac4:	10bfffcc 	andi	r2,r2,65535
    4ac8:	1000021e 	bne	r2,zero,4ad4 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4acc:	e0bffc17 	ldw	r2,-16(fp)
    4ad0:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4ad4:	e0bffc17 	ldw	r2,-16(fp)
    4ad8:	1080018b 	ldhu	r2,6(r2)
    4adc:	10bfffcc 	andi	r2,r2,65535
    4ae0:	1005003a 	cmpeq	r2,r2,zero
        };
    4ae4:	e037883a 	mov	sp,fp
    4ae8:	df000017 	ldw	fp,0(sp)
    4aec:	dec00104 	addi	sp,sp,4
    4af0:	f800283a 	ret

00004af4 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4af4:	defffb04 	addi	sp,sp,-20
    4af8:	df000415 	stw	fp,16(sp)
    4afc:	df000404 	addi	fp,sp,16
    4b00:	e13ffc15 	stw	r4,-16(fp)
    4b04:	2809883a 	mov	r4,r5
    4b08:	3007883a 	mov	r3,r6
    4b0c:	3805883a 	mov	r2,r7
    4b10:	e13ffd05 	stb	r4,-12(fp)
    4b14:	e0fffe05 	stb	r3,-8(fp)
    4b18:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4b1c:	0005883a 	mov	r2,zero
        }
    4b20:	e037883a 	mov	sp,fp
    4b24:	df000017 	ldw	fp,0(sp)
    4b28:	dec00104 	addi	sp,sp,4
    4b2c:	f800283a 	ret

00004b30 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4b30:	defffb04 	addi	sp,sp,-20
    4b34:	df000415 	stw	fp,16(sp)
    4b38:	df000404 	addi	fp,sp,16
    4b3c:	e13ffc15 	stw	r4,-16(fp)
    4b40:	2809883a 	mov	r4,r5
    4b44:	3007883a 	mov	r3,r6
    4b48:	3805883a 	mov	r2,r7
    4b4c:	e13ffd05 	stb	r4,-12(fp)
    4b50:	e0fffe05 	stb	r3,-8(fp)
    4b54:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4b58:	0005883a 	mov	r2,zero
        }
    4b5c:	e037883a 	mov	sp,fp
    4b60:	df000017 	ldw	fp,0(sp)
    4b64:	dec00104 	addi	sp,sp,4
    4b68:	f800283a 	ret

00004b6c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4b6c:	defffe04 	addi	sp,sp,-8
    4b70:	df000115 	stw	fp,4(sp)
    4b74:	df000104 	addi	fp,sp,4
    4b78:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b7c:	0005883a 	mov	r2,zero
        }
    4b80:	e037883a 	mov	sp,fp
    4b84:	df000017 	ldw	fp,0(sp)
    4b88:	dec00104 	addi	sp,sp,4
    4b8c:	f800283a 	ret

00004b90 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4b90:	defffe04 	addi	sp,sp,-8
    4b94:	df000115 	stw	fp,4(sp)
    4b98:	df000104 	addi	fp,sp,4
    4b9c:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4ba0:	0005883a 	mov	r2,zero
        }
    4ba4:	e037883a 	mov	sp,fp
    4ba8:	df000017 	ldw	fp,0(sp)
    4bac:	dec00104 	addi	sp,sp,4
    4bb0:	f800283a 	ret

00004bb4 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4bb4:	defffe04 	addi	sp,sp,-8
    4bb8:	df000115 	stw	fp,4(sp)
    4bbc:	df000104 	addi	fp,sp,4
    4bc0:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4bc4:	0005883a 	mov	r2,zero
        }
    4bc8:	e037883a 	mov	sp,fp
    4bcc:	df000017 	ldw	fp,0(sp)
    4bd0:	dec00104 	addi	sp,sp,4
    4bd4:	f800283a 	ret

00004bd8 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4bd8:	defffd04 	addi	sp,sp,-12
    4bdc:	df000215 	stw	fp,8(sp)
    4be0:	df000204 	addi	fp,sp,8
    4be4:	e13ffe15 	stw	r4,-8(fp)
    4be8:	2805883a 	mov	r2,r5
    4bec:	e0bfff05 	stb	r2,-4(fp)
                return;
    4bf0:	0001883a 	nop
        } // Note used for hubs only!
    4bf4:	e037883a 	mov	sp,fp
    4bf8:	df000017 	ldw	fp,0(sp)
    4bfc:	dec00104 	addi	sp,sp,4
    4c00:	f800283a 	ret

00004c04 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4c04:	defffc04 	addi	sp,sp,-16
    4c08:	df000315 	stw	fp,12(sp)
    4c0c:	df000304 	addi	fp,sp,12
    4c10:	e13ffd15 	stw	r4,-12(fp)
    4c14:	2807883a 	mov	r3,r5
    4c18:	3005883a 	mov	r2,r6
    4c1c:	e0fffe0d 	sth	r3,-8(fp)
    4c20:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    4c24:	0005883a 	mov	r2,zero
        }
    4c28:	e037883a 	mov	sp,fp
    4c2c:	df000017 	ldw	fp,0(sp)
    4c30:	dec00104 	addi	sp,sp,4
    4c34:	f800283a 	ret

00004c38 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    4c38:	defffd04 	addi	sp,sp,-12
    4c3c:	df000215 	stw	fp,8(sp)
    4c40:	df000204 	addi	fp,sp,8
    4c44:	e13ffe15 	stw	r4,-8(fp)
    4c48:	2805883a 	mov	r2,r5
    4c4c:	e0bfff05 	stb	r2,-4(fp)
                return false;
    4c50:	0005883a 	mov	r2,zero
        }
    4c54:	e037883a 	mov	sp,fp
    4c58:	df000017 	ldw	fp,0(sp)
    4c5c:	dec00104 	addi	sp,sp,4
    4c60:	f800283a 	ret

00004c64 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    4c64:	defffd04 	addi	sp,sp,-12
    4c68:	df000215 	stw	fp,8(sp)
    4c6c:	df000204 	addi	fp,sp,8
    4c70:	e13ffe15 	stw	r4,-8(fp)
    4c74:	2805883a 	mov	r2,r5
    4c78:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4c7c:	00800044 	movi	r2,1
        }
    4c80:	e037883a 	mov	sp,fp
    4c84:	df000017 	ldw	fp,0(sp)
    4c88:	dec00104 	addi	sp,sp,4
    4c8c:	f800283a 	ret

00004c90 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4c90:	defffc04 	addi	sp,sp,-16
    4c94:	df000315 	stw	fp,12(sp)
    4c98:	df000304 	addi	fp,sp,12
    4c9c:	e13ffe15 	stw	r4,-8(fp)
    4ca0:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4ca4:	e03ffd05 	stb	zero,-12(fp)
    4ca8:	e0bffd03 	ldbu	r2,-12(fp)
    4cac:	10800428 	cmpgeui	r2,r2,16
    4cb0:	1000161e 	bne	r2,zero,4d0c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4cb4:	e0bffd03 	ldbu	r2,-12(fp)
    4cb8:	e0fffe17 	ldw	r3,-8(fp)
    4cbc:	10800784 	addi	r2,r2,30
    4cc0:	1085883a 	add	r2,r2,r2
    4cc4:	1085883a 	add	r2,r2,r2
    4cc8:	1885883a 	add	r2,r3,r2
    4ccc:	10800017 	ldw	r2,0(r2)
    4cd0:	10000a1e 	bne	r2,zero,4cfc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4cd4:	e0bffd03 	ldbu	r2,-12(fp)
    4cd8:	e0fffe17 	ldw	r3,-8(fp)
    4cdc:	10800784 	addi	r2,r2,30
    4ce0:	1085883a 	add	r2,r2,r2
    4ce4:	1085883a 	add	r2,r2,r2
    4ce8:	1885883a 	add	r2,r3,r2
    4cec:	e0ffff17 	ldw	r3,-4(fp)
    4cf0:	10c00015 	stw	r3,0(r2)
                                return 0;
    4cf4:	0005883a 	mov	r2,zero
    4cf8:	00000506 	br	4d10 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4cfc:	e0bffd03 	ldbu	r2,-12(fp)
    4d00:	10800044 	addi	r2,r2,1
    4d04:	e0bffd05 	stb	r2,-12(fp)
    4d08:	003fe706 	br	4ca8 <__alt_data_end+0xfc004ca8>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4d0c:	00bff4c4 	movi	r2,-45
        };
    4d10:	e037883a 	mov	sp,fp
    4d14:	df000017 	ldw	fp,0(sp)
    4d18:	dec00104 	addi	sp,sp,4
    4d1c:	f800283a 	ret

00004d20 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    4d20:	defffa04 	addi	sp,sp,-24
    4d24:	df000515 	stw	fp,20(sp)
    4d28:	df000504 	addi	fp,sp,20
    4d2c:	e13ffb15 	stw	r4,-20(fp)
    4d30:	3009883a 	mov	r4,r6
    4d34:	3807883a 	mov	r3,r7
    4d38:	e0800117 	ldw	r2,4(fp)
    4d3c:	e17ffc05 	stb	r5,-16(fp)
    4d40:	e13ffd05 	stb	r4,-12(fp)
    4d44:	e0fffe05 	stb	r3,-8(fp)
    4d48:	e0bfff05 	stb	r2,-4(fp)
        };
    4d4c:	0001883a 	nop
    4d50:	e037883a 	mov	sp,fp
    4d54:	df000017 	ldw	fp,0(sp)
    4d58:	dec00104 	addi	sp,sp,4
    4d5c:	f800283a 	ret

00004d60 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4d60:	defffe04 	addi	sp,sp,-8
    4d64:	df000115 	stw	fp,4(sp)
    4d68:	df000104 	addi	fp,sp,4
    4d6c:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4d70:	e0bfff17 	ldw	r2,-4(fp)
    4d74:	10800403 	ldbu	r2,16(r2)
        };
    4d78:	e037883a 	mov	sp,fp
    4d7c:	df000017 	ldw	fp,0(sp)
    4d80:	dec00104 	addi	sp,sp,4
    4d84:	f800283a 	ret

00004d88 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4d88:	defffe04 	addi	sp,sp,-8
    4d8c:	df000115 	stw	fp,4(sp)
    4d90:	df000104 	addi	fp,sp,4
    4d94:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4d98:	e0bfff17 	ldw	r2,-4(fp)
    4d9c:	10800943 	ldbu	r2,37(r2)
        };
    4da0:	e037883a 	mov	sp,fp
    4da4:	df000017 	ldw	fp,0(sp)
    4da8:	dec00104 	addi	sp,sp,4
    4dac:	f800283a 	ret

00004db0 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4db0:	defffc04 	addi	sp,sp,-16
    4db4:	df000315 	stw	fp,12(sp)
    4db8:	df000304 	addi	fp,sp,12
    4dbc:	e13ffd15 	stw	r4,-12(fp)
    4dc0:	2807883a 	mov	r3,r5
    4dc4:	3005883a 	mov	r2,r6
    4dc8:	e0fffe0d 	sth	r3,-8(fp)
    4dcc:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4dd0:	e0bffe0b 	ldhu	r2,-8(fp)
    4dd4:	108117a0 	cmpeqi	r2,r2,1118
    4dd8:	10000f1e 	bne	r2,zero,4e18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4ddc:	e0bffe0b 	ldhu	r2,-8(fp)
    4de0:	1081ce20 	cmpeqi	r2,r2,1848
    4de4:	10000c1e 	bne	r2,zero,4e18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4de8:	e0bffe0b 	ldhu	r2,-8(fp)
    4dec:	10839be0 	cmpeqi	r2,r2,3695
    4df0:	1000091e 	bne	r2,zero,4e18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4df4:	e0bffe0b 	ldhu	r2,-8(fp)
    4df8:	1083c360 	cmpeqi	r2,r2,3853
    4dfc:	1000061e 	bne	r2,zero,4e18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4e00:	e0bffe0b 	ldhu	r2,-8(fp)
    4e04:	10854ca0 	cmpeqi	r2,r2,5426
    4e08:	1000031e 	bne	r2,zero,4e18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4e0c:	e0bffe0b 	ldhu	r2,-8(fp)
    4e10:	10893198 	cmpnei	r2,r2,9414
    4e14:	10002c1e 	bne	r2,zero,4ec8 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4e18:	e0bfff0b 	ldhu	r2,-4(fp)
    4e1c:	1080b460 	cmpeqi	r2,r2,721
    4e20:	1000271e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4e24:	e0bfff0b 	ldhu	r2,-4(fp)
    4e28:	1080b760 	cmpeqi	r2,r2,733
    4e2c:	1000241e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e30:	e0bfff0b 	ldhu	r2,-4(fp)
    4e34:	1080b8e0 	cmpeqi	r2,r2,739
    4e38:	1000211e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e3c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e40:	1080baa0 	cmpeqi	r2,r2,746
    4e44:	10001e1e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e48:	e0bfff0b 	ldhu	r2,-4(fp)
    4e4c:	10928060 	cmpeqi	r2,r2,18945
    4e50:	10001b1e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4e54:	e0bfff0b 	ldhu	r2,-4(fp)
    4e58:	10804e60 	cmpeqi	r2,r2,313
    4e5c:	1000181e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e60:	e0bfff0b 	ldhu	r2,-4(fp)
    4e64:	108051a0 	cmpeqi	r2,r2,326
    4e68:	1000151e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e6c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e70:	108019e0 	cmpeqi	r2,r2,103
    4e74:	1000121e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e78:	e0bfff0b 	ldhu	r2,-4(fp)
    4e7c:	108280e0 	cmpeqi	r2,r2,2563
    4e80:	10000f1e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4e84:	e0bfff0b 	ldhu	r2,-4(fp)
    4e88:	109506a0 	cmpeqi	r2,r2,21530
    4e8c:	10000c1e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e90:	e0bfff0b 	ldhu	r2,-4(fp)
    4e94:	10950aa0 	cmpeqi	r2,r2,21546
    4e98:	1000091e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e9c:	e0bfff0b 	ldhu	r2,-4(fp)
    4ea0:	10950ea0 	cmpeqi	r2,r2,21562
    4ea4:	1000061e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ea8:	e0bfff0b 	ldhu	r2,-4(fp)
    4eac:	1082c2a0 	cmpeqi	r2,r2,2826
    4eb0:	1000031e 	bne	r2,zero,4ec0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4eb4:	e0bfff0b 	ldhu	r2,-4(fp)
    4eb8:	1082c498 	cmpnei	r2,r2,2834
    4ebc:	1000021e 	bne	r2,zero,4ec8 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4ec0:	00800044 	movi	r2,1
    4ec4:	00000106 	br	4ecc <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4ec8:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4ecc:	e037883a 	mov	sp,fp
    4ed0:	df000017 	ldw	fp,0(sp)
    4ed4:	dec00104 	addi	sp,sp,4
    4ed8:	f800283a 	ret

00004edc <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4edc:	defffe04 	addi	sp,sp,-8
    4ee0:	df000115 	stw	fp,4(sp)
    4ee4:	df000104 	addi	fp,sp,4
    4ee8:	e13fff15 	stw	r4,-4(fp)
    4eec:	008000b4 	movhi	r2,2
    4ef0:	108ae504 	addi	r2,r2,11156
    4ef4:	e0ffff17 	ldw	r3,-4(fp)
    4ef8:	18800015 	stw	r2,0(r3)
    4efc:	0001883a 	nop
    4f00:	e037883a 	mov	sp,fp
    4f04:	df000017 	ldw	fp,0(sp)
    4f08:	dec00104 	addi	sp,sp,4
    4f0c:	f800283a 	ret

00004f10 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4f10:	defffe04 	addi	sp,sp,-8
    4f14:	df000115 	stw	fp,4(sp)
    4f18:	df000104 	addi	fp,sp,4
    4f1c:	e13fff15 	stw	r4,-4(fp)
    4f20:	008000b4 	movhi	r2,2
    4f24:	108adf04 	addi	r2,r2,11132
    4f28:	e0ffff17 	ldw	r3,-4(fp)
    4f2c:	18800015 	stw	r2,0(r3)
    4f30:	0001883a 	nop
    4f34:	e037883a 	mov	sp,fp
    4f38:	df000017 	ldw	fp,0(sp)
    4f3c:	dec00104 	addi	sp,sp,4
    4f40:	f800283a 	ret

00004f44 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4f44:	defffe04 	addi	sp,sp,-8
    4f48:	df000115 	stw	fp,4(sp)
    4f4c:	df000104 	addi	fp,sp,4
    4f50:	e13fff15 	stw	r4,-4(fp)
    4f54:	008000b4 	movhi	r2,2
    4f58:	108ae204 	addi	r2,r2,11144
    4f5c:	e0ffff17 	ldw	r3,-4(fp)
    4f60:	18800015 	stw	r2,0(r3)
    4f64:	0001883a 	nop
    4f68:	e037883a 	mov	sp,fp
    4f6c:	df000017 	ldw	fp,0(sp)
    4f70:	dec00104 	addi	sp,sp,4
    4f74:	f800283a 	ret

00004f78 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4f78:	defffc04 	addi	sp,sp,-16
    4f7c:	dfc00315 	stw	ra,12(sp)
    4f80:	df000215 	stw	fp,8(sp)
    4f84:	df000204 	addi	fp,sp,8
    4f88:	e13ffe15 	stw	r4,-8(fp)
    4f8c:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4f90:	e0bffe17 	ldw	r2,-8(fp)
    4f94:	1009883a 	mov	r4,r2
    4f98:	0004f440 	call	4f44 <_ZN13USBReadParserC1Ev>
    4f9c:	008000b4 	movhi	r2,2
    4fa0:	108adc04 	addi	r2,r2,11120
    4fa4:	e0fffe17 	ldw	r3,-8(fp)
    4fa8:	18800015 	stw	r2,0(r3)
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	e0ffff17 	ldw	r3,-4(fp)
    4fb4:	10c00115 	stw	r3,4(r2)
    4fb8:	e0bffe17 	ldw	r2,-8(fp)
    4fbc:	10800204 	addi	r2,r2,8
    4fc0:	1009883a 	mov	r4,r2
    4fc4:	00048340 	call	4834 <_ZN16MultiValueBufferC1Ev>
    4fc8:	e0bffe17 	ldw	r2,-8(fp)
    4fcc:	10800404 	addi	r2,r2,16
    4fd0:	1009883a 	mov	r4,r2
    4fd4:	00048940 	call	4894 <_ZN20MultiByteValueParserC1Ev>
    4fd8:	e0bffe17 	ldw	r2,-8(fp)
    4fdc:	10800604 	addi	r2,r2,24
    4fe0:	1009883a 	mov	r4,r2
    4fe4:	00049500 	call	4950 <_ZN11ByteSkipperC1Ev>
    4fe8:	e0bffe17 	ldw	r2,-8(fp)
    4fec:	10000c05 	stb	zero,48(r2)
    4ff0:	e0bffe17 	ldw	r2,-8(fp)
    4ff4:	10000c45 	stb	zero,49(r2)
    4ff8:	e0bffe17 	ldw	r2,-8(fp)
    4ffc:	10000c85 	stb	zero,50(r2)
    5000:	e0bffe17 	ldw	r2,-8(fp)
    5004:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    5008:	e0bffe17 	ldw	r2,-8(fp)
    500c:	10c00804 	addi	r3,r2,32
    5010:	e0bffe17 	ldw	r2,-8(fp)
    5014:	19803fcc 	andi	r6,r3,255
    5018:	11000243 	ldbu	r4,9(r2)
    501c:	2008703a 	and	r4,r4,zero
    5020:	200b883a 	mov	r5,r4
    5024:	3009883a 	mov	r4,r6
    5028:	2908b03a 	or	r4,r5,r4
    502c:	11000245 	stb	r4,9(r2)
    5030:	1808d23a 	srli	r4,r3,8
    5034:	21803fcc 	andi	r6,r4,255
    5038:	11000283 	ldbu	r4,10(r2)
    503c:	2008703a 	and	r4,r4,zero
    5040:	200b883a 	mov	r5,r4
    5044:	3009883a 	mov	r4,r6
    5048:	2908b03a 	or	r4,r5,r4
    504c:	11000285 	stb	r4,10(r2)
    5050:	1808d43a 	srli	r4,r3,16
    5054:	21803fcc 	andi	r6,r4,255
    5058:	110002c3 	ldbu	r4,11(r2)
    505c:	2008703a 	and	r4,r4,zero
    5060:	200b883a 	mov	r5,r4
    5064:	3009883a 	mov	r4,r6
    5068:	2908b03a 	or	r4,r5,r4
    506c:	110002c5 	stb	r4,11(r2)
    5070:	180ad63a 	srli	r5,r3,24
    5074:	10c00303 	ldbu	r3,12(r2)
    5078:	1806703a 	and	r3,r3,zero
    507c:	1809883a 	mov	r4,r3
    5080:	2807883a 	mov	r3,r5
    5084:	20c6b03a 	or	r3,r4,r3
    5088:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    508c:	e0bffe17 	ldw	r2,-8(fp)
    5090:	10c00404 	addi	r3,r2,16
    5094:	e0bffe17 	ldw	r2,-8(fp)
    5098:	10800204 	addi	r2,r2,8
    509c:	100b883a 	mov	r5,r2
    50a0:	1809883a 	mov	r4,r3
    50a4:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    50a8:	e0bffe17 	ldw	r2,-8(fp)
    50ac:	10c00604 	addi	r3,r2,24
    50b0:	e0bffe17 	ldw	r2,-8(fp)
    50b4:	10800204 	addi	r2,r2,8
    50b8:	100b883a 	mov	r5,r2
    50bc:	1809883a 	mov	r4,r3
    50c0:	000498c0 	call	498c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    50c4:	0001883a 	nop
    50c8:	e037883a 	mov	sp,fp
    50cc:	dfc00117 	ldw	ra,4(sp)
    50d0:	df000017 	ldw	fp,0(sp)
    50d4:	dec00204 	addi	sp,sp,8
    50d8:	f800283a 	ret

000050dc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    50dc:	defff804 	addi	sp,sp,-32
    50e0:	dfc00715 	stw	ra,28(sp)
    50e4:	df000615 	stw	fp,24(sp)
    50e8:	df000604 	addi	fp,sp,24
    50ec:	e13ffc15 	stw	r4,-16(fp)
    50f0:	2805883a 	mov	r2,r5
    50f4:	e1bffe15 	stw	r6,-8(fp)
    50f8:	e1ffff15 	stw	r7,-4(fp)
    50fc:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    5100:	e0bffd0b 	ldhu	r2,-12(fp)
    5104:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    5108:	e0bffe17 	ldw	r2,-8(fp)
    510c:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    5110:	e0bffa0b 	ldhu	r2,-24(fp)
    5114:	10bfffcc 	andi	r2,r2,65535
    5118:	10000a26 	beq	r2,zero,5144 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    511c:	e0bffb04 	addi	r2,fp,-20
    5120:	e1bffa04 	addi	r6,fp,-24
    5124:	100b883a 	mov	r5,r2
    5128:	e13ffc17 	ldw	r4,-16(fp)
    512c:	00051580 	call	5158 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    5130:	1080005c 	xori	r2,r2,1
    5134:	10803fcc 	andi	r2,r2,255
    5138:	1000011e 	bne	r2,zero,5140 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    513c:	003ff406 	br	5110 <__alt_data_end+0xfc005110>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    5140:	0001883a 	nop
}
    5144:	e037883a 	mov	sp,fp
    5148:	dfc00117 	ldw	ra,4(sp)
    514c:	df000017 	ldw	fp,0(sp)
    5150:	dec00204 	addi	sp,sp,8
    5154:	f800283a 	ret

00005158 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    5158:	defff604 	addi	sp,sp,-40
    515c:	dfc00915 	stw	ra,36(sp)
    5160:	df000815 	stw	fp,32(sp)
    5164:	df000804 	addi	fp,sp,32
    5168:	e13ffc15 	stw	r4,-16(fp)
    516c:	e17ffd15 	stw	r5,-12(fp)
    5170:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    5174:	e0bffc17 	ldw	r2,-16(fp)
    5178:	10800804 	addi	r2,r2,32
    517c:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    5180:	e0bffc17 	ldw	r2,-16(fp)
    5184:	10800804 	addi	r2,r2,32
    5188:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	10800c03 	ldbu	r2,48(r2)
    5194:	10803fcc 	andi	r2,r2,255
    5198:	10c00168 	cmpgeui	r3,r2,5
    519c:	1801141e 	bne	r3,zero,55f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    51a0:	100690ba 	slli	r3,r2,2
    51a4:	00800034 	movhi	r2,0
    51a8:	10946e04 	addi	r2,r2,20920
    51ac:	1885883a 	add	r2,r3,r2
    51b0:	10800017 	ldw	r2,0(r2)
    51b4:	1000683a 	jmp	r2
    51b8:	000051cc 	andi	zero,zero,327
    51bc:	00005200 	call	520 <_ZN6SPI_SS7PinReadEv+0x28>
    51c0:	00005288 	cmpgei	zero,zero,330
    51c4:	0000531c 	xori	zero,zero,332
    51c8:	00005388 	cmpgei	zero,zero,334
                case 0:
                        theBuffer.valueSize = 2;
    51cc:	e0bffc17 	ldw	r2,-16(fp)
    51d0:	00c00084 	movi	r3,2
    51d4:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    51d8:	e0bffc17 	ldw	r2,-16(fp)
    51dc:	10c00404 	addi	r3,r2,16
    51e0:	e0bffc17 	ldw	r2,-16(fp)
    51e4:	10800204 	addi	r2,r2,8
    51e8:	100b883a 	mov	r5,r2
    51ec:	1809883a 	mov	r4,r3
    51f0:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    51f4:	e0bffc17 	ldw	r2,-16(fp)
    51f8:	00c00044 	movi	r3,1
    51fc:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10800404 	addi	r2,r2,16
    5208:	e1bffe17 	ldw	r6,-8(fp)
    520c:	e17ffd17 	ldw	r5,-12(fp)
    5210:	1009883a 	mov	r4,r2
    5214:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    5218:	1080005c 	xori	r2,r2,1
    521c:	10803fcc 	andi	r2,r2,255
    5220:	10000226 	beq	r2,zero,522c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    5224:	0005883a 	mov	r2,zero
    5228:	0000f206 	br	55f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    522c:	e0bffc17 	ldw	r2,-16(fp)
    5230:	10c00217 	ldw	r3,8(r2)
    5234:	1806d23a 	srli	r3,r3,8
    5238:	10800317 	ldw	r2,12(r2)
    523c:	10803fcc 	andi	r2,r2,255
    5240:	1004963a 	slli	r2,r2,24
    5244:	10c4b03a 	or	r2,r2,r3
    5248:	10c00003 	ldbu	r3,0(r2)
    524c:	e0bffc17 	ldw	r2,-16(fp)
    5250:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    5254:	e0bffc17 	ldw	r2,-16(fp)
    5258:	10c00217 	ldw	r3,8(r2)
    525c:	1806d23a 	srli	r3,r3,8
    5260:	10800317 	ldw	r2,12(r2)
    5264:	10803fcc 	andi	r2,r2,255
    5268:	1004963a 	slli	r2,r2,24
    526c:	10c4b03a 	or	r2,r2,r3
    5270:	10c00043 	ldbu	r3,1(r2)
    5274:	e0bffc17 	ldw	r2,-16(fp)
    5278:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    527c:	e0bffc17 	ldw	r2,-16(fp)
    5280:	00c00084 	movi	r3,2
    5284:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    5288:	e0bffc17 	ldw	r2,-16(fp)
    528c:	10800804 	addi	r2,r2,32
    5290:	10c00084 	addi	r3,r2,2
    5294:	e0bffc17 	ldw	r2,-16(fp)
    5298:	19803fcc 	andi	r6,r3,255
    529c:	11000243 	ldbu	r4,9(r2)
    52a0:	2008703a 	and	r4,r4,zero
    52a4:	200b883a 	mov	r5,r4
    52a8:	3009883a 	mov	r4,r6
    52ac:	2908b03a 	or	r4,r5,r4
    52b0:	11000245 	stb	r4,9(r2)
    52b4:	1808d23a 	srli	r4,r3,8
    52b8:	21803fcc 	andi	r6,r4,255
    52bc:	11000283 	ldbu	r4,10(r2)
    52c0:	2008703a 	and	r4,r4,zero
    52c4:	200b883a 	mov	r5,r4
    52c8:	3009883a 	mov	r4,r6
    52cc:	2908b03a 	or	r4,r5,r4
    52d0:	11000285 	stb	r4,10(r2)
    52d4:	1808d43a 	srli	r4,r3,16
    52d8:	21803fcc 	andi	r6,r4,255
    52dc:	110002c3 	ldbu	r4,11(r2)
    52e0:	2008703a 	and	r4,r4,zero
    52e4:	200b883a 	mov	r5,r4
    52e8:	3009883a 	mov	r4,r6
    52ec:	2908b03a 	or	r4,r5,r4
    52f0:	110002c5 	stb	r4,11(r2)
    52f4:	180ad63a 	srli	r5,r3,24
    52f8:	10c00303 	ldbu	r3,12(r2)
    52fc:	1806703a 	and	r3,r3,zero
    5300:	1809883a 	mov	r4,r3
    5304:	2807883a 	mov	r3,r5
    5308:	20c6b03a 	or	r3,r4,r3
    530c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    5310:	e0bffc17 	ldw	r2,-16(fp)
    5314:	00c000c4 	movi	r3,3
    5318:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    531c:	e0bffc17 	ldw	r2,-16(fp)
    5320:	10800c83 	ldbu	r2,50(r2)
    5324:	10803fcc 	andi	r2,r2,255
    5328:	10c00120 	cmpeqi	r3,r2,4
    532c:	1800021e 	bne	r3,zero,5338 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    5330:	10800148 	cmpgei	r2,r2,5
    5334:	00000306 	br	5344 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    5338:	e0bffc17 	ldw	r2,-16(fp)
    533c:	10000cc5 	stb	zero,51(r2)
                                        break;
    5340:	00000106 	br	5348 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    5344:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    5348:	e0bffc17 	ldw	r2,-16(fp)
    534c:	10800c43 	ldbu	r2,49(r2)
    5350:	10bfff84 	addi	r2,r2,-2
    5354:	1007883a 	mov	r3,r2
    5358:	e0bffc17 	ldw	r2,-16(fp)
    535c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    5360:	e0bffc17 	ldw	r2,-16(fp)
    5364:	10c00404 	addi	r3,r2,16
    5368:	e0bffc17 	ldw	r2,-16(fp)
    536c:	10800204 	addi	r2,r2,8
    5370:	100b883a 	mov	r5,r2
    5374:	1809883a 	mov	r4,r3
    5378:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    537c:	e0bffc17 	ldw	r2,-16(fp)
    5380:	00c00104 	movi	r3,4
    5384:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    5388:	e0bffc17 	ldw	r2,-16(fp)
    538c:	10800c83 	ldbu	r2,50(r2)
    5390:	10803fcc 	andi	r2,r2,255
    5394:	10c00120 	cmpeqi	r3,r2,4
    5398:	1800141e 	bne	r3,zero,53ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    539c:	10c00160 	cmpeqi	r3,r2,5
    53a0:	1800311e 	bne	r3,zero,5468 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    53a4:	108000a0 	cmpeqi	r2,r2,2
    53a8:	10005a26 	beq	r2,zero,5514 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    53ac:	e0bffc17 	ldw	r2,-16(fp)
    53b0:	10800404 	addi	r2,r2,16
    53b4:	e1bffe17 	ldw	r6,-8(fp)
    53b8:	e17ffd17 	ldw	r5,-12(fp)
    53bc:	1009883a 	mov	r4,r2
    53c0:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    53c4:	1080005c 	xori	r2,r2,1
    53c8:	10803fcc 	andi	r2,r2,255
    53cc:	10000226 	beq	r2,zero,53d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    53d0:	0005883a 	mov	r2,zero
    53d4:	00008706 	br	55f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    53d8:	e0bffa17 	ldw	r2,-24(fp)
    53dc:	10c00143 	ldbu	r3,5(r2)
    53e0:	e0bffc17 	ldw	r2,-16(fp)
    53e4:	10c00d05 	stb	r3,52(r2)
                                        break;
    53e8:	00005e06 	br	5564 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    53ec:	e0bffc17 	ldw	r2,-16(fp)
    53f0:	10800404 	addi	r2,r2,16
    53f4:	e1bffe17 	ldw	r6,-8(fp)
    53f8:	e17ffd17 	ldw	r5,-12(fp)
    53fc:	1009883a 	mov	r4,r2
    5400:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    5404:	1080005c 	xori	r2,r2,1
    5408:	10803fcc 	andi	r2,r2,255
    540c:	10000226 	beq	r2,zero,5418 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    5410:	0005883a 	mov	r2,zero
    5414:	00007706 	br	55f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    5418:	e0bffc17 	ldw	r2,-16(fp)
    541c:	10800e03 	ldbu	r2,56(r2)
    5420:	10803fcc 	andi	r2,r2,255
    5424:	10004c1e 	bne	r2,zero,5558 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    5428:	e0bffc17 	ldw	r2,-16(fp)
    542c:	00c00044 	movi	r3,1
    5430:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    5434:	e0bffb17 	ldw	r2,-20(fp)
    5438:	10c00083 	ldbu	r3,2(r2)
    543c:	e0bffc17 	ldw	r2,-16(fp)
    5440:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    5444:	e0bffb17 	ldw	r2,-20(fp)
    5448:	10c000c3 	ldbu	r3,3(r2)
    544c:	e0bffc17 	ldw	r2,-16(fp)
    5450:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    5454:	e0bffb17 	ldw	r2,-20(fp)
    5458:	10c001c3 	ldbu	r3,7(r2)
    545c:	e0bffc17 	ldw	r2,-16(fp)
    5460:	10c00d45 	stb	r3,53(r2)
                                        break;
    5464:	00003f06 	br	5564 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5468:	e0bffc17 	ldw	r2,-16(fp)
    546c:	10800404 	addi	r2,r2,16
    5470:	e1bffe17 	ldw	r6,-8(fp)
    5474:	e17ffd17 	ldw	r5,-12(fp)
    5478:	1009883a 	mov	r4,r2
    547c:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    5480:	1080005c 	xori	r2,r2,1
    5484:	10803fcc 	andi	r2,r2,255
    5488:	10000226 	beq	r2,zero,5494 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    548c:	0005883a 	mov	r2,zero
    5490:	00005806 	br	55f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    5494:	e0bffc17 	ldw	r2,-16(fp)
    5498:	10800cc3 	ldbu	r2,51(r2)
    549c:	10803fcc 	andi	r2,r2,255
    54a0:	10002f26 	beq	r2,zero,5560 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    54a4:	e0bffc17 	ldw	r2,-16(fp)
    54a8:	10800117 	ldw	r2,4(r2)
    54ac:	10002c26 	beq	r2,zero,5560 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    54b0:	e0bffc17 	ldw	r2,-16(fp)
    54b4:	10800117 	ldw	r2,4(r2)
    54b8:	10800017 	ldw	r2,0(r2)
    54bc:	10800017 	ldw	r2,0(r2)
    54c0:	e0fffc17 	ldw	r3,-16(fp)
    54c4:	1a000117 	ldw	r8,4(r3)
    54c8:	e0fffc17 	ldw	r3,-16(fp)
    54cc:	18c00d03 	ldbu	r3,52(r3)
    54d0:	19403fcc 	andi	r5,r3,255
    54d4:	e0fffc17 	ldw	r3,-16(fp)
    54d8:	18c00d83 	ldbu	r3,54(r3)
    54dc:	19803fcc 	andi	r6,r3,255
    54e0:	e0fffc17 	ldw	r3,-16(fp)
    54e4:	18c00dc3 	ldbu	r3,55(r3)
    54e8:	19c03fcc 	andi	r7,r3,255
    54ec:	e0fffc17 	ldw	r3,-16(fp)
    54f0:	18c00d43 	ldbu	r3,53(r3)
    54f4:	18c03fcc 	andi	r3,r3,255
    54f8:	e13ffc17 	ldw	r4,-16(fp)
    54fc:	21000804 	addi	r4,r4,32
    5500:	d9000115 	stw	r4,4(sp)
    5504:	d8c00015 	stw	r3,0(sp)
    5508:	4009883a 	mov	r4,r8
    550c:	103ee83a 	callr	r2
                                        break;
    5510:	00001306 	br	5560 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    5514:	e0bffc17 	ldw	r2,-16(fp)
    5518:	10c00604 	addi	r3,r2,24
    551c:	e0bffc17 	ldw	r2,-16(fp)
    5520:	10800c43 	ldbu	r2,49(r2)
    5524:	10803fcc 	andi	r2,r2,255
    5528:	10bfff84 	addi	r2,r2,-2
    552c:	10bfffcc 	andi	r2,r2,65535
    5530:	100f883a 	mov	r7,r2
    5534:	e1bffe17 	ldw	r6,-8(fp)
    5538:	e17ffd17 	ldw	r5,-12(fp)
    553c:	1809883a 	mov	r4,r3
    5540:	00049f40 	call	49f4 <_ZN11ByteSkipper4SkipEPPhPtt>
    5544:	1080005c 	xori	r2,r2,1
    5548:	10803fcc 	andi	r2,r2,255
    554c:	10000526 	beq	r2,zero,5564 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    5550:	0005883a 	mov	r2,zero
    5554:	00002706 	br	55f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5558:	0001883a 	nop
    555c:	00000106 	br	5564 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    5560:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    5564:	e0bffc17 	ldw	r2,-16(fp)
    5568:	10c00804 	addi	r3,r2,32
    556c:	e0bffc17 	ldw	r2,-16(fp)
    5570:	19803fcc 	andi	r6,r3,255
    5574:	11000243 	ldbu	r4,9(r2)
    5578:	2008703a 	and	r4,r4,zero
    557c:	200b883a 	mov	r5,r4
    5580:	3009883a 	mov	r4,r6
    5584:	2908b03a 	or	r4,r5,r4
    5588:	11000245 	stb	r4,9(r2)
    558c:	1808d23a 	srli	r4,r3,8
    5590:	21803fcc 	andi	r6,r4,255
    5594:	11000283 	ldbu	r4,10(r2)
    5598:	2008703a 	and	r4,r4,zero
    559c:	200b883a 	mov	r5,r4
    55a0:	3009883a 	mov	r4,r6
    55a4:	2908b03a 	or	r4,r5,r4
    55a8:	11000285 	stb	r4,10(r2)
    55ac:	1808d43a 	srli	r4,r3,16
    55b0:	21803fcc 	andi	r6,r4,255
    55b4:	110002c3 	ldbu	r4,11(r2)
    55b8:	2008703a 	and	r4,r4,zero
    55bc:	200b883a 	mov	r5,r4
    55c0:	3009883a 	mov	r4,r6
    55c4:	2908b03a 	or	r4,r5,r4
    55c8:	110002c5 	stb	r4,11(r2)
    55cc:	180ad63a 	srli	r5,r3,24
    55d0:	10c00303 	ldbu	r3,12(r2)
    55d4:	1806703a 	and	r3,r3,zero
    55d8:	1809883a 	mov	r4,r3
    55dc:	2807883a 	mov	r3,r5
    55e0:	20c6b03a 	or	r3,r4,r3
    55e4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    55e8:	e0bffc17 	ldw	r2,-16(fp)
    55ec:	10000c05 	stb	zero,48(r2)
        }
        return true;
    55f0:	00800044 	movi	r2,1
}
    55f4:	e037883a 	mov	sp,fp
    55f8:	dfc00117 	ldw	ra,4(sp)
    55fc:	df000017 	ldw	fp,0(sp)
    5600:	dec00204 	addi	sp,sp,8
    5604:	f800283a 	ret

00005608 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5608:	defff904 	addi	sp,sp,-28
    560c:	dfc00615 	stw	ra,24(sp)
    5610:	df000515 	stw	fp,20(sp)
    5614:	df000504 	addi	fp,sp,20
    5618:	e13ffc15 	stw	r4,-16(fp)
    561c:	e17ffd15 	stw	r5,-12(fp)
    5620:	3007883a 	mov	r3,r6
    5624:	3805883a 	mov	r2,r7
    5628:	e0fffe05 	stb	r3,-8(fp)
    562c:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    5630:	e0800217 	ldw	r2,8(fp)
    5634:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    5638:	e0bffc17 	ldw	r2,-16(fp)
    563c:	10800117 	ldw	r2,4(r2)
    5640:	1080004c 	andi	r2,r2,1
    5644:	1007883a 	mov	r3,r2
    5648:	e0bffb17 	ldw	r2,-20(fp)
    564c:	10800003 	ldbu	r2,0(r2)
    5650:	1080004c 	andi	r2,r2,1
    5654:	18c03fcc 	andi	r3,r3,255
    5658:	10803fcc 	andi	r2,r2,255
    565c:	18801426 	beq	r3,r2,56b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5660:	e0bffb17 	ldw	r2,-20(fp)
    5664:	10800003 	ldbu	r2,0(r2)
    5668:	1080004c 	andi	r2,r2,1
    566c:	10803fcc 	andi	r2,r2,255
    5670:	10000826 	beq	r2,zero,5694 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5674:	e0bffc17 	ldw	r2,-16(fp)
    5678:	10800017 	ldw	r2,0(r2)
    567c:	10800304 	addi	r2,r2,12
    5680:	10800017 	ldw	r2,0(r2)
    5684:	e17ffb17 	ldw	r5,-20(fp)
    5688:	e13ffc17 	ldw	r4,-16(fp)
    568c:	103ee83a 	callr	r2
    5690:	00000706 	br	56b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5694:	e0bffc17 	ldw	r2,-16(fp)
    5698:	10800017 	ldw	r2,0(r2)
    569c:	10800204 	addi	r2,r2,8
    56a0:	10800017 	ldw	r2,0(r2)
    56a4:	e17ffb17 	ldw	r5,-20(fp)
    56a8:	e13ffc17 	ldw	r4,-16(fp)
    56ac:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    56b0:	e0bffc17 	ldw	r2,-16(fp)
    56b4:	10800117 	ldw	r2,4(r2)
    56b8:	1004d07a 	srli	r2,r2,1
    56bc:	1080004c 	andi	r2,r2,1
    56c0:	1007883a 	mov	r3,r2
    56c4:	e0bffb17 	ldw	r2,-20(fp)
    56c8:	10800003 	ldbu	r2,0(r2)
    56cc:	1004d07a 	srli	r2,r2,1
    56d0:	1080004c 	andi	r2,r2,1
    56d4:	18c03fcc 	andi	r3,r3,255
    56d8:	10803fcc 	andi	r2,r2,255
    56dc:	18801426 	beq	r3,r2,5730 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    56e0:	e0bffb17 	ldw	r2,-20(fp)
    56e4:	10800003 	ldbu	r2,0(r2)
    56e8:	1080008c 	andi	r2,r2,2
    56ec:	10803fcc 	andi	r2,r2,255
    56f0:	10000826 	beq	r2,zero,5714 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    56f4:	e0bffc17 	ldw	r2,-16(fp)
    56f8:	10800017 	ldw	r2,0(r2)
    56fc:	10800504 	addi	r2,r2,20
    5700:	10800017 	ldw	r2,0(r2)
    5704:	e17ffb17 	ldw	r5,-20(fp)
    5708:	e13ffc17 	ldw	r4,-16(fp)
    570c:	103ee83a 	callr	r2
    5710:	00000706 	br	5730 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5714:	e0bffc17 	ldw	r2,-16(fp)
    5718:	10800017 	ldw	r2,0(r2)
    571c:	10800404 	addi	r2,r2,16
    5720:	10800017 	ldw	r2,0(r2)
    5724:	e17ffb17 	ldw	r5,-20(fp)
    5728:	e13ffc17 	ldw	r4,-16(fp)
    572c:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5730:	e0bffc17 	ldw	r2,-16(fp)
    5734:	10800117 	ldw	r2,4(r2)
    5738:	1004d0ba 	srli	r2,r2,2
    573c:	1080004c 	andi	r2,r2,1
    5740:	1007883a 	mov	r3,r2
    5744:	e0bffb17 	ldw	r2,-20(fp)
    5748:	10800003 	ldbu	r2,0(r2)
    574c:	1004d0ba 	srli	r2,r2,2
    5750:	1080004c 	andi	r2,r2,1
    5754:	18c03fcc 	andi	r3,r3,255
    5758:	10803fcc 	andi	r2,r2,255
    575c:	18801426 	beq	r3,r2,57b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5760:	e0bffb17 	ldw	r2,-20(fp)
    5764:	10800003 	ldbu	r2,0(r2)
    5768:	1080010c 	andi	r2,r2,4
    576c:	10803fcc 	andi	r2,r2,255
    5770:	10000826 	beq	r2,zero,5794 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5774:	e0bffc17 	ldw	r2,-16(fp)
    5778:	10800017 	ldw	r2,0(r2)
    577c:	10800704 	addi	r2,r2,28
    5780:	10800017 	ldw	r2,0(r2)
    5784:	e17ffb17 	ldw	r5,-20(fp)
    5788:	e13ffc17 	ldw	r4,-16(fp)
    578c:	103ee83a 	callr	r2
    5790:	00000706 	br	57b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5794:	e0bffc17 	ldw	r2,-16(fp)
    5798:	10800017 	ldw	r2,0(r2)
    579c:	10800604 	addi	r2,r2,24
    57a0:	10800017 	ldw	r2,0(r2)
    57a4:	e17ffb17 	ldw	r5,-20(fp)
    57a8:	e13ffc17 	ldw	r4,-16(fp)
    57ac:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    57b0:	e0bffb17 	ldw	r2,-20(fp)
    57b4:	10800043 	ldbu	r2,1(r2)
    57b8:	10803fcc 	andi	r2,r2,255
    57bc:	1080201c 	xori	r2,r2,128
    57c0:	10bfe004 	addi	r2,r2,-128
    57c4:	1000061e 	bne	r2,zero,57e0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    57c8:	e0bffb17 	ldw	r2,-20(fp)
    57cc:	10800083 	ldbu	r2,2(r2)
    57d0:	10803fcc 	andi	r2,r2,255
    57d4:	1080201c 	xori	r2,r2,128
    57d8:	10bfe004 	addi	r2,r2,-128
    57dc:	10000726 	beq	r2,zero,57fc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    57e0:	e0bffc17 	ldw	r2,-16(fp)
    57e4:	10800017 	ldw	r2,0(r2)
    57e8:	10800104 	addi	r2,r2,4
    57ec:	10800017 	ldw	r2,0(r2)
    57f0:	e17ffb17 	ldw	r5,-20(fp)
    57f4:	e13ffc17 	ldw	r4,-16(fp)
    57f8:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    57fc:	e0800217 	ldw	r2,8(fp)
    5800:	10c00003 	ldbu	r3,0(r2)
    5804:	e0bffc17 	ldw	r2,-16(fp)
    5808:	10c00105 	stb	r3,4(r2)
#endif

};
    580c:	0001883a 	nop
    5810:	e037883a 	mov	sp,fp
    5814:	dfc00117 	ldw	ra,4(sp)
    5818:	df000017 	ldw	fp,0(sp)
    581c:	dec00204 	addi	sp,sp,8
    5820:	f800283a 	ret

00005824 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5824:	defff804 	addi	sp,sp,-32
    5828:	dfc00715 	stw	ra,28(sp)
    582c:	df000615 	stw	fp,24(sp)
    5830:	df000604 	addi	fp,sp,24
    5834:	e13ffc15 	stw	r4,-16(fp)
    5838:	e17ffd15 	stw	r5,-12(fp)
    583c:	3007883a 	mov	r3,r6
    5840:	3805883a 	mov	r2,r7
    5844:	e0fffe05 	stb	r3,-8(fp)
    5848:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    584c:	e0800217 	ldw	r2,8(fp)
    5850:	10800084 	addi	r2,r2,2
    5854:	10800003 	ldbu	r2,0(r2)
    5858:	10803fcc 	andi	r2,r2,255
    585c:	10800058 	cmpnei	r2,r2,1
    5860:	10009926 	beq	r2,zero,5ac8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5864:	e0bffc17 	ldw	r2,-16(fp)
    5868:	10c00103 	ldbu	r3,4(r2)
    586c:	e0800217 	ldw	r2,8(fp)
    5870:	10800003 	ldbu	r2,0(r2)
    5874:	18c03fcc 	andi	r3,r3,255
    5878:	10803fcc 	andi	r2,r2,255
    587c:	18800e26 	beq	r3,r2,58b8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5880:	e0bffc17 	ldw	r2,-16(fp)
    5884:	10800017 	ldw	r2,0(r2)
    5888:	10800204 	addi	r2,r2,8
    588c:	10800017 	ldw	r2,0(r2)
    5890:	e0fffc17 	ldw	r3,-16(fp)
    5894:	18c00103 	ldbu	r3,4(r3)
    5898:	19003fcc 	andi	r4,r3,255
    589c:	e0c00217 	ldw	r3,8(fp)
    58a0:	18c00003 	ldbu	r3,0(r3)
    58a4:	18c03fcc 	andi	r3,r3,255
    58a8:	180d883a 	mov	r6,r3
    58ac:	200b883a 	mov	r5,r4
    58b0:	e13ffc17 	ldw	r4,-16(fp)
    58b4:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    58b8:	00800084 	movi	r2,2
    58bc:	e0bffa05 	stb	r2,-24(fp)
    58c0:	e0bffa03 	ldbu	r2,-24(fp)
    58c4:	10800228 	cmpgeui	r2,r2,8
    58c8:	10006e1e 	bne	r2,zero,5a84 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    58cc:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    58d0:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    58d4:	00800084 	movi	r2,2
    58d8:	e0bffac5 	stb	r2,-21(fp)
    58dc:	e0bffac3 	ldbu	r2,-21(fp)
    58e0:	10800228 	cmpgeui	r2,r2,8
    58e4:	10002f1e 	bne	r2,zero,59a4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    58e8:	e0bffa03 	ldbu	r2,-24(fp)
    58ec:	e0c00217 	ldw	r3,8(fp)
    58f0:	1885883a 	add	r2,r3,r2
    58f4:	11000003 	ldbu	r4,0(r2)
    58f8:	e0bffac3 	ldbu	r2,-21(fp)
    58fc:	e0fffc17 	ldw	r3,-16(fp)
    5900:	1885883a 	add	r2,r3,r2
    5904:	10800104 	addi	r2,r2,4
    5908:	10800003 	ldbu	r2,0(r2)
    590c:	20c03fcc 	andi	r3,r4,255
    5910:	10803fcc 	andi	r2,r2,255
    5914:	1880091e 	bne	r3,r2,593c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5918:	e0bffa03 	ldbu	r2,-24(fp)
    591c:	e0c00217 	ldw	r3,8(fp)
    5920:	1885883a 	add	r2,r3,r2
    5924:	10800003 	ldbu	r2,0(r2)
    5928:	10803fcc 	andi	r2,r2,255
    592c:	10800060 	cmpeqi	r2,r2,1
    5930:	1000021e 	bne	r2,zero,593c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5934:	00800044 	movi	r2,1
    5938:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    593c:	e0bffac3 	ldbu	r2,-21(fp)
    5940:	e0c00217 	ldw	r3,8(fp)
    5944:	1885883a 	add	r2,r3,r2
    5948:	11000003 	ldbu	r4,0(r2)
    594c:	e0bffa03 	ldbu	r2,-24(fp)
    5950:	e0fffc17 	ldw	r3,-16(fp)
    5954:	1885883a 	add	r2,r3,r2
    5958:	10800104 	addi	r2,r2,4
    595c:	10800003 	ldbu	r2,0(r2)
    5960:	20c03fcc 	andi	r3,r4,255
    5964:	10803fcc 	andi	r2,r2,255
    5968:	18800a1e 	bne	r3,r2,5994 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    596c:	e0bffa03 	ldbu	r2,-24(fp)
    5970:	e0fffc17 	ldw	r3,-16(fp)
    5974:	1885883a 	add	r2,r3,r2
    5978:	10800104 	addi	r2,r2,4
    597c:	10800003 	ldbu	r2,0(r2)
    5980:	10803fcc 	andi	r2,r2,255
    5984:	10800060 	cmpeqi	r2,r2,1
    5988:	1000021e 	bne	r2,zero,5994 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    598c:	00800044 	movi	r2,1
    5990:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5994:	e0bffac3 	ldbu	r2,-21(fp)
    5998:	10800044 	addi	r2,r2,1
    599c:	e0bffac5 	stb	r2,-21(fp)
    59a0:	003fce06 	br	58dc <__alt_data_end+0xfc0058dc>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    59a4:	e0bffa43 	ldbu	r2,-23(fp)
    59a8:	1080005c 	xori	r2,r2,1
    59ac:	10803fcc 	andi	r2,r2,255
    59b0:	10001c26 	beq	r2,zero,5a24 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    59b4:	e0bffc17 	ldw	r2,-16(fp)
    59b8:	10800017 	ldw	r2,0(r2)
    59bc:	10800104 	addi	r2,r2,4
    59c0:	10800017 	ldw	r2,0(r2)
    59c4:	e0fffa03 	ldbu	r3,-24(fp)
    59c8:	e1000217 	ldw	r4,8(fp)
    59cc:	20c7883a 	add	r3,r4,r3
    59d0:	18c00003 	ldbu	r3,0(r3)
    59d4:	18c03fcc 	andi	r3,r3,255
    59d8:	180d883a 	mov	r6,r3
    59dc:	e17ffd17 	ldw	r5,-12(fp)
    59e0:	e13ffc17 	ldw	r4,-16(fp)
    59e4:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    59e8:	e0bffc17 	ldw	r2,-16(fp)
    59ec:	10800017 	ldw	r2,0(r2)
    59f0:	10800304 	addi	r2,r2,12
    59f4:	10800017 	ldw	r2,0(r2)
    59f8:	e0c00217 	ldw	r3,8(fp)
    59fc:	18c00003 	ldbu	r3,0(r3)
    5a00:	19403fcc 	andi	r5,r3,255
    5a04:	e0fffa03 	ldbu	r3,-24(fp)
    5a08:	e1000217 	ldw	r4,8(fp)
    5a0c:	20c7883a 	add	r3,r4,r3
    5a10:	18c00003 	ldbu	r3,0(r3)
    5a14:	18c03fcc 	andi	r3,r3,255
    5a18:	180d883a 	mov	r6,r3
    5a1c:	e13ffc17 	ldw	r4,-16(fp)
    5a20:	103ee83a 	callr	r2
                }
                if (!up)
    5a24:	e0bffa83 	ldbu	r2,-22(fp)
    5a28:	1080005c 	xori	r2,r2,1
    5a2c:	10803fcc 	andi	r2,r2,255
    5a30:	10001026 	beq	r2,zero,5a74 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5a34:	e0bffc17 	ldw	r2,-16(fp)
    5a38:	10800017 	ldw	r2,0(r2)
    5a3c:	10800404 	addi	r2,r2,16
    5a40:	10800017 	ldw	r2,0(r2)
    5a44:	e0fffc17 	ldw	r3,-16(fp)
    5a48:	18c00103 	ldbu	r3,4(r3)
    5a4c:	19403fcc 	andi	r5,r3,255
    5a50:	e0fffa03 	ldbu	r3,-24(fp)
    5a54:	e13ffc17 	ldw	r4,-16(fp)
    5a58:	20c7883a 	add	r3,r4,r3
    5a5c:	18c00104 	addi	r3,r3,4
    5a60:	18c00003 	ldbu	r3,0(r3)
    5a64:	18c03fcc 	andi	r3,r3,255
    5a68:	180d883a 	mov	r6,r3
    5a6c:	e13ffc17 	ldw	r4,-16(fp)
    5a70:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5a74:	e0bffa03 	ldbu	r2,-24(fp)
    5a78:	10800044 	addi	r2,r2,1
    5a7c:	e0bffa05 	stb	r2,-24(fp)
    5a80:	003f8f06 	br	58c0 <__alt_data_end+0xfc0058c0>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a84:	e03ffb05 	stb	zero,-20(fp)
    5a88:	e0bffb03 	ldbu	r2,-20(fp)
    5a8c:	10800228 	cmpgeui	r2,r2,8
    5a90:	10000e1e 	bne	r2,zero,5acc <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5a94:	e0bffb03 	ldbu	r2,-20(fp)
    5a98:	e0fffb03 	ldbu	r3,-20(fp)
    5a9c:	e1000217 	ldw	r4,8(fp)
    5aa0:	20c7883a 	add	r3,r4,r3
    5aa4:	18c00003 	ldbu	r3,0(r3)
    5aa8:	e13ffc17 	ldw	r4,-16(fp)
    5aac:	2085883a 	add	r2,r4,r2
    5ab0:	10800104 	addi	r2,r2,4
    5ab4:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5ab8:	e0bffb03 	ldbu	r2,-20(fp)
    5abc:	10800044 	addi	r2,r2,1
    5ac0:	e0bffb05 	stb	r2,-20(fp)
    5ac4:	003ff006 	br	5a88 <__alt_data_end+0xfc005a88>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5ac8:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5acc:	e037883a 	mov	sp,fp
    5ad0:	dfc00117 	ldw	ra,4(sp)
    5ad4:	df000017 	ldw	fp,0(sp)
    5ad8:	dec00204 	addi	sp,sp,8
    5adc:	f800283a 	ret

00005ae0 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5ae0:	defffa04 	addi	sp,sp,-24
    5ae4:	dfc00515 	stw	ra,20(sp)
    5ae8:	df000415 	stw	fp,16(sp)
    5aec:	df000404 	addi	fp,sp,16
    5af0:	e13ffd15 	stw	r4,-12(fp)
    5af4:	2807883a 	mov	r3,r5
    5af8:	3005883a 	mov	r2,r6
    5afc:	e0fffe05 	stb	r3,-8(fp)
    5b00:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5b04:	e0bffe03 	ldbu	r2,-8(fp)
    5b08:	1080088c 	andi	r2,r2,34
    5b0c:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5b10:	e0bfff03 	ldbu	r2,-4(fp)
    5b14:	10800130 	cmpltui	r2,r2,4
    5b18:	1000151e 	bne	r2,zero,5b70 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5b1c:	e0bfff03 	ldbu	r2,-4(fp)
    5b20:	108007a8 	cmpgeui	r2,r2,30
    5b24:	1000121e 	bne	r2,zero,5b70 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5b28:	e0bffd17 	ldw	r2,-12(fp)
    5b2c:	10800317 	ldw	r2,12(r2)
    5b30:	1080008c 	andi	r2,r2,2
    5b34:	1000021e 	bne	r2,zero,5b40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5b38:	e0bffc03 	ldbu	r2,-16(fp)
    5b3c:	1000061e 	bne	r2,zero,5b58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5b40:	e0bffd17 	ldw	r2,-12(fp)
    5b44:	10800317 	ldw	r2,12(r2)
    5b48:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5b4c:	10000526 	beq	r2,zero,5b64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5b50:	e0bffc03 	ldbu	r2,-16(fp)
    5b54:	1000031e 	bne	r2,zero,5b64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5b58:	e0bfff03 	ldbu	r2,-4(fp)
    5b5c:	10800f44 	addi	r2,r2,61
    5b60:	00008006 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5b64:	e0bfff03 	ldbu	r2,-4(fp)
    5b68:	10801744 	addi	r2,r2,93
    5b6c:	00007d06 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5b70:	e0bfff03 	ldbu	r2,-4(fp)
    5b74:	108007b0 	cmpltui	r2,r2,30
    5b78:	1000191e 	bne	r2,zero,5be0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5b7c:	e0bfff03 	ldbu	r2,-4(fp)
    5b80:	10800a28 	cmpgeui	r2,r2,40
    5b84:	1000161e 	bne	r2,zero,5be0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5b88:	e0bffc03 	ldbu	r2,-16(fp)
    5b8c:	10000c26 	beq	r2,zero,5bc0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5b90:	e0bffd17 	ldw	r2,-12(fp)
    5b94:	10800017 	ldw	r2,0(r2)
    5b98:	10800504 	addi	r2,r2,20
    5b9c:	10800017 	ldw	r2,0(r2)
    5ba0:	e13ffd17 	ldw	r4,-12(fp)
    5ba4:	103ee83a 	callr	r2
    5ba8:	1007883a 	mov	r3,r2
    5bac:	e0bfff03 	ldbu	r2,-4(fp)
    5bb0:	10bff884 	addi	r2,r2,-30
    5bb4:	1885883a 	add	r2,r3,r2
    5bb8:	10800003 	ldbu	r2,0(r2)
    5bbc:	00006906 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5bc0:	e0bfff03 	ldbu	r2,-4(fp)
    5bc4:	108009e0 	cmpeqi	r2,r2,39
    5bc8:	1000031e 	bne	r2,zero,5bd8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5bcc:	e0bfff03 	ldbu	r2,-4(fp)
    5bd0:	108004c4 	addi	r2,r2,19
    5bd4:	00006306 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5bd8:	00800c04 	movi	r2,48
    5bdc:	00006106 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5be0:	e0bfff03 	ldbu	r2,-4(fp)
    5be4:	10801670 	cmpltui	r2,r2,89
    5be8:	10000a1e 	bne	r2,zero,5c14 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5bec:	e0bfff03 	ldbu	r2,-4(fp)
    5bf0:	108018a8 	cmpgeui	r2,r2,98
    5bf4:	1000071e 	bne	r2,zero,5c14 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5bf8:	e0bffd17 	ldw	r2,-12(fp)
    5bfc:	10800317 	ldw	r2,12(r2)
    5c00:	1080004c 	andi	r2,r2,1
    5c04:	10005626 	beq	r2,zero,5d60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5c08:	e0bfff03 	ldbu	r2,-4(fp)
    5c0c:	10bff604 	addi	r2,r2,-40
    5c10:	00005406 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5c14:	e0bfff03 	ldbu	r2,-4(fp)
    5c18:	10800b70 	cmpltui	r2,r2,45
    5c1c:	10001d1e 	bne	r2,zero,5c94 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5c20:	e0bfff03 	ldbu	r2,-4(fp)
    5c24:	10800e68 	cmpgeui	r2,r2,57
    5c28:	10001a1e 	bne	r2,zero,5c94 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5c2c:	e0bffc03 	ldbu	r2,-16(fp)
    5c30:	10000c26 	beq	r2,zero,5c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    5c34:	e0bffd17 	ldw	r2,-12(fp)
    5c38:	10800017 	ldw	r2,0(r2)
    5c3c:	10800604 	addi	r2,r2,24
    5c40:	10800017 	ldw	r2,0(r2)
    5c44:	e13ffd17 	ldw	r4,-12(fp)
    5c48:	103ee83a 	callr	r2
    5c4c:	1007883a 	mov	r3,r2
    5c50:	e0bfff03 	ldbu	r2,-4(fp)
    5c54:	10bff4c4 	addi	r2,r2,-45
    5c58:	1885883a 	add	r2,r3,r2
    5c5c:	10800003 	ldbu	r2,0(r2)
    5c60:	00004006 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c64:	e0bffd17 	ldw	r2,-12(fp)
    5c68:	10800017 	ldw	r2,0(r2)
    5c6c:	10800704 	addi	r2,r2,28
    5c70:	10800017 	ldw	r2,0(r2)
    5c74:	e13ffd17 	ldw	r4,-12(fp)
    5c78:	103ee83a 	callr	r2
    5c7c:	1007883a 	mov	r3,r2
    5c80:	e0bfff03 	ldbu	r2,-4(fp)
    5c84:	10bff4c4 	addi	r2,r2,-45
    5c88:	1885883a 	add	r2,r3,r2
    5c8c:	10800003 	ldbu	r2,0(r2)
    5c90:	00003406 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    5c94:	e0bfff03 	ldbu	r2,-4(fp)
    5c98:	10801530 	cmpltui	r2,r2,84
    5c9c:	10000f1e 	bne	r2,zero,5cdc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    5ca0:	e0bfff03 	ldbu	r2,-4(fp)
    5ca4:	10801668 	cmpgeui	r2,r2,89
    5ca8:	10000c1e 	bne	r2,zero,5cdc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    5cac:	e0bffd17 	ldw	r2,-12(fp)
    5cb0:	10800017 	ldw	r2,0(r2)
    5cb4:	10800804 	addi	r2,r2,32
    5cb8:	10800017 	ldw	r2,0(r2)
    5cbc:	e13ffd17 	ldw	r4,-12(fp)
    5cc0:	103ee83a 	callr	r2
    5cc4:	1007883a 	mov	r3,r2
    5cc8:	e0bfff03 	ldbu	r2,-4(fp)
    5ccc:	10bfeb04 	addi	r2,r2,-84
    5cd0:	1885883a 	add	r2,r3,r2
    5cd4:	10800003 	ldbu	r2,0(r2)
    5cd8:	00002206 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    5cdc:	e0bfff03 	ldbu	r2,-4(fp)
    5ce0:	10c00b20 	cmpeqi	r3,r2,44
    5ce4:	18000a1e 	bne	r3,zero,5d10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    5ce8:	10c00b48 	cmpgei	r3,r2,45
    5cec:	1800031e 	bne	r3,zero,5cfc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    5cf0:	10800a20 	cmpeqi	r2,r2,40
    5cf4:	1000081e 	bne	r2,zero,5d18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    5cf8:	00001906 	br	5d60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    5cfc:	10c018a0 	cmpeqi	r3,r2,98
    5d00:	1800071e 	bne	r3,zero,5d20 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    5d04:	108018e0 	cmpeqi	r2,r2,99
    5d08:	10000d1e 	bne	r2,zero,5d40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    5d0c:	00001406 	br	5d60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    5d10:	00800804 	movi	r2,32
    5d14:	00001306 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    5d18:	00800344 	movi	r2,13
    5d1c:	00001106 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    5d20:	e0bffd17 	ldw	r2,-12(fp)
    5d24:	10800317 	ldw	r2,12(r2)
    5d28:	1080004c 	andi	r2,r2,1
    5d2c:	10000226 	beq	r2,zero,5d38 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    5d30:	00800c04 	movi	r2,48
    5d34:	00000b06 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5d38:	0005883a 	mov	r2,zero
    5d3c:	00000906 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    5d40:	e0bffd17 	ldw	r2,-12(fp)
    5d44:	10800317 	ldw	r2,12(r2)
    5d48:	1080004c 	andi	r2,r2,1
    5d4c:	10000226 	beq	r2,zero,5d58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    5d50:	00800b84 	movi	r2,46
    5d54:	00000306 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5d58:	0005883a 	mov	r2,zero
    5d5c:	00000106 	br	5d64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    5d60:	0005883a 	mov	r2,zero
}
    5d64:	e037883a 	mov	sp,fp
    5d68:	dfc00117 	ldw	ra,4(sp)
    5d6c:	df000017 	ldw	fp,0(sp)
    5d70:	dec00204 	addi	sp,sp,8
    5d74:	f800283a 	ret

00005d78 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    5d78:	defffd04 	addi	sp,sp,-12
    5d7c:	df000215 	stw	fp,8(sp)
    5d80:	df000204 	addi	fp,sp,8
    5d84:	e13ffe15 	stw	r4,-8(fp)
    5d88:	e17fff15 	stw	r5,-4(fp)
        };
    5d8c:	0001883a 	nop
    5d90:	e037883a 	mov	sp,fp
    5d94:	df000017 	ldw	fp,0(sp)
    5d98:	dec00104 	addi	sp,sp,4
    5d9c:	f800283a 	ret

00005da0 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5da0:	defffd04 	addi	sp,sp,-12
    5da4:	df000215 	stw	fp,8(sp)
    5da8:	df000204 	addi	fp,sp,8
    5dac:	e13ffe15 	stw	r4,-8(fp)
    5db0:	e17fff15 	stw	r5,-4(fp)
        };
    5db4:	0001883a 	nop
    5db8:	e037883a 	mov	sp,fp
    5dbc:	df000017 	ldw	fp,0(sp)
    5dc0:	dec00104 	addi	sp,sp,4
    5dc4:	f800283a 	ret

00005dc8 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5dc8:	defffd04 	addi	sp,sp,-12
    5dcc:	df000215 	stw	fp,8(sp)
    5dd0:	df000204 	addi	fp,sp,8
    5dd4:	e13ffe15 	stw	r4,-8(fp)
    5dd8:	e17fff15 	stw	r5,-4(fp)
        };
    5ddc:	0001883a 	nop
    5de0:	e037883a 	mov	sp,fp
    5de4:	df000017 	ldw	fp,0(sp)
    5de8:	dec00104 	addi	sp,sp,4
    5dec:	f800283a 	ret

00005df0 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5df0:	defffd04 	addi	sp,sp,-12
    5df4:	df000215 	stw	fp,8(sp)
    5df8:	df000204 	addi	fp,sp,8
    5dfc:	e13ffe15 	stw	r4,-8(fp)
    5e00:	e17fff15 	stw	r5,-4(fp)
        };
    5e04:	0001883a 	nop
    5e08:	e037883a 	mov	sp,fp
    5e0c:	df000017 	ldw	fp,0(sp)
    5e10:	dec00104 	addi	sp,sp,4
    5e14:	f800283a 	ret

00005e18 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5e18:	defffd04 	addi	sp,sp,-12
    5e1c:	df000215 	stw	fp,8(sp)
    5e20:	df000204 	addi	fp,sp,8
    5e24:	e13ffe15 	stw	r4,-8(fp)
    5e28:	e17fff15 	stw	r5,-4(fp)
        };
    5e2c:	0001883a 	nop
    5e30:	e037883a 	mov	sp,fp
    5e34:	df000017 	ldw	fp,0(sp)
    5e38:	dec00104 	addi	sp,sp,4
    5e3c:	f800283a 	ret

00005e40 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5e40:	defffd04 	addi	sp,sp,-12
    5e44:	df000215 	stw	fp,8(sp)
    5e48:	df000204 	addi	fp,sp,8
    5e4c:	e13ffe15 	stw	r4,-8(fp)
    5e50:	e17fff15 	stw	r5,-4(fp)
        };
    5e54:	0001883a 	nop
    5e58:	e037883a 	mov	sp,fp
    5e5c:	df000017 	ldw	fp,0(sp)
    5e60:	dec00104 	addi	sp,sp,4
    5e64:	f800283a 	ret

00005e68 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5e68:	defffd04 	addi	sp,sp,-12
    5e6c:	df000215 	stw	fp,8(sp)
    5e70:	df000204 	addi	fp,sp,8
    5e74:	e13ffe15 	stw	r4,-8(fp)
    5e78:	e17fff15 	stw	r5,-4(fp)
        };
    5e7c:	0001883a 	nop
    5e80:	e037883a 	mov	sp,fp
    5e84:	df000017 	ldw	fp,0(sp)
    5e88:	dec00104 	addi	sp,sp,4
    5e8c:	f800283a 	ret

00005e90 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    5e90:	defff704 	addi	sp,sp,-36
    5e94:	dfc00815 	stw	ra,32(sp)
    5e98:	df000715 	stw	fp,28(sp)
    5e9c:	df000704 	addi	fp,sp,28
    5ea0:	e13ffd15 	stw	r4,-12(fp)
    5ea4:	e17ffe15 	stw	r5,-8(fp)
    5ea8:	3005883a 	mov	r2,r6
    5eac:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    5eb0:	e0bffd17 	ldw	r2,-12(fp)
    5eb4:	10800303 	ldbu	r2,12(r2)
    5eb8:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    5ebc:	e0bfff03 	ldbu	r2,-4(fp)
    5ec0:	10c011e0 	cmpeqi	r3,r2,71
    5ec4:	1800271e 	bne	r3,zero,5f64 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    5ec8:	10c014e0 	cmpeqi	r3,r2,83
    5ecc:	1800031e 	bne	r3,zero,5edc <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    5ed0:	10800e60 	cmpeqi	r2,r2,57
    5ed4:	1000111e 	bne	r2,zero,5f1c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    5ed8:	00003506 	br	5fb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    5edc:	e0bffd17 	ldw	r2,-12(fp)
    5ee0:	10800317 	ldw	r2,12(r2)
    5ee4:	1080004c 	andi	r2,r2,1
    5ee8:	0084303a 	nor	r2,zero,r2
    5eec:	1080004c 	andi	r2,r2,1
    5ef0:	1007883a 	mov	r3,r2
    5ef4:	e0bffd17 	ldw	r2,-12(fp)
    5ef8:	1940004c 	andi	r5,r3,1
    5efc:	11000303 	ldbu	r4,12(r2)
    5f00:	00ffff84 	movi	r3,-2
    5f04:	20c6703a 	and	r3,r4,r3
    5f08:	1809883a 	mov	r4,r3
    5f0c:	2807883a 	mov	r3,r5
    5f10:	20c6b03a 	or	r3,r4,r3
    5f14:	10c00305 	stb	r3,12(r2)
                                break;
    5f18:	00002506 	br	5fb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    5f1c:	e0bffd17 	ldw	r2,-12(fp)
    5f20:	10800317 	ldw	r2,12(r2)
    5f24:	1004d07a 	srli	r2,r2,1
    5f28:	1080004c 	andi	r2,r2,1
    5f2c:	0084303a 	nor	r2,zero,r2
    5f30:	1080004c 	andi	r2,r2,1
    5f34:	1007883a 	mov	r3,r2
    5f38:	e0bffd17 	ldw	r2,-12(fp)
    5f3c:	18c0004c 	andi	r3,r3,1
    5f40:	18cb883a 	add	r5,r3,r3
    5f44:	11000303 	ldbu	r4,12(r2)
    5f48:	00ffff44 	movi	r3,-3
    5f4c:	20c6703a 	and	r3,r4,r3
    5f50:	1809883a 	mov	r4,r3
    5f54:	2807883a 	mov	r3,r5
    5f58:	20c6b03a 	or	r3,r4,r3
    5f5c:	10c00305 	stb	r3,12(r2)
                                break;
    5f60:	00001306 	br	5fb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    5f64:	e0bffd17 	ldw	r2,-12(fp)
    5f68:	10800317 	ldw	r2,12(r2)
    5f6c:	1004d0ba 	srli	r2,r2,2
    5f70:	1080004c 	andi	r2,r2,1
    5f74:	0084303a 	nor	r2,zero,r2
    5f78:	1080004c 	andi	r2,r2,1
    5f7c:	1007883a 	mov	r3,r2
    5f80:	e0bffd17 	ldw	r2,-12(fp)
    5f84:	18c0004c 	andi	r3,r3,1
    5f88:	18c7883a 	add	r3,r3,r3
    5f8c:	18cb883a 	add	r5,r3,r3
    5f90:	11000303 	ldbu	r4,12(r2)
    5f94:	00fffec4 	movi	r3,-5
    5f98:	20c6703a 	and	r3,r4,r3
    5f9c:	1809883a 	mov	r4,r3
    5fa0:	2807883a 	mov	r3,r5
    5fa4:	20c6b03a 	or	r3,r4,r3
    5fa8:	10c00305 	stb	r3,12(r2)
                                break;
    5fac:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    5fb0:	e0bffd17 	ldw	r2,-12(fp)
    5fb4:	10800303 	ldbu	r2,12(r2)
    5fb8:	10c03fcc 	andi	r3,r2,255
    5fbc:	e0bffc03 	ldbu	r2,-16(fp)
    5fc0:	18801026 	beq	r3,r2,6004 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    5fc4:	e0bffe17 	ldw	r2,-8(fp)
    5fc8:	10000e26 	beq	r2,zero,6004 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    5fcc:	e0bffd17 	ldw	r2,-12(fp)
    5fd0:	10800303 	ldbu	r2,12(r2)
    5fd4:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    5fd8:	e0bffc44 	addi	r2,fp,-15
    5fdc:	d8800215 	stw	r2,8(sp)
    5fe0:	00800044 	movi	r2,1
    5fe4:	d8800115 	stw	r2,4(sp)
    5fe8:	d8000015 	stw	zero,0(sp)
    5fec:	01c00084 	movi	r7,2
    5ff0:	000d883a 	mov	r6,zero
    5ff4:	000b883a 	mov	r5,zero
    5ff8:	e13ffe17 	ldw	r4,-8(fp)
    5ffc:	0008f140 	call	8f14 <_ZN6USBHID9SetReportEhhhhtPh>
    6000:	00000106 	br	6008 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    6004:	0005883a 	mov	r2,zero
        };
    6008:	e037883a 	mov	sp,fp
    600c:	dfc00117 	ldw	ra,4(sp)
    6010:	df000017 	ldw	fp,0(sp)
    6014:	dec00204 	addi	sp,sp,8
    6018:	f800283a 	ret

0000601c <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    601c:	defffc04 	addi	sp,sp,-16
    6020:	df000315 	stw	fp,12(sp)
    6024:	df000304 	addi	fp,sp,12
    6028:	e13ffd15 	stw	r4,-12(fp)
    602c:	2807883a 	mov	r3,r5
    6030:	3005883a 	mov	r2,r6
    6034:	e0fffe05 	stb	r3,-8(fp)
    6038:	e0bfff05 	stb	r2,-4(fp)
        };
    603c:	0001883a 	nop
    6040:	e037883a 	mov	sp,fp
    6044:	df000017 	ldw	fp,0(sp)
    6048:	dec00104 	addi	sp,sp,4
    604c:	f800283a 	ret

00006050 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6050:	defffc04 	addi	sp,sp,-16
    6054:	df000315 	stw	fp,12(sp)
    6058:	df000304 	addi	fp,sp,12
    605c:	e13ffd15 	stw	r4,-12(fp)
    6060:	2807883a 	mov	r3,r5
    6064:	3005883a 	mov	r2,r6
    6068:	e0fffe05 	stb	r3,-8(fp)
    606c:	e0bfff05 	stb	r2,-4(fp)
        };
    6070:	0001883a 	nop
    6074:	e037883a 	mov	sp,fp
    6078:	df000017 	ldw	fp,0(sp)
    607c:	dec00104 	addi	sp,sp,4
    6080:	f800283a 	ret

00006084 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6084:	defffc04 	addi	sp,sp,-16
    6088:	df000315 	stw	fp,12(sp)
    608c:	df000304 	addi	fp,sp,12
    6090:	e13ffd15 	stw	r4,-12(fp)
    6094:	2807883a 	mov	r3,r5
    6098:	3005883a 	mov	r2,r6
    609c:	e0fffe05 	stb	r3,-8(fp)
    60a0:	e0bfff05 	stb	r2,-4(fp)
        };
    60a4:	0001883a 	nop
    60a8:	e037883a 	mov	sp,fp
    60ac:	df000017 	ldw	fp,0(sp)
    60b0:	dec00104 	addi	sp,sp,4
    60b4:	f800283a 	ret

000060b8 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    60b8:	defffe04 	addi	sp,sp,-8
    60bc:	df000115 	stw	fp,4(sp)
    60c0:	df000104 	addi	fp,sp,4
    60c4:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    60c8:	008000b4 	movhi	r2,2
    60cc:	10934184 	addi	r2,r2,19718
        };
    60d0:	e037883a 	mov	sp,fp
    60d4:	df000017 	ldw	fp,0(sp)
    60d8:	dec00104 	addi	sp,sp,4
    60dc:	f800283a 	ret

000060e0 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    60e0:	defffe04 	addi	sp,sp,-8
    60e4:	df000115 	stw	fp,4(sp)
    60e8:	df000104 	addi	fp,sp,4
    60ec:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    60f0:	008000b4 	movhi	r2,2
    60f4:	10934404 	addi	r2,r2,19728
        };
    60f8:	e037883a 	mov	sp,fp
    60fc:	df000017 	ldw	fp,0(sp)
    6100:	dec00104 	addi	sp,sp,4
    6104:	f800283a 	ret

00006108 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    6108:	defffe04 	addi	sp,sp,-8
    610c:	df000115 	stw	fp,4(sp)
    6110:	df000104 	addi	fp,sp,4
    6114:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    6118:	008000b4 	movhi	r2,2
    611c:	10934704 	addi	r2,r2,19740
        };
    6120:	e037883a 	mov	sp,fp
    6124:	df000017 	ldw	fp,0(sp)
    6128:	dec00104 	addi	sp,sp,4
    612c:	f800283a 	ret

00006130 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    6130:	defffe04 	addi	sp,sp,-8
    6134:	df000115 	stw	fp,4(sp)
    6138:	df000104 	addi	fp,sp,4
    613c:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    6140:	d0a1e584 	addi	r2,gp,-30826
        };
    6144:	e037883a 	mov	sp,fp
    6148:	df000017 	ldw	fp,0(sp)
    614c:	dec00104 	addi	sp,sp,4
    6150:	f800283a 	ret

00006154 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6154:	defffc04 	addi	sp,sp,-16
    6158:	dfc00315 	stw	ra,12(sp)
    615c:	df000215 	stw	fp,8(sp)
    6160:	df000204 	addi	fp,sp,8
    6164:	2005883a 	mov	r2,r4
    6168:	e17fff15 	stw	r5,-4(fp)
    616c:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    6170:	d0e1ea17 	ldw	r3,-30808(gp)
    6174:	e0bfff17 	ldw	r2,-4(fp)
    6178:	18800416 	blt	r3,r2,618c <_Z9E_Notifycci+0x38>
        printf("%c", c);
    617c:	e0bffe07 	ldb	r2,-8(fp)
    6180:	1009883a 	mov	r4,r2
    6184:	000ddb80 	call	ddb8 <putchar>
    6188:	00000106 	br	6190 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    618c:	0001883a 	nop
        printf("%c", c);
}
    6190:	e037883a 	mov	sp,fp
    6194:	dfc00117 	ldw	ra,4(sp)
    6198:	df000017 	ldw	fp,0(sp)
    619c:	dec00204 	addi	sp,sp,8
    61a0:	f800283a 	ret

000061a4 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    61a4:	defffb04 	addi	sp,sp,-20
    61a8:	dfc00415 	stw	ra,16(sp)
    61ac:	df000315 	stw	fp,12(sp)
    61b0:	df000304 	addi	fp,sp,12
    61b4:	e13ffe15 	stw	r4,-8(fp)
    61b8:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    61bc:	d0e1ea17 	ldw	r3,-30808(gp)
    61c0:	e0bfff17 	ldw	r2,-4(fp)
    61c4:	18801016 	blt	r3,r2,6208 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    61c8:	e0bffe17 	ldw	r2,-8(fp)
    61cc:	10001026 	beq	r2,zero,6210 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    61d0:	e0bffe17 	ldw	r2,-8(fp)
    61d4:	10c00044 	addi	r3,r2,1
    61d8:	e0fffe15 	stw	r3,-8(fp)
    61dc:	10800003 	ldbu	r2,0(r2)
    61e0:	e0bffd05 	stb	r2,-12(fp)
    61e4:	e0bffd07 	ldb	r2,-12(fp)
    61e8:	1004c03a 	cmpne	r2,r2,zero
    61ec:	10803fcc 	andi	r2,r2,255
    61f0:	10000826 	beq	r2,zero,6214 <_Z8E_NotifyPKci+0x70>
    61f4:	e0bffd07 	ldb	r2,-12(fp)
    61f8:	e17fff17 	ldw	r5,-4(fp)
    61fc:	1009883a 	mov	r4,r2
    6200:	00061540 	call	6154 <_Z9E_Notifycci>
    6204:	003ff206 	br	61d0 <__alt_data_end+0xfc0061d0>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6208:	0001883a 	nop
    620c:	00000106 	br	6214 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    6210:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    6214:	e037883a 	mov	sp,fp
    6218:	dfc00117 	ldw	ra,4(sp)
    621c:	df000017 	ldw	fp,0(sp)
    6220:	dec00204 	addi	sp,sp,8
    6224:	f800283a 	ret

00006228 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    6228:	defffb04 	addi	sp,sp,-20
    622c:	dfc00415 	stw	ra,16(sp)
    6230:	df000315 	stw	fp,12(sp)
    6234:	df000304 	addi	fp,sp,12
    6238:	e13ffe15 	stw	r4,-8(fp)
    623c:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6240:	d0e1ea17 	ldw	r3,-30808(gp)
    6244:	e0bfff17 	ldw	r2,-4(fp)
    6248:	18801016 	blt	r3,r2,628c <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    624c:	e0bffe17 	ldw	r2,-8(fp)
    6250:	10001026 	beq	r2,zero,6294 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6254:	e0bffe17 	ldw	r2,-8(fp)
    6258:	10c00044 	addi	r3,r2,1
    625c:	e0fffe15 	stw	r3,-8(fp)
    6260:	10800003 	ldbu	r2,0(r2)
    6264:	e0bffd05 	stb	r2,-12(fp)
    6268:	e0bffd07 	ldb	r2,-12(fp)
    626c:	1004c03a 	cmpne	r2,r2,zero
    6270:	10803fcc 	andi	r2,r2,255
    6274:	10000826 	beq	r2,zero,6298 <_Z11E_NotifyStrPKci+0x70>
    6278:	e0bffd07 	ldb	r2,-12(fp)
    627c:	e17fff17 	ldw	r5,-4(fp)
    6280:	1009883a 	mov	r4,r2
    6284:	00061540 	call	6154 <_Z9E_Notifycci>
    6288:	003ff206 	br	6254 <__alt_data_end+0xfc006254>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    628c:	0001883a 	nop
    6290:	00000106 	br	6298 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6294:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    6298:	e037883a 	mov	sp,fp
    629c:	dfc00117 	ldw	ra,4(sp)
    62a0:	df000017 	ldw	fp,0(sp)
    62a4:	dec00204 	addi	sp,sp,8
    62a8:	f800283a 	ret

000062ac <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    62ac:	defffd04 	addi	sp,sp,-12
    62b0:	df000215 	stw	fp,8(sp)
    62b4:	df000204 	addi	fp,sp,8
    62b8:	2005883a 	mov	r2,r4
    62bc:	e17fff15 	stw	r5,-4(fp)
    62c0:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    62c4:	e037883a 	mov	sp,fp
    62c8:	df000017 	ldw	fp,0(sp)
    62cc:	dec00104 	addi	sp,sp,4
    62d0:	f800283a 	ret

000062d4 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    62d4:	defffc04 	addi	sp,sp,-16
    62d8:	df000315 	stw	fp,12(sp)
    62dc:	df000304 	addi	fp,sp,12
    62e0:	e13ffd15 	stw	r4,-12(fp)
    62e4:	e17ffe15 	stw	r5,-8(fp)
    62e8:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    62ec:	e037883a 	mov	sp,fp
    62f0:	df000017 	ldw	fp,0(sp)
    62f4:	dec00104 	addi	sp,sp,4
    62f8:	f800283a 	ret

000062fc <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    62fc:	defffc04 	addi	sp,sp,-16
    6300:	df000315 	stw	fp,12(sp)
    6304:	df000304 	addi	fp,sp,12
    6308:	e13ffd15 	stw	r4,-12(fp)
    630c:	e17ffe15 	stw	r5,-8(fp)
    6310:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    6314:	e0bffd17 	ldw	r2,-12(fp)
    6318:	10800017 	ldw	r2,0(r2)
    631c:	1000021e 	bne	r2,zero,6328 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    6320:	0005883a 	mov	r2,zero
    6324:	00003306 	br	63f4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6328:	e0bffd17 	ldw	r2,-12(fp)
    632c:	10800103 	ldbu	r2,4(r2)
    6330:	10803fcc 	andi	r2,r2,255
    6334:	10002426 	beq	r2,zero,63c8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    6338:	e0bfff17 	ldw	r2,-4(fp)
    633c:	1080000b 	ldhu	r2,0(r2)
    6340:	10bfffcc 	andi	r2,r2,65535
    6344:	10002026 	beq	r2,zero,63c8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    6348:	e0bffd17 	ldw	r2,-12(fp)
    634c:	10800017 	ldw	r2,0(r2)
    6350:	e0fffd17 	ldw	r3,-12(fp)
    6354:	18c00143 	ldbu	r3,5(r3)
    6358:	19003fcc 	andi	r4,r3,255
    635c:	e0fffd17 	ldw	r3,-12(fp)
    6360:	18c00103 	ldbu	r3,4(r3)
    6364:	18c03fcc 	andi	r3,r3,255
    6368:	20c7c83a 	sub	r3,r4,r3
    636c:	10c5883a 	add	r2,r2,r3
    6370:	e0fffe17 	ldw	r3,-8(fp)
    6374:	18c00017 	ldw	r3,0(r3)
    6378:	18c00003 	ldbu	r3,0(r3)
    637c:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6380:	e0bffd17 	ldw	r2,-12(fp)
    6384:	10800103 	ldbu	r2,4(r2)
    6388:	10bfffc4 	addi	r2,r2,-1
    638c:	1007883a 	mov	r3,r2
    6390:	e0bffd17 	ldw	r2,-12(fp)
    6394:	10c00105 	stb	r3,4(r2)
    6398:	e0bfff17 	ldw	r2,-4(fp)
    639c:	1080000b 	ldhu	r2,0(r2)
    63a0:	10bfffc4 	addi	r2,r2,-1
    63a4:	1007883a 	mov	r3,r2
    63a8:	e0bfff17 	ldw	r2,-4(fp)
    63ac:	10c0000d 	sth	r3,0(r2)
    63b0:	e0bffe17 	ldw	r2,-8(fp)
    63b4:	10800017 	ldw	r2,0(r2)
    63b8:	10c00044 	addi	r3,r2,1
    63bc:	e0bffe17 	ldw	r2,-8(fp)
    63c0:	10c00015 	stw	r3,0(r2)
    63c4:	003fd806 	br	6328 <__alt_data_end+0xfc006328>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    63c8:	e0bffd17 	ldw	r2,-12(fp)
    63cc:	10800103 	ldbu	r2,4(r2)
    63d0:	10803fcc 	andi	r2,r2,255
    63d4:	10000226 	beq	r2,zero,63e0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    63d8:	0005883a 	mov	r2,zero
    63dc:	00000506 	br	63f4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    63e0:	e0bffd17 	ldw	r2,-12(fp)
    63e4:	10c00143 	ldbu	r3,5(r2)
    63e8:	e0bffd17 	ldw	r2,-12(fp)
    63ec:	10c00105 	stb	r3,4(r2)
        return true;
    63f0:	00800044 	movi	r2,1
}
    63f4:	e037883a 	mov	sp,fp
    63f8:	df000017 	ldw	fp,0(sp)
    63fc:	dec00104 	addi	sp,sp,4
    6400:	f800283a 	ret

00006404 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    6404:	defffa04 	addi	sp,sp,-24
    6408:	dfc00515 	stw	ra,20(sp)
    640c:	df000415 	stw	fp,16(sp)
    6410:	df000404 	addi	fp,sp,16
    6414:	e13ffc15 	stw	r4,-16(fp)
    6418:	e17ffd15 	stw	r5,-12(fp)
    641c:	e1bffe15 	stw	r6,-8(fp)
    6420:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	10800003 	ldbu	r2,0(r2)
    642c:	10803fcc 	andi	r2,r2,255
    6430:	10c00060 	cmpeqi	r3,r2,1
    6434:	1800181e 	bne	r3,zero,6498 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    6438:	10c00088 	cmpgei	r3,r2,2
    643c:	1800021e 	bne	r3,zero,6448 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    6440:	10000626 	beq	r2,zero,645c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    6444:	00007e06 	br	6640 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    6448:	10c000a0 	cmpeqi	r3,r2,2
    644c:	18004a1e 	bne	r3,zero,6578 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    6450:	108000e0 	cmpeqi	r2,r2,3
    6454:	1000571e 	bne	r2,zero,65b4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    6458:	00007906 	br	6640 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    645c:	e0bffc17 	ldw	r2,-16(fp)
    6460:	10800417 	ldw	r2,16(r2)
    6464:	e0fffc17 	ldw	r3,-16(fp)
    6468:	18c00303 	ldbu	r3,12(r3)
    646c:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6470:	e0bffc17 	ldw	r2,-16(fp)
    6474:	10c00504 	addi	r3,r2,20
    6478:	e0bffc17 	ldw	r2,-16(fp)
    647c:	10800417 	ldw	r2,16(r2)
    6480:	100b883a 	mov	r5,r2
    6484:	1809883a 	mov	r4,r3
    6488:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    648c:	e0bffc17 	ldw	r2,-16(fp)
    6490:	00c00044 	movi	r3,1
    6494:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    6498:	e0bffc17 	ldw	r2,-16(fp)
    649c:	10800504 	addi	r2,r2,20
    64a0:	e1bffe17 	ldw	r6,-8(fp)
    64a4:	e17ffd17 	ldw	r5,-12(fp)
    64a8:	1009883a 	mov	r4,r2
    64ac:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    64b0:	1080005c 	xori	r2,r2,1
    64b4:	10803fcc 	andi	r2,r2,255
    64b8:	10000226 	beq	r2,zero,64c4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    64bc:	0005883a 	mov	r2,zero
    64c0:	00006006 	br	6644 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    64c4:	e0bffc17 	ldw	r2,-16(fp)
    64c8:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    64cc:	e0bffc17 	ldw	r2,-16(fp)
    64d0:	10800417 	ldw	r2,16(r2)
    64d4:	10800003 	ldbu	r2,0(r2)
    64d8:	10803fcc 	andi	r2,r2,255
    64dc:	10800130 	cmpltui	r2,r2,4
    64e0:	10000e1e 	bne	r2,zero,651c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    64e4:	e0bffc17 	ldw	r2,-16(fp)
    64e8:	10800417 	ldw	r2,16(r2)
    64ec:	10c00043 	ldbu	r3,1(r2)
    64f0:	11000083 	ldbu	r4,2(r2)
    64f4:	2008923a 	slli	r4,r4,8
    64f8:	20c6b03a 	or	r3,r4,r3
    64fc:	110000c3 	ldbu	r4,3(r2)
    6500:	2008943a 	slli	r4,r4,16
    6504:	20c6b03a 	or	r3,r4,r3
    6508:	10800103 	ldbu	r2,4(r2)
    650c:	1004963a 	slli	r2,r2,24
    6510:	10c4b03a 	or	r2,r2,r3
    6514:	10800017 	ldw	r2,0(r2)
    6518:	00000e06 	br	6554 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    651c:	e0bffc17 	ldw	r2,-16(fp)
    6520:	10800417 	ldw	r2,16(r2)
    6524:	10c00043 	ldbu	r3,1(r2)
    6528:	11000083 	ldbu	r4,2(r2)
    652c:	2008923a 	slli	r4,r4,8
    6530:	20c6b03a 	or	r3,r4,r3
    6534:	110000c3 	ldbu	r4,3(r2)
    6538:	2008943a 	slli	r4,r4,16
    653c:	20c6b03a 	or	r3,r4,r3
    6540:	10800103 	ldbu	r2,4(r2)
    6544:	1004963a 	slli	r2,r2,24
    6548:	10c4b03a 	or	r2,r2,r3
    654c:	1080000b 	ldhu	r2,0(r2)
    6550:	10bfffcc 	andi	r2,r2,65535
    6554:	e0fffc17 	ldw	r3,-16(fp)
    6558:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    655c:	e0bffc17 	ldw	r2,-16(fp)
    6560:	10c00117 	ldw	r3,4(r2)
    6564:	e0bffc17 	ldw	r2,-16(fp)
    6568:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    656c:	e0bffc17 	ldw	r2,-16(fp)
    6570:	00c00084 	movi	r3,2
    6574:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    6578:	e0bffc17 	ldw	r2,-16(fp)
    657c:	10800417 	ldw	r2,16(r2)
    6580:	e0fffc17 	ldw	r3,-16(fp)
    6584:	18c00343 	ldbu	r3,13(r3)
    6588:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    658c:	e0bffc17 	ldw	r2,-16(fp)
    6590:	10c00504 	addi	r3,r2,20
    6594:	e0bffc17 	ldw	r2,-16(fp)
    6598:	10800417 	ldw	r2,16(r2)
    659c:	100b883a 	mov	r5,r2
    65a0:	1809883a 	mov	r4,r3
    65a4:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    65a8:	e0bffc17 	ldw	r2,-16(fp)
    65ac:	00c000c4 	movi	r3,3
    65b0:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    65b4:	e0bffc17 	ldw	r2,-16(fp)
    65b8:	10800217 	ldw	r2,8(r2)
    65bc:	10001e26 	beq	r2,zero,6638 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    65c0:	e0bffc17 	ldw	r2,-16(fp)
    65c4:	10800504 	addi	r2,r2,20
    65c8:	e1bffe17 	ldw	r6,-8(fp)
    65cc:	e17ffd17 	ldw	r5,-12(fp)
    65d0:	1009883a 	mov	r4,r2
    65d4:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    65d8:	1080005c 	xori	r2,r2,1
    65dc:	10803fcc 	andi	r2,r2,255
    65e0:	10000226 	beq	r2,zero,65ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    65e4:	0005883a 	mov	r2,zero
    65e8:	00001606 	br	6644 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    65ec:	e0bfff17 	ldw	r2,-4(fp)
    65f0:	10000b26 	beq	r2,zero,6620 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    65f4:	e0bffc17 	ldw	r2,-16(fp)
    65f8:	11000417 	ldw	r4,16(r2)
    65fc:	e0bffc17 	ldw	r2,-16(fp)
    6600:	10c00117 	ldw	r3,4(r2)
    6604:	e0bffc17 	ldw	r2,-16(fp)
    6608:	10800217 	ldw	r2,8(r2)
    660c:	1887c83a 	sub	r3,r3,r2
    6610:	e0bfff17 	ldw	r2,-4(fp)
    6614:	e1800217 	ldw	r6,8(fp)
    6618:	180b883a 	mov	r5,r3
    661c:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6620:	e0bffc17 	ldw	r2,-16(fp)
    6624:	10800217 	ldw	r2,8(r2)
    6628:	10ffffc4 	addi	r3,r2,-1
    662c:	e0bffc17 	ldw	r2,-16(fp)
    6630:	10c00215 	stw	r3,8(r2)
    6634:	003fdf06 	br	65b4 <__alt_data_end+0xfc0065b4>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    6638:	e0bffc17 	ldw	r2,-16(fp)
    663c:	10000005 	stb	zero,0(r2)
        }
        return true;
    6640:	00800044 	movi	r2,1
}
    6644:	e037883a 	mov	sp,fp
    6648:	dfc00117 	ldw	ra,4(sp)
    664c:	df000017 	ldw	fp,0(sp)
    6650:	dec00204 	addi	sp,sp,8
    6654:	f800283a 	ret

00006658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6658:	defff904 	addi	sp,sp,-28
    665c:	dfc00615 	stw	ra,24(sp)
    6660:	df000515 	stw	fp,20(sp)
    6664:	df000504 	addi	fp,sp,20
    6668:	e13ffd15 	stw	r4,-12(fp)
    666c:	2807883a 	mov	r3,r5
    6670:	3005883a 	mov	r2,r6
    6674:	e0fffe05 	stb	r3,-8(fp)
    6678:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    667c:	e0bfff0b 	ldhu	r2,-4(fp)
    6680:	1005d23a 	srai	r2,r2,8
    6684:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6688:	e0bfff0b 	ldhu	r2,-4(fp)
    668c:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6690:	e03ffb8d 	sth	zero,-18(fp)
    6694:	e03ffc0d 	sth	zero,-16(fp)
    6698:	e0bffe03 	ldbu	r2,-8(fp)
    669c:	e0bffbc5 	stb	r2,-17(fp)
    66a0:	e0bffb03 	ldbu	r2,-20(fp)
    66a4:	e0bffc05 	stb	r2,-16(fp)
    66a8:	e0bffb43 	ldbu	r2,-19(fp)
    66ac:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    66b0:	e0bffb84 	addi	r2,fp,-18
    66b4:	000f883a 	mov	r7,zero
    66b8:	01800104 	movi	r6,4
    66bc:	100b883a 	mov	r5,r2
    66c0:	e13ffd17 	ldw	r4,-12(fp)
    66c4:	001f7dc0 	call	1f7dc <alt_avalon_i2c_master_tx>
    66c8:	1004c03a 	cmpne	r2,r2,zero
    66cc:	10803fcc 	andi	r2,r2,255
    66d0:	10000426 	beq	r2,zero,66e4 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    66d4:	010000b4 	movhi	r4,2
    66d8:	21137504 	addi	r4,r4,19924
    66dc:	000dd740 	call	dd74 <printf>
	}
	return;
    66e0:	0001883a 	nop
    66e4:	0001883a 	nop
}
    66e8:	e037883a 	mov	sp,fp
    66ec:	dfc00117 	ldw	ra,4(sp)
    66f0:	df000017 	ldw	fp,0(sp)
    66f4:	dec00204 	addi	sp,sp,8
    66f8:	f800283a 	ret

000066fc <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    66fc:	defff604 	addi	sp,sp,-40
    6700:	dfc00915 	stw	ra,36(sp)
    6704:	df000815 	stw	fp,32(sp)
    6708:	dc000715 	stw	r16,28(sp)
    670c:	df000804 	addi	fp,sp,32
    6710:	e13ffb15 	stw	r4,-20(fp)
    6714:	3009883a 	mov	r4,r6
    6718:	e1fffe15 	stw	r7,-8(fp)
    671c:	e17ffc05 	stb	r5,-16(fp)
    6720:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6724:	d809883a 	mov	r4,sp
    6728:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    672c:	e13ffd03 	ldbu	r4,-12(fp)
    6730:	21000044 	addi	r4,r4,1
    6734:	2109883a 	add	r4,r4,r4
    6738:	213fffc4 	addi	r4,r4,-1
    673c:	e13ff915 	stw	r4,-28(fp)
    6740:	200b883a 	mov	r5,r4
    6744:	29400044 	addi	r5,r5,1
    6748:	2819883a 	mov	r12,r5
    674c:	001b883a 	mov	r13,zero
    6750:	600ad77a 	srli	r5,r12,29
    6754:	681290fa 	slli	r9,r13,3
    6758:	2a52b03a 	or	r9,r5,r9
    675c:	601090fa 	slli	r8,r12,3
    6760:	200b883a 	mov	r5,r4
    6764:	29400044 	addi	r5,r5,1
    6768:	2815883a 	mov	r10,r5
    676c:	0017883a 	mov	r11,zero
    6770:	500ad77a 	srli	r5,r10,29
    6774:	580690fa 	slli	r3,r11,3
    6778:	28c6b03a 	or	r3,r5,r3
    677c:	500490fa 	slli	r2,r10,3
    6780:	2005883a 	mov	r2,r4
    6784:	10800044 	addi	r2,r2,1
    6788:	108000c4 	addi	r2,r2,3
    678c:	1004d0ba 	srli	r2,r2,2
    6790:	1085883a 	add	r2,r2,r2
    6794:	1085883a 	add	r2,r2,r2
    6798:	d8b7c83a 	sub	sp,sp,r2
    679c:	d805883a 	mov	r2,sp
    67a0:	1005883a 	mov	r2,r2
    67a4:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    67a8:	e0bffa17 	ldw	r2,-24(fp)
    67ac:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    67b0:	e0bffa17 	ldw	r2,-24(fp)
    67b4:	e0fffc03 	ldbu	r3,-16(fp)
    67b8:	10c00045 	stb	r3,1(r2)
	int i = 0;
    67bc:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    67c0:	e03ff815 	stw	zero,-32(fp)
    67c4:	e0bffd03 	ldbu	r2,-12(fp)
    67c8:	e0fff817 	ldw	r3,-32(fp)
    67cc:	18801e0e 	bge	r3,r2,6848 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    67d0:	e0bff817 	ldw	r2,-32(fp)
    67d4:	10c00084 	addi	r3,r2,2
    67d8:	e0bff817 	ldw	r2,-32(fp)
    67dc:	1085883a 	add	r2,r2,r2
    67e0:	1009883a 	mov	r4,r2
    67e4:	e0bffe17 	ldw	r2,-8(fp)
    67e8:	1105883a 	add	r2,r2,r4
    67ec:	1080000b 	ldhu	r2,0(r2)
    67f0:	10bfffcc 	andi	r2,r2,65535
    67f4:	1005d23a 	srai	r2,r2,8
    67f8:	1009883a 	mov	r4,r2
    67fc:	e0bffa17 	ldw	r2,-24(fp)
    6800:	10c5883a 	add	r2,r2,r3
    6804:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6808:	e0bff817 	ldw	r2,-32(fp)
    680c:	10c000c4 	addi	r3,r2,3
    6810:	e0bff817 	ldw	r2,-32(fp)
    6814:	1085883a 	add	r2,r2,r2
    6818:	1009883a 	mov	r4,r2
    681c:	e0bffe17 	ldw	r2,-8(fp)
    6820:	1105883a 	add	r2,r2,r4
    6824:	1080000b 	ldhu	r2,0(r2)
    6828:	1009883a 	mov	r4,r2
    682c:	e0bffa17 	ldw	r2,-24(fp)
    6830:	10c5883a 	add	r2,r2,r3
    6834:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    6838:	e0bff817 	ldw	r2,-32(fp)
    683c:	10800044 	addi	r2,r2,1
    6840:	e0bff815 	stw	r2,-32(fp)
    6844:	003fdf06 	br	67c4 <__alt_data_end+0xfc0067c4>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6848:	e0fffa17 	ldw	r3,-24(fp)
    684c:	e0bffd03 	ldbu	r2,-12(fp)
    6850:	10800044 	addi	r2,r2,1
    6854:	1085883a 	add	r2,r2,r2
    6858:	000f883a 	mov	r7,zero
    685c:	100d883a 	mov	r6,r2
    6860:	180b883a 	mov	r5,r3
    6864:	e13ffb17 	ldw	r4,-20(fp)
    6868:	001f7dc0 	call	1f7dc <alt_avalon_i2c_master_tx>
    686c:	1004c03a 	cmpne	r2,r2,zero
    6870:	10803fcc 	andi	r2,r2,255
    6874:	10000326 	beq	r2,zero,6884 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6878:	010000b4 	movhi	r4,2
    687c:	21137c04 	addi	r4,r4,19952
    6880:	000dd740 	call	dd74 <printf>
	}
	return (data+nwords);
    6884:	e0bffd03 	ldbu	r2,-12(fp)
    6888:	1085883a 	add	r2,r2,r2
    688c:	1007883a 	mov	r3,r2
    6890:	e0bffe17 	ldw	r2,-8(fp)
    6894:	10c5883a 	add	r2,r2,r3
    6898:	8037883a 	mov	sp,r16
}
    689c:	e6ffff04 	addi	sp,fp,-4
    68a0:	dfc00217 	ldw	ra,8(sp)
    68a4:	df000117 	ldw	fp,4(sp)
    68a8:	dc000017 	ldw	r16,0(sp)
    68ac:	dec00304 	addi	sp,sp,12
    68b0:	f800283a 	ret

000068b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    68b4:	defff804 	addi	sp,sp,-32
    68b8:	dfc00715 	stw	ra,28(sp)
    68bc:	df000615 	stw	fp,24(sp)
    68c0:	df000604 	addi	fp,sp,24
    68c4:	e13ffe15 	stw	r4,-8(fp)
    68c8:	2805883a 	mov	r2,r5
    68cc:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    68d0:	e03ffc8d 	sth	zero,-14(fp)
    68d4:	e0bfff03 	ldbu	r2,-4(fp)
    68d8:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    68dc:	e03ffd05 	stb	zero,-12(fp)
    68e0:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    68e4:	e13ffd04 	addi	r4,fp,-12
    68e8:	e0fffc84 	addi	r3,fp,-14
    68ec:	d8000115 	stw	zero,4(sp)
    68f0:	00800084 	movi	r2,2
    68f4:	d8800015 	stw	r2,0(sp)
    68f8:	200f883a 	mov	r7,r4
    68fc:	01800084 	movi	r6,2
    6900:	180b883a 	mov	r5,r3
    6904:	e13ffe17 	ldw	r4,-8(fp)
    6908:	001fa000 	call	1fa00 <alt_avalon_i2c_master_tx_rx>
    690c:	1004c03a 	cmpne	r2,r2,zero
    6910:	10803fcc 	andi	r2,r2,255
    6914:	10000326 	beq	r2,zero,6924 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6918:	010000b4 	movhi	r4,2
    691c:	21138204 	addi	r4,r4,19976
    6920:	000dd740 	call	dd74 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6924:	e0bffd03 	ldbu	r2,-12(fp)
    6928:	10803fcc 	andi	r2,r2,255
    692c:	1004923a 	slli	r2,r2,8
    6930:	1007883a 	mov	r3,r2
    6934:	e0bffd43 	ldbu	r2,-11(fp)
    6938:	10803fcc 	andi	r2,r2,255
    693c:	1884b03a 	or	r2,r3,r2
    6940:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6944:	e0bffc0b 	ldhu	r2,-16(fp)
}
    6948:	e037883a 	mov	sp,fp
    694c:	dfc00117 	ldw	ra,4(sp)
    6950:	df000017 	ldw	fp,0(sp)
    6954:	dec00204 	addi	sp,sp,8
    6958:	f800283a 	ret

0000695c <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    695c:	defff304 	addi	sp,sp,-52
    6960:	dfc00c15 	stw	ra,48(sp)
    6964:	df000b15 	stw	fp,44(sp)
    6968:	dc000a15 	stw	r16,40(sp)
    696c:	df000b04 	addi	fp,sp,44
    6970:	e13ffb15 	stw	r4,-20(fp)
    6974:	3009883a 	mov	r4,r6
    6978:	e1fffe15 	stw	r7,-8(fp)
    697c:	e17ffc05 	stb	r5,-16(fp)
    6980:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6984:	d809883a 	mov	r4,sp
    6988:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    698c:	e03ffa0d 	sth	zero,-24(fp)
    6990:	e13ffc03 	ldbu	r4,-16(fp)
    6994:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6998:	e13ffd03 	ldbu	r4,-12(fp)
    699c:	2109883a 	add	r4,r4,r4
    69a0:	213fffc4 	addi	r4,r4,-1
    69a4:	e13ff815 	stw	r4,-32(fp)
    69a8:	200b883a 	mov	r5,r4
    69ac:	29400044 	addi	r5,r5,1
    69b0:	2819883a 	mov	r12,r5
    69b4:	001b883a 	mov	r13,zero
    69b8:	600ad77a 	srli	r5,r12,29
    69bc:	681290fa 	slli	r9,r13,3
    69c0:	2a52b03a 	or	r9,r5,r9
    69c4:	601090fa 	slli	r8,r12,3
    69c8:	200b883a 	mov	r5,r4
    69cc:	29400044 	addi	r5,r5,1
    69d0:	2815883a 	mov	r10,r5
    69d4:	0017883a 	mov	r11,zero
    69d8:	500ad77a 	srli	r5,r10,29
    69dc:	580690fa 	slli	r3,r11,3
    69e0:	28c6b03a 	or	r3,r5,r3
    69e4:	500490fa 	slli	r2,r10,3
    69e8:	2005883a 	mov	r2,r4
    69ec:	10800044 	addi	r2,r2,1
    69f0:	108000c4 	addi	r2,r2,3
    69f4:	1004d0ba 	srli	r2,r2,2
    69f8:	1085883a 	add	r2,r2,r2
    69fc:	1085883a 	add	r2,r2,r2
    6a00:	d8b7c83a 	sub	sp,sp,r2
    6a04:	d8800204 	addi	r2,sp,8
    6a08:	1005883a 	mov	r2,r2
    6a0c:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6a10:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6a14:	e0fff917 	ldw	r3,-28(fp)
    6a18:	e0bffd03 	ldbu	r2,-12(fp)
    6a1c:	1085883a 	add	r2,r2,r2
    6a20:	1009883a 	mov	r4,r2
    6a24:	e0bffa04 	addi	r2,fp,-24
    6a28:	d8000115 	stw	zero,4(sp)
    6a2c:	d9000015 	stw	r4,0(sp)
    6a30:	180f883a 	mov	r7,r3
    6a34:	01800084 	movi	r6,2
    6a38:	100b883a 	mov	r5,r2
    6a3c:	e13ffb17 	ldw	r4,-20(fp)
    6a40:	001fa000 	call	1fa00 <alt_avalon_i2c_master_tx_rx>
    6a44:	1004c03a 	cmpne	r2,r2,zero
    6a48:	10803fcc 	andi	r2,r2,255
    6a4c:	10000326 	beq	r2,zero,6a5c <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6a50:	010000b4 	movhi	r4,2
    6a54:	21138804 	addi	r4,r4,20000
    6a58:	000dd740 	call	dd74 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6a5c:	e03ff715 	stw	zero,-36(fp)
    6a60:	e0bffd03 	ldbu	r2,-12(fp)
    6a64:	e0fff717 	ldw	r3,-36(fp)
    6a68:	18801b0e 	bge	r3,r2,6ad8 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6a6c:	e0bff717 	ldw	r2,-36(fp)
    6a70:	1085883a 	add	r2,r2,r2
    6a74:	1007883a 	mov	r3,r2
    6a78:	e0bffe17 	ldw	r2,-8(fp)
    6a7c:	10c7883a 	add	r3,r2,r3
    6a80:	e0bff717 	ldw	r2,-36(fp)
    6a84:	1085883a 	add	r2,r2,r2
    6a88:	1009883a 	mov	r4,r2
    6a8c:	e0bff917 	ldw	r2,-28(fp)
    6a90:	1105883a 	add	r2,r2,r4
    6a94:	10800003 	ldbu	r2,0(r2)
    6a98:	10803fcc 	andi	r2,r2,255
    6a9c:	1004923a 	slli	r2,r2,8
    6aa0:	100b883a 	mov	r5,r2
    6aa4:	e0bff717 	ldw	r2,-36(fp)
    6aa8:	1085883a 	add	r2,r2,r2
    6aac:	10800044 	addi	r2,r2,1
    6ab0:	e13ff917 	ldw	r4,-28(fp)
    6ab4:	2085883a 	add	r2,r4,r2
    6ab8:	10800003 	ldbu	r2,0(r2)
    6abc:	10803fcc 	andi	r2,r2,255
    6ac0:	2884b03a 	or	r2,r5,r2
    6ac4:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6ac8:	e0bff717 	ldw	r2,-36(fp)
    6acc:	10800044 	addi	r2,r2,1
    6ad0:	e0bff715 	stw	r2,-36(fp)
    6ad4:	003fe206 	br	6a60 <__alt_data_end+0xfc006a60>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6ad8:	e0bffd03 	ldbu	r2,-12(fp)
    6adc:	1085883a 	add	r2,r2,r2
    6ae0:	1007883a 	mov	r3,r2
    6ae4:	e0bffe17 	ldw	r2,-8(fp)
    6ae8:	10c5883a 	add	r2,r2,r3
    6aec:	8037883a 	mov	sp,r16
}
    6af0:	e6ffff04 	addi	sp,fp,-4
    6af4:	dfc00217 	ldw	ra,8(sp)
    6af8:	df000117 	ldw	fp,4(sp)
    6afc:	dc000017 	ldw	r16,0(sp)
    6b00:	dec00304 	addi	sp,sp,12
    6b04:	f800283a 	ret

00006b08 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6b08:	defffd04 	addi	sp,sp,-12
    6b0c:	dfc00215 	stw	ra,8(sp)
    6b10:	df000115 	stw	fp,4(sp)
    6b14:	df000104 	addi	fp,sp,4
    6b18:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6b1c:	01400284 	movi	r5,10
    6b20:	e13fff17 	ldw	r4,-4(fp)
    6b24:	001f5d40 	call	1f5d4 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6b28:	01902f04 	movi	r6,16572
    6b2c:	01400c04 	movi	r5,48
    6b30:	e13fff17 	ldw	r4,-4(fp)
    6b34:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6b38:	01801384 	movi	r6,78
    6b3c:	01400a04 	movi	r5,40
    6b40:	e13fff17 	ldw	r4,-4(fp)
    6b44:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6b48:	01800844 	movi	r6,33
    6b4c:	01400084 	movi	r5,2
    6b50:	e13fff17 	ldw	r4,-4(fp)
    6b54:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6b58:	01800104 	movi	r6,4
    6b5c:	01400104 	movi	r5,4
    6b60:	e13fff17 	ldw	r4,-4(fp)
    6b64:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_24);
    6b68:	01800404 	movi	r6,16
    6b6c:	01400184 	movi	r5,6
    6b70:	e13fff17 	ldw	r4,-4(fp)
    6b74:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6b78:	01800404 	movi	r6,16
    6b7c:	01400284 	movi	r5,10
    6b80:	e13fff17 	ldw	r4,-4(fp)
    6b84:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6b88:	0001883a 	nop
    6b8c:	e037883a 	mov	sp,fp
    6b90:	dfc00117 	ldw	ra,4(sp)
    6b94:	df000017 	ldw	fp,0(sp)
    6b98:	dec00204 	addi	sp,sp,8
    6b9c:	f800283a 	ret

00006ba0 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6ba0:	defffd04 	addi	sp,sp,-12
    6ba4:	dfc00215 	stw	ra,8(sp)
    6ba8:	df000115 	stw	fp,4(sp)
    6bac:	df000104 	addi	fp,sp,4
    6bb0:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6bb4:	01901004 	movi	r6,16448
    6bb8:	01400884 	movi	r5,34
    6bbc:	e13fff17 	ldw	r4,-4(fp)
    6bc0:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6bc4:	019c1c04 	movi	r6,28784
    6bc8:	01400404 	movi	r5,16
    6bcc:	e13fff17 	ldw	r4,-4(fp)
    6bd0:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6bd4:	01808004 	movi	r6,512
    6bd8:	01400384 	movi	r5,14
    6bdc:	e13fff17 	ldw	r4,-4(fp)
    6be0:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6be4:	01804044 	movi	r6,257
    6be8:	01400904 	movi	r5,36
    6bec:	e13fff17 	ldw	r4,-4(fp)
    6bf0:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6bf4:	0001883a 	nop
    6bf8:	e037883a 	mov	sp,fp
    6bfc:	dfc00117 	ldw	ra,4(sp)
    6c00:	df000017 	ldw	fp,0(sp)
    6c04:	dec00204 	addi	sp,sp,8
    6c08:	f800283a 	ret

00006c0c <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6c0c:	defffd04 	addi	sp,sp,-12
    6c10:	dfc00215 	stw	ra,8(sp)
    6c14:	df000115 	stw	fp,4(sp)
    6c18:	df000104 	addi	fp,sp,4
    6c1c:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6c20:	000b883a 	mov	r5,zero
    6c24:	e13fff17 	ldw	r4,-4(fp)
    6c28:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c2c:	10bfffcc 	andi	r2,r2,65535
    6c30:	100b883a 	mov	r5,r2
    6c34:	010000b4 	movhi	r4,2
    6c38:	21138e04 	addi	r4,r4,20024
    6c3c:	000dd740 	call	dd74 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    6c40:	01400084 	movi	r5,2
    6c44:	e13fff17 	ldw	r4,-4(fp)
    6c48:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c4c:	10bfffcc 	andi	r2,r2,65535
    6c50:	100b883a 	mov	r5,r2
    6c54:	010000b4 	movhi	r4,2
    6c58:	21139104 	addi	r4,r4,20036
    6c5c:	000dd740 	call	dd74 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    6c60:	01400104 	movi	r5,4
    6c64:	e13fff17 	ldw	r4,-4(fp)
    6c68:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c6c:	10bfffcc 	andi	r2,r2,65535
    6c70:	100b883a 	mov	r5,r2
    6c74:	010000b4 	movhi	r4,2
    6c78:	21139604 	addi	r4,r4,20056
    6c7c:	000dd740 	call	dd74 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    6c80:	01400184 	movi	r5,6
    6c84:	e13fff17 	ldw	r4,-4(fp)
    6c88:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c8c:	10bfffcc 	andi	r2,r2,65535
    6c90:	100b883a 	mov	r5,r2
    6c94:	010000b4 	movhi	r4,2
    6c98:	21139b04 	addi	r4,r4,20076
    6c9c:	000dd740 	call	dd74 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    6ca0:	01400284 	movi	r5,10
    6ca4:	e13fff17 	ldw	r4,-4(fp)
    6ca8:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cac:	10bfffcc 	andi	r2,r2,65535
    6cb0:	100b883a 	mov	r5,r2
    6cb4:	010000b4 	movhi	r4,2
    6cb8:	2113a004 	addi	r4,r4,20096
    6cbc:	000dd740 	call	dd74 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    6cc0:	01400c04 	movi	r5,48
    6cc4:	e13fff17 	ldw	r4,-4(fp)
    6cc8:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6ccc:	10bfffcc 	andi	r2,r2,65535
    6cd0:	100b883a 	mov	r5,r2
    6cd4:	010000b4 	movhi	r4,2
    6cd8:	2113a504 	addi	r4,r4,20116
    6cdc:	000dd740 	call	dd74 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    6ce0:	01400384 	movi	r5,14
    6ce4:	e13fff17 	ldw	r4,-4(fp)
    6ce8:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cec:	10bfffcc 	andi	r2,r2,65535
    6cf0:	100b883a 	mov	r5,r2
    6cf4:	010000b4 	movhi	r4,2
    6cf8:	2113aa04 	addi	r4,r4,20136
    6cfc:	000dd740 	call	dd74 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    6d00:	01400904 	movi	r5,36
    6d04:	e13fff17 	ldw	r4,-4(fp)
    6d08:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d0c:	10bfffcc 	andi	r2,r2,65535
    6d10:	100b883a 	mov	r5,r2
    6d14:	010000b4 	movhi	r4,2
    6d18:	2113af04 	addi	r4,r4,20156
    6d1c:	000dd740 	call	dd74 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    6d20:	01400e04 	movi	r5,56
    6d24:	e13fff17 	ldw	r4,-4(fp)
    6d28:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d2c:	10bfffcc 	andi	r2,r2,65535
    6d30:	100b883a 	mov	r5,r2
    6d34:	010000b4 	movhi	r4,2
    6d38:	2113b404 	addi	r4,r4,20176
    6d3c:	000dd740 	call	dd74 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    6d40:	01400804 	movi	r5,32
    6d44:	e13fff17 	ldw	r4,-4(fp)
    6d48:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d4c:	10bfffcc 	andi	r2,r2,65535
    6d50:	100b883a 	mov	r5,r2
    6d54:	010000b4 	movhi	r4,2
    6d58:	2113b904 	addi	r4,r4,20196
    6d5c:	000dd740 	call	dd74 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    6d60:	01400404 	movi	r5,16
    6d64:	e13fff17 	ldw	r4,-4(fp)
    6d68:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d6c:	10bfffcc 	andi	r2,r2,65535
    6d70:	100b883a 	mov	r5,r2
    6d74:	010000b4 	movhi	r4,2
    6d78:	2113be04 	addi	r4,r4,20216
    6d7c:	000dd740 	call	dd74 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    6d80:	01400884 	movi	r5,34
    6d84:	e13fff17 	ldw	r4,-4(fp)
    6d88:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d8c:	10bfffcc 	andi	r2,r2,65535
    6d90:	100b883a 	mov	r5,r2
    6d94:	010000b4 	movhi	r4,2
    6d98:	2113c304 	addi	r4,r4,20236
    6d9c:	000dd740 	call	dd74 <printf>
}
    6da0:	0001883a 	nop
    6da4:	e037883a 	mov	sp,fp
    6da8:	dfc00117 	ldw	ra,4(sp)
    6dac:	df000017 	ldw	fp,0(sp)
    6db0:	dec00204 	addi	sp,sp,8
    6db4:	f800283a 	ret

00006db8 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000vol_up(ALT_AVALON_I2C_DEV_t* dev) {
    6db8:	defffc04 	addi	sp,sp,-16
    6dbc:	dfc00315 	stw	ra,12(sp)
    6dc0:	df000215 	stw	fp,8(sp)
    6dc4:	df000204 	addi	fp,sp,8
    6dc8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6dcc:	01400404 	movi	r5,16
    6dd0:	e13fff17 	ldw	r4,-4(fp)
    6dd4:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6dd8:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6ddc:	e03ffe0d 	sth	zero,-8(fp)
	printf("Current:	%X\n", current_vol);
    6de0:	e0bffe8b 	ldhu	r2,-6(fp)
    6de4:	100b883a 	mov	r5,r2
    6de8:	010000b4 	movhi	r4,2
    6dec:	2113c804 	addi	r4,r4,20256
    6df0:	000dd740 	call	dd74 <printf>
	printf("Sum:		%X\n", (current_vol >> 8) + DAC_VOL_STEP);
    6df4:	e0bffe8b 	ldhu	r2,-6(fp)
    6df8:	1005d23a 	srai	r2,r2,8
    6dfc:	10800084 	addi	r2,r2,2
    6e00:	100b883a 	mov	r5,r2
    6e04:	010000b4 	movhi	r4,2
    6e08:	2113cc04 	addi	r4,r4,20272
    6e0c:	000dd740 	call	dd74 <printf>
	printf("Max:		%X\n", DAC_MAX_VOL);
    6e10:	01400f04 	movi	r5,60
    6e14:	010000b4 	movhi	r4,2
    6e18:	2113cf04 	addi	r4,r4,20284
    6e1c:	000dd740 	call	dd74 <printf>
	if (DAC_MAX_VOL >= ((current_vol >> 8) - DAC_VOL_STEP)) new_vol = (DAC_MAX_VOL << 8) | DAC_MAX_VOL;
    6e20:	e0bffe8b 	ldhu	r2,-6(fp)
    6e24:	1005d23a 	srai	r2,r2,8
    6e28:	10bfff84 	addi	r2,r2,-2
    6e2c:	10800f48 	cmpgei	r2,r2,61
    6e30:	1000031e 	bne	r2,zero,6e40 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x88>
    6e34:	008f0f04 	movi	r2,15420
    6e38:	e0bffe0d 	sth	r2,-8(fp)
    6e3c:	00000306 	br	6e4c <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x94>
	else new_vol = current_vol - ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6e40:	e0bffe8b 	ldhu	r2,-6(fp)
    6e44:	10bf7f84 	addi	r2,r2,-514
    6e48:	e0bffe0d 	sth	r2,-8(fp)
	printf("New:		%X\n", new_vol);
    6e4c:	e0bffe0b 	ldhu	r2,-8(fp)
    6e50:	100b883a 	mov	r5,r2
    6e54:	010000b4 	movhi	r4,2
    6e58:	2113d204 	addi	r4,r4,20296
    6e5c:	000dd740 	call	dd74 <printf>
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6e60:	e0bffe0b 	ldhu	r2,-8(fp)
    6e64:	100d883a 	mov	r6,r2
    6e68:	01400404 	movi	r5,16
    6e6c:	e13fff17 	ldw	r4,-4(fp)
    6e70:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6e74:	0001883a 	nop
    6e78:	e037883a 	mov	sp,fp
    6e7c:	dfc00117 	ldw	ra,4(sp)
    6e80:	df000017 	ldw	fp,0(sp)
    6e84:	dec00204 	addi	sp,sp,8
    6e88:	f800283a 	ret

00006e8c <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>:


void SGTL5000vol_down(ALT_AVALON_I2C_DEV_t* dev) {
    6e8c:	defffc04 	addi	sp,sp,-16
    6e90:	dfc00315 	stw	ra,12(sp)
    6e94:	df000215 	stw	fp,8(sp)
    6e98:	df000204 	addi	fp,sp,8
    6e9c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6ea0:	01400404 	movi	r5,16
    6ea4:	e13fff17 	ldw	r4,-4(fp)
    6ea8:	00068b40 	call	68b4 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6eac:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6eb0:	e03ffe0d 	sth	zero,-8(fp)
	if (DAC_MIN_VOL <= ((current_vol >> 8) + DAC_VOL_STEP)) new_vol = (DAC_MIN_VOL << 8) | DAC_MIN_VOL;
    6eb4:	e0bffe8b 	ldhu	r2,-6(fp)
    6eb8:	1005d23a 	srai	r2,r2,8
    6ebc:	10800084 	addi	r2,r2,2
    6ec0:	10803c10 	cmplti	r2,r2,240
    6ec4:	1000031e 	bne	r2,zero,6ed4 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x48>
    6ec8:	00bc3c04 	movi	r2,-3856
    6ecc:	e0bffe0d 	sth	r2,-8(fp)
    6ed0:	00000306 	br	6ee0 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x54>
	else new_vol = current_vol + ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6ed4:	e0bffe8b 	ldhu	r2,-6(fp)
    6ed8:	10808084 	addi	r2,r2,514
    6edc:	e0bffe0d 	sth	r2,-8(fp)
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6ee0:	e0bffe0b 	ldhu	r2,-8(fp)
    6ee4:	100d883a 	mov	r6,r2
    6ee8:	01400404 	movi	r5,16
    6eec:	e13fff17 	ldw	r4,-4(fp)
    6ef0:	00066580 	call	6658 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6ef4:	0001883a 	nop
    6ef8:	e037883a 	mov	sp,fp
    6efc:	dfc00117 	ldw	ra,4(sp)
    6f00:	df000017 	ldw	fp,0(sp)
    6f04:	dec00204 	addi	sp,sp,8
    6f08:	f800283a 	ret

00006f0c <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    6f0c:	defffb04 	addi	sp,sp,-20
    6f10:	dfc00415 	stw	ra,16(sp)
    6f14:	df000315 	stw	fp,12(sp)
    6f18:	df000304 	addi	fp,sp,12
    6f1c:	e13ffe15 	stw	r4,-8(fp)
    6f20:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    6f24:	e0bffe17 	ldw	r2,-8(fp)
    6f28:	1009883a 	mov	r4,r2
    6f2c:	0004edc0 	call	4edc <_ZN15USBDeviceConfigC1Ev>
    6f30:	e0bffe17 	ldw	r2,-8(fp)
    6f34:	10800104 	addi	r2,r2,4
    6f38:	1009883a 	mov	r4,r2
    6f3c:	0008e140 	call	8e14 <_ZN21UsbMidiConfigXtracterC1Ev>
    6f40:	008000b4 	movhi	r2,2
    6f44:	1093df04 	addi	r2,r2,20348
    6f48:	e0fffe17 	ldw	r3,-8(fp)
    6f4c:	18800015 	stw	r2,0(r3)
    6f50:	008000b4 	movhi	r2,2
    6f54:	1093eb04 	addi	r2,r2,20396
    6f58:	e0fffe17 	ldw	r3,-8(fp)
    6f5c:	18800115 	stw	r2,4(r3)
    6f60:	e0bffe17 	ldw	r2,-8(fp)
    6f64:	e0ffff17 	ldw	r3,-4(fp)
    6f68:	10c00215 	stw	r3,8(r2)
    6f6c:	e0bffe17 	ldw	r2,-8(fp)
    6f70:	10000305 	stb	zero,12(r2)
    6f74:	e0bffe17 	ldw	r2,-8(fp)
    6f78:	10000345 	stb	zero,13(r2)
    6f7c:	e0bffe17 	ldw	r2,-8(fp)
    6f80:	10001705 	stb	zero,92(r2)
    6f84:	e0bffe17 	ldw	r2,-8(fp)
    6f88:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6f8c:	e03ffd05 	stb	zero,-12(fp)
    6f90:	e0bffd03 	ldbu	r2,-12(fp)
    6f94:	108000e8 	cmpgeui	r2,r2,3
    6f98:	10002d1e 	bne	r2,zero,7050 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    6f9c:	e0fffd03 	ldbu	r3,-12(fp)
    6fa0:	e13ffe17 	ldw	r4,-8(fp)
    6fa4:	1805883a 	mov	r2,r3
    6fa8:	1085883a 	add	r2,r2,r2
    6fac:	10c5883a 	add	r2,r2,r3
    6fb0:	2085883a 	add	r2,r4,r2
    6fb4:	108004c4 	addi	r2,r2,19
    6fb8:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    6fbc:	e13ffd03 	ldbu	r4,-12(fp)
    6fc0:	e0bffd03 	ldbu	r2,-12(fp)
    6fc4:	10000226 	beq	r2,zero,6fd0 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    6fc8:	0007883a 	mov	r3,zero
    6fcc:	00000106 	br	6fd4 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    6fd0:	00c00204 	movi	r3,8
    6fd4:	e17ffe17 	ldw	r5,-8(fp)
    6fd8:	2005883a 	mov	r2,r4
    6fdc:	1085883a 	add	r2,r2,r2
    6fe0:	1105883a 	add	r2,r2,r4
    6fe4:	2885883a 	add	r2,r5,r2
    6fe8:	10800504 	addi	r2,r2,20
    6fec:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    6ff0:	e13ffd03 	ldbu	r4,-12(fp)
    6ff4:	e0bffd03 	ldbu	r2,-12(fp)
    6ff8:	10000226 	beq	r2,zero,7004 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    6ffc:	00c00044 	movi	r3,1
    7000:	00000106 	br	7008 <_ZN9USBH_MIDIC1EP3USB+0xfc>
    7004:	00c003c4 	movi	r3,15
    7008:	e17ffe17 	ldw	r5,-8(fp)
    700c:	2005883a 	mov	r2,r4
    7010:	1085883a 	add	r2,r2,r2
    7014:	1105883a 	add	r2,r2,r4
    7018:	2885883a 	add	r2,r5,r2
    701c:	10800404 	addi	r2,r2,16
    7020:	18c7883a 	add	r3,r3,r3
    7024:	18cb883a 	add	r5,r3,r3
    7028:	10c00143 	ldbu	r3,5(r2)
    702c:	18c000cc 	andi	r3,r3,3
    7030:	1809883a 	mov	r4,r3
    7034:	2807883a 	mov	r3,r5
    7038:	20c6b03a 	or	r3,r4,r3
    703c:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7040:	e0bffd03 	ldbu	r2,-12(fp)
    7044:	10800044 	addi	r2,r2,1
    7048:	e0bffd05 	stb	r2,-12(fp)
    704c:	003fd006 	br	6f90 <__alt_data_end+0xfc006f90>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    7050:	e0bffe17 	ldw	r2,-8(fp)
    7054:	10800217 	ldw	r2,8(r2)
    7058:	10000626 	beq	r2,zero,7074 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    705c:	e0bffe17 	ldw	r2,-8(fp)
    7060:	10800217 	ldw	r2,8(r2)
    7064:	e0fffe17 	ldw	r3,-8(fp)
    7068:	180b883a 	mov	r5,r3
    706c:	1009883a 	mov	r4,r2
    7070:	0004c900 	call	4c90 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    7074:	0001883a 	nop
    7078:	e037883a 	mov	sp,fp
    707c:	dfc00117 	ldw	ra,4(sp)
    7080:	df000017 	ldw	fp,0(sp)
    7084:	dec00204 	addi	sp,sp,8
    7088:	f800283a 	ret

0000708c <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    708c:	deffe004 	addi	sp,sp,-128
    7090:	dfc01f15 	stw	ra,124(sp)
    7094:	df001e15 	stw	fp,120(sp)
    7098:	df001e04 	addi	fp,sp,120
    709c:	e13ffc15 	stw	r4,-16(fp)
    70a0:	2809883a 	mov	r4,r5
    70a4:	3007883a 	mov	r3,r6
    70a8:	3805883a 	mov	r2,r7
    70ac:	e13ffd05 	stb	r4,-12(fp)
    70b0:	e0fffe05 	stb	r3,-8(fp)
    70b4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    70b8:	e0bfe944 	addi	r2,fp,-91
    70bc:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    70c0:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    70c4:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    70c8:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    70cc:	00800044 	movi	r2,1
    70d0:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    70d4:	00800044 	movi	r2,1
    70d8:	e0bfe3c5 	stb	r2,-113(fp)
    70dc:	e0bfe3c3 	ldbu	r2,-113(fp)
    70e0:	108000e8 	cmpgeui	r2,r2,3
    70e4:	10001a1e 	bne	r2,zero,7150 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    70e8:	e0ffe3c3 	ldbu	r3,-113(fp)
    70ec:	e13ffc17 	ldw	r4,-16(fp)
    70f0:	1805883a 	mov	r2,r3
    70f4:	1085883a 	add	r2,r2,r2
    70f8:	10c5883a 	add	r2,r2,r3
    70fc:	2085883a 	add	r2,r4,r2
    7100:	10800404 	addi	r2,r2,16
    7104:	11000143 	ldbu	r4,5(r2)
    7108:	00ffff84 	movi	r3,-2
    710c:	20c6703a 	and	r3,r4,r3
    7110:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    7114:	e0ffe3c3 	ldbu	r3,-113(fp)
    7118:	e13ffc17 	ldw	r4,-16(fp)
    711c:	1805883a 	mov	r2,r3
    7120:	1085883a 	add	r2,r2,r2
    7124:	10c5883a 	add	r2,r2,r3
    7128:	2085883a 	add	r2,r4,r2
    712c:	10800404 	addi	r2,r2,16
    7130:	11000143 	ldbu	r4,5(r2)
    7134:	00ffff44 	movi	r3,-3
    7138:	20c6703a 	and	r3,r4,r3
    713c:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7140:	e0bfe3c3 	ldbu	r2,-113(fp)
    7144:	10800044 	addi	r2,r2,1
    7148:	e0bfe3c5 	stb	r2,-113(fp)
    714c:	003fe306 	br	70dc <__alt_data_end+0xfc0070dc>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7150:	e0bffc17 	ldw	r2,-16(fp)
    7154:	10800217 	ldw	r2,8(r2)
    7158:	1009883a 	mov	r4,r2
    715c:	0002c6c0 	call	2c6c <_ZN3USB14GetAddressPoolEv>
    7160:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7164:	e0bffc17 	ldw	r2,-16(fp)
    7168:	10800303 	ldbu	r2,12(r2)
    716c:	10803fcc 	andi	r2,r2,255
    7170:	10000226 	beq	r2,zero,717c <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    7174:	00bff644 	movi	r2,-39
    7178:	0001c706 	br	7898 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    717c:	e0bfe817 	ldw	r2,-96(fp)
    7180:	10800017 	ldw	r2,0(r2)
    7184:	10800017 	ldw	r2,0(r2)
    7188:	e0fffc17 	ldw	r3,-16(fp)
    718c:	18c00303 	ldbu	r3,12(r3)
    7190:	18c03fcc 	andi	r3,r3,255
    7194:	180b883a 	mov	r5,r3
    7198:	e13fe817 	ldw	r4,-96(fp)
    719c:	103ee83a 	callr	r2
    71a0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    71a4:	e0bfe617 	ldw	r2,-104(fp)
    71a8:	1000021e 	bne	r2,zero,71b4 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    71ac:	00bff584 	movi	r2,-42
    71b0:	0001b906 	br	7898 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    71b4:	e0bfe617 	ldw	r2,-104(fp)
    71b8:	10c00003 	ldbu	r3,0(r2)
    71bc:	11000043 	ldbu	r4,1(r2)
    71c0:	2008923a 	slli	r4,r4,8
    71c4:	20c6b03a 	or	r3,r4,r3
    71c8:	11000083 	ldbu	r4,2(r2)
    71cc:	2008943a 	slli	r4,r4,16
    71d0:	20c6b03a 	or	r3,r4,r3
    71d4:	108000c3 	ldbu	r2,3(r2)
    71d8:	1004963a 	slli	r2,r2,24
    71dc:	10c4b03a 	or	r2,r2,r3
    71e0:	1000021e 	bne	r2,zero,71ec <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    71e4:	00bff5c4 	movi	r2,-41
    71e8:	0001ab06 	br	7898 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    71ec:	e0bfe617 	ldw	r2,-104(fp)
    71f0:	10c00003 	ldbu	r3,0(r2)
    71f4:	11000043 	ldbu	r4,1(r2)
    71f8:	2008923a 	slli	r4,r4,8
    71fc:	20c6b03a 	or	r3,r4,r3
    7200:	11000083 	ldbu	r4,2(r2)
    7204:	2008943a 	slli	r4,r4,16
    7208:	20c6b03a 	or	r3,r4,r3
    720c:	108000c3 	ldbu	r2,3(r2)
    7210:	1004963a 	slli	r2,r2,24
    7214:	10c4b03a 	or	r2,r2,r3
    7218:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    721c:	e0bffc17 	ldw	r2,-16(fp)
    7220:	10c004c4 	addi	r3,r2,19
    7224:	e0bfe617 	ldw	r2,-104(fp)
    7228:	19803fcc 	andi	r6,r3,255
    722c:	11000003 	ldbu	r4,0(r2)
    7230:	2008703a 	and	r4,r4,zero
    7234:	200b883a 	mov	r5,r4
    7238:	3009883a 	mov	r4,r6
    723c:	2908b03a 	or	r4,r5,r4
    7240:	11000005 	stb	r4,0(r2)
    7244:	1808d23a 	srli	r4,r3,8
    7248:	21803fcc 	andi	r6,r4,255
    724c:	11000043 	ldbu	r4,1(r2)
    7250:	2008703a 	and	r4,r4,zero
    7254:	200b883a 	mov	r5,r4
    7258:	3009883a 	mov	r4,r6
    725c:	2908b03a 	or	r4,r5,r4
    7260:	11000045 	stb	r4,1(r2)
    7264:	1808d43a 	srli	r4,r3,16
    7268:	21803fcc 	andi	r6,r4,255
    726c:	11000083 	ldbu	r4,2(r2)
    7270:	2008703a 	and	r4,r4,zero
    7274:	200b883a 	mov	r5,r4
    7278:	3009883a 	mov	r4,r6
    727c:	2908b03a 	or	r4,r5,r4
    7280:	11000085 	stb	r4,2(r2)
    7284:	180ad63a 	srli	r5,r3,24
    7288:	10c000c3 	ldbu	r3,3(r2)
    728c:	1806703a 	and	r3,r3,zero
    7290:	1809883a 	mov	r4,r3
    7294:	2807883a 	mov	r3,r5
    7298:	20c6b03a 	or	r3,r4,r3
    729c:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    72a0:	e0bfe617 	ldw	r2,-104(fp)
    72a4:	e0ffff03 	ldbu	r3,-4(fp)
    72a8:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    72ac:	e0bffc17 	ldw	r2,-16(fp)
    72b0:	10c00217 	ldw	r3,8(r2)
    72b4:	e0bfe944 	addi	r2,fp,-91
    72b8:	d8800015 	stw	r2,0(sp)
    72bc:	01c00204 	movi	r7,8
    72c0:	000d883a 	mov	r6,zero
    72c4:	000b883a 	mov	r5,zero
    72c8:	1809883a 	mov	r4,r3
    72cc:	00028980 	call	2898 <_ZN3USB11getDevDescrEhhtPh>
    72d0:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    72d4:	e0bfe617 	ldw	r2,-104(fp)
    72d8:	e0ffe717 	ldw	r3,-100(fp)
    72dc:	19403fcc 	andi	r5,r3,255
    72e0:	10c00003 	ldbu	r3,0(r2)
    72e4:	1806703a 	and	r3,r3,zero
    72e8:	1809883a 	mov	r4,r3
    72ec:	2807883a 	mov	r3,r5
    72f0:	20c6b03a 	or	r3,r4,r3
    72f4:	10c00005 	stb	r3,0(r2)
    72f8:	e0ffe717 	ldw	r3,-100(fp)
    72fc:	1806d23a 	srli	r3,r3,8
    7300:	19403fcc 	andi	r5,r3,255
    7304:	10c00043 	ldbu	r3,1(r2)
    7308:	1806703a 	and	r3,r3,zero
    730c:	1809883a 	mov	r4,r3
    7310:	2807883a 	mov	r3,r5
    7314:	20c6b03a 	or	r3,r4,r3
    7318:	10c00045 	stb	r3,1(r2)
    731c:	e0ffe717 	ldw	r3,-100(fp)
    7320:	1806d43a 	srli	r3,r3,16
    7324:	19403fcc 	andi	r5,r3,255
    7328:	10c00083 	ldbu	r3,2(r2)
    732c:	1806703a 	and	r3,r3,zero
    7330:	1809883a 	mov	r4,r3
    7334:	2807883a 	mov	r3,r5
    7338:	20c6b03a 	or	r3,r4,r3
    733c:	10c00085 	stb	r3,2(r2)
    7340:	e0ffe717 	ldw	r3,-100(fp)
    7344:	180ad63a 	srli	r5,r3,24
    7348:	10c000c3 	ldbu	r3,3(r2)
    734c:	1806703a 	and	r3,r3,zero
    7350:	1809883a 	mov	r4,r3
    7354:	2807883a 	mov	r3,r5
    7358:	20c6b03a 	or	r3,r4,r3
    735c:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7360:	e0bfe303 	ldbu	r2,-116(fp)
    7364:	10013a1e 	bne	r2,zero,7850 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    7368:	e0bfe817 	ldw	r2,-96(fp)
    736c:	10800017 	ldw	r2,0(r2)
    7370:	10800104 	addi	r2,r2,4
    7374:	10800017 	ldw	r2,0(r2)
    7378:	e0fffd03 	ldbu	r3,-12(fp)
    737c:	e13ffe03 	ldbu	r4,-8(fp)
    7380:	200f883a 	mov	r7,r4
    7384:	000d883a 	mov	r6,zero
    7388:	180b883a 	mov	r5,r3
    738c:	e13fe817 	ldw	r4,-96(fp)
    7390:	103ee83a 	callr	r2
    7394:	1007883a 	mov	r3,r2
    7398:	e0bffc17 	ldw	r2,-16(fp)
    739c:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    73a0:	e0bffc17 	ldw	r2,-16(fp)
    73a4:	10800303 	ldbu	r2,12(r2)
    73a8:	10803fcc 	andi	r2,r2,255
    73ac:	1000021e 	bne	r2,zero,73b8 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    73b0:	00bff504 	movi	r2,-44
    73b4:	00013806 	br	7898 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    73b8:	e0bfe517 	ldw	r2,-108(fp)
    73bc:	10c001c3 	ldbu	r3,7(r2)
    73c0:	e0bffc17 	ldw	r2,-16(fp)
    73c4:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    73c8:	e0bffc17 	ldw	r2,-16(fp)
    73cc:	10c00217 	ldw	r3,8(r2)
    73d0:	e0bffc17 	ldw	r2,-16(fp)
    73d4:	10800303 	ldbu	r2,12(r2)
    73d8:	10803fcc 	andi	r2,r2,255
    73dc:	100f883a 	mov	r7,r2
    73e0:	000d883a 	mov	r6,zero
    73e4:	000b883a 	mov	r5,zero
    73e8:	1809883a 	mov	r4,r3
    73ec:	0002b540 	call	2b54 <_ZN3USB7setAddrEhhh>
    73f0:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    73f4:	e0bfe303 	ldbu	r2,-116(fp)
    73f8:	10001026 	beq	r2,zero,743c <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    73fc:	e0bfe617 	ldw	r2,-104(fp)
    7400:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    7404:	e0bfe817 	ldw	r2,-96(fp)
    7408:	10800017 	ldw	r2,0(r2)
    740c:	10800204 	addi	r2,r2,8
    7410:	10800017 	ldw	r2,0(r2)
    7414:	e0fffc17 	ldw	r3,-16(fp)
    7418:	18c00303 	ldbu	r3,12(r3)
    741c:	18c03fcc 	andi	r3,r3,255
    7420:	180b883a 	mov	r5,r3
    7424:	e13fe817 	ldw	r4,-96(fp)
    7428:	103ee83a 	callr	r2
                bAddress = 0;
    742c:	e0bffc17 	ldw	r2,-16(fp)
    7430:	10000305 	stb	zero,12(r2)
                return rcode;
    7434:	e0bfe303 	ldbu	r2,-116(fp)
    7438:	00011706 	br	7898 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    743c:	e0bffc17 	ldw	r2,-16(fp)
    7440:	10800303 	ldbu	r2,12(r2)
    7444:	10803fcc 	andi	r2,r2,255
    7448:	01402004 	movi	r5,128
    744c:	1009883a 	mov	r4,r2
    7450:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7454:	e0bfe617 	ldw	r2,-104(fp)
    7458:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    745c:	e0bfe817 	ldw	r2,-96(fp)
    7460:	10800017 	ldw	r2,0(r2)
    7464:	10800017 	ldw	r2,0(r2)
    7468:	e0fffc17 	ldw	r3,-16(fp)
    746c:	18c00303 	ldbu	r3,12(r3)
    7470:	18c03fcc 	andi	r3,r3,255
    7474:	180b883a 	mov	r5,r3
    7478:	e13fe817 	ldw	r4,-96(fp)
    747c:	103ee83a 	callr	r2
    7480:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7484:	e0bfe617 	ldw	r2,-104(fp)
    7488:	1000021e 	bne	r2,zero,7494 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    748c:	00bff584 	movi	r2,-42
    7490:	00010106 	br	7898 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    7494:	e0bfe617 	ldw	r2,-104(fp)
    7498:	e0ffff03 	ldbu	r3,-4(fp)
    749c:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    74a0:	e0bffc17 	ldw	r2,-16(fp)
    74a4:	10c00217 	ldw	r3,8(r2)
    74a8:	e0bffc17 	ldw	r2,-16(fp)
    74ac:	10800303 	ldbu	r2,12(r2)
    74b0:	11003fcc 	andi	r4,r2,255
    74b4:	00800484 	movi	r2,18
    74b8:	117fffcc 	andi	r5,r2,65535
    74bc:	e0bfe944 	addi	r2,fp,-91
    74c0:	d8800015 	stw	r2,0(sp)
    74c4:	280f883a 	mov	r7,r5
    74c8:	000d883a 	mov	r6,zero
    74cc:	200b883a 	mov	r5,r4
    74d0:	1809883a 	mov	r4,r3
    74d4:	00028980 	call	2898 <_ZN3USB11getDevDescrEhhtPh>
    74d8:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    74dc:	e0bfe303 	ldbu	r2,-116(fp)
    74e0:	1000dd1e 	bne	r2,zero,7858 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    74e4:	e0bfe517 	ldw	r2,-108(fp)
    74e8:	10c00203 	ldbu	r3,8(r2)
    74ec:	10800243 	ldbu	r2,9(r2)
    74f0:	1004923a 	slli	r2,r2,8
    74f4:	10c4b03a 	or	r2,r2,r3
    74f8:	1007883a 	mov	r3,r2
    74fc:	e0bffc17 	ldw	r2,-16(fp)
    7500:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    7504:	e0bfe517 	ldw	r2,-108(fp)
    7508:	10c00283 	ldbu	r3,10(r2)
    750c:	108002c3 	ldbu	r2,11(r2)
    7510:	1004923a 	slli	r2,r2,8
    7514:	10c4b03a 	or	r2,r2,r3
    7518:	1007883a 	mov	r3,r2
    751c:	e0bffc17 	ldw	r2,-16(fp)
    7520:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    7524:	e0bfe517 	ldw	r2,-108(fp)
    7528:	10800443 	ldbu	r2,17(r2)
    752c:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7530:	e0bffc17 	ldw	r2,-16(fp)
    7534:	10c00217 	ldw	r3,8(r2)
    7538:	e0bffc17 	ldw	r2,-16(fp)
    753c:	10800303 	ldbu	r2,12(r2)
    7540:	11003fcc 	andi	r4,r2,255
    7544:	e0bffc17 	ldw	r2,-16(fp)
    7548:	108004c4 	addi	r2,r2,19
    754c:	100f883a 	mov	r7,r2
    7550:	01800044 	movi	r6,1
    7554:	200b883a 	mov	r5,r4
    7558:	1809883a 	mov	r4,r3
    755c:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7560:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7564:	e0bfe303 	ldbu	r2,-116(fp)
    7568:	1000bd1e 	bne	r2,zero,7860 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    756c:	e0bffc17 	ldw	r2,-16(fp)
    7570:	1080040b 	ldhu	r2,16(r2)
    7574:	10bfffcc 	andi	r2,r2,65535
    7578:	01402004 	movi	r5,128
    757c:	1009883a 	mov	r4,r2
    7580:	0008e480 	call	8e48 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    7584:	e0bffc17 	ldw	r2,-16(fp)
    7588:	1080038b 	ldhu	r2,14(r2)
    758c:	10bfffcc 	andi	r2,r2,65535
    7590:	01402004 	movi	r5,128
    7594:	1009883a 	mov	r4,r2
    7598:	0008e480 	call	8e48 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    759c:	e0bfe903 	ldbu	r2,-92(fp)
    75a0:	01402004 	movi	r5,128
    75a4:	1009883a 	mov	r4,r2
    75a8:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    75ac:	e0bffc17 	ldw	r2,-16(fp)
    75b0:	00c000c4 	movi	r3,3
    75b4:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    75b8:	e13ffc17 	ldw	r4,-16(fp)
    75bc:	00079240 	call	7924 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    75c0:	e03fe405 	stb	zero,-112(fp)
    75c4:	e0ffe403 	ldbu	r3,-112(fp)
    75c8:	e0bfe903 	ldbu	r2,-92(fp)
    75cc:	18802a2e 	bgeu	r3,r2,7678 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    75d0:	e0bffc17 	ldw	r2,-16(fp)
    75d4:	10c00104 	addi	r3,r2,4
    75d8:	e0bfee04 	addi	r2,fp,-72
    75dc:	01800044 	movi	r6,1
    75e0:	180b883a 	mov	r5,r3
    75e4:	1009883a 	mov	r4,r2
    75e8:	00084240 	call	8424 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    75ec:	e0bffc17 	ldw	r2,-16(fp)
    75f0:	10c00217 	ldw	r3,8(r2)
    75f4:	e0bffc17 	ldw	r2,-16(fp)
    75f8:	10800303 	ldbu	r2,12(r2)
    75fc:	11003fcc 	andi	r4,r2,255
    7600:	e17fe403 	ldbu	r5,-112(fp)
    7604:	e0bfee04 	addi	r2,fp,-72
    7608:	d8800015 	stw	r2,0(sp)
    760c:	280f883a 	mov	r7,r5
    7610:	000d883a 	mov	r6,zero
    7614:	200b883a 	mov	r5,r4
    7618:	1809883a 	mov	r4,r3
    761c:	00029b40 	call	29b4 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7620:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    7624:	e0bfe303 	ldbu	r2,-116(fp)
    7628:	10008f1e 	bne	r2,zero,7868 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    762c:	e0bfee04 	addi	r2,fp,-72
    7630:	1009883a 	mov	r4,r2
    7634:	0008d300 	call	8d30 <_ZN14MidiDescParser9getNumEPsEv>
    7638:	1007883a 	mov	r3,r2
    763c:	e0bfe383 	ldbu	r2,-114(fp)
    7640:	10c5883a 	add	r2,r2,r3
    7644:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    7648:	e0bfe383 	ldbu	r2,-114(fp)
    764c:	108000b0 	cmpltui	r2,r2,2
    7650:	1000051e 	bne	r2,zero,7668 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7654:	e0bfee04 	addi	r2,fp,-72
    7658:	1009883a 	mov	r4,r2
    765c:	0008d080 	call	8d08 <_ZN14MidiDescParser12getConfValueEv>
    7660:	e0bfe345 	stb	r2,-115(fp)
    7664:	00000406 	br	7678 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7668:	e0bfe403 	ldbu	r2,-112(fp)
    766c:	10800044 	addi	r2,r2,1
    7670:	e0bfe405 	stb	r2,-112(fp)
    7674:	003fd306 	br	75c4 <__alt_data_end+0xfc0075c4>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    7678:	e0bfe383 	ldbu	r2,-114(fp)
    767c:	01402004 	movi	r5,128
    7680:	1009883a 	mov	r4,r2
    7684:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    7688:	e0bfe383 	ldbu	r2,-114(fp)
    768c:	10800058 	cmpnei	r2,r2,1
    7690:	1000321e 	bne	r2,zero,775c <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7694:	e03fe445 	stb	zero,-111(fp)
    7698:	e0ffe443 	ldbu	r3,-111(fp)
    769c:	e0bfe903 	ldbu	r2,-92(fp)
    76a0:	18802a2e 	bgeu	r3,r2,774c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    76a4:	e0bffc17 	ldw	r2,-16(fp)
    76a8:	10c00104 	addi	r3,r2,4
    76ac:	e0bfee04 	addi	r2,fp,-72
    76b0:	000d883a 	mov	r6,zero
    76b4:	180b883a 	mov	r5,r3
    76b8:	1009883a 	mov	r4,r2
    76bc:	00084240 	call	8424 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    76c0:	e0bffc17 	ldw	r2,-16(fp)
    76c4:	10c00217 	ldw	r3,8(r2)
    76c8:	e0bffc17 	ldw	r2,-16(fp)
    76cc:	10800303 	ldbu	r2,12(r2)
    76d0:	11003fcc 	andi	r4,r2,255
    76d4:	e17fe443 	ldbu	r5,-111(fp)
    76d8:	e0bfee04 	addi	r2,fp,-72
    76dc:	d8800015 	stw	r2,0(sp)
    76e0:	280f883a 	mov	r7,r5
    76e4:	000d883a 	mov	r6,zero
    76e8:	200b883a 	mov	r5,r4
    76ec:	1809883a 	mov	r4,r3
    76f0:	00029b40 	call	29b4 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    76f4:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    76f8:	e0bfe303 	ldbu	r2,-116(fp)
    76fc:	10005c1e 	bne	r2,zero,7870 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    7700:	e0bfee04 	addi	r2,fp,-72
    7704:	1009883a 	mov	r4,r2
    7708:	0008d300 	call	8d30 <_ZN14MidiDescParser9getNumEPsEv>
    770c:	1007883a 	mov	r3,r2
    7710:	e0bfe383 	ldbu	r2,-114(fp)
    7714:	10c5883a 	add	r2,r2,r3
    7718:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    771c:	e0bfe383 	ldbu	r2,-114(fp)
    7720:	108000b0 	cmpltui	r2,r2,2
    7724:	1000051e 	bne	r2,zero,773c <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    7728:	e0bfee04 	addi	r2,fp,-72
    772c:	1009883a 	mov	r4,r2
    7730:	0008d080 	call	8d08 <_ZN14MidiDescParser12getConfValueEv>
    7734:	e0bfe345 	stb	r2,-115(fp)
    7738:	00000406 	br	774c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    773c:	e0bfe443 	ldbu	r2,-111(fp)
    7740:	10800044 	addi	r2,r2,1
    7744:	e0bfe445 	stb	r2,-111(fp)
    7748:	003fd306 	br	7698 <__alt_data_end+0xfc007698>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    774c:	e0bfe383 	ldbu	r2,-114(fp)
    7750:	01402004 	movi	r5,128
    7754:	1009883a 	mov	r4,r2
    7758:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    775c:	e0bfe383 	ldbu	r2,-114(fp)
    7760:	108000a8 	cmpgeui	r2,r2,2
    7764:	1000031e 	bne	r2,zero,7774 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7768:	00bfffc4 	movi	r2,-1
    776c:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7770:	00004206 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7774:	e0bffc17 	ldw	r2,-16(fp)
    7778:	10c00217 	ldw	r3,8(r2)
    777c:	e0bffc17 	ldw	r2,-16(fp)
    7780:	10800303 	ldbu	r2,12(r2)
    7784:	11003fcc 	andi	r4,r2,255
    7788:	e0bffc17 	ldw	r2,-16(fp)
    778c:	108004c4 	addi	r2,r2,19
    7790:	100f883a 	mov	r7,r2
    7794:	018000c4 	movi	r6,3
    7798:	200b883a 	mov	r5,r4
    779c:	1809883a 	mov	r4,r3
    77a0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    77a4:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    77a8:	e0bfe343 	ldbu	r2,-115(fp)
    77ac:	01402004 	movi	r5,128
    77b0:	1009883a 	mov	r4,r2
    77b4:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    77b8:	e0bffc17 	ldw	r2,-16(fp)
    77bc:	10800583 	ldbu	r2,22(r2)
    77c0:	10bfe004 	addi	r2,r2,-128
    77c4:	10803fcc 	andi	r2,r2,255
    77c8:	01402004 	movi	r5,128
    77cc:	1009883a 	mov	r4,r2
    77d0:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    77d4:	e0bffc17 	ldw	r2,-16(fp)
    77d8:	10800643 	ldbu	r2,25(r2)
    77dc:	10803fcc 	andi	r2,r2,255
    77e0:	01402004 	movi	r5,128
    77e4:	1009883a 	mov	r4,r2
    77e8:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    77ec:	e0bffc17 	ldw	r2,-16(fp)
    77f0:	10c00217 	ldw	r3,8(r2)
    77f4:	e0bffc17 	ldw	r2,-16(fp)
    77f8:	10800303 	ldbu	r2,12(r2)
    77fc:	10803fcc 	andi	r2,r2,255
    7800:	e13fe343 	ldbu	r4,-115(fp)
    7804:	200f883a 	mov	r7,r4
    7808:	000d883a 	mov	r6,zero
    780c:	100b883a 	mov	r5,r2
    7810:	1809883a 	mov	r4,r3
    7814:	0002be80 	call	2be8 <_ZN3USB7setConfEhhh>
    7818:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    781c:	e0bfe303 	ldbu	r2,-116(fp)
    7820:	1000151e 	bne	r2,zero,7878 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7824:	e0bffc17 	ldw	r2,-16(fp)
    7828:	10801817 	ldw	r2,96(r2)
    782c:	10000326 	beq	r2,zero,783c <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7830:	e0bffc17 	ldw	r2,-16(fp)
    7834:	10801817 	ldw	r2,96(r2)
    7838:	103ee83a 	callr	r2

        bPollEnable = true;
    783c:	e0bffc17 	ldw	r2,-16(fp)
    7840:	00c00044 	movi	r3,1
    7844:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7848:	0005883a 	mov	r2,zero
    784c:	00001206 	br	7898 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7850:	0001883a 	nop
    7854:	00000906 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7858:	0001883a 	nop
    785c:	00000706 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7860:	0001883a 	nop
    7864:	00000506 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7868:	0001883a 	nop
    786c:	00000306 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7870:	0001883a 	nop
    7874:	00000106 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7878:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    787c:	e0bffc17 	ldw	r2,-16(fp)
    7880:	10800017 	ldw	r2,0(r2)
    7884:	10800204 	addi	r2,r2,8
    7888:	10800017 	ldw	r2,0(r2)
    788c:	e13ffc17 	ldw	r4,-16(fp)
    7890:	103ee83a 	callr	r2
        return rcode;
    7894:	e0bfe303 	ldbu	r2,-116(fp)
}
    7898:	e037883a 	mov	sp,fp
    789c:	dfc00117 	ldw	ra,4(sp)
    78a0:	df000017 	ldw	fp,0(sp)
    78a4:	dec00204 	addi	sp,sp,8
    78a8:	f800283a 	ret

000078ac <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    78ac:	defffd04 	addi	sp,sp,-12
    78b0:	dfc00215 	stw	ra,8(sp)
    78b4:	df000115 	stw	fp,4(sp)
    78b8:	df000104 	addi	fp,sp,4
    78bc:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    78c0:	e0bfff17 	ldw	r2,-4(fp)
    78c4:	10800217 	ldw	r2,8(r2)
    78c8:	1009883a 	mov	r4,r2
    78cc:	0002c6c0 	call	2c6c <_ZN3USB14GetAddressPoolEv>
    78d0:	1009883a 	mov	r4,r2
    78d4:	20800017 	ldw	r2,0(r4)
    78d8:	10800204 	addi	r2,r2,8
    78dc:	10800017 	ldw	r2,0(r2)
    78e0:	e0ffff17 	ldw	r3,-4(fp)
    78e4:	18c00303 	ldbu	r3,12(r3)
    78e8:	18c03fcc 	andi	r3,r3,255
    78ec:	180b883a 	mov	r5,r3
    78f0:	103ee83a 	callr	r2
        bAddress     = 0;
    78f4:	e0bfff17 	ldw	r2,-4(fp)
    78f8:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    78fc:	e0bfff17 	ldw	r2,-4(fp)
    7900:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    7904:	e0bfff17 	ldw	r2,-4(fp)
    7908:	10001705 	stb	zero,92(r2)
        return 0;
    790c:	0005883a 	mov	r2,zero
}
    7910:	e037883a 	mov	sp,fp
    7914:	dfc00117 	ldw	ra,4(sp)
    7918:	df000017 	ldw	fp,0(sp)
    791c:	dec00204 	addi	sp,sp,8
    7920:	f800283a 	ret

00007924 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7924:	defffe04 	addi	sp,sp,-8
    7928:	df000115 	stw	fp,4(sp)
    792c:	df000104 	addi	fp,sp,4
    7930:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7934:	e0bfff17 	ldw	r2,-4(fp)
    7938:	1080040b 	ldhu	r2,16(r2)
    793c:	10bfffcc 	andi	r2,r2,65535
    7940:	10848d58 	cmpnei	r2,r2,4661
    7944:	1000351e 	bne	r2,zero,7a1c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7948:	e0bfff17 	ldw	r2,-4(fp)
    794c:	1080038b 	ldhu	r2,14(r2)
    7950:	10bfffcc 	andi	r2,r2,65535
    7954:	10800820 	cmpeqi	r2,r2,32
    7958:	10000f1e 	bne	r2,zero,7998 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    795c:	e0bfff17 	ldw	r2,-4(fp)
    7960:	1080038b 	ldhu	r2,14(r2)
    7964:	10bfffcc 	andi	r2,r2,65535
    7968:	10800da0 	cmpeqi	r2,r2,54
    796c:	10000a1e 	bne	r2,zero,7998 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7970:	e0bfff17 	ldw	r2,-4(fp)
    7974:	1080038b 	ldhu	r2,14(r2)
    7978:	10bfffcc 	andi	r2,r2,65535
    797c:	10801460 	cmpeqi	r2,r2,81
    7980:	1000051e 	bne	r2,zero,7998 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7984:	e0bfff17 	ldw	r2,-4(fp)
    7988:	1080038b 	ldhu	r2,14(r2)
    798c:	10bfffcc 	andi	r2,r2,65535
    7990:	10801a58 	cmpnei	r2,r2,105
    7994:	1000041e 	bne	r2,zero,79a8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7998:	e0bfff17 	ldw	r2,-4(fp)
    799c:	00c00084 	movi	r3,2
    79a0:	10c00485 	stb	r3,18(r2)
                        return;
    79a4:	00001d06 	br	7a1c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    79a8:	e0bfff17 	ldw	r2,-4(fp)
    79ac:	1080038b 	ldhu	r2,14(r2)
    79b0:	10bfffcc 	andi	r2,r2,65535
    79b4:	10800c30 	cmpltui	r2,r2,48
    79b8:	1000051e 	bne	r2,zero,79d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    79bc:	e0bfff17 	ldw	r2,-4(fp)
    79c0:	1080038b 	ldhu	r2,14(r2)
    79c4:	10bfffcc 	andi	r2,r2,65535
    79c8:	10800cf0 	cmpltui	r2,r2,51
    79cc:	10000f1e 	bne	r2,zero,7a0c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    79d0:	e0bfff17 	ldw	r2,-4(fp)
    79d4:	1080038b 	ldhu	r2,14(r2)
    79d8:	10bfffcc 	andi	r2,r2,65535
    79dc:	10800d60 	cmpeqi	r2,r2,53
    79e0:	10000a1e 	bne	r2,zero,7a0c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    79e4:	e0bfff17 	ldw	r2,-4(fp)
    79e8:	1080038b 	ldhu	r2,14(r2)
    79ec:	10bfffcc 	andi	r2,r2,65535
    79f0:	10801ef0 	cmpltui	r2,r2,123
    79f4:	1000091e 	bne	r2,zero,7a1c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    79f8:	e0bfff17 	ldw	r2,-4(fp)
    79fc:	1080038b 	ldhu	r2,14(r2)
    7a00:	10bfffcc 	andi	r2,r2,65535
    7a04:	10801fa8 	cmpgeui	r2,r2,126
    7a08:	1000041e 	bne	r2,zero,7a1c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7a0c:	e0bfff17 	ldw	r2,-4(fp)
    7a10:	00c00084 	movi	r3,2
    7a14:	10c00485 	stb	r3,18(r2)
                        return;
    7a18:	0001883a 	nop
                }
        }
}
    7a1c:	e037883a 	mov	sp,fp
    7a20:	df000017 	ldw	fp,0(sp)
    7a24:	dec00104 	addi	sp,sp,4
    7a28:	f800283a 	ret

00007a2c <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7a2c:	defff804 	addi	sp,sp,-32
    7a30:	dfc00715 	stw	ra,28(sp)
    7a34:	df000615 	stw	fp,24(sp)
    7a38:	df000604 	addi	fp,sp,24
    7a3c:	e13ffd15 	stw	r4,-12(fp)
    7a40:	e17ffe15 	stw	r5,-8(fp)
    7a44:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7a48:	e0bffd17 	ldw	r2,-12(fp)
    7a4c:	108005c3 	ldbu	r2,23(r2)
    7a50:	10c03fcc 	andi	r3,r2,255
    7a54:	e0bffe17 	ldw	r2,-8(fp)
    7a58:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7a5c:	e0bffd17 	ldw	r2,-12(fp)
    7a60:	10c00217 	ldw	r3,8(r2)
    7a64:	e0bffd17 	ldw	r2,-12(fp)
    7a68:	10800303 	ldbu	r2,12(r2)
    7a6c:	11003fcc 	andi	r4,r2,255
    7a70:	e0bffd17 	ldw	r2,-12(fp)
    7a74:	10800583 	ldbu	r2,22(r2)
    7a78:	11403fcc 	andi	r5,r2,255
    7a7c:	d8000115 	stw	zero,4(sp)
    7a80:	e0bfff17 	ldw	r2,-4(fp)
    7a84:	d8800015 	stw	r2,0(sp)
    7a88:	e1fffe17 	ldw	r7,-8(fp)
    7a8c:	280d883a 	mov	r6,r5
    7a90:	200b883a 	mov	r5,r4
    7a94:	1809883a 	mov	r4,r3
    7a98:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7a9c:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7aa0:	e0bffe17 	ldw	r2,-8(fp)
    7aa4:	1080000b 	ldhu	r2,0(r2)
    7aa8:	10bfffcc 	andi	r2,r2,65535
    7aac:	10800f28 	cmpgeui	r2,r2,60
    7ab0:	10000d1e 	bne	r2,zero,7ae8 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7ab4:	e0bffe17 	ldw	r2,-8(fp)
    7ab8:	1080000b 	ldhu	r2,0(r2)
    7abc:	10bfffcc 	andi	r2,r2,65535
    7ac0:	e0ffff17 	ldw	r3,-4(fp)
    7ac4:	1885883a 	add	r2,r3,r2
    7ac8:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7acc:	e0bffe17 	ldw	r2,-8(fp)
    7ad0:	1080000b 	ldhu	r2,0(r2)
    7ad4:	10bfffcc 	andi	r2,r2,65535
    7ad8:	10800044 	addi	r2,r2,1
    7adc:	e0ffff17 	ldw	r3,-4(fp)
    7ae0:	1885883a 	add	r2,r3,r2
    7ae4:	10000005 	stb	zero,0(r2)
        }
        return r;
    7ae8:	e0bffc03 	ldbu	r2,-16(fp)
}
    7aec:	e037883a 	mov	sp,fp
    7af0:	dfc00117 	ldw	ra,4(sp)
    7af4:	df000017 	ldw	fp,0(sp)
    7af8:	dec00204 	addi	sp,sp,8
    7afc:	f800283a 	ret

00007b00 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7b00:	defff904 	addi	sp,sp,-28
    7b04:	dfc00615 	stw	ra,24(sp)
    7b08:	df000515 	stw	fp,20(sp)
    7b0c:	df000504 	addi	fp,sp,20
    7b10:	e13ffd15 	stw	r4,-12(fp)
    7b14:	e17ffe15 	stw	r5,-8(fp)
    7b18:	3005883a 	mov	r2,r6
    7b1c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7b20:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7b24:	e0bffd17 	ldw	r2,-12(fp)
    7b28:	10800343 	ldbu	r2,13(r2)
    7b2c:	1080005c 	xori	r2,r2,1
    7b30:	10803fcc 	andi	r2,r2,255
    7b34:	10000226 	beq	r2,zero,7b40 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7b38:	0005883a 	mov	r2,zero
    7b3c:	00008506 	br	7d54 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7b40:	e0bffd17 	ldw	r2,-12(fp)
    7b44:	10801703 	ldbu	r2,92(r2)
    7b48:	10803fcc 	andi	r2,r2,255
    7b4c:	10001826 	beq	r2,zero,7bb0 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7b50:	e0bffd17 	ldw	r2,-12(fp)
    7b54:	10801703 	ldbu	r2,92(r2)
    7b58:	10803fcc 	andi	r2,r2,255
    7b5c:	10801028 	cmpgeui	r2,r2,64
    7b60:	1000131e 	bne	r2,zero,7bb0 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7b64:	e0bffd17 	ldw	r2,-12(fp)
    7b68:	10801703 	ldbu	r2,92(r2)
    7b6c:	10803fcc 	andi	r2,r2,255
    7b70:	e0fffd17 	ldw	r3,-12(fp)
    7b74:	1885883a 	add	r2,r3,r2
    7b78:	10800704 	addi	r2,r2,28
    7b7c:	10800003 	ldbu	r2,0(r2)
    7b80:	10803fcc 	andi	r2,r2,255
    7b84:	10002a1e 	bne	r2,zero,7c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b88:	e0bffd17 	ldw	r2,-12(fp)
    7b8c:	10801703 	ldbu	r2,92(r2)
    7b90:	10803fcc 	andi	r2,r2,255
    7b94:	10800044 	addi	r2,r2,1
    7b98:	e0fffd17 	ldw	r3,-12(fp)
    7b9c:	1885883a 	add	r2,r3,r2
    7ba0:	10800704 	addi	r2,r2,28
    7ba4:	10800003 	ldbu	r2,0(r2)
    7ba8:	10803fcc 	andi	r2,r2,255
    7bac:	1000201e 	bne	r2,zero,7c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7bb0:	e0bffd17 	ldw	r2,-12(fp)
    7bb4:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7bb8:	e0bffd17 	ldw	r2,-12(fp)
    7bbc:	10c00704 	addi	r3,r2,28
    7bc0:	e0bffc04 	addi	r2,fp,-16
    7bc4:	180d883a 	mov	r6,r3
    7bc8:	100b883a 	mov	r5,r2
    7bcc:	e13ffd17 	ldw	r4,-12(fp)
    7bd0:	0007a2c0 	call	7a2c <_ZN9USBH_MIDI8RecvDataEPtPh>
    7bd4:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7bd8:	e0bffb03 	ldbu	r2,-20(fp)
    7bdc:	10000226 	beq	r2,zero,7be8 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7be0:	0005883a 	mov	r2,zero
    7be4:	00005b06 	br	7d54 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7be8:	e0bffd17 	ldw	r2,-12(fp)
    7bec:	10800703 	ldbu	r2,28(r2)
    7bf0:	10803fcc 	andi	r2,r2,255
    7bf4:	10000e1e 	bne	r2,zero,7c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bf8:	e0bffd17 	ldw	r2,-12(fp)
    7bfc:	10800743 	ldbu	r2,29(r2)
    7c00:	10803fcc 	andi	r2,r2,255
    7c04:	10000a1e 	bne	r2,zero,7c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7c08:	e0bffd17 	ldw	r2,-12(fp)
    7c0c:	10800783 	ldbu	r2,30(r2)
    7c10:	10803fcc 	andi	r2,r2,255
    7c14:	1000061e 	bne	r2,zero,7c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7c18:	e0bffd17 	ldw	r2,-12(fp)
    7c1c:	108007c3 	ldbu	r2,31(r2)
    7c20:	10803fcc 	andi	r2,r2,255
    7c24:	1000021e 	bne	r2,zero,7c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7c28:	0005883a 	mov	r2,zero
    7c2c:	00004906 	br	7d54 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7c30:	e0bffd17 	ldw	r2,-12(fp)
    7c34:	10801703 	ldbu	r2,92(r2)
    7c38:	10803fcc 	andi	r2,r2,255
    7c3c:	e0fffd17 	ldw	r3,-12(fp)
    7c40:	1885883a 	add	r2,r3,r2
    7c44:	10800704 	addi	r2,r2,28
    7c48:	10800003 	ldbu	r2,0(r2)
    7c4c:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7c50:	e0bfff03 	ldbu	r2,-4(fp)
    7c54:	10000526 	beq	r2,zero,7c6c <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7c58:	e0bffe17 	ldw	r2,-8(fp)
    7c5c:	10c00044 	addi	r3,r2,1
    7c60:	e0fffe15 	stw	r3,-8(fp)
    7c64:	e0fffb43 	ldbu	r3,-19(fp)
    7c68:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7c6c:	e0bffd17 	ldw	r2,-12(fp)
    7c70:	10801703 	ldbu	r2,92(r2)
    7c74:	10800044 	addi	r2,r2,1
    7c78:	1007883a 	mov	r3,r2
    7c7c:	e0bffd17 	ldw	r2,-12(fp)
    7c80:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7c84:	e0bffe17 	ldw	r2,-8(fp)
    7c88:	10c00044 	addi	r3,r2,1
    7c8c:	e0fffe15 	stw	r3,-8(fp)
    7c90:	e0fffd17 	ldw	r3,-12(fp)
    7c94:	18c01703 	ldbu	r3,92(r3)
    7c98:	19000044 	addi	r4,r3,1
    7c9c:	200b883a 	mov	r5,r4
    7ca0:	e13ffd17 	ldw	r4,-12(fp)
    7ca4:	21401705 	stb	r5,92(r4)
    7ca8:	18c03fcc 	andi	r3,r3,255
    7cac:	e13ffd17 	ldw	r4,-12(fp)
    7cb0:	20c7883a 	add	r3,r4,r3
    7cb4:	18c00704 	addi	r3,r3,28
    7cb8:	18c00003 	ldbu	r3,0(r3)
    7cbc:	e0fffb85 	stb	r3,-18(fp)
    7cc0:	e0fffb83 	ldbu	r3,-18(fp)
    7cc4:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7cc8:	e0bffe17 	ldw	r2,-8(fp)
    7ccc:	10c00044 	addi	r3,r2,1
    7cd0:	e0fffe15 	stw	r3,-8(fp)
    7cd4:	e0fffd17 	ldw	r3,-12(fp)
    7cd8:	18c01703 	ldbu	r3,92(r3)
    7cdc:	19000044 	addi	r4,r3,1
    7ce0:	200b883a 	mov	r5,r4
    7ce4:	e13ffd17 	ldw	r4,-12(fp)
    7ce8:	21401705 	stb	r5,92(r4)
    7cec:	18c03fcc 	andi	r3,r3,255
    7cf0:	e13ffd17 	ldw	r4,-12(fp)
    7cf4:	20c7883a 	add	r3,r4,r3
    7cf8:	18c00704 	addi	r3,r3,28
    7cfc:	18c00003 	ldbu	r3,0(r3)
    7d00:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7d04:	e0bffe17 	ldw	r2,-8(fp)
    7d08:	10c00044 	addi	r3,r2,1
    7d0c:	e0fffe15 	stw	r3,-8(fp)
    7d10:	e0fffd17 	ldw	r3,-12(fp)
    7d14:	18c01703 	ldbu	r3,92(r3)
    7d18:	19000044 	addi	r4,r3,1
    7d1c:	200b883a 	mov	r5,r4
    7d20:	e13ffd17 	ldw	r4,-12(fp)
    7d24:	21401705 	stb	r5,92(r4)
    7d28:	18c03fcc 	andi	r3,r3,255
    7d2c:	e13ffd17 	ldw	r4,-12(fp)
    7d30:	20c7883a 	add	r3,r4,r3
    7d34:	18c00704 	addi	r3,r3,28
    7d38:	18c00003 	ldbu	r3,0(r3)
    7d3c:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    7d40:	e0bffb43 	ldbu	r2,-19(fp)
    7d44:	108003cc 	andi	r2,r2,15
    7d48:	100b883a 	mov	r5,r2
    7d4c:	e13ffd17 	ldw	r4,-12(fp)
    7d50:	0008db00 	call	8db0 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7d54:	e037883a 	mov	sp,fp
    7d58:	dfc00117 	ldw	ra,4(sp)
    7d5c:	df000017 	ldw	fp,0(sp)
    7d60:	dec00204 	addi	sp,sp,8
    7d64:	f800283a 	ret

00007d68 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    7d68:	defff804 	addi	sp,sp,-32
    7d6c:	dfc00715 	stw	ra,28(sp)
    7d70:	df000615 	stw	fp,24(sp)
    7d74:	df000604 	addi	fp,sp,24
    7d78:	e13ffd15 	stw	r4,-12(fp)
    7d7c:	e17ffe15 	stw	r5,-8(fp)
    7d80:	3005883a 	mov	r2,r6
    7d84:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    7d88:	e0bffe17 	ldw	r2,-8(fp)
    7d8c:	10800003 	ldbu	r2,0(r2)
    7d90:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    7d94:	e0bffb03 	ldbu	r2,-20(fp)
    7d98:	100b883a 	mov	r5,r2
    7d9c:	e13ffd17 	ldw	r4,-12(fp)
    7da0:	0008d580 	call	8d58 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7da4:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    7da8:	e0bffb03 	ldbu	r2,-20(fp)
    7dac:	10803c18 	cmpnei	r2,r2,240
    7db0:	10000b1e 	bne	r2,zero,7de0 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    7db4:	e17ffe17 	ldw	r5,-8(fp)
    7db8:	e13ffd17 	ldw	r4,-12(fp)
    7dbc:	0007f280 	call	7f28 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    7dc0:	10bfffcc 	andi	r2,r2,65535
    7dc4:	e0ffff03 	ldbu	r3,-4(fp)
    7dc8:	180f883a 	mov	r7,r3
    7dcc:	100d883a 	mov	r6,r2
    7dd0:	e17ffe17 	ldw	r5,-8(fp)
    7dd4:	e13ffd17 	ldw	r4,-12(fp)
    7dd8:	0007fb00 	call	7fb0 <_ZN9USBH_MIDI9SendSysExEPhth>
    7ddc:	00003406 	br	7eb0 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    7de0:	e0bfff03 	ldbu	r2,-4(fp)
    7de4:	1004913a 	slli	r2,r2,4
    7de8:	1007883a 	mov	r3,r2
    7dec:	e0bffb43 	ldbu	r2,-19(fp)
    7df0:	1884b03a 	or	r2,r3,r2
    7df4:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    7df8:	e0bffe17 	ldw	r2,-8(fp)
    7dfc:	10800003 	ldbu	r2,0(r2)
    7e00:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    7e04:	e0bffb43 	ldbu	r2,-19(fp)
    7e08:	100b883a 	mov	r5,r2
    7e0c:	e13ffd17 	ldw	r4,-12(fp)
    7e10:	0008db00 	call	8db0 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    7e14:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    7e18:	e0bffb83 	ldbu	r2,-18(fp)
    7e1c:	10c000a0 	cmpeqi	r3,r2,2
    7e20:	18000c1e 	bne	r3,zero,7e54 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    7e24:	10c000e0 	cmpeqi	r3,r2,3
    7e28:	1800031e 	bne	r3,zero,7e38 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    7e2c:	10800060 	cmpeqi	r2,r2,1
    7e30:	10000d1e 	bne	r2,zero,7e68 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    7e34:	00000f06 	br	7e74 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    7e38:	e0bffe17 	ldw	r2,-8(fp)
    7e3c:	10800043 	ldbu	r2,1(r2)
    7e40:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    7e44:	e0bffe17 	ldw	r2,-8(fp)
    7e48:	10800083 	ldbu	r2,2(r2)
    7e4c:	e0bffc85 	stb	r2,-14(fp)
                break;
    7e50:	00000806 	br	7e74 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    7e54:	e0bffe17 	ldw	r2,-8(fp)
    7e58:	10800043 	ldbu	r2,1(r2)
    7e5c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    7e60:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e64:	00000306 	br	7e74 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    7e68:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    7e6c:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e70:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    7e74:	e0bffd17 	ldw	r2,-12(fp)
    7e78:	10c00217 	ldw	r3,8(r2)
    7e7c:	e0bffd17 	ldw	r2,-12(fp)
    7e80:	10800303 	ldbu	r2,12(r2)
    7e84:	11003fcc 	andi	r4,r2,255
    7e88:	e0bffd17 	ldw	r2,-12(fp)
    7e8c:	10800643 	ldbu	r2,25(r2)
    7e90:	11403fcc 	andi	r5,r2,255
    7e94:	e0bffbc4 	addi	r2,fp,-17
    7e98:	d8800015 	stw	r2,0(sp)
    7e9c:	01c00104 	movi	r7,4
    7ea0:	280d883a 	mov	r6,r5
    7ea4:	200b883a 	mov	r5,r4
    7ea8:	1809883a 	mov	r4,r3
    7eac:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    7eb0:	e037883a 	mov	sp,fp
    7eb4:	dfc00117 	ldw	ra,4(sp)
    7eb8:	df000017 	ldw	fp,0(sp)
    7ebc:	dec00204 	addi	sp,sp,8
    7ec0:	f800283a 	ret

00007ec4 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    7ec4:	defffb04 	addi	sp,sp,-20
    7ec8:	dfc00415 	stw	ra,16(sp)
    7ecc:	df000315 	stw	fp,12(sp)
    7ed0:	df000304 	addi	fp,sp,12
    7ed4:	e13ffd15 	stw	r4,-12(fp)
    7ed8:	2807883a 	mov	r3,r5
    7edc:	3005883a 	mov	r2,r6
    7ee0:	e0fffe05 	stb	r3,-8(fp)
    7ee4:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    7ee8:	e0bfff03 	ldbu	r2,-4(fp)
    7eec:	1000051e 	bne	r2,zero,7f04 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    7ef0:	e0bffe03 	ldbu	r2,-8(fp)
    7ef4:	100b883a 	mov	r5,r2
    7ef8:	e13ffd17 	ldw	r4,-12(fp)
    7efc:	0008d580 	call	8d58 <_ZN9USBH_MIDI17convertStatus2CinEh>
    7f00:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    7f04:	e0bfff03 	ldbu	r2,-4(fp)
    7f08:	100b883a 	mov	r5,r2
    7f0c:	e13ffd17 	ldw	r4,-12(fp)
    7f10:	0008db00 	call	8db0 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7f14:	e037883a 	mov	sp,fp
    7f18:	dfc00117 	ldw	ra,4(sp)
    7f1c:	df000017 	ldw	fp,0(sp)
    7f20:	dec00204 	addi	sp,sp,8
    7f24:	f800283a 	ret

00007f28 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    7f28:	defffc04 	addi	sp,sp,-16
    7f2c:	df000315 	stw	fp,12(sp)
    7f30:	df000304 	addi	fp,sp,12
    7f34:	e13ffe15 	stw	r4,-8(fp)
    7f38:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    7f3c:	00800044 	movi	r2,1
    7f40:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    7f44:	e0bfff17 	ldw	r2,-4(fp)
    7f48:	10800003 	ldbu	r2,0(r2)
    7f4c:	10803fcc 	andi	r2,r2,255
    7f50:	10803c20 	cmpeqi	r2,r2,240
    7f54:	1000021e 	bne	r2,zero,7f60 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    7f58:	0005883a 	mov	r2,zero
    7f5c:	00001006 	br	7fa0 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    7f60:	e0bfff17 	ldw	r2,-4(fp)
    7f64:	10800003 	ldbu	r2,0(r2)
    7f68:	10803fcc 	andi	r2,r2,255
    7f6c:	10803de0 	cmpeqi	r2,r2,247
    7f70:	10000a1e 	bne	r2,zero,7f9c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    7f74:	e0bfff17 	ldw	r2,-4(fp)
    7f78:	10800044 	addi	r2,r2,1
    7f7c:	e0bfff15 	stw	r2,-4(fp)
                c++;
    7f80:	e0bffd0b 	ldhu	r2,-12(fp)
    7f84:	10800044 	addi	r2,r2,1
    7f88:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    7f8c:	e0bffd0b 	ldhu	r2,-12(fp)
    7f90:	10804070 	cmpltui	r2,r2,257
    7f94:	103ff21e 	bne	r2,zero,7f60 <__alt_data_end+0xfc007f60>
                        c = 0;
    7f98:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    7f9c:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7fa0:	e037883a 	mov	sp,fp
    7fa4:	df000017 	ldw	fp,0(sp)
    7fa8:	dec00104 	addi	sp,sp,4
    7fac:	f800283a 	ret

00007fb0 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    7fb0:	deffe704 	addi	sp,sp,-100
    7fb4:	dfc01815 	stw	ra,96(sp)
    7fb8:	df001715 	stw	fp,92(sp)
    7fbc:	df001704 	addi	fp,sp,92
    7fc0:	e13ffc15 	stw	r4,-16(fp)
    7fc4:	e17ffd15 	stw	r5,-12(fp)
    7fc8:	3007883a 	mov	r3,r6
    7fcc:	3805883a 	mov	r2,r7
    7fd0:	e0fffe0d 	sth	r3,-8(fp)
    7fd4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    7fd8:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    7fdc:	e0bffe0b 	ldhu	r2,-8(fp)
    7fe0:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    7fe4:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    7fe8:	e0bffc17 	ldw	r2,-16(fp)
    7fec:	108005c3 	ldbu	r2,23(r2)
    7ff0:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    7ff4:	e0bffe0b 	ldhu	r2,-8(fp)
    7ff8:	01402004 	movi	r5,128
    7ffc:	1009883a 	mov	r4,r2
    8000:	0008e480 	call	8e48 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    8004:	e0bfea8b 	ldhu	r2,-86(fp)
    8008:	1000b026 	beq	r2,zero,82cc <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    800c:	e0bfeb03 	ldbu	r2,-84(fp)
    8010:	e0ffff03 	ldbu	r3,-4(fp)
    8014:	1806913a 	slli	r3,r3,4
    8018:	18c00114 	ori	r3,r3,4
    801c:	1809883a 	mov	r4,r3
    8020:	e0ffeb84 	addi	r3,fp,-82
    8024:	1885883a 	add	r2,r3,r2
    8028:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    802c:	e0bfea8b 	ldhu	r2,-86(fp)
    8030:	10c000a0 	cmpeqi	r3,r2,2
    8034:	18002a1e 	bne	r3,zero,80e0 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    8038:	10c000e0 	cmpeqi	r3,r2,3
    803c:	1800521e 	bne	r3,zero,8188 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    8040:	10800060 	cmpeqi	r2,r2,1
    8044:	10005826 	beq	r2,zero,81a8 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    8048:	e0bfeb03 	ldbu	r2,-84(fp)
    804c:	10c00044 	addi	r3,r2,1
    8050:	e0ffeb05 	stb	r3,-84(fp)
    8054:	10803fcc 	andi	r2,r2,255
    8058:	e0ffff03 	ldbu	r3,-4(fp)
    805c:	1806913a 	slli	r3,r3,4
    8060:	18c00154 	ori	r3,r3,5
    8064:	1809883a 	mov	r4,r3
    8068:	e0ffeb84 	addi	r3,fp,-82
    806c:	1885883a 	add	r2,r3,r2
    8070:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8074:	e0bfeb03 	ldbu	r2,-84(fp)
    8078:	10c00044 	addi	r3,r2,1
    807c:	e0ffeb05 	stb	r3,-84(fp)
    8080:	11003fcc 	andi	r4,r2,255
    8084:	e0bffd17 	ldw	r2,-12(fp)
    8088:	10c00044 	addi	r3,r2,1
    808c:	e0fffd15 	stw	r3,-12(fp)
    8090:	10c00003 	ldbu	r3,0(r2)
    8094:	e0bfeb84 	addi	r2,fp,-82
    8098:	1105883a 	add	r2,r2,r4
    809c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    80a0:	e0bfeb03 	ldbu	r2,-84(fp)
    80a4:	10c00044 	addi	r3,r2,1
    80a8:	e0ffeb05 	stb	r3,-84(fp)
    80ac:	10803fcc 	andi	r2,r2,255
    80b0:	e0ffeb84 	addi	r3,fp,-82
    80b4:	1885883a 	add	r2,r3,r2
    80b8:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    80bc:	e0bfeb03 	ldbu	r2,-84(fp)
    80c0:	10c00044 	addi	r3,r2,1
    80c4:	e0ffeb05 	stb	r3,-84(fp)
    80c8:	10803fcc 	andi	r2,r2,255
    80cc:	e0ffeb84 	addi	r3,fp,-82
    80d0:	1885883a 	add	r2,r3,r2
    80d4:	10000005 	stb	zero,0(r2)
                        n = 0;
    80d8:	e03fea8d 	sth	zero,-86(fp)
                        break;
    80dc:	00005a06 	br	8248 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    80e0:	e0bfeb03 	ldbu	r2,-84(fp)
    80e4:	10c00044 	addi	r3,r2,1
    80e8:	e0ffeb05 	stb	r3,-84(fp)
    80ec:	10803fcc 	andi	r2,r2,255
    80f0:	e0ffff03 	ldbu	r3,-4(fp)
    80f4:	1806913a 	slli	r3,r3,4
    80f8:	18c00194 	ori	r3,r3,6
    80fc:	1809883a 	mov	r4,r3
    8100:	e0ffeb84 	addi	r3,fp,-82
    8104:	1885883a 	add	r2,r3,r2
    8108:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    810c:	e0bfeb03 	ldbu	r2,-84(fp)
    8110:	10c00044 	addi	r3,r2,1
    8114:	e0ffeb05 	stb	r3,-84(fp)
    8118:	11003fcc 	andi	r4,r2,255
    811c:	e0bffd17 	ldw	r2,-12(fp)
    8120:	10c00044 	addi	r3,r2,1
    8124:	e0fffd15 	stw	r3,-12(fp)
    8128:	10c00003 	ldbu	r3,0(r2)
    812c:	e0bfeb84 	addi	r2,fp,-82
    8130:	1105883a 	add	r2,r2,r4
    8134:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8138:	e0bfeb03 	ldbu	r2,-84(fp)
    813c:	10c00044 	addi	r3,r2,1
    8140:	e0ffeb05 	stb	r3,-84(fp)
    8144:	11003fcc 	andi	r4,r2,255
    8148:	e0bffd17 	ldw	r2,-12(fp)
    814c:	10c00044 	addi	r3,r2,1
    8150:	e0fffd15 	stw	r3,-12(fp)
    8154:	10c00003 	ldbu	r3,0(r2)
    8158:	e0bfeb84 	addi	r2,fp,-82
    815c:	1105883a 	add	r2,r2,r4
    8160:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8164:	e0bfeb03 	ldbu	r2,-84(fp)
    8168:	10c00044 	addi	r3,r2,1
    816c:	e0ffeb05 	stb	r3,-84(fp)
    8170:	10803fcc 	andi	r2,r2,255
    8174:	e0ffeb84 	addi	r3,fp,-82
    8178:	1885883a 	add	r2,r3,r2
    817c:	10000005 	stb	zero,0(r2)
                        n = 0;
    8180:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8184:	00003006 	br	8248 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    8188:	e0bfeb03 	ldbu	r2,-84(fp)
    818c:	e0ffff03 	ldbu	r3,-4(fp)
    8190:	1806913a 	slli	r3,r3,4
    8194:	18c001d4 	ori	r3,r3,7
    8198:	1809883a 	mov	r4,r3
    819c:	e0ffeb84 	addi	r3,fp,-82
    81a0:	1885883a 	add	r2,r3,r2
    81a4:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    81a8:	e0bfeb03 	ldbu	r2,-84(fp)
    81ac:	10800044 	addi	r2,r2,1
    81b0:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    81b4:	e0bfeb03 	ldbu	r2,-84(fp)
    81b8:	10c00044 	addi	r3,r2,1
    81bc:	e0ffeb05 	stb	r3,-84(fp)
    81c0:	11003fcc 	andi	r4,r2,255
    81c4:	e0bffd17 	ldw	r2,-12(fp)
    81c8:	10c00044 	addi	r3,r2,1
    81cc:	e0fffd15 	stw	r3,-12(fp)
    81d0:	10c00003 	ldbu	r3,0(r2)
    81d4:	e0bfeb84 	addi	r2,fp,-82
    81d8:	1105883a 	add	r2,r2,r4
    81dc:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    81e0:	e0bfeb03 	ldbu	r2,-84(fp)
    81e4:	10c00044 	addi	r3,r2,1
    81e8:	e0ffeb05 	stb	r3,-84(fp)
    81ec:	11003fcc 	andi	r4,r2,255
    81f0:	e0bffd17 	ldw	r2,-12(fp)
    81f4:	10c00044 	addi	r3,r2,1
    81f8:	e0fffd15 	stw	r3,-12(fp)
    81fc:	10c00003 	ldbu	r3,0(r2)
    8200:	e0bfeb84 	addi	r2,fp,-82
    8204:	1105883a 	add	r2,r2,r4
    8208:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    820c:	e0bfeb03 	ldbu	r2,-84(fp)
    8210:	10c00044 	addi	r3,r2,1
    8214:	e0ffeb05 	stb	r3,-84(fp)
    8218:	11003fcc 	andi	r4,r2,255
    821c:	e0bffd17 	ldw	r2,-12(fp)
    8220:	10c00044 	addi	r3,r2,1
    8224:	e0fffd15 	stw	r3,-12(fp)
    8228:	10c00003 	ldbu	r3,0(r2)
    822c:	e0bfeb84 	addi	r2,fp,-82
    8230:	1105883a 	add	r2,r2,r4
    8234:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    8238:	e0bfea8b 	ldhu	r2,-86(fp)
    823c:	10bfff44 	addi	r2,r2,-3
    8240:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    8244:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    8248:	e0ffeb03 	ldbu	r3,-84(fp)
    824c:	e0bfeb43 	ldbu	r2,-83(fp)
    8250:	1880022e 	bgeu	r3,r2,825c <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8254:	e0bfea8b 	ldhu	r2,-86(fp)
    8258:	103f6a1e 	bne	r2,zero,8004 <__alt_data_end+0xfc008004>
                        USBTRACE2(" wptr:\t", wptr);
    825c:	e0bfeb03 	ldbu	r2,-84(fp)
    8260:	01402004 	movi	r5,128
    8264:	1009883a 	mov	r4,r2
    8268:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    826c:	e0bffc17 	ldw	r2,-16(fp)
    8270:	10c00217 	ldw	r3,8(r2)
    8274:	e0bffc17 	ldw	r2,-16(fp)
    8278:	10800303 	ldbu	r2,12(r2)
    827c:	11003fcc 	andi	r4,r2,255
    8280:	e0bffc17 	ldw	r2,-16(fp)
    8284:	10800643 	ldbu	r2,25(r2)
    8288:	11403fcc 	andi	r5,r2,255
    828c:	e1bfeb03 	ldbu	r6,-84(fp)
    8290:	e0bfeb84 	addi	r2,fp,-82
    8294:	d8800015 	stw	r2,0(sp)
    8298:	300f883a 	mov	r7,r6
    829c:	280d883a 	mov	r6,r5
    82a0:	200b883a 	mov	r5,r4
    82a4:	1809883a 	mov	r4,r3
    82a8:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    82ac:	e0bfea05 	stb	r2,-88(fp)
    82b0:	e0bfea03 	ldbu	r2,-88(fp)
    82b4:	1004c03a 	cmpne	r2,r2,zero
    82b8:	10803fcc 	andi	r2,r2,255
    82bc:	1000021e 	bne	r2,zero,82c8 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    82c0:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    82c4:	003f4f06 	br	8004 <__alt_data_end+0xfc008004>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    82c8:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    82cc:	e0bfea03 	ldbu	r2,-88(fp)
}
    82d0:	e037883a 	mov	sp,fp
    82d4:	dfc00117 	ldw	ra,4(sp)
    82d8:	df000017 	ldw	fp,0(sp)
    82dc:	dec00204 	addi	sp,sp,8
    82e0:	f800283a 	ret

000082e4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    82e4:	defffb04 	addi	sp,sp,-20
    82e8:	df000415 	stw	fp,16(sp)
    82ec:	df000404 	addi	fp,sp,16
    82f0:	e13ffd15 	stw	r4,-12(fp)
    82f4:	e17ffe15 	stw	r5,-8(fp)
    82f8:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    82fc:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    8300:	e0bffe17 	ldw	r2,-8(fp)
    8304:	10800003 	ldbu	r2,0(r2)
    8308:	108003cc 	andi	r2,r2,15
    830c:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    8310:	e0bffc43 	ldbu	r2,-15(fp)
    8314:	1080030c 	andi	r2,r2,12
    8318:	10800120 	cmpeqi	r2,r2,4
    831c:	1000021e 	bne	r2,zero,8328 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8320:	e0bffc03 	ldbu	r2,-16(fp)
    8324:	00003b06 	br	8414 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    8328:	e0bffc43 	ldbu	r2,-15(fp)
    832c:	10c00160 	cmpeqi	r3,r2,5
    8330:	18002e1e 	bne	r3,zero,83ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    8334:	10c00188 	cmpgei	r3,r2,6
    8338:	1800031e 	bne	r3,zero,8348 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    833c:	10800120 	cmpeqi	r2,r2,4
    8340:	1000061e 	bne	r2,zero,835c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8344:	00003206 	br	8410 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    8348:	10c001a0 	cmpeqi	r3,r2,6
    834c:	1800181e 	bne	r3,zero,83b0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8350:	108001e0 	cmpeqi	r2,r2,7
    8354:	1000011e 	bne	r2,zero,835c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8358:	00002d06 	br	8410 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    835c:	e0bfff17 	ldw	r2,-4(fp)
    8360:	10c00044 	addi	r3,r2,1
    8364:	e0ffff15 	stw	r3,-4(fp)
    8368:	e0fffe17 	ldw	r3,-8(fp)
    836c:	18c00043 	ldbu	r3,1(r3)
    8370:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8374:	e0bfff17 	ldw	r2,-4(fp)
    8378:	10c00044 	addi	r3,r2,1
    837c:	e0ffff15 	stw	r3,-4(fp)
    8380:	e0fffe17 	ldw	r3,-8(fp)
    8384:	18c00083 	ldbu	r3,2(r3)
    8388:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    838c:	e0bfff17 	ldw	r2,-4(fp)
    8390:	10c00044 	addi	r3,r2,1
    8394:	e0ffff15 	stw	r3,-4(fp)
    8398:	e0fffe17 	ldw	r3,-8(fp)
    839c:	18c000c3 	ldbu	r3,3(r3)
    83a0:	10c00005 	stb	r3,0(r2)
                rc = 3;
    83a4:	008000c4 	movi	r2,3
    83a8:	e0bffc05 	stb	r2,-16(fp)
                break;
    83ac:	00001806 	br	8410 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    83b0:	e0bfff17 	ldw	r2,-4(fp)
    83b4:	10c00044 	addi	r3,r2,1
    83b8:	e0ffff15 	stw	r3,-4(fp)
    83bc:	e0fffe17 	ldw	r3,-8(fp)
    83c0:	18c00043 	ldbu	r3,1(r3)
    83c4:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    83c8:	e0bfff17 	ldw	r2,-4(fp)
    83cc:	10c00044 	addi	r3,r2,1
    83d0:	e0ffff15 	stw	r3,-4(fp)
    83d4:	e0fffe17 	ldw	r3,-8(fp)
    83d8:	18c00083 	ldbu	r3,2(r3)
    83dc:	10c00005 	stb	r3,0(r2)
                rc = 2;
    83e0:	00800084 	movi	r2,2
    83e4:	e0bffc05 	stb	r2,-16(fp)
                break;
    83e8:	00000906 	br	8410 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    83ec:	e0bfff17 	ldw	r2,-4(fp)
    83f0:	10c00044 	addi	r3,r2,1
    83f4:	e0ffff15 	stw	r3,-4(fp)
    83f8:	e0fffe17 	ldw	r3,-8(fp)
    83fc:	18c00043 	ldbu	r3,1(r3)
    8400:	10c00005 	stb	r3,0(r2)
                rc = 1;
    8404:	00800044 	movi	r2,1
    8408:	e0bffc05 	stb	r2,-16(fp)
                break;
    840c:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    8410:	e0bffc03 	ldbu	r2,-16(fp)
}
    8414:	e037883a 	mov	sp,fp
    8418:	df000017 	ldw	fp,0(sp)
    841c:	dec00104 	addi	sp,sp,4
    8420:	f800283a 	ret

00008424 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    8424:	defffb04 	addi	sp,sp,-20
    8428:	dfc00415 	stw	ra,16(sp)
    842c:	df000315 	stw	fp,12(sp)
    8430:	df000304 	addi	fp,sp,12
    8434:	e13ffd15 	stw	r4,-12(fp)
    8438:	e17ffe15 	stw	r5,-8(fp)
    843c:	3005883a 	mov	r2,r6
    8440:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    8444:	e0bffd17 	ldw	r2,-12(fp)
    8448:	1009883a 	mov	r4,r2
    844c:	0004f440 	call	4f44 <_ZN13USBReadParserC1Ev>
    8450:	008000b4 	movhi	r2,2
    8454:	1093ee04 	addi	r2,r2,20408
    8458:	e0fffd17 	ldw	r3,-12(fp)
    845c:	18800015 	stw	r2,0(r3)
    8460:	e0bffd17 	ldw	r2,-12(fp)
    8464:	e0fffe17 	ldw	r3,-8(fp)
    8468:	10c00115 	stw	r3,4(r2)
    846c:	e0bffd17 	ldw	r2,-12(fp)
    8470:	10800204 	addi	r2,r2,8
    8474:	1009883a 	mov	r4,r2
    8478:	00048340 	call	4834 <_ZN16MultiValueBufferC1Ev>
    847c:	e0bffd17 	ldw	r2,-12(fp)
    8480:	10800404 	addi	r2,r2,16
    8484:	1009883a 	mov	r4,r2
    8488:	00048940 	call	4894 <_ZN20MultiByteValueParserC1Ev>
    848c:	e0bffd17 	ldw	r2,-12(fp)
    8490:	10800604 	addi	r2,r2,24
    8494:	1009883a 	mov	r4,r2
    8498:	00049500 	call	4950 <_ZN11ByteSkipperC1Ev>
    849c:	e0bffd17 	ldw	r2,-12(fp)
    84a0:	10000c05 	stb	zero,48(r2)
    84a4:	e0bffd17 	ldw	r2,-12(fp)
    84a8:	10000c45 	stb	zero,49(r2)
    84ac:	e0bffd17 	ldw	r2,-12(fp)
    84b0:	10000c85 	stb	zero,50(r2)
    84b4:	e0bffd17 	ldw	r2,-12(fp)
    84b8:	10000cc5 	stb	zero,51(r2)
    84bc:	e0bffd17 	ldw	r2,-12(fp)
    84c0:	e0ffff03 	ldbu	r3,-4(fp)
    84c4:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    84c8:	e0bffd17 	ldw	r2,-12(fp)
    84cc:	10c00804 	addi	r3,r2,32
    84d0:	e0bffd17 	ldw	r2,-12(fp)
    84d4:	19803fcc 	andi	r6,r3,255
    84d8:	11000243 	ldbu	r4,9(r2)
    84dc:	2008703a 	and	r4,r4,zero
    84e0:	200b883a 	mov	r5,r4
    84e4:	3009883a 	mov	r4,r6
    84e8:	2908b03a 	or	r4,r5,r4
    84ec:	11000245 	stb	r4,9(r2)
    84f0:	1808d23a 	srli	r4,r3,8
    84f4:	21803fcc 	andi	r6,r4,255
    84f8:	11000283 	ldbu	r4,10(r2)
    84fc:	2008703a 	and	r4,r4,zero
    8500:	200b883a 	mov	r5,r4
    8504:	3009883a 	mov	r4,r6
    8508:	2908b03a 	or	r4,r5,r4
    850c:	11000285 	stb	r4,10(r2)
    8510:	1808d43a 	srli	r4,r3,16
    8514:	21803fcc 	andi	r6,r4,255
    8518:	110002c3 	ldbu	r4,11(r2)
    851c:	2008703a 	and	r4,r4,zero
    8520:	200b883a 	mov	r5,r4
    8524:	3009883a 	mov	r4,r6
    8528:	2908b03a 	or	r4,r5,r4
    852c:	110002c5 	stb	r4,11(r2)
    8530:	180ad63a 	srli	r5,r3,24
    8534:	10c00303 	ldbu	r3,12(r2)
    8538:	1806703a 	and	r3,r3,zero
    853c:	1809883a 	mov	r4,r3
    8540:	2807883a 	mov	r3,r5
    8544:	20c6b03a 	or	r3,r4,r3
    8548:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    854c:	e0bffd17 	ldw	r2,-12(fp)
    8550:	10c00404 	addi	r3,r2,16
    8554:	e0bffd17 	ldw	r2,-12(fp)
    8558:	10800204 	addi	r2,r2,8
    855c:	100b883a 	mov	r5,r2
    8560:	1809883a 	mov	r4,r3
    8564:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    8568:	e0bffd17 	ldw	r2,-12(fp)
    856c:	10c00604 	addi	r3,r2,24
    8570:	e0bffd17 	ldw	r2,-12(fp)
    8574:	10800204 	addi	r2,r2,8
    8578:	100b883a 	mov	r5,r2
    857c:	1809883a 	mov	r4,r3
    8580:	000498c0 	call	498c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    8584:	0001883a 	nop
    8588:	e037883a 	mov	sp,fp
    858c:	dfc00117 	ldw	ra,4(sp)
    8590:	df000017 	ldw	fp,0(sp)
    8594:	dec00204 	addi	sp,sp,8
    8598:	f800283a 	ret

0000859c <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    859c:	defff804 	addi	sp,sp,-32
    85a0:	dfc00715 	stw	ra,28(sp)
    85a4:	df000615 	stw	fp,24(sp)
    85a8:	df000604 	addi	fp,sp,24
    85ac:	e13ffc15 	stw	r4,-16(fp)
    85b0:	2805883a 	mov	r2,r5
    85b4:	e1bffe15 	stw	r6,-8(fp)
    85b8:	e1ffff15 	stw	r7,-4(fp)
    85bc:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    85c0:	e0bffd0b 	ldhu	r2,-12(fp)
    85c4:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    85c8:	e0bffe17 	ldw	r2,-8(fp)
    85cc:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    85d0:	e0bffa0b 	ldhu	r2,-24(fp)
    85d4:	10bfffcc 	andi	r2,r2,65535
    85d8:	10000a26 	beq	r2,zero,8604 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    85dc:	e0bffb04 	addi	r2,fp,-20
    85e0:	e1bffa04 	addi	r6,fp,-24
    85e4:	100b883a 	mov	r5,r2
    85e8:	e13ffc17 	ldw	r4,-16(fp)
    85ec:	00086180 	call	8618 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    85f0:	1080005c 	xori	r2,r2,1
    85f4:	10803fcc 	andi	r2,r2,255
    85f8:	1000011e 	bne	r2,zero,8600 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    85fc:	003ff406 	br	85d0 <__alt_data_end+0xfc0085d0>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    8600:	0001883a 	nop
}
    8604:	e037883a 	mov	sp,fp
    8608:	dfc00117 	ldw	ra,4(sp)
    860c:	df000017 	ldw	fp,0(sp)
    8610:	dec00204 	addi	sp,sp,8
    8614:	f800283a 	ret

00008618 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    8618:	defff604 	addi	sp,sp,-40
    861c:	dfc00915 	stw	ra,36(sp)
    8620:	df000815 	stw	fp,32(sp)
    8624:	df000804 	addi	fp,sp,32
    8628:	e13ffc15 	stw	r4,-16(fp)
    862c:	e17ffd15 	stw	r5,-12(fp)
    8630:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8634:	e0bffc17 	ldw	r2,-16(fp)
    8638:	10800804 	addi	r2,r2,32
    863c:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8640:	e0bffc17 	ldw	r2,-16(fp)
    8644:	10800804 	addi	r2,r2,32
    8648:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    864c:	e0bffc17 	ldw	r2,-16(fp)
    8650:	10800c03 	ldbu	r2,48(r2)
    8654:	10803fcc 	andi	r2,r2,255
    8658:	10c00168 	cmpgeui	r3,r2,5
    865c:	1801411e 	bne	r3,zero,8b64 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8660:	100690ba 	slli	r3,r2,2
    8664:	00800074 	movhi	r2,1
    8668:	10a19e04 	addi	r2,r2,-31112
    866c:	1885883a 	add	r2,r3,r2
    8670:	10800017 	ldw	r2,0(r2)
    8674:	1000683a 	jmp	r2
    8678:	0000868c 	andi	zero,zero,538
    867c:	000086c0 	call	86c <_ZN3USB14getEpInfoEntryEhh+0x8c>
    8680:	00008748 	cmpgei	zero,zero,541
    8684:	000087dc 	xori	zero,zero,543
    8688:	00008848 	cmpgei	zero,zero,545
                case 0:
                        theBuffer.valueSize = 2;
    868c:	e0bffc17 	ldw	r2,-16(fp)
    8690:	00c00084 	movi	r3,2
    8694:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8698:	e0bffc17 	ldw	r2,-16(fp)
    869c:	10c00404 	addi	r3,r2,16
    86a0:	e0bffc17 	ldw	r2,-16(fp)
    86a4:	10800204 	addi	r2,r2,8
    86a8:	100b883a 	mov	r5,r2
    86ac:	1809883a 	mov	r4,r3
    86b0:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    86b4:	e0bffc17 	ldw	r2,-16(fp)
    86b8:	00c00044 	movi	r3,1
    86bc:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    86c0:	e0bffc17 	ldw	r2,-16(fp)
    86c4:	10800404 	addi	r2,r2,16
    86c8:	e1bffe17 	ldw	r6,-8(fp)
    86cc:	e17ffd17 	ldw	r5,-12(fp)
    86d0:	1009883a 	mov	r4,r2
    86d4:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    86d8:	1080005c 	xori	r2,r2,1
    86dc:	10803fcc 	andi	r2,r2,255
    86e0:	10000226 	beq	r2,zero,86ec <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    86e4:	0005883a 	mov	r2,zero
    86e8:	00011f06 	br	8b68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    86ec:	e0bffc17 	ldw	r2,-16(fp)
    86f0:	10c00217 	ldw	r3,8(r2)
    86f4:	1806d23a 	srli	r3,r3,8
    86f8:	10800317 	ldw	r2,12(r2)
    86fc:	10803fcc 	andi	r2,r2,255
    8700:	1004963a 	slli	r2,r2,24
    8704:	10c4b03a 	or	r2,r2,r3
    8708:	10c00003 	ldbu	r3,0(r2)
    870c:	e0bffc17 	ldw	r2,-16(fp)
    8710:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    8714:	e0bffc17 	ldw	r2,-16(fp)
    8718:	10c00217 	ldw	r3,8(r2)
    871c:	1806d23a 	srli	r3,r3,8
    8720:	10800317 	ldw	r2,12(r2)
    8724:	10803fcc 	andi	r2,r2,255
    8728:	1004963a 	slli	r2,r2,24
    872c:	10c4b03a 	or	r2,r2,r3
    8730:	10c00043 	ldbu	r3,1(r2)
    8734:	e0bffc17 	ldw	r2,-16(fp)
    8738:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    873c:	e0bffc17 	ldw	r2,-16(fp)
    8740:	00c00084 	movi	r3,2
    8744:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8748:	e0bffc17 	ldw	r2,-16(fp)
    874c:	10800804 	addi	r2,r2,32
    8750:	10c00084 	addi	r3,r2,2
    8754:	e0bffc17 	ldw	r2,-16(fp)
    8758:	19803fcc 	andi	r6,r3,255
    875c:	11000243 	ldbu	r4,9(r2)
    8760:	2008703a 	and	r4,r4,zero
    8764:	200b883a 	mov	r5,r4
    8768:	3009883a 	mov	r4,r6
    876c:	2908b03a 	or	r4,r5,r4
    8770:	11000245 	stb	r4,9(r2)
    8774:	1808d23a 	srli	r4,r3,8
    8778:	21803fcc 	andi	r6,r4,255
    877c:	11000283 	ldbu	r4,10(r2)
    8780:	2008703a 	and	r4,r4,zero
    8784:	200b883a 	mov	r5,r4
    8788:	3009883a 	mov	r4,r6
    878c:	2908b03a 	or	r4,r5,r4
    8790:	11000285 	stb	r4,10(r2)
    8794:	1808d43a 	srli	r4,r3,16
    8798:	21803fcc 	andi	r6,r4,255
    879c:	110002c3 	ldbu	r4,11(r2)
    87a0:	2008703a 	and	r4,r4,zero
    87a4:	200b883a 	mov	r5,r4
    87a8:	3009883a 	mov	r4,r6
    87ac:	2908b03a 	or	r4,r5,r4
    87b0:	110002c5 	stb	r4,11(r2)
    87b4:	180ad63a 	srli	r5,r3,24
    87b8:	10c00303 	ldbu	r3,12(r2)
    87bc:	1806703a 	and	r3,r3,zero
    87c0:	1809883a 	mov	r4,r3
    87c4:	2807883a 	mov	r3,r5
    87c8:	20c6b03a 	or	r3,r4,r3
    87cc:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    87d0:	e0bffc17 	ldw	r2,-16(fp)
    87d4:	00c000c4 	movi	r3,3
    87d8:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    87dc:	e0bffc17 	ldw	r2,-16(fp)
    87e0:	10800c83 	ldbu	r2,50(r2)
    87e4:	10803fcc 	andi	r2,r2,255
    87e8:	10c00120 	cmpeqi	r3,r2,4
    87ec:	1800021e 	bne	r3,zero,87f8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    87f0:	10800148 	cmpgei	r2,r2,5
    87f4:	00000306 	br	8804 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    87f8:	e0bffc17 	ldw	r2,-16(fp)
    87fc:	10000d45 	stb	zero,53(r2)
                                        break;
    8800:	00000106 	br	8808 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    8804:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    8808:	e0bffc17 	ldw	r2,-16(fp)
    880c:	10800c43 	ldbu	r2,49(r2)
    8810:	10bfff84 	addi	r2,r2,-2
    8814:	1007883a 	mov	r3,r2
    8818:	e0bffc17 	ldw	r2,-16(fp)
    881c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8820:	e0bffc17 	ldw	r2,-16(fp)
    8824:	10c00404 	addi	r3,r2,16
    8828:	e0bffc17 	ldw	r2,-16(fp)
    882c:	10800204 	addi	r2,r2,8
    8830:	100b883a 	mov	r5,r2
    8834:	1809883a 	mov	r4,r3
    8838:	00048d00 	call	48d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    883c:	e0bffc17 	ldw	r2,-16(fp)
    8840:	00c00104 	movi	r3,4
    8844:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8848:	e0bffc17 	ldw	r2,-16(fp)
    884c:	10800c83 	ldbu	r2,50(r2)
    8850:	10803fcc 	andi	r2,r2,255
    8854:	10c00120 	cmpeqi	r3,r2,4
    8858:	1800141e 	bne	r3,zero,88ac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    885c:	10c00160 	cmpeqi	r3,r2,5
    8860:	18005a1e 	bne	r3,zero,89cc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8864:	108000a0 	cmpeqi	r2,r2,2
    8868:	10008526 	beq	r2,zero,8a80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    886c:	e0bffc17 	ldw	r2,-16(fp)
    8870:	10800404 	addi	r2,r2,16
    8874:	e1bffe17 	ldw	r6,-8(fp)
    8878:	e17ffd17 	ldw	r5,-12(fp)
    887c:	1009883a 	mov	r4,r2
    8880:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    8884:	1080005c 	xori	r2,r2,1
    8888:	10803fcc 	andi	r2,r2,255
    888c:	10000226 	beq	r2,zero,8898 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8890:	0005883a 	mov	r2,zero
    8894:	0000b406 	br	8b68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8898:	e0bffa17 	ldw	r2,-24(fp)
    889c:	10c00143 	ldbu	r3,5(r2)
    88a0:	e0bffc17 	ldw	r2,-16(fp)
    88a4:	10c00d85 	stb	r3,54(r2)
                                        break;
    88a8:	00008b06 	br	8ad8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    88ac:	e0bffc17 	ldw	r2,-16(fp)
    88b0:	10800404 	addi	r2,r2,16
    88b4:	e1bffe17 	ldw	r6,-8(fp)
    88b8:	e17ffd17 	ldw	r5,-12(fp)
    88bc:	1009883a 	mov	r4,r2
    88c0:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    88c4:	1080005c 	xori	r2,r2,1
    88c8:	10803fcc 	andi	r2,r2,255
    88cc:	10000226 	beq	r2,zero,88d8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    88d0:	0005883a 	mov	r2,zero
    88d4:	0000a406 	br	8b68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    88d8:	e0bffb17 	ldw	r2,-20(fp)
    88dc:	10800083 	ldbu	r2,2(r2)
    88e0:	10803fcc 	andi	r2,r2,255
    88e4:	01402004 	movi	r5,128
    88e8:	1009883a 	mov	r4,r2
    88ec:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    88f0:	e0bffb17 	ldw	r2,-20(fp)
    88f4:	108000c3 	ldbu	r2,3(r2)
    88f8:	10803fcc 	andi	r2,r2,255
    88fc:	01402004 	movi	r5,128
    8900:	1009883a 	mov	r4,r2
    8904:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    8908:	e0bffb17 	ldw	r2,-20(fp)
    890c:	10800103 	ldbu	r2,4(r2)
    8910:	10803fcc 	andi	r2,r2,255
    8914:	01402004 	movi	r5,128
    8918:	1009883a 	mov	r4,r2
    891c:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8920:	e0bffb17 	ldw	r2,-20(fp)
    8924:	10800143 	ldbu	r2,5(r2)
    8928:	10803fcc 	andi	r2,r2,255
    892c:	01402004 	movi	r5,128
    8930:	1009883a 	mov	r4,r2
    8934:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8938:	e0bffb17 	ldw	r2,-20(fp)
    893c:	10800183 	ldbu	r2,6(r2)
    8940:	10803fcc 	andi	r2,r2,255
    8944:	01402004 	movi	r5,128
    8948:	1009883a 	mov	r4,r2
    894c:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8950:	e0bffb17 	ldw	r2,-20(fp)
    8954:	108001c3 	ldbu	r2,7(r2)
    8958:	10803fcc 	andi	r2,r2,255
    895c:	01402004 	movi	r5,128
    8960:	1009883a 	mov	r4,r2
    8964:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8968:	e0bffc17 	ldw	r2,-16(fp)
    896c:	10800d03 	ldbu	r2,52(r2)
    8970:	10803fcc 	andi	r2,r2,255
    8974:	10000a26 	beq	r2,zero,89a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8978:	e0bffb17 	ldw	r2,-20(fp)
    897c:	10800143 	ldbu	r2,5(r2)
    8980:	10803fcc 	andi	r2,r2,255
    8984:	10800058 	cmpnei	r2,r2,1
    8988:	10004e1e 	bne	r2,zero,8ac4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    898c:	e0bffb17 	ldw	r2,-20(fp)
    8990:	10800183 	ldbu	r2,6(r2)
    8994:	10803fcc 	andi	r2,r2,255
    8998:	108000d8 	cmpnei	r2,r2,3
    899c:	1000491e 	bne	r2,zero,8ac4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    89a0:	e0bffc17 	ldw	r2,-16(fp)
    89a4:	00c00044 	movi	r3,1
    89a8:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    89ac:	e0bffc17 	ldw	r2,-16(fp)
    89b0:	10800cc3 	ldbu	r2,51(r2)
    89b4:	10803fcc 	andi	r2,r2,255
    89b8:	108000a8 	cmpgeui	r2,r2,2
    89bc:	1000431e 	bne	r2,zero,8acc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    89c0:	e0bffc17 	ldw	r2,-16(fp)
    89c4:	10000cc5 	stb	zero,51(r2)
                                        break;
    89c8:	00004006 	br	8acc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    89cc:	e0bffc17 	ldw	r2,-16(fp)
    89d0:	10800404 	addi	r2,r2,16
    89d4:	e1bffe17 	ldw	r6,-8(fp)
    89d8:	e17ffd17 	ldw	r5,-12(fp)
    89dc:	1009883a 	mov	r4,r2
    89e0:	00062fc0 	call	62fc <_ZN20MultiByteValueParser5ParseEPPhPt>
    89e4:	1080005c 	xori	r2,r2,1
    89e8:	10803fcc 	andi	r2,r2,255
    89ec:	10000226 	beq	r2,zero,89f8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    89f0:	0005883a 	mov	r2,zero
    89f4:	00005c06 	br	8b68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    89f8:	e0bffc17 	ldw	r2,-16(fp)
    89fc:	10800d43 	ldbu	r2,53(r2)
    8a00:	10803fcc 	andi	r2,r2,255
    8a04:	10003326 	beq	r2,zero,8ad4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    8a08:	e0bffc17 	ldw	r2,-16(fp)
    8a0c:	10800cc3 	ldbu	r2,51(r2)
    8a10:	10803fcc 	andi	r2,r2,255
    8a14:	108000a8 	cmpgeui	r2,r2,2
    8a18:	10002e1e 	bne	r2,zero,8ad4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8a1c:	e0bffc17 	ldw	r2,-16(fp)
    8a20:	10800117 	ldw	r2,4(r2)
    8a24:	10800017 	ldw	r2,0(r2)
    8a28:	10800017 	ldw	r2,0(r2)
    8a2c:	e0fffc17 	ldw	r3,-16(fp)
    8a30:	19000117 	ldw	r4,4(r3)
    8a34:	e0fffc17 	ldw	r3,-16(fp)
    8a38:	18c00d83 	ldbu	r3,54(r3)
    8a3c:	19403fcc 	andi	r5,r3,255
    8a40:	e0fffc17 	ldw	r3,-16(fp)
    8a44:	18c00804 	addi	r3,r3,32
    8a48:	d8c00115 	stw	r3,4(sp)
    8a4c:	d8000015 	stw	zero,0(sp)
    8a50:	000f883a 	mov	r7,zero
    8a54:	000d883a 	mov	r6,zero
    8a58:	103ee83a 	callr	r2
    8a5c:	10803fcc 	andi	r2,r2,255
    8a60:	10001c26 	beq	r2,zero,8ad4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8a64:	e0bffc17 	ldw	r2,-16(fp)
    8a68:	10800cc3 	ldbu	r2,51(r2)
    8a6c:	10800044 	addi	r2,r2,1
    8a70:	1007883a 	mov	r3,r2
    8a74:	e0bffc17 	ldw	r2,-16(fp)
    8a78:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8a7c:	00001506 	br	8ad4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8a80:	e0bffc17 	ldw	r2,-16(fp)
    8a84:	10c00604 	addi	r3,r2,24
    8a88:	e0bffc17 	ldw	r2,-16(fp)
    8a8c:	10800c43 	ldbu	r2,49(r2)
    8a90:	10803fcc 	andi	r2,r2,255
    8a94:	10bfff84 	addi	r2,r2,-2
    8a98:	10bfffcc 	andi	r2,r2,65535
    8a9c:	100f883a 	mov	r7,r2
    8aa0:	e1bffe17 	ldw	r6,-8(fp)
    8aa4:	e17ffd17 	ldw	r5,-12(fp)
    8aa8:	1809883a 	mov	r4,r3
    8aac:	00049f40 	call	49f4 <_ZN11ByteSkipper4SkipEPPhPtt>
    8ab0:	1080005c 	xori	r2,r2,1
    8ab4:	10803fcc 	andi	r2,r2,255
    8ab8:	10000726 	beq	r2,zero,8ad8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8abc:	0005883a 	mov	r2,zero
    8ac0:	00002906 	br	8b68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8ac4:	0001883a 	nop
    8ac8:	00000306 	br	8ad8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8acc:	0001883a 	nop
    8ad0:	00000106 	br	8ad8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8ad4:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8ad8:	e0bffc17 	ldw	r2,-16(fp)
    8adc:	10c00804 	addi	r3,r2,32
    8ae0:	e0bffc17 	ldw	r2,-16(fp)
    8ae4:	19803fcc 	andi	r6,r3,255
    8ae8:	11000243 	ldbu	r4,9(r2)
    8aec:	2008703a 	and	r4,r4,zero
    8af0:	200b883a 	mov	r5,r4
    8af4:	3009883a 	mov	r4,r6
    8af8:	2908b03a 	or	r4,r5,r4
    8afc:	11000245 	stb	r4,9(r2)
    8b00:	1808d23a 	srli	r4,r3,8
    8b04:	21803fcc 	andi	r6,r4,255
    8b08:	11000283 	ldbu	r4,10(r2)
    8b0c:	2008703a 	and	r4,r4,zero
    8b10:	200b883a 	mov	r5,r4
    8b14:	3009883a 	mov	r4,r6
    8b18:	2908b03a 	or	r4,r5,r4
    8b1c:	11000285 	stb	r4,10(r2)
    8b20:	1808d43a 	srli	r4,r3,16
    8b24:	21803fcc 	andi	r6,r4,255
    8b28:	110002c3 	ldbu	r4,11(r2)
    8b2c:	2008703a 	and	r4,r4,zero
    8b30:	200b883a 	mov	r5,r4
    8b34:	3009883a 	mov	r4,r6
    8b38:	2908b03a 	or	r4,r5,r4
    8b3c:	110002c5 	stb	r4,11(r2)
    8b40:	180ad63a 	srli	r5,r3,24
    8b44:	10c00303 	ldbu	r3,12(r2)
    8b48:	1806703a 	and	r3,r3,zero
    8b4c:	1809883a 	mov	r4,r3
    8b50:	2807883a 	mov	r3,r5
    8b54:	20c6b03a 	or	r3,r4,r3
    8b58:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8b5c:	e0bffc17 	ldw	r2,-16(fp)
    8b60:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8b64:	00800044 	movi	r2,1
}
    8b68:	e037883a 	mov	sp,fp
    8b6c:	dfc00117 	ldw	ra,4(sp)
    8b70:	df000017 	ldw	fp,0(sp)
    8b74:	dec00204 	addi	sp,sp,8
    8b78:	f800283a 	ret

00008b7c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8b7c:	defff904 	addi	sp,sp,-28
    8b80:	df000615 	stw	fp,24(sp)
    8b84:	df000604 	addi	fp,sp,24
    8b88:	e13ffb15 	stw	r4,-20(fp)
    8b8c:	3009883a 	mov	r4,r6
    8b90:	3807883a 	mov	r3,r7
    8b94:	e0800117 	ldw	r2,4(fp)
    8b98:	e17ffc05 	stb	r5,-16(fp)
    8b9c:	e13ffd05 	stb	r4,-12(fp)
    8ba0:	e0fffe05 	stb	r3,-8(fp)
    8ba4:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8ba8:	e0800217 	ldw	r2,8(fp)
    8bac:	10c000c3 	ldbu	r3,3(r2)
    8bb0:	e0bffb17 	ldw	r2,-20(fp)
    8bb4:	10800483 	ldbu	r2,18(r2)
    8bb8:	1884703a 	and	r2,r3,r2
    8bbc:	10803fcc 	andi	r2,r2,255
    8bc0:	10800098 	cmpnei	r2,r2,2
    8bc4:	10001f1e 	bne	r2,zero,8c44 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8bc8:	e0800217 	ldw	r2,8(fp)
    8bcc:	10800083 	ldbu	r2,2(r2)
    8bd0:	10803fcc 	andi	r2,r2,255
    8bd4:	1080201c 	xori	r2,r2,128
    8bd8:	10bfe004 	addi	r2,r2,-128
    8bdc:	1000020e 	bge	r2,zero,8be8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8be0:	00800044 	movi	r2,1
    8be4:	00000106 	br	8bec <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8be8:	00800084 	movi	r2,2
    8bec:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8bf0:	e0fffa03 	ldbu	r3,-24(fp)
    8bf4:	e0800217 	ldw	r2,8(fp)
    8bf8:	10800083 	ldbu	r2,2(r2)
    8bfc:	108003cc 	andi	r2,r2,15
    8c00:	100b883a 	mov	r5,r2
    8c04:	e13ffb17 	ldw	r4,-20(fp)
    8c08:	1805883a 	mov	r2,r3
    8c0c:	1085883a 	add	r2,r2,r2
    8c10:	10c5883a 	add	r2,r2,r3
    8c14:	2085883a 	add	r2,r4,r2
    8c18:	108004c4 	addi	r2,r2,19
    8c1c:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8c20:	e0800217 	ldw	r2,8(fp)
    8c24:	10c00103 	ldbu	r3,4(r2)
    8c28:	10800143 	ldbu	r2,5(r2)
    8c2c:	1004923a 	slli	r2,r2,8
    8c30:	10c4b03a 	or	r2,r2,r3
    8c34:	10bfffcc 	andi	r2,r2,65535
    8c38:	10801070 	cmpltui	r2,r2,65
    8c3c:	10000d1e 	bne	r2,zero,8c74 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8c40:	00000206 	br	8c4c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8c44:	0005883a 	mov	r2,zero
    8c48:	00001906 	br	8cb0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8c4c:	e0fffa03 	ldbu	r3,-24(fp)
    8c50:	e13ffb17 	ldw	r4,-20(fp)
    8c54:	1805883a 	mov	r2,r3
    8c58:	1085883a 	add	r2,r2,r2
    8c5c:	10c5883a 	add	r2,r2,r3
    8c60:	2085883a 	add	r2,r4,r2
    8c64:	10800504 	addi	r2,r2,20
    8c68:	00c01004 	movi	r3,64
    8c6c:	10c00005 	stb	r3,0(r2)
    8c70:	00000e06 	br	8cac <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8c74:	e0fffa03 	ldbu	r3,-24(fp)
    8c78:	e0800217 	ldw	r2,8(fp)
    8c7c:	11000103 	ldbu	r4,4(r2)
    8c80:	10800143 	ldbu	r2,5(r2)
    8c84:	1004923a 	slli	r2,r2,8
    8c88:	1104b03a 	or	r2,r2,r4
    8c8c:	100b883a 	mov	r5,r2
    8c90:	e13ffb17 	ldw	r4,-20(fp)
    8c94:	1805883a 	mov	r2,r3
    8c98:	1085883a 	add	r2,r2,r2
    8c9c:	10c5883a 	add	r2,r2,r3
    8ca0:	2085883a 	add	r2,r4,r2
    8ca4:	10800504 	addi	r2,r2,20
    8ca8:	11400005 	stb	r5,0(r2)
        }

        return true;
    8cac:	00800044 	movi	r2,1
}
    8cb0:	e037883a 	mov	sp,fp
    8cb4:	df000017 	ldw	fp,0(sp)
    8cb8:	dec00104 	addi	sp,sp,4
    8cbc:	f800283a 	ret

00008cc0 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8cc0:	213fff04 	addi	r4,r4,-4
    8cc4:	0008b7c1 	jmpi	8b7c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008cc8 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8cc8:	defffa04 	addi	sp,sp,-24
    8ccc:	df000515 	stw	fp,20(sp)
    8cd0:	df000504 	addi	fp,sp,20
    8cd4:	e13ffb15 	stw	r4,-20(fp)
    8cd8:	3009883a 	mov	r4,r6
    8cdc:	3807883a 	mov	r3,r7
    8ce0:	e0800117 	ldw	r2,4(fp)
    8ce4:	e17ffc05 	stb	r5,-16(fp)
    8ce8:	e13ffd05 	stb	r4,-12(fp)
    8cec:	e0fffe05 	stb	r3,-8(fp)
    8cf0:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8cf4:	00800044 	movi	r2,1
        };
    8cf8:	e037883a 	mov	sp,fp
    8cfc:	df000017 	ldw	fp,0(sp)
    8d00:	dec00104 	addi	sp,sp,4
    8d04:	f800283a 	ret

00008d08 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8d08:	defffe04 	addi	sp,sp,-8
    8d0c:	df000115 	stw	fp,4(sp)
    8d10:	df000104 	addi	fp,sp,4
    8d14:	e13fff15 	stw	r4,-4(fp)
    8d18:	e0bfff17 	ldw	r2,-4(fp)
    8d1c:	10800d83 	ldbu	r2,54(r2)
    8d20:	e037883a 	mov	sp,fp
    8d24:	df000017 	ldw	fp,0(sp)
    8d28:	dec00104 	addi	sp,sp,4
    8d2c:	f800283a 	ret

00008d30 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    8d30:	defffe04 	addi	sp,sp,-8
    8d34:	df000115 	stw	fp,4(sp)
    8d38:	df000104 	addi	fp,sp,4
    8d3c:	e13fff15 	stw	r4,-4(fp)
    8d40:	e0bfff17 	ldw	r2,-4(fp)
    8d44:	10800cc3 	ldbu	r2,51(r2)
    8d48:	e037883a 	mov	sp,fp
    8d4c:	df000017 	ldw	fp,0(sp)
    8d50:	dec00104 	addi	sp,sp,4
    8d54:	f800283a 	ret

00008d58 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    8d58:	defffd04 	addi	sp,sp,-12
    8d5c:	df000215 	stw	fp,8(sp)
    8d60:	df000204 	addi	fp,sp,8
    8d64:	e13ffe15 	stw	r4,-8(fp)
    8d68:	2805883a 	mov	r2,r5
    8d6c:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    8d70:	e0bfff03 	ldbu	r2,-4(fp)
    8d74:	10803c28 	cmpgeui	r2,r2,240
    8d78:	1000031e 	bne	r2,zero,8d88 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    8d7c:	e0bfff03 	ldbu	r2,-4(fp)
    8d80:	1004d13a 	srli	r2,r2,4
    8d84:	00000606 	br	8da0 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    8d88:	e0bfff03 	ldbu	r2,-4(fp)
    8d8c:	10c003cc 	andi	r3,r2,15
    8d90:	008000b4 	movhi	r2,2
    8d94:	1093d884 	addi	r2,r2,20322
    8d98:	1885883a 	add	r2,r3,r2
    8d9c:	10800003 	ldbu	r2,0(r2)
        };
    8da0:	e037883a 	mov	sp,fp
    8da4:	df000017 	ldw	fp,0(sp)
    8da8:	dec00104 	addi	sp,sp,4
    8dac:	f800283a 	ret

00008db0 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    8db0:	defffd04 	addi	sp,sp,-12
    8db4:	df000215 	stw	fp,8(sp)
    8db8:	df000204 	addi	fp,sp,8
    8dbc:	e13ffe15 	stw	r4,-8(fp)
    8dc0:	2805883a 	mov	r2,r5
    8dc4:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    8dc8:	e0ffff03 	ldbu	r3,-4(fp)
    8dcc:	008000b4 	movhi	r2,2
    8dd0:	1093d484 	addi	r2,r2,20306
    8dd4:	1885883a 	add	r2,r3,r2
    8dd8:	10800003 	ldbu	r2,0(r2)
        };
    8ddc:	e037883a 	mov	sp,fp
    8de0:	df000017 	ldw	fp,0(sp)
    8de4:	dec00104 	addi	sp,sp,4
    8de8:	f800283a 	ret

00008dec <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    8dec:	defffe04 	addi	sp,sp,-8
    8df0:	df000115 	stw	fp,4(sp)
    8df4:	df000104 	addi	fp,sp,4
    8df8:	e13fff15 	stw	r4,-4(fp)
    8dfc:	e0bfff17 	ldw	r2,-4(fp)
    8e00:	10800303 	ldbu	r2,12(r2)
    8e04:	e037883a 	mov	sp,fp
    8e08:	df000017 	ldw	fp,0(sp)
    8e0c:	dec00104 	addi	sp,sp,4
    8e10:	f800283a 	ret

00008e14 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    8e14:	defffe04 	addi	sp,sp,-8
    8e18:	df000115 	stw	fp,4(sp)
    8e1c:	df000104 	addi	fp,sp,4
    8e20:	e13fff15 	stw	r4,-4(fp)
    8e24:	008000b4 	movhi	r2,2
    8e28:	1093f104 	addi	r2,r2,20420
    8e2c:	e0ffff17 	ldw	r3,-4(fp)
    8e30:	18800015 	stw	r2,0(r3)
    8e34:	0001883a 	nop
    8e38:	e037883a 	mov	sp,fp
    8e3c:	df000017 	ldw	fp,0(sp)
    8e40:	dec00104 	addi	sp,sp,4
    8e44:	f800283a 	ret

00008e48 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    8e48:	defffd04 	addi	sp,sp,-12
    8e4c:	df000215 	stw	fp,8(sp)
    8e50:	df000204 	addi	fp,sp,8
    8e54:	2005883a 	mov	r2,r4
    8e58:	e17fff15 	stw	r5,-4(fp)
    8e5c:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    8e60:	0001883a 	nop
    8e64:	e037883a 	mov	sp,fp
    8e68:	df000017 	ldw	fp,0(sp)
    8e6c:	dec00104 	addi	sp,sp,4
    8e70:	f800283a 	ret

00008e74 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    8e74:	deffe204 	addi	sp,sp,-120
    8e78:	dfc01d15 	stw	ra,116(sp)
    8e7c:	df001c15 	stw	fp,112(sp)
    8e80:	df001c04 	addi	fp,sp,112
    8e84:	e13ffd15 	stw	r4,-12(fp)
    8e88:	2805883a 	mov	r2,r5
    8e8c:	e1bfff15 	stw	r6,-4(fp)
    8e90:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    8e94:	00801004 	movi	r2,64
    8e98:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    8e9c:	e0bffd17 	ldw	r2,-12(fp)
    8ea0:	11000217 	ldw	r4,8(r2)
    8ea4:	e0bffd17 	ldw	r2,-12(fp)
    8ea8:	10800303 	ldbu	r2,12(r2)
    8eac:	11403fcc 	andi	r5,r2,255
    8eb0:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    8eb4:	e0ffff17 	ldw	r3,-4(fp)
    8eb8:	d8c00715 	stw	r3,28(sp)
    8ebc:	e0ffec84 	addi	r3,fp,-78
    8ec0:	d8c00615 	stw	r3,24(sp)
    8ec4:	00c01004 	movi	r3,64
    8ec8:	d8c00515 	stw	r3,20(sp)
    8ecc:	00c02004 	movi	r3,128
    8ed0:	d8c00415 	stw	r3,16(sp)
    8ed4:	d8800315 	stw	r2,12(sp)
    8ed8:	00800884 	movi	r2,34
    8edc:	d8800215 	stw	r2,8(sp)
    8ee0:	d8000115 	stw	zero,4(sp)
    8ee4:	00800184 	movi	r2,6
    8ee8:	d8800015 	stw	r2,0(sp)
    8eec:	01c02044 	movi	r7,129
    8ef0:	000d883a 	mov	r6,zero
    8ef4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    8ef8:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    8efc:	e0bfec43 	ldbu	r2,-79(fp)
}
    8f00:	e037883a 	mov	sp,fp
    8f04:	dfc00117 	ldw	ra,4(sp)
    8f08:	df000017 	ldw	fp,0(sp)
    8f0c:	dec00204 	addi	sp,sp,8
    8f10:	f800283a 	ret

00008f14 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8f14:	defff004 	addi	sp,sp,-64
    8f18:	dfc00f15 	stw	ra,60(sp)
    8f1c:	df000e15 	stw	fp,56(sp)
    8f20:	df000e04 	addi	fp,sp,56
    8f24:	e13ffa15 	stw	r4,-24(fp)
    8f28:	2811883a 	mov	r8,r5
    8f2c:	300b883a 	mov	r5,r6
    8f30:	3809883a 	mov	r4,r7
    8f34:	e0c00217 	ldw	r3,8(fp)
    8f38:	e0800317 	ldw	r2,12(fp)
    8f3c:	e23ffb05 	stb	r8,-20(fp)
    8f40:	e17ffc05 	stb	r5,-16(fp)
    8f44:	e13ffd05 	stb	r4,-12(fp)
    8f48:	e0fffe05 	stb	r3,-8(fp)
    8f4c:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8f50:	e0bffa17 	ldw	r2,-24(fp)
    8f54:	12000217 	ldw	r8,8(r2)
    8f58:	e0bffa17 	ldw	r2,-24(fp)
    8f5c:	10800303 	ldbu	r2,12(r2)
    8f60:	12403fcc 	andi	r9,r2,255
    8f64:	e2bffb03 	ldbu	r10,-20(fp)
    8f68:	e0bffe03 	ldbu	r2,-8(fp)
    8f6c:	e0fffd03 	ldbu	r3,-12(fp)
    8f70:	e13ffc03 	ldbu	r4,-16(fp)
    8f74:	e17fff0b 	ldhu	r5,-4(fp)
    8f78:	e1bfff0b 	ldhu	r6,-4(fp)
    8f7c:	d8000715 	stw	zero,28(sp)
    8f80:	e1c00417 	ldw	r7,16(fp)
    8f84:	d9c00615 	stw	r7,24(sp)
    8f88:	d9800515 	stw	r6,20(sp)
    8f8c:	d9400415 	stw	r5,16(sp)
    8f90:	d9000315 	stw	r4,12(sp)
    8f94:	d8c00215 	stw	r3,8(sp)
    8f98:	d8800115 	stw	r2,4(sp)
    8f9c:	00800244 	movi	r2,9
    8fa0:	d8800015 	stw	r2,0(sp)
    8fa4:	01c00844 	movi	r7,33
    8fa8:	500d883a 	mov	r6,r10
    8fac:	480b883a 	mov	r5,r9
    8fb0:	4009883a 	mov	r4,r8
    8fb4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8fb8:	e037883a 	mov	sp,fp
    8fbc:	dfc00117 	ldw	ra,4(sp)
    8fc0:	df000017 	ldw	fp,0(sp)
    8fc4:	dec00204 	addi	sp,sp,8
    8fc8:	f800283a 	ret

00008fcc <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8fcc:	defff004 	addi	sp,sp,-64
    8fd0:	dfc00f15 	stw	ra,60(sp)
    8fd4:	df000e15 	stw	fp,56(sp)
    8fd8:	df000e04 	addi	fp,sp,56
    8fdc:	e13ffa15 	stw	r4,-24(fp)
    8fe0:	2811883a 	mov	r8,r5
    8fe4:	300b883a 	mov	r5,r6
    8fe8:	3809883a 	mov	r4,r7
    8fec:	e0c00217 	ldw	r3,8(fp)
    8ff0:	e0800317 	ldw	r2,12(fp)
    8ff4:	e23ffb05 	stb	r8,-20(fp)
    8ff8:	e17ffc05 	stb	r5,-16(fp)
    8ffc:	e13ffd05 	stb	r4,-12(fp)
    9000:	e0fffe05 	stb	r3,-8(fp)
    9004:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    9008:	e0bffa17 	ldw	r2,-24(fp)
    900c:	12000217 	ldw	r8,8(r2)
    9010:	e0bffa17 	ldw	r2,-24(fp)
    9014:	10800303 	ldbu	r2,12(r2)
    9018:	12403fcc 	andi	r9,r2,255
    901c:	e2bffb03 	ldbu	r10,-20(fp)
    9020:	e0bffe03 	ldbu	r2,-8(fp)
    9024:	e0fffd03 	ldbu	r3,-12(fp)
    9028:	e13ffc03 	ldbu	r4,-16(fp)
    902c:	e17fff0b 	ldhu	r5,-4(fp)
    9030:	e1bfff0b 	ldhu	r6,-4(fp)
    9034:	d8000715 	stw	zero,28(sp)
    9038:	e1c00417 	ldw	r7,16(fp)
    903c:	d9c00615 	stw	r7,24(sp)
    9040:	d9800515 	stw	r6,20(sp)
    9044:	d9400415 	stw	r5,16(sp)
    9048:	d9000315 	stw	r4,12(sp)
    904c:	d8c00215 	stw	r3,8(sp)
    9050:	d8800115 	stw	r2,4(sp)
    9054:	00800044 	movi	r2,1
    9058:	d8800015 	stw	r2,0(sp)
    905c:	01c02844 	movi	r7,161
    9060:	500d883a 	mov	r6,r10
    9064:	480b883a 	mov	r5,r9
    9068:	4009883a 	mov	r4,r8
    906c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9070:	e037883a 	mov	sp,fp
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret

00009084 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    9084:	defff204 	addi	sp,sp,-56
    9088:	dfc00d15 	stw	ra,52(sp)
    908c:	df000c15 	stw	fp,48(sp)
    9090:	df000c04 	addi	fp,sp,48
    9094:	e13ffc15 	stw	r4,-16(fp)
    9098:	2807883a 	mov	r3,r5
    909c:	3005883a 	mov	r2,r6
    90a0:	e1ffff15 	stw	r7,-4(fp)
    90a4:	e0fffd05 	stb	r3,-12(fp)
    90a8:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    90ac:	e0bffc17 	ldw	r2,-16(fp)
    90b0:	12000217 	ldw	r8,8(r2)
    90b4:	e0bffc17 	ldw	r2,-16(fp)
    90b8:	10800303 	ldbu	r2,12(r2)
    90bc:	11403fcc 	andi	r5,r2,255
    90c0:	e0bffe03 	ldbu	r2,-8(fp)
    90c4:	e0fffd03 	ldbu	r3,-12(fp)
    90c8:	d8000715 	stw	zero,28(sp)
    90cc:	e13fff17 	ldw	r4,-4(fp)
    90d0:	d9000615 	stw	r4,24(sp)
    90d4:	01000044 	movi	r4,1
    90d8:	d9000515 	stw	r4,20(sp)
    90dc:	01000044 	movi	r4,1
    90e0:	d9000415 	stw	r4,16(sp)
    90e4:	d8c00315 	stw	r3,12(sp)
    90e8:	d8000215 	stw	zero,8(sp)
    90ec:	d8800115 	stw	r2,4(sp)
    90f0:	00800084 	movi	r2,2
    90f4:	d8800015 	stw	r2,0(sp)
    90f8:	01c02844 	movi	r7,161
    90fc:	000d883a 	mov	r6,zero
    9100:	4009883a 	mov	r4,r8
    9104:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9108:	e037883a 	mov	sp,fp
    910c:	dfc00117 	ldw	ra,4(sp)
    9110:	df000017 	ldw	fp,0(sp)
    9114:	dec00204 	addi	sp,sp,8
    9118:	f800283a 	ret

0000911c <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    911c:	defff204 	addi	sp,sp,-56
    9120:	dfc00d15 	stw	ra,52(sp)
    9124:	df000c15 	stw	fp,48(sp)
    9128:	df000c04 	addi	fp,sp,48
    912c:	e13ffc15 	stw	r4,-16(fp)
    9130:	2809883a 	mov	r4,r5
    9134:	3007883a 	mov	r3,r6
    9138:	3805883a 	mov	r2,r7
    913c:	e13ffd05 	stb	r4,-12(fp)
    9140:	e0fffe05 	stb	r3,-8(fp)
    9144:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    9148:	e0bffc17 	ldw	r2,-16(fp)
    914c:	12000217 	ldw	r8,8(r2)
    9150:	e0bffc17 	ldw	r2,-16(fp)
    9154:	10800303 	ldbu	r2,12(r2)
    9158:	11403fcc 	andi	r5,r2,255
    915c:	e0bffe03 	ldbu	r2,-8(fp)
    9160:	e0ffff03 	ldbu	r3,-4(fp)
    9164:	e13ffd03 	ldbu	r4,-12(fp)
    9168:	d8000715 	stw	zero,28(sp)
    916c:	d8000615 	stw	zero,24(sp)
    9170:	d8000515 	stw	zero,20(sp)
    9174:	d8000415 	stw	zero,16(sp)
    9178:	d9000315 	stw	r4,12(sp)
    917c:	d8c00215 	stw	r3,8(sp)
    9180:	d8800115 	stw	r2,4(sp)
    9184:	00800284 	movi	r2,10
    9188:	d8800015 	stw	r2,0(sp)
    918c:	01c00844 	movi	r7,33
    9190:	000d883a 	mov	r6,zero
    9194:	4009883a 	mov	r4,r8
    9198:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    919c:	e037883a 	mov	sp,fp
    91a0:	dfc00117 	ldw	ra,4(sp)
    91a4:	df000017 	ldw	fp,0(sp)
    91a8:	dec00204 	addi	sp,sp,8
    91ac:	f800283a 	ret

000091b0 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    91b0:	defff304 	addi	sp,sp,-52
    91b4:	dfc00c15 	stw	ra,48(sp)
    91b8:	df000b15 	stw	fp,44(sp)
    91bc:	df000b04 	addi	fp,sp,44
    91c0:	e13ffd15 	stw	r4,-12(fp)
    91c4:	2807883a 	mov	r3,r5
    91c8:	3005883a 	mov	r2,r6
    91cc:	e0fffe05 	stb	r3,-8(fp)
    91d0:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    91d4:	e0bffd17 	ldw	r2,-12(fp)
    91d8:	11000217 	ldw	r4,8(r2)
    91dc:	e0bffd17 	ldw	r2,-12(fp)
    91e0:	10800303 	ldbu	r2,12(r2)
    91e4:	11403fcc 	andi	r5,r2,255
    91e8:	e0bfff03 	ldbu	r2,-4(fp)
    91ec:	e0fffe03 	ldbu	r3,-8(fp)
    91f0:	d8000715 	stw	zero,28(sp)
    91f4:	d8000615 	stw	zero,24(sp)
    91f8:	d8000515 	stw	zero,20(sp)
    91fc:	d8000415 	stw	zero,16(sp)
    9200:	d8c00315 	stw	r3,12(sp)
    9204:	d8000215 	stw	zero,8(sp)
    9208:	d8800115 	stw	r2,4(sp)
    920c:	008002c4 	movi	r2,11
    9210:	d8800015 	stw	r2,0(sp)
    9214:	01c00844 	movi	r7,33
    9218:	000d883a 	mov	r6,zero
    921c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9220:	e037883a 	mov	sp,fp
    9224:	dfc00117 	ldw	ra,4(sp)
    9228:	df000017 	ldw	fp,0(sp)
    922c:	dec00204 	addi	sp,sp,8
    9230:	f800283a 	ret

00009234 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    9234:	defff304 	addi	sp,sp,-52
    9238:	dfc00c15 	stw	ra,48(sp)
    923c:	df000b15 	stw	fp,44(sp)
    9240:	df000b04 	addi	fp,sp,44
    9244:	e13ffd15 	stw	r4,-12(fp)
    9248:	2805883a 	mov	r2,r5
    924c:	e1bfff15 	stw	r6,-4(fp)
    9250:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9254:	e0bffd17 	ldw	r2,-12(fp)
    9258:	11000217 	ldw	r4,8(r2)
    925c:	e0bffd17 	ldw	r2,-12(fp)
    9260:	10800303 	ldbu	r2,12(r2)
    9264:	11403fcc 	andi	r5,r2,255
    9268:	e0bffe03 	ldbu	r2,-8(fp)
    926c:	d8000715 	stw	zero,28(sp)
    9270:	e0ffff17 	ldw	r3,-4(fp)
    9274:	d8c00615 	stw	r3,24(sp)
    9278:	00c00044 	movi	r3,1
    927c:	d8c00515 	stw	r3,20(sp)
    9280:	00c00044 	movi	r3,1
    9284:	d8c00415 	stw	r3,16(sp)
    9288:	d8800315 	stw	r2,12(sp)
    928c:	d8000215 	stw	zero,8(sp)
    9290:	d8000115 	stw	zero,4(sp)
    9294:	008000c4 	movi	r2,3
    9298:	d8800015 	stw	r2,0(sp)
    929c:	01c02844 	movi	r7,161
    92a0:	000d883a 	mov	r6,zero
    92a4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    92a8:	e037883a 	mov	sp,fp
    92ac:	dfc00117 	ldw	ra,4(sp)
    92b0:	df000017 	ldw	fp,0(sp)
    92b4:	dec00204 	addi	sp,sp,8
    92b8:	f800283a 	ret

000092bc <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    92bc:	defffc04 	addi	sp,sp,-16
    92c0:	dfc00315 	stw	ra,12(sp)
    92c4:	df000215 	stw	fp,8(sp)
    92c8:	df000204 	addi	fp,sp,8
    92cc:	e13ffe15 	stw	r4,-8(fp)
    92d0:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    92d4:	e0bfff17 	ldw	r2,-4(fp)
    92d8:	10800003 	ldbu	r2,0(r2)
    92dc:	10803fcc 	andi	r2,r2,255
    92e0:	01402004 	movi	r5,128
    92e4:	1009883a 	mov	r4,r2
    92e8:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    92ec:	e0bfff17 	ldw	r2,-4(fp)
    92f0:	10800043 	ldbu	r2,1(r2)
    92f4:	10803fcc 	andi	r2,r2,255
    92f8:	01402004 	movi	r5,128
    92fc:	1009883a 	mov	r4,r2
    9300:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    9304:	e0bfff17 	ldw	r2,-4(fp)
    9308:	10800083 	ldbu	r2,2(r2)
    930c:	10803fcc 	andi	r2,r2,255
    9310:	01402004 	movi	r5,128
    9314:	1009883a 	mov	r4,r2
    9318:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    931c:	e0bfff17 	ldw	r2,-4(fp)
    9320:	108000c3 	ldbu	r2,3(r2)
    9324:	10803fcc 	andi	r2,r2,255
    9328:	01402004 	movi	r5,128
    932c:	1009883a 	mov	r4,r2
    9330:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    9334:	e0bfff17 	ldw	r2,-4(fp)
    9338:	10c00103 	ldbu	r3,4(r2)
    933c:	10800143 	ldbu	r2,5(r2)
    9340:	1004923a 	slli	r2,r2,8
    9344:	10c4b03a 	or	r2,r2,r3
    9348:	10bfffcc 	andi	r2,r2,65535
    934c:	01402004 	movi	r5,128
    9350:	1009883a 	mov	r4,r2
    9354:	0008e480 	call	8e48 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    9358:	e0bfff17 	ldw	r2,-4(fp)
    935c:	10800183 	ldbu	r2,6(r2)
    9360:	10803fcc 	andi	r2,r2,255
    9364:	01402004 	movi	r5,128
    9368:	1009883a 	mov	r4,r2
    936c:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>
}
    9370:	0001883a 	nop
    9374:	e037883a 	mov	sp,fp
    9378:	dfc00117 	ldw	ra,4(sp)
    937c:	df000017 	ldw	fp,0(sp)
    9380:	dec00204 	addi	sp,sp,8
    9384:	f800283a 	ret

00009388 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    9388:	defffc04 	addi	sp,sp,-16
    938c:	dfc00315 	stw	ra,12(sp)
    9390:	df000215 	stw	fp,8(sp)
    9394:	df000204 	addi	fp,sp,8
    9398:	e13ffe15 	stw	r4,-8(fp)
    939c:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    93a0:	e0bfff17 	ldw	r2,-4(fp)
    93a4:	10800003 	ldbu	r2,0(r2)
    93a8:	10803fcc 	andi	r2,r2,255
    93ac:	01402004 	movi	r5,128
    93b0:	1009883a 	mov	r4,r2
    93b4:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    93b8:	e0bfff17 	ldw	r2,-4(fp)
    93bc:	10800043 	ldbu	r2,1(r2)
    93c0:	10803fcc 	andi	r2,r2,255
    93c4:	01402004 	movi	r5,128
    93c8:	1009883a 	mov	r4,r2
    93cc:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    93d0:	e0bfff17 	ldw	r2,-4(fp)
    93d4:	10c00083 	ldbu	r3,2(r2)
    93d8:	108000c3 	ldbu	r2,3(r2)
    93dc:	1004923a 	slli	r2,r2,8
    93e0:	10c4b03a 	or	r2,r2,r3
    93e4:	10bfffcc 	andi	r2,r2,65535
    93e8:	01402004 	movi	r5,128
    93ec:	1009883a 	mov	r4,r2
    93f0:	0008e480 	call	8e48 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    93f4:	e0bfff17 	ldw	r2,-4(fp)
    93f8:	10800103 	ldbu	r2,4(r2)
    93fc:	10803fcc 	andi	r2,r2,255
    9400:	01402004 	movi	r5,128
    9404:	1009883a 	mov	r4,r2
    9408:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    940c:	e0bfff17 	ldw	r2,-4(fp)
    9410:	10800143 	ldbu	r2,5(r2)
    9414:	10803fcc 	andi	r2,r2,255
    9418:	01402004 	movi	r5,128
    941c:	1009883a 	mov	r4,r2
    9420:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    9424:	e0bfff17 	ldw	r2,-4(fp)
    9428:	10800183 	ldbu	r2,6(r2)
    942c:	10803fcc 	andi	r2,r2,255
    9430:	01402004 	movi	r5,128
    9434:	1009883a 	mov	r4,r2
    9438:	0002e1c0 	call	2e1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    943c:	e0bfff17 	ldw	r2,-4(fp)
    9440:	10c001c3 	ldbu	r3,7(r2)
    9444:	10800203 	ldbu	r2,8(r2)
    9448:	1004923a 	slli	r2,r2,8
    944c:	10c4b03a 	or	r2,r2,r3
    9450:	10bfffcc 	andi	r2,r2,65535
    9454:	01402004 	movi	r5,128
    9458:	1009883a 	mov	r4,r2
    945c:	0008e480 	call	8e48 <_Z10D_PrintHexItEvT_i>
}
    9460:	0001883a 	nop
    9464:	e037883a 	mov	sp,fp
    9468:	dfc00117 	ldw	ra,4(sp)
    946c:	df000017 	ldw	fp,0(sp)
    9470:	dec00204 	addi	sp,sp,8
    9474:	f800283a 	ret

00009478 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    9478:	defffd04 	addi	sp,sp,-12
    947c:	dfc00215 	stw	ra,8(sp)
    9480:	df000115 	stw	fp,4(sp)
    9484:	df000104 	addi	fp,sp,4
    9488:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    948c:	010000b4 	movhi	r4,2
    9490:	211c3904 	addi	r4,r4,28900
    9494:	000de900 	call	de90 <puts>
	vbusState = 0;
    9498:	d0323745 	stb	zero,-14115(gp)
};
    949c:	0001883a 	nop
    94a0:	e037883a 	mov	sp,fp
    94a4:	dfc00117 	ldw	ra,4(sp)
    94a8:	df000017 	ldw	fp,0(sp)
    94ac:	dec00204 	addi	sp,sp,8
    94b0:	f800283a 	ret

000094b4 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    94b4:	defffe04 	addi	sp,sp,-8
    94b8:	df000115 	stw	fp,4(sp)
    94bc:	df000104 	addi	fp,sp,4
    94c0:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    94c4:	d0b23743 	ldbu	r2,-14115(gp)
};
    94c8:	e037883a 	mov	sp,fp
    94cc:	df000017 	ldw	fp,0(sp)
    94d0:	dec00104 	addi	sp,sp,4
    94d4:	f800283a 	ret

000094d8 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    94d8:	defff704 	addi	sp,sp,-36
    94dc:	dfc00815 	stw	ra,32(sp)
    94e0:	df000715 	stw	fp,28(sp)
    94e4:	df000704 	addi	fp,sp,28
    94e8:	e13ffd15 	stw	r4,-12(fp)
    94ec:	2807883a 	mov	r3,r5
    94f0:	3005883a 	mov	r2,r6
    94f4:	e0fffe05 	stb	r3,-8(fp)
    94f8:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    94fc:	e03ffc45 	stb	zero,-15(fp)
    9500:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9504:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    9508:	e0bffe03 	ldbu	r2,-8(fp)
    950c:	10800084 	addi	r2,r2,2
    9510:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    9514:	e0bfff03 	ldbu	r2,-4(fp)
    9518:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    951c:	e0fffc44 	addi	r3,fp,-15
    9520:	d8000215 	stw	zero,8(sp)
    9524:	e0bffcc4 	addi	r2,fp,-13
    9528:	d8800115 	stw	r2,4(sp)
    952c:	d8000015 	stw	zero,0(sp)
    9530:	180f883a 	mov	r7,r3
    9534:	01800084 	movi	r6,2
    9538:	000b883a 	mov	r5,zero
    953c:	01010034 	movhi	r4,1024
    9540:	21044804 	addi	r4,r4,4384
    9544:	00211480 	call	21148 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    9548:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    954c:	0001883a 	nop
    9550:	e037883a 	mov	sp,fp
    9554:	dfc00117 	ldw	ra,4(sp)
    9558:	df000017 	ldw	fp,0(sp)
    955c:	dec00204 	addi	sp,sp,8
    9560:	f800283a 	ret

00009564 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9564:	defff304 	addi	sp,sp,-52
    9568:	dfc00c15 	stw	ra,48(sp)
    956c:	df000b15 	stw	fp,44(sp)
    9570:	dc000a15 	stw	r16,40(sp)
    9574:	df000b04 	addi	fp,sp,44
    9578:	e13ffb15 	stw	r4,-20(fp)
    957c:	3009883a 	mov	r4,r6
    9580:	e1fffe15 	stw	r7,-8(fp)
    9584:	e17ffc05 	stb	r5,-16(fp)
    9588:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    958c:	d809883a 	mov	r4,sp
    9590:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    9594:	e13ffd03 	ldbu	r4,-12(fp)
    9598:	e13ff815 	stw	r4,-32(fp)
    959c:	200b883a 	mov	r5,r4
    95a0:	29400044 	addi	r5,r5,1
    95a4:	2819883a 	mov	r12,r5
    95a8:	001b883a 	mov	r13,zero
    95ac:	600ad77a 	srli	r5,r12,29
    95b0:	681290fa 	slli	r9,r13,3
    95b4:	2a52b03a 	or	r9,r5,r9
    95b8:	601090fa 	slli	r8,r12,3
    95bc:	200b883a 	mov	r5,r4
    95c0:	29400044 	addi	r5,r5,1
    95c4:	2815883a 	mov	r10,r5
    95c8:	0017883a 	mov	r11,zero
    95cc:	500ad77a 	srli	r5,r10,29
    95d0:	580690fa 	slli	r3,r11,3
    95d4:	28c6b03a 	or	r3,r5,r3
    95d8:	500490fa 	slli	r2,r10,3
    95dc:	2005883a 	mov	r2,r4
    95e0:	10800044 	addi	r2,r2,1
    95e4:	108000c4 	addi	r2,r2,3
    95e8:	1004d0ba 	srli	r2,r2,2
    95ec:	1085883a 	add	r2,r2,r2
    95f0:	1085883a 	add	r2,r2,r2
    95f4:	d8b7c83a 	sub	sp,sp,r2
    95f8:	d8800304 	addi	r2,sp,12
    95fc:	1005883a 	mov	r2,r2
    9600:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    9604:	e0bffc03 	ldbu	r2,-16(fp)
    9608:	10800084 	addi	r2,r2,2
    960c:	1007883a 	mov	r3,r2
    9610:	e0bff917 	ldw	r2,-28(fp)
    9614:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    9618:	e0bff917 	ldw	r2,-28(fp)
    961c:	10800044 	addi	r2,r2,1
    9620:	e0fffd03 	ldbu	r3,-12(fp)
    9624:	180d883a 	mov	r6,r3
    9628:	e17ffe17 	ldw	r5,-8(fp)
    962c:	1009883a 	mov	r4,r2
    9630:	000dad40 	call	dad4 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9634:	e0bffd03 	ldbu	r2,-12(fp)
    9638:	10800044 	addi	r2,r2,1
    963c:	1009883a 	mov	r4,r2
    9640:	e0fff917 	ldw	r3,-28(fp)
    9644:	d8000215 	stw	zero,8(sp)
    9648:	e0bffa44 	addi	r2,fp,-23
    964c:	d8800115 	stw	r2,4(sp)
    9650:	d8000015 	stw	zero,0(sp)
    9654:	180f883a 	mov	r7,r3
    9658:	200d883a 	mov	r6,r4
    965c:	000b883a 	mov	r5,zero
    9660:	01010034 	movhi	r4,1024
    9664:	21044804 	addi	r4,r4,4384
    9668:	00211480 	call	21148 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    966c:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9670:	e0bffd03 	ldbu	r2,-12(fp)
    9674:	e0fffe17 	ldw	r3,-8(fp)
    9678:	1885883a 	add	r2,r3,r2
    967c:	8037883a 	mov	sp,r16
}
    9680:	e6ffff04 	addi	sp,fp,-4
    9684:	dfc00217 	ldw	ra,8(sp)
    9688:	df000117 	ldw	fp,4(sp)
    968c:	dc000017 	ldw	r16,0(sp)
    9690:	dec00304 	addi	sp,sp,12
    9694:	f800283a 	ret

00009698 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    9698:	defffc04 	addi	sp,sp,-16
    969c:	dfc00315 	stw	ra,12(sp)
    96a0:	df000215 	stw	fp,8(sp)
    96a4:	df000204 	addi	fp,sp,8
    96a8:	e13ffe15 	stw	r4,-8(fp)
    96ac:	2805883a 	mov	r2,r5
    96b0:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    96b4:	010000b4 	movhi	r4,2
    96b8:	211c3f04 	addi	r4,r4,28924
    96bc:	000de900 	call	de90 <puts>
	regWr(rIOPINS1, data);
    96c0:	e0bfff03 	ldbu	r2,-4(fp)
    96c4:	100d883a 	mov	r6,r2
    96c8:	01402804 	movi	r5,160
    96cc:	e13ffe17 	ldw	r4,-8(fp)
    96d0:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    96d4:	e0bfff03 	ldbu	r2,-4(fp)
    96d8:	1005d13a 	srai	r2,r2,4
    96dc:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    96e0:	e0bfff03 	ldbu	r2,-4(fp)
    96e4:	100d883a 	mov	r6,r2
    96e8:	01402a04 	movi	r5,168
    96ec:	e13ffe17 	ldw	r4,-8(fp)
    96f0:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	return;
    96f4:	0001883a 	nop
}
    96f8:	e037883a 	mov	sp,fp
    96fc:	dfc00117 	ldw	ra,4(sp)
    9700:	df000017 	ldw	fp,0(sp)
    9704:	dec00204 	addi	sp,sp,8
    9708:	f800283a 	ret

0000970c <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    970c:	defff804 	addi	sp,sp,-32
    9710:	dfc00715 	stw	ra,28(sp)
    9714:	df000615 	stw	fp,24(sp)
    9718:	df000604 	addi	fp,sp,24
    971c:	e13ffe15 	stw	r4,-8(fp)
    9720:	2805883a 	mov	r2,r5
    9724:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9728:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    972c:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9730:	e0bfff03 	ldbu	r2,-4(fp)
    9734:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9738:	e0fffd44 	addi	r3,fp,-11
    973c:	d8000215 	stw	zero,8(sp)
    9740:	e0bffd84 	addi	r2,fp,-10
    9744:	d8800115 	stw	r2,4(sp)
    9748:	00800044 	movi	r2,1
    974c:	d8800015 	stw	r2,0(sp)
    9750:	180f883a 	mov	r7,r3
    9754:	01800044 	movi	r6,1
    9758:	000b883a 	mov	r5,zero
    975c:	01010034 	movhi	r4,1024
    9760:	21044804 	addi	r4,r4,4384
    9764:	00211480 	call	21148 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9768:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    976c:	e0bffd83 	ldbu	r2,-10(fp)
}
    9770:	e037883a 	mov	sp,fp
    9774:	dfc00117 	ldw	ra,4(sp)
    9778:	df000017 	ldw	fp,0(sp)
    977c:	dec00204 	addi	sp,sp,8
    9780:	f800283a 	ret

00009784 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9784:	defff604 	addi	sp,sp,-40
    9788:	dfc00915 	stw	ra,36(sp)
    978c:	df000815 	stw	fp,32(sp)
    9790:	df000804 	addi	fp,sp,32
    9794:	e13ffc15 	stw	r4,-16(fp)
    9798:	2807883a 	mov	r3,r5
    979c:	3005883a 	mov	r2,r6
    97a0:	e1ffff15 	stw	r7,-4(fp)
    97a4:	e0fffd05 	stb	r3,-12(fp)
    97a8:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    97ac:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    97b0:	e0bffd03 	ldbu	r2,-12(fp)
    97b4:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    97b8:	e0bffe03 	ldbu	r2,-8(fp)
    97bc:	e13ffb44 	addi	r4,fp,-19
    97c0:	d8000215 	stw	zero,8(sp)
    97c4:	e0ffff17 	ldw	r3,-4(fp)
    97c8:	d8c00115 	stw	r3,4(sp)
    97cc:	d8800015 	stw	r2,0(sp)
    97d0:	200f883a 	mov	r7,r4
    97d4:	01800044 	movi	r6,1
    97d8:	000b883a 	mov	r5,zero
    97dc:	01010034 	movhi	r4,1024
    97e0:	21044804 	addi	r4,r4,4384
    97e4:	00211480 	call	21148 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    97e8:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    97ec:	e0bffe03 	ldbu	r2,-8(fp)
    97f0:	e0ffff17 	ldw	r3,-4(fp)
    97f4:	1885883a 	add	r2,r3,r2
}
    97f8:	e037883a 	mov	sp,fp
    97fc:	dfc00117 	ldw	ra,4(sp)
    9800:	df000017 	ldw	fp,0(sp)
    9804:	dec00204 	addi	sp,sp,8
    9808:	f800283a 	ret

0000980c <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    980c:	defffc04 	addi	sp,sp,-16
    9810:	dfc00315 	stw	ra,12(sp)
    9814:	df000215 	stw	fp,8(sp)
    9818:	df000204 	addi	fp,sp,8
    981c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9820:	010000b4 	movhi	r4,2
    9824:	211c4304 	addi	r4,r4,28940
    9828:	000de900 	call	de90 <puts>
	uint8_t gpin = 0;
    982c:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9830:	01402a04 	movi	r5,168
    9834:	e13fff17 	ldw	r4,-4(fp)
    9838:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    983c:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9840:	e0fffe03 	ldbu	r3,-8(fp)
    9844:	00bffc04 	movi	r2,-16
    9848:	1884703a 	and	r2,r3,r2
    984c:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9850:	01402804 	movi	r5,160
    9854:	e13fff17 	ldw	r4,-4(fp)
    9858:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    985c:	10803fcc 	andi	r2,r2,255
    9860:	1005d13a 	srai	r2,r2,4
    9864:	1007883a 	mov	r3,r2
    9868:	e0bffe03 	ldbu	r2,-8(fp)
    986c:	1884b03a 	or	r2,r3,r2
    9870:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9874:	e0bffe03 	ldbu	r2,-8(fp)
}
    9878:	e037883a 	mov	sp,fp
    987c:	dfc00117 	ldw	ra,4(sp)
    9880:	df000017 	ldw	fp,0(sp)
    9884:	dec00204 	addi	sp,sp,8
    9888:	f800283a 	ret

0000988c <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    988c:	defffc04 	addi	sp,sp,-16
    9890:	dfc00315 	stw	ra,12(sp)
    9894:	df000215 	stw	fp,8(sp)
    9898:	df000204 	addi	fp,sp,8
    989c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    98a0:	010000b4 	movhi	r4,2
    98a4:	211c4704 	addi	r4,r4,28956
    98a8:	000de900 	call	de90 <puts>
	uint8_t gpout = 0;
    98ac:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    98b0:	01402804 	movi	r5,160
    98b4:	e13fff17 	ldw	r4,-4(fp)
    98b8:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    98bc:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    98c0:	e0bffe03 	ldbu	r2,-8(fp)
    98c4:	108003cc 	andi	r2,r2,15
    98c8:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    98cc:	01402a04 	movi	r5,168
    98d0:	e13fff17 	ldw	r4,-4(fp)
    98d4:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    98d8:	10803fcc 	andi	r2,r2,255
    98dc:	1004913a 	slli	r2,r2,4
    98e0:	1007883a 	mov	r3,r2
    98e4:	e0bffe03 	ldbu	r2,-8(fp)
    98e8:	1884b03a 	or	r2,r3,r2
    98ec:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    98f0:	e0bffe03 	ldbu	r2,-8(fp)
}
    98f4:	e037883a 	mov	sp,fp
    98f8:	dfc00117 	ldw	ra,4(sp)
    98fc:	df000017 	ldw	fp,0(sp)
    9900:	dec00204 	addi	sp,sp,8
    9904:	f800283a 	ret

00009908 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    9908:	defffc04 	addi	sp,sp,-16
    990c:	dfc00315 	stw	ra,12(sp)
    9910:	df000215 	stw	fp,8(sp)
    9914:	df000204 	addi	fp,sp,8
    9918:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    991c:	010000b4 	movhi	r4,2
    9920:	211c4d04 	addi	r4,r4,28980
    9924:	000de900 	call	de90 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    9928:	0007883a 	mov	r3,zero
    992c:	00810034 	movhi	r2,1024
    9930:	10847404 	addi	r2,r2,4560
    9934:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9938:	010003f4 	movhi	r4,15
    993c:	21109004 	addi	r4,r4,16960
    9940:	001e87c0 	call	1e87c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9944:	00c00044 	movi	r3,1
    9948:	00810034 	movhi	r2,1024
    994c:	10847404 	addi	r2,r2,4560
    9950:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9954:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9958:	01800804 	movi	r6,32
    995c:	01401e04 	movi	r5,120
    9960:	e13fff17 	ldw	r4,-4(fp)
    9964:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9968:	000d883a 	mov	r6,zero
    996c:	01401e04 	movi	r5,120
    9970:	e13fff17 	ldw	r4,-4(fp)
    9974:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9978:	e0bffe0b 	ldhu	r2,-8(fp)
    997c:	10800044 	addi	r2,r2,1
    9980:	e0bffe0d 	sth	r2,-8(fp)
    9984:	e0bffe0b 	ldhu	r2,-8(fp)
    9988:	1004c03a 	cmpne	r2,r2,zero
    998c:	10803fcc 	andi	r2,r2,255
    9990:	10000a26 	beq	r2,zero,99bc <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9994:	01401a04 	movi	r5,104
    9998:	e13fff17 	ldw	r4,-4(fp)
    999c:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    99a0:	10803fcc 	andi	r2,r2,255
    99a4:	1080004c 	andi	r2,r2,1
    99a8:	1004c03a 	cmpne	r2,r2,zero
    99ac:	10803fcc 	andi	r2,r2,255
    99b0:	1000011e 	bne	r2,zero,99b8 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    99b4:	003ff006 	br	9978 <__alt_data_end+0xfc009978>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    99b8:	0001883a 	nop
		}
	}
	return ( i);
    99bc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    99c0:	e037883a 	mov	sp,fp
    99c4:	dfc00117 	ldw	ra,4(sp)
    99c8:	df000017 	ldw	fp,0(sp)
    99cc:	dec00204 	addi	sp,sp,8
    99d0:	f800283a 	ret

000099d4 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    99d4:	defffe04 	addi	sp,sp,-8
    99d8:	df000115 	stw	fp,4(sp)
    99dc:	df000104 	addi	fp,sp,4
    99e0:	2005883a 	mov	r2,r4
    99e4:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    99e8:	00800044 	movi	r2,1
}
    99ec:	e037883a 	mov	sp,fp
    99f0:	df000017 	ldw	fp,0(sp)
    99f4:	dec00104 	addi	sp,sp,4
    99f8:	f800283a 	ret

000099fc <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    99fc:	defffd04 	addi	sp,sp,-12
    9a00:	dfc00215 	stw	ra,8(sp)
    9a04:	df000115 	stw	fp,4(sp)
    9a08:	df000104 	addi	fp,sp,4
    9a0c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9a10:	010000b4 	movhi	r4,2
    9a14:	211c5104 	addi	r4,r4,28996
    9a18:	000de900 	call	de90 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9a1c:	01800604 	movi	r6,24
    9a20:	01402204 	movi	r5,136
    9a24:	e13fff17 	ldw	r4,-4(fp)
    9a28:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9a2c:	e13fff17 	ldw	r4,-4(fp)
    9a30:	00099080 	call	9908 <_ZN8MAX3421e5resetEv>
    9a34:	10bfffcc 	andi	r2,r2,65535
    9a38:	1005003a 	cmpeq	r2,r2,zero
    9a3c:	10803fcc 	andi	r2,r2,255
    9a40:	10000226 	beq	r2,zero,9a4c <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9a44:	00bfffc4 	movi	r2,-1
    9a48:	00002006 	br	9acc <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9a4c:	01803044 	movi	r6,193
    9a50:	01403604 	movi	r5,216
    9a54:	e13fff17 	ldw	r4,-4(fp)
    9a58:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9a5c:	01801804 	movi	r6,96
    9a60:	01403404 	movi	r5,208
    9a64:	e13fff17 	ldw	r4,-4(fp)
    9a68:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9a6c:	01800104 	movi	r6,4
    9a70:	01403a04 	movi	r5,232
    9a74:	e13fff17 	ldw	r4,-4(fp)
    9a78:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9a7c:	01403a04 	movi	r5,232
    9a80:	e13fff17 	ldw	r4,-4(fp)
    9a84:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    9a88:	10803fcc 	andi	r2,r2,255
    9a8c:	1080010c 	andi	r2,r2,4
    9a90:	1005003a 	cmpeq	r2,r2,zero
    9a94:	10803fcc 	andi	r2,r2,255
    9a98:	10000126 	beq	r2,zero,9aa0 <_ZN8MAX3421e4InitEv+0xa4>
    9a9c:	003ff706 	br	9a7c <__alt_data_end+0xfc009a7c>

	busprobe(); //check if anything is connected
    9aa0:	e13fff17 	ldw	r4,-4(fp)
    9aa4:	0009bf80 	call	9bf8 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9aa8:	01800804 	movi	r6,32
    9aac:	01403204 	movi	r5,200
    9ab0:	e13fff17 	ldw	r4,-4(fp)
    9ab4:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9ab8:	01800044 	movi	r6,1
    9abc:	01402004 	movi	r5,128
    9ac0:	e13fff17 	ldw	r4,-4(fp)
    9ac4:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9ac8:	0005883a 	mov	r2,zero
}
    9acc:	e037883a 	mov	sp,fp
    9ad0:	dfc00117 	ldw	ra,4(sp)
    9ad4:	df000017 	ldw	fp,0(sp)
    9ad8:	dec00204 	addi	sp,sp,8
    9adc:	f800283a 	ret

00009ae0 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9ae0:	defffc04 	addi	sp,sp,-16
    9ae4:	dfc00315 	stw	ra,12(sp)
    9ae8:	df000215 	stw	fp,8(sp)
    9aec:	df000204 	addi	fp,sp,8
    9af0:	e13ffe15 	stw	r4,-8(fp)
    9af4:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9af8:	010000b4 	movhi	r4,2
    9afc:	211c5504 	addi	r4,r4,29012
    9b00:	000de900 	call	de90 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9b04:	01800644 	movi	r6,25
    9b08:	01402204 	movi	r5,136
    9b0c:	e13ffe17 	ldw	r4,-8(fp)
    9b10:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9b14:	e13ffe17 	ldw	r4,-8(fp)
    9b18:	00099080 	call	9908 <_ZN8MAX3421e5resetEv>
    9b1c:	10bfffcc 	andi	r2,r2,65535
    9b20:	1005003a 	cmpeq	r2,r2,zero
    9b24:	10803fcc 	andi	r2,r2,255
    9b28:	10000226 	beq	r2,zero,9b34 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9b2c:	00bfffc4 	movi	r2,-1
    9b30:	00002c06 	br	9be4 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9b34:	e0bfff17 	ldw	r2,-4(fp)
    9b38:	1080fa08 	cmpgei	r2,r2,1000
    9b3c:	1000021e 	bne	r2,zero,9b48 <_ZN8MAX3421e4InitEi+0x68>
    9b40:	0080fa04 	movi	r2,1000
    9b44:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9b48:	e0bfff17 	ldw	r2,-4(fp)
    9b4c:	1009883a 	mov	r4,r2
    9b50:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9b54:	01803044 	movi	r6,193
    9b58:	01403604 	movi	r5,216
    9b5c:	e13ffe17 	ldw	r4,-8(fp)
    9b60:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9b64:	01801804 	movi	r6,96
    9b68:	01403404 	movi	r5,208
    9b6c:	e13ffe17 	ldw	r4,-8(fp)
    9b70:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9b74:	01800104 	movi	r6,4
    9b78:	01403a04 	movi	r5,232
    9b7c:	e13ffe17 	ldw	r4,-8(fp)
    9b80:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9b84:	01403a04 	movi	r5,232
    9b88:	e13ffe17 	ldw	r4,-8(fp)
    9b8c:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    9b90:	10803fcc 	andi	r2,r2,255
    9b94:	1080010c 	andi	r2,r2,4
    9b98:	1005003a 	cmpeq	r2,r2,zero
    9b9c:	10803fcc 	andi	r2,r2,255
    9ba0:	10000126 	beq	r2,zero,9ba8 <_ZN8MAX3421e4InitEi+0xc8>
    9ba4:	003ff706 	br	9b84 <__alt_data_end+0xfc009b84>

	busprobe(); //check if anything is connected
    9ba8:	e13ffe17 	ldw	r4,-8(fp)
    9bac:	0009bf80 	call	9bf8 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9bb0:	01800804 	movi	r6,32
    9bb4:	01403204 	movi	r5,200
    9bb8:	e13ffe17 	ldw	r4,-8(fp)
    9bbc:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9bc0:	01800044 	movi	r6,1
    9bc4:	01402004 	movi	r5,128
    9bc8:	e13ffe17 	ldw	r4,-8(fp)
    9bcc:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9bd0:	01800604 	movi	r6,24
    9bd4:	01402204 	movi	r5,136
    9bd8:	e13ffe17 	ldw	r4,-8(fp)
    9bdc:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9be0:	0005883a 	mov	r2,zero
}
    9be4:	e037883a 	mov	sp,fp
    9be8:	dfc00117 	ldw	ra,4(sp)
    9bec:	df000017 	ldw	fp,0(sp)
    9bf0:	dec00204 	addi	sp,sp,8
    9bf4:	f800283a 	ret

00009bf8 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9bf8:	defffc04 	addi	sp,sp,-16
    9bfc:	dfc00315 	stw	ra,12(sp)
    9c00:	df000215 	stw	fp,8(sp)
    9c04:	df000204 	addi	fp,sp,8
    9c08:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9c0c:	010000b4 	movhi	r4,2
    9c10:	211c5b04 	addi	r4,r4,29036
    9c14:	000de900 	call	de90 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9c18:	01403e04 	movi	r5,248
    9c1c:	e13fff17 	ldw	r4,-4(fp)
    9c20:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    9c24:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9c28:	e0fffe03 	ldbu	r3,-8(fp)
    9c2c:	00bff004 	movi	r2,-64
    9c30:	1884703a 	and	r2,r3,r2
    9c34:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9c38:	e0bffe03 	ldbu	r2,-8(fp)
    9c3c:	10c01020 	cmpeqi	r3,r2,64
    9c40:	1800251e 	bne	r3,zero,9cd8 <_ZN8MAX3421e8busprobeEv+0xe0>
    9c44:	10c01048 	cmpgei	r3,r2,65
    9c48:	1800021e 	bne	r3,zero,9c54 <_ZN8MAX3421e8busprobeEv+0x5c>
    9c4c:	10003b26 	beq	r2,zero,9d3c <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9c50:	00004006 	br	9d54 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9c54:	10c02020 	cmpeqi	r3,r2,128
    9c58:	1800031e 	bne	r3,zero,9c68 <_ZN8MAX3421e8busprobeEv+0x70>
    9c5c:	10803020 	cmpeqi	r2,r2,192
    9c60:	1000331e 	bne	r2,zero,9d30 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9c64:	00003b06 	br	9d54 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9c68:	01403604 	movi	r5,216
    9c6c:	e13fff17 	ldw	r4,-4(fp)
    9c70:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    9c74:	10803fcc 	andi	r2,r2,255
    9c78:	1080008c 	andi	r2,r2,2
    9c7c:	1005003a 	cmpeq	r2,r2,zero
    9c80:	10803fcc 	andi	r2,r2,255
    9c84:	10000a26 	beq	r2,zero,9cb0 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9c88:	010000b4 	movhi	r4,2
    9c8c:	211c6004 	addi	r4,r4,29056
    9c90:	000de900 	call	de90 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9c94:	01803244 	movi	r6,201
    9c98:	01403604 	movi	r5,216
    9c9c:	e13fff17 	ldw	r4,-4(fp)
    9ca0:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9ca4:	00800084 	movi	r2,2
    9ca8:	d0b23745 	stb	r2,-14115(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9cac:	00002906 	br	9d54 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9cb0:	010000b4 	movhi	r4,2
    9cb4:	211c6704 	addi	r4,r4,29084
    9cb8:	000de900 	call	de90 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9cbc:	018032c4 	movi	r6,203
    9cc0:	01403604 	movi	r5,216
    9cc4:	e13fff17 	ldw	r4,-4(fp)
    9cc8:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9ccc:	008000c4 	movi	r2,3
    9cd0:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
    9cd4:	00001f06 	br	9d54 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9cd8:	01403604 	movi	r5,216
    9cdc:	e13fff17 	ldw	r4,-4(fp)
    9ce0:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    9ce4:	10803fcc 	andi	r2,r2,255
    9ce8:	1080008c 	andi	r2,r2,2
    9cec:	1005003a 	cmpeq	r2,r2,zero
    9cf0:	10803fcc 	andi	r2,r2,255
    9cf4:	10000726 	beq	r2,zero,9d14 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9cf8:	018032c4 	movi	r6,203
    9cfc:	01403604 	movi	r5,216
    9d00:	e13fff17 	ldw	r4,-4(fp)
    9d04:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9d08:	008000c4 	movi	r2,3
    9d0c:	d0b23745 	stb	r2,-14115(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9d10:	00001006 	br	9d54 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9d14:	01803244 	movi	r6,201
    9d18:	01403604 	movi	r5,216
    9d1c:	e13fff17 	ldw	r4,-4(fp)
    9d20:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9d24:	00800084 	movi	r2,2
    9d28:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
    9d2c:	00000906 	br	9d54 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    9d30:	00800044 	movi	r2,1
    9d34:	d0b23745 	stb	r2,-14115(gp)
			break;
    9d38:	00000606 	br	9d54 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    9d3c:	01803444 	movi	r6,209
    9d40:	01403604 	movi	r5,216
    9d44:	e13fff17 	ldw	r4,-4(fp)
    9d48:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    9d4c:	d0323745 	stb	zero,-14115(gp)
			break;
    9d50:	0001883a 	nop
	}//end switch( bus_sample )
}
    9d54:	0001883a 	nop
    9d58:	e037883a 	mov	sp,fp
    9d5c:	dfc00117 	ldw	ra,4(sp)
    9d60:	df000017 	ldw	fp,0(sp)
    9d64:	dec00204 	addi	sp,sp,8
    9d68:	f800283a 	ret

00009d6c <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    9d6c:	defffc04 	addi	sp,sp,-16
    9d70:	dfc00315 	stw	ra,12(sp)
    9d74:	df000215 	stw	fp,8(sp)
    9d78:	df000204 	addi	fp,sp,8
    9d7c:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    9d80:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    9d84:	00810034 	movhi	r2,1024
    9d88:	10847c04 	addi	r2,r2,4592
    9d8c:	10800003 	ldbu	r2,0(r2)
    9d90:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    9d94:	00810034 	movhi	r2,1024
    9d98:	10847c04 	addi	r2,r2,4592
    9d9c:	10800037 	ldwio	r2,0(r2)
    9da0:	1005003a 	cmpeq	r2,r2,zero
    9da4:	10803fcc 	andi	r2,r2,255
    9da8:	10000326 	beq	r2,zero,9db8 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    9dac:	e13fff17 	ldw	r4,-4(fp)
    9db0:	0009dd00 	call	9dd0 <_ZN8MAX3421e10IntHandlerEv>
    9db4:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    9db8:	e0bffe03 	ldbu	r2,-8(fp)
}
    9dbc:	e037883a 	mov	sp,fp
    9dc0:	dfc00117 	ldw	ra,4(sp)
    9dc4:	df000017 	ldw	fp,0(sp)
    9dc8:	dec00204 	addi	sp,sp,8
    9dcc:	f800283a 	ret

00009dd0 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    9dd0:	defffc04 	addi	sp,sp,-16
    9dd4:	dfc00315 	stw	ra,12(sp)
    9dd8:	df000215 	stw	fp,8(sp)
    9ddc:	df000204 	addi	fp,sp,8
    9de0:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    9de4:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    9de8:	01403204 	movi	r5,200
    9dec:	e13fff17 	ldw	r4,-4(fp)
    9df0:	000970c0 	call	970c <_ZN8MAX3421e5regRdEh>
    9df4:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    9df8:	e0bffe43 	ldbu	r2,-7(fp)
    9dfc:	1080080c 	andi	r2,r2,32
    9e00:	10000526 	beq	r2,zero,9e18 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    9e04:	e13fff17 	ldw	r4,-4(fp)
    9e08:	0009bf80 	call	9bf8 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    9e0c:	e0bffe03 	ldbu	r2,-8(fp)
    9e10:	10800814 	ori	r2,r2,32
    9e14:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    9e18:	e0bffe03 	ldbu	r2,-8(fp)
    9e1c:	100d883a 	mov	r6,r2
    9e20:	01403204 	movi	r5,200
    9e24:	e13fff17 	ldw	r4,-4(fp)
    9e28:	00094d80 	call	94d8 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    9e2c:	e0bffe03 	ldbu	r2,-8(fp)
}
    9e30:	e037883a 	mov	sp,fp
    9e34:	dfc00117 	ldw	ra,4(sp)
    9e38:	df000017 	ldw	fp,0(sp)
    9e3c:	dec00204 	addi	sp,sp,8
    9e40:	f800283a 	ret

00009e44 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    9e44:	defffe04 	addi	sp,sp,-8
    9e48:	df000115 	stw	fp,4(sp)
    9e4c:	df000104 	addi	fp,sp,4
    9e50:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    9e54:	0005883a 	mov	r2,zero
}
    9e58:	e037883a 	mov	sp,fp
    9e5c:	df000017 	ldw	fp,0(sp)
    9e60:	dec00104 	addi	sp,sp,4
    9e64:	f800283a 	ret

00009e68 <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure

void MIDI_poll();

void onInit()
{
    9e68:	defff804 	addi	sp,sp,-32
    9e6c:	dfc00715 	stw	ra,28(sp)
    9e70:	df000615 	stw	fp,24(sp)
    9e74:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    9e78:	010000f4 	movhi	r4,3
    9e7c:	213f7a04 	addi	r4,r4,-536
    9e80:	000a2c00 	call	a2c0 <_ZN9USBH_MIDI8idVendorEv>
    9e84:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    9e88:	010000f4 	movhi	r4,3
    9e8c:	213f7a04 	addi	r4,r4,-536
    9e90:	000a2e80 	call	a2e8 <_ZN9USBH_MIDI9idProductEv>
    9e94:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    9e98:	e0fffa0b 	ldhu	r3,-24(fp)
    9e9c:	e13ffa8b 	ldhu	r4,-22(fp)
    9ea0:	e0bffb04 	addi	r2,fp,-20
    9ea4:	200f883a 	mov	r7,r4
    9ea8:	180d883a 	mov	r6,r3
    9eac:	014000f4 	movhi	r5,3
    9eb0:	2964a304 	addi	r5,r5,-28020
    9eb4:	1009883a 	mov	r4,r2
    9eb8:	000e2540 	call	e254 <sprintf>
  printf("%s\n", buf);
    9ebc:	e0bffb04 	addi	r2,fp,-20
    9ec0:	1009883a 	mov	r4,r2
    9ec4:	000de900 	call	de90 <puts>
}
    9ec8:	0001883a 	nop
    9ecc:	e037883a 	mov	sp,fp
    9ed0:	dfc00117 	ldw	ra,4(sp)
    9ed4:	df000017 	ldw	fp,0(sp)
    9ed8:	dec00204 	addi	sp,sp,8
    9edc:	f800283a 	ret

00009ee0 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    9ee0:	defffe04 	addi	sp,sp,-8
    9ee4:	dfc00115 	stw	ra,4(sp)
    9ee8:	df000015 	stw	fp,0(sp)
    9eec:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    9ef0:	010000f4 	movhi	r4,3
    9ef4:	213f4b04 	addi	r4,r4,-724
    9ef8:	00099fc0 	call	99fc <_ZN8MAX3421e4InitEv>
    9efc:	10803fcc 	andi	r2,r2,255
    9f00:	1080201c 	xori	r2,r2,128
    9f04:	10bfe004 	addi	r2,r2,-128
    9f08:	10bfffe0 	cmpeqi	r2,r2,-1
    9f0c:	10803fcc 	andi	r2,r2,255
    9f10:	10000326 	beq	r2,zero,9f20 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    9f14:	010000f4 	movhi	r4,3
    9f18:	2124a804 	addi	r4,r4,-28000
    9f1c:	000dd740 	call	dd74 <printf>
	printf ("USB Started\n\r");
    9f20:	010000f4 	movhi	r4,3
    9f24:	2124aa04 	addi	r4,r4,-27992
    9f28:	000dd740 	call	dd74 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    9f2c:	01400074 	movhi	r5,1
    9f30:	29679a04 	addi	r5,r5,-24984
    9f34:	010000f4 	movhi	r4,3
    9f38:	213f7a04 	addi	r4,r4,-536
    9f3c:	000a3100 	call	a310 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    9f40:	0001883a 	nop
    9f44:	e037883a 	mov	sp,fp
    9f48:	dfc00117 	ldw	ra,4(sp)
    9f4c:	df000017 	ldw	fp,0(sp)
    9f50:	dec00204 	addi	sp,sp,8
    9f54:	f800283a 	ret

00009f58 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to serial MIDI
void MIDI_poll()
{
    9f58:	deffea04 	addi	sp,sp,-88
    9f5c:	dfc01515 	stw	ra,84(sp)
    9f60:	df001415 	stw	fp,80(sp)
    9f64:	df001404 	addi	fp,sp,80
  uint8_t note, vel, play, current;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    9f68:	e0ffeec4 	addi	r3,fp,-69
    9f6c:	e0bfff04 	addi	r2,fp,-4
    9f70:	180d883a 	mov	r6,r3
    9f74:	100b883a 	mov	r5,r2
    9f78:	010000f4 	movhi	r4,3
    9f7c:	213f7a04 	addi	r4,r4,-536
    9f80:	0007a2c0 	call	7a2c <_ZN9USBH_MIDI8RecvDataEPtPh>
    9f84:	10803fcc 	andi	r2,r2,255
    9f88:	1005003a 	cmpeq	r2,r2,zero
    9f8c:	10803fcc 	andi	r2,r2,255
    9f90:	10003926 	beq	r2,zero,a078 <_Z9MIDI_pollv+0x120>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    9f94:	e03fed15 	stw	zero,-76(fp)
    9f98:	e0bfed17 	ldw	r2,-76(fp)
    9f9c:	10801008 	cmpgei	r2,r2,64
    9fa0:	1000351e 	bne	r2,zero,a078 <_Z9MIDI_pollv+0x120>
    	if (bufMidi[i] == 0x90) {
    9fa4:	e0ffeec4 	addi	r3,fp,-69
    9fa8:	e0bfed17 	ldw	r2,-76(fp)
    9fac:	1885883a 	add	r2,r3,r2
    9fb0:	10800003 	ldbu	r2,0(r2)
    9fb4:	10803fcc 	andi	r2,r2,255
    9fb8:	10802418 	cmpnei	r2,r2,144
    9fbc:	10002a1e 	bne	r2,zero,a068 <_Z9MIDI_pollv+0x110>

    		current = IORD_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE);
    9fc0:	00810034 	movhi	r2,1024
    9fc4:	10848004 	addi	r2,r2,4608
    9fc8:	10800037 	ldwio	r2,0(r2)
    9fcc:	e0bfee05 	stb	r2,-72(fp)
    		note = bufMidi[i+1];
    9fd0:	e0bfed17 	ldw	r2,-76(fp)
    9fd4:	10800044 	addi	r2,r2,1
    9fd8:	e0ffeec4 	addi	r3,fp,-69
    9fdc:	1885883a 	add	r2,r3,r2
    9fe0:	10800003 	ldbu	r2,0(r2)
    9fe4:	e0bfee45 	stb	r2,-71(fp)
    		vel = bufMidi[i+2];
    9fe8:	e0bfed17 	ldw	r2,-76(fp)
    9fec:	10800084 	addi	r2,r2,2
    9ff0:	e0ffeec4 	addi	r3,fp,-69
    9ff4:	1885883a 	add	r2,r3,r2
    9ff8:	10800003 	ldbu	r2,0(r2)
    9ffc:	e0bfee85 	stb	r2,-70(fp)
    		i += 2;
    a000:	e0bfed17 	ldw	r2,-76(fp)
    a004:	10800084 	addi	r2,r2,2
    a008:	e0bfed15 	stw	r2,-76(fp)

        	if(vel == 0) {
    a00c:	e0bfee83 	ldbu	r2,-70(fp)
    a010:	10000a1e 	bne	r2,zero,a03c <_Z9MIDI_pollv+0xe4>
        		if (current == note) {
    a014:	e0ffee03 	ldbu	r3,-72(fp)
    a018:	e0bfee43 	ldbu	r2,-71(fp)
    a01c:	1880011e 	bne	r3,r2,a024 <_Z9MIDI_pollv+0xcc>
        			play = 0;
    a020:	e03fec05 	stb	zero,-80(fp)
        		}
        		printf("Note Off:	%d\n", note);
    a024:	e0bfee43 	ldbu	r2,-71(fp)
    a028:	100b883a 	mov	r5,r2
    a02c:	010000f4 	movhi	r4,3
    a030:	2124ae04 	addi	r4,r4,-27976
    a034:	000dd740 	call	dd74 <printf>
    a038:	00000706 	br	a058 <_Z9MIDI_pollv+0x100>
        	}
        	else {
        		play = note;
    a03c:	e0bfee43 	ldbu	r2,-71(fp)
    a040:	e0bfec05 	stb	r2,-80(fp)
        		printf("Note On:	%d\n", note);
    a044:	e0bfee43 	ldbu	r2,-71(fp)
    a048:	100b883a 	mov	r5,r2
    a04c:	010000f4 	movhi	r4,3
    a050:	2124b204 	addi	r4,r4,-27960
    a054:	000dd740 	call	dd74 <printf>
        	}
        	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, play);
    a058:	e0ffec03 	ldbu	r3,-80(fp)
    a05c:	00810034 	movhi	r2,1024
    a060:	10848004 	addi	r2,r2,4608
    a064:	10c00035 	stwio	r3,0(r2)
  uint8_t note, vel, play, current;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    a068:	e0bfed17 	ldw	r2,-76(fp)
    a06c:	10800044 	addi	r2,r2,1
    a070:	e0bfed15 	stw	r2,-76(fp)
    a074:	003fc806 	br	9f98 <__alt_data_end+0xfc009f98>
        	}
        	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, play);
    	}
    }
  }
}
    a078:	0001883a 	nop
    a07c:	e037883a 	mov	sp,fp
    a080:	dfc00117 	ldw	ra,4(sp)
    a084:	df000017 	ldw	fp,0(sp)
    a088:	dec00204 	addi	sp,sp,8
    a08c:	f800283a 	ret

0000a090 <_Z7controlv>:

void control() {
    a090:	defffd04 	addi	sp,sp,-12
    a094:	dfc00215 	stw	ra,8(sp)
    a098:	df000115 	stw	fp,4(sp)
    a09c:	df000104 	addi	fp,sp,4
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    a0a0:	00810034 	movhi	r2,1024
    a0a4:	10848804 	addi	r2,r2,4640
    a0a8:	10800037 	ldwio	r2,0(r2)
    a0ac:	e0bfff05 	stb	r2,-4(fp)
	if ((~con & 0x1) && (~con & 0x2)) {
    a0b0:	e0bfff03 	ldbu	r2,-4(fp)
    a0b4:	1080004c 	andi	r2,r2,1
    a0b8:	1000031e 	bne	r2,zero,a0c8 <_Z7controlv+0x38>
    a0bc:	e0bfff03 	ldbu	r2,-4(fp)
    a0c0:	1080008c 	andi	r2,r2,2
    a0c4:	10000e26 	beq	r2,zero,a100 <_Z7controlv+0x70>
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
    a0c8:	e0bfff03 	ldbu	r2,-4(fp)
    a0cc:	1080004c 	andi	r2,r2,1
    a0d0:	1000041e 	bne	r2,zero,a0e4 <_Z7controlv+0x54>
    a0d4:	d0b23817 	ldw	r2,-14112(gp)
    a0d8:	1009883a 	mov	r4,r2
    a0dc:	0006db80 	call	6db8 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
}
    a0e0:	00000706 	br	a100 <_Z7controlv+0x70>
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
	if ((~con & 0x1) && (~con & 0x2)) {
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
    a0e4:	e0bfff03 	ldbu	r2,-4(fp)
    a0e8:	1080008c 	andi	r2,r2,2
    a0ec:	1000041e 	bne	r2,zero,a100 <_Z7controlv+0x70>
    a0f0:	d0b23817 	ldw	r2,-14112(gp)
    a0f4:	1009883a 	mov	r4,r2
    a0f8:	0006e8c0 	call	6e8c <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>
}
    a0fc:	00000006 	br	a100 <_Z7controlv+0x70>
    a100:	0001883a 	nop
    a104:	e037883a 	mov	sp,fp
    a108:	dfc00117 	ldw	ra,4(sp)
    a10c:	df000017 	ldw	fp,0(sp)
    a110:	dec00204 	addi	sp,sp,8
    a114:	f800283a 	ret

0000a118 <main>:

int main() {
    a118:	defffd04 	addi	sp,sp,-12
    a11c:	dfc00215 	stw	ra,8(sp)
    a120:	df000115 	stw	fp,4(sp)
    a124:	df000104 	addi	fp,sp,4

	uint8_t timer;

	printf("Initializing SGTL5000...\n");
    a128:	010000f4 	movhi	r4,3
    a12c:	2124b604 	addi	r4,r4,-27944
    a130:	000de900 	call	de90 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a134:	010000f4 	movhi	r4,3
    a138:	2124bd04 	addi	r4,r4,-27916
    a13c:	001ee040 	call	1ee04 <alt_avalon_i2c_open>
    a140:	d0b23815 	stw	r2,-14112(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a144:	d0b23817 	ldw	r2,-14112(gp)
    a148:	1000031e 	bne	r2,zero,a158 <main+0x40>
    a14c:	010000f4 	movhi	r4,3
    a150:	2124c004 	addi	r4,r4,-27904
    a154:	000de900 	call	de90 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a158:	d0b23817 	ldw	r2,-14112(gp)
    a15c:	1009883a 	mov	r4,r2
    a160:	0006b080 	call	6b08 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a164:	010000f4 	movhi	r4,3
    a168:	2124c804 	addi	r4,r4,-27872
    a16c:	000de900 	call	de90 <puts>
	SGTL5000audio_on(i2c_dev);
    a170:	d0b23817 	ldw	r2,-14112(gp)
    a174:	1009883a 	mov	r4,r2
    a178:	0006ba00 	call	6ba0 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	I2Creg_wr(i2c_dev, ANA_TEST1, TM_SELECT_MIC | TESTMODE);
	I2Creg_wr(i2c_dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | VAG_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP | ADC_POWERUP_ANA);
	I2Creg_wr(i2c_dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
	*/

	SGTL5000status(i2c_dev);
    a17c:	d0b23817 	ldw	r2,-14112(gp)
    a180:	1009883a 	mov	r4,r2
    a184:	0006c0c0 	call	6c0c <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>

	printf("Audio running\n");
    a188:	010000f4 	movhi	r4,3
    a18c:	2124cd04 	addi	r4,r4,-27852
    a190:	000de900 	call	de90 <puts>

	MIDI_setup();
    a194:	0009ee00 	call	9ee0 <_Z10MIDI_setupv>

	while (Usb.getUsbTaskState() != 0x90) {
    a198:	010000f4 	movhi	r4,3
    a19c:	213f4b04 	addi	r4,r4,-724
    a1a0:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a1a4:	10803fcc 	andi	r2,r2,255
    a1a8:	10802418 	cmpnei	r2,r2,144
    a1ac:	10803fcc 	andi	r2,r2,255
    a1b0:	10000426 	beq	r2,zero,a1c4 <main+0xac>
		Usb.Task();
    a1b4:	010000f4 	movhi	r4,3
    a1b8:	213f4b04 	addi	r4,r4,-724
    a1bc:	000181c0 	call	181c <_ZN3USB4TaskEv>

	printf("Audio running\n");

	MIDI_setup();

	while (Usb.getUsbTaskState() != 0x90) {
    a1c0:	003ff506 	br	a198 <__alt_data_end+0xfc00a198>
		Usb.Task();
	}
	while(1) {
		if ( Midi ) {
    a1c4:	010000f4 	movhi	r4,3
    a1c8:	213f7a04 	addi	r4,r4,-536
    a1cc:	000a2980 	call	a298 <_ZN9USBH_MIDIcvbEv>
    a1d0:	10803fcc 	andi	r2,r2,255
    a1d4:	10000126 	beq	r2,zero,a1dc <main+0xc4>
			MIDI_poll();
    a1d8:	0009f580 	call	9f58 <_Z9MIDI_pollv>
		}
		timer ++;
    a1dc:	e0bfff03 	ldbu	r2,-4(fp)
    a1e0:	10800044 	addi	r2,r2,1
    a1e4:	e0bfff05 	stb	r2,-4(fp)
		if (timer & 0x70) {
    a1e8:	e0bfff03 	ldbu	r2,-4(fp)
    a1ec:	10801c0c 	andi	r2,r2,112
    a1f0:	103ff426 	beq	r2,zero,a1c4 <__alt_data_end+0xfc00a1c4>
			control();
    a1f4:	000a0900 	call	a090 <_Z7controlv>
			timer = 0;
    a1f8:	e03fff05 	stb	zero,-4(fp)
	MIDI_setup();

	while (Usb.getUsbTaskState() != 0x90) {
		Usb.Task();
	}
	while(1) {
    a1fc:	003ff106 	br	a1c4 <__alt_data_end+0xfc00a1c4>

0000a200 <_Z41__static_initialization_and_destruction_0ii>:
	/*
        test_setup();
        while (1) {
        	test_loop();
        }*/
}
    a200:	defffc04 	addi	sp,sp,-16
    a204:	dfc00315 	stw	ra,12(sp)
    a208:	df000215 	stw	fp,8(sp)
    a20c:	df000204 	addi	fp,sp,8
    a210:	e13ffe15 	stw	r4,-8(fp)
    a214:	e17fff15 	stw	r5,-4(fp)
    a218:	e0bffe17 	ldw	r2,-8(fp)
    a21c:	10800058 	cmpnei	r2,r2,1
    a220:	10000b1e 	bne	r2,zero,a250 <_Z41__static_initialization_and_destruction_0ii+0x50>
    a224:	e0ffff17 	ldw	r3,-4(fp)
    a228:	00bfffd4 	movui	r2,65535
    a22c:	1880081e 	bne	r3,r2,a250 <_Z41__static_initialization_and_destruction_0ii+0x50>
 * This is sample program. Do not expect perfect behavior.
 *******************************************************************************
 */


USB Usb;
    a230:	010000f4 	movhi	r4,3
    a234:	213f4b04 	addi	r4,r4,-724
    a238:	00007040 	call	704 <_ZN3USBC1Ev>
//USBHub Hub(&Usb);
USBH_MIDI  Midi(&Usb);
    a23c:	014000f4 	movhi	r5,3
    a240:	297f4b04 	addi	r5,r5,-724
    a244:	010000f4 	movhi	r4,3
    a248:	213f7a04 	addi	r4,r4,-536
    a24c:	0006f0c0 	call	6f0c <_ZN9USBH_MIDIC1EP3USB>
	/*
        test_setup();
        while (1) {
        	test_loop();
        }*/
}
    a250:	0001883a 	nop
    a254:	e037883a 	mov	sp,fp
    a258:	dfc00117 	ldw	ra,4(sp)
    a25c:	df000017 	ldw	fp,0(sp)
    a260:	dec00204 	addi	sp,sp,8
    a264:	f800283a 	ret

0000a268 <_GLOBAL__sub_I_Usb>:
    a268:	defffe04 	addi	sp,sp,-8
    a26c:	dfc00115 	stw	ra,4(sp)
    a270:	df000015 	stw	fp,0(sp)
    a274:	d839883a 	mov	fp,sp
    a278:	017fffd4 	movui	r5,65535
    a27c:	01000044 	movi	r4,1
    a280:	000a2000 	call	a200 <_Z41__static_initialization_and_destruction_0ii>
    a284:	e037883a 	mov	sp,fp
    a288:	dfc00117 	ldw	ra,4(sp)
    a28c:	df000017 	ldw	fp,0(sp)
    a290:	dec00204 	addi	sp,sp,8
    a294:	f800283a 	ret

0000a298 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a298:	defffe04 	addi	sp,sp,-8
    a29c:	df000115 	stw	fp,4(sp)
    a2a0:	df000104 	addi	fp,sp,4
    a2a4:	e13fff15 	stw	r4,-4(fp)
    a2a8:	e0bfff17 	ldw	r2,-4(fp)
    a2ac:	10800343 	ldbu	r2,13(r2)
    a2b0:	e037883a 	mov	sp,fp
    a2b4:	df000017 	ldw	fp,0(sp)
    a2b8:	dec00104 	addi	sp,sp,4
    a2bc:	f800283a 	ret

0000a2c0 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a2c0:	defffe04 	addi	sp,sp,-8
    a2c4:	df000115 	stw	fp,4(sp)
    a2c8:	df000104 	addi	fp,sp,4
    a2cc:	e13fff15 	stw	r4,-4(fp)
    a2d0:	e0bfff17 	ldw	r2,-4(fp)
    a2d4:	1080040b 	ldhu	r2,16(r2)
    a2d8:	e037883a 	mov	sp,fp
    a2dc:	df000017 	ldw	fp,0(sp)
    a2e0:	dec00104 	addi	sp,sp,4
    a2e4:	f800283a 	ret

0000a2e8 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a2e8:	defffe04 	addi	sp,sp,-8
    a2ec:	df000115 	stw	fp,4(sp)
    a2f0:	df000104 	addi	fp,sp,4
    a2f4:	e13fff15 	stw	r4,-4(fp)
    a2f8:	e0bfff17 	ldw	r2,-4(fp)
    a2fc:	1080038b 	ldhu	r2,14(r2)
    a300:	e037883a 	mov	sp,fp
    a304:	df000017 	ldw	fp,0(sp)
    a308:	dec00104 	addi	sp,sp,4
    a30c:	f800283a 	ret

0000a310 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a310:	defffd04 	addi	sp,sp,-12
    a314:	df000215 	stw	fp,8(sp)
    a318:	df000204 	addi	fp,sp,8
    a31c:	e13ffe15 	stw	r4,-8(fp)
    a320:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a324:	e0bffe17 	ldw	r2,-8(fp)
    a328:	e0ffff17 	ldw	r3,-4(fp)
    a32c:	10c01815 	stw	r3,96(r2)
        };
    a330:	0001883a 	nop
    a334:	e037883a 	mov	sp,fp
    a338:	df000017 	ldw	fp,0(sp)
    a33c:	dec00104 	addi	sp,sp,4
    a340:	f800283a 	ret

0000a344 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a344:	008000f4 	movhi	r2,3
    a348:	10a4e004 	addi	r2,r2,-27776
    a34c:	20800015 	stw	r2,0(r4)
    a350:	000b11c1 	jmpi	b11c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a354 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a354:	defffe04 	addi	sp,sp,-8
    a358:	008000f4 	movhi	r2,3
    a35c:	dc000015 	stw	r16,0(sp)
    a360:	dfc00115 	stw	ra,4(sp)
    a364:	10a4e004 	addi	r2,r2,-27776
    a368:	20800015 	stw	r2,0(r4)
    a36c:	2021883a 	mov	r16,r4
    a370:	000b11c0 	call	b11c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a374:	8009883a 	mov	r4,r16
    a378:	dfc00117 	ldw	ra,4(sp)
    a37c:	dc000017 	ldw	r16,0(sp)
    a380:	dec00204 	addi	sp,sp,8
    a384:	000b0481 	jmpi	b048 <_ZdlPv>

0000a388 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a388:	defff504 	addi	sp,sp,-44
    a38c:	dc000115 	stw	r16,4(sp)
    a390:	38800117 	ldw	r2,4(r7)
    a394:	24000117 	ldw	r16,4(r4)
    a398:	df000915 	stw	fp,36(sp)
    a39c:	ddc00815 	stw	r23,32(sp)
    a3a0:	dd800715 	stw	r22,28(sp)
    a3a4:	dcc00415 	stw	r19,16(sp)
    a3a8:	dc800315 	stw	r18,12(sp)
    a3ac:	dc400215 	stw	r17,8(sp)
    a3b0:	dfc00a15 	stw	ra,40(sp)
    a3b4:	dd400615 	stw	r21,24(sp)
    a3b8:	dd000515 	stw	r20,20(sp)
    a3bc:	2823883a 	mov	r17,r5
    a3c0:	3039883a 	mov	fp,r6
    a3c4:	dcc00b17 	ldw	r19,44(sp)
    a3c8:	ddc00c17 	ldw	r23,48(sp)
    a3cc:	dd800d17 	ldw	r22,52(sp)
    a3d0:	dc800e17 	ldw	r18,56(sp)
    a3d4:	80800b26 	beq	r16,r2,a404 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a3d8:	80c00007 	ldb	r3,0(r16)
    a3dc:	2029883a 	mov	r20,r4
    a3e0:	01000a84 	movi	r4,42
    a3e4:	382b883a 	mov	r21,r7
    a3e8:	19001a26 	beq	r3,r4,a454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a3ec:	100b883a 	mov	r5,r2
    a3f0:	8009883a 	mov	r4,r16
    a3f4:	d8c00015 	stw	r3,0(sp)
    a3f8:	000e2c00 	call	e2c0 <strcmp>
    a3fc:	d8c00017 	ldw	r3,0(sp)
    a400:	1000141e 	bne	r2,zero,a454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a404:	94c00015 	stw	r19,0(r18)
    a408:	97000115 	stw	fp,4(r18)
    a40c:	88002816 	blt	r17,zero,a4b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a410:	9c63883a 	add	r17,r19,r17
    a414:	b4403226 	beq	r22,r17,a4e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a418:	00800044 	movi	r2,1
    a41c:	90800315 	stw	r2,12(r18)
    a420:	0005883a 	mov	r2,zero
    a424:	dfc00a17 	ldw	ra,40(sp)
    a428:	df000917 	ldw	fp,36(sp)
    a42c:	ddc00817 	ldw	r23,32(sp)
    a430:	dd800717 	ldw	r22,28(sp)
    a434:	dd400617 	ldw	r21,24(sp)
    a438:	dd000517 	ldw	r20,20(sp)
    a43c:	dcc00417 	ldw	r19,16(sp)
    a440:	dc800317 	ldw	r18,12(sp)
    a444:	dc400217 	ldw	r17,8(sp)
    a448:	dc000117 	ldw	r16,4(sp)
    a44c:	dec00b04 	addi	sp,sp,44
    a450:	f800283a 	ret
    a454:	9d801926 	beq	r19,r22,a4bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a458:	a1000217 	ldw	r4,8(r20)
    a45c:	a80f883a 	mov	r7,r21
    a460:	e00d883a 	mov	r6,fp
    a464:	20800017 	ldw	r2,0(r4)
    a468:	dc800e15 	stw	r18,56(sp)
    a46c:	dd800d15 	stw	r22,52(sp)
    a470:	ddc00c15 	stw	r23,48(sp)
    a474:	dcc00b15 	stw	r19,44(sp)
    a478:	10800717 	ldw	r2,28(r2)
    a47c:	880b883a 	mov	r5,r17
    a480:	dfc00a17 	ldw	ra,40(sp)
    a484:	df000917 	ldw	fp,36(sp)
    a488:	ddc00817 	ldw	r23,32(sp)
    a48c:	dd800717 	ldw	r22,28(sp)
    a490:	dd400617 	ldw	r21,24(sp)
    a494:	dd000517 	ldw	r20,20(sp)
    a498:	dcc00417 	ldw	r19,16(sp)
    a49c:	dc800317 	ldw	r18,12(sp)
    a4a0:	dc400217 	ldw	r17,8(sp)
    a4a4:	dc000117 	ldw	r16,4(sp)
    a4a8:	dec00b04 	addi	sp,sp,44
    a4ac:	1000683a 	jmp	r2
    a4b0:	00bfff84 	movi	r2,-2
    a4b4:	88bfda1e 	bne	r17,r2,a420 <__alt_data_end+0xfc00a420>
    a4b8:	003fd706 	br	a418 <__alt_data_end+0xfc00a418>
    a4bc:	b9400117 	ldw	r5,4(r23)
    a4c0:	81400526 	beq	r16,r5,a4d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a4c4:	00800a84 	movi	r2,42
    a4c8:	18bfe326 	beq	r3,r2,a458 <__alt_data_end+0xfc00a458>
    a4cc:	8009883a 	mov	r4,r16
    a4d0:	000e2c00 	call	e2c0 <strcmp>
    a4d4:	103fe01e 	bne	r2,zero,a458 <__alt_data_end+0xfc00a458>
    a4d8:	97000215 	stw	fp,8(r18)
    a4dc:	003fd006 	br	a420 <__alt_data_end+0xfc00a420>
    a4e0:	00800184 	movi	r2,6
    a4e4:	003fcd06 	br	a41c <__alt_data_end+0xfc00a41c>

0000a4e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a4e8:	defffa04 	addi	sp,sp,-24
    a4ec:	dc000215 	stw	r16,8(sp)
    a4f0:	dc000617 	ldw	r16,24(sp)
    a4f4:	dc800415 	stw	r18,16(sp)
    a4f8:	dc400315 	stw	r17,12(sp)
    a4fc:	dfc00515 	stw	ra,20(sp)
    a500:	2023883a 	mov	r17,r4
    a504:	2825883a 	mov	r18,r5
    a508:	81800b26 	beq	r16,r6,a538 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a50c:	89000217 	ldw	r4,8(r17)
    a510:	900b883a 	mov	r5,r18
    a514:	20800017 	ldw	r2,0(r4)
    a518:	dc000615 	stw	r16,24(sp)
    a51c:	10800817 	ldw	r2,32(r2)
    a520:	dfc00517 	ldw	ra,20(sp)
    a524:	dc800417 	ldw	r18,16(sp)
    a528:	dc400317 	ldw	r17,12(sp)
    a52c:	dc000217 	ldw	r16,8(sp)
    a530:	dec00604 	addi	sp,sp,24
    a534:	1000683a 	jmp	r2
    a538:	21000117 	ldw	r4,4(r4)
    a53c:	39400117 	ldw	r5,4(r7)
    a540:	21400926 	beq	r4,r5,a568 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a544:	20c00007 	ldb	r3,0(r4)
    a548:	00800a84 	movi	r2,42
    a54c:	18bfef26 	beq	r3,r2,a50c <__alt_data_end+0xfc00a50c>
    a550:	d9800015 	stw	r6,0(sp)
    a554:	d9c00115 	stw	r7,4(sp)
    a558:	000e2c00 	call	e2c0 <strcmp>
    a55c:	d9800017 	ldw	r6,0(sp)
    a560:	d9c00117 	ldw	r7,4(sp)
    a564:	103fe91e 	bne	r2,zero,a50c <__alt_data_end+0xfc00a50c>
    a568:	00800184 	movi	r2,6
    a56c:	dfc00517 	ldw	ra,20(sp)
    a570:	dc800417 	ldw	r18,16(sp)
    a574:	dc400317 	ldw	r17,12(sp)
    a578:	dc000217 	ldw	r16,8(sp)
    a57c:	dec00604 	addi	sp,sp,24
    a580:	f800283a 	ret

0000a584 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a584:	defffb04 	addi	sp,sp,-20
    a588:	dcc00315 	stw	r19,12(sp)
    a58c:	dc800215 	stw	r18,8(sp)
    a590:	dc400115 	stw	r17,4(sp)
    a594:	dc000015 	stw	r16,0(sp)
    a598:	dfc00415 	stw	ra,16(sp)
    a59c:	2027883a 	mov	r19,r4
    a5a0:	2821883a 	mov	r16,r5
    a5a4:	3023883a 	mov	r17,r6
    a5a8:	3825883a 	mov	r18,r7
    a5ac:	000b1600 	call	b160 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a5b0:	10c03fcc 	andi	r3,r2,255
    a5b4:	18000726 	beq	r3,zero,a5d4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a5b8:	dfc00417 	ldw	ra,16(sp)
    a5bc:	dcc00317 	ldw	r19,12(sp)
    a5c0:	dc800217 	ldw	r18,8(sp)
    a5c4:	dc400117 	ldw	r17,4(sp)
    a5c8:	dc000017 	ldw	r16,0(sp)
    a5cc:	dec00504 	addi	sp,sp,20
    a5d0:	f800283a 	ret
    a5d4:	99000217 	ldw	r4,8(r19)
    a5d8:	900f883a 	mov	r7,r18
    a5dc:	880d883a 	mov	r6,r17
    a5e0:	20800017 	ldw	r2,0(r4)
    a5e4:	800b883a 	mov	r5,r16
    a5e8:	10800617 	ldw	r2,24(r2)
    a5ec:	dfc00417 	ldw	ra,16(sp)
    a5f0:	dcc00317 	ldw	r19,12(sp)
    a5f4:	dc800217 	ldw	r18,8(sp)
    a5f8:	dc400117 	ldw	r17,4(sp)
    a5fc:	dc000017 	ldw	r16,0(sp)
    a600:	dec00504 	addi	sp,sp,20
    a604:	1000683a 	jmp	r2

0000a608 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    a608:	008000f4 	movhi	r2,3
    a60c:	10a4f804 	addi	r2,r2,-27680
    a610:	20800015 	stw	r2,0(r4)
    a614:	000b11c1 	jmpi	b11c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a618 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    a618:	defffe04 	addi	sp,sp,-8
    a61c:	008000f4 	movhi	r2,3
    a620:	dc000015 	stw	r16,0(sp)
    a624:	dfc00115 	stw	ra,4(sp)
    a628:	10a4f804 	addi	r2,r2,-27680
    a62c:	20800015 	stw	r2,0(r4)
    a630:	2021883a 	mov	r16,r4
    a634:	000b11c0 	call	b11c <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a638:	8009883a 	mov	r4,r16
    a63c:	dfc00117 	ldw	ra,4(sp)
    a640:	dc000017 	ldw	r16,0(sp)
    a644:	dec00204 	addi	sp,sp,8
    a648:	000b0481 	jmpi	b048 <_ZdlPv>

0000a64c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a64c:	defff504 	addi	sp,sp,-44
    a650:	dc400215 	stw	r17,8(sp)
    a654:	dc400b17 	ldw	r17,44(sp)
    a658:	df000915 	stw	fp,36(sp)
    a65c:	ddc00815 	stw	r23,32(sp)
    a660:	dd800715 	stw	r22,28(sp)
    a664:	dc000115 	stw	r16,4(sp)
    a668:	dfc00a15 	stw	ra,40(sp)
    a66c:	dd400615 	stw	r21,24(sp)
    a670:	dd000515 	stw	r20,20(sp)
    a674:	dcc00415 	stw	r19,16(sp)
    a678:	dc800315 	stw	r18,12(sp)
    a67c:	3039883a 	mov	fp,r6
    a680:	2021883a 	mov	r16,r4
    a684:	282d883a 	mov	r22,r5
    a688:	382f883a 	mov	r23,r7
    a68c:	34402c26 	beq	r6,r17,a740 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    a690:	85000317 	ldw	r20,12(r16)
    a694:	048000c4 	movi	r18,3
    a698:	04ffff44 	movi	r19,-3
    a69c:	a484983a 	sll	r2,r20,r18
    a6a0:	b80f883a 	mov	r7,r23
    a6a4:	b00b883a 	mov	r5,r22
    a6a8:	10800304 	addi	r2,r2,12
    a6ac:	80a1883a 	add	r16,r16,r2
    a6b0:	a0001626 	beq	r20,zero,a70c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    a6b4:	81800017 	ldw	r6,0(r16)
    a6b8:	a53fffc4 	addi	r20,r20,-1
    a6bc:	3080008c 	andi	r2,r6,2
    a6c0:	3540004c 	andi	r21,r6,1
    a6c4:	10000d26 	beq	r2,zero,a6fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a6c8:	300dd23a 	srai	r6,r6,8
    a6cc:	a8000426 	beq	r21,zero,a6e0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    a6d0:	b4c00a26 	beq	r22,r19,a6fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a6d4:	e0800017 	ldw	r2,0(fp)
    a6d8:	118d883a 	add	r6,r2,r6
    a6dc:	31800017 	ldw	r6,0(r6)
    a6e0:	813fff17 	ldw	r4,-4(r16)
    a6e4:	e18d883a 	add	r6,fp,r6
    a6e8:	20800017 	ldw	r2,0(r4)
    a6ec:	dc400015 	stw	r17,0(sp)
    a6f0:	10800817 	ldw	r2,32(r2)
    a6f4:	103ee83a 	callr	r2
    a6f8:	90801b16 	blt	r18,r2,a768 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    a6fc:	843ffe04 	addi	r16,r16,-8
    a700:	b80f883a 	mov	r7,r23
    a704:	b00b883a 	mov	r5,r22
    a708:	a03fea1e 	bne	r20,zero,a6b4 <__alt_data_end+0xfc00a6b4>
    a70c:	00800044 	movi	r2,1
    a710:	dfc00a17 	ldw	ra,40(sp)
    a714:	df000917 	ldw	fp,36(sp)
    a718:	ddc00817 	ldw	r23,32(sp)
    a71c:	dd800717 	ldw	r22,28(sp)
    a720:	dd400617 	ldw	r21,24(sp)
    a724:	dd000517 	ldw	r20,20(sp)
    a728:	dcc00417 	ldw	r19,16(sp)
    a72c:	dc800317 	ldw	r18,12(sp)
    a730:	dc400217 	ldw	r17,8(sp)
    a734:	dc000117 	ldw	r16,4(sp)
    a738:	dec00b04 	addi	sp,sp,44
    a73c:	f800283a 	ret
    a740:	21000117 	ldw	r4,4(r4)
    a744:	39400117 	ldw	r5,4(r7)
    a748:	21400526 	beq	r4,r5,a760 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    a74c:	20c00007 	ldb	r3,0(r4)
    a750:	00800a84 	movi	r2,42
    a754:	18bfce26 	beq	r3,r2,a690 <__alt_data_end+0xfc00a690>
    a758:	000e2c00 	call	e2c0 <strcmp>
    a75c:	103fcc1e 	bne	r2,zero,a690 <__alt_data_end+0xfc00a690>
    a760:	00800184 	movi	r2,6
    a764:	003fea06 	br	a710 <__alt_data_end+0xfc00a710>
    a768:	a83fe926 	beq	r21,zero,a710 <__alt_data_end+0xfc00a710>
    a76c:	10800054 	ori	r2,r2,1
    a770:	003fe706 	br	a710 <__alt_data_end+0xfc00a710>

0000a774 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a774:	deffe804 	addi	sp,sp,-96
    a778:	df001615 	stw	fp,88(sp)
    a77c:	df001b17 	ldw	fp,108(sp)
    a780:	ddc01515 	stw	r23,84(sp)
    a784:	dd001215 	stw	r20,72(sp)
    a788:	e0800417 	ldw	r2,16(fp)
    a78c:	dcc01115 	stw	r19,68(sp)
    a790:	dfc01715 	stw	ra,92(sp)
    a794:	dd801415 	stw	r22,80(sp)
    a798:	dd401315 	stw	r21,76(sp)
    a79c:	dc801015 	stw	r18,64(sp)
    a7a0:	dc400f15 	stw	r17,60(sp)
    a7a4:	dc000e15 	stw	r16,56(sp)
    a7a8:	d9000b15 	stw	r4,44(sp)
    a7ac:	d9c00915 	stw	r7,36(sp)
    a7b0:	1080040c 	andi	r2,r2,16
    a7b4:	282f883a 	mov	r23,r5
    a7b8:	3027883a 	mov	r19,r6
    a7bc:	dd001817 	ldw	r20,96(sp)
    a7c0:	10000226 	beq	r2,zero,a7cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    a7c4:	20800217 	ldw	r2,8(r4)
    a7c8:	e0800415 	stw	r2,16(fp)
    a7cc:	d8c01a17 	ldw	r3,104(sp)
    a7d0:	a0c0cb26 	beq	r20,r3,ab00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    a7d4:	d8c00b17 	ldw	r3,44(sp)
    a7d8:	1c000117 	ldw	r16,4(r3)
    a7dc:	d8c00917 	ldw	r3,36(sp)
    a7e0:	19400117 	ldw	r5,4(r3)
    a7e4:	2c000626 	beq	r5,r16,a800 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    a7e8:	80c00007 	ldb	r3,0(r16)
    a7ec:	00800a84 	movi	r2,42
    a7f0:	18801b26 	beq	r3,r2,a860 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a7f4:	8009883a 	mov	r4,r16
    a7f8:	000e2c00 	call	e2c0 <strcmp>
    a7fc:	1000181e 	bne	r2,zero,a860 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a800:	e5000015 	stw	r20,0(fp)
    a804:	e4c00115 	stw	r19,4(fp)
    a808:	b8010916 	blt	r23,zero,ac30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    a80c:	d8c01a17 	ldw	r3,104(sp)
    a810:	a5d9883a 	add	r12,r20,r23
    a814:	1b014126 	beq	r3,r12,ad1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    a818:	00800044 	movi	r2,1
    a81c:	e0800315 	stw	r2,12(fp)
    a820:	0005883a 	mov	r2,zero
    a824:	dfc01717 	ldw	ra,92(sp)
    a828:	df001617 	ldw	fp,88(sp)
    a82c:	ddc01517 	ldw	r23,84(sp)
    a830:	dd801417 	ldw	r22,80(sp)
    a834:	dd401317 	ldw	r21,76(sp)
    a838:	dd001217 	ldw	r20,72(sp)
    a83c:	dcc01117 	ldw	r19,68(sp)
    a840:	dc801017 	ldw	r18,64(sp)
    a844:	dc400f17 	ldw	r17,60(sp)
    a848:	dc000e17 	ldw	r16,56(sp)
    a84c:	dec01804 	addi	sp,sp,96
    a850:	f800283a 	ret
    a854:	d8c00917 	ldw	r3,36(sp)
    a858:	18800117 	ldw	r2,4(r3)
    a85c:	80bfe826 	beq	r16,r2,a800 <__alt_data_end+0xfc00a800>
    a860:	b800ef16 	blt	r23,zero,ac20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    a864:	d8c01a17 	ldw	r3,104(sp)
    a868:	1dedc83a 	sub	r22,r3,r23
    a86c:	e005883a 	mov	r2,fp
    a870:	00c00044 	movi	r3,1
    a874:	b039883a 	mov	fp,r22
    a878:	0021883a 	mov	r16,zero
    a87c:	a02d883a 	mov	r22,r20
    a880:	d8000a45 	stb	zero,41(sp)
    a884:	d8c00a05 	stb	r3,40(sp)
    a888:	048000c4 	movi	r18,3
    a88c:	1029883a 	mov	r20,r2
    a890:	d8c00b17 	ldw	r3,44(sp)
    a894:	b805883a 	mov	r2,r23
    a898:	1ac00317 	ldw	r11,12(r3)
    a89c:	581490fa 	slli	r10,r11,3
    a8a0:	52800304 	addi	r10,r10,12
    a8a4:	1aab883a 	add	r21,r3,r10
    a8a8:	b007883a 	mov	r3,r22
    a8ac:	582d883a 	mov	r22,r11
    a8b0:	a82f883a 	mov	r23,r21
    a8b4:	1823883a 	mov	r17,r3
    a8b8:	102b883a 	mov	r21,r2
    a8bc:	b0005526 	beq	r22,zero,aa14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    a8c0:	b8800017 	ldw	r2,0(r23)
    a8c4:	a1400417 	ldw	r5,16(r20)
    a8c8:	d8000415 	stw	zero,16(sp)
    a8cc:	d8000515 	stw	zero,20(sp)
    a8d0:	d8000615 	stw	zero,24(sp)
    a8d4:	d8000715 	stw	zero,28(sp)
    a8d8:	d9400815 	stw	r5,32(sp)
    a8dc:	1100004c 	andi	r4,r2,1
    a8e0:	1007d23a 	srai	r3,r2,8
    a8e4:	20007526 	beq	r4,zero,aabc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    a8e8:	89000017 	ldw	r4,0(r17)
    a8ec:	99800054 	ori	r6,r19,1
    a8f0:	20c7883a 	add	r3,r4,r3
    a8f4:	18c00017 	ldw	r3,0(r3)
    a8f8:	88c7883a 	add	r3,r17,r3
    a8fc:	e0000326 	beq	fp,zero,a90c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    a900:	d9c00a03 	ldbu	r7,40(sp)
    a904:	e0c9803a 	cmpltu	r4,fp,r3
    a908:	21c07226 	beq	r4,r7,aad4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    a90c:	1080008c 	andi	r2,r2,2
    a910:	1000041e 	bne	r2,zero,a924 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    a914:	013fff84 	movi	r4,-2
    a918:	a9007126 	beq	r21,r4,aae0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    a91c:	00bfff44 	movi	r2,-3
    a920:	308c703a 	and	r6,r6,r2
    a924:	b93fff17 	ldw	r4,-4(r23)
    a928:	d9400404 	addi	r5,sp,16
    a92c:	d9c00917 	ldw	r7,36(sp)
    a930:	20800017 	ldw	r2,0(r4)
    a934:	d9400315 	stw	r5,12(sp)
    a938:	d9401a17 	ldw	r5,104(sp)
    a93c:	d8c00015 	stw	r3,0(sp)
    a940:	d9400215 	stw	r5,8(sp)
    a944:	d9401917 	ldw	r5,100(sp)
    a948:	d9400115 	stw	r5,4(sp)
    a94c:	10800717 	ldw	r2,28(r2)
    a950:	a80b883a 	mov	r5,r21
    a954:	103ee83a 	callr	r2
    a958:	a1400217 	ldw	r5,8(r20)
    a95c:	d9000617 	ldw	r4,24(sp)
    a960:	d8c00717 	ldw	r3,28(sp)
    a964:	2908b03a 	or	r4,r5,r4
    a968:	a1000215 	stw	r4,8(r20)
    a96c:	01400184 	movi	r5,6
    a970:	1940a426 	beq	r3,r5,ac04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a974:	01400084 	movi	r5,2
    a978:	1940a226 	beq	r3,r5,ac04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a97c:	81403fcc 	andi	r5,r16,255
    a980:	a1800017 	ldw	r6,0(r20)
    a984:	28004f1e 	bne	r5,zero,aac4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    a988:	30007926 	beq	r6,zero,ab70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    a98c:	d9400417 	ldw	r5,16(sp)
    a990:	29806926 	beq	r5,r6,ab38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    a994:	28006d26 	beq	r5,zero,ab4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    a998:	a2800317 	ldw	r10,12(r20)
    a99c:	9100250e 	bge	r18,r4,aa34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    a9a0:	2100004c 	andi	r4,r4,1
    a9a4:	20000326 	beq	r4,zero,a9b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    a9a8:	a0800417 	ldw	r2,16(r20)
    a9ac:	1080008c 	andi	r2,r2,2
    a9b0:	1000201e 	bne	r2,zero,aa34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    a9b4:	50004d1e 	bne	r10,zero,aaec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    a9b8:	18002626 	beq	r3,zero,aa54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    a9bc:	02800044 	movi	r10,1
    a9c0:	181b883a 	mov	r13,r3
    a9c4:	1a84f03a 	xor	r2,r3,r10
    a9c8:	501f883a 	mov	r15,r10
    a9cc:	90801f0e 	bge	r18,r2,aa4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    a9d0:	90c0880e 	bge	r18,r3,abf4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    a9d4:	d9400417 	ldw	r5,16(sp)
    a9d8:	1880008c 	andi	r2,r3,2
    a9dc:	d9000517 	ldw	r4,20(sp)
    a9e0:	a1400015 	stw	r5,0(r20)
    a9e4:	0021883a 	mov	r16,zero
    a9e8:	a1000115 	stw	r4,4(r20)
    a9ec:	a0c00315 	stw	r3,12(r20)
    a9f0:	10004f1e 	bne	r2,zero,ab30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    a9f4:	6b40004c 	andi	r13,r13,1
    a9f8:	68004d26 	beq	r13,zero,ab30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    a9fc:	a1000217 	ldw	r4,8(r20)
    aa00:	01400104 	movi	r5,4
    aa04:	21408826 	beq	r4,r5,ac28 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aa08:	b5bfffc4 	addi	r22,r22,-1
    aa0c:	bdfffe04 	addi	r23,r23,-8
    aa10:	b03fab1e 	bne	r22,zero,a8c0 <__alt_data_end+0xfc00a8c0>
    aa14:	d8800a43 	ldbu	r2,41(sp)
    aa18:	a82f883a 	mov	r23,r21
    aa1c:	882d883a 	mov	r22,r17
    aa20:	10008126 	beq	r2,zero,ac28 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aa24:	dd400a03 	ldbu	r21,40(sp)
    aa28:	a8007f26 	beq	r21,zero,ac28 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aa2c:	d8000a05 	stb	zero,40(sp)
    aa30:	003f9706 	br	a890 <__alt_data_end+0xfc00a890>
    aa34:	501f883a 	mov	r15,r10
    aa38:	181b883a 	mov	r13,r3
    aa3c:	02800b0e 	bge	zero,r10,aa6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    aa40:	00c0570e 	bge	zero,r3,aba0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    aa44:	1a84f03a 	xor	r2,r3,r10
    aa48:	90bfe116 	blt	r18,r2,a9d0 <__alt_data_end+0xfc00a9d0>
    aa4c:	1bc6703a 	and	r3,r3,r15
    aa50:	90c09916 	blt	r18,r3,acb8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    aa54:	01000044 	movi	r4,1
    aa58:	a1000315 	stw	r4,12(r20)
    aa5c:	a0000015 	stw	zero,0(r20)
    aa60:	a1000217 	ldw	r4,8(r20)
    aa64:	04000044 	movi	r16,1
    aa68:	003fe506 	br	aa00 <__alt_data_end+0xfc00aa00>
    aa6c:	90c00a0e 	bge	r18,r3,aa98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aa70:	1880004c 	andi	r2,r3,1
    aa74:	10000426 	beq	r2,zero,aa88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    aa78:	d9000b17 	ldw	r4,44(sp)
    aa7c:	20800217 	ldw	r2,8(r4)
    aa80:	1080008c 	andi	r2,r2,2
    aa84:	1000041e 	bne	r2,zero,aa98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aa88:	1880005c 	xori	r2,r3,1
    aa8c:	90bfd216 	blt	r18,r2,a9d8 <__alt_data_end+0xfc00a9d8>
    aa90:	03c00044 	movi	r15,1
    aa94:	003fed06 	br	aa4c <__alt_data_end+0xfc00aa4c>
    aa98:	a8006e16 	blt	r21,zero,ac54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    aa9c:	d8801a17 	ldw	r2,104(sp)
    aaa0:	354d883a 	add	r6,r6,r21
    aaa4:	11805026 	beq	r2,r6,abe8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    aaa8:	00c0a50e 	bge	zero,r3,ad40 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    aaac:	03c00044 	movi	r15,1
    aab0:	1bc4f03a 	xor	r2,r3,r15
    aab4:	7815883a 	mov	r10,r15
    aab8:	003fc406 	br	a9cc <__alt_data_end+0xfc00a9cc>
    aabc:	980d883a 	mov	r6,r19
    aac0:	003f8d06 	br	a8f8 <__alt_data_end+0xfc00a8f8>
    aac4:	303fb11e 	bne	r6,zero,a98c <__alt_data_end+0xfc00a98c>
    aac8:	d9400417 	ldw	r5,16(sp)
    aacc:	283fb21e 	bne	r5,zero,a998 <__alt_data_end+0xfc00a998>
    aad0:	003fcb06 	br	aa00 <__alt_data_end+0xfc00aa00>
    aad4:	00c00044 	movi	r3,1
    aad8:	d8c00a45 	stb	r3,41(sp)
    aadc:	003fca06 	br	aa08 <__alt_data_end+0xfc00aa08>
    aae0:	294000cc 	andi	r5,r5,3
    aae4:	283fc826 	beq	r5,zero,aa08 <__alt_data_end+0xfc00aa08>
    aae8:	003f8c06 	br	a91c <__alt_data_end+0xfc00a91c>
    aaec:	18001a26 	beq	r3,zero,ab58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    aaf0:	181b883a 	mov	r13,r3
    aaf4:	501f883a 	mov	r15,r10
    aaf8:	50c4f03a 	xor	r2,r10,r3
    aafc:	003fb306 	br	a9cc <__alt_data_end+0xfc00a9cc>
    ab00:	d8c00b17 	ldw	r3,44(sp)
    ab04:	1c000117 	ldw	r16,4(r3)
    ab08:	d8c01917 	ldw	r3,100(sp)
    ab0c:	19400117 	ldw	r5,4(r3)
    ab10:	81400626 	beq	r16,r5,ab2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    ab14:	80c00007 	ldb	r3,0(r16)
    ab18:	00800a84 	movi	r2,42
    ab1c:	18bf4d26 	beq	r3,r2,a854 <__alt_data_end+0xfc00a854>
    ab20:	8009883a 	mov	r4,r16
    ab24:	000e2c00 	call	e2c0 <strcmp>
    ab28:	10005c1e 	bne	r2,zero,ac9c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    ab2c:	e4c00215 	stw	r19,8(fp)
    ab30:	0005883a 	mov	r2,zero
    ab34:	003f3b06 	br	a824 <__alt_data_end+0xfc00a824>
    ab38:	a0c00117 	ldw	r3,4(r20)
    ab3c:	d8800517 	ldw	r2,20(sp)
    ab40:	1884b03a 	or	r2,r3,r2
    ab44:	a0800115 	stw	r2,4(r20)
    ab48:	003fad06 	br	aa00 <__alt_data_end+0xfc00aa00>
    ab4c:	10803fcc 	andi	r2,r2,255
    ab50:	103f911e 	bne	r2,zero,a998 <__alt_data_end+0xfc00a998>
    ab54:	003faa06 	br	aa00 <__alt_data_end+0xfc00aa00>
    ab58:	501b883a 	mov	r13,r10
    ab5c:	5080005c 	xori	r2,r10,1
    ab60:	5007883a 	mov	r3,r10
    ab64:	90bfbb0e 	bge	r18,r2,aa54 <__alt_data_end+0xfc00aa54>
    ab68:	6880008c 	andi	r2,r13,2
    ab6c:	003f9f06 	br	a9ec <__alt_data_end+0xfc00a9ec>
    ab70:	d8c00417 	ldw	r3,16(sp)
    ab74:	d9400517 	ldw	r5,20(sp)
    ab78:	a0c00015 	stw	r3,0(r20)
    ab7c:	a1400115 	stw	r5,4(r20)
    ab80:	18000526 	beq	r3,zero,ab98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    ab84:	20001626 	beq	r4,zero,abe0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    ab88:	d9400b17 	ldw	r5,44(sp)
    ab8c:	28c00217 	ldw	r3,8(r5)
    ab90:	18c0004c 	andi	r3,r3,1
    ab94:	183f2326 	beq	r3,zero,a824 <__alt_data_end+0xfc00a824>
    ab98:	1021883a 	mov	r16,r2
    ab9c:	003f9806 	br	aa00 <__alt_data_end+0xfc00aa00>
    aba0:	9280060e 	bge	r18,r10,abbc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    aba4:	5080004c 	andi	r2,r10,1
    aba8:	10002426 	beq	r2,zero,ac3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    abac:	d8c00b17 	ldw	r3,44(sp)
    abb0:	18800217 	ldw	r2,8(r3)
    abb4:	1080008c 	andi	r2,r2,2
    abb8:	10003c26 	beq	r2,zero,acac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    abbc:	d9400417 	ldw	r5,16(sp)
    abc0:	a8004216 	blt	r21,zero,accc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    abc4:	d8c01a17 	ldw	r3,104(sp)
    abc8:	2d45883a 	add	r2,r5,r21
    abcc:	18805726 	beq	r3,r2,ad2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    abd0:	7880005c 	xori	r2,r15,1
    abd4:	781b883a 	mov	r13,r15
    abd8:	5007883a 	mov	r3,r10
    abdc:	003fe106 	br	ab64 <__alt_data_end+0xfc00ab64>
    abe0:	1021883a 	mov	r16,r2
    abe4:	003f8806 	br	aa08 <__alt_data_end+0xfc00aa08>
    abe8:	03c00184 	movi	r15,6
    abec:	00ffb016 	blt	zero,r3,aab0 <__alt_data_end+0xfc00aab0>
    abf0:	7815883a 	mov	r10,r15
    abf4:	7880008c 	andi	r2,r15,2
    abf8:	781b883a 	mov	r13,r15
    abfc:	5007883a 	mov	r3,r10
    ac00:	003f7a06 	br	a9ec <__alt_data_end+0xfc00a9ec>
    ac04:	a039883a 	mov	fp,r20
    ac08:	e0c00315 	stw	r3,12(fp)
    ac0c:	d8c00417 	ldw	r3,16(sp)
    ac10:	a0c00015 	stw	r3,0(r20)
    ac14:	d8c00517 	ldw	r3,20(sp)
    ac18:	a0c00115 	stw	r3,4(r20)
    ac1c:	003f0106 	br	a824 <__alt_data_end+0xfc00a824>
    ac20:	002d883a 	mov	r22,zero
    ac24:	003f1106 	br	a86c <__alt_data_end+0xfc00a86c>
    ac28:	8005883a 	mov	r2,r16
    ac2c:	003efd06 	br	a824 <__alt_data_end+0xfc00a824>
    ac30:	00bfff84 	movi	r2,-2
    ac34:	b8bfbe1e 	bne	r23,r2,ab30 <__alt_data_end+0xfc00ab30>
    ac38:	003ef706 	br	a818 <__alt_data_end+0xfc00a818>
    ac3c:	5080005c 	xori	r2,r10,1
    ac40:	90bf840e 	bge	r18,r2,aa54 <__alt_data_end+0xfc00aa54>
    ac44:	501b883a 	mov	r13,r10
    ac48:	5080008c 	andi	r2,r10,2
    ac4c:	5007883a 	mov	r3,r10
    ac50:	003f6606 	br	a9ec <__alt_data_end+0xfc00a9ec>
    ac54:	013fff84 	movi	r4,-2
    ac58:	a9003226 	beq	r21,r4,ad24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    ac5c:	d9400917 	ldw	r5,36(sp)
    ac60:	d9001a17 	ldw	r4,104(sp)
    ac64:	d9c01917 	ldw	r7,100(sp)
    ac68:	28800017 	ldw	r2,0(r5)
    ac6c:	d9000015 	stw	r4,0(sp)
    ac70:	d9000917 	ldw	r4,36(sp)
    ac74:	10800817 	ldw	r2,32(r2)
    ac78:	a80b883a 	mov	r5,r21
    ac7c:	d8c00d15 	stw	r3,52(sp)
    ac80:	db400c15 	stw	r13,48(sp)
    ac84:	103ee83a 	callr	r2
    ac88:	1015883a 	mov	r10,r2
    ac8c:	101f883a 	mov	r15,r2
    ac90:	db400c17 	ldw	r13,48(sp)
    ac94:	d8c00d17 	ldw	r3,52(sp)
    ac98:	003f6906 	br	aa40 <__alt_data_end+0xfc00aa40>
    ac9c:	d8c00917 	ldw	r3,36(sp)
    aca0:	19400117 	ldw	r5,4(r3)
    aca4:	817ed31e 	bne	r16,r5,a7f4 <__alt_data_end+0xfc00a7f4>
    aca8:	003ed506 	br	a800 <__alt_data_end+0xfc00a800>
    acac:	5080005c 	xori	r2,r10,1
    acb0:	90bfe416 	blt	r18,r2,ac44 <__alt_data_end+0xfc00ac44>
    acb4:	003f6706 	br	aa54 <__alt_data_end+0xfc00aa54>
    acb8:	00800084 	movi	r2,2
    acbc:	a0800315 	stw	r2,12(r20)
    acc0:	a0000015 	stw	zero,0(r20)
    acc4:	00800044 	movi	r2,1
    acc8:	003ed606 	br	a824 <__alt_data_end+0xfc00a824>
    accc:	013fff84 	movi	r4,-2
    acd0:	a9002526 	beq	r21,r4,ad68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    acd4:	d8c00917 	ldw	r3,36(sp)
    acd8:	d9c01917 	ldw	r7,100(sp)
    acdc:	d9000917 	ldw	r4,36(sp)
    ace0:	18800017 	ldw	r2,0(r3)
    ace4:	d8c01a17 	ldw	r3,104(sp)
    ace8:	280d883a 	mov	r6,r5
    acec:	a80b883a 	mov	r5,r21
    acf0:	d8c00015 	stw	r3,0(sp)
    acf4:	10800817 	ldw	r2,32(r2)
    acf8:	da800c15 	stw	r10,48(sp)
    acfc:	dbc00d15 	stw	r15,52(sp)
    ad00:	103ee83a 	callr	r2
    ad04:	da800c17 	ldw	r10,48(sp)
    ad08:	1007883a 	mov	r3,r2
    ad0c:	101b883a 	mov	r13,r2
    ad10:	dbc00d17 	ldw	r15,52(sp)
    ad14:	1284f03a 	xor	r2,r2,r10
    ad18:	003f2c06 	br	a9cc <__alt_data_end+0xfc00a9cc>
    ad1c:	00800184 	movi	r2,6
    ad20:	003ebe06 	br	a81c <__alt_data_end+0xfc00a81c>
    ad24:	00ff4b0e 	bge	zero,r3,aa54 <__alt_data_end+0xfc00aa54>
    ad28:	003f6006 	br	aaac <__alt_data_end+0xfc00aaac>
    ad2c:	5080019c 	xori	r2,r10,6
    ad30:	90800916 	blt	r18,r2,ad58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    ad34:	50c0018c 	andi	r3,r10,6
    ad38:	90ff460e 	bge	r18,r3,aa54 <__alt_data_end+0xfc00aa54>
    ad3c:	003fde06 	br	acb8 <__alt_data_end+0xfc00acb8>
    ad40:	d8c01a17 	ldw	r3,104(sp)
    ad44:	2d45883a 	add	r2,r5,r21
    ad48:	18800326 	beq	r3,r2,ad58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    ad4c:	02800044 	movi	r10,1
    ad50:	501f883a 	mov	r15,r10
    ad54:	003f9e06 	br	abd0 <__alt_data_end+0xfc00abd0>
    ad58:	03400184 	movi	r13,6
    ad5c:	00800084 	movi	r2,2
    ad60:	6807883a 	mov	r3,r13
    ad64:	003f1d06 	br	a9dc <__alt_data_end+0xfc00a9dc>
    ad68:	501b883a 	mov	r13,r10
    ad6c:	5080005c 	xori	r2,r10,1
    ad70:	5007883a 	mov	r3,r10
    ad74:	003f7b06 	br	ab64 <__alt_data_end+0xfc00ab64>

0000ad78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    ad78:	deffef04 	addi	sp,sp,-68
    ad7c:	ddc00e15 	stw	r23,56(sp)
    ad80:	dd000b15 	stw	r20,44(sp)
    ad84:	dc400815 	stw	r17,32(sp)
    ad88:	3029883a 	mov	r20,r6
    ad8c:	dfc01015 	stw	ra,64(sp)
    ad90:	df000f15 	stw	fp,60(sp)
    ad94:	dd800d15 	stw	r22,52(sp)
    ad98:	dd400c15 	stw	r21,48(sp)
    ad9c:	dcc00a15 	stw	r19,40(sp)
    ada0:	dc800915 	stw	r18,36(sp)
    ada4:	dc000715 	stw	r16,28(sp)
    ada8:	d9000515 	stw	r4,20(sp)
    adac:	2823883a 	mov	r17,r5
    adb0:	382f883a 	mov	r23,r7
    adb4:	000b1600 	call	b160 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    adb8:	100d883a 	mov	r6,r2
    adbc:	10803fcc 	andi	r2,r2,255
    adc0:	1000441e 	bne	r2,zero,aed4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    adc4:	bc000217 	ldw	r16,8(r23)
    adc8:	8080040c 	andi	r2,r16,16
    adcc:	10000226 	beq	r2,zero,add8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    add0:	d8c00517 	ldw	r3,20(sp)
    add4:	1c000217 	ldw	r16,8(r3)
    add8:	d8c00517 	ldw	r3,20(sp)
    addc:	d8800517 	ldw	r2,20(sp)
    ade0:	1f000317 	ldw	fp,12(r3)
    ade4:	e01090fa 	slli	r8,fp,3
    ade8:	40c00304 	addi	r3,r8,12
    adec:	10ed883a 	add	r22,r2,r3
    adf0:	80c0004c 	andi	r3,r16,1
    adf4:	42000204 	addi	r8,r8,8
    adf8:	d8c00415 	stw	r3,16(sp)
    adfc:	122b883a 	add	r21,r2,r8
    ae00:	e0003226 	beq	fp,zero,aecc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    ae04:	b1800017 	ldw	r6,0(r22)
    ae08:	d8000015 	stw	zero,0(sp)
    ae0c:	d8000115 	stw	zero,4(sp)
    ae10:	dc000215 	stw	r16,8(sp)
    ae14:	d8000315 	stw	zero,12(sp)
    ae18:	34c0008c 	andi	r19,r6,2
    ae1c:	3480004c 	andi	r18,r6,1
    ae20:	9800021e 	bne	r19,zero,ae2c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    ae24:	d8c00417 	ldw	r3,16(sp)
    ae28:	18002426 	beq	r3,zero,aebc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    ae2c:	a0003626 	beq	r20,zero,af08 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    ae30:	300dd23a 	srai	r6,r6,8
    ae34:	90000326 	beq	r18,zero,ae44 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    ae38:	a0800017 	ldw	r2,0(r20)
    ae3c:	118d883a 	add	r6,r2,r6
    ae40:	31800017 	ldw	r6,0(r6)
    ae44:	a18d883a 	add	r6,r20,r6
    ae48:	a9000017 	ldw	r4,0(r21)
    ae4c:	d80f883a 	mov	r7,sp
    ae50:	880b883a 	mov	r5,r17
    ae54:	20800017 	ldw	r2,0(r4)
    ae58:	10800617 	ldw	r2,24(r2)
    ae5c:	103ee83a 	callr	r2
    ae60:	100d883a 	mov	r6,r2
    ae64:	10803fcc 	andi	r2,r2,255
    ae68:	10001426 	beq	r2,zero,aebc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    ae6c:	d8800317 	ldw	r2,12(sp)
    ae70:	00c00204 	movi	r3,8
    ae74:	10c02626 	beq	r2,r3,af10 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    ae78:	d8800117 	ldw	r2,4(sp)
    ae7c:	00c000c4 	movi	r3,3
    ae80:	1880040e 	bge	r3,r2,ae94 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ae84:	9800031e 	bne	r19,zero,ae94 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ae88:	00ffff44 	movi	r3,-3
    ae8c:	10c4703a 	and	r2,r2,r3
    ae90:	d8800115 	stw	r2,4(sp)
    ae94:	b9400317 	ldw	r5,12(r23)
    ae98:	28002126 	beq	r5,zero,af20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    ae9c:	b8800017 	ldw	r2,0(r23)
    aea0:	d9000017 	ldw	r4,0(sp)
    aea4:	11004d1e 	bne	r2,r4,afdc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    aea8:	10003126 	beq	r2,zero,af70 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    aeac:	b9000117 	ldw	r4,4(r23)
    aeb0:	d8800117 	ldw	r2,4(sp)
    aeb4:	2084b03a 	or	r2,r4,r2
    aeb8:	b8800115 	stw	r2,4(r23)
    aebc:	e73fffc4 	addi	fp,fp,-1
    aec0:	b5bffe04 	addi	r22,r22,-8
    aec4:	ad7ffe04 	addi	r21,r21,-8
    aec8:	e03fce1e 	bne	fp,zero,ae04 <__alt_data_end+0xfc00ae04>
    aecc:	b9800117 	ldw	r6,4(r23)
    aed0:	300cc03a 	cmpne	r6,r6,zero
    aed4:	3005883a 	mov	r2,r6
    aed8:	dfc01017 	ldw	ra,64(sp)
    aedc:	df000f17 	ldw	fp,60(sp)
    aee0:	ddc00e17 	ldw	r23,56(sp)
    aee4:	dd800d17 	ldw	r22,52(sp)
    aee8:	dd400c17 	ldw	r21,48(sp)
    aeec:	dd000b17 	ldw	r20,44(sp)
    aef0:	dcc00a17 	ldw	r19,40(sp)
    aef4:	dc800917 	ldw	r18,36(sp)
    aef8:	dc400817 	ldw	r17,32(sp)
    aefc:	dc000717 	ldw	r16,28(sp)
    af00:	dec01104 	addi	sp,sp,68
    af04:	f800283a 	ret
    af08:	000d883a 	mov	r6,zero
    af0c:	003fce06 	br	ae48 <__alt_data_end+0xfc00ae48>
    af10:	903fd926 	beq	r18,zero,ae78 <__alt_data_end+0xfc00ae78>
    af14:	a8800017 	ldw	r2,0(r21)
    af18:	d8800315 	stw	r2,12(sp)
    af1c:	003fd606 	br	ae78 <__alt_data_end+0xfc00ae78>
    af20:	d9000017 	ldw	r4,0(sp)
    af24:	d8800117 	ldw	r2,4(sp)
    af28:	00c000c4 	movi	r3,3
    af2c:	b9000015 	stw	r4,0(r23)
    af30:	d9000217 	ldw	r4,8(sp)
    af34:	b8800115 	stw	r2,4(r23)
    af38:	b9000215 	stw	r4,8(r23)
    af3c:	d9000317 	ldw	r4,12(sp)
    af40:	b9000315 	stw	r4,12(r23)
    af44:	18bfe30e 	bge	r3,r2,aed4 <__alt_data_end+0xfc00aed4>
    af48:	1100008c 	andi	r4,r2,2
    af4c:	20001926 	beq	r4,zero,afb4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    af50:	d8c00517 	ldw	r3,20(sp)
    af54:	18800217 	ldw	r2,8(r3)
    af58:	1080004c 	andi	r2,r2,1
    af5c:	103fdd26 	beq	r2,zero,aed4 <__alt_data_end+0xfc00aed4>
    af60:	e73fffc4 	addi	fp,fp,-1
    af64:	b5bffe04 	addi	r22,r22,-8
    af68:	ad7ffe04 	addi	r21,r21,-8
    af6c:	003fd606 	br	aec8 <__alt_data_end+0xfc00aec8>
    af70:	d8800317 	ldw	r2,12(sp)
    af74:	00c00204 	movi	r3,8
    af78:	10c00b26 	beq	r2,r3,afa8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    af7c:	28c00a26 	beq	r5,r3,afa8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    af80:	11000117 	ldw	r4,4(r2)
    af84:	29400117 	ldw	r5,4(r5)
    af88:	217fc826 	beq	r4,r5,aeac <__alt_data_end+0xfc00aeac>
    af8c:	20800007 	ldb	r2,0(r4)
    af90:	00c00a84 	movi	r3,42
    af94:	10c00426 	beq	r2,r3,afa8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    af98:	d9800615 	stw	r6,24(sp)
    af9c:	000e2c00 	call	e2c0 <strcmp>
    afa0:	d9800617 	ldw	r6,24(sp)
    afa4:	103fc126 	beq	r2,zero,aeac <__alt_data_end+0xfc00aeac>
    afa8:	00800084 	movi	r2,2
    afac:	b8800115 	stw	r2,4(r23)
    afb0:	003fc806 	br	aed4 <__alt_data_end+0xfc00aed4>
    afb4:	1080004c 	andi	r2,r2,1
    afb8:	103fc626 	beq	r2,zero,aed4 <__alt_data_end+0xfc00aed4>
    afbc:	d8c00517 	ldw	r3,20(sp)
    afc0:	18800217 	ldw	r2,8(r3)
    afc4:	1080008c 	andi	r2,r2,2
    afc8:	103fc226 	beq	r2,zero,aed4 <__alt_data_end+0xfc00aed4>
    afcc:	e73fffc4 	addi	fp,fp,-1
    afd0:	b5bffe04 	addi	r22,r22,-8
    afd4:	ad7ffe04 	addi	r21,r21,-8
    afd8:	003fbb06 	br	aec8 <__alt_data_end+0xfc00aec8>
    afdc:	00800084 	movi	r2,2
    afe0:	b8000015 	stw	zero,0(r23)
    afe4:	b8800115 	stw	r2,4(r23)
    afe8:	003fba06 	br	aed4 <__alt_data_end+0xfc00aed4>

0000afec <_ZNSt9type_infoD1Ev>:
    afec:	f800283a 	ret

0000aff0 <_ZNKSt9type_info14__is_pointer_pEv>:
    aff0:	0005883a 	mov	r2,zero
    aff4:	f800283a 	ret

0000aff8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    aff8:	0005883a 	mov	r2,zero
    affc:	f800283a 	ret

0000b000 <_ZNSt9type_infoD0Ev>:
    b000:	000b0481 	jmpi	b048 <_ZdlPv>

0000b004 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    b004:	21000117 	ldw	r4,4(r4)
    b008:	29400117 	ldw	r5,4(r5)
    b00c:	21400c26 	beq	r4,r5,b040 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    b010:	20c00007 	ldb	r3,0(r4)
    b014:	00800a84 	movi	r2,42
    b018:	18800726 	beq	r3,r2,b038 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    b01c:	deffff04 	addi	sp,sp,-4
    b020:	dfc00015 	stw	ra,0(sp)
    b024:	000e2c00 	call	e2c0 <strcmp>
    b028:	1005003a 	cmpeq	r2,r2,zero
    b02c:	dfc00017 	ldw	ra,0(sp)
    b030:	dec00104 	addi	sp,sp,4
    b034:	f800283a 	ret
    b038:	0005883a 	mov	r2,zero
    b03c:	f800283a 	ret
    b040:	00800044 	movi	r2,1
    b044:	f800283a 	ret

0000b048 <_ZdlPv>:
    b048:	000d2b41 	jmpi	d2b4 <free>

0000b04c <__cxa_pure_virtual>:
    b04c:	014000f4 	movhi	r5,3
    b050:	deffff04 	addi	sp,sp,-4
    b054:	29650d04 	addi	r5,r5,-27596
    b058:	018006c4 	movi	r6,27
    b05c:	01000084 	movi	r4,2
    b060:	dfc00015 	stw	ra,0(sp)
    b064:	001e8e80 	call	1e8e8 <write>
    b068:	000b4140 	call	b414 <_ZSt9terminatev>

0000b06c <__cxa_deleted_virtual>:
    b06c:	014000f4 	movhi	r5,3
    b070:	deffff04 	addi	sp,sp,-4
    b074:	29651404 	addi	r5,r5,-27568
    b078:	01800784 	movi	r6,30
    b07c:	01000084 	movi	r4,2
    b080:	dfc00015 	stw	ra,0(sp)
    b084:	001e8e80 	call	1e8e8 <write>
    b088:	000b4140 	call	b414 <_ZSt9terminatev>

0000b08c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    b08c:	20800017 	ldw	r2,0(r4)
    b090:	defffa04 	addi	sp,sp,-24
    b094:	dc000415 	stw	r16,16(sp)
    b098:	10800617 	ldw	r2,24(r2)
    b09c:	3021883a 	mov	r16,r6
    b0a0:	31800017 	ldw	r6,0(r6)
    b0a4:	00c00404 	movi	r3,16
    b0a8:	d8c00215 	stw	r3,8(sp)
    b0ac:	dfc00515 	stw	ra,20(sp)
    b0b0:	d8000015 	stw	zero,0(sp)
    b0b4:	d8000115 	stw	zero,4(sp)
    b0b8:	d8000315 	stw	zero,12(sp)
    b0bc:	d80f883a 	mov	r7,sp
    b0c0:	103ee83a 	callr	r2
    b0c4:	d8800117 	ldw	r2,4(sp)
    b0c8:	00c00184 	movi	r3,6
    b0cc:	1080018c 	andi	r2,r2,6
    b0d0:	10c00526 	beq	r2,r3,b0e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b0d4:	0005883a 	mov	r2,zero
    b0d8:	dfc00517 	ldw	ra,20(sp)
    b0dc:	dc000417 	ldw	r16,16(sp)
    b0e0:	dec00604 	addi	sp,sp,24
    b0e4:	f800283a 	ret
    b0e8:	d8c00017 	ldw	r3,0(sp)
    b0ec:	00800044 	movi	r2,1
    b0f0:	80c00015 	stw	r3,0(r16)
    b0f4:	dfc00517 	ldw	ra,20(sp)
    b0f8:	dc000417 	ldw	r16,16(sp)
    b0fc:	dec00604 	addi	sp,sp,24
    b100:	f800283a 	ret

0000b104 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b104:	d8800017 	ldw	r2,0(sp)
    b108:	11800226 	beq	r2,r6,b114 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b10c:	00800044 	movi	r2,1
    b110:	f800283a 	ret
    b114:	00800184 	movi	r2,6
    b118:	f800283a 	ret

0000b11c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b11c:	008000f4 	movhi	r2,3
    b120:	10a52a04 	addi	r2,r2,-27480
    b124:	20800015 	stw	r2,0(r4)
    b128:	000afec1 	jmpi	afec <_ZNSt9type_infoD1Ev>

0000b12c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b12c:	defffe04 	addi	sp,sp,-8
    b130:	008000f4 	movhi	r2,3
    b134:	dc000015 	stw	r16,0(sp)
    b138:	dfc00115 	stw	ra,4(sp)
    b13c:	10a52a04 	addi	r2,r2,-27480
    b140:	20800015 	stw	r2,0(r4)
    b144:	2021883a 	mov	r16,r4
    b148:	000afec0 	call	afec <_ZNSt9type_infoD1Ev>
    b14c:	8009883a 	mov	r4,r16
    b150:	dfc00117 	ldw	ra,4(sp)
    b154:	dc000017 	ldw	r16,0(sp)
    b158:	dec00204 	addi	sp,sp,8
    b15c:	000b0481 	jmpi	b048 <_ZdlPv>

0000b160 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b160:	21000117 	ldw	r4,4(r4)
    b164:	29400117 	ldw	r5,4(r5)
    b168:	defffd04 	addi	sp,sp,-12
    b16c:	dc400115 	stw	r17,4(sp)
    b170:	dc000015 	stw	r16,0(sp)
    b174:	dfc00215 	stw	ra,8(sp)
    b178:	3023883a 	mov	r17,r6
    b17c:	3821883a 	mov	r16,r7
    b180:	21400526 	beq	r4,r5,b198 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b184:	20c00007 	ldb	r3,0(r4)
    b188:	00800a84 	movi	r2,42
    b18c:	18800d26 	beq	r3,r2,b1c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b190:	000e2c00 	call	e2c0 <strcmp>
    b194:	10000b1e 	bne	r2,zero,b1c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b198:	00800204 	movi	r2,8
    b19c:	80800315 	stw	r2,12(r16)
    b1a0:	00800184 	movi	r2,6
    b1a4:	80800115 	stw	r2,4(r16)
    b1a8:	84400015 	stw	r17,0(r16)
    b1ac:	00800044 	movi	r2,1
    b1b0:	dfc00217 	ldw	ra,8(sp)
    b1b4:	dc400117 	ldw	r17,4(sp)
    b1b8:	dc000017 	ldw	r16,0(sp)
    b1bc:	dec00304 	addi	sp,sp,12
    b1c0:	f800283a 	ret
    b1c4:	0005883a 	mov	r2,zero
    b1c8:	003ff906 	br	b1b0 <__alt_data_end+0xfc00b1b0>

0000b1cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b1cc:	defffa04 	addi	sp,sp,-24
    b1d0:	dc800415 	stw	r18,16(sp)
    b1d4:	d8800817 	ldw	r2,32(sp)
    b1d8:	dc800617 	ldw	r18,24(sp)
    b1dc:	dc400315 	stw	r17,12(sp)
    b1e0:	dc000215 	stw	r16,8(sp)
    b1e4:	dfc00515 	stw	ra,20(sp)
    b1e8:	dc400917 	ldw	r17,36(sp)
    b1ec:	24000117 	ldw	r16,4(r4)
    b1f0:	90801526 	beq	r18,r2,b248 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b1f4:	39400117 	ldw	r5,4(r7)
    b1f8:	2c000826 	beq	r5,r16,b21c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b1fc:	80c00007 	ldb	r3,0(r16)
    b200:	00800a84 	movi	r2,42
    b204:	18800926 	beq	r3,r2,b22c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b208:	8009883a 	mov	r4,r16
    b20c:	d9800115 	stw	r6,4(sp)
    b210:	000e2c00 	call	e2c0 <strcmp>
    b214:	d9800117 	ldw	r6,4(sp)
    b218:	1000041e 	bne	r2,zero,b22c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b21c:	00800044 	movi	r2,1
    b220:	8c800015 	stw	r18,0(r17)
    b224:	89800115 	stw	r6,4(r17)
    b228:	88800315 	stw	r2,12(r17)
    b22c:	0005883a 	mov	r2,zero
    b230:	dfc00517 	ldw	ra,20(sp)
    b234:	dc800417 	ldw	r18,16(sp)
    b238:	dc400317 	ldw	r17,12(sp)
    b23c:	dc000217 	ldw	r16,8(sp)
    b240:	dec00604 	addi	sp,sp,24
    b244:	f800283a 	ret
    b248:	d8800717 	ldw	r2,28(sp)
    b24c:	11400117 	ldw	r5,4(r2)
    b250:	81400a26 	beq	r16,r5,b27c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b254:	80c00007 	ldb	r3,0(r16)
    b258:	00800a84 	movi	r2,42
    b25c:	18800c26 	beq	r3,r2,b290 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b260:	8009883a 	mov	r4,r16
    b264:	d9800115 	stw	r6,4(sp)
    b268:	d9c00015 	stw	r7,0(sp)
    b26c:	000e2c00 	call	e2c0 <strcmp>
    b270:	d9800117 	ldw	r6,4(sp)
    b274:	d9c00017 	ldw	r7,0(sp)
    b278:	1000021e 	bne	r2,zero,b284 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b27c:	89800215 	stw	r6,8(r17)
    b280:	003fea06 	br	b22c <__alt_data_end+0xfc00b22c>
    b284:	39400117 	ldw	r5,4(r7)
    b288:	817fdf1e 	bne	r16,r5,b208 <__alt_data_end+0xfc00b208>
    b28c:	003fe306 	br	b21c <__alt_data_end+0xfc00b21c>
    b290:	38800117 	ldw	r2,4(r7)
    b294:	80bfe51e 	bne	r16,r2,b22c <__alt_data_end+0xfc00b22c>
    b298:	003fe006 	br	b21c <__alt_data_end+0xfc00b21c>

0000b29c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b29c:	20800117 	ldw	r2,4(r4)
    b2a0:	28c00117 	ldw	r3,4(r5)
    b2a4:	10c02926 	beq	r2,r3,b34c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b2a8:	defffb04 	addi	sp,sp,-20
    b2ac:	dcc00315 	stw	r19,12(sp)
    b2b0:	dc800215 	stw	r18,8(sp)
    b2b4:	dc400115 	stw	r17,4(sp)
    b2b8:	dc000015 	stw	r16,0(sp)
    b2bc:	dfc00415 	stw	ra,16(sp)
    b2c0:	2821883a 	mov	r16,r5
    b2c4:	11400007 	ldb	r5,0(r2)
    b2c8:	2025883a 	mov	r18,r4
    b2cc:	01000a84 	movi	r4,42
    b2d0:	3823883a 	mov	r17,r7
    b2d4:	3027883a 	mov	r19,r6
    b2d8:	29000626 	beq	r5,r4,b2f4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b2dc:	180b883a 	mov	r5,r3
    b2e0:	1009883a 	mov	r4,r2
    b2e4:	000e2c00 	call	e2c0 <strcmp>
    b2e8:	1000021e 	bne	r2,zero,b2f4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b2ec:	00800044 	movi	r2,1
    b2f0:	00000306 	br	b300 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b2f4:	008000c4 	movi	r2,3
    b2f8:	1440082e 	bgeu	r2,r17,b31c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b2fc:	0005883a 	mov	r2,zero
    b300:	dfc00417 	ldw	ra,16(sp)
    b304:	dcc00317 	ldw	r19,12(sp)
    b308:	dc800217 	ldw	r18,8(sp)
    b30c:	dc400117 	ldw	r17,4(sp)
    b310:	dc000017 	ldw	r16,0(sp)
    b314:	dec00504 	addi	sp,sp,20
    b318:	f800283a 	ret
    b31c:	80800017 	ldw	r2,0(r16)
    b320:	980d883a 	mov	r6,r19
    b324:	900b883a 	mov	r5,r18
    b328:	10800517 	ldw	r2,20(r2)
    b32c:	8009883a 	mov	r4,r16
    b330:	dfc00417 	ldw	ra,16(sp)
    b334:	dcc00317 	ldw	r19,12(sp)
    b338:	dc800217 	ldw	r18,8(sp)
    b33c:	dc400117 	ldw	r17,4(sp)
    b340:	dc000017 	ldw	r16,0(sp)
    b344:	dec00504 	addi	sp,sp,20
    b348:	1000683a 	jmp	r2
    b34c:	00800044 	movi	r2,1
    b350:	f800283a 	ret

0000b354 <_ZN10__cxxabiv111__terminateEPFvvE>:
    b354:	00800074 	movhi	r2,1
    b358:	deffef04 	addi	sp,sp,-68
    b35c:	10af2f04 	addi	r2,r2,-17220
    b360:	d8800615 	stw	r2,24(sp)
    b364:	008000b4 	movhi	r2,2
    b368:	108a6a04 	addi	r2,r2,10664
    b36c:	d8800715 	stw	r2,28(sp)
    b370:	00800074 	movhi	r2,1
    b374:	10aceb04 	addi	r2,r2,-19540
    b378:	d9000d15 	stw	r4,52(sp)
    b37c:	d809883a 	mov	r4,sp
    b380:	d8800915 	stw	r2,36(sp)
    b384:	dfc01015 	stw	ra,64(sp)
    b388:	df000f15 	stw	fp,60(sp)
    b38c:	dec00815 	stw	sp,32(sp)
    b390:	dec00a15 	stw	sp,40(sp)
    b394:	000cf240 	call	cf24 <_Unwind_SjLj_Register>
    b398:	00800044 	movi	r2,1
    b39c:	d8800115 	stw	r2,4(sp)
    b3a0:	d8800d17 	ldw	r2,52(sp)
    b3a4:	103ee83a 	callr	r2
    b3a8:	000d23c0 	call	d23c <abort>
    b3ac:	d8c00217 	ldw	r3,8(sp)
    b3b0:	d8800117 	ldw	r2,4(sp)
    b3b4:	d8c00d15 	stw	r3,52(sp)
    b3b8:	d8c00317 	ldw	r3,12(sp)
    b3bc:	d8c00e15 	stw	r3,56(sp)
    b3c0:	10000b26 	beq	r2,zero,b3f0 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b3c4:	10bfffc4 	addi	r2,r2,-1
    b3c8:	10000126 	beq	r2,zero,b3d0 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b3cc:	003b68fa 	trap	3
    b3d0:	d8000115 	stw	zero,4(sp)
    b3d4:	000c7000 	call	c700 <__cxa_end_catch>
    b3d8:	d8c00e17 	ldw	r3,56(sp)
    b3dc:	00bfffc4 	movi	r2,-1
    b3e0:	18800826 	beq	r3,r2,b404 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b3e4:	d9000d17 	ldw	r4,52(sp)
    b3e8:	d8800115 	stw	r2,4(sp)
    b3ec:	000d1200 	call	d120 <_Unwind_SjLj_Resume>
    b3f0:	d9000d17 	ldw	r4,52(sp)
    b3f4:	000c64c0 	call	c64c <__cxa_begin_catch>
    b3f8:	00800084 	movi	r2,2
    b3fc:	d8800115 	stw	r2,4(sp)
    b400:	000d23c0 	call	d23c <abort>
    b404:	d8800e17 	ldw	r2,56(sp)
    b408:	d9000d17 	ldw	r4,52(sp)
    b40c:	d8800115 	stw	r2,4(sp)
    b410:	000c2bc0 	call	c2bc <__cxa_call_unexpected>

0000b414 <_ZSt9terminatev>:
    b414:	008000f4 	movhi	r2,3
    b418:	10b2a604 	addi	r2,r2,-13672
    b41c:	11000017 	ldw	r4,0(r2)
    b420:	deffff04 	addi	sp,sp,-4
    b424:	dfc00015 	stw	ra,0(sp)
    b428:	000b3540 	call	b354 <_ZN10__cxxabiv111__terminateEPFvvE>

0000b42c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b42c:	deffff04 	addi	sp,sp,-4
    b430:	dfc00015 	stw	ra,0(sp)
    b434:	203ee83a 	callr	r4
    b438:	000b4140 	call	b414 <_ZSt9terminatev>

0000b43c <_ZSt10unexpectedv>:
    b43c:	008000f4 	movhi	r2,3
    b440:	10b2a504 	addi	r2,r2,-13676
    b444:	11000017 	ldw	r4,0(r2)
    b448:	deffff04 	addi	sp,sp,-4
    b44c:	dfc00015 	stw	ra,0(sp)
    b450:	000b42c0 	call	b42c <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b454 <_ZSt13set_terminatePFvvE>:
    b454:	00c000f4 	movhi	r3,3
    b458:	18f2a604 	addi	r3,r3,-13672
    b45c:	18800017 	ldw	r2,0(r3)
    b460:	19000015 	stw	r4,0(r3)
    b464:	f800283a 	ret

0000b468 <_ZSt13get_terminatev>:
    b468:	008000f4 	movhi	r2,3
    b46c:	10b2a604 	addi	r2,r2,-13672
    b470:	10800017 	ldw	r2,0(r2)
    b474:	f800283a 	ret

0000b478 <_ZSt14set_unexpectedPFvvE>:
    b478:	00c000f4 	movhi	r3,3
    b47c:	18f2a504 	addi	r3,r3,-13676
    b480:	18800017 	ldw	r2,0(r3)
    b484:	19000015 	stw	r4,0(r3)
    b488:	f800283a 	ret

0000b48c <_ZSt14get_unexpectedv>:
    b48c:	008000f4 	movhi	r2,3
    b490:	10b2a504 	addi	r2,r2,-13676
    b494:	10800017 	ldw	r2,0(r2)
    b498:	f800283a 	ret

0000b49c <_ZL21size_of_encoded_valueh>:
    b49c:	deffff04 	addi	sp,sp,-4
    b4a0:	dfc00015 	stw	ra,0(sp)
    b4a4:	20c03fcc 	andi	r3,r4,255
    b4a8:	00803fc4 	movi	r2,255
    b4ac:	18802026 	beq	r3,r2,b530 <_ZL21size_of_encoded_valueh+0x94>
    b4b0:	210001cc 	andi	r4,r4,7
    b4b4:	00800144 	movi	r2,5
    b4b8:	11001c36 	bltu	r2,r4,b52c <_ZL21size_of_encoded_valueh+0x90>
    b4bc:	200890ba 	slli	r4,r4,2
    b4c0:	00800074 	movhi	r2,1
    b4c4:	10ad3504 	addi	r2,r2,-19244
    b4c8:	2089883a 	add	r4,r4,r2
    b4cc:	20800017 	ldw	r2,0(r4)
    b4d0:	1000683a 	jmp	r2
    b4d4:	0000b4ec 	andhi	zero,zero,723
    b4d8:	0000b52c 	andhi	zero,zero,724
    b4dc:	0000b4fc 	xorhi	zero,zero,723
    b4e0:	0000b4ec 	andhi	zero,zero,723
    b4e4:	0000b51c 	xori	zero,zero,724
    b4e8:	0000b50c 	andi	zero,zero,724
    b4ec:	00800104 	movi	r2,4
    b4f0:	dfc00017 	ldw	ra,0(sp)
    b4f4:	dec00104 	addi	sp,sp,4
    b4f8:	f800283a 	ret
    b4fc:	00800084 	movi	r2,2
    b500:	dfc00017 	ldw	ra,0(sp)
    b504:	dec00104 	addi	sp,sp,4
    b508:	f800283a 	ret
    b50c:	00800044 	movi	r2,1
    b510:	dfc00017 	ldw	ra,0(sp)
    b514:	dec00104 	addi	sp,sp,4
    b518:	f800283a 	ret
    b51c:	00800204 	movi	r2,8
    b520:	dfc00017 	ldw	ra,0(sp)
    b524:	dec00104 	addi	sp,sp,4
    b528:	f800283a 	ret
    b52c:	000d23c0 	call	d23c <abort>
    b530:	0005883a 	mov	r2,zero
    b534:	dfc00017 	ldw	ra,0(sp)
    b538:	dec00104 	addi	sp,sp,4
    b53c:	f800283a 	ret

0000b540 <_ZL28read_encoded_value_with_basehjPKhPj>:
    b540:	deffff04 	addi	sp,sp,-4
    b544:	dfc00015 	stw	ra,0(sp)
    b548:	20c03fcc 	andi	r3,r4,255
    b54c:	00801404 	movi	r2,80
    b550:	18807326 	beq	r3,r2,b720 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b554:	20c003cc 	andi	r3,r4,15
    b558:	00800304 	movi	r2,12
    b55c:	10c06f36 	bltu	r2,r3,b71c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b560:	180690ba 	slli	r3,r3,2
    b564:	02000074 	movhi	r8,1
    b568:	422d5e04 	addi	r8,r8,-19080
    b56c:	1a07883a 	add	r3,r3,r8
    b570:	18800017 	ldw	r2,0(r3)
    b574:	1000683a 	jmp	r2
    b578:	0000b5ac 	andhi	zero,zero,726
    b57c:	0000b6c8 	cmpgei	zero,zero,731
    b580:	0000b704 	movi	zero,732
    b584:	0000b5ac 	andhi	zero,zero,726
    b588:	0000b610 	cmplti	zero,zero,728
    b58c:	0000b664 	muli	zero,zero,729
    b590:	0000b71c 	xori	zero,zero,732
    b594:	0000b71c 	xori	zero,zero,732
    b598:	0000b71c 	xori	zero,zero,732
    b59c:	0000b670 	cmpltui	zero,zero,729
    b5a0:	0000b640 	call	b64 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x154>
    b5a4:	0000b5ac 	andhi	zero,zero,726
    b5a8:	0000b610 	cmplti	zero,zero,728
    b5ac:	30800043 	ldbu	r2,1(r6)
    b5b0:	30c00083 	ldbu	r3,2(r6)
    b5b4:	324000c3 	ldbu	r9,3(r6)
    b5b8:	32000003 	ldbu	r8,0(r6)
    b5bc:	1004923a 	slli	r2,r2,8
    b5c0:	1806943a 	slli	r3,r3,16
    b5c4:	4812963a 	slli	r9,r9,24
    b5c8:	1204b03a 	or	r2,r2,r8
    b5cc:	1884b03a 	or	r2,r3,r2
    b5d0:	4886b03a 	or	r3,r9,r2
    b5d4:	30800104 	addi	r2,r6,4
    b5d8:	18000926 	beq	r3,zero,b600 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b5dc:	22001c0c 	andi	r8,r4,112
    b5e0:	02400404 	movi	r9,16
    b5e4:	42405726 	beq	r8,r9,b744 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    b5e8:	21003fcc 	andi	r4,r4,255
    b5ec:	2100201c 	xori	r4,r4,128
    b5f0:	213fe004 	addi	r4,r4,-128
    b5f4:	1947883a 	add	r3,r3,r5
    b5f8:	2000010e 	bge	r4,zero,b600 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b5fc:	18c00017 	ldw	r3,0(r3)
    b600:	38c00015 	stw	r3,0(r7)
    b604:	dfc00017 	ldw	ra,0(sp)
    b608:	dec00104 	addi	sp,sp,4
    b60c:	f800283a 	ret
    b610:	30800043 	ldbu	r2,1(r6)
    b614:	30c00083 	ldbu	r3,2(r6)
    b618:	324000c3 	ldbu	r9,3(r6)
    b61c:	32000003 	ldbu	r8,0(r6)
    b620:	1004923a 	slli	r2,r2,8
    b624:	1806943a 	slli	r3,r3,16
    b628:	4812963a 	slli	r9,r9,24
    b62c:	1204b03a 	or	r2,r2,r8
    b630:	1884b03a 	or	r2,r3,r2
    b634:	4886b03a 	or	r3,r9,r2
    b638:	30800204 	addi	r2,r6,8
    b63c:	003fe606 	br	b5d8 <__alt_data_end+0xfc00b5d8>
    b640:	30c00043 	ldbu	r3,1(r6)
    b644:	32000003 	ldbu	r8,0(r6)
    b648:	30800084 	addi	r2,r6,2
    b64c:	1806923a 	slli	r3,r3,8
    b650:	1a06b03a 	or	r3,r3,r8
    b654:	18ffffcc 	andi	r3,r3,65535
    b658:	18e0001c 	xori	r3,r3,32768
    b65c:	18e00004 	addi	r3,r3,-32768
    b660:	003fdd06 	br	b5d8 <__alt_data_end+0xfc00b5d8>
    b664:	30c00003 	ldbu	r3,0(r6)
    b668:	30800044 	addi	r2,r6,1
    b66c:	003fda06 	br	b5d8 <__alt_data_end+0xfc00b5d8>
    b670:	3017883a 	mov	r11,r6
    b674:	0007883a 	mov	r3,zero
    b678:	0013883a 	mov	r9,zero
    b67c:	5a800003 	ldbu	r10,0(r11)
    b680:	58800044 	addi	r2,r11,1
    b684:	1017883a 	mov	r11,r2
    b688:	52001fcc 	andi	r8,r10,127
    b68c:	4250983a 	sll	r8,r8,r9
    b690:	53003fcc 	andi	r12,r10,255
    b694:	6300201c 	xori	r12,r12,128
    b698:	633fe004 	addi	r12,r12,-128
    b69c:	1a06b03a 	or	r3,r3,r8
    b6a0:	4a4001c4 	addi	r9,r9,7
    b6a4:	603ff516 	blt	r12,zero,b67c <__alt_data_end+0xfc00b67c>
    b6a8:	020007c4 	movi	r8,31
    b6ac:	427fca36 	bltu	r8,r9,b5d8 <__alt_data_end+0xfc00b5d8>
    b6b0:	5280100c 	andi	r10,r10,64
    b6b4:	503fc826 	beq	r10,zero,b5d8 <__alt_data_end+0xfc00b5d8>
    b6b8:	023fffc4 	movi	r8,-1
    b6bc:	4252983a 	sll	r9,r8,r9
    b6c0:	1a46b03a 	or	r3,r3,r9
    b6c4:	003fc506 	br	b5dc <__alt_data_end+0xfc00b5dc>
    b6c8:	3017883a 	mov	r11,r6
    b6cc:	0007883a 	mov	r3,zero
    b6d0:	0015883a 	mov	r10,zero
    b6d4:	5a000003 	ldbu	r8,0(r11)
    b6d8:	58800044 	addi	r2,r11,1
    b6dc:	1017883a 	mov	r11,r2
    b6e0:	42401fcc 	andi	r9,r8,127
    b6e4:	4a92983a 	sll	r9,r9,r10
    b6e8:	42003fcc 	andi	r8,r8,255
    b6ec:	4200201c 	xori	r8,r8,128
    b6f0:	423fe004 	addi	r8,r8,-128
    b6f4:	1a46b03a 	or	r3,r3,r9
    b6f8:	528001c4 	addi	r10,r10,7
    b6fc:	403ff516 	blt	r8,zero,b6d4 <__alt_data_end+0xfc00b6d4>
    b700:	003fb506 	br	b5d8 <__alt_data_end+0xfc00b5d8>
    b704:	30c00043 	ldbu	r3,1(r6)
    b708:	32000003 	ldbu	r8,0(r6)
    b70c:	30800084 	addi	r2,r6,2
    b710:	1806923a 	slli	r3,r3,8
    b714:	1a06b03a 	or	r3,r3,r8
    b718:	003faf06 	br	b5d8 <__alt_data_end+0xfc00b5d8>
    b71c:	000d23c0 	call	d23c <abort>
    b720:	308000c4 	addi	r2,r6,3
    b724:	00ffff04 	movi	r3,-4
    b728:	10c4703a 	and	r2,r2,r3
    b72c:	10c00017 	ldw	r3,0(r2)
    b730:	10800104 	addi	r2,r2,4
    b734:	38c00015 	stw	r3,0(r7)
    b738:	dfc00017 	ldw	ra,0(sp)
    b73c:	dec00104 	addi	sp,sp,4
    b740:	f800283a 	ret
    b744:	300b883a 	mov	r5,r6
    b748:	003fa706 	br	b5e8 <__alt_data_end+0xfc00b5e8>

0000b74c <_ZL15get_ttype_entryP16lsda_header_infom>:
    b74c:	defffc04 	addi	sp,sp,-16
    b750:	dfc00315 	stw	ra,12(sp)
    b754:	dc000215 	stw	r16,8(sp)
    b758:	2021883a 	mov	r16,r4
    b75c:	21000503 	ldbu	r4,20(r4)
    b760:	d9400115 	stw	r5,4(sp)
    b764:	000b49c0 	call	b49c <_ZL21size_of_encoded_valueh>
    b768:	d9400117 	ldw	r5,4(sp)
    b76c:	1009883a 	mov	r4,r2
    b770:	000ccf40 	call	ccf4 <__mulsi3>
    b774:	81800317 	ldw	r6,12(r16)
    b778:	81400217 	ldw	r5,8(r16)
    b77c:	81000503 	ldbu	r4,20(r16)
    b780:	d80f883a 	mov	r7,sp
    b784:	308dc83a 	sub	r6,r6,r2
    b788:	000b5400 	call	b540 <_ZL28read_encoded_value_with_basehjPKhPj>
    b78c:	d8800017 	ldw	r2,0(sp)
    b790:	dfc00317 	ldw	ra,12(sp)
    b794:	dc000217 	ldw	r16,8(sp)
    b798:	dec00404 	addi	sp,sp,16
    b79c:	f800283a 	ret

0000b7a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b7a0:	deffff04 	addi	sp,sp,-4
    b7a4:	dfc00015 	stw	ra,0(sp)
    b7a8:	20c03fcc 	andi	r3,r4,255
    b7ac:	00803fc4 	movi	r2,255
    b7b0:	18800e26 	beq	r3,r2,b7ec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b7b4:	20801c0c 	andi	r2,r4,112
    b7b8:	00c00804 	movi	r3,32
    b7bc:	10c01726 	beq	r2,r3,b81c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    b7c0:	18800e2e 	bgeu	r3,r2,b7fc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    b7c4:	00c01004 	movi	r3,64
    b7c8:	10c01026 	beq	r2,r3,b80c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    b7cc:	00c01404 	movi	r3,80
    b7d0:	10c00626 	beq	r2,r3,b7ec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b7d4:	00c00c04 	movi	r3,48
    b7d8:	10c00b1e 	bne	r2,r3,b808 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    b7dc:	2809883a 	mov	r4,r5
    b7e0:	dfc00017 	ldw	ra,0(sp)
    b7e4:	dec00104 	addi	sp,sp,4
    b7e8:	000cffc1 	jmpi	cffc <_Unwind_GetDataRelBase>
    b7ec:	0005883a 	mov	r2,zero
    b7f0:	dfc00017 	ldw	ra,0(sp)
    b7f4:	dec00104 	addi	sp,sp,4
    b7f8:	f800283a 	ret
    b7fc:	103ffb26 	beq	r2,zero,b7ec <__alt_data_end+0xfc00b7ec>
    b800:	00c00404 	movi	r3,16
    b804:	10fff926 	beq	r2,r3,b7ec <__alt_data_end+0xfc00b7ec>
    b808:	000d23c0 	call	d23c <abort>
    b80c:	2809883a 	mov	r4,r5
    b810:	dfc00017 	ldw	ra,0(sp)
    b814:	dec00104 	addi	sp,sp,4
    b818:	000cfec1 	jmpi	cfec <_Unwind_GetRegionStart>
    b81c:	2809883a 	mov	r4,r5
    b820:	dfc00017 	ldw	ra,0(sp)
    b824:	dec00104 	addi	sp,sp,4
    b828:	000d0041 	jmpi	d004 <_Unwind_GetTextRelBase>

0000b82c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b82c:	defffb04 	addi	sp,sp,-20
    b830:	dcc00315 	stw	r19,12(sp)
    b834:	dc400115 	stw	r17,4(sp)
    b838:	dc000015 	stw	r16,0(sp)
    b83c:	dfc00415 	stw	ra,16(sp)
    b840:	dc800215 	stw	r18,8(sp)
    b844:	2027883a 	mov	r19,r4
    b848:	2821883a 	mov	r16,r5
    b84c:	3023883a 	mov	r17,r6
    b850:	20003f26 	beq	r4,zero,b950 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    b854:	000cfec0 	call	cfec <_Unwind_GetRegionStart>
    b858:	88800015 	stw	r2,0(r17)
    b85c:	84800003 	ldbu	r18,0(r16)
    b860:	00c03fc4 	movi	r3,255
    b864:	84000044 	addi	r16,r16,1
    b868:	90c03726 	beq	r18,r3,b948 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    b86c:	980b883a 	mov	r5,r19
    b870:	9009883a 	mov	r4,r18
    b874:	000b7a00 	call	b7a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b878:	800d883a 	mov	r6,r16
    b87c:	89c00104 	addi	r7,r17,4
    b880:	100b883a 	mov	r5,r2
    b884:	9009883a 	mov	r4,r18
    b888:	000b5400 	call	b540 <_ZL28read_encoded_value_with_basehjPKhPj>
    b88c:	1021883a 	mov	r16,r2
    b890:	80c00003 	ldbu	r3,0(r16)
    b894:	01003fc4 	movi	r4,255
    b898:	80800044 	addi	r2,r16,1
    b89c:	88c00505 	stb	r3,20(r17)
    b8a0:	18c03fcc 	andi	r3,r3,255
    b8a4:	19002c26 	beq	r3,r4,b958 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    b8a8:	100f883a 	mov	r7,r2
    b8ac:	000d883a 	mov	r6,zero
    b8b0:	000b883a 	mov	r5,zero
    b8b4:	38c00003 	ldbu	r3,0(r7)
    b8b8:	10800044 	addi	r2,r2,1
    b8bc:	100f883a 	mov	r7,r2
    b8c0:	19001fcc 	andi	r4,r3,127
    b8c4:	2148983a 	sll	r4,r4,r5
    b8c8:	18c03fcc 	andi	r3,r3,255
    b8cc:	18c0201c 	xori	r3,r3,128
    b8d0:	18ffe004 	addi	r3,r3,-128
    b8d4:	310cb03a 	or	r6,r6,r4
    b8d8:	294001c4 	addi	r5,r5,7
    b8dc:	183ff516 	blt	r3,zero,b8b4 <__alt_data_end+0xfc00b8b4>
    b8e0:	118d883a 	add	r6,r2,r6
    b8e4:	89800315 	stw	r6,12(r17)
    b8e8:	10c00003 	ldbu	r3,0(r2)
    b8ec:	000d883a 	mov	r6,zero
    b8f0:	10800044 	addi	r2,r2,1
    b8f4:	88c00545 	stb	r3,21(r17)
    b8f8:	000b883a 	mov	r5,zero
    b8fc:	10c00003 	ldbu	r3,0(r2)
    b900:	10800044 	addi	r2,r2,1
    b904:	19001fcc 	andi	r4,r3,127
    b908:	2148983a 	sll	r4,r4,r5
    b90c:	18c03fcc 	andi	r3,r3,255
    b910:	18c0201c 	xori	r3,r3,128
    b914:	18ffe004 	addi	r3,r3,-128
    b918:	310cb03a 	or	r6,r6,r4
    b91c:	294001c4 	addi	r5,r5,7
    b920:	183ff616 	blt	r3,zero,b8fc <__alt_data_end+0xfc00b8fc>
    b924:	118d883a 	add	r6,r2,r6
    b928:	89800415 	stw	r6,16(r17)
    b92c:	dfc00417 	ldw	ra,16(sp)
    b930:	dcc00317 	ldw	r19,12(sp)
    b934:	dc800217 	ldw	r18,8(sp)
    b938:	dc400117 	ldw	r17,4(sp)
    b93c:	dc000017 	ldw	r16,0(sp)
    b940:	dec00504 	addi	sp,sp,20
    b944:	f800283a 	ret
    b948:	88800115 	stw	r2,4(r17)
    b94c:	003fd006 	br	b890 <__alt_data_end+0xfc00b890>
    b950:	0005883a 	mov	r2,zero
    b954:	003fc006 	br	b858 <__alt_data_end+0xfc00b858>
    b958:	88000315 	stw	zero,12(r17)
    b95c:	003fe206 	br	b8e8 <__alt_data_end+0xfc00b8e8>

0000b960 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    b960:	28800017 	ldw	r2,0(r5)
    b964:	30c00017 	ldw	r3,0(r6)
    b968:	defffb04 	addi	sp,sp,-20
    b96c:	10800217 	ldw	r2,8(r2)
    b970:	dc400315 	stw	r17,12(sp)
    b974:	dc000215 	stw	r16,8(sp)
    b978:	d9400115 	stw	r5,4(sp)
    b97c:	dfc00415 	stw	ra,16(sp)
    b980:	2021883a 	mov	r16,r4
    b984:	d8c00015 	stw	r3,0(sp)
    b988:	2809883a 	mov	r4,r5
    b98c:	3023883a 	mov	r17,r6
    b990:	103ee83a 	callr	r2
    b994:	10803fcc 	andi	r2,r2,255
    b998:	d9400117 	ldw	r5,4(sp)
    b99c:	10000326 	beq	r2,zero,b9ac <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    b9a0:	d8800017 	ldw	r2,0(sp)
    b9a4:	10800017 	ldw	r2,0(r2)
    b9a8:	d8800015 	stw	r2,0(sp)
    b9ac:	80800017 	ldw	r2,0(r16)
    b9b0:	01c00044 	movi	r7,1
    b9b4:	d80d883a 	mov	r6,sp
    b9b8:	10800417 	ldw	r2,16(r2)
    b9bc:	8009883a 	mov	r4,r16
    b9c0:	103ee83a 	callr	r2
    b9c4:	10c03fcc 	andi	r3,r2,255
    b9c8:	18000226 	beq	r3,zero,b9d4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    b9cc:	d8c00017 	ldw	r3,0(sp)
    b9d0:	88c00015 	stw	r3,0(r17)
    b9d4:	dfc00417 	ldw	ra,16(sp)
    b9d8:	dc400317 	ldw	r17,12(sp)
    b9dc:	dc000217 	ldw	r16,8(sp)
    b9e0:	dec00504 	addi	sp,sp,20
    b9e4:	f800283a 	ret

0000b9e8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    b9e8:	defff304 	addi	sp,sp,-52
    b9ec:	dc800615 	stw	r18,24(sp)
    b9f0:	3825d23a 	srai	r18,r7,8
    b9f4:	dd000815 	stw	r20,32(sp)
    b9f8:	dcc00715 	stw	r19,28(sp)
    b9fc:	dfc00c15 	stw	ra,48(sp)
    ba00:	ddc00b15 	stw	r23,44(sp)
    ba04:	dd800a15 	stw	r22,40(sp)
    ba08:	dd400915 	stw	r21,36(sp)
    ba0c:	dc400515 	stw	r17,20(sp)
    ba10:	dc000415 	stw	r16,16(sp)
    ba14:	d9400215 	stw	r5,8(sp)
    ba18:	3827883a 	mov	r19,r7
    ba1c:	2029883a 	mov	r20,r4
    ba20:	9000010e 	bge	r18,zero,ba28 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    ba24:	04a5c83a 	sub	r18,zero,r18
    ba28:	000b883a 	mov	r5,zero
    ba2c:	01000144 	movi	r4,5
    ba30:	d9800315 	stw	r6,12(sp)
    ba34:	000b7a00 	call	b7a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    ba38:	d9800317 	ldw	r6,12(sp)
    ba3c:	d9c00104 	addi	r7,sp,4
    ba40:	100b883a 	mov	r5,r2
    ba44:	01000144 	movi	r4,5
    ba48:	000b5400 	call	b540 <_ZL28read_encoded_value_with_basehjPKhPj>
    ba4c:	017ffe44 	movi	r5,-7
    ba50:	1009883a 	mov	r4,r2
    ba54:	1021883a 	mov	r16,r2
    ba58:	000ccf40 	call	ccf4 <__mulsi3>
    ba5c:	102d883a 	mov	r22,r2
    ba60:	0023883a 	mov	r17,zero
    ba64:	85400003 	ldbu	r21,0(r16)
    ba68:	8009883a 	mov	r4,r16
    ba6c:	014001c4 	movi	r5,7
    ba70:	000ccf40 	call	ccf4 <__mulsi3>
    ba74:	a8c01fcc 	andi	r3,r21,127
    ba78:	1585883a 	add	r2,r2,r22
    ba7c:	1886983a 	sll	r3,r3,r2
    ba80:	ad403fcc 	andi	r21,r21,255
    ba84:	ad40201c 	xori	r21,r21,128
    ba88:	ad7fe004 	addi	r21,r21,-128
    ba8c:	84000044 	addi	r16,r16,1
    ba90:	88e2b03a 	or	r17,r17,r3
    ba94:	a83ff316 	blt	r21,zero,ba64 <__alt_data_end+0xfc00ba64>
    ba98:	8461883a 	add	r16,r16,r17
    ba9c:	017ffe44 	movi	r5,-7
    baa0:	8009883a 	mov	r4,r16
    baa4:	000ccf40 	call	ccf4 <__mulsi3>
    baa8:	102d883a 	mov	r22,r2
    baac:	002b883a 	mov	r21,zero
    bab0:	84400003 	ldbu	r17,0(r16)
    bab4:	8009883a 	mov	r4,r16
    bab8:	014001c4 	movi	r5,7
    babc:	000ccf40 	call	ccf4 <__mulsi3>
    bac0:	88c01fcc 	andi	r3,r17,127
    bac4:	1585883a 	add	r2,r2,r22
    bac8:	1886983a 	sll	r3,r3,r2
    bacc:	8c403fcc 	andi	r17,r17,255
    bad0:	8c40201c 	xori	r17,r17,128
    bad4:	8c7fe004 	addi	r17,r17,-128
    bad8:	84000044 	addi	r16,r16,1
    badc:	a8eab03a 	or	r21,r21,r3
    bae0:	883ff316 	blt	r17,zero,bab0 <__alt_data_end+0xfc00bab0>
    bae4:	94403fcc 	andi	r17,r18,255
    bae8:	8c7fffc4 	addi	r17,r17,-1
    baec:	8463883a 	add	r17,r16,r17
    baf0:	ad4000c4 	addi	r21,r21,3
    baf4:	00bfff04 	movi	r2,-4
    baf8:	ac21883a 	add	r16,r21,r16
    bafc:	017ffe44 	movi	r5,-7
    bb00:	8809883a 	mov	r4,r17
    bb04:	80a0703a 	and	r16,r16,r2
    bb08:	000ccf40 	call	ccf4 <__mulsi3>
    bb0c:	0025883a 	mov	r18,zero
    bb10:	102f883a 	mov	r23,r2
    bb14:	8d800003 	ldbu	r22,0(r17)
    bb18:	8809883a 	mov	r4,r17
    bb1c:	014001c4 	movi	r5,7
    bb20:	000ccf40 	call	ccf4 <__mulsi3>
    bb24:	b0c01fcc 	andi	r3,r22,127
    bb28:	15c5883a 	add	r2,r2,r23
    bb2c:	1886983a 	sll	r3,r3,r2
    bb30:	b5803fcc 	andi	r22,r22,255
    bb34:	b580201c 	xori	r22,r22,128
    bb38:	8d400044 	addi	r21,r17,1
    bb3c:	b5bfe004 	addi	r22,r22,-128
    bb40:	90e4b03a 	or	r18,r18,r3
    bb44:	a823883a 	mov	r17,r21
    bb48:	b03ff216 	blt	r22,zero,bb14 <__alt_data_end+0xfc00bb14>
    bb4c:	9cc03fcc 	andi	r19,r19,255
    bb50:	90002426 	beq	r18,zero,bbe4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    bb54:	9809883a 	mov	r4,r19
    bb58:	000b49c0 	call	b49c <_ZL21size_of_encoded_valueh>
    bb5c:	100b883a 	mov	r5,r2
    bb60:	913fffc4 	addi	r4,r18,-1
    bb64:	000ccf40 	call	ccf4 <__mulsi3>
    bb68:	d9400d17 	ldw	r5,52(sp)
    bb6c:	d80f883a 	mov	r7,sp
    bb70:	9809883a 	mov	r4,r19
    bb74:	140d883a 	add	r6,r2,r16
    bb78:	000b5400 	call	b540 <_ZL28read_encoded_value_with_basehjPKhPj>
    bb7c:	d9000017 	ldw	r4,0(sp)
    bb80:	d9800204 	addi	r6,sp,8
    bb84:	a00b883a 	mov	r5,r20
    bb88:	000b9600 	call	b960 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bb8c:	10c03fcc 	andi	r3,r2,255
    bb90:	1800151e 	bne	r3,zero,bbe8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    bb94:	a809883a 	mov	r4,r21
    bb98:	017ffe44 	movi	r5,-7
    bb9c:	000ccf40 	call	ccf4 <__mulsi3>
    bba0:	102d883a 	mov	r22,r2
    bba4:	a809883a 	mov	r4,r21
    bba8:	0025883a 	mov	r18,zero
    bbac:	24400003 	ldbu	r17,0(r4)
    bbb0:	014001c4 	movi	r5,7
    bbb4:	000ccf40 	call	ccf4 <__mulsi3>
    bbb8:	88c01fcc 	andi	r3,r17,127
    bbbc:	1585883a 	add	r2,r2,r22
    bbc0:	1886983a 	sll	r3,r3,r2
    bbc4:	8c403fcc 	andi	r17,r17,255
    bbc8:	8c40201c 	xori	r17,r17,128
    bbcc:	ad400044 	addi	r21,r21,1
    bbd0:	8c7fe004 	addi	r17,r17,-128
    bbd4:	90e4b03a 	or	r18,r18,r3
    bbd8:	a809883a 	mov	r4,r21
    bbdc:	883ff316 	blt	r17,zero,bbac <__alt_data_end+0xfc00bbac>
    bbe0:	003fdb06 	br	bb50 <__alt_data_end+0xfc00bb50>
    bbe4:	0005883a 	mov	r2,zero
    bbe8:	dfc00c17 	ldw	ra,48(sp)
    bbec:	ddc00b17 	ldw	r23,44(sp)
    bbf0:	dd800a17 	ldw	r22,40(sp)
    bbf4:	dd400917 	ldw	r21,36(sp)
    bbf8:	dd000817 	ldw	r20,32(sp)
    bbfc:	dcc00717 	ldw	r19,28(sp)
    bc00:	dc800617 	ldw	r18,24(sp)
    bc04:	dc400517 	ldw	r17,20(sp)
    bc08:	dc000417 	ldw	r16,16(sp)
    bc0c:	dec00d04 	addi	sp,sp,52
    bc10:	f800283a 	ret

0000bc14 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    bc14:	defffb04 	addi	sp,sp,-20
    bc18:	dc000115 	stw	r16,4(sp)
    bc1c:	24000317 	ldw	r16,12(r4)
    bc20:	01ce303a 	nor	r7,zero,r7
    bc24:	dc800315 	stw	r18,12(sp)
    bc28:	dc400215 	stw	r17,8(sp)
    bc2c:	dfc00415 	stw	ra,16(sp)
    bc30:	2023883a 	mov	r17,r4
    bc34:	2825883a 	mov	r18,r5
    bc38:	d9800015 	stw	r6,0(sp)
    bc3c:	81e1883a 	add	r16,r16,r7
    bc40:	800d883a 	mov	r6,r16
    bc44:	000b883a 	mov	r5,zero
    bc48:	0009883a 	mov	r4,zero
    bc4c:	30800003 	ldbu	r2,0(r6)
    bc50:	84000044 	addi	r16,r16,1
    bc54:	800d883a 	mov	r6,r16
    bc58:	10c01fcc 	andi	r3,r2,127
    bc5c:	1906983a 	sll	r3,r3,r4
    bc60:	10803fcc 	andi	r2,r2,255
    bc64:	1080201c 	xori	r2,r2,128
    bc68:	10bfe004 	addi	r2,r2,-128
    bc6c:	28cab03a 	or	r5,r5,r3
    bc70:	210001c4 	addi	r4,r4,7
    bc74:	103ff516 	blt	r2,zero,bc4c <__alt_data_end+0xfc00bc4c>
    bc78:	28000e26 	beq	r5,zero,bcb4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    bc7c:	8809883a 	mov	r4,r17
    bc80:	000b74c0 	call	b74c <_ZL15get_ttype_entryP16lsda_header_infom>
    bc84:	d80d883a 	mov	r6,sp
    bc88:	900b883a 	mov	r5,r18
    bc8c:	1009883a 	mov	r4,r2
    bc90:	000b9600 	call	b960 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bc94:	10c03fcc 	andi	r3,r2,255
    bc98:	183fe926 	beq	r3,zero,bc40 <__alt_data_end+0xfc00bc40>
    bc9c:	dfc00417 	ldw	ra,16(sp)
    bca0:	dc800317 	ldw	r18,12(sp)
    bca4:	dc400217 	ldw	r17,8(sp)
    bca8:	dc000117 	ldw	r16,4(sp)
    bcac:	dec00504 	addi	sp,sp,20
    bcb0:	f800283a 	ret
    bcb4:	0005883a 	mov	r2,zero
    bcb8:	003ff806 	br	bc9c <__alt_data_end+0xfc00bc9c>

0000bcbc <__gxx_personality_sj0>:
    bcbc:	00800074 	movhi	r2,1
    bcc0:	deffdd04 	addi	sp,sp,-140
    bcc4:	10af2f04 	addi	r2,r2,-17220
    bcc8:	d8800e15 	stw	r2,56(sp)
    bccc:	008000b4 	movhi	r2,2
    bcd0:	108a7004 	addi	r2,r2,10688
    bcd4:	d8800f15 	stw	r2,60(sp)
    bcd8:	00800074 	movhi	r2,1
    bcdc:	10b0a504 	addi	r2,r2,-15724
    bce0:	d9001515 	stw	r4,84(sp)
    bce4:	d9000804 	addi	r4,sp,32
    bce8:	d8801115 	stw	r2,68(sp)
    bcec:	dfc02215 	stw	ra,136(sp)
    bcf0:	df002115 	stw	fp,132(sp)
    bcf4:	dec01015 	stw	sp,64(sp)
    bcf8:	dec01215 	stw	sp,72(sp)
    bcfc:	d9401915 	stw	r5,100(sp)
    bd00:	d9801615 	stw	r6,88(sp)
    bd04:	d9c01715 	stw	r7,92(sp)
    bd08:	000cf240 	call	cf24 <_Unwind_SjLj_Register>
    bd0c:	d8c01517 	ldw	r3,84(sp)
    bd10:	d8000715 	stw	zero,28(sp)
    bd14:	d8000615 	stw	zero,24(sp)
    bd18:	00800044 	movi	r2,1
    bd1c:	18800926 	beq	r3,r2,bd44 <__gxx_personality_sj0+0x88>
    bd20:	01c000c4 	movi	r7,3
    bd24:	d9c01515 	stw	r7,84(sp)
    bd28:	d9000804 	addi	r4,sp,32
    bd2c:	000cf3c0 	call	cf3c <_Unwind_SjLj_Unregister>
    bd30:	d8801517 	ldw	r2,84(sp)
    bd34:	dfc02217 	ldw	ra,136(sp)
    bd38:	df002117 	ldw	fp,132(sp)
    bd3c:	dec02304 	addi	sp,sp,140
    bd40:	f800283a 	ret
    bd44:	d9001617 	ldw	r4,88(sp)
    bd48:	00af3574 	movhi	r2,48341
    bd4c:	d9c01717 	ldw	r7,92(sp)
    bd50:	10b54004 	addi	r2,r2,-11008
    bd54:	00ee2cb4 	movhi	r3,47282
    bd58:	2085883a 	add	r2,r4,r2
    bd5c:	18eaaf04 	addi	r3,r3,-21828
    bd60:	d8801b15 	stw	r2,108(sp)
    bd64:	38c7883a 	add	r3,r7,r3
    bd68:	1105803a 	cmpltu	r2,r2,r4
    bd6c:	10c7883a 	add	r3,r2,r3
    bd70:	d8c01c15 	stw	r3,112(sp)
    bd74:	d8c01917 	ldw	r3,100(sp)
    bd78:	00800184 	movi	r2,6
    bd7c:	18805426 	beq	r3,r2,bed0 <__gxx_personality_sj0+0x214>
    bd80:	d9002417 	ldw	r4,144(sp)
    bd84:	00bfffc4 	movi	r2,-1
    bd88:	d8800915 	stw	r2,36(sp)
    bd8c:	000cfe00 	call	cfe0 <_Unwind_GetLanguageSpecificData>
    bd90:	d8801a15 	stw	r2,104(sp)
    bd94:	1000c926 	beq	r2,zero,c0bc <__gxx_personality_sj0+0x400>
    bd98:	d9002417 	ldw	r4,144(sp)
    bd9c:	d80d883a 	mov	r6,sp
    bda0:	100b883a 	mov	r5,r2
    bda4:	000b82c0 	call	b82c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bda8:	d9402417 	ldw	r5,144(sp)
    bdac:	d9000503 	ldbu	r4,20(sp)
    bdb0:	d8801515 	stw	r2,84(sp)
    bdb4:	000b7a00 	call	b7a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bdb8:	d9002417 	ldw	r4,144(sp)
    bdbc:	d9400604 	addi	r5,sp,24
    bdc0:	d8800215 	stw	r2,8(sp)
    bdc4:	000cfb00 	call	cfb0 <_Unwind_GetIPInfo>
    bdc8:	d8c00617 	ldw	r3,24(sp)
    bdcc:	18006126 	beq	r3,zero,bf54 <__gxx_personality_sj0+0x298>
    bdd0:	1000ba16 	blt	r2,zero,c0bc <__gxx_personality_sj0+0x400>
    bdd4:	10002f1e 	bne	r2,zero,be94 <__gxx_personality_sj0+0x1d8>
    bdd8:	d8001515 	stw	zero,84(sp)
    bddc:	d8001f15 	stw	zero,124(sp)
    bde0:	d8001815 	stw	zero,96(sp)
    bde4:	00c00044 	movi	r3,1
    bde8:	d9001917 	ldw	r4,100(sp)
    bdec:	2080004c 	andi	r2,r4,1
    bdf0:	1000b51e 	bne	r2,zero,c0c8 <__gxx_personality_sj0+0x40c>
    bdf4:	d9001917 	ldw	r4,100(sp)
    bdf8:	2080020c 	andi	r2,r4,8
    bdfc:	1000b71e 	bne	r2,zero,c0dc <__gxx_personality_sj0+0x420>
    be00:	d9c01c17 	ldw	r7,112(sp)
    be04:	3800b826 	beq	r7,zero,c0e8 <__gxx_personality_sj0+0x42c>
    be08:	00800044 	movi	r2,1
    be0c:	1880b526 	beq	r3,r2,c0e4 <__gxx_personality_sj0+0x428>
    be10:	d9c01517 	ldw	r7,84(sp)
    be14:	3800f516 	blt	r7,zero,c1ec <__gxx_personality_sj0+0x530>
    be18:	d9002417 	ldw	r4,144(sp)
    be1c:	d9802317 	ldw	r6,140(sp)
    be20:	00bfffc4 	movi	r2,-1
    be24:	000b883a 	mov	r5,zero
    be28:	d8800915 	stw	r2,36(sp)
    be2c:	000cf840 	call	cf84 <_Unwind_SetGR>
    be30:	d9801517 	ldw	r6,84(sp)
    be34:	d9002417 	ldw	r4,144(sp)
    be38:	01400044 	movi	r5,1
    be3c:	000cf840 	call	cf84 <_Unwind_SetGR>
    be40:	d9002417 	ldw	r4,144(sp)
    be44:	d9401f17 	ldw	r5,124(sp)
    be48:	000cfd00 	call	cfd0 <_Unwind_SetIP>
    be4c:	010001c4 	movi	r4,7
    be50:	d9001515 	stw	r4,84(sp)
    be54:	003fb406 	br	bd28 <__alt_data_end+0xfc00bd28>
    be58:	000f883a 	mov	r7,zero
    be5c:	000d883a 	mov	r6,zero
    be60:	19000003 	ldbu	r4,0(r3)
    be64:	18c00044 	addi	r3,r3,1
    be68:	d8c01515 	stw	r3,84(sp)
    be6c:	21401fcc 	andi	r5,r4,127
    be70:	298a983a 	sll	r5,r5,r6
    be74:	21003fcc 	andi	r4,r4,255
    be78:	2100201c 	xori	r4,r4,128
    be7c:	213fe004 	addi	r4,r4,-128
    be80:	394eb03a 	or	r7,r7,r5
    be84:	318001c4 	addi	r6,r6,7
    be88:	203ff516 	blt	r4,zero,be60 <__alt_data_end+0xfc00be60>
    be8c:	10bfffc4 	addi	r2,r2,-1
    be90:	10003226 	beq	r2,zero,bf5c <__gxx_personality_sj0+0x2a0>
    be94:	d9c01517 	ldw	r7,84(sp)
    be98:	0011883a 	mov	r8,zero
    be9c:	000d883a 	mov	r6,zero
    bea0:	39000003 	ldbu	r4,0(r7)
    bea4:	38c00044 	addi	r3,r7,1
    bea8:	180f883a 	mov	r7,r3
    beac:	21401fcc 	andi	r5,r4,127
    beb0:	298a983a 	sll	r5,r5,r6
    beb4:	21003fcc 	andi	r4,r4,255
    beb8:	2100201c 	xori	r4,r4,128
    bebc:	213fe004 	addi	r4,r4,-128
    bec0:	4150b03a 	or	r8,r8,r5
    bec4:	318001c4 	addi	r6,r6,7
    bec8:	203ff516 	blt	r4,zero,bea0 <__alt_data_end+0xfc00bea0>
    becc:	003fe206 	br	be58 <__alt_data_end+0xfc00be58>
    bed0:	d9001c17 	ldw	r4,112(sp)
    bed4:	203faa1e 	bne	r4,zero,bd80 <__alt_data_end+0xfc00bd80>
    bed8:	d9c01517 	ldw	r7,84(sp)
    bedc:	d8801b17 	ldw	r2,108(sp)
    bee0:	38bfa736 	bltu	r7,r2,bd80 <__alt_data_end+0xfc00bd80>
    bee4:	d8c02317 	ldw	r3,140(sp)
    bee8:	18fffe17 	ldw	r3,-8(r3)
    beec:	d8c01f15 	stw	r3,124(sp)
    bef0:	18008226 	beq	r3,zero,c0fc <__gxx_personality_sj0+0x440>
    bef4:	d9002317 	ldw	r4,140(sp)
    bef8:	d9c02317 	ldw	r7,140(sp)
    befc:	213ffb17 	ldw	r4,-20(r4)
    bf00:	39fffd17 	ldw	r7,-12(r7)
    bf04:	d9001515 	stw	r4,84(sp)
    bf08:	d9c01a15 	stw	r7,104(sp)
    bf0c:	d8801517 	ldw	r2,84(sp)
    bf10:	103fc10e 	bge	r2,zero,be18 <__alt_data_end+0xfc00be18>
    bf14:	d9002417 	ldw	r4,144(sp)
    bf18:	d9401a17 	ldw	r5,104(sp)
    bf1c:	d80d883a 	mov	r6,sp
    bf20:	00bfffc4 	movi	r2,-1
    bf24:	d8800915 	stw	r2,36(sp)
    bf28:	000b82c0 	call	b82c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bf2c:	d9402417 	ldw	r5,144(sp)
    bf30:	d9000503 	ldbu	r4,20(sp)
    bf34:	000b7a00 	call	b7a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bf38:	d9000503 	ldbu	r4,20(sp)
    bf3c:	d9402417 	ldw	r5,144(sp)
    bf40:	d8800215 	stw	r2,8(sp)
    bf44:	000b7a00 	call	b7a0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bf48:	d8c02317 	ldw	r3,140(sp)
    bf4c:	18bffe15 	stw	r2,-8(r3)
    bf50:	003fb106 	br	be18 <__alt_data_end+0xfc00be18>
    bf54:	10bfffc4 	addi	r2,r2,-1
    bf58:	003f9d06 	br	bdd0 <__alt_data_end+0xfc00bdd0>
    bf5c:	42000044 	addi	r8,r8,1
    bf60:	da001f15 	stw	r8,124(sp)
    bf64:	38005326 	beq	r7,zero,c0b4 <__gxx_personality_sj0+0x3f8>
    bf68:	d8800417 	ldw	r2,16(sp)
    bf6c:	39ffffc4 	addi	r7,r7,-1
    bf70:	11c5883a 	add	r2,r2,r7
    bf74:	d8801815 	stw	r2,96(sp)
    bf78:	40005026 	beq	r8,zero,c0bc <__gxx_personality_sj0+0x400>
    bf7c:	10007426 	beq	r2,zero,c150 <__gxx_personality_sj0+0x494>
    bf80:	d8801917 	ldw	r2,100(sp)
    bf84:	1080020c 	andi	r2,r2,8
    bf88:	d8802015 	stw	r2,128(sp)
    bf8c:	1000a21e 	bne	r2,zero,c218 <__gxx_personality_sj0+0x55c>
    bf90:	d8c01c17 	ldw	r3,112(sp)
    bf94:	1800b026 	beq	r3,zero,c258 <__gxx_personality_sj0+0x59c>
    bf98:	01c000f4 	movhi	r7,3
    bf9c:	39f2ab04 	addi	r7,r7,-13652
    bfa0:	d9c01e15 	stw	r7,120(sp)
    bfa4:	d8001d05 	stb	zero,116(sp)
    bfa8:	d8c01817 	ldw	r3,96(sp)
    bfac:	d8001515 	stw	zero,84(sp)
    bfb0:	0009883a 	mov	r4,zero
    bfb4:	19400003 	ldbu	r5,0(r3)
    bfb8:	18800044 	addi	r2,r3,1
    bfbc:	d9c01517 	ldw	r7,84(sp)
    bfc0:	28c01fcc 	andi	r3,r5,127
    bfc4:	1906983a 	sll	r3,r3,r4
    bfc8:	29803fcc 	andi	r6,r5,255
    bfcc:	3180201c 	xori	r6,r6,128
    bfd0:	38ceb03a 	or	r7,r7,r3
    bfd4:	d8801715 	stw	r2,92(sp)
    bfd8:	31bfe004 	addi	r6,r6,-128
    bfdc:	d9c01515 	stw	r7,84(sp)
    bfe0:	210001c4 	addi	r4,r4,7
    bfe4:	1007883a 	mov	r3,r2
    bfe8:	303ff216 	blt	r6,zero,bfb4 <__alt_data_end+0xfc00bfb4>
    bfec:	00c007c4 	movi	r3,31
    bff0:	19000836 	bltu	r3,r4,c014 <__gxx_personality_sj0+0x358>
    bff4:	2940100c 	andi	r5,r5,64
    bff8:	28000626 	beq	r5,zero,c014 <__gxx_personality_sj0+0x358>
    bffc:	01c00044 	movi	r7,1
    c000:	3908983a 	sll	r4,r7,r4
    c004:	d8c01517 	ldw	r3,84(sp)
    c008:	0109c83a 	sub	r4,zero,r4
    c00c:	1906b03a 	or	r3,r3,r4
    c010:	d8c01515 	stw	r3,84(sp)
    c014:	d8001615 	stw	zero,88(sp)
    c018:	0009883a 	mov	r4,zero
    c01c:	11400003 	ldbu	r5,0(r2)
    c020:	d9c01617 	ldw	r7,88(sp)
    c024:	10800044 	addi	r2,r2,1
    c028:	28c01fcc 	andi	r3,r5,127
    c02c:	1906983a 	sll	r3,r3,r4
    c030:	29803fcc 	andi	r6,r5,255
    c034:	3180201c 	xori	r6,r6,128
    c038:	38ceb03a 	or	r7,r7,r3
    c03c:	31bfe004 	addi	r6,r6,-128
    c040:	d9c01615 	stw	r7,88(sp)
    c044:	210001c4 	addi	r4,r4,7
    c048:	303ff416 	blt	r6,zero,c01c <__alt_data_end+0xfc00c01c>
    c04c:	008007c4 	movi	r2,31
    c050:	11000736 	bltu	r2,r4,c070 <__gxx_personality_sj0+0x3b4>
    c054:	2940100c 	andi	r5,r5,64
    c058:	28000526 	beq	r5,zero,c070 <__gxx_personality_sj0+0x3b4>
    c05c:	00c00044 	movi	r3,1
    c060:	1908983a 	sll	r4,r3,r4
    c064:	0109c83a 	sub	r4,zero,r4
    c068:	390eb03a 	or	r7,r7,r4
    c06c:	d9c01615 	stw	r7,88(sp)
    c070:	d9001517 	ldw	r4,84(sp)
    c074:	20003c26 	beq	r4,zero,c168 <__gxx_personality_sj0+0x4ac>
    c078:	01003e0e 	bge	zero,r4,c174 <__gxx_personality_sj0+0x4b8>
    c07c:	01ffffc4 	movi	r7,-1
    c080:	200b883a 	mov	r5,r4
    c084:	d809883a 	mov	r4,sp
    c088:	d9c00915 	stw	r7,36(sp)
    c08c:	000b74c0 	call	b74c <_ZL15get_ttype_entryP16lsda_header_infom>
    c090:	10005f26 	beq	r2,zero,c210 <__gxx_personality_sj0+0x554>
    c094:	d8c01e17 	ldw	r3,120(sp)
    c098:	1800571e 	bne	r3,zero,c1f8 <__gxx_personality_sj0+0x53c>
    c09c:	d9001617 	ldw	r4,88(sp)
    c0a0:	20002926 	beq	r4,zero,c148 <__gxx_personality_sj0+0x48c>
    c0a4:	d9c01717 	ldw	r7,92(sp)
    c0a8:	390f883a 	add	r7,r7,r4
    c0ac:	d9c01815 	stw	r7,96(sp)
    c0b0:	003fbd06 	br	bfa8 <__alt_data_end+0xfc00bfa8>
    c0b4:	d8c01f17 	ldw	r3,124(sp)
    c0b8:	1800251e 	bne	r3,zero,c150 <__gxx_personality_sj0+0x494>
    c0bc:	01000204 	movi	r4,8
    c0c0:	d9001515 	stw	r4,84(sp)
    c0c4:	003f1806 	br	bd28 <__alt_data_end+0xfc00bd28>
    c0c8:	d8801c17 	ldw	r2,112(sp)
    c0cc:	10000d26 	beq	r2,zero,c104 <__gxx_personality_sj0+0x448>
    c0d0:	00800184 	movi	r2,6
    c0d4:	d8801515 	stw	r2,84(sp)
    c0d8:	003f1306 	br	bd28 <__alt_data_end+0xfc00bd28>
    c0dc:	00800044 	movi	r2,1
    c0e0:	18bf4d1e 	bne	r3,r2,be18 <__alt_data_end+0xfc00be18>
    c0e4:	000b4140 	call	b414 <_ZSt9terminatev>
    c0e8:	d9001b17 	ldw	r4,108(sp)
    c0ec:	00800044 	movi	r2,1
    c0f0:	113f4536 	bltu	r2,r4,be08 <__alt_data_end+0xfc00be08>
    c0f4:	00800044 	movi	r2,1
    c0f8:	18bf841e 	bne	r3,r2,bf0c <__alt_data_end+0xfc00bf0c>
    c0fc:	d9002317 	ldw	r4,140(sp)
    c100:	000ca980 	call	ca98 <__cxa_call_terminate>
    c104:	d8c01b17 	ldw	r3,108(sp)
    c108:	00800044 	movi	r2,1
    c10c:	10fff036 	bltu	r2,r3,c0d0 <__alt_data_end+0xfc00c0d0>
    c110:	d9002317 	ldw	r4,140(sp)
    c114:	d8801817 	ldw	r2,96(sp)
    c118:	d9c01517 	ldw	r7,84(sp)
    c11c:	d8c01a17 	ldw	r3,104(sp)
    c120:	20bffc15 	stw	r2,-16(r4)
    c124:	d8800717 	ldw	r2,28(sp)
    c128:	21fffb15 	stw	r7,-20(r4)
    c12c:	d9c01f17 	ldw	r7,124(sp)
    c130:	20bfff15 	stw	r2,-4(r4)
    c134:	00800184 	movi	r2,6
    c138:	20fffd15 	stw	r3,-12(r4)
    c13c:	21fffe15 	stw	r7,-8(r4)
    c140:	d8801515 	stw	r2,84(sp)
    c144:	003ef806 	br	bd28 <__alt_data_end+0xfc00bd28>
    c148:	d8801d03 	ldbu	r2,116(sp)
    c14c:	103fdb26 	beq	r2,zero,c0bc <__alt_data_end+0xfc00c0bc>
    c150:	d8c01917 	ldw	r3,100(sp)
    c154:	1880004c 	andi	r2,r3,1
    c158:	103fd81e 	bne	r2,zero,c0bc <__alt_data_end+0xfc00c0bc>
    c15c:	d8001515 	stw	zero,84(sp)
    c160:	00c00084 	movi	r3,2
    c164:	003f2306 	br	bdf4 <__alt_data_end+0xfc00bdf4>
    c168:	00c00044 	movi	r3,1
    c16c:	d8c01d05 	stb	r3,116(sp)
    c170:	003fca06 	br	c09c <__alt_data_end+0xfc00c09c>
    c174:	d9001e17 	ldw	r4,120(sp)
    c178:	20000426 	beq	r4,zero,c18c <__gxx_personality_sj0+0x4d0>
    c17c:	d9c02017 	ldw	r7,128(sp)
    c180:	3800021e 	bne	r7,zero,c18c <__gxx_personality_sj0+0x4d0>
    c184:	d8801c17 	ldw	r2,112(sp)
    c188:	10002726 	beq	r2,zero,c228 <__gxx_personality_sj0+0x56c>
    c18c:	d8801517 	ldw	r2,84(sp)
    c190:	000d883a 	mov	r6,zero
    c194:	000b883a 	mov	r5,zero
    c198:	0088303a 	nor	r4,zero,r2
    c19c:	d8800317 	ldw	r2,12(sp)
    c1a0:	1109883a 	add	r4,r2,r4
    c1a4:	20800003 	ldbu	r2,0(r4)
    c1a8:	21000044 	addi	r4,r4,1
    c1ac:	10c01fcc 	andi	r3,r2,127
    c1b0:	1946983a 	sll	r3,r3,r5
    c1b4:	10803fcc 	andi	r2,r2,255
    c1b8:	1080201c 	xori	r2,r2,128
    c1bc:	10bfe004 	addi	r2,r2,-128
    c1c0:	30ccb03a 	or	r6,r6,r3
    c1c4:	294001c4 	addi	r5,r5,7
    c1c8:	103ff616 	blt	r2,zero,c1a4 <__alt_data_end+0xfc00c1a4>
    c1cc:	3005003a 	cmpeq	r2,r6,zero
    c1d0:	10803fcc 	andi	r2,r2,255
    c1d4:	103fb126 	beq	r2,zero,c09c <__alt_data_end+0xfc00c09c>
    c1d8:	d9c01917 	ldw	r7,100(sp)
    c1dc:	3880004c 	andi	r2,r7,1
    c1e0:	103fb91e 	bne	r2,zero,c0c8 <__alt_data_end+0xfc00c0c8>
    c1e4:	d8802017 	ldw	r2,128(sp)
    c1e8:	10002d26 	beq	r2,zero,c2a0 <__gxx_personality_sj0+0x5e4>
    c1ec:	00800044 	movi	r2,1
    c1f0:	d8800915 	stw	r2,36(sp)
    c1f4:	000b43c0 	call	b43c <_ZSt10unexpectedv>
    c1f8:	d9800704 	addi	r6,sp,28
    c1fc:	180b883a 	mov	r5,r3
    c200:	1009883a 	mov	r4,r2
    c204:	000b9600 	call	b960 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c208:	10803fcc 	andi	r2,r2,255
    c20c:	103fa326 	beq	r2,zero,c09c <__alt_data_end+0xfc00c09c>
    c210:	00c000c4 	movi	r3,3
    c214:	003ef406 	br	bde8 <__alt_data_end+0xfc00bde8>
    c218:	010000f4 	movhi	r4,3
    c21c:	2132a904 	addi	r4,r4,-13660
    c220:	d9001e15 	stw	r4,120(sp)
    c224:	003f5f06 	br	bfa4 <__alt_data_end+0xfc00bfa4>
    c228:	d9001b17 	ldw	r4,108(sp)
    c22c:	00c00044 	movi	r3,1
    c230:	193fd636 	bltu	r3,r4,c18c <__alt_data_end+0xfc00c18c>
    c234:	01ffffc4 	movi	r7,-1
    c238:	d9c00915 	stw	r7,36(sp)
    c23c:	d9800717 	ldw	r6,28(sp)
    c240:	d9c01517 	ldw	r7,84(sp)
    c244:	d9401e17 	ldw	r5,120(sp)
    c248:	d809883a 	mov	r4,sp
    c24c:	000bc140 	call	bc14 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c250:	1080005c 	xori	r2,r2,1
    c254:	003fde06 	br	c1d0 <__alt_data_end+0xfc00c1d0>
    c258:	d9001b17 	ldw	r4,108(sp)
    c25c:	00800044 	movi	r2,1
    c260:	113f4d36 	bltu	r2,r4,bf98 <__alt_data_end+0xfc00bf98>
    c264:	d9c02317 	ldw	r7,140(sp)
    c268:	38800017 	ldw	r2,0(r7)
    c26c:	1080004c 	andi	r2,r2,1
    c270:	1000061e 	bne	r2,zero,c28c <__gxx_personality_sj0+0x5d0>
    c274:	d8c02317 	ldw	r3,140(sp)
    c278:	18800504 	addi	r2,r3,20
    c27c:	d8800715 	stw	r2,28(sp)
    c280:	10bff017 	ldw	r2,-64(r2)
    c284:	d8801e15 	stw	r2,120(sp)
    c288:	003f4606 	br	bfa4 <__alt_data_end+0xfc00bfa4>
    c28c:	38bff517 	ldw	r2,-44(r7)
    c290:	003ffa06 	br	c27c <__alt_data_end+0xfc00c27c>
    c294:	d9000a17 	ldw	r4,40(sp)
    c298:	000c64c0 	call	c64c <__cxa_begin_catch>
    c29c:	003f9106 	br	c0e4 <__alt_data_end+0xfc00c0e4>
    c2a0:	d9c01c17 	ldw	r7,112(sp)
    c2a4:	383eda1e 	bne	r7,zero,be10 <__alt_data_end+0xfc00be10>
    c2a8:	d8c01b17 	ldw	r3,108(sp)
    c2ac:	00800044 	movi	r2,1
    c2b0:	10fed736 	bltu	r2,r3,be10 <__alt_data_end+0xfc00be10>
    c2b4:	00c000c4 	movi	r3,3
    c2b8:	003f8e06 	br	c0f4 <__alt_data_end+0xfc00c0f4>

0000c2bc <__cxa_call_unexpected>:
    c2bc:	00800074 	movhi	r2,1
    c2c0:	deffe604 	addi	sp,sp,-104
    c2c4:	10af2f04 	addi	r2,r2,-17220
    c2c8:	d8800d15 	stw	r2,52(sp)
    c2cc:	008000b4 	movhi	r2,2
    c2d0:	108a7404 	addi	r2,r2,10704
    c2d4:	d8800e15 	stw	r2,56(sp)
    c2d8:	d8800104 	addi	r2,sp,4
    c2dc:	d8800f15 	stw	r2,60(sp)
    c2e0:	00800074 	movhi	r2,1
    c2e4:	10b0d204 	addi	r2,r2,-15544
    c2e8:	d9001415 	stw	r4,80(sp)
    c2ec:	d9000704 	addi	r4,sp,28
    c2f0:	dfc01915 	stw	ra,100(sp)
    c2f4:	d8801015 	stw	r2,64(sp)
    c2f8:	df001815 	stw	fp,96(sp)
    c2fc:	dec01115 	stw	sp,68(sp)
    c300:	000cf240 	call	cf24 <_Unwind_SjLj_Register>
    c304:	d9001417 	ldw	r4,80(sp)
    c308:	000c64c0 	call	c64c <__cxa_begin_catch>
    c30c:	d8c01417 	ldw	r3,80(sp)
    c310:	18bffe17 	ldw	r2,-8(r3)
    c314:	193ff717 	ldw	r4,-36(r3)
    c318:	18fffd17 	ldw	r3,-12(r3)
    c31c:	d8800315 	stw	r2,12(sp)
    c320:	d8c01615 	stw	r3,88(sp)
    c324:	d8c01417 	ldw	r3,80(sp)
    c328:	18fffb17 	ldw	r3,-20(r3)
    c32c:	d8c01515 	stw	r3,84(sp)
    c330:	d8c01417 	ldw	r3,80(sp)
    c334:	18fff817 	ldw	r3,-32(r3)
    c338:	d8c01415 	stw	r3,80(sp)
    c33c:	00c00044 	movi	r3,1
    c340:	d8c00815 	stw	r3,32(sp)
    c344:	000b42c0 	call	b42c <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c348:	d8c00917 	ldw	r3,36(sp)
    c34c:	d8800817 	ldw	r2,32(sp)
    c350:	d8c01715 	stw	r3,92(sp)
    c354:	10000a26 	beq	r2,zero,c380 <__cxa_call_unexpected+0xc4>
    c358:	10bfffc4 	addi	r2,r2,-1
    c35c:	10000126 	beq	r2,zero,c364 <__cxa_call_unexpected+0xa8>
    c360:	003b68fa 	trap	3
    c364:	d8000815 	stw	zero,32(sp)
    c368:	000c7000 	call	c700 <__cxa_end_catch>
    c36c:	000c7000 	call	c700 <__cxa_end_catch>
    c370:	d9001717 	ldw	r4,92(sp)
    c374:	00bfffc4 	movi	r2,-1
    c378:	d8800815 	stw	r2,32(sp)
    c37c:	000d1200 	call	d120 <_Unwind_SjLj_Resume>
    c380:	d9001717 	ldw	r4,92(sp)
    c384:	000c64c0 	call	c64c <__cxa_begin_catch>
    c388:	000caf00 	call	caf0 <__cxa_get_globals_fast>
    c38c:	10800017 	ldw	r2,0(r2)
    c390:	10c00b17 	ldw	r3,44(r2)
    c394:	18c0004c 	andi	r3,r3,1
    c398:	18001e26 	beq	r3,zero,c414 <__cxa_call_unexpected+0x158>
    c39c:	10800017 	ldw	r2,0(r2)
    c3a0:	d8801715 	stw	r2,92(sp)
    c3a4:	d8801517 	ldw	r2,84(sp)
    c3a8:	00802b0e 	bge	zero,r2,c458 <__cxa_call_unexpected+0x19c>
    c3ac:	d8c01717 	ldw	r3,92(sp)
    c3b0:	d8800317 	ldw	r2,12(sp)
    c3b4:	d9c01517 	ldw	r7,84(sp)
    c3b8:	193ff017 	ldw	r4,-64(r3)
    c3bc:	d9801617 	ldw	r6,88(sp)
    c3c0:	d8800015 	stw	r2,0(sp)
    c3c4:	180b883a 	mov	r5,r3
    c3c8:	00800084 	movi	r2,2
    c3cc:	d8800815 	stw	r2,32(sp)
    c3d0:	000b9e80 	call	b9e8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c3d4:	10803fcc 	andi	r2,r2,255
    c3d8:	10001e1e 	bne	r2,zero,c454 <__cxa_call_unexpected+0x198>
    c3dc:	d8800317 	ldw	r2,12(sp)
    c3e0:	d9c01517 	ldw	r7,84(sp)
    c3e4:	d9801617 	ldw	r6,88(sp)
    c3e8:	010000f4 	movhi	r4,3
    c3ec:	d8800015 	stw	r2,0(sp)
    c3f0:	21254504 	addi	r4,r4,-27372
    c3f4:	00800084 	movi	r2,2
    c3f8:	000b883a 	mov	r5,zero
    c3fc:	d8800815 	stw	r2,32(sp)
    c400:	000b9e80 	call	b9e8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c404:	10803fcc 	andi	r2,r2,255
    c408:	1000051e 	bne	r2,zero,c420 <__cxa_call_unexpected+0x164>
    c40c:	d9001417 	ldw	r4,80(sp)
    c410:	000b3540 	call	b354 <_ZN10__cxxabiv111__terminateEPFvvE>
    c414:	10801004 	addi	r2,r2,64
    c418:	d8801715 	stw	r2,92(sp)
    c41c:	003fe106 	br	c3a4 <__alt_data_end+0xfc00c3a4>
    c420:	01000104 	movi	r4,4
    c424:	000c9340 	call	c934 <__cxa_allocate_exception>
    c428:	00c000f4 	movhi	r3,3
    c42c:	18e56004 	addi	r3,r3,-27264
    c430:	01800074 	movhi	r6,1
    c434:	014000f4 	movhi	r5,3
    c438:	10c00015 	stw	r3,0(r2)
    c43c:	31b2c304 	addi	r6,r6,-13556
    c440:	00c00084 	movi	r3,2
    c444:	29654504 	addi	r5,r5,-27372
    c448:	1009883a 	mov	r4,r2
    c44c:	d8c00815 	stw	r3,32(sp)
    c450:	000c5300 	call	c530 <__cxa_throw>
    c454:	000c5c00 	call	c5c0 <__cxa_rethrow>
    c458:	d9401617 	ldw	r5,88(sp)
    c45c:	00800084 	movi	r2,2
    c460:	d9800104 	addi	r6,sp,4
    c464:	0009883a 	mov	r4,zero
    c468:	d8800815 	stw	r2,32(sp)
    c46c:	000b82c0 	call	b82c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c470:	d9801717 	ldw	r6,92(sp)
    c474:	d9c01517 	ldw	r7,84(sp)
    c478:	d9000104 	addi	r4,sp,4
    c47c:	317ff017 	ldw	r5,-64(r6)
    c480:	000bc140 	call	bc14 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c484:	10803fcc 	andi	r2,r2,255
    c488:	1000171e 	bne	r2,zero,c4e8 <__cxa_call_unexpected+0x22c>
    c48c:	d9c01517 	ldw	r7,84(sp)
    c490:	014000f4 	movhi	r5,3
    c494:	00800084 	movi	r2,2
    c498:	29654504 	addi	r5,r5,-27372
    c49c:	000d883a 	mov	r6,zero
    c4a0:	d9000104 	addi	r4,sp,4
    c4a4:	d8800815 	stw	r2,32(sp)
    c4a8:	000bc140 	call	bc14 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c4ac:	10803fcc 	andi	r2,r2,255
    c4b0:	103fd626 	beq	r2,zero,c40c <__alt_data_end+0xfc00c40c>
    c4b4:	01000104 	movi	r4,4
    c4b8:	000c9340 	call	c934 <__cxa_allocate_exception>
    c4bc:	00c000f4 	movhi	r3,3
    c4c0:	18e56004 	addi	r3,r3,-27264
    c4c4:	01800074 	movhi	r6,1
    c4c8:	014000f4 	movhi	r5,3
    c4cc:	10c00015 	stw	r3,0(r2)
    c4d0:	31b2c304 	addi	r6,r6,-13556
    c4d4:	00c00084 	movi	r3,2
    c4d8:	29654504 	addi	r5,r5,-27372
    c4dc:	1009883a 	mov	r4,r2
    c4e0:	d8c00815 	stw	r3,32(sp)
    c4e4:	000c5300 	call	c530 <__cxa_throw>
    c4e8:	000c5c00 	call	c5c0 <__cxa_rethrow>

0000c4ec <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c4ec:	defffe04 	addi	sp,sp,-8
    c4f0:	dfc00115 	stw	ra,4(sp)
    c4f4:	dc000015 	stw	r16,0(sp)
    c4f8:	00800044 	movi	r2,1
    c4fc:	11000a36 	bltu	r2,r4,c528 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c500:	28bff617 	ldw	r2,-40(r5)
    c504:	2c000504 	addi	r16,r5,20
    c508:	10000226 	beq	r2,zero,c514 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c50c:	8009883a 	mov	r4,r16
    c510:	103ee83a 	callr	r2
    c514:	8009883a 	mov	r4,r16
    c518:	dfc00117 	ldw	ra,4(sp)
    c51c:	dc000017 	ldw	r16,0(sp)
    c520:	dec00204 	addi	sp,sp,8
    c524:	000c9941 	jmpi	c994 <__cxa_free_exception>
    c528:	293ff817 	ldw	r4,-32(r5)
    c52c:	000b3540 	call	b354 <_ZN10__cxxabiv111__terminateEPFvvE>

0000c530 <__cxa_throw>:
    c530:	defffb04 	addi	sp,sp,-20
    c534:	dfc00415 	stw	ra,16(sp)
    c538:	dcc00315 	stw	r19,12(sp)
    c53c:	dc800215 	stw	r18,8(sp)
    c540:	2827883a 	mov	r19,r5
    c544:	3025883a 	mov	r18,r6
    c548:	dc400115 	stw	r17,4(sp)
    c54c:	dc000015 	stw	r16,0(sp)
    c550:	2021883a 	mov	r16,r4
    c554:	000cafc0 	call	cafc <__cxa_get_globals>
    c558:	10c00117 	ldw	r3,4(r2)
    c55c:	847ffb04 	addi	r17,r16,-20
    c560:	18c00044 	addi	r3,r3,1
    c564:	10c00115 	stw	r3,4(r2)
    c568:	00800044 	movi	r2,1
    c56c:	80bfef15 	stw	r2,-68(r16)
    c570:	84fff015 	stw	r19,-64(r16)
    c574:	84bff115 	stw	r18,-60(r16)
    c578:	000b48c0 	call	b48c <_ZSt14get_unexpectedv>
    c57c:	80bff215 	stw	r2,-56(r16)
    c580:	000b4680 	call	b468 <_ZSt13get_terminatev>
    c584:	80bff315 	stw	r2,-52(r16)
    c588:	0090caf4 	movhi	r2,17195
    c58c:	108ac004 	addi	r2,r2,11008
    c590:	80bffb15 	stw	r2,-20(r16)
    c594:	0091d3b4 	movhi	r2,18254
    c598:	109550c4 	addi	r2,r2,21827
    c59c:	80bffc15 	stw	r2,-16(r16)
    c5a0:	00800074 	movhi	r2,1
    c5a4:	10b13b04 	addi	r2,r2,-15124
    c5a8:	8809883a 	mov	r4,r17
    c5ac:	80bffd15 	stw	r2,-12(r16)
    c5b0:	000d00c0 	call	d00c <_Unwind_SjLj_RaiseException>
    c5b4:	8809883a 	mov	r4,r17
    c5b8:	000c64c0 	call	c64c <__cxa_begin_catch>
    c5bc:	000b4140 	call	b414 <_ZSt9terminatev>

0000c5c0 <__cxa_rethrow>:
    c5c0:	defffe04 	addi	sp,sp,-8
    c5c4:	dfc00115 	stw	ra,4(sp)
    c5c8:	dc000015 	stw	r16,0(sp)
    c5cc:	000cafc0 	call	cafc <__cxa_get_globals>
    c5d0:	10c00117 	ldw	r3,4(r2)
    c5d4:	11000017 	ldw	r4,0(r2)
    c5d8:	18c00044 	addi	r3,r3,1
    c5dc:	10c00115 	stw	r3,4(r2)
    c5e0:	20001126 	beq	r4,zero,c628 <__cxa_rethrow+0x68>
    c5e4:	21400b17 	ldw	r5,44(r4)
    c5e8:	01ef3574 	movhi	r7,48341
    c5ec:	39f54004 	addi	r7,r7,-11008
    c5f0:	29cf883a 	add	r7,r5,r7
    c5f4:	20c00c17 	ldw	r3,48(r4)
    c5f8:	394d803a 	cmpltu	r6,r7,r5
    c5fc:	016e2cb4 	movhi	r5,47282
    c600:	296aaf04 	addi	r5,r5,-21828
    c604:	1947883a 	add	r3,r3,r5
    c608:	30c7883a 	add	r3,r6,r3
    c60c:	18000726 	beq	r3,zero,c62c <__cxa_rethrow+0x6c>
    c610:	10000015 	stw	zero,0(r2)
    c614:	24000b04 	addi	r16,r4,44
    c618:	8009883a 	mov	r4,r16
    c61c:	000d1640 	call	d164 <_Unwind_SjLj_Resume_or_Rethrow>
    c620:	8009883a 	mov	r4,r16
    c624:	000c64c0 	call	c64c <__cxa_begin_catch>
    c628:	000b4140 	call	b414 <_ZSt9terminatev>
    c62c:	00c00044 	movi	r3,1
    c630:	19fff736 	bltu	r3,r7,c610 <__alt_data_end+0xfc00c610>
    c634:	20800517 	ldw	r2,20(r4)
    c638:	0085c83a 	sub	r2,zero,r2
    c63c:	20800515 	stw	r2,20(r4)
    c640:	003ff406 	br	c614 <__alt_data_end+0xfc00c614>

0000c644 <__cxa_get_exception_ptr>:
    c644:	20bfff17 	ldw	r2,-4(r4)
    c648:	f800283a 	ret

0000c64c <__cxa_begin_catch>:
    c64c:	defffe04 	addi	sp,sp,-8
    c650:	dc000015 	stw	r16,0(sp)
    c654:	dfc00115 	stw	ra,4(sp)
    c658:	2021883a 	mov	r16,r4
    c65c:	000cafc0 	call	cafc <__cxa_get_globals>
    c660:	81000017 	ldw	r4,0(r16)
    c664:	80c00117 	ldw	r3,4(r16)
    c668:	01af3574 	movhi	r6,48341
    c66c:	31b54004 	addi	r6,r6,-11008
    c670:	016e2cb4 	movhi	r5,47282
    c674:	296aaf04 	addi	r5,r5,-21828
    c678:	218d883a 	add	r6,r4,r6
    c67c:	3109803a 	cmpltu	r4,r6,r4
    c680:	1947883a 	add	r3,r3,r5
    c684:	20c7883a 	add	r3,r4,r3
    c688:	817ff504 	addi	r5,r16,-44
    c68c:	11000017 	ldw	r4,0(r2)
    c690:	18000726 	beq	r3,zero,c6b0 <__cxa_begin_catch+0x64>
    c694:	2000191e 	bne	r4,zero,c6fc <__cxa_begin_catch+0xb0>
    c698:	11400015 	stw	r5,0(r2)
    c69c:	0005883a 	mov	r2,zero
    c6a0:	dfc00117 	ldw	ra,4(sp)
    c6a4:	dc000017 	ldw	r16,0(sp)
    c6a8:	dec00204 	addi	sp,sp,8
    c6ac:	f800283a 	ret
    c6b0:	01c00044 	movi	r7,1
    c6b4:	39bff736 	bltu	r7,r6,c694 <__alt_data_end+0xfc00c694>
    c6b8:	80fffa17 	ldw	r3,-24(r16)
    c6bc:	18000d16 	blt	r3,zero,c6f4 <__cxa_begin_catch+0xa8>
    c6c0:	18c00044 	addi	r3,r3,1
    c6c4:	11800117 	ldw	r6,4(r2)
    c6c8:	80fffa15 	stw	r3,-24(r16)
    c6cc:	30ffffc4 	addi	r3,r6,-1
    c6d0:	10c00115 	stw	r3,4(r2)
    c6d4:	21400226 	beq	r4,r5,c6e0 <__cxa_begin_catch+0x94>
    c6d8:	813ff915 	stw	r4,-28(r16)
    c6dc:	11400015 	stw	r5,0(r2)
    c6e0:	80bfff17 	ldw	r2,-4(r16)
    c6e4:	dfc00117 	ldw	ra,4(sp)
    c6e8:	dc000017 	ldw	r16,0(sp)
    c6ec:	dec00204 	addi	sp,sp,8
    c6f0:	f800283a 	ret
    c6f4:	38c7c83a 	sub	r3,r7,r3
    c6f8:	003ff206 	br	c6c4 <__alt_data_end+0xfc00c6c4>
    c6fc:	000b4140 	call	b414 <_ZSt9terminatev>

0000c700 <__cxa_end_catch>:
    c700:	deffff04 	addi	sp,sp,-4
    c704:	dfc00015 	stw	ra,0(sp)
    c708:	000caf00 	call	caf0 <__cxa_get_globals_fast>
    c70c:	11000017 	ldw	r4,0(r2)
    c710:	20001426 	beq	r4,zero,c764 <__cxa_end_catch+0x64>
    c714:	21400b17 	ldw	r5,44(r4)
    c718:	01ef3574 	movhi	r7,48341
    c71c:	39f54004 	addi	r7,r7,-11008
    c720:	29cf883a 	add	r7,r5,r7
    c724:	20c00c17 	ldw	r3,48(r4)
    c728:	394d803a 	cmpltu	r6,r7,r5
    c72c:	016e2cb4 	movhi	r5,47282
    c730:	296aaf04 	addi	r5,r5,-21828
    c734:	1947883a 	add	r3,r3,r5
    c738:	30c7883a 	add	r3,r6,r3
    c73c:	18000c1e 	bne	r3,zero,c770 <__cxa_end_catch+0x70>
    c740:	00c00044 	movi	r3,1
    c744:	19c00a36 	bltu	r3,r7,c770 <__cxa_end_catch+0x70>
    c748:	20c00517 	ldw	r3,20(r4)
    c74c:	18000d16 	blt	r3,zero,c784 <__cxa_end_catch+0x84>
    c750:	18ffffc4 	addi	r3,r3,-1
    c754:	18001026 	beq	r3,zero,c798 <__cxa_end_catch+0x98>
    c758:	00bfffc4 	movi	r2,-1
    c75c:	18801426 	beq	r3,r2,c7b0 <__cxa_end_catch+0xb0>
    c760:	20c00515 	stw	r3,20(r4)
    c764:	dfc00017 	ldw	ra,0(sp)
    c768:	dec00104 	addi	sp,sp,4
    c76c:	f800283a 	ret
    c770:	21000b04 	addi	r4,r4,44
    c774:	10000015 	stw	zero,0(r2)
    c778:	dfc00017 	ldw	ra,0(sp)
    c77c:	dec00104 	addi	sp,sp,4
    c780:	000d1b01 	jmpi	d1b0 <_Unwind_DeleteException>
    c784:	18c00044 	addi	r3,r3,1
    c788:	183ff51e 	bne	r3,zero,c760 <__alt_data_end+0xfc00c760>
    c78c:	21400417 	ldw	r5,16(r4)
    c790:	11400015 	stw	r5,0(r2)
    c794:	003ff206 	br	c760 <__alt_data_end+0xfc00c760>
    c798:	20c00417 	ldw	r3,16(r4)
    c79c:	21000b04 	addi	r4,r4,44
    c7a0:	10c00015 	stw	r3,0(r2)
    c7a4:	dfc00017 	ldw	ra,0(sp)
    c7a8:	dec00104 	addi	sp,sp,4
    c7ac:	000d1b01 	jmpi	d1b0 <_Unwind_DeleteException>
    c7b0:	000b4140 	call	b414 <_ZSt9terminatev>

0000c7b4 <_ZSt18uncaught_exceptionv>:
    c7b4:	deffff04 	addi	sp,sp,-4
    c7b8:	dfc00015 	stw	ra,0(sp)
    c7bc:	000cafc0 	call	cafc <__cxa_get_globals>
    c7c0:	10800117 	ldw	r2,4(r2)
    c7c4:	1004c03a 	cmpne	r2,r2,zero
    c7c8:	dfc00017 	ldw	ra,0(sp)
    c7cc:	dec00104 	addi	sp,sp,4
    c7d0:	f800283a 	ret

0000c7d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    c7d4:	018000f4 	movhi	r6,3
    c7d8:	31bf9304 	addi	r6,r6,-436
    c7dc:	31400117 	ldw	r5,4(r6)
    c7e0:	223fff04 	addi	r8,r4,-4
    c7e4:	227fff17 	ldw	r9,-4(r4)
    c7e8:	28001326 	beq	r5,zero,c838 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    c7ec:	424f883a 	add	r7,r8,r9
    c7f0:	29c01426 	beq	r5,r7,c844 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    c7f4:	28c00117 	ldw	r3,4(r5)
    c7f8:	18001c26 	beq	r3,zero,c86c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    c7fc:	38c00336 	bltu	r7,r3,c80c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    c800:	00001e06 	br	c87c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    c804:	3880052e 	bgeu	r7,r2,c81c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    c808:	1007883a 	mov	r3,r2
    c80c:	18800117 	ldw	r2,4(r3)
    c810:	29800104 	addi	r6,r5,4
    c814:	180b883a 	mov	r5,r3
    c818:	103ffa1e 	bne	r2,zero,c804 <__alt_data_end+0xfc00c804>
    c81c:	19400017 	ldw	r5,0(r3)
    c820:	194f883a 	add	r7,r3,r5
    c824:	41c00e26 	beq	r8,r7,c860 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    c828:	20800015 	stw	r2,0(r4)
    c82c:	30800017 	ldw	r2,0(r6)
    c830:	12000115 	stw	r8,4(r2)
    c834:	f800283a 	ret
    c838:	20000015 	stw	zero,0(r4)
    c83c:	32000115 	stw	r8,4(r6)
    c840:	f800283a 	ret
    c844:	28c00017 	ldw	r3,0(r5)
    c848:	28800117 	ldw	r2,4(r5)
    c84c:	1a53883a 	add	r9,r3,r9
    c850:	227fff15 	stw	r9,-4(r4)
    c854:	20800015 	stw	r2,0(r4)
    c858:	32000115 	stw	r8,4(r6)
    c85c:	f800283a 	ret
    c860:	494b883a 	add	r5,r9,r5
    c864:	19400015 	stw	r5,0(r3)
    c868:	f800283a 	ret
    c86c:	0005883a 	mov	r2,zero
    c870:	2807883a 	mov	r3,r5
    c874:	31800104 	addi	r6,r6,4
    c878:	003fe806 	br	c81c <__alt_data_end+0xfc00c81c>
    c87c:	1805883a 	mov	r2,r3
    c880:	31800104 	addi	r6,r6,4
    c884:	2807883a 	mov	r3,r5
    c888:	003fe406 	br	c81c <__alt_data_end+0xfc00c81c>

0000c88c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    c88c:	20800104 	addi	r2,r4,4
    c890:	00c001c4 	movi	r3,7
    c894:	1880112e 	bgeu	r3,r2,c8dc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    c898:	20c9883a 	add	r4,r4,r3
    c89c:	00bfff04 	movi	r2,-4
    c8a0:	208a703a 	and	r5,r4,r2
    c8a4:	018000f4 	movhi	r6,3
    c8a8:	31bf9304 	addi	r6,r6,-436
    c8ac:	30c00117 	ldw	r3,4(r6)
    c8b0:	18000826 	beq	r3,zero,c8d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    c8b4:	19000017 	ldw	r4,0(r3)
    c8b8:	21400436 	bltu	r4,r5,c8cc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    c8bc:	00001a06 	br	c928 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    c8c0:	11000017 	ldw	r4,0(r2)
    c8c4:	2140072e 	bgeu	r4,r5,c8e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    c8c8:	1007883a 	mov	r3,r2
    c8cc:	18800117 	ldw	r2,4(r3)
    c8d0:	103ffb1e 	bne	r2,zero,c8c0 <__alt_data_end+0xfc00c8c0>
    c8d4:	0005883a 	mov	r2,zero
    c8d8:	f800283a 	ret
    c8dc:	01400204 	movi	r5,8
    c8e0:	003ff006 	br	c8a4 <__alt_data_end+0xfc00c8a4>
    c8e4:	18c00104 	addi	r3,r3,4
    c8e8:	2149c83a 	sub	r4,r4,r5
    c8ec:	018001c4 	movi	r6,7
    c8f0:	3100092e 	bgeu	r6,r4,c918 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    c8f4:	11c00117 	ldw	r7,4(r2)
    c8f8:	114d883a 	add	r6,r2,r5
    c8fc:	31000015 	stw	r4,0(r6)
    c900:	31c00115 	stw	r7,4(r6)
    c904:	18800017 	ldw	r2,0(r3)
    c908:	11400015 	stw	r5,0(r2)
    c90c:	19800015 	stw	r6,0(r3)
    c910:	10800104 	addi	r2,r2,4
    c914:	f800283a 	ret
    c918:	11000117 	ldw	r4,4(r2)
    c91c:	10800104 	addi	r2,r2,4
    c920:	19000015 	stw	r4,0(r3)
    c924:	f800283a 	ret
    c928:	1805883a 	mov	r2,r3
    c92c:	30c00104 	addi	r3,r6,4
    c930:	003fed06 	br	c8e8 <__alt_data_end+0xfc00c8e8>

0000c934 <__cxa_allocate_exception>:
    c934:	defffd04 	addi	sp,sp,-12
    c938:	dc400115 	stw	r17,4(sp)
    c93c:	24401104 	addi	r17,r4,68
    c940:	8809883a 	mov	r4,r17
    c944:	dc000015 	stw	r16,0(sp)
    c948:	dfc00215 	stw	ra,8(sp)
    c94c:	000d2a00 	call	d2a0 <malloc>
    c950:	1021883a 	mov	r16,r2
    c954:	10000a26 	beq	r2,zero,c980 <__cxa_allocate_exception+0x4c>
    c958:	01801104 	movi	r6,68
    c95c:	000b883a 	mov	r5,zero
    c960:	8009883a 	mov	r4,r16
    c964:	000dc1c0 	call	dc1c <memset>
    c968:	80801104 	addi	r2,r16,68
    c96c:	dfc00217 	ldw	ra,8(sp)
    c970:	dc400117 	ldw	r17,4(sp)
    c974:	dc000017 	ldw	r16,0(sp)
    c978:	dec00304 	addi	sp,sp,12
    c97c:	f800283a 	ret
    c980:	8809883a 	mov	r4,r17
    c984:	000c88c0 	call	c88c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    c988:	1021883a 	mov	r16,r2
    c98c:	103ff21e 	bne	r2,zero,c958 <__alt_data_end+0xfc00c958>
    c990:	000b4140 	call	b414 <_ZSt9terminatev>

0000c994 <__cxa_free_exception>:
    c994:	00c000f4 	movhi	r3,3
    c998:	18ff9304 	addi	r3,r3,-436
    c99c:	18800217 	ldw	r2,8(r3)
    c9a0:	213fef04 	addi	r4,r4,-68
    c9a4:	1100042e 	bgeu	r2,r4,c9b8 <__cxa_free_exception+0x24>
    c9a8:	18c00317 	ldw	r3,12(r3)
    c9ac:	10c5883a 	add	r2,r2,r3
    c9b0:	2080012e 	bgeu	r4,r2,c9b8 <__cxa_free_exception+0x24>
    c9b4:	000c7d41 	jmpi	c7d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    c9b8:	000d2b41 	jmpi	d2b4 <free>

0000c9bc <__cxa_allocate_dependent_exception>:
    c9bc:	defffe04 	addi	sp,sp,-8
    c9c0:	01001004 	movi	r4,64
    c9c4:	dc000015 	stw	r16,0(sp)
    c9c8:	dfc00115 	stw	ra,4(sp)
    c9cc:	000d2a00 	call	d2a0 <malloc>
    c9d0:	1021883a 	mov	r16,r2
    c9d4:	10000926 	beq	r2,zero,c9fc <__cxa_allocate_dependent_exception+0x40>
    c9d8:	01801004 	movi	r6,64
    c9dc:	000b883a 	mov	r5,zero
    c9e0:	8009883a 	mov	r4,r16
    c9e4:	000dc1c0 	call	dc1c <memset>
    c9e8:	8005883a 	mov	r2,r16
    c9ec:	dfc00117 	ldw	ra,4(sp)
    c9f0:	dc000017 	ldw	r16,0(sp)
    c9f4:	dec00204 	addi	sp,sp,8
    c9f8:	f800283a 	ret
    c9fc:	01001004 	movi	r4,64
    ca00:	000c88c0 	call	c88c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    ca04:	1021883a 	mov	r16,r2
    ca08:	103ff31e 	bne	r2,zero,c9d8 <__alt_data_end+0xfc00c9d8>
    ca0c:	000b4140 	call	b414 <_ZSt9terminatev>

0000ca10 <__cxa_free_dependent_exception>:
    ca10:	014000f4 	movhi	r5,3
    ca14:	297f9304 	addi	r5,r5,-436
    ca18:	28c00217 	ldw	r3,8(r5)
    ca1c:	2005883a 	mov	r2,r4
    ca20:	1900042e 	bgeu	r3,r4,ca34 <__cxa_free_dependent_exception+0x24>
    ca24:	29400317 	ldw	r5,12(r5)
    ca28:	1947883a 	add	r3,r3,r5
    ca2c:	20c0012e 	bgeu	r4,r3,ca34 <__cxa_free_dependent_exception+0x24>
    ca30:	000c7d41 	jmpi	c7d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    ca34:	1009883a 	mov	r4,r2
    ca38:	000d2b41 	jmpi	d2b4 <free>

0000ca3c <_GLOBAL__sub_I___cxa_allocate_exception>:
    ca3c:	defffd04 	addi	sp,sp,-12
    ca40:	dc400115 	stw	r17,4(sp)
    ca44:	dc000015 	stw	r16,0(sp)
    ca48:	04424004 	movi	r17,2304
    ca4c:	040000f4 	movhi	r16,3
    ca50:	843f9304 	addi	r16,r16,-436
    ca54:	8809883a 	mov	r4,r17
    ca58:	dfc00215 	stw	ra,8(sp)
    ca5c:	84400315 	stw	r17,12(r16)
    ca60:	000d2a00 	call	d2a0 <malloc>
    ca64:	80800215 	stw	r2,8(r16)
    ca68:	10000826 	beq	r2,zero,ca8c <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    ca6c:	80800115 	stw	r2,4(r16)
    ca70:	14400015 	stw	r17,0(r2)
    ca74:	10000115 	stw	zero,4(r2)
    ca78:	dfc00217 	ldw	ra,8(sp)
    ca7c:	dc400117 	ldw	r17,4(sp)
    ca80:	dc000017 	ldw	r16,0(sp)
    ca84:	dec00304 	addi	sp,sp,12
    ca88:	f800283a 	ret
    ca8c:	80000315 	stw	zero,12(r16)
    ca90:	80000115 	stw	zero,4(r16)
    ca94:	003ff806 	br	ca78 <__alt_data_end+0xfc00ca78>

0000ca98 <__cxa_call_terminate>:
    ca98:	defffe04 	addi	sp,sp,-8
    ca9c:	dfc00115 	stw	ra,4(sp)
    caa0:	dc000015 	stw	r16,0(sp)
    caa4:	20000d26 	beq	r4,zero,cadc <__cxa_call_terminate+0x44>
    caa8:	2021883a 	mov	r16,r4
    caac:	000c64c0 	call	c64c <__cxa_begin_catch>
    cab0:	80c00017 	ldw	r3,0(r16)
    cab4:	016f3574 	movhi	r5,48341
    cab8:	29754004 	addi	r5,r5,-11008
    cabc:	194b883a 	add	r5,r3,r5
    cac0:	80800117 	ldw	r2,4(r16)
    cac4:	28c9803a 	cmpltu	r4,r5,r3
    cac8:	00ee2cb4 	movhi	r3,47282
    cacc:	18eaaf04 	addi	r3,r3,-21828
    cad0:	10c5883a 	add	r2,r2,r3
    cad4:	2085883a 	add	r2,r4,r2
    cad8:	10000126 	beq	r2,zero,cae0 <__cxa_call_terminate+0x48>
    cadc:	000b4140 	call	b414 <_ZSt9terminatev>
    cae0:	00800044 	movi	r2,1
    cae4:	117ffd36 	bltu	r2,r5,cadc <__alt_data_end+0xfc00cadc>
    cae8:	813ff817 	ldw	r4,-32(r16)
    caec:	000b3540 	call	b354 <_ZN10__cxxabiv111__terminateEPFvvE>

0000caf0 <__cxa_get_globals_fast>:
    caf0:	008000f4 	movhi	r2,3
    caf4:	10bf3a04 	addi	r2,r2,-792
    caf8:	f800283a 	ret

0000cafc <__cxa_get_globals>:
    cafc:	008000f4 	movhi	r2,3
    cb00:	10bf3a04 	addi	r2,r2,-792
    cb04:	f800283a 	ret

0000cb08 <_ZNSt9exceptionD1Ev>:
    cb08:	f800283a 	ret

0000cb0c <_ZNSt13bad_exceptionD1Ev>:
    cb0c:	f800283a 	ret

0000cb10 <_ZNKSt9exception4whatEv>:
    cb10:	008000f4 	movhi	r2,3
    cb14:	10a53304 	addi	r2,r2,-27444
    cb18:	f800283a 	ret

0000cb1c <_ZNKSt13bad_exception4whatEv>:
    cb1c:	008000f4 	movhi	r2,3
    cb20:	10a53704 	addi	r2,r2,-27428
    cb24:	f800283a 	ret

0000cb28 <_ZNSt9exceptionD0Ev>:
    cb28:	000b0481 	jmpi	b048 <_ZdlPv>

0000cb2c <_ZNSt13bad_exceptionD0Ev>:
    cb2c:	000b0481 	jmpi	b048 <_ZdlPv>

0000cb30 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    cb30:	f800283a 	ret

0000cb34 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    cb34:	000b0481 	jmpi	b048 <_ZdlPv>

0000cb38 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    cb38:	f800283a 	ret

0000cb3c <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    cb3c:	000b0481 	jmpi	b048 <_ZdlPv>

0000cb40 <__divsi3>:
    cb40:	20001b16 	blt	r4,zero,cbb0 <__divsi3+0x70>
    cb44:	000f883a 	mov	r7,zero
    cb48:	28001616 	blt	r5,zero,cba4 <__divsi3+0x64>
    cb4c:	200d883a 	mov	r6,r4
    cb50:	29001a2e 	bgeu	r5,r4,cbbc <__divsi3+0x7c>
    cb54:	00800804 	movi	r2,32
    cb58:	00c00044 	movi	r3,1
    cb5c:	00000106 	br	cb64 <__divsi3+0x24>
    cb60:	10000d26 	beq	r2,zero,cb98 <__divsi3+0x58>
    cb64:	294b883a 	add	r5,r5,r5
    cb68:	10bfffc4 	addi	r2,r2,-1
    cb6c:	18c7883a 	add	r3,r3,r3
    cb70:	293ffb36 	bltu	r5,r4,cb60 <__alt_data_end+0xfc00cb60>
    cb74:	0005883a 	mov	r2,zero
    cb78:	18000726 	beq	r3,zero,cb98 <__divsi3+0x58>
    cb7c:	0005883a 	mov	r2,zero
    cb80:	31400236 	bltu	r6,r5,cb8c <__divsi3+0x4c>
    cb84:	314dc83a 	sub	r6,r6,r5
    cb88:	10c4b03a 	or	r2,r2,r3
    cb8c:	1806d07a 	srli	r3,r3,1
    cb90:	280ad07a 	srli	r5,r5,1
    cb94:	183ffa1e 	bne	r3,zero,cb80 <__alt_data_end+0xfc00cb80>
    cb98:	38000126 	beq	r7,zero,cba0 <__divsi3+0x60>
    cb9c:	0085c83a 	sub	r2,zero,r2
    cba0:	f800283a 	ret
    cba4:	014bc83a 	sub	r5,zero,r5
    cba8:	39c0005c 	xori	r7,r7,1
    cbac:	003fe706 	br	cb4c <__alt_data_end+0xfc00cb4c>
    cbb0:	0109c83a 	sub	r4,zero,r4
    cbb4:	01c00044 	movi	r7,1
    cbb8:	003fe306 	br	cb48 <__alt_data_end+0xfc00cb48>
    cbbc:	00c00044 	movi	r3,1
    cbc0:	003fee06 	br	cb7c <__alt_data_end+0xfc00cb7c>

0000cbc4 <__modsi3>:
    cbc4:	20001716 	blt	r4,zero,cc24 <__modsi3+0x60>
    cbc8:	000f883a 	mov	r7,zero
    cbcc:	2005883a 	mov	r2,r4
    cbd0:	28001216 	blt	r5,zero,cc1c <__modsi3+0x58>
    cbd4:	2900162e 	bgeu	r5,r4,cc30 <__modsi3+0x6c>
    cbd8:	01800804 	movi	r6,32
    cbdc:	00c00044 	movi	r3,1
    cbe0:	00000106 	br	cbe8 <__modsi3+0x24>
    cbe4:	30000a26 	beq	r6,zero,cc10 <__modsi3+0x4c>
    cbe8:	294b883a 	add	r5,r5,r5
    cbec:	31bfffc4 	addi	r6,r6,-1
    cbf0:	18c7883a 	add	r3,r3,r3
    cbf4:	293ffb36 	bltu	r5,r4,cbe4 <__alt_data_end+0xfc00cbe4>
    cbf8:	18000526 	beq	r3,zero,cc10 <__modsi3+0x4c>
    cbfc:	1806d07a 	srli	r3,r3,1
    cc00:	11400136 	bltu	r2,r5,cc08 <__modsi3+0x44>
    cc04:	1145c83a 	sub	r2,r2,r5
    cc08:	280ad07a 	srli	r5,r5,1
    cc0c:	183ffb1e 	bne	r3,zero,cbfc <__alt_data_end+0xfc00cbfc>
    cc10:	38000126 	beq	r7,zero,cc18 <__modsi3+0x54>
    cc14:	0085c83a 	sub	r2,zero,r2
    cc18:	f800283a 	ret
    cc1c:	014bc83a 	sub	r5,zero,r5
    cc20:	003fec06 	br	cbd4 <__alt_data_end+0xfc00cbd4>
    cc24:	0109c83a 	sub	r4,zero,r4
    cc28:	01c00044 	movi	r7,1
    cc2c:	003fe706 	br	cbcc <__alt_data_end+0xfc00cbcc>
    cc30:	00c00044 	movi	r3,1
    cc34:	003ff106 	br	cbfc <__alt_data_end+0xfc00cbfc>

0000cc38 <__udivsi3>:
    cc38:	200d883a 	mov	r6,r4
    cc3c:	2900152e 	bgeu	r5,r4,cc94 <__udivsi3+0x5c>
    cc40:	28001416 	blt	r5,zero,cc94 <__udivsi3+0x5c>
    cc44:	00800804 	movi	r2,32
    cc48:	00c00044 	movi	r3,1
    cc4c:	00000206 	br	cc58 <__udivsi3+0x20>
    cc50:	10000e26 	beq	r2,zero,cc8c <__udivsi3+0x54>
    cc54:	28000516 	blt	r5,zero,cc6c <__udivsi3+0x34>
    cc58:	294b883a 	add	r5,r5,r5
    cc5c:	10bfffc4 	addi	r2,r2,-1
    cc60:	18c7883a 	add	r3,r3,r3
    cc64:	293ffa36 	bltu	r5,r4,cc50 <__alt_data_end+0xfc00cc50>
    cc68:	18000826 	beq	r3,zero,cc8c <__udivsi3+0x54>
    cc6c:	0005883a 	mov	r2,zero
    cc70:	31400236 	bltu	r6,r5,cc7c <__udivsi3+0x44>
    cc74:	314dc83a 	sub	r6,r6,r5
    cc78:	10c4b03a 	or	r2,r2,r3
    cc7c:	1806d07a 	srli	r3,r3,1
    cc80:	280ad07a 	srli	r5,r5,1
    cc84:	183ffa1e 	bne	r3,zero,cc70 <__alt_data_end+0xfc00cc70>
    cc88:	f800283a 	ret
    cc8c:	0005883a 	mov	r2,zero
    cc90:	f800283a 	ret
    cc94:	00c00044 	movi	r3,1
    cc98:	003ff406 	br	cc6c <__alt_data_end+0xfc00cc6c>

0000cc9c <__umodsi3>:
    cc9c:	2005883a 	mov	r2,r4
    cca0:	2900122e 	bgeu	r5,r4,ccec <__umodsi3+0x50>
    cca4:	28001116 	blt	r5,zero,ccec <__umodsi3+0x50>
    cca8:	01800804 	movi	r6,32
    ccac:	00c00044 	movi	r3,1
    ccb0:	00000206 	br	ccbc <__umodsi3+0x20>
    ccb4:	30000c26 	beq	r6,zero,cce8 <__umodsi3+0x4c>
    ccb8:	28000516 	blt	r5,zero,ccd0 <__umodsi3+0x34>
    ccbc:	294b883a 	add	r5,r5,r5
    ccc0:	31bfffc4 	addi	r6,r6,-1
    ccc4:	18c7883a 	add	r3,r3,r3
    ccc8:	293ffa36 	bltu	r5,r4,ccb4 <__alt_data_end+0xfc00ccb4>
    cccc:	18000626 	beq	r3,zero,cce8 <__umodsi3+0x4c>
    ccd0:	1806d07a 	srli	r3,r3,1
    ccd4:	11400136 	bltu	r2,r5,ccdc <__umodsi3+0x40>
    ccd8:	1145c83a 	sub	r2,r2,r5
    ccdc:	280ad07a 	srli	r5,r5,1
    cce0:	183ffb1e 	bne	r3,zero,ccd0 <__alt_data_end+0xfc00ccd0>
    cce4:	f800283a 	ret
    cce8:	f800283a 	ret
    ccec:	00c00044 	movi	r3,1
    ccf0:	003ff706 	br	ccd0 <__alt_data_end+0xfc00ccd0>

0000ccf4 <__mulsi3>:
    ccf4:	0005883a 	mov	r2,zero
    ccf8:	20000726 	beq	r4,zero,cd18 <__mulsi3+0x24>
    ccfc:	20c0004c 	andi	r3,r4,1
    cd00:	2008d07a 	srli	r4,r4,1
    cd04:	18000126 	beq	r3,zero,cd0c <__mulsi3+0x18>
    cd08:	1145883a 	add	r2,r2,r5
    cd0c:	294b883a 	add	r5,r5,r5
    cd10:	203ffa1e 	bne	r4,zero,ccfc <__alt_data_end+0xfc00ccfc>
    cd14:	f800283a 	ret
    cd18:	f800283a 	ret

0000cd1c <_Unwind_ForcedUnwind_Phase2>:
    cd1c:	defff404 	addi	sp,sp,-48
    cd20:	dd800915 	stw	r22,36(sp)
    cd24:	058000f4 	movhi	r22,3
    cd28:	ddc00a15 	stw	r23,40(sp)
    cd2c:	dd400815 	stw	r21,32(sp)
    cd30:	dd000715 	stw	r20,28(sp)
    cd34:	dcc00615 	stw	r19,24(sp)
    cd38:	dc400415 	stw	r17,16(sp)
    cd3c:	dc000315 	stw	r16,12(sp)
    cd40:	dfc00b15 	stw	ra,44(sp)
    cd44:	dc800515 	stw	r18,20(sp)
    cd48:	2021883a 	mov	r16,r4
    cd4c:	2823883a 	mov	r17,r5
    cd50:	24c00317 	ldw	r19,12(r4)
    cd54:	25000417 	ldw	r20,16(r4)
    cd58:	28c00017 	ldw	r3,0(r5)
    cd5c:	b5bf3c04 	addi	r22,r22,-784
    cd60:	054001c4 	movi	r21,7
    cd64:	05c00204 	movi	r23,8
    cd68:	00001606 	br	cdc4 <_Unwind_ForcedUnwind_Phase2+0xa8>
    cd6c:	81800017 	ldw	r6,0(r16)
    cd70:	81c00117 	ldw	r7,4(r16)
    cd74:	1c800617 	ldw	r18,24(r3)
    cd78:	dd000215 	stw	r20,8(sp)
    cd7c:	dc400115 	stw	r17,4(sp)
    cd80:	dc000015 	stw	r16,0(sp)
    cd84:	983ee83a 	callr	r19
    cd88:	01400284 	movi	r5,10
    cd8c:	01000044 	movi	r4,1
    cd90:	1000241e 	bne	r2,zero,ce24 <_Unwind_ForcedUnwind_Phase2+0x108>
    cd94:	90000726 	beq	r18,zero,cdb4 <_Unwind_ForcedUnwind_Phase2+0x98>
    cd98:	81800017 	ldw	r6,0(r16)
    cd9c:	81c00117 	ldw	r7,4(r16)
    cda0:	dc400115 	stw	r17,4(sp)
    cda4:	dc000015 	stw	r16,0(sp)
    cda8:	903ee83a 	callr	r18
    cdac:	15401f26 	beq	r2,r21,ce2c <_Unwind_ForcedUnwind_Phase2+0x110>
    cdb0:	15c01c1e 	bne	r2,r23,ce24 <_Unwind_ForcedUnwind_Phase2+0x108>
    cdb4:	88800017 	ldw	r2,0(r17)
    cdb8:	10c00017 	ldw	r3,0(r2)
    cdbc:	b0c00015 	stw	r3,0(r22)
    cdc0:	88c00015 	stw	r3,0(r17)
    cdc4:	01400284 	movi	r5,10
    cdc8:	01000044 	movi	r4,1
    cdcc:	183fe71e 	bne	r3,zero,cd6c <__alt_data_end+0xfc00cd6c>
    cdd0:	81800017 	ldw	r6,0(r16)
    cdd4:	81c00117 	ldw	r7,4(r16)
    cdd8:	01400684 	movi	r5,26
    cddc:	dd000215 	stw	r20,8(sp)
    cde0:	dc400115 	stw	r17,4(sp)
    cde4:	dc000015 	stw	r16,0(sp)
    cde8:	01000044 	movi	r4,1
    cdec:	983ee83a 	callr	r19
    cdf0:	10000c1e 	bne	r2,zero,ce24 <_Unwind_ForcedUnwind_Phase2+0x108>
    cdf4:	00800144 	movi	r2,5
    cdf8:	dfc00b17 	ldw	ra,44(sp)
    cdfc:	ddc00a17 	ldw	r23,40(sp)
    ce00:	dd800917 	ldw	r22,36(sp)
    ce04:	dd400817 	ldw	r21,32(sp)
    ce08:	dd000717 	ldw	r20,28(sp)
    ce0c:	dcc00617 	ldw	r19,24(sp)
    ce10:	dc800517 	ldw	r18,20(sp)
    ce14:	dc400417 	ldw	r17,16(sp)
    ce18:	dc000317 	ldw	r16,12(sp)
    ce1c:	dec00c04 	addi	sp,sp,48
    ce20:	f800283a 	ret
    ce24:	00800084 	movi	r2,2
    ce28:	003ff306 	br	cdf8 <__alt_data_end+0xfc00cdf8>
    ce2c:	a805883a 	mov	r2,r21
    ce30:	003ff106 	br	cdf8 <__alt_data_end+0xfc00cdf8>

0000ce34 <_Unwind_RaiseException_Phase2>:
    ce34:	28c00017 	ldw	r3,0(r5)
    ce38:	defff804 	addi	sp,sp,-32
    ce3c:	dcc00515 	stw	r19,20(sp)
    ce40:	dc800415 	stw	r18,16(sp)
    ce44:	dc400315 	stw	r17,12(sp)
    ce48:	dc000215 	stw	r16,8(sp)
    ce4c:	dfc00715 	stw	ra,28(sp)
    ce50:	dd000615 	stw	r20,24(sp)
    ce54:	2823883a 	mov	r17,r5
    ce58:	2021883a 	mov	r16,r4
    ce5c:	048001c4 	movi	r18,7
    ce60:	04c00204 	movi	r19,8
    ce64:	18001326 	beq	r3,zero,ceb4 <_Unwind_RaiseException_Phase2+0x80>
    ce68:	81000417 	ldw	r4,16(r16)
    ce6c:	1a000617 	ldw	r8,24(r3)
    ce70:	19001926 	beq	r3,r4,ced8 <_Unwind_RaiseException_Phase2+0xa4>
    ce74:	40000c26 	beq	r8,zero,cea8 <_Unwind_RaiseException_Phase2+0x74>
    ce78:	01400084 	movi	r5,2
    ce7c:	0029883a 	mov	r20,zero
    ce80:	81800017 	ldw	r6,0(r16)
    ce84:	81c00117 	ldw	r7,4(r16)
    ce88:	01000044 	movi	r4,1
    ce8c:	dc400115 	stw	r17,4(sp)
    ce90:	dc000015 	stw	r16,0(sp)
    ce94:	403ee83a 	callr	r8
    ce98:	14801326 	beq	r2,r18,cee8 <_Unwind_RaiseException_Phase2+0xb4>
    ce9c:	14c0051e 	bne	r2,r19,ceb4 <_Unwind_RaiseException_Phase2+0x80>
    cea0:	a000131e 	bne	r20,zero,cef0 <_Unwind_RaiseException_Phase2+0xbc>
    cea4:	88c00017 	ldw	r3,0(r17)
    cea8:	18c00017 	ldw	r3,0(r3)
    ceac:	88c00015 	stw	r3,0(r17)
    ceb0:	183fed1e 	bne	r3,zero,ce68 <__alt_data_end+0xfc00ce68>
    ceb4:	00800084 	movi	r2,2
    ceb8:	dfc00717 	ldw	ra,28(sp)
    cebc:	dd000617 	ldw	r20,24(sp)
    cec0:	dcc00517 	ldw	r19,20(sp)
    cec4:	dc800417 	ldw	r18,16(sp)
    cec8:	dc400317 	ldw	r17,12(sp)
    cecc:	dc000217 	ldw	r16,8(sp)
    ced0:	dec00804 	addi	sp,sp,32
    ced4:	f800283a 	ret
    ced8:	40000526 	beq	r8,zero,cef0 <_Unwind_RaiseException_Phase2+0xbc>
    cedc:	01400184 	movi	r5,6
    cee0:	05000104 	movi	r20,4
    cee4:	003fe606 	br	ce80 <__alt_data_end+0xfc00ce80>
    cee8:	9005883a 	mov	r2,r18
    ceec:	003ff206 	br	ceb8 <__alt_data_end+0xfc00ceb8>
    cef0:	000d23c0 	call	d23c <abort>

0000cef4 <uw_install_context.isra.1>:
    cef4:	20c00017 	ldw	r3,0(r4)
    cef8:	deffff04 	addi	sp,sp,-4
    cefc:	014000f4 	movhi	r5,3
    cf00:	19000917 	ldw	r4,36(r3)
    cf04:	df000015 	stw	fp,0(sp)
    cf08:	18800804 	addi	r2,r3,32
    cf0c:	d839883a 	mov	fp,sp
    cf10:	297f3c04 	addi	r5,r5,-784
    cf14:	28c00015 	stw	r3,0(r5)
    cf18:	17000017 	ldw	fp,0(r2)
    cf1c:	1ec00a17 	ldw	sp,40(r3)
    cf20:	2000683a 	jmp	r4

0000cf24 <_Unwind_SjLj_Register>:
    cf24:	008000f4 	movhi	r2,3
    cf28:	10bf3c04 	addi	r2,r2,-784
    cf2c:	10c00017 	ldw	r3,0(r2)
    cf30:	11000015 	stw	r4,0(r2)
    cf34:	20c00015 	stw	r3,0(r4)
    cf38:	f800283a 	ret

0000cf3c <_Unwind_SjLj_Unregister>:
    cf3c:	20c00017 	ldw	r3,0(r4)
    cf40:	008000f4 	movhi	r2,3
    cf44:	10bf3c04 	addi	r2,r2,-784
    cf48:	10c00015 	stw	r3,0(r2)
    cf4c:	f800283a 	ret

0000cf50 <_Unwind_GetGR>:
    cf50:	20800017 	ldw	r2,0(r4)
    cf54:	29400084 	addi	r5,r5,2
    cf58:	294b883a 	add	r5,r5,r5
    cf5c:	294b883a 	add	r5,r5,r5
    cf60:	114b883a 	add	r5,r2,r5
    cf64:	28800017 	ldw	r2,0(r5)
    cf68:	f800283a 	ret

0000cf6c <_Unwind_GetCFA>:
    cf6c:	20800017 	ldw	r2,0(r4)
    cf70:	10000226 	beq	r2,zero,cf7c <_Unwind_GetCFA+0x10>
    cf74:	10800a17 	ldw	r2,40(r2)
    cf78:	f800283a 	ret
    cf7c:	0005883a 	mov	r2,zero
    cf80:	f800283a 	ret

0000cf84 <_Unwind_SetGR>:
    cf84:	20800017 	ldw	r2,0(r4)
    cf88:	29400084 	addi	r5,r5,2
    cf8c:	294b883a 	add	r5,r5,r5
    cf90:	294b883a 	add	r5,r5,r5
    cf94:	114b883a 	add	r5,r2,r5
    cf98:	29800015 	stw	r6,0(r5)
    cf9c:	f800283a 	ret

0000cfa0 <_Unwind_GetIP>:
    cfa0:	20800017 	ldw	r2,0(r4)
    cfa4:	10800117 	ldw	r2,4(r2)
    cfa8:	10800044 	addi	r2,r2,1
    cfac:	f800283a 	ret

0000cfb0 <_Unwind_GetIPInfo>:
    cfb0:	20800017 	ldw	r2,0(r4)
    cfb4:	28000015 	stw	zero,0(r5)
    cfb8:	10000326 	beq	r2,zero,cfc8 <_Unwind_GetIPInfo+0x18>
    cfbc:	10800117 	ldw	r2,4(r2)
    cfc0:	10800044 	addi	r2,r2,1
    cfc4:	f800283a 	ret
    cfc8:	0005883a 	mov	r2,zero
    cfcc:	f800283a 	ret

0000cfd0 <_Unwind_SetIP>:
    cfd0:	20800017 	ldw	r2,0(r4)
    cfd4:	297fffc4 	addi	r5,r5,-1
    cfd8:	11400115 	stw	r5,4(r2)
    cfdc:	f800283a 	ret

0000cfe0 <_Unwind_GetLanguageSpecificData>:
    cfe0:	20800017 	ldw	r2,0(r4)
    cfe4:	10800717 	ldw	r2,28(r2)
    cfe8:	f800283a 	ret

0000cfec <_Unwind_GetRegionStart>:
    cfec:	0005883a 	mov	r2,zero
    cff0:	f800283a 	ret

0000cff4 <_Unwind_FindEnclosingFunction>:
    cff4:	0005883a 	mov	r2,zero
    cff8:	f800283a 	ret

0000cffc <_Unwind_GetDataRelBase>:
    cffc:	0005883a 	mov	r2,zero
    d000:	f800283a 	ret

0000d004 <_Unwind_GetTextRelBase>:
    d004:	0005883a 	mov	r2,zero
    d008:	f800283a 	ret

0000d00c <_Unwind_SjLj_RaiseException>:
    d00c:	008000f4 	movhi	r2,3
    d010:	defff804 	addi	sp,sp,-32
    d014:	10bf3c04 	addi	r2,r2,-784
    d018:	dc800515 	stw	r18,20(sp)
    d01c:	14800017 	ldw	r18,0(r2)
    d020:	dfc00715 	stw	ra,28(sp)
    d024:	dcc00615 	stw	r19,24(sp)
    d028:	dc400415 	stw	r17,16(sp)
    d02c:	dc000315 	stw	r16,12(sp)
    d030:	dc800215 	stw	r18,8(sp)
    d034:	90001426 	beq	r18,zero,d088 <_Unwind_SjLj_RaiseException+0x7c>
    d038:	2021883a 	mov	r16,r4
    d03c:	9005883a 	mov	r2,r18
    d040:	04400184 	movi	r17,6
    d044:	04c00204 	movi	r19,8
    d048:	10800617 	ldw	r2,24(r2)
    d04c:	10000a26 	beq	r2,zero,d078 <_Unwind_SjLj_RaiseException+0x6c>
    d050:	81800017 	ldw	r6,0(r16)
    d054:	81c00117 	ldw	r7,4(r16)
    d058:	01400044 	movi	r5,1
    d05c:	d8c00204 	addi	r3,sp,8
    d060:	d8c00115 	stw	r3,4(sp)
    d064:	dc000015 	stw	r16,0(sp)
    d068:	2809883a 	mov	r4,r5
    d06c:	103ee83a 	callr	r2
    d070:	14400d26 	beq	r2,r17,d0a8 <_Unwind_SjLj_RaiseException+0x9c>
    d074:	14c0171e 	bne	r2,r19,d0d4 <_Unwind_SjLj_RaiseException+0xc8>
    d078:	d8800217 	ldw	r2,8(sp)
    d07c:	10800017 	ldw	r2,0(r2)
    d080:	d8800215 	stw	r2,8(sp)
    d084:	103ff01e 	bne	r2,zero,d048 <__alt_data_end+0xfc00d048>
    d088:	00800144 	movi	r2,5
    d08c:	dfc00717 	ldw	ra,28(sp)
    d090:	dcc00617 	ldw	r19,24(sp)
    d094:	dc800517 	ldw	r18,20(sp)
    d098:	dc400417 	ldw	r17,16(sp)
    d09c:	dc000317 	ldw	r16,12(sp)
    d0a0:	dec00804 	addi	sp,sp,32
    d0a4:	f800283a 	ret
    d0a8:	d8800217 	ldw	r2,8(sp)
    d0ac:	80000315 	stw	zero,12(r16)
    d0b0:	d9400204 	addi	r5,sp,8
    d0b4:	80800415 	stw	r2,16(r16)
    d0b8:	8009883a 	mov	r4,r16
    d0bc:	dc800215 	stw	r18,8(sp)
    d0c0:	000ce340 	call	ce34 <_Unwind_RaiseException_Phase2>
    d0c4:	00c001c4 	movi	r3,7
    d0c8:	10fff01e 	bne	r2,r3,d08c <__alt_data_end+0xfc00d08c>
    d0cc:	d9000204 	addi	r4,sp,8
    d0d0:	000cef40 	call	cef4 <uw_install_context.isra.1>
    d0d4:	008000c4 	movi	r2,3
    d0d8:	003fec06 	br	d08c <__alt_data_end+0xfc00d08c>

0000d0dc <_Unwind_SjLj_ForcedUnwind>:
    d0dc:	00c000f4 	movhi	r3,3
    d0e0:	18ff3c04 	addi	r3,r3,-784
    d0e4:	defffe04 	addi	sp,sp,-8
    d0e8:	18c00017 	ldw	r3,0(r3)
    d0ec:	dfc00115 	stw	ra,4(sp)
    d0f0:	21400315 	stw	r5,12(r4)
    d0f4:	21800415 	stw	r6,16(r4)
    d0f8:	d80b883a 	mov	r5,sp
    d0fc:	d8c00015 	stw	r3,0(sp)
    d100:	000cd1c0 	call	cd1c <_Unwind_ForcedUnwind_Phase2>
    d104:	00c001c4 	movi	r3,7
    d108:	10c00326 	beq	r2,r3,d118 <_Unwind_SjLj_ForcedUnwind+0x3c>
    d10c:	dfc00117 	ldw	ra,4(sp)
    d110:	dec00204 	addi	sp,sp,8
    d114:	f800283a 	ret
    d118:	d809883a 	mov	r4,sp
    d11c:	000cef40 	call	cef4 <uw_install_context.isra.1>

0000d120 <_Unwind_SjLj_Resume>:
    d120:	00c000f4 	movhi	r3,3
    d124:	18ff3c04 	addi	r3,r3,-784
    d128:	18c00017 	ldw	r3,0(r3)
    d12c:	20800317 	ldw	r2,12(r4)
    d130:	defffe04 	addi	sp,sp,-8
    d134:	dfc00115 	stw	ra,4(sp)
    d138:	d8c00015 	stw	r3,0(sp)
    d13c:	d80b883a 	mov	r5,sp
    d140:	1000041e 	bne	r2,zero,d154 <_Unwind_SjLj_Resume+0x34>
    d144:	000ce340 	call	ce34 <_Unwind_RaiseException_Phase2>
    d148:	00c001c4 	movi	r3,7
    d14c:	10c00326 	beq	r2,r3,d15c <_Unwind_SjLj_Resume+0x3c>
    d150:	000d23c0 	call	d23c <abort>
    d154:	000cd1c0 	call	cd1c <_Unwind_ForcedUnwind_Phase2>
    d158:	003ffb06 	br	d148 <__alt_data_end+0xfc00d148>
    d15c:	d809883a 	mov	r4,sp
    d160:	000cef40 	call	cef4 <uw_install_context.isra.1>

0000d164 <_Unwind_SjLj_Resume_or_Rethrow>:
    d164:	20800317 	ldw	r2,12(r4)
    d168:	defffe04 	addi	sp,sp,-8
    d16c:	dfc00115 	stw	ra,4(sp)
    d170:	1000041e 	bne	r2,zero,d184 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    d174:	000d00c0 	call	d00c <_Unwind_SjLj_RaiseException>
    d178:	dfc00117 	ldw	ra,4(sp)
    d17c:	dec00204 	addi	sp,sp,8
    d180:	f800283a 	ret
    d184:	008000f4 	movhi	r2,3
    d188:	10bf3c04 	addi	r2,r2,-784
    d18c:	10800017 	ldw	r2,0(r2)
    d190:	d80b883a 	mov	r5,sp
    d194:	d8800015 	stw	r2,0(sp)
    d198:	000cd1c0 	call	cd1c <_Unwind_ForcedUnwind_Phase2>
    d19c:	00c001c4 	movi	r3,7
    d1a0:	10c00126 	beq	r2,r3,d1a8 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    d1a4:	000d23c0 	call	d23c <abort>
    d1a8:	d809883a 	mov	r4,sp
    d1ac:	000cef40 	call	cef4 <uw_install_context.isra.1>

0000d1b0 <_Unwind_DeleteException>:
    d1b0:	20800217 	ldw	r2,8(r4)
    d1b4:	10000326 	beq	r2,zero,d1c4 <_Unwind_DeleteException+0x14>
    d1b8:	200b883a 	mov	r5,r4
    d1bc:	01000044 	movi	r4,1
    d1c0:	1000683a 	jmp	r2
    d1c4:	f800283a 	ret

0000d1c8 <_Unwind_Backtrace>:
    d1c8:	008000f4 	movhi	r2,3
    d1cc:	10bf3c04 	addi	r2,r2,-784
    d1d0:	10800017 	ldw	r2,0(r2)
    d1d4:	defffc04 	addi	sp,sp,-16
    d1d8:	dc400215 	stw	r17,8(sp)
    d1dc:	dc000115 	stw	r16,4(sp)
    d1e0:	dfc00315 	stw	ra,12(sp)
    d1e4:	2023883a 	mov	r17,r4
    d1e8:	2821883a 	mov	r16,r5
    d1ec:	d8800015 	stw	r2,0(sp)
    d1f0:	00000506 	br	d208 <_Unwind_Backtrace+0x40>
    d1f4:	883ee83a 	callr	r17
    d1f8:	10000e1e 	bne	r2,zero,d234 <_Unwind_Backtrace+0x6c>
    d1fc:	d8800017 	ldw	r2,0(sp)
    d200:	10800017 	ldw	r2,0(r2)
    d204:	d8800015 	stw	r2,0(sp)
    d208:	800b883a 	mov	r5,r16
    d20c:	d809883a 	mov	r4,sp
    d210:	103ff81e 	bne	r2,zero,d1f4 <__alt_data_end+0xfc00d1f4>
    d214:	883ee83a 	callr	r17
    d218:	1000061e 	bne	r2,zero,d234 <_Unwind_Backtrace+0x6c>
    d21c:	00800144 	movi	r2,5
    d220:	dfc00317 	ldw	ra,12(sp)
    d224:	dc400217 	ldw	r17,8(sp)
    d228:	dc000117 	ldw	r16,4(sp)
    d22c:	dec00404 	addi	sp,sp,16
    d230:	f800283a 	ret
    d234:	008000c4 	movi	r2,3
    d238:	003ff906 	br	d220 <__alt_data_end+0xfc00d220>

0000d23c <abort>:
    d23c:	deffff04 	addi	sp,sp,-4
    d240:	01000184 	movi	r4,6
    d244:	dfc00015 	stw	ra,0(sp)
    d248:	000e14c0 	call	e14c <raise>
    d24c:	01000044 	movi	r4,1
    d250:	001def00 	call	1def0 <_exit>

0000d254 <clock>:
    d254:	008000f4 	movhi	r2,3
    d258:	10b2ae04 	addi	r2,r2,-13640
    d25c:	11000017 	ldw	r4,0(r2)
    d260:	defffb04 	addi	sp,sp,-20
    d264:	d80b883a 	mov	r5,sp
    d268:	dfc00415 	stw	ra,16(sp)
    d26c:	00106f00 	call	106f0 <_times_r>
    d270:	00ffffc4 	movi	r3,-1
    d274:	10c00726 	beq	r2,r3,d294 <clock+0x40>
    d278:	d8c00017 	ldw	r3,0(sp)
    d27c:	d8800117 	ldw	r2,4(sp)
    d280:	1885883a 	add	r2,r3,r2
    d284:	d8c00217 	ldw	r3,8(sp)
    d288:	10c7883a 	add	r3,r2,r3
    d28c:	d8800317 	ldw	r2,12(sp)
    d290:	1885883a 	add	r2,r3,r2
    d294:	dfc00417 	ldw	ra,16(sp)
    d298:	dec00504 	addi	sp,sp,20
    d29c:	f800283a 	ret

0000d2a0 <malloc>:
    d2a0:	008000f4 	movhi	r2,3
    d2a4:	10b2ae04 	addi	r2,r2,-13640
    d2a8:	200b883a 	mov	r5,r4
    d2ac:	11000017 	ldw	r4,0(r2)
    d2b0:	000d2c81 	jmpi	d2c8 <_malloc_r>

0000d2b4 <free>:
    d2b4:	008000f4 	movhi	r2,3
    d2b8:	10b2ae04 	addi	r2,r2,-13640
    d2bc:	200b883a 	mov	r5,r4
    d2c0:	11000017 	ldw	r4,0(r2)
    d2c4:	0014c2c1 	jmpi	14c2c <_free_r>

0000d2c8 <_malloc_r>:
    d2c8:	defff504 	addi	sp,sp,-44
    d2cc:	dc800315 	stw	r18,12(sp)
    d2d0:	dfc00a15 	stw	ra,40(sp)
    d2d4:	df000915 	stw	fp,36(sp)
    d2d8:	ddc00815 	stw	r23,32(sp)
    d2dc:	dd800715 	stw	r22,28(sp)
    d2e0:	dd400615 	stw	r21,24(sp)
    d2e4:	dd000515 	stw	r20,20(sp)
    d2e8:	dcc00415 	stw	r19,16(sp)
    d2ec:	dc400215 	stw	r17,8(sp)
    d2f0:	dc000115 	stw	r16,4(sp)
    d2f4:	288002c4 	addi	r2,r5,11
    d2f8:	00c00584 	movi	r3,22
    d2fc:	2025883a 	mov	r18,r4
    d300:	18807f2e 	bgeu	r3,r2,d500 <_malloc_r+0x238>
    d304:	047ffe04 	movi	r17,-8
    d308:	1462703a 	and	r17,r2,r17
    d30c:	8800a316 	blt	r17,zero,d59c <_malloc_r+0x2d4>
    d310:	8940a236 	bltu	r17,r5,d59c <_malloc_r+0x2d4>
    d314:	001e50c0 	call	1e50c <__malloc_lock>
    d318:	00807dc4 	movi	r2,503
    d31c:	1441e92e 	bgeu	r2,r17,dac4 <_malloc_r+0x7fc>
    d320:	8804d27a 	srli	r2,r17,9
    d324:	1000a126 	beq	r2,zero,d5ac <_malloc_r+0x2e4>
    d328:	00c00104 	movi	r3,4
    d32c:	18811e36 	bltu	r3,r2,d7a8 <_malloc_r+0x4e0>
    d330:	8804d1ba 	srli	r2,r17,6
    d334:	12000e44 	addi	r8,r2,57
    d338:	11c00e04 	addi	r7,r2,56
    d33c:	4209883a 	add	r4,r8,r8
    d340:	04c000f4 	movhi	r19,3
    d344:	2109883a 	add	r4,r4,r4
    d348:	9ce75104 	addi	r19,r19,-25276
    d34c:	2109883a 	add	r4,r4,r4
    d350:	9909883a 	add	r4,r19,r4
    d354:	24000117 	ldw	r16,4(r4)
    d358:	213ffe04 	addi	r4,r4,-8
    d35c:	24009726 	beq	r4,r16,d5bc <_malloc_r+0x2f4>
    d360:	80800117 	ldw	r2,4(r16)
    d364:	01bfff04 	movi	r6,-4
    d368:	014003c4 	movi	r5,15
    d36c:	1184703a 	and	r2,r2,r6
    d370:	1447c83a 	sub	r3,r2,r17
    d374:	28c00716 	blt	r5,r3,d394 <_malloc_r+0xcc>
    d378:	1800920e 	bge	r3,zero,d5c4 <_malloc_r+0x2fc>
    d37c:	84000317 	ldw	r16,12(r16)
    d380:	24008e26 	beq	r4,r16,d5bc <_malloc_r+0x2f4>
    d384:	80800117 	ldw	r2,4(r16)
    d388:	1184703a 	and	r2,r2,r6
    d38c:	1447c83a 	sub	r3,r2,r17
    d390:	28fff90e 	bge	r5,r3,d378 <__alt_data_end+0xfc00d378>
    d394:	3809883a 	mov	r4,r7
    d398:	018000f4 	movhi	r6,3
    d39c:	9c000417 	ldw	r16,16(r19)
    d3a0:	31a75104 	addi	r6,r6,-25276
    d3a4:	32000204 	addi	r8,r6,8
    d3a8:	82013426 	beq	r16,r8,d87c <_malloc_r+0x5b4>
    d3ac:	80c00117 	ldw	r3,4(r16)
    d3b0:	00bfff04 	movi	r2,-4
    d3b4:	188e703a 	and	r7,r3,r2
    d3b8:	3c45c83a 	sub	r2,r7,r17
    d3bc:	00c003c4 	movi	r3,15
    d3c0:	18811f16 	blt	r3,r2,d840 <_malloc_r+0x578>
    d3c4:	32000515 	stw	r8,20(r6)
    d3c8:	32000415 	stw	r8,16(r6)
    d3cc:	10007f0e 	bge	r2,zero,d5cc <_malloc_r+0x304>
    d3d0:	00807fc4 	movi	r2,511
    d3d4:	11c0fd36 	bltu	r2,r7,d7cc <_malloc_r+0x504>
    d3d8:	3806d0fa 	srli	r3,r7,3
    d3dc:	01c00044 	movi	r7,1
    d3e0:	30800117 	ldw	r2,4(r6)
    d3e4:	19400044 	addi	r5,r3,1
    d3e8:	294b883a 	add	r5,r5,r5
    d3ec:	1807d0ba 	srai	r3,r3,2
    d3f0:	294b883a 	add	r5,r5,r5
    d3f4:	294b883a 	add	r5,r5,r5
    d3f8:	298b883a 	add	r5,r5,r6
    d3fc:	38c6983a 	sll	r3,r7,r3
    d400:	29c00017 	ldw	r7,0(r5)
    d404:	2a7ffe04 	addi	r9,r5,-8
    d408:	1886b03a 	or	r3,r3,r2
    d40c:	82400315 	stw	r9,12(r16)
    d410:	81c00215 	stw	r7,8(r16)
    d414:	30c00115 	stw	r3,4(r6)
    d418:	2c000015 	stw	r16,0(r5)
    d41c:	3c000315 	stw	r16,12(r7)
    d420:	2005d0ba 	srai	r2,r4,2
    d424:	01400044 	movi	r5,1
    d428:	288a983a 	sll	r5,r5,r2
    d42c:	19406f36 	bltu	r3,r5,d5ec <_malloc_r+0x324>
    d430:	28c4703a 	and	r2,r5,r3
    d434:	10000a1e 	bne	r2,zero,d460 <_malloc_r+0x198>
    d438:	00bfff04 	movi	r2,-4
    d43c:	294b883a 	add	r5,r5,r5
    d440:	2088703a 	and	r4,r4,r2
    d444:	28c4703a 	and	r2,r5,r3
    d448:	21000104 	addi	r4,r4,4
    d44c:	1000041e 	bne	r2,zero,d460 <_malloc_r+0x198>
    d450:	294b883a 	add	r5,r5,r5
    d454:	28c4703a 	and	r2,r5,r3
    d458:	21000104 	addi	r4,r4,4
    d45c:	103ffc26 	beq	r2,zero,d450 <__alt_data_end+0xfc00d450>
    d460:	02bfff04 	movi	r10,-4
    d464:	024003c4 	movi	r9,15
    d468:	21800044 	addi	r6,r4,1
    d46c:	318d883a 	add	r6,r6,r6
    d470:	318d883a 	add	r6,r6,r6
    d474:	318d883a 	add	r6,r6,r6
    d478:	998d883a 	add	r6,r19,r6
    d47c:	333ffe04 	addi	r12,r6,-8
    d480:	2017883a 	mov	r11,r4
    d484:	31800104 	addi	r6,r6,4
    d488:	34000017 	ldw	r16,0(r6)
    d48c:	31fffd04 	addi	r7,r6,-12
    d490:	81c0041e 	bne	r16,r7,d4a4 <_malloc_r+0x1dc>
    d494:	0000fb06 	br	d884 <_malloc_r+0x5bc>
    d498:	1801030e 	bge	r3,zero,d8a8 <_malloc_r+0x5e0>
    d49c:	84000317 	ldw	r16,12(r16)
    d4a0:	81c0f826 	beq	r16,r7,d884 <_malloc_r+0x5bc>
    d4a4:	80800117 	ldw	r2,4(r16)
    d4a8:	1284703a 	and	r2,r2,r10
    d4ac:	1447c83a 	sub	r3,r2,r17
    d4b0:	48fff90e 	bge	r9,r3,d498 <__alt_data_end+0xfc00d498>
    d4b4:	80800317 	ldw	r2,12(r16)
    d4b8:	81000217 	ldw	r4,8(r16)
    d4bc:	89400054 	ori	r5,r17,1
    d4c0:	81400115 	stw	r5,4(r16)
    d4c4:	20800315 	stw	r2,12(r4)
    d4c8:	11000215 	stw	r4,8(r2)
    d4cc:	8463883a 	add	r17,r16,r17
    d4d0:	9c400515 	stw	r17,20(r19)
    d4d4:	9c400415 	stw	r17,16(r19)
    d4d8:	18800054 	ori	r2,r3,1
    d4dc:	88800115 	stw	r2,4(r17)
    d4e0:	8a000315 	stw	r8,12(r17)
    d4e4:	8a000215 	stw	r8,8(r17)
    d4e8:	88e3883a 	add	r17,r17,r3
    d4ec:	88c00015 	stw	r3,0(r17)
    d4f0:	9009883a 	mov	r4,r18
    d4f4:	001e5300 	call	1e530 <__malloc_unlock>
    d4f8:	80800204 	addi	r2,r16,8
    d4fc:	00001b06 	br	d56c <_malloc_r+0x2a4>
    d500:	04400404 	movi	r17,16
    d504:	89402536 	bltu	r17,r5,d59c <_malloc_r+0x2d4>
    d508:	001e50c0 	call	1e50c <__malloc_lock>
    d50c:	00800184 	movi	r2,6
    d510:	01000084 	movi	r4,2
    d514:	04c000f4 	movhi	r19,3
    d518:	1085883a 	add	r2,r2,r2
    d51c:	9ce75104 	addi	r19,r19,-25276
    d520:	1085883a 	add	r2,r2,r2
    d524:	9885883a 	add	r2,r19,r2
    d528:	14000117 	ldw	r16,4(r2)
    d52c:	10fffe04 	addi	r3,r2,-8
    d530:	80c0d926 	beq	r16,r3,d898 <_malloc_r+0x5d0>
    d534:	80c00117 	ldw	r3,4(r16)
    d538:	81000317 	ldw	r4,12(r16)
    d53c:	00bfff04 	movi	r2,-4
    d540:	1884703a 	and	r2,r3,r2
    d544:	81400217 	ldw	r5,8(r16)
    d548:	8085883a 	add	r2,r16,r2
    d54c:	10c00117 	ldw	r3,4(r2)
    d550:	29000315 	stw	r4,12(r5)
    d554:	21400215 	stw	r5,8(r4)
    d558:	18c00054 	ori	r3,r3,1
    d55c:	10c00115 	stw	r3,4(r2)
    d560:	9009883a 	mov	r4,r18
    d564:	001e5300 	call	1e530 <__malloc_unlock>
    d568:	80800204 	addi	r2,r16,8
    d56c:	dfc00a17 	ldw	ra,40(sp)
    d570:	df000917 	ldw	fp,36(sp)
    d574:	ddc00817 	ldw	r23,32(sp)
    d578:	dd800717 	ldw	r22,28(sp)
    d57c:	dd400617 	ldw	r21,24(sp)
    d580:	dd000517 	ldw	r20,20(sp)
    d584:	dcc00417 	ldw	r19,16(sp)
    d588:	dc800317 	ldw	r18,12(sp)
    d58c:	dc400217 	ldw	r17,8(sp)
    d590:	dc000117 	ldw	r16,4(sp)
    d594:	dec00b04 	addi	sp,sp,44
    d598:	f800283a 	ret
    d59c:	00800304 	movi	r2,12
    d5a0:	90800015 	stw	r2,0(r18)
    d5a4:	0005883a 	mov	r2,zero
    d5a8:	003ff006 	br	d56c <__alt_data_end+0xfc00d56c>
    d5ac:	01002004 	movi	r4,128
    d5b0:	02001004 	movi	r8,64
    d5b4:	01c00fc4 	movi	r7,63
    d5b8:	003f6106 	br	d340 <__alt_data_end+0xfc00d340>
    d5bc:	4009883a 	mov	r4,r8
    d5c0:	003f7506 	br	d398 <__alt_data_end+0xfc00d398>
    d5c4:	81000317 	ldw	r4,12(r16)
    d5c8:	003fde06 	br	d544 <__alt_data_end+0xfc00d544>
    d5cc:	81c5883a 	add	r2,r16,r7
    d5d0:	11400117 	ldw	r5,4(r2)
    d5d4:	9009883a 	mov	r4,r18
    d5d8:	29400054 	ori	r5,r5,1
    d5dc:	11400115 	stw	r5,4(r2)
    d5e0:	001e5300 	call	1e530 <__malloc_unlock>
    d5e4:	80800204 	addi	r2,r16,8
    d5e8:	003fe006 	br	d56c <__alt_data_end+0xfc00d56c>
    d5ec:	9c000217 	ldw	r16,8(r19)
    d5f0:	00bfff04 	movi	r2,-4
    d5f4:	85800117 	ldw	r22,4(r16)
    d5f8:	b0ac703a 	and	r22,r22,r2
    d5fc:	b4400336 	bltu	r22,r17,d60c <_malloc_r+0x344>
    d600:	b445c83a 	sub	r2,r22,r17
    d604:	00c003c4 	movi	r3,15
    d608:	18805d16 	blt	r3,r2,d780 <_malloc_r+0x4b8>
    d60c:	05c000f4 	movhi	r23,3
    d610:	008000f4 	movhi	r2,3
    d614:	10bf3f04 	addi	r2,r2,-772
    d618:	bdf2af04 	addi	r23,r23,-13636
    d61c:	15400017 	ldw	r21,0(r2)
    d620:	b8c00017 	ldw	r3,0(r23)
    d624:	00bfffc4 	movi	r2,-1
    d628:	858d883a 	add	r6,r16,r22
    d62c:	8d6b883a 	add	r21,r17,r21
    d630:	1880ea26 	beq	r3,r2,d9dc <_malloc_r+0x714>
    d634:	ad4403c4 	addi	r21,r21,4111
    d638:	00bc0004 	movi	r2,-4096
    d63c:	a8aa703a 	and	r21,r21,r2
    d640:	a80b883a 	mov	r5,r21
    d644:	9009883a 	mov	r4,r18
    d648:	d9800015 	stw	r6,0(sp)
    d64c:	000dea40 	call	dea4 <_sbrk_r>
    d650:	1029883a 	mov	r20,r2
    d654:	00bfffc4 	movi	r2,-1
    d658:	d9800017 	ldw	r6,0(sp)
    d65c:	a080e826 	beq	r20,r2,da00 <_malloc_r+0x738>
    d660:	a180a636 	bltu	r20,r6,d8fc <_malloc_r+0x634>
    d664:	070000f4 	movhi	fp,3
    d668:	e73f9704 	addi	fp,fp,-420
    d66c:	e0800017 	ldw	r2,0(fp)
    d670:	a887883a 	add	r3,r21,r2
    d674:	e0c00015 	stw	r3,0(fp)
    d678:	3500e626 	beq	r6,r20,da14 <_malloc_r+0x74c>
    d67c:	b9000017 	ldw	r4,0(r23)
    d680:	00bfffc4 	movi	r2,-1
    d684:	2080ee26 	beq	r4,r2,da40 <_malloc_r+0x778>
    d688:	a185c83a 	sub	r2,r20,r6
    d68c:	10c5883a 	add	r2,r2,r3
    d690:	e0800015 	stw	r2,0(fp)
    d694:	a0c001cc 	andi	r3,r20,7
    d698:	1800bc26 	beq	r3,zero,d98c <_malloc_r+0x6c4>
    d69c:	a0e9c83a 	sub	r20,r20,r3
    d6a0:	00840204 	movi	r2,4104
    d6a4:	a5000204 	addi	r20,r20,8
    d6a8:	10c7c83a 	sub	r3,r2,r3
    d6ac:	a545883a 	add	r2,r20,r21
    d6b0:	1083ffcc 	andi	r2,r2,4095
    d6b4:	18abc83a 	sub	r21,r3,r2
    d6b8:	a80b883a 	mov	r5,r21
    d6bc:	9009883a 	mov	r4,r18
    d6c0:	000dea40 	call	dea4 <_sbrk_r>
    d6c4:	00ffffc4 	movi	r3,-1
    d6c8:	10c0e126 	beq	r2,r3,da50 <_malloc_r+0x788>
    d6cc:	1505c83a 	sub	r2,r2,r20
    d6d0:	1545883a 	add	r2,r2,r21
    d6d4:	10800054 	ori	r2,r2,1
    d6d8:	e0c00017 	ldw	r3,0(fp)
    d6dc:	9d000215 	stw	r20,8(r19)
    d6e0:	a0800115 	stw	r2,4(r20)
    d6e4:	a8c7883a 	add	r3,r21,r3
    d6e8:	e0c00015 	stw	r3,0(fp)
    d6ec:	84c00e26 	beq	r16,r19,d728 <_malloc_r+0x460>
    d6f0:	018003c4 	movi	r6,15
    d6f4:	3580a72e 	bgeu	r6,r22,d994 <_malloc_r+0x6cc>
    d6f8:	81400117 	ldw	r5,4(r16)
    d6fc:	013ffe04 	movi	r4,-8
    d700:	b0bffd04 	addi	r2,r22,-12
    d704:	1104703a 	and	r2,r2,r4
    d708:	2900004c 	andi	r4,r5,1
    d70c:	2088b03a 	or	r4,r4,r2
    d710:	81000115 	stw	r4,4(r16)
    d714:	01400144 	movi	r5,5
    d718:	8089883a 	add	r4,r16,r2
    d71c:	21400115 	stw	r5,4(r4)
    d720:	21400215 	stw	r5,8(r4)
    d724:	3080cd36 	bltu	r6,r2,da5c <_malloc_r+0x794>
    d728:	008000f4 	movhi	r2,3
    d72c:	10bf3e04 	addi	r2,r2,-776
    d730:	11000017 	ldw	r4,0(r2)
    d734:	20c0012e 	bgeu	r4,r3,d73c <_malloc_r+0x474>
    d738:	10c00015 	stw	r3,0(r2)
    d73c:	008000f4 	movhi	r2,3
    d740:	10bf3d04 	addi	r2,r2,-780
    d744:	11000017 	ldw	r4,0(r2)
    d748:	9c000217 	ldw	r16,8(r19)
    d74c:	20c0012e 	bgeu	r4,r3,d754 <_malloc_r+0x48c>
    d750:	10c00015 	stw	r3,0(r2)
    d754:	80c00117 	ldw	r3,4(r16)
    d758:	00bfff04 	movi	r2,-4
    d75c:	1886703a 	and	r3,r3,r2
    d760:	1c45c83a 	sub	r2,r3,r17
    d764:	1c400236 	bltu	r3,r17,d770 <_malloc_r+0x4a8>
    d768:	00c003c4 	movi	r3,15
    d76c:	18800416 	blt	r3,r2,d780 <_malloc_r+0x4b8>
    d770:	9009883a 	mov	r4,r18
    d774:	001e5300 	call	1e530 <__malloc_unlock>
    d778:	0005883a 	mov	r2,zero
    d77c:	003f7b06 	br	d56c <__alt_data_end+0xfc00d56c>
    d780:	88c00054 	ori	r3,r17,1
    d784:	80c00115 	stw	r3,4(r16)
    d788:	8463883a 	add	r17,r16,r17
    d78c:	10800054 	ori	r2,r2,1
    d790:	9c400215 	stw	r17,8(r19)
    d794:	88800115 	stw	r2,4(r17)
    d798:	9009883a 	mov	r4,r18
    d79c:	001e5300 	call	1e530 <__malloc_unlock>
    d7a0:	80800204 	addi	r2,r16,8
    d7a4:	003f7106 	br	d56c <__alt_data_end+0xfc00d56c>
    d7a8:	00c00504 	movi	r3,20
    d7ac:	18804a2e 	bgeu	r3,r2,d8d8 <_malloc_r+0x610>
    d7b0:	00c01504 	movi	r3,84
    d7b4:	18806e36 	bltu	r3,r2,d970 <_malloc_r+0x6a8>
    d7b8:	8804d33a 	srli	r2,r17,12
    d7bc:	12001bc4 	addi	r8,r2,111
    d7c0:	11c01b84 	addi	r7,r2,110
    d7c4:	4209883a 	add	r4,r8,r8
    d7c8:	003edd06 	br	d340 <__alt_data_end+0xfc00d340>
    d7cc:	3804d27a 	srli	r2,r7,9
    d7d0:	00c00104 	movi	r3,4
    d7d4:	1880442e 	bgeu	r3,r2,d8e8 <_malloc_r+0x620>
    d7d8:	00c00504 	movi	r3,20
    d7dc:	18808136 	bltu	r3,r2,d9e4 <_malloc_r+0x71c>
    d7e0:	11401704 	addi	r5,r2,92
    d7e4:	10c016c4 	addi	r3,r2,91
    d7e8:	294b883a 	add	r5,r5,r5
    d7ec:	294b883a 	add	r5,r5,r5
    d7f0:	294b883a 	add	r5,r5,r5
    d7f4:	994b883a 	add	r5,r19,r5
    d7f8:	28800017 	ldw	r2,0(r5)
    d7fc:	018000f4 	movhi	r6,3
    d800:	297ffe04 	addi	r5,r5,-8
    d804:	31a75104 	addi	r6,r6,-25276
    d808:	28806526 	beq	r5,r2,d9a0 <_malloc_r+0x6d8>
    d80c:	01bfff04 	movi	r6,-4
    d810:	10c00117 	ldw	r3,4(r2)
    d814:	1986703a 	and	r3,r3,r6
    d818:	38c0022e 	bgeu	r7,r3,d824 <_malloc_r+0x55c>
    d81c:	10800217 	ldw	r2,8(r2)
    d820:	28bffb1e 	bne	r5,r2,d810 <__alt_data_end+0xfc00d810>
    d824:	11400317 	ldw	r5,12(r2)
    d828:	98c00117 	ldw	r3,4(r19)
    d82c:	81400315 	stw	r5,12(r16)
    d830:	80800215 	stw	r2,8(r16)
    d834:	2c000215 	stw	r16,8(r5)
    d838:	14000315 	stw	r16,12(r2)
    d83c:	003ef806 	br	d420 <__alt_data_end+0xfc00d420>
    d840:	88c00054 	ori	r3,r17,1
    d844:	80c00115 	stw	r3,4(r16)
    d848:	8463883a 	add	r17,r16,r17
    d84c:	34400515 	stw	r17,20(r6)
    d850:	34400415 	stw	r17,16(r6)
    d854:	10c00054 	ori	r3,r2,1
    d858:	8a000315 	stw	r8,12(r17)
    d85c:	8a000215 	stw	r8,8(r17)
    d860:	88c00115 	stw	r3,4(r17)
    d864:	88a3883a 	add	r17,r17,r2
    d868:	88800015 	stw	r2,0(r17)
    d86c:	9009883a 	mov	r4,r18
    d870:	001e5300 	call	1e530 <__malloc_unlock>
    d874:	80800204 	addi	r2,r16,8
    d878:	003f3c06 	br	d56c <__alt_data_end+0xfc00d56c>
    d87c:	30c00117 	ldw	r3,4(r6)
    d880:	003ee706 	br	d420 <__alt_data_end+0xfc00d420>
    d884:	5ac00044 	addi	r11,r11,1
    d888:	588000cc 	andi	r2,r11,3
    d88c:	31800204 	addi	r6,r6,8
    d890:	103efd1e 	bne	r2,zero,d488 <__alt_data_end+0xfc00d488>
    d894:	00002406 	br	d928 <_malloc_r+0x660>
    d898:	14000317 	ldw	r16,12(r2)
    d89c:	143f251e 	bne	r2,r16,d534 <__alt_data_end+0xfc00d534>
    d8a0:	21000084 	addi	r4,r4,2
    d8a4:	003ebc06 	br	d398 <__alt_data_end+0xfc00d398>
    d8a8:	8085883a 	add	r2,r16,r2
    d8ac:	10c00117 	ldw	r3,4(r2)
    d8b0:	81000317 	ldw	r4,12(r16)
    d8b4:	81400217 	ldw	r5,8(r16)
    d8b8:	18c00054 	ori	r3,r3,1
    d8bc:	10c00115 	stw	r3,4(r2)
    d8c0:	29000315 	stw	r4,12(r5)
    d8c4:	21400215 	stw	r5,8(r4)
    d8c8:	9009883a 	mov	r4,r18
    d8cc:	001e5300 	call	1e530 <__malloc_unlock>
    d8d0:	80800204 	addi	r2,r16,8
    d8d4:	003f2506 	br	d56c <__alt_data_end+0xfc00d56c>
    d8d8:	12001704 	addi	r8,r2,92
    d8dc:	11c016c4 	addi	r7,r2,91
    d8e0:	4209883a 	add	r4,r8,r8
    d8e4:	003e9606 	br	d340 <__alt_data_end+0xfc00d340>
    d8e8:	3804d1ba 	srli	r2,r7,6
    d8ec:	11400e44 	addi	r5,r2,57
    d8f0:	10c00e04 	addi	r3,r2,56
    d8f4:	294b883a 	add	r5,r5,r5
    d8f8:	003fbc06 	br	d7ec <__alt_data_end+0xfc00d7ec>
    d8fc:	84ff5926 	beq	r16,r19,d664 <__alt_data_end+0xfc00d664>
    d900:	008000f4 	movhi	r2,3
    d904:	10a75104 	addi	r2,r2,-25276
    d908:	14000217 	ldw	r16,8(r2)
    d90c:	00bfff04 	movi	r2,-4
    d910:	80c00117 	ldw	r3,4(r16)
    d914:	1886703a 	and	r3,r3,r2
    d918:	003f9106 	br	d760 <__alt_data_end+0xfc00d760>
    d91c:	60800217 	ldw	r2,8(r12)
    d920:	213fffc4 	addi	r4,r4,-1
    d924:	1300651e 	bne	r2,r12,dabc <_malloc_r+0x7f4>
    d928:	208000cc 	andi	r2,r4,3
    d92c:	633ffe04 	addi	r12,r12,-8
    d930:	103ffa1e 	bne	r2,zero,d91c <__alt_data_end+0xfc00d91c>
    d934:	98800117 	ldw	r2,4(r19)
    d938:	0146303a 	nor	r3,zero,r5
    d93c:	1884703a 	and	r2,r3,r2
    d940:	98800115 	stw	r2,4(r19)
    d944:	294b883a 	add	r5,r5,r5
    d948:	117f2836 	bltu	r2,r5,d5ec <__alt_data_end+0xfc00d5ec>
    d94c:	283f2726 	beq	r5,zero,d5ec <__alt_data_end+0xfc00d5ec>
    d950:	2886703a 	and	r3,r5,r2
    d954:	5809883a 	mov	r4,r11
    d958:	183ec31e 	bne	r3,zero,d468 <__alt_data_end+0xfc00d468>
    d95c:	294b883a 	add	r5,r5,r5
    d960:	2886703a 	and	r3,r5,r2
    d964:	21000104 	addi	r4,r4,4
    d968:	183ffc26 	beq	r3,zero,d95c <__alt_data_end+0xfc00d95c>
    d96c:	003ebe06 	br	d468 <__alt_data_end+0xfc00d468>
    d970:	00c05504 	movi	r3,340
    d974:	18801236 	bltu	r3,r2,d9c0 <_malloc_r+0x6f8>
    d978:	8804d3fa 	srli	r2,r17,15
    d97c:	12001e04 	addi	r8,r2,120
    d980:	11c01dc4 	addi	r7,r2,119
    d984:	4209883a 	add	r4,r8,r8
    d988:	003e6d06 	br	d340 <__alt_data_end+0xfc00d340>
    d98c:	00c40004 	movi	r3,4096
    d990:	003f4606 	br	d6ac <__alt_data_end+0xfc00d6ac>
    d994:	00800044 	movi	r2,1
    d998:	a0800115 	stw	r2,4(r20)
    d99c:	003f7406 	br	d770 <__alt_data_end+0xfc00d770>
    d9a0:	1805d0ba 	srai	r2,r3,2
    d9a4:	01c00044 	movi	r7,1
    d9a8:	30c00117 	ldw	r3,4(r6)
    d9ac:	388e983a 	sll	r7,r7,r2
    d9b0:	2805883a 	mov	r2,r5
    d9b4:	38c6b03a 	or	r3,r7,r3
    d9b8:	30c00115 	stw	r3,4(r6)
    d9bc:	003f9b06 	br	d82c <__alt_data_end+0xfc00d82c>
    d9c0:	00c15504 	movi	r3,1364
    d9c4:	18801a36 	bltu	r3,r2,da30 <_malloc_r+0x768>
    d9c8:	8804d4ba 	srli	r2,r17,18
    d9cc:	12001f44 	addi	r8,r2,125
    d9d0:	11c01f04 	addi	r7,r2,124
    d9d4:	4209883a 	add	r4,r8,r8
    d9d8:	003e5906 	br	d340 <__alt_data_end+0xfc00d340>
    d9dc:	ad400404 	addi	r21,r21,16
    d9e0:	003f1706 	br	d640 <__alt_data_end+0xfc00d640>
    d9e4:	00c01504 	movi	r3,84
    d9e8:	18802336 	bltu	r3,r2,da78 <_malloc_r+0x7b0>
    d9ec:	3804d33a 	srli	r2,r7,12
    d9f0:	11401bc4 	addi	r5,r2,111
    d9f4:	10c01b84 	addi	r3,r2,110
    d9f8:	294b883a 	add	r5,r5,r5
    d9fc:	003f7b06 	br	d7ec <__alt_data_end+0xfc00d7ec>
    da00:	9c000217 	ldw	r16,8(r19)
    da04:	00bfff04 	movi	r2,-4
    da08:	80c00117 	ldw	r3,4(r16)
    da0c:	1886703a 	and	r3,r3,r2
    da10:	003f5306 	br	d760 <__alt_data_end+0xfc00d760>
    da14:	3083ffcc 	andi	r2,r6,4095
    da18:	103f181e 	bne	r2,zero,d67c <__alt_data_end+0xfc00d67c>
    da1c:	99000217 	ldw	r4,8(r19)
    da20:	b545883a 	add	r2,r22,r21
    da24:	10800054 	ori	r2,r2,1
    da28:	20800115 	stw	r2,4(r4)
    da2c:	003f3e06 	br	d728 <__alt_data_end+0xfc00d728>
    da30:	01003f84 	movi	r4,254
    da34:	02001fc4 	movi	r8,127
    da38:	01c01f84 	movi	r7,126
    da3c:	003e4006 	br	d340 <__alt_data_end+0xfc00d340>
    da40:	008000f4 	movhi	r2,3
    da44:	10b2af04 	addi	r2,r2,-13636
    da48:	15000015 	stw	r20,0(r2)
    da4c:	003f1106 	br	d694 <__alt_data_end+0xfc00d694>
    da50:	00800044 	movi	r2,1
    da54:	002b883a 	mov	r21,zero
    da58:	003f1f06 	br	d6d8 <__alt_data_end+0xfc00d6d8>
    da5c:	81400204 	addi	r5,r16,8
    da60:	9009883a 	mov	r4,r18
    da64:	0014c2c0 	call	14c2c <_free_r>
    da68:	008000f4 	movhi	r2,3
    da6c:	10bf9704 	addi	r2,r2,-420
    da70:	10c00017 	ldw	r3,0(r2)
    da74:	003f2c06 	br	d728 <__alt_data_end+0xfc00d728>
    da78:	00c05504 	movi	r3,340
    da7c:	18800536 	bltu	r3,r2,da94 <_malloc_r+0x7cc>
    da80:	3804d3fa 	srli	r2,r7,15
    da84:	11401e04 	addi	r5,r2,120
    da88:	10c01dc4 	addi	r3,r2,119
    da8c:	294b883a 	add	r5,r5,r5
    da90:	003f5606 	br	d7ec <__alt_data_end+0xfc00d7ec>
    da94:	00c15504 	movi	r3,1364
    da98:	18800536 	bltu	r3,r2,dab0 <_malloc_r+0x7e8>
    da9c:	3804d4ba 	srli	r2,r7,18
    daa0:	11401f44 	addi	r5,r2,125
    daa4:	10c01f04 	addi	r3,r2,124
    daa8:	294b883a 	add	r5,r5,r5
    daac:	003f4f06 	br	d7ec <__alt_data_end+0xfc00d7ec>
    dab0:	01403f84 	movi	r5,254
    dab4:	00c01f84 	movi	r3,126
    dab8:	003f4c06 	br	d7ec <__alt_data_end+0xfc00d7ec>
    dabc:	98800117 	ldw	r2,4(r19)
    dac0:	003fa006 	br	d944 <__alt_data_end+0xfc00d944>
    dac4:	8808d0fa 	srli	r4,r17,3
    dac8:	20800044 	addi	r2,r4,1
    dacc:	1085883a 	add	r2,r2,r2
    dad0:	003e9006 	br	d514 <__alt_data_end+0xfc00d514>

0000dad4 <memcpy>:
    dad4:	defffd04 	addi	sp,sp,-12
    dad8:	dfc00215 	stw	ra,8(sp)
    dadc:	dc400115 	stw	r17,4(sp)
    dae0:	dc000015 	stw	r16,0(sp)
    dae4:	00c003c4 	movi	r3,15
    dae8:	2005883a 	mov	r2,r4
    daec:	1980452e 	bgeu	r3,r6,dc04 <memcpy+0x130>
    daf0:	2906b03a 	or	r3,r5,r4
    daf4:	18c000cc 	andi	r3,r3,3
    daf8:	1800441e 	bne	r3,zero,dc0c <memcpy+0x138>
    dafc:	347ffc04 	addi	r17,r6,-16
    db00:	8822d13a 	srli	r17,r17,4
    db04:	28c00104 	addi	r3,r5,4
    db08:	23400104 	addi	r13,r4,4
    db0c:	8820913a 	slli	r16,r17,4
    db10:	2b000204 	addi	r12,r5,8
    db14:	22c00204 	addi	r11,r4,8
    db18:	84000504 	addi	r16,r16,20
    db1c:	2a800304 	addi	r10,r5,12
    db20:	22400304 	addi	r9,r4,12
    db24:	2c21883a 	add	r16,r5,r16
    db28:	2811883a 	mov	r8,r5
    db2c:	200f883a 	mov	r7,r4
    db30:	41000017 	ldw	r4,0(r8)
    db34:	1fc00017 	ldw	ra,0(r3)
    db38:	63c00017 	ldw	r15,0(r12)
    db3c:	39000015 	stw	r4,0(r7)
    db40:	53800017 	ldw	r14,0(r10)
    db44:	6fc00015 	stw	ra,0(r13)
    db48:	5bc00015 	stw	r15,0(r11)
    db4c:	4b800015 	stw	r14,0(r9)
    db50:	18c00404 	addi	r3,r3,16
    db54:	39c00404 	addi	r7,r7,16
    db58:	42000404 	addi	r8,r8,16
    db5c:	6b400404 	addi	r13,r13,16
    db60:	63000404 	addi	r12,r12,16
    db64:	5ac00404 	addi	r11,r11,16
    db68:	52800404 	addi	r10,r10,16
    db6c:	4a400404 	addi	r9,r9,16
    db70:	1c3fef1e 	bne	r3,r16,db30 <__alt_data_end+0xfc00db30>
    db74:	89c00044 	addi	r7,r17,1
    db78:	380e913a 	slli	r7,r7,4
    db7c:	310003cc 	andi	r4,r6,15
    db80:	02c000c4 	movi	r11,3
    db84:	11c7883a 	add	r3,r2,r7
    db88:	29cb883a 	add	r5,r5,r7
    db8c:	5900212e 	bgeu	r11,r4,dc14 <memcpy+0x140>
    db90:	1813883a 	mov	r9,r3
    db94:	2811883a 	mov	r8,r5
    db98:	200f883a 	mov	r7,r4
    db9c:	42800017 	ldw	r10,0(r8)
    dba0:	4a400104 	addi	r9,r9,4
    dba4:	39ffff04 	addi	r7,r7,-4
    dba8:	4abfff15 	stw	r10,-4(r9)
    dbac:	42000104 	addi	r8,r8,4
    dbb0:	59fffa36 	bltu	r11,r7,db9c <__alt_data_end+0xfc00db9c>
    dbb4:	213fff04 	addi	r4,r4,-4
    dbb8:	2008d0ba 	srli	r4,r4,2
    dbbc:	318000cc 	andi	r6,r6,3
    dbc0:	21000044 	addi	r4,r4,1
    dbc4:	2109883a 	add	r4,r4,r4
    dbc8:	2109883a 	add	r4,r4,r4
    dbcc:	1907883a 	add	r3,r3,r4
    dbd0:	290b883a 	add	r5,r5,r4
    dbd4:	30000626 	beq	r6,zero,dbf0 <memcpy+0x11c>
    dbd8:	198d883a 	add	r6,r3,r6
    dbdc:	29c00003 	ldbu	r7,0(r5)
    dbe0:	18c00044 	addi	r3,r3,1
    dbe4:	29400044 	addi	r5,r5,1
    dbe8:	19ffffc5 	stb	r7,-1(r3)
    dbec:	19bffb1e 	bne	r3,r6,dbdc <__alt_data_end+0xfc00dbdc>
    dbf0:	dfc00217 	ldw	ra,8(sp)
    dbf4:	dc400117 	ldw	r17,4(sp)
    dbf8:	dc000017 	ldw	r16,0(sp)
    dbfc:	dec00304 	addi	sp,sp,12
    dc00:	f800283a 	ret
    dc04:	2007883a 	mov	r3,r4
    dc08:	003ff206 	br	dbd4 <__alt_data_end+0xfc00dbd4>
    dc0c:	2007883a 	mov	r3,r4
    dc10:	003ff106 	br	dbd8 <__alt_data_end+0xfc00dbd8>
    dc14:	200d883a 	mov	r6,r4
    dc18:	003fee06 	br	dbd4 <__alt_data_end+0xfc00dbd4>

0000dc1c <memset>:
    dc1c:	20c000cc 	andi	r3,r4,3
    dc20:	2005883a 	mov	r2,r4
    dc24:	18004426 	beq	r3,zero,dd38 <memset+0x11c>
    dc28:	31ffffc4 	addi	r7,r6,-1
    dc2c:	30004026 	beq	r6,zero,dd30 <memset+0x114>
    dc30:	2813883a 	mov	r9,r5
    dc34:	200d883a 	mov	r6,r4
    dc38:	2007883a 	mov	r3,r4
    dc3c:	00000406 	br	dc50 <memset+0x34>
    dc40:	3a3fffc4 	addi	r8,r7,-1
    dc44:	31800044 	addi	r6,r6,1
    dc48:	38003926 	beq	r7,zero,dd30 <memset+0x114>
    dc4c:	400f883a 	mov	r7,r8
    dc50:	18c00044 	addi	r3,r3,1
    dc54:	32400005 	stb	r9,0(r6)
    dc58:	1a0000cc 	andi	r8,r3,3
    dc5c:	403ff81e 	bne	r8,zero,dc40 <__alt_data_end+0xfc00dc40>
    dc60:	010000c4 	movi	r4,3
    dc64:	21c02d2e 	bgeu	r4,r7,dd1c <memset+0x100>
    dc68:	29003fcc 	andi	r4,r5,255
    dc6c:	200c923a 	slli	r6,r4,8
    dc70:	3108b03a 	or	r4,r6,r4
    dc74:	200c943a 	slli	r6,r4,16
    dc78:	218cb03a 	or	r6,r4,r6
    dc7c:	010003c4 	movi	r4,15
    dc80:	21c0182e 	bgeu	r4,r7,dce4 <memset+0xc8>
    dc84:	3b3ffc04 	addi	r12,r7,-16
    dc88:	6018d13a 	srli	r12,r12,4
    dc8c:	1a000104 	addi	r8,r3,4
    dc90:	1ac00204 	addi	r11,r3,8
    dc94:	6008913a 	slli	r4,r12,4
    dc98:	1a800304 	addi	r10,r3,12
    dc9c:	1813883a 	mov	r9,r3
    dca0:	21000504 	addi	r4,r4,20
    dca4:	1909883a 	add	r4,r3,r4
    dca8:	49800015 	stw	r6,0(r9)
    dcac:	41800015 	stw	r6,0(r8)
    dcb0:	59800015 	stw	r6,0(r11)
    dcb4:	51800015 	stw	r6,0(r10)
    dcb8:	42000404 	addi	r8,r8,16
    dcbc:	4a400404 	addi	r9,r9,16
    dcc0:	5ac00404 	addi	r11,r11,16
    dcc4:	52800404 	addi	r10,r10,16
    dcc8:	413ff71e 	bne	r8,r4,dca8 <__alt_data_end+0xfc00dca8>
    dccc:	63000044 	addi	r12,r12,1
    dcd0:	6018913a 	slli	r12,r12,4
    dcd4:	39c003cc 	andi	r7,r7,15
    dcd8:	010000c4 	movi	r4,3
    dcdc:	1b07883a 	add	r3,r3,r12
    dce0:	21c00e2e 	bgeu	r4,r7,dd1c <memset+0x100>
    dce4:	1813883a 	mov	r9,r3
    dce8:	3811883a 	mov	r8,r7
    dcec:	010000c4 	movi	r4,3
    dcf0:	49800015 	stw	r6,0(r9)
    dcf4:	423fff04 	addi	r8,r8,-4
    dcf8:	4a400104 	addi	r9,r9,4
    dcfc:	223ffc36 	bltu	r4,r8,dcf0 <__alt_data_end+0xfc00dcf0>
    dd00:	393fff04 	addi	r4,r7,-4
    dd04:	2008d0ba 	srli	r4,r4,2
    dd08:	39c000cc 	andi	r7,r7,3
    dd0c:	21000044 	addi	r4,r4,1
    dd10:	2109883a 	add	r4,r4,r4
    dd14:	2109883a 	add	r4,r4,r4
    dd18:	1907883a 	add	r3,r3,r4
    dd1c:	38000526 	beq	r7,zero,dd34 <memset+0x118>
    dd20:	19cf883a 	add	r7,r3,r7
    dd24:	19400005 	stb	r5,0(r3)
    dd28:	18c00044 	addi	r3,r3,1
    dd2c:	38fffd1e 	bne	r7,r3,dd24 <__alt_data_end+0xfc00dd24>
    dd30:	f800283a 	ret
    dd34:	f800283a 	ret
    dd38:	2007883a 	mov	r3,r4
    dd3c:	300f883a 	mov	r7,r6
    dd40:	003fc706 	br	dc60 <__alt_data_end+0xfc00dc60>

0000dd44 <_printf_r>:
    dd44:	defffd04 	addi	sp,sp,-12
    dd48:	2805883a 	mov	r2,r5
    dd4c:	dfc00015 	stw	ra,0(sp)
    dd50:	d9800115 	stw	r6,4(sp)
    dd54:	d9c00215 	stw	r7,8(sp)
    dd58:	21400217 	ldw	r5,8(r4)
    dd5c:	d9c00104 	addi	r7,sp,4
    dd60:	100d883a 	mov	r6,r2
    dd64:	00106f80 	call	106f8 <___vfprintf_internal_r>
    dd68:	dfc00017 	ldw	ra,0(sp)
    dd6c:	dec00304 	addi	sp,sp,12
    dd70:	f800283a 	ret

0000dd74 <printf>:
    dd74:	defffc04 	addi	sp,sp,-16
    dd78:	dfc00015 	stw	ra,0(sp)
    dd7c:	d9400115 	stw	r5,4(sp)
    dd80:	d9800215 	stw	r6,8(sp)
    dd84:	d9c00315 	stw	r7,12(sp)
    dd88:	008000f4 	movhi	r2,3
    dd8c:	10b2ae04 	addi	r2,r2,-13640
    dd90:	10800017 	ldw	r2,0(r2)
    dd94:	200b883a 	mov	r5,r4
    dd98:	d9800104 	addi	r6,sp,4
    dd9c:	11000217 	ldw	r4,8(r2)
    dda0:	00129d40 	call	129d4 <__vfprintf_internal>
    dda4:	dfc00017 	ldw	ra,0(sp)
    dda8:	dec00404 	addi	sp,sp,16
    ddac:	f800283a 	ret

0000ddb0 <_putchar_r>:
    ddb0:	21800217 	ldw	r6,8(r4)
    ddb4:	0016b1c1 	jmpi	16b1c <_putc_r>

0000ddb8 <putchar>:
    ddb8:	008000f4 	movhi	r2,3
    ddbc:	10b2ae04 	addi	r2,r2,-13640
    ddc0:	200b883a 	mov	r5,r4
    ddc4:	11000017 	ldw	r4,0(r2)
    ddc8:	21800217 	ldw	r6,8(r4)
    ddcc:	0016b1c1 	jmpi	16b1c <_putc_r>

0000ddd0 <_puts_r>:
    ddd0:	defff604 	addi	sp,sp,-40
    ddd4:	dc000715 	stw	r16,28(sp)
    ddd8:	2021883a 	mov	r16,r4
    dddc:	2809883a 	mov	r4,r5
    dde0:	dc400815 	stw	r17,32(sp)
    dde4:	dfc00915 	stw	ra,36(sp)
    dde8:	2823883a 	mov	r17,r5
    ddec:	000e39c0 	call	e39c <strlen>
    ddf0:	10c00044 	addi	r3,r2,1
    ddf4:	d8800115 	stw	r2,4(sp)
    ddf8:	008000f4 	movhi	r2,3
    ddfc:	10a56e04 	addi	r2,r2,-27208
    de00:	d8800215 	stw	r2,8(sp)
    de04:	00800044 	movi	r2,1
    de08:	d8800315 	stw	r2,12(sp)
    de0c:	00800084 	movi	r2,2
    de10:	dc400015 	stw	r17,0(sp)
    de14:	d8c00615 	stw	r3,24(sp)
    de18:	dec00415 	stw	sp,16(sp)
    de1c:	d8800515 	stw	r2,20(sp)
    de20:	80000226 	beq	r16,zero,de2c <_puts_r+0x5c>
    de24:	80800e17 	ldw	r2,56(r16)
    de28:	10001426 	beq	r2,zero,de7c <_puts_r+0xac>
    de2c:	81400217 	ldw	r5,8(r16)
    de30:	2880030b 	ldhu	r2,12(r5)
    de34:	10c8000c 	andi	r3,r2,8192
    de38:	1800061e 	bne	r3,zero,de54 <_puts_r+0x84>
    de3c:	29001917 	ldw	r4,100(r5)
    de40:	00f7ffc4 	movi	r3,-8193
    de44:	10880014 	ori	r2,r2,8192
    de48:	20c6703a 	and	r3,r4,r3
    de4c:	2880030d 	sth	r2,12(r5)
    de50:	28c01915 	stw	r3,100(r5)
    de54:	d9800404 	addi	r6,sp,16
    de58:	8009883a 	mov	r4,r16
    de5c:	0014f3c0 	call	14f3c <__sfvwrite_r>
    de60:	1000091e 	bne	r2,zero,de88 <_puts_r+0xb8>
    de64:	00800284 	movi	r2,10
    de68:	dfc00917 	ldw	ra,36(sp)
    de6c:	dc400817 	ldw	r17,32(sp)
    de70:	dc000717 	ldw	r16,28(sp)
    de74:	dec00a04 	addi	sp,sp,40
    de78:	f800283a 	ret
    de7c:	8009883a 	mov	r4,r16
    de80:	0014ab80 	call	14ab8 <__sinit>
    de84:	003fe906 	br	de2c <__alt_data_end+0xfc00de2c>
    de88:	00bfffc4 	movi	r2,-1
    de8c:	003ff606 	br	de68 <__alt_data_end+0xfc00de68>

0000de90 <puts>:
    de90:	008000f4 	movhi	r2,3
    de94:	10b2ae04 	addi	r2,r2,-13640
    de98:	200b883a 	mov	r5,r4
    de9c:	11000017 	ldw	r4,0(r2)
    dea0:	000ddd01 	jmpi	ddd0 <_puts_r>

0000dea4 <_sbrk_r>:
    dea4:	defffd04 	addi	sp,sp,-12
    dea8:	dc000015 	stw	r16,0(sp)
    deac:	040000f4 	movhi	r16,3
    deb0:	dc400115 	stw	r17,4(sp)
    deb4:	843f4004 	addi	r16,r16,-768
    deb8:	2023883a 	mov	r17,r4
    debc:	2809883a 	mov	r4,r5
    dec0:	dfc00215 	stw	ra,8(sp)
    dec4:	80000015 	stw	zero,0(r16)
    dec8:	001e7180 	call	1e718 <sbrk>
    decc:	00ffffc4 	movi	r3,-1
    ded0:	10c00526 	beq	r2,r3,dee8 <_sbrk_r+0x44>
    ded4:	dfc00217 	ldw	ra,8(sp)
    ded8:	dc400117 	ldw	r17,4(sp)
    dedc:	dc000017 	ldw	r16,0(sp)
    dee0:	dec00304 	addi	sp,sp,12
    dee4:	f800283a 	ret
    dee8:	80c00017 	ldw	r3,0(r16)
    deec:	183ff926 	beq	r3,zero,ded4 <__alt_data_end+0xfc00ded4>
    def0:	88c00015 	stw	r3,0(r17)
    def4:	003ff706 	br	ded4 <__alt_data_end+0xfc00ded4>

0000def8 <_init_signal_r>:
    def8:	2080b717 	ldw	r2,732(r4)
    defc:	10000226 	beq	r2,zero,df08 <_init_signal_r+0x10>
    df00:	0005883a 	mov	r2,zero
    df04:	f800283a 	ret
    df08:	defffe04 	addi	sp,sp,-8
    df0c:	01402004 	movi	r5,128
    df10:	dc000015 	stw	r16,0(sp)
    df14:	dfc00115 	stw	ra,4(sp)
    df18:	2021883a 	mov	r16,r4
    df1c:	000d2c80 	call	d2c8 <_malloc_r>
    df20:	8080b715 	stw	r2,732(r16)
    df24:	10000d26 	beq	r2,zero,df5c <_init_signal_r+0x64>
    df28:	0007883a 	mov	r3,zero
    df2c:	01002004 	movi	r4,128
    df30:	00000106 	br	df38 <_init_signal_r+0x40>
    df34:	8080b717 	ldw	r2,732(r16)
    df38:	10c5883a 	add	r2,r2,r3
    df3c:	10000015 	stw	zero,0(r2)
    df40:	18c00104 	addi	r3,r3,4
    df44:	193ffb1e 	bne	r3,r4,df34 <__alt_data_end+0xfc00df34>
    df48:	0005883a 	mov	r2,zero
    df4c:	dfc00117 	ldw	ra,4(sp)
    df50:	dc000017 	ldw	r16,0(sp)
    df54:	dec00204 	addi	sp,sp,8
    df58:	f800283a 	ret
    df5c:	00bfffc4 	movi	r2,-1
    df60:	003ffa06 	br	df4c <__alt_data_end+0xfc00df4c>

0000df64 <_signal_r>:
    df64:	00c007c4 	movi	r3,31
    df68:	19401536 	bltu	r3,r5,dfc0 <_signal_r+0x5c>
    df6c:	2080b717 	ldw	r2,732(r4)
    df70:	defffc04 	addi	sp,sp,-16
    df74:	dc800215 	stw	r18,8(sp)
    df78:	dc400115 	stw	r17,4(sp)
    df7c:	dc000015 	stw	r16,0(sp)
    df80:	dfc00315 	stw	ra,12(sp)
    df84:	3023883a 	mov	r17,r6
    df88:	2021883a 	mov	r16,r4
    df8c:	2825883a 	mov	r18,r5
    df90:	10000f26 	beq	r2,zero,dfd0 <_signal_r+0x6c>
    df94:	948b883a 	add	r5,r18,r18
    df98:	294b883a 	add	r5,r5,r5
    df9c:	114b883a 	add	r5,r2,r5
    dfa0:	28800017 	ldw	r2,0(r5)
    dfa4:	2c400015 	stw	r17,0(r5)
    dfa8:	dfc00317 	ldw	ra,12(sp)
    dfac:	dc800217 	ldw	r18,8(sp)
    dfb0:	dc400117 	ldw	r17,4(sp)
    dfb4:	dc000017 	ldw	r16,0(sp)
    dfb8:	dec00404 	addi	sp,sp,16
    dfbc:	f800283a 	ret
    dfc0:	00c00584 	movi	r3,22
    dfc4:	20c00015 	stw	r3,0(r4)
    dfc8:	00bfffc4 	movi	r2,-1
    dfcc:	f800283a 	ret
    dfd0:	000def80 	call	def8 <_init_signal_r>
    dfd4:	1000021e 	bne	r2,zero,dfe0 <_signal_r+0x7c>
    dfd8:	8080b717 	ldw	r2,732(r16)
    dfdc:	003fed06 	br	df94 <__alt_data_end+0xfc00df94>
    dfe0:	00bfffc4 	movi	r2,-1
    dfe4:	003ff006 	br	dfa8 <__alt_data_end+0xfc00dfa8>

0000dfe8 <_raise_r>:
    dfe8:	008007c4 	movi	r2,31
    dfec:	11402936 	bltu	r2,r5,e094 <_raise_r+0xac>
    dff0:	20c0b717 	ldw	r3,732(r4)
    dff4:	defffd04 	addi	sp,sp,-12
    dff8:	dc400115 	stw	r17,4(sp)
    dffc:	dc000015 	stw	r16,0(sp)
    e000:	dfc00215 	stw	ra,8(sp)
    e004:	2021883a 	mov	r16,r4
    e008:	2823883a 	mov	r17,r5
    e00c:	18001726 	beq	r3,zero,e06c <_raise_r+0x84>
    e010:	2945883a 	add	r2,r5,r5
    e014:	1085883a 	add	r2,r2,r2
    e018:	1887883a 	add	r3,r3,r2
    e01c:	19800017 	ldw	r6,0(r3)
    e020:	30001226 	beq	r6,zero,e06c <_raise_r+0x84>
    e024:	00800044 	movi	r2,1
    e028:	30800e26 	beq	r6,r2,e064 <_raise_r+0x7c>
    e02c:	013fffc4 	movi	r4,-1
    e030:	31000926 	beq	r6,r4,e058 <_raise_r+0x70>
    e034:	18000015 	stw	zero,0(r3)
    e038:	2809883a 	mov	r4,r5
    e03c:	303ee83a 	callr	r6
    e040:	0005883a 	mov	r2,zero
    e044:	dfc00217 	ldw	ra,8(sp)
    e048:	dc400117 	ldw	r17,4(sp)
    e04c:	dc000017 	ldw	r16,0(sp)
    e050:	dec00304 	addi	sp,sp,12
    e054:	f800283a 	ret
    e058:	00c00584 	movi	r3,22
    e05c:	80c00015 	stw	r3,0(r16)
    e060:	003ff806 	br	e044 <__alt_data_end+0xfc00e044>
    e064:	0005883a 	mov	r2,zero
    e068:	003ff606 	br	e044 <__alt_data_end+0xfc00e044>
    e06c:	8009883a 	mov	r4,r16
    e070:	000e1f80 	call	e1f8 <_getpid_r>
    e074:	880d883a 	mov	r6,r17
    e078:	100b883a 	mov	r5,r2
    e07c:	8009883a 	mov	r4,r16
    e080:	dfc00217 	ldw	ra,8(sp)
    e084:	dc400117 	ldw	r17,4(sp)
    e088:	dc000017 	ldw	r16,0(sp)
    e08c:	dec00304 	addi	sp,sp,12
    e090:	000e19c1 	jmpi	e19c <_kill_r>
    e094:	00800584 	movi	r2,22
    e098:	20800015 	stw	r2,0(r4)
    e09c:	00bfffc4 	movi	r2,-1
    e0a0:	f800283a 	ret

0000e0a4 <__sigtramp_r>:
    e0a4:	008007c4 	movi	r2,31
    e0a8:	11402436 	bltu	r2,r5,e13c <__sigtramp_r+0x98>
    e0ac:	20c0b717 	ldw	r3,732(r4)
    e0b0:	defffd04 	addi	sp,sp,-12
    e0b4:	dc400115 	stw	r17,4(sp)
    e0b8:	dc000015 	stw	r16,0(sp)
    e0bc:	dfc00215 	stw	ra,8(sp)
    e0c0:	2021883a 	mov	r16,r4
    e0c4:	2823883a 	mov	r17,r5
    e0c8:	18001826 	beq	r3,zero,e12c <__sigtramp_r+0x88>
    e0cc:	8c45883a 	add	r2,r17,r17
    e0d0:	1085883a 	add	r2,r2,r2
    e0d4:	1885883a 	add	r2,r3,r2
    e0d8:	10c00017 	ldw	r3,0(r2)
    e0dc:	18001126 	beq	r3,zero,e124 <__sigtramp_r+0x80>
    e0e0:	013fffc4 	movi	r4,-1
    e0e4:	19000d26 	beq	r3,r4,e11c <__sigtramp_r+0x78>
    e0e8:	01000044 	movi	r4,1
    e0ec:	19000926 	beq	r3,r4,e114 <__sigtramp_r+0x70>
    e0f0:	10000015 	stw	zero,0(r2)
    e0f4:	8809883a 	mov	r4,r17
    e0f8:	183ee83a 	callr	r3
    e0fc:	0005883a 	mov	r2,zero
    e100:	dfc00217 	ldw	ra,8(sp)
    e104:	dc400117 	ldw	r17,4(sp)
    e108:	dc000017 	ldw	r16,0(sp)
    e10c:	dec00304 	addi	sp,sp,12
    e110:	f800283a 	ret
    e114:	008000c4 	movi	r2,3
    e118:	003ff906 	br	e100 <__alt_data_end+0xfc00e100>
    e11c:	00800084 	movi	r2,2
    e120:	003ff706 	br	e100 <__alt_data_end+0xfc00e100>
    e124:	00800044 	movi	r2,1
    e128:	003ff506 	br	e100 <__alt_data_end+0xfc00e100>
    e12c:	000def80 	call	def8 <_init_signal_r>
    e130:	1000041e 	bne	r2,zero,e144 <__sigtramp_r+0xa0>
    e134:	80c0b717 	ldw	r3,732(r16)
    e138:	003fe406 	br	e0cc <__alt_data_end+0xfc00e0cc>
    e13c:	00bfffc4 	movi	r2,-1
    e140:	f800283a 	ret
    e144:	00bfffc4 	movi	r2,-1
    e148:	003fed06 	br	e100 <__alt_data_end+0xfc00e100>

0000e14c <raise>:
    e14c:	008000f4 	movhi	r2,3
    e150:	10b2ae04 	addi	r2,r2,-13640
    e154:	200b883a 	mov	r5,r4
    e158:	11000017 	ldw	r4,0(r2)
    e15c:	000dfe81 	jmpi	dfe8 <_raise_r>

0000e160 <signal>:
    e160:	008000f4 	movhi	r2,3
    e164:	10b2ae04 	addi	r2,r2,-13640
    e168:	280d883a 	mov	r6,r5
    e16c:	200b883a 	mov	r5,r4
    e170:	11000017 	ldw	r4,0(r2)
    e174:	000df641 	jmpi	df64 <_signal_r>

0000e178 <_init_signal>:
    e178:	008000f4 	movhi	r2,3
    e17c:	10b2ae04 	addi	r2,r2,-13640
    e180:	11000017 	ldw	r4,0(r2)
    e184:	000def81 	jmpi	def8 <_init_signal_r>

0000e188 <__sigtramp>:
    e188:	008000f4 	movhi	r2,3
    e18c:	10b2ae04 	addi	r2,r2,-13640
    e190:	200b883a 	mov	r5,r4
    e194:	11000017 	ldw	r4,0(r2)
    e198:	000e0a41 	jmpi	e0a4 <__sigtramp_r>

0000e19c <_kill_r>:
    e19c:	defffd04 	addi	sp,sp,-12
    e1a0:	2805883a 	mov	r2,r5
    e1a4:	dc000015 	stw	r16,0(sp)
    e1a8:	040000f4 	movhi	r16,3
    e1ac:	dc400115 	stw	r17,4(sp)
    e1b0:	843f4004 	addi	r16,r16,-768
    e1b4:	2023883a 	mov	r17,r4
    e1b8:	300b883a 	mov	r5,r6
    e1bc:	1009883a 	mov	r4,r2
    e1c0:	dfc00215 	stw	ra,8(sp)
    e1c4:	80000015 	stw	zero,0(r16)
    e1c8:	001e15c0 	call	1e15c <kill>
    e1cc:	00ffffc4 	movi	r3,-1
    e1d0:	10c00526 	beq	r2,r3,e1e8 <_kill_r+0x4c>
    e1d4:	dfc00217 	ldw	ra,8(sp)
    e1d8:	dc400117 	ldw	r17,4(sp)
    e1dc:	dc000017 	ldw	r16,0(sp)
    e1e0:	dec00304 	addi	sp,sp,12
    e1e4:	f800283a 	ret
    e1e8:	80c00017 	ldw	r3,0(r16)
    e1ec:	183ff926 	beq	r3,zero,e1d4 <__alt_data_end+0xfc00e1d4>
    e1f0:	88c00015 	stw	r3,0(r17)
    e1f4:	003ff706 	br	e1d4 <__alt_data_end+0xfc00e1d4>

0000e1f8 <_getpid_r>:
    e1f8:	001e0181 	jmpi	1e018 <getpid>

0000e1fc <_sprintf_r>:
    e1fc:	deffe404 	addi	sp,sp,-112
    e200:	2807883a 	mov	r3,r5
    e204:	dfc01a15 	stw	ra,104(sp)
    e208:	d9c01b15 	stw	r7,108(sp)
    e20c:	00a00034 	movhi	r2,32768
    e210:	10bfffc4 	addi	r2,r2,-1
    e214:	02008204 	movi	r8,520
    e218:	d8800215 	stw	r2,8(sp)
    e21c:	d8800515 	stw	r2,20(sp)
    e220:	d9c01b04 	addi	r7,sp,108
    e224:	d80b883a 	mov	r5,sp
    e228:	00bfffc4 	movi	r2,-1
    e22c:	d8c00015 	stw	r3,0(sp)
    e230:	d8c00415 	stw	r3,16(sp)
    e234:	da00030d 	sth	r8,12(sp)
    e238:	d880038d 	sth	r2,14(sp)
    e23c:	000e4340 	call	e434 <___svfprintf_internal_r>
    e240:	d8c00017 	ldw	r3,0(sp)
    e244:	18000005 	stb	zero,0(r3)
    e248:	dfc01a17 	ldw	ra,104(sp)
    e24c:	dec01c04 	addi	sp,sp,112
    e250:	f800283a 	ret

0000e254 <sprintf>:
    e254:	deffe304 	addi	sp,sp,-116
    e258:	2007883a 	mov	r3,r4
    e25c:	dfc01a15 	stw	ra,104(sp)
    e260:	d9801b15 	stw	r6,108(sp)
    e264:	d9c01c15 	stw	r7,112(sp)
    e268:	010000f4 	movhi	r4,3
    e26c:	2132ae04 	addi	r4,r4,-13640
    e270:	21000017 	ldw	r4,0(r4)
    e274:	00a00034 	movhi	r2,32768
    e278:	10bfffc4 	addi	r2,r2,-1
    e27c:	280d883a 	mov	r6,r5
    e280:	02008204 	movi	r8,520
    e284:	d8800215 	stw	r2,8(sp)
    e288:	d8800515 	stw	r2,20(sp)
    e28c:	d9c01b04 	addi	r7,sp,108
    e290:	d80b883a 	mov	r5,sp
    e294:	00bfffc4 	movi	r2,-1
    e298:	d8c00015 	stw	r3,0(sp)
    e29c:	d8c00415 	stw	r3,16(sp)
    e2a0:	da00030d 	sth	r8,12(sp)
    e2a4:	d880038d 	sth	r2,14(sp)
    e2a8:	000e4340 	call	e434 <___svfprintf_internal_r>
    e2ac:	d8c00017 	ldw	r3,0(sp)
    e2b0:	18000005 	stb	zero,0(r3)
    e2b4:	dfc01a17 	ldw	ra,104(sp)
    e2b8:	dec01d04 	addi	sp,sp,116
    e2bc:	f800283a 	ret

0000e2c0 <strcmp>:
    e2c0:	2144b03a 	or	r2,r4,r5
    e2c4:	108000cc 	andi	r2,r2,3
    e2c8:	1000171e 	bne	r2,zero,e328 <strcmp+0x68>
    e2cc:	20800017 	ldw	r2,0(r4)
    e2d0:	28c00017 	ldw	r3,0(r5)
    e2d4:	10c0141e 	bne	r2,r3,e328 <strcmp+0x68>
    e2d8:	027fbff4 	movhi	r9,65279
    e2dc:	4a7fbfc4 	addi	r9,r9,-257
    e2e0:	0086303a 	nor	r3,zero,r2
    e2e4:	02202074 	movhi	r8,32897
    e2e8:	1245883a 	add	r2,r2,r9
    e2ec:	42202004 	addi	r8,r8,-32640
    e2f0:	10c4703a 	and	r2,r2,r3
    e2f4:	1204703a 	and	r2,r2,r8
    e2f8:	10000226 	beq	r2,zero,e304 <strcmp+0x44>
    e2fc:	00002306 	br	e38c <strcmp+0xcc>
    e300:	1000221e 	bne	r2,zero,e38c <strcmp+0xcc>
    e304:	21000104 	addi	r4,r4,4
    e308:	20c00017 	ldw	r3,0(r4)
    e30c:	29400104 	addi	r5,r5,4
    e310:	29800017 	ldw	r6,0(r5)
    e314:	1a4f883a 	add	r7,r3,r9
    e318:	00c4303a 	nor	r2,zero,r3
    e31c:	3884703a 	and	r2,r7,r2
    e320:	1204703a 	and	r2,r2,r8
    e324:	19bff626 	beq	r3,r6,e300 <__alt_data_end+0xfc00e300>
    e328:	20800003 	ldbu	r2,0(r4)
    e32c:	10c03fcc 	andi	r3,r2,255
    e330:	18c0201c 	xori	r3,r3,128
    e334:	18ffe004 	addi	r3,r3,-128
    e338:	18000c26 	beq	r3,zero,e36c <strcmp+0xac>
    e33c:	29800007 	ldb	r6,0(r5)
    e340:	19800326 	beq	r3,r6,e350 <strcmp+0x90>
    e344:	00001306 	br	e394 <strcmp+0xd4>
    e348:	29800007 	ldb	r6,0(r5)
    e34c:	11800b1e 	bne	r2,r6,e37c <strcmp+0xbc>
    e350:	21000044 	addi	r4,r4,1
    e354:	20c00003 	ldbu	r3,0(r4)
    e358:	29400044 	addi	r5,r5,1
    e35c:	18803fcc 	andi	r2,r3,255
    e360:	1080201c 	xori	r2,r2,128
    e364:	10bfe004 	addi	r2,r2,-128
    e368:	103ff71e 	bne	r2,zero,e348 <__alt_data_end+0xfc00e348>
    e36c:	0007883a 	mov	r3,zero
    e370:	28800003 	ldbu	r2,0(r5)
    e374:	1885c83a 	sub	r2,r3,r2
    e378:	f800283a 	ret
    e37c:	28800003 	ldbu	r2,0(r5)
    e380:	18c03fcc 	andi	r3,r3,255
    e384:	1885c83a 	sub	r2,r3,r2
    e388:	f800283a 	ret
    e38c:	0005883a 	mov	r2,zero
    e390:	f800283a 	ret
    e394:	10c03fcc 	andi	r3,r2,255
    e398:	003ff506 	br	e370 <__alt_data_end+0xfc00e370>

0000e39c <strlen>:
    e39c:	208000cc 	andi	r2,r4,3
    e3a0:	10002026 	beq	r2,zero,e424 <strlen+0x88>
    e3a4:	20800007 	ldb	r2,0(r4)
    e3a8:	10002026 	beq	r2,zero,e42c <strlen+0x90>
    e3ac:	2005883a 	mov	r2,r4
    e3b0:	00000206 	br	e3bc <strlen+0x20>
    e3b4:	10c00007 	ldb	r3,0(r2)
    e3b8:	18001826 	beq	r3,zero,e41c <strlen+0x80>
    e3bc:	10800044 	addi	r2,r2,1
    e3c0:	10c000cc 	andi	r3,r2,3
    e3c4:	183ffb1e 	bne	r3,zero,e3b4 <__alt_data_end+0xfc00e3b4>
    e3c8:	10c00017 	ldw	r3,0(r2)
    e3cc:	01ffbff4 	movhi	r7,65279
    e3d0:	39ffbfc4 	addi	r7,r7,-257
    e3d4:	00ca303a 	nor	r5,zero,r3
    e3d8:	01a02074 	movhi	r6,32897
    e3dc:	19c7883a 	add	r3,r3,r7
    e3e0:	31a02004 	addi	r6,r6,-32640
    e3e4:	1946703a 	and	r3,r3,r5
    e3e8:	1986703a 	and	r3,r3,r6
    e3ec:	1800091e 	bne	r3,zero,e414 <strlen+0x78>
    e3f0:	10800104 	addi	r2,r2,4
    e3f4:	10c00017 	ldw	r3,0(r2)
    e3f8:	19cb883a 	add	r5,r3,r7
    e3fc:	00c6303a 	nor	r3,zero,r3
    e400:	28c6703a 	and	r3,r5,r3
    e404:	1986703a 	and	r3,r3,r6
    e408:	183ff926 	beq	r3,zero,e3f0 <__alt_data_end+0xfc00e3f0>
    e40c:	00000106 	br	e414 <strlen+0x78>
    e410:	10800044 	addi	r2,r2,1
    e414:	10c00007 	ldb	r3,0(r2)
    e418:	183ffd1e 	bne	r3,zero,e410 <__alt_data_end+0xfc00e410>
    e41c:	1105c83a 	sub	r2,r2,r4
    e420:	f800283a 	ret
    e424:	2005883a 	mov	r2,r4
    e428:	003fe706 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    e42c:	0005883a 	mov	r2,zero
    e430:	f800283a 	ret

0000e434 <___svfprintf_internal_r>:
    e434:	deffb704 	addi	sp,sp,-292
    e438:	dfc04815 	stw	ra,288(sp)
    e43c:	ddc04615 	stw	r23,280(sp)
    e440:	d9402d15 	stw	r5,180(sp)
    e444:	d9003915 	stw	r4,228(sp)
    e448:	302f883a 	mov	r23,r6
    e44c:	d9c02e15 	stw	r7,184(sp)
    e450:	df004715 	stw	fp,284(sp)
    e454:	dd804515 	stw	r22,276(sp)
    e458:	dd404415 	stw	r21,272(sp)
    e45c:	dd004315 	stw	r20,268(sp)
    e460:	dcc04215 	stw	r19,264(sp)
    e464:	dc804115 	stw	r18,260(sp)
    e468:	dc404015 	stw	r17,256(sp)
    e46c:	dc003f15 	stw	r16,252(sp)
    e470:	00156380 	call	15638 <_localeconv_r>
    e474:	10800017 	ldw	r2,0(r2)
    e478:	1009883a 	mov	r4,r2
    e47c:	d8803415 	stw	r2,208(sp)
    e480:	000e39c0 	call	e39c <strlen>
    e484:	d8c02d17 	ldw	r3,180(sp)
    e488:	d8803815 	stw	r2,224(sp)
    e48c:	1880030b 	ldhu	r2,12(r3)
    e490:	1080200c 	andi	r2,r2,128
    e494:	10000226 	beq	r2,zero,e4a0 <___svfprintf_internal_r+0x6c>
    e498:	18800417 	ldw	r2,16(r3)
    e49c:	1006b126 	beq	r2,zero,ff64 <___svfprintf_internal_r+0x1b30>
    e4a0:	dcc03917 	ldw	r19,228(sp)
    e4a4:	d8c00404 	addi	r3,sp,16
    e4a8:	054000f4 	movhi	r21,3
    e4ac:	d9001e04 	addi	r4,sp,120
    e4b0:	ad657f84 	addi	r21,r21,-27138
    e4b4:	d8c01e15 	stw	r3,120(sp)
    e4b8:	d8002015 	stw	zero,128(sp)
    e4bc:	d8001f15 	stw	zero,124(sp)
    e4c0:	d8003315 	stw	zero,204(sp)
    e4c4:	d8003615 	stw	zero,216(sp)
    e4c8:	d8003715 	stw	zero,220(sp)
    e4cc:	1811883a 	mov	r8,r3
    e4d0:	d8003a15 	stw	zero,232(sp)
    e4d4:	d8003b15 	stw	zero,236(sp)
    e4d8:	d8002f15 	stw	zero,188(sp)
    e4dc:	d9002815 	stw	r4,160(sp)
    e4e0:	b8800007 	ldb	r2,0(r23)
    e4e4:	10027726 	beq	r2,zero,eec4 <___svfprintf_internal_r+0xa90>
    e4e8:	00c00944 	movi	r3,37
    e4ec:	b823883a 	mov	r17,r23
    e4f0:	10c0021e 	bne	r2,r3,e4fc <___svfprintf_internal_r+0xc8>
    e4f4:	00001406 	br	e548 <___svfprintf_internal_r+0x114>
    e4f8:	10c00326 	beq	r2,r3,e508 <___svfprintf_internal_r+0xd4>
    e4fc:	8c400044 	addi	r17,r17,1
    e500:	88800007 	ldb	r2,0(r17)
    e504:	103ffc1e 	bne	r2,zero,e4f8 <__alt_data_end+0xfc00e4f8>
    e508:	8de1c83a 	sub	r16,r17,r23
    e50c:	80000e26 	beq	r16,zero,e548 <___svfprintf_internal_r+0x114>
    e510:	d8c02017 	ldw	r3,128(sp)
    e514:	d8801f17 	ldw	r2,124(sp)
    e518:	45c00015 	stw	r23,0(r8)
    e51c:	1c07883a 	add	r3,r3,r16
    e520:	10800044 	addi	r2,r2,1
    e524:	d8c02015 	stw	r3,128(sp)
    e528:	44000115 	stw	r16,4(r8)
    e52c:	d8801f15 	stw	r2,124(sp)
    e530:	00c001c4 	movi	r3,7
    e534:	18809916 	blt	r3,r2,e79c <___svfprintf_internal_r+0x368>
    e538:	42000204 	addi	r8,r8,8
    e53c:	d9402f17 	ldw	r5,188(sp)
    e540:	2c0b883a 	add	r5,r5,r16
    e544:	d9402f15 	stw	r5,188(sp)
    e548:	88800007 	ldb	r2,0(r17)
    e54c:	10009a26 	beq	r2,zero,e7b8 <___svfprintf_internal_r+0x384>
    e550:	8dc00044 	addi	r23,r17,1
    e554:	8c400047 	ldb	r17,1(r17)
    e558:	0021883a 	mov	r16,zero
    e55c:	00bfffc4 	movi	r2,-1
    e560:	0025883a 	mov	r18,zero
    e564:	dc002905 	stb	r16,164(sp)
    e568:	d8002785 	stb	zero,158(sp)
    e56c:	d8002b05 	stb	zero,172(sp)
    e570:	d8802a15 	stw	r2,168(sp)
    e574:	d8003115 	stw	zero,196(sp)
    e578:	05001604 	movi	r20,88
    e57c:	05800244 	movi	r22,9
    e580:	4039883a 	mov	fp,r8
    e584:	9021883a 	mov	r16,r18
    e588:	bdc00044 	addi	r23,r23,1
    e58c:	88bff804 	addi	r2,r17,-32
    e590:	a0831e36 	bltu	r20,r2,f20c <___svfprintf_internal_r+0xdd8>
    e594:	100490ba 	slli	r2,r2,2
    e598:	00c00074 	movhi	r3,1
    e59c:	18f96b04 	addi	r3,r3,-6740
    e5a0:	10c5883a 	add	r2,r2,r3
    e5a4:	10800017 	ldw	r2,0(r2)
    e5a8:	1000683a 	jmp	r2
    e5ac:	0000f154 	movui	zero,965
    e5b0:	0000f20c 	andi	zero,zero,968
    e5b4:	0000f20c 	andi	zero,zero,968
    e5b8:	0000f148 	cmpgei	zero,zero,965
    e5bc:	0000f20c 	andi	zero,zero,968
    e5c0:	0000f20c 	andi	zero,zero,968
    e5c4:	0000f20c 	andi	zero,zero,968
    e5c8:	0000f20c 	andi	zero,zero,968
    e5cc:	0000f20c 	andi	zero,zero,968
    e5d0:	0000f20c 	andi	zero,zero,968
    e5d4:	0000e814 	movui	zero,928
    e5d8:	0000f058 	cmpnei	zero,zero,961
    e5dc:	0000f20c 	andi	zero,zero,968
    e5e0:	0000e720 	cmpeqi	zero,zero,924
    e5e4:	0000e838 	rdprs	zero,zero,928
    e5e8:	0000f20c 	andi	zero,zero,968
    e5ec:	0000e8c4 	movi	zero,931
    e5f0:	0000e888 	cmpgei	zero,zero,930
    e5f4:	0000e888 	cmpgei	zero,zero,930
    e5f8:	0000e888 	cmpgei	zero,zero,930
    e5fc:	0000e888 	cmpgei	zero,zero,930
    e600:	0000e888 	cmpgei	zero,zero,930
    e604:	0000e888 	cmpgei	zero,zero,930
    e608:	0000e888 	cmpgei	zero,zero,930
    e60c:	0000e888 	cmpgei	zero,zero,930
    e610:	0000e888 	cmpgei	zero,zero,930
    e614:	0000f20c 	andi	zero,zero,968
    e618:	0000f20c 	andi	zero,zero,968
    e61c:	0000f20c 	andi	zero,zero,968
    e620:	0000f20c 	andi	zero,zero,968
    e624:	0000f20c 	andi	zero,zero,968
    e628:	0000f20c 	andi	zero,zero,968
    e62c:	0000f20c 	andi	zero,zero,968
    e630:	0000f20c 	andi	zero,zero,968
    e634:	0000f20c 	andi	zero,zero,968
    e638:	0000f20c 	andi	zero,zero,968
    e63c:	0000e988 	cmpgei	zero,zero,934
    e640:	0000e8d0 	cmplti	zero,zero,931
    e644:	0000f20c 	andi	zero,zero,968
    e648:	0000e8d0 	cmplti	zero,zero,931
    e64c:	0000f20c 	andi	zero,zero,968
    e650:	0000f20c 	andi	zero,zero,968
    e654:	0000f20c 	andi	zero,zero,968
    e658:	0000f20c 	andi	zero,zero,968
    e65c:	0000e97c 	xorhi	zero,zero,933
    e660:	0000f20c 	andi	zero,zero,968
    e664:	0000f20c 	andi	zero,zero,968
    e668:	0000ea50 	cmplti	zero,zero,937
    e66c:	0000f20c 	andi	zero,zero,968
    e670:	0000f20c 	andi	zero,zero,968
    e674:	0000f20c 	andi	zero,zero,968
    e678:	0000f20c 	andi	zero,zero,968
    e67c:	0000f20c 	andi	zero,zero,968
    e680:	0000eecc 	andi	zero,zero,955
    e684:	0000f20c 	andi	zero,zero,968
    e688:	0000f20c 	andi	zero,zero,968
    e68c:	0000ef38 	rdprs	zero,zero,956
    e690:	0000f20c 	andi	zero,zero,968
    e694:	0000f20c 	andi	zero,zero,968
    e698:	0000f20c 	andi	zero,zero,968
    e69c:	0000f20c 	andi	zero,zero,968
    e6a0:	0000f20c 	andi	zero,zero,968
    e6a4:	0000f20c 	andi	zero,zero,968
    e6a8:	0000f20c 	andi	zero,zero,968
    e6ac:	0000f20c 	andi	zero,zero,968
    e6b0:	0000f20c 	andi	zero,zero,968
    e6b4:	0000f20c 	andi	zero,zero,968
    e6b8:	0000eff4 	movhi	zero,959
    e6bc:	0000f174 	movhi	zero,965
    e6c0:	0000e8d0 	cmplti	zero,zero,931
    e6c4:	0000e8d0 	cmplti	zero,zero,931
    e6c8:	0000e8d0 	cmplti	zero,zero,931
    e6cc:	0000f1e8 	cmpgeui	zero,zero,967
    e6d0:	0000f174 	movhi	zero,965
    e6d4:	0000f20c 	andi	zero,zero,968
    e6d8:	0000f20c 	andi	zero,zero,968
    e6dc:	0000f194 	movui	zero,966
    e6e0:	0000f20c 	andi	zero,zero,968
    e6e4:	0000f1a8 	cmpgeui	zero,zero,966
    e6e8:	0000f038 	rdprs	zero,zero,960
    e6ec:	0000e72c 	andhi	zero,zero,924
    e6f0:	0000f070 	cmpltui	zero,zero,961
    e6f4:	0000f20c 	andi	zero,zero,968
    e6f8:	0000f07c 	xorhi	zero,zero,961
    e6fc:	0000f20c 	andi	zero,zero,968
    e700:	0000f0e0 	cmpeqi	zero,zero,963
    e704:	0000f20c 	andi	zero,zero,968
    e708:	0000f20c 	andi	zero,zero,968
    e70c:	0000f100 	call	f10 <_ZN3USB10inTransferEhhPtPhh+0x64>
    e710:	d8c03117 	ldw	r3,196(sp)
    e714:	d8802e15 	stw	r2,184(sp)
    e718:	00c7c83a 	sub	r3,zero,r3
    e71c:	d8c03115 	stw	r3,196(sp)
    e720:	84000114 	ori	r16,r16,4
    e724:	bc400007 	ldb	r17,0(r23)
    e728:	003f9706 	br	e588 <__alt_data_end+0xfc00e588>
    e72c:	00800c04 	movi	r2,48
    e730:	d8802705 	stb	r2,156(sp)
    e734:	00801e04 	movi	r2,120
    e738:	d8802745 	stb	r2,157(sp)
    e73c:	d9002a17 	ldw	r4,168(sp)
    e740:	d8802e17 	ldw	r2,184(sp)
    e744:	d8002785 	stb	zero,158(sp)
    e748:	e011883a 	mov	r8,fp
    e74c:	10c00104 	addi	r3,r2,4
    e750:	15000017 	ldw	r20,0(r2)
    e754:	002d883a 	mov	r22,zero
    e758:	80800094 	ori	r2,r16,2
    e75c:	2002b616 	blt	r4,zero,f238 <___svfprintf_internal_r+0xe04>
    e760:	00bfdfc4 	movi	r2,-129
    e764:	80a4703a 	and	r18,r16,r2
    e768:	d8c02e15 	stw	r3,184(sp)
    e76c:	94800094 	ori	r18,r18,2
    e770:	a002a01e 	bne	r20,zero,f1f4 <___svfprintf_internal_r+0xdc0>
    e774:	014000f4 	movhi	r5,3
    e778:	29657804 	addi	r5,r5,-27168
    e77c:	d9403a15 	stw	r5,232(sp)
    e780:	04401e04 	movi	r17,120
    e784:	d8c02a17 	ldw	r3,168(sp)
    e788:	0039883a 	mov	fp,zero
    e78c:	1801e626 	beq	r3,zero,ef28 <___svfprintf_internal_r+0xaf4>
    e790:	0029883a 	mov	r20,zero
    e794:	002d883a 	mov	r22,zero
    e798:	00020506 	br	efb0 <___svfprintf_internal_r+0xb7c>
    e79c:	d9402d17 	ldw	r5,180(sp)
    e7a0:	d9801e04 	addi	r6,sp,120
    e7a4:	9809883a 	mov	r4,r19
    e7a8:	00173980 	call	17398 <__ssprint_r>
    e7ac:	1000081e 	bne	r2,zero,e7d0 <___svfprintf_internal_r+0x39c>
    e7b0:	da000404 	addi	r8,sp,16
    e7b4:	003f6106 	br	e53c <__alt_data_end+0xfc00e53c>
    e7b8:	d8802017 	ldw	r2,128(sp)
    e7bc:	10000426 	beq	r2,zero,e7d0 <___svfprintf_internal_r+0x39c>
    e7c0:	d9402d17 	ldw	r5,180(sp)
    e7c4:	d9003917 	ldw	r4,228(sp)
    e7c8:	d9801e04 	addi	r6,sp,120
    e7cc:	00173980 	call	17398 <__ssprint_r>
    e7d0:	d8802d17 	ldw	r2,180(sp)
    e7d4:	10c0030b 	ldhu	r3,12(r2)
    e7d8:	d8802f17 	ldw	r2,188(sp)
    e7dc:	18c0100c 	andi	r3,r3,64
    e7e0:	1806251e 	bne	r3,zero,10078 <___svfprintf_internal_r+0x1c44>
    e7e4:	dfc04817 	ldw	ra,288(sp)
    e7e8:	df004717 	ldw	fp,284(sp)
    e7ec:	ddc04617 	ldw	r23,280(sp)
    e7f0:	dd804517 	ldw	r22,276(sp)
    e7f4:	dd404417 	ldw	r21,272(sp)
    e7f8:	dd004317 	ldw	r20,268(sp)
    e7fc:	dcc04217 	ldw	r19,264(sp)
    e800:	dc804117 	ldw	r18,260(sp)
    e804:	dc404017 	ldw	r17,256(sp)
    e808:	dc003f17 	ldw	r16,252(sp)
    e80c:	dec04904 	addi	sp,sp,292
    e810:	f800283a 	ret
    e814:	d9002e17 	ldw	r4,184(sp)
    e818:	d9402e17 	ldw	r5,184(sp)
    e81c:	21000017 	ldw	r4,0(r4)
    e820:	28800104 	addi	r2,r5,4
    e824:	d9003115 	stw	r4,196(sp)
    e828:	203fb916 	blt	r4,zero,e710 <__alt_data_end+0xfc00e710>
    e82c:	d8802e15 	stw	r2,184(sp)
    e830:	bc400007 	ldb	r17,0(r23)
    e834:	003f5406 	br	e588 <__alt_data_end+0xfc00e588>
    e838:	bc400007 	ldb	r17,0(r23)
    e83c:	01000a84 	movi	r4,42
    e840:	b8c00044 	addi	r3,r23,1
    e844:	89076926 	beq	r17,r4,105ec <___svfprintf_internal_r+0x21b8>
    e848:	8cbff404 	addi	r18,r17,-48
    e84c:	b486b936 	bltu	r22,r18,10334 <___svfprintf_internal_r+0x1f00>
    e850:	0009883a 	mov	r4,zero
    e854:	1823883a 	mov	r17,r3
    e858:	01400284 	movi	r5,10
    e85c:	000ccf40 	call	ccf4 <__mulsi3>
    e860:	88c00007 	ldb	r3,0(r17)
    e864:	1489883a 	add	r4,r2,r18
    e868:	8dc00044 	addi	r23,r17,1
    e86c:	1cbff404 	addi	r18,r3,-48
    e870:	b823883a 	mov	r17,r23
    e874:	b4bff82e 	bgeu	r22,r18,e858 <__alt_data_end+0xfc00e858>
    e878:	1823883a 	mov	r17,r3
    e87c:	20060416 	blt	r4,zero,10090 <___svfprintf_internal_r+0x1c5c>
    e880:	d9002a15 	stw	r4,168(sp)
    e884:	003f4106 	br	e58c <__alt_data_end+0xfc00e58c>
    e888:	8cbff404 	addi	r18,r17,-48
    e88c:	d8003115 	stw	zero,196(sp)
    e890:	0009883a 	mov	r4,zero
    e894:	b823883a 	mov	r17,r23
    e898:	01400284 	movi	r5,10
    e89c:	000ccf40 	call	ccf4 <__mulsi3>
    e8a0:	88c00007 	ldb	r3,0(r17)
    e8a4:	9089883a 	add	r4,r18,r2
    e8a8:	bdc00044 	addi	r23,r23,1
    e8ac:	1cbff404 	addi	r18,r3,-48
    e8b0:	b823883a 	mov	r17,r23
    e8b4:	b4bff82e 	bgeu	r22,r18,e898 <__alt_data_end+0xfc00e898>
    e8b8:	1823883a 	mov	r17,r3
    e8bc:	d9003115 	stw	r4,196(sp)
    e8c0:	003f3206 	br	e58c <__alt_data_end+0xfc00e58c>
    e8c4:	84002014 	ori	r16,r16,128
    e8c8:	bc400007 	ldb	r17,0(r23)
    e8cc:	003f2e06 	br	e588 <__alt_data_end+0xfc00e588>
    e8d0:	8025883a 	mov	r18,r16
    e8d4:	dc002903 	ldbu	r16,164(sp)
    e8d8:	e011883a 	mov	r8,fp
    e8dc:	84003fcc 	andi	r16,r16,255
    e8e0:	8007721e 	bne	r16,zero,106ac <___svfprintf_internal_r+0x2278>
    e8e4:	9080020c 	andi	r2,r18,8
    e8e8:	1004a526 	beq	r2,zero,fb80 <___svfprintf_internal_r+0x174c>
    e8ec:	d9002e17 	ldw	r4,184(sp)
    e8f0:	d9402e17 	ldw	r5,184(sp)
    e8f4:	d8802e17 	ldw	r2,184(sp)
    e8f8:	21000017 	ldw	r4,0(r4)
    e8fc:	29400117 	ldw	r5,4(r5)
    e900:	10800204 	addi	r2,r2,8
    e904:	d9003615 	stw	r4,216(sp)
    e908:	d9403715 	stw	r5,220(sp)
    e90c:	d8802e15 	stw	r2,184(sp)
    e910:	d9003617 	ldw	r4,216(sp)
    e914:	d9403717 	ldw	r5,220(sp)
    e918:	da003e15 	stw	r8,248(sp)
    e91c:	04000044 	movi	r16,1
    e920:	00171e80 	call	171e8 <__fpclassifyd>
    e924:	da003e17 	ldw	r8,248(sp)
    e928:	1404731e 	bne	r2,r16,faf8 <___svfprintf_internal_r+0x16c4>
    e92c:	d9003617 	ldw	r4,216(sp)
    e930:	d9403717 	ldw	r5,220(sp)
    e934:	000d883a 	mov	r6,zero
    e938:	000f883a 	mov	r7,zero
    e93c:	001c8ec0 	call	1c8ec <__ledf2>
    e940:	da003e17 	ldw	r8,248(sp)
    e944:	10061b16 	blt	r2,zero,101b4 <___svfprintf_internal_r+0x1d80>
    e948:	df002783 	ldbu	fp,158(sp)
    e94c:	008011c4 	movi	r2,71
    e950:	1445810e 	bge	r2,r17,ff58 <___svfprintf_internal_r+0x1b24>
    e954:	040000f4 	movhi	r16,3
    e958:	84257004 	addi	r16,r16,-27200
    e95c:	00c000c4 	movi	r3,3
    e960:	00bfdfc4 	movi	r2,-129
    e964:	d8c02915 	stw	r3,164(sp)
    e968:	90a4703a 	and	r18,r18,r2
    e96c:	d8c02b15 	stw	r3,172(sp)
    e970:	d8002a15 	stw	zero,168(sp)
    e974:	d8003215 	stw	zero,200(sp)
    e978:	00006c06 	br	eb2c <___svfprintf_internal_r+0x6f8>
    e97c:	84000214 	ori	r16,r16,8
    e980:	bc400007 	ldb	r17,0(r23)
    e984:	003f0006 	br	e588 <__alt_data_end+0xfc00e588>
    e988:	8025883a 	mov	r18,r16
    e98c:	dc002903 	ldbu	r16,164(sp)
    e990:	e011883a 	mov	r8,fp
    e994:	84003fcc 	andi	r16,r16,255
    e998:	80073f1e 	bne	r16,zero,10698 <___svfprintf_internal_r+0x2264>
    e99c:	94800414 	ori	r18,r18,16
    e9a0:	9080080c 	andi	r2,r18,32
    e9a4:	1003bb26 	beq	r2,zero,f894 <___svfprintf_internal_r+0x1460>
    e9a8:	d9002e17 	ldw	r4,184(sp)
    e9ac:	20800117 	ldw	r2,4(r4)
    e9b0:	25000017 	ldw	r20,0(r4)
    e9b4:	21000204 	addi	r4,r4,8
    e9b8:	d9002e15 	stw	r4,184(sp)
    e9bc:	102d883a 	mov	r22,r2
    e9c0:	1003bd16 	blt	r2,zero,f8b8 <___svfprintf_internal_r+0x1484>
    e9c4:	d9002a17 	ldw	r4,168(sp)
    e9c8:	df002783 	ldbu	fp,158(sp)
    e9cc:	2003d016 	blt	r4,zero,f910 <___svfprintf_internal_r+0x14dc>
    e9d0:	00ffdfc4 	movi	r3,-129
    e9d4:	a584b03a 	or	r2,r20,r22
    e9d8:	90e4703a 	and	r18,r18,r3
    e9dc:	10015026 	beq	r2,zero,ef20 <___svfprintf_internal_r+0xaec>
    e9e0:	b0037026 	beq	r22,zero,f7a4 <___svfprintf_internal_r+0x1370>
    e9e4:	dc402915 	stw	r17,164(sp)
    e9e8:	dc001e04 	addi	r16,sp,120
    e9ec:	b023883a 	mov	r17,r22
    e9f0:	402d883a 	mov	r22,r8
    e9f4:	a009883a 	mov	r4,r20
    e9f8:	880b883a 	mov	r5,r17
    e9fc:	01800284 	movi	r6,10
    ea00:	000f883a 	mov	r7,zero
    ea04:	001af480 	call	1af48 <__umoddi3>
    ea08:	10800c04 	addi	r2,r2,48
    ea0c:	843fffc4 	addi	r16,r16,-1
    ea10:	a009883a 	mov	r4,r20
    ea14:	880b883a 	mov	r5,r17
    ea18:	80800005 	stb	r2,0(r16)
    ea1c:	01800284 	movi	r6,10
    ea20:	000f883a 	mov	r7,zero
    ea24:	001a94c0 	call	1a94c <__udivdi3>
    ea28:	1029883a 	mov	r20,r2
    ea2c:	10c4b03a 	or	r2,r2,r3
    ea30:	1823883a 	mov	r17,r3
    ea34:	103fef1e 	bne	r2,zero,e9f4 <__alt_data_end+0xfc00e9f4>
    ea38:	d8c02817 	ldw	r3,160(sp)
    ea3c:	dc402917 	ldw	r17,164(sp)
    ea40:	b011883a 	mov	r8,r22
    ea44:	1c07c83a 	sub	r3,r3,r16
    ea48:	d8c02b15 	stw	r3,172(sp)
    ea4c:	00003106 	br	eb14 <___svfprintf_internal_r+0x6e0>
    ea50:	8025883a 	mov	r18,r16
    ea54:	dc002903 	ldbu	r16,164(sp)
    ea58:	e011883a 	mov	r8,fp
    ea5c:	84003fcc 	andi	r16,r16,255
    ea60:	80070a1e 	bne	r16,zero,1068c <___svfprintf_internal_r+0x2258>
    ea64:	94800414 	ori	r18,r18,16
    ea68:	9080080c 	andi	r2,r18,32
    ea6c:	1002f626 	beq	r2,zero,f648 <___svfprintf_internal_r+0x1214>
    ea70:	d9002e17 	ldw	r4,184(sp)
    ea74:	d9402a17 	ldw	r5,168(sp)
    ea78:	d8002785 	stb	zero,158(sp)
    ea7c:	20800204 	addi	r2,r4,8
    ea80:	25000017 	ldw	r20,0(r4)
    ea84:	25800117 	ldw	r22,4(r4)
    ea88:	28043716 	blt	r5,zero,fb68 <___svfprintf_internal_r+0x1734>
    ea8c:	013fdfc4 	movi	r4,-129
    ea90:	a586b03a 	or	r3,r20,r22
    ea94:	d8802e15 	stw	r2,184(sp)
    ea98:	9124703a 	and	r18,r18,r4
    ea9c:	1802f71e 	bne	r3,zero,f67c <___svfprintf_internal_r+0x1248>
    eaa0:	d9402a17 	ldw	r5,168(sp)
    eaa4:	0039883a 	mov	fp,zero
    eaa8:	2806df26 	beq	r5,zero,10628 <___svfprintf_internal_r+0x21f4>
    eaac:	0029883a 	mov	r20,zero
    eab0:	002d883a 	mov	r22,zero
    eab4:	dc001e04 	addi	r16,sp,120
    eab8:	a006d0fa 	srli	r3,r20,3
    eabc:	b008977a 	slli	r4,r22,29
    eac0:	b02cd0fa 	srli	r22,r22,3
    eac4:	a50001cc 	andi	r20,r20,7
    eac8:	a0800c04 	addi	r2,r20,48
    eacc:	843fffc4 	addi	r16,r16,-1
    ead0:	20e8b03a 	or	r20,r4,r3
    ead4:	80800005 	stb	r2,0(r16)
    ead8:	a586b03a 	or	r3,r20,r22
    eadc:	183ff61e 	bne	r3,zero,eab8 <__alt_data_end+0xfc00eab8>
    eae0:	90c0004c 	andi	r3,r18,1
    eae4:	18013f26 	beq	r3,zero,efe4 <___svfprintf_internal_r+0xbb0>
    eae8:	10803fcc 	andi	r2,r2,255
    eaec:	1080201c 	xori	r2,r2,128
    eaf0:	10bfe004 	addi	r2,r2,-128
    eaf4:	00c00c04 	movi	r3,48
    eaf8:	10c13a26 	beq	r2,r3,efe4 <___svfprintf_internal_r+0xbb0>
    eafc:	80ffffc5 	stb	r3,-1(r16)
    eb00:	d8c02817 	ldw	r3,160(sp)
    eb04:	80bfffc4 	addi	r2,r16,-1
    eb08:	1021883a 	mov	r16,r2
    eb0c:	1887c83a 	sub	r3,r3,r2
    eb10:	d8c02b15 	stw	r3,172(sp)
    eb14:	d8802b17 	ldw	r2,172(sp)
    eb18:	d9002a17 	ldw	r4,168(sp)
    eb1c:	1100010e 	bge	r2,r4,eb24 <___svfprintf_internal_r+0x6f0>
    eb20:	2005883a 	mov	r2,r4
    eb24:	d8802915 	stw	r2,164(sp)
    eb28:	d8003215 	stw	zero,200(sp)
    eb2c:	e7003fcc 	andi	fp,fp,255
    eb30:	e700201c 	xori	fp,fp,128
    eb34:	e73fe004 	addi	fp,fp,-128
    eb38:	e0000326 	beq	fp,zero,eb48 <___svfprintf_internal_r+0x714>
    eb3c:	d8c02917 	ldw	r3,164(sp)
    eb40:	18c00044 	addi	r3,r3,1
    eb44:	d8c02915 	stw	r3,164(sp)
    eb48:	90c0008c 	andi	r3,r18,2
    eb4c:	d8c02c15 	stw	r3,176(sp)
    eb50:	18000326 	beq	r3,zero,eb60 <___svfprintf_internal_r+0x72c>
    eb54:	d8c02917 	ldw	r3,164(sp)
    eb58:	18c00084 	addi	r3,r3,2
    eb5c:	d8c02915 	stw	r3,164(sp)
    eb60:	90c0210c 	andi	r3,r18,132
    eb64:	d8c03015 	stw	r3,192(sp)
    eb68:	1801c31e 	bne	r3,zero,f278 <___svfprintf_internal_r+0xe44>
    eb6c:	d9003117 	ldw	r4,196(sp)
    eb70:	d8c02917 	ldw	r3,164(sp)
    eb74:	20e9c83a 	sub	r20,r4,r3
    eb78:	0501bf0e 	bge	zero,r20,f278 <___svfprintf_internal_r+0xe44>
    eb7c:	02400404 	movi	r9,16
    eb80:	d8c02017 	ldw	r3,128(sp)
    eb84:	d8801f17 	ldw	r2,124(sp)
    eb88:	4d053d0e 	bge	r9,r20,10080 <___svfprintf_internal_r+0x1c4c>
    eb8c:	014000f4 	movhi	r5,3
    eb90:	29658384 	addi	r5,r5,-27122
    eb94:	dc403c15 	stw	r17,240(sp)
    eb98:	d9403515 	stw	r5,212(sp)
    eb9c:	a023883a 	mov	r17,r20
    eba0:	482d883a 	mov	r22,r9
    eba4:	9029883a 	mov	r20,r18
    eba8:	070001c4 	movi	fp,7
    ebac:	8025883a 	mov	r18,r16
    ebb0:	dc002d17 	ldw	r16,180(sp)
    ebb4:	00000306 	br	ebc4 <___svfprintf_internal_r+0x790>
    ebb8:	8c7ffc04 	addi	r17,r17,-16
    ebbc:	42000204 	addi	r8,r8,8
    ebc0:	b440130e 	bge	r22,r17,ec10 <___svfprintf_internal_r+0x7dc>
    ebc4:	010000f4 	movhi	r4,3
    ebc8:	18c00404 	addi	r3,r3,16
    ebcc:	10800044 	addi	r2,r2,1
    ebd0:	21258384 	addi	r4,r4,-27122
    ebd4:	41000015 	stw	r4,0(r8)
    ebd8:	45800115 	stw	r22,4(r8)
    ebdc:	d8c02015 	stw	r3,128(sp)
    ebe0:	d8801f15 	stw	r2,124(sp)
    ebe4:	e0bff40e 	bge	fp,r2,ebb8 <__alt_data_end+0xfc00ebb8>
    ebe8:	d9801e04 	addi	r6,sp,120
    ebec:	800b883a 	mov	r5,r16
    ebf0:	9809883a 	mov	r4,r19
    ebf4:	00173980 	call	17398 <__ssprint_r>
    ebf8:	103ef51e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    ebfc:	8c7ffc04 	addi	r17,r17,-16
    ec00:	d8c02017 	ldw	r3,128(sp)
    ec04:	d8801f17 	ldw	r2,124(sp)
    ec08:	da000404 	addi	r8,sp,16
    ec0c:	b47fed16 	blt	r22,r17,ebc4 <__alt_data_end+0xfc00ebc4>
    ec10:	9021883a 	mov	r16,r18
    ec14:	a025883a 	mov	r18,r20
    ec18:	8829883a 	mov	r20,r17
    ec1c:	dc403c17 	ldw	r17,240(sp)
    ec20:	d9403517 	ldw	r5,212(sp)
    ec24:	a0c7883a 	add	r3,r20,r3
    ec28:	10800044 	addi	r2,r2,1
    ec2c:	41400015 	stw	r5,0(r8)
    ec30:	45000115 	stw	r20,4(r8)
    ec34:	d8c02015 	stw	r3,128(sp)
    ec38:	d8801f15 	stw	r2,124(sp)
    ec3c:	010001c4 	movi	r4,7
    ec40:	2082c116 	blt	r4,r2,f748 <___svfprintf_internal_r+0x1314>
    ec44:	df002787 	ldb	fp,158(sp)
    ec48:	42000204 	addi	r8,r8,8
    ec4c:	e0000c26 	beq	fp,zero,ec80 <___svfprintf_internal_r+0x84c>
    ec50:	d8801f17 	ldw	r2,124(sp)
    ec54:	d9002784 	addi	r4,sp,158
    ec58:	18c00044 	addi	r3,r3,1
    ec5c:	10800044 	addi	r2,r2,1
    ec60:	41000015 	stw	r4,0(r8)
    ec64:	01000044 	movi	r4,1
    ec68:	41000115 	stw	r4,4(r8)
    ec6c:	d8c02015 	stw	r3,128(sp)
    ec70:	d8801f15 	stw	r2,124(sp)
    ec74:	010001c4 	movi	r4,7
    ec78:	20825a16 	blt	r4,r2,f5e4 <___svfprintf_internal_r+0x11b0>
    ec7c:	42000204 	addi	r8,r8,8
    ec80:	d8802c17 	ldw	r2,176(sp)
    ec84:	10000c26 	beq	r2,zero,ecb8 <___svfprintf_internal_r+0x884>
    ec88:	d8801f17 	ldw	r2,124(sp)
    ec8c:	d9002704 	addi	r4,sp,156
    ec90:	18c00084 	addi	r3,r3,2
    ec94:	10800044 	addi	r2,r2,1
    ec98:	41000015 	stw	r4,0(r8)
    ec9c:	01000084 	movi	r4,2
    eca0:	41000115 	stw	r4,4(r8)
    eca4:	d8c02015 	stw	r3,128(sp)
    eca8:	d8801f15 	stw	r2,124(sp)
    ecac:	010001c4 	movi	r4,7
    ecb0:	20825416 	blt	r4,r2,f604 <___svfprintf_internal_r+0x11d0>
    ecb4:	42000204 	addi	r8,r8,8
    ecb8:	d9003017 	ldw	r4,192(sp)
    ecbc:	00802004 	movi	r2,128
    ecc0:	2081b926 	beq	r4,r2,f3a8 <___svfprintf_internal_r+0xf74>
    ecc4:	d9402a17 	ldw	r5,168(sp)
    ecc8:	d8802b17 	ldw	r2,172(sp)
    eccc:	28adc83a 	sub	r22,r5,r2
    ecd0:	05802f0e 	bge	zero,r22,ed90 <___svfprintf_internal_r+0x95c>
    ecd4:	07000404 	movi	fp,16
    ecd8:	d8801f17 	ldw	r2,124(sp)
    ecdc:	e583e20e 	bge	fp,r22,fc68 <___svfprintf_internal_r+0x1834>
    ece0:	014000f4 	movhi	r5,3
    ece4:	29657f84 	addi	r5,r5,-27138
    ece8:	dc402a15 	stw	r17,168(sp)
    ecec:	d9402c15 	stw	r5,176(sp)
    ecf0:	b023883a 	mov	r17,r22
    ecf4:	050001c4 	movi	r20,7
    ecf8:	902d883a 	mov	r22,r18
    ecfc:	8025883a 	mov	r18,r16
    ed00:	dc002d17 	ldw	r16,180(sp)
    ed04:	00000306 	br	ed14 <___svfprintf_internal_r+0x8e0>
    ed08:	8c7ffc04 	addi	r17,r17,-16
    ed0c:	42000204 	addi	r8,r8,8
    ed10:	e440110e 	bge	fp,r17,ed58 <___svfprintf_internal_r+0x924>
    ed14:	18c00404 	addi	r3,r3,16
    ed18:	10800044 	addi	r2,r2,1
    ed1c:	45400015 	stw	r21,0(r8)
    ed20:	47000115 	stw	fp,4(r8)
    ed24:	d8c02015 	stw	r3,128(sp)
    ed28:	d8801f15 	stw	r2,124(sp)
    ed2c:	a0bff60e 	bge	r20,r2,ed08 <__alt_data_end+0xfc00ed08>
    ed30:	d9801e04 	addi	r6,sp,120
    ed34:	800b883a 	mov	r5,r16
    ed38:	9809883a 	mov	r4,r19
    ed3c:	00173980 	call	17398 <__ssprint_r>
    ed40:	103ea31e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    ed44:	8c7ffc04 	addi	r17,r17,-16
    ed48:	d8c02017 	ldw	r3,128(sp)
    ed4c:	d8801f17 	ldw	r2,124(sp)
    ed50:	da000404 	addi	r8,sp,16
    ed54:	e47fef16 	blt	fp,r17,ed14 <__alt_data_end+0xfc00ed14>
    ed58:	9021883a 	mov	r16,r18
    ed5c:	b025883a 	mov	r18,r22
    ed60:	882d883a 	mov	r22,r17
    ed64:	dc402a17 	ldw	r17,168(sp)
    ed68:	d9002c17 	ldw	r4,176(sp)
    ed6c:	1d87883a 	add	r3,r3,r22
    ed70:	10800044 	addi	r2,r2,1
    ed74:	41000015 	stw	r4,0(r8)
    ed78:	45800115 	stw	r22,4(r8)
    ed7c:	d8c02015 	stw	r3,128(sp)
    ed80:	d8801f15 	stw	r2,124(sp)
    ed84:	010001c4 	movi	r4,7
    ed88:	20820e16 	blt	r4,r2,f5c4 <___svfprintf_internal_r+0x1190>
    ed8c:	42000204 	addi	r8,r8,8
    ed90:	9080400c 	andi	r2,r18,256
    ed94:	10013a1e 	bne	r2,zero,f280 <___svfprintf_internal_r+0xe4c>
    ed98:	d9402b17 	ldw	r5,172(sp)
    ed9c:	d8801f17 	ldw	r2,124(sp)
    eda0:	44000015 	stw	r16,0(r8)
    eda4:	1947883a 	add	r3,r3,r5
    eda8:	10800044 	addi	r2,r2,1
    edac:	41400115 	stw	r5,4(r8)
    edb0:	d8c02015 	stw	r3,128(sp)
    edb4:	d8801f15 	stw	r2,124(sp)
    edb8:	010001c4 	movi	r4,7
    edbc:	2081f316 	blt	r4,r2,f58c <___svfprintf_internal_r+0x1158>
    edc0:	42000204 	addi	r8,r8,8
    edc4:	9480010c 	andi	r18,r18,4
    edc8:	90003226 	beq	r18,zero,ee94 <___svfprintf_internal_r+0xa60>
    edcc:	d9403117 	ldw	r5,196(sp)
    edd0:	d8802917 	ldw	r2,164(sp)
    edd4:	28a1c83a 	sub	r16,r5,r2
    edd8:	04002e0e 	bge	zero,r16,ee94 <___svfprintf_internal_r+0xa60>
    eddc:	04400404 	movi	r17,16
    ede0:	d8801f17 	ldw	r2,124(sp)
    ede4:	8c04db0e 	bge	r17,r16,10154 <___svfprintf_internal_r+0x1d20>
    ede8:	014000f4 	movhi	r5,3
    edec:	29658384 	addi	r5,r5,-27122
    edf0:	d9403515 	stw	r5,212(sp)
    edf4:	048001c4 	movi	r18,7
    edf8:	dd002d17 	ldw	r20,180(sp)
    edfc:	00000306 	br	ee0c <___svfprintf_internal_r+0x9d8>
    ee00:	843ffc04 	addi	r16,r16,-16
    ee04:	42000204 	addi	r8,r8,8
    ee08:	8c00130e 	bge	r17,r16,ee58 <___svfprintf_internal_r+0xa24>
    ee0c:	010000f4 	movhi	r4,3
    ee10:	18c00404 	addi	r3,r3,16
    ee14:	10800044 	addi	r2,r2,1
    ee18:	21258384 	addi	r4,r4,-27122
    ee1c:	41000015 	stw	r4,0(r8)
    ee20:	44400115 	stw	r17,4(r8)
    ee24:	d8c02015 	stw	r3,128(sp)
    ee28:	d8801f15 	stw	r2,124(sp)
    ee2c:	90bff40e 	bge	r18,r2,ee00 <__alt_data_end+0xfc00ee00>
    ee30:	d9801e04 	addi	r6,sp,120
    ee34:	a00b883a 	mov	r5,r20
    ee38:	9809883a 	mov	r4,r19
    ee3c:	00173980 	call	17398 <__ssprint_r>
    ee40:	103e631e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    ee44:	843ffc04 	addi	r16,r16,-16
    ee48:	d8c02017 	ldw	r3,128(sp)
    ee4c:	d8801f17 	ldw	r2,124(sp)
    ee50:	da000404 	addi	r8,sp,16
    ee54:	8c3fed16 	blt	r17,r16,ee0c <__alt_data_end+0xfc00ee0c>
    ee58:	d9403517 	ldw	r5,212(sp)
    ee5c:	1c07883a 	add	r3,r3,r16
    ee60:	10800044 	addi	r2,r2,1
    ee64:	41400015 	stw	r5,0(r8)
    ee68:	44000115 	stw	r16,4(r8)
    ee6c:	d8c02015 	stw	r3,128(sp)
    ee70:	d8801f15 	stw	r2,124(sp)
    ee74:	010001c4 	movi	r4,7
    ee78:	2080060e 	bge	r4,r2,ee94 <___svfprintf_internal_r+0xa60>
    ee7c:	d9402d17 	ldw	r5,180(sp)
    ee80:	d9801e04 	addi	r6,sp,120
    ee84:	9809883a 	mov	r4,r19
    ee88:	00173980 	call	17398 <__ssprint_r>
    ee8c:	103e501e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    ee90:	d8c02017 	ldw	r3,128(sp)
    ee94:	d8803117 	ldw	r2,196(sp)
    ee98:	d9002917 	ldw	r4,164(sp)
    ee9c:	1100010e 	bge	r2,r4,eea4 <___svfprintf_internal_r+0xa70>
    eea0:	2005883a 	mov	r2,r4
    eea4:	d9402f17 	ldw	r5,188(sp)
    eea8:	288b883a 	add	r5,r5,r2
    eeac:	d9402f15 	stw	r5,188(sp)
    eeb0:	1801be1e 	bne	r3,zero,f5ac <___svfprintf_internal_r+0x1178>
    eeb4:	b8800007 	ldb	r2,0(r23)
    eeb8:	d8001f15 	stw	zero,124(sp)
    eebc:	da000404 	addi	r8,sp,16
    eec0:	103d891e 	bne	r2,zero,e4e8 <__alt_data_end+0xfc00e4e8>
    eec4:	b823883a 	mov	r17,r23
    eec8:	003d9f06 	br	e548 <__alt_data_end+0xfc00e548>
    eecc:	8025883a 	mov	r18,r16
    eed0:	dc002903 	ldbu	r16,164(sp)
    eed4:	e011883a 	mov	r8,fp
    eed8:	84003fcc 	andi	r16,r16,255
    eedc:	8005e61e 	bne	r16,zero,10678 <___svfprintf_internal_r+0x2244>
    eee0:	94800414 	ori	r18,r18,16
    eee4:	9080080c 	andi	r2,r18,32
    eee8:	10022026 	beq	r2,zero,f76c <___svfprintf_internal_r+0x1338>
    eeec:	d9002e17 	ldw	r4,184(sp)
    eef0:	d9402a17 	ldw	r5,168(sp)
    eef4:	d8002785 	stb	zero,158(sp)
    eef8:	20c00204 	addi	r3,r4,8
    eefc:	25000017 	ldw	r20,0(r4)
    ef00:	25800117 	ldw	r22,4(r4)
    ef04:	2803ad16 	blt	r5,zero,fdbc <___svfprintf_internal_r+0x1988>
    ef08:	013fdfc4 	movi	r4,-129
    ef0c:	a584b03a 	or	r2,r20,r22
    ef10:	d8c02e15 	stw	r3,184(sp)
    ef14:	9124703a 	and	r18,r18,r4
    ef18:	0039883a 	mov	fp,zero
    ef1c:	103eb01e 	bne	r2,zero,e9e0 <__alt_data_end+0xfc00e9e0>
    ef20:	d8802a17 	ldw	r2,168(sp)
    ef24:	1002e71e 	bne	r2,zero,fac4 <___svfprintf_internal_r+0x1690>
    ef28:	d8002a15 	stw	zero,168(sp)
    ef2c:	d8002b15 	stw	zero,172(sp)
    ef30:	dc001e04 	addi	r16,sp,120
    ef34:	003ef706 	br	eb14 <__alt_data_end+0xfc00eb14>
    ef38:	8025883a 	mov	r18,r16
    ef3c:	dc002903 	ldbu	r16,164(sp)
    ef40:	e011883a 	mov	r8,fp
    ef44:	84003fcc 	andi	r16,r16,255
    ef48:	8005c81e 	bne	r16,zero,1066c <___svfprintf_internal_r+0x2238>
    ef4c:	010000f4 	movhi	r4,3
    ef50:	21257304 	addi	r4,r4,-27188
    ef54:	d9003a15 	stw	r4,232(sp)
    ef58:	9080080c 	andi	r2,r18,32
    ef5c:	10007226 	beq	r2,zero,f128 <___svfprintf_internal_r+0xcf4>
    ef60:	d9402e17 	ldw	r5,184(sp)
    ef64:	2d000017 	ldw	r20,0(r5)
    ef68:	2d800117 	ldw	r22,4(r5)
    ef6c:	29400204 	addi	r5,r5,8
    ef70:	d9402e15 	stw	r5,184(sp)
    ef74:	9080004c 	andi	r2,r18,1
    ef78:	1001aa26 	beq	r2,zero,f624 <___svfprintf_internal_r+0x11f0>
    ef7c:	a584b03a 	or	r2,r20,r22
    ef80:	10032526 	beq	r2,zero,fc18 <___svfprintf_internal_r+0x17e4>
    ef84:	d8c02a17 	ldw	r3,168(sp)
    ef88:	00800c04 	movi	r2,48
    ef8c:	d8802705 	stb	r2,156(sp)
    ef90:	dc402745 	stb	r17,157(sp)
    ef94:	d8002785 	stb	zero,158(sp)
    ef98:	90800094 	ori	r2,r18,2
    ef9c:	1804a316 	blt	r3,zero,1022c <___svfprintf_internal_r+0x1df8>
    efa0:	00bfdfc4 	movi	r2,-129
    efa4:	90a4703a 	and	r18,r18,r2
    efa8:	94800094 	ori	r18,r18,2
    efac:	0039883a 	mov	fp,zero
    efb0:	d9003a17 	ldw	r4,232(sp)
    efb4:	dc001e04 	addi	r16,sp,120
    efb8:	a08003cc 	andi	r2,r20,15
    efbc:	b006973a 	slli	r3,r22,28
    efc0:	2085883a 	add	r2,r4,r2
    efc4:	a028d13a 	srli	r20,r20,4
    efc8:	10800003 	ldbu	r2,0(r2)
    efcc:	b02cd13a 	srli	r22,r22,4
    efd0:	843fffc4 	addi	r16,r16,-1
    efd4:	1d28b03a 	or	r20,r3,r20
    efd8:	80800005 	stb	r2,0(r16)
    efdc:	a584b03a 	or	r2,r20,r22
    efe0:	103ff51e 	bne	r2,zero,efb8 <__alt_data_end+0xfc00efb8>
    efe4:	d8c02817 	ldw	r3,160(sp)
    efe8:	1c07c83a 	sub	r3,r3,r16
    efec:	d8c02b15 	stw	r3,172(sp)
    eff0:	003ec806 	br	eb14 <__alt_data_end+0xfc00eb14>
    eff4:	d8c02e17 	ldw	r3,184(sp)
    eff8:	d9002e17 	ldw	r4,184(sp)
    effc:	8025883a 	mov	r18,r16
    f000:	18800017 	ldw	r2,0(r3)
    f004:	21000104 	addi	r4,r4,4
    f008:	00c00044 	movi	r3,1
    f00c:	e011883a 	mov	r8,fp
    f010:	d8c02915 	stw	r3,164(sp)
    f014:	d8002785 	stb	zero,158(sp)
    f018:	d8801405 	stb	r2,80(sp)
    f01c:	d9002e15 	stw	r4,184(sp)
    f020:	d8c02b15 	stw	r3,172(sp)
    f024:	d8002a15 	stw	zero,168(sp)
    f028:	d8003215 	stw	zero,200(sp)
    f02c:	dc001404 	addi	r16,sp,80
    f030:	0039883a 	mov	fp,zero
    f034:	003ec406 	br	eb48 <__alt_data_end+0xfc00eb48>
    f038:	8025883a 	mov	r18,r16
    f03c:	dc002903 	ldbu	r16,164(sp)
    f040:	e011883a 	mov	r8,fp
    f044:	84003fcc 	andi	r16,r16,255
    f048:	803e8726 	beq	r16,zero,ea68 <__alt_data_end+0xfc00ea68>
    f04c:	d8c02b03 	ldbu	r3,172(sp)
    f050:	d8c02785 	stb	r3,158(sp)
    f054:	003e8406 	br	ea68 <__alt_data_end+0xfc00ea68>
    f058:	00c00044 	movi	r3,1
    f05c:	d8c02905 	stb	r3,164(sp)
    f060:	00c00ac4 	movi	r3,43
    f064:	d8c02b05 	stb	r3,172(sp)
    f068:	bc400007 	ldb	r17,0(r23)
    f06c:	003d4606 	br	e588 <__alt_data_end+0xfc00e588>
    f070:	84000814 	ori	r16,r16,32
    f074:	bc400007 	ldb	r17,0(r23)
    f078:	003d4306 	br	e588 <__alt_data_end+0xfc00e588>
    f07c:	d8802e17 	ldw	r2,184(sp)
    f080:	8025883a 	mov	r18,r16
    f084:	d8002785 	stb	zero,158(sp)
    f088:	14000017 	ldw	r16,0(r2)
    f08c:	e011883a 	mov	r8,fp
    f090:	15000104 	addi	r20,r2,4
    f094:	80042126 	beq	r16,zero,1011c <___svfprintf_internal_r+0x1ce8>
    f098:	d8c02a17 	ldw	r3,168(sp)
    f09c:	1803ee16 	blt	r3,zero,10058 <___svfprintf_internal_r+0x1c24>
    f0a0:	180d883a 	mov	r6,r3
    f0a4:	000b883a 	mov	r5,zero
    f0a8:	8009883a 	mov	r4,r16
    f0ac:	df003e15 	stw	fp,248(sp)
    f0b0:	00158240 	call	15824 <memchr>
    f0b4:	da003e17 	ldw	r8,248(sp)
    f0b8:	10046a26 	beq	r2,zero,10264 <___svfprintf_internal_r+0x1e30>
    f0bc:	1405c83a 	sub	r2,r2,r16
    f0c0:	d8802b15 	stw	r2,172(sp)
    f0c4:	1003ea16 	blt	r2,zero,10070 <___svfprintf_internal_r+0x1c3c>
    f0c8:	df002783 	ldbu	fp,158(sp)
    f0cc:	d8802915 	stw	r2,164(sp)
    f0d0:	dd002e15 	stw	r20,184(sp)
    f0d4:	d8002a15 	stw	zero,168(sp)
    f0d8:	d8003215 	stw	zero,200(sp)
    f0dc:	003e9306 	br	eb2c <__alt_data_end+0xfc00eb2c>
    f0e0:	8025883a 	mov	r18,r16
    f0e4:	dc002903 	ldbu	r16,164(sp)
    f0e8:	e011883a 	mov	r8,fp
    f0ec:	84003fcc 	andi	r16,r16,255
    f0f0:	803f7c26 	beq	r16,zero,eee4 <__alt_data_end+0xfc00eee4>
    f0f4:	d8c02b03 	ldbu	r3,172(sp)
    f0f8:	d8c02785 	stb	r3,158(sp)
    f0fc:	003f7906 	br	eee4 <__alt_data_end+0xfc00eee4>
    f100:	8025883a 	mov	r18,r16
    f104:	dc002903 	ldbu	r16,164(sp)
    f108:	e011883a 	mov	r8,fp
    f10c:	84003fcc 	andi	r16,r16,255
    f110:	8005741e 	bne	r16,zero,106e4 <___svfprintf_internal_r+0x22b0>
    f114:	010000f4 	movhi	r4,3
    f118:	21257804 	addi	r4,r4,-27168
    f11c:	d9003a15 	stw	r4,232(sp)
    f120:	9080080c 	andi	r2,r18,32
    f124:	103f8e1e 	bne	r2,zero,ef60 <__alt_data_end+0xfc00ef60>
    f128:	9080040c 	andi	r2,r18,16
    f12c:	1002a726 	beq	r2,zero,fbcc <___svfprintf_internal_r+0x1798>
    f130:	d8802e17 	ldw	r2,184(sp)
    f134:	002d883a 	mov	r22,zero
    f138:	15000017 	ldw	r20,0(r2)
    f13c:	10800104 	addi	r2,r2,4
    f140:	d8802e15 	stw	r2,184(sp)
    f144:	003f8b06 	br	ef74 <__alt_data_end+0xfc00ef74>
    f148:	84000054 	ori	r16,r16,1
    f14c:	bc400007 	ldb	r17,0(r23)
    f150:	003d0d06 	br	e588 <__alt_data_end+0xfc00e588>
    f154:	d8802b07 	ldb	r2,172(sp)
    f158:	1002a41e 	bne	r2,zero,fbec <___svfprintf_internal_r+0x17b8>
    f15c:	00c00044 	movi	r3,1
    f160:	d8c02905 	stb	r3,164(sp)
    f164:	00c00804 	movi	r3,32
    f168:	d8c02b05 	stb	r3,172(sp)
    f16c:	bc400007 	ldb	r17,0(r23)
    f170:	003d0506 	br	e588 <__alt_data_end+0xfc00e588>
    f174:	8025883a 	mov	r18,r16
    f178:	dc002903 	ldbu	r16,164(sp)
    f17c:	e011883a 	mov	r8,fp
    f180:	84003fcc 	andi	r16,r16,255
    f184:	803e0626 	beq	r16,zero,e9a0 <__alt_data_end+0xfc00e9a0>
    f188:	d8c02b03 	ldbu	r3,172(sp)
    f18c:	d8c02785 	stb	r3,158(sp)
    f190:	003e0306 	br	e9a0 <__alt_data_end+0xfc00e9a0>
    f194:	bc400007 	ldb	r17,0(r23)
    f198:	00801b04 	movi	r2,108
    f19c:	88830a26 	beq	r17,r2,fdc8 <___svfprintf_internal_r+0x1994>
    f1a0:	84000414 	ori	r16,r16,16
    f1a4:	003cf806 	br	e588 <__alt_data_end+0xfc00e588>
    f1a8:	8025883a 	mov	r18,r16
    f1ac:	dc002903 	ldbu	r16,164(sp)
    f1b0:	e011883a 	mov	r8,fp
    f1b4:	84003fcc 	andi	r16,r16,255
    f1b8:	8005471e 	bne	r16,zero,106d8 <___svfprintf_internal_r+0x22a4>
    f1bc:	9080080c 	andi	r2,r18,32
    f1c0:	10028c26 	beq	r2,zero,fbf4 <___svfprintf_internal_r+0x17c0>
    f1c4:	d9002e17 	ldw	r4,184(sp)
    f1c8:	d9402f17 	ldw	r5,188(sp)
    f1cc:	20800017 	ldw	r2,0(r4)
    f1d0:	2807d7fa 	srai	r3,r5,31
    f1d4:	21000104 	addi	r4,r4,4
    f1d8:	d9002e15 	stw	r4,184(sp)
    f1dc:	11400015 	stw	r5,0(r2)
    f1e0:	10c00115 	stw	r3,4(r2)
    f1e4:	003cbe06 	br	e4e0 <__alt_data_end+0xfc00e4e0>
    f1e8:	84001014 	ori	r16,r16,64
    f1ec:	bc400007 	ldb	r17,0(r23)
    f1f0:	003ce506 	br	e588 <__alt_data_end+0xfc00e588>
    f1f4:	010000f4 	movhi	r4,3
    f1f8:	21257804 	addi	r4,r4,-27168
    f1fc:	0039883a 	mov	fp,zero
    f200:	d9003a15 	stw	r4,232(sp)
    f204:	04401e04 	movi	r17,120
    f208:	003f6906 	br	efb0 <__alt_data_end+0xfc00efb0>
    f20c:	8025883a 	mov	r18,r16
    f210:	dc002903 	ldbu	r16,164(sp)
    f214:	e011883a 	mov	r8,fp
    f218:	84003fcc 	andi	r16,r16,255
    f21c:	8005261e 	bne	r16,zero,106b8 <___svfprintf_internal_r+0x2284>
    f220:	883d6526 	beq	r17,zero,e7b8 <__alt_data_end+0xfc00e7b8>
    f224:	00c00044 	movi	r3,1
    f228:	d8c02915 	stw	r3,164(sp)
    f22c:	dc401405 	stb	r17,80(sp)
    f230:	d8002785 	stb	zero,158(sp)
    f234:	003f7a06 	br	f020 <__alt_data_end+0xfc00f020>
    f238:	010000f4 	movhi	r4,3
    f23c:	21257804 	addi	r4,r4,-27168
    f240:	d9003a15 	stw	r4,232(sp)
    f244:	d8c02e15 	stw	r3,184(sp)
    f248:	1025883a 	mov	r18,r2
    f24c:	04401e04 	movi	r17,120
    f250:	a584b03a 	or	r2,r20,r22
    f254:	1000fa1e 	bne	r2,zero,f640 <___svfprintf_internal_r+0x120c>
    f258:	0039883a 	mov	fp,zero
    f25c:	00800084 	movi	r2,2
    f260:	10803fcc 	andi	r2,r2,255
    f264:	00c00044 	movi	r3,1
    f268:	10c21626 	beq	r2,r3,fac4 <___svfprintf_internal_r+0x1690>
    f26c:	00c00084 	movi	r3,2
    f270:	10fe0e1e 	bne	r2,r3,eaac <__alt_data_end+0xfc00eaac>
    f274:	003d4606 	br	e790 <__alt_data_end+0xfc00e790>
    f278:	d8c02017 	ldw	r3,128(sp)
    f27c:	003e7306 	br	ec4c <__alt_data_end+0xfc00ec4c>
    f280:	00801944 	movi	r2,101
    f284:	14407c0e 	bge	r2,r17,f478 <___svfprintf_internal_r+0x1044>
    f288:	d9003617 	ldw	r4,216(sp)
    f28c:	d9403717 	ldw	r5,220(sp)
    f290:	000d883a 	mov	r6,zero
    f294:	000f883a 	mov	r7,zero
    f298:	d8c03d15 	stw	r3,244(sp)
    f29c:	da003e15 	stw	r8,248(sp)
    f2a0:	001c7880 	call	1c788 <__eqdf2>
    f2a4:	d8c03d17 	ldw	r3,244(sp)
    f2a8:	da003e17 	ldw	r8,248(sp)
    f2ac:	1000f51e 	bne	r2,zero,f684 <___svfprintf_internal_r+0x1250>
    f2b0:	d8801f17 	ldw	r2,124(sp)
    f2b4:	010000f4 	movhi	r4,3
    f2b8:	21257f04 	addi	r4,r4,-27140
    f2bc:	18c00044 	addi	r3,r3,1
    f2c0:	10800044 	addi	r2,r2,1
    f2c4:	41000015 	stw	r4,0(r8)
    f2c8:	01000044 	movi	r4,1
    f2cc:	41000115 	stw	r4,4(r8)
    f2d0:	d8c02015 	stw	r3,128(sp)
    f2d4:	d8801f15 	stw	r2,124(sp)
    f2d8:	010001c4 	movi	r4,7
    f2dc:	20826616 	blt	r4,r2,fc78 <___svfprintf_internal_r+0x1844>
    f2e0:	42000204 	addi	r8,r8,8
    f2e4:	d8802617 	ldw	r2,152(sp)
    f2e8:	d9403317 	ldw	r5,204(sp)
    f2ec:	11400216 	blt	r2,r5,f2f8 <___svfprintf_internal_r+0xec4>
    f2f0:	9080004c 	andi	r2,r18,1
    f2f4:	103eb326 	beq	r2,zero,edc4 <__alt_data_end+0xfc00edc4>
    f2f8:	d8803817 	ldw	r2,224(sp)
    f2fc:	d9003417 	ldw	r4,208(sp)
    f300:	d9403817 	ldw	r5,224(sp)
    f304:	1887883a 	add	r3,r3,r2
    f308:	d8801f17 	ldw	r2,124(sp)
    f30c:	41000015 	stw	r4,0(r8)
    f310:	41400115 	stw	r5,4(r8)
    f314:	10800044 	addi	r2,r2,1
    f318:	d8c02015 	stw	r3,128(sp)
    f31c:	d8801f15 	stw	r2,124(sp)
    f320:	010001c4 	movi	r4,7
    f324:	2082af16 	blt	r4,r2,fde4 <___svfprintf_internal_r+0x19b0>
    f328:	42000204 	addi	r8,r8,8
    f32c:	d8803317 	ldw	r2,204(sp)
    f330:	143fffc4 	addi	r16,r2,-1
    f334:	043ea30e 	bge	zero,r16,edc4 <__alt_data_end+0xfc00edc4>
    f338:	04400404 	movi	r17,16
    f33c:	d8801f17 	ldw	r2,124(sp)
    f340:	8c00860e 	bge	r17,r16,f55c <___svfprintf_internal_r+0x1128>
    f344:	014000f4 	movhi	r5,3
    f348:	29657f84 	addi	r5,r5,-27138
    f34c:	d9402c15 	stw	r5,176(sp)
    f350:	058001c4 	movi	r22,7
    f354:	dd002d17 	ldw	r20,180(sp)
    f358:	00000306 	br	f368 <___svfprintf_internal_r+0xf34>
    f35c:	42000204 	addi	r8,r8,8
    f360:	843ffc04 	addi	r16,r16,-16
    f364:	8c00800e 	bge	r17,r16,f568 <___svfprintf_internal_r+0x1134>
    f368:	18c00404 	addi	r3,r3,16
    f36c:	10800044 	addi	r2,r2,1
    f370:	45400015 	stw	r21,0(r8)
    f374:	44400115 	stw	r17,4(r8)
    f378:	d8c02015 	stw	r3,128(sp)
    f37c:	d8801f15 	stw	r2,124(sp)
    f380:	b0bff60e 	bge	r22,r2,f35c <__alt_data_end+0xfc00f35c>
    f384:	d9801e04 	addi	r6,sp,120
    f388:	a00b883a 	mov	r5,r20
    f38c:	9809883a 	mov	r4,r19
    f390:	00173980 	call	17398 <__ssprint_r>
    f394:	103d0e1e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f398:	d8c02017 	ldw	r3,128(sp)
    f39c:	d8801f17 	ldw	r2,124(sp)
    f3a0:	da000404 	addi	r8,sp,16
    f3a4:	003fee06 	br	f360 <__alt_data_end+0xfc00f360>
    f3a8:	d9403117 	ldw	r5,196(sp)
    f3ac:	d8802917 	ldw	r2,164(sp)
    f3b0:	28adc83a 	sub	r22,r5,r2
    f3b4:	05be430e 	bge	zero,r22,ecc4 <__alt_data_end+0xfc00ecc4>
    f3b8:	07000404 	movi	fp,16
    f3bc:	d8801f17 	ldw	r2,124(sp)
    f3c0:	e583a20e 	bge	fp,r22,1024c <___svfprintf_internal_r+0x1e18>
    f3c4:	014000f4 	movhi	r5,3
    f3c8:	29657f84 	addi	r5,r5,-27138
    f3cc:	dc403015 	stw	r17,192(sp)
    f3d0:	d9402c15 	stw	r5,176(sp)
    f3d4:	b023883a 	mov	r17,r22
    f3d8:	050001c4 	movi	r20,7
    f3dc:	902d883a 	mov	r22,r18
    f3e0:	8025883a 	mov	r18,r16
    f3e4:	dc002d17 	ldw	r16,180(sp)
    f3e8:	00000306 	br	f3f8 <___svfprintf_internal_r+0xfc4>
    f3ec:	8c7ffc04 	addi	r17,r17,-16
    f3f0:	42000204 	addi	r8,r8,8
    f3f4:	e440110e 	bge	fp,r17,f43c <___svfprintf_internal_r+0x1008>
    f3f8:	18c00404 	addi	r3,r3,16
    f3fc:	10800044 	addi	r2,r2,1
    f400:	45400015 	stw	r21,0(r8)
    f404:	47000115 	stw	fp,4(r8)
    f408:	d8c02015 	stw	r3,128(sp)
    f40c:	d8801f15 	stw	r2,124(sp)
    f410:	a0bff60e 	bge	r20,r2,f3ec <__alt_data_end+0xfc00f3ec>
    f414:	d9801e04 	addi	r6,sp,120
    f418:	800b883a 	mov	r5,r16
    f41c:	9809883a 	mov	r4,r19
    f420:	00173980 	call	17398 <__ssprint_r>
    f424:	103cea1e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f428:	8c7ffc04 	addi	r17,r17,-16
    f42c:	d8c02017 	ldw	r3,128(sp)
    f430:	d8801f17 	ldw	r2,124(sp)
    f434:	da000404 	addi	r8,sp,16
    f438:	e47fef16 	blt	fp,r17,f3f8 <__alt_data_end+0xfc00f3f8>
    f43c:	9021883a 	mov	r16,r18
    f440:	b025883a 	mov	r18,r22
    f444:	882d883a 	mov	r22,r17
    f448:	dc403017 	ldw	r17,192(sp)
    f44c:	d9002c17 	ldw	r4,176(sp)
    f450:	1d87883a 	add	r3,r3,r22
    f454:	10800044 	addi	r2,r2,1
    f458:	41000015 	stw	r4,0(r8)
    f45c:	45800115 	stw	r22,4(r8)
    f460:	d8c02015 	stw	r3,128(sp)
    f464:	d8801f15 	stw	r2,124(sp)
    f468:	010001c4 	movi	r4,7
    f46c:	20819a16 	blt	r4,r2,fad8 <___svfprintf_internal_r+0x16a4>
    f470:	42000204 	addi	r8,r8,8
    f474:	003e1306 	br	ecc4 <__alt_data_end+0xfc00ecc4>
    f478:	d9403317 	ldw	r5,204(sp)
    f47c:	00800044 	movi	r2,1
    f480:	18c00044 	addi	r3,r3,1
    f484:	1141710e 	bge	r2,r5,fa4c <___svfprintf_internal_r+0x1618>
    f488:	dc401f17 	ldw	r17,124(sp)
    f48c:	00800044 	movi	r2,1
    f490:	40800115 	stw	r2,4(r8)
    f494:	8c400044 	addi	r17,r17,1
    f498:	44000015 	stw	r16,0(r8)
    f49c:	d8c02015 	stw	r3,128(sp)
    f4a0:	dc401f15 	stw	r17,124(sp)
    f4a4:	008001c4 	movi	r2,7
    f4a8:	14417416 	blt	r2,r17,fa7c <___svfprintf_internal_r+0x1648>
    f4ac:	42000204 	addi	r8,r8,8
    f4b0:	d8803817 	ldw	r2,224(sp)
    f4b4:	d9003417 	ldw	r4,208(sp)
    f4b8:	8c400044 	addi	r17,r17,1
    f4bc:	10c7883a 	add	r3,r2,r3
    f4c0:	40800115 	stw	r2,4(r8)
    f4c4:	41000015 	stw	r4,0(r8)
    f4c8:	d8c02015 	stw	r3,128(sp)
    f4cc:	dc401f15 	stw	r17,124(sp)
    f4d0:	008001c4 	movi	r2,7
    f4d4:	14417216 	blt	r2,r17,faa0 <___svfprintf_internal_r+0x166c>
    f4d8:	45800204 	addi	r22,r8,8
    f4dc:	d9003617 	ldw	r4,216(sp)
    f4e0:	d9403717 	ldw	r5,220(sp)
    f4e4:	000d883a 	mov	r6,zero
    f4e8:	000f883a 	mov	r7,zero
    f4ec:	d8c03d15 	stw	r3,244(sp)
    f4f0:	001c7880 	call	1c788 <__eqdf2>
    f4f4:	d8c03d17 	ldw	r3,244(sp)
    f4f8:	1000b326 	beq	r2,zero,f7c8 <___svfprintf_internal_r+0x1394>
    f4fc:	d9403317 	ldw	r5,204(sp)
    f500:	84000044 	addi	r16,r16,1
    f504:	8c400044 	addi	r17,r17,1
    f508:	28bfffc4 	addi	r2,r5,-1
    f50c:	1887883a 	add	r3,r3,r2
    f510:	b0800115 	stw	r2,4(r22)
    f514:	b4000015 	stw	r16,0(r22)
    f518:	d8c02015 	stw	r3,128(sp)
    f51c:	dc401f15 	stw	r17,124(sp)
    f520:	008001c4 	movi	r2,7
    f524:	1440d216 	blt	r2,r17,f870 <___svfprintf_internal_r+0x143c>
    f528:	b5800204 	addi	r22,r22,8
    f52c:	d9003b17 	ldw	r4,236(sp)
    f530:	df0022c4 	addi	fp,sp,139
    f534:	8c400044 	addi	r17,r17,1
    f538:	20c7883a 	add	r3,r4,r3
    f53c:	b7000015 	stw	fp,0(r22)
    f540:	b1000115 	stw	r4,4(r22)
    f544:	d8c02015 	stw	r3,128(sp)
    f548:	dc401f15 	stw	r17,124(sp)
    f54c:	008001c4 	movi	r2,7
    f550:	14400e16 	blt	r2,r17,f58c <___svfprintf_internal_r+0x1158>
    f554:	b2000204 	addi	r8,r22,8
    f558:	003e1a06 	br	edc4 <__alt_data_end+0xfc00edc4>
    f55c:	010000f4 	movhi	r4,3
    f560:	21257f84 	addi	r4,r4,-27138
    f564:	d9002c15 	stw	r4,176(sp)
    f568:	d9002c17 	ldw	r4,176(sp)
    f56c:	1c07883a 	add	r3,r3,r16
    f570:	44000115 	stw	r16,4(r8)
    f574:	41000015 	stw	r4,0(r8)
    f578:	10800044 	addi	r2,r2,1
    f57c:	d8c02015 	stw	r3,128(sp)
    f580:	d8801f15 	stw	r2,124(sp)
    f584:	010001c4 	movi	r4,7
    f588:	20be0d0e 	bge	r4,r2,edc0 <__alt_data_end+0xfc00edc0>
    f58c:	d9402d17 	ldw	r5,180(sp)
    f590:	d9801e04 	addi	r6,sp,120
    f594:	9809883a 	mov	r4,r19
    f598:	00173980 	call	17398 <__ssprint_r>
    f59c:	103c8c1e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f5a0:	d8c02017 	ldw	r3,128(sp)
    f5a4:	da000404 	addi	r8,sp,16
    f5a8:	003e0606 	br	edc4 <__alt_data_end+0xfc00edc4>
    f5ac:	d9402d17 	ldw	r5,180(sp)
    f5b0:	d9801e04 	addi	r6,sp,120
    f5b4:	9809883a 	mov	r4,r19
    f5b8:	00173980 	call	17398 <__ssprint_r>
    f5bc:	103e3d26 	beq	r2,zero,eeb4 <__alt_data_end+0xfc00eeb4>
    f5c0:	003c8306 	br	e7d0 <__alt_data_end+0xfc00e7d0>
    f5c4:	d9402d17 	ldw	r5,180(sp)
    f5c8:	d9801e04 	addi	r6,sp,120
    f5cc:	9809883a 	mov	r4,r19
    f5d0:	00173980 	call	17398 <__ssprint_r>
    f5d4:	103c7e1e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f5d8:	d8c02017 	ldw	r3,128(sp)
    f5dc:	da000404 	addi	r8,sp,16
    f5e0:	003deb06 	br	ed90 <__alt_data_end+0xfc00ed90>
    f5e4:	d9402d17 	ldw	r5,180(sp)
    f5e8:	d9801e04 	addi	r6,sp,120
    f5ec:	9809883a 	mov	r4,r19
    f5f0:	00173980 	call	17398 <__ssprint_r>
    f5f4:	103c761e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f5f8:	d8c02017 	ldw	r3,128(sp)
    f5fc:	da000404 	addi	r8,sp,16
    f600:	003d9f06 	br	ec80 <__alt_data_end+0xfc00ec80>
    f604:	d9402d17 	ldw	r5,180(sp)
    f608:	d9801e04 	addi	r6,sp,120
    f60c:	9809883a 	mov	r4,r19
    f610:	00173980 	call	17398 <__ssprint_r>
    f614:	103c6e1e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f618:	d8c02017 	ldw	r3,128(sp)
    f61c:	da000404 	addi	r8,sp,16
    f620:	003da506 	br	ecb8 <__alt_data_end+0xfc00ecb8>
    f624:	d9402a17 	ldw	r5,168(sp)
    f628:	d8002785 	stb	zero,158(sp)
    f62c:	283f0816 	blt	r5,zero,f250 <__alt_data_end+0xfc00f250>
    f630:	00ffdfc4 	movi	r3,-129
    f634:	a584b03a 	or	r2,r20,r22
    f638:	90e4703a 	and	r18,r18,r3
    f63c:	103c5126 	beq	r2,zero,e784 <__alt_data_end+0xfc00e784>
    f640:	0039883a 	mov	fp,zero
    f644:	003e5a06 	br	efb0 <__alt_data_end+0xfc00efb0>
    f648:	9080040c 	andi	r2,r18,16
    f64c:	10013d26 	beq	r2,zero,fb44 <___svfprintf_internal_r+0x1710>
    f650:	d8c02e17 	ldw	r3,184(sp)
    f654:	d9002a17 	ldw	r4,168(sp)
    f658:	d8002785 	stb	zero,158(sp)
    f65c:	18800104 	addi	r2,r3,4
    f660:	1d000017 	ldw	r20,0(r3)
    f664:	002d883a 	mov	r22,zero
    f668:	20013f16 	blt	r4,zero,fb68 <___svfprintf_internal_r+0x1734>
    f66c:	00ffdfc4 	movi	r3,-129
    f670:	d8802e15 	stw	r2,184(sp)
    f674:	90e4703a 	and	r18,r18,r3
    f678:	a03d0926 	beq	r20,zero,eaa0 <__alt_data_end+0xfc00eaa0>
    f67c:	0039883a 	mov	fp,zero
    f680:	003d0c06 	br	eab4 <__alt_data_end+0xfc00eab4>
    f684:	dc402617 	ldw	r17,152(sp)
    f688:	0441830e 	bge	zero,r17,fc98 <___svfprintf_internal_r+0x1864>
    f68c:	dc403217 	ldw	r17,200(sp)
    f690:	d8803317 	ldw	r2,204(sp)
    f694:	1440010e 	bge	r2,r17,f69c <___svfprintf_internal_r+0x1268>
    f698:	1023883a 	mov	r17,r2
    f69c:	04400a0e 	bge	zero,r17,f6c8 <___svfprintf_internal_r+0x1294>
    f6a0:	d8801f17 	ldw	r2,124(sp)
    f6a4:	1c47883a 	add	r3,r3,r17
    f6a8:	44000015 	stw	r16,0(r8)
    f6ac:	10800044 	addi	r2,r2,1
    f6b0:	44400115 	stw	r17,4(r8)
    f6b4:	d8c02015 	stw	r3,128(sp)
    f6b8:	d8801f15 	stw	r2,124(sp)
    f6bc:	010001c4 	movi	r4,7
    f6c0:	20827516 	blt	r4,r2,10098 <___svfprintf_internal_r+0x1c64>
    f6c4:	42000204 	addi	r8,r8,8
    f6c8:	88027b16 	blt	r17,zero,100b8 <___svfprintf_internal_r+0x1c84>
    f6cc:	d9003217 	ldw	r4,200(sp)
    f6d0:	2463c83a 	sub	r17,r4,r17
    f6d4:	0440990e 	bge	zero,r17,f93c <___svfprintf_internal_r+0x1508>
    f6d8:	05800404 	movi	r22,16
    f6dc:	d8801f17 	ldw	r2,124(sp)
    f6e0:	b441530e 	bge	r22,r17,fc30 <___svfprintf_internal_r+0x17fc>
    f6e4:	010000f4 	movhi	r4,3
    f6e8:	21257f84 	addi	r4,r4,-27138
    f6ec:	d9002c15 	stw	r4,176(sp)
    f6f0:	070001c4 	movi	fp,7
    f6f4:	dd002d17 	ldw	r20,180(sp)
    f6f8:	00000306 	br	f708 <___svfprintf_internal_r+0x12d4>
    f6fc:	42000204 	addi	r8,r8,8
    f700:	8c7ffc04 	addi	r17,r17,-16
    f704:	b4414d0e 	bge	r22,r17,fc3c <___svfprintf_internal_r+0x1808>
    f708:	18c00404 	addi	r3,r3,16
    f70c:	10800044 	addi	r2,r2,1
    f710:	45400015 	stw	r21,0(r8)
    f714:	45800115 	stw	r22,4(r8)
    f718:	d8c02015 	stw	r3,128(sp)
    f71c:	d8801f15 	stw	r2,124(sp)
    f720:	e0bff60e 	bge	fp,r2,f6fc <__alt_data_end+0xfc00f6fc>
    f724:	d9801e04 	addi	r6,sp,120
    f728:	a00b883a 	mov	r5,r20
    f72c:	9809883a 	mov	r4,r19
    f730:	00173980 	call	17398 <__ssprint_r>
    f734:	103c261e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f738:	d8c02017 	ldw	r3,128(sp)
    f73c:	d8801f17 	ldw	r2,124(sp)
    f740:	da000404 	addi	r8,sp,16
    f744:	003fee06 	br	f700 <__alt_data_end+0xfc00f700>
    f748:	d9402d17 	ldw	r5,180(sp)
    f74c:	d9801e04 	addi	r6,sp,120
    f750:	9809883a 	mov	r4,r19
    f754:	00173980 	call	17398 <__ssprint_r>
    f758:	103c1d1e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f75c:	d8c02017 	ldw	r3,128(sp)
    f760:	df002787 	ldb	fp,158(sp)
    f764:	da000404 	addi	r8,sp,16
    f768:	003d3806 	br	ec4c <__alt_data_end+0xfc00ec4c>
    f76c:	9080040c 	andi	r2,r18,16
    f770:	10005c26 	beq	r2,zero,f8e4 <___svfprintf_internal_r+0x14b0>
    f774:	d8c02e17 	ldw	r3,184(sp)
    f778:	d9002a17 	ldw	r4,168(sp)
    f77c:	d8002785 	stb	zero,158(sp)
    f780:	18800104 	addi	r2,r3,4
    f784:	1d000017 	ldw	r20,0(r3)
    f788:	002d883a 	mov	r22,zero
    f78c:	20005e16 	blt	r4,zero,f908 <___svfprintf_internal_r+0x14d4>
    f790:	00ffdfc4 	movi	r3,-129
    f794:	d8802e15 	stw	r2,184(sp)
    f798:	90e4703a 	and	r18,r18,r3
    f79c:	0039883a 	mov	fp,zero
    f7a0:	a03ddf26 	beq	r20,zero,ef20 <__alt_data_end+0xfc00ef20>
    f7a4:	00800244 	movi	r2,9
    f7a8:	153c8e36 	bltu	r2,r20,e9e4 <__alt_data_end+0xfc00e9e4>
    f7ac:	a5000c04 	addi	r20,r20,48
    f7b0:	dc001dc4 	addi	r16,sp,119
    f7b4:	dd001dc5 	stb	r20,119(sp)
    f7b8:	d8c02817 	ldw	r3,160(sp)
    f7bc:	1c07c83a 	sub	r3,r3,r16
    f7c0:	d8c02b15 	stw	r3,172(sp)
    f7c4:	003cd306 	br	eb14 <__alt_data_end+0xfc00eb14>
    f7c8:	d8803317 	ldw	r2,204(sp)
    f7cc:	143fffc4 	addi	r16,r2,-1
    f7d0:	043f560e 	bge	zero,r16,f52c <__alt_data_end+0xfc00f52c>
    f7d4:	07000404 	movi	fp,16
    f7d8:	e403530e 	bge	fp,r16,10528 <___svfprintf_internal_r+0x20f4>
    f7dc:	014000f4 	movhi	r5,3
    f7e0:	29657f84 	addi	r5,r5,-27138
    f7e4:	d9402c15 	stw	r5,176(sp)
    f7e8:	01c001c4 	movi	r7,7
    f7ec:	dd002d17 	ldw	r20,180(sp)
    f7f0:	00000306 	br	f800 <___svfprintf_internal_r+0x13cc>
    f7f4:	843ffc04 	addi	r16,r16,-16
    f7f8:	b5800204 	addi	r22,r22,8
    f7fc:	e400130e 	bge	fp,r16,f84c <___svfprintf_internal_r+0x1418>
    f800:	18c00404 	addi	r3,r3,16
    f804:	8c400044 	addi	r17,r17,1
    f808:	b5400015 	stw	r21,0(r22)
    f80c:	b7000115 	stw	fp,4(r22)
    f810:	d8c02015 	stw	r3,128(sp)
    f814:	dc401f15 	stw	r17,124(sp)
    f818:	3c7ff60e 	bge	r7,r17,f7f4 <__alt_data_end+0xfc00f7f4>
    f81c:	d9801e04 	addi	r6,sp,120
    f820:	a00b883a 	mov	r5,r20
    f824:	9809883a 	mov	r4,r19
    f828:	d9c03d15 	stw	r7,244(sp)
    f82c:	00173980 	call	17398 <__ssprint_r>
    f830:	d9c03d17 	ldw	r7,244(sp)
    f834:	103be61e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f838:	843ffc04 	addi	r16,r16,-16
    f83c:	d8c02017 	ldw	r3,128(sp)
    f840:	dc401f17 	ldw	r17,124(sp)
    f844:	dd800404 	addi	r22,sp,16
    f848:	e43fed16 	blt	fp,r16,f800 <__alt_data_end+0xfc00f800>
    f84c:	d8802c17 	ldw	r2,176(sp)
    f850:	1c07883a 	add	r3,r3,r16
    f854:	8c400044 	addi	r17,r17,1
    f858:	b0800015 	stw	r2,0(r22)
    f85c:	b4000115 	stw	r16,4(r22)
    f860:	d8c02015 	stw	r3,128(sp)
    f864:	dc401f15 	stw	r17,124(sp)
    f868:	008001c4 	movi	r2,7
    f86c:	147f2e0e 	bge	r2,r17,f528 <__alt_data_end+0xfc00f528>
    f870:	d9402d17 	ldw	r5,180(sp)
    f874:	d9801e04 	addi	r6,sp,120
    f878:	9809883a 	mov	r4,r19
    f87c:	00173980 	call	17398 <__ssprint_r>
    f880:	103bd31e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f884:	d8c02017 	ldw	r3,128(sp)
    f888:	dc401f17 	ldw	r17,124(sp)
    f88c:	dd800404 	addi	r22,sp,16
    f890:	003f2606 	br	f52c <__alt_data_end+0xfc00f52c>
    f894:	9080040c 	andi	r2,r18,16
    f898:	1000c326 	beq	r2,zero,fba8 <___svfprintf_internal_r+0x1774>
    f89c:	d9402e17 	ldw	r5,184(sp)
    f8a0:	2d000017 	ldw	r20,0(r5)
    f8a4:	29400104 	addi	r5,r5,4
    f8a8:	d9402e15 	stw	r5,184(sp)
    f8ac:	a02dd7fa 	srai	r22,r20,31
    f8b0:	b005883a 	mov	r2,r22
    f8b4:	103c430e 	bge	r2,zero,e9c4 <__alt_data_end+0xfc00e9c4>
    f8b8:	d9402a17 	ldw	r5,168(sp)
    f8bc:	0529c83a 	sub	r20,zero,r20
    f8c0:	07000b44 	movi	fp,45
    f8c4:	a004c03a 	cmpne	r2,r20,zero
    f8c8:	05adc83a 	sub	r22,zero,r22
    f8cc:	df002785 	stb	fp,158(sp)
    f8d0:	b0adc83a 	sub	r22,r22,r2
    f8d4:	28022e16 	blt	r5,zero,10190 <___svfprintf_internal_r+0x1d5c>
    f8d8:	00bfdfc4 	movi	r2,-129
    f8dc:	90a4703a 	and	r18,r18,r2
    f8e0:	003c3f06 	br	e9e0 <__alt_data_end+0xfc00e9e0>
    f8e4:	9080100c 	andi	r2,r18,64
    f8e8:	d8002785 	stb	zero,158(sp)
    f8ec:	10012526 	beq	r2,zero,fd84 <___svfprintf_internal_r+0x1950>
    f8f0:	d9402e17 	ldw	r5,184(sp)
    f8f4:	d8c02a17 	ldw	r3,168(sp)
    f8f8:	002d883a 	mov	r22,zero
    f8fc:	28800104 	addi	r2,r5,4
    f900:	2d00000b 	ldhu	r20,0(r5)
    f904:	183fa20e 	bge	r3,zero,f790 <__alt_data_end+0xfc00f790>
    f908:	d8802e15 	stw	r2,184(sp)
    f90c:	0039883a 	mov	fp,zero
    f910:	a584b03a 	or	r2,r20,r22
    f914:	103c321e 	bne	r2,zero,e9e0 <__alt_data_end+0xfc00e9e0>
    f918:	00800044 	movi	r2,1
    f91c:	003e5006 	br	f260 <__alt_data_end+0xfc00f260>
    f920:	d9402d17 	ldw	r5,180(sp)
    f924:	d9801e04 	addi	r6,sp,120
    f928:	9809883a 	mov	r4,r19
    f92c:	00173980 	call	17398 <__ssprint_r>
    f930:	103ba71e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    f934:	d8c02017 	ldw	r3,128(sp)
    f938:	da000404 	addi	r8,sp,16
    f93c:	d9003217 	ldw	r4,200(sp)
    f940:	d8802617 	ldw	r2,152(sp)
    f944:	d9403317 	ldw	r5,204(sp)
    f948:	8123883a 	add	r17,r16,r4
    f94c:	11400216 	blt	r2,r5,f958 <___svfprintf_internal_r+0x1524>
    f950:	9100004c 	andi	r4,r18,1
    f954:	20000d26 	beq	r4,zero,f98c <___svfprintf_internal_r+0x1558>
    f958:	d9003817 	ldw	r4,224(sp)
    f95c:	d9403417 	ldw	r5,208(sp)
    f960:	1907883a 	add	r3,r3,r4
    f964:	d9001f17 	ldw	r4,124(sp)
    f968:	41400015 	stw	r5,0(r8)
    f96c:	d9403817 	ldw	r5,224(sp)
    f970:	21000044 	addi	r4,r4,1
    f974:	d8c02015 	stw	r3,128(sp)
    f978:	41400115 	stw	r5,4(r8)
    f97c:	d9001f15 	stw	r4,124(sp)
    f980:	014001c4 	movi	r5,7
    f984:	2901dc16 	blt	r5,r4,100f8 <___svfprintf_internal_r+0x1cc4>
    f988:	42000204 	addi	r8,r8,8
    f98c:	d9003317 	ldw	r4,204(sp)
    f990:	8121883a 	add	r16,r16,r4
    f994:	2085c83a 	sub	r2,r4,r2
    f998:	8461c83a 	sub	r16,r16,r17
    f99c:	1400010e 	bge	r2,r16,f9a4 <___svfprintf_internal_r+0x1570>
    f9a0:	1021883a 	mov	r16,r2
    f9a4:	04000a0e 	bge	zero,r16,f9d0 <___svfprintf_internal_r+0x159c>
    f9a8:	d9001f17 	ldw	r4,124(sp)
    f9ac:	1c07883a 	add	r3,r3,r16
    f9b0:	44400015 	stw	r17,0(r8)
    f9b4:	21000044 	addi	r4,r4,1
    f9b8:	44000115 	stw	r16,4(r8)
    f9bc:	d8c02015 	stw	r3,128(sp)
    f9c0:	d9001f15 	stw	r4,124(sp)
    f9c4:	014001c4 	movi	r5,7
    f9c8:	2901e616 	blt	r5,r4,10164 <___svfprintf_internal_r+0x1d30>
    f9cc:	42000204 	addi	r8,r8,8
    f9d0:	8001f616 	blt	r16,zero,101ac <___svfprintf_internal_r+0x1d78>
    f9d4:	1421c83a 	sub	r16,r2,r16
    f9d8:	043cfa0e 	bge	zero,r16,edc4 <__alt_data_end+0xfc00edc4>
    f9dc:	04400404 	movi	r17,16
    f9e0:	d8801f17 	ldw	r2,124(sp)
    f9e4:	8c3edd0e 	bge	r17,r16,f55c <__alt_data_end+0xfc00f55c>
    f9e8:	014000f4 	movhi	r5,3
    f9ec:	29657f84 	addi	r5,r5,-27138
    f9f0:	d9402c15 	stw	r5,176(sp)
    f9f4:	058001c4 	movi	r22,7
    f9f8:	dd002d17 	ldw	r20,180(sp)
    f9fc:	00000306 	br	fa0c <___svfprintf_internal_r+0x15d8>
    fa00:	42000204 	addi	r8,r8,8
    fa04:	843ffc04 	addi	r16,r16,-16
    fa08:	8c3ed70e 	bge	r17,r16,f568 <__alt_data_end+0xfc00f568>
    fa0c:	18c00404 	addi	r3,r3,16
    fa10:	10800044 	addi	r2,r2,1
    fa14:	45400015 	stw	r21,0(r8)
    fa18:	44400115 	stw	r17,4(r8)
    fa1c:	d8c02015 	stw	r3,128(sp)
    fa20:	d8801f15 	stw	r2,124(sp)
    fa24:	b0bff60e 	bge	r22,r2,fa00 <__alt_data_end+0xfc00fa00>
    fa28:	d9801e04 	addi	r6,sp,120
    fa2c:	a00b883a 	mov	r5,r20
    fa30:	9809883a 	mov	r4,r19
    fa34:	00173980 	call	17398 <__ssprint_r>
    fa38:	103b651e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    fa3c:	d8c02017 	ldw	r3,128(sp)
    fa40:	d8801f17 	ldw	r2,124(sp)
    fa44:	da000404 	addi	r8,sp,16
    fa48:	003fee06 	br	fa04 <__alt_data_end+0xfc00fa04>
    fa4c:	9088703a 	and	r4,r18,r2
    fa50:	203e8d1e 	bne	r4,zero,f488 <__alt_data_end+0xfc00f488>
    fa54:	dc401f17 	ldw	r17,124(sp)
    fa58:	40800115 	stw	r2,4(r8)
    fa5c:	44000015 	stw	r16,0(r8)
    fa60:	8c400044 	addi	r17,r17,1
    fa64:	d8c02015 	stw	r3,128(sp)
    fa68:	dc401f15 	stw	r17,124(sp)
    fa6c:	008001c4 	movi	r2,7
    fa70:	147f7f16 	blt	r2,r17,f870 <__alt_data_end+0xfc00f870>
    fa74:	45800204 	addi	r22,r8,8
    fa78:	003eac06 	br	f52c <__alt_data_end+0xfc00f52c>
    fa7c:	d9402d17 	ldw	r5,180(sp)
    fa80:	d9801e04 	addi	r6,sp,120
    fa84:	9809883a 	mov	r4,r19
    fa88:	00173980 	call	17398 <__ssprint_r>
    fa8c:	103b501e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    fa90:	d8c02017 	ldw	r3,128(sp)
    fa94:	dc401f17 	ldw	r17,124(sp)
    fa98:	da000404 	addi	r8,sp,16
    fa9c:	003e8406 	br	f4b0 <__alt_data_end+0xfc00f4b0>
    faa0:	d9402d17 	ldw	r5,180(sp)
    faa4:	d9801e04 	addi	r6,sp,120
    faa8:	9809883a 	mov	r4,r19
    faac:	00173980 	call	17398 <__ssprint_r>
    fab0:	103b471e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    fab4:	d8c02017 	ldw	r3,128(sp)
    fab8:	dc401f17 	ldw	r17,124(sp)
    fabc:	dd800404 	addi	r22,sp,16
    fac0:	003e8606 	br	f4dc <__alt_data_end+0xfc00f4dc>
    fac4:	0029883a 	mov	r20,zero
    fac8:	a5000c04 	addi	r20,r20,48
    facc:	dc001dc4 	addi	r16,sp,119
    fad0:	dd001dc5 	stb	r20,119(sp)
    fad4:	003f3806 	br	f7b8 <__alt_data_end+0xfc00f7b8>
    fad8:	d9402d17 	ldw	r5,180(sp)
    fadc:	d9801e04 	addi	r6,sp,120
    fae0:	9809883a 	mov	r4,r19
    fae4:	00173980 	call	17398 <__ssprint_r>
    fae8:	103b391e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    faec:	d8c02017 	ldw	r3,128(sp)
    faf0:	da000404 	addi	r8,sp,16
    faf4:	003c7306 	br	ecc4 <__alt_data_end+0xfc00ecc4>
    faf8:	d9003617 	ldw	r4,216(sp)
    fafc:	d9403717 	ldw	r5,220(sp)
    fb00:	da003e15 	stw	r8,248(sp)
    fb04:	00171e80 	call	171e8 <__fpclassifyd>
    fb08:	da003e17 	ldw	r8,248(sp)
    fb0c:	1000bd1e 	bne	r2,zero,fe04 <___svfprintf_internal_r+0x19d0>
    fb10:	008011c4 	movi	r2,71
    fb14:	14411e0e 	bge	r2,r17,ff90 <___svfprintf_internal_r+0x1b5c>
    fb18:	040000f4 	movhi	r16,3
    fb1c:	84257204 	addi	r16,r16,-27192
    fb20:	00c000c4 	movi	r3,3
    fb24:	00bfdfc4 	movi	r2,-129
    fb28:	d8c02915 	stw	r3,164(sp)
    fb2c:	90a4703a 	and	r18,r18,r2
    fb30:	df002783 	ldbu	fp,158(sp)
    fb34:	d8c02b15 	stw	r3,172(sp)
    fb38:	d8002a15 	stw	zero,168(sp)
    fb3c:	d8003215 	stw	zero,200(sp)
    fb40:	003bfa06 	br	eb2c <__alt_data_end+0xfc00eb2c>
    fb44:	9080100c 	andi	r2,r18,64
    fb48:	d8002785 	stb	zero,158(sp)
    fb4c:	10009426 	beq	r2,zero,fda0 <___svfprintf_internal_r+0x196c>
    fb50:	d9402e17 	ldw	r5,184(sp)
    fb54:	d8c02a17 	ldw	r3,168(sp)
    fb58:	002d883a 	mov	r22,zero
    fb5c:	28800104 	addi	r2,r5,4
    fb60:	2d00000b 	ldhu	r20,0(r5)
    fb64:	183ec10e 	bge	r3,zero,f66c <__alt_data_end+0xfc00f66c>
    fb68:	a586b03a 	or	r3,r20,r22
    fb6c:	d8802e15 	stw	r2,184(sp)
    fb70:	183ec21e 	bne	r3,zero,f67c <__alt_data_end+0xfc00f67c>
    fb74:	0039883a 	mov	fp,zero
    fb78:	0005883a 	mov	r2,zero
    fb7c:	003db806 	br	f260 <__alt_data_end+0xfc00f260>
    fb80:	d8c02e17 	ldw	r3,184(sp)
    fb84:	d9002e17 	ldw	r4,184(sp)
    fb88:	d9402e17 	ldw	r5,184(sp)
    fb8c:	18c00017 	ldw	r3,0(r3)
    fb90:	21000117 	ldw	r4,4(r4)
    fb94:	29400204 	addi	r5,r5,8
    fb98:	d8c03615 	stw	r3,216(sp)
    fb9c:	d9003715 	stw	r4,220(sp)
    fba0:	d9402e15 	stw	r5,184(sp)
    fba4:	003b5a06 	br	e910 <__alt_data_end+0xfc00e910>
    fba8:	9080100c 	andi	r2,r18,64
    fbac:	10010726 	beq	r2,zero,ffcc <___svfprintf_internal_r+0x1b98>
    fbb0:	d8802e17 	ldw	r2,184(sp)
    fbb4:	1500000f 	ldh	r20,0(r2)
    fbb8:	10800104 	addi	r2,r2,4
    fbbc:	d8802e15 	stw	r2,184(sp)
    fbc0:	a02dd7fa 	srai	r22,r20,31
    fbc4:	b005883a 	mov	r2,r22
    fbc8:	003b7d06 	br	e9c0 <__alt_data_end+0xfc00e9c0>
    fbcc:	9080100c 	andi	r2,r18,64
    fbd0:	10010526 	beq	r2,zero,ffe8 <___svfprintf_internal_r+0x1bb4>
    fbd4:	d8c02e17 	ldw	r3,184(sp)
    fbd8:	002d883a 	mov	r22,zero
    fbdc:	1d00000b 	ldhu	r20,0(r3)
    fbe0:	18c00104 	addi	r3,r3,4
    fbe4:	d8c02e15 	stw	r3,184(sp)
    fbe8:	003ce206 	br	ef74 <__alt_data_end+0xfc00ef74>
    fbec:	bc400007 	ldb	r17,0(r23)
    fbf0:	003a6506 	br	e588 <__alt_data_end+0xfc00e588>
    fbf4:	9080040c 	andi	r2,r18,16
    fbf8:	10010126 	beq	r2,zero,10000 <___svfprintf_internal_r+0x1bcc>
    fbfc:	d8c02e17 	ldw	r3,184(sp)
    fc00:	d9002f17 	ldw	r4,188(sp)
    fc04:	18800017 	ldw	r2,0(r3)
    fc08:	18c00104 	addi	r3,r3,4
    fc0c:	d8c02e15 	stw	r3,184(sp)
    fc10:	11000015 	stw	r4,0(r2)
    fc14:	003a3206 	br	e4e0 <__alt_data_end+0xfc00e4e0>
    fc18:	d9002a17 	ldw	r4,168(sp)
    fc1c:	d8002785 	stb	zero,158(sp)
    fc20:	203d8d16 	blt	r4,zero,f258 <__alt_data_end+0xfc00f258>
    fc24:	00bfdfc4 	movi	r2,-129
    fc28:	90a4703a 	and	r18,r18,r2
    fc2c:	003ad506 	br	e784 <__alt_data_end+0xfc00e784>
    fc30:	014000f4 	movhi	r5,3
    fc34:	29657f84 	addi	r5,r5,-27138
    fc38:	d9402c15 	stw	r5,176(sp)
    fc3c:	d9402c17 	ldw	r5,176(sp)
    fc40:	1c47883a 	add	r3,r3,r17
    fc44:	10800044 	addi	r2,r2,1
    fc48:	41400015 	stw	r5,0(r8)
    fc4c:	44400115 	stw	r17,4(r8)
    fc50:	d8c02015 	stw	r3,128(sp)
    fc54:	d8801f15 	stw	r2,124(sp)
    fc58:	010001c4 	movi	r4,7
    fc5c:	20bf3016 	blt	r4,r2,f920 <__alt_data_end+0xfc00f920>
    fc60:	42000204 	addi	r8,r8,8
    fc64:	003f3506 	br	f93c <__alt_data_end+0xfc00f93c>
    fc68:	010000f4 	movhi	r4,3
    fc6c:	21257f84 	addi	r4,r4,-27138
    fc70:	d9002c15 	stw	r4,176(sp)
    fc74:	003c3c06 	br	ed68 <__alt_data_end+0xfc00ed68>
    fc78:	d9402d17 	ldw	r5,180(sp)
    fc7c:	d9801e04 	addi	r6,sp,120
    fc80:	9809883a 	mov	r4,r19
    fc84:	00173980 	call	17398 <__ssprint_r>
    fc88:	103ad11e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    fc8c:	d8c02017 	ldw	r3,128(sp)
    fc90:	da000404 	addi	r8,sp,16
    fc94:	003d9306 	br	f2e4 <__alt_data_end+0xfc00f2e4>
    fc98:	d8801f17 	ldw	r2,124(sp)
    fc9c:	014000f4 	movhi	r5,3
    fca0:	01000044 	movi	r4,1
    fca4:	18c00044 	addi	r3,r3,1
    fca8:	10800044 	addi	r2,r2,1
    fcac:	29657f04 	addi	r5,r5,-27140
    fcb0:	41000115 	stw	r4,4(r8)
    fcb4:	41400015 	stw	r5,0(r8)
    fcb8:	d8c02015 	stw	r3,128(sp)
    fcbc:	d8801f15 	stw	r2,124(sp)
    fcc0:	010001c4 	movi	r4,7
    fcc4:	2080b516 	blt	r4,r2,ff9c <___svfprintf_internal_r+0x1b68>
    fcc8:	42000204 	addi	r8,r8,8
    fccc:	8800041e 	bne	r17,zero,fce0 <___svfprintf_internal_r+0x18ac>
    fcd0:	d8803317 	ldw	r2,204(sp)
    fcd4:	1000021e 	bne	r2,zero,fce0 <___svfprintf_internal_r+0x18ac>
    fcd8:	9080004c 	andi	r2,r18,1
    fcdc:	103c3926 	beq	r2,zero,edc4 <__alt_data_end+0xfc00edc4>
    fce0:	d9003817 	ldw	r4,224(sp)
    fce4:	d8801f17 	ldw	r2,124(sp)
    fce8:	d9403417 	ldw	r5,208(sp)
    fcec:	20c7883a 	add	r3,r4,r3
    fcf0:	10800044 	addi	r2,r2,1
    fcf4:	41000115 	stw	r4,4(r8)
    fcf8:	41400015 	stw	r5,0(r8)
    fcfc:	d8c02015 	stw	r3,128(sp)
    fd00:	d8801f15 	stw	r2,124(sp)
    fd04:	010001c4 	movi	r4,7
    fd08:	20818016 	blt	r4,r2,1030c <___svfprintf_internal_r+0x1ed8>
    fd0c:	42000204 	addi	r8,r8,8
    fd10:	0463c83a 	sub	r17,zero,r17
    fd14:	0440cb0e 	bge	zero,r17,10044 <___svfprintf_internal_r+0x1c10>
    fd18:	05800404 	movi	r22,16
    fd1c:	b440e80e 	bge	r22,r17,100c0 <___svfprintf_internal_r+0x1c8c>
    fd20:	014000f4 	movhi	r5,3
    fd24:	29657f84 	addi	r5,r5,-27138
    fd28:	d9402c15 	stw	r5,176(sp)
    fd2c:	070001c4 	movi	fp,7
    fd30:	dd002d17 	ldw	r20,180(sp)
    fd34:	00000306 	br	fd44 <___svfprintf_internal_r+0x1910>
    fd38:	42000204 	addi	r8,r8,8
    fd3c:	8c7ffc04 	addi	r17,r17,-16
    fd40:	b440e20e 	bge	r22,r17,100cc <___svfprintf_internal_r+0x1c98>
    fd44:	18c00404 	addi	r3,r3,16
    fd48:	10800044 	addi	r2,r2,1
    fd4c:	45400015 	stw	r21,0(r8)
    fd50:	45800115 	stw	r22,4(r8)
    fd54:	d8c02015 	stw	r3,128(sp)
    fd58:	d8801f15 	stw	r2,124(sp)
    fd5c:	e0bff60e 	bge	fp,r2,fd38 <__alt_data_end+0xfc00fd38>
    fd60:	d9801e04 	addi	r6,sp,120
    fd64:	a00b883a 	mov	r5,r20
    fd68:	9809883a 	mov	r4,r19
    fd6c:	00173980 	call	17398 <__ssprint_r>
    fd70:	103a971e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    fd74:	d8c02017 	ldw	r3,128(sp)
    fd78:	d8801f17 	ldw	r2,124(sp)
    fd7c:	da000404 	addi	r8,sp,16
    fd80:	003fee06 	br	fd3c <__alt_data_end+0xfc00fd3c>
    fd84:	d9002e17 	ldw	r4,184(sp)
    fd88:	d9402a17 	ldw	r5,168(sp)
    fd8c:	002d883a 	mov	r22,zero
    fd90:	20800104 	addi	r2,r4,4
    fd94:	25000017 	ldw	r20,0(r4)
    fd98:	283e7d0e 	bge	r5,zero,f790 <__alt_data_end+0xfc00f790>
    fd9c:	003eda06 	br	f908 <__alt_data_end+0xfc00f908>
    fda0:	d9002e17 	ldw	r4,184(sp)
    fda4:	d9402a17 	ldw	r5,168(sp)
    fda8:	002d883a 	mov	r22,zero
    fdac:	20800104 	addi	r2,r4,4
    fdb0:	25000017 	ldw	r20,0(r4)
    fdb4:	283e2d0e 	bge	r5,zero,f66c <__alt_data_end+0xfc00f66c>
    fdb8:	003f6b06 	br	fb68 <__alt_data_end+0xfc00fb68>
    fdbc:	d8c02e15 	stw	r3,184(sp)
    fdc0:	0039883a 	mov	fp,zero
    fdc4:	003ed206 	br	f910 <__alt_data_end+0xfc00f910>
    fdc8:	bc400043 	ldbu	r17,1(r23)
    fdcc:	84000814 	ori	r16,r16,32
    fdd0:	bdc00044 	addi	r23,r23,1
    fdd4:	8c403fcc 	andi	r17,r17,255
    fdd8:	8c40201c 	xori	r17,r17,128
    fddc:	8c7fe004 	addi	r17,r17,-128
    fde0:	0039e906 	br	e588 <__alt_data_end+0xfc00e588>
    fde4:	d9402d17 	ldw	r5,180(sp)
    fde8:	d9801e04 	addi	r6,sp,120
    fdec:	9809883a 	mov	r4,r19
    fdf0:	00173980 	call	17398 <__ssprint_r>
    fdf4:	103a761e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    fdf8:	d8c02017 	ldw	r3,128(sp)
    fdfc:	da000404 	addi	r8,sp,16
    fe00:	003d4a06 	br	f32c <__alt_data_end+0xfc00f32c>
    fe04:	d9002a17 	ldw	r4,168(sp)
    fe08:	05bff7c4 	movi	r22,-33
    fe0c:	00bfffc4 	movi	r2,-1
    fe10:	8dac703a 	and	r22,r17,r22
    fe14:	20806a26 	beq	r4,r2,ffc0 <___svfprintf_internal_r+0x1b8c>
    fe18:	008011c4 	movi	r2,71
    fe1c:	b0813726 	beq	r22,r2,102fc <___svfprintf_internal_r+0x1ec8>
    fe20:	d9003717 	ldw	r4,220(sp)
    fe24:	90c04014 	ori	r3,r18,256
    fe28:	d8c02c15 	stw	r3,176(sp)
    fe2c:	20015d16 	blt	r4,zero,103a4 <___svfprintf_internal_r+0x1f70>
    fe30:	dd003717 	ldw	r20,220(sp)
    fe34:	d8002905 	stb	zero,164(sp)
    fe38:	00801984 	movi	r2,102
    fe3c:	88814026 	beq	r17,r2,10340 <___svfprintf_internal_r+0x1f0c>
    fe40:	00801184 	movi	r2,70
    fe44:	88817126 	beq	r17,r2,1040c <___svfprintf_internal_r+0x1fd8>
    fe48:	00801144 	movi	r2,69
    fe4c:	b0816226 	beq	r22,r2,103d8 <___svfprintf_internal_r+0x1fa4>
    fe50:	d8c02a17 	ldw	r3,168(sp)
    fe54:	d8802104 	addi	r2,sp,132
    fe58:	d8800315 	stw	r2,12(sp)
    fe5c:	d9403617 	ldw	r5,216(sp)
    fe60:	d8802504 	addi	r2,sp,148
    fe64:	d8800215 	stw	r2,8(sp)
    fe68:	d8802604 	addi	r2,sp,152
    fe6c:	d8c00015 	stw	r3,0(sp)
    fe70:	d8800115 	stw	r2,4(sp)
    fe74:	01c00084 	movi	r7,2
    fe78:	a00d883a 	mov	r6,r20
    fe7c:	9809883a 	mov	r4,r19
    fe80:	d8c03d15 	stw	r3,244(sp)
    fe84:	da003e15 	stw	r8,248(sp)
    fe88:	0012e280 	call	12e28 <_dtoa_r>
    fe8c:	1021883a 	mov	r16,r2
    fe90:	008019c4 	movi	r2,103
    fe94:	d8c03d17 	ldw	r3,244(sp)
    fe98:	da003e17 	ldw	r8,248(sp)
    fe9c:	8880e726 	beq	r17,r2,1023c <___svfprintf_internal_r+0x1e08>
    fea0:	008011c4 	movi	r2,71
    fea4:	8880d426 	beq	r17,r2,101f8 <___svfprintf_internal_r+0x1dc4>
    fea8:	80f9883a 	add	fp,r16,r3
    feac:	d9003617 	ldw	r4,216(sp)
    feb0:	000d883a 	mov	r6,zero
    feb4:	000f883a 	mov	r7,zero
    feb8:	a00b883a 	mov	r5,r20
    febc:	da003e15 	stw	r8,248(sp)
    fec0:	001c7880 	call	1c788 <__eqdf2>
    fec4:	da003e17 	ldw	r8,248(sp)
    fec8:	1000e426 	beq	r2,zero,1025c <___svfprintf_internal_r+0x1e28>
    fecc:	d8802117 	ldw	r2,132(sp)
    fed0:	1700062e 	bgeu	r2,fp,feec <___svfprintf_internal_r+0x1ab8>
    fed4:	01000c04 	movi	r4,48
    fed8:	10c00044 	addi	r3,r2,1
    fedc:	d8c02115 	stw	r3,132(sp)
    fee0:	11000005 	stb	r4,0(r2)
    fee4:	d8802117 	ldw	r2,132(sp)
    fee8:	173ffb36 	bltu	r2,fp,fed8 <__alt_data_end+0xfc00fed8>
    feec:	1405c83a 	sub	r2,r2,r16
    fef0:	d8803315 	stw	r2,204(sp)
    fef4:	008011c4 	movi	r2,71
    fef8:	b080c526 	beq	r22,r2,10210 <___svfprintf_internal_r+0x1ddc>
    fefc:	00801944 	movi	r2,101
    ff00:	1441d80e 	bge	r2,r17,10664 <___svfprintf_internal_r+0x2230>
    ff04:	d8c02617 	ldw	r3,152(sp)
    ff08:	00801984 	movi	r2,102
    ff0c:	d8c03215 	stw	r3,200(sp)
    ff10:	88813426 	beq	r17,r2,103e4 <___svfprintf_internal_r+0x1fb0>
    ff14:	d8c03217 	ldw	r3,200(sp)
    ff18:	d9003317 	ldw	r4,204(sp)
    ff1c:	19012516 	blt	r3,r4,103b4 <___svfprintf_internal_r+0x1f80>
    ff20:	9480004c 	andi	r18,r18,1
    ff24:	9001841e 	bne	r18,zero,10538 <___svfprintf_internal_r+0x2104>
    ff28:	1805883a 	mov	r2,r3
    ff2c:	1801cb16 	blt	r3,zero,1065c <___svfprintf_internal_r+0x2228>
    ff30:	d8c03217 	ldw	r3,200(sp)
    ff34:	044019c4 	movi	r17,103
    ff38:	d8c02b15 	stw	r3,172(sp)
    ff3c:	df002907 	ldb	fp,164(sp)
    ff40:	e000a61e 	bne	fp,zero,101dc <___svfprintf_internal_r+0x1da8>
    ff44:	df002783 	ldbu	fp,158(sp)
    ff48:	d8802915 	stw	r2,164(sp)
    ff4c:	dc802c17 	ldw	r18,176(sp)
    ff50:	d8002a15 	stw	zero,168(sp)
    ff54:	003af506 	br	eb2c <__alt_data_end+0xfc00eb2c>
    ff58:	040000f4 	movhi	r16,3
    ff5c:	84256f04 	addi	r16,r16,-27204
    ff60:	003a7e06 	br	e95c <__alt_data_end+0xfc00e95c>
    ff64:	d9003917 	ldw	r4,228(sp)
    ff68:	04001004 	movi	r16,64
    ff6c:	800b883a 	mov	r5,r16
    ff70:	000d2c80 	call	d2c8 <_malloc_r>
    ff74:	d9002d17 	ldw	r4,180(sp)
    ff78:	20800015 	stw	r2,0(r4)
    ff7c:	20800415 	stw	r2,16(r4)
    ff80:	1001d026 	beq	r2,zero,106c4 <___svfprintf_internal_r+0x2290>
    ff84:	d8802d17 	ldw	r2,180(sp)
    ff88:	14000515 	stw	r16,20(r2)
    ff8c:	00394406 	br	e4a0 <__alt_data_end+0xfc00e4a0>
    ff90:	040000f4 	movhi	r16,3
    ff94:	84257104 	addi	r16,r16,-27196
    ff98:	003ee106 	br	fb20 <__alt_data_end+0xfc00fb20>
    ff9c:	d9402d17 	ldw	r5,180(sp)
    ffa0:	d9801e04 	addi	r6,sp,120
    ffa4:	9809883a 	mov	r4,r19
    ffa8:	00173980 	call	17398 <__ssprint_r>
    ffac:	103a081e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
    ffb0:	dc402617 	ldw	r17,152(sp)
    ffb4:	d8c02017 	ldw	r3,128(sp)
    ffb8:	da000404 	addi	r8,sp,16
    ffbc:	003f4306 	br	fccc <__alt_data_end+0xfc00fccc>
    ffc0:	01400184 	movi	r5,6
    ffc4:	d9402a15 	stw	r5,168(sp)
    ffc8:	003f9506 	br	fe20 <__alt_data_end+0xfc00fe20>
    ffcc:	d8c02e17 	ldw	r3,184(sp)
    ffd0:	1d000017 	ldw	r20,0(r3)
    ffd4:	18c00104 	addi	r3,r3,4
    ffd8:	d8c02e15 	stw	r3,184(sp)
    ffdc:	a02dd7fa 	srai	r22,r20,31
    ffe0:	b005883a 	mov	r2,r22
    ffe4:	003a7606 	br	e9c0 <__alt_data_end+0xfc00e9c0>
    ffe8:	d9002e17 	ldw	r4,184(sp)
    ffec:	002d883a 	mov	r22,zero
    fff0:	25000017 	ldw	r20,0(r4)
    fff4:	21000104 	addi	r4,r4,4
    fff8:	d9002e15 	stw	r4,184(sp)
    fffc:	003bdd06 	br	ef74 <__alt_data_end+0xfc00ef74>
   10000:	9480100c 	andi	r18,r18,64
   10004:	90006e26 	beq	r18,zero,101c0 <___svfprintf_internal_r+0x1d8c>
   10008:	d9402e17 	ldw	r5,184(sp)
   1000c:	d8c02f17 	ldw	r3,188(sp)
   10010:	28800017 	ldw	r2,0(r5)
   10014:	29400104 	addi	r5,r5,4
   10018:	d9402e15 	stw	r5,184(sp)
   1001c:	10c0000d 	sth	r3,0(r2)
   10020:	00392f06 	br	e4e0 <__alt_data_end+0xfc00e4e0>
   10024:	d9402d17 	ldw	r5,180(sp)
   10028:	d9801e04 	addi	r6,sp,120
   1002c:	9809883a 	mov	r4,r19
   10030:	00173980 	call	17398 <__ssprint_r>
   10034:	1039e61e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
   10038:	d8c02017 	ldw	r3,128(sp)
   1003c:	d8801f17 	ldw	r2,124(sp)
   10040:	da000404 	addi	r8,sp,16
   10044:	d9403317 	ldw	r5,204(sp)
   10048:	10800044 	addi	r2,r2,1
   1004c:	44000015 	stw	r16,0(r8)
   10050:	28c7883a 	add	r3,r5,r3
   10054:	003b5506 	br	edac <__alt_data_end+0xfc00edac>
   10058:	8009883a 	mov	r4,r16
   1005c:	df003e15 	stw	fp,248(sp)
   10060:	000e39c0 	call	e39c <strlen>
   10064:	d8802b15 	stw	r2,172(sp)
   10068:	da003e17 	ldw	r8,248(sp)
   1006c:	103c160e 	bge	r2,zero,f0c8 <__alt_data_end+0xfc00f0c8>
   10070:	0005883a 	mov	r2,zero
   10074:	003c1406 	br	f0c8 <__alt_data_end+0xfc00f0c8>
   10078:	00bfffc4 	movi	r2,-1
   1007c:	0039d906 	br	e7e4 <__alt_data_end+0xfc00e7e4>
   10080:	010000f4 	movhi	r4,3
   10084:	21258384 	addi	r4,r4,-27122
   10088:	d9003515 	stw	r4,212(sp)
   1008c:	003ae406 	br	ec20 <__alt_data_end+0xfc00ec20>
   10090:	013fffc4 	movi	r4,-1
   10094:	0039fa06 	br	e880 <__alt_data_end+0xfc00e880>
   10098:	d9402d17 	ldw	r5,180(sp)
   1009c:	d9801e04 	addi	r6,sp,120
   100a0:	9809883a 	mov	r4,r19
   100a4:	00173980 	call	17398 <__ssprint_r>
   100a8:	1039c91e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
   100ac:	d8c02017 	ldw	r3,128(sp)
   100b0:	da000404 	addi	r8,sp,16
   100b4:	003d8406 	br	f6c8 <__alt_data_end+0xfc00f6c8>
   100b8:	0023883a 	mov	r17,zero
   100bc:	003d8306 	br	f6cc <__alt_data_end+0xfc00f6cc>
   100c0:	010000f4 	movhi	r4,3
   100c4:	21257f84 	addi	r4,r4,-27138
   100c8:	d9002c15 	stw	r4,176(sp)
   100cc:	d9002c17 	ldw	r4,176(sp)
   100d0:	1c47883a 	add	r3,r3,r17
   100d4:	10800044 	addi	r2,r2,1
   100d8:	41000015 	stw	r4,0(r8)
   100dc:	44400115 	stw	r17,4(r8)
   100e0:	d8c02015 	stw	r3,128(sp)
   100e4:	d8801f15 	stw	r2,124(sp)
   100e8:	010001c4 	movi	r4,7
   100ec:	20bfcd16 	blt	r4,r2,10024 <__alt_data_end+0xfc010024>
   100f0:	42000204 	addi	r8,r8,8
   100f4:	003fd306 	br	10044 <__alt_data_end+0xfc010044>
   100f8:	d9402d17 	ldw	r5,180(sp)
   100fc:	d9801e04 	addi	r6,sp,120
   10100:	9809883a 	mov	r4,r19
   10104:	00173980 	call	17398 <__ssprint_r>
   10108:	1039b11e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
   1010c:	d8802617 	ldw	r2,152(sp)
   10110:	d8c02017 	ldw	r3,128(sp)
   10114:	da000404 	addi	r8,sp,16
   10118:	003e1c06 	br	f98c <__alt_data_end+0xfc00f98c>
   1011c:	d8802a17 	ldw	r2,168(sp)
   10120:	00c00184 	movi	r3,6
   10124:	1880012e 	bgeu	r3,r2,1012c <___svfprintf_internal_r+0x1cf8>
   10128:	1805883a 	mov	r2,r3
   1012c:	d8802b15 	stw	r2,172(sp)
   10130:	1000f316 	blt	r2,zero,10500 <___svfprintf_internal_r+0x20cc>
   10134:	040000f4 	movhi	r16,3
   10138:	d8802915 	stw	r2,164(sp)
   1013c:	dd002e15 	stw	r20,184(sp)
   10140:	d8002a15 	stw	zero,168(sp)
   10144:	d8003215 	stw	zero,200(sp)
   10148:	84257d04 	addi	r16,r16,-27148
   1014c:	0039883a 	mov	fp,zero
   10150:	003a7d06 	br	eb48 <__alt_data_end+0xfc00eb48>
   10154:	010000f4 	movhi	r4,3
   10158:	21258384 	addi	r4,r4,-27122
   1015c:	d9003515 	stw	r4,212(sp)
   10160:	003b3d06 	br	ee58 <__alt_data_end+0xfc00ee58>
   10164:	d9402d17 	ldw	r5,180(sp)
   10168:	d9801e04 	addi	r6,sp,120
   1016c:	9809883a 	mov	r4,r19
   10170:	00173980 	call	17398 <__ssprint_r>
   10174:	1039961e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
   10178:	d8802617 	ldw	r2,152(sp)
   1017c:	d9403317 	ldw	r5,204(sp)
   10180:	d8c02017 	ldw	r3,128(sp)
   10184:	da000404 	addi	r8,sp,16
   10188:	2885c83a 	sub	r2,r5,r2
   1018c:	003e1006 	br	f9d0 <__alt_data_end+0xfc00f9d0>
   10190:	00800044 	movi	r2,1
   10194:	10803fcc 	andi	r2,r2,255
   10198:	00c00044 	movi	r3,1
   1019c:	10fa1026 	beq	r2,r3,e9e0 <__alt_data_end+0xfc00e9e0>
   101a0:	00c00084 	movi	r3,2
   101a4:	10fb8226 	beq	r2,r3,efb0 <__alt_data_end+0xfc00efb0>
   101a8:	003a4206 	br	eab4 <__alt_data_end+0xfc00eab4>
   101ac:	0021883a 	mov	r16,zero
   101b0:	003e0806 	br	f9d4 <__alt_data_end+0xfc00f9d4>
   101b4:	07000b44 	movi	fp,45
   101b8:	df002785 	stb	fp,158(sp)
   101bc:	0039e306 	br	e94c <__alt_data_end+0xfc00e94c>
   101c0:	d9002e17 	ldw	r4,184(sp)
   101c4:	d9402f17 	ldw	r5,188(sp)
   101c8:	20800017 	ldw	r2,0(r4)
   101cc:	21000104 	addi	r4,r4,4
   101d0:	d9002e15 	stw	r4,184(sp)
   101d4:	11400015 	stw	r5,0(r2)
   101d8:	0038c106 	br	e4e0 <__alt_data_end+0xfc00e4e0>
   101dc:	00c00b44 	movi	r3,45
   101e0:	d8c02785 	stb	r3,158(sp)
   101e4:	d8802915 	stw	r2,164(sp)
   101e8:	dc802c17 	ldw	r18,176(sp)
   101ec:	d8002a15 	stw	zero,168(sp)
   101f0:	07000b44 	movi	fp,45
   101f4:	003a5106 	br	eb3c <__alt_data_end+0xfc00eb3c>
   101f8:	9080004c 	andi	r2,r18,1
   101fc:	1000941e 	bne	r2,zero,10450 <___svfprintf_internal_r+0x201c>
   10200:	d8802117 	ldw	r2,132(sp)
   10204:	1405c83a 	sub	r2,r2,r16
   10208:	d8803315 	stw	r2,204(sp)
   1020c:	b441151e 	bne	r22,r17,10664 <___svfprintf_internal_r+0x2230>
   10210:	dd802617 	ldw	r22,152(sp)
   10214:	00bfff44 	movi	r2,-3
   10218:	b0801a16 	blt	r22,r2,10284 <___svfprintf_internal_r+0x1e50>
   1021c:	d9402a17 	ldw	r5,168(sp)
   10220:	2d801816 	blt	r5,r22,10284 <___svfprintf_internal_r+0x1e50>
   10224:	dd803215 	stw	r22,200(sp)
   10228:	003f3a06 	br	ff14 <__alt_data_end+0xfc00ff14>
   1022c:	1025883a 	mov	r18,r2
   10230:	0039883a 	mov	fp,zero
   10234:	00800084 	movi	r2,2
   10238:	003fd606 	br	10194 <__alt_data_end+0xfc010194>
   1023c:	9080004c 	andi	r2,r18,1
   10240:	103f191e 	bne	r2,zero,fea8 <__alt_data_end+0xfc00fea8>
   10244:	d8802117 	ldw	r2,132(sp)
   10248:	003f2806 	br	feec <__alt_data_end+0xfc00feec>
   1024c:	010000f4 	movhi	r4,3
   10250:	21257f84 	addi	r4,r4,-27138
   10254:	d9002c15 	stw	r4,176(sp)
   10258:	003c7c06 	br	f44c <__alt_data_end+0xfc00f44c>
   1025c:	e005883a 	mov	r2,fp
   10260:	003f2206 	br	feec <__alt_data_end+0xfc00feec>
   10264:	d9002a17 	ldw	r4,168(sp)
   10268:	df002783 	ldbu	fp,158(sp)
   1026c:	dd002e15 	stw	r20,184(sp)
   10270:	d9002915 	stw	r4,164(sp)
   10274:	d9002b15 	stw	r4,172(sp)
   10278:	d8002a15 	stw	zero,168(sp)
   1027c:	d8003215 	stw	zero,200(sp)
   10280:	003a2a06 	br	eb2c <__alt_data_end+0xfc00eb2c>
   10284:	8c7fff84 	addi	r17,r17,-2
   10288:	b5bfffc4 	addi	r22,r22,-1
   1028c:	dd802615 	stw	r22,152(sp)
   10290:	dc4022c5 	stb	r17,139(sp)
   10294:	b000c316 	blt	r22,zero,105a4 <___svfprintf_internal_r+0x2170>
   10298:	00800ac4 	movi	r2,43
   1029c:	d8802305 	stb	r2,140(sp)
   102a0:	00800244 	movi	r2,9
   102a4:	15806e16 	blt	r2,r22,10460 <___svfprintf_internal_r+0x202c>
   102a8:	00800c04 	movi	r2,48
   102ac:	b5800c04 	addi	r22,r22,48
   102b0:	d8802345 	stb	r2,141(sp)
   102b4:	dd802385 	stb	r22,142(sp)
   102b8:	d88023c4 	addi	r2,sp,143
   102bc:	df0022c4 	addi	fp,sp,139
   102c0:	d8c03317 	ldw	r3,204(sp)
   102c4:	1739c83a 	sub	fp,r2,fp
   102c8:	d9003317 	ldw	r4,204(sp)
   102cc:	e0c7883a 	add	r3,fp,r3
   102d0:	df003b15 	stw	fp,236(sp)
   102d4:	d8c02b15 	stw	r3,172(sp)
   102d8:	00800044 	movi	r2,1
   102dc:	1100b70e 	bge	r2,r4,105bc <___svfprintf_internal_r+0x2188>
   102e0:	d8c02b17 	ldw	r3,172(sp)
   102e4:	18c00044 	addi	r3,r3,1
   102e8:	d8c02b15 	stw	r3,172(sp)
   102ec:	1805883a 	mov	r2,r3
   102f0:	1800b016 	blt	r3,zero,105b4 <___svfprintf_internal_r+0x2180>
   102f4:	d8003215 	stw	zero,200(sp)
   102f8:	003f1006 	br	ff3c <__alt_data_end+0xfc00ff3c>
   102fc:	d8802a17 	ldw	r2,168(sp)
   10300:	103ec71e 	bne	r2,zero,fe20 <__alt_data_end+0xfc00fe20>
   10304:	dc002a15 	stw	r16,168(sp)
   10308:	003ec506 	br	fe20 <__alt_data_end+0xfc00fe20>
   1030c:	d9402d17 	ldw	r5,180(sp)
   10310:	d9801e04 	addi	r6,sp,120
   10314:	9809883a 	mov	r4,r19
   10318:	00173980 	call	17398 <__ssprint_r>
   1031c:	10392c1e 	bne	r2,zero,e7d0 <__alt_data_end+0xfc00e7d0>
   10320:	dc402617 	ldw	r17,152(sp)
   10324:	d8c02017 	ldw	r3,128(sp)
   10328:	d8801f17 	ldw	r2,124(sp)
   1032c:	da000404 	addi	r8,sp,16
   10330:	003e7706 	br	fd10 <__alt_data_end+0xfc00fd10>
   10334:	182f883a 	mov	r23,r3
   10338:	d8002a15 	stw	zero,168(sp)
   1033c:	00389306 	br	e58c <__alt_data_end+0xfc00e58c>
   10340:	d8c02a17 	ldw	r3,168(sp)
   10344:	d8802104 	addi	r2,sp,132
   10348:	d8800315 	stw	r2,12(sp)
   1034c:	d9403617 	ldw	r5,216(sp)
   10350:	d8802504 	addi	r2,sp,148
   10354:	d8800215 	stw	r2,8(sp)
   10358:	d8802604 	addi	r2,sp,152
   1035c:	d8c00015 	stw	r3,0(sp)
   10360:	9809883a 	mov	r4,r19
   10364:	d8800115 	stw	r2,4(sp)
   10368:	01c000c4 	movi	r7,3
   1036c:	a00d883a 	mov	r6,r20
   10370:	da003e15 	stw	r8,248(sp)
   10374:	0012e280 	call	12e28 <_dtoa_r>
   10378:	d9002a17 	ldw	r4,168(sp)
   1037c:	da003e17 	ldw	r8,248(sp)
   10380:	1021883a 	mov	r16,r2
   10384:	1139883a 	add	fp,r2,r4
   10388:	2007883a 	mov	r3,r4
   1038c:	81000007 	ldb	r4,0(r16)
   10390:	00800c04 	movi	r2,48
   10394:	20806f26 	beq	r4,r2,10554 <___svfprintf_internal_r+0x2120>
   10398:	d8c02617 	ldw	r3,152(sp)
   1039c:	e0f9883a 	add	fp,fp,r3
   103a0:	003ec206 	br	feac <__alt_data_end+0xfc00feac>
   103a4:	00c00b44 	movi	r3,45
   103a8:	2520003c 	xorhi	r20,r4,32768
   103ac:	d8c02905 	stb	r3,164(sp)
   103b0:	003ea106 	br	fe38 <__alt_data_end+0xfc00fe38>
   103b4:	d8c03217 	ldw	r3,200(sp)
   103b8:	00c0890e 	bge	zero,r3,105e0 <___svfprintf_internal_r+0x21ac>
   103bc:	00800044 	movi	r2,1
   103c0:	d9003317 	ldw	r4,204(sp)
   103c4:	1105883a 	add	r2,r2,r4
   103c8:	d8802b15 	stw	r2,172(sp)
   103cc:	10005f16 	blt	r2,zero,1054c <___svfprintf_internal_r+0x2118>
   103d0:	044019c4 	movi	r17,103
   103d4:	003ed906 	br	ff3c <__alt_data_end+0xfc00ff3c>
   103d8:	d9002a17 	ldw	r4,168(sp)
   103dc:	20c00044 	addi	r3,r4,1
   103e0:	003e9c06 	br	fe54 <__alt_data_end+0xfc00fe54>
   103e4:	d9002a17 	ldw	r4,168(sp)
   103e8:	00c0680e 	bge	zero,r3,1058c <___svfprintf_internal_r+0x2158>
   103ec:	2000461e 	bne	r4,zero,10508 <___svfprintf_internal_r+0x20d4>
   103f0:	9480004c 	andi	r18,r18,1
   103f4:	9000441e 	bne	r18,zero,10508 <___svfprintf_internal_r+0x20d4>
   103f8:	1805883a 	mov	r2,r3
   103fc:	1800a116 	blt	r3,zero,10684 <___svfprintf_internal_r+0x2250>
   10400:	d8c03217 	ldw	r3,200(sp)
   10404:	d8c02b15 	stw	r3,172(sp)
   10408:	003ecc06 	br	ff3c <__alt_data_end+0xfc00ff3c>
   1040c:	d9402a17 	ldw	r5,168(sp)
   10410:	d8802104 	addi	r2,sp,132
   10414:	d8800315 	stw	r2,12(sp)
   10418:	d9400015 	stw	r5,0(sp)
   1041c:	d8802504 	addi	r2,sp,148
   10420:	d9403617 	ldw	r5,216(sp)
   10424:	d8800215 	stw	r2,8(sp)
   10428:	d8802604 	addi	r2,sp,152
   1042c:	d8800115 	stw	r2,4(sp)
   10430:	01c000c4 	movi	r7,3
   10434:	a00d883a 	mov	r6,r20
   10438:	9809883a 	mov	r4,r19
   1043c:	da003e15 	stw	r8,248(sp)
   10440:	0012e280 	call	12e28 <_dtoa_r>
   10444:	d8c02a17 	ldw	r3,168(sp)
   10448:	da003e17 	ldw	r8,248(sp)
   1044c:	1021883a 	mov	r16,r2
   10450:	00801184 	movi	r2,70
   10454:	80f9883a 	add	fp,r16,r3
   10458:	88bfcc26 	beq	r17,r2,1038c <__alt_data_end+0xfc01038c>
   1045c:	003e9306 	br	feac <__alt_data_end+0xfc00feac>
   10460:	df0022c4 	addi	fp,sp,139
   10464:	dc002a15 	stw	r16,168(sp)
   10468:	9829883a 	mov	r20,r19
   1046c:	e021883a 	mov	r16,fp
   10470:	4027883a 	mov	r19,r8
   10474:	b009883a 	mov	r4,r22
   10478:	01400284 	movi	r5,10
   1047c:	000cbc40 	call	cbc4 <__modsi3>
   10480:	10800c04 	addi	r2,r2,48
   10484:	843fffc4 	addi	r16,r16,-1
   10488:	b009883a 	mov	r4,r22
   1048c:	01400284 	movi	r5,10
   10490:	80800005 	stb	r2,0(r16)
   10494:	000cb400 	call	cb40 <__divsi3>
   10498:	102d883a 	mov	r22,r2
   1049c:	00800244 	movi	r2,9
   104a0:	15bff416 	blt	r2,r22,10474 <__alt_data_end+0xfc010474>
   104a4:	9811883a 	mov	r8,r19
   104a8:	b0800c04 	addi	r2,r22,48
   104ac:	a027883a 	mov	r19,r20
   104b0:	8029883a 	mov	r20,r16
   104b4:	a17fffc4 	addi	r5,r20,-1
   104b8:	a0bfffc5 	stb	r2,-1(r20)
   104bc:	dc002a17 	ldw	r16,168(sp)
   104c0:	2f00782e 	bgeu	r5,fp,106a4 <___svfprintf_internal_r+0x2270>
   104c4:	d9c02384 	addi	r7,sp,142
   104c8:	3d0fc83a 	sub	r7,r7,r20
   104cc:	d9002344 	addi	r4,sp,141
   104d0:	e1cf883a 	add	r7,fp,r7
   104d4:	00000106 	br	104dc <___svfprintf_internal_r+0x20a8>
   104d8:	28800003 	ldbu	r2,0(r5)
   104dc:	20800005 	stb	r2,0(r4)
   104e0:	21000044 	addi	r4,r4,1
   104e4:	29400044 	addi	r5,r5,1
   104e8:	21fffb1e 	bne	r4,r7,104d8 <__alt_data_end+0xfc0104d8>
   104ec:	d8802304 	addi	r2,sp,140
   104f0:	1505c83a 	sub	r2,r2,r20
   104f4:	d8c02344 	addi	r3,sp,141
   104f8:	1885883a 	add	r2,r3,r2
   104fc:	003f7006 	br	102c0 <__alt_data_end+0xfc0102c0>
   10500:	0005883a 	mov	r2,zero
   10504:	003f0b06 	br	10134 <__alt_data_end+0xfc010134>
   10508:	d9002a17 	ldw	r4,168(sp)
   1050c:	d8c03217 	ldw	r3,200(sp)
   10510:	20800044 	addi	r2,r4,1
   10514:	1885883a 	add	r2,r3,r2
   10518:	d8802b15 	stw	r2,172(sp)
   1051c:	103e870e 	bge	r2,zero,ff3c <__alt_data_end+0xfc00ff3c>
   10520:	0005883a 	mov	r2,zero
   10524:	003e8506 	br	ff3c <__alt_data_end+0xfc00ff3c>
   10528:	010000f4 	movhi	r4,3
   1052c:	21257f84 	addi	r4,r4,-27138
   10530:	d9002c15 	stw	r4,176(sp)
   10534:	003cc506 	br	f84c <__alt_data_end+0xfc00f84c>
   10538:	d8c03217 	ldw	r3,200(sp)
   1053c:	18c00044 	addi	r3,r3,1
   10540:	d8c02b15 	stw	r3,172(sp)
   10544:	1805883a 	mov	r2,r3
   10548:	183fa10e 	bge	r3,zero,103d0 <__alt_data_end+0xfc0103d0>
   1054c:	0005883a 	mov	r2,zero
   10550:	003f9f06 	br	103d0 <__alt_data_end+0xfc0103d0>
   10554:	d9003617 	ldw	r4,216(sp)
   10558:	000d883a 	mov	r6,zero
   1055c:	000f883a 	mov	r7,zero
   10560:	a00b883a 	mov	r5,r20
   10564:	d8c03d15 	stw	r3,244(sp)
   10568:	da003e15 	stw	r8,248(sp)
   1056c:	001c7880 	call	1c788 <__eqdf2>
   10570:	d8c03d17 	ldw	r3,244(sp)
   10574:	da003e17 	ldw	r8,248(sp)
   10578:	103f8726 	beq	r2,zero,10398 <__alt_data_end+0xfc010398>
   1057c:	00800044 	movi	r2,1
   10580:	10c7c83a 	sub	r3,r2,r3
   10584:	d8c02615 	stw	r3,152(sp)
   10588:	003f8406 	br	1039c <__alt_data_end+0xfc01039c>
   1058c:	20000e1e 	bne	r4,zero,105c8 <___svfprintf_internal_r+0x2194>
   10590:	9480004c 	andi	r18,r18,1
   10594:	90000c1e 	bne	r18,zero,105c8 <___svfprintf_internal_r+0x2194>
   10598:	00800044 	movi	r2,1
   1059c:	d8802b15 	stw	r2,172(sp)
   105a0:	003e6606 	br	ff3c <__alt_data_end+0xfc00ff3c>
   105a4:	00800b44 	movi	r2,45
   105a8:	05adc83a 	sub	r22,zero,r22
   105ac:	d8802305 	stb	r2,140(sp)
   105b0:	003f3b06 	br	102a0 <__alt_data_end+0xfc0102a0>
   105b4:	0005883a 	mov	r2,zero
   105b8:	003f4e06 	br	102f4 <__alt_data_end+0xfc0102f4>
   105bc:	90a4703a 	and	r18,r18,r2
   105c0:	903f4a26 	beq	r18,zero,102ec <__alt_data_end+0xfc0102ec>
   105c4:	003f4606 	br	102e0 <__alt_data_end+0xfc0102e0>
   105c8:	d8c02a17 	ldw	r3,168(sp)
   105cc:	18c00084 	addi	r3,r3,2
   105d0:	d8c02b15 	stw	r3,172(sp)
   105d4:	1805883a 	mov	r2,r3
   105d8:	183e580e 	bge	r3,zero,ff3c <__alt_data_end+0xfc00ff3c>
   105dc:	003fd006 	br	10520 <__alt_data_end+0xfc010520>
   105e0:	00800084 	movi	r2,2
   105e4:	10c5c83a 	sub	r2,r2,r3
   105e8:	003f7506 	br	103c0 <__alt_data_end+0xfc0103c0>
   105ec:	d9402e17 	ldw	r5,184(sp)
   105f0:	d9002e17 	ldw	r4,184(sp)
   105f4:	bc400043 	ldbu	r17,1(r23)
   105f8:	29400017 	ldw	r5,0(r5)
   105fc:	20800104 	addi	r2,r4,4
   10600:	d8802e15 	stw	r2,184(sp)
   10604:	d9402a15 	stw	r5,168(sp)
   10608:	182f883a 	mov	r23,r3
   1060c:	283df10e 	bge	r5,zero,fdd4 <__alt_data_end+0xfc00fdd4>
   10610:	8c403fcc 	andi	r17,r17,255
   10614:	017fffc4 	movi	r5,-1
   10618:	8c40201c 	xori	r17,r17,128
   1061c:	d9402a15 	stw	r5,168(sp)
   10620:	8c7fe004 	addi	r17,r17,-128
   10624:	0037d806 	br	e588 <__alt_data_end+0xfc00e588>
   10628:	9080004c 	andi	r2,r18,1
   1062c:	0039883a 	mov	fp,zero
   10630:	10000726 	beq	r2,zero,10650 <___svfprintf_internal_r+0x221c>
   10634:	d8c02817 	ldw	r3,160(sp)
   10638:	dc001dc4 	addi	r16,sp,119
   1063c:	00800c04 	movi	r2,48
   10640:	1c07c83a 	sub	r3,r3,r16
   10644:	d8801dc5 	stb	r2,119(sp)
   10648:	d8c02b15 	stw	r3,172(sp)
   1064c:	00393106 	br	eb14 <__alt_data_end+0xfc00eb14>
   10650:	d8002b15 	stw	zero,172(sp)
   10654:	dc001e04 	addi	r16,sp,120
   10658:	00392e06 	br	eb14 <__alt_data_end+0xfc00eb14>
   1065c:	0005883a 	mov	r2,zero
   10660:	003e3306 	br	ff30 <__alt_data_end+0xfc00ff30>
   10664:	dd802617 	ldw	r22,152(sp)
   10668:	003f0706 	br	10288 <__alt_data_end+0xfc010288>
   1066c:	d8c02b03 	ldbu	r3,172(sp)
   10670:	d8c02785 	stb	r3,158(sp)
   10674:	003a3506 	br	ef4c <__alt_data_end+0xfc00ef4c>
   10678:	d8c02b03 	ldbu	r3,172(sp)
   1067c:	d8c02785 	stb	r3,158(sp)
   10680:	003a1706 	br	eee0 <__alt_data_end+0xfc00eee0>
   10684:	0005883a 	mov	r2,zero
   10688:	003f5d06 	br	10400 <__alt_data_end+0xfc010400>
   1068c:	d8c02b03 	ldbu	r3,172(sp)
   10690:	d8c02785 	stb	r3,158(sp)
   10694:	0038f306 	br	ea64 <__alt_data_end+0xfc00ea64>
   10698:	d8c02b03 	ldbu	r3,172(sp)
   1069c:	d8c02785 	stb	r3,158(sp)
   106a0:	0038be06 	br	e99c <__alt_data_end+0xfc00e99c>
   106a4:	d8802344 	addi	r2,sp,141
   106a8:	003f0506 	br	102c0 <__alt_data_end+0xfc0102c0>
   106ac:	d8c02b03 	ldbu	r3,172(sp)
   106b0:	d8c02785 	stb	r3,158(sp)
   106b4:	00388b06 	br	e8e4 <__alt_data_end+0xfc00e8e4>
   106b8:	d8c02b03 	ldbu	r3,172(sp)
   106bc:	d8c02785 	stb	r3,158(sp)
   106c0:	003ad706 	br	f220 <__alt_data_end+0xfc00f220>
   106c4:	d9403917 	ldw	r5,228(sp)
   106c8:	00800304 	movi	r2,12
   106cc:	28800015 	stw	r2,0(r5)
   106d0:	00bfffc4 	movi	r2,-1
   106d4:	00384306 	br	e7e4 <__alt_data_end+0xfc00e7e4>
   106d8:	d8c02b03 	ldbu	r3,172(sp)
   106dc:	d8c02785 	stb	r3,158(sp)
   106e0:	003ab606 	br	f1bc <__alt_data_end+0xfc00f1bc>
   106e4:	d8c02b03 	ldbu	r3,172(sp)
   106e8:	d8c02785 	stb	r3,158(sp)
   106ec:	003a8906 	br	f114 <__alt_data_end+0xfc00f114>

000106f0 <_times_r>:
   106f0:	2809883a 	mov	r4,r5
   106f4:	001e8041 	jmpi	1e804 <times>

000106f8 <___vfprintf_internal_r>:
   106f8:	deffb804 	addi	sp,sp,-288
   106fc:	dfc04715 	stw	ra,284(sp)
   10700:	ddc04515 	stw	r23,276(sp)
   10704:	dd404315 	stw	r21,268(sp)
   10708:	d9002d15 	stw	r4,180(sp)
   1070c:	282f883a 	mov	r23,r5
   10710:	302b883a 	mov	r21,r6
   10714:	d9c02e15 	stw	r7,184(sp)
   10718:	df004615 	stw	fp,280(sp)
   1071c:	dd804415 	stw	r22,272(sp)
   10720:	dd004215 	stw	r20,264(sp)
   10724:	dcc04115 	stw	r19,260(sp)
   10728:	dc804015 	stw	r18,256(sp)
   1072c:	dc403f15 	stw	r17,252(sp)
   10730:	dc003e15 	stw	r16,248(sp)
   10734:	00156380 	call	15638 <_localeconv_r>
   10738:	10800017 	ldw	r2,0(r2)
   1073c:	1009883a 	mov	r4,r2
   10740:	d8803415 	stw	r2,208(sp)
   10744:	000e39c0 	call	e39c <strlen>
   10748:	d8803715 	stw	r2,220(sp)
   1074c:	d8802d17 	ldw	r2,180(sp)
   10750:	10000226 	beq	r2,zero,1075c <___vfprintf_internal_r+0x64>
   10754:	10800e17 	ldw	r2,56(r2)
   10758:	1000fb26 	beq	r2,zero,10b48 <___vfprintf_internal_r+0x450>
   1075c:	b880030b 	ldhu	r2,12(r23)
   10760:	10c8000c 	andi	r3,r2,8192
   10764:	1800061e 	bne	r3,zero,10780 <___vfprintf_internal_r+0x88>
   10768:	b9001917 	ldw	r4,100(r23)
   1076c:	00f7ffc4 	movi	r3,-8193
   10770:	10880014 	ori	r2,r2,8192
   10774:	20c6703a 	and	r3,r4,r3
   10778:	b880030d 	sth	r2,12(r23)
   1077c:	b8c01915 	stw	r3,100(r23)
   10780:	10c0020c 	andi	r3,r2,8
   10784:	1800c326 	beq	r3,zero,10a94 <___vfprintf_internal_r+0x39c>
   10788:	b8c00417 	ldw	r3,16(r23)
   1078c:	1800c126 	beq	r3,zero,10a94 <___vfprintf_internal_r+0x39c>
   10790:	1080068c 	andi	r2,r2,26
   10794:	00c00284 	movi	r3,10
   10798:	10c0c626 	beq	r2,r3,10ab4 <___vfprintf_internal_r+0x3bc>
   1079c:	d8c00404 	addi	r3,sp,16
   107a0:	050000f4 	movhi	r20,3
   107a4:	d9001e04 	addi	r4,sp,120
   107a8:	a5258784 	addi	r20,r20,-27106
   107ac:	d8c01e15 	stw	r3,120(sp)
   107b0:	d8002015 	stw	zero,128(sp)
   107b4:	d8001f15 	stw	zero,124(sp)
   107b8:	d8003315 	stw	zero,204(sp)
   107bc:	d8003615 	stw	zero,216(sp)
   107c0:	d8003815 	stw	zero,224(sp)
   107c4:	1811883a 	mov	r8,r3
   107c8:	d8003915 	stw	zero,228(sp)
   107cc:	d8003a15 	stw	zero,232(sp)
   107d0:	d8002f15 	stw	zero,188(sp)
   107d4:	d9002815 	stw	r4,160(sp)
   107d8:	a8800007 	ldb	r2,0(r21)
   107dc:	10028b26 	beq	r2,zero,1120c <___vfprintf_internal_r+0xb14>
   107e0:	00c00944 	movi	r3,37
   107e4:	a823883a 	mov	r17,r21
   107e8:	10c0021e 	bne	r2,r3,107f4 <___vfprintf_internal_r+0xfc>
   107ec:	00001406 	br	10840 <___vfprintf_internal_r+0x148>
   107f0:	10c00326 	beq	r2,r3,10800 <___vfprintf_internal_r+0x108>
   107f4:	8c400044 	addi	r17,r17,1
   107f8:	88800007 	ldb	r2,0(r17)
   107fc:	103ffc1e 	bne	r2,zero,107f0 <__alt_data_end+0xfc0107f0>
   10800:	8d61c83a 	sub	r16,r17,r21
   10804:	80000e26 	beq	r16,zero,10840 <___vfprintf_internal_r+0x148>
   10808:	d8c02017 	ldw	r3,128(sp)
   1080c:	d8801f17 	ldw	r2,124(sp)
   10810:	45400015 	stw	r21,0(r8)
   10814:	1c07883a 	add	r3,r3,r16
   10818:	10800044 	addi	r2,r2,1
   1081c:	d8c02015 	stw	r3,128(sp)
   10820:	44000115 	stw	r16,4(r8)
   10824:	d8801f15 	stw	r2,124(sp)
   10828:	00c001c4 	movi	r3,7
   1082c:	1880a916 	blt	r3,r2,10ad4 <___vfprintf_internal_r+0x3dc>
   10830:	42000204 	addi	r8,r8,8
   10834:	d9402f17 	ldw	r5,188(sp)
   10838:	2c0b883a 	add	r5,r5,r16
   1083c:	d9402f15 	stw	r5,188(sp)
   10840:	88800007 	ldb	r2,0(r17)
   10844:	1000aa26 	beq	r2,zero,10af0 <___vfprintf_internal_r+0x3f8>
   10848:	8d400044 	addi	r21,r17,1
   1084c:	8c400047 	ldb	r17,1(r17)
   10850:	0021883a 	mov	r16,zero
   10854:	00bfffc4 	movi	r2,-1
   10858:	0025883a 	mov	r18,zero
   1085c:	dc002905 	stb	r16,164(sp)
   10860:	d8002785 	stb	zero,158(sp)
   10864:	d8002b05 	stb	zero,172(sp)
   10868:	d8802a15 	stw	r2,168(sp)
   1086c:	d8003115 	stw	zero,196(sp)
   10870:	04c01604 	movi	r19,88
   10874:	05800244 	movi	r22,9
   10878:	9021883a 	mov	r16,r18
   1087c:	4039883a 	mov	fp,r8
   10880:	ad400044 	addi	r21,r21,1
   10884:	88bff804 	addi	r2,r17,-32
   10888:	98833236 	bltu	r19,r2,11554 <___vfprintf_internal_r+0xe5c>
   1088c:	100490ba 	slli	r2,r2,2
   10890:	00c00074 	movhi	r3,1
   10894:	18c22904 	addi	r3,r3,2212
   10898:	10c5883a 	add	r2,r2,r3
   1089c:	10800017 	ldw	r2,0(r2)
   108a0:	1000683a 	jmp	r2
   108a4:	0001144c 	andi	zero,zero,1105
   108a8:	00011554 	movui	zero,1109
   108ac:	00011554 	movui	zero,1109
   108b0:	0001146c 	andhi	zero,zero,1105
   108b4:	00011554 	movui	zero,1109
   108b8:	00011554 	movui	zero,1109
   108bc:	00011554 	movui	zero,1109
   108c0:	00011554 	movui	zero,1109
   108c4:	00011554 	movui	zero,1109
   108c8:	00011554 	movui	zero,1109
   108cc:	00010b54 	movui	zero,1069
   108d0:	0001135c 	xori	zero,zero,1101
   108d4:	00011554 	movui	zero,1109
   108d8:	00010a18 	cmpnei	zero,zero,1064
   108dc:	00010b78 	rdprs	zero,zero,1069
   108e0:	00011554 	movui	zero,1109
   108e4:	00010bc8 	cmpgei	zero,zero,1071
   108e8:	00010bd4 	movui	zero,1071
   108ec:	00010bd4 	movui	zero,1071
   108f0:	00010bd4 	movui	zero,1071
   108f4:	00010bd4 	movui	zero,1071
   108f8:	00010bd4 	movui	zero,1071
   108fc:	00010bd4 	movui	zero,1071
   10900:	00010bd4 	movui	zero,1071
   10904:	00010bd4 	movui	zero,1071
   10908:	00010bd4 	movui	zero,1071
   1090c:	00011554 	movui	zero,1109
   10910:	00011554 	movui	zero,1109
   10914:	00011554 	movui	zero,1109
   10918:	00011554 	movui	zero,1109
   1091c:	00011554 	movui	zero,1109
   10920:	00011554 	movui	zero,1109
   10924:	00011554 	movui	zero,1109
   10928:	00011554 	movui	zero,1109
   1092c:	00011554 	movui	zero,1109
   10930:	00011554 	movui	zero,1109
   10934:	00010c10 	cmplti	zero,zero,1072
   10938:	00010cd8 	cmpnei	zero,zero,1075
   1093c:	00011554 	movui	zero,1109
   10940:	00010cd8 	cmpnei	zero,zero,1075
   10944:	00011554 	movui	zero,1109
   10948:	00011554 	movui	zero,1109
   1094c:	00011554 	movui	zero,1109
   10950:	00011554 	movui	zero,1109
   10954:	00010d84 	movi	zero,1078
   10958:	00011554 	movui	zero,1109
   1095c:	00011554 	movui	zero,1109
   10960:	00010d90 	cmplti	zero,zero,1078
   10964:	00011554 	movui	zero,1109
   10968:	00011554 	movui	zero,1109
   1096c:	00011554 	movui	zero,1109
   10970:	00011554 	movui	zero,1109
   10974:	00011554 	movui	zero,1109
   10978:	00011214 	movui	zero,1096
   1097c:	00011554 	movui	zero,1109
   10980:	00011554 	movui	zero,1109
   10984:	00011280 	call	1128 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x194>
   10988:	00011554 	movui	zero,1109
   1098c:	00011554 	movui	zero,1109
   10990:	00011554 	movui	zero,1109
   10994:	00011554 	movui	zero,1109
   10998:	00011554 	movui	zero,1109
   1099c:	00011554 	movui	zero,1109
   109a0:	00011554 	movui	zero,1109
   109a4:	00011554 	movui	zero,1109
   109a8:	00011554 	movui	zero,1109
   109ac:	00011554 	movui	zero,1109
   109b0:	000114f8 	rdprs	zero,zero,1107
   109b4:	00011478 	rdprs	zero,zero,1105
   109b8:	00010cd8 	cmpnei	zero,zero,1075
   109bc:	00010cd8 	cmpnei	zero,zero,1075
   109c0:	00010cd8 	cmpnei	zero,zero,1075
   109c4:	00011498 	cmpnei	zero,zero,1106
   109c8:	00011478 	rdprs	zero,zero,1105
   109cc:	00011554 	movui	zero,1109
   109d0:	00011554 	movui	zero,1109
   109d4:	000114a4 	muli	zero,zero,1106
   109d8:	00011554 	movui	zero,1109
   109dc:	000114b8 	rdprs	zero,zero,1106
   109e0:	0001133c 	xorhi	zero,zero,1100
   109e4:	00010a24 	muli	zero,zero,1064
   109e8:	00011374 	movhi	zero,1101
   109ec:	00011554 	movui	zero,1109
   109f0:	00011380 	call	1138 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1a4>
   109f4:	00011554 	movui	zero,1109
   109f8:	000113e4 	muli	zero,zero,1103
   109fc:	00011554 	movui	zero,1109
   10a00:	00011554 	movui	zero,1109
   10a04:	00011404 	movi	zero,1104
   10a08:	d8c03117 	ldw	r3,196(sp)
   10a0c:	d8802e15 	stw	r2,184(sp)
   10a10:	00c7c83a 	sub	r3,zero,r3
   10a14:	d8c03115 	stw	r3,196(sp)
   10a18:	84000114 	ori	r16,r16,4
   10a1c:	ac400007 	ldb	r17,0(r21)
   10a20:	003f9706 	br	10880 <__alt_data_end+0xfc010880>
   10a24:	00800c04 	movi	r2,48
   10a28:	d8802705 	stb	r2,156(sp)
   10a2c:	00801e04 	movi	r2,120
   10a30:	d8802745 	stb	r2,157(sp)
   10a34:	d9002a17 	ldw	r4,168(sp)
   10a38:	d8802e17 	ldw	r2,184(sp)
   10a3c:	d8002785 	stb	zero,158(sp)
   10a40:	e011883a 	mov	r8,fp
   10a44:	10c00104 	addi	r3,r2,4
   10a48:	14c00017 	ldw	r19,0(r2)
   10a4c:	002d883a 	mov	r22,zero
   10a50:	80800094 	ori	r2,r16,2
   10a54:	2002ca16 	blt	r4,zero,11580 <___vfprintf_internal_r+0xe88>
   10a58:	00bfdfc4 	movi	r2,-129
   10a5c:	80a4703a 	and	r18,r16,r2
   10a60:	d8c02e15 	stw	r3,184(sp)
   10a64:	94800094 	ori	r18,r18,2
   10a68:	9802b41e 	bne	r19,zero,1153c <___vfprintf_internal_r+0xe44>
   10a6c:	014000f4 	movhi	r5,3
   10a70:	29657804 	addi	r5,r5,-27168
   10a74:	d9403915 	stw	r5,228(sp)
   10a78:	04401e04 	movi	r17,120
   10a7c:	d8802a17 	ldw	r2,168(sp)
   10a80:	0039883a 	mov	fp,zero
   10a84:	1001fa26 	beq	r2,zero,11270 <___vfprintf_internal_r+0xb78>
   10a88:	0027883a 	mov	r19,zero
   10a8c:	002d883a 	mov	r22,zero
   10a90:	00021906 	br	112f8 <___vfprintf_internal_r+0xc00>
   10a94:	d9002d17 	ldw	r4,180(sp)
   10a98:	b80b883a 	mov	r5,r23
   10a9c:	0012aac0 	call	12aac <__swsetup_r>
   10aa0:	1005dc1e 	bne	r2,zero,12214 <___vfprintf_internal_r+0x1b1c>
   10aa4:	b880030b 	ldhu	r2,12(r23)
   10aa8:	00c00284 	movi	r3,10
   10aac:	1080068c 	andi	r2,r2,26
   10ab0:	10ff3a1e 	bne	r2,r3,1079c <__alt_data_end+0xfc01079c>
   10ab4:	b880038f 	ldh	r2,14(r23)
   10ab8:	103f3816 	blt	r2,zero,1079c <__alt_data_end+0xfc01079c>
   10abc:	d9c02e17 	ldw	r7,184(sp)
   10ac0:	d9002d17 	ldw	r4,180(sp)
   10ac4:	a80d883a 	mov	r6,r21
   10ac8:	b80b883a 	mov	r5,r23
   10acc:	00129f00 	call	129f0 <__sbprintf>
   10ad0:	00001106 	br	10b18 <___vfprintf_internal_r+0x420>
   10ad4:	d9002d17 	ldw	r4,180(sp)
   10ad8:	d9801e04 	addi	r6,sp,120
   10adc:	b80b883a 	mov	r5,r23
   10ae0:	0018a040 	call	18a04 <__sprint_r>
   10ae4:	1000081e 	bne	r2,zero,10b08 <___vfprintf_internal_r+0x410>
   10ae8:	da000404 	addi	r8,sp,16
   10aec:	003f5106 	br	10834 <__alt_data_end+0xfc010834>
   10af0:	d8802017 	ldw	r2,128(sp)
   10af4:	10000426 	beq	r2,zero,10b08 <___vfprintf_internal_r+0x410>
   10af8:	d9002d17 	ldw	r4,180(sp)
   10afc:	d9801e04 	addi	r6,sp,120
   10b00:	b80b883a 	mov	r5,r23
   10b04:	0018a040 	call	18a04 <__sprint_r>
   10b08:	b880030b 	ldhu	r2,12(r23)
   10b0c:	1080100c 	andi	r2,r2,64
   10b10:	1005c01e 	bne	r2,zero,12214 <___vfprintf_internal_r+0x1b1c>
   10b14:	d8802f17 	ldw	r2,188(sp)
   10b18:	dfc04717 	ldw	ra,284(sp)
   10b1c:	df004617 	ldw	fp,280(sp)
   10b20:	ddc04517 	ldw	r23,276(sp)
   10b24:	dd804417 	ldw	r22,272(sp)
   10b28:	dd404317 	ldw	r21,268(sp)
   10b2c:	dd004217 	ldw	r20,264(sp)
   10b30:	dcc04117 	ldw	r19,260(sp)
   10b34:	dc804017 	ldw	r18,256(sp)
   10b38:	dc403f17 	ldw	r17,252(sp)
   10b3c:	dc003e17 	ldw	r16,248(sp)
   10b40:	dec04804 	addi	sp,sp,288
   10b44:	f800283a 	ret
   10b48:	d9002d17 	ldw	r4,180(sp)
   10b4c:	0014ab80 	call	14ab8 <__sinit>
   10b50:	003f0206 	br	1075c <__alt_data_end+0xfc01075c>
   10b54:	d9002e17 	ldw	r4,184(sp)
   10b58:	d9402e17 	ldw	r5,184(sp)
   10b5c:	21000017 	ldw	r4,0(r4)
   10b60:	28800104 	addi	r2,r5,4
   10b64:	d9003115 	stw	r4,196(sp)
   10b68:	203fa716 	blt	r4,zero,10a08 <__alt_data_end+0xfc010a08>
   10b6c:	d8802e15 	stw	r2,184(sp)
   10b70:	ac400007 	ldb	r17,0(r21)
   10b74:	003f4206 	br	10880 <__alt_data_end+0xfc010880>
   10b78:	ac400007 	ldb	r17,0(r21)
   10b7c:	01000a84 	movi	r4,42
   10b80:	a8c00044 	addi	r3,r21,1
   10b84:	89075826 	beq	r17,r4,128e8 <___vfprintf_internal_r+0x21f0>
   10b88:	8cbff404 	addi	r18,r17,-48
   10b8c:	b486ae36 	bltu	r22,r18,12648 <___vfprintf_internal_r+0x1f50>
   10b90:	0009883a 	mov	r4,zero
   10b94:	1823883a 	mov	r17,r3
   10b98:	01400284 	movi	r5,10
   10b9c:	000ccf40 	call	ccf4 <__mulsi3>
   10ba0:	88c00007 	ldb	r3,0(r17)
   10ba4:	1489883a 	add	r4,r2,r18
   10ba8:	8d400044 	addi	r21,r17,1
   10bac:	1cbff404 	addi	r18,r3,-48
   10bb0:	a823883a 	mov	r17,r21
   10bb4:	b4bff82e 	bgeu	r22,r18,10b98 <__alt_data_end+0xfc010b98>
   10bb8:	1823883a 	mov	r17,r3
   10bbc:	2005f616 	blt	r4,zero,12398 <___vfprintf_internal_r+0x1ca0>
   10bc0:	d9002a15 	stw	r4,168(sp)
   10bc4:	003f2f06 	br	10884 <__alt_data_end+0xfc010884>
   10bc8:	84002014 	ori	r16,r16,128
   10bcc:	ac400007 	ldb	r17,0(r21)
   10bd0:	003f2b06 	br	10880 <__alt_data_end+0xfc010880>
   10bd4:	8cbff404 	addi	r18,r17,-48
   10bd8:	d8003115 	stw	zero,196(sp)
   10bdc:	0009883a 	mov	r4,zero
   10be0:	a823883a 	mov	r17,r21
   10be4:	01400284 	movi	r5,10
   10be8:	000ccf40 	call	ccf4 <__mulsi3>
   10bec:	88c00007 	ldb	r3,0(r17)
   10bf0:	9089883a 	add	r4,r18,r2
   10bf4:	ad400044 	addi	r21,r21,1
   10bf8:	1cbff404 	addi	r18,r3,-48
   10bfc:	a823883a 	mov	r17,r21
   10c00:	b4bff82e 	bgeu	r22,r18,10be4 <__alt_data_end+0xfc010be4>
   10c04:	1823883a 	mov	r17,r3
   10c08:	d9003115 	stw	r4,196(sp)
   10c0c:	003f1d06 	br	10884 <__alt_data_end+0xfc010884>
   10c10:	8025883a 	mov	r18,r16
   10c14:	dc002903 	ldbu	r16,164(sp)
   10c18:	e011883a 	mov	r8,fp
   10c1c:	84003fcc 	andi	r16,r16,255
   10c20:	8007531e 	bne	r16,zero,12970 <___vfprintf_internal_r+0x2278>
   10c24:	94800414 	ori	r18,r18,16
   10c28:	9080080c 	andi	r2,r18,32
   10c2c:	1003a326 	beq	r2,zero,11abc <___vfprintf_internal_r+0x13c4>
   10c30:	d9002e17 	ldw	r4,184(sp)
   10c34:	20800117 	ldw	r2,4(r4)
   10c38:	24c00017 	ldw	r19,0(r4)
   10c3c:	21000204 	addi	r4,r4,8
   10c40:	d9002e15 	stw	r4,184(sp)
   10c44:	102d883a 	mov	r22,r2
   10c48:	10047316 	blt	r2,zero,11e18 <___vfprintf_internal_r+0x1720>
   10c4c:	d9002a17 	ldw	r4,168(sp)
   10c50:	df002783 	ldbu	fp,158(sp)
   10c54:	2003e416 	blt	r4,zero,11be8 <___vfprintf_internal_r+0x14f0>
   10c58:	00ffdfc4 	movi	r3,-129
   10c5c:	9d84b03a 	or	r2,r19,r22
   10c60:	90e4703a 	and	r18,r18,r3
   10c64:	10018026 	beq	r2,zero,11268 <___vfprintf_internal_r+0xb70>
   10c68:	b003ab26 	beq	r22,zero,11b18 <___vfprintf_internal_r+0x1420>
   10c6c:	dc402915 	stw	r17,164(sp)
   10c70:	dc001e04 	addi	r16,sp,120
   10c74:	b023883a 	mov	r17,r22
   10c78:	402d883a 	mov	r22,r8
   10c7c:	9809883a 	mov	r4,r19
   10c80:	880b883a 	mov	r5,r17
   10c84:	01800284 	movi	r6,10
   10c88:	000f883a 	mov	r7,zero
   10c8c:	001af480 	call	1af48 <__umoddi3>
   10c90:	10800c04 	addi	r2,r2,48
   10c94:	843fffc4 	addi	r16,r16,-1
   10c98:	9809883a 	mov	r4,r19
   10c9c:	880b883a 	mov	r5,r17
   10ca0:	80800005 	stb	r2,0(r16)
   10ca4:	01800284 	movi	r6,10
   10ca8:	000f883a 	mov	r7,zero
   10cac:	001a94c0 	call	1a94c <__udivdi3>
   10cb0:	1027883a 	mov	r19,r2
   10cb4:	10c4b03a 	or	r2,r2,r3
   10cb8:	1823883a 	mov	r17,r3
   10cbc:	103fef1e 	bne	r2,zero,10c7c <__alt_data_end+0xfc010c7c>
   10cc0:	d8c02817 	ldw	r3,160(sp)
   10cc4:	dc402917 	ldw	r17,164(sp)
   10cc8:	b011883a 	mov	r8,r22
   10ccc:	1c07c83a 	sub	r3,r3,r16
   10cd0:	d8c02b15 	stw	r3,172(sp)
   10cd4:	00005f06 	br	10e54 <___vfprintf_internal_r+0x75c>
   10cd8:	8025883a 	mov	r18,r16
   10cdc:	dc002903 	ldbu	r16,164(sp)
   10ce0:	e011883a 	mov	r8,fp
   10ce4:	84003fcc 	andi	r16,r16,255
   10ce8:	80071e1e 	bne	r16,zero,12964 <___vfprintf_internal_r+0x226c>
   10cec:	9080020c 	andi	r2,r18,8
   10cf0:	1004af26 	beq	r2,zero,11fb0 <___vfprintf_internal_r+0x18b8>
   10cf4:	d9002e17 	ldw	r4,184(sp)
   10cf8:	d9402e17 	ldw	r5,184(sp)
   10cfc:	d8802e17 	ldw	r2,184(sp)
   10d00:	21000017 	ldw	r4,0(r4)
   10d04:	29400117 	ldw	r5,4(r5)
   10d08:	10800204 	addi	r2,r2,8
   10d0c:	d9003615 	stw	r4,216(sp)
   10d10:	d9403815 	stw	r5,224(sp)
   10d14:	d8802e15 	stw	r2,184(sp)
   10d18:	d9003617 	ldw	r4,216(sp)
   10d1c:	d9403817 	ldw	r5,224(sp)
   10d20:	da003d15 	stw	r8,244(sp)
   10d24:	04000044 	movi	r16,1
   10d28:	00171e80 	call	171e8 <__fpclassifyd>
   10d2c:	da003d17 	ldw	r8,244(sp)
   10d30:	1404441e 	bne	r2,r16,11e44 <___vfprintf_internal_r+0x174c>
   10d34:	d9003617 	ldw	r4,216(sp)
   10d38:	d9403817 	ldw	r5,224(sp)
   10d3c:	000d883a 	mov	r6,zero
   10d40:	000f883a 	mov	r7,zero
   10d44:	001c8ec0 	call	1c8ec <__ledf2>
   10d48:	da003d17 	ldw	r8,244(sp)
   10d4c:	1005e316 	blt	r2,zero,124dc <___vfprintf_internal_r+0x1de4>
   10d50:	df002783 	ldbu	fp,158(sp)
   10d54:	008011c4 	movi	r2,71
   10d58:	1445580e 	bge	r2,r17,122bc <___vfprintf_internal_r+0x1bc4>
   10d5c:	040000f4 	movhi	r16,3
   10d60:	84257004 	addi	r16,r16,-27200
   10d64:	00c000c4 	movi	r3,3
   10d68:	00bfdfc4 	movi	r2,-129
   10d6c:	d8c02915 	stw	r3,164(sp)
   10d70:	90a4703a 	and	r18,r18,r2
   10d74:	d8c02b15 	stw	r3,172(sp)
   10d78:	d8002a15 	stw	zero,168(sp)
   10d7c:	d8003215 	stw	zero,200(sp)
   10d80:	00003a06 	br	10e6c <___vfprintf_internal_r+0x774>
   10d84:	84000214 	ori	r16,r16,8
   10d88:	ac400007 	ldb	r17,0(r21)
   10d8c:	003ebc06 	br	10880 <__alt_data_end+0xfc010880>
   10d90:	8025883a 	mov	r18,r16
   10d94:	dc002903 	ldbu	r16,164(sp)
   10d98:	e011883a 	mov	r8,fp
   10d9c:	84003fcc 	andi	r16,r16,255
   10da0:	8007001e 	bne	r16,zero,129a4 <___vfprintf_internal_r+0x22ac>
   10da4:	94800414 	ori	r18,r18,16
   10da8:	9080080c 	andi	r2,r18,32
   10dac:	1002fa26 	beq	r2,zero,11998 <___vfprintf_internal_r+0x12a0>
   10db0:	d9002e17 	ldw	r4,184(sp)
   10db4:	d9402a17 	ldw	r5,168(sp)
   10db8:	d8002785 	stb	zero,158(sp)
   10dbc:	20800204 	addi	r2,r4,8
   10dc0:	24c00017 	ldw	r19,0(r4)
   10dc4:	25800117 	ldw	r22,4(r4)
   10dc8:	2804b116 	blt	r5,zero,12090 <___vfprintf_internal_r+0x1998>
   10dcc:	013fdfc4 	movi	r4,-129
   10dd0:	9d86b03a 	or	r3,r19,r22
   10dd4:	d8802e15 	stw	r2,184(sp)
   10dd8:	9124703a 	and	r18,r18,r4
   10ddc:	1802fb1e 	bne	r3,zero,119cc <___vfprintf_internal_r+0x12d4>
   10de0:	d8c02a17 	ldw	r3,168(sp)
   10de4:	0039883a 	mov	fp,zero
   10de8:	1805e526 	beq	r3,zero,12580 <___vfprintf_internal_r+0x1e88>
   10dec:	0027883a 	mov	r19,zero
   10df0:	002d883a 	mov	r22,zero
   10df4:	dc001e04 	addi	r16,sp,120
   10df8:	9806d0fa 	srli	r3,r19,3
   10dfc:	b008977a 	slli	r4,r22,29
   10e00:	b02cd0fa 	srli	r22,r22,3
   10e04:	9cc001cc 	andi	r19,r19,7
   10e08:	98800c04 	addi	r2,r19,48
   10e0c:	843fffc4 	addi	r16,r16,-1
   10e10:	20e6b03a 	or	r19,r4,r3
   10e14:	80800005 	stb	r2,0(r16)
   10e18:	9d86b03a 	or	r3,r19,r22
   10e1c:	183ff61e 	bne	r3,zero,10df8 <__alt_data_end+0xfc010df8>
   10e20:	90c0004c 	andi	r3,r18,1
   10e24:	18014126 	beq	r3,zero,1132c <___vfprintf_internal_r+0xc34>
   10e28:	10803fcc 	andi	r2,r2,255
   10e2c:	1080201c 	xori	r2,r2,128
   10e30:	10bfe004 	addi	r2,r2,-128
   10e34:	00c00c04 	movi	r3,48
   10e38:	10c13c26 	beq	r2,r3,1132c <___vfprintf_internal_r+0xc34>
   10e3c:	80ffffc5 	stb	r3,-1(r16)
   10e40:	d8c02817 	ldw	r3,160(sp)
   10e44:	80bfffc4 	addi	r2,r16,-1
   10e48:	1021883a 	mov	r16,r2
   10e4c:	1887c83a 	sub	r3,r3,r2
   10e50:	d8c02b15 	stw	r3,172(sp)
   10e54:	d8802b17 	ldw	r2,172(sp)
   10e58:	d9002a17 	ldw	r4,168(sp)
   10e5c:	1100010e 	bge	r2,r4,10e64 <___vfprintf_internal_r+0x76c>
   10e60:	2005883a 	mov	r2,r4
   10e64:	d8802915 	stw	r2,164(sp)
   10e68:	d8003215 	stw	zero,200(sp)
   10e6c:	e7003fcc 	andi	fp,fp,255
   10e70:	e700201c 	xori	fp,fp,128
   10e74:	e73fe004 	addi	fp,fp,-128
   10e78:	e0000326 	beq	fp,zero,10e88 <___vfprintf_internal_r+0x790>
   10e7c:	d8c02917 	ldw	r3,164(sp)
   10e80:	18c00044 	addi	r3,r3,1
   10e84:	d8c02915 	stw	r3,164(sp)
   10e88:	90c0008c 	andi	r3,r18,2
   10e8c:	d8c02c15 	stw	r3,176(sp)
   10e90:	18000326 	beq	r3,zero,10ea0 <___vfprintf_internal_r+0x7a8>
   10e94:	d8c02917 	ldw	r3,164(sp)
   10e98:	18c00084 	addi	r3,r3,2
   10e9c:	d8c02915 	stw	r3,164(sp)
   10ea0:	90c0210c 	andi	r3,r18,132
   10ea4:	d8c03015 	stw	r3,192(sp)
   10ea8:	1801c51e 	bne	r3,zero,115c0 <___vfprintf_internal_r+0xec8>
   10eac:	d9003117 	ldw	r4,196(sp)
   10eb0:	d8c02917 	ldw	r3,164(sp)
   10eb4:	20e7c83a 	sub	r19,r4,r3
   10eb8:	04c1c10e 	bge	zero,r19,115c0 <___vfprintf_internal_r+0xec8>
   10ebc:	02400404 	movi	r9,16
   10ec0:	d8c02017 	ldw	r3,128(sp)
   10ec4:	d8801f17 	ldw	r2,124(sp)
   10ec8:	4cc52f0e 	bge	r9,r19,12388 <___vfprintf_internal_r+0x1c90>
   10ecc:	014000f4 	movhi	r5,3
   10ed0:	29658b84 	addi	r5,r5,-27090
   10ed4:	dc403b15 	stw	r17,236(sp)
   10ed8:	d9403515 	stw	r5,212(sp)
   10edc:	9823883a 	mov	r17,r19
   10ee0:	482d883a 	mov	r22,r9
   10ee4:	9027883a 	mov	r19,r18
   10ee8:	070001c4 	movi	fp,7
   10eec:	8025883a 	mov	r18,r16
   10ef0:	dc002d17 	ldw	r16,180(sp)
   10ef4:	00000306 	br	10f04 <___vfprintf_internal_r+0x80c>
   10ef8:	8c7ffc04 	addi	r17,r17,-16
   10efc:	42000204 	addi	r8,r8,8
   10f00:	b440130e 	bge	r22,r17,10f50 <___vfprintf_internal_r+0x858>
   10f04:	010000f4 	movhi	r4,3
   10f08:	18c00404 	addi	r3,r3,16
   10f0c:	10800044 	addi	r2,r2,1
   10f10:	21258b84 	addi	r4,r4,-27090
   10f14:	41000015 	stw	r4,0(r8)
   10f18:	45800115 	stw	r22,4(r8)
   10f1c:	d8c02015 	stw	r3,128(sp)
   10f20:	d8801f15 	stw	r2,124(sp)
   10f24:	e0bff40e 	bge	fp,r2,10ef8 <__alt_data_end+0xfc010ef8>
   10f28:	d9801e04 	addi	r6,sp,120
   10f2c:	b80b883a 	mov	r5,r23
   10f30:	8009883a 	mov	r4,r16
   10f34:	0018a040 	call	18a04 <__sprint_r>
   10f38:	103ef31e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   10f3c:	8c7ffc04 	addi	r17,r17,-16
   10f40:	d8c02017 	ldw	r3,128(sp)
   10f44:	d8801f17 	ldw	r2,124(sp)
   10f48:	da000404 	addi	r8,sp,16
   10f4c:	b47fed16 	blt	r22,r17,10f04 <__alt_data_end+0xfc010f04>
   10f50:	9021883a 	mov	r16,r18
   10f54:	9825883a 	mov	r18,r19
   10f58:	8827883a 	mov	r19,r17
   10f5c:	dc403b17 	ldw	r17,236(sp)
   10f60:	d9403517 	ldw	r5,212(sp)
   10f64:	98c7883a 	add	r3,r19,r3
   10f68:	10800044 	addi	r2,r2,1
   10f6c:	41400015 	stw	r5,0(r8)
   10f70:	44c00115 	stw	r19,4(r8)
   10f74:	d8c02015 	stw	r3,128(sp)
   10f78:	d8801f15 	stw	r2,124(sp)
   10f7c:	010001c4 	movi	r4,7
   10f80:	2082c516 	blt	r4,r2,11a98 <___vfprintf_internal_r+0x13a0>
   10f84:	df002787 	ldb	fp,158(sp)
   10f88:	42000204 	addi	r8,r8,8
   10f8c:	e0000c26 	beq	fp,zero,10fc0 <___vfprintf_internal_r+0x8c8>
   10f90:	d8801f17 	ldw	r2,124(sp)
   10f94:	d9002784 	addi	r4,sp,158
   10f98:	18c00044 	addi	r3,r3,1
   10f9c:	10800044 	addi	r2,r2,1
   10fa0:	41000015 	stw	r4,0(r8)
   10fa4:	01000044 	movi	r4,1
   10fa8:	41000115 	stw	r4,4(r8)
   10fac:	d8c02015 	stw	r3,128(sp)
   10fb0:	d8801f15 	stw	r2,124(sp)
   10fb4:	010001c4 	movi	r4,7
   10fb8:	20825e16 	blt	r4,r2,11934 <___vfprintf_internal_r+0x123c>
   10fbc:	42000204 	addi	r8,r8,8
   10fc0:	d8802c17 	ldw	r2,176(sp)
   10fc4:	10000c26 	beq	r2,zero,10ff8 <___vfprintf_internal_r+0x900>
   10fc8:	d8801f17 	ldw	r2,124(sp)
   10fcc:	d9002704 	addi	r4,sp,156
   10fd0:	18c00084 	addi	r3,r3,2
   10fd4:	10800044 	addi	r2,r2,1
   10fd8:	41000015 	stw	r4,0(r8)
   10fdc:	01000084 	movi	r4,2
   10fe0:	41000115 	stw	r4,4(r8)
   10fe4:	d8c02015 	stw	r3,128(sp)
   10fe8:	d8801f15 	stw	r2,124(sp)
   10fec:	010001c4 	movi	r4,7
   10ff0:	20825816 	blt	r4,r2,11954 <___vfprintf_internal_r+0x125c>
   10ff4:	42000204 	addi	r8,r8,8
   10ff8:	d9003017 	ldw	r4,192(sp)
   10ffc:	00802004 	movi	r2,128
   11000:	2081bb26 	beq	r4,r2,116f0 <___vfprintf_internal_r+0xff8>
   11004:	d9402a17 	ldw	r5,168(sp)
   11008:	d8802b17 	ldw	r2,172(sp)
   1100c:	28adc83a 	sub	r22,r5,r2
   11010:	0580310e 	bge	zero,r22,110d8 <___vfprintf_internal_r+0x9e0>
   11014:	07000404 	movi	fp,16
   11018:	d8801f17 	ldw	r2,124(sp)
   1101c:	e584360e 	bge	fp,r22,120f8 <___vfprintf_internal_r+0x1a00>
   11020:	014000f4 	movhi	r5,3
   11024:	29658784 	addi	r5,r5,-27106
   11028:	dc402a15 	stw	r17,168(sp)
   1102c:	d9402c15 	stw	r5,176(sp)
   11030:	b023883a 	mov	r17,r22
   11034:	04c001c4 	movi	r19,7
   11038:	a82d883a 	mov	r22,r21
   1103c:	902b883a 	mov	r21,r18
   11040:	8025883a 	mov	r18,r16
   11044:	dc002d17 	ldw	r16,180(sp)
   11048:	00000306 	br	11058 <___vfprintf_internal_r+0x960>
   1104c:	8c7ffc04 	addi	r17,r17,-16
   11050:	42000204 	addi	r8,r8,8
   11054:	e440110e 	bge	fp,r17,1109c <___vfprintf_internal_r+0x9a4>
   11058:	18c00404 	addi	r3,r3,16
   1105c:	10800044 	addi	r2,r2,1
   11060:	45000015 	stw	r20,0(r8)
   11064:	47000115 	stw	fp,4(r8)
   11068:	d8c02015 	stw	r3,128(sp)
   1106c:	d8801f15 	stw	r2,124(sp)
   11070:	98bff60e 	bge	r19,r2,1104c <__alt_data_end+0xfc01104c>
   11074:	d9801e04 	addi	r6,sp,120
   11078:	b80b883a 	mov	r5,r23
   1107c:	8009883a 	mov	r4,r16
   11080:	0018a040 	call	18a04 <__sprint_r>
   11084:	103ea01e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11088:	8c7ffc04 	addi	r17,r17,-16
   1108c:	d8c02017 	ldw	r3,128(sp)
   11090:	d8801f17 	ldw	r2,124(sp)
   11094:	da000404 	addi	r8,sp,16
   11098:	e47fef16 	blt	fp,r17,11058 <__alt_data_end+0xfc011058>
   1109c:	9021883a 	mov	r16,r18
   110a0:	a825883a 	mov	r18,r21
   110a4:	b02b883a 	mov	r21,r22
   110a8:	882d883a 	mov	r22,r17
   110ac:	dc402a17 	ldw	r17,168(sp)
   110b0:	d9002c17 	ldw	r4,176(sp)
   110b4:	1d87883a 	add	r3,r3,r22
   110b8:	10800044 	addi	r2,r2,1
   110bc:	41000015 	stw	r4,0(r8)
   110c0:	45800115 	stw	r22,4(r8)
   110c4:	d8c02015 	stw	r3,128(sp)
   110c8:	d8801f15 	stw	r2,124(sp)
   110cc:	010001c4 	movi	r4,7
   110d0:	20821016 	blt	r4,r2,11914 <___vfprintf_internal_r+0x121c>
   110d4:	42000204 	addi	r8,r8,8
   110d8:	9080400c 	andi	r2,r18,256
   110dc:	10013a1e 	bne	r2,zero,115c8 <___vfprintf_internal_r+0xed0>
   110e0:	d9402b17 	ldw	r5,172(sp)
   110e4:	d8801f17 	ldw	r2,124(sp)
   110e8:	44000015 	stw	r16,0(r8)
   110ec:	1947883a 	add	r3,r3,r5
   110f0:	10800044 	addi	r2,r2,1
   110f4:	41400115 	stw	r5,4(r8)
   110f8:	d8c02015 	stw	r3,128(sp)
   110fc:	d8801f15 	stw	r2,124(sp)
   11100:	010001c4 	movi	r4,7
   11104:	2081f516 	blt	r4,r2,118dc <___vfprintf_internal_r+0x11e4>
   11108:	42000204 	addi	r8,r8,8
   1110c:	9480010c 	andi	r18,r18,4
   11110:	90003226 	beq	r18,zero,111dc <___vfprintf_internal_r+0xae4>
   11114:	d9403117 	ldw	r5,196(sp)
   11118:	d8802917 	ldw	r2,164(sp)
   1111c:	28a1c83a 	sub	r16,r5,r2
   11120:	04002e0e 	bge	zero,r16,111dc <___vfprintf_internal_r+0xae4>
   11124:	04400404 	movi	r17,16
   11128:	d8801f17 	ldw	r2,124(sp)
   1112c:	8c04c40e 	bge	r17,r16,12440 <___vfprintf_internal_r+0x1d48>
   11130:	014000f4 	movhi	r5,3
   11134:	29658b84 	addi	r5,r5,-27090
   11138:	d9403515 	stw	r5,212(sp)
   1113c:	048001c4 	movi	r18,7
   11140:	dcc02d17 	ldw	r19,180(sp)
   11144:	00000306 	br	11154 <___vfprintf_internal_r+0xa5c>
   11148:	843ffc04 	addi	r16,r16,-16
   1114c:	42000204 	addi	r8,r8,8
   11150:	8c00130e 	bge	r17,r16,111a0 <___vfprintf_internal_r+0xaa8>
   11154:	010000f4 	movhi	r4,3
   11158:	18c00404 	addi	r3,r3,16
   1115c:	10800044 	addi	r2,r2,1
   11160:	21258b84 	addi	r4,r4,-27090
   11164:	41000015 	stw	r4,0(r8)
   11168:	44400115 	stw	r17,4(r8)
   1116c:	d8c02015 	stw	r3,128(sp)
   11170:	d8801f15 	stw	r2,124(sp)
   11174:	90bff40e 	bge	r18,r2,11148 <__alt_data_end+0xfc011148>
   11178:	d9801e04 	addi	r6,sp,120
   1117c:	b80b883a 	mov	r5,r23
   11180:	9809883a 	mov	r4,r19
   11184:	0018a040 	call	18a04 <__sprint_r>
   11188:	103e5f1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   1118c:	843ffc04 	addi	r16,r16,-16
   11190:	d8c02017 	ldw	r3,128(sp)
   11194:	d8801f17 	ldw	r2,124(sp)
   11198:	da000404 	addi	r8,sp,16
   1119c:	8c3fed16 	blt	r17,r16,11154 <__alt_data_end+0xfc011154>
   111a0:	d9403517 	ldw	r5,212(sp)
   111a4:	1c07883a 	add	r3,r3,r16
   111a8:	10800044 	addi	r2,r2,1
   111ac:	41400015 	stw	r5,0(r8)
   111b0:	44000115 	stw	r16,4(r8)
   111b4:	d8c02015 	stw	r3,128(sp)
   111b8:	d8801f15 	stw	r2,124(sp)
   111bc:	010001c4 	movi	r4,7
   111c0:	2080060e 	bge	r4,r2,111dc <___vfprintf_internal_r+0xae4>
   111c4:	d9002d17 	ldw	r4,180(sp)
   111c8:	d9801e04 	addi	r6,sp,120
   111cc:	b80b883a 	mov	r5,r23
   111d0:	0018a040 	call	18a04 <__sprint_r>
   111d4:	103e4c1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   111d8:	d8c02017 	ldw	r3,128(sp)
   111dc:	d8803117 	ldw	r2,196(sp)
   111e0:	d9002917 	ldw	r4,164(sp)
   111e4:	1100010e 	bge	r2,r4,111ec <___vfprintf_internal_r+0xaf4>
   111e8:	2005883a 	mov	r2,r4
   111ec:	d9402f17 	ldw	r5,188(sp)
   111f0:	288b883a 	add	r5,r5,r2
   111f4:	d9402f15 	stw	r5,188(sp)
   111f8:	1801c01e 	bne	r3,zero,118fc <___vfprintf_internal_r+0x1204>
   111fc:	a8800007 	ldb	r2,0(r21)
   11200:	d8001f15 	stw	zero,124(sp)
   11204:	da000404 	addi	r8,sp,16
   11208:	103d751e 	bne	r2,zero,107e0 <__alt_data_end+0xfc0107e0>
   1120c:	a823883a 	mov	r17,r21
   11210:	003d8b06 	br	10840 <__alt_data_end+0xfc010840>
   11214:	8025883a 	mov	r18,r16
   11218:	dc002903 	ldbu	r16,164(sp)
   1121c:	e011883a 	mov	r8,fp
   11220:	84003fcc 	andi	r16,r16,255
   11224:	8005e51e 	bne	r16,zero,129bc <___vfprintf_internal_r+0x22c4>
   11228:	94800414 	ori	r18,r18,16
   1122c:	9080080c 	andi	r2,r18,32
   11230:	10022b26 	beq	r2,zero,11ae0 <___vfprintf_internal_r+0x13e8>
   11234:	d9002e17 	ldw	r4,184(sp)
   11238:	d9402a17 	ldw	r5,168(sp)
   1123c:	d8002785 	stb	zero,158(sp)
   11240:	20c00204 	addi	r3,r4,8
   11244:	24c00017 	ldw	r19,0(r4)
   11248:	25800117 	ldw	r22,4(r4)
   1124c:	28042e16 	blt	r5,zero,12308 <___vfprintf_internal_r+0x1c10>
   11250:	013fdfc4 	movi	r4,-129
   11254:	9d84b03a 	or	r2,r19,r22
   11258:	d8c02e15 	stw	r3,184(sp)
   1125c:	9124703a 	and	r18,r18,r4
   11260:	0039883a 	mov	fp,zero
   11264:	103e801e 	bne	r2,zero,10c68 <__alt_data_end+0xfc010c68>
   11268:	d9002a17 	ldw	r4,168(sp)
   1126c:	2002e01e 	bne	r4,zero,11df0 <___vfprintf_internal_r+0x16f8>
   11270:	d8002a15 	stw	zero,168(sp)
   11274:	d8002b15 	stw	zero,172(sp)
   11278:	dc001e04 	addi	r16,sp,120
   1127c:	003ef506 	br	10e54 <__alt_data_end+0xfc010e54>
   11280:	8025883a 	mov	r18,r16
   11284:	dc002903 	ldbu	r16,164(sp)
   11288:	e011883a 	mov	r8,fp
   1128c:	84003fcc 	andi	r16,r16,255
   11290:	8005ba1e 	bne	r16,zero,1297c <___vfprintf_internal_r+0x2284>
   11294:	010000f4 	movhi	r4,3
   11298:	21257304 	addi	r4,r4,-27188
   1129c:	d9003915 	stw	r4,228(sp)
   112a0:	9080080c 	andi	r2,r18,32
   112a4:	10006126 	beq	r2,zero,1142c <___vfprintf_internal_r+0xd34>
   112a8:	d9402e17 	ldw	r5,184(sp)
   112ac:	2cc00017 	ldw	r19,0(r5)
   112b0:	2d800117 	ldw	r22,4(r5)
   112b4:	29400204 	addi	r5,r5,8
   112b8:	d9402e15 	stw	r5,184(sp)
   112bc:	9080004c 	andi	r2,r18,1
   112c0:	1001ac26 	beq	r2,zero,11974 <___vfprintf_internal_r+0x127c>
   112c4:	9d84b03a 	or	r2,r19,r22
   112c8:	10038526 	beq	r2,zero,120e0 <___vfprintf_internal_r+0x19e8>
   112cc:	d8c02a17 	ldw	r3,168(sp)
   112d0:	00800c04 	movi	r2,48
   112d4:	d8802705 	stb	r2,156(sp)
   112d8:	dc402745 	stb	r17,157(sp)
   112dc:	d8002785 	stb	zero,158(sp)
   112e0:	90800094 	ori	r2,r18,2
   112e4:	18047916 	blt	r3,zero,124cc <___vfprintf_internal_r+0x1dd4>
   112e8:	00bfdfc4 	movi	r2,-129
   112ec:	90a4703a 	and	r18,r18,r2
   112f0:	94800094 	ori	r18,r18,2
   112f4:	0039883a 	mov	fp,zero
   112f8:	d9003917 	ldw	r4,228(sp)
   112fc:	dc001e04 	addi	r16,sp,120
   11300:	988003cc 	andi	r2,r19,15
   11304:	b006973a 	slli	r3,r22,28
   11308:	2085883a 	add	r2,r4,r2
   1130c:	9826d13a 	srli	r19,r19,4
   11310:	10800003 	ldbu	r2,0(r2)
   11314:	b02cd13a 	srli	r22,r22,4
   11318:	843fffc4 	addi	r16,r16,-1
   1131c:	1ce6b03a 	or	r19,r3,r19
   11320:	80800005 	stb	r2,0(r16)
   11324:	9d84b03a 	or	r2,r19,r22
   11328:	103ff51e 	bne	r2,zero,11300 <__alt_data_end+0xfc011300>
   1132c:	d8c02817 	ldw	r3,160(sp)
   11330:	1c07c83a 	sub	r3,r3,r16
   11334:	d8c02b15 	stw	r3,172(sp)
   11338:	003ec606 	br	10e54 <__alt_data_end+0xfc010e54>
   1133c:	8025883a 	mov	r18,r16
   11340:	dc002903 	ldbu	r16,164(sp)
   11344:	e011883a 	mov	r8,fp
   11348:	84003fcc 	andi	r16,r16,255
   1134c:	803e9626 	beq	r16,zero,10da8 <__alt_data_end+0xfc010da8>
   11350:	d8c02b03 	ldbu	r3,172(sp)
   11354:	d8c02785 	stb	r3,158(sp)
   11358:	003e9306 	br	10da8 <__alt_data_end+0xfc010da8>
   1135c:	00c00044 	movi	r3,1
   11360:	d8c02905 	stb	r3,164(sp)
   11364:	00c00ac4 	movi	r3,43
   11368:	d8c02b05 	stb	r3,172(sp)
   1136c:	ac400007 	ldb	r17,0(r21)
   11370:	003d4306 	br	10880 <__alt_data_end+0xfc010880>
   11374:	84000814 	ori	r16,r16,32
   11378:	ac400007 	ldb	r17,0(r21)
   1137c:	003d4006 	br	10880 <__alt_data_end+0xfc010880>
   11380:	d8802e17 	ldw	r2,184(sp)
   11384:	8025883a 	mov	r18,r16
   11388:	d8002785 	stb	zero,158(sp)
   1138c:	14000017 	ldw	r16,0(r2)
   11390:	e011883a 	mov	r8,fp
   11394:	14c00104 	addi	r19,r2,4
   11398:	80042d26 	beq	r16,zero,12450 <___vfprintf_internal_r+0x1d58>
   1139c:	d8c02a17 	ldw	r3,168(sp)
   113a0:	1803e416 	blt	r3,zero,12334 <___vfprintf_internal_r+0x1c3c>
   113a4:	180d883a 	mov	r6,r3
   113a8:	000b883a 	mov	r5,zero
   113ac:	8009883a 	mov	r4,r16
   113b0:	df003d15 	stw	fp,244(sp)
   113b4:	00158240 	call	15824 <memchr>
   113b8:	da003d17 	ldw	r8,244(sp)
   113bc:	10046826 	beq	r2,zero,12560 <___vfprintf_internal_r+0x1e68>
   113c0:	1405c83a 	sub	r2,r2,r16
   113c4:	d8802b15 	stw	r2,172(sp)
   113c8:	1003e016 	blt	r2,zero,1234c <___vfprintf_internal_r+0x1c54>
   113cc:	df002783 	ldbu	fp,158(sp)
   113d0:	d8802915 	stw	r2,164(sp)
   113d4:	dcc02e15 	stw	r19,184(sp)
   113d8:	d8002a15 	stw	zero,168(sp)
   113dc:	d8003215 	stw	zero,200(sp)
   113e0:	003ea206 	br	10e6c <__alt_data_end+0xfc010e6c>
   113e4:	8025883a 	mov	r18,r16
   113e8:	dc002903 	ldbu	r16,164(sp)
   113ec:	e011883a 	mov	r8,fp
   113f0:	84003fcc 	andi	r16,r16,255
   113f4:	803f8d26 	beq	r16,zero,1122c <__alt_data_end+0xfc01122c>
   113f8:	d8c02b03 	ldbu	r3,172(sp)
   113fc:	d8c02785 	stb	r3,158(sp)
   11400:	003f8a06 	br	1122c <__alt_data_end+0xfc01122c>
   11404:	8025883a 	mov	r18,r16
   11408:	dc002903 	ldbu	r16,164(sp)
   1140c:	e011883a 	mov	r8,fp
   11410:	84003fcc 	andi	r16,r16,255
   11414:	8005661e 	bne	r16,zero,129b0 <___vfprintf_internal_r+0x22b8>
   11418:	010000f4 	movhi	r4,3
   1141c:	21257804 	addi	r4,r4,-27168
   11420:	d9003915 	stw	r4,228(sp)
   11424:	9080080c 	andi	r2,r18,32
   11428:	103f9f1e 	bne	r2,zero,112a8 <__alt_data_end+0xfc0112a8>
   1142c:	9080040c 	andi	r2,r18,16
   11430:	1002eb26 	beq	r2,zero,11fe0 <___vfprintf_internal_r+0x18e8>
   11434:	d8802e17 	ldw	r2,184(sp)
   11438:	002d883a 	mov	r22,zero
   1143c:	14c00017 	ldw	r19,0(r2)
   11440:	10800104 	addi	r2,r2,4
   11444:	d8802e15 	stw	r2,184(sp)
   11448:	003f9c06 	br	112bc <__alt_data_end+0xfc0112bc>
   1144c:	d8802b07 	ldb	r2,172(sp)
   11450:	1002e11e 	bne	r2,zero,11fd8 <___vfprintf_internal_r+0x18e0>
   11454:	00c00044 	movi	r3,1
   11458:	d8c02905 	stb	r3,164(sp)
   1145c:	00c00804 	movi	r3,32
   11460:	d8c02b05 	stb	r3,172(sp)
   11464:	ac400007 	ldb	r17,0(r21)
   11468:	003d0506 	br	10880 <__alt_data_end+0xfc010880>
   1146c:	84000054 	ori	r16,r16,1
   11470:	ac400007 	ldb	r17,0(r21)
   11474:	003d0206 	br	10880 <__alt_data_end+0xfc010880>
   11478:	8025883a 	mov	r18,r16
   1147c:	dc002903 	ldbu	r16,164(sp)
   11480:	e011883a 	mov	r8,fp
   11484:	84003fcc 	andi	r16,r16,255
   11488:	803de726 	beq	r16,zero,10c28 <__alt_data_end+0xfc010c28>
   1148c:	d8c02b03 	ldbu	r3,172(sp)
   11490:	d8c02785 	stb	r3,158(sp)
   11494:	003de406 	br	10c28 <__alt_data_end+0xfc010c28>
   11498:	84001014 	ori	r16,r16,64
   1149c:	ac400007 	ldb	r17,0(r21)
   114a0:	003cf706 	br	10880 <__alt_data_end+0xfc010880>
   114a4:	ac400007 	ldb	r17,0(r21)
   114a8:	00801b04 	movi	r2,108
   114ac:	88838f26 	beq	r17,r2,122ec <___vfprintf_internal_r+0x1bf4>
   114b0:	84000414 	ori	r16,r16,16
   114b4:	003cf206 	br	10880 <__alt_data_end+0xfc010880>
   114b8:	8025883a 	mov	r18,r16
   114bc:	dc002903 	ldbu	r16,164(sp)
   114c0:	e011883a 	mov	r8,fp
   114c4:	84003fcc 	andi	r16,r16,255
   114c8:	80053f1e 	bne	r16,zero,129c8 <___vfprintf_internal_r+0x22d0>
   114cc:	9080080c 	andi	r2,r18,32
   114d0:	1002d226 	beq	r2,zero,1201c <___vfprintf_internal_r+0x1924>
   114d4:	d9002e17 	ldw	r4,184(sp)
   114d8:	d9402f17 	ldw	r5,188(sp)
   114dc:	20800017 	ldw	r2,0(r4)
   114e0:	2807d7fa 	srai	r3,r5,31
   114e4:	21000104 	addi	r4,r4,4
   114e8:	d9002e15 	stw	r4,184(sp)
   114ec:	11400015 	stw	r5,0(r2)
   114f0:	10c00115 	stw	r3,4(r2)
   114f4:	003cb806 	br	107d8 <__alt_data_end+0xfc0107d8>
   114f8:	d8c02e17 	ldw	r3,184(sp)
   114fc:	d9002e17 	ldw	r4,184(sp)
   11500:	8025883a 	mov	r18,r16
   11504:	18800017 	ldw	r2,0(r3)
   11508:	21000104 	addi	r4,r4,4
   1150c:	00c00044 	movi	r3,1
   11510:	e011883a 	mov	r8,fp
   11514:	d8c02915 	stw	r3,164(sp)
   11518:	d8002785 	stb	zero,158(sp)
   1151c:	d8801405 	stb	r2,80(sp)
   11520:	d9002e15 	stw	r4,184(sp)
   11524:	d8c02b15 	stw	r3,172(sp)
   11528:	d8002a15 	stw	zero,168(sp)
   1152c:	d8003215 	stw	zero,200(sp)
   11530:	dc001404 	addi	r16,sp,80
   11534:	0039883a 	mov	fp,zero
   11538:	003e5306 	br	10e88 <__alt_data_end+0xfc010e88>
   1153c:	010000f4 	movhi	r4,3
   11540:	21257804 	addi	r4,r4,-27168
   11544:	0039883a 	mov	fp,zero
   11548:	d9003915 	stw	r4,228(sp)
   1154c:	04401e04 	movi	r17,120
   11550:	003f6906 	br	112f8 <__alt_data_end+0xfc0112f8>
   11554:	8025883a 	mov	r18,r16
   11558:	dc002903 	ldbu	r16,164(sp)
   1155c:	e011883a 	mov	r8,fp
   11560:	84003fcc 	andi	r16,r16,255
   11564:	8005081e 	bne	r16,zero,12988 <___vfprintf_internal_r+0x2290>
   11568:	883d6126 	beq	r17,zero,10af0 <__alt_data_end+0xfc010af0>
   1156c:	00c00044 	movi	r3,1
   11570:	d8c02915 	stw	r3,164(sp)
   11574:	dc401405 	stb	r17,80(sp)
   11578:	d8002785 	stb	zero,158(sp)
   1157c:	003fe906 	br	11524 <__alt_data_end+0xfc011524>
   11580:	014000f4 	movhi	r5,3
   11584:	29657804 	addi	r5,r5,-27168
   11588:	d9403915 	stw	r5,228(sp)
   1158c:	d8c02e15 	stw	r3,184(sp)
   11590:	1025883a 	mov	r18,r2
   11594:	04401e04 	movi	r17,120
   11598:	9d84b03a 	or	r2,r19,r22
   1159c:	1000fc1e 	bne	r2,zero,11990 <___vfprintf_internal_r+0x1298>
   115a0:	0039883a 	mov	fp,zero
   115a4:	00800084 	movi	r2,2
   115a8:	10803fcc 	andi	r2,r2,255
   115ac:	00c00044 	movi	r3,1
   115b0:	10c20f26 	beq	r2,r3,11df0 <___vfprintf_internal_r+0x16f8>
   115b4:	00c00084 	movi	r3,2
   115b8:	10fd3326 	beq	r2,r3,10a88 <__alt_data_end+0xfc010a88>
   115bc:	003e0b06 	br	10dec <__alt_data_end+0xfc010dec>
   115c0:	d8c02017 	ldw	r3,128(sp)
   115c4:	003e7106 	br	10f8c <__alt_data_end+0xfc010f8c>
   115c8:	00801944 	movi	r2,101
   115cc:	14407e0e 	bge	r2,r17,117c8 <___vfprintf_internal_r+0x10d0>
   115d0:	d9003617 	ldw	r4,216(sp)
   115d4:	d9403817 	ldw	r5,224(sp)
   115d8:	000d883a 	mov	r6,zero
   115dc:	000f883a 	mov	r7,zero
   115e0:	d8c03c15 	stw	r3,240(sp)
   115e4:	da003d15 	stw	r8,244(sp)
   115e8:	001c7880 	call	1c788 <__eqdf2>
   115ec:	d8c03c17 	ldw	r3,240(sp)
   115f0:	da003d17 	ldw	r8,244(sp)
   115f4:	1000f71e 	bne	r2,zero,119d4 <___vfprintf_internal_r+0x12dc>
   115f8:	d8801f17 	ldw	r2,124(sp)
   115fc:	010000f4 	movhi	r4,3
   11600:	21257f04 	addi	r4,r4,-27140
   11604:	18c00044 	addi	r3,r3,1
   11608:	10800044 	addi	r2,r2,1
   1160c:	41000015 	stw	r4,0(r8)
   11610:	01000044 	movi	r4,1
   11614:	41000115 	stw	r4,4(r8)
   11618:	d8c02015 	stw	r3,128(sp)
   1161c:	d8801f15 	stw	r2,124(sp)
   11620:	010001c4 	movi	r4,7
   11624:	2082b816 	blt	r4,r2,12108 <___vfprintf_internal_r+0x1a10>
   11628:	42000204 	addi	r8,r8,8
   1162c:	d8802617 	ldw	r2,152(sp)
   11630:	d9403317 	ldw	r5,204(sp)
   11634:	11400216 	blt	r2,r5,11640 <___vfprintf_internal_r+0xf48>
   11638:	9080004c 	andi	r2,r18,1
   1163c:	103eb326 	beq	r2,zero,1110c <__alt_data_end+0xfc01110c>
   11640:	d8803717 	ldw	r2,220(sp)
   11644:	d9003417 	ldw	r4,208(sp)
   11648:	d9403717 	ldw	r5,220(sp)
   1164c:	1887883a 	add	r3,r3,r2
   11650:	d8801f17 	ldw	r2,124(sp)
   11654:	41000015 	stw	r4,0(r8)
   11658:	41400115 	stw	r5,4(r8)
   1165c:	10800044 	addi	r2,r2,1
   11660:	d8c02015 	stw	r3,128(sp)
   11664:	d8801f15 	stw	r2,124(sp)
   11668:	010001c4 	movi	r4,7
   1166c:	20832916 	blt	r4,r2,12314 <___vfprintf_internal_r+0x1c1c>
   11670:	42000204 	addi	r8,r8,8
   11674:	d8803317 	ldw	r2,204(sp)
   11678:	143fffc4 	addi	r16,r2,-1
   1167c:	043ea30e 	bge	zero,r16,1110c <__alt_data_end+0xfc01110c>
   11680:	04400404 	movi	r17,16
   11684:	d8801f17 	ldw	r2,124(sp)
   11688:	8c00880e 	bge	r17,r16,118ac <___vfprintf_internal_r+0x11b4>
   1168c:	014000f4 	movhi	r5,3
   11690:	29658784 	addi	r5,r5,-27106
   11694:	d9402c15 	stw	r5,176(sp)
   11698:	058001c4 	movi	r22,7
   1169c:	dcc02d17 	ldw	r19,180(sp)
   116a0:	00000306 	br	116b0 <___vfprintf_internal_r+0xfb8>
   116a4:	42000204 	addi	r8,r8,8
   116a8:	843ffc04 	addi	r16,r16,-16
   116ac:	8c00820e 	bge	r17,r16,118b8 <___vfprintf_internal_r+0x11c0>
   116b0:	18c00404 	addi	r3,r3,16
   116b4:	10800044 	addi	r2,r2,1
   116b8:	45000015 	stw	r20,0(r8)
   116bc:	44400115 	stw	r17,4(r8)
   116c0:	d8c02015 	stw	r3,128(sp)
   116c4:	d8801f15 	stw	r2,124(sp)
   116c8:	b0bff60e 	bge	r22,r2,116a4 <__alt_data_end+0xfc0116a4>
   116cc:	d9801e04 	addi	r6,sp,120
   116d0:	b80b883a 	mov	r5,r23
   116d4:	9809883a 	mov	r4,r19
   116d8:	0018a040 	call	18a04 <__sprint_r>
   116dc:	103d0a1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   116e0:	d8c02017 	ldw	r3,128(sp)
   116e4:	d8801f17 	ldw	r2,124(sp)
   116e8:	da000404 	addi	r8,sp,16
   116ec:	003fee06 	br	116a8 <__alt_data_end+0xfc0116a8>
   116f0:	d9403117 	ldw	r5,196(sp)
   116f4:	d8802917 	ldw	r2,164(sp)
   116f8:	28adc83a 	sub	r22,r5,r2
   116fc:	05be410e 	bge	zero,r22,11004 <__alt_data_end+0xfc011004>
   11700:	07000404 	movi	fp,16
   11704:	d8801f17 	ldw	r2,124(sp)
   11708:	e5838f0e 	bge	fp,r22,12548 <___vfprintf_internal_r+0x1e50>
   1170c:	014000f4 	movhi	r5,3
   11710:	29658784 	addi	r5,r5,-27106
   11714:	dc403015 	stw	r17,192(sp)
   11718:	d9402c15 	stw	r5,176(sp)
   1171c:	b023883a 	mov	r17,r22
   11720:	04c001c4 	movi	r19,7
   11724:	a82d883a 	mov	r22,r21
   11728:	902b883a 	mov	r21,r18
   1172c:	8025883a 	mov	r18,r16
   11730:	dc002d17 	ldw	r16,180(sp)
   11734:	00000306 	br	11744 <___vfprintf_internal_r+0x104c>
   11738:	8c7ffc04 	addi	r17,r17,-16
   1173c:	42000204 	addi	r8,r8,8
   11740:	e440110e 	bge	fp,r17,11788 <___vfprintf_internal_r+0x1090>
   11744:	18c00404 	addi	r3,r3,16
   11748:	10800044 	addi	r2,r2,1
   1174c:	45000015 	stw	r20,0(r8)
   11750:	47000115 	stw	fp,4(r8)
   11754:	d8c02015 	stw	r3,128(sp)
   11758:	d8801f15 	stw	r2,124(sp)
   1175c:	98bff60e 	bge	r19,r2,11738 <__alt_data_end+0xfc011738>
   11760:	d9801e04 	addi	r6,sp,120
   11764:	b80b883a 	mov	r5,r23
   11768:	8009883a 	mov	r4,r16
   1176c:	0018a040 	call	18a04 <__sprint_r>
   11770:	103ce51e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11774:	8c7ffc04 	addi	r17,r17,-16
   11778:	d8c02017 	ldw	r3,128(sp)
   1177c:	d8801f17 	ldw	r2,124(sp)
   11780:	da000404 	addi	r8,sp,16
   11784:	e47fef16 	blt	fp,r17,11744 <__alt_data_end+0xfc011744>
   11788:	9021883a 	mov	r16,r18
   1178c:	a825883a 	mov	r18,r21
   11790:	b02b883a 	mov	r21,r22
   11794:	882d883a 	mov	r22,r17
   11798:	dc403017 	ldw	r17,192(sp)
   1179c:	d9002c17 	ldw	r4,176(sp)
   117a0:	1d87883a 	add	r3,r3,r22
   117a4:	10800044 	addi	r2,r2,1
   117a8:	41000015 	stw	r4,0(r8)
   117ac:	45800115 	stw	r22,4(r8)
   117b0:	d8c02015 	stw	r3,128(sp)
   117b4:	d8801f15 	stw	r2,124(sp)
   117b8:	010001c4 	movi	r4,7
   117bc:	20818e16 	blt	r4,r2,11df8 <___vfprintf_internal_r+0x1700>
   117c0:	42000204 	addi	r8,r8,8
   117c4:	003e0f06 	br	11004 <__alt_data_end+0xfc011004>
   117c8:	d9403317 	ldw	r5,204(sp)
   117cc:	00800044 	movi	r2,1
   117d0:	18c00044 	addi	r3,r3,1
   117d4:	1141530e 	bge	r2,r5,11d24 <___vfprintf_internal_r+0x162c>
   117d8:	dc401f17 	ldw	r17,124(sp)
   117dc:	00800044 	movi	r2,1
   117e0:	40800115 	stw	r2,4(r8)
   117e4:	8c400044 	addi	r17,r17,1
   117e8:	44000015 	stw	r16,0(r8)
   117ec:	d8c02015 	stw	r3,128(sp)
   117f0:	dc401f15 	stw	r17,124(sp)
   117f4:	008001c4 	movi	r2,7
   117f8:	14416b16 	blt	r2,r17,11da8 <___vfprintf_internal_r+0x16b0>
   117fc:	42000204 	addi	r8,r8,8
   11800:	d8803717 	ldw	r2,220(sp)
   11804:	d9003417 	ldw	r4,208(sp)
   11808:	8c400044 	addi	r17,r17,1
   1180c:	10c7883a 	add	r3,r2,r3
   11810:	40800115 	stw	r2,4(r8)
   11814:	41000015 	stw	r4,0(r8)
   11818:	d8c02015 	stw	r3,128(sp)
   1181c:	dc401f15 	stw	r17,124(sp)
   11820:	008001c4 	movi	r2,7
   11824:	14416916 	blt	r2,r17,11dcc <___vfprintf_internal_r+0x16d4>
   11828:	45800204 	addi	r22,r8,8
   1182c:	d9003617 	ldw	r4,216(sp)
   11830:	d9403817 	ldw	r5,224(sp)
   11834:	000d883a 	mov	r6,zero
   11838:	000f883a 	mov	r7,zero
   1183c:	d8c03c15 	stw	r3,240(sp)
   11840:	001c7880 	call	1c788 <__eqdf2>
   11844:	d8c03c17 	ldw	r3,240(sp)
   11848:	1000bc26 	beq	r2,zero,11b3c <___vfprintf_internal_r+0x1444>
   1184c:	d9403317 	ldw	r5,204(sp)
   11850:	84000044 	addi	r16,r16,1
   11854:	8c400044 	addi	r17,r17,1
   11858:	28bfffc4 	addi	r2,r5,-1
   1185c:	1887883a 	add	r3,r3,r2
   11860:	b0800115 	stw	r2,4(r22)
   11864:	b4000015 	stw	r16,0(r22)
   11868:	d8c02015 	stw	r3,128(sp)
   1186c:	dc401f15 	stw	r17,124(sp)
   11870:	008001c4 	movi	r2,7
   11874:	14414316 	blt	r2,r17,11d84 <___vfprintf_internal_r+0x168c>
   11878:	b5800204 	addi	r22,r22,8
   1187c:	d9003a17 	ldw	r4,232(sp)
   11880:	df0022c4 	addi	fp,sp,139
   11884:	8c400044 	addi	r17,r17,1
   11888:	20c7883a 	add	r3,r4,r3
   1188c:	b7000015 	stw	fp,0(r22)
   11890:	b1000115 	stw	r4,4(r22)
   11894:	d8c02015 	stw	r3,128(sp)
   11898:	dc401f15 	stw	r17,124(sp)
   1189c:	008001c4 	movi	r2,7
   118a0:	14400e16 	blt	r2,r17,118dc <___vfprintf_internal_r+0x11e4>
   118a4:	b2000204 	addi	r8,r22,8
   118a8:	003e1806 	br	1110c <__alt_data_end+0xfc01110c>
   118ac:	010000f4 	movhi	r4,3
   118b0:	21258784 	addi	r4,r4,-27106
   118b4:	d9002c15 	stw	r4,176(sp)
   118b8:	d9002c17 	ldw	r4,176(sp)
   118bc:	1c07883a 	add	r3,r3,r16
   118c0:	44000115 	stw	r16,4(r8)
   118c4:	41000015 	stw	r4,0(r8)
   118c8:	10800044 	addi	r2,r2,1
   118cc:	d8c02015 	stw	r3,128(sp)
   118d0:	d8801f15 	stw	r2,124(sp)
   118d4:	010001c4 	movi	r4,7
   118d8:	20be0b0e 	bge	r4,r2,11108 <__alt_data_end+0xfc011108>
   118dc:	d9002d17 	ldw	r4,180(sp)
   118e0:	d9801e04 	addi	r6,sp,120
   118e4:	b80b883a 	mov	r5,r23
   118e8:	0018a040 	call	18a04 <__sprint_r>
   118ec:	103c861e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   118f0:	d8c02017 	ldw	r3,128(sp)
   118f4:	da000404 	addi	r8,sp,16
   118f8:	003e0406 	br	1110c <__alt_data_end+0xfc01110c>
   118fc:	d9002d17 	ldw	r4,180(sp)
   11900:	d9801e04 	addi	r6,sp,120
   11904:	b80b883a 	mov	r5,r23
   11908:	0018a040 	call	18a04 <__sprint_r>
   1190c:	103e3b26 	beq	r2,zero,111fc <__alt_data_end+0xfc0111fc>
   11910:	003c7d06 	br	10b08 <__alt_data_end+0xfc010b08>
   11914:	d9002d17 	ldw	r4,180(sp)
   11918:	d9801e04 	addi	r6,sp,120
   1191c:	b80b883a 	mov	r5,r23
   11920:	0018a040 	call	18a04 <__sprint_r>
   11924:	103c781e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11928:	d8c02017 	ldw	r3,128(sp)
   1192c:	da000404 	addi	r8,sp,16
   11930:	003de906 	br	110d8 <__alt_data_end+0xfc0110d8>
   11934:	d9002d17 	ldw	r4,180(sp)
   11938:	d9801e04 	addi	r6,sp,120
   1193c:	b80b883a 	mov	r5,r23
   11940:	0018a040 	call	18a04 <__sprint_r>
   11944:	103c701e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11948:	d8c02017 	ldw	r3,128(sp)
   1194c:	da000404 	addi	r8,sp,16
   11950:	003d9b06 	br	10fc0 <__alt_data_end+0xfc010fc0>
   11954:	d9002d17 	ldw	r4,180(sp)
   11958:	d9801e04 	addi	r6,sp,120
   1195c:	b80b883a 	mov	r5,r23
   11960:	0018a040 	call	18a04 <__sprint_r>
   11964:	103c681e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11968:	d8c02017 	ldw	r3,128(sp)
   1196c:	da000404 	addi	r8,sp,16
   11970:	003da106 	br	10ff8 <__alt_data_end+0xfc010ff8>
   11974:	d9402a17 	ldw	r5,168(sp)
   11978:	d8002785 	stb	zero,158(sp)
   1197c:	283f0616 	blt	r5,zero,11598 <__alt_data_end+0xfc011598>
   11980:	00ffdfc4 	movi	r3,-129
   11984:	9d84b03a 	or	r2,r19,r22
   11988:	90e4703a 	and	r18,r18,r3
   1198c:	103c3b26 	beq	r2,zero,10a7c <__alt_data_end+0xfc010a7c>
   11990:	0039883a 	mov	fp,zero
   11994:	003e5806 	br	112f8 <__alt_data_end+0xfc0112f8>
   11998:	9080040c 	andi	r2,r18,16
   1199c:	1001b326 	beq	r2,zero,1206c <___vfprintf_internal_r+0x1974>
   119a0:	d8c02e17 	ldw	r3,184(sp)
   119a4:	d9002a17 	ldw	r4,168(sp)
   119a8:	d8002785 	stb	zero,158(sp)
   119ac:	18800104 	addi	r2,r3,4
   119b0:	1cc00017 	ldw	r19,0(r3)
   119b4:	002d883a 	mov	r22,zero
   119b8:	2001b516 	blt	r4,zero,12090 <___vfprintf_internal_r+0x1998>
   119bc:	00ffdfc4 	movi	r3,-129
   119c0:	d8802e15 	stw	r2,184(sp)
   119c4:	90e4703a 	and	r18,r18,r3
   119c8:	983d0526 	beq	r19,zero,10de0 <__alt_data_end+0xfc010de0>
   119cc:	0039883a 	mov	fp,zero
   119d0:	003d0806 	br	10df4 <__alt_data_end+0xfc010df4>
   119d4:	dc402617 	ldw	r17,152(sp)
   119d8:	0441d30e 	bge	zero,r17,12128 <___vfprintf_internal_r+0x1a30>
   119dc:	dc403217 	ldw	r17,200(sp)
   119e0:	d8803317 	ldw	r2,204(sp)
   119e4:	1440010e 	bge	r2,r17,119ec <___vfprintf_internal_r+0x12f4>
   119e8:	1023883a 	mov	r17,r2
   119ec:	04400a0e 	bge	zero,r17,11a18 <___vfprintf_internal_r+0x1320>
   119f0:	d8801f17 	ldw	r2,124(sp)
   119f4:	1c47883a 	add	r3,r3,r17
   119f8:	44000015 	stw	r16,0(r8)
   119fc:	10800044 	addi	r2,r2,1
   11a00:	44400115 	stw	r17,4(r8)
   11a04:	d8c02015 	stw	r3,128(sp)
   11a08:	d8801f15 	stw	r2,124(sp)
   11a0c:	010001c4 	movi	r4,7
   11a10:	20826516 	blt	r4,r2,123a8 <___vfprintf_internal_r+0x1cb0>
   11a14:	42000204 	addi	r8,r8,8
   11a18:	88026116 	blt	r17,zero,123a0 <___vfprintf_internal_r+0x1ca8>
   11a1c:	d9003217 	ldw	r4,200(sp)
   11a20:	2463c83a 	sub	r17,r4,r17
   11a24:	04407b0e 	bge	zero,r17,11c14 <___vfprintf_internal_r+0x151c>
   11a28:	05800404 	movi	r22,16
   11a2c:	d8801f17 	ldw	r2,124(sp)
   11a30:	b4419d0e 	bge	r22,r17,120a8 <___vfprintf_internal_r+0x19b0>
   11a34:	010000f4 	movhi	r4,3
   11a38:	21258784 	addi	r4,r4,-27106
   11a3c:	d9002c15 	stw	r4,176(sp)
   11a40:	070001c4 	movi	fp,7
   11a44:	dcc02d17 	ldw	r19,180(sp)
   11a48:	00000306 	br	11a58 <___vfprintf_internal_r+0x1360>
   11a4c:	42000204 	addi	r8,r8,8
   11a50:	8c7ffc04 	addi	r17,r17,-16
   11a54:	b441970e 	bge	r22,r17,120b4 <___vfprintf_internal_r+0x19bc>
   11a58:	18c00404 	addi	r3,r3,16
   11a5c:	10800044 	addi	r2,r2,1
   11a60:	45000015 	stw	r20,0(r8)
   11a64:	45800115 	stw	r22,4(r8)
   11a68:	d8c02015 	stw	r3,128(sp)
   11a6c:	d8801f15 	stw	r2,124(sp)
   11a70:	e0bff60e 	bge	fp,r2,11a4c <__alt_data_end+0xfc011a4c>
   11a74:	d9801e04 	addi	r6,sp,120
   11a78:	b80b883a 	mov	r5,r23
   11a7c:	9809883a 	mov	r4,r19
   11a80:	0018a040 	call	18a04 <__sprint_r>
   11a84:	103c201e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11a88:	d8c02017 	ldw	r3,128(sp)
   11a8c:	d8801f17 	ldw	r2,124(sp)
   11a90:	da000404 	addi	r8,sp,16
   11a94:	003fee06 	br	11a50 <__alt_data_end+0xfc011a50>
   11a98:	d9002d17 	ldw	r4,180(sp)
   11a9c:	d9801e04 	addi	r6,sp,120
   11aa0:	b80b883a 	mov	r5,r23
   11aa4:	0018a040 	call	18a04 <__sprint_r>
   11aa8:	103c171e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11aac:	d8c02017 	ldw	r3,128(sp)
   11ab0:	df002787 	ldb	fp,158(sp)
   11ab4:	da000404 	addi	r8,sp,16
   11ab8:	003d3406 	br	10f8c <__alt_data_end+0xfc010f8c>
   11abc:	9080040c 	andi	r2,r18,16
   11ac0:	10016126 	beq	r2,zero,12048 <___vfprintf_internal_r+0x1950>
   11ac4:	d9402e17 	ldw	r5,184(sp)
   11ac8:	2cc00017 	ldw	r19,0(r5)
   11acc:	29400104 	addi	r5,r5,4
   11ad0:	d9402e15 	stw	r5,184(sp)
   11ad4:	982dd7fa 	srai	r22,r19,31
   11ad8:	b005883a 	mov	r2,r22
   11adc:	003c5a06 	br	10c48 <__alt_data_end+0xfc010c48>
   11ae0:	9080040c 	andi	r2,r18,16
   11ae4:	10003526 	beq	r2,zero,11bbc <___vfprintf_internal_r+0x14c4>
   11ae8:	d8c02e17 	ldw	r3,184(sp)
   11aec:	d9002a17 	ldw	r4,168(sp)
   11af0:	d8002785 	stb	zero,158(sp)
   11af4:	18800104 	addi	r2,r3,4
   11af8:	1cc00017 	ldw	r19,0(r3)
   11afc:	002d883a 	mov	r22,zero
   11b00:	20003716 	blt	r4,zero,11be0 <___vfprintf_internal_r+0x14e8>
   11b04:	00ffdfc4 	movi	r3,-129
   11b08:	d8802e15 	stw	r2,184(sp)
   11b0c:	90e4703a 	and	r18,r18,r3
   11b10:	0039883a 	mov	fp,zero
   11b14:	983dd426 	beq	r19,zero,11268 <__alt_data_end+0xfc011268>
   11b18:	00800244 	movi	r2,9
   11b1c:	14fc5336 	bltu	r2,r19,10c6c <__alt_data_end+0xfc010c6c>
   11b20:	d8c02817 	ldw	r3,160(sp)
   11b24:	dc001dc4 	addi	r16,sp,119
   11b28:	9cc00c04 	addi	r19,r19,48
   11b2c:	1c07c83a 	sub	r3,r3,r16
   11b30:	dcc01dc5 	stb	r19,119(sp)
   11b34:	d8c02b15 	stw	r3,172(sp)
   11b38:	003cc606 	br	10e54 <__alt_data_end+0xfc010e54>
   11b3c:	d8803317 	ldw	r2,204(sp)
   11b40:	143fffc4 	addi	r16,r2,-1
   11b44:	043f4d0e 	bge	zero,r16,1187c <__alt_data_end+0xfc01187c>
   11b48:	07000404 	movi	fp,16
   11b4c:	e400810e 	bge	fp,r16,11d54 <___vfprintf_internal_r+0x165c>
   11b50:	014000f4 	movhi	r5,3
   11b54:	29658784 	addi	r5,r5,-27106
   11b58:	d9402c15 	stw	r5,176(sp)
   11b5c:	01c001c4 	movi	r7,7
   11b60:	dcc02d17 	ldw	r19,180(sp)
   11b64:	00000306 	br	11b74 <___vfprintf_internal_r+0x147c>
   11b68:	b5800204 	addi	r22,r22,8
   11b6c:	843ffc04 	addi	r16,r16,-16
   11b70:	e4007b0e 	bge	fp,r16,11d60 <___vfprintf_internal_r+0x1668>
   11b74:	18c00404 	addi	r3,r3,16
   11b78:	8c400044 	addi	r17,r17,1
   11b7c:	b5000015 	stw	r20,0(r22)
   11b80:	b7000115 	stw	fp,4(r22)
   11b84:	d8c02015 	stw	r3,128(sp)
   11b88:	dc401f15 	stw	r17,124(sp)
   11b8c:	3c7ff60e 	bge	r7,r17,11b68 <__alt_data_end+0xfc011b68>
   11b90:	d9801e04 	addi	r6,sp,120
   11b94:	b80b883a 	mov	r5,r23
   11b98:	9809883a 	mov	r4,r19
   11b9c:	d9c03c15 	stw	r7,240(sp)
   11ba0:	0018a040 	call	18a04 <__sprint_r>
   11ba4:	d9c03c17 	ldw	r7,240(sp)
   11ba8:	103bd71e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11bac:	d8c02017 	ldw	r3,128(sp)
   11bb0:	dc401f17 	ldw	r17,124(sp)
   11bb4:	dd800404 	addi	r22,sp,16
   11bb8:	003fec06 	br	11b6c <__alt_data_end+0xfc011b6c>
   11bbc:	9080100c 	andi	r2,r18,64
   11bc0:	d8002785 	stb	zero,158(sp)
   11bc4:	10010e26 	beq	r2,zero,12000 <___vfprintf_internal_r+0x1908>
   11bc8:	d9402e17 	ldw	r5,184(sp)
   11bcc:	d8c02a17 	ldw	r3,168(sp)
   11bd0:	002d883a 	mov	r22,zero
   11bd4:	28800104 	addi	r2,r5,4
   11bd8:	2cc0000b 	ldhu	r19,0(r5)
   11bdc:	183fc90e 	bge	r3,zero,11b04 <__alt_data_end+0xfc011b04>
   11be0:	d8802e15 	stw	r2,184(sp)
   11be4:	0039883a 	mov	fp,zero
   11be8:	9d84b03a 	or	r2,r19,r22
   11bec:	103c1e1e 	bne	r2,zero,10c68 <__alt_data_end+0xfc010c68>
   11bf0:	00800044 	movi	r2,1
   11bf4:	003e6c06 	br	115a8 <__alt_data_end+0xfc0115a8>
   11bf8:	d9002d17 	ldw	r4,180(sp)
   11bfc:	d9801e04 	addi	r6,sp,120
   11c00:	b80b883a 	mov	r5,r23
   11c04:	0018a040 	call	18a04 <__sprint_r>
   11c08:	103bbf1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11c0c:	d8c02017 	ldw	r3,128(sp)
   11c10:	da000404 	addi	r8,sp,16
   11c14:	d9003217 	ldw	r4,200(sp)
   11c18:	d8802617 	ldw	r2,152(sp)
   11c1c:	d9403317 	ldw	r5,204(sp)
   11c20:	8123883a 	add	r17,r16,r4
   11c24:	11400216 	blt	r2,r5,11c30 <___vfprintf_internal_r+0x1538>
   11c28:	9100004c 	andi	r4,r18,1
   11c2c:	20000d26 	beq	r4,zero,11c64 <___vfprintf_internal_r+0x156c>
   11c30:	d9003717 	ldw	r4,220(sp)
   11c34:	d9403417 	ldw	r5,208(sp)
   11c38:	1907883a 	add	r3,r3,r4
   11c3c:	d9001f17 	ldw	r4,124(sp)
   11c40:	41400015 	stw	r5,0(r8)
   11c44:	d9403717 	ldw	r5,220(sp)
   11c48:	21000044 	addi	r4,r4,1
   11c4c:	d8c02015 	stw	r3,128(sp)
   11c50:	41400115 	stw	r5,4(r8)
   11c54:	d9001f15 	stw	r4,124(sp)
   11c58:	014001c4 	movi	r5,7
   11c5c:	2901e816 	blt	r5,r4,12400 <___vfprintf_internal_r+0x1d08>
   11c60:	42000204 	addi	r8,r8,8
   11c64:	d9003317 	ldw	r4,204(sp)
   11c68:	8121883a 	add	r16,r16,r4
   11c6c:	2085c83a 	sub	r2,r4,r2
   11c70:	8461c83a 	sub	r16,r16,r17
   11c74:	1400010e 	bge	r2,r16,11c7c <___vfprintf_internal_r+0x1584>
   11c78:	1021883a 	mov	r16,r2
   11c7c:	04000a0e 	bge	zero,r16,11ca8 <___vfprintf_internal_r+0x15b0>
   11c80:	d9001f17 	ldw	r4,124(sp)
   11c84:	1c07883a 	add	r3,r3,r16
   11c88:	44400015 	stw	r17,0(r8)
   11c8c:	21000044 	addi	r4,r4,1
   11c90:	44000115 	stw	r16,4(r8)
   11c94:	d8c02015 	stw	r3,128(sp)
   11c98:	d9001f15 	stw	r4,124(sp)
   11c9c:	014001c4 	movi	r5,7
   11ca0:	2901fb16 	blt	r5,r4,12490 <___vfprintf_internal_r+0x1d98>
   11ca4:	42000204 	addi	r8,r8,8
   11ca8:	8001f716 	blt	r16,zero,12488 <___vfprintf_internal_r+0x1d90>
   11cac:	1421c83a 	sub	r16,r2,r16
   11cb0:	043d160e 	bge	zero,r16,1110c <__alt_data_end+0xfc01110c>
   11cb4:	04400404 	movi	r17,16
   11cb8:	d8801f17 	ldw	r2,124(sp)
   11cbc:	8c3efb0e 	bge	r17,r16,118ac <__alt_data_end+0xfc0118ac>
   11cc0:	014000f4 	movhi	r5,3
   11cc4:	29658784 	addi	r5,r5,-27106
   11cc8:	d9402c15 	stw	r5,176(sp)
   11ccc:	058001c4 	movi	r22,7
   11cd0:	dcc02d17 	ldw	r19,180(sp)
   11cd4:	00000306 	br	11ce4 <___vfprintf_internal_r+0x15ec>
   11cd8:	42000204 	addi	r8,r8,8
   11cdc:	843ffc04 	addi	r16,r16,-16
   11ce0:	8c3ef50e 	bge	r17,r16,118b8 <__alt_data_end+0xfc0118b8>
   11ce4:	18c00404 	addi	r3,r3,16
   11ce8:	10800044 	addi	r2,r2,1
   11cec:	45000015 	stw	r20,0(r8)
   11cf0:	44400115 	stw	r17,4(r8)
   11cf4:	d8c02015 	stw	r3,128(sp)
   11cf8:	d8801f15 	stw	r2,124(sp)
   11cfc:	b0bff60e 	bge	r22,r2,11cd8 <__alt_data_end+0xfc011cd8>
   11d00:	d9801e04 	addi	r6,sp,120
   11d04:	b80b883a 	mov	r5,r23
   11d08:	9809883a 	mov	r4,r19
   11d0c:	0018a040 	call	18a04 <__sprint_r>
   11d10:	103b7d1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11d14:	d8c02017 	ldw	r3,128(sp)
   11d18:	d8801f17 	ldw	r2,124(sp)
   11d1c:	da000404 	addi	r8,sp,16
   11d20:	003fee06 	br	11cdc <__alt_data_end+0xfc011cdc>
   11d24:	9088703a 	and	r4,r18,r2
   11d28:	203eab1e 	bne	r4,zero,117d8 <__alt_data_end+0xfc0117d8>
   11d2c:	dc401f17 	ldw	r17,124(sp)
   11d30:	40800115 	stw	r2,4(r8)
   11d34:	44000015 	stw	r16,0(r8)
   11d38:	8c400044 	addi	r17,r17,1
   11d3c:	d8c02015 	stw	r3,128(sp)
   11d40:	dc401f15 	stw	r17,124(sp)
   11d44:	008001c4 	movi	r2,7
   11d48:	14400e16 	blt	r2,r17,11d84 <___vfprintf_internal_r+0x168c>
   11d4c:	45800204 	addi	r22,r8,8
   11d50:	003eca06 	br	1187c <__alt_data_end+0xfc01187c>
   11d54:	010000f4 	movhi	r4,3
   11d58:	21258784 	addi	r4,r4,-27106
   11d5c:	d9002c15 	stw	r4,176(sp)
   11d60:	d8802c17 	ldw	r2,176(sp)
   11d64:	1c07883a 	add	r3,r3,r16
   11d68:	8c400044 	addi	r17,r17,1
   11d6c:	b0800015 	stw	r2,0(r22)
   11d70:	b4000115 	stw	r16,4(r22)
   11d74:	d8c02015 	stw	r3,128(sp)
   11d78:	dc401f15 	stw	r17,124(sp)
   11d7c:	008001c4 	movi	r2,7
   11d80:	147ebd0e 	bge	r2,r17,11878 <__alt_data_end+0xfc011878>
   11d84:	d9002d17 	ldw	r4,180(sp)
   11d88:	d9801e04 	addi	r6,sp,120
   11d8c:	b80b883a 	mov	r5,r23
   11d90:	0018a040 	call	18a04 <__sprint_r>
   11d94:	103b5c1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11d98:	d8c02017 	ldw	r3,128(sp)
   11d9c:	dc401f17 	ldw	r17,124(sp)
   11da0:	dd800404 	addi	r22,sp,16
   11da4:	003eb506 	br	1187c <__alt_data_end+0xfc01187c>
   11da8:	d9002d17 	ldw	r4,180(sp)
   11dac:	d9801e04 	addi	r6,sp,120
   11db0:	b80b883a 	mov	r5,r23
   11db4:	0018a040 	call	18a04 <__sprint_r>
   11db8:	103b531e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11dbc:	d8c02017 	ldw	r3,128(sp)
   11dc0:	dc401f17 	ldw	r17,124(sp)
   11dc4:	da000404 	addi	r8,sp,16
   11dc8:	003e8d06 	br	11800 <__alt_data_end+0xfc011800>
   11dcc:	d9002d17 	ldw	r4,180(sp)
   11dd0:	d9801e04 	addi	r6,sp,120
   11dd4:	b80b883a 	mov	r5,r23
   11dd8:	0018a040 	call	18a04 <__sprint_r>
   11ddc:	103b4a1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11de0:	d8c02017 	ldw	r3,128(sp)
   11de4:	dc401f17 	ldw	r17,124(sp)
   11de8:	dd800404 	addi	r22,sp,16
   11dec:	003e8f06 	br	1182c <__alt_data_end+0xfc01182c>
   11df0:	0027883a 	mov	r19,zero
   11df4:	003f4a06 	br	11b20 <__alt_data_end+0xfc011b20>
   11df8:	d9002d17 	ldw	r4,180(sp)
   11dfc:	d9801e04 	addi	r6,sp,120
   11e00:	b80b883a 	mov	r5,r23
   11e04:	0018a040 	call	18a04 <__sprint_r>
   11e08:	103b3f1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   11e0c:	d8c02017 	ldw	r3,128(sp)
   11e10:	da000404 	addi	r8,sp,16
   11e14:	003c7b06 	br	11004 <__alt_data_end+0xfc011004>
   11e18:	d9402a17 	ldw	r5,168(sp)
   11e1c:	04e7c83a 	sub	r19,zero,r19
   11e20:	07000b44 	movi	fp,45
   11e24:	9804c03a 	cmpne	r2,r19,zero
   11e28:	05adc83a 	sub	r22,zero,r22
   11e2c:	df002785 	stb	fp,158(sp)
   11e30:	b0adc83a 	sub	r22,r22,r2
   11e34:	28017b16 	blt	r5,zero,12424 <___vfprintf_internal_r+0x1d2c>
   11e38:	00bfdfc4 	movi	r2,-129
   11e3c:	90a4703a 	and	r18,r18,r2
   11e40:	003b8906 	br	10c68 <__alt_data_end+0xfc010c68>
   11e44:	d9003617 	ldw	r4,216(sp)
   11e48:	d9403817 	ldw	r5,224(sp)
   11e4c:	da003d15 	stw	r8,244(sp)
   11e50:	00171e80 	call	171e8 <__fpclassifyd>
   11e54:	da003d17 	ldw	r8,244(sp)
   11e58:	1000f026 	beq	r2,zero,1221c <___vfprintf_internal_r+0x1b24>
   11e5c:	d9002a17 	ldw	r4,168(sp)
   11e60:	05bff7c4 	movi	r22,-33
   11e64:	00bfffc4 	movi	r2,-1
   11e68:	8dac703a 	and	r22,r17,r22
   11e6c:	20820026 	beq	r4,r2,12670 <___vfprintf_internal_r+0x1f78>
   11e70:	008011c4 	movi	r2,71
   11e74:	b081f726 	beq	r22,r2,12654 <___vfprintf_internal_r+0x1f5c>
   11e78:	d9003817 	ldw	r4,224(sp)
   11e7c:	90c04014 	ori	r3,r18,256
   11e80:	d8c02c15 	stw	r3,176(sp)
   11e84:	20021516 	blt	r4,zero,126dc <___vfprintf_internal_r+0x1fe4>
   11e88:	dcc03817 	ldw	r19,224(sp)
   11e8c:	d8002905 	stb	zero,164(sp)
   11e90:	00801984 	movi	r2,102
   11e94:	8881f926 	beq	r17,r2,1267c <___vfprintf_internal_r+0x1f84>
   11e98:	00801184 	movi	r2,70
   11e9c:	88821c26 	beq	r17,r2,12710 <___vfprintf_internal_r+0x2018>
   11ea0:	00801144 	movi	r2,69
   11ea4:	b081ef26 	beq	r22,r2,12664 <___vfprintf_internal_r+0x1f6c>
   11ea8:	d8c02a17 	ldw	r3,168(sp)
   11eac:	d8802104 	addi	r2,sp,132
   11eb0:	d8800315 	stw	r2,12(sp)
   11eb4:	d9403617 	ldw	r5,216(sp)
   11eb8:	d8802504 	addi	r2,sp,148
   11ebc:	d9002d17 	ldw	r4,180(sp)
   11ec0:	d8800215 	stw	r2,8(sp)
   11ec4:	d8802604 	addi	r2,sp,152
   11ec8:	d8c00015 	stw	r3,0(sp)
   11ecc:	d8800115 	stw	r2,4(sp)
   11ed0:	01c00084 	movi	r7,2
   11ed4:	980d883a 	mov	r6,r19
   11ed8:	d8c03c15 	stw	r3,240(sp)
   11edc:	da003d15 	stw	r8,244(sp)
   11ee0:	0012e280 	call	12e28 <_dtoa_r>
   11ee4:	1021883a 	mov	r16,r2
   11ee8:	008019c4 	movi	r2,103
   11eec:	d8c03c17 	ldw	r3,240(sp)
   11ef0:	da003d17 	ldw	r8,244(sp)
   11ef4:	88817126 	beq	r17,r2,124bc <___vfprintf_internal_r+0x1dc4>
   11ef8:	008011c4 	movi	r2,71
   11efc:	88829126 	beq	r17,r2,12944 <___vfprintf_internal_r+0x224c>
   11f00:	80f9883a 	add	fp,r16,r3
   11f04:	d9003617 	ldw	r4,216(sp)
   11f08:	000d883a 	mov	r6,zero
   11f0c:	000f883a 	mov	r7,zero
   11f10:	980b883a 	mov	r5,r19
   11f14:	da003d15 	stw	r8,244(sp)
   11f18:	001c7880 	call	1c788 <__eqdf2>
   11f1c:	da003d17 	ldw	r8,244(sp)
   11f20:	10018d26 	beq	r2,zero,12558 <___vfprintf_internal_r+0x1e60>
   11f24:	d8802117 	ldw	r2,132(sp)
   11f28:	1700062e 	bgeu	r2,fp,11f44 <___vfprintf_internal_r+0x184c>
   11f2c:	01000c04 	movi	r4,48
   11f30:	10c00044 	addi	r3,r2,1
   11f34:	d8c02115 	stw	r3,132(sp)
   11f38:	11000005 	stb	r4,0(r2)
   11f3c:	d8802117 	ldw	r2,132(sp)
   11f40:	173ffb36 	bltu	r2,fp,11f30 <__alt_data_end+0xfc011f30>
   11f44:	1405c83a 	sub	r2,r2,r16
   11f48:	d8803315 	stw	r2,204(sp)
   11f4c:	008011c4 	movi	r2,71
   11f50:	b0817626 	beq	r22,r2,1252c <___vfprintf_internal_r+0x1e34>
   11f54:	00801944 	movi	r2,101
   11f58:	1442800e 	bge	r2,r17,1295c <___vfprintf_internal_r+0x2264>
   11f5c:	d8c02617 	ldw	r3,152(sp)
   11f60:	00801984 	movi	r2,102
   11f64:	d8c03215 	stw	r3,200(sp)
   11f68:	8881fe26 	beq	r17,r2,12764 <___vfprintf_internal_r+0x206c>
   11f6c:	d8c03217 	ldw	r3,200(sp)
   11f70:	d9003317 	ldw	r4,204(sp)
   11f74:	1901dd16 	blt	r3,r4,126ec <___vfprintf_internal_r+0x1ff4>
   11f78:	9480004c 	andi	r18,r18,1
   11f7c:	90022b1e 	bne	r18,zero,1282c <___vfprintf_internal_r+0x2134>
   11f80:	1805883a 	mov	r2,r3
   11f84:	18028316 	blt	r3,zero,12994 <___vfprintf_internal_r+0x229c>
   11f88:	d8c03217 	ldw	r3,200(sp)
   11f8c:	044019c4 	movi	r17,103
   11f90:	d8c02b15 	stw	r3,172(sp)
   11f94:	df002907 	ldb	fp,164(sp)
   11f98:	e001531e 	bne	fp,zero,124e8 <___vfprintf_internal_r+0x1df0>
   11f9c:	df002783 	ldbu	fp,158(sp)
   11fa0:	d8802915 	stw	r2,164(sp)
   11fa4:	dc802c17 	ldw	r18,176(sp)
   11fa8:	d8002a15 	stw	zero,168(sp)
   11fac:	003baf06 	br	10e6c <__alt_data_end+0xfc010e6c>
   11fb0:	d8c02e17 	ldw	r3,184(sp)
   11fb4:	d9002e17 	ldw	r4,184(sp)
   11fb8:	d9402e17 	ldw	r5,184(sp)
   11fbc:	18c00017 	ldw	r3,0(r3)
   11fc0:	21000117 	ldw	r4,4(r4)
   11fc4:	29400204 	addi	r5,r5,8
   11fc8:	d8c03615 	stw	r3,216(sp)
   11fcc:	d9003815 	stw	r4,224(sp)
   11fd0:	d9402e15 	stw	r5,184(sp)
   11fd4:	003b5006 	br	10d18 <__alt_data_end+0xfc010d18>
   11fd8:	ac400007 	ldb	r17,0(r21)
   11fdc:	003a2806 	br	10880 <__alt_data_end+0xfc010880>
   11fe0:	9080100c 	andi	r2,r18,64
   11fe4:	1000a826 	beq	r2,zero,12288 <___vfprintf_internal_r+0x1b90>
   11fe8:	d8c02e17 	ldw	r3,184(sp)
   11fec:	002d883a 	mov	r22,zero
   11ff0:	1cc0000b 	ldhu	r19,0(r3)
   11ff4:	18c00104 	addi	r3,r3,4
   11ff8:	d8c02e15 	stw	r3,184(sp)
   11ffc:	003caf06 	br	112bc <__alt_data_end+0xfc0112bc>
   12000:	d9002e17 	ldw	r4,184(sp)
   12004:	d9402a17 	ldw	r5,168(sp)
   12008:	002d883a 	mov	r22,zero
   1200c:	20800104 	addi	r2,r4,4
   12010:	24c00017 	ldw	r19,0(r4)
   12014:	283ebb0e 	bge	r5,zero,11b04 <__alt_data_end+0xfc011b04>
   12018:	003ef106 	br	11be0 <__alt_data_end+0xfc011be0>
   1201c:	9080040c 	andi	r2,r18,16
   12020:	1000921e 	bne	r2,zero,1226c <___vfprintf_internal_r+0x1b74>
   12024:	9480100c 	andi	r18,r18,64
   12028:	90013926 	beq	r18,zero,12510 <___vfprintf_internal_r+0x1e18>
   1202c:	d9402e17 	ldw	r5,184(sp)
   12030:	d8c02f17 	ldw	r3,188(sp)
   12034:	28800017 	ldw	r2,0(r5)
   12038:	29400104 	addi	r5,r5,4
   1203c:	d9402e15 	stw	r5,184(sp)
   12040:	10c0000d 	sth	r3,0(r2)
   12044:	0039e406 	br	107d8 <__alt_data_end+0xfc0107d8>
   12048:	9080100c 	andi	r2,r18,64
   1204c:	10008026 	beq	r2,zero,12250 <___vfprintf_internal_r+0x1b58>
   12050:	d8802e17 	ldw	r2,184(sp)
   12054:	14c0000f 	ldh	r19,0(r2)
   12058:	10800104 	addi	r2,r2,4
   1205c:	d8802e15 	stw	r2,184(sp)
   12060:	982dd7fa 	srai	r22,r19,31
   12064:	b005883a 	mov	r2,r22
   12068:	003af706 	br	10c48 <__alt_data_end+0xfc010c48>
   1206c:	9080100c 	andi	r2,r18,64
   12070:	d8002785 	stb	zero,158(sp)
   12074:	10008a1e 	bne	r2,zero,122a0 <___vfprintf_internal_r+0x1ba8>
   12078:	d9002e17 	ldw	r4,184(sp)
   1207c:	d9402a17 	ldw	r5,168(sp)
   12080:	002d883a 	mov	r22,zero
   12084:	20800104 	addi	r2,r4,4
   12088:	24c00017 	ldw	r19,0(r4)
   1208c:	283e4b0e 	bge	r5,zero,119bc <__alt_data_end+0xfc0119bc>
   12090:	9d86b03a 	or	r3,r19,r22
   12094:	d8802e15 	stw	r2,184(sp)
   12098:	183e4c1e 	bne	r3,zero,119cc <__alt_data_end+0xfc0119cc>
   1209c:	0039883a 	mov	fp,zero
   120a0:	0005883a 	mov	r2,zero
   120a4:	003d4006 	br	115a8 <__alt_data_end+0xfc0115a8>
   120a8:	014000f4 	movhi	r5,3
   120ac:	29658784 	addi	r5,r5,-27106
   120b0:	d9402c15 	stw	r5,176(sp)
   120b4:	d9402c17 	ldw	r5,176(sp)
   120b8:	1c47883a 	add	r3,r3,r17
   120bc:	10800044 	addi	r2,r2,1
   120c0:	41400015 	stw	r5,0(r8)
   120c4:	44400115 	stw	r17,4(r8)
   120c8:	d8c02015 	stw	r3,128(sp)
   120cc:	d8801f15 	stw	r2,124(sp)
   120d0:	010001c4 	movi	r4,7
   120d4:	20bec816 	blt	r4,r2,11bf8 <__alt_data_end+0xfc011bf8>
   120d8:	42000204 	addi	r8,r8,8
   120dc:	003ecd06 	br	11c14 <__alt_data_end+0xfc011c14>
   120e0:	d9002a17 	ldw	r4,168(sp)
   120e4:	d8002785 	stb	zero,158(sp)
   120e8:	203d2d16 	blt	r4,zero,115a0 <__alt_data_end+0xfc0115a0>
   120ec:	00bfdfc4 	movi	r2,-129
   120f0:	90a4703a 	and	r18,r18,r2
   120f4:	003a6106 	br	10a7c <__alt_data_end+0xfc010a7c>
   120f8:	010000f4 	movhi	r4,3
   120fc:	21258784 	addi	r4,r4,-27106
   12100:	d9002c15 	stw	r4,176(sp)
   12104:	003bea06 	br	110b0 <__alt_data_end+0xfc0110b0>
   12108:	d9002d17 	ldw	r4,180(sp)
   1210c:	d9801e04 	addi	r6,sp,120
   12110:	b80b883a 	mov	r5,r23
   12114:	0018a040 	call	18a04 <__sprint_r>
   12118:	103a7b1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   1211c:	d8c02017 	ldw	r3,128(sp)
   12120:	da000404 	addi	r8,sp,16
   12124:	003d4106 	br	1162c <__alt_data_end+0xfc01162c>
   12128:	d8801f17 	ldw	r2,124(sp)
   1212c:	014000f4 	movhi	r5,3
   12130:	01000044 	movi	r4,1
   12134:	18c00044 	addi	r3,r3,1
   12138:	10800044 	addi	r2,r2,1
   1213c:	29657f04 	addi	r5,r5,-27140
   12140:	41000115 	stw	r4,4(r8)
   12144:	41400015 	stw	r5,0(r8)
   12148:	d8c02015 	stw	r3,128(sp)
   1214c:	d8801f15 	stw	r2,124(sp)
   12150:	010001c4 	movi	r4,7
   12154:	20805c16 	blt	r4,r2,122c8 <___vfprintf_internal_r+0x1bd0>
   12158:	42000204 	addi	r8,r8,8
   1215c:	8800041e 	bne	r17,zero,12170 <___vfprintf_internal_r+0x1a78>
   12160:	d8803317 	ldw	r2,204(sp)
   12164:	1000021e 	bne	r2,zero,12170 <___vfprintf_internal_r+0x1a78>
   12168:	9080004c 	andi	r2,r18,1
   1216c:	103be726 	beq	r2,zero,1110c <__alt_data_end+0xfc01110c>
   12170:	d9003717 	ldw	r4,220(sp)
   12174:	d8801f17 	ldw	r2,124(sp)
   12178:	d9403417 	ldw	r5,208(sp)
   1217c:	20c7883a 	add	r3,r4,r3
   12180:	10800044 	addi	r2,r2,1
   12184:	41000115 	stw	r4,4(r8)
   12188:	41400015 	stw	r5,0(r8)
   1218c:	d8c02015 	stw	r3,128(sp)
   12190:	d8801f15 	stw	r2,124(sp)
   12194:	010001c4 	movi	r4,7
   12198:	20812116 	blt	r4,r2,12620 <___vfprintf_internal_r+0x1f28>
   1219c:	42000204 	addi	r8,r8,8
   121a0:	0463c83a 	sub	r17,zero,r17
   121a4:	0440730e 	bge	zero,r17,12374 <___vfprintf_internal_r+0x1c7c>
   121a8:	05800404 	movi	r22,16
   121ac:	b440860e 	bge	r22,r17,123c8 <___vfprintf_internal_r+0x1cd0>
   121b0:	014000f4 	movhi	r5,3
   121b4:	29658784 	addi	r5,r5,-27106
   121b8:	d9402c15 	stw	r5,176(sp)
   121bc:	070001c4 	movi	fp,7
   121c0:	dcc02d17 	ldw	r19,180(sp)
   121c4:	00000306 	br	121d4 <___vfprintf_internal_r+0x1adc>
   121c8:	42000204 	addi	r8,r8,8
   121cc:	8c7ffc04 	addi	r17,r17,-16
   121d0:	b440800e 	bge	r22,r17,123d4 <___vfprintf_internal_r+0x1cdc>
   121d4:	18c00404 	addi	r3,r3,16
   121d8:	10800044 	addi	r2,r2,1
   121dc:	45000015 	stw	r20,0(r8)
   121e0:	45800115 	stw	r22,4(r8)
   121e4:	d8c02015 	stw	r3,128(sp)
   121e8:	d8801f15 	stw	r2,124(sp)
   121ec:	e0bff60e 	bge	fp,r2,121c8 <__alt_data_end+0xfc0121c8>
   121f0:	d9801e04 	addi	r6,sp,120
   121f4:	b80b883a 	mov	r5,r23
   121f8:	9809883a 	mov	r4,r19
   121fc:	0018a040 	call	18a04 <__sprint_r>
   12200:	103a411e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   12204:	d8c02017 	ldw	r3,128(sp)
   12208:	d8801f17 	ldw	r2,124(sp)
   1220c:	da000404 	addi	r8,sp,16
   12210:	003fee06 	br	121cc <__alt_data_end+0xfc0121cc>
   12214:	00bfffc4 	movi	r2,-1
   12218:	003a3f06 	br	10b18 <__alt_data_end+0xfc010b18>
   1221c:	008011c4 	movi	r2,71
   12220:	1440b816 	blt	r2,r17,12504 <___vfprintf_internal_r+0x1e0c>
   12224:	040000f4 	movhi	r16,3
   12228:	84257104 	addi	r16,r16,-27196
   1222c:	00c000c4 	movi	r3,3
   12230:	00bfdfc4 	movi	r2,-129
   12234:	d8c02915 	stw	r3,164(sp)
   12238:	90a4703a 	and	r18,r18,r2
   1223c:	df002783 	ldbu	fp,158(sp)
   12240:	d8c02b15 	stw	r3,172(sp)
   12244:	d8002a15 	stw	zero,168(sp)
   12248:	d8003215 	stw	zero,200(sp)
   1224c:	003b0706 	br	10e6c <__alt_data_end+0xfc010e6c>
   12250:	d8c02e17 	ldw	r3,184(sp)
   12254:	1cc00017 	ldw	r19,0(r3)
   12258:	18c00104 	addi	r3,r3,4
   1225c:	d8c02e15 	stw	r3,184(sp)
   12260:	982dd7fa 	srai	r22,r19,31
   12264:	b005883a 	mov	r2,r22
   12268:	003a7706 	br	10c48 <__alt_data_end+0xfc010c48>
   1226c:	d8c02e17 	ldw	r3,184(sp)
   12270:	d9002f17 	ldw	r4,188(sp)
   12274:	18800017 	ldw	r2,0(r3)
   12278:	18c00104 	addi	r3,r3,4
   1227c:	d8c02e15 	stw	r3,184(sp)
   12280:	11000015 	stw	r4,0(r2)
   12284:	00395406 	br	107d8 <__alt_data_end+0xfc0107d8>
   12288:	d9002e17 	ldw	r4,184(sp)
   1228c:	002d883a 	mov	r22,zero
   12290:	24c00017 	ldw	r19,0(r4)
   12294:	21000104 	addi	r4,r4,4
   12298:	d9002e15 	stw	r4,184(sp)
   1229c:	003c0706 	br	112bc <__alt_data_end+0xfc0112bc>
   122a0:	d9402e17 	ldw	r5,184(sp)
   122a4:	d8c02a17 	ldw	r3,168(sp)
   122a8:	002d883a 	mov	r22,zero
   122ac:	28800104 	addi	r2,r5,4
   122b0:	2cc0000b 	ldhu	r19,0(r5)
   122b4:	183dc10e 	bge	r3,zero,119bc <__alt_data_end+0xfc0119bc>
   122b8:	003f7506 	br	12090 <__alt_data_end+0xfc012090>
   122bc:	040000f4 	movhi	r16,3
   122c0:	84256f04 	addi	r16,r16,-27204
   122c4:	003aa706 	br	10d64 <__alt_data_end+0xfc010d64>
   122c8:	d9002d17 	ldw	r4,180(sp)
   122cc:	d9801e04 	addi	r6,sp,120
   122d0:	b80b883a 	mov	r5,r23
   122d4:	0018a040 	call	18a04 <__sprint_r>
   122d8:	103a0b1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   122dc:	dc402617 	ldw	r17,152(sp)
   122e0:	d8c02017 	ldw	r3,128(sp)
   122e4:	da000404 	addi	r8,sp,16
   122e8:	003f9c06 	br	1215c <__alt_data_end+0xfc01215c>
   122ec:	ac400043 	ldbu	r17,1(r21)
   122f0:	84000814 	ori	r16,r16,32
   122f4:	ad400044 	addi	r21,r21,1
   122f8:	8c403fcc 	andi	r17,r17,255
   122fc:	8c40201c 	xori	r17,r17,128
   12300:	8c7fe004 	addi	r17,r17,-128
   12304:	00395e06 	br	10880 <__alt_data_end+0xfc010880>
   12308:	d8c02e15 	stw	r3,184(sp)
   1230c:	0039883a 	mov	fp,zero
   12310:	003e3506 	br	11be8 <__alt_data_end+0xfc011be8>
   12314:	d9002d17 	ldw	r4,180(sp)
   12318:	d9801e04 	addi	r6,sp,120
   1231c:	b80b883a 	mov	r5,r23
   12320:	0018a040 	call	18a04 <__sprint_r>
   12324:	1039f81e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   12328:	d8c02017 	ldw	r3,128(sp)
   1232c:	da000404 	addi	r8,sp,16
   12330:	003cd006 	br	11674 <__alt_data_end+0xfc011674>
   12334:	8009883a 	mov	r4,r16
   12338:	df003d15 	stw	fp,244(sp)
   1233c:	000e39c0 	call	e39c <strlen>
   12340:	d8802b15 	stw	r2,172(sp)
   12344:	da003d17 	ldw	r8,244(sp)
   12348:	103c200e 	bge	r2,zero,113cc <__alt_data_end+0xfc0113cc>
   1234c:	0005883a 	mov	r2,zero
   12350:	003c1e06 	br	113cc <__alt_data_end+0xfc0113cc>
   12354:	d9002d17 	ldw	r4,180(sp)
   12358:	d9801e04 	addi	r6,sp,120
   1235c:	b80b883a 	mov	r5,r23
   12360:	0018a040 	call	18a04 <__sprint_r>
   12364:	1039e81e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   12368:	d8c02017 	ldw	r3,128(sp)
   1236c:	d8801f17 	ldw	r2,124(sp)
   12370:	da000404 	addi	r8,sp,16
   12374:	d9403317 	ldw	r5,204(sp)
   12378:	10800044 	addi	r2,r2,1
   1237c:	44000015 	stw	r16,0(r8)
   12380:	28c7883a 	add	r3,r5,r3
   12384:	003b5b06 	br	110f4 <__alt_data_end+0xfc0110f4>
   12388:	010000f4 	movhi	r4,3
   1238c:	21258b84 	addi	r4,r4,-27090
   12390:	d9003515 	stw	r4,212(sp)
   12394:	003af206 	br	10f60 <__alt_data_end+0xfc010f60>
   12398:	013fffc4 	movi	r4,-1
   1239c:	003a0806 	br	10bc0 <__alt_data_end+0xfc010bc0>
   123a0:	0023883a 	mov	r17,zero
   123a4:	003d9d06 	br	11a1c <__alt_data_end+0xfc011a1c>
   123a8:	d9002d17 	ldw	r4,180(sp)
   123ac:	d9801e04 	addi	r6,sp,120
   123b0:	b80b883a 	mov	r5,r23
   123b4:	0018a040 	call	18a04 <__sprint_r>
   123b8:	1039d31e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   123bc:	d8c02017 	ldw	r3,128(sp)
   123c0:	da000404 	addi	r8,sp,16
   123c4:	003d9406 	br	11a18 <__alt_data_end+0xfc011a18>
   123c8:	010000f4 	movhi	r4,3
   123cc:	21258784 	addi	r4,r4,-27106
   123d0:	d9002c15 	stw	r4,176(sp)
   123d4:	d9002c17 	ldw	r4,176(sp)
   123d8:	1c47883a 	add	r3,r3,r17
   123dc:	10800044 	addi	r2,r2,1
   123e0:	41000015 	stw	r4,0(r8)
   123e4:	44400115 	stw	r17,4(r8)
   123e8:	d8c02015 	stw	r3,128(sp)
   123ec:	d8801f15 	stw	r2,124(sp)
   123f0:	010001c4 	movi	r4,7
   123f4:	20bfd716 	blt	r4,r2,12354 <__alt_data_end+0xfc012354>
   123f8:	42000204 	addi	r8,r8,8
   123fc:	003fdd06 	br	12374 <__alt_data_end+0xfc012374>
   12400:	d9002d17 	ldw	r4,180(sp)
   12404:	d9801e04 	addi	r6,sp,120
   12408:	b80b883a 	mov	r5,r23
   1240c:	0018a040 	call	18a04 <__sprint_r>
   12410:	1039bd1e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   12414:	d8802617 	ldw	r2,152(sp)
   12418:	d8c02017 	ldw	r3,128(sp)
   1241c:	da000404 	addi	r8,sp,16
   12420:	003e1006 	br	11c64 <__alt_data_end+0xfc011c64>
   12424:	00800044 	movi	r2,1
   12428:	10803fcc 	andi	r2,r2,255
   1242c:	00c00044 	movi	r3,1
   12430:	10fa0d26 	beq	r2,r3,10c68 <__alt_data_end+0xfc010c68>
   12434:	00c00084 	movi	r3,2
   12438:	10fbaf26 	beq	r2,r3,112f8 <__alt_data_end+0xfc0112f8>
   1243c:	003a6d06 	br	10df4 <__alt_data_end+0xfc010df4>
   12440:	010000f4 	movhi	r4,3
   12444:	21258b84 	addi	r4,r4,-27090
   12448:	d9003515 	stw	r4,212(sp)
   1244c:	003b5406 	br	111a0 <__alt_data_end+0xfc0111a0>
   12450:	d8802a17 	ldw	r2,168(sp)
   12454:	00c00184 	movi	r3,6
   12458:	1880012e 	bgeu	r3,r2,12460 <___vfprintf_internal_r+0x1d68>
   1245c:	1805883a 	mov	r2,r3
   12460:	d8802b15 	stw	r2,172(sp)
   12464:	1000ef16 	blt	r2,zero,12824 <___vfprintf_internal_r+0x212c>
   12468:	040000f4 	movhi	r16,3
   1246c:	d8802915 	stw	r2,164(sp)
   12470:	dcc02e15 	stw	r19,184(sp)
   12474:	d8002a15 	stw	zero,168(sp)
   12478:	d8003215 	stw	zero,200(sp)
   1247c:	84257d04 	addi	r16,r16,-27148
   12480:	0039883a 	mov	fp,zero
   12484:	003a8006 	br	10e88 <__alt_data_end+0xfc010e88>
   12488:	0021883a 	mov	r16,zero
   1248c:	003e0706 	br	11cac <__alt_data_end+0xfc011cac>
   12490:	d9002d17 	ldw	r4,180(sp)
   12494:	d9801e04 	addi	r6,sp,120
   12498:	b80b883a 	mov	r5,r23
   1249c:	0018a040 	call	18a04 <__sprint_r>
   124a0:	1039991e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   124a4:	d8802617 	ldw	r2,152(sp)
   124a8:	d9403317 	ldw	r5,204(sp)
   124ac:	d8c02017 	ldw	r3,128(sp)
   124b0:	da000404 	addi	r8,sp,16
   124b4:	2885c83a 	sub	r2,r5,r2
   124b8:	003dfb06 	br	11ca8 <__alt_data_end+0xfc011ca8>
   124bc:	9080004c 	andi	r2,r18,1
   124c0:	103e8f1e 	bne	r2,zero,11f00 <__alt_data_end+0xfc011f00>
   124c4:	d8802117 	ldw	r2,132(sp)
   124c8:	003e9e06 	br	11f44 <__alt_data_end+0xfc011f44>
   124cc:	1025883a 	mov	r18,r2
   124d0:	0039883a 	mov	fp,zero
   124d4:	00800084 	movi	r2,2
   124d8:	003fd306 	br	12428 <__alt_data_end+0xfc012428>
   124dc:	07000b44 	movi	fp,45
   124e0:	df002785 	stb	fp,158(sp)
   124e4:	003a1b06 	br	10d54 <__alt_data_end+0xfc010d54>
   124e8:	00c00b44 	movi	r3,45
   124ec:	d8c02785 	stb	r3,158(sp)
   124f0:	d8802915 	stw	r2,164(sp)
   124f4:	dc802c17 	ldw	r18,176(sp)
   124f8:	d8002a15 	stw	zero,168(sp)
   124fc:	07000b44 	movi	fp,45
   12500:	003a5e06 	br	10e7c <__alt_data_end+0xfc010e7c>
   12504:	040000f4 	movhi	r16,3
   12508:	84257204 	addi	r16,r16,-27192
   1250c:	003f4706 	br	1222c <__alt_data_end+0xfc01222c>
   12510:	d9002e17 	ldw	r4,184(sp)
   12514:	d9402f17 	ldw	r5,188(sp)
   12518:	20800017 	ldw	r2,0(r4)
   1251c:	21000104 	addi	r4,r4,4
   12520:	d9002e15 	stw	r4,184(sp)
   12524:	11400015 	stw	r5,0(r2)
   12528:	0038ab06 	br	107d8 <__alt_data_end+0xfc0107d8>
   1252c:	dd802617 	ldw	r22,152(sp)
   12530:	00bfff44 	movi	r2,-3
   12534:	b0801c16 	blt	r22,r2,125a8 <___vfprintf_internal_r+0x1eb0>
   12538:	d9402a17 	ldw	r5,168(sp)
   1253c:	2d801a16 	blt	r5,r22,125a8 <___vfprintf_internal_r+0x1eb0>
   12540:	dd803215 	stw	r22,200(sp)
   12544:	003e8906 	br	11f6c <__alt_data_end+0xfc011f6c>
   12548:	010000f4 	movhi	r4,3
   1254c:	21258784 	addi	r4,r4,-27106
   12550:	d9002c15 	stw	r4,176(sp)
   12554:	003c9106 	br	1179c <__alt_data_end+0xfc01179c>
   12558:	e005883a 	mov	r2,fp
   1255c:	003e7906 	br	11f44 <__alt_data_end+0xfc011f44>
   12560:	d9002a17 	ldw	r4,168(sp)
   12564:	df002783 	ldbu	fp,158(sp)
   12568:	dcc02e15 	stw	r19,184(sp)
   1256c:	d9002915 	stw	r4,164(sp)
   12570:	d9002b15 	stw	r4,172(sp)
   12574:	d8002a15 	stw	zero,168(sp)
   12578:	d8003215 	stw	zero,200(sp)
   1257c:	003a3b06 	br	10e6c <__alt_data_end+0xfc010e6c>
   12580:	9080004c 	andi	r2,r18,1
   12584:	0039883a 	mov	fp,zero
   12588:	10000426 	beq	r2,zero,1259c <___vfprintf_internal_r+0x1ea4>
   1258c:	00800c04 	movi	r2,48
   12590:	dc001dc4 	addi	r16,sp,119
   12594:	d8801dc5 	stb	r2,119(sp)
   12598:	003b6406 	br	1132c <__alt_data_end+0xfc01132c>
   1259c:	d8002b15 	stw	zero,172(sp)
   125a0:	dc001e04 	addi	r16,sp,120
   125a4:	003a2b06 	br	10e54 <__alt_data_end+0xfc010e54>
   125a8:	8c7fff84 	addi	r17,r17,-2
   125ac:	b5bfffc4 	addi	r22,r22,-1
   125b0:	dd802615 	stw	r22,152(sp)
   125b4:	dc4022c5 	stb	r17,139(sp)
   125b8:	b000bf16 	blt	r22,zero,128b8 <___vfprintf_internal_r+0x21c0>
   125bc:	00800ac4 	movi	r2,43
   125c0:	d8802305 	stb	r2,140(sp)
   125c4:	00800244 	movi	r2,9
   125c8:	15807016 	blt	r2,r22,1278c <___vfprintf_internal_r+0x2094>
   125cc:	00800c04 	movi	r2,48
   125d0:	b5800c04 	addi	r22,r22,48
   125d4:	d8802345 	stb	r2,141(sp)
   125d8:	dd802385 	stb	r22,142(sp)
   125dc:	d88023c4 	addi	r2,sp,143
   125e0:	df0022c4 	addi	fp,sp,139
   125e4:	d8c03317 	ldw	r3,204(sp)
   125e8:	1739c83a 	sub	fp,r2,fp
   125ec:	d9003317 	ldw	r4,204(sp)
   125f0:	e0c7883a 	add	r3,fp,r3
   125f4:	df003a15 	stw	fp,232(sp)
   125f8:	d8c02b15 	stw	r3,172(sp)
   125fc:	00800044 	movi	r2,1
   12600:	1100b30e 	bge	r2,r4,128d0 <___vfprintf_internal_r+0x21d8>
   12604:	d8c02b17 	ldw	r3,172(sp)
   12608:	18c00044 	addi	r3,r3,1
   1260c:	d8c02b15 	stw	r3,172(sp)
   12610:	1805883a 	mov	r2,r3
   12614:	1800ac16 	blt	r3,zero,128c8 <___vfprintf_internal_r+0x21d0>
   12618:	d8003215 	stw	zero,200(sp)
   1261c:	003e5d06 	br	11f94 <__alt_data_end+0xfc011f94>
   12620:	d9002d17 	ldw	r4,180(sp)
   12624:	d9801e04 	addi	r6,sp,120
   12628:	b80b883a 	mov	r5,r23
   1262c:	0018a040 	call	18a04 <__sprint_r>
   12630:	1039351e 	bne	r2,zero,10b08 <__alt_data_end+0xfc010b08>
   12634:	dc402617 	ldw	r17,152(sp)
   12638:	d8c02017 	ldw	r3,128(sp)
   1263c:	d8801f17 	ldw	r2,124(sp)
   12640:	da000404 	addi	r8,sp,16
   12644:	003ed606 	br	121a0 <__alt_data_end+0xfc0121a0>
   12648:	182b883a 	mov	r21,r3
   1264c:	d8002a15 	stw	zero,168(sp)
   12650:	00388c06 	br	10884 <__alt_data_end+0xfc010884>
   12654:	d8802a17 	ldw	r2,168(sp)
   12658:	103e071e 	bne	r2,zero,11e78 <__alt_data_end+0xfc011e78>
   1265c:	dc002a15 	stw	r16,168(sp)
   12660:	003e0506 	br	11e78 <__alt_data_end+0xfc011e78>
   12664:	d9002a17 	ldw	r4,168(sp)
   12668:	20c00044 	addi	r3,r4,1
   1266c:	003e0f06 	br	11eac <__alt_data_end+0xfc011eac>
   12670:	01400184 	movi	r5,6
   12674:	d9402a15 	stw	r5,168(sp)
   12678:	003dff06 	br	11e78 <__alt_data_end+0xfc011e78>
   1267c:	d8802104 	addi	r2,sp,132
   12680:	d8800315 	stw	r2,12(sp)
   12684:	d8802504 	addi	r2,sp,148
   12688:	d8800215 	stw	r2,8(sp)
   1268c:	d8802604 	addi	r2,sp,152
   12690:	d8800115 	stw	r2,4(sp)
   12694:	d8802a17 	ldw	r2,168(sp)
   12698:	d9403617 	ldw	r5,216(sp)
   1269c:	d9002d17 	ldw	r4,180(sp)
   126a0:	d8800015 	stw	r2,0(sp)
   126a4:	01c000c4 	movi	r7,3
   126a8:	980d883a 	mov	r6,r19
   126ac:	da003d15 	stw	r8,244(sp)
   126b0:	0012e280 	call	12e28 <_dtoa_r>
   126b4:	d8c02a17 	ldw	r3,168(sp)
   126b8:	da003d17 	ldw	r8,244(sp)
   126bc:	1021883a 	mov	r16,r2
   126c0:	10f9883a 	add	fp,r2,r3
   126c4:	81000007 	ldb	r4,0(r16)
   126c8:	00800c04 	movi	r2,48
   126cc:	20805e26 	beq	r4,r2,12848 <___vfprintf_internal_r+0x2150>
   126d0:	d8c02617 	ldw	r3,152(sp)
   126d4:	e0f9883a 	add	fp,fp,r3
   126d8:	003e0a06 	br	11f04 <__alt_data_end+0xfc011f04>
   126dc:	00c00b44 	movi	r3,45
   126e0:	24e0003c 	xorhi	r19,r4,32768
   126e4:	d8c02905 	stb	r3,164(sp)
   126e8:	003de906 	br	11e90 <__alt_data_end+0xfc011e90>
   126ec:	d8c03217 	ldw	r3,200(sp)
   126f0:	00c07a0e 	bge	zero,r3,128dc <___vfprintf_internal_r+0x21e4>
   126f4:	00800044 	movi	r2,1
   126f8:	d9003317 	ldw	r4,204(sp)
   126fc:	1105883a 	add	r2,r2,r4
   12700:	d8802b15 	stw	r2,172(sp)
   12704:	10004e16 	blt	r2,zero,12840 <___vfprintf_internal_r+0x2148>
   12708:	044019c4 	movi	r17,103
   1270c:	003e2106 	br	11f94 <__alt_data_end+0xfc011f94>
   12710:	d9002a17 	ldw	r4,168(sp)
   12714:	d8802104 	addi	r2,sp,132
   12718:	d8800315 	stw	r2,12(sp)
   1271c:	d9000015 	stw	r4,0(sp)
   12720:	d8802504 	addi	r2,sp,148
   12724:	d9403617 	ldw	r5,216(sp)
   12728:	d9002d17 	ldw	r4,180(sp)
   1272c:	d8800215 	stw	r2,8(sp)
   12730:	d8802604 	addi	r2,sp,152
   12734:	d8800115 	stw	r2,4(sp)
   12738:	01c000c4 	movi	r7,3
   1273c:	980d883a 	mov	r6,r19
   12740:	da003d15 	stw	r8,244(sp)
   12744:	0012e280 	call	12e28 <_dtoa_r>
   12748:	d8c02a17 	ldw	r3,168(sp)
   1274c:	da003d17 	ldw	r8,244(sp)
   12750:	1021883a 	mov	r16,r2
   12754:	00801184 	movi	r2,70
   12758:	80f9883a 	add	fp,r16,r3
   1275c:	88bfd926 	beq	r17,r2,126c4 <__alt_data_end+0xfc0126c4>
   12760:	003de806 	br	11f04 <__alt_data_end+0xfc011f04>
   12764:	d9002a17 	ldw	r4,168(sp)
   12768:	00c04d0e 	bge	zero,r3,128a0 <___vfprintf_internal_r+0x21a8>
   1276c:	2000441e 	bne	r4,zero,12880 <___vfprintf_internal_r+0x2188>
   12770:	9480004c 	andi	r18,r18,1
   12774:	9000421e 	bne	r18,zero,12880 <___vfprintf_internal_r+0x2188>
   12778:	1805883a 	mov	r2,r3
   1277c:	18006f16 	blt	r3,zero,1293c <___vfprintf_internal_r+0x2244>
   12780:	d8c03217 	ldw	r3,200(sp)
   12784:	d8c02b15 	stw	r3,172(sp)
   12788:	003e0206 	br	11f94 <__alt_data_end+0xfc011f94>
   1278c:	df0022c4 	addi	fp,sp,139
   12790:	dc002a15 	stw	r16,168(sp)
   12794:	4027883a 	mov	r19,r8
   12798:	e021883a 	mov	r16,fp
   1279c:	b009883a 	mov	r4,r22
   127a0:	01400284 	movi	r5,10
   127a4:	000cbc40 	call	cbc4 <__modsi3>
   127a8:	10800c04 	addi	r2,r2,48
   127ac:	843fffc4 	addi	r16,r16,-1
   127b0:	b009883a 	mov	r4,r22
   127b4:	01400284 	movi	r5,10
   127b8:	80800005 	stb	r2,0(r16)
   127bc:	000cb400 	call	cb40 <__divsi3>
   127c0:	102d883a 	mov	r22,r2
   127c4:	00800244 	movi	r2,9
   127c8:	15bff416 	blt	r2,r22,1279c <__alt_data_end+0xfc01279c>
   127cc:	9811883a 	mov	r8,r19
   127d0:	b0800c04 	addi	r2,r22,48
   127d4:	8027883a 	mov	r19,r16
   127d8:	997fffc4 	addi	r5,r19,-1
   127dc:	98bfffc5 	stb	r2,-1(r19)
   127e0:	dc002a17 	ldw	r16,168(sp)
   127e4:	2f006d2e 	bgeu	r5,fp,1299c <___vfprintf_internal_r+0x22a4>
   127e8:	d9c02384 	addi	r7,sp,142
   127ec:	3ccfc83a 	sub	r7,r7,r19
   127f0:	d9002344 	addi	r4,sp,141
   127f4:	e1cf883a 	add	r7,fp,r7
   127f8:	00000106 	br	12800 <___vfprintf_internal_r+0x2108>
   127fc:	28800003 	ldbu	r2,0(r5)
   12800:	20800005 	stb	r2,0(r4)
   12804:	21000044 	addi	r4,r4,1
   12808:	29400044 	addi	r5,r5,1
   1280c:	393ffb1e 	bne	r7,r4,127fc <__alt_data_end+0xfc0127fc>
   12810:	d8802304 	addi	r2,sp,140
   12814:	14c5c83a 	sub	r2,r2,r19
   12818:	d8c02344 	addi	r3,sp,141
   1281c:	1885883a 	add	r2,r3,r2
   12820:	003f7006 	br	125e4 <__alt_data_end+0xfc0125e4>
   12824:	0005883a 	mov	r2,zero
   12828:	003f0f06 	br	12468 <__alt_data_end+0xfc012468>
   1282c:	d8c03217 	ldw	r3,200(sp)
   12830:	18c00044 	addi	r3,r3,1
   12834:	d8c02b15 	stw	r3,172(sp)
   12838:	1805883a 	mov	r2,r3
   1283c:	183fb20e 	bge	r3,zero,12708 <__alt_data_end+0xfc012708>
   12840:	0005883a 	mov	r2,zero
   12844:	003fb006 	br	12708 <__alt_data_end+0xfc012708>
   12848:	d9003617 	ldw	r4,216(sp)
   1284c:	000d883a 	mov	r6,zero
   12850:	000f883a 	mov	r7,zero
   12854:	980b883a 	mov	r5,r19
   12858:	d8c03c15 	stw	r3,240(sp)
   1285c:	da003d15 	stw	r8,244(sp)
   12860:	001c7880 	call	1c788 <__eqdf2>
   12864:	d8c03c17 	ldw	r3,240(sp)
   12868:	da003d17 	ldw	r8,244(sp)
   1286c:	103f9826 	beq	r2,zero,126d0 <__alt_data_end+0xfc0126d0>
   12870:	00800044 	movi	r2,1
   12874:	10c7c83a 	sub	r3,r2,r3
   12878:	d8c02615 	stw	r3,152(sp)
   1287c:	003f9506 	br	126d4 <__alt_data_end+0xfc0126d4>
   12880:	d9002a17 	ldw	r4,168(sp)
   12884:	d8c03217 	ldw	r3,200(sp)
   12888:	20800044 	addi	r2,r4,1
   1288c:	1885883a 	add	r2,r3,r2
   12890:	d8802b15 	stw	r2,172(sp)
   12894:	103dbf0e 	bge	r2,zero,11f94 <__alt_data_end+0xfc011f94>
   12898:	0005883a 	mov	r2,zero
   1289c:	003dbd06 	br	11f94 <__alt_data_end+0xfc011f94>
   128a0:	2000201e 	bne	r4,zero,12924 <___vfprintf_internal_r+0x222c>
   128a4:	9480004c 	andi	r18,r18,1
   128a8:	90001e1e 	bne	r18,zero,12924 <___vfprintf_internal_r+0x222c>
   128ac:	00800044 	movi	r2,1
   128b0:	d8802b15 	stw	r2,172(sp)
   128b4:	003db706 	br	11f94 <__alt_data_end+0xfc011f94>
   128b8:	00800b44 	movi	r2,45
   128bc:	05adc83a 	sub	r22,zero,r22
   128c0:	d8802305 	stb	r2,140(sp)
   128c4:	003f3f06 	br	125c4 <__alt_data_end+0xfc0125c4>
   128c8:	0005883a 	mov	r2,zero
   128cc:	003f5206 	br	12618 <__alt_data_end+0xfc012618>
   128d0:	90a4703a 	and	r18,r18,r2
   128d4:	903f4e26 	beq	r18,zero,12610 <__alt_data_end+0xfc012610>
   128d8:	003f4a06 	br	12604 <__alt_data_end+0xfc012604>
   128dc:	00800084 	movi	r2,2
   128e0:	10c5c83a 	sub	r2,r2,r3
   128e4:	003f8406 	br	126f8 <__alt_data_end+0xfc0126f8>
   128e8:	d9402e17 	ldw	r5,184(sp)
   128ec:	d9002e17 	ldw	r4,184(sp)
   128f0:	ac400043 	ldbu	r17,1(r21)
   128f4:	29400017 	ldw	r5,0(r5)
   128f8:	20800104 	addi	r2,r4,4
   128fc:	d8802e15 	stw	r2,184(sp)
   12900:	d9402a15 	stw	r5,168(sp)
   12904:	182b883a 	mov	r21,r3
   12908:	283e7b0e 	bge	r5,zero,122f8 <__alt_data_end+0xfc0122f8>
   1290c:	8c403fcc 	andi	r17,r17,255
   12910:	017fffc4 	movi	r5,-1
   12914:	8c40201c 	xori	r17,r17,128
   12918:	d9402a15 	stw	r5,168(sp)
   1291c:	8c7fe004 	addi	r17,r17,-128
   12920:	0037d706 	br	10880 <__alt_data_end+0xfc010880>
   12924:	d8c02a17 	ldw	r3,168(sp)
   12928:	18c00084 	addi	r3,r3,2
   1292c:	d8c02b15 	stw	r3,172(sp)
   12930:	1805883a 	mov	r2,r3
   12934:	183d970e 	bge	r3,zero,11f94 <__alt_data_end+0xfc011f94>
   12938:	003fd706 	br	12898 <__alt_data_end+0xfc012898>
   1293c:	0005883a 	mov	r2,zero
   12940:	003f8f06 	br	12780 <__alt_data_end+0xfc012780>
   12944:	9080004c 	andi	r2,r18,1
   12948:	103f821e 	bne	r2,zero,12754 <__alt_data_end+0xfc012754>
   1294c:	d8802117 	ldw	r2,132(sp)
   12950:	1405c83a 	sub	r2,r2,r16
   12954:	d8803315 	stw	r2,204(sp)
   12958:	b47ef426 	beq	r22,r17,1252c <__alt_data_end+0xfc01252c>
   1295c:	dd802617 	ldw	r22,152(sp)
   12960:	003f1206 	br	125ac <__alt_data_end+0xfc0125ac>
   12964:	d8c02b03 	ldbu	r3,172(sp)
   12968:	d8c02785 	stb	r3,158(sp)
   1296c:	0038df06 	br	10cec <__alt_data_end+0xfc010cec>
   12970:	d8c02b03 	ldbu	r3,172(sp)
   12974:	d8c02785 	stb	r3,158(sp)
   12978:	0038aa06 	br	10c24 <__alt_data_end+0xfc010c24>
   1297c:	d8c02b03 	ldbu	r3,172(sp)
   12980:	d8c02785 	stb	r3,158(sp)
   12984:	003a4306 	br	11294 <__alt_data_end+0xfc011294>
   12988:	d8c02b03 	ldbu	r3,172(sp)
   1298c:	d8c02785 	stb	r3,158(sp)
   12990:	003af506 	br	11568 <__alt_data_end+0xfc011568>
   12994:	0005883a 	mov	r2,zero
   12998:	003d7b06 	br	11f88 <__alt_data_end+0xfc011f88>
   1299c:	d8802344 	addi	r2,sp,141
   129a0:	003f1006 	br	125e4 <__alt_data_end+0xfc0125e4>
   129a4:	d8c02b03 	ldbu	r3,172(sp)
   129a8:	d8c02785 	stb	r3,158(sp)
   129ac:	0038fd06 	br	10da4 <__alt_data_end+0xfc010da4>
   129b0:	d8c02b03 	ldbu	r3,172(sp)
   129b4:	d8c02785 	stb	r3,158(sp)
   129b8:	003a9706 	br	11418 <__alt_data_end+0xfc011418>
   129bc:	d8c02b03 	ldbu	r3,172(sp)
   129c0:	d8c02785 	stb	r3,158(sp)
   129c4:	003a1806 	br	11228 <__alt_data_end+0xfc011228>
   129c8:	d8c02b03 	ldbu	r3,172(sp)
   129cc:	d8c02785 	stb	r3,158(sp)
   129d0:	003abe06 	br	114cc <__alt_data_end+0xfc0114cc>

000129d4 <__vfprintf_internal>:
   129d4:	008000f4 	movhi	r2,3
   129d8:	10b2ae04 	addi	r2,r2,-13640
   129dc:	300f883a 	mov	r7,r6
   129e0:	280d883a 	mov	r6,r5
   129e4:	200b883a 	mov	r5,r4
   129e8:	11000017 	ldw	r4,0(r2)
   129ec:	00106f81 	jmpi	106f8 <___vfprintf_internal_r>

000129f0 <__sbprintf>:
   129f0:	2880030b 	ldhu	r2,12(r5)
   129f4:	2ac01917 	ldw	r11,100(r5)
   129f8:	2a80038b 	ldhu	r10,14(r5)
   129fc:	2a400717 	ldw	r9,28(r5)
   12a00:	2a000917 	ldw	r8,36(r5)
   12a04:	defee204 	addi	sp,sp,-1144
   12a08:	00c10004 	movi	r3,1024
   12a0c:	dc011a15 	stw	r16,1128(sp)
   12a10:	10bfff4c 	andi	r2,r2,65533
   12a14:	2821883a 	mov	r16,r5
   12a18:	d8cb883a 	add	r5,sp,r3
   12a1c:	dc811c15 	stw	r18,1136(sp)
   12a20:	dc411b15 	stw	r17,1132(sp)
   12a24:	dfc11d15 	stw	ra,1140(sp)
   12a28:	2025883a 	mov	r18,r4
   12a2c:	d881030d 	sth	r2,1036(sp)
   12a30:	dac11915 	stw	r11,1124(sp)
   12a34:	da81038d 	sth	r10,1038(sp)
   12a38:	da410715 	stw	r9,1052(sp)
   12a3c:	da010915 	stw	r8,1060(sp)
   12a40:	dec10015 	stw	sp,1024(sp)
   12a44:	dec10415 	stw	sp,1040(sp)
   12a48:	d8c10215 	stw	r3,1032(sp)
   12a4c:	d8c10515 	stw	r3,1044(sp)
   12a50:	d8010615 	stw	zero,1048(sp)
   12a54:	00106f80 	call	106f8 <___vfprintf_internal_r>
   12a58:	1023883a 	mov	r17,r2
   12a5c:	10000416 	blt	r2,zero,12a70 <__sbprintf+0x80>
   12a60:	d9410004 	addi	r5,sp,1024
   12a64:	9009883a 	mov	r4,r18
   12a68:	00146cc0 	call	146cc <_fflush_r>
   12a6c:	10000d1e 	bne	r2,zero,12aa4 <__sbprintf+0xb4>
   12a70:	d881030b 	ldhu	r2,1036(sp)
   12a74:	1080100c 	andi	r2,r2,64
   12a78:	10000326 	beq	r2,zero,12a88 <__sbprintf+0x98>
   12a7c:	8080030b 	ldhu	r2,12(r16)
   12a80:	10801014 	ori	r2,r2,64
   12a84:	8080030d 	sth	r2,12(r16)
   12a88:	8805883a 	mov	r2,r17
   12a8c:	dfc11d17 	ldw	ra,1140(sp)
   12a90:	dc811c17 	ldw	r18,1136(sp)
   12a94:	dc411b17 	ldw	r17,1132(sp)
   12a98:	dc011a17 	ldw	r16,1128(sp)
   12a9c:	dec11e04 	addi	sp,sp,1144
   12aa0:	f800283a 	ret
   12aa4:	047fffc4 	movi	r17,-1
   12aa8:	003ff106 	br	12a70 <__alt_data_end+0xfc012a70>

00012aac <__swsetup_r>:
   12aac:	008000f4 	movhi	r2,3
   12ab0:	defffd04 	addi	sp,sp,-12
   12ab4:	10b2ae04 	addi	r2,r2,-13640
   12ab8:	dc400115 	stw	r17,4(sp)
   12abc:	2023883a 	mov	r17,r4
   12ac0:	11000017 	ldw	r4,0(r2)
   12ac4:	dc000015 	stw	r16,0(sp)
   12ac8:	dfc00215 	stw	ra,8(sp)
   12acc:	2821883a 	mov	r16,r5
   12ad0:	20000226 	beq	r4,zero,12adc <__swsetup_r+0x30>
   12ad4:	20800e17 	ldw	r2,56(r4)
   12ad8:	10003126 	beq	r2,zero,12ba0 <__swsetup_r+0xf4>
   12adc:	8080030b 	ldhu	r2,12(r16)
   12ae0:	10c0020c 	andi	r3,r2,8
   12ae4:	1009883a 	mov	r4,r2
   12ae8:	18000f26 	beq	r3,zero,12b28 <__swsetup_r+0x7c>
   12aec:	80c00417 	ldw	r3,16(r16)
   12af0:	18001526 	beq	r3,zero,12b48 <__swsetup_r+0x9c>
   12af4:	1100004c 	andi	r4,r2,1
   12af8:	20001c1e 	bne	r4,zero,12b6c <__swsetup_r+0xc0>
   12afc:	1080008c 	andi	r2,r2,2
   12b00:	1000291e 	bne	r2,zero,12ba8 <__swsetup_r+0xfc>
   12b04:	80800517 	ldw	r2,20(r16)
   12b08:	80800215 	stw	r2,8(r16)
   12b0c:	18001c26 	beq	r3,zero,12b80 <__swsetup_r+0xd4>
   12b10:	0005883a 	mov	r2,zero
   12b14:	dfc00217 	ldw	ra,8(sp)
   12b18:	dc400117 	ldw	r17,4(sp)
   12b1c:	dc000017 	ldw	r16,0(sp)
   12b20:	dec00304 	addi	sp,sp,12
   12b24:	f800283a 	ret
   12b28:	2080040c 	andi	r2,r4,16
   12b2c:	10002e26 	beq	r2,zero,12be8 <__swsetup_r+0x13c>
   12b30:	2080010c 	andi	r2,r4,4
   12b34:	10001e1e 	bne	r2,zero,12bb0 <__swsetup_r+0x104>
   12b38:	80c00417 	ldw	r3,16(r16)
   12b3c:	20800214 	ori	r2,r4,8
   12b40:	8080030d 	sth	r2,12(r16)
   12b44:	183feb1e 	bne	r3,zero,12af4 <__alt_data_end+0xfc012af4>
   12b48:	1100a00c 	andi	r4,r2,640
   12b4c:	01408004 	movi	r5,512
   12b50:	217fe826 	beq	r4,r5,12af4 <__alt_data_end+0xfc012af4>
   12b54:	800b883a 	mov	r5,r16
   12b58:	8809883a 	mov	r4,r17
   12b5c:	00156680 	call	15668 <__smakebuf_r>
   12b60:	8080030b 	ldhu	r2,12(r16)
   12b64:	80c00417 	ldw	r3,16(r16)
   12b68:	003fe206 	br	12af4 <__alt_data_end+0xfc012af4>
   12b6c:	80800517 	ldw	r2,20(r16)
   12b70:	80000215 	stw	zero,8(r16)
   12b74:	0085c83a 	sub	r2,zero,r2
   12b78:	80800615 	stw	r2,24(r16)
   12b7c:	183fe41e 	bne	r3,zero,12b10 <__alt_data_end+0xfc012b10>
   12b80:	80c0030b 	ldhu	r3,12(r16)
   12b84:	0005883a 	mov	r2,zero
   12b88:	1900200c 	andi	r4,r3,128
   12b8c:	203fe126 	beq	r4,zero,12b14 <__alt_data_end+0xfc012b14>
   12b90:	18c01014 	ori	r3,r3,64
   12b94:	80c0030d 	sth	r3,12(r16)
   12b98:	00bfffc4 	movi	r2,-1
   12b9c:	003fdd06 	br	12b14 <__alt_data_end+0xfc012b14>
   12ba0:	0014ab80 	call	14ab8 <__sinit>
   12ba4:	003fcd06 	br	12adc <__alt_data_end+0xfc012adc>
   12ba8:	0005883a 	mov	r2,zero
   12bac:	003fd606 	br	12b08 <__alt_data_end+0xfc012b08>
   12bb0:	81400c17 	ldw	r5,48(r16)
   12bb4:	28000626 	beq	r5,zero,12bd0 <__swsetup_r+0x124>
   12bb8:	80801004 	addi	r2,r16,64
   12bbc:	28800326 	beq	r5,r2,12bcc <__swsetup_r+0x120>
   12bc0:	8809883a 	mov	r4,r17
   12bc4:	0014c2c0 	call	14c2c <_free_r>
   12bc8:	8100030b 	ldhu	r4,12(r16)
   12bcc:	80000c15 	stw	zero,48(r16)
   12bd0:	80c00417 	ldw	r3,16(r16)
   12bd4:	00bff6c4 	movi	r2,-37
   12bd8:	1108703a 	and	r4,r2,r4
   12bdc:	80000115 	stw	zero,4(r16)
   12be0:	80c00015 	stw	r3,0(r16)
   12be4:	003fd506 	br	12b3c <__alt_data_end+0xfc012b3c>
   12be8:	00800244 	movi	r2,9
   12bec:	88800015 	stw	r2,0(r17)
   12bf0:	20801014 	ori	r2,r4,64
   12bf4:	8080030d 	sth	r2,12(r16)
   12bf8:	00bfffc4 	movi	r2,-1
   12bfc:	003fc506 	br	12b14 <__alt_data_end+0xfc012b14>

00012c00 <quorem>:
   12c00:	defff204 	addi	sp,sp,-56
   12c04:	ddc00b15 	stw	r23,44(sp)
   12c08:	20800417 	ldw	r2,16(r4)
   12c0c:	2dc00417 	ldw	r23,16(r5)
   12c10:	dfc00d15 	stw	ra,52(sp)
   12c14:	df000c15 	stw	fp,48(sp)
   12c18:	dd800a15 	stw	r22,40(sp)
   12c1c:	dd400915 	stw	r21,36(sp)
   12c20:	dd000815 	stw	r20,32(sp)
   12c24:	dcc00715 	stw	r19,28(sp)
   12c28:	dc800615 	stw	r18,24(sp)
   12c2c:	dc400515 	stw	r17,20(sp)
   12c30:	dc000415 	stw	r16,16(sp)
   12c34:	15c07a16 	blt	r2,r23,12e20 <quorem+0x220>
   12c38:	bdffffc4 	addi	r23,r23,-1
   12c3c:	bde9883a 	add	r20,r23,r23
   12c40:	28c00504 	addi	r3,r5,20
   12c44:	a529883a 	add	r20,r20,r20
   12c48:	1d39883a 	add	fp,r3,r20
   12c4c:	24c00504 	addi	r19,r4,20
   12c50:	d9400215 	stw	r5,8(sp)
   12c54:	9d29883a 	add	r20,r19,r20
   12c58:	e1400017 	ldw	r5,0(fp)
   12c5c:	d9000015 	stw	r4,0(sp)
   12c60:	a1000017 	ldw	r4,0(r20)
   12c64:	29400044 	addi	r5,r5,1
   12c68:	d8c00115 	stw	r3,4(sp)
   12c6c:	dd000315 	stw	r20,12(sp)
   12c70:	000cc380 	call	cc38 <__udivsi3>
   12c74:	1025883a 	mov	r18,r2
   12c78:	10003026 	beq	r2,zero,12d3c <quorem+0x13c>
   12c7c:	dc400117 	ldw	r17,4(sp)
   12c80:	9829883a 	mov	r20,r19
   12c84:	002d883a 	mov	r22,zero
   12c88:	0021883a 	mov	r16,zero
   12c8c:	8d400017 	ldw	r21,0(r17)
   12c90:	900b883a 	mov	r5,r18
   12c94:	8c400104 	addi	r17,r17,4
   12c98:	a93fffcc 	andi	r4,r21,65535
   12c9c:	000ccf40 	call	ccf4 <__mulsi3>
   12ca0:	a808d43a 	srli	r4,r21,16
   12ca4:	900b883a 	mov	r5,r18
   12ca8:	15ad883a 	add	r22,r2,r22
   12cac:	000ccf40 	call	ccf4 <__mulsi3>
   12cb0:	a1000017 	ldw	r4,0(r20)
   12cb4:	b00cd43a 	srli	r6,r22,16
   12cb8:	b0ffffcc 	andi	r3,r22,65535
   12cbc:	217fffcc 	andi	r5,r4,65535
   12cc0:	2c21883a 	add	r16,r5,r16
   12cc4:	80c7c83a 	sub	r3,r16,r3
   12cc8:	2008d43a 	srli	r4,r4,16
   12ccc:	1185883a 	add	r2,r2,r6
   12cd0:	1821d43a 	srai	r16,r3,16
   12cd4:	117fffcc 	andi	r5,r2,65535
   12cd8:	2149c83a 	sub	r4,r4,r5
   12cdc:	2421883a 	add	r16,r4,r16
   12ce0:	8008943a 	slli	r4,r16,16
   12ce4:	18ffffcc 	andi	r3,r3,65535
   12ce8:	102cd43a 	srli	r22,r2,16
   12cec:	20c8b03a 	or	r4,r4,r3
   12cf0:	a1000015 	stw	r4,0(r20)
   12cf4:	8021d43a 	srai	r16,r16,16
   12cf8:	a5000104 	addi	r20,r20,4
   12cfc:	e47fe32e 	bgeu	fp,r17,12c8c <__alt_data_end+0xfc012c8c>
   12d00:	d8c00317 	ldw	r3,12(sp)
   12d04:	18800017 	ldw	r2,0(r3)
   12d08:	10000c1e 	bne	r2,zero,12d3c <quorem+0x13c>
   12d0c:	18bfff04 	addi	r2,r3,-4
   12d10:	9880082e 	bgeu	r19,r2,12d34 <quorem+0x134>
   12d14:	18ffff17 	ldw	r3,-4(r3)
   12d18:	18000326 	beq	r3,zero,12d28 <quorem+0x128>
   12d1c:	00000506 	br	12d34 <quorem+0x134>
   12d20:	10c00017 	ldw	r3,0(r2)
   12d24:	1800031e 	bne	r3,zero,12d34 <quorem+0x134>
   12d28:	10bfff04 	addi	r2,r2,-4
   12d2c:	bdffffc4 	addi	r23,r23,-1
   12d30:	98bffb36 	bltu	r19,r2,12d20 <__alt_data_end+0xfc012d20>
   12d34:	d8c00017 	ldw	r3,0(sp)
   12d38:	1dc00415 	stw	r23,16(r3)
   12d3c:	d9400217 	ldw	r5,8(sp)
   12d40:	d9000017 	ldw	r4,0(sp)
   12d44:	00163e80 	call	163e8 <__mcmp>
   12d48:	10002816 	blt	r2,zero,12dec <quorem+0x1ec>
   12d4c:	dc400117 	ldw	r17,4(sp)
   12d50:	94800044 	addi	r18,r18,1
   12d54:	980d883a 	mov	r6,r19
   12d58:	0007883a 	mov	r3,zero
   12d5c:	31000017 	ldw	r4,0(r6)
   12d60:	89400017 	ldw	r5,0(r17)
   12d64:	31800104 	addi	r6,r6,4
   12d68:	20bfffcc 	andi	r2,r4,65535
   12d6c:	10c7883a 	add	r3,r2,r3
   12d70:	28bfffcc 	andi	r2,r5,65535
   12d74:	1885c83a 	sub	r2,r3,r2
   12d78:	280ad43a 	srli	r5,r5,16
   12d7c:	2008d43a 	srli	r4,r4,16
   12d80:	1007d43a 	srai	r3,r2,16
   12d84:	10bfffcc 	andi	r2,r2,65535
   12d88:	2149c83a 	sub	r4,r4,r5
   12d8c:	20c9883a 	add	r4,r4,r3
   12d90:	200a943a 	slli	r5,r4,16
   12d94:	8c400104 	addi	r17,r17,4
   12d98:	2007d43a 	srai	r3,r4,16
   12d9c:	2884b03a 	or	r2,r5,r2
   12da0:	30bfff15 	stw	r2,-4(r6)
   12da4:	e47fed2e 	bgeu	fp,r17,12d5c <__alt_data_end+0xfc012d5c>
   12da8:	bdc5883a 	add	r2,r23,r23
   12dac:	1085883a 	add	r2,r2,r2
   12db0:	9887883a 	add	r3,r19,r2
   12db4:	18800017 	ldw	r2,0(r3)
   12db8:	10000c1e 	bne	r2,zero,12dec <quorem+0x1ec>
   12dbc:	18bfff04 	addi	r2,r3,-4
   12dc0:	9880082e 	bgeu	r19,r2,12de4 <quorem+0x1e4>
   12dc4:	18ffff17 	ldw	r3,-4(r3)
   12dc8:	18000326 	beq	r3,zero,12dd8 <quorem+0x1d8>
   12dcc:	00000506 	br	12de4 <quorem+0x1e4>
   12dd0:	10c00017 	ldw	r3,0(r2)
   12dd4:	1800031e 	bne	r3,zero,12de4 <quorem+0x1e4>
   12dd8:	10bfff04 	addi	r2,r2,-4
   12ddc:	bdffffc4 	addi	r23,r23,-1
   12de0:	98bffb36 	bltu	r19,r2,12dd0 <__alt_data_end+0xfc012dd0>
   12de4:	d8c00017 	ldw	r3,0(sp)
   12de8:	1dc00415 	stw	r23,16(r3)
   12dec:	9005883a 	mov	r2,r18
   12df0:	dfc00d17 	ldw	ra,52(sp)
   12df4:	df000c17 	ldw	fp,48(sp)
   12df8:	ddc00b17 	ldw	r23,44(sp)
   12dfc:	dd800a17 	ldw	r22,40(sp)
   12e00:	dd400917 	ldw	r21,36(sp)
   12e04:	dd000817 	ldw	r20,32(sp)
   12e08:	dcc00717 	ldw	r19,28(sp)
   12e0c:	dc800617 	ldw	r18,24(sp)
   12e10:	dc400517 	ldw	r17,20(sp)
   12e14:	dc000417 	ldw	r16,16(sp)
   12e18:	dec00e04 	addi	sp,sp,56
   12e1c:	f800283a 	ret
   12e20:	0005883a 	mov	r2,zero
   12e24:	003ff206 	br	12df0 <__alt_data_end+0xfc012df0>

00012e28 <_dtoa_r>:
   12e28:	20801017 	ldw	r2,64(r4)
   12e2c:	deffde04 	addi	sp,sp,-136
   12e30:	df002015 	stw	fp,128(sp)
   12e34:	dcc01b15 	stw	r19,108(sp)
   12e38:	dc801a15 	stw	r18,104(sp)
   12e3c:	dc401915 	stw	r17,100(sp)
   12e40:	dc001815 	stw	r16,96(sp)
   12e44:	dfc02115 	stw	ra,132(sp)
   12e48:	ddc01f15 	stw	r23,124(sp)
   12e4c:	dd801e15 	stw	r22,120(sp)
   12e50:	dd401d15 	stw	r21,116(sp)
   12e54:	dd001c15 	stw	r20,112(sp)
   12e58:	d9c00315 	stw	r7,12(sp)
   12e5c:	2039883a 	mov	fp,r4
   12e60:	3023883a 	mov	r17,r6
   12e64:	2825883a 	mov	r18,r5
   12e68:	dc002417 	ldw	r16,144(sp)
   12e6c:	3027883a 	mov	r19,r6
   12e70:	10000826 	beq	r2,zero,12e94 <_dtoa_r+0x6c>
   12e74:	21801117 	ldw	r6,68(r4)
   12e78:	00c00044 	movi	r3,1
   12e7c:	100b883a 	mov	r5,r2
   12e80:	1986983a 	sll	r3,r3,r6
   12e84:	11800115 	stw	r6,4(r2)
   12e88:	10c00215 	stw	r3,8(r2)
   12e8c:	0015b0c0 	call	15b0c <_Bfree>
   12e90:	e0001015 	stw	zero,64(fp)
   12e94:	88002e16 	blt	r17,zero,12f50 <_dtoa_r+0x128>
   12e98:	80000015 	stw	zero,0(r16)
   12e9c:	889ffc2c 	andhi	r2,r17,32752
   12ea0:	00dffc34 	movhi	r3,32752
   12ea4:	10c01c26 	beq	r2,r3,12f18 <_dtoa_r+0xf0>
   12ea8:	000d883a 	mov	r6,zero
   12eac:	000f883a 	mov	r7,zero
   12eb0:	9009883a 	mov	r4,r18
   12eb4:	980b883a 	mov	r5,r19
   12eb8:	001c7880 	call	1c788 <__eqdf2>
   12ebc:	10002b1e 	bne	r2,zero,12f6c <_dtoa_r+0x144>
   12ec0:	d9c02317 	ldw	r7,140(sp)
   12ec4:	00800044 	movi	r2,1
   12ec8:	38800015 	stw	r2,0(r7)
   12ecc:	d8802517 	ldw	r2,148(sp)
   12ed0:	10019e26 	beq	r2,zero,1354c <_dtoa_r+0x724>
   12ed4:	d8c02517 	ldw	r3,148(sp)
   12ed8:	008000f4 	movhi	r2,3
   12edc:	10a57f44 	addi	r2,r2,-27139
   12ee0:	18800015 	stw	r2,0(r3)
   12ee4:	10bfffc4 	addi	r2,r2,-1
   12ee8:	dfc02117 	ldw	ra,132(sp)
   12eec:	df002017 	ldw	fp,128(sp)
   12ef0:	ddc01f17 	ldw	r23,124(sp)
   12ef4:	dd801e17 	ldw	r22,120(sp)
   12ef8:	dd401d17 	ldw	r21,116(sp)
   12efc:	dd001c17 	ldw	r20,112(sp)
   12f00:	dcc01b17 	ldw	r19,108(sp)
   12f04:	dc801a17 	ldw	r18,104(sp)
   12f08:	dc401917 	ldw	r17,100(sp)
   12f0c:	dc001817 	ldw	r16,96(sp)
   12f10:	dec02204 	addi	sp,sp,136
   12f14:	f800283a 	ret
   12f18:	d8c02317 	ldw	r3,140(sp)
   12f1c:	0089c3c4 	movi	r2,9999
   12f20:	18800015 	stw	r2,0(r3)
   12f24:	90017726 	beq	r18,zero,13504 <_dtoa_r+0x6dc>
   12f28:	008000f4 	movhi	r2,3
   12f2c:	10a59304 	addi	r2,r2,-27060
   12f30:	d9002517 	ldw	r4,148(sp)
   12f34:	203fec26 	beq	r4,zero,12ee8 <__alt_data_end+0xfc012ee8>
   12f38:	10c000c7 	ldb	r3,3(r2)
   12f3c:	1801781e 	bne	r3,zero,13520 <_dtoa_r+0x6f8>
   12f40:	10c000c4 	addi	r3,r2,3
   12f44:	d9802517 	ldw	r6,148(sp)
   12f48:	30c00015 	stw	r3,0(r6)
   12f4c:	003fe606 	br	12ee8 <__alt_data_end+0xfc012ee8>
   12f50:	04e00034 	movhi	r19,32768
   12f54:	9cffffc4 	addi	r19,r19,-1
   12f58:	00800044 	movi	r2,1
   12f5c:	8ce6703a 	and	r19,r17,r19
   12f60:	80800015 	stw	r2,0(r16)
   12f64:	9823883a 	mov	r17,r19
   12f68:	003fcc06 	br	12e9c <__alt_data_end+0xfc012e9c>
   12f6c:	d8800204 	addi	r2,sp,8
   12f70:	d8800015 	stw	r2,0(sp)
   12f74:	d9c00104 	addi	r7,sp,4
   12f78:	900b883a 	mov	r5,r18
   12f7c:	980d883a 	mov	r6,r19
   12f80:	e009883a 	mov	r4,fp
   12f84:	8820d53a 	srli	r16,r17,20
   12f88:	00167b40 	call	167b4 <__d2b>
   12f8c:	d8800915 	stw	r2,36(sp)
   12f90:	8001651e 	bne	r16,zero,13528 <_dtoa_r+0x700>
   12f94:	dd800217 	ldw	r22,8(sp)
   12f98:	dc000117 	ldw	r16,4(sp)
   12f9c:	00800804 	movi	r2,32
   12fa0:	b421883a 	add	r16,r22,r16
   12fa4:	80c10c84 	addi	r3,r16,1074
   12fa8:	10c2d10e 	bge	r2,r3,13af0 <_dtoa_r+0xcc8>
   12fac:	00801004 	movi	r2,64
   12fb0:	81010484 	addi	r4,r16,1042
   12fb4:	10c7c83a 	sub	r3,r2,r3
   12fb8:	9108d83a 	srl	r4,r18,r4
   12fbc:	88e2983a 	sll	r17,r17,r3
   12fc0:	2448b03a 	or	r4,r4,r17
   12fc4:	001dca40 	call	1dca4 <__floatunsidf>
   12fc8:	017f8434 	movhi	r5,65040
   12fcc:	01800044 	movi	r6,1
   12fd0:	1009883a 	mov	r4,r2
   12fd4:	194b883a 	add	r5,r3,r5
   12fd8:	843fffc4 	addi	r16,r16,-1
   12fdc:	d9801115 	stw	r6,68(sp)
   12fe0:	000d883a 	mov	r6,zero
   12fe4:	01cffe34 	movhi	r7,16376
   12fe8:	001d24c0 	call	1d24c <__subdf3>
   12fec:	0198dbf4 	movhi	r6,25455
   12ff0:	01cff4f4 	movhi	r7,16339
   12ff4:	3190d844 	addi	r6,r6,17249
   12ff8:	39e1e9c4 	addi	r7,r7,-30809
   12ffc:	1009883a 	mov	r4,r2
   13000:	180b883a 	mov	r5,r3
   13004:	001c9e00 	call	1c9e0 <__muldf3>
   13008:	01a2d874 	movhi	r6,35681
   1300c:	01cff1f4 	movhi	r7,16327
   13010:	31b22cc4 	addi	r6,r6,-14157
   13014:	39e28a04 	addi	r7,r7,-30168
   13018:	180b883a 	mov	r5,r3
   1301c:	1009883a 	mov	r4,r2
   13020:	001b50c0 	call	1b50c <__adddf3>
   13024:	8009883a 	mov	r4,r16
   13028:	1029883a 	mov	r20,r2
   1302c:	1823883a 	mov	r17,r3
   13030:	001dbc80 	call	1dbc8 <__floatsidf>
   13034:	019427f4 	movhi	r6,20639
   13038:	01cff4f4 	movhi	r7,16339
   1303c:	319e7ec4 	addi	r6,r6,31227
   13040:	39d104c4 	addi	r7,r7,17427
   13044:	1009883a 	mov	r4,r2
   13048:	180b883a 	mov	r5,r3
   1304c:	001c9e00 	call	1c9e0 <__muldf3>
   13050:	100d883a 	mov	r6,r2
   13054:	180f883a 	mov	r7,r3
   13058:	a009883a 	mov	r4,r20
   1305c:	880b883a 	mov	r5,r17
   13060:	001b50c0 	call	1b50c <__adddf3>
   13064:	1009883a 	mov	r4,r2
   13068:	180b883a 	mov	r5,r3
   1306c:	1029883a 	mov	r20,r2
   13070:	1823883a 	mov	r17,r3
   13074:	001db480 	call	1db48 <__fixdfsi>
   13078:	000d883a 	mov	r6,zero
   1307c:	000f883a 	mov	r7,zero
   13080:	a009883a 	mov	r4,r20
   13084:	880b883a 	mov	r5,r17
   13088:	d8800515 	stw	r2,20(sp)
   1308c:	001c8ec0 	call	1c8ec <__ledf2>
   13090:	10028716 	blt	r2,zero,13ab0 <_dtoa_r+0xc88>
   13094:	d8c00517 	ldw	r3,20(sp)
   13098:	00800584 	movi	r2,22
   1309c:	10c27536 	bltu	r2,r3,13a74 <_dtoa_r+0xc4c>
   130a0:	180490fa 	slli	r2,r3,3
   130a4:	00c000f4 	movhi	r3,3
   130a8:	18e5ae04 	addi	r3,r3,-26952
   130ac:	1885883a 	add	r2,r3,r2
   130b0:	11000017 	ldw	r4,0(r2)
   130b4:	11400117 	ldw	r5,4(r2)
   130b8:	900d883a 	mov	r6,r18
   130bc:	980f883a 	mov	r7,r19
   130c0:	001c8100 	call	1c810 <__gedf2>
   130c4:	00828d0e 	bge	zero,r2,13afc <_dtoa_r+0xcd4>
   130c8:	d9000517 	ldw	r4,20(sp)
   130cc:	d8000e15 	stw	zero,56(sp)
   130d0:	213fffc4 	addi	r4,r4,-1
   130d4:	d9000515 	stw	r4,20(sp)
   130d8:	b42dc83a 	sub	r22,r22,r16
   130dc:	b5bfffc4 	addi	r22,r22,-1
   130e0:	b0026f16 	blt	r22,zero,13aa0 <_dtoa_r+0xc78>
   130e4:	d8000815 	stw	zero,32(sp)
   130e8:	d9c00517 	ldw	r7,20(sp)
   130ec:	38026416 	blt	r7,zero,13a80 <_dtoa_r+0xc58>
   130f0:	b1ed883a 	add	r22,r22,r7
   130f4:	d9c00d15 	stw	r7,52(sp)
   130f8:	d8000a15 	stw	zero,40(sp)
   130fc:	d9800317 	ldw	r6,12(sp)
   13100:	00800244 	movi	r2,9
   13104:	11811436 	bltu	r2,r6,13558 <_dtoa_r+0x730>
   13108:	00800144 	movi	r2,5
   1310c:	1184e10e 	bge	r2,r6,14494 <_dtoa_r+0x166c>
   13110:	31bfff04 	addi	r6,r6,-4
   13114:	d9800315 	stw	r6,12(sp)
   13118:	0023883a 	mov	r17,zero
   1311c:	d9800317 	ldw	r6,12(sp)
   13120:	008000c4 	movi	r2,3
   13124:	30836726 	beq	r6,r2,13ec4 <_dtoa_r+0x109c>
   13128:	1183410e 	bge	r2,r6,13e30 <_dtoa_r+0x1008>
   1312c:	d9c00317 	ldw	r7,12(sp)
   13130:	00800104 	movi	r2,4
   13134:	38827c26 	beq	r7,r2,13b28 <_dtoa_r+0xd00>
   13138:	00800144 	movi	r2,5
   1313c:	3884c41e 	bne	r7,r2,14450 <_dtoa_r+0x1628>
   13140:	00800044 	movi	r2,1
   13144:	d8800b15 	stw	r2,44(sp)
   13148:	d8c00517 	ldw	r3,20(sp)
   1314c:	d9002217 	ldw	r4,136(sp)
   13150:	1907883a 	add	r3,r3,r4
   13154:	19800044 	addi	r6,r3,1
   13158:	d8c00c15 	stw	r3,48(sp)
   1315c:	d9800615 	stw	r6,24(sp)
   13160:	0183a40e 	bge	zero,r6,13ff4 <_dtoa_r+0x11cc>
   13164:	d9800617 	ldw	r6,24(sp)
   13168:	3021883a 	mov	r16,r6
   1316c:	e0001115 	stw	zero,68(fp)
   13170:	008005c4 	movi	r2,23
   13174:	1184c92e 	bgeu	r2,r6,1449c <_dtoa_r+0x1674>
   13178:	00c00044 	movi	r3,1
   1317c:	00800104 	movi	r2,4
   13180:	1085883a 	add	r2,r2,r2
   13184:	11000504 	addi	r4,r2,20
   13188:	180b883a 	mov	r5,r3
   1318c:	18c00044 	addi	r3,r3,1
   13190:	313ffb2e 	bgeu	r6,r4,13180 <__alt_data_end+0xfc013180>
   13194:	e1401115 	stw	r5,68(fp)
   13198:	e009883a 	mov	r4,fp
   1319c:	0015a640 	call	15a64 <_Balloc>
   131a0:	d8800715 	stw	r2,28(sp)
   131a4:	e0801015 	stw	r2,64(fp)
   131a8:	00800384 	movi	r2,14
   131ac:	1400f736 	bltu	r2,r16,1358c <_dtoa_r+0x764>
   131b0:	8800f626 	beq	r17,zero,1358c <_dtoa_r+0x764>
   131b4:	d9c00517 	ldw	r7,20(sp)
   131b8:	01c39a0e 	bge	zero,r7,14024 <_dtoa_r+0x11fc>
   131bc:	388003cc 	andi	r2,r7,15
   131c0:	100490fa 	slli	r2,r2,3
   131c4:	382bd13a 	srai	r21,r7,4
   131c8:	00c000f4 	movhi	r3,3
   131cc:	18e5ae04 	addi	r3,r3,-26952
   131d0:	1885883a 	add	r2,r3,r2
   131d4:	a8c0040c 	andi	r3,r21,16
   131d8:	12400017 	ldw	r9,0(r2)
   131dc:	12000117 	ldw	r8,4(r2)
   131e0:	18037926 	beq	r3,zero,13fc8 <_dtoa_r+0x11a0>
   131e4:	008000f4 	movhi	r2,3
   131e8:	10a5a404 	addi	r2,r2,-26992
   131ec:	11800817 	ldw	r6,32(r2)
   131f0:	11c00917 	ldw	r7,36(r2)
   131f4:	9009883a 	mov	r4,r18
   131f8:	980b883a 	mov	r5,r19
   131fc:	da001715 	stw	r8,92(sp)
   13200:	da401615 	stw	r9,88(sp)
   13204:	001bdb80 	call	1bdb8 <__divdf3>
   13208:	da001717 	ldw	r8,92(sp)
   1320c:	da401617 	ldw	r9,88(sp)
   13210:	ad4003cc 	andi	r21,r21,15
   13214:	040000c4 	movi	r16,3
   13218:	1023883a 	mov	r17,r2
   1321c:	1829883a 	mov	r20,r3
   13220:	a8001126 	beq	r21,zero,13268 <_dtoa_r+0x440>
   13224:	05c000f4 	movhi	r23,3
   13228:	bde5a404 	addi	r23,r23,-26992
   1322c:	4805883a 	mov	r2,r9
   13230:	4007883a 	mov	r3,r8
   13234:	a980004c 	andi	r6,r21,1
   13238:	1009883a 	mov	r4,r2
   1323c:	a82bd07a 	srai	r21,r21,1
   13240:	180b883a 	mov	r5,r3
   13244:	30000426 	beq	r6,zero,13258 <_dtoa_r+0x430>
   13248:	b9800017 	ldw	r6,0(r23)
   1324c:	b9c00117 	ldw	r7,4(r23)
   13250:	84000044 	addi	r16,r16,1
   13254:	001c9e00 	call	1c9e0 <__muldf3>
   13258:	bdc00204 	addi	r23,r23,8
   1325c:	a83ff51e 	bne	r21,zero,13234 <__alt_data_end+0xfc013234>
   13260:	1013883a 	mov	r9,r2
   13264:	1811883a 	mov	r8,r3
   13268:	480d883a 	mov	r6,r9
   1326c:	400f883a 	mov	r7,r8
   13270:	8809883a 	mov	r4,r17
   13274:	a00b883a 	mov	r5,r20
   13278:	001bdb80 	call	1bdb8 <__divdf3>
   1327c:	d8800f15 	stw	r2,60(sp)
   13280:	d8c01015 	stw	r3,64(sp)
   13284:	d8c00e17 	ldw	r3,56(sp)
   13288:	18000626 	beq	r3,zero,132a4 <_dtoa_r+0x47c>
   1328c:	d9000f17 	ldw	r4,60(sp)
   13290:	d9401017 	ldw	r5,64(sp)
   13294:	000d883a 	mov	r6,zero
   13298:	01cffc34 	movhi	r7,16368
   1329c:	001c8ec0 	call	1c8ec <__ledf2>
   132a0:	10040b16 	blt	r2,zero,142d0 <_dtoa_r+0x14a8>
   132a4:	8009883a 	mov	r4,r16
   132a8:	001dbc80 	call	1dbc8 <__floatsidf>
   132ac:	d9800f17 	ldw	r6,60(sp)
   132b0:	d9c01017 	ldw	r7,64(sp)
   132b4:	1009883a 	mov	r4,r2
   132b8:	180b883a 	mov	r5,r3
   132bc:	001c9e00 	call	1c9e0 <__muldf3>
   132c0:	000d883a 	mov	r6,zero
   132c4:	01d00734 	movhi	r7,16412
   132c8:	1009883a 	mov	r4,r2
   132cc:	180b883a 	mov	r5,r3
   132d0:	001b50c0 	call	1b50c <__adddf3>
   132d4:	1021883a 	mov	r16,r2
   132d8:	d8800617 	ldw	r2,24(sp)
   132dc:	047f3034 	movhi	r17,64704
   132e0:	1c63883a 	add	r17,r3,r17
   132e4:	10031826 	beq	r2,zero,13f48 <_dtoa_r+0x1120>
   132e8:	d8c00517 	ldw	r3,20(sp)
   132ec:	db000617 	ldw	r12,24(sp)
   132f0:	d8c01315 	stw	r3,76(sp)
   132f4:	d9000b17 	ldw	r4,44(sp)
   132f8:	20038f26 	beq	r4,zero,14138 <_dtoa_r+0x1310>
   132fc:	60bfffc4 	addi	r2,r12,-1
   13300:	100490fa 	slli	r2,r2,3
   13304:	00c000f4 	movhi	r3,3
   13308:	18e5ae04 	addi	r3,r3,-26952
   1330c:	1885883a 	add	r2,r3,r2
   13310:	11800017 	ldw	r6,0(r2)
   13314:	11c00117 	ldw	r7,4(r2)
   13318:	d8800717 	ldw	r2,28(sp)
   1331c:	0009883a 	mov	r4,zero
   13320:	014ff834 	movhi	r5,16352
   13324:	db001615 	stw	r12,88(sp)
   13328:	15c00044 	addi	r23,r2,1
   1332c:	001bdb80 	call	1bdb8 <__divdf3>
   13330:	800d883a 	mov	r6,r16
   13334:	880f883a 	mov	r7,r17
   13338:	1009883a 	mov	r4,r2
   1333c:	180b883a 	mov	r5,r3
   13340:	001d24c0 	call	1d24c <__subdf3>
   13344:	d9401017 	ldw	r5,64(sp)
   13348:	d9000f17 	ldw	r4,60(sp)
   1334c:	102b883a 	mov	r21,r2
   13350:	d8c01215 	stw	r3,72(sp)
   13354:	001db480 	call	1db48 <__fixdfsi>
   13358:	1009883a 	mov	r4,r2
   1335c:	1029883a 	mov	r20,r2
   13360:	001dbc80 	call	1dbc8 <__floatsidf>
   13364:	d9000f17 	ldw	r4,60(sp)
   13368:	d9401017 	ldw	r5,64(sp)
   1336c:	100d883a 	mov	r6,r2
   13370:	180f883a 	mov	r7,r3
   13374:	001d24c0 	call	1d24c <__subdf3>
   13378:	1823883a 	mov	r17,r3
   1337c:	d8c00717 	ldw	r3,28(sp)
   13380:	d9401217 	ldw	r5,72(sp)
   13384:	a2000c04 	addi	r8,r20,48
   13388:	1021883a 	mov	r16,r2
   1338c:	1a000005 	stb	r8,0(r3)
   13390:	800d883a 	mov	r6,r16
   13394:	880f883a 	mov	r7,r17
   13398:	a809883a 	mov	r4,r21
   1339c:	4029883a 	mov	r20,r8
   133a0:	001c8100 	call	1c810 <__gedf2>
   133a4:	00841d16 	blt	zero,r2,1441c <_dtoa_r+0x15f4>
   133a8:	800d883a 	mov	r6,r16
   133ac:	880f883a 	mov	r7,r17
   133b0:	0009883a 	mov	r4,zero
   133b4:	014ffc34 	movhi	r5,16368
   133b8:	001d24c0 	call	1d24c <__subdf3>
   133bc:	d9401217 	ldw	r5,72(sp)
   133c0:	100d883a 	mov	r6,r2
   133c4:	180f883a 	mov	r7,r3
   133c8:	a809883a 	mov	r4,r21
   133cc:	001c8100 	call	1c810 <__gedf2>
   133d0:	db001617 	ldw	r12,88(sp)
   133d4:	00840e16 	blt	zero,r2,14410 <_dtoa_r+0x15e8>
   133d8:	00800044 	movi	r2,1
   133dc:	13006b0e 	bge	r2,r12,1358c <_dtoa_r+0x764>
   133e0:	d9000717 	ldw	r4,28(sp)
   133e4:	dd800f15 	stw	r22,60(sp)
   133e8:	dcc01015 	stw	r19,64(sp)
   133ec:	2319883a 	add	r12,r4,r12
   133f0:	dcc01217 	ldw	r19,72(sp)
   133f4:	602d883a 	mov	r22,r12
   133f8:	dc801215 	stw	r18,72(sp)
   133fc:	b825883a 	mov	r18,r23
   13400:	00000906 	br	13428 <_dtoa_r+0x600>
   13404:	001d24c0 	call	1d24c <__subdf3>
   13408:	a80d883a 	mov	r6,r21
   1340c:	980f883a 	mov	r7,r19
   13410:	1009883a 	mov	r4,r2
   13414:	180b883a 	mov	r5,r3
   13418:	001c8ec0 	call	1c8ec <__ledf2>
   1341c:	1003e816 	blt	r2,zero,143c0 <_dtoa_r+0x1598>
   13420:	b825883a 	mov	r18,r23
   13424:	bd83e926 	beq	r23,r22,143cc <_dtoa_r+0x15a4>
   13428:	a809883a 	mov	r4,r21
   1342c:	980b883a 	mov	r5,r19
   13430:	000d883a 	mov	r6,zero
   13434:	01d00934 	movhi	r7,16420
   13438:	001c9e00 	call	1c9e0 <__muldf3>
   1343c:	000d883a 	mov	r6,zero
   13440:	01d00934 	movhi	r7,16420
   13444:	8009883a 	mov	r4,r16
   13448:	880b883a 	mov	r5,r17
   1344c:	102b883a 	mov	r21,r2
   13450:	1827883a 	mov	r19,r3
   13454:	001c9e00 	call	1c9e0 <__muldf3>
   13458:	180b883a 	mov	r5,r3
   1345c:	1009883a 	mov	r4,r2
   13460:	1821883a 	mov	r16,r3
   13464:	1023883a 	mov	r17,r2
   13468:	001db480 	call	1db48 <__fixdfsi>
   1346c:	1009883a 	mov	r4,r2
   13470:	1029883a 	mov	r20,r2
   13474:	001dbc80 	call	1dbc8 <__floatsidf>
   13478:	8809883a 	mov	r4,r17
   1347c:	800b883a 	mov	r5,r16
   13480:	100d883a 	mov	r6,r2
   13484:	180f883a 	mov	r7,r3
   13488:	001d24c0 	call	1d24c <__subdf3>
   1348c:	a5000c04 	addi	r20,r20,48
   13490:	a80d883a 	mov	r6,r21
   13494:	980f883a 	mov	r7,r19
   13498:	1009883a 	mov	r4,r2
   1349c:	180b883a 	mov	r5,r3
   134a0:	95000005 	stb	r20,0(r18)
   134a4:	1021883a 	mov	r16,r2
   134a8:	1823883a 	mov	r17,r3
   134ac:	001c8ec0 	call	1c8ec <__ledf2>
   134b0:	bdc00044 	addi	r23,r23,1
   134b4:	800d883a 	mov	r6,r16
   134b8:	880f883a 	mov	r7,r17
   134bc:	0009883a 	mov	r4,zero
   134c0:	014ffc34 	movhi	r5,16368
   134c4:	103fcf0e 	bge	r2,zero,13404 <__alt_data_end+0xfc013404>
   134c8:	d8c01317 	ldw	r3,76(sp)
   134cc:	d8c00515 	stw	r3,20(sp)
   134d0:	d9400917 	ldw	r5,36(sp)
   134d4:	e009883a 	mov	r4,fp
   134d8:	0015b0c0 	call	15b0c <_Bfree>
   134dc:	d9000517 	ldw	r4,20(sp)
   134e0:	d9802317 	ldw	r6,140(sp)
   134e4:	d9c02517 	ldw	r7,148(sp)
   134e8:	b8000005 	stb	zero,0(r23)
   134ec:	20800044 	addi	r2,r4,1
   134f0:	30800015 	stw	r2,0(r6)
   134f4:	3802aa26 	beq	r7,zero,13fa0 <_dtoa_r+0x1178>
   134f8:	3dc00015 	stw	r23,0(r7)
   134fc:	d8800717 	ldw	r2,28(sp)
   13500:	003e7906 	br	12ee8 <__alt_data_end+0xfc012ee8>
   13504:	00800434 	movhi	r2,16
   13508:	10bfffc4 	addi	r2,r2,-1
   1350c:	88a2703a 	and	r17,r17,r2
   13510:	883e851e 	bne	r17,zero,12f28 <__alt_data_end+0xfc012f28>
   13514:	008000f4 	movhi	r2,3
   13518:	10a59004 	addi	r2,r2,-27072
   1351c:	003e8406 	br	12f30 <__alt_data_end+0xfc012f30>
   13520:	10c00204 	addi	r3,r2,8
   13524:	003e8706 	br	12f44 <__alt_data_end+0xfc012f44>
   13528:	01400434 	movhi	r5,16
   1352c:	297fffc4 	addi	r5,r5,-1
   13530:	994a703a 	and	r5,r19,r5
   13534:	9009883a 	mov	r4,r18
   13538:	843f0044 	addi	r16,r16,-1023
   1353c:	294ffc34 	orhi	r5,r5,16368
   13540:	dd800217 	ldw	r22,8(sp)
   13544:	d8001115 	stw	zero,68(sp)
   13548:	003ea506 	br	12fe0 <__alt_data_end+0xfc012fe0>
   1354c:	008000f4 	movhi	r2,3
   13550:	10a57f04 	addi	r2,r2,-27140
   13554:	003e6406 	br	12ee8 <__alt_data_end+0xfc012ee8>
   13558:	e0001115 	stw	zero,68(fp)
   1355c:	000b883a 	mov	r5,zero
   13560:	e009883a 	mov	r4,fp
   13564:	0015a640 	call	15a64 <_Balloc>
   13568:	01bfffc4 	movi	r6,-1
   1356c:	01c00044 	movi	r7,1
   13570:	d8800715 	stw	r2,28(sp)
   13574:	d9800c15 	stw	r6,48(sp)
   13578:	e0801015 	stw	r2,64(fp)
   1357c:	d8000315 	stw	zero,12(sp)
   13580:	d9c00b15 	stw	r7,44(sp)
   13584:	d9800615 	stw	r6,24(sp)
   13588:	d8002215 	stw	zero,136(sp)
   1358c:	d8800117 	ldw	r2,4(sp)
   13590:	10008916 	blt	r2,zero,137b8 <_dtoa_r+0x990>
   13594:	d9000517 	ldw	r4,20(sp)
   13598:	00c00384 	movi	r3,14
   1359c:	19008616 	blt	r3,r4,137b8 <_dtoa_r+0x990>
   135a0:	200490fa 	slli	r2,r4,3
   135a4:	00c000f4 	movhi	r3,3
   135a8:	d9802217 	ldw	r6,136(sp)
   135ac:	18e5ae04 	addi	r3,r3,-26952
   135b0:	1885883a 	add	r2,r3,r2
   135b4:	14000017 	ldw	r16,0(r2)
   135b8:	14400117 	ldw	r17,4(r2)
   135bc:	30016316 	blt	r6,zero,13b4c <_dtoa_r+0xd24>
   135c0:	800d883a 	mov	r6,r16
   135c4:	880f883a 	mov	r7,r17
   135c8:	9009883a 	mov	r4,r18
   135cc:	980b883a 	mov	r5,r19
   135d0:	001bdb80 	call	1bdb8 <__divdf3>
   135d4:	180b883a 	mov	r5,r3
   135d8:	1009883a 	mov	r4,r2
   135dc:	001db480 	call	1db48 <__fixdfsi>
   135e0:	1009883a 	mov	r4,r2
   135e4:	102b883a 	mov	r21,r2
   135e8:	001dbc80 	call	1dbc8 <__floatsidf>
   135ec:	800d883a 	mov	r6,r16
   135f0:	880f883a 	mov	r7,r17
   135f4:	1009883a 	mov	r4,r2
   135f8:	180b883a 	mov	r5,r3
   135fc:	001c9e00 	call	1c9e0 <__muldf3>
   13600:	100d883a 	mov	r6,r2
   13604:	180f883a 	mov	r7,r3
   13608:	9009883a 	mov	r4,r18
   1360c:	980b883a 	mov	r5,r19
   13610:	001d24c0 	call	1d24c <__subdf3>
   13614:	d9c00717 	ldw	r7,28(sp)
   13618:	1009883a 	mov	r4,r2
   1361c:	a8800c04 	addi	r2,r21,48
   13620:	38800005 	stb	r2,0(r7)
   13624:	3dc00044 	addi	r23,r7,1
   13628:	d9c00617 	ldw	r7,24(sp)
   1362c:	01800044 	movi	r6,1
   13630:	180b883a 	mov	r5,r3
   13634:	2005883a 	mov	r2,r4
   13638:	39803826 	beq	r7,r6,1371c <_dtoa_r+0x8f4>
   1363c:	000d883a 	mov	r6,zero
   13640:	01d00934 	movhi	r7,16420
   13644:	001c9e00 	call	1c9e0 <__muldf3>
   13648:	000d883a 	mov	r6,zero
   1364c:	000f883a 	mov	r7,zero
   13650:	1009883a 	mov	r4,r2
   13654:	180b883a 	mov	r5,r3
   13658:	1025883a 	mov	r18,r2
   1365c:	1827883a 	mov	r19,r3
   13660:	001c7880 	call	1c788 <__eqdf2>
   13664:	103f9a26 	beq	r2,zero,134d0 <__alt_data_end+0xfc0134d0>
   13668:	d9c00617 	ldw	r7,24(sp)
   1366c:	d8c00717 	ldw	r3,28(sp)
   13670:	b829883a 	mov	r20,r23
   13674:	38bfffc4 	addi	r2,r7,-1
   13678:	18ad883a 	add	r22,r3,r2
   1367c:	00000a06 	br	136a8 <_dtoa_r+0x880>
   13680:	001c9e00 	call	1c9e0 <__muldf3>
   13684:	000d883a 	mov	r6,zero
   13688:	000f883a 	mov	r7,zero
   1368c:	1009883a 	mov	r4,r2
   13690:	180b883a 	mov	r5,r3
   13694:	1025883a 	mov	r18,r2
   13698:	1827883a 	mov	r19,r3
   1369c:	b829883a 	mov	r20,r23
   136a0:	001c7880 	call	1c788 <__eqdf2>
   136a4:	103f8a26 	beq	r2,zero,134d0 <__alt_data_end+0xfc0134d0>
   136a8:	800d883a 	mov	r6,r16
   136ac:	880f883a 	mov	r7,r17
   136b0:	9009883a 	mov	r4,r18
   136b4:	980b883a 	mov	r5,r19
   136b8:	001bdb80 	call	1bdb8 <__divdf3>
   136bc:	180b883a 	mov	r5,r3
   136c0:	1009883a 	mov	r4,r2
   136c4:	001db480 	call	1db48 <__fixdfsi>
   136c8:	1009883a 	mov	r4,r2
   136cc:	102b883a 	mov	r21,r2
   136d0:	001dbc80 	call	1dbc8 <__floatsidf>
   136d4:	800d883a 	mov	r6,r16
   136d8:	880f883a 	mov	r7,r17
   136dc:	1009883a 	mov	r4,r2
   136e0:	180b883a 	mov	r5,r3
   136e4:	001c9e00 	call	1c9e0 <__muldf3>
   136e8:	100d883a 	mov	r6,r2
   136ec:	180f883a 	mov	r7,r3
   136f0:	9009883a 	mov	r4,r18
   136f4:	980b883a 	mov	r5,r19
   136f8:	001d24c0 	call	1d24c <__subdf3>
   136fc:	aa000c04 	addi	r8,r21,48
   13700:	a2000005 	stb	r8,0(r20)
   13704:	000d883a 	mov	r6,zero
   13708:	01d00934 	movhi	r7,16420
   1370c:	1009883a 	mov	r4,r2
   13710:	180b883a 	mov	r5,r3
   13714:	a5c00044 	addi	r23,r20,1
   13718:	b53fd91e 	bne	r22,r20,13680 <__alt_data_end+0xfc013680>
   1371c:	100d883a 	mov	r6,r2
   13720:	180f883a 	mov	r7,r3
   13724:	1009883a 	mov	r4,r2
   13728:	180b883a 	mov	r5,r3
   1372c:	001b50c0 	call	1b50c <__adddf3>
   13730:	100d883a 	mov	r6,r2
   13734:	180f883a 	mov	r7,r3
   13738:	8009883a 	mov	r4,r16
   1373c:	880b883a 	mov	r5,r17
   13740:	1027883a 	mov	r19,r2
   13744:	1825883a 	mov	r18,r3
   13748:	001c8ec0 	call	1c8ec <__ledf2>
   1374c:	10000816 	blt	r2,zero,13770 <_dtoa_r+0x948>
   13750:	980d883a 	mov	r6,r19
   13754:	900f883a 	mov	r7,r18
   13758:	8009883a 	mov	r4,r16
   1375c:	880b883a 	mov	r5,r17
   13760:	001c7880 	call	1c788 <__eqdf2>
   13764:	103f5a1e 	bne	r2,zero,134d0 <__alt_data_end+0xfc0134d0>
   13768:	ad40004c 	andi	r21,r21,1
   1376c:	a83f5826 	beq	r21,zero,134d0 <__alt_data_end+0xfc0134d0>
   13770:	bd3fffc3 	ldbu	r20,-1(r23)
   13774:	b8bfffc4 	addi	r2,r23,-1
   13778:	1007883a 	mov	r3,r2
   1377c:	01400e44 	movi	r5,57
   13780:	d9800717 	ldw	r6,28(sp)
   13784:	00000506 	br	1379c <_dtoa_r+0x974>
   13788:	18ffffc4 	addi	r3,r3,-1
   1378c:	11824726 	beq	r2,r6,140ac <_dtoa_r+0x1284>
   13790:	1d000003 	ldbu	r20,0(r3)
   13794:	102f883a 	mov	r23,r2
   13798:	10bfffc4 	addi	r2,r2,-1
   1379c:	a1003fcc 	andi	r4,r20,255
   137a0:	2100201c 	xori	r4,r4,128
   137a4:	213fe004 	addi	r4,r4,-128
   137a8:	217ff726 	beq	r4,r5,13788 <__alt_data_end+0xfc013788>
   137ac:	a2000044 	addi	r8,r20,1
   137b0:	12000005 	stb	r8,0(r2)
   137b4:	003f4606 	br	134d0 <__alt_data_end+0xfc0134d0>
   137b8:	d9000b17 	ldw	r4,44(sp)
   137bc:	2000c826 	beq	r4,zero,13ae0 <_dtoa_r+0xcb8>
   137c0:	d9800317 	ldw	r6,12(sp)
   137c4:	00c00044 	movi	r3,1
   137c8:	1980f90e 	bge	r3,r6,13bb0 <_dtoa_r+0xd88>
   137cc:	d8800617 	ldw	r2,24(sp)
   137d0:	d8c00a17 	ldw	r3,40(sp)
   137d4:	157fffc4 	addi	r21,r2,-1
   137d8:	1d41f316 	blt	r3,r21,13fa8 <_dtoa_r+0x1180>
   137dc:	1d6bc83a 	sub	r21,r3,r21
   137e0:	d9c00617 	ldw	r7,24(sp)
   137e4:	3802aa16 	blt	r7,zero,14290 <_dtoa_r+0x1468>
   137e8:	dd000817 	ldw	r20,32(sp)
   137ec:	d8800617 	ldw	r2,24(sp)
   137f0:	d8c00817 	ldw	r3,32(sp)
   137f4:	01400044 	movi	r5,1
   137f8:	e009883a 	mov	r4,fp
   137fc:	1887883a 	add	r3,r3,r2
   13800:	d8c00815 	stw	r3,32(sp)
   13804:	b0ad883a 	add	r22,r22,r2
   13808:	0015e980 	call	15e98 <__i2b>
   1380c:	1023883a 	mov	r17,r2
   13810:	a0000826 	beq	r20,zero,13834 <_dtoa_r+0xa0c>
   13814:	0580070e 	bge	zero,r22,13834 <_dtoa_r+0xa0c>
   13818:	a005883a 	mov	r2,r20
   1381c:	b500b916 	blt	r22,r20,13b04 <_dtoa_r+0xcdc>
   13820:	d9000817 	ldw	r4,32(sp)
   13824:	a0a9c83a 	sub	r20,r20,r2
   13828:	b0adc83a 	sub	r22,r22,r2
   1382c:	2089c83a 	sub	r4,r4,r2
   13830:	d9000815 	stw	r4,32(sp)
   13834:	d9800a17 	ldw	r6,40(sp)
   13838:	0181810e 	bge	zero,r6,13e40 <_dtoa_r+0x1018>
   1383c:	d9c00b17 	ldw	r7,44(sp)
   13840:	3800b326 	beq	r7,zero,13b10 <_dtoa_r+0xce8>
   13844:	a800b226 	beq	r21,zero,13b10 <_dtoa_r+0xce8>
   13848:	880b883a 	mov	r5,r17
   1384c:	a80d883a 	mov	r6,r21
   13850:	e009883a 	mov	r4,fp
   13854:	00161600 	call	16160 <__pow5mult>
   13858:	d9800917 	ldw	r6,36(sp)
   1385c:	100b883a 	mov	r5,r2
   13860:	e009883a 	mov	r4,fp
   13864:	1023883a 	mov	r17,r2
   13868:	0015ed40 	call	15ed4 <__multiply>
   1386c:	1021883a 	mov	r16,r2
   13870:	d8800a17 	ldw	r2,40(sp)
   13874:	d9400917 	ldw	r5,36(sp)
   13878:	e009883a 	mov	r4,fp
   1387c:	1545c83a 	sub	r2,r2,r21
   13880:	d8800a15 	stw	r2,40(sp)
   13884:	0015b0c0 	call	15b0c <_Bfree>
   13888:	d8c00a17 	ldw	r3,40(sp)
   1388c:	18009f1e 	bne	r3,zero,13b0c <_dtoa_r+0xce4>
   13890:	05c00044 	movi	r23,1
   13894:	e009883a 	mov	r4,fp
   13898:	b80b883a 	mov	r5,r23
   1389c:	0015e980 	call	15e98 <__i2b>
   138a0:	d9000d17 	ldw	r4,52(sp)
   138a4:	102b883a 	mov	r21,r2
   138a8:	2000ce26 	beq	r4,zero,13be4 <_dtoa_r+0xdbc>
   138ac:	200d883a 	mov	r6,r4
   138b0:	100b883a 	mov	r5,r2
   138b4:	e009883a 	mov	r4,fp
   138b8:	00161600 	call	16160 <__pow5mult>
   138bc:	d9800317 	ldw	r6,12(sp)
   138c0:	102b883a 	mov	r21,r2
   138c4:	b981810e 	bge	r23,r6,13ecc <_dtoa_r+0x10a4>
   138c8:	0027883a 	mov	r19,zero
   138cc:	a8800417 	ldw	r2,16(r21)
   138d0:	05c00804 	movi	r23,32
   138d4:	10800104 	addi	r2,r2,4
   138d8:	1085883a 	add	r2,r2,r2
   138dc:	1085883a 	add	r2,r2,r2
   138e0:	a885883a 	add	r2,r21,r2
   138e4:	11000017 	ldw	r4,0(r2)
   138e8:	0015d800 	call	15d80 <__hi0bits>
   138ec:	b885c83a 	sub	r2,r23,r2
   138f0:	1585883a 	add	r2,r2,r22
   138f4:	108007cc 	andi	r2,r2,31
   138f8:	1000b326 	beq	r2,zero,13bc8 <_dtoa_r+0xda0>
   138fc:	00c00804 	movi	r3,32
   13900:	1887c83a 	sub	r3,r3,r2
   13904:	01000104 	movi	r4,4
   13908:	20c2cd0e 	bge	r4,r3,14440 <_dtoa_r+0x1618>
   1390c:	00c00704 	movi	r3,28
   13910:	1885c83a 	sub	r2,r3,r2
   13914:	d8c00817 	ldw	r3,32(sp)
   13918:	a0a9883a 	add	r20,r20,r2
   1391c:	b0ad883a 	add	r22,r22,r2
   13920:	1887883a 	add	r3,r3,r2
   13924:	d8c00815 	stw	r3,32(sp)
   13928:	d9800817 	ldw	r6,32(sp)
   1392c:	0180040e 	bge	zero,r6,13940 <_dtoa_r+0xb18>
   13930:	800b883a 	mov	r5,r16
   13934:	e009883a 	mov	r4,fp
   13938:	00162a00 	call	162a0 <__lshift>
   1393c:	1021883a 	mov	r16,r2
   13940:	0580050e 	bge	zero,r22,13958 <_dtoa_r+0xb30>
   13944:	a80b883a 	mov	r5,r21
   13948:	b00d883a 	mov	r6,r22
   1394c:	e009883a 	mov	r4,fp
   13950:	00162a00 	call	162a0 <__lshift>
   13954:	102b883a 	mov	r21,r2
   13958:	d9c00e17 	ldw	r7,56(sp)
   1395c:	3801211e 	bne	r7,zero,13de4 <_dtoa_r+0xfbc>
   13960:	d9800617 	ldw	r6,24(sp)
   13964:	0181380e 	bge	zero,r6,13e48 <_dtoa_r+0x1020>
   13968:	d8c00b17 	ldw	r3,44(sp)
   1396c:	1800ab1e 	bne	r3,zero,13c1c <_dtoa_r+0xdf4>
   13970:	dc800717 	ldw	r18,28(sp)
   13974:	dcc00617 	ldw	r19,24(sp)
   13978:	9029883a 	mov	r20,r18
   1397c:	00000206 	br	13988 <_dtoa_r+0xb60>
   13980:	0015b340 	call	15b34 <__multadd>
   13984:	1021883a 	mov	r16,r2
   13988:	a80b883a 	mov	r5,r21
   1398c:	8009883a 	mov	r4,r16
   13990:	0012c000 	call	12c00 <quorem>
   13994:	10800c04 	addi	r2,r2,48
   13998:	90800005 	stb	r2,0(r18)
   1399c:	94800044 	addi	r18,r18,1
   139a0:	9507c83a 	sub	r3,r18,r20
   139a4:	000f883a 	mov	r7,zero
   139a8:	01800284 	movi	r6,10
   139ac:	800b883a 	mov	r5,r16
   139b0:	e009883a 	mov	r4,fp
   139b4:	1cfff216 	blt	r3,r19,13980 <__alt_data_end+0xfc013980>
   139b8:	1011883a 	mov	r8,r2
   139bc:	d8800617 	ldw	r2,24(sp)
   139c0:	0082370e 	bge	zero,r2,142a0 <_dtoa_r+0x1478>
   139c4:	d9000717 	ldw	r4,28(sp)
   139c8:	0025883a 	mov	r18,zero
   139cc:	20af883a 	add	r23,r4,r2
   139d0:	01800044 	movi	r6,1
   139d4:	800b883a 	mov	r5,r16
   139d8:	e009883a 	mov	r4,fp
   139dc:	da001715 	stw	r8,92(sp)
   139e0:	00162a00 	call	162a0 <__lshift>
   139e4:	a80b883a 	mov	r5,r21
   139e8:	1009883a 	mov	r4,r2
   139ec:	d8800915 	stw	r2,36(sp)
   139f0:	00163e80 	call	163e8 <__mcmp>
   139f4:	da001717 	ldw	r8,92(sp)
   139f8:	0081800e 	bge	zero,r2,13ffc <_dtoa_r+0x11d4>
   139fc:	b93fffc3 	ldbu	r4,-1(r23)
   13a00:	b8bfffc4 	addi	r2,r23,-1
   13a04:	1007883a 	mov	r3,r2
   13a08:	01800e44 	movi	r6,57
   13a0c:	d9c00717 	ldw	r7,28(sp)
   13a10:	00000506 	br	13a28 <_dtoa_r+0xc00>
   13a14:	18ffffc4 	addi	r3,r3,-1
   13a18:	11c12326 	beq	r2,r7,13ea8 <_dtoa_r+0x1080>
   13a1c:	19000003 	ldbu	r4,0(r3)
   13a20:	102f883a 	mov	r23,r2
   13a24:	10bfffc4 	addi	r2,r2,-1
   13a28:	21403fcc 	andi	r5,r4,255
   13a2c:	2940201c 	xori	r5,r5,128
   13a30:	297fe004 	addi	r5,r5,-128
   13a34:	29bff726 	beq	r5,r6,13a14 <__alt_data_end+0xfc013a14>
   13a38:	21000044 	addi	r4,r4,1
   13a3c:	11000005 	stb	r4,0(r2)
   13a40:	a80b883a 	mov	r5,r21
   13a44:	e009883a 	mov	r4,fp
   13a48:	0015b0c0 	call	15b0c <_Bfree>
   13a4c:	883ea026 	beq	r17,zero,134d0 <__alt_data_end+0xfc0134d0>
   13a50:	90000426 	beq	r18,zero,13a64 <_dtoa_r+0xc3c>
   13a54:	94400326 	beq	r18,r17,13a64 <_dtoa_r+0xc3c>
   13a58:	900b883a 	mov	r5,r18
   13a5c:	e009883a 	mov	r4,fp
   13a60:	0015b0c0 	call	15b0c <_Bfree>
   13a64:	880b883a 	mov	r5,r17
   13a68:	e009883a 	mov	r4,fp
   13a6c:	0015b0c0 	call	15b0c <_Bfree>
   13a70:	003e9706 	br	134d0 <__alt_data_end+0xfc0134d0>
   13a74:	01800044 	movi	r6,1
   13a78:	d9800e15 	stw	r6,56(sp)
   13a7c:	003d9606 	br	130d8 <__alt_data_end+0xfc0130d8>
   13a80:	d8800817 	ldw	r2,32(sp)
   13a84:	d8c00517 	ldw	r3,20(sp)
   13a88:	d8000d15 	stw	zero,52(sp)
   13a8c:	10c5c83a 	sub	r2,r2,r3
   13a90:	00c9c83a 	sub	r4,zero,r3
   13a94:	d8800815 	stw	r2,32(sp)
   13a98:	d9000a15 	stw	r4,40(sp)
   13a9c:	003d9706 	br	130fc <__alt_data_end+0xfc0130fc>
   13aa0:	05adc83a 	sub	r22,zero,r22
   13aa4:	dd800815 	stw	r22,32(sp)
   13aa8:	002d883a 	mov	r22,zero
   13aac:	003d8e06 	br	130e8 <__alt_data_end+0xfc0130e8>
   13ab0:	d9000517 	ldw	r4,20(sp)
   13ab4:	001dbc80 	call	1dbc8 <__floatsidf>
   13ab8:	100d883a 	mov	r6,r2
   13abc:	180f883a 	mov	r7,r3
   13ac0:	a009883a 	mov	r4,r20
   13ac4:	880b883a 	mov	r5,r17
   13ac8:	001c7880 	call	1c788 <__eqdf2>
   13acc:	103d7126 	beq	r2,zero,13094 <__alt_data_end+0xfc013094>
   13ad0:	d9c00517 	ldw	r7,20(sp)
   13ad4:	39ffffc4 	addi	r7,r7,-1
   13ad8:	d9c00515 	stw	r7,20(sp)
   13adc:	003d6d06 	br	13094 <__alt_data_end+0xfc013094>
   13ae0:	dd400a17 	ldw	r21,40(sp)
   13ae4:	dd000817 	ldw	r20,32(sp)
   13ae8:	0023883a 	mov	r17,zero
   13aec:	003f4806 	br	13810 <__alt_data_end+0xfc013810>
   13af0:	10e3c83a 	sub	r17,r2,r3
   13af4:	9448983a 	sll	r4,r18,r17
   13af8:	003d3206 	br	12fc4 <__alt_data_end+0xfc012fc4>
   13afc:	d8000e15 	stw	zero,56(sp)
   13b00:	003d7506 	br	130d8 <__alt_data_end+0xfc0130d8>
   13b04:	b005883a 	mov	r2,r22
   13b08:	003f4506 	br	13820 <__alt_data_end+0xfc013820>
   13b0c:	dc000915 	stw	r16,36(sp)
   13b10:	d9800a17 	ldw	r6,40(sp)
   13b14:	d9400917 	ldw	r5,36(sp)
   13b18:	e009883a 	mov	r4,fp
   13b1c:	00161600 	call	16160 <__pow5mult>
   13b20:	1021883a 	mov	r16,r2
   13b24:	003f5a06 	br	13890 <__alt_data_end+0xfc013890>
   13b28:	01c00044 	movi	r7,1
   13b2c:	d9c00b15 	stw	r7,44(sp)
   13b30:	d8802217 	ldw	r2,136(sp)
   13b34:	0081280e 	bge	zero,r2,13fd8 <_dtoa_r+0x11b0>
   13b38:	100d883a 	mov	r6,r2
   13b3c:	1021883a 	mov	r16,r2
   13b40:	d8800c15 	stw	r2,48(sp)
   13b44:	d8800615 	stw	r2,24(sp)
   13b48:	003d8806 	br	1316c <__alt_data_end+0xfc01316c>
   13b4c:	d8800617 	ldw	r2,24(sp)
   13b50:	00be9b16 	blt	zero,r2,135c0 <__alt_data_end+0xfc0135c0>
   13b54:	10010f1e 	bne	r2,zero,13f94 <_dtoa_r+0x116c>
   13b58:	880b883a 	mov	r5,r17
   13b5c:	000d883a 	mov	r6,zero
   13b60:	01d00534 	movhi	r7,16404
   13b64:	8009883a 	mov	r4,r16
   13b68:	001c9e00 	call	1c9e0 <__muldf3>
   13b6c:	900d883a 	mov	r6,r18
   13b70:	980f883a 	mov	r7,r19
   13b74:	1009883a 	mov	r4,r2
   13b78:	180b883a 	mov	r5,r3
   13b7c:	001c8100 	call	1c810 <__gedf2>
   13b80:	002b883a 	mov	r21,zero
   13b84:	0023883a 	mov	r17,zero
   13b88:	1000bf16 	blt	r2,zero,13e88 <_dtoa_r+0x1060>
   13b8c:	d9802217 	ldw	r6,136(sp)
   13b90:	ddc00717 	ldw	r23,28(sp)
   13b94:	018c303a 	nor	r6,zero,r6
   13b98:	d9800515 	stw	r6,20(sp)
   13b9c:	a80b883a 	mov	r5,r21
   13ba0:	e009883a 	mov	r4,fp
   13ba4:	0015b0c0 	call	15b0c <_Bfree>
   13ba8:	883e4926 	beq	r17,zero,134d0 <__alt_data_end+0xfc0134d0>
   13bac:	003fad06 	br	13a64 <__alt_data_end+0xfc013a64>
   13bb0:	d9c01117 	ldw	r7,68(sp)
   13bb4:	3801bc26 	beq	r7,zero,142a8 <_dtoa_r+0x1480>
   13bb8:	10810cc4 	addi	r2,r2,1075
   13bbc:	dd400a17 	ldw	r21,40(sp)
   13bc0:	dd000817 	ldw	r20,32(sp)
   13bc4:	003f0a06 	br	137f0 <__alt_data_end+0xfc0137f0>
   13bc8:	00800704 	movi	r2,28
   13bcc:	d9000817 	ldw	r4,32(sp)
   13bd0:	a0a9883a 	add	r20,r20,r2
   13bd4:	b0ad883a 	add	r22,r22,r2
   13bd8:	2089883a 	add	r4,r4,r2
   13bdc:	d9000815 	stw	r4,32(sp)
   13be0:	003f5106 	br	13928 <__alt_data_end+0xfc013928>
   13be4:	d8c00317 	ldw	r3,12(sp)
   13be8:	b8c1fc0e 	bge	r23,r3,143dc <_dtoa_r+0x15b4>
   13bec:	0027883a 	mov	r19,zero
   13bf0:	b805883a 	mov	r2,r23
   13bf4:	003f3e06 	br	138f0 <__alt_data_end+0xfc0138f0>
   13bf8:	880b883a 	mov	r5,r17
   13bfc:	e009883a 	mov	r4,fp
   13c00:	000f883a 	mov	r7,zero
   13c04:	01800284 	movi	r6,10
   13c08:	0015b340 	call	15b34 <__multadd>
   13c0c:	d9000c17 	ldw	r4,48(sp)
   13c10:	1023883a 	mov	r17,r2
   13c14:	0102040e 	bge	zero,r4,14428 <_dtoa_r+0x1600>
   13c18:	d9000615 	stw	r4,24(sp)
   13c1c:	0500050e 	bge	zero,r20,13c34 <_dtoa_r+0xe0c>
   13c20:	880b883a 	mov	r5,r17
   13c24:	a00d883a 	mov	r6,r20
   13c28:	e009883a 	mov	r4,fp
   13c2c:	00162a00 	call	162a0 <__lshift>
   13c30:	1023883a 	mov	r17,r2
   13c34:	9801241e 	bne	r19,zero,140c8 <_dtoa_r+0x12a0>
   13c38:	8829883a 	mov	r20,r17
   13c3c:	d9000617 	ldw	r4,24(sp)
   13c40:	dcc00717 	ldw	r19,28(sp)
   13c44:	9480004c 	andi	r18,r18,1
   13c48:	20bfffc4 	addi	r2,r4,-1
   13c4c:	9885883a 	add	r2,r19,r2
   13c50:	d8800415 	stw	r2,16(sp)
   13c54:	dc800615 	stw	r18,24(sp)
   13c58:	a80b883a 	mov	r5,r21
   13c5c:	8009883a 	mov	r4,r16
   13c60:	0012c000 	call	12c00 <quorem>
   13c64:	880b883a 	mov	r5,r17
   13c68:	8009883a 	mov	r4,r16
   13c6c:	102f883a 	mov	r23,r2
   13c70:	00163e80 	call	163e8 <__mcmp>
   13c74:	a80b883a 	mov	r5,r21
   13c78:	a00d883a 	mov	r6,r20
   13c7c:	e009883a 	mov	r4,fp
   13c80:	102d883a 	mov	r22,r2
   13c84:	00164480 	call	16448 <__mdiff>
   13c88:	1007883a 	mov	r3,r2
   13c8c:	10800317 	ldw	r2,12(r2)
   13c90:	bc800c04 	addi	r18,r23,48
   13c94:	180b883a 	mov	r5,r3
   13c98:	10004e1e 	bne	r2,zero,13dd4 <_dtoa_r+0xfac>
   13c9c:	8009883a 	mov	r4,r16
   13ca0:	d8c01615 	stw	r3,88(sp)
   13ca4:	00163e80 	call	163e8 <__mcmp>
   13ca8:	d8c01617 	ldw	r3,88(sp)
   13cac:	e009883a 	mov	r4,fp
   13cb0:	d8801615 	stw	r2,88(sp)
   13cb4:	180b883a 	mov	r5,r3
   13cb8:	0015b0c0 	call	15b0c <_Bfree>
   13cbc:	d8801617 	ldw	r2,88(sp)
   13cc0:	1000041e 	bne	r2,zero,13cd4 <_dtoa_r+0xeac>
   13cc4:	d9800317 	ldw	r6,12(sp)
   13cc8:	3000021e 	bne	r6,zero,13cd4 <_dtoa_r+0xeac>
   13ccc:	d8c00617 	ldw	r3,24(sp)
   13cd0:	18003726 	beq	r3,zero,13db0 <_dtoa_r+0xf88>
   13cd4:	b0002016 	blt	r22,zero,13d58 <_dtoa_r+0xf30>
   13cd8:	b000041e 	bne	r22,zero,13cec <_dtoa_r+0xec4>
   13cdc:	d9000317 	ldw	r4,12(sp)
   13ce0:	2000021e 	bne	r4,zero,13cec <_dtoa_r+0xec4>
   13ce4:	d8c00617 	ldw	r3,24(sp)
   13ce8:	18001b26 	beq	r3,zero,13d58 <_dtoa_r+0xf30>
   13cec:	00810716 	blt	zero,r2,1410c <_dtoa_r+0x12e4>
   13cf0:	d8c00417 	ldw	r3,16(sp)
   13cf4:	9d800044 	addi	r22,r19,1
   13cf8:	9c800005 	stb	r18,0(r19)
   13cfc:	b02f883a 	mov	r23,r22
   13d00:	98c10626 	beq	r19,r3,1411c <_dtoa_r+0x12f4>
   13d04:	800b883a 	mov	r5,r16
   13d08:	000f883a 	mov	r7,zero
   13d0c:	01800284 	movi	r6,10
   13d10:	e009883a 	mov	r4,fp
   13d14:	0015b340 	call	15b34 <__multadd>
   13d18:	1021883a 	mov	r16,r2
   13d1c:	000f883a 	mov	r7,zero
   13d20:	01800284 	movi	r6,10
   13d24:	880b883a 	mov	r5,r17
   13d28:	e009883a 	mov	r4,fp
   13d2c:	8d002526 	beq	r17,r20,13dc4 <_dtoa_r+0xf9c>
   13d30:	0015b340 	call	15b34 <__multadd>
   13d34:	a00b883a 	mov	r5,r20
   13d38:	000f883a 	mov	r7,zero
   13d3c:	01800284 	movi	r6,10
   13d40:	e009883a 	mov	r4,fp
   13d44:	1023883a 	mov	r17,r2
   13d48:	0015b340 	call	15b34 <__multadd>
   13d4c:	1029883a 	mov	r20,r2
   13d50:	b027883a 	mov	r19,r22
   13d54:	003fc006 	br	13c58 <__alt_data_end+0xfc013c58>
   13d58:	9011883a 	mov	r8,r18
   13d5c:	00800e0e 	bge	zero,r2,13d98 <_dtoa_r+0xf70>
   13d60:	800b883a 	mov	r5,r16
   13d64:	01800044 	movi	r6,1
   13d68:	e009883a 	mov	r4,fp
   13d6c:	da001715 	stw	r8,92(sp)
   13d70:	00162a00 	call	162a0 <__lshift>
   13d74:	a80b883a 	mov	r5,r21
   13d78:	1009883a 	mov	r4,r2
   13d7c:	1021883a 	mov	r16,r2
   13d80:	00163e80 	call	163e8 <__mcmp>
   13d84:	da001717 	ldw	r8,92(sp)
   13d88:	0081960e 	bge	zero,r2,143e4 <_dtoa_r+0x15bc>
   13d8c:	00800e44 	movi	r2,57
   13d90:	40817026 	beq	r8,r2,14354 <_dtoa_r+0x152c>
   13d94:	ba000c44 	addi	r8,r23,49
   13d98:	8825883a 	mov	r18,r17
   13d9c:	9dc00044 	addi	r23,r19,1
   13da0:	9a000005 	stb	r8,0(r19)
   13da4:	a023883a 	mov	r17,r20
   13da8:	dc000915 	stw	r16,36(sp)
   13dac:	003f2406 	br	13a40 <__alt_data_end+0xfc013a40>
   13db0:	00800e44 	movi	r2,57
   13db4:	9011883a 	mov	r8,r18
   13db8:	90816626 	beq	r18,r2,14354 <_dtoa_r+0x152c>
   13dbc:	05bff516 	blt	zero,r22,13d94 <__alt_data_end+0xfc013d94>
   13dc0:	003ff506 	br	13d98 <__alt_data_end+0xfc013d98>
   13dc4:	0015b340 	call	15b34 <__multadd>
   13dc8:	1023883a 	mov	r17,r2
   13dcc:	1029883a 	mov	r20,r2
   13dd0:	003fdf06 	br	13d50 <__alt_data_end+0xfc013d50>
   13dd4:	e009883a 	mov	r4,fp
   13dd8:	0015b0c0 	call	15b0c <_Bfree>
   13ddc:	00800044 	movi	r2,1
   13de0:	003fbc06 	br	13cd4 <__alt_data_end+0xfc013cd4>
   13de4:	a80b883a 	mov	r5,r21
   13de8:	8009883a 	mov	r4,r16
   13dec:	00163e80 	call	163e8 <__mcmp>
   13df0:	103edb0e 	bge	r2,zero,13960 <__alt_data_end+0xfc013960>
   13df4:	800b883a 	mov	r5,r16
   13df8:	000f883a 	mov	r7,zero
   13dfc:	01800284 	movi	r6,10
   13e00:	e009883a 	mov	r4,fp
   13e04:	0015b340 	call	15b34 <__multadd>
   13e08:	1021883a 	mov	r16,r2
   13e0c:	d8800517 	ldw	r2,20(sp)
   13e10:	d8c00b17 	ldw	r3,44(sp)
   13e14:	10bfffc4 	addi	r2,r2,-1
   13e18:	d8800515 	stw	r2,20(sp)
   13e1c:	183f761e 	bne	r3,zero,13bf8 <__alt_data_end+0xfc013bf8>
   13e20:	d9000c17 	ldw	r4,48(sp)
   13e24:	0101730e 	bge	zero,r4,143f4 <_dtoa_r+0x15cc>
   13e28:	d9000615 	stw	r4,24(sp)
   13e2c:	003ed006 	br	13970 <__alt_data_end+0xfc013970>
   13e30:	00800084 	movi	r2,2
   13e34:	3081861e 	bne	r6,r2,14450 <_dtoa_r+0x1628>
   13e38:	d8000b15 	stw	zero,44(sp)
   13e3c:	003f3c06 	br	13b30 <__alt_data_end+0xfc013b30>
   13e40:	dc000917 	ldw	r16,36(sp)
   13e44:	003e9206 	br	13890 <__alt_data_end+0xfc013890>
   13e48:	d9c00317 	ldw	r7,12(sp)
   13e4c:	00800084 	movi	r2,2
   13e50:	11fec50e 	bge	r2,r7,13968 <__alt_data_end+0xfc013968>
   13e54:	d9000617 	ldw	r4,24(sp)
   13e58:	20013c1e 	bne	r4,zero,1434c <_dtoa_r+0x1524>
   13e5c:	a80b883a 	mov	r5,r21
   13e60:	000f883a 	mov	r7,zero
   13e64:	01800144 	movi	r6,5
   13e68:	e009883a 	mov	r4,fp
   13e6c:	0015b340 	call	15b34 <__multadd>
   13e70:	100b883a 	mov	r5,r2
   13e74:	8009883a 	mov	r4,r16
   13e78:	102b883a 	mov	r21,r2
   13e7c:	00163e80 	call	163e8 <__mcmp>
   13e80:	dc000915 	stw	r16,36(sp)
   13e84:	00bf410e 	bge	zero,r2,13b8c <__alt_data_end+0xfc013b8c>
   13e88:	d9c00717 	ldw	r7,28(sp)
   13e8c:	00800c44 	movi	r2,49
   13e90:	38800005 	stb	r2,0(r7)
   13e94:	d8800517 	ldw	r2,20(sp)
   13e98:	3dc00044 	addi	r23,r7,1
   13e9c:	10800044 	addi	r2,r2,1
   13ea0:	d8800515 	stw	r2,20(sp)
   13ea4:	003f3d06 	br	13b9c <__alt_data_end+0xfc013b9c>
   13ea8:	d9800517 	ldw	r6,20(sp)
   13eac:	d9c00717 	ldw	r7,28(sp)
   13eb0:	00800c44 	movi	r2,49
   13eb4:	31800044 	addi	r6,r6,1
   13eb8:	d9800515 	stw	r6,20(sp)
   13ebc:	38800005 	stb	r2,0(r7)
   13ec0:	003edf06 	br	13a40 <__alt_data_end+0xfc013a40>
   13ec4:	d8000b15 	stw	zero,44(sp)
   13ec8:	003c9f06 	br	13148 <__alt_data_end+0xfc013148>
   13ecc:	903e7e1e 	bne	r18,zero,138c8 <__alt_data_end+0xfc0138c8>
   13ed0:	00800434 	movhi	r2,16
   13ed4:	10bfffc4 	addi	r2,r2,-1
   13ed8:	9884703a 	and	r2,r19,r2
   13edc:	1000ea1e 	bne	r2,zero,14288 <_dtoa_r+0x1460>
   13ee0:	9cdffc2c 	andhi	r19,r19,32752
   13ee4:	9800e826 	beq	r19,zero,14288 <_dtoa_r+0x1460>
   13ee8:	d9c00817 	ldw	r7,32(sp)
   13eec:	b5800044 	addi	r22,r22,1
   13ef0:	04c00044 	movi	r19,1
   13ef4:	39c00044 	addi	r7,r7,1
   13ef8:	d9c00815 	stw	r7,32(sp)
   13efc:	d8800d17 	ldw	r2,52(sp)
   13f00:	103e721e 	bne	r2,zero,138cc <__alt_data_end+0xfc0138cc>
   13f04:	00800044 	movi	r2,1
   13f08:	003e7906 	br	138f0 <__alt_data_end+0xfc0138f0>
   13f0c:	8009883a 	mov	r4,r16
   13f10:	001dbc80 	call	1dbc8 <__floatsidf>
   13f14:	d9800f17 	ldw	r6,60(sp)
   13f18:	d9c01017 	ldw	r7,64(sp)
   13f1c:	1009883a 	mov	r4,r2
   13f20:	180b883a 	mov	r5,r3
   13f24:	001c9e00 	call	1c9e0 <__muldf3>
   13f28:	000d883a 	mov	r6,zero
   13f2c:	01d00734 	movhi	r7,16412
   13f30:	1009883a 	mov	r4,r2
   13f34:	180b883a 	mov	r5,r3
   13f38:	001b50c0 	call	1b50c <__adddf3>
   13f3c:	047f3034 	movhi	r17,64704
   13f40:	1021883a 	mov	r16,r2
   13f44:	1c63883a 	add	r17,r3,r17
   13f48:	d9000f17 	ldw	r4,60(sp)
   13f4c:	d9401017 	ldw	r5,64(sp)
   13f50:	000d883a 	mov	r6,zero
   13f54:	01d00534 	movhi	r7,16404
   13f58:	001d24c0 	call	1d24c <__subdf3>
   13f5c:	800d883a 	mov	r6,r16
   13f60:	880f883a 	mov	r7,r17
   13f64:	1009883a 	mov	r4,r2
   13f68:	180b883a 	mov	r5,r3
   13f6c:	102b883a 	mov	r21,r2
   13f70:	1829883a 	mov	r20,r3
   13f74:	001c8100 	call	1c810 <__gedf2>
   13f78:	00806c16 	blt	zero,r2,1412c <_dtoa_r+0x1304>
   13f7c:	89e0003c 	xorhi	r7,r17,32768
   13f80:	800d883a 	mov	r6,r16
   13f84:	a809883a 	mov	r4,r21
   13f88:	a00b883a 	mov	r5,r20
   13f8c:	001c8ec0 	call	1c8ec <__ledf2>
   13f90:	103d7e0e 	bge	r2,zero,1358c <__alt_data_end+0xfc01358c>
   13f94:	002b883a 	mov	r21,zero
   13f98:	0023883a 	mov	r17,zero
   13f9c:	003efb06 	br	13b8c <__alt_data_end+0xfc013b8c>
   13fa0:	d8800717 	ldw	r2,28(sp)
   13fa4:	003bd006 	br	12ee8 <__alt_data_end+0xfc012ee8>
   13fa8:	d9000a17 	ldw	r4,40(sp)
   13fac:	d9800d17 	ldw	r6,52(sp)
   13fb0:	dd400a15 	stw	r21,40(sp)
   13fb4:	a905c83a 	sub	r2,r21,r4
   13fb8:	308d883a 	add	r6,r6,r2
   13fbc:	d9800d15 	stw	r6,52(sp)
   13fc0:	002b883a 	mov	r21,zero
   13fc4:	003e0606 	br	137e0 <__alt_data_end+0xfc0137e0>
   13fc8:	9023883a 	mov	r17,r18
   13fcc:	9829883a 	mov	r20,r19
   13fd0:	04000084 	movi	r16,2
   13fd4:	003c9206 	br	13220 <__alt_data_end+0xfc013220>
   13fd8:	04000044 	movi	r16,1
   13fdc:	dc000c15 	stw	r16,48(sp)
   13fe0:	dc000615 	stw	r16,24(sp)
   13fe4:	dc002215 	stw	r16,136(sp)
   13fe8:	e0001115 	stw	zero,68(fp)
   13fec:	000b883a 	mov	r5,zero
   13ff0:	003c6906 	br	13198 <__alt_data_end+0xfc013198>
   13ff4:	3021883a 	mov	r16,r6
   13ff8:	003ffb06 	br	13fe8 <__alt_data_end+0xfc013fe8>
   13ffc:	1000021e 	bne	r2,zero,14008 <_dtoa_r+0x11e0>
   14000:	4200004c 	andi	r8,r8,1
   14004:	403e7d1e 	bne	r8,zero,139fc <__alt_data_end+0xfc0139fc>
   14008:	01000c04 	movi	r4,48
   1400c:	00000106 	br	14014 <_dtoa_r+0x11ec>
   14010:	102f883a 	mov	r23,r2
   14014:	b8bfffc4 	addi	r2,r23,-1
   14018:	10c00007 	ldb	r3,0(r2)
   1401c:	193ffc26 	beq	r3,r4,14010 <__alt_data_end+0xfc014010>
   14020:	003e8706 	br	13a40 <__alt_data_end+0xfc013a40>
   14024:	d8800517 	ldw	r2,20(sp)
   14028:	00a3c83a 	sub	r17,zero,r2
   1402c:	8800a426 	beq	r17,zero,142c0 <_dtoa_r+0x1498>
   14030:	888003cc 	andi	r2,r17,15
   14034:	100490fa 	slli	r2,r2,3
   14038:	00c000f4 	movhi	r3,3
   1403c:	18e5ae04 	addi	r3,r3,-26952
   14040:	1885883a 	add	r2,r3,r2
   14044:	11800017 	ldw	r6,0(r2)
   14048:	11c00117 	ldw	r7,4(r2)
   1404c:	9009883a 	mov	r4,r18
   14050:	980b883a 	mov	r5,r19
   14054:	8823d13a 	srai	r17,r17,4
   14058:	001c9e00 	call	1c9e0 <__muldf3>
   1405c:	d8800f15 	stw	r2,60(sp)
   14060:	d8c01015 	stw	r3,64(sp)
   14064:	8800e826 	beq	r17,zero,14408 <_dtoa_r+0x15e0>
   14068:	050000f4 	movhi	r20,3
   1406c:	a525a404 	addi	r20,r20,-26992
   14070:	04000084 	movi	r16,2
   14074:	8980004c 	andi	r6,r17,1
   14078:	1009883a 	mov	r4,r2
   1407c:	8823d07a 	srai	r17,r17,1
   14080:	180b883a 	mov	r5,r3
   14084:	30000426 	beq	r6,zero,14098 <_dtoa_r+0x1270>
   14088:	a1800017 	ldw	r6,0(r20)
   1408c:	a1c00117 	ldw	r7,4(r20)
   14090:	84000044 	addi	r16,r16,1
   14094:	001c9e00 	call	1c9e0 <__muldf3>
   14098:	a5000204 	addi	r20,r20,8
   1409c:	883ff51e 	bne	r17,zero,14074 <__alt_data_end+0xfc014074>
   140a0:	d8800f15 	stw	r2,60(sp)
   140a4:	d8c01015 	stw	r3,64(sp)
   140a8:	003c7606 	br	13284 <__alt_data_end+0xfc013284>
   140ac:	00c00c04 	movi	r3,48
   140b0:	10c00005 	stb	r3,0(r2)
   140b4:	d8c00517 	ldw	r3,20(sp)
   140b8:	bd3fffc3 	ldbu	r20,-1(r23)
   140bc:	18c00044 	addi	r3,r3,1
   140c0:	d8c00515 	stw	r3,20(sp)
   140c4:	003db906 	br	137ac <__alt_data_end+0xfc0137ac>
   140c8:	89400117 	ldw	r5,4(r17)
   140cc:	e009883a 	mov	r4,fp
   140d0:	0015a640 	call	15a64 <_Balloc>
   140d4:	89800417 	ldw	r6,16(r17)
   140d8:	89400304 	addi	r5,r17,12
   140dc:	11000304 	addi	r4,r2,12
   140e0:	31800084 	addi	r6,r6,2
   140e4:	318d883a 	add	r6,r6,r6
   140e8:	318d883a 	add	r6,r6,r6
   140ec:	1027883a 	mov	r19,r2
   140f0:	000dad40 	call	dad4 <memcpy>
   140f4:	01800044 	movi	r6,1
   140f8:	980b883a 	mov	r5,r19
   140fc:	e009883a 	mov	r4,fp
   14100:	00162a00 	call	162a0 <__lshift>
   14104:	1029883a 	mov	r20,r2
   14108:	003ecc06 	br	13c3c <__alt_data_end+0xfc013c3c>
   1410c:	00800e44 	movi	r2,57
   14110:	90809026 	beq	r18,r2,14354 <_dtoa_r+0x152c>
   14114:	92000044 	addi	r8,r18,1
   14118:	003f1f06 	br	13d98 <__alt_data_end+0xfc013d98>
   1411c:	9011883a 	mov	r8,r18
   14120:	8825883a 	mov	r18,r17
   14124:	a023883a 	mov	r17,r20
   14128:	003e2906 	br	139d0 <__alt_data_end+0xfc0139d0>
   1412c:	002b883a 	mov	r21,zero
   14130:	0023883a 	mov	r17,zero
   14134:	003f5406 	br	13e88 <__alt_data_end+0xfc013e88>
   14138:	61bfffc4 	addi	r6,r12,-1
   1413c:	300490fa 	slli	r2,r6,3
   14140:	00c000f4 	movhi	r3,3
   14144:	18e5ae04 	addi	r3,r3,-26952
   14148:	1885883a 	add	r2,r3,r2
   1414c:	11000017 	ldw	r4,0(r2)
   14150:	11400117 	ldw	r5,4(r2)
   14154:	d8800717 	ldw	r2,28(sp)
   14158:	880f883a 	mov	r7,r17
   1415c:	d9801215 	stw	r6,72(sp)
   14160:	800d883a 	mov	r6,r16
   14164:	db001615 	stw	r12,88(sp)
   14168:	15c00044 	addi	r23,r2,1
   1416c:	001c9e00 	call	1c9e0 <__muldf3>
   14170:	d9401017 	ldw	r5,64(sp)
   14174:	d9000f17 	ldw	r4,60(sp)
   14178:	d8c01515 	stw	r3,84(sp)
   1417c:	d8801415 	stw	r2,80(sp)
   14180:	001db480 	call	1db48 <__fixdfsi>
   14184:	1009883a 	mov	r4,r2
   14188:	1021883a 	mov	r16,r2
   1418c:	001dbc80 	call	1dbc8 <__floatsidf>
   14190:	d9000f17 	ldw	r4,60(sp)
   14194:	d9401017 	ldw	r5,64(sp)
   14198:	100d883a 	mov	r6,r2
   1419c:	180f883a 	mov	r7,r3
   141a0:	001d24c0 	call	1d24c <__subdf3>
   141a4:	1829883a 	mov	r20,r3
   141a8:	d8c00717 	ldw	r3,28(sp)
   141ac:	84000c04 	addi	r16,r16,48
   141b0:	1023883a 	mov	r17,r2
   141b4:	1c000005 	stb	r16,0(r3)
   141b8:	db001617 	ldw	r12,88(sp)
   141bc:	00800044 	movi	r2,1
   141c0:	60802226 	beq	r12,r2,1424c <_dtoa_r+0x1424>
   141c4:	d9c00717 	ldw	r7,28(sp)
   141c8:	8805883a 	mov	r2,r17
   141cc:	b82b883a 	mov	r21,r23
   141d0:	3b19883a 	add	r12,r7,r12
   141d4:	6023883a 	mov	r17,r12
   141d8:	a007883a 	mov	r3,r20
   141dc:	dc800f15 	stw	r18,60(sp)
   141e0:	000d883a 	mov	r6,zero
   141e4:	01d00934 	movhi	r7,16420
   141e8:	1009883a 	mov	r4,r2
   141ec:	180b883a 	mov	r5,r3
   141f0:	001c9e00 	call	1c9e0 <__muldf3>
   141f4:	180b883a 	mov	r5,r3
   141f8:	1009883a 	mov	r4,r2
   141fc:	1829883a 	mov	r20,r3
   14200:	1025883a 	mov	r18,r2
   14204:	001db480 	call	1db48 <__fixdfsi>
   14208:	1009883a 	mov	r4,r2
   1420c:	1021883a 	mov	r16,r2
   14210:	001dbc80 	call	1dbc8 <__floatsidf>
   14214:	100d883a 	mov	r6,r2
   14218:	180f883a 	mov	r7,r3
   1421c:	9009883a 	mov	r4,r18
   14220:	a00b883a 	mov	r5,r20
   14224:	84000c04 	addi	r16,r16,48
   14228:	001d24c0 	call	1d24c <__subdf3>
   1422c:	ad400044 	addi	r21,r21,1
   14230:	ac3fffc5 	stb	r16,-1(r21)
   14234:	ac7fea1e 	bne	r21,r17,141e0 <__alt_data_end+0xfc0141e0>
   14238:	1023883a 	mov	r17,r2
   1423c:	d8801217 	ldw	r2,72(sp)
   14240:	dc800f17 	ldw	r18,60(sp)
   14244:	1829883a 	mov	r20,r3
   14248:	b8af883a 	add	r23,r23,r2
   1424c:	d9001417 	ldw	r4,80(sp)
   14250:	d9401517 	ldw	r5,84(sp)
   14254:	000d883a 	mov	r6,zero
   14258:	01cff834 	movhi	r7,16352
   1425c:	001b50c0 	call	1b50c <__adddf3>
   14260:	880d883a 	mov	r6,r17
   14264:	a00f883a 	mov	r7,r20
   14268:	1009883a 	mov	r4,r2
   1426c:	180b883a 	mov	r5,r3
   14270:	001c8ec0 	call	1c8ec <__ledf2>
   14274:	10003e0e 	bge	r2,zero,14370 <_dtoa_r+0x1548>
   14278:	d9001317 	ldw	r4,76(sp)
   1427c:	bd3fffc3 	ldbu	r20,-1(r23)
   14280:	d9000515 	stw	r4,20(sp)
   14284:	003d3b06 	br	13774 <__alt_data_end+0xfc013774>
   14288:	0027883a 	mov	r19,zero
   1428c:	003f1b06 	br	13efc <__alt_data_end+0xfc013efc>
   14290:	d8800817 	ldw	r2,32(sp)
   14294:	11e9c83a 	sub	r20,r2,r7
   14298:	0005883a 	mov	r2,zero
   1429c:	003d5406 	br	137f0 <__alt_data_end+0xfc0137f0>
   142a0:	00800044 	movi	r2,1
   142a4:	003dc706 	br	139c4 <__alt_data_end+0xfc0139c4>
   142a8:	d8c00217 	ldw	r3,8(sp)
   142ac:	00800d84 	movi	r2,54
   142b0:	dd400a17 	ldw	r21,40(sp)
   142b4:	10c5c83a 	sub	r2,r2,r3
   142b8:	dd000817 	ldw	r20,32(sp)
   142bc:	003d4c06 	br	137f0 <__alt_data_end+0xfc0137f0>
   142c0:	dc800f15 	stw	r18,60(sp)
   142c4:	dcc01015 	stw	r19,64(sp)
   142c8:	04000084 	movi	r16,2
   142cc:	003bed06 	br	13284 <__alt_data_end+0xfc013284>
   142d0:	d9000617 	ldw	r4,24(sp)
   142d4:	203f0d26 	beq	r4,zero,13f0c <__alt_data_end+0xfc013f0c>
   142d8:	d9800c17 	ldw	r6,48(sp)
   142dc:	01bcab0e 	bge	zero,r6,1358c <__alt_data_end+0xfc01358c>
   142e0:	d9401017 	ldw	r5,64(sp)
   142e4:	d9000f17 	ldw	r4,60(sp)
   142e8:	000d883a 	mov	r6,zero
   142ec:	01d00934 	movhi	r7,16420
   142f0:	001c9e00 	call	1c9e0 <__muldf3>
   142f4:	81000044 	addi	r4,r16,1
   142f8:	d8800f15 	stw	r2,60(sp)
   142fc:	d8c01015 	stw	r3,64(sp)
   14300:	001dbc80 	call	1dbc8 <__floatsidf>
   14304:	d9800f17 	ldw	r6,60(sp)
   14308:	d9c01017 	ldw	r7,64(sp)
   1430c:	1009883a 	mov	r4,r2
   14310:	180b883a 	mov	r5,r3
   14314:	001c9e00 	call	1c9e0 <__muldf3>
   14318:	01d00734 	movhi	r7,16412
   1431c:	000d883a 	mov	r6,zero
   14320:	1009883a 	mov	r4,r2
   14324:	180b883a 	mov	r5,r3
   14328:	001b50c0 	call	1b50c <__adddf3>
   1432c:	d9c00517 	ldw	r7,20(sp)
   14330:	047f3034 	movhi	r17,64704
   14334:	1021883a 	mov	r16,r2
   14338:	39ffffc4 	addi	r7,r7,-1
   1433c:	d9c01315 	stw	r7,76(sp)
   14340:	1c63883a 	add	r17,r3,r17
   14344:	db000c17 	ldw	r12,48(sp)
   14348:	003bea06 	br	132f4 <__alt_data_end+0xfc0132f4>
   1434c:	dc000915 	stw	r16,36(sp)
   14350:	003e0e06 	br	13b8c <__alt_data_end+0xfc013b8c>
   14354:	01000e44 	movi	r4,57
   14358:	8825883a 	mov	r18,r17
   1435c:	9dc00044 	addi	r23,r19,1
   14360:	99000005 	stb	r4,0(r19)
   14364:	a023883a 	mov	r17,r20
   14368:	dc000915 	stw	r16,36(sp)
   1436c:	003da406 	br	13a00 <__alt_data_end+0xfc013a00>
   14370:	d9801417 	ldw	r6,80(sp)
   14374:	d9c01517 	ldw	r7,84(sp)
   14378:	0009883a 	mov	r4,zero
   1437c:	014ff834 	movhi	r5,16352
   14380:	001d24c0 	call	1d24c <__subdf3>
   14384:	880d883a 	mov	r6,r17
   14388:	a00f883a 	mov	r7,r20
   1438c:	1009883a 	mov	r4,r2
   14390:	180b883a 	mov	r5,r3
   14394:	001c8100 	call	1c810 <__gedf2>
   14398:	00bc7c0e 	bge	zero,r2,1358c <__alt_data_end+0xfc01358c>
   1439c:	01000c04 	movi	r4,48
   143a0:	00000106 	br	143a8 <_dtoa_r+0x1580>
   143a4:	102f883a 	mov	r23,r2
   143a8:	b8bfffc4 	addi	r2,r23,-1
   143ac:	10c00007 	ldb	r3,0(r2)
   143b0:	193ffc26 	beq	r3,r4,143a4 <__alt_data_end+0xfc0143a4>
   143b4:	d9801317 	ldw	r6,76(sp)
   143b8:	d9800515 	stw	r6,20(sp)
   143bc:	003c4406 	br	134d0 <__alt_data_end+0xfc0134d0>
   143c0:	d9801317 	ldw	r6,76(sp)
   143c4:	d9800515 	stw	r6,20(sp)
   143c8:	003cea06 	br	13774 <__alt_data_end+0xfc013774>
   143cc:	dd800f17 	ldw	r22,60(sp)
   143d0:	dcc01017 	ldw	r19,64(sp)
   143d4:	dc801217 	ldw	r18,72(sp)
   143d8:	003c6c06 	br	1358c <__alt_data_end+0xfc01358c>
   143dc:	903e031e 	bne	r18,zero,13bec <__alt_data_end+0xfc013bec>
   143e0:	003ebb06 	br	13ed0 <__alt_data_end+0xfc013ed0>
   143e4:	103e6c1e 	bne	r2,zero,13d98 <__alt_data_end+0xfc013d98>
   143e8:	4080004c 	andi	r2,r8,1
   143ec:	103e6a26 	beq	r2,zero,13d98 <__alt_data_end+0xfc013d98>
   143f0:	003e6606 	br	13d8c <__alt_data_end+0xfc013d8c>
   143f4:	d8c00317 	ldw	r3,12(sp)
   143f8:	00800084 	movi	r2,2
   143fc:	10c02916 	blt	r2,r3,144a4 <_dtoa_r+0x167c>
   14400:	d9000c17 	ldw	r4,48(sp)
   14404:	003e8806 	br	13e28 <__alt_data_end+0xfc013e28>
   14408:	04000084 	movi	r16,2
   1440c:	003b9d06 	br	13284 <__alt_data_end+0xfc013284>
   14410:	d9001317 	ldw	r4,76(sp)
   14414:	d9000515 	stw	r4,20(sp)
   14418:	003cd606 	br	13774 <__alt_data_end+0xfc013774>
   1441c:	d8801317 	ldw	r2,76(sp)
   14420:	d8800515 	stw	r2,20(sp)
   14424:	003c2a06 	br	134d0 <__alt_data_end+0xfc0134d0>
   14428:	d9800317 	ldw	r6,12(sp)
   1442c:	00800084 	movi	r2,2
   14430:	11801516 	blt	r2,r6,14488 <_dtoa_r+0x1660>
   14434:	d9c00c17 	ldw	r7,48(sp)
   14438:	d9c00615 	stw	r7,24(sp)
   1443c:	003df706 	br	13c1c <__alt_data_end+0xfc013c1c>
   14440:	193d3926 	beq	r3,r4,13928 <__alt_data_end+0xfc013928>
   14444:	00c00f04 	movi	r3,60
   14448:	1885c83a 	sub	r2,r3,r2
   1444c:	003ddf06 	br	13bcc <__alt_data_end+0xfc013bcc>
   14450:	e009883a 	mov	r4,fp
   14454:	e0001115 	stw	zero,68(fp)
   14458:	000b883a 	mov	r5,zero
   1445c:	0015a640 	call	15a64 <_Balloc>
   14460:	d8800715 	stw	r2,28(sp)
   14464:	d8c00717 	ldw	r3,28(sp)
   14468:	00bfffc4 	movi	r2,-1
   1446c:	01000044 	movi	r4,1
   14470:	d8800c15 	stw	r2,48(sp)
   14474:	e0c01015 	stw	r3,64(fp)
   14478:	d9000b15 	stw	r4,44(sp)
   1447c:	d8800615 	stw	r2,24(sp)
   14480:	d8002215 	stw	zero,136(sp)
   14484:	003c4106 	br	1358c <__alt_data_end+0xfc01358c>
   14488:	d8c00c17 	ldw	r3,48(sp)
   1448c:	d8c00615 	stw	r3,24(sp)
   14490:	003e7006 	br	13e54 <__alt_data_end+0xfc013e54>
   14494:	04400044 	movi	r17,1
   14498:	003b2006 	br	1311c <__alt_data_end+0xfc01311c>
   1449c:	000b883a 	mov	r5,zero
   144a0:	003b3d06 	br	13198 <__alt_data_end+0xfc013198>
   144a4:	d8800c17 	ldw	r2,48(sp)
   144a8:	d8800615 	stw	r2,24(sp)
   144ac:	003e6906 	br	13e54 <__alt_data_end+0xfc013e54>

000144b0 <__sflush_r>:
   144b0:	2880030b 	ldhu	r2,12(r5)
   144b4:	defffb04 	addi	sp,sp,-20
   144b8:	dcc00315 	stw	r19,12(sp)
   144bc:	dc400115 	stw	r17,4(sp)
   144c0:	dfc00415 	stw	ra,16(sp)
   144c4:	dc800215 	stw	r18,8(sp)
   144c8:	dc000015 	stw	r16,0(sp)
   144cc:	10c0020c 	andi	r3,r2,8
   144d0:	2823883a 	mov	r17,r5
   144d4:	2027883a 	mov	r19,r4
   144d8:	1800311e 	bne	r3,zero,145a0 <__sflush_r+0xf0>
   144dc:	28c00117 	ldw	r3,4(r5)
   144e0:	10820014 	ori	r2,r2,2048
   144e4:	2880030d 	sth	r2,12(r5)
   144e8:	00c04b0e 	bge	zero,r3,14618 <__sflush_r+0x168>
   144ec:	8a000a17 	ldw	r8,40(r17)
   144f0:	40002326 	beq	r8,zero,14580 <__sflush_r+0xd0>
   144f4:	9c000017 	ldw	r16,0(r19)
   144f8:	10c4000c 	andi	r3,r2,4096
   144fc:	98000015 	stw	zero,0(r19)
   14500:	18004826 	beq	r3,zero,14624 <__sflush_r+0x174>
   14504:	89801417 	ldw	r6,80(r17)
   14508:	10c0010c 	andi	r3,r2,4
   1450c:	18000626 	beq	r3,zero,14528 <__sflush_r+0x78>
   14510:	88c00117 	ldw	r3,4(r17)
   14514:	88800c17 	ldw	r2,48(r17)
   14518:	30cdc83a 	sub	r6,r6,r3
   1451c:	10000226 	beq	r2,zero,14528 <__sflush_r+0x78>
   14520:	88800f17 	ldw	r2,60(r17)
   14524:	308dc83a 	sub	r6,r6,r2
   14528:	89400717 	ldw	r5,28(r17)
   1452c:	000f883a 	mov	r7,zero
   14530:	9809883a 	mov	r4,r19
   14534:	403ee83a 	callr	r8
   14538:	00ffffc4 	movi	r3,-1
   1453c:	10c04426 	beq	r2,r3,14650 <__sflush_r+0x1a0>
   14540:	88c0030b 	ldhu	r3,12(r17)
   14544:	89000417 	ldw	r4,16(r17)
   14548:	88000115 	stw	zero,4(r17)
   1454c:	197dffcc 	andi	r5,r3,63487
   14550:	8940030d 	sth	r5,12(r17)
   14554:	89000015 	stw	r4,0(r17)
   14558:	18c4000c 	andi	r3,r3,4096
   1455c:	18002c1e 	bne	r3,zero,14610 <__sflush_r+0x160>
   14560:	89400c17 	ldw	r5,48(r17)
   14564:	9c000015 	stw	r16,0(r19)
   14568:	28000526 	beq	r5,zero,14580 <__sflush_r+0xd0>
   1456c:	88801004 	addi	r2,r17,64
   14570:	28800226 	beq	r5,r2,1457c <__sflush_r+0xcc>
   14574:	9809883a 	mov	r4,r19
   14578:	0014c2c0 	call	14c2c <_free_r>
   1457c:	88000c15 	stw	zero,48(r17)
   14580:	0005883a 	mov	r2,zero
   14584:	dfc00417 	ldw	ra,16(sp)
   14588:	dcc00317 	ldw	r19,12(sp)
   1458c:	dc800217 	ldw	r18,8(sp)
   14590:	dc400117 	ldw	r17,4(sp)
   14594:	dc000017 	ldw	r16,0(sp)
   14598:	dec00504 	addi	sp,sp,20
   1459c:	f800283a 	ret
   145a0:	2c800417 	ldw	r18,16(r5)
   145a4:	903ff626 	beq	r18,zero,14580 <__alt_data_end+0xfc014580>
   145a8:	2c000017 	ldw	r16,0(r5)
   145ac:	108000cc 	andi	r2,r2,3
   145b0:	2c800015 	stw	r18,0(r5)
   145b4:	84a1c83a 	sub	r16,r16,r18
   145b8:	1000131e 	bne	r2,zero,14608 <__sflush_r+0x158>
   145bc:	28800517 	ldw	r2,20(r5)
   145c0:	88800215 	stw	r2,8(r17)
   145c4:	04000316 	blt	zero,r16,145d4 <__sflush_r+0x124>
   145c8:	003fed06 	br	14580 <__alt_data_end+0xfc014580>
   145cc:	90a5883a 	add	r18,r18,r2
   145d0:	043feb0e 	bge	zero,r16,14580 <__alt_data_end+0xfc014580>
   145d4:	88800917 	ldw	r2,36(r17)
   145d8:	89400717 	ldw	r5,28(r17)
   145dc:	800f883a 	mov	r7,r16
   145e0:	900d883a 	mov	r6,r18
   145e4:	9809883a 	mov	r4,r19
   145e8:	103ee83a 	callr	r2
   145ec:	80a1c83a 	sub	r16,r16,r2
   145f0:	00bff616 	blt	zero,r2,145cc <__alt_data_end+0xfc0145cc>
   145f4:	88c0030b 	ldhu	r3,12(r17)
   145f8:	00bfffc4 	movi	r2,-1
   145fc:	18c01014 	ori	r3,r3,64
   14600:	88c0030d 	sth	r3,12(r17)
   14604:	003fdf06 	br	14584 <__alt_data_end+0xfc014584>
   14608:	0005883a 	mov	r2,zero
   1460c:	003fec06 	br	145c0 <__alt_data_end+0xfc0145c0>
   14610:	88801415 	stw	r2,80(r17)
   14614:	003fd206 	br	14560 <__alt_data_end+0xfc014560>
   14618:	28c00f17 	ldw	r3,60(r5)
   1461c:	00ffb316 	blt	zero,r3,144ec <__alt_data_end+0xfc0144ec>
   14620:	003fd706 	br	14580 <__alt_data_end+0xfc014580>
   14624:	89400717 	ldw	r5,28(r17)
   14628:	000d883a 	mov	r6,zero
   1462c:	01c00044 	movi	r7,1
   14630:	9809883a 	mov	r4,r19
   14634:	403ee83a 	callr	r8
   14638:	100d883a 	mov	r6,r2
   1463c:	00bfffc4 	movi	r2,-1
   14640:	30801426 	beq	r6,r2,14694 <__sflush_r+0x1e4>
   14644:	8880030b 	ldhu	r2,12(r17)
   14648:	8a000a17 	ldw	r8,40(r17)
   1464c:	003fae06 	br	14508 <__alt_data_end+0xfc014508>
   14650:	98c00017 	ldw	r3,0(r19)
   14654:	183fba26 	beq	r3,zero,14540 <__alt_data_end+0xfc014540>
   14658:	01000744 	movi	r4,29
   1465c:	19000626 	beq	r3,r4,14678 <__sflush_r+0x1c8>
   14660:	01000584 	movi	r4,22
   14664:	19000426 	beq	r3,r4,14678 <__sflush_r+0x1c8>
   14668:	88c0030b 	ldhu	r3,12(r17)
   1466c:	18c01014 	ori	r3,r3,64
   14670:	88c0030d 	sth	r3,12(r17)
   14674:	003fc306 	br	14584 <__alt_data_end+0xfc014584>
   14678:	8880030b 	ldhu	r2,12(r17)
   1467c:	88c00417 	ldw	r3,16(r17)
   14680:	88000115 	stw	zero,4(r17)
   14684:	10bdffcc 	andi	r2,r2,63487
   14688:	8880030d 	sth	r2,12(r17)
   1468c:	88c00015 	stw	r3,0(r17)
   14690:	003fb306 	br	14560 <__alt_data_end+0xfc014560>
   14694:	98800017 	ldw	r2,0(r19)
   14698:	103fea26 	beq	r2,zero,14644 <__alt_data_end+0xfc014644>
   1469c:	00c00744 	movi	r3,29
   146a0:	10c00226 	beq	r2,r3,146ac <__sflush_r+0x1fc>
   146a4:	00c00584 	movi	r3,22
   146a8:	10c0031e 	bne	r2,r3,146b8 <__sflush_r+0x208>
   146ac:	9c000015 	stw	r16,0(r19)
   146b0:	0005883a 	mov	r2,zero
   146b4:	003fb306 	br	14584 <__alt_data_end+0xfc014584>
   146b8:	88c0030b 	ldhu	r3,12(r17)
   146bc:	3005883a 	mov	r2,r6
   146c0:	18c01014 	ori	r3,r3,64
   146c4:	88c0030d 	sth	r3,12(r17)
   146c8:	003fae06 	br	14584 <__alt_data_end+0xfc014584>

000146cc <_fflush_r>:
   146cc:	defffd04 	addi	sp,sp,-12
   146d0:	dc000115 	stw	r16,4(sp)
   146d4:	dfc00215 	stw	ra,8(sp)
   146d8:	2021883a 	mov	r16,r4
   146dc:	20000226 	beq	r4,zero,146e8 <_fflush_r+0x1c>
   146e0:	20800e17 	ldw	r2,56(r4)
   146e4:	10000c26 	beq	r2,zero,14718 <_fflush_r+0x4c>
   146e8:	2880030f 	ldh	r2,12(r5)
   146ec:	1000051e 	bne	r2,zero,14704 <_fflush_r+0x38>
   146f0:	0005883a 	mov	r2,zero
   146f4:	dfc00217 	ldw	ra,8(sp)
   146f8:	dc000117 	ldw	r16,4(sp)
   146fc:	dec00304 	addi	sp,sp,12
   14700:	f800283a 	ret
   14704:	8009883a 	mov	r4,r16
   14708:	dfc00217 	ldw	ra,8(sp)
   1470c:	dc000117 	ldw	r16,4(sp)
   14710:	dec00304 	addi	sp,sp,12
   14714:	00144b01 	jmpi	144b0 <__sflush_r>
   14718:	d9400015 	stw	r5,0(sp)
   1471c:	0014ab80 	call	14ab8 <__sinit>
   14720:	d9400017 	ldw	r5,0(sp)
   14724:	003ff006 	br	146e8 <__alt_data_end+0xfc0146e8>

00014728 <fflush>:
   14728:	20000526 	beq	r4,zero,14740 <fflush+0x18>
   1472c:	008000f4 	movhi	r2,3
   14730:	10b2ae04 	addi	r2,r2,-13640
   14734:	200b883a 	mov	r5,r4
   14738:	11000017 	ldw	r4,0(r2)
   1473c:	00146cc1 	jmpi	146cc <_fflush_r>
   14740:	008000f4 	movhi	r2,3
   14744:	10b2ad04 	addi	r2,r2,-13644
   14748:	11000017 	ldw	r4,0(r2)
   1474c:	01400074 	movhi	r5,1
   14750:	2951b304 	addi	r5,r5,18124
   14754:	00154c81 	jmpi	154c8 <_fwalk_reent>

00014758 <__fp_unlock>:
   14758:	0005883a 	mov	r2,zero
   1475c:	f800283a 	ret

00014760 <_cleanup_r>:
   14760:	014000b4 	movhi	r5,2
   14764:	2968ba04 	addi	r5,r5,-23832
   14768:	00154c81 	jmpi	154c8 <_fwalk_reent>

0001476c <__sinit.part.1>:
   1476c:	defff704 	addi	sp,sp,-36
   14770:	00c00074 	movhi	r3,1
   14774:	dfc00815 	stw	ra,32(sp)
   14778:	ddc00715 	stw	r23,28(sp)
   1477c:	dd800615 	stw	r22,24(sp)
   14780:	dd400515 	stw	r21,20(sp)
   14784:	dd000415 	stw	r20,16(sp)
   14788:	dcc00315 	stw	r19,12(sp)
   1478c:	dc800215 	stw	r18,8(sp)
   14790:	dc400115 	stw	r17,4(sp)
   14794:	dc000015 	stw	r16,0(sp)
   14798:	18d1d804 	addi	r3,r3,18272
   1479c:	24000117 	ldw	r16,4(r4)
   147a0:	20c00f15 	stw	r3,60(r4)
   147a4:	2080bb04 	addi	r2,r4,748
   147a8:	00c000c4 	movi	r3,3
   147ac:	20c0b915 	stw	r3,740(r4)
   147b0:	2080ba15 	stw	r2,744(r4)
   147b4:	2000b815 	stw	zero,736(r4)
   147b8:	05c00204 	movi	r23,8
   147bc:	00800104 	movi	r2,4
   147c0:	2025883a 	mov	r18,r4
   147c4:	b80d883a 	mov	r6,r23
   147c8:	81001704 	addi	r4,r16,92
   147cc:	000b883a 	mov	r5,zero
   147d0:	80000015 	stw	zero,0(r16)
   147d4:	80000115 	stw	zero,4(r16)
   147d8:	80000215 	stw	zero,8(r16)
   147dc:	8080030d 	sth	r2,12(r16)
   147e0:	80001915 	stw	zero,100(r16)
   147e4:	8000038d 	sth	zero,14(r16)
   147e8:	80000415 	stw	zero,16(r16)
   147ec:	80000515 	stw	zero,20(r16)
   147f0:	80000615 	stw	zero,24(r16)
   147f4:	000dc1c0 	call	dc1c <memset>
   147f8:	05800074 	movhi	r22,1
   147fc:	94400217 	ldw	r17,8(r18)
   14800:	05400074 	movhi	r21,1
   14804:	05000074 	movhi	r20,1
   14808:	04c00074 	movhi	r19,1
   1480c:	b59c9704 	addi	r22,r22,29276
   14810:	ad5cae04 	addi	r21,r21,29368
   14814:	a51ccd04 	addi	r20,r20,29492
   14818:	9cdce404 	addi	r19,r19,29584
   1481c:	85800815 	stw	r22,32(r16)
   14820:	85400915 	stw	r21,36(r16)
   14824:	85000a15 	stw	r20,40(r16)
   14828:	84c00b15 	stw	r19,44(r16)
   1482c:	84000715 	stw	r16,28(r16)
   14830:	00800284 	movi	r2,10
   14834:	8880030d 	sth	r2,12(r17)
   14838:	00800044 	movi	r2,1
   1483c:	b80d883a 	mov	r6,r23
   14840:	89001704 	addi	r4,r17,92
   14844:	000b883a 	mov	r5,zero
   14848:	88000015 	stw	zero,0(r17)
   1484c:	88000115 	stw	zero,4(r17)
   14850:	88000215 	stw	zero,8(r17)
   14854:	88001915 	stw	zero,100(r17)
   14858:	8880038d 	sth	r2,14(r17)
   1485c:	88000415 	stw	zero,16(r17)
   14860:	88000515 	stw	zero,20(r17)
   14864:	88000615 	stw	zero,24(r17)
   14868:	000dc1c0 	call	dc1c <memset>
   1486c:	94000317 	ldw	r16,12(r18)
   14870:	00800484 	movi	r2,18
   14874:	8c400715 	stw	r17,28(r17)
   14878:	8d800815 	stw	r22,32(r17)
   1487c:	8d400915 	stw	r21,36(r17)
   14880:	8d000a15 	stw	r20,40(r17)
   14884:	8cc00b15 	stw	r19,44(r17)
   14888:	8080030d 	sth	r2,12(r16)
   1488c:	00800084 	movi	r2,2
   14890:	80000015 	stw	zero,0(r16)
   14894:	80000115 	stw	zero,4(r16)
   14898:	80000215 	stw	zero,8(r16)
   1489c:	80001915 	stw	zero,100(r16)
   148a0:	8080038d 	sth	r2,14(r16)
   148a4:	80000415 	stw	zero,16(r16)
   148a8:	80000515 	stw	zero,20(r16)
   148ac:	80000615 	stw	zero,24(r16)
   148b0:	b80d883a 	mov	r6,r23
   148b4:	000b883a 	mov	r5,zero
   148b8:	81001704 	addi	r4,r16,92
   148bc:	000dc1c0 	call	dc1c <memset>
   148c0:	00800044 	movi	r2,1
   148c4:	84000715 	stw	r16,28(r16)
   148c8:	85800815 	stw	r22,32(r16)
   148cc:	85400915 	stw	r21,36(r16)
   148d0:	85000a15 	stw	r20,40(r16)
   148d4:	84c00b15 	stw	r19,44(r16)
   148d8:	90800e15 	stw	r2,56(r18)
   148dc:	dfc00817 	ldw	ra,32(sp)
   148e0:	ddc00717 	ldw	r23,28(sp)
   148e4:	dd800617 	ldw	r22,24(sp)
   148e8:	dd400517 	ldw	r21,20(sp)
   148ec:	dd000417 	ldw	r20,16(sp)
   148f0:	dcc00317 	ldw	r19,12(sp)
   148f4:	dc800217 	ldw	r18,8(sp)
   148f8:	dc400117 	ldw	r17,4(sp)
   148fc:	dc000017 	ldw	r16,0(sp)
   14900:	dec00904 	addi	sp,sp,36
   14904:	f800283a 	ret

00014908 <__fp_lock>:
   14908:	0005883a 	mov	r2,zero
   1490c:	f800283a 	ret

00014910 <__sfmoreglue>:
   14910:	defffc04 	addi	sp,sp,-16
   14914:	dc800215 	stw	r18,8(sp)
   14918:	2825883a 	mov	r18,r5
   1491c:	dc000015 	stw	r16,0(sp)
   14920:	01401a04 	movi	r5,104
   14924:	2021883a 	mov	r16,r4
   14928:	913fffc4 	addi	r4,r18,-1
   1492c:	dfc00315 	stw	ra,12(sp)
   14930:	dc400115 	stw	r17,4(sp)
   14934:	000ccf40 	call	ccf4 <__mulsi3>
   14938:	8009883a 	mov	r4,r16
   1493c:	11401d04 	addi	r5,r2,116
   14940:	1023883a 	mov	r17,r2
   14944:	000d2c80 	call	d2c8 <_malloc_r>
   14948:	1021883a 	mov	r16,r2
   1494c:	10000726 	beq	r2,zero,1496c <__sfmoreglue+0x5c>
   14950:	11000304 	addi	r4,r2,12
   14954:	10000015 	stw	zero,0(r2)
   14958:	14800115 	stw	r18,4(r2)
   1495c:	11000215 	stw	r4,8(r2)
   14960:	89801a04 	addi	r6,r17,104
   14964:	000b883a 	mov	r5,zero
   14968:	000dc1c0 	call	dc1c <memset>
   1496c:	8005883a 	mov	r2,r16
   14970:	dfc00317 	ldw	ra,12(sp)
   14974:	dc800217 	ldw	r18,8(sp)
   14978:	dc400117 	ldw	r17,4(sp)
   1497c:	dc000017 	ldw	r16,0(sp)
   14980:	dec00404 	addi	sp,sp,16
   14984:	f800283a 	ret

00014988 <__sfp>:
   14988:	defffb04 	addi	sp,sp,-20
   1498c:	dc000015 	stw	r16,0(sp)
   14990:	040000f4 	movhi	r16,3
   14994:	8432ad04 	addi	r16,r16,-13644
   14998:	dcc00315 	stw	r19,12(sp)
   1499c:	2027883a 	mov	r19,r4
   149a0:	81000017 	ldw	r4,0(r16)
   149a4:	dfc00415 	stw	ra,16(sp)
   149a8:	dc800215 	stw	r18,8(sp)
   149ac:	20800e17 	ldw	r2,56(r4)
   149b0:	dc400115 	stw	r17,4(sp)
   149b4:	1000021e 	bne	r2,zero,149c0 <__sfp+0x38>
   149b8:	001476c0 	call	1476c <__sinit.part.1>
   149bc:	81000017 	ldw	r4,0(r16)
   149c0:	2480b804 	addi	r18,r4,736
   149c4:	047fffc4 	movi	r17,-1
   149c8:	91000117 	ldw	r4,4(r18)
   149cc:	94000217 	ldw	r16,8(r18)
   149d0:	213fffc4 	addi	r4,r4,-1
   149d4:	20000a16 	blt	r4,zero,14a00 <__sfp+0x78>
   149d8:	8080030f 	ldh	r2,12(r16)
   149dc:	10000c26 	beq	r2,zero,14a10 <__sfp+0x88>
   149e0:	80c01d04 	addi	r3,r16,116
   149e4:	00000206 	br	149f0 <__sfp+0x68>
   149e8:	18bfe60f 	ldh	r2,-104(r3)
   149ec:	10000826 	beq	r2,zero,14a10 <__sfp+0x88>
   149f0:	213fffc4 	addi	r4,r4,-1
   149f4:	1c3ffd04 	addi	r16,r3,-12
   149f8:	18c01a04 	addi	r3,r3,104
   149fc:	247ffa1e 	bne	r4,r17,149e8 <__alt_data_end+0xfc0149e8>
   14a00:	90800017 	ldw	r2,0(r18)
   14a04:	10001d26 	beq	r2,zero,14a7c <__sfp+0xf4>
   14a08:	1025883a 	mov	r18,r2
   14a0c:	003fee06 	br	149c8 <__alt_data_end+0xfc0149c8>
   14a10:	00bfffc4 	movi	r2,-1
   14a14:	8080038d 	sth	r2,14(r16)
   14a18:	00800044 	movi	r2,1
   14a1c:	8080030d 	sth	r2,12(r16)
   14a20:	80001915 	stw	zero,100(r16)
   14a24:	80000015 	stw	zero,0(r16)
   14a28:	80000215 	stw	zero,8(r16)
   14a2c:	80000115 	stw	zero,4(r16)
   14a30:	80000415 	stw	zero,16(r16)
   14a34:	80000515 	stw	zero,20(r16)
   14a38:	80000615 	stw	zero,24(r16)
   14a3c:	01800204 	movi	r6,8
   14a40:	000b883a 	mov	r5,zero
   14a44:	81001704 	addi	r4,r16,92
   14a48:	000dc1c0 	call	dc1c <memset>
   14a4c:	8005883a 	mov	r2,r16
   14a50:	80000c15 	stw	zero,48(r16)
   14a54:	80000d15 	stw	zero,52(r16)
   14a58:	80001115 	stw	zero,68(r16)
   14a5c:	80001215 	stw	zero,72(r16)
   14a60:	dfc00417 	ldw	ra,16(sp)
   14a64:	dcc00317 	ldw	r19,12(sp)
   14a68:	dc800217 	ldw	r18,8(sp)
   14a6c:	dc400117 	ldw	r17,4(sp)
   14a70:	dc000017 	ldw	r16,0(sp)
   14a74:	dec00504 	addi	sp,sp,20
   14a78:	f800283a 	ret
   14a7c:	01400104 	movi	r5,4
   14a80:	9809883a 	mov	r4,r19
   14a84:	00149100 	call	14910 <__sfmoreglue>
   14a88:	90800015 	stw	r2,0(r18)
   14a8c:	103fde1e 	bne	r2,zero,14a08 <__alt_data_end+0xfc014a08>
   14a90:	00800304 	movi	r2,12
   14a94:	98800015 	stw	r2,0(r19)
   14a98:	0005883a 	mov	r2,zero
   14a9c:	003ff006 	br	14a60 <__alt_data_end+0xfc014a60>

00014aa0 <_cleanup>:
   14aa0:	008000f4 	movhi	r2,3
   14aa4:	10b2ad04 	addi	r2,r2,-13644
   14aa8:	11000017 	ldw	r4,0(r2)
   14aac:	014000b4 	movhi	r5,2
   14ab0:	2968ba04 	addi	r5,r5,-23832
   14ab4:	00154c81 	jmpi	154c8 <_fwalk_reent>

00014ab8 <__sinit>:
   14ab8:	20800e17 	ldw	r2,56(r4)
   14abc:	10000126 	beq	r2,zero,14ac4 <__sinit+0xc>
   14ac0:	f800283a 	ret
   14ac4:	001476c1 	jmpi	1476c <__sinit.part.1>

00014ac8 <__sfp_lock_acquire>:
   14ac8:	f800283a 	ret

00014acc <__sfp_lock_release>:
   14acc:	f800283a 	ret

00014ad0 <__sinit_lock_acquire>:
   14ad0:	f800283a 	ret

00014ad4 <__sinit_lock_release>:
   14ad4:	f800283a 	ret

00014ad8 <__fp_lock_all>:
   14ad8:	008000f4 	movhi	r2,3
   14adc:	10b2ae04 	addi	r2,r2,-13640
   14ae0:	11000017 	ldw	r4,0(r2)
   14ae4:	01400074 	movhi	r5,1
   14ae8:	29524204 	addi	r5,r5,18696
   14aec:	00154041 	jmpi	15404 <_fwalk>

00014af0 <__fp_unlock_all>:
   14af0:	008000f4 	movhi	r2,3
   14af4:	10b2ae04 	addi	r2,r2,-13640
   14af8:	11000017 	ldw	r4,0(r2)
   14afc:	01400074 	movhi	r5,1
   14b00:	2951d604 	addi	r5,r5,18264
   14b04:	00154041 	jmpi	15404 <_fwalk>

00014b08 <_malloc_trim_r>:
   14b08:	defffb04 	addi	sp,sp,-20
   14b0c:	dcc00315 	stw	r19,12(sp)
   14b10:	04c000f4 	movhi	r19,3
   14b14:	dc800215 	stw	r18,8(sp)
   14b18:	dc400115 	stw	r17,4(sp)
   14b1c:	dc000015 	stw	r16,0(sp)
   14b20:	dfc00415 	stw	ra,16(sp)
   14b24:	2821883a 	mov	r16,r5
   14b28:	9ce75104 	addi	r19,r19,-25276
   14b2c:	2025883a 	mov	r18,r4
   14b30:	001e50c0 	call	1e50c <__malloc_lock>
   14b34:	98800217 	ldw	r2,8(r19)
   14b38:	14400117 	ldw	r17,4(r2)
   14b3c:	00bfff04 	movi	r2,-4
   14b40:	88a2703a 	and	r17,r17,r2
   14b44:	8c21c83a 	sub	r16,r17,r16
   14b48:	8403fbc4 	addi	r16,r16,4079
   14b4c:	8020d33a 	srli	r16,r16,12
   14b50:	0083ffc4 	movi	r2,4095
   14b54:	843fffc4 	addi	r16,r16,-1
   14b58:	8020933a 	slli	r16,r16,12
   14b5c:	1400060e 	bge	r2,r16,14b78 <_malloc_trim_r+0x70>
   14b60:	000b883a 	mov	r5,zero
   14b64:	9009883a 	mov	r4,r18
   14b68:	000dea40 	call	dea4 <_sbrk_r>
   14b6c:	98c00217 	ldw	r3,8(r19)
   14b70:	1c47883a 	add	r3,r3,r17
   14b74:	10c00a26 	beq	r2,r3,14ba0 <_malloc_trim_r+0x98>
   14b78:	9009883a 	mov	r4,r18
   14b7c:	001e5300 	call	1e530 <__malloc_unlock>
   14b80:	0005883a 	mov	r2,zero
   14b84:	dfc00417 	ldw	ra,16(sp)
   14b88:	dcc00317 	ldw	r19,12(sp)
   14b8c:	dc800217 	ldw	r18,8(sp)
   14b90:	dc400117 	ldw	r17,4(sp)
   14b94:	dc000017 	ldw	r16,0(sp)
   14b98:	dec00504 	addi	sp,sp,20
   14b9c:	f800283a 	ret
   14ba0:	040bc83a 	sub	r5,zero,r16
   14ba4:	9009883a 	mov	r4,r18
   14ba8:	000dea40 	call	dea4 <_sbrk_r>
   14bac:	00ffffc4 	movi	r3,-1
   14bb0:	10c00d26 	beq	r2,r3,14be8 <_malloc_trim_r+0xe0>
   14bb4:	00c000f4 	movhi	r3,3
   14bb8:	18ff9704 	addi	r3,r3,-420
   14bbc:	18800017 	ldw	r2,0(r3)
   14bc0:	99000217 	ldw	r4,8(r19)
   14bc4:	8c23c83a 	sub	r17,r17,r16
   14bc8:	8c400054 	ori	r17,r17,1
   14bcc:	1421c83a 	sub	r16,r2,r16
   14bd0:	24400115 	stw	r17,4(r4)
   14bd4:	9009883a 	mov	r4,r18
   14bd8:	1c000015 	stw	r16,0(r3)
   14bdc:	001e5300 	call	1e530 <__malloc_unlock>
   14be0:	00800044 	movi	r2,1
   14be4:	003fe706 	br	14b84 <__alt_data_end+0xfc014b84>
   14be8:	000b883a 	mov	r5,zero
   14bec:	9009883a 	mov	r4,r18
   14bf0:	000dea40 	call	dea4 <_sbrk_r>
   14bf4:	99000217 	ldw	r4,8(r19)
   14bf8:	014003c4 	movi	r5,15
   14bfc:	1107c83a 	sub	r3,r2,r4
   14c00:	28ffdd0e 	bge	r5,r3,14b78 <__alt_data_end+0xfc014b78>
   14c04:	014000f4 	movhi	r5,3
   14c08:	2972af04 	addi	r5,r5,-13636
   14c0c:	29400017 	ldw	r5,0(r5)
   14c10:	18c00054 	ori	r3,r3,1
   14c14:	20c00115 	stw	r3,4(r4)
   14c18:	00c000f4 	movhi	r3,3
   14c1c:	1145c83a 	sub	r2,r2,r5
   14c20:	18ff9704 	addi	r3,r3,-420
   14c24:	18800015 	stw	r2,0(r3)
   14c28:	003fd306 	br	14b78 <__alt_data_end+0xfc014b78>

00014c2c <_free_r>:
   14c2c:	28004126 	beq	r5,zero,14d34 <_free_r+0x108>
   14c30:	defffd04 	addi	sp,sp,-12
   14c34:	dc400115 	stw	r17,4(sp)
   14c38:	dc000015 	stw	r16,0(sp)
   14c3c:	2023883a 	mov	r17,r4
   14c40:	2821883a 	mov	r16,r5
   14c44:	dfc00215 	stw	ra,8(sp)
   14c48:	001e50c0 	call	1e50c <__malloc_lock>
   14c4c:	81ffff17 	ldw	r7,-4(r16)
   14c50:	00bfff84 	movi	r2,-2
   14c54:	010000f4 	movhi	r4,3
   14c58:	81bffe04 	addi	r6,r16,-8
   14c5c:	3884703a 	and	r2,r7,r2
   14c60:	21275104 	addi	r4,r4,-25276
   14c64:	308b883a 	add	r5,r6,r2
   14c68:	2a400117 	ldw	r9,4(r5)
   14c6c:	22000217 	ldw	r8,8(r4)
   14c70:	00ffff04 	movi	r3,-4
   14c74:	48c6703a 	and	r3,r9,r3
   14c78:	2a005726 	beq	r5,r8,14dd8 <_free_r+0x1ac>
   14c7c:	28c00115 	stw	r3,4(r5)
   14c80:	39c0004c 	andi	r7,r7,1
   14c84:	3800091e 	bne	r7,zero,14cac <_free_r+0x80>
   14c88:	823ffe17 	ldw	r8,-8(r16)
   14c8c:	22400204 	addi	r9,r4,8
   14c90:	320dc83a 	sub	r6,r6,r8
   14c94:	31c00217 	ldw	r7,8(r6)
   14c98:	1205883a 	add	r2,r2,r8
   14c9c:	3a406526 	beq	r7,r9,14e34 <_free_r+0x208>
   14ca0:	32000317 	ldw	r8,12(r6)
   14ca4:	3a000315 	stw	r8,12(r7)
   14ca8:	41c00215 	stw	r7,8(r8)
   14cac:	28cf883a 	add	r7,r5,r3
   14cb0:	39c00117 	ldw	r7,4(r7)
   14cb4:	39c0004c 	andi	r7,r7,1
   14cb8:	38003a26 	beq	r7,zero,14da4 <_free_r+0x178>
   14cbc:	10c00054 	ori	r3,r2,1
   14cc0:	30c00115 	stw	r3,4(r6)
   14cc4:	3087883a 	add	r3,r6,r2
   14cc8:	18800015 	stw	r2,0(r3)
   14ccc:	00c07fc4 	movi	r3,511
   14cd0:	18801936 	bltu	r3,r2,14d38 <_free_r+0x10c>
   14cd4:	1004d0fa 	srli	r2,r2,3
   14cd8:	01c00044 	movi	r7,1
   14cdc:	21400117 	ldw	r5,4(r4)
   14ce0:	10c00044 	addi	r3,r2,1
   14ce4:	18c7883a 	add	r3,r3,r3
   14ce8:	1005d0ba 	srai	r2,r2,2
   14cec:	18c7883a 	add	r3,r3,r3
   14cf0:	18c7883a 	add	r3,r3,r3
   14cf4:	1907883a 	add	r3,r3,r4
   14cf8:	3884983a 	sll	r2,r7,r2
   14cfc:	19c00017 	ldw	r7,0(r3)
   14d00:	1a3ffe04 	addi	r8,r3,-8
   14d04:	1144b03a 	or	r2,r2,r5
   14d08:	32000315 	stw	r8,12(r6)
   14d0c:	31c00215 	stw	r7,8(r6)
   14d10:	20800115 	stw	r2,4(r4)
   14d14:	19800015 	stw	r6,0(r3)
   14d18:	39800315 	stw	r6,12(r7)
   14d1c:	8809883a 	mov	r4,r17
   14d20:	dfc00217 	ldw	ra,8(sp)
   14d24:	dc400117 	ldw	r17,4(sp)
   14d28:	dc000017 	ldw	r16,0(sp)
   14d2c:	dec00304 	addi	sp,sp,12
   14d30:	001e5301 	jmpi	1e530 <__malloc_unlock>
   14d34:	f800283a 	ret
   14d38:	100ad27a 	srli	r5,r2,9
   14d3c:	00c00104 	movi	r3,4
   14d40:	19404a36 	bltu	r3,r5,14e6c <_free_r+0x240>
   14d44:	100ad1ba 	srli	r5,r2,6
   14d48:	28c00e44 	addi	r3,r5,57
   14d4c:	18c7883a 	add	r3,r3,r3
   14d50:	29400e04 	addi	r5,r5,56
   14d54:	18c7883a 	add	r3,r3,r3
   14d58:	18c7883a 	add	r3,r3,r3
   14d5c:	1909883a 	add	r4,r3,r4
   14d60:	20c00017 	ldw	r3,0(r4)
   14d64:	01c000f4 	movhi	r7,3
   14d68:	213ffe04 	addi	r4,r4,-8
   14d6c:	39e75104 	addi	r7,r7,-25276
   14d70:	20c04426 	beq	r4,r3,14e84 <_free_r+0x258>
   14d74:	01ffff04 	movi	r7,-4
   14d78:	19400117 	ldw	r5,4(r3)
   14d7c:	29ca703a 	and	r5,r5,r7
   14d80:	1140022e 	bgeu	r2,r5,14d8c <_free_r+0x160>
   14d84:	18c00217 	ldw	r3,8(r3)
   14d88:	20fffb1e 	bne	r4,r3,14d78 <__alt_data_end+0xfc014d78>
   14d8c:	19000317 	ldw	r4,12(r3)
   14d90:	31000315 	stw	r4,12(r6)
   14d94:	30c00215 	stw	r3,8(r6)
   14d98:	21800215 	stw	r6,8(r4)
   14d9c:	19800315 	stw	r6,12(r3)
   14da0:	003fde06 	br	14d1c <__alt_data_end+0xfc014d1c>
   14da4:	29c00217 	ldw	r7,8(r5)
   14da8:	10c5883a 	add	r2,r2,r3
   14dac:	00c000f4 	movhi	r3,3
   14db0:	18e75304 	addi	r3,r3,-25268
   14db4:	38c03b26 	beq	r7,r3,14ea4 <_free_r+0x278>
   14db8:	2a000317 	ldw	r8,12(r5)
   14dbc:	11400054 	ori	r5,r2,1
   14dc0:	3087883a 	add	r3,r6,r2
   14dc4:	3a000315 	stw	r8,12(r7)
   14dc8:	41c00215 	stw	r7,8(r8)
   14dcc:	31400115 	stw	r5,4(r6)
   14dd0:	18800015 	stw	r2,0(r3)
   14dd4:	003fbd06 	br	14ccc <__alt_data_end+0xfc014ccc>
   14dd8:	39c0004c 	andi	r7,r7,1
   14ddc:	10c5883a 	add	r2,r2,r3
   14de0:	3800071e 	bne	r7,zero,14e00 <_free_r+0x1d4>
   14de4:	81fffe17 	ldw	r7,-8(r16)
   14de8:	31cdc83a 	sub	r6,r6,r7
   14dec:	30c00317 	ldw	r3,12(r6)
   14df0:	31400217 	ldw	r5,8(r6)
   14df4:	11c5883a 	add	r2,r2,r7
   14df8:	28c00315 	stw	r3,12(r5)
   14dfc:	19400215 	stw	r5,8(r3)
   14e00:	10c00054 	ori	r3,r2,1
   14e04:	30c00115 	stw	r3,4(r6)
   14e08:	00c000f4 	movhi	r3,3
   14e0c:	18f2b004 	addi	r3,r3,-13632
   14e10:	18c00017 	ldw	r3,0(r3)
   14e14:	21800215 	stw	r6,8(r4)
   14e18:	10ffc036 	bltu	r2,r3,14d1c <__alt_data_end+0xfc014d1c>
   14e1c:	008000f4 	movhi	r2,3
   14e20:	10bf3f04 	addi	r2,r2,-772
   14e24:	11400017 	ldw	r5,0(r2)
   14e28:	8809883a 	mov	r4,r17
   14e2c:	0014b080 	call	14b08 <_malloc_trim_r>
   14e30:	003fba06 	br	14d1c <__alt_data_end+0xfc014d1c>
   14e34:	28c9883a 	add	r4,r5,r3
   14e38:	21000117 	ldw	r4,4(r4)
   14e3c:	2100004c 	andi	r4,r4,1
   14e40:	2000391e 	bne	r4,zero,14f28 <_free_r+0x2fc>
   14e44:	29c00217 	ldw	r7,8(r5)
   14e48:	29000317 	ldw	r4,12(r5)
   14e4c:	1885883a 	add	r2,r3,r2
   14e50:	10c00054 	ori	r3,r2,1
   14e54:	39000315 	stw	r4,12(r7)
   14e58:	21c00215 	stw	r7,8(r4)
   14e5c:	30c00115 	stw	r3,4(r6)
   14e60:	308d883a 	add	r6,r6,r2
   14e64:	30800015 	stw	r2,0(r6)
   14e68:	003fac06 	br	14d1c <__alt_data_end+0xfc014d1c>
   14e6c:	00c00504 	movi	r3,20
   14e70:	19401536 	bltu	r3,r5,14ec8 <_free_r+0x29c>
   14e74:	28c01704 	addi	r3,r5,92
   14e78:	18c7883a 	add	r3,r3,r3
   14e7c:	294016c4 	addi	r5,r5,91
   14e80:	003fb406 	br	14d54 <__alt_data_end+0xfc014d54>
   14e84:	280bd0ba 	srai	r5,r5,2
   14e88:	00c00044 	movi	r3,1
   14e8c:	38800117 	ldw	r2,4(r7)
   14e90:	194a983a 	sll	r5,r3,r5
   14e94:	2007883a 	mov	r3,r4
   14e98:	2884b03a 	or	r2,r5,r2
   14e9c:	38800115 	stw	r2,4(r7)
   14ea0:	003fbb06 	br	14d90 <__alt_data_end+0xfc014d90>
   14ea4:	21800515 	stw	r6,20(r4)
   14ea8:	21800415 	stw	r6,16(r4)
   14eac:	10c00054 	ori	r3,r2,1
   14eb0:	31c00315 	stw	r7,12(r6)
   14eb4:	31c00215 	stw	r7,8(r6)
   14eb8:	30c00115 	stw	r3,4(r6)
   14ebc:	308d883a 	add	r6,r6,r2
   14ec0:	30800015 	stw	r2,0(r6)
   14ec4:	003f9506 	br	14d1c <__alt_data_end+0xfc014d1c>
   14ec8:	00c01504 	movi	r3,84
   14ecc:	19400536 	bltu	r3,r5,14ee4 <_free_r+0x2b8>
   14ed0:	100ad33a 	srli	r5,r2,12
   14ed4:	28c01bc4 	addi	r3,r5,111
   14ed8:	18c7883a 	add	r3,r3,r3
   14edc:	29401b84 	addi	r5,r5,110
   14ee0:	003f9c06 	br	14d54 <__alt_data_end+0xfc014d54>
   14ee4:	00c05504 	movi	r3,340
   14ee8:	19400536 	bltu	r3,r5,14f00 <_free_r+0x2d4>
   14eec:	100ad3fa 	srli	r5,r2,15
   14ef0:	28c01e04 	addi	r3,r5,120
   14ef4:	18c7883a 	add	r3,r3,r3
   14ef8:	29401dc4 	addi	r5,r5,119
   14efc:	003f9506 	br	14d54 <__alt_data_end+0xfc014d54>
   14f00:	00c15504 	movi	r3,1364
   14f04:	19400536 	bltu	r3,r5,14f1c <_free_r+0x2f0>
   14f08:	100ad4ba 	srli	r5,r2,18
   14f0c:	28c01f44 	addi	r3,r5,125
   14f10:	18c7883a 	add	r3,r3,r3
   14f14:	29401f04 	addi	r5,r5,124
   14f18:	003f8e06 	br	14d54 <__alt_data_end+0xfc014d54>
   14f1c:	00c03f84 	movi	r3,254
   14f20:	01401f84 	movi	r5,126
   14f24:	003f8b06 	br	14d54 <__alt_data_end+0xfc014d54>
   14f28:	10c00054 	ori	r3,r2,1
   14f2c:	30c00115 	stw	r3,4(r6)
   14f30:	308d883a 	add	r6,r6,r2
   14f34:	30800015 	stw	r2,0(r6)
   14f38:	003f7806 	br	14d1c <__alt_data_end+0xfc014d1c>

00014f3c <__sfvwrite_r>:
   14f3c:	30800217 	ldw	r2,8(r6)
   14f40:	10006726 	beq	r2,zero,150e0 <__sfvwrite_r+0x1a4>
   14f44:	28c0030b 	ldhu	r3,12(r5)
   14f48:	defff404 	addi	sp,sp,-48
   14f4c:	dd400715 	stw	r21,28(sp)
   14f50:	dd000615 	stw	r20,24(sp)
   14f54:	dc000215 	stw	r16,8(sp)
   14f58:	dfc00b15 	stw	ra,44(sp)
   14f5c:	df000a15 	stw	fp,40(sp)
   14f60:	ddc00915 	stw	r23,36(sp)
   14f64:	dd800815 	stw	r22,32(sp)
   14f68:	dcc00515 	stw	r19,20(sp)
   14f6c:	dc800415 	stw	r18,16(sp)
   14f70:	dc400315 	stw	r17,12(sp)
   14f74:	1880020c 	andi	r2,r3,8
   14f78:	2821883a 	mov	r16,r5
   14f7c:	202b883a 	mov	r21,r4
   14f80:	3029883a 	mov	r20,r6
   14f84:	10002726 	beq	r2,zero,15024 <__sfvwrite_r+0xe8>
   14f88:	28800417 	ldw	r2,16(r5)
   14f8c:	10002526 	beq	r2,zero,15024 <__sfvwrite_r+0xe8>
   14f90:	1880008c 	andi	r2,r3,2
   14f94:	a4400017 	ldw	r17,0(r20)
   14f98:	10002a26 	beq	r2,zero,15044 <__sfvwrite_r+0x108>
   14f9c:	05a00034 	movhi	r22,32768
   14fa0:	0027883a 	mov	r19,zero
   14fa4:	0025883a 	mov	r18,zero
   14fa8:	b5bf0004 	addi	r22,r22,-1024
   14fac:	980d883a 	mov	r6,r19
   14fb0:	a809883a 	mov	r4,r21
   14fb4:	90004626 	beq	r18,zero,150d0 <__sfvwrite_r+0x194>
   14fb8:	900f883a 	mov	r7,r18
   14fbc:	b480022e 	bgeu	r22,r18,14fc8 <__sfvwrite_r+0x8c>
   14fc0:	01e00034 	movhi	r7,32768
   14fc4:	39ff0004 	addi	r7,r7,-1024
   14fc8:	80800917 	ldw	r2,36(r16)
   14fcc:	81400717 	ldw	r5,28(r16)
   14fd0:	103ee83a 	callr	r2
   14fd4:	00805a0e 	bge	zero,r2,15140 <__sfvwrite_r+0x204>
   14fd8:	a0c00217 	ldw	r3,8(r20)
   14fdc:	98a7883a 	add	r19,r19,r2
   14fe0:	90a5c83a 	sub	r18,r18,r2
   14fe4:	1885c83a 	sub	r2,r3,r2
   14fe8:	a0800215 	stw	r2,8(r20)
   14fec:	103fef1e 	bne	r2,zero,14fac <__alt_data_end+0xfc014fac>
   14ff0:	0005883a 	mov	r2,zero
   14ff4:	dfc00b17 	ldw	ra,44(sp)
   14ff8:	df000a17 	ldw	fp,40(sp)
   14ffc:	ddc00917 	ldw	r23,36(sp)
   15000:	dd800817 	ldw	r22,32(sp)
   15004:	dd400717 	ldw	r21,28(sp)
   15008:	dd000617 	ldw	r20,24(sp)
   1500c:	dcc00517 	ldw	r19,20(sp)
   15010:	dc800417 	ldw	r18,16(sp)
   15014:	dc400317 	ldw	r17,12(sp)
   15018:	dc000217 	ldw	r16,8(sp)
   1501c:	dec00c04 	addi	sp,sp,48
   15020:	f800283a 	ret
   15024:	800b883a 	mov	r5,r16
   15028:	a809883a 	mov	r4,r21
   1502c:	0012aac0 	call	12aac <__swsetup_r>
   15030:	1000ee1e 	bne	r2,zero,153ec <__sfvwrite_r+0x4b0>
   15034:	80c0030b 	ldhu	r3,12(r16)
   15038:	a4400017 	ldw	r17,0(r20)
   1503c:	1880008c 	andi	r2,r3,2
   15040:	103fd61e 	bne	r2,zero,14f9c <__alt_data_end+0xfc014f9c>
   15044:	1880004c 	andi	r2,r3,1
   15048:	1000421e 	bne	r2,zero,15154 <__sfvwrite_r+0x218>
   1504c:	0039883a 	mov	fp,zero
   15050:	0025883a 	mov	r18,zero
   15054:	90001a26 	beq	r18,zero,150c0 <__sfvwrite_r+0x184>
   15058:	1880800c 	andi	r2,r3,512
   1505c:	84c00217 	ldw	r19,8(r16)
   15060:	10002126 	beq	r2,zero,150e8 <__sfvwrite_r+0x1ac>
   15064:	982f883a 	mov	r23,r19
   15068:	94c09636 	bltu	r18,r19,152c4 <__sfvwrite_r+0x388>
   1506c:	1881200c 	andi	r2,r3,1152
   15070:	1000a11e 	bne	r2,zero,152f8 <__sfvwrite_r+0x3bc>
   15074:	81000017 	ldw	r4,0(r16)
   15078:	b80d883a 	mov	r6,r23
   1507c:	e00b883a 	mov	r5,fp
   15080:	00159080 	call	15908 <memmove>
   15084:	80c00217 	ldw	r3,8(r16)
   15088:	81000017 	ldw	r4,0(r16)
   1508c:	9005883a 	mov	r2,r18
   15090:	1ce7c83a 	sub	r19,r3,r19
   15094:	25cf883a 	add	r7,r4,r23
   15098:	84c00215 	stw	r19,8(r16)
   1509c:	81c00015 	stw	r7,0(r16)
   150a0:	a0c00217 	ldw	r3,8(r20)
   150a4:	e0b9883a 	add	fp,fp,r2
   150a8:	90a5c83a 	sub	r18,r18,r2
   150ac:	18a7c83a 	sub	r19,r3,r2
   150b0:	a4c00215 	stw	r19,8(r20)
   150b4:	983fce26 	beq	r19,zero,14ff0 <__alt_data_end+0xfc014ff0>
   150b8:	80c0030b 	ldhu	r3,12(r16)
   150bc:	903fe61e 	bne	r18,zero,15058 <__alt_data_end+0xfc015058>
   150c0:	8f000017 	ldw	fp,0(r17)
   150c4:	8c800117 	ldw	r18,4(r17)
   150c8:	8c400204 	addi	r17,r17,8
   150cc:	003fe106 	br	15054 <__alt_data_end+0xfc015054>
   150d0:	8cc00017 	ldw	r19,0(r17)
   150d4:	8c800117 	ldw	r18,4(r17)
   150d8:	8c400204 	addi	r17,r17,8
   150dc:	003fb306 	br	14fac <__alt_data_end+0xfc014fac>
   150e0:	0005883a 	mov	r2,zero
   150e4:	f800283a 	ret
   150e8:	81000017 	ldw	r4,0(r16)
   150ec:	80800417 	ldw	r2,16(r16)
   150f0:	11005a36 	bltu	r2,r4,1525c <__sfvwrite_r+0x320>
   150f4:	85c00517 	ldw	r23,20(r16)
   150f8:	95c05836 	bltu	r18,r23,1525c <__sfvwrite_r+0x320>
   150fc:	00a00034 	movhi	r2,32768
   15100:	10bfffc4 	addi	r2,r2,-1
   15104:	9009883a 	mov	r4,r18
   15108:	1480012e 	bgeu	r2,r18,15110 <__sfvwrite_r+0x1d4>
   1510c:	1009883a 	mov	r4,r2
   15110:	b80b883a 	mov	r5,r23
   15114:	000cb400 	call	cb40 <__divsi3>
   15118:	b80b883a 	mov	r5,r23
   1511c:	1009883a 	mov	r4,r2
   15120:	000ccf40 	call	ccf4 <__mulsi3>
   15124:	81400717 	ldw	r5,28(r16)
   15128:	80c00917 	ldw	r3,36(r16)
   1512c:	100f883a 	mov	r7,r2
   15130:	e00d883a 	mov	r6,fp
   15134:	a809883a 	mov	r4,r21
   15138:	183ee83a 	callr	r3
   1513c:	00bfd816 	blt	zero,r2,150a0 <__alt_data_end+0xfc0150a0>
   15140:	8080030b 	ldhu	r2,12(r16)
   15144:	10801014 	ori	r2,r2,64
   15148:	8080030d 	sth	r2,12(r16)
   1514c:	00bfffc4 	movi	r2,-1
   15150:	003fa806 	br	14ff4 <__alt_data_end+0xfc014ff4>
   15154:	0027883a 	mov	r19,zero
   15158:	0011883a 	mov	r8,zero
   1515c:	0039883a 	mov	fp,zero
   15160:	0025883a 	mov	r18,zero
   15164:	90001f26 	beq	r18,zero,151e4 <__sfvwrite_r+0x2a8>
   15168:	40005a26 	beq	r8,zero,152d4 <__sfvwrite_r+0x398>
   1516c:	982d883a 	mov	r22,r19
   15170:	94c0012e 	bgeu	r18,r19,15178 <__sfvwrite_r+0x23c>
   15174:	902d883a 	mov	r22,r18
   15178:	81000017 	ldw	r4,0(r16)
   1517c:	80800417 	ldw	r2,16(r16)
   15180:	b02f883a 	mov	r23,r22
   15184:	81c00517 	ldw	r7,20(r16)
   15188:	1100032e 	bgeu	r2,r4,15198 <__sfvwrite_r+0x25c>
   1518c:	80c00217 	ldw	r3,8(r16)
   15190:	38c7883a 	add	r3,r7,r3
   15194:	1d801816 	blt	r3,r22,151f8 <__sfvwrite_r+0x2bc>
   15198:	b1c03e16 	blt	r22,r7,15294 <__sfvwrite_r+0x358>
   1519c:	80800917 	ldw	r2,36(r16)
   151a0:	81400717 	ldw	r5,28(r16)
   151a4:	e00d883a 	mov	r6,fp
   151a8:	da000115 	stw	r8,4(sp)
   151ac:	a809883a 	mov	r4,r21
   151b0:	103ee83a 	callr	r2
   151b4:	102f883a 	mov	r23,r2
   151b8:	da000117 	ldw	r8,4(sp)
   151bc:	00bfe00e 	bge	zero,r2,15140 <__alt_data_end+0xfc015140>
   151c0:	9de7c83a 	sub	r19,r19,r23
   151c4:	98001f26 	beq	r19,zero,15244 <__sfvwrite_r+0x308>
   151c8:	a0800217 	ldw	r2,8(r20)
   151cc:	e5f9883a 	add	fp,fp,r23
   151d0:	95e5c83a 	sub	r18,r18,r23
   151d4:	15efc83a 	sub	r23,r2,r23
   151d8:	a5c00215 	stw	r23,8(r20)
   151dc:	b83f8426 	beq	r23,zero,14ff0 <__alt_data_end+0xfc014ff0>
   151e0:	903fe11e 	bne	r18,zero,15168 <__alt_data_end+0xfc015168>
   151e4:	8f000017 	ldw	fp,0(r17)
   151e8:	8c800117 	ldw	r18,4(r17)
   151ec:	0011883a 	mov	r8,zero
   151f0:	8c400204 	addi	r17,r17,8
   151f4:	003fdb06 	br	15164 <__alt_data_end+0xfc015164>
   151f8:	180d883a 	mov	r6,r3
   151fc:	e00b883a 	mov	r5,fp
   15200:	da000115 	stw	r8,4(sp)
   15204:	d8c00015 	stw	r3,0(sp)
   15208:	00159080 	call	15908 <memmove>
   1520c:	d8c00017 	ldw	r3,0(sp)
   15210:	80800017 	ldw	r2,0(r16)
   15214:	800b883a 	mov	r5,r16
   15218:	a809883a 	mov	r4,r21
   1521c:	10c5883a 	add	r2,r2,r3
   15220:	80800015 	stw	r2,0(r16)
   15224:	d8c00015 	stw	r3,0(sp)
   15228:	00146cc0 	call	146cc <_fflush_r>
   1522c:	d8c00017 	ldw	r3,0(sp)
   15230:	da000117 	ldw	r8,4(sp)
   15234:	103fc21e 	bne	r2,zero,15140 <__alt_data_end+0xfc015140>
   15238:	182f883a 	mov	r23,r3
   1523c:	9de7c83a 	sub	r19,r19,r23
   15240:	983fe11e 	bne	r19,zero,151c8 <__alt_data_end+0xfc0151c8>
   15244:	800b883a 	mov	r5,r16
   15248:	a809883a 	mov	r4,r21
   1524c:	00146cc0 	call	146cc <_fflush_r>
   15250:	103fbb1e 	bne	r2,zero,15140 <__alt_data_end+0xfc015140>
   15254:	0011883a 	mov	r8,zero
   15258:	003fdb06 	br	151c8 <__alt_data_end+0xfc0151c8>
   1525c:	94c0012e 	bgeu	r18,r19,15264 <__sfvwrite_r+0x328>
   15260:	9027883a 	mov	r19,r18
   15264:	980d883a 	mov	r6,r19
   15268:	e00b883a 	mov	r5,fp
   1526c:	00159080 	call	15908 <memmove>
   15270:	80800217 	ldw	r2,8(r16)
   15274:	80c00017 	ldw	r3,0(r16)
   15278:	14c5c83a 	sub	r2,r2,r19
   1527c:	1cc7883a 	add	r3,r3,r19
   15280:	80800215 	stw	r2,8(r16)
   15284:	80c00015 	stw	r3,0(r16)
   15288:	10004326 	beq	r2,zero,15398 <__sfvwrite_r+0x45c>
   1528c:	9805883a 	mov	r2,r19
   15290:	003f8306 	br	150a0 <__alt_data_end+0xfc0150a0>
   15294:	b00d883a 	mov	r6,r22
   15298:	e00b883a 	mov	r5,fp
   1529c:	da000115 	stw	r8,4(sp)
   152a0:	00159080 	call	15908 <memmove>
   152a4:	80800217 	ldw	r2,8(r16)
   152a8:	80c00017 	ldw	r3,0(r16)
   152ac:	da000117 	ldw	r8,4(sp)
   152b0:	1585c83a 	sub	r2,r2,r22
   152b4:	1dad883a 	add	r22,r3,r22
   152b8:	80800215 	stw	r2,8(r16)
   152bc:	85800015 	stw	r22,0(r16)
   152c0:	003fbf06 	br	151c0 <__alt_data_end+0xfc0151c0>
   152c4:	81000017 	ldw	r4,0(r16)
   152c8:	9027883a 	mov	r19,r18
   152cc:	902f883a 	mov	r23,r18
   152d0:	003f6906 	br	15078 <__alt_data_end+0xfc015078>
   152d4:	900d883a 	mov	r6,r18
   152d8:	01400284 	movi	r5,10
   152dc:	e009883a 	mov	r4,fp
   152e0:	00158240 	call	15824 <memchr>
   152e4:	10003e26 	beq	r2,zero,153e0 <__sfvwrite_r+0x4a4>
   152e8:	10800044 	addi	r2,r2,1
   152ec:	1727c83a 	sub	r19,r2,fp
   152f0:	02000044 	movi	r8,1
   152f4:	003f9d06 	br	1516c <__alt_data_end+0xfc01516c>
   152f8:	80800517 	ldw	r2,20(r16)
   152fc:	81400417 	ldw	r5,16(r16)
   15300:	81c00017 	ldw	r7,0(r16)
   15304:	10a7883a 	add	r19,r2,r2
   15308:	9885883a 	add	r2,r19,r2
   1530c:	1026d7fa 	srli	r19,r2,31
   15310:	396dc83a 	sub	r22,r7,r5
   15314:	b1000044 	addi	r4,r22,1
   15318:	9885883a 	add	r2,r19,r2
   1531c:	1027d07a 	srai	r19,r2,1
   15320:	2485883a 	add	r2,r4,r18
   15324:	980d883a 	mov	r6,r19
   15328:	9880022e 	bgeu	r19,r2,15334 <__sfvwrite_r+0x3f8>
   1532c:	1027883a 	mov	r19,r2
   15330:	100d883a 	mov	r6,r2
   15334:	18c1000c 	andi	r3,r3,1024
   15338:	18001c26 	beq	r3,zero,153ac <__sfvwrite_r+0x470>
   1533c:	300b883a 	mov	r5,r6
   15340:	a809883a 	mov	r4,r21
   15344:	000d2c80 	call	d2c8 <_malloc_r>
   15348:	102f883a 	mov	r23,r2
   1534c:	10002926 	beq	r2,zero,153f4 <__sfvwrite_r+0x4b8>
   15350:	81400417 	ldw	r5,16(r16)
   15354:	b00d883a 	mov	r6,r22
   15358:	1009883a 	mov	r4,r2
   1535c:	000dad40 	call	dad4 <memcpy>
   15360:	8080030b 	ldhu	r2,12(r16)
   15364:	00fedfc4 	movi	r3,-1153
   15368:	10c4703a 	and	r2,r2,r3
   1536c:	10802014 	ori	r2,r2,128
   15370:	8080030d 	sth	r2,12(r16)
   15374:	bd89883a 	add	r4,r23,r22
   15378:	9d8fc83a 	sub	r7,r19,r22
   1537c:	85c00415 	stw	r23,16(r16)
   15380:	84c00515 	stw	r19,20(r16)
   15384:	81000015 	stw	r4,0(r16)
   15388:	9027883a 	mov	r19,r18
   1538c:	81c00215 	stw	r7,8(r16)
   15390:	902f883a 	mov	r23,r18
   15394:	003f3806 	br	15078 <__alt_data_end+0xfc015078>
   15398:	800b883a 	mov	r5,r16
   1539c:	a809883a 	mov	r4,r21
   153a0:	00146cc0 	call	146cc <_fflush_r>
   153a4:	103fb926 	beq	r2,zero,1528c <__alt_data_end+0xfc01528c>
   153a8:	003f6506 	br	15140 <__alt_data_end+0xfc015140>
   153ac:	a809883a 	mov	r4,r21
   153b0:	0016c840 	call	16c84 <_realloc_r>
   153b4:	102f883a 	mov	r23,r2
   153b8:	103fee1e 	bne	r2,zero,15374 <__alt_data_end+0xfc015374>
   153bc:	81400417 	ldw	r5,16(r16)
   153c0:	a809883a 	mov	r4,r21
   153c4:	0014c2c0 	call	14c2c <_free_r>
   153c8:	8080030b 	ldhu	r2,12(r16)
   153cc:	00ffdfc4 	movi	r3,-129
   153d0:	1884703a 	and	r2,r3,r2
   153d4:	00c00304 	movi	r3,12
   153d8:	a8c00015 	stw	r3,0(r21)
   153dc:	003f5906 	br	15144 <__alt_data_end+0xfc015144>
   153e0:	94c00044 	addi	r19,r18,1
   153e4:	02000044 	movi	r8,1
   153e8:	003f6006 	br	1516c <__alt_data_end+0xfc01516c>
   153ec:	00bfffc4 	movi	r2,-1
   153f0:	003f0006 	br	14ff4 <__alt_data_end+0xfc014ff4>
   153f4:	00800304 	movi	r2,12
   153f8:	a8800015 	stw	r2,0(r21)
   153fc:	8080030b 	ldhu	r2,12(r16)
   15400:	003f5006 	br	15144 <__alt_data_end+0xfc015144>

00015404 <_fwalk>:
   15404:	defff704 	addi	sp,sp,-36
   15408:	dd000415 	stw	r20,16(sp)
   1540c:	dfc00815 	stw	ra,32(sp)
   15410:	ddc00715 	stw	r23,28(sp)
   15414:	dd800615 	stw	r22,24(sp)
   15418:	dd400515 	stw	r21,20(sp)
   1541c:	dcc00315 	stw	r19,12(sp)
   15420:	dc800215 	stw	r18,8(sp)
   15424:	dc400115 	stw	r17,4(sp)
   15428:	dc000015 	stw	r16,0(sp)
   1542c:	2500b804 	addi	r20,r4,736
   15430:	a0002326 	beq	r20,zero,154c0 <_fwalk+0xbc>
   15434:	282b883a 	mov	r21,r5
   15438:	002f883a 	mov	r23,zero
   1543c:	05800044 	movi	r22,1
   15440:	04ffffc4 	movi	r19,-1
   15444:	a4400117 	ldw	r17,4(r20)
   15448:	a4800217 	ldw	r18,8(r20)
   1544c:	8c7fffc4 	addi	r17,r17,-1
   15450:	88000d16 	blt	r17,zero,15488 <_fwalk+0x84>
   15454:	94000304 	addi	r16,r18,12
   15458:	94800384 	addi	r18,r18,14
   1545c:	8080000b 	ldhu	r2,0(r16)
   15460:	8c7fffc4 	addi	r17,r17,-1
   15464:	813ffd04 	addi	r4,r16,-12
   15468:	b080042e 	bgeu	r22,r2,1547c <_fwalk+0x78>
   1546c:	9080000f 	ldh	r2,0(r18)
   15470:	14c00226 	beq	r2,r19,1547c <_fwalk+0x78>
   15474:	a83ee83a 	callr	r21
   15478:	b8aeb03a 	or	r23,r23,r2
   1547c:	84001a04 	addi	r16,r16,104
   15480:	94801a04 	addi	r18,r18,104
   15484:	8cfff51e 	bne	r17,r19,1545c <__alt_data_end+0xfc01545c>
   15488:	a5000017 	ldw	r20,0(r20)
   1548c:	a03fed1e 	bne	r20,zero,15444 <__alt_data_end+0xfc015444>
   15490:	b805883a 	mov	r2,r23
   15494:	dfc00817 	ldw	ra,32(sp)
   15498:	ddc00717 	ldw	r23,28(sp)
   1549c:	dd800617 	ldw	r22,24(sp)
   154a0:	dd400517 	ldw	r21,20(sp)
   154a4:	dd000417 	ldw	r20,16(sp)
   154a8:	dcc00317 	ldw	r19,12(sp)
   154ac:	dc800217 	ldw	r18,8(sp)
   154b0:	dc400117 	ldw	r17,4(sp)
   154b4:	dc000017 	ldw	r16,0(sp)
   154b8:	dec00904 	addi	sp,sp,36
   154bc:	f800283a 	ret
   154c0:	002f883a 	mov	r23,zero
   154c4:	003ff206 	br	15490 <__alt_data_end+0xfc015490>

000154c8 <_fwalk_reent>:
   154c8:	defff704 	addi	sp,sp,-36
   154cc:	dd000415 	stw	r20,16(sp)
   154d0:	dfc00815 	stw	ra,32(sp)
   154d4:	ddc00715 	stw	r23,28(sp)
   154d8:	dd800615 	stw	r22,24(sp)
   154dc:	dd400515 	stw	r21,20(sp)
   154e0:	dcc00315 	stw	r19,12(sp)
   154e4:	dc800215 	stw	r18,8(sp)
   154e8:	dc400115 	stw	r17,4(sp)
   154ec:	dc000015 	stw	r16,0(sp)
   154f0:	2500b804 	addi	r20,r4,736
   154f4:	a0002326 	beq	r20,zero,15584 <_fwalk_reent+0xbc>
   154f8:	282b883a 	mov	r21,r5
   154fc:	2027883a 	mov	r19,r4
   15500:	002f883a 	mov	r23,zero
   15504:	05800044 	movi	r22,1
   15508:	04bfffc4 	movi	r18,-1
   1550c:	a4400117 	ldw	r17,4(r20)
   15510:	a4000217 	ldw	r16,8(r20)
   15514:	8c7fffc4 	addi	r17,r17,-1
   15518:	88000c16 	blt	r17,zero,1554c <_fwalk_reent+0x84>
   1551c:	84000304 	addi	r16,r16,12
   15520:	8080000b 	ldhu	r2,0(r16)
   15524:	8c7fffc4 	addi	r17,r17,-1
   15528:	817ffd04 	addi	r5,r16,-12
   1552c:	b080052e 	bgeu	r22,r2,15544 <_fwalk_reent+0x7c>
   15530:	8080008f 	ldh	r2,2(r16)
   15534:	9809883a 	mov	r4,r19
   15538:	14800226 	beq	r2,r18,15544 <_fwalk_reent+0x7c>
   1553c:	a83ee83a 	callr	r21
   15540:	b8aeb03a 	or	r23,r23,r2
   15544:	84001a04 	addi	r16,r16,104
   15548:	8cbff51e 	bne	r17,r18,15520 <__alt_data_end+0xfc015520>
   1554c:	a5000017 	ldw	r20,0(r20)
   15550:	a03fee1e 	bne	r20,zero,1550c <__alt_data_end+0xfc01550c>
   15554:	b805883a 	mov	r2,r23
   15558:	dfc00817 	ldw	ra,32(sp)
   1555c:	ddc00717 	ldw	r23,28(sp)
   15560:	dd800617 	ldw	r22,24(sp)
   15564:	dd400517 	ldw	r21,20(sp)
   15568:	dd000417 	ldw	r20,16(sp)
   1556c:	dcc00317 	ldw	r19,12(sp)
   15570:	dc800217 	ldw	r18,8(sp)
   15574:	dc400117 	ldw	r17,4(sp)
   15578:	dc000017 	ldw	r16,0(sp)
   1557c:	dec00904 	addi	sp,sp,36
   15580:	f800283a 	ret
   15584:	002f883a 	mov	r23,zero
   15588:	003ff206 	br	15554 <__alt_data_end+0xfc015554>

0001558c <_setlocale_r>:
   1558c:	30001b26 	beq	r6,zero,155fc <_setlocale_r+0x70>
   15590:	014000f4 	movhi	r5,3
   15594:	defffe04 	addi	sp,sp,-8
   15598:	29659404 	addi	r5,r5,-27056
   1559c:	3009883a 	mov	r4,r6
   155a0:	dc000015 	stw	r16,0(sp)
   155a4:	dfc00115 	stw	ra,4(sp)
   155a8:	3021883a 	mov	r16,r6
   155ac:	000e2c00 	call	e2c0 <strcmp>
   155b0:	1000061e 	bne	r2,zero,155cc <_setlocale_r+0x40>
   155b4:	008000f4 	movhi	r2,3
   155b8:	10a56d04 	addi	r2,r2,-27212
   155bc:	dfc00117 	ldw	ra,4(sp)
   155c0:	dc000017 	ldw	r16,0(sp)
   155c4:	dec00204 	addi	sp,sp,8
   155c8:	f800283a 	ret
   155cc:	014000f4 	movhi	r5,3
   155d0:	29656d04 	addi	r5,r5,-27212
   155d4:	8009883a 	mov	r4,r16
   155d8:	000e2c00 	call	e2c0 <strcmp>
   155dc:	103ff526 	beq	r2,zero,155b4 <__alt_data_end+0xfc0155b4>
   155e0:	014000f4 	movhi	r5,3
   155e4:	29657704 	addi	r5,r5,-27172
   155e8:	8009883a 	mov	r4,r16
   155ec:	000e2c00 	call	e2c0 <strcmp>
   155f0:	103ff026 	beq	r2,zero,155b4 <__alt_data_end+0xfc0155b4>
   155f4:	0005883a 	mov	r2,zero
   155f8:	003ff006 	br	155bc <__alt_data_end+0xfc0155bc>
   155fc:	008000f4 	movhi	r2,3
   15600:	10a56d04 	addi	r2,r2,-27212
   15604:	f800283a 	ret

00015608 <__locale_charset>:
   15608:	008000f4 	movhi	r2,3
   1560c:	10a85b04 	addi	r2,r2,-24212
   15610:	f800283a 	ret

00015614 <__locale_mb_cur_max>:
   15614:	008000f4 	movhi	r2,3
   15618:	10b2b104 	addi	r2,r2,-13628
   1561c:	10800017 	ldw	r2,0(r2)
   15620:	f800283a 	ret

00015624 <__locale_msgcharset>:
   15624:	008000f4 	movhi	r2,3
   15628:	10a85304 	addi	r2,r2,-24244
   1562c:	f800283a 	ret

00015630 <__locale_cjk_lang>:
   15630:	0005883a 	mov	r2,zero
   15634:	f800283a 	ret

00015638 <_localeconv_r>:
   15638:	008000f4 	movhi	r2,3
   1563c:	10a86304 	addi	r2,r2,-24180
   15640:	f800283a 	ret

00015644 <setlocale>:
   15644:	008000f4 	movhi	r2,3
   15648:	10b2ae04 	addi	r2,r2,-13640
   1564c:	280d883a 	mov	r6,r5
   15650:	200b883a 	mov	r5,r4
   15654:	11000017 	ldw	r4,0(r2)
   15658:	001558c1 	jmpi	1558c <_setlocale_r>

0001565c <localeconv>:
   1565c:	008000f4 	movhi	r2,3
   15660:	10a86304 	addi	r2,r2,-24180
   15664:	f800283a 	ret

00015668 <__smakebuf_r>:
   15668:	2880030b 	ldhu	r2,12(r5)
   1566c:	10c0008c 	andi	r3,r2,2
   15670:	1800411e 	bne	r3,zero,15778 <__smakebuf_r+0x110>
   15674:	deffec04 	addi	sp,sp,-80
   15678:	dc000f15 	stw	r16,60(sp)
   1567c:	2821883a 	mov	r16,r5
   15680:	2940038f 	ldh	r5,14(r5)
   15684:	dc401015 	stw	r17,64(sp)
   15688:	dfc01315 	stw	ra,76(sp)
   1568c:	dcc01215 	stw	r19,72(sp)
   15690:	dc801115 	stw	r18,68(sp)
   15694:	2023883a 	mov	r17,r4
   15698:	28001c16 	blt	r5,zero,1570c <__smakebuf_r+0xa4>
   1569c:	d80d883a 	mov	r6,sp
   156a0:	001a5f40 	call	1a5f4 <_fstat_r>
   156a4:	10001816 	blt	r2,zero,15708 <__smakebuf_r+0xa0>
   156a8:	d8800117 	ldw	r2,4(sp)
   156ac:	00e00014 	movui	r3,32768
   156b0:	10bc000c 	andi	r2,r2,61440
   156b4:	14c80020 	cmpeqi	r19,r2,8192
   156b8:	10c03726 	beq	r2,r3,15798 <__smakebuf_r+0x130>
   156bc:	80c0030b 	ldhu	r3,12(r16)
   156c0:	18c20014 	ori	r3,r3,2048
   156c4:	80c0030d 	sth	r3,12(r16)
   156c8:	00c80004 	movi	r3,8192
   156cc:	10c0521e 	bne	r2,r3,15818 <__smakebuf_r+0x1b0>
   156d0:	8140038f 	ldh	r5,14(r16)
   156d4:	8809883a 	mov	r4,r17
   156d8:	001a6500 	call	1a650 <_isatty_r>
   156dc:	10004c26 	beq	r2,zero,15810 <__smakebuf_r+0x1a8>
   156e0:	8080030b 	ldhu	r2,12(r16)
   156e4:	80c010c4 	addi	r3,r16,67
   156e8:	80c00015 	stw	r3,0(r16)
   156ec:	10800054 	ori	r2,r2,1
   156f0:	8080030d 	sth	r2,12(r16)
   156f4:	00800044 	movi	r2,1
   156f8:	80c00415 	stw	r3,16(r16)
   156fc:	80800515 	stw	r2,20(r16)
   15700:	04810004 	movi	r18,1024
   15704:	00000706 	br	15724 <__smakebuf_r+0xbc>
   15708:	8080030b 	ldhu	r2,12(r16)
   1570c:	10c0200c 	andi	r3,r2,128
   15710:	18001f1e 	bne	r3,zero,15790 <__smakebuf_r+0x128>
   15714:	04810004 	movi	r18,1024
   15718:	10820014 	ori	r2,r2,2048
   1571c:	8080030d 	sth	r2,12(r16)
   15720:	0027883a 	mov	r19,zero
   15724:	900b883a 	mov	r5,r18
   15728:	8809883a 	mov	r4,r17
   1572c:	000d2c80 	call	d2c8 <_malloc_r>
   15730:	10002c26 	beq	r2,zero,157e4 <__smakebuf_r+0x17c>
   15734:	80c0030b 	ldhu	r3,12(r16)
   15738:	01000074 	movhi	r4,1
   1573c:	2111d804 	addi	r4,r4,18272
   15740:	89000f15 	stw	r4,60(r17)
   15744:	18c02014 	ori	r3,r3,128
   15748:	80c0030d 	sth	r3,12(r16)
   1574c:	80800015 	stw	r2,0(r16)
   15750:	80800415 	stw	r2,16(r16)
   15754:	84800515 	stw	r18,20(r16)
   15758:	98001a1e 	bne	r19,zero,157c4 <__smakebuf_r+0x15c>
   1575c:	dfc01317 	ldw	ra,76(sp)
   15760:	dcc01217 	ldw	r19,72(sp)
   15764:	dc801117 	ldw	r18,68(sp)
   15768:	dc401017 	ldw	r17,64(sp)
   1576c:	dc000f17 	ldw	r16,60(sp)
   15770:	dec01404 	addi	sp,sp,80
   15774:	f800283a 	ret
   15778:	288010c4 	addi	r2,r5,67
   1577c:	28800015 	stw	r2,0(r5)
   15780:	28800415 	stw	r2,16(r5)
   15784:	00800044 	movi	r2,1
   15788:	28800515 	stw	r2,20(r5)
   1578c:	f800283a 	ret
   15790:	04801004 	movi	r18,64
   15794:	003fe006 	br	15718 <__alt_data_end+0xfc015718>
   15798:	81000a17 	ldw	r4,40(r16)
   1579c:	00c00074 	movhi	r3,1
   157a0:	18dccd04 	addi	r3,r3,29492
   157a4:	20ffc51e 	bne	r4,r3,156bc <__alt_data_end+0xfc0156bc>
   157a8:	8080030b 	ldhu	r2,12(r16)
   157ac:	04810004 	movi	r18,1024
   157b0:	84801315 	stw	r18,76(r16)
   157b4:	1484b03a 	or	r2,r2,r18
   157b8:	8080030d 	sth	r2,12(r16)
   157bc:	0027883a 	mov	r19,zero
   157c0:	003fd806 	br	15724 <__alt_data_end+0xfc015724>
   157c4:	8140038f 	ldh	r5,14(r16)
   157c8:	8809883a 	mov	r4,r17
   157cc:	001a6500 	call	1a650 <_isatty_r>
   157d0:	103fe226 	beq	r2,zero,1575c <__alt_data_end+0xfc01575c>
   157d4:	8080030b 	ldhu	r2,12(r16)
   157d8:	10800054 	ori	r2,r2,1
   157dc:	8080030d 	sth	r2,12(r16)
   157e0:	003fde06 	br	1575c <__alt_data_end+0xfc01575c>
   157e4:	8080030b 	ldhu	r2,12(r16)
   157e8:	10c0800c 	andi	r3,r2,512
   157ec:	183fdb1e 	bne	r3,zero,1575c <__alt_data_end+0xfc01575c>
   157f0:	10800094 	ori	r2,r2,2
   157f4:	80c010c4 	addi	r3,r16,67
   157f8:	8080030d 	sth	r2,12(r16)
   157fc:	00800044 	movi	r2,1
   15800:	80c00015 	stw	r3,0(r16)
   15804:	80c00415 	stw	r3,16(r16)
   15808:	80800515 	stw	r2,20(r16)
   1580c:	003fd306 	br	1575c <__alt_data_end+0xfc01575c>
   15810:	04810004 	movi	r18,1024
   15814:	003fc306 	br	15724 <__alt_data_end+0xfc015724>
   15818:	0027883a 	mov	r19,zero
   1581c:	04810004 	movi	r18,1024
   15820:	003fc006 	br	15724 <__alt_data_end+0xfc015724>

00015824 <memchr>:
   15824:	208000cc 	andi	r2,r4,3
   15828:	280f883a 	mov	r7,r5
   1582c:	10003426 	beq	r2,zero,15900 <memchr+0xdc>
   15830:	30bfffc4 	addi	r2,r6,-1
   15834:	30001a26 	beq	r6,zero,158a0 <memchr+0x7c>
   15838:	20c00003 	ldbu	r3,0(r4)
   1583c:	29803fcc 	andi	r6,r5,255
   15840:	30c0051e 	bne	r6,r3,15858 <memchr+0x34>
   15844:	00001806 	br	158a8 <memchr+0x84>
   15848:	10001526 	beq	r2,zero,158a0 <memchr+0x7c>
   1584c:	20c00003 	ldbu	r3,0(r4)
   15850:	10bfffc4 	addi	r2,r2,-1
   15854:	30c01426 	beq	r6,r3,158a8 <memchr+0x84>
   15858:	21000044 	addi	r4,r4,1
   1585c:	20c000cc 	andi	r3,r4,3
   15860:	183ff91e 	bne	r3,zero,15848 <__alt_data_end+0xfc015848>
   15864:	020000c4 	movi	r8,3
   15868:	40801136 	bltu	r8,r2,158b0 <memchr+0x8c>
   1586c:	10000c26 	beq	r2,zero,158a0 <memchr+0x7c>
   15870:	20c00003 	ldbu	r3,0(r4)
   15874:	29403fcc 	andi	r5,r5,255
   15878:	28c00b26 	beq	r5,r3,158a8 <memchr+0x84>
   1587c:	20c00044 	addi	r3,r4,1
   15880:	39803fcc 	andi	r6,r7,255
   15884:	2089883a 	add	r4,r4,r2
   15888:	00000306 	br	15898 <memchr+0x74>
   1588c:	18c00044 	addi	r3,r3,1
   15890:	197fffc3 	ldbu	r5,-1(r3)
   15894:	31400526 	beq	r6,r5,158ac <memchr+0x88>
   15898:	1805883a 	mov	r2,r3
   1589c:	20fffb1e 	bne	r4,r3,1588c <__alt_data_end+0xfc01588c>
   158a0:	0005883a 	mov	r2,zero
   158a4:	f800283a 	ret
   158a8:	2005883a 	mov	r2,r4
   158ac:	f800283a 	ret
   158b0:	28c03fcc 	andi	r3,r5,255
   158b4:	1812923a 	slli	r9,r3,8
   158b8:	02ffbff4 	movhi	r11,65279
   158bc:	02a02074 	movhi	r10,32897
   158c0:	48d2b03a 	or	r9,r9,r3
   158c4:	4806943a 	slli	r3,r9,16
   158c8:	5affbfc4 	addi	r11,r11,-257
   158cc:	52a02004 	addi	r10,r10,-32640
   158d0:	48d2b03a 	or	r9,r9,r3
   158d4:	20c00017 	ldw	r3,0(r4)
   158d8:	48c6f03a 	xor	r3,r9,r3
   158dc:	1acd883a 	add	r6,r3,r11
   158e0:	00c6303a 	nor	r3,zero,r3
   158e4:	30c6703a 	and	r3,r6,r3
   158e8:	1a86703a 	and	r3,r3,r10
   158ec:	183fe01e 	bne	r3,zero,15870 <__alt_data_end+0xfc015870>
   158f0:	10bfff04 	addi	r2,r2,-4
   158f4:	21000104 	addi	r4,r4,4
   158f8:	40bff636 	bltu	r8,r2,158d4 <__alt_data_end+0xfc0158d4>
   158fc:	003fdb06 	br	1586c <__alt_data_end+0xfc01586c>
   15900:	3005883a 	mov	r2,r6
   15904:	003fd706 	br	15864 <__alt_data_end+0xfc015864>

00015908 <memmove>:
   15908:	2005883a 	mov	r2,r4
   1590c:	29000b2e 	bgeu	r5,r4,1593c <memmove+0x34>
   15910:	298f883a 	add	r7,r5,r6
   15914:	21c0092e 	bgeu	r4,r7,1593c <memmove+0x34>
   15918:	2187883a 	add	r3,r4,r6
   1591c:	198bc83a 	sub	r5,r3,r6
   15920:	30004826 	beq	r6,zero,15a44 <memmove+0x13c>
   15924:	39ffffc4 	addi	r7,r7,-1
   15928:	39000003 	ldbu	r4,0(r7)
   1592c:	18ffffc4 	addi	r3,r3,-1
   15930:	19000005 	stb	r4,0(r3)
   15934:	28fffb1e 	bne	r5,r3,15924 <__alt_data_end+0xfc015924>
   15938:	f800283a 	ret
   1593c:	00c003c4 	movi	r3,15
   15940:	1980412e 	bgeu	r3,r6,15a48 <memmove+0x140>
   15944:	2886b03a 	or	r3,r5,r2
   15948:	18c000cc 	andi	r3,r3,3
   1594c:	1800401e 	bne	r3,zero,15a50 <memmove+0x148>
   15950:	33fffc04 	addi	r15,r6,-16
   15954:	781ed13a 	srli	r15,r15,4
   15958:	28c00104 	addi	r3,r5,4
   1595c:	13400104 	addi	r13,r2,4
   15960:	781c913a 	slli	r14,r15,4
   15964:	2b000204 	addi	r12,r5,8
   15968:	12c00204 	addi	r11,r2,8
   1596c:	73800504 	addi	r14,r14,20
   15970:	2a800304 	addi	r10,r5,12
   15974:	12400304 	addi	r9,r2,12
   15978:	2b9d883a 	add	r14,r5,r14
   1597c:	2811883a 	mov	r8,r5
   15980:	100f883a 	mov	r7,r2
   15984:	41000017 	ldw	r4,0(r8)
   15988:	39c00404 	addi	r7,r7,16
   1598c:	18c00404 	addi	r3,r3,16
   15990:	393ffc15 	stw	r4,-16(r7)
   15994:	193ffc17 	ldw	r4,-16(r3)
   15998:	6b400404 	addi	r13,r13,16
   1599c:	5ac00404 	addi	r11,r11,16
   159a0:	693ffc15 	stw	r4,-16(r13)
   159a4:	61000017 	ldw	r4,0(r12)
   159a8:	4a400404 	addi	r9,r9,16
   159ac:	42000404 	addi	r8,r8,16
   159b0:	593ffc15 	stw	r4,-16(r11)
   159b4:	51000017 	ldw	r4,0(r10)
   159b8:	63000404 	addi	r12,r12,16
   159bc:	52800404 	addi	r10,r10,16
   159c0:	493ffc15 	stw	r4,-16(r9)
   159c4:	1bbfef1e 	bne	r3,r14,15984 <__alt_data_end+0xfc015984>
   159c8:	79000044 	addi	r4,r15,1
   159cc:	2008913a 	slli	r4,r4,4
   159d0:	328003cc 	andi	r10,r6,15
   159d4:	02c000c4 	movi	r11,3
   159d8:	1107883a 	add	r3,r2,r4
   159dc:	290b883a 	add	r5,r5,r4
   159e0:	5a801e2e 	bgeu	r11,r10,15a5c <memmove+0x154>
   159e4:	1813883a 	mov	r9,r3
   159e8:	2811883a 	mov	r8,r5
   159ec:	500f883a 	mov	r7,r10
   159f0:	41000017 	ldw	r4,0(r8)
   159f4:	4a400104 	addi	r9,r9,4
   159f8:	39ffff04 	addi	r7,r7,-4
   159fc:	493fff15 	stw	r4,-4(r9)
   15a00:	42000104 	addi	r8,r8,4
   15a04:	59fffa36 	bltu	r11,r7,159f0 <__alt_data_end+0xfc0159f0>
   15a08:	513fff04 	addi	r4,r10,-4
   15a0c:	2008d0ba 	srli	r4,r4,2
   15a10:	318000cc 	andi	r6,r6,3
   15a14:	21000044 	addi	r4,r4,1
   15a18:	2109883a 	add	r4,r4,r4
   15a1c:	2109883a 	add	r4,r4,r4
   15a20:	1907883a 	add	r3,r3,r4
   15a24:	290b883a 	add	r5,r5,r4
   15a28:	30000b26 	beq	r6,zero,15a58 <memmove+0x150>
   15a2c:	198d883a 	add	r6,r3,r6
   15a30:	29c00003 	ldbu	r7,0(r5)
   15a34:	18c00044 	addi	r3,r3,1
   15a38:	29400044 	addi	r5,r5,1
   15a3c:	19ffffc5 	stb	r7,-1(r3)
   15a40:	19bffb1e 	bne	r3,r6,15a30 <__alt_data_end+0xfc015a30>
   15a44:	f800283a 	ret
   15a48:	1007883a 	mov	r3,r2
   15a4c:	003ff606 	br	15a28 <__alt_data_end+0xfc015a28>
   15a50:	1007883a 	mov	r3,r2
   15a54:	003ff506 	br	15a2c <__alt_data_end+0xfc015a2c>
   15a58:	f800283a 	ret
   15a5c:	500d883a 	mov	r6,r10
   15a60:	003ff106 	br	15a28 <__alt_data_end+0xfc015a28>

00015a64 <_Balloc>:
   15a64:	20801317 	ldw	r2,76(r4)
   15a68:	defffc04 	addi	sp,sp,-16
   15a6c:	dc400115 	stw	r17,4(sp)
   15a70:	dc000015 	stw	r16,0(sp)
   15a74:	dfc00315 	stw	ra,12(sp)
   15a78:	dc800215 	stw	r18,8(sp)
   15a7c:	2023883a 	mov	r17,r4
   15a80:	2821883a 	mov	r16,r5
   15a84:	10000f26 	beq	r2,zero,15ac4 <_Balloc+0x60>
   15a88:	8407883a 	add	r3,r16,r16
   15a8c:	18c7883a 	add	r3,r3,r3
   15a90:	10c7883a 	add	r3,r2,r3
   15a94:	18800017 	ldw	r2,0(r3)
   15a98:	10001126 	beq	r2,zero,15ae0 <_Balloc+0x7c>
   15a9c:	11000017 	ldw	r4,0(r2)
   15aa0:	19000015 	stw	r4,0(r3)
   15aa4:	10000415 	stw	zero,16(r2)
   15aa8:	10000315 	stw	zero,12(r2)
   15aac:	dfc00317 	ldw	ra,12(sp)
   15ab0:	dc800217 	ldw	r18,8(sp)
   15ab4:	dc400117 	ldw	r17,4(sp)
   15ab8:	dc000017 	ldw	r16,0(sp)
   15abc:	dec00404 	addi	sp,sp,16
   15ac0:	f800283a 	ret
   15ac4:	01800844 	movi	r6,33
   15ac8:	01400104 	movi	r5,4
   15acc:	001a20c0 	call	1a20c <_calloc_r>
   15ad0:	88801315 	stw	r2,76(r17)
   15ad4:	103fec1e 	bne	r2,zero,15a88 <__alt_data_end+0xfc015a88>
   15ad8:	0005883a 	mov	r2,zero
   15adc:	003ff306 	br	15aac <__alt_data_end+0xfc015aac>
   15ae0:	01400044 	movi	r5,1
   15ae4:	2c24983a 	sll	r18,r5,r16
   15ae8:	8809883a 	mov	r4,r17
   15aec:	91800144 	addi	r6,r18,5
   15af0:	318d883a 	add	r6,r6,r6
   15af4:	318d883a 	add	r6,r6,r6
   15af8:	001a20c0 	call	1a20c <_calloc_r>
   15afc:	103ff626 	beq	r2,zero,15ad8 <__alt_data_end+0xfc015ad8>
   15b00:	14000115 	stw	r16,4(r2)
   15b04:	14800215 	stw	r18,8(r2)
   15b08:	003fe606 	br	15aa4 <__alt_data_end+0xfc015aa4>

00015b0c <_Bfree>:
   15b0c:	28000826 	beq	r5,zero,15b30 <_Bfree+0x24>
   15b10:	28c00117 	ldw	r3,4(r5)
   15b14:	20801317 	ldw	r2,76(r4)
   15b18:	18c7883a 	add	r3,r3,r3
   15b1c:	18c7883a 	add	r3,r3,r3
   15b20:	10c5883a 	add	r2,r2,r3
   15b24:	10c00017 	ldw	r3,0(r2)
   15b28:	28c00015 	stw	r3,0(r5)
   15b2c:	11400015 	stw	r5,0(r2)
   15b30:	f800283a 	ret

00015b34 <__multadd>:
   15b34:	defff704 	addi	sp,sp,-36
   15b38:	dc800215 	stw	r18,8(sp)
   15b3c:	2c800417 	ldw	r18,16(r5)
   15b40:	dd800615 	stw	r22,24(sp)
   15b44:	dd400515 	stw	r21,20(sp)
   15b48:	dd000415 	stw	r20,16(sp)
   15b4c:	dcc00315 	stw	r19,12(sp)
   15b50:	dc400115 	stw	r17,4(sp)
   15b54:	dc000015 	stw	r16,0(sp)
   15b58:	dfc00815 	stw	ra,32(sp)
   15b5c:	ddc00715 	stw	r23,28(sp)
   15b60:	2827883a 	mov	r19,r5
   15b64:	2029883a 	mov	r20,r4
   15b68:	3023883a 	mov	r17,r6
   15b6c:	3821883a 	mov	r16,r7
   15b70:	2d400504 	addi	r21,r5,20
   15b74:	002d883a 	mov	r22,zero
   15b78:	adc00017 	ldw	r23,0(r21)
   15b7c:	880b883a 	mov	r5,r17
   15b80:	ad400104 	addi	r21,r21,4
   15b84:	b93fffcc 	andi	r4,r23,65535
   15b88:	000ccf40 	call	ccf4 <__mulsi3>
   15b8c:	b808d43a 	srli	r4,r23,16
   15b90:	880b883a 	mov	r5,r17
   15b94:	1421883a 	add	r16,r2,r16
   15b98:	000ccf40 	call	ccf4 <__mulsi3>
   15b9c:	800ed43a 	srli	r7,r16,16
   15ba0:	80ffffcc 	andi	r3,r16,65535
   15ba4:	b5800044 	addi	r22,r22,1
   15ba8:	11c5883a 	add	r2,r2,r7
   15bac:	100e943a 	slli	r7,r2,16
   15bb0:	1020d43a 	srli	r16,r2,16
   15bb4:	38c7883a 	add	r3,r7,r3
   15bb8:	a8ffff15 	stw	r3,-4(r21)
   15bbc:	b4bfee16 	blt	r22,r18,15b78 <__alt_data_end+0xfc015b78>
   15bc0:	80000926 	beq	r16,zero,15be8 <__multadd+0xb4>
   15bc4:	98800217 	ldw	r2,8(r19)
   15bc8:	9080130e 	bge	r18,r2,15c18 <__multadd+0xe4>
   15bcc:	90800144 	addi	r2,r18,5
   15bd0:	1085883a 	add	r2,r2,r2
   15bd4:	1085883a 	add	r2,r2,r2
   15bd8:	9885883a 	add	r2,r19,r2
   15bdc:	14000015 	stw	r16,0(r2)
   15be0:	94800044 	addi	r18,r18,1
   15be4:	9c800415 	stw	r18,16(r19)
   15be8:	9805883a 	mov	r2,r19
   15bec:	dfc00817 	ldw	ra,32(sp)
   15bf0:	ddc00717 	ldw	r23,28(sp)
   15bf4:	dd800617 	ldw	r22,24(sp)
   15bf8:	dd400517 	ldw	r21,20(sp)
   15bfc:	dd000417 	ldw	r20,16(sp)
   15c00:	dcc00317 	ldw	r19,12(sp)
   15c04:	dc800217 	ldw	r18,8(sp)
   15c08:	dc400117 	ldw	r17,4(sp)
   15c0c:	dc000017 	ldw	r16,0(sp)
   15c10:	dec00904 	addi	sp,sp,36
   15c14:	f800283a 	ret
   15c18:	99400117 	ldw	r5,4(r19)
   15c1c:	a009883a 	mov	r4,r20
   15c20:	29400044 	addi	r5,r5,1
   15c24:	0015a640 	call	15a64 <_Balloc>
   15c28:	99800417 	ldw	r6,16(r19)
   15c2c:	99400304 	addi	r5,r19,12
   15c30:	11000304 	addi	r4,r2,12
   15c34:	31800084 	addi	r6,r6,2
   15c38:	318d883a 	add	r6,r6,r6
   15c3c:	318d883a 	add	r6,r6,r6
   15c40:	1023883a 	mov	r17,r2
   15c44:	000dad40 	call	dad4 <memcpy>
   15c48:	98000a26 	beq	r19,zero,15c74 <__multadd+0x140>
   15c4c:	98c00117 	ldw	r3,4(r19)
   15c50:	a0801317 	ldw	r2,76(r20)
   15c54:	18c7883a 	add	r3,r3,r3
   15c58:	18c7883a 	add	r3,r3,r3
   15c5c:	10c5883a 	add	r2,r2,r3
   15c60:	10c00017 	ldw	r3,0(r2)
   15c64:	98c00015 	stw	r3,0(r19)
   15c68:	14c00015 	stw	r19,0(r2)
   15c6c:	8827883a 	mov	r19,r17
   15c70:	003fd606 	br	15bcc <__alt_data_end+0xfc015bcc>
   15c74:	8827883a 	mov	r19,r17
   15c78:	003fd406 	br	15bcc <__alt_data_end+0xfc015bcc>

00015c7c <__s2b>:
   15c7c:	defff904 	addi	sp,sp,-28
   15c80:	dc400115 	stw	r17,4(sp)
   15c84:	dc000015 	stw	r16,0(sp)
   15c88:	2023883a 	mov	r17,r4
   15c8c:	2821883a 	mov	r16,r5
   15c90:	39000204 	addi	r4,r7,8
   15c94:	01400244 	movi	r5,9
   15c98:	dcc00315 	stw	r19,12(sp)
   15c9c:	dc800215 	stw	r18,8(sp)
   15ca0:	dfc00615 	stw	ra,24(sp)
   15ca4:	dd400515 	stw	r21,20(sp)
   15ca8:	dd000415 	stw	r20,16(sp)
   15cac:	3825883a 	mov	r18,r7
   15cb0:	3027883a 	mov	r19,r6
   15cb4:	000cb400 	call	cb40 <__divsi3>
   15cb8:	00c00044 	movi	r3,1
   15cbc:	000b883a 	mov	r5,zero
   15cc0:	1880030e 	bge	r3,r2,15cd0 <__s2b+0x54>
   15cc4:	18c7883a 	add	r3,r3,r3
   15cc8:	29400044 	addi	r5,r5,1
   15ccc:	18bffd16 	blt	r3,r2,15cc4 <__alt_data_end+0xfc015cc4>
   15cd0:	8809883a 	mov	r4,r17
   15cd4:	0015a640 	call	15a64 <_Balloc>
   15cd8:	d8c00717 	ldw	r3,28(sp)
   15cdc:	10c00515 	stw	r3,20(r2)
   15ce0:	00c00044 	movi	r3,1
   15ce4:	10c00415 	stw	r3,16(r2)
   15ce8:	00c00244 	movi	r3,9
   15cec:	1cc0210e 	bge	r3,r19,15d74 <__s2b+0xf8>
   15cf0:	80eb883a 	add	r21,r16,r3
   15cf4:	a829883a 	mov	r20,r21
   15cf8:	84e1883a 	add	r16,r16,r19
   15cfc:	a1c00007 	ldb	r7,0(r20)
   15d00:	01800284 	movi	r6,10
   15d04:	a5000044 	addi	r20,r20,1
   15d08:	100b883a 	mov	r5,r2
   15d0c:	39fff404 	addi	r7,r7,-48
   15d10:	8809883a 	mov	r4,r17
   15d14:	0015b340 	call	15b34 <__multadd>
   15d18:	a43ff81e 	bne	r20,r16,15cfc <__alt_data_end+0xfc015cfc>
   15d1c:	ace1883a 	add	r16,r21,r19
   15d20:	843ffe04 	addi	r16,r16,-8
   15d24:	9c800a0e 	bge	r19,r18,15d50 <__s2b+0xd4>
   15d28:	94e5c83a 	sub	r18,r18,r19
   15d2c:	84a5883a 	add	r18,r16,r18
   15d30:	81c00007 	ldb	r7,0(r16)
   15d34:	01800284 	movi	r6,10
   15d38:	84000044 	addi	r16,r16,1
   15d3c:	100b883a 	mov	r5,r2
   15d40:	39fff404 	addi	r7,r7,-48
   15d44:	8809883a 	mov	r4,r17
   15d48:	0015b340 	call	15b34 <__multadd>
   15d4c:	84bff81e 	bne	r16,r18,15d30 <__alt_data_end+0xfc015d30>
   15d50:	dfc00617 	ldw	ra,24(sp)
   15d54:	dd400517 	ldw	r21,20(sp)
   15d58:	dd000417 	ldw	r20,16(sp)
   15d5c:	dcc00317 	ldw	r19,12(sp)
   15d60:	dc800217 	ldw	r18,8(sp)
   15d64:	dc400117 	ldw	r17,4(sp)
   15d68:	dc000017 	ldw	r16,0(sp)
   15d6c:	dec00704 	addi	sp,sp,28
   15d70:	f800283a 	ret
   15d74:	84000284 	addi	r16,r16,10
   15d78:	1827883a 	mov	r19,r3
   15d7c:	003fe906 	br	15d24 <__alt_data_end+0xfc015d24>

00015d80 <__hi0bits>:
   15d80:	20bfffec 	andhi	r2,r4,65535
   15d84:	1000141e 	bne	r2,zero,15dd8 <__hi0bits+0x58>
   15d88:	2008943a 	slli	r4,r4,16
   15d8c:	00800404 	movi	r2,16
   15d90:	20ffc02c 	andhi	r3,r4,65280
   15d94:	1800021e 	bne	r3,zero,15da0 <__hi0bits+0x20>
   15d98:	2008923a 	slli	r4,r4,8
   15d9c:	10800204 	addi	r2,r2,8
   15da0:	20fc002c 	andhi	r3,r4,61440
   15da4:	1800021e 	bne	r3,zero,15db0 <__hi0bits+0x30>
   15da8:	2008913a 	slli	r4,r4,4
   15dac:	10800104 	addi	r2,r2,4
   15db0:	20f0002c 	andhi	r3,r4,49152
   15db4:	1800031e 	bne	r3,zero,15dc4 <__hi0bits+0x44>
   15db8:	2109883a 	add	r4,r4,r4
   15dbc:	10800084 	addi	r2,r2,2
   15dc0:	2109883a 	add	r4,r4,r4
   15dc4:	20000316 	blt	r4,zero,15dd4 <__hi0bits+0x54>
   15dc8:	2110002c 	andhi	r4,r4,16384
   15dcc:	2000041e 	bne	r4,zero,15de0 <__hi0bits+0x60>
   15dd0:	00800804 	movi	r2,32
   15dd4:	f800283a 	ret
   15dd8:	0005883a 	mov	r2,zero
   15ddc:	003fec06 	br	15d90 <__alt_data_end+0xfc015d90>
   15de0:	10800044 	addi	r2,r2,1
   15de4:	f800283a 	ret

00015de8 <__lo0bits>:
   15de8:	20c00017 	ldw	r3,0(r4)
   15dec:	188001cc 	andi	r2,r3,7
   15df0:	10000826 	beq	r2,zero,15e14 <__lo0bits+0x2c>
   15df4:	1880004c 	andi	r2,r3,1
   15df8:	1000211e 	bne	r2,zero,15e80 <__lo0bits+0x98>
   15dfc:	1880008c 	andi	r2,r3,2
   15e00:	1000211e 	bne	r2,zero,15e88 <__lo0bits+0xa0>
   15e04:	1806d0ba 	srli	r3,r3,2
   15e08:	00800084 	movi	r2,2
   15e0c:	20c00015 	stw	r3,0(r4)
   15e10:	f800283a 	ret
   15e14:	18bfffcc 	andi	r2,r3,65535
   15e18:	10001326 	beq	r2,zero,15e68 <__lo0bits+0x80>
   15e1c:	0005883a 	mov	r2,zero
   15e20:	19403fcc 	andi	r5,r3,255
   15e24:	2800021e 	bne	r5,zero,15e30 <__lo0bits+0x48>
   15e28:	1806d23a 	srli	r3,r3,8
   15e2c:	10800204 	addi	r2,r2,8
   15e30:	194003cc 	andi	r5,r3,15
   15e34:	2800021e 	bne	r5,zero,15e40 <__lo0bits+0x58>
   15e38:	1806d13a 	srli	r3,r3,4
   15e3c:	10800104 	addi	r2,r2,4
   15e40:	194000cc 	andi	r5,r3,3
   15e44:	2800021e 	bne	r5,zero,15e50 <__lo0bits+0x68>
   15e48:	1806d0ba 	srli	r3,r3,2
   15e4c:	10800084 	addi	r2,r2,2
   15e50:	1940004c 	andi	r5,r3,1
   15e54:	2800081e 	bne	r5,zero,15e78 <__lo0bits+0x90>
   15e58:	1806d07a 	srli	r3,r3,1
   15e5c:	1800051e 	bne	r3,zero,15e74 <__lo0bits+0x8c>
   15e60:	00800804 	movi	r2,32
   15e64:	f800283a 	ret
   15e68:	1806d43a 	srli	r3,r3,16
   15e6c:	00800404 	movi	r2,16
   15e70:	003feb06 	br	15e20 <__alt_data_end+0xfc015e20>
   15e74:	10800044 	addi	r2,r2,1
   15e78:	20c00015 	stw	r3,0(r4)
   15e7c:	f800283a 	ret
   15e80:	0005883a 	mov	r2,zero
   15e84:	f800283a 	ret
   15e88:	1806d07a 	srli	r3,r3,1
   15e8c:	00800044 	movi	r2,1
   15e90:	20c00015 	stw	r3,0(r4)
   15e94:	f800283a 	ret

00015e98 <__i2b>:
   15e98:	defffd04 	addi	sp,sp,-12
   15e9c:	dc000015 	stw	r16,0(sp)
   15ea0:	04000044 	movi	r16,1
   15ea4:	dc400115 	stw	r17,4(sp)
   15ea8:	2823883a 	mov	r17,r5
   15eac:	800b883a 	mov	r5,r16
   15eb0:	dfc00215 	stw	ra,8(sp)
   15eb4:	0015a640 	call	15a64 <_Balloc>
   15eb8:	14400515 	stw	r17,20(r2)
   15ebc:	14000415 	stw	r16,16(r2)
   15ec0:	dfc00217 	ldw	ra,8(sp)
   15ec4:	dc400117 	ldw	r17,4(sp)
   15ec8:	dc000017 	ldw	r16,0(sp)
   15ecc:	dec00304 	addi	sp,sp,12
   15ed0:	f800283a 	ret

00015ed4 <__multiply>:
   15ed4:	deffef04 	addi	sp,sp,-68
   15ed8:	dc400815 	stw	r17,32(sp)
   15edc:	dc000715 	stw	r16,28(sp)
   15ee0:	34400417 	ldw	r17,16(r6)
   15ee4:	2c000417 	ldw	r16,16(r5)
   15ee8:	dd800d15 	stw	r22,52(sp)
   15eec:	dc800915 	stw	r18,36(sp)
   15ef0:	dfc01015 	stw	ra,64(sp)
   15ef4:	df000f15 	stw	fp,60(sp)
   15ef8:	ddc00e15 	stw	r23,56(sp)
   15efc:	dd400c15 	stw	r21,48(sp)
   15f00:	dd000b15 	stw	r20,44(sp)
   15f04:	dcc00a15 	stw	r19,40(sp)
   15f08:	2825883a 	mov	r18,r5
   15f0c:	302d883a 	mov	r22,r6
   15f10:	8440050e 	bge	r16,r17,15f28 <__multiply+0x54>
   15f14:	8007883a 	mov	r3,r16
   15f18:	3025883a 	mov	r18,r6
   15f1c:	8821883a 	mov	r16,r17
   15f20:	282d883a 	mov	r22,r5
   15f24:	1823883a 	mov	r17,r3
   15f28:	90800217 	ldw	r2,8(r18)
   15f2c:	8447883a 	add	r3,r16,r17
   15f30:	d8c00215 	stw	r3,8(sp)
   15f34:	91400117 	ldw	r5,4(r18)
   15f38:	10c0010e 	bge	r2,r3,15f40 <__multiply+0x6c>
   15f3c:	29400044 	addi	r5,r5,1
   15f40:	0015a640 	call	15a64 <_Balloc>
   15f44:	d8c00217 	ldw	r3,8(sp)
   15f48:	d8800615 	stw	r2,24(sp)
   15f4c:	18eb883a 	add	r21,r3,r3
   15f50:	ad6b883a 	add	r21,r21,r21
   15f54:	10c00504 	addi	r3,r2,20
   15f58:	1d6b883a 	add	r21,r3,r21
   15f5c:	d8c00115 	stw	r3,4(sp)
   15f60:	dd400315 	stw	r21,12(sp)
   15f64:	1805883a 	mov	r2,r3
   15f68:	1d40042e 	bgeu	r3,r21,15f7c <__multiply+0xa8>
   15f6c:	d8c00317 	ldw	r3,12(sp)
   15f70:	10000015 	stw	zero,0(r2)
   15f74:	10800104 	addi	r2,r2,4
   15f78:	10fffc36 	bltu	r2,r3,15f6c <__alt_data_end+0xfc015f6c>
   15f7c:	8c63883a 	add	r17,r17,r17
   15f80:	b5800504 	addi	r22,r22,20
   15f84:	8c63883a 	add	r17,r17,r17
   15f88:	94800504 	addi	r18,r18,20
   15f8c:	8421883a 	add	r16,r16,r16
   15f90:	b463883a 	add	r17,r22,r17
   15f94:	8421883a 	add	r16,r16,r16
   15f98:	dd800015 	stw	r22,0(sp)
   15f9c:	dc800415 	stw	r18,16(sp)
   15fa0:	dc400515 	stw	r17,20(sp)
   15fa4:	9429883a 	add	r20,r18,r16
   15fa8:	b4404f2e 	bgeu	r22,r17,160e8 <__multiply+0x214>
   15fac:	d8c00017 	ldw	r3,0(sp)
   15fb0:	1c800017 	ldw	r18,0(r3)
   15fb4:	947fffcc 	andi	r17,r18,65535
   15fb8:	88001e26 	beq	r17,zero,16034 <__multiply+0x160>
   15fbc:	dd800117 	ldw	r22,4(sp)
   15fc0:	dd400417 	ldw	r21,16(sp)
   15fc4:	0027883a 	mov	r19,zero
   15fc8:	ac800017 	ldw	r18,0(r21)
   15fcc:	b4000017 	ldw	r16,0(r22)
   15fd0:	880b883a 	mov	r5,r17
   15fd4:	913fffcc 	andi	r4,r18,65535
   15fd8:	000ccf40 	call	ccf4 <__mulsi3>
   15fdc:	9008d43a 	srli	r4,r18,16
   15fe0:	84bfffcc 	andi	r18,r16,65535
   15fe4:	1485883a 	add	r2,r2,r18
   15fe8:	14e5883a 	add	r18,r2,r19
   15fec:	8020d43a 	srli	r16,r16,16
   15ff0:	9026d43a 	srli	r19,r18,16
   15ff4:	880b883a 	mov	r5,r17
   15ff8:	000ccf40 	call	ccf4 <__mulsi3>
   15ffc:	1405883a 	add	r2,r2,r16
   16000:	14e1883a 	add	r16,r2,r19
   16004:	90ffffcc 	andi	r3,r18,65535
   16008:	8024943a 	slli	r18,r16,16
   1600c:	ad400104 	addi	r21,r21,4
   16010:	b005883a 	mov	r2,r22
   16014:	90c6b03a 	or	r3,r18,r3
   16018:	b0c00015 	stw	r3,0(r22)
   1601c:	8026d43a 	srli	r19,r16,16
   16020:	b5800104 	addi	r22,r22,4
   16024:	ad3fe836 	bltu	r21,r20,15fc8 <__alt_data_end+0xfc015fc8>
   16028:	d8c00017 	ldw	r3,0(sp)
   1602c:	14c00115 	stw	r19,4(r2)
   16030:	1c800017 	ldw	r18,0(r3)
   16034:	9024d43a 	srli	r18,r18,16
   16038:	90002226 	beq	r18,zero,160c4 <__multiply+0x1f0>
   1603c:	d8c00117 	ldw	r3,4(sp)
   16040:	dd800417 	ldw	r22,16(sp)
   16044:	002f883a 	mov	r23,zero
   16048:	1f000017 	ldw	fp,0(r3)
   1604c:	1823883a 	mov	r17,r3
   16050:	182b883a 	mov	r21,r3
   16054:	e021883a 	mov	r16,fp
   16058:	00000106 	br	16060 <__multiply+0x18c>
   1605c:	982b883a 	mov	r21,r19
   16060:	b100000b 	ldhu	r4,0(r22)
   16064:	8020d43a 	srli	r16,r16,16
   16068:	900b883a 	mov	r5,r18
   1606c:	000ccf40 	call	ccf4 <__mulsi3>
   16070:	1405883a 	add	r2,r2,r16
   16074:	15ef883a 	add	r23,r2,r23
   16078:	b804943a 	slli	r2,r23,16
   1607c:	e0ffffcc 	andi	r3,fp,65535
   16080:	8c400104 	addi	r17,r17,4
   16084:	10c6b03a 	or	r3,r2,r3
   16088:	88ffff15 	stw	r3,-4(r17)
   1608c:	b5800104 	addi	r22,r22,4
   16090:	b13fff17 	ldw	r4,-4(r22)
   16094:	acc00104 	addi	r19,r21,4
   16098:	900b883a 	mov	r5,r18
   1609c:	2008d43a 	srli	r4,r4,16
   160a0:	9c000017 	ldw	r16,0(r19)
   160a4:	000ccf40 	call	ccf4 <__mulsi3>
   160a8:	b806d43a 	srli	r3,r23,16
   160ac:	813fffcc 	andi	r4,r16,65535
   160b0:	1105883a 	add	r2,r2,r4
   160b4:	10f9883a 	add	fp,r2,r3
   160b8:	e02ed43a 	srli	r23,fp,16
   160bc:	b53fe736 	bltu	r22,r20,1605c <__alt_data_end+0xfc01605c>
   160c0:	af000115 	stw	fp,4(r21)
   160c4:	d8c00017 	ldw	r3,0(sp)
   160c8:	d9000517 	ldw	r4,20(sp)
   160cc:	18c00104 	addi	r3,r3,4
   160d0:	d8c00015 	stw	r3,0(sp)
   160d4:	d8c00117 	ldw	r3,4(sp)
   160d8:	18c00104 	addi	r3,r3,4
   160dc:	d8c00115 	stw	r3,4(sp)
   160e0:	d8c00017 	ldw	r3,0(sp)
   160e4:	193fb136 	bltu	r3,r4,15fac <__alt_data_end+0xfc015fac>
   160e8:	d8c00217 	ldw	r3,8(sp)
   160ec:	00c00c0e 	bge	zero,r3,16120 <__multiply+0x24c>
   160f0:	d8c00317 	ldw	r3,12(sp)
   160f4:	18bfff17 	ldw	r2,-4(r3)
   160f8:	1d7fff04 	addi	r21,r3,-4
   160fc:	10000326 	beq	r2,zero,1610c <__multiply+0x238>
   16100:	00000706 	br	16120 <__multiply+0x24c>
   16104:	a8800017 	ldw	r2,0(r21)
   16108:	1000051e 	bne	r2,zero,16120 <__multiply+0x24c>
   1610c:	d8c00217 	ldw	r3,8(sp)
   16110:	ad7fff04 	addi	r21,r21,-4
   16114:	18ffffc4 	addi	r3,r3,-1
   16118:	d8c00215 	stw	r3,8(sp)
   1611c:	183ff91e 	bne	r3,zero,16104 <__alt_data_end+0xfc016104>
   16120:	d8c00617 	ldw	r3,24(sp)
   16124:	d9000217 	ldw	r4,8(sp)
   16128:	1805883a 	mov	r2,r3
   1612c:	19000415 	stw	r4,16(r3)
   16130:	dfc01017 	ldw	ra,64(sp)
   16134:	df000f17 	ldw	fp,60(sp)
   16138:	ddc00e17 	ldw	r23,56(sp)
   1613c:	dd800d17 	ldw	r22,52(sp)
   16140:	dd400c17 	ldw	r21,48(sp)
   16144:	dd000b17 	ldw	r20,44(sp)
   16148:	dcc00a17 	ldw	r19,40(sp)
   1614c:	dc800917 	ldw	r18,36(sp)
   16150:	dc400817 	ldw	r17,32(sp)
   16154:	dc000717 	ldw	r16,28(sp)
   16158:	dec01104 	addi	sp,sp,68
   1615c:	f800283a 	ret

00016160 <__pow5mult>:
   16160:	defffa04 	addi	sp,sp,-24
   16164:	dcc00315 	stw	r19,12(sp)
   16168:	dc000015 	stw	r16,0(sp)
   1616c:	dfc00515 	stw	ra,20(sp)
   16170:	dd000415 	stw	r20,16(sp)
   16174:	dc800215 	stw	r18,8(sp)
   16178:	dc400115 	stw	r17,4(sp)
   1617c:	308000cc 	andi	r2,r6,3
   16180:	3021883a 	mov	r16,r6
   16184:	2027883a 	mov	r19,r4
   16188:	10002f1e 	bne	r2,zero,16248 <__pow5mult+0xe8>
   1618c:	2825883a 	mov	r18,r5
   16190:	8021d0ba 	srai	r16,r16,2
   16194:	80001a26 	beq	r16,zero,16200 <__pow5mult+0xa0>
   16198:	9c401217 	ldw	r17,72(r19)
   1619c:	8800061e 	bne	r17,zero,161b8 <__pow5mult+0x58>
   161a0:	00003406 	br	16274 <__pow5mult+0x114>
   161a4:	8021d07a 	srai	r16,r16,1
   161a8:	80001526 	beq	r16,zero,16200 <__pow5mult+0xa0>
   161ac:	88800017 	ldw	r2,0(r17)
   161b0:	10001c26 	beq	r2,zero,16224 <__pow5mult+0xc4>
   161b4:	1023883a 	mov	r17,r2
   161b8:	8080004c 	andi	r2,r16,1
   161bc:	103ff926 	beq	r2,zero,161a4 <__alt_data_end+0xfc0161a4>
   161c0:	880d883a 	mov	r6,r17
   161c4:	900b883a 	mov	r5,r18
   161c8:	9809883a 	mov	r4,r19
   161cc:	0015ed40 	call	15ed4 <__multiply>
   161d0:	90001b26 	beq	r18,zero,16240 <__pow5mult+0xe0>
   161d4:	91000117 	ldw	r4,4(r18)
   161d8:	98c01317 	ldw	r3,76(r19)
   161dc:	8021d07a 	srai	r16,r16,1
   161e0:	2109883a 	add	r4,r4,r4
   161e4:	2109883a 	add	r4,r4,r4
   161e8:	1907883a 	add	r3,r3,r4
   161ec:	19000017 	ldw	r4,0(r3)
   161f0:	91000015 	stw	r4,0(r18)
   161f4:	1c800015 	stw	r18,0(r3)
   161f8:	1025883a 	mov	r18,r2
   161fc:	803feb1e 	bne	r16,zero,161ac <__alt_data_end+0xfc0161ac>
   16200:	9005883a 	mov	r2,r18
   16204:	dfc00517 	ldw	ra,20(sp)
   16208:	dd000417 	ldw	r20,16(sp)
   1620c:	dcc00317 	ldw	r19,12(sp)
   16210:	dc800217 	ldw	r18,8(sp)
   16214:	dc400117 	ldw	r17,4(sp)
   16218:	dc000017 	ldw	r16,0(sp)
   1621c:	dec00604 	addi	sp,sp,24
   16220:	f800283a 	ret
   16224:	880d883a 	mov	r6,r17
   16228:	880b883a 	mov	r5,r17
   1622c:	9809883a 	mov	r4,r19
   16230:	0015ed40 	call	15ed4 <__multiply>
   16234:	88800015 	stw	r2,0(r17)
   16238:	10000015 	stw	zero,0(r2)
   1623c:	003fdd06 	br	161b4 <__alt_data_end+0xfc0161b4>
   16240:	1025883a 	mov	r18,r2
   16244:	003fd706 	br	161a4 <__alt_data_end+0xfc0161a4>
   16248:	10bfffc4 	addi	r2,r2,-1
   1624c:	1085883a 	add	r2,r2,r2
   16250:	00c000f4 	movhi	r3,3
   16254:	18e59704 	addi	r3,r3,-27044
   16258:	1085883a 	add	r2,r2,r2
   1625c:	1885883a 	add	r2,r3,r2
   16260:	11800017 	ldw	r6,0(r2)
   16264:	000f883a 	mov	r7,zero
   16268:	0015b340 	call	15b34 <__multadd>
   1626c:	1025883a 	mov	r18,r2
   16270:	003fc706 	br	16190 <__alt_data_end+0xfc016190>
   16274:	05000044 	movi	r20,1
   16278:	a00b883a 	mov	r5,r20
   1627c:	9809883a 	mov	r4,r19
   16280:	0015a640 	call	15a64 <_Balloc>
   16284:	1023883a 	mov	r17,r2
   16288:	00809c44 	movi	r2,625
   1628c:	88800515 	stw	r2,20(r17)
   16290:	8d000415 	stw	r20,16(r17)
   16294:	9c401215 	stw	r17,72(r19)
   16298:	88000015 	stw	zero,0(r17)
   1629c:	003fc606 	br	161b8 <__alt_data_end+0xfc0161b8>

000162a0 <__lshift>:
   162a0:	defff904 	addi	sp,sp,-28
   162a4:	dd400515 	stw	r21,20(sp)
   162a8:	dcc00315 	stw	r19,12(sp)
   162ac:	302bd17a 	srai	r21,r6,5
   162b0:	2cc00417 	ldw	r19,16(r5)
   162b4:	28800217 	ldw	r2,8(r5)
   162b8:	dd000415 	stw	r20,16(sp)
   162bc:	ace7883a 	add	r19,r21,r19
   162c0:	dc800215 	stw	r18,8(sp)
   162c4:	dc400115 	stw	r17,4(sp)
   162c8:	dc000015 	stw	r16,0(sp)
   162cc:	dfc00615 	stw	ra,24(sp)
   162d0:	9c000044 	addi	r16,r19,1
   162d4:	2823883a 	mov	r17,r5
   162d8:	3029883a 	mov	r20,r6
   162dc:	2025883a 	mov	r18,r4
   162e0:	29400117 	ldw	r5,4(r5)
   162e4:	1400030e 	bge	r2,r16,162f4 <__lshift+0x54>
   162e8:	1085883a 	add	r2,r2,r2
   162ec:	29400044 	addi	r5,r5,1
   162f0:	143ffd16 	blt	r2,r16,162e8 <__alt_data_end+0xfc0162e8>
   162f4:	9009883a 	mov	r4,r18
   162f8:	0015a640 	call	15a64 <_Balloc>
   162fc:	10c00504 	addi	r3,r2,20
   16300:	0540070e 	bge	zero,r21,16320 <__lshift+0x80>
   16304:	ad6b883a 	add	r21,r21,r21
   16308:	ad6b883a 	add	r21,r21,r21
   1630c:	1809883a 	mov	r4,r3
   16310:	1d47883a 	add	r3,r3,r21
   16314:	20000015 	stw	zero,0(r4)
   16318:	21000104 	addi	r4,r4,4
   1631c:	193ffd1e 	bne	r3,r4,16314 <__alt_data_end+0xfc016314>
   16320:	8a000417 	ldw	r8,16(r17)
   16324:	89000504 	addi	r4,r17,20
   16328:	a18007cc 	andi	r6,r20,31
   1632c:	4211883a 	add	r8,r8,r8
   16330:	4211883a 	add	r8,r8,r8
   16334:	2211883a 	add	r8,r4,r8
   16338:	30002326 	beq	r6,zero,163c8 <__lshift+0x128>
   1633c:	02400804 	movi	r9,32
   16340:	4993c83a 	sub	r9,r9,r6
   16344:	000b883a 	mov	r5,zero
   16348:	21c00017 	ldw	r7,0(r4)
   1634c:	1815883a 	mov	r10,r3
   16350:	18c00104 	addi	r3,r3,4
   16354:	398e983a 	sll	r7,r7,r6
   16358:	21000104 	addi	r4,r4,4
   1635c:	394ab03a 	or	r5,r7,r5
   16360:	197fff15 	stw	r5,-4(r3)
   16364:	217fff17 	ldw	r5,-4(r4)
   16368:	2a4ad83a 	srl	r5,r5,r9
   1636c:	223ff636 	bltu	r4,r8,16348 <__alt_data_end+0xfc016348>
   16370:	51400115 	stw	r5,4(r10)
   16374:	28001a1e 	bne	r5,zero,163e0 <__lshift+0x140>
   16378:	843fffc4 	addi	r16,r16,-1
   1637c:	14000415 	stw	r16,16(r2)
   16380:	88000826 	beq	r17,zero,163a4 <__lshift+0x104>
   16384:	89000117 	ldw	r4,4(r17)
   16388:	90c01317 	ldw	r3,76(r18)
   1638c:	2109883a 	add	r4,r4,r4
   16390:	2109883a 	add	r4,r4,r4
   16394:	1907883a 	add	r3,r3,r4
   16398:	19000017 	ldw	r4,0(r3)
   1639c:	89000015 	stw	r4,0(r17)
   163a0:	1c400015 	stw	r17,0(r3)
   163a4:	dfc00617 	ldw	ra,24(sp)
   163a8:	dd400517 	ldw	r21,20(sp)
   163ac:	dd000417 	ldw	r20,16(sp)
   163b0:	dcc00317 	ldw	r19,12(sp)
   163b4:	dc800217 	ldw	r18,8(sp)
   163b8:	dc400117 	ldw	r17,4(sp)
   163bc:	dc000017 	ldw	r16,0(sp)
   163c0:	dec00704 	addi	sp,sp,28
   163c4:	f800283a 	ret
   163c8:	21400017 	ldw	r5,0(r4)
   163cc:	18c00104 	addi	r3,r3,4
   163d0:	21000104 	addi	r4,r4,4
   163d4:	197fff15 	stw	r5,-4(r3)
   163d8:	223ffb36 	bltu	r4,r8,163c8 <__alt_data_end+0xfc0163c8>
   163dc:	003fe606 	br	16378 <__alt_data_end+0xfc016378>
   163e0:	9c000084 	addi	r16,r19,2
   163e4:	003fe406 	br	16378 <__alt_data_end+0xfc016378>

000163e8 <__mcmp>:
   163e8:	20800417 	ldw	r2,16(r4)
   163ec:	28c00417 	ldw	r3,16(r5)
   163f0:	10c5c83a 	sub	r2,r2,r3
   163f4:	1000111e 	bne	r2,zero,1643c <__mcmp+0x54>
   163f8:	18c7883a 	add	r3,r3,r3
   163fc:	18c7883a 	add	r3,r3,r3
   16400:	21000504 	addi	r4,r4,20
   16404:	29400504 	addi	r5,r5,20
   16408:	20c5883a 	add	r2,r4,r3
   1640c:	28cb883a 	add	r5,r5,r3
   16410:	00000106 	br	16418 <__mcmp+0x30>
   16414:	20800a2e 	bgeu	r4,r2,16440 <__mcmp+0x58>
   16418:	10bfff04 	addi	r2,r2,-4
   1641c:	297fff04 	addi	r5,r5,-4
   16420:	11800017 	ldw	r6,0(r2)
   16424:	28c00017 	ldw	r3,0(r5)
   16428:	30fffa26 	beq	r6,r3,16414 <__alt_data_end+0xfc016414>
   1642c:	30c00236 	bltu	r6,r3,16438 <__mcmp+0x50>
   16430:	00800044 	movi	r2,1
   16434:	f800283a 	ret
   16438:	00bfffc4 	movi	r2,-1
   1643c:	f800283a 	ret
   16440:	0005883a 	mov	r2,zero
   16444:	f800283a 	ret

00016448 <__mdiff>:
   16448:	28c00417 	ldw	r3,16(r5)
   1644c:	30800417 	ldw	r2,16(r6)
   16450:	defffa04 	addi	sp,sp,-24
   16454:	dcc00315 	stw	r19,12(sp)
   16458:	dc800215 	stw	r18,8(sp)
   1645c:	dfc00515 	stw	ra,20(sp)
   16460:	dd000415 	stw	r20,16(sp)
   16464:	dc400115 	stw	r17,4(sp)
   16468:	dc000015 	stw	r16,0(sp)
   1646c:	1887c83a 	sub	r3,r3,r2
   16470:	2825883a 	mov	r18,r5
   16474:	3027883a 	mov	r19,r6
   16478:	1800141e 	bne	r3,zero,164cc <__mdiff+0x84>
   1647c:	1085883a 	add	r2,r2,r2
   16480:	1085883a 	add	r2,r2,r2
   16484:	2a000504 	addi	r8,r5,20
   16488:	34000504 	addi	r16,r6,20
   1648c:	4087883a 	add	r3,r8,r2
   16490:	8085883a 	add	r2,r16,r2
   16494:	00000106 	br	1649c <__mdiff+0x54>
   16498:	40c0592e 	bgeu	r8,r3,16600 <__mdiff+0x1b8>
   1649c:	18ffff04 	addi	r3,r3,-4
   164a0:	10bfff04 	addi	r2,r2,-4
   164a4:	19c00017 	ldw	r7,0(r3)
   164a8:	11400017 	ldw	r5,0(r2)
   164ac:	397ffa26 	beq	r7,r5,16498 <__alt_data_end+0xfc016498>
   164b0:	3940592e 	bgeu	r7,r5,16618 <__mdiff+0x1d0>
   164b4:	9005883a 	mov	r2,r18
   164b8:	4023883a 	mov	r17,r8
   164bc:	9825883a 	mov	r18,r19
   164c0:	05000044 	movi	r20,1
   164c4:	1027883a 	mov	r19,r2
   164c8:	00000406 	br	164dc <__mdiff+0x94>
   164cc:	18005616 	blt	r3,zero,16628 <__mdiff+0x1e0>
   164d0:	34400504 	addi	r17,r6,20
   164d4:	2c000504 	addi	r16,r5,20
   164d8:	0029883a 	mov	r20,zero
   164dc:	91400117 	ldw	r5,4(r18)
   164e0:	0015a640 	call	15a64 <_Balloc>
   164e4:	92400417 	ldw	r9,16(r18)
   164e8:	9b000417 	ldw	r12,16(r19)
   164ec:	12c00504 	addi	r11,r2,20
   164f0:	4a51883a 	add	r8,r9,r9
   164f4:	6319883a 	add	r12,r12,r12
   164f8:	4211883a 	add	r8,r8,r8
   164fc:	6319883a 	add	r12,r12,r12
   16500:	15000315 	stw	r20,12(r2)
   16504:	8211883a 	add	r8,r16,r8
   16508:	8b19883a 	add	r12,r17,r12
   1650c:	0007883a 	mov	r3,zero
   16510:	81400017 	ldw	r5,0(r16)
   16514:	89c00017 	ldw	r7,0(r17)
   16518:	59800104 	addi	r6,r11,4
   1651c:	293fffcc 	andi	r4,r5,65535
   16520:	20c7883a 	add	r3,r4,r3
   16524:	393fffcc 	andi	r4,r7,65535
   16528:	1909c83a 	sub	r4,r3,r4
   1652c:	280ad43a 	srli	r5,r5,16
   16530:	380ed43a 	srli	r7,r7,16
   16534:	2007d43a 	srai	r3,r4,16
   16538:	213fffcc 	andi	r4,r4,65535
   1653c:	29cbc83a 	sub	r5,r5,r7
   16540:	28c7883a 	add	r3,r5,r3
   16544:	180a943a 	slli	r5,r3,16
   16548:	8c400104 	addi	r17,r17,4
   1654c:	84000104 	addi	r16,r16,4
   16550:	2908b03a 	or	r4,r5,r4
   16554:	59000015 	stw	r4,0(r11)
   16558:	1807d43a 	srai	r3,r3,16
   1655c:	3015883a 	mov	r10,r6
   16560:	3017883a 	mov	r11,r6
   16564:	8b3fea36 	bltu	r17,r12,16510 <__alt_data_end+0xfc016510>
   16568:	8200162e 	bgeu	r16,r8,165c4 <__mdiff+0x17c>
   1656c:	8017883a 	mov	r11,r16
   16570:	59400017 	ldw	r5,0(r11)
   16574:	31800104 	addi	r6,r6,4
   16578:	5ac00104 	addi	r11,r11,4
   1657c:	293fffcc 	andi	r4,r5,65535
   16580:	20c7883a 	add	r3,r4,r3
   16584:	280ed43a 	srli	r7,r5,16
   16588:	180bd43a 	srai	r5,r3,16
   1658c:	193fffcc 	andi	r4,r3,65535
   16590:	3947883a 	add	r3,r7,r5
   16594:	180a943a 	slli	r5,r3,16
   16598:	1807d43a 	srai	r3,r3,16
   1659c:	2908b03a 	or	r4,r5,r4
   165a0:	313fff15 	stw	r4,-4(r6)
   165a4:	5a3ff236 	bltu	r11,r8,16570 <__alt_data_end+0xfc016570>
   165a8:	0406303a 	nor	r3,zero,r16
   165ac:	1a07883a 	add	r3,r3,r8
   165b0:	1806d0ba 	srli	r3,r3,2
   165b4:	18c00044 	addi	r3,r3,1
   165b8:	18c7883a 	add	r3,r3,r3
   165bc:	18c7883a 	add	r3,r3,r3
   165c0:	50d5883a 	add	r10,r10,r3
   165c4:	50ffff04 	addi	r3,r10,-4
   165c8:	2000041e 	bne	r4,zero,165dc <__mdiff+0x194>
   165cc:	18ffff04 	addi	r3,r3,-4
   165d0:	19000017 	ldw	r4,0(r3)
   165d4:	4a7fffc4 	addi	r9,r9,-1
   165d8:	203ffc26 	beq	r4,zero,165cc <__alt_data_end+0xfc0165cc>
   165dc:	12400415 	stw	r9,16(r2)
   165e0:	dfc00517 	ldw	ra,20(sp)
   165e4:	dd000417 	ldw	r20,16(sp)
   165e8:	dcc00317 	ldw	r19,12(sp)
   165ec:	dc800217 	ldw	r18,8(sp)
   165f0:	dc400117 	ldw	r17,4(sp)
   165f4:	dc000017 	ldw	r16,0(sp)
   165f8:	dec00604 	addi	sp,sp,24
   165fc:	f800283a 	ret
   16600:	000b883a 	mov	r5,zero
   16604:	0015a640 	call	15a64 <_Balloc>
   16608:	00c00044 	movi	r3,1
   1660c:	10c00415 	stw	r3,16(r2)
   16610:	10000515 	stw	zero,20(r2)
   16614:	003ff206 	br	165e0 <__alt_data_end+0xfc0165e0>
   16618:	8023883a 	mov	r17,r16
   1661c:	0029883a 	mov	r20,zero
   16620:	4021883a 	mov	r16,r8
   16624:	003fad06 	br	164dc <__alt_data_end+0xfc0164dc>
   16628:	9005883a 	mov	r2,r18
   1662c:	94400504 	addi	r17,r18,20
   16630:	9c000504 	addi	r16,r19,20
   16634:	9825883a 	mov	r18,r19
   16638:	05000044 	movi	r20,1
   1663c:	1027883a 	mov	r19,r2
   16640:	003fa606 	br	164dc <__alt_data_end+0xfc0164dc>

00016644 <__ulp>:
   16644:	295ffc2c 	andhi	r5,r5,32752
   16648:	00bf3034 	movhi	r2,64704
   1664c:	2887883a 	add	r3,r5,r2
   16650:	00c0020e 	bge	zero,r3,1665c <__ulp+0x18>
   16654:	0005883a 	mov	r2,zero
   16658:	f800283a 	ret
   1665c:	00c7c83a 	sub	r3,zero,r3
   16660:	1807d53a 	srai	r3,r3,20
   16664:	008004c4 	movi	r2,19
   16668:	10c00b0e 	bge	r2,r3,16698 <__ulp+0x54>
   1666c:	18bffb04 	addi	r2,r3,-20
   16670:	01000784 	movi	r4,30
   16674:	0007883a 	mov	r3,zero
   16678:	20800516 	blt	r4,r2,16690 <__ulp+0x4c>
   1667c:	010007c4 	movi	r4,31
   16680:	2089c83a 	sub	r4,r4,r2
   16684:	00800044 	movi	r2,1
   16688:	1104983a 	sll	r2,r2,r4
   1668c:	f800283a 	ret
   16690:	00800044 	movi	r2,1
   16694:	f800283a 	ret
   16698:	01400234 	movhi	r5,8
   1669c:	28c7d83a 	sra	r3,r5,r3
   166a0:	0005883a 	mov	r2,zero
   166a4:	f800283a 	ret

000166a8 <__b2d>:
   166a8:	defffa04 	addi	sp,sp,-24
   166ac:	dc000015 	stw	r16,0(sp)
   166b0:	24000417 	ldw	r16,16(r4)
   166b4:	dc400115 	stw	r17,4(sp)
   166b8:	24400504 	addi	r17,r4,20
   166bc:	8421883a 	add	r16,r16,r16
   166c0:	8421883a 	add	r16,r16,r16
   166c4:	8c21883a 	add	r16,r17,r16
   166c8:	dc800215 	stw	r18,8(sp)
   166cc:	84bfff17 	ldw	r18,-4(r16)
   166d0:	dd000415 	stw	r20,16(sp)
   166d4:	dcc00315 	stw	r19,12(sp)
   166d8:	9009883a 	mov	r4,r18
   166dc:	2829883a 	mov	r20,r5
   166e0:	dfc00515 	stw	ra,20(sp)
   166e4:	0015d800 	call	15d80 <__hi0bits>
   166e8:	00c00804 	movi	r3,32
   166ec:	1889c83a 	sub	r4,r3,r2
   166f0:	a1000015 	stw	r4,0(r20)
   166f4:	01000284 	movi	r4,10
   166f8:	84ffff04 	addi	r19,r16,-4
   166fc:	20801216 	blt	r4,r2,16748 <__b2d+0xa0>
   16700:	018002c4 	movi	r6,11
   16704:	308dc83a 	sub	r6,r6,r2
   16708:	9186d83a 	srl	r3,r18,r6
   1670c:	18cffc34 	orhi	r3,r3,16368
   16710:	8cc0212e 	bgeu	r17,r19,16798 <__b2d+0xf0>
   16714:	813ffe17 	ldw	r4,-8(r16)
   16718:	218cd83a 	srl	r6,r4,r6
   1671c:	10800544 	addi	r2,r2,21
   16720:	9084983a 	sll	r2,r18,r2
   16724:	1184b03a 	or	r2,r2,r6
   16728:	dfc00517 	ldw	ra,20(sp)
   1672c:	dd000417 	ldw	r20,16(sp)
   16730:	dcc00317 	ldw	r19,12(sp)
   16734:	dc800217 	ldw	r18,8(sp)
   16738:	dc400117 	ldw	r17,4(sp)
   1673c:	dc000017 	ldw	r16,0(sp)
   16740:	dec00604 	addi	sp,sp,24
   16744:	f800283a 	ret
   16748:	8cc00f2e 	bgeu	r17,r19,16788 <__b2d+0xe0>
   1674c:	117ffd44 	addi	r5,r2,-11
   16750:	80bffe17 	ldw	r2,-8(r16)
   16754:	28000e26 	beq	r5,zero,16790 <__b2d+0xe8>
   16758:	1949c83a 	sub	r4,r3,r5
   1675c:	9164983a 	sll	r18,r18,r5
   16760:	1106d83a 	srl	r3,r2,r4
   16764:	81bffe04 	addi	r6,r16,-8
   16768:	948ffc34 	orhi	r18,r18,16368
   1676c:	90c6b03a 	or	r3,r18,r3
   16770:	89800e2e 	bgeu	r17,r6,167ac <__b2d+0x104>
   16774:	81bffd17 	ldw	r6,-12(r16)
   16778:	1144983a 	sll	r2,r2,r5
   1677c:	310ad83a 	srl	r5,r6,r4
   16780:	2884b03a 	or	r2,r5,r2
   16784:	003fe806 	br	16728 <__alt_data_end+0xfc016728>
   16788:	10bffd44 	addi	r2,r2,-11
   1678c:	1000041e 	bne	r2,zero,167a0 <__b2d+0xf8>
   16790:	90cffc34 	orhi	r3,r18,16368
   16794:	003fe406 	br	16728 <__alt_data_end+0xfc016728>
   16798:	000d883a 	mov	r6,zero
   1679c:	003fdf06 	br	1671c <__alt_data_end+0xfc01671c>
   167a0:	90a4983a 	sll	r18,r18,r2
   167a4:	0005883a 	mov	r2,zero
   167a8:	003ff906 	br	16790 <__alt_data_end+0xfc016790>
   167ac:	1144983a 	sll	r2,r2,r5
   167b0:	003fdd06 	br	16728 <__alt_data_end+0xfc016728>

000167b4 <__d2b>:
   167b4:	defff804 	addi	sp,sp,-32
   167b8:	dc000215 	stw	r16,8(sp)
   167bc:	3021883a 	mov	r16,r6
   167c0:	dc400315 	stw	r17,12(sp)
   167c4:	8022907a 	slli	r17,r16,1
   167c8:	dd000615 	stw	r20,24(sp)
   167cc:	2829883a 	mov	r20,r5
   167d0:	01400044 	movi	r5,1
   167d4:	dcc00515 	stw	r19,20(sp)
   167d8:	dc800415 	stw	r18,16(sp)
   167dc:	dfc00715 	stw	ra,28(sp)
   167e0:	3825883a 	mov	r18,r7
   167e4:	8822d57a 	srli	r17,r17,21
   167e8:	0015a640 	call	15a64 <_Balloc>
   167ec:	1027883a 	mov	r19,r2
   167f0:	00800434 	movhi	r2,16
   167f4:	10bfffc4 	addi	r2,r2,-1
   167f8:	808c703a 	and	r6,r16,r2
   167fc:	88000126 	beq	r17,zero,16804 <__d2b+0x50>
   16800:	31800434 	orhi	r6,r6,16
   16804:	d9800015 	stw	r6,0(sp)
   16808:	a0002426 	beq	r20,zero,1689c <__d2b+0xe8>
   1680c:	d9000104 	addi	r4,sp,4
   16810:	dd000115 	stw	r20,4(sp)
   16814:	0015de80 	call	15de8 <__lo0bits>
   16818:	d8c00017 	ldw	r3,0(sp)
   1681c:	10002f1e 	bne	r2,zero,168dc <__d2b+0x128>
   16820:	d9000117 	ldw	r4,4(sp)
   16824:	99000515 	stw	r4,20(r19)
   16828:	1821003a 	cmpeq	r16,r3,zero
   1682c:	01000084 	movi	r4,2
   16830:	2421c83a 	sub	r16,r4,r16
   16834:	98c00615 	stw	r3,24(r19)
   16838:	9c000415 	stw	r16,16(r19)
   1683c:	88001f1e 	bne	r17,zero,168bc <__d2b+0x108>
   16840:	10bef384 	addi	r2,r2,-1074
   16844:	90800015 	stw	r2,0(r18)
   16848:	00900034 	movhi	r2,16384
   1684c:	10bfffc4 	addi	r2,r2,-1
   16850:	8085883a 	add	r2,r16,r2
   16854:	1085883a 	add	r2,r2,r2
   16858:	1085883a 	add	r2,r2,r2
   1685c:	9885883a 	add	r2,r19,r2
   16860:	11000517 	ldw	r4,20(r2)
   16864:	8020917a 	slli	r16,r16,5
   16868:	0015d800 	call	15d80 <__hi0bits>
   1686c:	d8c00817 	ldw	r3,32(sp)
   16870:	8085c83a 	sub	r2,r16,r2
   16874:	18800015 	stw	r2,0(r3)
   16878:	9805883a 	mov	r2,r19
   1687c:	dfc00717 	ldw	ra,28(sp)
   16880:	dd000617 	ldw	r20,24(sp)
   16884:	dcc00517 	ldw	r19,20(sp)
   16888:	dc800417 	ldw	r18,16(sp)
   1688c:	dc400317 	ldw	r17,12(sp)
   16890:	dc000217 	ldw	r16,8(sp)
   16894:	dec00804 	addi	sp,sp,32
   16898:	f800283a 	ret
   1689c:	d809883a 	mov	r4,sp
   168a0:	0015de80 	call	15de8 <__lo0bits>
   168a4:	d8c00017 	ldw	r3,0(sp)
   168a8:	04000044 	movi	r16,1
   168ac:	9c000415 	stw	r16,16(r19)
   168b0:	98c00515 	stw	r3,20(r19)
   168b4:	10800804 	addi	r2,r2,32
   168b8:	883fe126 	beq	r17,zero,16840 <__alt_data_end+0xfc016840>
   168bc:	00c00d44 	movi	r3,53
   168c0:	8c7ef344 	addi	r17,r17,-1075
   168c4:	88a3883a 	add	r17,r17,r2
   168c8:	1885c83a 	sub	r2,r3,r2
   168cc:	d8c00817 	ldw	r3,32(sp)
   168d0:	94400015 	stw	r17,0(r18)
   168d4:	18800015 	stw	r2,0(r3)
   168d8:	003fe706 	br	16878 <__alt_data_end+0xfc016878>
   168dc:	01000804 	movi	r4,32
   168e0:	2089c83a 	sub	r4,r4,r2
   168e4:	1908983a 	sll	r4,r3,r4
   168e8:	d9400117 	ldw	r5,4(sp)
   168ec:	1886d83a 	srl	r3,r3,r2
   168f0:	2148b03a 	or	r4,r4,r5
   168f4:	99000515 	stw	r4,20(r19)
   168f8:	d8c00015 	stw	r3,0(sp)
   168fc:	003fca06 	br	16828 <__alt_data_end+0xfc016828>

00016900 <__ratio>:
   16900:	defff904 	addi	sp,sp,-28
   16904:	dc400315 	stw	r17,12(sp)
   16908:	2823883a 	mov	r17,r5
   1690c:	d9400104 	addi	r5,sp,4
   16910:	dfc00615 	stw	ra,24(sp)
   16914:	dcc00515 	stw	r19,20(sp)
   16918:	dc800415 	stw	r18,16(sp)
   1691c:	2027883a 	mov	r19,r4
   16920:	dc000215 	stw	r16,8(sp)
   16924:	00166a80 	call	166a8 <__b2d>
   16928:	d80b883a 	mov	r5,sp
   1692c:	8809883a 	mov	r4,r17
   16930:	1025883a 	mov	r18,r2
   16934:	1821883a 	mov	r16,r3
   16938:	00166a80 	call	166a8 <__b2d>
   1693c:	8a000417 	ldw	r8,16(r17)
   16940:	99000417 	ldw	r4,16(r19)
   16944:	d9400117 	ldw	r5,4(sp)
   16948:	2209c83a 	sub	r4,r4,r8
   1694c:	2010917a 	slli	r8,r4,5
   16950:	d9000017 	ldw	r4,0(sp)
   16954:	2909c83a 	sub	r4,r5,r4
   16958:	4109883a 	add	r4,r8,r4
   1695c:	01000e0e 	bge	zero,r4,16998 <__ratio+0x98>
   16960:	2008953a 	slli	r4,r4,20
   16964:	2421883a 	add	r16,r4,r16
   16968:	100d883a 	mov	r6,r2
   1696c:	180f883a 	mov	r7,r3
   16970:	9009883a 	mov	r4,r18
   16974:	800b883a 	mov	r5,r16
   16978:	001bdb80 	call	1bdb8 <__divdf3>
   1697c:	dfc00617 	ldw	ra,24(sp)
   16980:	dcc00517 	ldw	r19,20(sp)
   16984:	dc800417 	ldw	r18,16(sp)
   16988:	dc400317 	ldw	r17,12(sp)
   1698c:	dc000217 	ldw	r16,8(sp)
   16990:	dec00704 	addi	sp,sp,28
   16994:	f800283a 	ret
   16998:	2008953a 	slli	r4,r4,20
   1699c:	1907c83a 	sub	r3,r3,r4
   169a0:	003ff106 	br	16968 <__alt_data_end+0xfc016968>

000169a4 <_mprec_log10>:
   169a4:	defffe04 	addi	sp,sp,-8
   169a8:	dc000015 	stw	r16,0(sp)
   169ac:	dfc00115 	stw	ra,4(sp)
   169b0:	008005c4 	movi	r2,23
   169b4:	2021883a 	mov	r16,r4
   169b8:	11000d0e 	bge	r2,r4,169f0 <_mprec_log10+0x4c>
   169bc:	0005883a 	mov	r2,zero
   169c0:	00cffc34 	movhi	r3,16368
   169c4:	843fffc4 	addi	r16,r16,-1
   169c8:	000d883a 	mov	r6,zero
   169cc:	01d00934 	movhi	r7,16420
   169d0:	1009883a 	mov	r4,r2
   169d4:	180b883a 	mov	r5,r3
   169d8:	001c9e00 	call	1c9e0 <__muldf3>
   169dc:	803ff91e 	bne	r16,zero,169c4 <__alt_data_end+0xfc0169c4>
   169e0:	dfc00117 	ldw	ra,4(sp)
   169e4:	dc000017 	ldw	r16,0(sp)
   169e8:	dec00204 	addi	sp,sp,8
   169ec:	f800283a 	ret
   169f0:	202090fa 	slli	r16,r4,3
   169f4:	008000f4 	movhi	r2,3
   169f8:	10a5ae04 	addi	r2,r2,-26952
   169fc:	1421883a 	add	r16,r2,r16
   16a00:	80800017 	ldw	r2,0(r16)
   16a04:	80c00117 	ldw	r3,4(r16)
   16a08:	dfc00117 	ldw	ra,4(sp)
   16a0c:	dc000017 	ldw	r16,0(sp)
   16a10:	dec00204 	addi	sp,sp,8
   16a14:	f800283a 	ret

00016a18 <__copybits>:
   16a18:	297fffc4 	addi	r5,r5,-1
   16a1c:	280fd17a 	srai	r7,r5,5
   16a20:	30c00417 	ldw	r3,16(r6)
   16a24:	30800504 	addi	r2,r6,20
   16a28:	39c00044 	addi	r7,r7,1
   16a2c:	18c7883a 	add	r3,r3,r3
   16a30:	39cf883a 	add	r7,r7,r7
   16a34:	18c7883a 	add	r3,r3,r3
   16a38:	39cf883a 	add	r7,r7,r7
   16a3c:	10c7883a 	add	r3,r2,r3
   16a40:	21cf883a 	add	r7,r4,r7
   16a44:	10c00d2e 	bgeu	r2,r3,16a7c <__copybits+0x64>
   16a48:	200b883a 	mov	r5,r4
   16a4c:	12000017 	ldw	r8,0(r2)
   16a50:	29400104 	addi	r5,r5,4
   16a54:	10800104 	addi	r2,r2,4
   16a58:	2a3fff15 	stw	r8,-4(r5)
   16a5c:	10fffb36 	bltu	r2,r3,16a4c <__alt_data_end+0xfc016a4c>
   16a60:	1985c83a 	sub	r2,r3,r6
   16a64:	10bffac4 	addi	r2,r2,-21
   16a68:	1004d0ba 	srli	r2,r2,2
   16a6c:	10800044 	addi	r2,r2,1
   16a70:	1085883a 	add	r2,r2,r2
   16a74:	1085883a 	add	r2,r2,r2
   16a78:	2089883a 	add	r4,r4,r2
   16a7c:	21c0032e 	bgeu	r4,r7,16a8c <__copybits+0x74>
   16a80:	20000015 	stw	zero,0(r4)
   16a84:	21000104 	addi	r4,r4,4
   16a88:	21fffd36 	bltu	r4,r7,16a80 <__alt_data_end+0xfc016a80>
   16a8c:	f800283a 	ret

00016a90 <__any_on>:
   16a90:	20c00417 	ldw	r3,16(r4)
   16a94:	2805d17a 	srai	r2,r5,5
   16a98:	21000504 	addi	r4,r4,20
   16a9c:	18800d0e 	bge	r3,r2,16ad4 <__any_on+0x44>
   16aa0:	18c7883a 	add	r3,r3,r3
   16aa4:	18c7883a 	add	r3,r3,r3
   16aa8:	20c7883a 	add	r3,r4,r3
   16aac:	20c0192e 	bgeu	r4,r3,16b14 <__any_on+0x84>
   16ab0:	18bfff17 	ldw	r2,-4(r3)
   16ab4:	18ffff04 	addi	r3,r3,-4
   16ab8:	1000041e 	bne	r2,zero,16acc <__any_on+0x3c>
   16abc:	20c0142e 	bgeu	r4,r3,16b10 <__any_on+0x80>
   16ac0:	18ffff04 	addi	r3,r3,-4
   16ac4:	19400017 	ldw	r5,0(r3)
   16ac8:	283ffc26 	beq	r5,zero,16abc <__alt_data_end+0xfc016abc>
   16acc:	00800044 	movi	r2,1
   16ad0:	f800283a 	ret
   16ad4:	10c00a0e 	bge	r2,r3,16b00 <__any_on+0x70>
   16ad8:	1085883a 	add	r2,r2,r2
   16adc:	1085883a 	add	r2,r2,r2
   16ae0:	294007cc 	andi	r5,r5,31
   16ae4:	2087883a 	add	r3,r4,r2
   16ae8:	283ff026 	beq	r5,zero,16aac <__alt_data_end+0xfc016aac>
   16aec:	19800017 	ldw	r6,0(r3)
   16af0:	3144d83a 	srl	r2,r6,r5
   16af4:	114a983a 	sll	r5,r2,r5
   16af8:	317ff41e 	bne	r6,r5,16acc <__alt_data_end+0xfc016acc>
   16afc:	003feb06 	br	16aac <__alt_data_end+0xfc016aac>
   16b00:	1085883a 	add	r2,r2,r2
   16b04:	1085883a 	add	r2,r2,r2
   16b08:	2087883a 	add	r3,r4,r2
   16b0c:	003fe706 	br	16aac <__alt_data_end+0xfc016aac>
   16b10:	f800283a 	ret
   16b14:	0005883a 	mov	r2,zero
   16b18:	f800283a 	ret

00016b1c <_putc_r>:
   16b1c:	defffc04 	addi	sp,sp,-16
   16b20:	dc000215 	stw	r16,8(sp)
   16b24:	dfc00315 	stw	ra,12(sp)
   16b28:	2021883a 	mov	r16,r4
   16b2c:	20000226 	beq	r4,zero,16b38 <_putc_r+0x1c>
   16b30:	20800e17 	ldw	r2,56(r4)
   16b34:	10001b26 	beq	r2,zero,16ba4 <_putc_r+0x88>
   16b38:	30800217 	ldw	r2,8(r6)
   16b3c:	10bfffc4 	addi	r2,r2,-1
   16b40:	30800215 	stw	r2,8(r6)
   16b44:	10000a16 	blt	r2,zero,16b70 <_putc_r+0x54>
   16b48:	30800017 	ldw	r2,0(r6)
   16b4c:	11400005 	stb	r5,0(r2)
   16b50:	30800017 	ldw	r2,0(r6)
   16b54:	10c00044 	addi	r3,r2,1
   16b58:	30c00015 	stw	r3,0(r6)
   16b5c:	10800003 	ldbu	r2,0(r2)
   16b60:	dfc00317 	ldw	ra,12(sp)
   16b64:	dc000217 	ldw	r16,8(sp)
   16b68:	dec00404 	addi	sp,sp,16
   16b6c:	f800283a 	ret
   16b70:	30c00617 	ldw	r3,24(r6)
   16b74:	10c00616 	blt	r2,r3,16b90 <_putc_r+0x74>
   16b78:	30800017 	ldw	r2,0(r6)
   16b7c:	00c00284 	movi	r3,10
   16b80:	11400005 	stb	r5,0(r2)
   16b84:	30800017 	ldw	r2,0(r6)
   16b88:	11400003 	ldbu	r5,0(r2)
   16b8c:	28fff11e 	bne	r5,r3,16b54 <__alt_data_end+0xfc016b54>
   16b90:	8009883a 	mov	r4,r16
   16b94:	dfc00317 	ldw	ra,12(sp)
   16b98:	dc000217 	ldw	r16,8(sp)
   16b9c:	dec00404 	addi	sp,sp,16
   16ba0:	001a0001 	jmpi	1a000 <__swbuf_r>
   16ba4:	d9400015 	stw	r5,0(sp)
   16ba8:	d9800115 	stw	r6,4(sp)
   16bac:	0014ab80 	call	14ab8 <__sinit>
   16bb0:	d9800117 	ldw	r6,4(sp)
   16bb4:	d9400017 	ldw	r5,0(sp)
   16bb8:	003fdf06 	br	16b38 <__alt_data_end+0xfc016b38>

00016bbc <putc>:
   16bbc:	008000f4 	movhi	r2,3
   16bc0:	defffc04 	addi	sp,sp,-16
   16bc4:	10b2ae04 	addi	r2,r2,-13640
   16bc8:	dc000115 	stw	r16,4(sp)
   16bcc:	14000017 	ldw	r16,0(r2)
   16bd0:	dc400215 	stw	r17,8(sp)
   16bd4:	dfc00315 	stw	ra,12(sp)
   16bd8:	2023883a 	mov	r17,r4
   16bdc:	80000226 	beq	r16,zero,16be8 <putc+0x2c>
   16be0:	80800e17 	ldw	r2,56(r16)
   16be4:	10001a26 	beq	r2,zero,16c50 <putc+0x94>
   16be8:	28800217 	ldw	r2,8(r5)
   16bec:	10bfffc4 	addi	r2,r2,-1
   16bf0:	28800215 	stw	r2,8(r5)
   16bf4:	10000b16 	blt	r2,zero,16c24 <putc+0x68>
   16bf8:	28800017 	ldw	r2,0(r5)
   16bfc:	14400005 	stb	r17,0(r2)
   16c00:	28800017 	ldw	r2,0(r5)
   16c04:	10c00044 	addi	r3,r2,1
   16c08:	28c00015 	stw	r3,0(r5)
   16c0c:	10800003 	ldbu	r2,0(r2)
   16c10:	dfc00317 	ldw	ra,12(sp)
   16c14:	dc400217 	ldw	r17,8(sp)
   16c18:	dc000117 	ldw	r16,4(sp)
   16c1c:	dec00404 	addi	sp,sp,16
   16c20:	f800283a 	ret
   16c24:	28c00617 	ldw	r3,24(r5)
   16c28:	10c00e16 	blt	r2,r3,16c64 <putc+0xa8>
   16c2c:	28800017 	ldw	r2,0(r5)
   16c30:	01000284 	movi	r4,10
   16c34:	14400005 	stb	r17,0(r2)
   16c38:	28800017 	ldw	r2,0(r5)
   16c3c:	10c00003 	ldbu	r3,0(r2)
   16c40:	193ff01e 	bne	r3,r4,16c04 <__alt_data_end+0xfc016c04>
   16c44:	280d883a 	mov	r6,r5
   16c48:	180b883a 	mov	r5,r3
   16c4c:	00000706 	br	16c6c <putc+0xb0>
   16c50:	8009883a 	mov	r4,r16
   16c54:	d9400015 	stw	r5,0(sp)
   16c58:	0014ab80 	call	14ab8 <__sinit>
   16c5c:	d9400017 	ldw	r5,0(sp)
   16c60:	003fe106 	br	16be8 <__alt_data_end+0xfc016be8>
   16c64:	280d883a 	mov	r6,r5
   16c68:	880b883a 	mov	r5,r17
   16c6c:	8009883a 	mov	r4,r16
   16c70:	dfc00317 	ldw	ra,12(sp)
   16c74:	dc400217 	ldw	r17,8(sp)
   16c78:	dc000117 	ldw	r16,4(sp)
   16c7c:	dec00404 	addi	sp,sp,16
   16c80:	001a0001 	jmpi	1a000 <__swbuf_r>

00016c84 <_realloc_r>:
   16c84:	defff604 	addi	sp,sp,-40
   16c88:	dc800215 	stw	r18,8(sp)
   16c8c:	dfc00915 	stw	ra,36(sp)
   16c90:	df000815 	stw	fp,32(sp)
   16c94:	ddc00715 	stw	r23,28(sp)
   16c98:	dd800615 	stw	r22,24(sp)
   16c9c:	dd400515 	stw	r21,20(sp)
   16ca0:	dd000415 	stw	r20,16(sp)
   16ca4:	dcc00315 	stw	r19,12(sp)
   16ca8:	dc400115 	stw	r17,4(sp)
   16cac:	dc000015 	stw	r16,0(sp)
   16cb0:	3025883a 	mov	r18,r6
   16cb4:	2800b726 	beq	r5,zero,16f94 <_realloc_r+0x310>
   16cb8:	282b883a 	mov	r21,r5
   16cbc:	2029883a 	mov	r20,r4
   16cc0:	001e50c0 	call	1e50c <__malloc_lock>
   16cc4:	a8bfff17 	ldw	r2,-4(r21)
   16cc8:	043fff04 	movi	r16,-4
   16ccc:	90c002c4 	addi	r3,r18,11
   16cd0:	01000584 	movi	r4,22
   16cd4:	acfffe04 	addi	r19,r21,-8
   16cd8:	1420703a 	and	r16,r2,r16
   16cdc:	20c0332e 	bgeu	r4,r3,16dac <_realloc_r+0x128>
   16ce0:	047ffe04 	movi	r17,-8
   16ce4:	1c62703a 	and	r17,r3,r17
   16ce8:	8807883a 	mov	r3,r17
   16cec:	88005816 	blt	r17,zero,16e50 <_realloc_r+0x1cc>
   16cf0:	8c805736 	bltu	r17,r18,16e50 <_realloc_r+0x1cc>
   16cf4:	80c0300e 	bge	r16,r3,16db8 <_realloc_r+0x134>
   16cf8:	070000f4 	movhi	fp,3
   16cfc:	e7275104 	addi	fp,fp,-25276
   16d00:	e1c00217 	ldw	r7,8(fp)
   16d04:	9c09883a 	add	r4,r19,r16
   16d08:	22000117 	ldw	r8,4(r4)
   16d0c:	21c06326 	beq	r4,r7,16e9c <_realloc_r+0x218>
   16d10:	017fff84 	movi	r5,-2
   16d14:	414a703a 	and	r5,r8,r5
   16d18:	214b883a 	add	r5,r4,r5
   16d1c:	29800117 	ldw	r6,4(r5)
   16d20:	3180004c 	andi	r6,r6,1
   16d24:	30003f26 	beq	r6,zero,16e24 <_realloc_r+0x1a0>
   16d28:	1080004c 	andi	r2,r2,1
   16d2c:	10008326 	beq	r2,zero,16f3c <_realloc_r+0x2b8>
   16d30:	900b883a 	mov	r5,r18
   16d34:	a009883a 	mov	r4,r20
   16d38:	000d2c80 	call	d2c8 <_malloc_r>
   16d3c:	1025883a 	mov	r18,r2
   16d40:	10011e26 	beq	r2,zero,171bc <_realloc_r+0x538>
   16d44:	a93fff17 	ldw	r4,-4(r21)
   16d48:	10fffe04 	addi	r3,r2,-8
   16d4c:	00bfff84 	movi	r2,-2
   16d50:	2084703a 	and	r2,r4,r2
   16d54:	9885883a 	add	r2,r19,r2
   16d58:	1880ee26 	beq	r3,r2,17114 <_realloc_r+0x490>
   16d5c:	81bfff04 	addi	r6,r16,-4
   16d60:	00800904 	movi	r2,36
   16d64:	1180b836 	bltu	r2,r6,17048 <_realloc_r+0x3c4>
   16d68:	00c004c4 	movi	r3,19
   16d6c:	19809636 	bltu	r3,r6,16fc8 <_realloc_r+0x344>
   16d70:	9005883a 	mov	r2,r18
   16d74:	a807883a 	mov	r3,r21
   16d78:	19000017 	ldw	r4,0(r3)
   16d7c:	11000015 	stw	r4,0(r2)
   16d80:	19000117 	ldw	r4,4(r3)
   16d84:	11000115 	stw	r4,4(r2)
   16d88:	18c00217 	ldw	r3,8(r3)
   16d8c:	10c00215 	stw	r3,8(r2)
   16d90:	a80b883a 	mov	r5,r21
   16d94:	a009883a 	mov	r4,r20
   16d98:	0014c2c0 	call	14c2c <_free_r>
   16d9c:	a009883a 	mov	r4,r20
   16da0:	001e5300 	call	1e530 <__malloc_unlock>
   16da4:	9005883a 	mov	r2,r18
   16da8:	00001206 	br	16df4 <_realloc_r+0x170>
   16dac:	00c00404 	movi	r3,16
   16db0:	1823883a 	mov	r17,r3
   16db4:	003fce06 	br	16cf0 <__alt_data_end+0xfc016cf0>
   16db8:	a825883a 	mov	r18,r21
   16dbc:	8445c83a 	sub	r2,r16,r17
   16dc0:	00c003c4 	movi	r3,15
   16dc4:	18802636 	bltu	r3,r2,16e60 <_realloc_r+0x1dc>
   16dc8:	99800117 	ldw	r6,4(r19)
   16dcc:	9c07883a 	add	r3,r19,r16
   16dd0:	3180004c 	andi	r6,r6,1
   16dd4:	3420b03a 	or	r16,r6,r16
   16dd8:	9c000115 	stw	r16,4(r19)
   16ddc:	18800117 	ldw	r2,4(r3)
   16de0:	10800054 	ori	r2,r2,1
   16de4:	18800115 	stw	r2,4(r3)
   16de8:	a009883a 	mov	r4,r20
   16dec:	001e5300 	call	1e530 <__malloc_unlock>
   16df0:	9005883a 	mov	r2,r18
   16df4:	dfc00917 	ldw	ra,36(sp)
   16df8:	df000817 	ldw	fp,32(sp)
   16dfc:	ddc00717 	ldw	r23,28(sp)
   16e00:	dd800617 	ldw	r22,24(sp)
   16e04:	dd400517 	ldw	r21,20(sp)
   16e08:	dd000417 	ldw	r20,16(sp)
   16e0c:	dcc00317 	ldw	r19,12(sp)
   16e10:	dc800217 	ldw	r18,8(sp)
   16e14:	dc400117 	ldw	r17,4(sp)
   16e18:	dc000017 	ldw	r16,0(sp)
   16e1c:	dec00a04 	addi	sp,sp,40
   16e20:	f800283a 	ret
   16e24:	017fff04 	movi	r5,-4
   16e28:	414a703a 	and	r5,r8,r5
   16e2c:	814d883a 	add	r6,r16,r5
   16e30:	30c01f16 	blt	r6,r3,16eb0 <_realloc_r+0x22c>
   16e34:	20800317 	ldw	r2,12(r4)
   16e38:	20c00217 	ldw	r3,8(r4)
   16e3c:	a825883a 	mov	r18,r21
   16e40:	3021883a 	mov	r16,r6
   16e44:	18800315 	stw	r2,12(r3)
   16e48:	10c00215 	stw	r3,8(r2)
   16e4c:	003fdb06 	br	16dbc <__alt_data_end+0xfc016dbc>
   16e50:	00800304 	movi	r2,12
   16e54:	a0800015 	stw	r2,0(r20)
   16e58:	0005883a 	mov	r2,zero
   16e5c:	003fe506 	br	16df4 <__alt_data_end+0xfc016df4>
   16e60:	98c00117 	ldw	r3,4(r19)
   16e64:	9c4b883a 	add	r5,r19,r17
   16e68:	11000054 	ori	r4,r2,1
   16e6c:	18c0004c 	andi	r3,r3,1
   16e70:	1c62b03a 	or	r17,r3,r17
   16e74:	9c400115 	stw	r17,4(r19)
   16e78:	29000115 	stw	r4,4(r5)
   16e7c:	2885883a 	add	r2,r5,r2
   16e80:	10c00117 	ldw	r3,4(r2)
   16e84:	29400204 	addi	r5,r5,8
   16e88:	a009883a 	mov	r4,r20
   16e8c:	18c00054 	ori	r3,r3,1
   16e90:	10c00115 	stw	r3,4(r2)
   16e94:	0014c2c0 	call	14c2c <_free_r>
   16e98:	003fd306 	br	16de8 <__alt_data_end+0xfc016de8>
   16e9c:	017fff04 	movi	r5,-4
   16ea0:	414a703a 	and	r5,r8,r5
   16ea4:	89800404 	addi	r6,r17,16
   16ea8:	8151883a 	add	r8,r16,r5
   16eac:	4180590e 	bge	r8,r6,17014 <_realloc_r+0x390>
   16eb0:	1080004c 	andi	r2,r2,1
   16eb4:	103f9e1e 	bne	r2,zero,16d30 <__alt_data_end+0xfc016d30>
   16eb8:	adbffe17 	ldw	r22,-8(r21)
   16ebc:	00bfff04 	movi	r2,-4
   16ec0:	9dadc83a 	sub	r22,r19,r22
   16ec4:	b1800117 	ldw	r6,4(r22)
   16ec8:	3084703a 	and	r2,r6,r2
   16ecc:	20002026 	beq	r4,zero,16f50 <_realloc_r+0x2cc>
   16ed0:	80af883a 	add	r23,r16,r2
   16ed4:	b96f883a 	add	r23,r23,r5
   16ed8:	21c05f26 	beq	r4,r7,17058 <_realloc_r+0x3d4>
   16edc:	b8c01c16 	blt	r23,r3,16f50 <_realloc_r+0x2cc>
   16ee0:	20800317 	ldw	r2,12(r4)
   16ee4:	20c00217 	ldw	r3,8(r4)
   16ee8:	81bfff04 	addi	r6,r16,-4
   16eec:	01000904 	movi	r4,36
   16ef0:	18800315 	stw	r2,12(r3)
   16ef4:	10c00215 	stw	r3,8(r2)
   16ef8:	b0c00217 	ldw	r3,8(r22)
   16efc:	b0800317 	ldw	r2,12(r22)
   16f00:	b4800204 	addi	r18,r22,8
   16f04:	18800315 	stw	r2,12(r3)
   16f08:	10c00215 	stw	r3,8(r2)
   16f0c:	21801b36 	bltu	r4,r6,16f7c <_realloc_r+0x2f8>
   16f10:	008004c4 	movi	r2,19
   16f14:	1180352e 	bgeu	r2,r6,16fec <_realloc_r+0x368>
   16f18:	a8800017 	ldw	r2,0(r21)
   16f1c:	b0800215 	stw	r2,8(r22)
   16f20:	a8800117 	ldw	r2,4(r21)
   16f24:	b0800315 	stw	r2,12(r22)
   16f28:	008006c4 	movi	r2,27
   16f2c:	11807f36 	bltu	r2,r6,1712c <_realloc_r+0x4a8>
   16f30:	b0800404 	addi	r2,r22,16
   16f34:	ad400204 	addi	r21,r21,8
   16f38:	00002d06 	br	16ff0 <_realloc_r+0x36c>
   16f3c:	adbffe17 	ldw	r22,-8(r21)
   16f40:	00bfff04 	movi	r2,-4
   16f44:	9dadc83a 	sub	r22,r19,r22
   16f48:	b1000117 	ldw	r4,4(r22)
   16f4c:	2084703a 	and	r2,r4,r2
   16f50:	b03f7726 	beq	r22,zero,16d30 <__alt_data_end+0xfc016d30>
   16f54:	80af883a 	add	r23,r16,r2
   16f58:	b8ff7516 	blt	r23,r3,16d30 <__alt_data_end+0xfc016d30>
   16f5c:	b0800317 	ldw	r2,12(r22)
   16f60:	b0c00217 	ldw	r3,8(r22)
   16f64:	81bfff04 	addi	r6,r16,-4
   16f68:	01000904 	movi	r4,36
   16f6c:	18800315 	stw	r2,12(r3)
   16f70:	10c00215 	stw	r3,8(r2)
   16f74:	b4800204 	addi	r18,r22,8
   16f78:	21bfe52e 	bgeu	r4,r6,16f10 <__alt_data_end+0xfc016f10>
   16f7c:	a80b883a 	mov	r5,r21
   16f80:	9009883a 	mov	r4,r18
   16f84:	00159080 	call	15908 <memmove>
   16f88:	b821883a 	mov	r16,r23
   16f8c:	b027883a 	mov	r19,r22
   16f90:	003f8a06 	br	16dbc <__alt_data_end+0xfc016dbc>
   16f94:	300b883a 	mov	r5,r6
   16f98:	dfc00917 	ldw	ra,36(sp)
   16f9c:	df000817 	ldw	fp,32(sp)
   16fa0:	ddc00717 	ldw	r23,28(sp)
   16fa4:	dd800617 	ldw	r22,24(sp)
   16fa8:	dd400517 	ldw	r21,20(sp)
   16fac:	dd000417 	ldw	r20,16(sp)
   16fb0:	dcc00317 	ldw	r19,12(sp)
   16fb4:	dc800217 	ldw	r18,8(sp)
   16fb8:	dc400117 	ldw	r17,4(sp)
   16fbc:	dc000017 	ldw	r16,0(sp)
   16fc0:	dec00a04 	addi	sp,sp,40
   16fc4:	000d2c81 	jmpi	d2c8 <_malloc_r>
   16fc8:	a8c00017 	ldw	r3,0(r21)
   16fcc:	90c00015 	stw	r3,0(r18)
   16fd0:	a8c00117 	ldw	r3,4(r21)
   16fd4:	90c00115 	stw	r3,4(r18)
   16fd8:	00c006c4 	movi	r3,27
   16fdc:	19804536 	bltu	r3,r6,170f4 <_realloc_r+0x470>
   16fe0:	90800204 	addi	r2,r18,8
   16fe4:	a8c00204 	addi	r3,r21,8
   16fe8:	003f6306 	br	16d78 <__alt_data_end+0xfc016d78>
   16fec:	9005883a 	mov	r2,r18
   16ff0:	a8c00017 	ldw	r3,0(r21)
   16ff4:	b821883a 	mov	r16,r23
   16ff8:	b027883a 	mov	r19,r22
   16ffc:	10c00015 	stw	r3,0(r2)
   17000:	a8c00117 	ldw	r3,4(r21)
   17004:	10c00115 	stw	r3,4(r2)
   17008:	a8c00217 	ldw	r3,8(r21)
   1700c:	10c00215 	stw	r3,8(r2)
   17010:	003f6a06 	br	16dbc <__alt_data_end+0xfc016dbc>
   17014:	9c67883a 	add	r19,r19,r17
   17018:	4445c83a 	sub	r2,r8,r17
   1701c:	e4c00215 	stw	r19,8(fp)
   17020:	10800054 	ori	r2,r2,1
   17024:	98800115 	stw	r2,4(r19)
   17028:	a8bfff17 	ldw	r2,-4(r21)
   1702c:	a009883a 	mov	r4,r20
   17030:	1080004c 	andi	r2,r2,1
   17034:	1462b03a 	or	r17,r2,r17
   17038:	ac7fff15 	stw	r17,-4(r21)
   1703c:	001e5300 	call	1e530 <__malloc_unlock>
   17040:	a805883a 	mov	r2,r21
   17044:	003f6b06 	br	16df4 <__alt_data_end+0xfc016df4>
   17048:	a80b883a 	mov	r5,r21
   1704c:	9009883a 	mov	r4,r18
   17050:	00159080 	call	15908 <memmove>
   17054:	003f4e06 	br	16d90 <__alt_data_end+0xfc016d90>
   17058:	89000404 	addi	r4,r17,16
   1705c:	b93fbc16 	blt	r23,r4,16f50 <__alt_data_end+0xfc016f50>
   17060:	b0800317 	ldw	r2,12(r22)
   17064:	b0c00217 	ldw	r3,8(r22)
   17068:	81bfff04 	addi	r6,r16,-4
   1706c:	01000904 	movi	r4,36
   17070:	18800315 	stw	r2,12(r3)
   17074:	10c00215 	stw	r3,8(r2)
   17078:	b4800204 	addi	r18,r22,8
   1707c:	21804336 	bltu	r4,r6,1718c <_realloc_r+0x508>
   17080:	008004c4 	movi	r2,19
   17084:	11803f2e 	bgeu	r2,r6,17184 <_realloc_r+0x500>
   17088:	a8800017 	ldw	r2,0(r21)
   1708c:	b0800215 	stw	r2,8(r22)
   17090:	a8800117 	ldw	r2,4(r21)
   17094:	b0800315 	stw	r2,12(r22)
   17098:	008006c4 	movi	r2,27
   1709c:	11803f36 	bltu	r2,r6,1719c <_realloc_r+0x518>
   170a0:	b0800404 	addi	r2,r22,16
   170a4:	ad400204 	addi	r21,r21,8
   170a8:	a8c00017 	ldw	r3,0(r21)
   170ac:	10c00015 	stw	r3,0(r2)
   170b0:	a8c00117 	ldw	r3,4(r21)
   170b4:	10c00115 	stw	r3,4(r2)
   170b8:	a8c00217 	ldw	r3,8(r21)
   170bc:	10c00215 	stw	r3,8(r2)
   170c0:	b447883a 	add	r3,r22,r17
   170c4:	bc45c83a 	sub	r2,r23,r17
   170c8:	e0c00215 	stw	r3,8(fp)
   170cc:	10800054 	ori	r2,r2,1
   170d0:	18800115 	stw	r2,4(r3)
   170d4:	b0800117 	ldw	r2,4(r22)
   170d8:	a009883a 	mov	r4,r20
   170dc:	1080004c 	andi	r2,r2,1
   170e0:	1462b03a 	or	r17,r2,r17
   170e4:	b4400115 	stw	r17,4(r22)
   170e8:	001e5300 	call	1e530 <__malloc_unlock>
   170ec:	9005883a 	mov	r2,r18
   170f0:	003f4006 	br	16df4 <__alt_data_end+0xfc016df4>
   170f4:	a8c00217 	ldw	r3,8(r21)
   170f8:	90c00215 	stw	r3,8(r18)
   170fc:	a8c00317 	ldw	r3,12(r21)
   17100:	90c00315 	stw	r3,12(r18)
   17104:	30801126 	beq	r6,r2,1714c <_realloc_r+0x4c8>
   17108:	90800404 	addi	r2,r18,16
   1710c:	a8c00404 	addi	r3,r21,16
   17110:	003f1906 	br	16d78 <__alt_data_end+0xfc016d78>
   17114:	90ffff17 	ldw	r3,-4(r18)
   17118:	00bfff04 	movi	r2,-4
   1711c:	a825883a 	mov	r18,r21
   17120:	1884703a 	and	r2,r3,r2
   17124:	80a1883a 	add	r16,r16,r2
   17128:	003f2406 	br	16dbc <__alt_data_end+0xfc016dbc>
   1712c:	a8800217 	ldw	r2,8(r21)
   17130:	b0800415 	stw	r2,16(r22)
   17134:	a8800317 	ldw	r2,12(r21)
   17138:	b0800515 	stw	r2,20(r22)
   1713c:	31000a26 	beq	r6,r4,17168 <_realloc_r+0x4e4>
   17140:	b0800604 	addi	r2,r22,24
   17144:	ad400404 	addi	r21,r21,16
   17148:	003fa906 	br	16ff0 <__alt_data_end+0xfc016ff0>
   1714c:	a9000417 	ldw	r4,16(r21)
   17150:	90800604 	addi	r2,r18,24
   17154:	a8c00604 	addi	r3,r21,24
   17158:	91000415 	stw	r4,16(r18)
   1715c:	a9000517 	ldw	r4,20(r21)
   17160:	91000515 	stw	r4,20(r18)
   17164:	003f0406 	br	16d78 <__alt_data_end+0xfc016d78>
   17168:	a8c00417 	ldw	r3,16(r21)
   1716c:	ad400604 	addi	r21,r21,24
   17170:	b0800804 	addi	r2,r22,32
   17174:	b0c00615 	stw	r3,24(r22)
   17178:	a8ffff17 	ldw	r3,-4(r21)
   1717c:	b0c00715 	stw	r3,28(r22)
   17180:	003f9b06 	br	16ff0 <__alt_data_end+0xfc016ff0>
   17184:	9005883a 	mov	r2,r18
   17188:	003fc706 	br	170a8 <__alt_data_end+0xfc0170a8>
   1718c:	a80b883a 	mov	r5,r21
   17190:	9009883a 	mov	r4,r18
   17194:	00159080 	call	15908 <memmove>
   17198:	003fc906 	br	170c0 <__alt_data_end+0xfc0170c0>
   1719c:	a8800217 	ldw	r2,8(r21)
   171a0:	b0800415 	stw	r2,16(r22)
   171a4:	a8800317 	ldw	r2,12(r21)
   171a8:	b0800515 	stw	r2,20(r22)
   171ac:	31000726 	beq	r6,r4,171cc <_realloc_r+0x548>
   171b0:	b0800604 	addi	r2,r22,24
   171b4:	ad400404 	addi	r21,r21,16
   171b8:	003fbb06 	br	170a8 <__alt_data_end+0xfc0170a8>
   171bc:	a009883a 	mov	r4,r20
   171c0:	001e5300 	call	1e530 <__malloc_unlock>
   171c4:	0005883a 	mov	r2,zero
   171c8:	003f0a06 	br	16df4 <__alt_data_end+0xfc016df4>
   171cc:	a8c00417 	ldw	r3,16(r21)
   171d0:	ad400604 	addi	r21,r21,24
   171d4:	b0800804 	addi	r2,r22,32
   171d8:	b0c00615 	stw	r3,24(r22)
   171dc:	a8ffff17 	ldw	r3,-4(r21)
   171e0:	b0c00715 	stw	r3,28(r22)
   171e4:	003fb006 	br	170a8 <__alt_data_end+0xfc0170a8>

000171e8 <__fpclassifyd>:
   171e8:	00a00034 	movhi	r2,32768
   171ec:	10bfffc4 	addi	r2,r2,-1
   171f0:	2884703a 	and	r2,r5,r2
   171f4:	10000726 	beq	r2,zero,17214 <__fpclassifyd+0x2c>
   171f8:	00fffc34 	movhi	r3,65520
   171fc:	019ff834 	movhi	r6,32736
   17200:	28c7883a 	add	r3,r5,r3
   17204:	31bfffc4 	addi	r6,r6,-1
   17208:	30c00536 	bltu	r6,r3,17220 <__fpclassifyd+0x38>
   1720c:	00800104 	movi	r2,4
   17210:	f800283a 	ret
   17214:	2000021e 	bne	r4,zero,17220 <__fpclassifyd+0x38>
   17218:	00800084 	movi	r2,2
   1721c:	f800283a 	ret
   17220:	00dffc34 	movhi	r3,32752
   17224:	019ff834 	movhi	r6,32736
   17228:	28cb883a 	add	r5,r5,r3
   1722c:	31bfffc4 	addi	r6,r6,-1
   17230:	317ff62e 	bgeu	r6,r5,1720c <__alt_data_end+0xfc01720c>
   17234:	01400434 	movhi	r5,16
   17238:	297fffc4 	addi	r5,r5,-1
   1723c:	28800236 	bltu	r5,r2,17248 <__fpclassifyd+0x60>
   17240:	008000c4 	movi	r2,3
   17244:	f800283a 	ret
   17248:	10c00226 	beq	r2,r3,17254 <__fpclassifyd+0x6c>
   1724c:	0005883a 	mov	r2,zero
   17250:	f800283a 	ret
   17254:	2005003a 	cmpeq	r2,r4,zero
   17258:	f800283a 	ret

0001725c <__sread>:
   1725c:	defffe04 	addi	sp,sp,-8
   17260:	dc000015 	stw	r16,0(sp)
   17264:	2821883a 	mov	r16,r5
   17268:	2940038f 	ldh	r5,14(r5)
   1726c:	dfc00115 	stw	ra,4(sp)
   17270:	001a7040 	call	1a704 <_read_r>
   17274:	10000716 	blt	r2,zero,17294 <__sread+0x38>
   17278:	80c01417 	ldw	r3,80(r16)
   1727c:	1887883a 	add	r3,r3,r2
   17280:	80c01415 	stw	r3,80(r16)
   17284:	dfc00117 	ldw	ra,4(sp)
   17288:	dc000017 	ldw	r16,0(sp)
   1728c:	dec00204 	addi	sp,sp,8
   17290:	f800283a 	ret
   17294:	80c0030b 	ldhu	r3,12(r16)
   17298:	18fbffcc 	andi	r3,r3,61439
   1729c:	80c0030d 	sth	r3,12(r16)
   172a0:	dfc00117 	ldw	ra,4(sp)
   172a4:	dc000017 	ldw	r16,0(sp)
   172a8:	dec00204 	addi	sp,sp,8
   172ac:	f800283a 	ret

000172b0 <__seofread>:
   172b0:	0005883a 	mov	r2,zero
   172b4:	f800283a 	ret

000172b8 <__swrite>:
   172b8:	2880030b 	ldhu	r2,12(r5)
   172bc:	defffb04 	addi	sp,sp,-20
   172c0:	dcc00315 	stw	r19,12(sp)
   172c4:	dc800215 	stw	r18,8(sp)
   172c8:	dc400115 	stw	r17,4(sp)
   172cc:	dc000015 	stw	r16,0(sp)
   172d0:	dfc00415 	stw	ra,16(sp)
   172d4:	10c0400c 	andi	r3,r2,256
   172d8:	2821883a 	mov	r16,r5
   172dc:	2023883a 	mov	r17,r4
   172e0:	3025883a 	mov	r18,r6
   172e4:	3827883a 	mov	r19,r7
   172e8:	18000526 	beq	r3,zero,17300 <__swrite+0x48>
   172ec:	2940038f 	ldh	r5,14(r5)
   172f0:	01c00084 	movi	r7,2
   172f4:	000d883a 	mov	r6,zero
   172f8:	001a6a40 	call	1a6a4 <_lseek_r>
   172fc:	8080030b 	ldhu	r2,12(r16)
   17300:	8140038f 	ldh	r5,14(r16)
   17304:	10bbffcc 	andi	r2,r2,61439
   17308:	980f883a 	mov	r7,r19
   1730c:	900d883a 	mov	r6,r18
   17310:	8809883a 	mov	r4,r17
   17314:	8080030d 	sth	r2,12(r16)
   17318:	dfc00417 	ldw	ra,16(sp)
   1731c:	dcc00317 	ldw	r19,12(sp)
   17320:	dc800217 	ldw	r18,8(sp)
   17324:	dc400117 	ldw	r17,4(sp)
   17328:	dc000017 	ldw	r16,0(sp)
   1732c:	dec00504 	addi	sp,sp,20
   17330:	001a1581 	jmpi	1a158 <_write_r>

00017334 <__sseek>:
   17334:	defffe04 	addi	sp,sp,-8
   17338:	dc000015 	stw	r16,0(sp)
   1733c:	2821883a 	mov	r16,r5
   17340:	2940038f 	ldh	r5,14(r5)
   17344:	dfc00115 	stw	ra,4(sp)
   17348:	001a6a40 	call	1a6a4 <_lseek_r>
   1734c:	00ffffc4 	movi	r3,-1
   17350:	10c00826 	beq	r2,r3,17374 <__sseek+0x40>
   17354:	80c0030b 	ldhu	r3,12(r16)
   17358:	80801415 	stw	r2,80(r16)
   1735c:	18c40014 	ori	r3,r3,4096
   17360:	80c0030d 	sth	r3,12(r16)
   17364:	dfc00117 	ldw	ra,4(sp)
   17368:	dc000017 	ldw	r16,0(sp)
   1736c:	dec00204 	addi	sp,sp,8
   17370:	f800283a 	ret
   17374:	80c0030b 	ldhu	r3,12(r16)
   17378:	18fbffcc 	andi	r3,r3,61439
   1737c:	80c0030d 	sth	r3,12(r16)
   17380:	dfc00117 	ldw	ra,4(sp)
   17384:	dc000017 	ldw	r16,0(sp)
   17388:	dec00204 	addi	sp,sp,8
   1738c:	f800283a 	ret

00017390 <__sclose>:
   17390:	2940038f 	ldh	r5,14(r5)
   17394:	001a1b81 	jmpi	1a1b8 <_close_r>

00017398 <__ssprint_r>:
   17398:	30800217 	ldw	r2,8(r6)
   1739c:	defff604 	addi	sp,sp,-40
   173a0:	dc800215 	stw	r18,8(sp)
   173a4:	dfc00915 	stw	ra,36(sp)
   173a8:	df000815 	stw	fp,32(sp)
   173ac:	ddc00715 	stw	r23,28(sp)
   173b0:	dd800615 	stw	r22,24(sp)
   173b4:	dd400515 	stw	r21,20(sp)
   173b8:	dd000415 	stw	r20,16(sp)
   173bc:	dcc00315 	stw	r19,12(sp)
   173c0:	dc400115 	stw	r17,4(sp)
   173c4:	dc000015 	stw	r16,0(sp)
   173c8:	3025883a 	mov	r18,r6
   173cc:	10005826 	beq	r2,zero,17530 <__ssprint_r+0x198>
   173d0:	2027883a 	mov	r19,r4
   173d4:	35c00017 	ldw	r23,0(r6)
   173d8:	29000017 	ldw	r4,0(r5)
   173dc:	28800217 	ldw	r2,8(r5)
   173e0:	2823883a 	mov	r17,r5
   173e4:	0039883a 	mov	fp,zero
   173e8:	0021883a 	mov	r16,zero
   173ec:	80003926 	beq	r16,zero,174d4 <__ssprint_r+0x13c>
   173f0:	102b883a 	mov	r21,r2
   173f4:	102d883a 	mov	r22,r2
   173f8:	80803a36 	bltu	r16,r2,174e4 <__ssprint_r+0x14c>
   173fc:	88c0030b 	ldhu	r3,12(r17)
   17400:	1881200c 	andi	r2,r3,1152
   17404:	10002626 	beq	r2,zero,174a0 <__ssprint_r+0x108>
   17408:	88800517 	ldw	r2,20(r17)
   1740c:	89400417 	ldw	r5,16(r17)
   17410:	81800044 	addi	r6,r16,1
   17414:	108f883a 	add	r7,r2,r2
   17418:	3885883a 	add	r2,r7,r2
   1741c:	100ed7fa 	srli	r7,r2,31
   17420:	216dc83a 	sub	r22,r4,r5
   17424:	3589883a 	add	r4,r6,r22
   17428:	3885883a 	add	r2,r7,r2
   1742c:	102bd07a 	srai	r21,r2,1
   17430:	a80d883a 	mov	r6,r21
   17434:	a900022e 	bgeu	r21,r4,17440 <__ssprint_r+0xa8>
   17438:	202b883a 	mov	r21,r4
   1743c:	200d883a 	mov	r6,r4
   17440:	18c1000c 	andi	r3,r3,1024
   17444:	18002a26 	beq	r3,zero,174f0 <__ssprint_r+0x158>
   17448:	300b883a 	mov	r5,r6
   1744c:	9809883a 	mov	r4,r19
   17450:	000d2c80 	call	d2c8 <_malloc_r>
   17454:	1029883a 	mov	r20,r2
   17458:	10002c26 	beq	r2,zero,1750c <__ssprint_r+0x174>
   1745c:	89400417 	ldw	r5,16(r17)
   17460:	b00d883a 	mov	r6,r22
   17464:	1009883a 	mov	r4,r2
   17468:	000dad40 	call	dad4 <memcpy>
   1746c:	8880030b 	ldhu	r2,12(r17)
   17470:	00fedfc4 	movi	r3,-1153
   17474:	10c4703a 	and	r2,r2,r3
   17478:	10802014 	ori	r2,r2,128
   1747c:	8880030d 	sth	r2,12(r17)
   17480:	a589883a 	add	r4,r20,r22
   17484:	adadc83a 	sub	r22,r21,r22
   17488:	8d400515 	stw	r21,20(r17)
   1748c:	8d800215 	stw	r22,8(r17)
   17490:	8d000415 	stw	r20,16(r17)
   17494:	89000015 	stw	r4,0(r17)
   17498:	802b883a 	mov	r21,r16
   1749c:	802d883a 	mov	r22,r16
   174a0:	b00d883a 	mov	r6,r22
   174a4:	e00b883a 	mov	r5,fp
   174a8:	00159080 	call	15908 <memmove>
   174ac:	88800217 	ldw	r2,8(r17)
   174b0:	89000017 	ldw	r4,0(r17)
   174b4:	90c00217 	ldw	r3,8(r18)
   174b8:	1545c83a 	sub	r2,r2,r21
   174bc:	2589883a 	add	r4,r4,r22
   174c0:	88800215 	stw	r2,8(r17)
   174c4:	89000015 	stw	r4,0(r17)
   174c8:	1c21c83a 	sub	r16,r3,r16
   174cc:	94000215 	stw	r16,8(r18)
   174d0:	80001726 	beq	r16,zero,17530 <__ssprint_r+0x198>
   174d4:	bf000017 	ldw	fp,0(r23)
   174d8:	bc000117 	ldw	r16,4(r23)
   174dc:	bdc00204 	addi	r23,r23,8
   174e0:	003fc206 	br	173ec <__alt_data_end+0xfc0173ec>
   174e4:	802b883a 	mov	r21,r16
   174e8:	802d883a 	mov	r22,r16
   174ec:	003fec06 	br	174a0 <__alt_data_end+0xfc0174a0>
   174f0:	9809883a 	mov	r4,r19
   174f4:	0016c840 	call	16c84 <_realloc_r>
   174f8:	1029883a 	mov	r20,r2
   174fc:	103fe01e 	bne	r2,zero,17480 <__alt_data_end+0xfc017480>
   17500:	89400417 	ldw	r5,16(r17)
   17504:	9809883a 	mov	r4,r19
   17508:	0014c2c0 	call	14c2c <_free_r>
   1750c:	88c0030b 	ldhu	r3,12(r17)
   17510:	00800304 	movi	r2,12
   17514:	98800015 	stw	r2,0(r19)
   17518:	18c01014 	ori	r3,r3,64
   1751c:	88c0030d 	sth	r3,12(r17)
   17520:	00bfffc4 	movi	r2,-1
   17524:	90000215 	stw	zero,8(r18)
   17528:	90000115 	stw	zero,4(r18)
   1752c:	00000206 	br	17538 <__ssprint_r+0x1a0>
   17530:	90000115 	stw	zero,4(r18)
   17534:	0005883a 	mov	r2,zero
   17538:	dfc00917 	ldw	ra,36(sp)
   1753c:	df000817 	ldw	fp,32(sp)
   17540:	ddc00717 	ldw	r23,28(sp)
   17544:	dd800617 	ldw	r22,24(sp)
   17548:	dd400517 	ldw	r21,20(sp)
   1754c:	dd000417 	ldw	r20,16(sp)
   17550:	dcc00317 	ldw	r19,12(sp)
   17554:	dc800217 	ldw	r18,8(sp)
   17558:	dc400117 	ldw	r17,4(sp)
   1755c:	dc000017 	ldw	r16,0(sp)
   17560:	dec00a04 	addi	sp,sp,40
   17564:	f800283a 	ret

00017568 <___svfiprintf_internal_r>:
   17568:	2880030b 	ldhu	r2,12(r5)
   1756c:	deffc804 	addi	sp,sp,-224
   17570:	dcc03115 	stw	r19,196(sp)
   17574:	dfc03715 	stw	ra,220(sp)
   17578:	df003615 	stw	fp,216(sp)
   1757c:	ddc03515 	stw	r23,212(sp)
   17580:	dd803415 	stw	r22,208(sp)
   17584:	dd403315 	stw	r21,204(sp)
   17588:	dd003215 	stw	r20,200(sp)
   1758c:	dc803015 	stw	r18,192(sp)
   17590:	dc402f15 	stw	r17,188(sp)
   17594:	dc002e15 	stw	r16,184(sp)
   17598:	d9402315 	stw	r5,140(sp)
   1759c:	d9002715 	stw	r4,156(sp)
   175a0:	1080200c 	andi	r2,r2,128
   175a4:	d9c02415 	stw	r7,144(sp)
   175a8:	3027883a 	mov	r19,r6
   175ac:	10000226 	beq	r2,zero,175b8 <___svfiprintf_internal_r+0x50>
   175b0:	28800417 	ldw	r2,16(r5)
   175b4:	10046d26 	beq	r2,zero,1876c <___svfiprintf_internal_r+0x1204>
   175b8:	d8801a04 	addi	r2,sp,104
   175bc:	d8c019c4 	addi	r3,sp,103
   175c0:	058000f4 	movhi	r22,3
   175c4:	10c9c83a 	sub	r4,r2,r3
   175c8:	b5a5e004 	addi	r22,r22,-26752
   175cc:	d8801e15 	stw	r2,120(sp)
   175d0:	d8c01f15 	stw	r3,124(sp)
   175d4:	dec01a15 	stw	sp,104(sp)
   175d8:	d8001c15 	stw	zero,112(sp)
   175dc:	d8001b15 	stw	zero,108(sp)
   175e0:	d811883a 	mov	r8,sp
   175e4:	d8002915 	stw	zero,164(sp)
   175e8:	d8002615 	stw	zero,152(sp)
   175ec:	d9002c15 	stw	r4,176(sp)
   175f0:	98800007 	ldb	r2,0(r19)
   175f4:	10031426 	beq	r2,zero,18248 <___svfiprintf_internal_r+0xce0>
   175f8:	00c00944 	movi	r3,37
   175fc:	9825883a 	mov	r18,r19
   17600:	10c0021e 	bne	r2,r3,1760c <___svfiprintf_internal_r+0xa4>
   17604:	00001406 	br	17658 <___svfiprintf_internal_r+0xf0>
   17608:	10c00326 	beq	r2,r3,17618 <___svfiprintf_internal_r+0xb0>
   1760c:	94800044 	addi	r18,r18,1
   17610:	90800007 	ldb	r2,0(r18)
   17614:	103ffc1e 	bne	r2,zero,17608 <__alt_data_end+0xfc017608>
   17618:	94e1c83a 	sub	r16,r18,r19
   1761c:	80000e26 	beq	r16,zero,17658 <___svfiprintf_internal_r+0xf0>
   17620:	d8c01c17 	ldw	r3,112(sp)
   17624:	d8801b17 	ldw	r2,108(sp)
   17628:	44c00015 	stw	r19,0(r8)
   1762c:	1c07883a 	add	r3,r3,r16
   17630:	10800044 	addi	r2,r2,1
   17634:	d8c01c15 	stw	r3,112(sp)
   17638:	44000115 	stw	r16,4(r8)
   1763c:	d8801b15 	stw	r2,108(sp)
   17640:	00c001c4 	movi	r3,7
   17644:	18835c16 	blt	r3,r2,183b8 <___svfiprintf_internal_r+0xe50>
   17648:	42000204 	addi	r8,r8,8
   1764c:	d9402617 	ldw	r5,152(sp)
   17650:	2c0b883a 	add	r5,r5,r16
   17654:	d9402615 	stw	r5,152(sp)
   17658:	90800007 	ldb	r2,0(r18)
   1765c:	1002fc26 	beq	r2,zero,18250 <___svfiprintf_internal_r+0xce8>
   17660:	0023883a 	mov	r17,zero
   17664:	00bfffc4 	movi	r2,-1
   17668:	0021883a 	mov	r16,zero
   1766c:	94c00044 	addi	r19,r18,1
   17670:	90c00047 	ldb	r3,1(r18)
   17674:	dc402105 	stb	r17,132(sp)
   17678:	d8001d85 	stb	zero,118(sp)
   1767c:	002b883a 	mov	r21,zero
   17680:	d8802015 	stw	r2,128(sp)
   17684:	d8002515 	stw	zero,148(sp)
   17688:	04801604 	movi	r18,88
   1768c:	05000244 	movi	r20,9
   17690:	402f883a 	mov	r23,r8
   17694:	8023883a 	mov	r17,r16
   17698:	9cc00044 	addi	r19,r19,1
   1769c:	18bff804 	addi	r2,r3,-32
   176a0:	9081fb36 	bltu	r18,r2,17e90 <___svfiprintf_internal_r+0x928>
   176a4:	100490ba 	slli	r2,r2,2
   176a8:	01000074 	movhi	r4,1
   176ac:	211daf04 	addi	r4,r4,30396
   176b0:	1105883a 	add	r2,r2,r4
   176b4:	10800017 	ldw	r2,0(r2)
   176b8:	1000683a 	jmp	r2
   176bc:	000178bc 	xorhi	zero,zero,1506
   176c0:	00017e90 	cmplti	zero,zero,1530
   176c4:	00017e90 	cmplti	zero,zero,1530
   176c8:	000178b0 	cmpltui	zero,zero,1506
   176cc:	00017e90 	cmplti	zero,zero,1530
   176d0:	00017e90 	cmplti	zero,zero,1530
   176d4:	00017e90 	cmplti	zero,zero,1530
   176d8:	00017e90 	cmplti	zero,zero,1530
   176dc:	00017e90 	cmplti	zero,zero,1530
   176e0:	00017e90 	cmplti	zero,zero,1530
   176e4:	00017820 	cmpeqi	zero,zero,1504
   176e8:	00017a1c 	xori	zero,zero,1512
   176ec:	00017e90 	cmplti	zero,zero,1530
   176f0:	00017848 	cmpgei	zero,zero,1505
   176f4:	00017ecc 	andi	zero,zero,1531
   176f8:	00017e90 	cmplti	zero,zero,1530
   176fc:	00017ec0 	call	17ec <_ZN3USB11dispatchPktEhht+0x150>
   17700:	00017e54 	movui	zero,1529
   17704:	00017e54 	movui	zero,1529
   17708:	00017e54 	movui	zero,1529
   1770c:	00017e54 	movui	zero,1529
   17710:	00017e54 	movui	zero,1529
   17714:	00017e54 	movui	zero,1529
   17718:	00017e54 	movui	zero,1529
   1771c:	00017e54 	movui	zero,1529
   17720:	00017e54 	movui	zero,1529
   17724:	00017e90 	cmplti	zero,zero,1530
   17728:	00017e90 	cmplti	zero,zero,1530
   1772c:	00017e90 	cmplti	zero,zero,1530
   17730:	00017e90 	cmplti	zero,zero,1530
   17734:	00017e90 	cmplti	zero,zero,1530
   17738:	00017e90 	cmplti	zero,zero,1530
   1773c:	00017e90 	cmplti	zero,zero,1530
   17740:	00017e90 	cmplti	zero,zero,1530
   17744:	00017e90 	cmplti	zero,zero,1530
   17748:	00017e90 	cmplti	zero,zero,1530
   1774c:	00017dd8 	cmpnei	zero,zero,1527
   17750:	00017e90 	cmplti	zero,zero,1530
   17754:	00017e90 	cmplti	zero,zero,1530
   17758:	00017e90 	cmplti	zero,zero,1530
   1775c:	00017e90 	cmplti	zero,zero,1530
   17760:	00017e90 	cmplti	zero,zero,1530
   17764:	00017e90 	cmplti	zero,zero,1530
   17768:	00017e90 	cmplti	zero,zero,1530
   1776c:	00017e90 	cmplti	zero,zero,1530
   17770:	00017e90 	cmplti	zero,zero,1530
   17774:	00017e90 	cmplti	zero,zero,1530
   17778:	00017f88 	cmpgei	zero,zero,1534
   1777c:	00017e90 	cmplti	zero,zero,1530
   17780:	00017e90 	cmplti	zero,zero,1530
   17784:	00017e90 	cmplti	zero,zero,1530
   17788:	00017e90 	cmplti	zero,zero,1530
   1778c:	00017e90 	cmplti	zero,zero,1530
   17790:	00017f14 	movui	zero,1532
   17794:	00017e90 	cmplti	zero,zero,1530
   17798:	00017e90 	cmplti	zero,zero,1530
   1779c:	00017c14 	movui	zero,1520
   177a0:	00017e90 	cmplti	zero,zero,1530
   177a4:	00017e90 	cmplti	zero,zero,1530
   177a8:	00017e90 	cmplti	zero,zero,1530
   177ac:	00017e90 	cmplti	zero,zero,1530
   177b0:	00017e90 	cmplti	zero,zero,1530
   177b4:	00017e90 	cmplti	zero,zero,1530
   177b8:	00017e90 	cmplti	zero,zero,1530
   177bc:	00017e90 	cmplti	zero,zero,1530
   177c0:	00017e90 	cmplti	zero,zero,1530
   177c4:	00017e90 	cmplti	zero,zero,1530
   177c8:	00017ae0 	cmpeqi	zero,zero,1515
   177cc:	00017cc4 	movi	zero,1523
   177d0:	00017e90 	cmplti	zero,zero,1530
   177d4:	00017e90 	cmplti	zero,zero,1530
   177d8:	00017e90 	cmplti	zero,zero,1530
   177dc:	00017cb8 	rdprs	zero,zero,1522
   177e0:	00017cc4 	movi	zero,1523
   177e4:	00017e90 	cmplti	zero,zero,1530
   177e8:	00017e90 	cmplti	zero,zero,1530
   177ec:	00017ca4 	muli	zero,zero,1522
   177f0:	00017e90 	cmplti	zero,zero,1530
   177f4:	00017c64 	muli	zero,zero,1521
   177f8:	00017a30 	cmpltui	zero,zero,1512
   177fc:	00017854 	movui	zero,1505
   17800:	00017dcc 	andi	zero,zero,1527
   17804:	00017e90 	cmplti	zero,zero,1530
   17808:	00017d78 	rdprs	zero,zero,1525
   1780c:	00017e90 	cmplti	zero,zero,1530
   17810:	00017994 	movui	zero,1510
   17814:	00017e90 	cmplti	zero,zero,1530
   17818:	00017e90 	cmplti	zero,zero,1530
   1781c:	000178e0 	cmpeqi	zero,zero,1507
   17820:	d9002417 	ldw	r4,144(sp)
   17824:	d9402417 	ldw	r5,144(sp)
   17828:	21000017 	ldw	r4,0(r4)
   1782c:	28800104 	addi	r2,r5,4
   17830:	d9002515 	stw	r4,148(sp)
   17834:	20032b0e 	bge	r4,zero,184e4 <___svfiprintf_internal_r+0xf7c>
   17838:	d8c02517 	ldw	r3,148(sp)
   1783c:	d8802415 	stw	r2,144(sp)
   17840:	00c7c83a 	sub	r3,zero,r3
   17844:	d8c02515 	stw	r3,148(sp)
   17848:	8c400114 	ori	r17,r17,4
   1784c:	98c00007 	ldb	r3,0(r19)
   17850:	003f9106 	br	17698 <__alt_data_end+0xfc017698>
   17854:	00800c04 	movi	r2,48
   17858:	d9402417 	ldw	r5,144(sp)
   1785c:	d9002017 	ldw	r4,128(sp)
   17860:	d8801d05 	stb	r2,116(sp)
   17864:	00801e04 	movi	r2,120
   17868:	d8801d45 	stb	r2,117(sp)
   1786c:	d8001d85 	stb	zero,118(sp)
   17870:	b811883a 	mov	r8,r23
   17874:	28c00104 	addi	r3,r5,4
   17878:	2c800017 	ldw	r18,0(r5)
   1787c:	0029883a 	mov	r20,zero
   17880:	88800094 	ori	r2,r17,2
   17884:	20036316 	blt	r4,zero,18614 <___svfiprintf_internal_r+0x10ac>
   17888:	00bfdfc4 	movi	r2,-129
   1788c:	88a0703a 	and	r16,r17,r2
   17890:	d8c02415 	stw	r3,144(sp)
   17894:	84000094 	ori	r16,r16,2
   17898:	90031c26 	beq	r18,zero,1850c <___svfiprintf_internal_r+0xfa4>
   1789c:	014000f4 	movhi	r5,3
   178a0:	29657804 	addi	r5,r5,-27168
   178a4:	002b883a 	mov	r21,zero
   178a8:	d9402915 	stw	r5,164(sp)
   178ac:	00002906 	br	17954 <___svfiprintf_internal_r+0x3ec>
   178b0:	8c400054 	ori	r17,r17,1
   178b4:	98c00007 	ldb	r3,0(r19)
   178b8:	003f7706 	br	17698 <__alt_data_end+0xfc017698>
   178bc:	a8803fcc 	andi	r2,r21,255
   178c0:	1080201c 	xori	r2,r2,128
   178c4:	10bfe004 	addi	r2,r2,-128
   178c8:	10032a1e 	bne	r2,zero,18574 <___svfiprintf_internal_r+0x100c>
   178cc:	00c00044 	movi	r3,1
   178d0:	d8c02105 	stb	r3,132(sp)
   178d4:	05400804 	movi	r21,32
   178d8:	98c00007 	ldb	r3,0(r19)
   178dc:	003f6e06 	br	17698 <__alt_data_end+0xfc017698>
   178e0:	8821883a 	mov	r16,r17
   178e4:	dc402103 	ldbu	r17,132(sp)
   178e8:	b811883a 	mov	r8,r23
   178ec:	8c403fcc 	andi	r17,r17,255
   178f0:	8803f01e 	bne	r17,zero,188b4 <___svfiprintf_internal_r+0x134c>
   178f4:	008000f4 	movhi	r2,3
   178f8:	10a57804 	addi	r2,r2,-27168
   178fc:	d8802915 	stw	r2,164(sp)
   17900:	8080080c 	andi	r2,r16,32
   17904:	1000cd26 	beq	r2,zero,17c3c <___svfiprintf_internal_r+0x6d4>
   17908:	d9002417 	ldw	r4,144(sp)
   1790c:	24800017 	ldw	r18,0(r4)
   17910:	25000117 	ldw	r20,4(r4)
   17914:	21000204 	addi	r4,r4,8
   17918:	d9002415 	stw	r4,144(sp)
   1791c:	8080004c 	andi	r2,r16,1
   17920:	1002c726 	beq	r2,zero,18440 <___svfiprintf_internal_r+0xed8>
   17924:	9504b03a 	or	r2,r18,r20
   17928:	1003061e 	bne	r2,zero,18544 <___svfiprintf_internal_r+0xfdc>
   1792c:	d9002017 	ldw	r4,128(sp)
   17930:	d8001d85 	stb	zero,118(sp)
   17934:	20033e16 	blt	r4,zero,18630 <___svfiprintf_internal_r+0x10c8>
   17938:	00bfdfc4 	movi	r2,-129
   1793c:	80a0703a 	and	r16,r16,r2
   17940:	d9402017 	ldw	r5,128(sp)
   17944:	002b883a 	mov	r21,zero
   17948:	28002826 	beq	r5,zero,179ec <___svfiprintf_internal_r+0x484>
   1794c:	0025883a 	mov	r18,zero
   17950:	0029883a 	mov	r20,zero
   17954:	d9002917 	ldw	r4,164(sp)
   17958:	dc401a04 	addi	r17,sp,104
   1795c:	908003cc 	andi	r2,r18,15
   17960:	a006973a 	slli	r3,r20,28
   17964:	2085883a 	add	r2,r4,r2
   17968:	9024d13a 	srli	r18,r18,4
   1796c:	10800003 	ldbu	r2,0(r2)
   17970:	a028d13a 	srli	r20,r20,4
   17974:	8c7fffc4 	addi	r17,r17,-1
   17978:	1ca4b03a 	or	r18,r3,r18
   1797c:	88800005 	stb	r2,0(r17)
   17980:	9504b03a 	or	r2,r18,r20
   17984:	103ff51e 	bne	r2,zero,1795c <__alt_data_end+0xfc01795c>
   17988:	d8801e17 	ldw	r2,120(sp)
   1798c:	1469c83a 	sub	r20,r2,r17
   17990:	00001906 	br	179f8 <___svfiprintf_internal_r+0x490>
   17994:	8821883a 	mov	r16,r17
   17998:	dc402103 	ldbu	r17,132(sp)
   1799c:	b811883a 	mov	r8,r23
   179a0:	8c403fcc 	andi	r17,r17,255
   179a4:	8803d01e 	bne	r17,zero,188e8 <___svfiprintf_internal_r+0x1380>
   179a8:	8080080c 	andi	r2,r16,32
   179ac:	10016126 	beq	r2,zero,17f34 <___svfiprintf_internal_r+0x9cc>
   179b0:	d9002417 	ldw	r4,144(sp)
   179b4:	d9402017 	ldw	r5,128(sp)
   179b8:	d8001d85 	stb	zero,118(sp)
   179bc:	20c00204 	addi	r3,r4,8
   179c0:	24800017 	ldw	r18,0(r4)
   179c4:	25000117 	ldw	r20,4(r4)
   179c8:	28030f16 	blt	r5,zero,18608 <___svfiprintf_internal_r+0x10a0>
   179cc:	013fdfc4 	movi	r4,-129
   179d0:	9504b03a 	or	r2,r18,r20
   179d4:	d8c02415 	stw	r3,144(sp)
   179d8:	8120703a 	and	r16,r16,r4
   179dc:	002b883a 	mov	r21,zero
   179e0:	1000cd1e 	bne	r2,zero,17d18 <___svfiprintf_internal_r+0x7b0>
   179e4:	d8c02017 	ldw	r3,128(sp)
   179e8:	1803141e 	bne	r3,zero,1863c <___svfiprintf_internal_r+0x10d4>
   179ec:	d8002015 	stw	zero,128(sp)
   179f0:	0029883a 	mov	r20,zero
   179f4:	dc401a04 	addi	r17,sp,104
   179f8:	dc802017 	ldw	r18,128(sp)
   179fc:	9500010e 	bge	r18,r20,17a04 <___svfiprintf_internal_r+0x49c>
   17a00:	a025883a 	mov	r18,r20
   17a04:	ad403fcc 	andi	r21,r21,255
   17a08:	ad40201c 	xori	r21,r21,128
   17a0c:	ad7fe004 	addi	r21,r21,-128
   17a10:	a8003f26 	beq	r21,zero,17b10 <___svfiprintf_internal_r+0x5a8>
   17a14:	94800044 	addi	r18,r18,1
   17a18:	00003d06 	br	17b10 <___svfiprintf_internal_r+0x5a8>
   17a1c:	00c00044 	movi	r3,1
   17a20:	d8c02105 	stb	r3,132(sp)
   17a24:	05400ac4 	movi	r21,43
   17a28:	98c00007 	ldb	r3,0(r19)
   17a2c:	003f1a06 	br	17698 <__alt_data_end+0xfc017698>
   17a30:	8821883a 	mov	r16,r17
   17a34:	dc402103 	ldbu	r17,132(sp)
   17a38:	b811883a 	mov	r8,r23
   17a3c:	8c403fcc 	andi	r17,r17,255
   17a40:	8803a71e 	bne	r17,zero,188e0 <___svfiprintf_internal_r+0x1378>
   17a44:	8080080c 	andi	r2,r16,32
   17a48:	10015726 	beq	r2,zero,17fa8 <___svfiprintf_internal_r+0xa40>
   17a4c:	d8c02417 	ldw	r3,144(sp)
   17a50:	d9002017 	ldw	r4,128(sp)
   17a54:	d8001d85 	stb	zero,118(sp)
   17a58:	18800204 	addi	r2,r3,8
   17a5c:	1c800017 	ldw	r18,0(r3)
   17a60:	1d000117 	ldw	r20,4(r3)
   17a64:	2002db16 	blt	r4,zero,185d4 <___svfiprintf_internal_r+0x106c>
   17a68:	013fdfc4 	movi	r4,-129
   17a6c:	9506b03a 	or	r3,r18,r20
   17a70:	d8802415 	stw	r2,144(sp)
   17a74:	8120703a 	and	r16,r16,r4
   17a78:	18015826 	beq	r3,zero,17fdc <___svfiprintf_internal_r+0xa74>
   17a7c:	002b883a 	mov	r21,zero
   17a80:	dc401a04 	addi	r17,sp,104
   17a84:	9006d0fa 	srli	r3,r18,3
   17a88:	a008977a 	slli	r4,r20,29
   17a8c:	a028d0fa 	srli	r20,r20,3
   17a90:	948001cc 	andi	r18,r18,7
   17a94:	90800c04 	addi	r2,r18,48
   17a98:	8c7fffc4 	addi	r17,r17,-1
   17a9c:	20e4b03a 	or	r18,r4,r3
   17aa0:	88800005 	stb	r2,0(r17)
   17aa4:	9506b03a 	or	r3,r18,r20
   17aa8:	183ff61e 	bne	r3,zero,17a84 <__alt_data_end+0xfc017a84>
   17aac:	80c0004c 	andi	r3,r16,1
   17ab0:	18028926 	beq	r3,zero,184d8 <___svfiprintf_internal_r+0xf70>
   17ab4:	10803fcc 	andi	r2,r2,255
   17ab8:	1080201c 	xori	r2,r2,128
   17abc:	10bfe004 	addi	r2,r2,-128
   17ac0:	00c00c04 	movi	r3,48
   17ac4:	10ffb026 	beq	r2,r3,17988 <__alt_data_end+0xfc017988>
   17ac8:	88ffffc5 	stb	r3,-1(r17)
   17acc:	d8c01e17 	ldw	r3,120(sp)
   17ad0:	88bfffc4 	addi	r2,r17,-1
   17ad4:	1023883a 	mov	r17,r2
   17ad8:	18a9c83a 	sub	r20,r3,r2
   17adc:	003fc606 	br	179f8 <__alt_data_end+0xfc0179f8>
   17ae0:	d8c02417 	ldw	r3,144(sp)
   17ae4:	04800044 	movi	r18,1
   17ae8:	8821883a 	mov	r16,r17
   17aec:	18800017 	ldw	r2,0(r3)
   17af0:	18c00104 	addi	r3,r3,4
   17af4:	b811883a 	mov	r8,r23
   17af8:	d8001d85 	stb	zero,118(sp)
   17afc:	d8801005 	stb	r2,64(sp)
   17b00:	d8c02415 	stw	r3,144(sp)
   17b04:	9029883a 	mov	r20,r18
   17b08:	dc401004 	addi	r17,sp,64
   17b0c:	d8002015 	stw	zero,128(sp)
   17b10:	80c0008c 	andi	r3,r16,2
   17b14:	d8c02115 	stw	r3,132(sp)
   17b18:	18000126 	beq	r3,zero,17b20 <___svfiprintf_internal_r+0x5b8>
   17b1c:	94800084 	addi	r18,r18,2
   17b20:	80c0210c 	andi	r3,r16,132
   17b24:	d8c02215 	stw	r3,136(sp)
   17b28:	1801321e 	bne	r3,zero,17ff4 <___svfiprintf_internal_r+0xa8c>
   17b2c:	d9002517 	ldw	r4,148(sp)
   17b30:	24b9c83a 	sub	fp,r4,r18
   17b34:	07012f0e 	bge	zero,fp,17ff4 <___svfiprintf_internal_r+0xa8c>
   17b38:	02400404 	movi	r9,16
   17b3c:	d8c01c17 	ldw	r3,112(sp)
   17b40:	d8801b17 	ldw	r2,108(sp)
   17b44:	4f03250e 	bge	r9,fp,187dc <___svfiprintf_internal_r+0x1274>
   17b48:	010000f4 	movhi	r4,3
   17b4c:	2125e404 	addi	r4,r4,-26736
   17b50:	dc002a15 	stw	r16,168(sp)
   17b54:	dc402b15 	stw	r17,172(sp)
   17b58:	d9002815 	stw	r4,160(sp)
   17b5c:	e023883a 	mov	r17,fp
   17b60:	482f883a 	mov	r23,r9
   17b64:	9839883a 	mov	fp,r19
   17b68:	054001c4 	movi	r21,7
   17b6c:	9027883a 	mov	r19,r18
   17b70:	dc002717 	ldw	r16,156(sp)
   17b74:	dc802317 	ldw	r18,140(sp)
   17b78:	00000306 	br	17b88 <___svfiprintf_internal_r+0x620>
   17b7c:	8c7ffc04 	addi	r17,r17,-16
   17b80:	42000204 	addi	r8,r8,8
   17b84:	bc40130e 	bge	r23,r17,17bd4 <___svfiprintf_internal_r+0x66c>
   17b88:	014000f4 	movhi	r5,3
   17b8c:	18c00404 	addi	r3,r3,16
   17b90:	10800044 	addi	r2,r2,1
   17b94:	2965e404 	addi	r5,r5,-26736
   17b98:	41400015 	stw	r5,0(r8)
   17b9c:	45c00115 	stw	r23,4(r8)
   17ba0:	d8c01c15 	stw	r3,112(sp)
   17ba4:	d8801b15 	stw	r2,108(sp)
   17ba8:	a8bff40e 	bge	r21,r2,17b7c <__alt_data_end+0xfc017b7c>
   17bac:	d9801a04 	addi	r6,sp,104
   17bb0:	900b883a 	mov	r5,r18
   17bb4:	8009883a 	mov	r4,r16
   17bb8:	00173980 	call	17398 <__ssprint_r>
   17bbc:	1001aa1e 	bne	r2,zero,18268 <___svfiprintf_internal_r+0xd00>
   17bc0:	8c7ffc04 	addi	r17,r17,-16
   17bc4:	d8c01c17 	ldw	r3,112(sp)
   17bc8:	d8801b17 	ldw	r2,108(sp)
   17bcc:	d811883a 	mov	r8,sp
   17bd0:	bc7fed16 	blt	r23,r17,17b88 <__alt_data_end+0xfc017b88>
   17bd4:	9825883a 	mov	r18,r19
   17bd8:	dc002a17 	ldw	r16,168(sp)
   17bdc:	e027883a 	mov	r19,fp
   17be0:	8839883a 	mov	fp,r17
   17be4:	dc402b17 	ldw	r17,172(sp)
   17be8:	d9002817 	ldw	r4,160(sp)
   17bec:	e0c7883a 	add	r3,fp,r3
   17bf0:	10800044 	addi	r2,r2,1
   17bf4:	41000015 	stw	r4,0(r8)
   17bf8:	47000115 	stw	fp,4(r8)
   17bfc:	d8c01c15 	stw	r3,112(sp)
   17c00:	d8801b15 	stw	r2,108(sp)
   17c04:	010001c4 	movi	r4,7
   17c08:	20821616 	blt	r4,r2,18464 <___svfiprintf_internal_r+0xefc>
   17c0c:	42000204 	addi	r8,r8,8
   17c10:	0000fa06 	br	17ffc <___svfiprintf_internal_r+0xa94>
   17c14:	8821883a 	mov	r16,r17
   17c18:	dc402103 	ldbu	r17,132(sp)
   17c1c:	b811883a 	mov	r8,r23
   17c20:	8c403fcc 	andi	r17,r17,255
   17c24:	8803361e 	bne	r17,zero,18900 <___svfiprintf_internal_r+0x1398>
   17c28:	014000f4 	movhi	r5,3
   17c2c:	29657304 	addi	r5,r5,-27188
   17c30:	d9402915 	stw	r5,164(sp)
   17c34:	8080080c 	andi	r2,r16,32
   17c38:	103f331e 	bne	r2,zero,17908 <__alt_data_end+0xfc017908>
   17c3c:	8080040c 	andi	r2,r16,16
   17c40:	1002551e 	bne	r2,zero,18598 <___svfiprintf_internal_r+0x1030>
   17c44:	8080100c 	andi	r2,r16,64
   17c48:	1002a626 	beq	r2,zero,186e4 <___svfiprintf_internal_r+0x117c>
   17c4c:	d8802417 	ldw	r2,144(sp)
   17c50:	0029883a 	mov	r20,zero
   17c54:	1480000b 	ldhu	r18,0(r2)
   17c58:	10800104 	addi	r2,r2,4
   17c5c:	d8802415 	stw	r2,144(sp)
   17c60:	003f2e06 	br	1791c <__alt_data_end+0xfc01791c>
   17c64:	8821883a 	mov	r16,r17
   17c68:	dc402103 	ldbu	r17,132(sp)
   17c6c:	b811883a 	mov	r8,r23
   17c70:	8c403fcc 	andi	r17,r17,255
   17c74:	88030b1e 	bne	r17,zero,188a4 <___svfiprintf_internal_r+0x133c>
   17c78:	8080080c 	andi	r2,r16,32
   17c7c:	1002271e 	bne	r2,zero,1851c <___svfiprintf_internal_r+0xfb4>
   17c80:	8080040c 	andi	r2,r16,16
   17c84:	10028e26 	beq	r2,zero,186c0 <___svfiprintf_internal_r+0x1158>
   17c88:	d8c02417 	ldw	r3,144(sp)
   17c8c:	d9002617 	ldw	r4,152(sp)
   17c90:	18800017 	ldw	r2,0(r3)
   17c94:	18c00104 	addi	r3,r3,4
   17c98:	d8c02415 	stw	r3,144(sp)
   17c9c:	11000015 	stw	r4,0(r2)
   17ca0:	003e5306 	br	175f0 <__alt_data_end+0xfc0175f0>
   17ca4:	98c00007 	ldb	r3,0(r19)
   17ca8:	01401b04 	movi	r5,108
   17cac:	19424f26 	beq	r3,r5,185ec <___svfiprintf_internal_r+0x1084>
   17cb0:	8c400414 	ori	r17,r17,16
   17cb4:	003e7806 	br	17698 <__alt_data_end+0xfc017698>
   17cb8:	8c401014 	ori	r17,r17,64
   17cbc:	98c00007 	ldb	r3,0(r19)
   17cc0:	003e7506 	br	17698 <__alt_data_end+0xfc017698>
   17cc4:	8821883a 	mov	r16,r17
   17cc8:	dc402103 	ldbu	r17,132(sp)
   17ccc:	b811883a 	mov	r8,r23
   17cd0:	8c403fcc 	andi	r17,r17,255
   17cd4:	8802fe1e 	bne	r17,zero,188d0 <___svfiprintf_internal_r+0x1368>
   17cd8:	8080080c 	andi	r2,r16,32
   17cdc:	10004626 	beq	r2,zero,17df8 <___svfiprintf_internal_r+0x890>
   17ce0:	d9002417 	ldw	r4,144(sp)
   17ce4:	20800117 	ldw	r2,4(r4)
   17ce8:	24800017 	ldw	r18,0(r4)
   17cec:	21000204 	addi	r4,r4,8
   17cf0:	d9002415 	stw	r4,144(sp)
   17cf4:	1029883a 	mov	r20,r2
   17cf8:	10004a16 	blt	r2,zero,17e24 <___svfiprintf_internal_r+0x8bc>
   17cfc:	d9002017 	ldw	r4,128(sp)
   17d00:	dd401d83 	ldbu	r21,118(sp)
   17d04:	2001eb16 	blt	r4,zero,184b4 <___svfiprintf_internal_r+0xf4c>
   17d08:	00ffdfc4 	movi	r3,-129
   17d0c:	9504b03a 	or	r2,r18,r20
   17d10:	80e0703a 	and	r16,r16,r3
   17d14:	103f3326 	beq	r2,zero,179e4 <__alt_data_end+0xfc0179e4>
   17d18:	a0009426 	beq	r20,zero,17f6c <___svfiprintf_internal_r+0xa04>
   17d1c:	dc401a04 	addi	r17,sp,104
   17d20:	402f883a 	mov	r23,r8
   17d24:	9009883a 	mov	r4,r18
   17d28:	a00b883a 	mov	r5,r20
   17d2c:	01800284 	movi	r6,10
   17d30:	000f883a 	mov	r7,zero
   17d34:	001af480 	call	1af48 <__umoddi3>
   17d38:	10800c04 	addi	r2,r2,48
   17d3c:	8c7fffc4 	addi	r17,r17,-1
   17d40:	9009883a 	mov	r4,r18
   17d44:	a00b883a 	mov	r5,r20
   17d48:	88800005 	stb	r2,0(r17)
   17d4c:	01800284 	movi	r6,10
   17d50:	000f883a 	mov	r7,zero
   17d54:	001a94c0 	call	1a94c <__udivdi3>
   17d58:	1025883a 	mov	r18,r2
   17d5c:	10c4b03a 	or	r2,r2,r3
   17d60:	1829883a 	mov	r20,r3
   17d64:	103fef1e 	bne	r2,zero,17d24 <__alt_data_end+0xfc017d24>
   17d68:	d9001e17 	ldw	r4,120(sp)
   17d6c:	b811883a 	mov	r8,r23
   17d70:	2469c83a 	sub	r20,r4,r17
   17d74:	003f2006 	br	179f8 <__alt_data_end+0xfc0179f8>
   17d78:	d8802417 	ldw	r2,144(sp)
   17d7c:	8821883a 	mov	r16,r17
   17d80:	d8001d85 	stb	zero,118(sp)
   17d84:	14400017 	ldw	r17,0(r2)
   17d88:	b811883a 	mov	r8,r23
   17d8c:	15c00104 	addi	r23,r2,4
   17d90:	88026c26 	beq	r17,zero,18744 <___svfiprintf_internal_r+0x11dc>
   17d94:	d8c02017 	ldw	r3,128(sp)
   17d98:	18025f16 	blt	r3,zero,18718 <___svfiprintf_internal_r+0x11b0>
   17d9c:	180d883a 	mov	r6,r3
   17da0:	000b883a 	mov	r5,zero
   17da4:	8809883a 	mov	r4,r17
   17da8:	da002d15 	stw	r8,180(sp)
   17dac:	00158240 	call	15824 <memchr>
   17db0:	da002d17 	ldw	r8,180(sp)
   17db4:	1002a526 	beq	r2,zero,1884c <___svfiprintf_internal_r+0x12e4>
   17db8:	1469c83a 	sub	r20,r2,r17
   17dbc:	dd401d83 	ldbu	r21,118(sp)
   17dc0:	ddc02415 	stw	r23,144(sp)
   17dc4:	d8002015 	stw	zero,128(sp)
   17dc8:	003f0b06 	br	179f8 <__alt_data_end+0xfc0179f8>
   17dcc:	8c400814 	ori	r17,r17,32
   17dd0:	98c00007 	ldb	r3,0(r19)
   17dd4:	003e3006 	br	17698 <__alt_data_end+0xfc017698>
   17dd8:	8821883a 	mov	r16,r17
   17ddc:	dc402103 	ldbu	r17,132(sp)
   17de0:	b811883a 	mov	r8,r23
   17de4:	8c403fcc 	andi	r17,r17,255
   17de8:	8802b01e 	bne	r17,zero,188ac <___svfiprintf_internal_r+0x1344>
   17dec:	84000414 	ori	r16,r16,16
   17df0:	8080080c 	andi	r2,r16,32
   17df4:	103fba1e 	bne	r2,zero,17ce0 <__alt_data_end+0xfc017ce0>
   17df8:	8080040c 	andi	r2,r16,16
   17dfc:	1001df1e 	bne	r2,zero,1857c <___svfiprintf_internal_r+0x1014>
   17e00:	8080100c 	andi	r2,r16,64
   17e04:	10023d26 	beq	r2,zero,186fc <___svfiprintf_internal_r+0x1194>
   17e08:	d8802417 	ldw	r2,144(sp)
   17e0c:	1480000f 	ldh	r18,0(r2)
   17e10:	10800104 	addi	r2,r2,4
   17e14:	d8802415 	stw	r2,144(sp)
   17e18:	9029d7fa 	srai	r20,r18,31
   17e1c:	a005883a 	mov	r2,r20
   17e20:	103fb60e 	bge	r2,zero,17cfc <__alt_data_end+0xfc017cfc>
   17e24:	d9402017 	ldw	r5,128(sp)
   17e28:	04a5c83a 	sub	r18,zero,r18
   17e2c:	05400b44 	movi	r21,45
   17e30:	9004c03a 	cmpne	r2,r18,zero
   17e34:	0529c83a 	sub	r20,zero,r20
   17e38:	dd401d85 	stb	r21,118(sp)
   17e3c:	a0a9c83a 	sub	r20,r20,r2
   17e40:	28026c16 	blt	r5,zero,187f4 <___svfiprintf_internal_r+0x128c>
   17e44:	00bfdfc4 	movi	r2,-129
   17e48:	80a0703a 	and	r16,r16,r2
   17e4c:	a03fb31e 	bne	r20,zero,17d1c <__alt_data_end+0xfc017d1c>
   17e50:	00004606 	br	17f6c <___svfiprintf_internal_r+0xa04>
   17e54:	9839883a 	mov	fp,r19
   17e58:	d8002515 	stw	zero,148(sp)
   17e5c:	1c3ff404 	addi	r16,r3,-48
   17e60:	0009883a 	mov	r4,zero
   17e64:	01400284 	movi	r5,10
   17e68:	000ccf40 	call	ccf4 <__mulsi3>
   17e6c:	e0c00007 	ldb	r3,0(fp)
   17e70:	8089883a 	add	r4,r16,r2
   17e74:	9cc00044 	addi	r19,r19,1
   17e78:	1c3ff404 	addi	r16,r3,-48
   17e7c:	9839883a 	mov	fp,r19
   17e80:	a43ff82e 	bgeu	r20,r16,17e64 <__alt_data_end+0xfc017e64>
   17e84:	d9002515 	stw	r4,148(sp)
   17e88:	18bff804 	addi	r2,r3,-32
   17e8c:	90be052e 	bgeu	r18,r2,176a4 <__alt_data_end+0xfc0176a4>
   17e90:	8821883a 	mov	r16,r17
   17e94:	dc402103 	ldbu	r17,132(sp)
   17e98:	b811883a 	mov	r8,r23
   17e9c:	8c403fcc 	andi	r17,r17,255
   17ea0:	88028d1e 	bne	r17,zero,188d8 <___svfiprintf_internal_r+0x1370>
   17ea4:	1800ea26 	beq	r3,zero,18250 <___svfiprintf_internal_r+0xce8>
   17ea8:	04800044 	movi	r18,1
   17eac:	d8c01005 	stb	r3,64(sp)
   17eb0:	d8001d85 	stb	zero,118(sp)
   17eb4:	9029883a 	mov	r20,r18
   17eb8:	dc401004 	addi	r17,sp,64
   17ebc:	003f1306 	br	17b0c <__alt_data_end+0xfc017b0c>
   17ec0:	8c402014 	ori	r17,r17,128
   17ec4:	98c00007 	ldb	r3,0(r19)
   17ec8:	003df306 	br	17698 <__alt_data_end+0xfc017698>
   17ecc:	98c00007 	ldb	r3,0(r19)
   17ed0:	01000a84 	movi	r4,42
   17ed4:	9f000044 	addi	fp,r19,1
   17ed8:	19026326 	beq	r3,r4,18868 <___svfiprintf_internal_r+0x1300>
   17edc:	1c3ff404 	addi	r16,r3,-48
   17ee0:	0009883a 	mov	r4,zero
   17ee4:	a4025636 	bltu	r20,r16,18840 <___svfiprintf_internal_r+0x12d8>
   17ee8:	01400284 	movi	r5,10
   17eec:	000ccf40 	call	ccf4 <__mulsi3>
   17ef0:	e0c00007 	ldb	r3,0(fp)
   17ef4:	1409883a 	add	r4,r2,r16
   17ef8:	e4c00044 	addi	r19,fp,1
   17efc:	1c3ff404 	addi	r16,r3,-48
   17f00:	9839883a 	mov	fp,r19
   17f04:	a43ff82e 	bgeu	r20,r16,17ee8 <__alt_data_end+0xfc017ee8>
   17f08:	20020c16 	blt	r4,zero,1873c <___svfiprintf_internal_r+0x11d4>
   17f0c:	d9002015 	stw	r4,128(sp)
   17f10:	003de206 	br	1769c <__alt_data_end+0xfc01769c>
   17f14:	8821883a 	mov	r16,r17
   17f18:	dc402103 	ldbu	r17,132(sp)
   17f1c:	b811883a 	mov	r8,r23
   17f20:	8c403fcc 	andi	r17,r17,255
   17f24:	8802721e 	bne	r17,zero,188f0 <___svfiprintf_internal_r+0x1388>
   17f28:	84000414 	ori	r16,r16,16
   17f2c:	8080080c 	andi	r2,r16,32
   17f30:	103e9f1e 	bne	r2,zero,179b0 <__alt_data_end+0xfc0179b0>
   17f34:	8080040c 	andi	r2,r16,16
   17f38:	10015326 	beq	r2,zero,18488 <___svfiprintf_internal_r+0xf20>
   17f3c:	d8c02417 	ldw	r3,144(sp)
   17f40:	d9002017 	ldw	r4,128(sp)
   17f44:	d8001d85 	stb	zero,118(sp)
   17f48:	18800104 	addi	r2,r3,4
   17f4c:	1c800017 	ldw	r18,0(r3)
   17f50:	0029883a 	mov	r20,zero
   17f54:	20015516 	blt	r4,zero,184ac <___svfiprintf_internal_r+0xf44>
   17f58:	00ffdfc4 	movi	r3,-129
   17f5c:	d8802415 	stw	r2,144(sp)
   17f60:	80e0703a 	and	r16,r16,r3
   17f64:	002b883a 	mov	r21,zero
   17f68:	903e9e26 	beq	r18,zero,179e4 <__alt_data_end+0xfc0179e4>
   17f6c:	00800244 	movi	r2,9
   17f70:	14bf6a36 	bltu	r2,r18,17d1c <__alt_data_end+0xfc017d1c>
   17f74:	94800c04 	addi	r18,r18,48
   17f78:	dc8019c5 	stb	r18,103(sp)
   17f7c:	dd002c17 	ldw	r20,176(sp)
   17f80:	dc4019c4 	addi	r17,sp,103
   17f84:	003e9c06 	br	179f8 <__alt_data_end+0xfc0179f8>
   17f88:	8821883a 	mov	r16,r17
   17f8c:	dc402103 	ldbu	r17,132(sp)
   17f90:	b811883a 	mov	r8,r23
   17f94:	8c403fcc 	andi	r17,r17,255
   17f98:	8802571e 	bne	r17,zero,188f8 <___svfiprintf_internal_r+0x1390>
   17f9c:	84000414 	ori	r16,r16,16
   17fa0:	8080080c 	andi	r2,r16,32
   17fa4:	103ea91e 	bne	r2,zero,17a4c <__alt_data_end+0xfc017a4c>
   17fa8:	8080040c 	andi	r2,r16,16
   17fac:	10018026 	beq	r2,zero,185b0 <___svfiprintf_internal_r+0x1048>
   17fb0:	d9402417 	ldw	r5,144(sp)
   17fb4:	d8c02017 	ldw	r3,128(sp)
   17fb8:	d8001d85 	stb	zero,118(sp)
   17fbc:	28800104 	addi	r2,r5,4
   17fc0:	2c800017 	ldw	r18,0(r5)
   17fc4:	0029883a 	mov	r20,zero
   17fc8:	18018216 	blt	r3,zero,185d4 <___svfiprintf_internal_r+0x106c>
   17fcc:	00ffdfc4 	movi	r3,-129
   17fd0:	d8802415 	stw	r2,144(sp)
   17fd4:	80e0703a 	and	r16,r16,r3
   17fd8:	903ea81e 	bne	r18,zero,17a7c <__alt_data_end+0xfc017a7c>
   17fdc:	d8802017 	ldw	r2,128(sp)
   17fe0:	002b883a 	mov	r21,zero
   17fe4:	1001f226 	beq	r2,zero,187b0 <___svfiprintf_internal_r+0x1248>
   17fe8:	0025883a 	mov	r18,zero
   17fec:	0029883a 	mov	r20,zero
   17ff0:	003ea306 	br	17a80 <__alt_data_end+0xfc017a80>
   17ff4:	d8c01c17 	ldw	r3,112(sp)
   17ff8:	d8801b17 	ldw	r2,108(sp)
   17ffc:	d9001d87 	ldb	r4,118(sp)
   18000:	20000b26 	beq	r4,zero,18030 <___svfiprintf_internal_r+0xac8>
   18004:	d9001d84 	addi	r4,sp,118
   18008:	18c00044 	addi	r3,r3,1
   1800c:	10800044 	addi	r2,r2,1
   18010:	41000015 	stw	r4,0(r8)
   18014:	01000044 	movi	r4,1
   18018:	41000115 	stw	r4,4(r8)
   1801c:	d8c01c15 	stw	r3,112(sp)
   18020:	d8801b15 	stw	r2,108(sp)
   18024:	010001c4 	movi	r4,7
   18028:	2080f316 	blt	r4,r2,183f8 <___svfiprintf_internal_r+0xe90>
   1802c:	42000204 	addi	r8,r8,8
   18030:	d9402117 	ldw	r5,132(sp)
   18034:	28000b26 	beq	r5,zero,18064 <___svfiprintf_internal_r+0xafc>
   18038:	d9001d04 	addi	r4,sp,116
   1803c:	18c00084 	addi	r3,r3,2
   18040:	10800044 	addi	r2,r2,1
   18044:	41000015 	stw	r4,0(r8)
   18048:	01000084 	movi	r4,2
   1804c:	41000115 	stw	r4,4(r8)
   18050:	d8c01c15 	stw	r3,112(sp)
   18054:	d8801b15 	stw	r2,108(sp)
   18058:	010001c4 	movi	r4,7
   1805c:	2080ef16 	blt	r4,r2,1841c <___svfiprintf_internal_r+0xeb4>
   18060:	42000204 	addi	r8,r8,8
   18064:	d9402217 	ldw	r5,136(sp)
   18068:	01002004 	movi	r4,128
   1806c:	29008f26 	beq	r5,r4,182ac <___svfiprintf_internal_r+0xd44>
   18070:	d9002017 	ldw	r4,128(sp)
   18074:	252fc83a 	sub	r23,r4,r20
   18078:	05c0310e 	bge	zero,r23,18140 <___svfiprintf_internal_r+0xbd8>
   1807c:	07000404 	movi	fp,16
   18080:	e5c17d0e 	bge	fp,r23,18678 <___svfiprintf_internal_r+0x1110>
   18084:	010000f4 	movhi	r4,3
   18088:	2125e004 	addi	r4,r4,-26752
   1808c:	dc002015 	stw	r16,128(sp)
   18090:	dc402215 	stw	r17,136(sp)
   18094:	d9002115 	stw	r4,132(sp)
   18098:	b823883a 	mov	r17,r23
   1809c:	054001c4 	movi	r21,7
   180a0:	982f883a 	mov	r23,r19
   180a4:	dc002717 	ldw	r16,156(sp)
   180a8:	9027883a 	mov	r19,r18
   180ac:	dc802317 	ldw	r18,140(sp)
   180b0:	00000306 	br	180c0 <___svfiprintf_internal_r+0xb58>
   180b4:	8c7ffc04 	addi	r17,r17,-16
   180b8:	42000204 	addi	r8,r8,8
   180bc:	e440110e 	bge	fp,r17,18104 <___svfiprintf_internal_r+0xb9c>
   180c0:	18c00404 	addi	r3,r3,16
   180c4:	10800044 	addi	r2,r2,1
   180c8:	45800015 	stw	r22,0(r8)
   180cc:	47000115 	stw	fp,4(r8)
   180d0:	d8c01c15 	stw	r3,112(sp)
   180d4:	d8801b15 	stw	r2,108(sp)
   180d8:	a8bff60e 	bge	r21,r2,180b4 <__alt_data_end+0xfc0180b4>
   180dc:	d9801a04 	addi	r6,sp,104
   180e0:	900b883a 	mov	r5,r18
   180e4:	8009883a 	mov	r4,r16
   180e8:	00173980 	call	17398 <__ssprint_r>
   180ec:	10005e1e 	bne	r2,zero,18268 <___svfiprintf_internal_r+0xd00>
   180f0:	8c7ffc04 	addi	r17,r17,-16
   180f4:	d8c01c17 	ldw	r3,112(sp)
   180f8:	d8801b17 	ldw	r2,108(sp)
   180fc:	d811883a 	mov	r8,sp
   18100:	e47fef16 	blt	fp,r17,180c0 <__alt_data_end+0xfc0180c0>
   18104:	9825883a 	mov	r18,r19
   18108:	dc002017 	ldw	r16,128(sp)
   1810c:	b827883a 	mov	r19,r23
   18110:	882f883a 	mov	r23,r17
   18114:	dc402217 	ldw	r17,136(sp)
   18118:	d9402117 	ldw	r5,132(sp)
   1811c:	1dc7883a 	add	r3,r3,r23
   18120:	10800044 	addi	r2,r2,1
   18124:	41400015 	stw	r5,0(r8)
   18128:	45c00115 	stw	r23,4(r8)
   1812c:	d8c01c15 	stw	r3,112(sp)
   18130:	d8801b15 	stw	r2,108(sp)
   18134:	010001c4 	movi	r4,7
   18138:	2080a616 	blt	r4,r2,183d4 <___svfiprintf_internal_r+0xe6c>
   1813c:	42000204 	addi	r8,r8,8
   18140:	a0c7883a 	add	r3,r20,r3
   18144:	10800044 	addi	r2,r2,1
   18148:	44400015 	stw	r17,0(r8)
   1814c:	45000115 	stw	r20,4(r8)
   18150:	d8c01c15 	stw	r3,112(sp)
   18154:	d8801b15 	stw	r2,108(sp)
   18158:	010001c4 	movi	r4,7
   1815c:	20808816 	blt	r4,r2,18380 <___svfiprintf_internal_r+0xe18>
   18160:	42000204 	addi	r8,r8,8
   18164:	8400010c 	andi	r16,r16,4
   18168:	80002c26 	beq	r16,zero,1821c <___svfiprintf_internal_r+0xcb4>
   1816c:	d8802517 	ldw	r2,148(sp)
   18170:	14a1c83a 	sub	r16,r2,r18
   18174:	0400290e 	bge	zero,r16,1821c <___svfiprintf_internal_r+0xcb4>
   18178:	04400404 	movi	r17,16
   1817c:	d8801b17 	ldw	r2,108(sp)
   18180:	8c01a70e 	bge	r17,r16,18820 <___svfiprintf_internal_r+0x12b8>
   18184:	014000f4 	movhi	r5,3
   18188:	2965e404 	addi	r5,r5,-26736
   1818c:	d9402815 	stw	r5,160(sp)
   18190:	050001c4 	movi	r20,7
   18194:	dd402717 	ldw	r21,156(sp)
   18198:	ddc02317 	ldw	r23,140(sp)
   1819c:	00000306 	br	181ac <___svfiprintf_internal_r+0xc44>
   181a0:	843ffc04 	addi	r16,r16,-16
   181a4:	42000204 	addi	r8,r8,8
   181a8:	8c00130e 	bge	r17,r16,181f8 <___svfiprintf_internal_r+0xc90>
   181ac:	010000f4 	movhi	r4,3
   181b0:	18c00404 	addi	r3,r3,16
   181b4:	10800044 	addi	r2,r2,1
   181b8:	2125e404 	addi	r4,r4,-26736
   181bc:	41000015 	stw	r4,0(r8)
   181c0:	44400115 	stw	r17,4(r8)
   181c4:	d8c01c15 	stw	r3,112(sp)
   181c8:	d8801b15 	stw	r2,108(sp)
   181cc:	a0bff40e 	bge	r20,r2,181a0 <__alt_data_end+0xfc0181a0>
   181d0:	d9801a04 	addi	r6,sp,104
   181d4:	b80b883a 	mov	r5,r23
   181d8:	a809883a 	mov	r4,r21
   181dc:	00173980 	call	17398 <__ssprint_r>
   181e0:	1000211e 	bne	r2,zero,18268 <___svfiprintf_internal_r+0xd00>
   181e4:	843ffc04 	addi	r16,r16,-16
   181e8:	d8c01c17 	ldw	r3,112(sp)
   181ec:	d8801b17 	ldw	r2,108(sp)
   181f0:	d811883a 	mov	r8,sp
   181f4:	8c3fed16 	blt	r17,r16,181ac <__alt_data_end+0xfc0181ac>
   181f8:	d9402817 	ldw	r5,160(sp)
   181fc:	1c07883a 	add	r3,r3,r16
   18200:	10800044 	addi	r2,r2,1
   18204:	41400015 	stw	r5,0(r8)
   18208:	44000115 	stw	r16,4(r8)
   1820c:	d8c01c15 	stw	r3,112(sp)
   18210:	d8801b15 	stw	r2,108(sp)
   18214:	010001c4 	movi	r4,7
   18218:	2080b516 	blt	r4,r2,184f0 <___svfiprintf_internal_r+0xf88>
   1821c:	d8802517 	ldw	r2,148(sp)
   18220:	1480010e 	bge	r2,r18,18228 <___svfiprintf_internal_r+0xcc0>
   18224:	9005883a 	mov	r2,r18
   18228:	d9002617 	ldw	r4,152(sp)
   1822c:	2089883a 	add	r4,r4,r2
   18230:	d9002615 	stw	r4,152(sp)
   18234:	18005a1e 	bne	r3,zero,183a0 <___svfiprintf_internal_r+0xe38>
   18238:	98800007 	ldb	r2,0(r19)
   1823c:	d8001b15 	stw	zero,108(sp)
   18240:	d811883a 	mov	r8,sp
   18244:	103cec1e 	bne	r2,zero,175f8 <__alt_data_end+0xfc0175f8>
   18248:	9825883a 	mov	r18,r19
   1824c:	003d0206 	br	17658 <__alt_data_end+0xfc017658>
   18250:	d8801c17 	ldw	r2,112(sp)
   18254:	10000426 	beq	r2,zero,18268 <___svfiprintf_internal_r+0xd00>
   18258:	d9402317 	ldw	r5,140(sp)
   1825c:	d9002717 	ldw	r4,156(sp)
   18260:	d9801a04 	addi	r6,sp,104
   18264:	00173980 	call	17398 <__ssprint_r>
   18268:	d9402317 	ldw	r5,140(sp)
   1826c:	d8802617 	ldw	r2,152(sp)
   18270:	28c0030b 	ldhu	r3,12(r5)
   18274:	18c0100c 	andi	r3,r3,64
   18278:	18015c1e 	bne	r3,zero,187ec <___svfiprintf_internal_r+0x1284>
   1827c:	dfc03717 	ldw	ra,220(sp)
   18280:	df003617 	ldw	fp,216(sp)
   18284:	ddc03517 	ldw	r23,212(sp)
   18288:	dd803417 	ldw	r22,208(sp)
   1828c:	dd403317 	ldw	r21,204(sp)
   18290:	dd003217 	ldw	r20,200(sp)
   18294:	dcc03117 	ldw	r19,196(sp)
   18298:	dc803017 	ldw	r18,192(sp)
   1829c:	dc402f17 	ldw	r17,188(sp)
   182a0:	dc002e17 	ldw	r16,184(sp)
   182a4:	dec03804 	addi	sp,sp,224
   182a8:	f800283a 	ret
   182ac:	d9002517 	ldw	r4,148(sp)
   182b0:	24afc83a 	sub	r23,r4,r18
   182b4:	05ff6e0e 	bge	zero,r23,18070 <__alt_data_end+0xfc018070>
   182b8:	07000404 	movi	fp,16
   182bc:	e5c15c0e 	bge	fp,r23,18830 <___svfiprintf_internal_r+0x12c8>
   182c0:	010000f4 	movhi	r4,3
   182c4:	2125e004 	addi	r4,r4,-26752
   182c8:	dc002215 	stw	r16,136(sp)
   182cc:	dc402815 	stw	r17,160(sp)
   182d0:	d9002115 	stw	r4,132(sp)
   182d4:	b823883a 	mov	r17,r23
   182d8:	054001c4 	movi	r21,7
   182dc:	982f883a 	mov	r23,r19
   182e0:	dc002717 	ldw	r16,156(sp)
   182e4:	9027883a 	mov	r19,r18
   182e8:	dc802317 	ldw	r18,140(sp)
   182ec:	00000306 	br	182fc <___svfiprintf_internal_r+0xd94>
   182f0:	8c7ffc04 	addi	r17,r17,-16
   182f4:	42000204 	addi	r8,r8,8
   182f8:	e440110e 	bge	fp,r17,18340 <___svfiprintf_internal_r+0xdd8>
   182fc:	18c00404 	addi	r3,r3,16
   18300:	10800044 	addi	r2,r2,1
   18304:	45800015 	stw	r22,0(r8)
   18308:	47000115 	stw	fp,4(r8)
   1830c:	d8c01c15 	stw	r3,112(sp)
   18310:	d8801b15 	stw	r2,108(sp)
   18314:	a8bff60e 	bge	r21,r2,182f0 <__alt_data_end+0xfc0182f0>
   18318:	d9801a04 	addi	r6,sp,104
   1831c:	900b883a 	mov	r5,r18
   18320:	8009883a 	mov	r4,r16
   18324:	00173980 	call	17398 <__ssprint_r>
   18328:	103fcf1e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   1832c:	8c7ffc04 	addi	r17,r17,-16
   18330:	d8c01c17 	ldw	r3,112(sp)
   18334:	d8801b17 	ldw	r2,108(sp)
   18338:	d811883a 	mov	r8,sp
   1833c:	e47fef16 	blt	fp,r17,182fc <__alt_data_end+0xfc0182fc>
   18340:	9825883a 	mov	r18,r19
   18344:	dc002217 	ldw	r16,136(sp)
   18348:	b827883a 	mov	r19,r23
   1834c:	882f883a 	mov	r23,r17
   18350:	dc402817 	ldw	r17,160(sp)
   18354:	d9402117 	ldw	r5,132(sp)
   18358:	1dc7883a 	add	r3,r3,r23
   1835c:	10800044 	addi	r2,r2,1
   18360:	41400015 	stw	r5,0(r8)
   18364:	45c00115 	stw	r23,4(r8)
   18368:	d8c01c15 	stw	r3,112(sp)
   1836c:	d8801b15 	stw	r2,108(sp)
   18370:	010001c4 	movi	r4,7
   18374:	2080b716 	blt	r4,r2,18654 <___svfiprintf_internal_r+0x10ec>
   18378:	42000204 	addi	r8,r8,8
   1837c:	003f3c06 	br	18070 <__alt_data_end+0xfc018070>
   18380:	d9402317 	ldw	r5,140(sp)
   18384:	d9002717 	ldw	r4,156(sp)
   18388:	d9801a04 	addi	r6,sp,104
   1838c:	00173980 	call	17398 <__ssprint_r>
   18390:	103fb51e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   18394:	d8c01c17 	ldw	r3,112(sp)
   18398:	d811883a 	mov	r8,sp
   1839c:	003f7106 	br	18164 <__alt_data_end+0xfc018164>
   183a0:	d9402317 	ldw	r5,140(sp)
   183a4:	d9002717 	ldw	r4,156(sp)
   183a8:	d9801a04 	addi	r6,sp,104
   183ac:	00173980 	call	17398 <__ssprint_r>
   183b0:	103fa126 	beq	r2,zero,18238 <__alt_data_end+0xfc018238>
   183b4:	003fac06 	br	18268 <__alt_data_end+0xfc018268>
   183b8:	d9402317 	ldw	r5,140(sp)
   183bc:	d9002717 	ldw	r4,156(sp)
   183c0:	d9801a04 	addi	r6,sp,104
   183c4:	00173980 	call	17398 <__ssprint_r>
   183c8:	103fa71e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   183cc:	d811883a 	mov	r8,sp
   183d0:	003c9e06 	br	1764c <__alt_data_end+0xfc01764c>
   183d4:	d9402317 	ldw	r5,140(sp)
   183d8:	d9002717 	ldw	r4,156(sp)
   183dc:	d9801a04 	addi	r6,sp,104
   183e0:	00173980 	call	17398 <__ssprint_r>
   183e4:	103fa01e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   183e8:	d8c01c17 	ldw	r3,112(sp)
   183ec:	d8801b17 	ldw	r2,108(sp)
   183f0:	d811883a 	mov	r8,sp
   183f4:	003f5206 	br	18140 <__alt_data_end+0xfc018140>
   183f8:	d9402317 	ldw	r5,140(sp)
   183fc:	d9002717 	ldw	r4,156(sp)
   18400:	d9801a04 	addi	r6,sp,104
   18404:	00173980 	call	17398 <__ssprint_r>
   18408:	103f971e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   1840c:	d8c01c17 	ldw	r3,112(sp)
   18410:	d8801b17 	ldw	r2,108(sp)
   18414:	d811883a 	mov	r8,sp
   18418:	003f0506 	br	18030 <__alt_data_end+0xfc018030>
   1841c:	d9402317 	ldw	r5,140(sp)
   18420:	d9002717 	ldw	r4,156(sp)
   18424:	d9801a04 	addi	r6,sp,104
   18428:	00173980 	call	17398 <__ssprint_r>
   1842c:	103f8e1e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   18430:	d8c01c17 	ldw	r3,112(sp)
   18434:	d8801b17 	ldw	r2,108(sp)
   18438:	d811883a 	mov	r8,sp
   1843c:	003f0906 	br	18064 <__alt_data_end+0xfc018064>
   18440:	d9402017 	ldw	r5,128(sp)
   18444:	d8001d85 	stb	zero,118(sp)
   18448:	28007716 	blt	r5,zero,18628 <___svfiprintf_internal_r+0x10c0>
   1844c:	00ffdfc4 	movi	r3,-129
   18450:	9504b03a 	or	r2,r18,r20
   18454:	80e0703a 	and	r16,r16,r3
   18458:	103d3926 	beq	r2,zero,17940 <__alt_data_end+0xfc017940>
   1845c:	002b883a 	mov	r21,zero
   18460:	003d3c06 	br	17954 <__alt_data_end+0xfc017954>
   18464:	d9402317 	ldw	r5,140(sp)
   18468:	d9002717 	ldw	r4,156(sp)
   1846c:	d9801a04 	addi	r6,sp,104
   18470:	00173980 	call	17398 <__ssprint_r>
   18474:	103f7c1e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   18478:	d8c01c17 	ldw	r3,112(sp)
   1847c:	d8801b17 	ldw	r2,108(sp)
   18480:	d811883a 	mov	r8,sp
   18484:	003edd06 	br	17ffc <__alt_data_end+0xfc017ffc>
   18488:	8080100c 	andi	r2,r16,64
   1848c:	d8001d85 	stb	zero,118(sp)
   18490:	10008426 	beq	r2,zero,186a4 <___svfiprintf_internal_r+0x113c>
   18494:	d9402417 	ldw	r5,144(sp)
   18498:	d8c02017 	ldw	r3,128(sp)
   1849c:	0029883a 	mov	r20,zero
   184a0:	28800104 	addi	r2,r5,4
   184a4:	2c80000b 	ldhu	r18,0(r5)
   184a8:	183eab0e 	bge	r3,zero,17f58 <__alt_data_end+0xfc017f58>
   184ac:	d8802415 	stw	r2,144(sp)
   184b0:	002b883a 	mov	r21,zero
   184b4:	9504b03a 	or	r2,r18,r20
   184b8:	103e171e 	bne	r2,zero,17d18 <__alt_data_end+0xfc017d18>
   184bc:	00800044 	movi	r2,1
   184c0:	10803fcc 	andi	r2,r2,255
   184c4:	00c00044 	movi	r3,1
   184c8:	10c05c26 	beq	r2,r3,1863c <___svfiprintf_internal_r+0x10d4>
   184cc:	00c00084 	movi	r3,2
   184d0:	10fd1e26 	beq	r2,r3,1794c <__alt_data_end+0xfc01794c>
   184d4:	003ec406 	br	17fe8 <__alt_data_end+0xfc017fe8>
   184d8:	d9401e17 	ldw	r5,120(sp)
   184dc:	2c69c83a 	sub	r20,r5,r17
   184e0:	003d4506 	br	179f8 <__alt_data_end+0xfc0179f8>
   184e4:	d8802415 	stw	r2,144(sp)
   184e8:	98c00007 	ldb	r3,0(r19)
   184ec:	003c6a06 	br	17698 <__alt_data_end+0xfc017698>
   184f0:	d9402317 	ldw	r5,140(sp)
   184f4:	d9002717 	ldw	r4,156(sp)
   184f8:	d9801a04 	addi	r6,sp,104
   184fc:	00173980 	call	17398 <__ssprint_r>
   18500:	103f591e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   18504:	d8c01c17 	ldw	r3,112(sp)
   18508:	003f4406 	br	1821c <__alt_data_end+0xfc01821c>
   1850c:	014000f4 	movhi	r5,3
   18510:	29657804 	addi	r5,r5,-27168
   18514:	d9402915 	stw	r5,164(sp)
   18518:	003d0906 	br	17940 <__alt_data_end+0xfc017940>
   1851c:	d8c02417 	ldw	r3,144(sp)
   18520:	d9002617 	ldw	r4,152(sp)
   18524:	d9402417 	ldw	r5,144(sp)
   18528:	18800017 	ldw	r2,0(r3)
   1852c:	2007d7fa 	srai	r3,r4,31
   18530:	29400104 	addi	r5,r5,4
   18534:	d9402415 	stw	r5,144(sp)
   18538:	11000015 	stw	r4,0(r2)
   1853c:	10c00115 	stw	r3,4(r2)
   18540:	003c2b06 	br	175f0 <__alt_data_end+0xfc0175f0>
   18544:	d8c01d45 	stb	r3,117(sp)
   18548:	d8c02017 	ldw	r3,128(sp)
   1854c:	00800c04 	movi	r2,48
   18550:	d8801d05 	stb	r2,116(sp)
   18554:	d8001d85 	stb	zero,118(sp)
   18558:	80800094 	ori	r2,r16,2
   1855c:	1800ac16 	blt	r3,zero,18810 <___svfiprintf_internal_r+0x12a8>
   18560:	00bfdfc4 	movi	r2,-129
   18564:	80a0703a 	and	r16,r16,r2
   18568:	84000094 	ori	r16,r16,2
   1856c:	002b883a 	mov	r21,zero
   18570:	003cf806 	br	17954 <__alt_data_end+0xfc017954>
   18574:	98c00007 	ldb	r3,0(r19)
   18578:	003c4706 	br	17698 <__alt_data_end+0xfc017698>
   1857c:	d9402417 	ldw	r5,144(sp)
   18580:	2c800017 	ldw	r18,0(r5)
   18584:	29400104 	addi	r5,r5,4
   18588:	d9402415 	stw	r5,144(sp)
   1858c:	9029d7fa 	srai	r20,r18,31
   18590:	a005883a 	mov	r2,r20
   18594:	003dd806 	br	17cf8 <__alt_data_end+0xfc017cf8>
   18598:	d9402417 	ldw	r5,144(sp)
   1859c:	0029883a 	mov	r20,zero
   185a0:	2c800017 	ldw	r18,0(r5)
   185a4:	29400104 	addi	r5,r5,4
   185a8:	d9402415 	stw	r5,144(sp)
   185ac:	003cdb06 	br	1791c <__alt_data_end+0xfc01791c>
   185b0:	8080100c 	andi	r2,r16,64
   185b4:	d8001d85 	stb	zero,118(sp)
   185b8:	10003326 	beq	r2,zero,18688 <___svfiprintf_internal_r+0x1120>
   185bc:	d9002417 	ldw	r4,144(sp)
   185c0:	d9402017 	ldw	r5,128(sp)
   185c4:	0029883a 	mov	r20,zero
   185c8:	20800104 	addi	r2,r4,4
   185cc:	2480000b 	ldhu	r18,0(r4)
   185d0:	283e7e0e 	bge	r5,zero,17fcc <__alt_data_end+0xfc017fcc>
   185d4:	9506b03a 	or	r3,r18,r20
   185d8:	d8802415 	stw	r2,144(sp)
   185dc:	183d271e 	bne	r3,zero,17a7c <__alt_data_end+0xfc017a7c>
   185e0:	002b883a 	mov	r21,zero
   185e4:	0005883a 	mov	r2,zero
   185e8:	003fb506 	br	184c0 <__alt_data_end+0xfc0184c0>
   185ec:	98c00043 	ldbu	r3,1(r19)
   185f0:	8c400814 	ori	r17,r17,32
   185f4:	9cc00044 	addi	r19,r19,1
   185f8:	18c03fcc 	andi	r3,r3,255
   185fc:	18c0201c 	xori	r3,r3,128
   18600:	18ffe004 	addi	r3,r3,-128
   18604:	003c2406 	br	17698 <__alt_data_end+0xfc017698>
   18608:	d8c02415 	stw	r3,144(sp)
   1860c:	002b883a 	mov	r21,zero
   18610:	003fa806 	br	184b4 <__alt_data_end+0xfc0184b4>
   18614:	010000f4 	movhi	r4,3
   18618:	21257804 	addi	r4,r4,-27168
   1861c:	d9002915 	stw	r4,164(sp)
   18620:	d8c02415 	stw	r3,144(sp)
   18624:	1021883a 	mov	r16,r2
   18628:	9504b03a 	or	r2,r18,r20
   1862c:	103f8b1e 	bne	r2,zero,1845c <__alt_data_end+0xfc01845c>
   18630:	002b883a 	mov	r21,zero
   18634:	00800084 	movi	r2,2
   18638:	003fa106 	br	184c0 <__alt_data_end+0xfc0184c0>
   1863c:	0025883a 	mov	r18,zero
   18640:	94800c04 	addi	r18,r18,48
   18644:	dc8019c5 	stb	r18,103(sp)
   18648:	dd002c17 	ldw	r20,176(sp)
   1864c:	dc4019c4 	addi	r17,sp,103
   18650:	003ce906 	br	179f8 <__alt_data_end+0xfc0179f8>
   18654:	d9402317 	ldw	r5,140(sp)
   18658:	d9002717 	ldw	r4,156(sp)
   1865c:	d9801a04 	addi	r6,sp,104
   18660:	00173980 	call	17398 <__ssprint_r>
   18664:	103f001e 	bne	r2,zero,18268 <__alt_data_end+0xfc018268>
   18668:	d8c01c17 	ldw	r3,112(sp)
   1866c:	d8801b17 	ldw	r2,108(sp)
   18670:	d811883a 	mov	r8,sp
   18674:	003e7e06 	br	18070 <__alt_data_end+0xfc018070>
   18678:	014000f4 	movhi	r5,3
   1867c:	2965e004 	addi	r5,r5,-26752
   18680:	d9402115 	stw	r5,132(sp)
   18684:	003ea406 	br	18118 <__alt_data_end+0xfc018118>
   18688:	d8c02417 	ldw	r3,144(sp)
   1868c:	d9002017 	ldw	r4,128(sp)
   18690:	0029883a 	mov	r20,zero
   18694:	18800104 	addi	r2,r3,4
   18698:	1c800017 	ldw	r18,0(r3)
   1869c:	203e4b0e 	bge	r4,zero,17fcc <__alt_data_end+0xfc017fcc>
   186a0:	003fcc06 	br	185d4 <__alt_data_end+0xfc0185d4>
   186a4:	d9002417 	ldw	r4,144(sp)
   186a8:	d9402017 	ldw	r5,128(sp)
   186ac:	0029883a 	mov	r20,zero
   186b0:	20800104 	addi	r2,r4,4
   186b4:	24800017 	ldw	r18,0(r4)
   186b8:	283e270e 	bge	r5,zero,17f58 <__alt_data_end+0xfc017f58>
   186bc:	003f7b06 	br	184ac <__alt_data_end+0xfc0184ac>
   186c0:	8400100c 	andi	r16,r16,64
   186c4:	80003326 	beq	r16,zero,18794 <___svfiprintf_internal_r+0x122c>
   186c8:	d9402417 	ldw	r5,144(sp)
   186cc:	d8c02617 	ldw	r3,152(sp)
   186d0:	28800017 	ldw	r2,0(r5)
   186d4:	29400104 	addi	r5,r5,4
   186d8:	d9402415 	stw	r5,144(sp)
   186dc:	10c0000d 	sth	r3,0(r2)
   186e0:	003bc306 	br	175f0 <__alt_data_end+0xfc0175f0>
   186e4:	d9002417 	ldw	r4,144(sp)
   186e8:	0029883a 	mov	r20,zero
   186ec:	24800017 	ldw	r18,0(r4)
   186f0:	21000104 	addi	r4,r4,4
   186f4:	d9002415 	stw	r4,144(sp)
   186f8:	003c8806 	br	1791c <__alt_data_end+0xfc01791c>
   186fc:	d8c02417 	ldw	r3,144(sp)
   18700:	1c800017 	ldw	r18,0(r3)
   18704:	18c00104 	addi	r3,r3,4
   18708:	d8c02415 	stw	r3,144(sp)
   1870c:	9029d7fa 	srai	r20,r18,31
   18710:	a005883a 	mov	r2,r20
   18714:	003d7806 	br	17cf8 <__alt_data_end+0xfc017cf8>
   18718:	8809883a 	mov	r4,r17
   1871c:	da002d15 	stw	r8,180(sp)
   18720:	000e39c0 	call	e39c <strlen>
   18724:	1029883a 	mov	r20,r2
   18728:	dd401d83 	ldbu	r21,118(sp)
   1872c:	ddc02415 	stw	r23,144(sp)
   18730:	d8002015 	stw	zero,128(sp)
   18734:	da002d17 	ldw	r8,180(sp)
   18738:	003caf06 	br	179f8 <__alt_data_end+0xfc0179f8>
   1873c:	013fffc4 	movi	r4,-1
   18740:	003df206 	br	17f0c <__alt_data_end+0xfc017f0c>
   18744:	dd002017 	ldw	r20,128(sp)
   18748:	00800184 	movi	r2,6
   1874c:	1500012e 	bgeu	r2,r20,18754 <___svfiprintf_internal_r+0x11ec>
   18750:	1029883a 	mov	r20,r2
   18754:	a025883a 	mov	r18,r20
   18758:	a0004116 	blt	r20,zero,18860 <___svfiprintf_internal_r+0x12f8>
   1875c:	044000f4 	movhi	r17,3
   18760:	ddc02415 	stw	r23,144(sp)
   18764:	8c657d04 	addi	r17,r17,-27148
   18768:	003ce806 	br	17b0c <__alt_data_end+0xfc017b0c>
   1876c:	04001004 	movi	r16,64
   18770:	800b883a 	mov	r5,r16
   18774:	000d2c80 	call	d2c8 <_malloc_r>
   18778:	d8c02317 	ldw	r3,140(sp)
   1877c:	18800015 	stw	r2,0(r3)
   18780:	18800415 	stw	r2,16(r3)
   18784:	10004d26 	beq	r2,zero,188bc <___svfiprintf_internal_r+0x1354>
   18788:	d9402317 	ldw	r5,140(sp)
   1878c:	2c000515 	stw	r16,20(r5)
   18790:	003b8906 	br	175b8 <__alt_data_end+0xfc0175b8>
   18794:	d9002417 	ldw	r4,144(sp)
   18798:	d9402617 	ldw	r5,152(sp)
   1879c:	20800017 	ldw	r2,0(r4)
   187a0:	21000104 	addi	r4,r4,4
   187a4:	d9002415 	stw	r4,144(sp)
   187a8:	11400015 	stw	r5,0(r2)
   187ac:	003b9006 	br	175f0 <__alt_data_end+0xfc0175f0>
   187b0:	8080004c 	andi	r2,r16,1
   187b4:	002b883a 	mov	r21,zero
   187b8:	10000526 	beq	r2,zero,187d0 <___svfiprintf_internal_r+0x1268>
   187bc:	00800c04 	movi	r2,48
   187c0:	d88019c5 	stb	r2,103(sp)
   187c4:	dd002c17 	ldw	r20,176(sp)
   187c8:	dc4019c4 	addi	r17,sp,103
   187cc:	003c8a06 	br	179f8 <__alt_data_end+0xfc0179f8>
   187d0:	0029883a 	mov	r20,zero
   187d4:	dc401a04 	addi	r17,sp,104
   187d8:	003c8706 	br	179f8 <__alt_data_end+0xfc0179f8>
   187dc:	014000f4 	movhi	r5,3
   187e0:	2965e404 	addi	r5,r5,-26736
   187e4:	d9402815 	stw	r5,160(sp)
   187e8:	003cff06 	br	17be8 <__alt_data_end+0xfc017be8>
   187ec:	00bfffc4 	movi	r2,-1
   187f0:	003ea206 	br	1827c <__alt_data_end+0xfc01827c>
   187f4:	00800044 	movi	r2,1
   187f8:	10803fcc 	andi	r2,r2,255
   187fc:	00c00044 	movi	r3,1
   18800:	10fd4526 	beq	r2,r3,17d18 <__alt_data_end+0xfc017d18>
   18804:	00c00084 	movi	r3,2
   18808:	10fc5226 	beq	r2,r3,17954 <__alt_data_end+0xfc017954>
   1880c:	003c9c06 	br	17a80 <__alt_data_end+0xfc017a80>
   18810:	1021883a 	mov	r16,r2
   18814:	002b883a 	mov	r21,zero
   18818:	00800084 	movi	r2,2
   1881c:	003ff606 	br	187f8 <__alt_data_end+0xfc0187f8>
   18820:	010000f4 	movhi	r4,3
   18824:	2125e404 	addi	r4,r4,-26736
   18828:	d9002815 	stw	r4,160(sp)
   1882c:	003e7206 	br	181f8 <__alt_data_end+0xfc0181f8>
   18830:	014000f4 	movhi	r5,3
   18834:	2965e004 	addi	r5,r5,-26752
   18838:	d9402115 	stw	r5,132(sp)
   1883c:	003ec506 	br	18354 <__alt_data_end+0xfc018354>
   18840:	e027883a 	mov	r19,fp
   18844:	d8002015 	stw	zero,128(sp)
   18848:	003b9406 	br	1769c <__alt_data_end+0xfc01769c>
   1884c:	dd002017 	ldw	r20,128(sp)
   18850:	dd401d83 	ldbu	r21,118(sp)
   18854:	ddc02415 	stw	r23,144(sp)
   18858:	d8002015 	stw	zero,128(sp)
   1885c:	003c6606 	br	179f8 <__alt_data_end+0xfc0179f8>
   18860:	0025883a 	mov	r18,zero
   18864:	003fbd06 	br	1875c <__alt_data_end+0xfc01875c>
   18868:	d9402417 	ldw	r5,144(sp)
   1886c:	d8c02417 	ldw	r3,144(sp)
   18870:	29400017 	ldw	r5,0(r5)
   18874:	19000104 	addi	r4,r3,4
   18878:	d9002415 	stw	r4,144(sp)
   1887c:	d9402015 	stw	r5,128(sp)
   18880:	98c00043 	ldbu	r3,1(r19)
   18884:	e027883a 	mov	r19,fp
   18888:	283f5b0e 	bge	r5,zero,185f8 <__alt_data_end+0xfc0185f8>
   1888c:	18c03fcc 	andi	r3,r3,255
   18890:	013fffc4 	movi	r4,-1
   18894:	18c0201c 	xori	r3,r3,128
   18898:	d9002015 	stw	r4,128(sp)
   1889c:	18ffe004 	addi	r3,r3,-128
   188a0:	003b7d06 	br	17698 <__alt_data_end+0xfc017698>
   188a4:	dd401d85 	stb	r21,118(sp)
   188a8:	003cf306 	br	17c78 <__alt_data_end+0xfc017c78>
   188ac:	dd401d85 	stb	r21,118(sp)
   188b0:	003d4e06 	br	17dec <__alt_data_end+0xfc017dec>
   188b4:	dd401d85 	stb	r21,118(sp)
   188b8:	003c0e06 	br	178f4 <__alt_data_end+0xfc0178f4>
   188bc:	d9002717 	ldw	r4,156(sp)
   188c0:	00800304 	movi	r2,12
   188c4:	20800015 	stw	r2,0(r4)
   188c8:	00bfffc4 	movi	r2,-1
   188cc:	003e6b06 	br	1827c <__alt_data_end+0xfc01827c>
   188d0:	dd401d85 	stb	r21,118(sp)
   188d4:	003d0006 	br	17cd8 <__alt_data_end+0xfc017cd8>
   188d8:	dd401d85 	stb	r21,118(sp)
   188dc:	003d7106 	br	17ea4 <__alt_data_end+0xfc017ea4>
   188e0:	dd401d85 	stb	r21,118(sp)
   188e4:	003c5706 	br	17a44 <__alt_data_end+0xfc017a44>
   188e8:	dd401d85 	stb	r21,118(sp)
   188ec:	003c2e06 	br	179a8 <__alt_data_end+0xfc0179a8>
   188f0:	dd401d85 	stb	r21,118(sp)
   188f4:	003d8c06 	br	17f28 <__alt_data_end+0xfc017f28>
   188f8:	dd401d85 	stb	r21,118(sp)
   188fc:	003da706 	br	17f9c <__alt_data_end+0xfc017f9c>
   18900:	dd401d85 	stb	r21,118(sp)
   18904:	003cc806 	br	17c28 <__alt_data_end+0xfc017c28>

00018908 <__sprint_r.part.0>:
   18908:	28801917 	ldw	r2,100(r5)
   1890c:	defff604 	addi	sp,sp,-40
   18910:	dd400515 	stw	r21,20(sp)
   18914:	dfc00915 	stw	ra,36(sp)
   18918:	df000815 	stw	fp,32(sp)
   1891c:	ddc00715 	stw	r23,28(sp)
   18920:	dd800615 	stw	r22,24(sp)
   18924:	dd000415 	stw	r20,16(sp)
   18928:	dcc00315 	stw	r19,12(sp)
   1892c:	dc800215 	stw	r18,8(sp)
   18930:	dc400115 	stw	r17,4(sp)
   18934:	dc000015 	stw	r16,0(sp)
   18938:	1088000c 	andi	r2,r2,8192
   1893c:	302b883a 	mov	r21,r6
   18940:	10002e26 	beq	r2,zero,189fc <__sprint_r.part.0+0xf4>
   18944:	30800217 	ldw	r2,8(r6)
   18948:	35800017 	ldw	r22,0(r6)
   1894c:	10002926 	beq	r2,zero,189f4 <__sprint_r.part.0+0xec>
   18950:	2827883a 	mov	r19,r5
   18954:	2029883a 	mov	r20,r4
   18958:	b5c00104 	addi	r23,r22,4
   1895c:	04bfffc4 	movi	r18,-1
   18960:	bc400017 	ldw	r17,0(r23)
   18964:	b4000017 	ldw	r16,0(r22)
   18968:	0039883a 	mov	fp,zero
   1896c:	8822d0ba 	srli	r17,r17,2
   18970:	8800031e 	bne	r17,zero,18980 <__sprint_r.part.0+0x78>
   18974:	00001806 	br	189d8 <__sprint_r.part.0+0xd0>
   18978:	84000104 	addi	r16,r16,4
   1897c:	8f001526 	beq	r17,fp,189d4 <__sprint_r.part.0+0xcc>
   18980:	81400017 	ldw	r5,0(r16)
   18984:	980d883a 	mov	r6,r19
   18988:	a009883a 	mov	r4,r20
   1898c:	001a5500 	call	1a550 <_fputwc_r>
   18990:	e7000044 	addi	fp,fp,1
   18994:	14bff81e 	bne	r2,r18,18978 <__alt_data_end+0xfc018978>
   18998:	9005883a 	mov	r2,r18
   1899c:	a8000215 	stw	zero,8(r21)
   189a0:	a8000115 	stw	zero,4(r21)
   189a4:	dfc00917 	ldw	ra,36(sp)
   189a8:	df000817 	ldw	fp,32(sp)
   189ac:	ddc00717 	ldw	r23,28(sp)
   189b0:	dd800617 	ldw	r22,24(sp)
   189b4:	dd400517 	ldw	r21,20(sp)
   189b8:	dd000417 	ldw	r20,16(sp)
   189bc:	dcc00317 	ldw	r19,12(sp)
   189c0:	dc800217 	ldw	r18,8(sp)
   189c4:	dc400117 	ldw	r17,4(sp)
   189c8:	dc000017 	ldw	r16,0(sp)
   189cc:	dec00a04 	addi	sp,sp,40
   189d0:	f800283a 	ret
   189d4:	a8800217 	ldw	r2,8(r21)
   189d8:	8c63883a 	add	r17,r17,r17
   189dc:	8c63883a 	add	r17,r17,r17
   189e0:	1445c83a 	sub	r2,r2,r17
   189e4:	a8800215 	stw	r2,8(r21)
   189e8:	b5800204 	addi	r22,r22,8
   189ec:	bdc00204 	addi	r23,r23,8
   189f0:	103fdb1e 	bne	r2,zero,18960 <__alt_data_end+0xfc018960>
   189f4:	0005883a 	mov	r2,zero
   189f8:	003fe806 	br	1899c <__alt_data_end+0xfc01899c>
   189fc:	0014f3c0 	call	14f3c <__sfvwrite_r>
   18a00:	003fe606 	br	1899c <__alt_data_end+0xfc01899c>

00018a04 <__sprint_r>:
   18a04:	30c00217 	ldw	r3,8(r6)
   18a08:	18000126 	beq	r3,zero,18a10 <__sprint_r+0xc>
   18a0c:	00189081 	jmpi	18908 <__sprint_r.part.0>
   18a10:	30000115 	stw	zero,4(r6)
   18a14:	0005883a 	mov	r2,zero
   18a18:	f800283a 	ret

00018a1c <___vfiprintf_internal_r>:
   18a1c:	deffca04 	addi	sp,sp,-216
   18a20:	dd403115 	stw	r21,196(sp)
   18a24:	dfc03515 	stw	ra,212(sp)
   18a28:	df003415 	stw	fp,208(sp)
   18a2c:	ddc03315 	stw	r23,204(sp)
   18a30:	dd803215 	stw	r22,200(sp)
   18a34:	dd003015 	stw	r20,192(sp)
   18a38:	dcc02f15 	stw	r19,188(sp)
   18a3c:	dc802e15 	stw	r18,184(sp)
   18a40:	dc402d15 	stw	r17,180(sp)
   18a44:	dc002c15 	stw	r16,176(sp)
   18a48:	d9002115 	stw	r4,132(sp)
   18a4c:	d9402015 	stw	r5,128(sp)
   18a50:	d9c02215 	stw	r7,136(sp)
   18a54:	302b883a 	mov	r21,r6
   18a58:	20000226 	beq	r4,zero,18a64 <___vfiprintf_internal_r+0x48>
   18a5c:	20800e17 	ldw	r2,56(r4)
   18a60:	1000cf26 	beq	r2,zero,18da0 <___vfiprintf_internal_r+0x384>
   18a64:	d8c02017 	ldw	r3,128(sp)
   18a68:	1880030b 	ldhu	r2,12(r3)
   18a6c:	10c8000c 	andi	r3,r2,8192
   18a70:	1800071e 	bne	r3,zero,18a90 <___vfiprintf_internal_r+0x74>
   18a74:	d9402017 	ldw	r5,128(sp)
   18a78:	00f7ffc4 	movi	r3,-8193
   18a7c:	10880014 	ori	r2,r2,8192
   18a80:	29001917 	ldw	r4,100(r5)
   18a84:	2880030d 	sth	r2,12(r5)
   18a88:	20c6703a 	and	r3,r4,r3
   18a8c:	28c01915 	stw	r3,100(r5)
   18a90:	10c0020c 	andi	r3,r2,8
   18a94:	1800a526 	beq	r3,zero,18d2c <___vfiprintf_internal_r+0x310>
   18a98:	d9002017 	ldw	r4,128(sp)
   18a9c:	20c00417 	ldw	r3,16(r4)
   18aa0:	1800a226 	beq	r3,zero,18d2c <___vfiprintf_internal_r+0x310>
   18aa4:	1080068c 	andi	r2,r2,26
   18aa8:	00c00284 	movi	r3,10
   18aac:	10c0a826 	beq	r2,r3,18d50 <___vfiprintf_internal_r+0x334>
   18ab0:	d9001a04 	addi	r4,sp,104
   18ab4:	d94019c4 	addi	r5,sp,103
   18ab8:	048000f4 	movhi	r18,3
   18abc:	2145c83a 	sub	r2,r4,r5
   18ac0:	94a5e804 	addi	r18,r18,-26720
   18ac4:	d9001e15 	stw	r4,120(sp)
   18ac8:	d9401f15 	stw	r5,124(sp)
   18acc:	dec01a15 	stw	sp,104(sp)
   18ad0:	d8001c15 	stw	zero,112(sp)
   18ad4:	d8001b15 	stw	zero,108(sp)
   18ad8:	d811883a 	mov	r8,sp
   18adc:	d8002615 	stw	zero,152(sp)
   18ae0:	d8002415 	stw	zero,144(sp)
   18ae4:	d8802815 	stw	r2,160(sp)
   18ae8:	a82d883a 	mov	r22,r21
   18aec:	b0800007 	ldb	r2,0(r22)
   18af0:	10040d26 	beq	r2,zero,19b28 <___vfiprintf_internal_r+0x110c>
   18af4:	00c00944 	movi	r3,37
   18af8:	b029883a 	mov	r20,r22
   18afc:	10c0021e 	bne	r2,r3,18b08 <___vfiprintf_internal_r+0xec>
   18b00:	00001606 	br	18b5c <___vfiprintf_internal_r+0x140>
   18b04:	10c00326 	beq	r2,r3,18b14 <___vfiprintf_internal_r+0xf8>
   18b08:	a5000044 	addi	r20,r20,1
   18b0c:	a0800007 	ldb	r2,0(r20)
   18b10:	103ffc1e 	bne	r2,zero,18b04 <__alt_data_end+0xfc018b04>
   18b14:	a5a1c83a 	sub	r16,r20,r22
   18b18:	80001026 	beq	r16,zero,18b5c <___vfiprintf_internal_r+0x140>
   18b1c:	d8c01c17 	ldw	r3,112(sp)
   18b20:	d8801b17 	ldw	r2,108(sp)
   18b24:	45800015 	stw	r22,0(r8)
   18b28:	80c7883a 	add	r3,r16,r3
   18b2c:	10800044 	addi	r2,r2,1
   18b30:	44000115 	stw	r16,4(r8)
   18b34:	d8c01c15 	stw	r3,112(sp)
   18b38:	d8801b15 	stw	r2,108(sp)
   18b3c:	010001c4 	movi	r4,7
   18b40:	2080750e 	bge	r4,r2,18d18 <___vfiprintf_internal_r+0x2fc>
   18b44:	1803951e 	bne	r3,zero,1999c <___vfiprintf_internal_r+0xf80>
   18b48:	d8c02417 	ldw	r3,144(sp)
   18b4c:	d8001b15 	stw	zero,108(sp)
   18b50:	d811883a 	mov	r8,sp
   18b54:	1c07883a 	add	r3,r3,r16
   18b58:	d8c02415 	stw	r3,144(sp)
   18b5c:	a0800007 	ldb	r2,0(r20)
   18b60:	1002e026 	beq	r2,zero,196e4 <___vfiprintf_internal_r+0xcc8>
   18b64:	a5800044 	addi	r22,r20,1
   18b68:	a0c00047 	ldb	r3,1(r20)
   18b6c:	d8001d85 	stb	zero,118(sp)
   18b70:	0027883a 	mov	r19,zero
   18b74:	d8002305 	stb	zero,140(sp)
   18b78:	043fffc4 	movi	r16,-1
   18b7c:	d8002515 	stw	zero,148(sp)
   18b80:	0023883a 	mov	r17,zero
   18b84:	05001604 	movi	r20,88
   18b88:	05400244 	movi	r21,9
   18b8c:	402f883a 	mov	r23,r8
   18b90:	b5800044 	addi	r22,r22,1
   18b94:	18bff804 	addi	r2,r3,-32
   18b98:	a0827736 	bltu	r20,r2,19578 <___vfiprintf_internal_r+0xb5c>
   18b9c:	100490ba 	slli	r2,r2,2
   18ba0:	010000b4 	movhi	r4,2
   18ba4:	2122ed04 	addi	r4,r4,-29772
   18ba8:	1105883a 	add	r2,r2,r4
   18bac:	10800017 	ldw	r2,0(r2)
   18bb0:	1000683a 	jmp	r2
   18bb4:	00019278 	rdprs	zero,zero,1609
   18bb8:	00019578 	rdprs	zero,zero,1621
   18bbc:	00019578 	rdprs	zero,zero,1621
   18bc0:	00019294 	movui	zero,1610
   18bc4:	00019578 	rdprs	zero,zero,1621
   18bc8:	00019578 	rdprs	zero,zero,1621
   18bcc:	00019578 	rdprs	zero,zero,1621
   18bd0:	00019578 	rdprs	zero,zero,1621
   18bd4:	00019578 	rdprs	zero,zero,1621
   18bd8:	00019578 	rdprs	zero,zero,1621
   18bdc:	0001949c 	xori	zero,zero,1618
   18be0:	000194c0 	call	194c <_ZN3USB4TaskEv+0x130>
   18be4:	00019578 	rdprs	zero,zero,1621
   18be8:	00018db8 	rdprs	zero,zero,1590
   18bec:	000194d4 	movui	zero,1619
   18bf0:	00019578 	rdprs	zero,zero,1621
   18bf4:	000192a0 	cmpeqi	zero,zero,1610
   18bf8:	000192ac 	andhi	zero,zero,1610
   18bfc:	000192ac 	andhi	zero,zero,1610
   18c00:	000192ac 	andhi	zero,zero,1610
   18c04:	000192ac 	andhi	zero,zero,1610
   18c08:	000192ac 	andhi	zero,zero,1610
   18c0c:	000192ac 	andhi	zero,zero,1610
   18c10:	000192ac 	andhi	zero,zero,1610
   18c14:	000192ac 	andhi	zero,zero,1610
   18c18:	000192ac 	andhi	zero,zero,1610
   18c1c:	00019578 	rdprs	zero,zero,1621
   18c20:	00019578 	rdprs	zero,zero,1621
   18c24:	00019578 	rdprs	zero,zero,1621
   18c28:	00019578 	rdprs	zero,zero,1621
   18c2c:	00019578 	rdprs	zero,zero,1621
   18c30:	00019578 	rdprs	zero,zero,1621
   18c34:	00019578 	rdprs	zero,zero,1621
   18c38:	00019578 	rdprs	zero,zero,1621
   18c3c:	00019578 	rdprs	zero,zero,1621
   18c40:	00019578 	rdprs	zero,zero,1621
   18c44:	000192ec 	andhi	zero,zero,1611
   18c48:	00019578 	rdprs	zero,zero,1621
   18c4c:	00019578 	rdprs	zero,zero,1621
   18c50:	00019578 	rdprs	zero,zero,1621
   18c54:	00019578 	rdprs	zero,zero,1621
   18c58:	00019578 	rdprs	zero,zero,1621
   18c5c:	00019578 	rdprs	zero,zero,1621
   18c60:	00019578 	rdprs	zero,zero,1621
   18c64:	00019578 	rdprs	zero,zero,1621
   18c68:	00019578 	rdprs	zero,zero,1621
   18c6c:	00019578 	rdprs	zero,zero,1621
   18c70:	00019328 	cmpgeui	zero,zero,1612
   18c74:	00019578 	rdprs	zero,zero,1621
   18c78:	00019578 	rdprs	zero,zero,1621
   18c7c:	00019578 	rdprs	zero,zero,1621
   18c80:	00019578 	rdprs	zero,zero,1621
   18c84:	00019578 	rdprs	zero,zero,1621
   18c88:	00019384 	movi	zero,1614
   18c8c:	00019578 	rdprs	zero,zero,1621
   18c90:	00019578 	rdprs	zero,zero,1621
   18c94:	000193f8 	rdprs	zero,zero,1615
   18c98:	00019578 	rdprs	zero,zero,1621
   18c9c:	00019578 	rdprs	zero,zero,1621
   18ca0:	00019578 	rdprs	zero,zero,1621
   18ca4:	00019578 	rdprs	zero,zero,1621
   18ca8:	00019578 	rdprs	zero,zero,1621
   18cac:	00019578 	rdprs	zero,zero,1621
   18cb0:	00019578 	rdprs	zero,zero,1621
   18cb4:	00019578 	rdprs	zero,zero,1621
   18cb8:	00019578 	rdprs	zero,zero,1621
   18cbc:	00019578 	rdprs	zero,zero,1621
   18cc0:	000191a0 	cmpeqi	zero,zero,1606
   18cc4:	000191d0 	cmplti	zero,zero,1607
   18cc8:	00019578 	rdprs	zero,zero,1621
   18ccc:	00019578 	rdprs	zero,zero,1621
   18cd0:	00019578 	rdprs	zero,zero,1621
   18cd4:	00019520 	cmpeqi	zero,zero,1620
   18cd8:	000191d0 	cmplti	zero,zero,1607
   18cdc:	00019578 	rdprs	zero,zero,1621
   18ce0:	00019578 	rdprs	zero,zero,1621
   18ce4:	00019078 	rdprs	zero,zero,1601
   18ce8:	00019578 	rdprs	zero,zero,1621
   18cec:	0001908c 	andi	zero,zero,1602
   18cf0:	000190c4 	movi	zero,1603
   18cf4:	00018dc4 	movi	zero,1591
   18cf8:	0001906c 	andhi	zero,zero,1601
   18cfc:	00019578 	rdprs	zero,zero,1621
   18d00:	00019438 	rdprs	zero,zero,1616
   18d04:	00019578 	rdprs	zero,zero,1621
   18d08:	00019484 	movi	zero,1618
   18d0c:	00019578 	rdprs	zero,zero,1621
   18d10:	00019578 	rdprs	zero,zero,1621
   18d14:	00019148 	cmpgei	zero,zero,1605
   18d18:	42000204 	addi	r8,r8,8
   18d1c:	d8c02417 	ldw	r3,144(sp)
   18d20:	1c07883a 	add	r3,r3,r16
   18d24:	d8c02415 	stw	r3,144(sp)
   18d28:	003f8c06 	br	18b5c <__alt_data_end+0xfc018b5c>
   18d2c:	d9402017 	ldw	r5,128(sp)
   18d30:	d9002117 	ldw	r4,132(sp)
   18d34:	0012aac0 	call	12aac <__swsetup_r>
   18d38:	1003c11e 	bne	r2,zero,19c40 <___vfiprintf_internal_r+0x1224>
   18d3c:	d9402017 	ldw	r5,128(sp)
   18d40:	00c00284 	movi	r3,10
   18d44:	2880030b 	ldhu	r2,12(r5)
   18d48:	1080068c 	andi	r2,r2,26
   18d4c:	10ff581e 	bne	r2,r3,18ab0 <__alt_data_end+0xfc018ab0>
   18d50:	d8c02017 	ldw	r3,128(sp)
   18d54:	1880038f 	ldh	r2,14(r3)
   18d58:	103f5516 	blt	r2,zero,18ab0 <__alt_data_end+0xfc018ab0>
   18d5c:	d9c02217 	ldw	r7,136(sp)
   18d60:	d9002117 	ldw	r4,132(sp)
   18d64:	a80d883a 	mov	r6,r21
   18d68:	180b883a 	mov	r5,r3
   18d6c:	0019f440 	call	19f44 <__sbprintf>
   18d70:	dfc03517 	ldw	ra,212(sp)
   18d74:	df003417 	ldw	fp,208(sp)
   18d78:	ddc03317 	ldw	r23,204(sp)
   18d7c:	dd803217 	ldw	r22,200(sp)
   18d80:	dd403117 	ldw	r21,196(sp)
   18d84:	dd003017 	ldw	r20,192(sp)
   18d88:	dcc02f17 	ldw	r19,188(sp)
   18d8c:	dc802e17 	ldw	r18,184(sp)
   18d90:	dc402d17 	ldw	r17,180(sp)
   18d94:	dc002c17 	ldw	r16,176(sp)
   18d98:	dec03604 	addi	sp,sp,216
   18d9c:	f800283a 	ret
   18da0:	0014ab80 	call	14ab8 <__sinit>
   18da4:	003f2f06 	br	18a64 <__alt_data_end+0xfc018a64>
   18da8:	d8c02517 	ldw	r3,148(sp)
   18dac:	d8802215 	stw	r2,136(sp)
   18db0:	00c7c83a 	sub	r3,zero,r3
   18db4:	d8c02515 	stw	r3,148(sp)
   18db8:	8c400114 	ori	r17,r17,4
   18dbc:	b0c00007 	ldb	r3,0(r22)
   18dc0:	003f7306 	br	18b90 <__alt_data_end+0xfc018b90>
   18dc4:	00800c04 	movi	r2,48
   18dc8:	d9402217 	ldw	r5,136(sp)
   18dcc:	d8801d05 	stb	r2,116(sp)
   18dd0:	00801e04 	movi	r2,120
   18dd4:	d8801d45 	stb	r2,117(sp)
   18dd8:	d8001d85 	stb	zero,118(sp)
   18ddc:	b811883a 	mov	r8,r23
   18de0:	28c00104 	addi	r3,r5,4
   18de4:	2cc00017 	ldw	r19,0(r5)
   18de8:	0029883a 	mov	r20,zero
   18dec:	88800094 	ori	r2,r17,2
   18df0:	80032516 	blt	r16,zero,19a88 <___vfiprintf_internal_r+0x106c>
   18df4:	00bfdfc4 	movi	r2,-129
   18df8:	88a2703a 	and	r17,r17,r2
   18dfc:	d8c02215 	stw	r3,136(sp)
   18e00:	8c400094 	ori	r17,r17,2
   18e04:	98032a1e 	bne	r19,zero,19ab0 <___vfiprintf_internal_r+0x1094>
   18e08:	008000f4 	movhi	r2,3
   18e0c:	10a57804 	addi	r2,r2,-27168
   18e10:	d8802615 	stw	r2,152(sp)
   18e14:	002b883a 	mov	r21,zero
   18e18:	8001741e 	bne	r16,zero,193ec <___vfiprintf_internal_r+0x9d0>
   18e1c:	0021883a 	mov	r16,zero
   18e20:	0029883a 	mov	r20,zero
   18e24:	ddc01a04 	addi	r23,sp,104
   18e28:	8027883a 	mov	r19,r16
   18e2c:	8500010e 	bge	r16,r20,18e34 <___vfiprintf_internal_r+0x418>
   18e30:	a027883a 	mov	r19,r20
   18e34:	ad403fcc 	andi	r21,r21,255
   18e38:	ad40201c 	xori	r21,r21,128
   18e3c:	ad7fe004 	addi	r21,r21,-128
   18e40:	a8000126 	beq	r21,zero,18e48 <___vfiprintf_internal_r+0x42c>
   18e44:	9cc00044 	addi	r19,r19,1
   18e48:	89c0008c 	andi	r7,r17,2
   18e4c:	38000126 	beq	r7,zero,18e54 <___vfiprintf_internal_r+0x438>
   18e50:	9cc00084 	addi	r19,r19,2
   18e54:	88c0210c 	andi	r3,r17,132
   18e58:	1801dd1e 	bne	r3,zero,195d0 <___vfiprintf_internal_r+0xbb4>
   18e5c:	d9402517 	ldw	r5,148(sp)
   18e60:	2cebc83a 	sub	r21,r5,r19
   18e64:	0541da0e 	bge	zero,r21,195d0 <___vfiprintf_internal_r+0xbb4>
   18e68:	07000404 	movi	fp,16
   18e6c:	d8801c17 	ldw	r2,112(sp)
   18e70:	e543be0e 	bge	fp,r21,19d6c <___vfiprintf_internal_r+0x1350>
   18e74:	014000f4 	movhi	r5,3
   18e78:	2965ec04 	addi	r5,r5,-26704
   18e7c:	dc002715 	stw	r16,156(sp)
   18e80:	d9801b17 	ldw	r6,108(sp)
   18e84:	a821883a 	mov	r16,r21
   18e88:	d9402315 	stw	r5,140(sp)
   18e8c:	028001c4 	movi	r10,7
   18e90:	d9c02915 	stw	r7,164(sp)
   18e94:	182b883a 	mov	r21,r3
   18e98:	00000506 	br	18eb0 <___vfiprintf_internal_r+0x494>
   18e9c:	31000084 	addi	r4,r6,2
   18ea0:	42000204 	addi	r8,r8,8
   18ea4:	180d883a 	mov	r6,r3
   18ea8:	843ffc04 	addi	r16,r16,-16
   18eac:	e4000f0e 	bge	fp,r16,18eec <___vfiprintf_internal_r+0x4d0>
   18eb0:	010000f4 	movhi	r4,3
   18eb4:	10800404 	addi	r2,r2,16
   18eb8:	30c00044 	addi	r3,r6,1
   18ebc:	2125ec04 	addi	r4,r4,-26704
   18ec0:	41000015 	stw	r4,0(r8)
   18ec4:	47000115 	stw	fp,4(r8)
   18ec8:	d8801c15 	stw	r2,112(sp)
   18ecc:	d8c01b15 	stw	r3,108(sp)
   18ed0:	50fff20e 	bge	r10,r3,18e9c <__alt_data_end+0xfc018e9c>
   18ed4:	1001b21e 	bne	r2,zero,195a0 <___vfiprintf_internal_r+0xb84>
   18ed8:	843ffc04 	addi	r16,r16,-16
   18edc:	000d883a 	mov	r6,zero
   18ee0:	01000044 	movi	r4,1
   18ee4:	d811883a 	mov	r8,sp
   18ee8:	e43ff116 	blt	fp,r16,18eb0 <__alt_data_end+0xfc018eb0>
   18eec:	a807883a 	mov	r3,r21
   18ef0:	d9c02917 	ldw	r7,164(sp)
   18ef4:	802b883a 	mov	r21,r16
   18ef8:	dc002717 	ldw	r16,156(sp)
   18efc:	d9402317 	ldw	r5,140(sp)
   18f00:	a885883a 	add	r2,r21,r2
   18f04:	45400115 	stw	r21,4(r8)
   18f08:	41400015 	stw	r5,0(r8)
   18f0c:	d8801c15 	stw	r2,112(sp)
   18f10:	d9001b15 	stw	r4,108(sp)
   18f14:	014001c4 	movi	r5,7
   18f18:	29026216 	blt	r5,r4,198a4 <___vfiprintf_internal_r+0xe88>
   18f1c:	d9801d87 	ldb	r6,118(sp)
   18f20:	42000204 	addi	r8,r8,8
   18f24:	21400044 	addi	r5,r4,1
   18f28:	3001ae1e 	bne	r6,zero,195e4 <___vfiprintf_internal_r+0xbc8>
   18f2c:	3801bb26 	beq	r7,zero,1961c <___vfiprintf_internal_r+0xc00>
   18f30:	d9001d04 	addi	r4,sp,116
   18f34:	10800084 	addi	r2,r2,2
   18f38:	41000015 	stw	r4,0(r8)
   18f3c:	01000084 	movi	r4,2
   18f40:	41000115 	stw	r4,4(r8)
   18f44:	d8801c15 	stw	r2,112(sp)
   18f48:	d9401b15 	stw	r5,108(sp)
   18f4c:	010001c4 	movi	r4,7
   18f50:	2142680e 	bge	r4,r5,198f4 <___vfiprintf_internal_r+0xed8>
   18f54:	1002b11e 	bne	r2,zero,19a1c <___vfiprintf_internal_r+0x1000>
   18f58:	01802004 	movi	r6,128
   18f5c:	01400044 	movi	r5,1
   18f60:	0009883a 	mov	r4,zero
   18f64:	d811883a 	mov	r8,sp
   18f68:	1981ae1e 	bne	r3,r6,19624 <___vfiprintf_internal_r+0xc08>
   18f6c:	d8c02517 	ldw	r3,148(sp)
   18f70:	1cf9c83a 	sub	fp,r3,r19
   18f74:	0701ab0e 	bge	zero,fp,19624 <___vfiprintf_internal_r+0xc08>
   18f78:	05400404 	movi	r21,16
   18f7c:	af03a90e 	bge	r21,fp,19e24 <___vfiprintf_internal_r+0x1408>
   18f80:	014000f4 	movhi	r5,3
   18f84:	2965e804 	addi	r5,r5,-26720
   18f88:	d9402315 	stw	r5,140(sp)
   18f8c:	01c001c4 	movi	r7,7
   18f90:	00000506 	br	18fa8 <___vfiprintf_internal_r+0x58c>
   18f94:	21800084 	addi	r6,r4,2
   18f98:	42000204 	addi	r8,r8,8
   18f9c:	1809883a 	mov	r4,r3
   18fa0:	e73ffc04 	addi	fp,fp,-16
   18fa4:	af000d0e 	bge	r21,fp,18fdc <___vfiprintf_internal_r+0x5c0>
   18fa8:	10800404 	addi	r2,r2,16
   18fac:	20c00044 	addi	r3,r4,1
   18fb0:	44800015 	stw	r18,0(r8)
   18fb4:	45400115 	stw	r21,4(r8)
   18fb8:	d8801c15 	stw	r2,112(sp)
   18fbc:	d8c01b15 	stw	r3,108(sp)
   18fc0:	38fff40e 	bge	r7,r3,18f94 <__alt_data_end+0xfc018f94>
   18fc4:	10022b1e 	bne	r2,zero,19874 <___vfiprintf_internal_r+0xe58>
   18fc8:	e73ffc04 	addi	fp,fp,-16
   18fcc:	01800044 	movi	r6,1
   18fd0:	0009883a 	mov	r4,zero
   18fd4:	d811883a 	mov	r8,sp
   18fd8:	af3ff316 	blt	r21,fp,18fa8 <__alt_data_end+0xfc018fa8>
   18fdc:	d8c02317 	ldw	r3,140(sp)
   18fe0:	1705883a 	add	r2,r2,fp
   18fe4:	47000115 	stw	fp,4(r8)
   18fe8:	40c00015 	stw	r3,0(r8)
   18fec:	d8801c15 	stw	r2,112(sp)
   18ff0:	d9801b15 	stw	r6,108(sp)
   18ff4:	00c001c4 	movi	r3,7
   18ff8:	19829416 	blt	r3,r6,19a4c <___vfiprintf_internal_r+0x1030>
   18ffc:	8521c83a 	sub	r16,r16,r20
   19000:	42000204 	addi	r8,r8,8
   19004:	31400044 	addi	r5,r6,1
   19008:	3009883a 	mov	r4,r6
   1900c:	04018716 	blt	zero,r16,1962c <___vfiprintf_internal_r+0xc10>
   19010:	a085883a 	add	r2,r20,r2
   19014:	45c00015 	stw	r23,0(r8)
   19018:	45000115 	stw	r20,4(r8)
   1901c:	d8801c15 	stw	r2,112(sp)
   19020:	d9401b15 	stw	r5,108(sp)
   19024:	00c001c4 	movi	r3,7
   19028:	1941c20e 	bge	r3,r5,19734 <___vfiprintf_internal_r+0xd18>
   1902c:	1002531e 	bne	r2,zero,1997c <___vfiprintf_internal_r+0xf60>
   19030:	d8001b15 	stw	zero,108(sp)
   19034:	8c40010c 	andi	r17,r17,4
   19038:	88023226 	beq	r17,zero,19904 <___vfiprintf_internal_r+0xee8>
   1903c:	d9002517 	ldw	r4,148(sp)
   19040:	24e3c83a 	sub	r17,r4,r19
   19044:	04432916 	blt	zero,r17,19cec <___vfiprintf_internal_r+0x12d0>
   19048:	d8802517 	ldw	r2,148(sp)
   1904c:	14c0010e 	bge	r2,r19,19054 <___vfiprintf_internal_r+0x638>
   19050:	9805883a 	mov	r2,r19
   19054:	d8c02417 	ldw	r3,144(sp)
   19058:	1887883a 	add	r3,r3,r2
   1905c:	d8c02415 	stw	r3,144(sp)
   19060:	d8001b15 	stw	zero,108(sp)
   19064:	d811883a 	mov	r8,sp
   19068:	003ea006 	br	18aec <__alt_data_end+0xfc018aec>
   1906c:	8c400814 	ori	r17,r17,32
   19070:	b0c00007 	ldb	r3,0(r22)
   19074:	003ec606 	br	18b90 <__alt_data_end+0xfc018b90>
   19078:	b0c00007 	ldb	r3,0(r22)
   1907c:	00801b04 	movi	r2,108
   19080:	18832026 	beq	r3,r2,19d04 <___vfiprintf_internal_r+0x12e8>
   19084:	8c400414 	ori	r17,r17,16
   19088:	003ec106 	br	18b90 <__alt_data_end+0xfc018b90>
   1908c:	9cc03fcc 	andi	r19,r19,255
   19090:	b811883a 	mov	r8,r23
   19094:	9803981e 	bne	r19,zero,19ef8 <___vfiprintf_internal_r+0x14dc>
   19098:	8880080c 	andi	r2,r17,32
   1909c:	1002be26 	beq	r2,zero,19b98 <___vfiprintf_internal_r+0x117c>
   190a0:	d9002217 	ldw	r4,136(sp)
   190a4:	d9402417 	ldw	r5,144(sp)
   190a8:	20800017 	ldw	r2,0(r4)
   190ac:	2807d7fa 	srai	r3,r5,31
   190b0:	21000104 	addi	r4,r4,4
   190b4:	d9002215 	stw	r4,136(sp)
   190b8:	11400015 	stw	r5,0(r2)
   190bc:	10c00115 	stw	r3,4(r2)
   190c0:	003e8a06 	br	18aec <__alt_data_end+0xfc018aec>
   190c4:	9cc03fcc 	andi	r19,r19,255
   190c8:	b811883a 	mov	r8,r23
   190cc:	9803871e 	bne	r19,zero,19eec <___vfiprintf_internal_r+0x14d0>
   190d0:	8880080c 	andi	r2,r17,32
   190d4:	10009a26 	beq	r2,zero,19340 <___vfiprintf_internal_r+0x924>
   190d8:	d9002217 	ldw	r4,136(sp)
   190dc:	d8001d85 	stb	zero,118(sp)
   190e0:	20800204 	addi	r2,r4,8
   190e4:	24c00017 	ldw	r19,0(r4)
   190e8:	25000117 	ldw	r20,4(r4)
   190ec:	8002a416 	blt	r16,zero,19b80 <___vfiprintf_internal_r+0x1164>
   190f0:	013fdfc4 	movi	r4,-129
   190f4:	9d06b03a 	or	r3,r19,r20
   190f8:	d8802215 	stw	r2,136(sp)
   190fc:	8922703a 	and	r17,r17,r4
   19100:	18009b26 	beq	r3,zero,19370 <___vfiprintf_internal_r+0x954>
   19104:	002b883a 	mov	r21,zero
   19108:	ddc01a04 	addi	r23,sp,104
   1910c:	9806d0fa 	srli	r3,r19,3
   19110:	a008977a 	slli	r4,r20,29
   19114:	a028d0fa 	srli	r20,r20,3
   19118:	9cc001cc 	andi	r19,r19,7
   1911c:	98800c04 	addi	r2,r19,48
   19120:	bdffffc4 	addi	r23,r23,-1
   19124:	20e6b03a 	or	r19,r4,r3
   19128:	b8800005 	stb	r2,0(r23)
   1912c:	9d06b03a 	or	r3,r19,r20
   19130:	183ff61e 	bne	r3,zero,1910c <__alt_data_end+0xfc01910c>
   19134:	88c0004c 	andi	r3,r17,1
   19138:	18021f1e 	bne	r3,zero,199b8 <___vfiprintf_internal_r+0xf9c>
   1913c:	d9401e17 	ldw	r5,120(sp)
   19140:	2de9c83a 	sub	r20,r5,r23
   19144:	003f3806 	br	18e28 <__alt_data_end+0xfc018e28>
   19148:	9cc03fcc 	andi	r19,r19,255
   1914c:	b811883a 	mov	r8,r23
   19150:	98034f1e 	bne	r19,zero,19e90 <___vfiprintf_internal_r+0x1474>
   19154:	008000f4 	movhi	r2,3
   19158:	10a57804 	addi	r2,r2,-27168
   1915c:	d8802615 	stw	r2,152(sp)
   19160:	8880080c 	andi	r2,r17,32
   19164:	1000ac26 	beq	r2,zero,19418 <___vfiprintf_internal_r+0x9fc>
   19168:	d9002217 	ldw	r4,136(sp)
   1916c:	24c00017 	ldw	r19,0(r4)
   19170:	25000117 	ldw	r20,4(r4)
   19174:	21000204 	addi	r4,r4,8
   19178:	d9002215 	stw	r4,136(sp)
   1917c:	8880004c 	andi	r2,r17,1
   19180:	1001e726 	beq	r2,zero,19920 <___vfiprintf_internal_r+0xf04>
   19184:	9d04b03a 	or	r2,r19,r20
   19188:	10025c1e 	bne	r2,zero,19afc <___vfiprintf_internal_r+0x10e0>
   1918c:	d8001d85 	stb	zero,118(sp)
   19190:	80024416 	blt	r16,zero,19aa4 <___vfiprintf_internal_r+0x1088>
   19194:	00bfdfc4 	movi	r2,-129
   19198:	88a2703a 	and	r17,r17,r2
   1919c:	003f1d06 	br	18e14 <__alt_data_end+0xfc018e14>
   191a0:	d8c02217 	ldw	r3,136(sp)
   191a4:	04c00044 	movi	r19,1
   191a8:	b811883a 	mov	r8,r23
   191ac:	18800017 	ldw	r2,0(r3)
   191b0:	18c00104 	addi	r3,r3,4
   191b4:	d8001d85 	stb	zero,118(sp)
   191b8:	d8801005 	stb	r2,64(sp)
   191bc:	d8c02215 	stw	r3,136(sp)
   191c0:	9829883a 	mov	r20,r19
   191c4:	ddc01004 	addi	r23,sp,64
   191c8:	0021883a 	mov	r16,zero
   191cc:	003f1e06 	br	18e48 <__alt_data_end+0xfc018e48>
   191d0:	9cc03fcc 	andi	r19,r19,255
   191d4:	b811883a 	mov	r8,r23
   191d8:	9803331e 	bne	r19,zero,19ea8 <___vfiprintf_internal_r+0x148c>
   191dc:	8880080c 	andi	r2,r17,32
   191e0:	10004826 	beq	r2,zero,19304 <___vfiprintf_internal_r+0x8e8>
   191e4:	d9002217 	ldw	r4,136(sp)
   191e8:	20800117 	ldw	r2,4(r4)
   191ec:	24c00017 	ldw	r19,0(r4)
   191f0:	21000204 	addi	r4,r4,8
   191f4:	d9002215 	stw	r4,136(sp)
   191f8:	1029883a 	mov	r20,r2
   191fc:	10024c16 	blt	r2,zero,19b30 <___vfiprintf_internal_r+0x1114>
   19200:	dd401d83 	ldbu	r21,118(sp)
   19204:	80007116 	blt	r16,zero,193cc <___vfiprintf_internal_r+0x9b0>
   19208:	00ffdfc4 	movi	r3,-129
   1920c:	9d04b03a 	or	r2,r19,r20
   19210:	88e2703a 	and	r17,r17,r3
   19214:	1000d126 	beq	r2,zero,1955c <___vfiprintf_internal_r+0xb40>
   19218:	a0023526 	beq	r20,zero,19af0 <___vfiprintf_internal_r+0x10d4>
   1921c:	ddc01a04 	addi	r23,sp,104
   19220:	4039883a 	mov	fp,r8
   19224:	9809883a 	mov	r4,r19
   19228:	a00b883a 	mov	r5,r20
   1922c:	01800284 	movi	r6,10
   19230:	000f883a 	mov	r7,zero
   19234:	001af480 	call	1af48 <__umoddi3>
   19238:	10800c04 	addi	r2,r2,48
   1923c:	bdffffc4 	addi	r23,r23,-1
   19240:	9809883a 	mov	r4,r19
   19244:	a00b883a 	mov	r5,r20
   19248:	b8800005 	stb	r2,0(r23)
   1924c:	01800284 	movi	r6,10
   19250:	000f883a 	mov	r7,zero
   19254:	001a94c0 	call	1a94c <__udivdi3>
   19258:	1027883a 	mov	r19,r2
   1925c:	10c4b03a 	or	r2,r2,r3
   19260:	1829883a 	mov	r20,r3
   19264:	103fef1e 	bne	r2,zero,19224 <__alt_data_end+0xfc019224>
   19268:	d9001e17 	ldw	r4,120(sp)
   1926c:	e011883a 	mov	r8,fp
   19270:	25e9c83a 	sub	r20,r4,r23
   19274:	003eec06 	br	18e28 <__alt_data_end+0xfc018e28>
   19278:	d8802307 	ldb	r2,140(sp)
   1927c:	1002361e 	bne	r2,zero,19b58 <___vfiprintf_internal_r+0x113c>
   19280:	00c00804 	movi	r3,32
   19284:	d8c02305 	stb	r3,140(sp)
   19288:	04c00044 	movi	r19,1
   1928c:	b0c00007 	ldb	r3,0(r22)
   19290:	003e3f06 	br	18b90 <__alt_data_end+0xfc018b90>
   19294:	8c400054 	ori	r17,r17,1
   19298:	b0c00007 	ldb	r3,0(r22)
   1929c:	003e3c06 	br	18b90 <__alt_data_end+0xfc018b90>
   192a0:	8c402014 	ori	r17,r17,128
   192a4:	b0c00007 	ldb	r3,0(r22)
   192a8:	003e3906 	br	18b90 <__alt_data_end+0xfc018b90>
   192ac:	dc002715 	stw	r16,156(sp)
   192b0:	d8002515 	stw	zero,148(sp)
   192b4:	1f3ff404 	addi	fp,r3,-48
   192b8:	0009883a 	mov	r4,zero
   192bc:	b021883a 	mov	r16,r22
   192c0:	01400284 	movi	r5,10
   192c4:	000ccf40 	call	ccf4 <__mulsi3>
   192c8:	80c00007 	ldb	r3,0(r16)
   192cc:	e089883a 	add	r4,fp,r2
   192d0:	b5800044 	addi	r22,r22,1
   192d4:	1f3ff404 	addi	fp,r3,-48
   192d8:	b021883a 	mov	r16,r22
   192dc:	af3ff82e 	bgeu	r21,fp,192c0 <__alt_data_end+0xfc0192c0>
   192e0:	d9002515 	stw	r4,148(sp)
   192e4:	dc002717 	ldw	r16,156(sp)
   192e8:	003e2a06 	br	18b94 <__alt_data_end+0xfc018b94>
   192ec:	9cc03fcc 	andi	r19,r19,255
   192f0:	b811883a 	mov	r8,r23
   192f4:	9802e91e 	bne	r19,zero,19e9c <___vfiprintf_internal_r+0x1480>
   192f8:	8c400414 	ori	r17,r17,16
   192fc:	8880080c 	andi	r2,r17,32
   19300:	103fb81e 	bne	r2,zero,191e4 <__alt_data_end+0xfc0191e4>
   19304:	8880040c 	andi	r2,r17,16
   19308:	10022e26 	beq	r2,zero,19bc4 <___vfiprintf_internal_r+0x11a8>
   1930c:	d9402217 	ldw	r5,136(sp)
   19310:	2cc00017 	ldw	r19,0(r5)
   19314:	29400104 	addi	r5,r5,4
   19318:	d9402215 	stw	r5,136(sp)
   1931c:	9829d7fa 	srai	r20,r19,31
   19320:	a005883a 	mov	r2,r20
   19324:	003fb506 	br	191fc <__alt_data_end+0xfc0191fc>
   19328:	9cc03fcc 	andi	r19,r19,255
   1932c:	b811883a 	mov	r8,r23
   19330:	9802fa1e 	bne	r19,zero,19f1c <___vfiprintf_internal_r+0x1500>
   19334:	8c400414 	ori	r17,r17,16
   19338:	8880080c 	andi	r2,r17,32
   1933c:	103f661e 	bne	r2,zero,190d8 <__alt_data_end+0xfc0190d8>
   19340:	8880040c 	andi	r2,r17,16
   19344:	10020626 	beq	r2,zero,19b60 <___vfiprintf_internal_r+0x1144>
   19348:	d9402217 	ldw	r5,136(sp)
   1934c:	d8001d85 	stb	zero,118(sp)
   19350:	0029883a 	mov	r20,zero
   19354:	28800104 	addi	r2,r5,4
   19358:	2cc00017 	ldw	r19,0(r5)
   1935c:	80020816 	blt	r16,zero,19b80 <___vfiprintf_internal_r+0x1164>
   19360:	00ffdfc4 	movi	r3,-129
   19364:	d8802215 	stw	r2,136(sp)
   19368:	88e2703a 	and	r17,r17,r3
   1936c:	983f651e 	bne	r19,zero,19104 <__alt_data_end+0xfc019104>
   19370:	002b883a 	mov	r21,zero
   19374:	8002cf26 	beq	r16,zero,19eb4 <___vfiprintf_internal_r+0x1498>
   19378:	0027883a 	mov	r19,zero
   1937c:	0029883a 	mov	r20,zero
   19380:	003f6106 	br	19108 <__alt_data_end+0xfc019108>
   19384:	9cc03fcc 	andi	r19,r19,255
   19388:	b811883a 	mov	r8,r23
   1938c:	9802e01e 	bne	r19,zero,19f10 <___vfiprintf_internal_r+0x14f4>
   19390:	8c400414 	ori	r17,r17,16
   19394:	8880080c 	andi	r2,r17,32
   19398:	1000641e 	bne	r2,zero,1952c <___vfiprintf_internal_r+0xb10>
   1939c:	8880040c 	andi	r2,r17,16
   193a0:	1001c81e 	bne	r2,zero,19ac4 <___vfiprintf_internal_r+0x10a8>
   193a4:	8880100c 	andi	r2,r17,64
   193a8:	d8001d85 	stb	zero,118(sp)
   193ac:	1002281e 	bne	r2,zero,19c50 <___vfiprintf_internal_r+0x1234>
   193b0:	d9002217 	ldw	r4,136(sp)
   193b4:	0029883a 	mov	r20,zero
   193b8:	20800104 	addi	r2,r4,4
   193bc:	24c00017 	ldw	r19,0(r4)
   193c0:	8001c60e 	bge	r16,zero,19adc <___vfiprintf_internal_r+0x10c0>
   193c4:	d8802215 	stw	r2,136(sp)
   193c8:	002b883a 	mov	r21,zero
   193cc:	9d04b03a 	or	r2,r19,r20
   193d0:	103f911e 	bne	r2,zero,19218 <__alt_data_end+0xfc019218>
   193d4:	00800044 	movi	r2,1
   193d8:	10803fcc 	andi	r2,r2,255
   193dc:	00c00044 	movi	r3,1
   193e0:	10c05f26 	beq	r2,r3,19560 <___vfiprintf_internal_r+0xb44>
   193e4:	00c00084 	movi	r3,2
   193e8:	10ffe31e 	bne	r2,r3,19378 <__alt_data_end+0xfc019378>
   193ec:	0027883a 	mov	r19,zero
   193f0:	0029883a 	mov	r20,zero
   193f4:	00015106 	br	1993c <___vfiprintf_internal_r+0xf20>
   193f8:	9cc03fcc 	andi	r19,r19,255
   193fc:	b811883a 	mov	r8,r23
   19400:	9802c01e 	bne	r19,zero,19f04 <___vfiprintf_internal_r+0x14e8>
   19404:	014000f4 	movhi	r5,3
   19408:	29657304 	addi	r5,r5,-27188
   1940c:	d9402615 	stw	r5,152(sp)
   19410:	8880080c 	andi	r2,r17,32
   19414:	103f541e 	bne	r2,zero,19168 <__alt_data_end+0xfc019168>
   19418:	8880040c 	andi	r2,r17,16
   1941c:	1001f226 	beq	r2,zero,19be8 <___vfiprintf_internal_r+0x11cc>
   19420:	d9402217 	ldw	r5,136(sp)
   19424:	0029883a 	mov	r20,zero
   19428:	2cc00017 	ldw	r19,0(r5)
   1942c:	29400104 	addi	r5,r5,4
   19430:	d9402215 	stw	r5,136(sp)
   19434:	003f5106 	br	1917c <__alt_data_end+0xfc01917c>
   19438:	d8c02217 	ldw	r3,136(sp)
   1943c:	b811883a 	mov	r8,r23
   19440:	d8001d85 	stb	zero,118(sp)
   19444:	1dc00017 	ldw	r23,0(r3)
   19448:	1f000104 	addi	fp,r3,4
   1944c:	b8025926 	beq	r23,zero,19db4 <___vfiprintf_internal_r+0x1398>
   19450:	80023316 	blt	r16,zero,19d20 <___vfiprintf_internal_r+0x1304>
   19454:	800d883a 	mov	r6,r16
   19458:	000b883a 	mov	r5,zero
   1945c:	b809883a 	mov	r4,r23
   19460:	da002a15 	stw	r8,168(sp)
   19464:	00158240 	call	15824 <memchr>
   19468:	da002a17 	ldw	r8,168(sp)
   1946c:	10026826 	beq	r2,zero,19e10 <___vfiprintf_internal_r+0x13f4>
   19470:	15e9c83a 	sub	r20,r2,r23
   19474:	dd401d83 	ldbu	r21,118(sp)
   19478:	df002215 	stw	fp,136(sp)
   1947c:	0021883a 	mov	r16,zero
   19480:	003e6906 	br	18e28 <__alt_data_end+0xfc018e28>
   19484:	9cc03fcc 	andi	r19,r19,255
   19488:	b811883a 	mov	r8,r23
   1948c:	983fc126 	beq	r19,zero,19394 <__alt_data_end+0xfc019394>
   19490:	d8c02303 	ldbu	r3,140(sp)
   19494:	d8c01d85 	stb	r3,118(sp)
   19498:	003fbe06 	br	19394 <__alt_data_end+0xfc019394>
   1949c:	d9002217 	ldw	r4,136(sp)
   194a0:	d9402217 	ldw	r5,136(sp)
   194a4:	21000017 	ldw	r4,0(r4)
   194a8:	28800104 	addi	r2,r5,4
   194ac:	d9002515 	stw	r4,148(sp)
   194b0:	203e3d16 	blt	r4,zero,18da8 <__alt_data_end+0xfc018da8>
   194b4:	d8802215 	stw	r2,136(sp)
   194b8:	b0c00007 	ldb	r3,0(r22)
   194bc:	003db406 	br	18b90 <__alt_data_end+0xfc018b90>
   194c0:	00c00ac4 	movi	r3,43
   194c4:	d8c02305 	stb	r3,140(sp)
   194c8:	04c00044 	movi	r19,1
   194cc:	b0c00007 	ldb	r3,0(r22)
   194d0:	003daf06 	br	18b90 <__alt_data_end+0xfc018b90>
   194d4:	b0c00007 	ldb	r3,0(r22)
   194d8:	01000a84 	movi	r4,42
   194dc:	b4000044 	addi	r16,r22,1
   194e0:	19025e26 	beq	r3,r4,19e5c <___vfiprintf_internal_r+0x1440>
   194e4:	1f3ff404 	addi	fp,r3,-48
   194e8:	0009883a 	mov	r4,zero
   194ec:	af025236 	bltu	r21,fp,19e38 <___vfiprintf_internal_r+0x141c>
   194f0:	01400284 	movi	r5,10
   194f4:	000ccf40 	call	ccf4 <__mulsi3>
   194f8:	80c00007 	ldb	r3,0(r16)
   194fc:	1709883a 	add	r4,r2,fp
   19500:	85800044 	addi	r22,r16,1
   19504:	1f3ff404 	addi	fp,r3,-48
   19508:	b021883a 	mov	r16,r22
   1950c:	af3ff82e 	bgeu	r21,fp,194f0 <__alt_data_end+0xfc0194f0>
   19510:	2021883a 	mov	r16,r4
   19514:	203d9f0e 	bge	r4,zero,18b94 <__alt_data_end+0xfc018b94>
   19518:	043fffc4 	movi	r16,-1
   1951c:	003d9d06 	br	18b94 <__alt_data_end+0xfc018b94>
   19520:	8c401014 	ori	r17,r17,64
   19524:	b0c00007 	ldb	r3,0(r22)
   19528:	003d9906 	br	18b90 <__alt_data_end+0xfc018b90>
   1952c:	d9002217 	ldw	r4,136(sp)
   19530:	d8001d85 	stb	zero,118(sp)
   19534:	20c00204 	addi	r3,r4,8
   19538:	24c00017 	ldw	r19,0(r4)
   1953c:	25000117 	ldw	r20,4(r4)
   19540:	8001e716 	blt	r16,zero,19ce0 <___vfiprintf_internal_r+0x12c4>
   19544:	013fdfc4 	movi	r4,-129
   19548:	9d04b03a 	or	r2,r19,r20
   1954c:	d8c02215 	stw	r3,136(sp)
   19550:	8922703a 	and	r17,r17,r4
   19554:	002b883a 	mov	r21,zero
   19558:	103f2f1e 	bne	r2,zero,19218 <__alt_data_end+0xfc019218>
   1955c:	803e2f26 	beq	r16,zero,18e1c <__alt_data_end+0xfc018e1c>
   19560:	0027883a 	mov	r19,zero
   19564:	9cc00c04 	addi	r19,r19,48
   19568:	dcc019c5 	stb	r19,103(sp)
   1956c:	dd002817 	ldw	r20,160(sp)
   19570:	ddc019c4 	addi	r23,sp,103
   19574:	003e2c06 	br	18e28 <__alt_data_end+0xfc018e28>
   19578:	9cc03fcc 	andi	r19,r19,255
   1957c:	b811883a 	mov	r8,r23
   19580:	9802571e 	bne	r19,zero,19ee0 <___vfiprintf_internal_r+0x14c4>
   19584:	18005726 	beq	r3,zero,196e4 <___vfiprintf_internal_r+0xcc8>
   19588:	04c00044 	movi	r19,1
   1958c:	d8c01005 	stb	r3,64(sp)
   19590:	d8001d85 	stb	zero,118(sp)
   19594:	9829883a 	mov	r20,r19
   19598:	ddc01004 	addi	r23,sp,64
   1959c:	003f0a06 	br	191c8 <__alt_data_end+0xfc0191c8>
   195a0:	d9402017 	ldw	r5,128(sp)
   195a4:	d9002117 	ldw	r4,132(sp)
   195a8:	d9801a04 	addi	r6,sp,104
   195ac:	da802a15 	stw	r10,168(sp)
   195b0:	00189080 	call	18908 <__sprint_r.part.0>
   195b4:	da802a17 	ldw	r10,168(sp)
   195b8:	1000501e 	bne	r2,zero,196fc <___vfiprintf_internal_r+0xce0>
   195bc:	d9801b17 	ldw	r6,108(sp)
   195c0:	d8801c17 	ldw	r2,112(sp)
   195c4:	d811883a 	mov	r8,sp
   195c8:	31000044 	addi	r4,r6,1
   195cc:	003e3606 	br	18ea8 <__alt_data_end+0xfc018ea8>
   195d0:	d9001b17 	ldw	r4,108(sp)
   195d4:	d8801c17 	ldw	r2,112(sp)
   195d8:	21400044 	addi	r5,r4,1
   195dc:	d9801d87 	ldb	r6,118(sp)
   195e0:	303e5226 	beq	r6,zero,18f2c <__alt_data_end+0xfc018f2c>
   195e4:	01800044 	movi	r6,1
   195e8:	d9001d84 	addi	r4,sp,118
   195ec:	1185883a 	add	r2,r2,r6
   195f0:	41000015 	stw	r4,0(r8)
   195f4:	41800115 	stw	r6,4(r8)
   195f8:	d8801c15 	stw	r2,112(sp)
   195fc:	d9401b15 	stw	r5,108(sp)
   19600:	010001c4 	movi	r4,7
   19604:	2140b00e 	bge	r4,r5,198c8 <___vfiprintf_internal_r+0xeac>
   19608:	1000f61e 	bne	r2,zero,199e4 <___vfiprintf_internal_r+0xfc8>
   1960c:	3800b31e 	bne	r7,zero,198dc <___vfiprintf_internal_r+0xec0>
   19610:	0009883a 	mov	r4,zero
   19614:	300b883a 	mov	r5,r6
   19618:	d811883a 	mov	r8,sp
   1961c:	01802004 	movi	r6,128
   19620:	19be5226 	beq	r3,r6,18f6c <__alt_data_end+0xfc018f6c>
   19624:	8521c83a 	sub	r16,r16,r20
   19628:	043e790e 	bge	zero,r16,19010 <__alt_data_end+0xfc019010>
   1962c:	05400404 	movi	r21,16
   19630:	ac01b00e 	bge	r21,r16,19cf4 <___vfiprintf_internal_r+0x12d8>
   19634:	014000f4 	movhi	r5,3
   19638:	2965e804 	addi	r5,r5,-26720
   1963c:	d9402315 	stw	r5,140(sp)
   19640:	070001c4 	movi	fp,7
   19644:	00000506 	br	1965c <___vfiprintf_internal_r+0xc40>
   19648:	21400084 	addi	r5,r4,2
   1964c:	42000204 	addi	r8,r8,8
   19650:	1809883a 	mov	r4,r3
   19654:	843ffc04 	addi	r16,r16,-16
   19658:	ac000d0e 	bge	r21,r16,19690 <___vfiprintf_internal_r+0xc74>
   1965c:	10800404 	addi	r2,r2,16
   19660:	20c00044 	addi	r3,r4,1
   19664:	44800015 	stw	r18,0(r8)
   19668:	45400115 	stw	r21,4(r8)
   1966c:	d8801c15 	stw	r2,112(sp)
   19670:	d8c01b15 	stw	r3,108(sp)
   19674:	e0fff40e 	bge	fp,r3,19648 <__alt_data_end+0xfc019648>
   19678:	1000101e 	bne	r2,zero,196bc <___vfiprintf_internal_r+0xca0>
   1967c:	843ffc04 	addi	r16,r16,-16
   19680:	01400044 	movi	r5,1
   19684:	0009883a 	mov	r4,zero
   19688:	d811883a 	mov	r8,sp
   1968c:	ac3ff316 	blt	r21,r16,1965c <__alt_data_end+0xfc01965c>
   19690:	d8c02317 	ldw	r3,140(sp)
   19694:	1405883a 	add	r2,r2,r16
   19698:	44000115 	stw	r16,4(r8)
   1969c:	40c00015 	stw	r3,0(r8)
   196a0:	d8801c15 	stw	r2,112(sp)
   196a4:	d9401b15 	stw	r5,108(sp)
   196a8:	00c001c4 	movi	r3,7
   196ac:	19401916 	blt	r3,r5,19714 <___vfiprintf_internal_r+0xcf8>
   196b0:	42000204 	addi	r8,r8,8
   196b4:	29400044 	addi	r5,r5,1
   196b8:	003e5506 	br	19010 <__alt_data_end+0xfc019010>
   196bc:	d9402017 	ldw	r5,128(sp)
   196c0:	d9002117 	ldw	r4,132(sp)
   196c4:	d9801a04 	addi	r6,sp,104
   196c8:	00189080 	call	18908 <__sprint_r.part.0>
   196cc:	10000b1e 	bne	r2,zero,196fc <___vfiprintf_internal_r+0xce0>
   196d0:	d9001b17 	ldw	r4,108(sp)
   196d4:	d8801c17 	ldw	r2,112(sp)
   196d8:	d811883a 	mov	r8,sp
   196dc:	21400044 	addi	r5,r4,1
   196e0:	003fdc06 	br	19654 <__alt_data_end+0xfc019654>
   196e4:	d8801c17 	ldw	r2,112(sp)
   196e8:	10000426 	beq	r2,zero,196fc <___vfiprintf_internal_r+0xce0>
   196ec:	d9402017 	ldw	r5,128(sp)
   196f0:	d9002117 	ldw	r4,132(sp)
   196f4:	d9801a04 	addi	r6,sp,104
   196f8:	00189080 	call	18908 <__sprint_r.part.0>
   196fc:	d9402017 	ldw	r5,128(sp)
   19700:	2880030b 	ldhu	r2,12(r5)
   19704:	1080100c 	andi	r2,r2,64
   19708:	10014d1e 	bne	r2,zero,19c40 <___vfiprintf_internal_r+0x1224>
   1970c:	d8802417 	ldw	r2,144(sp)
   19710:	003d9706 	br	18d70 <__alt_data_end+0xfc018d70>
   19714:	1000d21e 	bne	r2,zero,19a60 <___vfiprintf_internal_r+0x1044>
   19718:	00c00044 	movi	r3,1
   1971c:	a005883a 	mov	r2,r20
   19720:	ddc00015 	stw	r23,0(sp)
   19724:	dd000115 	stw	r20,4(sp)
   19728:	dd001c15 	stw	r20,112(sp)
   1972c:	d8c01b15 	stw	r3,108(sp)
   19730:	d811883a 	mov	r8,sp
   19734:	42000204 	addi	r8,r8,8
   19738:	8c40010c 	andi	r17,r17,4
   1973c:	88004026 	beq	r17,zero,19840 <___vfiprintf_internal_r+0xe24>
   19740:	d9002517 	ldw	r4,148(sp)
   19744:	24e3c83a 	sub	r17,r4,r19
   19748:	04403d0e 	bge	zero,r17,19840 <___vfiprintf_internal_r+0xe24>
   1974c:	04000404 	movi	r16,16
   19750:	8441a90e 	bge	r16,r17,19df8 <___vfiprintf_internal_r+0x13dc>
   19754:	00c000f4 	movhi	r3,3
   19758:	18e5ec04 	addi	r3,r3,-26704
   1975c:	d9001b17 	ldw	r4,108(sp)
   19760:	d8c02315 	stw	r3,140(sp)
   19764:	050001c4 	movi	r20,7
   19768:	dd402117 	ldw	r21,132(sp)
   1976c:	ddc02017 	ldw	r23,128(sp)
   19770:	00000506 	br	19788 <___vfiprintf_internal_r+0xd6c>
   19774:	21400084 	addi	r5,r4,2
   19778:	42000204 	addi	r8,r8,8
   1977c:	1809883a 	mov	r4,r3
   19780:	8c7ffc04 	addi	r17,r17,-16
   19784:	84400f0e 	bge	r16,r17,197c4 <___vfiprintf_internal_r+0xda8>
   19788:	014000f4 	movhi	r5,3
   1978c:	10800404 	addi	r2,r2,16
   19790:	20c00044 	addi	r3,r4,1
   19794:	2965ec04 	addi	r5,r5,-26704
   19798:	41400015 	stw	r5,0(r8)
   1979c:	44000115 	stw	r16,4(r8)
   197a0:	d8801c15 	stw	r2,112(sp)
   197a4:	d8c01b15 	stw	r3,108(sp)
   197a8:	a0fff20e 	bge	r20,r3,19774 <__alt_data_end+0xfc019774>
   197ac:	1000141e 	bne	r2,zero,19800 <___vfiprintf_internal_r+0xde4>
   197b0:	8c7ffc04 	addi	r17,r17,-16
   197b4:	01400044 	movi	r5,1
   197b8:	0009883a 	mov	r4,zero
   197bc:	d811883a 	mov	r8,sp
   197c0:	847ff116 	blt	r16,r17,19788 <__alt_data_end+0xfc019788>
   197c4:	d8c02317 	ldw	r3,140(sp)
   197c8:	1445883a 	add	r2,r2,r17
   197cc:	44400115 	stw	r17,4(r8)
   197d0:	40c00015 	stw	r3,0(r8)
   197d4:	d8801c15 	stw	r2,112(sp)
   197d8:	d9401b15 	stw	r5,108(sp)
   197dc:	00c001c4 	movi	r3,7
   197e0:	1940170e 	bge	r3,r5,19840 <___vfiprintf_internal_r+0xe24>
   197e4:	1000101e 	bne	r2,zero,19828 <___vfiprintf_internal_r+0xe0c>
   197e8:	d8802517 	ldw	r2,148(sp)
   197ec:	14c11616 	blt	r2,r19,19c48 <___vfiprintf_internal_r+0x122c>
   197f0:	d9002417 	ldw	r4,144(sp)
   197f4:	2089883a 	add	r4,r4,r2
   197f8:	d9002415 	stw	r4,144(sp)
   197fc:	003e1806 	br	19060 <__alt_data_end+0xfc019060>
   19800:	d9801a04 	addi	r6,sp,104
   19804:	b80b883a 	mov	r5,r23
   19808:	a809883a 	mov	r4,r21
   1980c:	00189080 	call	18908 <__sprint_r.part.0>
   19810:	103fba1e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19814:	d9001b17 	ldw	r4,108(sp)
   19818:	d8801c17 	ldw	r2,112(sp)
   1981c:	d811883a 	mov	r8,sp
   19820:	21400044 	addi	r5,r4,1
   19824:	003fd606 	br	19780 <__alt_data_end+0xfc019780>
   19828:	d9402017 	ldw	r5,128(sp)
   1982c:	d9002117 	ldw	r4,132(sp)
   19830:	d9801a04 	addi	r6,sp,104
   19834:	00189080 	call	18908 <__sprint_r.part.0>
   19838:	103fb01e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   1983c:	d8801c17 	ldw	r2,112(sp)
   19840:	d8c02517 	ldw	r3,148(sp)
   19844:	1cc0010e 	bge	r3,r19,1984c <___vfiprintf_internal_r+0xe30>
   19848:	9807883a 	mov	r3,r19
   1984c:	d9002417 	ldw	r4,144(sp)
   19850:	20c9883a 	add	r4,r4,r3
   19854:	d9002415 	stw	r4,144(sp)
   19858:	103e0126 	beq	r2,zero,19060 <__alt_data_end+0xfc019060>
   1985c:	d9402017 	ldw	r5,128(sp)
   19860:	d9002117 	ldw	r4,132(sp)
   19864:	d9801a04 	addi	r6,sp,104
   19868:	00189080 	call	18908 <__sprint_r.part.0>
   1986c:	103dfc26 	beq	r2,zero,19060 <__alt_data_end+0xfc019060>
   19870:	003fa206 	br	196fc <__alt_data_end+0xfc0196fc>
   19874:	d9402017 	ldw	r5,128(sp)
   19878:	d9002117 	ldw	r4,132(sp)
   1987c:	d9801a04 	addi	r6,sp,104
   19880:	d9c02b15 	stw	r7,172(sp)
   19884:	00189080 	call	18908 <__sprint_r.part.0>
   19888:	d9c02b17 	ldw	r7,172(sp)
   1988c:	103f9b1e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19890:	d9001b17 	ldw	r4,108(sp)
   19894:	d8801c17 	ldw	r2,112(sp)
   19898:	d811883a 	mov	r8,sp
   1989c:	21800044 	addi	r6,r4,1
   198a0:	003dbf06 	br	18fa0 <__alt_data_end+0xfc018fa0>
   198a4:	1000d81e 	bne	r2,zero,19c08 <___vfiprintf_internal_r+0x11ec>
   198a8:	d9001d87 	ldb	r4,118(sp)
   198ac:	20000a26 	beq	r4,zero,198d8 <___vfiprintf_internal_r+0xebc>
   198b0:	00800044 	movi	r2,1
   198b4:	d9001d84 	addi	r4,sp,118
   198b8:	100b883a 	mov	r5,r2
   198bc:	d9000015 	stw	r4,0(sp)
   198c0:	d8800115 	stw	r2,4(sp)
   198c4:	d811883a 	mov	r8,sp
   198c8:	2809883a 	mov	r4,r5
   198cc:	42000204 	addi	r8,r8,8
   198d0:	29400044 	addi	r5,r5,1
   198d4:	003d9506 	br	18f2c <__alt_data_end+0xfc018f2c>
   198d8:	3800fd26 	beq	r7,zero,19cd0 <___vfiprintf_internal_r+0x12b4>
   198dc:	00800084 	movi	r2,2
   198e0:	d9001d04 	addi	r4,sp,116
   198e4:	d9000015 	stw	r4,0(sp)
   198e8:	d8800115 	stw	r2,4(sp)
   198ec:	01400044 	movi	r5,1
   198f0:	d811883a 	mov	r8,sp
   198f4:	2809883a 	mov	r4,r5
   198f8:	42000204 	addi	r8,r8,8
   198fc:	29400044 	addi	r5,r5,1
   19900:	003f4606 	br	1961c <__alt_data_end+0xfc01961c>
   19904:	d8802517 	ldw	r2,148(sp)
   19908:	14c0010e 	bge	r2,r19,19910 <___vfiprintf_internal_r+0xef4>
   1990c:	9805883a 	mov	r2,r19
   19910:	d9402417 	ldw	r5,144(sp)
   19914:	288b883a 	add	r5,r5,r2
   19918:	d9402415 	stw	r5,144(sp)
   1991c:	003dd006 	br	19060 <__alt_data_end+0xfc019060>
   19920:	d8001d85 	stb	zero,118(sp)
   19924:	80005d16 	blt	r16,zero,19a9c <___vfiprintf_internal_r+0x1080>
   19928:	00ffdfc4 	movi	r3,-129
   1992c:	9d04b03a 	or	r2,r19,r20
   19930:	88e2703a 	and	r17,r17,r3
   19934:	103d3726 	beq	r2,zero,18e14 <__alt_data_end+0xfc018e14>
   19938:	002b883a 	mov	r21,zero
   1993c:	d9002617 	ldw	r4,152(sp)
   19940:	ddc01a04 	addi	r23,sp,104
   19944:	988003cc 	andi	r2,r19,15
   19948:	a006973a 	slli	r3,r20,28
   1994c:	2085883a 	add	r2,r4,r2
   19950:	9826d13a 	srli	r19,r19,4
   19954:	10800003 	ldbu	r2,0(r2)
   19958:	a028d13a 	srli	r20,r20,4
   1995c:	bdffffc4 	addi	r23,r23,-1
   19960:	1ce6b03a 	or	r19,r3,r19
   19964:	b8800005 	stb	r2,0(r23)
   19968:	9d04b03a 	or	r2,r19,r20
   1996c:	103ff51e 	bne	r2,zero,19944 <__alt_data_end+0xfc019944>
   19970:	d8801e17 	ldw	r2,120(sp)
   19974:	15e9c83a 	sub	r20,r2,r23
   19978:	003d2b06 	br	18e28 <__alt_data_end+0xfc018e28>
   1997c:	d9402017 	ldw	r5,128(sp)
   19980:	d9002117 	ldw	r4,132(sp)
   19984:	d9801a04 	addi	r6,sp,104
   19988:	00189080 	call	18908 <__sprint_r.part.0>
   1998c:	103f5b1e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19990:	d8801c17 	ldw	r2,112(sp)
   19994:	d811883a 	mov	r8,sp
   19998:	003f6706 	br	19738 <__alt_data_end+0xfc019738>
   1999c:	d9402017 	ldw	r5,128(sp)
   199a0:	d9002117 	ldw	r4,132(sp)
   199a4:	d9801a04 	addi	r6,sp,104
   199a8:	00189080 	call	18908 <__sprint_r.part.0>
   199ac:	103f531e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   199b0:	d811883a 	mov	r8,sp
   199b4:	003cd906 	br	18d1c <__alt_data_end+0xfc018d1c>
   199b8:	10803fcc 	andi	r2,r2,255
   199bc:	1080201c 	xori	r2,r2,128
   199c0:	10bfe004 	addi	r2,r2,-128
   199c4:	00c00c04 	movi	r3,48
   199c8:	10ffe926 	beq	r2,r3,19970 <__alt_data_end+0xfc019970>
   199cc:	b8ffffc5 	stb	r3,-1(r23)
   199d0:	d8c01e17 	ldw	r3,120(sp)
   199d4:	b8bfffc4 	addi	r2,r23,-1
   199d8:	102f883a 	mov	r23,r2
   199dc:	18a9c83a 	sub	r20,r3,r2
   199e0:	003d1106 	br	18e28 <__alt_data_end+0xfc018e28>
   199e4:	d9402017 	ldw	r5,128(sp)
   199e8:	d9002117 	ldw	r4,132(sp)
   199ec:	d9801a04 	addi	r6,sp,104
   199f0:	d8c02a15 	stw	r3,168(sp)
   199f4:	d9c02b15 	stw	r7,172(sp)
   199f8:	00189080 	call	18908 <__sprint_r.part.0>
   199fc:	d8c02a17 	ldw	r3,168(sp)
   19a00:	d9c02b17 	ldw	r7,172(sp)
   19a04:	103f3d1e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19a08:	d9001b17 	ldw	r4,108(sp)
   19a0c:	d8801c17 	ldw	r2,112(sp)
   19a10:	d811883a 	mov	r8,sp
   19a14:	21400044 	addi	r5,r4,1
   19a18:	003d4406 	br	18f2c <__alt_data_end+0xfc018f2c>
   19a1c:	d9402017 	ldw	r5,128(sp)
   19a20:	d9002117 	ldw	r4,132(sp)
   19a24:	d9801a04 	addi	r6,sp,104
   19a28:	d8c02a15 	stw	r3,168(sp)
   19a2c:	00189080 	call	18908 <__sprint_r.part.0>
   19a30:	d8c02a17 	ldw	r3,168(sp)
   19a34:	103f311e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19a38:	d9001b17 	ldw	r4,108(sp)
   19a3c:	d8801c17 	ldw	r2,112(sp)
   19a40:	d811883a 	mov	r8,sp
   19a44:	21400044 	addi	r5,r4,1
   19a48:	003ef406 	br	1961c <__alt_data_end+0xfc01961c>
   19a4c:	1000bd1e 	bne	r2,zero,19d44 <___vfiprintf_internal_r+0x1328>
   19a50:	01400044 	movi	r5,1
   19a54:	0009883a 	mov	r4,zero
   19a58:	d811883a 	mov	r8,sp
   19a5c:	003ef106 	br	19624 <__alt_data_end+0xfc019624>
   19a60:	d9402017 	ldw	r5,128(sp)
   19a64:	d9002117 	ldw	r4,132(sp)
   19a68:	d9801a04 	addi	r6,sp,104
   19a6c:	00189080 	call	18908 <__sprint_r.part.0>
   19a70:	103f221e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19a74:	d9401b17 	ldw	r5,108(sp)
   19a78:	d8801c17 	ldw	r2,112(sp)
   19a7c:	d811883a 	mov	r8,sp
   19a80:	29400044 	addi	r5,r5,1
   19a84:	003d6206 	br	19010 <__alt_data_end+0xfc019010>
   19a88:	014000f4 	movhi	r5,3
   19a8c:	29657804 	addi	r5,r5,-27168
   19a90:	d9402615 	stw	r5,152(sp)
   19a94:	d8c02215 	stw	r3,136(sp)
   19a98:	1023883a 	mov	r17,r2
   19a9c:	9d04b03a 	or	r2,r19,r20
   19aa0:	103fa51e 	bne	r2,zero,19938 <__alt_data_end+0xfc019938>
   19aa4:	002b883a 	mov	r21,zero
   19aa8:	00800084 	movi	r2,2
   19aac:	003e4a06 	br	193d8 <__alt_data_end+0xfc0193d8>
   19ab0:	014000f4 	movhi	r5,3
   19ab4:	29657804 	addi	r5,r5,-27168
   19ab8:	002b883a 	mov	r21,zero
   19abc:	d9402615 	stw	r5,152(sp)
   19ac0:	003f9e06 	br	1993c <__alt_data_end+0xfc01993c>
   19ac4:	d9402217 	ldw	r5,136(sp)
   19ac8:	d8001d85 	stb	zero,118(sp)
   19acc:	0029883a 	mov	r20,zero
   19ad0:	28800104 	addi	r2,r5,4
   19ad4:	2cc00017 	ldw	r19,0(r5)
   19ad8:	803e3a16 	blt	r16,zero,193c4 <__alt_data_end+0xfc0193c4>
   19adc:	00ffdfc4 	movi	r3,-129
   19ae0:	d8802215 	stw	r2,136(sp)
   19ae4:	88e2703a 	and	r17,r17,r3
   19ae8:	002b883a 	mov	r21,zero
   19aec:	983e9b26 	beq	r19,zero,1955c <__alt_data_end+0xfc01955c>
   19af0:	00800244 	movi	r2,9
   19af4:	14fdc936 	bltu	r2,r19,1921c <__alt_data_end+0xfc01921c>
   19af8:	003e9a06 	br	19564 <__alt_data_end+0xfc019564>
   19afc:	00800c04 	movi	r2,48
   19b00:	d8c01d45 	stb	r3,117(sp)
   19b04:	d8801d05 	stb	r2,116(sp)
   19b08:	d8001d85 	stb	zero,118(sp)
   19b0c:	88c00094 	ori	r3,r17,2
   19b10:	80009c16 	blt	r16,zero,19d84 <___vfiprintf_internal_r+0x1368>
   19b14:	00bfdfc4 	movi	r2,-129
   19b18:	88a2703a 	and	r17,r17,r2
   19b1c:	8c400094 	ori	r17,r17,2
   19b20:	002b883a 	mov	r21,zero
   19b24:	003f8506 	br	1993c <__alt_data_end+0xfc01993c>
   19b28:	b029883a 	mov	r20,r22
   19b2c:	003c0b06 	br	18b5c <__alt_data_end+0xfc018b5c>
   19b30:	04e7c83a 	sub	r19,zero,r19
   19b34:	05400b44 	movi	r21,45
   19b38:	9804c03a 	cmpne	r2,r19,zero
   19b3c:	0529c83a 	sub	r20,zero,r20
   19b40:	dd401d85 	stb	r21,118(sp)
   19b44:	a0a9c83a 	sub	r20,r20,r2
   19b48:	80009716 	blt	r16,zero,19da8 <___vfiprintf_internal_r+0x138c>
   19b4c:	00bfdfc4 	movi	r2,-129
   19b50:	88a2703a 	and	r17,r17,r2
   19b54:	003db006 	br	19218 <__alt_data_end+0xfc019218>
   19b58:	b0c00007 	ldb	r3,0(r22)
   19b5c:	003c0c06 	br	18b90 <__alt_data_end+0xfc018b90>
   19b60:	8880100c 	andi	r2,r17,64
   19b64:	d8001d85 	stb	zero,118(sp)
   19b68:	1000461e 	bne	r2,zero,19c84 <___vfiprintf_internal_r+0x1268>
   19b6c:	d9002217 	ldw	r4,136(sp)
   19b70:	0029883a 	mov	r20,zero
   19b74:	20800104 	addi	r2,r4,4
   19b78:	24c00017 	ldw	r19,0(r4)
   19b7c:	803df80e 	bge	r16,zero,19360 <__alt_data_end+0xfc019360>
   19b80:	9d06b03a 	or	r3,r19,r20
   19b84:	d8802215 	stw	r2,136(sp)
   19b88:	183d5e1e 	bne	r3,zero,19104 <__alt_data_end+0xfc019104>
   19b8c:	002b883a 	mov	r21,zero
   19b90:	0005883a 	mov	r2,zero
   19b94:	003e1006 	br	193d8 <__alt_data_end+0xfc0193d8>
   19b98:	8880040c 	andi	r2,r17,16
   19b9c:	1000321e 	bne	r2,zero,19c68 <___vfiprintf_internal_r+0x124c>
   19ba0:	8c40100c 	andi	r17,r17,64
   19ba4:	88008d26 	beq	r17,zero,19ddc <___vfiprintf_internal_r+0x13c0>
   19ba8:	d9402217 	ldw	r5,136(sp)
   19bac:	d8c02417 	ldw	r3,144(sp)
   19bb0:	28800017 	ldw	r2,0(r5)
   19bb4:	29400104 	addi	r5,r5,4
   19bb8:	d9402215 	stw	r5,136(sp)
   19bbc:	10c0000d 	sth	r3,0(r2)
   19bc0:	003bca06 	br	18aec <__alt_data_end+0xfc018aec>
   19bc4:	8880100c 	andi	r2,r17,64
   19bc8:	10003a26 	beq	r2,zero,19cb4 <___vfiprintf_internal_r+0x1298>
   19bcc:	d8802217 	ldw	r2,136(sp)
   19bd0:	14c0000f 	ldh	r19,0(r2)
   19bd4:	10800104 	addi	r2,r2,4
   19bd8:	d8802215 	stw	r2,136(sp)
   19bdc:	9829d7fa 	srai	r20,r19,31
   19be0:	a005883a 	mov	r2,r20
   19be4:	003d8506 	br	191fc <__alt_data_end+0xfc0191fc>
   19be8:	8880100c 	andi	r2,r17,64
   19bec:	10002b26 	beq	r2,zero,19c9c <___vfiprintf_internal_r+0x1280>
   19bf0:	d8802217 	ldw	r2,136(sp)
   19bf4:	0029883a 	mov	r20,zero
   19bf8:	14c0000b 	ldhu	r19,0(r2)
   19bfc:	10800104 	addi	r2,r2,4
   19c00:	d8802215 	stw	r2,136(sp)
   19c04:	003d5d06 	br	1917c <__alt_data_end+0xfc01917c>
   19c08:	d9402017 	ldw	r5,128(sp)
   19c0c:	d9002117 	ldw	r4,132(sp)
   19c10:	d9801a04 	addi	r6,sp,104
   19c14:	d8c02a15 	stw	r3,168(sp)
   19c18:	d9c02b15 	stw	r7,172(sp)
   19c1c:	00189080 	call	18908 <__sprint_r.part.0>
   19c20:	d8c02a17 	ldw	r3,168(sp)
   19c24:	d9c02b17 	ldw	r7,172(sp)
   19c28:	103eb41e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19c2c:	d9001b17 	ldw	r4,108(sp)
   19c30:	d8801c17 	ldw	r2,112(sp)
   19c34:	d811883a 	mov	r8,sp
   19c38:	21400044 	addi	r5,r4,1
   19c3c:	003e6706 	br	195dc <__alt_data_end+0xfc0195dc>
   19c40:	00bfffc4 	movi	r2,-1
   19c44:	003c4a06 	br	18d70 <__alt_data_end+0xfc018d70>
   19c48:	9805883a 	mov	r2,r19
   19c4c:	003ee806 	br	197f0 <__alt_data_end+0xfc0197f0>
   19c50:	d8c02217 	ldw	r3,136(sp)
   19c54:	0029883a 	mov	r20,zero
   19c58:	18800104 	addi	r2,r3,4
   19c5c:	1cc0000b 	ldhu	r19,0(r3)
   19c60:	803f9e0e 	bge	r16,zero,19adc <__alt_data_end+0xfc019adc>
   19c64:	003dd706 	br	193c4 <__alt_data_end+0xfc0193c4>
   19c68:	d8c02217 	ldw	r3,136(sp)
   19c6c:	d9002417 	ldw	r4,144(sp)
   19c70:	18800017 	ldw	r2,0(r3)
   19c74:	18c00104 	addi	r3,r3,4
   19c78:	d8c02215 	stw	r3,136(sp)
   19c7c:	11000015 	stw	r4,0(r2)
   19c80:	003b9a06 	br	18aec <__alt_data_end+0xfc018aec>
   19c84:	d8c02217 	ldw	r3,136(sp)
   19c88:	0029883a 	mov	r20,zero
   19c8c:	18800104 	addi	r2,r3,4
   19c90:	1cc0000b 	ldhu	r19,0(r3)
   19c94:	803db20e 	bge	r16,zero,19360 <__alt_data_end+0xfc019360>
   19c98:	003fb906 	br	19b80 <__alt_data_end+0xfc019b80>
   19c9c:	d9002217 	ldw	r4,136(sp)
   19ca0:	0029883a 	mov	r20,zero
   19ca4:	24c00017 	ldw	r19,0(r4)
   19ca8:	21000104 	addi	r4,r4,4
   19cac:	d9002215 	stw	r4,136(sp)
   19cb0:	003d3206 	br	1917c <__alt_data_end+0xfc01917c>
   19cb4:	d8c02217 	ldw	r3,136(sp)
   19cb8:	1cc00017 	ldw	r19,0(r3)
   19cbc:	18c00104 	addi	r3,r3,4
   19cc0:	d8c02215 	stw	r3,136(sp)
   19cc4:	9829d7fa 	srai	r20,r19,31
   19cc8:	a005883a 	mov	r2,r20
   19ccc:	003d4b06 	br	191fc <__alt_data_end+0xfc0191fc>
   19cd0:	0009883a 	mov	r4,zero
   19cd4:	01400044 	movi	r5,1
   19cd8:	d811883a 	mov	r8,sp
   19cdc:	003e4f06 	br	1961c <__alt_data_end+0xfc01961c>
   19ce0:	d8c02215 	stw	r3,136(sp)
   19ce4:	002b883a 	mov	r21,zero
   19ce8:	003db806 	br	193cc <__alt_data_end+0xfc0193cc>
   19cec:	d811883a 	mov	r8,sp
   19cf0:	003e9606 	br	1974c <__alt_data_end+0xfc01974c>
   19cf4:	010000f4 	movhi	r4,3
   19cf8:	2125e804 	addi	r4,r4,-26720
   19cfc:	d9002315 	stw	r4,140(sp)
   19d00:	003e6306 	br	19690 <__alt_data_end+0xfc019690>
   19d04:	b0c00043 	ldbu	r3,1(r22)
   19d08:	8c400814 	ori	r17,r17,32
   19d0c:	b5800044 	addi	r22,r22,1
   19d10:	18c03fcc 	andi	r3,r3,255
   19d14:	18c0201c 	xori	r3,r3,128
   19d18:	18ffe004 	addi	r3,r3,-128
   19d1c:	003b9c06 	br	18b90 <__alt_data_end+0xfc018b90>
   19d20:	b809883a 	mov	r4,r23
   19d24:	da002a15 	stw	r8,168(sp)
   19d28:	000e39c0 	call	e39c <strlen>
   19d2c:	1029883a 	mov	r20,r2
   19d30:	dd401d83 	ldbu	r21,118(sp)
   19d34:	df002215 	stw	fp,136(sp)
   19d38:	0021883a 	mov	r16,zero
   19d3c:	da002a17 	ldw	r8,168(sp)
   19d40:	003c3906 	br	18e28 <__alt_data_end+0xfc018e28>
   19d44:	d9402017 	ldw	r5,128(sp)
   19d48:	d9002117 	ldw	r4,132(sp)
   19d4c:	d9801a04 	addi	r6,sp,104
   19d50:	00189080 	call	18908 <__sprint_r.part.0>
   19d54:	103e691e 	bne	r2,zero,196fc <__alt_data_end+0xfc0196fc>
   19d58:	d9001b17 	ldw	r4,108(sp)
   19d5c:	d8801c17 	ldw	r2,112(sp)
   19d60:	d811883a 	mov	r8,sp
   19d64:	21400044 	addi	r5,r4,1
   19d68:	003e2e06 	br	19624 <__alt_data_end+0xfc019624>
   19d6c:	010000f4 	movhi	r4,3
   19d70:	2125ec04 	addi	r4,r4,-26704
   19d74:	d9002315 	stw	r4,140(sp)
   19d78:	d9001b17 	ldw	r4,108(sp)
   19d7c:	21000044 	addi	r4,r4,1
   19d80:	003c5e06 	br	18efc <__alt_data_end+0xfc018efc>
   19d84:	002b883a 	mov	r21,zero
   19d88:	00800084 	movi	r2,2
   19d8c:	10803fcc 	andi	r2,r2,255
   19d90:	01000044 	movi	r4,1
   19d94:	11002b26 	beq	r2,r4,19e44 <___vfiprintf_internal_r+0x1428>
   19d98:	01000084 	movi	r4,2
   19d9c:	11002b1e 	bne	r2,r4,19e4c <___vfiprintf_internal_r+0x1430>
   19da0:	1823883a 	mov	r17,r3
   19da4:	003ee506 	br	1993c <__alt_data_end+0xfc01993c>
   19da8:	8807883a 	mov	r3,r17
   19dac:	00800044 	movi	r2,1
   19db0:	003ff606 	br	19d8c <__alt_data_end+0xfc019d8c>
   19db4:	00800184 	movi	r2,6
   19db8:	1400012e 	bgeu	r2,r16,19dc0 <___vfiprintf_internal_r+0x13a4>
   19dbc:	1021883a 	mov	r16,r2
   19dc0:	8029883a 	mov	r20,r16
   19dc4:	8027883a 	mov	r19,r16
   19dc8:	80002216 	blt	r16,zero,19e54 <___vfiprintf_internal_r+0x1438>
   19dcc:	05c000f4 	movhi	r23,3
   19dd0:	df002215 	stw	fp,136(sp)
   19dd4:	bde57d04 	addi	r23,r23,-27148
   19dd8:	003cfb06 	br	191c8 <__alt_data_end+0xfc0191c8>
   19ddc:	d9002217 	ldw	r4,136(sp)
   19de0:	d9402417 	ldw	r5,144(sp)
   19de4:	20800017 	ldw	r2,0(r4)
   19de8:	21000104 	addi	r4,r4,4
   19dec:	d9002215 	stw	r4,136(sp)
   19df0:	11400015 	stw	r5,0(r2)
   19df4:	003b3d06 	br	18aec <__alt_data_end+0xfc018aec>
   19df8:	014000f4 	movhi	r5,3
   19dfc:	2965ec04 	addi	r5,r5,-26704
   19e00:	d9402315 	stw	r5,140(sp)
   19e04:	d9401b17 	ldw	r5,108(sp)
   19e08:	29400044 	addi	r5,r5,1
   19e0c:	003e6d06 	br	197c4 <__alt_data_end+0xfc0197c4>
   19e10:	8029883a 	mov	r20,r16
   19e14:	dd401d83 	ldbu	r21,118(sp)
   19e18:	df002215 	stw	fp,136(sp)
   19e1c:	0021883a 	mov	r16,zero
   19e20:	003c0106 	br	18e28 <__alt_data_end+0xfc018e28>
   19e24:	00c000f4 	movhi	r3,3
   19e28:	18e5e804 	addi	r3,r3,-26720
   19e2c:	d8c02315 	stw	r3,140(sp)
   19e30:	280d883a 	mov	r6,r5
   19e34:	003c6906 	br	18fdc <__alt_data_end+0xfc018fdc>
   19e38:	802d883a 	mov	r22,r16
   19e3c:	0021883a 	mov	r16,zero
   19e40:	003b5406 	br	18b94 <__alt_data_end+0xfc018b94>
   19e44:	1823883a 	mov	r17,r3
   19e48:	003cf306 	br	19218 <__alt_data_end+0xfc019218>
   19e4c:	1823883a 	mov	r17,r3
   19e50:	003cad06 	br	19108 <__alt_data_end+0xfc019108>
   19e54:	0027883a 	mov	r19,zero
   19e58:	003fdc06 	br	19dcc <__alt_data_end+0xfc019dcc>
   19e5c:	d9402217 	ldw	r5,136(sp)
   19e60:	8005883a 	mov	r2,r16
   19e64:	b0c00043 	ldbu	r3,1(r22)
   19e68:	2c000017 	ldw	r16,0(r5)
   19e6c:	29000104 	addi	r4,r5,4
   19e70:	d9002215 	stw	r4,136(sp)
   19e74:	102d883a 	mov	r22,r2
   19e78:	803fa50e 	bge	r16,zero,19d10 <__alt_data_end+0xfc019d10>
   19e7c:	18c03fcc 	andi	r3,r3,255
   19e80:	18c0201c 	xori	r3,r3,128
   19e84:	043fffc4 	movi	r16,-1
   19e88:	18ffe004 	addi	r3,r3,-128
   19e8c:	003b4006 	br	18b90 <__alt_data_end+0xfc018b90>
   19e90:	d9402303 	ldbu	r5,140(sp)
   19e94:	d9401d85 	stb	r5,118(sp)
   19e98:	003cae06 	br	19154 <__alt_data_end+0xfc019154>
   19e9c:	d8c02303 	ldbu	r3,140(sp)
   19ea0:	d8c01d85 	stb	r3,118(sp)
   19ea4:	003d1406 	br	192f8 <__alt_data_end+0xfc0192f8>
   19ea8:	d8c02303 	ldbu	r3,140(sp)
   19eac:	d8c01d85 	stb	r3,118(sp)
   19eb0:	003cca06 	br	191dc <__alt_data_end+0xfc0191dc>
   19eb4:	8880004c 	andi	r2,r17,1
   19eb8:	002b883a 	mov	r21,zero
   19ebc:	10000526 	beq	r2,zero,19ed4 <___vfiprintf_internal_r+0x14b8>
   19ec0:	00800c04 	movi	r2,48
   19ec4:	d88019c5 	stb	r2,103(sp)
   19ec8:	dd002817 	ldw	r20,160(sp)
   19ecc:	ddc019c4 	addi	r23,sp,103
   19ed0:	003bd506 	br	18e28 <__alt_data_end+0xfc018e28>
   19ed4:	0029883a 	mov	r20,zero
   19ed8:	ddc01a04 	addi	r23,sp,104
   19edc:	003bd206 	br	18e28 <__alt_data_end+0xfc018e28>
   19ee0:	d9002303 	ldbu	r4,140(sp)
   19ee4:	d9001d85 	stb	r4,118(sp)
   19ee8:	003da606 	br	19584 <__alt_data_end+0xfc019584>
   19eec:	d8c02303 	ldbu	r3,140(sp)
   19ef0:	d8c01d85 	stb	r3,118(sp)
   19ef4:	003c7606 	br	190d0 <__alt_data_end+0xfc0190d0>
   19ef8:	d8c02303 	ldbu	r3,140(sp)
   19efc:	d8c01d85 	stb	r3,118(sp)
   19f00:	003c6506 	br	19098 <__alt_data_end+0xfc019098>
   19f04:	d9002303 	ldbu	r4,140(sp)
   19f08:	d9001d85 	stb	r4,118(sp)
   19f0c:	003d3d06 	br	19404 <__alt_data_end+0xfc019404>
   19f10:	d8c02303 	ldbu	r3,140(sp)
   19f14:	d8c01d85 	stb	r3,118(sp)
   19f18:	003d1d06 	br	19390 <__alt_data_end+0xfc019390>
   19f1c:	d8c02303 	ldbu	r3,140(sp)
   19f20:	d8c01d85 	stb	r3,118(sp)
   19f24:	003d0306 	br	19334 <__alt_data_end+0xfc019334>

00019f28 <__vfiprintf_internal>:
   19f28:	008000f4 	movhi	r2,3
   19f2c:	10b2ae04 	addi	r2,r2,-13640
   19f30:	300f883a 	mov	r7,r6
   19f34:	280d883a 	mov	r6,r5
   19f38:	200b883a 	mov	r5,r4
   19f3c:	11000017 	ldw	r4,0(r2)
   19f40:	0018a1c1 	jmpi	18a1c <___vfiprintf_internal_r>

00019f44 <__sbprintf>:
   19f44:	2880030b 	ldhu	r2,12(r5)
   19f48:	2ac01917 	ldw	r11,100(r5)
   19f4c:	2a80038b 	ldhu	r10,14(r5)
   19f50:	2a400717 	ldw	r9,28(r5)
   19f54:	2a000917 	ldw	r8,36(r5)
   19f58:	defee204 	addi	sp,sp,-1144
   19f5c:	00c10004 	movi	r3,1024
   19f60:	dc011a15 	stw	r16,1128(sp)
   19f64:	10bfff4c 	andi	r2,r2,65533
   19f68:	2821883a 	mov	r16,r5
   19f6c:	d8cb883a 	add	r5,sp,r3
   19f70:	dc811c15 	stw	r18,1136(sp)
   19f74:	dc411b15 	stw	r17,1132(sp)
   19f78:	dfc11d15 	stw	ra,1140(sp)
   19f7c:	2025883a 	mov	r18,r4
   19f80:	d881030d 	sth	r2,1036(sp)
   19f84:	dac11915 	stw	r11,1124(sp)
   19f88:	da81038d 	sth	r10,1038(sp)
   19f8c:	da410715 	stw	r9,1052(sp)
   19f90:	da010915 	stw	r8,1060(sp)
   19f94:	dec10015 	stw	sp,1024(sp)
   19f98:	dec10415 	stw	sp,1040(sp)
   19f9c:	d8c10215 	stw	r3,1032(sp)
   19fa0:	d8c10515 	stw	r3,1044(sp)
   19fa4:	d8010615 	stw	zero,1048(sp)
   19fa8:	0018a1c0 	call	18a1c <___vfiprintf_internal_r>
   19fac:	1023883a 	mov	r17,r2
   19fb0:	10000416 	blt	r2,zero,19fc4 <__sbprintf+0x80>
   19fb4:	d9410004 	addi	r5,sp,1024
   19fb8:	9009883a 	mov	r4,r18
   19fbc:	00146cc0 	call	146cc <_fflush_r>
   19fc0:	10000d1e 	bne	r2,zero,19ff8 <__sbprintf+0xb4>
   19fc4:	d881030b 	ldhu	r2,1036(sp)
   19fc8:	1080100c 	andi	r2,r2,64
   19fcc:	10000326 	beq	r2,zero,19fdc <__sbprintf+0x98>
   19fd0:	8080030b 	ldhu	r2,12(r16)
   19fd4:	10801014 	ori	r2,r2,64
   19fd8:	8080030d 	sth	r2,12(r16)
   19fdc:	8805883a 	mov	r2,r17
   19fe0:	dfc11d17 	ldw	ra,1140(sp)
   19fe4:	dc811c17 	ldw	r18,1136(sp)
   19fe8:	dc411b17 	ldw	r17,1132(sp)
   19fec:	dc011a17 	ldw	r16,1128(sp)
   19ff0:	dec11e04 	addi	sp,sp,1144
   19ff4:	f800283a 	ret
   19ff8:	047fffc4 	movi	r17,-1
   19ffc:	003ff106 	br	19fc4 <__alt_data_end+0xfc019fc4>

0001a000 <__swbuf_r>:
   1a000:	defffb04 	addi	sp,sp,-20
   1a004:	dcc00315 	stw	r19,12(sp)
   1a008:	dc800215 	stw	r18,8(sp)
   1a00c:	dc000015 	stw	r16,0(sp)
   1a010:	dfc00415 	stw	ra,16(sp)
   1a014:	dc400115 	stw	r17,4(sp)
   1a018:	2025883a 	mov	r18,r4
   1a01c:	2827883a 	mov	r19,r5
   1a020:	3021883a 	mov	r16,r6
   1a024:	20000226 	beq	r4,zero,1a030 <__swbuf_r+0x30>
   1a028:	20800e17 	ldw	r2,56(r4)
   1a02c:	10004226 	beq	r2,zero,1a138 <__swbuf_r+0x138>
   1a030:	80800617 	ldw	r2,24(r16)
   1a034:	8100030b 	ldhu	r4,12(r16)
   1a038:	80800215 	stw	r2,8(r16)
   1a03c:	2080020c 	andi	r2,r4,8
   1a040:	10003626 	beq	r2,zero,1a11c <__swbuf_r+0x11c>
   1a044:	80c00417 	ldw	r3,16(r16)
   1a048:	18003426 	beq	r3,zero,1a11c <__swbuf_r+0x11c>
   1a04c:	2088000c 	andi	r2,r4,8192
   1a050:	9c403fcc 	andi	r17,r19,255
   1a054:	10001a26 	beq	r2,zero,1a0c0 <__swbuf_r+0xc0>
   1a058:	80800017 	ldw	r2,0(r16)
   1a05c:	81000517 	ldw	r4,20(r16)
   1a060:	10c7c83a 	sub	r3,r2,r3
   1a064:	1900200e 	bge	r3,r4,1a0e8 <__swbuf_r+0xe8>
   1a068:	18c00044 	addi	r3,r3,1
   1a06c:	81000217 	ldw	r4,8(r16)
   1a070:	11400044 	addi	r5,r2,1
   1a074:	81400015 	stw	r5,0(r16)
   1a078:	213fffc4 	addi	r4,r4,-1
   1a07c:	81000215 	stw	r4,8(r16)
   1a080:	14c00005 	stb	r19,0(r2)
   1a084:	80800517 	ldw	r2,20(r16)
   1a088:	10c01e26 	beq	r2,r3,1a104 <__swbuf_r+0x104>
   1a08c:	8080030b 	ldhu	r2,12(r16)
   1a090:	1080004c 	andi	r2,r2,1
   1a094:	10000226 	beq	r2,zero,1a0a0 <__swbuf_r+0xa0>
   1a098:	00800284 	movi	r2,10
   1a09c:	88801926 	beq	r17,r2,1a104 <__swbuf_r+0x104>
   1a0a0:	8805883a 	mov	r2,r17
   1a0a4:	dfc00417 	ldw	ra,16(sp)
   1a0a8:	dcc00317 	ldw	r19,12(sp)
   1a0ac:	dc800217 	ldw	r18,8(sp)
   1a0b0:	dc400117 	ldw	r17,4(sp)
   1a0b4:	dc000017 	ldw	r16,0(sp)
   1a0b8:	dec00504 	addi	sp,sp,20
   1a0bc:	f800283a 	ret
   1a0c0:	81401917 	ldw	r5,100(r16)
   1a0c4:	00b7ffc4 	movi	r2,-8193
   1a0c8:	21080014 	ori	r4,r4,8192
   1a0cc:	2884703a 	and	r2,r5,r2
   1a0d0:	80801915 	stw	r2,100(r16)
   1a0d4:	80800017 	ldw	r2,0(r16)
   1a0d8:	8100030d 	sth	r4,12(r16)
   1a0dc:	81000517 	ldw	r4,20(r16)
   1a0e0:	10c7c83a 	sub	r3,r2,r3
   1a0e4:	193fe016 	blt	r3,r4,1a068 <__alt_data_end+0xfc01a068>
   1a0e8:	800b883a 	mov	r5,r16
   1a0ec:	9009883a 	mov	r4,r18
   1a0f0:	00146cc0 	call	146cc <_fflush_r>
   1a0f4:	1000071e 	bne	r2,zero,1a114 <__swbuf_r+0x114>
   1a0f8:	80800017 	ldw	r2,0(r16)
   1a0fc:	00c00044 	movi	r3,1
   1a100:	003fda06 	br	1a06c <__alt_data_end+0xfc01a06c>
   1a104:	800b883a 	mov	r5,r16
   1a108:	9009883a 	mov	r4,r18
   1a10c:	00146cc0 	call	146cc <_fflush_r>
   1a110:	103fe326 	beq	r2,zero,1a0a0 <__alt_data_end+0xfc01a0a0>
   1a114:	00bfffc4 	movi	r2,-1
   1a118:	003fe206 	br	1a0a4 <__alt_data_end+0xfc01a0a4>
   1a11c:	800b883a 	mov	r5,r16
   1a120:	9009883a 	mov	r4,r18
   1a124:	0012aac0 	call	12aac <__swsetup_r>
   1a128:	103ffa1e 	bne	r2,zero,1a114 <__alt_data_end+0xfc01a114>
   1a12c:	8100030b 	ldhu	r4,12(r16)
   1a130:	80c00417 	ldw	r3,16(r16)
   1a134:	003fc506 	br	1a04c <__alt_data_end+0xfc01a04c>
   1a138:	0014ab80 	call	14ab8 <__sinit>
   1a13c:	003fbc06 	br	1a030 <__alt_data_end+0xfc01a030>

0001a140 <__swbuf>:
   1a140:	008000f4 	movhi	r2,3
   1a144:	10b2ae04 	addi	r2,r2,-13640
   1a148:	280d883a 	mov	r6,r5
   1a14c:	200b883a 	mov	r5,r4
   1a150:	11000017 	ldw	r4,0(r2)
   1a154:	001a0001 	jmpi	1a000 <__swbuf_r>

0001a158 <_write_r>:
   1a158:	defffd04 	addi	sp,sp,-12
   1a15c:	2805883a 	mov	r2,r5
   1a160:	dc000015 	stw	r16,0(sp)
   1a164:	040000f4 	movhi	r16,3
   1a168:	dc400115 	stw	r17,4(sp)
   1a16c:	300b883a 	mov	r5,r6
   1a170:	843f4004 	addi	r16,r16,-768
   1a174:	2023883a 	mov	r17,r4
   1a178:	380d883a 	mov	r6,r7
   1a17c:	1009883a 	mov	r4,r2
   1a180:	dfc00215 	stw	ra,8(sp)
   1a184:	80000015 	stw	zero,0(r16)
   1a188:	001e8e80 	call	1e8e8 <write>
   1a18c:	00ffffc4 	movi	r3,-1
   1a190:	10c00526 	beq	r2,r3,1a1a8 <_write_r+0x50>
   1a194:	dfc00217 	ldw	ra,8(sp)
   1a198:	dc400117 	ldw	r17,4(sp)
   1a19c:	dc000017 	ldw	r16,0(sp)
   1a1a0:	dec00304 	addi	sp,sp,12
   1a1a4:	f800283a 	ret
   1a1a8:	80c00017 	ldw	r3,0(r16)
   1a1ac:	183ff926 	beq	r3,zero,1a194 <__alt_data_end+0xfc01a194>
   1a1b0:	88c00015 	stw	r3,0(r17)
   1a1b4:	003ff706 	br	1a194 <__alt_data_end+0xfc01a194>

0001a1b8 <_close_r>:
   1a1b8:	defffd04 	addi	sp,sp,-12
   1a1bc:	dc000015 	stw	r16,0(sp)
   1a1c0:	040000f4 	movhi	r16,3
   1a1c4:	dc400115 	stw	r17,4(sp)
   1a1c8:	843f4004 	addi	r16,r16,-768
   1a1cc:	2023883a 	mov	r17,r4
   1a1d0:	2809883a 	mov	r4,r5
   1a1d4:	dfc00215 	stw	ra,8(sp)
   1a1d8:	80000015 	stw	zero,0(r16)
   1a1dc:	001ddec0 	call	1ddec <close>
   1a1e0:	00ffffc4 	movi	r3,-1
   1a1e4:	10c00526 	beq	r2,r3,1a1fc <_close_r+0x44>
   1a1e8:	dfc00217 	ldw	ra,8(sp)
   1a1ec:	dc400117 	ldw	r17,4(sp)
   1a1f0:	dc000017 	ldw	r16,0(sp)
   1a1f4:	dec00304 	addi	sp,sp,12
   1a1f8:	f800283a 	ret
   1a1fc:	80c00017 	ldw	r3,0(r16)
   1a200:	183ff926 	beq	r3,zero,1a1e8 <__alt_data_end+0xfc01a1e8>
   1a204:	88c00015 	stw	r3,0(r17)
   1a208:	003ff706 	br	1a1e8 <__alt_data_end+0xfc01a1e8>

0001a20c <_calloc_r>:
   1a20c:	defffe04 	addi	sp,sp,-8
   1a210:	2805883a 	mov	r2,r5
   1a214:	dc000015 	stw	r16,0(sp)
   1a218:	300b883a 	mov	r5,r6
   1a21c:	2021883a 	mov	r16,r4
   1a220:	1009883a 	mov	r4,r2
   1a224:	dfc00115 	stw	ra,4(sp)
   1a228:	000ccf40 	call	ccf4 <__mulsi3>
   1a22c:	100b883a 	mov	r5,r2
   1a230:	8009883a 	mov	r4,r16
   1a234:	000d2c80 	call	d2c8 <_malloc_r>
   1a238:	10002926 	beq	r2,zero,1a2e0 <_calloc_r+0xd4>
   1a23c:	11bfff17 	ldw	r6,-4(r2)
   1a240:	1021883a 	mov	r16,r2
   1a244:	00bfff04 	movi	r2,-4
   1a248:	308c703a 	and	r6,r6,r2
   1a24c:	00c00904 	movi	r3,36
   1a250:	308d883a 	add	r6,r6,r2
   1a254:	19801636 	bltu	r3,r6,1a2b0 <_calloc_r+0xa4>
   1a258:	008004c4 	movi	r2,19
   1a25c:	11800b2e 	bgeu	r2,r6,1a28c <_calloc_r+0x80>
   1a260:	80000015 	stw	zero,0(r16)
   1a264:	80000115 	stw	zero,4(r16)
   1a268:	008006c4 	movi	r2,27
   1a26c:	11801a2e 	bgeu	r2,r6,1a2d8 <_calloc_r+0xcc>
   1a270:	80000215 	stw	zero,8(r16)
   1a274:	80000315 	stw	zero,12(r16)
   1a278:	30c0151e 	bne	r6,r3,1a2d0 <_calloc_r+0xc4>
   1a27c:	80000415 	stw	zero,16(r16)
   1a280:	80800604 	addi	r2,r16,24
   1a284:	80000515 	stw	zero,20(r16)
   1a288:	00000106 	br	1a290 <_calloc_r+0x84>
   1a28c:	8005883a 	mov	r2,r16
   1a290:	10000015 	stw	zero,0(r2)
   1a294:	10000115 	stw	zero,4(r2)
   1a298:	10000215 	stw	zero,8(r2)
   1a29c:	8005883a 	mov	r2,r16
   1a2a0:	dfc00117 	ldw	ra,4(sp)
   1a2a4:	dc000017 	ldw	r16,0(sp)
   1a2a8:	dec00204 	addi	sp,sp,8
   1a2ac:	f800283a 	ret
   1a2b0:	000b883a 	mov	r5,zero
   1a2b4:	8009883a 	mov	r4,r16
   1a2b8:	000dc1c0 	call	dc1c <memset>
   1a2bc:	8005883a 	mov	r2,r16
   1a2c0:	dfc00117 	ldw	ra,4(sp)
   1a2c4:	dc000017 	ldw	r16,0(sp)
   1a2c8:	dec00204 	addi	sp,sp,8
   1a2cc:	f800283a 	ret
   1a2d0:	80800404 	addi	r2,r16,16
   1a2d4:	003fee06 	br	1a290 <__alt_data_end+0xfc01a290>
   1a2d8:	80800204 	addi	r2,r16,8
   1a2dc:	003fec06 	br	1a290 <__alt_data_end+0xfc01a290>
   1a2e0:	0005883a 	mov	r2,zero
   1a2e4:	003fee06 	br	1a2a0 <__alt_data_end+0xfc01a2a0>

0001a2e8 <_fclose_r>:
   1a2e8:	28003926 	beq	r5,zero,1a3d0 <_fclose_r+0xe8>
   1a2ec:	defffc04 	addi	sp,sp,-16
   1a2f0:	dc400115 	stw	r17,4(sp)
   1a2f4:	dc000015 	stw	r16,0(sp)
   1a2f8:	dfc00315 	stw	ra,12(sp)
   1a2fc:	dc800215 	stw	r18,8(sp)
   1a300:	2023883a 	mov	r17,r4
   1a304:	2821883a 	mov	r16,r5
   1a308:	20000226 	beq	r4,zero,1a314 <_fclose_r+0x2c>
   1a30c:	20800e17 	ldw	r2,56(r4)
   1a310:	10002726 	beq	r2,zero,1a3b0 <_fclose_r+0xc8>
   1a314:	8080030f 	ldh	r2,12(r16)
   1a318:	1000071e 	bne	r2,zero,1a338 <_fclose_r+0x50>
   1a31c:	0005883a 	mov	r2,zero
   1a320:	dfc00317 	ldw	ra,12(sp)
   1a324:	dc800217 	ldw	r18,8(sp)
   1a328:	dc400117 	ldw	r17,4(sp)
   1a32c:	dc000017 	ldw	r16,0(sp)
   1a330:	dec00404 	addi	sp,sp,16
   1a334:	f800283a 	ret
   1a338:	800b883a 	mov	r5,r16
   1a33c:	8809883a 	mov	r4,r17
   1a340:	00144b00 	call	144b0 <__sflush_r>
   1a344:	1025883a 	mov	r18,r2
   1a348:	80800b17 	ldw	r2,44(r16)
   1a34c:	10000426 	beq	r2,zero,1a360 <_fclose_r+0x78>
   1a350:	81400717 	ldw	r5,28(r16)
   1a354:	8809883a 	mov	r4,r17
   1a358:	103ee83a 	callr	r2
   1a35c:	10001616 	blt	r2,zero,1a3b8 <_fclose_r+0xd0>
   1a360:	8080030b 	ldhu	r2,12(r16)
   1a364:	1080200c 	andi	r2,r2,128
   1a368:	1000151e 	bne	r2,zero,1a3c0 <_fclose_r+0xd8>
   1a36c:	81400c17 	ldw	r5,48(r16)
   1a370:	28000526 	beq	r5,zero,1a388 <_fclose_r+0xa0>
   1a374:	80801004 	addi	r2,r16,64
   1a378:	28800226 	beq	r5,r2,1a384 <_fclose_r+0x9c>
   1a37c:	8809883a 	mov	r4,r17
   1a380:	0014c2c0 	call	14c2c <_free_r>
   1a384:	80000c15 	stw	zero,48(r16)
   1a388:	81401117 	ldw	r5,68(r16)
   1a38c:	28000326 	beq	r5,zero,1a39c <_fclose_r+0xb4>
   1a390:	8809883a 	mov	r4,r17
   1a394:	0014c2c0 	call	14c2c <_free_r>
   1a398:	80001115 	stw	zero,68(r16)
   1a39c:	0014ac80 	call	14ac8 <__sfp_lock_acquire>
   1a3a0:	8000030d 	sth	zero,12(r16)
   1a3a4:	0014acc0 	call	14acc <__sfp_lock_release>
   1a3a8:	9005883a 	mov	r2,r18
   1a3ac:	003fdc06 	br	1a320 <__alt_data_end+0xfc01a320>
   1a3b0:	0014ab80 	call	14ab8 <__sinit>
   1a3b4:	003fd706 	br	1a314 <__alt_data_end+0xfc01a314>
   1a3b8:	04bfffc4 	movi	r18,-1
   1a3bc:	003fe806 	br	1a360 <__alt_data_end+0xfc01a360>
   1a3c0:	81400417 	ldw	r5,16(r16)
   1a3c4:	8809883a 	mov	r4,r17
   1a3c8:	0014c2c0 	call	14c2c <_free_r>
   1a3cc:	003fe706 	br	1a36c <__alt_data_end+0xfc01a36c>
   1a3d0:	0005883a 	mov	r2,zero
   1a3d4:	f800283a 	ret

0001a3d8 <fclose>:
   1a3d8:	008000f4 	movhi	r2,3
   1a3dc:	10b2ae04 	addi	r2,r2,-13640
   1a3e0:	200b883a 	mov	r5,r4
   1a3e4:	11000017 	ldw	r4,0(r2)
   1a3e8:	001a2e81 	jmpi	1a2e8 <_fclose_r>

0001a3ec <__fputwc>:
   1a3ec:	defff804 	addi	sp,sp,-32
   1a3f0:	dcc00415 	stw	r19,16(sp)
   1a3f4:	dc800315 	stw	r18,12(sp)
   1a3f8:	dc000115 	stw	r16,4(sp)
   1a3fc:	dfc00715 	stw	ra,28(sp)
   1a400:	dd400615 	stw	r21,24(sp)
   1a404:	dd000515 	stw	r20,20(sp)
   1a408:	dc400215 	stw	r17,8(sp)
   1a40c:	2027883a 	mov	r19,r4
   1a410:	2825883a 	mov	r18,r5
   1a414:	3021883a 	mov	r16,r6
   1a418:	00156140 	call	15614 <__locale_mb_cur_max>
   1a41c:	00c00044 	movi	r3,1
   1a420:	10c03e26 	beq	r2,r3,1a51c <__fputwc+0x130>
   1a424:	81c01704 	addi	r7,r16,92
   1a428:	900d883a 	mov	r6,r18
   1a42c:	d80b883a 	mov	r5,sp
   1a430:	9809883a 	mov	r4,r19
   1a434:	001a7640 	call	1a764 <_wcrtomb_r>
   1a438:	1029883a 	mov	r20,r2
   1a43c:	00bfffc4 	movi	r2,-1
   1a440:	a0802026 	beq	r20,r2,1a4c4 <__fputwc+0xd8>
   1a444:	d9400003 	ldbu	r5,0(sp)
   1a448:	a0001c26 	beq	r20,zero,1a4bc <__fputwc+0xd0>
   1a44c:	0023883a 	mov	r17,zero
   1a450:	05400284 	movi	r21,10
   1a454:	00000906 	br	1a47c <__fputwc+0x90>
   1a458:	80800017 	ldw	r2,0(r16)
   1a45c:	11400005 	stb	r5,0(r2)
   1a460:	80c00017 	ldw	r3,0(r16)
   1a464:	18c00044 	addi	r3,r3,1
   1a468:	80c00015 	stw	r3,0(r16)
   1a46c:	8c400044 	addi	r17,r17,1
   1a470:	dc45883a 	add	r2,sp,r17
   1a474:	8d00112e 	bgeu	r17,r20,1a4bc <__fputwc+0xd0>
   1a478:	11400003 	ldbu	r5,0(r2)
   1a47c:	80c00217 	ldw	r3,8(r16)
   1a480:	18ffffc4 	addi	r3,r3,-1
   1a484:	80c00215 	stw	r3,8(r16)
   1a488:	183ff30e 	bge	r3,zero,1a458 <__alt_data_end+0xfc01a458>
   1a48c:	80800617 	ldw	r2,24(r16)
   1a490:	18801916 	blt	r3,r2,1a4f8 <__fputwc+0x10c>
   1a494:	80800017 	ldw	r2,0(r16)
   1a498:	11400005 	stb	r5,0(r2)
   1a49c:	80800017 	ldw	r2,0(r16)
   1a4a0:	10c00003 	ldbu	r3,0(r2)
   1a4a4:	10800044 	addi	r2,r2,1
   1a4a8:	1d402326 	beq	r3,r21,1a538 <__fputwc+0x14c>
   1a4ac:	80800015 	stw	r2,0(r16)
   1a4b0:	8c400044 	addi	r17,r17,1
   1a4b4:	dc45883a 	add	r2,sp,r17
   1a4b8:	8d3fef36 	bltu	r17,r20,1a478 <__alt_data_end+0xfc01a478>
   1a4bc:	9005883a 	mov	r2,r18
   1a4c0:	00000406 	br	1a4d4 <__fputwc+0xe8>
   1a4c4:	80c0030b 	ldhu	r3,12(r16)
   1a4c8:	a005883a 	mov	r2,r20
   1a4cc:	18c01014 	ori	r3,r3,64
   1a4d0:	80c0030d 	sth	r3,12(r16)
   1a4d4:	dfc00717 	ldw	ra,28(sp)
   1a4d8:	dd400617 	ldw	r21,24(sp)
   1a4dc:	dd000517 	ldw	r20,20(sp)
   1a4e0:	dcc00417 	ldw	r19,16(sp)
   1a4e4:	dc800317 	ldw	r18,12(sp)
   1a4e8:	dc400217 	ldw	r17,8(sp)
   1a4ec:	dc000117 	ldw	r16,4(sp)
   1a4f0:	dec00804 	addi	sp,sp,32
   1a4f4:	f800283a 	ret
   1a4f8:	800d883a 	mov	r6,r16
   1a4fc:	29403fcc 	andi	r5,r5,255
   1a500:	9809883a 	mov	r4,r19
   1a504:	001a0000 	call	1a000 <__swbuf_r>
   1a508:	10bfffe0 	cmpeqi	r2,r2,-1
   1a50c:	10803fcc 	andi	r2,r2,255
   1a510:	103fd626 	beq	r2,zero,1a46c <__alt_data_end+0xfc01a46c>
   1a514:	00bfffc4 	movi	r2,-1
   1a518:	003fee06 	br	1a4d4 <__alt_data_end+0xfc01a4d4>
   1a51c:	90ffffc4 	addi	r3,r18,-1
   1a520:	01003f84 	movi	r4,254
   1a524:	20ffbf36 	bltu	r4,r3,1a424 <__alt_data_end+0xfc01a424>
   1a528:	900b883a 	mov	r5,r18
   1a52c:	dc800005 	stb	r18,0(sp)
   1a530:	1029883a 	mov	r20,r2
   1a534:	003fc506 	br	1a44c <__alt_data_end+0xfc01a44c>
   1a538:	800d883a 	mov	r6,r16
   1a53c:	a80b883a 	mov	r5,r21
   1a540:	9809883a 	mov	r4,r19
   1a544:	001a0000 	call	1a000 <__swbuf_r>
   1a548:	10bfffe0 	cmpeqi	r2,r2,-1
   1a54c:	003fef06 	br	1a50c <__alt_data_end+0xfc01a50c>

0001a550 <_fputwc_r>:
   1a550:	3080030b 	ldhu	r2,12(r6)
   1a554:	10c8000c 	andi	r3,r2,8192
   1a558:	1800051e 	bne	r3,zero,1a570 <_fputwc_r+0x20>
   1a55c:	30c01917 	ldw	r3,100(r6)
   1a560:	10880014 	ori	r2,r2,8192
   1a564:	3080030d 	sth	r2,12(r6)
   1a568:	18880014 	ori	r2,r3,8192
   1a56c:	30801915 	stw	r2,100(r6)
   1a570:	001a3ec1 	jmpi	1a3ec <__fputwc>

0001a574 <fputwc>:
   1a574:	008000f4 	movhi	r2,3
   1a578:	defffc04 	addi	sp,sp,-16
   1a57c:	10b2ae04 	addi	r2,r2,-13640
   1a580:	dc000115 	stw	r16,4(sp)
   1a584:	14000017 	ldw	r16,0(r2)
   1a588:	dc400215 	stw	r17,8(sp)
   1a58c:	dfc00315 	stw	ra,12(sp)
   1a590:	2023883a 	mov	r17,r4
   1a594:	80000226 	beq	r16,zero,1a5a0 <fputwc+0x2c>
   1a598:	80800e17 	ldw	r2,56(r16)
   1a59c:	10001026 	beq	r2,zero,1a5e0 <fputwc+0x6c>
   1a5a0:	2880030b 	ldhu	r2,12(r5)
   1a5a4:	10c8000c 	andi	r3,r2,8192
   1a5a8:	1800051e 	bne	r3,zero,1a5c0 <fputwc+0x4c>
   1a5ac:	28c01917 	ldw	r3,100(r5)
   1a5b0:	10880014 	ori	r2,r2,8192
   1a5b4:	2880030d 	sth	r2,12(r5)
   1a5b8:	18880014 	ori	r2,r3,8192
   1a5bc:	28801915 	stw	r2,100(r5)
   1a5c0:	280d883a 	mov	r6,r5
   1a5c4:	8009883a 	mov	r4,r16
   1a5c8:	880b883a 	mov	r5,r17
   1a5cc:	dfc00317 	ldw	ra,12(sp)
   1a5d0:	dc400217 	ldw	r17,8(sp)
   1a5d4:	dc000117 	ldw	r16,4(sp)
   1a5d8:	dec00404 	addi	sp,sp,16
   1a5dc:	001a3ec1 	jmpi	1a3ec <__fputwc>
   1a5e0:	8009883a 	mov	r4,r16
   1a5e4:	d9400015 	stw	r5,0(sp)
   1a5e8:	0014ab80 	call	14ab8 <__sinit>
   1a5ec:	d9400017 	ldw	r5,0(sp)
   1a5f0:	003feb06 	br	1a5a0 <__alt_data_end+0xfc01a5a0>

0001a5f4 <_fstat_r>:
   1a5f4:	defffd04 	addi	sp,sp,-12
   1a5f8:	2805883a 	mov	r2,r5
   1a5fc:	dc000015 	stw	r16,0(sp)
   1a600:	040000f4 	movhi	r16,3
   1a604:	dc400115 	stw	r17,4(sp)
   1a608:	843f4004 	addi	r16,r16,-768
   1a60c:	2023883a 	mov	r17,r4
   1a610:	300b883a 	mov	r5,r6
   1a614:	1009883a 	mov	r4,r2
   1a618:	dfc00215 	stw	ra,8(sp)
   1a61c:	80000015 	stw	zero,0(r16)
   1a620:	001df600 	call	1df60 <fstat>
   1a624:	00ffffc4 	movi	r3,-1
   1a628:	10c00526 	beq	r2,r3,1a640 <_fstat_r+0x4c>
   1a62c:	dfc00217 	ldw	ra,8(sp)
   1a630:	dc400117 	ldw	r17,4(sp)
   1a634:	dc000017 	ldw	r16,0(sp)
   1a638:	dec00304 	addi	sp,sp,12
   1a63c:	f800283a 	ret
   1a640:	80c00017 	ldw	r3,0(r16)
   1a644:	183ff926 	beq	r3,zero,1a62c <__alt_data_end+0xfc01a62c>
   1a648:	88c00015 	stw	r3,0(r17)
   1a64c:	003ff706 	br	1a62c <__alt_data_end+0xfc01a62c>

0001a650 <_isatty_r>:
   1a650:	defffd04 	addi	sp,sp,-12
   1a654:	dc000015 	stw	r16,0(sp)
   1a658:	040000f4 	movhi	r16,3
   1a65c:	dc400115 	stw	r17,4(sp)
   1a660:	843f4004 	addi	r16,r16,-768
   1a664:	2023883a 	mov	r17,r4
   1a668:	2809883a 	mov	r4,r5
   1a66c:	dfc00215 	stw	ra,8(sp)
   1a670:	80000015 	stw	zero,0(r16)
   1a674:	001e0740 	call	1e074 <isatty>
   1a678:	00ffffc4 	movi	r3,-1
   1a67c:	10c00526 	beq	r2,r3,1a694 <_isatty_r+0x44>
   1a680:	dfc00217 	ldw	ra,8(sp)
   1a684:	dc400117 	ldw	r17,4(sp)
   1a688:	dc000017 	ldw	r16,0(sp)
   1a68c:	dec00304 	addi	sp,sp,12
   1a690:	f800283a 	ret
   1a694:	80c00017 	ldw	r3,0(r16)
   1a698:	183ff926 	beq	r3,zero,1a680 <__alt_data_end+0xfc01a680>
   1a69c:	88c00015 	stw	r3,0(r17)
   1a6a0:	003ff706 	br	1a680 <__alt_data_end+0xfc01a680>

0001a6a4 <_lseek_r>:
   1a6a4:	defffd04 	addi	sp,sp,-12
   1a6a8:	2805883a 	mov	r2,r5
   1a6ac:	dc000015 	stw	r16,0(sp)
   1a6b0:	040000f4 	movhi	r16,3
   1a6b4:	dc400115 	stw	r17,4(sp)
   1a6b8:	300b883a 	mov	r5,r6
   1a6bc:	843f4004 	addi	r16,r16,-768
   1a6c0:	2023883a 	mov	r17,r4
   1a6c4:	380d883a 	mov	r6,r7
   1a6c8:	1009883a 	mov	r4,r2
   1a6cc:	dfc00215 	stw	ra,8(sp)
   1a6d0:	80000015 	stw	zero,0(r16)
   1a6d4:	001e3b40 	call	1e3b4 <lseek>
   1a6d8:	00ffffc4 	movi	r3,-1
   1a6dc:	10c00526 	beq	r2,r3,1a6f4 <_lseek_r+0x50>
   1a6e0:	dfc00217 	ldw	ra,8(sp)
   1a6e4:	dc400117 	ldw	r17,4(sp)
   1a6e8:	dc000017 	ldw	r16,0(sp)
   1a6ec:	dec00304 	addi	sp,sp,12
   1a6f0:	f800283a 	ret
   1a6f4:	80c00017 	ldw	r3,0(r16)
   1a6f8:	183ff926 	beq	r3,zero,1a6e0 <__alt_data_end+0xfc01a6e0>
   1a6fc:	88c00015 	stw	r3,0(r17)
   1a700:	003ff706 	br	1a6e0 <__alt_data_end+0xfc01a6e0>

0001a704 <_read_r>:
   1a704:	defffd04 	addi	sp,sp,-12
   1a708:	2805883a 	mov	r2,r5
   1a70c:	dc000015 	stw	r16,0(sp)
   1a710:	040000f4 	movhi	r16,3
   1a714:	dc400115 	stw	r17,4(sp)
   1a718:	300b883a 	mov	r5,r6
   1a71c:	843f4004 	addi	r16,r16,-768
   1a720:	2023883a 	mov	r17,r4
   1a724:	380d883a 	mov	r6,r7
   1a728:	1009883a 	mov	r4,r2
   1a72c:	dfc00215 	stw	ra,8(sp)
   1a730:	80000015 	stw	zero,0(r16)
   1a734:	001e5900 	call	1e590 <read>
   1a738:	00ffffc4 	movi	r3,-1
   1a73c:	10c00526 	beq	r2,r3,1a754 <_read_r+0x50>
   1a740:	dfc00217 	ldw	ra,8(sp)
   1a744:	dc400117 	ldw	r17,4(sp)
   1a748:	dc000017 	ldw	r16,0(sp)
   1a74c:	dec00304 	addi	sp,sp,12
   1a750:	f800283a 	ret
   1a754:	80c00017 	ldw	r3,0(r16)
   1a758:	183ff926 	beq	r3,zero,1a740 <__alt_data_end+0xfc01a740>
   1a75c:	88c00015 	stw	r3,0(r17)
   1a760:	003ff706 	br	1a740 <__alt_data_end+0xfc01a740>

0001a764 <_wcrtomb_r>:
   1a764:	defff604 	addi	sp,sp,-40
   1a768:	008000f4 	movhi	r2,3
   1a76c:	dc800815 	stw	r18,32(sp)
   1a770:	dc400715 	stw	r17,28(sp)
   1a774:	dc000615 	stw	r16,24(sp)
   1a778:	10b2b204 	addi	r2,r2,-13624
   1a77c:	dfc00915 	stw	ra,36(sp)
   1a780:	2021883a 	mov	r16,r4
   1a784:	3823883a 	mov	r17,r7
   1a788:	14800017 	ldw	r18,0(r2)
   1a78c:	28001426 	beq	r5,zero,1a7e0 <_wcrtomb_r+0x7c>
   1a790:	d9400415 	stw	r5,16(sp)
   1a794:	d9800515 	stw	r6,20(sp)
   1a798:	00156080 	call	15608 <__locale_charset>
   1a79c:	d9800517 	ldw	r6,20(sp)
   1a7a0:	d9400417 	ldw	r5,16(sp)
   1a7a4:	100f883a 	mov	r7,r2
   1a7a8:	dc400015 	stw	r17,0(sp)
   1a7ac:	8009883a 	mov	r4,r16
   1a7b0:	903ee83a 	callr	r18
   1a7b4:	00ffffc4 	movi	r3,-1
   1a7b8:	10c0031e 	bne	r2,r3,1a7c8 <_wcrtomb_r+0x64>
   1a7bc:	88000015 	stw	zero,0(r17)
   1a7c0:	00c02284 	movi	r3,138
   1a7c4:	80c00015 	stw	r3,0(r16)
   1a7c8:	dfc00917 	ldw	ra,36(sp)
   1a7cc:	dc800817 	ldw	r18,32(sp)
   1a7d0:	dc400717 	ldw	r17,28(sp)
   1a7d4:	dc000617 	ldw	r16,24(sp)
   1a7d8:	dec00a04 	addi	sp,sp,40
   1a7dc:	f800283a 	ret
   1a7e0:	00156080 	call	15608 <__locale_charset>
   1a7e4:	100f883a 	mov	r7,r2
   1a7e8:	dc400015 	stw	r17,0(sp)
   1a7ec:	000d883a 	mov	r6,zero
   1a7f0:	d9400104 	addi	r5,sp,4
   1a7f4:	8009883a 	mov	r4,r16
   1a7f8:	903ee83a 	callr	r18
   1a7fc:	003fed06 	br	1a7b4 <__alt_data_end+0xfc01a7b4>

0001a800 <wcrtomb>:
   1a800:	defff604 	addi	sp,sp,-40
   1a804:	008000f4 	movhi	r2,3
   1a808:	dc800615 	stw	r18,24(sp)
   1a80c:	dc400515 	stw	r17,20(sp)
   1a810:	10b2ae04 	addi	r2,r2,-13640
   1a814:	dfc00915 	stw	ra,36(sp)
   1a818:	dd000815 	stw	r20,32(sp)
   1a81c:	dcc00715 	stw	r19,28(sp)
   1a820:	dc000415 	stw	r16,16(sp)
   1a824:	3025883a 	mov	r18,r6
   1a828:	14400017 	ldw	r17,0(r2)
   1a82c:	20001926 	beq	r4,zero,1a894 <wcrtomb+0x94>
   1a830:	008000f4 	movhi	r2,3
   1a834:	10b2b204 	addi	r2,r2,-13624
   1a838:	15000017 	ldw	r20,0(r2)
   1a83c:	2021883a 	mov	r16,r4
   1a840:	2827883a 	mov	r19,r5
   1a844:	00156080 	call	15608 <__locale_charset>
   1a848:	100f883a 	mov	r7,r2
   1a84c:	dc800015 	stw	r18,0(sp)
   1a850:	980d883a 	mov	r6,r19
   1a854:	800b883a 	mov	r5,r16
   1a858:	8809883a 	mov	r4,r17
   1a85c:	a03ee83a 	callr	r20
   1a860:	00ffffc4 	movi	r3,-1
   1a864:	10c0031e 	bne	r2,r3,1a874 <wcrtomb+0x74>
   1a868:	90000015 	stw	zero,0(r18)
   1a86c:	00c02284 	movi	r3,138
   1a870:	88c00015 	stw	r3,0(r17)
   1a874:	dfc00917 	ldw	ra,36(sp)
   1a878:	dd000817 	ldw	r20,32(sp)
   1a87c:	dcc00717 	ldw	r19,28(sp)
   1a880:	dc800617 	ldw	r18,24(sp)
   1a884:	dc400517 	ldw	r17,20(sp)
   1a888:	dc000417 	ldw	r16,16(sp)
   1a88c:	dec00a04 	addi	sp,sp,40
   1a890:	f800283a 	ret
   1a894:	008000f4 	movhi	r2,3
   1a898:	10b2b204 	addi	r2,r2,-13624
   1a89c:	14000017 	ldw	r16,0(r2)
   1a8a0:	00156080 	call	15608 <__locale_charset>
   1a8a4:	100f883a 	mov	r7,r2
   1a8a8:	dc800015 	stw	r18,0(sp)
   1a8ac:	000d883a 	mov	r6,zero
   1a8b0:	d9400104 	addi	r5,sp,4
   1a8b4:	8809883a 	mov	r4,r17
   1a8b8:	803ee83a 	callr	r16
   1a8bc:	003fe806 	br	1a860 <__alt_data_end+0xfc01a860>

0001a8c0 <__ascii_wctomb>:
   1a8c0:	28000526 	beq	r5,zero,1a8d8 <__ascii_wctomb+0x18>
   1a8c4:	00803fc4 	movi	r2,255
   1a8c8:	11800536 	bltu	r2,r6,1a8e0 <__ascii_wctomb+0x20>
   1a8cc:	29800005 	stb	r6,0(r5)
   1a8d0:	00800044 	movi	r2,1
   1a8d4:	f800283a 	ret
   1a8d8:	0005883a 	mov	r2,zero
   1a8dc:	f800283a 	ret
   1a8e0:	00802284 	movi	r2,138
   1a8e4:	20800015 	stw	r2,0(r4)
   1a8e8:	00bfffc4 	movi	r2,-1
   1a8ec:	f800283a 	ret

0001a8f0 <_wctomb_r>:
   1a8f0:	008000f4 	movhi	r2,3
   1a8f4:	defff904 	addi	sp,sp,-28
   1a8f8:	10b2b204 	addi	r2,r2,-13624
   1a8fc:	dfc00615 	stw	ra,24(sp)
   1a900:	dc400515 	stw	r17,20(sp)
   1a904:	dc000415 	stw	r16,16(sp)
   1a908:	3823883a 	mov	r17,r7
   1a90c:	14000017 	ldw	r16,0(r2)
   1a910:	d9000115 	stw	r4,4(sp)
   1a914:	d9400215 	stw	r5,8(sp)
   1a918:	d9800315 	stw	r6,12(sp)
   1a91c:	00156080 	call	15608 <__locale_charset>
   1a920:	d9800317 	ldw	r6,12(sp)
   1a924:	d9400217 	ldw	r5,8(sp)
   1a928:	d9000117 	ldw	r4,4(sp)
   1a92c:	100f883a 	mov	r7,r2
   1a930:	dc400015 	stw	r17,0(sp)
   1a934:	803ee83a 	callr	r16
   1a938:	dfc00617 	ldw	ra,24(sp)
   1a93c:	dc400517 	ldw	r17,20(sp)
   1a940:	dc000417 	ldw	r16,16(sp)
   1a944:	dec00704 	addi	sp,sp,28
   1a948:	f800283a 	ret

0001a94c <__udivdi3>:
   1a94c:	defff404 	addi	sp,sp,-48
   1a950:	dcc00515 	stw	r19,20(sp)
   1a954:	dc000215 	stw	r16,8(sp)
   1a958:	dfc00b15 	stw	ra,44(sp)
   1a95c:	df000a15 	stw	fp,40(sp)
   1a960:	ddc00915 	stw	r23,36(sp)
   1a964:	dd800815 	stw	r22,32(sp)
   1a968:	dd400715 	stw	r21,28(sp)
   1a96c:	dd000615 	stw	r20,24(sp)
   1a970:	dc800415 	stw	r18,16(sp)
   1a974:	dc400315 	stw	r17,12(sp)
   1a978:	2027883a 	mov	r19,r4
   1a97c:	2821883a 	mov	r16,r5
   1a980:	3800461e 	bne	r7,zero,1aa9c <__udivdi3+0x150>
   1a984:	3023883a 	mov	r17,r6
   1a988:	2025883a 	mov	r18,r4
   1a98c:	2980572e 	bgeu	r5,r6,1aaec <__udivdi3+0x1a0>
   1a990:	00bfffd4 	movui	r2,65535
   1a994:	282d883a 	mov	r22,r5
   1a998:	1180b236 	bltu	r2,r6,1ac64 <__udivdi3+0x318>
   1a99c:	00803fc4 	movi	r2,255
   1a9a0:	1185803a 	cmpltu	r2,r2,r6
   1a9a4:	100490fa 	slli	r2,r2,3
   1a9a8:	3086d83a 	srl	r3,r6,r2
   1a9ac:	010000f4 	movhi	r4,3
   1a9b0:	2125f004 	addi	r4,r4,-26688
   1a9b4:	20c7883a 	add	r3,r4,r3
   1a9b8:	18c00003 	ldbu	r3,0(r3)
   1a9bc:	1885883a 	add	r2,r3,r2
   1a9c0:	00c00804 	movi	r3,32
   1a9c4:	1887c83a 	sub	r3,r3,r2
   1a9c8:	18000526 	beq	r3,zero,1a9e0 <__udivdi3+0x94>
   1a9cc:	80e0983a 	sll	r16,r16,r3
   1a9d0:	9884d83a 	srl	r2,r19,r2
   1a9d4:	30e2983a 	sll	r17,r6,r3
   1a9d8:	98e4983a 	sll	r18,r19,r3
   1a9dc:	142cb03a 	or	r22,r2,r16
   1a9e0:	882ad43a 	srli	r21,r17,16
   1a9e4:	b009883a 	mov	r4,r22
   1a9e8:	8d3fffcc 	andi	r20,r17,65535
   1a9ec:	a80b883a 	mov	r5,r21
   1a9f0:	000cc9c0 	call	cc9c <__umodsi3>
   1a9f4:	b009883a 	mov	r4,r22
   1a9f8:	a80b883a 	mov	r5,r21
   1a9fc:	1027883a 	mov	r19,r2
   1aa00:	000cc380 	call	cc38 <__udivsi3>
   1aa04:	100b883a 	mov	r5,r2
   1aa08:	a009883a 	mov	r4,r20
   1aa0c:	102d883a 	mov	r22,r2
   1aa10:	000ccf40 	call	ccf4 <__mulsi3>
   1aa14:	9826943a 	slli	r19,r19,16
   1aa18:	9006d43a 	srli	r3,r18,16
   1aa1c:	1cc6b03a 	or	r3,r3,r19
   1aa20:	1880052e 	bgeu	r3,r2,1aa38 <__udivdi3+0xec>
   1aa24:	1c47883a 	add	r3,r3,r17
   1aa28:	b13fffc4 	addi	r4,r22,-1
   1aa2c:	1c400136 	bltu	r3,r17,1aa34 <__udivdi3+0xe8>
   1aa30:	18814236 	bltu	r3,r2,1af3c <__udivdi3+0x5f0>
   1aa34:	202d883a 	mov	r22,r4
   1aa38:	18a1c83a 	sub	r16,r3,r2
   1aa3c:	8009883a 	mov	r4,r16
   1aa40:	a80b883a 	mov	r5,r21
   1aa44:	000cc9c0 	call	cc9c <__umodsi3>
   1aa48:	1027883a 	mov	r19,r2
   1aa4c:	8009883a 	mov	r4,r16
   1aa50:	a80b883a 	mov	r5,r21
   1aa54:	9826943a 	slli	r19,r19,16
   1aa58:	000cc380 	call	cc38 <__udivsi3>
   1aa5c:	100b883a 	mov	r5,r2
   1aa60:	a009883a 	mov	r4,r20
   1aa64:	94bfffcc 	andi	r18,r18,65535
   1aa68:	1021883a 	mov	r16,r2
   1aa6c:	94e4b03a 	or	r18,r18,r19
   1aa70:	000ccf40 	call	ccf4 <__mulsi3>
   1aa74:	9080052e 	bgeu	r18,r2,1aa8c <__udivdi3+0x140>
   1aa78:	8ca5883a 	add	r18,r17,r18
   1aa7c:	80ffffc4 	addi	r3,r16,-1
   1aa80:	94410c36 	bltu	r18,r17,1aeb4 <__udivdi3+0x568>
   1aa84:	90810b2e 	bgeu	r18,r2,1aeb4 <__udivdi3+0x568>
   1aa88:	843fff84 	addi	r16,r16,-2
   1aa8c:	b004943a 	slli	r2,r22,16
   1aa90:	0007883a 	mov	r3,zero
   1aa94:	1404b03a 	or	r2,r2,r16
   1aa98:	00005e06 	br	1ac14 <__udivdi3+0x2c8>
   1aa9c:	29c05b36 	bltu	r5,r7,1ac0c <__udivdi3+0x2c0>
   1aaa0:	00bfffd4 	movui	r2,65535
   1aaa4:	11c0672e 	bgeu	r2,r7,1ac44 <__udivdi3+0x2f8>
   1aaa8:	00804034 	movhi	r2,256
   1aaac:	10bfffc4 	addi	r2,r2,-1
   1aab0:	11c10a36 	bltu	r2,r7,1aedc <__udivdi3+0x590>
   1aab4:	00800404 	movi	r2,16
   1aab8:	3886d83a 	srl	r3,r7,r2
   1aabc:	010000f4 	movhi	r4,3
   1aac0:	2125f004 	addi	r4,r4,-26688
   1aac4:	20c7883a 	add	r3,r4,r3
   1aac8:	18c00003 	ldbu	r3,0(r3)
   1aacc:	05c00804 	movi	r23,32
   1aad0:	1885883a 	add	r2,r3,r2
   1aad4:	b8afc83a 	sub	r23,r23,r2
   1aad8:	b800671e 	bne	r23,zero,1ac78 <__udivdi3+0x32c>
   1aadc:	3c010536 	bltu	r7,r16,1aef4 <__udivdi3+0x5a8>
   1aae0:	9985403a 	cmpgeu	r2,r19,r6
   1aae4:	0007883a 	mov	r3,zero
   1aae8:	00004a06 	br	1ac14 <__udivdi3+0x2c8>
   1aaec:	3000041e 	bne	r6,zero,1ab00 <__udivdi3+0x1b4>
   1aaf0:	000b883a 	mov	r5,zero
   1aaf4:	01000044 	movi	r4,1
   1aaf8:	000cc380 	call	cc38 <__udivsi3>
   1aafc:	1023883a 	mov	r17,r2
   1ab00:	00bfffd4 	movui	r2,65535
   1ab04:	1440532e 	bgeu	r2,r17,1ac54 <__udivdi3+0x308>
   1ab08:	00804034 	movhi	r2,256
   1ab0c:	10bfffc4 	addi	r2,r2,-1
   1ab10:	1440f436 	bltu	r2,r17,1aee4 <__udivdi3+0x598>
   1ab14:	00800404 	movi	r2,16
   1ab18:	8886d83a 	srl	r3,r17,r2
   1ab1c:	010000f4 	movhi	r4,3
   1ab20:	2125f004 	addi	r4,r4,-26688
   1ab24:	20c7883a 	add	r3,r4,r3
   1ab28:	18c00003 	ldbu	r3,0(r3)
   1ab2c:	1885883a 	add	r2,r3,r2
   1ab30:	00c00804 	movi	r3,32
   1ab34:	1887c83a 	sub	r3,r3,r2
   1ab38:	1800a51e 	bne	r3,zero,1add0 <__udivdi3+0x484>
   1ab3c:	882ad43a 	srli	r21,r17,16
   1ab40:	8461c83a 	sub	r16,r16,r17
   1ab44:	8d3fffcc 	andi	r20,r17,65535
   1ab48:	00c00044 	movi	r3,1
   1ab4c:	a80b883a 	mov	r5,r21
   1ab50:	8009883a 	mov	r4,r16
   1ab54:	d8c00115 	stw	r3,4(sp)
   1ab58:	000cc9c0 	call	cc9c <__umodsi3>
   1ab5c:	a80b883a 	mov	r5,r21
   1ab60:	8009883a 	mov	r4,r16
   1ab64:	1027883a 	mov	r19,r2
   1ab68:	000cc380 	call	cc38 <__udivsi3>
   1ab6c:	a00b883a 	mov	r5,r20
   1ab70:	1009883a 	mov	r4,r2
   1ab74:	102d883a 	mov	r22,r2
   1ab78:	000ccf40 	call	ccf4 <__mulsi3>
   1ab7c:	9826943a 	slli	r19,r19,16
   1ab80:	900ed43a 	srli	r7,r18,16
   1ab84:	d8c00117 	ldw	r3,4(sp)
   1ab88:	3cceb03a 	or	r7,r7,r19
   1ab8c:	3880052e 	bgeu	r7,r2,1aba4 <__udivdi3+0x258>
   1ab90:	3c4f883a 	add	r7,r7,r17
   1ab94:	b13fffc4 	addi	r4,r22,-1
   1ab98:	3c400136 	bltu	r7,r17,1aba0 <__udivdi3+0x254>
   1ab9c:	3880e436 	bltu	r7,r2,1af30 <__udivdi3+0x5e4>
   1aba0:	202d883a 	mov	r22,r4
   1aba4:	38a1c83a 	sub	r16,r7,r2
   1aba8:	8009883a 	mov	r4,r16
   1abac:	a80b883a 	mov	r5,r21
   1abb0:	d8c00115 	stw	r3,4(sp)
   1abb4:	000cc9c0 	call	cc9c <__umodsi3>
   1abb8:	1027883a 	mov	r19,r2
   1abbc:	8009883a 	mov	r4,r16
   1abc0:	a80b883a 	mov	r5,r21
   1abc4:	9826943a 	slli	r19,r19,16
   1abc8:	000cc380 	call	cc38 <__udivsi3>
   1abcc:	a00b883a 	mov	r5,r20
   1abd0:	1009883a 	mov	r4,r2
   1abd4:	94bfffcc 	andi	r18,r18,65535
   1abd8:	1021883a 	mov	r16,r2
   1abdc:	94e4b03a 	or	r18,r18,r19
   1abe0:	000ccf40 	call	ccf4 <__mulsi3>
   1abe4:	d8c00117 	ldw	r3,4(sp)
   1abe8:	9080052e 	bgeu	r18,r2,1ac00 <__udivdi3+0x2b4>
   1abec:	8ca5883a 	add	r18,r17,r18
   1abf0:	813fffc4 	addi	r4,r16,-1
   1abf4:	9440ad36 	bltu	r18,r17,1aeac <__udivdi3+0x560>
   1abf8:	9080ac2e 	bgeu	r18,r2,1aeac <__udivdi3+0x560>
   1abfc:	843fff84 	addi	r16,r16,-2
   1ac00:	b004943a 	slli	r2,r22,16
   1ac04:	1404b03a 	or	r2,r2,r16
   1ac08:	00000206 	br	1ac14 <__udivdi3+0x2c8>
   1ac0c:	0007883a 	mov	r3,zero
   1ac10:	0005883a 	mov	r2,zero
   1ac14:	dfc00b17 	ldw	ra,44(sp)
   1ac18:	df000a17 	ldw	fp,40(sp)
   1ac1c:	ddc00917 	ldw	r23,36(sp)
   1ac20:	dd800817 	ldw	r22,32(sp)
   1ac24:	dd400717 	ldw	r21,28(sp)
   1ac28:	dd000617 	ldw	r20,24(sp)
   1ac2c:	dcc00517 	ldw	r19,20(sp)
   1ac30:	dc800417 	ldw	r18,16(sp)
   1ac34:	dc400317 	ldw	r17,12(sp)
   1ac38:	dc000217 	ldw	r16,8(sp)
   1ac3c:	dec00c04 	addi	sp,sp,48
   1ac40:	f800283a 	ret
   1ac44:	00803fc4 	movi	r2,255
   1ac48:	11c5803a 	cmpltu	r2,r2,r7
   1ac4c:	100490fa 	slli	r2,r2,3
   1ac50:	003f9906 	br	1aab8 <__alt_data_end+0xfc01aab8>
   1ac54:	00803fc4 	movi	r2,255
   1ac58:	1445803a 	cmpltu	r2,r2,r17
   1ac5c:	100490fa 	slli	r2,r2,3
   1ac60:	003fad06 	br	1ab18 <__alt_data_end+0xfc01ab18>
   1ac64:	00804034 	movhi	r2,256
   1ac68:	10bfffc4 	addi	r2,r2,-1
   1ac6c:	11809f36 	bltu	r2,r6,1aeec <__udivdi3+0x5a0>
   1ac70:	00800404 	movi	r2,16
   1ac74:	003f4c06 	br	1a9a8 <__alt_data_end+0xfc01a9a8>
   1ac78:	3dce983a 	sll	r7,r7,r23
   1ac7c:	30b8d83a 	srl	fp,r6,r2
   1ac80:	80a2d83a 	srl	r17,r16,r2
   1ac84:	35cc983a 	sll	r6,r6,r23
   1ac88:	3f38b03a 	or	fp,r7,fp
   1ac8c:	e024d43a 	srli	r18,fp,16
   1ac90:	9884d83a 	srl	r2,r19,r2
   1ac94:	85e0983a 	sll	r16,r16,r23
   1ac98:	8809883a 	mov	r4,r17
   1ac9c:	900b883a 	mov	r5,r18
   1aca0:	d9800015 	stw	r6,0(sp)
   1aca4:	1420b03a 	or	r16,r2,r16
   1aca8:	000cc9c0 	call	cc9c <__umodsi3>
   1acac:	900b883a 	mov	r5,r18
   1acb0:	8809883a 	mov	r4,r17
   1acb4:	1029883a 	mov	r20,r2
   1acb8:	e5bfffcc 	andi	r22,fp,65535
   1acbc:	000cc380 	call	cc38 <__udivsi3>
   1acc0:	100b883a 	mov	r5,r2
   1acc4:	b009883a 	mov	r4,r22
   1acc8:	102b883a 	mov	r21,r2
   1accc:	000ccf40 	call	ccf4 <__mulsi3>
   1acd0:	a028943a 	slli	r20,r20,16
   1acd4:	8006d43a 	srli	r3,r16,16
   1acd8:	1d06b03a 	or	r3,r3,r20
   1acdc:	1880042e 	bgeu	r3,r2,1acf0 <__udivdi3+0x3a4>
   1ace0:	1f07883a 	add	r3,r3,fp
   1ace4:	a93fffc4 	addi	r4,r21,-1
   1ace8:	1f00892e 	bgeu	r3,fp,1af10 <__udivdi3+0x5c4>
   1acec:	202b883a 	mov	r21,r4
   1acf0:	18a3c83a 	sub	r17,r3,r2
   1acf4:	8809883a 	mov	r4,r17
   1acf8:	900b883a 	mov	r5,r18
   1acfc:	000cc9c0 	call	cc9c <__umodsi3>
   1ad00:	1029883a 	mov	r20,r2
   1ad04:	8809883a 	mov	r4,r17
   1ad08:	900b883a 	mov	r5,r18
   1ad0c:	a028943a 	slli	r20,r20,16
   1ad10:	000cc380 	call	cc38 <__udivsi3>
   1ad14:	100b883a 	mov	r5,r2
   1ad18:	b009883a 	mov	r4,r22
   1ad1c:	843fffcc 	andi	r16,r16,65535
   1ad20:	1023883a 	mov	r17,r2
   1ad24:	8520b03a 	or	r16,r16,r20
   1ad28:	000ccf40 	call	ccf4 <__mulsi3>
   1ad2c:	8080042e 	bgeu	r16,r2,1ad40 <__udivdi3+0x3f4>
   1ad30:	8721883a 	add	r16,r16,fp
   1ad34:	88ffffc4 	addi	r3,r17,-1
   1ad38:	8700712e 	bgeu	r16,fp,1af00 <__udivdi3+0x5b4>
   1ad3c:	1823883a 	mov	r17,r3
   1ad40:	a80e943a 	slli	r7,r21,16
   1ad44:	d8c00017 	ldw	r3,0(sp)
   1ad48:	80a1c83a 	sub	r16,r16,r2
   1ad4c:	3c64b03a 	or	r18,r7,r17
   1ad50:	1d3fffcc 	andi	r20,r3,65535
   1ad54:	9022d43a 	srli	r17,r18,16
   1ad58:	95bfffcc 	andi	r22,r18,65535
   1ad5c:	a00b883a 	mov	r5,r20
   1ad60:	b009883a 	mov	r4,r22
   1ad64:	182ad43a 	srli	r21,r3,16
   1ad68:	000ccf40 	call	ccf4 <__mulsi3>
   1ad6c:	a00b883a 	mov	r5,r20
   1ad70:	8809883a 	mov	r4,r17
   1ad74:	1039883a 	mov	fp,r2
   1ad78:	000ccf40 	call	ccf4 <__mulsi3>
   1ad7c:	8809883a 	mov	r4,r17
   1ad80:	a80b883a 	mov	r5,r21
   1ad84:	1029883a 	mov	r20,r2
   1ad88:	000ccf40 	call	ccf4 <__mulsi3>
   1ad8c:	a80b883a 	mov	r5,r21
   1ad90:	b009883a 	mov	r4,r22
   1ad94:	1023883a 	mov	r17,r2
   1ad98:	000ccf40 	call	ccf4 <__mulsi3>
   1ad9c:	e006d43a 	srli	r3,fp,16
   1ada0:	1505883a 	add	r2,r2,r20
   1ada4:	1887883a 	add	r3,r3,r2
   1ada8:	1d00022e 	bgeu	r3,r20,1adb4 <__udivdi3+0x468>
   1adac:	00800074 	movhi	r2,1
   1adb0:	88a3883a 	add	r17,r17,r2
   1adb4:	1804d43a 	srli	r2,r3,16
   1adb8:	1463883a 	add	r17,r2,r17
   1adbc:	84404436 	bltu	r16,r17,1aed0 <__udivdi3+0x584>
   1adc0:	84403e26 	beq	r16,r17,1aebc <__udivdi3+0x570>
   1adc4:	9005883a 	mov	r2,r18
   1adc8:	0007883a 	mov	r3,zero
   1adcc:	003f9106 	br	1ac14 <__alt_data_end+0xfc01ac14>
   1add0:	88e2983a 	sll	r17,r17,r3
   1add4:	80aed83a 	srl	r23,r16,r2
   1add8:	80e0983a 	sll	r16,r16,r3
   1addc:	882ad43a 	srli	r21,r17,16
   1ade0:	9884d83a 	srl	r2,r19,r2
   1ade4:	b809883a 	mov	r4,r23
   1ade8:	a80b883a 	mov	r5,r21
   1adec:	98e4983a 	sll	r18,r19,r3
   1adf0:	142cb03a 	or	r22,r2,r16
   1adf4:	000cc9c0 	call	cc9c <__umodsi3>
   1adf8:	b809883a 	mov	r4,r23
   1adfc:	a80b883a 	mov	r5,r21
   1ae00:	1027883a 	mov	r19,r2
   1ae04:	8d3fffcc 	andi	r20,r17,65535
   1ae08:	000cc380 	call	cc38 <__udivsi3>
   1ae0c:	a009883a 	mov	r4,r20
   1ae10:	100b883a 	mov	r5,r2
   1ae14:	102f883a 	mov	r23,r2
   1ae18:	000ccf40 	call	ccf4 <__mulsi3>
   1ae1c:	9826943a 	slli	r19,r19,16
   1ae20:	b008d43a 	srli	r4,r22,16
   1ae24:	24c8b03a 	or	r4,r4,r19
   1ae28:	2080062e 	bgeu	r4,r2,1ae44 <__udivdi3+0x4f8>
   1ae2c:	2449883a 	add	r4,r4,r17
   1ae30:	b8ffffc4 	addi	r3,r23,-1
   1ae34:	24403c36 	bltu	r4,r17,1af28 <__udivdi3+0x5dc>
   1ae38:	20803b2e 	bgeu	r4,r2,1af28 <__udivdi3+0x5dc>
   1ae3c:	bdffff84 	addi	r23,r23,-2
   1ae40:	2449883a 	add	r4,r4,r17
   1ae44:	20a1c83a 	sub	r16,r4,r2
   1ae48:	a80b883a 	mov	r5,r21
   1ae4c:	8009883a 	mov	r4,r16
   1ae50:	000cc9c0 	call	cc9c <__umodsi3>
   1ae54:	a80b883a 	mov	r5,r21
   1ae58:	8009883a 	mov	r4,r16
   1ae5c:	1027883a 	mov	r19,r2
   1ae60:	000cc380 	call	cc38 <__udivsi3>
   1ae64:	a009883a 	mov	r4,r20
   1ae68:	100b883a 	mov	r5,r2
   1ae6c:	9826943a 	slli	r19,r19,16
   1ae70:	1039883a 	mov	fp,r2
   1ae74:	000ccf40 	call	ccf4 <__mulsi3>
   1ae78:	b13fffcc 	andi	r4,r22,65535
   1ae7c:	24c8b03a 	or	r4,r4,r19
   1ae80:	2080062e 	bgeu	r4,r2,1ae9c <__udivdi3+0x550>
   1ae84:	2449883a 	add	r4,r4,r17
   1ae88:	e0ffffc4 	addi	r3,fp,-1
   1ae8c:	24402436 	bltu	r4,r17,1af20 <__udivdi3+0x5d4>
   1ae90:	2080232e 	bgeu	r4,r2,1af20 <__udivdi3+0x5d4>
   1ae94:	e73fff84 	addi	fp,fp,-2
   1ae98:	2449883a 	add	r4,r4,r17
   1ae9c:	b82e943a 	slli	r23,r23,16
   1aea0:	20a1c83a 	sub	r16,r4,r2
   1aea4:	bf06b03a 	or	r3,r23,fp
   1aea8:	003f2806 	br	1ab4c <__alt_data_end+0xfc01ab4c>
   1aeac:	2021883a 	mov	r16,r4
   1aeb0:	003f5306 	br	1ac00 <__alt_data_end+0xfc01ac00>
   1aeb4:	1821883a 	mov	r16,r3
   1aeb8:	003ef406 	br	1aa8c <__alt_data_end+0xfc01aa8c>
   1aebc:	1806943a 	slli	r3,r3,16
   1aec0:	9de6983a 	sll	r19,r19,r23
   1aec4:	e73fffcc 	andi	fp,fp,65535
   1aec8:	1f07883a 	add	r3,r3,fp
   1aecc:	98ffbd2e 	bgeu	r19,r3,1adc4 <__alt_data_end+0xfc01adc4>
   1aed0:	90bfffc4 	addi	r2,r18,-1
   1aed4:	0007883a 	mov	r3,zero
   1aed8:	003f4e06 	br	1ac14 <__alt_data_end+0xfc01ac14>
   1aedc:	00800604 	movi	r2,24
   1aee0:	003ef506 	br	1aab8 <__alt_data_end+0xfc01aab8>
   1aee4:	00800604 	movi	r2,24
   1aee8:	003f0b06 	br	1ab18 <__alt_data_end+0xfc01ab18>
   1aeec:	00800604 	movi	r2,24
   1aef0:	003ead06 	br	1a9a8 <__alt_data_end+0xfc01a9a8>
   1aef4:	0007883a 	mov	r3,zero
   1aef8:	00800044 	movi	r2,1
   1aefc:	003f4506 	br	1ac14 <__alt_data_end+0xfc01ac14>
   1af00:	80bf8e2e 	bgeu	r16,r2,1ad3c <__alt_data_end+0xfc01ad3c>
   1af04:	8c7fff84 	addi	r17,r17,-2
   1af08:	8721883a 	add	r16,r16,fp
   1af0c:	003f8c06 	br	1ad40 <__alt_data_end+0xfc01ad40>
   1af10:	18bf762e 	bgeu	r3,r2,1acec <__alt_data_end+0xfc01acec>
   1af14:	ad7fff84 	addi	r21,r21,-2
   1af18:	1f07883a 	add	r3,r3,fp
   1af1c:	003f7406 	br	1acf0 <__alt_data_end+0xfc01acf0>
   1af20:	1839883a 	mov	fp,r3
   1af24:	003fdd06 	br	1ae9c <__alt_data_end+0xfc01ae9c>
   1af28:	182f883a 	mov	r23,r3
   1af2c:	003fc506 	br	1ae44 <__alt_data_end+0xfc01ae44>
   1af30:	b5bfff84 	addi	r22,r22,-2
   1af34:	3c4f883a 	add	r7,r7,r17
   1af38:	003f1a06 	br	1aba4 <__alt_data_end+0xfc01aba4>
   1af3c:	b5bfff84 	addi	r22,r22,-2
   1af40:	1c47883a 	add	r3,r3,r17
   1af44:	003ebc06 	br	1aa38 <__alt_data_end+0xfc01aa38>

0001af48 <__umoddi3>:
   1af48:	defff304 	addi	sp,sp,-52
   1af4c:	df000b15 	stw	fp,44(sp)
   1af50:	dc400415 	stw	r17,16(sp)
   1af54:	dc000315 	stw	r16,12(sp)
   1af58:	dfc00c15 	stw	ra,48(sp)
   1af5c:	ddc00a15 	stw	r23,40(sp)
   1af60:	dd800915 	stw	r22,36(sp)
   1af64:	dd400815 	stw	r21,32(sp)
   1af68:	dd000715 	stw	r20,28(sp)
   1af6c:	dcc00615 	stw	r19,24(sp)
   1af70:	dc800515 	stw	r18,20(sp)
   1af74:	2021883a 	mov	r16,r4
   1af78:	2823883a 	mov	r17,r5
   1af7c:	2839883a 	mov	fp,r5
   1af80:	3800401e 	bne	r7,zero,1b084 <__umoddi3+0x13c>
   1af84:	3027883a 	mov	r19,r6
   1af88:	2029883a 	mov	r20,r4
   1af8c:	2980552e 	bgeu	r5,r6,1b0e4 <__umoddi3+0x19c>
   1af90:	00bfffd4 	movui	r2,65535
   1af94:	1180a236 	bltu	r2,r6,1b220 <__umoddi3+0x2d8>
   1af98:	01003fc4 	movi	r4,255
   1af9c:	2189803a 	cmpltu	r4,r4,r6
   1afa0:	200890fa 	slli	r4,r4,3
   1afa4:	3104d83a 	srl	r2,r6,r4
   1afa8:	00c000f4 	movhi	r3,3
   1afac:	18e5f004 	addi	r3,r3,-26688
   1afb0:	1885883a 	add	r2,r3,r2
   1afb4:	10c00003 	ldbu	r3,0(r2)
   1afb8:	00800804 	movi	r2,32
   1afbc:	1909883a 	add	r4,r3,r4
   1afc0:	1125c83a 	sub	r18,r2,r4
   1afc4:	90000526 	beq	r18,zero,1afdc <__umoddi3+0x94>
   1afc8:	8ca2983a 	sll	r17,r17,r18
   1afcc:	8108d83a 	srl	r4,r16,r4
   1afd0:	34a6983a 	sll	r19,r6,r18
   1afd4:	84a8983a 	sll	r20,r16,r18
   1afd8:	2478b03a 	or	fp,r4,r17
   1afdc:	982cd43a 	srli	r22,r19,16
   1afe0:	e009883a 	mov	r4,fp
   1afe4:	9dffffcc 	andi	r23,r19,65535
   1afe8:	b00b883a 	mov	r5,r22
   1afec:	000cc9c0 	call	cc9c <__umodsi3>
   1aff0:	b00b883a 	mov	r5,r22
   1aff4:	e009883a 	mov	r4,fp
   1aff8:	102b883a 	mov	r21,r2
   1affc:	000cc380 	call	cc38 <__udivsi3>
   1b000:	100b883a 	mov	r5,r2
   1b004:	b809883a 	mov	r4,r23
   1b008:	000ccf40 	call	ccf4 <__mulsi3>
   1b00c:	a82a943a 	slli	r21,r21,16
   1b010:	a006d43a 	srli	r3,r20,16
   1b014:	1d46b03a 	or	r3,r3,r21
   1b018:	1880032e 	bgeu	r3,r2,1b028 <__umoddi3+0xe0>
   1b01c:	1cc7883a 	add	r3,r3,r19
   1b020:	1cc00136 	bltu	r3,r19,1b028 <__umoddi3+0xe0>
   1b024:	18813136 	bltu	r3,r2,1b4ec <__umoddi3+0x5a4>
   1b028:	18a1c83a 	sub	r16,r3,r2
   1b02c:	b00b883a 	mov	r5,r22
   1b030:	8009883a 	mov	r4,r16
   1b034:	000cc9c0 	call	cc9c <__umodsi3>
   1b038:	b00b883a 	mov	r5,r22
   1b03c:	8009883a 	mov	r4,r16
   1b040:	1023883a 	mov	r17,r2
   1b044:	000cc380 	call	cc38 <__udivsi3>
   1b048:	100b883a 	mov	r5,r2
   1b04c:	b809883a 	mov	r4,r23
   1b050:	8822943a 	slli	r17,r17,16
   1b054:	000ccf40 	call	ccf4 <__mulsi3>
   1b058:	a0ffffcc 	andi	r3,r20,65535
   1b05c:	1c46b03a 	or	r3,r3,r17
   1b060:	1880042e 	bgeu	r3,r2,1b074 <__umoddi3+0x12c>
   1b064:	1cc7883a 	add	r3,r3,r19
   1b068:	1cc00236 	bltu	r3,r19,1b074 <__umoddi3+0x12c>
   1b06c:	1880012e 	bgeu	r3,r2,1b074 <__umoddi3+0x12c>
   1b070:	1cc7883a 	add	r3,r3,r19
   1b074:	1885c83a 	sub	r2,r3,r2
   1b078:	1484d83a 	srl	r2,r2,r18
   1b07c:	0007883a 	mov	r3,zero
   1b080:	00005306 	br	1b1d0 <__umoddi3+0x288>
   1b084:	29c05036 	bltu	r5,r7,1b1c8 <__umoddi3+0x280>
   1b088:	00bfffd4 	movui	r2,65535
   1b08c:	11c05c2e 	bgeu	r2,r7,1b200 <__umoddi3+0x2b8>
   1b090:	00804034 	movhi	r2,256
   1b094:	10bfffc4 	addi	r2,r2,-1
   1b098:	11c10636 	bltu	r2,r7,1b4b4 <__umoddi3+0x56c>
   1b09c:	01000404 	movi	r4,16
   1b0a0:	3904d83a 	srl	r2,r7,r4
   1b0a4:	00c000f4 	movhi	r3,3
   1b0a8:	18e5f004 	addi	r3,r3,-26688
   1b0ac:	1885883a 	add	r2,r3,r2
   1b0b0:	14c00003 	ldbu	r19,0(r2)
   1b0b4:	00c00804 	movi	r3,32
   1b0b8:	9927883a 	add	r19,r19,r4
   1b0bc:	1ce9c83a 	sub	r20,r3,r19
   1b0c0:	a0005c1e 	bne	r20,zero,1b234 <__umoddi3+0x2ec>
   1b0c4:	3c400136 	bltu	r7,r17,1b0cc <__umoddi3+0x184>
   1b0c8:	81810a36 	bltu	r16,r6,1b4f4 <__umoddi3+0x5ac>
   1b0cc:	8185c83a 	sub	r2,r16,r6
   1b0d0:	89e3c83a 	sub	r17,r17,r7
   1b0d4:	8089803a 	cmpltu	r4,r16,r2
   1b0d8:	8939c83a 	sub	fp,r17,r4
   1b0dc:	e007883a 	mov	r3,fp
   1b0e0:	00003b06 	br	1b1d0 <__umoddi3+0x288>
   1b0e4:	3000041e 	bne	r6,zero,1b0f8 <__umoddi3+0x1b0>
   1b0e8:	000b883a 	mov	r5,zero
   1b0ec:	01000044 	movi	r4,1
   1b0f0:	000cc380 	call	cc38 <__udivsi3>
   1b0f4:	1027883a 	mov	r19,r2
   1b0f8:	00bfffd4 	movui	r2,65535
   1b0fc:	14c0442e 	bgeu	r2,r19,1b210 <__umoddi3+0x2c8>
   1b100:	00804034 	movhi	r2,256
   1b104:	10bfffc4 	addi	r2,r2,-1
   1b108:	14c0ec36 	bltu	r2,r19,1b4bc <__umoddi3+0x574>
   1b10c:	00800404 	movi	r2,16
   1b110:	9886d83a 	srl	r3,r19,r2
   1b114:	010000f4 	movhi	r4,3
   1b118:	2125f004 	addi	r4,r4,-26688
   1b11c:	20c7883a 	add	r3,r4,r3
   1b120:	18c00003 	ldbu	r3,0(r3)
   1b124:	1887883a 	add	r3,r3,r2
   1b128:	00800804 	movi	r2,32
   1b12c:	10e5c83a 	sub	r18,r2,r3
   1b130:	9000ab1e 	bne	r18,zero,1b3e0 <__umoddi3+0x498>
   1b134:	982cd43a 	srli	r22,r19,16
   1b138:	8ce3c83a 	sub	r17,r17,r19
   1b13c:	9dffffcc 	andi	r23,r19,65535
   1b140:	b00b883a 	mov	r5,r22
   1b144:	8809883a 	mov	r4,r17
   1b148:	000cc9c0 	call	cc9c <__umodsi3>
   1b14c:	b00b883a 	mov	r5,r22
   1b150:	8809883a 	mov	r4,r17
   1b154:	102b883a 	mov	r21,r2
   1b158:	000cc380 	call	cc38 <__udivsi3>
   1b15c:	b80b883a 	mov	r5,r23
   1b160:	1009883a 	mov	r4,r2
   1b164:	000ccf40 	call	ccf4 <__mulsi3>
   1b168:	a82a943a 	slli	r21,r21,16
   1b16c:	a006d43a 	srli	r3,r20,16
   1b170:	1d46b03a 	or	r3,r3,r21
   1b174:	1880042e 	bgeu	r3,r2,1b188 <__umoddi3+0x240>
   1b178:	1cc7883a 	add	r3,r3,r19
   1b17c:	1cc00236 	bltu	r3,r19,1b188 <__umoddi3+0x240>
   1b180:	1880012e 	bgeu	r3,r2,1b188 <__umoddi3+0x240>
   1b184:	1cc7883a 	add	r3,r3,r19
   1b188:	18a1c83a 	sub	r16,r3,r2
   1b18c:	b00b883a 	mov	r5,r22
   1b190:	8009883a 	mov	r4,r16
   1b194:	000cc9c0 	call	cc9c <__umodsi3>
   1b198:	1023883a 	mov	r17,r2
   1b19c:	b00b883a 	mov	r5,r22
   1b1a0:	8009883a 	mov	r4,r16
   1b1a4:	000cc380 	call	cc38 <__udivsi3>
   1b1a8:	8822943a 	slli	r17,r17,16
   1b1ac:	b80b883a 	mov	r5,r23
   1b1b0:	1009883a 	mov	r4,r2
   1b1b4:	000ccf40 	call	ccf4 <__mulsi3>
   1b1b8:	a53fffcc 	andi	r20,r20,65535
   1b1bc:	a446b03a 	or	r3,r20,r17
   1b1c0:	18bfac2e 	bgeu	r3,r2,1b074 <__alt_data_end+0xfc01b074>
   1b1c4:	003fa706 	br	1b064 <__alt_data_end+0xfc01b064>
   1b1c8:	2005883a 	mov	r2,r4
   1b1cc:	2807883a 	mov	r3,r5
   1b1d0:	dfc00c17 	ldw	ra,48(sp)
   1b1d4:	df000b17 	ldw	fp,44(sp)
   1b1d8:	ddc00a17 	ldw	r23,40(sp)
   1b1dc:	dd800917 	ldw	r22,36(sp)
   1b1e0:	dd400817 	ldw	r21,32(sp)
   1b1e4:	dd000717 	ldw	r20,28(sp)
   1b1e8:	dcc00617 	ldw	r19,24(sp)
   1b1ec:	dc800517 	ldw	r18,20(sp)
   1b1f0:	dc400417 	ldw	r17,16(sp)
   1b1f4:	dc000317 	ldw	r16,12(sp)
   1b1f8:	dec00d04 	addi	sp,sp,52
   1b1fc:	f800283a 	ret
   1b200:	04c03fc4 	movi	r19,255
   1b204:	99c9803a 	cmpltu	r4,r19,r7
   1b208:	200890fa 	slli	r4,r4,3
   1b20c:	003fa406 	br	1b0a0 <__alt_data_end+0xfc01b0a0>
   1b210:	00803fc4 	movi	r2,255
   1b214:	14c5803a 	cmpltu	r2,r2,r19
   1b218:	100490fa 	slli	r2,r2,3
   1b21c:	003fbc06 	br	1b110 <__alt_data_end+0xfc01b110>
   1b220:	00804034 	movhi	r2,256
   1b224:	10bfffc4 	addi	r2,r2,-1
   1b228:	1180a636 	bltu	r2,r6,1b4c4 <__umoddi3+0x57c>
   1b22c:	01000404 	movi	r4,16
   1b230:	003f5c06 	br	1afa4 <__alt_data_end+0xfc01afa4>
   1b234:	3d0e983a 	sll	r7,r7,r20
   1b238:	34ead83a 	srl	r21,r6,r19
   1b23c:	8cc6d83a 	srl	r3,r17,r19
   1b240:	8d10983a 	sll	r8,r17,r20
   1b244:	3d6ab03a 	or	r21,r7,r21
   1b248:	a82cd43a 	srli	r22,r21,16
   1b24c:	84e2d83a 	srl	r17,r16,r19
   1b250:	1809883a 	mov	r4,r3
   1b254:	b00b883a 	mov	r5,r22
   1b258:	8a22b03a 	or	r17,r17,r8
   1b25c:	3524983a 	sll	r18,r6,r20
   1b260:	dc400015 	stw	r17,0(sp)
   1b264:	d8c00115 	stw	r3,4(sp)
   1b268:	000cc9c0 	call	cc9c <__umodsi3>
   1b26c:	d8c00117 	ldw	r3,4(sp)
   1b270:	b00b883a 	mov	r5,r22
   1b274:	1039883a 	mov	fp,r2
   1b278:	1809883a 	mov	r4,r3
   1b27c:	000cc380 	call	cc38 <__udivsi3>
   1b280:	adffffcc 	andi	r23,r21,65535
   1b284:	100b883a 	mov	r5,r2
   1b288:	b809883a 	mov	r4,r23
   1b28c:	1023883a 	mov	r17,r2
   1b290:	000ccf40 	call	ccf4 <__mulsi3>
   1b294:	d9400017 	ldw	r5,0(sp)
   1b298:	e008943a 	slli	r4,fp,16
   1b29c:	8520983a 	sll	r16,r16,r20
   1b2a0:	2806d43a 	srli	r3,r5,16
   1b2a4:	1906b03a 	or	r3,r3,r4
   1b2a8:	1880042e 	bgeu	r3,r2,1b2bc <__umoddi3+0x374>
   1b2ac:	1d47883a 	add	r3,r3,r21
   1b2b0:	893fffc4 	addi	r4,r17,-1
   1b2b4:	1d40892e 	bgeu	r3,r21,1b4dc <__umoddi3+0x594>
   1b2b8:	2023883a 	mov	r17,r4
   1b2bc:	18b9c83a 	sub	fp,r3,r2
   1b2c0:	b00b883a 	mov	r5,r22
   1b2c4:	e009883a 	mov	r4,fp
   1b2c8:	000cc9c0 	call	cc9c <__umodsi3>
   1b2cc:	b00b883a 	mov	r5,r22
   1b2d0:	e009883a 	mov	r4,fp
   1b2d4:	d8800215 	stw	r2,8(sp)
   1b2d8:	000cc380 	call	cc38 <__udivsi3>
   1b2dc:	100b883a 	mov	r5,r2
   1b2e0:	b809883a 	mov	r4,r23
   1b2e4:	102d883a 	mov	r22,r2
   1b2e8:	000ccf40 	call	ccf4 <__mulsi3>
   1b2ec:	d9800217 	ldw	r6,8(sp)
   1b2f0:	d8c00017 	ldw	r3,0(sp)
   1b2f4:	300c943a 	slli	r6,r6,16
   1b2f8:	1a3fffcc 	andi	r8,r3,65535
   1b2fc:	4190b03a 	or	r8,r8,r6
   1b300:	4080042e 	bgeu	r8,r2,1b314 <__umoddi3+0x3cc>
   1b304:	4551883a 	add	r8,r8,r21
   1b308:	b0ffffc4 	addi	r3,r22,-1
   1b30c:	45406f2e 	bgeu	r8,r21,1b4cc <__umoddi3+0x584>
   1b310:	182d883a 	mov	r22,r3
   1b314:	880e943a 	slli	r7,r17,16
   1b318:	9006d43a 	srli	r3,r18,16
   1b31c:	91bfffcc 	andi	r6,r18,65535
   1b320:	3dacb03a 	or	r22,r7,r22
   1b324:	b02ed43a 	srli	r23,r22,16
   1b328:	b5bfffcc 	andi	r22,r22,65535
   1b32c:	300b883a 	mov	r5,r6
   1b330:	b009883a 	mov	r4,r22
   1b334:	40a3c83a 	sub	r17,r8,r2
   1b338:	d8c00115 	stw	r3,4(sp)
   1b33c:	d9800215 	stw	r6,8(sp)
   1b340:	000ccf40 	call	ccf4 <__mulsi3>
   1b344:	d9800217 	ldw	r6,8(sp)
   1b348:	b809883a 	mov	r4,r23
   1b34c:	1039883a 	mov	fp,r2
   1b350:	300b883a 	mov	r5,r6
   1b354:	000ccf40 	call	ccf4 <__mulsi3>
   1b358:	d8c00117 	ldw	r3,4(sp)
   1b35c:	b809883a 	mov	r4,r23
   1b360:	d8800215 	stw	r2,8(sp)
   1b364:	180b883a 	mov	r5,r3
   1b368:	000ccf40 	call	ccf4 <__mulsi3>
   1b36c:	d8c00117 	ldw	r3,4(sp)
   1b370:	b009883a 	mov	r4,r22
   1b374:	102f883a 	mov	r23,r2
   1b378:	180b883a 	mov	r5,r3
   1b37c:	000ccf40 	call	ccf4 <__mulsi3>
   1b380:	d9800217 	ldw	r6,8(sp)
   1b384:	e006d43a 	srli	r3,fp,16
   1b388:	1185883a 	add	r2,r2,r6
   1b38c:	1885883a 	add	r2,r3,r2
   1b390:	1180022e 	bgeu	r2,r6,1b39c <__umoddi3+0x454>
   1b394:	00c00074 	movhi	r3,1
   1b398:	b8ef883a 	add	r23,r23,r3
   1b39c:	1006d43a 	srli	r3,r2,16
   1b3a0:	1004943a 	slli	r2,r2,16
   1b3a4:	e73fffcc 	andi	fp,fp,65535
   1b3a8:	1dc7883a 	add	r3,r3,r23
   1b3ac:	1739883a 	add	fp,r2,fp
   1b3b0:	88c03a36 	bltu	r17,r3,1b49c <__umoddi3+0x554>
   1b3b4:	88c05126 	beq	r17,r3,1b4fc <__umoddi3+0x5b4>
   1b3b8:	88c9c83a 	sub	r4,r17,r3
   1b3bc:	e00f883a 	mov	r7,fp
   1b3c0:	81cfc83a 	sub	r7,r16,r7
   1b3c4:	81c7803a 	cmpltu	r3,r16,r7
   1b3c8:	20c7c83a 	sub	r3,r4,r3
   1b3cc:	1cc4983a 	sll	r2,r3,r19
   1b3d0:	3d0ed83a 	srl	r7,r7,r20
   1b3d4:	1d06d83a 	srl	r3,r3,r20
   1b3d8:	11c4b03a 	or	r2,r2,r7
   1b3dc:	003f7c06 	br	1b1d0 <__alt_data_end+0xfc01b1d0>
   1b3e0:	9ca6983a 	sll	r19,r19,r18
   1b3e4:	88f8d83a 	srl	fp,r17,r3
   1b3e8:	80c4d83a 	srl	r2,r16,r3
   1b3ec:	982cd43a 	srli	r22,r19,16
   1b3f0:	8ca2983a 	sll	r17,r17,r18
   1b3f4:	e009883a 	mov	r4,fp
   1b3f8:	b00b883a 	mov	r5,r22
   1b3fc:	146ab03a 	or	r21,r2,r17
   1b400:	000cc9c0 	call	cc9c <__umodsi3>
   1b404:	b00b883a 	mov	r5,r22
   1b408:	e009883a 	mov	r4,fp
   1b40c:	1029883a 	mov	r20,r2
   1b410:	9dffffcc 	andi	r23,r19,65535
   1b414:	000cc380 	call	cc38 <__udivsi3>
   1b418:	b809883a 	mov	r4,r23
   1b41c:	100b883a 	mov	r5,r2
   1b420:	000ccf40 	call	ccf4 <__mulsi3>
   1b424:	a008943a 	slli	r4,r20,16
   1b428:	a806d43a 	srli	r3,r21,16
   1b42c:	84a8983a 	sll	r20,r16,r18
   1b430:	1906b03a 	or	r3,r3,r4
   1b434:	1880042e 	bgeu	r3,r2,1b448 <__umoddi3+0x500>
   1b438:	1cc7883a 	add	r3,r3,r19
   1b43c:	1cc00236 	bltu	r3,r19,1b448 <__umoddi3+0x500>
   1b440:	1880012e 	bgeu	r3,r2,1b448 <__umoddi3+0x500>
   1b444:	1cc7883a 	add	r3,r3,r19
   1b448:	18a3c83a 	sub	r17,r3,r2
   1b44c:	b00b883a 	mov	r5,r22
   1b450:	8809883a 	mov	r4,r17
   1b454:	000cc9c0 	call	cc9c <__umodsi3>
   1b458:	b00b883a 	mov	r5,r22
   1b45c:	8809883a 	mov	r4,r17
   1b460:	1021883a 	mov	r16,r2
   1b464:	000cc380 	call	cc38 <__udivsi3>
   1b468:	100b883a 	mov	r5,r2
   1b46c:	b809883a 	mov	r4,r23
   1b470:	8020943a 	slli	r16,r16,16
   1b474:	000ccf40 	call	ccf4 <__mulsi3>
   1b478:	a8ffffcc 	andi	r3,r21,65535
   1b47c:	1c06b03a 	or	r3,r3,r16
   1b480:	1880042e 	bgeu	r3,r2,1b494 <__umoddi3+0x54c>
   1b484:	1cc7883a 	add	r3,r3,r19
   1b488:	1cc00236 	bltu	r3,r19,1b494 <__umoddi3+0x54c>
   1b48c:	1880012e 	bgeu	r3,r2,1b494 <__umoddi3+0x54c>
   1b490:	1cc7883a 	add	r3,r3,r19
   1b494:	18a3c83a 	sub	r17,r3,r2
   1b498:	003f2906 	br	1b140 <__alt_data_end+0xfc01b140>
   1b49c:	e48fc83a 	sub	r7,fp,r18
   1b4a0:	1d49c83a 	sub	r4,r3,r21
   1b4a4:	e1f9803a 	cmpltu	fp,fp,r7
   1b4a8:	2739c83a 	sub	fp,r4,fp
   1b4ac:	8f09c83a 	sub	r4,r17,fp
   1b4b0:	003fc306 	br	1b3c0 <__alt_data_end+0xfc01b3c0>
   1b4b4:	01000604 	movi	r4,24
   1b4b8:	003ef906 	br	1b0a0 <__alt_data_end+0xfc01b0a0>
   1b4bc:	00800604 	movi	r2,24
   1b4c0:	003f1306 	br	1b110 <__alt_data_end+0xfc01b110>
   1b4c4:	01000604 	movi	r4,24
   1b4c8:	003eb606 	br	1afa4 <__alt_data_end+0xfc01afa4>
   1b4cc:	40bf902e 	bgeu	r8,r2,1b310 <__alt_data_end+0xfc01b310>
   1b4d0:	b5bfff84 	addi	r22,r22,-2
   1b4d4:	4551883a 	add	r8,r8,r21
   1b4d8:	003f8e06 	br	1b314 <__alt_data_end+0xfc01b314>
   1b4dc:	18bf762e 	bgeu	r3,r2,1b2b8 <__alt_data_end+0xfc01b2b8>
   1b4e0:	8c7fff84 	addi	r17,r17,-2
   1b4e4:	1d47883a 	add	r3,r3,r21
   1b4e8:	003f7406 	br	1b2bc <__alt_data_end+0xfc01b2bc>
   1b4ec:	1cc7883a 	add	r3,r3,r19
   1b4f0:	003ecd06 	br	1b028 <__alt_data_end+0xfc01b028>
   1b4f4:	8005883a 	mov	r2,r16
   1b4f8:	003ef806 	br	1b0dc <__alt_data_end+0xfc01b0dc>
   1b4fc:	873fe736 	bltu	r16,fp,1b49c <__alt_data_end+0xfc01b49c>
   1b500:	e00f883a 	mov	r7,fp
   1b504:	0009883a 	mov	r4,zero
   1b508:	003fad06 	br	1b3c0 <__alt_data_end+0xfc01b3c0>

0001b50c <__adddf3>:
   1b50c:	02c00434 	movhi	r11,16
   1b510:	5affffc4 	addi	r11,r11,-1
   1b514:	2806d7fa 	srli	r3,r5,31
   1b518:	2ad4703a 	and	r10,r5,r11
   1b51c:	3ad2703a 	and	r9,r7,r11
   1b520:	3804d53a 	srli	r2,r7,20
   1b524:	3018d77a 	srli	r12,r6,29
   1b528:	280ad53a 	srli	r5,r5,20
   1b52c:	501490fa 	slli	r10,r10,3
   1b530:	2010d77a 	srli	r8,r4,29
   1b534:	481290fa 	slli	r9,r9,3
   1b538:	380ed7fa 	srli	r7,r7,31
   1b53c:	defffb04 	addi	sp,sp,-20
   1b540:	dc800215 	stw	r18,8(sp)
   1b544:	dc400115 	stw	r17,4(sp)
   1b548:	dc000015 	stw	r16,0(sp)
   1b54c:	dfc00415 	stw	ra,16(sp)
   1b550:	dcc00315 	stw	r19,12(sp)
   1b554:	1c803fcc 	andi	r18,r3,255
   1b558:	2c01ffcc 	andi	r16,r5,2047
   1b55c:	5210b03a 	or	r8,r10,r8
   1b560:	202290fa 	slli	r17,r4,3
   1b564:	1081ffcc 	andi	r2,r2,2047
   1b568:	4b12b03a 	or	r9,r9,r12
   1b56c:	300c90fa 	slli	r6,r6,3
   1b570:	91c07526 	beq	r18,r7,1b748 <__adddf3+0x23c>
   1b574:	8087c83a 	sub	r3,r16,r2
   1b578:	00c0ab0e 	bge	zero,r3,1b828 <__adddf3+0x31c>
   1b57c:	10002a1e 	bne	r2,zero,1b628 <__adddf3+0x11c>
   1b580:	4984b03a 	or	r2,r9,r6
   1b584:	1000961e 	bne	r2,zero,1b7e0 <__adddf3+0x2d4>
   1b588:	888001cc 	andi	r2,r17,7
   1b58c:	10000726 	beq	r2,zero,1b5ac <__adddf3+0xa0>
   1b590:	888003cc 	andi	r2,r17,15
   1b594:	00c00104 	movi	r3,4
   1b598:	10c00426 	beq	r2,r3,1b5ac <__adddf3+0xa0>
   1b59c:	88c7883a 	add	r3,r17,r3
   1b5a0:	1c63803a 	cmpltu	r17,r3,r17
   1b5a4:	4451883a 	add	r8,r8,r17
   1b5a8:	1823883a 	mov	r17,r3
   1b5ac:	4080202c 	andhi	r2,r8,128
   1b5b0:	10005926 	beq	r2,zero,1b718 <__adddf3+0x20c>
   1b5b4:	84000044 	addi	r16,r16,1
   1b5b8:	0081ffc4 	movi	r2,2047
   1b5bc:	8080ba26 	beq	r16,r2,1b8a8 <__adddf3+0x39c>
   1b5c0:	00bfe034 	movhi	r2,65408
   1b5c4:	10bfffc4 	addi	r2,r2,-1
   1b5c8:	4090703a 	and	r8,r8,r2
   1b5cc:	4004977a 	slli	r2,r8,29
   1b5d0:	4010927a 	slli	r8,r8,9
   1b5d4:	8822d0fa 	srli	r17,r17,3
   1b5d8:	8401ffcc 	andi	r16,r16,2047
   1b5dc:	4010d33a 	srli	r8,r8,12
   1b5e0:	9007883a 	mov	r3,r18
   1b5e4:	1444b03a 	or	r2,r2,r17
   1b5e8:	8401ffcc 	andi	r16,r16,2047
   1b5ec:	8020953a 	slli	r16,r16,20
   1b5f0:	18c03fcc 	andi	r3,r3,255
   1b5f4:	01000434 	movhi	r4,16
   1b5f8:	213fffc4 	addi	r4,r4,-1
   1b5fc:	180697fa 	slli	r3,r3,31
   1b600:	4110703a 	and	r8,r8,r4
   1b604:	4410b03a 	or	r8,r8,r16
   1b608:	40c6b03a 	or	r3,r8,r3
   1b60c:	dfc00417 	ldw	ra,16(sp)
   1b610:	dcc00317 	ldw	r19,12(sp)
   1b614:	dc800217 	ldw	r18,8(sp)
   1b618:	dc400117 	ldw	r17,4(sp)
   1b61c:	dc000017 	ldw	r16,0(sp)
   1b620:	dec00504 	addi	sp,sp,20
   1b624:	f800283a 	ret
   1b628:	0081ffc4 	movi	r2,2047
   1b62c:	80bfd626 	beq	r16,r2,1b588 <__alt_data_end+0xfc01b588>
   1b630:	4a402034 	orhi	r9,r9,128
   1b634:	00800e04 	movi	r2,56
   1b638:	10c09f16 	blt	r2,r3,1b8b8 <__adddf3+0x3ac>
   1b63c:	008007c4 	movi	r2,31
   1b640:	10c0c216 	blt	r2,r3,1b94c <__adddf3+0x440>
   1b644:	00800804 	movi	r2,32
   1b648:	10c5c83a 	sub	r2,r2,r3
   1b64c:	488a983a 	sll	r5,r9,r2
   1b650:	30c8d83a 	srl	r4,r6,r3
   1b654:	3084983a 	sll	r2,r6,r2
   1b658:	48c6d83a 	srl	r3,r9,r3
   1b65c:	290cb03a 	or	r6,r5,r4
   1b660:	1004c03a 	cmpne	r2,r2,zero
   1b664:	308cb03a 	or	r6,r6,r2
   1b668:	898dc83a 	sub	r6,r17,r6
   1b66c:	89a3803a 	cmpltu	r17,r17,r6
   1b670:	40d1c83a 	sub	r8,r8,r3
   1b674:	4451c83a 	sub	r8,r8,r17
   1b678:	3023883a 	mov	r17,r6
   1b67c:	4080202c 	andhi	r2,r8,128
   1b680:	10002326 	beq	r2,zero,1b710 <__adddf3+0x204>
   1b684:	04c02034 	movhi	r19,128
   1b688:	9cffffc4 	addi	r19,r19,-1
   1b68c:	44e6703a 	and	r19,r8,r19
   1b690:	98007626 	beq	r19,zero,1b86c <__adddf3+0x360>
   1b694:	9809883a 	mov	r4,r19
   1b698:	001dd4c0 	call	1dd4c <__clzsi2>
   1b69c:	10fffe04 	addi	r3,r2,-8
   1b6a0:	010007c4 	movi	r4,31
   1b6a4:	20c07716 	blt	r4,r3,1b884 <__adddf3+0x378>
   1b6a8:	00800804 	movi	r2,32
   1b6ac:	10c5c83a 	sub	r2,r2,r3
   1b6b0:	8884d83a 	srl	r2,r17,r2
   1b6b4:	98d0983a 	sll	r8,r19,r3
   1b6b8:	88e2983a 	sll	r17,r17,r3
   1b6bc:	1204b03a 	or	r2,r2,r8
   1b6c0:	1c007416 	blt	r3,r16,1b894 <__adddf3+0x388>
   1b6c4:	1c21c83a 	sub	r16,r3,r16
   1b6c8:	82000044 	addi	r8,r16,1
   1b6cc:	00c007c4 	movi	r3,31
   1b6d0:	1a009116 	blt	r3,r8,1b918 <__adddf3+0x40c>
   1b6d4:	00c00804 	movi	r3,32
   1b6d8:	1a07c83a 	sub	r3,r3,r8
   1b6dc:	8a08d83a 	srl	r4,r17,r8
   1b6e0:	88e2983a 	sll	r17,r17,r3
   1b6e4:	10c6983a 	sll	r3,r2,r3
   1b6e8:	1210d83a 	srl	r8,r2,r8
   1b6ec:	8804c03a 	cmpne	r2,r17,zero
   1b6f0:	1906b03a 	or	r3,r3,r4
   1b6f4:	18a2b03a 	or	r17,r3,r2
   1b6f8:	0021883a 	mov	r16,zero
   1b6fc:	003fa206 	br	1b588 <__alt_data_end+0xfc01b588>
   1b700:	1890b03a 	or	r8,r3,r2
   1b704:	40017d26 	beq	r8,zero,1bcfc <__adddf3+0x7f0>
   1b708:	1011883a 	mov	r8,r2
   1b70c:	1823883a 	mov	r17,r3
   1b710:	888001cc 	andi	r2,r17,7
   1b714:	103f9e1e 	bne	r2,zero,1b590 <__alt_data_end+0xfc01b590>
   1b718:	4004977a 	slli	r2,r8,29
   1b71c:	8822d0fa 	srli	r17,r17,3
   1b720:	4010d0fa 	srli	r8,r8,3
   1b724:	9007883a 	mov	r3,r18
   1b728:	1444b03a 	or	r2,r2,r17
   1b72c:	0101ffc4 	movi	r4,2047
   1b730:	81002426 	beq	r16,r4,1b7c4 <__adddf3+0x2b8>
   1b734:	8120703a 	and	r16,r16,r4
   1b738:	01000434 	movhi	r4,16
   1b73c:	213fffc4 	addi	r4,r4,-1
   1b740:	4110703a 	and	r8,r8,r4
   1b744:	003fa806 	br	1b5e8 <__alt_data_end+0xfc01b5e8>
   1b748:	8089c83a 	sub	r4,r16,r2
   1b74c:	01005e0e 	bge	zero,r4,1b8c8 <__adddf3+0x3bc>
   1b750:	10002b26 	beq	r2,zero,1b800 <__adddf3+0x2f4>
   1b754:	0081ffc4 	movi	r2,2047
   1b758:	80bf8b26 	beq	r16,r2,1b588 <__alt_data_end+0xfc01b588>
   1b75c:	4a402034 	orhi	r9,r9,128
   1b760:	00800e04 	movi	r2,56
   1b764:	1100a40e 	bge	r2,r4,1b9f8 <__adddf3+0x4ec>
   1b768:	498cb03a 	or	r6,r9,r6
   1b76c:	300ac03a 	cmpne	r5,r6,zero
   1b770:	0013883a 	mov	r9,zero
   1b774:	2c4b883a 	add	r5,r5,r17
   1b778:	2c63803a 	cmpltu	r17,r5,r17
   1b77c:	4a11883a 	add	r8,r9,r8
   1b780:	8a11883a 	add	r8,r17,r8
   1b784:	2823883a 	mov	r17,r5
   1b788:	4080202c 	andhi	r2,r8,128
   1b78c:	103fe026 	beq	r2,zero,1b710 <__alt_data_end+0xfc01b710>
   1b790:	84000044 	addi	r16,r16,1
   1b794:	0081ffc4 	movi	r2,2047
   1b798:	8080d226 	beq	r16,r2,1bae4 <__adddf3+0x5d8>
   1b79c:	00bfe034 	movhi	r2,65408
   1b7a0:	10bfffc4 	addi	r2,r2,-1
   1b7a4:	4090703a 	and	r8,r8,r2
   1b7a8:	880ad07a 	srli	r5,r17,1
   1b7ac:	400897fa 	slli	r4,r8,31
   1b7b0:	88c0004c 	andi	r3,r17,1
   1b7b4:	28e2b03a 	or	r17,r5,r3
   1b7b8:	4010d07a 	srli	r8,r8,1
   1b7bc:	2462b03a 	or	r17,r4,r17
   1b7c0:	003f7106 	br	1b588 <__alt_data_end+0xfc01b588>
   1b7c4:	4088b03a 	or	r4,r8,r2
   1b7c8:	20014526 	beq	r4,zero,1bce0 <__adddf3+0x7d4>
   1b7cc:	01000434 	movhi	r4,16
   1b7d0:	42000234 	orhi	r8,r8,8
   1b7d4:	213fffc4 	addi	r4,r4,-1
   1b7d8:	4110703a 	and	r8,r8,r4
   1b7dc:	003f8206 	br	1b5e8 <__alt_data_end+0xfc01b5e8>
   1b7e0:	18ffffc4 	addi	r3,r3,-1
   1b7e4:	1800491e 	bne	r3,zero,1b90c <__adddf3+0x400>
   1b7e8:	898bc83a 	sub	r5,r17,r6
   1b7ec:	8963803a 	cmpltu	r17,r17,r5
   1b7f0:	4251c83a 	sub	r8,r8,r9
   1b7f4:	4451c83a 	sub	r8,r8,r17
   1b7f8:	2823883a 	mov	r17,r5
   1b7fc:	003f9f06 	br	1b67c <__alt_data_end+0xfc01b67c>
   1b800:	4984b03a 	or	r2,r9,r6
   1b804:	103f6026 	beq	r2,zero,1b588 <__alt_data_end+0xfc01b588>
   1b808:	213fffc4 	addi	r4,r4,-1
   1b80c:	2000931e 	bne	r4,zero,1ba5c <__adddf3+0x550>
   1b810:	898d883a 	add	r6,r17,r6
   1b814:	3463803a 	cmpltu	r17,r6,r17
   1b818:	4251883a 	add	r8,r8,r9
   1b81c:	8a11883a 	add	r8,r17,r8
   1b820:	3023883a 	mov	r17,r6
   1b824:	003fd806 	br	1b788 <__alt_data_end+0xfc01b788>
   1b828:	1800541e 	bne	r3,zero,1b97c <__adddf3+0x470>
   1b82c:	80800044 	addi	r2,r16,1
   1b830:	1081ffcc 	andi	r2,r2,2047
   1b834:	00c00044 	movi	r3,1
   1b838:	1880a00e 	bge	r3,r2,1babc <__adddf3+0x5b0>
   1b83c:	8989c83a 	sub	r4,r17,r6
   1b840:	8905803a 	cmpltu	r2,r17,r4
   1b844:	4267c83a 	sub	r19,r8,r9
   1b848:	98a7c83a 	sub	r19,r19,r2
   1b84c:	9880202c 	andhi	r2,r19,128
   1b850:	10006326 	beq	r2,zero,1b9e0 <__adddf3+0x4d4>
   1b854:	3463c83a 	sub	r17,r6,r17
   1b858:	4a07c83a 	sub	r3,r9,r8
   1b85c:	344d803a 	cmpltu	r6,r6,r17
   1b860:	19a7c83a 	sub	r19,r3,r6
   1b864:	3825883a 	mov	r18,r7
   1b868:	983f8a1e 	bne	r19,zero,1b694 <__alt_data_end+0xfc01b694>
   1b86c:	8809883a 	mov	r4,r17
   1b870:	001dd4c0 	call	1dd4c <__clzsi2>
   1b874:	10800804 	addi	r2,r2,32
   1b878:	10fffe04 	addi	r3,r2,-8
   1b87c:	010007c4 	movi	r4,31
   1b880:	20ff890e 	bge	r4,r3,1b6a8 <__alt_data_end+0xfc01b6a8>
   1b884:	10bff604 	addi	r2,r2,-40
   1b888:	8884983a 	sll	r2,r17,r2
   1b88c:	0023883a 	mov	r17,zero
   1b890:	1c3f8c0e 	bge	r3,r16,1b6c4 <__alt_data_end+0xfc01b6c4>
   1b894:	023fe034 	movhi	r8,65408
   1b898:	423fffc4 	addi	r8,r8,-1
   1b89c:	80e1c83a 	sub	r16,r16,r3
   1b8a0:	1210703a 	and	r8,r2,r8
   1b8a4:	003f3806 	br	1b588 <__alt_data_end+0xfc01b588>
   1b8a8:	9007883a 	mov	r3,r18
   1b8ac:	0011883a 	mov	r8,zero
   1b8b0:	0005883a 	mov	r2,zero
   1b8b4:	003f4c06 	br	1b5e8 <__alt_data_end+0xfc01b5e8>
   1b8b8:	498cb03a 	or	r6,r9,r6
   1b8bc:	300cc03a 	cmpne	r6,r6,zero
   1b8c0:	0007883a 	mov	r3,zero
   1b8c4:	003f6806 	br	1b668 <__alt_data_end+0xfc01b668>
   1b8c8:	20009c1e 	bne	r4,zero,1bb3c <__adddf3+0x630>
   1b8cc:	80800044 	addi	r2,r16,1
   1b8d0:	1141ffcc 	andi	r5,r2,2047
   1b8d4:	01000044 	movi	r4,1
   1b8d8:	2140670e 	bge	r4,r5,1ba78 <__adddf3+0x56c>
   1b8dc:	0101ffc4 	movi	r4,2047
   1b8e0:	11007f26 	beq	r2,r4,1bae0 <__adddf3+0x5d4>
   1b8e4:	898d883a 	add	r6,r17,r6
   1b8e8:	4247883a 	add	r3,r8,r9
   1b8ec:	3451803a 	cmpltu	r8,r6,r17
   1b8f0:	40d1883a 	add	r8,r8,r3
   1b8f4:	402297fa 	slli	r17,r8,31
   1b8f8:	300cd07a 	srli	r6,r6,1
   1b8fc:	4010d07a 	srli	r8,r8,1
   1b900:	1021883a 	mov	r16,r2
   1b904:	89a2b03a 	or	r17,r17,r6
   1b908:	003f1f06 	br	1b588 <__alt_data_end+0xfc01b588>
   1b90c:	0081ffc4 	movi	r2,2047
   1b910:	80bf481e 	bne	r16,r2,1b634 <__alt_data_end+0xfc01b634>
   1b914:	003f1c06 	br	1b588 <__alt_data_end+0xfc01b588>
   1b918:	843ff844 	addi	r16,r16,-31
   1b91c:	01000804 	movi	r4,32
   1b920:	1406d83a 	srl	r3,r2,r16
   1b924:	41005026 	beq	r8,r4,1ba68 <__adddf3+0x55c>
   1b928:	01001004 	movi	r4,64
   1b92c:	2211c83a 	sub	r8,r4,r8
   1b930:	1204983a 	sll	r2,r2,r8
   1b934:	88a2b03a 	or	r17,r17,r2
   1b938:	8822c03a 	cmpne	r17,r17,zero
   1b93c:	1c62b03a 	or	r17,r3,r17
   1b940:	0011883a 	mov	r8,zero
   1b944:	0021883a 	mov	r16,zero
   1b948:	003f7106 	br	1b710 <__alt_data_end+0xfc01b710>
   1b94c:	193ff804 	addi	r4,r3,-32
   1b950:	00800804 	movi	r2,32
   1b954:	4908d83a 	srl	r4,r9,r4
   1b958:	18804526 	beq	r3,r2,1ba70 <__adddf3+0x564>
   1b95c:	00801004 	movi	r2,64
   1b960:	10c5c83a 	sub	r2,r2,r3
   1b964:	4886983a 	sll	r3,r9,r2
   1b968:	198cb03a 	or	r6,r3,r6
   1b96c:	300cc03a 	cmpne	r6,r6,zero
   1b970:	218cb03a 	or	r6,r4,r6
   1b974:	0007883a 	mov	r3,zero
   1b978:	003f3b06 	br	1b668 <__alt_data_end+0xfc01b668>
   1b97c:	80002a26 	beq	r16,zero,1ba28 <__adddf3+0x51c>
   1b980:	0101ffc4 	movi	r4,2047
   1b984:	11006826 	beq	r2,r4,1bb28 <__adddf3+0x61c>
   1b988:	00c7c83a 	sub	r3,zero,r3
   1b98c:	42002034 	orhi	r8,r8,128
   1b990:	01000e04 	movi	r4,56
   1b994:	20c07c16 	blt	r4,r3,1bb88 <__adddf3+0x67c>
   1b998:	010007c4 	movi	r4,31
   1b99c:	20c0da16 	blt	r4,r3,1bd08 <__adddf3+0x7fc>
   1b9a0:	01000804 	movi	r4,32
   1b9a4:	20c9c83a 	sub	r4,r4,r3
   1b9a8:	4114983a 	sll	r10,r8,r4
   1b9ac:	88cad83a 	srl	r5,r17,r3
   1b9b0:	8908983a 	sll	r4,r17,r4
   1b9b4:	40c6d83a 	srl	r3,r8,r3
   1b9b8:	5162b03a 	or	r17,r10,r5
   1b9bc:	2008c03a 	cmpne	r4,r4,zero
   1b9c0:	8922b03a 	or	r17,r17,r4
   1b9c4:	3463c83a 	sub	r17,r6,r17
   1b9c8:	48c7c83a 	sub	r3,r9,r3
   1b9cc:	344d803a 	cmpltu	r6,r6,r17
   1b9d0:	1991c83a 	sub	r8,r3,r6
   1b9d4:	1021883a 	mov	r16,r2
   1b9d8:	3825883a 	mov	r18,r7
   1b9dc:	003f2706 	br	1b67c <__alt_data_end+0xfc01b67c>
   1b9e0:	24d0b03a 	or	r8,r4,r19
   1b9e4:	40001b1e 	bne	r8,zero,1ba54 <__adddf3+0x548>
   1b9e8:	0005883a 	mov	r2,zero
   1b9ec:	0007883a 	mov	r3,zero
   1b9f0:	0021883a 	mov	r16,zero
   1b9f4:	003f4d06 	br	1b72c <__alt_data_end+0xfc01b72c>
   1b9f8:	008007c4 	movi	r2,31
   1b9fc:	11003c16 	blt	r2,r4,1baf0 <__adddf3+0x5e4>
   1ba00:	00800804 	movi	r2,32
   1ba04:	1105c83a 	sub	r2,r2,r4
   1ba08:	488e983a 	sll	r7,r9,r2
   1ba0c:	310ad83a 	srl	r5,r6,r4
   1ba10:	3084983a 	sll	r2,r6,r2
   1ba14:	4912d83a 	srl	r9,r9,r4
   1ba18:	394ab03a 	or	r5,r7,r5
   1ba1c:	1004c03a 	cmpne	r2,r2,zero
   1ba20:	288ab03a 	or	r5,r5,r2
   1ba24:	003f5306 	br	1b774 <__alt_data_end+0xfc01b774>
   1ba28:	4448b03a 	or	r4,r8,r17
   1ba2c:	20003e26 	beq	r4,zero,1bb28 <__adddf3+0x61c>
   1ba30:	00c6303a 	nor	r3,zero,r3
   1ba34:	18003a1e 	bne	r3,zero,1bb20 <__adddf3+0x614>
   1ba38:	3463c83a 	sub	r17,r6,r17
   1ba3c:	4a07c83a 	sub	r3,r9,r8
   1ba40:	344d803a 	cmpltu	r6,r6,r17
   1ba44:	1991c83a 	sub	r8,r3,r6
   1ba48:	1021883a 	mov	r16,r2
   1ba4c:	3825883a 	mov	r18,r7
   1ba50:	003f0a06 	br	1b67c <__alt_data_end+0xfc01b67c>
   1ba54:	2023883a 	mov	r17,r4
   1ba58:	003f0d06 	br	1b690 <__alt_data_end+0xfc01b690>
   1ba5c:	0081ffc4 	movi	r2,2047
   1ba60:	80bf3f1e 	bne	r16,r2,1b760 <__alt_data_end+0xfc01b760>
   1ba64:	003ec806 	br	1b588 <__alt_data_end+0xfc01b588>
   1ba68:	0005883a 	mov	r2,zero
   1ba6c:	003fb106 	br	1b934 <__alt_data_end+0xfc01b934>
   1ba70:	0007883a 	mov	r3,zero
   1ba74:	003fbc06 	br	1b968 <__alt_data_end+0xfc01b968>
   1ba78:	4444b03a 	or	r2,r8,r17
   1ba7c:	8000871e 	bne	r16,zero,1bc9c <__adddf3+0x790>
   1ba80:	1000ba26 	beq	r2,zero,1bd6c <__adddf3+0x860>
   1ba84:	4984b03a 	or	r2,r9,r6
   1ba88:	103ebf26 	beq	r2,zero,1b588 <__alt_data_end+0xfc01b588>
   1ba8c:	8985883a 	add	r2,r17,r6
   1ba90:	4247883a 	add	r3,r8,r9
   1ba94:	1451803a 	cmpltu	r8,r2,r17
   1ba98:	40d1883a 	add	r8,r8,r3
   1ba9c:	40c0202c 	andhi	r3,r8,128
   1baa0:	1023883a 	mov	r17,r2
   1baa4:	183f1a26 	beq	r3,zero,1b710 <__alt_data_end+0xfc01b710>
   1baa8:	00bfe034 	movhi	r2,65408
   1baac:	10bfffc4 	addi	r2,r2,-1
   1bab0:	2021883a 	mov	r16,r4
   1bab4:	4090703a 	and	r8,r8,r2
   1bab8:	003eb306 	br	1b588 <__alt_data_end+0xfc01b588>
   1babc:	4444b03a 	or	r2,r8,r17
   1bac0:	8000291e 	bne	r16,zero,1bb68 <__adddf3+0x65c>
   1bac4:	10004b1e 	bne	r2,zero,1bbf4 <__adddf3+0x6e8>
   1bac8:	4990b03a 	or	r8,r9,r6
   1bacc:	40008b26 	beq	r8,zero,1bcfc <__adddf3+0x7f0>
   1bad0:	4811883a 	mov	r8,r9
   1bad4:	3023883a 	mov	r17,r6
   1bad8:	3825883a 	mov	r18,r7
   1badc:	003eaa06 	br	1b588 <__alt_data_end+0xfc01b588>
   1bae0:	1021883a 	mov	r16,r2
   1bae4:	0011883a 	mov	r8,zero
   1bae8:	0005883a 	mov	r2,zero
   1baec:	003f0f06 	br	1b72c <__alt_data_end+0xfc01b72c>
   1baf0:	217ff804 	addi	r5,r4,-32
   1baf4:	00800804 	movi	r2,32
   1baf8:	494ad83a 	srl	r5,r9,r5
   1bafc:	20807d26 	beq	r4,r2,1bcf4 <__adddf3+0x7e8>
   1bb00:	00801004 	movi	r2,64
   1bb04:	1109c83a 	sub	r4,r2,r4
   1bb08:	4912983a 	sll	r9,r9,r4
   1bb0c:	498cb03a 	or	r6,r9,r6
   1bb10:	300cc03a 	cmpne	r6,r6,zero
   1bb14:	298ab03a 	or	r5,r5,r6
   1bb18:	0013883a 	mov	r9,zero
   1bb1c:	003f1506 	br	1b774 <__alt_data_end+0xfc01b774>
   1bb20:	0101ffc4 	movi	r4,2047
   1bb24:	113f9a1e 	bne	r2,r4,1b990 <__alt_data_end+0xfc01b990>
   1bb28:	4811883a 	mov	r8,r9
   1bb2c:	3023883a 	mov	r17,r6
   1bb30:	1021883a 	mov	r16,r2
   1bb34:	3825883a 	mov	r18,r7
   1bb38:	003e9306 	br	1b588 <__alt_data_end+0xfc01b588>
   1bb3c:	8000161e 	bne	r16,zero,1bb98 <__adddf3+0x68c>
   1bb40:	444ab03a 	or	r5,r8,r17
   1bb44:	28005126 	beq	r5,zero,1bc8c <__adddf3+0x780>
   1bb48:	0108303a 	nor	r4,zero,r4
   1bb4c:	20004d1e 	bne	r4,zero,1bc84 <__adddf3+0x778>
   1bb50:	89a3883a 	add	r17,r17,r6
   1bb54:	4253883a 	add	r9,r8,r9
   1bb58:	898d803a 	cmpltu	r6,r17,r6
   1bb5c:	3251883a 	add	r8,r6,r9
   1bb60:	1021883a 	mov	r16,r2
   1bb64:	003f0806 	br	1b788 <__alt_data_end+0xfc01b788>
   1bb68:	1000301e 	bne	r2,zero,1bc2c <__adddf3+0x720>
   1bb6c:	4984b03a 	or	r2,r9,r6
   1bb70:	10007126 	beq	r2,zero,1bd38 <__adddf3+0x82c>
   1bb74:	4811883a 	mov	r8,r9
   1bb78:	3023883a 	mov	r17,r6
   1bb7c:	3825883a 	mov	r18,r7
   1bb80:	0401ffc4 	movi	r16,2047
   1bb84:	003e8006 	br	1b588 <__alt_data_end+0xfc01b588>
   1bb88:	4462b03a 	or	r17,r8,r17
   1bb8c:	8822c03a 	cmpne	r17,r17,zero
   1bb90:	0007883a 	mov	r3,zero
   1bb94:	003f8b06 	br	1b9c4 <__alt_data_end+0xfc01b9c4>
   1bb98:	0141ffc4 	movi	r5,2047
   1bb9c:	11403b26 	beq	r2,r5,1bc8c <__adddf3+0x780>
   1bba0:	0109c83a 	sub	r4,zero,r4
   1bba4:	42002034 	orhi	r8,r8,128
   1bba8:	01400e04 	movi	r5,56
   1bbac:	29006716 	blt	r5,r4,1bd4c <__adddf3+0x840>
   1bbb0:	014007c4 	movi	r5,31
   1bbb4:	29007016 	blt	r5,r4,1bd78 <__adddf3+0x86c>
   1bbb8:	01400804 	movi	r5,32
   1bbbc:	290bc83a 	sub	r5,r5,r4
   1bbc0:	4154983a 	sll	r10,r8,r5
   1bbc4:	890ed83a 	srl	r7,r17,r4
   1bbc8:	894a983a 	sll	r5,r17,r5
   1bbcc:	4108d83a 	srl	r4,r8,r4
   1bbd0:	51e2b03a 	or	r17,r10,r7
   1bbd4:	280ac03a 	cmpne	r5,r5,zero
   1bbd8:	8962b03a 	or	r17,r17,r5
   1bbdc:	89a3883a 	add	r17,r17,r6
   1bbe0:	2253883a 	add	r9,r4,r9
   1bbe4:	898d803a 	cmpltu	r6,r17,r6
   1bbe8:	3251883a 	add	r8,r6,r9
   1bbec:	1021883a 	mov	r16,r2
   1bbf0:	003ee506 	br	1b788 <__alt_data_end+0xfc01b788>
   1bbf4:	4984b03a 	or	r2,r9,r6
   1bbf8:	103e6326 	beq	r2,zero,1b588 <__alt_data_end+0xfc01b588>
   1bbfc:	8987c83a 	sub	r3,r17,r6
   1bc00:	88c9803a 	cmpltu	r4,r17,r3
   1bc04:	4245c83a 	sub	r2,r8,r9
   1bc08:	1105c83a 	sub	r2,r2,r4
   1bc0c:	1100202c 	andhi	r4,r2,128
   1bc10:	203ebb26 	beq	r4,zero,1b700 <__alt_data_end+0xfc01b700>
   1bc14:	3463c83a 	sub	r17,r6,r17
   1bc18:	4a07c83a 	sub	r3,r9,r8
   1bc1c:	344d803a 	cmpltu	r6,r6,r17
   1bc20:	1991c83a 	sub	r8,r3,r6
   1bc24:	3825883a 	mov	r18,r7
   1bc28:	003e5706 	br	1b588 <__alt_data_end+0xfc01b588>
   1bc2c:	4984b03a 	or	r2,r9,r6
   1bc30:	10002e26 	beq	r2,zero,1bcec <__adddf3+0x7e0>
   1bc34:	4004d0fa 	srli	r2,r8,3
   1bc38:	8822d0fa 	srli	r17,r17,3
   1bc3c:	4010977a 	slli	r8,r8,29
   1bc40:	10c0022c 	andhi	r3,r2,8
   1bc44:	4462b03a 	or	r17,r8,r17
   1bc48:	18000826 	beq	r3,zero,1bc6c <__adddf3+0x760>
   1bc4c:	4808d0fa 	srli	r4,r9,3
   1bc50:	20c0022c 	andhi	r3,r4,8
   1bc54:	1800051e 	bne	r3,zero,1bc6c <__adddf3+0x760>
   1bc58:	300cd0fa 	srli	r6,r6,3
   1bc5c:	4806977a 	slli	r3,r9,29
   1bc60:	2005883a 	mov	r2,r4
   1bc64:	3825883a 	mov	r18,r7
   1bc68:	19a2b03a 	or	r17,r3,r6
   1bc6c:	8810d77a 	srli	r8,r17,29
   1bc70:	100490fa 	slli	r2,r2,3
   1bc74:	882290fa 	slli	r17,r17,3
   1bc78:	0401ffc4 	movi	r16,2047
   1bc7c:	4090b03a 	or	r8,r8,r2
   1bc80:	003e4106 	br	1b588 <__alt_data_end+0xfc01b588>
   1bc84:	0141ffc4 	movi	r5,2047
   1bc88:	117fc71e 	bne	r2,r5,1bba8 <__alt_data_end+0xfc01bba8>
   1bc8c:	4811883a 	mov	r8,r9
   1bc90:	3023883a 	mov	r17,r6
   1bc94:	1021883a 	mov	r16,r2
   1bc98:	003e3b06 	br	1b588 <__alt_data_end+0xfc01b588>
   1bc9c:	10002f26 	beq	r2,zero,1bd5c <__adddf3+0x850>
   1bca0:	4984b03a 	or	r2,r9,r6
   1bca4:	10001126 	beq	r2,zero,1bcec <__adddf3+0x7e0>
   1bca8:	4004d0fa 	srli	r2,r8,3
   1bcac:	8822d0fa 	srli	r17,r17,3
   1bcb0:	4010977a 	slli	r8,r8,29
   1bcb4:	10c0022c 	andhi	r3,r2,8
   1bcb8:	4462b03a 	or	r17,r8,r17
   1bcbc:	183feb26 	beq	r3,zero,1bc6c <__alt_data_end+0xfc01bc6c>
   1bcc0:	4808d0fa 	srli	r4,r9,3
   1bcc4:	20c0022c 	andhi	r3,r4,8
   1bcc8:	183fe81e 	bne	r3,zero,1bc6c <__alt_data_end+0xfc01bc6c>
   1bccc:	300cd0fa 	srli	r6,r6,3
   1bcd0:	4806977a 	slli	r3,r9,29
   1bcd4:	2005883a 	mov	r2,r4
   1bcd8:	19a2b03a 	or	r17,r3,r6
   1bcdc:	003fe306 	br	1bc6c <__alt_data_end+0xfc01bc6c>
   1bce0:	0011883a 	mov	r8,zero
   1bce4:	0005883a 	mov	r2,zero
   1bce8:	003e3f06 	br	1b5e8 <__alt_data_end+0xfc01b5e8>
   1bcec:	0401ffc4 	movi	r16,2047
   1bcf0:	003e2506 	br	1b588 <__alt_data_end+0xfc01b588>
   1bcf4:	0013883a 	mov	r9,zero
   1bcf8:	003f8406 	br	1bb0c <__alt_data_end+0xfc01bb0c>
   1bcfc:	0005883a 	mov	r2,zero
   1bd00:	0007883a 	mov	r3,zero
   1bd04:	003e8906 	br	1b72c <__alt_data_end+0xfc01b72c>
   1bd08:	197ff804 	addi	r5,r3,-32
   1bd0c:	01000804 	movi	r4,32
   1bd10:	414ad83a 	srl	r5,r8,r5
   1bd14:	19002426 	beq	r3,r4,1bda8 <__adddf3+0x89c>
   1bd18:	01001004 	movi	r4,64
   1bd1c:	20c7c83a 	sub	r3,r4,r3
   1bd20:	40c6983a 	sll	r3,r8,r3
   1bd24:	1c46b03a 	or	r3,r3,r17
   1bd28:	1806c03a 	cmpne	r3,r3,zero
   1bd2c:	28e2b03a 	or	r17,r5,r3
   1bd30:	0007883a 	mov	r3,zero
   1bd34:	003f2306 	br	1b9c4 <__alt_data_end+0xfc01b9c4>
   1bd38:	0007883a 	mov	r3,zero
   1bd3c:	5811883a 	mov	r8,r11
   1bd40:	00bfffc4 	movi	r2,-1
   1bd44:	0401ffc4 	movi	r16,2047
   1bd48:	003e7806 	br	1b72c <__alt_data_end+0xfc01b72c>
   1bd4c:	4462b03a 	or	r17,r8,r17
   1bd50:	8822c03a 	cmpne	r17,r17,zero
   1bd54:	0009883a 	mov	r4,zero
   1bd58:	003fa006 	br	1bbdc <__alt_data_end+0xfc01bbdc>
   1bd5c:	4811883a 	mov	r8,r9
   1bd60:	3023883a 	mov	r17,r6
   1bd64:	0401ffc4 	movi	r16,2047
   1bd68:	003e0706 	br	1b588 <__alt_data_end+0xfc01b588>
   1bd6c:	4811883a 	mov	r8,r9
   1bd70:	3023883a 	mov	r17,r6
   1bd74:	003e0406 	br	1b588 <__alt_data_end+0xfc01b588>
   1bd78:	21fff804 	addi	r7,r4,-32
   1bd7c:	01400804 	movi	r5,32
   1bd80:	41ced83a 	srl	r7,r8,r7
   1bd84:	21400a26 	beq	r4,r5,1bdb0 <__adddf3+0x8a4>
   1bd88:	01401004 	movi	r5,64
   1bd8c:	2909c83a 	sub	r4,r5,r4
   1bd90:	4108983a 	sll	r4,r8,r4
   1bd94:	2448b03a 	or	r4,r4,r17
   1bd98:	2008c03a 	cmpne	r4,r4,zero
   1bd9c:	3922b03a 	or	r17,r7,r4
   1bda0:	0009883a 	mov	r4,zero
   1bda4:	003f8d06 	br	1bbdc <__alt_data_end+0xfc01bbdc>
   1bda8:	0007883a 	mov	r3,zero
   1bdac:	003fdd06 	br	1bd24 <__alt_data_end+0xfc01bd24>
   1bdb0:	0009883a 	mov	r4,zero
   1bdb4:	003ff706 	br	1bd94 <__alt_data_end+0xfc01bd94>

0001bdb8 <__divdf3>:
   1bdb8:	defff004 	addi	sp,sp,-64
   1bdbc:	dc800815 	stw	r18,32(sp)
   1bdc0:	2824d53a 	srli	r18,r5,20
   1bdc4:	dd800c15 	stw	r22,48(sp)
   1bdc8:	282cd7fa 	srli	r22,r5,31
   1bdcc:	dc000615 	stw	r16,24(sp)
   1bdd0:	04000434 	movhi	r16,16
   1bdd4:	843fffc4 	addi	r16,r16,-1
   1bdd8:	dfc00f15 	stw	ra,60(sp)
   1bddc:	df000e15 	stw	fp,56(sp)
   1bde0:	ddc00d15 	stw	r23,52(sp)
   1bde4:	dd400b15 	stw	r21,44(sp)
   1bde8:	dd000a15 	stw	r20,40(sp)
   1bdec:	dcc00915 	stw	r19,36(sp)
   1bdf0:	dc400715 	stw	r17,28(sp)
   1bdf4:	9481ffcc 	andi	r18,r18,2047
   1bdf8:	2c20703a 	and	r16,r5,r16
   1bdfc:	b2003fcc 	andi	r8,r22,255
   1be00:	90006126 	beq	r18,zero,1bf88 <__divdf3+0x1d0>
   1be04:	0081ffc4 	movi	r2,2047
   1be08:	202b883a 	mov	r21,r4
   1be0c:	90803726 	beq	r18,r2,1beec <__divdf3+0x134>
   1be10:	80800434 	orhi	r2,r16,16
   1be14:	100490fa 	slli	r2,r2,3
   1be18:	2020d77a 	srli	r16,r4,29
   1be1c:	202a90fa 	slli	r21,r4,3
   1be20:	94bf0044 	addi	r18,r18,-1023
   1be24:	80a0b03a 	or	r16,r16,r2
   1be28:	0013883a 	mov	r9,zero
   1be2c:	000b883a 	mov	r5,zero
   1be30:	3806d53a 	srli	r3,r7,20
   1be34:	382ed7fa 	srli	r23,r7,31
   1be38:	04400434 	movhi	r17,16
   1be3c:	8c7fffc4 	addi	r17,r17,-1
   1be40:	18c1ffcc 	andi	r3,r3,2047
   1be44:	3029883a 	mov	r20,r6
   1be48:	3c62703a 	and	r17,r7,r17
   1be4c:	bf003fcc 	andi	fp,r23,255
   1be50:	18006e26 	beq	r3,zero,1c00c <__divdf3+0x254>
   1be54:	0081ffc4 	movi	r2,2047
   1be58:	18806626 	beq	r3,r2,1bff4 <__divdf3+0x23c>
   1be5c:	88800434 	orhi	r2,r17,16
   1be60:	100490fa 	slli	r2,r2,3
   1be64:	3022d77a 	srli	r17,r6,29
   1be68:	302890fa 	slli	r20,r6,3
   1be6c:	18ff0044 	addi	r3,r3,-1023
   1be70:	88a2b03a 	or	r17,r17,r2
   1be74:	000f883a 	mov	r7,zero
   1be78:	b5e6f03a 	xor	r19,r22,r23
   1be7c:	3a4cb03a 	or	r6,r7,r9
   1be80:	008003c4 	movi	r2,15
   1be84:	9809883a 	mov	r4,r19
   1be88:	90c7c83a 	sub	r3,r18,r3
   1be8c:	9cc03fcc 	andi	r19,r19,255
   1be90:	11809636 	bltu	r2,r6,1c0ec <__divdf3+0x334>
   1be94:	300c90ba 	slli	r6,r6,2
   1be98:	008000b4 	movhi	r2,2
   1be9c:	10afab04 	addi	r2,r2,-16724
   1bea0:	308d883a 	add	r6,r6,r2
   1bea4:	30800017 	ldw	r2,0(r6)
   1bea8:	1000683a 	jmp	r2
   1beac:	0001c0ec 	andhi	zero,zero,1795
   1beb0:	0001bf24 	muli	zero,zero,1788
   1beb4:	0001c0dc 	xori	zero,zero,1795
   1beb8:	0001bf18 	cmpnei	zero,zero,1788
   1bebc:	0001c0dc 	xori	zero,zero,1795
   1bec0:	0001c0b0 	cmpltui	zero,zero,1794
   1bec4:	0001c0dc 	xori	zero,zero,1795
   1bec8:	0001bf18 	cmpnei	zero,zero,1788
   1becc:	0001bf24 	muli	zero,zero,1788
   1bed0:	0001bf24 	muli	zero,zero,1788
   1bed4:	0001c0b0 	cmpltui	zero,zero,1794
   1bed8:	0001bf18 	cmpnei	zero,zero,1788
   1bedc:	0001bf08 	cmpgei	zero,zero,1788
   1bee0:	0001bf08 	cmpgei	zero,zero,1788
   1bee4:	0001bf08 	cmpgei	zero,zero,1788
   1bee8:	0001c474 	movhi	zero,1809
   1beec:	2404b03a 	or	r2,r4,r16
   1bef0:	10006c1e 	bne	r2,zero,1c0a4 <__divdf3+0x2ec>
   1bef4:	02400204 	movi	r9,8
   1bef8:	0021883a 	mov	r16,zero
   1befc:	002b883a 	mov	r21,zero
   1bf00:	01400084 	movi	r5,2
   1bf04:	003fca06 	br	1be30 <__alt_data_end+0xfc01be30>
   1bf08:	8023883a 	mov	r17,r16
   1bf0c:	a829883a 	mov	r20,r21
   1bf10:	4039883a 	mov	fp,r8
   1bf14:	280f883a 	mov	r7,r5
   1bf18:	00800084 	movi	r2,2
   1bf1c:	3881601e 	bne	r7,r2,1c4a0 <__divdf3+0x6e8>
   1bf20:	e027883a 	mov	r19,fp
   1bf24:	9900004c 	andi	r4,r19,1
   1bf28:	0081ffc4 	movi	r2,2047
   1bf2c:	0021883a 	mov	r16,zero
   1bf30:	002b883a 	mov	r21,zero
   1bf34:	1004953a 	slli	r2,r2,20
   1bf38:	20c03fcc 	andi	r3,r4,255
   1bf3c:	01400434 	movhi	r5,16
   1bf40:	297fffc4 	addi	r5,r5,-1
   1bf44:	180697fa 	slli	r3,r3,31
   1bf48:	8160703a 	and	r16,r16,r5
   1bf4c:	80a0b03a 	or	r16,r16,r2
   1bf50:	80c6b03a 	or	r3,r16,r3
   1bf54:	a805883a 	mov	r2,r21
   1bf58:	dfc00f17 	ldw	ra,60(sp)
   1bf5c:	df000e17 	ldw	fp,56(sp)
   1bf60:	ddc00d17 	ldw	r23,52(sp)
   1bf64:	dd800c17 	ldw	r22,48(sp)
   1bf68:	dd400b17 	ldw	r21,44(sp)
   1bf6c:	dd000a17 	ldw	r20,40(sp)
   1bf70:	dcc00917 	ldw	r19,36(sp)
   1bf74:	dc800817 	ldw	r18,32(sp)
   1bf78:	dc400717 	ldw	r17,28(sp)
   1bf7c:	dc000617 	ldw	r16,24(sp)
   1bf80:	dec01004 	addi	sp,sp,64
   1bf84:	f800283a 	ret
   1bf88:	2404b03a 	or	r2,r4,r16
   1bf8c:	2023883a 	mov	r17,r4
   1bf90:	10003f26 	beq	r2,zero,1c090 <__divdf3+0x2d8>
   1bf94:	80015e26 	beq	r16,zero,1c510 <__divdf3+0x758>
   1bf98:	8009883a 	mov	r4,r16
   1bf9c:	d9800215 	stw	r6,8(sp)
   1bfa0:	d9c00515 	stw	r7,20(sp)
   1bfa4:	da000415 	stw	r8,16(sp)
   1bfa8:	001dd4c0 	call	1dd4c <__clzsi2>
   1bfac:	d9800217 	ldw	r6,8(sp)
   1bfb0:	d9c00517 	ldw	r7,20(sp)
   1bfb4:	da000417 	ldw	r8,16(sp)
   1bfb8:	113ffd44 	addi	r4,r2,-11
   1bfbc:	00c00704 	movi	r3,28
   1bfc0:	19014f16 	blt	r3,r4,1c500 <__divdf3+0x748>
   1bfc4:	00c00744 	movi	r3,29
   1bfc8:	157ffe04 	addi	r21,r2,-8
   1bfcc:	1907c83a 	sub	r3,r3,r4
   1bfd0:	8560983a 	sll	r16,r16,r21
   1bfd4:	88c6d83a 	srl	r3,r17,r3
   1bfd8:	8d6a983a 	sll	r21,r17,r21
   1bfdc:	1c20b03a 	or	r16,r3,r16
   1bfe0:	1080fcc4 	addi	r2,r2,1011
   1bfe4:	00a5c83a 	sub	r18,zero,r2
   1bfe8:	0013883a 	mov	r9,zero
   1bfec:	000b883a 	mov	r5,zero
   1bff0:	003f8f06 	br	1be30 <__alt_data_end+0xfc01be30>
   1bff4:	3444b03a 	or	r2,r6,r17
   1bff8:	1000231e 	bne	r2,zero,1c088 <__divdf3+0x2d0>
   1bffc:	0023883a 	mov	r17,zero
   1c000:	0029883a 	mov	r20,zero
   1c004:	01c00084 	movi	r7,2
   1c008:	003f9b06 	br	1be78 <__alt_data_end+0xfc01be78>
   1c00c:	3444b03a 	or	r2,r6,r17
   1c010:	10001926 	beq	r2,zero,1c078 <__divdf3+0x2c0>
   1c014:	88014b26 	beq	r17,zero,1c544 <__divdf3+0x78c>
   1c018:	8809883a 	mov	r4,r17
   1c01c:	d9400115 	stw	r5,4(sp)
   1c020:	d9800215 	stw	r6,8(sp)
   1c024:	da000415 	stw	r8,16(sp)
   1c028:	da400315 	stw	r9,12(sp)
   1c02c:	001dd4c0 	call	1dd4c <__clzsi2>
   1c030:	d9400117 	ldw	r5,4(sp)
   1c034:	d9800217 	ldw	r6,8(sp)
   1c038:	da000417 	ldw	r8,16(sp)
   1c03c:	da400317 	ldw	r9,12(sp)
   1c040:	113ffd44 	addi	r4,r2,-11
   1c044:	00c00704 	movi	r3,28
   1c048:	19013a16 	blt	r3,r4,1c534 <__divdf3+0x77c>
   1c04c:	00c00744 	movi	r3,29
   1c050:	153ffe04 	addi	r20,r2,-8
   1c054:	1907c83a 	sub	r3,r3,r4
   1c058:	8d22983a 	sll	r17,r17,r20
   1c05c:	30c6d83a 	srl	r3,r6,r3
   1c060:	3528983a 	sll	r20,r6,r20
   1c064:	1c62b03a 	or	r17,r3,r17
   1c068:	1080fcc4 	addi	r2,r2,1011
   1c06c:	0087c83a 	sub	r3,zero,r2
   1c070:	000f883a 	mov	r7,zero
   1c074:	003f8006 	br	1be78 <__alt_data_end+0xfc01be78>
   1c078:	0023883a 	mov	r17,zero
   1c07c:	0029883a 	mov	r20,zero
   1c080:	01c00044 	movi	r7,1
   1c084:	003f7c06 	br	1be78 <__alt_data_end+0xfc01be78>
   1c088:	01c000c4 	movi	r7,3
   1c08c:	003f7a06 	br	1be78 <__alt_data_end+0xfc01be78>
   1c090:	02400104 	movi	r9,4
   1c094:	0021883a 	mov	r16,zero
   1c098:	002b883a 	mov	r21,zero
   1c09c:	01400044 	movi	r5,1
   1c0a0:	003f6306 	br	1be30 <__alt_data_end+0xfc01be30>
   1c0a4:	02400304 	movi	r9,12
   1c0a8:	014000c4 	movi	r5,3
   1c0ac:	003f6006 	br	1be30 <__alt_data_end+0xfc01be30>
   1c0b0:	04000434 	movhi	r16,16
   1c0b4:	0009883a 	mov	r4,zero
   1c0b8:	843fffc4 	addi	r16,r16,-1
   1c0bc:	057fffc4 	movi	r21,-1
   1c0c0:	0081ffc4 	movi	r2,2047
   1c0c4:	003f9b06 	br	1bf34 <__alt_data_end+0xfc01bf34>
   1c0c8:	00c00044 	movi	r3,1
   1c0cc:	1887c83a 	sub	r3,r3,r2
   1c0d0:	01000e04 	movi	r4,56
   1c0d4:	20c1530e 	bge	r4,r3,1c624 <__divdf3+0x86c>
   1c0d8:	9900004c 	andi	r4,r19,1
   1c0dc:	0005883a 	mov	r2,zero
   1c0e0:	0021883a 	mov	r16,zero
   1c0e4:	002b883a 	mov	r21,zero
   1c0e8:	003f9206 	br	1bf34 <__alt_data_end+0xfc01bf34>
   1c0ec:	8c012e36 	bltu	r17,r16,1c5a8 <__divdf3+0x7f0>
   1c0f0:	84412c26 	beq	r16,r17,1c5a4 <__divdf3+0x7ec>
   1c0f4:	a82f883a 	mov	r23,r21
   1c0f8:	18ffffc4 	addi	r3,r3,-1
   1c0fc:	002b883a 	mov	r21,zero
   1c100:	a004d63a 	srli	r2,r20,24
   1c104:	8822923a 	slli	r17,r17,8
   1c108:	a028923a 	slli	r20,r20,8
   1c10c:	8009883a 	mov	r4,r16
   1c110:	88acb03a 	or	r22,r17,r2
   1c114:	dd000015 	stw	r20,0(sp)
   1c118:	b028d43a 	srli	r20,r22,16
   1c11c:	d8c00215 	stw	r3,8(sp)
   1c120:	b4bfffcc 	andi	r18,r22,65535
   1c124:	a00b883a 	mov	r5,r20
   1c128:	000cc380 	call	cc38 <__udivsi3>
   1c12c:	100b883a 	mov	r5,r2
   1c130:	9009883a 	mov	r4,r18
   1c134:	1023883a 	mov	r17,r2
   1c138:	000ccf40 	call	ccf4 <__mulsi3>
   1c13c:	8009883a 	mov	r4,r16
   1c140:	a00b883a 	mov	r5,r20
   1c144:	1039883a 	mov	fp,r2
   1c148:	000cc9c0 	call	cc9c <__umodsi3>
   1c14c:	1004943a 	slli	r2,r2,16
   1c150:	b808d43a 	srli	r4,r23,16
   1c154:	d8c00217 	ldw	r3,8(sp)
   1c158:	2084b03a 	or	r2,r4,r2
   1c15c:	1700062e 	bgeu	r2,fp,1c178 <__divdf3+0x3c0>
   1c160:	1585883a 	add	r2,r2,r22
   1c164:	893fffc4 	addi	r4,r17,-1
   1c168:	15811d36 	bltu	r2,r22,1c5e0 <__divdf3+0x828>
   1c16c:	17011c2e 	bgeu	r2,fp,1c5e0 <__divdf3+0x828>
   1c170:	8c7fff84 	addi	r17,r17,-2
   1c174:	1585883a 	add	r2,r2,r22
   1c178:	1739c83a 	sub	fp,r2,fp
   1c17c:	a00b883a 	mov	r5,r20
   1c180:	e009883a 	mov	r4,fp
   1c184:	d8c00215 	stw	r3,8(sp)
   1c188:	000cc380 	call	cc38 <__udivsi3>
   1c18c:	100b883a 	mov	r5,r2
   1c190:	9009883a 	mov	r4,r18
   1c194:	1021883a 	mov	r16,r2
   1c198:	000ccf40 	call	ccf4 <__mulsi3>
   1c19c:	a00b883a 	mov	r5,r20
   1c1a0:	e009883a 	mov	r4,fp
   1c1a4:	d8800415 	stw	r2,16(sp)
   1c1a8:	000cc9c0 	call	cc9c <__umodsi3>
   1c1ac:	1004943a 	slli	r2,r2,16
   1c1b0:	da000417 	ldw	r8,16(sp)
   1c1b4:	bdffffcc 	andi	r23,r23,65535
   1c1b8:	b884b03a 	or	r2,r23,r2
   1c1bc:	d8c00217 	ldw	r3,8(sp)
   1c1c0:	1200062e 	bgeu	r2,r8,1c1dc <__divdf3+0x424>
   1c1c4:	1585883a 	add	r2,r2,r22
   1c1c8:	813fffc4 	addi	r4,r16,-1
   1c1cc:	15810236 	bltu	r2,r22,1c5d8 <__divdf3+0x820>
   1c1d0:	1201012e 	bgeu	r2,r8,1c5d8 <__divdf3+0x820>
   1c1d4:	843fff84 	addi	r16,r16,-2
   1c1d8:	1585883a 	add	r2,r2,r22
   1c1dc:	8822943a 	slli	r17,r17,16
   1c1e0:	d9800017 	ldw	r6,0(sp)
   1c1e4:	1211c83a 	sub	r8,r2,r8
   1c1e8:	8c22b03a 	or	r17,r17,r16
   1c1ec:	373fffcc 	andi	fp,r6,65535
   1c1f0:	8abfffcc 	andi	r10,r17,65535
   1c1f4:	8820d43a 	srli	r16,r17,16
   1c1f8:	5009883a 	mov	r4,r10
   1c1fc:	e00b883a 	mov	r5,fp
   1c200:	302ed43a 	srli	r23,r6,16
   1c204:	d8c00215 	stw	r3,8(sp)
   1c208:	da000415 	stw	r8,16(sp)
   1c20c:	da800115 	stw	r10,4(sp)
   1c210:	000ccf40 	call	ccf4 <__mulsi3>
   1c214:	800b883a 	mov	r5,r16
   1c218:	e009883a 	mov	r4,fp
   1c21c:	d8800515 	stw	r2,20(sp)
   1c220:	000ccf40 	call	ccf4 <__mulsi3>
   1c224:	8009883a 	mov	r4,r16
   1c228:	b80b883a 	mov	r5,r23
   1c22c:	d8800315 	stw	r2,12(sp)
   1c230:	000ccf40 	call	ccf4 <__mulsi3>
   1c234:	da800117 	ldw	r10,4(sp)
   1c238:	b80b883a 	mov	r5,r23
   1c23c:	1021883a 	mov	r16,r2
   1c240:	5009883a 	mov	r4,r10
   1c244:	000ccf40 	call	ccf4 <__mulsi3>
   1c248:	d9c00517 	ldw	r7,20(sp)
   1c24c:	da400317 	ldw	r9,12(sp)
   1c250:	d8c00217 	ldw	r3,8(sp)
   1c254:	3808d43a 	srli	r4,r7,16
   1c258:	1245883a 	add	r2,r2,r9
   1c25c:	da000417 	ldw	r8,16(sp)
   1c260:	2085883a 	add	r2,r4,r2
   1c264:	1240022e 	bgeu	r2,r9,1c270 <__divdf3+0x4b8>
   1c268:	01000074 	movhi	r4,1
   1c26c:	8121883a 	add	r16,r16,r4
   1c270:	1008d43a 	srli	r4,r2,16
   1c274:	1004943a 	slli	r2,r2,16
   1c278:	39ffffcc 	andi	r7,r7,65535
   1c27c:	2409883a 	add	r4,r4,r16
   1c280:	11c5883a 	add	r2,r2,r7
   1c284:	4100bb36 	bltu	r8,r4,1c574 <__divdf3+0x7bc>
   1c288:	4100d726 	beq	r8,r4,1c5e8 <__divdf3+0x830>
   1c28c:	4109c83a 	sub	r4,r8,r4
   1c290:	a8a1c83a 	sub	r16,r21,r2
   1c294:	ac2b803a 	cmpltu	r21,r21,r16
   1c298:	256bc83a 	sub	r21,r4,r21
   1c29c:	b540d926 	beq	r22,r21,1c604 <__divdf3+0x84c>
   1c2a0:	a00b883a 	mov	r5,r20
   1c2a4:	a809883a 	mov	r4,r21
   1c2a8:	d8c00215 	stw	r3,8(sp)
   1c2ac:	000cc380 	call	cc38 <__udivsi3>
   1c2b0:	100b883a 	mov	r5,r2
   1c2b4:	9009883a 	mov	r4,r18
   1c2b8:	d8800515 	stw	r2,20(sp)
   1c2bc:	000ccf40 	call	ccf4 <__mulsi3>
   1c2c0:	a809883a 	mov	r4,r21
   1c2c4:	a00b883a 	mov	r5,r20
   1c2c8:	d8800415 	stw	r2,16(sp)
   1c2cc:	000cc9c0 	call	cc9c <__umodsi3>
   1c2d0:	1004943a 	slli	r2,r2,16
   1c2d4:	8008d43a 	srli	r4,r16,16
   1c2d8:	da000417 	ldw	r8,16(sp)
   1c2dc:	d8c00217 	ldw	r3,8(sp)
   1c2e0:	2084b03a 	or	r2,r4,r2
   1c2e4:	d9c00517 	ldw	r7,20(sp)
   1c2e8:	1200062e 	bgeu	r2,r8,1c304 <__divdf3+0x54c>
   1c2ec:	1585883a 	add	r2,r2,r22
   1c2f0:	393fffc4 	addi	r4,r7,-1
   1c2f4:	1580c536 	bltu	r2,r22,1c60c <__divdf3+0x854>
   1c2f8:	1200c42e 	bgeu	r2,r8,1c60c <__divdf3+0x854>
   1c2fc:	39ffff84 	addi	r7,r7,-2
   1c300:	1585883a 	add	r2,r2,r22
   1c304:	122bc83a 	sub	r21,r2,r8
   1c308:	a00b883a 	mov	r5,r20
   1c30c:	a809883a 	mov	r4,r21
   1c310:	d8c00215 	stw	r3,8(sp)
   1c314:	d9c00515 	stw	r7,20(sp)
   1c318:	000cc380 	call	cc38 <__udivsi3>
   1c31c:	9009883a 	mov	r4,r18
   1c320:	100b883a 	mov	r5,r2
   1c324:	d8800415 	stw	r2,16(sp)
   1c328:	000ccf40 	call	ccf4 <__mulsi3>
   1c32c:	a809883a 	mov	r4,r21
   1c330:	a00b883a 	mov	r5,r20
   1c334:	1025883a 	mov	r18,r2
   1c338:	000cc9c0 	call	cc9c <__umodsi3>
   1c33c:	1004943a 	slli	r2,r2,16
   1c340:	813fffcc 	andi	r4,r16,65535
   1c344:	d8c00217 	ldw	r3,8(sp)
   1c348:	20a0b03a 	or	r16,r4,r2
   1c34c:	d9c00517 	ldw	r7,20(sp)
   1c350:	da000417 	ldw	r8,16(sp)
   1c354:	8480062e 	bgeu	r16,r18,1c370 <__divdf3+0x5b8>
   1c358:	85a1883a 	add	r16,r16,r22
   1c35c:	40bfffc4 	addi	r2,r8,-1
   1c360:	8580ac36 	bltu	r16,r22,1c614 <__divdf3+0x85c>
   1c364:	8480ab2e 	bgeu	r16,r18,1c614 <__divdf3+0x85c>
   1c368:	423fff84 	addi	r8,r8,-2
   1c36c:	85a1883a 	add	r16,r16,r22
   1c370:	3804943a 	slli	r2,r7,16
   1c374:	84a1c83a 	sub	r16,r16,r18
   1c378:	e009883a 	mov	r4,fp
   1c37c:	1228b03a 	or	r20,r2,r8
   1c380:	a1ffffcc 	andi	r7,r20,65535
   1c384:	a024d43a 	srli	r18,r20,16
   1c388:	380b883a 	mov	r5,r7
   1c38c:	d8c00215 	stw	r3,8(sp)
   1c390:	d9c00515 	stw	r7,20(sp)
   1c394:	000ccf40 	call	ccf4 <__mulsi3>
   1c398:	900b883a 	mov	r5,r18
   1c39c:	e009883a 	mov	r4,fp
   1c3a0:	102b883a 	mov	r21,r2
   1c3a4:	000ccf40 	call	ccf4 <__mulsi3>
   1c3a8:	900b883a 	mov	r5,r18
   1c3ac:	b809883a 	mov	r4,r23
   1c3b0:	1039883a 	mov	fp,r2
   1c3b4:	000ccf40 	call	ccf4 <__mulsi3>
   1c3b8:	d9c00517 	ldw	r7,20(sp)
   1c3bc:	b80b883a 	mov	r5,r23
   1c3c0:	1025883a 	mov	r18,r2
   1c3c4:	3809883a 	mov	r4,r7
   1c3c8:	000ccf40 	call	ccf4 <__mulsi3>
   1c3cc:	a808d43a 	srli	r4,r21,16
   1c3d0:	1705883a 	add	r2,r2,fp
   1c3d4:	d8c00217 	ldw	r3,8(sp)
   1c3d8:	2085883a 	add	r2,r4,r2
   1c3dc:	1700022e 	bgeu	r2,fp,1c3e8 <__divdf3+0x630>
   1c3e0:	01000074 	movhi	r4,1
   1c3e4:	9125883a 	add	r18,r18,r4
   1c3e8:	1008d43a 	srli	r4,r2,16
   1c3ec:	1004943a 	slli	r2,r2,16
   1c3f0:	ad7fffcc 	andi	r21,r21,65535
   1c3f4:	2489883a 	add	r4,r4,r18
   1c3f8:	1545883a 	add	r2,r2,r21
   1c3fc:	81003836 	bltu	r16,r4,1c4e0 <__divdf3+0x728>
   1c400:	81003626 	beq	r16,r4,1c4dc <__divdf3+0x724>
   1c404:	a5000054 	ori	r20,r20,1
   1c408:	1880ffc4 	addi	r2,r3,1023
   1c40c:	00bf2e0e 	bge	zero,r2,1c0c8 <__alt_data_end+0xfc01c0c8>
   1c410:	a10001cc 	andi	r4,r20,7
   1c414:	20000726 	beq	r4,zero,1c434 <__divdf3+0x67c>
   1c418:	a10003cc 	andi	r4,r20,15
   1c41c:	01400104 	movi	r5,4
   1c420:	21400426 	beq	r4,r5,1c434 <__divdf3+0x67c>
   1c424:	a149883a 	add	r4,r20,r5
   1c428:	2529803a 	cmpltu	r20,r4,r20
   1c42c:	8d23883a 	add	r17,r17,r20
   1c430:	2029883a 	mov	r20,r4
   1c434:	8900402c 	andhi	r4,r17,256
   1c438:	20000426 	beq	r4,zero,1c44c <__divdf3+0x694>
   1c43c:	18810004 	addi	r2,r3,1024
   1c440:	00ffc034 	movhi	r3,65280
   1c444:	18ffffc4 	addi	r3,r3,-1
   1c448:	88e2703a 	and	r17,r17,r3
   1c44c:	00c1ff84 	movi	r3,2046
   1c450:	18beb416 	blt	r3,r2,1bf24 <__alt_data_end+0xfc01bf24>
   1c454:	a028d0fa 	srli	r20,r20,3
   1c458:	882a977a 	slli	r21,r17,29
   1c45c:	8820927a 	slli	r16,r17,9
   1c460:	1081ffcc 	andi	r2,r2,2047
   1c464:	ad2ab03a 	or	r21,r21,r20
   1c468:	8020d33a 	srli	r16,r16,12
   1c46c:	9900004c 	andi	r4,r19,1
   1c470:	003eb006 	br	1bf34 <__alt_data_end+0xfc01bf34>
   1c474:	8080022c 	andhi	r2,r16,8
   1c478:	10001226 	beq	r2,zero,1c4c4 <__divdf3+0x70c>
   1c47c:	8880022c 	andhi	r2,r17,8
   1c480:	1000101e 	bne	r2,zero,1c4c4 <__divdf3+0x70c>
   1c484:	00800434 	movhi	r2,16
   1c488:	8c000234 	orhi	r16,r17,8
   1c48c:	10bfffc4 	addi	r2,r2,-1
   1c490:	b809883a 	mov	r4,r23
   1c494:	80a0703a 	and	r16,r16,r2
   1c498:	a02b883a 	mov	r21,r20
   1c49c:	003f0806 	br	1c0c0 <__alt_data_end+0xfc01c0c0>
   1c4a0:	008000c4 	movi	r2,3
   1c4a4:	3880b126 	beq	r7,r2,1c76c <__divdf3+0x9b4>
   1c4a8:	00800044 	movi	r2,1
   1c4ac:	38805b1e 	bne	r7,r2,1c61c <__divdf3+0x864>
   1c4b0:	e009883a 	mov	r4,fp
   1c4b4:	0005883a 	mov	r2,zero
   1c4b8:	0021883a 	mov	r16,zero
   1c4bc:	002b883a 	mov	r21,zero
   1c4c0:	003e9c06 	br	1bf34 <__alt_data_end+0xfc01bf34>
   1c4c4:	00800434 	movhi	r2,16
   1c4c8:	84000234 	orhi	r16,r16,8
   1c4cc:	10bfffc4 	addi	r2,r2,-1
   1c4d0:	b009883a 	mov	r4,r22
   1c4d4:	80a0703a 	and	r16,r16,r2
   1c4d8:	003ef906 	br	1c0c0 <__alt_data_end+0xfc01c0c0>
   1c4dc:	103fca26 	beq	r2,zero,1c408 <__alt_data_end+0xfc01c408>
   1c4e0:	b421883a 	add	r16,r22,r16
   1c4e4:	a17fffc4 	addi	r5,r20,-1
   1c4e8:	8580422e 	bgeu	r16,r22,1c5f4 <__divdf3+0x83c>
   1c4ec:	2829883a 	mov	r20,r5
   1c4f0:	813fc41e 	bne	r16,r4,1c404 <__alt_data_end+0xfc01c404>
   1c4f4:	d9800017 	ldw	r6,0(sp)
   1c4f8:	30bfc21e 	bne	r6,r2,1c404 <__alt_data_end+0xfc01c404>
   1c4fc:	003fc206 	br	1c408 <__alt_data_end+0xfc01c408>
   1c500:	143ff604 	addi	r16,r2,-40
   1c504:	8c20983a 	sll	r16,r17,r16
   1c508:	002b883a 	mov	r21,zero
   1c50c:	003eb406 	br	1bfe0 <__alt_data_end+0xfc01bfe0>
   1c510:	d9800215 	stw	r6,8(sp)
   1c514:	d9c00515 	stw	r7,20(sp)
   1c518:	da000415 	stw	r8,16(sp)
   1c51c:	001dd4c0 	call	1dd4c <__clzsi2>
   1c520:	10800804 	addi	r2,r2,32
   1c524:	da000417 	ldw	r8,16(sp)
   1c528:	d9c00517 	ldw	r7,20(sp)
   1c52c:	d9800217 	ldw	r6,8(sp)
   1c530:	003ea106 	br	1bfb8 <__alt_data_end+0xfc01bfb8>
   1c534:	147ff604 	addi	r17,r2,-40
   1c538:	3462983a 	sll	r17,r6,r17
   1c53c:	0029883a 	mov	r20,zero
   1c540:	003ec906 	br	1c068 <__alt_data_end+0xfc01c068>
   1c544:	3009883a 	mov	r4,r6
   1c548:	d9400115 	stw	r5,4(sp)
   1c54c:	d9800215 	stw	r6,8(sp)
   1c550:	da000415 	stw	r8,16(sp)
   1c554:	da400315 	stw	r9,12(sp)
   1c558:	001dd4c0 	call	1dd4c <__clzsi2>
   1c55c:	10800804 	addi	r2,r2,32
   1c560:	da400317 	ldw	r9,12(sp)
   1c564:	da000417 	ldw	r8,16(sp)
   1c568:	d9800217 	ldw	r6,8(sp)
   1c56c:	d9400117 	ldw	r5,4(sp)
   1c570:	003eb306 	br	1c040 <__alt_data_end+0xfc01c040>
   1c574:	d9800017 	ldw	r6,0(sp)
   1c578:	a9ab883a 	add	r21,r21,r6
   1c57c:	a98b803a 	cmpltu	r5,r21,r6
   1c580:	2d8b883a 	add	r5,r5,r22
   1c584:	2a11883a 	add	r8,r5,r8
   1c588:	897fffc4 	addi	r5,r17,-1
   1c58c:	b2000c2e 	bgeu	r22,r8,1c5c0 <__divdf3+0x808>
   1c590:	41003f36 	bltu	r8,r4,1c690 <__divdf3+0x8d8>
   1c594:	22006c26 	beq	r4,r8,1c748 <__divdf3+0x990>
   1c598:	4109c83a 	sub	r4,r8,r4
   1c59c:	2823883a 	mov	r17,r5
   1c5a0:	003f3b06 	br	1c290 <__alt_data_end+0xfc01c290>
   1c5a4:	ad3ed336 	bltu	r21,r20,1c0f4 <__alt_data_end+0xfc01c0f4>
   1c5a8:	a804d07a 	srli	r2,r21,1
   1c5ac:	802e97fa 	slli	r23,r16,31
   1c5b0:	a82a97fa 	slli	r21,r21,31
   1c5b4:	8020d07a 	srli	r16,r16,1
   1c5b8:	b8aeb03a 	or	r23,r23,r2
   1c5bc:	003ed006 	br	1c100 <__alt_data_end+0xfc01c100>
   1c5c0:	b23ff51e 	bne	r22,r8,1c598 <__alt_data_end+0xfc01c598>
   1c5c4:	d9800017 	ldw	r6,0(sp)
   1c5c8:	a9bff12e 	bgeu	r21,r6,1c590 <__alt_data_end+0xfc01c590>
   1c5cc:	b109c83a 	sub	r4,r22,r4
   1c5d0:	2823883a 	mov	r17,r5
   1c5d4:	003f2e06 	br	1c290 <__alt_data_end+0xfc01c290>
   1c5d8:	2021883a 	mov	r16,r4
   1c5dc:	003eff06 	br	1c1dc <__alt_data_end+0xfc01c1dc>
   1c5e0:	2023883a 	mov	r17,r4
   1c5e4:	003ee406 	br	1c178 <__alt_data_end+0xfc01c178>
   1c5e8:	a8bfe236 	bltu	r21,r2,1c574 <__alt_data_end+0xfc01c574>
   1c5ec:	0009883a 	mov	r4,zero
   1c5f0:	003f2706 	br	1c290 <__alt_data_end+0xfc01c290>
   1c5f4:	81002d36 	bltu	r16,r4,1c6ac <__divdf3+0x8f4>
   1c5f8:	24005626 	beq	r4,r16,1c754 <__divdf3+0x99c>
   1c5fc:	2829883a 	mov	r20,r5
   1c600:	003f8006 	br	1c404 <__alt_data_end+0xfc01c404>
   1c604:	053fffc4 	movi	r20,-1
   1c608:	003f7f06 	br	1c408 <__alt_data_end+0xfc01c408>
   1c60c:	200f883a 	mov	r7,r4
   1c610:	003f3c06 	br	1c304 <__alt_data_end+0xfc01c304>
   1c614:	1011883a 	mov	r8,r2
   1c618:	003f5506 	br	1c370 <__alt_data_end+0xfc01c370>
   1c61c:	e027883a 	mov	r19,fp
   1c620:	003f7906 	br	1c408 <__alt_data_end+0xfc01c408>
   1c624:	010007c4 	movi	r4,31
   1c628:	20c02816 	blt	r4,r3,1c6cc <__divdf3+0x914>
   1c62c:	00800804 	movi	r2,32
   1c630:	10c5c83a 	sub	r2,r2,r3
   1c634:	888a983a 	sll	r5,r17,r2
   1c638:	a0c8d83a 	srl	r4,r20,r3
   1c63c:	a084983a 	sll	r2,r20,r2
   1c640:	88e2d83a 	srl	r17,r17,r3
   1c644:	2906b03a 	or	r3,r5,r4
   1c648:	1004c03a 	cmpne	r2,r2,zero
   1c64c:	1886b03a 	or	r3,r3,r2
   1c650:	188001cc 	andi	r2,r3,7
   1c654:	10000726 	beq	r2,zero,1c674 <__divdf3+0x8bc>
   1c658:	188003cc 	andi	r2,r3,15
   1c65c:	01000104 	movi	r4,4
   1c660:	11000426 	beq	r2,r4,1c674 <__divdf3+0x8bc>
   1c664:	1805883a 	mov	r2,r3
   1c668:	10c00104 	addi	r3,r2,4
   1c66c:	1885803a 	cmpltu	r2,r3,r2
   1c670:	88a3883a 	add	r17,r17,r2
   1c674:	8880202c 	andhi	r2,r17,128
   1c678:	10002926 	beq	r2,zero,1c720 <__divdf3+0x968>
   1c67c:	9900004c 	andi	r4,r19,1
   1c680:	00800044 	movi	r2,1
   1c684:	0021883a 	mov	r16,zero
   1c688:	002b883a 	mov	r21,zero
   1c68c:	003e2906 	br	1bf34 <__alt_data_end+0xfc01bf34>
   1c690:	d9800017 	ldw	r6,0(sp)
   1c694:	8c7fff84 	addi	r17,r17,-2
   1c698:	a9ab883a 	add	r21,r21,r6
   1c69c:	a98b803a 	cmpltu	r5,r21,r6
   1c6a0:	2d8b883a 	add	r5,r5,r22
   1c6a4:	2a11883a 	add	r8,r5,r8
   1c6a8:	003ef806 	br	1c28c <__alt_data_end+0xfc01c28c>
   1c6ac:	d9800017 	ldw	r6,0(sp)
   1c6b0:	318f883a 	add	r7,r6,r6
   1c6b4:	398b803a 	cmpltu	r5,r7,r6
   1c6b8:	2d8d883a 	add	r6,r5,r22
   1c6bc:	81a1883a 	add	r16,r16,r6
   1c6c0:	a17fff84 	addi	r5,r20,-2
   1c6c4:	d9c00015 	stw	r7,0(sp)
   1c6c8:	003f8806 	br	1c4ec <__alt_data_end+0xfc01c4ec>
   1c6cc:	013ff844 	movi	r4,-31
   1c6d0:	2085c83a 	sub	r2,r4,r2
   1c6d4:	8888d83a 	srl	r4,r17,r2
   1c6d8:	00800804 	movi	r2,32
   1c6dc:	18802126 	beq	r3,r2,1c764 <__divdf3+0x9ac>
   1c6e0:	04001004 	movi	r16,64
   1c6e4:	80c7c83a 	sub	r3,r16,r3
   1c6e8:	88e0983a 	sll	r16,r17,r3
   1c6ec:	8504b03a 	or	r2,r16,r20
   1c6f0:	1004c03a 	cmpne	r2,r2,zero
   1c6f4:	2084b03a 	or	r2,r4,r2
   1c6f8:	144001cc 	andi	r17,r2,7
   1c6fc:	88000d1e 	bne	r17,zero,1c734 <__divdf3+0x97c>
   1c700:	0021883a 	mov	r16,zero
   1c704:	102ad0fa 	srli	r21,r2,3
   1c708:	9900004c 	andi	r4,r19,1
   1c70c:	0005883a 	mov	r2,zero
   1c710:	ac6ab03a 	or	r21,r21,r17
   1c714:	003e0706 	br	1bf34 <__alt_data_end+0xfc01bf34>
   1c718:	1007883a 	mov	r3,r2
   1c71c:	0023883a 	mov	r17,zero
   1c720:	8820927a 	slli	r16,r17,9
   1c724:	1805883a 	mov	r2,r3
   1c728:	8822977a 	slli	r17,r17,29
   1c72c:	8020d33a 	srli	r16,r16,12
   1c730:	003ff406 	br	1c704 <__alt_data_end+0xfc01c704>
   1c734:	10c003cc 	andi	r3,r2,15
   1c738:	01000104 	movi	r4,4
   1c73c:	193ff626 	beq	r3,r4,1c718 <__alt_data_end+0xfc01c718>
   1c740:	0023883a 	mov	r17,zero
   1c744:	003fc806 	br	1c668 <__alt_data_end+0xfc01c668>
   1c748:	a8bfd136 	bltu	r21,r2,1c690 <__alt_data_end+0xfc01c690>
   1c74c:	2823883a 	mov	r17,r5
   1c750:	003fa606 	br	1c5ec <__alt_data_end+0xfc01c5ec>
   1c754:	d9800017 	ldw	r6,0(sp)
   1c758:	30bfd436 	bltu	r6,r2,1c6ac <__alt_data_end+0xfc01c6ac>
   1c75c:	2829883a 	mov	r20,r5
   1c760:	003f6406 	br	1c4f4 <__alt_data_end+0xfc01c4f4>
   1c764:	0021883a 	mov	r16,zero
   1c768:	003fe006 	br	1c6ec <__alt_data_end+0xfc01c6ec>
   1c76c:	00800434 	movhi	r2,16
   1c770:	8c000234 	orhi	r16,r17,8
   1c774:	10bfffc4 	addi	r2,r2,-1
   1c778:	e009883a 	mov	r4,fp
   1c77c:	80a0703a 	and	r16,r16,r2
   1c780:	a02b883a 	mov	r21,r20
   1c784:	003e4e06 	br	1c0c0 <__alt_data_end+0xfc01c0c0>

0001c788 <__eqdf2>:
   1c788:	2804d53a 	srli	r2,r5,20
   1c78c:	3806d53a 	srli	r3,r7,20
   1c790:	02000434 	movhi	r8,16
   1c794:	423fffc4 	addi	r8,r8,-1
   1c798:	1081ffcc 	andi	r2,r2,2047
   1c79c:	0281ffc4 	movi	r10,2047
   1c7a0:	2a12703a 	and	r9,r5,r8
   1c7a4:	18c1ffcc 	andi	r3,r3,2047
   1c7a8:	3a10703a 	and	r8,r7,r8
   1c7ac:	280ad7fa 	srli	r5,r5,31
   1c7b0:	380ed7fa 	srli	r7,r7,31
   1c7b4:	12801026 	beq	r2,r10,1c7f8 <__eqdf2+0x70>
   1c7b8:	0281ffc4 	movi	r10,2047
   1c7bc:	1a800a26 	beq	r3,r10,1c7e8 <__eqdf2+0x60>
   1c7c0:	10c00226 	beq	r2,r3,1c7cc <__eqdf2+0x44>
   1c7c4:	00800044 	movi	r2,1
   1c7c8:	f800283a 	ret
   1c7cc:	4a3ffd1e 	bne	r9,r8,1c7c4 <__alt_data_end+0xfc01c7c4>
   1c7d0:	21bffc1e 	bne	r4,r6,1c7c4 <__alt_data_end+0xfc01c7c4>
   1c7d4:	29c00c26 	beq	r5,r7,1c808 <__eqdf2+0x80>
   1c7d8:	103ffa1e 	bne	r2,zero,1c7c4 <__alt_data_end+0xfc01c7c4>
   1c7dc:	2244b03a 	or	r2,r4,r9
   1c7e0:	1004c03a 	cmpne	r2,r2,zero
   1c7e4:	f800283a 	ret
   1c7e8:	3214b03a 	or	r10,r6,r8
   1c7ec:	503ff426 	beq	r10,zero,1c7c0 <__alt_data_end+0xfc01c7c0>
   1c7f0:	00800044 	movi	r2,1
   1c7f4:	f800283a 	ret
   1c7f8:	2254b03a 	or	r10,r4,r9
   1c7fc:	503fee26 	beq	r10,zero,1c7b8 <__alt_data_end+0xfc01c7b8>
   1c800:	00800044 	movi	r2,1
   1c804:	f800283a 	ret
   1c808:	0005883a 	mov	r2,zero
   1c80c:	f800283a 	ret

0001c810 <__gedf2>:
   1c810:	2804d53a 	srli	r2,r5,20
   1c814:	3806d53a 	srli	r3,r7,20
   1c818:	02000434 	movhi	r8,16
   1c81c:	423fffc4 	addi	r8,r8,-1
   1c820:	1081ffcc 	andi	r2,r2,2047
   1c824:	0241ffc4 	movi	r9,2047
   1c828:	2a14703a 	and	r10,r5,r8
   1c82c:	18c1ffcc 	andi	r3,r3,2047
   1c830:	3a10703a 	and	r8,r7,r8
   1c834:	280ad7fa 	srli	r5,r5,31
   1c838:	380ed7fa 	srli	r7,r7,31
   1c83c:	12401d26 	beq	r2,r9,1c8b4 <__gedf2+0xa4>
   1c840:	0241ffc4 	movi	r9,2047
   1c844:	1a401226 	beq	r3,r9,1c890 <__gedf2+0x80>
   1c848:	1000081e 	bne	r2,zero,1c86c <__gedf2+0x5c>
   1c84c:	2296b03a 	or	r11,r4,r10
   1c850:	5813003a 	cmpeq	r9,r11,zero
   1c854:	1800091e 	bne	r3,zero,1c87c <__gedf2+0x6c>
   1c858:	3218b03a 	or	r12,r6,r8
   1c85c:	6000071e 	bne	r12,zero,1c87c <__gedf2+0x6c>
   1c860:	0005883a 	mov	r2,zero
   1c864:	5800101e 	bne	r11,zero,1c8a8 <__gedf2+0x98>
   1c868:	f800283a 	ret
   1c86c:	18000c1e 	bne	r3,zero,1c8a0 <__gedf2+0x90>
   1c870:	3212b03a 	or	r9,r6,r8
   1c874:	48000c26 	beq	r9,zero,1c8a8 <__gedf2+0x98>
   1c878:	0013883a 	mov	r9,zero
   1c87c:	39c03fcc 	andi	r7,r7,255
   1c880:	48000826 	beq	r9,zero,1c8a4 <__gedf2+0x94>
   1c884:	38000926 	beq	r7,zero,1c8ac <__gedf2+0x9c>
   1c888:	00800044 	movi	r2,1
   1c88c:	f800283a 	ret
   1c890:	3212b03a 	or	r9,r6,r8
   1c894:	483fec26 	beq	r9,zero,1c848 <__alt_data_end+0xfc01c848>
   1c898:	00bfff84 	movi	r2,-2
   1c89c:	f800283a 	ret
   1c8a0:	39c03fcc 	andi	r7,r7,255
   1c8a4:	29c00626 	beq	r5,r7,1c8c0 <__gedf2+0xb0>
   1c8a8:	283ff726 	beq	r5,zero,1c888 <__alt_data_end+0xfc01c888>
   1c8ac:	00bfffc4 	movi	r2,-1
   1c8b0:	f800283a 	ret
   1c8b4:	2292b03a 	or	r9,r4,r10
   1c8b8:	483fe126 	beq	r9,zero,1c840 <__alt_data_end+0xfc01c840>
   1c8bc:	003ff606 	br	1c898 <__alt_data_end+0xfc01c898>
   1c8c0:	18bff916 	blt	r3,r2,1c8a8 <__alt_data_end+0xfc01c8a8>
   1c8c4:	10c00316 	blt	r2,r3,1c8d4 <__gedf2+0xc4>
   1c8c8:	42bff736 	bltu	r8,r10,1c8a8 <__alt_data_end+0xfc01c8a8>
   1c8cc:	52000326 	beq	r10,r8,1c8dc <__gedf2+0xcc>
   1c8d0:	5200042e 	bgeu	r10,r8,1c8e4 <__gedf2+0xd4>
   1c8d4:	283fec1e 	bne	r5,zero,1c888 <__alt_data_end+0xfc01c888>
   1c8d8:	003ff406 	br	1c8ac <__alt_data_end+0xfc01c8ac>
   1c8dc:	313ff236 	bltu	r6,r4,1c8a8 <__alt_data_end+0xfc01c8a8>
   1c8e0:	21bffc36 	bltu	r4,r6,1c8d4 <__alt_data_end+0xfc01c8d4>
   1c8e4:	0005883a 	mov	r2,zero
   1c8e8:	f800283a 	ret

0001c8ec <__ledf2>:
   1c8ec:	2804d53a 	srli	r2,r5,20
   1c8f0:	3810d53a 	srli	r8,r7,20
   1c8f4:	00c00434 	movhi	r3,16
   1c8f8:	18ffffc4 	addi	r3,r3,-1
   1c8fc:	1081ffcc 	andi	r2,r2,2047
   1c900:	0241ffc4 	movi	r9,2047
   1c904:	28d4703a 	and	r10,r5,r3
   1c908:	4201ffcc 	andi	r8,r8,2047
   1c90c:	38c6703a 	and	r3,r7,r3
   1c910:	280ad7fa 	srli	r5,r5,31
   1c914:	380ed7fa 	srli	r7,r7,31
   1c918:	12401f26 	beq	r2,r9,1c998 <__ledf2+0xac>
   1c91c:	0241ffc4 	movi	r9,2047
   1c920:	42401426 	beq	r8,r9,1c974 <__ledf2+0x88>
   1c924:	1000091e 	bne	r2,zero,1c94c <__ledf2+0x60>
   1c928:	2296b03a 	or	r11,r4,r10
   1c92c:	5813003a 	cmpeq	r9,r11,zero
   1c930:	29403fcc 	andi	r5,r5,255
   1c934:	40000a1e 	bne	r8,zero,1c960 <__ledf2+0x74>
   1c938:	30d8b03a 	or	r12,r6,r3
   1c93c:	6000081e 	bne	r12,zero,1c960 <__ledf2+0x74>
   1c940:	0005883a 	mov	r2,zero
   1c944:	5800111e 	bne	r11,zero,1c98c <__ledf2+0xa0>
   1c948:	f800283a 	ret
   1c94c:	29403fcc 	andi	r5,r5,255
   1c950:	40000c1e 	bne	r8,zero,1c984 <__ledf2+0x98>
   1c954:	30d2b03a 	or	r9,r6,r3
   1c958:	48000c26 	beq	r9,zero,1c98c <__ledf2+0xa0>
   1c95c:	0013883a 	mov	r9,zero
   1c960:	39c03fcc 	andi	r7,r7,255
   1c964:	48000826 	beq	r9,zero,1c988 <__ledf2+0x9c>
   1c968:	38001126 	beq	r7,zero,1c9b0 <__ledf2+0xc4>
   1c96c:	00800044 	movi	r2,1
   1c970:	f800283a 	ret
   1c974:	30d2b03a 	or	r9,r6,r3
   1c978:	483fea26 	beq	r9,zero,1c924 <__alt_data_end+0xfc01c924>
   1c97c:	00800084 	movi	r2,2
   1c980:	f800283a 	ret
   1c984:	39c03fcc 	andi	r7,r7,255
   1c988:	39400726 	beq	r7,r5,1c9a8 <__ledf2+0xbc>
   1c98c:	2800081e 	bne	r5,zero,1c9b0 <__ledf2+0xc4>
   1c990:	00800044 	movi	r2,1
   1c994:	f800283a 	ret
   1c998:	2292b03a 	or	r9,r4,r10
   1c99c:	483fdf26 	beq	r9,zero,1c91c <__alt_data_end+0xfc01c91c>
   1c9a0:	00800084 	movi	r2,2
   1c9a4:	f800283a 	ret
   1c9a8:	4080030e 	bge	r8,r2,1c9b8 <__ledf2+0xcc>
   1c9ac:	383fef26 	beq	r7,zero,1c96c <__alt_data_end+0xfc01c96c>
   1c9b0:	00bfffc4 	movi	r2,-1
   1c9b4:	f800283a 	ret
   1c9b8:	123feb16 	blt	r2,r8,1c968 <__alt_data_end+0xfc01c968>
   1c9bc:	1abff336 	bltu	r3,r10,1c98c <__alt_data_end+0xfc01c98c>
   1c9c0:	50c00326 	beq	r10,r3,1c9d0 <__ledf2+0xe4>
   1c9c4:	50c0042e 	bgeu	r10,r3,1c9d8 <__ledf2+0xec>
   1c9c8:	283fe81e 	bne	r5,zero,1c96c <__alt_data_end+0xfc01c96c>
   1c9cc:	003ff806 	br	1c9b0 <__alt_data_end+0xfc01c9b0>
   1c9d0:	313fee36 	bltu	r6,r4,1c98c <__alt_data_end+0xfc01c98c>
   1c9d4:	21bffc36 	bltu	r4,r6,1c9c8 <__alt_data_end+0xfc01c9c8>
   1c9d8:	0005883a 	mov	r2,zero
   1c9dc:	f800283a 	ret

0001c9e0 <__muldf3>:
   1c9e0:	deffee04 	addi	sp,sp,-72
   1c9e4:	dd000c15 	stw	r20,48(sp)
   1c9e8:	2828d53a 	srli	r20,r5,20
   1c9ec:	ddc00f15 	stw	r23,60(sp)
   1c9f0:	282ed7fa 	srli	r23,r5,31
   1c9f4:	dc000815 	stw	r16,32(sp)
   1c9f8:	04000434 	movhi	r16,16
   1c9fc:	dcc00b15 	stw	r19,44(sp)
   1ca00:	843fffc4 	addi	r16,r16,-1
   1ca04:	dfc01115 	stw	ra,68(sp)
   1ca08:	df001015 	stw	fp,64(sp)
   1ca0c:	dd800e15 	stw	r22,56(sp)
   1ca10:	dd400d15 	stw	r21,52(sp)
   1ca14:	dc800a15 	stw	r18,40(sp)
   1ca18:	dc400915 	stw	r17,36(sp)
   1ca1c:	a501ffcc 	andi	r20,r20,2047
   1ca20:	2c20703a 	and	r16,r5,r16
   1ca24:	b827883a 	mov	r19,r23
   1ca28:	ba403fcc 	andi	r9,r23,255
   1ca2c:	a0006026 	beq	r20,zero,1cbb0 <__muldf3+0x1d0>
   1ca30:	0081ffc4 	movi	r2,2047
   1ca34:	202d883a 	mov	r22,r4
   1ca38:	a0803626 	beq	r20,r2,1cb14 <__muldf3+0x134>
   1ca3c:	84000434 	orhi	r16,r16,16
   1ca40:	200ad77a 	srli	r5,r4,29
   1ca44:	800490fa 	slli	r2,r16,3
   1ca48:	202c90fa 	slli	r22,r4,3
   1ca4c:	a53f0044 	addi	r20,r20,-1023
   1ca50:	28a0b03a 	or	r16,r5,r2
   1ca54:	002b883a 	mov	r21,zero
   1ca58:	000b883a 	mov	r5,zero
   1ca5c:	3804d53a 	srli	r2,r7,20
   1ca60:	3838d7fa 	srli	fp,r7,31
   1ca64:	04400434 	movhi	r17,16
   1ca68:	8c7fffc4 	addi	r17,r17,-1
   1ca6c:	1081ffcc 	andi	r2,r2,2047
   1ca70:	3025883a 	mov	r18,r6
   1ca74:	3c62703a 	and	r17,r7,r17
   1ca78:	e2803fcc 	andi	r10,fp,255
   1ca7c:	10006d26 	beq	r2,zero,1cc34 <__muldf3+0x254>
   1ca80:	00c1ffc4 	movi	r3,2047
   1ca84:	10c06526 	beq	r2,r3,1cc1c <__muldf3+0x23c>
   1ca88:	8c400434 	orhi	r17,r17,16
   1ca8c:	300ed77a 	srli	r7,r6,29
   1ca90:	880690fa 	slli	r3,r17,3
   1ca94:	302490fa 	slli	r18,r6,3
   1ca98:	10bf0044 	addi	r2,r2,-1023
   1ca9c:	38e2b03a 	or	r17,r7,r3
   1caa0:	000f883a 	mov	r7,zero
   1caa4:	a087883a 	add	r3,r20,r2
   1caa8:	010003c4 	movi	r4,15
   1caac:	3d44b03a 	or	r2,r7,r21
   1cab0:	e5ccf03a 	xor	r6,fp,r23
   1cab4:	1a000044 	addi	r8,r3,1
   1cab8:	20809b36 	bltu	r4,r2,1cd28 <__muldf3+0x348>
   1cabc:	100490ba 	slli	r2,r2,2
   1cac0:	010000b4 	movhi	r4,2
   1cac4:	2132b504 	addi	r4,r4,-13612
   1cac8:	1105883a 	add	r2,r2,r4
   1cacc:	10800017 	ldw	r2,0(r2)
   1cad0:	1000683a 	jmp	r2
   1cad4:	0001cd28 	cmpgeui	zero,zero,1844
   1cad8:	0001cb34 	movhi	zero,1836
   1cadc:	0001cb34 	movhi	zero,1836
   1cae0:	0001cb30 	cmpltui	zero,zero,1836
   1cae4:	0001cd04 	movi	zero,1844
   1cae8:	0001cd04 	movi	zero,1844
   1caec:	0001ccec 	andhi	zero,zero,1843
   1caf0:	0001cb30 	cmpltui	zero,zero,1836
   1caf4:	0001cd04 	movi	zero,1844
   1caf8:	0001ccec 	andhi	zero,zero,1843
   1cafc:	0001cd04 	movi	zero,1844
   1cb00:	0001cb30 	cmpltui	zero,zero,1836
   1cb04:	0001cd14 	movui	zero,1844
   1cb08:	0001cd14 	movui	zero,1844
   1cb0c:	0001cd14 	movui	zero,1844
   1cb10:	0001d074 	movhi	zero,1857
   1cb14:	2404b03a 	or	r2,r4,r16
   1cb18:	1000711e 	bne	r2,zero,1cce0 <__muldf3+0x300>
   1cb1c:	05400204 	movi	r21,8
   1cb20:	0021883a 	mov	r16,zero
   1cb24:	002d883a 	mov	r22,zero
   1cb28:	01400084 	movi	r5,2
   1cb2c:	003fcb06 	br	1ca5c <__alt_data_end+0xfc01ca5c>
   1cb30:	500d883a 	mov	r6,r10
   1cb34:	00800084 	movi	r2,2
   1cb38:	38805926 	beq	r7,r2,1cca0 <__muldf3+0x2c0>
   1cb3c:	008000c4 	movi	r2,3
   1cb40:	3881bb26 	beq	r7,r2,1d230 <__muldf3+0x850>
   1cb44:	00800044 	movi	r2,1
   1cb48:	3881961e 	bne	r7,r2,1d1a4 <__muldf3+0x7c4>
   1cb4c:	3027883a 	mov	r19,r6
   1cb50:	0005883a 	mov	r2,zero
   1cb54:	0021883a 	mov	r16,zero
   1cb58:	002d883a 	mov	r22,zero
   1cb5c:	1004953a 	slli	r2,r2,20
   1cb60:	98c03fcc 	andi	r3,r19,255
   1cb64:	04400434 	movhi	r17,16
   1cb68:	8c7fffc4 	addi	r17,r17,-1
   1cb6c:	180697fa 	slli	r3,r3,31
   1cb70:	8460703a 	and	r16,r16,r17
   1cb74:	80a0b03a 	or	r16,r16,r2
   1cb78:	80c6b03a 	or	r3,r16,r3
   1cb7c:	b005883a 	mov	r2,r22
   1cb80:	dfc01117 	ldw	ra,68(sp)
   1cb84:	df001017 	ldw	fp,64(sp)
   1cb88:	ddc00f17 	ldw	r23,60(sp)
   1cb8c:	dd800e17 	ldw	r22,56(sp)
   1cb90:	dd400d17 	ldw	r21,52(sp)
   1cb94:	dd000c17 	ldw	r20,48(sp)
   1cb98:	dcc00b17 	ldw	r19,44(sp)
   1cb9c:	dc800a17 	ldw	r18,40(sp)
   1cba0:	dc400917 	ldw	r17,36(sp)
   1cba4:	dc000817 	ldw	r16,32(sp)
   1cba8:	dec01204 	addi	sp,sp,72
   1cbac:	f800283a 	ret
   1cbb0:	2404b03a 	or	r2,r4,r16
   1cbb4:	202b883a 	mov	r21,r4
   1cbb8:	10004426 	beq	r2,zero,1cccc <__muldf3+0x2ec>
   1cbbc:	80015126 	beq	r16,zero,1d104 <__muldf3+0x724>
   1cbc0:	8009883a 	mov	r4,r16
   1cbc4:	d9800715 	stw	r6,28(sp)
   1cbc8:	d9c00215 	stw	r7,8(sp)
   1cbcc:	da400415 	stw	r9,16(sp)
   1cbd0:	001dd4c0 	call	1dd4c <__clzsi2>
   1cbd4:	d9800717 	ldw	r6,28(sp)
   1cbd8:	d9c00217 	ldw	r7,8(sp)
   1cbdc:	da400417 	ldw	r9,16(sp)
   1cbe0:	113ffd44 	addi	r4,r2,-11
   1cbe4:	00c00704 	movi	r3,28
   1cbe8:	19014216 	blt	r3,r4,1d0f4 <__muldf3+0x714>
   1cbec:	00c00744 	movi	r3,29
   1cbf0:	15bffe04 	addi	r22,r2,-8
   1cbf4:	1907c83a 	sub	r3,r3,r4
   1cbf8:	85a0983a 	sll	r16,r16,r22
   1cbfc:	a8c6d83a 	srl	r3,r21,r3
   1cc00:	adac983a 	sll	r22,r21,r22
   1cc04:	1c20b03a 	or	r16,r3,r16
   1cc08:	1080fcc4 	addi	r2,r2,1011
   1cc0c:	00a9c83a 	sub	r20,zero,r2
   1cc10:	002b883a 	mov	r21,zero
   1cc14:	000b883a 	mov	r5,zero
   1cc18:	003f9006 	br	1ca5c <__alt_data_end+0xfc01ca5c>
   1cc1c:	3446b03a 	or	r3,r6,r17
   1cc20:	1800281e 	bne	r3,zero,1ccc4 <__muldf3+0x2e4>
   1cc24:	0023883a 	mov	r17,zero
   1cc28:	0025883a 	mov	r18,zero
   1cc2c:	01c00084 	movi	r7,2
   1cc30:	003f9c06 	br	1caa4 <__alt_data_end+0xfc01caa4>
   1cc34:	3446b03a 	or	r3,r6,r17
   1cc38:	18001e26 	beq	r3,zero,1ccb4 <__muldf3+0x2d4>
   1cc3c:	88012126 	beq	r17,zero,1d0c4 <__muldf3+0x6e4>
   1cc40:	8809883a 	mov	r4,r17
   1cc44:	d9400215 	stw	r5,8(sp)
   1cc48:	d9800715 	stw	r6,28(sp)
   1cc4c:	da400415 	stw	r9,16(sp)
   1cc50:	da800315 	stw	r10,12(sp)
   1cc54:	001dd4c0 	call	1dd4c <__clzsi2>
   1cc58:	d9400217 	ldw	r5,8(sp)
   1cc5c:	d9800717 	ldw	r6,28(sp)
   1cc60:	da400417 	ldw	r9,16(sp)
   1cc64:	da800317 	ldw	r10,12(sp)
   1cc68:	113ffd44 	addi	r4,r2,-11
   1cc6c:	00c00704 	movi	r3,28
   1cc70:	19011016 	blt	r3,r4,1d0b4 <__muldf3+0x6d4>
   1cc74:	00c00744 	movi	r3,29
   1cc78:	14bffe04 	addi	r18,r2,-8
   1cc7c:	1907c83a 	sub	r3,r3,r4
   1cc80:	8ca2983a 	sll	r17,r17,r18
   1cc84:	30c6d83a 	srl	r3,r6,r3
   1cc88:	34a4983a 	sll	r18,r6,r18
   1cc8c:	1c62b03a 	or	r17,r3,r17
   1cc90:	1080fcc4 	addi	r2,r2,1011
   1cc94:	0085c83a 	sub	r2,zero,r2
   1cc98:	000f883a 	mov	r7,zero
   1cc9c:	003f8106 	br	1caa4 <__alt_data_end+0xfc01caa4>
   1cca0:	3027883a 	mov	r19,r6
   1cca4:	0081ffc4 	movi	r2,2047
   1cca8:	0021883a 	mov	r16,zero
   1ccac:	002d883a 	mov	r22,zero
   1ccb0:	003faa06 	br	1cb5c <__alt_data_end+0xfc01cb5c>
   1ccb4:	0023883a 	mov	r17,zero
   1ccb8:	0025883a 	mov	r18,zero
   1ccbc:	01c00044 	movi	r7,1
   1ccc0:	003f7806 	br	1caa4 <__alt_data_end+0xfc01caa4>
   1ccc4:	01c000c4 	movi	r7,3
   1ccc8:	003f7606 	br	1caa4 <__alt_data_end+0xfc01caa4>
   1cccc:	05400104 	movi	r21,4
   1ccd0:	0021883a 	mov	r16,zero
   1ccd4:	002d883a 	mov	r22,zero
   1ccd8:	01400044 	movi	r5,1
   1ccdc:	003f5f06 	br	1ca5c <__alt_data_end+0xfc01ca5c>
   1cce0:	05400304 	movi	r21,12
   1cce4:	014000c4 	movi	r5,3
   1cce8:	003f5c06 	br	1ca5c <__alt_data_end+0xfc01ca5c>
   1ccec:	04000434 	movhi	r16,16
   1ccf0:	0027883a 	mov	r19,zero
   1ccf4:	843fffc4 	addi	r16,r16,-1
   1ccf8:	05bfffc4 	movi	r22,-1
   1ccfc:	0081ffc4 	movi	r2,2047
   1cd00:	003f9606 	br	1cb5c <__alt_data_end+0xfc01cb5c>
   1cd04:	8023883a 	mov	r17,r16
   1cd08:	b025883a 	mov	r18,r22
   1cd0c:	280f883a 	mov	r7,r5
   1cd10:	003f8806 	br	1cb34 <__alt_data_end+0xfc01cb34>
   1cd14:	8023883a 	mov	r17,r16
   1cd18:	b025883a 	mov	r18,r22
   1cd1c:	480d883a 	mov	r6,r9
   1cd20:	280f883a 	mov	r7,r5
   1cd24:	003f8306 	br	1cb34 <__alt_data_end+0xfc01cb34>
   1cd28:	b026d43a 	srli	r19,r22,16
   1cd2c:	902ed43a 	srli	r23,r18,16
   1cd30:	b5bfffcc 	andi	r22,r22,65535
   1cd34:	94bfffcc 	andi	r18,r18,65535
   1cd38:	b00b883a 	mov	r5,r22
   1cd3c:	9009883a 	mov	r4,r18
   1cd40:	d8c00515 	stw	r3,20(sp)
   1cd44:	d9800715 	stw	r6,28(sp)
   1cd48:	da000615 	stw	r8,24(sp)
   1cd4c:	000ccf40 	call	ccf4 <__mulsi3>
   1cd50:	980b883a 	mov	r5,r19
   1cd54:	9009883a 	mov	r4,r18
   1cd58:	1029883a 	mov	r20,r2
   1cd5c:	000ccf40 	call	ccf4 <__mulsi3>
   1cd60:	b80b883a 	mov	r5,r23
   1cd64:	9809883a 	mov	r4,r19
   1cd68:	102b883a 	mov	r21,r2
   1cd6c:	000ccf40 	call	ccf4 <__mulsi3>
   1cd70:	b809883a 	mov	r4,r23
   1cd74:	b00b883a 	mov	r5,r22
   1cd78:	1039883a 	mov	fp,r2
   1cd7c:	000ccf40 	call	ccf4 <__mulsi3>
   1cd80:	a008d43a 	srli	r4,r20,16
   1cd84:	1545883a 	add	r2,r2,r21
   1cd88:	d8c00517 	ldw	r3,20(sp)
   1cd8c:	2085883a 	add	r2,r4,r2
   1cd90:	d9800717 	ldw	r6,28(sp)
   1cd94:	da000617 	ldw	r8,24(sp)
   1cd98:	1540022e 	bgeu	r2,r21,1cda4 <__muldf3+0x3c4>
   1cd9c:	01000074 	movhi	r4,1
   1cda0:	e139883a 	add	fp,fp,r4
   1cda4:	100e943a 	slli	r7,r2,16
   1cda8:	1004d43a 	srli	r2,r2,16
   1cdac:	882ad43a 	srli	r21,r17,16
   1cdb0:	a53fffcc 	andi	r20,r20,65535
   1cdb4:	8c7fffcc 	andi	r17,r17,65535
   1cdb8:	3d29883a 	add	r20,r7,r20
   1cdbc:	b00b883a 	mov	r5,r22
   1cdc0:	8809883a 	mov	r4,r17
   1cdc4:	d8c00515 	stw	r3,20(sp)
   1cdc8:	d9800715 	stw	r6,28(sp)
   1cdcc:	da000615 	stw	r8,24(sp)
   1cdd0:	dd000115 	stw	r20,4(sp)
   1cdd4:	d8800015 	stw	r2,0(sp)
   1cdd8:	000ccf40 	call	ccf4 <__mulsi3>
   1cddc:	980b883a 	mov	r5,r19
   1cde0:	8809883a 	mov	r4,r17
   1cde4:	d8800215 	stw	r2,8(sp)
   1cde8:	000ccf40 	call	ccf4 <__mulsi3>
   1cdec:	9809883a 	mov	r4,r19
   1cdf0:	a80b883a 	mov	r5,r21
   1cdf4:	1029883a 	mov	r20,r2
   1cdf8:	000ccf40 	call	ccf4 <__mulsi3>
   1cdfc:	b00b883a 	mov	r5,r22
   1ce00:	a809883a 	mov	r4,r21
   1ce04:	d8800415 	stw	r2,16(sp)
   1ce08:	000ccf40 	call	ccf4 <__mulsi3>
   1ce0c:	d9c00217 	ldw	r7,8(sp)
   1ce10:	1505883a 	add	r2,r2,r20
   1ce14:	d8c00517 	ldw	r3,20(sp)
   1ce18:	3826d43a 	srli	r19,r7,16
   1ce1c:	d9800717 	ldw	r6,28(sp)
   1ce20:	da000617 	ldw	r8,24(sp)
   1ce24:	9885883a 	add	r2,r19,r2
   1ce28:	da400417 	ldw	r9,16(sp)
   1ce2c:	1500022e 	bgeu	r2,r20,1ce38 <__muldf3+0x458>
   1ce30:	01000074 	movhi	r4,1
   1ce34:	4913883a 	add	r9,r9,r4
   1ce38:	1028d43a 	srli	r20,r2,16
   1ce3c:	1004943a 	slli	r2,r2,16
   1ce40:	802cd43a 	srli	r22,r16,16
   1ce44:	843fffcc 	andi	r16,r16,65535
   1ce48:	3cffffcc 	andi	r19,r7,65535
   1ce4c:	9009883a 	mov	r4,r18
   1ce50:	800b883a 	mov	r5,r16
   1ce54:	a269883a 	add	r20,r20,r9
   1ce58:	d8c00515 	stw	r3,20(sp)
   1ce5c:	d9800715 	stw	r6,28(sp)
   1ce60:	da000615 	stw	r8,24(sp)
   1ce64:	14e7883a 	add	r19,r2,r19
   1ce68:	000ccf40 	call	ccf4 <__mulsi3>
   1ce6c:	9009883a 	mov	r4,r18
   1ce70:	b00b883a 	mov	r5,r22
   1ce74:	d8800315 	stw	r2,12(sp)
   1ce78:	000ccf40 	call	ccf4 <__mulsi3>
   1ce7c:	b809883a 	mov	r4,r23
   1ce80:	b00b883a 	mov	r5,r22
   1ce84:	d8800215 	stw	r2,8(sp)
   1ce88:	000ccf40 	call	ccf4 <__mulsi3>
   1ce8c:	b80b883a 	mov	r5,r23
   1ce90:	8009883a 	mov	r4,r16
   1ce94:	d8800415 	stw	r2,16(sp)
   1ce98:	000ccf40 	call	ccf4 <__mulsi3>
   1ce9c:	da800317 	ldw	r10,12(sp)
   1cea0:	d9c00217 	ldw	r7,8(sp)
   1cea4:	d9000017 	ldw	r4,0(sp)
   1cea8:	502ed43a 	srli	r23,r10,16
   1ceac:	11c5883a 	add	r2,r2,r7
   1ceb0:	24e5883a 	add	r18,r4,r19
   1ceb4:	b885883a 	add	r2,r23,r2
   1ceb8:	d8c00517 	ldw	r3,20(sp)
   1cebc:	d9800717 	ldw	r6,28(sp)
   1cec0:	da000617 	ldw	r8,24(sp)
   1cec4:	da400417 	ldw	r9,16(sp)
   1cec8:	11c0022e 	bgeu	r2,r7,1ced4 <__muldf3+0x4f4>
   1cecc:	01000074 	movhi	r4,1
   1ced0:	4913883a 	add	r9,r9,r4
   1ced4:	100ed43a 	srli	r7,r2,16
   1ced8:	1004943a 	slli	r2,r2,16
   1cedc:	55ffffcc 	andi	r23,r10,65535
   1cee0:	3a53883a 	add	r9,r7,r9
   1cee4:	8809883a 	mov	r4,r17
   1cee8:	800b883a 	mov	r5,r16
   1ceec:	d8c00515 	stw	r3,20(sp)
   1cef0:	d9800715 	stw	r6,28(sp)
   1cef4:	da000615 	stw	r8,24(sp)
   1cef8:	da400415 	stw	r9,16(sp)
   1cefc:	15ef883a 	add	r23,r2,r23
   1cf00:	000ccf40 	call	ccf4 <__mulsi3>
   1cf04:	8809883a 	mov	r4,r17
   1cf08:	b00b883a 	mov	r5,r22
   1cf0c:	d8800215 	stw	r2,8(sp)
   1cf10:	000ccf40 	call	ccf4 <__mulsi3>
   1cf14:	b00b883a 	mov	r5,r22
   1cf18:	a809883a 	mov	r4,r21
   1cf1c:	d8800315 	stw	r2,12(sp)
   1cf20:	000ccf40 	call	ccf4 <__mulsi3>
   1cf24:	8009883a 	mov	r4,r16
   1cf28:	a80b883a 	mov	r5,r21
   1cf2c:	1023883a 	mov	r17,r2
   1cf30:	000ccf40 	call	ccf4 <__mulsi3>
   1cf34:	d9c00217 	ldw	r7,8(sp)
   1cf38:	da800317 	ldw	r10,12(sp)
   1cf3c:	d8c00517 	ldw	r3,20(sp)
   1cf40:	3808d43a 	srli	r4,r7,16
   1cf44:	1285883a 	add	r2,r2,r10
   1cf48:	d9800717 	ldw	r6,28(sp)
   1cf4c:	2085883a 	add	r2,r4,r2
   1cf50:	da000617 	ldw	r8,24(sp)
   1cf54:	da400417 	ldw	r9,16(sp)
   1cf58:	1280022e 	bgeu	r2,r10,1cf64 <__muldf3+0x584>
   1cf5c:	01000074 	movhi	r4,1
   1cf60:	8923883a 	add	r17,r17,r4
   1cf64:	1008943a 	slli	r4,r2,16
   1cf68:	39ffffcc 	andi	r7,r7,65535
   1cf6c:	e4b9883a 	add	fp,fp,r18
   1cf70:	21cf883a 	add	r7,r4,r7
   1cf74:	e4e7803a 	cmpltu	r19,fp,r19
   1cf78:	3d0f883a 	add	r7,r7,r20
   1cf7c:	bf39883a 	add	fp,r23,fp
   1cf80:	99c9883a 	add	r4,r19,r7
   1cf84:	e5ef803a 	cmpltu	r23,fp,r23
   1cf88:	490b883a 	add	r5,r9,r4
   1cf8c:	1004d43a 	srli	r2,r2,16
   1cf90:	b965883a 	add	r18,r23,r5
   1cf94:	24c9803a 	cmpltu	r4,r4,r19
   1cf98:	3d29803a 	cmpltu	r20,r7,r20
   1cf9c:	a128b03a 	or	r20,r20,r4
   1cfa0:	95ef803a 	cmpltu	r23,r18,r23
   1cfa4:	2a53803a 	cmpltu	r9,r5,r9
   1cfa8:	a0a9883a 	add	r20,r20,r2
   1cfac:	4deeb03a 	or	r23,r9,r23
   1cfb0:	a5ef883a 	add	r23,r20,r23
   1cfb4:	bc63883a 	add	r17,r23,r17
   1cfb8:	e004927a 	slli	r2,fp,9
   1cfbc:	d9000117 	ldw	r4,4(sp)
   1cfc0:	882e927a 	slli	r23,r17,9
   1cfc4:	9022d5fa 	srli	r17,r18,23
   1cfc8:	e038d5fa 	srli	fp,fp,23
   1cfcc:	1104b03a 	or	r2,r2,r4
   1cfd0:	9024927a 	slli	r18,r18,9
   1cfd4:	1004c03a 	cmpne	r2,r2,zero
   1cfd8:	bc62b03a 	or	r17,r23,r17
   1cfdc:	1738b03a 	or	fp,r2,fp
   1cfe0:	8880402c 	andhi	r2,r17,256
   1cfe4:	e4a4b03a 	or	r18,fp,r18
   1cfe8:	10000726 	beq	r2,zero,1d008 <__muldf3+0x628>
   1cfec:	9006d07a 	srli	r3,r18,1
   1cff0:	880497fa 	slli	r2,r17,31
   1cff4:	9480004c 	andi	r18,r18,1
   1cff8:	8822d07a 	srli	r17,r17,1
   1cffc:	1ca4b03a 	or	r18,r3,r18
   1d000:	14a4b03a 	or	r18,r2,r18
   1d004:	4007883a 	mov	r3,r8
   1d008:	1880ffc4 	addi	r2,r3,1023
   1d00c:	0080460e 	bge	zero,r2,1d128 <__muldf3+0x748>
   1d010:	910001cc 	andi	r4,r18,7
   1d014:	20000726 	beq	r4,zero,1d034 <__muldf3+0x654>
   1d018:	910003cc 	andi	r4,r18,15
   1d01c:	01400104 	movi	r5,4
   1d020:	21400426 	beq	r4,r5,1d034 <__muldf3+0x654>
   1d024:	9149883a 	add	r4,r18,r5
   1d028:	24a5803a 	cmpltu	r18,r4,r18
   1d02c:	8ca3883a 	add	r17,r17,r18
   1d030:	2025883a 	mov	r18,r4
   1d034:	8900402c 	andhi	r4,r17,256
   1d038:	20000426 	beq	r4,zero,1d04c <__muldf3+0x66c>
   1d03c:	18810004 	addi	r2,r3,1024
   1d040:	00ffc034 	movhi	r3,65280
   1d044:	18ffffc4 	addi	r3,r3,-1
   1d048:	88e2703a 	and	r17,r17,r3
   1d04c:	00c1ff84 	movi	r3,2046
   1d050:	18bf1316 	blt	r3,r2,1cca0 <__alt_data_end+0xfc01cca0>
   1d054:	882c977a 	slli	r22,r17,29
   1d058:	9024d0fa 	srli	r18,r18,3
   1d05c:	8822927a 	slli	r17,r17,9
   1d060:	1081ffcc 	andi	r2,r2,2047
   1d064:	b4acb03a 	or	r22,r22,r18
   1d068:	8820d33a 	srli	r16,r17,12
   1d06c:	3027883a 	mov	r19,r6
   1d070:	003eba06 	br	1cb5c <__alt_data_end+0xfc01cb5c>
   1d074:	8080022c 	andhi	r2,r16,8
   1d078:	10000926 	beq	r2,zero,1d0a0 <__muldf3+0x6c0>
   1d07c:	8880022c 	andhi	r2,r17,8
   1d080:	1000071e 	bne	r2,zero,1d0a0 <__muldf3+0x6c0>
   1d084:	00800434 	movhi	r2,16
   1d088:	8c000234 	orhi	r16,r17,8
   1d08c:	10bfffc4 	addi	r2,r2,-1
   1d090:	e027883a 	mov	r19,fp
   1d094:	80a0703a 	and	r16,r16,r2
   1d098:	902d883a 	mov	r22,r18
   1d09c:	003f1706 	br	1ccfc <__alt_data_end+0xfc01ccfc>
   1d0a0:	00800434 	movhi	r2,16
   1d0a4:	84000234 	orhi	r16,r16,8
   1d0a8:	10bfffc4 	addi	r2,r2,-1
   1d0ac:	80a0703a 	and	r16,r16,r2
   1d0b0:	003f1206 	br	1ccfc <__alt_data_end+0xfc01ccfc>
   1d0b4:	147ff604 	addi	r17,r2,-40
   1d0b8:	3462983a 	sll	r17,r6,r17
   1d0bc:	0025883a 	mov	r18,zero
   1d0c0:	003ef306 	br	1cc90 <__alt_data_end+0xfc01cc90>
   1d0c4:	3009883a 	mov	r4,r6
   1d0c8:	d9400215 	stw	r5,8(sp)
   1d0cc:	d9800715 	stw	r6,28(sp)
   1d0d0:	da400415 	stw	r9,16(sp)
   1d0d4:	da800315 	stw	r10,12(sp)
   1d0d8:	001dd4c0 	call	1dd4c <__clzsi2>
   1d0dc:	10800804 	addi	r2,r2,32
   1d0e0:	da800317 	ldw	r10,12(sp)
   1d0e4:	da400417 	ldw	r9,16(sp)
   1d0e8:	d9800717 	ldw	r6,28(sp)
   1d0ec:	d9400217 	ldw	r5,8(sp)
   1d0f0:	003edd06 	br	1cc68 <__alt_data_end+0xfc01cc68>
   1d0f4:	143ff604 	addi	r16,r2,-40
   1d0f8:	ac20983a 	sll	r16,r21,r16
   1d0fc:	002d883a 	mov	r22,zero
   1d100:	003ec106 	br	1cc08 <__alt_data_end+0xfc01cc08>
   1d104:	d9800715 	stw	r6,28(sp)
   1d108:	d9c00215 	stw	r7,8(sp)
   1d10c:	da400415 	stw	r9,16(sp)
   1d110:	001dd4c0 	call	1dd4c <__clzsi2>
   1d114:	10800804 	addi	r2,r2,32
   1d118:	da400417 	ldw	r9,16(sp)
   1d11c:	d9c00217 	ldw	r7,8(sp)
   1d120:	d9800717 	ldw	r6,28(sp)
   1d124:	003eae06 	br	1cbe0 <__alt_data_end+0xfc01cbe0>
   1d128:	00c00044 	movi	r3,1
   1d12c:	1887c83a 	sub	r3,r3,r2
   1d130:	01000e04 	movi	r4,56
   1d134:	20fe8516 	blt	r4,r3,1cb4c <__alt_data_end+0xfc01cb4c>
   1d138:	010007c4 	movi	r4,31
   1d13c:	20c01b16 	blt	r4,r3,1d1ac <__muldf3+0x7cc>
   1d140:	00800804 	movi	r2,32
   1d144:	10c5c83a 	sub	r2,r2,r3
   1d148:	888a983a 	sll	r5,r17,r2
   1d14c:	90c8d83a 	srl	r4,r18,r3
   1d150:	9084983a 	sll	r2,r18,r2
   1d154:	88e2d83a 	srl	r17,r17,r3
   1d158:	2906b03a 	or	r3,r5,r4
   1d15c:	1004c03a 	cmpne	r2,r2,zero
   1d160:	1886b03a 	or	r3,r3,r2
   1d164:	188001cc 	andi	r2,r3,7
   1d168:	10000726 	beq	r2,zero,1d188 <__muldf3+0x7a8>
   1d16c:	188003cc 	andi	r2,r3,15
   1d170:	01000104 	movi	r4,4
   1d174:	11000426 	beq	r2,r4,1d188 <__muldf3+0x7a8>
   1d178:	1805883a 	mov	r2,r3
   1d17c:	10c00104 	addi	r3,r2,4
   1d180:	1885803a 	cmpltu	r2,r3,r2
   1d184:	88a3883a 	add	r17,r17,r2
   1d188:	8880202c 	andhi	r2,r17,128
   1d18c:	10001c26 	beq	r2,zero,1d200 <__muldf3+0x820>
   1d190:	3027883a 	mov	r19,r6
   1d194:	00800044 	movi	r2,1
   1d198:	0021883a 	mov	r16,zero
   1d19c:	002d883a 	mov	r22,zero
   1d1a0:	003e6e06 	br	1cb5c <__alt_data_end+0xfc01cb5c>
   1d1a4:	4007883a 	mov	r3,r8
   1d1a8:	003f9706 	br	1d008 <__alt_data_end+0xfc01d008>
   1d1ac:	017ff844 	movi	r5,-31
   1d1b0:	2885c83a 	sub	r2,r5,r2
   1d1b4:	888ad83a 	srl	r5,r17,r2
   1d1b8:	00800804 	movi	r2,32
   1d1bc:	18801a26 	beq	r3,r2,1d228 <__muldf3+0x848>
   1d1c0:	01001004 	movi	r4,64
   1d1c4:	20c7c83a 	sub	r3,r4,r3
   1d1c8:	88e2983a 	sll	r17,r17,r3
   1d1cc:	8ca4b03a 	or	r18,r17,r18
   1d1d0:	9004c03a 	cmpne	r2,r18,zero
   1d1d4:	2884b03a 	or	r2,r5,r2
   1d1d8:	144001cc 	andi	r17,r2,7
   1d1dc:	88000d1e 	bne	r17,zero,1d214 <__muldf3+0x834>
   1d1e0:	0021883a 	mov	r16,zero
   1d1e4:	102cd0fa 	srli	r22,r2,3
   1d1e8:	3027883a 	mov	r19,r6
   1d1ec:	0005883a 	mov	r2,zero
   1d1f0:	b46cb03a 	or	r22,r22,r17
   1d1f4:	003e5906 	br	1cb5c <__alt_data_end+0xfc01cb5c>
   1d1f8:	1007883a 	mov	r3,r2
   1d1fc:	0023883a 	mov	r17,zero
   1d200:	8820927a 	slli	r16,r17,9
   1d204:	1805883a 	mov	r2,r3
   1d208:	8822977a 	slli	r17,r17,29
   1d20c:	8020d33a 	srli	r16,r16,12
   1d210:	003ff406 	br	1d1e4 <__alt_data_end+0xfc01d1e4>
   1d214:	10c003cc 	andi	r3,r2,15
   1d218:	01000104 	movi	r4,4
   1d21c:	193ff626 	beq	r3,r4,1d1f8 <__alt_data_end+0xfc01d1f8>
   1d220:	0023883a 	mov	r17,zero
   1d224:	003fd506 	br	1d17c <__alt_data_end+0xfc01d17c>
   1d228:	0023883a 	mov	r17,zero
   1d22c:	003fe706 	br	1d1cc <__alt_data_end+0xfc01d1cc>
   1d230:	00800434 	movhi	r2,16
   1d234:	8c000234 	orhi	r16,r17,8
   1d238:	10bfffc4 	addi	r2,r2,-1
   1d23c:	3027883a 	mov	r19,r6
   1d240:	80a0703a 	and	r16,r16,r2
   1d244:	902d883a 	mov	r22,r18
   1d248:	003eac06 	br	1ccfc <__alt_data_end+0xfc01ccfc>

0001d24c <__subdf3>:
   1d24c:	02000434 	movhi	r8,16
   1d250:	423fffc4 	addi	r8,r8,-1
   1d254:	defffb04 	addi	sp,sp,-20
   1d258:	2a14703a 	and	r10,r5,r8
   1d25c:	3812d53a 	srli	r9,r7,20
   1d260:	3a10703a 	and	r8,r7,r8
   1d264:	2006d77a 	srli	r3,r4,29
   1d268:	3004d77a 	srli	r2,r6,29
   1d26c:	dc000015 	stw	r16,0(sp)
   1d270:	501490fa 	slli	r10,r10,3
   1d274:	2820d53a 	srli	r16,r5,20
   1d278:	401090fa 	slli	r8,r8,3
   1d27c:	dc800215 	stw	r18,8(sp)
   1d280:	dc400115 	stw	r17,4(sp)
   1d284:	dfc00415 	stw	ra,16(sp)
   1d288:	202290fa 	slli	r17,r4,3
   1d28c:	dcc00315 	stw	r19,12(sp)
   1d290:	4a41ffcc 	andi	r9,r9,2047
   1d294:	0101ffc4 	movi	r4,2047
   1d298:	2824d7fa 	srli	r18,r5,31
   1d29c:	8401ffcc 	andi	r16,r16,2047
   1d2a0:	50c6b03a 	or	r3,r10,r3
   1d2a4:	380ed7fa 	srli	r7,r7,31
   1d2a8:	408ab03a 	or	r5,r8,r2
   1d2ac:	300c90fa 	slli	r6,r6,3
   1d2b0:	49009626 	beq	r9,r4,1d50c <__subdf3+0x2c0>
   1d2b4:	39c0005c 	xori	r7,r7,1
   1d2b8:	8245c83a 	sub	r2,r16,r9
   1d2bc:	3c807426 	beq	r7,r18,1d490 <__subdf3+0x244>
   1d2c0:	0080af0e 	bge	zero,r2,1d580 <__subdf3+0x334>
   1d2c4:	48002a1e 	bne	r9,zero,1d370 <__subdf3+0x124>
   1d2c8:	2988b03a 	or	r4,r5,r6
   1d2cc:	20009a1e 	bne	r4,zero,1d538 <__subdf3+0x2ec>
   1d2d0:	888001cc 	andi	r2,r17,7
   1d2d4:	10000726 	beq	r2,zero,1d2f4 <__subdf3+0xa8>
   1d2d8:	888003cc 	andi	r2,r17,15
   1d2dc:	01000104 	movi	r4,4
   1d2e0:	11000426 	beq	r2,r4,1d2f4 <__subdf3+0xa8>
   1d2e4:	890b883a 	add	r5,r17,r4
   1d2e8:	2c63803a 	cmpltu	r17,r5,r17
   1d2ec:	1c47883a 	add	r3,r3,r17
   1d2f0:	2823883a 	mov	r17,r5
   1d2f4:	1880202c 	andhi	r2,r3,128
   1d2f8:	10005926 	beq	r2,zero,1d460 <__subdf3+0x214>
   1d2fc:	84000044 	addi	r16,r16,1
   1d300:	0081ffc4 	movi	r2,2047
   1d304:	8080be26 	beq	r16,r2,1d600 <__subdf3+0x3b4>
   1d308:	017fe034 	movhi	r5,65408
   1d30c:	297fffc4 	addi	r5,r5,-1
   1d310:	1946703a 	and	r3,r3,r5
   1d314:	1804977a 	slli	r2,r3,29
   1d318:	1806927a 	slli	r3,r3,9
   1d31c:	8822d0fa 	srli	r17,r17,3
   1d320:	8401ffcc 	andi	r16,r16,2047
   1d324:	180ad33a 	srli	r5,r3,12
   1d328:	9100004c 	andi	r4,r18,1
   1d32c:	1444b03a 	or	r2,r2,r17
   1d330:	80c1ffcc 	andi	r3,r16,2047
   1d334:	1820953a 	slli	r16,r3,20
   1d338:	20c03fcc 	andi	r3,r4,255
   1d33c:	180897fa 	slli	r4,r3,31
   1d340:	00c00434 	movhi	r3,16
   1d344:	18ffffc4 	addi	r3,r3,-1
   1d348:	28c6703a 	and	r3,r5,r3
   1d34c:	1c06b03a 	or	r3,r3,r16
   1d350:	1906b03a 	or	r3,r3,r4
   1d354:	dfc00417 	ldw	ra,16(sp)
   1d358:	dcc00317 	ldw	r19,12(sp)
   1d35c:	dc800217 	ldw	r18,8(sp)
   1d360:	dc400117 	ldw	r17,4(sp)
   1d364:	dc000017 	ldw	r16,0(sp)
   1d368:	dec00504 	addi	sp,sp,20
   1d36c:	f800283a 	ret
   1d370:	0101ffc4 	movi	r4,2047
   1d374:	813fd626 	beq	r16,r4,1d2d0 <__alt_data_end+0xfc01d2d0>
   1d378:	29402034 	orhi	r5,r5,128
   1d37c:	01000e04 	movi	r4,56
   1d380:	2080a316 	blt	r4,r2,1d610 <__subdf3+0x3c4>
   1d384:	010007c4 	movi	r4,31
   1d388:	2080c616 	blt	r4,r2,1d6a4 <__subdf3+0x458>
   1d38c:	01000804 	movi	r4,32
   1d390:	2089c83a 	sub	r4,r4,r2
   1d394:	2910983a 	sll	r8,r5,r4
   1d398:	308ed83a 	srl	r7,r6,r2
   1d39c:	3108983a 	sll	r4,r6,r4
   1d3a0:	2884d83a 	srl	r2,r5,r2
   1d3a4:	41ccb03a 	or	r6,r8,r7
   1d3a8:	2008c03a 	cmpne	r4,r4,zero
   1d3ac:	310cb03a 	or	r6,r6,r4
   1d3b0:	898dc83a 	sub	r6,r17,r6
   1d3b4:	89a3803a 	cmpltu	r17,r17,r6
   1d3b8:	1887c83a 	sub	r3,r3,r2
   1d3bc:	1c47c83a 	sub	r3,r3,r17
   1d3c0:	3023883a 	mov	r17,r6
   1d3c4:	1880202c 	andhi	r2,r3,128
   1d3c8:	10002326 	beq	r2,zero,1d458 <__subdf3+0x20c>
   1d3cc:	04c02034 	movhi	r19,128
   1d3d0:	9cffffc4 	addi	r19,r19,-1
   1d3d4:	1ce6703a 	and	r19,r3,r19
   1d3d8:	98007a26 	beq	r19,zero,1d5c4 <__subdf3+0x378>
   1d3dc:	9809883a 	mov	r4,r19
   1d3e0:	001dd4c0 	call	1dd4c <__clzsi2>
   1d3e4:	113ffe04 	addi	r4,r2,-8
   1d3e8:	00c007c4 	movi	r3,31
   1d3ec:	19007b16 	blt	r3,r4,1d5dc <__subdf3+0x390>
   1d3f0:	00800804 	movi	r2,32
   1d3f4:	1105c83a 	sub	r2,r2,r4
   1d3f8:	8884d83a 	srl	r2,r17,r2
   1d3fc:	9906983a 	sll	r3,r19,r4
   1d400:	8922983a 	sll	r17,r17,r4
   1d404:	10c4b03a 	or	r2,r2,r3
   1d408:	24007816 	blt	r4,r16,1d5ec <__subdf3+0x3a0>
   1d40c:	2421c83a 	sub	r16,r4,r16
   1d410:	80c00044 	addi	r3,r16,1
   1d414:	010007c4 	movi	r4,31
   1d418:	20c09516 	blt	r4,r3,1d670 <__subdf3+0x424>
   1d41c:	01400804 	movi	r5,32
   1d420:	28cbc83a 	sub	r5,r5,r3
   1d424:	88c8d83a 	srl	r4,r17,r3
   1d428:	8962983a 	sll	r17,r17,r5
   1d42c:	114a983a 	sll	r5,r2,r5
   1d430:	10c6d83a 	srl	r3,r2,r3
   1d434:	8804c03a 	cmpne	r2,r17,zero
   1d438:	290ab03a 	or	r5,r5,r4
   1d43c:	28a2b03a 	or	r17,r5,r2
   1d440:	0021883a 	mov	r16,zero
   1d444:	003fa206 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d448:	2090b03a 	or	r8,r4,r2
   1d44c:	40018e26 	beq	r8,zero,1da88 <__subdf3+0x83c>
   1d450:	1007883a 	mov	r3,r2
   1d454:	2023883a 	mov	r17,r4
   1d458:	888001cc 	andi	r2,r17,7
   1d45c:	103f9e1e 	bne	r2,zero,1d2d8 <__alt_data_end+0xfc01d2d8>
   1d460:	1804977a 	slli	r2,r3,29
   1d464:	8822d0fa 	srli	r17,r17,3
   1d468:	1810d0fa 	srli	r8,r3,3
   1d46c:	9100004c 	andi	r4,r18,1
   1d470:	1444b03a 	or	r2,r2,r17
   1d474:	00c1ffc4 	movi	r3,2047
   1d478:	80c02826 	beq	r16,r3,1d51c <__subdf3+0x2d0>
   1d47c:	01400434 	movhi	r5,16
   1d480:	297fffc4 	addi	r5,r5,-1
   1d484:	80e0703a 	and	r16,r16,r3
   1d488:	414a703a 	and	r5,r8,r5
   1d48c:	003fa806 	br	1d330 <__alt_data_end+0xfc01d330>
   1d490:	0080630e 	bge	zero,r2,1d620 <__subdf3+0x3d4>
   1d494:	48003026 	beq	r9,zero,1d558 <__subdf3+0x30c>
   1d498:	0101ffc4 	movi	r4,2047
   1d49c:	813f8c26 	beq	r16,r4,1d2d0 <__alt_data_end+0xfc01d2d0>
   1d4a0:	29402034 	orhi	r5,r5,128
   1d4a4:	01000e04 	movi	r4,56
   1d4a8:	2080a90e 	bge	r4,r2,1d750 <__subdf3+0x504>
   1d4ac:	298cb03a 	or	r6,r5,r6
   1d4b0:	3012c03a 	cmpne	r9,r6,zero
   1d4b4:	0005883a 	mov	r2,zero
   1d4b8:	4c53883a 	add	r9,r9,r17
   1d4bc:	4c63803a 	cmpltu	r17,r9,r17
   1d4c0:	10c7883a 	add	r3,r2,r3
   1d4c4:	88c7883a 	add	r3,r17,r3
   1d4c8:	4823883a 	mov	r17,r9
   1d4cc:	1880202c 	andhi	r2,r3,128
   1d4d0:	1000d026 	beq	r2,zero,1d814 <__subdf3+0x5c8>
   1d4d4:	84000044 	addi	r16,r16,1
   1d4d8:	0081ffc4 	movi	r2,2047
   1d4dc:	8080fe26 	beq	r16,r2,1d8d8 <__subdf3+0x68c>
   1d4e0:	00bfe034 	movhi	r2,65408
   1d4e4:	10bfffc4 	addi	r2,r2,-1
   1d4e8:	1886703a 	and	r3,r3,r2
   1d4ec:	880ad07a 	srli	r5,r17,1
   1d4f0:	180497fa 	slli	r2,r3,31
   1d4f4:	8900004c 	andi	r4,r17,1
   1d4f8:	2922b03a 	or	r17,r5,r4
   1d4fc:	1806d07a 	srli	r3,r3,1
   1d500:	1462b03a 	or	r17,r2,r17
   1d504:	3825883a 	mov	r18,r7
   1d508:	003f7106 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d50c:	2984b03a 	or	r2,r5,r6
   1d510:	103f6826 	beq	r2,zero,1d2b4 <__alt_data_end+0xfc01d2b4>
   1d514:	39c03fcc 	andi	r7,r7,255
   1d518:	003f6706 	br	1d2b8 <__alt_data_end+0xfc01d2b8>
   1d51c:	4086b03a 	or	r3,r8,r2
   1d520:	18015226 	beq	r3,zero,1da6c <__subdf3+0x820>
   1d524:	00c00434 	movhi	r3,16
   1d528:	41400234 	orhi	r5,r8,8
   1d52c:	18ffffc4 	addi	r3,r3,-1
   1d530:	28ca703a 	and	r5,r5,r3
   1d534:	003f7e06 	br	1d330 <__alt_data_end+0xfc01d330>
   1d538:	10bfffc4 	addi	r2,r2,-1
   1d53c:	1000491e 	bne	r2,zero,1d664 <__subdf3+0x418>
   1d540:	898fc83a 	sub	r7,r17,r6
   1d544:	89e3803a 	cmpltu	r17,r17,r7
   1d548:	1947c83a 	sub	r3,r3,r5
   1d54c:	1c47c83a 	sub	r3,r3,r17
   1d550:	3823883a 	mov	r17,r7
   1d554:	003f9b06 	br	1d3c4 <__alt_data_end+0xfc01d3c4>
   1d558:	2988b03a 	or	r4,r5,r6
   1d55c:	203f5c26 	beq	r4,zero,1d2d0 <__alt_data_end+0xfc01d2d0>
   1d560:	10bfffc4 	addi	r2,r2,-1
   1d564:	1000931e 	bne	r2,zero,1d7b4 <__subdf3+0x568>
   1d568:	898d883a 	add	r6,r17,r6
   1d56c:	3463803a 	cmpltu	r17,r6,r17
   1d570:	1947883a 	add	r3,r3,r5
   1d574:	88c7883a 	add	r3,r17,r3
   1d578:	3023883a 	mov	r17,r6
   1d57c:	003fd306 	br	1d4cc <__alt_data_end+0xfc01d4cc>
   1d580:	1000541e 	bne	r2,zero,1d6d4 <__subdf3+0x488>
   1d584:	80800044 	addi	r2,r16,1
   1d588:	1081ffcc 	andi	r2,r2,2047
   1d58c:	01000044 	movi	r4,1
   1d590:	2080a20e 	bge	r4,r2,1d81c <__subdf3+0x5d0>
   1d594:	8989c83a 	sub	r4,r17,r6
   1d598:	8905803a 	cmpltu	r2,r17,r4
   1d59c:	1967c83a 	sub	r19,r3,r5
   1d5a0:	98a7c83a 	sub	r19,r19,r2
   1d5a4:	9880202c 	andhi	r2,r19,128
   1d5a8:	10006326 	beq	r2,zero,1d738 <__subdf3+0x4ec>
   1d5ac:	3463c83a 	sub	r17,r6,r17
   1d5b0:	28c7c83a 	sub	r3,r5,r3
   1d5b4:	344d803a 	cmpltu	r6,r6,r17
   1d5b8:	19a7c83a 	sub	r19,r3,r6
   1d5bc:	3825883a 	mov	r18,r7
   1d5c0:	983f861e 	bne	r19,zero,1d3dc <__alt_data_end+0xfc01d3dc>
   1d5c4:	8809883a 	mov	r4,r17
   1d5c8:	001dd4c0 	call	1dd4c <__clzsi2>
   1d5cc:	10800804 	addi	r2,r2,32
   1d5d0:	113ffe04 	addi	r4,r2,-8
   1d5d4:	00c007c4 	movi	r3,31
   1d5d8:	193f850e 	bge	r3,r4,1d3f0 <__alt_data_end+0xfc01d3f0>
   1d5dc:	10bff604 	addi	r2,r2,-40
   1d5e0:	8884983a 	sll	r2,r17,r2
   1d5e4:	0023883a 	mov	r17,zero
   1d5e8:	243f880e 	bge	r4,r16,1d40c <__alt_data_end+0xfc01d40c>
   1d5ec:	00ffe034 	movhi	r3,65408
   1d5f0:	18ffffc4 	addi	r3,r3,-1
   1d5f4:	8121c83a 	sub	r16,r16,r4
   1d5f8:	10c6703a 	and	r3,r2,r3
   1d5fc:	003f3406 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d600:	9100004c 	andi	r4,r18,1
   1d604:	000b883a 	mov	r5,zero
   1d608:	0005883a 	mov	r2,zero
   1d60c:	003f4806 	br	1d330 <__alt_data_end+0xfc01d330>
   1d610:	298cb03a 	or	r6,r5,r6
   1d614:	300cc03a 	cmpne	r6,r6,zero
   1d618:	0005883a 	mov	r2,zero
   1d61c:	003f6406 	br	1d3b0 <__alt_data_end+0xfc01d3b0>
   1d620:	10009a1e 	bne	r2,zero,1d88c <__subdf3+0x640>
   1d624:	82400044 	addi	r9,r16,1
   1d628:	4881ffcc 	andi	r2,r9,2047
   1d62c:	02800044 	movi	r10,1
   1d630:	5080670e 	bge	r10,r2,1d7d0 <__subdf3+0x584>
   1d634:	0081ffc4 	movi	r2,2047
   1d638:	4880af26 	beq	r9,r2,1d8f8 <__subdf3+0x6ac>
   1d63c:	898d883a 	add	r6,r17,r6
   1d640:	1945883a 	add	r2,r3,r5
   1d644:	3447803a 	cmpltu	r3,r6,r17
   1d648:	1887883a 	add	r3,r3,r2
   1d64c:	182297fa 	slli	r17,r3,31
   1d650:	300cd07a 	srli	r6,r6,1
   1d654:	1806d07a 	srli	r3,r3,1
   1d658:	4821883a 	mov	r16,r9
   1d65c:	89a2b03a 	or	r17,r17,r6
   1d660:	003f1b06 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d664:	0101ffc4 	movi	r4,2047
   1d668:	813f441e 	bne	r16,r4,1d37c <__alt_data_end+0xfc01d37c>
   1d66c:	003f1806 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d670:	843ff844 	addi	r16,r16,-31
   1d674:	01400804 	movi	r5,32
   1d678:	1408d83a 	srl	r4,r2,r16
   1d67c:	19405026 	beq	r3,r5,1d7c0 <__subdf3+0x574>
   1d680:	01401004 	movi	r5,64
   1d684:	28c7c83a 	sub	r3,r5,r3
   1d688:	10c4983a 	sll	r2,r2,r3
   1d68c:	88a2b03a 	or	r17,r17,r2
   1d690:	8822c03a 	cmpne	r17,r17,zero
   1d694:	2462b03a 	or	r17,r4,r17
   1d698:	0007883a 	mov	r3,zero
   1d69c:	0021883a 	mov	r16,zero
   1d6a0:	003f6d06 	br	1d458 <__alt_data_end+0xfc01d458>
   1d6a4:	11fff804 	addi	r7,r2,-32
   1d6a8:	01000804 	movi	r4,32
   1d6ac:	29ced83a 	srl	r7,r5,r7
   1d6b0:	11004526 	beq	r2,r4,1d7c8 <__subdf3+0x57c>
   1d6b4:	01001004 	movi	r4,64
   1d6b8:	2089c83a 	sub	r4,r4,r2
   1d6bc:	2904983a 	sll	r2,r5,r4
   1d6c0:	118cb03a 	or	r6,r2,r6
   1d6c4:	300cc03a 	cmpne	r6,r6,zero
   1d6c8:	398cb03a 	or	r6,r7,r6
   1d6cc:	0005883a 	mov	r2,zero
   1d6d0:	003f3706 	br	1d3b0 <__alt_data_end+0xfc01d3b0>
   1d6d4:	80002a26 	beq	r16,zero,1d780 <__subdf3+0x534>
   1d6d8:	0101ffc4 	movi	r4,2047
   1d6dc:	49006626 	beq	r9,r4,1d878 <__subdf3+0x62c>
   1d6e0:	0085c83a 	sub	r2,zero,r2
   1d6e4:	18c02034 	orhi	r3,r3,128
   1d6e8:	01000e04 	movi	r4,56
   1d6ec:	20807e16 	blt	r4,r2,1d8e8 <__subdf3+0x69c>
   1d6f0:	010007c4 	movi	r4,31
   1d6f4:	2080e716 	blt	r4,r2,1da94 <__subdf3+0x848>
   1d6f8:	01000804 	movi	r4,32
   1d6fc:	2089c83a 	sub	r4,r4,r2
   1d700:	1914983a 	sll	r10,r3,r4
   1d704:	8890d83a 	srl	r8,r17,r2
   1d708:	8908983a 	sll	r4,r17,r4
   1d70c:	1884d83a 	srl	r2,r3,r2
   1d710:	5222b03a 	or	r17,r10,r8
   1d714:	2006c03a 	cmpne	r3,r4,zero
   1d718:	88e2b03a 	or	r17,r17,r3
   1d71c:	3463c83a 	sub	r17,r6,r17
   1d720:	2885c83a 	sub	r2,r5,r2
   1d724:	344d803a 	cmpltu	r6,r6,r17
   1d728:	1187c83a 	sub	r3,r2,r6
   1d72c:	4821883a 	mov	r16,r9
   1d730:	3825883a 	mov	r18,r7
   1d734:	003f2306 	br	1d3c4 <__alt_data_end+0xfc01d3c4>
   1d738:	24d0b03a 	or	r8,r4,r19
   1d73c:	40001b1e 	bne	r8,zero,1d7ac <__subdf3+0x560>
   1d740:	0005883a 	mov	r2,zero
   1d744:	0009883a 	mov	r4,zero
   1d748:	0021883a 	mov	r16,zero
   1d74c:	003f4906 	br	1d474 <__alt_data_end+0xfc01d474>
   1d750:	010007c4 	movi	r4,31
   1d754:	20803a16 	blt	r4,r2,1d840 <__subdf3+0x5f4>
   1d758:	01000804 	movi	r4,32
   1d75c:	2089c83a 	sub	r4,r4,r2
   1d760:	2912983a 	sll	r9,r5,r4
   1d764:	3090d83a 	srl	r8,r6,r2
   1d768:	3108983a 	sll	r4,r6,r4
   1d76c:	2884d83a 	srl	r2,r5,r2
   1d770:	4a12b03a 	or	r9,r9,r8
   1d774:	2008c03a 	cmpne	r4,r4,zero
   1d778:	4912b03a 	or	r9,r9,r4
   1d77c:	003f4e06 	br	1d4b8 <__alt_data_end+0xfc01d4b8>
   1d780:	1c48b03a 	or	r4,r3,r17
   1d784:	20003c26 	beq	r4,zero,1d878 <__subdf3+0x62c>
   1d788:	0084303a 	nor	r2,zero,r2
   1d78c:	1000381e 	bne	r2,zero,1d870 <__subdf3+0x624>
   1d790:	3463c83a 	sub	r17,r6,r17
   1d794:	28c5c83a 	sub	r2,r5,r3
   1d798:	344d803a 	cmpltu	r6,r6,r17
   1d79c:	1187c83a 	sub	r3,r2,r6
   1d7a0:	4821883a 	mov	r16,r9
   1d7a4:	3825883a 	mov	r18,r7
   1d7a8:	003f0606 	br	1d3c4 <__alt_data_end+0xfc01d3c4>
   1d7ac:	2023883a 	mov	r17,r4
   1d7b0:	003f0906 	br	1d3d8 <__alt_data_end+0xfc01d3d8>
   1d7b4:	0101ffc4 	movi	r4,2047
   1d7b8:	813f3a1e 	bne	r16,r4,1d4a4 <__alt_data_end+0xfc01d4a4>
   1d7bc:	003ec406 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d7c0:	0005883a 	mov	r2,zero
   1d7c4:	003fb106 	br	1d68c <__alt_data_end+0xfc01d68c>
   1d7c8:	0005883a 	mov	r2,zero
   1d7cc:	003fbc06 	br	1d6c0 <__alt_data_end+0xfc01d6c0>
   1d7d0:	1c44b03a 	or	r2,r3,r17
   1d7d4:	80008e1e 	bne	r16,zero,1da10 <__subdf3+0x7c4>
   1d7d8:	1000c826 	beq	r2,zero,1dafc <__subdf3+0x8b0>
   1d7dc:	2984b03a 	or	r2,r5,r6
   1d7e0:	103ebb26 	beq	r2,zero,1d2d0 <__alt_data_end+0xfc01d2d0>
   1d7e4:	8989883a 	add	r4,r17,r6
   1d7e8:	1945883a 	add	r2,r3,r5
   1d7ec:	2447803a 	cmpltu	r3,r4,r17
   1d7f0:	1887883a 	add	r3,r3,r2
   1d7f4:	1880202c 	andhi	r2,r3,128
   1d7f8:	2023883a 	mov	r17,r4
   1d7fc:	103f1626 	beq	r2,zero,1d458 <__alt_data_end+0xfc01d458>
   1d800:	00bfe034 	movhi	r2,65408
   1d804:	10bfffc4 	addi	r2,r2,-1
   1d808:	5021883a 	mov	r16,r10
   1d80c:	1886703a 	and	r3,r3,r2
   1d810:	003eaf06 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d814:	3825883a 	mov	r18,r7
   1d818:	003f0f06 	br	1d458 <__alt_data_end+0xfc01d458>
   1d81c:	1c44b03a 	or	r2,r3,r17
   1d820:	8000251e 	bne	r16,zero,1d8b8 <__subdf3+0x66c>
   1d824:	1000661e 	bne	r2,zero,1d9c0 <__subdf3+0x774>
   1d828:	2990b03a 	or	r8,r5,r6
   1d82c:	40009626 	beq	r8,zero,1da88 <__subdf3+0x83c>
   1d830:	2807883a 	mov	r3,r5
   1d834:	3023883a 	mov	r17,r6
   1d838:	3825883a 	mov	r18,r7
   1d83c:	003ea406 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d840:	127ff804 	addi	r9,r2,-32
   1d844:	01000804 	movi	r4,32
   1d848:	2a52d83a 	srl	r9,r5,r9
   1d84c:	11008c26 	beq	r2,r4,1da80 <__subdf3+0x834>
   1d850:	01001004 	movi	r4,64
   1d854:	2085c83a 	sub	r2,r4,r2
   1d858:	2884983a 	sll	r2,r5,r2
   1d85c:	118cb03a 	or	r6,r2,r6
   1d860:	300cc03a 	cmpne	r6,r6,zero
   1d864:	4992b03a 	or	r9,r9,r6
   1d868:	0005883a 	mov	r2,zero
   1d86c:	003f1206 	br	1d4b8 <__alt_data_end+0xfc01d4b8>
   1d870:	0101ffc4 	movi	r4,2047
   1d874:	493f9c1e 	bne	r9,r4,1d6e8 <__alt_data_end+0xfc01d6e8>
   1d878:	2807883a 	mov	r3,r5
   1d87c:	3023883a 	mov	r17,r6
   1d880:	4821883a 	mov	r16,r9
   1d884:	3825883a 	mov	r18,r7
   1d888:	003e9106 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d88c:	80001f1e 	bne	r16,zero,1d90c <__subdf3+0x6c0>
   1d890:	1c48b03a 	or	r4,r3,r17
   1d894:	20005a26 	beq	r4,zero,1da00 <__subdf3+0x7b4>
   1d898:	0084303a 	nor	r2,zero,r2
   1d89c:	1000561e 	bne	r2,zero,1d9f8 <__subdf3+0x7ac>
   1d8a0:	89a3883a 	add	r17,r17,r6
   1d8a4:	1945883a 	add	r2,r3,r5
   1d8a8:	898d803a 	cmpltu	r6,r17,r6
   1d8ac:	3087883a 	add	r3,r6,r2
   1d8b0:	4821883a 	mov	r16,r9
   1d8b4:	003f0506 	br	1d4cc <__alt_data_end+0xfc01d4cc>
   1d8b8:	10002b1e 	bne	r2,zero,1d968 <__subdf3+0x71c>
   1d8bc:	2984b03a 	or	r2,r5,r6
   1d8c0:	10008026 	beq	r2,zero,1dac4 <__subdf3+0x878>
   1d8c4:	2807883a 	mov	r3,r5
   1d8c8:	3023883a 	mov	r17,r6
   1d8cc:	3825883a 	mov	r18,r7
   1d8d0:	0401ffc4 	movi	r16,2047
   1d8d4:	003e7e06 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d8d8:	3809883a 	mov	r4,r7
   1d8dc:	0011883a 	mov	r8,zero
   1d8e0:	0005883a 	mov	r2,zero
   1d8e4:	003ee306 	br	1d474 <__alt_data_end+0xfc01d474>
   1d8e8:	1c62b03a 	or	r17,r3,r17
   1d8ec:	8822c03a 	cmpne	r17,r17,zero
   1d8f0:	0005883a 	mov	r2,zero
   1d8f4:	003f8906 	br	1d71c <__alt_data_end+0xfc01d71c>
   1d8f8:	3809883a 	mov	r4,r7
   1d8fc:	4821883a 	mov	r16,r9
   1d900:	0011883a 	mov	r8,zero
   1d904:	0005883a 	mov	r2,zero
   1d908:	003eda06 	br	1d474 <__alt_data_end+0xfc01d474>
   1d90c:	0101ffc4 	movi	r4,2047
   1d910:	49003b26 	beq	r9,r4,1da00 <__subdf3+0x7b4>
   1d914:	0085c83a 	sub	r2,zero,r2
   1d918:	18c02034 	orhi	r3,r3,128
   1d91c:	01000e04 	movi	r4,56
   1d920:	20806e16 	blt	r4,r2,1dadc <__subdf3+0x890>
   1d924:	010007c4 	movi	r4,31
   1d928:	20807716 	blt	r4,r2,1db08 <__subdf3+0x8bc>
   1d92c:	01000804 	movi	r4,32
   1d930:	2089c83a 	sub	r4,r4,r2
   1d934:	1914983a 	sll	r10,r3,r4
   1d938:	8890d83a 	srl	r8,r17,r2
   1d93c:	8908983a 	sll	r4,r17,r4
   1d940:	1884d83a 	srl	r2,r3,r2
   1d944:	5222b03a 	or	r17,r10,r8
   1d948:	2006c03a 	cmpne	r3,r4,zero
   1d94c:	88e2b03a 	or	r17,r17,r3
   1d950:	89a3883a 	add	r17,r17,r6
   1d954:	1145883a 	add	r2,r2,r5
   1d958:	898d803a 	cmpltu	r6,r17,r6
   1d95c:	3087883a 	add	r3,r6,r2
   1d960:	4821883a 	mov	r16,r9
   1d964:	003ed906 	br	1d4cc <__alt_data_end+0xfc01d4cc>
   1d968:	2984b03a 	or	r2,r5,r6
   1d96c:	10004226 	beq	r2,zero,1da78 <__subdf3+0x82c>
   1d970:	1808d0fa 	srli	r4,r3,3
   1d974:	8822d0fa 	srli	r17,r17,3
   1d978:	1806977a 	slli	r3,r3,29
   1d97c:	2080022c 	andhi	r2,r4,8
   1d980:	1c62b03a 	or	r17,r3,r17
   1d984:	10000826 	beq	r2,zero,1d9a8 <__subdf3+0x75c>
   1d988:	2812d0fa 	srli	r9,r5,3
   1d98c:	4880022c 	andhi	r2,r9,8
   1d990:	1000051e 	bne	r2,zero,1d9a8 <__subdf3+0x75c>
   1d994:	300cd0fa 	srli	r6,r6,3
   1d998:	2804977a 	slli	r2,r5,29
   1d99c:	4809883a 	mov	r4,r9
   1d9a0:	3825883a 	mov	r18,r7
   1d9a4:	11a2b03a 	or	r17,r2,r6
   1d9a8:	8806d77a 	srli	r3,r17,29
   1d9ac:	200890fa 	slli	r4,r4,3
   1d9b0:	882290fa 	slli	r17,r17,3
   1d9b4:	0401ffc4 	movi	r16,2047
   1d9b8:	1906b03a 	or	r3,r3,r4
   1d9bc:	003e4406 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d9c0:	2984b03a 	or	r2,r5,r6
   1d9c4:	103e4226 	beq	r2,zero,1d2d0 <__alt_data_end+0xfc01d2d0>
   1d9c8:	8989c83a 	sub	r4,r17,r6
   1d9cc:	8911803a 	cmpltu	r8,r17,r4
   1d9d0:	1945c83a 	sub	r2,r3,r5
   1d9d4:	1205c83a 	sub	r2,r2,r8
   1d9d8:	1200202c 	andhi	r8,r2,128
   1d9dc:	403e9a26 	beq	r8,zero,1d448 <__alt_data_end+0xfc01d448>
   1d9e0:	3463c83a 	sub	r17,r6,r17
   1d9e4:	28c5c83a 	sub	r2,r5,r3
   1d9e8:	344d803a 	cmpltu	r6,r6,r17
   1d9ec:	1187c83a 	sub	r3,r2,r6
   1d9f0:	3825883a 	mov	r18,r7
   1d9f4:	003e3606 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1d9f8:	0101ffc4 	movi	r4,2047
   1d9fc:	493fc71e 	bne	r9,r4,1d91c <__alt_data_end+0xfc01d91c>
   1da00:	2807883a 	mov	r3,r5
   1da04:	3023883a 	mov	r17,r6
   1da08:	4821883a 	mov	r16,r9
   1da0c:	003e3006 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1da10:	10003626 	beq	r2,zero,1daec <__subdf3+0x8a0>
   1da14:	2984b03a 	or	r2,r5,r6
   1da18:	10001726 	beq	r2,zero,1da78 <__subdf3+0x82c>
   1da1c:	1808d0fa 	srli	r4,r3,3
   1da20:	8822d0fa 	srli	r17,r17,3
   1da24:	1806977a 	slli	r3,r3,29
   1da28:	2080022c 	andhi	r2,r4,8
   1da2c:	1c62b03a 	or	r17,r3,r17
   1da30:	10000726 	beq	r2,zero,1da50 <__subdf3+0x804>
   1da34:	2812d0fa 	srli	r9,r5,3
   1da38:	4880022c 	andhi	r2,r9,8
   1da3c:	1000041e 	bne	r2,zero,1da50 <__subdf3+0x804>
   1da40:	300cd0fa 	srli	r6,r6,3
   1da44:	2804977a 	slli	r2,r5,29
   1da48:	4809883a 	mov	r4,r9
   1da4c:	11a2b03a 	or	r17,r2,r6
   1da50:	8806d77a 	srli	r3,r17,29
   1da54:	200890fa 	slli	r4,r4,3
   1da58:	882290fa 	slli	r17,r17,3
   1da5c:	3825883a 	mov	r18,r7
   1da60:	1906b03a 	or	r3,r3,r4
   1da64:	0401ffc4 	movi	r16,2047
   1da68:	003e1906 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1da6c:	000b883a 	mov	r5,zero
   1da70:	0005883a 	mov	r2,zero
   1da74:	003e2e06 	br	1d330 <__alt_data_end+0xfc01d330>
   1da78:	0401ffc4 	movi	r16,2047
   1da7c:	003e1406 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1da80:	0005883a 	mov	r2,zero
   1da84:	003f7506 	br	1d85c <__alt_data_end+0xfc01d85c>
   1da88:	0005883a 	mov	r2,zero
   1da8c:	0009883a 	mov	r4,zero
   1da90:	003e7806 	br	1d474 <__alt_data_end+0xfc01d474>
   1da94:	123ff804 	addi	r8,r2,-32
   1da98:	01000804 	movi	r4,32
   1da9c:	1a10d83a 	srl	r8,r3,r8
   1daa0:	11002526 	beq	r2,r4,1db38 <__subdf3+0x8ec>
   1daa4:	01001004 	movi	r4,64
   1daa8:	2085c83a 	sub	r2,r4,r2
   1daac:	1884983a 	sll	r2,r3,r2
   1dab0:	1444b03a 	or	r2,r2,r17
   1dab4:	1004c03a 	cmpne	r2,r2,zero
   1dab8:	40a2b03a 	or	r17,r8,r2
   1dabc:	0005883a 	mov	r2,zero
   1dac0:	003f1606 	br	1d71c <__alt_data_end+0xfc01d71c>
   1dac4:	02000434 	movhi	r8,16
   1dac8:	0009883a 	mov	r4,zero
   1dacc:	423fffc4 	addi	r8,r8,-1
   1dad0:	00bfffc4 	movi	r2,-1
   1dad4:	0401ffc4 	movi	r16,2047
   1dad8:	003e6606 	br	1d474 <__alt_data_end+0xfc01d474>
   1dadc:	1c62b03a 	or	r17,r3,r17
   1dae0:	8822c03a 	cmpne	r17,r17,zero
   1dae4:	0005883a 	mov	r2,zero
   1dae8:	003f9906 	br	1d950 <__alt_data_end+0xfc01d950>
   1daec:	2807883a 	mov	r3,r5
   1daf0:	3023883a 	mov	r17,r6
   1daf4:	0401ffc4 	movi	r16,2047
   1daf8:	003df506 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1dafc:	2807883a 	mov	r3,r5
   1db00:	3023883a 	mov	r17,r6
   1db04:	003df206 	br	1d2d0 <__alt_data_end+0xfc01d2d0>
   1db08:	123ff804 	addi	r8,r2,-32
   1db0c:	01000804 	movi	r4,32
   1db10:	1a10d83a 	srl	r8,r3,r8
   1db14:	11000a26 	beq	r2,r4,1db40 <__subdf3+0x8f4>
   1db18:	01001004 	movi	r4,64
   1db1c:	2085c83a 	sub	r2,r4,r2
   1db20:	1884983a 	sll	r2,r3,r2
   1db24:	1444b03a 	or	r2,r2,r17
   1db28:	1004c03a 	cmpne	r2,r2,zero
   1db2c:	40a2b03a 	or	r17,r8,r2
   1db30:	0005883a 	mov	r2,zero
   1db34:	003f8606 	br	1d950 <__alt_data_end+0xfc01d950>
   1db38:	0005883a 	mov	r2,zero
   1db3c:	003fdc06 	br	1dab0 <__alt_data_end+0xfc01dab0>
   1db40:	0005883a 	mov	r2,zero
   1db44:	003ff706 	br	1db24 <__alt_data_end+0xfc01db24>

0001db48 <__fixdfsi>:
   1db48:	280cd53a 	srli	r6,r5,20
   1db4c:	00c00434 	movhi	r3,16
   1db50:	18ffffc4 	addi	r3,r3,-1
   1db54:	3181ffcc 	andi	r6,r6,2047
   1db58:	01c0ff84 	movi	r7,1022
   1db5c:	28c6703a 	and	r3,r5,r3
   1db60:	280ad7fa 	srli	r5,r5,31
   1db64:	3980120e 	bge	r7,r6,1dbb0 <__fixdfsi+0x68>
   1db68:	00810744 	movi	r2,1053
   1db6c:	11800c16 	blt	r2,r6,1dba0 <__fixdfsi+0x58>
   1db70:	00810cc4 	movi	r2,1075
   1db74:	1185c83a 	sub	r2,r2,r6
   1db78:	01c007c4 	movi	r7,31
   1db7c:	18c00434 	orhi	r3,r3,16
   1db80:	38800d16 	blt	r7,r2,1dbb8 <__fixdfsi+0x70>
   1db84:	31befb44 	addi	r6,r6,-1043
   1db88:	2084d83a 	srl	r2,r4,r2
   1db8c:	1986983a 	sll	r3,r3,r6
   1db90:	1884b03a 	or	r2,r3,r2
   1db94:	28000726 	beq	r5,zero,1dbb4 <__fixdfsi+0x6c>
   1db98:	0085c83a 	sub	r2,zero,r2
   1db9c:	f800283a 	ret
   1dba0:	00a00034 	movhi	r2,32768
   1dba4:	10bfffc4 	addi	r2,r2,-1
   1dba8:	2885883a 	add	r2,r5,r2
   1dbac:	f800283a 	ret
   1dbb0:	0005883a 	mov	r2,zero
   1dbb4:	f800283a 	ret
   1dbb8:	008104c4 	movi	r2,1043
   1dbbc:	1185c83a 	sub	r2,r2,r6
   1dbc0:	1884d83a 	srl	r2,r3,r2
   1dbc4:	003ff306 	br	1db94 <__alt_data_end+0xfc01db94>

0001dbc8 <__floatsidf>:
   1dbc8:	defffd04 	addi	sp,sp,-12
   1dbcc:	dfc00215 	stw	ra,8(sp)
   1dbd0:	dc400115 	stw	r17,4(sp)
   1dbd4:	dc000015 	stw	r16,0(sp)
   1dbd8:	20002b26 	beq	r4,zero,1dc88 <__floatsidf+0xc0>
   1dbdc:	2023883a 	mov	r17,r4
   1dbe0:	2020d7fa 	srli	r16,r4,31
   1dbe4:	20002d16 	blt	r4,zero,1dc9c <__floatsidf+0xd4>
   1dbe8:	8809883a 	mov	r4,r17
   1dbec:	001dd4c0 	call	1dd4c <__clzsi2>
   1dbf0:	01410784 	movi	r5,1054
   1dbf4:	288bc83a 	sub	r5,r5,r2
   1dbf8:	01010cc4 	movi	r4,1075
   1dbfc:	2149c83a 	sub	r4,r4,r5
   1dc00:	00c007c4 	movi	r3,31
   1dc04:	1900160e 	bge	r3,r4,1dc60 <__floatsidf+0x98>
   1dc08:	00c104c4 	movi	r3,1043
   1dc0c:	1947c83a 	sub	r3,r3,r5
   1dc10:	88c6983a 	sll	r3,r17,r3
   1dc14:	00800434 	movhi	r2,16
   1dc18:	10bfffc4 	addi	r2,r2,-1
   1dc1c:	1886703a 	and	r3,r3,r2
   1dc20:	2941ffcc 	andi	r5,r5,2047
   1dc24:	800d883a 	mov	r6,r16
   1dc28:	0005883a 	mov	r2,zero
   1dc2c:	280a953a 	slli	r5,r5,20
   1dc30:	31803fcc 	andi	r6,r6,255
   1dc34:	01000434 	movhi	r4,16
   1dc38:	300c97fa 	slli	r6,r6,31
   1dc3c:	213fffc4 	addi	r4,r4,-1
   1dc40:	1906703a 	and	r3,r3,r4
   1dc44:	1946b03a 	or	r3,r3,r5
   1dc48:	1986b03a 	or	r3,r3,r6
   1dc4c:	dfc00217 	ldw	ra,8(sp)
   1dc50:	dc400117 	ldw	r17,4(sp)
   1dc54:	dc000017 	ldw	r16,0(sp)
   1dc58:	dec00304 	addi	sp,sp,12
   1dc5c:	f800283a 	ret
   1dc60:	00c002c4 	movi	r3,11
   1dc64:	1887c83a 	sub	r3,r3,r2
   1dc68:	88c6d83a 	srl	r3,r17,r3
   1dc6c:	8904983a 	sll	r2,r17,r4
   1dc70:	01000434 	movhi	r4,16
   1dc74:	213fffc4 	addi	r4,r4,-1
   1dc78:	2941ffcc 	andi	r5,r5,2047
   1dc7c:	1906703a 	and	r3,r3,r4
   1dc80:	800d883a 	mov	r6,r16
   1dc84:	003fe906 	br	1dc2c <__alt_data_end+0xfc01dc2c>
   1dc88:	000d883a 	mov	r6,zero
   1dc8c:	000b883a 	mov	r5,zero
   1dc90:	0007883a 	mov	r3,zero
   1dc94:	0005883a 	mov	r2,zero
   1dc98:	003fe406 	br	1dc2c <__alt_data_end+0xfc01dc2c>
   1dc9c:	0123c83a 	sub	r17,zero,r4
   1dca0:	003fd106 	br	1dbe8 <__alt_data_end+0xfc01dbe8>

0001dca4 <__floatunsidf>:
   1dca4:	defffe04 	addi	sp,sp,-8
   1dca8:	dc000015 	stw	r16,0(sp)
   1dcac:	dfc00115 	stw	ra,4(sp)
   1dcb0:	2021883a 	mov	r16,r4
   1dcb4:	20002226 	beq	r4,zero,1dd40 <__floatunsidf+0x9c>
   1dcb8:	001dd4c0 	call	1dd4c <__clzsi2>
   1dcbc:	01010784 	movi	r4,1054
   1dcc0:	2089c83a 	sub	r4,r4,r2
   1dcc4:	01810cc4 	movi	r6,1075
   1dcc8:	310dc83a 	sub	r6,r6,r4
   1dccc:	00c007c4 	movi	r3,31
   1dcd0:	1980120e 	bge	r3,r6,1dd1c <__floatunsidf+0x78>
   1dcd4:	00c104c4 	movi	r3,1043
   1dcd8:	1907c83a 	sub	r3,r3,r4
   1dcdc:	80ca983a 	sll	r5,r16,r3
   1dce0:	00800434 	movhi	r2,16
   1dce4:	10bfffc4 	addi	r2,r2,-1
   1dce8:	2101ffcc 	andi	r4,r4,2047
   1dcec:	0021883a 	mov	r16,zero
   1dcf0:	288a703a 	and	r5,r5,r2
   1dcf4:	2008953a 	slli	r4,r4,20
   1dcf8:	00c00434 	movhi	r3,16
   1dcfc:	18ffffc4 	addi	r3,r3,-1
   1dd00:	28c6703a 	and	r3,r5,r3
   1dd04:	8005883a 	mov	r2,r16
   1dd08:	1906b03a 	or	r3,r3,r4
   1dd0c:	dfc00117 	ldw	ra,4(sp)
   1dd10:	dc000017 	ldw	r16,0(sp)
   1dd14:	dec00204 	addi	sp,sp,8
   1dd18:	f800283a 	ret
   1dd1c:	00c002c4 	movi	r3,11
   1dd20:	188bc83a 	sub	r5,r3,r2
   1dd24:	814ad83a 	srl	r5,r16,r5
   1dd28:	00c00434 	movhi	r3,16
   1dd2c:	18ffffc4 	addi	r3,r3,-1
   1dd30:	81a0983a 	sll	r16,r16,r6
   1dd34:	2101ffcc 	andi	r4,r4,2047
   1dd38:	28ca703a 	and	r5,r5,r3
   1dd3c:	003fed06 	br	1dcf4 <__alt_data_end+0xfc01dcf4>
   1dd40:	0009883a 	mov	r4,zero
   1dd44:	000b883a 	mov	r5,zero
   1dd48:	003fea06 	br	1dcf4 <__alt_data_end+0xfc01dcf4>

0001dd4c <__clzsi2>:
   1dd4c:	00bfffd4 	movui	r2,65535
   1dd50:	11000536 	bltu	r2,r4,1dd68 <__clzsi2+0x1c>
   1dd54:	00803fc4 	movi	r2,255
   1dd58:	11000f36 	bltu	r2,r4,1dd98 <__clzsi2+0x4c>
   1dd5c:	00800804 	movi	r2,32
   1dd60:	0007883a 	mov	r3,zero
   1dd64:	00000506 	br	1dd7c <__clzsi2+0x30>
   1dd68:	00804034 	movhi	r2,256
   1dd6c:	10bfffc4 	addi	r2,r2,-1
   1dd70:	11000c2e 	bgeu	r2,r4,1dda4 <__clzsi2+0x58>
   1dd74:	00800204 	movi	r2,8
   1dd78:	00c00604 	movi	r3,24
   1dd7c:	20c8d83a 	srl	r4,r4,r3
   1dd80:	00c000f4 	movhi	r3,3
   1dd84:	18e5f004 	addi	r3,r3,-26688
   1dd88:	1909883a 	add	r4,r3,r4
   1dd8c:	20c00003 	ldbu	r3,0(r4)
   1dd90:	10c5c83a 	sub	r2,r2,r3
   1dd94:	f800283a 	ret
   1dd98:	00800604 	movi	r2,24
   1dd9c:	00c00204 	movi	r3,8
   1dda0:	003ff606 	br	1dd7c <__alt_data_end+0xfc01dd7c>
   1dda4:	00800404 	movi	r2,16
   1dda8:	1007883a 	mov	r3,r2
   1ddac:	003ff306 	br	1dd7c <__alt_data_end+0xfc01dd7c>

0001ddb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ddb0:	defffe04 	addi	sp,sp,-8
   1ddb4:	dfc00115 	stw	ra,4(sp)
   1ddb8:	df000015 	stw	fp,0(sp)
   1ddbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ddc0:	d0a5b717 	ldw	r2,-26916(gp)
   1ddc4:	10000326 	beq	r2,zero,1ddd4 <alt_get_errno+0x24>
   1ddc8:	d0a5b717 	ldw	r2,-26916(gp)
   1ddcc:	103ee83a 	callr	r2
   1ddd0:	00000106 	br	1ddd8 <alt_get_errno+0x28>
   1ddd4:	d0b23f04 	addi	r2,gp,-14084
}
   1ddd8:	e037883a 	mov	sp,fp
   1dddc:	dfc00117 	ldw	ra,4(sp)
   1dde0:	df000017 	ldw	fp,0(sp)
   1dde4:	dec00204 	addi	sp,sp,8
   1dde8:	f800283a 	ret

0001ddec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ddec:	defffb04 	addi	sp,sp,-20
   1ddf0:	dfc00415 	stw	ra,16(sp)
   1ddf4:	df000315 	stw	fp,12(sp)
   1ddf8:	df000304 	addi	fp,sp,12
   1ddfc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1de00:	e0bfff17 	ldw	r2,-4(fp)
   1de04:	10000816 	blt	r2,zero,1de28 <close+0x3c>
   1de08:	01400304 	movi	r5,12
   1de0c:	e13fff17 	ldw	r4,-4(fp)
   1de10:	000ccf40 	call	ccf4 <__mulsi3>
   1de14:	1007883a 	mov	r3,r2
   1de18:	008000f4 	movhi	r2,3
   1de1c:	10a87b04 	addi	r2,r2,-24084
   1de20:	1885883a 	add	r2,r3,r2
   1de24:	00000106 	br	1de2c <close+0x40>
   1de28:	0005883a 	mov	r2,zero
   1de2c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1de30:	e0bffd17 	ldw	r2,-12(fp)
   1de34:	10001926 	beq	r2,zero,1de9c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1de38:	e0bffd17 	ldw	r2,-12(fp)
   1de3c:	10800017 	ldw	r2,0(r2)
   1de40:	10800417 	ldw	r2,16(r2)
   1de44:	10000626 	beq	r2,zero,1de60 <close+0x74>
   1de48:	e0bffd17 	ldw	r2,-12(fp)
   1de4c:	10800017 	ldw	r2,0(r2)
   1de50:	10800417 	ldw	r2,16(r2)
   1de54:	e13ffd17 	ldw	r4,-12(fp)
   1de58:	103ee83a 	callr	r2
   1de5c:	00000106 	br	1de64 <close+0x78>
   1de60:	0005883a 	mov	r2,zero
   1de64:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1de68:	e13fff17 	ldw	r4,-4(fp)
   1de6c:	001e6940 	call	1e694 <alt_release_fd>
    if (rval < 0)
   1de70:	e0bffe17 	ldw	r2,-8(fp)
   1de74:	1000070e 	bge	r2,zero,1de94 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1de78:	001ddb00 	call	1ddb0 <alt_get_errno>
   1de7c:	1007883a 	mov	r3,r2
   1de80:	e0bffe17 	ldw	r2,-8(fp)
   1de84:	0085c83a 	sub	r2,zero,r2
   1de88:	18800015 	stw	r2,0(r3)
      return -1;
   1de8c:	00bfffc4 	movi	r2,-1
   1de90:	00000706 	br	1deb0 <close+0xc4>
    }
    return 0;
   1de94:	0005883a 	mov	r2,zero
   1de98:	00000506 	br	1deb0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1de9c:	001ddb00 	call	1ddb0 <alt_get_errno>
   1dea0:	1007883a 	mov	r3,r2
   1dea4:	00801444 	movi	r2,81
   1dea8:	18800015 	stw	r2,0(r3)
    return -1;
   1deac:	00bfffc4 	movi	r2,-1
  }
}
   1deb0:	e037883a 	mov	sp,fp
   1deb4:	dfc00117 	ldw	ra,4(sp)
   1deb8:	df000017 	ldw	fp,0(sp)
   1debc:	dec00204 	addi	sp,sp,8
   1dec0:	f800283a 	ret

0001dec4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1dec4:	defffc04 	addi	sp,sp,-16
   1dec8:	df000315 	stw	fp,12(sp)
   1decc:	df000304 	addi	fp,sp,12
   1ded0:	e13ffd15 	stw	r4,-12(fp)
   1ded4:	e17ffe15 	stw	r5,-8(fp)
   1ded8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1dedc:	e0bfff17 	ldw	r2,-4(fp)
}
   1dee0:	e037883a 	mov	sp,fp
   1dee4:	df000017 	ldw	fp,0(sp)
   1dee8:	dec00104 	addi	sp,sp,4
   1deec:	f800283a 	ret

0001def0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1def0:	defffd04 	addi	sp,sp,-12
   1def4:	df000215 	stw	fp,8(sp)
   1def8:	df000204 	addi	fp,sp,8
   1defc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1df00:	0001883a 	nop
   1df04:	e0bfff17 	ldw	r2,-4(fp)
   1df08:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1df0c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1df10:	10000226 	beq	r2,zero,1df1c <_exit+0x2c>
    ALT_SIM_FAIL();
   1df14:	002af070 	cmpltui	zero,zero,43969
   1df18:	00000106 	br	1df20 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1df1c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1df20:	003fff06 	br	1df20 <__alt_data_end+0xfc01df20>

0001df24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1df24:	defffe04 	addi	sp,sp,-8
   1df28:	dfc00115 	stw	ra,4(sp)
   1df2c:	df000015 	stw	fp,0(sp)
   1df30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1df34:	d0a5b717 	ldw	r2,-26916(gp)
   1df38:	10000326 	beq	r2,zero,1df48 <alt_get_errno+0x24>
   1df3c:	d0a5b717 	ldw	r2,-26916(gp)
   1df40:	103ee83a 	callr	r2
   1df44:	00000106 	br	1df4c <alt_get_errno+0x28>
   1df48:	d0b23f04 	addi	r2,gp,-14084
}
   1df4c:	e037883a 	mov	sp,fp
   1df50:	dfc00117 	ldw	ra,4(sp)
   1df54:	df000017 	ldw	fp,0(sp)
   1df58:	dec00204 	addi	sp,sp,8
   1df5c:	f800283a 	ret

0001df60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1df60:	defffb04 	addi	sp,sp,-20
   1df64:	dfc00415 	stw	ra,16(sp)
   1df68:	df000315 	stw	fp,12(sp)
   1df6c:	df000304 	addi	fp,sp,12
   1df70:	e13ffe15 	stw	r4,-8(fp)
   1df74:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1df78:	e0bffe17 	ldw	r2,-8(fp)
   1df7c:	10000816 	blt	r2,zero,1dfa0 <fstat+0x40>
   1df80:	01400304 	movi	r5,12
   1df84:	e13ffe17 	ldw	r4,-8(fp)
   1df88:	000ccf40 	call	ccf4 <__mulsi3>
   1df8c:	1007883a 	mov	r3,r2
   1df90:	008000f4 	movhi	r2,3
   1df94:	10a87b04 	addi	r2,r2,-24084
   1df98:	1885883a 	add	r2,r3,r2
   1df9c:	00000106 	br	1dfa4 <fstat+0x44>
   1dfa0:	0005883a 	mov	r2,zero
   1dfa4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1dfa8:	e0bffd17 	ldw	r2,-12(fp)
   1dfac:	10001026 	beq	r2,zero,1dff0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1dfb0:	e0bffd17 	ldw	r2,-12(fp)
   1dfb4:	10800017 	ldw	r2,0(r2)
   1dfb8:	10800817 	ldw	r2,32(r2)
   1dfbc:	10000726 	beq	r2,zero,1dfdc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1dfc0:	e0bffd17 	ldw	r2,-12(fp)
   1dfc4:	10800017 	ldw	r2,0(r2)
   1dfc8:	10800817 	ldw	r2,32(r2)
   1dfcc:	e17fff17 	ldw	r5,-4(fp)
   1dfd0:	e13ffd17 	ldw	r4,-12(fp)
   1dfd4:	103ee83a 	callr	r2
   1dfd8:	00000a06 	br	1e004 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1dfdc:	e0bfff17 	ldw	r2,-4(fp)
   1dfe0:	00c80004 	movi	r3,8192
   1dfe4:	10c00115 	stw	r3,4(r2)
      return 0;
   1dfe8:	0005883a 	mov	r2,zero
   1dfec:	00000506 	br	1e004 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1dff0:	001df240 	call	1df24 <alt_get_errno>
   1dff4:	1007883a 	mov	r3,r2
   1dff8:	00801444 	movi	r2,81
   1dffc:	18800015 	stw	r2,0(r3)
    return -1;
   1e000:	00bfffc4 	movi	r2,-1
  }
}
   1e004:	e037883a 	mov	sp,fp
   1e008:	dfc00117 	ldw	ra,4(sp)
   1e00c:	df000017 	ldw	fp,0(sp)
   1e010:	dec00204 	addi	sp,sp,8
   1e014:	f800283a 	ret

0001e018 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1e018:	deffff04 	addi	sp,sp,-4
   1e01c:	df000015 	stw	fp,0(sp)
   1e020:	d839883a 	mov	fp,sp
  return 0;
   1e024:	0005883a 	mov	r2,zero
}
   1e028:	e037883a 	mov	sp,fp
   1e02c:	df000017 	ldw	fp,0(sp)
   1e030:	dec00104 	addi	sp,sp,4
   1e034:	f800283a 	ret

0001e038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e038:	defffe04 	addi	sp,sp,-8
   1e03c:	dfc00115 	stw	ra,4(sp)
   1e040:	df000015 	stw	fp,0(sp)
   1e044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e048:	d0a5b717 	ldw	r2,-26916(gp)
   1e04c:	10000326 	beq	r2,zero,1e05c <alt_get_errno+0x24>
   1e050:	d0a5b717 	ldw	r2,-26916(gp)
   1e054:	103ee83a 	callr	r2
   1e058:	00000106 	br	1e060 <alt_get_errno+0x28>
   1e05c:	d0b23f04 	addi	r2,gp,-14084
}
   1e060:	e037883a 	mov	sp,fp
   1e064:	dfc00117 	ldw	ra,4(sp)
   1e068:	df000017 	ldw	fp,0(sp)
   1e06c:	dec00204 	addi	sp,sp,8
   1e070:	f800283a 	ret

0001e074 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1e074:	deffed04 	addi	sp,sp,-76
   1e078:	dfc01215 	stw	ra,72(sp)
   1e07c:	df001115 	stw	fp,68(sp)
   1e080:	df001104 	addi	fp,sp,68
   1e084:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e088:	e0bfff17 	ldw	r2,-4(fp)
   1e08c:	10000816 	blt	r2,zero,1e0b0 <isatty+0x3c>
   1e090:	01400304 	movi	r5,12
   1e094:	e13fff17 	ldw	r4,-4(fp)
   1e098:	000ccf40 	call	ccf4 <__mulsi3>
   1e09c:	1007883a 	mov	r3,r2
   1e0a0:	008000f4 	movhi	r2,3
   1e0a4:	10a87b04 	addi	r2,r2,-24084
   1e0a8:	1885883a 	add	r2,r3,r2
   1e0ac:	00000106 	br	1e0b4 <isatty+0x40>
   1e0b0:	0005883a 	mov	r2,zero
   1e0b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1e0b8:	e0bfef17 	ldw	r2,-68(fp)
   1e0bc:	10000e26 	beq	r2,zero,1e0f8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1e0c0:	e0bfef17 	ldw	r2,-68(fp)
   1e0c4:	10800017 	ldw	r2,0(r2)
   1e0c8:	10800817 	ldw	r2,32(r2)
   1e0cc:	1000021e 	bne	r2,zero,1e0d8 <isatty+0x64>
    {
      return 1;
   1e0d0:	00800044 	movi	r2,1
   1e0d4:	00000d06 	br	1e10c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1e0d8:	e0bff004 	addi	r2,fp,-64
   1e0dc:	100b883a 	mov	r5,r2
   1e0e0:	e13fff17 	ldw	r4,-4(fp)
   1e0e4:	001df600 	call	1df60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1e0e8:	e0bff117 	ldw	r2,-60(fp)
   1e0ec:	10880020 	cmpeqi	r2,r2,8192
   1e0f0:	10803fcc 	andi	r2,r2,255
   1e0f4:	00000506 	br	1e10c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1e0f8:	001e0380 	call	1e038 <alt_get_errno>
   1e0fc:	1007883a 	mov	r3,r2
   1e100:	00801444 	movi	r2,81
   1e104:	18800015 	stw	r2,0(r3)
    return 0;
   1e108:	0005883a 	mov	r2,zero
  }
}
   1e10c:	e037883a 	mov	sp,fp
   1e110:	dfc00117 	ldw	ra,4(sp)
   1e114:	df000017 	ldw	fp,0(sp)
   1e118:	dec00204 	addi	sp,sp,8
   1e11c:	f800283a 	ret

0001e120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e120:	defffe04 	addi	sp,sp,-8
   1e124:	dfc00115 	stw	ra,4(sp)
   1e128:	df000015 	stw	fp,0(sp)
   1e12c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e130:	d0a5b717 	ldw	r2,-26916(gp)
   1e134:	10000326 	beq	r2,zero,1e144 <alt_get_errno+0x24>
   1e138:	d0a5b717 	ldw	r2,-26916(gp)
   1e13c:	103ee83a 	callr	r2
   1e140:	00000106 	br	1e148 <alt_get_errno+0x28>
   1e144:	d0b23f04 	addi	r2,gp,-14084
}
   1e148:	e037883a 	mov	sp,fp
   1e14c:	dfc00117 	ldw	ra,4(sp)
   1e150:	df000017 	ldw	fp,0(sp)
   1e154:	dec00204 	addi	sp,sp,8
   1e158:	f800283a 	ret

0001e15c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1e15c:	defffb04 	addi	sp,sp,-20
   1e160:	dfc00415 	stw	ra,16(sp)
   1e164:	df000315 	stw	fp,12(sp)
   1e168:	df000304 	addi	fp,sp,12
   1e16c:	e13ffe15 	stw	r4,-8(fp)
   1e170:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1e174:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1e178:	e0bffe17 	ldw	r2,-8(fp)
   1e17c:	00802f16 	blt	zero,r2,1e23c <kill+0xe0>
  {
    switch (sig)
   1e180:	e0bfff17 	ldw	r2,-4(fp)
   1e184:	10800828 	cmpgeui	r2,r2,32
   1e188:	1000291e 	bne	r2,zero,1e230 <kill+0xd4>
   1e18c:	e0bfff17 	ldw	r2,-4(fp)
   1e190:	100690ba 	slli	r3,r2,2
   1e194:	008000b4 	movhi	r2,2
   1e198:	10b86a04 	addi	r2,r2,-7768
   1e19c:	1885883a 	add	r2,r3,r2
   1e1a0:	10800017 	ldw	r2,0(r2)
   1e1a4:	1000683a 	jmp	r2
   1e1a8:	0001e250 	cmplti	zero,zero,1929
   1e1ac:	0001e230 	cmpltui	zero,zero,1928
   1e1b0:	0001e230 	cmpltui	zero,zero,1928
   1e1b4:	0001e228 	cmpgeui	zero,zero,1928
   1e1b8:	0001e228 	cmpgeui	zero,zero,1928
   1e1bc:	0001e228 	cmpgeui	zero,zero,1928
   1e1c0:	0001e228 	cmpgeui	zero,zero,1928
   1e1c4:	0001e230 	cmpltui	zero,zero,1928
   1e1c8:	0001e228 	cmpgeui	zero,zero,1928
   1e1cc:	0001e228 	cmpgeui	zero,zero,1928
   1e1d0:	0001e228 	cmpgeui	zero,zero,1928
   1e1d4:	0001e228 	cmpgeui	zero,zero,1928
   1e1d8:	0001e228 	cmpgeui	zero,zero,1928
   1e1dc:	0001e228 	cmpgeui	zero,zero,1928
   1e1e0:	0001e228 	cmpgeui	zero,zero,1928
   1e1e4:	0001e228 	cmpgeui	zero,zero,1928
   1e1e8:	0001e250 	cmplti	zero,zero,1929
   1e1ec:	0001e230 	cmpltui	zero,zero,1928
   1e1f0:	0001e230 	cmpltui	zero,zero,1928
   1e1f4:	0001e230 	cmpltui	zero,zero,1928
   1e1f8:	0001e250 	cmplti	zero,zero,1929
   1e1fc:	0001e230 	cmpltui	zero,zero,1928
   1e200:	0001e230 	cmpltui	zero,zero,1928
   1e204:	0001e228 	cmpgeui	zero,zero,1928
   1e208:	0001e228 	cmpgeui	zero,zero,1928
   1e20c:	0001e228 	cmpgeui	zero,zero,1928
   1e210:	0001e228 	cmpgeui	zero,zero,1928
   1e214:	0001e228 	cmpgeui	zero,zero,1928
   1e218:	0001e230 	cmpltui	zero,zero,1928
   1e21c:	0001e230 	cmpltui	zero,zero,1928
   1e220:	0001e228 	cmpgeui	zero,zero,1928
   1e224:	0001e228 	cmpgeui	zero,zero,1928
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1e228:	0009883a 	mov	r4,zero
   1e22c:	001def00 	call	1def0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1e230:	00800584 	movi	r2,22
   1e234:	e0bffd15 	stw	r2,-12(fp)
   1e238:	00000606 	br	1e254 <kill+0xf8>
    }
  }

  else if (pid > 0)
   1e23c:	e0bffe17 	ldw	r2,-8(fp)
   1e240:	0080040e 	bge	zero,r2,1e254 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1e244:	008000c4 	movi	r2,3
   1e248:	e0bffd15 	stw	r2,-12(fp)
   1e24c:	00000106 	br	1e254 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1e250:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1e254:	e0bffd17 	ldw	r2,-12(fp)
   1e258:	10000626 	beq	r2,zero,1e274 <kill+0x118>
  {
    ALT_ERRNO = status;
   1e25c:	001e1200 	call	1e120 <alt_get_errno>
   1e260:	1007883a 	mov	r3,r2
   1e264:	e0bffd17 	ldw	r2,-12(fp)
   1e268:	18800015 	stw	r2,0(r3)
    return -1;
   1e26c:	00bfffc4 	movi	r2,-1
   1e270:	00000106 	br	1e278 <kill+0x11c>
  }

  return 0;
   1e274:	0005883a 	mov	r2,zero
}
   1e278:	e037883a 	mov	sp,fp
   1e27c:	dfc00117 	ldw	ra,4(sp)
   1e280:	df000017 	ldw	fp,0(sp)
   1e284:	dec00204 	addi	sp,sp,8
   1e288:	f800283a 	ret

0001e28c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1e28c:	defffc04 	addi	sp,sp,-16
   1e290:	df000315 	stw	fp,12(sp)
   1e294:	df000304 	addi	fp,sp,12
   1e298:	e13ffd15 	stw	r4,-12(fp)
   1e29c:	e17ffe15 	stw	r5,-8(fp)
   1e2a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1e2a4:	e0fffe17 	ldw	r3,-8(fp)
   1e2a8:	e0bffd17 	ldw	r2,-12(fp)
   1e2ac:	18800c26 	beq	r3,r2,1e2e0 <alt_load_section+0x54>
  {
    while( to != end )
   1e2b0:	00000806 	br	1e2d4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1e2b4:	e0bffe17 	ldw	r2,-8(fp)
   1e2b8:	10c00104 	addi	r3,r2,4
   1e2bc:	e0fffe15 	stw	r3,-8(fp)
   1e2c0:	e0fffd17 	ldw	r3,-12(fp)
   1e2c4:	19000104 	addi	r4,r3,4
   1e2c8:	e13ffd15 	stw	r4,-12(fp)
   1e2cc:	18c00017 	ldw	r3,0(r3)
   1e2d0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1e2d4:	e0fffe17 	ldw	r3,-8(fp)
   1e2d8:	e0bfff17 	ldw	r2,-4(fp)
   1e2dc:	18bff51e 	bne	r3,r2,1e2b4 <__alt_data_end+0xfc01e2b4>
    {
      *to++ = *from++;
    }
  }
}
   1e2e0:	0001883a 	nop
   1e2e4:	e037883a 	mov	sp,fp
   1e2e8:	df000017 	ldw	fp,0(sp)
   1e2ec:	dec00104 	addi	sp,sp,4
   1e2f0:	f800283a 	ret

0001e2f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1e2f4:	defffe04 	addi	sp,sp,-8
   1e2f8:	dfc00115 	stw	ra,4(sp)
   1e2fc:	df000015 	stw	fp,0(sp)
   1e300:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1e304:	018000f4 	movhi	r6,3
   1e308:	31b2bf04 	addi	r6,r6,-13572
   1e30c:	014000f4 	movhi	r5,3
   1e310:	29664804 	addi	r5,r5,-26336
   1e314:	010000f4 	movhi	r4,3
   1e318:	2132bf04 	addi	r4,r4,-13572
   1e31c:	001e28c0 	call	1e28c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1e320:	01800034 	movhi	r6,0
   1e324:	31808c04 	addi	r6,r6,560
   1e328:	01400034 	movhi	r5,0
   1e32c:	29400804 	addi	r5,r5,32
   1e330:	01000034 	movhi	r4,0
   1e334:	21000804 	addi	r4,r4,32
   1e338:	001e28c0 	call	1e28c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1e33c:	018000f4 	movhi	r6,3
   1e340:	31a64804 	addi	r6,r6,-26336
   1e344:	014000b4 	movhi	r5,2
   1e348:	294a7a04 	addi	r5,r5,10728
   1e34c:	010000b4 	movhi	r4,2
   1e350:	210a7a04 	addi	r4,r4,10728
   1e354:	001e28c0 	call	1e28c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1e358:	00216bc0 	call	216bc <alt_dcache_flush_all>
  alt_icache_flush_all();
   1e35c:	002190c0 	call	2190c <alt_icache_flush_all>
}
   1e360:	0001883a 	nop
   1e364:	e037883a 	mov	sp,fp
   1e368:	dfc00117 	ldw	ra,4(sp)
   1e36c:	df000017 	ldw	fp,0(sp)
   1e370:	dec00204 	addi	sp,sp,8
   1e374:	f800283a 	ret

0001e378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e378:	defffe04 	addi	sp,sp,-8
   1e37c:	dfc00115 	stw	ra,4(sp)
   1e380:	df000015 	stw	fp,0(sp)
   1e384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e388:	d0a5b717 	ldw	r2,-26916(gp)
   1e38c:	10000326 	beq	r2,zero,1e39c <alt_get_errno+0x24>
   1e390:	d0a5b717 	ldw	r2,-26916(gp)
   1e394:	103ee83a 	callr	r2
   1e398:	00000106 	br	1e3a0 <alt_get_errno+0x28>
   1e39c:	d0b23f04 	addi	r2,gp,-14084
}
   1e3a0:	e037883a 	mov	sp,fp
   1e3a4:	dfc00117 	ldw	ra,4(sp)
   1e3a8:	df000017 	ldw	fp,0(sp)
   1e3ac:	dec00204 	addi	sp,sp,8
   1e3b0:	f800283a 	ret

0001e3b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1e3b4:	defff904 	addi	sp,sp,-28
   1e3b8:	dfc00615 	stw	ra,24(sp)
   1e3bc:	df000515 	stw	fp,20(sp)
   1e3c0:	df000504 	addi	fp,sp,20
   1e3c4:	e13ffd15 	stw	r4,-12(fp)
   1e3c8:	e17ffe15 	stw	r5,-8(fp)
   1e3cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1e3d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e3d4:	e0bffd17 	ldw	r2,-12(fp)
   1e3d8:	10000816 	blt	r2,zero,1e3fc <lseek+0x48>
   1e3dc:	01400304 	movi	r5,12
   1e3e0:	e13ffd17 	ldw	r4,-12(fp)
   1e3e4:	000ccf40 	call	ccf4 <__mulsi3>
   1e3e8:	1007883a 	mov	r3,r2
   1e3ec:	008000f4 	movhi	r2,3
   1e3f0:	10a87b04 	addi	r2,r2,-24084
   1e3f4:	1885883a 	add	r2,r3,r2
   1e3f8:	00000106 	br	1e400 <lseek+0x4c>
   1e3fc:	0005883a 	mov	r2,zero
   1e400:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1e404:	e0bffc17 	ldw	r2,-16(fp)
   1e408:	10001026 	beq	r2,zero,1e44c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1e40c:	e0bffc17 	ldw	r2,-16(fp)
   1e410:	10800017 	ldw	r2,0(r2)
   1e414:	10800717 	ldw	r2,28(r2)
   1e418:	10000926 	beq	r2,zero,1e440 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1e41c:	e0bffc17 	ldw	r2,-16(fp)
   1e420:	10800017 	ldw	r2,0(r2)
   1e424:	10800717 	ldw	r2,28(r2)
   1e428:	e1bfff17 	ldw	r6,-4(fp)
   1e42c:	e17ffe17 	ldw	r5,-8(fp)
   1e430:	e13ffc17 	ldw	r4,-16(fp)
   1e434:	103ee83a 	callr	r2
   1e438:	e0bffb15 	stw	r2,-20(fp)
   1e43c:	00000506 	br	1e454 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1e440:	00bfde84 	movi	r2,-134
   1e444:	e0bffb15 	stw	r2,-20(fp)
   1e448:	00000206 	br	1e454 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1e44c:	00bfebc4 	movi	r2,-81
   1e450:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1e454:	e0bffb17 	ldw	r2,-20(fp)
   1e458:	1000070e 	bge	r2,zero,1e478 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1e45c:	001e3780 	call	1e378 <alt_get_errno>
   1e460:	1007883a 	mov	r3,r2
   1e464:	e0bffb17 	ldw	r2,-20(fp)
   1e468:	0085c83a 	sub	r2,zero,r2
   1e46c:	18800015 	stw	r2,0(r3)
    rc = -1;
   1e470:	00bfffc4 	movi	r2,-1
   1e474:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1e478:	e0bffb17 	ldw	r2,-20(fp)
}
   1e47c:	e037883a 	mov	sp,fp
   1e480:	dfc00117 	ldw	ra,4(sp)
   1e484:	df000017 	ldw	fp,0(sp)
   1e488:	dec00204 	addi	sp,sp,8
   1e48c:	f800283a 	ret

0001e490 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1e490:	defffd04 	addi	sp,sp,-12
   1e494:	dfc00215 	stw	ra,8(sp)
   1e498:	df000115 	stw	fp,4(sp)
   1e49c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1e4a0:	0009883a 	mov	r4,zero
   1e4a4:	001ea1c0 	call	1ea1c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1e4a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1e4ac:	001ea540 	call	1ea54 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1e4b0:	018000f4 	movhi	r6,3
   1e4b4:	31a63304 	addi	r6,r6,-26420
   1e4b8:	014000f4 	movhi	r5,3
   1e4bc:	29663304 	addi	r5,r5,-26420
   1e4c0:	010000f4 	movhi	r4,3
   1e4c4:	21263304 	addi	r4,r4,-26420
   1e4c8:	0021cb00 	call	21cb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1e4cc:	00217bc0 	call	217bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1e4d0:	010000b4 	movhi	r4,2
   1e4d4:	21060704 	addi	r4,r4,6172
   1e4d8:	00226480 	call	22648 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1e4dc:	d0b24317 	ldw	r2,-14068(gp)
   1e4e0:	d0f24417 	ldw	r3,-14064(gp)
   1e4e4:	d1324517 	ldw	r4,-14060(gp)
   1e4e8:	200d883a 	mov	r6,r4
   1e4ec:	180b883a 	mov	r5,r3
   1e4f0:	1009883a 	mov	r4,r2
   1e4f4:	000a1180 	call	a118 <main>
   1e4f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1e4fc:	01000044 	movi	r4,1
   1e500:	001ddec0 	call	1ddec <close>
  exit (result);
   1e504:	e13fff17 	ldw	r4,-4(fp)
   1e508:	002265c0 	call	2265c <exit>

0001e50c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1e50c:	defffe04 	addi	sp,sp,-8
   1e510:	df000115 	stw	fp,4(sp)
   1e514:	df000104 	addi	fp,sp,4
   1e518:	e13fff15 	stw	r4,-4(fp)
}
   1e51c:	0001883a 	nop
   1e520:	e037883a 	mov	sp,fp
   1e524:	df000017 	ldw	fp,0(sp)
   1e528:	dec00104 	addi	sp,sp,4
   1e52c:	f800283a 	ret

0001e530 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1e530:	defffe04 	addi	sp,sp,-8
   1e534:	df000115 	stw	fp,4(sp)
   1e538:	df000104 	addi	fp,sp,4
   1e53c:	e13fff15 	stw	r4,-4(fp)
}
   1e540:	0001883a 	nop
   1e544:	e037883a 	mov	sp,fp
   1e548:	df000017 	ldw	fp,0(sp)
   1e54c:	dec00104 	addi	sp,sp,4
   1e550:	f800283a 	ret

0001e554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e554:	defffe04 	addi	sp,sp,-8
   1e558:	dfc00115 	stw	ra,4(sp)
   1e55c:	df000015 	stw	fp,0(sp)
   1e560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e564:	d0a5b717 	ldw	r2,-26916(gp)
   1e568:	10000326 	beq	r2,zero,1e578 <alt_get_errno+0x24>
   1e56c:	d0a5b717 	ldw	r2,-26916(gp)
   1e570:	103ee83a 	callr	r2
   1e574:	00000106 	br	1e57c <alt_get_errno+0x28>
   1e578:	d0b23f04 	addi	r2,gp,-14084
}
   1e57c:	e037883a 	mov	sp,fp
   1e580:	dfc00117 	ldw	ra,4(sp)
   1e584:	df000017 	ldw	fp,0(sp)
   1e588:	dec00204 	addi	sp,sp,8
   1e58c:	f800283a 	ret

0001e590 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1e590:	defff904 	addi	sp,sp,-28
   1e594:	dfc00615 	stw	ra,24(sp)
   1e598:	df000515 	stw	fp,20(sp)
   1e59c:	df000504 	addi	fp,sp,20
   1e5a0:	e13ffd15 	stw	r4,-12(fp)
   1e5a4:	e17ffe15 	stw	r5,-8(fp)
   1e5a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e5ac:	e0bffd17 	ldw	r2,-12(fp)
   1e5b0:	10000816 	blt	r2,zero,1e5d4 <read+0x44>
   1e5b4:	01400304 	movi	r5,12
   1e5b8:	e13ffd17 	ldw	r4,-12(fp)
   1e5bc:	000ccf40 	call	ccf4 <__mulsi3>
   1e5c0:	1007883a 	mov	r3,r2
   1e5c4:	008000f4 	movhi	r2,3
   1e5c8:	10a87b04 	addi	r2,r2,-24084
   1e5cc:	1885883a 	add	r2,r3,r2
   1e5d0:	00000106 	br	1e5d8 <read+0x48>
   1e5d4:	0005883a 	mov	r2,zero
   1e5d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1e5dc:	e0bffb17 	ldw	r2,-20(fp)
   1e5e0:	10002226 	beq	r2,zero,1e66c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1e5e4:	e0bffb17 	ldw	r2,-20(fp)
   1e5e8:	10800217 	ldw	r2,8(r2)
   1e5ec:	108000cc 	andi	r2,r2,3
   1e5f0:	10800060 	cmpeqi	r2,r2,1
   1e5f4:	1000181e 	bne	r2,zero,1e658 <read+0xc8>
        (fd->dev->read))
   1e5f8:	e0bffb17 	ldw	r2,-20(fp)
   1e5fc:	10800017 	ldw	r2,0(r2)
   1e600:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1e604:	10001426 	beq	r2,zero,1e658 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1e608:	e0bffb17 	ldw	r2,-20(fp)
   1e60c:	10800017 	ldw	r2,0(r2)
   1e610:	10800517 	ldw	r2,20(r2)
   1e614:	e0ffff17 	ldw	r3,-4(fp)
   1e618:	180d883a 	mov	r6,r3
   1e61c:	e17ffe17 	ldw	r5,-8(fp)
   1e620:	e13ffb17 	ldw	r4,-20(fp)
   1e624:	103ee83a 	callr	r2
   1e628:	e0bffc15 	stw	r2,-16(fp)
   1e62c:	e0bffc17 	ldw	r2,-16(fp)
   1e630:	1000070e 	bge	r2,zero,1e650 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1e634:	001e5540 	call	1e554 <alt_get_errno>
   1e638:	1007883a 	mov	r3,r2
   1e63c:	e0bffc17 	ldw	r2,-16(fp)
   1e640:	0085c83a 	sub	r2,zero,r2
   1e644:	18800015 	stw	r2,0(r3)
          return -1;
   1e648:	00bfffc4 	movi	r2,-1
   1e64c:	00000c06 	br	1e680 <read+0xf0>
        }
        return rval;
   1e650:	e0bffc17 	ldw	r2,-16(fp)
   1e654:	00000a06 	br	1e680 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1e658:	001e5540 	call	1e554 <alt_get_errno>
   1e65c:	1007883a 	mov	r3,r2
   1e660:	00800344 	movi	r2,13
   1e664:	18800015 	stw	r2,0(r3)
   1e668:	00000406 	br	1e67c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1e66c:	001e5540 	call	1e554 <alt_get_errno>
   1e670:	1007883a 	mov	r3,r2
   1e674:	00801444 	movi	r2,81
   1e678:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1e67c:	00bfffc4 	movi	r2,-1
}
   1e680:	e037883a 	mov	sp,fp
   1e684:	dfc00117 	ldw	ra,4(sp)
   1e688:	df000017 	ldw	fp,0(sp)
   1e68c:	dec00204 	addi	sp,sp,8
   1e690:	f800283a 	ret

0001e694 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1e694:	defffc04 	addi	sp,sp,-16
   1e698:	dfc00315 	stw	ra,12(sp)
   1e69c:	df000215 	stw	fp,8(sp)
   1e6a0:	dc000115 	stw	r16,4(sp)
   1e6a4:	df000204 	addi	fp,sp,8
   1e6a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1e6ac:	e0bffe17 	ldw	r2,-8(fp)
   1e6b0:	108000d0 	cmplti	r2,r2,3
   1e6b4:	1000111e 	bne	r2,zero,1e6fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1e6b8:	040000f4 	movhi	r16,3
   1e6bc:	84287b04 	addi	r16,r16,-24084
   1e6c0:	e0bffe17 	ldw	r2,-8(fp)
   1e6c4:	01400304 	movi	r5,12
   1e6c8:	1009883a 	mov	r4,r2
   1e6cc:	000ccf40 	call	ccf4 <__mulsi3>
   1e6d0:	8085883a 	add	r2,r16,r2
   1e6d4:	10800204 	addi	r2,r2,8
   1e6d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1e6dc:	040000f4 	movhi	r16,3
   1e6e0:	84287b04 	addi	r16,r16,-24084
   1e6e4:	e0bffe17 	ldw	r2,-8(fp)
   1e6e8:	01400304 	movi	r5,12
   1e6ec:	1009883a 	mov	r4,r2
   1e6f0:	000ccf40 	call	ccf4 <__mulsi3>
   1e6f4:	8085883a 	add	r2,r16,r2
   1e6f8:	10000015 	stw	zero,0(r2)
  }
}
   1e6fc:	0001883a 	nop
   1e700:	e6ffff04 	addi	sp,fp,-4
   1e704:	dfc00217 	ldw	ra,8(sp)
   1e708:	df000117 	ldw	fp,4(sp)
   1e70c:	dc000017 	ldw	r16,0(sp)
   1e710:	dec00304 	addi	sp,sp,12
   1e714:	f800283a 	ret

0001e718 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1e718:	defff904 	addi	sp,sp,-28
   1e71c:	df000615 	stw	fp,24(sp)
   1e720:	df000604 	addi	fp,sp,24
   1e724:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e728:	0005303a 	rdctl	r2,status
   1e72c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e730:	e0fffe17 	ldw	r3,-8(fp)
   1e734:	00bfff84 	movi	r2,-2
   1e738:	1884703a 	and	r2,r3,r2
   1e73c:	1001703a 	wrctl	status,r2
  
  return context;
   1e740:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1e744:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1e748:	d0a5b817 	ldw	r2,-26912(gp)
   1e74c:	10c000c4 	addi	r3,r2,3
   1e750:	00bfff04 	movi	r2,-4
   1e754:	1884703a 	and	r2,r3,r2
   1e758:	d0a5b815 	stw	r2,-26912(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1e75c:	d0e5b817 	ldw	r3,-26912(gp)
   1e760:	e0bfff17 	ldw	r2,-4(fp)
   1e764:	1887883a 	add	r3,r3,r2
   1e768:	00810034 	movhi	r2,1024
   1e76c:	10800004 	addi	r2,r2,0
   1e770:	10c0062e 	bgeu	r2,r3,1e78c <sbrk+0x74>
   1e774:	e0bffb17 	ldw	r2,-20(fp)
   1e778:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e77c:	e0bffa17 	ldw	r2,-24(fp)
   1e780:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1e784:	00bfffc4 	movi	r2,-1
   1e788:	00000b06 	br	1e7b8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1e78c:	d0a5b817 	ldw	r2,-26912(gp)
   1e790:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1e794:	d0e5b817 	ldw	r3,-26912(gp)
   1e798:	e0bfff17 	ldw	r2,-4(fp)
   1e79c:	1885883a 	add	r2,r3,r2
   1e7a0:	d0a5b815 	stw	r2,-26912(gp)
   1e7a4:	e0bffb17 	ldw	r2,-20(fp)
   1e7a8:	e0bffc15 	stw	r2,-16(fp)
   1e7ac:	e0bffc17 	ldw	r2,-16(fp)
   1e7b0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1e7b4:	e0bffd17 	ldw	r2,-12(fp)
} 
   1e7b8:	e037883a 	mov	sp,fp
   1e7bc:	df000017 	ldw	fp,0(sp)
   1e7c0:	dec00104 	addi	sp,sp,4
   1e7c4:	f800283a 	ret

0001e7c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e7c8:	defffe04 	addi	sp,sp,-8
   1e7cc:	dfc00115 	stw	ra,4(sp)
   1e7d0:	df000015 	stw	fp,0(sp)
   1e7d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e7d8:	d0a5b717 	ldw	r2,-26916(gp)
   1e7dc:	10000326 	beq	r2,zero,1e7ec <alt_get_errno+0x24>
   1e7e0:	d0a5b717 	ldw	r2,-26916(gp)
   1e7e4:	103ee83a 	callr	r2
   1e7e8:	00000106 	br	1e7f0 <alt_get_errno+0x28>
   1e7ec:	d0b23f04 	addi	r2,gp,-14084
}
   1e7f0:	e037883a 	mov	sp,fp
   1e7f4:	dfc00117 	ldw	ra,4(sp)
   1e7f8:	df000017 	ldw	fp,0(sp)
   1e7fc:	dec00204 	addi	sp,sp,8
   1e800:	f800283a 	ret

0001e804 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1e804:	defffc04 	addi	sp,sp,-16
   1e808:	dfc00315 	stw	ra,12(sp)
   1e80c:	df000215 	stw	fp,8(sp)
   1e810:	df000204 	addi	fp,sp,8
   1e814:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1e818:	d0b24817 	ldw	r2,-14048(gp)
  clock_t ticks = alt_nticks(); 
   1e81c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e820:	d0b24717 	ldw	r2,-14052(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1e824:	1000061e 	bne	r2,zero,1e840 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1e828:	001e7c80 	call	1e7c8 <alt_get_errno>
   1e82c:	1007883a 	mov	r3,r2
   1e830:	00801604 	movi	r2,88
   1e834:	18800015 	stw	r2,0(r3)
    return 0;
   1e838:	0005883a 	mov	r2,zero
   1e83c:	00000a06 	br	1e868 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1e840:	e0bfff17 	ldw	r2,-4(fp)
   1e844:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1e848:	e0bfff17 	ldw	r2,-4(fp)
   1e84c:	e0fffe17 	ldw	r3,-8(fp)
   1e850:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1e854:	e0bfff17 	ldw	r2,-4(fp)
   1e858:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1e85c:	e0bfff17 	ldw	r2,-4(fp)
   1e860:	10000315 	stw	zero,12(r2)

  return ticks;
   1e864:	e0bffe17 	ldw	r2,-8(fp)
}
   1e868:	e037883a 	mov	sp,fp
   1e86c:	dfc00117 	ldw	ra,4(sp)
   1e870:	df000017 	ldw	fp,0(sp)
   1e874:	dec00204 	addi	sp,sp,8
   1e878:	f800283a 	ret

0001e87c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1e87c:	defffd04 	addi	sp,sp,-12
   1e880:	dfc00215 	stw	ra,8(sp)
   1e884:	df000115 	stw	fp,4(sp)
   1e888:	df000104 	addi	fp,sp,4
   1e88c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1e890:	e13fff17 	ldw	r4,-4(fp)
   1e894:	00215640 	call	21564 <alt_busy_sleep>
}
   1e898:	e037883a 	mov	sp,fp
   1e89c:	dfc00117 	ldw	ra,4(sp)
   1e8a0:	df000017 	ldw	fp,0(sp)
   1e8a4:	dec00204 	addi	sp,sp,8
   1e8a8:	f800283a 	ret

0001e8ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e8ac:	defffe04 	addi	sp,sp,-8
   1e8b0:	dfc00115 	stw	ra,4(sp)
   1e8b4:	df000015 	stw	fp,0(sp)
   1e8b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e8bc:	d0a5b717 	ldw	r2,-26916(gp)
   1e8c0:	10000326 	beq	r2,zero,1e8d0 <alt_get_errno+0x24>
   1e8c4:	d0a5b717 	ldw	r2,-26916(gp)
   1e8c8:	103ee83a 	callr	r2
   1e8cc:	00000106 	br	1e8d4 <alt_get_errno+0x28>
   1e8d0:	d0b23f04 	addi	r2,gp,-14084
}
   1e8d4:	e037883a 	mov	sp,fp
   1e8d8:	dfc00117 	ldw	ra,4(sp)
   1e8dc:	df000017 	ldw	fp,0(sp)
   1e8e0:	dec00204 	addi	sp,sp,8
   1e8e4:	f800283a 	ret

0001e8e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1e8e8:	defff904 	addi	sp,sp,-28
   1e8ec:	dfc00615 	stw	ra,24(sp)
   1e8f0:	df000515 	stw	fp,20(sp)
   1e8f4:	df000504 	addi	fp,sp,20
   1e8f8:	e13ffd15 	stw	r4,-12(fp)
   1e8fc:	e17ffe15 	stw	r5,-8(fp)
   1e900:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1e904:	e0bffd17 	ldw	r2,-12(fp)
   1e908:	10000816 	blt	r2,zero,1e92c <write+0x44>
   1e90c:	01400304 	movi	r5,12
   1e910:	e13ffd17 	ldw	r4,-12(fp)
   1e914:	000ccf40 	call	ccf4 <__mulsi3>
   1e918:	1007883a 	mov	r3,r2
   1e91c:	008000f4 	movhi	r2,3
   1e920:	10a87b04 	addi	r2,r2,-24084
   1e924:	1885883a 	add	r2,r3,r2
   1e928:	00000106 	br	1e930 <write+0x48>
   1e92c:	0005883a 	mov	r2,zero
   1e930:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1e934:	e0bffb17 	ldw	r2,-20(fp)
   1e938:	10002126 	beq	r2,zero,1e9c0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1e93c:	e0bffb17 	ldw	r2,-20(fp)
   1e940:	10800217 	ldw	r2,8(r2)
   1e944:	108000cc 	andi	r2,r2,3
   1e948:	10001826 	beq	r2,zero,1e9ac <write+0xc4>
   1e94c:	e0bffb17 	ldw	r2,-20(fp)
   1e950:	10800017 	ldw	r2,0(r2)
   1e954:	10800617 	ldw	r2,24(r2)
   1e958:	10001426 	beq	r2,zero,1e9ac <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1e95c:	e0bffb17 	ldw	r2,-20(fp)
   1e960:	10800017 	ldw	r2,0(r2)
   1e964:	10800617 	ldw	r2,24(r2)
   1e968:	e0ffff17 	ldw	r3,-4(fp)
   1e96c:	180d883a 	mov	r6,r3
   1e970:	e17ffe17 	ldw	r5,-8(fp)
   1e974:	e13ffb17 	ldw	r4,-20(fp)
   1e978:	103ee83a 	callr	r2
   1e97c:	e0bffc15 	stw	r2,-16(fp)
   1e980:	e0bffc17 	ldw	r2,-16(fp)
   1e984:	1000070e 	bge	r2,zero,1e9a4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1e988:	001e8ac0 	call	1e8ac <alt_get_errno>
   1e98c:	1007883a 	mov	r3,r2
   1e990:	e0bffc17 	ldw	r2,-16(fp)
   1e994:	0085c83a 	sub	r2,zero,r2
   1e998:	18800015 	stw	r2,0(r3)
        return -1;
   1e99c:	00bfffc4 	movi	r2,-1
   1e9a0:	00000c06 	br	1e9d4 <write+0xec>
      }
      return rval;
   1e9a4:	e0bffc17 	ldw	r2,-16(fp)
   1e9a8:	00000a06 	br	1e9d4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1e9ac:	001e8ac0 	call	1e8ac <alt_get_errno>
   1e9b0:	1007883a 	mov	r3,r2
   1e9b4:	00800344 	movi	r2,13
   1e9b8:	18800015 	stw	r2,0(r3)
   1e9bc:	00000406 	br	1e9d0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1e9c0:	001e8ac0 	call	1e8ac <alt_get_errno>
   1e9c4:	1007883a 	mov	r3,r2
   1e9c8:	00801444 	movi	r2,81
   1e9cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1e9d0:	00bfffc4 	movi	r2,-1
}
   1e9d4:	e037883a 	mov	sp,fp
   1e9d8:	dfc00117 	ldw	ra,4(sp)
   1e9dc:	df000017 	ldw	fp,0(sp)
   1e9e0:	dec00204 	addi	sp,sp,8
   1e9e4:	f800283a 	ret

0001e9e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1e9e8:	defffd04 	addi	sp,sp,-12
   1e9ec:	dfc00215 	stw	ra,8(sp)
   1e9f0:	df000115 	stw	fp,4(sp)
   1e9f4:	df000104 	addi	fp,sp,4
   1e9f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1e9fc:	d165b404 	addi	r5,gp,-26928
   1ea00:	e13fff17 	ldw	r4,-4(fp)
   1ea04:	00217180 	call	21718 <alt_dev_llist_insert>
}
   1ea08:	e037883a 	mov	sp,fp
   1ea0c:	dfc00117 	ldw	ra,4(sp)
   1ea10:	df000017 	ldw	fp,0(sp)
   1ea14:	dec00204 	addi	sp,sp,8
   1ea18:	f800283a 	ret

0001ea1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1ea1c:	defffd04 	addi	sp,sp,-12
   1ea20:	dfc00215 	stw	ra,8(sp)
   1ea24:	df000115 	stw	fp,4(sp)
   1ea28:	df000104 	addi	fp,sp,4
   1ea2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1ea30:	00223bc0 	call	223bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1ea34:	00800044 	movi	r2,1
   1ea38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1ea3c:	0001883a 	nop
   1ea40:	e037883a 	mov	sp,fp
   1ea44:	dfc00117 	ldw	ra,4(sp)
   1ea48:	df000017 	ldw	fp,0(sp)
   1ea4c:	dec00204 	addi	sp,sp,8
   1ea50:	f800283a 	ret

0001ea54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1ea54:	defffe04 	addi	sp,sp,-8
   1ea58:	dfc00115 	stw	ra,4(sp)
   1ea5c:	df000015 	stw	fp,0(sp)
   1ea60:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1ea64:	01c0fa04 	movi	r7,1000
   1ea68:	01800084 	movi	r6,2
   1ea6c:	000b883a 	mov	r5,zero
   1ea70:	01010034 	movhi	r4,1024
   1ea74:	21042004 	addi	r4,r4,4224
   1ea78:	00213bc0 	call	213bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1ea7c:	010000f4 	movhi	r4,3
   1ea80:	2128db04 	addi	r4,r4,-23700
   1ea84:	001ed180 	call	1ed18 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1ea88:	01800044 	movi	r6,1
   1ea8c:	000b883a 	mov	r5,zero
   1ea90:	010000f4 	movhi	r4,3
   1ea94:	2128f304 	addi	r4,r4,-23604
   1ea98:	00208440 	call	20844 <altera_avalon_jtag_uart_init>
   1ea9c:	010000f4 	movhi	r4,3
   1eaa0:	2128e904 	addi	r4,r4,-23644
   1eaa4:	001e9e80 	call	1e9e8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1eaa8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1eaac:	0001883a 	nop
}
   1eab0:	0001883a 	nop
   1eab4:	e037883a 	mov	sp,fp
   1eab8:	dfc00117 	ldw	ra,4(sp)
   1eabc:	df000017 	ldw	fp,0(sp)
   1eac0:	dec00204 	addi	sp,sp,8
   1eac4:	f800283a 	ret

0001eac8 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1eac8:	defff904 	addi	sp,sp,-28
   1eacc:	dfc00615 	stw	ra,24(sp)
   1ead0:	df000515 	stw	fp,20(sp)
   1ead4:	df000504 	addi	fp,sp,20
   1ead8:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1eadc:	008000b4 	movhi	r2,2
   1eae0:	10a1a804 	addi	r2,r2,-31072
   1eae4:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1eae8:	e0bfff17 	ldw	r2,-4(fp)
   1eaec:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1eaf0:	e0bffc17 	ldw	r2,-16(fp)
   1eaf4:	10800717 	ldw	r2,28(r2)
   1eaf8:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1eafc:	e0bffd17 	ldw	r2,-12(fp)
   1eb00:	10800217 	ldw	r2,8(r2)
   1eb04:	10800098 	cmpnei	r2,r2,2
   1eb08:	1000251e 	bne	r2,zero,1eba0 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1eb0c:	e0bffd17 	ldw	r2,-12(fp)
   1eb10:	10c00017 	ldw	r3,0(r2)
   1eb14:	e0bffd17 	ldw	r2,-12(fp)
   1eb18:	10800117 	ldw	r2,4(r2)
   1eb1c:	e13ffe04 	addi	r4,fp,-8
   1eb20:	200f883a 	mov	r7,r4
   1eb24:	100d883a 	mov	r6,r2
   1eb28:	180b883a 	mov	r5,r3
   1eb2c:	e13ffc17 	ldw	r4,-16(fp)
   1eb30:	001f2780 	call	1f278 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1eb34:	e0bffd17 	ldw	r2,-12(fp)
   1eb38:	10c00117 	ldw	r3,4(r2)
   1eb3c:	e0bffe17 	ldw	r2,-8(fp)
   1eb40:	1887c83a 	sub	r3,r3,r2
   1eb44:	e0bffd17 	ldw	r2,-12(fp)
   1eb48:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1eb4c:	e0bffd17 	ldw	r2,-12(fp)
   1eb50:	10c00017 	ldw	r3,0(r2)
   1eb54:	e0bffe17 	ldw	r2,-8(fp)
   1eb58:	1887883a 	add	r3,r3,r2
   1eb5c:	e0bffd17 	ldw	r2,-12(fp)
   1eb60:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1eb64:	e0bffd17 	ldw	r2,-12(fp)
   1eb68:	10800117 	ldw	r2,4(r2)
   1eb6c:	10000c26 	beq	r2,zero,1eba0 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1eb70:	01400704 	movi	r5,28
   1eb74:	e13ffc17 	ldw	r4,-16(fp)
   1eb78:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1eb7c:	01400084 	movi	r5,2
   1eb80:	e13ffc17 	ldw	r4,-16(fp)
   1eb84:	00204d40 	call	204d4 <alt_avalon_i2c_int_enable>
   1eb88:	00000e06 	br	1ebc4 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1eb8c:	e0bffb17 	ldw	r2,-20(fp)
   1eb90:	10bfffc4 	addi	r2,r2,-1
   1eb94:	e0bffb15 	stw	r2,-20(fp)
   1eb98:	e0bffb17 	ldw	r2,-20(fp)
   1eb9c:	10000426 	beq	r2,zero,1ebb0 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1eba0:	e13ffc17 	ldw	r4,-16(fp)
   1eba4:	001f2340 	call	1f234 <alt_avalon_i2c_is_busy>
   1eba8:	103ff81e 	bne	r2,zero,1eb8c <__alt_data_end+0xfc01eb8c>
   1ebac:	00000106 	br	1ebb4 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1ebb0:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1ebb4:	e13ffc17 	ldw	r4,-16(fp)
   1ebb8:	001eedc0 	call	1eedc <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1ebbc:	e0bffd17 	ldw	r2,-12(fp)
   1ebc0:	10000215 	stw	zero,8(r2)
}
   1ebc4:	e037883a 	mov	sp,fp
   1ebc8:	dfc00117 	ldw	ra,4(sp)
   1ebcc:	df000017 	ldw	fp,0(sp)
   1ebd0:	dec00204 	addi	sp,sp,8
   1ebd4:	f800283a 	ret

0001ebd8 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1ebd8:	defffc04 	addi	sp,sp,-16
   1ebdc:	dfc00315 	stw	ra,12(sp)
   1ebe0:	df000215 	stw	fp,8(sp)
   1ebe4:	df000204 	addi	fp,sp,8
   1ebe8:	e13ffe15 	stw	r4,-8(fp)
   1ebec:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1ebf0:	e0bfff17 	ldw	r2,-4(fp)
   1ebf4:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1ebf8:	e1ffff17 	ldw	r7,-4(fp)
   1ebfc:	000d883a 	mov	r6,zero
   1ec00:	014000b4 	movhi	r5,2
   1ec04:	297ab204 	addi	r5,r5,-5432
   1ec08:	e13ffe17 	ldw	r4,-8(fp)
   1ec0c:	001ecc40 	call	1ecc4 <alt_avalon_i2c_register_callback>
}
   1ec10:	0001883a 	nop
   1ec14:	e037883a 	mov	sp,fp
   1ec18:	dfc00117 	ldw	ra,4(sp)
   1ec1c:	df000017 	ldw	fp,0(sp)
   1ec20:	dec00204 	addi	sp,sp,8
   1ec24:	f800283a 	ret

0001ec28 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1ec28:	defff904 	addi	sp,sp,-28
   1ec2c:	dfc00615 	stw	ra,24(sp)
   1ec30:	df000515 	stw	fp,20(sp)
   1ec34:	df000504 	addi	fp,sp,20
   1ec38:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   1ec3c:	e0bfff17 	ldw	r2,-4(fp)
   1ec40:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1ec44:	014007c4 	movi	r5,31
   1ec48:	e13ffb17 	ldw	r4,-20(fp)
   1ec4c:	002046c0 	call	2046c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1ec50:	01400704 	movi	r5,28
   1ec54:	e13ffb17 	ldw	r4,-20(fp)
   1ec58:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   1ec5c:	e0bffb17 	ldw	r2,-20(fp)
   1ec60:	10800617 	ldw	r2,24(r2)
   1ec64:	10001126 	beq	r2,zero,1ecac <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ec68:	0005303a 	rdctl	r2,status
   1ec6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ec70:	e0fffd17 	ldw	r3,-12(fp)
   1ec74:	00bfff84 	movi	r2,-2
   1ec78:	1884703a 	and	r2,r3,r2
   1ec7c:	1001703a 	wrctl	status,r2
  
  return context;
   1ec80:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   1ec84:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1ec88:	e0bffb17 	ldw	r2,-20(fp)
   1ec8c:	10800617 	ldw	r2,24(r2)
   1ec90:	e13ffb17 	ldw	r4,-20(fp)
   1ec94:	103ee83a 	callr	r2
   1ec98:	e0bffc17 	ldw	r2,-16(fp)
   1ec9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eca0:	e0bffe17 	ldw	r2,-8(fp)
   1eca4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1eca8:	0001883a 	nop
   1ecac:	0001883a 	nop
}
   1ecb0:	e037883a 	mov	sp,fp
   1ecb4:	dfc00117 	ldw	ra,4(sp)
   1ecb8:	df000017 	ldw	fp,0(sp)
   1ecbc:	dec00204 	addi	sp,sp,8
   1ecc0:	f800283a 	ret

0001ecc4 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   1ecc4:	defffb04 	addi	sp,sp,-20
   1ecc8:	df000415 	stw	fp,16(sp)
   1eccc:	df000404 	addi	fp,sp,16
   1ecd0:	e13ffc15 	stw	r4,-16(fp)
   1ecd4:	e17ffd15 	stw	r5,-12(fp)
   1ecd8:	e1bffe15 	stw	r6,-8(fp)
   1ecdc:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1ece0:	e0bffc17 	ldw	r2,-16(fp)
   1ece4:	e0fffd17 	ldw	r3,-12(fp)
   1ece8:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   1ecec:	e0bffc17 	ldw	r2,-16(fp)
   1ecf0:	e0ffff17 	ldw	r3,-4(fp)
   1ecf4:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1ecf8:	e0bffc17 	ldw	r2,-16(fp)
   1ecfc:	e0fffe17 	ldw	r3,-8(fp)
   1ed00:	10c00815 	stw	r3,32(r2)

    return ;
   1ed04:	0001883a 	nop
}
   1ed08:	e037883a 	mov	sp,fp
   1ed0c:	df000017 	ldw	fp,0(sp)
   1ed10:	dec00104 	addi	sp,sp,4
   1ed14:	f800283a 	ret

0001ed18 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1ed18:	defff704 	addi	sp,sp,-36
   1ed1c:	dfc00815 	stw	ra,32(sp)
   1ed20:	df000715 	stw	fp,28(sp)
   1ed24:	df000704 	addi	fp,sp,28
   1ed28:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   1ed2c:	e13fff17 	ldw	r4,-4(fp)
   1ed30:	001eedc0 	call	1eedc <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1ed34:	014007c4 	movi	r5,31
   1ed38:	e13fff17 	ldw	r4,-4(fp)
   1ed3c:	002046c0 	call	2046c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1ed40:	01400704 	movi	r5,28
   1ed44:	e13fff17 	ldw	r4,-4(fp)
   1ed48:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   1ed4c:	014000c4 	movi	r5,3
   1ed50:	e13fff17 	ldw	r4,-4(fp)
   1ed54:	00206780 	call	20678 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   1ed58:	014000c4 	movi	r5,3
   1ed5c:	e13fff17 	ldw	r4,-4(fp)
   1ed60:	00205c80 	call	205c8 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1ed64:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1ed68:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   1ed6c:	e0bffb04 	addi	r2,fp,-20
   1ed70:	018000b4 	movhi	r6,2
   1ed74:	31a1a804 	addi	r6,r6,-31072
   1ed78:	100b883a 	mov	r5,r2
   1ed7c:	e13fff17 	ldw	r4,-4(fp)
   1ed80:	001f1380 	call	1f138 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1ed84:	e0bffb04 	addi	r2,fp,-20
   1ed88:	100b883a 	mov	r5,r2
   1ed8c:	e13fff17 	ldw	r4,-4(fp)
   1ed90:	001efd80 	call	1efd8 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   1ed94:	d165b904 	addi	r5,gp,-26908
   1ed98:	e13fff17 	ldw	r4,-4(fp)
   1ed9c:	00217180 	call	21718 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1eda0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   1eda4:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1eda8:	e0bffa17 	ldw	r2,-24(fp)
   1edac:	10000c1e 	bne	r2,zero,1ede0 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1edb0:	e0bfff17 	ldw	r2,-4(fp)
   1edb4:	10c00417 	ldw	r3,16(r2)
   1edb8:	e0bfff17 	ldw	r2,-4(fp)
   1edbc:	10800517 	ldw	r2,20(r2)
   1edc0:	d8000015 	stw	zero,0(sp)
   1edc4:	e1ffff17 	ldw	r7,-4(fp)
   1edc8:	018000b4 	movhi	r6,2
   1edcc:	31bb0a04 	addi	r6,r6,-5080
   1edd0:	100b883a 	mov	r5,r2
   1edd4:	1809883a 	mov	r4,r3
   1edd8:	002192c0 	call	2192c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   1eddc:	00000406 	br	1edf0 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1ede0:	010000f4 	movhi	r4,3
   1ede4:	21264004 	addi	r4,r4,-26368
   1ede8:	0021fb00 	call	21fb0 <alt_printf>
    }

    return;
   1edec:	0001883a 	nop

}
   1edf0:	e037883a 	mov	sp,fp
   1edf4:	dfc00117 	ldw	ra,4(sp)
   1edf8:	df000017 	ldw	fp,0(sp)
   1edfc:	dec00204 	addi	sp,sp,8
   1ee00:	f800283a 	ret

0001ee04 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1ee04:	defffc04 	addi	sp,sp,-16
   1ee08:	dfc00315 	stw	ra,12(sp)
   1ee0c:	df000215 	stw	fp,8(sp)
   1ee10:	df000204 	addi	fp,sp,8
   1ee14:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1ee18:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   1ee1c:	d165b904 	addi	r5,gp,-26908
   1ee20:	e13fff17 	ldw	r4,-4(fp)
   1ee24:	002187c0 	call	2187c <alt_find_dev>
   1ee28:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   1ee2c:	e0bffe17 	ldw	r2,-8(fp)
}
   1ee30:	e037883a 	mov	sp,fp
   1ee34:	dfc00117 	ldw	ra,4(sp)
   1ee38:	df000017 	ldw	fp,0(sp)
   1ee3c:	dec00204 	addi	sp,sp,8
   1ee40:	f800283a 	ret

0001ee44 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1ee44:	defffc04 	addi	sp,sp,-16
   1ee48:	df000315 	stw	fp,12(sp)
   1ee4c:	df000304 	addi	fp,sp,12
   1ee50:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1ee54:	e0bfff17 	ldw	r2,-4(fp)
   1ee58:	10800717 	ldw	r2,28(r2)
   1ee5c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1ee60:	e0bfff17 	ldw	r2,-4(fp)
   1ee64:	10800317 	ldw	r2,12(r2)
   1ee68:	10800204 	addi	r2,r2,8
   1ee6c:	10800037 	ldwio	r2,0(r2)
   1ee70:	1080004c 	andi	r2,r2,1
   1ee74:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1ee78:	e0bffe17 	ldw	r2,-8(fp)
   1ee7c:	10000226 	beq	r2,zero,1ee88 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   1ee80:	00bffe44 	movi	r2,-7
   1ee84:	00001106 	br	1eecc <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   1ee88:	e0bfff17 	ldw	r2,-4(fp)
   1ee8c:	10c00617 	ldw	r3,24(r2)
   1ee90:	008000b4 	movhi	r2,2
   1ee94:	10bab204 	addi	r2,r2,-5432
   1ee98:	1880021e 	bne	r3,r2,1eea4 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   1ee9c:	e0bffd17 	ldw	r2,-12(fp)
   1eea0:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   1eea4:	e0bfff17 	ldw	r2,-4(fp)
   1eea8:	10800317 	ldw	r2,12(r2)
   1eeac:	10800204 	addi	r2,r2,8
   1eeb0:	e0ffff17 	ldw	r3,-4(fp)
   1eeb4:	18c00317 	ldw	r3,12(r3)
   1eeb8:	18c00204 	addi	r3,r3,8
   1eebc:	18c00037 	ldwio	r3,0(r3)
   1eec0:	18c00054 	ori	r3,r3,1
   1eec4:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1eec8:	0005883a 	mov	r2,zero
}
   1eecc:	e037883a 	mov	sp,fp
   1eed0:	df000017 	ldw	fp,0(sp)
   1eed4:	dec00104 	addi	sp,sp,4
   1eed8:	f800283a 	ret

0001eedc <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1eedc:	defffe04 	addi	sp,sp,-8
   1eee0:	df000115 	stw	fp,4(sp)
   1eee4:	df000104 	addi	fp,sp,4
   1eee8:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   1eeec:	e0bfff17 	ldw	r2,-4(fp)
   1eef0:	10800317 	ldw	r2,12(r2)
   1eef4:	10800204 	addi	r2,r2,8
   1eef8:	e0ffff17 	ldw	r3,-4(fp)
   1eefc:	18c00317 	ldw	r3,12(r3)
   1ef00:	18c00204 	addi	r3,r3,8
   1ef04:	19000037 	ldwio	r4,0(r3)
   1ef08:	00ffff84 	movi	r3,-2
   1ef0c:	20c6703a 	and	r3,r4,r3
   1ef10:	10c00035 	stwio	r3,0(r2)

}
   1ef14:	0001883a 	nop
   1ef18:	e037883a 	mov	sp,fp
   1ef1c:	df000017 	ldw	fp,0(sp)
   1ef20:	dec00104 	addi	sp,sp,4
   1ef24:	f800283a 	ret

0001ef28 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1ef28:	defffd04 	addi	sp,sp,-12
   1ef2c:	df000215 	stw	fp,8(sp)
   1ef30:	df000204 	addi	fp,sp,8
   1ef34:	e13ffe15 	stw	r4,-8(fp)
   1ef38:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   1ef3c:	e0bffe17 	ldw	r2,-8(fp)
   1ef40:	10c00d17 	ldw	r3,52(r2)
   1ef44:	e0bfff17 	ldw	r2,-4(fp)
   1ef48:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   1ef4c:	e0bffe17 	ldw	r2,-8(fp)
   1ef50:	10800317 	ldw	r2,12(r2)
   1ef54:	10800204 	addi	r2,r2,8
   1ef58:	10800037 	ldwio	r2,0(r2)
   1ef5c:	1080008c 	andi	r2,r2,2
   1ef60:	1005d07a 	srai	r2,r2,1
   1ef64:	1007883a 	mov	r3,r2
   1ef68:	e0bfff17 	ldw	r2,-4(fp)
   1ef6c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   1ef70:	e0bffe17 	ldw	r2,-8(fp)
   1ef74:	10800317 	ldw	r2,12(r2)
   1ef78:	10800904 	addi	r2,r2,36
   1ef7c:	10800037 	ldwio	r2,0(r2)
   1ef80:	1007883a 	mov	r3,r2
   1ef84:	e0bfff17 	ldw	r2,-4(fp)
   1ef88:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   1ef8c:	e0bffe17 	ldw	r2,-8(fp)
   1ef90:	10800317 	ldw	r2,12(r2)
   1ef94:	10800804 	addi	r2,r2,32
   1ef98:	10800037 	ldwio	r2,0(r2)
   1ef9c:	1007883a 	mov	r3,r2
   1efa0:	e0bfff17 	ldw	r2,-4(fp)
   1efa4:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   1efa8:	e0bffe17 	ldw	r2,-8(fp)
   1efac:	10800317 	ldw	r2,12(r2)
   1efb0:	10800a04 	addi	r2,r2,40
   1efb4:	10800037 	ldwio	r2,0(r2)
   1efb8:	1007883a 	mov	r3,r2
   1efbc:	e0bfff17 	ldw	r2,-4(fp)
   1efc0:	10c0030d 	sth	r3,12(r2)
}
   1efc4:	0001883a 	nop
   1efc8:	e037883a 	mov	sp,fp
   1efcc:	df000017 	ldw	fp,0(sp)
   1efd0:	dec00104 	addi	sp,sp,4
   1efd4:	f800283a 	ret

0001efd8 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1efd8:	defffd04 	addi	sp,sp,-12
   1efdc:	df000215 	stw	fp,8(sp)
   1efe0:	df000204 	addi	fp,sp,8
   1efe4:	e13ffe15 	stw	r4,-8(fp)
   1efe8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   1efec:	e0bfff17 	ldw	r2,-4(fp)
   1eff0:	10c00017 	ldw	r3,0(r2)
   1eff4:	e0bffe17 	ldw	r2,-8(fp)
   1eff8:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   1effc:	e0bffe17 	ldw	r2,-8(fp)
   1f000:	10800317 	ldw	r2,12(r2)
   1f004:	10c00204 	addi	r3,r2,8
   1f008:	e0bffe17 	ldw	r2,-8(fp)
   1f00c:	10800317 	ldw	r2,12(r2)
   1f010:	10800204 	addi	r2,r2,8
   1f014:	10800037 	ldwio	r2,0(r2)
   1f018:	1009883a 	mov	r4,r2
   1f01c:	00bfff44 	movi	r2,-3
   1f020:	2088703a 	and	r4,r4,r2
   1f024:	e0bfff17 	ldw	r2,-4(fp)
   1f028:	10800117 	ldw	r2,4(r2)
   1f02c:	1085883a 	add	r2,r2,r2
   1f030:	1080008c 	andi	r2,r2,2
   1f034:	2084b03a 	or	r2,r4,r2
   1f038:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   1f03c:	e0bffe17 	ldw	r2,-8(fp)
   1f040:	10800317 	ldw	r2,12(r2)
   1f044:	10800904 	addi	r2,r2,36
   1f048:	e0ffff17 	ldw	r3,-4(fp)
   1f04c:	18c0020b 	ldhu	r3,8(r3)
   1f050:	18ffffcc 	andi	r3,r3,65535
   1f054:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   1f058:	e0bffe17 	ldw	r2,-8(fp)
   1f05c:	10800317 	ldw	r2,12(r2)
   1f060:	10800804 	addi	r2,r2,32
   1f064:	e0ffff17 	ldw	r3,-4(fp)
   1f068:	18c0028b 	ldhu	r3,10(r3)
   1f06c:	18ffffcc 	andi	r3,r3,65535
   1f070:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   1f074:	e0bffe17 	ldw	r2,-8(fp)
   1f078:	10800317 	ldw	r2,12(r2)
   1f07c:	10800a04 	addi	r2,r2,40
   1f080:	e0ffff17 	ldw	r3,-4(fp)
   1f084:	18c0030b 	ldhu	r3,12(r3)
   1f088:	18ffffcc 	andi	r3,r3,65535
   1f08c:	10c00035 	stwio	r3,0(r2)
}
   1f090:	0001883a 	nop
   1f094:	e037883a 	mov	sp,fp
   1f098:	df000017 	ldw	fp,0(sp)
   1f09c:	dec00104 	addi	sp,sp,4
   1f0a0:	f800283a 	ret

0001f0a4 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   1f0a4:	defffb04 	addi	sp,sp,-20
   1f0a8:	dfc00415 	stw	ra,16(sp)
   1f0ac:	df000315 	stw	fp,12(sp)
   1f0b0:	df000304 	addi	fp,sp,12
   1f0b4:	e13ffd15 	stw	r4,-12(fp)
   1f0b8:	e17ffe15 	stw	r5,-8(fp)
   1f0bc:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   1f0c0:	e0bffe17 	ldw	r2,-8(fp)
   1f0c4:	1080028b 	ldhu	r2,10(r2)
   1f0c8:	10bfffcc 	andi	r2,r2,65535
   1f0cc:	10000426 	beq	r2,zero,1f0e0 <alt_avalon_i2c_master_config_speed_get+0x3c>
   1f0d0:	e0bffe17 	ldw	r2,-8(fp)
   1f0d4:	1080020b 	ldhu	r2,8(r2)
   1f0d8:	10bfffcc 	andi	r2,r2,65535
   1f0dc:	1000021e 	bne	r2,zero,1f0e8 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   1f0e0:	00bfff44 	movi	r2,-3
   1f0e4:	00000f06 	br	1f124 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   1f0e8:	e0bffd17 	ldw	r2,-12(fp)
   1f0ec:	11000c17 	ldw	r4,48(r2)
   1f0f0:	e0bffe17 	ldw	r2,-8(fp)
   1f0f4:	1080028b 	ldhu	r2,10(r2)
   1f0f8:	10ffffcc 	andi	r3,r2,65535
   1f0fc:	e0bffe17 	ldw	r2,-8(fp)
   1f100:	1080020b 	ldhu	r2,8(r2)
   1f104:	10bfffcc 	andi	r2,r2,65535
   1f108:	1885883a 	add	r2,r3,r2
   1f10c:	100b883a 	mov	r5,r2
   1f110:	000cc380 	call	cc38 <__udivsi3>
   1f114:	1007883a 	mov	r3,r2
   1f118:	e0bfff17 	ldw	r2,-4(fp)
   1f11c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1f120:	0005883a 	mov	r2,zero
}
   1f124:	e037883a 	mov	sp,fp
   1f128:	dfc00117 	ldw	ra,4(sp)
   1f12c:	df000017 	ldw	fp,0(sp)
   1f130:	dec00204 	addi	sp,sp,8
   1f134:	f800283a 	ret

0001f138 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   1f138:	defff904 	addi	sp,sp,-28
   1f13c:	dfc00615 	stw	ra,24(sp)
   1f140:	df000515 	stw	fp,20(sp)
   1f144:	df000504 	addi	fp,sp,20
   1f148:	e13ffd15 	stw	r4,-12(fp)
   1f14c:	e17ffe15 	stw	r5,-8(fp)
   1f150:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   1f154:	e0ffff17 	ldw	r3,-4(fp)
   1f158:	008001b4 	movhi	r2,6
   1f15c:	1086a004 	addi	r2,r2,6784
   1f160:	10c00436 	bltu	r2,r3,1f174 <alt_avalon_i2c_master_config_speed_set+0x3c>
   1f164:	e0bfff17 	ldw	r2,-4(fp)
   1f168:	10000226 	beq	r2,zero,1f174 <alt_avalon_i2c_master_config_speed_set+0x3c>
   1f16c:	e0bfff17 	ldw	r2,-4(fp)
   1f170:	1000021e 	bne	r2,zero,1f17c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   1f174:	00bfff04 	movi	r2,-4
   1f178:	00002906 	br	1f220 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   1f17c:	e0bffd17 	ldw	r2,-12(fp)
   1f180:	10c00c17 	ldw	r3,48(r2)
   1f184:	e0bfff17 	ldw	r2,-4(fp)
   1f188:	1085883a 	add	r2,r2,r2
   1f18c:	100b883a 	mov	r5,r2
   1f190:	1809883a 	mov	r4,r3
   1f194:	000cc380 	call	cc38 <__udivsi3>
   1f198:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1f19c:	e0bffb17 	ldw	r2,-20(fp)
   1f1a0:	10800f04 	addi	r2,r2,60
   1f1a4:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1f1a8:	e0bffb17 	ldw	r2,-20(fp)
   1f1ac:	10bff104 	addi	r2,r2,-60
   1f1b0:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   1f1b4:	e0ffff17 	ldw	r3,-4(fp)
   1f1b8:	008000b4 	movhi	r2,2
   1f1bc:	10a1a804 	addi	r2,r2,-31072
   1f1c0:	10c0042e 	bgeu	r2,r3,1f1d4 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   1f1c4:	e0bffe17 	ldw	r2,-8(fp)
   1f1c8:	00c00044 	movi	r3,1
   1f1cc:	10c00115 	stw	r3,4(r2)
   1f1d0:	00000206 	br	1f1dc <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   1f1d4:	e0bffe17 	ldw	r2,-8(fp)
   1f1d8:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   1f1dc:	e0bffb17 	ldw	r2,-20(fp)
   1f1e0:	1007883a 	mov	r3,r2
   1f1e4:	e0bffe17 	ldw	r2,-8(fp)
   1f1e8:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   1f1ec:	e0bffc17 	ldw	r2,-16(fp)
   1f1f0:	1007883a 	mov	r3,r2
   1f1f4:	e0bffe17 	ldw	r2,-8(fp)
   1f1f8:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   1f1fc:	e0bffb17 	ldw	r2,-20(fp)
   1f200:	1007883a 	mov	r3,r2
   1f204:	e0bffb17 	ldw	r2,-20(fp)
   1f208:	1004d07a 	srli	r2,r2,1
   1f20c:	1885c83a 	sub	r2,r3,r2
   1f210:	1007883a 	mov	r3,r2
   1f214:	e0bffe17 	ldw	r2,-8(fp)
   1f218:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   1f21c:	0005883a 	mov	r2,zero

}
   1f220:	e037883a 	mov	sp,fp
   1f224:	dfc00117 	ldw	ra,4(sp)
   1f228:	df000017 	ldw	fp,0(sp)
   1f22c:	dec00204 	addi	sp,sp,8
   1f230:	f800283a 	ret

0001f234 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1f234:	defffe04 	addi	sp,sp,-8
   1f238:	df000115 	stw	fp,4(sp)
   1f23c:	df000104 	addi	fp,sp,4
   1f240:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   1f244:	e0bfff17 	ldw	r2,-4(fp)
   1f248:	10800317 	ldw	r2,12(r2)
   1f24c:	10800504 	addi	r2,r2,20
   1f250:	10800037 	ldwio	r2,0(r2)
   1f254:	1080004c 	andi	r2,r2,1
   1f258:	10000226 	beq	r2,zero,1f264 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   1f25c:	00800044 	movi	r2,1
   1f260:	00000106 	br	1f268 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   1f264:	0005883a 	mov	r2,zero
}
   1f268:	e037883a 	mov	sp,fp
   1f26c:	df000017 	ldw	fp,0(sp)
   1f270:	dec00104 	addi	sp,sp,4
   1f274:	f800283a 	ret

0001f278 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   1f278:	defffb04 	addi	sp,sp,-20
   1f27c:	df000415 	stw	fp,16(sp)
   1f280:	df000404 	addi	fp,sp,16
   1f284:	e13ffc15 	stw	r4,-16(fp)
   1f288:	e17ffd15 	stw	r5,-12(fp)
   1f28c:	e1bffe15 	stw	r6,-8(fp)
   1f290:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   1f294:	e0bfff17 	ldw	r2,-4(fp)
   1f298:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1f29c:	00001406 	br	1f2f0 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   1f2a0:	e0bfff17 	ldw	r2,-4(fp)
   1f2a4:	10800017 	ldw	r2,0(r2)
   1f2a8:	e0fffd17 	ldw	r3,-12(fp)
   1f2ac:	1885883a 	add	r2,r3,r2
   1f2b0:	e0fffc17 	ldw	r3,-16(fp)
   1f2b4:	18c00317 	ldw	r3,12(r3)
   1f2b8:	18c00104 	addi	r3,r3,4
   1f2bc:	18c00037 	ldwio	r3,0(r3)
   1f2c0:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   1f2c4:	e0bfff17 	ldw	r2,-4(fp)
   1f2c8:	10800017 	ldw	r2,0(r2)
   1f2cc:	10c00044 	addi	r3,r2,1
   1f2d0:	e0bfff17 	ldw	r2,-4(fp)
   1f2d4:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   1f2d8:	e0bfff17 	ldw	r2,-4(fp)
   1f2dc:	10c00017 	ldw	r3,0(r2)
   1f2e0:	e0bffe17 	ldw	r2,-8(fp)
   1f2e4:	1880021e 	bne	r3,r2,1f2f0 <alt_avalon_i2c_rx_read_available+0x78>
   1f2e8:	e0bffe17 	ldw	r2,-8(fp)
   1f2ec:	1000061e 	bne	r2,zero,1f308 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1f2f0:	e0bffc17 	ldw	r2,-16(fp)
   1f2f4:	10800317 	ldw	r2,12(r2)
   1f2f8:	10800704 	addi	r2,r2,28
   1f2fc:	10800037 	ldwio	r2,0(r2)
   1f300:	103fe71e 	bne	r2,zero,1f2a0 <__alt_data_end+0xfc01f2a0>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   1f304:	00000106 	br	1f30c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   1f308:	0001883a 	nop
    }
}
   1f30c:	0001883a 	nop
   1f310:	e037883a 	mov	sp,fp
   1f314:	df000017 	ldw	fp,0(sp)
   1f318:	dec00104 	addi	sp,sp,4
   1f31c:	f800283a 	ret

0001f320 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   1f320:	defffa04 	addi	sp,sp,-24
   1f324:	dfc00515 	stw	ra,20(sp)
   1f328:	df000415 	stw	fp,16(sp)
   1f32c:	df000404 	addi	fp,sp,16
   1f330:	e13ffe15 	stw	r4,-8(fp)
   1f334:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   1f338:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   1f33c:	008000b4 	movhi	r2,2
   1f340:	10a1a804 	addi	r2,r2,-31072
   1f344:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   1f348:	00000d06 	br	1f380 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   1f34c:	e0bffd17 	ldw	r2,-12(fp)
   1f350:	108002a8 	cmpgeui	r2,r2,10
   1f354:	1000021e 	bne	r2,zero,1f360 <alt_avalon_i2c_rx_read+0x40>
   1f358:	0109c404 	movi	r4,10000
   1f35c:	00215640 	call	21564 <alt_busy_sleep>
      if (--timeout == 0)
   1f360:	e0bffd17 	ldw	r2,-12(fp)
   1f364:	10bfffc4 	addi	r2,r2,-1
   1f368:	e0bffd15 	stw	r2,-12(fp)
   1f36c:	e0bffd17 	ldw	r2,-12(fp)
   1f370:	1000031e 	bne	r2,zero,1f380 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   1f374:	00bfff84 	movi	r2,-2
   1f378:	e0bffc15 	stw	r2,-16(fp)
        break;
   1f37c:	00000506 	br	1f394 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   1f380:	e0bffe17 	ldw	r2,-8(fp)
   1f384:	10800317 	ldw	r2,12(r2)
   1f388:	10800704 	addi	r2,r2,28
   1f38c:	10800037 	ldwio	r2,0(r2)
   1f390:	103fee26 	beq	r2,zero,1f34c <__alt_data_end+0xfc01f34c>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   1f394:	e0bffe17 	ldw	r2,-8(fp)
   1f398:	10800317 	ldw	r2,12(r2)
   1f39c:	10800104 	addi	r2,r2,4
   1f3a0:	10800037 	ldwio	r2,0(r2)
   1f3a4:	1007883a 	mov	r3,r2
   1f3a8:	e0bfff17 	ldw	r2,-4(fp)
   1f3ac:	10c00005 	stb	r3,0(r2)
        
    return status;
   1f3b0:	e0bffc17 	ldw	r2,-16(fp)
}
   1f3b4:	e037883a 	mov	sp,fp
   1f3b8:	dfc00117 	ldw	ra,4(sp)
   1f3bc:	df000017 	ldw	fp,0(sp)
   1f3c0:	dec00204 	addi	sp,sp,8
   1f3c4:	f800283a 	ret

0001f3c8 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   1f3c8:	defff804 	addi	sp,sp,-32
   1f3cc:	dfc00715 	stw	ra,28(sp)
   1f3d0:	df000615 	stw	fp,24(sp)
   1f3d4:	df000604 	addi	fp,sp,24
   1f3d8:	e13ffc15 	stw	r4,-16(fp)
   1f3dc:	2809883a 	mov	r4,r5
   1f3e0:	3007883a 	mov	r3,r6
   1f3e4:	3805883a 	mov	r2,r7
   1f3e8:	e13ffd05 	stb	r4,-12(fp)
   1f3ec:	e0fffe05 	stb	r3,-8(fp)
   1f3f0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   1f3f4:	0089c404 	movi	r2,10000
   1f3f8:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1f3fc:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   1f400:	00000c06 	br	1f434 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   1f404:	e0bffa17 	ldw	r2,-24(fp)
   1f408:	108002a8 	cmpgeui	r2,r2,10
   1f40c:	1000021e 	bne	r2,zero,1f418 <alt_avalon_i2c_cmd_write+0x50>
   1f410:	0109c404 	movi	r4,10000
   1f414:	00215640 	call	21564 <alt_busy_sleep>
      if (--timeout == 0)
   1f418:	e0bffa17 	ldw	r2,-24(fp)
   1f41c:	10bfffc4 	addi	r2,r2,-1
   1f420:	e0bffa15 	stw	r2,-24(fp)
   1f424:	e0bffa17 	ldw	r2,-24(fp)
   1f428:	1000021e 	bne	r2,zero,1f434 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   1f42c:	00bfff84 	movi	r2,-2
   1f430:	00001906 	br	1f498 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   1f434:	e0bffc17 	ldw	r2,-16(fp)
   1f438:	10800317 	ldw	r2,12(r2)
   1f43c:	10800404 	addi	r2,r2,16
   1f440:	10800037 	ldwio	r2,0(r2)
   1f444:	1080004c 	andi	r2,r2,1
   1f448:	103fee26 	beq	r2,zero,1f404 <__alt_data_end+0xfc01f404>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   1f44c:	e0bffc17 	ldw	r2,-16(fp)
   1f450:	10800317 	ldw	r2,12(r2)
   1f454:	e13ffd03 	ldbu	r4,-12(fp)
   1f458:	e0fffe03 	ldbu	r3,-8(fp)
   1f45c:	1806927a 	slli	r3,r3,9
   1f460:	20c8b03a 	or	r4,r4,r3
   1f464:	e0ffff03 	ldbu	r3,-4(fp)
   1f468:	1806923a 	slli	r3,r3,8
   1f46c:	20c6b03a 	or	r3,r4,r3
   1f470:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   1f474:	e0bffb04 	addi	r2,fp,-20
   1f478:	100b883a 	mov	r5,r2
   1f47c:	e13ffc17 	ldw	r4,-16(fp)
   1f480:	001f6080 	call	1f608 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   1f484:	e0bffb04 	addi	r2,fp,-20
   1f488:	100b883a 	mov	r5,r2
   1f48c:	e13ffc17 	ldw	r4,-16(fp)
   1f490:	001f6540 	call	1f654 <alt_avalon_i2c_check_arblost>
    
    return status;
   1f494:	e0bffb17 	ldw	r2,-20(fp)
}
   1f498:	e037883a 	mov	sp,fp
   1f49c:	dfc00117 	ldw	ra,4(sp)
   1f4a0:	df000017 	ldw	fp,0(sp)
   1f4a4:	dec00204 	addi	sp,sp,8
   1f4a8:	f800283a 	ret

0001f4ac <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   1f4ac:	defffa04 	addi	sp,sp,-24
   1f4b0:	dfc00515 	stw	ra,20(sp)
   1f4b4:	df000415 	stw	fp,16(sp)
   1f4b8:	df000404 	addi	fp,sp,16
   1f4bc:	e13ffd15 	stw	r4,-12(fp)
   1f4c0:	e17ffe15 	stw	r5,-8(fp)
   1f4c4:	3005883a 	mov	r2,r6
   1f4c8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   1f4cc:	e0bffd17 	ldw	r2,-12(fp)
   1f4d0:	10800d17 	ldw	r2,52(r2)
   1f4d4:	10800058 	cmpnei	r2,r2,1
   1f4d8:	10001c1e 	bne	r2,zero,1f54c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   1f4dc:	e0bffd17 	ldw	r2,-12(fp)
   1f4e0:	10800917 	ldw	r2,36(r2)
   1f4e4:	109e0014 	ori	r2,r2,30720
   1f4e8:	1004d1fa 	srli	r2,r2,7
   1f4ec:	1007883a 	mov	r3,r2
   1f4f0:	00bfff84 	movi	r2,-2
   1f4f4:	1884703a 	and	r2,r3,r2
   1f4f8:	1007883a 	mov	r3,r2
   1f4fc:	e0bffe17 	ldw	r2,-8(fp)
   1f500:	1884b03a 	or	r2,r3,r2
   1f504:	10803fcc 	andi	r2,r2,255
   1f508:	e0ffff03 	ldbu	r3,-4(fp)
   1f50c:	000f883a 	mov	r7,zero
   1f510:	180d883a 	mov	r6,r3
   1f514:	100b883a 	mov	r5,r2
   1f518:	e13ffd17 	ldw	r4,-12(fp)
   1f51c:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   1f520:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   1f524:	e0bffd17 	ldw	r2,-12(fp)
   1f528:	10800917 	ldw	r2,36(r2)
   1f52c:	10803fcc 	andi	r2,r2,255
   1f530:	000f883a 	mov	r7,zero
   1f534:	000d883a 	mov	r6,zero
   1f538:	100b883a 	mov	r5,r2
   1f53c:	e13ffd17 	ldw	r4,-12(fp)
   1f540:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   1f544:	e0bffc15 	stw	r2,-16(fp)
   1f548:	00000e06 	br	1f584 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   1f54c:	e0bffd17 	ldw	r2,-12(fp)
   1f550:	10800917 	ldw	r2,36(r2)
   1f554:	1085883a 	add	r2,r2,r2
   1f558:	1007883a 	mov	r3,r2
   1f55c:	e0bffe17 	ldw	r2,-8(fp)
   1f560:	1884b03a 	or	r2,r3,r2
   1f564:	10803fcc 	andi	r2,r2,255
   1f568:	e0ffff03 	ldbu	r3,-4(fp)
   1f56c:	000f883a 	mov	r7,zero
   1f570:	180d883a 	mov	r6,r3
   1f574:	100b883a 	mov	r5,r2
   1f578:	e13ffd17 	ldw	r4,-12(fp)
   1f57c:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   1f580:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   1f584:	e0bffc17 	ldw	r2,-16(fp)
}
   1f588:	e037883a 	mov	sp,fp
   1f58c:	dfc00117 	ldw	ra,4(sp)
   1f590:	df000017 	ldw	fp,0(sp)
   1f594:	dec00204 	addi	sp,sp,8
   1f598:	f800283a 	ret

0001f59c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   1f59c:	defffd04 	addi	sp,sp,-12
   1f5a0:	df000215 	stw	fp,8(sp)
   1f5a4:	df000204 	addi	fp,sp,8
   1f5a8:	e13ffe15 	stw	r4,-8(fp)
   1f5ac:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   1f5b0:	e0bffe17 	ldw	r2,-8(fp)
   1f5b4:	10c00917 	ldw	r3,36(r2)
   1f5b8:	e0bfff17 	ldw	r2,-4(fp)
   1f5bc:	10c00015 	stw	r3,0(r2)
}
   1f5c0:	0001883a 	nop
   1f5c4:	e037883a 	mov	sp,fp
   1f5c8:	df000017 	ldw	fp,0(sp)
   1f5cc:	dec00104 	addi	sp,sp,4
   1f5d0:	f800283a 	ret

0001f5d4 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   1f5d4:	defffd04 	addi	sp,sp,-12
   1f5d8:	df000215 	stw	fp,8(sp)
   1f5dc:	df000204 	addi	fp,sp,8
   1f5e0:	e13ffe15 	stw	r4,-8(fp)
   1f5e4:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   1f5e8:	e0bffe17 	ldw	r2,-8(fp)
   1f5ec:	e0ffff17 	ldw	r3,-4(fp)
   1f5f0:	10c00915 	stw	r3,36(r2)
}
   1f5f4:	0001883a 	nop
   1f5f8:	e037883a 	mov	sp,fp
   1f5fc:	df000017 	ldw	fp,0(sp)
   1f600:	dec00104 	addi	sp,sp,4
   1f604:	f800283a 	ret

0001f608 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   1f608:	defffd04 	addi	sp,sp,-12
   1f60c:	df000215 	stw	fp,8(sp)
   1f610:	df000204 	addi	fp,sp,8
   1f614:	e13ffe15 	stw	r4,-8(fp)
   1f618:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   1f61c:	e0bffe17 	ldw	r2,-8(fp)
   1f620:	10800317 	ldw	r2,12(r2)
   1f624:	10800404 	addi	r2,r2,16
   1f628:	10800037 	ldwio	r2,0(r2)
   1f62c:	1080010c 	andi	r2,r2,4
   1f630:	10000326 	beq	r2,zero,1f640 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   1f634:	e0bfff17 	ldw	r2,-4(fp)
   1f638:	00fffec4 	movi	r3,-5
   1f63c:	10c00015 	stw	r3,0(r2)
    }
}
   1f640:	0001883a 	nop
   1f644:	e037883a 	mov	sp,fp
   1f648:	df000017 	ldw	fp,0(sp)
   1f64c:	dec00104 	addi	sp,sp,4
   1f650:	f800283a 	ret

0001f654 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   1f654:	defffd04 	addi	sp,sp,-12
   1f658:	df000215 	stw	fp,8(sp)
   1f65c:	df000204 	addi	fp,sp,8
   1f660:	e13ffe15 	stw	r4,-8(fp)
   1f664:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   1f668:	e0bffe17 	ldw	r2,-8(fp)
   1f66c:	10800317 	ldw	r2,12(r2)
   1f670:	10800404 	addi	r2,r2,16
   1f674:	10800037 	ldwio	r2,0(r2)
   1f678:	1080020c 	andi	r2,r2,8
   1f67c:	10000326 	beq	r2,zero,1f68c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   1f680:	e0bfff17 	ldw	r2,-4(fp)
   1f684:	00fffe84 	movi	r3,-6
   1f688:	10c00015 	stw	r3,0(r2)
    }
}
   1f68c:	0001883a 	nop
   1f690:	e037883a 	mov	sp,fp
   1f694:	df000017 	ldw	fp,0(sp)
   1f698:	dec00104 	addi	sp,sp,4
   1f69c:	f800283a 	ret

0001f6a0 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1f6a0:	defff804 	addi	sp,sp,-32
   1f6a4:	dfc00715 	stw	ra,28(sp)
   1f6a8:	df000615 	stw	fp,24(sp)
   1f6ac:	df000604 	addi	fp,sp,24
   1f6b0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1f6b4:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1f6b8:	e0bfff17 	ldw	r2,-4(fp)
   1f6bc:	10800717 	ldw	r2,28(r2)
   1f6c0:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   1f6c4:	e0bffb17 	ldw	r2,-20(fp)
   1f6c8:	10800117 	ldw	r2,4(r2)
   1f6cc:	10800044 	addi	r2,r2,1
   1f6d0:	0149c404 	movi	r5,10000
   1f6d4:	1009883a 	mov	r4,r2
   1f6d8:	000ccf40 	call	ccf4 <__mulsi3>
   1f6dc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   1f6e0:	e0bffd04 	addi	r2,fp,-12
   1f6e4:	100b883a 	mov	r5,r2
   1f6e8:	e13fff17 	ldw	r4,-4(fp)
   1f6ec:	00205380 	call	20538 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   1f6f0:	e0bffd17 	ldw	r2,-12(fp)
   1f6f4:	100b883a 	mov	r5,r2
   1f6f8:	e13fff17 	ldw	r4,-4(fp)
   1f6fc:	002046c0 	call	2046c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   1f700:	e0bffc04 	addi	r2,fp,-16
   1f704:	100b883a 	mov	r5,r2
   1f708:	e13fff17 	ldw	r4,-4(fp)
   1f70c:	001f6080 	call	1f608 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   1f710:	e0bffc17 	ldw	r2,-16(fp)
   1f714:	10002226 	beq	r2,zero,1f7a0 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   1f718:	e0bffb17 	ldw	r2,-20(fp)
   1f71c:	10800217 	ldw	r2,8(r2)
   1f720:	10001d26 	beq	r2,zero,1f798 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   1f724:	00000d06 	br	1f75c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   1f728:	e0bffa17 	ldw	r2,-24(fp)
   1f72c:	108002a8 	cmpgeui	r2,r2,10
   1f730:	1000021e 	bne	r2,zero,1f73c <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   1f734:	0109c404 	movi	r4,10000
   1f738:	00215640 	call	21564 <alt_busy_sleep>
              if (--timeout == 0)
   1f73c:	e0bffa17 	ldw	r2,-24(fp)
   1f740:	10bfffc4 	addi	r2,r2,-1
   1f744:	e0bffa15 	stw	r2,-24(fp)
   1f748:	e0bffa17 	ldw	r2,-24(fp)
   1f74c:	1000031e 	bne	r2,zero,1f75c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   1f750:	00bfff84 	movi	r2,-2
   1f754:	e0bffc15 	stw	r2,-16(fp)
                 break;
   1f758:	00000306 	br	1f768 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   1f75c:	e13fff17 	ldw	r4,-4(fp)
   1f760:	001f2340 	call	1f234 <alt_avalon_i2c_is_busy>
   1f764:	103ff01e 	bne	r2,zero,1f728 <__alt_data_end+0xfc01f728>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   1f768:	e0bffb17 	ldw	r2,-20(fp)
   1f76c:	10800017 	ldw	r2,0(r2)
   1f770:	e0fffe04 	addi	r3,fp,-8
   1f774:	180f883a 	mov	r7,r3
   1f778:	000d883a 	mov	r6,zero
   1f77c:	100b883a 	mov	r5,r2
   1f780:	e13fff17 	ldw	r4,-4(fp)
   1f784:	001f2780 	call	1f278 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   1f788:	e13fff17 	ldw	r4,-4(fp)
   1f78c:	001eedc0 	call	1eedc <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   1f790:	e0bffb17 	ldw	r2,-20(fp)
   1f794:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   1f798:	e0bffc17 	ldw	r2,-16(fp)
   1f79c:	00000a06 	br	1f7c8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   1f7a0:	e0bffb17 	ldw	r2,-20(fp)
   1f7a4:	10800217 	ldw	r2,8(r2)
   1f7a8:	10000626 	beq	r2,zero,1f7c4 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   1f7ac:	e0bffd17 	ldw	r2,-12(fp)
   1f7b0:	100b883a 	mov	r5,r2
   1f7b4:	e13fff17 	ldw	r4,-4(fp)
   1f7b8:	00204d40 	call	204d4 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   1f7bc:	00bffe44 	movi	r2,-7
   1f7c0:	00000106 	br	1f7c8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   1f7c4:	0005883a 	mov	r2,zero
}
   1f7c8:	e037883a 	mov	sp,fp
   1f7cc:	dfc00117 	ldw	ra,4(sp)
   1f7d0:	df000017 	ldw	fp,0(sp)
   1f7d4:	dec00204 	addi	sp,sp,8
   1f7d8:	f800283a 	ret

0001f7dc <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   1f7dc:	defff704 	addi	sp,sp,-36
   1f7e0:	dfc00815 	stw	ra,32(sp)
   1f7e4:	df000715 	stw	fp,28(sp)
   1f7e8:	df000704 	addi	fp,sp,28
   1f7ec:	e13ffc15 	stw	r4,-16(fp)
   1f7f0:	e17ffd15 	stw	r5,-12(fp)
   1f7f4:	e1bffe15 	stw	r6,-8(fp)
   1f7f8:	3805883a 	mov	r2,r7
   1f7fc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1f800:	0089c404 	movi	r2,10000
   1f804:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   1f808:	00002206 	br	1f894 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   1f80c:	e0bffb17 	ldw	r2,-20(fp)
   1f810:	108002a8 	cmpgeui	r2,r2,10
   1f814:	1000021e 	bne	r2,zero,1f820 <alt_avalon_i2c_master_tx+0x44>
   1f818:	0109c404 	movi	r4,10000
   1f81c:	00215640 	call	21564 <alt_busy_sleep>
      if (use_interrupts)
   1f820:	e0bfff03 	ldbu	r2,-4(fp)
   1f824:	10000926 	beq	r2,zero,1f84c <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   1f828:	00800044 	movi	r2,1
   1f82c:	d8800015 	stw	r2,0(sp)
   1f830:	000f883a 	mov	r7,zero
   1f834:	e1bffe17 	ldw	r6,-8(fp)
   1f838:	e17ffd17 	ldw	r5,-12(fp)
   1f83c:	e13ffc17 	ldw	r4,-16(fp)
   1f840:	001fd880 	call	1fd88 <alt_avalon_i2c_master_transmit_using_interrupts>
   1f844:	e0bffa15 	stw	r2,-24(fp)
   1f848:	00000806 	br	1f86c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   1f84c:	00800044 	movi	r2,1
   1f850:	d8800015 	stw	r2,0(sp)
   1f854:	000f883a 	mov	r7,zero
   1f858:	e1bffe17 	ldw	r6,-8(fp)
   1f85c:	e17ffd17 	ldw	r5,-12(fp)
   1f860:	e13ffc17 	ldw	r4,-16(fp)
   1f864:	001fbc80 	call	1fbc8 <alt_avalon_i2c_master_transmit>
   1f868:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1f86c:	e0bffa17 	ldw	r2,-24(fp)
   1f870:	10bffea0 	cmpeqi	r2,r2,-6
   1f874:	1000061e 	bne	r2,zero,1f890 <alt_avalon_i2c_master_tx+0xb4>
   1f878:	e0bffa17 	ldw	r2,-24(fp)
   1f87c:	10bffee0 	cmpeqi	r2,r2,-5
   1f880:	1000031e 	bne	r2,zero,1f890 <alt_avalon_i2c_master_tx+0xb4>
   1f884:	e0bffa17 	ldw	r2,-24(fp)
   1f888:	10bffe58 	cmpnei	r2,r2,-7
   1f88c:	1000061e 	bne	r2,zero,1f8a8 <alt_avalon_i2c_master_tx+0xcc>
   1f890:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   1f894:	e0bffb17 	ldw	r2,-20(fp)
   1f898:	10ffffc4 	addi	r3,r2,-1
   1f89c:	e0fffb15 	stw	r3,-20(fp)
   1f8a0:	103fda1e 	bne	r2,zero,1f80c <__alt_data_end+0xfc01f80c>
   1f8a4:	00000106 	br	1f8ac <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   1f8a8:	0001883a 	nop
    }

    return status;
   1f8ac:	e0bffa17 	ldw	r2,-24(fp)
}        
   1f8b0:	e037883a 	mov	sp,fp
   1f8b4:	dfc00117 	ldw	ra,4(sp)
   1f8b8:	df000017 	ldw	fp,0(sp)
   1f8bc:	dec00204 	addi	sp,sp,8
   1f8c0:	f800283a 	ret

0001f8c4 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   1f8c4:	defff704 	addi	sp,sp,-36
   1f8c8:	dfc00815 	stw	ra,32(sp)
   1f8cc:	df000715 	stw	fp,28(sp)
   1f8d0:	df000704 	addi	fp,sp,28
   1f8d4:	e13ffc15 	stw	r4,-16(fp)
   1f8d8:	e17ffd15 	stw	r5,-12(fp)
   1f8dc:	e1bffe15 	stw	r6,-8(fp)
   1f8e0:	3805883a 	mov	r2,r7
   1f8e4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1f8e8:	0089c404 	movi	r2,10000
   1f8ec:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   1f8f0:	e0bfff03 	ldbu	r2,-4(fp)
   1f8f4:	10003426 	beq	r2,zero,1f9c8 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   1f8f8:	00001706 	br	1f958 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   1f8fc:	e0bffb17 	ldw	r2,-20(fp)
   1f900:	108002a8 	cmpgeui	r2,r2,10
   1f904:	1000021e 	bne	r2,zero,1f910 <alt_avalon_i2c_master_rx+0x4c>
   1f908:	0109c404 	movi	r4,10000
   1f90c:	00215640 	call	21564 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   1f910:	00800044 	movi	r2,1
   1f914:	d8800015 	stw	r2,0(sp)
   1f918:	000f883a 	mov	r7,zero
   1f91c:	e1bffe17 	ldw	r6,-8(fp)
   1f920:	e17ffd17 	ldw	r5,-12(fp)
   1f924:	e13ffc17 	ldw	r4,-16(fp)
   1f928:	00201a40 	call	201a4 <alt_avalon_i2c_master_receive_using_interrupts>
   1f92c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1f930:	e0bffa17 	ldw	r2,-24(fp)
   1f934:	10bffea0 	cmpeqi	r2,r2,-6
   1f938:	1000061e 	bne	r2,zero,1f954 <alt_avalon_i2c_master_rx+0x90>
   1f93c:	e0bffa17 	ldw	r2,-24(fp)
   1f940:	10bffee0 	cmpeqi	r2,r2,-5
   1f944:	1000031e 	bne	r2,zero,1f954 <alt_avalon_i2c_master_rx+0x90>
   1f948:	e0bffa17 	ldw	r2,-24(fp)
   1f94c:	10bffe58 	cmpnei	r2,r2,-7
   1f950:	1000221e 	bne	r2,zero,1f9dc <alt_avalon_i2c_master_rx+0x118>
   1f954:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   1f958:	e0bffb17 	ldw	r2,-20(fp)
   1f95c:	10ffffc4 	addi	r3,r2,-1
   1f960:	e0fffb15 	stw	r3,-20(fp)
   1f964:	103fe51e 	bne	r2,zero,1f8fc <__alt_data_end+0xfc01f8fc>
   1f968:	00001f06 	br	1f9e8 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   1f96c:	e0bffb17 	ldw	r2,-20(fp)
   1f970:	108002a8 	cmpgeui	r2,r2,10
   1f974:	1000021e 	bne	r2,zero,1f980 <alt_avalon_i2c_master_rx+0xbc>
   1f978:	0109c404 	movi	r4,10000
   1f97c:	00215640 	call	21564 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   1f980:	00800044 	movi	r2,1
   1f984:	d8800015 	stw	r2,0(sp)
   1f988:	000f883a 	mov	r7,zero
   1f98c:	e1bffe17 	ldw	r6,-8(fp)
   1f990:	e17ffd17 	ldw	r5,-12(fp)
   1f994:	e13ffc17 	ldw	r4,-16(fp)
   1f998:	001ff940 	call	1ff94 <alt_avalon_i2c_master_receive>
   1f99c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1f9a0:	e0bffa17 	ldw	r2,-24(fp)
   1f9a4:	10bffea0 	cmpeqi	r2,r2,-6
   1f9a8:	1000061e 	bne	r2,zero,1f9c4 <alt_avalon_i2c_master_rx+0x100>
   1f9ac:	e0bffa17 	ldw	r2,-24(fp)
   1f9b0:	10bffee0 	cmpeqi	r2,r2,-5
   1f9b4:	1000031e 	bne	r2,zero,1f9c4 <alt_avalon_i2c_master_rx+0x100>
   1f9b8:	e0bffa17 	ldw	r2,-24(fp)
   1f9bc:	10bffe58 	cmpnei	r2,r2,-7
   1f9c0:	1000081e 	bne	r2,zero,1f9e4 <alt_avalon_i2c_master_rx+0x120>
   1f9c4:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   1f9c8:	e0bffb17 	ldw	r2,-20(fp)
   1f9cc:	10ffffc4 	addi	r3,r2,-1
   1f9d0:	e0fffb15 	stw	r3,-20(fp)
   1f9d4:	103fe51e 	bne	r2,zero,1f96c <__alt_data_end+0xfc01f96c>
   1f9d8:	00000306 	br	1f9e8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   1f9dc:	0001883a 	nop
   1f9e0:	00000106 	br	1f9e8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   1f9e4:	0001883a 	nop
      }
    }
    
    return status;
   1f9e8:	e0bffa17 	ldw	r2,-24(fp)
}        
   1f9ec:	e037883a 	mov	sp,fp
   1f9f0:	dfc00117 	ldw	ra,4(sp)
   1f9f4:	df000017 	ldw	fp,0(sp)
   1f9f8:	dec00204 	addi	sp,sp,8
   1f9fc:	f800283a 	ret

0001fa00 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   1fa00:	defff604 	addi	sp,sp,-40
   1fa04:	dfc00915 	stw	ra,36(sp)
   1fa08:	df000815 	stw	fp,32(sp)
   1fa0c:	df000804 	addi	fp,sp,32
   1fa10:	e13ffb15 	stw	r4,-20(fp)
   1fa14:	e17ffc15 	stw	r5,-16(fp)
   1fa18:	e1bffd15 	stw	r6,-12(fp)
   1fa1c:	e1fffe15 	stw	r7,-8(fp)
   1fa20:	e0800317 	ldw	r2,12(fp)
   1fa24:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   1fa28:	0089c404 	movi	r2,10000
   1fa2c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   1fa30:	e0bfff03 	ldbu	r2,-4(fp)
   1fa34:	10005626 	beq	r2,zero,1fb90 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   1fa38:	00002806 	br	1fadc <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   1fa3c:	e0bffa17 	ldw	r2,-24(fp)
   1fa40:	108002a8 	cmpgeui	r2,r2,10
   1fa44:	1000021e 	bne	r2,zero,1fa50 <alt_avalon_i2c_master_tx_rx+0x50>
   1fa48:	0109c404 	movi	r4,10000
   1fa4c:	00215640 	call	21564 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   1fa50:	d8000015 	stw	zero,0(sp)
   1fa54:	000f883a 	mov	r7,zero
   1fa58:	e1bffd17 	ldw	r6,-12(fp)
   1fa5c:	e17ffc17 	ldw	r5,-16(fp)
   1fa60:	e13ffb17 	ldw	r4,-20(fp)
   1fa64:	001fd880 	call	1fd88 <alt_avalon_i2c_master_transmit_using_interrupts>
   1fa68:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1fa6c:	e0bff917 	ldw	r2,-28(fp)
   1fa70:	10bffea0 	cmpeqi	r2,r2,-6
   1fa74:	1000191e 	bne	r2,zero,1fadc <alt_avalon_i2c_master_tx_rx+0xdc>
   1fa78:	e0bff917 	ldw	r2,-28(fp)
   1fa7c:	10bffee0 	cmpeqi	r2,r2,-5
   1fa80:	1000161e 	bne	r2,zero,1fadc <alt_avalon_i2c_master_tx_rx+0xdc>
   1fa84:	e0bff917 	ldw	r2,-28(fp)
   1fa88:	10bffe58 	cmpnei	r2,r2,-7
   1fa8c:	1000011e 	bne	r2,zero,1fa94 <alt_avalon_i2c_master_tx_rx+0x94>
   1fa90:	00001206 	br	1fadc <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   1fa94:	00800044 	movi	r2,1
   1fa98:	d8800015 	stw	r2,0(sp)
   1fa9c:	01c00044 	movi	r7,1
   1faa0:	e1800217 	ldw	r6,8(fp)
   1faa4:	e17ffe17 	ldw	r5,-8(fp)
   1faa8:	e13ffb17 	ldw	r4,-20(fp)
   1faac:	00201a40 	call	201a4 <alt_avalon_i2c_master_receive_using_interrupts>
   1fab0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1fab4:	e0bff917 	ldw	r2,-28(fp)
   1fab8:	10bffea0 	cmpeqi	r2,r2,-6
   1fabc:	1000061e 	bne	r2,zero,1fad8 <alt_avalon_i2c_master_tx_rx+0xd8>
   1fac0:	e0bff917 	ldw	r2,-28(fp)
   1fac4:	10bffee0 	cmpeqi	r2,r2,-5
   1fac8:	1000031e 	bne	r2,zero,1fad8 <alt_avalon_i2c_master_tx_rx+0xd8>
   1facc:	e0bff917 	ldw	r2,-28(fp)
   1fad0:	10bffe58 	cmpnei	r2,r2,-7
   1fad4:	1000331e 	bne	r2,zero,1fba4 <alt_avalon_i2c_master_tx_rx+0x1a4>
   1fad8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   1fadc:	e0bffa17 	ldw	r2,-24(fp)
   1fae0:	10ffffc4 	addi	r3,r2,-1
   1fae4:	e0fffa15 	stw	r3,-24(fp)
   1fae8:	103fd41e 	bne	r2,zero,1fa3c <__alt_data_end+0xfc01fa3c>
   1faec:	00003006 	br	1fbb0 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   1faf0:	e0bffa17 	ldw	r2,-24(fp)
   1faf4:	108002a8 	cmpgeui	r2,r2,10
   1faf8:	1000021e 	bne	r2,zero,1fb04 <alt_avalon_i2c_master_tx_rx+0x104>
   1fafc:	0109c404 	movi	r4,10000
   1fb00:	00215640 	call	21564 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   1fb04:	d8000015 	stw	zero,0(sp)
   1fb08:	000f883a 	mov	r7,zero
   1fb0c:	e1bffd17 	ldw	r6,-12(fp)
   1fb10:	e17ffc17 	ldw	r5,-16(fp)
   1fb14:	e13ffb17 	ldw	r4,-20(fp)
   1fb18:	001fbc80 	call	1fbc8 <alt_avalon_i2c_master_transmit>
   1fb1c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1fb20:	e0bff917 	ldw	r2,-28(fp)
   1fb24:	10bffea0 	cmpeqi	r2,r2,-6
   1fb28:	1000191e 	bne	r2,zero,1fb90 <alt_avalon_i2c_master_tx_rx+0x190>
   1fb2c:	e0bff917 	ldw	r2,-28(fp)
   1fb30:	10bffee0 	cmpeqi	r2,r2,-5
   1fb34:	1000161e 	bne	r2,zero,1fb90 <alt_avalon_i2c_master_tx_rx+0x190>
   1fb38:	e0bff917 	ldw	r2,-28(fp)
   1fb3c:	10bffe58 	cmpnei	r2,r2,-7
   1fb40:	1000011e 	bne	r2,zero,1fb48 <alt_avalon_i2c_master_tx_rx+0x148>
   1fb44:	00001206 	br	1fb90 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   1fb48:	00800044 	movi	r2,1
   1fb4c:	d8800015 	stw	r2,0(sp)
   1fb50:	01c00044 	movi	r7,1
   1fb54:	e1800217 	ldw	r6,8(fp)
   1fb58:	e17ffe17 	ldw	r5,-8(fp)
   1fb5c:	e13ffb17 	ldw	r4,-20(fp)
   1fb60:	001ff940 	call	1ff94 <alt_avalon_i2c_master_receive>
   1fb64:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1fb68:	e0bff917 	ldw	r2,-28(fp)
   1fb6c:	10bffea0 	cmpeqi	r2,r2,-6
   1fb70:	1000061e 	bne	r2,zero,1fb8c <alt_avalon_i2c_master_tx_rx+0x18c>
   1fb74:	e0bff917 	ldw	r2,-28(fp)
   1fb78:	10bffee0 	cmpeqi	r2,r2,-5
   1fb7c:	1000031e 	bne	r2,zero,1fb8c <alt_avalon_i2c_master_tx_rx+0x18c>
   1fb80:	e0bff917 	ldw	r2,-28(fp)
   1fb84:	10bffe58 	cmpnei	r2,r2,-7
   1fb88:	1000081e 	bne	r2,zero,1fbac <alt_avalon_i2c_master_tx_rx+0x1ac>
   1fb8c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   1fb90:	e0bffa17 	ldw	r2,-24(fp)
   1fb94:	10ffffc4 	addi	r3,r2,-1
   1fb98:	e0fffa15 	stw	r3,-24(fp)
   1fb9c:	103fd41e 	bne	r2,zero,1faf0 <__alt_data_end+0xfc01faf0>
   1fba0:	00000306 	br	1fbb0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   1fba4:	0001883a 	nop
   1fba8:	00000106 	br	1fbb0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   1fbac:	0001883a 	nop
      }
    }
    
    return status;
   1fbb0:	e0bff917 	ldw	r2,-28(fp)
}                                       
   1fbb4:	e037883a 	mov	sp,fp
   1fbb8:	dfc00117 	ldw	ra,4(sp)
   1fbbc:	df000017 	ldw	fp,0(sp)
   1fbc0:	dec00204 	addi	sp,sp,8
   1fbc4:	f800283a 	ret

0001fbc8 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1fbc8:	defff704 	addi	sp,sp,-36
   1fbcc:	dfc00815 	stw	ra,32(sp)
   1fbd0:	df000715 	stw	fp,28(sp)
   1fbd4:	df000704 	addi	fp,sp,28
   1fbd8:	e13ffb15 	stw	r4,-20(fp)
   1fbdc:	e17ffc15 	stw	r5,-16(fp)
   1fbe0:	e1bffd15 	stw	r6,-12(fp)
   1fbe4:	3807883a 	mov	r3,r7
   1fbe8:	e0800217 	ldw	r2,8(fp)
   1fbec:	e0fffe05 	stb	r3,-8(fp)
   1fbf0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1fbf4:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   1fbf8:	0149c404 	movi	r5,10000
   1fbfc:	e13ffd17 	ldw	r4,-12(fp)
   1fc00:	000ccf40 	call	ccf4 <__mulsi3>
   1fc04:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   1fc08:	e0bffd17 	ldw	r2,-12(fp)
   1fc0c:	1000021e 	bne	r2,zero,1fc18 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   1fc10:	0005883a 	mov	r2,zero
   1fc14:	00005706 	br	1fd74 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1fc18:	e0bffe03 	ldbu	r2,-8(fp)
   1fc1c:	10000a1e 	bne	r2,zero,1fc48 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1fc20:	e13ffb17 	ldw	r4,-20(fp)
   1fc24:	001ee440 	call	1ee44 <alt_avalon_i2c_enable>
   1fc28:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1fc2c:	e0bffa17 	ldw	r2,-24(fp)
   1fc30:	10000226 	beq	r2,zero,1fc3c <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   1fc34:	e0bffa17 	ldw	r2,-24(fp)
   1fc38:	00004e06 	br	1fd74 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fc3c:	01400704 	movi	r5,28
   1fc40:	e13ffb17 	ldw	r4,-20(fp)
   1fc44:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   1fc48:	e0bffe03 	ldbu	r2,-8(fp)
   1fc4c:	100d883a 	mov	r6,r2
   1fc50:	000b883a 	mov	r5,zero
   1fc54:	e13ffb17 	ldw	r4,-20(fp)
   1fc58:	001f4ac0 	call	1f4ac <alt_avalon_i2c_send_address>
   1fc5c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   1fc60:	e0bffa17 	ldw	r2,-24(fp)
   1fc64:	1000271e 	bne	r2,zero,1fd04 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fc68:	00000f06 	br	1fca8 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1fc6c:	e0bffc17 	ldw	r2,-16(fp)
   1fc70:	10800003 	ldbu	r2,0(r2)
   1fc74:	10803fcc 	andi	r2,r2,255
   1fc78:	000f883a 	mov	r7,zero
   1fc7c:	000d883a 	mov	r6,zero
   1fc80:	100b883a 	mov	r5,r2
   1fc84:	e13ffb17 	ldw	r4,-20(fp)
   1fc88:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   1fc8c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   1fc90:	e0bffc17 	ldw	r2,-16(fp)
   1fc94:	10800044 	addi	r2,r2,1
   1fc98:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fc9c:	e0bffd17 	ldw	r2,-12(fp)
   1fca0:	10bfffc4 	addi	r2,r2,-1
   1fca4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fca8:	e0bffd17 	ldw	r2,-12(fp)
   1fcac:	108000b0 	cmpltui	r2,r2,2
   1fcb0:	1000021e 	bne	r2,zero,1fcbc <alt_avalon_i2c_master_transmit+0xf4>
   1fcb4:	e0bffa17 	ldw	r2,-24(fp)
   1fcb8:	103fec26 	beq	r2,zero,1fc6c <__alt_data_end+0xfc01fc6c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1fcbc:	e0bffa17 	ldw	r2,-24(fp)
   1fcc0:	1000101e 	bne	r2,zero,1fd04 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   1fcc4:	e0bffc17 	ldw	r2,-16(fp)
   1fcc8:	10800003 	ldbu	r2,0(r2)
   1fccc:	10803fcc 	andi	r2,r2,255
   1fcd0:	e0ffff03 	ldbu	r3,-4(fp)
   1fcd4:	180f883a 	mov	r7,r3
   1fcd8:	000d883a 	mov	r6,zero
   1fcdc:	100b883a 	mov	r5,r2
   1fce0:	e13ffb17 	ldw	r4,-20(fp)
   1fce4:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   1fce8:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   1fcec:	e0bffc17 	ldw	r2,-16(fp)
   1fcf0:	10800044 	addi	r2,r2,1
   1fcf4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fcf8:	e0bffd17 	ldw	r2,-12(fp)
   1fcfc:	10bfffc4 	addi	r2,r2,-1
   1fd00:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   1fd04:	e0bfff03 	ldbu	r2,-4(fp)
   1fd08:	1000101e 	bne	r2,zero,1fd4c <alt_avalon_i2c_master_transmit+0x184>
   1fd0c:	e0bffa17 	ldw	r2,-24(fp)
   1fd10:	10001726 	beq	r2,zero,1fd70 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1fd14:	00000d06 	br	1fd4c <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   1fd18:	e0bff917 	ldw	r2,-28(fp)
   1fd1c:	108002a8 	cmpgeui	r2,r2,10
   1fd20:	1000021e 	bne	r2,zero,1fd2c <alt_avalon_i2c_master_transmit+0x164>
   1fd24:	0109c404 	movi	r4,10000
   1fd28:	00215640 	call	21564 <alt_busy_sleep>
            if (--timeout == 0)
   1fd2c:	e0bff917 	ldw	r2,-28(fp)
   1fd30:	10bfffc4 	addi	r2,r2,-1
   1fd34:	e0bff915 	stw	r2,-28(fp)
   1fd38:	e0bff917 	ldw	r2,-28(fp)
   1fd3c:	1000031e 	bne	r2,zero,1fd4c <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1fd40:	00bfff84 	movi	r2,-2
   1fd44:	e0bffa15 	stw	r2,-24(fp)
               break;
   1fd48:	00000306 	br	1fd58 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1fd4c:	e13ffb17 	ldw	r4,-20(fp)
   1fd50:	001f2340 	call	1f234 <alt_avalon_i2c_is_busy>
   1fd54:	103ff01e 	bne	r2,zero,1fd18 <__alt_data_end+0xfc01fd18>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   1fd58:	e0bffa04 	addi	r2,fp,-24
   1fd5c:	100b883a 	mov	r5,r2
   1fd60:	e13ffb17 	ldw	r4,-20(fp)
   1fd64:	001f6080 	call	1f608 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   1fd68:	e13ffb17 	ldw	r4,-20(fp)
   1fd6c:	001eedc0 	call	1eedc <alt_avalon_i2c_disable>
    }


    return status;
   1fd70:	e0bffa17 	ldw	r2,-24(fp)
}
   1fd74:	e037883a 	mov	sp,fp
   1fd78:	dfc00117 	ldw	ra,4(sp)
   1fd7c:	df000017 	ldw	fp,0(sp)
   1fd80:	dec00204 	addi	sp,sp,8
   1fd84:	f800283a 	ret

0001fd88 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1fd88:	defff604 	addi	sp,sp,-40
   1fd8c:	dfc00915 	stw	ra,36(sp)
   1fd90:	df000815 	stw	fp,32(sp)
   1fd94:	df000804 	addi	fp,sp,32
   1fd98:	e13ffb15 	stw	r4,-20(fp)
   1fd9c:	e17ffc15 	stw	r5,-16(fp)
   1fda0:	e1bffd15 	stw	r6,-12(fp)
   1fda4:	3807883a 	mov	r3,r7
   1fda8:	e0800217 	ldw	r2,8(fp)
   1fdac:	e0fffe05 	stb	r3,-8(fp)
   1fdb0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1fdb4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   1fdb8:	0149c404 	movi	r5,10000
   1fdbc:	e13ffd17 	ldw	r4,-12(fp)
   1fdc0:	000ccf40 	call	ccf4 <__mulsi3>
   1fdc4:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   1fdc8:	e0bffb17 	ldw	r2,-20(fp)
   1fdcc:	10800717 	ldw	r2,28(r2)
   1fdd0:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   1fdd4:	e0bffd17 	ldw	r2,-12(fp)
   1fdd8:	1000021e 	bne	r2,zero,1fde4 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   1fddc:	0005883a 	mov	r2,zero
   1fde0:	00006706 	br	1ff80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   1fde4:	e0bffb17 	ldw	r2,-20(fp)
   1fde8:	10c00617 	ldw	r3,24(r2)
   1fdec:	008000b4 	movhi	r2,2
   1fdf0:	10bab204 	addi	r2,r2,-5432
   1fdf4:	18800226 	beq	r3,r2,1fe00 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   1fdf8:	00bfff44 	movi	r2,-3
   1fdfc:	00006006 	br	1ff80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1fe00:	e0bffe03 	ldbu	r2,-8(fp)
   1fe04:	10000a1e 	bne	r2,zero,1fe30 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1fe08:	e13ffb17 	ldw	r4,-20(fp)
   1fe0c:	001ee440 	call	1ee44 <alt_avalon_i2c_enable>
   1fe10:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1fe14:	e0bff817 	ldw	r2,-32(fp)
   1fe18:	10000226 	beq	r2,zero,1fe24 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   1fe1c:	e0bff817 	ldw	r2,-32(fp)
   1fe20:	00005706 	br	1ff80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fe24:	01400704 	movi	r5,28
   1fe28:	e13ffb17 	ldw	r4,-20(fp)
   1fe2c:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   1fe30:	e0bffe03 	ldbu	r2,-8(fp)
   1fe34:	100d883a 	mov	r6,r2
   1fe38:	000b883a 	mov	r5,zero
   1fe3c:	e13ffb17 	ldw	r4,-20(fp)
   1fe40:	001f4ac0 	call	1f4ac <alt_avalon_i2c_send_address>
   1fe44:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   1fe48:	e0bff817 	ldw	r2,-32(fp)
   1fe4c:	1000271e 	bne	r2,zero,1feec <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fe50:	00000f06 	br	1fe90 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1fe54:	e0bffc17 	ldw	r2,-16(fp)
   1fe58:	10800003 	ldbu	r2,0(r2)
   1fe5c:	10803fcc 	andi	r2,r2,255
   1fe60:	000f883a 	mov	r7,zero
   1fe64:	000d883a 	mov	r6,zero
   1fe68:	100b883a 	mov	r5,r2
   1fe6c:	e13ffb17 	ldw	r4,-20(fp)
   1fe70:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   1fe74:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   1fe78:	e0bffc17 	ldw	r2,-16(fp)
   1fe7c:	10800044 	addi	r2,r2,1
   1fe80:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fe84:	e0bffd17 	ldw	r2,-12(fp)
   1fe88:	10bfffc4 	addi	r2,r2,-1
   1fe8c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1fe90:	e0bffd17 	ldw	r2,-12(fp)
   1fe94:	108000b0 	cmpltui	r2,r2,2
   1fe98:	1000021e 	bne	r2,zero,1fea4 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   1fe9c:	e0bff817 	ldw	r2,-32(fp)
   1fea0:	103fec26 	beq	r2,zero,1fe54 <__alt_data_end+0xfc01fe54>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1fea4:	e0bff817 	ldw	r2,-32(fp)
   1fea8:	1000101e 	bne	r2,zero,1feec <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   1feac:	e0bffc17 	ldw	r2,-16(fp)
   1feb0:	10800003 	ldbu	r2,0(r2)
   1feb4:	10803fcc 	andi	r2,r2,255
   1feb8:	e0ffff03 	ldbu	r3,-4(fp)
   1febc:	180f883a 	mov	r7,r3
   1fec0:	000d883a 	mov	r6,zero
   1fec4:	100b883a 	mov	r5,r2
   1fec8:	e13ffb17 	ldw	r4,-20(fp)
   1fecc:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   1fed0:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   1fed4:	e0bffc17 	ldw	r2,-16(fp)
   1fed8:	10800044 	addi	r2,r2,1
   1fedc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   1fee0:	e0bffd17 	ldw	r2,-12(fp)
   1fee4:	10bfffc4 	addi	r2,r2,-1
   1fee8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   1feec:	e0bff817 	ldw	r2,-32(fp)
   1fef0:	10001426 	beq	r2,zero,1ff44 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1fef4:	00000d06 	br	1ff2c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   1fef8:	e0bff917 	ldw	r2,-28(fp)
   1fefc:	108002a8 	cmpgeui	r2,r2,10
   1ff00:	1000021e 	bne	r2,zero,1ff0c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   1ff04:	0109c404 	movi	r4,10000
   1ff08:	00215640 	call	21564 <alt_busy_sleep>
            if (--timeout == 0)
   1ff0c:	e0bff917 	ldw	r2,-28(fp)
   1ff10:	10bfffc4 	addi	r2,r2,-1
   1ff14:	e0bff915 	stw	r2,-28(fp)
   1ff18:	e0bff917 	ldw	r2,-28(fp)
   1ff1c:	1000031e 	bne	r2,zero,1ff2c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1ff20:	00bfff84 	movi	r2,-2
   1ff24:	e0bff815 	stw	r2,-32(fp)
               break;
   1ff28:	00000306 	br	1ff38 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1ff2c:	e13ffb17 	ldw	r4,-20(fp)
   1ff30:	001f2340 	call	1f234 <alt_avalon_i2c_is_busy>
   1ff34:	103ff01e 	bne	r2,zero,1fef8 <__alt_data_end+0xfc01fef8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   1ff38:	e13ffb17 	ldw	r4,-20(fp)
   1ff3c:	001eedc0 	call	1eedc <alt_avalon_i2c_disable>
   1ff40:	00000e06 	br	1ff7c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   1ff44:	e0bfff03 	ldbu	r2,-4(fp)
   1ff48:	10000c26 	beq	r2,zero,1ff7c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1ff4c:	01400704 	movi	r5,28
   1ff50:	e13ffb17 	ldw	r4,-20(fp)
   1ff54:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   1ff58:	000b883a 	mov	r5,zero
   1ff5c:	e13ffb17 	ldw	r4,-20(fp)
   1ff60:	00206780 	call	20678 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   1ff64:	e0bffa17 	ldw	r2,-24(fp)
   1ff68:	00c00044 	movi	r3,1
   1ff6c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   1ff70:	01400044 	movi	r5,1
   1ff74:	e13ffb17 	ldw	r4,-20(fp)
   1ff78:	00204d40 	call	204d4 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   1ff7c:	e0bff817 	ldw	r2,-32(fp)
}
   1ff80:	e037883a 	mov	sp,fp
   1ff84:	dfc00117 	ldw	ra,4(sp)
   1ff88:	df000017 	ldw	fp,0(sp)
   1ff8c:	dec00204 	addi	sp,sp,8
   1ff90:	f800283a 	ret

0001ff94 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   1ff94:	defff404 	addi	sp,sp,-48
   1ff98:	dfc00b15 	stw	ra,44(sp)
   1ff9c:	df000a15 	stw	fp,40(sp)
   1ffa0:	df000a04 	addi	fp,sp,40
   1ffa4:	e13ffb15 	stw	r4,-20(fp)
   1ffa8:	e17ffc15 	stw	r5,-16(fp)
   1ffac:	e1bffd15 	stw	r6,-12(fp)
   1ffb0:	3807883a 	mov	r3,r7
   1ffb4:	e0800217 	ldw	r2,8(fp)
   1ffb8:	e0fffe05 	stb	r3,-8(fp)
   1ffbc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1ffc0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   1ffc4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   1ffc8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   1ffcc:	e0bffd17 	ldw	r2,-12(fp)
   1ffd0:	1000021e 	bne	r2,zero,1ffdc <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   1ffd4:	0005883a 	mov	r2,zero
   1ffd8:	00006d06 	br	20190 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   1ffdc:	e0bffe03 	ldbu	r2,-8(fp)
   1ffe0:	10000a1e 	bne	r2,zero,2000c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1ffe4:	e13ffb17 	ldw	r4,-20(fp)
   1ffe8:	001ee440 	call	1ee44 <alt_avalon_i2c_enable>
   1ffec:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1fff0:	e0bff917 	ldw	r2,-28(fp)
   1fff4:	10000226 	beq	r2,zero,20000 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   1fff8:	e0bff917 	ldw	r2,-28(fp)
   1fffc:	00006406 	br	20190 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20000:	01400704 	movi	r5,28
   20004:	e13ffb17 	ldw	r4,-20(fp)
   20008:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2000c:	e0bffe03 	ldbu	r2,-8(fp)
   20010:	100d883a 	mov	r6,r2
   20014:	01400044 	movi	r5,1
   20018:	e13ffb17 	ldw	r4,-20(fp)
   2001c:	001f4ac0 	call	1f4ac <alt_avalon_i2c_send_address>
   20020:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   20024:	e0bff917 	ldw	r2,-28(fp)
   20028:	1000341e 	bne	r2,zero,200fc <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2002c:	00001906 	br	20094 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20030:	000f883a 	mov	r7,zero
   20034:	000d883a 	mov	r6,zero
   20038:	000b883a 	mov	r5,zero
   2003c:	e13ffb17 	ldw	r4,-20(fp)
   20040:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   20044:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   20048:	e0bff817 	ldw	r2,-32(fp)
   2004c:	10800044 	addi	r2,r2,1
   20050:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   20054:	e0bff917 	ldw	r2,-28(fp)
   20058:	10000e1e 	bne	r2,zero,20094 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2005c:	e0bffa04 	addi	r2,fp,-24
   20060:	100f883a 	mov	r7,r2
   20064:	000d883a 	mov	r6,zero
   20068:	e17ffc17 	ldw	r5,-16(fp)
   2006c:	e13ffb17 	ldw	r4,-20(fp)
   20070:	001f2780 	call	1f278 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   20074:	e0bffa17 	ldw	r2,-24(fp)
   20078:	e0fffc17 	ldw	r3,-16(fp)
   2007c:	1885883a 	add	r2,r3,r2
   20080:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   20084:	e0bffa17 	ldw	r2,-24(fp)
   20088:	e0fff717 	ldw	r3,-36(fp)
   2008c:	1885883a 	add	r2,r3,r2
   20090:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20094:	e0bffd17 	ldw	r2,-12(fp)
   20098:	10bfffc4 	addi	r2,r2,-1
   2009c:	e0fff817 	ldw	r3,-32(fp)
   200a0:	1880022e 	bgeu	r3,r2,200ac <alt_avalon_i2c_master_receive+0x118>
   200a4:	e0bff917 	ldw	r2,-28(fp)
   200a8:	103fe126 	beq	r2,zero,20030 <__alt_data_end+0xfc020030>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   200ac:	e0bff917 	ldw	r2,-28(fp)
   200b0:	1000121e 	bne	r2,zero,200fc <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   200b4:	e0bfff03 	ldbu	r2,-4(fp)
   200b8:	100f883a 	mov	r7,r2
   200bc:	000d883a 	mov	r6,zero
   200c0:	000b883a 	mov	r5,zero
   200c4:	e13ffb17 	ldw	r4,-20(fp)
   200c8:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   200cc:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   200d0:	00000a06 	br	200fc <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   200d4:	e17ffc17 	ldw	r5,-16(fp)
   200d8:	e13ffb17 	ldw	r4,-20(fp)
   200dc:	001f3200 	call	1f320 <alt_avalon_i2c_rx_read>
   200e0:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   200e4:	e0bffc17 	ldw	r2,-16(fp)
   200e8:	10800044 	addi	r2,r2,1
   200ec:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   200f0:	e0bff717 	ldw	r2,-36(fp)
   200f4:	10800044 	addi	r2,r2,1
   200f8:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   200fc:	e0fff717 	ldw	r3,-36(fp)
   20100:	e0bffd17 	ldw	r2,-12(fp)
   20104:	1880022e 	bgeu	r3,r2,20110 <alt_avalon_i2c_master_receive+0x17c>
   20108:	e0bff917 	ldw	r2,-28(fp)
   2010c:	103ff126 	beq	r2,zero,200d4 <__alt_data_end+0xfc0200d4>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   20110:	e0bfff03 	ldbu	r2,-4(fp)
   20114:	1000021e 	bne	r2,zero,20120 <alt_avalon_i2c_master_receive+0x18c>
   20118:	e0bff917 	ldw	r2,-28(fp)
   2011c:	10001b26 	beq	r2,zero,2018c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   20120:	0149c404 	movi	r5,10000
   20124:	e13ffd17 	ldw	r4,-12(fp)
   20128:	000ccf40 	call	ccf4 <__mulsi3>
   2012c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20130:	00000d06 	br	20168 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20134:	e0bff617 	ldw	r2,-40(fp)
   20138:	108002a8 	cmpgeui	r2,r2,10
   2013c:	1000021e 	bne	r2,zero,20148 <alt_avalon_i2c_master_receive+0x1b4>
   20140:	0109c404 	movi	r4,10000
   20144:	00215640 	call	21564 <alt_busy_sleep>
            if (--timeout == 0)
   20148:	e0bff617 	ldw	r2,-40(fp)
   2014c:	10bfffc4 	addi	r2,r2,-1
   20150:	e0bff615 	stw	r2,-40(fp)
   20154:	e0bff617 	ldw	r2,-40(fp)
   20158:	1000031e 	bne	r2,zero,20168 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2015c:	00bfff84 	movi	r2,-2
   20160:	e0bff915 	stw	r2,-28(fp)
               break;
   20164:	00000306 	br	20174 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20168:	e13ffb17 	ldw	r4,-20(fp)
   2016c:	001f2340 	call	1f234 <alt_avalon_i2c_is_busy>
   20170:	103ff01e 	bne	r2,zero,20134 <__alt_data_end+0xfc020134>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   20174:	e0bff904 	addi	r2,fp,-28
   20178:	100b883a 	mov	r5,r2
   2017c:	e13ffb17 	ldw	r4,-20(fp)
   20180:	001f6080 	call	1f608 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20184:	e13ffb17 	ldw	r4,-20(fp)
   20188:	001eedc0 	call	1eedc <alt_avalon_i2c_disable>
    }

    return status;
   2018c:	e0bff917 	ldw	r2,-28(fp)
}
   20190:	e037883a 	mov	sp,fp
   20194:	dfc00117 	ldw	ra,4(sp)
   20198:	df000017 	ldw	fp,0(sp)
   2019c:	dec00204 	addi	sp,sp,8
   201a0:	f800283a 	ret

000201a4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   201a4:	defff504 	addi	sp,sp,-44
   201a8:	dfc00a15 	stw	ra,40(sp)
   201ac:	df000915 	stw	fp,36(sp)
   201b0:	df000904 	addi	fp,sp,36
   201b4:	e13ffb15 	stw	r4,-20(fp)
   201b8:	e17ffc15 	stw	r5,-16(fp)
   201bc:	e1bffd15 	stw	r6,-12(fp)
   201c0:	3807883a 	mov	r3,r7
   201c4:	e0800217 	ldw	r2,8(fp)
   201c8:	e0fffe05 	stb	r3,-8(fp)
   201cc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   201d0:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   201d4:	e0bffb17 	ldw	r2,-20(fp)
   201d8:	10800717 	ldw	r2,28(r2)
   201dc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   201e0:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   201e4:	e0bffd17 	ldw	r2,-12(fp)
   201e8:	1000021e 	bne	r2,zero,201f4 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   201ec:	0005883a 	mov	r2,zero
   201f0:	00006306 	br	20380 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   201f4:	e0bffb17 	ldw	r2,-20(fp)
   201f8:	10c00617 	ldw	r3,24(r2)
   201fc:	008000b4 	movhi	r2,2
   20200:	10bab204 	addi	r2,r2,-5432
   20204:	18800226 	beq	r3,r2,20210 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   20208:	00bfff44 	movi	r2,-3
   2020c:	00005c06 	br	20380 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20210:	e0bffe03 	ldbu	r2,-8(fp)
   20214:	10000a1e 	bne	r2,zero,20240 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20218:	e13ffb17 	ldw	r4,-20(fp)
   2021c:	001ee440 	call	1ee44 <alt_avalon_i2c_enable>
   20220:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20224:	e0bff717 	ldw	r2,-36(fp)
   20228:	10000226 	beq	r2,zero,20234 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   2022c:	e0bff717 	ldw	r2,-36(fp)
   20230:	00005306 	br	20380 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20234:	01400704 	movi	r5,28
   20238:	e13ffb17 	ldw	r4,-20(fp)
   2023c:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   20240:	e0bffe03 	ldbu	r2,-8(fp)
   20244:	100d883a 	mov	r6,r2
   20248:	01400044 	movi	r5,1
   2024c:	e13ffb17 	ldw	r4,-20(fp)
   20250:	001f4ac0 	call	1f4ac <alt_avalon_i2c_send_address>
   20254:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   20258:	e0bff717 	ldw	r2,-36(fp)
   2025c:	1000191e 	bne	r2,zero,202c4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20260:	00000906 	br	20288 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20264:	000f883a 	mov	r7,zero
   20268:	000d883a 	mov	r6,zero
   2026c:	000b883a 	mov	r5,zero
   20270:	e13ffb17 	ldw	r4,-20(fp)
   20274:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   20278:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   2027c:	e0bff917 	ldw	r2,-28(fp)
   20280:	10800044 	addi	r2,r2,1
   20284:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   20288:	e0bffd17 	ldw	r2,-12(fp)
   2028c:	10bfffc4 	addi	r2,r2,-1
   20290:	e0fff917 	ldw	r3,-28(fp)
   20294:	1880022e 	bgeu	r3,r2,202a0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   20298:	e0bff717 	ldw	r2,-36(fp)
   2029c:	103ff126 	beq	r2,zero,20264 <__alt_data_end+0xfc020264>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   202a0:	e0bff717 	ldw	r2,-36(fp)
   202a4:	1000071e 	bne	r2,zero,202c4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   202a8:	e0bfff03 	ldbu	r2,-4(fp)
   202ac:	100f883a 	mov	r7,r2
   202b0:	000d883a 	mov	r6,zero
   202b4:	000b883a 	mov	r5,zero
   202b8:	e13ffb17 	ldw	r4,-20(fp)
   202bc:	001f3c80 	call	1f3c8 <alt_avalon_i2c_cmd_write>
   202c0:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   202c4:	e0bff717 	ldw	r2,-36(fp)
   202c8:	10001826 	beq	r2,zero,2032c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   202cc:	0149c404 	movi	r5,10000
   202d0:	e13ffd17 	ldw	r4,-12(fp)
   202d4:	000ccf40 	call	ccf4 <__mulsi3>
   202d8:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   202dc:	00000d06 	br	20314 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   202e0:	e0bff817 	ldw	r2,-32(fp)
   202e4:	108002a8 	cmpgeui	r2,r2,10
   202e8:	1000021e 	bne	r2,zero,202f4 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   202ec:	0109c404 	movi	r4,10000
   202f0:	00215640 	call	21564 <alt_busy_sleep>
            if (--timeout == 0)
   202f4:	e0bff817 	ldw	r2,-32(fp)
   202f8:	10bfffc4 	addi	r2,r2,-1
   202fc:	e0bff815 	stw	r2,-32(fp)
   20300:	e0bff817 	ldw	r2,-32(fp)
   20304:	1000031e 	bne	r2,zero,20314 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20308:	00bfff84 	movi	r2,-2
   2030c:	e0bff715 	stw	r2,-36(fp)
               break;
   20310:	00000306 	br	20320 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20314:	e13ffb17 	ldw	r4,-20(fp)
   20318:	001f2340 	call	1f234 <alt_avalon_i2c_is_busy>
   2031c:	103ff01e 	bne	r2,zero,202e0 <__alt_data_end+0xfc0202e0>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20320:	e13ffb17 	ldw	r4,-20(fp)
   20324:	001eedc0 	call	1eedc <alt_avalon_i2c_disable>
   20328:	00001406 	br	2037c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   2032c:	e0bfff03 	ldbu	r2,-4(fp)
   20330:	10001226 	beq	r2,zero,2037c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20334:	01400704 	movi	r5,28
   20338:	e13ffb17 	ldw	r4,-20(fp)
   2033c:	00204300 	call	20430 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   20340:	000b883a 	mov	r5,zero
   20344:	e13ffb17 	ldw	r4,-20(fp)
   20348:	00205c80 	call	205c8 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   2034c:	e0bffa17 	ldw	r2,-24(fp)
   20350:	00c00084 	movi	r3,2
   20354:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   20358:	e0bffa17 	ldw	r2,-24(fp)
   2035c:	e0fffc17 	ldw	r3,-16(fp)
   20360:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   20364:	e0bffa17 	ldw	r2,-24(fp)
   20368:	e0fffd17 	ldw	r3,-12(fp)
   2036c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   20370:	01400084 	movi	r5,2
   20374:	e13ffb17 	ldw	r4,-20(fp)
   20378:	00204d40 	call	204d4 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   2037c:	e0bff717 	ldw	r2,-36(fp)
}
   20380:	e037883a 	mov	sp,fp
   20384:	dfc00117 	ldw	ra,4(sp)
   20388:	df000017 	ldw	fp,0(sp)
   2038c:	dec00204 	addi	sp,sp,8
   20390:	f800283a 	ret

00020394 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   20394:	defffd04 	addi	sp,sp,-12
   20398:	df000215 	stw	fp,8(sp)
   2039c:	df000204 	addi	fp,sp,8
   203a0:	e13ffe15 	stw	r4,-8(fp)
   203a4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   203a8:	e0bffe17 	ldw	r2,-8(fp)
   203ac:	10800317 	ldw	r2,12(r2)
   203b0:	10800404 	addi	r2,r2,16
   203b4:	10c00037 	ldwio	r3,0(r2)
   203b8:	e0bffe17 	ldw	r2,-8(fp)
   203bc:	10800317 	ldw	r2,12(r2)
   203c0:	10800304 	addi	r2,r2,12
   203c4:	10800037 	ldwio	r2,0(r2)
   203c8:	1884703a 	and	r2,r3,r2
   203cc:	1007883a 	mov	r3,r2
   203d0:	e0bfff17 	ldw	r2,-4(fp)
   203d4:	10c00015 	stw	r3,0(r2)
}
   203d8:	0001883a 	nop
   203dc:	e037883a 	mov	sp,fp
   203e0:	df000017 	ldw	fp,0(sp)
   203e4:	dec00104 	addi	sp,sp,4
   203e8:	f800283a 	ret

000203ec <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   203ec:	defffd04 	addi	sp,sp,-12
   203f0:	df000215 	stw	fp,8(sp)
   203f4:	df000204 	addi	fp,sp,8
   203f8:	e13ffe15 	stw	r4,-8(fp)
   203fc:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   20400:	e0bffe17 	ldw	r2,-8(fp)
   20404:	10800317 	ldw	r2,12(r2)
   20408:	10800404 	addi	r2,r2,16
   2040c:	10800037 	ldwio	r2,0(r2)
   20410:	1007883a 	mov	r3,r2
   20414:	e0bfff17 	ldw	r2,-4(fp)
   20418:	10c00015 	stw	r3,0(r2)
}
   2041c:	0001883a 	nop
   20420:	e037883a 	mov	sp,fp
   20424:	df000017 	ldw	fp,0(sp)
   20428:	dec00104 	addi	sp,sp,4
   2042c:	f800283a 	ret

00020430 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   20430:	defffd04 	addi	sp,sp,-12
   20434:	df000215 	stw	fp,8(sp)
   20438:	df000204 	addi	fp,sp,8
   2043c:	e13ffe15 	stw	r4,-8(fp)
   20440:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   20444:	e0bffe17 	ldw	r2,-8(fp)
   20448:	10800317 	ldw	r2,12(r2)
   2044c:	10800404 	addi	r2,r2,16
   20450:	e0ffff17 	ldw	r3,-4(fp)
   20454:	10c00035 	stwio	r3,0(r2)
}
   20458:	0001883a 	nop
   2045c:	e037883a 	mov	sp,fp
   20460:	df000017 	ldw	fp,0(sp)
   20464:	dec00104 	addi	sp,sp,4
   20468:	f800283a 	ret

0002046c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2046c:	defffb04 	addi	sp,sp,-20
   20470:	dfc00415 	stw	ra,16(sp)
   20474:	df000315 	stw	fp,12(sp)
   20478:	df000304 	addi	fp,sp,12
   2047c:	e13ffe15 	stw	r4,-8(fp)
   20480:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   20484:	e17ffd04 	addi	r5,fp,-12
   20488:	e13ffe17 	ldw	r4,-8(fp)
   2048c:	00205380 	call	20538 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   20490:	e0bfff17 	ldw	r2,-4(fp)
   20494:	0086303a 	nor	r3,zero,r2
   20498:	e0bffd17 	ldw	r2,-12(fp)
   2049c:	1884703a 	and	r2,r3,r2
   204a0:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   204a4:	e0bffe17 	ldw	r2,-8(fp)
   204a8:	10800317 	ldw	r2,12(r2)
   204ac:	10800304 	addi	r2,r2,12
   204b0:	e0fffd17 	ldw	r3,-12(fp)
   204b4:	18c007cc 	andi	r3,r3,31
   204b8:	10c00035 	stwio	r3,0(r2)
}
   204bc:	0001883a 	nop
   204c0:	e037883a 	mov	sp,fp
   204c4:	dfc00117 	ldw	ra,4(sp)
   204c8:	df000017 	ldw	fp,0(sp)
   204cc:	dec00204 	addi	sp,sp,8
   204d0:	f800283a 	ret

000204d4 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   204d4:	defffb04 	addi	sp,sp,-20
   204d8:	dfc00415 	stw	ra,16(sp)
   204dc:	df000315 	stw	fp,12(sp)
   204e0:	df000304 	addi	fp,sp,12
   204e4:	e13ffe15 	stw	r4,-8(fp)
   204e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   204ec:	e17ffd04 	addi	r5,fp,-12
   204f0:	e13ffe17 	ldw	r4,-8(fp)
   204f4:	00205380 	call	20538 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   204f8:	e0fffd17 	ldw	r3,-12(fp)
   204fc:	e0bfff17 	ldw	r2,-4(fp)
   20500:	1884b03a 	or	r2,r3,r2
   20504:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   20508:	e0bffe17 	ldw	r2,-8(fp)
   2050c:	10800317 	ldw	r2,12(r2)
   20510:	10800304 	addi	r2,r2,12
   20514:	e0fffd17 	ldw	r3,-12(fp)
   20518:	18c007cc 	andi	r3,r3,31
   2051c:	10c00035 	stwio	r3,0(r2)
}
   20520:	0001883a 	nop
   20524:	e037883a 	mov	sp,fp
   20528:	dfc00117 	ldw	ra,4(sp)
   2052c:	df000017 	ldw	fp,0(sp)
   20530:	dec00204 	addi	sp,sp,8
   20534:	f800283a 	ret

00020538 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   20538:	defffd04 	addi	sp,sp,-12
   2053c:	df000215 	stw	fp,8(sp)
   20540:	df000204 	addi	fp,sp,8
   20544:	e13ffe15 	stw	r4,-8(fp)
   20548:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   2054c:	e0bffe17 	ldw	r2,-8(fp)
   20550:	10800317 	ldw	r2,12(r2)
   20554:	10800304 	addi	r2,r2,12
   20558:	10800037 	ldwio	r2,0(r2)
   2055c:	10c007cc 	andi	r3,r2,31
   20560:	e0bfff17 	ldw	r2,-4(fp)
   20564:	10c00015 	stw	r3,0(r2)
}
   20568:	0001883a 	nop
   2056c:	e037883a 	mov	sp,fp
   20570:	df000017 	ldw	fp,0(sp)
   20574:	dec00104 	addi	sp,sp,4
   20578:	f800283a 	ret

0002057c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   2057c:	defffd04 	addi	sp,sp,-12
   20580:	df000215 	stw	fp,8(sp)
   20584:	df000204 	addi	fp,sp,8
   20588:	e13ffe15 	stw	r4,-8(fp)
   2058c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   20590:	e0bffe17 	ldw	r2,-8(fp)
   20594:	10800317 	ldw	r2,12(r2)
   20598:	10800204 	addi	r2,r2,8
   2059c:	10800037 	ldwio	r2,0(r2)
   205a0:	10800c0c 	andi	r2,r2,48
   205a4:	1005d13a 	srai	r2,r2,4
   205a8:	1007883a 	mov	r3,r2
   205ac:	e0bfff17 	ldw	r2,-4(fp)
   205b0:	10c00015 	stw	r3,0(r2)
}
   205b4:	0001883a 	nop
   205b8:	e037883a 	mov	sp,fp
   205bc:	df000017 	ldw	fp,0(sp)
   205c0:	dec00104 	addi	sp,sp,4
   205c4:	f800283a 	ret

000205c8 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   205c8:	defffd04 	addi	sp,sp,-12
   205cc:	df000215 	stw	fp,8(sp)
   205d0:	df000204 	addi	fp,sp,8
   205d4:	e13ffe15 	stw	r4,-8(fp)
   205d8:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   205dc:	e0bffe17 	ldw	r2,-8(fp)
   205e0:	10800317 	ldw	r2,12(r2)
   205e4:	10800204 	addi	r2,r2,8
   205e8:	e0fffe17 	ldw	r3,-8(fp)
   205ec:	18c00317 	ldw	r3,12(r3)
   205f0:	18c00204 	addi	r3,r3,8
   205f4:	18c00037 	ldwio	r3,0(r3)
   205f8:	1809883a 	mov	r4,r3
   205fc:	00fff3c4 	movi	r3,-49
   20600:	20c8703a 	and	r4,r4,r3
   20604:	e0ffff17 	ldw	r3,-4(fp)
   20608:	1806913a 	slli	r3,r3,4
   2060c:	18c00c0c 	andi	r3,r3,48
   20610:	20c6b03a 	or	r3,r4,r3
   20614:	10c00035 	stwio	r3,0(r2)
}
   20618:	0001883a 	nop
   2061c:	e037883a 	mov	sp,fp
   20620:	df000017 	ldw	fp,0(sp)
   20624:	dec00104 	addi	sp,sp,4
   20628:	f800283a 	ret

0002062c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   2062c:	defffd04 	addi	sp,sp,-12
   20630:	df000215 	stw	fp,8(sp)
   20634:	df000204 	addi	fp,sp,8
   20638:	e13ffe15 	stw	r4,-8(fp)
   2063c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	10800317 	ldw	r2,12(r2)
   20648:	10800204 	addi	r2,r2,8
   2064c:	10800037 	ldwio	r2,0(r2)
   20650:	1080030c 	andi	r2,r2,12
   20654:	1005d0ba 	srai	r2,r2,2
   20658:	1007883a 	mov	r3,r2
   2065c:	e0bfff17 	ldw	r2,-4(fp)
   20660:	10c00015 	stw	r3,0(r2)
}
   20664:	0001883a 	nop
   20668:	e037883a 	mov	sp,fp
   2066c:	df000017 	ldw	fp,0(sp)
   20670:	dec00104 	addi	sp,sp,4
   20674:	f800283a 	ret

00020678 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   20678:	defffd04 	addi	sp,sp,-12
   2067c:	df000215 	stw	fp,8(sp)
   20680:	df000204 	addi	fp,sp,8
   20684:	e13ffe15 	stw	r4,-8(fp)
   20688:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   2068c:	e0bffe17 	ldw	r2,-8(fp)
   20690:	10800317 	ldw	r2,12(r2)
   20694:	10c00204 	addi	r3,r2,8
   20698:	e0bffe17 	ldw	r2,-8(fp)
   2069c:	10800317 	ldw	r2,12(r2)
   206a0:	10800204 	addi	r2,r2,8
   206a4:	10800037 	ldwio	r2,0(r2)
   206a8:	1009883a 	mov	r4,r2
   206ac:	00bffcc4 	movi	r2,-13
   206b0:	2088703a 	and	r4,r4,r2
   206b4:	e0bfff17 	ldw	r2,-4(fp)
   206b8:	1085883a 	add	r2,r2,r2
   206bc:	1085883a 	add	r2,r2,r2
   206c0:	1080030c 	andi	r2,r2,12
   206c4:	2084b03a 	or	r2,r4,r2
   206c8:	18800035 	stwio	r2,0(r3)
}
   206cc:	0001883a 	nop
   206d0:	e037883a 	mov	sp,fp
   206d4:	df000017 	ldw	fp,0(sp)
   206d8:	dec00104 	addi	sp,sp,4
   206dc:	f800283a 	ret

000206e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   206e0:	defffa04 	addi	sp,sp,-24
   206e4:	dfc00515 	stw	ra,20(sp)
   206e8:	df000415 	stw	fp,16(sp)
   206ec:	df000404 	addi	fp,sp,16
   206f0:	e13ffd15 	stw	r4,-12(fp)
   206f4:	e17ffe15 	stw	r5,-8(fp)
   206f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   206fc:	e0bffd17 	ldw	r2,-12(fp)
   20700:	10800017 	ldw	r2,0(r2)
   20704:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20708:	e0bffc17 	ldw	r2,-16(fp)
   2070c:	10c00a04 	addi	r3,r2,40
   20710:	e0bffd17 	ldw	r2,-12(fp)
   20714:	10800217 	ldw	r2,8(r2)
   20718:	100f883a 	mov	r7,r2
   2071c:	e1bfff17 	ldw	r6,-4(fp)
   20720:	e17ffe17 	ldw	r5,-8(fp)
   20724:	1809883a 	mov	r4,r3
   20728:	0020d080 	call	20d08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2072c:	e037883a 	mov	sp,fp
   20730:	dfc00117 	ldw	ra,4(sp)
   20734:	df000017 	ldw	fp,0(sp)
   20738:	dec00204 	addi	sp,sp,8
   2073c:	f800283a 	ret

00020740 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20740:	defffa04 	addi	sp,sp,-24
   20744:	dfc00515 	stw	ra,20(sp)
   20748:	df000415 	stw	fp,16(sp)
   2074c:	df000404 	addi	fp,sp,16
   20750:	e13ffd15 	stw	r4,-12(fp)
   20754:	e17ffe15 	stw	r5,-8(fp)
   20758:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2075c:	e0bffd17 	ldw	r2,-12(fp)
   20760:	10800017 	ldw	r2,0(r2)
   20764:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20768:	e0bffc17 	ldw	r2,-16(fp)
   2076c:	10c00a04 	addi	r3,r2,40
   20770:	e0bffd17 	ldw	r2,-12(fp)
   20774:	10800217 	ldw	r2,8(r2)
   20778:	100f883a 	mov	r7,r2
   2077c:	e1bfff17 	ldw	r6,-4(fp)
   20780:	e17ffe17 	ldw	r5,-8(fp)
   20784:	1809883a 	mov	r4,r3
   20788:	0020f240 	call	20f24 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2078c:	e037883a 	mov	sp,fp
   20790:	dfc00117 	ldw	ra,4(sp)
   20794:	df000017 	ldw	fp,0(sp)
   20798:	dec00204 	addi	sp,sp,8
   2079c:	f800283a 	ret

000207a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   207a0:	defffc04 	addi	sp,sp,-16
   207a4:	dfc00315 	stw	ra,12(sp)
   207a8:	df000215 	stw	fp,8(sp)
   207ac:	df000204 	addi	fp,sp,8
   207b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   207b4:	e0bfff17 	ldw	r2,-4(fp)
   207b8:	10800017 	ldw	r2,0(r2)
   207bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   207c0:	e0bffe17 	ldw	r2,-8(fp)
   207c4:	10c00a04 	addi	r3,r2,40
   207c8:	e0bfff17 	ldw	r2,-4(fp)
   207cc:	10800217 	ldw	r2,8(r2)
   207d0:	100b883a 	mov	r5,r2
   207d4:	1809883a 	mov	r4,r3
   207d8:	0020bb00 	call	20bb0 <altera_avalon_jtag_uart_close>
}
   207dc:	e037883a 	mov	sp,fp
   207e0:	dfc00117 	ldw	ra,4(sp)
   207e4:	df000017 	ldw	fp,0(sp)
   207e8:	dec00204 	addi	sp,sp,8
   207ec:	f800283a 	ret

000207f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   207f0:	defffa04 	addi	sp,sp,-24
   207f4:	dfc00515 	stw	ra,20(sp)
   207f8:	df000415 	stw	fp,16(sp)
   207fc:	df000404 	addi	fp,sp,16
   20800:	e13ffd15 	stw	r4,-12(fp)
   20804:	e17ffe15 	stw	r5,-8(fp)
   20808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2080c:	e0bffd17 	ldw	r2,-12(fp)
   20810:	10800017 	ldw	r2,0(r2)
   20814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   20818:	e0bffc17 	ldw	r2,-16(fp)
   2081c:	10800a04 	addi	r2,r2,40
   20820:	e1bfff17 	ldw	r6,-4(fp)
   20824:	e17ffe17 	ldw	r5,-8(fp)
   20828:	1009883a 	mov	r4,r2
   2082c:	0020c180 	call	20c18 <altera_avalon_jtag_uart_ioctl>
}
   20830:	e037883a 	mov	sp,fp
   20834:	dfc00117 	ldw	ra,4(sp)
   20838:	df000017 	ldw	fp,0(sp)
   2083c:	dec00204 	addi	sp,sp,8
   20840:	f800283a 	ret

00020844 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   20844:	defffa04 	addi	sp,sp,-24
   20848:	dfc00515 	stw	ra,20(sp)
   2084c:	df000415 	stw	fp,16(sp)
   20850:	df000404 	addi	fp,sp,16
   20854:	e13ffd15 	stw	r4,-12(fp)
   20858:	e17ffe15 	stw	r5,-8(fp)
   2085c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20860:	e0bffd17 	ldw	r2,-12(fp)
   20864:	00c00044 	movi	r3,1
   20868:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2086c:	e0bffd17 	ldw	r2,-12(fp)
   20870:	10800017 	ldw	r2,0(r2)
   20874:	10800104 	addi	r2,r2,4
   20878:	1007883a 	mov	r3,r2
   2087c:	e0bffd17 	ldw	r2,-12(fp)
   20880:	10800817 	ldw	r2,32(r2)
   20884:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20888:	e0bffe17 	ldw	r2,-8(fp)
   2088c:	e0ffff17 	ldw	r3,-4(fp)
   20890:	d8000015 	stw	zero,0(sp)
   20894:	e1fffd17 	ldw	r7,-12(fp)
   20898:	018000b4 	movhi	r6,2
   2089c:	31824104 	addi	r6,r6,2308
   208a0:	180b883a 	mov	r5,r3
   208a4:	1009883a 	mov	r4,r2
   208a8:	002192c0 	call	2192c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   208ac:	e0bffd17 	ldw	r2,-12(fp)
   208b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   208b4:	e0bffd17 	ldw	r2,-12(fp)
   208b8:	10800204 	addi	r2,r2,8
   208bc:	d0f24717 	ldw	r3,-14052(gp)
   208c0:	e1fffd17 	ldw	r7,-12(fp)
   208c4:	018000b4 	movhi	r6,2
   208c8:	3182c404 	addi	r6,r6,2832
   208cc:	180b883a 	mov	r5,r3
   208d0:	1009883a 	mov	r4,r2
   208d4:	00214380 	call	21438 <alt_alarm_start>
   208d8:	1000040e 	bge	r2,zero,208ec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   208dc:	e0fffd17 	ldw	r3,-12(fp)
   208e0:	00a00034 	movhi	r2,32768
   208e4:	10bfffc4 	addi	r2,r2,-1
   208e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   208ec:	0001883a 	nop
   208f0:	e037883a 	mov	sp,fp
   208f4:	dfc00117 	ldw	ra,4(sp)
   208f8:	df000017 	ldw	fp,0(sp)
   208fc:	dec00204 	addi	sp,sp,8
   20900:	f800283a 	ret

00020904 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20904:	defff804 	addi	sp,sp,-32
   20908:	df000715 	stw	fp,28(sp)
   2090c:	df000704 	addi	fp,sp,28
   20910:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   20914:	e0bfff17 	ldw	r2,-4(fp)
   20918:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2091c:	e0bffb17 	ldw	r2,-20(fp)
   20920:	10800017 	ldw	r2,0(r2)
   20924:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20928:	e0bffc17 	ldw	r2,-16(fp)
   2092c:	10800104 	addi	r2,r2,4
   20930:	10800037 	ldwio	r2,0(r2)
   20934:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20938:	e0bffd17 	ldw	r2,-12(fp)
   2093c:	1080c00c 	andi	r2,r2,768
   20940:	10006d26 	beq	r2,zero,20af8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   20944:	e0bffd17 	ldw	r2,-12(fp)
   20948:	1080400c 	andi	r2,r2,256
   2094c:	10003526 	beq	r2,zero,20a24 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   20950:	00800074 	movhi	r2,1
   20954:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20958:	e0bffb17 	ldw	r2,-20(fp)
   2095c:	10800a17 	ldw	r2,40(r2)
   20960:	10800044 	addi	r2,r2,1
   20964:	1081ffcc 	andi	r2,r2,2047
   20968:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2096c:	e0bffb17 	ldw	r2,-20(fp)
   20970:	10c00b17 	ldw	r3,44(r2)
   20974:	e0bffe17 	ldw	r2,-8(fp)
   20978:	18801526 	beq	r3,r2,209d0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2097c:	e0bffc17 	ldw	r2,-16(fp)
   20980:	10800037 	ldwio	r2,0(r2)
   20984:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20988:	e0bff917 	ldw	r2,-28(fp)
   2098c:	10a0000c 	andi	r2,r2,32768
   20990:	10001126 	beq	r2,zero,209d8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20994:	e0bffb17 	ldw	r2,-20(fp)
   20998:	10800a17 	ldw	r2,40(r2)
   2099c:	e0fff917 	ldw	r3,-28(fp)
   209a0:	1809883a 	mov	r4,r3
   209a4:	e0fffb17 	ldw	r3,-20(fp)
   209a8:	1885883a 	add	r2,r3,r2
   209ac:	10800e04 	addi	r2,r2,56
   209b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   209b4:	e0bffb17 	ldw	r2,-20(fp)
   209b8:	10800a17 	ldw	r2,40(r2)
   209bc:	10800044 	addi	r2,r2,1
   209c0:	10c1ffcc 	andi	r3,r2,2047
   209c4:	e0bffb17 	ldw	r2,-20(fp)
   209c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   209cc:	003fe206 	br	20958 <__alt_data_end+0xfc020958>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   209d0:	0001883a 	nop
   209d4:	00000106 	br	209dc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   209d8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   209dc:	e0bff917 	ldw	r2,-28(fp)
   209e0:	10bfffec 	andhi	r2,r2,65535
   209e4:	10000f26 	beq	r2,zero,20a24 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   209e8:	e0bffb17 	ldw	r2,-20(fp)
   209ec:	10c00817 	ldw	r3,32(r2)
   209f0:	00bfff84 	movi	r2,-2
   209f4:	1886703a 	and	r3,r3,r2
   209f8:	e0bffb17 	ldw	r2,-20(fp)
   209fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   20a00:	e0bffc17 	ldw	r2,-16(fp)
   20a04:	10800104 	addi	r2,r2,4
   20a08:	1007883a 	mov	r3,r2
   20a0c:	e0bffb17 	ldw	r2,-20(fp)
   20a10:	10800817 	ldw	r2,32(r2)
   20a14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20a18:	e0bffc17 	ldw	r2,-16(fp)
   20a1c:	10800104 	addi	r2,r2,4
   20a20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   20a24:	e0bffd17 	ldw	r2,-12(fp)
   20a28:	1080800c 	andi	r2,r2,512
   20a2c:	103fbe26 	beq	r2,zero,20928 <__alt_data_end+0xfc020928>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   20a30:	e0bffd17 	ldw	r2,-12(fp)
   20a34:	1004d43a 	srli	r2,r2,16
   20a38:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   20a3c:	00001406 	br	20a90 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   20a40:	e0bffc17 	ldw	r2,-16(fp)
   20a44:	e0fffb17 	ldw	r3,-20(fp)
   20a48:	18c00d17 	ldw	r3,52(r3)
   20a4c:	e13ffb17 	ldw	r4,-20(fp)
   20a50:	20c7883a 	add	r3,r4,r3
   20a54:	18c20e04 	addi	r3,r3,2104
   20a58:	18c00003 	ldbu	r3,0(r3)
   20a5c:	18c03fcc 	andi	r3,r3,255
   20a60:	18c0201c 	xori	r3,r3,128
   20a64:	18ffe004 	addi	r3,r3,-128
   20a68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20a6c:	e0bffb17 	ldw	r2,-20(fp)
   20a70:	10800d17 	ldw	r2,52(r2)
   20a74:	10800044 	addi	r2,r2,1
   20a78:	10c1ffcc 	andi	r3,r2,2047
   20a7c:	e0bffb17 	ldw	r2,-20(fp)
   20a80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   20a84:	e0bffa17 	ldw	r2,-24(fp)
   20a88:	10bfffc4 	addi	r2,r2,-1
   20a8c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20a90:	e0bffa17 	ldw	r2,-24(fp)
   20a94:	10000526 	beq	r2,zero,20aac <altera_avalon_jtag_uart_irq+0x1a8>
   20a98:	e0bffb17 	ldw	r2,-20(fp)
   20a9c:	10c00d17 	ldw	r3,52(r2)
   20aa0:	e0bffb17 	ldw	r2,-20(fp)
   20aa4:	10800c17 	ldw	r2,48(r2)
   20aa8:	18bfe51e 	bne	r3,r2,20a40 <__alt_data_end+0xfc020a40>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20aac:	e0bffa17 	ldw	r2,-24(fp)
   20ab0:	103f9d26 	beq	r2,zero,20928 <__alt_data_end+0xfc020928>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20ab4:	e0bffb17 	ldw	r2,-20(fp)
   20ab8:	10c00817 	ldw	r3,32(r2)
   20abc:	00bfff44 	movi	r2,-3
   20ac0:	1886703a 	and	r3,r3,r2
   20ac4:	e0bffb17 	ldw	r2,-20(fp)
   20ac8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20acc:	e0bffb17 	ldw	r2,-20(fp)
   20ad0:	10800017 	ldw	r2,0(r2)
   20ad4:	10800104 	addi	r2,r2,4
   20ad8:	1007883a 	mov	r3,r2
   20adc:	e0bffb17 	ldw	r2,-20(fp)
   20ae0:	10800817 	ldw	r2,32(r2)
   20ae4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20ae8:	e0bffc17 	ldw	r2,-16(fp)
   20aec:	10800104 	addi	r2,r2,4
   20af0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   20af4:	003f8c06 	br	20928 <__alt_data_end+0xfc020928>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   20af8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   20afc:	0001883a 	nop
   20b00:	e037883a 	mov	sp,fp
   20b04:	df000017 	ldw	fp,0(sp)
   20b08:	dec00104 	addi	sp,sp,4
   20b0c:	f800283a 	ret

00020b10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   20b10:	defff804 	addi	sp,sp,-32
   20b14:	df000715 	stw	fp,28(sp)
   20b18:	df000704 	addi	fp,sp,28
   20b1c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20b20:	e0bffb17 	ldw	r2,-20(fp)
   20b24:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   20b28:	e0bff917 	ldw	r2,-28(fp)
   20b2c:	10800017 	ldw	r2,0(r2)
   20b30:	10800104 	addi	r2,r2,4
   20b34:	10800037 	ldwio	r2,0(r2)
   20b38:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20b3c:	e0bffa17 	ldw	r2,-24(fp)
   20b40:	1081000c 	andi	r2,r2,1024
   20b44:	10000b26 	beq	r2,zero,20b74 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   20b48:	e0bff917 	ldw	r2,-28(fp)
   20b4c:	10800017 	ldw	r2,0(r2)
   20b50:	10800104 	addi	r2,r2,4
   20b54:	1007883a 	mov	r3,r2
   20b58:	e0bff917 	ldw	r2,-28(fp)
   20b5c:	10800817 	ldw	r2,32(r2)
   20b60:	10810014 	ori	r2,r2,1024
   20b64:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   20b68:	e0bff917 	ldw	r2,-28(fp)
   20b6c:	10000915 	stw	zero,36(r2)
   20b70:	00000a06 	br	20b9c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20b74:	e0bff917 	ldw	r2,-28(fp)
   20b78:	10c00917 	ldw	r3,36(r2)
   20b7c:	00a00034 	movhi	r2,32768
   20b80:	10bfff04 	addi	r2,r2,-4
   20b84:	10c00536 	bltu	r2,r3,20b9c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   20b88:	e0bff917 	ldw	r2,-28(fp)
   20b8c:	10800917 	ldw	r2,36(r2)
   20b90:	10c00044 	addi	r3,r2,1
   20b94:	e0bff917 	ldw	r2,-28(fp)
   20b98:	10c00915 	stw	r3,36(r2)
   20b9c:	d0b24717 	ldw	r2,-14052(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   20ba0:	e037883a 	mov	sp,fp
   20ba4:	df000017 	ldw	fp,0(sp)
   20ba8:	dec00104 	addi	sp,sp,4
   20bac:	f800283a 	ret

00020bb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   20bb0:	defffd04 	addi	sp,sp,-12
   20bb4:	df000215 	stw	fp,8(sp)
   20bb8:	df000204 	addi	fp,sp,8
   20bbc:	e13ffe15 	stw	r4,-8(fp)
   20bc0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20bc4:	00000506 	br	20bdc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   20bc8:	e0bfff17 	ldw	r2,-4(fp)
   20bcc:	1090000c 	andi	r2,r2,16384
   20bd0:	10000226 	beq	r2,zero,20bdc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20bd4:	00bffd44 	movi	r2,-11
   20bd8:	00000b06 	br	20c08 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20bdc:	e0bffe17 	ldw	r2,-8(fp)
   20be0:	10c00d17 	ldw	r3,52(r2)
   20be4:	e0bffe17 	ldw	r2,-8(fp)
   20be8:	10800c17 	ldw	r2,48(r2)
   20bec:	18800526 	beq	r3,r2,20c04 <altera_avalon_jtag_uart_close+0x54>
   20bf0:	e0bffe17 	ldw	r2,-8(fp)
   20bf4:	10c00917 	ldw	r3,36(r2)
   20bf8:	e0bffe17 	ldw	r2,-8(fp)
   20bfc:	10800117 	ldw	r2,4(r2)
   20c00:	18bff136 	bltu	r3,r2,20bc8 <__alt_data_end+0xfc020bc8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20c04:	0005883a 	mov	r2,zero
}
   20c08:	e037883a 	mov	sp,fp
   20c0c:	df000017 	ldw	fp,0(sp)
   20c10:	dec00104 	addi	sp,sp,4
   20c14:	f800283a 	ret

00020c18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   20c18:	defffa04 	addi	sp,sp,-24
   20c1c:	df000515 	stw	fp,20(sp)
   20c20:	df000504 	addi	fp,sp,20
   20c24:	e13ffd15 	stw	r4,-12(fp)
   20c28:	e17ffe15 	stw	r5,-8(fp)
   20c2c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20c30:	00bff9c4 	movi	r2,-25
   20c34:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   20c38:	e0bffe17 	ldw	r2,-8(fp)
   20c3c:	10da8060 	cmpeqi	r3,r2,27137
   20c40:	1800031e 	bne	r3,zero,20c50 <altera_avalon_jtag_uart_ioctl+0x38>
   20c44:	109a80a0 	cmpeqi	r2,r2,27138
   20c48:	1000181e 	bne	r2,zero,20cac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   20c4c:	00002906 	br	20cf4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20c50:	e0bffd17 	ldw	r2,-12(fp)
   20c54:	10c00117 	ldw	r3,4(r2)
   20c58:	00a00034 	movhi	r2,32768
   20c5c:	10bfffc4 	addi	r2,r2,-1
   20c60:	18802126 	beq	r3,r2,20ce8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   20c64:	e0bfff17 	ldw	r2,-4(fp)
   20c68:	10800017 	ldw	r2,0(r2)
   20c6c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   20c70:	e0bffc17 	ldw	r2,-16(fp)
   20c74:	10800090 	cmplti	r2,r2,2
   20c78:	1000061e 	bne	r2,zero,20c94 <altera_avalon_jtag_uart_ioctl+0x7c>
   20c7c:	e0fffc17 	ldw	r3,-16(fp)
   20c80:	00a00034 	movhi	r2,32768
   20c84:	10bfffc4 	addi	r2,r2,-1
   20c88:	18800226 	beq	r3,r2,20c94 <altera_avalon_jtag_uart_ioctl+0x7c>
   20c8c:	e0bffc17 	ldw	r2,-16(fp)
   20c90:	00000206 	br	20c9c <altera_avalon_jtag_uart_ioctl+0x84>
   20c94:	00a00034 	movhi	r2,32768
   20c98:	10bfff84 	addi	r2,r2,-2
   20c9c:	e0fffd17 	ldw	r3,-12(fp)
   20ca0:	18800115 	stw	r2,4(r3)
      rc = 0;
   20ca4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20ca8:	00000f06 	br	20ce8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   20cac:	e0bffd17 	ldw	r2,-12(fp)
   20cb0:	10c00117 	ldw	r3,4(r2)
   20cb4:	00a00034 	movhi	r2,32768
   20cb8:	10bfffc4 	addi	r2,r2,-1
   20cbc:	18800c26 	beq	r3,r2,20cf0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20cc0:	e0bffd17 	ldw	r2,-12(fp)
   20cc4:	10c00917 	ldw	r3,36(r2)
   20cc8:	e0bffd17 	ldw	r2,-12(fp)
   20ccc:	10800117 	ldw	r2,4(r2)
   20cd0:	1885803a 	cmpltu	r2,r3,r2
   20cd4:	10c03fcc 	andi	r3,r2,255
   20cd8:	e0bfff17 	ldw	r2,-4(fp)
   20cdc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   20ce0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20ce4:	00000206 	br	20cf0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   20ce8:	0001883a 	nop
   20cec:	00000106 	br	20cf4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   20cf0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   20cf4:	e0bffb17 	ldw	r2,-20(fp)
}
   20cf8:	e037883a 	mov	sp,fp
   20cfc:	df000017 	ldw	fp,0(sp)
   20d00:	dec00104 	addi	sp,sp,4
   20d04:	f800283a 	ret

00020d08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   20d08:	defff304 	addi	sp,sp,-52
   20d0c:	dfc00c15 	stw	ra,48(sp)
   20d10:	df000b15 	stw	fp,44(sp)
   20d14:	df000b04 	addi	fp,sp,44
   20d18:	e13ffc15 	stw	r4,-16(fp)
   20d1c:	e17ffd15 	stw	r5,-12(fp)
   20d20:	e1bffe15 	stw	r6,-8(fp)
   20d24:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   20d28:	e0bffd17 	ldw	r2,-12(fp)
   20d2c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20d30:	00004706 	br	20e50 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   20d34:	e0bffc17 	ldw	r2,-16(fp)
   20d38:	10800a17 	ldw	r2,40(r2)
   20d3c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   20d40:	e0bffc17 	ldw	r2,-16(fp)
   20d44:	10800b17 	ldw	r2,44(r2)
   20d48:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   20d4c:	e0fff717 	ldw	r3,-36(fp)
   20d50:	e0bff817 	ldw	r2,-32(fp)
   20d54:	18800536 	bltu	r3,r2,20d6c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   20d58:	e0fff717 	ldw	r3,-36(fp)
   20d5c:	e0bff817 	ldw	r2,-32(fp)
   20d60:	1885c83a 	sub	r2,r3,r2
   20d64:	e0bff615 	stw	r2,-40(fp)
   20d68:	00000406 	br	20d7c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   20d6c:	00c20004 	movi	r3,2048
   20d70:	e0bff817 	ldw	r2,-32(fp)
   20d74:	1885c83a 	sub	r2,r3,r2
   20d78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   20d7c:	e0bff617 	ldw	r2,-40(fp)
   20d80:	10001e26 	beq	r2,zero,20dfc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   20d84:	e0fffe17 	ldw	r3,-8(fp)
   20d88:	e0bff617 	ldw	r2,-40(fp)
   20d8c:	1880022e 	bgeu	r3,r2,20d98 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   20d90:	e0bffe17 	ldw	r2,-8(fp)
   20d94:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   20d98:	e0bffc17 	ldw	r2,-16(fp)
   20d9c:	10c00e04 	addi	r3,r2,56
   20da0:	e0bff817 	ldw	r2,-32(fp)
   20da4:	1885883a 	add	r2,r3,r2
   20da8:	e1bff617 	ldw	r6,-40(fp)
   20dac:	100b883a 	mov	r5,r2
   20db0:	e13ff517 	ldw	r4,-44(fp)
   20db4:	000dad40 	call	dad4 <memcpy>
      ptr   += n;
   20db8:	e0fff517 	ldw	r3,-44(fp)
   20dbc:	e0bff617 	ldw	r2,-40(fp)
   20dc0:	1885883a 	add	r2,r3,r2
   20dc4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   20dc8:	e0fffe17 	ldw	r3,-8(fp)
   20dcc:	e0bff617 	ldw	r2,-40(fp)
   20dd0:	1885c83a 	sub	r2,r3,r2
   20dd4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20dd8:	e0fff817 	ldw	r3,-32(fp)
   20ddc:	e0bff617 	ldw	r2,-40(fp)
   20de0:	1885883a 	add	r2,r3,r2
   20de4:	10c1ffcc 	andi	r3,r2,2047
   20de8:	e0bffc17 	ldw	r2,-16(fp)
   20dec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   20df0:	e0bffe17 	ldw	r2,-8(fp)
   20df4:	00bfcf16 	blt	zero,r2,20d34 <__alt_data_end+0xfc020d34>
   20df8:	00000106 	br	20e00 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   20dfc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   20e00:	e0fff517 	ldw	r3,-44(fp)
   20e04:	e0bffd17 	ldw	r2,-12(fp)
   20e08:	1880141e 	bne	r3,r2,20e5c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   20e0c:	e0bfff17 	ldw	r2,-4(fp)
   20e10:	1090000c 	andi	r2,r2,16384
   20e14:	1000131e 	bne	r2,zero,20e64 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   20e18:	0001883a 	nop
   20e1c:	e0bffc17 	ldw	r2,-16(fp)
   20e20:	10c00a17 	ldw	r3,40(r2)
   20e24:	e0bff717 	ldw	r2,-36(fp)
   20e28:	1880051e 	bne	r3,r2,20e40 <altera_avalon_jtag_uart_read+0x138>
   20e2c:	e0bffc17 	ldw	r2,-16(fp)
   20e30:	10c00917 	ldw	r3,36(r2)
   20e34:	e0bffc17 	ldw	r2,-16(fp)
   20e38:	10800117 	ldw	r2,4(r2)
   20e3c:	18bff736 	bltu	r3,r2,20e1c <__alt_data_end+0xfc020e1c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   20e40:	e0bffc17 	ldw	r2,-16(fp)
   20e44:	10c00a17 	ldw	r3,40(r2)
   20e48:	e0bff717 	ldw	r2,-36(fp)
   20e4c:	18800726 	beq	r3,r2,20e6c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20e50:	e0bffe17 	ldw	r2,-8(fp)
   20e54:	00bfb716 	blt	zero,r2,20d34 <__alt_data_end+0xfc020d34>
   20e58:	00000506 	br	20e70 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   20e5c:	0001883a 	nop
   20e60:	00000306 	br	20e70 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   20e64:	0001883a 	nop
   20e68:	00000106 	br	20e70 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   20e6c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   20e70:	e0fff517 	ldw	r3,-44(fp)
   20e74:	e0bffd17 	ldw	r2,-12(fp)
   20e78:	18801826 	beq	r3,r2,20edc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20e7c:	0005303a 	rdctl	r2,status
   20e80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20e84:	e0fffb17 	ldw	r3,-20(fp)
   20e88:	00bfff84 	movi	r2,-2
   20e8c:	1884703a 	and	r2,r3,r2
   20e90:	1001703a 	wrctl	status,r2
  
  return context;
   20e94:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   20e98:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20e9c:	e0bffc17 	ldw	r2,-16(fp)
   20ea0:	10800817 	ldw	r2,32(r2)
   20ea4:	10c00054 	ori	r3,r2,1
   20ea8:	e0bffc17 	ldw	r2,-16(fp)
   20eac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20eb0:	e0bffc17 	ldw	r2,-16(fp)
   20eb4:	10800017 	ldw	r2,0(r2)
   20eb8:	10800104 	addi	r2,r2,4
   20ebc:	1007883a 	mov	r3,r2
   20ec0:	e0bffc17 	ldw	r2,-16(fp)
   20ec4:	10800817 	ldw	r2,32(r2)
   20ec8:	18800035 	stwio	r2,0(r3)
   20ecc:	e0bffa17 	ldw	r2,-24(fp)
   20ed0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20ed4:	e0bff917 	ldw	r2,-28(fp)
   20ed8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   20edc:	e0fff517 	ldw	r3,-44(fp)
   20ee0:	e0bffd17 	ldw	r2,-12(fp)
   20ee4:	18800426 	beq	r3,r2,20ef8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   20ee8:	e0fff517 	ldw	r3,-44(fp)
   20eec:	e0bffd17 	ldw	r2,-12(fp)
   20ef0:	1885c83a 	sub	r2,r3,r2
   20ef4:	00000606 	br	20f10 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   20ef8:	e0bfff17 	ldw	r2,-4(fp)
   20efc:	1090000c 	andi	r2,r2,16384
   20f00:	10000226 	beq	r2,zero,20f0c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   20f04:	00bffd44 	movi	r2,-11
   20f08:	00000106 	br	20f10 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   20f0c:	00bffec4 	movi	r2,-5
}
   20f10:	e037883a 	mov	sp,fp
   20f14:	dfc00117 	ldw	ra,4(sp)
   20f18:	df000017 	ldw	fp,0(sp)
   20f1c:	dec00204 	addi	sp,sp,8
   20f20:	f800283a 	ret

00020f24 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20f24:	defff304 	addi	sp,sp,-52
   20f28:	dfc00c15 	stw	ra,48(sp)
   20f2c:	df000b15 	stw	fp,44(sp)
   20f30:	df000b04 	addi	fp,sp,44
   20f34:	e13ffc15 	stw	r4,-16(fp)
   20f38:	e17ffd15 	stw	r5,-12(fp)
   20f3c:	e1bffe15 	stw	r6,-8(fp)
   20f40:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   20f44:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   20f48:	e0bffd17 	ldw	r2,-12(fp)
   20f4c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20f50:	00003706 	br	21030 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   20f54:	e0bffc17 	ldw	r2,-16(fp)
   20f58:	10800c17 	ldw	r2,48(r2)
   20f5c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   20f60:	e0bffc17 	ldw	r2,-16(fp)
   20f64:	10800d17 	ldw	r2,52(r2)
   20f68:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   20f6c:	e0fff917 	ldw	r3,-28(fp)
   20f70:	e0bff517 	ldw	r2,-44(fp)
   20f74:	1880062e 	bgeu	r3,r2,20f90 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   20f78:	e0fff517 	ldw	r3,-44(fp)
   20f7c:	e0bff917 	ldw	r2,-28(fp)
   20f80:	1885c83a 	sub	r2,r3,r2
   20f84:	10bfffc4 	addi	r2,r2,-1
   20f88:	e0bff615 	stw	r2,-40(fp)
   20f8c:	00000b06 	br	20fbc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   20f90:	e0bff517 	ldw	r2,-44(fp)
   20f94:	10000526 	beq	r2,zero,20fac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   20f98:	00c20004 	movi	r3,2048
   20f9c:	e0bff917 	ldw	r2,-28(fp)
   20fa0:	1885c83a 	sub	r2,r3,r2
   20fa4:	e0bff615 	stw	r2,-40(fp)
   20fa8:	00000406 	br	20fbc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   20fac:	00c1ffc4 	movi	r3,2047
   20fb0:	e0bff917 	ldw	r2,-28(fp)
   20fb4:	1885c83a 	sub	r2,r3,r2
   20fb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   20fbc:	e0bff617 	ldw	r2,-40(fp)
   20fc0:	10001e26 	beq	r2,zero,2103c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   20fc4:	e0fffe17 	ldw	r3,-8(fp)
   20fc8:	e0bff617 	ldw	r2,-40(fp)
   20fcc:	1880022e 	bgeu	r3,r2,20fd8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   20fd0:	e0bffe17 	ldw	r2,-8(fp)
   20fd4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   20fd8:	e0bffc17 	ldw	r2,-16(fp)
   20fdc:	10c20e04 	addi	r3,r2,2104
   20fe0:	e0bff917 	ldw	r2,-28(fp)
   20fe4:	1885883a 	add	r2,r3,r2
   20fe8:	e1bff617 	ldw	r6,-40(fp)
   20fec:	e17ffd17 	ldw	r5,-12(fp)
   20ff0:	1009883a 	mov	r4,r2
   20ff4:	000dad40 	call	dad4 <memcpy>
      ptr   += n;
   20ff8:	e0fffd17 	ldw	r3,-12(fp)
   20ffc:	e0bff617 	ldw	r2,-40(fp)
   21000:	1885883a 	add	r2,r3,r2
   21004:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21008:	e0fffe17 	ldw	r3,-8(fp)
   2100c:	e0bff617 	ldw	r2,-40(fp)
   21010:	1885c83a 	sub	r2,r3,r2
   21014:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21018:	e0fff917 	ldw	r3,-28(fp)
   2101c:	e0bff617 	ldw	r2,-40(fp)
   21020:	1885883a 	add	r2,r3,r2
   21024:	10c1ffcc 	andi	r3,r2,2047
   21028:	e0bffc17 	ldw	r2,-16(fp)
   2102c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21030:	e0bffe17 	ldw	r2,-8(fp)
   21034:	00bfc716 	blt	zero,r2,20f54 <__alt_data_end+0xfc020f54>
   21038:	00000106 	br	21040 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2103c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21040:	0005303a 	rdctl	r2,status
   21044:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21048:	e0fffb17 	ldw	r3,-20(fp)
   2104c:	00bfff84 	movi	r2,-2
   21050:	1884703a 	and	r2,r3,r2
   21054:	1001703a 	wrctl	status,r2
  
  return context;
   21058:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2105c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21060:	e0bffc17 	ldw	r2,-16(fp)
   21064:	10800817 	ldw	r2,32(r2)
   21068:	10c00094 	ori	r3,r2,2
   2106c:	e0bffc17 	ldw	r2,-16(fp)
   21070:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21074:	e0bffc17 	ldw	r2,-16(fp)
   21078:	10800017 	ldw	r2,0(r2)
   2107c:	10800104 	addi	r2,r2,4
   21080:	1007883a 	mov	r3,r2
   21084:	e0bffc17 	ldw	r2,-16(fp)
   21088:	10800817 	ldw	r2,32(r2)
   2108c:	18800035 	stwio	r2,0(r3)
   21090:	e0bffa17 	ldw	r2,-24(fp)
   21094:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21098:	e0bff817 	ldw	r2,-32(fp)
   2109c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   210a0:	e0bffe17 	ldw	r2,-8(fp)
   210a4:	0080100e 	bge	zero,r2,210e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   210a8:	e0bfff17 	ldw	r2,-4(fp)
   210ac:	1090000c 	andi	r2,r2,16384
   210b0:	1000101e 	bne	r2,zero,210f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   210b4:	0001883a 	nop
   210b8:	e0bffc17 	ldw	r2,-16(fp)
   210bc:	10c00d17 	ldw	r3,52(r2)
   210c0:	e0bff517 	ldw	r2,-44(fp)
   210c4:	1880051e 	bne	r3,r2,210dc <altera_avalon_jtag_uart_write+0x1b8>
   210c8:	e0bffc17 	ldw	r2,-16(fp)
   210cc:	10c00917 	ldw	r3,36(r2)
   210d0:	e0bffc17 	ldw	r2,-16(fp)
   210d4:	10800117 	ldw	r2,4(r2)
   210d8:	18bff736 	bltu	r3,r2,210b8 <__alt_data_end+0xfc0210b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   210dc:	e0bffc17 	ldw	r2,-16(fp)
   210e0:	10800917 	ldw	r2,36(r2)
   210e4:	1000051e 	bne	r2,zero,210fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   210e8:	e0bffe17 	ldw	r2,-8(fp)
   210ec:	00bfd016 	blt	zero,r2,21030 <__alt_data_end+0xfc021030>
   210f0:	00000306 	br	21100 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   210f4:	0001883a 	nop
   210f8:	00000106 	br	21100 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   210fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21100:	e0fffd17 	ldw	r3,-12(fp)
   21104:	e0bff717 	ldw	r2,-36(fp)
   21108:	18800426 	beq	r3,r2,2111c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2110c:	e0fffd17 	ldw	r3,-12(fp)
   21110:	e0bff717 	ldw	r2,-36(fp)
   21114:	1885c83a 	sub	r2,r3,r2
   21118:	00000606 	br	21134 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2111c:	e0bfff17 	ldw	r2,-4(fp)
   21120:	1090000c 	andi	r2,r2,16384
   21124:	10000226 	beq	r2,zero,21130 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   21128:	00bffd44 	movi	r2,-11
   2112c:	00000106 	br	21134 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21130:	00bffec4 	movi	r2,-5
}
   21134:	e037883a 	mov	sp,fp
   21138:	dfc00117 	ldw	ra,4(sp)
   2113c:	df000017 	ldw	fp,0(sp)
   21140:	dec00204 	addi	sp,sp,8
   21144:	f800283a 	ret

00021148 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   21148:	defff404 	addi	sp,sp,-48
   2114c:	df000b15 	stw	fp,44(sp)
   21150:	df000b04 	addi	fp,sp,44
   21154:	e13ffc15 	stw	r4,-16(fp)
   21158:	e17ffd15 	stw	r5,-12(fp)
   2115c:	e1bffe15 	stw	r6,-8(fp)
   21160:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   21164:	e0ffff17 	ldw	r3,-4(fp)
   21168:	e0bffe17 	ldw	r2,-8(fp)
   2116c:	1885883a 	add	r2,r3,r2
   21170:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   21174:	e0c00217 	ldw	r3,8(fp)
   21178:	e0800117 	ldw	r2,4(fp)
   2117c:	1885883a 	add	r2,r3,r2
   21180:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   21184:	e0800117 	ldw	r2,4(fp)
   21188:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   2118c:	e0bffe17 	ldw	r2,-8(fp)
   21190:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   21194:	00800044 	movi	r2,1
   21198:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   2119c:	e0bffc17 	ldw	r2,-16(fp)
   211a0:	10800504 	addi	r2,r2,20
   211a4:	1009883a 	mov	r4,r2
   211a8:	00c00044 	movi	r3,1
   211ac:	e0bffd17 	ldw	r2,-12(fp)
   211b0:	1884983a 	sll	r2,r3,r2
   211b4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   211b8:	e0800317 	ldw	r2,12(fp)
   211bc:	1080008c 	andi	r2,r2,2
   211c0:	1000051e 	bne	r2,zero,211d8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   211c4:	e0bffc17 	ldw	r2,-16(fp)
   211c8:	10800304 	addi	r2,r2,12
   211cc:	1007883a 	mov	r3,r2
   211d0:	00810004 	movi	r2,1024
   211d4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   211d8:	e0bffc17 	ldw	r2,-16(fp)
   211dc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   211e0:	e0bffc17 	ldw	r2,-16(fp)
   211e4:	10800204 	addi	r2,r2,8
   211e8:	10800037 	ldwio	r2,0(r2)
   211ec:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   211f0:	e0bffa17 	ldw	r2,-24(fp)
   211f4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   211f8:	10000226 	beq	r2,zero,21204 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   211fc:	e0bff717 	ldw	r2,-36(fp)
   21200:	1000031e 	bne	r2,zero,21210 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   21204:	e0bffa17 	ldw	r2,-24(fp)
   21208:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   2120c:	103ff426 	beq	r2,zero,211e0 <__alt_data_end+0xfc0211e0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   21210:	e0bffa17 	ldw	r2,-24(fp)
   21214:	1080100c 	andi	r2,r2,64
   21218:	10001e26 	beq	r2,zero,21294 <alt_avalon_spi_command+0x14c>
   2121c:	e0bff717 	ldw	r2,-36(fp)
   21220:	00801c0e 	bge	zero,r2,21294 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   21224:	e0bff717 	ldw	r2,-36(fp)
   21228:	10bfffc4 	addi	r2,r2,-1
   2122c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   21230:	e0ffff17 	ldw	r3,-4(fp)
   21234:	e0bff817 	ldw	r2,-32(fp)
   21238:	18800a2e 	bgeu	r3,r2,21264 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   2123c:	e0bffc17 	ldw	r2,-16(fp)
   21240:	10800104 	addi	r2,r2,4
   21244:	1009883a 	mov	r4,r2
   21248:	e0bfff17 	ldw	r2,-4(fp)
   2124c:	10c00044 	addi	r3,r2,1
   21250:	e0ffff15 	stw	r3,-4(fp)
   21254:	10800003 	ldbu	r2,0(r2)
   21258:	10803fcc 	andi	r2,r2,255
   2125c:	20800035 	stwio	r2,0(r4)
   21260:	00000c06 	br	21294 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   21264:	e0bff517 	ldw	r2,-44(fp)
   21268:	10000826 	beq	r2,zero,2128c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   2126c:	e0bff517 	ldw	r2,-44(fp)
   21270:	10bfffc4 	addi	r2,r2,-1
   21274:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   21278:	e0bffc17 	ldw	r2,-16(fp)
   2127c:	10800104 	addi	r2,r2,4
   21280:	0007883a 	mov	r3,zero
   21284:	10c00035 	stwio	r3,0(r2)
   21288:	00000206 	br	21294 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   2128c:	00bf0004 	movi	r2,-1024
   21290:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   21294:	e0bffa17 	ldw	r2,-24(fp)
   21298:	1080200c 	andi	r2,r2,128
   2129c:	103fd026 	beq	r2,zero,211e0 <__alt_data_end+0xfc0211e0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   212a0:	e0bffc17 	ldw	r2,-16(fp)
   212a4:	10800037 	ldwio	r2,0(r2)
   212a8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   212ac:	e0bff617 	ldw	r2,-40(fp)
   212b0:	10000426 	beq	r2,zero,212c4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   212b4:	e0bff617 	ldw	r2,-40(fp)
   212b8:	10bfffc4 	addi	r2,r2,-1
   212bc:	e0bff615 	stw	r2,-40(fp)
   212c0:	00000506 	br	212d8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   212c4:	e0800217 	ldw	r2,8(fp)
   212c8:	10c00044 	addi	r3,r2,1
   212cc:	e0c00215 	stw	r3,8(fp)
   212d0:	e0fffb17 	ldw	r3,-20(fp)
   212d4:	10c00005 	stb	r3,0(r2)
      credits++;
   212d8:	e0bff717 	ldw	r2,-36(fp)
   212dc:	10800044 	addi	r2,r2,1
   212e0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   212e4:	e0bff617 	ldw	r2,-40(fp)
   212e8:	103fbd1e 	bne	r2,zero,211e0 <__alt_data_end+0xfc0211e0>
   212ec:	e0c00217 	ldw	r3,8(fp)
   212f0:	e0bff917 	ldw	r2,-28(fp)
   212f4:	18bfba1e 	bne	r3,r2,211e0 <__alt_data_end+0xfc0211e0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   212f8:	e0bffc17 	ldw	r2,-16(fp)
   212fc:	10800204 	addi	r2,r2,8
   21300:	10800037 	ldwio	r2,0(r2)
   21304:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   21308:	e0bffa17 	ldw	r2,-24(fp)
   2130c:	1080080c 	andi	r2,r2,32
   21310:	103ff926 	beq	r2,zero,212f8 <__alt_data_end+0xfc0212f8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   21314:	e0800317 	ldw	r2,12(fp)
   21318:	1080004c 	andi	r2,r2,1
   2131c:	1000041e 	bne	r2,zero,21330 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   21320:	e0bffc17 	ldw	r2,-16(fp)
   21324:	10800304 	addi	r2,r2,12
   21328:	0007883a 	mov	r3,zero
   2132c:	10c00035 	stwio	r3,0(r2)

  return read_length;
   21330:	e0800117 	ldw	r2,4(fp)
}
   21334:	e037883a 	mov	sp,fp
   21338:	df000017 	ldw	fp,0(sp)
   2133c:	dec00104 	addi	sp,sp,4
   21340:	f800283a 	ret

00021344 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   21344:	defffa04 	addi	sp,sp,-24
   21348:	dfc00515 	stw	ra,20(sp)
   2134c:	df000415 	stw	fp,16(sp)
   21350:	df000404 	addi	fp,sp,16
   21354:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21358:	0007883a 	mov	r3,zero
   2135c:	e0bfff17 	ldw	r2,-4(fp)
   21360:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21364:	e0bfff17 	ldw	r2,-4(fp)
   21368:	10800104 	addi	r2,r2,4
   2136c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21370:	0005303a 	rdctl	r2,status
   21374:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21378:	e0fffd17 	ldw	r3,-12(fp)
   2137c:	00bfff84 	movi	r2,-2
   21380:	1884703a 	and	r2,r3,r2
   21384:	1001703a 	wrctl	status,r2
  
  return context;
   21388:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2138c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   21390:	00222b40 	call	222b4 <alt_tick>
   21394:	e0bffc17 	ldw	r2,-16(fp)
   21398:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2139c:	e0bffe17 	ldw	r2,-8(fp)
   213a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   213a4:	0001883a 	nop
   213a8:	e037883a 	mov	sp,fp
   213ac:	dfc00117 	ldw	ra,4(sp)
   213b0:	df000017 	ldw	fp,0(sp)
   213b4:	dec00204 	addi	sp,sp,8
   213b8:	f800283a 	ret

000213bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   213bc:	defff804 	addi	sp,sp,-32
   213c0:	dfc00715 	stw	ra,28(sp)
   213c4:	df000615 	stw	fp,24(sp)
   213c8:	df000604 	addi	fp,sp,24
   213cc:	e13ffc15 	stw	r4,-16(fp)
   213d0:	e17ffd15 	stw	r5,-12(fp)
   213d4:	e1bffe15 	stw	r6,-8(fp)
   213d8:	e1ffff15 	stw	r7,-4(fp)
   213dc:	e0bfff17 	ldw	r2,-4(fp)
   213e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   213e4:	d0b24717 	ldw	r2,-14052(gp)
   213e8:	1000021e 	bne	r2,zero,213f4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   213ec:	e0bffb17 	ldw	r2,-20(fp)
   213f0:	d0b24715 	stw	r2,-14052(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   213f4:	e0bffc17 	ldw	r2,-16(fp)
   213f8:	10800104 	addi	r2,r2,4
   213fc:	00c001c4 	movi	r3,7
   21400:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21404:	d8000015 	stw	zero,0(sp)
   21408:	e1fffc17 	ldw	r7,-16(fp)
   2140c:	018000b4 	movhi	r6,2
   21410:	3184d104 	addi	r6,r6,4932
   21414:	e17ffe17 	ldw	r5,-8(fp)
   21418:	e13ffd17 	ldw	r4,-12(fp)
   2141c:	002192c0 	call	2192c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   21420:	0001883a 	nop
   21424:	e037883a 	mov	sp,fp
   21428:	dfc00117 	ldw	ra,4(sp)
   2142c:	df000017 	ldw	fp,0(sp)
   21430:	dec00204 	addi	sp,sp,8
   21434:	f800283a 	ret

00021438 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21438:	defff504 	addi	sp,sp,-44
   2143c:	df000a15 	stw	fp,40(sp)
   21440:	df000a04 	addi	fp,sp,40
   21444:	e13ffc15 	stw	r4,-16(fp)
   21448:	e17ffd15 	stw	r5,-12(fp)
   2144c:	e1bffe15 	stw	r6,-8(fp)
   21450:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21454:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21458:	d0b24717 	ldw	r2,-14052(gp)
  
  if (alt_ticks_per_second ())
   2145c:	10003c26 	beq	r2,zero,21550 <alt_alarm_start+0x118>
  {
    if (alarm)
   21460:	e0bffc17 	ldw	r2,-16(fp)
   21464:	10003826 	beq	r2,zero,21548 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21468:	e0bffc17 	ldw	r2,-16(fp)
   2146c:	e0fffe17 	ldw	r3,-8(fp)
   21470:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21474:	e0bffc17 	ldw	r2,-16(fp)
   21478:	e0ffff17 	ldw	r3,-4(fp)
   2147c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21480:	0005303a 	rdctl	r2,status
   21484:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21488:	e0fff917 	ldw	r3,-28(fp)
   2148c:	00bfff84 	movi	r2,-2
   21490:	1884703a 	and	r2,r3,r2
   21494:	1001703a 	wrctl	status,r2
  
  return context;
   21498:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2149c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   214a0:	d0b24817 	ldw	r2,-14048(gp)
      
      current_nticks = alt_nticks();
   214a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   214a8:	e0fffd17 	ldw	r3,-12(fp)
   214ac:	e0bff617 	ldw	r2,-40(fp)
   214b0:	1885883a 	add	r2,r3,r2
   214b4:	10c00044 	addi	r3,r2,1
   214b8:	e0bffc17 	ldw	r2,-16(fp)
   214bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   214c0:	e0bffc17 	ldw	r2,-16(fp)
   214c4:	10c00217 	ldw	r3,8(r2)
   214c8:	e0bff617 	ldw	r2,-40(fp)
   214cc:	1880042e 	bgeu	r3,r2,214e0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   214d0:	e0bffc17 	ldw	r2,-16(fp)
   214d4:	00c00044 	movi	r3,1
   214d8:	10c00405 	stb	r3,16(r2)
   214dc:	00000206 	br	214e8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   214e0:	e0bffc17 	ldw	r2,-16(fp)
   214e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   214e8:	e0bffc17 	ldw	r2,-16(fp)
   214ec:	d0e5bc04 	addi	r3,gp,-26896
   214f0:	e0fffa15 	stw	r3,-24(fp)
   214f4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   214f8:	e0bffb17 	ldw	r2,-20(fp)
   214fc:	e0fffa17 	ldw	r3,-24(fp)
   21500:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21504:	e0bffa17 	ldw	r2,-24(fp)
   21508:	10c00017 	ldw	r3,0(r2)
   2150c:	e0bffb17 	ldw	r2,-20(fp)
   21510:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21514:	e0bffa17 	ldw	r2,-24(fp)
   21518:	10800017 	ldw	r2,0(r2)
   2151c:	e0fffb17 	ldw	r3,-20(fp)
   21520:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21524:	e0bffa17 	ldw	r2,-24(fp)
   21528:	e0fffb17 	ldw	r3,-20(fp)
   2152c:	10c00015 	stw	r3,0(r2)
   21530:	e0bff817 	ldw	r2,-32(fp)
   21534:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21538:	e0bff717 	ldw	r2,-36(fp)
   2153c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   21540:	0005883a 	mov	r2,zero
   21544:	00000306 	br	21554 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   21548:	00bffa84 	movi	r2,-22
   2154c:	00000106 	br	21554 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   21550:	00bfde84 	movi	r2,-134
  }
}
   21554:	e037883a 	mov	sp,fp
   21558:	df000017 	ldw	fp,0(sp)
   2155c:	dec00104 	addi	sp,sp,4
   21560:	f800283a 	ret

00021564 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   21564:	defffa04 	addi	sp,sp,-24
   21568:	dfc00515 	stw	ra,20(sp)
   2156c:	df000415 	stw	fp,16(sp)
   21570:	df000404 	addi	fp,sp,16
   21574:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   21578:	00800244 	movi	r2,9
   2157c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   21580:	014003f4 	movhi	r5,15
   21584:	29509004 	addi	r5,r5,16960
   21588:	e13ffd17 	ldw	r4,-12(fp)
   2158c:	000ccf40 	call	ccf4 <__mulsi3>
   21590:	100b883a 	mov	r5,r2
   21594:	01017db4 	movhi	r4,1526
   21598:	21384004 	addi	r4,r4,-7936
   2159c:	000cc380 	call	cc38 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   215a0:	100b883a 	mov	r5,r2
   215a4:	01200034 	movhi	r4,32768
   215a8:	213fffc4 	addi	r4,r4,-1
   215ac:	000cc380 	call	cc38 <__udivsi3>
   215b0:	100b883a 	mov	r5,r2
   215b4:	e13fff17 	ldw	r4,-4(fp)
   215b8:	000cc380 	call	cc38 <__udivsi3>
   215bc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   215c0:	e0bffe17 	ldw	r2,-8(fp)
   215c4:	10002a26 	beq	r2,zero,21670 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   215c8:	e03ffc15 	stw	zero,-16(fp)
   215cc:	00001706 	br	2162c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   215d0:	00a00034 	movhi	r2,32768
   215d4:	10bfffc4 	addi	r2,r2,-1
   215d8:	10bfffc4 	addi	r2,r2,-1
   215dc:	103ffe1e 	bne	r2,zero,215d8 <__alt_data_end+0xfc0215d8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   215e0:	014003f4 	movhi	r5,15
   215e4:	29509004 	addi	r5,r5,16960
   215e8:	e13ffd17 	ldw	r4,-12(fp)
   215ec:	000ccf40 	call	ccf4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   215f0:	100b883a 	mov	r5,r2
   215f4:	01017db4 	movhi	r4,1526
   215f8:	21384004 	addi	r4,r4,-7936
   215fc:	000cc380 	call	cc38 <__udivsi3>
   21600:	100b883a 	mov	r5,r2
   21604:	01200034 	movhi	r4,32768
   21608:	213fffc4 	addi	r4,r4,-1
   2160c:	000cc380 	call	cc38 <__udivsi3>
   21610:	1007883a 	mov	r3,r2
   21614:	e0bfff17 	ldw	r2,-4(fp)
   21618:	10c5c83a 	sub	r2,r2,r3
   2161c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   21620:	e0bffc17 	ldw	r2,-16(fp)
   21624:	10800044 	addi	r2,r2,1
   21628:	e0bffc15 	stw	r2,-16(fp)
   2162c:	e0fffc17 	ldw	r3,-16(fp)
   21630:	e0bffe17 	ldw	r2,-8(fp)
   21634:	18bfe616 	blt	r3,r2,215d0 <__alt_data_end+0xfc0215d0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   21638:	014003f4 	movhi	r5,15
   2163c:	29509004 	addi	r5,r5,16960
   21640:	e13ffd17 	ldw	r4,-12(fp)
   21644:	000ccf40 	call	ccf4 <__mulsi3>
   21648:	100b883a 	mov	r5,r2
   2164c:	01017db4 	movhi	r4,1526
   21650:	21384004 	addi	r4,r4,-7936
   21654:	000cc380 	call	cc38 <__udivsi3>
   21658:	e17fff17 	ldw	r5,-4(fp)
   2165c:	1009883a 	mov	r4,r2
   21660:	000ccf40 	call	ccf4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21664:	10bfffc4 	addi	r2,r2,-1
   21668:	103ffe1e 	bne	r2,zero,21664 <__alt_data_end+0xfc021664>
   2166c:	00000d06 	br	216a4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   21670:	014003f4 	movhi	r5,15
   21674:	29509004 	addi	r5,r5,16960
   21678:	e13ffd17 	ldw	r4,-12(fp)
   2167c:	000ccf40 	call	ccf4 <__mulsi3>
   21680:	100b883a 	mov	r5,r2
   21684:	01017db4 	movhi	r4,1526
   21688:	21384004 	addi	r4,r4,-7936
   2168c:	000cc380 	call	cc38 <__udivsi3>
   21690:	e17fff17 	ldw	r5,-4(fp)
   21694:	1009883a 	mov	r4,r2
   21698:	000ccf40 	call	ccf4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2169c:	10bfffc4 	addi	r2,r2,-1
   216a0:	00bffe16 	blt	zero,r2,2169c <__alt_data_end+0xfc02169c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   216a4:	0005883a 	mov	r2,zero
}
   216a8:	e037883a 	mov	sp,fp
   216ac:	dfc00117 	ldw	ra,4(sp)
   216b0:	df000017 	ldw	fp,0(sp)
   216b4:	dec00204 	addi	sp,sp,8
   216b8:	f800283a 	ret

000216bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   216bc:	deffff04 	addi	sp,sp,-4
   216c0:	df000015 	stw	fp,0(sp)
   216c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   216c8:	0001883a 	nop
   216cc:	e037883a 	mov	sp,fp
   216d0:	df000017 	ldw	fp,0(sp)
   216d4:	dec00104 	addi	sp,sp,4
   216d8:	f800283a 	ret

000216dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   216dc:	defffe04 	addi	sp,sp,-8
   216e0:	dfc00115 	stw	ra,4(sp)
   216e4:	df000015 	stw	fp,0(sp)
   216e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   216ec:	d0a5b717 	ldw	r2,-26916(gp)
   216f0:	10000326 	beq	r2,zero,21700 <alt_get_errno+0x24>
   216f4:	d0a5b717 	ldw	r2,-26916(gp)
   216f8:	103ee83a 	callr	r2
   216fc:	00000106 	br	21704 <alt_get_errno+0x28>
   21700:	d0b23f04 	addi	r2,gp,-14084
}
   21704:	e037883a 	mov	sp,fp
   21708:	dfc00117 	ldw	ra,4(sp)
   2170c:	df000017 	ldw	fp,0(sp)
   21710:	dec00204 	addi	sp,sp,8
   21714:	f800283a 	ret

00021718 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   21718:	defffa04 	addi	sp,sp,-24
   2171c:	dfc00515 	stw	ra,20(sp)
   21720:	df000415 	stw	fp,16(sp)
   21724:	df000404 	addi	fp,sp,16
   21728:	e13ffe15 	stw	r4,-8(fp)
   2172c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21730:	e0bffe17 	ldw	r2,-8(fp)
   21734:	10000326 	beq	r2,zero,21744 <alt_dev_llist_insert+0x2c>
   21738:	e0bffe17 	ldw	r2,-8(fp)
   2173c:	10800217 	ldw	r2,8(r2)
   21740:	1000061e 	bne	r2,zero,2175c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   21744:	00216dc0 	call	216dc <alt_get_errno>
   21748:	1007883a 	mov	r3,r2
   2174c:	00800584 	movi	r2,22
   21750:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   21754:	00bffa84 	movi	r2,-22
   21758:	00001306 	br	217a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2175c:	e0bffe17 	ldw	r2,-8(fp)
   21760:	e0ffff17 	ldw	r3,-4(fp)
   21764:	e0fffc15 	stw	r3,-16(fp)
   21768:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2176c:	e0bffd17 	ldw	r2,-12(fp)
   21770:	e0fffc17 	ldw	r3,-16(fp)
   21774:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21778:	e0bffc17 	ldw	r2,-16(fp)
   2177c:	10c00017 	ldw	r3,0(r2)
   21780:	e0bffd17 	ldw	r2,-12(fp)
   21784:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21788:	e0bffc17 	ldw	r2,-16(fp)
   2178c:	10800017 	ldw	r2,0(r2)
   21790:	e0fffd17 	ldw	r3,-12(fp)
   21794:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21798:	e0bffc17 	ldw	r2,-16(fp)
   2179c:	e0fffd17 	ldw	r3,-12(fp)
   217a0:	10c00015 	stw	r3,0(r2)

  return 0;  
   217a4:	0005883a 	mov	r2,zero
}
   217a8:	e037883a 	mov	sp,fp
   217ac:	dfc00117 	ldw	ra,4(sp)
   217b0:	df000017 	ldw	fp,0(sp)
   217b4:	dec00204 	addi	sp,sp,8
   217b8:	f800283a 	ret

000217bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   217bc:	defffd04 	addi	sp,sp,-12
   217c0:	dfc00215 	stw	ra,8(sp)
   217c4:	df000115 	stw	fp,4(sp)
   217c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   217cc:	008000b4 	movhi	r2,2
   217d0:	108a7904 	addi	r2,r2,10724
   217d4:	e0bfff15 	stw	r2,-4(fp)
   217d8:	00000606 	br	217f4 <_do_ctors+0x38>
        (*ctor) (); 
   217dc:	e0bfff17 	ldw	r2,-4(fp)
   217e0:	10800017 	ldw	r2,0(r2)
   217e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   217e8:	e0bfff17 	ldw	r2,-4(fp)
   217ec:	10bfff04 	addi	r2,r2,-4
   217f0:	e0bfff15 	stw	r2,-4(fp)
   217f4:	e0ffff17 	ldw	r3,-4(fp)
   217f8:	008000b4 	movhi	r2,2
   217fc:	108a7804 	addi	r2,r2,10720
   21800:	18bff62e 	bgeu	r3,r2,217dc <__alt_data_end+0xfc0217dc>
        (*ctor) (); 
}
   21804:	0001883a 	nop
   21808:	e037883a 	mov	sp,fp
   2180c:	dfc00117 	ldw	ra,4(sp)
   21810:	df000017 	ldw	fp,0(sp)
   21814:	dec00204 	addi	sp,sp,8
   21818:	f800283a 	ret

0002181c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2181c:	defffd04 	addi	sp,sp,-12
   21820:	dfc00215 	stw	ra,8(sp)
   21824:	df000115 	stw	fp,4(sp)
   21828:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2182c:	008000b4 	movhi	r2,2
   21830:	108a7904 	addi	r2,r2,10724
   21834:	e0bfff15 	stw	r2,-4(fp)
   21838:	00000606 	br	21854 <_do_dtors+0x38>
        (*dtor) (); 
   2183c:	e0bfff17 	ldw	r2,-4(fp)
   21840:	10800017 	ldw	r2,0(r2)
   21844:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21848:	e0bfff17 	ldw	r2,-4(fp)
   2184c:	10bfff04 	addi	r2,r2,-4
   21850:	e0bfff15 	stw	r2,-4(fp)
   21854:	e0ffff17 	ldw	r3,-4(fp)
   21858:	008000b4 	movhi	r2,2
   2185c:	108a7a04 	addi	r2,r2,10728
   21860:	18bff62e 	bgeu	r3,r2,2183c <__alt_data_end+0xfc02183c>
        (*dtor) (); 
}
   21864:	0001883a 	nop
   21868:	e037883a 	mov	sp,fp
   2186c:	dfc00117 	ldw	ra,4(sp)
   21870:	df000017 	ldw	fp,0(sp)
   21874:	dec00204 	addi	sp,sp,8
   21878:	f800283a 	ret

0002187c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2187c:	defffa04 	addi	sp,sp,-24
   21880:	dfc00515 	stw	ra,20(sp)
   21884:	df000415 	stw	fp,16(sp)
   21888:	df000404 	addi	fp,sp,16
   2188c:	e13ffe15 	stw	r4,-8(fp)
   21890:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   21894:	e0bfff17 	ldw	r2,-4(fp)
   21898:	10800017 	ldw	r2,0(r2)
   2189c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   218a0:	e13ffe17 	ldw	r4,-8(fp)
   218a4:	000e39c0 	call	e39c <strlen>
   218a8:	10800044 	addi	r2,r2,1
   218ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   218b0:	00000d06 	br	218e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   218b4:	e0bffc17 	ldw	r2,-16(fp)
   218b8:	10800217 	ldw	r2,8(r2)
   218bc:	e0fffd17 	ldw	r3,-12(fp)
   218c0:	180d883a 	mov	r6,r3
   218c4:	e17ffe17 	ldw	r5,-8(fp)
   218c8:	1009883a 	mov	r4,r2
   218cc:	00226940 	call	22694 <memcmp>
   218d0:	1000021e 	bne	r2,zero,218dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   218d4:	e0bffc17 	ldw	r2,-16(fp)
   218d8:	00000706 	br	218f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   218dc:	e0bffc17 	ldw	r2,-16(fp)
   218e0:	10800017 	ldw	r2,0(r2)
   218e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   218e8:	e0fffc17 	ldw	r3,-16(fp)
   218ec:	e0bfff17 	ldw	r2,-4(fp)
   218f0:	18bff01e 	bne	r3,r2,218b4 <__alt_data_end+0xfc0218b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   218f4:	0005883a 	mov	r2,zero
}
   218f8:	e037883a 	mov	sp,fp
   218fc:	dfc00117 	ldw	ra,4(sp)
   21900:	df000017 	ldw	fp,0(sp)
   21904:	dec00204 	addi	sp,sp,8
   21908:	f800283a 	ret

0002190c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2190c:	deffff04 	addi	sp,sp,-4
   21910:	df000015 	stw	fp,0(sp)
   21914:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   21918:	0001883a 	nop
   2191c:	e037883a 	mov	sp,fp
   21920:	df000017 	ldw	fp,0(sp)
   21924:	dec00104 	addi	sp,sp,4
   21928:	f800283a 	ret

0002192c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2192c:	defff904 	addi	sp,sp,-28
   21930:	dfc00615 	stw	ra,24(sp)
   21934:	df000515 	stw	fp,20(sp)
   21938:	df000504 	addi	fp,sp,20
   2193c:	e13ffc15 	stw	r4,-16(fp)
   21940:	e17ffd15 	stw	r5,-12(fp)
   21944:	e1bffe15 	stw	r6,-8(fp)
   21948:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2194c:	e0800217 	ldw	r2,8(fp)
   21950:	d8800015 	stw	r2,0(sp)
   21954:	e1ffff17 	ldw	r7,-4(fp)
   21958:	e1bffe17 	ldw	r6,-8(fp)
   2195c:	e17ffd17 	ldw	r5,-12(fp)
   21960:	e13ffc17 	ldw	r4,-16(fp)
   21964:	0021adc0 	call	21adc <alt_iic_isr_register>
}  
   21968:	e037883a 	mov	sp,fp
   2196c:	dfc00117 	ldw	ra,4(sp)
   21970:	df000017 	ldw	fp,0(sp)
   21974:	dec00204 	addi	sp,sp,8
   21978:	f800283a 	ret

0002197c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2197c:	defff904 	addi	sp,sp,-28
   21980:	df000615 	stw	fp,24(sp)
   21984:	df000604 	addi	fp,sp,24
   21988:	e13ffe15 	stw	r4,-8(fp)
   2198c:	e17fff15 	stw	r5,-4(fp)
   21990:	e0bfff17 	ldw	r2,-4(fp)
   21994:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21998:	0005303a 	rdctl	r2,status
   2199c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   219a0:	e0fffb17 	ldw	r3,-20(fp)
   219a4:	00bfff84 	movi	r2,-2
   219a8:	1884703a 	and	r2,r3,r2
   219ac:	1001703a 	wrctl	status,r2
  
  return context;
   219b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   219b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   219b8:	00c00044 	movi	r3,1
   219bc:	e0bffa17 	ldw	r2,-24(fp)
   219c0:	1884983a 	sll	r2,r3,r2
   219c4:	1007883a 	mov	r3,r2
   219c8:	d0b24617 	ldw	r2,-14056(gp)
   219cc:	1884b03a 	or	r2,r3,r2
   219d0:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   219d4:	d0b24617 	ldw	r2,-14056(gp)
   219d8:	100170fa 	wrctl	ienable,r2
   219dc:	e0bffc17 	ldw	r2,-16(fp)
   219e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   219e4:	e0bffd17 	ldw	r2,-12(fp)
   219e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   219ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   219f0:	0001883a 	nop
}
   219f4:	e037883a 	mov	sp,fp
   219f8:	df000017 	ldw	fp,0(sp)
   219fc:	dec00104 	addi	sp,sp,4
   21a00:	f800283a 	ret

00021a04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   21a04:	defff904 	addi	sp,sp,-28
   21a08:	df000615 	stw	fp,24(sp)
   21a0c:	df000604 	addi	fp,sp,24
   21a10:	e13ffe15 	stw	r4,-8(fp)
   21a14:	e17fff15 	stw	r5,-4(fp)
   21a18:	e0bfff17 	ldw	r2,-4(fp)
   21a1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21a20:	0005303a 	rdctl	r2,status
   21a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21a28:	e0fffb17 	ldw	r3,-20(fp)
   21a2c:	00bfff84 	movi	r2,-2
   21a30:	1884703a 	and	r2,r3,r2
   21a34:	1001703a 	wrctl	status,r2
  
  return context;
   21a38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21a3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   21a40:	00c00044 	movi	r3,1
   21a44:	e0bffa17 	ldw	r2,-24(fp)
   21a48:	1884983a 	sll	r2,r3,r2
   21a4c:	0084303a 	nor	r2,zero,r2
   21a50:	1007883a 	mov	r3,r2
   21a54:	d0b24617 	ldw	r2,-14056(gp)
   21a58:	1884703a 	and	r2,r3,r2
   21a5c:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21a60:	d0b24617 	ldw	r2,-14056(gp)
   21a64:	100170fa 	wrctl	ienable,r2
   21a68:	e0bffc17 	ldw	r2,-16(fp)
   21a6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21a70:	e0bffd17 	ldw	r2,-12(fp)
   21a74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21a78:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   21a7c:	0001883a 	nop
}
   21a80:	e037883a 	mov	sp,fp
   21a84:	df000017 	ldw	fp,0(sp)
   21a88:	dec00104 	addi	sp,sp,4
   21a8c:	f800283a 	ret

00021a90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   21a90:	defffc04 	addi	sp,sp,-16
   21a94:	df000315 	stw	fp,12(sp)
   21a98:	df000304 	addi	fp,sp,12
   21a9c:	e13ffe15 	stw	r4,-8(fp)
   21aa0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21aa4:	000530fa 	rdctl	r2,ienable
   21aa8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   21aac:	00c00044 	movi	r3,1
   21ab0:	e0bfff17 	ldw	r2,-4(fp)
   21ab4:	1884983a 	sll	r2,r3,r2
   21ab8:	1007883a 	mov	r3,r2
   21abc:	e0bffd17 	ldw	r2,-12(fp)
   21ac0:	1884703a 	and	r2,r3,r2
   21ac4:	1004c03a 	cmpne	r2,r2,zero
   21ac8:	10803fcc 	andi	r2,r2,255
}
   21acc:	e037883a 	mov	sp,fp
   21ad0:	df000017 	ldw	fp,0(sp)
   21ad4:	dec00104 	addi	sp,sp,4
   21ad8:	f800283a 	ret

00021adc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21adc:	defff504 	addi	sp,sp,-44
   21ae0:	dfc00a15 	stw	ra,40(sp)
   21ae4:	df000915 	stw	fp,36(sp)
   21ae8:	df000904 	addi	fp,sp,36
   21aec:	e13ffc15 	stw	r4,-16(fp)
   21af0:	e17ffd15 	stw	r5,-12(fp)
   21af4:	e1bffe15 	stw	r6,-8(fp)
   21af8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   21afc:	00bffa84 	movi	r2,-22
   21b00:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   21b04:	e0bffd17 	ldw	r2,-12(fp)
   21b08:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21b0c:	e0bff817 	ldw	r2,-32(fp)
   21b10:	10800808 	cmpgei	r2,r2,32
   21b14:	1000271e 	bne	r2,zero,21bb4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b18:	0005303a 	rdctl	r2,status
   21b1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b20:	e0fffb17 	ldw	r3,-20(fp)
   21b24:	00bfff84 	movi	r2,-2
   21b28:	1884703a 	and	r2,r3,r2
   21b2c:	1001703a 	wrctl	status,r2
  
  return context;
   21b30:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   21b34:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   21b38:	008000f4 	movhi	r2,3
   21b3c:	10bfa104 	addi	r2,r2,-380
   21b40:	e0fff817 	ldw	r3,-32(fp)
   21b44:	180690fa 	slli	r3,r3,3
   21b48:	10c5883a 	add	r2,r2,r3
   21b4c:	e0fffe17 	ldw	r3,-8(fp)
   21b50:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   21b54:	008000f4 	movhi	r2,3
   21b58:	10bfa104 	addi	r2,r2,-380
   21b5c:	e0fff817 	ldw	r3,-32(fp)
   21b60:	180690fa 	slli	r3,r3,3
   21b64:	10c5883a 	add	r2,r2,r3
   21b68:	10800104 	addi	r2,r2,4
   21b6c:	e0ffff17 	ldw	r3,-4(fp)
   21b70:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21b74:	e0bffe17 	ldw	r2,-8(fp)
   21b78:	10000526 	beq	r2,zero,21b90 <alt_iic_isr_register+0xb4>
   21b7c:	e0bff817 	ldw	r2,-32(fp)
   21b80:	100b883a 	mov	r5,r2
   21b84:	e13ffc17 	ldw	r4,-16(fp)
   21b88:	002197c0 	call	2197c <alt_ic_irq_enable>
   21b8c:	00000406 	br	21ba0 <alt_iic_isr_register+0xc4>
   21b90:	e0bff817 	ldw	r2,-32(fp)
   21b94:	100b883a 	mov	r5,r2
   21b98:	e13ffc17 	ldw	r4,-16(fp)
   21b9c:	0021a040 	call	21a04 <alt_ic_irq_disable>
   21ba0:	e0bff715 	stw	r2,-36(fp)
   21ba4:	e0bffa17 	ldw	r2,-24(fp)
   21ba8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21bac:	e0bff917 	ldw	r2,-28(fp)
   21bb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   21bb4:	e0bff717 	ldw	r2,-36(fp)
}
   21bb8:	e037883a 	mov	sp,fp
   21bbc:	dfc00117 	ldw	ra,4(sp)
   21bc0:	df000017 	ldw	fp,0(sp)
   21bc4:	dec00204 	addi	sp,sp,8
   21bc8:	f800283a 	ret

00021bcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21bcc:	defff804 	addi	sp,sp,-32
   21bd0:	dfc00715 	stw	ra,28(sp)
   21bd4:	df000615 	stw	fp,24(sp)
   21bd8:	dc000515 	stw	r16,20(sp)
   21bdc:	df000604 	addi	fp,sp,24
   21be0:	e13ffb15 	stw	r4,-20(fp)
   21be4:	e17ffc15 	stw	r5,-16(fp)
   21be8:	e1bffd15 	stw	r6,-12(fp)
   21bec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   21bf0:	e1bffe17 	ldw	r6,-8(fp)
   21bf4:	e17ffd17 	ldw	r5,-12(fp)
   21bf8:	e13ffc17 	ldw	r4,-16(fp)
   21bfc:	0021e540 	call	21e54 <open>
   21c00:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   21c04:	e0bffa17 	ldw	r2,-24(fp)
   21c08:	10002216 	blt	r2,zero,21c94 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   21c0c:	040000f4 	movhi	r16,3
   21c10:	84287b04 	addi	r16,r16,-24084
   21c14:	e0bffa17 	ldw	r2,-24(fp)
   21c18:	01400304 	movi	r5,12
   21c1c:	1009883a 	mov	r4,r2
   21c20:	000ccf40 	call	ccf4 <__mulsi3>
   21c24:	8085883a 	add	r2,r16,r2
   21c28:	10c00017 	ldw	r3,0(r2)
   21c2c:	e0bffb17 	ldw	r2,-20(fp)
   21c30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   21c34:	040000f4 	movhi	r16,3
   21c38:	84287b04 	addi	r16,r16,-24084
   21c3c:	e0bffa17 	ldw	r2,-24(fp)
   21c40:	01400304 	movi	r5,12
   21c44:	1009883a 	mov	r4,r2
   21c48:	000ccf40 	call	ccf4 <__mulsi3>
   21c4c:	8085883a 	add	r2,r16,r2
   21c50:	10800104 	addi	r2,r2,4
   21c54:	10c00017 	ldw	r3,0(r2)
   21c58:	e0bffb17 	ldw	r2,-20(fp)
   21c5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21c60:	040000f4 	movhi	r16,3
   21c64:	84287b04 	addi	r16,r16,-24084
   21c68:	e0bffa17 	ldw	r2,-24(fp)
   21c6c:	01400304 	movi	r5,12
   21c70:	1009883a 	mov	r4,r2
   21c74:	000ccf40 	call	ccf4 <__mulsi3>
   21c78:	8085883a 	add	r2,r16,r2
   21c7c:	10800204 	addi	r2,r2,8
   21c80:	10c00017 	ldw	r3,0(r2)
   21c84:	e0bffb17 	ldw	r2,-20(fp)
   21c88:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   21c8c:	e13ffa17 	ldw	r4,-24(fp)
   21c90:	001e6940 	call	1e694 <alt_release_fd>
  }
} 
   21c94:	0001883a 	nop
   21c98:	e6ffff04 	addi	sp,fp,-4
   21c9c:	dfc00217 	ldw	ra,8(sp)
   21ca0:	df000117 	ldw	fp,4(sp)
   21ca4:	dc000017 	ldw	r16,0(sp)
   21ca8:	dec00304 	addi	sp,sp,12
   21cac:	f800283a 	ret

00021cb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21cb0:	defffb04 	addi	sp,sp,-20
   21cb4:	dfc00415 	stw	ra,16(sp)
   21cb8:	df000315 	stw	fp,12(sp)
   21cbc:	df000304 	addi	fp,sp,12
   21cc0:	e13ffd15 	stw	r4,-12(fp)
   21cc4:	e17ffe15 	stw	r5,-8(fp)
   21cc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21ccc:	01c07fc4 	movi	r7,511
   21cd0:	01800044 	movi	r6,1
   21cd4:	e17ffd17 	ldw	r5,-12(fp)
   21cd8:	010000f4 	movhi	r4,3
   21cdc:	21287e04 	addi	r4,r4,-24072
   21ce0:	0021bcc0 	call	21bcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21ce4:	01c07fc4 	movi	r7,511
   21ce8:	000d883a 	mov	r6,zero
   21cec:	e17ffe17 	ldw	r5,-8(fp)
   21cf0:	010000f4 	movhi	r4,3
   21cf4:	21287b04 	addi	r4,r4,-24084
   21cf8:	0021bcc0 	call	21bcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21cfc:	01c07fc4 	movi	r7,511
   21d00:	01800044 	movi	r6,1
   21d04:	e17fff17 	ldw	r5,-4(fp)
   21d08:	010000f4 	movhi	r4,3
   21d0c:	21288104 	addi	r4,r4,-24060
   21d10:	0021bcc0 	call	21bcc <alt_open_fd>
}  
   21d14:	0001883a 	nop
   21d18:	e037883a 	mov	sp,fp
   21d1c:	dfc00117 	ldw	ra,4(sp)
   21d20:	df000017 	ldw	fp,0(sp)
   21d24:	dec00204 	addi	sp,sp,8
   21d28:	f800283a 	ret

00021d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21d2c:	defffe04 	addi	sp,sp,-8
   21d30:	dfc00115 	stw	ra,4(sp)
   21d34:	df000015 	stw	fp,0(sp)
   21d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21d3c:	d0a5b717 	ldw	r2,-26916(gp)
   21d40:	10000326 	beq	r2,zero,21d50 <alt_get_errno+0x24>
   21d44:	d0a5b717 	ldw	r2,-26916(gp)
   21d48:	103ee83a 	callr	r2
   21d4c:	00000106 	br	21d54 <alt_get_errno+0x28>
   21d50:	d0b23f04 	addi	r2,gp,-14084
}
   21d54:	e037883a 	mov	sp,fp
   21d58:	dfc00117 	ldw	ra,4(sp)
   21d5c:	df000017 	ldw	fp,0(sp)
   21d60:	dec00204 	addi	sp,sp,8
   21d64:	f800283a 	ret

00021d68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   21d68:	defffb04 	addi	sp,sp,-20
   21d6c:	dfc00415 	stw	ra,16(sp)
   21d70:	df000315 	stw	fp,12(sp)
   21d74:	dc000215 	stw	r16,8(sp)
   21d78:	df000304 	addi	fp,sp,12
   21d7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21d80:	e0bffe17 	ldw	r2,-8(fp)
   21d84:	10800217 	ldw	r2,8(r2)
   21d88:	10d00034 	orhi	r3,r2,16384
   21d8c:	e0bffe17 	ldw	r2,-8(fp)
   21d90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21d94:	e03ffd15 	stw	zero,-12(fp)
   21d98:	00002306 	br	21e28 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21d9c:	040000f4 	movhi	r16,3
   21da0:	84287b04 	addi	r16,r16,-24084
   21da4:	e0bffd17 	ldw	r2,-12(fp)
   21da8:	01400304 	movi	r5,12
   21dac:	1009883a 	mov	r4,r2
   21db0:	000ccf40 	call	ccf4 <__mulsi3>
   21db4:	8085883a 	add	r2,r16,r2
   21db8:	10c00017 	ldw	r3,0(r2)
   21dbc:	e0bffe17 	ldw	r2,-8(fp)
   21dc0:	10800017 	ldw	r2,0(r2)
   21dc4:	1880151e 	bne	r3,r2,21e1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21dc8:	040000f4 	movhi	r16,3
   21dcc:	84287b04 	addi	r16,r16,-24084
   21dd0:	e0bffd17 	ldw	r2,-12(fp)
   21dd4:	01400304 	movi	r5,12
   21dd8:	1009883a 	mov	r4,r2
   21ddc:	000ccf40 	call	ccf4 <__mulsi3>
   21de0:	8085883a 	add	r2,r16,r2
   21de4:	10800204 	addi	r2,r2,8
   21de8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21dec:	10000b0e 	bge	r2,zero,21e1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   21df0:	01400304 	movi	r5,12
   21df4:	e13ffd17 	ldw	r4,-12(fp)
   21df8:	000ccf40 	call	ccf4 <__mulsi3>
   21dfc:	1007883a 	mov	r3,r2
   21e00:	008000f4 	movhi	r2,3
   21e04:	10a87b04 	addi	r2,r2,-24084
   21e08:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21e0c:	e0bffe17 	ldw	r2,-8(fp)
   21e10:	18800226 	beq	r3,r2,21e1c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   21e14:	00bffcc4 	movi	r2,-13
   21e18:	00000806 	br	21e3c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21e1c:	e0bffd17 	ldw	r2,-12(fp)
   21e20:	10800044 	addi	r2,r2,1
   21e24:	e0bffd15 	stw	r2,-12(fp)
   21e28:	d0a5b617 	ldw	r2,-26920(gp)
   21e2c:	1007883a 	mov	r3,r2
   21e30:	e0bffd17 	ldw	r2,-12(fp)
   21e34:	18bfd92e 	bgeu	r3,r2,21d9c <__alt_data_end+0xfc021d9c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   21e38:	0005883a 	mov	r2,zero
}
   21e3c:	e6ffff04 	addi	sp,fp,-4
   21e40:	dfc00217 	ldw	ra,8(sp)
   21e44:	df000117 	ldw	fp,4(sp)
   21e48:	dc000017 	ldw	r16,0(sp)
   21e4c:	dec00304 	addi	sp,sp,12
   21e50:	f800283a 	ret

00021e54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21e54:	defff604 	addi	sp,sp,-40
   21e58:	dfc00915 	stw	ra,36(sp)
   21e5c:	df000815 	stw	fp,32(sp)
   21e60:	df000804 	addi	fp,sp,32
   21e64:	e13ffd15 	stw	r4,-12(fp)
   21e68:	e17ffe15 	stw	r5,-8(fp)
   21e6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   21e70:	00bfffc4 	movi	r2,-1
   21e74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   21e78:	00bffb44 	movi	r2,-19
   21e7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   21e80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21e84:	d165b404 	addi	r5,gp,-26928
   21e88:	e13ffd17 	ldw	r4,-12(fp)
   21e8c:	002187c0 	call	2187c <alt_find_dev>
   21e90:	e0bff815 	stw	r2,-32(fp)
   21e94:	e0bff817 	ldw	r2,-32(fp)
   21e98:	1000051e 	bne	r2,zero,21eb0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21e9c:	e13ffd17 	ldw	r4,-12(fp)
   21ea0:	00223e00 	call	223e0 <alt_find_file>
   21ea4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   21ea8:	00800044 	movi	r2,1
   21eac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21eb0:	e0bff817 	ldw	r2,-32(fp)
   21eb4:	10002b26 	beq	r2,zero,21f64 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   21eb8:	e13ff817 	ldw	r4,-32(fp)
   21ebc:	00224e80 	call	224e8 <alt_get_fd>
   21ec0:	e0bff915 	stw	r2,-28(fp)
   21ec4:	e0bff917 	ldw	r2,-28(fp)
   21ec8:	1000030e 	bge	r2,zero,21ed8 <open+0x84>
    {
      status = index;
   21ecc:	e0bff917 	ldw	r2,-28(fp)
   21ed0:	e0bffa15 	stw	r2,-24(fp)
   21ed4:	00002506 	br	21f6c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   21ed8:	01400304 	movi	r5,12
   21edc:	e13ff917 	ldw	r4,-28(fp)
   21ee0:	000ccf40 	call	ccf4 <__mulsi3>
   21ee4:	1007883a 	mov	r3,r2
   21ee8:	008000f4 	movhi	r2,3
   21eec:	10a87b04 	addi	r2,r2,-24084
   21ef0:	1885883a 	add	r2,r3,r2
   21ef4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21ef8:	e0fffe17 	ldw	r3,-8(fp)
   21efc:	00900034 	movhi	r2,16384
   21f00:	10bfffc4 	addi	r2,r2,-1
   21f04:	1886703a 	and	r3,r3,r2
   21f08:	e0bffc17 	ldw	r2,-16(fp)
   21f0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21f10:	e0bffb17 	ldw	r2,-20(fp)
   21f14:	1000051e 	bne	r2,zero,21f2c <open+0xd8>
   21f18:	e13ffc17 	ldw	r4,-16(fp)
   21f1c:	0021d680 	call	21d68 <alt_file_locked>
   21f20:	e0bffa15 	stw	r2,-24(fp)
   21f24:	e0bffa17 	ldw	r2,-24(fp)
   21f28:	10001016 	blt	r2,zero,21f6c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   21f2c:	e0bff817 	ldw	r2,-32(fp)
   21f30:	10800317 	ldw	r2,12(r2)
   21f34:	10000826 	beq	r2,zero,21f58 <open+0x104>
   21f38:	e0bff817 	ldw	r2,-32(fp)
   21f3c:	10800317 	ldw	r2,12(r2)
   21f40:	e1ffff17 	ldw	r7,-4(fp)
   21f44:	e1bffe17 	ldw	r6,-8(fp)
   21f48:	e17ffd17 	ldw	r5,-12(fp)
   21f4c:	e13ffc17 	ldw	r4,-16(fp)
   21f50:	103ee83a 	callr	r2
   21f54:	00000106 	br	21f5c <open+0x108>
   21f58:	0005883a 	mov	r2,zero
   21f5c:	e0bffa15 	stw	r2,-24(fp)
   21f60:	00000206 	br	21f6c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   21f64:	00bffb44 	movi	r2,-19
   21f68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   21f6c:	e0bffa17 	ldw	r2,-24(fp)
   21f70:	1000090e 	bge	r2,zero,21f98 <open+0x144>
  {
    alt_release_fd (index);  
   21f74:	e13ff917 	ldw	r4,-28(fp)
   21f78:	001e6940 	call	1e694 <alt_release_fd>
    ALT_ERRNO = -status;
   21f7c:	0021d2c0 	call	21d2c <alt_get_errno>
   21f80:	1007883a 	mov	r3,r2
   21f84:	e0bffa17 	ldw	r2,-24(fp)
   21f88:	0085c83a 	sub	r2,zero,r2
   21f8c:	18800015 	stw	r2,0(r3)
    return -1;
   21f90:	00bfffc4 	movi	r2,-1
   21f94:	00000106 	br	21f9c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   21f98:	e0bff917 	ldw	r2,-28(fp)
}
   21f9c:	e037883a 	mov	sp,fp
   21fa0:	dfc00117 	ldw	ra,4(sp)
   21fa4:	df000017 	ldw	fp,0(sp)
   21fa8:	dec00204 	addi	sp,sp,8
   21fac:	f800283a 	ret

00021fb0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   21fb0:	defff204 	addi	sp,sp,-56
   21fb4:	dfc00a15 	stw	ra,40(sp)
   21fb8:	df000915 	stw	fp,36(sp)
   21fbc:	df000904 	addi	fp,sp,36
   21fc0:	e13fff15 	stw	r4,-4(fp)
   21fc4:	e1400215 	stw	r5,8(fp)
   21fc8:	e1800315 	stw	r6,12(fp)
   21fcc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   21fd0:	e0800204 	addi	r2,fp,8
   21fd4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   21fd8:	e0bfff17 	ldw	r2,-4(fp)
   21fdc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   21fe0:	00006f06 	br	221a0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   21fe4:	e0bff807 	ldb	r2,-32(fp)
   21fe8:	10800960 	cmpeqi	r2,r2,37
   21fec:	1000041e 	bne	r2,zero,22000 <alt_printf+0x50>
        {
            alt_putchar(c);
   21ff0:	e0bff807 	ldb	r2,-32(fp)
   21ff4:	1009883a 	mov	r4,r2
   21ff8:	00221dc0 	call	221dc <alt_putchar>
   21ffc:	00006806 	br	221a0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   22000:	e0bff717 	ldw	r2,-36(fp)
   22004:	10c00044 	addi	r3,r2,1
   22008:	e0fff715 	stw	r3,-36(fp)
   2200c:	10800003 	ldbu	r2,0(r2)
   22010:	e0bff805 	stb	r2,-32(fp)
   22014:	e0bff807 	ldb	r2,-32(fp)
   22018:	10006926 	beq	r2,zero,221c0 <alt_printf+0x210>
            {
                if (c == '%')
   2201c:	e0bff807 	ldb	r2,-32(fp)
   22020:	10800958 	cmpnei	r2,r2,37
   22024:	1000041e 	bne	r2,zero,22038 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   22028:	e0bff807 	ldb	r2,-32(fp)
   2202c:	1009883a 	mov	r4,r2
   22030:	00221dc0 	call	221dc <alt_putchar>
   22034:	00005a06 	br	221a0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   22038:	e0bff807 	ldb	r2,-32(fp)
   2203c:	108018d8 	cmpnei	r2,r2,99
   22040:	1000081e 	bne	r2,zero,22064 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   22044:	e0bffe17 	ldw	r2,-8(fp)
   22048:	10c00104 	addi	r3,r2,4
   2204c:	e0fffe15 	stw	r3,-8(fp)
   22050:	10800017 	ldw	r2,0(r2)
   22054:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   22058:	e13ffd17 	ldw	r4,-12(fp)
   2205c:	00221dc0 	call	221dc <alt_putchar>
   22060:	00004f06 	br	221a0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   22064:	e0bff807 	ldb	r2,-32(fp)
   22068:	10801e18 	cmpnei	r2,r2,120
   2206c:	1000341e 	bne	r2,zero,22140 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   22070:	e0bffe17 	ldw	r2,-8(fp)
   22074:	10c00104 	addi	r3,r2,4
   22078:	e0fffe15 	stw	r3,-8(fp)
   2207c:	10800017 	ldw	r2,0(r2)
   22080:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   22084:	e0bffb17 	ldw	r2,-20(fp)
   22088:	1000031e 	bne	r2,zero,22098 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   2208c:	01000c04 	movi	r4,48
   22090:	00221dc0 	call	221dc <alt_putchar>
                        continue;
   22094:	00004206 	br	221a0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   22098:	00800704 	movi	r2,28
   2209c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   220a0:	00000306 	br	220b0 <alt_printf+0x100>
                        digit_shift -= 4;
   220a4:	e0bff917 	ldw	r2,-28(fp)
   220a8:	10bfff04 	addi	r2,r2,-4
   220ac:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   220b0:	00c003c4 	movi	r3,15
   220b4:	e0bff917 	ldw	r2,-28(fp)
   220b8:	1884983a 	sll	r2,r3,r2
   220bc:	1007883a 	mov	r3,r2
   220c0:	e0bffb17 	ldw	r2,-20(fp)
   220c4:	1884703a 	and	r2,r3,r2
   220c8:	103ff626 	beq	r2,zero,220a4 <__alt_data_end+0xfc0220a4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   220cc:	00001906 	br	22134 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   220d0:	00c003c4 	movi	r3,15
   220d4:	e0bff917 	ldw	r2,-28(fp)
   220d8:	1884983a 	sll	r2,r3,r2
   220dc:	1007883a 	mov	r3,r2
   220e0:	e0bffb17 	ldw	r2,-20(fp)
   220e4:	1886703a 	and	r3,r3,r2
   220e8:	e0bff917 	ldw	r2,-28(fp)
   220ec:	1884d83a 	srl	r2,r3,r2
   220f0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   220f4:	e0bffc17 	ldw	r2,-16(fp)
   220f8:	108002a8 	cmpgeui	r2,r2,10
   220fc:	1000041e 	bne	r2,zero,22110 <alt_printf+0x160>
                            c = '0' + digit;
   22100:	e0bffc17 	ldw	r2,-16(fp)
   22104:	10800c04 	addi	r2,r2,48
   22108:	e0bff805 	stb	r2,-32(fp)
   2210c:	00000306 	br	2211c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   22110:	e0bffc17 	ldw	r2,-16(fp)
   22114:	108015c4 	addi	r2,r2,87
   22118:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2211c:	e0bff807 	ldb	r2,-32(fp)
   22120:	1009883a 	mov	r4,r2
   22124:	00221dc0 	call	221dc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   22128:	e0bff917 	ldw	r2,-28(fp)
   2212c:	10bfff04 	addi	r2,r2,-4
   22130:	e0bff915 	stw	r2,-28(fp)
   22134:	e0bff917 	ldw	r2,-28(fp)
   22138:	103fe50e 	bge	r2,zero,220d0 <__alt_data_end+0xfc0220d0>
   2213c:	00001806 	br	221a0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   22140:	e0bff807 	ldb	r2,-32(fp)
   22144:	10801cd8 	cmpnei	r2,r2,115
   22148:	1000151e 	bne	r2,zero,221a0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   2214c:	e0bffe17 	ldw	r2,-8(fp)
   22150:	10c00104 	addi	r3,r2,4
   22154:	e0fffe15 	stw	r3,-8(fp)
   22158:	10800017 	ldw	r2,0(r2)
   2215c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   22160:	00000906 	br	22188 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   22164:	e0bffa17 	ldw	r2,-24(fp)
   22168:	10c00044 	addi	r3,r2,1
   2216c:	e0fffa15 	stw	r3,-24(fp)
   22170:	10800003 	ldbu	r2,0(r2)
   22174:	10803fcc 	andi	r2,r2,255
   22178:	1080201c 	xori	r2,r2,128
   2217c:	10bfe004 	addi	r2,r2,-128
   22180:	1009883a 	mov	r4,r2
   22184:	00221dc0 	call	221dc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   22188:	e0bffa17 	ldw	r2,-24(fp)
   2218c:	10800003 	ldbu	r2,0(r2)
   22190:	10803fcc 	andi	r2,r2,255
   22194:	1080201c 	xori	r2,r2,128
   22198:	10bfe004 	addi	r2,r2,-128
   2219c:	103ff11e 	bne	r2,zero,22164 <__alt_data_end+0xfc022164>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   221a0:	e0bff717 	ldw	r2,-36(fp)
   221a4:	10c00044 	addi	r3,r2,1
   221a8:	e0fff715 	stw	r3,-36(fp)
   221ac:	10800003 	ldbu	r2,0(r2)
   221b0:	e0bff805 	stb	r2,-32(fp)
   221b4:	e0bff807 	ldb	r2,-32(fp)
   221b8:	103f8a1e 	bne	r2,zero,21fe4 <__alt_data_end+0xfc021fe4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   221bc:	00000106 	br	221c4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   221c0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   221c4:	0001883a 	nop
   221c8:	e037883a 	mov	sp,fp
   221cc:	dfc00117 	ldw	ra,4(sp)
   221d0:	df000017 	ldw	fp,0(sp)
   221d4:	dec00504 	addi	sp,sp,20
   221d8:	f800283a 	ret

000221dc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   221dc:	defffd04 	addi	sp,sp,-12
   221e0:	dfc00215 	stw	ra,8(sp)
   221e4:	df000115 	stw	fp,4(sp)
   221e8:	df000104 	addi	fp,sp,4
   221ec:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   221f0:	d0a5ad17 	ldw	r2,-26956(gp)
   221f4:	10800217 	ldw	r2,8(r2)
   221f8:	100b883a 	mov	r5,r2
   221fc:	e13fff17 	ldw	r4,-4(fp)
   22200:	0016bbc0 	call	16bbc <putc>
#endif
#endif
}
   22204:	e037883a 	mov	sp,fp
   22208:	dfc00117 	ldw	ra,4(sp)
   2220c:	df000017 	ldw	fp,0(sp)
   22210:	dec00204 	addi	sp,sp,8
   22214:	f800283a 	ret

00022218 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   22218:	defffa04 	addi	sp,sp,-24
   2221c:	df000515 	stw	fp,20(sp)
   22220:	df000504 	addi	fp,sp,20
   22224:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22228:	0005303a 	rdctl	r2,status
   2222c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22230:	e0fffc17 	ldw	r3,-16(fp)
   22234:	00bfff84 	movi	r2,-2
   22238:	1884703a 	and	r2,r3,r2
   2223c:	1001703a 	wrctl	status,r2
  
  return context;
   22240:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   22244:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   22248:	e0bfff17 	ldw	r2,-4(fp)
   2224c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22250:	e0bffd17 	ldw	r2,-12(fp)
   22254:	10800017 	ldw	r2,0(r2)
   22258:	e0fffd17 	ldw	r3,-12(fp)
   2225c:	18c00117 	ldw	r3,4(r3)
   22260:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   22264:	e0bffd17 	ldw	r2,-12(fp)
   22268:	10800117 	ldw	r2,4(r2)
   2226c:	e0fffd17 	ldw	r3,-12(fp)
   22270:	18c00017 	ldw	r3,0(r3)
   22274:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   22278:	e0bffd17 	ldw	r2,-12(fp)
   2227c:	e0fffd17 	ldw	r3,-12(fp)
   22280:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   22284:	e0bffd17 	ldw	r2,-12(fp)
   22288:	e0fffd17 	ldw	r3,-12(fp)
   2228c:	10c00015 	stw	r3,0(r2)
   22290:	e0bffb17 	ldw	r2,-20(fp)
   22294:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22298:	e0bffe17 	ldw	r2,-8(fp)
   2229c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   222a0:	0001883a 	nop
   222a4:	e037883a 	mov	sp,fp
   222a8:	df000017 	ldw	fp,0(sp)
   222ac:	dec00104 	addi	sp,sp,4
   222b0:	f800283a 	ret

000222b4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   222b4:	defffb04 	addi	sp,sp,-20
   222b8:	dfc00415 	stw	ra,16(sp)
   222bc:	df000315 	stw	fp,12(sp)
   222c0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   222c4:	d0a5bc17 	ldw	r2,-26896(gp)
   222c8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   222cc:	d0b24817 	ldw	r2,-14048(gp)
   222d0:	10800044 	addi	r2,r2,1
   222d4:	d0b24815 	stw	r2,-14048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   222d8:	00002e06 	br	22394 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   222dc:	e0bffd17 	ldw	r2,-12(fp)
   222e0:	10800017 	ldw	r2,0(r2)
   222e4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   222e8:	e0bffd17 	ldw	r2,-12(fp)
   222ec:	10800403 	ldbu	r2,16(r2)
   222f0:	10803fcc 	andi	r2,r2,255
   222f4:	10000426 	beq	r2,zero,22308 <alt_tick+0x54>
   222f8:	d0b24817 	ldw	r2,-14048(gp)
   222fc:	1000021e 	bne	r2,zero,22308 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22300:	e0bffd17 	ldw	r2,-12(fp)
   22304:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   22308:	e0bffd17 	ldw	r2,-12(fp)
   2230c:	10800217 	ldw	r2,8(r2)
   22310:	d0f24817 	ldw	r3,-14048(gp)
   22314:	18801d36 	bltu	r3,r2,2238c <alt_tick+0xd8>
   22318:	e0bffd17 	ldw	r2,-12(fp)
   2231c:	10800403 	ldbu	r2,16(r2)
   22320:	10803fcc 	andi	r2,r2,255
   22324:	1000191e 	bne	r2,zero,2238c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   22328:	e0bffd17 	ldw	r2,-12(fp)
   2232c:	10800317 	ldw	r2,12(r2)
   22330:	e0fffd17 	ldw	r3,-12(fp)
   22334:	18c00517 	ldw	r3,20(r3)
   22338:	1809883a 	mov	r4,r3
   2233c:	103ee83a 	callr	r2
   22340:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22344:	e0bfff17 	ldw	r2,-4(fp)
   22348:	1000031e 	bne	r2,zero,22358 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2234c:	e13ffd17 	ldw	r4,-12(fp)
   22350:	00222180 	call	22218 <alt_alarm_stop>
   22354:	00000d06 	br	2238c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   22358:	e0bffd17 	ldw	r2,-12(fp)
   2235c:	10c00217 	ldw	r3,8(r2)
   22360:	e0bfff17 	ldw	r2,-4(fp)
   22364:	1887883a 	add	r3,r3,r2
   22368:	e0bffd17 	ldw	r2,-12(fp)
   2236c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22370:	e0bffd17 	ldw	r2,-12(fp)
   22374:	10c00217 	ldw	r3,8(r2)
   22378:	d0b24817 	ldw	r2,-14048(gp)
   2237c:	1880032e 	bgeu	r3,r2,2238c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   22380:	e0bffd17 	ldw	r2,-12(fp)
   22384:	00c00044 	movi	r3,1
   22388:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2238c:	e0bffe17 	ldw	r2,-8(fp)
   22390:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22394:	e0fffd17 	ldw	r3,-12(fp)
   22398:	d0a5bc04 	addi	r2,gp,-26896
   2239c:	18bfcf1e 	bne	r3,r2,222dc <__alt_data_end+0xfc0222dc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   223a0:	0001883a 	nop
}
   223a4:	0001883a 	nop
   223a8:	e037883a 	mov	sp,fp
   223ac:	dfc00117 	ldw	ra,4(sp)
   223b0:	df000017 	ldw	fp,0(sp)
   223b4:	dec00204 	addi	sp,sp,8
   223b8:	f800283a 	ret

000223bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   223bc:	deffff04 	addi	sp,sp,-4
   223c0:	df000015 	stw	fp,0(sp)
   223c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   223c8:	000170fa 	wrctl	ienable,zero
}
   223cc:	0001883a 	nop
   223d0:	e037883a 	mov	sp,fp
   223d4:	df000017 	ldw	fp,0(sp)
   223d8:	dec00104 	addi	sp,sp,4
   223dc:	f800283a 	ret

000223e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   223e0:	defffb04 	addi	sp,sp,-20
   223e4:	dfc00415 	stw	ra,16(sp)
   223e8:	df000315 	stw	fp,12(sp)
   223ec:	df000304 	addi	fp,sp,12
   223f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   223f4:	d0a5b217 	ldw	r2,-26936(gp)
   223f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   223fc:	00003106 	br	224c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   22400:	e0bffd17 	ldw	r2,-12(fp)
   22404:	10800217 	ldw	r2,8(r2)
   22408:	1009883a 	mov	r4,r2
   2240c:	000e39c0 	call	e39c <strlen>
   22410:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   22414:	e0bffd17 	ldw	r2,-12(fp)
   22418:	10c00217 	ldw	r3,8(r2)
   2241c:	e0bffe17 	ldw	r2,-8(fp)
   22420:	10bfffc4 	addi	r2,r2,-1
   22424:	1885883a 	add	r2,r3,r2
   22428:	10800003 	ldbu	r2,0(r2)
   2242c:	10803fcc 	andi	r2,r2,255
   22430:	1080201c 	xori	r2,r2,128
   22434:	10bfe004 	addi	r2,r2,-128
   22438:	10800bd8 	cmpnei	r2,r2,47
   2243c:	1000031e 	bne	r2,zero,2244c <alt_find_file+0x6c>
    {
      len -= 1;
   22440:	e0bffe17 	ldw	r2,-8(fp)
   22444:	10bfffc4 	addi	r2,r2,-1
   22448:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2244c:	e0bffe17 	ldw	r2,-8(fp)
   22450:	e0ffff17 	ldw	r3,-4(fp)
   22454:	1885883a 	add	r2,r3,r2
   22458:	10800003 	ldbu	r2,0(r2)
   2245c:	10803fcc 	andi	r2,r2,255
   22460:	1080201c 	xori	r2,r2,128
   22464:	10bfe004 	addi	r2,r2,-128
   22468:	10800be0 	cmpeqi	r2,r2,47
   2246c:	1000081e 	bne	r2,zero,22490 <alt_find_file+0xb0>
   22470:	e0bffe17 	ldw	r2,-8(fp)
   22474:	e0ffff17 	ldw	r3,-4(fp)
   22478:	1885883a 	add	r2,r3,r2
   2247c:	10800003 	ldbu	r2,0(r2)
   22480:	10803fcc 	andi	r2,r2,255
   22484:	1080201c 	xori	r2,r2,128
   22488:	10bfe004 	addi	r2,r2,-128
   2248c:	10000a1e 	bne	r2,zero,224b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   22490:	e0bffd17 	ldw	r2,-12(fp)
   22494:	10800217 	ldw	r2,8(r2)
   22498:	e0fffe17 	ldw	r3,-8(fp)
   2249c:	180d883a 	mov	r6,r3
   224a0:	e17fff17 	ldw	r5,-4(fp)
   224a4:	1009883a 	mov	r4,r2
   224a8:	00226940 	call	22694 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   224ac:	1000021e 	bne	r2,zero,224b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   224b0:	e0bffd17 	ldw	r2,-12(fp)
   224b4:	00000706 	br	224d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   224b8:	e0bffd17 	ldw	r2,-12(fp)
   224bc:	10800017 	ldw	r2,0(r2)
   224c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   224c4:	e0fffd17 	ldw	r3,-12(fp)
   224c8:	d0a5b204 	addi	r2,gp,-26936
   224cc:	18bfcc1e 	bne	r3,r2,22400 <__alt_data_end+0xfc022400>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   224d0:	0005883a 	mov	r2,zero
}
   224d4:	e037883a 	mov	sp,fp
   224d8:	dfc00117 	ldw	ra,4(sp)
   224dc:	df000017 	ldw	fp,0(sp)
   224e0:	dec00204 	addi	sp,sp,8
   224e4:	f800283a 	ret

000224e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   224e8:	defffa04 	addi	sp,sp,-24
   224ec:	dfc00515 	stw	ra,20(sp)
   224f0:	df000415 	stw	fp,16(sp)
   224f4:	dc000315 	stw	r16,12(sp)
   224f8:	df000404 	addi	fp,sp,16
   224fc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   22500:	00bffa04 	movi	r2,-24
   22504:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22508:	e03ffc15 	stw	zero,-16(fp)
   2250c:	00001d06 	br	22584 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   22510:	040000f4 	movhi	r16,3
   22514:	84287b04 	addi	r16,r16,-24084
   22518:	e0bffc17 	ldw	r2,-16(fp)
   2251c:	01400304 	movi	r5,12
   22520:	1009883a 	mov	r4,r2
   22524:	000ccf40 	call	ccf4 <__mulsi3>
   22528:	8085883a 	add	r2,r16,r2
   2252c:	10800017 	ldw	r2,0(r2)
   22530:	1000111e 	bne	r2,zero,22578 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   22534:	040000f4 	movhi	r16,3
   22538:	84287b04 	addi	r16,r16,-24084
   2253c:	e0bffc17 	ldw	r2,-16(fp)
   22540:	01400304 	movi	r5,12
   22544:	1009883a 	mov	r4,r2
   22548:	000ccf40 	call	ccf4 <__mulsi3>
   2254c:	8085883a 	add	r2,r16,r2
   22550:	e0fffe17 	ldw	r3,-8(fp)
   22554:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22558:	d0e5b617 	ldw	r3,-26920(gp)
   2255c:	e0bffc17 	ldw	r2,-16(fp)
   22560:	1880020e 	bge	r3,r2,2256c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   22564:	e0bffc17 	ldw	r2,-16(fp)
   22568:	d0a5b615 	stw	r2,-26920(gp)
      }
      rc = i;
   2256c:	e0bffc17 	ldw	r2,-16(fp)
   22570:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   22574:	00000606 	br	22590 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22578:	e0bffc17 	ldw	r2,-16(fp)
   2257c:	10800044 	addi	r2,r2,1
   22580:	e0bffc15 	stw	r2,-16(fp)
   22584:	e0bffc17 	ldw	r2,-16(fp)
   22588:	10800810 	cmplti	r2,r2,32
   2258c:	103fe01e 	bne	r2,zero,22510 <__alt_data_end+0xfc022510>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22590:	e0bffd17 	ldw	r2,-12(fp)
}
   22594:	e6ffff04 	addi	sp,fp,-4
   22598:	dfc00217 	ldw	ra,8(sp)
   2259c:	df000117 	ldw	fp,4(sp)
   225a0:	dc000017 	ldw	r16,0(sp)
   225a4:	dec00304 	addi	sp,sp,12
   225a8:	f800283a 	ret

000225ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   225ac:	defffe04 	addi	sp,sp,-8
   225b0:	df000115 	stw	fp,4(sp)
   225b4:	df000104 	addi	fp,sp,4
   225b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   225bc:	e0bfff17 	ldw	r2,-4(fp)
   225c0:	10bffe84 	addi	r2,r2,-6
   225c4:	10c00428 	cmpgeui	r3,r2,16
   225c8:	18001a1e 	bne	r3,zero,22634 <alt_exception_cause_generated_bad_addr+0x88>
   225cc:	100690ba 	slli	r3,r2,2
   225d0:	008000b4 	movhi	r2,2
   225d4:	10897904 	addi	r2,r2,9700
   225d8:	1885883a 	add	r2,r3,r2
   225dc:	10800017 	ldw	r2,0(r2)
   225e0:	1000683a 	jmp	r2
   225e4:	00022624 	muli	zero,zero,2200
   225e8:	00022624 	muli	zero,zero,2200
   225ec:	00022634 	movhi	zero,2200
   225f0:	00022634 	movhi	zero,2200
   225f4:	00022634 	movhi	zero,2200
   225f8:	00022624 	muli	zero,zero,2200
   225fc:	0002262c 	andhi	zero,zero,2200
   22600:	00022634 	movhi	zero,2200
   22604:	00022624 	muli	zero,zero,2200
   22608:	00022624 	muli	zero,zero,2200
   2260c:	00022634 	movhi	zero,2200
   22610:	00022624 	muli	zero,zero,2200
   22614:	0002262c 	andhi	zero,zero,2200
   22618:	00022634 	movhi	zero,2200
   2261c:	00022634 	movhi	zero,2200
   22620:	00022624 	muli	zero,zero,2200
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   22624:	00800044 	movi	r2,1
   22628:	00000306 	br	22638 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2262c:	0005883a 	mov	r2,zero
   22630:	00000106 	br	22638 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   22634:	0005883a 	mov	r2,zero
  }
}
   22638:	e037883a 	mov	sp,fp
   2263c:	df000017 	ldw	fp,0(sp)
   22640:	dec00104 	addi	sp,sp,4
   22644:	f800283a 	ret

00022648 <atexit>:
   22648:	200b883a 	mov	r5,r4
   2264c:	000f883a 	mov	r7,zero
   22650:	000d883a 	mov	r6,zero
   22654:	0009883a 	mov	r4,zero
   22658:	00227101 	jmpi	22710 <__register_exitproc>

0002265c <exit>:
   2265c:	defffe04 	addi	sp,sp,-8
   22660:	000b883a 	mov	r5,zero
   22664:	dc000015 	stw	r16,0(sp)
   22668:	dfc00115 	stw	ra,4(sp)
   2266c:	2021883a 	mov	r16,r4
   22670:	00228280 	call	22828 <__call_exitprocs>
   22674:	008000f4 	movhi	r2,3
   22678:	10b2ad04 	addi	r2,r2,-13644
   2267c:	11000017 	ldw	r4,0(r2)
   22680:	20800f17 	ldw	r2,60(r4)
   22684:	10000126 	beq	r2,zero,2268c <exit+0x30>
   22688:	103ee83a 	callr	r2
   2268c:	8009883a 	mov	r4,r16
   22690:	001def00 	call	1def0 <_exit>

00022694 <memcmp>:
   22694:	01c000c4 	movi	r7,3
   22698:	3980192e 	bgeu	r7,r6,22700 <memcmp+0x6c>
   2269c:	2144b03a 	or	r2,r4,r5
   226a0:	11c4703a 	and	r2,r2,r7
   226a4:	10000f26 	beq	r2,zero,226e4 <memcmp+0x50>
   226a8:	20800003 	ldbu	r2,0(r4)
   226ac:	28c00003 	ldbu	r3,0(r5)
   226b0:	10c0151e 	bne	r2,r3,22708 <memcmp+0x74>
   226b4:	31bfff84 	addi	r6,r6,-2
   226b8:	01ffffc4 	movi	r7,-1
   226bc:	00000406 	br	226d0 <memcmp+0x3c>
   226c0:	20800003 	ldbu	r2,0(r4)
   226c4:	28c00003 	ldbu	r3,0(r5)
   226c8:	31bfffc4 	addi	r6,r6,-1
   226cc:	10c00e1e 	bne	r2,r3,22708 <memcmp+0x74>
   226d0:	21000044 	addi	r4,r4,1
   226d4:	29400044 	addi	r5,r5,1
   226d8:	31fff91e 	bne	r6,r7,226c0 <__alt_data_end+0xfc0226c0>
   226dc:	0005883a 	mov	r2,zero
   226e0:	f800283a 	ret
   226e4:	20c00017 	ldw	r3,0(r4)
   226e8:	28800017 	ldw	r2,0(r5)
   226ec:	18bfee1e 	bne	r3,r2,226a8 <__alt_data_end+0xfc0226a8>
   226f0:	31bfff04 	addi	r6,r6,-4
   226f4:	21000104 	addi	r4,r4,4
   226f8:	29400104 	addi	r5,r5,4
   226fc:	39bff936 	bltu	r7,r6,226e4 <__alt_data_end+0xfc0226e4>
   22700:	303fe91e 	bne	r6,zero,226a8 <__alt_data_end+0xfc0226a8>
   22704:	003ff506 	br	226dc <__alt_data_end+0xfc0226dc>
   22708:	10c5c83a 	sub	r2,r2,r3
   2270c:	f800283a 	ret

00022710 <__register_exitproc>:
   22710:	defffa04 	addi	sp,sp,-24
   22714:	dc000315 	stw	r16,12(sp)
   22718:	040000f4 	movhi	r16,3
   2271c:	8432ad04 	addi	r16,r16,-13644
   22720:	80c00017 	ldw	r3,0(r16)
   22724:	dc400415 	stw	r17,16(sp)
   22728:	dfc00515 	stw	ra,20(sp)
   2272c:	18805217 	ldw	r2,328(r3)
   22730:	2023883a 	mov	r17,r4
   22734:	10003726 	beq	r2,zero,22814 <__register_exitproc+0x104>
   22738:	10c00117 	ldw	r3,4(r2)
   2273c:	010007c4 	movi	r4,31
   22740:	20c00e16 	blt	r4,r3,2277c <__register_exitproc+0x6c>
   22744:	1a000044 	addi	r8,r3,1
   22748:	8800221e 	bne	r17,zero,227d4 <__register_exitproc+0xc4>
   2274c:	18c00084 	addi	r3,r3,2
   22750:	18c7883a 	add	r3,r3,r3
   22754:	18c7883a 	add	r3,r3,r3
   22758:	12000115 	stw	r8,4(r2)
   2275c:	10c7883a 	add	r3,r2,r3
   22760:	19400015 	stw	r5,0(r3)
   22764:	0005883a 	mov	r2,zero
   22768:	dfc00517 	ldw	ra,20(sp)
   2276c:	dc400417 	ldw	r17,16(sp)
   22770:	dc000317 	ldw	r16,12(sp)
   22774:	dec00604 	addi	sp,sp,24
   22778:	f800283a 	ret
   2277c:	00800074 	movhi	r2,1
   22780:	10b4a804 	addi	r2,r2,-11616
   22784:	10002626 	beq	r2,zero,22820 <__register_exitproc+0x110>
   22788:	01006404 	movi	r4,400
   2278c:	d9400015 	stw	r5,0(sp)
   22790:	d9800115 	stw	r6,4(sp)
   22794:	d9c00215 	stw	r7,8(sp)
   22798:	000d2a00 	call	d2a0 <malloc>
   2279c:	d9400017 	ldw	r5,0(sp)
   227a0:	d9800117 	ldw	r6,4(sp)
   227a4:	d9c00217 	ldw	r7,8(sp)
   227a8:	10001d26 	beq	r2,zero,22820 <__register_exitproc+0x110>
   227ac:	81000017 	ldw	r4,0(r16)
   227b0:	10000115 	stw	zero,4(r2)
   227b4:	02000044 	movi	r8,1
   227b8:	22405217 	ldw	r9,328(r4)
   227bc:	0007883a 	mov	r3,zero
   227c0:	12400015 	stw	r9,0(r2)
   227c4:	20805215 	stw	r2,328(r4)
   227c8:	10006215 	stw	zero,392(r2)
   227cc:	10006315 	stw	zero,396(r2)
   227d0:	883fde26 	beq	r17,zero,2274c <__alt_data_end+0xfc02274c>
   227d4:	18c9883a 	add	r4,r3,r3
   227d8:	2109883a 	add	r4,r4,r4
   227dc:	1109883a 	add	r4,r2,r4
   227e0:	21802215 	stw	r6,136(r4)
   227e4:	01800044 	movi	r6,1
   227e8:	12406217 	ldw	r9,392(r2)
   227ec:	30cc983a 	sll	r6,r6,r3
   227f0:	4992b03a 	or	r9,r9,r6
   227f4:	12406215 	stw	r9,392(r2)
   227f8:	21c04215 	stw	r7,264(r4)
   227fc:	01000084 	movi	r4,2
   22800:	893fd21e 	bne	r17,r4,2274c <__alt_data_end+0xfc02274c>
   22804:	11006317 	ldw	r4,396(r2)
   22808:	218cb03a 	or	r6,r4,r6
   2280c:	11806315 	stw	r6,396(r2)
   22810:	003fce06 	br	2274c <__alt_data_end+0xfc02274c>
   22814:	18805304 	addi	r2,r3,332
   22818:	18805215 	stw	r2,328(r3)
   2281c:	003fc606 	br	22738 <__alt_data_end+0xfc022738>
   22820:	00bfffc4 	movi	r2,-1
   22824:	003fd006 	br	22768 <__alt_data_end+0xfc022768>

00022828 <__call_exitprocs>:
   22828:	defff504 	addi	sp,sp,-44
   2282c:	df000915 	stw	fp,36(sp)
   22830:	dd400615 	stw	r21,24(sp)
   22834:	dc800315 	stw	r18,12(sp)
   22838:	dfc00a15 	stw	ra,40(sp)
   2283c:	ddc00815 	stw	r23,32(sp)
   22840:	dd800715 	stw	r22,28(sp)
   22844:	dd000515 	stw	r20,20(sp)
   22848:	dcc00415 	stw	r19,16(sp)
   2284c:	dc400215 	stw	r17,8(sp)
   22850:	dc000115 	stw	r16,4(sp)
   22854:	d9000015 	stw	r4,0(sp)
   22858:	2839883a 	mov	fp,r5
   2285c:	04800044 	movi	r18,1
   22860:	057fffc4 	movi	r21,-1
   22864:	008000f4 	movhi	r2,3
   22868:	10b2ad04 	addi	r2,r2,-13644
   2286c:	12000017 	ldw	r8,0(r2)
   22870:	45005217 	ldw	r20,328(r8)
   22874:	44c05204 	addi	r19,r8,328
   22878:	a0001c26 	beq	r20,zero,228ec <__call_exitprocs+0xc4>
   2287c:	a0800117 	ldw	r2,4(r20)
   22880:	15ffffc4 	addi	r23,r2,-1
   22884:	b8000d16 	blt	r23,zero,228bc <__call_exitprocs+0x94>
   22888:	14000044 	addi	r16,r2,1
   2288c:	8421883a 	add	r16,r16,r16
   22890:	8421883a 	add	r16,r16,r16
   22894:	84402004 	addi	r17,r16,128
   22898:	a463883a 	add	r17,r20,r17
   2289c:	a421883a 	add	r16,r20,r16
   228a0:	e0001e26 	beq	fp,zero,2291c <__call_exitprocs+0xf4>
   228a4:	80804017 	ldw	r2,256(r16)
   228a8:	e0801c26 	beq	fp,r2,2291c <__call_exitprocs+0xf4>
   228ac:	bdffffc4 	addi	r23,r23,-1
   228b0:	843fff04 	addi	r16,r16,-4
   228b4:	8c7fff04 	addi	r17,r17,-4
   228b8:	bd7ff91e 	bne	r23,r21,228a0 <__alt_data_end+0xfc0228a0>
   228bc:	00800074 	movhi	r2,1
   228c0:	10b4ad04 	addi	r2,r2,-11596
   228c4:	10000926 	beq	r2,zero,228ec <__call_exitprocs+0xc4>
   228c8:	a0800117 	ldw	r2,4(r20)
   228cc:	1000301e 	bne	r2,zero,22990 <__call_exitprocs+0x168>
   228d0:	a0800017 	ldw	r2,0(r20)
   228d4:	10003226 	beq	r2,zero,229a0 <__call_exitprocs+0x178>
   228d8:	a009883a 	mov	r4,r20
   228dc:	98800015 	stw	r2,0(r19)
   228e0:	000d2b40 	call	d2b4 <free>
   228e4:	9d000017 	ldw	r20,0(r19)
   228e8:	a03fe41e 	bne	r20,zero,2287c <__alt_data_end+0xfc02287c>
   228ec:	dfc00a17 	ldw	ra,40(sp)
   228f0:	df000917 	ldw	fp,36(sp)
   228f4:	ddc00817 	ldw	r23,32(sp)
   228f8:	dd800717 	ldw	r22,28(sp)
   228fc:	dd400617 	ldw	r21,24(sp)
   22900:	dd000517 	ldw	r20,20(sp)
   22904:	dcc00417 	ldw	r19,16(sp)
   22908:	dc800317 	ldw	r18,12(sp)
   2290c:	dc400217 	ldw	r17,8(sp)
   22910:	dc000117 	ldw	r16,4(sp)
   22914:	dec00b04 	addi	sp,sp,44
   22918:	f800283a 	ret
   2291c:	a0800117 	ldw	r2,4(r20)
   22920:	80c00017 	ldw	r3,0(r16)
   22924:	10bfffc4 	addi	r2,r2,-1
   22928:	15c01426 	beq	r2,r23,2297c <__call_exitprocs+0x154>
   2292c:	80000015 	stw	zero,0(r16)
   22930:	183fde26 	beq	r3,zero,228ac <__alt_data_end+0xfc0228ac>
   22934:	95c8983a 	sll	r4,r18,r23
   22938:	a0806217 	ldw	r2,392(r20)
   2293c:	a5800117 	ldw	r22,4(r20)
   22940:	2084703a 	and	r2,r4,r2
   22944:	10000b26 	beq	r2,zero,22974 <__call_exitprocs+0x14c>
   22948:	a0806317 	ldw	r2,396(r20)
   2294c:	2088703a 	and	r4,r4,r2
   22950:	20000c1e 	bne	r4,zero,22984 <__call_exitprocs+0x15c>
   22954:	89400017 	ldw	r5,0(r17)
   22958:	d9000017 	ldw	r4,0(sp)
   2295c:	183ee83a 	callr	r3
   22960:	a0800117 	ldw	r2,4(r20)
   22964:	15bfbf1e 	bne	r2,r22,22864 <__alt_data_end+0xfc022864>
   22968:	98800017 	ldw	r2,0(r19)
   2296c:	153fcf26 	beq	r2,r20,228ac <__alt_data_end+0xfc0228ac>
   22970:	003fbc06 	br	22864 <__alt_data_end+0xfc022864>
   22974:	183ee83a 	callr	r3
   22978:	003ff906 	br	22960 <__alt_data_end+0xfc022960>
   2297c:	a5c00115 	stw	r23,4(r20)
   22980:	003feb06 	br	22930 <__alt_data_end+0xfc022930>
   22984:	89000017 	ldw	r4,0(r17)
   22988:	183ee83a 	callr	r3
   2298c:	003ff406 	br	22960 <__alt_data_end+0xfc022960>
   22990:	a0800017 	ldw	r2,0(r20)
   22994:	a027883a 	mov	r19,r20
   22998:	1029883a 	mov	r20,r2
   2299c:	003fb606 	br	22878 <__alt_data_end+0xfc022878>
   229a0:	0005883a 	mov	r2,zero
   229a4:	003ffb06 	br	22994 <__alt_data_end+0xfc022994>
   229a8:	01110bff 	0x1110bff
   229ac:	01010004 	movi	r4,1024
   229b0:	7f000105 	stb	fp,4(r15)
   229b4:	007d0000 	call	7d000 <_gp+0x49bfc>
   229b8:	00000000 	call	0 <__alt_mem_sdram>
   229bc:	01883a00 	call	1883a0 <_gp+0x154f9c>
   229c0:	010d0bff 	0x10d0bff
   229c4:	01010002 	0x1010002
	...
   229d0:	010d0bff 	0x10d0bff
   229d4:	01010004 	movi	r4,1024
   229d8:	00000100 	call	10 <__alt_mem_sdram+0x10>
   229dc:	00000000 	call	0 <__alt_mem_sdram>
   229e0:	0000a268 	cmpgeui	zero,zero,649
   229e4:	0000ca3c 	xorhi	zero,zero,808
