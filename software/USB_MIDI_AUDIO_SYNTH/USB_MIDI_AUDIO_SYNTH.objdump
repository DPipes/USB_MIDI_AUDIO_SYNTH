
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002bd1c memsz 0x0002bd1c flags r-x
    LOAD off    0x0002cd3c vaddr 0x0002bd3c paddr 0x0002ef30 align 2**12
         filesz 0x000031f4 memsz 0x000031f4 flags rw-
    LOAD off    0x00030124 vaddr 0x00032124 paddr 0x00032124 align 2**12
         filesz 0x00000000 memsz 0x000002b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024a68  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000070a4  00024c98  00024c98  00025c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031f4  0002bd3c  0002ef30  0002cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b8  00032124  00032124  00030124  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000323dc  000323dc  0002ff30  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002ff30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001af8  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00053bd2  00000000  00000000  00031a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001112f  00000000  00000000  00085622  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015ba1  00000000  00000000  00096751  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a80  00000000  00000000  000ac2f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0001003e  00000000  00000000  000b1d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002527d  00000000  00000000  000c1db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e7030  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002e18  00000000  00000000  000e70a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00102a76  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00102a79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00102a7e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00102a7f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00102a80  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00102a84  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00102a88  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00102a8c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00102a97  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00102aa2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  00102aad  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  00102ac1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  00102aec  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00094ca6  00000000  00000000  00107f73  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00024c98 l    d  .rodata	00000000 .rodata
0002bd3c l    d  .rwdata	00000000 .rwdata
00032124 l    d  .bss	00000000 .bss
000323dc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002d820 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d821 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d822 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d823 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002d824 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d825 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d826 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d827 l     O .rwdata	00000001 _ZL9SPI_MODE3
00032124 l     O .bss	00000001 _ZL9usb_error
00032125 l     O .bss	00000001 _ZL14usb_task_state
00032128 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002d830 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d831 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d832 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d833 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d834 l     O .rwdata	00000006 _ZL9XBOX_LEDS
00024da2 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003d04 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002d854 l     O .rwdata	00000004 _ZL5synth
00000000 l    df *ABS*	00000000 hidboot.cpp
0002d858 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d859 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d85a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d85b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d85c l     O .rwdata	00000002 _ZL9pstrSpace
0002d860 l     O .rwdata	00000003 _ZL8pstrCRLF
0002d864 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d868 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d86c l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d870 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00025080 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00025094 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000250a0 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000250ac l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000250b8 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000250c4 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000250d4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d878 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d880 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d888 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d890 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000250e0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000250ec l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d894 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d898 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000250f8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00025108 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d8a0 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d8a8 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00025118 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d8b0 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00025128 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d8b8 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00025140 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d8bc l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002514c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00025158 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d8c4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d8cc l     O .rwdata	00000006 _ZL14pstrUsageMouse
00025164 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00025170 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d8d4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d8dc l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0002517c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0002518c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d8e4 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d8e8 l     O .rwdata	00000002 _ZL10pstrUsageY
0002d8ec l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d8f0 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d8f4 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d8f8 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d8fc l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d904 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d90c l     O .rwdata	00000006 _ZL14pstrUsageWheel
000251a0 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000251ac l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000251b8 l     O .rodata	0000000b _ZL18pstrUsageByteCount
000251c4 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d914 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d91c l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d920 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d924 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d928 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d92c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d934 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d93c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d944 l     O .rwdata	00000004 _ZL12pstrUsageVno
000251d4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000251e4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000251f0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000251fc l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0002520c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00025218 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00025224 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00025238 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00025248 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00025258 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00025268 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00025278 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00025288 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00025298 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000252a8 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000252b4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000252c4 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000252d8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000252ec l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000252f8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00025304 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00025310 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0002531c l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00025328 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00025334 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00025340 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002534c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00025358 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00025364 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00025370 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00025380 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0002538c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0002539c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000253ac l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000253bc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000253cc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000253dc l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000253f4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0002540c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00025424 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00025434 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00025444 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00025454 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00025464 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00025474 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00025484 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00025494 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000254a4 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000254b4 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000254c4 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000254dc l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000254ec l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00025500 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00025510 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
0002551c l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00025528 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00025534 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d948 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00025540 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00025550 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00025564 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00025578 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00025588 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00025598 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000255a4 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000255b8 l     O .rodata	00000009 _ZL17pstrUsageElevator
000255c4 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d950 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000255d4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000255e0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000255ec l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000255fc l     O .rodata	0000000d _ZL20pstrUsageLandingGear
0002560c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d958 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00025618 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00025624 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00025630 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d960 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d968 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d970 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d978 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0002563c l     O .rodata	00000009 _ZL17pstrUsageSteering
00025648 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00025654 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00025660 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d980 l     O .rwdata	00000008 _ZL16pstrUsageBallast
0002566c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0002567c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00025688 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00025694 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d988 l     O .rwdata	00000005 _ZL13pstrUsageBelt
000256a0 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d990 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d998 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000256ac l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000256b8 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000256c4 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000256d0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d9a0 l     O .rwdata	00000005 _ZL13pstrUsageVest
000256dc l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000256e8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000256f4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00025704 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00025714 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00025720 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
0002572c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d9a8 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d9ac l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d9b4 l     O .rwdata	00000005 _ZL13pstrUsageRate
00025738 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00025744 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00025754 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00025764 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00025774 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00025780 l     O .rodata	0000000b _ZL18pstrUsageStickType
0002578c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d9bc l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d9c4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d9cc l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d9d4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d9dc l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d9e4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d9ec l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d9f4 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d9fc l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002da04 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002da0c l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002da14 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00025798 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
000257a4 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000257b0 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002da1c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002da24 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002da2c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002da34 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002da3c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000257bc l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000257cc l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002da44 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002da4c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000257d8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000257e8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000257f8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00025808 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00025818 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00025828 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00025838 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00025848 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00025858 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002da50 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00025868 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002da58 l     O .rwdata	00000005 _ZL13pstrUsageBump
00025878 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00025884 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002da60 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00025890 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0002589c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002da68 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
000258a8 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
000258b8 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000258c4 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000258d0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000258dc l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000258f0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00025900 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00025910 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
0002591c l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00025928 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00025940 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00025954 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0002596c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00025980 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0002598c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00025998 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002da70 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002da78 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002da80 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002da84 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002da8c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002da90 l     O .rwdata	00000005 _ZL13pstrUsageMute
000259a4 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
000259b0 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
000259c0 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002da98 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000259d0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000259e0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002daa0 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002daa8 l     O .rwdata	00000007 _ZL15pstrUsageStereo
000259ec l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00025a00 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002dab0 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002dab4 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00025a0c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00025a20 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002dab8 l     O .rwdata	00000005 _ZL13pstrUsageRing
00025a2c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00025a38 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002dac0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002dac8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002dad0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002dad8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00025a44 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002dae0 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002dae8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00025a50 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00025a5c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00025a68 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00025a74 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002daec l     O .rwdata	00000005 _ZL19pstrUsageConference
00025a80 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002daf4 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002dafc l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002db04 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00025a8c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002db0c l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002db14 l     O .rwdata	00000006 _ZL14pstrUsageReady
00025a98 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00025aa4 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002db1c l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002db24 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002db28 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002db2c l     O .rwdata	00000005 _ZL13pstrUsageStop
0002db34 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00025ab0 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002db3c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002db44 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002db4c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002db50 l     O .rwdata	00000006 _ZL14pstrUsageError
00025abc l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00025acc l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00025ae0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002db58 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00025af8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00025b04 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00025b14 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002db60 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00025b24 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00025b34 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00025b48 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00025b5c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00025b70 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00025b84 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002db68 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00025b94 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00025ba0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002db70 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00025bac l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00025bb8 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002db78 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00025bc8 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00025bd4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002db80 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002db88 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00025be0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00025bec l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002db90 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002db98 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002dba0 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002dba8 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00025bf8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002dbb0 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002dbb8 l     O .rwdata	00000005 _ZL13pstrUsagePark
00025c04 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00025c10 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002dbc0 l     O .rwdata	00000005 _ZL13pstrUsageLine
00025c1c l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00025c28 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00025c34 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00025c40 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00025c4c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002dbc8 l     O .rwdata	00000005 _ZL13pstrUsageSend
00025c58 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00025c64 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00025c70 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00025c7c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00025c88 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00025c94 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002dbd0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00025ca4 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00025cb4 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00025cc8 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00025cdc l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00025cf0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00025d04 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00025d14 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00025d24 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00025d38 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00025d48 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00025d58 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00025d68 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00025d74 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00025d80 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00025d8c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002dbd4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002dbdc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002dbe0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002dbe4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002dbe8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002dbec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002dbf0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002dbf4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002dbf8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002dbfc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002dc00 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002dc04 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002dc08 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002dc0c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002dc10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002dc14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002dc18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00025da0 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00025db0 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00025dbc l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00025dc8 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002dc1c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002dc20 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002dc28 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002dc30 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002dc38 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00025dd4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00025de0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002dc40 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00025dec l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002dc48 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00025df8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002dc50 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00025e04 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00025e10 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00025e1c l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00025e28 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00025e34 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00025e44 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00025e54 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00025e60 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00025e6c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002dc58 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00025e7c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00025e8c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002dc60 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002dc68 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00025e98 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00025ea4 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00025eb0 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00025ebc l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00025ecc l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002dc6c l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002dc74 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00025ed8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00025ee8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00025ef4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00025f00 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00025f0c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00025f18 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00025f24 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00025f30 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00025f40 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00025f4c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00025f58 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00025f64 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002dc7c l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002dc84 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00025f74 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00025f84 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00025f90 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00025f9c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00025fac l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00025fbc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002dc8c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002dc94 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00025fcc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002dc9c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002dca4 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002dcac l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002dcb4 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002dcbc l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00025fd8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00025fe4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002dcc4 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002dccc l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00025ff0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00025ffc l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00026008 l     O .rodata	00000009 _ZL17pstrUsageTracking
00026014 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00026020 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002dcd4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0002602c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002dcdc l     O .rwdata	00000005 _ZL13pstrUsageMark
00026038 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00026044 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00026050 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002605c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002606c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00026080 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00026090 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
000260a0 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
000260ac l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
000260b8 l     O .rodata	0000000b _ZL18pstrUsageStopEject
000260c4 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
000260d0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002dce4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002dce8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002dcf0 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002dcf8 l     O .rwdata	00000007 _ZL15pstrUsageTreble
000260dc l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000260e8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002dd00 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002dd08 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002dd0c l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002dd14 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002dd1c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000260f4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00026100 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0002610c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00026118 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002dd24 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00026124 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00026130 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002613c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00026148 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00026158 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00026168 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00026174 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00026180 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002618c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002dd2c l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002dd34 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00026198 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
000261a4 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002dd3c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
000261b0 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
000261c0 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000261d0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000261dc l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000261e8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000261f4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002dd44 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002dd4c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00026200 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002620c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00026218 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00026224 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002dd54 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00026234 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00026240 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002dd5c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002dd64 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002dd6c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00026250 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002625c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00026268 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00026274 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00026280 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00026290 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000262a4 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000262b0 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
000262c4 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000262d4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000262e0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000262f0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00026300 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00026310 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0002631c l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002632c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00026338 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00026348 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00026358 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00026368 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00026378 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002638c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002dd74 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002639c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000263b0 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000263c4 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000263d4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000263e4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000263f4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00026400 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002640c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00026418 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00026424 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00026430 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00026440 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00026458 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00026464 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00026470 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002647c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00026488 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00026494 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000264a0 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000264b4 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002dd7c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000264c0 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002dd84 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000264cc l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000264d8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000264e8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000264f4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00026504 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00026514 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00026524 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00026530 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002653c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00026548 l     O .rodata	00000009 _ZL16pstrUsageALClock
00026554 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00026564 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00026570 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002657c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00026588 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00026594 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
000265a8 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000265b8 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000265c4 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000265d8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000265e4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000265f4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00026608 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0002661c l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00026630 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00026640 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00026658 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002666c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002667c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002668c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002dd8c l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002dd94 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
000266a0 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002dd9c l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002dda4 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002ddac l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002ddb4 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000266ac l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002ddbc l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002ddc4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002ddcc l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002ddd4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
000266b8 l     O .rodata	00000009 _ZL16pstrUsageACPaste
000266c4 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002dddc l     O .rwdata	00000008 _ZL15pstrUsageACFind
000266d0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000266e0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002dde4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002ddec l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002ddf4 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002ddfc l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002de04 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000266ec l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000266f8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00026708 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00026718 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002de0c l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00026724 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00026730 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002673c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002de14 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00026748 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00026754 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00026764 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00026770 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00026780 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00026790 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002679c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
000267a8 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002de1c l     O .rwdata	00000007 _ZL14pstrUsageACPan
000267b8 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000267c4 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000267d4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002de24 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002de2c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002de34 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002de3c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000267e4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000267f0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002de44 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000267fc l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00026808 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00026814 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00026820 l     O .rodata	0000000a _ZL17pstrUsageACResize
0002682c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00026838 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00026844 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00026850 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002685c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00026868 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00026874 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00026880 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00026890 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
000268a0 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
000268b0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000268c0 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000268cc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000268dc l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000268e8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000268f8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00026908 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00026918 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00026924 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00026930 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002693c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00026948 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002de4c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002de54 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00026954 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002de5c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002de64 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00026960 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002de6c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002696c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002697c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00026988 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00026998 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
000269a8 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
000269b8 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002de74 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002de7c l     O .rwdata	00000008 _ZL15pstrUsageACLock
000269c4 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002de84 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000269d0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000269dc l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000269ec l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000269f8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00026a08 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00026a14 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00026a20 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00026a2c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00026a38 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00026a44 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00026a50 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002de8c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002de94 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00026a5c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00026a68 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002de9c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00026a78 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00026a84 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00026a90 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00026aa0 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00026ab0 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00026abc l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00026ac8 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00026ad4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002dea4 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00026ae0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00026aec l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00026af8 l     O .rodata	00000009 _ZL16pstrUsageACReply
00026b04 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00026b14 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002deac l     O .rwdata	00000007 _ZL15pstrUsageACSend
00026b20 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002deb4 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002debc l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00026b2c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00026b38 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00026b44 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00026b50 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00026b5c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00026b68 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00026b74 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00026b80 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00026b8c l     O .rodata	0000000a _ZL17pstrUsageACRename
00026b98 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00026ba4 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00026bb0 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00026bbc l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00026bc8 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dec4 l     O .rwdata	00000004 _ZL12pstrUsagePen
00026bd4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00026be0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00026bec l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00026bf8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00026c04 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002dec8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00026c14 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002ded0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00026c20 l     O .rodata	00000009 _ZL17pstrUsageArmature
00026c2c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00026c40 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002ded8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002dee0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002dee8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00026c50 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00026c5c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00026c68 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002def0 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002def8 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002df00 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002df04 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00026c74 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00026c80 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00026c90 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00026ca0 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002df0c l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002df14 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002df1c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002df24 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00026cb0 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002df2c l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002df34 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00026cbc l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002df3c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002df44 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00026cc8 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00026cd4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00026ce4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00026cf0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00026d00 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00026d0c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00026d1c l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00026d28 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00026d38 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00026d44 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00026d54 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00026d64 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00026d70 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00026d7c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00026d88 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00026d94 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00026da0 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00026dac l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00026db8 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00026dc8 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00026dd8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002df4c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002df50 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002df54 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002df5c l     O .rwdata	00000005 _ZL16pstrUsageColumns
00026de4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00026df0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00026dfc l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00026e08 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002df64 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00026e14 l     O .rodata	00000009 _ZL17pstrUsageFontData
00026e20 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00026e2c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00026e38 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00026e48 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00026e58 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00026e68 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00026e74 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00026e80 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00026e8c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00026e98 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00026ea4 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00026eb0 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00026ebc l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00026ec8 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00026ed4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00026ee4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00026ef4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00026f04 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00026f10 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00026f1c l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00026f2c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002df6c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00026f38 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00026f48 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00026f58 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00026f64 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00026f70 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00026f80 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00026f90 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00026fa0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00026fb0 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00026fbc l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00026fc8 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00026fd4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00026fe4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00026ff4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00027004 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00027014 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002df74 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002df7c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00027024 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002df84 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002df8c l     O .rwdata	00000005 _ZL13pstrUsageNext
0002df94 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002df9c l     O .rwdata	00000006 _ZL14pstrUsagePrint
00027030 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002dfa4 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002703c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002dfac l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002dfb4 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00027048 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00027058 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00027068 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00027078 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00027084 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00027090 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
000270a4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
000270b8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
000270cc l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
000270e0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000270f0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00027100 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002710c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00027118 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00027128 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002dfc8 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dfc9 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dfca l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dfcb l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002dfd0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dfd1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dfd2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dfd3 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002dfd4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dfd5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dfd6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dfd7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002734d l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002735d l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008f60 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002dfe0 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002dfe1 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002dfe2 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002dfe3 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002dfe4 l     O .rwdata	00000002 _ZL9pstrSpace
0002dfe8 l     O .rwdata	00000003 _ZL8pstrCRLF
0002dfec l     O .rwdata	00000002 _ZL13pstrSingleTab
0002dff0 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002dff4 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002dff8 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00027428 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0002743c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00027448 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00027454 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00027460 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0002746c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0002747c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002e000 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002e008 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002e010 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002e018 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00027488 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00027494 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002e01c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002e020 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000274a0 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000274b0 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002e028 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002e030 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000274c0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002e038 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000274d0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002e040 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
000274e8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002e044 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000274f4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00027500 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002e04c l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002e054 l     O .rwdata	00000006 _ZL14pstrUsageMouse
0002750c l     O .rodata	00000009 _ZL17pstrUsageJoystick
00027518 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002e05c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002e064 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00027524 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00027534 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002e06c l     O .rwdata	00000002 _ZL10pstrUsageX
0002e070 l     O .rwdata	00000002 _ZL10pstrUsageY
0002e074 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002e078 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002e07c l     O .rwdata	00000003 _ZL11pstrUsageRy
0002e080 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002e084 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002e08c l     O .rwdata	00000005 _ZL13pstrUsageDial
0002e094 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00027548 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00027554 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00027560 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0002756c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002e09c l     O .rwdata	00000006 _ZL14pstrUsageStart
0002e0a4 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002e0a8 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002e0ac l     O .rwdata	00000003 _ZL11pstrUsageVy
0002e0b0 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002e0b4 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002e0bc l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002e0c4 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002e0cc l     O .rwdata	00000004 _ZL12pstrUsageVno
0002757c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0002758c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00027598 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000275a4 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000275b4 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000275c0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000275cc l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
000275e0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000275f0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00027600 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00027610 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00027620 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00027630 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00027640 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00027650 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0002765c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0002766c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00027680 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00027694 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000276a0 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000276ac l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000276b8 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000276c4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000276d0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
000276dc l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
000276e8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000276f4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00027700 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
0002770c l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00027718 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00027728 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00027734 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00027744 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00027754 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00027764 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00027774 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00027784 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
0002779c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000277b4 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000277cc l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
000277dc l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
000277ec l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
000277fc l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
0002780c l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
0002781c l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0002782c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0002783c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0002784c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0002785c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0002786c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00027884 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00027894 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000278a8 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000278b8 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000278c4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000278d0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
000278dc l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002e0d0 l     O .rwdata	00000008 _ZL16pstrUsageAileron
000278e8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000278f8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
0002790c l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00027920 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00027930 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00027940 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0002794c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00027960 l     O .rodata	00000009 _ZL17pstrUsageElevator
0002796c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002e0d8 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0002797c l     O .rodata	00000009 _ZL17pstrUsageThrottle
00027988 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00027994 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000279a4 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000279b4 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002e0e0 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000279c0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000279cc l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
000279d8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002e0e8 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002e0f0 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002e0f8 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002e100 l     O .rwdata	00000008 _ZL16pstrUsageShifter
000279e4 l     O .rodata	00000009 _ZL17pstrUsageSteering
000279f0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000279fc l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00027a08 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002e108 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00027a14 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00027a24 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00027a30 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00027a3c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002e110 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00027a48 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002e118 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002e120 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00027a54 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00027a60 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00027a6c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00027a78 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002e128 l     O .rwdata	00000005 _ZL13pstrUsageVest
00027a84 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00027a90 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00027a9c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00027aac l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00027abc l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00027ac8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00027ad4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002e130 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002e134 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002e13c l     O .rwdata	00000005 _ZL13pstrUsageRate
00027ae0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00027aec l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00027afc l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00027b0c l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00027b1c l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00027b28 l     O .rodata	0000000b _ZL18pstrUsageStickType
00027b34 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002e144 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002e14c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002e154 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002e15c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002e164 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002e16c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002e174 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002e17c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002e184 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002e18c l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002e194 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002e19c l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00027b40 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00027b4c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00027b58 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002e1a4 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002e1ac l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002e1b4 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002e1bc l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002e1c4 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00027b64 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00027b74 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002e1cc l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002e1d4 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00027b80 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00027b90 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00027ba0 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00027bb0 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00027bc0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00027bd0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00027be0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00027bf0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00027c00 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002e1d8 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00027c10 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002e1e0 l     O .rwdata	00000005 _ZL13pstrUsageBump
00027c20 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00027c2c l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002e1e8 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00027c38 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00027c44 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002e1f0 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00027c50 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00027c60 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00027c6c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00027c78 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00027c84 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00027c98 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00027ca8 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00027cb8 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00027cc4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00027cd0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00027ce8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00027cfc l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00027d14 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00027d28 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00027d34 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00027d40 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002e1f8 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002e200 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002e208 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002e20c l     O .rwdata	00000006 _ZL14pstrUsageShift
0002e214 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002e218 l     O .rwdata	00000005 _ZL13pstrUsageMute
00027d4c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00027d58 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00027d68 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002e220 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00027d78 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00027d88 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002e228 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002e230 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00027d94 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00027da8 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002e238 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002e23c l     O .rwdata	00000004 _ZL12pstrUsageCLV
00027db4 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00027dc8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002e240 l     O .rwdata	00000005 _ZL13pstrUsageRing
00027dd4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00027de0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002e248 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002e250 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002e258 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002e260 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00027dec l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002e268 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002e270 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00027df8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00027e04 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00027e10 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00027e1c l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002e274 l     O .rwdata	00000005 _ZL19pstrUsageConference
00027e28 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002e27c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002e284 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002e28c l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00027e34 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002e294 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002e29c l     O .rwdata	00000006 _ZL14pstrUsageReady
00027e40 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00027e4c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002e2a4 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002e2ac l     O .rwdata	00000004 _ZL16pstrUsageForward
0002e2b0 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002e2b4 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002e2bc l     O .rwdata	00000007 _ZL15pstrUsageRewind
00027e58 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002e2c4 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002e2cc l     O .rwdata	00000006 _ZL14pstrUsagePause
0002e2d4 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002e2d8 l     O .rwdata	00000006 _ZL14pstrUsageError
00027e64 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00027e74 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00027e88 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002e2e0 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00027ea0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00027eac l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00027ebc l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002e2e8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00027ecc l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00027edc l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00027ef0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00027f04 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00027f18 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00027f2c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002e2f0 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00027f3c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00027f48 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002e2f8 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00027f54 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00027f60 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002e300 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00027f70 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00027f7c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002e308 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002e310 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00027f88 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00027f94 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002e318 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002e320 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002e328 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002e330 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00027fa0 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002e338 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002e340 l     O .rwdata	00000005 _ZL13pstrUsagePark
00027fac l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00027fb8 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002e348 l     O .rwdata	00000005 _ZL13pstrUsageLine
00027fc4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00027fd0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00027fdc l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00027fe8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00027ff4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002e350 l     O .rwdata	00000005 _ZL13pstrUsageSend
00028000 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
0002800c l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00028018 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00028024 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00028030 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0002803c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002e358 l     O .rwdata	00000004 _ZL16pstrUsageMessage
0002804c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0002805c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00028070 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00028084 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00028098 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000280ac l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
000280bc l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
000280cc l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
000280e0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
000280f0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00028100 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00028110 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0002811c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00028128 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00028134 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002e35c l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002e364 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002e368 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002e36c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002e370 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002e374 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002e378 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002e37c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002e380 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002e384 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002e388 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002e38c l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002e390 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002e394 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002e398 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002e39c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002e3a0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00028148 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00028158 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00028164 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00028170 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002e3a4 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002e3a8 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002e3b0 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002e3b8 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002e3c0 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0002817c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00028188 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002e3c8 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00028194 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002e3d0 l     O .rwdata	00000005 _ZL13pstrUsageMenu
000281a0 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002e3d8 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
000281ac l     O .rodata	0000000a _ZL17pstrUsageMenuDown
000281b8 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
000281c4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
000281d0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
000281dc l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
000281ec l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
000281fc l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00028208 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00028214 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002e3e0 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00028224 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00028234 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002e3e8 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002e3f0 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00028240 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0002824c l     O .rodata	0000000a _ZL17pstrUsageModeStep
00028258 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00028264 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00028274 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002e3f4 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002e3fc l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00028280 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00028290 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0002829c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000282a8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
000282b4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
000282c0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
000282cc l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
000282d8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
000282e8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
000282f4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00028300 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0002830c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002e404 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002e40c l     O .rwdata	00000005 _ZL13pstrUsageHelp
0002831c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002832c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00028338 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00028344 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00028354 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00028364 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002e414 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002e41c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00028374 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002e424 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002e42c l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002e434 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002e43c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002e444 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00028380 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002838c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002e44c l     O .rwdata	00000006 _ZL14pstrUsageEject
0002e454 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00028398 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000283a4 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000283b0 l     O .rodata	00000009 _ZL17pstrUsageTracking
000283bc l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000283c8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002e45c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000283d4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002e464 l     O .rwdata	00000005 _ZL13pstrUsageMark
000283e0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
000283ec l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000283f8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00028404 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00028414 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00028428 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00028438 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00028448 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00028454 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00028460 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002846c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00028478 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002e46c l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002e470 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002e478 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002e480 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00028484 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00028490 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002e488 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002e490 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002e494 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002e49c l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002e4a4 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002849c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000284a8 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000284b4 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000284c0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002e4ac l     O .rwdata	00000005 _ZL13pstrUsageSlow
000284cc l     O .rodata	00000009 _ZL18pstrUsageFanEnable
000284d8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
000284e4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000284f0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00028500 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00028510 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0002851c l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00028528 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00028534 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002e4b4 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002e4bc l     O .rwdata	00000007 _ZL15pstrUsageMotion
00028540 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002854c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002e4c4 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00028558 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00028568 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00028578 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00028584 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00028590 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002859c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002e4cc l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002e4d4 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000285a8 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000285b4 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000285c0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000285cc l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002e4dc l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
000285dc l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
000285e8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002e4e4 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002e4ec l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002e4f4 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000285f8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00028604 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00028610 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0002861c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00028628 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00028638 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002864c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00028658 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002866c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002867c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00028688 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00028698 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000286a8 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000286b8 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000286c4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000286d4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
000286e0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000286f0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00028700 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00028710 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00028720 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00028734 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002e4fc l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00028744 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00028758 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002876c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002877c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002878c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002879c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000287a8 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000287b4 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000287c0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000287cc l     O .rodata	0000000a _ZL17pstrUsageALLogoff
000287d8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
000287e8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00028800 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0002880c l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00028818 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00028824 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00028830 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002883c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00028848 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002885c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002e504 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00028868 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002e50c l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00028874 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00028880 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00028890 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002889c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000288ac l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000288bc l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000288cc l     O .rodata	0000000b _ZL21pstrUsageALEncryption
000288d8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
000288e4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000288f0 l     O .rodata	00000009 _ZL16pstrUsageALClock
000288fc l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0002890c l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00028918 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00028924 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00028930 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002893c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00028950 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00028960 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002896c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00028980 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002898c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002899c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000289b0 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000289c4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
000289d8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
000289e8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00028a00 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00028a14 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00028a24 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00028a34 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002e514 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002e51c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00028a48 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002e524 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002e52c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002e534 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002e53c l     O .rwdata	00000008 _ZL15pstrUsageACSave
00028a54 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002e544 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002e54c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002e554 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002e55c l     O .rwdata	00000007 _ZL14pstrUsageACCut
00028a60 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00028a6c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002e564 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00028a78 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00028a88 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002e56c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002e574 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002e57c l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002e584 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002e58c l     O .rwdata	00000008 _ZL15pstrUsageACStop
00028a94 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00028aa0 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00028ab0 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00028ac0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002e594 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00028acc l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00028ad8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00028ae4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002e59c l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00028af0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00028afc l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00028b0c l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00028b18 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00028b28 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00028b38 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00028b44 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00028b50 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002e5a4 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00028b60 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00028b6c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00028b7c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002e5ac l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002e5b4 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002e5bc l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002e5c4 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00028b8c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00028b98 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002e5cc l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00028ba4 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00028bb0 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00028bbc l     O .rodata	0000000a _ZL17pstrUsageACRotate
00028bc8 l     O .rodata	0000000a _ZL17pstrUsageACResize
00028bd4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00028be0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00028bec l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00028bf8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00028c04 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00028c10 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00028c1c l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00028c28 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00028c38 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00028c48 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00028c58 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00028c68 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00028c74 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00028c84 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00028c90 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00028ca0 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00028cb0 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00028cc0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00028ccc l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00028cd8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00028ce4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00028cf0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002e5d4 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002e5dc l     O .rwdata	00000006 _ZL13pstrUsageACNo
00028cfc l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002e5e4 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002e5ec l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00028d08 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002e5f4 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00028d14 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00028d24 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00028d30 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00028d40 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00028d50 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00028d60 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002e5fc l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002e604 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00028d6c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002e60c l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00028d78 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00028d84 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00028d94 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00028da0 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00028db0 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00028dbc l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00028dc8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00028dd4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00028de0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00028dec l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00028df8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002e614 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002e61c l     O .rwdata	00000008 _ZL15pstrUsageACSort
00028e04 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00028e10 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002e624 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00028e20 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00028e2c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00028e38 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00028e48 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00028e58 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00028e64 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00028e70 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00028e7c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002e62c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00028e88 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00028e94 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00028ea0 l     O .rodata	00000009 _ZL16pstrUsageACReply
00028eac l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00028ebc l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002e634 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00028ec8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002e63c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002e644 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00028ed4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00028ee0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00028eec l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00028ef8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00028f04 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00028f10 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00028f1c l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00028f28 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00028f34 l     O .rodata	0000000a _ZL17pstrUsageACRename
00028f40 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00028f4c l     O .rodata	00000009 _ZL16pstrUsageACSplit
00028f58 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00028f64 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00028f70 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002e64c l     O .rwdata	00000004 _ZL12pstrUsagePen
00028f7c l     O .rodata	0000000a _ZL17pstrUsageLightPen
00028f88 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00028f94 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00028fa0 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00028fac l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002e650 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00028fbc l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002e658 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00028fc8 l     O .rodata	00000009 _ZL17pstrUsageArmature
00028fd4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00028fe8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002e660 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002e668 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002e670 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00028ff8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00029004 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00029010 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002e678 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002e680 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002e688 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002e68c l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002901c l     O .rodata	0000000b _ZL18pstrUsageDataValid
00029028 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00029038 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00029048 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002e694 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002e69c l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002e6a4 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002e6ac l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00029058 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002e6b4 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002e6bc l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00029064 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002e6c4 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002e6cc l     O .rwdata	00000007 _ZL15pstrUsageEraser
00029070 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002907c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002908c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00029098 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000290a8 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
000290b4 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
000290c4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
000290d0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
000290e0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
000290ec l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
000290fc l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002910c l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00029118 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00029124 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00029130 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002913c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00029148 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00029154 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00029160 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00029170 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00029180 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002e6d4 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002e6d8 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002e6dc l     O .rwdata	00000005 _ZL13pstrUsageRows
0002e6e4 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002918c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00029198 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
000291a4 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
000291b0 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002e6ec l     O .rwdata	00000008 _ZL19pstrUsageFontReport
000291bc l     O .rodata	00000009 _ZL17pstrUsageFontData
000291c8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
000291d4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
000291e0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
000291f0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00029200 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00029210 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002921c l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00029228 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00029234 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00029240 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002924c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00029258 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00029264 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00029270 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002927c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002928c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002929c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
000292ac l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
000292b8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
000292c4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
000292d4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002e6f4 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
000292e0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
000292f0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00029300 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002930c l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00029318 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00029328 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00029338 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00029348 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00029358 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00029364 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00029370 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002937c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002938c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002939c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000293ac l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000293bc l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002e6fc l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002e704 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000293cc l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002e70c l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002e714 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002e71c l     O .rwdata	00000005 _ZL13pstrUsageSave
0002e724 l     O .rwdata	00000006 _ZL14pstrUsagePrint
000293d8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002e72c l     O .rwdata	00000005 _ZL13pstrUsageCine
000293e4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002e734 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002e73c l     O .rwdata	00000006 _ZL14pstrUsageDepth
000293f0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00029400 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00029410 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00029420 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002942c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00029438 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002944c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00029460 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00029474 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00029488 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00029498 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000294a8 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000294b4 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000294c0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000294d0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002e742 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e743 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e744 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e745 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002e748 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002e749 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002e74a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002e74b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002e74c l     O .rwdata	00000002 _ZL9pstrSpace
0002e750 l     O .rwdata	00000003 _ZL8pstrCRLF
0002e754 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002e758 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002e75c l     O .rwdata	00000004 _ZL13pstrTripleTab
0002e760 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000295b0 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000295c4 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000295d0 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000295dc l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000295e8 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000295f4 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00029604 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002e768 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002e770 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002e778 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002e780 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00029610 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0002961c l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002e784 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002e788 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00029628 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00029638 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002e790 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002e798 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00029648 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002e7a0 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00029658 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002e7a8 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00029670 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002e7ac l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002967c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00029688 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002e7b4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002e7bc l     O .rwdata	00000006 _ZL14pstrUsageMouse
00029694 l     O .rodata	00000009 _ZL17pstrUsageJoystick
000296a0 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002e7c4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002e7cc l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000296ac l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000296bc l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002e7d4 l     O .rwdata	00000002 _ZL10pstrUsageX
0002e7d8 l     O .rwdata	00000002 _ZL10pstrUsageY
0002e7dc l     O .rwdata	00000002 _ZL10pstrUsageZ
0002e7e0 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002e7e4 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002e7e8 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002e7ec l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002e7f4 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002e7fc l     O .rwdata	00000006 _ZL14pstrUsageWheel
000296d0 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000296dc l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000296e8 l     O .rodata	0000000b _ZL18pstrUsageByteCount
000296f4 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002e804 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002e80c l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002e810 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002e814 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002e818 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002e81c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002e824 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002e82c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002e834 l     O .rwdata	00000004 _ZL12pstrUsageVno
00029704 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00029714 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00029720 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0002972c l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0002973c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00029748 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00029754 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00029768 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00029778 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00029788 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00029798 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000297a8 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000297b8 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000297c8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
000297d8 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000297e4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000297f4 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00029808 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0002981c l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00029828 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00029834 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00029840 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0002984c l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00029858 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00029864 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00029870 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002987c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00029888 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00029894 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000298a0 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000298b0 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000298bc l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000298cc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000298dc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000298ec l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000298fc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
0002990c l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00029924 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0002993c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00029954 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00029964 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00029974 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00029984 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00029994 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000299a4 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000299b4 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000299c4 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000299d4 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000299e4 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000299f4 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00029a0c l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00029a1c l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00029a30 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00029a40 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00029a4c l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00029a58 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00029a64 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002e838 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00029a70 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00029a80 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00029a94 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00029aa8 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00029ab8 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00029ac8 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00029ad4 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00029ae8 l     O .rodata	00000009 _ZL17pstrUsageElevator
00029af4 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002e840 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00029b04 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00029b10 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00029b1c l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00029b2c l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00029b3c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002e848 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00029b48 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00029b54 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00029b60 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002e850 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002e858 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002e860 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002e868 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00029b6c l     O .rodata	00000009 _ZL17pstrUsageSteering
00029b78 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00029b84 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00029b90 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002e870 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00029b9c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00029bac l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00029bb8 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00029bc4 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002e878 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00029bd0 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002e880 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002e888 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00029bdc l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00029be8 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00029bf4 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00029c00 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002e890 l     O .rwdata	00000005 _ZL13pstrUsageVest
00029c0c l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00029c18 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00029c24 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00029c34 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00029c44 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00029c50 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00029c5c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002e898 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002e89c l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002e8a4 l     O .rwdata	00000005 _ZL13pstrUsageRate
00029c68 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00029c74 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00029c84 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00029c94 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00029ca4 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00029cb0 l     O .rodata	0000000b _ZL18pstrUsageStickType
00029cbc l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002e8ac l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002e8b4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002e8bc l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002e8c4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002e8cc l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002e8d4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002e8dc l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002e8e4 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002e8ec l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002e8f4 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002e8fc l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002e904 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00029cc8 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00029cd4 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00029ce0 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002e90c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002e914 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002e91c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002e924 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002e92c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00029cec l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00029cfc l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002e934 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002e93c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00029d08 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00029d18 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00029d28 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00029d38 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00029d48 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00029d58 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00029d68 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00029d78 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00029d88 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002e940 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00029d98 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002e948 l     O .rwdata	00000005 _ZL13pstrUsageBump
00029da8 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00029db4 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002e950 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00029dc0 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00029dcc l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002e958 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00029dd8 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00029de8 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00029df4 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00029e00 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00029e0c l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00029e20 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00029e30 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00029e40 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00029e4c l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00029e58 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00029e70 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00029e84 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00029e9c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00029eb0 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00029ebc l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00029ec8 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002e960 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002e968 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002e970 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002e974 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002e97c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002e980 l     O .rwdata	00000005 _ZL13pstrUsageMute
00029ed4 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00029ee0 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00029ef0 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002e988 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00029f00 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00029f10 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002e990 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002e998 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00029f1c l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00029f30 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002e9a0 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002e9a4 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00029f3c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00029f50 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002e9a8 l     O .rwdata	00000005 _ZL13pstrUsageRing
00029f5c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00029f68 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002e9b0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002e9b8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002e9c0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002e9c8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00029f74 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002e9d0 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002e9d8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00029f80 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00029f8c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00029f98 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00029fa4 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002e9dc l     O .rwdata	00000005 _ZL19pstrUsageConference
00029fb0 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002e9e4 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002e9ec l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002e9f4 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00029fbc l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002e9fc l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002ea04 l     O .rwdata	00000006 _ZL14pstrUsageReady
00029fc8 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00029fd4 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002ea0c l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002ea14 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002ea18 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002ea1c l     O .rwdata	00000005 _ZL13pstrUsageStop
0002ea24 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00029fe0 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002ea2c l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002ea34 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002ea3c l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002ea40 l     O .rwdata	00000006 _ZL14pstrUsageError
00029fec l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00029ffc l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
0002a010 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002ea48 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
0002a028 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
0002a034 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
0002a044 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002ea50 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
0002a054 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
0002a064 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
0002a078 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0002a08c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
0002a0a0 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
0002a0b4 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002ea58 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
0002a0c4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
0002a0d0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002ea60 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0002a0dc l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0002a0e8 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002ea68 l     O .rwdata	00000006 _ZL14pstrUsagePhone
0002a0f8 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0002a104 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002ea70 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002ea78 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
0002a110 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
0002a11c l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002ea80 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002ea88 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002ea90 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002ea98 l     O .rwdata	00000007 _ZL15pstrUsageRedial
0002a128 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002eaa0 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002eaa8 l     O .rwdata	00000005 _ZL13pstrUsagePark
0002a134 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
0002a140 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002eab0 l     O .rwdata	00000005 _ZL13pstrUsageLine
0002a14c l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
0002a158 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
0002a164 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
0002a170 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0002a17c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002eab8 l     O .rwdata	00000005 _ZL13pstrUsageSend
0002a188 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
0002a194 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
0002a1a0 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0002a1ac l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0002a1b8 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0002a1c4 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002eac0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
0002a1d4 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0002a1e4 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0002a1f8 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
0002a20c l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
0002a220 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0002a234 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0002a244 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0002a254 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
0002a268 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0002a278 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0002a288 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0002a298 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0002a2a4 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
0002a2b0 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0002a2bc l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002eac4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002eacc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002ead0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002ead4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002ead8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002eadc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002eae0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002eae4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002eae8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002eaec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002eaf0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002eaf4 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002eaf8 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002eafc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002eb00 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002eb04 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002eb08 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0002a2d0 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0002a2e0 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0002a2ec l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0002a2f8 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002eb0c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002eb10 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002eb18 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002eb20 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002eb28 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0002a304 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0002a310 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002eb30 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0002a31c l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002eb38 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0002a328 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002eb40 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0002a334 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0002a340 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0002a34c l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0002a358 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0002a364 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0002a374 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0002a384 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0002a390 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0002a39c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002eb48 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0002a3ac l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0002a3bc l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002eb50 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002eb58 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0002a3c8 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0002a3d4 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0002a3e0 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0002a3ec l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002a3fc l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002eb5c l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002eb64 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0002a408 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0002a418 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0002a424 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0002a430 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0002a43c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0002a448 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0002a454 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0002a460 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0002a470 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002a47c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0002a488 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0002a494 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002eb6c l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002eb74 l     O .rwdata	00000005 _ZL13pstrUsageHelp
0002a4a4 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0002a4b4 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0002a4c0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0002a4cc l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0002a4dc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0002a4ec l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002eb7c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002eb84 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002a4fc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002eb8c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002eb94 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002eb9c l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002eba4 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002ebac l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0002a508 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002a514 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002ebb4 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002ebbc l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0002a520 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0002a52c l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0002a538 l     O .rodata	00000009 _ZL17pstrUsageTracking
0002a544 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0002a550 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002ebc4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0002a55c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002ebcc l     O .rwdata	00000005 _ZL13pstrUsageMark
0002a568 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0002a574 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0002a580 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002a58c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002a59c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0002a5b0 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0002a5c0 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0002a5d0 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0002a5dc l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0002a5e8 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002a5f4 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0002a600 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002ebd4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002ebd8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002ebe0 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002ebe8 l     O .rwdata	00000007 _ZL15pstrUsageTreble
0002a60c l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0002a618 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002ebf0 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002ebf8 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002ebfc l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002ec04 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002ec0c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002a624 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0002a630 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0002a63c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0002a648 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002ec14 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0002a654 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0002a660 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002a66c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0002a678 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0002a688 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002a698 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0002a6a4 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0002a6b0 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002a6bc l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002ec1c l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002ec24 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0002a6c8 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0002a6d4 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002ec2c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0002a6e0 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0002a6f0 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0002a700 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0002a70c l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0002a718 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002a724 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002ec34 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002ec3c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0002a730 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0002a73c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002a748 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0002a754 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002ec44 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0002a764 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0002a770 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002ec4c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002ec54 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002ec5c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0002a780 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002a78c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002a798 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0002a7a4 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0002a7b0 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0002a7c0 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0002a7d4 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0002a7e0 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002a7f4 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002a804 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0002a810 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0002a820 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0002a830 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0002a840 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0002a84c l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0002a85c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002a868 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002a878 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002a888 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002a898 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002a8a8 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002a8bc l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002ec64 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002a8cc l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0002a8e0 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002a8f4 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002a904 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002a914 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002a924 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0002a930 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0002a93c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002a948 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0002a954 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0002a960 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0002a970 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002a988 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0002a994 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0002a9a0 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002a9ac l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002a9b8 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0002a9c4 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0002a9d0 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002a9e4 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002ec6c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0002a9f0 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002ec74 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002a9fc l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0002aa08 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0002aa18 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002aa24 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0002aa34 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0002aa44 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0002aa54 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0002aa60 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002aa6c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002aa78 l     O .rodata	00000009 _ZL16pstrUsageALClock
0002aa84 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0002aa94 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0002aaa0 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002aaac l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002aab8 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0002aac4 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002aad8 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0002aae8 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002aaf4 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0002ab08 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002ab14 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002ab24 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0002ab38 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0002ab4c l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0002ab60 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0002ab70 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002ab88 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002ab9c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002abac l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002abbc l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002ec7c l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002ec84 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0002abd0 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002ec8c l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002ec94 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002ec9c l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002eca4 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002abdc l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002ecac l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002ecb4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002ecbc l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002ecc4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0002abe8 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0002abf4 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002eccc l     O .rwdata	00000008 _ZL15pstrUsageACFind
0002ac00 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0002ac10 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002ecd4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002ecdc l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002ece4 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002ecec l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002ecf4 l     O .rwdata	00000008 _ZL15pstrUsageACStop
0002ac1c l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0002ac28 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0002ac38 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002ac48 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002ecfc l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0002ac54 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0002ac60 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002ac6c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002ed04 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002ac78 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0002ac84 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0002ac94 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0002aca0 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0002acb0 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0002acc0 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002accc l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002acd8 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002ed0c l     O .rwdata	00000007 _ZL14pstrUsageACPan
0002ace8 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0002acf4 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0002ad04 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002ed14 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002ed1c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002ed24 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002ed2c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0002ad14 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0002ad20 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002ed34 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0002ad2c l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0002ad38 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0002ad44 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0002ad50 l     O .rodata	0000000a _ZL17pstrUsageACResize
0002ad5c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0002ad68 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0002ad74 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0002ad80 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0002ad8c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002ad98 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0002ada4 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0002adb0 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0002adc0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0002add0 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002ade0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002adf0 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002adfc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0002ae0c l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0002ae18 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0002ae28 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0002ae38 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0002ae48 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0002ae54 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002ae60 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002ae6c l     O .rodata	0000000b _ZL18pstrUsageACPromote
0002ae78 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002ed3c l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002ed44 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0002ae84 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002ed4c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002ed54 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002ae90 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002ed5c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002ae9c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002aeac l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002aeb8 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002aec8 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0002aed8 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0002aee8 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002ed64 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002ed6c l     O .rwdata	00000008 _ZL15pstrUsageACLock
0002aef4 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002ed74 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002af00 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0002af0c l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0002af1c l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0002af28 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0002af38 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0002af44 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002af50 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0002af5c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0002af68 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0002af74 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002af80 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002ed7c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002ed84 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002af8c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002af98 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002ed8c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002afa8 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0002afb4 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002afc0 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002afd0 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002afe0 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002afec l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0002aff8 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0002b004 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002ed94 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0002b010 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0002b01c l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0002b028 l     O .rodata	00000009 _ZL16pstrUsageACReply
0002b034 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0002b044 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002ed9c l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002b050 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002eda4 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002edac l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0002b05c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0002b068 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0002b074 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002b080 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002b08c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002b098 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0002b0a4 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002b0b0 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002b0bc l     O .rodata	0000000a _ZL17pstrUsageACRename
0002b0c8 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0002b0d4 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002b0e0 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002b0ec l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0002b0f8 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002edb4 l     O .rwdata	00000004 _ZL12pstrUsagePen
0002b104 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0002b110 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0002b11c l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0002b128 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0002b134 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002edb8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0002b144 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002edc0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002b150 l     O .rodata	00000009 _ZL17pstrUsageArmature
0002b15c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002b170 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002edc8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002edd0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002edd8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002b180 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002b18c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002b198 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002ede0 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002ede8 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002edf0 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002edf4 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002b1a4 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002b1b0 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002b1c0 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002b1d0 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002edfc l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002ee04 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002ee0c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002ee14 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002b1e0 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002ee1c l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002ee24 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002b1ec l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002ee2c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002ee34 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002b1f8 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002b204 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002b214 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002b220 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002b230 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002b23c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002b24c l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002b258 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002b268 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002b274 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002b284 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002b294 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002b2a0 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002b2ac l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002b2b8 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002b2c4 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002b2d0 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002b2dc l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002b2e8 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002b2f8 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002b308 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002ee3c l     O .rwdata	00000004 _ZL12pstrUsageRow
0002ee40 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002ee44 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002ee4c l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002b314 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002b320 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002b32c l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002b338 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002ee54 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002b344 l     O .rodata	00000009 _ZL17pstrUsageFontData
0002b350 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002b35c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002b368 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002b378 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002b388 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002b398 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002b3a4 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002b3b0 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002b3bc l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002b3c8 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002b3d4 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002b3e0 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002b3ec l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002b3f8 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002b404 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002b414 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002b424 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002b434 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002b440 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002b44c l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002b45c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002ee5c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002b468 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002b478 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002b488 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002b494 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002b4a0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002b4b0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002b4c0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002b4d0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002b4e0 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002b4ec l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002b4f8 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002b504 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002b514 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002b524 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002b534 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002b544 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002ee64 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002ee6c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002b554 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002ee74 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002ee7c l     O .rwdata	00000005 _ZL13pstrUsageNext
0002ee84 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002ee8c l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002b560 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002ee94 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002b56c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002ee9c l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002eea4 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002b578 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002b588 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002b598 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002b5a8 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002b5b4 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002b5c0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002b5d4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002b5e8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002b5fc l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002b610 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002b620 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002b630 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002b63c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002b648 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002b658 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002b666 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002b676 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002eeac l     O .rwdata	00000004 _ZL5synth
0000ade4 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000ae4c l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000c080 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000c124 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000c330 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000c384 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000c410 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000c544 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000c5cc l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000c7f8 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000d0d0 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000d3b8 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
000322a4 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000d470 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000d620 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00032140 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000efcc l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00032148 l     O .bss	00000004 fc_static
0000f0e4 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000f1a4 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002bd3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002bb1a l     O .rodata	00000010 zeroes.4389
0002bb2a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002bb3a l     O .rodata	00000010 zeroes.4404
00014d04 l     F .text	000000bc __sbprintf
0002bb4a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00014f14 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00016a6c l     F .text	00000008 __fp_unlock
00016a80 l     F .text	0000019c __sinit.part.1
00016c1c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002c588 l     O .rwdata	00000020 lc_ctype_charset
0002c568 l     O .rwdata	00000020 lc_message_charset
0002c5a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002bb78 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002bc9c l     O .rodata	00000010 zeroes.4333
0002bcac l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0001ac1c l     F .text	000000fc __sprint_r.part.0
0002bcbc l     O .rodata	00000010 zeroes.4349
0001c258 l     F .text	000000bc __sbprintf
0002bccc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00020060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00020174 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000201d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000202e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
000203d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002053c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00020628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00020804 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002ef18 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00020a78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00020b5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020c98 l     F .text	00000034 alt_dev_reg
0002c788 l     O .rwdata	00000038 i2c_0
0002c7c0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00020d78 l     F .text	00000110 optional_irq_callback
00020ed8 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00022bb4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00022dc0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000235f4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002398c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023e7c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023fdc l     F .text	0000003c alt_get_errno
00024018 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00032180 g     O .bss	00000004 alt_instruction_exception_handler
0000d578 g     F .text	00000028 __cxa_free_exception
00024e08  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
000100cc g     F .text	00000018 putchar
0000bbd4 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00018cb8 g     F .text	00000074 _mprec_log10
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000c020 g     F .text	00000018 _ZSt10unexpectedv
00018da4 g     F .text	0000008c __any_on
0001c964 g     F .text	00000054 _isatty_r
0002bb84 g     O .rodata	00000028 __mprec_tinytens
00020740 g     F .text	0000007c alt_main
00006e08 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
000100e4 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
00007264 g     F .text	0000008c _Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh
000322dc g     O .bss	00000100 alt_irq
0000d714 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0000976c g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001c9b8 g     F .text	00000060 _lseek_r
0000f260 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002ef30 g       *ABS*	00000000 __flash_rwdata_start
000067a8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001ea9c g     F .text	00000088 .hidden __eqdf2
00004840  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000028cc g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000d1a4 g     F .text	00000084 __cxa_rethrow
0000f1ec g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000c05c g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0000704c g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000f250 g     F .text	00000010 .hidden _Unwind_GetIP
000323dc g       *ABS*	00000000 __alt_heap_start
000090ac  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
000104b0 g     F .text	0000005c _kill_r
000072f0 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
00010088 g     F .text	0000003c printf
00024e2c  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001ca78 g     F .text	0000009c _wcrtomb_r
00010278 g     F .text	00000084 _signal_r
00006530  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
00019648 g     F .text	0000005c __sseek
00016dcc g     F .text	00000010 __sinit
0001c314 g     F .text	00000140 __swbuf_r
000055b4 g     F .text	000000a8 _Z8set_notehhh
00009de0 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000d5f4 g     F .text	0000002c __cxa_free_dependent_exception
0000af28 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
000178a0 g     F .text	0000007c _setlocale_r
0002b760  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00016c24 g     F .text	00000078 __sfmoreglue
000215d0 g     F .text	000000a8 alt_avalon_i2c_rx_read
000207e0 g     F .text	00000024 __malloc_unlock
0000d714 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
000089fc g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000b95c g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00009194  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
00001ffc g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0000d398 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000de28 g     F .text	00000440 .hidden __divsf3
000227e8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001d6c g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
0000a1b4 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0002eebc g     O .rwdata	00000004 peak_sus
0000bc50 g     F .text	00000020 __cxa_deleted_virtual
00021354 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002d3c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00009258 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00009bf0 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00017c1c g     F .text	0000015c memmove
00032138 g     O .bss	00000002 sus_h
0000624c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000d6ec g     F .text	00000004 _ZNSt9exceptionD2Ev
00016db4 g     F .text	00000018 _cleanup
00022038 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00017d78 g     F .text	000000a8 _Balloc
0000ec38 g     F .text	00000070 .hidden __fixsfsi
00003e40 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001eb24 g     F .text	000000dc .hidden __gtdf2
00003f04 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002b994  w    O .rodata	00000014 _ZTVSt13bad_exception
0002466c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00020ab4 g     F .text	00000078 times
00009114  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000f29c g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002d83c  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008980 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004d0c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001c908 g     F .text	0000005c _fstat_r
000098bc g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00032158 g     O .bss	00000004 errno
00005f8c g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
000195c4 g     F .text	00000008 __seofread
00009468 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0001987c g     F .text	000013a0 ___svfiprintf_internal_r
0000f478 g     F .text	00000074 .hidden _Unwind_Backtrace
0003216c g     O .bss	00000004 alt_argv
000034cc g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00035820 g       *ABS*	00000000 _gp
00020b2c g     F .text	00000030 usleep
0002282c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000e754 g     F .text	000004e4 .hidden __subsf3
0000830c g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002dfd8  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0002eeb6 g     O .rwdata	00000002 rel_l
00032134 g     O .bss	00000002 att_h
000202c8 g     F .text	00000020 getpid
0000cea0 g     F .text	00000230 __cxa_call_unexpected
0000d228 g     F .text	00000008 __cxa_get_exception_ptr
000214e4 g     F .text	00000044 alt_avalon_i2c_is_busy
0002c608 g     O .rwdata	00000180 alt_fd_list
00009618 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00024d78  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
000072f0 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
00004618 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
000100c4 g     F .text	00000008 _putchar_r
0000f38c g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00021288 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c0c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000f21c g     F .text	00000018 .hidden _Unwind_GetCFA
0000c038 g     F .text	00000014 _ZSt13set_terminatePFvvE
00023b2c g     F .text	00000090 alt_find_dev
00024d6c  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
00012a04 g     F .text	00000008 _times_r
0000fde8 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00006314  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000d5a0 g     F .text	00000054 __cxa_allocate_dependent_exception
00016a74 g     F .text	0000000c _cleanup_r
0000bce8 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001fedc g     F .text	000000dc .hidden __floatsidf
00024e20  w    O .rodata	0000000c _ZTV13USBReadParser
00023f60 g     F .text	0000007c alt_io_redirect
0001ec00 g     F .text	000000f4 .hidden __ltdf2
00004b60  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00024c98 g       *ABS*	00000000 __DTOR_END__
0000bd00 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00021e78 g     F .text	000001c0 alt_avalon_i2c_master_transmit
000101a4 g     F .text	00000014 puts
0002b7e8  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
0002485c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008394 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000096a0 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
000194fc g     F .text	00000074 __fpclassifyd
0000a33c g     F .text	0000093c _Z9MIDI_pollv
00018c14 g     F .text	000000a4 __ratio
0001c23c g     F .text	0000001c __vfiprintf_internal
00007e10 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00022fb8 g     F .text	0000021c altera_avalon_jtag_uart_read
0000f5b4 g     F .text	00000014 malloc
00010058 g     F .text	00000030 _printf_r
0000d87c g     F .text	00000064 .hidden __udivsi3
00020324 g     F .text	000000ac isatty
000102fc g     F .text	000000bc _raise_r
0000985c g     F .text	0000003c _ZN8MAX3421eC2Ev
0002bbd4 g     O .rodata	000000c8 __mprec_tens
000070b8 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
0001791c g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004b18  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
000210f4 g     F .text	00000098 alt_avalon_i2c_enable
00032154 g     O .bss	00000004 __malloc_top_pad
0001050c g     F .text	00000004 _getpid_r
0002271c g     F .text	00000068 alt_avalon_i2c_int_disable
0003212c g     O .bss	00000001 usb_task_state
0002eef8 g     O .rwdata	00000004 __mb_cur_max
0001794c g     F .text	0000000c _localeconv_r
0000b1ec g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003e70 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00007470 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
000181ac g     F .text	0000003c __i2b
00017250 g     F .text	000004c8 __sfvwrite_r
0000be80 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000103b8 g     F .text	000000a8 __sigtramp_r
000086c8 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002df4  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
000101b8 g     F .text	00000054 _sbrk_r
0002b830  w    O .rodata	00000020 _ZTVSt9type_info
00004c10  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009500 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001ca18 g     F .text	00000060 _read_r
0000d6f4 g     F .text	0000000c _ZNKSt9exception4whatEv
0002ef10 g     O .rwdata	00000004 alt_max_fd
00006600 g     F .text	00000050 _Z9E_Notifycci
00008808 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001c5fc g     F .text	000000f0 _fclose_r
00016a3c g     F .text	00000030 fflush
0000a24c g     F .text	00000078 _Z6onInitv
00032150 g     O .bss	00000004 __malloc_max_sbrked_mem
00009b68 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
00022244 g     F .text	00000210 alt_avalon_i2c_master_receive
0000eebc g     F .text	00000110 .hidden __extendsfdf2
000273e4  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001d820 g     F .text	000008ac .hidden __adddf3
0002b794  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004c3c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008f60 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
000189bc g     F .text	0000010c __b2d
0001d25c g     F .text	000005c4 .hidden __umoddi3
00020664 g     F .text	000000dc lseek
0000633c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000bd44 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00006758 g     F .text	00000028 _Z8E_Notifyhi
0000bc2c g     F .text	00000004 _ZdlPv
00022784 g     F .text	00000064 alt_avalon_i2c_int_enable
0002eee8 g     O .rwdata	00000004 _global_impure_ptr
0000b1fc g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00018f98 g     F .text	00000564 _realloc_r
000323dc g       *ABS*	00000000 __bss_end
00023d8c g     F .text	000000f0 alt_iic_isr_register
00024564 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000f1d4 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001cc60 g     F .text	000005fc .hidden __udivdi3
00022644 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001c864 g     F .text	00000024 _fputwc_r
0002bbac g     O .rodata	00000028 __mprec_bigtens
00017f90 g     F .text	00000104 __s2b
0000f550 g     F .text	00000018 abort
0001ffb8 g     F .text	000000a8 .hidden __floatunsidf
000271dc  w    O .rodata	00000014 _ZTS17MouseReportParser
000186fc g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
000091d0  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
000036b0 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000d2e4 g     F .text	000000b4 __cxa_end_catch
00009594 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00016dec g     F .text	00000018 __fp_lock_all
00024e64  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00023d40 g     F .text	0000004c alt_ic_irq_enabled
0000d6f0 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000030c0  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
000062ec  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
000244c8 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00027370  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
00020f74 g     F .text	00000054 alt_avalon_i2c_register_callback
00032174 g     O .bss	00000004 alt_irq_active
00020fc8 g     F .text	000000ec alt_avalon_i2c_init
0000bff8 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002c5e0 g     O .rwdata	00000028 alt_dev_null
0000b230 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00006564  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000d71c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
0000326c  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002b94 g     F .text	00000084 _ZN3USB7setConfEhhh
0003213a g     O .bss	00000002 rel_h
000090a4 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002b88c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0002396c g     F .text	00000020 alt_dcache_flush_all
00018094 g     F .text	00000068 __hi0bits
000273f0  w    O .rodata	0000000c _ZTI14MidiDescParser
00009db8 g     F .text	00000028 _Z10Vbus_powerb
0002eed0  w    O .rwdata	00000008 _ZTISt9exception
0001fe5c g     F .text	00000080 .hidden __fixdfsi
000271f0  w    O .rodata	00000012 _ZTS15HIDReportParser
0000ae7c  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002ef30 g       *ABS*	00000000 __ram_rwdata_end
0000bbd0 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002ef08 g     O .rwdata	00000008 alt_dev_list
0000d71c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00020b98 g     F .text	00000100 write
00018e30 g     F .text	000000a0 _putc_r
0000a228 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
00021904 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000bbe4 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004d34  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000e268 g     F .text	000000bc .hidden __gtsf2
000226e0 g     F .text	0000003c alt_avalon_i2c_int_clear
0000922c  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00024d58  w    O .rodata	00000014 _ZTV11AddressPool
0002bd3c g       *ABS*	00000000 __ram_rodata_end
00020210 g     F .text	000000b8 fstat
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0002040c g     F .text	00000130 kill
000065dc  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001ec00 g     F .text	000000f4 .hidden __ledf2
00024e8c  w    O .rodata	00000020 _ZTI7XBOXONE
0002ef1c g     O .rwdata	00000008 alt_avalon_i2c_list
00004aa0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00027136 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
00018474 g     F .text	00000140 __pow5mult
00005088  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
0001ad30 g     F .text	0000150c ___vfiprintf_internal_r
00032164 g     O .bss	00000004 __nlocale_changed
0000d8e0 g     F .text	00000058 .hidden __umodsi3
0000bbdc g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000487c  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
0000a2c4 g     F .text	00000078 _Z10MIDI_setupv
0000270c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000c04c g     F .text	00000010 _ZSt13get_terminatev
000323dc g       *ABS*	00000000 end
00024e14  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
00009a7c g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
000064fc  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000f460 g     F .text	00000018 .hidden _Unwind_DeleteException
00022af4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000062c4  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000210b4 g     F .text	00000040 alt_avalon_i2c_open
0002714c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0003213c g     O .bss	00000001 ped_flip
0000bdb0 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000b1ec g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002dfcc g     O .rwdata	00000004 UsbDEBUGlvl
00024c90 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00021a8c g     F .text	000000e8 alt_avalon_i2c_master_tx
0002366c g     F .text	0000007c alt_avalon_timer_sc_init
0000f4ec g     F .text	00000064 .hidden __clzsi2
0000bc70 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
000231d4 g     F .text	00000224 altera_avalon_jtag_uart_write
00016ddc g     F .text	00000004 __sfp_lock_acquire
0002b91c  w    O .rodata	00000012 _ZTSSt13bad_exception
00017b38 g     F .text	000000e4 memchr
00012a0c g     F .text	000022dc ___vfprintf_internal_r
00010510 g     F .text	00000058 _sprintf_r
000047e0  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00016f40 g     F .text	00000310 _free_r
00024260 g     F .text	0000022c alt_printf
00017928 g     F .text	00000010 __locale_mb_cur_max
00024ad8 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00032160 g     O .bss	00000004 __mlocale_changed
0002eeb2 g     O .rwdata	00000002 dec_l
00020e88 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002eef0 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003e48 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00032178 g     O .bss	00000004 _alt_tick_rate
0002b820  w    O .rodata	0000000d _ZTSSt9type_info
00022454 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000bc30 g     F .text	00000020 __cxa_pure_virtual
00024d44  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00024ecc  w    O .rodata	00000010 _ZTS13USBReadParser
00022878 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
000185b4 g     F .text	00000148 __lshift
000233f8 g     F .text	000001fc alt_avalon_spi_command
0003217c g     O .bss	00000004 _alt_nticks
00010474 g     F .text	00000018 signal
00020840 g     F .text	00000104 read
00005ab4 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
00020d04 g     F .text	00000074 alt_sys_init
00024dc8  w    O .rodata	00000040 _ZTV7XBOXONE
0000eca8 g     F .text	00000124 .hidden __floatsisf
000196ac g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
000249c0 g     F .text	00000118 __register_exitproc
00002b00 g     F .text	00000094 _ZN3USB7setAddrEhhh
00006650 g     F .text	00000084 _Z8E_NotifyPKci
000273ac  w    O .rodata	0000000c _ZTV14MidiDescParser
0000913c  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00003300  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000af6c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000064c8  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00004ccc  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00021cb0 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000181e8 g     F .text	0000028c __multiply
00002a58 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002dfba g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00022e60 g     F .text	00000068 altera_avalon_jtag_uart_close
00002c70  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000d938 g     F .text	00000028 .hidden __mulsi3
0002bd3c g       *ABS*	00000000 __ram_rwdata_start
0000f2bc g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0000565c g     F .text	00000064 _Z8set_ctrlhhm
00024c98 g       *ABS*	00000000 __ram_rodata_start
000322b4 g     O .bss	00000028 __malloc_current_mallinfo
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000f3d0 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00018ac8 g     F .text	0000014c __d2b
0002b9bc  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000bbd0 g     F .text	00000004 _ZNSt9type_infoD2Ev
000090ec  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004938  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002d828  w    O .rwdata	00000008 _ZTI11AddressPool
0000d720 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000b168 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000273fc  w    O .rodata	00000011 _ZTS14MidiDescParser
0002b7c0  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00022990 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024798 g     F .text	000000c4 alt_get_fd
00005cd0 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
00023814 g     F .text	00000158 alt_busy_sleep
00006ba8 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002eee0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001c4cc g     F .text	00000054 _close_r
00024944 g     F .text	0000007c memcmp
00021528 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00022a50 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007ee4 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
000323dc g       *ABS*	00000000 __alt_stack_base
00022aa0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000af28 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0000814c g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004578 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00014dc0 g     F .text	00000154 __swsetup_r
0000f414 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00032130 g     O .bss	00000004 i2c_dev
0001e0cc g     F .text	000009d0 .hidden __divdf3
0000aecc  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00016c9c g     F .text	00000118 __sfp
00018d2c g     F .text	00000078 __copybits
0000bbd4 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002c160 g     O .rwdata	00000408 __malloc_av_
000048fc  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00016de8 g     F .text	00000004 __sinit_lock_release
0001ecf4 g     F .text	0000086c .hidden __muldf3
00019570 g     F .text	00000054 __sread
00004ef0  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002b980  w    O .rodata	00000014 _ZTVSt9exception
0000d718 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002c3c  w    F .text	00000034 _ZN11AddressPoolC2Ev
00024690 g     F .text	00000108 alt_find_file
00004be4  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
000239c8 g     F .text	000000a4 alt_dev_llist_insert
000207bc g     F .text	00000024 __malloc_lock
000209c8 g     F .text	000000b0 sbrk
00010748 g     F .text	000022bc ___svfprintf_internal_r
00021950 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
000218b8 g     F .text	0000004c alt_avalon_i2c_check_nack
0002b8bc  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000d114 g     F .text	00000090 __cxa_throw
000169e0 g     F .text	0000005c _fflush_r
0000f280 g     F .text	00000010 .hidden _Unwind_SetIP
00006fb4 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001c520 g     F .text	000000dc _calloc_r
00024eb8  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
00006780 g     F .text	00000028 _Z8E_Notifydi
00007d08 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00032136 g     O .bss	00000002 dec_h
00032124 g       *ABS*	00000000 __bss_start
0002d84c  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000ff30 g     F .text	00000128 memset
00008808 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00005104  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000ac78 g     F .text	0000016c main
00009af0 g     F .text	00000078 _ZN8MAX3421e5regRdEh
00009cec g     F .text	000000cc _ZN8MAX3421e5resetEv
00021884 g     F .text	00000034 alt_avalon_i2c_master_target_set
00032170 g     O .bss	00000004 alt_envp
00024edc  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0003214c g     O .bss	00000004 __malloc_max_total_mem
000229f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0003212d g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001c454 g     F .text	00000018 __swbuf
0000d6d4 g     F .text	0000000c __cxa_get_globals_fast
0002269c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0000985c g     F .text	0000003c _ZN8MAX3421eC1Ev
00004ebc  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002c18  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
000196a4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001c6ec g     F .text	00000014 fclose
0000aef4  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
0000444c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
000066d4 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
0001513c g     F .text	00001688 _dtoa_r
0000f5dc g     F .text	0000080c _malloc_r
0001cbd4 g     F .text	00000030 __ascii_wctomb
0000d700 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002ef14 g     O .rwdata	00000004 alt_errno
000271d0  w    O .rodata	0000000c _ZTI17MouseReportParser
0001048c g     F .text	00000010 _init_signal
00002960 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006d60 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002b8b0  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000046bc g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
00017718 g     F .text	000000c4 _fwalk
00009898 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00003204  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000d6f0 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00018ed0 g     F .text	000000c8 putc
0000d784 g     F .text	00000084 .hidden __divsi3
00027410  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00016e1c g     F .text	00000124 _malloc_trim_r
00024c98 g       *ABS*	00000000 __CTOR_END__
0000e324 g     F .text	00000430 .hidden __mulsf3
00004adc  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
000091f8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00027184  w    O .rodata	00000028 _ZTV17MouseReportParser
000105d4 g     F .text	000000dc strcmp
000034cc g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00024c98 g       *ABS*	00000000 __flash_rodata_start
0002b9a8  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000aea4  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00024c98 g       *ABS*	00000000 __DTOR_LIST__
000273b8  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001ea9c g     F .text	00000088 .hidden __nedf2
00020ccc g     F .text	00000038 alt_irq_init
00020944 g     F .text	00000084 alt_release_fd
0000af38 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00024eac  w    O .rodata	00000009 _ZTS7XBOXONE
00010568 g     F .text	0000006c sprintf
0002b9d0 g     O .rodata	00000100 .hidden __clz_tab
0003215c g     O .bss	00000004 _PathLocale
000248f8 g     F .text	00000014 atexit
0000e268 g     F .text	000000bc .hidden __gesf2
0001c46c g     F .text	00000060 _write_r
00002844 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002dc8  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
00017958 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00027158  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009c70 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000f2b4 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002b7f4  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000d67c g     F .text	00000058 __cxa_call_terminate
0002eeec g     O .rwdata	00000004 _impure_ptr
0002eed8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00024d94  w    O .rodata	0000000e _ZTS11AddressPool
00032168 g     O .bss	00000004 alt_argc
00003404  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
000167c4 g     F .text	0000021c __sflush_r
000091f8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00003054  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00023acc g     F .text	00000060 _do_dtors
00032240 g     O .bss	00000064 Midi
00017944 g     F .text	00000008 __locale_cjk_lang
0002184c g     F .text	00000038 alt_avalon_i2c_master_target_get
0002175c g     F .text	000000f0 alt_avalon_i2c_send_address
0000c070 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002c3c  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
00018958 g     F .text	00000064 __ulp
0000f2a4 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00016e04 g     F .text	00000018 __fp_unlock_all
00004f24  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
0000453c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004b84  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002ef00 g     O .rwdata	00000008 alt_fs_list
0002b95c  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000271b8  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004ef0  w    F .text	00000034 _ZN13USBReadParserC1Ev
0002eeb0 g     O .rwdata	00000002 att_l
0000f290 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004bb0  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000d230 g     F .text	000000b4 __cxa_begin_catch
00004734 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
000056c0 g     F .text	000003f4 _Z9calc_adsrttttttttff
0000bd00 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000c010 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
0000629c  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
00017970 g     F .text	0000000c localeconv
00009fdc g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004d5c  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000d710 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00022928 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002eecc g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
000092f8 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00023bdc g     F .text	00000050 alt_ic_isr_register
0002118c g     F .text	0000004c alt_avalon_i2c_disable
0000d518 g     F .text	00000060 __cxa_allocate_exception
0002b788  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002ef30 g       *ABS*	00000000 _edata
00004e88  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
000323dc g       *ABS*	00000000 _end
0000b358 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000c8a0 g     F .text	00000600 __gxx_personality_sj0
0001c700 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	000003f0 _ZN3USB4TaskEv
00022ec8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002d844  w    O .rwdata	00000008 _ZTI13USBReadParser
000211d8 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000d6ec g     F .text	00000004 _ZNSt9exceptionD1Ev
00023cb4 g     F .text	0000008c alt_ic_irq_disable
00006224  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
000195cc g     F .text	0000007c __swrite
0002eef4 g     O .rwdata	00000004 __malloc_trim_threshold
00017938 g     F .text	0000000c __locale_msgcharset
0002490c g     F .text	00000038 exit
0000f234 g     F .text	0000001c .hidden _Unwind_SetGR
00006274  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
000177dc g     F .text	000000c4 _fwalk_reent
0000b0cc g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000edcc g     F .text	000000f0 .hidden __floatunsisf
0001875c g     F .text	000001fc __mdiff
0000bf38 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000d808 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00016de0 g     F .text	00000004 __sfp_lock_release
0002b930  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000658c  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003ffc g     F .text	000003c8 _ZN7XBOXONE10readReportEv
000213e8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009ec4 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
00021678 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000273c4  w    O .rodata	00000020 _ZTI9USBH_MIDI
000043c4 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000d724 g     F .text	00000060 .hidden __fixunssfsi
0002eeb4 g     O .rwdata	00000002 sus_l
00007c90 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
000201a0 g     F .text	00000034 _exit
000236e8 g     F .text	0000012c alt_alarm_start
000271ac  w    O .rodata	0000000c _ZTI20KeyboardReportParser
000082a8 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000f200 g     F .text	0000001c .hidden _Unwind_GetGR
0000d6e0 g     F .text	0000000c __cxa_get_globals
000068b0 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
0001797c g     F .text	000001bc __smakebuf_r
0002eec8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004b3c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
000106b0 g     F .text	00000098 strlen
0001020c g     F .text	0000006c _init_signal_r
0002eec0  w    O .rwdata	00000008 _ZTISt9type_info
00024104 g     F .text	0000015c open
0001eb24 g     F .text	000000dc .hidden __gedf2
0002448c g     F .text	0000003c alt_putchar
0002b90c  w    O .rodata	0000000d _ZTSSt9exception
0000f568 g     F .text	0000004c clock
000065b4  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
0000a150 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00027140 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009948 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002eefc g     O .rwdata	00000004 __wctomb
0000d70c g     F .text	00000004 _ZNSt9exceptionD0Ev
0001ad18 g     F .text	00000018 __sprint_r
00023bbc g     F .text	00000020 alt_icache_flush_all
0000f2ac g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00032184 g     O .bss	000000bc Usb
0002ef24 g     O .rwdata	00000004 alt_priority_mask
000048fc  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00023c2c g     F .text	00000088 alt_ic_irq_enable
00014ce8 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001cc04 g     F .text	0000005c _wctomb_r
0001f560 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003d04 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
000180fc g     F .text	000000b0 __lo0bits
0002ef28 g     O .rwdata	00000008 alt_alarm_list
00023a6c g     F .text	00000060 _do_ctors
00024e58  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0001049c g     F .text	00000014 __sigtramp
000093b0 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001cb14 g     F .text	000000c0 wcrtomb
0002009c g     F .text	000000d8 close
0000d960 g     F .text	000004c8 .hidden __addsf3
0002eeb8 g     O .rwdata	00000004 peak_att
000228dc g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002b93c  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
000205a4 g     F .text	00000084 alt_load
00021b74 g     F .text	0000013c alt_avalon_i2c_master_rx
0000bbe8 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000049a0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001c888 g     F .text	00000080 fputwc
00010460 g     F .text	00000014 raise
0002dfc0  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000f5c8 g     F .text	00000014 free
00016de4 g     F .text	00000004 __sinit_lock_acquire
00017e48 g     F .text	00000148 __multadd
0000bd10 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00017e20 g     F .text	00000028 _Bfree
00006b04 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	1088b704 	addi	r2,r2,8924
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1088b704 	addi	r2,r2,8924
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b25817 	ldw	r2,-13984(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b25817 	ldw	r2,-13984(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6960814 	ori	gp,gp,22560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	10884914 	ori	r2,r2,8484

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c8f714 	ori	r3,r3,9180

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00205a40 	call	205a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00207400 	call	20740 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	21132604 	addi	r4,r4,19608
     28c:	00101a40 	call	101a4 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	21132904 	addi	r4,r4,19620
     2d0:	00101a40 	call	101a4 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	21132e04 	addi	r4,r4,19640
     304:	00101a40 	call	101a4 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	21133104 	addi	r4,r4,19652
     340:	00101a40 	call	101a4 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	21133504 	addi	r4,r4,19668
     374:	00101a40 	call	101a4 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	21133904 	addi	r4,r4,19684
     3b0:	00101a40 	call	101a4 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	21133c04 	addi	r4,r4,19696
     3ec:	00101a40 	call	101a4 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	21133f04 	addi	r4,r4,19708
     428:	00101a40 	call	101a4 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	21134204 	addi	r4,r4,19720
     464:	00101a40 	call	101a4 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	21134504 	addi	r4,r4,19732
     4a0:	00101a40 	call	101a4 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	21134904 	addi	r4,r4,19748
     4dc:	00101a40 	call	101a4 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	21134d04 	addi	r4,r4,19764
     510:	00101a40 	call	101a4 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000d9380 	call	d938 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000d87c0 	call	d87c <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000d87c0 	call	d87c <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000d87c0 	call	d87c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000d9380 	call	d938 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000d87c0 	call	d87c <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000d87c0 	call	d87c <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000d9380 	call	d938 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000d87c0 	call	d87c <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000d9380 	call	d938 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000d9380 	call	d938 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000d87c0 	call	d87c <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000d9380 	call	d938 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000f5680 	call	f568 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000f5680 	call	f568 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000f5680 	call	f568 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	000985c0 	call	985c <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	0002c700 	call	2c70 <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b24145 	stb	r2,-14075(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b24143 	ldbu	r2,-14075(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b24145 	stb	r2,-14075(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00099480 	call	9948 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	0009b680 	call	9b68 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00099480 	call	9948 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	000a1500 	call	a150 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00098980 	call	9898 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b24143 	ldbu	r2,-14075(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b24145 	stb	r2,-14075(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b24143 	ldbu	r2,-14075(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b24215 	stw	r2,-14072(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b24145 	stb	r2,-14075(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b24143 	ldbu	r2,-14075(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	18008e1e 	bne	r3,zero,1bc8 <_ZN3USB4TaskEv+0x3ac>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	00009406 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00008f06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	18006e1e 	bne	r3,zero,1b78 <_ZN3USB4TaskEv+0x35c>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18008b1e 	bne	r3,zero,1bf4 <_ZN3USB4TaskEv+0x3d8>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00008606 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1a7c:	00005d06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b24217 	ldw	r2,-14072(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10004c26 	beq	r2,zero,1bd0 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b24145 	stb	r2,-14075(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1ac0:	00004c06 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10003d26 	beq	r2,zero,1bd8 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b24145 	stb	r2,-14075(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00003006 	br	1bd8 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10002a26 	beq	r2,zero,1be0 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b24145 	stb	r2,-14075(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b24215 	stw	r2,-14072(gp)
                        }
                        break;
    1b4c:	00002406 	br	1be0 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b24217 	ldw	r2,-14072(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10001e26 	beq	r2,zero,1be8 <_ZN3USB4TaskEv+0x3cc>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b24145 	stb	r2,-14075(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
    1b78:	e0bffc03 	ldbu	r2,-16(fp)
    1b7c:	100f883a 	mov	r7,r2
    1b80:	000d883a 	mov	r6,zero
    1b84:	000b883a 	mov	r5,zero
    1b88:	e13ffe17 	ldw	r4,-8(fp)
    1b8c:	0001ffc0 	call	1ffc <_ZN3USB11ConfiguringEhhb>
    1b90:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	10000826 	beq	r2,zero,1bbc <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1b9c:	e0bffd03 	ldbu	r2,-12(fp)
    1ba0:	108034a0 	cmpeqi	r2,r2,210
    1ba4:	1000121e 	bne	r2,zero,1bf0 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
    1ba8:	e0bffd03 	ldbu	r2,-12(fp)
    1bac:	d0b24105 	stb	r2,-14076(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1bb0:	00bfe804 	movi	r2,-96
    1bb4:	d0b24145 	stb	r2,-14075(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bb8:	00000d06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bbc:	00bfe404 	movi	r2,-112
    1bc0:	d0b24145 	stb	r2,-14075(gp)
                        break;
    1bc4:	00000a06 	br	1bf0 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1bc8:	0001883a 	nop
    1bcc:	00000906 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1bd0:	0001883a 	nop
    1bd4:	00000706 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1bd8:	0001883a 	nop
    1bdc:	00000506 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1be0:	0001883a 	nop
    1be4:	00000306 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1be8:	0001883a 	nop
    1bec:	00000106 	br	1bf4 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
    1bf0:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	dfc00117 	ldw	ra,4(sp)
    1c00:	df000017 	ldw	fp,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c0c:	defff704 	addi	sp,sp,-36
    1c10:	dfc00815 	stw	ra,32(sp)
    1c14:	df000715 	stw	fp,28(sp)
    1c18:	df000704 	addi	fp,sp,28
    1c1c:	e13ffc15 	stw	r4,-16(fp)
    1c20:	2809883a 	mov	r4,r5
    1c24:	3007883a 	mov	r3,r6
    1c28:	3805883a 	mov	r2,r7
    1c2c:	e13ffd05 	stb	r4,-12(fp)
    1c30:	e0fffe05 	stb	r3,-8(fp)
    1c34:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c38:	e03ff915 	stw	zero,-28(fp)
    1c3c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	000b883a 	mov	r5,zero
    1c48:	1009883a 	mov	r4,r2
    1c4c:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c50:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c54:	e0bff917 	ldw	r2,-28(fp)
    1c58:	1000021e 	bne	r2,zero,1c64 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c5c:	00bff584 	movi	r2,-42
    1c60:	00003d06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1c64:	e0bff917 	ldw	r2,-28(fp)
    1c68:	10c00003 	ldbu	r3,0(r2)
    1c6c:	11000043 	ldbu	r4,1(r2)
    1c70:	2008923a 	slli	r4,r4,8
    1c74:	20c6b03a 	or	r3,r4,r3
    1c78:	11000083 	ldbu	r4,2(r2)
    1c7c:	2008943a 	slli	r4,r4,16
    1c80:	20c6b03a 	or	r3,r4,r3
    1c84:	108000c3 	ldbu	r2,3(r2)
    1c88:	1004963a 	slli	r2,r2,24
    1c8c:	10c4b03a 	or	r2,r2,r3
    1c90:	1000021e 	bne	r2,zero,1c9c <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1c94:	00bff5c4 	movi	r2,-41
    1c98:	00002f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1c9c:	e0bff917 	ldw	r2,-28(fp)
    1ca0:	e0ffff03 	ldbu	r3,-4(fp)
    1ca4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	e0fffd03 	ldbu	r3,-12(fp)
    1cb0:	e13ffe03 	ldbu	r4,-8(fp)
    1cb4:	200f883a 	mov	r7,r4
    1cb8:	000d883a 	mov	r6,zero
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	0002df40 	call	2df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1cc8:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1ccc:	e0bffb03 	ldbu	r2,-20(fp)
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1cd4:	00bff504 	movi	r2,-44
    1cd8:	00001f06 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1cdc:	e0bffc17 	ldw	r2,-16(fp)
    1ce0:	e0fffb03 	ldbu	r3,-20(fp)
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	1009883a 	mov	r4,r2
    1cec:	0002d3c0 	call	2d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1cf0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1cf4:	e0bffa17 	ldw	r2,-24(fp)
    1cf8:	1000021e 	bne	r2,zero,1d04 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1cfc:	00bff584 	movi	r2,-42
    1d00:	00001506 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d04:	e0bffa17 	ldw	r2,-24(fp)
    1d08:	e0ffff03 	ldbu	r3,-4(fp)
    1d0c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d10:	e0bffb03 	ldbu	r2,-20(fp)
    1d14:	100f883a 	mov	r7,r2
    1d18:	000d883a 	mov	r6,zero
    1d1c:	000b883a 	mov	r5,zero
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    1d28:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d2c:	e0bffb43 	ldbu	r2,-19(fp)
    1d30:	10000826 	beq	r2,zero,1d54 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0fffb03 	ldbu	r3,-20(fp)
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	00030540 	call	3054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d48:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d4c:	e0bffb43 	ldbu	r2,-19(fp)
    1d50:	00000106 	br	1d58 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d54:	0005883a 	mov	r2,zero
};
    1d58:	e037883a 	mov	sp,fp
    1d5c:	dfc00117 	ldw	ra,4(sp)
    1d60:	df000017 	ldw	fp,0(sp)
    1d64:	dec00204 	addi	sp,sp,8
    1d68:	f800283a 	ret

00001d6c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1d6c:	defff804 	addi	sp,sp,-32
    1d70:	dfc00715 	stw	ra,28(sp)
    1d74:	df000615 	stw	fp,24(sp)
    1d78:	df000604 	addi	fp,sp,24
    1d7c:	e13ffb15 	stw	r4,-20(fp)
    1d80:	3009883a 	mov	r4,r6
    1d84:	3807883a 	mov	r3,r7
    1d88:	e0800217 	ldw	r2,8(fp)
    1d8c:	e17ffc05 	stb	r5,-16(fp)
    1d90:	e13ffd05 	stb	r4,-12(fp)
    1d94:	e0fffe05 	stb	r3,-8(fp)
    1d98:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1d9c:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1da0:	e0bffc03 	ldbu	r2,-16(fp)
    1da4:	e0fffb17 	ldw	r3,-20(fp)
    1da8:	10800784 	addi	r2,r2,30
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	1885883a 	add	r2,r3,r2
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800017 	ldw	r2,0(r2)
    1dc0:	10800104 	addi	r2,r2,4
    1dc4:	10c00017 	ldw	r3,0(r2)
    1dc8:	e0bffc03 	ldbu	r2,-16(fp)
    1dcc:	e13ffb17 	ldw	r4,-20(fp)
    1dd0:	10800784 	addi	r2,r2,30
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	10800017 	ldw	r2,0(r2)
    1de4:	e13ffd03 	ldbu	r4,-12(fp)
    1de8:	e17ffe03 	ldbu	r5,-8(fp)
    1dec:	e1bfff03 	ldbu	r6,-4(fp)
    1df0:	300f883a 	mov	r7,r6
    1df4:	280d883a 	mov	r6,r5
    1df8:	200b883a 	mov	r5,r4
    1dfc:	1009883a 	mov	r4,r2
    1e00:	183ee83a 	callr	r3
    1e04:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e08:	e0bffa43 	ldbu	r2,-23(fp)
    1e0c:	10803818 	cmpnei	r2,r2,224
    1e10:	10001f1e 	bne	r2,zero,1e90 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e14:	e0bffd03 	ldbu	r2,-12(fp)
    1e18:	1000071e 	bne	r2,zero,1e38 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e1c:	01800044 	movi	r6,1
    1e20:	01403a04 	movi	r5,232
    1e24:	e13ffb17 	ldw	r4,-20(fp)
    1e28:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e2c:	01001984 	movi	r4,102
    1e30:	00006840 	call	684 <_Z5delaym>
    1e34:	00002606 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e38:	e0bffd03 	ldbu	r2,-12(fp)
    1e3c:	e0fffb17 	ldw	r3,-20(fp)
    1e40:	10800784 	addi	r2,r2,30
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1885883a 	add	r2,r3,r2
    1e50:	10800017 	ldw	r2,0(r2)
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	10800504 	addi	r2,r2,20
    1e5c:	10c00017 	ldw	r3,0(r2)
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	10800784 	addi	r2,r2,30
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	2085883a 	add	r2,r4,r2
    1e78:	10800017 	ldw	r2,0(r2)
    1e7c:	e13ffe03 	ldbu	r4,-8(fp)
    1e80:	200b883a 	mov	r5,r4
    1e84:	1009883a 	mov	r4,r2
    1e88:	183ee83a 	callr	r3
    1e8c:	00001006 	br	1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1e90:	e0bffa43 	ldbu	r2,-23(fp)
    1e94:	10800358 	cmpnei	r2,r2,13
    1e98:	1000091e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1e9c:	e0bffa03 	ldbu	r2,-24(fp)
    1ea0:	108000e8 	cmpgeui	r2,r2,3
    1ea4:	1000061e 	bne	r2,zero,1ec0 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ea8:	01001904 	movi	r4,100
    1eac:	00006840 	call	684 <_Z5delaym>
                retries++;
    1eb0:	e0bffa03 	ldbu	r2,-24(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1ebc:	003fb806 	br	1da0 <__alt_data_end+0xfc001da0>
        } else if(rcode)
    1ec0:	e0bffa43 	ldbu	r2,-23(fp)
    1ec4:	10000226 	beq	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1ec8:	e0bffa43 	ldbu	r2,-23(fp)
    1ecc:	00004606 	br	1fe8 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1ed0:	e0bffc03 	ldbu	r2,-16(fp)
    1ed4:	e0fffb17 	ldw	r3,-20(fp)
    1ed8:	10800784 	addi	r2,r2,30
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	1085883a 	add	r2,r2,r2
    1ee4:	1885883a 	add	r2,r3,r2
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800017 	ldw	r2,0(r2)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffc03 	ldbu	r2,-16(fp)
    1ef8:	e13ffb17 	ldw	r4,-20(fp)
    1efc:	10800784 	addi	r2,r2,30
    1f00:	1085883a 	add	r2,r2,r2
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	2085883a 	add	r2,r4,r2
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	e13ffd03 	ldbu	r4,-12(fp)
    1f14:	e17ffe03 	ldbu	r5,-8(fp)
    1f18:	e1bfff03 	ldbu	r6,-4(fp)
    1f1c:	300f883a 	mov	r7,r6
    1f20:	280d883a 	mov	r6,r5
    1f24:	200b883a 	mov	r5,r4
    1f28:	1009883a 	mov	r4,r2
    1f2c:	183ee83a 	callr	r3
    1f30:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f34:	e0bffa43 	ldbu	r2,-23(fp)
    1f38:	10800358 	cmpnei	r2,r2,13
    1f3c:	1000091e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f40:	e0bffa03 	ldbu	r2,-24(fp)
    1f44:	108000e8 	cmpgeui	r2,r2,3
    1f48:	1000061e 	bne	r2,zero,1f64 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f4c:	01001904 	movi	r4,100
    1f50:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f54:	e0bffa03 	ldbu	r2,-24(fp)
    1f58:	10800044 	addi	r2,r2,1
    1f5c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1f60:	003f8f06 	br	1da0 <__alt_data_end+0xfc001da0>
        }
        if(rcode) {
    1f64:	e0bffa43 	ldbu	r2,-23(fp)
    1f68:	10001e26 	beq	r2,zero,1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1f6c:	e0bffd03 	ldbu	r2,-12(fp)
    1f70:	1000071e 	bne	r2,zero,1f90 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1f74:	01800044 	movi	r6,1
    1f78:	01403a04 	movi	r5,232
    1f7c:	e13ffb17 	ldw	r4,-20(fp)
    1f80:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1f84:	01001984 	movi	r4,102
    1f88:	00006840 	call	684 <_Z5delaym>
    1f8c:	00001506 	br	1fe4 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1f90:	e0bffd03 	ldbu	r2,-12(fp)
    1f94:	e0fffb17 	ldw	r3,-20(fp)
    1f98:	10800784 	addi	r2,r2,30
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	1885883a 	add	r2,r3,r2
    1fa8:	10800017 	ldw	r2,0(r2)
    1fac:	10800017 	ldw	r2,0(r2)
    1fb0:	10800504 	addi	r2,r2,20
    1fb4:	10c00017 	ldw	r3,0(r2)
    1fb8:	e0bffd03 	ldbu	r2,-12(fp)
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	10800784 	addi	r2,r2,30
    1fc4:	1085883a 	add	r2,r2,r2
    1fc8:	1085883a 	add	r2,r2,r2
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	10800017 	ldw	r2,0(r2)
    1fd4:	e13ffe03 	ldbu	r4,-8(fp)
    1fd8:	200b883a 	mov	r5,r4
    1fdc:	1009883a 	mov	r4,r2
    1fe0:	183ee83a 	callr	r3
                }
        }
        return rcode;
    1fe4:	e0bffa43 	ldbu	r2,-23(fp)
}
    1fe8:	e037883a 	mov	sp,fp
    1fec:	dfc00117 	ldw	ra,4(sp)
    1ff0:	df000017 	ldw	fp,0(sp)
    1ff4:	dec00204 	addi	sp,sp,8
    1ff8:	f800283a 	ret

00001ffc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    1ffc:	deffed04 	addi	sp,sp,-76
    2000:	dfc01215 	stw	ra,72(sp)
    2004:	df001115 	stw	fp,68(sp)
    2008:	df001104 	addi	fp,sp,68
    200c:	e13ffc15 	stw	r4,-16(fp)
    2010:	2809883a 	mov	r4,r5
    2014:	3007883a 	mov	r3,r6
    2018:	3805883a 	mov	r2,r7
    201c:	e13ffd05 	stb	r4,-12(fp)
    2020:	e0fffe05 	stb	r3,-8(fp)
    2024:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2028:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    202c:	e0bff684 	addi	r2,fp,-38
    2030:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2034:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2038:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    203c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    2040:	00800204 	movi	r2,8
    2044:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    2048:	e0fffb83 	ldbu	r3,-18(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    2058:	e0fffb83 	ldbu	r3,-18(fp)
    205c:	00bfff44 	movi	r2,-3
    2060:	1884703a 	and	r2,r3,r2
    2064:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    2068:	e0bffb83 	ldbu	r2,-18(fp)
    206c:	108000cc 	andi	r2,r2,3
    2070:	10800f14 	ori	r2,r2,60
    2074:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    2078:	e13ffc17 	ldw	r4,-16(fp)
    207c:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    2080:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    2084:	e0bff417 	ldw	r2,-48(fp)
    2088:	10800017 	ldw	r2,0(r2)
    208c:	10800017 	ldw	r2,0(r2)
    2090:	000b883a 	mov	r5,zero
    2094:	e13ff417 	ldw	r4,-48(fp)
    2098:	103ee83a 	callr	r2
    209c:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20a0:	e0bff217 	ldw	r2,-56(fp)
    20a4:	1000021e 	bne	r2,zero,20b0 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    20a8:	00bff584 	movi	r2,-42
    20ac:	00019206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    20b0:	e0bff217 	ldw	r2,-56(fp)
    20b4:	10c00003 	ldbu	r3,0(r2)
    20b8:	11000043 	ldbu	r4,1(r2)
    20bc:	2008923a 	slli	r4,r4,8
    20c0:	20c6b03a 	or	r3,r4,r3
    20c4:	11000083 	ldbu	r4,2(r2)
    20c8:	2008943a 	slli	r4,r4,16
    20cc:	20c6b03a 	or	r3,r4,r3
    20d0:	108000c3 	ldbu	r2,3(r2)
    20d4:	1004963a 	slli	r2,r2,24
    20d8:	10c4b03a 	or	r2,r2,r3
    20dc:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    20e0:	e0bff217 	ldw	r2,-56(fp)
    20e4:	e0fffb04 	addi	r3,fp,-20
    20e8:	19803fcc 	andi	r6,r3,255
    20ec:	11000003 	ldbu	r4,0(r2)
    20f0:	2008703a 	and	r4,r4,zero
    20f4:	200b883a 	mov	r5,r4
    20f8:	3009883a 	mov	r4,r6
    20fc:	2908b03a 	or	r4,r5,r4
    2100:	11000005 	stb	r4,0(r2)
    2104:	1808d23a 	srli	r4,r3,8
    2108:	21803fcc 	andi	r6,r4,255
    210c:	11000043 	ldbu	r4,1(r2)
    2110:	2008703a 	and	r4,r4,zero
    2114:	200b883a 	mov	r5,r4
    2118:	3009883a 	mov	r4,r6
    211c:	2908b03a 	or	r4,r5,r4
    2120:	11000045 	stb	r4,1(r2)
    2124:	1808d43a 	srli	r4,r3,16
    2128:	21803fcc 	andi	r6,r4,255
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008703a 	and	r4,r4,zero
    2134:	200b883a 	mov	r5,r4
    2138:	3009883a 	mov	r4,r6
    213c:	2908b03a 	or	r4,r5,r4
    2140:	11000085 	stb	r4,2(r2)
    2144:	180ad63a 	srli	r5,r3,24
    2148:	10c000c3 	ldbu	r3,3(r2)
    214c:	1806703a 	and	r3,r3,zero
    2150:	1809883a 	mov	r4,r3
    2154:	2807883a 	mov	r3,r5
    2158:	20c6b03a 	or	r3,r4,r3
    215c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    2160:	e0bff217 	ldw	r2,-56(fp)
    2164:	e0ffff03 	ldbu	r3,-4(fp)
    2168:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    216c:	00800484 	movi	r2,18
    2170:	10ffffcc 	andi	r3,r2,65535
    2174:	e0bff684 	addi	r2,fp,-38
    2178:	d8800015 	stw	r2,0(sp)
    217c:	180f883a 	mov	r7,r3
    2180:	000d883a 	mov	r6,zero
    2184:	000b883a 	mov	r5,zero
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    2190:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    2194:	e0bff217 	ldw	r2,-56(fp)
    2198:	e0fff317 	ldw	r3,-52(fp)
    219c:	19403fcc 	andi	r5,r3,255
    21a0:	10c00003 	ldbu	r3,0(r2)
    21a4:	1806703a 	and	r3,r3,zero
    21a8:	1809883a 	mov	r4,r3
    21ac:	2807883a 	mov	r3,r5
    21b0:	20c6b03a 	or	r3,r4,r3
    21b4:	10c00005 	stb	r3,0(r2)
    21b8:	e0fff317 	ldw	r3,-52(fp)
    21bc:	1806d23a 	srli	r3,r3,8
    21c0:	19403fcc 	andi	r5,r3,255
    21c4:	10c00043 	ldbu	r3,1(r2)
    21c8:	1806703a 	and	r3,r3,zero
    21cc:	1809883a 	mov	r4,r3
    21d0:	2807883a 	mov	r3,r5
    21d4:	20c6b03a 	or	r3,r4,r3
    21d8:	10c00045 	stb	r3,1(r2)
    21dc:	e0fff317 	ldw	r3,-52(fp)
    21e0:	1806d43a 	srli	r3,r3,16
    21e4:	19403fcc 	andi	r5,r3,255
    21e8:	10c00083 	ldbu	r3,2(r2)
    21ec:	1806703a 	and	r3,r3,zero
    21f0:	1809883a 	mov	r4,r3
    21f4:	2807883a 	mov	r3,r5
    21f8:	20c6b03a 	or	r3,r4,r3
    21fc:	10c00085 	stb	r3,2(r2)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	180ad63a 	srli	r5,r3,24
    2208:	10c000c3 	ldbu	r3,3(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2220:	e0bff043 	ldbu	r2,-63(fp)
    2224:	10000226 	beq	r2,zero,2230 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
    2228:	e0bff043 	ldbu	r2,-63(fp)
    222c:	00013206 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    2230:	e0bff117 	ldw	r2,-60(fp)
    2234:	10c00203 	ldbu	r3,8(r2)
    2238:	10800243 	ldbu	r2,9(r2)
    223c:	1004923a 	slli	r2,r2,8
    2240:	10c4b03a 	or	r2,r2,r3
    2244:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    2248:	e0bff117 	ldw	r2,-60(fp)
    224c:	10c00283 	ldbu	r3,10(r2)
    2250:	108002c3 	ldbu	r2,11(r2)
    2254:	1004923a 	slli	r2,r2,8
    2258:	10c4b03a 	or	r2,r2,r3
    225c:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    2260:	e0bff117 	ldw	r2,-60(fp)
    2264:	10800103 	ldbu	r2,4(r2)
    2268:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    226c:	e0bff117 	ldw	r2,-60(fp)
    2270:	10800143 	ldbu	r2,5(r2)
    2274:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2278:	e03ff005 	stb	zero,-64(fp)
    227c:	e0bff003 	ldbu	r2,-64(fp)
    2280:	10800428 	cmpgeui	r2,r2,16
    2284:	1000821e 	bne	r2,zero,2490 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue;// no driver
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	10800784 	addi	r2,r2,30
    2294:	1085883a 	add	r2,r2,r2
    2298:	1085883a 	add	r2,r2,r2
    229c:	1885883a 	add	r2,r3,r2
    22a0:	10800017 	ldw	r2,0(r2)
    22a4:	10007226 	beq	r2,zero,2470 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    22a8:	e0bff003 	ldbu	r2,-64(fp)
    22ac:	e0fffc17 	ldw	r3,-16(fp)
    22b0:	10800784 	addi	r2,r2,30
    22b4:	1085883a 	add	r2,r2,r2
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	1885883a 	add	r2,r3,r2
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	10800404 	addi	r2,r2,16
    22cc:	10c00017 	ldw	r3,0(r2)
    22d0:	e0bff003 	ldbu	r2,-64(fp)
    22d4:	e13ffc17 	ldw	r4,-16(fp)
    22d8:	10800784 	addi	r2,r2,30
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	2085883a 	add	r2,r4,r2
    22e8:	10800017 	ldw	r2,0(r2)
    22ec:	1009883a 	mov	r4,r2
    22f0:	183ee83a 	callr	r3
    22f4:	10803fcc 	andi	r2,r2,255
    22f8:	1004c03a 	cmpne	r2,r2,zero
    22fc:	10803fcc 	andi	r2,r2,255
    2300:	10005d1e 	bne	r2,zero,2478 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    2304:	e0bff003 	ldbu	r2,-64(fp)
    2308:	e0fffc17 	ldw	r3,-16(fp)
    230c:	10800784 	addi	r2,r2,30
    2310:	1085883a 	add	r2,r2,r2
    2314:	1085883a 	add	r2,r2,r2
    2318:	1885883a 	add	r2,r3,r2
    231c:	10800017 	ldw	r2,0(r2)
    2320:	10800017 	ldw	r2,0(r2)
    2324:	10800804 	addi	r2,r2,32
    2328:	10c00017 	ldw	r3,0(r2)
    232c:	e0bff003 	ldbu	r2,-64(fp)
    2330:	e13ffc17 	ldw	r4,-16(fp)
    2334:	10800784 	addi	r2,r2,30
    2338:	1085883a 	add	r2,r2,r2
    233c:	1085883a 	add	r2,r2,r2
    2340:	2085883a 	add	r2,r4,r2
    2344:	10800017 	ldw	r2,0(r2)
    2348:	e13ff643 	ldbu	r4,-39(fp)
    234c:	200b883a 	mov	r5,r4
    2350:	1009883a 	mov	r4,r2
    2354:	183ee83a 	callr	r3
    2358:	10803fcc 	andi	r2,r2,255
    235c:	10003226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2360:	e0bff003 	ldbu	r2,-64(fp)
    2364:	e0fffc17 	ldw	r3,-16(fp)
    2368:	10800784 	addi	r2,r2,30
    236c:	1085883a 	add	r2,r2,r2
    2370:	1085883a 	add	r2,r2,r2
    2374:	1885883a 	add	r2,r3,r2
    2378:	10800017 	ldw	r2,0(r2)
    237c:	10800017 	ldw	r2,0(r2)
    2380:	10800604 	addi	r2,r2,24
    2384:	10c00017 	ldw	r3,0(r2)
    2388:	e0bff003 	ldbu	r2,-64(fp)
    238c:	e13ffc17 	ldw	r4,-16(fp)
    2390:	10800784 	addi	r2,r2,30
    2394:	1085883a 	add	r2,r2,r2
    2398:	1085883a 	add	r2,r2,r2
    239c:	2085883a 	add	r2,r4,r2
    23a0:	10800017 	ldw	r2,0(r2)
    23a4:	e13ff50b 	ldhu	r4,-44(fp)
    23a8:	e17ff58b 	ldhu	r5,-42(fp)
    23ac:	280d883a 	mov	r6,r5
    23b0:	200b883a 	mov	r5,r4
    23b4:	1009883a 	mov	r4,r2
    23b8:	183ee83a 	callr	r3
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1000171e 	bne	r2,zero,2420 <_ZN3USB11ConfiguringEhhb+0x424>
    23c4:	e0bff003 	ldbu	r2,-64(fp)
    23c8:	e0fffc17 	ldw	r3,-16(fp)
    23cc:	10800784 	addi	r2,r2,30
    23d0:	1085883a 	add	r2,r2,r2
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1885883a 	add	r2,r3,r2
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800704 	addi	r2,r2,28
    23e8:	10c00017 	ldw	r3,0(r2)
    23ec:	e0bff003 	ldbu	r2,-64(fp)
    23f0:	e13ffc17 	ldw	r4,-16(fp)
    23f4:	10800784 	addi	r2,r2,30
    23f8:	1085883a 	add	r2,r2,r2
    23fc:	1085883a 	add	r2,r2,r2
    2400:	2085883a 	add	r2,r4,r2
    2404:	10800017 	ldw	r2,0(r2)
    2408:	e13ff603 	ldbu	r4,-40(fp)
    240c:	200b883a 	mov	r5,r4
    2410:	1009883a 	mov	r4,r2
    2414:	183ee83a 	callr	r3
    2418:	10803fcc 	andi	r2,r2,255
    241c:	10000226 	beq	r2,zero,2428 <_ZN3USB11ConfiguringEhhb+0x42c>
    2420:	00800044 	movi	r2,1
    2424:	00000106 	br	242c <_ZN3USB11ConfiguringEhhb+0x430>
    2428:	0005883a 	mov	r2,zero
    242c:	10803fcc 	andi	r2,r2,255
    2430:	10001226 	beq	r2,zero,247c <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2434:	e0fff003 	ldbu	r3,-64(fp)
    2438:	e13ffd03 	ldbu	r4,-12(fp)
    243c:	e17ffe03 	ldbu	r5,-8(fp)
    2440:	e0bfff03 	ldbu	r2,-4(fp)
    2444:	d8800015 	stw	r2,0(sp)
    2448:	280f883a 	mov	r7,r5
    244c:	200d883a 	mov	r6,r4
    2450:	180b883a 	mov	r5,r3
    2454:	e13ffc17 	ldw	r4,-16(fp)
    2458:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    245c:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    2460:	e0bff043 	ldbu	r2,-63(fp)
    2464:	10803460 	cmpeqi	r2,r2,209
    2468:	10000826 	beq	r2,zero,248c <_ZN3USB11ConfiguringEhhb+0x490>
    246c:	00000306 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;// no driver
    2470:	0001883a 	nop
    2474:	00000106 	br	247c <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2478:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    247c:	e0bff003 	ldbu	r2,-64(fp)
    2480:	10800044 	addi	r2,r2,1
    2484:	e0bff005 	stb	r2,-64(fp)
    2488:	003f7c06 	br	227c <__alt_data_end+0xfc00227c>
                if(!devConfig[devConfigIndex]) continue;// no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
    248c:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
    2490:	e0bff003 	ldbu	r2,-64(fp)
    2494:	10800428 	cmpgeui	r2,r2,16
    2498:	1000021e 	bne	r2,zero,24a4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
    249c:	e0bff043 	ldbu	r2,-63(fp)
    24a0:	00009506 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    24a4:	e03ff005 	stb	zero,-64(fp)
    24a8:	e0bff003 	ldbu	r2,-64(fp)
    24ac:	10800428 	cmpgeui	r2,r2,16
    24b0:	1000871e 	bne	r2,zero,26d0 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
    24b4:	e0bff003 	ldbu	r2,-64(fp)
    24b8:	e0fffc17 	ldw	r3,-16(fp)
    24bc:	10800784 	addi	r2,r2,30
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	1085883a 	add	r2,r2,r2
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	10007626 	beq	r2,zero,26ac <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    24d4:	e0bff003 	ldbu	r2,-64(fp)
    24d8:	e0fffc17 	ldw	r3,-16(fp)
    24dc:	10800784 	addi	r2,r2,30
    24e0:	1085883a 	add	r2,r2,r2
    24e4:	1085883a 	add	r2,r2,r2
    24e8:	1885883a 	add	r2,r3,r2
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	10800017 	ldw	r2,0(r2)
    24f4:	10800404 	addi	r2,r2,16
    24f8:	10c00017 	ldw	r3,0(r2)
    24fc:	e0bff003 	ldbu	r2,-64(fp)
    2500:	e13ffc17 	ldw	r4,-16(fp)
    2504:	10800784 	addi	r2,r2,30
    2508:	1085883a 	add	r2,r2,r2
    250c:	1085883a 	add	r2,r2,r2
    2510:	2085883a 	add	r2,r4,r2
    2514:	10800017 	ldw	r2,0(r2)
    2518:	1009883a 	mov	r4,r2
    251c:	183ee83a 	callr	r3
    2520:	10803fcc 	andi	r2,r2,255
    2524:	1004c03a 	cmpne	r2,r2,zero
    2528:	10803fcc 	andi	r2,r2,255
    252c:	1000611e 	bne	r2,zero,26b4 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2530:	e0bff003 	ldbu	r2,-64(fp)
    2534:	e0fffc17 	ldw	r3,-16(fp)
    2538:	10800784 	addi	r2,r2,30
    253c:	1085883a 	add	r2,r2,r2
    2540:	1085883a 	add	r2,r2,r2
    2544:	1885883a 	add	r2,r3,r2
    2548:	10800017 	ldw	r2,0(r2)
    254c:	10800017 	ldw	r2,0(r2)
    2550:	10800804 	addi	r2,r2,32
    2554:	10c00017 	ldw	r3,0(r2)
    2558:	e0bff003 	ldbu	r2,-64(fp)
    255c:	e13ffc17 	ldw	r4,-16(fp)
    2560:	10800784 	addi	r2,r2,30
    2564:	1085883a 	add	r2,r2,r2
    2568:	1085883a 	add	r2,r2,r2
    256c:	2085883a 	add	r2,r4,r2
    2570:	10800017 	ldw	r2,0(r2)
    2574:	e13ff643 	ldbu	r4,-39(fp)
    2578:	200b883a 	mov	r5,r4
    257c:	1009883a 	mov	r4,r2
    2580:	183ee83a 	callr	r3
    2584:	10803fcc 	andi	r2,r2,255
    2588:	10003226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    258c:	e0bff003 	ldbu	r2,-64(fp)
    2590:	e0fffc17 	ldw	r3,-16(fp)
    2594:	10800784 	addi	r2,r2,30
    2598:	1085883a 	add	r2,r2,r2
    259c:	1085883a 	add	r2,r2,r2
    25a0:	1885883a 	add	r2,r3,r2
    25a4:	10800017 	ldw	r2,0(r2)
    25a8:	10800017 	ldw	r2,0(r2)
    25ac:	10800604 	addi	r2,r2,24
    25b0:	10c00017 	ldw	r3,0(r2)
    25b4:	e0bff003 	ldbu	r2,-64(fp)
    25b8:	e13ffc17 	ldw	r4,-16(fp)
    25bc:	10800784 	addi	r2,r2,30
    25c0:	1085883a 	add	r2,r2,r2
    25c4:	1085883a 	add	r2,r2,r2
    25c8:	2085883a 	add	r2,r4,r2
    25cc:	10800017 	ldw	r2,0(r2)
    25d0:	e13ff50b 	ldhu	r4,-44(fp)
    25d4:	e17ff58b 	ldhu	r5,-42(fp)
    25d8:	280d883a 	mov	r6,r5
    25dc:	200b883a 	mov	r5,r4
    25e0:	1009883a 	mov	r4,r2
    25e4:	183ee83a 	callr	r3
    25e8:	10803fcc 	andi	r2,r2,255
    25ec:	1000171e 	bne	r2,zero,264c <_ZN3USB11ConfiguringEhhb+0x650>
    25f0:	e0bff003 	ldbu	r2,-64(fp)
    25f4:	e0fffc17 	ldw	r3,-16(fp)
    25f8:	10800784 	addi	r2,r2,30
    25fc:	1085883a 	add	r2,r2,r2
    2600:	1085883a 	add	r2,r2,r2
    2604:	1885883a 	add	r2,r3,r2
    2608:	10800017 	ldw	r2,0(r2)
    260c:	10800017 	ldw	r2,0(r2)
    2610:	10800704 	addi	r2,r2,28
    2614:	10c00017 	ldw	r3,0(r2)
    2618:	e0bff003 	ldbu	r2,-64(fp)
    261c:	e13ffc17 	ldw	r4,-16(fp)
    2620:	10800784 	addi	r2,r2,30
    2624:	1085883a 	add	r2,r2,r2
    2628:	1085883a 	add	r2,r2,r2
    262c:	2085883a 	add	r2,r4,r2
    2630:	10800017 	ldw	r2,0(r2)
    2634:	e13ff603 	ldbu	r4,-40(fp)
    2638:	200b883a 	mov	r5,r4
    263c:	1009883a 	mov	r4,r2
    2640:	183ee83a 	callr	r3
    2644:	10803fcc 	andi	r2,r2,255
    2648:	10000226 	beq	r2,zero,2654 <_ZN3USB11ConfiguringEhhb+0x658>
    264c:	00800044 	movi	r2,1
    2650:	00000106 	br	2658 <_ZN3USB11ConfiguringEhhb+0x65c>
    2654:	0005883a 	mov	r2,zero
    2658:	10803fcc 	andi	r2,r2,255
    265c:	1000171e 	bne	r2,zero,26bc <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2660:	e0fff003 	ldbu	r3,-64(fp)
    2664:	e13ffd03 	ldbu	r4,-12(fp)
    2668:	e17ffe03 	ldbu	r5,-8(fp)
    266c:	e0bfff03 	ldbu	r2,-4(fp)
    2670:	d8800015 	stw	r2,0(sp)
    2674:	280f883a 	mov	r7,r5
    2678:	200d883a 	mov	r6,r4
    267c:	180b883a 	mov	r5,r3
    2680:	e13ffc17 	ldw	r4,-16(fp)
    2684:	0001d6c0 	call	1d6c <_ZN3USB13AttemptConfigEhhhb>
    2688:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    268c:	e0bff043 	ldbu	r2,-63(fp)
    2690:	10803460 	cmpeqi	r2,r2,209
    2694:	10000a1e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
    2698:	e0bff043 	ldbu	r2,-63(fp)
    269c:	10803660 	cmpeqi	r2,r2,217
    26a0:	1000071e 	bne	r2,zero,26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
    26a4:	e0bff043 	ldbu	r2,-63(fp)
    26a8:	00001306 	br	26f8 <_ZN3USB11ConfiguringEhhb+0x6fc>
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    26ac:	0001883a 	nop
    26b0:	00000306 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    26b4:	0001883a 	nop
    26b8:	00000106 	br	26c0 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    26bc:	0001883a 	nop
        if(devConfigIndex < USB_NUMDEVICES) {
                return rcode;
        }

        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    26c0:	e0bff003 	ldbu	r2,-64(fp)
    26c4:	10800044 	addi	r2,r2,1
    26c8:	e0bff005 	stb	r2,-64(fp)
    26cc:	003f7606 	br	24a8 <__alt_data_end+0xfc0024a8>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    26d0:	e0bffd03 	ldbu	r2,-12(fp)
    26d4:	e0fffe03 	ldbu	r3,-8(fp)
    26d8:	e13fff03 	ldbu	r4,-4(fp)
    26dc:	200f883a 	mov	r7,r4
    26e0:	180d883a 	mov	r6,r3
    26e4:	100b883a 	mov	r5,r2
    26e8:	e13ffc17 	ldw	r4,-16(fp)
    26ec:	0001c0c0 	call	1c0c <_ZN3USB17DefaultAddressingEhhb>
    26f0:	e0bff045 	stb	r2,-63(fp)

        return rcode;
    26f4:	e0bff043 	ldbu	r2,-63(fp)
}
    26f8:	e037883a 	mov	sp,fp
    26fc:	dfc00117 	ldw	ra,4(sp)
    2700:	df000017 	ldw	fp,0(sp)
    2704:	dec00204 	addi	sp,sp,8
    2708:	f800283a 	ret

0000270c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    270c:	defffb04 	addi	sp,sp,-20
    2710:	dfc00415 	stw	ra,16(sp)
    2714:	df000315 	stw	fp,12(sp)
    2718:	df000304 	addi	fp,sp,12
    271c:	e13ffe15 	stw	r4,-8(fp)
    2720:	2805883a 	mov	r2,r5
    2724:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2728:	e0bfff03 	ldbu	r2,-4(fp)
    272c:	1000021e 	bne	r2,zero,2738 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    2730:	0005883a 	mov	r2,zero
    2734:	00003e06 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2738:	e03ffd05 	stb	zero,-12(fp)
    273c:	e0bffd03 	ldbu	r2,-12(fp)
    2740:	10800428 	cmpgeui	r2,r2,16
    2744:	1000391e 	bne	r2,zero,282c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2748:	e0bffd03 	ldbu	r2,-12(fp)
    274c:	e0fffe17 	ldw	r3,-8(fp)
    2750:	10800784 	addi	r2,r2,30
    2754:	1085883a 	add	r2,r2,r2
    2758:	1085883a 	add	r2,r2,r2
    275c:	1885883a 	add	r2,r3,r2
    2760:	10800017 	ldw	r2,0(r2)
    2764:	10002c26 	beq	r2,zero,2818 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2768:	e0bffd03 	ldbu	r2,-12(fp)
    276c:	e0fffe17 	ldw	r3,-8(fp)
    2770:	10800784 	addi	r2,r2,30
    2774:	1085883a 	add	r2,r2,r2
    2778:	1085883a 	add	r2,r2,r2
    277c:	1885883a 	add	r2,r3,r2
    2780:	10800017 	ldw	r2,0(r2)
    2784:	10800017 	ldw	r2,0(r2)
    2788:	10800404 	addi	r2,r2,16
    278c:	10c00017 	ldw	r3,0(r2)
    2790:	e0bffd03 	ldbu	r2,-12(fp)
    2794:	e13ffe17 	ldw	r4,-8(fp)
    2798:	10800784 	addi	r2,r2,30
    279c:	1085883a 	add	r2,r2,r2
    27a0:	1085883a 	add	r2,r2,r2
    27a4:	2085883a 	add	r2,r4,r2
    27a8:	10800017 	ldw	r2,0(r2)
    27ac:	1009883a 	mov	r4,r2
    27b0:	183ee83a 	callr	r3
    27b4:	10c03fcc 	andi	r3,r2,255
    27b8:	e0bfff03 	ldbu	r2,-4(fp)
    27bc:	1885003a 	cmpeq	r2,r3,r2
    27c0:	10803fcc 	andi	r2,r2,255
    27c4:	10001526 	beq	r2,zero,281c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    27c8:	e0bffd03 	ldbu	r2,-12(fp)
    27cc:	e0fffe17 	ldw	r3,-8(fp)
    27d0:	10800784 	addi	r2,r2,30
    27d4:	1085883a 	add	r2,r2,r2
    27d8:	1085883a 	add	r2,r2,r2
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	10800017 	ldw	r2,0(r2)
    27e4:	10800017 	ldw	r2,0(r2)
    27e8:	10800204 	addi	r2,r2,8
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	e0bffd03 	ldbu	r2,-12(fp)
    27f4:	e13ffe17 	ldw	r4,-8(fp)
    27f8:	10800784 	addi	r2,r2,30
    27fc:	1085883a 	add	r2,r2,r2
    2800:	1085883a 	add	r2,r2,r2
    2804:	2085883a 	add	r2,r4,r2
    2808:	10800017 	ldw	r2,0(r2)
    280c:	1009883a 	mov	r4,r2
    2810:	183ee83a 	callr	r3
    2814:	00000606 	br	2830 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    2818:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    281c:	e0bffd03 	ldbu	r2,-12(fp)
    2820:	10800044 	addi	r2,r2,1
    2824:	e0bffd05 	stb	r2,-12(fp)
    2828:	003fc406 	br	273c <__alt_data_end+0xfc00273c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    282c:	0005883a 	mov	r2,zero
        printf("END\n");
}
    2830:	e037883a 	mov	sp,fp
    2834:	dfc00117 	ldw	ra,4(sp)
    2838:	df000017 	ldw	fp,0(sp)
    283c:	dec00204 	addi	sp,sp,8
    2840:	f800283a 	ret

00002844 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2844:	defff204 	addi	sp,sp,-56
    2848:	dfc00d15 	stw	ra,52(sp)
    284c:	df000c15 	stw	fp,48(sp)
    2850:	df000c04 	addi	fp,sp,48
    2854:	e13ffc15 	stw	r4,-16(fp)
    2858:	2809883a 	mov	r4,r5
    285c:	3007883a 	mov	r3,r6
    2860:	3805883a 	mov	r2,r7
    2864:	e13ffd05 	stb	r4,-12(fp)
    2868:	e0fffe05 	stb	r3,-8(fp)
    286c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    2870:	e17ffd03 	ldbu	r5,-12(fp)
    2874:	e1bffe03 	ldbu	r6,-8(fp)
    2878:	e0bfff0b 	ldhu	r2,-4(fp)
    287c:	e0ffff0b 	ldhu	r3,-4(fp)
    2880:	d8000715 	stw	zero,28(sp)
    2884:	e1000217 	ldw	r4,8(fp)
    2888:	d9000615 	stw	r4,24(sp)
    288c:	d8c00515 	stw	r3,20(sp)
    2890:	d8800415 	stw	r2,16(sp)
    2894:	d8000315 	stw	zero,12(sp)
    2898:	00800044 	movi	r2,1
    289c:	d8800215 	stw	r2,8(sp)
    28a0:	d8000115 	stw	zero,4(sp)
    28a4:	00800184 	movi	r2,6
    28a8:	d8800015 	stw	r2,0(sp)
    28ac:	01c02004 	movi	r7,128
    28b0:	e13ffc17 	ldw	r4,-16(fp)
    28b4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    28b8:	e037883a 	mov	sp,fp
    28bc:	dfc00117 	ldw	ra,4(sp)
    28c0:	df000017 	ldw	fp,0(sp)
    28c4:	dec00204 	addi	sp,sp,8
    28c8:	f800283a 	ret

000028cc <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    28cc:	defff104 	addi	sp,sp,-60
    28d0:	dfc00e15 	stw	ra,56(sp)
    28d4:	df000d15 	stw	fp,52(sp)
    28d8:	df000d04 	addi	fp,sp,52
    28dc:	e13ffb15 	stw	r4,-20(fp)
    28e0:	3009883a 	mov	r4,r6
    28e4:	3807883a 	mov	r3,r7
    28e8:	e0800217 	ldw	r2,8(fp)
    28ec:	e17ffc05 	stb	r5,-16(fp)
    28f0:	e13ffd05 	stb	r4,-12(fp)
    28f4:	e0fffe0d 	sth	r3,-8(fp)
    28f8:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    28fc:	e23ffc03 	ldbu	r8,-16(fp)
    2900:	e1bffd03 	ldbu	r6,-12(fp)
    2904:	e0bfff03 	ldbu	r2,-4(fp)
    2908:	e0fffe0b 	ldhu	r3,-8(fp)
    290c:	e13ffe0b 	ldhu	r4,-8(fp)
    2910:	d8000715 	stw	zero,28(sp)
    2914:	e1400317 	ldw	r5,12(fp)
    2918:	d9400615 	stw	r5,24(sp)
    291c:	d9000515 	stw	r4,20(sp)
    2920:	d8c00415 	stw	r3,16(sp)
    2924:	d8000315 	stw	zero,12(sp)
    2928:	00c00084 	movi	r3,2
    292c:	d8c00215 	stw	r3,8(sp)
    2930:	d8800115 	stw	r2,4(sp)
    2934:	00800184 	movi	r2,6
    2938:	d8800015 	stw	r2,0(sp)
    293c:	01c02004 	movi	r7,128
    2940:	400b883a 	mov	r5,r8
    2944:	e13ffb17 	ldw	r4,-20(fp)
    2948:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    294c:	e037883a 	mov	sp,fp
    2950:	dfc00117 	ldw	ra,4(sp)
    2954:	df000017 	ldw	fp,0(sp)
    2958:	dec00204 	addi	sp,sp,8
    295c:	f800283a 	ret

00002960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    2960:	deffdf04 	addi	sp,sp,-132
    2964:	dfc02015 	stw	ra,128(sp)
    2968:	df001f15 	stw	fp,124(sp)
    296c:	df001f04 	addi	fp,sp,124
    2970:	e13ffc15 	stw	r4,-16(fp)
    2974:	2809883a 	mov	r4,r5
    2978:	3007883a 	mov	r3,r6
    297c:	3805883a 	mov	r2,r7
    2980:	e13ffd05 	stb	r4,-12(fp)
    2984:	e0fffe05 	stb	r3,-8(fp)
    2988:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    298c:	00801004 	movi	r2,64
    2990:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2994:	e0bfec04 	addi	r2,fp,-80
    2998:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    299c:	e13ffd03 	ldbu	r4,-12(fp)
    29a0:	e17ffe03 	ldbu	r5,-8(fp)
    29a4:	e0bfff03 	ldbu	r2,-4(fp)
    29a8:	e0ffec04 	addi	r3,fp,-80
    29ac:	d8c00115 	stw	r3,4(sp)
    29b0:	d8800015 	stw	r2,0(sp)
    29b4:	01c00244 	movi	r7,9
    29b8:	280d883a 	mov	r6,r5
    29bc:	200b883a 	mov	r5,r4
    29c0:	e13ffc17 	ldw	r4,-16(fp)
    29c4:	00028cc0 	call	28cc <_ZN3USB12getConfDescrEhhthPh>
    29c8:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    29cc:	e0bfeb03 	ldbu	r2,-84(fp)
    29d0:	10000226 	beq	r2,zero,29dc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    29d4:	e0bfeb03 	ldbu	r2,-84(fp)
    29d8:	00001a06 	br	2a44 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    29dc:	e0bfea17 	ldw	r2,-88(fp)
    29e0:	10c00083 	ldbu	r3,2(r2)
    29e4:	108000c3 	ldbu	r2,3(r2)
    29e8:	1004923a 	slli	r2,r2,8
    29ec:	10c4b03a 	or	r2,r2,r3
    29f0:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    29f4:	e17ffd03 	ldbu	r5,-12(fp)
    29f8:	e1bffe03 	ldbu	r6,-8(fp)
    29fc:	e0bfff03 	ldbu	r2,-4(fp)
    2a00:	e0ffeb8b 	ldhu	r3,-82(fp)
    2a04:	e1000217 	ldw	r4,8(fp)
    2a08:	d9000715 	stw	r4,28(sp)
    2a0c:	e13fec04 	addi	r4,fp,-80
    2a10:	d9000615 	stw	r4,24(sp)
    2a14:	01001004 	movi	r4,64
    2a18:	d9000515 	stw	r4,20(sp)
    2a1c:	d8c00415 	stw	r3,16(sp)
    2a20:	d8000315 	stw	zero,12(sp)
    2a24:	00c00084 	movi	r3,2
    2a28:	d8c00215 	stw	r3,8(sp)
    2a2c:	d8800115 	stw	r2,4(sp)
    2a30:	00800184 	movi	r2,6
    2a34:	d8800015 	stw	r2,0(sp)
    2a38:	01c02004 	movi	r7,128
    2a3c:	e13ffc17 	ldw	r4,-16(fp)
    2a40:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2a44:	e037883a 	mov	sp,fp
    2a48:	dfc00117 	ldw	ra,4(sp)
    2a4c:	df000017 	ldw	fp,0(sp)
    2a50:	dec00204 	addi	sp,sp,8
    2a54:	f800283a 	ret

00002a58 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2a58:	defff004 	addi	sp,sp,-64
    2a5c:	dfc00f15 	stw	ra,60(sp)
    2a60:	df000e15 	stw	fp,56(sp)
    2a64:	df000e04 	addi	fp,sp,56
    2a68:	e13ffa15 	stw	r4,-24(fp)
    2a6c:	2811883a 	mov	r8,r5
    2a70:	300b883a 	mov	r5,r6
    2a74:	3809883a 	mov	r4,r7
    2a78:	e0c00217 	ldw	r3,8(fp)
    2a7c:	e0800317 	ldw	r2,12(fp)
    2a80:	e23ffb05 	stb	r8,-20(fp)
    2a84:	e17ffc05 	stb	r5,-16(fp)
    2a88:	e13ffd0d 	sth	r4,-12(fp)
    2a8c:	e0fffe05 	stb	r3,-8(fp)
    2a90:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2a94:	e23ffb03 	ldbu	r8,-20(fp)
    2a98:	e27ffc03 	ldbu	r9,-16(fp)
    2a9c:	e0bffe03 	ldbu	r2,-8(fp)
    2aa0:	e0ffff0b 	ldhu	r3,-4(fp)
    2aa4:	e13ffd0b 	ldhu	r4,-12(fp)
    2aa8:	e17ffd0b 	ldhu	r5,-12(fp)
    2aac:	d8000715 	stw	zero,28(sp)
    2ab0:	e1800417 	ldw	r6,16(fp)
    2ab4:	d9800615 	stw	r6,24(sp)
    2ab8:	d9400515 	stw	r5,20(sp)
    2abc:	d9000415 	stw	r4,16(sp)
    2ac0:	d8c00315 	stw	r3,12(sp)
    2ac4:	00c000c4 	movi	r3,3
    2ac8:	d8c00215 	stw	r3,8(sp)
    2acc:	d8800115 	stw	r2,4(sp)
    2ad0:	00800184 	movi	r2,6
    2ad4:	d8800015 	stw	r2,0(sp)
    2ad8:	01c02004 	movi	r7,128
    2adc:	480d883a 	mov	r6,r9
    2ae0:	400b883a 	mov	r5,r8
    2ae4:	e13ffa17 	ldw	r4,-24(fp)
    2ae8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2aec:	e037883a 	mov	sp,fp
    2af0:	dfc00117 	ldw	ra,4(sp)
    2af4:	df000017 	ldw	fp,0(sp)
    2af8:	dec00204 	addi	sp,sp,8
    2afc:	f800283a 	ret

00002b00 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    2b00:	defff104 	addi	sp,sp,-60
    2b04:	dfc00e15 	stw	ra,56(sp)
    2b08:	df000d15 	stw	fp,52(sp)
    2b0c:	df000d04 	addi	fp,sp,52
    2b10:	e13ffc15 	stw	r4,-16(fp)
    2b14:	2809883a 	mov	r4,r5
    2b18:	3007883a 	mov	r3,r6
    2b1c:	3805883a 	mov	r2,r7
    2b20:	e13ffd05 	stb	r4,-12(fp)
    2b24:	e0fffe05 	stb	r3,-8(fp)
    2b28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2b2c:	e0fffd03 	ldbu	r3,-12(fp)
    2b30:	e13ffe03 	ldbu	r4,-8(fp)
    2b34:	e0bfff03 	ldbu	r2,-4(fp)
    2b38:	d8000715 	stw	zero,28(sp)
    2b3c:	d8000615 	stw	zero,24(sp)
    2b40:	d8000515 	stw	zero,20(sp)
    2b44:	d8000415 	stw	zero,16(sp)
    2b48:	d8000315 	stw	zero,12(sp)
    2b4c:	d8000215 	stw	zero,8(sp)
    2b50:	d8800115 	stw	r2,4(sp)
    2b54:	00800144 	movi	r2,5
    2b58:	d8800015 	stw	r2,0(sp)
    2b5c:	000f883a 	mov	r7,zero
    2b60:	200d883a 	mov	r6,r4
    2b64:	180b883a 	mov	r5,r3
    2b68:	e13ffc17 	ldw	r4,-16(fp)
    2b6c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2b70:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2b74:	01004b04 	movi	r4,300
    2b78:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2b7c:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2b80:	e037883a 	mov	sp,fp
    2b84:	dfc00117 	ldw	ra,4(sp)
    2b88:	df000017 	ldw	fp,0(sp)
    2b8c:	dec00204 	addi	sp,sp,8
    2b90:	f800283a 	ret

00002b94 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2b94:	defff204 	addi	sp,sp,-56
    2b98:	dfc00d15 	stw	ra,52(sp)
    2b9c:	df000c15 	stw	fp,48(sp)
    2ba0:	df000c04 	addi	fp,sp,48
    2ba4:	e13ffc15 	stw	r4,-16(fp)
    2ba8:	2809883a 	mov	r4,r5
    2bac:	3007883a 	mov	r3,r6
    2bb0:	3805883a 	mov	r2,r7
    2bb4:	e13ffd05 	stb	r4,-12(fp)
    2bb8:	e0fffe05 	stb	r3,-8(fp)
    2bbc:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2bc0:	e0fffd03 	ldbu	r3,-12(fp)
    2bc4:	e13ffe03 	ldbu	r4,-8(fp)
    2bc8:	e0bfff03 	ldbu	r2,-4(fp)
    2bcc:	d8000715 	stw	zero,28(sp)
    2bd0:	d8000615 	stw	zero,24(sp)
    2bd4:	d8000515 	stw	zero,20(sp)
    2bd8:	d8000415 	stw	zero,16(sp)
    2bdc:	d8000315 	stw	zero,12(sp)
    2be0:	d8000215 	stw	zero,8(sp)
    2be4:	d8800115 	stw	r2,4(sp)
    2be8:	00800244 	movi	r2,9
    2bec:	d8800015 	stw	r2,0(sp)
    2bf0:	000f883a 	mov	r7,zero
    2bf4:	200d883a 	mov	r6,r4
    2bf8:	180b883a 	mov	r5,r3
    2bfc:	e13ffc17 	ldw	r4,-16(fp)
    2c00:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2c04:	e037883a 	mov	sp,fp
    2c08:	dfc00117 	ldw	ra,4(sp)
    2c0c:	df000017 	ldw	fp,0(sp)
    2c10:	dec00204 	addi	sp,sp,8
    2c14:	f800283a 	ret

00002c18 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2c18:	defffe04 	addi	sp,sp,-8
    2c1c:	df000115 	stw	fp,4(sp)
    2c20:	df000104 	addi	fp,sp,4
    2c24:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2c28:	e0bfff17 	ldw	r2,-4(fp)
        };
    2c2c:	e037883a 	mov	sp,fp
    2c30:	df000017 	ldw	fp,0(sp)
    2c34:	dec00104 	addi	sp,sp,4
    2c38:	f800283a 	ret

00002c3c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2c3c:	defffe04 	addi	sp,sp,-8
    2c40:	df000115 	stw	fp,4(sp)
    2c44:	df000104 	addi	fp,sp,4
    2c48:	e13fff15 	stw	r4,-4(fp)
    2c4c:	008000b4 	movhi	r2,2
    2c50:	10935804 	addi	r2,r2,19808
    2c54:	e0ffff17 	ldw	r3,-4(fp)
    2c58:	18800015 	stw	r2,0(r3)
    2c5c:	0001883a 	nop
    2c60:	e037883a 	mov	sp,fp
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00104 	addi	sp,sp,4
    2c6c:	f800283a 	ret

00002c70 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2c70:	defffd04 	addi	sp,sp,-12
    2c74:	dfc00215 	stw	ra,8(sp)
    2c78:	df000115 	stw	fp,4(sp)
    2c7c:	df000104 	addi	fp,sp,4
    2c80:	e13fff15 	stw	r4,-4(fp)
    2c84:	e0bfff17 	ldw	r2,-4(fp)
    2c88:	1009883a 	mov	r4,r2
    2c8c:	0002c3c0 	call	2c3c <_ZN11AddressPoolC1Ev>
    2c90:	008000b4 	movhi	r2,2
    2c94:	10935304 	addi	r2,r2,19788
    2c98:	e0ffff17 	ldw	r3,-4(fp)
    2c9c:	18800015 	stw	r2,0(r3)
    2ca0:	e0bfff17 	ldw	r2,-4(fp)
    2ca4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2ca8:	000b883a 	mov	r5,zero
    2cac:	e13fff17 	ldw	r4,-4(fp)
    2cb0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    2cb4:	e0bfff17 	ldw	r2,-4(fp)
    2cb8:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2cbc:	e0bfff17 	ldw	r2,-4(fp)
    2cc0:	10c00104 	addi	r3,r2,4
    2cc4:	e0bfff17 	ldw	r2,-4(fp)
    2cc8:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    2ccc:	e0bfff17 	ldw	r2,-4(fp)
    2cd0:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    2cd4:	e0bfff17 	ldw	r2,-4(fp)
    2cd8:	00c00204 	movi	r3,8
    2cdc:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    2ce0:	e0bfff17 	ldw	r2,-4(fp)
    2ce4:	11000183 	ldbu	r4,6(r2)
    2ce8:	00ffff84 	movi	r3,-2
    2cec:	20c6703a 	and	r3,r4,r3
    2cf0:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    2cf4:	e0bfff17 	ldw	r2,-4(fp)
    2cf8:	11000183 	ldbu	r4,6(r2)
    2cfc:	00ffff44 	movi	r3,-3
    2d00:	20c6703a 	and	r3,r4,r3
    2d04:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2d08:	e0bfff17 	ldw	r2,-4(fp)
    2d0c:	10c00183 	ldbu	r3,6(r2)
    2d10:	18c000cc 	andi	r3,r3,3
    2d14:	18c00f14 	ori	r3,r3,60
    2d18:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2d1c:	e13fff17 	ldw	r4,-4(fp)
    2d20:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2d24:	0001883a 	nop
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2d3c:	defffa04 	addi	sp,sp,-24
    2d40:	dfc00515 	stw	ra,20(sp)
    2d44:	df000415 	stw	fp,16(sp)
    2d48:	dc000315 	stw	r16,12(sp)
    2d4c:	df000404 	addi	fp,sp,16
    2d50:	e13ffd15 	stw	r4,-12(fp)
    2d54:	2805883a 	mov	r2,r5
    2d58:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2d5c:	e0bffe03 	ldbu	r2,-8(fp)
    2d60:	1000031e 	bne	r2,zero,2d70 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2d64:	e0bffd17 	ldw	r2,-12(fp)
    2d68:	10800204 	addi	r2,r2,8
    2d6c:	00001006 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2d70:	e0bffe03 	ldbu	r2,-8(fp)
    2d74:	100b883a 	mov	r5,r2
    2d78:	e13ffd17 	ldw	r4,-12(fp)
    2d7c:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2d80:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2d84:	e0bffc03 	ldbu	r2,-16(fp)
    2d88:	10000826 	beq	r2,zero,2dac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	14000204 	addi	r16,r2,8
    2d94:	e0bffc03 	ldbu	r2,-16(fp)
    2d98:	014001c4 	movi	r5,7
    2d9c:	1009883a 	mov	r4,r2
    2da0:	000d9380 	call	d938 <__mulsi3>
    2da4:	8085883a 	add	r2,r16,r2
    2da8:	00000106 	br	2db0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2dac:	0005883a 	mov	r2,zero
        };
    2db0:	e6ffff04 	addi	sp,fp,-4
    2db4:	dfc00217 	ldw	ra,8(sp)
    2db8:	df000117 	ldw	fp,4(sp)
    2dbc:	dc000017 	ldw	r16,0(sp)
    2dc0:	dec00304 	addi	sp,sp,12
    2dc4:	f800283a 	ret

00002dc8 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2dc8:	defffd04 	addi	sp,sp,-12
    2dcc:	df000215 	stw	fp,8(sp)
    2dd0:	df000204 	addi	fp,sp,8
    2dd4:	2005883a 	mov	r2,r4
    2dd8:	e17fff15 	stw	r5,-4(fp)
    2ddc:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2de0:	0001883a 	nop
    2de4:	e037883a 	mov	sp,fp
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00104 	addi	sp,sp,4
    2df0:	f800283a 	ret

00002df4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2df4:	defff804 	addi	sp,sp,-32
    2df8:	dfc00715 	stw	ra,28(sp)
    2dfc:	df000615 	stw	fp,24(sp)
    2e00:	dc000515 	stw	r16,20(sp)
    2e04:	df000604 	addi	fp,sp,24
    2e08:	e13ffb15 	stw	r4,-20(fp)
    2e0c:	2809883a 	mov	r4,r5
    2e10:	3007883a 	mov	r3,r6
    2e14:	3805883a 	mov	r2,r7
    2e18:	e13ffc05 	stb	r4,-16(fp)
    2e1c:	e0fffd05 	stb	r3,-12(fp)
    2e20:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2e24:	e0bffc03 	ldbu	r2,-16(fp)
    2e28:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2e2c:	e0fffa43 	ldbu	r3,-23(fp)
    2e30:	00bfe004 	movi	r2,-128
    2e34:	1884703a 	and	r2,r3,r2
    2e38:	10803fcc 	andi	r2,r2,255
    2e3c:	1000031e 	bne	r2,zero,2e4c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2e40:	e0bffe03 	ldbu	r2,-8(fp)
    2e44:	10800230 	cmpltui	r2,r2,8
    2e48:	1000021e 	bne	r2,zero,2e54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2e4c:	0005883a 	mov	r2,zero
    2e50:	00007a06 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2e54:	e0bffd03 	ldbu	r2,-12(fp)
    2e58:	10000726 	beq	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2e5c:	e0bffb17 	ldw	r2,-20(fp)
    2e60:	108001c3 	ldbu	r2,7(r2)
    2e64:	10803fcc 	andi	r2,r2,255
    2e68:	108001d8 	cmpnei	r2,r2,7
    2e6c:	1000021e 	bne	r2,zero,2e78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2e70:	0005883a 	mov	r2,zero
    2e74:	00007106 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2e78:	000b883a 	mov	r5,zero
    2e7c:	e13ffb17 	ldw	r4,-20(fp)
    2e80:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2e84:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2e88:	e0bffa03 	ldbu	r2,-24(fp)
    2e8c:	1000021e 	bne	r2,zero,2e98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2e90:	0005883a 	mov	r2,zero
    2e94:	00006906 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2e98:	e0bffa43 	ldbu	r2,-23(fp)
    2e9c:	10803fcc 	andi	r2,r2,255
    2ea0:	1000241e 	bne	r2,zero,2f34 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2ea4:	e0bffd03 	ldbu	r2,-12(fp)
    2ea8:	10001026 	beq	r2,zero,2eec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2eac:	e0bffa03 	ldbu	r2,-24(fp)
    2eb0:	e43ffb17 	ldw	r16,-20(fp)
    2eb4:	014001c4 	movi	r5,7
    2eb8:	1009883a 	mov	r4,r2
    2ebc:	000d9380 	call	d938 <__mulsi3>
    2ec0:	8085883a 	add	r2,r16,r2
    2ec4:	10800304 	addi	r2,r2,12
    2ec8:	00c01044 	movi	r3,65
    2ecc:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2ed0:	e0bffb17 	ldw	r2,-20(fp)
    2ed4:	108001c3 	ldbu	r2,7(r2)
    2ed8:	10800044 	addi	r2,r2,1
    2edc:	1007883a 	mov	r3,r2
    2ee0:	e0bffb17 	ldw	r2,-20(fp)
    2ee4:	10c001c5 	stb	r3,7(r2)
    2ee8:	00000906 	br	2f10 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2eec:	e0bffa03 	ldbu	r2,-24(fp)
    2ef0:	e43ffb17 	ldw	r16,-20(fp)
    2ef4:	014001c4 	movi	r5,7
    2ef8:	1009883a 	mov	r4,r2
    2efc:	000d9380 	call	d938 <__mulsi3>
    2f00:	8085883a 	add	r2,r16,r2
    2f04:	10800304 	addi	r2,r2,12
    2f08:	00c00044 	movi	r3,1
    2f0c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2f10:	e0bffa03 	ldbu	r2,-24(fp)
    2f14:	e43ffb17 	ldw	r16,-20(fp)
    2f18:	014001c4 	movi	r5,7
    2f1c:	1009883a 	mov	r4,r2
    2f20:	000d9380 	call	d938 <__mulsi3>
    2f24:	8085883a 	add	r2,r16,r2
    2f28:	10800304 	addi	r2,r2,12
    2f2c:	10800003 	ldbu	r2,0(r2)
    2f30:	00004206 	br	303c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2f34:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2f38:	e0bffa43 	ldbu	r2,-23(fp)
    2f3c:	108001cc 	andi	r2,r2,7
    2f40:	108001cc 	andi	r2,r2,7
    2f44:	100890fa 	slli	r4,r2,3
    2f48:	e0fffa83 	ldbu	r3,-22(fp)
    2f4c:	00bff1c4 	movi	r2,-57
    2f50:	1884703a 	and	r2,r3,r2
    2f54:	1007883a 	mov	r3,r2
    2f58:	2005883a 	mov	r2,r4
    2f5c:	1884b03a 	or	r2,r3,r2
    2f60:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2f64:	e0bffd03 	ldbu	r2,-12(fp)
    2f68:	10001526 	beq	r2,zero,2fc0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2f6c:	e0bffa83 	ldbu	r2,-22(fp)
    2f70:	10801014 	ori	r2,r2,64
    2f74:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2f78:	e0bffb17 	ldw	r2,-20(fp)
    2f7c:	108001c3 	ldbu	r2,7(r2)
    2f80:	10800044 	addi	r2,r2,1
    2f84:	1007883a 	mov	r3,r2
    2f88:	e0bffb17 	ldw	r2,-20(fp)
    2f8c:	10c001c5 	stb	r3,7(r2)
    2f90:	e0bffb17 	ldw	r2,-20(fp)
    2f94:	108001c3 	ldbu	r2,7(r2)
    2f98:	108001cc 	andi	r2,r2,7
    2f9c:	110001cc 	andi	r4,r2,7
    2fa0:	e0fffa83 	ldbu	r3,-22(fp)
    2fa4:	00bffe04 	movi	r2,-8
    2fa8:	1884703a 	and	r2,r3,r2
    2fac:	1007883a 	mov	r3,r2
    2fb0:	2005883a 	mov	r2,r4
    2fb4:	1884b03a 	or	r2,r3,r2
    2fb8:	e0bffa85 	stb	r2,-22(fp)
    2fbc:	00000e06 	br	2ff8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2fc0:	e0fffa83 	ldbu	r3,-22(fp)
    2fc4:	00bfefc4 	movi	r2,-65
    2fc8:	1884703a 	and	r2,r3,r2
    2fcc:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2fd0:	e0bffe03 	ldbu	r2,-8(fp)
    2fd4:	108001cc 	andi	r2,r2,7
    2fd8:	110001cc 	andi	r4,r2,7
    2fdc:	e0fffa83 	ldbu	r3,-22(fp)
    2fe0:	00bffe04 	movi	r2,-8
    2fe4:	1884703a 	and	r2,r3,r2
    2fe8:	1007883a 	mov	r3,r2
    2fec:	2005883a 	mov	r2,r4
    2ff0:	1884b03a 	or	r2,r3,r2
    2ff4:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2ff8:	e0bffa03 	ldbu	r2,-24(fp)
    2ffc:	e43ffb17 	ldw	r16,-20(fp)
    3000:	014001c4 	movi	r5,7
    3004:	1009883a 	mov	r4,r2
    3008:	000d9380 	call	d938 <__mulsi3>
    300c:	8085883a 	add	r2,r16,r2
    3010:	10800304 	addi	r2,r2,12
    3014:	e0fffa83 	ldbu	r3,-22(fp)
    3018:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    301c:	e0bffa03 	ldbu	r2,-24(fp)
    3020:	e43ffb17 	ldw	r16,-20(fp)
    3024:	014001c4 	movi	r5,7
    3028:	1009883a 	mov	r4,r2
    302c:	000d9380 	call	d938 <__mulsi3>
    3030:	8085883a 	add	r2,r16,r2
    3034:	10800304 	addi	r2,r2,12
    3038:	10800003 	ldbu	r2,0(r2)
        };
    303c:	e6ffff04 	addi	sp,fp,-4
    3040:	dfc00217 	ldw	ra,8(sp)
    3044:	df000117 	ldw	fp,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00304 	addi	sp,sp,12
    3050:	f800283a 	ret

00003054 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    3054:	defffb04 	addi	sp,sp,-20
    3058:	dfc00415 	stw	ra,16(sp)
    305c:	df000315 	stw	fp,12(sp)
    3060:	df000304 	addi	fp,sp,12
    3064:	e13ffe15 	stw	r4,-8(fp)
    3068:	2805883a 	mov	r2,r5
    306c:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    3070:	e0bfff03 	ldbu	r2,-4(fp)
    3074:	10801058 	cmpnei	r2,r2,65
    3078:	1000031e 	bne	r2,zero,3088 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    307c:	e13ffe17 	ldw	r4,-8(fp)
    3080:	00032040 	call	3204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    3084:	00000906 	br	30ac <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    3088:	e0bfff03 	ldbu	r2,-4(fp)
    308c:	100b883a 	mov	r5,r2
    3090:	e13ffe17 	ldw	r4,-8(fp)
    3094:	000326c0 	call	326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    3098:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    309c:	e0bffd03 	ldbu	r2,-12(fp)
    30a0:	100b883a 	mov	r5,r2
    30a4:	e13ffe17 	ldw	r4,-8(fp)
    30a8:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    30ac:	e037883a 	mov	sp,fp
    30b0:	dfc00117 	ldw	ra,4(sp)
    30b4:	df000017 	ldw	fp,0(sp)
    30b8:	dec00204 	addi	sp,sp,8
    30bc:	f800283a 	ret

000030c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    30c0:	defffa04 	addi	sp,sp,-24
    30c4:	dfc00515 	stw	ra,20(sp)
    30c8:	df000415 	stw	fp,16(sp)
    30cc:	dc400315 	stw	r17,12(sp)
    30d0:	dc000215 	stw	r16,8(sp)
    30d4:	df000404 	addi	fp,sp,16
    30d8:	e13ffc15 	stw	r4,-16(fp)
    30dc:	2805883a 	mov	r2,r5
    30e0:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    30e4:	e0bffd03 	ldbu	r2,-12(fp)
    30e8:	e43ffc17 	ldw	r16,-16(fp)
    30ec:	014001c4 	movi	r5,7
    30f0:	1009883a 	mov	r4,r2
    30f4:	000d9380 	call	d938 <__mulsi3>
    30f8:	8085883a 	add	r2,r16,r2
    30fc:	10800304 	addi	r2,r2,12
    3100:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    3104:	e0bffd03 	ldbu	r2,-12(fp)
    3108:	e43ffc17 	ldw	r16,-16(fp)
    310c:	014001c4 	movi	r5,7
    3110:	1009883a 	mov	r4,r2
    3114:	000d9380 	call	d938 <__mulsi3>
    3118:	8085883a 	add	r2,r16,r2
    311c:	10800344 	addi	r2,r2,13
    3120:	00c00044 	movi	r3,1
    3124:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    3128:	e0bffd03 	ldbu	r2,-12(fp)
    312c:	e43ffc17 	ldw	r16,-16(fp)
    3130:	014001c4 	movi	r5,7
    3134:	1009883a 	mov	r4,r2
    3138:	000d9380 	call	d938 <__mulsi3>
    313c:	8085883a 	add	r2,r16,r2
    3140:	10800384 	addi	r2,r2,14
    3144:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    3148:	e0fffd03 	ldbu	r3,-12(fp)
    314c:	e0bffc17 	ldw	r2,-16(fp)
    3150:	14000104 	addi	r16,r2,4
    3154:	e47ffc17 	ldw	r17,-16(fp)
    3158:	014001c4 	movi	r5,7
    315c:	1809883a 	mov	r4,r3
    3160:	000d9380 	call	d938 <__mulsi3>
    3164:	8885883a 	add	r2,r17,r2
    3168:	10800204 	addi	r2,r2,8
    316c:	81403fcc 	andi	r5,r16,255
    3170:	10c00003 	ldbu	r3,0(r2)
    3174:	1806703a 	and	r3,r3,zero
    3178:	1809883a 	mov	r4,r3
    317c:	2807883a 	mov	r3,r5
    3180:	20c6b03a 	or	r3,r4,r3
    3184:	10c00005 	stb	r3,0(r2)
    3188:	8006d23a 	srli	r3,r16,8
    318c:	19403fcc 	andi	r5,r3,255
    3190:	10c00043 	ldbu	r3,1(r2)
    3194:	1806703a 	and	r3,r3,zero
    3198:	1809883a 	mov	r4,r3
    319c:	2807883a 	mov	r3,r5
    31a0:	20c6b03a 	or	r3,r4,r3
    31a4:	10c00045 	stb	r3,1(r2)
    31a8:	8006d43a 	srli	r3,r16,16
    31ac:	19403fcc 	andi	r5,r3,255
    31b0:	10c00083 	ldbu	r3,2(r2)
    31b4:	1806703a 	and	r3,r3,zero
    31b8:	1809883a 	mov	r4,r3
    31bc:	2807883a 	mov	r3,r5
    31c0:	20c6b03a 	or	r3,r4,r3
    31c4:	10c00085 	stb	r3,2(r2)
    31c8:	800ad63a 	srli	r5,r16,24
    31cc:	10c000c3 	ldbu	r3,3(r2)
    31d0:	1806703a 	and	r3,r3,zero
    31d4:	1809883a 	mov	r4,r3
    31d8:	2807883a 	mov	r3,r5
    31dc:	20c6b03a 	or	r3,r4,r3
    31e0:	10c000c5 	stb	r3,3(r2)
        };
    31e4:	0001883a 	nop
    31e8:	e6fffe04 	addi	sp,fp,-8
    31ec:	dfc00317 	ldw	ra,12(sp)
    31f0:	df000217 	ldw	fp,8(sp)
    31f4:	dc400117 	ldw	r17,4(sp)
    31f8:	dc000017 	ldw	r16,0(sp)
    31fc:	dec00404 	addi	sp,sp,16
    3200:	f800283a 	ret

00003204 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    3204:	defffc04 	addi	sp,sp,-16
    3208:	dfc00315 	stw	ra,12(sp)
    320c:	df000215 	stw	fp,8(sp)
    3210:	df000204 	addi	fp,sp,8
    3214:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    3218:	00800044 	movi	r2,1
    321c:	e0bffe05 	stb	r2,-8(fp)
    3220:	e0bffe03 	ldbu	r2,-8(fp)
    3224:	10800428 	cmpgeui	r2,r2,16
    3228:	1000081e 	bne	r2,zero,324c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    322c:	e0bffe03 	ldbu	r2,-8(fp)
    3230:	100b883a 	mov	r5,r2
    3234:	e13fff17 	ldw	r4,-4(fp)
    3238:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    323c:	e0bffe03 	ldbu	r2,-8(fp)
    3240:	10800044 	addi	r2,r2,1
    3244:	e0bffe05 	stb	r2,-8(fp)
    3248:	003ff506 	br	3220 <__alt_data_end+0xfc003220>
                        InitEntry(i);

                hubCounter = 0;
    324c:	e0bfff17 	ldw	r2,-4(fp)
    3250:	100001c5 	stb	zero,7(r2)
        };
    3254:	0001883a 	nop
    3258:	e037883a 	mov	sp,fp
    325c:	dfc00117 	ldw	ra,4(sp)
    3260:	df000017 	ldw	fp,0(sp)
    3264:	dec00204 	addi	sp,sp,8
    3268:	f800283a 	ret

0000326c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    326c:	defffa04 	addi	sp,sp,-24
    3270:	dfc00515 	stw	ra,20(sp)
    3274:	df000415 	stw	fp,16(sp)
    3278:	dc000315 	stw	r16,12(sp)
    327c:	df000404 	addi	fp,sp,16
    3280:	e13ffd15 	stw	r4,-12(fp)
    3284:	2805883a 	mov	r2,r5
    3288:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    328c:	00800044 	movi	r2,1
    3290:	e0bffc05 	stb	r2,-16(fp)
    3294:	e0bffc03 	ldbu	r2,-16(fp)
    3298:	10800428 	cmpgeui	r2,r2,16
    329c:	1000111e 	bne	r2,zero,32e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    32a0:	e0bffc03 	ldbu	r2,-16(fp)
    32a4:	e43ffd17 	ldw	r16,-12(fp)
    32a8:	014001c4 	movi	r5,7
    32ac:	1009883a 	mov	r4,r2
    32b0:	000d9380 	call	d938 <__mulsi3>
    32b4:	8085883a 	add	r2,r16,r2
    32b8:	10800304 	addi	r2,r2,12
    32bc:	10800003 	ldbu	r2,0(r2)
    32c0:	10c03fcc 	andi	r3,r2,255
    32c4:	e0bffe03 	ldbu	r2,-8(fp)
    32c8:	1880021e 	bne	r3,r2,32d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    32cc:	e0bffc03 	ldbu	r2,-16(fp)
    32d0:	00000506 	br	32e8 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    32d4:	e0bffc03 	ldbu	r2,-16(fp)
    32d8:	10800044 	addi	r2,r2,1
    32dc:	e0bffc05 	stb	r2,-16(fp)
    32e0:	003fec06 	br	3294 <__alt_data_end+0xfc003294>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    32e4:	0005883a 	mov	r2,zero
        };
    32e8:	e6ffff04 	addi	sp,fp,-4
    32ec:	dfc00217 	ldw	ra,8(sp)
    32f0:	df000117 	ldw	fp,4(sp)
    32f4:	dc000017 	ldw	r16,0(sp)
    32f8:	dec00304 	addi	sp,sp,12
    32fc:	f800283a 	ret

00003300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    3300:	defffa04 	addi	sp,sp,-24
    3304:	dfc00515 	stw	ra,20(sp)
    3308:	df000415 	stw	fp,16(sp)
    330c:	dc000315 	stw	r16,12(sp)
    3310:	df000404 	addi	fp,sp,16
    3314:	e13ffd15 	stw	r4,-12(fp)
    3318:	2805883a 	mov	r2,r5
    331c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    3320:	e0bffe03 	ldbu	r2,-8(fp)
    3324:	10003026 	beq	r2,zero,33e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    3328:	e0bffe03 	ldbu	r2,-8(fp)
    332c:	e43ffd17 	ldw	r16,-12(fp)
    3330:	014001c4 	movi	r5,7
    3334:	1009883a 	mov	r4,r2
    3338:	000d9380 	call	d938 <__mulsi3>
    333c:	8085883a 	add	r2,r16,r2
    3340:	10800304 	addi	r2,r2,12
    3344:	10800003 	ldbu	r2,0(r2)
    3348:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    334c:	e0bffc43 	ldbu	r2,-15(fp)
    3350:	1080100c 	andi	r2,r2,64
    3354:	10803fcc 	andi	r2,r2,255
    3358:	10001e26 	beq	r2,zero,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    335c:	00800044 	movi	r2,1
    3360:	e0bffc05 	stb	r2,-16(fp)
    3364:	e0bffc03 	ldbu	r2,-16(fp)
    3368:	100d883a 	mov	r6,r2
    336c:	e17ffc43 	ldbu	r5,-15(fp)
    3370:	e13ffd17 	ldw	r4,-12(fp)
    3374:	00034040 	call	3404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    3378:	e0bffc05 	stb	r2,-16(fp)
    337c:	e0bffc03 	ldbu	r2,-16(fp)
    3380:	1004c03a 	cmpne	r2,r2,zero
    3384:	10803fcc 	andi	r2,r2,255
    3388:	10000526 	beq	r2,zero,33a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    338c:	e0bffc03 	ldbu	r2,-16(fp)
    3390:	100b883a 	mov	r5,r2
    3394:	e13ffd17 	ldw	r4,-12(fp)
    3398:	00033000 	call	3300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    339c:	003ff106 	br	3364 <__alt_data_end+0xfc003364>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    33a0:	e0bffd17 	ldw	r2,-12(fp)
    33a4:	10c001c3 	ldbu	r3,7(r2)
    33a8:	e0bffc43 	ldbu	r2,-15(fp)
    33ac:	108001cc 	andi	r2,r2,7
    33b0:	18c03fcc 	andi	r3,r3,255
    33b4:	10803fcc 	andi	r2,r2,255
    33b8:	1880061e 	bne	r3,r2,33d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    33bc:	e0bffd17 	ldw	r2,-12(fp)
    33c0:	108001c3 	ldbu	r2,7(r2)
    33c4:	10bfffc4 	addi	r2,r2,-1
    33c8:	1007883a 	mov	r3,r2
    33cc:	e0bffd17 	ldw	r2,-12(fp)
    33d0:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    33d4:	e0bffe03 	ldbu	r2,-8(fp)
    33d8:	100b883a 	mov	r5,r2
    33dc:	e13ffd17 	ldw	r4,-12(fp)
    33e0:	00030c00 	call	30c0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    33e4:	00000106 	br	33ec <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    33e8:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    33ec:	e6ffff04 	addi	sp,fp,-4
    33f0:	dfc00217 	ldw	ra,8(sp)
    33f4:	df000117 	ldw	fp,4(sp)
    33f8:	dc000017 	ldw	r16,0(sp)
    33fc:	dec00304 	addi	sp,sp,12
    3400:	f800283a 	ret

00003404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    3404:	defff904 	addi	sp,sp,-28
    3408:	dfc00615 	stw	ra,24(sp)
    340c:	df000515 	stw	fp,20(sp)
    3410:	dc000415 	stw	r16,16(sp)
    3414:	df000504 	addi	fp,sp,20
    3418:	e13ffc15 	stw	r4,-16(fp)
    341c:	e17ffd05 	stb	r5,-12(fp)
    3420:	3005883a 	mov	r2,r6
    3424:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3428:	e0bffe03 	ldbu	r2,-8(fp)
    342c:	10000526 	beq	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3430:	e0bffe03 	ldbu	r2,-8(fp)
    3434:	10800428 	cmpgeui	r2,r2,16
    3438:	1000021e 	bne	r2,zero,3444 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    343c:	e0bffe03 	ldbu	r2,-8(fp)
    3440:	00000106 	br	3448 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3444:	00800044 	movi	r2,1
    3448:	e0bffb05 	stb	r2,-20(fp)
    344c:	e0bffb03 	ldbu	r2,-20(fp)
    3450:	10800428 	cmpgeui	r2,r2,16
    3454:	1000161e 	bne	r2,zero,34b0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3458:	e0bffb03 	ldbu	r2,-20(fp)
    345c:	e43ffc17 	ldw	r16,-16(fp)
    3460:	014001c4 	movi	r5,7
    3464:	1009883a 	mov	r4,r2
    3468:	000d9380 	call	d938 <__mulsi3>
    346c:	8085883a 	add	r2,r16,r2
    3470:	10800304 	addi	r2,r2,12
    3474:	10800003 	ldbu	r2,0(r2)
    3478:	1004d0fa 	srli	r2,r2,3
    347c:	108001cc 	andi	r2,r2,7
    3480:	1007883a 	mov	r3,r2
    3484:	e0bffd03 	ldbu	r2,-12(fp)
    3488:	108001cc 	andi	r2,r2,7
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	10803fcc 	andi	r2,r2,255
    3494:	1880021e 	bne	r3,r2,34a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3498:	e0bffb03 	ldbu	r2,-20(fp)
    349c:	00000506 	br	34b4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    34a0:	e0bffb03 	ldbu	r2,-20(fp)
    34a4:	10800044 	addi	r2,r2,1
    34a8:	e0bffb05 	stb	r2,-20(fp)
    34ac:	003fe706 	br	344c <__alt_data_end+0xfc00344c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    34b0:	0005883a 	mov	r2,zero
        };
    34b4:	e6ffff04 	addi	sp,fp,-4
    34b8:	dfc00217 	ldw	ra,8(sp)
    34bc:	df000117 	ldw	fp,4(sp)
    34c0:	dc000017 	ldw	r16,0(sp)
    34c4:	dec00304 	addi	sp,sp,12
    34c8:	f800283a 	ret

000034cc <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    34cc:	defffb04 	addi	sp,sp,-20
    34d0:	dfc00415 	stw	ra,16(sp)
    34d4:	df000315 	stw	fp,12(sp)
    34d8:	df000304 	addi	fp,sp,12
    34dc:	e13ffe15 	stw	r4,-8(fp)
    34e0:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    34e4:	e0bffe17 	ldw	r2,-8(fp)
    34e8:	1009883a 	mov	r4,r2
    34ec:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    34f0:	e0bffe17 	ldw	r2,-8(fp)
    34f4:	10800104 	addi	r2,r2,4
    34f8:	1009883a 	mov	r4,r2
    34fc:	0004ebc0 	call	4ebc <_ZN17UsbConfigXtracterC1Ev>
    3500:	008000b4 	movhi	r2,2
    3504:	10937404 	addi	r2,r2,19920
    3508:	e0fffe17 	ldw	r3,-8(fp)
    350c:	18800015 	stw	r2,0(r3)
    3510:	008000b4 	movhi	r2,2
    3514:	10938104 	addi	r2,r2,19972
    3518:	e0fffe17 	ldw	r3,-8(fp)
    351c:	18800115 	stw	r2,4(r3)
    3520:	e0bffe17 	ldw	r2,-8(fp)
    3524:	e0ffff17 	ldw	r3,-4(fp)
    3528:	10c00315 	stw	r3,12(r2)
    352c:	e0bffe17 	ldw	r2,-8(fp)
    3530:	10000405 	stb	zero,16(r2)
    3534:	e0bffe17 	ldw	r2,-8(fp)
    3538:	00c00044 	movi	r3,1
    353c:	10c006c5 	stb	r3,27(r2)
    3540:	e0bffe17 	ldw	r2,-8(fp)
    3544:	10000715 	stw	zero,28(r2)
    3548:	e0bffe17 	ldw	r2,-8(fp)
    354c:	10000905 	stb	zero,36(r2)
    3550:	e0bffe17 	ldw	r2,-8(fp)
    3554:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3558:	e03ffd05 	stb	zero,-12(fp)
    355c:	e0bffd03 	ldbu	r2,-12(fp)
    3560:	108000e8 	cmpgeui	r2,r2,3
    3564:	1000431e 	bne	r2,zero,3674 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3568:	e0fffd03 	ldbu	r3,-12(fp)
    356c:	e13ffe17 	ldw	r4,-8(fp)
    3570:	1805883a 	mov	r2,r3
    3574:	1085883a 	add	r2,r2,r2
    3578:	10c5883a 	add	r2,r2,r3
    357c:	2085883a 	add	r2,r4,r2
    3580:	10800444 	addi	r2,r2,17
    3584:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3588:	e13ffd03 	ldbu	r4,-12(fp)
    358c:	e0bffd03 	ldbu	r2,-12(fp)
    3590:	10000226 	beq	r2,zero,359c <_ZN7XBOXONEC1EP3USB+0xd0>
    3594:	0007883a 	mov	r3,zero
    3598:	00000106 	br	35a0 <_ZN7XBOXONEC1EP3USB+0xd4>
    359c:	00c00204 	movi	r3,8
    35a0:	e17ffe17 	ldw	r5,-8(fp)
    35a4:	2005883a 	mov	r2,r4
    35a8:	1085883a 	add	r2,r2,r2
    35ac:	1105883a 	add	r2,r2,r4
    35b0:	2885883a 	add	r2,r5,r2
    35b4:	10800484 	addi	r2,r2,18
    35b8:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    35bc:	e0fffd03 	ldbu	r3,-12(fp)
    35c0:	e13ffe17 	ldw	r4,-8(fp)
    35c4:	1805883a 	mov	r2,r3
    35c8:	1085883a 	add	r2,r2,r2
    35cc:	10c5883a 	add	r2,r2,r3
    35d0:	2085883a 	add	r2,r4,r2
    35d4:	10800404 	addi	r2,r2,16
    35d8:	110000c3 	ldbu	r4,3(r2)
    35dc:	00ffff84 	movi	r3,-2
    35e0:	20c6703a 	and	r3,r4,r3
    35e4:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    35e8:	e0fffd03 	ldbu	r3,-12(fp)
    35ec:	e13ffe17 	ldw	r4,-8(fp)
    35f0:	1805883a 	mov	r2,r3
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	10c5883a 	add	r2,r2,r3
    35fc:	2085883a 	add	r2,r4,r2
    3600:	10800404 	addi	r2,r2,16
    3604:	110000c3 	ldbu	r4,3(r2)
    3608:	00ffff44 	movi	r3,-3
    360c:	20c6703a 	and	r3,r4,r3
    3610:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    3614:	e13ffd03 	ldbu	r4,-12(fp)
    3618:	e0bffd03 	ldbu	r2,-12(fp)
    361c:	10000226 	beq	r2,zero,3628 <_ZN7XBOXONEC1EP3USB+0x15c>
    3620:	00c00044 	movi	r3,1
    3624:	00000106 	br	362c <_ZN7XBOXONEC1EP3USB+0x160>
    3628:	00c003c4 	movi	r3,15
    362c:	e17ffe17 	ldw	r5,-8(fp)
    3630:	2005883a 	mov	r2,r4
    3634:	1085883a 	add	r2,r2,r2
    3638:	1105883a 	add	r2,r2,r4
    363c:	2885883a 	add	r2,r5,r2
    3640:	10800404 	addi	r2,r2,16
    3644:	18c7883a 	add	r3,r3,r3
    3648:	18cb883a 	add	r5,r3,r3
    364c:	10c000c3 	ldbu	r3,3(r2)
    3650:	18c000cc 	andi	r3,r3,3
    3654:	1809883a 	mov	r4,r3
    3658:	2807883a 	mov	r3,r5
    365c:	20c6b03a 	or	r3,r4,r3
    3660:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3664:	e0bffd03 	ldbu	r2,-12(fp)
    3668:	10800044 	addi	r2,r2,1
    366c:	e0bffd05 	stb	r2,-12(fp)
    3670:	003fba06 	br	355c <__alt_data_end+0xfc00355c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3674:	e0bffe17 	ldw	r2,-8(fp)
    3678:	10800317 	ldw	r2,12(r2)
    367c:	10000626 	beq	r2,zero,3698 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    3680:	e0bffe17 	ldw	r2,-8(fp)
    3684:	10800317 	ldw	r2,12(r2)
    3688:	e0fffe17 	ldw	r3,-8(fp)
    368c:	180b883a 	mov	r5,r3
    3690:	1009883a 	mov	r4,r2
    3694:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3698:	0001883a 	nop
    369c:	e037883a 	mov	sp,fp
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	df000017 	ldw	fp,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret

000036b0 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    36b0:	deffde04 	addi	sp,sp,-136
    36b4:	dfc02115 	stw	ra,132(sp)
    36b8:	df002015 	stw	fp,128(sp)
    36bc:	df002004 	addi	fp,sp,128
    36c0:	e13ffc15 	stw	r4,-16(fp)
    36c4:	2809883a 	mov	r4,r5
    36c8:	3007883a 	mov	r3,r6
    36cc:	3805883a 	mov	r2,r7
    36d0:	e13ffd05 	stb	r4,-12(fp)
    36d4:	e0fffe05 	stb	r3,-8(fp)
    36d8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    36dc:	e0bfe744 	addi	r2,fp,-99
    36e0:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    36e4:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    36e8:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    36ec:	e0bffc17 	ldw	r2,-16(fp)
    36f0:	10800317 	ldw	r2,12(r2)
    36f4:	1009883a 	mov	r4,r2
    36f8:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    36fc:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10800403 	ldbu	r2,16(r2)
    3708:	10803fcc 	andi	r2,r2,255
    370c:	10000226 	beq	r2,zero,3718 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    3710:	00bff644 	movi	r2,-39
    3714:	00017606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    3718:	e0bfe517 	ldw	r2,-108(fp)
    371c:	10800017 	ldw	r2,0(r2)
    3720:	10800017 	ldw	r2,0(r2)
    3724:	000b883a 	mov	r5,zero
    3728:	e13fe517 	ldw	r4,-108(fp)
    372c:	103ee83a 	callr	r2
    3730:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3734:	e0bfe317 	ldw	r2,-116(fp)
    3738:	1000021e 	bne	r2,zero,3744 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    373c:	00bff584 	movi	r2,-42
    3740:	00016b06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3744:	e0bfe317 	ldw	r2,-116(fp)
    3748:	10c00003 	ldbu	r3,0(r2)
    374c:	11000043 	ldbu	r4,1(r2)
    3750:	2008923a 	slli	r4,r4,8
    3754:	20c6b03a 	or	r3,r4,r3
    3758:	11000083 	ldbu	r4,2(r2)
    375c:	2008943a 	slli	r4,r4,16
    3760:	20c6b03a 	or	r3,r4,r3
    3764:	108000c3 	ldbu	r2,3(r2)
    3768:	1004963a 	slli	r2,r2,24
    376c:	10c4b03a 	or	r2,r2,r3
    3770:	1000021e 	bne	r2,zero,377c <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3774:	00bff5c4 	movi	r2,-41
    3778:	00015d06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    377c:	e0bfe317 	ldw	r2,-116(fp)
    3780:	10c00003 	ldbu	r3,0(r2)
    3784:	11000043 	ldbu	r4,1(r2)
    3788:	2008923a 	slli	r4,r4,8
    378c:	20c6b03a 	or	r3,r4,r3
    3790:	11000083 	ldbu	r4,2(r2)
    3794:	2008943a 	slli	r4,r4,16
    3798:	20c6b03a 	or	r3,r4,r3
    379c:	108000c3 	ldbu	r2,3(r2)
    37a0:	1004963a 	slli	r2,r2,24
    37a4:	10c4b03a 	or	r2,r2,r3
    37a8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    37ac:	e0bffc17 	ldw	r2,-16(fp)
    37b0:	10c00444 	addi	r3,r2,17
    37b4:	e0bfe317 	ldw	r2,-116(fp)
    37b8:	19803fcc 	andi	r6,r3,255
    37bc:	11000003 	ldbu	r4,0(r2)
    37c0:	2008703a 	and	r4,r4,zero
    37c4:	200b883a 	mov	r5,r4
    37c8:	3009883a 	mov	r4,r6
    37cc:	2908b03a 	or	r4,r5,r4
    37d0:	11000005 	stb	r4,0(r2)
    37d4:	1808d23a 	srli	r4,r3,8
    37d8:	21803fcc 	andi	r6,r4,255
    37dc:	11000043 	ldbu	r4,1(r2)
    37e0:	2008703a 	and	r4,r4,zero
    37e4:	200b883a 	mov	r5,r4
    37e8:	3009883a 	mov	r4,r6
    37ec:	2908b03a 	or	r4,r5,r4
    37f0:	11000045 	stb	r4,1(r2)
    37f4:	1808d43a 	srli	r4,r3,16
    37f8:	21803fcc 	andi	r6,r4,255
    37fc:	11000083 	ldbu	r4,2(r2)
    3800:	2008703a 	and	r4,r4,zero
    3804:	200b883a 	mov	r5,r4
    3808:	3009883a 	mov	r4,r6
    380c:	2908b03a 	or	r4,r5,r4
    3810:	11000085 	stb	r4,2(r2)
    3814:	180ad63a 	srli	r5,r3,24
    3818:	10c000c3 	ldbu	r3,3(r2)
    381c:	1806703a 	and	r3,r3,zero
    3820:	1809883a 	mov	r4,r3
    3824:	2807883a 	mov	r3,r5
    3828:	20c6b03a 	or	r3,r4,r3
    382c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    3830:	e0bfe317 	ldw	r2,-116(fp)
    3834:	e0ffff03 	ldbu	r3,-4(fp)
    3838:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    383c:	e0bffc17 	ldw	r2,-16(fp)
    3840:	10c00317 	ldw	r3,12(r2)
    3844:	00800484 	movi	r2,18
    3848:	113fffcc 	andi	r4,r2,65535
    384c:	e0bfe744 	addi	r2,fp,-99
    3850:	d8800015 	stw	r2,0(sp)
    3854:	200f883a 	mov	r7,r4
    3858:	000d883a 	mov	r6,zero
    385c:	000b883a 	mov	r5,zero
    3860:	1809883a 	mov	r4,r3
    3864:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    3868:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    386c:	e0bfe317 	ldw	r2,-116(fp)
    3870:	e0ffe417 	ldw	r3,-112(fp)
    3874:	19403fcc 	andi	r5,r3,255
    3878:	10c00003 	ldbu	r3,0(r2)
    387c:	1806703a 	and	r3,r3,zero
    3880:	1809883a 	mov	r4,r3
    3884:	2807883a 	mov	r3,r5
    3888:	20c6b03a 	or	r3,r4,r3
    388c:	10c00005 	stb	r3,0(r2)
    3890:	e0ffe417 	ldw	r3,-112(fp)
    3894:	1806d23a 	srli	r3,r3,8
    3898:	19403fcc 	andi	r5,r3,255
    389c:	10c00043 	ldbu	r3,1(r2)
    38a0:	1806703a 	and	r3,r3,zero
    38a4:	1809883a 	mov	r4,r3
    38a8:	2807883a 	mov	r3,r5
    38ac:	20c6b03a 	or	r3,r4,r3
    38b0:	10c00045 	stb	r3,1(r2)
    38b4:	e0ffe417 	ldw	r3,-112(fp)
    38b8:	1806d43a 	srli	r3,r3,16
    38bc:	19403fcc 	andi	r5,r3,255
    38c0:	10c00083 	ldbu	r3,2(r2)
    38c4:	1806703a 	and	r3,r3,zero
    38c8:	1809883a 	mov	r4,r3
    38cc:	2807883a 	mov	r3,r5
    38d0:	20c6b03a 	or	r3,r4,r3
    38d4:	10c00085 	stb	r3,2(r2)
    38d8:	e0ffe417 	ldw	r3,-112(fp)
    38dc:	180ad63a 	srli	r5,r3,24
    38e0:	10c000c3 	ldbu	r3,3(r2)
    38e4:	1806703a 	and	r3,r3,zero
    38e8:	1809883a 	mov	r4,r3
    38ec:	2807883a 	mov	r3,r5
    38f0:	20c6b03a 	or	r3,r4,r3
    38f4:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    38f8:	e0bfe103 	ldbu	r2,-124(fp)
    38fc:	1000e61e 	bne	r2,zero,3c98 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    3900:	e0bfe217 	ldw	r2,-120(fp)
    3904:	10c00203 	ldbu	r3,8(r2)
    3908:	10800243 	ldbu	r2,9(r2)
    390c:	1004923a 	slli	r2,r2,8
    3910:	10c4b03a 	or	r2,r2,r3
    3914:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    3918:	e0bfe217 	ldw	r2,-120(fp)
    391c:	10c00283 	ldbu	r3,10(r2)
    3920:	108002c3 	ldbu	r2,11(r2)
    3924:	1004923a 	slli	r2,r2,8
    3928:	10c4b03a 	or	r2,r2,r3
    392c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3930:	e0bffc17 	ldw	r2,-16(fp)
    3934:	10800017 	ldw	r2,0(r2)
    3938:	10800604 	addi	r2,r2,24
    393c:	10800017 	ldw	r2,0(r2)
    3940:	e0ffe60b 	ldhu	r3,-104(fp)
    3944:	e13fe68b 	ldhu	r4,-102(fp)
    3948:	200d883a 	mov	r6,r4
    394c:	180b883a 	mov	r5,r3
    3950:	e13ffc17 	ldw	r4,-16(fp)
    3954:	103ee83a 	callr	r2
    3958:	1080005c 	xori	r2,r2,1
    395c:	10803fcc 	andi	r2,r2,255
    3960:	1000d51e 	bne	r2,zero,3cb8 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3964:	e0bfe517 	ldw	r2,-108(fp)
    3968:	10800017 	ldw	r2,0(r2)
    396c:	10800104 	addi	r2,r2,4
    3970:	10800017 	ldw	r2,0(r2)
    3974:	e0fffd03 	ldbu	r3,-12(fp)
    3978:	e13ffe03 	ldbu	r4,-8(fp)
    397c:	200f883a 	mov	r7,r4
    3980:	000d883a 	mov	r6,zero
    3984:	180b883a 	mov	r5,r3
    3988:	e13fe517 	ldw	r4,-108(fp)
    398c:	103ee83a 	callr	r2
    3990:	1007883a 	mov	r3,r2
    3994:	e0bffc17 	ldw	r2,-16(fp)
    3998:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    399c:	e0bffc17 	ldw	r2,-16(fp)
    39a0:	10800403 	ldbu	r2,16(r2)
    39a4:	10803fcc 	andi	r2,r2,255
    39a8:	1000021e 	bne	r2,zero,39b4 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    39ac:	00bff504 	movi	r2,-44
    39b0:	0000cf06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    39b4:	e0bfe217 	ldw	r2,-120(fp)
    39b8:	10c001c3 	ldbu	r3,7(r2)
    39bc:	e0bffc17 	ldw	r2,-16(fp)
    39c0:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    39c4:	e0bffc17 	ldw	r2,-16(fp)
    39c8:	10c00317 	ldw	r3,12(r2)
    39cc:	e0bffc17 	ldw	r2,-16(fp)
    39d0:	10800403 	ldbu	r2,16(r2)
    39d4:	10803fcc 	andi	r2,r2,255
    39d8:	100f883a 	mov	r7,r2
    39dc:	000d883a 	mov	r6,zero
    39e0:	000b883a 	mov	r5,zero
    39e4:	1809883a 	mov	r4,r3
    39e8:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    39ec:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    39f0:	e0bfe103 	ldbu	r2,-124(fp)
    39f4:	10001026 	beq	r2,zero,3a38 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    39f8:	e0bfe317 	ldw	r2,-116(fp)
    39fc:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    3a00:	e0bfe517 	ldw	r2,-108(fp)
    3a04:	10800017 	ldw	r2,0(r2)
    3a08:	10800204 	addi	r2,r2,8
    3a0c:	10800017 	ldw	r2,0(r2)
    3a10:	e0fffc17 	ldw	r3,-16(fp)
    3a14:	18c00403 	ldbu	r3,16(r3)
    3a18:	18c03fcc 	andi	r3,r3,255
    3a1c:	180b883a 	mov	r5,r3
    3a20:	e13fe517 	ldw	r4,-108(fp)
    3a24:	103ee83a 	callr	r2
                bAddress = 0;
    3a28:	e0bffc17 	ldw	r2,-16(fp)
    3a2c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3a30:	e0bfe103 	ldbu	r2,-124(fp)
    3a34:	0000ae06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3a38:	e0bfe317 	ldw	r2,-116(fp)
    3a3c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3a40:	e0bfe517 	ldw	r2,-108(fp)
    3a44:	10800017 	ldw	r2,0(r2)
    3a48:	10800017 	ldw	r2,0(r2)
    3a4c:	e0fffc17 	ldw	r3,-16(fp)
    3a50:	18c00403 	ldbu	r3,16(r3)
    3a54:	18c03fcc 	andi	r3,r3,255
    3a58:	180b883a 	mov	r5,r3
    3a5c:	e13fe517 	ldw	r4,-108(fp)
    3a60:	103ee83a 	callr	r2
    3a64:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3a68:	e0bfe317 	ldw	r2,-116(fp)
    3a6c:	1000021e 	bne	r2,zero,3a78 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3a70:	00bff584 	movi	r2,-42
    3a74:	00009e06 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3a78:	e0bfe317 	ldw	r2,-116(fp)
    3a7c:	e0ffff03 	ldbu	r3,-4(fp)
    3a80:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3a84:	e0bffc17 	ldw	r2,-16(fp)
    3a88:	10c00317 	ldw	r3,12(r2)
    3a8c:	e0bffc17 	ldw	r2,-16(fp)
    3a90:	10800403 	ldbu	r2,16(r2)
    3a94:	11003fcc 	andi	r4,r2,255
    3a98:	e0bffc17 	ldw	r2,-16(fp)
    3a9c:	10800444 	addi	r2,r2,17
    3aa0:	100f883a 	mov	r7,r2
    3aa4:	01800044 	movi	r6,1
    3aa8:	200b883a 	mov	r5,r4
    3aac:	1809883a 	mov	r4,r3
    3ab0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3ab4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3ab8:	e0bfe103 	ldbu	r2,-124(fp)
    3abc:	1000781e 	bne	r2,zero,3ca0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3ac0:	e0bfe217 	ldw	r2,-120(fp)
    3ac4:	10800443 	ldbu	r2,17(r2)
    3ac8:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    3acc:	e0bfe703 	ldbu	r2,-100(fp)
    3ad0:	01402004 	movi	r5,128
    3ad4:	1009883a 	mov	r4,r2
    3ad8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3adc:	e03fe145 	stb	zero,-123(fp)
    3ae0:	e0ffe143 	ldbu	r3,-123(fp)
    3ae4:	e0bfe703 	ldbu	r2,-100(fp)
    3ae8:	1880222e 	bgeu	r3,r2,3b74 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	10c00104 	addi	r3,r2,4
    3af4:	e0bfed04 	addi	r2,fp,-76
    3af8:	180b883a 	mov	r5,r3
    3afc:	1009883a 	mov	r4,r2
    3b00:	0004f240 	call	4f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	10c00317 	ldw	r3,12(r2)
    3b0c:	e0bffc17 	ldw	r2,-16(fp)
    3b10:	10800403 	ldbu	r2,16(r2)
    3b14:	11003fcc 	andi	r4,r2,255
    3b18:	e17fe143 	ldbu	r5,-123(fp)
    3b1c:	e0bfed04 	addi	r2,fp,-76
    3b20:	d8800015 	stw	r2,0(sp)
    3b24:	280f883a 	mov	r7,r5
    3b28:	000d883a 	mov	r6,zero
    3b2c:	200b883a 	mov	r5,r4
    3b30:	1809883a 	mov	r4,r3
    3b34:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3b38:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3b3c:	e0bfe103 	ldbu	r2,-124(fp)
    3b40:	10000226 	beq	r2,zero,3b4c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3b44:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3b48:	00006206 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3b4c:	e0bffc17 	ldw	r2,-16(fp)
    3b50:	108006c3 	ldbu	r2,27(r2)
    3b54:	10803fcc 	andi	r2,r2,255
    3b58:	108000f0 	cmpltui	r2,r2,3
    3b5c:	10000426 	beq	r2,zero,3b70 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3b60:	e0bfe143 	ldbu	r2,-123(fp)
    3b64:	10800044 	addi	r2,r2,1
    3b68:	e0bfe145 	stb	r2,-123(fp)
    3b6c:	003fdc06 	br	3ae0 <__alt_data_end+0xfc003ae0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3b70:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3b74:	e0bffc17 	ldw	r2,-16(fp)
    3b78:	108006c3 	ldbu	r2,27(r2)
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	108000e8 	cmpgeui	r2,r2,3
    3b84:	10004e26 	beq	r2,zero,3cc0 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3b88:	e0bffc17 	ldw	r2,-16(fp)
    3b8c:	10c00317 	ldw	r3,12(r2)
    3b90:	e0bffc17 	ldw	r2,-16(fp)
    3b94:	10800403 	ldbu	r2,16(r2)
    3b98:	11003fcc 	andi	r4,r2,255
    3b9c:	e0bffc17 	ldw	r2,-16(fp)
    3ba0:	108006c3 	ldbu	r2,27(r2)
    3ba4:	11403fcc 	andi	r5,r2,255
    3ba8:	e0bffc17 	ldw	r2,-16(fp)
    3bac:	10800444 	addi	r2,r2,17
    3bb0:	100f883a 	mov	r7,r2
    3bb4:	280d883a 	mov	r6,r5
    3bb8:	200b883a 	mov	r5,r4
    3bbc:	1809883a 	mov	r4,r3
    3bc0:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3bc4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3bc8:	e0bfe103 	ldbu	r2,-124(fp)
    3bcc:	1000361e 	bne	r2,zero,3ca8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    3bd0:	01003204 	movi	r4,200
    3bd4:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    3bd8:	e0bffc17 	ldw	r2,-16(fp)
    3bdc:	10c00317 	ldw	r3,12(r2)
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	10800403 	ldbu	r2,16(r2)
    3be8:	11003fcc 	andi	r4,r2,255
    3bec:	e0bffc17 	ldw	r2,-16(fp)
    3bf0:	10800443 	ldbu	r2,17(r2)
    3bf4:	11403fcc 	andi	r5,r2,255
    3bf8:	e0bffc17 	ldw	r2,-16(fp)
    3bfc:	10800683 	ldbu	r2,26(r2)
    3c00:	10803fcc 	andi	r2,r2,255
    3c04:	100f883a 	mov	r7,r2
    3c08:	280d883a 	mov	r6,r5
    3c0c:	200b883a 	mov	r5,r4
    3c10:	1809883a 	mov	r4,r3
    3c14:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    3c18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3c1c:	e0bfe103 	ldbu	r2,-124(fp)
    3c20:	1000231e 	bne	r2,zero,3cb0 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3c24:	01003204 	movi	r4,200
    3c28:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3c2c:	e0bffc17 	ldw	r2,-16(fp)
    3c30:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3c34:	00800144 	movi	r2,5
    3c38:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3c3c:	00800804 	movi	r2,32
    3c40:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3c44:	00800044 	movi	r2,1
    3c48:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3c4c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3c50:	e0bfebc4 	addi	r2,fp,-81
    3c54:	01800144 	movi	r6,5
    3c58:	100b883a 	mov	r5,r2
    3c5c:	e13ffc17 	ldw	r4,-16(fp)
    3c60:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
    3c64:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3c68:	e0bfe103 	ldbu	r2,-124(fp)
    3c6c:	1000181e 	bne	r2,zero,3cd0 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3c70:	e13ffc17 	ldw	r4,-16(fp)
    3c74:	00046180 	call	4618 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	00c00044 	movi	r3,1
    3c80:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	00c00044 	movi	r3,1
    3c8c:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3c90:	0005883a 	mov	r2,zero
    3c94:	00001606 	br	3cf0 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3c98:	0001883a 	nop
    3c9c:	00000d06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca0:	0001883a 	nop
    3ca4:	00000b06 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3ca8:	0001883a 	nop
    3cac:	00000906 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3cb0:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3cb4:	00000706 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3cb8:	0001883a 	nop
    3cbc:	00000106 	br	3cc4 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3cc0:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3cc4:	00bff444 	movi	r2,-47
    3cc8:	e0bfe105 	stb	r2,-124(fp)
    3ccc:	00000106 	br	3cd4 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    3cd0:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
    3cd8:	10800017 	ldw	r2,0(r2)
    3cdc:	10800204 	addi	r2,r2,8
    3ce0:	10800017 	ldw	r2,0(r2)
    3ce4:	e13ffc17 	ldw	r4,-16(fp)
    3ce8:	103ee83a 	callr	r2
        return rcode;
    3cec:	e0bfe103 	ldbu	r2,-124(fp)
}
    3cf0:	e037883a 	mov	sp,fp
    3cf4:	dfc00117 	ldw	ra,4(sp)
    3cf8:	df000017 	ldw	fp,0(sp)
    3cfc:	dec00204 	addi	sp,sp,8
    3d00:	f800283a 	ret

00003d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3d04:	defff904 	addi	sp,sp,-28
    3d08:	df000615 	stw	fp,24(sp)
    3d0c:	df000604 	addi	fp,sp,24
    3d10:	e13ffb15 	stw	r4,-20(fp)
    3d14:	3009883a 	mov	r4,r6
    3d18:	3807883a 	mov	r3,r7
    3d1c:	e0800117 	ldw	r2,4(fp)
    3d20:	e17ffc05 	stb	r5,-16(fp)
    3d24:	e13ffd05 	stb	r4,-12(fp)
    3d28:	e0fffe05 	stb	r3,-8(fp)
    3d2c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3d30:	e0bffb17 	ldw	r2,-20(fp)
    3d34:	e0fffc03 	ldbu	r3,-16(fp)
    3d38:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3d3c:	e0800217 	ldw	r2,8(fp)
    3d40:	108000c3 	ldbu	r2,3(r2)
    3d44:	10803fcc 	andi	r2,r2,255
    3d48:	108000cc 	andi	r2,r2,3
    3d4c:	108000d8 	cmpnei	r2,r2,3
    3d50:	1000361e 	bne	r2,zero,3e2c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3d54:	e0800217 	ldw	r2,8(fp)
    3d58:	10800083 	ldbu	r2,2(r2)
    3d5c:	10803fcc 	andi	r2,r2,255
    3d60:	1080201c 	xori	r2,r2,128
    3d64:	10bfe004 	addi	r2,r2,-128
    3d68:	1000020e 	bge	r2,zero,3d74 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3d6c:	00800084 	movi	r2,2
    3d70:	00000106 	br	3d78 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3d74:	00800044 	movi	r2,1
    3d78:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3d7c:	e0fffa03 	ldbu	r3,-24(fp)
    3d80:	e0800217 	ldw	r2,8(fp)
    3d84:	10800083 	ldbu	r2,2(r2)
    3d88:	108003cc 	andi	r2,r2,15
    3d8c:	100b883a 	mov	r5,r2
    3d90:	e13ffb17 	ldw	r4,-20(fp)
    3d94:	1805883a 	mov	r2,r3
    3d98:	1085883a 	add	r2,r2,r2
    3d9c:	10c5883a 	add	r2,r2,r3
    3da0:	2085883a 	add	r2,r4,r2
    3da4:	10800444 	addi	r2,r2,17
    3da8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3dac:	e0fffa03 	ldbu	r3,-24(fp)
    3db0:	e0800217 	ldw	r2,8(fp)
    3db4:	11000103 	ldbu	r4,4(r2)
    3db8:	10800143 	ldbu	r2,5(r2)
    3dbc:	1004923a 	slli	r2,r2,8
    3dc0:	1104b03a 	or	r2,r2,r4
    3dc4:	100b883a 	mov	r5,r2
    3dc8:	e13ffb17 	ldw	r4,-20(fp)
    3dcc:	1805883a 	mov	r2,r3
    3dd0:	1085883a 	add	r2,r2,r2
    3dd4:	10c5883a 	add	r2,r2,r3
    3dd8:	2085883a 	add	r2,r4,r2
    3ddc:	10800484 	addi	r2,r2,18
    3de0:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3de4:	e0bffb17 	ldw	r2,-20(fp)
    3de8:	10c00903 	ldbu	r3,36(r2)
    3dec:	e0800217 	ldw	r2,8(fp)
    3df0:	10800183 	ldbu	r2,6(r2)
    3df4:	18c03fcc 	andi	r3,r3,255
    3df8:	10803fcc 	andi	r2,r2,255
    3dfc:	1880042e 	bgeu	r3,r2,3e10 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3e00:	e0800217 	ldw	r2,8(fp)
    3e04:	10c00183 	ldbu	r3,6(r2)
    3e08:	e0bffb17 	ldw	r2,-20(fp)
    3e0c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3e10:	e0bffb17 	ldw	r2,-20(fp)
    3e14:	108006c3 	ldbu	r2,27(r2)
    3e18:	10800044 	addi	r2,r2,1
    3e1c:	1007883a 	mov	r3,r2
    3e20:	e0bffb17 	ldw	r2,-20(fp)
    3e24:	10c006c5 	stb	r3,27(r2)
    3e28:	00000106 	br	3e30 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3e2c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3e30:	e037883a 	mov	sp,fp
    3e34:	df000017 	ldw	fp,0(sp)
    3e38:	dec00104 	addi	sp,sp,4
    3e3c:	f800283a 	ret

00003e40 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3e40:	213fff04 	addi	r4,r4,-4
    3e44:	0003d041 	jmpi	3d04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003e48 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3e48:	defffd04 	addi	sp,sp,-12
    3e4c:	df000215 	stw	fp,8(sp)
    3e50:	df000204 	addi	fp,sp,8
    3e54:	e13ffe15 	stw	r4,-8(fp)
    3e58:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3e5c:	0001883a 	nop
    3e60:	e037883a 	mov	sp,fp
    3e64:	df000017 	ldw	fp,0(sp)
    3e68:	dec00104 	addi	sp,sp,4
    3e6c:	f800283a 	ret

00003e70 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3e70:	defffd04 	addi	sp,sp,-12
    3e74:	dfc00215 	stw	ra,8(sp)
    3e78:	df000115 	stw	fp,4(sp)
    3e7c:	df000104 	addi	fp,sp,4
    3e80:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3e84:	e0bfff17 	ldw	r2,-4(fp)
    3e88:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3e8c:	e0bfff17 	ldw	r2,-4(fp)
    3e90:	10800317 	ldw	r2,12(r2)
    3e94:	1009883a 	mov	r4,r2
    3e98:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    3e9c:	1009883a 	mov	r4,r2
    3ea0:	20800017 	ldw	r2,0(r4)
    3ea4:	10800204 	addi	r2,r2,8
    3ea8:	10800017 	ldw	r2,0(r2)
    3eac:	e0ffff17 	ldw	r3,-4(fp)
    3eb0:	18c00403 	ldbu	r3,16(r3)
    3eb4:	18c03fcc 	andi	r3,r3,255
    3eb8:	180b883a 	mov	r5,r3
    3ebc:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	00c00044 	movi	r3,1
    3ed0:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3ed4:	e0bfff17 	ldw	r2,-4(fp)
    3ed8:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3eec:	0005883a 	mov	r2,zero
}
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	dfc00117 	ldw	ra,4(sp)
    3ef8:	df000017 	ldw	fp,0(sp)
    3efc:	dec00204 	addi	sp,sp,8
    3f00:	f800283a 	ret

00003f04 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3f04:	defffa04 	addi	sp,sp,-24
    3f08:	dfc00515 	stw	ra,20(sp)
    3f0c:	df000415 	stw	fp,16(sp)
    3f10:	df000404 	addi	fp,sp,16
    3f14:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3f18:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	10800943 	ldbu	r2,37(r2)
    3f24:	1080005c 	xori	r2,r2,1
    3f28:	10803fcc 	andi	r2,r2,255
    3f2c:	10000226 	beq	r2,zero,3f38 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3f30:	0005883a 	mov	r2,zero
    3f34:	00002c06 	br	3fe8 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3f38:	00006dc0 	call	6dc <_Z6millisv>
    3f3c:	1007883a 	mov	r3,r2
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	10800717 	ldw	r2,28(r2)
    3f48:	1885c83a 	sub	r2,r3,r2
    3f4c:	0084303a 	nor	r2,zero,r2
    3f50:	1004d7fa 	srli	r2,r2,31
    3f54:	10803fcc 	andi	r2,r2,255
    3f58:	10002226 	beq	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3f5c:	00006dc0 	call	6dc <_Z6millisv>
    3f60:	1007883a 	mov	r3,r2
    3f64:	e0bfff17 	ldw	r2,-4(fp)
    3f68:	10800903 	ldbu	r2,36(r2)
    3f6c:	10803fcc 	andi	r2,r2,255
    3f70:	1887883a 	add	r3,r3,r2
    3f74:	e0bfff17 	ldw	r2,-4(fp)
    3f78:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10800603 	ldbu	r2,24(r2)
    3f84:	10803fcc 	andi	r2,r2,255
    3f88:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3f8c:	e0bfff17 	ldw	r2,-4(fp)
    3f90:	11000317 	ldw	r4,12(r2)
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	10800403 	ldbu	r2,16(r2)
    3f9c:	11403fcc 	andi	r5,r2,255
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	108005c3 	ldbu	r2,23(r2)
    3fa8:	11803fcc 	andi	r6,r2,255
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	10800f84 	addi	r2,r2,62
    3fb4:	e0ffff17 	ldw	r3,-4(fp)
    3fb8:	18c00903 	ldbu	r3,36(r3)
    3fbc:	18c03fcc 	andi	r3,r3,255
    3fc0:	e1fffe84 	addi	r7,fp,-6
    3fc4:	d8c00115 	stw	r3,4(sp)
    3fc8:	d8800015 	stw	r2,0(sp)
    3fcc:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3fd0:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3fd4:	e0bffe43 	ldbu	r2,-7(fp)
    3fd8:	1000021e 	bne	r2,zero,3fe4 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3fdc:	e13fff17 	ldw	r4,-4(fp)
    3fe0:	0003ffc0 	call	3ffc <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3fe4:	e0bffe03 	ldbu	r2,-8(fp)
}
    3fe8:	e037883a 	mov	sp,fp
    3fec:	dfc00117 	ldw	ra,4(sp)
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00204 	addi	sp,sp,8
    3ff8:	f800283a 	ret

00003ffc <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3ffc:	defffd04 	addi	sp,sp,-12
    4000:	df000215 	stw	fp,8(sp)
    4004:	df000204 	addi	fp,sp,8
    4008:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10800f83 	ldbu	r2,62(r2)
    4014:	10803fcc 	andi	r2,r2,255
    4018:	108001d8 	cmpnei	r2,r2,7
    401c:	10002f1e 	bne	r2,zero,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    4020:	e0bfff17 	ldw	r2,-4(fp)
    4024:	10801083 	ldbu	r2,66(r2)
    4028:	10803fcc 	andi	r2,r2,255
    402c:	10800058 	cmpnei	r2,r2,1
    4030:	10000a1e 	bne	r2,zero,405c <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4034:	e0bfff17 	ldw	r2,-4(fp)
    4038:	10c0098b 	ldhu	r3,38(r2)
    403c:	008000b4 	movhi	r2,2
    4040:	10937084 	addi	r2,r2,19906
    4044:	1080000b 	ldhu	r2,0(r2)
    4048:	1884b03a 	or	r2,r3,r2
    404c:	1007883a 	mov	r3,r2
    4050:	e0bfff17 	ldw	r2,-4(fp)
    4054:	10c0098d 	sth	r3,38(r2)
    4058:	00000b06 	br	4088 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    405c:	e0bfff17 	ldw	r2,-4(fp)
    4060:	1080098b 	ldhu	r2,38(r2)
    4064:	1007883a 	mov	r3,r2
    4068:	008000b4 	movhi	r2,2
    406c:	10937084 	addi	r2,r2,19906
    4070:	1080000b 	ldhu	r2,0(r2)
    4074:	0084303a 	nor	r2,zero,r2
    4078:	1884703a 	and	r2,r3,r2
    407c:	1007883a 	mov	r3,r2
    4080:	e0bfff17 	ldw	r2,-4(fp)
    4084:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	10c0098b 	ldhu	r3,38(r2)
    4090:	e0bfff17 	ldw	r2,-4(fp)
    4094:	10800a0b 	ldhu	r2,40(r2)
    4098:	18ffffcc 	andi	r3,r3,65535
    409c:	10bfffcc 	andi	r2,r2,65535
    40a0:	18800e26 	beq	r3,r2,40dc <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    40a4:	e0bfff17 	ldw	r2,-4(fp)
    40a8:	1080098b 	ldhu	r2,38(r2)
    40ac:	1007883a 	mov	r3,r2
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	10800a0b 	ldhu	r2,40(r2)
    40b8:	0084303a 	nor	r2,zero,r2
    40bc:	1884703a 	and	r2,r3,r2
    40c0:	1007883a 	mov	r3,r2
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    40cc:	e0bfff17 	ldw	r2,-4(fp)
    40d0:	10c0098b 	ldhu	r3,38(r2)
    40d4:	e0bfff17 	ldw	r2,-4(fp)
    40d8:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    40dc:	e0bfff17 	ldw	r2,-4(fp)
    40e0:	10800f83 	ldbu	r2,62(r2)
    40e4:	10803fcc 	andi	r2,r2,255
    40e8:	10800820 	cmpeqi	r2,r2,32
    40ec:	1000b026 	beq	r2,zero,43b0 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    40f0:	e0bfff17 	ldw	r2,-4(fp)
    40f4:	10c0098b 	ldhu	r3,38(r2)
    40f8:	008000b4 	movhi	r2,2
    40fc:	10937084 	addi	r2,r2,19906
    4100:	1080000b 	ldhu	r2,0(r2)
    4104:	1884703a 	and	r2,r3,r2
    4108:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	108010c3 	ldbu	r2,67(r2)
    4114:	10803fcc 	andi	r2,r2,255
    4118:	108003cc 	andi	r2,r2,15
    411c:	1004923a 	slli	r2,r2,8
    4120:	1007883a 	mov	r3,r2
    4124:	e0bffe0b 	ldhu	r2,-8(fp)
    4128:	1884b03a 	or	r2,r3,r2
    412c:	1007883a 	mov	r3,r2
    4130:	e0bfff17 	ldw	r2,-4(fp)
    4134:	10801083 	ldbu	r2,66(r2)
    4138:	10803fcc 	andi	r2,r2,255
    413c:	10803c0c 	andi	r2,r2,240
    4140:	1884b03a 	or	r2,r3,r2
    4144:	1007883a 	mov	r3,r2
    4148:	e0bfff17 	ldw	r2,-4(fp)
    414c:	10801083 	ldbu	r2,66(r2)
    4150:	10803fcc 	andi	r2,r2,255
    4154:	1080030c 	andi	r2,r2,12
    4158:	100492ba 	slli	r2,r2,10
    415c:	1884b03a 	or	r2,r3,r2
    4160:	1007883a 	mov	r3,r2
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10801083 	ldbu	r2,66(r2)
    416c:	10803fcc 	andi	r2,r2,255
    4170:	1080004c 	andi	r2,r2,1
    4174:	100490fa 	slli	r2,r2,3
    4178:	1884b03a 	or	r2,r3,r2
    417c:	1007883a 	mov	r3,r2
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	108010c3 	ldbu	r2,67(r2)
    4188:	10803fcc 	andi	r2,r2,255
    418c:	1080300c 	andi	r2,r2,192
    4190:	1004923a 	slli	r2,r2,8
    4194:	1884b03a 	or	r2,r3,r2
    4198:	1007883a 	mov	r3,r2
    419c:	e0bfff17 	ldw	r2,-4(fp)
    41a0:	108010c3 	ldbu	r2,67(r2)
    41a4:	10803fcc 	andi	r2,r2,255
    41a8:	10800c0c 	andi	r2,r2,48
    41ac:	1005d13a 	srai	r2,r2,4
    41b0:	1884b03a 	or	r2,r3,r2
    41b4:	1007883a 	mov	r3,r2
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    41c0:	e0bfff17 	ldw	r2,-4(fp)
    41c4:	10801143 	ldbu	r2,69(r2)
    41c8:	10803fcc 	andi	r2,r2,255
    41cc:	1004923a 	slli	r2,r2,8
    41d0:	1007883a 	mov	r3,r2
    41d4:	e0bfff17 	ldw	r2,-4(fp)
    41d8:	10801103 	ldbu	r2,68(r2)
    41dc:	10803fcc 	andi	r2,r2,255
    41e0:	1884b03a 	or	r2,r3,r2
    41e4:	1007883a 	mov	r3,r2
    41e8:	e0bfff17 	ldw	r2,-4(fp)
    41ec:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    41f0:	e0bfff17 	ldw	r2,-4(fp)
    41f4:	108011c3 	ldbu	r2,71(r2)
    41f8:	10803fcc 	andi	r2,r2,255
    41fc:	1004923a 	slli	r2,r2,8
    4200:	1007883a 	mov	r3,r2
    4204:	e0bfff17 	ldw	r2,-4(fp)
    4208:	10801183 	ldbu	r2,70(r2)
    420c:	10803fcc 	andi	r2,r2,255
    4210:	1884b03a 	or	r2,r3,r2
    4214:	1007883a 	mov	r3,r2
    4218:	e0bfff17 	ldw	r2,-4(fp)
    421c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    4220:	e0bfff17 	ldw	r2,-4(fp)
    4224:	10801243 	ldbu	r2,73(r2)
    4228:	10803fcc 	andi	r2,r2,255
    422c:	1004923a 	slli	r2,r2,8
    4230:	1007883a 	mov	r3,r2
    4234:	e0bfff17 	ldw	r2,-4(fp)
    4238:	10801203 	ldbu	r2,72(r2)
    423c:	10803fcc 	andi	r2,r2,255
    4240:	1884b03a 	or	r2,r3,r2
    4244:	1007883a 	mov	r3,r2
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	108012c3 	ldbu	r2,75(r2)
    4258:	10803fcc 	andi	r2,r2,255
    425c:	1004923a 	slli	r2,r2,8
    4260:	1007883a 	mov	r3,r2
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10801283 	ldbu	r2,74(r2)
    426c:	10803fcc 	andi	r2,r2,255
    4270:	1884b03a 	or	r2,r3,r2
    4274:	1007883a 	mov	r3,r2
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    4280:	e0bfff17 	ldw	r2,-4(fp)
    4284:	10801343 	ldbu	r2,77(r2)
    4288:	10803fcc 	andi	r2,r2,255
    428c:	1004923a 	slli	r2,r2,8
    4290:	1007883a 	mov	r3,r2
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10801303 	ldbu	r2,76(r2)
    429c:	10803fcc 	andi	r2,r2,255
    42a0:	1884b03a 	or	r2,r3,r2
    42a4:	1007883a 	mov	r3,r2
    42a8:	e0bfff17 	ldw	r2,-4(fp)
    42ac:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    42b0:	e0bfff17 	ldw	r2,-4(fp)
    42b4:	108013c3 	ldbu	r2,79(r2)
    42b8:	10803fcc 	andi	r2,r2,255
    42bc:	1004923a 	slli	r2,r2,8
    42c0:	1007883a 	mov	r3,r2
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	10801383 	ldbu	r2,78(r2)
    42cc:	10803fcc 	andi	r2,r2,255
    42d0:	1884b03a 	or	r2,r3,r2
    42d4:	1007883a 	mov	r3,r2
    42d8:	e0bfff17 	ldw	r2,-4(fp)
    42dc:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    42e0:	e0bfff17 	ldw	r2,-4(fp)
    42e4:	10c0098b 	ldhu	r3,38(r2)
    42e8:	e0bfff17 	ldw	r2,-4(fp)
    42ec:	10800a0b 	ldhu	r2,40(r2)
    42f0:	18ffffcc 	andi	r3,r3,65535
    42f4:	10bfffcc 	andi	r2,r2,65535
    42f8:	18800e26 	beq	r3,r2,4334 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	1080098b 	ldhu	r2,38(r2)
    4304:	1007883a 	mov	r3,r2
    4308:	e0bfff17 	ldw	r2,-4(fp)
    430c:	10800a0b 	ldhu	r2,40(r2)
    4310:	0084303a 	nor	r2,zero,r2
    4314:	1884703a 	and	r2,r3,r2
    4318:	1007883a 	mov	r3,r2
    431c:	e0bfff17 	ldw	r2,-4(fp)
    4320:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	10c0098b 	ldhu	r3,38(r2)
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	10800d0b 	ldhu	r2,52(r2)
    433c:	10bfffcc 	andi	r2,r2,65535
    4340:	10000726 	beq	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	10800e0b 	ldhu	r2,56(r2)
    434c:	10bfffcc 	andi	r2,r2,65535
    4350:	1000031e 	bne	r2,zero,4360 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    4354:	e0bfff17 	ldw	r2,-4(fp)
    4358:	00c00044 	movi	r3,1
    435c:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    4360:	e0bfff17 	ldw	r2,-4(fp)
    4364:	10c00d0b 	ldhu	r3,52(r2)
    4368:	e0bfff17 	ldw	r2,-4(fp)
    436c:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10800d8b 	ldhu	r2,54(r2)
    4378:	10bfffcc 	andi	r2,r2,65535
    437c:	10000726 	beq	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
    4380:	e0bfff17 	ldw	r2,-4(fp)
    4384:	10800e8b 	ldhu	r2,58(r2)
    4388:	10bfffcc 	andi	r2,r2,65535
    438c:	1000031e 	bne	r2,zero,439c <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	00c00044 	movi	r3,1
    4398:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    439c:	e0bfff17 	ldw	r2,-4(fp)
    43a0:	10c00d8b 	ldhu	r3,54(r2)
    43a4:	e0bfff17 	ldw	r2,-4(fp)
    43a8:	10c00e8d 	sth	r3,58(r2)
    43ac:	00000106 	br	43b4 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    43b0:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    43b4:	e037883a 	mov	sp,fp
    43b8:	df000017 	ldw	fp,0(sp)
    43bc:	dec00104 	addi	sp,sp,4
    43c0:	f800283a 	ret

000043c4 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    43c4:	defffd04 	addi	sp,sp,-12
    43c8:	df000215 	stw	fp,8(sp)
    43cc:	df000204 	addi	fp,sp,8
    43d0:	e13ffe15 	stw	r4,-8(fp)
    43d4:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    43d8:	e0bfff17 	ldw	r2,-4(fp)
    43dc:	10800218 	cmpnei	r2,r2,8
    43e0:	1000031e 	bne	r2,zero,43f0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    43e4:	e0bffe17 	ldw	r2,-8(fp)
    43e8:	10800d0b 	ldhu	r2,52(r2)
    43ec:	00001306 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    43f0:	e0bfff17 	ldw	r2,-4(fp)
    43f4:	10800258 	cmpnei	r2,r2,9
    43f8:	1000031e 	bne	r2,zero,4408 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    43fc:	e0bffe17 	ldw	r2,-8(fp)
    4400:	10800d8b 	ldhu	r2,54(r2)
    4404:	00000d06 	br	443c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    4408:	e0bffe17 	ldw	r2,-8(fp)
    440c:	10c0098b 	ldhu	r3,38(r2)
    4410:	e0bfff17 	ldw	r2,-4(fp)
    4414:	10803fcc 	andi	r2,r2,255
    4418:	1089883a 	add	r4,r2,r2
    441c:	008000b4 	movhi	r2,2
    4420:	10936884 	addi	r2,r2,19874
    4424:	2085883a 	add	r2,r4,r2
    4428:	1080000b 	ldhu	r2,0(r2)
    442c:	1884703a 	and	r2,r3,r2
    4430:	10bfffcc 	andi	r2,r2,65535
    4434:	1004c03a 	cmpne	r2,r2,zero
    4438:	10803fcc 	andi	r2,r2,255
}
    443c:	e037883a 	mov	sp,fp
    4440:	df000017 	ldw	fp,0(sp)
    4444:	dec00104 	addi	sp,sp,4
    4448:	f800283a 	ret

0000444c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    444c:	defffc04 	addi	sp,sp,-16
    4450:	df000315 	stw	fp,12(sp)
    4454:	df000304 	addi	fp,sp,12
    4458:	e13ffe15 	stw	r4,-8(fp)
    445c:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    4460:	e0bfff17 	ldw	r2,-4(fp)
    4464:	10800218 	cmpnei	r2,r2,8
    4468:	10000a1e 	bne	r2,zero,4494 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    446c:	e0bffe17 	ldw	r2,-8(fp)
    4470:	10800f03 	ldbu	r2,60(r2)
    4474:	10803fcc 	andi	r2,r2,255
    4478:	10000426 	beq	r2,zero,448c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	10000f05 	stb	zero,60(r2)
                        return true;
    4484:	00800044 	movi	r2,1
    4488:	00002806 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    448c:	0005883a 	mov	r2,zero
    4490:	00002606 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10800258 	cmpnei	r2,r2,9
    449c:	10000a1e 	bne	r2,zero,44c8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    44a0:	e0bffe17 	ldw	r2,-8(fp)
    44a4:	10800f43 	ldbu	r2,61(r2)
    44a8:	10803fcc 	andi	r2,r2,255
    44ac:	10000426 	beq	r2,zero,44c0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    44b0:	e0bffe17 	ldw	r2,-8(fp)
    44b4:	10000f45 	stb	zero,61(r2)
                        return true;
    44b8:	00800044 	movi	r2,1
    44bc:	00001b06 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    44c0:	0005883a 	mov	r2,zero
    44c4:	00001906 	br	452c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	10803fcc 	andi	r2,r2,255
    44d0:	1087883a 	add	r3,r2,r2
    44d4:	008000b4 	movhi	r2,2
    44d8:	10936884 	addi	r2,r2,19874
    44dc:	1885883a 	add	r2,r3,r2
    44e0:	1080000b 	ldhu	r2,0(r2)
    44e4:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	10c00a8b 	ldhu	r3,42(r2)
    44f0:	e0bffd0b 	ldhu	r2,-12(fp)
    44f4:	1884703a 	and	r2,r3,r2
    44f8:	10bfffcc 	andi	r2,r2,65535
    44fc:	1004c03a 	cmpne	r2,r2,zero
    4500:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10800a8b 	ldhu	r2,42(r2)
    450c:	1007883a 	mov	r3,r2
    4510:	e0bffd0b 	ldhu	r2,-12(fp)
    4514:	0084303a 	nor	r2,zero,r2
    4518:	1884703a 	and	r2,r3,r2
    451c:	1007883a 	mov	r3,r2
    4520:	e0bffe17 	ldw	r2,-8(fp)
    4524:	10c00a8d 	sth	r3,42(r2)
        return click;
    4528:	e0bffd83 	ldbu	r2,-10(fp)
}
    452c:	e037883a 	mov	sp,fp
    4530:	df000017 	ldw	fp,0(sp)
    4534:	dec00104 	addi	sp,sp,4
    4538:	f800283a 	ret

0000453c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    453c:	defffd04 	addi	sp,sp,-12
    4540:	df000215 	stw	fp,8(sp)
    4544:	df000204 	addi	fp,sp,8
    4548:	e13ffe15 	stw	r4,-8(fp)
    454c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	e0fffe17 	ldw	r3,-8(fp)
    4558:	10800584 	addi	r2,r2,22
    455c:	1085883a 	add	r2,r2,r2
    4560:	1885883a 	add	r2,r3,r2
    4564:	1080000b 	ldhu	r2,0(r2)
}
    4568:	e037883a 	mov	sp,fp
    456c:	df000017 	ldw	fp,0(sp)
    4570:	dec00104 	addi	sp,sp,4
    4574:	f800283a 	ret

00004578 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4578:	defff904 	addi	sp,sp,-28
    457c:	dfc00615 	stw	ra,24(sp)
    4580:	df000515 	stw	fp,20(sp)
    4584:	df000504 	addi	fp,sp,20
    4588:	e13ffd15 	stw	r4,-12(fp)
    458c:	e17ffe15 	stw	r5,-8(fp)
    4590:	3005883a 	mov	r2,r6
    4594:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10c00084 	addi	r3,r2,2
    45a0:	e0bffd17 	ldw	r2,-12(fp)
    45a4:	10801f83 	ldbu	r2,126(r2)
    45a8:	11000044 	addi	r4,r2,1
    45ac:	200b883a 	mov	r5,r4
    45b0:	e13ffd17 	ldw	r4,-12(fp)
    45b4:	21401f85 	stb	r5,126(r4)
    45b8:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    45bc:	e0bffd17 	ldw	r2,-12(fp)
    45c0:	10c00317 	ldw	r3,12(r2)
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	10800403 	ldbu	r2,16(r2)
    45cc:	11003fcc 	andi	r4,r2,255
    45d0:	e0bffd17 	ldw	r2,-12(fp)
    45d4:	10800503 	ldbu	r2,20(r2)
    45d8:	11403fcc 	andi	r5,r2,255
    45dc:	e1bfff0b 	ldhu	r6,-4(fp)
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	d8800015 	stw	r2,0(sp)
    45e8:	300f883a 	mov	r7,r6
    45ec:	280d883a 	mov	r6,r5
    45f0:	200b883a 	mov	r5,r4
    45f4:	1809883a 	mov	r4,r3
    45f8:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    45fc:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    4600:	e0bffc03 	ldbu	r2,-16(fp)
}
    4604:	e037883a 	mov	sp,fp
    4608:	dfc00117 	ldw	ra,4(sp)
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00204 	addi	sp,sp,8
    4614:	f800283a 	ret

00004618 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    4618:	defff904 	addi	sp,sp,-28
    461c:	dfc00615 	stw	ra,24(sp)
    4620:	df000515 	stw	fp,20(sp)
    4624:	df000504 	addi	fp,sp,20
    4628:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    462c:	00800244 	movi	r2,9
    4630:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4634:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4638:	00800244 	movi	r2,9
    463c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4640:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4644:	008003c4 	movi	r2,15
    4648:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    464c:	00800104 	movi	r2,4
    4650:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4654:	00800104 	movi	r2,4
    4658:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    465c:	00800804 	movi	r2,32
    4660:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4664:	00800804 	movi	r2,32
    4668:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    466c:	00bfe004 	movi	r2,-128
    4670:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4674:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4678:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    467c:	01800344 	movi	r6,13
    4680:	e17ffb04 	addi	r5,fp,-20
    4684:	e13fff17 	ldw	r4,-4(fp)
    4688:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    468c:	e0bfff17 	ldw	r2,-4(fp)
    4690:	10800817 	ldw	r2,32(r2)
    4694:	10000326 	beq	r2,zero,46a4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4698:	e0bfff17 	ldw	r2,-4(fp)
    469c:	10800817 	ldw	r2,32(r2)
    46a0:	103ee83a 	callr	r2
}
    46a4:	0001883a 	nop
    46a8:	e037883a 	mov	sp,fp
    46ac:	dfc00117 	ldw	ra,4(sp)
    46b0:	df000017 	ldw	fp,0(sp)
    46b4:	dec00204 	addi	sp,sp,8
    46b8:	f800283a 	ret

000046bc <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    46bc:	defff904 	addi	sp,sp,-28
    46c0:	dfc00615 	stw	ra,24(sp)
    46c4:	df000515 	stw	fp,20(sp)
    46c8:	df000504 	addi	fp,sp,20
    46cc:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    46d0:	00800244 	movi	r2,9
    46d4:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    46d8:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    46dc:	00800244 	movi	r2,9
    46e0:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    46e4:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    46e8:	008003c4 	movi	r2,15
    46ec:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    46f0:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    46f4:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    46f8:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    46fc:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    4700:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4704:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4708:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    470c:	01800344 	movi	r6,13
    4710:	e17ffb04 	addi	r5,fp,-20
    4714:	e13fff17 	ldw	r4,-4(fp)
    4718:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    471c:	0001883a 	nop
    4720:	e037883a 	mov	sp,fp
    4724:	dfc00117 	ldw	ra,4(sp)
    4728:	df000017 	ldw	fp,0(sp)
    472c:	dec00204 	addi	sp,sp,8
    4730:	f800283a 	ret

00004734 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4734:	defff504 	addi	sp,sp,-44
    4738:	dfc00a15 	stw	ra,40(sp)
    473c:	df000915 	stw	fp,36(sp)
    4740:	df000904 	addi	fp,sp,36
    4744:	e13ffb15 	stw	r4,-20(fp)
    4748:	3009883a 	mov	r4,r6
    474c:	3807883a 	mov	r3,r7
    4750:	e0800217 	ldw	r2,8(fp)
    4754:	e17ffc05 	stb	r5,-16(fp)
    4758:	e13ffd05 	stb	r4,-12(fp)
    475c:	e0fffe05 	stb	r3,-8(fp)
    4760:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4764:	00800244 	movi	r2,9
    4768:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    476c:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4770:	00800244 	movi	r2,9
    4774:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4778:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    477c:	008003c4 	movi	r2,15
    4780:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4784:	e0bffc03 	ldbu	r2,-16(fp)
    4788:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    478c:	e0bffd03 	ldbu	r2,-12(fp)
    4790:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4794:	e0bffe03 	ldbu	r2,-8(fp)
    4798:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    479c:	e0bfff03 	ldbu	r2,-4(fp)
    47a0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    47a4:	00bfffc4 	movi	r2,-1
    47a8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    47ac:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    47b0:	00bfffc4 	movi	r2,-1
    47b4:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    47b8:	01800344 	movi	r6,13
    47bc:	e17ff704 	addi	r5,fp,-36
    47c0:	e13ffb17 	ldw	r4,-20(fp)
    47c4:	00045780 	call	4578 <_ZN7XBOXONE11XboxCommandEPht>
}
    47c8:	0001883a 	nop
    47cc:	e037883a 	mov	sp,fp
    47d0:	dfc00117 	ldw	ra,4(sp)
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00204 	addi	sp,sp,8
    47dc:	f800283a 	ret

000047e0 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    47e0:	defffe04 	addi	sp,sp,-8
    47e4:	df000115 	stw	fp,4(sp)
    47e8:	df000104 	addi	fp,sp,4
    47ec:	e13fff15 	stw	r4,-4(fp)
    47f0:	e0bfff17 	ldw	r2,-4(fp)
    47f4:	10000005 	stb	zero,0(r2)
    47f8:	e0bfff17 	ldw	r2,-4(fp)
    47fc:	10c00043 	ldbu	r3,1(r2)
    4800:	1806703a 	and	r3,r3,zero
    4804:	10c00045 	stb	r3,1(r2)
    4808:	10c00083 	ldbu	r3,2(r2)
    480c:	1806703a 	and	r3,r3,zero
    4810:	10c00085 	stb	r3,2(r2)
    4814:	10c000c3 	ldbu	r3,3(r2)
    4818:	1806703a 	and	r3,r3,zero
    481c:	10c000c5 	stb	r3,3(r2)
    4820:	10c00103 	ldbu	r3,4(r2)
    4824:	1806703a 	and	r3,r3,zero
    4828:	10c00105 	stb	r3,4(r2)
        };
    482c:	0001883a 	nop
    4830:	e037883a 	mov	sp,fp
    4834:	df000017 	ldw	fp,0(sp)
    4838:	dec00104 	addi	sp,sp,4
    483c:	f800283a 	ret

00004840 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    4840:	defffe04 	addi	sp,sp,-8
    4844:	df000115 	stw	fp,4(sp)
    4848:	df000104 	addi	fp,sp,4
    484c:	e13fff15 	stw	r4,-4(fp)
    4850:	e0bfff17 	ldw	r2,-4(fp)
    4854:	10000015 	stw	zero,0(r2)
    4858:	e0bfff17 	ldw	r2,-4(fp)
    485c:	10000105 	stb	zero,4(r2)
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	10000145 	stb	zero,5(r2)
        };
    4868:	0001883a 	nop
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    487c:	defffd04 	addi	sp,sp,-12
    4880:	df000215 	stw	fp,8(sp)
    4884:	df000204 	addi	fp,sp,8
    4888:	e13ffe15 	stw	r4,-8(fp)
    488c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10c00043 	ldbu	r3,1(r2)
    4898:	11000083 	ldbu	r4,2(r2)
    489c:	2008923a 	slli	r4,r4,8
    48a0:	20c6b03a 	or	r3,r4,r3
    48a4:	110000c3 	ldbu	r4,3(r2)
    48a8:	2008943a 	slli	r4,r4,16
    48ac:	20c6b03a 	or	r3,r4,r3
    48b0:	10800103 	ldbu	r2,4(r2)
    48b4:	1004963a 	slli	r2,r2,24
    48b8:	10c4b03a 	or	r2,r2,r3
    48bc:	1007883a 	mov	r3,r2
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	10c00003 	ldbu	r3,0(r2)
    48d0:	e0bffe17 	ldw	r2,-8(fp)
    48d4:	10c00145 	stb	r3,5(r2)
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	10c00143 	ldbu	r3,5(r2)
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	10c00105 	stb	r3,4(r2)
        };
    48e8:	0001883a 	nop
    48ec:	e037883a 	mov	sp,fp
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00104 	addi	sp,sp,4
    48f8:	f800283a 	ret

000048fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    48fc:	defffe04 	addi	sp,sp,-8
    4900:	df000115 	stw	fp,4(sp)
    4904:	df000104 	addi	fp,sp,4
    4908:	e13fff15 	stw	r4,-4(fp)
    490c:	e0bfff17 	ldw	r2,-4(fp)
    4910:	10000015 	stw	zero,0(r2)
    4914:	e0bfff17 	ldw	r2,-4(fp)
    4918:	10000105 	stb	zero,4(r2)
    491c:	e0bfff17 	ldw	r2,-4(fp)
    4920:	1000018d 	sth	zero,6(r2)
        };
    4924:	0001883a 	nop
    4928:	e037883a 	mov	sp,fp
    492c:	df000017 	ldw	fp,0(sp)
    4930:	dec00104 	addi	sp,sp,4
    4934:	f800283a 	ret

00004938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4938:	defffd04 	addi	sp,sp,-12
    493c:	df000215 	stw	fp,8(sp)
    4940:	df000204 	addi	fp,sp,8
    4944:	e13ffe15 	stw	r4,-8(fp)
    4948:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    494c:	e0bfff17 	ldw	r2,-4(fp)
    4950:	10c00043 	ldbu	r3,1(r2)
    4954:	11000083 	ldbu	r4,2(r2)
    4958:	2008923a 	slli	r4,r4,8
    495c:	20c6b03a 	or	r3,r4,r3
    4960:	110000c3 	ldbu	r4,3(r2)
    4964:	2008943a 	slli	r4,r4,16
    4968:	20c6b03a 	or	r3,r4,r3
    496c:	10800103 	ldbu	r2,4(r2)
    4970:	1004963a 	slli	r2,r2,24
    4974:	10c4b03a 	or	r2,r2,r3
    4978:	1007883a 	mov	r3,r2
    497c:	e0bffe17 	ldw	r2,-8(fp)
    4980:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4984:	e0bffe17 	ldw	r2,-8(fp)
    4988:	1000018d 	sth	zero,6(r2)
        };
    498c:	0001883a 	nop
    4990:	e037883a 	mov	sp,fp
    4994:	df000017 	ldw	fp,0(sp)
    4998:	dec00104 	addi	sp,sp,4
    499c:	f800283a 	ret

000049a0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    49a0:	defffb04 	addi	sp,sp,-20
    49a4:	df000415 	stw	fp,16(sp)
    49a8:	df000404 	addi	fp,sp,16
    49ac:	e13ffc15 	stw	r4,-16(fp)
    49b0:	e17ffd15 	stw	r5,-12(fp)
    49b4:	e1bffe15 	stw	r6,-8(fp)
    49b8:	3805883a 	mov	r2,r7
    49bc:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    49c0:	e0bffc17 	ldw	r2,-16(fp)
    49c4:	10800103 	ldbu	r2,4(r2)
    49c8:	10803fcc 	andi	r2,r2,255
    49cc:	10000326 	beq	r2,zero,49dc <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    49d0:	10800060 	cmpeqi	r2,r2,1
    49d4:	10000a1e 	bne	r2,zero,4a00 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    49d8:	00002906 	br	4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    49dc:	e0bffc17 	ldw	r2,-16(fp)
    49e0:	e0ffff0b 	ldhu	r3,-4(fp)
    49e4:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    49e8:	e0bffc17 	ldw	r2,-16(fp)
    49ec:	10800103 	ldbu	r2,4(r2)
    49f0:	10800044 	addi	r2,r2,1
    49f4:	1007883a 	mov	r3,r2
    49f8:	e0bffc17 	ldw	r2,-16(fp)
    49fc:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	1080018b 	ldhu	r2,6(r2)
    4a08:	10bfffcc 	andi	r2,r2,65535
    4a0c:	10001626 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a10:	e0bffe17 	ldw	r2,-8(fp)
    4a14:	1080000b 	ldhu	r2,0(r2)
    4a18:	10bfffcc 	andi	r2,r2,65535
    4a1c:	10001226 	beq	r2,zero,4a68 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4a20:	e0bffc17 	ldw	r2,-16(fp)
    4a24:	1080018b 	ldhu	r2,6(r2)
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	1007883a 	mov	r3,r2
    4a30:	e0bffc17 	ldw	r2,-16(fp)
    4a34:	10c0018d 	sth	r3,6(r2)
    4a38:	e0bffd17 	ldw	r2,-12(fp)
    4a3c:	10800017 	ldw	r2,0(r2)
    4a40:	10c00044 	addi	r3,r2,1
    4a44:	e0bffd17 	ldw	r2,-12(fp)
    4a48:	10c00015 	stw	r3,0(r2)
    4a4c:	e0bffe17 	ldw	r2,-8(fp)
    4a50:	1080000b 	ldhu	r2,0(r2)
    4a54:	10bfffc4 	addi	r2,r2,-1
    4a58:	1007883a 	mov	r3,r2
    4a5c:	e0bffe17 	ldw	r2,-8(fp)
    4a60:	10c0000d 	sth	r3,0(r2)
    4a64:	003fe606 	br	4a00 <__alt_data_end+0xfc004a00>

                                if(!countDown)
    4a68:	e0bffc17 	ldw	r2,-16(fp)
    4a6c:	1080018b 	ldhu	r2,6(r2)
    4a70:	10bfffcc 	andi	r2,r2,65535
    4a74:	1000021e 	bne	r2,zero,4a80 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4a80:	e0bffc17 	ldw	r2,-16(fp)
    4a84:	1080018b 	ldhu	r2,6(r2)
    4a88:	10bfffcc 	andi	r2,r2,65535
    4a8c:	1005003a 	cmpeq	r2,r2,zero
        };
    4a90:	e037883a 	mov	sp,fp
    4a94:	df000017 	ldw	fp,0(sp)
    4a98:	dec00104 	addi	sp,sp,4
    4a9c:	f800283a 	ret

00004aa0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4aa0:	defffb04 	addi	sp,sp,-20
    4aa4:	df000415 	stw	fp,16(sp)
    4aa8:	df000404 	addi	fp,sp,16
    4aac:	e13ffc15 	stw	r4,-16(fp)
    4ab0:	2809883a 	mov	r4,r5
    4ab4:	3007883a 	mov	r3,r6
    4ab8:	3805883a 	mov	r2,r7
    4abc:	e13ffd05 	stb	r4,-12(fp)
    4ac0:	e0fffe05 	stb	r3,-8(fp)
    4ac4:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4ac8:	0005883a 	mov	r2,zero
        }
    4acc:	e037883a 	mov	sp,fp
    4ad0:	df000017 	ldw	fp,0(sp)
    4ad4:	dec00104 	addi	sp,sp,4
    4ad8:	f800283a 	ret

00004adc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4adc:	defffb04 	addi	sp,sp,-20
    4ae0:	df000415 	stw	fp,16(sp)
    4ae4:	df000404 	addi	fp,sp,16
    4ae8:	e13ffc15 	stw	r4,-16(fp)
    4aec:	2809883a 	mov	r4,r5
    4af0:	3007883a 	mov	r3,r6
    4af4:	3805883a 	mov	r2,r7
    4af8:	e13ffd05 	stb	r4,-12(fp)
    4afc:	e0fffe05 	stb	r3,-8(fp)
    4b00:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4b04:	0005883a 	mov	r2,zero
        }
    4b08:	e037883a 	mov	sp,fp
    4b0c:	df000017 	ldw	fp,0(sp)
    4b10:	dec00104 	addi	sp,sp,4
    4b14:	f800283a 	ret

00004b18 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4b18:	defffe04 	addi	sp,sp,-8
    4b1c:	df000115 	stw	fp,4(sp)
    4b20:	df000104 	addi	fp,sp,4
    4b24:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b28:	0005883a 	mov	r2,zero
        }
    4b2c:	e037883a 	mov	sp,fp
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00104 	addi	sp,sp,4
    4b38:	f800283a 	ret

00004b3c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4b3c:	defffe04 	addi	sp,sp,-8
    4b40:	df000115 	stw	fp,4(sp)
    4b44:	df000104 	addi	fp,sp,4
    4b48:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b4c:	0005883a 	mov	r2,zero
        }
    4b50:	e037883a 	mov	sp,fp
    4b54:	df000017 	ldw	fp,0(sp)
    4b58:	dec00104 	addi	sp,sp,4
    4b5c:	f800283a 	ret

00004b60 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4b60:	defffe04 	addi	sp,sp,-8
    4b64:	df000115 	stw	fp,4(sp)
    4b68:	df000104 	addi	fp,sp,4
    4b6c:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4b70:	0005883a 	mov	r2,zero
        }
    4b74:	e037883a 	mov	sp,fp
    4b78:	df000017 	ldw	fp,0(sp)
    4b7c:	dec00104 	addi	sp,sp,4
    4b80:	f800283a 	ret

00004b84 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4b84:	defffd04 	addi	sp,sp,-12
    4b88:	df000215 	stw	fp,8(sp)
    4b8c:	df000204 	addi	fp,sp,8
    4b90:	e13ffe15 	stw	r4,-8(fp)
    4b94:	2805883a 	mov	r2,r5
    4b98:	e0bfff05 	stb	r2,-4(fp)
                return;
    4b9c:	0001883a 	nop
        } // Note used for hubs only!
    4ba0:	e037883a 	mov	sp,fp
    4ba4:	df000017 	ldw	fp,0(sp)
    4ba8:	dec00104 	addi	sp,sp,4
    4bac:	f800283a 	ret

00004bb0 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4bb0:	defffc04 	addi	sp,sp,-16
    4bb4:	df000315 	stw	fp,12(sp)
    4bb8:	df000304 	addi	fp,sp,12
    4bbc:	e13ffd15 	stw	r4,-12(fp)
    4bc0:	2807883a 	mov	r3,r5
    4bc4:	3005883a 	mov	r2,r6
    4bc8:	e0fffe0d 	sth	r3,-8(fp)
    4bcc:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    4bd0:	0005883a 	mov	r2,zero
        }
    4bd4:	e037883a 	mov	sp,fp
    4bd8:	df000017 	ldw	fp,0(sp)
    4bdc:	dec00104 	addi	sp,sp,4
    4be0:	f800283a 	ret

00004be4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    4be4:	defffd04 	addi	sp,sp,-12
    4be8:	df000215 	stw	fp,8(sp)
    4bec:	df000204 	addi	fp,sp,8
    4bf0:	e13ffe15 	stw	r4,-8(fp)
    4bf4:	2805883a 	mov	r2,r5
    4bf8:	e0bfff05 	stb	r2,-4(fp)
                return false;
    4bfc:	0005883a 	mov	r2,zero
        }
    4c00:	e037883a 	mov	sp,fp
    4c04:	df000017 	ldw	fp,0(sp)
    4c08:	dec00104 	addi	sp,sp,4
    4c0c:	f800283a 	ret

00004c10 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    4c10:	defffd04 	addi	sp,sp,-12
    4c14:	df000215 	stw	fp,8(sp)
    4c18:	df000204 	addi	fp,sp,8
    4c1c:	e13ffe15 	stw	r4,-8(fp)
    4c20:	2805883a 	mov	r2,r5
    4c24:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4c28:	00800044 	movi	r2,1
        }
    4c2c:	e037883a 	mov	sp,fp
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00104 	addi	sp,sp,4
    4c38:	f800283a 	ret

00004c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4c3c:	defffc04 	addi	sp,sp,-16
    4c40:	df000315 	stw	fp,12(sp)
    4c44:	df000304 	addi	fp,sp,12
    4c48:	e13ffe15 	stw	r4,-8(fp)
    4c4c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4c50:	e03ffd05 	stb	zero,-12(fp)
    4c54:	e0bffd03 	ldbu	r2,-12(fp)
    4c58:	10800428 	cmpgeui	r2,r2,16
    4c5c:	1000161e 	bne	r2,zero,4cb8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4c60:	e0bffd03 	ldbu	r2,-12(fp)
    4c64:	e0fffe17 	ldw	r3,-8(fp)
    4c68:	10800784 	addi	r2,r2,30
    4c6c:	1085883a 	add	r2,r2,r2
    4c70:	1085883a 	add	r2,r2,r2
    4c74:	1885883a 	add	r2,r3,r2
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	10000a1e 	bne	r2,zero,4ca8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4c80:	e0bffd03 	ldbu	r2,-12(fp)
    4c84:	e0fffe17 	ldw	r3,-8(fp)
    4c88:	10800784 	addi	r2,r2,30
    4c8c:	1085883a 	add	r2,r2,r2
    4c90:	1085883a 	add	r2,r2,r2
    4c94:	1885883a 	add	r2,r3,r2
    4c98:	e0ffff17 	ldw	r3,-4(fp)
    4c9c:	10c00015 	stw	r3,0(r2)
                                return 0;
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	00000506 	br	4cbc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4ca8:	e0bffd03 	ldbu	r2,-12(fp)
    4cac:	10800044 	addi	r2,r2,1
    4cb0:	e0bffd05 	stb	r2,-12(fp)
    4cb4:	003fe706 	br	4c54 <__alt_data_end+0xfc004c54>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4cb8:	00bff4c4 	movi	r2,-45
        };
    4cbc:	e037883a 	mov	sp,fp
    4cc0:	df000017 	ldw	fp,0(sp)
    4cc4:	dec00104 	addi	sp,sp,4
    4cc8:	f800283a 	ret

00004ccc <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    4ccc:	defffa04 	addi	sp,sp,-24
    4cd0:	df000515 	stw	fp,20(sp)
    4cd4:	df000504 	addi	fp,sp,20
    4cd8:	e13ffb15 	stw	r4,-20(fp)
    4cdc:	3009883a 	mov	r4,r6
    4ce0:	3807883a 	mov	r3,r7
    4ce4:	e0800117 	ldw	r2,4(fp)
    4ce8:	e17ffc05 	stb	r5,-16(fp)
    4cec:	e13ffd05 	stb	r4,-12(fp)
    4cf0:	e0fffe05 	stb	r3,-8(fp)
    4cf4:	e0bfff05 	stb	r2,-4(fp)
        };
    4cf8:	0001883a 	nop
    4cfc:	e037883a 	mov	sp,fp
    4d00:	df000017 	ldw	fp,0(sp)
    4d04:	dec00104 	addi	sp,sp,4
    4d08:	f800283a 	ret

00004d0c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4d0c:	defffe04 	addi	sp,sp,-8
    4d10:	df000115 	stw	fp,4(sp)
    4d14:	df000104 	addi	fp,sp,4
    4d18:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4d1c:	e0bfff17 	ldw	r2,-4(fp)
    4d20:	10800403 	ldbu	r2,16(r2)
        };
    4d24:	e037883a 	mov	sp,fp
    4d28:	df000017 	ldw	fp,0(sp)
    4d2c:	dec00104 	addi	sp,sp,4
    4d30:	f800283a 	ret

00004d34 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4d34:	defffe04 	addi	sp,sp,-8
    4d38:	df000115 	stw	fp,4(sp)
    4d3c:	df000104 	addi	fp,sp,4
    4d40:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4d44:	e0bfff17 	ldw	r2,-4(fp)
    4d48:	10800943 	ldbu	r2,37(r2)
        };
    4d4c:	e037883a 	mov	sp,fp
    4d50:	df000017 	ldw	fp,0(sp)
    4d54:	dec00104 	addi	sp,sp,4
    4d58:	f800283a 	ret

00004d5c <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4d5c:	defffc04 	addi	sp,sp,-16
    4d60:	df000315 	stw	fp,12(sp)
    4d64:	df000304 	addi	fp,sp,12
    4d68:	e13ffd15 	stw	r4,-12(fp)
    4d6c:	2807883a 	mov	r3,r5
    4d70:	3005883a 	mov	r2,r6
    4d74:	e0fffe0d 	sth	r3,-8(fp)
    4d78:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4d7c:	e0bffe0b 	ldhu	r2,-8(fp)
    4d80:	108117a0 	cmpeqi	r2,r2,1118
    4d84:	10000f1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d88:	e0bffe0b 	ldhu	r2,-8(fp)
    4d8c:	1081ce20 	cmpeqi	r2,r2,1848
    4d90:	10000c1e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4d94:	e0bffe0b 	ldhu	r2,-8(fp)
    4d98:	10839be0 	cmpeqi	r2,r2,3695
    4d9c:	1000091e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4da0:	e0bffe0b 	ldhu	r2,-8(fp)
    4da4:	1083c360 	cmpeqi	r2,r2,3853
    4da8:	1000061e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4dac:	e0bffe0b 	ldhu	r2,-8(fp)
    4db0:	10854ca0 	cmpeqi	r2,r2,5426
    4db4:	1000031e 	bne	r2,zero,4dc4 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4db8:	e0bffe0b 	ldhu	r2,-8(fp)
    4dbc:	10893198 	cmpnei	r2,r2,9414
    4dc0:	10002c1e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4dc4:	e0bfff0b 	ldhu	r2,-4(fp)
    4dc8:	1080b460 	cmpeqi	r2,r2,721
    4dcc:	1000271e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4dd0:	e0bfff0b 	ldhu	r2,-4(fp)
    4dd4:	1080b760 	cmpeqi	r2,r2,733
    4dd8:	1000241e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ddc:	e0bfff0b 	ldhu	r2,-4(fp)
    4de0:	1080b8e0 	cmpeqi	r2,r2,739
    4de4:	1000211e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4de8:	e0bfff0b 	ldhu	r2,-4(fp)
    4dec:	1080baa0 	cmpeqi	r2,r2,746
    4df0:	10001e1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4df4:	e0bfff0b 	ldhu	r2,-4(fp)
    4df8:	10928060 	cmpeqi	r2,r2,18945
    4dfc:	10001b1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4e00:	e0bfff0b 	ldhu	r2,-4(fp)
    4e04:	10804e60 	cmpeqi	r2,r2,313
    4e08:	1000181e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e0c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e10:	108051a0 	cmpeqi	r2,r2,326
    4e14:	1000151e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e18:	e0bfff0b 	ldhu	r2,-4(fp)
    4e1c:	108019e0 	cmpeqi	r2,r2,103
    4e20:	1000121e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e24:	e0bfff0b 	ldhu	r2,-4(fp)
    4e28:	108280e0 	cmpeqi	r2,r2,2563
    4e2c:	10000f1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4e30:	e0bfff0b 	ldhu	r2,-4(fp)
    4e34:	109506a0 	cmpeqi	r2,r2,21530
    4e38:	10000c1e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e3c:	e0bfff0b 	ldhu	r2,-4(fp)
    4e40:	10950aa0 	cmpeqi	r2,r2,21546
    4e44:	1000091e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e48:	e0bfff0b 	ldhu	r2,-4(fp)
    4e4c:	10950ea0 	cmpeqi	r2,r2,21562
    4e50:	1000061e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4e54:	e0bfff0b 	ldhu	r2,-4(fp)
    4e58:	1082c2a0 	cmpeqi	r2,r2,2826
    4e5c:	1000031e 	bne	r2,zero,4e6c <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4e60:	e0bfff0b 	ldhu	r2,-4(fp)
    4e64:	1082c498 	cmpnei	r2,r2,2834
    4e68:	1000021e 	bne	r2,zero,4e74 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4e6c:	00800044 	movi	r2,1
    4e70:	00000106 	br	4e78 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4e74:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4e78:	e037883a 	mov	sp,fp
    4e7c:	df000017 	ldw	fp,0(sp)
    4e80:	dec00104 	addi	sp,sp,4
    4e84:	f800283a 	ret

00004e88 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4e88:	defffe04 	addi	sp,sp,-8
    4e8c:	df000115 	stw	fp,4(sp)
    4e90:	df000104 	addi	fp,sp,4
    4e94:	e13fff15 	stw	r4,-4(fp)
    4e98:	008000b4 	movhi	r2,2
    4e9c:	10938d04 	addi	r2,r2,20020
    4ea0:	e0ffff17 	ldw	r3,-4(fp)
    4ea4:	18800015 	stw	r2,0(r3)
    4ea8:	0001883a 	nop
    4eac:	e037883a 	mov	sp,fp
    4eb0:	df000017 	ldw	fp,0(sp)
    4eb4:	dec00104 	addi	sp,sp,4
    4eb8:	f800283a 	ret

00004ebc <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4ebc:	defffe04 	addi	sp,sp,-8
    4ec0:	df000115 	stw	fp,4(sp)
    4ec4:	df000104 	addi	fp,sp,4
    4ec8:	e13fff15 	stw	r4,-4(fp)
    4ecc:	008000b4 	movhi	r2,2
    4ed0:	10938704 	addi	r2,r2,19996
    4ed4:	e0ffff17 	ldw	r3,-4(fp)
    4ed8:	18800015 	stw	r2,0(r3)
    4edc:	0001883a 	nop
    4ee0:	e037883a 	mov	sp,fp
    4ee4:	df000017 	ldw	fp,0(sp)
    4ee8:	dec00104 	addi	sp,sp,4
    4eec:	f800283a 	ret

00004ef0 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4ef0:	defffe04 	addi	sp,sp,-8
    4ef4:	df000115 	stw	fp,4(sp)
    4ef8:	df000104 	addi	fp,sp,4
    4efc:	e13fff15 	stw	r4,-4(fp)
    4f00:	008000b4 	movhi	r2,2
    4f04:	10938a04 	addi	r2,r2,20008
    4f08:	e0ffff17 	ldw	r3,-4(fp)
    4f0c:	18800015 	stw	r2,0(r3)
    4f10:	0001883a 	nop
    4f14:	e037883a 	mov	sp,fp
    4f18:	df000017 	ldw	fp,0(sp)
    4f1c:	dec00104 	addi	sp,sp,4
    4f20:	f800283a 	ret

00004f24 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4f24:	defffc04 	addi	sp,sp,-16
    4f28:	dfc00315 	stw	ra,12(sp)
    4f2c:	df000215 	stw	fp,8(sp)
    4f30:	df000204 	addi	fp,sp,8
    4f34:	e13ffe15 	stw	r4,-8(fp)
    4f38:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1009883a 	mov	r4,r2
    4f44:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    4f48:	008000b4 	movhi	r2,2
    4f4c:	10938404 	addi	r2,r2,19984
    4f50:	e0fffe17 	ldw	r3,-8(fp)
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	e0bffe17 	ldw	r2,-8(fp)
    4f5c:	e0ffff17 	ldw	r3,-4(fp)
    4f60:	10c00115 	stw	r3,4(r2)
    4f64:	e0bffe17 	ldw	r2,-8(fp)
    4f68:	10800204 	addi	r2,r2,8
    4f6c:	1009883a 	mov	r4,r2
    4f70:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    4f74:	e0bffe17 	ldw	r2,-8(fp)
    4f78:	10800404 	addi	r2,r2,16
    4f7c:	1009883a 	mov	r4,r2
    4f80:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    4f84:	e0bffe17 	ldw	r2,-8(fp)
    4f88:	10800604 	addi	r2,r2,24
    4f8c:	1009883a 	mov	r4,r2
    4f90:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    4f94:	e0bffe17 	ldw	r2,-8(fp)
    4f98:	10000c05 	stb	zero,48(r2)
    4f9c:	e0bffe17 	ldw	r2,-8(fp)
    4fa0:	10000c45 	stb	zero,49(r2)
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	10000c85 	stb	zero,50(r2)
    4fac:	e0bffe17 	ldw	r2,-8(fp)
    4fb0:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4fb4:	e0bffe17 	ldw	r2,-8(fp)
    4fb8:	10c00804 	addi	r3,r2,32
    4fbc:	e0bffe17 	ldw	r2,-8(fp)
    4fc0:	19803fcc 	andi	r6,r3,255
    4fc4:	11000243 	ldbu	r4,9(r2)
    4fc8:	2008703a 	and	r4,r4,zero
    4fcc:	200b883a 	mov	r5,r4
    4fd0:	3009883a 	mov	r4,r6
    4fd4:	2908b03a 	or	r4,r5,r4
    4fd8:	11000245 	stb	r4,9(r2)
    4fdc:	1808d23a 	srli	r4,r3,8
    4fe0:	21803fcc 	andi	r6,r4,255
    4fe4:	11000283 	ldbu	r4,10(r2)
    4fe8:	2008703a 	and	r4,r4,zero
    4fec:	200b883a 	mov	r5,r4
    4ff0:	3009883a 	mov	r4,r6
    4ff4:	2908b03a 	or	r4,r5,r4
    4ff8:	11000285 	stb	r4,10(r2)
    4ffc:	1808d43a 	srli	r4,r3,16
    5000:	21803fcc 	andi	r6,r4,255
    5004:	110002c3 	ldbu	r4,11(r2)
    5008:	2008703a 	and	r4,r4,zero
    500c:	200b883a 	mov	r5,r4
    5010:	3009883a 	mov	r4,r6
    5014:	2908b03a 	or	r4,r5,r4
    5018:	110002c5 	stb	r4,11(r2)
    501c:	180ad63a 	srli	r5,r3,24
    5020:	10c00303 	ldbu	r3,12(r2)
    5024:	1806703a 	and	r3,r3,zero
    5028:	1809883a 	mov	r4,r3
    502c:	2807883a 	mov	r3,r5
    5030:	20c6b03a 	or	r3,r4,r3
    5034:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    5038:	e0bffe17 	ldw	r2,-8(fp)
    503c:	10c00404 	addi	r3,r2,16
    5040:	e0bffe17 	ldw	r2,-8(fp)
    5044:	10800204 	addi	r2,r2,8
    5048:	100b883a 	mov	r5,r2
    504c:	1809883a 	mov	r4,r3
    5050:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    5054:	e0bffe17 	ldw	r2,-8(fp)
    5058:	10c00604 	addi	r3,r2,24
    505c:	e0bffe17 	ldw	r2,-8(fp)
    5060:	10800204 	addi	r2,r2,8
    5064:	100b883a 	mov	r5,r2
    5068:	1809883a 	mov	r4,r3
    506c:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    5070:	0001883a 	nop
    5074:	e037883a 	mov	sp,fp
    5078:	dfc00117 	ldw	ra,4(sp)
    507c:	df000017 	ldw	fp,0(sp)
    5080:	dec00204 	addi	sp,sp,8
    5084:	f800283a 	ret

00005088 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    5088:	defff804 	addi	sp,sp,-32
    508c:	dfc00715 	stw	ra,28(sp)
    5090:	df000615 	stw	fp,24(sp)
    5094:	df000604 	addi	fp,sp,24
    5098:	e13ffc15 	stw	r4,-16(fp)
    509c:	2805883a 	mov	r2,r5
    50a0:	e1bffe15 	stw	r6,-8(fp)
    50a4:	e1ffff15 	stw	r7,-4(fp)
    50a8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    50ac:	e0bffd0b 	ldhu	r2,-12(fp)
    50b0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    50b4:	e0bffe17 	ldw	r2,-8(fp)
    50b8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    50bc:	e0bffa0b 	ldhu	r2,-24(fp)
    50c0:	10bfffcc 	andi	r2,r2,65535
    50c4:	10000a26 	beq	r2,zero,50f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    50c8:	e0bffb04 	addi	r2,fp,-20
    50cc:	e1bffa04 	addi	r6,fp,-24
    50d0:	100b883a 	mov	r5,r2
    50d4:	e13ffc17 	ldw	r4,-16(fp)
    50d8:	00051040 	call	5104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    50dc:	1080005c 	xori	r2,r2,1
    50e0:	10803fcc 	andi	r2,r2,255
    50e4:	1000011e 	bne	r2,zero,50ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    50e8:	003ff406 	br	50bc <__alt_data_end+0xfc0050bc>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    50ec:	0001883a 	nop
}
    50f0:	e037883a 	mov	sp,fp
    50f4:	dfc00117 	ldw	ra,4(sp)
    50f8:	df000017 	ldw	fp,0(sp)
    50fc:	dec00204 	addi	sp,sp,8
    5100:	f800283a 	ret

00005104 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    5104:	defff604 	addi	sp,sp,-40
    5108:	dfc00915 	stw	ra,36(sp)
    510c:	df000815 	stw	fp,32(sp)
    5110:	df000804 	addi	fp,sp,32
    5114:	e13ffc15 	stw	r4,-16(fp)
    5118:	e17ffd15 	stw	r5,-12(fp)
    511c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    5120:	e0bffc17 	ldw	r2,-16(fp)
    5124:	10800804 	addi	r2,r2,32
    5128:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    512c:	e0bffc17 	ldw	r2,-16(fp)
    5130:	10800804 	addi	r2,r2,32
    5134:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    5138:	e0bffc17 	ldw	r2,-16(fp)
    513c:	10800c03 	ldbu	r2,48(r2)
    5140:	10803fcc 	andi	r2,r2,255
    5144:	10c00168 	cmpgeui	r3,r2,5
    5148:	1801141e 	bne	r3,zero,559c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    514c:	100690ba 	slli	r3,r2,2
    5150:	00800034 	movhi	r2,0
    5154:	10945904 	addi	r2,r2,20836
    5158:	1885883a 	add	r2,r3,r2
    515c:	10800017 	ldw	r2,0(r2)
    5160:	1000683a 	jmp	r2
    5164:	00005178 	rdprs	zero,zero,325
    5168:	000051ac 	andhi	zero,zero,326
    516c:	00005234 	movhi	zero,328
    5170:	000052c8 	cmpgei	zero,zero,331
    5174:	00005334 	movhi	zero,332
                case 0:
                        theBuffer.valueSize = 2;
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	00c00084 	movi	r3,2
    5180:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    5184:	e0bffc17 	ldw	r2,-16(fp)
    5188:	10c00404 	addi	r3,r2,16
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	10800204 	addi	r2,r2,8
    5194:	100b883a 	mov	r5,r2
    5198:	1809883a 	mov	r4,r3
    519c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	00c00044 	movi	r3,1
    51a8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    51ac:	e0bffc17 	ldw	r2,-16(fp)
    51b0:	10800404 	addi	r2,r2,16
    51b4:	e1bffe17 	ldw	r6,-8(fp)
    51b8:	e17ffd17 	ldw	r5,-12(fp)
    51bc:	1009883a 	mov	r4,r2
    51c0:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    51c4:	1080005c 	xori	r2,r2,1
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	10000226 	beq	r2,zero,51d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    51d0:	0005883a 	mov	r2,zero
    51d4:	0000f206 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    51d8:	e0bffc17 	ldw	r2,-16(fp)
    51dc:	10c00217 	ldw	r3,8(r2)
    51e0:	1806d23a 	srli	r3,r3,8
    51e4:	10800317 	ldw	r2,12(r2)
    51e8:	10803fcc 	andi	r2,r2,255
    51ec:	1004963a 	slli	r2,r2,24
    51f0:	10c4b03a 	or	r2,r2,r3
    51f4:	10c00003 	ldbu	r3,0(r2)
    51f8:	e0bffc17 	ldw	r2,-16(fp)
    51fc:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10c00217 	ldw	r3,8(r2)
    5208:	1806d23a 	srli	r3,r3,8
    520c:	10800317 	ldw	r2,12(r2)
    5210:	10803fcc 	andi	r2,r2,255
    5214:	1004963a 	slli	r2,r2,24
    5218:	10c4b03a 	or	r2,r2,r3
    521c:	10c00043 	ldbu	r3,1(r2)
    5220:	e0bffc17 	ldw	r2,-16(fp)
    5224:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    5228:	e0bffc17 	ldw	r2,-16(fp)
    522c:	00c00084 	movi	r3,2
    5230:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    5234:	e0bffc17 	ldw	r2,-16(fp)
    5238:	10800804 	addi	r2,r2,32
    523c:	10c00084 	addi	r3,r2,2
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	19803fcc 	andi	r6,r3,255
    5248:	11000243 	ldbu	r4,9(r2)
    524c:	2008703a 	and	r4,r4,zero
    5250:	200b883a 	mov	r5,r4
    5254:	3009883a 	mov	r4,r6
    5258:	2908b03a 	or	r4,r5,r4
    525c:	11000245 	stb	r4,9(r2)
    5260:	1808d23a 	srli	r4,r3,8
    5264:	21803fcc 	andi	r6,r4,255
    5268:	11000283 	ldbu	r4,10(r2)
    526c:	2008703a 	and	r4,r4,zero
    5270:	200b883a 	mov	r5,r4
    5274:	3009883a 	mov	r4,r6
    5278:	2908b03a 	or	r4,r5,r4
    527c:	11000285 	stb	r4,10(r2)
    5280:	1808d43a 	srli	r4,r3,16
    5284:	21803fcc 	andi	r6,r4,255
    5288:	110002c3 	ldbu	r4,11(r2)
    528c:	2008703a 	and	r4,r4,zero
    5290:	200b883a 	mov	r5,r4
    5294:	3009883a 	mov	r4,r6
    5298:	2908b03a 	or	r4,r5,r4
    529c:	110002c5 	stb	r4,11(r2)
    52a0:	180ad63a 	srli	r5,r3,24
    52a4:	10c00303 	ldbu	r3,12(r2)
    52a8:	1806703a 	and	r3,r3,zero
    52ac:	1809883a 	mov	r4,r3
    52b0:	2807883a 	mov	r3,r5
    52b4:	20c6b03a 	or	r3,r4,r3
    52b8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	00c000c4 	movi	r3,3
    52c4:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    52c8:	e0bffc17 	ldw	r2,-16(fp)
    52cc:	10800c83 	ldbu	r2,50(r2)
    52d0:	10803fcc 	andi	r2,r2,255
    52d4:	10c00120 	cmpeqi	r3,r2,4
    52d8:	1800021e 	bne	r3,zero,52e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    52dc:	10800148 	cmpgei	r2,r2,5
    52e0:	00000306 	br	52f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    52e4:	e0bffc17 	ldw	r2,-16(fp)
    52e8:	10000cc5 	stb	zero,51(r2)
                                        break;
    52ec:	00000106 	br	52f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    52f0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    52f4:	e0bffc17 	ldw	r2,-16(fp)
    52f8:	10800c43 	ldbu	r2,49(r2)
    52fc:	10bfff84 	addi	r2,r2,-2
    5300:	1007883a 	mov	r3,r2
    5304:	e0bffc17 	ldw	r2,-16(fp)
    5308:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    530c:	e0bffc17 	ldw	r2,-16(fp)
    5310:	10c00404 	addi	r3,r2,16
    5314:	e0bffc17 	ldw	r2,-16(fp)
    5318:	10800204 	addi	r2,r2,8
    531c:	100b883a 	mov	r5,r2
    5320:	1809883a 	mov	r4,r3
    5324:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    5328:	e0bffc17 	ldw	r2,-16(fp)
    532c:	00c00104 	movi	r3,4
    5330:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    5334:	e0bffc17 	ldw	r2,-16(fp)
    5338:	10800c83 	ldbu	r2,50(r2)
    533c:	10803fcc 	andi	r2,r2,255
    5340:	10c00120 	cmpeqi	r3,r2,4
    5344:	1800141e 	bne	r3,zero,5398 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    5348:	10c00160 	cmpeqi	r3,r2,5
    534c:	1800311e 	bne	r3,zero,5414 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    5350:	108000a0 	cmpeqi	r2,r2,2
    5354:	10005a26 	beq	r2,zero,54c0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    5358:	e0bffc17 	ldw	r2,-16(fp)
    535c:	10800404 	addi	r2,r2,16
    5360:	e1bffe17 	ldw	r6,-8(fp)
    5364:	e17ffd17 	ldw	r5,-12(fp)
    5368:	1009883a 	mov	r4,r2
    536c:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5370:	1080005c 	xori	r2,r2,1
    5374:	10803fcc 	andi	r2,r2,255
    5378:	10000226 	beq	r2,zero,5384 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    537c:	0005883a 	mov	r2,zero
    5380:	00008706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    5384:	e0bffa17 	ldw	r2,-24(fp)
    5388:	10c00143 	ldbu	r3,5(r2)
    538c:	e0bffc17 	ldw	r2,-16(fp)
    5390:	10c00d05 	stb	r3,52(r2)
                                        break;
    5394:	00005e06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    5398:	e0bffc17 	ldw	r2,-16(fp)
    539c:	10800404 	addi	r2,r2,16
    53a0:	e1bffe17 	ldw	r6,-8(fp)
    53a4:	e17ffd17 	ldw	r5,-12(fp)
    53a8:	1009883a 	mov	r4,r2
    53ac:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    53b0:	1080005c 	xori	r2,r2,1
    53b4:	10803fcc 	andi	r2,r2,255
    53b8:	10000226 	beq	r2,zero,53c4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    53bc:	0005883a 	mov	r2,zero
    53c0:	00007706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    53c4:	e0bffc17 	ldw	r2,-16(fp)
    53c8:	10800e03 	ldbu	r2,56(r2)
    53cc:	10803fcc 	andi	r2,r2,255
    53d0:	10004c1e 	bne	r2,zero,5504 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    53d4:	e0bffc17 	ldw	r2,-16(fp)
    53d8:	00c00044 	movi	r3,1
    53dc:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    53e0:	e0bffb17 	ldw	r2,-20(fp)
    53e4:	10c00083 	ldbu	r3,2(r2)
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    53f0:	e0bffb17 	ldw	r2,-20(fp)
    53f4:	10c000c3 	ldbu	r3,3(r2)
    53f8:	e0bffc17 	ldw	r2,-16(fp)
    53fc:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    5400:	e0bffb17 	ldw	r2,-20(fp)
    5404:	10c001c3 	ldbu	r3,7(r2)
    5408:	e0bffc17 	ldw	r2,-16(fp)
    540c:	10c00d45 	stb	r3,53(r2)
                                        break;
    5410:	00003f06 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    5414:	e0bffc17 	ldw	r2,-16(fp)
    5418:	10800404 	addi	r2,r2,16
    541c:	e1bffe17 	ldw	r6,-8(fp)
    5420:	e17ffd17 	ldw	r5,-12(fp)
    5424:	1009883a 	mov	r4,r2
    5428:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    542c:	1080005c 	xori	r2,r2,1
    5430:	10803fcc 	andi	r2,r2,255
    5434:	10000226 	beq	r2,zero,5440 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5438:	0005883a 	mov	r2,zero
    543c:	00005806 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    5440:	e0bffc17 	ldw	r2,-16(fp)
    5444:	10800cc3 	ldbu	r2,51(r2)
    5448:	10803fcc 	andi	r2,r2,255
    544c:	10002f26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    5450:	e0bffc17 	ldw	r2,-16(fp)
    5454:	10800117 	ldw	r2,4(r2)
    5458:	10002c26 	beq	r2,zero,550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    545c:	e0bffc17 	ldw	r2,-16(fp)
    5460:	10800117 	ldw	r2,4(r2)
    5464:	10800017 	ldw	r2,0(r2)
    5468:	10800017 	ldw	r2,0(r2)
    546c:	e0fffc17 	ldw	r3,-16(fp)
    5470:	1a000117 	ldw	r8,4(r3)
    5474:	e0fffc17 	ldw	r3,-16(fp)
    5478:	18c00d03 	ldbu	r3,52(r3)
    547c:	19403fcc 	andi	r5,r3,255
    5480:	e0fffc17 	ldw	r3,-16(fp)
    5484:	18c00d83 	ldbu	r3,54(r3)
    5488:	19803fcc 	andi	r6,r3,255
    548c:	e0fffc17 	ldw	r3,-16(fp)
    5490:	18c00dc3 	ldbu	r3,55(r3)
    5494:	19c03fcc 	andi	r7,r3,255
    5498:	e0fffc17 	ldw	r3,-16(fp)
    549c:	18c00d43 	ldbu	r3,53(r3)
    54a0:	18c03fcc 	andi	r3,r3,255
    54a4:	e13ffc17 	ldw	r4,-16(fp)
    54a8:	21000804 	addi	r4,r4,32
    54ac:	d9000115 	stw	r4,4(sp)
    54b0:	d8c00015 	stw	r3,0(sp)
    54b4:	4009883a 	mov	r4,r8
    54b8:	103ee83a 	callr	r2
                                        break;
    54bc:	00001306 	br	550c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    54c0:	e0bffc17 	ldw	r2,-16(fp)
    54c4:	10c00604 	addi	r3,r2,24
    54c8:	e0bffc17 	ldw	r2,-16(fp)
    54cc:	10800c43 	ldbu	r2,49(r2)
    54d0:	10803fcc 	andi	r2,r2,255
    54d4:	10bfff84 	addi	r2,r2,-2
    54d8:	10bfffcc 	andi	r2,r2,65535
    54dc:	100f883a 	mov	r7,r2
    54e0:	e1bffe17 	ldw	r6,-8(fp)
    54e4:	e17ffd17 	ldw	r5,-12(fp)
    54e8:	1809883a 	mov	r4,r3
    54ec:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    54f0:	1080005c 	xori	r2,r2,1
    54f4:	10803fcc 	andi	r2,r2,255
    54f8:	10000526 	beq	r2,zero,5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    54fc:	0005883a 	mov	r2,zero
    5500:	00002706 	br	55a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    5504:	0001883a 	nop
    5508:	00000106 	br	5510 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    550c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    5510:	e0bffc17 	ldw	r2,-16(fp)
    5514:	10c00804 	addi	r3,r2,32
    5518:	e0bffc17 	ldw	r2,-16(fp)
    551c:	19803fcc 	andi	r6,r3,255
    5520:	11000243 	ldbu	r4,9(r2)
    5524:	2008703a 	and	r4,r4,zero
    5528:	200b883a 	mov	r5,r4
    552c:	3009883a 	mov	r4,r6
    5530:	2908b03a 	or	r4,r5,r4
    5534:	11000245 	stb	r4,9(r2)
    5538:	1808d23a 	srli	r4,r3,8
    553c:	21803fcc 	andi	r6,r4,255
    5540:	11000283 	ldbu	r4,10(r2)
    5544:	2008703a 	and	r4,r4,zero
    5548:	200b883a 	mov	r5,r4
    554c:	3009883a 	mov	r4,r6
    5550:	2908b03a 	or	r4,r5,r4
    5554:	11000285 	stb	r4,10(r2)
    5558:	1808d43a 	srli	r4,r3,16
    555c:	21803fcc 	andi	r6,r4,255
    5560:	110002c3 	ldbu	r4,11(r2)
    5564:	2008703a 	and	r4,r4,zero
    5568:	200b883a 	mov	r5,r4
    556c:	3009883a 	mov	r4,r6
    5570:	2908b03a 	or	r4,r5,r4
    5574:	110002c5 	stb	r4,11(r2)
    5578:	180ad63a 	srli	r5,r3,24
    557c:	10c00303 	ldbu	r3,12(r2)
    5580:	1806703a 	and	r3,r3,zero
    5584:	1809883a 	mov	r4,r3
    5588:	2807883a 	mov	r3,r5
    558c:	20c6b03a 	or	r3,r4,r3
    5590:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	10000c05 	stb	zero,48(r2)
        }
        return true;
    559c:	00800044 	movi	r2,1
}
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <_Z8set_notehhh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
    55b4:	defffb04 	addi	sp,sp,-20
    55b8:	df000415 	stw	fp,16(sp)
    55bc:	df000404 	addi	fp,sp,16
    55c0:	2807883a 	mov	r3,r5
    55c4:	3005883a 	mov	r2,r6
    55c8:	e13ffd05 	stb	r4,-12(fp)
    55cc:	e0fffe05 	stb	r3,-8(fp)
    55d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(note > 0x7F) {
    55d4:	e0bffe03 	ldbu	r2,-8(fp)
    55d8:	10803fcc 	andi	r2,r2,255
    55dc:	1080201c 	xori	r2,r2,128
    55e0:	10bfe004 	addi	r2,r2,-128
    55e4:	10001816 	blt	r2,zero,5648 <_Z8set_notehhh+0x94>
		return;
	}

	switch (channel) {
    55e8:	e0bffd03 	ldbu	r2,-12(fp)
    55ec:	10000126 	beq	r2,zero,55f4 <_Z8set_notehhh+0x40>
				set_val = 0x80 + vel;
			}
			synth->KEY[note] = set_val;
			break;
		default:
			break;
    55f0:	00001606 	br	564c <_Z8set_notehhh+0x98>
		return;
	}

	switch (channel) {
		case 0:
			if(vel == 0x00) {
    55f4:	e0bfff03 	ldbu	r2,-4(fp)
    55f8:	1000081e 	bne	r2,zero,561c <_Z8set_notehhh+0x68>
				set_val = synth->KEY[note];
    55fc:	d0e00d17 	ldw	r3,-32716(gp)
    5600:	e0bffe03 	ldbu	r2,-8(fp)
    5604:	1085883a 	add	r2,r2,r2
    5608:	1085883a 	add	r2,r2,r2
    560c:	1885883a 	add	r2,r3,r2
    5610:	10800017 	ldw	r2,0(r2)
    5614:	e0bffc15 	stw	r2,-16(fp)
    5618:	00000306 	br	5628 <_Z8set_notehhh+0x74>
			}
			else {
				set_val = 0x80 + vel;
    561c:	e0bfff03 	ldbu	r2,-4(fp)
    5620:	10802004 	addi	r2,r2,128
    5624:	e0bffc15 	stw	r2,-16(fp)
			}
			synth->KEY[note] = set_val;
    5628:	d0e00d17 	ldw	r3,-32716(gp)
    562c:	e0bffe03 	ldbu	r2,-8(fp)
    5630:	1085883a 	add	r2,r2,r2
    5634:	1085883a 	add	r2,r2,r2
    5638:	1885883a 	add	r2,r3,r2
    563c:	e0fffc17 	ldw	r3,-16(fp)
    5640:	10c00015 	stw	r3,0(r2)
			break;
    5644:	00000106 	br	564c <_Z8set_notehhh+0x98>

void set_note(alt_u8 channel, alt_u8 note, alt_u8 vel) {
	alt_u32 set_val;

	if(note > 0x7F) {
		return;
    5648:	0001883a 	nop
			synth->KEY[note] = set_val;
			break;
		default:
			break;
	}
}
    564c:	e037883a 	mov	sp,fp
    5650:	df000017 	ldw	fp,0(sp)
    5654:	dec00104 	addi	sp,sp,4
    5658:	f800283a 	ret

0000565c <_Z8set_ctrlhhm>:

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
    565c:	defffc04 	addi	sp,sp,-16
    5660:	df000315 	stw	fp,12(sp)
    5664:	df000304 	addi	fp,sp,12
    5668:	2007883a 	mov	r3,r4
    566c:	2805883a 	mov	r2,r5
    5670:	e1bfff15 	stw	r6,-4(fp)
    5674:	e0fffd05 	stb	r3,-12(fp)
    5678:	e0bffe05 	stb	r2,-8(fp)
	switch (channel) {
    567c:	e0bffd03 	ldbu	r2,-12(fp)
    5680:	10000126 	beq	r2,zero,5688 <_Z8set_ctrlhhm+0x2c>
		case 0:
			synth->CTRL[par] = val;
			break;
		default:
			break;
    5684:	00000906 	br	56ac <_Z8set_ctrlhhm+0x50>
}

void set_ctrl(alt_u8 channel, alt_u8 par, alt_u32 val) {
	switch (channel) {
		case 0:
			synth->CTRL[par] = val;
    5688:	d0e00d17 	ldw	r3,-32716(gp)
    568c:	e0bffe03 	ldbu	r2,-8(fp)
    5690:	10802004 	addi	r2,r2,128
    5694:	1085883a 	add	r2,r2,r2
    5698:	1085883a 	add	r2,r2,r2
    569c:	1885883a 	add	r2,r3,r2
    56a0:	e0ffff17 	ldw	r3,-4(fp)
    56a4:	10c00015 	stw	r3,0(r2)
			break;
    56a8:	0001883a 	nop
		default:
			break;
	}
}
    56ac:	0001883a 	nop
    56b0:	e037883a 	mov	sp,fp
    56b4:	df000017 	ldw	fp,0(sp)
    56b8:	dec00104 	addi	sp,sp,4
    56bc:	f800283a 	ret

000056c0 <_Z9calc_adsrttttttttff>:

void calc_adsr(alt_u16 att_h, alt_u16 att_l, alt_u16 dec_h, alt_u16 dec_l, alt_u16 sus_h, alt_u16 sus_l, alt_u16 rel_h, alt_u16 rel_l, float peak_att, float peak_sus) {
    56c0:	deffe904 	addi	sp,sp,-92
    56c4:	dfc01615 	stw	ra,88(sp)
    56c8:	df001515 	stw	fp,84(sp)
    56cc:	df001504 	addi	fp,sp,84
    56d0:	2015883a 	mov	r10,r4
    56d4:	2813883a 	mov	r9,r5
    56d8:	3011883a 	mov	r8,r6
    56dc:	380d883a 	mov	r6,r7
    56e0:	e1400217 	ldw	r5,8(fp)
    56e4:	e1000317 	ldw	r4,12(fp)
    56e8:	e0c00417 	ldw	r3,16(fp)
    56ec:	e0800517 	ldw	r2,20(fp)
    56f0:	e2bff80d 	sth	r10,-32(fp)
    56f4:	e27ff90d 	sth	r9,-28(fp)
    56f8:	e23ffa0d 	sth	r8,-24(fp)
    56fc:	e1bffb0d 	sth	r6,-20(fp)
    5700:	e17ffc0d 	sth	r5,-16(fp)
    5704:	e13ffd0d 	sth	r4,-12(fp)
    5708:	e0fffe0d 	sth	r3,-8(fp)
    570c:	e0bfff0d 	sth	r2,-4(fp)

	alt_u16 att_m_seconds = att_h + att_l;
    5710:	e0fff80b 	ldhu	r3,-32(fp)
    5714:	e0bff90b 	ldhu	r2,-28(fp)
    5718:	1885883a 	add	r2,r3,r2
    571c:	e0bff10d 	sth	r2,-60(fp)
	alt_u16 dec_m_seconds = dec_h + dec_l;
    5720:	e0fffa0b 	ldhu	r3,-24(fp)
    5724:	e0bffb0b 	ldhu	r2,-20(fp)
    5728:	1885883a 	add	r2,r3,r2
    572c:	e0bff18d 	sth	r2,-58(fp)
	alt_u16 sus_m_seconds = sus_h + sus_l;
    5730:	e0fffc0b 	ldhu	r3,-16(fp)
    5734:	e0bffd0b 	ldhu	r2,-12(fp)
    5738:	1885883a 	add	r2,r3,r2
    573c:	e0bff20d 	sth	r2,-56(fp)
	alt_u16 rel_m_seconds = rel_h + rel_l;
    5740:	e0fffe0b 	ldhu	r3,-8(fp)
    5744:	e0bfff0b 	ldhu	r2,-4(fp)
    5748:	1885883a 	add	r2,r3,r2
    574c:	e0bff28d 	sth	r2,-54(fp)
	alt_u32 PEAK_ATT, PEAK_SUS, ATT_STEP, DEC_STEP, SUS_STEP, REL_STEP;
	alt_u32 ATT_LEN, DEC_LEN, SUS_LEN, REL_LEN;

	float p_att = peak_att + peak_sus;
    5750:	e1400717 	ldw	r5,28(fp)
    5754:	e1000617 	ldw	r4,24(fp)
    5758:	000d9600 	call	d960 <__addsf3>
    575c:	1007883a 	mov	r3,r2
    5760:	e0fff015 	stw	r3,-64(fp)

	if (p_att > 2) p_att = 2;
    5764:	01500034 	movhi	r5,16384
    5768:	e13ff017 	ldw	r4,-64(fp)
    576c:	000e2680 	call	e268 <__gesf2>
    5770:	0080020e 	bge	zero,r2,577c <_Z9calc_adsrttttttttff+0xbc>
    5774:	00900034 	movhi	r2,16384
    5778:	e0bff015 	stw	r2,-64(fp)

	if (att_m_seconds > 5000) {
    577c:	e0bff10b 	ldhu	r2,-60(fp)
    5780:	1084e270 	cmpltui	r2,r2,5001
    5784:	1000041e 	bne	r2,zero,5798 <_Z9calc_adsrttttttttff+0xd8>
		printf("ERROR: Requested attack length is too long.\n");
    5788:	010000b4 	movhi	r4,2
    578c:	2113bc04 	addi	r4,r4,20208
    5790:	00101a40 	call	101a4 <puts>
		return;
    5794:	0000c206 	br	5aa0 <_Z9calc_adsrttttttttff+0x3e0>
	}
	if (dec_m_seconds > 5000) {
    5798:	e0bff18b 	ldhu	r2,-58(fp)
    579c:	1084e270 	cmpltui	r2,r2,5001
    57a0:	1000041e 	bne	r2,zero,57b4 <_Z9calc_adsrttttttttff+0xf4>
		printf("ERROR: Requested decay length is too long.\n");
    57a4:	010000b4 	movhi	r4,2
    57a8:	2113c704 	addi	r4,r4,20252
    57ac:	00101a40 	call	101a4 <puts>
		return;
    57b0:	0000bb06 	br	5aa0 <_Z9calc_adsrttttttttff+0x3e0>
	}
	if (sus_m_seconds > 20000) {
    57b4:	e0bff20b 	ldhu	r2,-56(fp)
    57b8:	10938870 	cmpltui	r2,r2,20001
    57bc:	1000041e 	bne	r2,zero,57d0 <_Z9calc_adsrttttttttff+0x110>
		printf("ERROR: Requested sustain length is too long.\n");
    57c0:	010000b4 	movhi	r4,2
    57c4:	2113d204 	addi	r4,r4,20296
    57c8:	00101a40 	call	101a4 <puts>
		return;
    57cc:	0000b406 	br	5aa0 <_Z9calc_adsrttttttttff+0x3e0>
	}
	if (sus_m_seconds < rel_m_seconds) {
    57d0:	e0fff20b 	ldhu	r3,-56(fp)
    57d4:	e0bff28b 	ldhu	r2,-54(fp)
    57d8:	1880042e 	bgeu	r3,r2,57ec <_Z9calc_adsrttttttttff+0x12c>
		printf("ERROR: Requested sustain length must be longer than release length.\n");
    57dc:	010000b4 	movhi	r4,2
    57e0:	2113de04 	addi	r4,r4,20344
    57e4:	00101a40 	call	101a4 <puts>
		return;
    57e8:	0000ad06 	br	5aa0 <_Z9calc_adsrttttttttff+0x3e0>
	}
	if (rel_m_seconds > 10000) {
    57ec:	e0bff28b 	ldhu	r2,-54(fp)
    57f0:	1089c470 	cmpltui	r2,r2,10001
    57f4:	1000041e 	bne	r2,zero,5808 <_Z9calc_adsrttttttttff+0x148>
		printf("ERROR: Requested release length is too long.\n");
    57f8:	010000b4 	movhi	r4,2
    57fc:	2113ef04 	addi	r4,r4,20412
    5800:	00101a40 	call	101a4 <puts>
		return;
    5804:	0000a606 	br	5aa0 <_Z9calc_adsrttttttttff+0x3e0>
	}

	PEAK_ATT = p_att * (alt_u32) 0x80000;
    5808:	01524034 	movhi	r5,18688
    580c:	e13ff017 	ldw	r4,-64(fp)
    5810:	000e3240 	call	e324 <__mulsf3>
    5814:	1007883a 	mov	r3,r2
    5818:	1805883a 	mov	r2,r3
    581c:	1009883a 	mov	r4,r2
    5820:	000d7240 	call	d724 <__fixunssfsi>
    5824:	e0bfeb15 	stw	r2,-84(fp)
	if(peak_att + peak_sus >= 2) PEAK_ATT = 0xFFFFF;
    5828:	e1400717 	ldw	r5,28(fp)
    582c:	e1000617 	ldw	r4,24(fp)
    5830:	000d9600 	call	d960 <__addsf3>
    5834:	1007883a 	mov	r3,r2
    5838:	1805883a 	mov	r2,r3
    583c:	01500034 	movhi	r5,16384
    5840:	1009883a 	mov	r4,r2
    5844:	000e2680 	call	e268 <__gesf2>
    5848:	10000316 	blt	r2,zero,5858 <_Z9calc_adsrttttttttff+0x198>
    584c:	00800434 	movhi	r2,16
    5850:	10bfffc4 	addi	r2,r2,-1
    5854:	e0bfeb15 	stw	r2,-84(fp)
	PEAK_SUS = peak_sus * (alt_u32) 0x80000;
    5858:	01524034 	movhi	r5,18688
    585c:	e1000717 	ldw	r4,28(fp)
    5860:	000e3240 	call	e324 <__mulsf3>
    5864:	1007883a 	mov	r3,r2
    5868:	1805883a 	mov	r2,r3
    586c:	1009883a 	mov	r4,r2
    5870:	000d7240 	call	d724 <__fixunssfsi>
    5874:	e0bff315 	stw	r2,-52(fp)
	ATT_LEN = (att_m_seconds * F_S) / 1000;
    5878:	e0bff10b 	ldhu	r2,-60(fp)
    587c:	016b1114 	movui	r5,44100
    5880:	1009883a 	mov	r4,r2
    5884:	000d9380 	call	d938 <__mulsi3>
    5888:	0140fa04 	movi	r5,1000
    588c:	1009883a 	mov	r4,r2
    5890:	000d7840 	call	d784 <__divsi3>
    5894:	e0bfec15 	stw	r2,-80(fp)
	if(!ATT_LEN) ATT_LEN = 1;
    5898:	e0bfec17 	ldw	r2,-80(fp)
    589c:	1000021e 	bne	r2,zero,58a8 <_Z9calc_adsrttttttttff+0x1e8>
    58a0:	00800044 	movi	r2,1
    58a4:	e0bfec15 	stw	r2,-80(fp)
	ATT_STEP = PEAK_ATT / ATT_LEN;
    58a8:	e17fec17 	ldw	r5,-80(fp)
    58ac:	e13feb17 	ldw	r4,-84(fp)
    58b0:	000d87c0 	call	d87c <__udivsi3>
    58b4:	e0bff415 	stw	r2,-48(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    58b8:	e0bff18b 	ldhu	r2,-58(fp)
    58bc:	016b1114 	movui	r5,44100
    58c0:	1009883a 	mov	r4,r2
    58c4:	000d9380 	call	d938 <__mulsi3>
    58c8:	0140fa04 	movi	r5,1000
    58cc:	1009883a 	mov	r4,r2
    58d0:	000d7840 	call	d784 <__divsi3>
    58d4:	e0bfed15 	stw	r2,-76(fp)
	if(!DEC_LEN) DEC_LEN = 1;
    58d8:	e0bfed17 	ldw	r2,-76(fp)
    58dc:	1000021e 	bne	r2,zero,58e8 <_Z9calc_adsrttttttttff+0x228>
    58e0:	00800044 	movi	r2,1
    58e4:	e0bfed15 	stw	r2,-76(fp)
	DEC_STEP = (PEAK_ATT - PEAK_SUS) / DEC_LEN;
    58e8:	e0ffeb17 	ldw	r3,-84(fp)
    58ec:	e0bff317 	ldw	r2,-52(fp)
    58f0:	1885c83a 	sub	r2,r3,r2
    58f4:	e17fed17 	ldw	r5,-76(fp)
    58f8:	1009883a 	mov	r4,r2
    58fc:	000d87c0 	call	d87c <__udivsi3>
    5900:	e0bff515 	stw	r2,-44(fp)
	SUS_LEN = (sus_m_seconds * F_S) / 1000;
    5904:	e0bff20b 	ldhu	r2,-56(fp)
    5908:	016b1114 	movui	r5,44100
    590c:	1009883a 	mov	r4,r2
    5910:	000d9380 	call	d938 <__mulsi3>
    5914:	0140fa04 	movi	r5,1000
    5918:	1009883a 	mov	r4,r2
    591c:	000d7840 	call	d784 <__divsi3>
    5920:	e0bfee15 	stw	r2,-72(fp)
	if(!SUS_LEN) SUS_LEN = 1;
    5924:	e0bfee17 	ldw	r2,-72(fp)
    5928:	1000021e 	bne	r2,zero,5934 <_Z9calc_adsrttttttttff+0x274>
    592c:	00800044 	movi	r2,1
    5930:	e0bfee15 	stw	r2,-72(fp)
	SUS_STEP = PEAK_SUS / SUS_LEN;
    5934:	e17fee17 	ldw	r5,-72(fp)
    5938:	e13ff317 	ldw	r4,-52(fp)
    593c:	000d87c0 	call	d87c <__udivsi3>
    5940:	e0bff615 	stw	r2,-40(fp)
	REL_LEN = (rel_m_seconds * F_S) / 1000;
    5944:	e0bff28b 	ldhu	r2,-54(fp)
    5948:	016b1114 	movui	r5,44100
    594c:	1009883a 	mov	r4,r2
    5950:	000d9380 	call	d938 <__mulsi3>
    5954:	0140fa04 	movi	r5,1000
    5958:	1009883a 	mov	r4,r2
    595c:	000d7840 	call	d784 <__divsi3>
    5960:	e0bfef15 	stw	r2,-68(fp)
	if(!REL_LEN) REL_LEN = 1;
    5964:	e0bfef17 	ldw	r2,-68(fp)
    5968:	1000021e 	bne	r2,zero,5974 <_Z9calc_adsrttttttttff+0x2b4>
    596c:	00800044 	movi	r2,1
    5970:	e0bfef15 	stw	r2,-68(fp)
	REL_STEP = PEAK_SUS / REL_LEN;
    5974:	e17fef17 	ldw	r5,-68(fp)
    5978:	e13ff317 	ldw	r4,-52(fp)
    597c:	000d87c0 	call	d87c <__udivsi3>
    5980:	e0bff715 	stw	r2,-36(fp)

	set_ctrl(0, PEAK_A, PEAK_ATT);
    5984:	e1bfeb17 	ldw	r6,-84(fp)
    5988:	000b883a 	mov	r5,zero
    598c:	0009883a 	mov	r4,zero
    5990:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, ATT_S, ATT_STEP);
    5994:	e1bff417 	ldw	r6,-48(fp)
    5998:	01400044 	movi	r5,1
    599c:	0009883a 	mov	r4,zero
    59a0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, DEC_S, DEC_STEP);
    59a4:	e1bff517 	ldw	r6,-44(fp)
    59a8:	01400084 	movi	r5,2
    59ac:	0009883a 	mov	r4,zero
    59b0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, PEAK_S, PEAK_SUS);
    59b4:	e1bff317 	ldw	r6,-52(fp)
    59b8:	014000c4 	movi	r5,3
    59bc:	0009883a 	mov	r4,zero
    59c0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, SUS_S, SUS_STEP);
    59c4:	e1bff617 	ldw	r6,-40(fp)
    59c8:	01400104 	movi	r5,4
    59cc:	0009883a 	mov	r4,zero
    59d0:	000565c0 	call	565c <_Z8set_ctrlhhm>
	set_ctrl(0, REL_S, REL_STEP);
    59d4:	e1bff717 	ldw	r6,-36(fp)
    59d8:	01400144 	movi	r5,5
    59dc:	0009883a 	mov	r4,zero
    59e0:	000565c0 	call	565c <_Z8set_ctrlhhm>

	printf("Attack Time:\t%d\n", att_m_seconds);
    59e4:	e0bff10b 	ldhu	r2,-60(fp)
    59e8:	100b883a 	mov	r5,r2
    59ec:	010000b4 	movhi	r4,2
    59f0:	2113fb04 	addi	r4,r4,20460
    59f4:	00100880 	call	10088 <printf>
	printf("Decay Time:\t%d\n", dec_m_seconds);
    59f8:	e0bff18b 	ldhu	r2,-58(fp)
    59fc:	100b883a 	mov	r5,r2
    5a00:	010000b4 	movhi	r4,2
    5a04:	21140004 	addi	r4,r4,20480
    5a08:	00100880 	call	10088 <printf>
	printf("Sustain Time:\t%d\n", sus_m_seconds);
    5a0c:	e0bff20b 	ldhu	r2,-56(fp)
    5a10:	100b883a 	mov	r5,r2
    5a14:	010000b4 	movhi	r4,2
    5a18:	21140404 	addi	r4,r4,20496
    5a1c:	00100880 	call	10088 <printf>
	printf("Release Time:\t%d\n", rel_m_seconds);
    5a20:	e0bff28b 	ldhu	r2,-54(fp)
    5a24:	100b883a 	mov	r5,r2
    5a28:	010000b4 	movhi	r4,2
    5a2c:	21140904 	addi	r4,r4,20516
    5a30:	00100880 	call	10088 <printf>
	printf("Peak Attack:\t%f\n", p_att);
    5a34:	e13ff017 	ldw	r4,-64(fp)
    5a38:	000eebc0 	call	eebc <__extendsfdf2>
    5a3c:	100d883a 	mov	r6,r2
    5a40:	180f883a 	mov	r7,r3
    5a44:	300b883a 	mov	r5,r6
    5a48:	380d883a 	mov	r6,r7
    5a4c:	010000b4 	movhi	r4,2
    5a50:	21140e04 	addi	r4,r4,20536
    5a54:	00100880 	call	10088 <printf>
	printf("Peak Sustain:\t%f\n", peak_sus);
    5a58:	e1000717 	ldw	r4,28(fp)
    5a5c:	000eebc0 	call	eebc <__extendsfdf2>
    5a60:	100d883a 	mov	r6,r2
    5a64:	180f883a 	mov	r7,r3
    5a68:	300b883a 	mov	r5,r6
    5a6c:	380d883a 	mov	r6,r7
    5a70:	010000b4 	movhi	r4,2
    5a74:	21141304 	addi	r4,r4,20556
    5a78:	00100880 	call	10088 <printf>
	printf("PEAK_ATT:\t%X\n", PEAK_ATT);
    5a7c:	e17feb17 	ldw	r5,-84(fp)
    5a80:	010000b4 	movhi	r4,2
    5a84:	21141804 	addi	r4,r4,20576
    5a88:	00100880 	call	10088 <printf>
	printf("PEAK_SUS:\t%X\n\n", PEAK_SUS);
    5a8c:	e17ff317 	ldw	r5,-52(fp)
    5a90:	010000b4 	movhi	r4,2
    5a94:	21141c04 	addi	r4,r4,20592
    5a98:	00100880 	call	10088 <printf>
	return;
    5a9c:	0001883a 	nop
}
    5aa0:	e037883a 	mov	sp,fp
    5aa4:	dfc00117 	ldw	ra,4(sp)
    5aa8:	df000017 	ldw	fp,0(sp)
    5aac:	dec00204 	addi	sp,sp,8
    5ab0:	f800283a 	ret

00005ab4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5ab4:	defff904 	addi	sp,sp,-28
    5ab8:	dfc00615 	stw	ra,24(sp)
    5abc:	df000515 	stw	fp,20(sp)
    5ac0:	df000504 	addi	fp,sp,20
    5ac4:	e13ffc15 	stw	r4,-16(fp)
    5ac8:	e17ffd15 	stw	r5,-12(fp)
    5acc:	3007883a 	mov	r3,r6
    5ad0:	3805883a 	mov	r2,r7
    5ad4:	e0fffe05 	stb	r3,-8(fp)
    5ad8:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    5adc:	e0800217 	ldw	r2,8(fp)
    5ae0:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    5ae4:	e0bffc17 	ldw	r2,-16(fp)
    5ae8:	10800117 	ldw	r2,4(r2)
    5aec:	1080004c 	andi	r2,r2,1
    5af0:	1007883a 	mov	r3,r2
    5af4:	e0bffb17 	ldw	r2,-20(fp)
    5af8:	10800003 	ldbu	r2,0(r2)
    5afc:	1080004c 	andi	r2,r2,1
    5b00:	18c03fcc 	andi	r3,r3,255
    5b04:	10803fcc 	andi	r2,r2,255
    5b08:	18801426 	beq	r3,r2,5b5c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5b0c:	e0bffb17 	ldw	r2,-20(fp)
    5b10:	10800003 	ldbu	r2,0(r2)
    5b14:	1080004c 	andi	r2,r2,1
    5b18:	10803fcc 	andi	r2,r2,255
    5b1c:	10000826 	beq	r2,zero,5b40 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5b20:	e0bffc17 	ldw	r2,-16(fp)
    5b24:	10800017 	ldw	r2,0(r2)
    5b28:	10800304 	addi	r2,r2,12
    5b2c:	10800017 	ldw	r2,0(r2)
    5b30:	e17ffb17 	ldw	r5,-20(fp)
    5b34:	e13ffc17 	ldw	r4,-16(fp)
    5b38:	103ee83a 	callr	r2
    5b3c:	00000706 	br	5b5c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5b40:	e0bffc17 	ldw	r2,-16(fp)
    5b44:	10800017 	ldw	r2,0(r2)
    5b48:	10800204 	addi	r2,r2,8
    5b4c:	10800017 	ldw	r2,0(r2)
    5b50:	e17ffb17 	ldw	r5,-20(fp)
    5b54:	e13ffc17 	ldw	r4,-16(fp)
    5b58:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5b5c:	e0bffc17 	ldw	r2,-16(fp)
    5b60:	10800117 	ldw	r2,4(r2)
    5b64:	1004d07a 	srli	r2,r2,1
    5b68:	1080004c 	andi	r2,r2,1
    5b6c:	1007883a 	mov	r3,r2
    5b70:	e0bffb17 	ldw	r2,-20(fp)
    5b74:	10800003 	ldbu	r2,0(r2)
    5b78:	1004d07a 	srli	r2,r2,1
    5b7c:	1080004c 	andi	r2,r2,1
    5b80:	18c03fcc 	andi	r3,r3,255
    5b84:	10803fcc 	andi	r2,r2,255
    5b88:	18801426 	beq	r3,r2,5bdc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5b8c:	e0bffb17 	ldw	r2,-20(fp)
    5b90:	10800003 	ldbu	r2,0(r2)
    5b94:	1080008c 	andi	r2,r2,2
    5b98:	10803fcc 	andi	r2,r2,255
    5b9c:	10000826 	beq	r2,zero,5bc0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    5ba0:	e0bffc17 	ldw	r2,-16(fp)
    5ba4:	10800017 	ldw	r2,0(r2)
    5ba8:	10800504 	addi	r2,r2,20
    5bac:	10800017 	ldw	r2,0(r2)
    5bb0:	e17ffb17 	ldw	r5,-20(fp)
    5bb4:	e13ffc17 	ldw	r4,-16(fp)
    5bb8:	103ee83a 	callr	r2
    5bbc:	00000706 	br	5bdc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5bc0:	e0bffc17 	ldw	r2,-16(fp)
    5bc4:	10800017 	ldw	r2,0(r2)
    5bc8:	10800404 	addi	r2,r2,16
    5bcc:	10800017 	ldw	r2,0(r2)
    5bd0:	e17ffb17 	ldw	r5,-20(fp)
    5bd4:	e13ffc17 	ldw	r4,-16(fp)
    5bd8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5bdc:	e0bffc17 	ldw	r2,-16(fp)
    5be0:	10800117 	ldw	r2,4(r2)
    5be4:	1004d0ba 	srli	r2,r2,2
    5be8:	1080004c 	andi	r2,r2,1
    5bec:	1007883a 	mov	r3,r2
    5bf0:	e0bffb17 	ldw	r2,-20(fp)
    5bf4:	10800003 	ldbu	r2,0(r2)
    5bf8:	1004d0ba 	srli	r2,r2,2
    5bfc:	1080004c 	andi	r2,r2,1
    5c00:	18c03fcc 	andi	r3,r3,255
    5c04:	10803fcc 	andi	r2,r2,255
    5c08:	18801426 	beq	r3,r2,5c5c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5c0c:	e0bffb17 	ldw	r2,-20(fp)
    5c10:	10800003 	ldbu	r2,0(r2)
    5c14:	1080010c 	andi	r2,r2,4
    5c18:	10803fcc 	andi	r2,r2,255
    5c1c:	10000826 	beq	r2,zero,5c40 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5c20:	e0bffc17 	ldw	r2,-16(fp)
    5c24:	10800017 	ldw	r2,0(r2)
    5c28:	10800704 	addi	r2,r2,28
    5c2c:	10800017 	ldw	r2,0(r2)
    5c30:	e17ffb17 	ldw	r5,-20(fp)
    5c34:	e13ffc17 	ldw	r4,-16(fp)
    5c38:	103ee83a 	callr	r2
    5c3c:	00000706 	br	5c5c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5c40:	e0bffc17 	ldw	r2,-16(fp)
    5c44:	10800017 	ldw	r2,0(r2)
    5c48:	10800604 	addi	r2,r2,24
    5c4c:	10800017 	ldw	r2,0(r2)
    5c50:	e17ffb17 	ldw	r5,-20(fp)
    5c54:	e13ffc17 	ldw	r4,-16(fp)
    5c58:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5c5c:	e0bffb17 	ldw	r2,-20(fp)
    5c60:	10800043 	ldbu	r2,1(r2)
    5c64:	10803fcc 	andi	r2,r2,255
    5c68:	1080201c 	xori	r2,r2,128
    5c6c:	10bfe004 	addi	r2,r2,-128
    5c70:	1000061e 	bne	r2,zero,5c8c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    5c74:	e0bffb17 	ldw	r2,-20(fp)
    5c78:	10800083 	ldbu	r2,2(r2)
    5c7c:	10803fcc 	andi	r2,r2,255
    5c80:	1080201c 	xori	r2,r2,128
    5c84:	10bfe004 	addi	r2,r2,-128
    5c88:	10000726 	beq	r2,zero,5ca8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5c8c:	e0bffc17 	ldw	r2,-16(fp)
    5c90:	10800017 	ldw	r2,0(r2)
    5c94:	10800104 	addi	r2,r2,4
    5c98:	10800017 	ldw	r2,0(r2)
    5c9c:	e17ffb17 	ldw	r5,-20(fp)
    5ca0:	e13ffc17 	ldw	r4,-16(fp)
    5ca4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    5ca8:	e0800217 	ldw	r2,8(fp)
    5cac:	10c00003 	ldbu	r3,0(r2)
    5cb0:	e0bffc17 	ldw	r2,-16(fp)
    5cb4:	10c00105 	stb	r3,4(r2)
#endif

};
    5cb8:	0001883a 	nop
    5cbc:	e037883a 	mov	sp,fp
    5cc0:	dfc00117 	ldw	ra,4(sp)
    5cc4:	df000017 	ldw	fp,0(sp)
    5cc8:	dec00204 	addi	sp,sp,8
    5ccc:	f800283a 	ret

00005cd0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5cd0:	defff804 	addi	sp,sp,-32
    5cd4:	dfc00715 	stw	ra,28(sp)
    5cd8:	df000615 	stw	fp,24(sp)
    5cdc:	df000604 	addi	fp,sp,24
    5ce0:	e13ffc15 	stw	r4,-16(fp)
    5ce4:	e17ffd15 	stw	r5,-12(fp)
    5ce8:	3007883a 	mov	r3,r6
    5cec:	3805883a 	mov	r2,r7
    5cf0:	e0fffe05 	stb	r3,-8(fp)
    5cf4:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5cf8:	e0800217 	ldw	r2,8(fp)
    5cfc:	10800084 	addi	r2,r2,2
    5d00:	10800003 	ldbu	r2,0(r2)
    5d04:	10803fcc 	andi	r2,r2,255
    5d08:	10800058 	cmpnei	r2,r2,1
    5d0c:	10009926 	beq	r2,zero,5f74 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5d10:	e0bffc17 	ldw	r2,-16(fp)
    5d14:	10c00103 	ldbu	r3,4(r2)
    5d18:	e0800217 	ldw	r2,8(fp)
    5d1c:	10800003 	ldbu	r2,0(r2)
    5d20:	18c03fcc 	andi	r3,r3,255
    5d24:	10803fcc 	andi	r2,r2,255
    5d28:	18800e26 	beq	r3,r2,5d64 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5d2c:	e0bffc17 	ldw	r2,-16(fp)
    5d30:	10800017 	ldw	r2,0(r2)
    5d34:	10800204 	addi	r2,r2,8
    5d38:	10800017 	ldw	r2,0(r2)
    5d3c:	e0fffc17 	ldw	r3,-16(fp)
    5d40:	18c00103 	ldbu	r3,4(r3)
    5d44:	19003fcc 	andi	r4,r3,255
    5d48:	e0c00217 	ldw	r3,8(fp)
    5d4c:	18c00003 	ldbu	r3,0(r3)
    5d50:	18c03fcc 	andi	r3,r3,255
    5d54:	180d883a 	mov	r6,r3
    5d58:	200b883a 	mov	r5,r4
    5d5c:	e13ffc17 	ldw	r4,-16(fp)
    5d60:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    5d64:	00800084 	movi	r2,2
    5d68:	e0bffa05 	stb	r2,-24(fp)
    5d6c:	e0bffa03 	ldbu	r2,-24(fp)
    5d70:	10800228 	cmpgeui	r2,r2,8
    5d74:	10006e1e 	bne	r2,zero,5f30 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5d78:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5d7c:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5d80:	00800084 	movi	r2,2
    5d84:	e0bffac5 	stb	r2,-21(fp)
    5d88:	e0bffac3 	ldbu	r2,-21(fp)
    5d8c:	10800228 	cmpgeui	r2,r2,8
    5d90:	10002f1e 	bne	r2,zero,5e50 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    5d94:	e0bffa03 	ldbu	r2,-24(fp)
    5d98:	e0c00217 	ldw	r3,8(fp)
    5d9c:	1885883a 	add	r2,r3,r2
    5da0:	11000003 	ldbu	r4,0(r2)
    5da4:	e0bffac3 	ldbu	r2,-21(fp)
    5da8:	e0fffc17 	ldw	r3,-16(fp)
    5dac:	1885883a 	add	r2,r3,r2
    5db0:	10800104 	addi	r2,r2,4
    5db4:	10800003 	ldbu	r2,0(r2)
    5db8:	20c03fcc 	andi	r3,r4,255
    5dbc:	10803fcc 	andi	r2,r2,255
    5dc0:	1880091e 	bne	r3,r2,5de8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5dc4:	e0bffa03 	ldbu	r2,-24(fp)
    5dc8:	e0c00217 	ldw	r3,8(fp)
    5dcc:	1885883a 	add	r2,r3,r2
    5dd0:	10800003 	ldbu	r2,0(r2)
    5dd4:	10803fcc 	andi	r2,r2,255
    5dd8:	10800060 	cmpeqi	r2,r2,1
    5ddc:	1000021e 	bne	r2,zero,5de8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5de0:	00800044 	movi	r2,1
    5de4:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5de8:	e0bffac3 	ldbu	r2,-21(fp)
    5dec:	e0c00217 	ldw	r3,8(fp)
    5df0:	1885883a 	add	r2,r3,r2
    5df4:	11000003 	ldbu	r4,0(r2)
    5df8:	e0bffa03 	ldbu	r2,-24(fp)
    5dfc:	e0fffc17 	ldw	r3,-16(fp)
    5e00:	1885883a 	add	r2,r3,r2
    5e04:	10800104 	addi	r2,r2,4
    5e08:	10800003 	ldbu	r2,0(r2)
    5e0c:	20c03fcc 	andi	r3,r4,255
    5e10:	10803fcc 	andi	r2,r2,255
    5e14:	18800a1e 	bne	r3,r2,5e40 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5e18:	e0bffa03 	ldbu	r2,-24(fp)
    5e1c:	e0fffc17 	ldw	r3,-16(fp)
    5e20:	1885883a 	add	r2,r3,r2
    5e24:	10800104 	addi	r2,r2,4
    5e28:	10800003 	ldbu	r2,0(r2)
    5e2c:	10803fcc 	andi	r2,r2,255
    5e30:	10800060 	cmpeqi	r2,r2,1
    5e34:	1000021e 	bne	r2,zero,5e40 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5e38:	00800044 	movi	r2,1
    5e3c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5e40:	e0bffac3 	ldbu	r2,-21(fp)
    5e44:	10800044 	addi	r2,r2,1
    5e48:	e0bffac5 	stb	r2,-21(fp)
    5e4c:	003fce06 	br	5d88 <__alt_data_end+0xfc005d88>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5e50:	e0bffa43 	ldbu	r2,-23(fp)
    5e54:	1080005c 	xori	r2,r2,1
    5e58:	10803fcc 	andi	r2,r2,255
    5e5c:	10001c26 	beq	r2,zero,5ed0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5e60:	e0bffc17 	ldw	r2,-16(fp)
    5e64:	10800017 	ldw	r2,0(r2)
    5e68:	10800104 	addi	r2,r2,4
    5e6c:	10800017 	ldw	r2,0(r2)
    5e70:	e0fffa03 	ldbu	r3,-24(fp)
    5e74:	e1000217 	ldw	r4,8(fp)
    5e78:	20c7883a 	add	r3,r4,r3
    5e7c:	18c00003 	ldbu	r3,0(r3)
    5e80:	18c03fcc 	andi	r3,r3,255
    5e84:	180d883a 	mov	r6,r3
    5e88:	e17ffd17 	ldw	r5,-12(fp)
    5e8c:	e13ffc17 	ldw	r4,-16(fp)
    5e90:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    5e94:	e0bffc17 	ldw	r2,-16(fp)
    5e98:	10800017 	ldw	r2,0(r2)
    5e9c:	10800304 	addi	r2,r2,12
    5ea0:	10800017 	ldw	r2,0(r2)
    5ea4:	e0c00217 	ldw	r3,8(fp)
    5ea8:	18c00003 	ldbu	r3,0(r3)
    5eac:	19403fcc 	andi	r5,r3,255
    5eb0:	e0fffa03 	ldbu	r3,-24(fp)
    5eb4:	e1000217 	ldw	r4,8(fp)
    5eb8:	20c7883a 	add	r3,r4,r3
    5ebc:	18c00003 	ldbu	r3,0(r3)
    5ec0:	18c03fcc 	andi	r3,r3,255
    5ec4:	180d883a 	mov	r6,r3
    5ec8:	e13ffc17 	ldw	r4,-16(fp)
    5ecc:	103ee83a 	callr	r2
                }
                if (!up)
    5ed0:	e0bffa83 	ldbu	r2,-22(fp)
    5ed4:	1080005c 	xori	r2,r2,1
    5ed8:	10803fcc 	andi	r2,r2,255
    5edc:	10001026 	beq	r2,zero,5f20 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5ee0:	e0bffc17 	ldw	r2,-16(fp)
    5ee4:	10800017 	ldw	r2,0(r2)
    5ee8:	10800404 	addi	r2,r2,16
    5eec:	10800017 	ldw	r2,0(r2)
    5ef0:	e0fffc17 	ldw	r3,-16(fp)
    5ef4:	18c00103 	ldbu	r3,4(r3)
    5ef8:	19403fcc 	andi	r5,r3,255
    5efc:	e0fffa03 	ldbu	r3,-24(fp)
    5f00:	e13ffc17 	ldw	r4,-16(fp)
    5f04:	20c7883a 	add	r3,r4,r3
    5f08:	18c00104 	addi	r3,r3,4
    5f0c:	18c00003 	ldbu	r3,0(r3)
    5f10:	18c03fcc 	andi	r3,r3,255
    5f14:	180d883a 	mov	r6,r3
    5f18:	e13ffc17 	ldw	r4,-16(fp)
    5f1c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5f20:	e0bffa03 	ldbu	r2,-24(fp)
    5f24:	10800044 	addi	r2,r2,1
    5f28:	e0bffa05 	stb	r2,-24(fp)
    5f2c:	003f8f06 	br	5d6c <__alt_data_end+0xfc005d6c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5f30:	e03ffb05 	stb	zero,-20(fp)
    5f34:	e0bffb03 	ldbu	r2,-20(fp)
    5f38:	10800228 	cmpgeui	r2,r2,8
    5f3c:	10000e1e 	bne	r2,zero,5f78 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5f40:	e0bffb03 	ldbu	r2,-20(fp)
    5f44:	e0fffb03 	ldbu	r3,-20(fp)
    5f48:	e1000217 	ldw	r4,8(fp)
    5f4c:	20c7883a 	add	r3,r4,r3
    5f50:	18c00003 	ldbu	r3,0(r3)
    5f54:	e13ffc17 	ldw	r4,-16(fp)
    5f58:	2085883a 	add	r2,r4,r2
    5f5c:	10800104 	addi	r2,r2,4
    5f60:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5f64:	e0bffb03 	ldbu	r2,-20(fp)
    5f68:	10800044 	addi	r2,r2,1
    5f6c:	e0bffb05 	stb	r2,-20(fp)
    5f70:	003ff006 	br	5f34 <__alt_data_end+0xfc005f34>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5f74:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5f78:	e037883a 	mov	sp,fp
    5f7c:	dfc00117 	ldw	ra,4(sp)
    5f80:	df000017 	ldw	fp,0(sp)
    5f84:	dec00204 	addi	sp,sp,8
    5f88:	f800283a 	ret

00005f8c <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5f8c:	defffa04 	addi	sp,sp,-24
    5f90:	dfc00515 	stw	ra,20(sp)
    5f94:	df000415 	stw	fp,16(sp)
    5f98:	df000404 	addi	fp,sp,16
    5f9c:	e13ffd15 	stw	r4,-12(fp)
    5fa0:	2807883a 	mov	r3,r5
    5fa4:	3005883a 	mov	r2,r6
    5fa8:	e0fffe05 	stb	r3,-8(fp)
    5fac:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5fb0:	e0bffe03 	ldbu	r2,-8(fp)
    5fb4:	1080088c 	andi	r2,r2,34
    5fb8:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5fbc:	e0bfff03 	ldbu	r2,-4(fp)
    5fc0:	10800130 	cmpltui	r2,r2,4
    5fc4:	1000151e 	bne	r2,zero,601c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5fc8:	e0bfff03 	ldbu	r2,-4(fp)
    5fcc:	108007a8 	cmpgeui	r2,r2,30
    5fd0:	1000121e 	bne	r2,zero,601c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5fd4:	e0bffd17 	ldw	r2,-12(fp)
    5fd8:	10800317 	ldw	r2,12(r2)
    5fdc:	1080008c 	andi	r2,r2,2
    5fe0:	1000021e 	bne	r2,zero,5fec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5fe4:	e0bffc03 	ldbu	r2,-16(fp)
    5fe8:	1000061e 	bne	r2,zero,6004 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5fec:	e0bffd17 	ldw	r2,-12(fp)
    5ff0:	10800317 	ldw	r2,12(r2)
    5ff4:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5ff8:	10000526 	beq	r2,zero,6010 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5ffc:	e0bffc03 	ldbu	r2,-16(fp)
    6000:	1000031e 	bne	r2,zero,6010 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    6004:	e0bfff03 	ldbu	r2,-4(fp)
    6008:	10800f44 	addi	r2,r2,61
    600c:	00008006 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    6010:	e0bfff03 	ldbu	r2,-4(fp)
    6014:	10801744 	addi	r2,r2,93
    6018:	00007d06 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    601c:	e0bfff03 	ldbu	r2,-4(fp)
    6020:	108007b0 	cmpltui	r2,r2,30
    6024:	1000191e 	bne	r2,zero,608c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    6028:	e0bfff03 	ldbu	r2,-4(fp)
    602c:	10800a28 	cmpgeui	r2,r2,40
    6030:	1000161e 	bne	r2,zero,608c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    6034:	e0bffc03 	ldbu	r2,-16(fp)
    6038:	10000c26 	beq	r2,zero,606c <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    603c:	e0bffd17 	ldw	r2,-12(fp)
    6040:	10800017 	ldw	r2,0(r2)
    6044:	10800504 	addi	r2,r2,20
    6048:	10800017 	ldw	r2,0(r2)
    604c:	e13ffd17 	ldw	r4,-12(fp)
    6050:	103ee83a 	callr	r2
    6054:	1007883a 	mov	r3,r2
    6058:	e0bfff03 	ldbu	r2,-4(fp)
    605c:	10bff884 	addi	r2,r2,-30
    6060:	1885883a 	add	r2,r3,r2
    6064:	10800003 	ldbu	r2,0(r2)
    6068:	00006906 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    606c:	e0bfff03 	ldbu	r2,-4(fp)
    6070:	108009e0 	cmpeqi	r2,r2,39
    6074:	1000031e 	bne	r2,zero,6084 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    6078:	e0bfff03 	ldbu	r2,-4(fp)
    607c:	108004c4 	addi	r2,r2,19
    6080:	00006306 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6084:	00800c04 	movi	r2,48
    6088:	00006106 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    608c:	e0bfff03 	ldbu	r2,-4(fp)
    6090:	10801670 	cmpltui	r2,r2,89
    6094:	10000a1e 	bne	r2,zero,60c0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    6098:	e0bfff03 	ldbu	r2,-4(fp)
    609c:	108018a8 	cmpgeui	r2,r2,98
    60a0:	1000071e 	bne	r2,zero,60c0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    60a4:	e0bffd17 	ldw	r2,-12(fp)
    60a8:	10800317 	ldw	r2,12(r2)
    60ac:	1080004c 	andi	r2,r2,1
    60b0:	10005626 	beq	r2,zero,620c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    60b4:	e0bfff03 	ldbu	r2,-4(fp)
    60b8:	10bff604 	addi	r2,r2,-40
    60bc:	00005406 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    60c0:	e0bfff03 	ldbu	r2,-4(fp)
    60c4:	10800b70 	cmpltui	r2,r2,45
    60c8:	10001d1e 	bne	r2,zero,6140 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    60cc:	e0bfff03 	ldbu	r2,-4(fp)
    60d0:	10800e68 	cmpgeui	r2,r2,57
    60d4:	10001a1e 	bne	r2,zero,6140 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    60d8:	e0bffc03 	ldbu	r2,-16(fp)
    60dc:	10000c26 	beq	r2,zero,6110 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    60e0:	e0bffd17 	ldw	r2,-12(fp)
    60e4:	10800017 	ldw	r2,0(r2)
    60e8:	10800604 	addi	r2,r2,24
    60ec:	10800017 	ldw	r2,0(r2)
    60f0:	e13ffd17 	ldw	r4,-12(fp)
    60f4:	103ee83a 	callr	r2
    60f8:	1007883a 	mov	r3,r2
    60fc:	e0bfff03 	ldbu	r2,-4(fp)
    6100:	10bff4c4 	addi	r2,r2,-45
    6104:	1885883a 	add	r2,r3,r2
    6108:	10800003 	ldbu	r2,0(r2)
    610c:	00004006 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6110:	e0bffd17 	ldw	r2,-12(fp)
    6114:	10800017 	ldw	r2,0(r2)
    6118:	10800704 	addi	r2,r2,28
    611c:	10800017 	ldw	r2,0(r2)
    6120:	e13ffd17 	ldw	r4,-12(fp)
    6124:	103ee83a 	callr	r2
    6128:	1007883a 	mov	r3,r2
    612c:	e0bfff03 	ldbu	r2,-4(fp)
    6130:	10bff4c4 	addi	r2,r2,-45
    6134:	1885883a 	add	r2,r3,r2
    6138:	10800003 	ldbu	r2,0(r2)
    613c:	00003406 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    6140:	e0bfff03 	ldbu	r2,-4(fp)
    6144:	10801530 	cmpltui	r2,r2,84
    6148:	10000f1e 	bne	r2,zero,6188 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    614c:	e0bfff03 	ldbu	r2,-4(fp)
    6150:	10801668 	cmpgeui	r2,r2,89
    6154:	10000c1e 	bne	r2,zero,6188 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    6158:	e0bffd17 	ldw	r2,-12(fp)
    615c:	10800017 	ldw	r2,0(r2)
    6160:	10800804 	addi	r2,r2,32
    6164:	10800017 	ldw	r2,0(r2)
    6168:	e13ffd17 	ldw	r4,-12(fp)
    616c:	103ee83a 	callr	r2
    6170:	1007883a 	mov	r3,r2
    6174:	e0bfff03 	ldbu	r2,-4(fp)
    6178:	10bfeb04 	addi	r2,r2,-84
    617c:	1885883a 	add	r2,r3,r2
    6180:	10800003 	ldbu	r2,0(r2)
    6184:	00002206 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    6188:	e0bfff03 	ldbu	r2,-4(fp)
    618c:	10c00b20 	cmpeqi	r3,r2,44
    6190:	18000a1e 	bne	r3,zero,61bc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    6194:	10c00b48 	cmpgei	r3,r2,45
    6198:	1800031e 	bne	r3,zero,61a8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    619c:	10800a20 	cmpeqi	r2,r2,40
    61a0:	1000081e 	bne	r2,zero,61c4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    61a4:	00001906 	br	620c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    61a8:	10c018a0 	cmpeqi	r3,r2,98
    61ac:	1800071e 	bne	r3,zero,61cc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    61b0:	108018e0 	cmpeqi	r2,r2,99
    61b4:	10000d1e 	bne	r2,zero,61ec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    61b8:	00001406 	br	620c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    61bc:	00800804 	movi	r2,32
    61c0:	00001306 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    61c4:	00800344 	movi	r2,13
    61c8:	00001106 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    61cc:	e0bffd17 	ldw	r2,-12(fp)
    61d0:	10800317 	ldw	r2,12(r2)
    61d4:	1080004c 	andi	r2,r2,1
    61d8:	10000226 	beq	r2,zero,61e4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    61dc:	00800c04 	movi	r2,48
    61e0:	00000b06 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    61e4:	0005883a 	mov	r2,zero
    61e8:	00000906 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    61ec:	e0bffd17 	ldw	r2,-12(fp)
    61f0:	10800317 	ldw	r2,12(r2)
    61f4:	1080004c 	andi	r2,r2,1
    61f8:	10000226 	beq	r2,zero,6204 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    61fc:	00800b84 	movi	r2,46
    6200:	00000306 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6204:	0005883a 	mov	r2,zero
    6208:	00000106 	br	6210 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    620c:	0005883a 	mov	r2,zero
}
    6210:	e037883a 	mov	sp,fp
    6214:	dfc00117 	ldw	ra,4(sp)
    6218:	df000017 	ldw	fp,0(sp)
    621c:	dec00204 	addi	sp,sp,8
    6220:	f800283a 	ret

00006224 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    6224:	defffd04 	addi	sp,sp,-12
    6228:	df000215 	stw	fp,8(sp)
    622c:	df000204 	addi	fp,sp,8
    6230:	e13ffe15 	stw	r4,-8(fp)
    6234:	e17fff15 	stw	r5,-4(fp)
        };
    6238:	0001883a 	nop
    623c:	e037883a 	mov	sp,fp
    6240:	df000017 	ldw	fp,0(sp)
    6244:	dec00104 	addi	sp,sp,4
    6248:	f800283a 	ret

0000624c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    624c:	defffd04 	addi	sp,sp,-12
    6250:	df000215 	stw	fp,8(sp)
    6254:	df000204 	addi	fp,sp,8
    6258:	e13ffe15 	stw	r4,-8(fp)
    625c:	e17fff15 	stw	r5,-4(fp)
        };
    6260:	0001883a 	nop
    6264:	e037883a 	mov	sp,fp
    6268:	df000017 	ldw	fp,0(sp)
    626c:	dec00104 	addi	sp,sp,4
    6270:	f800283a 	ret

00006274 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6274:	defffd04 	addi	sp,sp,-12
    6278:	df000215 	stw	fp,8(sp)
    627c:	df000204 	addi	fp,sp,8
    6280:	e13ffe15 	stw	r4,-8(fp)
    6284:	e17fff15 	stw	r5,-4(fp)
        };
    6288:	0001883a 	nop
    628c:	e037883a 	mov	sp,fp
    6290:	df000017 	ldw	fp,0(sp)
    6294:	dec00104 	addi	sp,sp,4
    6298:	f800283a 	ret

0000629c <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    629c:	defffd04 	addi	sp,sp,-12
    62a0:	df000215 	stw	fp,8(sp)
    62a4:	df000204 	addi	fp,sp,8
    62a8:	e13ffe15 	stw	r4,-8(fp)
    62ac:	e17fff15 	stw	r5,-4(fp)
        };
    62b0:	0001883a 	nop
    62b4:	e037883a 	mov	sp,fp
    62b8:	df000017 	ldw	fp,0(sp)
    62bc:	dec00104 	addi	sp,sp,4
    62c0:	f800283a 	ret

000062c4 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    62c4:	defffd04 	addi	sp,sp,-12
    62c8:	df000215 	stw	fp,8(sp)
    62cc:	df000204 	addi	fp,sp,8
    62d0:	e13ffe15 	stw	r4,-8(fp)
    62d4:	e17fff15 	stw	r5,-4(fp)
        };
    62d8:	0001883a 	nop
    62dc:	e037883a 	mov	sp,fp
    62e0:	df000017 	ldw	fp,0(sp)
    62e4:	dec00104 	addi	sp,sp,4
    62e8:	f800283a 	ret

000062ec <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    62ec:	defffd04 	addi	sp,sp,-12
    62f0:	df000215 	stw	fp,8(sp)
    62f4:	df000204 	addi	fp,sp,8
    62f8:	e13ffe15 	stw	r4,-8(fp)
    62fc:	e17fff15 	stw	r5,-4(fp)
        };
    6300:	0001883a 	nop
    6304:	e037883a 	mov	sp,fp
    6308:	df000017 	ldw	fp,0(sp)
    630c:	dec00104 	addi	sp,sp,4
    6310:	f800283a 	ret

00006314 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6314:	defffd04 	addi	sp,sp,-12
    6318:	df000215 	stw	fp,8(sp)
    631c:	df000204 	addi	fp,sp,8
    6320:	e13ffe15 	stw	r4,-8(fp)
    6324:	e17fff15 	stw	r5,-4(fp)
        };
    6328:	0001883a 	nop
    632c:	e037883a 	mov	sp,fp
    6330:	df000017 	ldw	fp,0(sp)
    6334:	dec00104 	addi	sp,sp,4
    6338:	f800283a 	ret

0000633c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    633c:	defff704 	addi	sp,sp,-36
    6340:	dfc00815 	stw	ra,32(sp)
    6344:	df000715 	stw	fp,28(sp)
    6348:	df000704 	addi	fp,sp,28
    634c:	e13ffd15 	stw	r4,-12(fp)
    6350:	e17ffe15 	stw	r5,-8(fp)
    6354:	3005883a 	mov	r2,r6
    6358:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    635c:	e0bffd17 	ldw	r2,-12(fp)
    6360:	10800303 	ldbu	r2,12(r2)
    6364:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    6368:	e0bfff03 	ldbu	r2,-4(fp)
    636c:	10c011e0 	cmpeqi	r3,r2,71
    6370:	1800271e 	bne	r3,zero,6410 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    6374:	10c014e0 	cmpeqi	r3,r2,83
    6378:	1800031e 	bne	r3,zero,6388 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    637c:	10800e60 	cmpeqi	r2,r2,57
    6380:	1000111e 	bne	r2,zero,63c8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    6384:	00003506 	br	645c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    6388:	e0bffd17 	ldw	r2,-12(fp)
    638c:	10800317 	ldw	r2,12(r2)
    6390:	1080004c 	andi	r2,r2,1
    6394:	0084303a 	nor	r2,zero,r2
    6398:	1080004c 	andi	r2,r2,1
    639c:	1007883a 	mov	r3,r2
    63a0:	e0bffd17 	ldw	r2,-12(fp)
    63a4:	1940004c 	andi	r5,r3,1
    63a8:	11000303 	ldbu	r4,12(r2)
    63ac:	00ffff84 	movi	r3,-2
    63b0:	20c6703a 	and	r3,r4,r3
    63b4:	1809883a 	mov	r4,r3
    63b8:	2807883a 	mov	r3,r5
    63bc:	20c6b03a 	or	r3,r4,r3
    63c0:	10c00305 	stb	r3,12(r2)
                                break;
    63c4:	00002506 	br	645c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    63c8:	e0bffd17 	ldw	r2,-12(fp)
    63cc:	10800317 	ldw	r2,12(r2)
    63d0:	1004d07a 	srli	r2,r2,1
    63d4:	1080004c 	andi	r2,r2,1
    63d8:	0084303a 	nor	r2,zero,r2
    63dc:	1080004c 	andi	r2,r2,1
    63e0:	1007883a 	mov	r3,r2
    63e4:	e0bffd17 	ldw	r2,-12(fp)
    63e8:	18c0004c 	andi	r3,r3,1
    63ec:	18cb883a 	add	r5,r3,r3
    63f0:	11000303 	ldbu	r4,12(r2)
    63f4:	00ffff44 	movi	r3,-3
    63f8:	20c6703a 	and	r3,r4,r3
    63fc:	1809883a 	mov	r4,r3
    6400:	2807883a 	mov	r3,r5
    6404:	20c6b03a 	or	r3,r4,r3
    6408:	10c00305 	stb	r3,12(r2)
                                break;
    640c:	00001306 	br	645c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    6410:	e0bffd17 	ldw	r2,-12(fp)
    6414:	10800317 	ldw	r2,12(r2)
    6418:	1004d0ba 	srli	r2,r2,2
    641c:	1080004c 	andi	r2,r2,1
    6420:	0084303a 	nor	r2,zero,r2
    6424:	1080004c 	andi	r2,r2,1
    6428:	1007883a 	mov	r3,r2
    642c:	e0bffd17 	ldw	r2,-12(fp)
    6430:	18c0004c 	andi	r3,r3,1
    6434:	18c7883a 	add	r3,r3,r3
    6438:	18cb883a 	add	r5,r3,r3
    643c:	11000303 	ldbu	r4,12(r2)
    6440:	00fffec4 	movi	r3,-5
    6444:	20c6703a 	and	r3,r4,r3
    6448:	1809883a 	mov	r4,r3
    644c:	2807883a 	mov	r3,r5
    6450:	20c6b03a 	or	r3,r4,r3
    6454:	10c00305 	stb	r3,12(r2)
                                break;
    6458:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    645c:	e0bffd17 	ldw	r2,-12(fp)
    6460:	10800303 	ldbu	r2,12(r2)
    6464:	10c03fcc 	andi	r3,r2,255
    6468:	e0bffc03 	ldbu	r2,-16(fp)
    646c:	18801026 	beq	r3,r2,64b0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    6470:	e0bffe17 	ldw	r2,-8(fp)
    6474:	10000e26 	beq	r2,zero,64b0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    6478:	e0bffd17 	ldw	r2,-12(fp)
    647c:	10800303 	ldbu	r2,12(r2)
    6480:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    6484:	e0bffc44 	addi	r2,fp,-15
    6488:	d8800215 	stw	r2,8(sp)
    648c:	00800044 	movi	r2,1
    6490:	d8800115 	stw	r2,4(sp)
    6494:	d8000015 	stw	zero,0(sp)
    6498:	01c00084 	movi	r7,2
    649c:	000d883a 	mov	r6,zero
    64a0:	000b883a 	mov	r5,zero
    64a4:	e13ffe17 	ldw	r4,-8(fp)
    64a8:	00092f80 	call	92f8 <_ZN6USBHID9SetReportEhhhhtPh>
    64ac:	00000106 	br	64b4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    64b0:	0005883a 	mov	r2,zero
        };
    64b4:	e037883a 	mov	sp,fp
    64b8:	dfc00117 	ldw	ra,4(sp)
    64bc:	df000017 	ldw	fp,0(sp)
    64c0:	dec00204 	addi	sp,sp,8
    64c4:	f800283a 	ret

000064c8 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    64c8:	defffc04 	addi	sp,sp,-16
    64cc:	df000315 	stw	fp,12(sp)
    64d0:	df000304 	addi	fp,sp,12
    64d4:	e13ffd15 	stw	r4,-12(fp)
    64d8:	2807883a 	mov	r3,r5
    64dc:	3005883a 	mov	r2,r6
    64e0:	e0fffe05 	stb	r3,-8(fp)
    64e4:	e0bfff05 	stb	r2,-4(fp)
        };
    64e8:	0001883a 	nop
    64ec:	e037883a 	mov	sp,fp
    64f0:	df000017 	ldw	fp,0(sp)
    64f4:	dec00104 	addi	sp,sp,4
    64f8:	f800283a 	ret

000064fc <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    64fc:	defffc04 	addi	sp,sp,-16
    6500:	df000315 	stw	fp,12(sp)
    6504:	df000304 	addi	fp,sp,12
    6508:	e13ffd15 	stw	r4,-12(fp)
    650c:	2807883a 	mov	r3,r5
    6510:	3005883a 	mov	r2,r6
    6514:	e0fffe05 	stb	r3,-8(fp)
    6518:	e0bfff05 	stb	r2,-4(fp)
        };
    651c:	0001883a 	nop
    6520:	e037883a 	mov	sp,fp
    6524:	df000017 	ldw	fp,0(sp)
    6528:	dec00104 	addi	sp,sp,4
    652c:	f800283a 	ret

00006530 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6530:	defffc04 	addi	sp,sp,-16
    6534:	df000315 	stw	fp,12(sp)
    6538:	df000304 	addi	fp,sp,12
    653c:	e13ffd15 	stw	r4,-12(fp)
    6540:	2807883a 	mov	r3,r5
    6544:	3005883a 	mov	r2,r6
    6548:	e0fffe05 	stb	r3,-8(fp)
    654c:	e0bfff05 	stb	r2,-4(fp)
        };
    6550:	0001883a 	nop
    6554:	e037883a 	mov	sp,fp
    6558:	df000017 	ldw	fp,0(sp)
    655c:	dec00104 	addi	sp,sp,4
    6560:	f800283a 	ret

00006564 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    6564:	defffe04 	addi	sp,sp,-8
    6568:	df000115 	stw	fp,4(sp)
    656c:	df000104 	addi	fp,sp,4
    6570:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    6574:	008000b4 	movhi	r2,2
    6578:	109c4d84 	addi	r2,r2,28982
        };
    657c:	e037883a 	mov	sp,fp
    6580:	df000017 	ldw	fp,0(sp)
    6584:	dec00104 	addi	sp,sp,4
    6588:	f800283a 	ret

0000658c <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    658c:	defffe04 	addi	sp,sp,-8
    6590:	df000115 	stw	fp,4(sp)
    6594:	df000104 	addi	fp,sp,4
    6598:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    659c:	008000b4 	movhi	r2,2
    65a0:	109c5004 	addi	r2,r2,28992
        };
    65a4:	e037883a 	mov	sp,fp
    65a8:	df000017 	ldw	fp,0(sp)
    65ac:	dec00104 	addi	sp,sp,4
    65b0:	f800283a 	ret

000065b4 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    65b4:	defffe04 	addi	sp,sp,-8
    65b8:	df000115 	stw	fp,4(sp)
    65bc:	df000104 	addi	fp,sp,4
    65c0:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    65c4:	008000b4 	movhi	r2,2
    65c8:	109c5304 	addi	r2,r2,29004
        };
    65cc:	e037883a 	mov	sp,fp
    65d0:	df000017 	ldw	fp,0(sp)
    65d4:	dec00104 	addi	sp,sp,4
    65d8:	f800283a 	ret

000065dc <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    65dc:	defffe04 	addi	sp,sp,-8
    65e0:	df000115 	stw	fp,4(sp)
    65e4:	df000104 	addi	fp,sp,4
    65e8:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    65ec:	d0a1e684 	addi	r2,gp,-30822
        };
    65f0:	e037883a 	mov	sp,fp
    65f4:	df000017 	ldw	fp,0(sp)
    65f8:	dec00104 	addi	sp,sp,4
    65fc:	f800283a 	ret

00006600 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6600:	defffc04 	addi	sp,sp,-16
    6604:	dfc00315 	stw	ra,12(sp)
    6608:	df000215 	stw	fp,8(sp)
    660c:	df000204 	addi	fp,sp,8
    6610:	2005883a 	mov	r2,r4
    6614:	e17fff15 	stw	r5,-4(fp)
    6618:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    661c:	d0e1eb17 	ldw	r3,-30804(gp)
    6620:	e0bfff17 	ldw	r2,-4(fp)
    6624:	18800416 	blt	r3,r2,6638 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6628:	e0bffe07 	ldb	r2,-8(fp)
    662c:	1009883a 	mov	r4,r2
    6630:	00100cc0 	call	100cc <putchar>
    6634:	00000106 	br	663c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6638:	0001883a 	nop
        printf("%c", c);
}
    663c:	e037883a 	mov	sp,fp
    6640:	dfc00117 	ldw	ra,4(sp)
    6644:	df000017 	ldw	fp,0(sp)
    6648:	dec00204 	addi	sp,sp,8
    664c:	f800283a 	ret

00006650 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6650:	defffb04 	addi	sp,sp,-20
    6654:	dfc00415 	stw	ra,16(sp)
    6658:	df000315 	stw	fp,12(sp)
    665c:	df000304 	addi	fp,sp,12
    6660:	e13ffe15 	stw	r4,-8(fp)
    6664:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6668:	d0e1eb17 	ldw	r3,-30804(gp)
    666c:	e0bfff17 	ldw	r2,-4(fp)
    6670:	18801016 	blt	r3,r2,66b4 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    6674:	e0bffe17 	ldw	r2,-8(fp)
    6678:	10001026 	beq	r2,zero,66bc <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    667c:	e0bffe17 	ldw	r2,-8(fp)
    6680:	10c00044 	addi	r3,r2,1
    6684:	e0fffe15 	stw	r3,-8(fp)
    6688:	10800003 	ldbu	r2,0(r2)
    668c:	e0bffd05 	stb	r2,-12(fp)
    6690:	e0bffd07 	ldb	r2,-12(fp)
    6694:	1004c03a 	cmpne	r2,r2,zero
    6698:	10803fcc 	andi	r2,r2,255
    669c:	10000826 	beq	r2,zero,66c0 <_Z8E_NotifyPKci+0x70>
    66a0:	e0bffd07 	ldb	r2,-12(fp)
    66a4:	e17fff17 	ldw	r5,-4(fp)
    66a8:	1009883a 	mov	r4,r2
    66ac:	00066000 	call	6600 <_Z9E_Notifycci>
    66b0:	003ff206 	br	667c <__alt_data_end+0xfc00667c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    66b4:	0001883a 	nop
    66b8:	00000106 	br	66c0 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    66bc:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    66c0:	e037883a 	mov	sp,fp
    66c4:	dfc00117 	ldw	ra,4(sp)
    66c8:	df000017 	ldw	fp,0(sp)
    66cc:	dec00204 	addi	sp,sp,8
    66d0:	f800283a 	ret

000066d4 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    66d4:	defffb04 	addi	sp,sp,-20
    66d8:	dfc00415 	stw	ra,16(sp)
    66dc:	df000315 	stw	fp,12(sp)
    66e0:	df000304 	addi	fp,sp,12
    66e4:	e13ffe15 	stw	r4,-8(fp)
    66e8:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    66ec:	d0e1eb17 	ldw	r3,-30804(gp)
    66f0:	e0bfff17 	ldw	r2,-4(fp)
    66f4:	18801016 	blt	r3,r2,6738 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    66f8:	e0bffe17 	ldw	r2,-8(fp)
    66fc:	10001026 	beq	r2,zero,6740 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6700:	e0bffe17 	ldw	r2,-8(fp)
    6704:	10c00044 	addi	r3,r2,1
    6708:	e0fffe15 	stw	r3,-8(fp)
    670c:	10800003 	ldbu	r2,0(r2)
    6710:	e0bffd05 	stb	r2,-12(fp)
    6714:	e0bffd07 	ldb	r2,-12(fp)
    6718:	1004c03a 	cmpne	r2,r2,zero
    671c:	10803fcc 	andi	r2,r2,255
    6720:	10000826 	beq	r2,zero,6744 <_Z11E_NotifyStrPKci+0x70>
    6724:	e0bffd07 	ldb	r2,-12(fp)
    6728:	e17fff17 	ldw	r5,-4(fp)
    672c:	1009883a 	mov	r4,r2
    6730:	00066000 	call	6600 <_Z9E_Notifycci>
    6734:	003ff206 	br	6700 <__alt_data_end+0xfc006700>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6738:	0001883a 	nop
    673c:	00000106 	br	6744 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6740:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    6744:	e037883a 	mov	sp,fp
    6748:	dfc00117 	ldw	ra,4(sp)
    674c:	df000017 	ldw	fp,0(sp)
    6750:	dec00204 	addi	sp,sp,8
    6754:	f800283a 	ret

00006758 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    6758:	defffd04 	addi	sp,sp,-12
    675c:	df000215 	stw	fp,8(sp)
    6760:	df000204 	addi	fp,sp,8
    6764:	2005883a 	mov	r2,r4
    6768:	e17fff15 	stw	r5,-4(fp)
    676c:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    6770:	e037883a 	mov	sp,fp
    6774:	df000017 	ldw	fp,0(sp)
    6778:	dec00104 	addi	sp,sp,4
    677c:	f800283a 	ret

00006780 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    6780:	defffc04 	addi	sp,sp,-16
    6784:	df000315 	stw	fp,12(sp)
    6788:	df000304 	addi	fp,sp,12
    678c:	e13ffd15 	stw	r4,-12(fp)
    6790:	e17ffe15 	stw	r5,-8(fp)
    6794:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    6798:	e037883a 	mov	sp,fp
    679c:	df000017 	ldw	fp,0(sp)
    67a0:	dec00104 	addi	sp,sp,4
    67a4:	f800283a 	ret

000067a8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    67a8:	defffc04 	addi	sp,sp,-16
    67ac:	df000315 	stw	fp,12(sp)
    67b0:	df000304 	addi	fp,sp,12
    67b4:	e13ffd15 	stw	r4,-12(fp)
    67b8:	e17ffe15 	stw	r5,-8(fp)
    67bc:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    67c0:	e0bffd17 	ldw	r2,-12(fp)
    67c4:	10800017 	ldw	r2,0(r2)
    67c8:	1000021e 	bne	r2,zero,67d4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    67cc:	0005883a 	mov	r2,zero
    67d0:	00003306 	br	68a0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    67d4:	e0bffd17 	ldw	r2,-12(fp)
    67d8:	10800103 	ldbu	r2,4(r2)
    67dc:	10803fcc 	andi	r2,r2,255
    67e0:	10002426 	beq	r2,zero,6874 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    67e4:	e0bfff17 	ldw	r2,-4(fp)
    67e8:	1080000b 	ldhu	r2,0(r2)
    67ec:	10bfffcc 	andi	r2,r2,65535
    67f0:	10002026 	beq	r2,zero,6874 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    67f4:	e0bffd17 	ldw	r2,-12(fp)
    67f8:	10800017 	ldw	r2,0(r2)
    67fc:	e0fffd17 	ldw	r3,-12(fp)
    6800:	18c00143 	ldbu	r3,5(r3)
    6804:	19003fcc 	andi	r4,r3,255
    6808:	e0fffd17 	ldw	r3,-12(fp)
    680c:	18c00103 	ldbu	r3,4(r3)
    6810:	18c03fcc 	andi	r3,r3,255
    6814:	20c7c83a 	sub	r3,r4,r3
    6818:	10c5883a 	add	r2,r2,r3
    681c:	e0fffe17 	ldw	r3,-8(fp)
    6820:	18c00017 	ldw	r3,0(r3)
    6824:	18c00003 	ldbu	r3,0(r3)
    6828:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    682c:	e0bffd17 	ldw	r2,-12(fp)
    6830:	10800103 	ldbu	r2,4(r2)
    6834:	10bfffc4 	addi	r2,r2,-1
    6838:	1007883a 	mov	r3,r2
    683c:	e0bffd17 	ldw	r2,-12(fp)
    6840:	10c00105 	stb	r3,4(r2)
    6844:	e0bfff17 	ldw	r2,-4(fp)
    6848:	1080000b 	ldhu	r2,0(r2)
    684c:	10bfffc4 	addi	r2,r2,-1
    6850:	1007883a 	mov	r3,r2
    6854:	e0bfff17 	ldw	r2,-4(fp)
    6858:	10c0000d 	sth	r3,0(r2)
    685c:	e0bffe17 	ldw	r2,-8(fp)
    6860:	10800017 	ldw	r2,0(r2)
    6864:	10c00044 	addi	r3,r2,1
    6868:	e0bffe17 	ldw	r2,-8(fp)
    686c:	10c00015 	stw	r3,0(r2)
    6870:	003fd806 	br	67d4 <__alt_data_end+0xfc0067d4>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    6874:	e0bffd17 	ldw	r2,-12(fp)
    6878:	10800103 	ldbu	r2,4(r2)
    687c:	10803fcc 	andi	r2,r2,255
    6880:	10000226 	beq	r2,zero,688c <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    6884:	0005883a 	mov	r2,zero
    6888:	00000506 	br	68a0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    688c:	e0bffd17 	ldw	r2,-12(fp)
    6890:	10c00143 	ldbu	r3,5(r2)
    6894:	e0bffd17 	ldw	r2,-12(fp)
    6898:	10c00105 	stb	r3,4(r2)
        return true;
    689c:	00800044 	movi	r2,1
}
    68a0:	e037883a 	mov	sp,fp
    68a4:	df000017 	ldw	fp,0(sp)
    68a8:	dec00104 	addi	sp,sp,4
    68ac:	f800283a 	ret

000068b0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    68b0:	defffa04 	addi	sp,sp,-24
    68b4:	dfc00515 	stw	ra,20(sp)
    68b8:	df000415 	stw	fp,16(sp)
    68bc:	df000404 	addi	fp,sp,16
    68c0:	e13ffc15 	stw	r4,-16(fp)
    68c4:	e17ffd15 	stw	r5,-12(fp)
    68c8:	e1bffe15 	stw	r6,-8(fp)
    68cc:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    68d0:	e0bffc17 	ldw	r2,-16(fp)
    68d4:	10800003 	ldbu	r2,0(r2)
    68d8:	10803fcc 	andi	r2,r2,255
    68dc:	10c00060 	cmpeqi	r3,r2,1
    68e0:	1800181e 	bne	r3,zero,6944 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    68e4:	10c00088 	cmpgei	r3,r2,2
    68e8:	1800021e 	bne	r3,zero,68f4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    68ec:	10000626 	beq	r2,zero,6908 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    68f0:	00007e06 	br	6aec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    68f4:	10c000a0 	cmpeqi	r3,r2,2
    68f8:	18004a1e 	bne	r3,zero,6a24 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    68fc:	108000e0 	cmpeqi	r2,r2,3
    6900:	1000571e 	bne	r2,zero,6a60 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    6904:	00007906 	br	6aec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6908:	e0bffc17 	ldw	r2,-16(fp)
    690c:	10800417 	ldw	r2,16(r2)
    6910:	e0fffc17 	ldw	r3,-16(fp)
    6914:	18c00303 	ldbu	r3,12(r3)
    6918:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    691c:	e0bffc17 	ldw	r2,-16(fp)
    6920:	10c00504 	addi	r3,r2,20
    6924:	e0bffc17 	ldw	r2,-16(fp)
    6928:	10800417 	ldw	r2,16(r2)
    692c:	100b883a 	mov	r5,r2
    6930:	1809883a 	mov	r4,r3
    6934:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6938:	e0bffc17 	ldw	r2,-16(fp)
    693c:	00c00044 	movi	r3,1
    6940:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    6944:	e0bffc17 	ldw	r2,-16(fp)
    6948:	10800504 	addi	r2,r2,20
    694c:	e1bffe17 	ldw	r6,-8(fp)
    6950:	e17ffd17 	ldw	r5,-12(fp)
    6954:	1009883a 	mov	r4,r2
    6958:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    695c:	1080005c 	xori	r2,r2,1
    6960:	10803fcc 	andi	r2,r2,255
    6964:	10000226 	beq	r2,zero,6970 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    6968:	0005883a 	mov	r2,zero
    696c:	00006006 	br	6af0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    6970:	e0bffc17 	ldw	r2,-16(fp)
    6974:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    6978:	e0bffc17 	ldw	r2,-16(fp)
    697c:	10800417 	ldw	r2,16(r2)
    6980:	10800003 	ldbu	r2,0(r2)
    6984:	10803fcc 	andi	r2,r2,255
    6988:	10800130 	cmpltui	r2,r2,4
    698c:	10000e1e 	bne	r2,zero,69c8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    6990:	e0bffc17 	ldw	r2,-16(fp)
    6994:	10800417 	ldw	r2,16(r2)
    6998:	10c00043 	ldbu	r3,1(r2)
    699c:	11000083 	ldbu	r4,2(r2)
    69a0:	2008923a 	slli	r4,r4,8
    69a4:	20c6b03a 	or	r3,r4,r3
    69a8:	110000c3 	ldbu	r4,3(r2)
    69ac:	2008943a 	slli	r4,r4,16
    69b0:	20c6b03a 	or	r3,r4,r3
    69b4:	10800103 	ldbu	r2,4(r2)
    69b8:	1004963a 	slli	r2,r2,24
    69bc:	10c4b03a 	or	r2,r2,r3
    69c0:	10800017 	ldw	r2,0(r2)
    69c4:	00000e06 	br	6a00 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    69c8:	e0bffc17 	ldw	r2,-16(fp)
    69cc:	10800417 	ldw	r2,16(r2)
    69d0:	10c00043 	ldbu	r3,1(r2)
    69d4:	11000083 	ldbu	r4,2(r2)
    69d8:	2008923a 	slli	r4,r4,8
    69dc:	20c6b03a 	or	r3,r4,r3
    69e0:	110000c3 	ldbu	r4,3(r2)
    69e4:	2008943a 	slli	r4,r4,16
    69e8:	20c6b03a 	or	r3,r4,r3
    69ec:	10800103 	ldbu	r2,4(r2)
    69f0:	1004963a 	slli	r2,r2,24
    69f4:	10c4b03a 	or	r2,r2,r3
    69f8:	1080000b 	ldhu	r2,0(r2)
    69fc:	10bfffcc 	andi	r2,r2,65535
    6a00:	e0fffc17 	ldw	r3,-16(fp)
    6a04:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6a08:	e0bffc17 	ldw	r2,-16(fp)
    6a0c:	10c00117 	ldw	r3,4(r2)
    6a10:	e0bffc17 	ldw	r2,-16(fp)
    6a14:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6a18:	e0bffc17 	ldw	r2,-16(fp)
    6a1c:	00c00084 	movi	r3,2
    6a20:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    6a24:	e0bffc17 	ldw	r2,-16(fp)
    6a28:	10800417 	ldw	r2,16(r2)
    6a2c:	e0fffc17 	ldw	r3,-16(fp)
    6a30:	18c00343 	ldbu	r3,13(r3)
    6a34:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6a38:	e0bffc17 	ldw	r2,-16(fp)
    6a3c:	10c00504 	addi	r3,r2,20
    6a40:	e0bffc17 	ldw	r2,-16(fp)
    6a44:	10800417 	ldw	r2,16(r2)
    6a48:	100b883a 	mov	r5,r2
    6a4c:	1809883a 	mov	r4,r3
    6a50:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    6a54:	e0bffc17 	ldw	r2,-16(fp)
    6a58:	00c000c4 	movi	r3,3
    6a5c:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6a60:	e0bffc17 	ldw	r2,-16(fp)
    6a64:	10800217 	ldw	r2,8(r2)
    6a68:	10001e26 	beq	r2,zero,6ae4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    6a6c:	e0bffc17 	ldw	r2,-16(fp)
    6a70:	10800504 	addi	r2,r2,20
    6a74:	e1bffe17 	ldw	r6,-8(fp)
    6a78:	e17ffd17 	ldw	r5,-12(fp)
    6a7c:	1009883a 	mov	r4,r2
    6a80:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    6a84:	1080005c 	xori	r2,r2,1
    6a88:	10803fcc 	andi	r2,r2,255
    6a8c:	10000226 	beq	r2,zero,6a98 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    6a90:	0005883a 	mov	r2,zero
    6a94:	00001606 	br	6af0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    6a98:	e0bfff17 	ldw	r2,-4(fp)
    6a9c:	10000b26 	beq	r2,zero,6acc <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    6aa0:	e0bffc17 	ldw	r2,-16(fp)
    6aa4:	11000417 	ldw	r4,16(r2)
    6aa8:	e0bffc17 	ldw	r2,-16(fp)
    6aac:	10c00117 	ldw	r3,4(r2)
    6ab0:	e0bffc17 	ldw	r2,-16(fp)
    6ab4:	10800217 	ldw	r2,8(r2)
    6ab8:	1887c83a 	sub	r3,r3,r2
    6abc:	e0bfff17 	ldw	r2,-4(fp)
    6ac0:	e1800217 	ldw	r6,8(fp)
    6ac4:	180b883a 	mov	r5,r3
    6ac8:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6acc:	e0bffc17 	ldw	r2,-16(fp)
    6ad0:	10800217 	ldw	r2,8(r2)
    6ad4:	10ffffc4 	addi	r3,r2,-1
    6ad8:	e0bffc17 	ldw	r2,-16(fp)
    6adc:	10c00215 	stw	r3,8(r2)
    6ae0:	003fdf06 	br	6a60 <__alt_data_end+0xfc006a60>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    6ae4:	e0bffc17 	ldw	r2,-16(fp)
    6ae8:	10000005 	stb	zero,0(r2)
        }
        return true;
    6aec:	00800044 	movi	r2,1
}
    6af0:	e037883a 	mov	sp,fp
    6af4:	dfc00117 	ldw	ra,4(sp)
    6af8:	df000017 	ldw	fp,0(sp)
    6afc:	dec00204 	addi	sp,sp,8
    6b00:	f800283a 	ret

00006b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6b04:	defff904 	addi	sp,sp,-28
    6b08:	dfc00615 	stw	ra,24(sp)
    6b0c:	df000515 	stw	fp,20(sp)
    6b10:	df000504 	addi	fp,sp,20
    6b14:	e13ffd15 	stw	r4,-12(fp)
    6b18:	2807883a 	mov	r3,r5
    6b1c:	3005883a 	mov	r2,r6
    6b20:	e0fffe05 	stb	r3,-8(fp)
    6b24:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6b28:	e0bfff0b 	ldhu	r2,-4(fp)
    6b2c:	1005d23a 	srai	r2,r2,8
    6b30:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6b34:	e0bfff0b 	ldhu	r2,-4(fp)
    6b38:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6b3c:	e03ffb8d 	sth	zero,-18(fp)
    6b40:	e03ffc0d 	sth	zero,-16(fp)
    6b44:	e0bffe03 	ldbu	r2,-8(fp)
    6b48:	e0bffbc5 	stb	r2,-17(fp)
    6b4c:	e0bffb03 	ldbu	r2,-20(fp)
    6b50:	e0bffc05 	stb	r2,-16(fp)
    6b54:	e0bffb43 	ldbu	r2,-19(fp)
    6b58:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6b5c:	e0bffb84 	addi	r2,fp,-18
    6b60:	000f883a 	mov	r7,zero
    6b64:	01800104 	movi	r6,4
    6b68:	100b883a 	mov	r5,r2
    6b6c:	e13ffd17 	ldw	r4,-12(fp)
    6b70:	0021a8c0 	call	21a8c <alt_avalon_i2c_master_tx>
    6b74:	1004c03a 	cmpne	r2,r2,zero
    6b78:	10803fcc 	andi	r2,r2,255
    6b7c:	10000426 	beq	r2,zero,6b90 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6b80:	010000b4 	movhi	r4,2
    6b84:	211c8104 	addi	r4,r4,29188
    6b88:	00100880 	call	10088 <printf>
	}
	return;
    6b8c:	0001883a 	nop
    6b90:	0001883a 	nop
}
    6b94:	e037883a 	mov	sp,fp
    6b98:	dfc00117 	ldw	ra,4(sp)
    6b9c:	df000017 	ldw	fp,0(sp)
    6ba0:	dec00204 	addi	sp,sp,8
    6ba4:	f800283a 	ret

00006ba8 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6ba8:	defff604 	addi	sp,sp,-40
    6bac:	dfc00915 	stw	ra,36(sp)
    6bb0:	df000815 	stw	fp,32(sp)
    6bb4:	dc000715 	stw	r16,28(sp)
    6bb8:	df000804 	addi	fp,sp,32
    6bbc:	e13ffb15 	stw	r4,-20(fp)
    6bc0:	3009883a 	mov	r4,r6
    6bc4:	e1fffe15 	stw	r7,-8(fp)
    6bc8:	e17ffc05 	stb	r5,-16(fp)
    6bcc:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6bd0:	d809883a 	mov	r4,sp
    6bd4:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6bd8:	e13ffd03 	ldbu	r4,-12(fp)
    6bdc:	21000044 	addi	r4,r4,1
    6be0:	2109883a 	add	r4,r4,r4
    6be4:	213fffc4 	addi	r4,r4,-1
    6be8:	e13ff915 	stw	r4,-28(fp)
    6bec:	200b883a 	mov	r5,r4
    6bf0:	29400044 	addi	r5,r5,1
    6bf4:	2819883a 	mov	r12,r5
    6bf8:	001b883a 	mov	r13,zero
    6bfc:	600ad77a 	srli	r5,r12,29
    6c00:	681290fa 	slli	r9,r13,3
    6c04:	2a52b03a 	or	r9,r5,r9
    6c08:	601090fa 	slli	r8,r12,3
    6c0c:	200b883a 	mov	r5,r4
    6c10:	29400044 	addi	r5,r5,1
    6c14:	2815883a 	mov	r10,r5
    6c18:	0017883a 	mov	r11,zero
    6c1c:	500ad77a 	srli	r5,r10,29
    6c20:	580690fa 	slli	r3,r11,3
    6c24:	28c6b03a 	or	r3,r5,r3
    6c28:	500490fa 	slli	r2,r10,3
    6c2c:	2005883a 	mov	r2,r4
    6c30:	10800044 	addi	r2,r2,1
    6c34:	108000c4 	addi	r2,r2,3
    6c38:	1004d0ba 	srli	r2,r2,2
    6c3c:	1085883a 	add	r2,r2,r2
    6c40:	1085883a 	add	r2,r2,r2
    6c44:	d8b7c83a 	sub	sp,sp,r2
    6c48:	d805883a 	mov	r2,sp
    6c4c:	1005883a 	mov	r2,r2
    6c50:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    6c54:	e0bffa17 	ldw	r2,-24(fp)
    6c58:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6c5c:	e0bffa17 	ldw	r2,-24(fp)
    6c60:	e0fffc03 	ldbu	r3,-16(fp)
    6c64:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6c68:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6c6c:	e03ff815 	stw	zero,-32(fp)
    6c70:	e0bffd03 	ldbu	r2,-12(fp)
    6c74:	e0fff817 	ldw	r3,-32(fp)
    6c78:	18801e0e 	bge	r3,r2,6cf4 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6c7c:	e0bff817 	ldw	r2,-32(fp)
    6c80:	10c00084 	addi	r3,r2,2
    6c84:	e0bff817 	ldw	r2,-32(fp)
    6c88:	1085883a 	add	r2,r2,r2
    6c8c:	1009883a 	mov	r4,r2
    6c90:	e0bffe17 	ldw	r2,-8(fp)
    6c94:	1105883a 	add	r2,r2,r4
    6c98:	1080000b 	ldhu	r2,0(r2)
    6c9c:	10bfffcc 	andi	r2,r2,65535
    6ca0:	1005d23a 	srai	r2,r2,8
    6ca4:	1009883a 	mov	r4,r2
    6ca8:	e0bffa17 	ldw	r2,-24(fp)
    6cac:	10c5883a 	add	r2,r2,r3
    6cb0:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6cb4:	e0bff817 	ldw	r2,-32(fp)
    6cb8:	10c000c4 	addi	r3,r2,3
    6cbc:	e0bff817 	ldw	r2,-32(fp)
    6cc0:	1085883a 	add	r2,r2,r2
    6cc4:	1009883a 	mov	r4,r2
    6cc8:	e0bffe17 	ldw	r2,-8(fp)
    6ccc:	1105883a 	add	r2,r2,r4
    6cd0:	1080000b 	ldhu	r2,0(r2)
    6cd4:	1009883a 	mov	r4,r2
    6cd8:	e0bffa17 	ldw	r2,-24(fp)
    6cdc:	10c5883a 	add	r2,r2,r3
    6ce0:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    6ce4:	e0bff817 	ldw	r2,-32(fp)
    6ce8:	10800044 	addi	r2,r2,1
    6cec:	e0bff815 	stw	r2,-32(fp)
    6cf0:	003fdf06 	br	6c70 <__alt_data_end+0xfc006c70>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6cf4:	e0fffa17 	ldw	r3,-24(fp)
    6cf8:	e0bffd03 	ldbu	r2,-12(fp)
    6cfc:	10800044 	addi	r2,r2,1
    6d00:	1085883a 	add	r2,r2,r2
    6d04:	000f883a 	mov	r7,zero
    6d08:	100d883a 	mov	r6,r2
    6d0c:	180b883a 	mov	r5,r3
    6d10:	e13ffb17 	ldw	r4,-20(fp)
    6d14:	0021a8c0 	call	21a8c <alt_avalon_i2c_master_tx>
    6d18:	1004c03a 	cmpne	r2,r2,zero
    6d1c:	10803fcc 	andi	r2,r2,255
    6d20:	10000326 	beq	r2,zero,6d30 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6d24:	010000b4 	movhi	r4,2
    6d28:	211c8804 	addi	r4,r4,29216
    6d2c:	00100880 	call	10088 <printf>
	}
	return (data+nwords);
    6d30:	e0bffd03 	ldbu	r2,-12(fp)
    6d34:	1085883a 	add	r2,r2,r2
    6d38:	1007883a 	mov	r3,r2
    6d3c:	e0bffe17 	ldw	r2,-8(fp)
    6d40:	10c5883a 	add	r2,r2,r3
    6d44:	8037883a 	mov	sp,r16
}
    6d48:	e6ffff04 	addi	sp,fp,-4
    6d4c:	dfc00217 	ldw	ra,8(sp)
    6d50:	df000117 	ldw	fp,4(sp)
    6d54:	dc000017 	ldw	r16,0(sp)
    6d58:	dec00304 	addi	sp,sp,12
    6d5c:	f800283a 	ret

00006d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6d60:	defff804 	addi	sp,sp,-32
    6d64:	dfc00715 	stw	ra,28(sp)
    6d68:	df000615 	stw	fp,24(sp)
    6d6c:	df000604 	addi	fp,sp,24
    6d70:	e13ffe15 	stw	r4,-8(fp)
    6d74:	2805883a 	mov	r2,r5
    6d78:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6d7c:	e03ffc8d 	sth	zero,-14(fp)
    6d80:	e0bfff03 	ldbu	r2,-4(fp)
    6d84:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6d88:	e03ffd05 	stb	zero,-12(fp)
    6d8c:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6d90:	e13ffd04 	addi	r4,fp,-12
    6d94:	e0fffc84 	addi	r3,fp,-14
    6d98:	d8000115 	stw	zero,4(sp)
    6d9c:	00800084 	movi	r2,2
    6da0:	d8800015 	stw	r2,0(sp)
    6da4:	200f883a 	mov	r7,r4
    6da8:	01800084 	movi	r6,2
    6dac:	180b883a 	mov	r5,r3
    6db0:	e13ffe17 	ldw	r4,-8(fp)
    6db4:	0021cb00 	call	21cb0 <alt_avalon_i2c_master_tx_rx>
    6db8:	1004c03a 	cmpne	r2,r2,zero
    6dbc:	10803fcc 	andi	r2,r2,255
    6dc0:	10000326 	beq	r2,zero,6dd0 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6dc4:	010000b4 	movhi	r4,2
    6dc8:	211c8e04 	addi	r4,r4,29240
    6dcc:	00100880 	call	10088 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6dd0:	e0bffd03 	ldbu	r2,-12(fp)
    6dd4:	10803fcc 	andi	r2,r2,255
    6dd8:	1004923a 	slli	r2,r2,8
    6ddc:	1007883a 	mov	r3,r2
    6de0:	e0bffd43 	ldbu	r2,-11(fp)
    6de4:	10803fcc 	andi	r2,r2,255
    6de8:	1884b03a 	or	r2,r3,r2
    6dec:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6df0:	e0bffc0b 	ldhu	r2,-16(fp)
}
    6df4:	e037883a 	mov	sp,fp
    6df8:	dfc00117 	ldw	ra,4(sp)
    6dfc:	df000017 	ldw	fp,0(sp)
    6e00:	dec00204 	addi	sp,sp,8
    6e04:	f800283a 	ret

00006e08 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6e08:	defff304 	addi	sp,sp,-52
    6e0c:	dfc00c15 	stw	ra,48(sp)
    6e10:	df000b15 	stw	fp,44(sp)
    6e14:	dc000a15 	stw	r16,40(sp)
    6e18:	df000b04 	addi	fp,sp,44
    6e1c:	e13ffb15 	stw	r4,-20(fp)
    6e20:	3009883a 	mov	r4,r6
    6e24:	e1fffe15 	stw	r7,-8(fp)
    6e28:	e17ffc05 	stb	r5,-16(fp)
    6e2c:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6e30:	d809883a 	mov	r4,sp
    6e34:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6e38:	e03ffa0d 	sth	zero,-24(fp)
    6e3c:	e13ffc03 	ldbu	r4,-16(fp)
    6e40:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6e44:	e13ffd03 	ldbu	r4,-12(fp)
    6e48:	2109883a 	add	r4,r4,r4
    6e4c:	213fffc4 	addi	r4,r4,-1
    6e50:	e13ff815 	stw	r4,-32(fp)
    6e54:	200b883a 	mov	r5,r4
    6e58:	29400044 	addi	r5,r5,1
    6e5c:	2819883a 	mov	r12,r5
    6e60:	001b883a 	mov	r13,zero
    6e64:	600ad77a 	srli	r5,r12,29
    6e68:	681290fa 	slli	r9,r13,3
    6e6c:	2a52b03a 	or	r9,r5,r9
    6e70:	601090fa 	slli	r8,r12,3
    6e74:	200b883a 	mov	r5,r4
    6e78:	29400044 	addi	r5,r5,1
    6e7c:	2815883a 	mov	r10,r5
    6e80:	0017883a 	mov	r11,zero
    6e84:	500ad77a 	srli	r5,r10,29
    6e88:	580690fa 	slli	r3,r11,3
    6e8c:	28c6b03a 	or	r3,r5,r3
    6e90:	500490fa 	slli	r2,r10,3
    6e94:	2005883a 	mov	r2,r4
    6e98:	10800044 	addi	r2,r2,1
    6e9c:	108000c4 	addi	r2,r2,3
    6ea0:	1004d0ba 	srli	r2,r2,2
    6ea4:	1085883a 	add	r2,r2,r2
    6ea8:	1085883a 	add	r2,r2,r2
    6eac:	d8b7c83a 	sub	sp,sp,r2
    6eb0:	d8800204 	addi	r2,sp,8
    6eb4:	1005883a 	mov	r2,r2
    6eb8:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6ebc:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6ec0:	e0fff917 	ldw	r3,-28(fp)
    6ec4:	e0bffd03 	ldbu	r2,-12(fp)
    6ec8:	1085883a 	add	r2,r2,r2
    6ecc:	1009883a 	mov	r4,r2
    6ed0:	e0bffa04 	addi	r2,fp,-24
    6ed4:	d8000115 	stw	zero,4(sp)
    6ed8:	d9000015 	stw	r4,0(sp)
    6edc:	180f883a 	mov	r7,r3
    6ee0:	01800084 	movi	r6,2
    6ee4:	100b883a 	mov	r5,r2
    6ee8:	e13ffb17 	ldw	r4,-20(fp)
    6eec:	0021cb00 	call	21cb0 <alt_avalon_i2c_master_tx_rx>
    6ef0:	1004c03a 	cmpne	r2,r2,zero
    6ef4:	10803fcc 	andi	r2,r2,255
    6ef8:	10000326 	beq	r2,zero,6f08 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6efc:	010000b4 	movhi	r4,2
    6f00:	211c9404 	addi	r4,r4,29264
    6f04:	00100880 	call	10088 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6f08:	e03ff715 	stw	zero,-36(fp)
    6f0c:	e0bffd03 	ldbu	r2,-12(fp)
    6f10:	e0fff717 	ldw	r3,-36(fp)
    6f14:	18801b0e 	bge	r3,r2,6f84 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6f18:	e0bff717 	ldw	r2,-36(fp)
    6f1c:	1085883a 	add	r2,r2,r2
    6f20:	1007883a 	mov	r3,r2
    6f24:	e0bffe17 	ldw	r2,-8(fp)
    6f28:	10c7883a 	add	r3,r2,r3
    6f2c:	e0bff717 	ldw	r2,-36(fp)
    6f30:	1085883a 	add	r2,r2,r2
    6f34:	1009883a 	mov	r4,r2
    6f38:	e0bff917 	ldw	r2,-28(fp)
    6f3c:	1105883a 	add	r2,r2,r4
    6f40:	10800003 	ldbu	r2,0(r2)
    6f44:	10803fcc 	andi	r2,r2,255
    6f48:	1004923a 	slli	r2,r2,8
    6f4c:	100b883a 	mov	r5,r2
    6f50:	e0bff717 	ldw	r2,-36(fp)
    6f54:	1085883a 	add	r2,r2,r2
    6f58:	10800044 	addi	r2,r2,1
    6f5c:	e13ff917 	ldw	r4,-28(fp)
    6f60:	2085883a 	add	r2,r4,r2
    6f64:	10800003 	ldbu	r2,0(r2)
    6f68:	10803fcc 	andi	r2,r2,255
    6f6c:	2884b03a 	or	r2,r5,r2
    6f70:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6f74:	e0bff717 	ldw	r2,-36(fp)
    6f78:	10800044 	addi	r2,r2,1
    6f7c:	e0bff715 	stw	r2,-36(fp)
    6f80:	003fe206 	br	6f0c <__alt_data_end+0xfc006f0c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6f84:	e0bffd03 	ldbu	r2,-12(fp)
    6f88:	1085883a 	add	r2,r2,r2
    6f8c:	1007883a 	mov	r3,r2
    6f90:	e0bffe17 	ldw	r2,-8(fp)
    6f94:	10c5883a 	add	r2,r2,r3
    6f98:	8037883a 	mov	sp,r16
}
    6f9c:	e6ffff04 	addi	sp,fp,-4
    6fa0:	dfc00217 	ldw	ra,8(sp)
    6fa4:	df000117 	ldw	fp,4(sp)
    6fa8:	dc000017 	ldw	r16,0(sp)
    6fac:	dec00304 	addi	sp,sp,12
    6fb0:	f800283a 	ret

00006fb4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6fb4:	defffd04 	addi	sp,sp,-12
    6fb8:	dfc00215 	stw	ra,8(sp)
    6fbc:	df000115 	stw	fp,4(sp)
    6fc0:	df000104 	addi	fp,sp,4
    6fc4:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6fc8:	01400284 	movi	r5,10
    6fcc:	e13fff17 	ldw	r4,-4(fp)
    6fd0:	00218840 	call	21884 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6fd4:	01902f04 	movi	r6,16572
    6fd8:	01400c04 	movi	r5,48
    6fdc:	e13fff17 	ldw	r4,-4(fp)
    6fe0:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6fe4:	01801384 	movi	r6,78
    6fe8:	01400a04 	movi	r5,40
    6fec:	e13fff17 	ldw	r4,-4(fp)
    6ff0:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6ff4:	01800844 	movi	r6,33
    6ff8:	01400084 	movi	r5,2
    6ffc:	e13fff17 	ldw	r4,-4(fp)
    7000:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    7004:	01800104 	movi	r6,4
    7008:	01400104 	movi	r5,4
    700c:	e13fff17 	ldw	r4,-4(fp)
    7010:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    7014:	000d883a 	mov	r6,zero
    7018:	01400184 	movi	r5,6
    701c:	e13fff17 	ldw	r4,-4(fp)
    7020:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    7024:	01800404 	movi	r6,16
    7028:	01400284 	movi	r5,10
    702c:	e13fff17 	ldw	r4,-4(fp)
    7030:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    7034:	0001883a 	nop
    7038:	e037883a 	mov	sp,fp
    703c:	dfc00117 	ldw	ra,4(sp)
    7040:	df000017 	ldw	fp,0(sp)
    7044:	dec00204 	addi	sp,sp,8
    7048:	f800283a 	ret

0000704c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    704c:	defffd04 	addi	sp,sp,-12
    7050:	dfc00215 	stw	ra,8(sp)
    7054:	df000115 	stw	fp,4(sp)
    7058:	df000104 	addi	fp,sp,4
    705c:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    7060:	01860604 	movi	r6,6168
    7064:	01400884 	movi	r5,34
    7068:	e13fff17 	ldw	r4,-4(fp)
    706c:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    7070:	019c1c04 	movi	r6,28784
    7074:	01400404 	movi	r5,16
    7078:	e13fff17 	ldw	r4,-4(fp)
    707c:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    7080:	01808004 	movi	r6,512
    7084:	01400384 	movi	r5,14
    7088:	e13fff17 	ldw	r4,-4(fp)
    708c:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    7090:	01804044 	movi	r6,257
    7094:	01400904 	movi	r5,36
    7098:	e13fff17 	ldw	r4,-4(fp)
    709c:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    70a0:	0001883a 	nop
    70a4:	e037883a 	mov	sp,fp
    70a8:	dfc00117 	ldw	ra,4(sp)
    70ac:	df000017 	ldw	fp,0(sp)
    70b0:	dec00204 	addi	sp,sp,8
    70b4:	f800283a 	ret

000070b8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    70b8:	defffd04 	addi	sp,sp,-12
    70bc:	dfc00215 	stw	ra,8(sp)
    70c0:	df000115 	stw	fp,4(sp)
    70c4:	df000104 	addi	fp,sp,4
    70c8:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    70cc:	000b883a 	mov	r5,zero
    70d0:	e13fff17 	ldw	r4,-4(fp)
    70d4:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70d8:	10bfffcc 	andi	r2,r2,65535
    70dc:	100b883a 	mov	r5,r2
    70e0:	010000b4 	movhi	r4,2
    70e4:	211c9a04 	addi	r4,r4,29288
    70e8:	00100880 	call	10088 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    70ec:	01400084 	movi	r5,2
    70f0:	e13fff17 	ldw	r4,-4(fp)
    70f4:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70f8:	10bfffcc 	andi	r2,r2,65535
    70fc:	100b883a 	mov	r5,r2
    7100:	010000b4 	movhi	r4,2
    7104:	211c9d04 	addi	r4,r4,29300
    7108:	00100880 	call	10088 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    710c:	01400104 	movi	r5,4
    7110:	e13fff17 	ldw	r4,-4(fp)
    7114:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7118:	10bfffcc 	andi	r2,r2,65535
    711c:	100b883a 	mov	r5,r2
    7120:	010000b4 	movhi	r4,2
    7124:	211ca204 	addi	r4,r4,29320
    7128:	00100880 	call	10088 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    712c:	01400184 	movi	r5,6
    7130:	e13fff17 	ldw	r4,-4(fp)
    7134:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7138:	10bfffcc 	andi	r2,r2,65535
    713c:	100b883a 	mov	r5,r2
    7140:	010000b4 	movhi	r4,2
    7144:	211ca704 	addi	r4,r4,29340
    7148:	00100880 	call	10088 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    714c:	01400284 	movi	r5,10
    7150:	e13fff17 	ldw	r4,-4(fp)
    7154:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7158:	10bfffcc 	andi	r2,r2,65535
    715c:	100b883a 	mov	r5,r2
    7160:	010000b4 	movhi	r4,2
    7164:	211cac04 	addi	r4,r4,29360
    7168:	00100880 	call	10088 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    716c:	01400c04 	movi	r5,48
    7170:	e13fff17 	ldw	r4,-4(fp)
    7174:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7178:	10bfffcc 	andi	r2,r2,65535
    717c:	100b883a 	mov	r5,r2
    7180:	010000b4 	movhi	r4,2
    7184:	211cb104 	addi	r4,r4,29380
    7188:	00100880 	call	10088 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    718c:	01400384 	movi	r5,14
    7190:	e13fff17 	ldw	r4,-4(fp)
    7194:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7198:	10bfffcc 	andi	r2,r2,65535
    719c:	100b883a 	mov	r5,r2
    71a0:	010000b4 	movhi	r4,2
    71a4:	211cb604 	addi	r4,r4,29400
    71a8:	00100880 	call	10088 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    71ac:	01400904 	movi	r5,36
    71b0:	e13fff17 	ldw	r4,-4(fp)
    71b4:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    71b8:	10bfffcc 	andi	r2,r2,65535
    71bc:	100b883a 	mov	r5,r2
    71c0:	010000b4 	movhi	r4,2
    71c4:	211cbb04 	addi	r4,r4,29420
    71c8:	00100880 	call	10088 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    71cc:	01400e04 	movi	r5,56
    71d0:	e13fff17 	ldw	r4,-4(fp)
    71d4:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    71d8:	10bfffcc 	andi	r2,r2,65535
    71dc:	100b883a 	mov	r5,r2
    71e0:	010000b4 	movhi	r4,2
    71e4:	211cc004 	addi	r4,r4,29440
    71e8:	00100880 	call	10088 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    71ec:	01400804 	movi	r5,32
    71f0:	e13fff17 	ldw	r4,-4(fp)
    71f4:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    71f8:	10bfffcc 	andi	r2,r2,65535
    71fc:	100b883a 	mov	r5,r2
    7200:	010000b4 	movhi	r4,2
    7204:	211cc504 	addi	r4,r4,29460
    7208:	00100880 	call	10088 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    720c:	01400404 	movi	r5,16
    7210:	e13fff17 	ldw	r4,-4(fp)
    7214:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7218:	10bfffcc 	andi	r2,r2,65535
    721c:	100b883a 	mov	r5,r2
    7220:	010000b4 	movhi	r4,2
    7224:	211cca04 	addi	r4,r4,29480
    7228:	00100880 	call	10088 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    722c:	01400884 	movi	r5,34
    7230:	e13fff17 	ldw	r4,-4(fp)
    7234:	0006d600 	call	6d60 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7238:	10bfffcc 	andi	r2,r2,65535
    723c:	100b883a 	mov	r5,r2
    7240:	010000b4 	movhi	r4,2
    7244:	211ccf04 	addi	r4,r4,29500
    7248:	00100880 	call	10088 <printf>
}
    724c:	0001883a 	nop
    7250:	e037883a 	mov	sp,fp
    7254:	dfc00117 	ldw	ra,4(sp)
    7258:	df000017 	ldw	fp,0(sp)
    725c:	dec00204 	addi	sp,sp,8
    7260:	f800283a 	ret

00007264 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>:

void SGTL5000vol_change(ALT_AVALON_I2C_DEV_t* dev, alt_u8 vol) {
    7264:	defffa04 	addi	sp,sp,-24
    7268:	dfc00515 	stw	ra,20(sp)
    726c:	df000415 	stw	fp,16(sp)
    7270:	df000404 	addi	fp,sp,16
    7274:	e13ffe15 	stw	r4,-8(fp)
    7278:	2805883a 	mov	r2,r5
    727c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 new_vol = DAC_MIN_VOL - ((vol * DAC_VOL_RANGE) / 0x7F);
    7280:	e0bfff03 	ldbu	r2,-4(fp)
    7284:	01402d04 	movi	r5,180
    7288:	1009883a 	mov	r4,r2
    728c:	000d9380 	call	d938 <__mulsi3>
    7290:	01401fc4 	movi	r5,127
    7294:	1009883a 	mov	r4,r2
    7298:	000d7840 	call	d784 <__divsi3>
    729c:	1007883a 	mov	r3,r2
    72a0:	00803c04 	movi	r2,240
    72a4:	10c5c83a 	sub	r2,r2,r3
    72a8:	e0bffc15 	stw	r2,-16(fp)
	alt_u16 set_vol = ((new_vol << 8) | new_vol);
    72ac:	e0bffc17 	ldw	r2,-16(fp)
    72b0:	1004923a 	slli	r2,r2,8
    72b4:	1007883a 	mov	r3,r2
    72b8:	e0bffc17 	ldw	r2,-16(fp)
    72bc:	1884b03a 	or	r2,r3,r2
    72c0:	e0bffd0d 	sth	r2,-12(fp)
	I2Creg_wr(dev, DAC_VOL, set_vol);
    72c4:	e0bffd0b 	ldhu	r2,-12(fp)
    72c8:	100d883a 	mov	r6,r2
    72cc:	01400404 	movi	r5,16
    72d0:	e13ffe17 	ldw	r4,-8(fp)
    72d4:	0006b040 	call	6b04 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    72d8:	0001883a 	nop
    72dc:	e037883a 	mov	sp,fp
    72e0:	dfc00117 	ldw	ra,4(sp)
    72e4:	df000017 	ldw	fp,0(sp)
    72e8:	dec00204 	addi	sp,sp,8
    72ec:	f800283a 	ret

000072f0 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    72f0:	defffb04 	addi	sp,sp,-20
    72f4:	dfc00415 	stw	ra,16(sp)
    72f8:	df000315 	stw	fp,12(sp)
    72fc:	df000304 	addi	fp,sp,12
    7300:	e13ffe15 	stw	r4,-8(fp)
    7304:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    7308:	e0bffe17 	ldw	r2,-8(fp)
    730c:	1009883a 	mov	r4,r2
    7310:	0004e880 	call	4e88 <_ZN15USBDeviceConfigC1Ev>
    7314:	e0bffe17 	ldw	r2,-8(fp)
    7318:	10800104 	addi	r2,r2,4
    731c:	1009883a 	mov	r4,r2
    7320:	00091f80 	call	91f8 <_ZN21UsbMidiConfigXtracterC1Ev>
    7324:	008000b4 	movhi	r2,2
    7328:	109cde04 	addi	r2,r2,29560
    732c:	e0fffe17 	ldw	r3,-8(fp)
    7330:	18800015 	stw	r2,0(r3)
    7334:	008000b4 	movhi	r2,2
    7338:	109cea04 	addi	r2,r2,29608
    733c:	e0fffe17 	ldw	r3,-8(fp)
    7340:	18800115 	stw	r2,4(r3)
    7344:	e0bffe17 	ldw	r2,-8(fp)
    7348:	e0ffff17 	ldw	r3,-4(fp)
    734c:	10c00215 	stw	r3,8(r2)
    7350:	e0bffe17 	ldw	r2,-8(fp)
    7354:	10000305 	stb	zero,12(r2)
    7358:	e0bffe17 	ldw	r2,-8(fp)
    735c:	10000345 	stb	zero,13(r2)
    7360:	e0bffe17 	ldw	r2,-8(fp)
    7364:	10001705 	stb	zero,92(r2)
    7368:	e0bffe17 	ldw	r2,-8(fp)
    736c:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7370:	e03ffd05 	stb	zero,-12(fp)
    7374:	e0bffd03 	ldbu	r2,-12(fp)
    7378:	108000e8 	cmpgeui	r2,r2,3
    737c:	10002d1e 	bne	r2,zero,7434 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    7380:	e0fffd03 	ldbu	r3,-12(fp)
    7384:	e13ffe17 	ldw	r4,-8(fp)
    7388:	1805883a 	mov	r2,r3
    738c:	1085883a 	add	r2,r2,r2
    7390:	10c5883a 	add	r2,r2,r3
    7394:	2085883a 	add	r2,r4,r2
    7398:	108004c4 	addi	r2,r2,19
    739c:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    73a0:	e13ffd03 	ldbu	r4,-12(fp)
    73a4:	e0bffd03 	ldbu	r2,-12(fp)
    73a8:	10000226 	beq	r2,zero,73b4 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    73ac:	0007883a 	mov	r3,zero
    73b0:	00000106 	br	73b8 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    73b4:	00c00204 	movi	r3,8
    73b8:	e17ffe17 	ldw	r5,-8(fp)
    73bc:	2005883a 	mov	r2,r4
    73c0:	1085883a 	add	r2,r2,r2
    73c4:	1105883a 	add	r2,r2,r4
    73c8:	2885883a 	add	r2,r5,r2
    73cc:	10800504 	addi	r2,r2,20
    73d0:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    73d4:	e13ffd03 	ldbu	r4,-12(fp)
    73d8:	e0bffd03 	ldbu	r2,-12(fp)
    73dc:	10000226 	beq	r2,zero,73e8 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    73e0:	00c00044 	movi	r3,1
    73e4:	00000106 	br	73ec <_ZN9USBH_MIDIC1EP3USB+0xfc>
    73e8:	00c003c4 	movi	r3,15
    73ec:	e17ffe17 	ldw	r5,-8(fp)
    73f0:	2005883a 	mov	r2,r4
    73f4:	1085883a 	add	r2,r2,r2
    73f8:	1105883a 	add	r2,r2,r4
    73fc:	2885883a 	add	r2,r5,r2
    7400:	10800404 	addi	r2,r2,16
    7404:	18c7883a 	add	r3,r3,r3
    7408:	18cb883a 	add	r5,r3,r3
    740c:	10c00143 	ldbu	r3,5(r2)
    7410:	18c000cc 	andi	r3,r3,3
    7414:	1809883a 	mov	r4,r3
    7418:	2807883a 	mov	r3,r5
    741c:	20c6b03a 	or	r3,r4,r3
    7420:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7424:	e0bffd03 	ldbu	r2,-12(fp)
    7428:	10800044 	addi	r2,r2,1
    742c:	e0bffd05 	stb	r2,-12(fp)
    7430:	003fd006 	br	7374 <__alt_data_end+0xfc007374>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    7434:	e0bffe17 	ldw	r2,-8(fp)
    7438:	10800217 	ldw	r2,8(r2)
    743c:	10000626 	beq	r2,zero,7458 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7440:	e0bffe17 	ldw	r2,-8(fp)
    7444:	10800217 	ldw	r2,8(r2)
    7448:	e0fffe17 	ldw	r3,-8(fp)
    744c:	180b883a 	mov	r5,r3
    7450:	1009883a 	mov	r4,r2
    7454:	0004c3c0 	call	4c3c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    7458:	0001883a 	nop
    745c:	e037883a 	mov	sp,fp
    7460:	dfc00117 	ldw	ra,4(sp)
    7464:	df000017 	ldw	fp,0(sp)
    7468:	dec00204 	addi	sp,sp,8
    746c:	f800283a 	ret

00007470 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    7470:	deffe004 	addi	sp,sp,-128
    7474:	dfc01f15 	stw	ra,124(sp)
    7478:	df001e15 	stw	fp,120(sp)
    747c:	df001e04 	addi	fp,sp,120
    7480:	e13ffc15 	stw	r4,-16(fp)
    7484:	2809883a 	mov	r4,r5
    7488:	3007883a 	mov	r3,r6
    748c:	3805883a 	mov	r2,r7
    7490:	e13ffd05 	stb	r4,-12(fp)
    7494:	e0fffe05 	stb	r3,-8(fp)
    7498:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    749c:	e0bfe944 	addi	r2,fp,-91
    74a0:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    74a4:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    74a8:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    74ac:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    74b0:	00800044 	movi	r2,1
    74b4:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    74b8:	00800044 	movi	r2,1
    74bc:	e0bfe3c5 	stb	r2,-113(fp)
    74c0:	e0bfe3c3 	ldbu	r2,-113(fp)
    74c4:	108000e8 	cmpgeui	r2,r2,3
    74c8:	10001a1e 	bne	r2,zero,7534 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    74cc:	e0ffe3c3 	ldbu	r3,-113(fp)
    74d0:	e13ffc17 	ldw	r4,-16(fp)
    74d4:	1805883a 	mov	r2,r3
    74d8:	1085883a 	add	r2,r2,r2
    74dc:	10c5883a 	add	r2,r2,r3
    74e0:	2085883a 	add	r2,r4,r2
    74e4:	10800404 	addi	r2,r2,16
    74e8:	11000143 	ldbu	r4,5(r2)
    74ec:	00ffff84 	movi	r3,-2
    74f0:	20c6703a 	and	r3,r4,r3
    74f4:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    74f8:	e0ffe3c3 	ldbu	r3,-113(fp)
    74fc:	e13ffc17 	ldw	r4,-16(fp)
    7500:	1805883a 	mov	r2,r3
    7504:	1085883a 	add	r2,r2,r2
    7508:	10c5883a 	add	r2,r2,r3
    750c:	2085883a 	add	r2,r4,r2
    7510:	10800404 	addi	r2,r2,16
    7514:	11000143 	ldbu	r4,5(r2)
    7518:	00ffff44 	movi	r3,-3
    751c:	20c6703a 	and	r3,r4,r3
    7520:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7524:	e0bfe3c3 	ldbu	r2,-113(fp)
    7528:	10800044 	addi	r2,r2,1
    752c:	e0bfe3c5 	stb	r2,-113(fp)
    7530:	003fe306 	br	74c0 <__alt_data_end+0xfc0074c0>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7534:	e0bffc17 	ldw	r2,-16(fp)
    7538:	10800217 	ldw	r2,8(r2)
    753c:	1009883a 	mov	r4,r2
    7540:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    7544:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7548:	e0bffc17 	ldw	r2,-16(fp)
    754c:	10800303 	ldbu	r2,12(r2)
    7550:	10803fcc 	andi	r2,r2,255
    7554:	10000226 	beq	r2,zero,7560 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    7558:	00bff644 	movi	r2,-39
    755c:	0001c706 	br	7c7c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7560:	e0bfe817 	ldw	r2,-96(fp)
    7564:	10800017 	ldw	r2,0(r2)
    7568:	10800017 	ldw	r2,0(r2)
    756c:	e0fffc17 	ldw	r3,-16(fp)
    7570:	18c00303 	ldbu	r3,12(r3)
    7574:	18c03fcc 	andi	r3,r3,255
    7578:	180b883a 	mov	r5,r3
    757c:	e13fe817 	ldw	r4,-96(fp)
    7580:	103ee83a 	callr	r2
    7584:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7588:	e0bfe617 	ldw	r2,-104(fp)
    758c:	1000021e 	bne	r2,zero,7598 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7590:	00bff584 	movi	r2,-42
    7594:	0001b906 	br	7c7c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    7598:	e0bfe617 	ldw	r2,-104(fp)
    759c:	10c00003 	ldbu	r3,0(r2)
    75a0:	11000043 	ldbu	r4,1(r2)
    75a4:	2008923a 	slli	r4,r4,8
    75a8:	20c6b03a 	or	r3,r4,r3
    75ac:	11000083 	ldbu	r4,2(r2)
    75b0:	2008943a 	slli	r4,r4,16
    75b4:	20c6b03a 	or	r3,r4,r3
    75b8:	108000c3 	ldbu	r2,3(r2)
    75bc:	1004963a 	slli	r2,r2,24
    75c0:	10c4b03a 	or	r2,r2,r3
    75c4:	1000021e 	bne	r2,zero,75d0 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    75c8:	00bff5c4 	movi	r2,-41
    75cc:	0001ab06 	br	7c7c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    75d0:	e0bfe617 	ldw	r2,-104(fp)
    75d4:	10c00003 	ldbu	r3,0(r2)
    75d8:	11000043 	ldbu	r4,1(r2)
    75dc:	2008923a 	slli	r4,r4,8
    75e0:	20c6b03a 	or	r3,r4,r3
    75e4:	11000083 	ldbu	r4,2(r2)
    75e8:	2008943a 	slli	r4,r4,16
    75ec:	20c6b03a 	or	r3,r4,r3
    75f0:	108000c3 	ldbu	r2,3(r2)
    75f4:	1004963a 	slli	r2,r2,24
    75f8:	10c4b03a 	or	r2,r2,r3
    75fc:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7600:	e0bffc17 	ldw	r2,-16(fp)
    7604:	10c004c4 	addi	r3,r2,19
    7608:	e0bfe617 	ldw	r2,-104(fp)
    760c:	19803fcc 	andi	r6,r3,255
    7610:	11000003 	ldbu	r4,0(r2)
    7614:	2008703a 	and	r4,r4,zero
    7618:	200b883a 	mov	r5,r4
    761c:	3009883a 	mov	r4,r6
    7620:	2908b03a 	or	r4,r5,r4
    7624:	11000005 	stb	r4,0(r2)
    7628:	1808d23a 	srli	r4,r3,8
    762c:	21803fcc 	andi	r6,r4,255
    7630:	11000043 	ldbu	r4,1(r2)
    7634:	2008703a 	and	r4,r4,zero
    7638:	200b883a 	mov	r5,r4
    763c:	3009883a 	mov	r4,r6
    7640:	2908b03a 	or	r4,r5,r4
    7644:	11000045 	stb	r4,1(r2)
    7648:	1808d43a 	srli	r4,r3,16
    764c:	21803fcc 	andi	r6,r4,255
    7650:	11000083 	ldbu	r4,2(r2)
    7654:	2008703a 	and	r4,r4,zero
    7658:	200b883a 	mov	r5,r4
    765c:	3009883a 	mov	r4,r6
    7660:	2908b03a 	or	r4,r5,r4
    7664:	11000085 	stb	r4,2(r2)
    7668:	180ad63a 	srli	r5,r3,24
    766c:	10c000c3 	ldbu	r3,3(r2)
    7670:	1806703a 	and	r3,r3,zero
    7674:	1809883a 	mov	r4,r3
    7678:	2807883a 	mov	r3,r5
    767c:	20c6b03a 	or	r3,r4,r3
    7680:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    7684:	e0bfe617 	ldw	r2,-104(fp)
    7688:	e0ffff03 	ldbu	r3,-4(fp)
    768c:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    7690:	e0bffc17 	ldw	r2,-16(fp)
    7694:	10c00217 	ldw	r3,8(r2)
    7698:	e0bfe944 	addi	r2,fp,-91
    769c:	d8800015 	stw	r2,0(sp)
    76a0:	01c00204 	movi	r7,8
    76a4:	000d883a 	mov	r6,zero
    76a8:	000b883a 	mov	r5,zero
    76ac:	1809883a 	mov	r4,r3
    76b0:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    76b4:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    76b8:	e0bfe617 	ldw	r2,-104(fp)
    76bc:	e0ffe717 	ldw	r3,-100(fp)
    76c0:	19403fcc 	andi	r5,r3,255
    76c4:	10c00003 	ldbu	r3,0(r2)
    76c8:	1806703a 	and	r3,r3,zero
    76cc:	1809883a 	mov	r4,r3
    76d0:	2807883a 	mov	r3,r5
    76d4:	20c6b03a 	or	r3,r4,r3
    76d8:	10c00005 	stb	r3,0(r2)
    76dc:	e0ffe717 	ldw	r3,-100(fp)
    76e0:	1806d23a 	srli	r3,r3,8
    76e4:	19403fcc 	andi	r5,r3,255
    76e8:	10c00043 	ldbu	r3,1(r2)
    76ec:	1806703a 	and	r3,r3,zero
    76f0:	1809883a 	mov	r4,r3
    76f4:	2807883a 	mov	r3,r5
    76f8:	20c6b03a 	or	r3,r4,r3
    76fc:	10c00045 	stb	r3,1(r2)
    7700:	e0ffe717 	ldw	r3,-100(fp)
    7704:	1806d43a 	srli	r3,r3,16
    7708:	19403fcc 	andi	r5,r3,255
    770c:	10c00083 	ldbu	r3,2(r2)
    7710:	1806703a 	and	r3,r3,zero
    7714:	1809883a 	mov	r4,r3
    7718:	2807883a 	mov	r3,r5
    771c:	20c6b03a 	or	r3,r4,r3
    7720:	10c00085 	stb	r3,2(r2)
    7724:	e0ffe717 	ldw	r3,-100(fp)
    7728:	180ad63a 	srli	r5,r3,24
    772c:	10c000c3 	ldbu	r3,3(r2)
    7730:	1806703a 	and	r3,r3,zero
    7734:	1809883a 	mov	r4,r3
    7738:	2807883a 	mov	r3,r5
    773c:	20c6b03a 	or	r3,r4,r3
    7740:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7744:	e0bfe303 	ldbu	r2,-116(fp)
    7748:	10013a1e 	bne	r2,zero,7c34 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    774c:	e0bfe817 	ldw	r2,-96(fp)
    7750:	10800017 	ldw	r2,0(r2)
    7754:	10800104 	addi	r2,r2,4
    7758:	10800017 	ldw	r2,0(r2)
    775c:	e0fffd03 	ldbu	r3,-12(fp)
    7760:	e13ffe03 	ldbu	r4,-8(fp)
    7764:	200f883a 	mov	r7,r4
    7768:	000d883a 	mov	r6,zero
    776c:	180b883a 	mov	r5,r3
    7770:	e13fe817 	ldw	r4,-96(fp)
    7774:	103ee83a 	callr	r2
    7778:	1007883a 	mov	r3,r2
    777c:	e0bffc17 	ldw	r2,-16(fp)
    7780:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    7784:	e0bffc17 	ldw	r2,-16(fp)
    7788:	10800303 	ldbu	r2,12(r2)
    778c:	10803fcc 	andi	r2,r2,255
    7790:	1000021e 	bne	r2,zero,779c <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    7794:	00bff504 	movi	r2,-44
    7798:	00013806 	br	7c7c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    779c:	e0bfe517 	ldw	r2,-108(fp)
    77a0:	10c001c3 	ldbu	r3,7(r2)
    77a4:	e0bffc17 	ldw	r2,-16(fp)
    77a8:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    77ac:	e0bffc17 	ldw	r2,-16(fp)
    77b0:	10c00217 	ldw	r3,8(r2)
    77b4:	e0bffc17 	ldw	r2,-16(fp)
    77b8:	10800303 	ldbu	r2,12(r2)
    77bc:	10803fcc 	andi	r2,r2,255
    77c0:	100f883a 	mov	r7,r2
    77c4:	000d883a 	mov	r6,zero
    77c8:	000b883a 	mov	r5,zero
    77cc:	1809883a 	mov	r4,r3
    77d0:	0002b000 	call	2b00 <_ZN3USB7setAddrEhhh>
    77d4:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    77d8:	e0bfe303 	ldbu	r2,-116(fp)
    77dc:	10001026 	beq	r2,zero,7820 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    77e0:	e0bfe617 	ldw	r2,-104(fp)
    77e4:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    77e8:	e0bfe817 	ldw	r2,-96(fp)
    77ec:	10800017 	ldw	r2,0(r2)
    77f0:	10800204 	addi	r2,r2,8
    77f4:	10800017 	ldw	r2,0(r2)
    77f8:	e0fffc17 	ldw	r3,-16(fp)
    77fc:	18c00303 	ldbu	r3,12(r3)
    7800:	18c03fcc 	andi	r3,r3,255
    7804:	180b883a 	mov	r5,r3
    7808:	e13fe817 	ldw	r4,-96(fp)
    780c:	103ee83a 	callr	r2
                bAddress = 0;
    7810:	e0bffc17 	ldw	r2,-16(fp)
    7814:	10000305 	stb	zero,12(r2)
                return rcode;
    7818:	e0bfe303 	ldbu	r2,-116(fp)
    781c:	00011706 	br	7c7c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7820:	e0bffc17 	ldw	r2,-16(fp)
    7824:	10800303 	ldbu	r2,12(r2)
    7828:	10803fcc 	andi	r2,r2,255
    782c:	01402004 	movi	r5,128
    7830:	1009883a 	mov	r4,r2
    7834:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7838:	e0bfe617 	ldw	r2,-104(fp)
    783c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7840:	e0bfe817 	ldw	r2,-96(fp)
    7844:	10800017 	ldw	r2,0(r2)
    7848:	10800017 	ldw	r2,0(r2)
    784c:	e0fffc17 	ldw	r3,-16(fp)
    7850:	18c00303 	ldbu	r3,12(r3)
    7854:	18c03fcc 	andi	r3,r3,255
    7858:	180b883a 	mov	r5,r3
    785c:	e13fe817 	ldw	r4,-96(fp)
    7860:	103ee83a 	callr	r2
    7864:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7868:	e0bfe617 	ldw	r2,-104(fp)
    786c:	1000021e 	bne	r2,zero,7878 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7870:	00bff584 	movi	r2,-42
    7874:	00010106 	br	7c7c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    7878:	e0bfe617 	ldw	r2,-104(fp)
    787c:	e0ffff03 	ldbu	r3,-4(fp)
    7880:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    7884:	e0bffc17 	ldw	r2,-16(fp)
    7888:	10c00217 	ldw	r3,8(r2)
    788c:	e0bffc17 	ldw	r2,-16(fp)
    7890:	10800303 	ldbu	r2,12(r2)
    7894:	11003fcc 	andi	r4,r2,255
    7898:	00800484 	movi	r2,18
    789c:	117fffcc 	andi	r5,r2,65535
    78a0:	e0bfe944 	addi	r2,fp,-91
    78a4:	d8800015 	stw	r2,0(sp)
    78a8:	280f883a 	mov	r7,r5
    78ac:	000d883a 	mov	r6,zero
    78b0:	200b883a 	mov	r5,r4
    78b4:	1809883a 	mov	r4,r3
    78b8:	00028440 	call	2844 <_ZN3USB11getDevDescrEhhtPh>
    78bc:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    78c0:	e0bfe303 	ldbu	r2,-116(fp)
    78c4:	1000dd1e 	bne	r2,zero,7c3c <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    78c8:	e0bfe517 	ldw	r2,-108(fp)
    78cc:	10c00203 	ldbu	r3,8(r2)
    78d0:	10800243 	ldbu	r2,9(r2)
    78d4:	1004923a 	slli	r2,r2,8
    78d8:	10c4b03a 	or	r2,r2,r3
    78dc:	1007883a 	mov	r3,r2
    78e0:	e0bffc17 	ldw	r2,-16(fp)
    78e4:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    78e8:	e0bfe517 	ldw	r2,-108(fp)
    78ec:	10c00283 	ldbu	r3,10(r2)
    78f0:	108002c3 	ldbu	r2,11(r2)
    78f4:	1004923a 	slli	r2,r2,8
    78f8:	10c4b03a 	or	r2,r2,r3
    78fc:	1007883a 	mov	r3,r2
    7900:	e0bffc17 	ldw	r2,-16(fp)
    7904:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    7908:	e0bfe517 	ldw	r2,-108(fp)
    790c:	10800443 	ldbu	r2,17(r2)
    7910:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7914:	e0bffc17 	ldw	r2,-16(fp)
    7918:	10c00217 	ldw	r3,8(r2)
    791c:	e0bffc17 	ldw	r2,-16(fp)
    7920:	10800303 	ldbu	r2,12(r2)
    7924:	11003fcc 	andi	r4,r2,255
    7928:	e0bffc17 	ldw	r2,-16(fp)
    792c:	108004c4 	addi	r2,r2,19
    7930:	100f883a 	mov	r7,r2
    7934:	01800044 	movi	r6,1
    7938:	200b883a 	mov	r5,r4
    793c:	1809883a 	mov	r4,r3
    7940:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7944:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7948:	e0bfe303 	ldbu	r2,-116(fp)
    794c:	1000bd1e 	bne	r2,zero,7c44 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7950:	e0bffc17 	ldw	r2,-16(fp)
    7954:	1080040b 	ldhu	r2,16(r2)
    7958:	10bfffcc 	andi	r2,r2,65535
    795c:	01402004 	movi	r5,128
    7960:	1009883a 	mov	r4,r2
    7964:	000922c0 	call	922c <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    7968:	e0bffc17 	ldw	r2,-16(fp)
    796c:	1080038b 	ldhu	r2,14(r2)
    7970:	10bfffcc 	andi	r2,r2,65535
    7974:	01402004 	movi	r5,128
    7978:	1009883a 	mov	r4,r2
    797c:	000922c0 	call	922c <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    7980:	e0bfe903 	ldbu	r2,-92(fp)
    7984:	01402004 	movi	r5,128
    7988:	1009883a 	mov	r4,r2
    798c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    7990:	e0bffc17 	ldw	r2,-16(fp)
    7994:	00c000c4 	movi	r3,3
    7998:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    799c:	e13ffc17 	ldw	r4,-16(fp)
    79a0:	0007d080 	call	7d08 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    79a4:	e03fe405 	stb	zero,-112(fp)
    79a8:	e0ffe403 	ldbu	r3,-112(fp)
    79ac:	e0bfe903 	ldbu	r2,-92(fp)
    79b0:	18802a2e 	bgeu	r3,r2,7a5c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    79b4:	e0bffc17 	ldw	r2,-16(fp)
    79b8:	10c00104 	addi	r3,r2,4
    79bc:	e0bfee04 	addi	r2,fp,-72
    79c0:	01800044 	movi	r6,1
    79c4:	180b883a 	mov	r5,r3
    79c8:	1009883a 	mov	r4,r2
    79cc:	00088080 	call	8808 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    79d0:	e0bffc17 	ldw	r2,-16(fp)
    79d4:	10c00217 	ldw	r3,8(r2)
    79d8:	e0bffc17 	ldw	r2,-16(fp)
    79dc:	10800303 	ldbu	r2,12(r2)
    79e0:	11003fcc 	andi	r4,r2,255
    79e4:	e17fe403 	ldbu	r5,-112(fp)
    79e8:	e0bfee04 	addi	r2,fp,-72
    79ec:	d8800015 	stw	r2,0(sp)
    79f0:	280f883a 	mov	r7,r5
    79f4:	000d883a 	mov	r6,zero
    79f8:	200b883a 	mov	r5,r4
    79fc:	1809883a 	mov	r4,r3
    7a00:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7a04:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    7a08:	e0bfe303 	ldbu	r2,-116(fp)
    7a0c:	10008f1e 	bne	r2,zero,7c4c <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7a10:	e0bfee04 	addi	r2,fp,-72
    7a14:	1009883a 	mov	r4,r2
    7a18:	00091140 	call	9114 <_ZN14MidiDescParser9getNumEPsEv>
    7a1c:	1007883a 	mov	r3,r2
    7a20:	e0bfe383 	ldbu	r2,-114(fp)
    7a24:	10c5883a 	add	r2,r2,r3
    7a28:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    7a2c:	e0bfe383 	ldbu	r2,-114(fp)
    7a30:	108000b0 	cmpltui	r2,r2,2
    7a34:	1000051e 	bne	r2,zero,7a4c <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7a38:	e0bfee04 	addi	r2,fp,-72
    7a3c:	1009883a 	mov	r4,r2
    7a40:	00090ec0 	call	90ec <_ZN14MidiDescParser12getConfValueEv>
    7a44:	e0bfe345 	stb	r2,-115(fp)
    7a48:	00000406 	br	7a5c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7a4c:	e0bfe403 	ldbu	r2,-112(fp)
    7a50:	10800044 	addi	r2,r2,1
    7a54:	e0bfe405 	stb	r2,-112(fp)
    7a58:	003fd306 	br	79a8 <__alt_data_end+0xfc0079a8>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    7a5c:	e0bfe383 	ldbu	r2,-114(fp)
    7a60:	01402004 	movi	r5,128
    7a64:	1009883a 	mov	r4,r2
    7a68:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    7a6c:	e0bfe383 	ldbu	r2,-114(fp)
    7a70:	10800058 	cmpnei	r2,r2,1
    7a74:	1000321e 	bne	r2,zero,7b40 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7a78:	e03fe445 	stb	zero,-111(fp)
    7a7c:	e0ffe443 	ldbu	r3,-111(fp)
    7a80:	e0bfe903 	ldbu	r2,-92(fp)
    7a84:	18802a2e 	bgeu	r3,r2,7b30 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    7a88:	e0bffc17 	ldw	r2,-16(fp)
    7a8c:	10c00104 	addi	r3,r2,4
    7a90:	e0bfee04 	addi	r2,fp,-72
    7a94:	000d883a 	mov	r6,zero
    7a98:	180b883a 	mov	r5,r3
    7a9c:	1009883a 	mov	r4,r2
    7aa0:	00088080 	call	8808 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    7aa4:	e0bffc17 	ldw	r2,-16(fp)
    7aa8:	10c00217 	ldw	r3,8(r2)
    7aac:	e0bffc17 	ldw	r2,-16(fp)
    7ab0:	10800303 	ldbu	r2,12(r2)
    7ab4:	11003fcc 	andi	r4,r2,255
    7ab8:	e17fe443 	ldbu	r5,-111(fp)
    7abc:	e0bfee04 	addi	r2,fp,-72
    7ac0:	d8800015 	stw	r2,0(sp)
    7ac4:	280f883a 	mov	r7,r5
    7ac8:	000d883a 	mov	r6,zero
    7acc:	200b883a 	mov	r5,r4
    7ad0:	1809883a 	mov	r4,r3
    7ad4:	00029600 	call	2960 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7ad8:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    7adc:	e0bfe303 	ldbu	r2,-116(fp)
    7ae0:	10005c1e 	bne	r2,zero,7c54 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    7ae4:	e0bfee04 	addi	r2,fp,-72
    7ae8:	1009883a 	mov	r4,r2
    7aec:	00091140 	call	9114 <_ZN14MidiDescParser9getNumEPsEv>
    7af0:	1007883a 	mov	r3,r2
    7af4:	e0bfe383 	ldbu	r2,-114(fp)
    7af8:	10c5883a 	add	r2,r2,r3
    7afc:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7b00:	e0bfe383 	ldbu	r2,-114(fp)
    7b04:	108000b0 	cmpltui	r2,r2,2
    7b08:	1000051e 	bne	r2,zero,7b20 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    7b0c:	e0bfee04 	addi	r2,fp,-72
    7b10:	1009883a 	mov	r4,r2
    7b14:	00090ec0 	call	90ec <_ZN14MidiDescParser12getConfValueEv>
    7b18:	e0bfe345 	stb	r2,-115(fp)
    7b1c:	00000406 	br	7b30 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7b20:	e0bfe443 	ldbu	r2,-111(fp)
    7b24:	10800044 	addi	r2,r2,1
    7b28:	e0bfe445 	stb	r2,-111(fp)
    7b2c:	003fd306 	br	7a7c <__alt_data_end+0xfc007a7c>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7b30:	e0bfe383 	ldbu	r2,-114(fp)
    7b34:	01402004 	movi	r5,128
    7b38:	1009883a 	mov	r4,r2
    7b3c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7b40:	e0bfe383 	ldbu	r2,-114(fp)
    7b44:	108000a8 	cmpgeui	r2,r2,2
    7b48:	1000031e 	bne	r2,zero,7b58 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7b4c:	00bfffc4 	movi	r2,-1
    7b50:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7b54:	00004206 	br	7c60 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7b58:	e0bffc17 	ldw	r2,-16(fp)
    7b5c:	10c00217 	ldw	r3,8(r2)
    7b60:	e0bffc17 	ldw	r2,-16(fp)
    7b64:	10800303 	ldbu	r2,12(r2)
    7b68:	11003fcc 	andi	r4,r2,255
    7b6c:	e0bffc17 	ldw	r2,-16(fp)
    7b70:	108004c4 	addi	r2,r2,19
    7b74:	100f883a 	mov	r7,r2
    7b78:	018000c4 	movi	r6,3
    7b7c:	200b883a 	mov	r5,r4
    7b80:	1809883a 	mov	r4,r3
    7b84:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7b88:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    7b8c:	e0bfe343 	ldbu	r2,-115(fp)
    7b90:	01402004 	movi	r5,128
    7b94:	1009883a 	mov	r4,r2
    7b98:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    7b9c:	e0bffc17 	ldw	r2,-16(fp)
    7ba0:	10800583 	ldbu	r2,22(r2)
    7ba4:	10bfe004 	addi	r2,r2,-128
    7ba8:	10803fcc 	andi	r2,r2,255
    7bac:	01402004 	movi	r5,128
    7bb0:	1009883a 	mov	r4,r2
    7bb4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7bb8:	e0bffc17 	ldw	r2,-16(fp)
    7bbc:	10800643 	ldbu	r2,25(r2)
    7bc0:	10803fcc 	andi	r2,r2,255
    7bc4:	01402004 	movi	r5,128
    7bc8:	1009883a 	mov	r4,r2
    7bcc:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    7bd0:	e0bffc17 	ldw	r2,-16(fp)
    7bd4:	10c00217 	ldw	r3,8(r2)
    7bd8:	e0bffc17 	ldw	r2,-16(fp)
    7bdc:	10800303 	ldbu	r2,12(r2)
    7be0:	10803fcc 	andi	r2,r2,255
    7be4:	e13fe343 	ldbu	r4,-115(fp)
    7be8:	200f883a 	mov	r7,r4
    7bec:	000d883a 	mov	r6,zero
    7bf0:	100b883a 	mov	r5,r2
    7bf4:	1809883a 	mov	r4,r3
    7bf8:	0002b940 	call	2b94 <_ZN3USB7setConfEhhh>
    7bfc:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7c00:	e0bfe303 	ldbu	r2,-116(fp)
    7c04:	1000151e 	bne	r2,zero,7c5c <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7c08:	e0bffc17 	ldw	r2,-16(fp)
    7c0c:	10801817 	ldw	r2,96(r2)
    7c10:	10000326 	beq	r2,zero,7c20 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7c14:	e0bffc17 	ldw	r2,-16(fp)
    7c18:	10801817 	ldw	r2,96(r2)
    7c1c:	103ee83a 	callr	r2

        bPollEnable = true;
    7c20:	e0bffc17 	ldw	r2,-16(fp)
    7c24:	00c00044 	movi	r3,1
    7c28:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7c2c:	0005883a 	mov	r2,zero
    7c30:	00001206 	br	7c7c <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7c34:	0001883a 	nop
    7c38:	00000906 	br	7c60 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7c3c:	0001883a 	nop
    7c40:	00000706 	br	7c60 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7c44:	0001883a 	nop
    7c48:	00000506 	br	7c60 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7c4c:	0001883a 	nop
    7c50:	00000306 	br	7c60 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7c54:	0001883a 	nop
    7c58:	00000106 	br	7c60 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7c5c:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7c60:	e0bffc17 	ldw	r2,-16(fp)
    7c64:	10800017 	ldw	r2,0(r2)
    7c68:	10800204 	addi	r2,r2,8
    7c6c:	10800017 	ldw	r2,0(r2)
    7c70:	e13ffc17 	ldw	r4,-16(fp)
    7c74:	103ee83a 	callr	r2
        return rcode;
    7c78:	e0bfe303 	ldbu	r2,-116(fp)
}
    7c7c:	e037883a 	mov	sp,fp
    7c80:	dfc00117 	ldw	ra,4(sp)
    7c84:	df000017 	ldw	fp,0(sp)
    7c88:	dec00204 	addi	sp,sp,8
    7c8c:	f800283a 	ret

00007c90 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7c90:	defffd04 	addi	sp,sp,-12
    7c94:	dfc00215 	stw	ra,8(sp)
    7c98:	df000115 	stw	fp,4(sp)
    7c9c:	df000104 	addi	fp,sp,4
    7ca0:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    7ca4:	e0bfff17 	ldw	r2,-4(fp)
    7ca8:	10800217 	ldw	r2,8(r2)
    7cac:	1009883a 	mov	r4,r2
    7cb0:	0002c180 	call	2c18 <_ZN3USB14GetAddressPoolEv>
    7cb4:	1009883a 	mov	r4,r2
    7cb8:	20800017 	ldw	r2,0(r4)
    7cbc:	10800204 	addi	r2,r2,8
    7cc0:	10800017 	ldw	r2,0(r2)
    7cc4:	e0ffff17 	ldw	r3,-4(fp)
    7cc8:	18c00303 	ldbu	r3,12(r3)
    7ccc:	18c03fcc 	andi	r3,r3,255
    7cd0:	180b883a 	mov	r5,r3
    7cd4:	103ee83a 	callr	r2
        bAddress     = 0;
    7cd8:	e0bfff17 	ldw	r2,-4(fp)
    7cdc:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    7ce0:	e0bfff17 	ldw	r2,-4(fp)
    7ce4:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    7ce8:	e0bfff17 	ldw	r2,-4(fp)
    7cec:	10001705 	stb	zero,92(r2)
        return 0;
    7cf0:	0005883a 	mov	r2,zero
}
    7cf4:	e037883a 	mov	sp,fp
    7cf8:	dfc00117 	ldw	ra,4(sp)
    7cfc:	df000017 	ldw	fp,0(sp)
    7d00:	dec00204 	addi	sp,sp,8
    7d04:	f800283a 	ret

00007d08 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7d08:	defffe04 	addi	sp,sp,-8
    7d0c:	df000115 	stw	fp,4(sp)
    7d10:	df000104 	addi	fp,sp,4
    7d14:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7d18:	e0bfff17 	ldw	r2,-4(fp)
    7d1c:	1080040b 	ldhu	r2,16(r2)
    7d20:	10bfffcc 	andi	r2,r2,65535
    7d24:	10848d58 	cmpnei	r2,r2,4661
    7d28:	1000351e 	bne	r2,zero,7e00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7d2c:	e0bfff17 	ldw	r2,-4(fp)
    7d30:	1080038b 	ldhu	r2,14(r2)
    7d34:	10bfffcc 	andi	r2,r2,65535
    7d38:	10800820 	cmpeqi	r2,r2,32
    7d3c:	10000f1e 	bne	r2,zero,7d7c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7d40:	e0bfff17 	ldw	r2,-4(fp)
    7d44:	1080038b 	ldhu	r2,14(r2)
    7d48:	10bfffcc 	andi	r2,r2,65535
    7d4c:	10800da0 	cmpeqi	r2,r2,54
    7d50:	10000a1e 	bne	r2,zero,7d7c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7d54:	e0bfff17 	ldw	r2,-4(fp)
    7d58:	1080038b 	ldhu	r2,14(r2)
    7d5c:	10bfffcc 	andi	r2,r2,65535
    7d60:	10801460 	cmpeqi	r2,r2,81
    7d64:	1000051e 	bne	r2,zero,7d7c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	1080038b 	ldhu	r2,14(r2)
    7d70:	10bfffcc 	andi	r2,r2,65535
    7d74:	10801a58 	cmpnei	r2,r2,105
    7d78:	1000041e 	bne	r2,zero,7d8c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7d7c:	e0bfff17 	ldw	r2,-4(fp)
    7d80:	00c00084 	movi	r3,2
    7d84:	10c00485 	stb	r3,18(r2)
                        return;
    7d88:	00001d06 	br	7e00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    7d8c:	e0bfff17 	ldw	r2,-4(fp)
    7d90:	1080038b 	ldhu	r2,14(r2)
    7d94:	10bfffcc 	andi	r2,r2,65535
    7d98:	10800c30 	cmpltui	r2,r2,48
    7d9c:	1000051e 	bne	r2,zero,7db4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7da0:	e0bfff17 	ldw	r2,-4(fp)
    7da4:	1080038b 	ldhu	r2,14(r2)
    7da8:	10bfffcc 	andi	r2,r2,65535
    7dac:	10800cf0 	cmpltui	r2,r2,51
    7db0:	10000f1e 	bne	r2,zero,7df0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7db4:	e0bfff17 	ldw	r2,-4(fp)
    7db8:	1080038b 	ldhu	r2,14(r2)
    7dbc:	10bfffcc 	andi	r2,r2,65535
    7dc0:	10800d60 	cmpeqi	r2,r2,53
    7dc4:	10000a1e 	bne	r2,zero,7df0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7dc8:	e0bfff17 	ldw	r2,-4(fp)
    7dcc:	1080038b 	ldhu	r2,14(r2)
    7dd0:	10bfffcc 	andi	r2,r2,65535
    7dd4:	10801ef0 	cmpltui	r2,r2,123
    7dd8:	1000091e 	bne	r2,zero,7e00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    7ddc:	e0bfff17 	ldw	r2,-4(fp)
    7de0:	1080038b 	ldhu	r2,14(r2)
    7de4:	10bfffcc 	andi	r2,r2,65535
    7de8:	10801fa8 	cmpgeui	r2,r2,126
    7dec:	1000041e 	bne	r2,zero,7e00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7df0:	e0bfff17 	ldw	r2,-4(fp)
    7df4:	00c00084 	movi	r3,2
    7df8:	10c00485 	stb	r3,18(r2)
                        return;
    7dfc:	0001883a 	nop
                }
        }
}
    7e00:	e037883a 	mov	sp,fp
    7e04:	df000017 	ldw	fp,0(sp)
    7e08:	dec00104 	addi	sp,sp,4
    7e0c:	f800283a 	ret

00007e10 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7e10:	defff804 	addi	sp,sp,-32
    7e14:	dfc00715 	stw	ra,28(sp)
    7e18:	df000615 	stw	fp,24(sp)
    7e1c:	df000604 	addi	fp,sp,24
    7e20:	e13ffd15 	stw	r4,-12(fp)
    7e24:	e17ffe15 	stw	r5,-8(fp)
    7e28:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7e2c:	e0bffd17 	ldw	r2,-12(fp)
    7e30:	108005c3 	ldbu	r2,23(r2)
    7e34:	10c03fcc 	andi	r3,r2,255
    7e38:	e0bffe17 	ldw	r2,-8(fp)
    7e3c:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7e40:	e0bffd17 	ldw	r2,-12(fp)
    7e44:	10c00217 	ldw	r3,8(r2)
    7e48:	e0bffd17 	ldw	r2,-12(fp)
    7e4c:	10800303 	ldbu	r2,12(r2)
    7e50:	11003fcc 	andi	r4,r2,255
    7e54:	e0bffd17 	ldw	r2,-12(fp)
    7e58:	10800583 	ldbu	r2,22(r2)
    7e5c:	11403fcc 	andi	r5,r2,255
    7e60:	d8000115 	stw	zero,4(sp)
    7e64:	e0bfff17 	ldw	r2,-4(fp)
    7e68:	d8800015 	stw	r2,0(sp)
    7e6c:	e1fffe17 	ldw	r7,-8(fp)
    7e70:	280d883a 	mov	r6,r5
    7e74:	200b883a 	mov	r5,r4
    7e78:	1809883a 	mov	r4,r3
    7e7c:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7e80:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7e84:	e0bffe17 	ldw	r2,-8(fp)
    7e88:	1080000b 	ldhu	r2,0(r2)
    7e8c:	10bfffcc 	andi	r2,r2,65535
    7e90:	10800f28 	cmpgeui	r2,r2,60
    7e94:	10000d1e 	bne	r2,zero,7ecc <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7e98:	e0bffe17 	ldw	r2,-8(fp)
    7e9c:	1080000b 	ldhu	r2,0(r2)
    7ea0:	10bfffcc 	andi	r2,r2,65535
    7ea4:	e0ffff17 	ldw	r3,-4(fp)
    7ea8:	1885883a 	add	r2,r3,r2
    7eac:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7eb0:	e0bffe17 	ldw	r2,-8(fp)
    7eb4:	1080000b 	ldhu	r2,0(r2)
    7eb8:	10bfffcc 	andi	r2,r2,65535
    7ebc:	10800044 	addi	r2,r2,1
    7ec0:	e0ffff17 	ldw	r3,-4(fp)
    7ec4:	1885883a 	add	r2,r3,r2
    7ec8:	10000005 	stb	zero,0(r2)
        }
        return r;
    7ecc:	e0bffc03 	ldbu	r2,-16(fp)
}
    7ed0:	e037883a 	mov	sp,fp
    7ed4:	dfc00117 	ldw	ra,4(sp)
    7ed8:	df000017 	ldw	fp,0(sp)
    7edc:	dec00204 	addi	sp,sp,8
    7ee0:	f800283a 	ret

00007ee4 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7ee4:	defff904 	addi	sp,sp,-28
    7ee8:	dfc00615 	stw	ra,24(sp)
    7eec:	df000515 	stw	fp,20(sp)
    7ef0:	df000504 	addi	fp,sp,20
    7ef4:	e13ffd15 	stw	r4,-12(fp)
    7ef8:	e17ffe15 	stw	r5,-8(fp)
    7efc:	3005883a 	mov	r2,r6
    7f00:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7f04:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7f08:	e0bffd17 	ldw	r2,-12(fp)
    7f0c:	10800343 	ldbu	r2,13(r2)
    7f10:	1080005c 	xori	r2,r2,1
    7f14:	10803fcc 	andi	r2,r2,255
    7f18:	10000226 	beq	r2,zero,7f24 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7f1c:	0005883a 	mov	r2,zero
    7f20:	00008506 	br	8138 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7f24:	e0bffd17 	ldw	r2,-12(fp)
    7f28:	10801703 	ldbu	r2,92(r2)
    7f2c:	10803fcc 	andi	r2,r2,255
    7f30:	10001826 	beq	r2,zero,7f94 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7f34:	e0bffd17 	ldw	r2,-12(fp)
    7f38:	10801703 	ldbu	r2,92(r2)
    7f3c:	10803fcc 	andi	r2,r2,255
    7f40:	10801028 	cmpgeui	r2,r2,64
    7f44:	1000131e 	bne	r2,zero,7f94 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7f48:	e0bffd17 	ldw	r2,-12(fp)
    7f4c:	10801703 	ldbu	r2,92(r2)
    7f50:	10803fcc 	andi	r2,r2,255
    7f54:	e0fffd17 	ldw	r3,-12(fp)
    7f58:	1885883a 	add	r2,r3,r2
    7f5c:	10800704 	addi	r2,r2,28
    7f60:	10800003 	ldbu	r2,0(r2)
    7f64:	10803fcc 	andi	r2,r2,255
    7f68:	10002a1e 	bne	r2,zero,8014 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f6c:	e0bffd17 	ldw	r2,-12(fp)
    7f70:	10801703 	ldbu	r2,92(r2)
    7f74:	10803fcc 	andi	r2,r2,255
    7f78:	10800044 	addi	r2,r2,1
    7f7c:	e0fffd17 	ldw	r3,-12(fp)
    7f80:	1885883a 	add	r2,r3,r2
    7f84:	10800704 	addi	r2,r2,28
    7f88:	10800003 	ldbu	r2,0(r2)
    7f8c:	10803fcc 	andi	r2,r2,255
    7f90:	1000201e 	bne	r2,zero,8014 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7f94:	e0bffd17 	ldw	r2,-12(fp)
    7f98:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7f9c:	e0bffd17 	ldw	r2,-12(fp)
    7fa0:	10c00704 	addi	r3,r2,28
    7fa4:	e0bffc04 	addi	r2,fp,-16
    7fa8:	180d883a 	mov	r6,r3
    7fac:	100b883a 	mov	r5,r2
    7fb0:	e13ffd17 	ldw	r4,-12(fp)
    7fb4:	0007e100 	call	7e10 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7fb8:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7fbc:	e0bffb03 	ldbu	r2,-20(fp)
    7fc0:	10000226 	beq	r2,zero,7fcc <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7fc4:	0005883a 	mov	r2,zero
    7fc8:	00005b06 	br	8138 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7fcc:	e0bffd17 	ldw	r2,-12(fp)
    7fd0:	10800703 	ldbu	r2,28(r2)
    7fd4:	10803fcc 	andi	r2,r2,255
    7fd8:	10000e1e 	bne	r2,zero,8014 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7fdc:	e0bffd17 	ldw	r2,-12(fp)
    7fe0:	10800743 	ldbu	r2,29(r2)
    7fe4:	10803fcc 	andi	r2,r2,255
    7fe8:	10000a1e 	bne	r2,zero,8014 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7fec:	e0bffd17 	ldw	r2,-12(fp)
    7ff0:	10800783 	ldbu	r2,30(r2)
    7ff4:	10803fcc 	andi	r2,r2,255
    7ff8:	1000061e 	bne	r2,zero,8014 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ffc:	e0bffd17 	ldw	r2,-12(fp)
    8000:	108007c3 	ldbu	r2,31(r2)
    8004:	10803fcc 	andi	r2,r2,255
    8008:	1000021e 	bne	r2,zero,8014 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    800c:	0005883a 	mov	r2,zero
    8010:	00004906 	br	8138 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    8014:	e0bffd17 	ldw	r2,-12(fp)
    8018:	10801703 	ldbu	r2,92(r2)
    801c:	10803fcc 	andi	r2,r2,255
    8020:	e0fffd17 	ldw	r3,-12(fp)
    8024:	1885883a 	add	r2,r3,r2
    8028:	10800704 	addi	r2,r2,28
    802c:	10800003 	ldbu	r2,0(r2)
    8030:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    8034:	e0bfff03 	ldbu	r2,-4(fp)
    8038:	10000526 	beq	r2,zero,8050 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    803c:	e0bffe17 	ldw	r2,-8(fp)
    8040:	10c00044 	addi	r3,r2,1
    8044:	e0fffe15 	stw	r3,-8(fp)
    8048:	e0fffb43 	ldbu	r3,-19(fp)
    804c:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    8050:	e0bffd17 	ldw	r2,-12(fp)
    8054:	10801703 	ldbu	r2,92(r2)
    8058:	10800044 	addi	r2,r2,1
    805c:	1007883a 	mov	r3,r2
    8060:	e0bffd17 	ldw	r2,-12(fp)
    8064:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    8068:	e0bffe17 	ldw	r2,-8(fp)
    806c:	10c00044 	addi	r3,r2,1
    8070:	e0fffe15 	stw	r3,-8(fp)
    8074:	e0fffd17 	ldw	r3,-12(fp)
    8078:	18c01703 	ldbu	r3,92(r3)
    807c:	19000044 	addi	r4,r3,1
    8080:	200b883a 	mov	r5,r4
    8084:	e13ffd17 	ldw	r4,-12(fp)
    8088:	21401705 	stb	r5,92(r4)
    808c:	18c03fcc 	andi	r3,r3,255
    8090:	e13ffd17 	ldw	r4,-12(fp)
    8094:	20c7883a 	add	r3,r4,r3
    8098:	18c00704 	addi	r3,r3,28
    809c:	18c00003 	ldbu	r3,0(r3)
    80a0:	e0fffb85 	stb	r3,-18(fp)
    80a4:	e0fffb83 	ldbu	r3,-18(fp)
    80a8:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    80ac:	e0bffe17 	ldw	r2,-8(fp)
    80b0:	10c00044 	addi	r3,r2,1
    80b4:	e0fffe15 	stw	r3,-8(fp)
    80b8:	e0fffd17 	ldw	r3,-12(fp)
    80bc:	18c01703 	ldbu	r3,92(r3)
    80c0:	19000044 	addi	r4,r3,1
    80c4:	200b883a 	mov	r5,r4
    80c8:	e13ffd17 	ldw	r4,-12(fp)
    80cc:	21401705 	stb	r5,92(r4)
    80d0:	18c03fcc 	andi	r3,r3,255
    80d4:	e13ffd17 	ldw	r4,-12(fp)
    80d8:	20c7883a 	add	r3,r4,r3
    80dc:	18c00704 	addi	r3,r3,28
    80e0:	18c00003 	ldbu	r3,0(r3)
    80e4:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    80e8:	e0bffe17 	ldw	r2,-8(fp)
    80ec:	10c00044 	addi	r3,r2,1
    80f0:	e0fffe15 	stw	r3,-8(fp)
    80f4:	e0fffd17 	ldw	r3,-12(fp)
    80f8:	18c01703 	ldbu	r3,92(r3)
    80fc:	19000044 	addi	r4,r3,1
    8100:	200b883a 	mov	r5,r4
    8104:	e13ffd17 	ldw	r4,-12(fp)
    8108:	21401705 	stb	r5,92(r4)
    810c:	18c03fcc 	andi	r3,r3,255
    8110:	e13ffd17 	ldw	r4,-12(fp)
    8114:	20c7883a 	add	r3,r4,r3
    8118:	18c00704 	addi	r3,r3,28
    811c:	18c00003 	ldbu	r3,0(r3)
    8120:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    8124:	e0bffb43 	ldbu	r2,-19(fp)
    8128:	108003cc 	andi	r2,r2,15
    812c:	100b883a 	mov	r5,r2
    8130:	e13ffd17 	ldw	r4,-12(fp)
    8134:	00091940 	call	9194 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    8138:	e037883a 	mov	sp,fp
    813c:	dfc00117 	ldw	ra,4(sp)
    8140:	df000017 	ldw	fp,0(sp)
    8144:	dec00204 	addi	sp,sp,8
    8148:	f800283a 	ret

0000814c <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    814c:	defff804 	addi	sp,sp,-32
    8150:	dfc00715 	stw	ra,28(sp)
    8154:	df000615 	stw	fp,24(sp)
    8158:	df000604 	addi	fp,sp,24
    815c:	e13ffd15 	stw	r4,-12(fp)
    8160:	e17ffe15 	stw	r5,-8(fp)
    8164:	3005883a 	mov	r2,r6
    8168:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    816c:	e0bffe17 	ldw	r2,-8(fp)
    8170:	10800003 	ldbu	r2,0(r2)
    8174:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    8178:	e0bffb03 	ldbu	r2,-20(fp)
    817c:	100b883a 	mov	r5,r2
    8180:	e13ffd17 	ldw	r4,-12(fp)
    8184:	000913c0 	call	913c <_ZN9USBH_MIDI17convertStatus2CinEh>
    8188:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    818c:	e0bffb03 	ldbu	r2,-20(fp)
    8190:	10803c18 	cmpnei	r2,r2,240
    8194:	10000b1e 	bne	r2,zero,81c4 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    8198:	e17ffe17 	ldw	r5,-8(fp)
    819c:	e13ffd17 	ldw	r4,-12(fp)
    81a0:	000830c0 	call	830c <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    81a4:	10bfffcc 	andi	r2,r2,65535
    81a8:	e0ffff03 	ldbu	r3,-4(fp)
    81ac:	180f883a 	mov	r7,r3
    81b0:	100d883a 	mov	r6,r2
    81b4:	e17ffe17 	ldw	r5,-8(fp)
    81b8:	e13ffd17 	ldw	r4,-12(fp)
    81bc:	00083940 	call	8394 <_ZN9USBH_MIDI9SendSysExEPhth>
    81c0:	00003406 	br	8294 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    81c4:	e0bfff03 	ldbu	r2,-4(fp)
    81c8:	1004913a 	slli	r2,r2,4
    81cc:	1007883a 	mov	r3,r2
    81d0:	e0bffb43 	ldbu	r2,-19(fp)
    81d4:	1884b03a 	or	r2,r3,r2
    81d8:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    81dc:	e0bffe17 	ldw	r2,-8(fp)
    81e0:	10800003 	ldbu	r2,0(r2)
    81e4:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    81e8:	e0bffb43 	ldbu	r2,-19(fp)
    81ec:	100b883a 	mov	r5,r2
    81f0:	e13ffd17 	ldw	r4,-12(fp)
    81f4:	00091940 	call	9194 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    81f8:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    81fc:	e0bffb83 	ldbu	r2,-18(fp)
    8200:	10c000a0 	cmpeqi	r3,r2,2
    8204:	18000c1e 	bne	r3,zero,8238 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    8208:	10c000e0 	cmpeqi	r3,r2,3
    820c:	1800031e 	bne	r3,zero,821c <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    8210:	10800060 	cmpeqi	r2,r2,1
    8214:	10000d1e 	bne	r2,zero,824c <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    8218:	00000f06 	br	8258 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    821c:	e0bffe17 	ldw	r2,-8(fp)
    8220:	10800043 	ldbu	r2,1(r2)
    8224:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    8228:	e0bffe17 	ldw	r2,-8(fp)
    822c:	10800083 	ldbu	r2,2(r2)
    8230:	e0bffc85 	stb	r2,-14(fp)
                break;
    8234:	00000806 	br	8258 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    8238:	e0bffe17 	ldw	r2,-8(fp)
    823c:	10800043 	ldbu	r2,1(r2)
    8240:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    8244:	e03ffc85 	stb	zero,-14(fp)
                break;
    8248:	00000306 	br	8258 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    824c:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    8250:	e03ffc85 	stb	zero,-14(fp)
                break;
    8254:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    8258:	e0bffd17 	ldw	r2,-12(fp)
    825c:	10c00217 	ldw	r3,8(r2)
    8260:	e0bffd17 	ldw	r2,-12(fp)
    8264:	10800303 	ldbu	r2,12(r2)
    8268:	11003fcc 	andi	r4,r2,255
    826c:	e0bffd17 	ldw	r2,-12(fp)
    8270:	10800643 	ldbu	r2,25(r2)
    8274:	11403fcc 	andi	r5,r2,255
    8278:	e0bffbc4 	addi	r2,fp,-17
    827c:	d8800015 	stw	r2,0(sp)
    8280:	01c00104 	movi	r7,4
    8284:	280d883a 	mov	r6,r5
    8288:	200b883a 	mov	r5,r4
    828c:	1809883a 	mov	r4,r3
    8290:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    8294:	e037883a 	mov	sp,fp
    8298:	dfc00117 	ldw	ra,4(sp)
    829c:	df000017 	ldw	fp,0(sp)
    82a0:	dec00204 	addi	sp,sp,8
    82a4:	f800283a 	ret

000082a8 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    82a8:	defffb04 	addi	sp,sp,-20
    82ac:	dfc00415 	stw	ra,16(sp)
    82b0:	df000315 	stw	fp,12(sp)
    82b4:	df000304 	addi	fp,sp,12
    82b8:	e13ffd15 	stw	r4,-12(fp)
    82bc:	2807883a 	mov	r3,r5
    82c0:	3005883a 	mov	r2,r6
    82c4:	e0fffe05 	stb	r3,-8(fp)
    82c8:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    82cc:	e0bfff03 	ldbu	r2,-4(fp)
    82d0:	1000051e 	bne	r2,zero,82e8 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    82d4:	e0bffe03 	ldbu	r2,-8(fp)
    82d8:	100b883a 	mov	r5,r2
    82dc:	e13ffd17 	ldw	r4,-12(fp)
    82e0:	000913c0 	call	913c <_ZN9USBH_MIDI17convertStatus2CinEh>
    82e4:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    82e8:	e0bfff03 	ldbu	r2,-4(fp)
    82ec:	100b883a 	mov	r5,r2
    82f0:	e13ffd17 	ldw	r4,-12(fp)
    82f4:	00091940 	call	9194 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    82f8:	e037883a 	mov	sp,fp
    82fc:	dfc00117 	ldw	ra,4(sp)
    8300:	df000017 	ldw	fp,0(sp)
    8304:	dec00204 	addi	sp,sp,8
    8308:	f800283a 	ret

0000830c <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    830c:	defffc04 	addi	sp,sp,-16
    8310:	df000315 	stw	fp,12(sp)
    8314:	df000304 	addi	fp,sp,12
    8318:	e13ffe15 	stw	r4,-8(fp)
    831c:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    8320:	00800044 	movi	r2,1
    8324:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    8328:	e0bfff17 	ldw	r2,-4(fp)
    832c:	10800003 	ldbu	r2,0(r2)
    8330:	10803fcc 	andi	r2,r2,255
    8334:	10803c20 	cmpeqi	r2,r2,240
    8338:	1000021e 	bne	r2,zero,8344 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    833c:	0005883a 	mov	r2,zero
    8340:	00001006 	br	8384 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    8344:	e0bfff17 	ldw	r2,-4(fp)
    8348:	10800003 	ldbu	r2,0(r2)
    834c:	10803fcc 	andi	r2,r2,255
    8350:	10803de0 	cmpeqi	r2,r2,247
    8354:	10000a1e 	bne	r2,zero,8380 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    8358:	e0bfff17 	ldw	r2,-4(fp)
    835c:	10800044 	addi	r2,r2,1
    8360:	e0bfff15 	stw	r2,-4(fp)
                c++;
    8364:	e0bffd0b 	ldhu	r2,-12(fp)
    8368:	10800044 	addi	r2,r2,1
    836c:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    8370:	e0bffd0b 	ldhu	r2,-12(fp)
    8374:	10804070 	cmpltui	r2,r2,257
    8378:	103ff21e 	bne	r2,zero,8344 <__alt_data_end+0xfc008344>
                        c = 0;
    837c:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    8380:	e0bffd0b 	ldhu	r2,-12(fp)
}
    8384:	e037883a 	mov	sp,fp
    8388:	df000017 	ldw	fp,0(sp)
    838c:	dec00104 	addi	sp,sp,4
    8390:	f800283a 	ret

00008394 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    8394:	deffe704 	addi	sp,sp,-100
    8398:	dfc01815 	stw	ra,96(sp)
    839c:	df001715 	stw	fp,92(sp)
    83a0:	df001704 	addi	fp,sp,92
    83a4:	e13ffc15 	stw	r4,-16(fp)
    83a8:	e17ffd15 	stw	r5,-12(fp)
    83ac:	3007883a 	mov	r3,r6
    83b0:	3805883a 	mov	r2,r7
    83b4:	e0fffe0d 	sth	r3,-8(fp)
    83b8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    83bc:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    83c0:	e0bffe0b 	ldhu	r2,-8(fp)
    83c4:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    83c8:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    83cc:	e0bffc17 	ldw	r2,-16(fp)
    83d0:	108005c3 	ldbu	r2,23(r2)
    83d4:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    83d8:	e0bffe0b 	ldhu	r2,-8(fp)
    83dc:	01402004 	movi	r5,128
    83e0:	1009883a 	mov	r4,r2
    83e4:	000922c0 	call	922c <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    83e8:	e0bfea8b 	ldhu	r2,-86(fp)
    83ec:	1000b026 	beq	r2,zero,86b0 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    83f0:	e0bfeb03 	ldbu	r2,-84(fp)
    83f4:	e0ffff03 	ldbu	r3,-4(fp)
    83f8:	1806913a 	slli	r3,r3,4
    83fc:	18c00114 	ori	r3,r3,4
    8400:	1809883a 	mov	r4,r3
    8404:	e0ffeb84 	addi	r3,fp,-82
    8408:	1885883a 	add	r2,r3,r2
    840c:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    8410:	e0bfea8b 	ldhu	r2,-86(fp)
    8414:	10c000a0 	cmpeqi	r3,r2,2
    8418:	18002a1e 	bne	r3,zero,84c4 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    841c:	10c000e0 	cmpeqi	r3,r2,3
    8420:	1800521e 	bne	r3,zero,856c <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    8424:	10800060 	cmpeqi	r2,r2,1
    8428:	10005826 	beq	r2,zero,858c <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    842c:	e0bfeb03 	ldbu	r2,-84(fp)
    8430:	10c00044 	addi	r3,r2,1
    8434:	e0ffeb05 	stb	r3,-84(fp)
    8438:	10803fcc 	andi	r2,r2,255
    843c:	e0ffff03 	ldbu	r3,-4(fp)
    8440:	1806913a 	slli	r3,r3,4
    8444:	18c00154 	ori	r3,r3,5
    8448:	1809883a 	mov	r4,r3
    844c:	e0ffeb84 	addi	r3,fp,-82
    8450:	1885883a 	add	r2,r3,r2
    8454:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8458:	e0bfeb03 	ldbu	r2,-84(fp)
    845c:	10c00044 	addi	r3,r2,1
    8460:	e0ffeb05 	stb	r3,-84(fp)
    8464:	11003fcc 	andi	r4,r2,255
    8468:	e0bffd17 	ldw	r2,-12(fp)
    846c:	10c00044 	addi	r3,r2,1
    8470:	e0fffd15 	stw	r3,-12(fp)
    8474:	10c00003 	ldbu	r3,0(r2)
    8478:	e0bfeb84 	addi	r2,fp,-82
    847c:	1105883a 	add	r2,r2,r4
    8480:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8484:	e0bfeb03 	ldbu	r2,-84(fp)
    8488:	10c00044 	addi	r3,r2,1
    848c:	e0ffeb05 	stb	r3,-84(fp)
    8490:	10803fcc 	andi	r2,r2,255
    8494:	e0ffeb84 	addi	r3,fp,-82
    8498:	1885883a 	add	r2,r3,r2
    849c:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    84a0:	e0bfeb03 	ldbu	r2,-84(fp)
    84a4:	10c00044 	addi	r3,r2,1
    84a8:	e0ffeb05 	stb	r3,-84(fp)
    84ac:	10803fcc 	andi	r2,r2,255
    84b0:	e0ffeb84 	addi	r3,fp,-82
    84b4:	1885883a 	add	r2,r3,r2
    84b8:	10000005 	stb	zero,0(r2)
                        n = 0;
    84bc:	e03fea8d 	sth	zero,-86(fp)
                        break;
    84c0:	00005a06 	br	862c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    84c4:	e0bfeb03 	ldbu	r2,-84(fp)
    84c8:	10c00044 	addi	r3,r2,1
    84cc:	e0ffeb05 	stb	r3,-84(fp)
    84d0:	10803fcc 	andi	r2,r2,255
    84d4:	e0ffff03 	ldbu	r3,-4(fp)
    84d8:	1806913a 	slli	r3,r3,4
    84dc:	18c00194 	ori	r3,r3,6
    84e0:	1809883a 	mov	r4,r3
    84e4:	e0ffeb84 	addi	r3,fp,-82
    84e8:	1885883a 	add	r2,r3,r2
    84ec:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    84f0:	e0bfeb03 	ldbu	r2,-84(fp)
    84f4:	10c00044 	addi	r3,r2,1
    84f8:	e0ffeb05 	stb	r3,-84(fp)
    84fc:	11003fcc 	andi	r4,r2,255
    8500:	e0bffd17 	ldw	r2,-12(fp)
    8504:	10c00044 	addi	r3,r2,1
    8508:	e0fffd15 	stw	r3,-12(fp)
    850c:	10c00003 	ldbu	r3,0(r2)
    8510:	e0bfeb84 	addi	r2,fp,-82
    8514:	1105883a 	add	r2,r2,r4
    8518:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    851c:	e0bfeb03 	ldbu	r2,-84(fp)
    8520:	10c00044 	addi	r3,r2,1
    8524:	e0ffeb05 	stb	r3,-84(fp)
    8528:	11003fcc 	andi	r4,r2,255
    852c:	e0bffd17 	ldw	r2,-12(fp)
    8530:	10c00044 	addi	r3,r2,1
    8534:	e0fffd15 	stw	r3,-12(fp)
    8538:	10c00003 	ldbu	r3,0(r2)
    853c:	e0bfeb84 	addi	r2,fp,-82
    8540:	1105883a 	add	r2,r2,r4
    8544:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8548:	e0bfeb03 	ldbu	r2,-84(fp)
    854c:	10c00044 	addi	r3,r2,1
    8550:	e0ffeb05 	stb	r3,-84(fp)
    8554:	10803fcc 	andi	r2,r2,255
    8558:	e0ffeb84 	addi	r3,fp,-82
    855c:	1885883a 	add	r2,r3,r2
    8560:	10000005 	stb	zero,0(r2)
                        n = 0;
    8564:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8568:	00003006 	br	862c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    856c:	e0bfeb03 	ldbu	r2,-84(fp)
    8570:	e0ffff03 	ldbu	r3,-4(fp)
    8574:	1806913a 	slli	r3,r3,4
    8578:	18c001d4 	ori	r3,r3,7
    857c:	1809883a 	mov	r4,r3
    8580:	e0ffeb84 	addi	r3,fp,-82
    8584:	1885883a 	add	r2,r3,r2
    8588:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    858c:	e0bfeb03 	ldbu	r2,-84(fp)
    8590:	10800044 	addi	r2,r2,1
    8594:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    8598:	e0bfeb03 	ldbu	r2,-84(fp)
    859c:	10c00044 	addi	r3,r2,1
    85a0:	e0ffeb05 	stb	r3,-84(fp)
    85a4:	11003fcc 	andi	r4,r2,255
    85a8:	e0bffd17 	ldw	r2,-12(fp)
    85ac:	10c00044 	addi	r3,r2,1
    85b0:	e0fffd15 	stw	r3,-12(fp)
    85b4:	10c00003 	ldbu	r3,0(r2)
    85b8:	e0bfeb84 	addi	r2,fp,-82
    85bc:	1105883a 	add	r2,r2,r4
    85c0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    85c4:	e0bfeb03 	ldbu	r2,-84(fp)
    85c8:	10c00044 	addi	r3,r2,1
    85cc:	e0ffeb05 	stb	r3,-84(fp)
    85d0:	11003fcc 	andi	r4,r2,255
    85d4:	e0bffd17 	ldw	r2,-12(fp)
    85d8:	10c00044 	addi	r3,r2,1
    85dc:	e0fffd15 	stw	r3,-12(fp)
    85e0:	10c00003 	ldbu	r3,0(r2)
    85e4:	e0bfeb84 	addi	r2,fp,-82
    85e8:	1105883a 	add	r2,r2,r4
    85ec:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    85f0:	e0bfeb03 	ldbu	r2,-84(fp)
    85f4:	10c00044 	addi	r3,r2,1
    85f8:	e0ffeb05 	stb	r3,-84(fp)
    85fc:	11003fcc 	andi	r4,r2,255
    8600:	e0bffd17 	ldw	r2,-12(fp)
    8604:	10c00044 	addi	r3,r2,1
    8608:	e0fffd15 	stw	r3,-12(fp)
    860c:	10c00003 	ldbu	r3,0(r2)
    8610:	e0bfeb84 	addi	r2,fp,-82
    8614:	1105883a 	add	r2,r2,r4
    8618:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    861c:	e0bfea8b 	ldhu	r2,-86(fp)
    8620:	10bfff44 	addi	r2,r2,-3
    8624:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    8628:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    862c:	e0ffeb03 	ldbu	r3,-84(fp)
    8630:	e0bfeb43 	ldbu	r2,-83(fp)
    8634:	1880022e 	bgeu	r3,r2,8640 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8638:	e0bfea8b 	ldhu	r2,-86(fp)
    863c:	103f6a1e 	bne	r2,zero,83e8 <__alt_data_end+0xfc0083e8>
                        USBTRACE2(" wptr:\t", wptr);
    8640:	e0bfeb03 	ldbu	r2,-84(fp)
    8644:	01402004 	movi	r5,128
    8648:	1009883a 	mov	r4,r2
    864c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8650:	e0bffc17 	ldw	r2,-16(fp)
    8654:	10c00217 	ldw	r3,8(r2)
    8658:	e0bffc17 	ldw	r2,-16(fp)
    865c:	10800303 	ldbu	r2,12(r2)
    8660:	11003fcc 	andi	r4,r2,255
    8664:	e0bffc17 	ldw	r2,-16(fp)
    8668:	10800643 	ldbu	r2,25(r2)
    866c:	11403fcc 	andi	r5,r2,255
    8670:	e1bfeb03 	ldbu	r6,-84(fp)
    8674:	e0bfeb84 	addi	r2,fp,-82
    8678:	d8800015 	stw	r2,0(sp)
    867c:	300f883a 	mov	r7,r6
    8680:	280d883a 	mov	r6,r5
    8684:	200b883a 	mov	r5,r4
    8688:	1809883a 	mov	r4,r3
    868c:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    8690:	e0bfea05 	stb	r2,-88(fp)
    8694:	e0bfea03 	ldbu	r2,-88(fp)
    8698:	1004c03a 	cmpne	r2,r2,zero
    869c:	10803fcc 	andi	r2,r2,255
    86a0:	1000021e 	bne	r2,zero,86ac <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    86a4:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    86a8:	003f4f06 	br	83e8 <__alt_data_end+0xfc0083e8>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    86ac:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    86b0:	e0bfea03 	ldbu	r2,-88(fp)
}
    86b4:	e037883a 	mov	sp,fp
    86b8:	dfc00117 	ldw	ra,4(sp)
    86bc:	df000017 	ldw	fp,0(sp)
    86c0:	dec00204 	addi	sp,sp,8
    86c4:	f800283a 	ret

000086c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    86c8:	defffb04 	addi	sp,sp,-20
    86cc:	df000415 	stw	fp,16(sp)
    86d0:	df000404 	addi	fp,sp,16
    86d4:	e13ffd15 	stw	r4,-12(fp)
    86d8:	e17ffe15 	stw	r5,-8(fp)
    86dc:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    86e0:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    86e4:	e0bffe17 	ldw	r2,-8(fp)
    86e8:	10800003 	ldbu	r2,0(r2)
    86ec:	108003cc 	andi	r2,r2,15
    86f0:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    86f4:	e0bffc43 	ldbu	r2,-15(fp)
    86f8:	1080030c 	andi	r2,r2,12
    86fc:	10800120 	cmpeqi	r2,r2,4
    8700:	1000021e 	bne	r2,zero,870c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8704:	e0bffc03 	ldbu	r2,-16(fp)
    8708:	00003b06 	br	87f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    870c:	e0bffc43 	ldbu	r2,-15(fp)
    8710:	10c00160 	cmpeqi	r3,r2,5
    8714:	18002e1e 	bne	r3,zero,87d0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    8718:	10c00188 	cmpgei	r3,r2,6
    871c:	1800031e 	bne	r3,zero,872c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8720:	10800120 	cmpeqi	r2,r2,4
    8724:	1000061e 	bne	r2,zero,8740 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8728:	00003206 	br	87f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    872c:	10c001a0 	cmpeqi	r3,r2,6
    8730:	1800181e 	bne	r3,zero,8794 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8734:	108001e0 	cmpeqi	r2,r2,7
    8738:	1000011e 	bne	r2,zero,8740 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    873c:	00002d06 	br	87f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8740:	e0bfff17 	ldw	r2,-4(fp)
    8744:	10c00044 	addi	r3,r2,1
    8748:	e0ffff15 	stw	r3,-4(fp)
    874c:	e0fffe17 	ldw	r3,-8(fp)
    8750:	18c00043 	ldbu	r3,1(r3)
    8754:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8758:	e0bfff17 	ldw	r2,-4(fp)
    875c:	10c00044 	addi	r3,r2,1
    8760:	e0ffff15 	stw	r3,-4(fp)
    8764:	e0fffe17 	ldw	r3,-8(fp)
    8768:	18c00083 	ldbu	r3,2(r3)
    876c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8770:	e0bfff17 	ldw	r2,-4(fp)
    8774:	10c00044 	addi	r3,r2,1
    8778:	e0ffff15 	stw	r3,-4(fp)
    877c:	e0fffe17 	ldw	r3,-8(fp)
    8780:	18c000c3 	ldbu	r3,3(r3)
    8784:	10c00005 	stb	r3,0(r2)
                rc = 3;
    8788:	008000c4 	movi	r2,3
    878c:	e0bffc05 	stb	r2,-16(fp)
                break;
    8790:	00001806 	br	87f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    8794:	e0bfff17 	ldw	r2,-4(fp)
    8798:	10c00044 	addi	r3,r2,1
    879c:	e0ffff15 	stw	r3,-4(fp)
    87a0:	e0fffe17 	ldw	r3,-8(fp)
    87a4:	18c00043 	ldbu	r3,1(r3)
    87a8:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    87ac:	e0bfff17 	ldw	r2,-4(fp)
    87b0:	10c00044 	addi	r3,r2,1
    87b4:	e0ffff15 	stw	r3,-4(fp)
    87b8:	e0fffe17 	ldw	r3,-8(fp)
    87bc:	18c00083 	ldbu	r3,2(r3)
    87c0:	10c00005 	stb	r3,0(r2)
                rc = 2;
    87c4:	00800084 	movi	r2,2
    87c8:	e0bffc05 	stb	r2,-16(fp)
                break;
    87cc:	00000906 	br	87f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    87d0:	e0bfff17 	ldw	r2,-4(fp)
    87d4:	10c00044 	addi	r3,r2,1
    87d8:	e0ffff15 	stw	r3,-4(fp)
    87dc:	e0fffe17 	ldw	r3,-8(fp)
    87e0:	18c00043 	ldbu	r3,1(r3)
    87e4:	10c00005 	stb	r3,0(r2)
                rc = 1;
    87e8:	00800044 	movi	r2,1
    87ec:	e0bffc05 	stb	r2,-16(fp)
                break;
    87f0:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    87f4:	e0bffc03 	ldbu	r2,-16(fp)
}
    87f8:	e037883a 	mov	sp,fp
    87fc:	df000017 	ldw	fp,0(sp)
    8800:	dec00104 	addi	sp,sp,4
    8804:	f800283a 	ret

00008808 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    8808:	defffb04 	addi	sp,sp,-20
    880c:	dfc00415 	stw	ra,16(sp)
    8810:	df000315 	stw	fp,12(sp)
    8814:	df000304 	addi	fp,sp,12
    8818:	e13ffd15 	stw	r4,-12(fp)
    881c:	e17ffe15 	stw	r5,-8(fp)
    8820:	3005883a 	mov	r2,r6
    8824:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    8828:	e0bffd17 	ldw	r2,-12(fp)
    882c:	1009883a 	mov	r4,r2
    8830:	0004ef00 	call	4ef0 <_ZN13USBReadParserC1Ev>
    8834:	008000b4 	movhi	r2,2
    8838:	109ced04 	addi	r2,r2,29620
    883c:	e0fffd17 	ldw	r3,-12(fp)
    8840:	18800015 	stw	r2,0(r3)
    8844:	e0bffd17 	ldw	r2,-12(fp)
    8848:	e0fffe17 	ldw	r3,-8(fp)
    884c:	10c00115 	stw	r3,4(r2)
    8850:	e0bffd17 	ldw	r2,-12(fp)
    8854:	10800204 	addi	r2,r2,8
    8858:	1009883a 	mov	r4,r2
    885c:	00047e00 	call	47e0 <_ZN16MultiValueBufferC1Ev>
    8860:	e0bffd17 	ldw	r2,-12(fp)
    8864:	10800404 	addi	r2,r2,16
    8868:	1009883a 	mov	r4,r2
    886c:	00048400 	call	4840 <_ZN20MultiByteValueParserC1Ev>
    8870:	e0bffd17 	ldw	r2,-12(fp)
    8874:	10800604 	addi	r2,r2,24
    8878:	1009883a 	mov	r4,r2
    887c:	00048fc0 	call	48fc <_ZN11ByteSkipperC1Ev>
    8880:	e0bffd17 	ldw	r2,-12(fp)
    8884:	10000c05 	stb	zero,48(r2)
    8888:	e0bffd17 	ldw	r2,-12(fp)
    888c:	10000c45 	stb	zero,49(r2)
    8890:	e0bffd17 	ldw	r2,-12(fp)
    8894:	10000c85 	stb	zero,50(r2)
    8898:	e0bffd17 	ldw	r2,-12(fp)
    889c:	10000cc5 	stb	zero,51(r2)
    88a0:	e0bffd17 	ldw	r2,-12(fp)
    88a4:	e0ffff03 	ldbu	r3,-4(fp)
    88a8:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    88ac:	e0bffd17 	ldw	r2,-12(fp)
    88b0:	10c00804 	addi	r3,r2,32
    88b4:	e0bffd17 	ldw	r2,-12(fp)
    88b8:	19803fcc 	andi	r6,r3,255
    88bc:	11000243 	ldbu	r4,9(r2)
    88c0:	2008703a 	and	r4,r4,zero
    88c4:	200b883a 	mov	r5,r4
    88c8:	3009883a 	mov	r4,r6
    88cc:	2908b03a 	or	r4,r5,r4
    88d0:	11000245 	stb	r4,9(r2)
    88d4:	1808d23a 	srli	r4,r3,8
    88d8:	21803fcc 	andi	r6,r4,255
    88dc:	11000283 	ldbu	r4,10(r2)
    88e0:	2008703a 	and	r4,r4,zero
    88e4:	200b883a 	mov	r5,r4
    88e8:	3009883a 	mov	r4,r6
    88ec:	2908b03a 	or	r4,r5,r4
    88f0:	11000285 	stb	r4,10(r2)
    88f4:	1808d43a 	srli	r4,r3,16
    88f8:	21803fcc 	andi	r6,r4,255
    88fc:	110002c3 	ldbu	r4,11(r2)
    8900:	2008703a 	and	r4,r4,zero
    8904:	200b883a 	mov	r5,r4
    8908:	3009883a 	mov	r4,r6
    890c:	2908b03a 	or	r4,r5,r4
    8910:	110002c5 	stb	r4,11(r2)
    8914:	180ad63a 	srli	r5,r3,24
    8918:	10c00303 	ldbu	r3,12(r2)
    891c:	1806703a 	and	r3,r3,zero
    8920:	1809883a 	mov	r4,r3
    8924:	2807883a 	mov	r3,r5
    8928:	20c6b03a 	or	r3,r4,r3
    892c:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8930:	e0bffd17 	ldw	r2,-12(fp)
    8934:	10c00404 	addi	r3,r2,16
    8938:	e0bffd17 	ldw	r2,-12(fp)
    893c:	10800204 	addi	r2,r2,8
    8940:	100b883a 	mov	r5,r2
    8944:	1809883a 	mov	r4,r3
    8948:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    894c:	e0bffd17 	ldw	r2,-12(fp)
    8950:	10c00604 	addi	r3,r2,24
    8954:	e0bffd17 	ldw	r2,-12(fp)
    8958:	10800204 	addi	r2,r2,8
    895c:	100b883a 	mov	r5,r2
    8960:	1809883a 	mov	r4,r3
    8964:	00049380 	call	4938 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    8968:	0001883a 	nop
    896c:	e037883a 	mov	sp,fp
    8970:	dfc00117 	ldw	ra,4(sp)
    8974:	df000017 	ldw	fp,0(sp)
    8978:	dec00204 	addi	sp,sp,8
    897c:	f800283a 	ret

00008980 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    8980:	defff804 	addi	sp,sp,-32
    8984:	dfc00715 	stw	ra,28(sp)
    8988:	df000615 	stw	fp,24(sp)
    898c:	df000604 	addi	fp,sp,24
    8990:	e13ffc15 	stw	r4,-16(fp)
    8994:	2805883a 	mov	r2,r5
    8998:	e1bffe15 	stw	r6,-8(fp)
    899c:	e1ffff15 	stw	r7,-4(fp)
    89a0:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    89a4:	e0bffd0b 	ldhu	r2,-12(fp)
    89a8:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    89ac:	e0bffe17 	ldw	r2,-8(fp)
    89b0:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    89b4:	e0bffa0b 	ldhu	r2,-24(fp)
    89b8:	10bfffcc 	andi	r2,r2,65535
    89bc:	10000a26 	beq	r2,zero,89e8 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    89c0:	e0bffb04 	addi	r2,fp,-20
    89c4:	e1bffa04 	addi	r6,fp,-24
    89c8:	100b883a 	mov	r5,r2
    89cc:	e13ffc17 	ldw	r4,-16(fp)
    89d0:	00089fc0 	call	89fc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    89d4:	1080005c 	xori	r2,r2,1
    89d8:	10803fcc 	andi	r2,r2,255
    89dc:	1000011e 	bne	r2,zero,89e4 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    89e0:	003ff406 	br	89b4 <__alt_data_end+0xfc0089b4>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    89e4:	0001883a 	nop
}
    89e8:	e037883a 	mov	sp,fp
    89ec:	dfc00117 	ldw	ra,4(sp)
    89f0:	df000017 	ldw	fp,0(sp)
    89f4:	dec00204 	addi	sp,sp,8
    89f8:	f800283a 	ret

000089fc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    89fc:	defff604 	addi	sp,sp,-40
    8a00:	dfc00915 	stw	ra,36(sp)
    8a04:	df000815 	stw	fp,32(sp)
    8a08:	df000804 	addi	fp,sp,32
    8a0c:	e13ffc15 	stw	r4,-16(fp)
    8a10:	e17ffd15 	stw	r5,-12(fp)
    8a14:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8a18:	e0bffc17 	ldw	r2,-16(fp)
    8a1c:	10800804 	addi	r2,r2,32
    8a20:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8a24:	e0bffc17 	ldw	r2,-16(fp)
    8a28:	10800804 	addi	r2,r2,32
    8a2c:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8a30:	e0bffc17 	ldw	r2,-16(fp)
    8a34:	10800c03 	ldbu	r2,48(r2)
    8a38:	10803fcc 	andi	r2,r2,255
    8a3c:	10c00168 	cmpgeui	r3,r2,5
    8a40:	1801411e 	bne	r3,zero,8f48 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8a44:	100690ba 	slli	r3,r2,2
    8a48:	00800074 	movhi	r2,1
    8a4c:	10a29704 	addi	r2,r2,-30116
    8a50:	1885883a 	add	r2,r3,r2
    8a54:	10800017 	ldw	r2,0(r2)
    8a58:	1000683a 	jmp	r2
    8a5c:	00008a70 	cmpltui	zero,zero,553
    8a60:	00008aa4 	muli	zero,zero,554
    8a64:	00008b2c 	andhi	zero,zero,556
    8a68:	00008bc0 	call	8bc <_ZN3USB14getEpInfoEntryEhh+0xdc>
    8a6c:	00008c2c 	andhi	zero,zero,560
                case 0:
                        theBuffer.valueSize = 2;
    8a70:	e0bffc17 	ldw	r2,-16(fp)
    8a74:	00c00084 	movi	r3,2
    8a78:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8a7c:	e0bffc17 	ldw	r2,-16(fp)
    8a80:	10c00404 	addi	r3,r2,16
    8a84:	e0bffc17 	ldw	r2,-16(fp)
    8a88:	10800204 	addi	r2,r2,8
    8a8c:	100b883a 	mov	r5,r2
    8a90:	1809883a 	mov	r4,r3
    8a94:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    8a98:	e0bffc17 	ldw	r2,-16(fp)
    8a9c:	00c00044 	movi	r3,1
    8aa0:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    8aa4:	e0bffc17 	ldw	r2,-16(fp)
    8aa8:	10800404 	addi	r2,r2,16
    8aac:	e1bffe17 	ldw	r6,-8(fp)
    8ab0:	e17ffd17 	ldw	r5,-12(fp)
    8ab4:	1009883a 	mov	r4,r2
    8ab8:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8abc:	1080005c 	xori	r2,r2,1
    8ac0:	10803fcc 	andi	r2,r2,255
    8ac4:	10000226 	beq	r2,zero,8ad0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    8ac8:	0005883a 	mov	r2,zero
    8acc:	00011f06 	br	8f4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    8ad0:	e0bffc17 	ldw	r2,-16(fp)
    8ad4:	10c00217 	ldw	r3,8(r2)
    8ad8:	1806d23a 	srli	r3,r3,8
    8adc:	10800317 	ldw	r2,12(r2)
    8ae0:	10803fcc 	andi	r2,r2,255
    8ae4:	1004963a 	slli	r2,r2,24
    8ae8:	10c4b03a 	or	r2,r2,r3
    8aec:	10c00003 	ldbu	r3,0(r2)
    8af0:	e0bffc17 	ldw	r2,-16(fp)
    8af4:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    8af8:	e0bffc17 	ldw	r2,-16(fp)
    8afc:	10c00217 	ldw	r3,8(r2)
    8b00:	1806d23a 	srli	r3,r3,8
    8b04:	10800317 	ldw	r2,12(r2)
    8b08:	10803fcc 	andi	r2,r2,255
    8b0c:	1004963a 	slli	r2,r2,24
    8b10:	10c4b03a 	or	r2,r2,r3
    8b14:	10c00043 	ldbu	r3,1(r2)
    8b18:	e0bffc17 	ldw	r2,-16(fp)
    8b1c:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8b20:	e0bffc17 	ldw	r2,-16(fp)
    8b24:	00c00084 	movi	r3,2
    8b28:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8b2c:	e0bffc17 	ldw	r2,-16(fp)
    8b30:	10800804 	addi	r2,r2,32
    8b34:	10c00084 	addi	r3,r2,2
    8b38:	e0bffc17 	ldw	r2,-16(fp)
    8b3c:	19803fcc 	andi	r6,r3,255
    8b40:	11000243 	ldbu	r4,9(r2)
    8b44:	2008703a 	and	r4,r4,zero
    8b48:	200b883a 	mov	r5,r4
    8b4c:	3009883a 	mov	r4,r6
    8b50:	2908b03a 	or	r4,r5,r4
    8b54:	11000245 	stb	r4,9(r2)
    8b58:	1808d23a 	srli	r4,r3,8
    8b5c:	21803fcc 	andi	r6,r4,255
    8b60:	11000283 	ldbu	r4,10(r2)
    8b64:	2008703a 	and	r4,r4,zero
    8b68:	200b883a 	mov	r5,r4
    8b6c:	3009883a 	mov	r4,r6
    8b70:	2908b03a 	or	r4,r5,r4
    8b74:	11000285 	stb	r4,10(r2)
    8b78:	1808d43a 	srli	r4,r3,16
    8b7c:	21803fcc 	andi	r6,r4,255
    8b80:	110002c3 	ldbu	r4,11(r2)
    8b84:	2008703a 	and	r4,r4,zero
    8b88:	200b883a 	mov	r5,r4
    8b8c:	3009883a 	mov	r4,r6
    8b90:	2908b03a 	or	r4,r5,r4
    8b94:	110002c5 	stb	r4,11(r2)
    8b98:	180ad63a 	srli	r5,r3,24
    8b9c:	10c00303 	ldbu	r3,12(r2)
    8ba0:	1806703a 	and	r3,r3,zero
    8ba4:	1809883a 	mov	r4,r3
    8ba8:	2807883a 	mov	r3,r5
    8bac:	20c6b03a 	or	r3,r4,r3
    8bb0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    8bb4:	e0bffc17 	ldw	r2,-16(fp)
    8bb8:	00c000c4 	movi	r3,3
    8bbc:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8bc0:	e0bffc17 	ldw	r2,-16(fp)
    8bc4:	10800c83 	ldbu	r2,50(r2)
    8bc8:	10803fcc 	andi	r2,r2,255
    8bcc:	10c00120 	cmpeqi	r3,r2,4
    8bd0:	1800021e 	bne	r3,zero,8bdc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    8bd4:	10800148 	cmpgei	r2,r2,5
    8bd8:	00000306 	br	8be8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    8bdc:	e0bffc17 	ldw	r2,-16(fp)
    8be0:	10000d45 	stb	zero,53(r2)
                                        break;
    8be4:	00000106 	br	8bec <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    8be8:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    8bec:	e0bffc17 	ldw	r2,-16(fp)
    8bf0:	10800c43 	ldbu	r2,49(r2)
    8bf4:	10bfff84 	addi	r2,r2,-2
    8bf8:	1007883a 	mov	r3,r2
    8bfc:	e0bffc17 	ldw	r2,-16(fp)
    8c00:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8c04:	e0bffc17 	ldw	r2,-16(fp)
    8c08:	10c00404 	addi	r3,r2,16
    8c0c:	e0bffc17 	ldw	r2,-16(fp)
    8c10:	10800204 	addi	r2,r2,8
    8c14:	100b883a 	mov	r5,r2
    8c18:	1809883a 	mov	r4,r3
    8c1c:	000487c0 	call	487c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8c20:	e0bffc17 	ldw	r2,-16(fp)
    8c24:	00c00104 	movi	r3,4
    8c28:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8c2c:	e0bffc17 	ldw	r2,-16(fp)
    8c30:	10800c83 	ldbu	r2,50(r2)
    8c34:	10803fcc 	andi	r2,r2,255
    8c38:	10c00120 	cmpeqi	r3,r2,4
    8c3c:	1800141e 	bne	r3,zero,8c90 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8c40:	10c00160 	cmpeqi	r3,r2,5
    8c44:	18005a1e 	bne	r3,zero,8db0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8c48:	108000a0 	cmpeqi	r2,r2,2
    8c4c:	10008526 	beq	r2,zero,8e64 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8c50:	e0bffc17 	ldw	r2,-16(fp)
    8c54:	10800404 	addi	r2,r2,16
    8c58:	e1bffe17 	ldw	r6,-8(fp)
    8c5c:	e17ffd17 	ldw	r5,-12(fp)
    8c60:	1009883a 	mov	r4,r2
    8c64:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8c68:	1080005c 	xori	r2,r2,1
    8c6c:	10803fcc 	andi	r2,r2,255
    8c70:	10000226 	beq	r2,zero,8c7c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8c74:	0005883a 	mov	r2,zero
    8c78:	0000b406 	br	8f4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8c7c:	e0bffa17 	ldw	r2,-24(fp)
    8c80:	10c00143 	ldbu	r3,5(r2)
    8c84:	e0bffc17 	ldw	r2,-16(fp)
    8c88:	10c00d85 	stb	r3,54(r2)
                                        break;
    8c8c:	00008b06 	br	8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8c90:	e0bffc17 	ldw	r2,-16(fp)
    8c94:	10800404 	addi	r2,r2,16
    8c98:	e1bffe17 	ldw	r6,-8(fp)
    8c9c:	e17ffd17 	ldw	r5,-12(fp)
    8ca0:	1009883a 	mov	r4,r2
    8ca4:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8ca8:	1080005c 	xori	r2,r2,1
    8cac:	10803fcc 	andi	r2,r2,255
    8cb0:	10000226 	beq	r2,zero,8cbc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    8cb4:	0005883a 	mov	r2,zero
    8cb8:	0000a406 	br	8f4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    8cbc:	e0bffb17 	ldw	r2,-20(fp)
    8cc0:	10800083 	ldbu	r2,2(r2)
    8cc4:	10803fcc 	andi	r2,r2,255
    8cc8:	01402004 	movi	r5,128
    8ccc:	1009883a 	mov	r4,r2
    8cd0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    8cd4:	e0bffb17 	ldw	r2,-20(fp)
    8cd8:	108000c3 	ldbu	r2,3(r2)
    8cdc:	10803fcc 	andi	r2,r2,255
    8ce0:	01402004 	movi	r5,128
    8ce4:	1009883a 	mov	r4,r2
    8ce8:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    8cec:	e0bffb17 	ldw	r2,-20(fp)
    8cf0:	10800103 	ldbu	r2,4(r2)
    8cf4:	10803fcc 	andi	r2,r2,255
    8cf8:	01402004 	movi	r5,128
    8cfc:	1009883a 	mov	r4,r2
    8d00:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8d04:	e0bffb17 	ldw	r2,-20(fp)
    8d08:	10800143 	ldbu	r2,5(r2)
    8d0c:	10803fcc 	andi	r2,r2,255
    8d10:	01402004 	movi	r5,128
    8d14:	1009883a 	mov	r4,r2
    8d18:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8d1c:	e0bffb17 	ldw	r2,-20(fp)
    8d20:	10800183 	ldbu	r2,6(r2)
    8d24:	10803fcc 	andi	r2,r2,255
    8d28:	01402004 	movi	r5,128
    8d2c:	1009883a 	mov	r4,r2
    8d30:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8d34:	e0bffb17 	ldw	r2,-20(fp)
    8d38:	108001c3 	ldbu	r2,7(r2)
    8d3c:	10803fcc 	andi	r2,r2,255
    8d40:	01402004 	movi	r5,128
    8d44:	1009883a 	mov	r4,r2
    8d48:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8d4c:	e0bffc17 	ldw	r2,-16(fp)
    8d50:	10800d03 	ldbu	r2,52(r2)
    8d54:	10803fcc 	andi	r2,r2,255
    8d58:	10000a26 	beq	r2,zero,8d84 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8d5c:	e0bffb17 	ldw	r2,-20(fp)
    8d60:	10800143 	ldbu	r2,5(r2)
    8d64:	10803fcc 	andi	r2,r2,255
    8d68:	10800058 	cmpnei	r2,r2,1
    8d6c:	10004e1e 	bne	r2,zero,8ea8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8d70:	e0bffb17 	ldw	r2,-20(fp)
    8d74:	10800183 	ldbu	r2,6(r2)
    8d78:	10803fcc 	andi	r2,r2,255
    8d7c:	108000d8 	cmpnei	r2,r2,3
    8d80:	1000491e 	bne	r2,zero,8ea8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    8d84:	e0bffc17 	ldw	r2,-16(fp)
    8d88:	00c00044 	movi	r3,1
    8d8c:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8d90:	e0bffc17 	ldw	r2,-16(fp)
    8d94:	10800cc3 	ldbu	r2,51(r2)
    8d98:	10803fcc 	andi	r2,r2,255
    8d9c:	108000a8 	cmpgeui	r2,r2,2
    8da0:	1000431e 	bne	r2,zero,8eb0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    8da4:	e0bffc17 	ldw	r2,-16(fp)
    8da8:	10000cc5 	stb	zero,51(r2)
                                        break;
    8dac:	00004006 	br	8eb0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8db0:	e0bffc17 	ldw	r2,-16(fp)
    8db4:	10800404 	addi	r2,r2,16
    8db8:	e1bffe17 	ldw	r6,-8(fp)
    8dbc:	e17ffd17 	ldw	r5,-12(fp)
    8dc0:	1009883a 	mov	r4,r2
    8dc4:	00067a80 	call	67a8 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8dc8:	1080005c 	xori	r2,r2,1
    8dcc:	10803fcc 	andi	r2,r2,255
    8dd0:	10000226 	beq	r2,zero,8ddc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    8dd4:	0005883a 	mov	r2,zero
    8dd8:	00005c06 	br	8f4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    8ddc:	e0bffc17 	ldw	r2,-16(fp)
    8de0:	10800d43 	ldbu	r2,53(r2)
    8de4:	10803fcc 	andi	r2,r2,255
    8de8:	10003326 	beq	r2,zero,8eb8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    8dec:	e0bffc17 	ldw	r2,-16(fp)
    8df0:	10800cc3 	ldbu	r2,51(r2)
    8df4:	10803fcc 	andi	r2,r2,255
    8df8:	108000a8 	cmpgeui	r2,r2,2
    8dfc:	10002e1e 	bne	r2,zero,8eb8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8e00:	e0bffc17 	ldw	r2,-16(fp)
    8e04:	10800117 	ldw	r2,4(r2)
    8e08:	10800017 	ldw	r2,0(r2)
    8e0c:	10800017 	ldw	r2,0(r2)
    8e10:	e0fffc17 	ldw	r3,-16(fp)
    8e14:	19000117 	ldw	r4,4(r3)
    8e18:	e0fffc17 	ldw	r3,-16(fp)
    8e1c:	18c00d83 	ldbu	r3,54(r3)
    8e20:	19403fcc 	andi	r5,r3,255
    8e24:	e0fffc17 	ldw	r3,-16(fp)
    8e28:	18c00804 	addi	r3,r3,32
    8e2c:	d8c00115 	stw	r3,4(sp)
    8e30:	d8000015 	stw	zero,0(sp)
    8e34:	000f883a 	mov	r7,zero
    8e38:	000d883a 	mov	r6,zero
    8e3c:	103ee83a 	callr	r2
    8e40:	10803fcc 	andi	r2,r2,255
    8e44:	10001c26 	beq	r2,zero,8eb8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8e48:	e0bffc17 	ldw	r2,-16(fp)
    8e4c:	10800cc3 	ldbu	r2,51(r2)
    8e50:	10800044 	addi	r2,r2,1
    8e54:	1007883a 	mov	r3,r2
    8e58:	e0bffc17 	ldw	r2,-16(fp)
    8e5c:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8e60:	00001506 	br	8eb8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8e64:	e0bffc17 	ldw	r2,-16(fp)
    8e68:	10c00604 	addi	r3,r2,24
    8e6c:	e0bffc17 	ldw	r2,-16(fp)
    8e70:	10800c43 	ldbu	r2,49(r2)
    8e74:	10803fcc 	andi	r2,r2,255
    8e78:	10bfff84 	addi	r2,r2,-2
    8e7c:	10bfffcc 	andi	r2,r2,65535
    8e80:	100f883a 	mov	r7,r2
    8e84:	e1bffe17 	ldw	r6,-8(fp)
    8e88:	e17ffd17 	ldw	r5,-12(fp)
    8e8c:	1809883a 	mov	r4,r3
    8e90:	00049a00 	call	49a0 <_ZN11ByteSkipper4SkipEPPhPtt>
    8e94:	1080005c 	xori	r2,r2,1
    8e98:	10803fcc 	andi	r2,r2,255
    8e9c:	10000726 	beq	r2,zero,8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8ea0:	0005883a 	mov	r2,zero
    8ea4:	00002906 	br	8f4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8ea8:	0001883a 	nop
    8eac:	00000306 	br	8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8eb0:	0001883a 	nop
    8eb4:	00000106 	br	8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8eb8:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8ebc:	e0bffc17 	ldw	r2,-16(fp)
    8ec0:	10c00804 	addi	r3,r2,32
    8ec4:	e0bffc17 	ldw	r2,-16(fp)
    8ec8:	19803fcc 	andi	r6,r3,255
    8ecc:	11000243 	ldbu	r4,9(r2)
    8ed0:	2008703a 	and	r4,r4,zero
    8ed4:	200b883a 	mov	r5,r4
    8ed8:	3009883a 	mov	r4,r6
    8edc:	2908b03a 	or	r4,r5,r4
    8ee0:	11000245 	stb	r4,9(r2)
    8ee4:	1808d23a 	srli	r4,r3,8
    8ee8:	21803fcc 	andi	r6,r4,255
    8eec:	11000283 	ldbu	r4,10(r2)
    8ef0:	2008703a 	and	r4,r4,zero
    8ef4:	200b883a 	mov	r5,r4
    8ef8:	3009883a 	mov	r4,r6
    8efc:	2908b03a 	or	r4,r5,r4
    8f00:	11000285 	stb	r4,10(r2)
    8f04:	1808d43a 	srli	r4,r3,16
    8f08:	21803fcc 	andi	r6,r4,255
    8f0c:	110002c3 	ldbu	r4,11(r2)
    8f10:	2008703a 	and	r4,r4,zero
    8f14:	200b883a 	mov	r5,r4
    8f18:	3009883a 	mov	r4,r6
    8f1c:	2908b03a 	or	r4,r5,r4
    8f20:	110002c5 	stb	r4,11(r2)
    8f24:	180ad63a 	srli	r5,r3,24
    8f28:	10c00303 	ldbu	r3,12(r2)
    8f2c:	1806703a 	and	r3,r3,zero
    8f30:	1809883a 	mov	r4,r3
    8f34:	2807883a 	mov	r3,r5
    8f38:	20c6b03a 	or	r3,r4,r3
    8f3c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8f40:	e0bffc17 	ldw	r2,-16(fp)
    8f44:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8f48:	00800044 	movi	r2,1
}
    8f4c:	e037883a 	mov	sp,fp
    8f50:	dfc00117 	ldw	ra,4(sp)
    8f54:	df000017 	ldw	fp,0(sp)
    8f58:	dec00204 	addi	sp,sp,8
    8f5c:	f800283a 	ret

00008f60 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8f60:	defff904 	addi	sp,sp,-28
    8f64:	df000615 	stw	fp,24(sp)
    8f68:	df000604 	addi	fp,sp,24
    8f6c:	e13ffb15 	stw	r4,-20(fp)
    8f70:	3009883a 	mov	r4,r6
    8f74:	3807883a 	mov	r3,r7
    8f78:	e0800117 	ldw	r2,4(fp)
    8f7c:	e17ffc05 	stb	r5,-16(fp)
    8f80:	e13ffd05 	stb	r4,-12(fp)
    8f84:	e0fffe05 	stb	r3,-8(fp)
    8f88:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8f8c:	e0800217 	ldw	r2,8(fp)
    8f90:	10c000c3 	ldbu	r3,3(r2)
    8f94:	e0bffb17 	ldw	r2,-20(fp)
    8f98:	10800483 	ldbu	r2,18(r2)
    8f9c:	1884703a 	and	r2,r3,r2
    8fa0:	10803fcc 	andi	r2,r2,255
    8fa4:	10800098 	cmpnei	r2,r2,2
    8fa8:	10001f1e 	bne	r2,zero,9028 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8fac:	e0800217 	ldw	r2,8(fp)
    8fb0:	10800083 	ldbu	r2,2(r2)
    8fb4:	10803fcc 	andi	r2,r2,255
    8fb8:	1080201c 	xori	r2,r2,128
    8fbc:	10bfe004 	addi	r2,r2,-128
    8fc0:	1000020e 	bge	r2,zero,8fcc <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8fc4:	00800044 	movi	r2,1
    8fc8:	00000106 	br	8fd0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8fcc:	00800084 	movi	r2,2
    8fd0:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8fd4:	e0fffa03 	ldbu	r3,-24(fp)
    8fd8:	e0800217 	ldw	r2,8(fp)
    8fdc:	10800083 	ldbu	r2,2(r2)
    8fe0:	108003cc 	andi	r2,r2,15
    8fe4:	100b883a 	mov	r5,r2
    8fe8:	e13ffb17 	ldw	r4,-20(fp)
    8fec:	1805883a 	mov	r2,r3
    8ff0:	1085883a 	add	r2,r2,r2
    8ff4:	10c5883a 	add	r2,r2,r3
    8ff8:	2085883a 	add	r2,r4,r2
    8ffc:	108004c4 	addi	r2,r2,19
    9000:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    9004:	e0800217 	ldw	r2,8(fp)
    9008:	10c00103 	ldbu	r3,4(r2)
    900c:	10800143 	ldbu	r2,5(r2)
    9010:	1004923a 	slli	r2,r2,8
    9014:	10c4b03a 	or	r2,r2,r3
    9018:	10bfffcc 	andi	r2,r2,65535
    901c:	10801070 	cmpltui	r2,r2,65
    9020:	10000d1e 	bne	r2,zero,9058 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    9024:	00000206 	br	9030 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    9028:	0005883a 	mov	r2,zero
    902c:	00001906 	br	9094 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    9030:	e0fffa03 	ldbu	r3,-24(fp)
    9034:	e13ffb17 	ldw	r4,-20(fp)
    9038:	1805883a 	mov	r2,r3
    903c:	1085883a 	add	r2,r2,r2
    9040:	10c5883a 	add	r2,r2,r3
    9044:	2085883a 	add	r2,r4,r2
    9048:	10800504 	addi	r2,r2,20
    904c:	00c01004 	movi	r3,64
    9050:	10c00005 	stb	r3,0(r2)
    9054:	00000e06 	br	9090 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    9058:	e0fffa03 	ldbu	r3,-24(fp)
    905c:	e0800217 	ldw	r2,8(fp)
    9060:	11000103 	ldbu	r4,4(r2)
    9064:	10800143 	ldbu	r2,5(r2)
    9068:	1004923a 	slli	r2,r2,8
    906c:	1104b03a 	or	r2,r2,r4
    9070:	100b883a 	mov	r5,r2
    9074:	e13ffb17 	ldw	r4,-20(fp)
    9078:	1805883a 	mov	r2,r3
    907c:	1085883a 	add	r2,r2,r2
    9080:	10c5883a 	add	r2,r2,r3
    9084:	2085883a 	add	r2,r4,r2
    9088:	10800504 	addi	r2,r2,20
    908c:	11400005 	stb	r5,0(r2)
        }

        return true;
    9090:	00800044 	movi	r2,1
}
    9094:	e037883a 	mov	sp,fp
    9098:	df000017 	ldw	fp,0(sp)
    909c:	dec00104 	addi	sp,sp,4
    90a0:	f800283a 	ret

000090a4 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    90a4:	213fff04 	addi	r4,r4,-4
    90a8:	0008f601 	jmpi	8f60 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

000090ac <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    90ac:	defffa04 	addi	sp,sp,-24
    90b0:	df000515 	stw	fp,20(sp)
    90b4:	df000504 	addi	fp,sp,20
    90b8:	e13ffb15 	stw	r4,-20(fp)
    90bc:	3009883a 	mov	r4,r6
    90c0:	3807883a 	mov	r3,r7
    90c4:	e0800117 	ldw	r2,4(fp)
    90c8:	e17ffc05 	stb	r5,-16(fp)
    90cc:	e13ffd05 	stb	r4,-12(fp)
    90d0:	e0fffe05 	stb	r3,-8(fp)
    90d4:	e0bfff05 	stb	r2,-4(fp)
                return true;
    90d8:	00800044 	movi	r2,1
        };
    90dc:	e037883a 	mov	sp,fp
    90e0:	df000017 	ldw	fp,0(sp)
    90e4:	dec00104 	addi	sp,sp,4
    90e8:	f800283a 	ret

000090ec <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    90ec:	defffe04 	addi	sp,sp,-8
    90f0:	df000115 	stw	fp,4(sp)
    90f4:	df000104 	addi	fp,sp,4
    90f8:	e13fff15 	stw	r4,-4(fp)
    90fc:	e0bfff17 	ldw	r2,-4(fp)
    9100:	10800d83 	ldbu	r2,54(r2)
    9104:	e037883a 	mov	sp,fp
    9108:	df000017 	ldw	fp,0(sp)
    910c:	dec00104 	addi	sp,sp,4
    9110:	f800283a 	ret

00009114 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    9114:	defffe04 	addi	sp,sp,-8
    9118:	df000115 	stw	fp,4(sp)
    911c:	df000104 	addi	fp,sp,4
    9120:	e13fff15 	stw	r4,-4(fp)
    9124:	e0bfff17 	ldw	r2,-4(fp)
    9128:	10800cc3 	ldbu	r2,51(r2)
    912c:	e037883a 	mov	sp,fp
    9130:	df000017 	ldw	fp,0(sp)
    9134:	dec00104 	addi	sp,sp,4
    9138:	f800283a 	ret

0000913c <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    913c:	defffd04 	addi	sp,sp,-12
    9140:	df000215 	stw	fp,8(sp)
    9144:	df000204 	addi	fp,sp,8
    9148:	e13ffe15 	stw	r4,-8(fp)
    914c:	2805883a 	mov	r2,r5
    9150:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    9154:	e0bfff03 	ldbu	r2,-4(fp)
    9158:	10803c28 	cmpgeui	r2,r2,240
    915c:	1000031e 	bne	r2,zero,916c <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    9160:	e0bfff03 	ldbu	r2,-4(fp)
    9164:	1004d13a 	srli	r2,r2,4
    9168:	00000606 	br	9184 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    916c:	e0bfff03 	ldbu	r2,-4(fp)
    9170:	10c003cc 	andi	r3,r2,15
    9174:	008000b4 	movhi	r2,2
    9178:	109cd744 	addi	r2,r2,29533
    917c:	1885883a 	add	r2,r3,r2
    9180:	10800003 	ldbu	r2,0(r2)
        };
    9184:	e037883a 	mov	sp,fp
    9188:	df000017 	ldw	fp,0(sp)
    918c:	dec00104 	addi	sp,sp,4
    9190:	f800283a 	ret

00009194 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    9194:	defffd04 	addi	sp,sp,-12
    9198:	df000215 	stw	fp,8(sp)
    919c:	df000204 	addi	fp,sp,8
    91a0:	e13ffe15 	stw	r4,-8(fp)
    91a4:	2805883a 	mov	r2,r5
    91a8:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    91ac:	e0ffff03 	ldbu	r3,-4(fp)
    91b0:	008000b4 	movhi	r2,2
    91b4:	109cd344 	addi	r2,r2,29517
    91b8:	1885883a 	add	r2,r3,r2
    91bc:	10800003 	ldbu	r2,0(r2)
        };
    91c0:	e037883a 	mov	sp,fp
    91c4:	df000017 	ldw	fp,0(sp)
    91c8:	dec00104 	addi	sp,sp,4
    91cc:	f800283a 	ret

000091d0 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    91d0:	defffe04 	addi	sp,sp,-8
    91d4:	df000115 	stw	fp,4(sp)
    91d8:	df000104 	addi	fp,sp,4
    91dc:	e13fff15 	stw	r4,-4(fp)
    91e0:	e0bfff17 	ldw	r2,-4(fp)
    91e4:	10800303 	ldbu	r2,12(r2)
    91e8:	e037883a 	mov	sp,fp
    91ec:	df000017 	ldw	fp,0(sp)
    91f0:	dec00104 	addi	sp,sp,4
    91f4:	f800283a 	ret

000091f8 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    91f8:	defffe04 	addi	sp,sp,-8
    91fc:	df000115 	stw	fp,4(sp)
    9200:	df000104 	addi	fp,sp,4
    9204:	e13fff15 	stw	r4,-4(fp)
    9208:	008000b4 	movhi	r2,2
    920c:	109cf004 	addi	r2,r2,29632
    9210:	e0ffff17 	ldw	r3,-4(fp)
    9214:	18800015 	stw	r2,0(r3)
    9218:	0001883a 	nop
    921c:	e037883a 	mov	sp,fp
    9220:	df000017 	ldw	fp,0(sp)
    9224:	dec00104 	addi	sp,sp,4
    9228:	f800283a 	ret

0000922c <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    922c:	defffd04 	addi	sp,sp,-12
    9230:	df000215 	stw	fp,8(sp)
    9234:	df000204 	addi	fp,sp,8
    9238:	2005883a 	mov	r2,r4
    923c:	e17fff15 	stw	r5,-4(fp)
    9240:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    9244:	0001883a 	nop
    9248:	e037883a 	mov	sp,fp
    924c:	df000017 	ldw	fp,0(sp)
    9250:	dec00104 	addi	sp,sp,4
    9254:	f800283a 	ret

00009258 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    9258:	deffe204 	addi	sp,sp,-120
    925c:	dfc01d15 	stw	ra,116(sp)
    9260:	df001c15 	stw	fp,112(sp)
    9264:	df001c04 	addi	fp,sp,112
    9268:	e13ffd15 	stw	r4,-12(fp)
    926c:	2805883a 	mov	r2,r5
    9270:	e1bfff15 	stw	r6,-4(fp)
    9274:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    9278:	00801004 	movi	r2,64
    927c:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    9280:	e0bffd17 	ldw	r2,-12(fp)
    9284:	11000217 	ldw	r4,8(r2)
    9288:	e0bffd17 	ldw	r2,-12(fp)
    928c:	10800303 	ldbu	r2,12(r2)
    9290:	11403fcc 	andi	r5,r2,255
    9294:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    9298:	e0ffff17 	ldw	r3,-4(fp)
    929c:	d8c00715 	stw	r3,28(sp)
    92a0:	e0ffec84 	addi	r3,fp,-78
    92a4:	d8c00615 	stw	r3,24(sp)
    92a8:	00c01004 	movi	r3,64
    92ac:	d8c00515 	stw	r3,20(sp)
    92b0:	00c02004 	movi	r3,128
    92b4:	d8c00415 	stw	r3,16(sp)
    92b8:	d8800315 	stw	r2,12(sp)
    92bc:	00800884 	movi	r2,34
    92c0:	d8800215 	stw	r2,8(sp)
    92c4:	d8000115 	stw	zero,4(sp)
    92c8:	00800184 	movi	r2,6
    92cc:	d8800015 	stw	r2,0(sp)
    92d0:	01c02044 	movi	r7,129
    92d4:	000d883a 	mov	r6,zero
    92d8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    92dc:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    92e0:	e0bfec43 	ldbu	r2,-79(fp)
}
    92e4:	e037883a 	mov	sp,fp
    92e8:	dfc00117 	ldw	ra,4(sp)
    92ec:	df000017 	ldw	fp,0(sp)
    92f0:	dec00204 	addi	sp,sp,8
    92f4:	f800283a 	ret

000092f8 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    92f8:	defff004 	addi	sp,sp,-64
    92fc:	dfc00f15 	stw	ra,60(sp)
    9300:	df000e15 	stw	fp,56(sp)
    9304:	df000e04 	addi	fp,sp,56
    9308:	e13ffa15 	stw	r4,-24(fp)
    930c:	2811883a 	mov	r8,r5
    9310:	300b883a 	mov	r5,r6
    9314:	3809883a 	mov	r4,r7
    9318:	e0c00217 	ldw	r3,8(fp)
    931c:	e0800317 	ldw	r2,12(fp)
    9320:	e23ffb05 	stb	r8,-20(fp)
    9324:	e17ffc05 	stb	r5,-16(fp)
    9328:	e13ffd05 	stb	r4,-12(fp)
    932c:	e0fffe05 	stb	r3,-8(fp)
    9330:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    9334:	e0bffa17 	ldw	r2,-24(fp)
    9338:	12000217 	ldw	r8,8(r2)
    933c:	e0bffa17 	ldw	r2,-24(fp)
    9340:	10800303 	ldbu	r2,12(r2)
    9344:	12403fcc 	andi	r9,r2,255
    9348:	e2bffb03 	ldbu	r10,-20(fp)
    934c:	e0bffe03 	ldbu	r2,-8(fp)
    9350:	e0fffd03 	ldbu	r3,-12(fp)
    9354:	e13ffc03 	ldbu	r4,-16(fp)
    9358:	e17fff0b 	ldhu	r5,-4(fp)
    935c:	e1bfff0b 	ldhu	r6,-4(fp)
    9360:	d8000715 	stw	zero,28(sp)
    9364:	e1c00417 	ldw	r7,16(fp)
    9368:	d9c00615 	stw	r7,24(sp)
    936c:	d9800515 	stw	r6,20(sp)
    9370:	d9400415 	stw	r5,16(sp)
    9374:	d9000315 	stw	r4,12(sp)
    9378:	d8c00215 	stw	r3,8(sp)
    937c:	d8800115 	stw	r2,4(sp)
    9380:	00800244 	movi	r2,9
    9384:	d8800015 	stw	r2,0(sp)
    9388:	01c00844 	movi	r7,33
    938c:	500d883a 	mov	r6,r10
    9390:	480b883a 	mov	r5,r9
    9394:	4009883a 	mov	r4,r8
    9398:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    939c:	e037883a 	mov	sp,fp
    93a0:	dfc00117 	ldw	ra,4(sp)
    93a4:	df000017 	ldw	fp,0(sp)
    93a8:	dec00204 	addi	sp,sp,8
    93ac:	f800283a 	ret

000093b0 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    93b0:	defff004 	addi	sp,sp,-64
    93b4:	dfc00f15 	stw	ra,60(sp)
    93b8:	df000e15 	stw	fp,56(sp)
    93bc:	df000e04 	addi	fp,sp,56
    93c0:	e13ffa15 	stw	r4,-24(fp)
    93c4:	2811883a 	mov	r8,r5
    93c8:	300b883a 	mov	r5,r6
    93cc:	3809883a 	mov	r4,r7
    93d0:	e0c00217 	ldw	r3,8(fp)
    93d4:	e0800317 	ldw	r2,12(fp)
    93d8:	e23ffb05 	stb	r8,-20(fp)
    93dc:	e17ffc05 	stb	r5,-16(fp)
    93e0:	e13ffd05 	stb	r4,-12(fp)
    93e4:	e0fffe05 	stb	r3,-8(fp)
    93e8:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    93ec:	e0bffa17 	ldw	r2,-24(fp)
    93f0:	12000217 	ldw	r8,8(r2)
    93f4:	e0bffa17 	ldw	r2,-24(fp)
    93f8:	10800303 	ldbu	r2,12(r2)
    93fc:	12403fcc 	andi	r9,r2,255
    9400:	e2bffb03 	ldbu	r10,-20(fp)
    9404:	e0bffe03 	ldbu	r2,-8(fp)
    9408:	e0fffd03 	ldbu	r3,-12(fp)
    940c:	e13ffc03 	ldbu	r4,-16(fp)
    9410:	e17fff0b 	ldhu	r5,-4(fp)
    9414:	e1bfff0b 	ldhu	r6,-4(fp)
    9418:	d8000715 	stw	zero,28(sp)
    941c:	e1c00417 	ldw	r7,16(fp)
    9420:	d9c00615 	stw	r7,24(sp)
    9424:	d9800515 	stw	r6,20(sp)
    9428:	d9400415 	stw	r5,16(sp)
    942c:	d9000315 	stw	r4,12(sp)
    9430:	d8c00215 	stw	r3,8(sp)
    9434:	d8800115 	stw	r2,4(sp)
    9438:	00800044 	movi	r2,1
    943c:	d8800015 	stw	r2,0(sp)
    9440:	01c02844 	movi	r7,161
    9444:	500d883a 	mov	r6,r10
    9448:	480b883a 	mov	r5,r9
    944c:	4009883a 	mov	r4,r8
    9450:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9454:	e037883a 	mov	sp,fp
    9458:	dfc00117 	ldw	ra,4(sp)
    945c:	df000017 	ldw	fp,0(sp)
    9460:	dec00204 	addi	sp,sp,8
    9464:	f800283a 	ret

00009468 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    9468:	defff204 	addi	sp,sp,-56
    946c:	dfc00d15 	stw	ra,52(sp)
    9470:	df000c15 	stw	fp,48(sp)
    9474:	df000c04 	addi	fp,sp,48
    9478:	e13ffc15 	stw	r4,-16(fp)
    947c:	2807883a 	mov	r3,r5
    9480:	3005883a 	mov	r2,r6
    9484:	e1ffff15 	stw	r7,-4(fp)
    9488:	e0fffd05 	stb	r3,-12(fp)
    948c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    9490:	e0bffc17 	ldw	r2,-16(fp)
    9494:	12000217 	ldw	r8,8(r2)
    9498:	e0bffc17 	ldw	r2,-16(fp)
    949c:	10800303 	ldbu	r2,12(r2)
    94a0:	11403fcc 	andi	r5,r2,255
    94a4:	e0bffe03 	ldbu	r2,-8(fp)
    94a8:	e0fffd03 	ldbu	r3,-12(fp)
    94ac:	d8000715 	stw	zero,28(sp)
    94b0:	e13fff17 	ldw	r4,-4(fp)
    94b4:	d9000615 	stw	r4,24(sp)
    94b8:	01000044 	movi	r4,1
    94bc:	d9000515 	stw	r4,20(sp)
    94c0:	01000044 	movi	r4,1
    94c4:	d9000415 	stw	r4,16(sp)
    94c8:	d8c00315 	stw	r3,12(sp)
    94cc:	d8000215 	stw	zero,8(sp)
    94d0:	d8800115 	stw	r2,4(sp)
    94d4:	00800084 	movi	r2,2
    94d8:	d8800015 	stw	r2,0(sp)
    94dc:	01c02844 	movi	r7,161
    94e0:	000d883a 	mov	r6,zero
    94e4:	4009883a 	mov	r4,r8
    94e8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    94ec:	e037883a 	mov	sp,fp
    94f0:	dfc00117 	ldw	ra,4(sp)
    94f4:	df000017 	ldw	fp,0(sp)
    94f8:	dec00204 	addi	sp,sp,8
    94fc:	f800283a 	ret

00009500 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9500:	defff204 	addi	sp,sp,-56
    9504:	dfc00d15 	stw	ra,52(sp)
    9508:	df000c15 	stw	fp,48(sp)
    950c:	df000c04 	addi	fp,sp,48
    9510:	e13ffc15 	stw	r4,-16(fp)
    9514:	2809883a 	mov	r4,r5
    9518:	3007883a 	mov	r3,r6
    951c:	3805883a 	mov	r2,r7
    9520:	e13ffd05 	stb	r4,-12(fp)
    9524:	e0fffe05 	stb	r3,-8(fp)
    9528:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    952c:	e0bffc17 	ldw	r2,-16(fp)
    9530:	12000217 	ldw	r8,8(r2)
    9534:	e0bffc17 	ldw	r2,-16(fp)
    9538:	10800303 	ldbu	r2,12(r2)
    953c:	11403fcc 	andi	r5,r2,255
    9540:	e0bffe03 	ldbu	r2,-8(fp)
    9544:	e0ffff03 	ldbu	r3,-4(fp)
    9548:	e13ffd03 	ldbu	r4,-12(fp)
    954c:	d8000715 	stw	zero,28(sp)
    9550:	d8000615 	stw	zero,24(sp)
    9554:	d8000515 	stw	zero,20(sp)
    9558:	d8000415 	stw	zero,16(sp)
    955c:	d9000315 	stw	r4,12(sp)
    9560:	d8c00215 	stw	r3,8(sp)
    9564:	d8800115 	stw	r2,4(sp)
    9568:	00800284 	movi	r2,10
    956c:	d8800015 	stw	r2,0(sp)
    9570:	01c00844 	movi	r7,33
    9574:	000d883a 	mov	r6,zero
    9578:	4009883a 	mov	r4,r8
    957c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9580:	e037883a 	mov	sp,fp
    9584:	dfc00117 	ldw	ra,4(sp)
    9588:	df000017 	ldw	fp,0(sp)
    958c:	dec00204 	addi	sp,sp,8
    9590:	f800283a 	ret

00009594 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    9594:	defff304 	addi	sp,sp,-52
    9598:	dfc00c15 	stw	ra,48(sp)
    959c:	df000b15 	stw	fp,44(sp)
    95a0:	df000b04 	addi	fp,sp,44
    95a4:	e13ffd15 	stw	r4,-12(fp)
    95a8:	2807883a 	mov	r3,r5
    95ac:	3005883a 	mov	r2,r6
    95b0:	e0fffe05 	stb	r3,-8(fp)
    95b4:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    95b8:	e0bffd17 	ldw	r2,-12(fp)
    95bc:	11000217 	ldw	r4,8(r2)
    95c0:	e0bffd17 	ldw	r2,-12(fp)
    95c4:	10800303 	ldbu	r2,12(r2)
    95c8:	11403fcc 	andi	r5,r2,255
    95cc:	e0bfff03 	ldbu	r2,-4(fp)
    95d0:	e0fffe03 	ldbu	r3,-8(fp)
    95d4:	d8000715 	stw	zero,28(sp)
    95d8:	d8000615 	stw	zero,24(sp)
    95dc:	d8000515 	stw	zero,20(sp)
    95e0:	d8000415 	stw	zero,16(sp)
    95e4:	d8c00315 	stw	r3,12(sp)
    95e8:	d8000215 	stw	zero,8(sp)
    95ec:	d8800115 	stw	r2,4(sp)
    95f0:	008002c4 	movi	r2,11
    95f4:	d8800015 	stw	r2,0(sp)
    95f8:	01c00844 	movi	r7,33
    95fc:	000d883a 	mov	r6,zero
    9600:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9604:	e037883a 	mov	sp,fp
    9608:	dfc00117 	ldw	ra,4(sp)
    960c:	df000017 	ldw	fp,0(sp)
    9610:	dec00204 	addi	sp,sp,8
    9614:	f800283a 	ret

00009618 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    9618:	defff304 	addi	sp,sp,-52
    961c:	dfc00c15 	stw	ra,48(sp)
    9620:	df000b15 	stw	fp,44(sp)
    9624:	df000b04 	addi	fp,sp,44
    9628:	e13ffd15 	stw	r4,-12(fp)
    962c:	2805883a 	mov	r2,r5
    9630:	e1bfff15 	stw	r6,-4(fp)
    9634:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9638:	e0bffd17 	ldw	r2,-12(fp)
    963c:	11000217 	ldw	r4,8(r2)
    9640:	e0bffd17 	ldw	r2,-12(fp)
    9644:	10800303 	ldbu	r2,12(r2)
    9648:	11403fcc 	andi	r5,r2,255
    964c:	e0bffe03 	ldbu	r2,-8(fp)
    9650:	d8000715 	stw	zero,28(sp)
    9654:	e0ffff17 	ldw	r3,-4(fp)
    9658:	d8c00615 	stw	r3,24(sp)
    965c:	00c00044 	movi	r3,1
    9660:	d8c00515 	stw	r3,20(sp)
    9664:	00c00044 	movi	r3,1
    9668:	d8c00415 	stw	r3,16(sp)
    966c:	d8800315 	stw	r2,12(sp)
    9670:	d8000215 	stw	zero,8(sp)
    9674:	d8000115 	stw	zero,4(sp)
    9678:	008000c4 	movi	r2,3
    967c:	d8800015 	stw	r2,0(sp)
    9680:	01c02844 	movi	r7,161
    9684:	000d883a 	mov	r6,zero
    9688:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    968c:	e037883a 	mov	sp,fp
    9690:	dfc00117 	ldw	ra,4(sp)
    9694:	df000017 	ldw	fp,0(sp)
    9698:	dec00204 	addi	sp,sp,8
    969c:	f800283a 	ret

000096a0 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    96a0:	defffc04 	addi	sp,sp,-16
    96a4:	dfc00315 	stw	ra,12(sp)
    96a8:	df000215 	stw	fp,8(sp)
    96ac:	df000204 	addi	fp,sp,8
    96b0:	e13ffe15 	stw	r4,-8(fp)
    96b4:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    96b8:	e0bfff17 	ldw	r2,-4(fp)
    96bc:	10800003 	ldbu	r2,0(r2)
    96c0:	10803fcc 	andi	r2,r2,255
    96c4:	01402004 	movi	r5,128
    96c8:	1009883a 	mov	r4,r2
    96cc:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    96d0:	e0bfff17 	ldw	r2,-4(fp)
    96d4:	10800043 	ldbu	r2,1(r2)
    96d8:	10803fcc 	andi	r2,r2,255
    96dc:	01402004 	movi	r5,128
    96e0:	1009883a 	mov	r4,r2
    96e4:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    96e8:	e0bfff17 	ldw	r2,-4(fp)
    96ec:	10800083 	ldbu	r2,2(r2)
    96f0:	10803fcc 	andi	r2,r2,255
    96f4:	01402004 	movi	r5,128
    96f8:	1009883a 	mov	r4,r2
    96fc:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9700:	e0bfff17 	ldw	r2,-4(fp)
    9704:	108000c3 	ldbu	r2,3(r2)
    9708:	10803fcc 	andi	r2,r2,255
    970c:	01402004 	movi	r5,128
    9710:	1009883a 	mov	r4,r2
    9714:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    9718:	e0bfff17 	ldw	r2,-4(fp)
    971c:	10c00103 	ldbu	r3,4(r2)
    9720:	10800143 	ldbu	r2,5(r2)
    9724:	1004923a 	slli	r2,r2,8
    9728:	10c4b03a 	or	r2,r2,r3
    972c:	10bfffcc 	andi	r2,r2,65535
    9730:	01402004 	movi	r5,128
    9734:	1009883a 	mov	r4,r2
    9738:	000922c0 	call	922c <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    973c:	e0bfff17 	ldw	r2,-4(fp)
    9740:	10800183 	ldbu	r2,6(r2)
    9744:	10803fcc 	andi	r2,r2,255
    9748:	01402004 	movi	r5,128
    974c:	1009883a 	mov	r4,r2
    9750:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>
}
    9754:	0001883a 	nop
    9758:	e037883a 	mov	sp,fp
    975c:	dfc00117 	ldw	ra,4(sp)
    9760:	df000017 	ldw	fp,0(sp)
    9764:	dec00204 	addi	sp,sp,8
    9768:	f800283a 	ret

0000976c <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    976c:	defffc04 	addi	sp,sp,-16
    9770:	dfc00315 	stw	ra,12(sp)
    9774:	df000215 	stw	fp,8(sp)
    9778:	df000204 	addi	fp,sp,8
    977c:	e13ffe15 	stw	r4,-8(fp)
    9780:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    9784:	e0bfff17 	ldw	r2,-4(fp)
    9788:	10800003 	ldbu	r2,0(r2)
    978c:	10803fcc 	andi	r2,r2,255
    9790:	01402004 	movi	r5,128
    9794:	1009883a 	mov	r4,r2
    9798:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    979c:	e0bfff17 	ldw	r2,-4(fp)
    97a0:	10800043 	ldbu	r2,1(r2)
    97a4:	10803fcc 	andi	r2,r2,255
    97a8:	01402004 	movi	r5,128
    97ac:	1009883a 	mov	r4,r2
    97b0:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    97b4:	e0bfff17 	ldw	r2,-4(fp)
    97b8:	10c00083 	ldbu	r3,2(r2)
    97bc:	108000c3 	ldbu	r2,3(r2)
    97c0:	1004923a 	slli	r2,r2,8
    97c4:	10c4b03a 	or	r2,r2,r3
    97c8:	10bfffcc 	andi	r2,r2,65535
    97cc:	01402004 	movi	r5,128
    97d0:	1009883a 	mov	r4,r2
    97d4:	000922c0 	call	922c <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    97d8:	e0bfff17 	ldw	r2,-4(fp)
    97dc:	10800103 	ldbu	r2,4(r2)
    97e0:	10803fcc 	andi	r2,r2,255
    97e4:	01402004 	movi	r5,128
    97e8:	1009883a 	mov	r4,r2
    97ec:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    97f0:	e0bfff17 	ldw	r2,-4(fp)
    97f4:	10800143 	ldbu	r2,5(r2)
    97f8:	10803fcc 	andi	r2,r2,255
    97fc:	01402004 	movi	r5,128
    9800:	1009883a 	mov	r4,r2
    9804:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    9808:	e0bfff17 	ldw	r2,-4(fp)
    980c:	10800183 	ldbu	r2,6(r2)
    9810:	10803fcc 	andi	r2,r2,255
    9814:	01402004 	movi	r5,128
    9818:	1009883a 	mov	r4,r2
    981c:	0002dc80 	call	2dc8 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9820:	e0bfff17 	ldw	r2,-4(fp)
    9824:	10c001c3 	ldbu	r3,7(r2)
    9828:	10800203 	ldbu	r2,8(r2)
    982c:	1004923a 	slli	r2,r2,8
    9830:	10c4b03a 	or	r2,r2,r3
    9834:	10bfffcc 	andi	r2,r2,65535
    9838:	01402004 	movi	r5,128
    983c:	1009883a 	mov	r4,r2
    9840:	000922c0 	call	922c <_Z10D_PrintHexItEvT_i>
}
    9844:	0001883a 	nop
    9848:	e037883a 	mov	sp,fp
    984c:	dfc00117 	ldw	ra,4(sp)
    9850:	df000017 	ldw	fp,0(sp)
    9854:	dec00204 	addi	sp,sp,8
    9858:	f800283a 	ret

0000985c <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    985c:	defffd04 	addi	sp,sp,-12
    9860:	dfc00215 	stw	ra,8(sp)
    9864:	df000115 	stw	fp,4(sp)
    9868:	df000104 	addi	fp,sp,4
    986c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9870:	010000f4 	movhi	r4,3
    9874:	21253804 	addi	r4,r4,-27424
    9878:	00101a40 	call	101a4 <puts>
	vbusState = 0;
    987c:	d0324345 	stb	zero,-14067(gp)
};
    9880:	0001883a 	nop
    9884:	e037883a 	mov	sp,fp
    9888:	dfc00117 	ldw	ra,4(sp)
    988c:	df000017 	ldw	fp,0(sp)
    9890:	dec00204 	addi	sp,sp,8
    9894:	f800283a 	ret

00009898 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    9898:	defffe04 	addi	sp,sp,-8
    989c:	df000115 	stw	fp,4(sp)
    98a0:	df000104 	addi	fp,sp,4
    98a4:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    98a8:	d0b24343 	ldbu	r2,-14067(gp)
};
    98ac:	e037883a 	mov	sp,fp
    98b0:	df000017 	ldw	fp,0(sp)
    98b4:	dec00104 	addi	sp,sp,4
    98b8:	f800283a 	ret

000098bc <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    98bc:	defff704 	addi	sp,sp,-36
    98c0:	dfc00815 	stw	ra,32(sp)
    98c4:	df000715 	stw	fp,28(sp)
    98c8:	df000704 	addi	fp,sp,28
    98cc:	e13ffd15 	stw	r4,-12(fp)
    98d0:	2807883a 	mov	r3,r5
    98d4:	3005883a 	mov	r2,r6
    98d8:	e0fffe05 	stb	r3,-8(fp)
    98dc:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    98e0:	e03ffc45 	stb	zero,-15(fp)
    98e4:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    98e8:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    98ec:	e0bffe03 	ldbu	r2,-8(fp)
    98f0:	10800084 	addi	r2,r2,2
    98f4:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    98f8:	e0bfff03 	ldbu	r2,-4(fp)
    98fc:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9900:	e0fffc44 	addi	r3,fp,-15
    9904:	d8000215 	stw	zero,8(sp)
    9908:	e0bffcc4 	addi	r2,fp,-13
    990c:	d8800115 	stw	r2,4(sp)
    9910:	d8000015 	stw	zero,0(sp)
    9914:	180f883a 	mov	r7,r3
    9918:	01800084 	movi	r6,2
    991c:	000b883a 	mov	r5,zero
    9920:	01010034 	movhi	r4,1024
    9924:	21044804 	addi	r4,r4,4384
    9928:	00233f80 	call	233f8 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    992c:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9930:	0001883a 	nop
    9934:	e037883a 	mov	sp,fp
    9938:	dfc00117 	ldw	ra,4(sp)
    993c:	df000017 	ldw	fp,0(sp)
    9940:	dec00204 	addi	sp,sp,8
    9944:	f800283a 	ret

00009948 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9948:	defff304 	addi	sp,sp,-52
    994c:	dfc00c15 	stw	ra,48(sp)
    9950:	df000b15 	stw	fp,44(sp)
    9954:	dc000a15 	stw	r16,40(sp)
    9958:	df000b04 	addi	fp,sp,44
    995c:	e13ffb15 	stw	r4,-20(fp)
    9960:	3009883a 	mov	r4,r6
    9964:	e1fffe15 	stw	r7,-8(fp)
    9968:	e17ffc05 	stb	r5,-16(fp)
    996c:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9970:	d809883a 	mov	r4,sp
    9974:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    9978:	e13ffd03 	ldbu	r4,-12(fp)
    997c:	e13ff815 	stw	r4,-32(fp)
    9980:	200b883a 	mov	r5,r4
    9984:	29400044 	addi	r5,r5,1
    9988:	2819883a 	mov	r12,r5
    998c:	001b883a 	mov	r13,zero
    9990:	600ad77a 	srli	r5,r12,29
    9994:	681290fa 	slli	r9,r13,3
    9998:	2a52b03a 	or	r9,r5,r9
    999c:	601090fa 	slli	r8,r12,3
    99a0:	200b883a 	mov	r5,r4
    99a4:	29400044 	addi	r5,r5,1
    99a8:	2815883a 	mov	r10,r5
    99ac:	0017883a 	mov	r11,zero
    99b0:	500ad77a 	srli	r5,r10,29
    99b4:	580690fa 	slli	r3,r11,3
    99b8:	28c6b03a 	or	r3,r5,r3
    99bc:	500490fa 	slli	r2,r10,3
    99c0:	2005883a 	mov	r2,r4
    99c4:	10800044 	addi	r2,r2,1
    99c8:	108000c4 	addi	r2,r2,3
    99cc:	1004d0ba 	srli	r2,r2,2
    99d0:	1085883a 	add	r2,r2,r2
    99d4:	1085883a 	add	r2,r2,r2
    99d8:	d8b7c83a 	sub	sp,sp,r2
    99dc:	d8800304 	addi	r2,sp,12
    99e0:	1005883a 	mov	r2,r2
    99e4:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    99e8:	e0bffc03 	ldbu	r2,-16(fp)
    99ec:	10800084 	addi	r2,r2,2
    99f0:	1007883a 	mov	r3,r2
    99f4:	e0bff917 	ldw	r2,-28(fp)
    99f8:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    99fc:	e0bff917 	ldw	r2,-28(fp)
    9a00:	10800044 	addi	r2,r2,1
    9a04:	e0fffd03 	ldbu	r3,-12(fp)
    9a08:	180d883a 	mov	r6,r3
    9a0c:	e17ffe17 	ldw	r5,-8(fp)
    9a10:	1009883a 	mov	r4,r2
    9a14:	000fde80 	call	fde8 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9a18:	e0bffd03 	ldbu	r2,-12(fp)
    9a1c:	10800044 	addi	r2,r2,1
    9a20:	1009883a 	mov	r4,r2
    9a24:	e0fff917 	ldw	r3,-28(fp)
    9a28:	d8000215 	stw	zero,8(sp)
    9a2c:	e0bffa44 	addi	r2,fp,-23
    9a30:	d8800115 	stw	r2,4(sp)
    9a34:	d8000015 	stw	zero,0(sp)
    9a38:	180f883a 	mov	r7,r3
    9a3c:	200d883a 	mov	r6,r4
    9a40:	000b883a 	mov	r5,zero
    9a44:	01010034 	movhi	r4,1024
    9a48:	21044804 	addi	r4,r4,4384
    9a4c:	00233f80 	call	233f8 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9a50:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9a54:	e0bffd03 	ldbu	r2,-12(fp)
    9a58:	e0fffe17 	ldw	r3,-8(fp)
    9a5c:	1885883a 	add	r2,r3,r2
    9a60:	8037883a 	mov	sp,r16
}
    9a64:	e6ffff04 	addi	sp,fp,-4
    9a68:	dfc00217 	ldw	ra,8(sp)
    9a6c:	df000117 	ldw	fp,4(sp)
    9a70:	dc000017 	ldw	r16,0(sp)
    9a74:	dec00304 	addi	sp,sp,12
    9a78:	f800283a 	ret

00009a7c <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    9a7c:	defffc04 	addi	sp,sp,-16
    9a80:	dfc00315 	stw	ra,12(sp)
    9a84:	df000215 	stw	fp,8(sp)
    9a88:	df000204 	addi	fp,sp,8
    9a8c:	e13ffe15 	stw	r4,-8(fp)
    9a90:	2805883a 	mov	r2,r5
    9a94:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    9a98:	010000f4 	movhi	r4,3
    9a9c:	21253e04 	addi	r4,r4,-27400
    9aa0:	00101a40 	call	101a4 <puts>
	regWr(rIOPINS1, data);
    9aa4:	e0bfff03 	ldbu	r2,-4(fp)
    9aa8:	100d883a 	mov	r6,r2
    9aac:	01402804 	movi	r5,160
    9ab0:	e13ffe17 	ldw	r4,-8(fp)
    9ab4:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    9ab8:	e0bfff03 	ldbu	r2,-4(fp)
    9abc:	1005d13a 	srai	r2,r2,4
    9ac0:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    9ac4:	e0bfff03 	ldbu	r2,-4(fp)
    9ac8:	100d883a 	mov	r6,r2
    9acc:	01402a04 	movi	r5,168
    9ad0:	e13ffe17 	ldw	r4,-8(fp)
    9ad4:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	return;
    9ad8:	0001883a 	nop
}
    9adc:	e037883a 	mov	sp,fp
    9ae0:	dfc00117 	ldw	ra,4(sp)
    9ae4:	df000017 	ldw	fp,0(sp)
    9ae8:	dec00204 	addi	sp,sp,8
    9aec:	f800283a 	ret

00009af0 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    9af0:	defff804 	addi	sp,sp,-32
    9af4:	dfc00715 	stw	ra,28(sp)
    9af8:	df000615 	stw	fp,24(sp)
    9afc:	df000604 	addi	fp,sp,24
    9b00:	e13ffe15 	stw	r4,-8(fp)
    9b04:	2805883a 	mov	r2,r5
    9b08:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9b0c:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9b10:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9b14:	e0bfff03 	ldbu	r2,-4(fp)
    9b18:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9b1c:	e0fffd44 	addi	r3,fp,-11
    9b20:	d8000215 	stw	zero,8(sp)
    9b24:	e0bffd84 	addi	r2,fp,-10
    9b28:	d8800115 	stw	r2,4(sp)
    9b2c:	00800044 	movi	r2,1
    9b30:	d8800015 	stw	r2,0(sp)
    9b34:	180f883a 	mov	r7,r3
    9b38:	01800044 	movi	r6,1
    9b3c:	000b883a 	mov	r5,zero
    9b40:	01010034 	movhi	r4,1024
    9b44:	21044804 	addi	r4,r4,4384
    9b48:	00233f80 	call	233f8 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9b4c:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9b50:	e0bffd83 	ldbu	r2,-10(fp)
}
    9b54:	e037883a 	mov	sp,fp
    9b58:	dfc00117 	ldw	ra,4(sp)
    9b5c:	df000017 	ldw	fp,0(sp)
    9b60:	dec00204 	addi	sp,sp,8
    9b64:	f800283a 	ret

00009b68 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9b68:	defff604 	addi	sp,sp,-40
    9b6c:	dfc00915 	stw	ra,36(sp)
    9b70:	df000815 	stw	fp,32(sp)
    9b74:	df000804 	addi	fp,sp,32
    9b78:	e13ffc15 	stw	r4,-16(fp)
    9b7c:	2807883a 	mov	r3,r5
    9b80:	3005883a 	mov	r2,r6
    9b84:	e1ffff15 	stw	r7,-4(fp)
    9b88:	e0fffd05 	stb	r3,-12(fp)
    9b8c:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9b90:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9b94:	e0bffd03 	ldbu	r2,-12(fp)
    9b98:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9b9c:	e0bffe03 	ldbu	r2,-8(fp)
    9ba0:	e13ffb44 	addi	r4,fp,-19
    9ba4:	d8000215 	stw	zero,8(sp)
    9ba8:	e0ffff17 	ldw	r3,-4(fp)
    9bac:	d8c00115 	stw	r3,4(sp)
    9bb0:	d8800015 	stw	r2,0(sp)
    9bb4:	200f883a 	mov	r7,r4
    9bb8:	01800044 	movi	r6,1
    9bbc:	000b883a 	mov	r5,zero
    9bc0:	01010034 	movhi	r4,1024
    9bc4:	21044804 	addi	r4,r4,4384
    9bc8:	00233f80 	call	233f8 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    9bcc:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    9bd0:	e0bffe03 	ldbu	r2,-8(fp)
    9bd4:	e0ffff17 	ldw	r3,-4(fp)
    9bd8:	1885883a 	add	r2,r3,r2
}
    9bdc:	e037883a 	mov	sp,fp
    9be0:	dfc00117 	ldw	ra,4(sp)
    9be4:	df000017 	ldw	fp,0(sp)
    9be8:	dec00204 	addi	sp,sp,8
    9bec:	f800283a 	ret

00009bf0 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    9bf0:	defffc04 	addi	sp,sp,-16
    9bf4:	dfc00315 	stw	ra,12(sp)
    9bf8:	df000215 	stw	fp,8(sp)
    9bfc:	df000204 	addi	fp,sp,8
    9c00:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9c04:	010000f4 	movhi	r4,3
    9c08:	21254204 	addi	r4,r4,-27384
    9c0c:	00101a40 	call	101a4 <puts>
	uint8_t gpin = 0;
    9c10:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9c14:	01402a04 	movi	r5,168
    9c18:	e13fff17 	ldw	r4,-4(fp)
    9c1c:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    9c20:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9c24:	e0fffe03 	ldbu	r3,-8(fp)
    9c28:	00bffc04 	movi	r2,-16
    9c2c:	1884703a 	and	r2,r3,r2
    9c30:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9c34:	01402804 	movi	r5,160
    9c38:	e13fff17 	ldw	r4,-4(fp)
    9c3c:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    9c40:	10803fcc 	andi	r2,r2,255
    9c44:	1005d13a 	srai	r2,r2,4
    9c48:	1007883a 	mov	r3,r2
    9c4c:	e0bffe03 	ldbu	r2,-8(fp)
    9c50:	1884b03a 	or	r2,r3,r2
    9c54:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9c58:	e0bffe03 	ldbu	r2,-8(fp)
}
    9c5c:	e037883a 	mov	sp,fp
    9c60:	dfc00117 	ldw	ra,4(sp)
    9c64:	df000017 	ldw	fp,0(sp)
    9c68:	dec00204 	addi	sp,sp,8
    9c6c:	f800283a 	ret

00009c70 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9c70:	defffc04 	addi	sp,sp,-16
    9c74:	dfc00315 	stw	ra,12(sp)
    9c78:	df000215 	stw	fp,8(sp)
    9c7c:	df000204 	addi	fp,sp,8
    9c80:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    9c84:	010000f4 	movhi	r4,3
    9c88:	21254604 	addi	r4,r4,-27368
    9c8c:	00101a40 	call	101a4 <puts>
	uint8_t gpout = 0;
    9c90:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    9c94:	01402804 	movi	r5,160
    9c98:	e13fff17 	ldw	r4,-4(fp)
    9c9c:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    9ca0:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    9ca4:	e0bffe03 	ldbu	r2,-8(fp)
    9ca8:	108003cc 	andi	r2,r2,15
    9cac:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9cb0:	01402a04 	movi	r5,168
    9cb4:	e13fff17 	ldw	r4,-4(fp)
    9cb8:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    9cbc:	10803fcc 	andi	r2,r2,255
    9cc0:	1004913a 	slli	r2,r2,4
    9cc4:	1007883a 	mov	r3,r2
    9cc8:	e0bffe03 	ldbu	r2,-8(fp)
    9ccc:	1884b03a 	or	r2,r3,r2
    9cd0:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    9cd4:	e0bffe03 	ldbu	r2,-8(fp)
}
    9cd8:	e037883a 	mov	sp,fp
    9cdc:	dfc00117 	ldw	ra,4(sp)
    9ce0:	df000017 	ldw	fp,0(sp)
    9ce4:	dec00204 	addi	sp,sp,8
    9ce8:	f800283a 	ret

00009cec <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    9cec:	defffc04 	addi	sp,sp,-16
    9cf0:	dfc00315 	stw	ra,12(sp)
    9cf4:	df000215 	stw	fp,8(sp)
    9cf8:	df000204 	addi	fp,sp,8
    9cfc:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9d00:	010000f4 	movhi	r4,3
    9d04:	21254c04 	addi	r4,r4,-27344
    9d08:	00101a40 	call	101a4 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    9d0c:	0007883a 	mov	r3,zero
    9d10:	00810034 	movhi	r2,1024
    9d14:	10847404 	addi	r2,r2,4560
    9d18:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9d1c:	010003f4 	movhi	r4,15
    9d20:	21109004 	addi	r4,r4,16960
    9d24:	0020b2c0 	call	20b2c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9d28:	00c00044 	movi	r3,1
    9d2c:	00810034 	movhi	r2,1024
    9d30:	10847404 	addi	r2,r2,4560
    9d34:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9d38:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9d3c:	01800804 	movi	r6,32
    9d40:	01401e04 	movi	r5,120
    9d44:	e13fff17 	ldw	r4,-4(fp)
    9d48:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9d4c:	000d883a 	mov	r6,zero
    9d50:	01401e04 	movi	r5,120
    9d54:	e13fff17 	ldw	r4,-4(fp)
    9d58:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9d5c:	e0bffe0b 	ldhu	r2,-8(fp)
    9d60:	10800044 	addi	r2,r2,1
    9d64:	e0bffe0d 	sth	r2,-8(fp)
    9d68:	e0bffe0b 	ldhu	r2,-8(fp)
    9d6c:	1004c03a 	cmpne	r2,r2,zero
    9d70:	10803fcc 	andi	r2,r2,255
    9d74:	10000a26 	beq	r2,zero,9da0 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9d78:	01401a04 	movi	r5,104
    9d7c:	e13fff17 	ldw	r4,-4(fp)
    9d80:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    9d84:	10803fcc 	andi	r2,r2,255
    9d88:	1080004c 	andi	r2,r2,1
    9d8c:	1004c03a 	cmpne	r2,r2,zero
    9d90:	10803fcc 	andi	r2,r2,255
    9d94:	1000011e 	bne	r2,zero,9d9c <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9d98:	003ff006 	br	9d5c <__alt_data_end+0xfc009d5c>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    9d9c:	0001883a 	nop
		}
	}
	return ( i);
    9da0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9da4:	e037883a 	mov	sp,fp
    9da8:	dfc00117 	ldw	ra,4(sp)
    9dac:	df000017 	ldw	fp,0(sp)
    9db0:	dec00204 	addi	sp,sp,8
    9db4:	f800283a 	ret

00009db8 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9db8:	defffe04 	addi	sp,sp,-8
    9dbc:	df000115 	stw	fp,4(sp)
    9dc0:	df000104 	addi	fp,sp,4
    9dc4:	2005883a 	mov	r2,r4
    9dc8:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    9dcc:	00800044 	movi	r2,1
}
    9dd0:	e037883a 	mov	sp,fp
    9dd4:	df000017 	ldw	fp,0(sp)
    9dd8:	dec00104 	addi	sp,sp,4
    9ddc:	f800283a 	ret

00009de0 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    9de0:	defffd04 	addi	sp,sp,-12
    9de4:	dfc00215 	stw	ra,8(sp)
    9de8:	df000115 	stw	fp,4(sp)
    9dec:	df000104 	addi	fp,sp,4
    9df0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9df4:	010000f4 	movhi	r4,3
    9df8:	21255004 	addi	r4,r4,-27328
    9dfc:	00101a40 	call	101a4 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9e00:	01800604 	movi	r6,24
    9e04:	01402204 	movi	r5,136
    9e08:	e13fff17 	ldw	r4,-4(fp)
    9e0c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9e10:	e13fff17 	ldw	r4,-4(fp)
    9e14:	0009cec0 	call	9cec <_ZN8MAX3421e5resetEv>
    9e18:	10bfffcc 	andi	r2,r2,65535
    9e1c:	1005003a 	cmpeq	r2,r2,zero
    9e20:	10803fcc 	andi	r2,r2,255
    9e24:	10000226 	beq	r2,zero,9e30 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9e28:	00bfffc4 	movi	r2,-1
    9e2c:	00002006 	br	9eb0 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9e30:	01803044 	movi	r6,193
    9e34:	01403604 	movi	r5,216
    9e38:	e13fff17 	ldw	r4,-4(fp)
    9e3c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9e40:	01801804 	movi	r6,96
    9e44:	01403404 	movi	r5,208
    9e48:	e13fff17 	ldw	r4,-4(fp)
    9e4c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9e50:	01800104 	movi	r6,4
    9e54:	01403a04 	movi	r5,232
    9e58:	e13fff17 	ldw	r4,-4(fp)
    9e5c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9e60:	01403a04 	movi	r5,232
    9e64:	e13fff17 	ldw	r4,-4(fp)
    9e68:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    9e6c:	10803fcc 	andi	r2,r2,255
    9e70:	1080010c 	andi	r2,r2,4
    9e74:	1005003a 	cmpeq	r2,r2,zero
    9e78:	10803fcc 	andi	r2,r2,255
    9e7c:	10000126 	beq	r2,zero,9e84 <_ZN8MAX3421e4InitEv+0xa4>
    9e80:	003ff706 	br	9e60 <__alt_data_end+0xfc009e60>

	busprobe(); //check if anything is connected
    9e84:	e13fff17 	ldw	r4,-4(fp)
    9e88:	0009fdc0 	call	9fdc <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9e8c:	01800804 	movi	r6,32
    9e90:	01403204 	movi	r5,200
    9e94:	e13fff17 	ldw	r4,-4(fp)
    9e98:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9e9c:	01800044 	movi	r6,1
    9ea0:	01402004 	movi	r5,128
    9ea4:	e13fff17 	ldw	r4,-4(fp)
    9ea8:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9eac:	0005883a 	mov	r2,zero
}
    9eb0:	e037883a 	mov	sp,fp
    9eb4:	dfc00117 	ldw	ra,4(sp)
    9eb8:	df000017 	ldw	fp,0(sp)
    9ebc:	dec00204 	addi	sp,sp,8
    9ec0:	f800283a 	ret

00009ec4 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9ec4:	defffc04 	addi	sp,sp,-16
    9ec8:	dfc00315 	stw	ra,12(sp)
    9ecc:	df000215 	stw	fp,8(sp)
    9ed0:	df000204 	addi	fp,sp,8
    9ed4:	e13ffe15 	stw	r4,-8(fp)
    9ed8:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9edc:	010000f4 	movhi	r4,3
    9ee0:	21255404 	addi	r4,r4,-27312
    9ee4:	00101a40 	call	101a4 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9ee8:	01800644 	movi	r6,25
    9eec:	01402204 	movi	r5,136
    9ef0:	e13ffe17 	ldw	r4,-8(fp)
    9ef4:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9ef8:	e13ffe17 	ldw	r4,-8(fp)
    9efc:	0009cec0 	call	9cec <_ZN8MAX3421e5resetEv>
    9f00:	10bfffcc 	andi	r2,r2,65535
    9f04:	1005003a 	cmpeq	r2,r2,zero
    9f08:	10803fcc 	andi	r2,r2,255
    9f0c:	10000226 	beq	r2,zero,9f18 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9f10:	00bfffc4 	movi	r2,-1
    9f14:	00002c06 	br	9fc8 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9f18:	e0bfff17 	ldw	r2,-4(fp)
    9f1c:	1080fa08 	cmpgei	r2,r2,1000
    9f20:	1000021e 	bne	r2,zero,9f2c <_ZN8MAX3421e4InitEi+0x68>
    9f24:	0080fa04 	movi	r2,1000
    9f28:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9f2c:	e0bfff17 	ldw	r2,-4(fp)
    9f30:	1009883a 	mov	r4,r2
    9f34:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9f38:	01803044 	movi	r6,193
    9f3c:	01403604 	movi	r5,216
    9f40:	e13ffe17 	ldw	r4,-8(fp)
    9f44:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9f48:	01801804 	movi	r6,96
    9f4c:	01403404 	movi	r5,208
    9f50:	e13ffe17 	ldw	r4,-8(fp)
    9f54:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9f58:	01800104 	movi	r6,4
    9f5c:	01403a04 	movi	r5,232
    9f60:	e13ffe17 	ldw	r4,-8(fp)
    9f64:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9f68:	01403a04 	movi	r5,232
    9f6c:	e13ffe17 	ldw	r4,-8(fp)
    9f70:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    9f74:	10803fcc 	andi	r2,r2,255
    9f78:	1080010c 	andi	r2,r2,4
    9f7c:	1005003a 	cmpeq	r2,r2,zero
    9f80:	10803fcc 	andi	r2,r2,255
    9f84:	10000126 	beq	r2,zero,9f8c <_ZN8MAX3421e4InitEi+0xc8>
    9f88:	003ff706 	br	9f68 <__alt_data_end+0xfc009f68>

	busprobe(); //check if anything is connected
    9f8c:	e13ffe17 	ldw	r4,-8(fp)
    9f90:	0009fdc0 	call	9fdc <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9f94:	01800804 	movi	r6,32
    9f98:	01403204 	movi	r5,200
    9f9c:	e13ffe17 	ldw	r4,-8(fp)
    9fa0:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9fa4:	01800044 	movi	r6,1
    9fa8:	01402004 	movi	r5,128
    9fac:	e13ffe17 	ldw	r4,-8(fp)
    9fb0:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9fb4:	01800604 	movi	r6,24
    9fb8:	01402204 	movi	r5,136
    9fbc:	e13ffe17 	ldw	r4,-8(fp)
    9fc0:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9fc4:	0005883a 	mov	r2,zero
}
    9fc8:	e037883a 	mov	sp,fp
    9fcc:	dfc00117 	ldw	ra,4(sp)
    9fd0:	df000017 	ldw	fp,0(sp)
    9fd4:	dec00204 	addi	sp,sp,8
    9fd8:	f800283a 	ret

00009fdc <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9fdc:	defffc04 	addi	sp,sp,-16
    9fe0:	dfc00315 	stw	ra,12(sp)
    9fe4:	df000215 	stw	fp,8(sp)
    9fe8:	df000204 	addi	fp,sp,8
    9fec:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9ff0:	010000f4 	movhi	r4,3
    9ff4:	21255a04 	addi	r4,r4,-27288
    9ff8:	00101a40 	call	101a4 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9ffc:	01403e04 	movi	r5,248
    a000:	e13fff17 	ldw	r4,-4(fp)
    a004:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    a008:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    a00c:	e0fffe03 	ldbu	r3,-8(fp)
    a010:	00bff004 	movi	r2,-64
    a014:	1884703a 	and	r2,r3,r2
    a018:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    a01c:	e0bffe03 	ldbu	r2,-8(fp)
    a020:	10c01020 	cmpeqi	r3,r2,64
    a024:	1800251e 	bne	r3,zero,a0bc <_ZN8MAX3421e8busprobeEv+0xe0>
    a028:	10c01048 	cmpgei	r3,r2,65
    a02c:	1800021e 	bne	r3,zero,a038 <_ZN8MAX3421e8busprobeEv+0x5c>
    a030:	10003b26 	beq	r2,zero,a120 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    a034:	00004006 	br	a138 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    a038:	10c02020 	cmpeqi	r3,r2,128
    a03c:	1800031e 	bne	r3,zero,a04c <_ZN8MAX3421e8busprobeEv+0x70>
    a040:	10803020 	cmpeqi	r2,r2,192
    a044:	1000331e 	bne	r2,zero,a114 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    a048:	00003b06 	br	a138 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    a04c:	01403604 	movi	r5,216
    a050:	e13fff17 	ldw	r4,-4(fp)
    a054:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    a058:	10803fcc 	andi	r2,r2,255
    a05c:	1080008c 	andi	r2,r2,2
    a060:	1005003a 	cmpeq	r2,r2,zero
    a064:	10803fcc 	andi	r2,r2,255
    a068:	10000a26 	beq	r2,zero,a094 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    a06c:	010000f4 	movhi	r4,3
    a070:	21255f04 	addi	r4,r4,-27268
    a074:	00101a40 	call	101a4 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    a078:	01803244 	movi	r6,201
    a07c:	01403604 	movi	r5,216
    a080:	e13fff17 	ldw	r4,-4(fp)
    a084:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    a088:	00800084 	movi	r2,2
    a08c:	d0b24345 	stb	r2,-14067(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    a090:	00002906 	br	a138 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    a094:	010000f4 	movhi	r4,3
    a098:	21256604 	addi	r4,r4,-27240
    a09c:	00101a40 	call	101a4 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    a0a0:	018032c4 	movi	r6,203
    a0a4:	01403604 	movi	r5,216
    a0a8:	e13fff17 	ldw	r4,-4(fp)
    a0ac:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    a0b0:	008000c4 	movi	r2,3
    a0b4:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    a0b8:	00001f06 	br	a138 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    a0bc:	01403604 	movi	r5,216
    a0c0:	e13fff17 	ldw	r4,-4(fp)
    a0c4:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    a0c8:	10803fcc 	andi	r2,r2,255
    a0cc:	1080008c 	andi	r2,r2,2
    a0d0:	1005003a 	cmpeq	r2,r2,zero
    a0d4:	10803fcc 	andi	r2,r2,255
    a0d8:	10000726 	beq	r2,zero,a0f8 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    a0dc:	018032c4 	movi	r6,203
    a0e0:	01403604 	movi	r5,216
    a0e4:	e13fff17 	ldw	r4,-4(fp)
    a0e8:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    a0ec:	008000c4 	movi	r2,3
    a0f0:	d0b24345 	stb	r2,-14067(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    a0f4:	00001006 	br	a138 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    a0f8:	01803244 	movi	r6,201
    a0fc:	01403604 	movi	r5,216
    a100:	e13fff17 	ldw	r4,-4(fp)
    a104:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    a108:	00800084 	movi	r2,2
    a10c:	d0b24345 	stb	r2,-14067(gp)
			}
			break;
    a110:	00000906 	br	a138 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    a114:	00800044 	movi	r2,1
    a118:	d0b24345 	stb	r2,-14067(gp)
			break;
    a11c:	00000606 	br	a138 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    a120:	01803444 	movi	r6,209
    a124:	01403604 	movi	r5,216
    a128:	e13fff17 	ldw	r4,-4(fp)
    a12c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    a130:	d0324345 	stb	zero,-14067(gp)
			break;
    a134:	0001883a 	nop
	}//end switch( bus_sample )
}
    a138:	0001883a 	nop
    a13c:	e037883a 	mov	sp,fp
    a140:	dfc00117 	ldw	ra,4(sp)
    a144:	df000017 	ldw	fp,0(sp)
    a148:	dec00204 	addi	sp,sp,8
    a14c:	f800283a 	ret

0000a150 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    a150:	defffc04 	addi	sp,sp,-16
    a154:	dfc00315 	stw	ra,12(sp)
    a158:	df000215 	stw	fp,8(sp)
    a15c:	df000204 	addi	fp,sp,8
    a160:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    a164:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    a168:	00810034 	movhi	r2,1024
    a16c:	10847c04 	addi	r2,r2,4592
    a170:	10800003 	ldbu	r2,0(r2)
    a174:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    a178:	00810034 	movhi	r2,1024
    a17c:	10847c04 	addi	r2,r2,4592
    a180:	10800037 	ldwio	r2,0(r2)
    a184:	1005003a 	cmpeq	r2,r2,zero
    a188:	10803fcc 	andi	r2,r2,255
    a18c:	10000326 	beq	r2,zero,a19c <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    a190:	e13fff17 	ldw	r4,-4(fp)
    a194:	000a1b40 	call	a1b4 <_ZN8MAX3421e10IntHandlerEv>
    a198:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    a19c:	e0bffe03 	ldbu	r2,-8(fp)
}
    a1a0:	e037883a 	mov	sp,fp
    a1a4:	dfc00117 	ldw	ra,4(sp)
    a1a8:	df000017 	ldw	fp,0(sp)
    a1ac:	dec00204 	addi	sp,sp,8
    a1b0:	f800283a 	ret

0000a1b4 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    a1b4:	defffc04 	addi	sp,sp,-16
    a1b8:	dfc00315 	stw	ra,12(sp)
    a1bc:	df000215 	stw	fp,8(sp)
    a1c0:	df000204 	addi	fp,sp,8
    a1c4:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    a1c8:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    a1cc:	01403204 	movi	r5,200
    a1d0:	e13fff17 	ldw	r4,-4(fp)
    a1d4:	0009af00 	call	9af0 <_ZN8MAX3421e5regRdEh>
    a1d8:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    a1dc:	e0bffe43 	ldbu	r2,-7(fp)
    a1e0:	1080080c 	andi	r2,r2,32
    a1e4:	10000526 	beq	r2,zero,a1fc <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    a1e8:	e13fff17 	ldw	r4,-4(fp)
    a1ec:	0009fdc0 	call	9fdc <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    a1f0:	e0bffe03 	ldbu	r2,-8(fp)
    a1f4:	10800814 	ori	r2,r2,32
    a1f8:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    a1fc:	e0bffe03 	ldbu	r2,-8(fp)
    a200:	100d883a 	mov	r6,r2
    a204:	01403204 	movi	r5,200
    a208:	e13fff17 	ldw	r4,-4(fp)
    a20c:	00098bc0 	call	98bc <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    a210:	e0bffe03 	ldbu	r2,-8(fp)
}
    a214:	e037883a 	mov	sp,fp
    a218:	dfc00117 	ldw	ra,4(sp)
    a21c:	df000017 	ldw	fp,0(sp)
    a220:	dec00204 	addi	sp,sp,8
    a224:	f800283a 	ret

0000a228 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    a228:	defffe04 	addi	sp,sp,-8
    a22c:	df000115 	stw	fp,4(sp)
    a230:	df000104 	addi	fp,sp,4
    a234:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    a238:	0005883a 	mov	r2,zero
}
    a23c:	e037883a 	mov	sp,fp
    a240:	df000017 	ldw	fp,0(sp)
    a244:	dec00104 	addi	sp,sp,4
    a248:	f800283a 	ret

0000a24c <_Z6onInitv>:
bool ped_flip = 0;

void MIDI_poll();

void onInit()
{
    a24c:	defff804 	addi	sp,sp,-32
    a250:	dfc00715 	stw	ra,28(sp)
    a254:	df000615 	stw	fp,24(sp)
    a258:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    a25c:	010000f4 	movhi	r4,3
    a260:	21089004 	addi	r4,r4,8768
    a264:	000aea40 	call	aea4 <_ZN9USBH_MIDI8idVendorEv>
    a268:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    a26c:	010000f4 	movhi	r4,3
    a270:	21089004 	addi	r4,r4,8768
    a274:	000aecc0 	call	aecc <_ZN9USBH_MIDI9idProductEv>
    a278:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    a27c:	e0fffa0b 	ldhu	r3,-24(fp)
    a280:	e13ffa8b 	ldhu	r4,-22(fp)
    a284:	e0bffb04 	addi	r2,fp,-20
    a288:	200f883a 	mov	r7,r4
    a28c:	180d883a 	mov	r6,r3
    a290:	014000f4 	movhi	r5,3
    a294:	296da204 	addi	r5,r5,-18808
    a298:	1009883a 	mov	r4,r2
    a29c:	00105680 	call	10568 <sprintf>
  printf("%s\n", buf);
    a2a0:	e0bffb04 	addi	r2,fp,-20
    a2a4:	1009883a 	mov	r4,r2
    a2a8:	00101a40 	call	101a4 <puts>
}
    a2ac:	0001883a 	nop
    a2b0:	e037883a 	mov	sp,fp
    a2b4:	dfc00117 	ldw	ra,4(sp)
    a2b8:	df000017 	ldw	fp,0(sp)
    a2bc:	dec00204 	addi	sp,sp,8
    a2c0:	f800283a 	ret

0000a2c4 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    a2c4:	defffe04 	addi	sp,sp,-8
    a2c8:	dfc00115 	stw	ra,4(sp)
    a2cc:	df000015 	stw	fp,0(sp)
    a2d0:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    a2d4:	010000f4 	movhi	r4,3
    a2d8:	21086104 	addi	r4,r4,8580
    a2dc:	0009de00 	call	9de0 <_ZN8MAX3421e4InitEv>
    a2e0:	10803fcc 	andi	r2,r2,255
    a2e4:	1080201c 	xori	r2,r2,128
    a2e8:	10bfe004 	addi	r2,r2,-128
    a2ec:	10bfffe0 	cmpeqi	r2,r2,-1
    a2f0:	10803fcc 	andi	r2,r2,255
    a2f4:	10000326 	beq	r2,zero,a304 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    a2f8:	010000f4 	movhi	r4,3
    a2fc:	212da704 	addi	r4,r4,-18788
    a300:	00100880 	call	10088 <printf>
	printf ("USB Started\n\r");
    a304:	010000f4 	movhi	r4,3
    a308:	212da904 	addi	r4,r4,-18780
    a30c:	00100880 	call	10088 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    a310:	01400074 	movhi	r5,1
    a314:	29689304 	addi	r5,r5,-23988
    a318:	010000f4 	movhi	r4,3
    a31c:	21089004 	addi	r4,r4,8768
    a320:	000aef40 	call	aef4 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    a324:	0001883a 	nop
    a328:	e037883a 	mov	sp,fp
    a32c:	dfc00117 	ldw	ra,4(sp)
    a330:	df000017 	ldw	fp,0(sp)
    a334:	dec00204 	addi	sp,sp,8
    a338:	f800283a 	ret

0000a33c <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to synthesizer
void MIDI_poll()
{
    a33c:	deffe504 	addi	sp,sp,-108
    a340:	dfc01a15 	stw	ra,104(sp)
    a344:	df001915 	stw	fp,100(sp)
    a348:	df001904 	addi	fp,sp,100
  uint8_t channel, ctrl, par;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;
  uint32_t long_par;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    a34c:	e0ffeec4 	addi	r3,fp,-69
    a350:	e0bfff04 	addi	r2,fp,-4
    a354:	180d883a 	mov	r6,r3
    a358:	100b883a 	mov	r5,r2
    a35c:	010000f4 	movhi	r4,3
    a360:	21089004 	addi	r4,r4,8768
    a364:	0007e100 	call	7e10 <_ZN9USBH_MIDI8RecvDataEPtPh>
    a368:	10803fcc 	andi	r2,r2,255
    a36c:	1005003a 	cmpeq	r2,r2,zero
    a370:	10803fcc 	andi	r2,r2,255
    a374:	10023a26 	beq	r2,zero,ac60 <_Z9MIDI_pollv+0x924>
	    /*for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {
	    	printf("%X ", bufMidi[i]);
	    }
	    printf("\n");*/
		channel = (bufMidi[1] & 0x0F);
    a378:	e0bfef03 	ldbu	r2,-68(fp)
    a37c:	108003cc 	andi	r2,r2,15
    a380:	e0bfee05 	stb	r2,-72(fp)
		ctrl = bufMidi[2];
    a384:	e0bfef43 	ldbu	r2,-67(fp)
    a388:	e0bfee45 	stb	r2,-71(fp)
		par = bufMidi[3];
    a38c:	e0bfef83 	ldbu	r2,-66(fp)
    a390:	e0bfee85 	stb	r2,-70(fp)
	switch (bufMidi[1] & 0xF0) {
    a394:	e0bfef03 	ldbu	r2,-68(fp)
    a398:	10803fcc 	andi	r2,r2,255
    a39c:	10803c0c 	andi	r2,r2,240
    a3a0:	10c02420 	cmpeqi	r3,r2,144
    a3a4:	18000a1e 	bne	r3,zero,a3d0 <_Z9MIDI_pollv+0x94>
    a3a8:	10c02448 	cmpgei	r3,r2,145
    a3ac:	1800031e 	bne	r3,zero,a3bc <_Z9MIDI_pollv+0x80>
    a3b0:	10802020 	cmpeqi	r2,r2,128
    a3b4:	1000061e 	bne	r2,zero,a3d0 <_Z9MIDI_pollv+0x94>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			printf("%X\n", long_par);
			break;
		default:
			break;
    a3b8:	00022906 	br	ac60 <_Z9MIDI_pollv+0x924>
	    }
	    printf("\n");*/
		channel = (bufMidi[1] & 0x0F);
		ctrl = bufMidi[2];
		par = bufMidi[3];
	switch (bufMidi[1] & 0xF0) {
    a3bc:	10c02c20 	cmpeqi	r3,r2,176
    a3c0:	18000b1e 	bne	r3,zero,a3f0 <_Z9MIDI_pollv+0xb4>
    a3c4:	10803820 	cmpeqi	r2,r2,224
    a3c8:	10021b1e 	bne	r2,zero,ac38 <_Z9MIDI_pollv+0x8fc>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
			printf("%X\n", long_par);
			break;
		default:
			break;
    a3cc:	00022406 	br	ac60 <_Z9MIDI_pollv+0x924>
			//if (vel) printf("Note On\t");
			//else printf("Note Off\t");
			//printf("%X\t", bufMidi[1]);
			//printf("%X\t", bufMidi[2]);
			//printf("%X\n", bufMidi[3]);
			set_note(channel, ctrl, par);
    a3d0:	e0bfee03 	ldbu	r2,-72(fp)
    a3d4:	e0ffee43 	ldbu	r3,-71(fp)
    a3d8:	e13fee83 	ldbu	r4,-70(fp)
    a3dc:	200d883a 	mov	r6,r4
    a3e0:	180b883a 	mov	r5,r3
    a3e4:	1009883a 	mov	r4,r2
    a3e8:	00055b40 	call	55b4 <_Z8set_notehhh>
			break;
    a3ec:	00021c06 	br	ac60 <_Z9MIDI_pollv+0x924>
		case CONTROL_CHANGE:
			long_par = par;
    a3f0:	e0bfee83 	ldbu	r2,-70(fp)
    a3f4:	e0bfed15 	stw	r2,-76(fp)
			switch(ctrl) {
    a3f8:	e0bfee43 	ldbu	r2,-71(fp)
    a3fc:	10c01ba8 	cmpgeui	r3,r2,110
    a400:	18020b1e 	bne	r3,zero,ac30 <_Z9MIDI_pollv+0x8f4>
    a404:	100690ba 	slli	r3,r2,2
    a408:	00800074 	movhi	r2,1
    a40c:	10a90704 	addi	r2,r2,-23524
    a410:	1885883a 	add	r2,r3,r2
    a414:	10800017 	ldw	r2,0(r2)
    a418:	1000683a 	jmp	r2
    a41c:	0000ac30 	cmpltui	zero,zero,688
    a420:	0000ac30 	cmpltui	zero,zero,688
    a424:	0000ac30 	cmpltui	zero,zero,688
    a428:	0000a75c 	xori	zero,zero,669
    a42c:	0000ac30 	cmpltui	zero,zero,688
    a430:	0000ac30 	cmpltui	zero,zero,688
    a434:	0000ac30 	cmpltui	zero,zero,688
    a438:	0000a5d4 	movui	zero,663
    a43c:	0000ac30 	cmpltui	zero,zero,688
    a440:	0000ac30 	cmpltui	zero,zero,688
    a444:	0000ac30 	cmpltui	zero,zero,688
    a448:	0000ac30 	cmpltui	zero,zero,688
    a44c:	0000ac30 	cmpltui	zero,zero,688
    a450:	0000ac30 	cmpltui	zero,zero,688
    a454:	0000ac30 	cmpltui	zero,zero,688
    a458:	0000ac30 	cmpltui	zero,zero,688
    a45c:	0000ac30 	cmpltui	zero,zero,688
    a460:	0000ac30 	cmpltui	zero,zero,688
    a464:	0000ac30 	cmpltui	zero,zero,688
    a468:	0000ac30 	cmpltui	zero,zero,688
    a46c:	0000ac30 	cmpltui	zero,zero,688
    a470:	0000ac30 	cmpltui	zero,zero,688
    a474:	0000ac30 	cmpltui	zero,zero,688
    a478:	0000ac30 	cmpltui	zero,zero,688
    a47c:	0000ac30 	cmpltui	zero,zero,688
    a480:	0000ac30 	cmpltui	zero,zero,688
    a484:	0000ac30 	cmpltui	zero,zero,688
    a488:	0000ac30 	cmpltui	zero,zero,688
    a48c:	0000ac30 	cmpltui	zero,zero,688
    a490:	0000ac30 	cmpltui	zero,zero,688
    a494:	0000ac30 	cmpltui	zero,zero,688
    a498:	0000ac30 	cmpltui	zero,zero,688
    a49c:	0000ac30 	cmpltui	zero,zero,688
    a4a0:	0000ac30 	cmpltui	zero,zero,688
    a4a4:	0000ac30 	cmpltui	zero,zero,688
    a4a8:	0000ac30 	cmpltui	zero,zero,688
    a4ac:	0000ac30 	cmpltui	zero,zero,688
    a4b0:	0000ac30 	cmpltui	zero,zero,688
    a4b4:	0000ac30 	cmpltui	zero,zero,688
    a4b8:	0000ac30 	cmpltui	zero,zero,688
    a4bc:	0000ac30 	cmpltui	zero,zero,688
    a4c0:	0000ac30 	cmpltui	zero,zero,688
    a4c4:	0000ac30 	cmpltui	zero,zero,688
    a4c8:	0000ac30 	cmpltui	zero,zero,688
    a4cc:	0000ac30 	cmpltui	zero,zero,688
    a4d0:	0000ac30 	cmpltui	zero,zero,688
    a4d4:	0000ac30 	cmpltui	zero,zero,688
    a4d8:	0000ac30 	cmpltui	zero,zero,688
    a4dc:	0000ac30 	cmpltui	zero,zero,688
    a4e0:	0000ac30 	cmpltui	zero,zero,688
    a4e4:	0000ac30 	cmpltui	zero,zero,688
    a4e8:	0000ac30 	cmpltui	zero,zero,688
    a4ec:	0000ac30 	cmpltui	zero,zero,688
    a4f0:	0000ac30 	cmpltui	zero,zero,688
    a4f4:	0000ac30 	cmpltui	zero,zero,688
    a4f8:	0000ac30 	cmpltui	zero,zero,688
    a4fc:	0000ac30 	cmpltui	zero,zero,688
    a500:	0000ac30 	cmpltui	zero,zero,688
    a504:	0000ac30 	cmpltui	zero,zero,688
    a508:	0000ac30 	cmpltui	zero,zero,688
    a50c:	0000ac30 	cmpltui	zero,zero,688
    a510:	0000ac30 	cmpltui	zero,zero,688
    a514:	0000ac30 	cmpltui	zero,zero,688
    a518:	0000ac30 	cmpltui	zero,zero,688
    a51c:	0000a5ec 	andhi	zero,zero,663
    a520:	0000ac30 	cmpltui	zero,zero,688
    a524:	0000ac30 	cmpltui	zero,zero,688
    a528:	0000ac30 	cmpltui	zero,zero,688
    a52c:	0000ac30 	cmpltui	zero,zero,688
    a530:	0000ac30 	cmpltui	zero,zero,688
    a534:	0000ac30 	cmpltui	zero,zero,688
    a538:	0000ac30 	cmpltui	zero,zero,688
    a53c:	0000a7f4 	movhi	zero,671
    a540:	0000a62c 	andhi	zero,zero,664
    a544:	0000ac30 	cmpltui	zero,zero,688
    a548:	0000a6c4 	movi	zero,667
    a54c:	0000ac30 	cmpltui	zero,zero,688
    a550:	0000ac30 	cmpltui	zero,zero,688
    a554:	0000ac30 	cmpltui	zero,zero,688
    a558:	0000ac30 	cmpltui	zero,zero,688
    a55c:	0000ac30 	cmpltui	zero,zero,688
    a560:	0000ac30 	cmpltui	zero,zero,688
    a564:	0000a61c 	xori	zero,zero,664
    a568:	0000ac30 	cmpltui	zero,zero,688
    a56c:	0000ac30 	cmpltui	zero,zero,688
    a570:	0000ac30 	cmpltui	zero,zero,688
    a574:	0000ac30 	cmpltui	zero,zero,688
    a578:	0000ac30 	cmpltui	zero,zero,688
    a57c:	0000ac30 	cmpltui	zero,zero,688
    a580:	0000ac30 	cmpltui	zero,zero,688
    a584:	0000ac30 	cmpltui	zero,zero,688
    a588:	0000ac30 	cmpltui	zero,zero,688
    a58c:	0000ac30 	cmpltui	zero,zero,688
    a590:	0000ac30 	cmpltui	zero,zero,688
    a594:	0000ac30 	cmpltui	zero,zero,688
    a598:	0000ac30 	cmpltui	zero,zero,688
    a59c:	0000ac30 	cmpltui	zero,zero,688
    a5a0:	0000ac30 	cmpltui	zero,zero,688
    a5a4:	0000ac30 	cmpltui	zero,zero,688
    a5a8:	0000ac30 	cmpltui	zero,zero,688
    a5ac:	0000ac30 	cmpltui	zero,zero,688
    a5b0:	0000ac30 	cmpltui	zero,zero,688
    a5b4:	0000ac30 	cmpltui	zero,zero,688
    a5b8:	0000ac30 	cmpltui	zero,zero,688
    a5bc:	0000a88c 	andi	zero,zero,674
    a5c0:	0000a924 	muli	zero,zero,676
    a5c4:	0000a9bc 	xorhi	zero,zero,678
    a5c8:	0000aa54 	movui	zero,681
    a5cc:	0000aaec 	andhi	zero,zero,683
    a5d0:	0000ab90 	cmplti	zero,zero,686
				case MOD_WHEEL:
					break;
				case CHAN_VOL:
					SGTL5000vol_change(i2c_dev, par);
    a5d4:	d0b24417 	ldw	r2,-14064(gp)
    a5d8:	e0ffee83 	ldbu	r3,-70(fp)
    a5dc:	180b883a 	mov	r5,r3
    a5e0:	1009883a 	mov	r4,r2
    a5e4:	00072640 	call	7264 <_Z18SGTL5000vol_changeP20ALT_AVALON_I2C_DEV_sh>
					break;
    a5e8:	00019206 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case SUSTAIN_PEDAL:
					if(ped_flip) long_par = ~long_par;
    a5ec:	d0b24703 	ldbu	r2,-14052(gp)
    a5f0:	10803fcc 	andi	r2,r2,255
    a5f4:	10000326 	beq	r2,zero,a604 <_Z9MIDI_pollv+0x2c8>
    a5f8:	e0bfed17 	ldw	r2,-76(fp)
    a5fc:	0084303a 	nor	r2,zero,r2
    a600:	e0bfed15 	stw	r2,-76(fp)
					set_ctrl(channel, SUS, long_par);
    a604:	e0bfee03 	ldbu	r2,-72(fp)
    a608:	e1bfed17 	ldw	r6,-76(fp)
    a60c:	01400184 	movi	r5,6
    a610:	1009883a 	mov	r4,r2
    a614:	000565c0 	call	565c <_Z8set_ctrlhhm>
					break;
    a618:	00018606 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case PEDAL_FLIP:
					ped_flip = par;
    a61c:	e0bfee83 	ldbu	r2,-70(fp)
    a620:	1004c03a 	cmpne	r2,r2,zero
    a624:	d0b24705 	stb	r2,-14052(gp)
					break;
    a628:	00018206 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case ATT_TIME_H:
					att_h= (par * 5000) / 0x7F;
    a62c:	e0bfee83 	ldbu	r2,-70(fp)
    a630:	0144e204 	movi	r5,5000
    a634:	1009883a 	mov	r4,r2
    a638:	000d9380 	call	d938 <__mulsi3>
    a63c:	01401fc4 	movi	r5,127
    a640:	1009883a 	mov	r4,r2
    a644:	000d7840 	call	d784 <__divsi3>
    a648:	d0b2450d 	sth	r2,-14060(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a64c:	d0b2450b 	ldhu	r2,-14060(gp)
    a650:	123fffcc 	andi	r8,r2,65535
    a654:	d0a5a40b 	ldhu	r2,-26992(gp)
    a658:	127fffcc 	andi	r9,r2,65535
    a65c:	d0b2458b 	ldhu	r2,-14058(gp)
    a660:	12bfffcc 	andi	r10,r2,65535
    a664:	d0a5a48b 	ldhu	r2,-26990(gp)
    a668:	12ffffcc 	andi	r11,r2,65535
    a66c:	d0b2460b 	ldhu	r2,-14056(gp)
    a670:	10bfffcc 	andi	r2,r2,65535
    a674:	d0e5a50b 	ldhu	r3,-26988(gp)
    a678:	18ffffcc 	andi	r3,r3,65535
    a67c:	d132468b 	ldhu	r4,-14054(gp)
    a680:	213fffcc 	andi	r4,r4,65535
    a684:	d165a58b 	ldhu	r5,-26986(gp)
    a688:	297fffcc 	andi	r5,r5,65535
    a68c:	d1a5a617 	ldw	r6,-26984(gp)
    a690:	d1e5a717 	ldw	r7,-26980(gp)
    a694:	d9c00515 	stw	r7,20(sp)
    a698:	d9800415 	stw	r6,16(sp)
    a69c:	d9400315 	stw	r5,12(sp)
    a6a0:	d9000215 	stw	r4,8(sp)
    a6a4:	d8c00115 	stw	r3,4(sp)
    a6a8:	d8800015 	stw	r2,0(sp)
    a6ac:	580f883a 	mov	r7,r11
    a6b0:	500d883a 	mov	r6,r10
    a6b4:	480b883a 	mov	r5,r9
    a6b8:	4009883a 	mov	r4,r8
    a6bc:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a6c0:	00015c06 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case DEC_TIME_H:
					dec_h = (par * 5000) / 0x7F;
    a6c4:	e0bfee83 	ldbu	r2,-70(fp)
    a6c8:	0144e204 	movi	r5,5000
    a6cc:	1009883a 	mov	r4,r2
    a6d0:	000d9380 	call	d938 <__mulsi3>
    a6d4:	01401fc4 	movi	r5,127
    a6d8:	1009883a 	mov	r4,r2
    a6dc:	000d7840 	call	d784 <__divsi3>
    a6e0:	d0b2458d 	sth	r2,-14058(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a6e4:	d0b2450b 	ldhu	r2,-14060(gp)
    a6e8:	123fffcc 	andi	r8,r2,65535
    a6ec:	d0a5a40b 	ldhu	r2,-26992(gp)
    a6f0:	127fffcc 	andi	r9,r2,65535
    a6f4:	d0b2458b 	ldhu	r2,-14058(gp)
    a6f8:	12bfffcc 	andi	r10,r2,65535
    a6fc:	d0a5a48b 	ldhu	r2,-26990(gp)
    a700:	12ffffcc 	andi	r11,r2,65535
    a704:	d0b2460b 	ldhu	r2,-14056(gp)
    a708:	10bfffcc 	andi	r2,r2,65535
    a70c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a710:	18ffffcc 	andi	r3,r3,65535
    a714:	d132468b 	ldhu	r4,-14054(gp)
    a718:	213fffcc 	andi	r4,r4,65535
    a71c:	d165a58b 	ldhu	r5,-26986(gp)
    a720:	297fffcc 	andi	r5,r5,65535
    a724:	d1a5a617 	ldw	r6,-26984(gp)
    a728:	d1e5a717 	ldw	r7,-26980(gp)
    a72c:	d9c00515 	stw	r7,20(sp)
    a730:	d9800415 	stw	r6,16(sp)
    a734:	d9400315 	stw	r5,12(sp)
    a738:	d9000215 	stw	r4,8(sp)
    a73c:	d8c00115 	stw	r3,4(sp)
    a740:	d8800015 	stw	r2,0(sp)
    a744:	580f883a 	mov	r7,r11
    a748:	500d883a 	mov	r6,r10
    a74c:	480b883a 	mov	r5,r9
    a750:	4009883a 	mov	r4,r8
    a754:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a758:	00013606 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case SUS_TIME_H:
					sus_h = (par * 20000) / 0x7F;
    a75c:	e0bfee83 	ldbu	r2,-70(fp)
    a760:	01538804 	movi	r5,20000
    a764:	1009883a 	mov	r4,r2
    a768:	000d9380 	call	d938 <__mulsi3>
    a76c:	01401fc4 	movi	r5,127
    a770:	1009883a 	mov	r4,r2
    a774:	000d7840 	call	d784 <__divsi3>
    a778:	d0b2460d 	sth	r2,-14056(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a77c:	d0b2450b 	ldhu	r2,-14060(gp)
    a780:	123fffcc 	andi	r8,r2,65535
    a784:	d0a5a40b 	ldhu	r2,-26992(gp)
    a788:	127fffcc 	andi	r9,r2,65535
    a78c:	d0b2458b 	ldhu	r2,-14058(gp)
    a790:	12bfffcc 	andi	r10,r2,65535
    a794:	d0a5a48b 	ldhu	r2,-26990(gp)
    a798:	12ffffcc 	andi	r11,r2,65535
    a79c:	d0b2460b 	ldhu	r2,-14056(gp)
    a7a0:	10bfffcc 	andi	r2,r2,65535
    a7a4:	d0e5a50b 	ldhu	r3,-26988(gp)
    a7a8:	18ffffcc 	andi	r3,r3,65535
    a7ac:	d132468b 	ldhu	r4,-14054(gp)
    a7b0:	213fffcc 	andi	r4,r4,65535
    a7b4:	d165a58b 	ldhu	r5,-26986(gp)
    a7b8:	297fffcc 	andi	r5,r5,65535
    a7bc:	d1a5a617 	ldw	r6,-26984(gp)
    a7c0:	d1e5a717 	ldw	r7,-26980(gp)
    a7c4:	d9c00515 	stw	r7,20(sp)
    a7c8:	d9800415 	stw	r6,16(sp)
    a7cc:	d9400315 	stw	r5,12(sp)
    a7d0:	d9000215 	stw	r4,8(sp)
    a7d4:	d8c00115 	stw	r3,4(sp)
    a7d8:	d8800015 	stw	r2,0(sp)
    a7dc:	580f883a 	mov	r7,r11
    a7e0:	500d883a 	mov	r6,r10
    a7e4:	480b883a 	mov	r5,r9
    a7e8:	4009883a 	mov	r4,r8
    a7ec:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a7f0:	00011006 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case REL_TIME_H:
					rel_h = (par * 10000) / 0x7F;
    a7f4:	e0bfee83 	ldbu	r2,-70(fp)
    a7f8:	0149c404 	movi	r5,10000
    a7fc:	1009883a 	mov	r4,r2
    a800:	000d9380 	call	d938 <__mulsi3>
    a804:	01401fc4 	movi	r5,127
    a808:	1009883a 	mov	r4,r2
    a80c:	000d7840 	call	d784 <__divsi3>
    a810:	d0b2468d 	sth	r2,-14054(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a814:	d0b2450b 	ldhu	r2,-14060(gp)
    a818:	123fffcc 	andi	r8,r2,65535
    a81c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a820:	127fffcc 	andi	r9,r2,65535
    a824:	d0b2458b 	ldhu	r2,-14058(gp)
    a828:	12bfffcc 	andi	r10,r2,65535
    a82c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a830:	12ffffcc 	andi	r11,r2,65535
    a834:	d0b2460b 	ldhu	r2,-14056(gp)
    a838:	10bfffcc 	andi	r2,r2,65535
    a83c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a840:	18ffffcc 	andi	r3,r3,65535
    a844:	d132468b 	ldhu	r4,-14054(gp)
    a848:	213fffcc 	andi	r4,r4,65535
    a84c:	d165a58b 	ldhu	r5,-26986(gp)
    a850:	297fffcc 	andi	r5,r5,65535
    a854:	d1a5a617 	ldw	r6,-26984(gp)
    a858:	d1e5a717 	ldw	r7,-26980(gp)
    a85c:	d9c00515 	stw	r7,20(sp)
    a860:	d9800415 	stw	r6,16(sp)
    a864:	d9400315 	stw	r5,12(sp)
    a868:	d9000215 	stw	r4,8(sp)
    a86c:	d8c00115 	stw	r3,4(sp)
    a870:	d8800015 	stw	r2,0(sp)
    a874:	580f883a 	mov	r7,r11
    a878:	500d883a 	mov	r6,r10
    a87c:	480b883a 	mov	r5,r9
    a880:	4009883a 	mov	r4,r8
    a884:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a888:	0000ea06 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case ATT_TIME_L:
					att_l = (par * 200) / 0x7F;
    a88c:	e0bfee83 	ldbu	r2,-70(fp)
    a890:	01403204 	movi	r5,200
    a894:	1009883a 	mov	r4,r2
    a898:	000d9380 	call	d938 <__mulsi3>
    a89c:	01401fc4 	movi	r5,127
    a8a0:	1009883a 	mov	r4,r2
    a8a4:	000d7840 	call	d784 <__divsi3>
    a8a8:	d0a5a40d 	sth	r2,-26992(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a8ac:	d0b2450b 	ldhu	r2,-14060(gp)
    a8b0:	123fffcc 	andi	r8,r2,65535
    a8b4:	d0a5a40b 	ldhu	r2,-26992(gp)
    a8b8:	127fffcc 	andi	r9,r2,65535
    a8bc:	d0b2458b 	ldhu	r2,-14058(gp)
    a8c0:	12bfffcc 	andi	r10,r2,65535
    a8c4:	d0a5a48b 	ldhu	r2,-26990(gp)
    a8c8:	12ffffcc 	andi	r11,r2,65535
    a8cc:	d0b2460b 	ldhu	r2,-14056(gp)
    a8d0:	10bfffcc 	andi	r2,r2,65535
    a8d4:	d0e5a50b 	ldhu	r3,-26988(gp)
    a8d8:	18ffffcc 	andi	r3,r3,65535
    a8dc:	d132468b 	ldhu	r4,-14054(gp)
    a8e0:	213fffcc 	andi	r4,r4,65535
    a8e4:	d165a58b 	ldhu	r5,-26986(gp)
    a8e8:	297fffcc 	andi	r5,r5,65535
    a8ec:	d1a5a617 	ldw	r6,-26984(gp)
    a8f0:	d1e5a717 	ldw	r7,-26980(gp)
    a8f4:	d9c00515 	stw	r7,20(sp)
    a8f8:	d9800415 	stw	r6,16(sp)
    a8fc:	d9400315 	stw	r5,12(sp)
    a900:	d9000215 	stw	r4,8(sp)
    a904:	d8c00115 	stw	r3,4(sp)
    a908:	d8800015 	stw	r2,0(sp)
    a90c:	580f883a 	mov	r7,r11
    a910:	500d883a 	mov	r6,r10
    a914:	480b883a 	mov	r5,r9
    a918:	4009883a 	mov	r4,r8
    a91c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a920:	0000c406 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case DEC_TIME_L:
					dec_l = (par * 200) / 0x7F;
    a924:	e0bfee83 	ldbu	r2,-70(fp)
    a928:	01403204 	movi	r5,200
    a92c:	1009883a 	mov	r4,r2
    a930:	000d9380 	call	d938 <__mulsi3>
    a934:	01401fc4 	movi	r5,127
    a938:	1009883a 	mov	r4,r2
    a93c:	000d7840 	call	d784 <__divsi3>
    a940:	d0a5a48d 	sth	r2,-26990(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a944:	d0b2450b 	ldhu	r2,-14060(gp)
    a948:	123fffcc 	andi	r8,r2,65535
    a94c:	d0a5a40b 	ldhu	r2,-26992(gp)
    a950:	127fffcc 	andi	r9,r2,65535
    a954:	d0b2458b 	ldhu	r2,-14058(gp)
    a958:	12bfffcc 	andi	r10,r2,65535
    a95c:	d0a5a48b 	ldhu	r2,-26990(gp)
    a960:	12ffffcc 	andi	r11,r2,65535
    a964:	d0b2460b 	ldhu	r2,-14056(gp)
    a968:	10bfffcc 	andi	r2,r2,65535
    a96c:	d0e5a50b 	ldhu	r3,-26988(gp)
    a970:	18ffffcc 	andi	r3,r3,65535
    a974:	d132468b 	ldhu	r4,-14054(gp)
    a978:	213fffcc 	andi	r4,r4,65535
    a97c:	d165a58b 	ldhu	r5,-26986(gp)
    a980:	297fffcc 	andi	r5,r5,65535
    a984:	d1a5a617 	ldw	r6,-26984(gp)
    a988:	d1e5a717 	ldw	r7,-26980(gp)
    a98c:	d9c00515 	stw	r7,20(sp)
    a990:	d9800415 	stw	r6,16(sp)
    a994:	d9400315 	stw	r5,12(sp)
    a998:	d9000215 	stw	r4,8(sp)
    a99c:	d8c00115 	stw	r3,4(sp)
    a9a0:	d8800015 	stw	r2,0(sp)
    a9a4:	580f883a 	mov	r7,r11
    a9a8:	500d883a 	mov	r6,r10
    a9ac:	480b883a 	mov	r5,r9
    a9b0:	4009883a 	mov	r4,r8
    a9b4:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    a9b8:	00009e06 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case SUS_TIME_L:
					sus_l = (par * 800) / 0x7F;
    a9bc:	e0bfee83 	ldbu	r2,-70(fp)
    a9c0:	0140c804 	movi	r5,800
    a9c4:	1009883a 	mov	r4,r2
    a9c8:	000d9380 	call	d938 <__mulsi3>
    a9cc:	01401fc4 	movi	r5,127
    a9d0:	1009883a 	mov	r4,r2
    a9d4:	000d7840 	call	d784 <__divsi3>
    a9d8:	d0a5a50d 	sth	r2,-26988(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    a9dc:	d0b2450b 	ldhu	r2,-14060(gp)
    a9e0:	123fffcc 	andi	r8,r2,65535
    a9e4:	d0a5a40b 	ldhu	r2,-26992(gp)
    a9e8:	127fffcc 	andi	r9,r2,65535
    a9ec:	d0b2458b 	ldhu	r2,-14058(gp)
    a9f0:	12bfffcc 	andi	r10,r2,65535
    a9f4:	d0a5a48b 	ldhu	r2,-26990(gp)
    a9f8:	12ffffcc 	andi	r11,r2,65535
    a9fc:	d0b2460b 	ldhu	r2,-14056(gp)
    aa00:	10bfffcc 	andi	r2,r2,65535
    aa04:	d0e5a50b 	ldhu	r3,-26988(gp)
    aa08:	18ffffcc 	andi	r3,r3,65535
    aa0c:	d132468b 	ldhu	r4,-14054(gp)
    aa10:	213fffcc 	andi	r4,r4,65535
    aa14:	d165a58b 	ldhu	r5,-26986(gp)
    aa18:	297fffcc 	andi	r5,r5,65535
    aa1c:	d1a5a617 	ldw	r6,-26984(gp)
    aa20:	d1e5a717 	ldw	r7,-26980(gp)
    aa24:	d9c00515 	stw	r7,20(sp)
    aa28:	d9800415 	stw	r6,16(sp)
    aa2c:	d9400315 	stw	r5,12(sp)
    aa30:	d9000215 	stw	r4,8(sp)
    aa34:	d8c00115 	stw	r3,4(sp)
    aa38:	d8800015 	stw	r2,0(sp)
    aa3c:	580f883a 	mov	r7,r11
    aa40:	500d883a 	mov	r6,r10
    aa44:	480b883a 	mov	r5,r9
    aa48:	4009883a 	mov	r4,r8
    aa4c:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    aa50:	00007806 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case REL_TIME_L:
					rel_l = (par * 400) / 0x7F;
    aa54:	e0bfee83 	ldbu	r2,-70(fp)
    aa58:	01406404 	movi	r5,400
    aa5c:	1009883a 	mov	r4,r2
    aa60:	000d9380 	call	d938 <__mulsi3>
    aa64:	01401fc4 	movi	r5,127
    aa68:	1009883a 	mov	r4,r2
    aa6c:	000d7840 	call	d784 <__divsi3>
    aa70:	d0a5a58d 	sth	r2,-26986(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    aa74:	d0b2450b 	ldhu	r2,-14060(gp)
    aa78:	123fffcc 	andi	r8,r2,65535
    aa7c:	d0a5a40b 	ldhu	r2,-26992(gp)
    aa80:	127fffcc 	andi	r9,r2,65535
    aa84:	d0b2458b 	ldhu	r2,-14058(gp)
    aa88:	12bfffcc 	andi	r10,r2,65535
    aa8c:	d0a5a48b 	ldhu	r2,-26990(gp)
    aa90:	12ffffcc 	andi	r11,r2,65535
    aa94:	d0b2460b 	ldhu	r2,-14056(gp)
    aa98:	10bfffcc 	andi	r2,r2,65535
    aa9c:	d0e5a50b 	ldhu	r3,-26988(gp)
    aaa0:	18ffffcc 	andi	r3,r3,65535
    aaa4:	d132468b 	ldhu	r4,-14054(gp)
    aaa8:	213fffcc 	andi	r4,r4,65535
    aaac:	d165a58b 	ldhu	r5,-26986(gp)
    aab0:	297fffcc 	andi	r5,r5,65535
    aab4:	d1a5a617 	ldw	r6,-26984(gp)
    aab8:	d1e5a717 	ldw	r7,-26980(gp)
    aabc:	d9c00515 	stw	r7,20(sp)
    aac0:	d9800415 	stw	r6,16(sp)
    aac4:	d9400315 	stw	r5,12(sp)
    aac8:	d9000215 	stw	r4,8(sp)
    aacc:	d8c00115 	stw	r3,4(sp)
    aad0:	d8800015 	stw	r2,0(sp)
    aad4:	580f883a 	mov	r7,r11
    aad8:	500d883a 	mov	r6,r10
    aadc:	480b883a 	mov	r5,r9
    aae0:	4009883a 	mov	r4,r8
    aae4:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    aae8:	00005206 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case PEAK_ATT:
					peak_att = (float) (par * 2) / 0x7F;
    aaec:	e0bfee83 	ldbu	r2,-70(fp)
    aaf0:	1085883a 	add	r2,r2,r2
    aaf4:	1009883a 	mov	r4,r2
    aaf8:	000eca80 	call	eca8 <__floatsisf>
    aafc:	1007883a 	mov	r3,r2
    ab00:	0150bfb4 	movhi	r5,17150
    ab04:	1809883a 	mov	r4,r3
    ab08:	000de280 	call	de28 <__divsf3>
    ab0c:	1007883a 	mov	r3,r2
    ab10:	1805883a 	mov	r2,r3
    ab14:	d0a5a615 	stw	r2,-26984(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    ab18:	d0b2450b 	ldhu	r2,-14060(gp)
    ab1c:	123fffcc 	andi	r8,r2,65535
    ab20:	d0a5a40b 	ldhu	r2,-26992(gp)
    ab24:	127fffcc 	andi	r9,r2,65535
    ab28:	d0b2458b 	ldhu	r2,-14058(gp)
    ab2c:	12bfffcc 	andi	r10,r2,65535
    ab30:	d0a5a48b 	ldhu	r2,-26990(gp)
    ab34:	12ffffcc 	andi	r11,r2,65535
    ab38:	d0b2460b 	ldhu	r2,-14056(gp)
    ab3c:	10bfffcc 	andi	r2,r2,65535
    ab40:	d0e5a50b 	ldhu	r3,-26988(gp)
    ab44:	18ffffcc 	andi	r3,r3,65535
    ab48:	d132468b 	ldhu	r4,-14054(gp)
    ab4c:	213fffcc 	andi	r4,r4,65535
    ab50:	d165a58b 	ldhu	r5,-26986(gp)
    ab54:	297fffcc 	andi	r5,r5,65535
    ab58:	d1a5a617 	ldw	r6,-26984(gp)
    ab5c:	d1e5a717 	ldw	r7,-26980(gp)
    ab60:	d9c00515 	stw	r7,20(sp)
    ab64:	d9800415 	stw	r6,16(sp)
    ab68:	d9400315 	stw	r5,12(sp)
    ab6c:	d9000215 	stw	r4,8(sp)
    ab70:	d8c00115 	stw	r3,4(sp)
    ab74:	d8800015 	stw	r2,0(sp)
    ab78:	580f883a 	mov	r7,r11
    ab7c:	500d883a 	mov	r6,r10
    ab80:	480b883a 	mov	r5,r9
    ab84:	4009883a 	mov	r4,r8
    ab88:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    ab8c:	00002906 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				case PEAK_SUS:
					peak_sus = (float) par / 0x7F;
    ab90:	e0bfee83 	ldbu	r2,-70(fp)
    ab94:	1009883a 	mov	r4,r2
    ab98:	000edcc0 	call	edcc <__floatunsisf>
    ab9c:	1007883a 	mov	r3,r2
    aba0:	0150bfb4 	movhi	r5,17150
    aba4:	1809883a 	mov	r4,r3
    aba8:	000de280 	call	de28 <__divsf3>
    abac:	1007883a 	mov	r3,r2
    abb0:	1805883a 	mov	r2,r3
    abb4:	d0a5a715 	stw	r2,-26980(gp)
					calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    abb8:	d0b2450b 	ldhu	r2,-14060(gp)
    abbc:	123fffcc 	andi	r8,r2,65535
    abc0:	d0a5a40b 	ldhu	r2,-26992(gp)
    abc4:	127fffcc 	andi	r9,r2,65535
    abc8:	d0b2458b 	ldhu	r2,-14058(gp)
    abcc:	12bfffcc 	andi	r10,r2,65535
    abd0:	d0a5a48b 	ldhu	r2,-26990(gp)
    abd4:	12ffffcc 	andi	r11,r2,65535
    abd8:	d0b2460b 	ldhu	r2,-14056(gp)
    abdc:	10bfffcc 	andi	r2,r2,65535
    abe0:	d0e5a50b 	ldhu	r3,-26988(gp)
    abe4:	18ffffcc 	andi	r3,r3,65535
    abe8:	d132468b 	ldhu	r4,-14054(gp)
    abec:	213fffcc 	andi	r4,r4,65535
    abf0:	d165a58b 	ldhu	r5,-26986(gp)
    abf4:	297fffcc 	andi	r5,r5,65535
    abf8:	d1a5a617 	ldw	r6,-26984(gp)
    abfc:	d1e5a717 	ldw	r7,-26980(gp)
    ac00:	d9c00515 	stw	r7,20(sp)
    ac04:	d9800415 	stw	r6,16(sp)
    ac08:	d9400315 	stw	r5,12(sp)
    ac0c:	d9000215 	stw	r4,8(sp)
    ac10:	d8c00115 	stw	r3,4(sp)
    ac14:	d8800015 	stw	r2,0(sp)
    ac18:	580f883a 	mov	r7,r11
    ac1c:	500d883a 	mov	r6,r10
    ac20:	480b883a 	mov	r5,r9
    ac24:	4009883a 	mov	r4,r8
    ac28:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
					break;
    ac2c:	00000106 	br	ac34 <_Z9MIDI_pollv+0x8f8>
				default:
					break;
    ac30:	0001883a 	nop
			}
			break;
    ac34:	00000a06 	br	ac60 <_Z9MIDI_pollv+0x924>
		case PITCH_BEND:
			long_par = (par << 7) + ctrl;
    ac38:	e0bfee83 	ldbu	r2,-70(fp)
    ac3c:	100691fa 	slli	r3,r2,7
    ac40:	e0bfee43 	ldbu	r2,-71(fp)
    ac44:	1885883a 	add	r2,r3,r2
    ac48:	e0bfed15 	stw	r2,-76(fp)
			printf("%X\n", long_par);
    ac4c:	e17fed17 	ldw	r5,-76(fp)
    ac50:	010000f4 	movhi	r4,3
    ac54:	212dad04 	addi	r4,r4,-18764
    ac58:	00100880 	call	10088 <printf>
			break;
    ac5c:	0001883a 	nop
		default:
			break;
	}
  }
}
    ac60:	0001883a 	nop
    ac64:	e037883a 	mov	sp,fp
    ac68:	dfc00117 	ldw	ra,4(sp)
    ac6c:	df000017 	ldw	fp,0(sp)
    ac70:	dec00204 	addi	sp,sp,8
    ac74:	f800283a 	ret

0000ac78 <main>:

int main() {
    ac78:	defff804 	addi	sp,sp,-32
    ac7c:	dfc00715 	stw	ra,28(sp)
    ac80:	df000615 	stw	fp,24(sp)
    ac84:	df000604 	addi	fp,sp,24

	printf("Initializing SGTL5000...\n");
    ac88:	010000f4 	movhi	r4,3
    ac8c:	212dae04 	addi	r4,r4,-18760
    ac90:	00101a40 	call	101a4 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    ac94:	010000f4 	movhi	r4,3
    ac98:	212db504 	addi	r4,r4,-18732
    ac9c:	00210b40 	call	210b4 <alt_avalon_i2c_open>
    aca0:	d0b24415 	stw	r2,-14064(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    aca4:	d0b24417 	ldw	r2,-14064(gp)
    aca8:	1000031e 	bne	r2,zero,acb8 <main+0x40>
    acac:	010000f4 	movhi	r4,3
    acb0:	212db804 	addi	r4,r4,-18720
    acb4:	00101a40 	call	101a4 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    acb8:	d0b24417 	ldw	r2,-14064(gp)
    acbc:	1009883a 	mov	r4,r2
    acc0:	0006fb40 	call	6fb4 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    acc4:	010000f4 	movhi	r4,3
    acc8:	212dc004 	addi	r4,r4,-18688
    accc:	00101a40 	call	101a4 <puts>
	SGTL5000audio_on(i2c_dev);
    acd0:	d0b24417 	ldw	r2,-14064(gp)
    acd4:	1009883a 	mov	r4,r2
    acd8:	000704c0 	call	704c <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	SGTL5000status(i2c_dev);
    acdc:	d0b24417 	ldw	r2,-14064(gp)
    ace0:	1009883a 	mov	r4,r2
    ace4:	00070b80 	call	70b8 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>
	printf("Audio running\n");
    ace8:	010000f4 	movhi	r4,3
    acec:	212dc504 	addi	r4,r4,-18668
    acf0:	00101a40 	call	101a4 <puts>

	printf("Initializing ADSR...\n");
    acf4:	010000f4 	movhi	r4,3
    acf8:	212dc904 	addi	r4,r4,-18652
    acfc:	00101a40 	call	101a4 <puts>
	calc_adsr(att_h, att_l, dec_h, dec_l, sus_h, sus_l, rel_h, rel_l, peak_att, peak_sus);
    ad00:	d0b2450b 	ldhu	r2,-14060(gp)
    ad04:	123fffcc 	andi	r8,r2,65535
    ad08:	d0a5a40b 	ldhu	r2,-26992(gp)
    ad0c:	127fffcc 	andi	r9,r2,65535
    ad10:	d0b2458b 	ldhu	r2,-14058(gp)
    ad14:	12bfffcc 	andi	r10,r2,65535
    ad18:	d0a5a48b 	ldhu	r2,-26990(gp)
    ad1c:	12ffffcc 	andi	r11,r2,65535
    ad20:	d0b2460b 	ldhu	r2,-14056(gp)
    ad24:	10bfffcc 	andi	r2,r2,65535
    ad28:	d0e5a50b 	ldhu	r3,-26988(gp)
    ad2c:	18ffffcc 	andi	r3,r3,65535
    ad30:	d132468b 	ldhu	r4,-14054(gp)
    ad34:	213fffcc 	andi	r4,r4,65535
    ad38:	d165a58b 	ldhu	r5,-26986(gp)
    ad3c:	297fffcc 	andi	r5,r5,65535
    ad40:	d1a5a617 	ldw	r6,-26984(gp)
    ad44:	d1e5a717 	ldw	r7,-26980(gp)
    ad48:	d9c00515 	stw	r7,20(sp)
    ad4c:	d9800415 	stw	r6,16(sp)
    ad50:	d9400315 	stw	r5,12(sp)
    ad54:	d9000215 	stw	r4,8(sp)
    ad58:	d8c00115 	stw	r3,4(sp)
    ad5c:	d8800015 	stw	r2,0(sp)
    ad60:	580f883a 	mov	r7,r11
    ad64:	500d883a 	mov	r6,r10
    ad68:	480b883a 	mov	r5,r9
    ad6c:	4009883a 	mov	r4,r8
    ad70:	00056c00 	call	56c0 <_Z9calc_adsrttttttttff>
	printf("ADSR set\n");
    ad74:	010000f4 	movhi	r4,3
    ad78:	212dcf04 	addi	r4,r4,-18628
    ad7c:	00101a40 	call	101a4 <puts>

	MIDI_setup();
    ad80:	000a2c40 	call	a2c4 <_Z10MIDI_setupv>
	printf("MIDI set\n");
    ad84:	010000f4 	movhi	r4,3
    ad88:	212dd204 	addi	r4,r4,-18616
    ad8c:	00101a40 	call	101a4 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    ad90:	010000f4 	movhi	r4,3
    ad94:	21086104 	addi	r4,r4,8580
    ad98:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    ad9c:	10803fcc 	andi	r2,r2,255
    ada0:	10802418 	cmpnei	r2,r2,144
    ada4:	10803fcc 	andi	r2,r2,255
    ada8:	10000426 	beq	r2,zero,adbc <main+0x144>
		Usb.Task();
    adac:	010000f4 	movhi	r4,3
    adb0:	21086104 	addi	r4,r4,8580
    adb4:	000181c0 	call	181c <_ZN3USB4TaskEv>
	printf("ADSR set\n");

	MIDI_setup();
	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    adb8:	003ff506 	br	ad90 <__alt_data_end+0xfc00ad90>
		Usb.Task();
	}
	printf("USB running\n");
    adbc:	010000f4 	movhi	r4,3
    adc0:	212dd504 	addi	r4,r4,-18604
    adc4:	00101a40 	call	101a4 <puts>

	while(1) {
		if ( Midi ) {
    adc8:	010000f4 	movhi	r4,3
    adcc:	21089004 	addi	r4,r4,8768
    add0:	000ae7c0 	call	ae7c <_ZN9USBH_MIDIcvbEv>
    add4:	10803fcc 	andi	r2,r2,255
    add8:	103ffb26 	beq	r2,zero,adc8 <__alt_data_end+0xfc00adc8>
			MIDI_poll();
    addc:	000a33c0 	call	a33c <_Z9MIDI_pollv>
	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
		Usb.Task();
	}
	printf("USB running\n");

	while(1) {
    ade0:	003ff906 	br	adc8 <__alt_data_end+0xfc00adc8>

0000ade4 <_Z41__static_initialization_and_destruction_0ii>:
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    ade4:	defffc04 	addi	sp,sp,-16
    ade8:	dfc00315 	stw	ra,12(sp)
    adec:	df000215 	stw	fp,8(sp)
    adf0:	df000204 	addi	fp,sp,8
    adf4:	e13ffe15 	stw	r4,-8(fp)
    adf8:	e17fff15 	stw	r5,-4(fp)
    adfc:	e0bffe17 	ldw	r2,-8(fp)
    ae00:	10800058 	cmpnei	r2,r2,1
    ae04:	10000b1e 	bne	r2,zero,ae34 <_Z41__static_initialization_and_destruction_0ii+0x50>
    ae08:	e0ffff17 	ldw	r3,-4(fp)
    ae0c:	00bfffd4 	movui	r2,65535
    ae10:	1880081e 	bne	r3,r2,ae34 <_Z41__static_initialization_and_destruction_0ii+0x50>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include "include/SPI.h"

USB Usb;
    ae14:	010000f4 	movhi	r4,3
    ae18:	21086104 	addi	r4,r4,8580
    ae1c:	00007040 	call	704 <_ZN3USBC1Ev>
USBH_MIDI  Midi(&Usb);
    ae20:	014000f4 	movhi	r5,3
    ae24:	29486104 	addi	r5,r5,8580
    ae28:	010000f4 	movhi	r4,3
    ae2c:	21089004 	addi	r4,r4,8768
    ae30:	00072f00 	call	72f0 <_ZN9USBH_MIDIC1EP3USB>
	while(1) {
		if ( Midi ) {
			MIDI_poll();
		}
	}
}
    ae34:	0001883a 	nop
    ae38:	e037883a 	mov	sp,fp
    ae3c:	dfc00117 	ldw	ra,4(sp)
    ae40:	df000017 	ldw	fp,0(sp)
    ae44:	dec00204 	addi	sp,sp,8
    ae48:	f800283a 	ret

0000ae4c <_GLOBAL__sub_I_Usb>:
    ae4c:	defffe04 	addi	sp,sp,-8
    ae50:	dfc00115 	stw	ra,4(sp)
    ae54:	df000015 	stw	fp,0(sp)
    ae58:	d839883a 	mov	fp,sp
    ae5c:	017fffd4 	movui	r5,65535
    ae60:	01000044 	movi	r4,1
    ae64:	000ade40 	call	ade4 <_Z41__static_initialization_and_destruction_0ii>
    ae68:	e037883a 	mov	sp,fp
    ae6c:	dfc00117 	ldw	ra,4(sp)
    ae70:	df000017 	ldw	fp,0(sp)
    ae74:	dec00204 	addi	sp,sp,8
    ae78:	f800283a 	ret

0000ae7c <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    ae7c:	defffe04 	addi	sp,sp,-8
    ae80:	df000115 	stw	fp,4(sp)
    ae84:	df000104 	addi	fp,sp,4
    ae88:	e13fff15 	stw	r4,-4(fp)
    ae8c:	e0bfff17 	ldw	r2,-4(fp)
    ae90:	10800343 	ldbu	r2,13(r2)
    ae94:	e037883a 	mov	sp,fp
    ae98:	df000017 	ldw	fp,0(sp)
    ae9c:	dec00104 	addi	sp,sp,4
    aea0:	f800283a 	ret

0000aea4 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    aea4:	defffe04 	addi	sp,sp,-8
    aea8:	df000115 	stw	fp,4(sp)
    aeac:	df000104 	addi	fp,sp,4
    aeb0:	e13fff15 	stw	r4,-4(fp)
    aeb4:	e0bfff17 	ldw	r2,-4(fp)
    aeb8:	1080040b 	ldhu	r2,16(r2)
    aebc:	e037883a 	mov	sp,fp
    aec0:	df000017 	ldw	fp,0(sp)
    aec4:	dec00104 	addi	sp,sp,4
    aec8:	f800283a 	ret

0000aecc <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    aecc:	defffe04 	addi	sp,sp,-8
    aed0:	df000115 	stw	fp,4(sp)
    aed4:	df000104 	addi	fp,sp,4
    aed8:	e13fff15 	stw	r4,-4(fp)
    aedc:	e0bfff17 	ldw	r2,-4(fp)
    aee0:	1080038b 	ldhu	r2,14(r2)
    aee4:	e037883a 	mov	sp,fp
    aee8:	df000017 	ldw	fp,0(sp)
    aeec:	dec00104 	addi	sp,sp,4
    aef0:	f800283a 	ret

0000aef4 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    aef4:	defffd04 	addi	sp,sp,-12
    aef8:	df000215 	stw	fp,8(sp)
    aefc:	df000204 	addi	fp,sp,8
    af00:	e13ffe15 	stw	r4,-8(fp)
    af04:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    af08:	e0bffe17 	ldw	r2,-8(fp)
    af0c:	e0ffff17 	ldw	r3,-4(fp)
    af10:	10c01815 	stw	r3,96(r2)
        };
    af14:	0001883a 	nop
    af18:	e037883a 	mov	sp,fp
    af1c:	df000017 	ldw	fp,0(sp)
    af20:	dec00104 	addi	sp,sp,4
    af24:	f800283a 	ret

0000af28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    af28:	008000f4 	movhi	r2,3
    af2c:	10ade704 	addi	r2,r2,-18532
    af30:	20800015 	stw	r2,0(r4)
    af34:	000bd001 	jmpi	bd00 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000af38 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    af38:	defffe04 	addi	sp,sp,-8
    af3c:	008000f4 	movhi	r2,3
    af40:	dc000015 	stw	r16,0(sp)
    af44:	dfc00115 	stw	ra,4(sp)
    af48:	10ade704 	addi	r2,r2,-18532
    af4c:	20800015 	stw	r2,0(r4)
    af50:	2021883a 	mov	r16,r4
    af54:	000bd000 	call	bd00 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    af58:	8009883a 	mov	r4,r16
    af5c:	dfc00117 	ldw	ra,4(sp)
    af60:	dc000017 	ldw	r16,0(sp)
    af64:	dec00204 	addi	sp,sp,8
    af68:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000af6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    af6c:	defff504 	addi	sp,sp,-44
    af70:	dc000115 	stw	r16,4(sp)
    af74:	38800117 	ldw	r2,4(r7)
    af78:	24000117 	ldw	r16,4(r4)
    af7c:	df000915 	stw	fp,36(sp)
    af80:	ddc00815 	stw	r23,32(sp)
    af84:	dd800715 	stw	r22,28(sp)
    af88:	dcc00415 	stw	r19,16(sp)
    af8c:	dc800315 	stw	r18,12(sp)
    af90:	dc400215 	stw	r17,8(sp)
    af94:	dfc00a15 	stw	ra,40(sp)
    af98:	dd400615 	stw	r21,24(sp)
    af9c:	dd000515 	stw	r20,20(sp)
    afa0:	2823883a 	mov	r17,r5
    afa4:	3039883a 	mov	fp,r6
    afa8:	dcc00b17 	ldw	r19,44(sp)
    afac:	ddc00c17 	ldw	r23,48(sp)
    afb0:	dd800d17 	ldw	r22,52(sp)
    afb4:	dc800e17 	ldw	r18,56(sp)
    afb8:	80800b26 	beq	r16,r2,afe8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    afbc:	80c00007 	ldb	r3,0(r16)
    afc0:	2029883a 	mov	r20,r4
    afc4:	01000a84 	movi	r4,42
    afc8:	382b883a 	mov	r21,r7
    afcc:	19001a26 	beq	r3,r4,b038 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    afd0:	100b883a 	mov	r5,r2
    afd4:	8009883a 	mov	r4,r16
    afd8:	d8c00015 	stw	r3,0(sp)
    afdc:	00105d40 	call	105d4 <strcmp>
    afe0:	d8c00017 	ldw	r3,0(sp)
    afe4:	1000141e 	bne	r2,zero,b038 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    afe8:	94c00015 	stw	r19,0(r18)
    afec:	97000115 	stw	fp,4(r18)
    aff0:	88002816 	blt	r17,zero,b094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    aff4:	9c63883a 	add	r17,r19,r17
    aff8:	b4403226 	beq	r22,r17,b0c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    affc:	00800044 	movi	r2,1
    b000:	90800315 	stw	r2,12(r18)
    b004:	0005883a 	mov	r2,zero
    b008:	dfc00a17 	ldw	ra,40(sp)
    b00c:	df000917 	ldw	fp,36(sp)
    b010:	ddc00817 	ldw	r23,32(sp)
    b014:	dd800717 	ldw	r22,28(sp)
    b018:	dd400617 	ldw	r21,24(sp)
    b01c:	dd000517 	ldw	r20,20(sp)
    b020:	dcc00417 	ldw	r19,16(sp)
    b024:	dc800317 	ldw	r18,12(sp)
    b028:	dc400217 	ldw	r17,8(sp)
    b02c:	dc000117 	ldw	r16,4(sp)
    b030:	dec00b04 	addi	sp,sp,44
    b034:	f800283a 	ret
    b038:	9d801926 	beq	r19,r22,b0a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    b03c:	a1000217 	ldw	r4,8(r20)
    b040:	a80f883a 	mov	r7,r21
    b044:	e00d883a 	mov	r6,fp
    b048:	20800017 	ldw	r2,0(r4)
    b04c:	dc800e15 	stw	r18,56(sp)
    b050:	dd800d15 	stw	r22,52(sp)
    b054:	ddc00c15 	stw	r23,48(sp)
    b058:	dcc00b15 	stw	r19,44(sp)
    b05c:	10800717 	ldw	r2,28(r2)
    b060:	880b883a 	mov	r5,r17
    b064:	dfc00a17 	ldw	ra,40(sp)
    b068:	df000917 	ldw	fp,36(sp)
    b06c:	ddc00817 	ldw	r23,32(sp)
    b070:	dd800717 	ldw	r22,28(sp)
    b074:	dd400617 	ldw	r21,24(sp)
    b078:	dd000517 	ldw	r20,20(sp)
    b07c:	dcc00417 	ldw	r19,16(sp)
    b080:	dc800317 	ldw	r18,12(sp)
    b084:	dc400217 	ldw	r17,8(sp)
    b088:	dc000117 	ldw	r16,4(sp)
    b08c:	dec00b04 	addi	sp,sp,44
    b090:	1000683a 	jmp	r2
    b094:	00bfff84 	movi	r2,-2
    b098:	88bfda1e 	bne	r17,r2,b004 <__alt_data_end+0xfc00b004>
    b09c:	003fd706 	br	affc <__alt_data_end+0xfc00affc>
    b0a0:	b9400117 	ldw	r5,4(r23)
    b0a4:	81400526 	beq	r16,r5,b0bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    b0a8:	00800a84 	movi	r2,42
    b0ac:	18bfe326 	beq	r3,r2,b03c <__alt_data_end+0xfc00b03c>
    b0b0:	8009883a 	mov	r4,r16
    b0b4:	00105d40 	call	105d4 <strcmp>
    b0b8:	103fe01e 	bne	r2,zero,b03c <__alt_data_end+0xfc00b03c>
    b0bc:	97000215 	stw	fp,8(r18)
    b0c0:	003fd006 	br	b004 <__alt_data_end+0xfc00b004>
    b0c4:	00800184 	movi	r2,6
    b0c8:	003fcd06 	br	b000 <__alt_data_end+0xfc00b000>

0000b0cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b0cc:	defffa04 	addi	sp,sp,-24
    b0d0:	dc000215 	stw	r16,8(sp)
    b0d4:	dc000617 	ldw	r16,24(sp)
    b0d8:	dc800415 	stw	r18,16(sp)
    b0dc:	dc400315 	stw	r17,12(sp)
    b0e0:	dfc00515 	stw	ra,20(sp)
    b0e4:	2023883a 	mov	r17,r4
    b0e8:	2825883a 	mov	r18,r5
    b0ec:	81800b26 	beq	r16,r6,b11c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    b0f0:	89000217 	ldw	r4,8(r17)
    b0f4:	900b883a 	mov	r5,r18
    b0f8:	20800017 	ldw	r2,0(r4)
    b0fc:	dc000615 	stw	r16,24(sp)
    b100:	10800817 	ldw	r2,32(r2)
    b104:	dfc00517 	ldw	ra,20(sp)
    b108:	dc800417 	ldw	r18,16(sp)
    b10c:	dc400317 	ldw	r17,12(sp)
    b110:	dc000217 	ldw	r16,8(sp)
    b114:	dec00604 	addi	sp,sp,24
    b118:	1000683a 	jmp	r2
    b11c:	21000117 	ldw	r4,4(r4)
    b120:	39400117 	ldw	r5,4(r7)
    b124:	21400926 	beq	r4,r5,b14c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    b128:	20c00007 	ldb	r3,0(r4)
    b12c:	00800a84 	movi	r2,42
    b130:	18bfef26 	beq	r3,r2,b0f0 <__alt_data_end+0xfc00b0f0>
    b134:	d9800015 	stw	r6,0(sp)
    b138:	d9c00115 	stw	r7,4(sp)
    b13c:	00105d40 	call	105d4 <strcmp>
    b140:	d9800017 	ldw	r6,0(sp)
    b144:	d9c00117 	ldw	r7,4(sp)
    b148:	103fe91e 	bne	r2,zero,b0f0 <__alt_data_end+0xfc00b0f0>
    b14c:	00800184 	movi	r2,6
    b150:	dfc00517 	ldw	ra,20(sp)
    b154:	dc800417 	ldw	r18,16(sp)
    b158:	dc400317 	ldw	r17,12(sp)
    b15c:	dc000217 	ldw	r16,8(sp)
    b160:	dec00604 	addi	sp,sp,24
    b164:	f800283a 	ret

0000b168 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b168:	defffb04 	addi	sp,sp,-20
    b16c:	dcc00315 	stw	r19,12(sp)
    b170:	dc800215 	stw	r18,8(sp)
    b174:	dc400115 	stw	r17,4(sp)
    b178:	dc000015 	stw	r16,0(sp)
    b17c:	dfc00415 	stw	ra,16(sp)
    b180:	2027883a 	mov	r19,r4
    b184:	2821883a 	mov	r16,r5
    b188:	3023883a 	mov	r17,r6
    b18c:	3825883a 	mov	r18,r7
    b190:	000bd440 	call	bd44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b194:	10c03fcc 	andi	r3,r2,255
    b198:	18000726 	beq	r3,zero,b1b8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    b19c:	dfc00417 	ldw	ra,16(sp)
    b1a0:	dcc00317 	ldw	r19,12(sp)
    b1a4:	dc800217 	ldw	r18,8(sp)
    b1a8:	dc400117 	ldw	r17,4(sp)
    b1ac:	dc000017 	ldw	r16,0(sp)
    b1b0:	dec00504 	addi	sp,sp,20
    b1b4:	f800283a 	ret
    b1b8:	99000217 	ldw	r4,8(r19)
    b1bc:	900f883a 	mov	r7,r18
    b1c0:	880d883a 	mov	r6,r17
    b1c4:	20800017 	ldw	r2,0(r4)
    b1c8:	800b883a 	mov	r5,r16
    b1cc:	10800617 	ldw	r2,24(r2)
    b1d0:	dfc00417 	ldw	ra,16(sp)
    b1d4:	dcc00317 	ldw	r19,12(sp)
    b1d8:	dc800217 	ldw	r18,8(sp)
    b1dc:	dc400117 	ldw	r17,4(sp)
    b1e0:	dc000017 	ldw	r16,0(sp)
    b1e4:	dec00504 	addi	sp,sp,20
    b1e8:	1000683a 	jmp	r2

0000b1ec <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    b1ec:	008000f4 	movhi	r2,3
    b1f0:	10adff04 	addi	r2,r2,-18436
    b1f4:	20800015 	stw	r2,0(r4)
    b1f8:	000bd001 	jmpi	bd00 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000b1fc <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    b1fc:	defffe04 	addi	sp,sp,-8
    b200:	008000f4 	movhi	r2,3
    b204:	dc000015 	stw	r16,0(sp)
    b208:	dfc00115 	stw	ra,4(sp)
    b20c:	10adff04 	addi	r2,r2,-18436
    b210:	20800015 	stw	r2,0(r4)
    b214:	2021883a 	mov	r16,r4
    b218:	000bd000 	call	bd00 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    b21c:	8009883a 	mov	r4,r16
    b220:	dfc00117 	ldw	ra,4(sp)
    b224:	dc000017 	ldw	r16,0(sp)
    b228:	dec00204 	addi	sp,sp,8
    b22c:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000b230 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    b230:	defff504 	addi	sp,sp,-44
    b234:	dc400215 	stw	r17,8(sp)
    b238:	dc400b17 	ldw	r17,44(sp)
    b23c:	df000915 	stw	fp,36(sp)
    b240:	ddc00815 	stw	r23,32(sp)
    b244:	dd800715 	stw	r22,28(sp)
    b248:	dc000115 	stw	r16,4(sp)
    b24c:	dfc00a15 	stw	ra,40(sp)
    b250:	dd400615 	stw	r21,24(sp)
    b254:	dd000515 	stw	r20,20(sp)
    b258:	dcc00415 	stw	r19,16(sp)
    b25c:	dc800315 	stw	r18,12(sp)
    b260:	3039883a 	mov	fp,r6
    b264:	2021883a 	mov	r16,r4
    b268:	282d883a 	mov	r22,r5
    b26c:	382f883a 	mov	r23,r7
    b270:	34402c26 	beq	r6,r17,b324 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    b274:	85000317 	ldw	r20,12(r16)
    b278:	048000c4 	movi	r18,3
    b27c:	04ffff44 	movi	r19,-3
    b280:	a484983a 	sll	r2,r20,r18
    b284:	b80f883a 	mov	r7,r23
    b288:	b00b883a 	mov	r5,r22
    b28c:	10800304 	addi	r2,r2,12
    b290:	80a1883a 	add	r16,r16,r2
    b294:	a0001626 	beq	r20,zero,b2f0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    b298:	81800017 	ldw	r6,0(r16)
    b29c:	a53fffc4 	addi	r20,r20,-1
    b2a0:	3080008c 	andi	r2,r6,2
    b2a4:	3540004c 	andi	r21,r6,1
    b2a8:	10000d26 	beq	r2,zero,b2e0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b2ac:	300dd23a 	srai	r6,r6,8
    b2b0:	a8000426 	beq	r21,zero,b2c4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    b2b4:	b4c00a26 	beq	r22,r19,b2e0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    b2b8:	e0800017 	ldw	r2,0(fp)
    b2bc:	118d883a 	add	r6,r2,r6
    b2c0:	31800017 	ldw	r6,0(r6)
    b2c4:	813fff17 	ldw	r4,-4(r16)
    b2c8:	e18d883a 	add	r6,fp,r6
    b2cc:	20800017 	ldw	r2,0(r4)
    b2d0:	dc400015 	stw	r17,0(sp)
    b2d4:	10800817 	ldw	r2,32(r2)
    b2d8:	103ee83a 	callr	r2
    b2dc:	90801b16 	blt	r18,r2,b34c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    b2e0:	843ffe04 	addi	r16,r16,-8
    b2e4:	b80f883a 	mov	r7,r23
    b2e8:	b00b883a 	mov	r5,r22
    b2ec:	a03fea1e 	bne	r20,zero,b298 <__alt_data_end+0xfc00b298>
    b2f0:	00800044 	movi	r2,1
    b2f4:	dfc00a17 	ldw	ra,40(sp)
    b2f8:	df000917 	ldw	fp,36(sp)
    b2fc:	ddc00817 	ldw	r23,32(sp)
    b300:	dd800717 	ldw	r22,28(sp)
    b304:	dd400617 	ldw	r21,24(sp)
    b308:	dd000517 	ldw	r20,20(sp)
    b30c:	dcc00417 	ldw	r19,16(sp)
    b310:	dc800317 	ldw	r18,12(sp)
    b314:	dc400217 	ldw	r17,8(sp)
    b318:	dc000117 	ldw	r16,4(sp)
    b31c:	dec00b04 	addi	sp,sp,44
    b320:	f800283a 	ret
    b324:	21000117 	ldw	r4,4(r4)
    b328:	39400117 	ldw	r5,4(r7)
    b32c:	21400526 	beq	r4,r5,b344 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    b330:	20c00007 	ldb	r3,0(r4)
    b334:	00800a84 	movi	r2,42
    b338:	18bfce26 	beq	r3,r2,b274 <__alt_data_end+0xfc00b274>
    b33c:	00105d40 	call	105d4 <strcmp>
    b340:	103fcc1e 	bne	r2,zero,b274 <__alt_data_end+0xfc00b274>
    b344:	00800184 	movi	r2,6
    b348:	003fea06 	br	b2f4 <__alt_data_end+0xfc00b2f4>
    b34c:	a83fe926 	beq	r21,zero,b2f4 <__alt_data_end+0xfc00b2f4>
    b350:	10800054 	ori	r2,r2,1
    b354:	003fe706 	br	b2f4 <__alt_data_end+0xfc00b2f4>

0000b358 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    b358:	deffe804 	addi	sp,sp,-96
    b35c:	df001615 	stw	fp,88(sp)
    b360:	df001b17 	ldw	fp,108(sp)
    b364:	ddc01515 	stw	r23,84(sp)
    b368:	dd001215 	stw	r20,72(sp)
    b36c:	e0800417 	ldw	r2,16(fp)
    b370:	dcc01115 	stw	r19,68(sp)
    b374:	dfc01715 	stw	ra,92(sp)
    b378:	dd801415 	stw	r22,80(sp)
    b37c:	dd401315 	stw	r21,76(sp)
    b380:	dc801015 	stw	r18,64(sp)
    b384:	dc400f15 	stw	r17,60(sp)
    b388:	dc000e15 	stw	r16,56(sp)
    b38c:	d9000b15 	stw	r4,44(sp)
    b390:	d9c00915 	stw	r7,36(sp)
    b394:	1080040c 	andi	r2,r2,16
    b398:	282f883a 	mov	r23,r5
    b39c:	3027883a 	mov	r19,r6
    b3a0:	dd001817 	ldw	r20,96(sp)
    b3a4:	10000226 	beq	r2,zero,b3b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    b3a8:	20800217 	ldw	r2,8(r4)
    b3ac:	e0800415 	stw	r2,16(fp)
    b3b0:	d8c01a17 	ldw	r3,104(sp)
    b3b4:	a0c0cb26 	beq	r20,r3,b6e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    b3b8:	d8c00b17 	ldw	r3,44(sp)
    b3bc:	1c000117 	ldw	r16,4(r3)
    b3c0:	d8c00917 	ldw	r3,36(sp)
    b3c4:	19400117 	ldw	r5,4(r3)
    b3c8:	2c000626 	beq	r5,r16,b3e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    b3cc:	80c00007 	ldb	r3,0(r16)
    b3d0:	00800a84 	movi	r2,42
    b3d4:	18801b26 	beq	r3,r2,b444 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b3d8:	8009883a 	mov	r4,r16
    b3dc:	00105d40 	call	105d4 <strcmp>
    b3e0:	1000181e 	bne	r2,zero,b444 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    b3e4:	e5000015 	stw	r20,0(fp)
    b3e8:	e4c00115 	stw	r19,4(fp)
    b3ec:	b8010916 	blt	r23,zero,b814 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    b3f0:	d8c01a17 	ldw	r3,104(sp)
    b3f4:	a5d9883a 	add	r12,r20,r23
    b3f8:	1b014126 	beq	r3,r12,b900 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    b3fc:	00800044 	movi	r2,1
    b400:	e0800315 	stw	r2,12(fp)
    b404:	0005883a 	mov	r2,zero
    b408:	dfc01717 	ldw	ra,92(sp)
    b40c:	df001617 	ldw	fp,88(sp)
    b410:	ddc01517 	ldw	r23,84(sp)
    b414:	dd801417 	ldw	r22,80(sp)
    b418:	dd401317 	ldw	r21,76(sp)
    b41c:	dd001217 	ldw	r20,72(sp)
    b420:	dcc01117 	ldw	r19,68(sp)
    b424:	dc801017 	ldw	r18,64(sp)
    b428:	dc400f17 	ldw	r17,60(sp)
    b42c:	dc000e17 	ldw	r16,56(sp)
    b430:	dec01804 	addi	sp,sp,96
    b434:	f800283a 	ret
    b438:	d8c00917 	ldw	r3,36(sp)
    b43c:	18800117 	ldw	r2,4(r3)
    b440:	80bfe826 	beq	r16,r2,b3e4 <__alt_data_end+0xfc00b3e4>
    b444:	b800ef16 	blt	r23,zero,b804 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    b448:	d8c01a17 	ldw	r3,104(sp)
    b44c:	1dedc83a 	sub	r22,r3,r23
    b450:	e005883a 	mov	r2,fp
    b454:	00c00044 	movi	r3,1
    b458:	b039883a 	mov	fp,r22
    b45c:	0021883a 	mov	r16,zero
    b460:	a02d883a 	mov	r22,r20
    b464:	d8000a45 	stb	zero,41(sp)
    b468:	d8c00a05 	stb	r3,40(sp)
    b46c:	048000c4 	movi	r18,3
    b470:	1029883a 	mov	r20,r2
    b474:	d8c00b17 	ldw	r3,44(sp)
    b478:	b805883a 	mov	r2,r23
    b47c:	1ac00317 	ldw	r11,12(r3)
    b480:	581490fa 	slli	r10,r11,3
    b484:	52800304 	addi	r10,r10,12
    b488:	1aab883a 	add	r21,r3,r10
    b48c:	b007883a 	mov	r3,r22
    b490:	582d883a 	mov	r22,r11
    b494:	a82f883a 	mov	r23,r21
    b498:	1823883a 	mov	r17,r3
    b49c:	102b883a 	mov	r21,r2
    b4a0:	b0005526 	beq	r22,zero,b5f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    b4a4:	b8800017 	ldw	r2,0(r23)
    b4a8:	a1400417 	ldw	r5,16(r20)
    b4ac:	d8000415 	stw	zero,16(sp)
    b4b0:	d8000515 	stw	zero,20(sp)
    b4b4:	d8000615 	stw	zero,24(sp)
    b4b8:	d8000715 	stw	zero,28(sp)
    b4bc:	d9400815 	stw	r5,32(sp)
    b4c0:	1100004c 	andi	r4,r2,1
    b4c4:	1007d23a 	srai	r3,r2,8
    b4c8:	20007526 	beq	r4,zero,b6a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    b4cc:	89000017 	ldw	r4,0(r17)
    b4d0:	99800054 	ori	r6,r19,1
    b4d4:	20c7883a 	add	r3,r4,r3
    b4d8:	18c00017 	ldw	r3,0(r3)
    b4dc:	88c7883a 	add	r3,r17,r3
    b4e0:	e0000326 	beq	fp,zero,b4f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    b4e4:	d9c00a03 	ldbu	r7,40(sp)
    b4e8:	e0c9803a 	cmpltu	r4,fp,r3
    b4ec:	21c07226 	beq	r4,r7,b6b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    b4f0:	1080008c 	andi	r2,r2,2
    b4f4:	1000041e 	bne	r2,zero,b508 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    b4f8:	013fff84 	movi	r4,-2
    b4fc:	a9007126 	beq	r21,r4,b6c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    b500:	00bfff44 	movi	r2,-3
    b504:	308c703a 	and	r6,r6,r2
    b508:	b93fff17 	ldw	r4,-4(r23)
    b50c:	d9400404 	addi	r5,sp,16
    b510:	d9c00917 	ldw	r7,36(sp)
    b514:	20800017 	ldw	r2,0(r4)
    b518:	d9400315 	stw	r5,12(sp)
    b51c:	d9401a17 	ldw	r5,104(sp)
    b520:	d8c00015 	stw	r3,0(sp)
    b524:	d9400215 	stw	r5,8(sp)
    b528:	d9401917 	ldw	r5,100(sp)
    b52c:	d9400115 	stw	r5,4(sp)
    b530:	10800717 	ldw	r2,28(r2)
    b534:	a80b883a 	mov	r5,r21
    b538:	103ee83a 	callr	r2
    b53c:	a1400217 	ldw	r5,8(r20)
    b540:	d9000617 	ldw	r4,24(sp)
    b544:	d8c00717 	ldw	r3,28(sp)
    b548:	2908b03a 	or	r4,r5,r4
    b54c:	a1000215 	stw	r4,8(r20)
    b550:	01400184 	movi	r5,6
    b554:	1940a426 	beq	r3,r5,b7e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b558:	01400084 	movi	r5,2
    b55c:	1940a226 	beq	r3,r5,b7e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    b560:	81403fcc 	andi	r5,r16,255
    b564:	a1800017 	ldw	r6,0(r20)
    b568:	28004f1e 	bne	r5,zero,b6a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    b56c:	30007926 	beq	r6,zero,b754 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    b570:	d9400417 	ldw	r5,16(sp)
    b574:	29806926 	beq	r5,r6,b71c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    b578:	28006d26 	beq	r5,zero,b730 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    b57c:	a2800317 	ldw	r10,12(r20)
    b580:	9100250e 	bge	r18,r4,b618 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b584:	2100004c 	andi	r4,r4,1
    b588:	20000326 	beq	r4,zero,b598 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    b58c:	a0800417 	ldw	r2,16(r20)
    b590:	1080008c 	andi	r2,r2,2
    b594:	1000201e 	bne	r2,zero,b618 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    b598:	50004d1e 	bne	r10,zero,b6d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    b59c:	18002626 	beq	r3,zero,b638 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    b5a0:	02800044 	movi	r10,1
    b5a4:	181b883a 	mov	r13,r3
    b5a8:	1a84f03a 	xor	r2,r3,r10
    b5ac:	501f883a 	mov	r15,r10
    b5b0:	90801f0e 	bge	r18,r2,b630 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    b5b4:	90c0880e 	bge	r18,r3,b7d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    b5b8:	d9400417 	ldw	r5,16(sp)
    b5bc:	1880008c 	andi	r2,r3,2
    b5c0:	d9000517 	ldw	r4,20(sp)
    b5c4:	a1400015 	stw	r5,0(r20)
    b5c8:	0021883a 	mov	r16,zero
    b5cc:	a1000115 	stw	r4,4(r20)
    b5d0:	a0c00315 	stw	r3,12(r20)
    b5d4:	10004f1e 	bne	r2,zero,b714 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b5d8:	6b40004c 	andi	r13,r13,1
    b5dc:	68004d26 	beq	r13,zero,b714 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    b5e0:	a1000217 	ldw	r4,8(r20)
    b5e4:	01400104 	movi	r5,4
    b5e8:	21408826 	beq	r4,r5,b80c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b5ec:	b5bfffc4 	addi	r22,r22,-1
    b5f0:	bdfffe04 	addi	r23,r23,-8
    b5f4:	b03fab1e 	bne	r22,zero,b4a4 <__alt_data_end+0xfc00b4a4>
    b5f8:	d8800a43 	ldbu	r2,41(sp)
    b5fc:	a82f883a 	mov	r23,r21
    b600:	882d883a 	mov	r22,r17
    b604:	10008126 	beq	r2,zero,b80c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b608:	dd400a03 	ldbu	r21,40(sp)
    b60c:	a8007f26 	beq	r21,zero,b80c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    b610:	d8000a05 	stb	zero,40(sp)
    b614:	003f9706 	br	b474 <__alt_data_end+0xfc00b474>
    b618:	501f883a 	mov	r15,r10
    b61c:	181b883a 	mov	r13,r3
    b620:	02800b0e 	bge	zero,r10,b650 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    b624:	00c0570e 	bge	zero,r3,b784 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    b628:	1a84f03a 	xor	r2,r3,r10
    b62c:	90bfe116 	blt	r18,r2,b5b4 <__alt_data_end+0xfc00b5b4>
    b630:	1bc6703a 	and	r3,r3,r15
    b634:	90c09916 	blt	r18,r3,b89c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    b638:	01000044 	movi	r4,1
    b63c:	a1000315 	stw	r4,12(r20)
    b640:	a0000015 	stw	zero,0(r20)
    b644:	a1000217 	ldw	r4,8(r20)
    b648:	04000044 	movi	r16,1
    b64c:	003fe506 	br	b5e4 <__alt_data_end+0xfc00b5e4>
    b650:	90c00a0e 	bge	r18,r3,b67c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b654:	1880004c 	andi	r2,r3,1
    b658:	10000426 	beq	r2,zero,b66c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    b65c:	d9000b17 	ldw	r4,44(sp)
    b660:	20800217 	ldw	r2,8(r4)
    b664:	1080008c 	andi	r2,r2,2
    b668:	1000041e 	bne	r2,zero,b67c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    b66c:	1880005c 	xori	r2,r3,1
    b670:	90bfd216 	blt	r18,r2,b5bc <__alt_data_end+0xfc00b5bc>
    b674:	03c00044 	movi	r15,1
    b678:	003fed06 	br	b630 <__alt_data_end+0xfc00b630>
    b67c:	a8006e16 	blt	r21,zero,b838 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    b680:	d8801a17 	ldw	r2,104(sp)
    b684:	354d883a 	add	r6,r6,r21
    b688:	11805026 	beq	r2,r6,b7cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    b68c:	00c0a50e 	bge	zero,r3,b924 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    b690:	03c00044 	movi	r15,1
    b694:	1bc4f03a 	xor	r2,r3,r15
    b698:	7815883a 	mov	r10,r15
    b69c:	003fc406 	br	b5b0 <__alt_data_end+0xfc00b5b0>
    b6a0:	980d883a 	mov	r6,r19
    b6a4:	003f8d06 	br	b4dc <__alt_data_end+0xfc00b4dc>
    b6a8:	303fb11e 	bne	r6,zero,b570 <__alt_data_end+0xfc00b570>
    b6ac:	d9400417 	ldw	r5,16(sp)
    b6b0:	283fb21e 	bne	r5,zero,b57c <__alt_data_end+0xfc00b57c>
    b6b4:	003fcb06 	br	b5e4 <__alt_data_end+0xfc00b5e4>
    b6b8:	00c00044 	movi	r3,1
    b6bc:	d8c00a45 	stb	r3,41(sp)
    b6c0:	003fca06 	br	b5ec <__alt_data_end+0xfc00b5ec>
    b6c4:	294000cc 	andi	r5,r5,3
    b6c8:	283fc826 	beq	r5,zero,b5ec <__alt_data_end+0xfc00b5ec>
    b6cc:	003f8c06 	br	b500 <__alt_data_end+0xfc00b500>
    b6d0:	18001a26 	beq	r3,zero,b73c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    b6d4:	181b883a 	mov	r13,r3
    b6d8:	501f883a 	mov	r15,r10
    b6dc:	50c4f03a 	xor	r2,r10,r3
    b6e0:	003fb306 	br	b5b0 <__alt_data_end+0xfc00b5b0>
    b6e4:	d8c00b17 	ldw	r3,44(sp)
    b6e8:	1c000117 	ldw	r16,4(r3)
    b6ec:	d8c01917 	ldw	r3,100(sp)
    b6f0:	19400117 	ldw	r5,4(r3)
    b6f4:	81400626 	beq	r16,r5,b710 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    b6f8:	80c00007 	ldb	r3,0(r16)
    b6fc:	00800a84 	movi	r2,42
    b700:	18bf4d26 	beq	r3,r2,b438 <__alt_data_end+0xfc00b438>
    b704:	8009883a 	mov	r4,r16
    b708:	00105d40 	call	105d4 <strcmp>
    b70c:	10005c1e 	bne	r2,zero,b880 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    b710:	e4c00215 	stw	r19,8(fp)
    b714:	0005883a 	mov	r2,zero
    b718:	003f3b06 	br	b408 <__alt_data_end+0xfc00b408>
    b71c:	a0c00117 	ldw	r3,4(r20)
    b720:	d8800517 	ldw	r2,20(sp)
    b724:	1884b03a 	or	r2,r3,r2
    b728:	a0800115 	stw	r2,4(r20)
    b72c:	003fad06 	br	b5e4 <__alt_data_end+0xfc00b5e4>
    b730:	10803fcc 	andi	r2,r2,255
    b734:	103f911e 	bne	r2,zero,b57c <__alt_data_end+0xfc00b57c>
    b738:	003faa06 	br	b5e4 <__alt_data_end+0xfc00b5e4>
    b73c:	501b883a 	mov	r13,r10
    b740:	5080005c 	xori	r2,r10,1
    b744:	5007883a 	mov	r3,r10
    b748:	90bfbb0e 	bge	r18,r2,b638 <__alt_data_end+0xfc00b638>
    b74c:	6880008c 	andi	r2,r13,2
    b750:	003f9f06 	br	b5d0 <__alt_data_end+0xfc00b5d0>
    b754:	d8c00417 	ldw	r3,16(sp)
    b758:	d9400517 	ldw	r5,20(sp)
    b75c:	a0c00015 	stw	r3,0(r20)
    b760:	a1400115 	stw	r5,4(r20)
    b764:	18000526 	beq	r3,zero,b77c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    b768:	20001626 	beq	r4,zero,b7c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    b76c:	d9400b17 	ldw	r5,44(sp)
    b770:	28c00217 	ldw	r3,8(r5)
    b774:	18c0004c 	andi	r3,r3,1
    b778:	183f2326 	beq	r3,zero,b408 <__alt_data_end+0xfc00b408>
    b77c:	1021883a 	mov	r16,r2
    b780:	003f9806 	br	b5e4 <__alt_data_end+0xfc00b5e4>
    b784:	9280060e 	bge	r18,r10,b7a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    b788:	5080004c 	andi	r2,r10,1
    b78c:	10002426 	beq	r2,zero,b820 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    b790:	d8c00b17 	ldw	r3,44(sp)
    b794:	18800217 	ldw	r2,8(r3)
    b798:	1080008c 	andi	r2,r2,2
    b79c:	10003c26 	beq	r2,zero,b890 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    b7a0:	d9400417 	ldw	r5,16(sp)
    b7a4:	a8004216 	blt	r21,zero,b8b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    b7a8:	d8c01a17 	ldw	r3,104(sp)
    b7ac:	2d45883a 	add	r2,r5,r21
    b7b0:	18805726 	beq	r3,r2,b910 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    b7b4:	7880005c 	xori	r2,r15,1
    b7b8:	781b883a 	mov	r13,r15
    b7bc:	5007883a 	mov	r3,r10
    b7c0:	003fe106 	br	b748 <__alt_data_end+0xfc00b748>
    b7c4:	1021883a 	mov	r16,r2
    b7c8:	003f8806 	br	b5ec <__alt_data_end+0xfc00b5ec>
    b7cc:	03c00184 	movi	r15,6
    b7d0:	00ffb016 	blt	zero,r3,b694 <__alt_data_end+0xfc00b694>
    b7d4:	7815883a 	mov	r10,r15
    b7d8:	7880008c 	andi	r2,r15,2
    b7dc:	781b883a 	mov	r13,r15
    b7e0:	5007883a 	mov	r3,r10
    b7e4:	003f7a06 	br	b5d0 <__alt_data_end+0xfc00b5d0>
    b7e8:	a039883a 	mov	fp,r20
    b7ec:	e0c00315 	stw	r3,12(fp)
    b7f0:	d8c00417 	ldw	r3,16(sp)
    b7f4:	a0c00015 	stw	r3,0(r20)
    b7f8:	d8c00517 	ldw	r3,20(sp)
    b7fc:	a0c00115 	stw	r3,4(r20)
    b800:	003f0106 	br	b408 <__alt_data_end+0xfc00b408>
    b804:	002d883a 	mov	r22,zero
    b808:	003f1106 	br	b450 <__alt_data_end+0xfc00b450>
    b80c:	8005883a 	mov	r2,r16
    b810:	003efd06 	br	b408 <__alt_data_end+0xfc00b408>
    b814:	00bfff84 	movi	r2,-2
    b818:	b8bfbe1e 	bne	r23,r2,b714 <__alt_data_end+0xfc00b714>
    b81c:	003ef706 	br	b3fc <__alt_data_end+0xfc00b3fc>
    b820:	5080005c 	xori	r2,r10,1
    b824:	90bf840e 	bge	r18,r2,b638 <__alt_data_end+0xfc00b638>
    b828:	501b883a 	mov	r13,r10
    b82c:	5080008c 	andi	r2,r10,2
    b830:	5007883a 	mov	r3,r10
    b834:	003f6606 	br	b5d0 <__alt_data_end+0xfc00b5d0>
    b838:	013fff84 	movi	r4,-2
    b83c:	a9003226 	beq	r21,r4,b908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    b840:	d9400917 	ldw	r5,36(sp)
    b844:	d9001a17 	ldw	r4,104(sp)
    b848:	d9c01917 	ldw	r7,100(sp)
    b84c:	28800017 	ldw	r2,0(r5)
    b850:	d9000015 	stw	r4,0(sp)
    b854:	d9000917 	ldw	r4,36(sp)
    b858:	10800817 	ldw	r2,32(r2)
    b85c:	a80b883a 	mov	r5,r21
    b860:	d8c00d15 	stw	r3,52(sp)
    b864:	db400c15 	stw	r13,48(sp)
    b868:	103ee83a 	callr	r2
    b86c:	1015883a 	mov	r10,r2
    b870:	101f883a 	mov	r15,r2
    b874:	db400c17 	ldw	r13,48(sp)
    b878:	d8c00d17 	ldw	r3,52(sp)
    b87c:	003f6906 	br	b624 <__alt_data_end+0xfc00b624>
    b880:	d8c00917 	ldw	r3,36(sp)
    b884:	19400117 	ldw	r5,4(r3)
    b888:	817ed31e 	bne	r16,r5,b3d8 <__alt_data_end+0xfc00b3d8>
    b88c:	003ed506 	br	b3e4 <__alt_data_end+0xfc00b3e4>
    b890:	5080005c 	xori	r2,r10,1
    b894:	90bfe416 	blt	r18,r2,b828 <__alt_data_end+0xfc00b828>
    b898:	003f6706 	br	b638 <__alt_data_end+0xfc00b638>
    b89c:	00800084 	movi	r2,2
    b8a0:	a0800315 	stw	r2,12(r20)
    b8a4:	a0000015 	stw	zero,0(r20)
    b8a8:	00800044 	movi	r2,1
    b8ac:	003ed606 	br	b408 <__alt_data_end+0xfc00b408>
    b8b0:	013fff84 	movi	r4,-2
    b8b4:	a9002526 	beq	r21,r4,b94c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    b8b8:	d8c00917 	ldw	r3,36(sp)
    b8bc:	d9c01917 	ldw	r7,100(sp)
    b8c0:	d9000917 	ldw	r4,36(sp)
    b8c4:	18800017 	ldw	r2,0(r3)
    b8c8:	d8c01a17 	ldw	r3,104(sp)
    b8cc:	280d883a 	mov	r6,r5
    b8d0:	a80b883a 	mov	r5,r21
    b8d4:	d8c00015 	stw	r3,0(sp)
    b8d8:	10800817 	ldw	r2,32(r2)
    b8dc:	da800c15 	stw	r10,48(sp)
    b8e0:	dbc00d15 	stw	r15,52(sp)
    b8e4:	103ee83a 	callr	r2
    b8e8:	da800c17 	ldw	r10,48(sp)
    b8ec:	1007883a 	mov	r3,r2
    b8f0:	101b883a 	mov	r13,r2
    b8f4:	dbc00d17 	ldw	r15,52(sp)
    b8f8:	1284f03a 	xor	r2,r2,r10
    b8fc:	003f2c06 	br	b5b0 <__alt_data_end+0xfc00b5b0>
    b900:	00800184 	movi	r2,6
    b904:	003ebe06 	br	b400 <__alt_data_end+0xfc00b400>
    b908:	00ff4b0e 	bge	zero,r3,b638 <__alt_data_end+0xfc00b638>
    b90c:	003f6006 	br	b690 <__alt_data_end+0xfc00b690>
    b910:	5080019c 	xori	r2,r10,6
    b914:	90800916 	blt	r18,r2,b93c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b918:	50c0018c 	andi	r3,r10,6
    b91c:	90ff460e 	bge	r18,r3,b638 <__alt_data_end+0xfc00b638>
    b920:	003fde06 	br	b89c <__alt_data_end+0xfc00b89c>
    b924:	d8c01a17 	ldw	r3,104(sp)
    b928:	2d45883a 	add	r2,r5,r21
    b92c:	18800326 	beq	r3,r2,b93c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b930:	02800044 	movi	r10,1
    b934:	501f883a 	mov	r15,r10
    b938:	003f9e06 	br	b7b4 <__alt_data_end+0xfc00b7b4>
    b93c:	03400184 	movi	r13,6
    b940:	00800084 	movi	r2,2
    b944:	6807883a 	mov	r3,r13
    b948:	003f1d06 	br	b5c0 <__alt_data_end+0xfc00b5c0>
    b94c:	501b883a 	mov	r13,r10
    b950:	5080005c 	xori	r2,r10,1
    b954:	5007883a 	mov	r3,r10
    b958:	003f7b06 	br	b748 <__alt_data_end+0xfc00b748>

0000b95c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b95c:	deffef04 	addi	sp,sp,-68
    b960:	ddc00e15 	stw	r23,56(sp)
    b964:	dd000b15 	stw	r20,44(sp)
    b968:	dc400815 	stw	r17,32(sp)
    b96c:	3029883a 	mov	r20,r6
    b970:	dfc01015 	stw	ra,64(sp)
    b974:	df000f15 	stw	fp,60(sp)
    b978:	dd800d15 	stw	r22,52(sp)
    b97c:	dd400c15 	stw	r21,48(sp)
    b980:	dcc00a15 	stw	r19,40(sp)
    b984:	dc800915 	stw	r18,36(sp)
    b988:	dc000715 	stw	r16,28(sp)
    b98c:	d9000515 	stw	r4,20(sp)
    b990:	2823883a 	mov	r17,r5
    b994:	382f883a 	mov	r23,r7
    b998:	000bd440 	call	bd44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b99c:	100d883a 	mov	r6,r2
    b9a0:	10803fcc 	andi	r2,r2,255
    b9a4:	1000441e 	bne	r2,zero,bab8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    b9a8:	bc000217 	ldw	r16,8(r23)
    b9ac:	8080040c 	andi	r2,r16,16
    b9b0:	10000226 	beq	r2,zero,b9bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    b9b4:	d8c00517 	ldw	r3,20(sp)
    b9b8:	1c000217 	ldw	r16,8(r3)
    b9bc:	d8c00517 	ldw	r3,20(sp)
    b9c0:	d8800517 	ldw	r2,20(sp)
    b9c4:	1f000317 	ldw	fp,12(r3)
    b9c8:	e01090fa 	slli	r8,fp,3
    b9cc:	40c00304 	addi	r3,r8,12
    b9d0:	10ed883a 	add	r22,r2,r3
    b9d4:	80c0004c 	andi	r3,r16,1
    b9d8:	42000204 	addi	r8,r8,8
    b9dc:	d8c00415 	stw	r3,16(sp)
    b9e0:	122b883a 	add	r21,r2,r8
    b9e4:	e0003226 	beq	fp,zero,bab0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    b9e8:	b1800017 	ldw	r6,0(r22)
    b9ec:	d8000015 	stw	zero,0(sp)
    b9f0:	d8000115 	stw	zero,4(sp)
    b9f4:	dc000215 	stw	r16,8(sp)
    b9f8:	d8000315 	stw	zero,12(sp)
    b9fc:	34c0008c 	andi	r19,r6,2
    ba00:	3480004c 	andi	r18,r6,1
    ba04:	9800021e 	bne	r19,zero,ba10 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    ba08:	d8c00417 	ldw	r3,16(sp)
    ba0c:	18002426 	beq	r3,zero,baa0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    ba10:	a0003626 	beq	r20,zero,baec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    ba14:	300dd23a 	srai	r6,r6,8
    ba18:	90000326 	beq	r18,zero,ba28 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    ba1c:	a0800017 	ldw	r2,0(r20)
    ba20:	118d883a 	add	r6,r2,r6
    ba24:	31800017 	ldw	r6,0(r6)
    ba28:	a18d883a 	add	r6,r20,r6
    ba2c:	a9000017 	ldw	r4,0(r21)
    ba30:	d80f883a 	mov	r7,sp
    ba34:	880b883a 	mov	r5,r17
    ba38:	20800017 	ldw	r2,0(r4)
    ba3c:	10800617 	ldw	r2,24(r2)
    ba40:	103ee83a 	callr	r2
    ba44:	100d883a 	mov	r6,r2
    ba48:	10803fcc 	andi	r2,r2,255
    ba4c:	10001426 	beq	r2,zero,baa0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    ba50:	d8800317 	ldw	r2,12(sp)
    ba54:	00c00204 	movi	r3,8
    ba58:	10c02626 	beq	r2,r3,baf4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    ba5c:	d8800117 	ldw	r2,4(sp)
    ba60:	00c000c4 	movi	r3,3
    ba64:	1880040e 	bge	r3,r2,ba78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ba68:	9800031e 	bne	r19,zero,ba78 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    ba6c:	00ffff44 	movi	r3,-3
    ba70:	10c4703a 	and	r2,r2,r3
    ba74:	d8800115 	stw	r2,4(sp)
    ba78:	b9400317 	ldw	r5,12(r23)
    ba7c:	28002126 	beq	r5,zero,bb04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    ba80:	b8800017 	ldw	r2,0(r23)
    ba84:	d9000017 	ldw	r4,0(sp)
    ba88:	11004d1e 	bne	r2,r4,bbc0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    ba8c:	10003126 	beq	r2,zero,bb54 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    ba90:	b9000117 	ldw	r4,4(r23)
    ba94:	d8800117 	ldw	r2,4(sp)
    ba98:	2084b03a 	or	r2,r4,r2
    ba9c:	b8800115 	stw	r2,4(r23)
    baa0:	e73fffc4 	addi	fp,fp,-1
    baa4:	b5bffe04 	addi	r22,r22,-8
    baa8:	ad7ffe04 	addi	r21,r21,-8
    baac:	e03fce1e 	bne	fp,zero,b9e8 <__alt_data_end+0xfc00b9e8>
    bab0:	b9800117 	ldw	r6,4(r23)
    bab4:	300cc03a 	cmpne	r6,r6,zero
    bab8:	3005883a 	mov	r2,r6
    babc:	dfc01017 	ldw	ra,64(sp)
    bac0:	df000f17 	ldw	fp,60(sp)
    bac4:	ddc00e17 	ldw	r23,56(sp)
    bac8:	dd800d17 	ldw	r22,52(sp)
    bacc:	dd400c17 	ldw	r21,48(sp)
    bad0:	dd000b17 	ldw	r20,44(sp)
    bad4:	dcc00a17 	ldw	r19,40(sp)
    bad8:	dc800917 	ldw	r18,36(sp)
    badc:	dc400817 	ldw	r17,32(sp)
    bae0:	dc000717 	ldw	r16,28(sp)
    bae4:	dec01104 	addi	sp,sp,68
    bae8:	f800283a 	ret
    baec:	000d883a 	mov	r6,zero
    baf0:	003fce06 	br	ba2c <__alt_data_end+0xfc00ba2c>
    baf4:	903fd926 	beq	r18,zero,ba5c <__alt_data_end+0xfc00ba5c>
    baf8:	a8800017 	ldw	r2,0(r21)
    bafc:	d8800315 	stw	r2,12(sp)
    bb00:	003fd606 	br	ba5c <__alt_data_end+0xfc00ba5c>
    bb04:	d9000017 	ldw	r4,0(sp)
    bb08:	d8800117 	ldw	r2,4(sp)
    bb0c:	00c000c4 	movi	r3,3
    bb10:	b9000015 	stw	r4,0(r23)
    bb14:	d9000217 	ldw	r4,8(sp)
    bb18:	b8800115 	stw	r2,4(r23)
    bb1c:	b9000215 	stw	r4,8(r23)
    bb20:	d9000317 	ldw	r4,12(sp)
    bb24:	b9000315 	stw	r4,12(r23)
    bb28:	18bfe30e 	bge	r3,r2,bab8 <__alt_data_end+0xfc00bab8>
    bb2c:	1100008c 	andi	r4,r2,2
    bb30:	20001926 	beq	r4,zero,bb98 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    bb34:	d8c00517 	ldw	r3,20(sp)
    bb38:	18800217 	ldw	r2,8(r3)
    bb3c:	1080004c 	andi	r2,r2,1
    bb40:	103fdd26 	beq	r2,zero,bab8 <__alt_data_end+0xfc00bab8>
    bb44:	e73fffc4 	addi	fp,fp,-1
    bb48:	b5bffe04 	addi	r22,r22,-8
    bb4c:	ad7ffe04 	addi	r21,r21,-8
    bb50:	003fd606 	br	baac <__alt_data_end+0xfc00baac>
    bb54:	d8800317 	ldw	r2,12(sp)
    bb58:	00c00204 	movi	r3,8
    bb5c:	10c00b26 	beq	r2,r3,bb8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb60:	28c00a26 	beq	r5,r3,bb8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb64:	11000117 	ldw	r4,4(r2)
    bb68:	29400117 	ldw	r5,4(r5)
    bb6c:	217fc826 	beq	r4,r5,ba90 <__alt_data_end+0xfc00ba90>
    bb70:	20800007 	ldb	r2,0(r4)
    bb74:	00c00a84 	movi	r3,42
    bb78:	10c00426 	beq	r2,r3,bb8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    bb7c:	d9800615 	stw	r6,24(sp)
    bb80:	00105d40 	call	105d4 <strcmp>
    bb84:	d9800617 	ldw	r6,24(sp)
    bb88:	103fc126 	beq	r2,zero,ba90 <__alt_data_end+0xfc00ba90>
    bb8c:	00800084 	movi	r2,2
    bb90:	b8800115 	stw	r2,4(r23)
    bb94:	003fc806 	br	bab8 <__alt_data_end+0xfc00bab8>
    bb98:	1080004c 	andi	r2,r2,1
    bb9c:	103fc626 	beq	r2,zero,bab8 <__alt_data_end+0xfc00bab8>
    bba0:	d8c00517 	ldw	r3,20(sp)
    bba4:	18800217 	ldw	r2,8(r3)
    bba8:	1080008c 	andi	r2,r2,2
    bbac:	103fc226 	beq	r2,zero,bab8 <__alt_data_end+0xfc00bab8>
    bbb0:	e73fffc4 	addi	fp,fp,-1
    bbb4:	b5bffe04 	addi	r22,r22,-8
    bbb8:	ad7ffe04 	addi	r21,r21,-8
    bbbc:	003fbb06 	br	baac <__alt_data_end+0xfc00baac>
    bbc0:	00800084 	movi	r2,2
    bbc4:	b8000015 	stw	zero,0(r23)
    bbc8:	b8800115 	stw	r2,4(r23)
    bbcc:	003fba06 	br	bab8 <__alt_data_end+0xfc00bab8>

0000bbd0 <_ZNSt9type_infoD1Ev>:
    bbd0:	f800283a 	ret

0000bbd4 <_ZNKSt9type_info14__is_pointer_pEv>:
    bbd4:	0005883a 	mov	r2,zero
    bbd8:	f800283a 	ret

0000bbdc <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    bbdc:	0005883a 	mov	r2,zero
    bbe0:	f800283a 	ret

0000bbe4 <_ZNSt9type_infoD0Ev>:
    bbe4:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000bbe8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    bbe8:	21000117 	ldw	r4,4(r4)
    bbec:	29400117 	ldw	r5,4(r5)
    bbf0:	21400c26 	beq	r4,r5,bc24 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    bbf4:	20c00007 	ldb	r3,0(r4)
    bbf8:	00800a84 	movi	r2,42
    bbfc:	18800726 	beq	r3,r2,bc1c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    bc00:	deffff04 	addi	sp,sp,-4
    bc04:	dfc00015 	stw	ra,0(sp)
    bc08:	00105d40 	call	105d4 <strcmp>
    bc0c:	1005003a 	cmpeq	r2,r2,zero
    bc10:	dfc00017 	ldw	ra,0(sp)
    bc14:	dec00104 	addi	sp,sp,4
    bc18:	f800283a 	ret
    bc1c:	0005883a 	mov	r2,zero
    bc20:	f800283a 	ret
    bc24:	00800044 	movi	r2,1
    bc28:	f800283a 	ret

0000bc2c <_ZdlPv>:
    bc2c:	000f5c81 	jmpi	f5c8 <free>

0000bc30 <__cxa_pure_virtual>:
    bc30:	014000f4 	movhi	r5,3
    bc34:	deffff04 	addi	sp,sp,-4
    bc38:	296e1404 	addi	r5,r5,-18352
    bc3c:	018006c4 	movi	r6,27
    bc40:	01000084 	movi	r4,2
    bc44:	dfc00015 	stw	ra,0(sp)
    bc48:	0020b980 	call	20b98 <write>
    bc4c:	000bff80 	call	bff8 <_ZSt9terminatev>

0000bc50 <__cxa_deleted_virtual>:
    bc50:	014000f4 	movhi	r5,3
    bc54:	deffff04 	addi	sp,sp,-4
    bc58:	296e1b04 	addi	r5,r5,-18324
    bc5c:	01800784 	movi	r6,30
    bc60:	01000084 	movi	r4,2
    bc64:	dfc00015 	stw	ra,0(sp)
    bc68:	0020b980 	call	20b98 <write>
    bc6c:	000bff80 	call	bff8 <_ZSt9terminatev>

0000bc70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    bc70:	20800017 	ldw	r2,0(r4)
    bc74:	defffa04 	addi	sp,sp,-24
    bc78:	dc000415 	stw	r16,16(sp)
    bc7c:	10800617 	ldw	r2,24(r2)
    bc80:	3021883a 	mov	r16,r6
    bc84:	31800017 	ldw	r6,0(r6)
    bc88:	00c00404 	movi	r3,16
    bc8c:	d8c00215 	stw	r3,8(sp)
    bc90:	dfc00515 	stw	ra,20(sp)
    bc94:	d8000015 	stw	zero,0(sp)
    bc98:	d8000115 	stw	zero,4(sp)
    bc9c:	d8000315 	stw	zero,12(sp)
    bca0:	d80f883a 	mov	r7,sp
    bca4:	103ee83a 	callr	r2
    bca8:	d8800117 	ldw	r2,4(sp)
    bcac:	00c00184 	movi	r3,6
    bcb0:	1080018c 	andi	r2,r2,6
    bcb4:	10c00526 	beq	r2,r3,bccc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    bcb8:	0005883a 	mov	r2,zero
    bcbc:	dfc00517 	ldw	ra,20(sp)
    bcc0:	dc000417 	ldw	r16,16(sp)
    bcc4:	dec00604 	addi	sp,sp,24
    bcc8:	f800283a 	ret
    bccc:	d8c00017 	ldw	r3,0(sp)
    bcd0:	00800044 	movi	r2,1
    bcd4:	80c00015 	stw	r3,0(r16)
    bcd8:	dfc00517 	ldw	ra,20(sp)
    bcdc:	dc000417 	ldw	r16,16(sp)
    bce0:	dec00604 	addi	sp,sp,24
    bce4:	f800283a 	ret

0000bce8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    bce8:	d8800017 	ldw	r2,0(sp)
    bcec:	11800226 	beq	r2,r6,bcf8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    bcf0:	00800044 	movi	r2,1
    bcf4:	f800283a 	ret
    bcf8:	00800184 	movi	r2,6
    bcfc:	f800283a 	ret

0000bd00 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    bd00:	008000f4 	movhi	r2,3
    bd04:	10ae3104 	addi	r2,r2,-18236
    bd08:	20800015 	stw	r2,0(r4)
    bd0c:	000bbd01 	jmpi	bbd0 <_ZNSt9type_infoD1Ev>

0000bd10 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    bd10:	defffe04 	addi	sp,sp,-8
    bd14:	008000f4 	movhi	r2,3
    bd18:	dc000015 	stw	r16,0(sp)
    bd1c:	dfc00115 	stw	ra,4(sp)
    bd20:	10ae3104 	addi	r2,r2,-18236
    bd24:	20800015 	stw	r2,0(r4)
    bd28:	2021883a 	mov	r16,r4
    bd2c:	000bbd00 	call	bbd0 <_ZNSt9type_infoD1Ev>
    bd30:	8009883a 	mov	r4,r16
    bd34:	dfc00117 	ldw	ra,4(sp)
    bd38:	dc000017 	ldw	r16,0(sp)
    bd3c:	dec00204 	addi	sp,sp,8
    bd40:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000bd44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    bd44:	21000117 	ldw	r4,4(r4)
    bd48:	29400117 	ldw	r5,4(r5)
    bd4c:	defffd04 	addi	sp,sp,-12
    bd50:	dc400115 	stw	r17,4(sp)
    bd54:	dc000015 	stw	r16,0(sp)
    bd58:	dfc00215 	stw	ra,8(sp)
    bd5c:	3023883a 	mov	r17,r6
    bd60:	3821883a 	mov	r16,r7
    bd64:	21400526 	beq	r4,r5,bd7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    bd68:	20c00007 	ldb	r3,0(r4)
    bd6c:	00800a84 	movi	r2,42
    bd70:	18800d26 	beq	r3,r2,bda8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bd74:	00105d40 	call	105d4 <strcmp>
    bd78:	10000b1e 	bne	r2,zero,bda8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    bd7c:	00800204 	movi	r2,8
    bd80:	80800315 	stw	r2,12(r16)
    bd84:	00800184 	movi	r2,6
    bd88:	80800115 	stw	r2,4(r16)
    bd8c:	84400015 	stw	r17,0(r16)
    bd90:	00800044 	movi	r2,1
    bd94:	dfc00217 	ldw	ra,8(sp)
    bd98:	dc400117 	ldw	r17,4(sp)
    bd9c:	dc000017 	ldw	r16,0(sp)
    bda0:	dec00304 	addi	sp,sp,12
    bda4:	f800283a 	ret
    bda8:	0005883a 	mov	r2,zero
    bdac:	003ff906 	br	bd94 <__alt_data_end+0xfc00bd94>

0000bdb0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    bdb0:	defffa04 	addi	sp,sp,-24
    bdb4:	dc800415 	stw	r18,16(sp)
    bdb8:	d8800817 	ldw	r2,32(sp)
    bdbc:	dc800617 	ldw	r18,24(sp)
    bdc0:	dc400315 	stw	r17,12(sp)
    bdc4:	dc000215 	stw	r16,8(sp)
    bdc8:	dfc00515 	stw	ra,20(sp)
    bdcc:	dc400917 	ldw	r17,36(sp)
    bdd0:	24000117 	ldw	r16,4(r4)
    bdd4:	90801526 	beq	r18,r2,be2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    bdd8:	39400117 	ldw	r5,4(r7)
    bddc:	2c000826 	beq	r5,r16,be00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    bde0:	80c00007 	ldb	r3,0(r16)
    bde4:	00800a84 	movi	r2,42
    bde8:	18800926 	beq	r3,r2,be10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    bdec:	8009883a 	mov	r4,r16
    bdf0:	d9800115 	stw	r6,4(sp)
    bdf4:	00105d40 	call	105d4 <strcmp>
    bdf8:	d9800117 	ldw	r6,4(sp)
    bdfc:	1000041e 	bne	r2,zero,be10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    be00:	00800044 	movi	r2,1
    be04:	8c800015 	stw	r18,0(r17)
    be08:	89800115 	stw	r6,4(r17)
    be0c:	88800315 	stw	r2,12(r17)
    be10:	0005883a 	mov	r2,zero
    be14:	dfc00517 	ldw	ra,20(sp)
    be18:	dc800417 	ldw	r18,16(sp)
    be1c:	dc400317 	ldw	r17,12(sp)
    be20:	dc000217 	ldw	r16,8(sp)
    be24:	dec00604 	addi	sp,sp,24
    be28:	f800283a 	ret
    be2c:	d8800717 	ldw	r2,28(sp)
    be30:	11400117 	ldw	r5,4(r2)
    be34:	81400a26 	beq	r16,r5,be60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    be38:	80c00007 	ldb	r3,0(r16)
    be3c:	00800a84 	movi	r2,42
    be40:	18800c26 	beq	r3,r2,be74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    be44:	8009883a 	mov	r4,r16
    be48:	d9800115 	stw	r6,4(sp)
    be4c:	d9c00015 	stw	r7,0(sp)
    be50:	00105d40 	call	105d4 <strcmp>
    be54:	d9800117 	ldw	r6,4(sp)
    be58:	d9c00017 	ldw	r7,0(sp)
    be5c:	1000021e 	bne	r2,zero,be68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    be60:	89800215 	stw	r6,8(r17)
    be64:	003fea06 	br	be10 <__alt_data_end+0xfc00be10>
    be68:	39400117 	ldw	r5,4(r7)
    be6c:	817fdf1e 	bne	r16,r5,bdec <__alt_data_end+0xfc00bdec>
    be70:	003fe306 	br	be00 <__alt_data_end+0xfc00be00>
    be74:	38800117 	ldw	r2,4(r7)
    be78:	80bfe51e 	bne	r16,r2,be10 <__alt_data_end+0xfc00be10>
    be7c:	003fe006 	br	be00 <__alt_data_end+0xfc00be00>

0000be80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    be80:	20800117 	ldw	r2,4(r4)
    be84:	28c00117 	ldw	r3,4(r5)
    be88:	10c02926 	beq	r2,r3,bf30 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    be8c:	defffb04 	addi	sp,sp,-20
    be90:	dcc00315 	stw	r19,12(sp)
    be94:	dc800215 	stw	r18,8(sp)
    be98:	dc400115 	stw	r17,4(sp)
    be9c:	dc000015 	stw	r16,0(sp)
    bea0:	dfc00415 	stw	ra,16(sp)
    bea4:	2821883a 	mov	r16,r5
    bea8:	11400007 	ldb	r5,0(r2)
    beac:	2025883a 	mov	r18,r4
    beb0:	01000a84 	movi	r4,42
    beb4:	3823883a 	mov	r17,r7
    beb8:	3027883a 	mov	r19,r6
    bebc:	29000626 	beq	r5,r4,bed8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    bec0:	180b883a 	mov	r5,r3
    bec4:	1009883a 	mov	r4,r2
    bec8:	00105d40 	call	105d4 <strcmp>
    becc:	1000021e 	bne	r2,zero,bed8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    bed0:	00800044 	movi	r2,1
    bed4:	00000306 	br	bee4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    bed8:	008000c4 	movi	r2,3
    bedc:	1440082e 	bgeu	r2,r17,bf00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    bee0:	0005883a 	mov	r2,zero
    bee4:	dfc00417 	ldw	ra,16(sp)
    bee8:	dcc00317 	ldw	r19,12(sp)
    beec:	dc800217 	ldw	r18,8(sp)
    bef0:	dc400117 	ldw	r17,4(sp)
    bef4:	dc000017 	ldw	r16,0(sp)
    bef8:	dec00504 	addi	sp,sp,20
    befc:	f800283a 	ret
    bf00:	80800017 	ldw	r2,0(r16)
    bf04:	980d883a 	mov	r6,r19
    bf08:	900b883a 	mov	r5,r18
    bf0c:	10800517 	ldw	r2,20(r2)
    bf10:	8009883a 	mov	r4,r16
    bf14:	dfc00417 	ldw	ra,16(sp)
    bf18:	dcc00317 	ldw	r19,12(sp)
    bf1c:	dc800217 	ldw	r18,8(sp)
    bf20:	dc400117 	ldw	r17,4(sp)
    bf24:	dc000017 	ldw	r16,0(sp)
    bf28:	dec00504 	addi	sp,sp,20
    bf2c:	1000683a 	jmp	r2
    bf30:	00800044 	movi	r2,1
    bf34:	f800283a 	ret

0000bf38 <_ZN10__cxxabiv111__terminateEPFvvE>:
    bf38:	00800074 	movhi	r2,1
    bf3c:	deffef04 	addi	sp,sp,-68
    bf40:	10b22804 	addi	r2,r2,-14176
    bf44:	d8800615 	stw	r2,24(sp)
    bf48:	008000b4 	movhi	r2,2
    bf4c:	10931604 	addi	r2,r2,19544
    bf50:	d8800715 	stw	r2,28(sp)
    bf54:	00800074 	movhi	r2,1
    bf58:	10afe404 	addi	r2,r2,-16496
    bf5c:	d9000d15 	stw	r4,52(sp)
    bf60:	d809883a 	mov	r4,sp
    bf64:	d8800915 	stw	r2,36(sp)
    bf68:	dfc01015 	stw	ra,64(sp)
    bf6c:	df000f15 	stw	fp,60(sp)
    bf70:	dec00815 	stw	sp,32(sp)
    bf74:	dec00a15 	stw	sp,40(sp)
    bf78:	000f1d40 	call	f1d4 <_Unwind_SjLj_Register>
    bf7c:	00800044 	movi	r2,1
    bf80:	d8800115 	stw	r2,4(sp)
    bf84:	d8800d17 	ldw	r2,52(sp)
    bf88:	103ee83a 	callr	r2
    bf8c:	000f5500 	call	f550 <abort>
    bf90:	d8c00217 	ldw	r3,8(sp)
    bf94:	d8800117 	ldw	r2,4(sp)
    bf98:	d8c00d15 	stw	r3,52(sp)
    bf9c:	d8c00317 	ldw	r3,12(sp)
    bfa0:	d8c00e15 	stw	r3,56(sp)
    bfa4:	10000b26 	beq	r2,zero,bfd4 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    bfa8:	10bfffc4 	addi	r2,r2,-1
    bfac:	10000126 	beq	r2,zero,bfb4 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    bfb0:	003b68fa 	trap	3
    bfb4:	d8000115 	stw	zero,4(sp)
    bfb8:	000d2e40 	call	d2e4 <__cxa_end_catch>
    bfbc:	d8c00e17 	ldw	r3,56(sp)
    bfc0:	00bfffc4 	movi	r2,-1
    bfc4:	18800826 	beq	r3,r2,bfe8 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    bfc8:	d9000d17 	ldw	r4,52(sp)
    bfcc:	d8800115 	stw	r2,4(sp)
    bfd0:	000f3d00 	call	f3d0 <_Unwind_SjLj_Resume>
    bfd4:	d9000d17 	ldw	r4,52(sp)
    bfd8:	000d2300 	call	d230 <__cxa_begin_catch>
    bfdc:	00800084 	movi	r2,2
    bfe0:	d8800115 	stw	r2,4(sp)
    bfe4:	000f5500 	call	f550 <abort>
    bfe8:	d8800e17 	ldw	r2,56(sp)
    bfec:	d9000d17 	ldw	r4,52(sp)
    bff0:	d8800115 	stw	r2,4(sp)
    bff4:	000cea00 	call	cea0 <__cxa_call_unexpected>

0000bff8 <_ZSt9terminatev>:
    bff8:	008000f4 	movhi	r2,3
    bffc:	10bbb304 	addi	r2,r2,-4404
    c000:	11000017 	ldw	r4,0(r2)
    c004:	deffff04 	addi	sp,sp,-4
    c008:	dfc00015 	stw	ra,0(sp)
    c00c:	000bf380 	call	bf38 <_ZN10__cxxabiv111__terminateEPFvvE>

0000c010 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    c010:	deffff04 	addi	sp,sp,-4
    c014:	dfc00015 	stw	ra,0(sp)
    c018:	203ee83a 	callr	r4
    c01c:	000bff80 	call	bff8 <_ZSt9terminatev>

0000c020 <_ZSt10unexpectedv>:
    c020:	008000f4 	movhi	r2,3
    c024:	10bbb204 	addi	r2,r2,-4408
    c028:	11000017 	ldw	r4,0(r2)
    c02c:	deffff04 	addi	sp,sp,-4
    c030:	dfc00015 	stw	ra,0(sp)
    c034:	000c0100 	call	c010 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000c038 <_ZSt13set_terminatePFvvE>:
    c038:	00c000f4 	movhi	r3,3
    c03c:	18fbb304 	addi	r3,r3,-4404
    c040:	18800017 	ldw	r2,0(r3)
    c044:	19000015 	stw	r4,0(r3)
    c048:	f800283a 	ret

0000c04c <_ZSt13get_terminatev>:
    c04c:	008000f4 	movhi	r2,3
    c050:	10bbb304 	addi	r2,r2,-4404
    c054:	10800017 	ldw	r2,0(r2)
    c058:	f800283a 	ret

0000c05c <_ZSt14set_unexpectedPFvvE>:
    c05c:	00c000f4 	movhi	r3,3
    c060:	18fbb204 	addi	r3,r3,-4408
    c064:	18800017 	ldw	r2,0(r3)
    c068:	19000015 	stw	r4,0(r3)
    c06c:	f800283a 	ret

0000c070 <_ZSt14get_unexpectedv>:
    c070:	008000f4 	movhi	r2,3
    c074:	10bbb204 	addi	r2,r2,-4408
    c078:	10800017 	ldw	r2,0(r2)
    c07c:	f800283a 	ret

0000c080 <_ZL21size_of_encoded_valueh>:
    c080:	deffff04 	addi	sp,sp,-4
    c084:	dfc00015 	stw	ra,0(sp)
    c088:	20c03fcc 	andi	r3,r4,255
    c08c:	00803fc4 	movi	r2,255
    c090:	18802026 	beq	r3,r2,c114 <_ZL21size_of_encoded_valueh+0x94>
    c094:	210001cc 	andi	r4,r4,7
    c098:	00800144 	movi	r2,5
    c09c:	11001c36 	bltu	r2,r4,c110 <_ZL21size_of_encoded_valueh+0x90>
    c0a0:	200890ba 	slli	r4,r4,2
    c0a4:	00800074 	movhi	r2,1
    c0a8:	10b02e04 	addi	r2,r2,-16200
    c0ac:	2089883a 	add	r4,r4,r2
    c0b0:	20800017 	ldw	r2,0(r4)
    c0b4:	1000683a 	jmp	r2
    c0b8:	0000c0d0 	cmplti	zero,zero,771
    c0bc:	0000c110 	cmplti	zero,zero,772
    c0c0:	0000c0e0 	cmpeqi	zero,zero,771
    c0c4:	0000c0d0 	cmplti	zero,zero,771
    c0c8:	0000c100 	call	c10 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x74>
    c0cc:	0000c0f0 	cmpltui	zero,zero,771
    c0d0:	00800104 	movi	r2,4
    c0d4:	dfc00017 	ldw	ra,0(sp)
    c0d8:	dec00104 	addi	sp,sp,4
    c0dc:	f800283a 	ret
    c0e0:	00800084 	movi	r2,2
    c0e4:	dfc00017 	ldw	ra,0(sp)
    c0e8:	dec00104 	addi	sp,sp,4
    c0ec:	f800283a 	ret
    c0f0:	00800044 	movi	r2,1
    c0f4:	dfc00017 	ldw	ra,0(sp)
    c0f8:	dec00104 	addi	sp,sp,4
    c0fc:	f800283a 	ret
    c100:	00800204 	movi	r2,8
    c104:	dfc00017 	ldw	ra,0(sp)
    c108:	dec00104 	addi	sp,sp,4
    c10c:	f800283a 	ret
    c110:	000f5500 	call	f550 <abort>
    c114:	0005883a 	mov	r2,zero
    c118:	dfc00017 	ldw	ra,0(sp)
    c11c:	dec00104 	addi	sp,sp,4
    c120:	f800283a 	ret

0000c124 <_ZL28read_encoded_value_with_basehjPKhPj>:
    c124:	deffff04 	addi	sp,sp,-4
    c128:	dfc00015 	stw	ra,0(sp)
    c12c:	20c03fcc 	andi	r3,r4,255
    c130:	00801404 	movi	r2,80
    c134:	18807326 	beq	r3,r2,c304 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    c138:	20c003cc 	andi	r3,r4,15
    c13c:	00800304 	movi	r2,12
    c140:	10c06f36 	bltu	r2,r3,c300 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    c144:	180690ba 	slli	r3,r3,2
    c148:	02000074 	movhi	r8,1
    c14c:	42305704 	addi	r8,r8,-16036
    c150:	1a07883a 	add	r3,r3,r8
    c154:	18800017 	ldw	r2,0(r3)
    c158:	1000683a 	jmp	r2
    c15c:	0000c190 	cmplti	zero,zero,774
    c160:	0000c2ac 	andhi	zero,zero,778
    c164:	0000c2e8 	cmpgeui	zero,zero,779
    c168:	0000c190 	cmplti	zero,zero,774
    c16c:	0000c1f4 	movhi	zero,775
    c170:	0000c248 	cmpgei	zero,zero,777
    c174:	0000c300 	call	c30 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x94>
    c178:	0000c300 	call	c30 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x94>
    c17c:	0000c300 	call	c30 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x94>
    c180:	0000c254 	movui	zero,777
    c184:	0000c224 	muli	zero,zero,776
    c188:	0000c190 	cmplti	zero,zero,774
    c18c:	0000c1f4 	movhi	zero,775
    c190:	30800043 	ldbu	r2,1(r6)
    c194:	30c00083 	ldbu	r3,2(r6)
    c198:	324000c3 	ldbu	r9,3(r6)
    c19c:	32000003 	ldbu	r8,0(r6)
    c1a0:	1004923a 	slli	r2,r2,8
    c1a4:	1806943a 	slli	r3,r3,16
    c1a8:	4812963a 	slli	r9,r9,24
    c1ac:	1204b03a 	or	r2,r2,r8
    c1b0:	1884b03a 	or	r2,r3,r2
    c1b4:	4886b03a 	or	r3,r9,r2
    c1b8:	30800104 	addi	r2,r6,4
    c1bc:	18000926 	beq	r3,zero,c1e4 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c1c0:	22001c0c 	andi	r8,r4,112
    c1c4:	02400404 	movi	r9,16
    c1c8:	42405726 	beq	r8,r9,c328 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    c1cc:	21003fcc 	andi	r4,r4,255
    c1d0:	2100201c 	xori	r4,r4,128
    c1d4:	213fe004 	addi	r4,r4,-128
    c1d8:	1947883a 	add	r3,r3,r5
    c1dc:	2000010e 	bge	r4,zero,c1e4 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    c1e0:	18c00017 	ldw	r3,0(r3)
    c1e4:	38c00015 	stw	r3,0(r7)
    c1e8:	dfc00017 	ldw	ra,0(sp)
    c1ec:	dec00104 	addi	sp,sp,4
    c1f0:	f800283a 	ret
    c1f4:	30800043 	ldbu	r2,1(r6)
    c1f8:	30c00083 	ldbu	r3,2(r6)
    c1fc:	324000c3 	ldbu	r9,3(r6)
    c200:	32000003 	ldbu	r8,0(r6)
    c204:	1004923a 	slli	r2,r2,8
    c208:	1806943a 	slli	r3,r3,16
    c20c:	4812963a 	slli	r9,r9,24
    c210:	1204b03a 	or	r2,r2,r8
    c214:	1884b03a 	or	r2,r3,r2
    c218:	4886b03a 	or	r3,r9,r2
    c21c:	30800204 	addi	r2,r6,8
    c220:	003fe606 	br	c1bc <__alt_data_end+0xfc00c1bc>
    c224:	30c00043 	ldbu	r3,1(r6)
    c228:	32000003 	ldbu	r8,0(r6)
    c22c:	30800084 	addi	r2,r6,2
    c230:	1806923a 	slli	r3,r3,8
    c234:	1a06b03a 	or	r3,r3,r8
    c238:	18ffffcc 	andi	r3,r3,65535
    c23c:	18e0001c 	xori	r3,r3,32768
    c240:	18e00004 	addi	r3,r3,-32768
    c244:	003fdd06 	br	c1bc <__alt_data_end+0xfc00c1bc>
    c248:	30c00003 	ldbu	r3,0(r6)
    c24c:	30800044 	addi	r2,r6,1
    c250:	003fda06 	br	c1bc <__alt_data_end+0xfc00c1bc>
    c254:	3017883a 	mov	r11,r6
    c258:	0007883a 	mov	r3,zero
    c25c:	0013883a 	mov	r9,zero
    c260:	5a800003 	ldbu	r10,0(r11)
    c264:	58800044 	addi	r2,r11,1
    c268:	1017883a 	mov	r11,r2
    c26c:	52001fcc 	andi	r8,r10,127
    c270:	4250983a 	sll	r8,r8,r9
    c274:	53003fcc 	andi	r12,r10,255
    c278:	6300201c 	xori	r12,r12,128
    c27c:	633fe004 	addi	r12,r12,-128
    c280:	1a06b03a 	or	r3,r3,r8
    c284:	4a4001c4 	addi	r9,r9,7
    c288:	603ff516 	blt	r12,zero,c260 <__alt_data_end+0xfc00c260>
    c28c:	020007c4 	movi	r8,31
    c290:	427fca36 	bltu	r8,r9,c1bc <__alt_data_end+0xfc00c1bc>
    c294:	5280100c 	andi	r10,r10,64
    c298:	503fc826 	beq	r10,zero,c1bc <__alt_data_end+0xfc00c1bc>
    c29c:	023fffc4 	movi	r8,-1
    c2a0:	4252983a 	sll	r9,r8,r9
    c2a4:	1a46b03a 	or	r3,r3,r9
    c2a8:	003fc506 	br	c1c0 <__alt_data_end+0xfc00c1c0>
    c2ac:	3017883a 	mov	r11,r6
    c2b0:	0007883a 	mov	r3,zero
    c2b4:	0015883a 	mov	r10,zero
    c2b8:	5a000003 	ldbu	r8,0(r11)
    c2bc:	58800044 	addi	r2,r11,1
    c2c0:	1017883a 	mov	r11,r2
    c2c4:	42401fcc 	andi	r9,r8,127
    c2c8:	4a92983a 	sll	r9,r9,r10
    c2cc:	42003fcc 	andi	r8,r8,255
    c2d0:	4200201c 	xori	r8,r8,128
    c2d4:	423fe004 	addi	r8,r8,-128
    c2d8:	1a46b03a 	or	r3,r3,r9
    c2dc:	528001c4 	addi	r10,r10,7
    c2e0:	403ff516 	blt	r8,zero,c2b8 <__alt_data_end+0xfc00c2b8>
    c2e4:	003fb506 	br	c1bc <__alt_data_end+0xfc00c1bc>
    c2e8:	30c00043 	ldbu	r3,1(r6)
    c2ec:	32000003 	ldbu	r8,0(r6)
    c2f0:	30800084 	addi	r2,r6,2
    c2f4:	1806923a 	slli	r3,r3,8
    c2f8:	1a06b03a 	or	r3,r3,r8
    c2fc:	003faf06 	br	c1bc <__alt_data_end+0xfc00c1bc>
    c300:	000f5500 	call	f550 <abort>
    c304:	308000c4 	addi	r2,r6,3
    c308:	00ffff04 	movi	r3,-4
    c30c:	10c4703a 	and	r2,r2,r3
    c310:	10c00017 	ldw	r3,0(r2)
    c314:	10800104 	addi	r2,r2,4
    c318:	38c00015 	stw	r3,0(r7)
    c31c:	dfc00017 	ldw	ra,0(sp)
    c320:	dec00104 	addi	sp,sp,4
    c324:	f800283a 	ret
    c328:	300b883a 	mov	r5,r6
    c32c:	003fa706 	br	c1cc <__alt_data_end+0xfc00c1cc>

0000c330 <_ZL15get_ttype_entryP16lsda_header_infom>:
    c330:	defffc04 	addi	sp,sp,-16
    c334:	dfc00315 	stw	ra,12(sp)
    c338:	dc000215 	stw	r16,8(sp)
    c33c:	2021883a 	mov	r16,r4
    c340:	21000503 	ldbu	r4,20(r4)
    c344:	d9400115 	stw	r5,4(sp)
    c348:	000c0800 	call	c080 <_ZL21size_of_encoded_valueh>
    c34c:	d9400117 	ldw	r5,4(sp)
    c350:	1009883a 	mov	r4,r2
    c354:	000d9380 	call	d938 <__mulsi3>
    c358:	81800317 	ldw	r6,12(r16)
    c35c:	81400217 	ldw	r5,8(r16)
    c360:	81000503 	ldbu	r4,20(r16)
    c364:	d80f883a 	mov	r7,sp
    c368:	308dc83a 	sub	r6,r6,r2
    c36c:	000c1240 	call	c124 <_ZL28read_encoded_value_with_basehjPKhPj>
    c370:	d8800017 	ldw	r2,0(sp)
    c374:	dfc00317 	ldw	ra,12(sp)
    c378:	dc000217 	ldw	r16,8(sp)
    c37c:	dec00404 	addi	sp,sp,16
    c380:	f800283a 	ret

0000c384 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    c384:	deffff04 	addi	sp,sp,-4
    c388:	dfc00015 	stw	ra,0(sp)
    c38c:	20c03fcc 	andi	r3,r4,255
    c390:	00803fc4 	movi	r2,255
    c394:	18800e26 	beq	r3,r2,c3d0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c398:	20801c0c 	andi	r2,r4,112
    c39c:	00c00804 	movi	r3,32
    c3a0:	10c01726 	beq	r2,r3,c400 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    c3a4:	18800e2e 	bgeu	r3,r2,c3e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    c3a8:	00c01004 	movi	r3,64
    c3ac:	10c01026 	beq	r2,r3,c3f0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    c3b0:	00c01404 	movi	r3,80
    c3b4:	10c00626 	beq	r2,r3,c3d0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    c3b8:	00c00c04 	movi	r3,48
    c3bc:	10c00b1e 	bne	r2,r3,c3ec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    c3c0:	2809883a 	mov	r4,r5
    c3c4:	dfc00017 	ldw	ra,0(sp)
    c3c8:	dec00104 	addi	sp,sp,4
    c3cc:	000f2ac1 	jmpi	f2ac <_Unwind_GetDataRelBase>
    c3d0:	0005883a 	mov	r2,zero
    c3d4:	dfc00017 	ldw	ra,0(sp)
    c3d8:	dec00104 	addi	sp,sp,4
    c3dc:	f800283a 	ret
    c3e0:	103ffb26 	beq	r2,zero,c3d0 <__alt_data_end+0xfc00c3d0>
    c3e4:	00c00404 	movi	r3,16
    c3e8:	10fff926 	beq	r2,r3,c3d0 <__alt_data_end+0xfc00c3d0>
    c3ec:	000f5500 	call	f550 <abort>
    c3f0:	2809883a 	mov	r4,r5
    c3f4:	dfc00017 	ldw	ra,0(sp)
    c3f8:	dec00104 	addi	sp,sp,4
    c3fc:	000f29c1 	jmpi	f29c <_Unwind_GetRegionStart>
    c400:	2809883a 	mov	r4,r5
    c404:	dfc00017 	ldw	ra,0(sp)
    c408:	dec00104 	addi	sp,sp,4
    c40c:	000f2b41 	jmpi	f2b4 <_Unwind_GetTextRelBase>

0000c410 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    c410:	defffb04 	addi	sp,sp,-20
    c414:	dcc00315 	stw	r19,12(sp)
    c418:	dc400115 	stw	r17,4(sp)
    c41c:	dc000015 	stw	r16,0(sp)
    c420:	dfc00415 	stw	ra,16(sp)
    c424:	dc800215 	stw	r18,8(sp)
    c428:	2027883a 	mov	r19,r4
    c42c:	2821883a 	mov	r16,r5
    c430:	3023883a 	mov	r17,r6
    c434:	20003f26 	beq	r4,zero,c534 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    c438:	000f29c0 	call	f29c <_Unwind_GetRegionStart>
    c43c:	88800015 	stw	r2,0(r17)
    c440:	84800003 	ldbu	r18,0(r16)
    c444:	00c03fc4 	movi	r3,255
    c448:	84000044 	addi	r16,r16,1
    c44c:	90c03726 	beq	r18,r3,c52c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    c450:	980b883a 	mov	r5,r19
    c454:	9009883a 	mov	r4,r18
    c458:	000c3840 	call	c384 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c45c:	800d883a 	mov	r6,r16
    c460:	89c00104 	addi	r7,r17,4
    c464:	100b883a 	mov	r5,r2
    c468:	9009883a 	mov	r4,r18
    c46c:	000c1240 	call	c124 <_ZL28read_encoded_value_with_basehjPKhPj>
    c470:	1021883a 	mov	r16,r2
    c474:	80c00003 	ldbu	r3,0(r16)
    c478:	01003fc4 	movi	r4,255
    c47c:	80800044 	addi	r2,r16,1
    c480:	88c00505 	stb	r3,20(r17)
    c484:	18c03fcc 	andi	r3,r3,255
    c488:	19002c26 	beq	r3,r4,c53c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    c48c:	100f883a 	mov	r7,r2
    c490:	000d883a 	mov	r6,zero
    c494:	000b883a 	mov	r5,zero
    c498:	38c00003 	ldbu	r3,0(r7)
    c49c:	10800044 	addi	r2,r2,1
    c4a0:	100f883a 	mov	r7,r2
    c4a4:	19001fcc 	andi	r4,r3,127
    c4a8:	2148983a 	sll	r4,r4,r5
    c4ac:	18c03fcc 	andi	r3,r3,255
    c4b0:	18c0201c 	xori	r3,r3,128
    c4b4:	18ffe004 	addi	r3,r3,-128
    c4b8:	310cb03a 	or	r6,r6,r4
    c4bc:	294001c4 	addi	r5,r5,7
    c4c0:	183ff516 	blt	r3,zero,c498 <__alt_data_end+0xfc00c498>
    c4c4:	118d883a 	add	r6,r2,r6
    c4c8:	89800315 	stw	r6,12(r17)
    c4cc:	10c00003 	ldbu	r3,0(r2)
    c4d0:	000d883a 	mov	r6,zero
    c4d4:	10800044 	addi	r2,r2,1
    c4d8:	88c00545 	stb	r3,21(r17)
    c4dc:	000b883a 	mov	r5,zero
    c4e0:	10c00003 	ldbu	r3,0(r2)
    c4e4:	10800044 	addi	r2,r2,1
    c4e8:	19001fcc 	andi	r4,r3,127
    c4ec:	2148983a 	sll	r4,r4,r5
    c4f0:	18c03fcc 	andi	r3,r3,255
    c4f4:	18c0201c 	xori	r3,r3,128
    c4f8:	18ffe004 	addi	r3,r3,-128
    c4fc:	310cb03a 	or	r6,r6,r4
    c500:	294001c4 	addi	r5,r5,7
    c504:	183ff616 	blt	r3,zero,c4e0 <__alt_data_end+0xfc00c4e0>
    c508:	118d883a 	add	r6,r2,r6
    c50c:	89800415 	stw	r6,16(r17)
    c510:	dfc00417 	ldw	ra,16(sp)
    c514:	dcc00317 	ldw	r19,12(sp)
    c518:	dc800217 	ldw	r18,8(sp)
    c51c:	dc400117 	ldw	r17,4(sp)
    c520:	dc000017 	ldw	r16,0(sp)
    c524:	dec00504 	addi	sp,sp,20
    c528:	f800283a 	ret
    c52c:	88800115 	stw	r2,4(r17)
    c530:	003fd006 	br	c474 <__alt_data_end+0xfc00c474>
    c534:	0005883a 	mov	r2,zero
    c538:	003fc006 	br	c43c <__alt_data_end+0xfc00c43c>
    c53c:	88000315 	stw	zero,12(r17)
    c540:	003fe206 	br	c4cc <__alt_data_end+0xfc00c4cc>

0000c544 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    c544:	28800017 	ldw	r2,0(r5)
    c548:	30c00017 	ldw	r3,0(r6)
    c54c:	defffb04 	addi	sp,sp,-20
    c550:	10800217 	ldw	r2,8(r2)
    c554:	dc400315 	stw	r17,12(sp)
    c558:	dc000215 	stw	r16,8(sp)
    c55c:	d9400115 	stw	r5,4(sp)
    c560:	dfc00415 	stw	ra,16(sp)
    c564:	2021883a 	mov	r16,r4
    c568:	d8c00015 	stw	r3,0(sp)
    c56c:	2809883a 	mov	r4,r5
    c570:	3023883a 	mov	r17,r6
    c574:	103ee83a 	callr	r2
    c578:	10803fcc 	andi	r2,r2,255
    c57c:	d9400117 	ldw	r5,4(sp)
    c580:	10000326 	beq	r2,zero,c590 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    c584:	d8800017 	ldw	r2,0(sp)
    c588:	10800017 	ldw	r2,0(r2)
    c58c:	d8800015 	stw	r2,0(sp)
    c590:	80800017 	ldw	r2,0(r16)
    c594:	01c00044 	movi	r7,1
    c598:	d80d883a 	mov	r6,sp
    c59c:	10800417 	ldw	r2,16(r2)
    c5a0:	8009883a 	mov	r4,r16
    c5a4:	103ee83a 	callr	r2
    c5a8:	10c03fcc 	andi	r3,r2,255
    c5ac:	18000226 	beq	r3,zero,c5b8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    c5b0:	d8c00017 	ldw	r3,0(sp)
    c5b4:	88c00015 	stw	r3,0(r17)
    c5b8:	dfc00417 	ldw	ra,16(sp)
    c5bc:	dc400317 	ldw	r17,12(sp)
    c5c0:	dc000217 	ldw	r16,8(sp)
    c5c4:	dec00504 	addi	sp,sp,20
    c5c8:	f800283a 	ret

0000c5cc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    c5cc:	defff304 	addi	sp,sp,-52
    c5d0:	dc800615 	stw	r18,24(sp)
    c5d4:	3825d23a 	srai	r18,r7,8
    c5d8:	dd000815 	stw	r20,32(sp)
    c5dc:	dcc00715 	stw	r19,28(sp)
    c5e0:	dfc00c15 	stw	ra,48(sp)
    c5e4:	ddc00b15 	stw	r23,44(sp)
    c5e8:	dd800a15 	stw	r22,40(sp)
    c5ec:	dd400915 	stw	r21,36(sp)
    c5f0:	dc400515 	stw	r17,20(sp)
    c5f4:	dc000415 	stw	r16,16(sp)
    c5f8:	d9400215 	stw	r5,8(sp)
    c5fc:	3827883a 	mov	r19,r7
    c600:	2029883a 	mov	r20,r4
    c604:	9000010e 	bge	r18,zero,c60c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    c608:	04a5c83a 	sub	r18,zero,r18
    c60c:	000b883a 	mov	r5,zero
    c610:	01000144 	movi	r4,5
    c614:	d9800315 	stw	r6,12(sp)
    c618:	000c3840 	call	c384 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c61c:	d9800317 	ldw	r6,12(sp)
    c620:	d9c00104 	addi	r7,sp,4
    c624:	100b883a 	mov	r5,r2
    c628:	01000144 	movi	r4,5
    c62c:	000c1240 	call	c124 <_ZL28read_encoded_value_with_basehjPKhPj>
    c630:	017ffe44 	movi	r5,-7
    c634:	1009883a 	mov	r4,r2
    c638:	1021883a 	mov	r16,r2
    c63c:	000d9380 	call	d938 <__mulsi3>
    c640:	102d883a 	mov	r22,r2
    c644:	0023883a 	mov	r17,zero
    c648:	85400003 	ldbu	r21,0(r16)
    c64c:	8009883a 	mov	r4,r16
    c650:	014001c4 	movi	r5,7
    c654:	000d9380 	call	d938 <__mulsi3>
    c658:	a8c01fcc 	andi	r3,r21,127
    c65c:	1585883a 	add	r2,r2,r22
    c660:	1886983a 	sll	r3,r3,r2
    c664:	ad403fcc 	andi	r21,r21,255
    c668:	ad40201c 	xori	r21,r21,128
    c66c:	ad7fe004 	addi	r21,r21,-128
    c670:	84000044 	addi	r16,r16,1
    c674:	88e2b03a 	or	r17,r17,r3
    c678:	a83ff316 	blt	r21,zero,c648 <__alt_data_end+0xfc00c648>
    c67c:	8461883a 	add	r16,r16,r17
    c680:	017ffe44 	movi	r5,-7
    c684:	8009883a 	mov	r4,r16
    c688:	000d9380 	call	d938 <__mulsi3>
    c68c:	102d883a 	mov	r22,r2
    c690:	002b883a 	mov	r21,zero
    c694:	84400003 	ldbu	r17,0(r16)
    c698:	8009883a 	mov	r4,r16
    c69c:	014001c4 	movi	r5,7
    c6a0:	000d9380 	call	d938 <__mulsi3>
    c6a4:	88c01fcc 	andi	r3,r17,127
    c6a8:	1585883a 	add	r2,r2,r22
    c6ac:	1886983a 	sll	r3,r3,r2
    c6b0:	8c403fcc 	andi	r17,r17,255
    c6b4:	8c40201c 	xori	r17,r17,128
    c6b8:	8c7fe004 	addi	r17,r17,-128
    c6bc:	84000044 	addi	r16,r16,1
    c6c0:	a8eab03a 	or	r21,r21,r3
    c6c4:	883ff316 	blt	r17,zero,c694 <__alt_data_end+0xfc00c694>
    c6c8:	94403fcc 	andi	r17,r18,255
    c6cc:	8c7fffc4 	addi	r17,r17,-1
    c6d0:	8463883a 	add	r17,r16,r17
    c6d4:	ad4000c4 	addi	r21,r21,3
    c6d8:	00bfff04 	movi	r2,-4
    c6dc:	ac21883a 	add	r16,r21,r16
    c6e0:	017ffe44 	movi	r5,-7
    c6e4:	8809883a 	mov	r4,r17
    c6e8:	80a0703a 	and	r16,r16,r2
    c6ec:	000d9380 	call	d938 <__mulsi3>
    c6f0:	0025883a 	mov	r18,zero
    c6f4:	102f883a 	mov	r23,r2
    c6f8:	8d800003 	ldbu	r22,0(r17)
    c6fc:	8809883a 	mov	r4,r17
    c700:	014001c4 	movi	r5,7
    c704:	000d9380 	call	d938 <__mulsi3>
    c708:	b0c01fcc 	andi	r3,r22,127
    c70c:	15c5883a 	add	r2,r2,r23
    c710:	1886983a 	sll	r3,r3,r2
    c714:	b5803fcc 	andi	r22,r22,255
    c718:	b580201c 	xori	r22,r22,128
    c71c:	8d400044 	addi	r21,r17,1
    c720:	b5bfe004 	addi	r22,r22,-128
    c724:	90e4b03a 	or	r18,r18,r3
    c728:	a823883a 	mov	r17,r21
    c72c:	b03ff216 	blt	r22,zero,c6f8 <__alt_data_end+0xfc00c6f8>
    c730:	9cc03fcc 	andi	r19,r19,255
    c734:	90002426 	beq	r18,zero,c7c8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    c738:	9809883a 	mov	r4,r19
    c73c:	000c0800 	call	c080 <_ZL21size_of_encoded_valueh>
    c740:	100b883a 	mov	r5,r2
    c744:	913fffc4 	addi	r4,r18,-1
    c748:	000d9380 	call	d938 <__mulsi3>
    c74c:	d9400d17 	ldw	r5,52(sp)
    c750:	d80f883a 	mov	r7,sp
    c754:	9809883a 	mov	r4,r19
    c758:	140d883a 	add	r6,r2,r16
    c75c:	000c1240 	call	c124 <_ZL28read_encoded_value_with_basehjPKhPj>
    c760:	d9000017 	ldw	r4,0(sp)
    c764:	d9800204 	addi	r6,sp,8
    c768:	a00b883a 	mov	r5,r20
    c76c:	000c5440 	call	c544 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c770:	10c03fcc 	andi	r3,r2,255
    c774:	1800151e 	bne	r3,zero,c7cc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    c778:	a809883a 	mov	r4,r21
    c77c:	017ffe44 	movi	r5,-7
    c780:	000d9380 	call	d938 <__mulsi3>
    c784:	102d883a 	mov	r22,r2
    c788:	a809883a 	mov	r4,r21
    c78c:	0025883a 	mov	r18,zero
    c790:	24400003 	ldbu	r17,0(r4)
    c794:	014001c4 	movi	r5,7
    c798:	000d9380 	call	d938 <__mulsi3>
    c79c:	88c01fcc 	andi	r3,r17,127
    c7a0:	1585883a 	add	r2,r2,r22
    c7a4:	1886983a 	sll	r3,r3,r2
    c7a8:	8c403fcc 	andi	r17,r17,255
    c7ac:	8c40201c 	xori	r17,r17,128
    c7b0:	ad400044 	addi	r21,r21,1
    c7b4:	8c7fe004 	addi	r17,r17,-128
    c7b8:	90e4b03a 	or	r18,r18,r3
    c7bc:	a809883a 	mov	r4,r21
    c7c0:	883ff316 	blt	r17,zero,c790 <__alt_data_end+0xfc00c790>
    c7c4:	003fdb06 	br	c734 <__alt_data_end+0xfc00c734>
    c7c8:	0005883a 	mov	r2,zero
    c7cc:	dfc00c17 	ldw	ra,48(sp)
    c7d0:	ddc00b17 	ldw	r23,44(sp)
    c7d4:	dd800a17 	ldw	r22,40(sp)
    c7d8:	dd400917 	ldw	r21,36(sp)
    c7dc:	dd000817 	ldw	r20,32(sp)
    c7e0:	dcc00717 	ldw	r19,28(sp)
    c7e4:	dc800617 	ldw	r18,24(sp)
    c7e8:	dc400517 	ldw	r17,20(sp)
    c7ec:	dc000417 	ldw	r16,16(sp)
    c7f0:	dec00d04 	addi	sp,sp,52
    c7f4:	f800283a 	ret

0000c7f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    c7f8:	defffb04 	addi	sp,sp,-20
    c7fc:	dc000115 	stw	r16,4(sp)
    c800:	24000317 	ldw	r16,12(r4)
    c804:	01ce303a 	nor	r7,zero,r7
    c808:	dc800315 	stw	r18,12(sp)
    c80c:	dc400215 	stw	r17,8(sp)
    c810:	dfc00415 	stw	ra,16(sp)
    c814:	2023883a 	mov	r17,r4
    c818:	2825883a 	mov	r18,r5
    c81c:	d9800015 	stw	r6,0(sp)
    c820:	81e1883a 	add	r16,r16,r7
    c824:	800d883a 	mov	r6,r16
    c828:	000b883a 	mov	r5,zero
    c82c:	0009883a 	mov	r4,zero
    c830:	30800003 	ldbu	r2,0(r6)
    c834:	84000044 	addi	r16,r16,1
    c838:	800d883a 	mov	r6,r16
    c83c:	10c01fcc 	andi	r3,r2,127
    c840:	1906983a 	sll	r3,r3,r4
    c844:	10803fcc 	andi	r2,r2,255
    c848:	1080201c 	xori	r2,r2,128
    c84c:	10bfe004 	addi	r2,r2,-128
    c850:	28cab03a 	or	r5,r5,r3
    c854:	210001c4 	addi	r4,r4,7
    c858:	103ff516 	blt	r2,zero,c830 <__alt_data_end+0xfc00c830>
    c85c:	28000e26 	beq	r5,zero,c898 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    c860:	8809883a 	mov	r4,r17
    c864:	000c3300 	call	c330 <_ZL15get_ttype_entryP16lsda_header_infom>
    c868:	d80d883a 	mov	r6,sp
    c86c:	900b883a 	mov	r5,r18
    c870:	1009883a 	mov	r4,r2
    c874:	000c5440 	call	c544 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c878:	10c03fcc 	andi	r3,r2,255
    c87c:	183fe926 	beq	r3,zero,c824 <__alt_data_end+0xfc00c824>
    c880:	dfc00417 	ldw	ra,16(sp)
    c884:	dc800317 	ldw	r18,12(sp)
    c888:	dc400217 	ldw	r17,8(sp)
    c88c:	dc000117 	ldw	r16,4(sp)
    c890:	dec00504 	addi	sp,sp,20
    c894:	f800283a 	ret
    c898:	0005883a 	mov	r2,zero
    c89c:	003ff806 	br	c880 <__alt_data_end+0xfc00c880>

0000c8a0 <__gxx_personality_sj0>:
    c8a0:	00800074 	movhi	r2,1
    c8a4:	deffdd04 	addi	sp,sp,-140
    c8a8:	10b22804 	addi	r2,r2,-14176
    c8ac:	d8800e15 	stw	r2,56(sp)
    c8b0:	008000b4 	movhi	r2,2
    c8b4:	10931c04 	addi	r2,r2,19568
    c8b8:	d8800f15 	stw	r2,60(sp)
    c8bc:	00800074 	movhi	r2,1
    c8c0:	10b39e04 	addi	r2,r2,-12680
    c8c4:	d9001515 	stw	r4,84(sp)
    c8c8:	d9000804 	addi	r4,sp,32
    c8cc:	d8801115 	stw	r2,68(sp)
    c8d0:	dfc02215 	stw	ra,136(sp)
    c8d4:	df002115 	stw	fp,132(sp)
    c8d8:	dec01015 	stw	sp,64(sp)
    c8dc:	dec01215 	stw	sp,72(sp)
    c8e0:	d9401915 	stw	r5,100(sp)
    c8e4:	d9801615 	stw	r6,88(sp)
    c8e8:	d9c01715 	stw	r7,92(sp)
    c8ec:	000f1d40 	call	f1d4 <_Unwind_SjLj_Register>
    c8f0:	d8c01517 	ldw	r3,84(sp)
    c8f4:	d8000715 	stw	zero,28(sp)
    c8f8:	d8000615 	stw	zero,24(sp)
    c8fc:	00800044 	movi	r2,1
    c900:	18800926 	beq	r3,r2,c928 <__gxx_personality_sj0+0x88>
    c904:	01c000c4 	movi	r7,3
    c908:	d9c01515 	stw	r7,84(sp)
    c90c:	d9000804 	addi	r4,sp,32
    c910:	000f1ec0 	call	f1ec <_Unwind_SjLj_Unregister>
    c914:	d8801517 	ldw	r2,84(sp)
    c918:	dfc02217 	ldw	ra,136(sp)
    c91c:	df002117 	ldw	fp,132(sp)
    c920:	dec02304 	addi	sp,sp,140
    c924:	f800283a 	ret
    c928:	d9001617 	ldw	r4,88(sp)
    c92c:	00af3574 	movhi	r2,48341
    c930:	d9c01717 	ldw	r7,92(sp)
    c934:	10b54004 	addi	r2,r2,-11008
    c938:	00ee2cb4 	movhi	r3,47282
    c93c:	2085883a 	add	r2,r4,r2
    c940:	18eaaf04 	addi	r3,r3,-21828
    c944:	d8801b15 	stw	r2,108(sp)
    c948:	38c7883a 	add	r3,r7,r3
    c94c:	1105803a 	cmpltu	r2,r2,r4
    c950:	10c7883a 	add	r3,r2,r3
    c954:	d8c01c15 	stw	r3,112(sp)
    c958:	d8c01917 	ldw	r3,100(sp)
    c95c:	00800184 	movi	r2,6
    c960:	18805426 	beq	r3,r2,cab4 <__gxx_personality_sj0+0x214>
    c964:	d9002417 	ldw	r4,144(sp)
    c968:	00bfffc4 	movi	r2,-1
    c96c:	d8800915 	stw	r2,36(sp)
    c970:	000f2900 	call	f290 <_Unwind_GetLanguageSpecificData>
    c974:	d8801a15 	stw	r2,104(sp)
    c978:	1000c926 	beq	r2,zero,cca0 <__gxx_personality_sj0+0x400>
    c97c:	d9002417 	ldw	r4,144(sp)
    c980:	d80d883a 	mov	r6,sp
    c984:	100b883a 	mov	r5,r2
    c988:	000c4100 	call	c410 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c98c:	d9402417 	ldw	r5,144(sp)
    c990:	d9000503 	ldbu	r4,20(sp)
    c994:	d8801515 	stw	r2,84(sp)
    c998:	000c3840 	call	c384 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c99c:	d9002417 	ldw	r4,144(sp)
    c9a0:	d9400604 	addi	r5,sp,24
    c9a4:	d8800215 	stw	r2,8(sp)
    c9a8:	000f2600 	call	f260 <_Unwind_GetIPInfo>
    c9ac:	d8c00617 	ldw	r3,24(sp)
    c9b0:	18006126 	beq	r3,zero,cb38 <__gxx_personality_sj0+0x298>
    c9b4:	1000ba16 	blt	r2,zero,cca0 <__gxx_personality_sj0+0x400>
    c9b8:	10002f1e 	bne	r2,zero,ca78 <__gxx_personality_sj0+0x1d8>
    c9bc:	d8001515 	stw	zero,84(sp)
    c9c0:	d8001f15 	stw	zero,124(sp)
    c9c4:	d8001815 	stw	zero,96(sp)
    c9c8:	00c00044 	movi	r3,1
    c9cc:	d9001917 	ldw	r4,100(sp)
    c9d0:	2080004c 	andi	r2,r4,1
    c9d4:	1000b51e 	bne	r2,zero,ccac <__gxx_personality_sj0+0x40c>
    c9d8:	d9001917 	ldw	r4,100(sp)
    c9dc:	2080020c 	andi	r2,r4,8
    c9e0:	1000b71e 	bne	r2,zero,ccc0 <__gxx_personality_sj0+0x420>
    c9e4:	d9c01c17 	ldw	r7,112(sp)
    c9e8:	3800b826 	beq	r7,zero,cccc <__gxx_personality_sj0+0x42c>
    c9ec:	00800044 	movi	r2,1
    c9f0:	1880b526 	beq	r3,r2,ccc8 <__gxx_personality_sj0+0x428>
    c9f4:	d9c01517 	ldw	r7,84(sp)
    c9f8:	3800f516 	blt	r7,zero,cdd0 <__gxx_personality_sj0+0x530>
    c9fc:	d9002417 	ldw	r4,144(sp)
    ca00:	d9802317 	ldw	r6,140(sp)
    ca04:	00bfffc4 	movi	r2,-1
    ca08:	000b883a 	mov	r5,zero
    ca0c:	d8800915 	stw	r2,36(sp)
    ca10:	000f2340 	call	f234 <_Unwind_SetGR>
    ca14:	d9801517 	ldw	r6,84(sp)
    ca18:	d9002417 	ldw	r4,144(sp)
    ca1c:	01400044 	movi	r5,1
    ca20:	000f2340 	call	f234 <_Unwind_SetGR>
    ca24:	d9002417 	ldw	r4,144(sp)
    ca28:	d9401f17 	ldw	r5,124(sp)
    ca2c:	000f2800 	call	f280 <_Unwind_SetIP>
    ca30:	010001c4 	movi	r4,7
    ca34:	d9001515 	stw	r4,84(sp)
    ca38:	003fb406 	br	c90c <__alt_data_end+0xfc00c90c>
    ca3c:	000f883a 	mov	r7,zero
    ca40:	000d883a 	mov	r6,zero
    ca44:	19000003 	ldbu	r4,0(r3)
    ca48:	18c00044 	addi	r3,r3,1
    ca4c:	d8c01515 	stw	r3,84(sp)
    ca50:	21401fcc 	andi	r5,r4,127
    ca54:	298a983a 	sll	r5,r5,r6
    ca58:	21003fcc 	andi	r4,r4,255
    ca5c:	2100201c 	xori	r4,r4,128
    ca60:	213fe004 	addi	r4,r4,-128
    ca64:	394eb03a 	or	r7,r7,r5
    ca68:	318001c4 	addi	r6,r6,7
    ca6c:	203ff516 	blt	r4,zero,ca44 <__alt_data_end+0xfc00ca44>
    ca70:	10bfffc4 	addi	r2,r2,-1
    ca74:	10003226 	beq	r2,zero,cb40 <__gxx_personality_sj0+0x2a0>
    ca78:	d9c01517 	ldw	r7,84(sp)
    ca7c:	0011883a 	mov	r8,zero
    ca80:	000d883a 	mov	r6,zero
    ca84:	39000003 	ldbu	r4,0(r7)
    ca88:	38c00044 	addi	r3,r7,1
    ca8c:	180f883a 	mov	r7,r3
    ca90:	21401fcc 	andi	r5,r4,127
    ca94:	298a983a 	sll	r5,r5,r6
    ca98:	21003fcc 	andi	r4,r4,255
    ca9c:	2100201c 	xori	r4,r4,128
    caa0:	213fe004 	addi	r4,r4,-128
    caa4:	4150b03a 	or	r8,r8,r5
    caa8:	318001c4 	addi	r6,r6,7
    caac:	203ff516 	blt	r4,zero,ca84 <__alt_data_end+0xfc00ca84>
    cab0:	003fe206 	br	ca3c <__alt_data_end+0xfc00ca3c>
    cab4:	d9001c17 	ldw	r4,112(sp)
    cab8:	203faa1e 	bne	r4,zero,c964 <__alt_data_end+0xfc00c964>
    cabc:	d9c01517 	ldw	r7,84(sp)
    cac0:	d8801b17 	ldw	r2,108(sp)
    cac4:	38bfa736 	bltu	r7,r2,c964 <__alt_data_end+0xfc00c964>
    cac8:	d8c02317 	ldw	r3,140(sp)
    cacc:	18fffe17 	ldw	r3,-8(r3)
    cad0:	d8c01f15 	stw	r3,124(sp)
    cad4:	18008226 	beq	r3,zero,cce0 <__gxx_personality_sj0+0x440>
    cad8:	d9002317 	ldw	r4,140(sp)
    cadc:	d9c02317 	ldw	r7,140(sp)
    cae0:	213ffb17 	ldw	r4,-20(r4)
    cae4:	39fffd17 	ldw	r7,-12(r7)
    cae8:	d9001515 	stw	r4,84(sp)
    caec:	d9c01a15 	stw	r7,104(sp)
    caf0:	d8801517 	ldw	r2,84(sp)
    caf4:	103fc10e 	bge	r2,zero,c9fc <__alt_data_end+0xfc00c9fc>
    caf8:	d9002417 	ldw	r4,144(sp)
    cafc:	d9401a17 	ldw	r5,104(sp)
    cb00:	d80d883a 	mov	r6,sp
    cb04:	00bfffc4 	movi	r2,-1
    cb08:	d8800915 	stw	r2,36(sp)
    cb0c:	000c4100 	call	c410 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    cb10:	d9402417 	ldw	r5,144(sp)
    cb14:	d9000503 	ldbu	r4,20(sp)
    cb18:	000c3840 	call	c384 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    cb1c:	d9000503 	ldbu	r4,20(sp)
    cb20:	d9402417 	ldw	r5,144(sp)
    cb24:	d8800215 	stw	r2,8(sp)
    cb28:	000c3840 	call	c384 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    cb2c:	d8c02317 	ldw	r3,140(sp)
    cb30:	18bffe15 	stw	r2,-8(r3)
    cb34:	003fb106 	br	c9fc <__alt_data_end+0xfc00c9fc>
    cb38:	10bfffc4 	addi	r2,r2,-1
    cb3c:	003f9d06 	br	c9b4 <__alt_data_end+0xfc00c9b4>
    cb40:	42000044 	addi	r8,r8,1
    cb44:	da001f15 	stw	r8,124(sp)
    cb48:	38005326 	beq	r7,zero,cc98 <__gxx_personality_sj0+0x3f8>
    cb4c:	d8800417 	ldw	r2,16(sp)
    cb50:	39ffffc4 	addi	r7,r7,-1
    cb54:	11c5883a 	add	r2,r2,r7
    cb58:	d8801815 	stw	r2,96(sp)
    cb5c:	40005026 	beq	r8,zero,cca0 <__gxx_personality_sj0+0x400>
    cb60:	10007426 	beq	r2,zero,cd34 <__gxx_personality_sj0+0x494>
    cb64:	d8801917 	ldw	r2,100(sp)
    cb68:	1080020c 	andi	r2,r2,8
    cb6c:	d8802015 	stw	r2,128(sp)
    cb70:	1000a21e 	bne	r2,zero,cdfc <__gxx_personality_sj0+0x55c>
    cb74:	d8c01c17 	ldw	r3,112(sp)
    cb78:	1800b026 	beq	r3,zero,ce3c <__gxx_personality_sj0+0x59c>
    cb7c:	01c000f4 	movhi	r7,3
    cb80:	39fbb804 	addi	r7,r7,-4384
    cb84:	d9c01e15 	stw	r7,120(sp)
    cb88:	d8001d05 	stb	zero,116(sp)
    cb8c:	d8c01817 	ldw	r3,96(sp)
    cb90:	d8001515 	stw	zero,84(sp)
    cb94:	0009883a 	mov	r4,zero
    cb98:	19400003 	ldbu	r5,0(r3)
    cb9c:	18800044 	addi	r2,r3,1
    cba0:	d9c01517 	ldw	r7,84(sp)
    cba4:	28c01fcc 	andi	r3,r5,127
    cba8:	1906983a 	sll	r3,r3,r4
    cbac:	29803fcc 	andi	r6,r5,255
    cbb0:	3180201c 	xori	r6,r6,128
    cbb4:	38ceb03a 	or	r7,r7,r3
    cbb8:	d8801715 	stw	r2,92(sp)
    cbbc:	31bfe004 	addi	r6,r6,-128
    cbc0:	d9c01515 	stw	r7,84(sp)
    cbc4:	210001c4 	addi	r4,r4,7
    cbc8:	1007883a 	mov	r3,r2
    cbcc:	303ff216 	blt	r6,zero,cb98 <__alt_data_end+0xfc00cb98>
    cbd0:	00c007c4 	movi	r3,31
    cbd4:	19000836 	bltu	r3,r4,cbf8 <__gxx_personality_sj0+0x358>
    cbd8:	2940100c 	andi	r5,r5,64
    cbdc:	28000626 	beq	r5,zero,cbf8 <__gxx_personality_sj0+0x358>
    cbe0:	01c00044 	movi	r7,1
    cbe4:	3908983a 	sll	r4,r7,r4
    cbe8:	d8c01517 	ldw	r3,84(sp)
    cbec:	0109c83a 	sub	r4,zero,r4
    cbf0:	1906b03a 	or	r3,r3,r4
    cbf4:	d8c01515 	stw	r3,84(sp)
    cbf8:	d8001615 	stw	zero,88(sp)
    cbfc:	0009883a 	mov	r4,zero
    cc00:	11400003 	ldbu	r5,0(r2)
    cc04:	d9c01617 	ldw	r7,88(sp)
    cc08:	10800044 	addi	r2,r2,1
    cc0c:	28c01fcc 	andi	r3,r5,127
    cc10:	1906983a 	sll	r3,r3,r4
    cc14:	29803fcc 	andi	r6,r5,255
    cc18:	3180201c 	xori	r6,r6,128
    cc1c:	38ceb03a 	or	r7,r7,r3
    cc20:	31bfe004 	addi	r6,r6,-128
    cc24:	d9c01615 	stw	r7,88(sp)
    cc28:	210001c4 	addi	r4,r4,7
    cc2c:	303ff416 	blt	r6,zero,cc00 <__alt_data_end+0xfc00cc00>
    cc30:	008007c4 	movi	r2,31
    cc34:	11000736 	bltu	r2,r4,cc54 <__gxx_personality_sj0+0x3b4>
    cc38:	2940100c 	andi	r5,r5,64
    cc3c:	28000526 	beq	r5,zero,cc54 <__gxx_personality_sj0+0x3b4>
    cc40:	00c00044 	movi	r3,1
    cc44:	1908983a 	sll	r4,r3,r4
    cc48:	0109c83a 	sub	r4,zero,r4
    cc4c:	390eb03a 	or	r7,r7,r4
    cc50:	d9c01615 	stw	r7,88(sp)
    cc54:	d9001517 	ldw	r4,84(sp)
    cc58:	20003c26 	beq	r4,zero,cd4c <__gxx_personality_sj0+0x4ac>
    cc5c:	01003e0e 	bge	zero,r4,cd58 <__gxx_personality_sj0+0x4b8>
    cc60:	01ffffc4 	movi	r7,-1
    cc64:	200b883a 	mov	r5,r4
    cc68:	d809883a 	mov	r4,sp
    cc6c:	d9c00915 	stw	r7,36(sp)
    cc70:	000c3300 	call	c330 <_ZL15get_ttype_entryP16lsda_header_infom>
    cc74:	10005f26 	beq	r2,zero,cdf4 <__gxx_personality_sj0+0x554>
    cc78:	d8c01e17 	ldw	r3,120(sp)
    cc7c:	1800571e 	bne	r3,zero,cddc <__gxx_personality_sj0+0x53c>
    cc80:	d9001617 	ldw	r4,88(sp)
    cc84:	20002926 	beq	r4,zero,cd2c <__gxx_personality_sj0+0x48c>
    cc88:	d9c01717 	ldw	r7,92(sp)
    cc8c:	390f883a 	add	r7,r7,r4
    cc90:	d9c01815 	stw	r7,96(sp)
    cc94:	003fbd06 	br	cb8c <__alt_data_end+0xfc00cb8c>
    cc98:	d8c01f17 	ldw	r3,124(sp)
    cc9c:	1800251e 	bne	r3,zero,cd34 <__gxx_personality_sj0+0x494>
    cca0:	01000204 	movi	r4,8
    cca4:	d9001515 	stw	r4,84(sp)
    cca8:	003f1806 	br	c90c <__alt_data_end+0xfc00c90c>
    ccac:	d8801c17 	ldw	r2,112(sp)
    ccb0:	10000d26 	beq	r2,zero,cce8 <__gxx_personality_sj0+0x448>
    ccb4:	00800184 	movi	r2,6
    ccb8:	d8801515 	stw	r2,84(sp)
    ccbc:	003f1306 	br	c90c <__alt_data_end+0xfc00c90c>
    ccc0:	00800044 	movi	r2,1
    ccc4:	18bf4d1e 	bne	r3,r2,c9fc <__alt_data_end+0xfc00c9fc>
    ccc8:	000bff80 	call	bff8 <_ZSt9terminatev>
    cccc:	d9001b17 	ldw	r4,108(sp)
    ccd0:	00800044 	movi	r2,1
    ccd4:	113f4536 	bltu	r2,r4,c9ec <__alt_data_end+0xfc00c9ec>
    ccd8:	00800044 	movi	r2,1
    ccdc:	18bf841e 	bne	r3,r2,caf0 <__alt_data_end+0xfc00caf0>
    cce0:	d9002317 	ldw	r4,140(sp)
    cce4:	000d67c0 	call	d67c <__cxa_call_terminate>
    cce8:	d8c01b17 	ldw	r3,108(sp)
    ccec:	00800044 	movi	r2,1
    ccf0:	10fff036 	bltu	r2,r3,ccb4 <__alt_data_end+0xfc00ccb4>
    ccf4:	d9002317 	ldw	r4,140(sp)
    ccf8:	d8801817 	ldw	r2,96(sp)
    ccfc:	d9c01517 	ldw	r7,84(sp)
    cd00:	d8c01a17 	ldw	r3,104(sp)
    cd04:	20bffc15 	stw	r2,-16(r4)
    cd08:	d8800717 	ldw	r2,28(sp)
    cd0c:	21fffb15 	stw	r7,-20(r4)
    cd10:	d9c01f17 	ldw	r7,124(sp)
    cd14:	20bfff15 	stw	r2,-4(r4)
    cd18:	00800184 	movi	r2,6
    cd1c:	20fffd15 	stw	r3,-12(r4)
    cd20:	21fffe15 	stw	r7,-8(r4)
    cd24:	d8801515 	stw	r2,84(sp)
    cd28:	003ef806 	br	c90c <__alt_data_end+0xfc00c90c>
    cd2c:	d8801d03 	ldbu	r2,116(sp)
    cd30:	103fdb26 	beq	r2,zero,cca0 <__alt_data_end+0xfc00cca0>
    cd34:	d8c01917 	ldw	r3,100(sp)
    cd38:	1880004c 	andi	r2,r3,1
    cd3c:	103fd81e 	bne	r2,zero,cca0 <__alt_data_end+0xfc00cca0>
    cd40:	d8001515 	stw	zero,84(sp)
    cd44:	00c00084 	movi	r3,2
    cd48:	003f2306 	br	c9d8 <__alt_data_end+0xfc00c9d8>
    cd4c:	00c00044 	movi	r3,1
    cd50:	d8c01d05 	stb	r3,116(sp)
    cd54:	003fca06 	br	cc80 <__alt_data_end+0xfc00cc80>
    cd58:	d9001e17 	ldw	r4,120(sp)
    cd5c:	20000426 	beq	r4,zero,cd70 <__gxx_personality_sj0+0x4d0>
    cd60:	d9c02017 	ldw	r7,128(sp)
    cd64:	3800021e 	bne	r7,zero,cd70 <__gxx_personality_sj0+0x4d0>
    cd68:	d8801c17 	ldw	r2,112(sp)
    cd6c:	10002726 	beq	r2,zero,ce0c <__gxx_personality_sj0+0x56c>
    cd70:	d8801517 	ldw	r2,84(sp)
    cd74:	000d883a 	mov	r6,zero
    cd78:	000b883a 	mov	r5,zero
    cd7c:	0088303a 	nor	r4,zero,r2
    cd80:	d8800317 	ldw	r2,12(sp)
    cd84:	1109883a 	add	r4,r2,r4
    cd88:	20800003 	ldbu	r2,0(r4)
    cd8c:	21000044 	addi	r4,r4,1
    cd90:	10c01fcc 	andi	r3,r2,127
    cd94:	1946983a 	sll	r3,r3,r5
    cd98:	10803fcc 	andi	r2,r2,255
    cd9c:	1080201c 	xori	r2,r2,128
    cda0:	10bfe004 	addi	r2,r2,-128
    cda4:	30ccb03a 	or	r6,r6,r3
    cda8:	294001c4 	addi	r5,r5,7
    cdac:	103ff616 	blt	r2,zero,cd88 <__alt_data_end+0xfc00cd88>
    cdb0:	3005003a 	cmpeq	r2,r6,zero
    cdb4:	10803fcc 	andi	r2,r2,255
    cdb8:	103fb126 	beq	r2,zero,cc80 <__alt_data_end+0xfc00cc80>
    cdbc:	d9c01917 	ldw	r7,100(sp)
    cdc0:	3880004c 	andi	r2,r7,1
    cdc4:	103fb91e 	bne	r2,zero,ccac <__alt_data_end+0xfc00ccac>
    cdc8:	d8802017 	ldw	r2,128(sp)
    cdcc:	10002d26 	beq	r2,zero,ce84 <__gxx_personality_sj0+0x5e4>
    cdd0:	00800044 	movi	r2,1
    cdd4:	d8800915 	stw	r2,36(sp)
    cdd8:	000c0200 	call	c020 <_ZSt10unexpectedv>
    cddc:	d9800704 	addi	r6,sp,28
    cde0:	180b883a 	mov	r5,r3
    cde4:	1009883a 	mov	r4,r2
    cde8:	000c5440 	call	c544 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    cdec:	10803fcc 	andi	r2,r2,255
    cdf0:	103fa326 	beq	r2,zero,cc80 <__alt_data_end+0xfc00cc80>
    cdf4:	00c000c4 	movi	r3,3
    cdf8:	003ef406 	br	c9cc <__alt_data_end+0xfc00c9cc>
    cdfc:	010000f4 	movhi	r4,3
    ce00:	213bb604 	addi	r4,r4,-4392
    ce04:	d9001e15 	stw	r4,120(sp)
    ce08:	003f5f06 	br	cb88 <__alt_data_end+0xfc00cb88>
    ce0c:	d9001b17 	ldw	r4,108(sp)
    ce10:	00c00044 	movi	r3,1
    ce14:	193fd636 	bltu	r3,r4,cd70 <__alt_data_end+0xfc00cd70>
    ce18:	01ffffc4 	movi	r7,-1
    ce1c:	d9c00915 	stw	r7,36(sp)
    ce20:	d9800717 	ldw	r6,28(sp)
    ce24:	d9c01517 	ldw	r7,84(sp)
    ce28:	d9401e17 	ldw	r5,120(sp)
    ce2c:	d809883a 	mov	r4,sp
    ce30:	000c7f80 	call	c7f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    ce34:	1080005c 	xori	r2,r2,1
    ce38:	003fde06 	br	cdb4 <__alt_data_end+0xfc00cdb4>
    ce3c:	d9001b17 	ldw	r4,108(sp)
    ce40:	00800044 	movi	r2,1
    ce44:	113f4d36 	bltu	r2,r4,cb7c <__alt_data_end+0xfc00cb7c>
    ce48:	d9c02317 	ldw	r7,140(sp)
    ce4c:	38800017 	ldw	r2,0(r7)
    ce50:	1080004c 	andi	r2,r2,1
    ce54:	1000061e 	bne	r2,zero,ce70 <__gxx_personality_sj0+0x5d0>
    ce58:	d8c02317 	ldw	r3,140(sp)
    ce5c:	18800504 	addi	r2,r3,20
    ce60:	d8800715 	stw	r2,28(sp)
    ce64:	10bff017 	ldw	r2,-64(r2)
    ce68:	d8801e15 	stw	r2,120(sp)
    ce6c:	003f4606 	br	cb88 <__alt_data_end+0xfc00cb88>
    ce70:	38bff517 	ldw	r2,-44(r7)
    ce74:	003ffa06 	br	ce60 <__alt_data_end+0xfc00ce60>
    ce78:	d9000a17 	ldw	r4,40(sp)
    ce7c:	000d2300 	call	d230 <__cxa_begin_catch>
    ce80:	003f9106 	br	ccc8 <__alt_data_end+0xfc00ccc8>
    ce84:	d9c01c17 	ldw	r7,112(sp)
    ce88:	383eda1e 	bne	r7,zero,c9f4 <__alt_data_end+0xfc00c9f4>
    ce8c:	d8c01b17 	ldw	r3,108(sp)
    ce90:	00800044 	movi	r2,1
    ce94:	10fed736 	bltu	r2,r3,c9f4 <__alt_data_end+0xfc00c9f4>
    ce98:	00c000c4 	movi	r3,3
    ce9c:	003f8e06 	br	ccd8 <__alt_data_end+0xfc00ccd8>

0000cea0 <__cxa_call_unexpected>:
    cea0:	00800074 	movhi	r2,1
    cea4:	deffe604 	addi	sp,sp,-104
    cea8:	10b22804 	addi	r2,r2,-14176
    ceac:	d8800d15 	stw	r2,52(sp)
    ceb0:	008000b4 	movhi	r2,2
    ceb4:	10932004 	addi	r2,r2,19584
    ceb8:	d8800e15 	stw	r2,56(sp)
    cebc:	d8800104 	addi	r2,sp,4
    cec0:	d8800f15 	stw	r2,60(sp)
    cec4:	00800074 	movhi	r2,1
    cec8:	10b3cb04 	addi	r2,r2,-12500
    cecc:	d9001415 	stw	r4,80(sp)
    ced0:	d9000704 	addi	r4,sp,28
    ced4:	dfc01915 	stw	ra,100(sp)
    ced8:	d8801015 	stw	r2,64(sp)
    cedc:	df001815 	stw	fp,96(sp)
    cee0:	dec01115 	stw	sp,68(sp)
    cee4:	000f1d40 	call	f1d4 <_Unwind_SjLj_Register>
    cee8:	d9001417 	ldw	r4,80(sp)
    ceec:	000d2300 	call	d230 <__cxa_begin_catch>
    cef0:	d8c01417 	ldw	r3,80(sp)
    cef4:	18bffe17 	ldw	r2,-8(r3)
    cef8:	193ff717 	ldw	r4,-36(r3)
    cefc:	18fffd17 	ldw	r3,-12(r3)
    cf00:	d8800315 	stw	r2,12(sp)
    cf04:	d8c01615 	stw	r3,88(sp)
    cf08:	d8c01417 	ldw	r3,80(sp)
    cf0c:	18fffb17 	ldw	r3,-20(r3)
    cf10:	d8c01515 	stw	r3,84(sp)
    cf14:	d8c01417 	ldw	r3,80(sp)
    cf18:	18fff817 	ldw	r3,-32(r3)
    cf1c:	d8c01415 	stw	r3,80(sp)
    cf20:	00c00044 	movi	r3,1
    cf24:	d8c00815 	stw	r3,32(sp)
    cf28:	000c0100 	call	c010 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    cf2c:	d8c00917 	ldw	r3,36(sp)
    cf30:	d8800817 	ldw	r2,32(sp)
    cf34:	d8c01715 	stw	r3,92(sp)
    cf38:	10000a26 	beq	r2,zero,cf64 <__cxa_call_unexpected+0xc4>
    cf3c:	10bfffc4 	addi	r2,r2,-1
    cf40:	10000126 	beq	r2,zero,cf48 <__cxa_call_unexpected+0xa8>
    cf44:	003b68fa 	trap	3
    cf48:	d8000815 	stw	zero,32(sp)
    cf4c:	000d2e40 	call	d2e4 <__cxa_end_catch>
    cf50:	000d2e40 	call	d2e4 <__cxa_end_catch>
    cf54:	d9001717 	ldw	r4,92(sp)
    cf58:	00bfffc4 	movi	r2,-1
    cf5c:	d8800815 	stw	r2,32(sp)
    cf60:	000f3d00 	call	f3d0 <_Unwind_SjLj_Resume>
    cf64:	d9001717 	ldw	r4,92(sp)
    cf68:	000d2300 	call	d230 <__cxa_begin_catch>
    cf6c:	000d6d40 	call	d6d4 <__cxa_get_globals_fast>
    cf70:	10800017 	ldw	r2,0(r2)
    cf74:	10c00b17 	ldw	r3,44(r2)
    cf78:	18c0004c 	andi	r3,r3,1
    cf7c:	18001e26 	beq	r3,zero,cff8 <__cxa_call_unexpected+0x158>
    cf80:	10800017 	ldw	r2,0(r2)
    cf84:	d8801715 	stw	r2,92(sp)
    cf88:	d8801517 	ldw	r2,84(sp)
    cf8c:	00802b0e 	bge	zero,r2,d03c <__cxa_call_unexpected+0x19c>
    cf90:	d8c01717 	ldw	r3,92(sp)
    cf94:	d8800317 	ldw	r2,12(sp)
    cf98:	d9c01517 	ldw	r7,84(sp)
    cf9c:	193ff017 	ldw	r4,-64(r3)
    cfa0:	d9801617 	ldw	r6,88(sp)
    cfa4:	d8800015 	stw	r2,0(sp)
    cfa8:	180b883a 	mov	r5,r3
    cfac:	00800084 	movi	r2,2
    cfb0:	d8800815 	stw	r2,32(sp)
    cfb4:	000c5cc0 	call	c5cc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cfb8:	10803fcc 	andi	r2,r2,255
    cfbc:	10001e1e 	bne	r2,zero,d038 <__cxa_call_unexpected+0x198>
    cfc0:	d8800317 	ldw	r2,12(sp)
    cfc4:	d9c01517 	ldw	r7,84(sp)
    cfc8:	d9801617 	ldw	r6,88(sp)
    cfcc:	010000f4 	movhi	r4,3
    cfd0:	d8800015 	stw	r2,0(sp)
    cfd4:	212e4c04 	addi	r4,r4,-18128
    cfd8:	00800084 	movi	r2,2
    cfdc:	000b883a 	mov	r5,zero
    cfe0:	d8800815 	stw	r2,32(sp)
    cfe4:	000c5cc0 	call	c5cc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    cfe8:	10803fcc 	andi	r2,r2,255
    cfec:	1000051e 	bne	r2,zero,d004 <__cxa_call_unexpected+0x164>
    cff0:	d9001417 	ldw	r4,80(sp)
    cff4:	000bf380 	call	bf38 <_ZN10__cxxabiv111__terminateEPFvvE>
    cff8:	10801004 	addi	r2,r2,64
    cffc:	d8801715 	stw	r2,92(sp)
    d000:	003fe106 	br	cf88 <__alt_data_end+0xfc00cf88>
    d004:	01000104 	movi	r4,4
    d008:	000d5180 	call	d518 <__cxa_allocate_exception>
    d00c:	00c000f4 	movhi	r3,3
    d010:	18ee6704 	addi	r3,r3,-18020
    d014:	01800074 	movhi	r6,1
    d018:	014000f4 	movhi	r5,3
    d01c:	10c00015 	stw	r3,0(r2)
    d020:	31b5bc04 	addi	r6,r6,-10512
    d024:	00c00084 	movi	r3,2
    d028:	296e4c04 	addi	r5,r5,-18128
    d02c:	1009883a 	mov	r4,r2
    d030:	d8c00815 	stw	r3,32(sp)
    d034:	000d1140 	call	d114 <__cxa_throw>
    d038:	000d1a40 	call	d1a4 <__cxa_rethrow>
    d03c:	d9401617 	ldw	r5,88(sp)
    d040:	00800084 	movi	r2,2
    d044:	d9800104 	addi	r6,sp,4
    d048:	0009883a 	mov	r4,zero
    d04c:	d8800815 	stw	r2,32(sp)
    d050:	000c4100 	call	c410 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    d054:	d9801717 	ldw	r6,92(sp)
    d058:	d9c01517 	ldw	r7,84(sp)
    d05c:	d9000104 	addi	r4,sp,4
    d060:	317ff017 	ldw	r5,-64(r6)
    d064:	000c7f80 	call	c7f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    d068:	10803fcc 	andi	r2,r2,255
    d06c:	1000171e 	bne	r2,zero,d0cc <__cxa_call_unexpected+0x22c>
    d070:	d9c01517 	ldw	r7,84(sp)
    d074:	014000f4 	movhi	r5,3
    d078:	00800084 	movi	r2,2
    d07c:	296e4c04 	addi	r5,r5,-18128
    d080:	000d883a 	mov	r6,zero
    d084:	d9000104 	addi	r4,sp,4
    d088:	d8800815 	stw	r2,32(sp)
    d08c:	000c7f80 	call	c7f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    d090:	10803fcc 	andi	r2,r2,255
    d094:	103fd626 	beq	r2,zero,cff0 <__alt_data_end+0xfc00cff0>
    d098:	01000104 	movi	r4,4
    d09c:	000d5180 	call	d518 <__cxa_allocate_exception>
    d0a0:	00c000f4 	movhi	r3,3
    d0a4:	18ee6704 	addi	r3,r3,-18020
    d0a8:	01800074 	movhi	r6,1
    d0ac:	014000f4 	movhi	r5,3
    d0b0:	10c00015 	stw	r3,0(r2)
    d0b4:	31b5bc04 	addi	r6,r6,-10512
    d0b8:	00c00084 	movi	r3,2
    d0bc:	296e4c04 	addi	r5,r5,-18128
    d0c0:	1009883a 	mov	r4,r2
    d0c4:	d8c00815 	stw	r3,32(sp)
    d0c8:	000d1140 	call	d114 <__cxa_throw>
    d0cc:	000d1a40 	call	d1a4 <__cxa_rethrow>

0000d0d0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    d0d0:	defffe04 	addi	sp,sp,-8
    d0d4:	dfc00115 	stw	ra,4(sp)
    d0d8:	dc000015 	stw	r16,0(sp)
    d0dc:	00800044 	movi	r2,1
    d0e0:	11000a36 	bltu	r2,r4,d10c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    d0e4:	28bff617 	ldw	r2,-40(r5)
    d0e8:	2c000504 	addi	r16,r5,20
    d0ec:	10000226 	beq	r2,zero,d0f8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    d0f0:	8009883a 	mov	r4,r16
    d0f4:	103ee83a 	callr	r2
    d0f8:	8009883a 	mov	r4,r16
    d0fc:	dfc00117 	ldw	ra,4(sp)
    d100:	dc000017 	ldw	r16,0(sp)
    d104:	dec00204 	addi	sp,sp,8
    d108:	000d5781 	jmpi	d578 <__cxa_free_exception>
    d10c:	293ff817 	ldw	r4,-32(r5)
    d110:	000bf380 	call	bf38 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d114 <__cxa_throw>:
    d114:	defffb04 	addi	sp,sp,-20
    d118:	dfc00415 	stw	ra,16(sp)
    d11c:	dcc00315 	stw	r19,12(sp)
    d120:	dc800215 	stw	r18,8(sp)
    d124:	2827883a 	mov	r19,r5
    d128:	3025883a 	mov	r18,r6
    d12c:	dc400115 	stw	r17,4(sp)
    d130:	dc000015 	stw	r16,0(sp)
    d134:	2021883a 	mov	r16,r4
    d138:	000d6e00 	call	d6e0 <__cxa_get_globals>
    d13c:	10c00117 	ldw	r3,4(r2)
    d140:	847ffb04 	addi	r17,r16,-20
    d144:	18c00044 	addi	r3,r3,1
    d148:	10c00115 	stw	r3,4(r2)
    d14c:	00800044 	movi	r2,1
    d150:	80bfef15 	stw	r2,-68(r16)
    d154:	84fff015 	stw	r19,-64(r16)
    d158:	84bff115 	stw	r18,-60(r16)
    d15c:	000c0700 	call	c070 <_ZSt14get_unexpectedv>
    d160:	80bff215 	stw	r2,-56(r16)
    d164:	000c04c0 	call	c04c <_ZSt13get_terminatev>
    d168:	80bff315 	stw	r2,-52(r16)
    d16c:	0090caf4 	movhi	r2,17195
    d170:	108ac004 	addi	r2,r2,11008
    d174:	80bffb15 	stw	r2,-20(r16)
    d178:	0091d3b4 	movhi	r2,18254
    d17c:	109550c4 	addi	r2,r2,21827
    d180:	80bffc15 	stw	r2,-16(r16)
    d184:	00800074 	movhi	r2,1
    d188:	10b43404 	addi	r2,r2,-12080
    d18c:	8809883a 	mov	r4,r17
    d190:	80bffd15 	stw	r2,-12(r16)
    d194:	000f2bc0 	call	f2bc <_Unwind_SjLj_RaiseException>
    d198:	8809883a 	mov	r4,r17
    d19c:	000d2300 	call	d230 <__cxa_begin_catch>
    d1a0:	000bff80 	call	bff8 <_ZSt9terminatev>

0000d1a4 <__cxa_rethrow>:
    d1a4:	defffe04 	addi	sp,sp,-8
    d1a8:	dfc00115 	stw	ra,4(sp)
    d1ac:	dc000015 	stw	r16,0(sp)
    d1b0:	000d6e00 	call	d6e0 <__cxa_get_globals>
    d1b4:	10c00117 	ldw	r3,4(r2)
    d1b8:	11000017 	ldw	r4,0(r2)
    d1bc:	18c00044 	addi	r3,r3,1
    d1c0:	10c00115 	stw	r3,4(r2)
    d1c4:	20001126 	beq	r4,zero,d20c <__cxa_rethrow+0x68>
    d1c8:	21400b17 	ldw	r5,44(r4)
    d1cc:	01ef3574 	movhi	r7,48341
    d1d0:	39f54004 	addi	r7,r7,-11008
    d1d4:	29cf883a 	add	r7,r5,r7
    d1d8:	20c00c17 	ldw	r3,48(r4)
    d1dc:	394d803a 	cmpltu	r6,r7,r5
    d1e0:	016e2cb4 	movhi	r5,47282
    d1e4:	296aaf04 	addi	r5,r5,-21828
    d1e8:	1947883a 	add	r3,r3,r5
    d1ec:	30c7883a 	add	r3,r6,r3
    d1f0:	18000726 	beq	r3,zero,d210 <__cxa_rethrow+0x6c>
    d1f4:	10000015 	stw	zero,0(r2)
    d1f8:	24000b04 	addi	r16,r4,44
    d1fc:	8009883a 	mov	r4,r16
    d200:	000f4140 	call	f414 <_Unwind_SjLj_Resume_or_Rethrow>
    d204:	8009883a 	mov	r4,r16
    d208:	000d2300 	call	d230 <__cxa_begin_catch>
    d20c:	000bff80 	call	bff8 <_ZSt9terminatev>
    d210:	00c00044 	movi	r3,1
    d214:	19fff736 	bltu	r3,r7,d1f4 <__alt_data_end+0xfc00d1f4>
    d218:	20800517 	ldw	r2,20(r4)
    d21c:	0085c83a 	sub	r2,zero,r2
    d220:	20800515 	stw	r2,20(r4)
    d224:	003ff406 	br	d1f8 <__alt_data_end+0xfc00d1f8>

0000d228 <__cxa_get_exception_ptr>:
    d228:	20bfff17 	ldw	r2,-4(r4)
    d22c:	f800283a 	ret

0000d230 <__cxa_begin_catch>:
    d230:	defffe04 	addi	sp,sp,-8
    d234:	dc000015 	stw	r16,0(sp)
    d238:	dfc00115 	stw	ra,4(sp)
    d23c:	2021883a 	mov	r16,r4
    d240:	000d6e00 	call	d6e0 <__cxa_get_globals>
    d244:	81000017 	ldw	r4,0(r16)
    d248:	80c00117 	ldw	r3,4(r16)
    d24c:	01af3574 	movhi	r6,48341
    d250:	31b54004 	addi	r6,r6,-11008
    d254:	016e2cb4 	movhi	r5,47282
    d258:	296aaf04 	addi	r5,r5,-21828
    d25c:	218d883a 	add	r6,r4,r6
    d260:	3109803a 	cmpltu	r4,r6,r4
    d264:	1947883a 	add	r3,r3,r5
    d268:	20c7883a 	add	r3,r4,r3
    d26c:	817ff504 	addi	r5,r16,-44
    d270:	11000017 	ldw	r4,0(r2)
    d274:	18000726 	beq	r3,zero,d294 <__cxa_begin_catch+0x64>
    d278:	2000191e 	bne	r4,zero,d2e0 <__cxa_begin_catch+0xb0>
    d27c:	11400015 	stw	r5,0(r2)
    d280:	0005883a 	mov	r2,zero
    d284:	dfc00117 	ldw	ra,4(sp)
    d288:	dc000017 	ldw	r16,0(sp)
    d28c:	dec00204 	addi	sp,sp,8
    d290:	f800283a 	ret
    d294:	01c00044 	movi	r7,1
    d298:	39bff736 	bltu	r7,r6,d278 <__alt_data_end+0xfc00d278>
    d29c:	80fffa17 	ldw	r3,-24(r16)
    d2a0:	18000d16 	blt	r3,zero,d2d8 <__cxa_begin_catch+0xa8>
    d2a4:	18c00044 	addi	r3,r3,1
    d2a8:	11800117 	ldw	r6,4(r2)
    d2ac:	80fffa15 	stw	r3,-24(r16)
    d2b0:	30ffffc4 	addi	r3,r6,-1
    d2b4:	10c00115 	stw	r3,4(r2)
    d2b8:	21400226 	beq	r4,r5,d2c4 <__cxa_begin_catch+0x94>
    d2bc:	813ff915 	stw	r4,-28(r16)
    d2c0:	11400015 	stw	r5,0(r2)
    d2c4:	80bfff17 	ldw	r2,-4(r16)
    d2c8:	dfc00117 	ldw	ra,4(sp)
    d2cc:	dc000017 	ldw	r16,0(sp)
    d2d0:	dec00204 	addi	sp,sp,8
    d2d4:	f800283a 	ret
    d2d8:	38c7c83a 	sub	r3,r7,r3
    d2dc:	003ff206 	br	d2a8 <__alt_data_end+0xfc00d2a8>
    d2e0:	000bff80 	call	bff8 <_ZSt9terminatev>

0000d2e4 <__cxa_end_catch>:
    d2e4:	deffff04 	addi	sp,sp,-4
    d2e8:	dfc00015 	stw	ra,0(sp)
    d2ec:	000d6d40 	call	d6d4 <__cxa_get_globals_fast>
    d2f0:	11000017 	ldw	r4,0(r2)
    d2f4:	20001426 	beq	r4,zero,d348 <__cxa_end_catch+0x64>
    d2f8:	21400b17 	ldw	r5,44(r4)
    d2fc:	01ef3574 	movhi	r7,48341
    d300:	39f54004 	addi	r7,r7,-11008
    d304:	29cf883a 	add	r7,r5,r7
    d308:	20c00c17 	ldw	r3,48(r4)
    d30c:	394d803a 	cmpltu	r6,r7,r5
    d310:	016e2cb4 	movhi	r5,47282
    d314:	296aaf04 	addi	r5,r5,-21828
    d318:	1947883a 	add	r3,r3,r5
    d31c:	30c7883a 	add	r3,r6,r3
    d320:	18000c1e 	bne	r3,zero,d354 <__cxa_end_catch+0x70>
    d324:	00c00044 	movi	r3,1
    d328:	19c00a36 	bltu	r3,r7,d354 <__cxa_end_catch+0x70>
    d32c:	20c00517 	ldw	r3,20(r4)
    d330:	18000d16 	blt	r3,zero,d368 <__cxa_end_catch+0x84>
    d334:	18ffffc4 	addi	r3,r3,-1
    d338:	18001026 	beq	r3,zero,d37c <__cxa_end_catch+0x98>
    d33c:	00bfffc4 	movi	r2,-1
    d340:	18801426 	beq	r3,r2,d394 <__cxa_end_catch+0xb0>
    d344:	20c00515 	stw	r3,20(r4)
    d348:	dfc00017 	ldw	ra,0(sp)
    d34c:	dec00104 	addi	sp,sp,4
    d350:	f800283a 	ret
    d354:	21000b04 	addi	r4,r4,44
    d358:	10000015 	stw	zero,0(r2)
    d35c:	dfc00017 	ldw	ra,0(sp)
    d360:	dec00104 	addi	sp,sp,4
    d364:	000f4601 	jmpi	f460 <_Unwind_DeleteException>
    d368:	18c00044 	addi	r3,r3,1
    d36c:	183ff51e 	bne	r3,zero,d344 <__alt_data_end+0xfc00d344>
    d370:	21400417 	ldw	r5,16(r4)
    d374:	11400015 	stw	r5,0(r2)
    d378:	003ff206 	br	d344 <__alt_data_end+0xfc00d344>
    d37c:	20c00417 	ldw	r3,16(r4)
    d380:	21000b04 	addi	r4,r4,44
    d384:	10c00015 	stw	r3,0(r2)
    d388:	dfc00017 	ldw	ra,0(sp)
    d38c:	dec00104 	addi	sp,sp,4
    d390:	000f4601 	jmpi	f460 <_Unwind_DeleteException>
    d394:	000bff80 	call	bff8 <_ZSt9terminatev>

0000d398 <_ZSt18uncaught_exceptionv>:
    d398:	deffff04 	addi	sp,sp,-4
    d39c:	dfc00015 	stw	ra,0(sp)
    d3a0:	000d6e00 	call	d6e0 <__cxa_get_globals>
    d3a4:	10800117 	ldw	r2,4(r2)
    d3a8:	1004c03a 	cmpne	r2,r2,zero
    d3ac:	dfc00017 	ldw	ra,0(sp)
    d3b0:	dec00104 	addi	sp,sp,4
    d3b4:	f800283a 	ret

0000d3b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    d3b8:	018000f4 	movhi	r6,3
    d3bc:	3188a904 	addi	r6,r6,8868
    d3c0:	31400117 	ldw	r5,4(r6)
    d3c4:	223fff04 	addi	r8,r4,-4
    d3c8:	227fff17 	ldw	r9,-4(r4)
    d3cc:	28001326 	beq	r5,zero,d41c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    d3d0:	424f883a 	add	r7,r8,r9
    d3d4:	29c01426 	beq	r5,r7,d428 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    d3d8:	28c00117 	ldw	r3,4(r5)
    d3dc:	18001c26 	beq	r3,zero,d450 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    d3e0:	38c00336 	bltu	r7,r3,d3f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    d3e4:	00001e06 	br	d460 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    d3e8:	3880052e 	bgeu	r7,r2,d400 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    d3ec:	1007883a 	mov	r3,r2
    d3f0:	18800117 	ldw	r2,4(r3)
    d3f4:	29800104 	addi	r6,r5,4
    d3f8:	180b883a 	mov	r5,r3
    d3fc:	103ffa1e 	bne	r2,zero,d3e8 <__alt_data_end+0xfc00d3e8>
    d400:	19400017 	ldw	r5,0(r3)
    d404:	194f883a 	add	r7,r3,r5
    d408:	41c00e26 	beq	r8,r7,d444 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    d40c:	20800015 	stw	r2,0(r4)
    d410:	30800017 	ldw	r2,0(r6)
    d414:	12000115 	stw	r8,4(r2)
    d418:	f800283a 	ret
    d41c:	20000015 	stw	zero,0(r4)
    d420:	32000115 	stw	r8,4(r6)
    d424:	f800283a 	ret
    d428:	28c00017 	ldw	r3,0(r5)
    d42c:	28800117 	ldw	r2,4(r5)
    d430:	1a53883a 	add	r9,r3,r9
    d434:	227fff15 	stw	r9,-4(r4)
    d438:	20800015 	stw	r2,0(r4)
    d43c:	32000115 	stw	r8,4(r6)
    d440:	f800283a 	ret
    d444:	494b883a 	add	r5,r9,r5
    d448:	19400015 	stw	r5,0(r3)
    d44c:	f800283a 	ret
    d450:	0005883a 	mov	r2,zero
    d454:	2807883a 	mov	r3,r5
    d458:	31800104 	addi	r6,r6,4
    d45c:	003fe806 	br	d400 <__alt_data_end+0xfc00d400>
    d460:	1805883a 	mov	r2,r3
    d464:	31800104 	addi	r6,r6,4
    d468:	2807883a 	mov	r3,r5
    d46c:	003fe406 	br	d400 <__alt_data_end+0xfc00d400>

0000d470 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    d470:	20800104 	addi	r2,r4,4
    d474:	00c001c4 	movi	r3,7
    d478:	1880112e 	bgeu	r3,r2,d4c0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    d47c:	20c9883a 	add	r4,r4,r3
    d480:	00bfff04 	movi	r2,-4
    d484:	208a703a 	and	r5,r4,r2
    d488:	018000f4 	movhi	r6,3
    d48c:	3188a904 	addi	r6,r6,8868
    d490:	30c00117 	ldw	r3,4(r6)
    d494:	18000826 	beq	r3,zero,d4b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    d498:	19000017 	ldw	r4,0(r3)
    d49c:	21400436 	bltu	r4,r5,d4b0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    d4a0:	00001a06 	br	d50c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    d4a4:	11000017 	ldw	r4,0(r2)
    d4a8:	2140072e 	bgeu	r4,r5,d4c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    d4ac:	1007883a 	mov	r3,r2
    d4b0:	18800117 	ldw	r2,4(r3)
    d4b4:	103ffb1e 	bne	r2,zero,d4a4 <__alt_data_end+0xfc00d4a4>
    d4b8:	0005883a 	mov	r2,zero
    d4bc:	f800283a 	ret
    d4c0:	01400204 	movi	r5,8
    d4c4:	003ff006 	br	d488 <__alt_data_end+0xfc00d488>
    d4c8:	18c00104 	addi	r3,r3,4
    d4cc:	2149c83a 	sub	r4,r4,r5
    d4d0:	018001c4 	movi	r6,7
    d4d4:	3100092e 	bgeu	r6,r4,d4fc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    d4d8:	11c00117 	ldw	r7,4(r2)
    d4dc:	114d883a 	add	r6,r2,r5
    d4e0:	31000015 	stw	r4,0(r6)
    d4e4:	31c00115 	stw	r7,4(r6)
    d4e8:	18800017 	ldw	r2,0(r3)
    d4ec:	11400015 	stw	r5,0(r2)
    d4f0:	19800015 	stw	r6,0(r3)
    d4f4:	10800104 	addi	r2,r2,4
    d4f8:	f800283a 	ret
    d4fc:	11000117 	ldw	r4,4(r2)
    d500:	10800104 	addi	r2,r2,4
    d504:	19000015 	stw	r4,0(r3)
    d508:	f800283a 	ret
    d50c:	1805883a 	mov	r2,r3
    d510:	30c00104 	addi	r3,r6,4
    d514:	003fed06 	br	d4cc <__alt_data_end+0xfc00d4cc>

0000d518 <__cxa_allocate_exception>:
    d518:	defffd04 	addi	sp,sp,-12
    d51c:	dc400115 	stw	r17,4(sp)
    d520:	24401104 	addi	r17,r4,68
    d524:	8809883a 	mov	r4,r17
    d528:	dc000015 	stw	r16,0(sp)
    d52c:	dfc00215 	stw	ra,8(sp)
    d530:	000f5b40 	call	f5b4 <malloc>
    d534:	1021883a 	mov	r16,r2
    d538:	10000a26 	beq	r2,zero,d564 <__cxa_allocate_exception+0x4c>
    d53c:	01801104 	movi	r6,68
    d540:	000b883a 	mov	r5,zero
    d544:	8009883a 	mov	r4,r16
    d548:	000ff300 	call	ff30 <memset>
    d54c:	80801104 	addi	r2,r16,68
    d550:	dfc00217 	ldw	ra,8(sp)
    d554:	dc400117 	ldw	r17,4(sp)
    d558:	dc000017 	ldw	r16,0(sp)
    d55c:	dec00304 	addi	sp,sp,12
    d560:	f800283a 	ret
    d564:	8809883a 	mov	r4,r17
    d568:	000d4700 	call	d470 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d56c:	1021883a 	mov	r16,r2
    d570:	103ff21e 	bne	r2,zero,d53c <__alt_data_end+0xfc00d53c>
    d574:	000bff80 	call	bff8 <_ZSt9terminatev>

0000d578 <__cxa_free_exception>:
    d578:	00c000f4 	movhi	r3,3
    d57c:	18c8a904 	addi	r3,r3,8868
    d580:	18800217 	ldw	r2,8(r3)
    d584:	213fef04 	addi	r4,r4,-68
    d588:	1100042e 	bgeu	r2,r4,d59c <__cxa_free_exception+0x24>
    d58c:	18c00317 	ldw	r3,12(r3)
    d590:	10c5883a 	add	r2,r2,r3
    d594:	2080012e 	bgeu	r4,r2,d59c <__cxa_free_exception+0x24>
    d598:	000d3b81 	jmpi	d3b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d59c:	000f5c81 	jmpi	f5c8 <free>

0000d5a0 <__cxa_allocate_dependent_exception>:
    d5a0:	defffe04 	addi	sp,sp,-8
    d5a4:	01001004 	movi	r4,64
    d5a8:	dc000015 	stw	r16,0(sp)
    d5ac:	dfc00115 	stw	ra,4(sp)
    d5b0:	000f5b40 	call	f5b4 <malloc>
    d5b4:	1021883a 	mov	r16,r2
    d5b8:	10000926 	beq	r2,zero,d5e0 <__cxa_allocate_dependent_exception+0x40>
    d5bc:	01801004 	movi	r6,64
    d5c0:	000b883a 	mov	r5,zero
    d5c4:	8009883a 	mov	r4,r16
    d5c8:	000ff300 	call	ff30 <memset>
    d5cc:	8005883a 	mov	r2,r16
    d5d0:	dfc00117 	ldw	ra,4(sp)
    d5d4:	dc000017 	ldw	r16,0(sp)
    d5d8:	dec00204 	addi	sp,sp,8
    d5dc:	f800283a 	ret
    d5e0:	01001004 	movi	r4,64
    d5e4:	000d4700 	call	d470 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    d5e8:	1021883a 	mov	r16,r2
    d5ec:	103ff31e 	bne	r2,zero,d5bc <__alt_data_end+0xfc00d5bc>
    d5f0:	000bff80 	call	bff8 <_ZSt9terminatev>

0000d5f4 <__cxa_free_dependent_exception>:
    d5f4:	014000f4 	movhi	r5,3
    d5f8:	2948a904 	addi	r5,r5,8868
    d5fc:	28c00217 	ldw	r3,8(r5)
    d600:	2005883a 	mov	r2,r4
    d604:	1900042e 	bgeu	r3,r4,d618 <__cxa_free_dependent_exception+0x24>
    d608:	29400317 	ldw	r5,12(r5)
    d60c:	1947883a 	add	r3,r3,r5
    d610:	20c0012e 	bgeu	r4,r3,d618 <__cxa_free_dependent_exception+0x24>
    d614:	000d3b81 	jmpi	d3b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    d618:	1009883a 	mov	r4,r2
    d61c:	000f5c81 	jmpi	f5c8 <free>

0000d620 <_GLOBAL__sub_I___cxa_allocate_exception>:
    d620:	defffd04 	addi	sp,sp,-12
    d624:	dc400115 	stw	r17,4(sp)
    d628:	dc000015 	stw	r16,0(sp)
    d62c:	04424004 	movi	r17,2304
    d630:	040000f4 	movhi	r16,3
    d634:	8408a904 	addi	r16,r16,8868
    d638:	8809883a 	mov	r4,r17
    d63c:	dfc00215 	stw	ra,8(sp)
    d640:	84400315 	stw	r17,12(r16)
    d644:	000f5b40 	call	f5b4 <malloc>
    d648:	80800215 	stw	r2,8(r16)
    d64c:	10000826 	beq	r2,zero,d670 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    d650:	80800115 	stw	r2,4(r16)
    d654:	14400015 	stw	r17,0(r2)
    d658:	10000115 	stw	zero,4(r2)
    d65c:	dfc00217 	ldw	ra,8(sp)
    d660:	dc400117 	ldw	r17,4(sp)
    d664:	dc000017 	ldw	r16,0(sp)
    d668:	dec00304 	addi	sp,sp,12
    d66c:	f800283a 	ret
    d670:	80000315 	stw	zero,12(r16)
    d674:	80000115 	stw	zero,4(r16)
    d678:	003ff806 	br	d65c <__alt_data_end+0xfc00d65c>

0000d67c <__cxa_call_terminate>:
    d67c:	defffe04 	addi	sp,sp,-8
    d680:	dfc00115 	stw	ra,4(sp)
    d684:	dc000015 	stw	r16,0(sp)
    d688:	20000d26 	beq	r4,zero,d6c0 <__cxa_call_terminate+0x44>
    d68c:	2021883a 	mov	r16,r4
    d690:	000d2300 	call	d230 <__cxa_begin_catch>
    d694:	80c00017 	ldw	r3,0(r16)
    d698:	016f3574 	movhi	r5,48341
    d69c:	29754004 	addi	r5,r5,-11008
    d6a0:	194b883a 	add	r5,r3,r5
    d6a4:	80800117 	ldw	r2,4(r16)
    d6a8:	28c9803a 	cmpltu	r4,r5,r3
    d6ac:	00ee2cb4 	movhi	r3,47282
    d6b0:	18eaaf04 	addi	r3,r3,-21828
    d6b4:	10c5883a 	add	r2,r2,r3
    d6b8:	2085883a 	add	r2,r4,r2
    d6bc:	10000126 	beq	r2,zero,d6c4 <__cxa_call_terminate+0x48>
    d6c0:	000bff80 	call	bff8 <_ZSt9terminatev>
    d6c4:	00800044 	movi	r2,1
    d6c8:	117ffd36 	bltu	r2,r5,d6c0 <__alt_data_end+0xfc00d6c0>
    d6cc:	813ff817 	ldw	r4,-32(r16)
    d6d0:	000bf380 	call	bf38 <_ZN10__cxxabiv111__terminateEPFvvE>

0000d6d4 <__cxa_get_globals_fast>:
    d6d4:	008000f4 	movhi	r2,3
    d6d8:	10885004 	addi	r2,r2,8512
    d6dc:	f800283a 	ret

0000d6e0 <__cxa_get_globals>:
    d6e0:	008000f4 	movhi	r2,3
    d6e4:	10885004 	addi	r2,r2,8512
    d6e8:	f800283a 	ret

0000d6ec <_ZNSt9exceptionD1Ev>:
    d6ec:	f800283a 	ret

0000d6f0 <_ZNSt13bad_exceptionD1Ev>:
    d6f0:	f800283a 	ret

0000d6f4 <_ZNKSt9exception4whatEv>:
    d6f4:	008000f4 	movhi	r2,3
    d6f8:	10ae3a04 	addi	r2,r2,-18200
    d6fc:	f800283a 	ret

0000d700 <_ZNKSt13bad_exception4whatEv>:
    d700:	008000f4 	movhi	r2,3
    d704:	10ae3e04 	addi	r2,r2,-18184
    d708:	f800283a 	ret

0000d70c <_ZNSt9exceptionD0Ev>:
    d70c:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000d710 <_ZNSt13bad_exceptionD0Ev>:
    d710:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000d714 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    d714:	f800283a 	ret

0000d718 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    d718:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000d71c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    d71c:	f800283a 	ret

0000d720 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    d720:	000bc2c1 	jmpi	bc2c <_ZdlPv>

0000d724 <__fixunssfsi>:
    d724:	defffd04 	addi	sp,sp,-12
    d728:	dc000015 	stw	r16,0(sp)
    d72c:	0413c034 	movhi	r16,20224
    d730:	800b883a 	mov	r5,r16
    d734:	dc400115 	stw	r17,4(sp)
    d738:	dfc00215 	stw	ra,8(sp)
    d73c:	2023883a 	mov	r17,r4
    d740:	000e2680 	call	e268 <__gesf2>
    d744:	1000070e 	bge	r2,zero,d764 <__fixunssfsi+0x40>
    d748:	8809883a 	mov	r4,r17
    d74c:	000ec380 	call	ec38 <__fixsfsi>
    d750:	dfc00217 	ldw	ra,8(sp)
    d754:	dc400117 	ldw	r17,4(sp)
    d758:	dc000017 	ldw	r16,0(sp)
    d75c:	dec00304 	addi	sp,sp,12
    d760:	f800283a 	ret
    d764:	800b883a 	mov	r5,r16
    d768:	8809883a 	mov	r4,r17
    d76c:	000e7540 	call	e754 <__subsf3>
    d770:	1009883a 	mov	r4,r2
    d774:	000ec380 	call	ec38 <__fixsfsi>
    d778:	00e00034 	movhi	r3,32768
    d77c:	10c5883a 	add	r2,r2,r3
    d780:	003ff306 	br	d750 <__alt_data_end+0xfc00d750>

0000d784 <__divsi3>:
    d784:	20001b16 	blt	r4,zero,d7f4 <__divsi3+0x70>
    d788:	000f883a 	mov	r7,zero
    d78c:	28001616 	blt	r5,zero,d7e8 <__divsi3+0x64>
    d790:	200d883a 	mov	r6,r4
    d794:	29001a2e 	bgeu	r5,r4,d800 <__divsi3+0x7c>
    d798:	00800804 	movi	r2,32
    d79c:	00c00044 	movi	r3,1
    d7a0:	00000106 	br	d7a8 <__divsi3+0x24>
    d7a4:	10000d26 	beq	r2,zero,d7dc <__divsi3+0x58>
    d7a8:	294b883a 	add	r5,r5,r5
    d7ac:	10bfffc4 	addi	r2,r2,-1
    d7b0:	18c7883a 	add	r3,r3,r3
    d7b4:	293ffb36 	bltu	r5,r4,d7a4 <__alt_data_end+0xfc00d7a4>
    d7b8:	0005883a 	mov	r2,zero
    d7bc:	18000726 	beq	r3,zero,d7dc <__divsi3+0x58>
    d7c0:	0005883a 	mov	r2,zero
    d7c4:	31400236 	bltu	r6,r5,d7d0 <__divsi3+0x4c>
    d7c8:	314dc83a 	sub	r6,r6,r5
    d7cc:	10c4b03a 	or	r2,r2,r3
    d7d0:	1806d07a 	srli	r3,r3,1
    d7d4:	280ad07a 	srli	r5,r5,1
    d7d8:	183ffa1e 	bne	r3,zero,d7c4 <__alt_data_end+0xfc00d7c4>
    d7dc:	38000126 	beq	r7,zero,d7e4 <__divsi3+0x60>
    d7e0:	0085c83a 	sub	r2,zero,r2
    d7e4:	f800283a 	ret
    d7e8:	014bc83a 	sub	r5,zero,r5
    d7ec:	39c0005c 	xori	r7,r7,1
    d7f0:	003fe706 	br	d790 <__alt_data_end+0xfc00d790>
    d7f4:	0109c83a 	sub	r4,zero,r4
    d7f8:	01c00044 	movi	r7,1
    d7fc:	003fe306 	br	d78c <__alt_data_end+0xfc00d78c>
    d800:	00c00044 	movi	r3,1
    d804:	003fee06 	br	d7c0 <__alt_data_end+0xfc00d7c0>

0000d808 <__modsi3>:
    d808:	20001716 	blt	r4,zero,d868 <__modsi3+0x60>
    d80c:	000f883a 	mov	r7,zero
    d810:	2005883a 	mov	r2,r4
    d814:	28001216 	blt	r5,zero,d860 <__modsi3+0x58>
    d818:	2900162e 	bgeu	r5,r4,d874 <__modsi3+0x6c>
    d81c:	01800804 	movi	r6,32
    d820:	00c00044 	movi	r3,1
    d824:	00000106 	br	d82c <__modsi3+0x24>
    d828:	30000a26 	beq	r6,zero,d854 <__modsi3+0x4c>
    d82c:	294b883a 	add	r5,r5,r5
    d830:	31bfffc4 	addi	r6,r6,-1
    d834:	18c7883a 	add	r3,r3,r3
    d838:	293ffb36 	bltu	r5,r4,d828 <__alt_data_end+0xfc00d828>
    d83c:	18000526 	beq	r3,zero,d854 <__modsi3+0x4c>
    d840:	1806d07a 	srli	r3,r3,1
    d844:	11400136 	bltu	r2,r5,d84c <__modsi3+0x44>
    d848:	1145c83a 	sub	r2,r2,r5
    d84c:	280ad07a 	srli	r5,r5,1
    d850:	183ffb1e 	bne	r3,zero,d840 <__alt_data_end+0xfc00d840>
    d854:	38000126 	beq	r7,zero,d85c <__modsi3+0x54>
    d858:	0085c83a 	sub	r2,zero,r2
    d85c:	f800283a 	ret
    d860:	014bc83a 	sub	r5,zero,r5
    d864:	003fec06 	br	d818 <__alt_data_end+0xfc00d818>
    d868:	0109c83a 	sub	r4,zero,r4
    d86c:	01c00044 	movi	r7,1
    d870:	003fe706 	br	d810 <__alt_data_end+0xfc00d810>
    d874:	00c00044 	movi	r3,1
    d878:	003ff106 	br	d840 <__alt_data_end+0xfc00d840>

0000d87c <__udivsi3>:
    d87c:	200d883a 	mov	r6,r4
    d880:	2900152e 	bgeu	r5,r4,d8d8 <__udivsi3+0x5c>
    d884:	28001416 	blt	r5,zero,d8d8 <__udivsi3+0x5c>
    d888:	00800804 	movi	r2,32
    d88c:	00c00044 	movi	r3,1
    d890:	00000206 	br	d89c <__udivsi3+0x20>
    d894:	10000e26 	beq	r2,zero,d8d0 <__udivsi3+0x54>
    d898:	28000516 	blt	r5,zero,d8b0 <__udivsi3+0x34>
    d89c:	294b883a 	add	r5,r5,r5
    d8a0:	10bfffc4 	addi	r2,r2,-1
    d8a4:	18c7883a 	add	r3,r3,r3
    d8a8:	293ffa36 	bltu	r5,r4,d894 <__alt_data_end+0xfc00d894>
    d8ac:	18000826 	beq	r3,zero,d8d0 <__udivsi3+0x54>
    d8b0:	0005883a 	mov	r2,zero
    d8b4:	31400236 	bltu	r6,r5,d8c0 <__udivsi3+0x44>
    d8b8:	314dc83a 	sub	r6,r6,r5
    d8bc:	10c4b03a 	or	r2,r2,r3
    d8c0:	1806d07a 	srli	r3,r3,1
    d8c4:	280ad07a 	srli	r5,r5,1
    d8c8:	183ffa1e 	bne	r3,zero,d8b4 <__alt_data_end+0xfc00d8b4>
    d8cc:	f800283a 	ret
    d8d0:	0005883a 	mov	r2,zero
    d8d4:	f800283a 	ret
    d8d8:	00c00044 	movi	r3,1
    d8dc:	003ff406 	br	d8b0 <__alt_data_end+0xfc00d8b0>

0000d8e0 <__umodsi3>:
    d8e0:	2005883a 	mov	r2,r4
    d8e4:	2900122e 	bgeu	r5,r4,d930 <__umodsi3+0x50>
    d8e8:	28001116 	blt	r5,zero,d930 <__umodsi3+0x50>
    d8ec:	01800804 	movi	r6,32
    d8f0:	00c00044 	movi	r3,1
    d8f4:	00000206 	br	d900 <__umodsi3+0x20>
    d8f8:	30000c26 	beq	r6,zero,d92c <__umodsi3+0x4c>
    d8fc:	28000516 	blt	r5,zero,d914 <__umodsi3+0x34>
    d900:	294b883a 	add	r5,r5,r5
    d904:	31bfffc4 	addi	r6,r6,-1
    d908:	18c7883a 	add	r3,r3,r3
    d90c:	293ffa36 	bltu	r5,r4,d8f8 <__alt_data_end+0xfc00d8f8>
    d910:	18000626 	beq	r3,zero,d92c <__umodsi3+0x4c>
    d914:	1806d07a 	srli	r3,r3,1
    d918:	11400136 	bltu	r2,r5,d920 <__umodsi3+0x40>
    d91c:	1145c83a 	sub	r2,r2,r5
    d920:	280ad07a 	srli	r5,r5,1
    d924:	183ffb1e 	bne	r3,zero,d914 <__alt_data_end+0xfc00d914>
    d928:	f800283a 	ret
    d92c:	f800283a 	ret
    d930:	00c00044 	movi	r3,1
    d934:	003ff706 	br	d914 <__alt_data_end+0xfc00d914>

0000d938 <__mulsi3>:
    d938:	0005883a 	mov	r2,zero
    d93c:	20000726 	beq	r4,zero,d95c <__mulsi3+0x24>
    d940:	20c0004c 	andi	r3,r4,1
    d944:	2008d07a 	srli	r4,r4,1
    d948:	18000126 	beq	r3,zero,d950 <__mulsi3+0x18>
    d94c:	1145883a 	add	r2,r2,r5
    d950:	294b883a 	add	r5,r5,r5
    d954:	203ffa1e 	bne	r4,zero,d940 <__alt_data_end+0xfc00d940>
    d958:	f800283a 	ret
    d95c:	f800283a 	ret

0000d960 <__addsf3>:
    d960:	defffc04 	addi	sp,sp,-16
    d964:	2004d7fa 	srli	r2,r4,31
    d968:	280cd5fa 	srli	r6,r5,23
    d96c:	dc000015 	stw	r16,0(sp)
    d970:	00c02034 	movhi	r3,128
    d974:	2020d5fa 	srli	r16,r4,23
    d978:	280ed7fa 	srli	r7,r5,31
    d97c:	18ffffc4 	addi	r3,r3,-1
    d980:	dc400115 	stw	r17,4(sp)
    d984:	1908703a 	and	r4,r3,r4
    d988:	194a703a 	and	r5,r3,r5
    d98c:	dfc00315 	stw	ra,12(sp)
    d990:	dc800215 	stw	r18,8(sp)
    d994:	14403fcc 	andi	r17,r2,255
    d998:	84003fcc 	andi	r16,r16,255
    d99c:	200890fa 	slli	r4,r4,3
    d9a0:	31803fcc 	andi	r6,r6,255
    d9a4:	280a90fa 	slli	r5,r5,3
    d9a8:	89c05026 	beq	r17,r7,daec <__addsf3+0x18c>
    d9ac:	8185c83a 	sub	r2,r16,r6
    d9b0:	00807a0e 	bge	zero,r2,db9c <__addsf3+0x23c>
    d9b4:	30001e1e 	bne	r6,zero,da30 <__addsf3+0xd0>
    d9b8:	28006d1e 	bne	r5,zero,db70 <__addsf3+0x210>
    d9bc:	208001cc 	andi	r2,r4,7
    d9c0:	10000426 	beq	r2,zero,d9d4 <__addsf3+0x74>
    d9c4:	208003cc 	andi	r2,r4,15
    d9c8:	00c00104 	movi	r3,4
    d9cc:	10c00126 	beq	r2,r3,d9d4 <__addsf3+0x74>
    d9d0:	20c9883a 	add	r4,r4,r3
    d9d4:	2081002c 	andhi	r2,r4,1024
    d9d8:	10003926 	beq	r2,zero,dac0 <__addsf3+0x160>
    d9dc:	84000044 	addi	r16,r16,1
    d9e0:	00803fc4 	movi	r2,255
    d9e4:	80807826 	beq	r16,r2,dbc8 <__addsf3+0x268>
    d9e8:	200891ba 	slli	r4,r4,6
    d9ec:	8805883a 	mov	r2,r17
    d9f0:	2008d27a 	srli	r4,r4,9
    d9f4:	84003fcc 	andi	r16,r16,255
    d9f8:	800695fa 	slli	r3,r16,23
    d9fc:	10803fcc 	andi	r2,r2,255
    da00:	04002034 	movhi	r16,128
    da04:	843fffc4 	addi	r16,r16,-1
    da08:	100497fa 	slli	r2,r2,31
    da0c:	2408703a 	and	r4,r4,r16
    da10:	20e0b03a 	or	r16,r4,r3
    da14:	8084b03a 	or	r2,r16,r2
    da18:	dfc00317 	ldw	ra,12(sp)
    da1c:	dc800217 	ldw	r18,8(sp)
    da20:	dc400117 	ldw	r17,4(sp)
    da24:	dc000017 	ldw	r16,0(sp)
    da28:	dec00404 	addi	sp,sp,16
    da2c:	f800283a 	ret
    da30:	00c03fc4 	movi	r3,255
    da34:	80ffe126 	beq	r16,r3,d9bc <__alt_data_end+0xfc00d9bc>
    da38:	29410034 	orhi	r5,r5,1024
    da3c:	00c006c4 	movi	r3,27
    da40:	18807516 	blt	r3,r2,dc18 <__addsf3+0x2b8>
    da44:	00c00804 	movi	r3,32
    da48:	1887c83a 	sub	r3,r3,r2
    da4c:	28c6983a 	sll	r3,r5,r3
    da50:	288ad83a 	srl	r5,r5,r2
    da54:	1804c03a 	cmpne	r2,r3,zero
    da58:	288ab03a 	or	r5,r5,r2
    da5c:	2149c83a 	sub	r4,r4,r5
    da60:	2081002c 	andhi	r2,r4,1024
    da64:	10001426 	beq	r2,zero,dab8 <__addsf3+0x158>
    da68:	04810034 	movhi	r18,1024
    da6c:	94bfffc4 	addi	r18,r18,-1
    da70:	24a4703a 	and	r18,r4,r18
    da74:	9009883a 	mov	r4,r18
    da78:	000f4ec0 	call	f4ec <__clzsi2>
    da7c:	10bffec4 	addi	r2,r2,-5
    da80:	90a4983a 	sll	r18,r18,r2
    da84:	14005416 	blt	r2,r16,dbd8 <__addsf3+0x278>
    da88:	1405c83a 	sub	r2,r2,r16
    da8c:	11000044 	addi	r4,r2,1
    da90:	00800804 	movi	r2,32
    da94:	1105c83a 	sub	r2,r2,r4
    da98:	9084983a 	sll	r2,r18,r2
    da9c:	9124d83a 	srl	r18,r18,r4
    daa0:	0021883a 	mov	r16,zero
    daa4:	1008c03a 	cmpne	r4,r2,zero
    daa8:	9108b03a 	or	r4,r18,r4
    daac:	003fc306 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dab0:	1000db26 	beq	r2,zero,de20 <__addsf3+0x4c0>
    dab4:	1009883a 	mov	r4,r2
    dab8:	208001cc 	andi	r2,r4,7
    dabc:	103fc11e 	bne	r2,zero,d9c4 <__alt_data_end+0xfc00d9c4>
    dac0:	2006d0fa 	srli	r3,r4,3
    dac4:	01003fc4 	movi	r4,255
    dac8:	8805883a 	mov	r2,r17
    dacc:	8100241e 	bne	r16,r4,db60 <__addsf3+0x200>
    dad0:	18006e26 	beq	r3,zero,dc8c <__addsf3+0x32c>
    dad4:	19001034 	orhi	r4,r3,64
    dad8:	00c02034 	movhi	r3,128
    dadc:	18ffffc4 	addi	r3,r3,-1
    dae0:	043fffc4 	movi	r16,-1
    dae4:	20c8703a 	and	r4,r4,r3
    dae8:	003fc206 	br	d9f4 <__alt_data_end+0xfc00d9f4>
    daec:	8187c83a 	sub	r3,r16,r6
    daf0:	00c03e0e 	bge	zero,r3,dbec <__addsf3+0x28c>
    daf4:	30002326 	beq	r6,zero,db84 <__addsf3+0x224>
    daf8:	01803fc4 	movi	r6,255
    dafc:	81bfaf26 	beq	r16,r6,d9bc <__alt_data_end+0xfc00d9bc>
    db00:	29410034 	orhi	r5,r5,1024
    db04:	018006c4 	movi	r6,27
    db08:	30c07416 	blt	r6,r3,dcdc <__addsf3+0x37c>
    db0c:	01800804 	movi	r6,32
    db10:	30cdc83a 	sub	r6,r6,r3
    db14:	298c983a 	sll	r6,r5,r6
    db18:	28cad83a 	srl	r5,r5,r3
    db1c:	3006c03a 	cmpne	r3,r6,zero
    db20:	28cab03a 	or	r5,r5,r3
    db24:	2149883a 	add	r4,r4,r5
    db28:	20c1002c 	andhi	r3,r4,1024
    db2c:	183fe226 	beq	r3,zero,dab8 <__alt_data_end+0xfc00dab8>
    db30:	84000044 	addi	r16,r16,1
    db34:	00c03fc4 	movi	r3,255
    db38:	80c05426 	beq	r16,r3,dc8c <__addsf3+0x32c>
    db3c:	00bf0034 	movhi	r2,64512
    db40:	10bfffc4 	addi	r2,r2,-1
    db44:	20c0004c 	andi	r3,r4,1
    db48:	2088703a 	and	r4,r4,r2
    db4c:	2008d07a 	srli	r4,r4,1
    db50:	20c8b03a 	or	r4,r4,r3
    db54:	003f9906 	br	d9bc <__alt_data_end+0xfc00d9bc>
    db58:	0007883a 	mov	r3,zero
    db5c:	0005883a 	mov	r2,zero
    db60:	01002034 	movhi	r4,128
    db64:	213fffc4 	addi	r4,r4,-1
    db68:	1908703a 	and	r4,r3,r4
    db6c:	003fa106 	br	d9f4 <__alt_data_end+0xfc00d9f4>
    db70:	10bfffc4 	addi	r2,r2,-1
    db74:	103fb926 	beq	r2,zero,da5c <__alt_data_end+0xfc00da5c>
    db78:	00c03fc4 	movi	r3,255
    db7c:	80ffaf1e 	bne	r16,r3,da3c <__alt_data_end+0xfc00da3c>
    db80:	003f8e06 	br	d9bc <__alt_data_end+0xfc00d9bc>
    db84:	283f8d26 	beq	r5,zero,d9bc <__alt_data_end+0xfc00d9bc>
    db88:	18ffffc4 	addi	r3,r3,-1
    db8c:	183fe526 	beq	r3,zero,db24 <__alt_data_end+0xfc00db24>
    db90:	01803fc4 	movi	r6,255
    db94:	81bfdb1e 	bne	r16,r6,db04 <__alt_data_end+0xfc00db04>
    db98:	003f8806 	br	d9bc <__alt_data_end+0xfc00d9bc>
    db9c:	1000201e 	bne	r2,zero,dc20 <__addsf3+0x2c0>
    dba0:	80800044 	addi	r2,r16,1
    dba4:	10803fcc 	andi	r2,r2,255
    dba8:	01800044 	movi	r6,1
    dbac:	3080450e 	bge	r6,r2,dcc4 <__addsf3+0x364>
    dbb0:	2165c83a 	sub	r18,r4,r5
    dbb4:	90c1002c 	andhi	r3,r18,1024
    dbb8:	18002b26 	beq	r3,zero,dc68 <__addsf3+0x308>
    dbbc:	2925c83a 	sub	r18,r5,r4
    dbc0:	3823883a 	mov	r17,r7
    dbc4:	003fab06 	br	da74 <__alt_data_end+0xfc00da74>
    dbc8:	8805883a 	mov	r2,r17
    dbcc:	043fffc4 	movi	r16,-1
    dbd0:	0009883a 	mov	r4,zero
    dbd4:	003f8706 	br	d9f4 <__alt_data_end+0xfc00d9f4>
    dbd8:	013f0034 	movhi	r4,64512
    dbdc:	213fffc4 	addi	r4,r4,-1
    dbe0:	80a1c83a 	sub	r16,r16,r2
    dbe4:	9108703a 	and	r4,r18,r4
    dbe8:	003f7406 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dbec:	1800411e 	bne	r3,zero,dcf4 <__addsf3+0x394>
    dbf0:	80c00044 	addi	r3,r16,1
    dbf4:	19c03fcc 	andi	r7,r3,255
    dbf8:	01800044 	movi	r6,1
    dbfc:	31c0260e 	bge	r6,r7,dc98 <__addsf3+0x338>
    dc00:	01803fc4 	movi	r6,255
    dc04:	19802126 	beq	r3,r6,dc8c <__addsf3+0x32c>
    dc08:	2149883a 	add	r4,r4,r5
    dc0c:	2008d07a 	srli	r4,r4,1
    dc10:	1821883a 	mov	r16,r3
    dc14:	003f6906 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dc18:	01400044 	movi	r5,1
    dc1c:	003f8f06 	br	da5c <__alt_data_end+0xfc00da5c>
    dc20:	8000151e 	bne	r16,zero,dc78 <__addsf3+0x318>
    dc24:	20002f26 	beq	r4,zero,dce4 <__addsf3+0x384>
    dc28:	0084303a 	nor	r2,zero,r2
    dc2c:	10000a26 	beq	r2,zero,dc58 <__addsf3+0x2f8>
    dc30:	00c03fc4 	movi	r3,255
    dc34:	30c02b26 	beq	r6,r3,dce4 <__addsf3+0x384>
    dc38:	00c006c4 	movi	r3,27
    dc3c:	18806d16 	blt	r3,r2,ddf4 <__addsf3+0x494>
    dc40:	00c00804 	movi	r3,32
    dc44:	1887c83a 	sub	r3,r3,r2
    dc48:	20c6983a 	sll	r3,r4,r3
    dc4c:	2084d83a 	srl	r2,r4,r2
    dc50:	1808c03a 	cmpne	r4,r3,zero
    dc54:	1108b03a 	or	r4,r2,r4
    dc58:	2909c83a 	sub	r4,r5,r4
    dc5c:	3021883a 	mov	r16,r6
    dc60:	3823883a 	mov	r17,r7
    dc64:	003f7e06 	br	da60 <__alt_data_end+0xfc00da60>
    dc68:	903f821e 	bne	r18,zero,da74 <__alt_data_end+0xfc00da74>
    dc6c:	0005883a 	mov	r2,zero
    dc70:	0021883a 	mov	r16,zero
    dc74:	003fba06 	br	db60 <__alt_data_end+0xfc00db60>
    dc78:	00c03fc4 	movi	r3,255
    dc7c:	30c01926 	beq	r6,r3,dce4 <__addsf3+0x384>
    dc80:	0085c83a 	sub	r2,zero,r2
    dc84:	21010034 	orhi	r4,r4,1024
    dc88:	003feb06 	br	dc38 <__alt_data_end+0xfc00dc38>
    dc8c:	043fffc4 	movi	r16,-1
    dc90:	0009883a 	mov	r4,zero
    dc94:	003f5706 	br	d9f4 <__alt_data_end+0xfc00d9f4>
    dc98:	80004a1e 	bne	r16,zero,ddc4 <__addsf3+0x464>
    dc9c:	20005926 	beq	r4,zero,de04 <__addsf3+0x4a4>
    dca0:	283f4626 	beq	r5,zero,d9bc <__alt_data_end+0xfc00d9bc>
    dca4:	2149883a 	add	r4,r4,r5
    dca8:	2081002c 	andhi	r2,r4,1024
    dcac:	103f8226 	beq	r2,zero,dab8 <__alt_data_end+0xfc00dab8>
    dcb0:	00bf0034 	movhi	r2,64512
    dcb4:	10bfffc4 	addi	r2,r2,-1
    dcb8:	3021883a 	mov	r16,r6
    dcbc:	2088703a 	and	r4,r4,r2
    dcc0:	003f3e06 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dcc4:	8000121e 	bne	r16,zero,dd10 <__addsf3+0x3b0>
    dcc8:	2000261e 	bne	r4,zero,dd64 <__addsf3+0x404>
    dccc:	283fa226 	beq	r5,zero,db58 <__alt_data_end+0xfc00db58>
    dcd0:	2809883a 	mov	r4,r5
    dcd4:	3823883a 	mov	r17,r7
    dcd8:	003f3806 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dcdc:	01400044 	movi	r5,1
    dce0:	003f9006 	br	db24 <__alt_data_end+0xfc00db24>
    dce4:	2809883a 	mov	r4,r5
    dce8:	3021883a 	mov	r16,r6
    dcec:	3823883a 	mov	r17,r7
    dcf0:	003f3206 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dcf4:	80000c1e 	bne	r16,zero,dd28 <__addsf3+0x3c8>
    dcf8:	20002f26 	beq	r4,zero,ddb8 <__addsf3+0x458>
    dcfc:	00c6303a 	nor	r3,zero,r3
    dd00:	18002b1e 	bne	r3,zero,ddb0 <__addsf3+0x450>
    dd04:	2149883a 	add	r4,r4,r5
    dd08:	3021883a 	mov	r16,r6
    dd0c:	003f8606 	br	db28 <__alt_data_end+0xfc00db28>
    dd10:	20001b1e 	bne	r4,zero,dd80 <__addsf3+0x420>
    dd14:	28003926 	beq	r5,zero,ddfc <__addsf3+0x49c>
    dd18:	2809883a 	mov	r4,r5
    dd1c:	3823883a 	mov	r17,r7
    dd20:	04003fc4 	movi	r16,255
    dd24:	003f2506 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dd28:	01c03fc4 	movi	r7,255
    dd2c:	31c02226 	beq	r6,r7,ddb8 <__addsf3+0x458>
    dd30:	00c7c83a 	sub	r3,zero,r3
    dd34:	21010034 	orhi	r4,r4,1024
    dd38:	01c006c4 	movi	r7,27
    dd3c:	38c03616 	blt	r7,r3,de18 <__addsf3+0x4b8>
    dd40:	01c00804 	movi	r7,32
    dd44:	38cfc83a 	sub	r7,r7,r3
    dd48:	21ce983a 	sll	r7,r4,r7
    dd4c:	20c6d83a 	srl	r3,r4,r3
    dd50:	3808c03a 	cmpne	r4,r7,zero
    dd54:	1906b03a 	or	r3,r3,r4
    dd58:	1949883a 	add	r4,r3,r5
    dd5c:	3021883a 	mov	r16,r6
    dd60:	003f7106 	br	db28 <__alt_data_end+0xfc00db28>
    dd64:	283f1526 	beq	r5,zero,d9bc <__alt_data_end+0xfc00d9bc>
    dd68:	2145c83a 	sub	r2,r4,r5
    dd6c:	10c1002c 	andhi	r3,r2,1024
    dd70:	183f4f26 	beq	r3,zero,dab0 <__alt_data_end+0xfc00dab0>
    dd74:	2909c83a 	sub	r4,r5,r4
    dd78:	3823883a 	mov	r17,r7
    dd7c:	003f0f06 	br	d9bc <__alt_data_end+0xfc00d9bc>
    dd80:	28001a26 	beq	r5,zero,ddec <__addsf3+0x48c>
    dd84:	2008d0fa 	srli	r4,r4,3
    dd88:	2080102c 	andhi	r2,r4,64
    dd8c:	10000526 	beq	r2,zero,dda4 <__addsf3+0x444>
    dd90:	280ad0fa 	srli	r5,r5,3
    dd94:	2880102c 	andhi	r2,r5,64
    dd98:	1000021e 	bne	r2,zero,dda4 <__addsf3+0x444>
    dd9c:	2809883a 	mov	r4,r5
    dda0:	3823883a 	mov	r17,r7
    dda4:	200890fa 	slli	r4,r4,3
    dda8:	04003fc4 	movi	r16,255
    ddac:	003f0306 	br	d9bc <__alt_data_end+0xfc00d9bc>
    ddb0:	01c03fc4 	movi	r7,255
    ddb4:	31ffe01e 	bne	r6,r7,dd38 <__alt_data_end+0xfc00dd38>
    ddb8:	2809883a 	mov	r4,r5
    ddbc:	3021883a 	mov	r16,r6
    ddc0:	003efe06 	br	d9bc <__alt_data_end+0xfc00d9bc>
    ddc4:	20001126 	beq	r4,zero,de0c <__addsf3+0x4ac>
    ddc8:	28000826 	beq	r5,zero,ddec <__addsf3+0x48c>
    ddcc:	2008d0fa 	srli	r4,r4,3
    ddd0:	2080102c 	andhi	r2,r4,64
    ddd4:	103ff326 	beq	r2,zero,dda4 <__alt_data_end+0xfc00dda4>
    ddd8:	280ad0fa 	srli	r5,r5,3
    dddc:	2880102c 	andhi	r2,r5,64
    dde0:	103ff01e 	bne	r2,zero,dda4 <__alt_data_end+0xfc00dda4>
    dde4:	2809883a 	mov	r4,r5
    dde8:	003fee06 	br	dda4 <__alt_data_end+0xfc00dda4>
    ddec:	04003fc4 	movi	r16,255
    ddf0:	003ef206 	br	d9bc <__alt_data_end+0xfc00d9bc>
    ddf4:	01000044 	movi	r4,1
    ddf8:	003f9706 	br	dc58 <__alt_data_end+0xfc00dc58>
    ddfc:	0005883a 	mov	r2,zero
    de00:	003f3406 	br	dad4 <__alt_data_end+0xfc00dad4>
    de04:	2809883a 	mov	r4,r5
    de08:	003eec06 	br	d9bc <__alt_data_end+0xfc00d9bc>
    de0c:	2809883a 	mov	r4,r5
    de10:	04003fc4 	movi	r16,255
    de14:	003ee906 	br	d9bc <__alt_data_end+0xfc00d9bc>
    de18:	00c00044 	movi	r3,1
    de1c:	003fce06 	br	dd58 <__alt_data_end+0xfc00dd58>
    de20:	0005883a 	mov	r2,zero
    de24:	003f4e06 	br	db60 <__alt_data_end+0xfc00db60>

0000de28 <__divsf3>:
    de28:	defff504 	addi	sp,sp,-44
    de2c:	200cd5fa 	srli	r6,r4,23
    de30:	dcc00415 	stw	r19,16(sp)
    de34:	2026d7fa 	srli	r19,r4,31
    de38:	00c02034 	movhi	r3,128
    de3c:	dd800715 	stw	r22,28(sp)
    de40:	dd000515 	stw	r20,20(sp)
    de44:	dc800315 	stw	r18,12(sp)
    de48:	18ffffc4 	addi	r3,r3,-1
    de4c:	dfc00a15 	stw	ra,40(sp)
    de50:	df000915 	stw	fp,36(sp)
    de54:	ddc00815 	stw	r23,32(sp)
    de58:	dd400615 	stw	r21,24(sp)
    de5c:	dc400215 	stw	r17,8(sp)
    de60:	dc000115 	stw	r16,4(sp)
    de64:	35003fcc 	andi	r20,r6,255
    de68:	1924703a 	and	r18,r3,r4
    de6c:	9d803fcc 	andi	r22,r19,255
    de70:	a0005226 	beq	r20,zero,dfbc <__divsf3+0x194>
    de74:	00803fc4 	movi	r2,255
    de78:	a0802e26 	beq	r20,r2,df34 <__divsf3+0x10c>
    de7c:	91002034 	orhi	r4,r18,128
    de80:	202490fa 	slli	r18,r4,3
    de84:	a53fe044 	addi	r20,r20,-127
    de88:	0021883a 	mov	r16,zero
    de8c:	002f883a 	mov	r23,zero
    de90:	280cd5fa 	srli	r6,r5,23
    de94:	282ad7fa 	srli	r21,r5,31
    de98:	00c02034 	movhi	r3,128
    de9c:	18ffffc4 	addi	r3,r3,-1
    dea0:	31803fcc 	andi	r6,r6,255
    dea4:	1962703a 	and	r17,r3,r5
    dea8:	af003fcc 	andi	fp,r21,255
    deac:	30004a26 	beq	r6,zero,dfd8 <__divsf3+0x1b0>
    deb0:	00803fc4 	movi	r2,255
    deb4:	30804526 	beq	r6,r2,dfcc <__divsf3+0x1a4>
    deb8:	89402034 	orhi	r5,r17,128
    debc:	282290fa 	slli	r17,r5,3
    dec0:	31bfe044 	addi	r6,r6,-127
    dec4:	000b883a 	mov	r5,zero
    dec8:	2c20b03a 	or	r16,r5,r16
    decc:	802090ba 	slli	r16,r16,2
    ded0:	00800074 	movhi	r2,1
    ded4:	10b7bd04 	addi	r2,r2,-8460
    ded8:	80a1883a 	add	r16,r16,r2
    dedc:	81000017 	ldw	r4,0(r16)
    dee0:	9d46f03a 	xor	r3,r19,r21
    dee4:	180f883a 	mov	r7,r3
    dee8:	18803fcc 	andi	r2,r3,255
    deec:	a18dc83a 	sub	r6,r20,r6
    def0:	2000683a 	jmp	r4
    def4:	0000e0d8 	cmpnei	zero,zero,899
    def8:	0000df5c 	xori	zero,zero,893
    defc:	0000e0cc 	andi	zero,zero,899
    df00:	0000df48 	cmpgei	zero,zero,893
    df04:	0000e0cc 	andi	zero,zero,899
    df08:	0000e0a4 	muli	zero,zero,898
    df0c:	0000e0cc 	andi	zero,zero,899
    df10:	0000df48 	cmpgei	zero,zero,893
    df14:	0000df5c 	xori	zero,zero,893
    df18:	0000df5c 	xori	zero,zero,893
    df1c:	0000e0a4 	muli	zero,zero,898
    df20:	0000df48 	cmpgei	zero,zero,893
    df24:	0000e1b8 	rdprs	zero,zero,902
    df28:	0000e1b8 	rdprs	zero,zero,902
    df2c:	0000e1b8 	rdprs	zero,zero,902
    df30:	0000e16c 	andhi	zero,zero,901
    df34:	9000581e 	bne	r18,zero,e098 <__divsf3+0x270>
    df38:	04000204 	movi	r16,8
    df3c:	05c00084 	movi	r23,2
    df40:	003fd306 	br	de90 <__alt_data_end+0xfc00de90>
    df44:	0023883a 	mov	r17,zero
    df48:	e02d883a 	mov	r22,fp
    df4c:	282f883a 	mov	r23,r5
    df50:	00800084 	movi	r2,2
    df54:	b8808f1e 	bne	r23,r2,e194 <__divsf3+0x36c>
    df58:	b005883a 	mov	r2,r22
    df5c:	11c0004c 	andi	r7,r2,1
    df60:	013fffc4 	movi	r4,-1
    df64:	000d883a 	mov	r6,zero
    df68:	21003fcc 	andi	r4,r4,255
    df6c:	200895fa 	slli	r4,r4,23
    df70:	38803fcc 	andi	r2,r7,255
    df74:	00c02034 	movhi	r3,128
    df78:	100497fa 	slli	r2,r2,31
    df7c:	18ffffc4 	addi	r3,r3,-1
    df80:	30c6703a 	and	r3,r6,r3
    df84:	1906b03a 	or	r3,r3,r4
    df88:	1884b03a 	or	r2,r3,r2
    df8c:	dfc00a17 	ldw	ra,40(sp)
    df90:	df000917 	ldw	fp,36(sp)
    df94:	ddc00817 	ldw	r23,32(sp)
    df98:	dd800717 	ldw	r22,28(sp)
    df9c:	dd400617 	ldw	r21,24(sp)
    dfa0:	dd000517 	ldw	r20,20(sp)
    dfa4:	dcc00417 	ldw	r19,16(sp)
    dfa8:	dc800317 	ldw	r18,12(sp)
    dfac:	dc400217 	ldw	r17,8(sp)
    dfb0:	dc000117 	ldw	r16,4(sp)
    dfb4:	dec00b04 	addi	sp,sp,44
    dfb8:	f800283a 	ret
    dfbc:	90002b1e 	bne	r18,zero,e06c <__divsf3+0x244>
    dfc0:	04000104 	movi	r16,4
    dfc4:	05c00044 	movi	r23,1
    dfc8:	003fb106 	br	de90 <__alt_data_end+0xfc00de90>
    dfcc:	8800251e 	bne	r17,zero,e064 <__divsf3+0x23c>
    dfd0:	01400084 	movi	r5,2
    dfd4:	00000206 	br	dfe0 <__divsf3+0x1b8>
    dfd8:	88001a1e 	bne	r17,zero,e044 <__divsf3+0x21c>
    dfdc:	01400044 	movi	r5,1
    dfe0:	8160b03a 	or	r16,r16,r5
    dfe4:	802090ba 	slli	r16,r16,2
    dfe8:	00c00074 	movhi	r3,1
    dfec:	18f80104 	addi	r3,r3,-8188
    dff0:	80e1883a 	add	r16,r16,r3
    dff4:	80c00017 	ldw	r3,0(r16)
    dff8:	9d44f03a 	xor	r2,r19,r21
    dffc:	a18dc83a 	sub	r6,r20,r6
    e000:	1800683a 	jmp	r3
    e004:	0000df5c 	xori	zero,zero,893
    e008:	0000df5c 	xori	zero,zero,893
    e00c:	0000e1a8 	cmpgeui	zero,zero,902
    e010:	0000df44 	movi	zero,893
    e014:	0000e1a8 	cmpgeui	zero,zero,902
    e018:	0000e0a4 	muli	zero,zero,898
    e01c:	0000e1a8 	cmpgeui	zero,zero,902
    e020:	0000df44 	movi	zero,893
    e024:	0000df5c 	xori	zero,zero,893
    e028:	0000df5c 	xori	zero,zero,893
    e02c:	0000e0a4 	muli	zero,zero,898
    e030:	0000df44 	movi	zero,893
    e034:	0000e1b8 	rdprs	zero,zero,902
    e038:	0000e1b8 	rdprs	zero,zero,902
    e03c:	0000e1b8 	rdprs	zero,zero,902
    e040:	0000e1d0 	cmplti	zero,zero,903
    e044:	8809883a 	mov	r4,r17
    e048:	000f4ec0 	call	f4ec <__clzsi2>
    e04c:	10fffec4 	addi	r3,r2,-5
    e050:	10801d84 	addi	r2,r2,118
    e054:	88e2983a 	sll	r17,r17,r3
    e058:	008dc83a 	sub	r6,zero,r2
    e05c:	000b883a 	mov	r5,zero
    e060:	003f9906 	br	dec8 <__alt_data_end+0xfc00dec8>
    e064:	014000c4 	movi	r5,3
    e068:	003f9706 	br	dec8 <__alt_data_end+0xfc00dec8>
    e06c:	9009883a 	mov	r4,r18
    e070:	d9400015 	stw	r5,0(sp)
    e074:	000f4ec0 	call	f4ec <__clzsi2>
    e078:	10fffec4 	addi	r3,r2,-5
    e07c:	11801d84 	addi	r6,r2,118
    e080:	90e4983a 	sll	r18,r18,r3
    e084:	01a9c83a 	sub	r20,zero,r6
    e088:	0021883a 	mov	r16,zero
    e08c:	002f883a 	mov	r23,zero
    e090:	d9400017 	ldw	r5,0(sp)
    e094:	003f7e06 	br	de90 <__alt_data_end+0xfc00de90>
    e098:	04000304 	movi	r16,12
    e09c:	05c000c4 	movi	r23,3
    e0a0:	003f7b06 	br	de90 <__alt_data_end+0xfc00de90>
    e0a4:	01802034 	movhi	r6,128
    e0a8:	000f883a 	mov	r7,zero
    e0ac:	31bfffc4 	addi	r6,r6,-1
    e0b0:	013fffc4 	movi	r4,-1
    e0b4:	003fac06 	br	df68 <__alt_data_end+0xfc00df68>
    e0b8:	01400044 	movi	r5,1
    e0bc:	2909c83a 	sub	r4,r5,r4
    e0c0:	00c006c4 	movi	r3,27
    e0c4:	19004b0e 	bge	r3,r4,e1f4 <__divsf3+0x3cc>
    e0c8:	114e703a 	and	r7,r2,r5
    e0cc:	0009883a 	mov	r4,zero
    e0d0:	000d883a 	mov	r6,zero
    e0d4:	003fa406 	br	df68 <__alt_data_end+0xfc00df68>
    e0d8:	9006917a 	slli	r3,r18,5
    e0dc:	8822917a 	slli	r17,r17,5
    e0e0:	1c40372e 	bgeu	r3,r17,e1c0 <__divsf3+0x398>
    e0e4:	31bfffc4 	addi	r6,r6,-1
    e0e8:	010006c4 	movi	r4,27
    e0ec:	000b883a 	mov	r5,zero
    e0f0:	180f883a 	mov	r7,r3
    e0f4:	294b883a 	add	r5,r5,r5
    e0f8:	18c7883a 	add	r3,r3,r3
    e0fc:	38000116 	blt	r7,zero,e104 <__divsf3+0x2dc>
    e100:	1c400236 	bltu	r3,r17,e10c <__divsf3+0x2e4>
    e104:	1c47c83a 	sub	r3,r3,r17
    e108:	29400054 	ori	r5,r5,1
    e10c:	213fffc4 	addi	r4,r4,-1
    e110:	203ff71e 	bne	r4,zero,e0f0 <__alt_data_end+0xfc00e0f0>
    e114:	1806c03a 	cmpne	r3,r3,zero
    e118:	1962b03a 	or	r17,r3,r5
    e11c:	31001fc4 	addi	r4,r6,127
    e120:	013fe50e 	bge	zero,r4,e0b8 <__alt_data_end+0xfc00e0b8>
    e124:	88c001cc 	andi	r3,r17,7
    e128:	18000426 	beq	r3,zero,e13c <__divsf3+0x314>
    e12c:	88c003cc 	andi	r3,r17,15
    e130:	01400104 	movi	r5,4
    e134:	19400126 	beq	r3,r5,e13c <__divsf3+0x314>
    e138:	8963883a 	add	r17,r17,r5
    e13c:	88c2002c 	andhi	r3,r17,2048
    e140:	18000426 	beq	r3,zero,e154 <__divsf3+0x32c>
    e144:	00fe0034 	movhi	r3,63488
    e148:	18ffffc4 	addi	r3,r3,-1
    e14c:	31002004 	addi	r4,r6,128
    e150:	88e2703a 	and	r17,r17,r3
    e154:	00c03f84 	movi	r3,254
    e158:	193f8016 	blt	r3,r4,df5c <__alt_data_end+0xfc00df5c>
    e15c:	880c91ba 	slli	r6,r17,6
    e160:	11c0004c 	andi	r7,r2,1
    e164:	300cd27a 	srli	r6,r6,9
    e168:	003f7f06 	br	df68 <__alt_data_end+0xfc00df68>
    e16c:	9080102c 	andhi	r2,r18,64
    e170:	10000226 	beq	r2,zero,e17c <__divsf3+0x354>
    e174:	8880102c 	andhi	r2,r17,64
    e178:	10001826 	beq	r2,zero,e1dc <__divsf3+0x3b4>
    e17c:	00802034 	movhi	r2,128
    e180:	91801034 	orhi	r6,r18,64
    e184:	10bfffc4 	addi	r2,r2,-1
    e188:	980f883a 	mov	r7,r19
    e18c:	308c703a 	and	r6,r6,r2
    e190:	003fc706 	br	e0b0 <__alt_data_end+0xfc00e0b0>
    e194:	008000c4 	movi	r2,3
    e198:	b8802d26 	beq	r23,r2,e250 <__divsf3+0x428>
    e19c:	00c00044 	movi	r3,1
    e1a0:	b005883a 	mov	r2,r22
    e1a4:	b8ffdd1e 	bne	r23,r3,e11c <__alt_data_end+0xfc00e11c>
    e1a8:	11c0004c 	andi	r7,r2,1
    e1ac:	0009883a 	mov	r4,zero
    e1b0:	000d883a 	mov	r6,zero
    e1b4:	003f6c06 	br	df68 <__alt_data_end+0xfc00df68>
    e1b8:	9023883a 	mov	r17,r18
    e1bc:	003f6406 	br	df50 <__alt_data_end+0xfc00df50>
    e1c0:	1c47c83a 	sub	r3,r3,r17
    e1c4:	01000684 	movi	r4,26
    e1c8:	01400044 	movi	r5,1
    e1cc:	003fc806 	br	e0f0 <__alt_data_end+0xfc00e0f0>
    e1d0:	9080102c 	andhi	r2,r18,64
    e1d4:	103fe926 	beq	r2,zero,e17c <__alt_data_end+0xfc00e17c>
    e1d8:	0023883a 	mov	r17,zero
    e1dc:	00802034 	movhi	r2,128
    e1e0:	89801034 	orhi	r6,r17,64
    e1e4:	10bfffc4 	addi	r2,r2,-1
    e1e8:	a80f883a 	mov	r7,r21
    e1ec:	308c703a 	and	r6,r6,r2
    e1f0:	003faf06 	br	e0b0 <__alt_data_end+0xfc00e0b0>
    e1f4:	01c00804 	movi	r7,32
    e1f8:	390fc83a 	sub	r7,r7,r4
    e1fc:	89ce983a 	sll	r7,r17,r7
    e200:	890ad83a 	srl	r5,r17,r4
    e204:	380ec03a 	cmpne	r7,r7,zero
    e208:	29cab03a 	or	r5,r5,r7
    e20c:	28c001cc 	andi	r3,r5,7
    e210:	18000426 	beq	r3,zero,e224 <__divsf3+0x3fc>
    e214:	28c003cc 	andi	r3,r5,15
    e218:	01000104 	movi	r4,4
    e21c:	19000126 	beq	r3,r4,e224 <__divsf3+0x3fc>
    e220:	290b883a 	add	r5,r5,r4
    e224:	28c1002c 	andhi	r3,r5,1024
    e228:	18000426 	beq	r3,zero,e23c <__divsf3+0x414>
    e22c:	11c0004c 	andi	r7,r2,1
    e230:	01000044 	movi	r4,1
    e234:	000d883a 	mov	r6,zero
    e238:	003f4b06 	br	df68 <__alt_data_end+0xfc00df68>
    e23c:	280a91ba 	slli	r5,r5,6
    e240:	11c0004c 	andi	r7,r2,1
    e244:	0009883a 	mov	r4,zero
    e248:	280cd27a 	srli	r6,r5,9
    e24c:	003f4606 	br	df68 <__alt_data_end+0xfc00df68>
    e250:	00802034 	movhi	r2,128
    e254:	89801034 	orhi	r6,r17,64
    e258:	10bfffc4 	addi	r2,r2,-1
    e25c:	b00f883a 	mov	r7,r22
    e260:	308c703a 	and	r6,r6,r2
    e264:	003f9206 	br	e0b0 <__alt_data_end+0xfc00e0b0>

0000e268 <__gesf2>:
    e268:	2004d5fa 	srli	r2,r4,23
    e26c:	2806d5fa 	srli	r3,r5,23
    e270:	01802034 	movhi	r6,128
    e274:	31bfffc4 	addi	r6,r6,-1
    e278:	10803fcc 	andi	r2,r2,255
    e27c:	01c03fc4 	movi	r7,255
    e280:	3110703a 	and	r8,r6,r4
    e284:	18c03fcc 	andi	r3,r3,255
    e288:	314c703a 	and	r6,r6,r5
    e28c:	2008d7fa 	srli	r4,r4,31
    e290:	280ad7fa 	srli	r5,r5,31
    e294:	11c01926 	beq	r2,r7,e2fc <__gesf2+0x94>
    e298:	01c03fc4 	movi	r7,255
    e29c:	19c00f26 	beq	r3,r7,e2dc <__gesf2+0x74>
    e2a0:	1000061e 	bne	r2,zero,e2bc <__gesf2+0x54>
    e2a4:	400f003a 	cmpeq	r7,r8,zero
    e2a8:	1800071e 	bne	r3,zero,e2c8 <__gesf2+0x60>
    e2ac:	3000061e 	bne	r6,zero,e2c8 <__gesf2+0x60>
    e2b0:	0005883a 	mov	r2,zero
    e2b4:	40000e1e 	bne	r8,zero,e2f0 <__gesf2+0x88>
    e2b8:	f800283a 	ret
    e2bc:	18000a1e 	bne	r3,zero,e2e8 <__gesf2+0x80>
    e2c0:	30000b26 	beq	r6,zero,e2f0 <__gesf2+0x88>
    e2c4:	000f883a 	mov	r7,zero
    e2c8:	29403fcc 	andi	r5,r5,255
    e2cc:	38000726 	beq	r7,zero,e2ec <__gesf2+0x84>
    e2d0:	28000826 	beq	r5,zero,e2f4 <__gesf2+0x8c>
    e2d4:	00800044 	movi	r2,1
    e2d8:	f800283a 	ret
    e2dc:	303ff026 	beq	r6,zero,e2a0 <__alt_data_end+0xfc00e2a0>
    e2e0:	00bfff84 	movi	r2,-2
    e2e4:	f800283a 	ret
    e2e8:	29403fcc 	andi	r5,r5,255
    e2ec:	21400526 	beq	r4,r5,e304 <__gesf2+0x9c>
    e2f0:	203ff826 	beq	r4,zero,e2d4 <__alt_data_end+0xfc00e2d4>
    e2f4:	00bfffc4 	movi	r2,-1
    e2f8:	f800283a 	ret
    e2fc:	403fe626 	beq	r8,zero,e298 <__alt_data_end+0xfc00e298>
    e300:	003ff706 	br	e2e0 <__alt_data_end+0xfc00e2e0>
    e304:	18bffa16 	blt	r3,r2,e2f0 <__alt_data_end+0xfc00e2f0>
    e308:	10c00216 	blt	r2,r3,e314 <__gesf2+0xac>
    e30c:	323ff836 	bltu	r6,r8,e2f0 <__alt_data_end+0xfc00e2f0>
    e310:	4180022e 	bgeu	r8,r6,e31c <__gesf2+0xb4>
    e314:	203fef1e 	bne	r4,zero,e2d4 <__alt_data_end+0xfc00e2d4>
    e318:	003ff606 	br	e2f4 <__alt_data_end+0xfc00e2f4>
    e31c:	0005883a 	mov	r2,zero
    e320:	f800283a 	ret

0000e324 <__mulsf3>:
    e324:	defff504 	addi	sp,sp,-44
    e328:	dc000115 	stw	r16,4(sp)
    e32c:	2020d5fa 	srli	r16,r4,23
    e330:	dd400615 	stw	r21,24(sp)
    e334:	202ad7fa 	srli	r21,r4,31
    e338:	dc800315 	stw	r18,12(sp)
    e33c:	04802034 	movhi	r18,128
    e340:	df000915 	stw	fp,36(sp)
    e344:	dd000515 	stw	r20,20(sp)
    e348:	94bfffc4 	addi	r18,r18,-1
    e34c:	dfc00a15 	stw	ra,40(sp)
    e350:	ddc00815 	stw	r23,32(sp)
    e354:	dd800715 	stw	r22,28(sp)
    e358:	dcc00415 	stw	r19,16(sp)
    e35c:	dc400215 	stw	r17,8(sp)
    e360:	84003fcc 	andi	r16,r16,255
    e364:	9124703a 	and	r18,r18,r4
    e368:	a829883a 	mov	r20,r21
    e36c:	af003fcc 	andi	fp,r21,255
    e370:	80005426 	beq	r16,zero,e4c4 <__mulsf3+0x1a0>
    e374:	00803fc4 	movi	r2,255
    e378:	80802f26 	beq	r16,r2,e438 <__mulsf3+0x114>
    e37c:	91002034 	orhi	r4,r18,128
    e380:	202490fa 	slli	r18,r4,3
    e384:	843fe044 	addi	r16,r16,-127
    e388:	0023883a 	mov	r17,zero
    e38c:	002f883a 	mov	r23,zero
    e390:	2804d5fa 	srli	r2,r5,23
    e394:	282cd7fa 	srli	r22,r5,31
    e398:	01002034 	movhi	r4,128
    e39c:	213fffc4 	addi	r4,r4,-1
    e3a0:	10803fcc 	andi	r2,r2,255
    e3a4:	2166703a 	and	r19,r4,r5
    e3a8:	b1803fcc 	andi	r6,r22,255
    e3ac:	10004c26 	beq	r2,zero,e4e0 <__mulsf3+0x1bc>
    e3b0:	00c03fc4 	movi	r3,255
    e3b4:	10c04726 	beq	r2,r3,e4d4 <__mulsf3+0x1b0>
    e3b8:	99002034 	orhi	r4,r19,128
    e3bc:	202690fa 	slli	r19,r4,3
    e3c0:	10bfe044 	addi	r2,r2,-127
    e3c4:	0007883a 	mov	r3,zero
    e3c8:	80a1883a 	add	r16,r16,r2
    e3cc:	010003c4 	movi	r4,15
    e3d0:	1c44b03a 	or	r2,r3,r17
    e3d4:	b56af03a 	xor	r21,r22,r21
    e3d8:	81c00044 	addi	r7,r16,1
    e3dc:	20806b36 	bltu	r4,r2,e58c <__mulsf3+0x268>
    e3e0:	100490ba 	slli	r2,r2,2
    e3e4:	01000074 	movhi	r4,1
    e3e8:	2138fe04 	addi	r4,r4,-7176
    e3ec:	1105883a 	add	r2,r2,r4
    e3f0:	10800017 	ldw	r2,0(r2)
    e3f4:	1000683a 	jmp	r2
    e3f8:	0000e58c 	andi	zero,zero,918
    e3fc:	0000e44c 	andi	zero,zero,913
    e400:	0000e44c 	andi	zero,zero,913
    e404:	0000e448 	cmpgei	zero,zero,913
    e408:	0000e570 	cmpltui	zero,zero,917
    e40c:	0000e570 	cmpltui	zero,zero,917
    e410:	0000e55c 	xori	zero,zero,917
    e414:	0000e448 	cmpgei	zero,zero,913
    e418:	0000e570 	cmpltui	zero,zero,917
    e41c:	0000e55c 	xori	zero,zero,917
    e420:	0000e570 	cmpltui	zero,zero,917
    e424:	0000e448 	cmpgei	zero,zero,913
    e428:	0000e57c 	xorhi	zero,zero,917
    e42c:	0000e57c 	xorhi	zero,zero,917
    e430:	0000e57c 	xorhi	zero,zero,917
    e434:	0000e68c 	andi	zero,zero,922
    e438:	90003b1e 	bne	r18,zero,e528 <__mulsf3+0x204>
    e43c:	04400204 	movi	r17,8
    e440:	05c00084 	movi	r23,2
    e444:	003fd206 	br	e390 <__alt_data_end+0xfc00e390>
    e448:	302b883a 	mov	r21,r6
    e44c:	00800084 	movi	r2,2
    e450:	18802626 	beq	r3,r2,e4ec <__mulsf3+0x1c8>
    e454:	008000c4 	movi	r2,3
    e458:	1880b826 	beq	r3,r2,e73c <__mulsf3+0x418>
    e45c:	00800044 	movi	r2,1
    e460:	1880af1e 	bne	r3,r2,e720 <__mulsf3+0x3fc>
    e464:	a829883a 	mov	r20,r21
    e468:	0007883a 	mov	r3,zero
    e46c:	0009883a 	mov	r4,zero
    e470:	18803fcc 	andi	r2,r3,255
    e474:	100695fa 	slli	r3,r2,23
    e478:	a0803fcc 	andi	r2,r20,255
    e47c:	100a97fa 	slli	r5,r2,31
    e480:	00802034 	movhi	r2,128
    e484:	10bfffc4 	addi	r2,r2,-1
    e488:	2084703a 	and	r2,r4,r2
    e48c:	10c4b03a 	or	r2,r2,r3
    e490:	1144b03a 	or	r2,r2,r5
    e494:	dfc00a17 	ldw	ra,40(sp)
    e498:	df000917 	ldw	fp,36(sp)
    e49c:	ddc00817 	ldw	r23,32(sp)
    e4a0:	dd800717 	ldw	r22,28(sp)
    e4a4:	dd400617 	ldw	r21,24(sp)
    e4a8:	dd000517 	ldw	r20,20(sp)
    e4ac:	dcc00417 	ldw	r19,16(sp)
    e4b0:	dc800317 	ldw	r18,12(sp)
    e4b4:	dc400217 	ldw	r17,8(sp)
    e4b8:	dc000117 	ldw	r16,4(sp)
    e4bc:	dec00b04 	addi	sp,sp,44
    e4c0:	f800283a 	ret
    e4c4:	90000d1e 	bne	r18,zero,e4fc <__mulsf3+0x1d8>
    e4c8:	04400104 	movi	r17,4
    e4cc:	05c00044 	movi	r23,1
    e4d0:	003faf06 	br	e390 <__alt_data_end+0xfc00e390>
    e4d4:	9806c03a 	cmpne	r3,r19,zero
    e4d8:	18c00084 	addi	r3,r3,2
    e4dc:	003fba06 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    e4e0:	9800141e 	bne	r19,zero,e534 <__mulsf3+0x210>
    e4e4:	00c00044 	movi	r3,1
    e4e8:	003fb706 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    e4ec:	a829883a 	mov	r20,r21
    e4f0:	00ffffc4 	movi	r3,-1
    e4f4:	0009883a 	mov	r4,zero
    e4f8:	003fdd06 	br	e470 <__alt_data_end+0xfc00e470>
    e4fc:	9009883a 	mov	r4,r18
    e500:	d9400015 	stw	r5,0(sp)
    e504:	000f4ec0 	call	f4ec <__clzsi2>
    e508:	10fffec4 	addi	r3,r2,-5
    e50c:	10801d84 	addi	r2,r2,118
    e510:	90e4983a 	sll	r18,r18,r3
    e514:	00a1c83a 	sub	r16,zero,r2
    e518:	0023883a 	mov	r17,zero
    e51c:	002f883a 	mov	r23,zero
    e520:	d9400017 	ldw	r5,0(sp)
    e524:	003f9a06 	br	e390 <__alt_data_end+0xfc00e390>
    e528:	04400304 	movi	r17,12
    e52c:	05c000c4 	movi	r23,3
    e530:	003f9706 	br	e390 <__alt_data_end+0xfc00e390>
    e534:	9809883a 	mov	r4,r19
    e538:	d9800015 	stw	r6,0(sp)
    e53c:	000f4ec0 	call	f4ec <__clzsi2>
    e540:	10fffec4 	addi	r3,r2,-5
    e544:	10801d84 	addi	r2,r2,118
    e548:	98e6983a 	sll	r19,r19,r3
    e54c:	0085c83a 	sub	r2,zero,r2
    e550:	0007883a 	mov	r3,zero
    e554:	d9800017 	ldw	r6,0(sp)
    e558:	003f9b06 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    e55c:	01002034 	movhi	r4,128
    e560:	0029883a 	mov	r20,zero
    e564:	213fffc4 	addi	r4,r4,-1
    e568:	00ffffc4 	movi	r3,-1
    e56c:	003fc006 	br	e470 <__alt_data_end+0xfc00e470>
    e570:	9027883a 	mov	r19,r18
    e574:	b807883a 	mov	r3,r23
    e578:	003fb406 	br	e44c <__alt_data_end+0xfc00e44c>
    e57c:	9027883a 	mov	r19,r18
    e580:	e02b883a 	mov	r21,fp
    e584:	b807883a 	mov	r3,r23
    e588:	003fb006 	br	e44c <__alt_data_end+0xfc00e44c>
    e58c:	9028d43a 	srli	r20,r18,16
    e590:	982cd43a 	srli	r22,r19,16
    e594:	94bfffcc 	andi	r18,r18,65535
    e598:	9cffffcc 	andi	r19,r19,65535
    e59c:	980b883a 	mov	r5,r19
    e5a0:	9009883a 	mov	r4,r18
    e5a4:	d9c00015 	stw	r7,0(sp)
    e5a8:	000d9380 	call	d938 <__mulsi3>
    e5ac:	a00b883a 	mov	r5,r20
    e5b0:	9809883a 	mov	r4,r19
    e5b4:	1023883a 	mov	r17,r2
    e5b8:	000d9380 	call	d938 <__mulsi3>
    e5bc:	a009883a 	mov	r4,r20
    e5c0:	b00b883a 	mov	r5,r22
    e5c4:	1027883a 	mov	r19,r2
    e5c8:	000d9380 	call	d938 <__mulsi3>
    e5cc:	b00b883a 	mov	r5,r22
    e5d0:	9009883a 	mov	r4,r18
    e5d4:	1029883a 	mov	r20,r2
    e5d8:	000d9380 	call	d938 <__mulsi3>
    e5dc:	8806d43a 	srli	r3,r17,16
    e5e0:	14c5883a 	add	r2,r2,r19
    e5e4:	d9c00017 	ldw	r7,0(sp)
    e5e8:	1885883a 	add	r2,r3,r2
    e5ec:	14c0022e 	bgeu	r2,r19,e5f8 <__mulsf3+0x2d4>
    e5f0:	00c00074 	movhi	r3,1
    e5f4:	a0e9883a 	add	r20,r20,r3
    e5f8:	1026943a 	slli	r19,r2,16
    e5fc:	8c7fffcc 	andi	r17,r17,65535
    e600:	1004d43a 	srli	r2,r2,16
    e604:	9c63883a 	add	r17,r19,r17
    e608:	882691ba 	slli	r19,r17,6
    e60c:	1505883a 	add	r2,r2,r20
    e610:	8822d6ba 	srli	r17,r17,26
    e614:	100891ba 	slli	r4,r2,6
    e618:	9826c03a 	cmpne	r19,r19,zero
    e61c:	9c62b03a 	or	r17,r19,r17
    e620:	8926b03a 	or	r19,r17,r4
    e624:	9882002c 	andhi	r2,r19,2048
    e628:	10000426 	beq	r2,zero,e63c <__mulsf3+0x318>
    e62c:	9804d07a 	srli	r2,r19,1
    e630:	9900004c 	andi	r4,r19,1
    e634:	3821883a 	mov	r16,r7
    e638:	1126b03a 	or	r19,r2,r4
    e63c:	80c01fc4 	addi	r3,r16,127
    e640:	00c0210e 	bge	zero,r3,e6c8 <__mulsf3+0x3a4>
    e644:	988001cc 	andi	r2,r19,7
    e648:	10000426 	beq	r2,zero,e65c <__mulsf3+0x338>
    e64c:	988003cc 	andi	r2,r19,15
    e650:	01000104 	movi	r4,4
    e654:	11000126 	beq	r2,r4,e65c <__mulsf3+0x338>
    e658:	9927883a 	add	r19,r19,r4
    e65c:	9882002c 	andhi	r2,r19,2048
    e660:	10000426 	beq	r2,zero,e674 <__mulsf3+0x350>
    e664:	00be0034 	movhi	r2,63488
    e668:	10bfffc4 	addi	r2,r2,-1
    e66c:	80c02004 	addi	r3,r16,128
    e670:	98a6703a 	and	r19,r19,r2
    e674:	00803f84 	movi	r2,254
    e678:	10ff9c16 	blt	r2,r3,e4ec <__alt_data_end+0xfc00e4ec>
    e67c:	980891ba 	slli	r4,r19,6
    e680:	a829883a 	mov	r20,r21
    e684:	2008d27a 	srli	r4,r4,9
    e688:	003f7906 	br	e470 <__alt_data_end+0xfc00e470>
    e68c:	9080102c 	andhi	r2,r18,64
    e690:	10000826 	beq	r2,zero,e6b4 <__mulsf3+0x390>
    e694:	9880102c 	andhi	r2,r19,64
    e698:	1000061e 	bne	r2,zero,e6b4 <__mulsf3+0x390>
    e69c:	00802034 	movhi	r2,128
    e6a0:	99001034 	orhi	r4,r19,64
    e6a4:	10bfffc4 	addi	r2,r2,-1
    e6a8:	b029883a 	mov	r20,r22
    e6ac:	2088703a 	and	r4,r4,r2
    e6b0:	003fad06 	br	e568 <__alt_data_end+0xfc00e568>
    e6b4:	00802034 	movhi	r2,128
    e6b8:	91001034 	orhi	r4,r18,64
    e6bc:	10bfffc4 	addi	r2,r2,-1
    e6c0:	2088703a 	and	r4,r4,r2
    e6c4:	003fa806 	br	e568 <__alt_data_end+0xfc00e568>
    e6c8:	00800044 	movi	r2,1
    e6cc:	10c7c83a 	sub	r3,r2,r3
    e6d0:	008006c4 	movi	r2,27
    e6d4:	10ff6316 	blt	r2,r3,e464 <__alt_data_end+0xfc00e464>
    e6d8:	00800804 	movi	r2,32
    e6dc:	10c5c83a 	sub	r2,r2,r3
    e6e0:	9884983a 	sll	r2,r19,r2
    e6e4:	98c6d83a 	srl	r3,r19,r3
    e6e8:	1004c03a 	cmpne	r2,r2,zero
    e6ec:	1884b03a 	or	r2,r3,r2
    e6f0:	10c001cc 	andi	r3,r2,7
    e6f4:	18000426 	beq	r3,zero,e708 <__mulsf3+0x3e4>
    e6f8:	10c003cc 	andi	r3,r2,15
    e6fc:	01000104 	movi	r4,4
    e700:	19000126 	beq	r3,r4,e708 <__mulsf3+0x3e4>
    e704:	1105883a 	add	r2,r2,r4
    e708:	10c1002c 	andhi	r3,r2,1024
    e70c:	18000626 	beq	r3,zero,e728 <__mulsf3+0x404>
    e710:	a829883a 	mov	r20,r21
    e714:	00c00044 	movi	r3,1
    e718:	0009883a 	mov	r4,zero
    e71c:	003f5406 	br	e470 <__alt_data_end+0xfc00e470>
    e720:	3821883a 	mov	r16,r7
    e724:	003fc506 	br	e63c <__alt_data_end+0xfc00e63c>
    e728:	100491ba 	slli	r2,r2,6
    e72c:	a829883a 	mov	r20,r21
    e730:	0007883a 	mov	r3,zero
    e734:	1008d27a 	srli	r4,r2,9
    e738:	003f4d06 	br	e470 <__alt_data_end+0xfc00e470>
    e73c:	00802034 	movhi	r2,128
    e740:	99001034 	orhi	r4,r19,64
    e744:	10bfffc4 	addi	r2,r2,-1
    e748:	a829883a 	mov	r20,r21
    e74c:	2088703a 	and	r4,r4,r2
    e750:	003f8506 	br	e568 <__alt_data_end+0xfc00e568>

0000e754 <__subsf3>:
    e754:	defffc04 	addi	sp,sp,-16
    e758:	280cd5fa 	srli	r6,r5,23
    e75c:	dc000015 	stw	r16,0(sp)
    e760:	01c02034 	movhi	r7,128
    e764:	2020d5fa 	srli	r16,r4,23
    e768:	39ffffc4 	addi	r7,r7,-1
    e76c:	3906703a 	and	r3,r7,r4
    e770:	dc400115 	stw	r17,4(sp)
    e774:	394e703a 	and	r7,r7,r5
    e778:	2022d7fa 	srli	r17,r4,31
    e77c:	dfc00315 	stw	ra,12(sp)
    e780:	dc800215 	stw	r18,8(sp)
    e784:	31803fcc 	andi	r6,r6,255
    e788:	01003fc4 	movi	r4,255
    e78c:	84003fcc 	andi	r16,r16,255
    e790:	180690fa 	slli	r3,r3,3
    e794:	2804d7fa 	srli	r2,r5,31
    e798:	380e90fa 	slli	r7,r7,3
    e79c:	31006d26 	beq	r6,r4,e954 <__subsf3+0x200>
    e7a0:	1080005c 	xori	r2,r2,1
    e7a4:	8189c83a 	sub	r4,r16,r6
    e7a8:	14404f26 	beq	r2,r17,e8e8 <__subsf3+0x194>
    e7ac:	0100770e 	bge	zero,r4,e98c <__subsf3+0x238>
    e7b0:	30001e1e 	bne	r6,zero,e82c <__subsf3+0xd8>
    e7b4:	38006a1e 	bne	r7,zero,e960 <__subsf3+0x20c>
    e7b8:	188001cc 	andi	r2,r3,7
    e7bc:	10000426 	beq	r2,zero,e7d0 <__subsf3+0x7c>
    e7c0:	188003cc 	andi	r2,r3,15
    e7c4:	01000104 	movi	r4,4
    e7c8:	11000126 	beq	r2,r4,e7d0 <__subsf3+0x7c>
    e7cc:	1907883a 	add	r3,r3,r4
    e7d0:	1881002c 	andhi	r2,r3,1024
    e7d4:	10003926 	beq	r2,zero,e8bc <__subsf3+0x168>
    e7d8:	84000044 	addi	r16,r16,1
    e7dc:	00803fc4 	movi	r2,255
    e7e0:	80807526 	beq	r16,r2,e9b8 <__subsf3+0x264>
    e7e4:	180691ba 	slli	r3,r3,6
    e7e8:	8880004c 	andi	r2,r17,1
    e7ec:	180ad27a 	srli	r5,r3,9
    e7f0:	84003fcc 	andi	r16,r16,255
    e7f4:	800695fa 	slli	r3,r16,23
    e7f8:	10803fcc 	andi	r2,r2,255
    e7fc:	01002034 	movhi	r4,128
    e800:	213fffc4 	addi	r4,r4,-1
    e804:	100497fa 	slli	r2,r2,31
    e808:	2920703a 	and	r16,r5,r4
    e80c:	80e0b03a 	or	r16,r16,r3
    e810:	8084b03a 	or	r2,r16,r2
    e814:	dfc00317 	ldw	ra,12(sp)
    e818:	dc800217 	ldw	r18,8(sp)
    e81c:	dc400117 	ldw	r17,4(sp)
    e820:	dc000017 	ldw	r16,0(sp)
    e824:	dec00404 	addi	sp,sp,16
    e828:	f800283a 	ret
    e82c:	00803fc4 	movi	r2,255
    e830:	80bfe126 	beq	r16,r2,e7b8 <__alt_data_end+0xfc00e7b8>
    e834:	39c10034 	orhi	r7,r7,1024
    e838:	008006c4 	movi	r2,27
    e83c:	11007416 	blt	r2,r4,ea10 <__subsf3+0x2bc>
    e840:	00800804 	movi	r2,32
    e844:	1105c83a 	sub	r2,r2,r4
    e848:	3884983a 	sll	r2,r7,r2
    e84c:	390ed83a 	srl	r7,r7,r4
    e850:	1008c03a 	cmpne	r4,r2,zero
    e854:	390eb03a 	or	r7,r7,r4
    e858:	19c7c83a 	sub	r3,r3,r7
    e85c:	1881002c 	andhi	r2,r3,1024
    e860:	10001426 	beq	r2,zero,e8b4 <__subsf3+0x160>
    e864:	04810034 	movhi	r18,1024
    e868:	94bfffc4 	addi	r18,r18,-1
    e86c:	1ca4703a 	and	r18,r3,r18
    e870:	9009883a 	mov	r4,r18
    e874:	000f4ec0 	call	f4ec <__clzsi2>
    e878:	10bffec4 	addi	r2,r2,-5
    e87c:	90a4983a 	sll	r18,r18,r2
    e880:	14005116 	blt	r2,r16,e9c8 <__subsf3+0x274>
    e884:	1405c83a 	sub	r2,r2,r16
    e888:	10c00044 	addi	r3,r2,1
    e88c:	00800804 	movi	r2,32
    e890:	10c5c83a 	sub	r2,r2,r3
    e894:	9084983a 	sll	r2,r18,r2
    e898:	90e4d83a 	srl	r18,r18,r3
    e89c:	0021883a 	mov	r16,zero
    e8a0:	1006c03a 	cmpne	r3,r2,zero
    e8a4:	90c6b03a 	or	r3,r18,r3
    e8a8:	003fc306 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    e8ac:	2000e026 	beq	r4,zero,ec30 <__subsf3+0x4dc>
    e8b0:	2007883a 	mov	r3,r4
    e8b4:	188001cc 	andi	r2,r3,7
    e8b8:	103fc11e 	bne	r2,zero,e7c0 <__alt_data_end+0xfc00e7c0>
    e8bc:	180ad0fa 	srli	r5,r3,3
    e8c0:	00c03fc4 	movi	r3,255
    e8c4:	8880004c 	andi	r2,r17,1
    e8c8:	80c0031e 	bne	r16,r3,e8d8 <__subsf3+0x184>
    e8cc:	28006d26 	beq	r5,zero,ea84 <__subsf3+0x330>
    e8d0:	29401034 	orhi	r5,r5,64
    e8d4:	043fffc4 	movi	r16,-1
    e8d8:	00c02034 	movhi	r3,128
    e8dc:	18ffffc4 	addi	r3,r3,-1
    e8e0:	28ca703a 	and	r5,r5,r3
    e8e4:	003fc206 	br	e7f0 <__alt_data_end+0xfc00e7f0>
    e8e8:	01003c0e 	bge	zero,r4,e9dc <__subsf3+0x288>
    e8ec:	30002126 	beq	r6,zero,e974 <__subsf3+0x220>
    e8f0:	01403fc4 	movi	r5,255
    e8f4:	817fb026 	beq	r16,r5,e7b8 <__alt_data_end+0xfc00e7b8>
    e8f8:	39c10034 	orhi	r7,r7,1024
    e8fc:	014006c4 	movi	r5,27
    e900:	29007416 	blt	r5,r4,ead4 <__subsf3+0x380>
    e904:	01400804 	movi	r5,32
    e908:	290bc83a 	sub	r5,r5,r4
    e90c:	394a983a 	sll	r5,r7,r5
    e910:	390ed83a 	srl	r7,r7,r4
    e914:	2808c03a 	cmpne	r4,r5,zero
    e918:	390eb03a 	or	r7,r7,r4
    e91c:	19c7883a 	add	r3,r3,r7
    e920:	1901002c 	andhi	r4,r3,1024
    e924:	20003826 	beq	r4,zero,ea08 <__subsf3+0x2b4>
    e928:	84000044 	addi	r16,r16,1
    e92c:	01003fc4 	movi	r4,255
    e930:	81005426 	beq	r16,r4,ea84 <__subsf3+0x330>
    e934:	1023883a 	mov	r17,r2
    e938:	00bf0034 	movhi	r2,64512
    e93c:	10bfffc4 	addi	r2,r2,-1
    e940:	1900004c 	andi	r4,r3,1
    e944:	1886703a 	and	r3,r3,r2
    e948:	1806d07a 	srli	r3,r3,1
    e94c:	1906b03a 	or	r3,r3,r4
    e950:	003f9906 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    e954:	383f9226 	beq	r7,zero,e7a0 <__alt_data_end+0xfc00e7a0>
    e958:	10803fcc 	andi	r2,r2,255
    e95c:	003f9106 	br	e7a4 <__alt_data_end+0xfc00e7a4>
    e960:	213fffc4 	addi	r4,r4,-1
    e964:	203fbc26 	beq	r4,zero,e858 <__alt_data_end+0xfc00e858>
    e968:	00803fc4 	movi	r2,255
    e96c:	80bfb21e 	bne	r16,r2,e838 <__alt_data_end+0xfc00e838>
    e970:	003f9106 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    e974:	383f9026 	beq	r7,zero,e7b8 <__alt_data_end+0xfc00e7b8>
    e978:	213fffc4 	addi	r4,r4,-1
    e97c:	203fe726 	beq	r4,zero,e91c <__alt_data_end+0xfc00e91c>
    e980:	01403fc4 	movi	r5,255
    e984:	817fdd1e 	bne	r16,r5,e8fc <__alt_data_end+0xfc00e8fc>
    e988:	003f8b06 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    e98c:	2000221e 	bne	r4,zero,ea18 <__subsf3+0x2c4>
    e990:	81000044 	addi	r4,r16,1
    e994:	21003fcc 	andi	r4,r4,255
    e998:	01400044 	movi	r5,1
    e99c:	2900470e 	bge	r5,r4,eabc <__subsf3+0x368>
    e9a0:	19e5c83a 	sub	r18,r3,r7
    e9a4:	9141002c 	andhi	r5,r18,1024
    e9a8:	28002d26 	beq	r5,zero,ea60 <__subsf3+0x30c>
    e9ac:	38e5c83a 	sub	r18,r7,r3
    e9b0:	1023883a 	mov	r17,r2
    e9b4:	003fae06 	br	e870 <__alt_data_end+0xfc00e870>
    e9b8:	8880004c 	andi	r2,r17,1
    e9bc:	043fffc4 	movi	r16,-1
    e9c0:	000b883a 	mov	r5,zero
    e9c4:	003f8a06 	br	e7f0 <__alt_data_end+0xfc00e7f0>
    e9c8:	00ff0034 	movhi	r3,64512
    e9cc:	18ffffc4 	addi	r3,r3,-1
    e9d0:	80a1c83a 	sub	r16,r16,r2
    e9d4:	90c6703a 	and	r3,r18,r3
    e9d8:	003f7706 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    e9dc:	2000431e 	bne	r4,zero,eaec <__subsf3+0x398>
    e9e0:	81000044 	addi	r4,r16,1
    e9e4:	21803fcc 	andi	r6,r4,255
    e9e8:	01400044 	movi	r5,1
    e9ec:	2980280e 	bge	r5,r6,ea90 <__subsf3+0x33c>
    e9f0:	01403fc4 	movi	r5,255
    e9f4:	21402326 	beq	r4,r5,ea84 <__subsf3+0x330>
    e9f8:	19c7883a 	add	r3,r3,r7
    e9fc:	1806d07a 	srli	r3,r3,1
    ea00:	2021883a 	mov	r16,r4
    ea04:	003f6c06 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    ea08:	1023883a 	mov	r17,r2
    ea0c:	003fa906 	br	e8b4 <__alt_data_end+0xfc00e8b4>
    ea10:	01c00044 	movi	r7,1
    ea14:	003f9006 	br	e858 <__alt_data_end+0xfc00e858>
    ea18:	8000151e 	bne	r16,zero,ea70 <__subsf3+0x31c>
    ea1c:	18002f26 	beq	r3,zero,eadc <__subsf3+0x388>
    ea20:	0108303a 	nor	r4,zero,r4
    ea24:	20000a26 	beq	r4,zero,ea50 <__subsf3+0x2fc>
    ea28:	01403fc4 	movi	r5,255
    ea2c:	31402b26 	beq	r6,r5,eadc <__subsf3+0x388>
    ea30:	014006c4 	movi	r5,27
    ea34:	29006e16 	blt	r5,r4,ebf0 <__subsf3+0x49c>
    ea38:	01400804 	movi	r5,32
    ea3c:	290bc83a 	sub	r5,r5,r4
    ea40:	194a983a 	sll	r5,r3,r5
    ea44:	1908d83a 	srl	r4,r3,r4
    ea48:	2806c03a 	cmpne	r3,r5,zero
    ea4c:	20c6b03a 	or	r3,r4,r3
    ea50:	38c7c83a 	sub	r3,r7,r3
    ea54:	3021883a 	mov	r16,r6
    ea58:	1023883a 	mov	r17,r2
    ea5c:	003f7f06 	br	e85c <__alt_data_end+0xfc00e85c>
    ea60:	903f831e 	bne	r18,zero,e870 <__alt_data_end+0xfc00e870>
    ea64:	0005883a 	mov	r2,zero
    ea68:	0021883a 	mov	r16,zero
    ea6c:	003f9a06 	br	e8d8 <__alt_data_end+0xfc00e8d8>
    ea70:	01403fc4 	movi	r5,255
    ea74:	31401926 	beq	r6,r5,eadc <__subsf3+0x388>
    ea78:	0109c83a 	sub	r4,zero,r4
    ea7c:	18c10034 	orhi	r3,r3,1024
    ea80:	003feb06 	br	ea30 <__alt_data_end+0xfc00ea30>
    ea84:	043fffc4 	movi	r16,-1
    ea88:	000b883a 	mov	r5,zero
    ea8c:	003f5806 	br	e7f0 <__alt_data_end+0xfc00e7f0>
    ea90:	8000481e 	bne	r16,zero,ebb4 <__subsf3+0x460>
    ea94:	18006226 	beq	r3,zero,ec20 <__subsf3+0x4cc>
    ea98:	383f4726 	beq	r7,zero,e7b8 <__alt_data_end+0xfc00e7b8>
    ea9c:	19c7883a 	add	r3,r3,r7
    eaa0:	1881002c 	andhi	r2,r3,1024
    eaa4:	103f8326 	beq	r2,zero,e8b4 <__alt_data_end+0xfc00e8b4>
    eaa8:	00bf0034 	movhi	r2,64512
    eaac:	10bfffc4 	addi	r2,r2,-1
    eab0:	2821883a 	mov	r16,r5
    eab4:	1886703a 	and	r3,r3,r2
    eab8:	003f3f06 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    eabc:	80001c1e 	bne	r16,zero,eb30 <__subsf3+0x3dc>
    eac0:	1800261e 	bne	r3,zero,eb5c <__subsf3+0x408>
    eac4:	38004c26 	beq	r7,zero,ebf8 <__subsf3+0x4a4>
    eac8:	3807883a 	mov	r3,r7
    eacc:	1023883a 	mov	r17,r2
    ead0:	003f3906 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    ead4:	01c00044 	movi	r7,1
    ead8:	003f9006 	br	e91c <__alt_data_end+0xfc00e91c>
    eadc:	3807883a 	mov	r3,r7
    eae0:	3021883a 	mov	r16,r6
    eae4:	1023883a 	mov	r17,r2
    eae8:	003f3306 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    eaec:	8000161e 	bne	r16,zero,eb48 <__subsf3+0x3f4>
    eaf0:	18002d26 	beq	r3,zero,eba8 <__subsf3+0x454>
    eaf4:	0108303a 	nor	r4,zero,r4
    eaf8:	20000a26 	beq	r4,zero,eb24 <__subsf3+0x3d0>
    eafc:	01403fc4 	movi	r5,255
    eb00:	31402926 	beq	r6,r5,eba8 <__subsf3+0x454>
    eb04:	014006c4 	movi	r5,27
    eb08:	29004716 	blt	r5,r4,ec28 <__subsf3+0x4d4>
    eb0c:	01400804 	movi	r5,32
    eb10:	290bc83a 	sub	r5,r5,r4
    eb14:	194a983a 	sll	r5,r3,r5
    eb18:	1908d83a 	srl	r4,r3,r4
    eb1c:	2806c03a 	cmpne	r3,r5,zero
    eb20:	20c6b03a 	or	r3,r4,r3
    eb24:	19c7883a 	add	r3,r3,r7
    eb28:	3021883a 	mov	r16,r6
    eb2c:	003f7c06 	br	e920 <__alt_data_end+0xfc00e920>
    eb30:	1800111e 	bne	r3,zero,eb78 <__subsf3+0x424>
    eb34:	38003326 	beq	r7,zero,ec04 <__subsf3+0x4b0>
    eb38:	3807883a 	mov	r3,r7
    eb3c:	1023883a 	mov	r17,r2
    eb40:	04003fc4 	movi	r16,255
    eb44:	003f1c06 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    eb48:	01403fc4 	movi	r5,255
    eb4c:	31401626 	beq	r6,r5,eba8 <__subsf3+0x454>
    eb50:	0109c83a 	sub	r4,zero,r4
    eb54:	18c10034 	orhi	r3,r3,1024
    eb58:	003fea06 	br	eb04 <__alt_data_end+0xfc00eb04>
    eb5c:	383f1626 	beq	r7,zero,e7b8 <__alt_data_end+0xfc00e7b8>
    eb60:	19c9c83a 	sub	r4,r3,r7
    eb64:	2141002c 	andhi	r5,r4,1024
    eb68:	283f5026 	beq	r5,zero,e8ac <__alt_data_end+0xfc00e8ac>
    eb6c:	38c7c83a 	sub	r3,r7,r3
    eb70:	1023883a 	mov	r17,r2
    eb74:	003f1006 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    eb78:	38001b26 	beq	r7,zero,ebe8 <__subsf3+0x494>
    eb7c:	1806d0fa 	srli	r3,r3,3
    eb80:	1900102c 	andhi	r4,r3,64
    eb84:	20000526 	beq	r4,zero,eb9c <__subsf3+0x448>
    eb88:	380ed0fa 	srli	r7,r7,3
    eb8c:	3900102c 	andhi	r4,r7,64
    eb90:	2000021e 	bne	r4,zero,eb9c <__subsf3+0x448>
    eb94:	3807883a 	mov	r3,r7
    eb98:	1023883a 	mov	r17,r2
    eb9c:	180690fa 	slli	r3,r3,3
    eba0:	04003fc4 	movi	r16,255
    eba4:	003f0406 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    eba8:	3807883a 	mov	r3,r7
    ebac:	3021883a 	mov	r16,r6
    ebb0:	003f0106 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    ebb4:	18001726 	beq	r3,zero,ec14 <__subsf3+0x4c0>
    ebb8:	38000b26 	beq	r7,zero,ebe8 <__subsf3+0x494>
    ebbc:	1806d0fa 	srli	r3,r3,3
    ebc0:	1900102c 	andhi	r4,r3,64
    ebc4:	20000426 	beq	r4,zero,ebd8 <__subsf3+0x484>
    ebc8:	380ed0fa 	srli	r7,r7,3
    ebcc:	3900102c 	andhi	r4,r7,64
    ebd0:	2000011e 	bne	r4,zero,ebd8 <__subsf3+0x484>
    ebd4:	3807883a 	mov	r3,r7
    ebd8:	180690fa 	slli	r3,r3,3
    ebdc:	1023883a 	mov	r17,r2
    ebe0:	04003fc4 	movi	r16,255
    ebe4:	003ef406 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    ebe8:	04003fc4 	movi	r16,255
    ebec:	003ef206 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    ebf0:	00c00044 	movi	r3,1
    ebf4:	003f9606 	br	ea50 <__alt_data_end+0xfc00ea50>
    ebf8:	000b883a 	mov	r5,zero
    ebfc:	0005883a 	mov	r2,zero
    ec00:	003f3506 	br	e8d8 <__alt_data_end+0xfc00e8d8>
    ec04:	01402034 	movhi	r5,128
    ec08:	297fffc4 	addi	r5,r5,-1
    ec0c:	0005883a 	mov	r2,zero
    ec10:	003f2f06 	br	e8d0 <__alt_data_end+0xfc00e8d0>
    ec14:	3807883a 	mov	r3,r7
    ec18:	04003fc4 	movi	r16,255
    ec1c:	003ee606 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    ec20:	3807883a 	mov	r3,r7
    ec24:	003ee406 	br	e7b8 <__alt_data_end+0xfc00e7b8>
    ec28:	00c00044 	movi	r3,1
    ec2c:	003fbd06 	br	eb24 <__alt_data_end+0xfc00eb24>
    ec30:	0005883a 	mov	r2,zero
    ec34:	003f2806 	br	e8d8 <__alt_data_end+0xfc00e8d8>

0000ec38 <__fixsfsi>:
    ec38:	200ad5fa 	srli	r5,r4,23
    ec3c:	00c02034 	movhi	r3,128
    ec40:	18ffffc4 	addi	r3,r3,-1
    ec44:	29403fcc 	andi	r5,r5,255
    ec48:	00801f84 	movi	r2,126
    ec4c:	1906703a 	and	r3,r3,r4
    ec50:	2008d7fa 	srli	r4,r4,31
    ec54:	11400e0e 	bge	r2,r5,ec90 <__fixsfsi+0x58>
    ec58:	00802744 	movi	r2,157
    ec5c:	11400816 	blt	r2,r5,ec80 <__fixsfsi+0x48>
    ec60:	00802544 	movi	r2,149
    ec64:	18c02034 	orhi	r3,r3,128
    ec68:	11400b0e 	bge	r2,r5,ec98 <__fixsfsi+0x60>
    ec6c:	28bfda84 	addi	r2,r5,-150
    ec70:	1884983a 	sll	r2,r3,r2
    ec74:	20000726 	beq	r4,zero,ec94 <__fixsfsi+0x5c>
    ec78:	0085c83a 	sub	r2,zero,r2
    ec7c:	f800283a 	ret
    ec80:	00a00034 	movhi	r2,32768
    ec84:	10bfffc4 	addi	r2,r2,-1
    ec88:	2085883a 	add	r2,r4,r2
    ec8c:	f800283a 	ret
    ec90:	0005883a 	mov	r2,zero
    ec94:	f800283a 	ret
    ec98:	00802584 	movi	r2,150
    ec9c:	1145c83a 	sub	r2,r2,r5
    eca0:	1884d83a 	srl	r2,r3,r2
    eca4:	003ff306 	br	ec74 <__alt_data_end+0xfc00ec74>

0000eca8 <__floatsisf>:
    eca8:	defffd04 	addi	sp,sp,-12
    ecac:	dfc00215 	stw	ra,8(sp)
    ecb0:	dc400115 	stw	r17,4(sp)
    ecb4:	dc000015 	stw	r16,0(sp)
    ecb8:	20003526 	beq	r4,zero,ed90 <__floatsisf+0xe8>
    ecbc:	2021883a 	mov	r16,r4
    ecc0:	2022d7fa 	srli	r17,r4,31
    ecc4:	20003616 	blt	r4,zero,eda0 <__floatsisf+0xf8>
    ecc8:	8009883a 	mov	r4,r16
    eccc:	000f4ec0 	call	f4ec <__clzsi2>
    ecd0:	00c02784 	movi	r3,158
    ecd4:	1887c83a 	sub	r3,r3,r2
    ecd8:	01002584 	movi	r4,150
    ecdc:	20c01416 	blt	r4,r3,ed30 <__floatsisf+0x88>
    ece0:	20c9c83a 	sub	r4,r4,r3
    ece4:	8120983a 	sll	r16,r16,r4
    ece8:	00802034 	movhi	r2,128
    ecec:	10bfffc4 	addi	r2,r2,-1
    ecf0:	8809883a 	mov	r4,r17
    ecf4:	80a0703a 	and	r16,r16,r2
    ecf8:	18803fcc 	andi	r2,r3,255
    ecfc:	100695fa 	slli	r3,r2,23
    ed00:	20803fcc 	andi	r2,r4,255
    ed04:	100897fa 	slli	r4,r2,31
    ed08:	00802034 	movhi	r2,128
    ed0c:	10bfffc4 	addi	r2,r2,-1
    ed10:	8084703a 	and	r2,r16,r2
    ed14:	10c4b03a 	or	r2,r2,r3
    ed18:	1104b03a 	or	r2,r2,r4
    ed1c:	dfc00217 	ldw	ra,8(sp)
    ed20:	dc400117 	ldw	r17,4(sp)
    ed24:	dc000017 	ldw	r16,0(sp)
    ed28:	dec00304 	addi	sp,sp,12
    ed2c:	f800283a 	ret
    ed30:	01002644 	movi	r4,153
    ed34:	20c01c16 	blt	r4,r3,eda8 <__floatsisf+0x100>
    ed38:	20c9c83a 	sub	r4,r4,r3
    ed3c:	8120983a 	sll	r16,r16,r4
    ed40:	013f0034 	movhi	r4,64512
    ed44:	213fffc4 	addi	r4,r4,-1
    ed48:	814001cc 	andi	r5,r16,7
    ed4c:	8108703a 	and	r4,r16,r4
    ed50:	28000426 	beq	r5,zero,ed64 <__floatsisf+0xbc>
    ed54:	840003cc 	andi	r16,r16,15
    ed58:	01400104 	movi	r5,4
    ed5c:	81400126 	beq	r16,r5,ed64 <__floatsisf+0xbc>
    ed60:	2149883a 	add	r4,r4,r5
    ed64:	2141002c 	andhi	r5,r4,1024
    ed68:	28000526 	beq	r5,zero,ed80 <__floatsisf+0xd8>
    ed6c:	00c027c4 	movi	r3,159
    ed70:	1887c83a 	sub	r3,r3,r2
    ed74:	00bf0034 	movhi	r2,64512
    ed78:	10bfffc4 	addi	r2,r2,-1
    ed7c:	2088703a 	and	r4,r4,r2
    ed80:	202091ba 	slli	r16,r4,6
    ed84:	8809883a 	mov	r4,r17
    ed88:	8020d27a 	srli	r16,r16,9
    ed8c:	003fda06 	br	ecf8 <__alt_data_end+0xfc00ecf8>
    ed90:	0009883a 	mov	r4,zero
    ed94:	0007883a 	mov	r3,zero
    ed98:	0021883a 	mov	r16,zero
    ed9c:	003fd606 	br	ecf8 <__alt_data_end+0xfc00ecf8>
    eda0:	0121c83a 	sub	r16,zero,r4
    eda4:	003fc806 	br	ecc8 <__alt_data_end+0xfc00ecc8>
    eda8:	01002e44 	movi	r4,185
    edac:	20c9c83a 	sub	r4,r4,r3
    edb0:	01400144 	movi	r5,5
    edb4:	8108983a 	sll	r4,r16,r4
    edb8:	288bc83a 	sub	r5,r5,r2
    edbc:	8160d83a 	srl	r16,r16,r5
    edc0:	2008c03a 	cmpne	r4,r4,zero
    edc4:	8120b03a 	or	r16,r16,r4
    edc8:	003fdd06 	br	ed40 <__alt_data_end+0xfc00ed40>

0000edcc <__floatunsisf>:
    edcc:	defffe04 	addi	sp,sp,-8
    edd0:	dfc00115 	stw	ra,4(sp)
    edd4:	dc000015 	stw	r16,0(sp)
    edd8:	20002c26 	beq	r4,zero,ee8c <__floatunsisf+0xc0>
    eddc:	2021883a 	mov	r16,r4
    ede0:	000f4ec0 	call	f4ec <__clzsi2>
    ede4:	00c02784 	movi	r3,158
    ede8:	1887c83a 	sub	r3,r3,r2
    edec:	01002584 	movi	r4,150
    edf0:	20c00f16 	blt	r4,r3,ee30 <__floatunsisf+0x64>
    edf4:	20c9c83a 	sub	r4,r4,r3
    edf8:	8108983a 	sll	r4,r16,r4
    edfc:	00802034 	movhi	r2,128
    ee00:	10bfffc4 	addi	r2,r2,-1
    ee04:	2088703a 	and	r4,r4,r2
    ee08:	18803fcc 	andi	r2,r3,255
    ee0c:	100695fa 	slli	r3,r2,23
    ee10:	00802034 	movhi	r2,128
    ee14:	10bfffc4 	addi	r2,r2,-1
    ee18:	2084703a 	and	r2,r4,r2
    ee1c:	10c4b03a 	or	r2,r2,r3
    ee20:	dfc00117 	ldw	ra,4(sp)
    ee24:	dc000017 	ldw	r16,0(sp)
    ee28:	dec00204 	addi	sp,sp,8
    ee2c:	f800283a 	ret
    ee30:	01002644 	movi	r4,153
    ee34:	20c01816 	blt	r4,r3,ee98 <__floatunsisf+0xcc>
    ee38:	20c9c83a 	sub	r4,r4,r3
    ee3c:	8108983a 	sll	r4,r16,r4
    ee40:	017f0034 	movhi	r5,64512
    ee44:	297fffc4 	addi	r5,r5,-1
    ee48:	218001cc 	andi	r6,r4,7
    ee4c:	214a703a 	and	r5,r4,r5
    ee50:	30000426 	beq	r6,zero,ee64 <__floatunsisf+0x98>
    ee54:	210003cc 	andi	r4,r4,15
    ee58:	01800104 	movi	r6,4
    ee5c:	21800126 	beq	r4,r6,ee64 <__floatunsisf+0x98>
    ee60:	298b883a 	add	r5,r5,r6
    ee64:	2901002c 	andhi	r4,r5,1024
    ee68:	20000526 	beq	r4,zero,ee80 <__floatunsisf+0xb4>
    ee6c:	00c027c4 	movi	r3,159
    ee70:	1887c83a 	sub	r3,r3,r2
    ee74:	00bf0034 	movhi	r2,64512
    ee78:	10bfffc4 	addi	r2,r2,-1
    ee7c:	288a703a 	and	r5,r5,r2
    ee80:	280891ba 	slli	r4,r5,6
    ee84:	2008d27a 	srli	r4,r4,9
    ee88:	003fdf06 	br	ee08 <__alt_data_end+0xfc00ee08>
    ee8c:	0007883a 	mov	r3,zero
    ee90:	0009883a 	mov	r4,zero
    ee94:	003fdc06 	br	ee08 <__alt_data_end+0xfc00ee08>
    ee98:	01402e44 	movi	r5,185
    ee9c:	28cbc83a 	sub	r5,r5,r3
    eea0:	01000144 	movi	r4,5
    eea4:	2089c83a 	sub	r4,r4,r2
    eea8:	814a983a 	sll	r5,r16,r5
    eeac:	8108d83a 	srl	r4,r16,r4
    eeb0:	2820c03a 	cmpne	r16,r5,zero
    eeb4:	2408b03a 	or	r4,r4,r16
    eeb8:	003fe106 	br	ee40 <__alt_data_end+0xfc00ee40>

0000eebc <__extendsfdf2>:
    eebc:	200ad5fa 	srli	r5,r4,23
    eec0:	defffd04 	addi	sp,sp,-12
    eec4:	dc400115 	stw	r17,4(sp)
    eec8:	29403fcc 	andi	r5,r5,255
    eecc:	29800044 	addi	r6,r5,1
    eed0:	04402034 	movhi	r17,128
    eed4:	dc000015 	stw	r16,0(sp)
    eed8:	8c7fffc4 	addi	r17,r17,-1
    eedc:	dfc00215 	stw	ra,8(sp)
    eee0:	31803fcc 	andi	r6,r6,255
    eee4:	00800044 	movi	r2,1
    eee8:	8922703a 	and	r17,r17,r4
    eeec:	2020d7fa 	srli	r16,r4,31
    eef0:	1180110e 	bge	r2,r6,ef38 <__extendsfdf2+0x7c>
    eef4:	880cd0fa 	srli	r6,r17,3
    eef8:	8822977a 	slli	r17,r17,29
    eefc:	2940e004 	addi	r5,r5,896
    ef00:	2941ffcc 	andi	r5,r5,2047
    ef04:	2804953a 	slli	r2,r5,20
    ef08:	01400434 	movhi	r5,16
    ef0c:	800697fa 	slli	r3,r16,31
    ef10:	297fffc4 	addi	r5,r5,-1
    ef14:	314a703a 	and	r5,r6,r5
    ef18:	288ab03a 	or	r5,r5,r2
    ef1c:	28c6b03a 	or	r3,r5,r3
    ef20:	8805883a 	mov	r2,r17
    ef24:	dfc00217 	ldw	ra,8(sp)
    ef28:	dc400117 	ldw	r17,4(sp)
    ef2c:	dc000017 	ldw	r16,0(sp)
    ef30:	dec00304 	addi	sp,sp,12
    ef34:	f800283a 	ret
    ef38:	2800111e 	bne	r5,zero,ef80 <__extendsfdf2+0xc4>
    ef3c:	88001c26 	beq	r17,zero,efb0 <__extendsfdf2+0xf4>
    ef40:	8809883a 	mov	r4,r17
    ef44:	000f4ec0 	call	f4ec <__clzsi2>
    ef48:	00c00284 	movi	r3,10
    ef4c:	18801b16 	blt	r3,r2,efbc <__extendsfdf2+0x100>
    ef50:	018002c4 	movi	r6,11
    ef54:	308dc83a 	sub	r6,r6,r2
    ef58:	11000544 	addi	r4,r2,21
    ef5c:	8986d83a 	srl	r3,r17,r6
    ef60:	8922983a 	sll	r17,r17,r4
    ef64:	0180e244 	movi	r6,905
    ef68:	01400434 	movhi	r5,16
    ef6c:	3085c83a 	sub	r2,r6,r2
    ef70:	297fffc4 	addi	r5,r5,-1
    ef74:	194c703a 	and	r6,r3,r5
    ef78:	1141ffcc 	andi	r5,r2,2047
    ef7c:	003fe006 	br	ef00 <__alt_data_end+0xfc00ef00>
    ef80:	88000826 	beq	r17,zero,efa4 <__extendsfdf2+0xe8>
    ef84:	880cd0fa 	srli	r6,r17,3
    ef88:	00800434 	movhi	r2,16
    ef8c:	10bfffc4 	addi	r2,r2,-1
    ef90:	31800234 	orhi	r6,r6,8
    ef94:	8822977a 	slli	r17,r17,29
    ef98:	308c703a 	and	r6,r6,r2
    ef9c:	0141ffc4 	movi	r5,2047
    efa0:	003fd706 	br	ef00 <__alt_data_end+0xfc00ef00>
    efa4:	0141ffc4 	movi	r5,2047
    efa8:	000d883a 	mov	r6,zero
    efac:	003fd406 	br	ef00 <__alt_data_end+0xfc00ef00>
    efb0:	000b883a 	mov	r5,zero
    efb4:	000d883a 	mov	r6,zero
    efb8:	003fd106 	br	ef00 <__alt_data_end+0xfc00ef00>
    efbc:	11bffd44 	addi	r6,r2,-11
    efc0:	8986983a 	sll	r3,r17,r6
    efc4:	0023883a 	mov	r17,zero
    efc8:	003fe606 	br	ef64 <__alt_data_end+0xfc00ef64>

0000efcc <_Unwind_ForcedUnwind_Phase2>:
    efcc:	defff404 	addi	sp,sp,-48
    efd0:	dd800915 	stw	r22,36(sp)
    efd4:	058000f4 	movhi	r22,3
    efd8:	ddc00a15 	stw	r23,40(sp)
    efdc:	dd400815 	stw	r21,32(sp)
    efe0:	dd000715 	stw	r20,28(sp)
    efe4:	dcc00615 	stw	r19,24(sp)
    efe8:	dc400415 	stw	r17,16(sp)
    efec:	dc000315 	stw	r16,12(sp)
    eff0:	dfc00b15 	stw	ra,44(sp)
    eff4:	dc800515 	stw	r18,20(sp)
    eff8:	2021883a 	mov	r16,r4
    effc:	2823883a 	mov	r17,r5
    f000:	24c00317 	ldw	r19,12(r4)
    f004:	25000417 	ldw	r20,16(r4)
    f008:	28c00017 	ldw	r3,0(r5)
    f00c:	b5885204 	addi	r22,r22,8520
    f010:	054001c4 	movi	r21,7
    f014:	05c00204 	movi	r23,8
    f018:	00001606 	br	f074 <_Unwind_ForcedUnwind_Phase2+0xa8>
    f01c:	81800017 	ldw	r6,0(r16)
    f020:	81c00117 	ldw	r7,4(r16)
    f024:	1c800617 	ldw	r18,24(r3)
    f028:	dd000215 	stw	r20,8(sp)
    f02c:	dc400115 	stw	r17,4(sp)
    f030:	dc000015 	stw	r16,0(sp)
    f034:	983ee83a 	callr	r19
    f038:	01400284 	movi	r5,10
    f03c:	01000044 	movi	r4,1
    f040:	1000241e 	bne	r2,zero,f0d4 <_Unwind_ForcedUnwind_Phase2+0x108>
    f044:	90000726 	beq	r18,zero,f064 <_Unwind_ForcedUnwind_Phase2+0x98>
    f048:	81800017 	ldw	r6,0(r16)
    f04c:	81c00117 	ldw	r7,4(r16)
    f050:	dc400115 	stw	r17,4(sp)
    f054:	dc000015 	stw	r16,0(sp)
    f058:	903ee83a 	callr	r18
    f05c:	15401f26 	beq	r2,r21,f0dc <_Unwind_ForcedUnwind_Phase2+0x110>
    f060:	15c01c1e 	bne	r2,r23,f0d4 <_Unwind_ForcedUnwind_Phase2+0x108>
    f064:	88800017 	ldw	r2,0(r17)
    f068:	10c00017 	ldw	r3,0(r2)
    f06c:	b0c00015 	stw	r3,0(r22)
    f070:	88c00015 	stw	r3,0(r17)
    f074:	01400284 	movi	r5,10
    f078:	01000044 	movi	r4,1
    f07c:	183fe71e 	bne	r3,zero,f01c <__alt_data_end+0xfc00f01c>
    f080:	81800017 	ldw	r6,0(r16)
    f084:	81c00117 	ldw	r7,4(r16)
    f088:	01400684 	movi	r5,26
    f08c:	dd000215 	stw	r20,8(sp)
    f090:	dc400115 	stw	r17,4(sp)
    f094:	dc000015 	stw	r16,0(sp)
    f098:	01000044 	movi	r4,1
    f09c:	983ee83a 	callr	r19
    f0a0:	10000c1e 	bne	r2,zero,f0d4 <_Unwind_ForcedUnwind_Phase2+0x108>
    f0a4:	00800144 	movi	r2,5
    f0a8:	dfc00b17 	ldw	ra,44(sp)
    f0ac:	ddc00a17 	ldw	r23,40(sp)
    f0b0:	dd800917 	ldw	r22,36(sp)
    f0b4:	dd400817 	ldw	r21,32(sp)
    f0b8:	dd000717 	ldw	r20,28(sp)
    f0bc:	dcc00617 	ldw	r19,24(sp)
    f0c0:	dc800517 	ldw	r18,20(sp)
    f0c4:	dc400417 	ldw	r17,16(sp)
    f0c8:	dc000317 	ldw	r16,12(sp)
    f0cc:	dec00c04 	addi	sp,sp,48
    f0d0:	f800283a 	ret
    f0d4:	00800084 	movi	r2,2
    f0d8:	003ff306 	br	f0a8 <__alt_data_end+0xfc00f0a8>
    f0dc:	a805883a 	mov	r2,r21
    f0e0:	003ff106 	br	f0a8 <__alt_data_end+0xfc00f0a8>

0000f0e4 <_Unwind_RaiseException_Phase2>:
    f0e4:	28c00017 	ldw	r3,0(r5)
    f0e8:	defff804 	addi	sp,sp,-32
    f0ec:	dcc00515 	stw	r19,20(sp)
    f0f0:	dc800415 	stw	r18,16(sp)
    f0f4:	dc400315 	stw	r17,12(sp)
    f0f8:	dc000215 	stw	r16,8(sp)
    f0fc:	dfc00715 	stw	ra,28(sp)
    f100:	dd000615 	stw	r20,24(sp)
    f104:	2823883a 	mov	r17,r5
    f108:	2021883a 	mov	r16,r4
    f10c:	048001c4 	movi	r18,7
    f110:	04c00204 	movi	r19,8
    f114:	18001326 	beq	r3,zero,f164 <_Unwind_RaiseException_Phase2+0x80>
    f118:	81000417 	ldw	r4,16(r16)
    f11c:	1a000617 	ldw	r8,24(r3)
    f120:	19001926 	beq	r3,r4,f188 <_Unwind_RaiseException_Phase2+0xa4>
    f124:	40000c26 	beq	r8,zero,f158 <_Unwind_RaiseException_Phase2+0x74>
    f128:	01400084 	movi	r5,2
    f12c:	0029883a 	mov	r20,zero
    f130:	81800017 	ldw	r6,0(r16)
    f134:	81c00117 	ldw	r7,4(r16)
    f138:	01000044 	movi	r4,1
    f13c:	dc400115 	stw	r17,4(sp)
    f140:	dc000015 	stw	r16,0(sp)
    f144:	403ee83a 	callr	r8
    f148:	14801326 	beq	r2,r18,f198 <_Unwind_RaiseException_Phase2+0xb4>
    f14c:	14c0051e 	bne	r2,r19,f164 <_Unwind_RaiseException_Phase2+0x80>
    f150:	a000131e 	bne	r20,zero,f1a0 <_Unwind_RaiseException_Phase2+0xbc>
    f154:	88c00017 	ldw	r3,0(r17)
    f158:	18c00017 	ldw	r3,0(r3)
    f15c:	88c00015 	stw	r3,0(r17)
    f160:	183fed1e 	bne	r3,zero,f118 <__alt_data_end+0xfc00f118>
    f164:	00800084 	movi	r2,2
    f168:	dfc00717 	ldw	ra,28(sp)
    f16c:	dd000617 	ldw	r20,24(sp)
    f170:	dcc00517 	ldw	r19,20(sp)
    f174:	dc800417 	ldw	r18,16(sp)
    f178:	dc400317 	ldw	r17,12(sp)
    f17c:	dc000217 	ldw	r16,8(sp)
    f180:	dec00804 	addi	sp,sp,32
    f184:	f800283a 	ret
    f188:	40000526 	beq	r8,zero,f1a0 <_Unwind_RaiseException_Phase2+0xbc>
    f18c:	01400184 	movi	r5,6
    f190:	05000104 	movi	r20,4
    f194:	003fe606 	br	f130 <__alt_data_end+0xfc00f130>
    f198:	9005883a 	mov	r2,r18
    f19c:	003ff206 	br	f168 <__alt_data_end+0xfc00f168>
    f1a0:	000f5500 	call	f550 <abort>

0000f1a4 <uw_install_context.isra.1>:
    f1a4:	20c00017 	ldw	r3,0(r4)
    f1a8:	deffff04 	addi	sp,sp,-4
    f1ac:	014000f4 	movhi	r5,3
    f1b0:	19000917 	ldw	r4,36(r3)
    f1b4:	df000015 	stw	fp,0(sp)
    f1b8:	18800804 	addi	r2,r3,32
    f1bc:	d839883a 	mov	fp,sp
    f1c0:	29485204 	addi	r5,r5,8520
    f1c4:	28c00015 	stw	r3,0(r5)
    f1c8:	17000017 	ldw	fp,0(r2)
    f1cc:	1ec00a17 	ldw	sp,40(r3)
    f1d0:	2000683a 	jmp	r4

0000f1d4 <_Unwind_SjLj_Register>:
    f1d4:	008000f4 	movhi	r2,3
    f1d8:	10885204 	addi	r2,r2,8520
    f1dc:	10c00017 	ldw	r3,0(r2)
    f1e0:	11000015 	stw	r4,0(r2)
    f1e4:	20c00015 	stw	r3,0(r4)
    f1e8:	f800283a 	ret

0000f1ec <_Unwind_SjLj_Unregister>:
    f1ec:	20c00017 	ldw	r3,0(r4)
    f1f0:	008000f4 	movhi	r2,3
    f1f4:	10885204 	addi	r2,r2,8520
    f1f8:	10c00015 	stw	r3,0(r2)
    f1fc:	f800283a 	ret

0000f200 <_Unwind_GetGR>:
    f200:	20800017 	ldw	r2,0(r4)
    f204:	29400084 	addi	r5,r5,2
    f208:	294b883a 	add	r5,r5,r5
    f20c:	294b883a 	add	r5,r5,r5
    f210:	114b883a 	add	r5,r2,r5
    f214:	28800017 	ldw	r2,0(r5)
    f218:	f800283a 	ret

0000f21c <_Unwind_GetCFA>:
    f21c:	20800017 	ldw	r2,0(r4)
    f220:	10000226 	beq	r2,zero,f22c <_Unwind_GetCFA+0x10>
    f224:	10800a17 	ldw	r2,40(r2)
    f228:	f800283a 	ret
    f22c:	0005883a 	mov	r2,zero
    f230:	f800283a 	ret

0000f234 <_Unwind_SetGR>:
    f234:	20800017 	ldw	r2,0(r4)
    f238:	29400084 	addi	r5,r5,2
    f23c:	294b883a 	add	r5,r5,r5
    f240:	294b883a 	add	r5,r5,r5
    f244:	114b883a 	add	r5,r2,r5
    f248:	29800015 	stw	r6,0(r5)
    f24c:	f800283a 	ret

0000f250 <_Unwind_GetIP>:
    f250:	20800017 	ldw	r2,0(r4)
    f254:	10800117 	ldw	r2,4(r2)
    f258:	10800044 	addi	r2,r2,1
    f25c:	f800283a 	ret

0000f260 <_Unwind_GetIPInfo>:
    f260:	20800017 	ldw	r2,0(r4)
    f264:	28000015 	stw	zero,0(r5)
    f268:	10000326 	beq	r2,zero,f278 <_Unwind_GetIPInfo+0x18>
    f26c:	10800117 	ldw	r2,4(r2)
    f270:	10800044 	addi	r2,r2,1
    f274:	f800283a 	ret
    f278:	0005883a 	mov	r2,zero
    f27c:	f800283a 	ret

0000f280 <_Unwind_SetIP>:
    f280:	20800017 	ldw	r2,0(r4)
    f284:	297fffc4 	addi	r5,r5,-1
    f288:	11400115 	stw	r5,4(r2)
    f28c:	f800283a 	ret

0000f290 <_Unwind_GetLanguageSpecificData>:
    f290:	20800017 	ldw	r2,0(r4)
    f294:	10800717 	ldw	r2,28(r2)
    f298:	f800283a 	ret

0000f29c <_Unwind_GetRegionStart>:
    f29c:	0005883a 	mov	r2,zero
    f2a0:	f800283a 	ret

0000f2a4 <_Unwind_FindEnclosingFunction>:
    f2a4:	0005883a 	mov	r2,zero
    f2a8:	f800283a 	ret

0000f2ac <_Unwind_GetDataRelBase>:
    f2ac:	0005883a 	mov	r2,zero
    f2b0:	f800283a 	ret

0000f2b4 <_Unwind_GetTextRelBase>:
    f2b4:	0005883a 	mov	r2,zero
    f2b8:	f800283a 	ret

0000f2bc <_Unwind_SjLj_RaiseException>:
    f2bc:	008000f4 	movhi	r2,3
    f2c0:	defff804 	addi	sp,sp,-32
    f2c4:	10885204 	addi	r2,r2,8520
    f2c8:	dc800515 	stw	r18,20(sp)
    f2cc:	14800017 	ldw	r18,0(r2)
    f2d0:	dfc00715 	stw	ra,28(sp)
    f2d4:	dcc00615 	stw	r19,24(sp)
    f2d8:	dc400415 	stw	r17,16(sp)
    f2dc:	dc000315 	stw	r16,12(sp)
    f2e0:	dc800215 	stw	r18,8(sp)
    f2e4:	90001426 	beq	r18,zero,f338 <_Unwind_SjLj_RaiseException+0x7c>
    f2e8:	2021883a 	mov	r16,r4
    f2ec:	9005883a 	mov	r2,r18
    f2f0:	04400184 	movi	r17,6
    f2f4:	04c00204 	movi	r19,8
    f2f8:	10800617 	ldw	r2,24(r2)
    f2fc:	10000a26 	beq	r2,zero,f328 <_Unwind_SjLj_RaiseException+0x6c>
    f300:	81800017 	ldw	r6,0(r16)
    f304:	81c00117 	ldw	r7,4(r16)
    f308:	01400044 	movi	r5,1
    f30c:	d8c00204 	addi	r3,sp,8
    f310:	d8c00115 	stw	r3,4(sp)
    f314:	dc000015 	stw	r16,0(sp)
    f318:	2809883a 	mov	r4,r5
    f31c:	103ee83a 	callr	r2
    f320:	14400d26 	beq	r2,r17,f358 <_Unwind_SjLj_RaiseException+0x9c>
    f324:	14c0171e 	bne	r2,r19,f384 <_Unwind_SjLj_RaiseException+0xc8>
    f328:	d8800217 	ldw	r2,8(sp)
    f32c:	10800017 	ldw	r2,0(r2)
    f330:	d8800215 	stw	r2,8(sp)
    f334:	103ff01e 	bne	r2,zero,f2f8 <__alt_data_end+0xfc00f2f8>
    f338:	00800144 	movi	r2,5
    f33c:	dfc00717 	ldw	ra,28(sp)
    f340:	dcc00617 	ldw	r19,24(sp)
    f344:	dc800517 	ldw	r18,20(sp)
    f348:	dc400417 	ldw	r17,16(sp)
    f34c:	dc000317 	ldw	r16,12(sp)
    f350:	dec00804 	addi	sp,sp,32
    f354:	f800283a 	ret
    f358:	d8800217 	ldw	r2,8(sp)
    f35c:	80000315 	stw	zero,12(r16)
    f360:	d9400204 	addi	r5,sp,8
    f364:	80800415 	stw	r2,16(r16)
    f368:	8009883a 	mov	r4,r16
    f36c:	dc800215 	stw	r18,8(sp)
    f370:	000f0e40 	call	f0e4 <_Unwind_RaiseException_Phase2>
    f374:	00c001c4 	movi	r3,7
    f378:	10fff01e 	bne	r2,r3,f33c <__alt_data_end+0xfc00f33c>
    f37c:	d9000204 	addi	r4,sp,8
    f380:	000f1a40 	call	f1a4 <uw_install_context.isra.1>
    f384:	008000c4 	movi	r2,3
    f388:	003fec06 	br	f33c <__alt_data_end+0xfc00f33c>

0000f38c <_Unwind_SjLj_ForcedUnwind>:
    f38c:	00c000f4 	movhi	r3,3
    f390:	18c85204 	addi	r3,r3,8520
    f394:	defffe04 	addi	sp,sp,-8
    f398:	18c00017 	ldw	r3,0(r3)
    f39c:	dfc00115 	stw	ra,4(sp)
    f3a0:	21400315 	stw	r5,12(r4)
    f3a4:	21800415 	stw	r6,16(r4)
    f3a8:	d80b883a 	mov	r5,sp
    f3ac:	d8c00015 	stw	r3,0(sp)
    f3b0:	000efcc0 	call	efcc <_Unwind_ForcedUnwind_Phase2>
    f3b4:	00c001c4 	movi	r3,7
    f3b8:	10c00326 	beq	r2,r3,f3c8 <_Unwind_SjLj_ForcedUnwind+0x3c>
    f3bc:	dfc00117 	ldw	ra,4(sp)
    f3c0:	dec00204 	addi	sp,sp,8
    f3c4:	f800283a 	ret
    f3c8:	d809883a 	mov	r4,sp
    f3cc:	000f1a40 	call	f1a4 <uw_install_context.isra.1>

0000f3d0 <_Unwind_SjLj_Resume>:
    f3d0:	00c000f4 	movhi	r3,3
    f3d4:	18c85204 	addi	r3,r3,8520
    f3d8:	18c00017 	ldw	r3,0(r3)
    f3dc:	20800317 	ldw	r2,12(r4)
    f3e0:	defffe04 	addi	sp,sp,-8
    f3e4:	dfc00115 	stw	ra,4(sp)
    f3e8:	d8c00015 	stw	r3,0(sp)
    f3ec:	d80b883a 	mov	r5,sp
    f3f0:	1000041e 	bne	r2,zero,f404 <_Unwind_SjLj_Resume+0x34>
    f3f4:	000f0e40 	call	f0e4 <_Unwind_RaiseException_Phase2>
    f3f8:	00c001c4 	movi	r3,7
    f3fc:	10c00326 	beq	r2,r3,f40c <_Unwind_SjLj_Resume+0x3c>
    f400:	000f5500 	call	f550 <abort>
    f404:	000efcc0 	call	efcc <_Unwind_ForcedUnwind_Phase2>
    f408:	003ffb06 	br	f3f8 <__alt_data_end+0xfc00f3f8>
    f40c:	d809883a 	mov	r4,sp
    f410:	000f1a40 	call	f1a4 <uw_install_context.isra.1>

0000f414 <_Unwind_SjLj_Resume_or_Rethrow>:
    f414:	20800317 	ldw	r2,12(r4)
    f418:	defffe04 	addi	sp,sp,-8
    f41c:	dfc00115 	stw	ra,4(sp)
    f420:	1000041e 	bne	r2,zero,f434 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    f424:	000f2bc0 	call	f2bc <_Unwind_SjLj_RaiseException>
    f428:	dfc00117 	ldw	ra,4(sp)
    f42c:	dec00204 	addi	sp,sp,8
    f430:	f800283a 	ret
    f434:	008000f4 	movhi	r2,3
    f438:	10885204 	addi	r2,r2,8520
    f43c:	10800017 	ldw	r2,0(r2)
    f440:	d80b883a 	mov	r5,sp
    f444:	d8800015 	stw	r2,0(sp)
    f448:	000efcc0 	call	efcc <_Unwind_ForcedUnwind_Phase2>
    f44c:	00c001c4 	movi	r3,7
    f450:	10c00126 	beq	r2,r3,f458 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    f454:	000f5500 	call	f550 <abort>
    f458:	d809883a 	mov	r4,sp
    f45c:	000f1a40 	call	f1a4 <uw_install_context.isra.1>

0000f460 <_Unwind_DeleteException>:
    f460:	20800217 	ldw	r2,8(r4)
    f464:	10000326 	beq	r2,zero,f474 <_Unwind_DeleteException+0x14>
    f468:	200b883a 	mov	r5,r4
    f46c:	01000044 	movi	r4,1
    f470:	1000683a 	jmp	r2
    f474:	f800283a 	ret

0000f478 <_Unwind_Backtrace>:
    f478:	008000f4 	movhi	r2,3
    f47c:	10885204 	addi	r2,r2,8520
    f480:	10800017 	ldw	r2,0(r2)
    f484:	defffc04 	addi	sp,sp,-16
    f488:	dc400215 	stw	r17,8(sp)
    f48c:	dc000115 	stw	r16,4(sp)
    f490:	dfc00315 	stw	ra,12(sp)
    f494:	2023883a 	mov	r17,r4
    f498:	2821883a 	mov	r16,r5
    f49c:	d8800015 	stw	r2,0(sp)
    f4a0:	00000506 	br	f4b8 <_Unwind_Backtrace+0x40>
    f4a4:	883ee83a 	callr	r17
    f4a8:	10000e1e 	bne	r2,zero,f4e4 <_Unwind_Backtrace+0x6c>
    f4ac:	d8800017 	ldw	r2,0(sp)
    f4b0:	10800017 	ldw	r2,0(r2)
    f4b4:	d8800015 	stw	r2,0(sp)
    f4b8:	800b883a 	mov	r5,r16
    f4bc:	d809883a 	mov	r4,sp
    f4c0:	103ff81e 	bne	r2,zero,f4a4 <__alt_data_end+0xfc00f4a4>
    f4c4:	883ee83a 	callr	r17
    f4c8:	1000061e 	bne	r2,zero,f4e4 <_Unwind_Backtrace+0x6c>
    f4cc:	00800144 	movi	r2,5
    f4d0:	dfc00317 	ldw	ra,12(sp)
    f4d4:	dc400217 	ldw	r17,8(sp)
    f4d8:	dc000117 	ldw	r16,4(sp)
    f4dc:	dec00404 	addi	sp,sp,16
    f4e0:	f800283a 	ret
    f4e4:	008000c4 	movi	r2,3
    f4e8:	003ff906 	br	f4d0 <__alt_data_end+0xfc00f4d0>

0000f4ec <__clzsi2>:
    f4ec:	00bfffd4 	movui	r2,65535
    f4f0:	11000536 	bltu	r2,r4,f508 <__clzsi2+0x1c>
    f4f4:	00803fc4 	movi	r2,255
    f4f8:	11000f36 	bltu	r2,r4,f538 <__clzsi2+0x4c>
    f4fc:	00800804 	movi	r2,32
    f500:	0007883a 	mov	r3,zero
    f504:	00000506 	br	f51c <__clzsi2+0x30>
    f508:	00804034 	movhi	r2,256
    f50c:	10bfffc4 	addi	r2,r2,-1
    f510:	11000c2e 	bgeu	r2,r4,f544 <__clzsi2+0x58>
    f514:	00800204 	movi	r2,8
    f518:	00c00604 	movi	r3,24
    f51c:	20c8d83a 	srl	r4,r4,r3
    f520:	00c000f4 	movhi	r3,3
    f524:	18ee7404 	addi	r3,r3,-17968
    f528:	1909883a 	add	r4,r3,r4
    f52c:	20c00003 	ldbu	r3,0(r4)
    f530:	10c5c83a 	sub	r2,r2,r3
    f534:	f800283a 	ret
    f538:	00800604 	movi	r2,24
    f53c:	00c00204 	movi	r3,8
    f540:	003ff606 	br	f51c <__alt_data_end+0xfc00f51c>
    f544:	00800404 	movi	r2,16
    f548:	1007883a 	mov	r3,r2
    f54c:	003ff306 	br	f51c <__alt_data_end+0xfc00f51c>

0000f550 <abort>:
    f550:	deffff04 	addi	sp,sp,-4
    f554:	01000184 	movi	r4,6
    f558:	dfc00015 	stw	ra,0(sp)
    f55c:	00104600 	call	10460 <raise>
    f560:	01000044 	movi	r4,1
    f564:	00201a00 	call	201a0 <_exit>

0000f568 <clock>:
    f568:	008000f4 	movhi	r2,3
    f56c:	10bbbb04 	addi	r2,r2,-4372
    f570:	11000017 	ldw	r4,0(r2)
    f574:	defffb04 	addi	sp,sp,-20
    f578:	d80b883a 	mov	r5,sp
    f57c:	dfc00415 	stw	ra,16(sp)
    f580:	0012a040 	call	12a04 <_times_r>
    f584:	00ffffc4 	movi	r3,-1
    f588:	10c00726 	beq	r2,r3,f5a8 <clock+0x40>
    f58c:	d8c00017 	ldw	r3,0(sp)
    f590:	d8800117 	ldw	r2,4(sp)
    f594:	1885883a 	add	r2,r3,r2
    f598:	d8c00217 	ldw	r3,8(sp)
    f59c:	10c7883a 	add	r3,r2,r3
    f5a0:	d8800317 	ldw	r2,12(sp)
    f5a4:	1885883a 	add	r2,r3,r2
    f5a8:	dfc00417 	ldw	ra,16(sp)
    f5ac:	dec00504 	addi	sp,sp,20
    f5b0:	f800283a 	ret

0000f5b4 <malloc>:
    f5b4:	008000f4 	movhi	r2,3
    f5b8:	10bbbb04 	addi	r2,r2,-4372
    f5bc:	200b883a 	mov	r5,r4
    f5c0:	11000017 	ldw	r4,0(r2)
    f5c4:	000f5dc1 	jmpi	f5dc <_malloc_r>

0000f5c8 <free>:
    f5c8:	008000f4 	movhi	r2,3
    f5cc:	10bbbb04 	addi	r2,r2,-4372
    f5d0:	200b883a 	mov	r5,r4
    f5d4:	11000017 	ldw	r4,0(r2)
    f5d8:	0016f401 	jmpi	16f40 <_free_r>

0000f5dc <_malloc_r>:
    f5dc:	defff504 	addi	sp,sp,-44
    f5e0:	dc800315 	stw	r18,12(sp)
    f5e4:	dfc00a15 	stw	ra,40(sp)
    f5e8:	df000915 	stw	fp,36(sp)
    f5ec:	ddc00815 	stw	r23,32(sp)
    f5f0:	dd800715 	stw	r22,28(sp)
    f5f4:	dd400615 	stw	r21,24(sp)
    f5f8:	dd000515 	stw	r20,20(sp)
    f5fc:	dcc00415 	stw	r19,16(sp)
    f600:	dc400215 	stw	r17,8(sp)
    f604:	dc000115 	stw	r16,4(sp)
    f608:	288002c4 	addi	r2,r5,11
    f60c:	00c00584 	movi	r3,22
    f610:	2025883a 	mov	r18,r4
    f614:	18807f2e 	bgeu	r3,r2,f814 <_malloc_r+0x238>
    f618:	047ffe04 	movi	r17,-8
    f61c:	1462703a 	and	r17,r2,r17
    f620:	8800a316 	blt	r17,zero,f8b0 <_malloc_r+0x2d4>
    f624:	8940a236 	bltu	r17,r5,f8b0 <_malloc_r+0x2d4>
    f628:	00207bc0 	call	207bc <__malloc_lock>
    f62c:	00807dc4 	movi	r2,503
    f630:	1441e92e 	bgeu	r2,r17,fdd8 <_malloc_r+0x7fc>
    f634:	8804d27a 	srli	r2,r17,9
    f638:	1000a126 	beq	r2,zero,f8c0 <_malloc_r+0x2e4>
    f63c:	00c00104 	movi	r3,4
    f640:	18811e36 	bltu	r3,r2,fabc <_malloc_r+0x4e0>
    f644:	8804d1ba 	srli	r2,r17,6
    f648:	12000e44 	addi	r8,r2,57
    f64c:	11c00e04 	addi	r7,r2,56
    f650:	4209883a 	add	r4,r8,r8
    f654:	04c000f4 	movhi	r19,3
    f658:	2109883a 	add	r4,r4,r4
    f65c:	9cf05804 	addi	r19,r19,-16032
    f660:	2109883a 	add	r4,r4,r4
    f664:	9909883a 	add	r4,r19,r4
    f668:	24000117 	ldw	r16,4(r4)
    f66c:	213ffe04 	addi	r4,r4,-8
    f670:	24009726 	beq	r4,r16,f8d0 <_malloc_r+0x2f4>
    f674:	80800117 	ldw	r2,4(r16)
    f678:	01bfff04 	movi	r6,-4
    f67c:	014003c4 	movi	r5,15
    f680:	1184703a 	and	r2,r2,r6
    f684:	1447c83a 	sub	r3,r2,r17
    f688:	28c00716 	blt	r5,r3,f6a8 <_malloc_r+0xcc>
    f68c:	1800920e 	bge	r3,zero,f8d8 <_malloc_r+0x2fc>
    f690:	84000317 	ldw	r16,12(r16)
    f694:	24008e26 	beq	r4,r16,f8d0 <_malloc_r+0x2f4>
    f698:	80800117 	ldw	r2,4(r16)
    f69c:	1184703a 	and	r2,r2,r6
    f6a0:	1447c83a 	sub	r3,r2,r17
    f6a4:	28fff90e 	bge	r5,r3,f68c <__alt_data_end+0xfc00f68c>
    f6a8:	3809883a 	mov	r4,r7
    f6ac:	018000f4 	movhi	r6,3
    f6b0:	9c000417 	ldw	r16,16(r19)
    f6b4:	31b05804 	addi	r6,r6,-16032
    f6b8:	32000204 	addi	r8,r6,8
    f6bc:	82013426 	beq	r16,r8,fb90 <_malloc_r+0x5b4>
    f6c0:	80c00117 	ldw	r3,4(r16)
    f6c4:	00bfff04 	movi	r2,-4
    f6c8:	188e703a 	and	r7,r3,r2
    f6cc:	3c45c83a 	sub	r2,r7,r17
    f6d0:	00c003c4 	movi	r3,15
    f6d4:	18811f16 	blt	r3,r2,fb54 <_malloc_r+0x578>
    f6d8:	32000515 	stw	r8,20(r6)
    f6dc:	32000415 	stw	r8,16(r6)
    f6e0:	10007f0e 	bge	r2,zero,f8e0 <_malloc_r+0x304>
    f6e4:	00807fc4 	movi	r2,511
    f6e8:	11c0fd36 	bltu	r2,r7,fae0 <_malloc_r+0x504>
    f6ec:	3806d0fa 	srli	r3,r7,3
    f6f0:	01c00044 	movi	r7,1
    f6f4:	30800117 	ldw	r2,4(r6)
    f6f8:	19400044 	addi	r5,r3,1
    f6fc:	294b883a 	add	r5,r5,r5
    f700:	1807d0ba 	srai	r3,r3,2
    f704:	294b883a 	add	r5,r5,r5
    f708:	294b883a 	add	r5,r5,r5
    f70c:	298b883a 	add	r5,r5,r6
    f710:	38c6983a 	sll	r3,r7,r3
    f714:	29c00017 	ldw	r7,0(r5)
    f718:	2a7ffe04 	addi	r9,r5,-8
    f71c:	1886b03a 	or	r3,r3,r2
    f720:	82400315 	stw	r9,12(r16)
    f724:	81c00215 	stw	r7,8(r16)
    f728:	30c00115 	stw	r3,4(r6)
    f72c:	2c000015 	stw	r16,0(r5)
    f730:	3c000315 	stw	r16,12(r7)
    f734:	2005d0ba 	srai	r2,r4,2
    f738:	01400044 	movi	r5,1
    f73c:	288a983a 	sll	r5,r5,r2
    f740:	19406f36 	bltu	r3,r5,f900 <_malloc_r+0x324>
    f744:	28c4703a 	and	r2,r5,r3
    f748:	10000a1e 	bne	r2,zero,f774 <_malloc_r+0x198>
    f74c:	00bfff04 	movi	r2,-4
    f750:	294b883a 	add	r5,r5,r5
    f754:	2088703a 	and	r4,r4,r2
    f758:	28c4703a 	and	r2,r5,r3
    f75c:	21000104 	addi	r4,r4,4
    f760:	1000041e 	bne	r2,zero,f774 <_malloc_r+0x198>
    f764:	294b883a 	add	r5,r5,r5
    f768:	28c4703a 	and	r2,r5,r3
    f76c:	21000104 	addi	r4,r4,4
    f770:	103ffc26 	beq	r2,zero,f764 <__alt_data_end+0xfc00f764>
    f774:	02bfff04 	movi	r10,-4
    f778:	024003c4 	movi	r9,15
    f77c:	21800044 	addi	r6,r4,1
    f780:	318d883a 	add	r6,r6,r6
    f784:	318d883a 	add	r6,r6,r6
    f788:	318d883a 	add	r6,r6,r6
    f78c:	998d883a 	add	r6,r19,r6
    f790:	333ffe04 	addi	r12,r6,-8
    f794:	2017883a 	mov	r11,r4
    f798:	31800104 	addi	r6,r6,4
    f79c:	34000017 	ldw	r16,0(r6)
    f7a0:	31fffd04 	addi	r7,r6,-12
    f7a4:	81c0041e 	bne	r16,r7,f7b8 <_malloc_r+0x1dc>
    f7a8:	0000fb06 	br	fb98 <_malloc_r+0x5bc>
    f7ac:	1801030e 	bge	r3,zero,fbbc <_malloc_r+0x5e0>
    f7b0:	84000317 	ldw	r16,12(r16)
    f7b4:	81c0f826 	beq	r16,r7,fb98 <_malloc_r+0x5bc>
    f7b8:	80800117 	ldw	r2,4(r16)
    f7bc:	1284703a 	and	r2,r2,r10
    f7c0:	1447c83a 	sub	r3,r2,r17
    f7c4:	48fff90e 	bge	r9,r3,f7ac <__alt_data_end+0xfc00f7ac>
    f7c8:	80800317 	ldw	r2,12(r16)
    f7cc:	81000217 	ldw	r4,8(r16)
    f7d0:	89400054 	ori	r5,r17,1
    f7d4:	81400115 	stw	r5,4(r16)
    f7d8:	20800315 	stw	r2,12(r4)
    f7dc:	11000215 	stw	r4,8(r2)
    f7e0:	8463883a 	add	r17,r16,r17
    f7e4:	9c400515 	stw	r17,20(r19)
    f7e8:	9c400415 	stw	r17,16(r19)
    f7ec:	18800054 	ori	r2,r3,1
    f7f0:	88800115 	stw	r2,4(r17)
    f7f4:	8a000315 	stw	r8,12(r17)
    f7f8:	8a000215 	stw	r8,8(r17)
    f7fc:	88e3883a 	add	r17,r17,r3
    f800:	88c00015 	stw	r3,0(r17)
    f804:	9009883a 	mov	r4,r18
    f808:	00207e00 	call	207e0 <__malloc_unlock>
    f80c:	80800204 	addi	r2,r16,8
    f810:	00001b06 	br	f880 <_malloc_r+0x2a4>
    f814:	04400404 	movi	r17,16
    f818:	89402536 	bltu	r17,r5,f8b0 <_malloc_r+0x2d4>
    f81c:	00207bc0 	call	207bc <__malloc_lock>
    f820:	00800184 	movi	r2,6
    f824:	01000084 	movi	r4,2
    f828:	04c000f4 	movhi	r19,3
    f82c:	1085883a 	add	r2,r2,r2
    f830:	9cf05804 	addi	r19,r19,-16032
    f834:	1085883a 	add	r2,r2,r2
    f838:	9885883a 	add	r2,r19,r2
    f83c:	14000117 	ldw	r16,4(r2)
    f840:	10fffe04 	addi	r3,r2,-8
    f844:	80c0d926 	beq	r16,r3,fbac <_malloc_r+0x5d0>
    f848:	80c00117 	ldw	r3,4(r16)
    f84c:	81000317 	ldw	r4,12(r16)
    f850:	00bfff04 	movi	r2,-4
    f854:	1884703a 	and	r2,r3,r2
    f858:	81400217 	ldw	r5,8(r16)
    f85c:	8085883a 	add	r2,r16,r2
    f860:	10c00117 	ldw	r3,4(r2)
    f864:	29000315 	stw	r4,12(r5)
    f868:	21400215 	stw	r5,8(r4)
    f86c:	18c00054 	ori	r3,r3,1
    f870:	10c00115 	stw	r3,4(r2)
    f874:	9009883a 	mov	r4,r18
    f878:	00207e00 	call	207e0 <__malloc_unlock>
    f87c:	80800204 	addi	r2,r16,8
    f880:	dfc00a17 	ldw	ra,40(sp)
    f884:	df000917 	ldw	fp,36(sp)
    f888:	ddc00817 	ldw	r23,32(sp)
    f88c:	dd800717 	ldw	r22,28(sp)
    f890:	dd400617 	ldw	r21,24(sp)
    f894:	dd000517 	ldw	r20,20(sp)
    f898:	dcc00417 	ldw	r19,16(sp)
    f89c:	dc800317 	ldw	r18,12(sp)
    f8a0:	dc400217 	ldw	r17,8(sp)
    f8a4:	dc000117 	ldw	r16,4(sp)
    f8a8:	dec00b04 	addi	sp,sp,44
    f8ac:	f800283a 	ret
    f8b0:	00800304 	movi	r2,12
    f8b4:	90800015 	stw	r2,0(r18)
    f8b8:	0005883a 	mov	r2,zero
    f8bc:	003ff006 	br	f880 <__alt_data_end+0xfc00f880>
    f8c0:	01002004 	movi	r4,128
    f8c4:	02001004 	movi	r8,64
    f8c8:	01c00fc4 	movi	r7,63
    f8cc:	003f6106 	br	f654 <__alt_data_end+0xfc00f654>
    f8d0:	4009883a 	mov	r4,r8
    f8d4:	003f7506 	br	f6ac <__alt_data_end+0xfc00f6ac>
    f8d8:	81000317 	ldw	r4,12(r16)
    f8dc:	003fde06 	br	f858 <__alt_data_end+0xfc00f858>
    f8e0:	81c5883a 	add	r2,r16,r7
    f8e4:	11400117 	ldw	r5,4(r2)
    f8e8:	9009883a 	mov	r4,r18
    f8ec:	29400054 	ori	r5,r5,1
    f8f0:	11400115 	stw	r5,4(r2)
    f8f4:	00207e00 	call	207e0 <__malloc_unlock>
    f8f8:	80800204 	addi	r2,r16,8
    f8fc:	003fe006 	br	f880 <__alt_data_end+0xfc00f880>
    f900:	9c000217 	ldw	r16,8(r19)
    f904:	00bfff04 	movi	r2,-4
    f908:	85800117 	ldw	r22,4(r16)
    f90c:	b0ac703a 	and	r22,r22,r2
    f910:	b4400336 	bltu	r22,r17,f920 <_malloc_r+0x344>
    f914:	b445c83a 	sub	r2,r22,r17
    f918:	00c003c4 	movi	r3,15
    f91c:	18805d16 	blt	r3,r2,fa94 <_malloc_r+0x4b8>
    f920:	05c000f4 	movhi	r23,3
    f924:	008000f4 	movhi	r2,3
    f928:	10885504 	addi	r2,r2,8532
    f92c:	bdfbbc04 	addi	r23,r23,-4368
    f930:	15400017 	ldw	r21,0(r2)
    f934:	b8c00017 	ldw	r3,0(r23)
    f938:	00bfffc4 	movi	r2,-1
    f93c:	858d883a 	add	r6,r16,r22
    f940:	8d6b883a 	add	r21,r17,r21
    f944:	1880ea26 	beq	r3,r2,fcf0 <_malloc_r+0x714>
    f948:	ad4403c4 	addi	r21,r21,4111
    f94c:	00bc0004 	movi	r2,-4096
    f950:	a8aa703a 	and	r21,r21,r2
    f954:	a80b883a 	mov	r5,r21
    f958:	9009883a 	mov	r4,r18
    f95c:	d9800015 	stw	r6,0(sp)
    f960:	00101b80 	call	101b8 <_sbrk_r>
    f964:	1029883a 	mov	r20,r2
    f968:	00bfffc4 	movi	r2,-1
    f96c:	d9800017 	ldw	r6,0(sp)
    f970:	a080e826 	beq	r20,r2,fd14 <_malloc_r+0x738>
    f974:	a180a636 	bltu	r20,r6,fc10 <_malloc_r+0x634>
    f978:	070000f4 	movhi	fp,3
    f97c:	e708ad04 	addi	fp,fp,8884
    f980:	e0800017 	ldw	r2,0(fp)
    f984:	a887883a 	add	r3,r21,r2
    f988:	e0c00015 	stw	r3,0(fp)
    f98c:	3500e626 	beq	r6,r20,fd28 <_malloc_r+0x74c>
    f990:	b9000017 	ldw	r4,0(r23)
    f994:	00bfffc4 	movi	r2,-1
    f998:	2080ee26 	beq	r4,r2,fd54 <_malloc_r+0x778>
    f99c:	a185c83a 	sub	r2,r20,r6
    f9a0:	10c5883a 	add	r2,r2,r3
    f9a4:	e0800015 	stw	r2,0(fp)
    f9a8:	a0c001cc 	andi	r3,r20,7
    f9ac:	1800bc26 	beq	r3,zero,fca0 <_malloc_r+0x6c4>
    f9b0:	a0e9c83a 	sub	r20,r20,r3
    f9b4:	00840204 	movi	r2,4104
    f9b8:	a5000204 	addi	r20,r20,8
    f9bc:	10c7c83a 	sub	r3,r2,r3
    f9c0:	a545883a 	add	r2,r20,r21
    f9c4:	1083ffcc 	andi	r2,r2,4095
    f9c8:	18abc83a 	sub	r21,r3,r2
    f9cc:	a80b883a 	mov	r5,r21
    f9d0:	9009883a 	mov	r4,r18
    f9d4:	00101b80 	call	101b8 <_sbrk_r>
    f9d8:	00ffffc4 	movi	r3,-1
    f9dc:	10c0e126 	beq	r2,r3,fd64 <_malloc_r+0x788>
    f9e0:	1505c83a 	sub	r2,r2,r20
    f9e4:	1545883a 	add	r2,r2,r21
    f9e8:	10800054 	ori	r2,r2,1
    f9ec:	e0c00017 	ldw	r3,0(fp)
    f9f0:	9d000215 	stw	r20,8(r19)
    f9f4:	a0800115 	stw	r2,4(r20)
    f9f8:	a8c7883a 	add	r3,r21,r3
    f9fc:	e0c00015 	stw	r3,0(fp)
    fa00:	84c00e26 	beq	r16,r19,fa3c <_malloc_r+0x460>
    fa04:	018003c4 	movi	r6,15
    fa08:	3580a72e 	bgeu	r6,r22,fca8 <_malloc_r+0x6cc>
    fa0c:	81400117 	ldw	r5,4(r16)
    fa10:	013ffe04 	movi	r4,-8
    fa14:	b0bffd04 	addi	r2,r22,-12
    fa18:	1104703a 	and	r2,r2,r4
    fa1c:	2900004c 	andi	r4,r5,1
    fa20:	2088b03a 	or	r4,r4,r2
    fa24:	81000115 	stw	r4,4(r16)
    fa28:	01400144 	movi	r5,5
    fa2c:	8089883a 	add	r4,r16,r2
    fa30:	21400115 	stw	r5,4(r4)
    fa34:	21400215 	stw	r5,8(r4)
    fa38:	3080cd36 	bltu	r6,r2,fd70 <_malloc_r+0x794>
    fa3c:	008000f4 	movhi	r2,3
    fa40:	10885404 	addi	r2,r2,8528
    fa44:	11000017 	ldw	r4,0(r2)
    fa48:	20c0012e 	bgeu	r4,r3,fa50 <_malloc_r+0x474>
    fa4c:	10c00015 	stw	r3,0(r2)
    fa50:	008000f4 	movhi	r2,3
    fa54:	10885304 	addi	r2,r2,8524
    fa58:	11000017 	ldw	r4,0(r2)
    fa5c:	9c000217 	ldw	r16,8(r19)
    fa60:	20c0012e 	bgeu	r4,r3,fa68 <_malloc_r+0x48c>
    fa64:	10c00015 	stw	r3,0(r2)
    fa68:	80c00117 	ldw	r3,4(r16)
    fa6c:	00bfff04 	movi	r2,-4
    fa70:	1886703a 	and	r3,r3,r2
    fa74:	1c45c83a 	sub	r2,r3,r17
    fa78:	1c400236 	bltu	r3,r17,fa84 <_malloc_r+0x4a8>
    fa7c:	00c003c4 	movi	r3,15
    fa80:	18800416 	blt	r3,r2,fa94 <_malloc_r+0x4b8>
    fa84:	9009883a 	mov	r4,r18
    fa88:	00207e00 	call	207e0 <__malloc_unlock>
    fa8c:	0005883a 	mov	r2,zero
    fa90:	003f7b06 	br	f880 <__alt_data_end+0xfc00f880>
    fa94:	88c00054 	ori	r3,r17,1
    fa98:	80c00115 	stw	r3,4(r16)
    fa9c:	8463883a 	add	r17,r16,r17
    faa0:	10800054 	ori	r2,r2,1
    faa4:	9c400215 	stw	r17,8(r19)
    faa8:	88800115 	stw	r2,4(r17)
    faac:	9009883a 	mov	r4,r18
    fab0:	00207e00 	call	207e0 <__malloc_unlock>
    fab4:	80800204 	addi	r2,r16,8
    fab8:	003f7106 	br	f880 <__alt_data_end+0xfc00f880>
    fabc:	00c00504 	movi	r3,20
    fac0:	18804a2e 	bgeu	r3,r2,fbec <_malloc_r+0x610>
    fac4:	00c01504 	movi	r3,84
    fac8:	18806e36 	bltu	r3,r2,fc84 <_malloc_r+0x6a8>
    facc:	8804d33a 	srli	r2,r17,12
    fad0:	12001bc4 	addi	r8,r2,111
    fad4:	11c01b84 	addi	r7,r2,110
    fad8:	4209883a 	add	r4,r8,r8
    fadc:	003edd06 	br	f654 <__alt_data_end+0xfc00f654>
    fae0:	3804d27a 	srli	r2,r7,9
    fae4:	00c00104 	movi	r3,4
    fae8:	1880442e 	bgeu	r3,r2,fbfc <_malloc_r+0x620>
    faec:	00c00504 	movi	r3,20
    faf0:	18808136 	bltu	r3,r2,fcf8 <_malloc_r+0x71c>
    faf4:	11401704 	addi	r5,r2,92
    faf8:	10c016c4 	addi	r3,r2,91
    fafc:	294b883a 	add	r5,r5,r5
    fb00:	294b883a 	add	r5,r5,r5
    fb04:	294b883a 	add	r5,r5,r5
    fb08:	994b883a 	add	r5,r19,r5
    fb0c:	28800017 	ldw	r2,0(r5)
    fb10:	018000f4 	movhi	r6,3
    fb14:	297ffe04 	addi	r5,r5,-8
    fb18:	31b05804 	addi	r6,r6,-16032
    fb1c:	28806526 	beq	r5,r2,fcb4 <_malloc_r+0x6d8>
    fb20:	01bfff04 	movi	r6,-4
    fb24:	10c00117 	ldw	r3,4(r2)
    fb28:	1986703a 	and	r3,r3,r6
    fb2c:	38c0022e 	bgeu	r7,r3,fb38 <_malloc_r+0x55c>
    fb30:	10800217 	ldw	r2,8(r2)
    fb34:	28bffb1e 	bne	r5,r2,fb24 <__alt_data_end+0xfc00fb24>
    fb38:	11400317 	ldw	r5,12(r2)
    fb3c:	98c00117 	ldw	r3,4(r19)
    fb40:	81400315 	stw	r5,12(r16)
    fb44:	80800215 	stw	r2,8(r16)
    fb48:	2c000215 	stw	r16,8(r5)
    fb4c:	14000315 	stw	r16,12(r2)
    fb50:	003ef806 	br	f734 <__alt_data_end+0xfc00f734>
    fb54:	88c00054 	ori	r3,r17,1
    fb58:	80c00115 	stw	r3,4(r16)
    fb5c:	8463883a 	add	r17,r16,r17
    fb60:	34400515 	stw	r17,20(r6)
    fb64:	34400415 	stw	r17,16(r6)
    fb68:	10c00054 	ori	r3,r2,1
    fb6c:	8a000315 	stw	r8,12(r17)
    fb70:	8a000215 	stw	r8,8(r17)
    fb74:	88c00115 	stw	r3,4(r17)
    fb78:	88a3883a 	add	r17,r17,r2
    fb7c:	88800015 	stw	r2,0(r17)
    fb80:	9009883a 	mov	r4,r18
    fb84:	00207e00 	call	207e0 <__malloc_unlock>
    fb88:	80800204 	addi	r2,r16,8
    fb8c:	003f3c06 	br	f880 <__alt_data_end+0xfc00f880>
    fb90:	30c00117 	ldw	r3,4(r6)
    fb94:	003ee706 	br	f734 <__alt_data_end+0xfc00f734>
    fb98:	5ac00044 	addi	r11,r11,1
    fb9c:	588000cc 	andi	r2,r11,3
    fba0:	31800204 	addi	r6,r6,8
    fba4:	103efd1e 	bne	r2,zero,f79c <__alt_data_end+0xfc00f79c>
    fba8:	00002406 	br	fc3c <_malloc_r+0x660>
    fbac:	14000317 	ldw	r16,12(r2)
    fbb0:	143f251e 	bne	r2,r16,f848 <__alt_data_end+0xfc00f848>
    fbb4:	21000084 	addi	r4,r4,2
    fbb8:	003ebc06 	br	f6ac <__alt_data_end+0xfc00f6ac>
    fbbc:	8085883a 	add	r2,r16,r2
    fbc0:	10c00117 	ldw	r3,4(r2)
    fbc4:	81000317 	ldw	r4,12(r16)
    fbc8:	81400217 	ldw	r5,8(r16)
    fbcc:	18c00054 	ori	r3,r3,1
    fbd0:	10c00115 	stw	r3,4(r2)
    fbd4:	29000315 	stw	r4,12(r5)
    fbd8:	21400215 	stw	r5,8(r4)
    fbdc:	9009883a 	mov	r4,r18
    fbe0:	00207e00 	call	207e0 <__malloc_unlock>
    fbe4:	80800204 	addi	r2,r16,8
    fbe8:	003f2506 	br	f880 <__alt_data_end+0xfc00f880>
    fbec:	12001704 	addi	r8,r2,92
    fbf0:	11c016c4 	addi	r7,r2,91
    fbf4:	4209883a 	add	r4,r8,r8
    fbf8:	003e9606 	br	f654 <__alt_data_end+0xfc00f654>
    fbfc:	3804d1ba 	srli	r2,r7,6
    fc00:	11400e44 	addi	r5,r2,57
    fc04:	10c00e04 	addi	r3,r2,56
    fc08:	294b883a 	add	r5,r5,r5
    fc0c:	003fbc06 	br	fb00 <__alt_data_end+0xfc00fb00>
    fc10:	84ff5926 	beq	r16,r19,f978 <__alt_data_end+0xfc00f978>
    fc14:	008000f4 	movhi	r2,3
    fc18:	10b05804 	addi	r2,r2,-16032
    fc1c:	14000217 	ldw	r16,8(r2)
    fc20:	00bfff04 	movi	r2,-4
    fc24:	80c00117 	ldw	r3,4(r16)
    fc28:	1886703a 	and	r3,r3,r2
    fc2c:	003f9106 	br	fa74 <__alt_data_end+0xfc00fa74>
    fc30:	60800217 	ldw	r2,8(r12)
    fc34:	213fffc4 	addi	r4,r4,-1
    fc38:	1300651e 	bne	r2,r12,fdd0 <_malloc_r+0x7f4>
    fc3c:	208000cc 	andi	r2,r4,3
    fc40:	633ffe04 	addi	r12,r12,-8
    fc44:	103ffa1e 	bne	r2,zero,fc30 <__alt_data_end+0xfc00fc30>
    fc48:	98800117 	ldw	r2,4(r19)
    fc4c:	0146303a 	nor	r3,zero,r5
    fc50:	1884703a 	and	r2,r3,r2
    fc54:	98800115 	stw	r2,4(r19)
    fc58:	294b883a 	add	r5,r5,r5
    fc5c:	117f2836 	bltu	r2,r5,f900 <__alt_data_end+0xfc00f900>
    fc60:	283f2726 	beq	r5,zero,f900 <__alt_data_end+0xfc00f900>
    fc64:	2886703a 	and	r3,r5,r2
    fc68:	5809883a 	mov	r4,r11
    fc6c:	183ec31e 	bne	r3,zero,f77c <__alt_data_end+0xfc00f77c>
    fc70:	294b883a 	add	r5,r5,r5
    fc74:	2886703a 	and	r3,r5,r2
    fc78:	21000104 	addi	r4,r4,4
    fc7c:	183ffc26 	beq	r3,zero,fc70 <__alt_data_end+0xfc00fc70>
    fc80:	003ebe06 	br	f77c <__alt_data_end+0xfc00f77c>
    fc84:	00c05504 	movi	r3,340
    fc88:	18801236 	bltu	r3,r2,fcd4 <_malloc_r+0x6f8>
    fc8c:	8804d3fa 	srli	r2,r17,15
    fc90:	12001e04 	addi	r8,r2,120
    fc94:	11c01dc4 	addi	r7,r2,119
    fc98:	4209883a 	add	r4,r8,r8
    fc9c:	003e6d06 	br	f654 <__alt_data_end+0xfc00f654>
    fca0:	00c40004 	movi	r3,4096
    fca4:	003f4606 	br	f9c0 <__alt_data_end+0xfc00f9c0>
    fca8:	00800044 	movi	r2,1
    fcac:	a0800115 	stw	r2,4(r20)
    fcb0:	003f7406 	br	fa84 <__alt_data_end+0xfc00fa84>
    fcb4:	1805d0ba 	srai	r2,r3,2
    fcb8:	01c00044 	movi	r7,1
    fcbc:	30c00117 	ldw	r3,4(r6)
    fcc0:	388e983a 	sll	r7,r7,r2
    fcc4:	2805883a 	mov	r2,r5
    fcc8:	38c6b03a 	or	r3,r7,r3
    fccc:	30c00115 	stw	r3,4(r6)
    fcd0:	003f9b06 	br	fb40 <__alt_data_end+0xfc00fb40>
    fcd4:	00c15504 	movi	r3,1364
    fcd8:	18801a36 	bltu	r3,r2,fd44 <_malloc_r+0x768>
    fcdc:	8804d4ba 	srli	r2,r17,18
    fce0:	12001f44 	addi	r8,r2,125
    fce4:	11c01f04 	addi	r7,r2,124
    fce8:	4209883a 	add	r4,r8,r8
    fcec:	003e5906 	br	f654 <__alt_data_end+0xfc00f654>
    fcf0:	ad400404 	addi	r21,r21,16
    fcf4:	003f1706 	br	f954 <__alt_data_end+0xfc00f954>
    fcf8:	00c01504 	movi	r3,84
    fcfc:	18802336 	bltu	r3,r2,fd8c <_malloc_r+0x7b0>
    fd00:	3804d33a 	srli	r2,r7,12
    fd04:	11401bc4 	addi	r5,r2,111
    fd08:	10c01b84 	addi	r3,r2,110
    fd0c:	294b883a 	add	r5,r5,r5
    fd10:	003f7b06 	br	fb00 <__alt_data_end+0xfc00fb00>
    fd14:	9c000217 	ldw	r16,8(r19)
    fd18:	00bfff04 	movi	r2,-4
    fd1c:	80c00117 	ldw	r3,4(r16)
    fd20:	1886703a 	and	r3,r3,r2
    fd24:	003f5306 	br	fa74 <__alt_data_end+0xfc00fa74>
    fd28:	3083ffcc 	andi	r2,r6,4095
    fd2c:	103f181e 	bne	r2,zero,f990 <__alt_data_end+0xfc00f990>
    fd30:	99000217 	ldw	r4,8(r19)
    fd34:	b545883a 	add	r2,r22,r21
    fd38:	10800054 	ori	r2,r2,1
    fd3c:	20800115 	stw	r2,4(r4)
    fd40:	003f3e06 	br	fa3c <__alt_data_end+0xfc00fa3c>
    fd44:	01003f84 	movi	r4,254
    fd48:	02001fc4 	movi	r8,127
    fd4c:	01c01f84 	movi	r7,126
    fd50:	003e4006 	br	f654 <__alt_data_end+0xfc00f654>
    fd54:	008000f4 	movhi	r2,3
    fd58:	10bbbc04 	addi	r2,r2,-4368
    fd5c:	15000015 	stw	r20,0(r2)
    fd60:	003f1106 	br	f9a8 <__alt_data_end+0xfc00f9a8>
    fd64:	00800044 	movi	r2,1
    fd68:	002b883a 	mov	r21,zero
    fd6c:	003f1f06 	br	f9ec <__alt_data_end+0xfc00f9ec>
    fd70:	81400204 	addi	r5,r16,8
    fd74:	9009883a 	mov	r4,r18
    fd78:	0016f400 	call	16f40 <_free_r>
    fd7c:	008000f4 	movhi	r2,3
    fd80:	1088ad04 	addi	r2,r2,8884
    fd84:	10c00017 	ldw	r3,0(r2)
    fd88:	003f2c06 	br	fa3c <__alt_data_end+0xfc00fa3c>
    fd8c:	00c05504 	movi	r3,340
    fd90:	18800536 	bltu	r3,r2,fda8 <_malloc_r+0x7cc>
    fd94:	3804d3fa 	srli	r2,r7,15
    fd98:	11401e04 	addi	r5,r2,120
    fd9c:	10c01dc4 	addi	r3,r2,119
    fda0:	294b883a 	add	r5,r5,r5
    fda4:	003f5606 	br	fb00 <__alt_data_end+0xfc00fb00>
    fda8:	00c15504 	movi	r3,1364
    fdac:	18800536 	bltu	r3,r2,fdc4 <_malloc_r+0x7e8>
    fdb0:	3804d4ba 	srli	r2,r7,18
    fdb4:	11401f44 	addi	r5,r2,125
    fdb8:	10c01f04 	addi	r3,r2,124
    fdbc:	294b883a 	add	r5,r5,r5
    fdc0:	003f4f06 	br	fb00 <__alt_data_end+0xfc00fb00>
    fdc4:	01403f84 	movi	r5,254
    fdc8:	00c01f84 	movi	r3,126
    fdcc:	003f4c06 	br	fb00 <__alt_data_end+0xfc00fb00>
    fdd0:	98800117 	ldw	r2,4(r19)
    fdd4:	003fa006 	br	fc58 <__alt_data_end+0xfc00fc58>
    fdd8:	8808d0fa 	srli	r4,r17,3
    fddc:	20800044 	addi	r2,r4,1
    fde0:	1085883a 	add	r2,r2,r2
    fde4:	003e9006 	br	f828 <__alt_data_end+0xfc00f828>

0000fde8 <memcpy>:
    fde8:	defffd04 	addi	sp,sp,-12
    fdec:	dfc00215 	stw	ra,8(sp)
    fdf0:	dc400115 	stw	r17,4(sp)
    fdf4:	dc000015 	stw	r16,0(sp)
    fdf8:	00c003c4 	movi	r3,15
    fdfc:	2005883a 	mov	r2,r4
    fe00:	1980452e 	bgeu	r3,r6,ff18 <memcpy+0x130>
    fe04:	2906b03a 	or	r3,r5,r4
    fe08:	18c000cc 	andi	r3,r3,3
    fe0c:	1800441e 	bne	r3,zero,ff20 <memcpy+0x138>
    fe10:	347ffc04 	addi	r17,r6,-16
    fe14:	8822d13a 	srli	r17,r17,4
    fe18:	28c00104 	addi	r3,r5,4
    fe1c:	23400104 	addi	r13,r4,4
    fe20:	8820913a 	slli	r16,r17,4
    fe24:	2b000204 	addi	r12,r5,8
    fe28:	22c00204 	addi	r11,r4,8
    fe2c:	84000504 	addi	r16,r16,20
    fe30:	2a800304 	addi	r10,r5,12
    fe34:	22400304 	addi	r9,r4,12
    fe38:	2c21883a 	add	r16,r5,r16
    fe3c:	2811883a 	mov	r8,r5
    fe40:	200f883a 	mov	r7,r4
    fe44:	41000017 	ldw	r4,0(r8)
    fe48:	1fc00017 	ldw	ra,0(r3)
    fe4c:	63c00017 	ldw	r15,0(r12)
    fe50:	39000015 	stw	r4,0(r7)
    fe54:	53800017 	ldw	r14,0(r10)
    fe58:	6fc00015 	stw	ra,0(r13)
    fe5c:	5bc00015 	stw	r15,0(r11)
    fe60:	4b800015 	stw	r14,0(r9)
    fe64:	18c00404 	addi	r3,r3,16
    fe68:	39c00404 	addi	r7,r7,16
    fe6c:	42000404 	addi	r8,r8,16
    fe70:	6b400404 	addi	r13,r13,16
    fe74:	63000404 	addi	r12,r12,16
    fe78:	5ac00404 	addi	r11,r11,16
    fe7c:	52800404 	addi	r10,r10,16
    fe80:	4a400404 	addi	r9,r9,16
    fe84:	1c3fef1e 	bne	r3,r16,fe44 <__alt_data_end+0xfc00fe44>
    fe88:	89c00044 	addi	r7,r17,1
    fe8c:	380e913a 	slli	r7,r7,4
    fe90:	310003cc 	andi	r4,r6,15
    fe94:	02c000c4 	movi	r11,3
    fe98:	11c7883a 	add	r3,r2,r7
    fe9c:	29cb883a 	add	r5,r5,r7
    fea0:	5900212e 	bgeu	r11,r4,ff28 <memcpy+0x140>
    fea4:	1813883a 	mov	r9,r3
    fea8:	2811883a 	mov	r8,r5
    feac:	200f883a 	mov	r7,r4
    feb0:	42800017 	ldw	r10,0(r8)
    feb4:	4a400104 	addi	r9,r9,4
    feb8:	39ffff04 	addi	r7,r7,-4
    febc:	4abfff15 	stw	r10,-4(r9)
    fec0:	42000104 	addi	r8,r8,4
    fec4:	59fffa36 	bltu	r11,r7,feb0 <__alt_data_end+0xfc00feb0>
    fec8:	213fff04 	addi	r4,r4,-4
    fecc:	2008d0ba 	srli	r4,r4,2
    fed0:	318000cc 	andi	r6,r6,3
    fed4:	21000044 	addi	r4,r4,1
    fed8:	2109883a 	add	r4,r4,r4
    fedc:	2109883a 	add	r4,r4,r4
    fee0:	1907883a 	add	r3,r3,r4
    fee4:	290b883a 	add	r5,r5,r4
    fee8:	30000626 	beq	r6,zero,ff04 <memcpy+0x11c>
    feec:	198d883a 	add	r6,r3,r6
    fef0:	29c00003 	ldbu	r7,0(r5)
    fef4:	18c00044 	addi	r3,r3,1
    fef8:	29400044 	addi	r5,r5,1
    fefc:	19ffffc5 	stb	r7,-1(r3)
    ff00:	19bffb1e 	bne	r3,r6,fef0 <__alt_data_end+0xfc00fef0>
    ff04:	dfc00217 	ldw	ra,8(sp)
    ff08:	dc400117 	ldw	r17,4(sp)
    ff0c:	dc000017 	ldw	r16,0(sp)
    ff10:	dec00304 	addi	sp,sp,12
    ff14:	f800283a 	ret
    ff18:	2007883a 	mov	r3,r4
    ff1c:	003ff206 	br	fee8 <__alt_data_end+0xfc00fee8>
    ff20:	2007883a 	mov	r3,r4
    ff24:	003ff106 	br	feec <__alt_data_end+0xfc00feec>
    ff28:	200d883a 	mov	r6,r4
    ff2c:	003fee06 	br	fee8 <__alt_data_end+0xfc00fee8>

0000ff30 <memset>:
    ff30:	20c000cc 	andi	r3,r4,3
    ff34:	2005883a 	mov	r2,r4
    ff38:	18004426 	beq	r3,zero,1004c <memset+0x11c>
    ff3c:	31ffffc4 	addi	r7,r6,-1
    ff40:	30004026 	beq	r6,zero,10044 <memset+0x114>
    ff44:	2813883a 	mov	r9,r5
    ff48:	200d883a 	mov	r6,r4
    ff4c:	2007883a 	mov	r3,r4
    ff50:	00000406 	br	ff64 <memset+0x34>
    ff54:	3a3fffc4 	addi	r8,r7,-1
    ff58:	31800044 	addi	r6,r6,1
    ff5c:	38003926 	beq	r7,zero,10044 <memset+0x114>
    ff60:	400f883a 	mov	r7,r8
    ff64:	18c00044 	addi	r3,r3,1
    ff68:	32400005 	stb	r9,0(r6)
    ff6c:	1a0000cc 	andi	r8,r3,3
    ff70:	403ff81e 	bne	r8,zero,ff54 <__alt_data_end+0xfc00ff54>
    ff74:	010000c4 	movi	r4,3
    ff78:	21c02d2e 	bgeu	r4,r7,10030 <memset+0x100>
    ff7c:	29003fcc 	andi	r4,r5,255
    ff80:	200c923a 	slli	r6,r4,8
    ff84:	3108b03a 	or	r4,r6,r4
    ff88:	200c943a 	slli	r6,r4,16
    ff8c:	218cb03a 	or	r6,r4,r6
    ff90:	010003c4 	movi	r4,15
    ff94:	21c0182e 	bgeu	r4,r7,fff8 <memset+0xc8>
    ff98:	3b3ffc04 	addi	r12,r7,-16
    ff9c:	6018d13a 	srli	r12,r12,4
    ffa0:	1a000104 	addi	r8,r3,4
    ffa4:	1ac00204 	addi	r11,r3,8
    ffa8:	6008913a 	slli	r4,r12,4
    ffac:	1a800304 	addi	r10,r3,12
    ffb0:	1813883a 	mov	r9,r3
    ffb4:	21000504 	addi	r4,r4,20
    ffb8:	1909883a 	add	r4,r3,r4
    ffbc:	49800015 	stw	r6,0(r9)
    ffc0:	41800015 	stw	r6,0(r8)
    ffc4:	59800015 	stw	r6,0(r11)
    ffc8:	51800015 	stw	r6,0(r10)
    ffcc:	42000404 	addi	r8,r8,16
    ffd0:	4a400404 	addi	r9,r9,16
    ffd4:	5ac00404 	addi	r11,r11,16
    ffd8:	52800404 	addi	r10,r10,16
    ffdc:	413ff71e 	bne	r8,r4,ffbc <__alt_data_end+0xfc00ffbc>
    ffe0:	63000044 	addi	r12,r12,1
    ffe4:	6018913a 	slli	r12,r12,4
    ffe8:	39c003cc 	andi	r7,r7,15
    ffec:	010000c4 	movi	r4,3
    fff0:	1b07883a 	add	r3,r3,r12
    fff4:	21c00e2e 	bgeu	r4,r7,10030 <memset+0x100>
    fff8:	1813883a 	mov	r9,r3
    fffc:	3811883a 	mov	r8,r7
   10000:	010000c4 	movi	r4,3
   10004:	49800015 	stw	r6,0(r9)
   10008:	423fff04 	addi	r8,r8,-4
   1000c:	4a400104 	addi	r9,r9,4
   10010:	223ffc36 	bltu	r4,r8,10004 <__alt_data_end+0xfc010004>
   10014:	393fff04 	addi	r4,r7,-4
   10018:	2008d0ba 	srli	r4,r4,2
   1001c:	39c000cc 	andi	r7,r7,3
   10020:	21000044 	addi	r4,r4,1
   10024:	2109883a 	add	r4,r4,r4
   10028:	2109883a 	add	r4,r4,r4
   1002c:	1907883a 	add	r3,r3,r4
   10030:	38000526 	beq	r7,zero,10048 <memset+0x118>
   10034:	19cf883a 	add	r7,r3,r7
   10038:	19400005 	stb	r5,0(r3)
   1003c:	18c00044 	addi	r3,r3,1
   10040:	38fffd1e 	bne	r7,r3,10038 <__alt_data_end+0xfc010038>
   10044:	f800283a 	ret
   10048:	f800283a 	ret
   1004c:	2007883a 	mov	r3,r4
   10050:	300f883a 	mov	r7,r6
   10054:	003fc706 	br	ff74 <__alt_data_end+0xfc00ff74>

00010058 <_printf_r>:
   10058:	defffd04 	addi	sp,sp,-12
   1005c:	2805883a 	mov	r2,r5
   10060:	dfc00015 	stw	ra,0(sp)
   10064:	d9800115 	stw	r6,4(sp)
   10068:	d9c00215 	stw	r7,8(sp)
   1006c:	21400217 	ldw	r5,8(r4)
   10070:	d9c00104 	addi	r7,sp,4
   10074:	100d883a 	mov	r6,r2
   10078:	0012a0c0 	call	12a0c <___vfprintf_internal_r>
   1007c:	dfc00017 	ldw	ra,0(sp)
   10080:	dec00304 	addi	sp,sp,12
   10084:	f800283a 	ret

00010088 <printf>:
   10088:	defffc04 	addi	sp,sp,-16
   1008c:	dfc00015 	stw	ra,0(sp)
   10090:	d9400115 	stw	r5,4(sp)
   10094:	d9800215 	stw	r6,8(sp)
   10098:	d9c00315 	stw	r7,12(sp)
   1009c:	008000f4 	movhi	r2,3
   100a0:	10bbbb04 	addi	r2,r2,-4372
   100a4:	10800017 	ldw	r2,0(r2)
   100a8:	200b883a 	mov	r5,r4
   100ac:	d9800104 	addi	r6,sp,4
   100b0:	11000217 	ldw	r4,8(r2)
   100b4:	0014ce80 	call	14ce8 <__vfprintf_internal>
   100b8:	dfc00017 	ldw	ra,0(sp)
   100bc:	dec00404 	addi	sp,sp,16
   100c0:	f800283a 	ret

000100c4 <_putchar_r>:
   100c4:	21800217 	ldw	r6,8(r4)
   100c8:	0018e301 	jmpi	18e30 <_putc_r>

000100cc <putchar>:
   100cc:	008000f4 	movhi	r2,3
   100d0:	10bbbb04 	addi	r2,r2,-4372
   100d4:	200b883a 	mov	r5,r4
   100d8:	11000017 	ldw	r4,0(r2)
   100dc:	21800217 	ldw	r6,8(r4)
   100e0:	0018e301 	jmpi	18e30 <_putc_r>

000100e4 <_puts_r>:
   100e4:	defff604 	addi	sp,sp,-40
   100e8:	dc000715 	stw	r16,28(sp)
   100ec:	2021883a 	mov	r16,r4
   100f0:	2809883a 	mov	r4,r5
   100f4:	dc400815 	stw	r17,32(sp)
   100f8:	dfc00915 	stw	ra,36(sp)
   100fc:	2823883a 	mov	r17,r5
   10100:	00106b00 	call	106b0 <strlen>
   10104:	10c00044 	addi	r3,r2,1
   10108:	d8800115 	stw	r2,4(sp)
   1010c:	008000f4 	movhi	r2,3
   10110:	10aeb504 	addi	r2,r2,-17708
   10114:	d8800215 	stw	r2,8(sp)
   10118:	00800044 	movi	r2,1
   1011c:	d8800315 	stw	r2,12(sp)
   10120:	00800084 	movi	r2,2
   10124:	dc400015 	stw	r17,0(sp)
   10128:	d8c00615 	stw	r3,24(sp)
   1012c:	dec00415 	stw	sp,16(sp)
   10130:	d8800515 	stw	r2,20(sp)
   10134:	80000226 	beq	r16,zero,10140 <_puts_r+0x5c>
   10138:	80800e17 	ldw	r2,56(r16)
   1013c:	10001426 	beq	r2,zero,10190 <_puts_r+0xac>
   10140:	81400217 	ldw	r5,8(r16)
   10144:	2880030b 	ldhu	r2,12(r5)
   10148:	10c8000c 	andi	r3,r2,8192
   1014c:	1800061e 	bne	r3,zero,10168 <_puts_r+0x84>
   10150:	29001917 	ldw	r4,100(r5)
   10154:	00f7ffc4 	movi	r3,-8193
   10158:	10880014 	ori	r2,r2,8192
   1015c:	20c6703a 	and	r3,r4,r3
   10160:	2880030d 	sth	r2,12(r5)
   10164:	28c01915 	stw	r3,100(r5)
   10168:	d9800404 	addi	r6,sp,16
   1016c:	8009883a 	mov	r4,r16
   10170:	00172500 	call	17250 <__sfvwrite_r>
   10174:	1000091e 	bne	r2,zero,1019c <_puts_r+0xb8>
   10178:	00800284 	movi	r2,10
   1017c:	dfc00917 	ldw	ra,36(sp)
   10180:	dc400817 	ldw	r17,32(sp)
   10184:	dc000717 	ldw	r16,28(sp)
   10188:	dec00a04 	addi	sp,sp,40
   1018c:	f800283a 	ret
   10190:	8009883a 	mov	r4,r16
   10194:	0016dcc0 	call	16dcc <__sinit>
   10198:	003fe906 	br	10140 <__alt_data_end+0xfc010140>
   1019c:	00bfffc4 	movi	r2,-1
   101a0:	003ff606 	br	1017c <__alt_data_end+0xfc01017c>

000101a4 <puts>:
   101a4:	008000f4 	movhi	r2,3
   101a8:	10bbbb04 	addi	r2,r2,-4372
   101ac:	200b883a 	mov	r5,r4
   101b0:	11000017 	ldw	r4,0(r2)
   101b4:	00100e41 	jmpi	100e4 <_puts_r>

000101b8 <_sbrk_r>:
   101b8:	defffd04 	addi	sp,sp,-12
   101bc:	dc000015 	stw	r16,0(sp)
   101c0:	040000f4 	movhi	r16,3
   101c4:	dc400115 	stw	r17,4(sp)
   101c8:	84085604 	addi	r16,r16,8536
   101cc:	2023883a 	mov	r17,r4
   101d0:	2809883a 	mov	r4,r5
   101d4:	dfc00215 	stw	ra,8(sp)
   101d8:	80000015 	stw	zero,0(r16)
   101dc:	00209c80 	call	209c8 <sbrk>
   101e0:	00ffffc4 	movi	r3,-1
   101e4:	10c00526 	beq	r2,r3,101fc <_sbrk_r+0x44>
   101e8:	dfc00217 	ldw	ra,8(sp)
   101ec:	dc400117 	ldw	r17,4(sp)
   101f0:	dc000017 	ldw	r16,0(sp)
   101f4:	dec00304 	addi	sp,sp,12
   101f8:	f800283a 	ret
   101fc:	80c00017 	ldw	r3,0(r16)
   10200:	183ff926 	beq	r3,zero,101e8 <__alt_data_end+0xfc0101e8>
   10204:	88c00015 	stw	r3,0(r17)
   10208:	003ff706 	br	101e8 <__alt_data_end+0xfc0101e8>

0001020c <_init_signal_r>:
   1020c:	2080b717 	ldw	r2,732(r4)
   10210:	10000226 	beq	r2,zero,1021c <_init_signal_r+0x10>
   10214:	0005883a 	mov	r2,zero
   10218:	f800283a 	ret
   1021c:	defffe04 	addi	sp,sp,-8
   10220:	01402004 	movi	r5,128
   10224:	dc000015 	stw	r16,0(sp)
   10228:	dfc00115 	stw	ra,4(sp)
   1022c:	2021883a 	mov	r16,r4
   10230:	000f5dc0 	call	f5dc <_malloc_r>
   10234:	8080b715 	stw	r2,732(r16)
   10238:	10000d26 	beq	r2,zero,10270 <_init_signal_r+0x64>
   1023c:	0007883a 	mov	r3,zero
   10240:	01002004 	movi	r4,128
   10244:	00000106 	br	1024c <_init_signal_r+0x40>
   10248:	8080b717 	ldw	r2,732(r16)
   1024c:	10c5883a 	add	r2,r2,r3
   10250:	10000015 	stw	zero,0(r2)
   10254:	18c00104 	addi	r3,r3,4
   10258:	193ffb1e 	bne	r3,r4,10248 <__alt_data_end+0xfc010248>
   1025c:	0005883a 	mov	r2,zero
   10260:	dfc00117 	ldw	ra,4(sp)
   10264:	dc000017 	ldw	r16,0(sp)
   10268:	dec00204 	addi	sp,sp,8
   1026c:	f800283a 	ret
   10270:	00bfffc4 	movi	r2,-1
   10274:	003ffa06 	br	10260 <__alt_data_end+0xfc010260>

00010278 <_signal_r>:
   10278:	00c007c4 	movi	r3,31
   1027c:	19401536 	bltu	r3,r5,102d4 <_signal_r+0x5c>
   10280:	2080b717 	ldw	r2,732(r4)
   10284:	defffc04 	addi	sp,sp,-16
   10288:	dc800215 	stw	r18,8(sp)
   1028c:	dc400115 	stw	r17,4(sp)
   10290:	dc000015 	stw	r16,0(sp)
   10294:	dfc00315 	stw	ra,12(sp)
   10298:	3023883a 	mov	r17,r6
   1029c:	2021883a 	mov	r16,r4
   102a0:	2825883a 	mov	r18,r5
   102a4:	10000f26 	beq	r2,zero,102e4 <_signal_r+0x6c>
   102a8:	948b883a 	add	r5,r18,r18
   102ac:	294b883a 	add	r5,r5,r5
   102b0:	114b883a 	add	r5,r2,r5
   102b4:	28800017 	ldw	r2,0(r5)
   102b8:	2c400015 	stw	r17,0(r5)
   102bc:	dfc00317 	ldw	ra,12(sp)
   102c0:	dc800217 	ldw	r18,8(sp)
   102c4:	dc400117 	ldw	r17,4(sp)
   102c8:	dc000017 	ldw	r16,0(sp)
   102cc:	dec00404 	addi	sp,sp,16
   102d0:	f800283a 	ret
   102d4:	00c00584 	movi	r3,22
   102d8:	20c00015 	stw	r3,0(r4)
   102dc:	00bfffc4 	movi	r2,-1
   102e0:	f800283a 	ret
   102e4:	001020c0 	call	1020c <_init_signal_r>
   102e8:	1000021e 	bne	r2,zero,102f4 <_signal_r+0x7c>
   102ec:	8080b717 	ldw	r2,732(r16)
   102f0:	003fed06 	br	102a8 <__alt_data_end+0xfc0102a8>
   102f4:	00bfffc4 	movi	r2,-1
   102f8:	003ff006 	br	102bc <__alt_data_end+0xfc0102bc>

000102fc <_raise_r>:
   102fc:	008007c4 	movi	r2,31
   10300:	11402936 	bltu	r2,r5,103a8 <_raise_r+0xac>
   10304:	20c0b717 	ldw	r3,732(r4)
   10308:	defffd04 	addi	sp,sp,-12
   1030c:	dc400115 	stw	r17,4(sp)
   10310:	dc000015 	stw	r16,0(sp)
   10314:	dfc00215 	stw	ra,8(sp)
   10318:	2021883a 	mov	r16,r4
   1031c:	2823883a 	mov	r17,r5
   10320:	18001726 	beq	r3,zero,10380 <_raise_r+0x84>
   10324:	2945883a 	add	r2,r5,r5
   10328:	1085883a 	add	r2,r2,r2
   1032c:	1887883a 	add	r3,r3,r2
   10330:	19800017 	ldw	r6,0(r3)
   10334:	30001226 	beq	r6,zero,10380 <_raise_r+0x84>
   10338:	00800044 	movi	r2,1
   1033c:	30800e26 	beq	r6,r2,10378 <_raise_r+0x7c>
   10340:	013fffc4 	movi	r4,-1
   10344:	31000926 	beq	r6,r4,1036c <_raise_r+0x70>
   10348:	18000015 	stw	zero,0(r3)
   1034c:	2809883a 	mov	r4,r5
   10350:	303ee83a 	callr	r6
   10354:	0005883a 	mov	r2,zero
   10358:	dfc00217 	ldw	ra,8(sp)
   1035c:	dc400117 	ldw	r17,4(sp)
   10360:	dc000017 	ldw	r16,0(sp)
   10364:	dec00304 	addi	sp,sp,12
   10368:	f800283a 	ret
   1036c:	00c00584 	movi	r3,22
   10370:	80c00015 	stw	r3,0(r16)
   10374:	003ff806 	br	10358 <__alt_data_end+0xfc010358>
   10378:	0005883a 	mov	r2,zero
   1037c:	003ff606 	br	10358 <__alt_data_end+0xfc010358>
   10380:	8009883a 	mov	r4,r16
   10384:	001050c0 	call	1050c <_getpid_r>
   10388:	880d883a 	mov	r6,r17
   1038c:	100b883a 	mov	r5,r2
   10390:	8009883a 	mov	r4,r16
   10394:	dfc00217 	ldw	ra,8(sp)
   10398:	dc400117 	ldw	r17,4(sp)
   1039c:	dc000017 	ldw	r16,0(sp)
   103a0:	dec00304 	addi	sp,sp,12
   103a4:	00104b01 	jmpi	104b0 <_kill_r>
   103a8:	00800584 	movi	r2,22
   103ac:	20800015 	stw	r2,0(r4)
   103b0:	00bfffc4 	movi	r2,-1
   103b4:	f800283a 	ret

000103b8 <__sigtramp_r>:
   103b8:	008007c4 	movi	r2,31
   103bc:	11402436 	bltu	r2,r5,10450 <__sigtramp_r+0x98>
   103c0:	20c0b717 	ldw	r3,732(r4)
   103c4:	defffd04 	addi	sp,sp,-12
   103c8:	dc400115 	stw	r17,4(sp)
   103cc:	dc000015 	stw	r16,0(sp)
   103d0:	dfc00215 	stw	ra,8(sp)
   103d4:	2021883a 	mov	r16,r4
   103d8:	2823883a 	mov	r17,r5
   103dc:	18001826 	beq	r3,zero,10440 <__sigtramp_r+0x88>
   103e0:	8c45883a 	add	r2,r17,r17
   103e4:	1085883a 	add	r2,r2,r2
   103e8:	1885883a 	add	r2,r3,r2
   103ec:	10c00017 	ldw	r3,0(r2)
   103f0:	18001126 	beq	r3,zero,10438 <__sigtramp_r+0x80>
   103f4:	013fffc4 	movi	r4,-1
   103f8:	19000d26 	beq	r3,r4,10430 <__sigtramp_r+0x78>
   103fc:	01000044 	movi	r4,1
   10400:	19000926 	beq	r3,r4,10428 <__sigtramp_r+0x70>
   10404:	10000015 	stw	zero,0(r2)
   10408:	8809883a 	mov	r4,r17
   1040c:	183ee83a 	callr	r3
   10410:	0005883a 	mov	r2,zero
   10414:	dfc00217 	ldw	ra,8(sp)
   10418:	dc400117 	ldw	r17,4(sp)
   1041c:	dc000017 	ldw	r16,0(sp)
   10420:	dec00304 	addi	sp,sp,12
   10424:	f800283a 	ret
   10428:	008000c4 	movi	r2,3
   1042c:	003ff906 	br	10414 <__alt_data_end+0xfc010414>
   10430:	00800084 	movi	r2,2
   10434:	003ff706 	br	10414 <__alt_data_end+0xfc010414>
   10438:	00800044 	movi	r2,1
   1043c:	003ff506 	br	10414 <__alt_data_end+0xfc010414>
   10440:	001020c0 	call	1020c <_init_signal_r>
   10444:	1000041e 	bne	r2,zero,10458 <__sigtramp_r+0xa0>
   10448:	80c0b717 	ldw	r3,732(r16)
   1044c:	003fe406 	br	103e0 <__alt_data_end+0xfc0103e0>
   10450:	00bfffc4 	movi	r2,-1
   10454:	f800283a 	ret
   10458:	00bfffc4 	movi	r2,-1
   1045c:	003fed06 	br	10414 <__alt_data_end+0xfc010414>

00010460 <raise>:
   10460:	008000f4 	movhi	r2,3
   10464:	10bbbb04 	addi	r2,r2,-4372
   10468:	200b883a 	mov	r5,r4
   1046c:	11000017 	ldw	r4,0(r2)
   10470:	00102fc1 	jmpi	102fc <_raise_r>

00010474 <signal>:
   10474:	008000f4 	movhi	r2,3
   10478:	10bbbb04 	addi	r2,r2,-4372
   1047c:	280d883a 	mov	r6,r5
   10480:	200b883a 	mov	r5,r4
   10484:	11000017 	ldw	r4,0(r2)
   10488:	00102781 	jmpi	10278 <_signal_r>

0001048c <_init_signal>:
   1048c:	008000f4 	movhi	r2,3
   10490:	10bbbb04 	addi	r2,r2,-4372
   10494:	11000017 	ldw	r4,0(r2)
   10498:	001020c1 	jmpi	1020c <_init_signal_r>

0001049c <__sigtramp>:
   1049c:	008000f4 	movhi	r2,3
   104a0:	10bbbb04 	addi	r2,r2,-4372
   104a4:	200b883a 	mov	r5,r4
   104a8:	11000017 	ldw	r4,0(r2)
   104ac:	00103b81 	jmpi	103b8 <__sigtramp_r>

000104b0 <_kill_r>:
   104b0:	defffd04 	addi	sp,sp,-12
   104b4:	2805883a 	mov	r2,r5
   104b8:	dc000015 	stw	r16,0(sp)
   104bc:	040000f4 	movhi	r16,3
   104c0:	dc400115 	stw	r17,4(sp)
   104c4:	84085604 	addi	r16,r16,8536
   104c8:	2023883a 	mov	r17,r4
   104cc:	300b883a 	mov	r5,r6
   104d0:	1009883a 	mov	r4,r2
   104d4:	dfc00215 	stw	ra,8(sp)
   104d8:	80000015 	stw	zero,0(r16)
   104dc:	002040c0 	call	2040c <kill>
   104e0:	00ffffc4 	movi	r3,-1
   104e4:	10c00526 	beq	r2,r3,104fc <_kill_r+0x4c>
   104e8:	dfc00217 	ldw	ra,8(sp)
   104ec:	dc400117 	ldw	r17,4(sp)
   104f0:	dc000017 	ldw	r16,0(sp)
   104f4:	dec00304 	addi	sp,sp,12
   104f8:	f800283a 	ret
   104fc:	80c00017 	ldw	r3,0(r16)
   10500:	183ff926 	beq	r3,zero,104e8 <__alt_data_end+0xfc0104e8>
   10504:	88c00015 	stw	r3,0(r17)
   10508:	003ff706 	br	104e8 <__alt_data_end+0xfc0104e8>

0001050c <_getpid_r>:
   1050c:	00202c81 	jmpi	202c8 <getpid>

00010510 <_sprintf_r>:
   10510:	deffe404 	addi	sp,sp,-112
   10514:	2807883a 	mov	r3,r5
   10518:	dfc01a15 	stw	ra,104(sp)
   1051c:	d9c01b15 	stw	r7,108(sp)
   10520:	00a00034 	movhi	r2,32768
   10524:	10bfffc4 	addi	r2,r2,-1
   10528:	02008204 	movi	r8,520
   1052c:	d8800215 	stw	r2,8(sp)
   10530:	d8800515 	stw	r2,20(sp)
   10534:	d9c01b04 	addi	r7,sp,108
   10538:	d80b883a 	mov	r5,sp
   1053c:	00bfffc4 	movi	r2,-1
   10540:	d8c00015 	stw	r3,0(sp)
   10544:	d8c00415 	stw	r3,16(sp)
   10548:	da00030d 	sth	r8,12(sp)
   1054c:	d880038d 	sth	r2,14(sp)
   10550:	00107480 	call	10748 <___svfprintf_internal_r>
   10554:	d8c00017 	ldw	r3,0(sp)
   10558:	18000005 	stb	zero,0(r3)
   1055c:	dfc01a17 	ldw	ra,104(sp)
   10560:	dec01c04 	addi	sp,sp,112
   10564:	f800283a 	ret

00010568 <sprintf>:
   10568:	deffe304 	addi	sp,sp,-116
   1056c:	2007883a 	mov	r3,r4
   10570:	dfc01a15 	stw	ra,104(sp)
   10574:	d9801b15 	stw	r6,108(sp)
   10578:	d9c01c15 	stw	r7,112(sp)
   1057c:	010000f4 	movhi	r4,3
   10580:	213bbb04 	addi	r4,r4,-4372
   10584:	21000017 	ldw	r4,0(r4)
   10588:	00a00034 	movhi	r2,32768
   1058c:	10bfffc4 	addi	r2,r2,-1
   10590:	280d883a 	mov	r6,r5
   10594:	02008204 	movi	r8,520
   10598:	d8800215 	stw	r2,8(sp)
   1059c:	d8800515 	stw	r2,20(sp)
   105a0:	d9c01b04 	addi	r7,sp,108
   105a4:	d80b883a 	mov	r5,sp
   105a8:	00bfffc4 	movi	r2,-1
   105ac:	d8c00015 	stw	r3,0(sp)
   105b0:	d8c00415 	stw	r3,16(sp)
   105b4:	da00030d 	sth	r8,12(sp)
   105b8:	d880038d 	sth	r2,14(sp)
   105bc:	00107480 	call	10748 <___svfprintf_internal_r>
   105c0:	d8c00017 	ldw	r3,0(sp)
   105c4:	18000005 	stb	zero,0(r3)
   105c8:	dfc01a17 	ldw	ra,104(sp)
   105cc:	dec01d04 	addi	sp,sp,116
   105d0:	f800283a 	ret

000105d4 <strcmp>:
   105d4:	2144b03a 	or	r2,r4,r5
   105d8:	108000cc 	andi	r2,r2,3
   105dc:	1000171e 	bne	r2,zero,1063c <strcmp+0x68>
   105e0:	20800017 	ldw	r2,0(r4)
   105e4:	28c00017 	ldw	r3,0(r5)
   105e8:	10c0141e 	bne	r2,r3,1063c <strcmp+0x68>
   105ec:	027fbff4 	movhi	r9,65279
   105f0:	4a7fbfc4 	addi	r9,r9,-257
   105f4:	0086303a 	nor	r3,zero,r2
   105f8:	02202074 	movhi	r8,32897
   105fc:	1245883a 	add	r2,r2,r9
   10600:	42202004 	addi	r8,r8,-32640
   10604:	10c4703a 	and	r2,r2,r3
   10608:	1204703a 	and	r2,r2,r8
   1060c:	10000226 	beq	r2,zero,10618 <strcmp+0x44>
   10610:	00002306 	br	106a0 <strcmp+0xcc>
   10614:	1000221e 	bne	r2,zero,106a0 <strcmp+0xcc>
   10618:	21000104 	addi	r4,r4,4
   1061c:	20c00017 	ldw	r3,0(r4)
   10620:	29400104 	addi	r5,r5,4
   10624:	29800017 	ldw	r6,0(r5)
   10628:	1a4f883a 	add	r7,r3,r9
   1062c:	00c4303a 	nor	r2,zero,r3
   10630:	3884703a 	and	r2,r7,r2
   10634:	1204703a 	and	r2,r2,r8
   10638:	19bff626 	beq	r3,r6,10614 <__alt_data_end+0xfc010614>
   1063c:	20800003 	ldbu	r2,0(r4)
   10640:	10c03fcc 	andi	r3,r2,255
   10644:	18c0201c 	xori	r3,r3,128
   10648:	18ffe004 	addi	r3,r3,-128
   1064c:	18000c26 	beq	r3,zero,10680 <strcmp+0xac>
   10650:	29800007 	ldb	r6,0(r5)
   10654:	19800326 	beq	r3,r6,10664 <strcmp+0x90>
   10658:	00001306 	br	106a8 <strcmp+0xd4>
   1065c:	29800007 	ldb	r6,0(r5)
   10660:	11800b1e 	bne	r2,r6,10690 <strcmp+0xbc>
   10664:	21000044 	addi	r4,r4,1
   10668:	20c00003 	ldbu	r3,0(r4)
   1066c:	29400044 	addi	r5,r5,1
   10670:	18803fcc 	andi	r2,r3,255
   10674:	1080201c 	xori	r2,r2,128
   10678:	10bfe004 	addi	r2,r2,-128
   1067c:	103ff71e 	bne	r2,zero,1065c <__alt_data_end+0xfc01065c>
   10680:	0007883a 	mov	r3,zero
   10684:	28800003 	ldbu	r2,0(r5)
   10688:	1885c83a 	sub	r2,r3,r2
   1068c:	f800283a 	ret
   10690:	28800003 	ldbu	r2,0(r5)
   10694:	18c03fcc 	andi	r3,r3,255
   10698:	1885c83a 	sub	r2,r3,r2
   1069c:	f800283a 	ret
   106a0:	0005883a 	mov	r2,zero
   106a4:	f800283a 	ret
   106a8:	10c03fcc 	andi	r3,r2,255
   106ac:	003ff506 	br	10684 <__alt_data_end+0xfc010684>

000106b0 <strlen>:
   106b0:	208000cc 	andi	r2,r4,3
   106b4:	10002026 	beq	r2,zero,10738 <strlen+0x88>
   106b8:	20800007 	ldb	r2,0(r4)
   106bc:	10002026 	beq	r2,zero,10740 <strlen+0x90>
   106c0:	2005883a 	mov	r2,r4
   106c4:	00000206 	br	106d0 <strlen+0x20>
   106c8:	10c00007 	ldb	r3,0(r2)
   106cc:	18001826 	beq	r3,zero,10730 <strlen+0x80>
   106d0:	10800044 	addi	r2,r2,1
   106d4:	10c000cc 	andi	r3,r2,3
   106d8:	183ffb1e 	bne	r3,zero,106c8 <__alt_data_end+0xfc0106c8>
   106dc:	10c00017 	ldw	r3,0(r2)
   106e0:	01ffbff4 	movhi	r7,65279
   106e4:	39ffbfc4 	addi	r7,r7,-257
   106e8:	00ca303a 	nor	r5,zero,r3
   106ec:	01a02074 	movhi	r6,32897
   106f0:	19c7883a 	add	r3,r3,r7
   106f4:	31a02004 	addi	r6,r6,-32640
   106f8:	1946703a 	and	r3,r3,r5
   106fc:	1986703a 	and	r3,r3,r6
   10700:	1800091e 	bne	r3,zero,10728 <strlen+0x78>
   10704:	10800104 	addi	r2,r2,4
   10708:	10c00017 	ldw	r3,0(r2)
   1070c:	19cb883a 	add	r5,r3,r7
   10710:	00c6303a 	nor	r3,zero,r3
   10714:	28c6703a 	and	r3,r5,r3
   10718:	1986703a 	and	r3,r3,r6
   1071c:	183ff926 	beq	r3,zero,10704 <__alt_data_end+0xfc010704>
   10720:	00000106 	br	10728 <strlen+0x78>
   10724:	10800044 	addi	r2,r2,1
   10728:	10c00007 	ldb	r3,0(r2)
   1072c:	183ffd1e 	bne	r3,zero,10724 <__alt_data_end+0xfc010724>
   10730:	1105c83a 	sub	r2,r2,r4
   10734:	f800283a 	ret
   10738:	2005883a 	mov	r2,r4
   1073c:	003fe706 	br	106dc <__alt_data_end+0xfc0106dc>
   10740:	0005883a 	mov	r2,zero
   10744:	f800283a 	ret

00010748 <___svfprintf_internal_r>:
   10748:	deffb704 	addi	sp,sp,-292
   1074c:	dfc04815 	stw	ra,288(sp)
   10750:	ddc04615 	stw	r23,280(sp)
   10754:	d9402d15 	stw	r5,180(sp)
   10758:	d9003915 	stw	r4,228(sp)
   1075c:	302f883a 	mov	r23,r6
   10760:	d9c02e15 	stw	r7,184(sp)
   10764:	df004715 	stw	fp,284(sp)
   10768:	dd804515 	stw	r22,276(sp)
   1076c:	dd404415 	stw	r21,272(sp)
   10770:	dd004315 	stw	r20,268(sp)
   10774:	dcc04215 	stw	r19,264(sp)
   10778:	dc804115 	stw	r18,260(sp)
   1077c:	dc404015 	stw	r17,256(sp)
   10780:	dc003f15 	stw	r16,252(sp)
   10784:	001794c0 	call	1794c <_localeconv_r>
   10788:	10800017 	ldw	r2,0(r2)
   1078c:	1009883a 	mov	r4,r2
   10790:	d8803415 	stw	r2,208(sp)
   10794:	00106b00 	call	106b0 <strlen>
   10798:	d8c02d17 	ldw	r3,180(sp)
   1079c:	d8803815 	stw	r2,224(sp)
   107a0:	1880030b 	ldhu	r2,12(r3)
   107a4:	1080200c 	andi	r2,r2,128
   107a8:	10000226 	beq	r2,zero,107b4 <___svfprintf_internal_r+0x6c>
   107ac:	18800417 	ldw	r2,16(r3)
   107b0:	1006b126 	beq	r2,zero,12278 <___svfprintf_internal_r+0x1b30>
   107b4:	dcc03917 	ldw	r19,228(sp)
   107b8:	d8c00404 	addi	r3,sp,16
   107bc:	054000f4 	movhi	r21,3
   107c0:	d9001e04 	addi	r4,sp,120
   107c4:	ad6ec684 	addi	r21,r21,-17638
   107c8:	d8c01e15 	stw	r3,120(sp)
   107cc:	d8002015 	stw	zero,128(sp)
   107d0:	d8001f15 	stw	zero,124(sp)
   107d4:	d8003315 	stw	zero,204(sp)
   107d8:	d8003615 	stw	zero,216(sp)
   107dc:	d8003715 	stw	zero,220(sp)
   107e0:	1811883a 	mov	r8,r3
   107e4:	d8003a15 	stw	zero,232(sp)
   107e8:	d8003b15 	stw	zero,236(sp)
   107ec:	d8002f15 	stw	zero,188(sp)
   107f0:	d9002815 	stw	r4,160(sp)
   107f4:	b8800007 	ldb	r2,0(r23)
   107f8:	10027726 	beq	r2,zero,111d8 <___svfprintf_internal_r+0xa90>
   107fc:	00c00944 	movi	r3,37
   10800:	b823883a 	mov	r17,r23
   10804:	10c0021e 	bne	r2,r3,10810 <___svfprintf_internal_r+0xc8>
   10808:	00001406 	br	1085c <___svfprintf_internal_r+0x114>
   1080c:	10c00326 	beq	r2,r3,1081c <___svfprintf_internal_r+0xd4>
   10810:	8c400044 	addi	r17,r17,1
   10814:	88800007 	ldb	r2,0(r17)
   10818:	103ffc1e 	bne	r2,zero,1080c <__alt_data_end+0xfc01080c>
   1081c:	8de1c83a 	sub	r16,r17,r23
   10820:	80000e26 	beq	r16,zero,1085c <___svfprintf_internal_r+0x114>
   10824:	d8c02017 	ldw	r3,128(sp)
   10828:	d8801f17 	ldw	r2,124(sp)
   1082c:	45c00015 	stw	r23,0(r8)
   10830:	1c07883a 	add	r3,r3,r16
   10834:	10800044 	addi	r2,r2,1
   10838:	d8c02015 	stw	r3,128(sp)
   1083c:	44000115 	stw	r16,4(r8)
   10840:	d8801f15 	stw	r2,124(sp)
   10844:	00c001c4 	movi	r3,7
   10848:	18809916 	blt	r3,r2,10ab0 <___svfprintf_internal_r+0x368>
   1084c:	42000204 	addi	r8,r8,8
   10850:	d9402f17 	ldw	r5,188(sp)
   10854:	2c0b883a 	add	r5,r5,r16
   10858:	d9402f15 	stw	r5,188(sp)
   1085c:	88800007 	ldb	r2,0(r17)
   10860:	10009a26 	beq	r2,zero,10acc <___svfprintf_internal_r+0x384>
   10864:	8dc00044 	addi	r23,r17,1
   10868:	8c400047 	ldb	r17,1(r17)
   1086c:	0021883a 	mov	r16,zero
   10870:	00bfffc4 	movi	r2,-1
   10874:	0025883a 	mov	r18,zero
   10878:	dc002905 	stb	r16,164(sp)
   1087c:	d8002785 	stb	zero,158(sp)
   10880:	d8002b05 	stb	zero,172(sp)
   10884:	d8802a15 	stw	r2,168(sp)
   10888:	d8003115 	stw	zero,196(sp)
   1088c:	05001604 	movi	r20,88
   10890:	05800244 	movi	r22,9
   10894:	4039883a 	mov	fp,r8
   10898:	9021883a 	mov	r16,r18
   1089c:	bdc00044 	addi	r23,r23,1
   108a0:	88bff804 	addi	r2,r17,-32
   108a4:	a0831e36 	bltu	r20,r2,11520 <___svfprintf_internal_r+0xdd8>
   108a8:	100490ba 	slli	r2,r2,2
   108ac:	00c00074 	movhi	r3,1
   108b0:	18c23004 	addi	r3,r3,2240
   108b4:	10c5883a 	add	r2,r2,r3
   108b8:	10800017 	ldw	r2,0(r2)
   108bc:	1000683a 	jmp	r2
   108c0:	00011468 	cmpgeui	zero,zero,1105
   108c4:	00011520 	cmpeqi	zero,zero,1108
   108c8:	00011520 	cmpeqi	zero,zero,1108
   108cc:	0001145c 	xori	zero,zero,1105
   108d0:	00011520 	cmpeqi	zero,zero,1108
   108d4:	00011520 	cmpeqi	zero,zero,1108
   108d8:	00011520 	cmpeqi	zero,zero,1108
   108dc:	00011520 	cmpeqi	zero,zero,1108
   108e0:	00011520 	cmpeqi	zero,zero,1108
   108e4:	00011520 	cmpeqi	zero,zero,1108
   108e8:	00010b28 	cmpgeui	zero,zero,1068
   108ec:	0001136c 	andhi	zero,zero,1101
   108f0:	00011520 	cmpeqi	zero,zero,1108
   108f4:	00010a34 	movhi	zero,1064
   108f8:	00010b4c 	andi	zero,zero,1069
   108fc:	00011520 	cmpeqi	zero,zero,1108
   10900:	00010bd8 	cmpnei	zero,zero,1071
   10904:	00010b9c 	xori	zero,zero,1070
   10908:	00010b9c 	xori	zero,zero,1070
   1090c:	00010b9c 	xori	zero,zero,1070
   10910:	00010b9c 	xori	zero,zero,1070
   10914:	00010b9c 	xori	zero,zero,1070
   10918:	00010b9c 	xori	zero,zero,1070
   1091c:	00010b9c 	xori	zero,zero,1070
   10920:	00010b9c 	xori	zero,zero,1070
   10924:	00010b9c 	xori	zero,zero,1070
   10928:	00011520 	cmpeqi	zero,zero,1108
   1092c:	00011520 	cmpeqi	zero,zero,1108
   10930:	00011520 	cmpeqi	zero,zero,1108
   10934:	00011520 	cmpeqi	zero,zero,1108
   10938:	00011520 	cmpeqi	zero,zero,1108
   1093c:	00011520 	cmpeqi	zero,zero,1108
   10940:	00011520 	cmpeqi	zero,zero,1108
   10944:	00011520 	cmpeqi	zero,zero,1108
   10948:	00011520 	cmpeqi	zero,zero,1108
   1094c:	00011520 	cmpeqi	zero,zero,1108
   10950:	00010c9c 	xori	zero,zero,1074
   10954:	00010be4 	muli	zero,zero,1071
   10958:	00011520 	cmpeqi	zero,zero,1108
   1095c:	00010be4 	muli	zero,zero,1071
   10960:	00011520 	cmpeqi	zero,zero,1108
   10964:	00011520 	cmpeqi	zero,zero,1108
   10968:	00011520 	cmpeqi	zero,zero,1108
   1096c:	00011520 	cmpeqi	zero,zero,1108
   10970:	00010c90 	cmplti	zero,zero,1074
   10974:	00011520 	cmpeqi	zero,zero,1108
   10978:	00011520 	cmpeqi	zero,zero,1108
   1097c:	00010d64 	muli	zero,zero,1077
   10980:	00011520 	cmpeqi	zero,zero,1108
   10984:	00011520 	cmpeqi	zero,zero,1108
   10988:	00011520 	cmpeqi	zero,zero,1108
   1098c:	00011520 	cmpeqi	zero,zero,1108
   10990:	00011520 	cmpeqi	zero,zero,1108
   10994:	000111e0 	cmpeqi	zero,zero,1095
   10998:	00011520 	cmpeqi	zero,zero,1108
   1099c:	00011520 	cmpeqi	zero,zero,1108
   109a0:	0001124c 	andi	zero,zero,1097
   109a4:	00011520 	cmpeqi	zero,zero,1108
   109a8:	00011520 	cmpeqi	zero,zero,1108
   109ac:	00011520 	cmpeqi	zero,zero,1108
   109b0:	00011520 	cmpeqi	zero,zero,1108
   109b4:	00011520 	cmpeqi	zero,zero,1108
   109b8:	00011520 	cmpeqi	zero,zero,1108
   109bc:	00011520 	cmpeqi	zero,zero,1108
   109c0:	00011520 	cmpeqi	zero,zero,1108
   109c4:	00011520 	cmpeqi	zero,zero,1108
   109c8:	00011520 	cmpeqi	zero,zero,1108
   109cc:	00011308 	cmpgei	zero,zero,1100
   109d0:	00011488 	cmpgei	zero,zero,1106
   109d4:	00010be4 	muli	zero,zero,1071
   109d8:	00010be4 	muli	zero,zero,1071
   109dc:	00010be4 	muli	zero,zero,1071
   109e0:	000114fc 	xorhi	zero,zero,1107
   109e4:	00011488 	cmpgei	zero,zero,1106
   109e8:	00011520 	cmpeqi	zero,zero,1108
   109ec:	00011520 	cmpeqi	zero,zero,1108
   109f0:	000114a8 	cmpgeui	zero,zero,1106
   109f4:	00011520 	cmpeqi	zero,zero,1108
   109f8:	000114bc 	xorhi	zero,zero,1106
   109fc:	0001134c 	andi	zero,zero,1101
   10a00:	00010a40 	call	10a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x110>
   10a04:	00011384 	movi	zero,1102
   10a08:	00011520 	cmpeqi	zero,zero,1108
   10a0c:	00011390 	cmplti	zero,zero,1102
   10a10:	00011520 	cmpeqi	zero,zero,1108
   10a14:	000113f4 	movhi	zero,1103
   10a18:	00011520 	cmpeqi	zero,zero,1108
   10a1c:	00011520 	cmpeqi	zero,zero,1108
   10a20:	00011414 	movui	zero,1104
   10a24:	d8c03117 	ldw	r3,196(sp)
   10a28:	d8802e15 	stw	r2,184(sp)
   10a2c:	00c7c83a 	sub	r3,zero,r3
   10a30:	d8c03115 	stw	r3,196(sp)
   10a34:	84000114 	ori	r16,r16,4
   10a38:	bc400007 	ldb	r17,0(r23)
   10a3c:	003f9706 	br	1089c <__alt_data_end+0xfc01089c>
   10a40:	00800c04 	movi	r2,48
   10a44:	d8802705 	stb	r2,156(sp)
   10a48:	00801e04 	movi	r2,120
   10a4c:	d8802745 	stb	r2,157(sp)
   10a50:	d9002a17 	ldw	r4,168(sp)
   10a54:	d8802e17 	ldw	r2,184(sp)
   10a58:	d8002785 	stb	zero,158(sp)
   10a5c:	e011883a 	mov	r8,fp
   10a60:	10c00104 	addi	r3,r2,4
   10a64:	15000017 	ldw	r20,0(r2)
   10a68:	002d883a 	mov	r22,zero
   10a6c:	80800094 	ori	r2,r16,2
   10a70:	2002b616 	blt	r4,zero,1154c <___svfprintf_internal_r+0xe04>
   10a74:	00bfdfc4 	movi	r2,-129
   10a78:	80a4703a 	and	r18,r16,r2
   10a7c:	d8c02e15 	stw	r3,184(sp)
   10a80:	94800094 	ori	r18,r18,2
   10a84:	a002a01e 	bne	r20,zero,11508 <___svfprintf_internal_r+0xdc0>
   10a88:	014000f4 	movhi	r5,3
   10a8c:	296ebf04 	addi	r5,r5,-17668
   10a90:	d9403a15 	stw	r5,232(sp)
   10a94:	04401e04 	movi	r17,120
   10a98:	d8c02a17 	ldw	r3,168(sp)
   10a9c:	0039883a 	mov	fp,zero
   10aa0:	1801e626 	beq	r3,zero,1123c <___svfprintf_internal_r+0xaf4>
   10aa4:	0029883a 	mov	r20,zero
   10aa8:	002d883a 	mov	r22,zero
   10aac:	00020506 	br	112c4 <___svfprintf_internal_r+0xb7c>
   10ab0:	d9402d17 	ldw	r5,180(sp)
   10ab4:	d9801e04 	addi	r6,sp,120
   10ab8:	9809883a 	mov	r4,r19
   10abc:	00196ac0 	call	196ac <__ssprint_r>
   10ac0:	1000081e 	bne	r2,zero,10ae4 <___svfprintf_internal_r+0x39c>
   10ac4:	da000404 	addi	r8,sp,16
   10ac8:	003f6106 	br	10850 <__alt_data_end+0xfc010850>
   10acc:	d8802017 	ldw	r2,128(sp)
   10ad0:	10000426 	beq	r2,zero,10ae4 <___svfprintf_internal_r+0x39c>
   10ad4:	d9402d17 	ldw	r5,180(sp)
   10ad8:	d9003917 	ldw	r4,228(sp)
   10adc:	d9801e04 	addi	r6,sp,120
   10ae0:	00196ac0 	call	196ac <__ssprint_r>
   10ae4:	d8802d17 	ldw	r2,180(sp)
   10ae8:	10c0030b 	ldhu	r3,12(r2)
   10aec:	d8802f17 	ldw	r2,188(sp)
   10af0:	18c0100c 	andi	r3,r3,64
   10af4:	1806251e 	bne	r3,zero,1238c <___svfprintf_internal_r+0x1c44>
   10af8:	dfc04817 	ldw	ra,288(sp)
   10afc:	df004717 	ldw	fp,284(sp)
   10b00:	ddc04617 	ldw	r23,280(sp)
   10b04:	dd804517 	ldw	r22,276(sp)
   10b08:	dd404417 	ldw	r21,272(sp)
   10b0c:	dd004317 	ldw	r20,268(sp)
   10b10:	dcc04217 	ldw	r19,264(sp)
   10b14:	dc804117 	ldw	r18,260(sp)
   10b18:	dc404017 	ldw	r17,256(sp)
   10b1c:	dc003f17 	ldw	r16,252(sp)
   10b20:	dec04904 	addi	sp,sp,292
   10b24:	f800283a 	ret
   10b28:	d9002e17 	ldw	r4,184(sp)
   10b2c:	d9402e17 	ldw	r5,184(sp)
   10b30:	21000017 	ldw	r4,0(r4)
   10b34:	28800104 	addi	r2,r5,4
   10b38:	d9003115 	stw	r4,196(sp)
   10b3c:	203fb916 	blt	r4,zero,10a24 <__alt_data_end+0xfc010a24>
   10b40:	d8802e15 	stw	r2,184(sp)
   10b44:	bc400007 	ldb	r17,0(r23)
   10b48:	003f5406 	br	1089c <__alt_data_end+0xfc01089c>
   10b4c:	bc400007 	ldb	r17,0(r23)
   10b50:	01000a84 	movi	r4,42
   10b54:	b8c00044 	addi	r3,r23,1
   10b58:	89076926 	beq	r17,r4,12900 <___svfprintf_internal_r+0x21b8>
   10b5c:	8cbff404 	addi	r18,r17,-48
   10b60:	b486b936 	bltu	r22,r18,12648 <___svfprintf_internal_r+0x1f00>
   10b64:	0009883a 	mov	r4,zero
   10b68:	1823883a 	mov	r17,r3
   10b6c:	01400284 	movi	r5,10
   10b70:	000d9380 	call	d938 <__mulsi3>
   10b74:	88c00007 	ldb	r3,0(r17)
   10b78:	1489883a 	add	r4,r2,r18
   10b7c:	8dc00044 	addi	r23,r17,1
   10b80:	1cbff404 	addi	r18,r3,-48
   10b84:	b823883a 	mov	r17,r23
   10b88:	b4bff82e 	bgeu	r22,r18,10b6c <__alt_data_end+0xfc010b6c>
   10b8c:	1823883a 	mov	r17,r3
   10b90:	20060416 	blt	r4,zero,123a4 <___svfprintf_internal_r+0x1c5c>
   10b94:	d9002a15 	stw	r4,168(sp)
   10b98:	003f4106 	br	108a0 <__alt_data_end+0xfc0108a0>
   10b9c:	8cbff404 	addi	r18,r17,-48
   10ba0:	d8003115 	stw	zero,196(sp)
   10ba4:	0009883a 	mov	r4,zero
   10ba8:	b823883a 	mov	r17,r23
   10bac:	01400284 	movi	r5,10
   10bb0:	000d9380 	call	d938 <__mulsi3>
   10bb4:	88c00007 	ldb	r3,0(r17)
   10bb8:	9089883a 	add	r4,r18,r2
   10bbc:	bdc00044 	addi	r23,r23,1
   10bc0:	1cbff404 	addi	r18,r3,-48
   10bc4:	b823883a 	mov	r17,r23
   10bc8:	b4bff82e 	bgeu	r22,r18,10bac <__alt_data_end+0xfc010bac>
   10bcc:	1823883a 	mov	r17,r3
   10bd0:	d9003115 	stw	r4,196(sp)
   10bd4:	003f3206 	br	108a0 <__alt_data_end+0xfc0108a0>
   10bd8:	84002014 	ori	r16,r16,128
   10bdc:	bc400007 	ldb	r17,0(r23)
   10be0:	003f2e06 	br	1089c <__alt_data_end+0xfc01089c>
   10be4:	8025883a 	mov	r18,r16
   10be8:	dc002903 	ldbu	r16,164(sp)
   10bec:	e011883a 	mov	r8,fp
   10bf0:	84003fcc 	andi	r16,r16,255
   10bf4:	8007721e 	bne	r16,zero,129c0 <___svfprintf_internal_r+0x2278>
   10bf8:	9080020c 	andi	r2,r18,8
   10bfc:	1004a526 	beq	r2,zero,11e94 <___svfprintf_internal_r+0x174c>
   10c00:	d9002e17 	ldw	r4,184(sp)
   10c04:	d9402e17 	ldw	r5,184(sp)
   10c08:	d8802e17 	ldw	r2,184(sp)
   10c0c:	21000017 	ldw	r4,0(r4)
   10c10:	29400117 	ldw	r5,4(r5)
   10c14:	10800204 	addi	r2,r2,8
   10c18:	d9003615 	stw	r4,216(sp)
   10c1c:	d9403715 	stw	r5,220(sp)
   10c20:	d8802e15 	stw	r2,184(sp)
   10c24:	d9003617 	ldw	r4,216(sp)
   10c28:	d9403717 	ldw	r5,220(sp)
   10c2c:	da003e15 	stw	r8,248(sp)
   10c30:	04000044 	movi	r16,1
   10c34:	00194fc0 	call	194fc <__fpclassifyd>
   10c38:	da003e17 	ldw	r8,248(sp)
   10c3c:	1404731e 	bne	r2,r16,11e0c <___svfprintf_internal_r+0x16c4>
   10c40:	d9003617 	ldw	r4,216(sp)
   10c44:	d9403717 	ldw	r5,220(sp)
   10c48:	000d883a 	mov	r6,zero
   10c4c:	000f883a 	mov	r7,zero
   10c50:	001ec000 	call	1ec00 <__ledf2>
   10c54:	da003e17 	ldw	r8,248(sp)
   10c58:	10061b16 	blt	r2,zero,124c8 <___svfprintf_internal_r+0x1d80>
   10c5c:	df002783 	ldbu	fp,158(sp)
   10c60:	008011c4 	movi	r2,71
   10c64:	1445810e 	bge	r2,r17,1226c <___svfprintf_internal_r+0x1b24>
   10c68:	040000f4 	movhi	r16,3
   10c6c:	842eb704 	addi	r16,r16,-17700
   10c70:	00c000c4 	movi	r3,3
   10c74:	00bfdfc4 	movi	r2,-129
   10c78:	d8c02915 	stw	r3,164(sp)
   10c7c:	90a4703a 	and	r18,r18,r2
   10c80:	d8c02b15 	stw	r3,172(sp)
   10c84:	d8002a15 	stw	zero,168(sp)
   10c88:	d8003215 	stw	zero,200(sp)
   10c8c:	00006c06 	br	10e40 <___svfprintf_internal_r+0x6f8>
   10c90:	84000214 	ori	r16,r16,8
   10c94:	bc400007 	ldb	r17,0(r23)
   10c98:	003f0006 	br	1089c <__alt_data_end+0xfc01089c>
   10c9c:	8025883a 	mov	r18,r16
   10ca0:	dc002903 	ldbu	r16,164(sp)
   10ca4:	e011883a 	mov	r8,fp
   10ca8:	84003fcc 	andi	r16,r16,255
   10cac:	80073f1e 	bne	r16,zero,129ac <___svfprintf_internal_r+0x2264>
   10cb0:	94800414 	ori	r18,r18,16
   10cb4:	9080080c 	andi	r2,r18,32
   10cb8:	1003bb26 	beq	r2,zero,11ba8 <___svfprintf_internal_r+0x1460>
   10cbc:	d9002e17 	ldw	r4,184(sp)
   10cc0:	20800117 	ldw	r2,4(r4)
   10cc4:	25000017 	ldw	r20,0(r4)
   10cc8:	21000204 	addi	r4,r4,8
   10ccc:	d9002e15 	stw	r4,184(sp)
   10cd0:	102d883a 	mov	r22,r2
   10cd4:	1003bd16 	blt	r2,zero,11bcc <___svfprintf_internal_r+0x1484>
   10cd8:	d9002a17 	ldw	r4,168(sp)
   10cdc:	df002783 	ldbu	fp,158(sp)
   10ce0:	2003d016 	blt	r4,zero,11c24 <___svfprintf_internal_r+0x14dc>
   10ce4:	00ffdfc4 	movi	r3,-129
   10ce8:	a584b03a 	or	r2,r20,r22
   10cec:	90e4703a 	and	r18,r18,r3
   10cf0:	10015026 	beq	r2,zero,11234 <___svfprintf_internal_r+0xaec>
   10cf4:	b0037026 	beq	r22,zero,11ab8 <___svfprintf_internal_r+0x1370>
   10cf8:	dc402915 	stw	r17,164(sp)
   10cfc:	dc001e04 	addi	r16,sp,120
   10d00:	b023883a 	mov	r17,r22
   10d04:	402d883a 	mov	r22,r8
   10d08:	a009883a 	mov	r4,r20
   10d0c:	880b883a 	mov	r5,r17
   10d10:	01800284 	movi	r6,10
   10d14:	000f883a 	mov	r7,zero
   10d18:	001d25c0 	call	1d25c <__umoddi3>
   10d1c:	10800c04 	addi	r2,r2,48
   10d20:	843fffc4 	addi	r16,r16,-1
   10d24:	a009883a 	mov	r4,r20
   10d28:	880b883a 	mov	r5,r17
   10d2c:	80800005 	stb	r2,0(r16)
   10d30:	01800284 	movi	r6,10
   10d34:	000f883a 	mov	r7,zero
   10d38:	001cc600 	call	1cc60 <__udivdi3>
   10d3c:	1029883a 	mov	r20,r2
   10d40:	10c4b03a 	or	r2,r2,r3
   10d44:	1823883a 	mov	r17,r3
   10d48:	103fef1e 	bne	r2,zero,10d08 <__alt_data_end+0xfc010d08>
   10d4c:	d8c02817 	ldw	r3,160(sp)
   10d50:	dc402917 	ldw	r17,164(sp)
   10d54:	b011883a 	mov	r8,r22
   10d58:	1c07c83a 	sub	r3,r3,r16
   10d5c:	d8c02b15 	stw	r3,172(sp)
   10d60:	00003106 	br	10e28 <___svfprintf_internal_r+0x6e0>
   10d64:	8025883a 	mov	r18,r16
   10d68:	dc002903 	ldbu	r16,164(sp)
   10d6c:	e011883a 	mov	r8,fp
   10d70:	84003fcc 	andi	r16,r16,255
   10d74:	80070a1e 	bne	r16,zero,129a0 <___svfprintf_internal_r+0x2258>
   10d78:	94800414 	ori	r18,r18,16
   10d7c:	9080080c 	andi	r2,r18,32
   10d80:	1002f626 	beq	r2,zero,1195c <___svfprintf_internal_r+0x1214>
   10d84:	d9002e17 	ldw	r4,184(sp)
   10d88:	d9402a17 	ldw	r5,168(sp)
   10d8c:	d8002785 	stb	zero,158(sp)
   10d90:	20800204 	addi	r2,r4,8
   10d94:	25000017 	ldw	r20,0(r4)
   10d98:	25800117 	ldw	r22,4(r4)
   10d9c:	28043716 	blt	r5,zero,11e7c <___svfprintf_internal_r+0x1734>
   10da0:	013fdfc4 	movi	r4,-129
   10da4:	a586b03a 	or	r3,r20,r22
   10da8:	d8802e15 	stw	r2,184(sp)
   10dac:	9124703a 	and	r18,r18,r4
   10db0:	1802f71e 	bne	r3,zero,11990 <___svfprintf_internal_r+0x1248>
   10db4:	d9402a17 	ldw	r5,168(sp)
   10db8:	0039883a 	mov	fp,zero
   10dbc:	2806df26 	beq	r5,zero,1293c <___svfprintf_internal_r+0x21f4>
   10dc0:	0029883a 	mov	r20,zero
   10dc4:	002d883a 	mov	r22,zero
   10dc8:	dc001e04 	addi	r16,sp,120
   10dcc:	a006d0fa 	srli	r3,r20,3
   10dd0:	b008977a 	slli	r4,r22,29
   10dd4:	b02cd0fa 	srli	r22,r22,3
   10dd8:	a50001cc 	andi	r20,r20,7
   10ddc:	a0800c04 	addi	r2,r20,48
   10de0:	843fffc4 	addi	r16,r16,-1
   10de4:	20e8b03a 	or	r20,r4,r3
   10de8:	80800005 	stb	r2,0(r16)
   10dec:	a586b03a 	or	r3,r20,r22
   10df0:	183ff61e 	bne	r3,zero,10dcc <__alt_data_end+0xfc010dcc>
   10df4:	90c0004c 	andi	r3,r18,1
   10df8:	18013f26 	beq	r3,zero,112f8 <___svfprintf_internal_r+0xbb0>
   10dfc:	10803fcc 	andi	r2,r2,255
   10e00:	1080201c 	xori	r2,r2,128
   10e04:	10bfe004 	addi	r2,r2,-128
   10e08:	00c00c04 	movi	r3,48
   10e0c:	10c13a26 	beq	r2,r3,112f8 <___svfprintf_internal_r+0xbb0>
   10e10:	80ffffc5 	stb	r3,-1(r16)
   10e14:	d8c02817 	ldw	r3,160(sp)
   10e18:	80bfffc4 	addi	r2,r16,-1
   10e1c:	1021883a 	mov	r16,r2
   10e20:	1887c83a 	sub	r3,r3,r2
   10e24:	d8c02b15 	stw	r3,172(sp)
   10e28:	d8802b17 	ldw	r2,172(sp)
   10e2c:	d9002a17 	ldw	r4,168(sp)
   10e30:	1100010e 	bge	r2,r4,10e38 <___svfprintf_internal_r+0x6f0>
   10e34:	2005883a 	mov	r2,r4
   10e38:	d8802915 	stw	r2,164(sp)
   10e3c:	d8003215 	stw	zero,200(sp)
   10e40:	e7003fcc 	andi	fp,fp,255
   10e44:	e700201c 	xori	fp,fp,128
   10e48:	e73fe004 	addi	fp,fp,-128
   10e4c:	e0000326 	beq	fp,zero,10e5c <___svfprintf_internal_r+0x714>
   10e50:	d8c02917 	ldw	r3,164(sp)
   10e54:	18c00044 	addi	r3,r3,1
   10e58:	d8c02915 	stw	r3,164(sp)
   10e5c:	90c0008c 	andi	r3,r18,2
   10e60:	d8c02c15 	stw	r3,176(sp)
   10e64:	18000326 	beq	r3,zero,10e74 <___svfprintf_internal_r+0x72c>
   10e68:	d8c02917 	ldw	r3,164(sp)
   10e6c:	18c00084 	addi	r3,r3,2
   10e70:	d8c02915 	stw	r3,164(sp)
   10e74:	90c0210c 	andi	r3,r18,132
   10e78:	d8c03015 	stw	r3,192(sp)
   10e7c:	1801c31e 	bne	r3,zero,1158c <___svfprintf_internal_r+0xe44>
   10e80:	d9003117 	ldw	r4,196(sp)
   10e84:	d8c02917 	ldw	r3,164(sp)
   10e88:	20e9c83a 	sub	r20,r4,r3
   10e8c:	0501bf0e 	bge	zero,r20,1158c <___svfprintf_internal_r+0xe44>
   10e90:	02400404 	movi	r9,16
   10e94:	d8c02017 	ldw	r3,128(sp)
   10e98:	d8801f17 	ldw	r2,124(sp)
   10e9c:	4d053d0e 	bge	r9,r20,12394 <___svfprintf_internal_r+0x1c4c>
   10ea0:	014000f4 	movhi	r5,3
   10ea4:	296eca84 	addi	r5,r5,-17622
   10ea8:	dc403c15 	stw	r17,240(sp)
   10eac:	d9403515 	stw	r5,212(sp)
   10eb0:	a023883a 	mov	r17,r20
   10eb4:	482d883a 	mov	r22,r9
   10eb8:	9029883a 	mov	r20,r18
   10ebc:	070001c4 	movi	fp,7
   10ec0:	8025883a 	mov	r18,r16
   10ec4:	dc002d17 	ldw	r16,180(sp)
   10ec8:	00000306 	br	10ed8 <___svfprintf_internal_r+0x790>
   10ecc:	8c7ffc04 	addi	r17,r17,-16
   10ed0:	42000204 	addi	r8,r8,8
   10ed4:	b440130e 	bge	r22,r17,10f24 <___svfprintf_internal_r+0x7dc>
   10ed8:	010000f4 	movhi	r4,3
   10edc:	18c00404 	addi	r3,r3,16
   10ee0:	10800044 	addi	r2,r2,1
   10ee4:	212eca84 	addi	r4,r4,-17622
   10ee8:	41000015 	stw	r4,0(r8)
   10eec:	45800115 	stw	r22,4(r8)
   10ef0:	d8c02015 	stw	r3,128(sp)
   10ef4:	d8801f15 	stw	r2,124(sp)
   10ef8:	e0bff40e 	bge	fp,r2,10ecc <__alt_data_end+0xfc010ecc>
   10efc:	d9801e04 	addi	r6,sp,120
   10f00:	800b883a 	mov	r5,r16
   10f04:	9809883a 	mov	r4,r19
   10f08:	00196ac0 	call	196ac <__ssprint_r>
   10f0c:	103ef51e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   10f10:	8c7ffc04 	addi	r17,r17,-16
   10f14:	d8c02017 	ldw	r3,128(sp)
   10f18:	d8801f17 	ldw	r2,124(sp)
   10f1c:	da000404 	addi	r8,sp,16
   10f20:	b47fed16 	blt	r22,r17,10ed8 <__alt_data_end+0xfc010ed8>
   10f24:	9021883a 	mov	r16,r18
   10f28:	a025883a 	mov	r18,r20
   10f2c:	8829883a 	mov	r20,r17
   10f30:	dc403c17 	ldw	r17,240(sp)
   10f34:	d9403517 	ldw	r5,212(sp)
   10f38:	a0c7883a 	add	r3,r20,r3
   10f3c:	10800044 	addi	r2,r2,1
   10f40:	41400015 	stw	r5,0(r8)
   10f44:	45000115 	stw	r20,4(r8)
   10f48:	d8c02015 	stw	r3,128(sp)
   10f4c:	d8801f15 	stw	r2,124(sp)
   10f50:	010001c4 	movi	r4,7
   10f54:	2082c116 	blt	r4,r2,11a5c <___svfprintf_internal_r+0x1314>
   10f58:	df002787 	ldb	fp,158(sp)
   10f5c:	42000204 	addi	r8,r8,8
   10f60:	e0000c26 	beq	fp,zero,10f94 <___svfprintf_internal_r+0x84c>
   10f64:	d8801f17 	ldw	r2,124(sp)
   10f68:	d9002784 	addi	r4,sp,158
   10f6c:	18c00044 	addi	r3,r3,1
   10f70:	10800044 	addi	r2,r2,1
   10f74:	41000015 	stw	r4,0(r8)
   10f78:	01000044 	movi	r4,1
   10f7c:	41000115 	stw	r4,4(r8)
   10f80:	d8c02015 	stw	r3,128(sp)
   10f84:	d8801f15 	stw	r2,124(sp)
   10f88:	010001c4 	movi	r4,7
   10f8c:	20825a16 	blt	r4,r2,118f8 <___svfprintf_internal_r+0x11b0>
   10f90:	42000204 	addi	r8,r8,8
   10f94:	d8802c17 	ldw	r2,176(sp)
   10f98:	10000c26 	beq	r2,zero,10fcc <___svfprintf_internal_r+0x884>
   10f9c:	d8801f17 	ldw	r2,124(sp)
   10fa0:	d9002704 	addi	r4,sp,156
   10fa4:	18c00084 	addi	r3,r3,2
   10fa8:	10800044 	addi	r2,r2,1
   10fac:	41000015 	stw	r4,0(r8)
   10fb0:	01000084 	movi	r4,2
   10fb4:	41000115 	stw	r4,4(r8)
   10fb8:	d8c02015 	stw	r3,128(sp)
   10fbc:	d8801f15 	stw	r2,124(sp)
   10fc0:	010001c4 	movi	r4,7
   10fc4:	20825416 	blt	r4,r2,11918 <___svfprintf_internal_r+0x11d0>
   10fc8:	42000204 	addi	r8,r8,8
   10fcc:	d9003017 	ldw	r4,192(sp)
   10fd0:	00802004 	movi	r2,128
   10fd4:	2081b926 	beq	r4,r2,116bc <___svfprintf_internal_r+0xf74>
   10fd8:	d9402a17 	ldw	r5,168(sp)
   10fdc:	d8802b17 	ldw	r2,172(sp)
   10fe0:	28adc83a 	sub	r22,r5,r2
   10fe4:	05802f0e 	bge	zero,r22,110a4 <___svfprintf_internal_r+0x95c>
   10fe8:	07000404 	movi	fp,16
   10fec:	d8801f17 	ldw	r2,124(sp)
   10ff0:	e583e20e 	bge	fp,r22,11f7c <___svfprintf_internal_r+0x1834>
   10ff4:	014000f4 	movhi	r5,3
   10ff8:	296ec684 	addi	r5,r5,-17638
   10ffc:	dc402a15 	stw	r17,168(sp)
   11000:	d9402c15 	stw	r5,176(sp)
   11004:	b023883a 	mov	r17,r22
   11008:	050001c4 	movi	r20,7
   1100c:	902d883a 	mov	r22,r18
   11010:	8025883a 	mov	r18,r16
   11014:	dc002d17 	ldw	r16,180(sp)
   11018:	00000306 	br	11028 <___svfprintf_internal_r+0x8e0>
   1101c:	8c7ffc04 	addi	r17,r17,-16
   11020:	42000204 	addi	r8,r8,8
   11024:	e440110e 	bge	fp,r17,1106c <___svfprintf_internal_r+0x924>
   11028:	18c00404 	addi	r3,r3,16
   1102c:	10800044 	addi	r2,r2,1
   11030:	45400015 	stw	r21,0(r8)
   11034:	47000115 	stw	fp,4(r8)
   11038:	d8c02015 	stw	r3,128(sp)
   1103c:	d8801f15 	stw	r2,124(sp)
   11040:	a0bff60e 	bge	r20,r2,1101c <__alt_data_end+0xfc01101c>
   11044:	d9801e04 	addi	r6,sp,120
   11048:	800b883a 	mov	r5,r16
   1104c:	9809883a 	mov	r4,r19
   11050:	00196ac0 	call	196ac <__ssprint_r>
   11054:	103ea31e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11058:	8c7ffc04 	addi	r17,r17,-16
   1105c:	d8c02017 	ldw	r3,128(sp)
   11060:	d8801f17 	ldw	r2,124(sp)
   11064:	da000404 	addi	r8,sp,16
   11068:	e47fef16 	blt	fp,r17,11028 <__alt_data_end+0xfc011028>
   1106c:	9021883a 	mov	r16,r18
   11070:	b025883a 	mov	r18,r22
   11074:	882d883a 	mov	r22,r17
   11078:	dc402a17 	ldw	r17,168(sp)
   1107c:	d9002c17 	ldw	r4,176(sp)
   11080:	1d87883a 	add	r3,r3,r22
   11084:	10800044 	addi	r2,r2,1
   11088:	41000015 	stw	r4,0(r8)
   1108c:	45800115 	stw	r22,4(r8)
   11090:	d8c02015 	stw	r3,128(sp)
   11094:	d8801f15 	stw	r2,124(sp)
   11098:	010001c4 	movi	r4,7
   1109c:	20820e16 	blt	r4,r2,118d8 <___svfprintf_internal_r+0x1190>
   110a0:	42000204 	addi	r8,r8,8
   110a4:	9080400c 	andi	r2,r18,256
   110a8:	10013a1e 	bne	r2,zero,11594 <___svfprintf_internal_r+0xe4c>
   110ac:	d9402b17 	ldw	r5,172(sp)
   110b0:	d8801f17 	ldw	r2,124(sp)
   110b4:	44000015 	stw	r16,0(r8)
   110b8:	1947883a 	add	r3,r3,r5
   110bc:	10800044 	addi	r2,r2,1
   110c0:	41400115 	stw	r5,4(r8)
   110c4:	d8c02015 	stw	r3,128(sp)
   110c8:	d8801f15 	stw	r2,124(sp)
   110cc:	010001c4 	movi	r4,7
   110d0:	2081f316 	blt	r4,r2,118a0 <___svfprintf_internal_r+0x1158>
   110d4:	42000204 	addi	r8,r8,8
   110d8:	9480010c 	andi	r18,r18,4
   110dc:	90003226 	beq	r18,zero,111a8 <___svfprintf_internal_r+0xa60>
   110e0:	d9403117 	ldw	r5,196(sp)
   110e4:	d8802917 	ldw	r2,164(sp)
   110e8:	28a1c83a 	sub	r16,r5,r2
   110ec:	04002e0e 	bge	zero,r16,111a8 <___svfprintf_internal_r+0xa60>
   110f0:	04400404 	movi	r17,16
   110f4:	d8801f17 	ldw	r2,124(sp)
   110f8:	8c04db0e 	bge	r17,r16,12468 <___svfprintf_internal_r+0x1d20>
   110fc:	014000f4 	movhi	r5,3
   11100:	296eca84 	addi	r5,r5,-17622
   11104:	d9403515 	stw	r5,212(sp)
   11108:	048001c4 	movi	r18,7
   1110c:	dd002d17 	ldw	r20,180(sp)
   11110:	00000306 	br	11120 <___svfprintf_internal_r+0x9d8>
   11114:	843ffc04 	addi	r16,r16,-16
   11118:	42000204 	addi	r8,r8,8
   1111c:	8c00130e 	bge	r17,r16,1116c <___svfprintf_internal_r+0xa24>
   11120:	010000f4 	movhi	r4,3
   11124:	18c00404 	addi	r3,r3,16
   11128:	10800044 	addi	r2,r2,1
   1112c:	212eca84 	addi	r4,r4,-17622
   11130:	41000015 	stw	r4,0(r8)
   11134:	44400115 	stw	r17,4(r8)
   11138:	d8c02015 	stw	r3,128(sp)
   1113c:	d8801f15 	stw	r2,124(sp)
   11140:	90bff40e 	bge	r18,r2,11114 <__alt_data_end+0xfc011114>
   11144:	d9801e04 	addi	r6,sp,120
   11148:	a00b883a 	mov	r5,r20
   1114c:	9809883a 	mov	r4,r19
   11150:	00196ac0 	call	196ac <__ssprint_r>
   11154:	103e631e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11158:	843ffc04 	addi	r16,r16,-16
   1115c:	d8c02017 	ldw	r3,128(sp)
   11160:	d8801f17 	ldw	r2,124(sp)
   11164:	da000404 	addi	r8,sp,16
   11168:	8c3fed16 	blt	r17,r16,11120 <__alt_data_end+0xfc011120>
   1116c:	d9403517 	ldw	r5,212(sp)
   11170:	1c07883a 	add	r3,r3,r16
   11174:	10800044 	addi	r2,r2,1
   11178:	41400015 	stw	r5,0(r8)
   1117c:	44000115 	stw	r16,4(r8)
   11180:	d8c02015 	stw	r3,128(sp)
   11184:	d8801f15 	stw	r2,124(sp)
   11188:	010001c4 	movi	r4,7
   1118c:	2080060e 	bge	r4,r2,111a8 <___svfprintf_internal_r+0xa60>
   11190:	d9402d17 	ldw	r5,180(sp)
   11194:	d9801e04 	addi	r6,sp,120
   11198:	9809883a 	mov	r4,r19
   1119c:	00196ac0 	call	196ac <__ssprint_r>
   111a0:	103e501e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   111a4:	d8c02017 	ldw	r3,128(sp)
   111a8:	d8803117 	ldw	r2,196(sp)
   111ac:	d9002917 	ldw	r4,164(sp)
   111b0:	1100010e 	bge	r2,r4,111b8 <___svfprintf_internal_r+0xa70>
   111b4:	2005883a 	mov	r2,r4
   111b8:	d9402f17 	ldw	r5,188(sp)
   111bc:	288b883a 	add	r5,r5,r2
   111c0:	d9402f15 	stw	r5,188(sp)
   111c4:	1801be1e 	bne	r3,zero,118c0 <___svfprintf_internal_r+0x1178>
   111c8:	b8800007 	ldb	r2,0(r23)
   111cc:	d8001f15 	stw	zero,124(sp)
   111d0:	da000404 	addi	r8,sp,16
   111d4:	103d891e 	bne	r2,zero,107fc <__alt_data_end+0xfc0107fc>
   111d8:	b823883a 	mov	r17,r23
   111dc:	003d9f06 	br	1085c <__alt_data_end+0xfc01085c>
   111e0:	8025883a 	mov	r18,r16
   111e4:	dc002903 	ldbu	r16,164(sp)
   111e8:	e011883a 	mov	r8,fp
   111ec:	84003fcc 	andi	r16,r16,255
   111f0:	8005e61e 	bne	r16,zero,1298c <___svfprintf_internal_r+0x2244>
   111f4:	94800414 	ori	r18,r18,16
   111f8:	9080080c 	andi	r2,r18,32
   111fc:	10022026 	beq	r2,zero,11a80 <___svfprintf_internal_r+0x1338>
   11200:	d9002e17 	ldw	r4,184(sp)
   11204:	d9402a17 	ldw	r5,168(sp)
   11208:	d8002785 	stb	zero,158(sp)
   1120c:	20c00204 	addi	r3,r4,8
   11210:	25000017 	ldw	r20,0(r4)
   11214:	25800117 	ldw	r22,4(r4)
   11218:	2803ad16 	blt	r5,zero,120d0 <___svfprintf_internal_r+0x1988>
   1121c:	013fdfc4 	movi	r4,-129
   11220:	a584b03a 	or	r2,r20,r22
   11224:	d8c02e15 	stw	r3,184(sp)
   11228:	9124703a 	and	r18,r18,r4
   1122c:	0039883a 	mov	fp,zero
   11230:	103eb01e 	bne	r2,zero,10cf4 <__alt_data_end+0xfc010cf4>
   11234:	d8802a17 	ldw	r2,168(sp)
   11238:	1002e71e 	bne	r2,zero,11dd8 <___svfprintf_internal_r+0x1690>
   1123c:	d8002a15 	stw	zero,168(sp)
   11240:	d8002b15 	stw	zero,172(sp)
   11244:	dc001e04 	addi	r16,sp,120
   11248:	003ef706 	br	10e28 <__alt_data_end+0xfc010e28>
   1124c:	8025883a 	mov	r18,r16
   11250:	dc002903 	ldbu	r16,164(sp)
   11254:	e011883a 	mov	r8,fp
   11258:	84003fcc 	andi	r16,r16,255
   1125c:	8005c81e 	bne	r16,zero,12980 <___svfprintf_internal_r+0x2238>
   11260:	010000f4 	movhi	r4,3
   11264:	212eba04 	addi	r4,r4,-17688
   11268:	d9003a15 	stw	r4,232(sp)
   1126c:	9080080c 	andi	r2,r18,32
   11270:	10007226 	beq	r2,zero,1143c <___svfprintf_internal_r+0xcf4>
   11274:	d9402e17 	ldw	r5,184(sp)
   11278:	2d000017 	ldw	r20,0(r5)
   1127c:	2d800117 	ldw	r22,4(r5)
   11280:	29400204 	addi	r5,r5,8
   11284:	d9402e15 	stw	r5,184(sp)
   11288:	9080004c 	andi	r2,r18,1
   1128c:	1001aa26 	beq	r2,zero,11938 <___svfprintf_internal_r+0x11f0>
   11290:	a584b03a 	or	r2,r20,r22
   11294:	10032526 	beq	r2,zero,11f2c <___svfprintf_internal_r+0x17e4>
   11298:	d8c02a17 	ldw	r3,168(sp)
   1129c:	00800c04 	movi	r2,48
   112a0:	d8802705 	stb	r2,156(sp)
   112a4:	dc402745 	stb	r17,157(sp)
   112a8:	d8002785 	stb	zero,158(sp)
   112ac:	90800094 	ori	r2,r18,2
   112b0:	1804a316 	blt	r3,zero,12540 <___svfprintf_internal_r+0x1df8>
   112b4:	00bfdfc4 	movi	r2,-129
   112b8:	90a4703a 	and	r18,r18,r2
   112bc:	94800094 	ori	r18,r18,2
   112c0:	0039883a 	mov	fp,zero
   112c4:	d9003a17 	ldw	r4,232(sp)
   112c8:	dc001e04 	addi	r16,sp,120
   112cc:	a08003cc 	andi	r2,r20,15
   112d0:	b006973a 	slli	r3,r22,28
   112d4:	2085883a 	add	r2,r4,r2
   112d8:	a028d13a 	srli	r20,r20,4
   112dc:	10800003 	ldbu	r2,0(r2)
   112e0:	b02cd13a 	srli	r22,r22,4
   112e4:	843fffc4 	addi	r16,r16,-1
   112e8:	1d28b03a 	or	r20,r3,r20
   112ec:	80800005 	stb	r2,0(r16)
   112f0:	a584b03a 	or	r2,r20,r22
   112f4:	103ff51e 	bne	r2,zero,112cc <__alt_data_end+0xfc0112cc>
   112f8:	d8c02817 	ldw	r3,160(sp)
   112fc:	1c07c83a 	sub	r3,r3,r16
   11300:	d8c02b15 	stw	r3,172(sp)
   11304:	003ec806 	br	10e28 <__alt_data_end+0xfc010e28>
   11308:	d8c02e17 	ldw	r3,184(sp)
   1130c:	d9002e17 	ldw	r4,184(sp)
   11310:	8025883a 	mov	r18,r16
   11314:	18800017 	ldw	r2,0(r3)
   11318:	21000104 	addi	r4,r4,4
   1131c:	00c00044 	movi	r3,1
   11320:	e011883a 	mov	r8,fp
   11324:	d8c02915 	stw	r3,164(sp)
   11328:	d8002785 	stb	zero,158(sp)
   1132c:	d8801405 	stb	r2,80(sp)
   11330:	d9002e15 	stw	r4,184(sp)
   11334:	d8c02b15 	stw	r3,172(sp)
   11338:	d8002a15 	stw	zero,168(sp)
   1133c:	d8003215 	stw	zero,200(sp)
   11340:	dc001404 	addi	r16,sp,80
   11344:	0039883a 	mov	fp,zero
   11348:	003ec406 	br	10e5c <__alt_data_end+0xfc010e5c>
   1134c:	8025883a 	mov	r18,r16
   11350:	dc002903 	ldbu	r16,164(sp)
   11354:	e011883a 	mov	r8,fp
   11358:	84003fcc 	andi	r16,r16,255
   1135c:	803e8726 	beq	r16,zero,10d7c <__alt_data_end+0xfc010d7c>
   11360:	d8c02b03 	ldbu	r3,172(sp)
   11364:	d8c02785 	stb	r3,158(sp)
   11368:	003e8406 	br	10d7c <__alt_data_end+0xfc010d7c>
   1136c:	00c00044 	movi	r3,1
   11370:	d8c02905 	stb	r3,164(sp)
   11374:	00c00ac4 	movi	r3,43
   11378:	d8c02b05 	stb	r3,172(sp)
   1137c:	bc400007 	ldb	r17,0(r23)
   11380:	003d4606 	br	1089c <__alt_data_end+0xfc01089c>
   11384:	84000814 	ori	r16,r16,32
   11388:	bc400007 	ldb	r17,0(r23)
   1138c:	003d4306 	br	1089c <__alt_data_end+0xfc01089c>
   11390:	d8802e17 	ldw	r2,184(sp)
   11394:	8025883a 	mov	r18,r16
   11398:	d8002785 	stb	zero,158(sp)
   1139c:	14000017 	ldw	r16,0(r2)
   113a0:	e011883a 	mov	r8,fp
   113a4:	15000104 	addi	r20,r2,4
   113a8:	80042126 	beq	r16,zero,12430 <___svfprintf_internal_r+0x1ce8>
   113ac:	d8c02a17 	ldw	r3,168(sp)
   113b0:	1803ee16 	blt	r3,zero,1236c <___svfprintf_internal_r+0x1c24>
   113b4:	180d883a 	mov	r6,r3
   113b8:	000b883a 	mov	r5,zero
   113bc:	8009883a 	mov	r4,r16
   113c0:	df003e15 	stw	fp,248(sp)
   113c4:	0017b380 	call	17b38 <memchr>
   113c8:	da003e17 	ldw	r8,248(sp)
   113cc:	10046a26 	beq	r2,zero,12578 <___svfprintf_internal_r+0x1e30>
   113d0:	1405c83a 	sub	r2,r2,r16
   113d4:	d8802b15 	stw	r2,172(sp)
   113d8:	1003ea16 	blt	r2,zero,12384 <___svfprintf_internal_r+0x1c3c>
   113dc:	df002783 	ldbu	fp,158(sp)
   113e0:	d8802915 	stw	r2,164(sp)
   113e4:	dd002e15 	stw	r20,184(sp)
   113e8:	d8002a15 	stw	zero,168(sp)
   113ec:	d8003215 	stw	zero,200(sp)
   113f0:	003e9306 	br	10e40 <__alt_data_end+0xfc010e40>
   113f4:	8025883a 	mov	r18,r16
   113f8:	dc002903 	ldbu	r16,164(sp)
   113fc:	e011883a 	mov	r8,fp
   11400:	84003fcc 	andi	r16,r16,255
   11404:	803f7c26 	beq	r16,zero,111f8 <__alt_data_end+0xfc0111f8>
   11408:	d8c02b03 	ldbu	r3,172(sp)
   1140c:	d8c02785 	stb	r3,158(sp)
   11410:	003f7906 	br	111f8 <__alt_data_end+0xfc0111f8>
   11414:	8025883a 	mov	r18,r16
   11418:	dc002903 	ldbu	r16,164(sp)
   1141c:	e011883a 	mov	r8,fp
   11420:	84003fcc 	andi	r16,r16,255
   11424:	8005741e 	bne	r16,zero,129f8 <___svfprintf_internal_r+0x22b0>
   11428:	010000f4 	movhi	r4,3
   1142c:	212ebf04 	addi	r4,r4,-17668
   11430:	d9003a15 	stw	r4,232(sp)
   11434:	9080080c 	andi	r2,r18,32
   11438:	103f8e1e 	bne	r2,zero,11274 <__alt_data_end+0xfc011274>
   1143c:	9080040c 	andi	r2,r18,16
   11440:	1002a726 	beq	r2,zero,11ee0 <___svfprintf_internal_r+0x1798>
   11444:	d8802e17 	ldw	r2,184(sp)
   11448:	002d883a 	mov	r22,zero
   1144c:	15000017 	ldw	r20,0(r2)
   11450:	10800104 	addi	r2,r2,4
   11454:	d8802e15 	stw	r2,184(sp)
   11458:	003f8b06 	br	11288 <__alt_data_end+0xfc011288>
   1145c:	84000054 	ori	r16,r16,1
   11460:	bc400007 	ldb	r17,0(r23)
   11464:	003d0d06 	br	1089c <__alt_data_end+0xfc01089c>
   11468:	d8802b07 	ldb	r2,172(sp)
   1146c:	1002a41e 	bne	r2,zero,11f00 <___svfprintf_internal_r+0x17b8>
   11470:	00c00044 	movi	r3,1
   11474:	d8c02905 	stb	r3,164(sp)
   11478:	00c00804 	movi	r3,32
   1147c:	d8c02b05 	stb	r3,172(sp)
   11480:	bc400007 	ldb	r17,0(r23)
   11484:	003d0506 	br	1089c <__alt_data_end+0xfc01089c>
   11488:	8025883a 	mov	r18,r16
   1148c:	dc002903 	ldbu	r16,164(sp)
   11490:	e011883a 	mov	r8,fp
   11494:	84003fcc 	andi	r16,r16,255
   11498:	803e0626 	beq	r16,zero,10cb4 <__alt_data_end+0xfc010cb4>
   1149c:	d8c02b03 	ldbu	r3,172(sp)
   114a0:	d8c02785 	stb	r3,158(sp)
   114a4:	003e0306 	br	10cb4 <__alt_data_end+0xfc010cb4>
   114a8:	bc400007 	ldb	r17,0(r23)
   114ac:	00801b04 	movi	r2,108
   114b0:	88830a26 	beq	r17,r2,120dc <___svfprintf_internal_r+0x1994>
   114b4:	84000414 	ori	r16,r16,16
   114b8:	003cf806 	br	1089c <__alt_data_end+0xfc01089c>
   114bc:	8025883a 	mov	r18,r16
   114c0:	dc002903 	ldbu	r16,164(sp)
   114c4:	e011883a 	mov	r8,fp
   114c8:	84003fcc 	andi	r16,r16,255
   114cc:	8005471e 	bne	r16,zero,129ec <___svfprintf_internal_r+0x22a4>
   114d0:	9080080c 	andi	r2,r18,32
   114d4:	10028c26 	beq	r2,zero,11f08 <___svfprintf_internal_r+0x17c0>
   114d8:	d9002e17 	ldw	r4,184(sp)
   114dc:	d9402f17 	ldw	r5,188(sp)
   114e0:	20800017 	ldw	r2,0(r4)
   114e4:	2807d7fa 	srai	r3,r5,31
   114e8:	21000104 	addi	r4,r4,4
   114ec:	d9002e15 	stw	r4,184(sp)
   114f0:	11400015 	stw	r5,0(r2)
   114f4:	10c00115 	stw	r3,4(r2)
   114f8:	003cbe06 	br	107f4 <__alt_data_end+0xfc0107f4>
   114fc:	84001014 	ori	r16,r16,64
   11500:	bc400007 	ldb	r17,0(r23)
   11504:	003ce506 	br	1089c <__alt_data_end+0xfc01089c>
   11508:	010000f4 	movhi	r4,3
   1150c:	212ebf04 	addi	r4,r4,-17668
   11510:	0039883a 	mov	fp,zero
   11514:	d9003a15 	stw	r4,232(sp)
   11518:	04401e04 	movi	r17,120
   1151c:	003f6906 	br	112c4 <__alt_data_end+0xfc0112c4>
   11520:	8025883a 	mov	r18,r16
   11524:	dc002903 	ldbu	r16,164(sp)
   11528:	e011883a 	mov	r8,fp
   1152c:	84003fcc 	andi	r16,r16,255
   11530:	8005261e 	bne	r16,zero,129cc <___svfprintf_internal_r+0x2284>
   11534:	883d6526 	beq	r17,zero,10acc <__alt_data_end+0xfc010acc>
   11538:	00c00044 	movi	r3,1
   1153c:	d8c02915 	stw	r3,164(sp)
   11540:	dc401405 	stb	r17,80(sp)
   11544:	d8002785 	stb	zero,158(sp)
   11548:	003f7a06 	br	11334 <__alt_data_end+0xfc011334>
   1154c:	010000f4 	movhi	r4,3
   11550:	212ebf04 	addi	r4,r4,-17668
   11554:	d9003a15 	stw	r4,232(sp)
   11558:	d8c02e15 	stw	r3,184(sp)
   1155c:	1025883a 	mov	r18,r2
   11560:	04401e04 	movi	r17,120
   11564:	a584b03a 	or	r2,r20,r22
   11568:	1000fa1e 	bne	r2,zero,11954 <___svfprintf_internal_r+0x120c>
   1156c:	0039883a 	mov	fp,zero
   11570:	00800084 	movi	r2,2
   11574:	10803fcc 	andi	r2,r2,255
   11578:	00c00044 	movi	r3,1
   1157c:	10c21626 	beq	r2,r3,11dd8 <___svfprintf_internal_r+0x1690>
   11580:	00c00084 	movi	r3,2
   11584:	10fe0e1e 	bne	r2,r3,10dc0 <__alt_data_end+0xfc010dc0>
   11588:	003d4606 	br	10aa4 <__alt_data_end+0xfc010aa4>
   1158c:	d8c02017 	ldw	r3,128(sp)
   11590:	003e7306 	br	10f60 <__alt_data_end+0xfc010f60>
   11594:	00801944 	movi	r2,101
   11598:	14407c0e 	bge	r2,r17,1178c <___svfprintf_internal_r+0x1044>
   1159c:	d9003617 	ldw	r4,216(sp)
   115a0:	d9403717 	ldw	r5,220(sp)
   115a4:	000d883a 	mov	r6,zero
   115a8:	000f883a 	mov	r7,zero
   115ac:	d8c03d15 	stw	r3,244(sp)
   115b0:	da003e15 	stw	r8,248(sp)
   115b4:	001ea9c0 	call	1ea9c <__eqdf2>
   115b8:	d8c03d17 	ldw	r3,244(sp)
   115bc:	da003e17 	ldw	r8,248(sp)
   115c0:	1000f51e 	bne	r2,zero,11998 <___svfprintf_internal_r+0x1250>
   115c4:	d8801f17 	ldw	r2,124(sp)
   115c8:	010000f4 	movhi	r4,3
   115cc:	212ec604 	addi	r4,r4,-17640
   115d0:	18c00044 	addi	r3,r3,1
   115d4:	10800044 	addi	r2,r2,1
   115d8:	41000015 	stw	r4,0(r8)
   115dc:	01000044 	movi	r4,1
   115e0:	41000115 	stw	r4,4(r8)
   115e4:	d8c02015 	stw	r3,128(sp)
   115e8:	d8801f15 	stw	r2,124(sp)
   115ec:	010001c4 	movi	r4,7
   115f0:	20826616 	blt	r4,r2,11f8c <___svfprintf_internal_r+0x1844>
   115f4:	42000204 	addi	r8,r8,8
   115f8:	d8802617 	ldw	r2,152(sp)
   115fc:	d9403317 	ldw	r5,204(sp)
   11600:	11400216 	blt	r2,r5,1160c <___svfprintf_internal_r+0xec4>
   11604:	9080004c 	andi	r2,r18,1
   11608:	103eb326 	beq	r2,zero,110d8 <__alt_data_end+0xfc0110d8>
   1160c:	d8803817 	ldw	r2,224(sp)
   11610:	d9003417 	ldw	r4,208(sp)
   11614:	d9403817 	ldw	r5,224(sp)
   11618:	1887883a 	add	r3,r3,r2
   1161c:	d8801f17 	ldw	r2,124(sp)
   11620:	41000015 	stw	r4,0(r8)
   11624:	41400115 	stw	r5,4(r8)
   11628:	10800044 	addi	r2,r2,1
   1162c:	d8c02015 	stw	r3,128(sp)
   11630:	d8801f15 	stw	r2,124(sp)
   11634:	010001c4 	movi	r4,7
   11638:	2082af16 	blt	r4,r2,120f8 <___svfprintf_internal_r+0x19b0>
   1163c:	42000204 	addi	r8,r8,8
   11640:	d8803317 	ldw	r2,204(sp)
   11644:	143fffc4 	addi	r16,r2,-1
   11648:	043ea30e 	bge	zero,r16,110d8 <__alt_data_end+0xfc0110d8>
   1164c:	04400404 	movi	r17,16
   11650:	d8801f17 	ldw	r2,124(sp)
   11654:	8c00860e 	bge	r17,r16,11870 <___svfprintf_internal_r+0x1128>
   11658:	014000f4 	movhi	r5,3
   1165c:	296ec684 	addi	r5,r5,-17638
   11660:	d9402c15 	stw	r5,176(sp)
   11664:	058001c4 	movi	r22,7
   11668:	dd002d17 	ldw	r20,180(sp)
   1166c:	00000306 	br	1167c <___svfprintf_internal_r+0xf34>
   11670:	42000204 	addi	r8,r8,8
   11674:	843ffc04 	addi	r16,r16,-16
   11678:	8c00800e 	bge	r17,r16,1187c <___svfprintf_internal_r+0x1134>
   1167c:	18c00404 	addi	r3,r3,16
   11680:	10800044 	addi	r2,r2,1
   11684:	45400015 	stw	r21,0(r8)
   11688:	44400115 	stw	r17,4(r8)
   1168c:	d8c02015 	stw	r3,128(sp)
   11690:	d8801f15 	stw	r2,124(sp)
   11694:	b0bff60e 	bge	r22,r2,11670 <__alt_data_end+0xfc011670>
   11698:	d9801e04 	addi	r6,sp,120
   1169c:	a00b883a 	mov	r5,r20
   116a0:	9809883a 	mov	r4,r19
   116a4:	00196ac0 	call	196ac <__ssprint_r>
   116a8:	103d0e1e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   116ac:	d8c02017 	ldw	r3,128(sp)
   116b0:	d8801f17 	ldw	r2,124(sp)
   116b4:	da000404 	addi	r8,sp,16
   116b8:	003fee06 	br	11674 <__alt_data_end+0xfc011674>
   116bc:	d9403117 	ldw	r5,196(sp)
   116c0:	d8802917 	ldw	r2,164(sp)
   116c4:	28adc83a 	sub	r22,r5,r2
   116c8:	05be430e 	bge	zero,r22,10fd8 <__alt_data_end+0xfc010fd8>
   116cc:	07000404 	movi	fp,16
   116d0:	d8801f17 	ldw	r2,124(sp)
   116d4:	e583a20e 	bge	fp,r22,12560 <___svfprintf_internal_r+0x1e18>
   116d8:	014000f4 	movhi	r5,3
   116dc:	296ec684 	addi	r5,r5,-17638
   116e0:	dc403015 	stw	r17,192(sp)
   116e4:	d9402c15 	stw	r5,176(sp)
   116e8:	b023883a 	mov	r17,r22
   116ec:	050001c4 	movi	r20,7
   116f0:	902d883a 	mov	r22,r18
   116f4:	8025883a 	mov	r18,r16
   116f8:	dc002d17 	ldw	r16,180(sp)
   116fc:	00000306 	br	1170c <___svfprintf_internal_r+0xfc4>
   11700:	8c7ffc04 	addi	r17,r17,-16
   11704:	42000204 	addi	r8,r8,8
   11708:	e440110e 	bge	fp,r17,11750 <___svfprintf_internal_r+0x1008>
   1170c:	18c00404 	addi	r3,r3,16
   11710:	10800044 	addi	r2,r2,1
   11714:	45400015 	stw	r21,0(r8)
   11718:	47000115 	stw	fp,4(r8)
   1171c:	d8c02015 	stw	r3,128(sp)
   11720:	d8801f15 	stw	r2,124(sp)
   11724:	a0bff60e 	bge	r20,r2,11700 <__alt_data_end+0xfc011700>
   11728:	d9801e04 	addi	r6,sp,120
   1172c:	800b883a 	mov	r5,r16
   11730:	9809883a 	mov	r4,r19
   11734:	00196ac0 	call	196ac <__ssprint_r>
   11738:	103cea1e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   1173c:	8c7ffc04 	addi	r17,r17,-16
   11740:	d8c02017 	ldw	r3,128(sp)
   11744:	d8801f17 	ldw	r2,124(sp)
   11748:	da000404 	addi	r8,sp,16
   1174c:	e47fef16 	blt	fp,r17,1170c <__alt_data_end+0xfc01170c>
   11750:	9021883a 	mov	r16,r18
   11754:	b025883a 	mov	r18,r22
   11758:	882d883a 	mov	r22,r17
   1175c:	dc403017 	ldw	r17,192(sp)
   11760:	d9002c17 	ldw	r4,176(sp)
   11764:	1d87883a 	add	r3,r3,r22
   11768:	10800044 	addi	r2,r2,1
   1176c:	41000015 	stw	r4,0(r8)
   11770:	45800115 	stw	r22,4(r8)
   11774:	d8c02015 	stw	r3,128(sp)
   11778:	d8801f15 	stw	r2,124(sp)
   1177c:	010001c4 	movi	r4,7
   11780:	20819a16 	blt	r4,r2,11dec <___svfprintf_internal_r+0x16a4>
   11784:	42000204 	addi	r8,r8,8
   11788:	003e1306 	br	10fd8 <__alt_data_end+0xfc010fd8>
   1178c:	d9403317 	ldw	r5,204(sp)
   11790:	00800044 	movi	r2,1
   11794:	18c00044 	addi	r3,r3,1
   11798:	1141710e 	bge	r2,r5,11d60 <___svfprintf_internal_r+0x1618>
   1179c:	dc401f17 	ldw	r17,124(sp)
   117a0:	00800044 	movi	r2,1
   117a4:	40800115 	stw	r2,4(r8)
   117a8:	8c400044 	addi	r17,r17,1
   117ac:	44000015 	stw	r16,0(r8)
   117b0:	d8c02015 	stw	r3,128(sp)
   117b4:	dc401f15 	stw	r17,124(sp)
   117b8:	008001c4 	movi	r2,7
   117bc:	14417416 	blt	r2,r17,11d90 <___svfprintf_internal_r+0x1648>
   117c0:	42000204 	addi	r8,r8,8
   117c4:	d8803817 	ldw	r2,224(sp)
   117c8:	d9003417 	ldw	r4,208(sp)
   117cc:	8c400044 	addi	r17,r17,1
   117d0:	10c7883a 	add	r3,r2,r3
   117d4:	40800115 	stw	r2,4(r8)
   117d8:	41000015 	stw	r4,0(r8)
   117dc:	d8c02015 	stw	r3,128(sp)
   117e0:	dc401f15 	stw	r17,124(sp)
   117e4:	008001c4 	movi	r2,7
   117e8:	14417216 	blt	r2,r17,11db4 <___svfprintf_internal_r+0x166c>
   117ec:	45800204 	addi	r22,r8,8
   117f0:	d9003617 	ldw	r4,216(sp)
   117f4:	d9403717 	ldw	r5,220(sp)
   117f8:	000d883a 	mov	r6,zero
   117fc:	000f883a 	mov	r7,zero
   11800:	d8c03d15 	stw	r3,244(sp)
   11804:	001ea9c0 	call	1ea9c <__eqdf2>
   11808:	d8c03d17 	ldw	r3,244(sp)
   1180c:	1000b326 	beq	r2,zero,11adc <___svfprintf_internal_r+0x1394>
   11810:	d9403317 	ldw	r5,204(sp)
   11814:	84000044 	addi	r16,r16,1
   11818:	8c400044 	addi	r17,r17,1
   1181c:	28bfffc4 	addi	r2,r5,-1
   11820:	1887883a 	add	r3,r3,r2
   11824:	b0800115 	stw	r2,4(r22)
   11828:	b4000015 	stw	r16,0(r22)
   1182c:	d8c02015 	stw	r3,128(sp)
   11830:	dc401f15 	stw	r17,124(sp)
   11834:	008001c4 	movi	r2,7
   11838:	1440d216 	blt	r2,r17,11b84 <___svfprintf_internal_r+0x143c>
   1183c:	b5800204 	addi	r22,r22,8
   11840:	d9003b17 	ldw	r4,236(sp)
   11844:	df0022c4 	addi	fp,sp,139
   11848:	8c400044 	addi	r17,r17,1
   1184c:	20c7883a 	add	r3,r4,r3
   11850:	b7000015 	stw	fp,0(r22)
   11854:	b1000115 	stw	r4,4(r22)
   11858:	d8c02015 	stw	r3,128(sp)
   1185c:	dc401f15 	stw	r17,124(sp)
   11860:	008001c4 	movi	r2,7
   11864:	14400e16 	blt	r2,r17,118a0 <___svfprintf_internal_r+0x1158>
   11868:	b2000204 	addi	r8,r22,8
   1186c:	003e1a06 	br	110d8 <__alt_data_end+0xfc0110d8>
   11870:	010000f4 	movhi	r4,3
   11874:	212ec684 	addi	r4,r4,-17638
   11878:	d9002c15 	stw	r4,176(sp)
   1187c:	d9002c17 	ldw	r4,176(sp)
   11880:	1c07883a 	add	r3,r3,r16
   11884:	44000115 	stw	r16,4(r8)
   11888:	41000015 	stw	r4,0(r8)
   1188c:	10800044 	addi	r2,r2,1
   11890:	d8c02015 	stw	r3,128(sp)
   11894:	d8801f15 	stw	r2,124(sp)
   11898:	010001c4 	movi	r4,7
   1189c:	20be0d0e 	bge	r4,r2,110d4 <__alt_data_end+0xfc0110d4>
   118a0:	d9402d17 	ldw	r5,180(sp)
   118a4:	d9801e04 	addi	r6,sp,120
   118a8:	9809883a 	mov	r4,r19
   118ac:	00196ac0 	call	196ac <__ssprint_r>
   118b0:	103c8c1e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   118b4:	d8c02017 	ldw	r3,128(sp)
   118b8:	da000404 	addi	r8,sp,16
   118bc:	003e0606 	br	110d8 <__alt_data_end+0xfc0110d8>
   118c0:	d9402d17 	ldw	r5,180(sp)
   118c4:	d9801e04 	addi	r6,sp,120
   118c8:	9809883a 	mov	r4,r19
   118cc:	00196ac0 	call	196ac <__ssprint_r>
   118d0:	103e3d26 	beq	r2,zero,111c8 <__alt_data_end+0xfc0111c8>
   118d4:	003c8306 	br	10ae4 <__alt_data_end+0xfc010ae4>
   118d8:	d9402d17 	ldw	r5,180(sp)
   118dc:	d9801e04 	addi	r6,sp,120
   118e0:	9809883a 	mov	r4,r19
   118e4:	00196ac0 	call	196ac <__ssprint_r>
   118e8:	103c7e1e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   118ec:	d8c02017 	ldw	r3,128(sp)
   118f0:	da000404 	addi	r8,sp,16
   118f4:	003deb06 	br	110a4 <__alt_data_end+0xfc0110a4>
   118f8:	d9402d17 	ldw	r5,180(sp)
   118fc:	d9801e04 	addi	r6,sp,120
   11900:	9809883a 	mov	r4,r19
   11904:	00196ac0 	call	196ac <__ssprint_r>
   11908:	103c761e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   1190c:	d8c02017 	ldw	r3,128(sp)
   11910:	da000404 	addi	r8,sp,16
   11914:	003d9f06 	br	10f94 <__alt_data_end+0xfc010f94>
   11918:	d9402d17 	ldw	r5,180(sp)
   1191c:	d9801e04 	addi	r6,sp,120
   11920:	9809883a 	mov	r4,r19
   11924:	00196ac0 	call	196ac <__ssprint_r>
   11928:	103c6e1e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   1192c:	d8c02017 	ldw	r3,128(sp)
   11930:	da000404 	addi	r8,sp,16
   11934:	003da506 	br	10fcc <__alt_data_end+0xfc010fcc>
   11938:	d9402a17 	ldw	r5,168(sp)
   1193c:	d8002785 	stb	zero,158(sp)
   11940:	283f0816 	blt	r5,zero,11564 <__alt_data_end+0xfc011564>
   11944:	00ffdfc4 	movi	r3,-129
   11948:	a584b03a 	or	r2,r20,r22
   1194c:	90e4703a 	and	r18,r18,r3
   11950:	103c5126 	beq	r2,zero,10a98 <__alt_data_end+0xfc010a98>
   11954:	0039883a 	mov	fp,zero
   11958:	003e5a06 	br	112c4 <__alt_data_end+0xfc0112c4>
   1195c:	9080040c 	andi	r2,r18,16
   11960:	10013d26 	beq	r2,zero,11e58 <___svfprintf_internal_r+0x1710>
   11964:	d8c02e17 	ldw	r3,184(sp)
   11968:	d9002a17 	ldw	r4,168(sp)
   1196c:	d8002785 	stb	zero,158(sp)
   11970:	18800104 	addi	r2,r3,4
   11974:	1d000017 	ldw	r20,0(r3)
   11978:	002d883a 	mov	r22,zero
   1197c:	20013f16 	blt	r4,zero,11e7c <___svfprintf_internal_r+0x1734>
   11980:	00ffdfc4 	movi	r3,-129
   11984:	d8802e15 	stw	r2,184(sp)
   11988:	90e4703a 	and	r18,r18,r3
   1198c:	a03d0926 	beq	r20,zero,10db4 <__alt_data_end+0xfc010db4>
   11990:	0039883a 	mov	fp,zero
   11994:	003d0c06 	br	10dc8 <__alt_data_end+0xfc010dc8>
   11998:	dc402617 	ldw	r17,152(sp)
   1199c:	0441830e 	bge	zero,r17,11fac <___svfprintf_internal_r+0x1864>
   119a0:	dc403217 	ldw	r17,200(sp)
   119a4:	d8803317 	ldw	r2,204(sp)
   119a8:	1440010e 	bge	r2,r17,119b0 <___svfprintf_internal_r+0x1268>
   119ac:	1023883a 	mov	r17,r2
   119b0:	04400a0e 	bge	zero,r17,119dc <___svfprintf_internal_r+0x1294>
   119b4:	d8801f17 	ldw	r2,124(sp)
   119b8:	1c47883a 	add	r3,r3,r17
   119bc:	44000015 	stw	r16,0(r8)
   119c0:	10800044 	addi	r2,r2,1
   119c4:	44400115 	stw	r17,4(r8)
   119c8:	d8c02015 	stw	r3,128(sp)
   119cc:	d8801f15 	stw	r2,124(sp)
   119d0:	010001c4 	movi	r4,7
   119d4:	20827516 	blt	r4,r2,123ac <___svfprintf_internal_r+0x1c64>
   119d8:	42000204 	addi	r8,r8,8
   119dc:	88027b16 	blt	r17,zero,123cc <___svfprintf_internal_r+0x1c84>
   119e0:	d9003217 	ldw	r4,200(sp)
   119e4:	2463c83a 	sub	r17,r4,r17
   119e8:	0440990e 	bge	zero,r17,11c50 <___svfprintf_internal_r+0x1508>
   119ec:	05800404 	movi	r22,16
   119f0:	d8801f17 	ldw	r2,124(sp)
   119f4:	b441530e 	bge	r22,r17,11f44 <___svfprintf_internal_r+0x17fc>
   119f8:	010000f4 	movhi	r4,3
   119fc:	212ec684 	addi	r4,r4,-17638
   11a00:	d9002c15 	stw	r4,176(sp)
   11a04:	070001c4 	movi	fp,7
   11a08:	dd002d17 	ldw	r20,180(sp)
   11a0c:	00000306 	br	11a1c <___svfprintf_internal_r+0x12d4>
   11a10:	42000204 	addi	r8,r8,8
   11a14:	8c7ffc04 	addi	r17,r17,-16
   11a18:	b4414d0e 	bge	r22,r17,11f50 <___svfprintf_internal_r+0x1808>
   11a1c:	18c00404 	addi	r3,r3,16
   11a20:	10800044 	addi	r2,r2,1
   11a24:	45400015 	stw	r21,0(r8)
   11a28:	45800115 	stw	r22,4(r8)
   11a2c:	d8c02015 	stw	r3,128(sp)
   11a30:	d8801f15 	stw	r2,124(sp)
   11a34:	e0bff60e 	bge	fp,r2,11a10 <__alt_data_end+0xfc011a10>
   11a38:	d9801e04 	addi	r6,sp,120
   11a3c:	a00b883a 	mov	r5,r20
   11a40:	9809883a 	mov	r4,r19
   11a44:	00196ac0 	call	196ac <__ssprint_r>
   11a48:	103c261e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11a4c:	d8c02017 	ldw	r3,128(sp)
   11a50:	d8801f17 	ldw	r2,124(sp)
   11a54:	da000404 	addi	r8,sp,16
   11a58:	003fee06 	br	11a14 <__alt_data_end+0xfc011a14>
   11a5c:	d9402d17 	ldw	r5,180(sp)
   11a60:	d9801e04 	addi	r6,sp,120
   11a64:	9809883a 	mov	r4,r19
   11a68:	00196ac0 	call	196ac <__ssprint_r>
   11a6c:	103c1d1e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11a70:	d8c02017 	ldw	r3,128(sp)
   11a74:	df002787 	ldb	fp,158(sp)
   11a78:	da000404 	addi	r8,sp,16
   11a7c:	003d3806 	br	10f60 <__alt_data_end+0xfc010f60>
   11a80:	9080040c 	andi	r2,r18,16
   11a84:	10005c26 	beq	r2,zero,11bf8 <___svfprintf_internal_r+0x14b0>
   11a88:	d8c02e17 	ldw	r3,184(sp)
   11a8c:	d9002a17 	ldw	r4,168(sp)
   11a90:	d8002785 	stb	zero,158(sp)
   11a94:	18800104 	addi	r2,r3,4
   11a98:	1d000017 	ldw	r20,0(r3)
   11a9c:	002d883a 	mov	r22,zero
   11aa0:	20005e16 	blt	r4,zero,11c1c <___svfprintf_internal_r+0x14d4>
   11aa4:	00ffdfc4 	movi	r3,-129
   11aa8:	d8802e15 	stw	r2,184(sp)
   11aac:	90e4703a 	and	r18,r18,r3
   11ab0:	0039883a 	mov	fp,zero
   11ab4:	a03ddf26 	beq	r20,zero,11234 <__alt_data_end+0xfc011234>
   11ab8:	00800244 	movi	r2,9
   11abc:	153c8e36 	bltu	r2,r20,10cf8 <__alt_data_end+0xfc010cf8>
   11ac0:	a5000c04 	addi	r20,r20,48
   11ac4:	dc001dc4 	addi	r16,sp,119
   11ac8:	dd001dc5 	stb	r20,119(sp)
   11acc:	d8c02817 	ldw	r3,160(sp)
   11ad0:	1c07c83a 	sub	r3,r3,r16
   11ad4:	d8c02b15 	stw	r3,172(sp)
   11ad8:	003cd306 	br	10e28 <__alt_data_end+0xfc010e28>
   11adc:	d8803317 	ldw	r2,204(sp)
   11ae0:	143fffc4 	addi	r16,r2,-1
   11ae4:	043f560e 	bge	zero,r16,11840 <__alt_data_end+0xfc011840>
   11ae8:	07000404 	movi	fp,16
   11aec:	e403530e 	bge	fp,r16,1283c <___svfprintf_internal_r+0x20f4>
   11af0:	014000f4 	movhi	r5,3
   11af4:	296ec684 	addi	r5,r5,-17638
   11af8:	d9402c15 	stw	r5,176(sp)
   11afc:	01c001c4 	movi	r7,7
   11b00:	dd002d17 	ldw	r20,180(sp)
   11b04:	00000306 	br	11b14 <___svfprintf_internal_r+0x13cc>
   11b08:	843ffc04 	addi	r16,r16,-16
   11b0c:	b5800204 	addi	r22,r22,8
   11b10:	e400130e 	bge	fp,r16,11b60 <___svfprintf_internal_r+0x1418>
   11b14:	18c00404 	addi	r3,r3,16
   11b18:	8c400044 	addi	r17,r17,1
   11b1c:	b5400015 	stw	r21,0(r22)
   11b20:	b7000115 	stw	fp,4(r22)
   11b24:	d8c02015 	stw	r3,128(sp)
   11b28:	dc401f15 	stw	r17,124(sp)
   11b2c:	3c7ff60e 	bge	r7,r17,11b08 <__alt_data_end+0xfc011b08>
   11b30:	d9801e04 	addi	r6,sp,120
   11b34:	a00b883a 	mov	r5,r20
   11b38:	9809883a 	mov	r4,r19
   11b3c:	d9c03d15 	stw	r7,244(sp)
   11b40:	00196ac0 	call	196ac <__ssprint_r>
   11b44:	d9c03d17 	ldw	r7,244(sp)
   11b48:	103be61e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11b4c:	843ffc04 	addi	r16,r16,-16
   11b50:	d8c02017 	ldw	r3,128(sp)
   11b54:	dc401f17 	ldw	r17,124(sp)
   11b58:	dd800404 	addi	r22,sp,16
   11b5c:	e43fed16 	blt	fp,r16,11b14 <__alt_data_end+0xfc011b14>
   11b60:	d8802c17 	ldw	r2,176(sp)
   11b64:	1c07883a 	add	r3,r3,r16
   11b68:	8c400044 	addi	r17,r17,1
   11b6c:	b0800015 	stw	r2,0(r22)
   11b70:	b4000115 	stw	r16,4(r22)
   11b74:	d8c02015 	stw	r3,128(sp)
   11b78:	dc401f15 	stw	r17,124(sp)
   11b7c:	008001c4 	movi	r2,7
   11b80:	147f2e0e 	bge	r2,r17,1183c <__alt_data_end+0xfc01183c>
   11b84:	d9402d17 	ldw	r5,180(sp)
   11b88:	d9801e04 	addi	r6,sp,120
   11b8c:	9809883a 	mov	r4,r19
   11b90:	00196ac0 	call	196ac <__ssprint_r>
   11b94:	103bd31e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11b98:	d8c02017 	ldw	r3,128(sp)
   11b9c:	dc401f17 	ldw	r17,124(sp)
   11ba0:	dd800404 	addi	r22,sp,16
   11ba4:	003f2606 	br	11840 <__alt_data_end+0xfc011840>
   11ba8:	9080040c 	andi	r2,r18,16
   11bac:	1000c326 	beq	r2,zero,11ebc <___svfprintf_internal_r+0x1774>
   11bb0:	d9402e17 	ldw	r5,184(sp)
   11bb4:	2d000017 	ldw	r20,0(r5)
   11bb8:	29400104 	addi	r5,r5,4
   11bbc:	d9402e15 	stw	r5,184(sp)
   11bc0:	a02dd7fa 	srai	r22,r20,31
   11bc4:	b005883a 	mov	r2,r22
   11bc8:	103c430e 	bge	r2,zero,10cd8 <__alt_data_end+0xfc010cd8>
   11bcc:	d9402a17 	ldw	r5,168(sp)
   11bd0:	0529c83a 	sub	r20,zero,r20
   11bd4:	07000b44 	movi	fp,45
   11bd8:	a004c03a 	cmpne	r2,r20,zero
   11bdc:	05adc83a 	sub	r22,zero,r22
   11be0:	df002785 	stb	fp,158(sp)
   11be4:	b0adc83a 	sub	r22,r22,r2
   11be8:	28022e16 	blt	r5,zero,124a4 <___svfprintf_internal_r+0x1d5c>
   11bec:	00bfdfc4 	movi	r2,-129
   11bf0:	90a4703a 	and	r18,r18,r2
   11bf4:	003c3f06 	br	10cf4 <__alt_data_end+0xfc010cf4>
   11bf8:	9080100c 	andi	r2,r18,64
   11bfc:	d8002785 	stb	zero,158(sp)
   11c00:	10012526 	beq	r2,zero,12098 <___svfprintf_internal_r+0x1950>
   11c04:	d9402e17 	ldw	r5,184(sp)
   11c08:	d8c02a17 	ldw	r3,168(sp)
   11c0c:	002d883a 	mov	r22,zero
   11c10:	28800104 	addi	r2,r5,4
   11c14:	2d00000b 	ldhu	r20,0(r5)
   11c18:	183fa20e 	bge	r3,zero,11aa4 <__alt_data_end+0xfc011aa4>
   11c1c:	d8802e15 	stw	r2,184(sp)
   11c20:	0039883a 	mov	fp,zero
   11c24:	a584b03a 	or	r2,r20,r22
   11c28:	103c321e 	bne	r2,zero,10cf4 <__alt_data_end+0xfc010cf4>
   11c2c:	00800044 	movi	r2,1
   11c30:	003e5006 	br	11574 <__alt_data_end+0xfc011574>
   11c34:	d9402d17 	ldw	r5,180(sp)
   11c38:	d9801e04 	addi	r6,sp,120
   11c3c:	9809883a 	mov	r4,r19
   11c40:	00196ac0 	call	196ac <__ssprint_r>
   11c44:	103ba71e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11c48:	d8c02017 	ldw	r3,128(sp)
   11c4c:	da000404 	addi	r8,sp,16
   11c50:	d9003217 	ldw	r4,200(sp)
   11c54:	d8802617 	ldw	r2,152(sp)
   11c58:	d9403317 	ldw	r5,204(sp)
   11c5c:	8123883a 	add	r17,r16,r4
   11c60:	11400216 	blt	r2,r5,11c6c <___svfprintf_internal_r+0x1524>
   11c64:	9100004c 	andi	r4,r18,1
   11c68:	20000d26 	beq	r4,zero,11ca0 <___svfprintf_internal_r+0x1558>
   11c6c:	d9003817 	ldw	r4,224(sp)
   11c70:	d9403417 	ldw	r5,208(sp)
   11c74:	1907883a 	add	r3,r3,r4
   11c78:	d9001f17 	ldw	r4,124(sp)
   11c7c:	41400015 	stw	r5,0(r8)
   11c80:	d9403817 	ldw	r5,224(sp)
   11c84:	21000044 	addi	r4,r4,1
   11c88:	d8c02015 	stw	r3,128(sp)
   11c8c:	41400115 	stw	r5,4(r8)
   11c90:	d9001f15 	stw	r4,124(sp)
   11c94:	014001c4 	movi	r5,7
   11c98:	2901dc16 	blt	r5,r4,1240c <___svfprintf_internal_r+0x1cc4>
   11c9c:	42000204 	addi	r8,r8,8
   11ca0:	d9003317 	ldw	r4,204(sp)
   11ca4:	8121883a 	add	r16,r16,r4
   11ca8:	2085c83a 	sub	r2,r4,r2
   11cac:	8461c83a 	sub	r16,r16,r17
   11cb0:	1400010e 	bge	r2,r16,11cb8 <___svfprintf_internal_r+0x1570>
   11cb4:	1021883a 	mov	r16,r2
   11cb8:	04000a0e 	bge	zero,r16,11ce4 <___svfprintf_internal_r+0x159c>
   11cbc:	d9001f17 	ldw	r4,124(sp)
   11cc0:	1c07883a 	add	r3,r3,r16
   11cc4:	44400015 	stw	r17,0(r8)
   11cc8:	21000044 	addi	r4,r4,1
   11ccc:	44000115 	stw	r16,4(r8)
   11cd0:	d8c02015 	stw	r3,128(sp)
   11cd4:	d9001f15 	stw	r4,124(sp)
   11cd8:	014001c4 	movi	r5,7
   11cdc:	2901e616 	blt	r5,r4,12478 <___svfprintf_internal_r+0x1d30>
   11ce0:	42000204 	addi	r8,r8,8
   11ce4:	8001f616 	blt	r16,zero,124c0 <___svfprintf_internal_r+0x1d78>
   11ce8:	1421c83a 	sub	r16,r2,r16
   11cec:	043cfa0e 	bge	zero,r16,110d8 <__alt_data_end+0xfc0110d8>
   11cf0:	04400404 	movi	r17,16
   11cf4:	d8801f17 	ldw	r2,124(sp)
   11cf8:	8c3edd0e 	bge	r17,r16,11870 <__alt_data_end+0xfc011870>
   11cfc:	014000f4 	movhi	r5,3
   11d00:	296ec684 	addi	r5,r5,-17638
   11d04:	d9402c15 	stw	r5,176(sp)
   11d08:	058001c4 	movi	r22,7
   11d0c:	dd002d17 	ldw	r20,180(sp)
   11d10:	00000306 	br	11d20 <___svfprintf_internal_r+0x15d8>
   11d14:	42000204 	addi	r8,r8,8
   11d18:	843ffc04 	addi	r16,r16,-16
   11d1c:	8c3ed70e 	bge	r17,r16,1187c <__alt_data_end+0xfc01187c>
   11d20:	18c00404 	addi	r3,r3,16
   11d24:	10800044 	addi	r2,r2,1
   11d28:	45400015 	stw	r21,0(r8)
   11d2c:	44400115 	stw	r17,4(r8)
   11d30:	d8c02015 	stw	r3,128(sp)
   11d34:	d8801f15 	stw	r2,124(sp)
   11d38:	b0bff60e 	bge	r22,r2,11d14 <__alt_data_end+0xfc011d14>
   11d3c:	d9801e04 	addi	r6,sp,120
   11d40:	a00b883a 	mov	r5,r20
   11d44:	9809883a 	mov	r4,r19
   11d48:	00196ac0 	call	196ac <__ssprint_r>
   11d4c:	103b651e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11d50:	d8c02017 	ldw	r3,128(sp)
   11d54:	d8801f17 	ldw	r2,124(sp)
   11d58:	da000404 	addi	r8,sp,16
   11d5c:	003fee06 	br	11d18 <__alt_data_end+0xfc011d18>
   11d60:	9088703a 	and	r4,r18,r2
   11d64:	203e8d1e 	bne	r4,zero,1179c <__alt_data_end+0xfc01179c>
   11d68:	dc401f17 	ldw	r17,124(sp)
   11d6c:	40800115 	stw	r2,4(r8)
   11d70:	44000015 	stw	r16,0(r8)
   11d74:	8c400044 	addi	r17,r17,1
   11d78:	d8c02015 	stw	r3,128(sp)
   11d7c:	dc401f15 	stw	r17,124(sp)
   11d80:	008001c4 	movi	r2,7
   11d84:	147f7f16 	blt	r2,r17,11b84 <__alt_data_end+0xfc011b84>
   11d88:	45800204 	addi	r22,r8,8
   11d8c:	003eac06 	br	11840 <__alt_data_end+0xfc011840>
   11d90:	d9402d17 	ldw	r5,180(sp)
   11d94:	d9801e04 	addi	r6,sp,120
   11d98:	9809883a 	mov	r4,r19
   11d9c:	00196ac0 	call	196ac <__ssprint_r>
   11da0:	103b501e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11da4:	d8c02017 	ldw	r3,128(sp)
   11da8:	dc401f17 	ldw	r17,124(sp)
   11dac:	da000404 	addi	r8,sp,16
   11db0:	003e8406 	br	117c4 <__alt_data_end+0xfc0117c4>
   11db4:	d9402d17 	ldw	r5,180(sp)
   11db8:	d9801e04 	addi	r6,sp,120
   11dbc:	9809883a 	mov	r4,r19
   11dc0:	00196ac0 	call	196ac <__ssprint_r>
   11dc4:	103b471e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11dc8:	d8c02017 	ldw	r3,128(sp)
   11dcc:	dc401f17 	ldw	r17,124(sp)
   11dd0:	dd800404 	addi	r22,sp,16
   11dd4:	003e8606 	br	117f0 <__alt_data_end+0xfc0117f0>
   11dd8:	0029883a 	mov	r20,zero
   11ddc:	a5000c04 	addi	r20,r20,48
   11de0:	dc001dc4 	addi	r16,sp,119
   11de4:	dd001dc5 	stb	r20,119(sp)
   11de8:	003f3806 	br	11acc <__alt_data_end+0xfc011acc>
   11dec:	d9402d17 	ldw	r5,180(sp)
   11df0:	d9801e04 	addi	r6,sp,120
   11df4:	9809883a 	mov	r4,r19
   11df8:	00196ac0 	call	196ac <__ssprint_r>
   11dfc:	103b391e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11e00:	d8c02017 	ldw	r3,128(sp)
   11e04:	da000404 	addi	r8,sp,16
   11e08:	003c7306 	br	10fd8 <__alt_data_end+0xfc010fd8>
   11e0c:	d9003617 	ldw	r4,216(sp)
   11e10:	d9403717 	ldw	r5,220(sp)
   11e14:	da003e15 	stw	r8,248(sp)
   11e18:	00194fc0 	call	194fc <__fpclassifyd>
   11e1c:	da003e17 	ldw	r8,248(sp)
   11e20:	1000bd1e 	bne	r2,zero,12118 <___svfprintf_internal_r+0x19d0>
   11e24:	008011c4 	movi	r2,71
   11e28:	14411e0e 	bge	r2,r17,122a4 <___svfprintf_internal_r+0x1b5c>
   11e2c:	040000f4 	movhi	r16,3
   11e30:	842eb904 	addi	r16,r16,-17692
   11e34:	00c000c4 	movi	r3,3
   11e38:	00bfdfc4 	movi	r2,-129
   11e3c:	d8c02915 	stw	r3,164(sp)
   11e40:	90a4703a 	and	r18,r18,r2
   11e44:	df002783 	ldbu	fp,158(sp)
   11e48:	d8c02b15 	stw	r3,172(sp)
   11e4c:	d8002a15 	stw	zero,168(sp)
   11e50:	d8003215 	stw	zero,200(sp)
   11e54:	003bfa06 	br	10e40 <__alt_data_end+0xfc010e40>
   11e58:	9080100c 	andi	r2,r18,64
   11e5c:	d8002785 	stb	zero,158(sp)
   11e60:	10009426 	beq	r2,zero,120b4 <___svfprintf_internal_r+0x196c>
   11e64:	d9402e17 	ldw	r5,184(sp)
   11e68:	d8c02a17 	ldw	r3,168(sp)
   11e6c:	002d883a 	mov	r22,zero
   11e70:	28800104 	addi	r2,r5,4
   11e74:	2d00000b 	ldhu	r20,0(r5)
   11e78:	183ec10e 	bge	r3,zero,11980 <__alt_data_end+0xfc011980>
   11e7c:	a586b03a 	or	r3,r20,r22
   11e80:	d8802e15 	stw	r2,184(sp)
   11e84:	183ec21e 	bne	r3,zero,11990 <__alt_data_end+0xfc011990>
   11e88:	0039883a 	mov	fp,zero
   11e8c:	0005883a 	mov	r2,zero
   11e90:	003db806 	br	11574 <__alt_data_end+0xfc011574>
   11e94:	d8c02e17 	ldw	r3,184(sp)
   11e98:	d9002e17 	ldw	r4,184(sp)
   11e9c:	d9402e17 	ldw	r5,184(sp)
   11ea0:	18c00017 	ldw	r3,0(r3)
   11ea4:	21000117 	ldw	r4,4(r4)
   11ea8:	29400204 	addi	r5,r5,8
   11eac:	d8c03615 	stw	r3,216(sp)
   11eb0:	d9003715 	stw	r4,220(sp)
   11eb4:	d9402e15 	stw	r5,184(sp)
   11eb8:	003b5a06 	br	10c24 <__alt_data_end+0xfc010c24>
   11ebc:	9080100c 	andi	r2,r18,64
   11ec0:	10010726 	beq	r2,zero,122e0 <___svfprintf_internal_r+0x1b98>
   11ec4:	d8802e17 	ldw	r2,184(sp)
   11ec8:	1500000f 	ldh	r20,0(r2)
   11ecc:	10800104 	addi	r2,r2,4
   11ed0:	d8802e15 	stw	r2,184(sp)
   11ed4:	a02dd7fa 	srai	r22,r20,31
   11ed8:	b005883a 	mov	r2,r22
   11edc:	003b7d06 	br	10cd4 <__alt_data_end+0xfc010cd4>
   11ee0:	9080100c 	andi	r2,r18,64
   11ee4:	10010526 	beq	r2,zero,122fc <___svfprintf_internal_r+0x1bb4>
   11ee8:	d8c02e17 	ldw	r3,184(sp)
   11eec:	002d883a 	mov	r22,zero
   11ef0:	1d00000b 	ldhu	r20,0(r3)
   11ef4:	18c00104 	addi	r3,r3,4
   11ef8:	d8c02e15 	stw	r3,184(sp)
   11efc:	003ce206 	br	11288 <__alt_data_end+0xfc011288>
   11f00:	bc400007 	ldb	r17,0(r23)
   11f04:	003a6506 	br	1089c <__alt_data_end+0xfc01089c>
   11f08:	9080040c 	andi	r2,r18,16
   11f0c:	10010126 	beq	r2,zero,12314 <___svfprintf_internal_r+0x1bcc>
   11f10:	d8c02e17 	ldw	r3,184(sp)
   11f14:	d9002f17 	ldw	r4,188(sp)
   11f18:	18800017 	ldw	r2,0(r3)
   11f1c:	18c00104 	addi	r3,r3,4
   11f20:	d8c02e15 	stw	r3,184(sp)
   11f24:	11000015 	stw	r4,0(r2)
   11f28:	003a3206 	br	107f4 <__alt_data_end+0xfc0107f4>
   11f2c:	d9002a17 	ldw	r4,168(sp)
   11f30:	d8002785 	stb	zero,158(sp)
   11f34:	203d8d16 	blt	r4,zero,1156c <__alt_data_end+0xfc01156c>
   11f38:	00bfdfc4 	movi	r2,-129
   11f3c:	90a4703a 	and	r18,r18,r2
   11f40:	003ad506 	br	10a98 <__alt_data_end+0xfc010a98>
   11f44:	014000f4 	movhi	r5,3
   11f48:	296ec684 	addi	r5,r5,-17638
   11f4c:	d9402c15 	stw	r5,176(sp)
   11f50:	d9402c17 	ldw	r5,176(sp)
   11f54:	1c47883a 	add	r3,r3,r17
   11f58:	10800044 	addi	r2,r2,1
   11f5c:	41400015 	stw	r5,0(r8)
   11f60:	44400115 	stw	r17,4(r8)
   11f64:	d8c02015 	stw	r3,128(sp)
   11f68:	d8801f15 	stw	r2,124(sp)
   11f6c:	010001c4 	movi	r4,7
   11f70:	20bf3016 	blt	r4,r2,11c34 <__alt_data_end+0xfc011c34>
   11f74:	42000204 	addi	r8,r8,8
   11f78:	003f3506 	br	11c50 <__alt_data_end+0xfc011c50>
   11f7c:	010000f4 	movhi	r4,3
   11f80:	212ec684 	addi	r4,r4,-17638
   11f84:	d9002c15 	stw	r4,176(sp)
   11f88:	003c3c06 	br	1107c <__alt_data_end+0xfc01107c>
   11f8c:	d9402d17 	ldw	r5,180(sp)
   11f90:	d9801e04 	addi	r6,sp,120
   11f94:	9809883a 	mov	r4,r19
   11f98:	00196ac0 	call	196ac <__ssprint_r>
   11f9c:	103ad11e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   11fa0:	d8c02017 	ldw	r3,128(sp)
   11fa4:	da000404 	addi	r8,sp,16
   11fa8:	003d9306 	br	115f8 <__alt_data_end+0xfc0115f8>
   11fac:	d8801f17 	ldw	r2,124(sp)
   11fb0:	014000f4 	movhi	r5,3
   11fb4:	01000044 	movi	r4,1
   11fb8:	18c00044 	addi	r3,r3,1
   11fbc:	10800044 	addi	r2,r2,1
   11fc0:	296ec604 	addi	r5,r5,-17640
   11fc4:	41000115 	stw	r4,4(r8)
   11fc8:	41400015 	stw	r5,0(r8)
   11fcc:	d8c02015 	stw	r3,128(sp)
   11fd0:	d8801f15 	stw	r2,124(sp)
   11fd4:	010001c4 	movi	r4,7
   11fd8:	2080b516 	blt	r4,r2,122b0 <___svfprintf_internal_r+0x1b68>
   11fdc:	42000204 	addi	r8,r8,8
   11fe0:	8800041e 	bne	r17,zero,11ff4 <___svfprintf_internal_r+0x18ac>
   11fe4:	d8803317 	ldw	r2,204(sp)
   11fe8:	1000021e 	bne	r2,zero,11ff4 <___svfprintf_internal_r+0x18ac>
   11fec:	9080004c 	andi	r2,r18,1
   11ff0:	103c3926 	beq	r2,zero,110d8 <__alt_data_end+0xfc0110d8>
   11ff4:	d9003817 	ldw	r4,224(sp)
   11ff8:	d8801f17 	ldw	r2,124(sp)
   11ffc:	d9403417 	ldw	r5,208(sp)
   12000:	20c7883a 	add	r3,r4,r3
   12004:	10800044 	addi	r2,r2,1
   12008:	41000115 	stw	r4,4(r8)
   1200c:	41400015 	stw	r5,0(r8)
   12010:	d8c02015 	stw	r3,128(sp)
   12014:	d8801f15 	stw	r2,124(sp)
   12018:	010001c4 	movi	r4,7
   1201c:	20818016 	blt	r4,r2,12620 <___svfprintf_internal_r+0x1ed8>
   12020:	42000204 	addi	r8,r8,8
   12024:	0463c83a 	sub	r17,zero,r17
   12028:	0440cb0e 	bge	zero,r17,12358 <___svfprintf_internal_r+0x1c10>
   1202c:	05800404 	movi	r22,16
   12030:	b440e80e 	bge	r22,r17,123d4 <___svfprintf_internal_r+0x1c8c>
   12034:	014000f4 	movhi	r5,3
   12038:	296ec684 	addi	r5,r5,-17638
   1203c:	d9402c15 	stw	r5,176(sp)
   12040:	070001c4 	movi	fp,7
   12044:	dd002d17 	ldw	r20,180(sp)
   12048:	00000306 	br	12058 <___svfprintf_internal_r+0x1910>
   1204c:	42000204 	addi	r8,r8,8
   12050:	8c7ffc04 	addi	r17,r17,-16
   12054:	b440e20e 	bge	r22,r17,123e0 <___svfprintf_internal_r+0x1c98>
   12058:	18c00404 	addi	r3,r3,16
   1205c:	10800044 	addi	r2,r2,1
   12060:	45400015 	stw	r21,0(r8)
   12064:	45800115 	stw	r22,4(r8)
   12068:	d8c02015 	stw	r3,128(sp)
   1206c:	d8801f15 	stw	r2,124(sp)
   12070:	e0bff60e 	bge	fp,r2,1204c <__alt_data_end+0xfc01204c>
   12074:	d9801e04 	addi	r6,sp,120
   12078:	a00b883a 	mov	r5,r20
   1207c:	9809883a 	mov	r4,r19
   12080:	00196ac0 	call	196ac <__ssprint_r>
   12084:	103a971e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   12088:	d8c02017 	ldw	r3,128(sp)
   1208c:	d8801f17 	ldw	r2,124(sp)
   12090:	da000404 	addi	r8,sp,16
   12094:	003fee06 	br	12050 <__alt_data_end+0xfc012050>
   12098:	d9002e17 	ldw	r4,184(sp)
   1209c:	d9402a17 	ldw	r5,168(sp)
   120a0:	002d883a 	mov	r22,zero
   120a4:	20800104 	addi	r2,r4,4
   120a8:	25000017 	ldw	r20,0(r4)
   120ac:	283e7d0e 	bge	r5,zero,11aa4 <__alt_data_end+0xfc011aa4>
   120b0:	003eda06 	br	11c1c <__alt_data_end+0xfc011c1c>
   120b4:	d9002e17 	ldw	r4,184(sp)
   120b8:	d9402a17 	ldw	r5,168(sp)
   120bc:	002d883a 	mov	r22,zero
   120c0:	20800104 	addi	r2,r4,4
   120c4:	25000017 	ldw	r20,0(r4)
   120c8:	283e2d0e 	bge	r5,zero,11980 <__alt_data_end+0xfc011980>
   120cc:	003f6b06 	br	11e7c <__alt_data_end+0xfc011e7c>
   120d0:	d8c02e15 	stw	r3,184(sp)
   120d4:	0039883a 	mov	fp,zero
   120d8:	003ed206 	br	11c24 <__alt_data_end+0xfc011c24>
   120dc:	bc400043 	ldbu	r17,1(r23)
   120e0:	84000814 	ori	r16,r16,32
   120e4:	bdc00044 	addi	r23,r23,1
   120e8:	8c403fcc 	andi	r17,r17,255
   120ec:	8c40201c 	xori	r17,r17,128
   120f0:	8c7fe004 	addi	r17,r17,-128
   120f4:	0039e906 	br	1089c <__alt_data_end+0xfc01089c>
   120f8:	d9402d17 	ldw	r5,180(sp)
   120fc:	d9801e04 	addi	r6,sp,120
   12100:	9809883a 	mov	r4,r19
   12104:	00196ac0 	call	196ac <__ssprint_r>
   12108:	103a761e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   1210c:	d8c02017 	ldw	r3,128(sp)
   12110:	da000404 	addi	r8,sp,16
   12114:	003d4a06 	br	11640 <__alt_data_end+0xfc011640>
   12118:	d9002a17 	ldw	r4,168(sp)
   1211c:	05bff7c4 	movi	r22,-33
   12120:	00bfffc4 	movi	r2,-1
   12124:	8dac703a 	and	r22,r17,r22
   12128:	20806a26 	beq	r4,r2,122d4 <___svfprintf_internal_r+0x1b8c>
   1212c:	008011c4 	movi	r2,71
   12130:	b0813726 	beq	r22,r2,12610 <___svfprintf_internal_r+0x1ec8>
   12134:	d9003717 	ldw	r4,220(sp)
   12138:	90c04014 	ori	r3,r18,256
   1213c:	d8c02c15 	stw	r3,176(sp)
   12140:	20015d16 	blt	r4,zero,126b8 <___svfprintf_internal_r+0x1f70>
   12144:	dd003717 	ldw	r20,220(sp)
   12148:	d8002905 	stb	zero,164(sp)
   1214c:	00801984 	movi	r2,102
   12150:	88814026 	beq	r17,r2,12654 <___svfprintf_internal_r+0x1f0c>
   12154:	00801184 	movi	r2,70
   12158:	88817126 	beq	r17,r2,12720 <___svfprintf_internal_r+0x1fd8>
   1215c:	00801144 	movi	r2,69
   12160:	b0816226 	beq	r22,r2,126ec <___svfprintf_internal_r+0x1fa4>
   12164:	d8c02a17 	ldw	r3,168(sp)
   12168:	d8802104 	addi	r2,sp,132
   1216c:	d8800315 	stw	r2,12(sp)
   12170:	d9403617 	ldw	r5,216(sp)
   12174:	d8802504 	addi	r2,sp,148
   12178:	d8800215 	stw	r2,8(sp)
   1217c:	d8802604 	addi	r2,sp,152
   12180:	d8c00015 	stw	r3,0(sp)
   12184:	d8800115 	stw	r2,4(sp)
   12188:	01c00084 	movi	r7,2
   1218c:	a00d883a 	mov	r6,r20
   12190:	9809883a 	mov	r4,r19
   12194:	d8c03d15 	stw	r3,244(sp)
   12198:	da003e15 	stw	r8,248(sp)
   1219c:	001513c0 	call	1513c <_dtoa_r>
   121a0:	1021883a 	mov	r16,r2
   121a4:	008019c4 	movi	r2,103
   121a8:	d8c03d17 	ldw	r3,244(sp)
   121ac:	da003e17 	ldw	r8,248(sp)
   121b0:	8880e726 	beq	r17,r2,12550 <___svfprintf_internal_r+0x1e08>
   121b4:	008011c4 	movi	r2,71
   121b8:	8880d426 	beq	r17,r2,1250c <___svfprintf_internal_r+0x1dc4>
   121bc:	80f9883a 	add	fp,r16,r3
   121c0:	d9003617 	ldw	r4,216(sp)
   121c4:	000d883a 	mov	r6,zero
   121c8:	000f883a 	mov	r7,zero
   121cc:	a00b883a 	mov	r5,r20
   121d0:	da003e15 	stw	r8,248(sp)
   121d4:	001ea9c0 	call	1ea9c <__eqdf2>
   121d8:	da003e17 	ldw	r8,248(sp)
   121dc:	1000e426 	beq	r2,zero,12570 <___svfprintf_internal_r+0x1e28>
   121e0:	d8802117 	ldw	r2,132(sp)
   121e4:	1700062e 	bgeu	r2,fp,12200 <___svfprintf_internal_r+0x1ab8>
   121e8:	01000c04 	movi	r4,48
   121ec:	10c00044 	addi	r3,r2,1
   121f0:	d8c02115 	stw	r3,132(sp)
   121f4:	11000005 	stb	r4,0(r2)
   121f8:	d8802117 	ldw	r2,132(sp)
   121fc:	173ffb36 	bltu	r2,fp,121ec <__alt_data_end+0xfc0121ec>
   12200:	1405c83a 	sub	r2,r2,r16
   12204:	d8803315 	stw	r2,204(sp)
   12208:	008011c4 	movi	r2,71
   1220c:	b080c526 	beq	r22,r2,12524 <___svfprintf_internal_r+0x1ddc>
   12210:	00801944 	movi	r2,101
   12214:	1441d80e 	bge	r2,r17,12978 <___svfprintf_internal_r+0x2230>
   12218:	d8c02617 	ldw	r3,152(sp)
   1221c:	00801984 	movi	r2,102
   12220:	d8c03215 	stw	r3,200(sp)
   12224:	88813426 	beq	r17,r2,126f8 <___svfprintf_internal_r+0x1fb0>
   12228:	d8c03217 	ldw	r3,200(sp)
   1222c:	d9003317 	ldw	r4,204(sp)
   12230:	19012516 	blt	r3,r4,126c8 <___svfprintf_internal_r+0x1f80>
   12234:	9480004c 	andi	r18,r18,1
   12238:	9001841e 	bne	r18,zero,1284c <___svfprintf_internal_r+0x2104>
   1223c:	1805883a 	mov	r2,r3
   12240:	1801cb16 	blt	r3,zero,12970 <___svfprintf_internal_r+0x2228>
   12244:	d8c03217 	ldw	r3,200(sp)
   12248:	044019c4 	movi	r17,103
   1224c:	d8c02b15 	stw	r3,172(sp)
   12250:	df002907 	ldb	fp,164(sp)
   12254:	e000a61e 	bne	fp,zero,124f0 <___svfprintf_internal_r+0x1da8>
   12258:	df002783 	ldbu	fp,158(sp)
   1225c:	d8802915 	stw	r2,164(sp)
   12260:	dc802c17 	ldw	r18,176(sp)
   12264:	d8002a15 	stw	zero,168(sp)
   12268:	003af506 	br	10e40 <__alt_data_end+0xfc010e40>
   1226c:	040000f4 	movhi	r16,3
   12270:	842eb604 	addi	r16,r16,-17704
   12274:	003a7e06 	br	10c70 <__alt_data_end+0xfc010c70>
   12278:	d9003917 	ldw	r4,228(sp)
   1227c:	04001004 	movi	r16,64
   12280:	800b883a 	mov	r5,r16
   12284:	000f5dc0 	call	f5dc <_malloc_r>
   12288:	d9002d17 	ldw	r4,180(sp)
   1228c:	20800015 	stw	r2,0(r4)
   12290:	20800415 	stw	r2,16(r4)
   12294:	1001d026 	beq	r2,zero,129d8 <___svfprintf_internal_r+0x2290>
   12298:	d8802d17 	ldw	r2,180(sp)
   1229c:	14000515 	stw	r16,20(r2)
   122a0:	00394406 	br	107b4 <__alt_data_end+0xfc0107b4>
   122a4:	040000f4 	movhi	r16,3
   122a8:	842eb804 	addi	r16,r16,-17696
   122ac:	003ee106 	br	11e34 <__alt_data_end+0xfc011e34>
   122b0:	d9402d17 	ldw	r5,180(sp)
   122b4:	d9801e04 	addi	r6,sp,120
   122b8:	9809883a 	mov	r4,r19
   122bc:	00196ac0 	call	196ac <__ssprint_r>
   122c0:	103a081e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   122c4:	dc402617 	ldw	r17,152(sp)
   122c8:	d8c02017 	ldw	r3,128(sp)
   122cc:	da000404 	addi	r8,sp,16
   122d0:	003f4306 	br	11fe0 <__alt_data_end+0xfc011fe0>
   122d4:	01400184 	movi	r5,6
   122d8:	d9402a15 	stw	r5,168(sp)
   122dc:	003f9506 	br	12134 <__alt_data_end+0xfc012134>
   122e0:	d8c02e17 	ldw	r3,184(sp)
   122e4:	1d000017 	ldw	r20,0(r3)
   122e8:	18c00104 	addi	r3,r3,4
   122ec:	d8c02e15 	stw	r3,184(sp)
   122f0:	a02dd7fa 	srai	r22,r20,31
   122f4:	b005883a 	mov	r2,r22
   122f8:	003a7606 	br	10cd4 <__alt_data_end+0xfc010cd4>
   122fc:	d9002e17 	ldw	r4,184(sp)
   12300:	002d883a 	mov	r22,zero
   12304:	25000017 	ldw	r20,0(r4)
   12308:	21000104 	addi	r4,r4,4
   1230c:	d9002e15 	stw	r4,184(sp)
   12310:	003bdd06 	br	11288 <__alt_data_end+0xfc011288>
   12314:	9480100c 	andi	r18,r18,64
   12318:	90006e26 	beq	r18,zero,124d4 <___svfprintf_internal_r+0x1d8c>
   1231c:	d9402e17 	ldw	r5,184(sp)
   12320:	d8c02f17 	ldw	r3,188(sp)
   12324:	28800017 	ldw	r2,0(r5)
   12328:	29400104 	addi	r5,r5,4
   1232c:	d9402e15 	stw	r5,184(sp)
   12330:	10c0000d 	sth	r3,0(r2)
   12334:	00392f06 	br	107f4 <__alt_data_end+0xfc0107f4>
   12338:	d9402d17 	ldw	r5,180(sp)
   1233c:	d9801e04 	addi	r6,sp,120
   12340:	9809883a 	mov	r4,r19
   12344:	00196ac0 	call	196ac <__ssprint_r>
   12348:	1039e61e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   1234c:	d8c02017 	ldw	r3,128(sp)
   12350:	d8801f17 	ldw	r2,124(sp)
   12354:	da000404 	addi	r8,sp,16
   12358:	d9403317 	ldw	r5,204(sp)
   1235c:	10800044 	addi	r2,r2,1
   12360:	44000015 	stw	r16,0(r8)
   12364:	28c7883a 	add	r3,r5,r3
   12368:	003b5506 	br	110c0 <__alt_data_end+0xfc0110c0>
   1236c:	8009883a 	mov	r4,r16
   12370:	df003e15 	stw	fp,248(sp)
   12374:	00106b00 	call	106b0 <strlen>
   12378:	d8802b15 	stw	r2,172(sp)
   1237c:	da003e17 	ldw	r8,248(sp)
   12380:	103c160e 	bge	r2,zero,113dc <__alt_data_end+0xfc0113dc>
   12384:	0005883a 	mov	r2,zero
   12388:	003c1406 	br	113dc <__alt_data_end+0xfc0113dc>
   1238c:	00bfffc4 	movi	r2,-1
   12390:	0039d906 	br	10af8 <__alt_data_end+0xfc010af8>
   12394:	010000f4 	movhi	r4,3
   12398:	212eca84 	addi	r4,r4,-17622
   1239c:	d9003515 	stw	r4,212(sp)
   123a0:	003ae406 	br	10f34 <__alt_data_end+0xfc010f34>
   123a4:	013fffc4 	movi	r4,-1
   123a8:	0039fa06 	br	10b94 <__alt_data_end+0xfc010b94>
   123ac:	d9402d17 	ldw	r5,180(sp)
   123b0:	d9801e04 	addi	r6,sp,120
   123b4:	9809883a 	mov	r4,r19
   123b8:	00196ac0 	call	196ac <__ssprint_r>
   123bc:	1039c91e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   123c0:	d8c02017 	ldw	r3,128(sp)
   123c4:	da000404 	addi	r8,sp,16
   123c8:	003d8406 	br	119dc <__alt_data_end+0xfc0119dc>
   123cc:	0023883a 	mov	r17,zero
   123d0:	003d8306 	br	119e0 <__alt_data_end+0xfc0119e0>
   123d4:	010000f4 	movhi	r4,3
   123d8:	212ec684 	addi	r4,r4,-17638
   123dc:	d9002c15 	stw	r4,176(sp)
   123e0:	d9002c17 	ldw	r4,176(sp)
   123e4:	1c47883a 	add	r3,r3,r17
   123e8:	10800044 	addi	r2,r2,1
   123ec:	41000015 	stw	r4,0(r8)
   123f0:	44400115 	stw	r17,4(r8)
   123f4:	d8c02015 	stw	r3,128(sp)
   123f8:	d8801f15 	stw	r2,124(sp)
   123fc:	010001c4 	movi	r4,7
   12400:	20bfcd16 	blt	r4,r2,12338 <__alt_data_end+0xfc012338>
   12404:	42000204 	addi	r8,r8,8
   12408:	003fd306 	br	12358 <__alt_data_end+0xfc012358>
   1240c:	d9402d17 	ldw	r5,180(sp)
   12410:	d9801e04 	addi	r6,sp,120
   12414:	9809883a 	mov	r4,r19
   12418:	00196ac0 	call	196ac <__ssprint_r>
   1241c:	1039b11e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   12420:	d8802617 	ldw	r2,152(sp)
   12424:	d8c02017 	ldw	r3,128(sp)
   12428:	da000404 	addi	r8,sp,16
   1242c:	003e1c06 	br	11ca0 <__alt_data_end+0xfc011ca0>
   12430:	d8802a17 	ldw	r2,168(sp)
   12434:	00c00184 	movi	r3,6
   12438:	1880012e 	bgeu	r3,r2,12440 <___svfprintf_internal_r+0x1cf8>
   1243c:	1805883a 	mov	r2,r3
   12440:	d8802b15 	stw	r2,172(sp)
   12444:	1000f316 	blt	r2,zero,12814 <___svfprintf_internal_r+0x20cc>
   12448:	040000f4 	movhi	r16,3
   1244c:	d8802915 	stw	r2,164(sp)
   12450:	dd002e15 	stw	r20,184(sp)
   12454:	d8002a15 	stw	zero,168(sp)
   12458:	d8003215 	stw	zero,200(sp)
   1245c:	842ec404 	addi	r16,r16,-17648
   12460:	0039883a 	mov	fp,zero
   12464:	003a7d06 	br	10e5c <__alt_data_end+0xfc010e5c>
   12468:	010000f4 	movhi	r4,3
   1246c:	212eca84 	addi	r4,r4,-17622
   12470:	d9003515 	stw	r4,212(sp)
   12474:	003b3d06 	br	1116c <__alt_data_end+0xfc01116c>
   12478:	d9402d17 	ldw	r5,180(sp)
   1247c:	d9801e04 	addi	r6,sp,120
   12480:	9809883a 	mov	r4,r19
   12484:	00196ac0 	call	196ac <__ssprint_r>
   12488:	1039961e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   1248c:	d8802617 	ldw	r2,152(sp)
   12490:	d9403317 	ldw	r5,204(sp)
   12494:	d8c02017 	ldw	r3,128(sp)
   12498:	da000404 	addi	r8,sp,16
   1249c:	2885c83a 	sub	r2,r5,r2
   124a0:	003e1006 	br	11ce4 <__alt_data_end+0xfc011ce4>
   124a4:	00800044 	movi	r2,1
   124a8:	10803fcc 	andi	r2,r2,255
   124ac:	00c00044 	movi	r3,1
   124b0:	10fa1026 	beq	r2,r3,10cf4 <__alt_data_end+0xfc010cf4>
   124b4:	00c00084 	movi	r3,2
   124b8:	10fb8226 	beq	r2,r3,112c4 <__alt_data_end+0xfc0112c4>
   124bc:	003a4206 	br	10dc8 <__alt_data_end+0xfc010dc8>
   124c0:	0021883a 	mov	r16,zero
   124c4:	003e0806 	br	11ce8 <__alt_data_end+0xfc011ce8>
   124c8:	07000b44 	movi	fp,45
   124cc:	df002785 	stb	fp,158(sp)
   124d0:	0039e306 	br	10c60 <__alt_data_end+0xfc010c60>
   124d4:	d9002e17 	ldw	r4,184(sp)
   124d8:	d9402f17 	ldw	r5,188(sp)
   124dc:	20800017 	ldw	r2,0(r4)
   124e0:	21000104 	addi	r4,r4,4
   124e4:	d9002e15 	stw	r4,184(sp)
   124e8:	11400015 	stw	r5,0(r2)
   124ec:	0038c106 	br	107f4 <__alt_data_end+0xfc0107f4>
   124f0:	00c00b44 	movi	r3,45
   124f4:	d8c02785 	stb	r3,158(sp)
   124f8:	d8802915 	stw	r2,164(sp)
   124fc:	dc802c17 	ldw	r18,176(sp)
   12500:	d8002a15 	stw	zero,168(sp)
   12504:	07000b44 	movi	fp,45
   12508:	003a5106 	br	10e50 <__alt_data_end+0xfc010e50>
   1250c:	9080004c 	andi	r2,r18,1
   12510:	1000941e 	bne	r2,zero,12764 <___svfprintf_internal_r+0x201c>
   12514:	d8802117 	ldw	r2,132(sp)
   12518:	1405c83a 	sub	r2,r2,r16
   1251c:	d8803315 	stw	r2,204(sp)
   12520:	b441151e 	bne	r22,r17,12978 <___svfprintf_internal_r+0x2230>
   12524:	dd802617 	ldw	r22,152(sp)
   12528:	00bfff44 	movi	r2,-3
   1252c:	b0801a16 	blt	r22,r2,12598 <___svfprintf_internal_r+0x1e50>
   12530:	d9402a17 	ldw	r5,168(sp)
   12534:	2d801816 	blt	r5,r22,12598 <___svfprintf_internal_r+0x1e50>
   12538:	dd803215 	stw	r22,200(sp)
   1253c:	003f3a06 	br	12228 <__alt_data_end+0xfc012228>
   12540:	1025883a 	mov	r18,r2
   12544:	0039883a 	mov	fp,zero
   12548:	00800084 	movi	r2,2
   1254c:	003fd606 	br	124a8 <__alt_data_end+0xfc0124a8>
   12550:	9080004c 	andi	r2,r18,1
   12554:	103f191e 	bne	r2,zero,121bc <__alt_data_end+0xfc0121bc>
   12558:	d8802117 	ldw	r2,132(sp)
   1255c:	003f2806 	br	12200 <__alt_data_end+0xfc012200>
   12560:	010000f4 	movhi	r4,3
   12564:	212ec684 	addi	r4,r4,-17638
   12568:	d9002c15 	stw	r4,176(sp)
   1256c:	003c7c06 	br	11760 <__alt_data_end+0xfc011760>
   12570:	e005883a 	mov	r2,fp
   12574:	003f2206 	br	12200 <__alt_data_end+0xfc012200>
   12578:	d9002a17 	ldw	r4,168(sp)
   1257c:	df002783 	ldbu	fp,158(sp)
   12580:	dd002e15 	stw	r20,184(sp)
   12584:	d9002915 	stw	r4,164(sp)
   12588:	d9002b15 	stw	r4,172(sp)
   1258c:	d8002a15 	stw	zero,168(sp)
   12590:	d8003215 	stw	zero,200(sp)
   12594:	003a2a06 	br	10e40 <__alt_data_end+0xfc010e40>
   12598:	8c7fff84 	addi	r17,r17,-2
   1259c:	b5bfffc4 	addi	r22,r22,-1
   125a0:	dd802615 	stw	r22,152(sp)
   125a4:	dc4022c5 	stb	r17,139(sp)
   125a8:	b000c316 	blt	r22,zero,128b8 <___svfprintf_internal_r+0x2170>
   125ac:	00800ac4 	movi	r2,43
   125b0:	d8802305 	stb	r2,140(sp)
   125b4:	00800244 	movi	r2,9
   125b8:	15806e16 	blt	r2,r22,12774 <___svfprintf_internal_r+0x202c>
   125bc:	00800c04 	movi	r2,48
   125c0:	b5800c04 	addi	r22,r22,48
   125c4:	d8802345 	stb	r2,141(sp)
   125c8:	dd802385 	stb	r22,142(sp)
   125cc:	d88023c4 	addi	r2,sp,143
   125d0:	df0022c4 	addi	fp,sp,139
   125d4:	d8c03317 	ldw	r3,204(sp)
   125d8:	1739c83a 	sub	fp,r2,fp
   125dc:	d9003317 	ldw	r4,204(sp)
   125e0:	e0c7883a 	add	r3,fp,r3
   125e4:	df003b15 	stw	fp,236(sp)
   125e8:	d8c02b15 	stw	r3,172(sp)
   125ec:	00800044 	movi	r2,1
   125f0:	1100b70e 	bge	r2,r4,128d0 <___svfprintf_internal_r+0x2188>
   125f4:	d8c02b17 	ldw	r3,172(sp)
   125f8:	18c00044 	addi	r3,r3,1
   125fc:	d8c02b15 	stw	r3,172(sp)
   12600:	1805883a 	mov	r2,r3
   12604:	1800b016 	blt	r3,zero,128c8 <___svfprintf_internal_r+0x2180>
   12608:	d8003215 	stw	zero,200(sp)
   1260c:	003f1006 	br	12250 <__alt_data_end+0xfc012250>
   12610:	d8802a17 	ldw	r2,168(sp)
   12614:	103ec71e 	bne	r2,zero,12134 <__alt_data_end+0xfc012134>
   12618:	dc002a15 	stw	r16,168(sp)
   1261c:	003ec506 	br	12134 <__alt_data_end+0xfc012134>
   12620:	d9402d17 	ldw	r5,180(sp)
   12624:	d9801e04 	addi	r6,sp,120
   12628:	9809883a 	mov	r4,r19
   1262c:	00196ac0 	call	196ac <__ssprint_r>
   12630:	10392c1e 	bne	r2,zero,10ae4 <__alt_data_end+0xfc010ae4>
   12634:	dc402617 	ldw	r17,152(sp)
   12638:	d8c02017 	ldw	r3,128(sp)
   1263c:	d8801f17 	ldw	r2,124(sp)
   12640:	da000404 	addi	r8,sp,16
   12644:	003e7706 	br	12024 <__alt_data_end+0xfc012024>
   12648:	182f883a 	mov	r23,r3
   1264c:	d8002a15 	stw	zero,168(sp)
   12650:	00389306 	br	108a0 <__alt_data_end+0xfc0108a0>
   12654:	d8c02a17 	ldw	r3,168(sp)
   12658:	d8802104 	addi	r2,sp,132
   1265c:	d8800315 	stw	r2,12(sp)
   12660:	d9403617 	ldw	r5,216(sp)
   12664:	d8802504 	addi	r2,sp,148
   12668:	d8800215 	stw	r2,8(sp)
   1266c:	d8802604 	addi	r2,sp,152
   12670:	d8c00015 	stw	r3,0(sp)
   12674:	9809883a 	mov	r4,r19
   12678:	d8800115 	stw	r2,4(sp)
   1267c:	01c000c4 	movi	r7,3
   12680:	a00d883a 	mov	r6,r20
   12684:	da003e15 	stw	r8,248(sp)
   12688:	001513c0 	call	1513c <_dtoa_r>
   1268c:	d9002a17 	ldw	r4,168(sp)
   12690:	da003e17 	ldw	r8,248(sp)
   12694:	1021883a 	mov	r16,r2
   12698:	1139883a 	add	fp,r2,r4
   1269c:	2007883a 	mov	r3,r4
   126a0:	81000007 	ldb	r4,0(r16)
   126a4:	00800c04 	movi	r2,48
   126a8:	20806f26 	beq	r4,r2,12868 <___svfprintf_internal_r+0x2120>
   126ac:	d8c02617 	ldw	r3,152(sp)
   126b0:	e0f9883a 	add	fp,fp,r3
   126b4:	003ec206 	br	121c0 <__alt_data_end+0xfc0121c0>
   126b8:	00c00b44 	movi	r3,45
   126bc:	2520003c 	xorhi	r20,r4,32768
   126c0:	d8c02905 	stb	r3,164(sp)
   126c4:	003ea106 	br	1214c <__alt_data_end+0xfc01214c>
   126c8:	d8c03217 	ldw	r3,200(sp)
   126cc:	00c0890e 	bge	zero,r3,128f4 <___svfprintf_internal_r+0x21ac>
   126d0:	00800044 	movi	r2,1
   126d4:	d9003317 	ldw	r4,204(sp)
   126d8:	1105883a 	add	r2,r2,r4
   126dc:	d8802b15 	stw	r2,172(sp)
   126e0:	10005f16 	blt	r2,zero,12860 <___svfprintf_internal_r+0x2118>
   126e4:	044019c4 	movi	r17,103
   126e8:	003ed906 	br	12250 <__alt_data_end+0xfc012250>
   126ec:	d9002a17 	ldw	r4,168(sp)
   126f0:	20c00044 	addi	r3,r4,1
   126f4:	003e9c06 	br	12168 <__alt_data_end+0xfc012168>
   126f8:	d9002a17 	ldw	r4,168(sp)
   126fc:	00c0680e 	bge	zero,r3,128a0 <___svfprintf_internal_r+0x2158>
   12700:	2000461e 	bne	r4,zero,1281c <___svfprintf_internal_r+0x20d4>
   12704:	9480004c 	andi	r18,r18,1
   12708:	9000441e 	bne	r18,zero,1281c <___svfprintf_internal_r+0x20d4>
   1270c:	1805883a 	mov	r2,r3
   12710:	1800a116 	blt	r3,zero,12998 <___svfprintf_internal_r+0x2250>
   12714:	d8c03217 	ldw	r3,200(sp)
   12718:	d8c02b15 	stw	r3,172(sp)
   1271c:	003ecc06 	br	12250 <__alt_data_end+0xfc012250>
   12720:	d9402a17 	ldw	r5,168(sp)
   12724:	d8802104 	addi	r2,sp,132
   12728:	d8800315 	stw	r2,12(sp)
   1272c:	d9400015 	stw	r5,0(sp)
   12730:	d8802504 	addi	r2,sp,148
   12734:	d9403617 	ldw	r5,216(sp)
   12738:	d8800215 	stw	r2,8(sp)
   1273c:	d8802604 	addi	r2,sp,152
   12740:	d8800115 	stw	r2,4(sp)
   12744:	01c000c4 	movi	r7,3
   12748:	a00d883a 	mov	r6,r20
   1274c:	9809883a 	mov	r4,r19
   12750:	da003e15 	stw	r8,248(sp)
   12754:	001513c0 	call	1513c <_dtoa_r>
   12758:	d8c02a17 	ldw	r3,168(sp)
   1275c:	da003e17 	ldw	r8,248(sp)
   12760:	1021883a 	mov	r16,r2
   12764:	00801184 	movi	r2,70
   12768:	80f9883a 	add	fp,r16,r3
   1276c:	88bfcc26 	beq	r17,r2,126a0 <__alt_data_end+0xfc0126a0>
   12770:	003e9306 	br	121c0 <__alt_data_end+0xfc0121c0>
   12774:	df0022c4 	addi	fp,sp,139
   12778:	dc002a15 	stw	r16,168(sp)
   1277c:	9829883a 	mov	r20,r19
   12780:	e021883a 	mov	r16,fp
   12784:	4027883a 	mov	r19,r8
   12788:	b009883a 	mov	r4,r22
   1278c:	01400284 	movi	r5,10
   12790:	000d8080 	call	d808 <__modsi3>
   12794:	10800c04 	addi	r2,r2,48
   12798:	843fffc4 	addi	r16,r16,-1
   1279c:	b009883a 	mov	r4,r22
   127a0:	01400284 	movi	r5,10
   127a4:	80800005 	stb	r2,0(r16)
   127a8:	000d7840 	call	d784 <__divsi3>
   127ac:	102d883a 	mov	r22,r2
   127b0:	00800244 	movi	r2,9
   127b4:	15bff416 	blt	r2,r22,12788 <__alt_data_end+0xfc012788>
   127b8:	9811883a 	mov	r8,r19
   127bc:	b0800c04 	addi	r2,r22,48
   127c0:	a027883a 	mov	r19,r20
   127c4:	8029883a 	mov	r20,r16
   127c8:	a17fffc4 	addi	r5,r20,-1
   127cc:	a0bfffc5 	stb	r2,-1(r20)
   127d0:	dc002a17 	ldw	r16,168(sp)
   127d4:	2f00782e 	bgeu	r5,fp,129b8 <___svfprintf_internal_r+0x2270>
   127d8:	d9c02384 	addi	r7,sp,142
   127dc:	3d0fc83a 	sub	r7,r7,r20
   127e0:	d9002344 	addi	r4,sp,141
   127e4:	e1cf883a 	add	r7,fp,r7
   127e8:	00000106 	br	127f0 <___svfprintf_internal_r+0x20a8>
   127ec:	28800003 	ldbu	r2,0(r5)
   127f0:	20800005 	stb	r2,0(r4)
   127f4:	21000044 	addi	r4,r4,1
   127f8:	29400044 	addi	r5,r5,1
   127fc:	21fffb1e 	bne	r4,r7,127ec <__alt_data_end+0xfc0127ec>
   12800:	d8802304 	addi	r2,sp,140
   12804:	1505c83a 	sub	r2,r2,r20
   12808:	d8c02344 	addi	r3,sp,141
   1280c:	1885883a 	add	r2,r3,r2
   12810:	003f7006 	br	125d4 <__alt_data_end+0xfc0125d4>
   12814:	0005883a 	mov	r2,zero
   12818:	003f0b06 	br	12448 <__alt_data_end+0xfc012448>
   1281c:	d9002a17 	ldw	r4,168(sp)
   12820:	d8c03217 	ldw	r3,200(sp)
   12824:	20800044 	addi	r2,r4,1
   12828:	1885883a 	add	r2,r3,r2
   1282c:	d8802b15 	stw	r2,172(sp)
   12830:	103e870e 	bge	r2,zero,12250 <__alt_data_end+0xfc012250>
   12834:	0005883a 	mov	r2,zero
   12838:	003e8506 	br	12250 <__alt_data_end+0xfc012250>
   1283c:	010000f4 	movhi	r4,3
   12840:	212ec684 	addi	r4,r4,-17638
   12844:	d9002c15 	stw	r4,176(sp)
   12848:	003cc506 	br	11b60 <__alt_data_end+0xfc011b60>
   1284c:	d8c03217 	ldw	r3,200(sp)
   12850:	18c00044 	addi	r3,r3,1
   12854:	d8c02b15 	stw	r3,172(sp)
   12858:	1805883a 	mov	r2,r3
   1285c:	183fa10e 	bge	r3,zero,126e4 <__alt_data_end+0xfc0126e4>
   12860:	0005883a 	mov	r2,zero
   12864:	003f9f06 	br	126e4 <__alt_data_end+0xfc0126e4>
   12868:	d9003617 	ldw	r4,216(sp)
   1286c:	000d883a 	mov	r6,zero
   12870:	000f883a 	mov	r7,zero
   12874:	a00b883a 	mov	r5,r20
   12878:	d8c03d15 	stw	r3,244(sp)
   1287c:	da003e15 	stw	r8,248(sp)
   12880:	001ea9c0 	call	1ea9c <__eqdf2>
   12884:	d8c03d17 	ldw	r3,244(sp)
   12888:	da003e17 	ldw	r8,248(sp)
   1288c:	103f8726 	beq	r2,zero,126ac <__alt_data_end+0xfc0126ac>
   12890:	00800044 	movi	r2,1
   12894:	10c7c83a 	sub	r3,r2,r3
   12898:	d8c02615 	stw	r3,152(sp)
   1289c:	003f8406 	br	126b0 <__alt_data_end+0xfc0126b0>
   128a0:	20000e1e 	bne	r4,zero,128dc <___svfprintf_internal_r+0x2194>
   128a4:	9480004c 	andi	r18,r18,1
   128a8:	90000c1e 	bne	r18,zero,128dc <___svfprintf_internal_r+0x2194>
   128ac:	00800044 	movi	r2,1
   128b0:	d8802b15 	stw	r2,172(sp)
   128b4:	003e6606 	br	12250 <__alt_data_end+0xfc012250>
   128b8:	00800b44 	movi	r2,45
   128bc:	05adc83a 	sub	r22,zero,r22
   128c0:	d8802305 	stb	r2,140(sp)
   128c4:	003f3b06 	br	125b4 <__alt_data_end+0xfc0125b4>
   128c8:	0005883a 	mov	r2,zero
   128cc:	003f4e06 	br	12608 <__alt_data_end+0xfc012608>
   128d0:	90a4703a 	and	r18,r18,r2
   128d4:	903f4a26 	beq	r18,zero,12600 <__alt_data_end+0xfc012600>
   128d8:	003f4606 	br	125f4 <__alt_data_end+0xfc0125f4>
   128dc:	d8c02a17 	ldw	r3,168(sp)
   128e0:	18c00084 	addi	r3,r3,2
   128e4:	d8c02b15 	stw	r3,172(sp)
   128e8:	1805883a 	mov	r2,r3
   128ec:	183e580e 	bge	r3,zero,12250 <__alt_data_end+0xfc012250>
   128f0:	003fd006 	br	12834 <__alt_data_end+0xfc012834>
   128f4:	00800084 	movi	r2,2
   128f8:	10c5c83a 	sub	r2,r2,r3
   128fc:	003f7506 	br	126d4 <__alt_data_end+0xfc0126d4>
   12900:	d9402e17 	ldw	r5,184(sp)
   12904:	d9002e17 	ldw	r4,184(sp)
   12908:	bc400043 	ldbu	r17,1(r23)
   1290c:	29400017 	ldw	r5,0(r5)
   12910:	20800104 	addi	r2,r4,4
   12914:	d8802e15 	stw	r2,184(sp)
   12918:	d9402a15 	stw	r5,168(sp)
   1291c:	182f883a 	mov	r23,r3
   12920:	283df10e 	bge	r5,zero,120e8 <__alt_data_end+0xfc0120e8>
   12924:	8c403fcc 	andi	r17,r17,255
   12928:	017fffc4 	movi	r5,-1
   1292c:	8c40201c 	xori	r17,r17,128
   12930:	d9402a15 	stw	r5,168(sp)
   12934:	8c7fe004 	addi	r17,r17,-128
   12938:	0037d806 	br	1089c <__alt_data_end+0xfc01089c>
   1293c:	9080004c 	andi	r2,r18,1
   12940:	0039883a 	mov	fp,zero
   12944:	10000726 	beq	r2,zero,12964 <___svfprintf_internal_r+0x221c>
   12948:	d8c02817 	ldw	r3,160(sp)
   1294c:	dc001dc4 	addi	r16,sp,119
   12950:	00800c04 	movi	r2,48
   12954:	1c07c83a 	sub	r3,r3,r16
   12958:	d8801dc5 	stb	r2,119(sp)
   1295c:	d8c02b15 	stw	r3,172(sp)
   12960:	00393106 	br	10e28 <__alt_data_end+0xfc010e28>
   12964:	d8002b15 	stw	zero,172(sp)
   12968:	dc001e04 	addi	r16,sp,120
   1296c:	00392e06 	br	10e28 <__alt_data_end+0xfc010e28>
   12970:	0005883a 	mov	r2,zero
   12974:	003e3306 	br	12244 <__alt_data_end+0xfc012244>
   12978:	dd802617 	ldw	r22,152(sp)
   1297c:	003f0706 	br	1259c <__alt_data_end+0xfc01259c>
   12980:	d8c02b03 	ldbu	r3,172(sp)
   12984:	d8c02785 	stb	r3,158(sp)
   12988:	003a3506 	br	11260 <__alt_data_end+0xfc011260>
   1298c:	d8c02b03 	ldbu	r3,172(sp)
   12990:	d8c02785 	stb	r3,158(sp)
   12994:	003a1706 	br	111f4 <__alt_data_end+0xfc0111f4>
   12998:	0005883a 	mov	r2,zero
   1299c:	003f5d06 	br	12714 <__alt_data_end+0xfc012714>
   129a0:	d8c02b03 	ldbu	r3,172(sp)
   129a4:	d8c02785 	stb	r3,158(sp)
   129a8:	0038f306 	br	10d78 <__alt_data_end+0xfc010d78>
   129ac:	d8c02b03 	ldbu	r3,172(sp)
   129b0:	d8c02785 	stb	r3,158(sp)
   129b4:	0038be06 	br	10cb0 <__alt_data_end+0xfc010cb0>
   129b8:	d8802344 	addi	r2,sp,141
   129bc:	003f0506 	br	125d4 <__alt_data_end+0xfc0125d4>
   129c0:	d8c02b03 	ldbu	r3,172(sp)
   129c4:	d8c02785 	stb	r3,158(sp)
   129c8:	00388b06 	br	10bf8 <__alt_data_end+0xfc010bf8>
   129cc:	d8c02b03 	ldbu	r3,172(sp)
   129d0:	d8c02785 	stb	r3,158(sp)
   129d4:	003ad706 	br	11534 <__alt_data_end+0xfc011534>
   129d8:	d9403917 	ldw	r5,228(sp)
   129dc:	00800304 	movi	r2,12
   129e0:	28800015 	stw	r2,0(r5)
   129e4:	00bfffc4 	movi	r2,-1
   129e8:	00384306 	br	10af8 <__alt_data_end+0xfc010af8>
   129ec:	d8c02b03 	ldbu	r3,172(sp)
   129f0:	d8c02785 	stb	r3,158(sp)
   129f4:	003ab606 	br	114d0 <__alt_data_end+0xfc0114d0>
   129f8:	d8c02b03 	ldbu	r3,172(sp)
   129fc:	d8c02785 	stb	r3,158(sp)
   12a00:	003a8906 	br	11428 <__alt_data_end+0xfc011428>

00012a04 <_times_r>:
   12a04:	2809883a 	mov	r4,r5
   12a08:	0020ab41 	jmpi	20ab4 <times>

00012a0c <___vfprintf_internal_r>:
   12a0c:	deffb804 	addi	sp,sp,-288
   12a10:	dfc04715 	stw	ra,284(sp)
   12a14:	ddc04515 	stw	r23,276(sp)
   12a18:	dd404315 	stw	r21,268(sp)
   12a1c:	d9002d15 	stw	r4,180(sp)
   12a20:	282f883a 	mov	r23,r5
   12a24:	302b883a 	mov	r21,r6
   12a28:	d9c02e15 	stw	r7,184(sp)
   12a2c:	df004615 	stw	fp,280(sp)
   12a30:	dd804415 	stw	r22,272(sp)
   12a34:	dd004215 	stw	r20,264(sp)
   12a38:	dcc04115 	stw	r19,260(sp)
   12a3c:	dc804015 	stw	r18,256(sp)
   12a40:	dc403f15 	stw	r17,252(sp)
   12a44:	dc003e15 	stw	r16,248(sp)
   12a48:	001794c0 	call	1794c <_localeconv_r>
   12a4c:	10800017 	ldw	r2,0(r2)
   12a50:	1009883a 	mov	r4,r2
   12a54:	d8803415 	stw	r2,208(sp)
   12a58:	00106b00 	call	106b0 <strlen>
   12a5c:	d8803715 	stw	r2,220(sp)
   12a60:	d8802d17 	ldw	r2,180(sp)
   12a64:	10000226 	beq	r2,zero,12a70 <___vfprintf_internal_r+0x64>
   12a68:	10800e17 	ldw	r2,56(r2)
   12a6c:	1000fb26 	beq	r2,zero,12e5c <___vfprintf_internal_r+0x450>
   12a70:	b880030b 	ldhu	r2,12(r23)
   12a74:	10c8000c 	andi	r3,r2,8192
   12a78:	1800061e 	bne	r3,zero,12a94 <___vfprintf_internal_r+0x88>
   12a7c:	b9001917 	ldw	r4,100(r23)
   12a80:	00f7ffc4 	movi	r3,-8193
   12a84:	10880014 	ori	r2,r2,8192
   12a88:	20c6703a 	and	r3,r4,r3
   12a8c:	b880030d 	sth	r2,12(r23)
   12a90:	b8c01915 	stw	r3,100(r23)
   12a94:	10c0020c 	andi	r3,r2,8
   12a98:	1800c326 	beq	r3,zero,12da8 <___vfprintf_internal_r+0x39c>
   12a9c:	b8c00417 	ldw	r3,16(r23)
   12aa0:	1800c126 	beq	r3,zero,12da8 <___vfprintf_internal_r+0x39c>
   12aa4:	1080068c 	andi	r2,r2,26
   12aa8:	00c00284 	movi	r3,10
   12aac:	10c0c626 	beq	r2,r3,12dc8 <___vfprintf_internal_r+0x3bc>
   12ab0:	d8c00404 	addi	r3,sp,16
   12ab4:	050000f4 	movhi	r20,3
   12ab8:	d9001e04 	addi	r4,sp,120
   12abc:	a52ece84 	addi	r20,r20,-17606
   12ac0:	d8c01e15 	stw	r3,120(sp)
   12ac4:	d8002015 	stw	zero,128(sp)
   12ac8:	d8001f15 	stw	zero,124(sp)
   12acc:	d8003315 	stw	zero,204(sp)
   12ad0:	d8003615 	stw	zero,216(sp)
   12ad4:	d8003815 	stw	zero,224(sp)
   12ad8:	1811883a 	mov	r8,r3
   12adc:	d8003915 	stw	zero,228(sp)
   12ae0:	d8003a15 	stw	zero,232(sp)
   12ae4:	d8002f15 	stw	zero,188(sp)
   12ae8:	d9002815 	stw	r4,160(sp)
   12aec:	a8800007 	ldb	r2,0(r21)
   12af0:	10028b26 	beq	r2,zero,13520 <___vfprintf_internal_r+0xb14>
   12af4:	00c00944 	movi	r3,37
   12af8:	a823883a 	mov	r17,r21
   12afc:	10c0021e 	bne	r2,r3,12b08 <___vfprintf_internal_r+0xfc>
   12b00:	00001406 	br	12b54 <___vfprintf_internal_r+0x148>
   12b04:	10c00326 	beq	r2,r3,12b14 <___vfprintf_internal_r+0x108>
   12b08:	8c400044 	addi	r17,r17,1
   12b0c:	88800007 	ldb	r2,0(r17)
   12b10:	103ffc1e 	bne	r2,zero,12b04 <__alt_data_end+0xfc012b04>
   12b14:	8d61c83a 	sub	r16,r17,r21
   12b18:	80000e26 	beq	r16,zero,12b54 <___vfprintf_internal_r+0x148>
   12b1c:	d8c02017 	ldw	r3,128(sp)
   12b20:	d8801f17 	ldw	r2,124(sp)
   12b24:	45400015 	stw	r21,0(r8)
   12b28:	1c07883a 	add	r3,r3,r16
   12b2c:	10800044 	addi	r2,r2,1
   12b30:	d8c02015 	stw	r3,128(sp)
   12b34:	44000115 	stw	r16,4(r8)
   12b38:	d8801f15 	stw	r2,124(sp)
   12b3c:	00c001c4 	movi	r3,7
   12b40:	1880a916 	blt	r3,r2,12de8 <___vfprintf_internal_r+0x3dc>
   12b44:	42000204 	addi	r8,r8,8
   12b48:	d9402f17 	ldw	r5,188(sp)
   12b4c:	2c0b883a 	add	r5,r5,r16
   12b50:	d9402f15 	stw	r5,188(sp)
   12b54:	88800007 	ldb	r2,0(r17)
   12b58:	1000aa26 	beq	r2,zero,12e04 <___vfprintf_internal_r+0x3f8>
   12b5c:	8d400044 	addi	r21,r17,1
   12b60:	8c400047 	ldb	r17,1(r17)
   12b64:	0021883a 	mov	r16,zero
   12b68:	00bfffc4 	movi	r2,-1
   12b6c:	0025883a 	mov	r18,zero
   12b70:	dc002905 	stb	r16,164(sp)
   12b74:	d8002785 	stb	zero,158(sp)
   12b78:	d8002b05 	stb	zero,172(sp)
   12b7c:	d8802a15 	stw	r2,168(sp)
   12b80:	d8003115 	stw	zero,196(sp)
   12b84:	04c01604 	movi	r19,88
   12b88:	05800244 	movi	r22,9
   12b8c:	9021883a 	mov	r16,r18
   12b90:	4039883a 	mov	fp,r8
   12b94:	ad400044 	addi	r21,r21,1
   12b98:	88bff804 	addi	r2,r17,-32
   12b9c:	98833236 	bltu	r19,r2,13868 <___vfprintf_internal_r+0xe5c>
   12ba0:	100490ba 	slli	r2,r2,2
   12ba4:	00c00074 	movhi	r3,1
   12ba8:	18caee04 	addi	r3,r3,11192
   12bac:	10c5883a 	add	r2,r2,r3
   12bb0:	10800017 	ldw	r2,0(r2)
   12bb4:	1000683a 	jmp	r2
   12bb8:	00013760 	cmpeqi	zero,zero,1245
   12bbc:	00013868 	cmpgeui	zero,zero,1249
   12bc0:	00013868 	cmpgeui	zero,zero,1249
   12bc4:	00013780 	call	1378 <_ZN3USB11OutTransferEP6EpInfottPh+0x88>
   12bc8:	00013868 	cmpgeui	zero,zero,1249
   12bcc:	00013868 	cmpgeui	zero,zero,1249
   12bd0:	00013868 	cmpgeui	zero,zero,1249
   12bd4:	00013868 	cmpgeui	zero,zero,1249
   12bd8:	00013868 	cmpgeui	zero,zero,1249
   12bdc:	00013868 	cmpgeui	zero,zero,1249
   12be0:	00012e68 	cmpgeui	zero,zero,1209
   12be4:	00013670 	cmpltui	zero,zero,1241
   12be8:	00013868 	cmpgeui	zero,zero,1249
   12bec:	00012d2c 	andhi	zero,zero,1204
   12bf0:	00012e8c 	andi	zero,zero,1210
   12bf4:	00013868 	cmpgeui	zero,zero,1249
   12bf8:	00012edc 	xori	zero,zero,1211
   12bfc:	00012ee8 	cmpgeui	zero,zero,1211
   12c00:	00012ee8 	cmpgeui	zero,zero,1211
   12c04:	00012ee8 	cmpgeui	zero,zero,1211
   12c08:	00012ee8 	cmpgeui	zero,zero,1211
   12c0c:	00012ee8 	cmpgeui	zero,zero,1211
   12c10:	00012ee8 	cmpgeui	zero,zero,1211
   12c14:	00012ee8 	cmpgeui	zero,zero,1211
   12c18:	00012ee8 	cmpgeui	zero,zero,1211
   12c1c:	00012ee8 	cmpgeui	zero,zero,1211
   12c20:	00013868 	cmpgeui	zero,zero,1249
   12c24:	00013868 	cmpgeui	zero,zero,1249
   12c28:	00013868 	cmpgeui	zero,zero,1249
   12c2c:	00013868 	cmpgeui	zero,zero,1249
   12c30:	00013868 	cmpgeui	zero,zero,1249
   12c34:	00013868 	cmpgeui	zero,zero,1249
   12c38:	00013868 	cmpgeui	zero,zero,1249
   12c3c:	00013868 	cmpgeui	zero,zero,1249
   12c40:	00013868 	cmpgeui	zero,zero,1249
   12c44:	00013868 	cmpgeui	zero,zero,1249
   12c48:	00012f24 	muli	zero,zero,1212
   12c4c:	00012fec 	andhi	zero,zero,1215
   12c50:	00013868 	cmpgeui	zero,zero,1249
   12c54:	00012fec 	andhi	zero,zero,1215
   12c58:	00013868 	cmpgeui	zero,zero,1249
   12c5c:	00013868 	cmpgeui	zero,zero,1249
   12c60:	00013868 	cmpgeui	zero,zero,1249
   12c64:	00013868 	cmpgeui	zero,zero,1249
   12c68:	00013098 	cmpnei	zero,zero,1218
   12c6c:	00013868 	cmpgeui	zero,zero,1249
   12c70:	00013868 	cmpgeui	zero,zero,1249
   12c74:	000130a4 	muli	zero,zero,1218
   12c78:	00013868 	cmpgeui	zero,zero,1249
   12c7c:	00013868 	cmpgeui	zero,zero,1249
   12c80:	00013868 	cmpgeui	zero,zero,1249
   12c84:	00013868 	cmpgeui	zero,zero,1249
   12c88:	00013868 	cmpgeui	zero,zero,1249
   12c8c:	00013528 	cmpgeui	zero,zero,1236
   12c90:	00013868 	cmpgeui	zero,zero,1249
   12c94:	00013868 	cmpgeui	zero,zero,1249
   12c98:	00013594 	movui	zero,1238
   12c9c:	00013868 	cmpgeui	zero,zero,1249
   12ca0:	00013868 	cmpgeui	zero,zero,1249
   12ca4:	00013868 	cmpgeui	zero,zero,1249
   12ca8:	00013868 	cmpgeui	zero,zero,1249
   12cac:	00013868 	cmpgeui	zero,zero,1249
   12cb0:	00013868 	cmpgeui	zero,zero,1249
   12cb4:	00013868 	cmpgeui	zero,zero,1249
   12cb8:	00013868 	cmpgeui	zero,zero,1249
   12cbc:	00013868 	cmpgeui	zero,zero,1249
   12cc0:	00013868 	cmpgeui	zero,zero,1249
   12cc4:	0001380c 	andi	zero,zero,1248
   12cc8:	0001378c 	andi	zero,zero,1246
   12ccc:	00012fec 	andhi	zero,zero,1215
   12cd0:	00012fec 	andhi	zero,zero,1215
   12cd4:	00012fec 	andhi	zero,zero,1215
   12cd8:	000137ac 	andhi	zero,zero,1246
   12cdc:	0001378c 	andi	zero,zero,1246
   12ce0:	00013868 	cmpgeui	zero,zero,1249
   12ce4:	00013868 	cmpgeui	zero,zero,1249
   12ce8:	000137b8 	rdprs	zero,zero,1246
   12cec:	00013868 	cmpgeui	zero,zero,1249
   12cf0:	000137cc 	andi	zero,zero,1247
   12cf4:	00013650 	cmplti	zero,zero,1241
   12cf8:	00012d38 	rdprs	zero,zero,1204
   12cfc:	00013688 	cmpgei	zero,zero,1242
   12d00:	00013868 	cmpgeui	zero,zero,1249
   12d04:	00013694 	movui	zero,1242
   12d08:	00013868 	cmpgeui	zero,zero,1249
   12d0c:	000136f8 	rdprs	zero,zero,1243
   12d10:	00013868 	cmpgeui	zero,zero,1249
   12d14:	00013868 	cmpgeui	zero,zero,1249
   12d18:	00013718 	cmpnei	zero,zero,1244
   12d1c:	d8c03117 	ldw	r3,196(sp)
   12d20:	d8802e15 	stw	r2,184(sp)
   12d24:	00c7c83a 	sub	r3,zero,r3
   12d28:	d8c03115 	stw	r3,196(sp)
   12d2c:	84000114 	ori	r16,r16,4
   12d30:	ac400007 	ldb	r17,0(r21)
   12d34:	003f9706 	br	12b94 <__alt_data_end+0xfc012b94>
   12d38:	00800c04 	movi	r2,48
   12d3c:	d8802705 	stb	r2,156(sp)
   12d40:	00801e04 	movi	r2,120
   12d44:	d8802745 	stb	r2,157(sp)
   12d48:	d9002a17 	ldw	r4,168(sp)
   12d4c:	d8802e17 	ldw	r2,184(sp)
   12d50:	d8002785 	stb	zero,158(sp)
   12d54:	e011883a 	mov	r8,fp
   12d58:	10c00104 	addi	r3,r2,4
   12d5c:	14c00017 	ldw	r19,0(r2)
   12d60:	002d883a 	mov	r22,zero
   12d64:	80800094 	ori	r2,r16,2
   12d68:	2002ca16 	blt	r4,zero,13894 <___vfprintf_internal_r+0xe88>
   12d6c:	00bfdfc4 	movi	r2,-129
   12d70:	80a4703a 	and	r18,r16,r2
   12d74:	d8c02e15 	stw	r3,184(sp)
   12d78:	94800094 	ori	r18,r18,2
   12d7c:	9802b41e 	bne	r19,zero,13850 <___vfprintf_internal_r+0xe44>
   12d80:	014000f4 	movhi	r5,3
   12d84:	296ebf04 	addi	r5,r5,-17668
   12d88:	d9403915 	stw	r5,228(sp)
   12d8c:	04401e04 	movi	r17,120
   12d90:	d8802a17 	ldw	r2,168(sp)
   12d94:	0039883a 	mov	fp,zero
   12d98:	1001fa26 	beq	r2,zero,13584 <___vfprintf_internal_r+0xb78>
   12d9c:	0027883a 	mov	r19,zero
   12da0:	002d883a 	mov	r22,zero
   12da4:	00021906 	br	1360c <___vfprintf_internal_r+0xc00>
   12da8:	d9002d17 	ldw	r4,180(sp)
   12dac:	b80b883a 	mov	r5,r23
   12db0:	0014dc00 	call	14dc0 <__swsetup_r>
   12db4:	1005dc1e 	bne	r2,zero,14528 <___vfprintf_internal_r+0x1b1c>
   12db8:	b880030b 	ldhu	r2,12(r23)
   12dbc:	00c00284 	movi	r3,10
   12dc0:	1080068c 	andi	r2,r2,26
   12dc4:	10ff3a1e 	bne	r2,r3,12ab0 <__alt_data_end+0xfc012ab0>
   12dc8:	b880038f 	ldh	r2,14(r23)
   12dcc:	103f3816 	blt	r2,zero,12ab0 <__alt_data_end+0xfc012ab0>
   12dd0:	d9c02e17 	ldw	r7,184(sp)
   12dd4:	d9002d17 	ldw	r4,180(sp)
   12dd8:	a80d883a 	mov	r6,r21
   12ddc:	b80b883a 	mov	r5,r23
   12de0:	0014d040 	call	14d04 <__sbprintf>
   12de4:	00001106 	br	12e2c <___vfprintf_internal_r+0x420>
   12de8:	d9002d17 	ldw	r4,180(sp)
   12dec:	d9801e04 	addi	r6,sp,120
   12df0:	b80b883a 	mov	r5,r23
   12df4:	001ad180 	call	1ad18 <__sprint_r>
   12df8:	1000081e 	bne	r2,zero,12e1c <___vfprintf_internal_r+0x410>
   12dfc:	da000404 	addi	r8,sp,16
   12e00:	003f5106 	br	12b48 <__alt_data_end+0xfc012b48>
   12e04:	d8802017 	ldw	r2,128(sp)
   12e08:	10000426 	beq	r2,zero,12e1c <___vfprintf_internal_r+0x410>
   12e0c:	d9002d17 	ldw	r4,180(sp)
   12e10:	d9801e04 	addi	r6,sp,120
   12e14:	b80b883a 	mov	r5,r23
   12e18:	001ad180 	call	1ad18 <__sprint_r>
   12e1c:	b880030b 	ldhu	r2,12(r23)
   12e20:	1080100c 	andi	r2,r2,64
   12e24:	1005c01e 	bne	r2,zero,14528 <___vfprintf_internal_r+0x1b1c>
   12e28:	d8802f17 	ldw	r2,188(sp)
   12e2c:	dfc04717 	ldw	ra,284(sp)
   12e30:	df004617 	ldw	fp,280(sp)
   12e34:	ddc04517 	ldw	r23,276(sp)
   12e38:	dd804417 	ldw	r22,272(sp)
   12e3c:	dd404317 	ldw	r21,268(sp)
   12e40:	dd004217 	ldw	r20,264(sp)
   12e44:	dcc04117 	ldw	r19,260(sp)
   12e48:	dc804017 	ldw	r18,256(sp)
   12e4c:	dc403f17 	ldw	r17,252(sp)
   12e50:	dc003e17 	ldw	r16,248(sp)
   12e54:	dec04804 	addi	sp,sp,288
   12e58:	f800283a 	ret
   12e5c:	d9002d17 	ldw	r4,180(sp)
   12e60:	0016dcc0 	call	16dcc <__sinit>
   12e64:	003f0206 	br	12a70 <__alt_data_end+0xfc012a70>
   12e68:	d9002e17 	ldw	r4,184(sp)
   12e6c:	d9402e17 	ldw	r5,184(sp)
   12e70:	21000017 	ldw	r4,0(r4)
   12e74:	28800104 	addi	r2,r5,4
   12e78:	d9003115 	stw	r4,196(sp)
   12e7c:	203fa716 	blt	r4,zero,12d1c <__alt_data_end+0xfc012d1c>
   12e80:	d8802e15 	stw	r2,184(sp)
   12e84:	ac400007 	ldb	r17,0(r21)
   12e88:	003f4206 	br	12b94 <__alt_data_end+0xfc012b94>
   12e8c:	ac400007 	ldb	r17,0(r21)
   12e90:	01000a84 	movi	r4,42
   12e94:	a8c00044 	addi	r3,r21,1
   12e98:	89075826 	beq	r17,r4,14bfc <___vfprintf_internal_r+0x21f0>
   12e9c:	8cbff404 	addi	r18,r17,-48
   12ea0:	b486ae36 	bltu	r22,r18,1495c <___vfprintf_internal_r+0x1f50>
   12ea4:	0009883a 	mov	r4,zero
   12ea8:	1823883a 	mov	r17,r3
   12eac:	01400284 	movi	r5,10
   12eb0:	000d9380 	call	d938 <__mulsi3>
   12eb4:	88c00007 	ldb	r3,0(r17)
   12eb8:	1489883a 	add	r4,r2,r18
   12ebc:	8d400044 	addi	r21,r17,1
   12ec0:	1cbff404 	addi	r18,r3,-48
   12ec4:	a823883a 	mov	r17,r21
   12ec8:	b4bff82e 	bgeu	r22,r18,12eac <__alt_data_end+0xfc012eac>
   12ecc:	1823883a 	mov	r17,r3
   12ed0:	2005f616 	blt	r4,zero,146ac <___vfprintf_internal_r+0x1ca0>
   12ed4:	d9002a15 	stw	r4,168(sp)
   12ed8:	003f2f06 	br	12b98 <__alt_data_end+0xfc012b98>
   12edc:	84002014 	ori	r16,r16,128
   12ee0:	ac400007 	ldb	r17,0(r21)
   12ee4:	003f2b06 	br	12b94 <__alt_data_end+0xfc012b94>
   12ee8:	8cbff404 	addi	r18,r17,-48
   12eec:	d8003115 	stw	zero,196(sp)
   12ef0:	0009883a 	mov	r4,zero
   12ef4:	a823883a 	mov	r17,r21
   12ef8:	01400284 	movi	r5,10
   12efc:	000d9380 	call	d938 <__mulsi3>
   12f00:	88c00007 	ldb	r3,0(r17)
   12f04:	9089883a 	add	r4,r18,r2
   12f08:	ad400044 	addi	r21,r21,1
   12f0c:	1cbff404 	addi	r18,r3,-48
   12f10:	a823883a 	mov	r17,r21
   12f14:	b4bff82e 	bgeu	r22,r18,12ef8 <__alt_data_end+0xfc012ef8>
   12f18:	1823883a 	mov	r17,r3
   12f1c:	d9003115 	stw	r4,196(sp)
   12f20:	003f1d06 	br	12b98 <__alt_data_end+0xfc012b98>
   12f24:	8025883a 	mov	r18,r16
   12f28:	dc002903 	ldbu	r16,164(sp)
   12f2c:	e011883a 	mov	r8,fp
   12f30:	84003fcc 	andi	r16,r16,255
   12f34:	8007531e 	bne	r16,zero,14c84 <___vfprintf_internal_r+0x2278>
   12f38:	94800414 	ori	r18,r18,16
   12f3c:	9080080c 	andi	r2,r18,32
   12f40:	1003a326 	beq	r2,zero,13dd0 <___vfprintf_internal_r+0x13c4>
   12f44:	d9002e17 	ldw	r4,184(sp)
   12f48:	20800117 	ldw	r2,4(r4)
   12f4c:	24c00017 	ldw	r19,0(r4)
   12f50:	21000204 	addi	r4,r4,8
   12f54:	d9002e15 	stw	r4,184(sp)
   12f58:	102d883a 	mov	r22,r2
   12f5c:	10047316 	blt	r2,zero,1412c <___vfprintf_internal_r+0x1720>
   12f60:	d9002a17 	ldw	r4,168(sp)
   12f64:	df002783 	ldbu	fp,158(sp)
   12f68:	2003e416 	blt	r4,zero,13efc <___vfprintf_internal_r+0x14f0>
   12f6c:	00ffdfc4 	movi	r3,-129
   12f70:	9d84b03a 	or	r2,r19,r22
   12f74:	90e4703a 	and	r18,r18,r3
   12f78:	10018026 	beq	r2,zero,1357c <___vfprintf_internal_r+0xb70>
   12f7c:	b003ab26 	beq	r22,zero,13e2c <___vfprintf_internal_r+0x1420>
   12f80:	dc402915 	stw	r17,164(sp)
   12f84:	dc001e04 	addi	r16,sp,120
   12f88:	b023883a 	mov	r17,r22
   12f8c:	402d883a 	mov	r22,r8
   12f90:	9809883a 	mov	r4,r19
   12f94:	880b883a 	mov	r5,r17
   12f98:	01800284 	movi	r6,10
   12f9c:	000f883a 	mov	r7,zero
   12fa0:	001d25c0 	call	1d25c <__umoddi3>
   12fa4:	10800c04 	addi	r2,r2,48
   12fa8:	843fffc4 	addi	r16,r16,-1
   12fac:	9809883a 	mov	r4,r19
   12fb0:	880b883a 	mov	r5,r17
   12fb4:	80800005 	stb	r2,0(r16)
   12fb8:	01800284 	movi	r6,10
   12fbc:	000f883a 	mov	r7,zero
   12fc0:	001cc600 	call	1cc60 <__udivdi3>
   12fc4:	1027883a 	mov	r19,r2
   12fc8:	10c4b03a 	or	r2,r2,r3
   12fcc:	1823883a 	mov	r17,r3
   12fd0:	103fef1e 	bne	r2,zero,12f90 <__alt_data_end+0xfc012f90>
   12fd4:	d8c02817 	ldw	r3,160(sp)
   12fd8:	dc402917 	ldw	r17,164(sp)
   12fdc:	b011883a 	mov	r8,r22
   12fe0:	1c07c83a 	sub	r3,r3,r16
   12fe4:	d8c02b15 	stw	r3,172(sp)
   12fe8:	00005f06 	br	13168 <___vfprintf_internal_r+0x75c>
   12fec:	8025883a 	mov	r18,r16
   12ff0:	dc002903 	ldbu	r16,164(sp)
   12ff4:	e011883a 	mov	r8,fp
   12ff8:	84003fcc 	andi	r16,r16,255
   12ffc:	80071e1e 	bne	r16,zero,14c78 <___vfprintf_internal_r+0x226c>
   13000:	9080020c 	andi	r2,r18,8
   13004:	1004af26 	beq	r2,zero,142c4 <___vfprintf_internal_r+0x18b8>
   13008:	d9002e17 	ldw	r4,184(sp)
   1300c:	d9402e17 	ldw	r5,184(sp)
   13010:	d8802e17 	ldw	r2,184(sp)
   13014:	21000017 	ldw	r4,0(r4)
   13018:	29400117 	ldw	r5,4(r5)
   1301c:	10800204 	addi	r2,r2,8
   13020:	d9003615 	stw	r4,216(sp)
   13024:	d9403815 	stw	r5,224(sp)
   13028:	d8802e15 	stw	r2,184(sp)
   1302c:	d9003617 	ldw	r4,216(sp)
   13030:	d9403817 	ldw	r5,224(sp)
   13034:	da003d15 	stw	r8,244(sp)
   13038:	04000044 	movi	r16,1
   1303c:	00194fc0 	call	194fc <__fpclassifyd>
   13040:	da003d17 	ldw	r8,244(sp)
   13044:	1404441e 	bne	r2,r16,14158 <___vfprintf_internal_r+0x174c>
   13048:	d9003617 	ldw	r4,216(sp)
   1304c:	d9403817 	ldw	r5,224(sp)
   13050:	000d883a 	mov	r6,zero
   13054:	000f883a 	mov	r7,zero
   13058:	001ec000 	call	1ec00 <__ledf2>
   1305c:	da003d17 	ldw	r8,244(sp)
   13060:	1005e316 	blt	r2,zero,147f0 <___vfprintf_internal_r+0x1de4>
   13064:	df002783 	ldbu	fp,158(sp)
   13068:	008011c4 	movi	r2,71
   1306c:	1445580e 	bge	r2,r17,145d0 <___vfprintf_internal_r+0x1bc4>
   13070:	040000f4 	movhi	r16,3
   13074:	842eb704 	addi	r16,r16,-17700
   13078:	00c000c4 	movi	r3,3
   1307c:	00bfdfc4 	movi	r2,-129
   13080:	d8c02915 	stw	r3,164(sp)
   13084:	90a4703a 	and	r18,r18,r2
   13088:	d8c02b15 	stw	r3,172(sp)
   1308c:	d8002a15 	stw	zero,168(sp)
   13090:	d8003215 	stw	zero,200(sp)
   13094:	00003a06 	br	13180 <___vfprintf_internal_r+0x774>
   13098:	84000214 	ori	r16,r16,8
   1309c:	ac400007 	ldb	r17,0(r21)
   130a0:	003ebc06 	br	12b94 <__alt_data_end+0xfc012b94>
   130a4:	8025883a 	mov	r18,r16
   130a8:	dc002903 	ldbu	r16,164(sp)
   130ac:	e011883a 	mov	r8,fp
   130b0:	84003fcc 	andi	r16,r16,255
   130b4:	8007001e 	bne	r16,zero,14cb8 <___vfprintf_internal_r+0x22ac>
   130b8:	94800414 	ori	r18,r18,16
   130bc:	9080080c 	andi	r2,r18,32
   130c0:	1002fa26 	beq	r2,zero,13cac <___vfprintf_internal_r+0x12a0>
   130c4:	d9002e17 	ldw	r4,184(sp)
   130c8:	d9402a17 	ldw	r5,168(sp)
   130cc:	d8002785 	stb	zero,158(sp)
   130d0:	20800204 	addi	r2,r4,8
   130d4:	24c00017 	ldw	r19,0(r4)
   130d8:	25800117 	ldw	r22,4(r4)
   130dc:	2804b116 	blt	r5,zero,143a4 <___vfprintf_internal_r+0x1998>
   130e0:	013fdfc4 	movi	r4,-129
   130e4:	9d86b03a 	or	r3,r19,r22
   130e8:	d8802e15 	stw	r2,184(sp)
   130ec:	9124703a 	and	r18,r18,r4
   130f0:	1802fb1e 	bne	r3,zero,13ce0 <___vfprintf_internal_r+0x12d4>
   130f4:	d8c02a17 	ldw	r3,168(sp)
   130f8:	0039883a 	mov	fp,zero
   130fc:	1805e526 	beq	r3,zero,14894 <___vfprintf_internal_r+0x1e88>
   13100:	0027883a 	mov	r19,zero
   13104:	002d883a 	mov	r22,zero
   13108:	dc001e04 	addi	r16,sp,120
   1310c:	9806d0fa 	srli	r3,r19,3
   13110:	b008977a 	slli	r4,r22,29
   13114:	b02cd0fa 	srli	r22,r22,3
   13118:	9cc001cc 	andi	r19,r19,7
   1311c:	98800c04 	addi	r2,r19,48
   13120:	843fffc4 	addi	r16,r16,-1
   13124:	20e6b03a 	or	r19,r4,r3
   13128:	80800005 	stb	r2,0(r16)
   1312c:	9d86b03a 	or	r3,r19,r22
   13130:	183ff61e 	bne	r3,zero,1310c <__alt_data_end+0xfc01310c>
   13134:	90c0004c 	andi	r3,r18,1
   13138:	18014126 	beq	r3,zero,13640 <___vfprintf_internal_r+0xc34>
   1313c:	10803fcc 	andi	r2,r2,255
   13140:	1080201c 	xori	r2,r2,128
   13144:	10bfe004 	addi	r2,r2,-128
   13148:	00c00c04 	movi	r3,48
   1314c:	10c13c26 	beq	r2,r3,13640 <___vfprintf_internal_r+0xc34>
   13150:	80ffffc5 	stb	r3,-1(r16)
   13154:	d8c02817 	ldw	r3,160(sp)
   13158:	80bfffc4 	addi	r2,r16,-1
   1315c:	1021883a 	mov	r16,r2
   13160:	1887c83a 	sub	r3,r3,r2
   13164:	d8c02b15 	stw	r3,172(sp)
   13168:	d8802b17 	ldw	r2,172(sp)
   1316c:	d9002a17 	ldw	r4,168(sp)
   13170:	1100010e 	bge	r2,r4,13178 <___vfprintf_internal_r+0x76c>
   13174:	2005883a 	mov	r2,r4
   13178:	d8802915 	stw	r2,164(sp)
   1317c:	d8003215 	stw	zero,200(sp)
   13180:	e7003fcc 	andi	fp,fp,255
   13184:	e700201c 	xori	fp,fp,128
   13188:	e73fe004 	addi	fp,fp,-128
   1318c:	e0000326 	beq	fp,zero,1319c <___vfprintf_internal_r+0x790>
   13190:	d8c02917 	ldw	r3,164(sp)
   13194:	18c00044 	addi	r3,r3,1
   13198:	d8c02915 	stw	r3,164(sp)
   1319c:	90c0008c 	andi	r3,r18,2
   131a0:	d8c02c15 	stw	r3,176(sp)
   131a4:	18000326 	beq	r3,zero,131b4 <___vfprintf_internal_r+0x7a8>
   131a8:	d8c02917 	ldw	r3,164(sp)
   131ac:	18c00084 	addi	r3,r3,2
   131b0:	d8c02915 	stw	r3,164(sp)
   131b4:	90c0210c 	andi	r3,r18,132
   131b8:	d8c03015 	stw	r3,192(sp)
   131bc:	1801c51e 	bne	r3,zero,138d4 <___vfprintf_internal_r+0xec8>
   131c0:	d9003117 	ldw	r4,196(sp)
   131c4:	d8c02917 	ldw	r3,164(sp)
   131c8:	20e7c83a 	sub	r19,r4,r3
   131cc:	04c1c10e 	bge	zero,r19,138d4 <___vfprintf_internal_r+0xec8>
   131d0:	02400404 	movi	r9,16
   131d4:	d8c02017 	ldw	r3,128(sp)
   131d8:	d8801f17 	ldw	r2,124(sp)
   131dc:	4cc52f0e 	bge	r9,r19,1469c <___vfprintf_internal_r+0x1c90>
   131e0:	014000f4 	movhi	r5,3
   131e4:	296ed284 	addi	r5,r5,-17590
   131e8:	dc403b15 	stw	r17,236(sp)
   131ec:	d9403515 	stw	r5,212(sp)
   131f0:	9823883a 	mov	r17,r19
   131f4:	482d883a 	mov	r22,r9
   131f8:	9027883a 	mov	r19,r18
   131fc:	070001c4 	movi	fp,7
   13200:	8025883a 	mov	r18,r16
   13204:	dc002d17 	ldw	r16,180(sp)
   13208:	00000306 	br	13218 <___vfprintf_internal_r+0x80c>
   1320c:	8c7ffc04 	addi	r17,r17,-16
   13210:	42000204 	addi	r8,r8,8
   13214:	b440130e 	bge	r22,r17,13264 <___vfprintf_internal_r+0x858>
   13218:	010000f4 	movhi	r4,3
   1321c:	18c00404 	addi	r3,r3,16
   13220:	10800044 	addi	r2,r2,1
   13224:	212ed284 	addi	r4,r4,-17590
   13228:	41000015 	stw	r4,0(r8)
   1322c:	45800115 	stw	r22,4(r8)
   13230:	d8c02015 	stw	r3,128(sp)
   13234:	d8801f15 	stw	r2,124(sp)
   13238:	e0bff40e 	bge	fp,r2,1320c <__alt_data_end+0xfc01320c>
   1323c:	d9801e04 	addi	r6,sp,120
   13240:	b80b883a 	mov	r5,r23
   13244:	8009883a 	mov	r4,r16
   13248:	001ad180 	call	1ad18 <__sprint_r>
   1324c:	103ef31e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13250:	8c7ffc04 	addi	r17,r17,-16
   13254:	d8c02017 	ldw	r3,128(sp)
   13258:	d8801f17 	ldw	r2,124(sp)
   1325c:	da000404 	addi	r8,sp,16
   13260:	b47fed16 	blt	r22,r17,13218 <__alt_data_end+0xfc013218>
   13264:	9021883a 	mov	r16,r18
   13268:	9825883a 	mov	r18,r19
   1326c:	8827883a 	mov	r19,r17
   13270:	dc403b17 	ldw	r17,236(sp)
   13274:	d9403517 	ldw	r5,212(sp)
   13278:	98c7883a 	add	r3,r19,r3
   1327c:	10800044 	addi	r2,r2,1
   13280:	41400015 	stw	r5,0(r8)
   13284:	44c00115 	stw	r19,4(r8)
   13288:	d8c02015 	stw	r3,128(sp)
   1328c:	d8801f15 	stw	r2,124(sp)
   13290:	010001c4 	movi	r4,7
   13294:	2082c516 	blt	r4,r2,13dac <___vfprintf_internal_r+0x13a0>
   13298:	df002787 	ldb	fp,158(sp)
   1329c:	42000204 	addi	r8,r8,8
   132a0:	e0000c26 	beq	fp,zero,132d4 <___vfprintf_internal_r+0x8c8>
   132a4:	d8801f17 	ldw	r2,124(sp)
   132a8:	d9002784 	addi	r4,sp,158
   132ac:	18c00044 	addi	r3,r3,1
   132b0:	10800044 	addi	r2,r2,1
   132b4:	41000015 	stw	r4,0(r8)
   132b8:	01000044 	movi	r4,1
   132bc:	41000115 	stw	r4,4(r8)
   132c0:	d8c02015 	stw	r3,128(sp)
   132c4:	d8801f15 	stw	r2,124(sp)
   132c8:	010001c4 	movi	r4,7
   132cc:	20825e16 	blt	r4,r2,13c48 <___vfprintf_internal_r+0x123c>
   132d0:	42000204 	addi	r8,r8,8
   132d4:	d8802c17 	ldw	r2,176(sp)
   132d8:	10000c26 	beq	r2,zero,1330c <___vfprintf_internal_r+0x900>
   132dc:	d8801f17 	ldw	r2,124(sp)
   132e0:	d9002704 	addi	r4,sp,156
   132e4:	18c00084 	addi	r3,r3,2
   132e8:	10800044 	addi	r2,r2,1
   132ec:	41000015 	stw	r4,0(r8)
   132f0:	01000084 	movi	r4,2
   132f4:	41000115 	stw	r4,4(r8)
   132f8:	d8c02015 	stw	r3,128(sp)
   132fc:	d8801f15 	stw	r2,124(sp)
   13300:	010001c4 	movi	r4,7
   13304:	20825816 	blt	r4,r2,13c68 <___vfprintf_internal_r+0x125c>
   13308:	42000204 	addi	r8,r8,8
   1330c:	d9003017 	ldw	r4,192(sp)
   13310:	00802004 	movi	r2,128
   13314:	2081bb26 	beq	r4,r2,13a04 <___vfprintf_internal_r+0xff8>
   13318:	d9402a17 	ldw	r5,168(sp)
   1331c:	d8802b17 	ldw	r2,172(sp)
   13320:	28adc83a 	sub	r22,r5,r2
   13324:	0580310e 	bge	zero,r22,133ec <___vfprintf_internal_r+0x9e0>
   13328:	07000404 	movi	fp,16
   1332c:	d8801f17 	ldw	r2,124(sp)
   13330:	e584360e 	bge	fp,r22,1440c <___vfprintf_internal_r+0x1a00>
   13334:	014000f4 	movhi	r5,3
   13338:	296ece84 	addi	r5,r5,-17606
   1333c:	dc402a15 	stw	r17,168(sp)
   13340:	d9402c15 	stw	r5,176(sp)
   13344:	b023883a 	mov	r17,r22
   13348:	04c001c4 	movi	r19,7
   1334c:	a82d883a 	mov	r22,r21
   13350:	902b883a 	mov	r21,r18
   13354:	8025883a 	mov	r18,r16
   13358:	dc002d17 	ldw	r16,180(sp)
   1335c:	00000306 	br	1336c <___vfprintf_internal_r+0x960>
   13360:	8c7ffc04 	addi	r17,r17,-16
   13364:	42000204 	addi	r8,r8,8
   13368:	e440110e 	bge	fp,r17,133b0 <___vfprintf_internal_r+0x9a4>
   1336c:	18c00404 	addi	r3,r3,16
   13370:	10800044 	addi	r2,r2,1
   13374:	45000015 	stw	r20,0(r8)
   13378:	47000115 	stw	fp,4(r8)
   1337c:	d8c02015 	stw	r3,128(sp)
   13380:	d8801f15 	stw	r2,124(sp)
   13384:	98bff60e 	bge	r19,r2,13360 <__alt_data_end+0xfc013360>
   13388:	d9801e04 	addi	r6,sp,120
   1338c:	b80b883a 	mov	r5,r23
   13390:	8009883a 	mov	r4,r16
   13394:	001ad180 	call	1ad18 <__sprint_r>
   13398:	103ea01e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   1339c:	8c7ffc04 	addi	r17,r17,-16
   133a0:	d8c02017 	ldw	r3,128(sp)
   133a4:	d8801f17 	ldw	r2,124(sp)
   133a8:	da000404 	addi	r8,sp,16
   133ac:	e47fef16 	blt	fp,r17,1336c <__alt_data_end+0xfc01336c>
   133b0:	9021883a 	mov	r16,r18
   133b4:	a825883a 	mov	r18,r21
   133b8:	b02b883a 	mov	r21,r22
   133bc:	882d883a 	mov	r22,r17
   133c0:	dc402a17 	ldw	r17,168(sp)
   133c4:	d9002c17 	ldw	r4,176(sp)
   133c8:	1d87883a 	add	r3,r3,r22
   133cc:	10800044 	addi	r2,r2,1
   133d0:	41000015 	stw	r4,0(r8)
   133d4:	45800115 	stw	r22,4(r8)
   133d8:	d8c02015 	stw	r3,128(sp)
   133dc:	d8801f15 	stw	r2,124(sp)
   133e0:	010001c4 	movi	r4,7
   133e4:	20821016 	blt	r4,r2,13c28 <___vfprintf_internal_r+0x121c>
   133e8:	42000204 	addi	r8,r8,8
   133ec:	9080400c 	andi	r2,r18,256
   133f0:	10013a1e 	bne	r2,zero,138dc <___vfprintf_internal_r+0xed0>
   133f4:	d9402b17 	ldw	r5,172(sp)
   133f8:	d8801f17 	ldw	r2,124(sp)
   133fc:	44000015 	stw	r16,0(r8)
   13400:	1947883a 	add	r3,r3,r5
   13404:	10800044 	addi	r2,r2,1
   13408:	41400115 	stw	r5,4(r8)
   1340c:	d8c02015 	stw	r3,128(sp)
   13410:	d8801f15 	stw	r2,124(sp)
   13414:	010001c4 	movi	r4,7
   13418:	2081f516 	blt	r4,r2,13bf0 <___vfprintf_internal_r+0x11e4>
   1341c:	42000204 	addi	r8,r8,8
   13420:	9480010c 	andi	r18,r18,4
   13424:	90003226 	beq	r18,zero,134f0 <___vfprintf_internal_r+0xae4>
   13428:	d9403117 	ldw	r5,196(sp)
   1342c:	d8802917 	ldw	r2,164(sp)
   13430:	28a1c83a 	sub	r16,r5,r2
   13434:	04002e0e 	bge	zero,r16,134f0 <___vfprintf_internal_r+0xae4>
   13438:	04400404 	movi	r17,16
   1343c:	d8801f17 	ldw	r2,124(sp)
   13440:	8c04c40e 	bge	r17,r16,14754 <___vfprintf_internal_r+0x1d48>
   13444:	014000f4 	movhi	r5,3
   13448:	296ed284 	addi	r5,r5,-17590
   1344c:	d9403515 	stw	r5,212(sp)
   13450:	048001c4 	movi	r18,7
   13454:	dcc02d17 	ldw	r19,180(sp)
   13458:	00000306 	br	13468 <___vfprintf_internal_r+0xa5c>
   1345c:	843ffc04 	addi	r16,r16,-16
   13460:	42000204 	addi	r8,r8,8
   13464:	8c00130e 	bge	r17,r16,134b4 <___vfprintf_internal_r+0xaa8>
   13468:	010000f4 	movhi	r4,3
   1346c:	18c00404 	addi	r3,r3,16
   13470:	10800044 	addi	r2,r2,1
   13474:	212ed284 	addi	r4,r4,-17590
   13478:	41000015 	stw	r4,0(r8)
   1347c:	44400115 	stw	r17,4(r8)
   13480:	d8c02015 	stw	r3,128(sp)
   13484:	d8801f15 	stw	r2,124(sp)
   13488:	90bff40e 	bge	r18,r2,1345c <__alt_data_end+0xfc01345c>
   1348c:	d9801e04 	addi	r6,sp,120
   13490:	b80b883a 	mov	r5,r23
   13494:	9809883a 	mov	r4,r19
   13498:	001ad180 	call	1ad18 <__sprint_r>
   1349c:	103e5f1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   134a0:	843ffc04 	addi	r16,r16,-16
   134a4:	d8c02017 	ldw	r3,128(sp)
   134a8:	d8801f17 	ldw	r2,124(sp)
   134ac:	da000404 	addi	r8,sp,16
   134b0:	8c3fed16 	blt	r17,r16,13468 <__alt_data_end+0xfc013468>
   134b4:	d9403517 	ldw	r5,212(sp)
   134b8:	1c07883a 	add	r3,r3,r16
   134bc:	10800044 	addi	r2,r2,1
   134c0:	41400015 	stw	r5,0(r8)
   134c4:	44000115 	stw	r16,4(r8)
   134c8:	d8c02015 	stw	r3,128(sp)
   134cc:	d8801f15 	stw	r2,124(sp)
   134d0:	010001c4 	movi	r4,7
   134d4:	2080060e 	bge	r4,r2,134f0 <___vfprintf_internal_r+0xae4>
   134d8:	d9002d17 	ldw	r4,180(sp)
   134dc:	d9801e04 	addi	r6,sp,120
   134e0:	b80b883a 	mov	r5,r23
   134e4:	001ad180 	call	1ad18 <__sprint_r>
   134e8:	103e4c1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   134ec:	d8c02017 	ldw	r3,128(sp)
   134f0:	d8803117 	ldw	r2,196(sp)
   134f4:	d9002917 	ldw	r4,164(sp)
   134f8:	1100010e 	bge	r2,r4,13500 <___vfprintf_internal_r+0xaf4>
   134fc:	2005883a 	mov	r2,r4
   13500:	d9402f17 	ldw	r5,188(sp)
   13504:	288b883a 	add	r5,r5,r2
   13508:	d9402f15 	stw	r5,188(sp)
   1350c:	1801c01e 	bne	r3,zero,13c10 <___vfprintf_internal_r+0x1204>
   13510:	a8800007 	ldb	r2,0(r21)
   13514:	d8001f15 	stw	zero,124(sp)
   13518:	da000404 	addi	r8,sp,16
   1351c:	103d751e 	bne	r2,zero,12af4 <__alt_data_end+0xfc012af4>
   13520:	a823883a 	mov	r17,r21
   13524:	003d8b06 	br	12b54 <__alt_data_end+0xfc012b54>
   13528:	8025883a 	mov	r18,r16
   1352c:	dc002903 	ldbu	r16,164(sp)
   13530:	e011883a 	mov	r8,fp
   13534:	84003fcc 	andi	r16,r16,255
   13538:	8005e51e 	bne	r16,zero,14cd0 <___vfprintf_internal_r+0x22c4>
   1353c:	94800414 	ori	r18,r18,16
   13540:	9080080c 	andi	r2,r18,32
   13544:	10022b26 	beq	r2,zero,13df4 <___vfprintf_internal_r+0x13e8>
   13548:	d9002e17 	ldw	r4,184(sp)
   1354c:	d9402a17 	ldw	r5,168(sp)
   13550:	d8002785 	stb	zero,158(sp)
   13554:	20c00204 	addi	r3,r4,8
   13558:	24c00017 	ldw	r19,0(r4)
   1355c:	25800117 	ldw	r22,4(r4)
   13560:	28042e16 	blt	r5,zero,1461c <___vfprintf_internal_r+0x1c10>
   13564:	013fdfc4 	movi	r4,-129
   13568:	9d84b03a 	or	r2,r19,r22
   1356c:	d8c02e15 	stw	r3,184(sp)
   13570:	9124703a 	and	r18,r18,r4
   13574:	0039883a 	mov	fp,zero
   13578:	103e801e 	bne	r2,zero,12f7c <__alt_data_end+0xfc012f7c>
   1357c:	d9002a17 	ldw	r4,168(sp)
   13580:	2002e01e 	bne	r4,zero,14104 <___vfprintf_internal_r+0x16f8>
   13584:	d8002a15 	stw	zero,168(sp)
   13588:	d8002b15 	stw	zero,172(sp)
   1358c:	dc001e04 	addi	r16,sp,120
   13590:	003ef506 	br	13168 <__alt_data_end+0xfc013168>
   13594:	8025883a 	mov	r18,r16
   13598:	dc002903 	ldbu	r16,164(sp)
   1359c:	e011883a 	mov	r8,fp
   135a0:	84003fcc 	andi	r16,r16,255
   135a4:	8005ba1e 	bne	r16,zero,14c90 <___vfprintf_internal_r+0x2284>
   135a8:	010000f4 	movhi	r4,3
   135ac:	212eba04 	addi	r4,r4,-17688
   135b0:	d9003915 	stw	r4,228(sp)
   135b4:	9080080c 	andi	r2,r18,32
   135b8:	10006126 	beq	r2,zero,13740 <___vfprintf_internal_r+0xd34>
   135bc:	d9402e17 	ldw	r5,184(sp)
   135c0:	2cc00017 	ldw	r19,0(r5)
   135c4:	2d800117 	ldw	r22,4(r5)
   135c8:	29400204 	addi	r5,r5,8
   135cc:	d9402e15 	stw	r5,184(sp)
   135d0:	9080004c 	andi	r2,r18,1
   135d4:	1001ac26 	beq	r2,zero,13c88 <___vfprintf_internal_r+0x127c>
   135d8:	9d84b03a 	or	r2,r19,r22
   135dc:	10038526 	beq	r2,zero,143f4 <___vfprintf_internal_r+0x19e8>
   135e0:	d8c02a17 	ldw	r3,168(sp)
   135e4:	00800c04 	movi	r2,48
   135e8:	d8802705 	stb	r2,156(sp)
   135ec:	dc402745 	stb	r17,157(sp)
   135f0:	d8002785 	stb	zero,158(sp)
   135f4:	90800094 	ori	r2,r18,2
   135f8:	18047916 	blt	r3,zero,147e0 <___vfprintf_internal_r+0x1dd4>
   135fc:	00bfdfc4 	movi	r2,-129
   13600:	90a4703a 	and	r18,r18,r2
   13604:	94800094 	ori	r18,r18,2
   13608:	0039883a 	mov	fp,zero
   1360c:	d9003917 	ldw	r4,228(sp)
   13610:	dc001e04 	addi	r16,sp,120
   13614:	988003cc 	andi	r2,r19,15
   13618:	b006973a 	slli	r3,r22,28
   1361c:	2085883a 	add	r2,r4,r2
   13620:	9826d13a 	srli	r19,r19,4
   13624:	10800003 	ldbu	r2,0(r2)
   13628:	b02cd13a 	srli	r22,r22,4
   1362c:	843fffc4 	addi	r16,r16,-1
   13630:	1ce6b03a 	or	r19,r3,r19
   13634:	80800005 	stb	r2,0(r16)
   13638:	9d84b03a 	or	r2,r19,r22
   1363c:	103ff51e 	bne	r2,zero,13614 <__alt_data_end+0xfc013614>
   13640:	d8c02817 	ldw	r3,160(sp)
   13644:	1c07c83a 	sub	r3,r3,r16
   13648:	d8c02b15 	stw	r3,172(sp)
   1364c:	003ec606 	br	13168 <__alt_data_end+0xfc013168>
   13650:	8025883a 	mov	r18,r16
   13654:	dc002903 	ldbu	r16,164(sp)
   13658:	e011883a 	mov	r8,fp
   1365c:	84003fcc 	andi	r16,r16,255
   13660:	803e9626 	beq	r16,zero,130bc <__alt_data_end+0xfc0130bc>
   13664:	d8c02b03 	ldbu	r3,172(sp)
   13668:	d8c02785 	stb	r3,158(sp)
   1366c:	003e9306 	br	130bc <__alt_data_end+0xfc0130bc>
   13670:	00c00044 	movi	r3,1
   13674:	d8c02905 	stb	r3,164(sp)
   13678:	00c00ac4 	movi	r3,43
   1367c:	d8c02b05 	stb	r3,172(sp)
   13680:	ac400007 	ldb	r17,0(r21)
   13684:	003d4306 	br	12b94 <__alt_data_end+0xfc012b94>
   13688:	84000814 	ori	r16,r16,32
   1368c:	ac400007 	ldb	r17,0(r21)
   13690:	003d4006 	br	12b94 <__alt_data_end+0xfc012b94>
   13694:	d8802e17 	ldw	r2,184(sp)
   13698:	8025883a 	mov	r18,r16
   1369c:	d8002785 	stb	zero,158(sp)
   136a0:	14000017 	ldw	r16,0(r2)
   136a4:	e011883a 	mov	r8,fp
   136a8:	14c00104 	addi	r19,r2,4
   136ac:	80042d26 	beq	r16,zero,14764 <___vfprintf_internal_r+0x1d58>
   136b0:	d8c02a17 	ldw	r3,168(sp)
   136b4:	1803e416 	blt	r3,zero,14648 <___vfprintf_internal_r+0x1c3c>
   136b8:	180d883a 	mov	r6,r3
   136bc:	000b883a 	mov	r5,zero
   136c0:	8009883a 	mov	r4,r16
   136c4:	df003d15 	stw	fp,244(sp)
   136c8:	0017b380 	call	17b38 <memchr>
   136cc:	da003d17 	ldw	r8,244(sp)
   136d0:	10046826 	beq	r2,zero,14874 <___vfprintf_internal_r+0x1e68>
   136d4:	1405c83a 	sub	r2,r2,r16
   136d8:	d8802b15 	stw	r2,172(sp)
   136dc:	1003e016 	blt	r2,zero,14660 <___vfprintf_internal_r+0x1c54>
   136e0:	df002783 	ldbu	fp,158(sp)
   136e4:	d8802915 	stw	r2,164(sp)
   136e8:	dcc02e15 	stw	r19,184(sp)
   136ec:	d8002a15 	stw	zero,168(sp)
   136f0:	d8003215 	stw	zero,200(sp)
   136f4:	003ea206 	br	13180 <__alt_data_end+0xfc013180>
   136f8:	8025883a 	mov	r18,r16
   136fc:	dc002903 	ldbu	r16,164(sp)
   13700:	e011883a 	mov	r8,fp
   13704:	84003fcc 	andi	r16,r16,255
   13708:	803f8d26 	beq	r16,zero,13540 <__alt_data_end+0xfc013540>
   1370c:	d8c02b03 	ldbu	r3,172(sp)
   13710:	d8c02785 	stb	r3,158(sp)
   13714:	003f8a06 	br	13540 <__alt_data_end+0xfc013540>
   13718:	8025883a 	mov	r18,r16
   1371c:	dc002903 	ldbu	r16,164(sp)
   13720:	e011883a 	mov	r8,fp
   13724:	84003fcc 	andi	r16,r16,255
   13728:	8005661e 	bne	r16,zero,14cc4 <___vfprintf_internal_r+0x22b8>
   1372c:	010000f4 	movhi	r4,3
   13730:	212ebf04 	addi	r4,r4,-17668
   13734:	d9003915 	stw	r4,228(sp)
   13738:	9080080c 	andi	r2,r18,32
   1373c:	103f9f1e 	bne	r2,zero,135bc <__alt_data_end+0xfc0135bc>
   13740:	9080040c 	andi	r2,r18,16
   13744:	1002eb26 	beq	r2,zero,142f4 <___vfprintf_internal_r+0x18e8>
   13748:	d8802e17 	ldw	r2,184(sp)
   1374c:	002d883a 	mov	r22,zero
   13750:	14c00017 	ldw	r19,0(r2)
   13754:	10800104 	addi	r2,r2,4
   13758:	d8802e15 	stw	r2,184(sp)
   1375c:	003f9c06 	br	135d0 <__alt_data_end+0xfc0135d0>
   13760:	d8802b07 	ldb	r2,172(sp)
   13764:	1002e11e 	bne	r2,zero,142ec <___vfprintf_internal_r+0x18e0>
   13768:	00c00044 	movi	r3,1
   1376c:	d8c02905 	stb	r3,164(sp)
   13770:	00c00804 	movi	r3,32
   13774:	d8c02b05 	stb	r3,172(sp)
   13778:	ac400007 	ldb	r17,0(r21)
   1377c:	003d0506 	br	12b94 <__alt_data_end+0xfc012b94>
   13780:	84000054 	ori	r16,r16,1
   13784:	ac400007 	ldb	r17,0(r21)
   13788:	003d0206 	br	12b94 <__alt_data_end+0xfc012b94>
   1378c:	8025883a 	mov	r18,r16
   13790:	dc002903 	ldbu	r16,164(sp)
   13794:	e011883a 	mov	r8,fp
   13798:	84003fcc 	andi	r16,r16,255
   1379c:	803de726 	beq	r16,zero,12f3c <__alt_data_end+0xfc012f3c>
   137a0:	d8c02b03 	ldbu	r3,172(sp)
   137a4:	d8c02785 	stb	r3,158(sp)
   137a8:	003de406 	br	12f3c <__alt_data_end+0xfc012f3c>
   137ac:	84001014 	ori	r16,r16,64
   137b0:	ac400007 	ldb	r17,0(r21)
   137b4:	003cf706 	br	12b94 <__alt_data_end+0xfc012b94>
   137b8:	ac400007 	ldb	r17,0(r21)
   137bc:	00801b04 	movi	r2,108
   137c0:	88838f26 	beq	r17,r2,14600 <___vfprintf_internal_r+0x1bf4>
   137c4:	84000414 	ori	r16,r16,16
   137c8:	003cf206 	br	12b94 <__alt_data_end+0xfc012b94>
   137cc:	8025883a 	mov	r18,r16
   137d0:	dc002903 	ldbu	r16,164(sp)
   137d4:	e011883a 	mov	r8,fp
   137d8:	84003fcc 	andi	r16,r16,255
   137dc:	80053f1e 	bne	r16,zero,14cdc <___vfprintf_internal_r+0x22d0>
   137e0:	9080080c 	andi	r2,r18,32
   137e4:	1002d226 	beq	r2,zero,14330 <___vfprintf_internal_r+0x1924>
   137e8:	d9002e17 	ldw	r4,184(sp)
   137ec:	d9402f17 	ldw	r5,188(sp)
   137f0:	20800017 	ldw	r2,0(r4)
   137f4:	2807d7fa 	srai	r3,r5,31
   137f8:	21000104 	addi	r4,r4,4
   137fc:	d9002e15 	stw	r4,184(sp)
   13800:	11400015 	stw	r5,0(r2)
   13804:	10c00115 	stw	r3,4(r2)
   13808:	003cb806 	br	12aec <__alt_data_end+0xfc012aec>
   1380c:	d8c02e17 	ldw	r3,184(sp)
   13810:	d9002e17 	ldw	r4,184(sp)
   13814:	8025883a 	mov	r18,r16
   13818:	18800017 	ldw	r2,0(r3)
   1381c:	21000104 	addi	r4,r4,4
   13820:	00c00044 	movi	r3,1
   13824:	e011883a 	mov	r8,fp
   13828:	d8c02915 	stw	r3,164(sp)
   1382c:	d8002785 	stb	zero,158(sp)
   13830:	d8801405 	stb	r2,80(sp)
   13834:	d9002e15 	stw	r4,184(sp)
   13838:	d8c02b15 	stw	r3,172(sp)
   1383c:	d8002a15 	stw	zero,168(sp)
   13840:	d8003215 	stw	zero,200(sp)
   13844:	dc001404 	addi	r16,sp,80
   13848:	0039883a 	mov	fp,zero
   1384c:	003e5306 	br	1319c <__alt_data_end+0xfc01319c>
   13850:	010000f4 	movhi	r4,3
   13854:	212ebf04 	addi	r4,r4,-17668
   13858:	0039883a 	mov	fp,zero
   1385c:	d9003915 	stw	r4,228(sp)
   13860:	04401e04 	movi	r17,120
   13864:	003f6906 	br	1360c <__alt_data_end+0xfc01360c>
   13868:	8025883a 	mov	r18,r16
   1386c:	dc002903 	ldbu	r16,164(sp)
   13870:	e011883a 	mov	r8,fp
   13874:	84003fcc 	andi	r16,r16,255
   13878:	8005081e 	bne	r16,zero,14c9c <___vfprintf_internal_r+0x2290>
   1387c:	883d6126 	beq	r17,zero,12e04 <__alt_data_end+0xfc012e04>
   13880:	00c00044 	movi	r3,1
   13884:	d8c02915 	stw	r3,164(sp)
   13888:	dc401405 	stb	r17,80(sp)
   1388c:	d8002785 	stb	zero,158(sp)
   13890:	003fe906 	br	13838 <__alt_data_end+0xfc013838>
   13894:	014000f4 	movhi	r5,3
   13898:	296ebf04 	addi	r5,r5,-17668
   1389c:	d9403915 	stw	r5,228(sp)
   138a0:	d8c02e15 	stw	r3,184(sp)
   138a4:	1025883a 	mov	r18,r2
   138a8:	04401e04 	movi	r17,120
   138ac:	9d84b03a 	or	r2,r19,r22
   138b0:	1000fc1e 	bne	r2,zero,13ca4 <___vfprintf_internal_r+0x1298>
   138b4:	0039883a 	mov	fp,zero
   138b8:	00800084 	movi	r2,2
   138bc:	10803fcc 	andi	r2,r2,255
   138c0:	00c00044 	movi	r3,1
   138c4:	10c20f26 	beq	r2,r3,14104 <___vfprintf_internal_r+0x16f8>
   138c8:	00c00084 	movi	r3,2
   138cc:	10fd3326 	beq	r2,r3,12d9c <__alt_data_end+0xfc012d9c>
   138d0:	003e0b06 	br	13100 <__alt_data_end+0xfc013100>
   138d4:	d8c02017 	ldw	r3,128(sp)
   138d8:	003e7106 	br	132a0 <__alt_data_end+0xfc0132a0>
   138dc:	00801944 	movi	r2,101
   138e0:	14407e0e 	bge	r2,r17,13adc <___vfprintf_internal_r+0x10d0>
   138e4:	d9003617 	ldw	r4,216(sp)
   138e8:	d9403817 	ldw	r5,224(sp)
   138ec:	000d883a 	mov	r6,zero
   138f0:	000f883a 	mov	r7,zero
   138f4:	d8c03c15 	stw	r3,240(sp)
   138f8:	da003d15 	stw	r8,244(sp)
   138fc:	001ea9c0 	call	1ea9c <__eqdf2>
   13900:	d8c03c17 	ldw	r3,240(sp)
   13904:	da003d17 	ldw	r8,244(sp)
   13908:	1000f71e 	bne	r2,zero,13ce8 <___vfprintf_internal_r+0x12dc>
   1390c:	d8801f17 	ldw	r2,124(sp)
   13910:	010000f4 	movhi	r4,3
   13914:	212ec604 	addi	r4,r4,-17640
   13918:	18c00044 	addi	r3,r3,1
   1391c:	10800044 	addi	r2,r2,1
   13920:	41000015 	stw	r4,0(r8)
   13924:	01000044 	movi	r4,1
   13928:	41000115 	stw	r4,4(r8)
   1392c:	d8c02015 	stw	r3,128(sp)
   13930:	d8801f15 	stw	r2,124(sp)
   13934:	010001c4 	movi	r4,7
   13938:	2082b816 	blt	r4,r2,1441c <___vfprintf_internal_r+0x1a10>
   1393c:	42000204 	addi	r8,r8,8
   13940:	d8802617 	ldw	r2,152(sp)
   13944:	d9403317 	ldw	r5,204(sp)
   13948:	11400216 	blt	r2,r5,13954 <___vfprintf_internal_r+0xf48>
   1394c:	9080004c 	andi	r2,r18,1
   13950:	103eb326 	beq	r2,zero,13420 <__alt_data_end+0xfc013420>
   13954:	d8803717 	ldw	r2,220(sp)
   13958:	d9003417 	ldw	r4,208(sp)
   1395c:	d9403717 	ldw	r5,220(sp)
   13960:	1887883a 	add	r3,r3,r2
   13964:	d8801f17 	ldw	r2,124(sp)
   13968:	41000015 	stw	r4,0(r8)
   1396c:	41400115 	stw	r5,4(r8)
   13970:	10800044 	addi	r2,r2,1
   13974:	d8c02015 	stw	r3,128(sp)
   13978:	d8801f15 	stw	r2,124(sp)
   1397c:	010001c4 	movi	r4,7
   13980:	20832916 	blt	r4,r2,14628 <___vfprintf_internal_r+0x1c1c>
   13984:	42000204 	addi	r8,r8,8
   13988:	d8803317 	ldw	r2,204(sp)
   1398c:	143fffc4 	addi	r16,r2,-1
   13990:	043ea30e 	bge	zero,r16,13420 <__alt_data_end+0xfc013420>
   13994:	04400404 	movi	r17,16
   13998:	d8801f17 	ldw	r2,124(sp)
   1399c:	8c00880e 	bge	r17,r16,13bc0 <___vfprintf_internal_r+0x11b4>
   139a0:	014000f4 	movhi	r5,3
   139a4:	296ece84 	addi	r5,r5,-17606
   139a8:	d9402c15 	stw	r5,176(sp)
   139ac:	058001c4 	movi	r22,7
   139b0:	dcc02d17 	ldw	r19,180(sp)
   139b4:	00000306 	br	139c4 <___vfprintf_internal_r+0xfb8>
   139b8:	42000204 	addi	r8,r8,8
   139bc:	843ffc04 	addi	r16,r16,-16
   139c0:	8c00820e 	bge	r17,r16,13bcc <___vfprintf_internal_r+0x11c0>
   139c4:	18c00404 	addi	r3,r3,16
   139c8:	10800044 	addi	r2,r2,1
   139cc:	45000015 	stw	r20,0(r8)
   139d0:	44400115 	stw	r17,4(r8)
   139d4:	d8c02015 	stw	r3,128(sp)
   139d8:	d8801f15 	stw	r2,124(sp)
   139dc:	b0bff60e 	bge	r22,r2,139b8 <__alt_data_end+0xfc0139b8>
   139e0:	d9801e04 	addi	r6,sp,120
   139e4:	b80b883a 	mov	r5,r23
   139e8:	9809883a 	mov	r4,r19
   139ec:	001ad180 	call	1ad18 <__sprint_r>
   139f0:	103d0a1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   139f4:	d8c02017 	ldw	r3,128(sp)
   139f8:	d8801f17 	ldw	r2,124(sp)
   139fc:	da000404 	addi	r8,sp,16
   13a00:	003fee06 	br	139bc <__alt_data_end+0xfc0139bc>
   13a04:	d9403117 	ldw	r5,196(sp)
   13a08:	d8802917 	ldw	r2,164(sp)
   13a0c:	28adc83a 	sub	r22,r5,r2
   13a10:	05be410e 	bge	zero,r22,13318 <__alt_data_end+0xfc013318>
   13a14:	07000404 	movi	fp,16
   13a18:	d8801f17 	ldw	r2,124(sp)
   13a1c:	e5838f0e 	bge	fp,r22,1485c <___vfprintf_internal_r+0x1e50>
   13a20:	014000f4 	movhi	r5,3
   13a24:	296ece84 	addi	r5,r5,-17606
   13a28:	dc403015 	stw	r17,192(sp)
   13a2c:	d9402c15 	stw	r5,176(sp)
   13a30:	b023883a 	mov	r17,r22
   13a34:	04c001c4 	movi	r19,7
   13a38:	a82d883a 	mov	r22,r21
   13a3c:	902b883a 	mov	r21,r18
   13a40:	8025883a 	mov	r18,r16
   13a44:	dc002d17 	ldw	r16,180(sp)
   13a48:	00000306 	br	13a58 <___vfprintf_internal_r+0x104c>
   13a4c:	8c7ffc04 	addi	r17,r17,-16
   13a50:	42000204 	addi	r8,r8,8
   13a54:	e440110e 	bge	fp,r17,13a9c <___vfprintf_internal_r+0x1090>
   13a58:	18c00404 	addi	r3,r3,16
   13a5c:	10800044 	addi	r2,r2,1
   13a60:	45000015 	stw	r20,0(r8)
   13a64:	47000115 	stw	fp,4(r8)
   13a68:	d8c02015 	stw	r3,128(sp)
   13a6c:	d8801f15 	stw	r2,124(sp)
   13a70:	98bff60e 	bge	r19,r2,13a4c <__alt_data_end+0xfc013a4c>
   13a74:	d9801e04 	addi	r6,sp,120
   13a78:	b80b883a 	mov	r5,r23
   13a7c:	8009883a 	mov	r4,r16
   13a80:	001ad180 	call	1ad18 <__sprint_r>
   13a84:	103ce51e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13a88:	8c7ffc04 	addi	r17,r17,-16
   13a8c:	d8c02017 	ldw	r3,128(sp)
   13a90:	d8801f17 	ldw	r2,124(sp)
   13a94:	da000404 	addi	r8,sp,16
   13a98:	e47fef16 	blt	fp,r17,13a58 <__alt_data_end+0xfc013a58>
   13a9c:	9021883a 	mov	r16,r18
   13aa0:	a825883a 	mov	r18,r21
   13aa4:	b02b883a 	mov	r21,r22
   13aa8:	882d883a 	mov	r22,r17
   13aac:	dc403017 	ldw	r17,192(sp)
   13ab0:	d9002c17 	ldw	r4,176(sp)
   13ab4:	1d87883a 	add	r3,r3,r22
   13ab8:	10800044 	addi	r2,r2,1
   13abc:	41000015 	stw	r4,0(r8)
   13ac0:	45800115 	stw	r22,4(r8)
   13ac4:	d8c02015 	stw	r3,128(sp)
   13ac8:	d8801f15 	stw	r2,124(sp)
   13acc:	010001c4 	movi	r4,7
   13ad0:	20818e16 	blt	r4,r2,1410c <___vfprintf_internal_r+0x1700>
   13ad4:	42000204 	addi	r8,r8,8
   13ad8:	003e0f06 	br	13318 <__alt_data_end+0xfc013318>
   13adc:	d9403317 	ldw	r5,204(sp)
   13ae0:	00800044 	movi	r2,1
   13ae4:	18c00044 	addi	r3,r3,1
   13ae8:	1141530e 	bge	r2,r5,14038 <___vfprintf_internal_r+0x162c>
   13aec:	dc401f17 	ldw	r17,124(sp)
   13af0:	00800044 	movi	r2,1
   13af4:	40800115 	stw	r2,4(r8)
   13af8:	8c400044 	addi	r17,r17,1
   13afc:	44000015 	stw	r16,0(r8)
   13b00:	d8c02015 	stw	r3,128(sp)
   13b04:	dc401f15 	stw	r17,124(sp)
   13b08:	008001c4 	movi	r2,7
   13b0c:	14416b16 	blt	r2,r17,140bc <___vfprintf_internal_r+0x16b0>
   13b10:	42000204 	addi	r8,r8,8
   13b14:	d8803717 	ldw	r2,220(sp)
   13b18:	d9003417 	ldw	r4,208(sp)
   13b1c:	8c400044 	addi	r17,r17,1
   13b20:	10c7883a 	add	r3,r2,r3
   13b24:	40800115 	stw	r2,4(r8)
   13b28:	41000015 	stw	r4,0(r8)
   13b2c:	d8c02015 	stw	r3,128(sp)
   13b30:	dc401f15 	stw	r17,124(sp)
   13b34:	008001c4 	movi	r2,7
   13b38:	14416916 	blt	r2,r17,140e0 <___vfprintf_internal_r+0x16d4>
   13b3c:	45800204 	addi	r22,r8,8
   13b40:	d9003617 	ldw	r4,216(sp)
   13b44:	d9403817 	ldw	r5,224(sp)
   13b48:	000d883a 	mov	r6,zero
   13b4c:	000f883a 	mov	r7,zero
   13b50:	d8c03c15 	stw	r3,240(sp)
   13b54:	001ea9c0 	call	1ea9c <__eqdf2>
   13b58:	d8c03c17 	ldw	r3,240(sp)
   13b5c:	1000bc26 	beq	r2,zero,13e50 <___vfprintf_internal_r+0x1444>
   13b60:	d9403317 	ldw	r5,204(sp)
   13b64:	84000044 	addi	r16,r16,1
   13b68:	8c400044 	addi	r17,r17,1
   13b6c:	28bfffc4 	addi	r2,r5,-1
   13b70:	1887883a 	add	r3,r3,r2
   13b74:	b0800115 	stw	r2,4(r22)
   13b78:	b4000015 	stw	r16,0(r22)
   13b7c:	d8c02015 	stw	r3,128(sp)
   13b80:	dc401f15 	stw	r17,124(sp)
   13b84:	008001c4 	movi	r2,7
   13b88:	14414316 	blt	r2,r17,14098 <___vfprintf_internal_r+0x168c>
   13b8c:	b5800204 	addi	r22,r22,8
   13b90:	d9003a17 	ldw	r4,232(sp)
   13b94:	df0022c4 	addi	fp,sp,139
   13b98:	8c400044 	addi	r17,r17,1
   13b9c:	20c7883a 	add	r3,r4,r3
   13ba0:	b7000015 	stw	fp,0(r22)
   13ba4:	b1000115 	stw	r4,4(r22)
   13ba8:	d8c02015 	stw	r3,128(sp)
   13bac:	dc401f15 	stw	r17,124(sp)
   13bb0:	008001c4 	movi	r2,7
   13bb4:	14400e16 	blt	r2,r17,13bf0 <___vfprintf_internal_r+0x11e4>
   13bb8:	b2000204 	addi	r8,r22,8
   13bbc:	003e1806 	br	13420 <__alt_data_end+0xfc013420>
   13bc0:	010000f4 	movhi	r4,3
   13bc4:	212ece84 	addi	r4,r4,-17606
   13bc8:	d9002c15 	stw	r4,176(sp)
   13bcc:	d9002c17 	ldw	r4,176(sp)
   13bd0:	1c07883a 	add	r3,r3,r16
   13bd4:	44000115 	stw	r16,4(r8)
   13bd8:	41000015 	stw	r4,0(r8)
   13bdc:	10800044 	addi	r2,r2,1
   13be0:	d8c02015 	stw	r3,128(sp)
   13be4:	d8801f15 	stw	r2,124(sp)
   13be8:	010001c4 	movi	r4,7
   13bec:	20be0b0e 	bge	r4,r2,1341c <__alt_data_end+0xfc01341c>
   13bf0:	d9002d17 	ldw	r4,180(sp)
   13bf4:	d9801e04 	addi	r6,sp,120
   13bf8:	b80b883a 	mov	r5,r23
   13bfc:	001ad180 	call	1ad18 <__sprint_r>
   13c00:	103c861e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13c04:	d8c02017 	ldw	r3,128(sp)
   13c08:	da000404 	addi	r8,sp,16
   13c0c:	003e0406 	br	13420 <__alt_data_end+0xfc013420>
   13c10:	d9002d17 	ldw	r4,180(sp)
   13c14:	d9801e04 	addi	r6,sp,120
   13c18:	b80b883a 	mov	r5,r23
   13c1c:	001ad180 	call	1ad18 <__sprint_r>
   13c20:	103e3b26 	beq	r2,zero,13510 <__alt_data_end+0xfc013510>
   13c24:	003c7d06 	br	12e1c <__alt_data_end+0xfc012e1c>
   13c28:	d9002d17 	ldw	r4,180(sp)
   13c2c:	d9801e04 	addi	r6,sp,120
   13c30:	b80b883a 	mov	r5,r23
   13c34:	001ad180 	call	1ad18 <__sprint_r>
   13c38:	103c781e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13c3c:	d8c02017 	ldw	r3,128(sp)
   13c40:	da000404 	addi	r8,sp,16
   13c44:	003de906 	br	133ec <__alt_data_end+0xfc0133ec>
   13c48:	d9002d17 	ldw	r4,180(sp)
   13c4c:	d9801e04 	addi	r6,sp,120
   13c50:	b80b883a 	mov	r5,r23
   13c54:	001ad180 	call	1ad18 <__sprint_r>
   13c58:	103c701e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13c5c:	d8c02017 	ldw	r3,128(sp)
   13c60:	da000404 	addi	r8,sp,16
   13c64:	003d9b06 	br	132d4 <__alt_data_end+0xfc0132d4>
   13c68:	d9002d17 	ldw	r4,180(sp)
   13c6c:	d9801e04 	addi	r6,sp,120
   13c70:	b80b883a 	mov	r5,r23
   13c74:	001ad180 	call	1ad18 <__sprint_r>
   13c78:	103c681e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13c7c:	d8c02017 	ldw	r3,128(sp)
   13c80:	da000404 	addi	r8,sp,16
   13c84:	003da106 	br	1330c <__alt_data_end+0xfc01330c>
   13c88:	d9402a17 	ldw	r5,168(sp)
   13c8c:	d8002785 	stb	zero,158(sp)
   13c90:	283f0616 	blt	r5,zero,138ac <__alt_data_end+0xfc0138ac>
   13c94:	00ffdfc4 	movi	r3,-129
   13c98:	9d84b03a 	or	r2,r19,r22
   13c9c:	90e4703a 	and	r18,r18,r3
   13ca0:	103c3b26 	beq	r2,zero,12d90 <__alt_data_end+0xfc012d90>
   13ca4:	0039883a 	mov	fp,zero
   13ca8:	003e5806 	br	1360c <__alt_data_end+0xfc01360c>
   13cac:	9080040c 	andi	r2,r18,16
   13cb0:	1001b326 	beq	r2,zero,14380 <___vfprintf_internal_r+0x1974>
   13cb4:	d8c02e17 	ldw	r3,184(sp)
   13cb8:	d9002a17 	ldw	r4,168(sp)
   13cbc:	d8002785 	stb	zero,158(sp)
   13cc0:	18800104 	addi	r2,r3,4
   13cc4:	1cc00017 	ldw	r19,0(r3)
   13cc8:	002d883a 	mov	r22,zero
   13ccc:	2001b516 	blt	r4,zero,143a4 <___vfprintf_internal_r+0x1998>
   13cd0:	00ffdfc4 	movi	r3,-129
   13cd4:	d8802e15 	stw	r2,184(sp)
   13cd8:	90e4703a 	and	r18,r18,r3
   13cdc:	983d0526 	beq	r19,zero,130f4 <__alt_data_end+0xfc0130f4>
   13ce0:	0039883a 	mov	fp,zero
   13ce4:	003d0806 	br	13108 <__alt_data_end+0xfc013108>
   13ce8:	dc402617 	ldw	r17,152(sp)
   13cec:	0441d30e 	bge	zero,r17,1443c <___vfprintf_internal_r+0x1a30>
   13cf0:	dc403217 	ldw	r17,200(sp)
   13cf4:	d8803317 	ldw	r2,204(sp)
   13cf8:	1440010e 	bge	r2,r17,13d00 <___vfprintf_internal_r+0x12f4>
   13cfc:	1023883a 	mov	r17,r2
   13d00:	04400a0e 	bge	zero,r17,13d2c <___vfprintf_internal_r+0x1320>
   13d04:	d8801f17 	ldw	r2,124(sp)
   13d08:	1c47883a 	add	r3,r3,r17
   13d0c:	44000015 	stw	r16,0(r8)
   13d10:	10800044 	addi	r2,r2,1
   13d14:	44400115 	stw	r17,4(r8)
   13d18:	d8c02015 	stw	r3,128(sp)
   13d1c:	d8801f15 	stw	r2,124(sp)
   13d20:	010001c4 	movi	r4,7
   13d24:	20826516 	blt	r4,r2,146bc <___vfprintf_internal_r+0x1cb0>
   13d28:	42000204 	addi	r8,r8,8
   13d2c:	88026116 	blt	r17,zero,146b4 <___vfprintf_internal_r+0x1ca8>
   13d30:	d9003217 	ldw	r4,200(sp)
   13d34:	2463c83a 	sub	r17,r4,r17
   13d38:	04407b0e 	bge	zero,r17,13f28 <___vfprintf_internal_r+0x151c>
   13d3c:	05800404 	movi	r22,16
   13d40:	d8801f17 	ldw	r2,124(sp)
   13d44:	b4419d0e 	bge	r22,r17,143bc <___vfprintf_internal_r+0x19b0>
   13d48:	010000f4 	movhi	r4,3
   13d4c:	212ece84 	addi	r4,r4,-17606
   13d50:	d9002c15 	stw	r4,176(sp)
   13d54:	070001c4 	movi	fp,7
   13d58:	dcc02d17 	ldw	r19,180(sp)
   13d5c:	00000306 	br	13d6c <___vfprintf_internal_r+0x1360>
   13d60:	42000204 	addi	r8,r8,8
   13d64:	8c7ffc04 	addi	r17,r17,-16
   13d68:	b441970e 	bge	r22,r17,143c8 <___vfprintf_internal_r+0x19bc>
   13d6c:	18c00404 	addi	r3,r3,16
   13d70:	10800044 	addi	r2,r2,1
   13d74:	45000015 	stw	r20,0(r8)
   13d78:	45800115 	stw	r22,4(r8)
   13d7c:	d8c02015 	stw	r3,128(sp)
   13d80:	d8801f15 	stw	r2,124(sp)
   13d84:	e0bff60e 	bge	fp,r2,13d60 <__alt_data_end+0xfc013d60>
   13d88:	d9801e04 	addi	r6,sp,120
   13d8c:	b80b883a 	mov	r5,r23
   13d90:	9809883a 	mov	r4,r19
   13d94:	001ad180 	call	1ad18 <__sprint_r>
   13d98:	103c201e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13d9c:	d8c02017 	ldw	r3,128(sp)
   13da0:	d8801f17 	ldw	r2,124(sp)
   13da4:	da000404 	addi	r8,sp,16
   13da8:	003fee06 	br	13d64 <__alt_data_end+0xfc013d64>
   13dac:	d9002d17 	ldw	r4,180(sp)
   13db0:	d9801e04 	addi	r6,sp,120
   13db4:	b80b883a 	mov	r5,r23
   13db8:	001ad180 	call	1ad18 <__sprint_r>
   13dbc:	103c171e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13dc0:	d8c02017 	ldw	r3,128(sp)
   13dc4:	df002787 	ldb	fp,158(sp)
   13dc8:	da000404 	addi	r8,sp,16
   13dcc:	003d3406 	br	132a0 <__alt_data_end+0xfc0132a0>
   13dd0:	9080040c 	andi	r2,r18,16
   13dd4:	10016126 	beq	r2,zero,1435c <___vfprintf_internal_r+0x1950>
   13dd8:	d9402e17 	ldw	r5,184(sp)
   13ddc:	2cc00017 	ldw	r19,0(r5)
   13de0:	29400104 	addi	r5,r5,4
   13de4:	d9402e15 	stw	r5,184(sp)
   13de8:	982dd7fa 	srai	r22,r19,31
   13dec:	b005883a 	mov	r2,r22
   13df0:	003c5a06 	br	12f5c <__alt_data_end+0xfc012f5c>
   13df4:	9080040c 	andi	r2,r18,16
   13df8:	10003526 	beq	r2,zero,13ed0 <___vfprintf_internal_r+0x14c4>
   13dfc:	d8c02e17 	ldw	r3,184(sp)
   13e00:	d9002a17 	ldw	r4,168(sp)
   13e04:	d8002785 	stb	zero,158(sp)
   13e08:	18800104 	addi	r2,r3,4
   13e0c:	1cc00017 	ldw	r19,0(r3)
   13e10:	002d883a 	mov	r22,zero
   13e14:	20003716 	blt	r4,zero,13ef4 <___vfprintf_internal_r+0x14e8>
   13e18:	00ffdfc4 	movi	r3,-129
   13e1c:	d8802e15 	stw	r2,184(sp)
   13e20:	90e4703a 	and	r18,r18,r3
   13e24:	0039883a 	mov	fp,zero
   13e28:	983dd426 	beq	r19,zero,1357c <__alt_data_end+0xfc01357c>
   13e2c:	00800244 	movi	r2,9
   13e30:	14fc5336 	bltu	r2,r19,12f80 <__alt_data_end+0xfc012f80>
   13e34:	d8c02817 	ldw	r3,160(sp)
   13e38:	dc001dc4 	addi	r16,sp,119
   13e3c:	9cc00c04 	addi	r19,r19,48
   13e40:	1c07c83a 	sub	r3,r3,r16
   13e44:	dcc01dc5 	stb	r19,119(sp)
   13e48:	d8c02b15 	stw	r3,172(sp)
   13e4c:	003cc606 	br	13168 <__alt_data_end+0xfc013168>
   13e50:	d8803317 	ldw	r2,204(sp)
   13e54:	143fffc4 	addi	r16,r2,-1
   13e58:	043f4d0e 	bge	zero,r16,13b90 <__alt_data_end+0xfc013b90>
   13e5c:	07000404 	movi	fp,16
   13e60:	e400810e 	bge	fp,r16,14068 <___vfprintf_internal_r+0x165c>
   13e64:	014000f4 	movhi	r5,3
   13e68:	296ece84 	addi	r5,r5,-17606
   13e6c:	d9402c15 	stw	r5,176(sp)
   13e70:	01c001c4 	movi	r7,7
   13e74:	dcc02d17 	ldw	r19,180(sp)
   13e78:	00000306 	br	13e88 <___vfprintf_internal_r+0x147c>
   13e7c:	b5800204 	addi	r22,r22,8
   13e80:	843ffc04 	addi	r16,r16,-16
   13e84:	e4007b0e 	bge	fp,r16,14074 <___vfprintf_internal_r+0x1668>
   13e88:	18c00404 	addi	r3,r3,16
   13e8c:	8c400044 	addi	r17,r17,1
   13e90:	b5000015 	stw	r20,0(r22)
   13e94:	b7000115 	stw	fp,4(r22)
   13e98:	d8c02015 	stw	r3,128(sp)
   13e9c:	dc401f15 	stw	r17,124(sp)
   13ea0:	3c7ff60e 	bge	r7,r17,13e7c <__alt_data_end+0xfc013e7c>
   13ea4:	d9801e04 	addi	r6,sp,120
   13ea8:	b80b883a 	mov	r5,r23
   13eac:	9809883a 	mov	r4,r19
   13eb0:	d9c03c15 	stw	r7,240(sp)
   13eb4:	001ad180 	call	1ad18 <__sprint_r>
   13eb8:	d9c03c17 	ldw	r7,240(sp)
   13ebc:	103bd71e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13ec0:	d8c02017 	ldw	r3,128(sp)
   13ec4:	dc401f17 	ldw	r17,124(sp)
   13ec8:	dd800404 	addi	r22,sp,16
   13ecc:	003fec06 	br	13e80 <__alt_data_end+0xfc013e80>
   13ed0:	9080100c 	andi	r2,r18,64
   13ed4:	d8002785 	stb	zero,158(sp)
   13ed8:	10010e26 	beq	r2,zero,14314 <___vfprintf_internal_r+0x1908>
   13edc:	d9402e17 	ldw	r5,184(sp)
   13ee0:	d8c02a17 	ldw	r3,168(sp)
   13ee4:	002d883a 	mov	r22,zero
   13ee8:	28800104 	addi	r2,r5,4
   13eec:	2cc0000b 	ldhu	r19,0(r5)
   13ef0:	183fc90e 	bge	r3,zero,13e18 <__alt_data_end+0xfc013e18>
   13ef4:	d8802e15 	stw	r2,184(sp)
   13ef8:	0039883a 	mov	fp,zero
   13efc:	9d84b03a 	or	r2,r19,r22
   13f00:	103c1e1e 	bne	r2,zero,12f7c <__alt_data_end+0xfc012f7c>
   13f04:	00800044 	movi	r2,1
   13f08:	003e6c06 	br	138bc <__alt_data_end+0xfc0138bc>
   13f0c:	d9002d17 	ldw	r4,180(sp)
   13f10:	d9801e04 	addi	r6,sp,120
   13f14:	b80b883a 	mov	r5,r23
   13f18:	001ad180 	call	1ad18 <__sprint_r>
   13f1c:	103bbf1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   13f20:	d8c02017 	ldw	r3,128(sp)
   13f24:	da000404 	addi	r8,sp,16
   13f28:	d9003217 	ldw	r4,200(sp)
   13f2c:	d8802617 	ldw	r2,152(sp)
   13f30:	d9403317 	ldw	r5,204(sp)
   13f34:	8123883a 	add	r17,r16,r4
   13f38:	11400216 	blt	r2,r5,13f44 <___vfprintf_internal_r+0x1538>
   13f3c:	9100004c 	andi	r4,r18,1
   13f40:	20000d26 	beq	r4,zero,13f78 <___vfprintf_internal_r+0x156c>
   13f44:	d9003717 	ldw	r4,220(sp)
   13f48:	d9403417 	ldw	r5,208(sp)
   13f4c:	1907883a 	add	r3,r3,r4
   13f50:	d9001f17 	ldw	r4,124(sp)
   13f54:	41400015 	stw	r5,0(r8)
   13f58:	d9403717 	ldw	r5,220(sp)
   13f5c:	21000044 	addi	r4,r4,1
   13f60:	d8c02015 	stw	r3,128(sp)
   13f64:	41400115 	stw	r5,4(r8)
   13f68:	d9001f15 	stw	r4,124(sp)
   13f6c:	014001c4 	movi	r5,7
   13f70:	2901e816 	blt	r5,r4,14714 <___vfprintf_internal_r+0x1d08>
   13f74:	42000204 	addi	r8,r8,8
   13f78:	d9003317 	ldw	r4,204(sp)
   13f7c:	8121883a 	add	r16,r16,r4
   13f80:	2085c83a 	sub	r2,r4,r2
   13f84:	8461c83a 	sub	r16,r16,r17
   13f88:	1400010e 	bge	r2,r16,13f90 <___vfprintf_internal_r+0x1584>
   13f8c:	1021883a 	mov	r16,r2
   13f90:	04000a0e 	bge	zero,r16,13fbc <___vfprintf_internal_r+0x15b0>
   13f94:	d9001f17 	ldw	r4,124(sp)
   13f98:	1c07883a 	add	r3,r3,r16
   13f9c:	44400015 	stw	r17,0(r8)
   13fa0:	21000044 	addi	r4,r4,1
   13fa4:	44000115 	stw	r16,4(r8)
   13fa8:	d8c02015 	stw	r3,128(sp)
   13fac:	d9001f15 	stw	r4,124(sp)
   13fb0:	014001c4 	movi	r5,7
   13fb4:	2901fb16 	blt	r5,r4,147a4 <___vfprintf_internal_r+0x1d98>
   13fb8:	42000204 	addi	r8,r8,8
   13fbc:	8001f716 	blt	r16,zero,1479c <___vfprintf_internal_r+0x1d90>
   13fc0:	1421c83a 	sub	r16,r2,r16
   13fc4:	043d160e 	bge	zero,r16,13420 <__alt_data_end+0xfc013420>
   13fc8:	04400404 	movi	r17,16
   13fcc:	d8801f17 	ldw	r2,124(sp)
   13fd0:	8c3efb0e 	bge	r17,r16,13bc0 <__alt_data_end+0xfc013bc0>
   13fd4:	014000f4 	movhi	r5,3
   13fd8:	296ece84 	addi	r5,r5,-17606
   13fdc:	d9402c15 	stw	r5,176(sp)
   13fe0:	058001c4 	movi	r22,7
   13fe4:	dcc02d17 	ldw	r19,180(sp)
   13fe8:	00000306 	br	13ff8 <___vfprintf_internal_r+0x15ec>
   13fec:	42000204 	addi	r8,r8,8
   13ff0:	843ffc04 	addi	r16,r16,-16
   13ff4:	8c3ef50e 	bge	r17,r16,13bcc <__alt_data_end+0xfc013bcc>
   13ff8:	18c00404 	addi	r3,r3,16
   13ffc:	10800044 	addi	r2,r2,1
   14000:	45000015 	stw	r20,0(r8)
   14004:	44400115 	stw	r17,4(r8)
   14008:	d8c02015 	stw	r3,128(sp)
   1400c:	d8801f15 	stw	r2,124(sp)
   14010:	b0bff60e 	bge	r22,r2,13fec <__alt_data_end+0xfc013fec>
   14014:	d9801e04 	addi	r6,sp,120
   14018:	b80b883a 	mov	r5,r23
   1401c:	9809883a 	mov	r4,r19
   14020:	001ad180 	call	1ad18 <__sprint_r>
   14024:	103b7d1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   14028:	d8c02017 	ldw	r3,128(sp)
   1402c:	d8801f17 	ldw	r2,124(sp)
   14030:	da000404 	addi	r8,sp,16
   14034:	003fee06 	br	13ff0 <__alt_data_end+0xfc013ff0>
   14038:	9088703a 	and	r4,r18,r2
   1403c:	203eab1e 	bne	r4,zero,13aec <__alt_data_end+0xfc013aec>
   14040:	dc401f17 	ldw	r17,124(sp)
   14044:	40800115 	stw	r2,4(r8)
   14048:	44000015 	stw	r16,0(r8)
   1404c:	8c400044 	addi	r17,r17,1
   14050:	d8c02015 	stw	r3,128(sp)
   14054:	dc401f15 	stw	r17,124(sp)
   14058:	008001c4 	movi	r2,7
   1405c:	14400e16 	blt	r2,r17,14098 <___vfprintf_internal_r+0x168c>
   14060:	45800204 	addi	r22,r8,8
   14064:	003eca06 	br	13b90 <__alt_data_end+0xfc013b90>
   14068:	010000f4 	movhi	r4,3
   1406c:	212ece84 	addi	r4,r4,-17606
   14070:	d9002c15 	stw	r4,176(sp)
   14074:	d8802c17 	ldw	r2,176(sp)
   14078:	1c07883a 	add	r3,r3,r16
   1407c:	8c400044 	addi	r17,r17,1
   14080:	b0800015 	stw	r2,0(r22)
   14084:	b4000115 	stw	r16,4(r22)
   14088:	d8c02015 	stw	r3,128(sp)
   1408c:	dc401f15 	stw	r17,124(sp)
   14090:	008001c4 	movi	r2,7
   14094:	147ebd0e 	bge	r2,r17,13b8c <__alt_data_end+0xfc013b8c>
   14098:	d9002d17 	ldw	r4,180(sp)
   1409c:	d9801e04 	addi	r6,sp,120
   140a0:	b80b883a 	mov	r5,r23
   140a4:	001ad180 	call	1ad18 <__sprint_r>
   140a8:	103b5c1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   140ac:	d8c02017 	ldw	r3,128(sp)
   140b0:	dc401f17 	ldw	r17,124(sp)
   140b4:	dd800404 	addi	r22,sp,16
   140b8:	003eb506 	br	13b90 <__alt_data_end+0xfc013b90>
   140bc:	d9002d17 	ldw	r4,180(sp)
   140c0:	d9801e04 	addi	r6,sp,120
   140c4:	b80b883a 	mov	r5,r23
   140c8:	001ad180 	call	1ad18 <__sprint_r>
   140cc:	103b531e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   140d0:	d8c02017 	ldw	r3,128(sp)
   140d4:	dc401f17 	ldw	r17,124(sp)
   140d8:	da000404 	addi	r8,sp,16
   140dc:	003e8d06 	br	13b14 <__alt_data_end+0xfc013b14>
   140e0:	d9002d17 	ldw	r4,180(sp)
   140e4:	d9801e04 	addi	r6,sp,120
   140e8:	b80b883a 	mov	r5,r23
   140ec:	001ad180 	call	1ad18 <__sprint_r>
   140f0:	103b4a1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   140f4:	d8c02017 	ldw	r3,128(sp)
   140f8:	dc401f17 	ldw	r17,124(sp)
   140fc:	dd800404 	addi	r22,sp,16
   14100:	003e8f06 	br	13b40 <__alt_data_end+0xfc013b40>
   14104:	0027883a 	mov	r19,zero
   14108:	003f4a06 	br	13e34 <__alt_data_end+0xfc013e34>
   1410c:	d9002d17 	ldw	r4,180(sp)
   14110:	d9801e04 	addi	r6,sp,120
   14114:	b80b883a 	mov	r5,r23
   14118:	001ad180 	call	1ad18 <__sprint_r>
   1411c:	103b3f1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   14120:	d8c02017 	ldw	r3,128(sp)
   14124:	da000404 	addi	r8,sp,16
   14128:	003c7b06 	br	13318 <__alt_data_end+0xfc013318>
   1412c:	d9402a17 	ldw	r5,168(sp)
   14130:	04e7c83a 	sub	r19,zero,r19
   14134:	07000b44 	movi	fp,45
   14138:	9804c03a 	cmpne	r2,r19,zero
   1413c:	05adc83a 	sub	r22,zero,r22
   14140:	df002785 	stb	fp,158(sp)
   14144:	b0adc83a 	sub	r22,r22,r2
   14148:	28017b16 	blt	r5,zero,14738 <___vfprintf_internal_r+0x1d2c>
   1414c:	00bfdfc4 	movi	r2,-129
   14150:	90a4703a 	and	r18,r18,r2
   14154:	003b8906 	br	12f7c <__alt_data_end+0xfc012f7c>
   14158:	d9003617 	ldw	r4,216(sp)
   1415c:	d9403817 	ldw	r5,224(sp)
   14160:	da003d15 	stw	r8,244(sp)
   14164:	00194fc0 	call	194fc <__fpclassifyd>
   14168:	da003d17 	ldw	r8,244(sp)
   1416c:	1000f026 	beq	r2,zero,14530 <___vfprintf_internal_r+0x1b24>
   14170:	d9002a17 	ldw	r4,168(sp)
   14174:	05bff7c4 	movi	r22,-33
   14178:	00bfffc4 	movi	r2,-1
   1417c:	8dac703a 	and	r22,r17,r22
   14180:	20820026 	beq	r4,r2,14984 <___vfprintf_internal_r+0x1f78>
   14184:	008011c4 	movi	r2,71
   14188:	b081f726 	beq	r22,r2,14968 <___vfprintf_internal_r+0x1f5c>
   1418c:	d9003817 	ldw	r4,224(sp)
   14190:	90c04014 	ori	r3,r18,256
   14194:	d8c02c15 	stw	r3,176(sp)
   14198:	20021516 	blt	r4,zero,149f0 <___vfprintf_internal_r+0x1fe4>
   1419c:	dcc03817 	ldw	r19,224(sp)
   141a0:	d8002905 	stb	zero,164(sp)
   141a4:	00801984 	movi	r2,102
   141a8:	8881f926 	beq	r17,r2,14990 <___vfprintf_internal_r+0x1f84>
   141ac:	00801184 	movi	r2,70
   141b0:	88821c26 	beq	r17,r2,14a24 <___vfprintf_internal_r+0x2018>
   141b4:	00801144 	movi	r2,69
   141b8:	b081ef26 	beq	r22,r2,14978 <___vfprintf_internal_r+0x1f6c>
   141bc:	d8c02a17 	ldw	r3,168(sp)
   141c0:	d8802104 	addi	r2,sp,132
   141c4:	d8800315 	stw	r2,12(sp)
   141c8:	d9403617 	ldw	r5,216(sp)
   141cc:	d8802504 	addi	r2,sp,148
   141d0:	d9002d17 	ldw	r4,180(sp)
   141d4:	d8800215 	stw	r2,8(sp)
   141d8:	d8802604 	addi	r2,sp,152
   141dc:	d8c00015 	stw	r3,0(sp)
   141e0:	d8800115 	stw	r2,4(sp)
   141e4:	01c00084 	movi	r7,2
   141e8:	980d883a 	mov	r6,r19
   141ec:	d8c03c15 	stw	r3,240(sp)
   141f0:	da003d15 	stw	r8,244(sp)
   141f4:	001513c0 	call	1513c <_dtoa_r>
   141f8:	1021883a 	mov	r16,r2
   141fc:	008019c4 	movi	r2,103
   14200:	d8c03c17 	ldw	r3,240(sp)
   14204:	da003d17 	ldw	r8,244(sp)
   14208:	88817126 	beq	r17,r2,147d0 <___vfprintf_internal_r+0x1dc4>
   1420c:	008011c4 	movi	r2,71
   14210:	88829126 	beq	r17,r2,14c58 <___vfprintf_internal_r+0x224c>
   14214:	80f9883a 	add	fp,r16,r3
   14218:	d9003617 	ldw	r4,216(sp)
   1421c:	000d883a 	mov	r6,zero
   14220:	000f883a 	mov	r7,zero
   14224:	980b883a 	mov	r5,r19
   14228:	da003d15 	stw	r8,244(sp)
   1422c:	001ea9c0 	call	1ea9c <__eqdf2>
   14230:	da003d17 	ldw	r8,244(sp)
   14234:	10018d26 	beq	r2,zero,1486c <___vfprintf_internal_r+0x1e60>
   14238:	d8802117 	ldw	r2,132(sp)
   1423c:	1700062e 	bgeu	r2,fp,14258 <___vfprintf_internal_r+0x184c>
   14240:	01000c04 	movi	r4,48
   14244:	10c00044 	addi	r3,r2,1
   14248:	d8c02115 	stw	r3,132(sp)
   1424c:	11000005 	stb	r4,0(r2)
   14250:	d8802117 	ldw	r2,132(sp)
   14254:	173ffb36 	bltu	r2,fp,14244 <__alt_data_end+0xfc014244>
   14258:	1405c83a 	sub	r2,r2,r16
   1425c:	d8803315 	stw	r2,204(sp)
   14260:	008011c4 	movi	r2,71
   14264:	b0817626 	beq	r22,r2,14840 <___vfprintf_internal_r+0x1e34>
   14268:	00801944 	movi	r2,101
   1426c:	1442800e 	bge	r2,r17,14c70 <___vfprintf_internal_r+0x2264>
   14270:	d8c02617 	ldw	r3,152(sp)
   14274:	00801984 	movi	r2,102
   14278:	d8c03215 	stw	r3,200(sp)
   1427c:	8881fe26 	beq	r17,r2,14a78 <___vfprintf_internal_r+0x206c>
   14280:	d8c03217 	ldw	r3,200(sp)
   14284:	d9003317 	ldw	r4,204(sp)
   14288:	1901dd16 	blt	r3,r4,14a00 <___vfprintf_internal_r+0x1ff4>
   1428c:	9480004c 	andi	r18,r18,1
   14290:	90022b1e 	bne	r18,zero,14b40 <___vfprintf_internal_r+0x2134>
   14294:	1805883a 	mov	r2,r3
   14298:	18028316 	blt	r3,zero,14ca8 <___vfprintf_internal_r+0x229c>
   1429c:	d8c03217 	ldw	r3,200(sp)
   142a0:	044019c4 	movi	r17,103
   142a4:	d8c02b15 	stw	r3,172(sp)
   142a8:	df002907 	ldb	fp,164(sp)
   142ac:	e001531e 	bne	fp,zero,147fc <___vfprintf_internal_r+0x1df0>
   142b0:	df002783 	ldbu	fp,158(sp)
   142b4:	d8802915 	stw	r2,164(sp)
   142b8:	dc802c17 	ldw	r18,176(sp)
   142bc:	d8002a15 	stw	zero,168(sp)
   142c0:	003baf06 	br	13180 <__alt_data_end+0xfc013180>
   142c4:	d8c02e17 	ldw	r3,184(sp)
   142c8:	d9002e17 	ldw	r4,184(sp)
   142cc:	d9402e17 	ldw	r5,184(sp)
   142d0:	18c00017 	ldw	r3,0(r3)
   142d4:	21000117 	ldw	r4,4(r4)
   142d8:	29400204 	addi	r5,r5,8
   142dc:	d8c03615 	stw	r3,216(sp)
   142e0:	d9003815 	stw	r4,224(sp)
   142e4:	d9402e15 	stw	r5,184(sp)
   142e8:	003b5006 	br	1302c <__alt_data_end+0xfc01302c>
   142ec:	ac400007 	ldb	r17,0(r21)
   142f0:	003a2806 	br	12b94 <__alt_data_end+0xfc012b94>
   142f4:	9080100c 	andi	r2,r18,64
   142f8:	1000a826 	beq	r2,zero,1459c <___vfprintf_internal_r+0x1b90>
   142fc:	d8c02e17 	ldw	r3,184(sp)
   14300:	002d883a 	mov	r22,zero
   14304:	1cc0000b 	ldhu	r19,0(r3)
   14308:	18c00104 	addi	r3,r3,4
   1430c:	d8c02e15 	stw	r3,184(sp)
   14310:	003caf06 	br	135d0 <__alt_data_end+0xfc0135d0>
   14314:	d9002e17 	ldw	r4,184(sp)
   14318:	d9402a17 	ldw	r5,168(sp)
   1431c:	002d883a 	mov	r22,zero
   14320:	20800104 	addi	r2,r4,4
   14324:	24c00017 	ldw	r19,0(r4)
   14328:	283ebb0e 	bge	r5,zero,13e18 <__alt_data_end+0xfc013e18>
   1432c:	003ef106 	br	13ef4 <__alt_data_end+0xfc013ef4>
   14330:	9080040c 	andi	r2,r18,16
   14334:	1000921e 	bne	r2,zero,14580 <___vfprintf_internal_r+0x1b74>
   14338:	9480100c 	andi	r18,r18,64
   1433c:	90013926 	beq	r18,zero,14824 <___vfprintf_internal_r+0x1e18>
   14340:	d9402e17 	ldw	r5,184(sp)
   14344:	d8c02f17 	ldw	r3,188(sp)
   14348:	28800017 	ldw	r2,0(r5)
   1434c:	29400104 	addi	r5,r5,4
   14350:	d9402e15 	stw	r5,184(sp)
   14354:	10c0000d 	sth	r3,0(r2)
   14358:	0039e406 	br	12aec <__alt_data_end+0xfc012aec>
   1435c:	9080100c 	andi	r2,r18,64
   14360:	10008026 	beq	r2,zero,14564 <___vfprintf_internal_r+0x1b58>
   14364:	d8802e17 	ldw	r2,184(sp)
   14368:	14c0000f 	ldh	r19,0(r2)
   1436c:	10800104 	addi	r2,r2,4
   14370:	d8802e15 	stw	r2,184(sp)
   14374:	982dd7fa 	srai	r22,r19,31
   14378:	b005883a 	mov	r2,r22
   1437c:	003af706 	br	12f5c <__alt_data_end+0xfc012f5c>
   14380:	9080100c 	andi	r2,r18,64
   14384:	d8002785 	stb	zero,158(sp)
   14388:	10008a1e 	bne	r2,zero,145b4 <___vfprintf_internal_r+0x1ba8>
   1438c:	d9002e17 	ldw	r4,184(sp)
   14390:	d9402a17 	ldw	r5,168(sp)
   14394:	002d883a 	mov	r22,zero
   14398:	20800104 	addi	r2,r4,4
   1439c:	24c00017 	ldw	r19,0(r4)
   143a0:	283e4b0e 	bge	r5,zero,13cd0 <__alt_data_end+0xfc013cd0>
   143a4:	9d86b03a 	or	r3,r19,r22
   143a8:	d8802e15 	stw	r2,184(sp)
   143ac:	183e4c1e 	bne	r3,zero,13ce0 <__alt_data_end+0xfc013ce0>
   143b0:	0039883a 	mov	fp,zero
   143b4:	0005883a 	mov	r2,zero
   143b8:	003d4006 	br	138bc <__alt_data_end+0xfc0138bc>
   143bc:	014000f4 	movhi	r5,3
   143c0:	296ece84 	addi	r5,r5,-17606
   143c4:	d9402c15 	stw	r5,176(sp)
   143c8:	d9402c17 	ldw	r5,176(sp)
   143cc:	1c47883a 	add	r3,r3,r17
   143d0:	10800044 	addi	r2,r2,1
   143d4:	41400015 	stw	r5,0(r8)
   143d8:	44400115 	stw	r17,4(r8)
   143dc:	d8c02015 	stw	r3,128(sp)
   143e0:	d8801f15 	stw	r2,124(sp)
   143e4:	010001c4 	movi	r4,7
   143e8:	20bec816 	blt	r4,r2,13f0c <__alt_data_end+0xfc013f0c>
   143ec:	42000204 	addi	r8,r8,8
   143f0:	003ecd06 	br	13f28 <__alt_data_end+0xfc013f28>
   143f4:	d9002a17 	ldw	r4,168(sp)
   143f8:	d8002785 	stb	zero,158(sp)
   143fc:	203d2d16 	blt	r4,zero,138b4 <__alt_data_end+0xfc0138b4>
   14400:	00bfdfc4 	movi	r2,-129
   14404:	90a4703a 	and	r18,r18,r2
   14408:	003a6106 	br	12d90 <__alt_data_end+0xfc012d90>
   1440c:	010000f4 	movhi	r4,3
   14410:	212ece84 	addi	r4,r4,-17606
   14414:	d9002c15 	stw	r4,176(sp)
   14418:	003bea06 	br	133c4 <__alt_data_end+0xfc0133c4>
   1441c:	d9002d17 	ldw	r4,180(sp)
   14420:	d9801e04 	addi	r6,sp,120
   14424:	b80b883a 	mov	r5,r23
   14428:	001ad180 	call	1ad18 <__sprint_r>
   1442c:	103a7b1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   14430:	d8c02017 	ldw	r3,128(sp)
   14434:	da000404 	addi	r8,sp,16
   14438:	003d4106 	br	13940 <__alt_data_end+0xfc013940>
   1443c:	d8801f17 	ldw	r2,124(sp)
   14440:	014000f4 	movhi	r5,3
   14444:	01000044 	movi	r4,1
   14448:	18c00044 	addi	r3,r3,1
   1444c:	10800044 	addi	r2,r2,1
   14450:	296ec604 	addi	r5,r5,-17640
   14454:	41000115 	stw	r4,4(r8)
   14458:	41400015 	stw	r5,0(r8)
   1445c:	d8c02015 	stw	r3,128(sp)
   14460:	d8801f15 	stw	r2,124(sp)
   14464:	010001c4 	movi	r4,7
   14468:	20805c16 	blt	r4,r2,145dc <___vfprintf_internal_r+0x1bd0>
   1446c:	42000204 	addi	r8,r8,8
   14470:	8800041e 	bne	r17,zero,14484 <___vfprintf_internal_r+0x1a78>
   14474:	d8803317 	ldw	r2,204(sp)
   14478:	1000021e 	bne	r2,zero,14484 <___vfprintf_internal_r+0x1a78>
   1447c:	9080004c 	andi	r2,r18,1
   14480:	103be726 	beq	r2,zero,13420 <__alt_data_end+0xfc013420>
   14484:	d9003717 	ldw	r4,220(sp)
   14488:	d8801f17 	ldw	r2,124(sp)
   1448c:	d9403417 	ldw	r5,208(sp)
   14490:	20c7883a 	add	r3,r4,r3
   14494:	10800044 	addi	r2,r2,1
   14498:	41000115 	stw	r4,4(r8)
   1449c:	41400015 	stw	r5,0(r8)
   144a0:	d8c02015 	stw	r3,128(sp)
   144a4:	d8801f15 	stw	r2,124(sp)
   144a8:	010001c4 	movi	r4,7
   144ac:	20812116 	blt	r4,r2,14934 <___vfprintf_internal_r+0x1f28>
   144b0:	42000204 	addi	r8,r8,8
   144b4:	0463c83a 	sub	r17,zero,r17
   144b8:	0440730e 	bge	zero,r17,14688 <___vfprintf_internal_r+0x1c7c>
   144bc:	05800404 	movi	r22,16
   144c0:	b440860e 	bge	r22,r17,146dc <___vfprintf_internal_r+0x1cd0>
   144c4:	014000f4 	movhi	r5,3
   144c8:	296ece84 	addi	r5,r5,-17606
   144cc:	d9402c15 	stw	r5,176(sp)
   144d0:	070001c4 	movi	fp,7
   144d4:	dcc02d17 	ldw	r19,180(sp)
   144d8:	00000306 	br	144e8 <___vfprintf_internal_r+0x1adc>
   144dc:	42000204 	addi	r8,r8,8
   144e0:	8c7ffc04 	addi	r17,r17,-16
   144e4:	b440800e 	bge	r22,r17,146e8 <___vfprintf_internal_r+0x1cdc>
   144e8:	18c00404 	addi	r3,r3,16
   144ec:	10800044 	addi	r2,r2,1
   144f0:	45000015 	stw	r20,0(r8)
   144f4:	45800115 	stw	r22,4(r8)
   144f8:	d8c02015 	stw	r3,128(sp)
   144fc:	d8801f15 	stw	r2,124(sp)
   14500:	e0bff60e 	bge	fp,r2,144dc <__alt_data_end+0xfc0144dc>
   14504:	d9801e04 	addi	r6,sp,120
   14508:	b80b883a 	mov	r5,r23
   1450c:	9809883a 	mov	r4,r19
   14510:	001ad180 	call	1ad18 <__sprint_r>
   14514:	103a411e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   14518:	d8c02017 	ldw	r3,128(sp)
   1451c:	d8801f17 	ldw	r2,124(sp)
   14520:	da000404 	addi	r8,sp,16
   14524:	003fee06 	br	144e0 <__alt_data_end+0xfc0144e0>
   14528:	00bfffc4 	movi	r2,-1
   1452c:	003a3f06 	br	12e2c <__alt_data_end+0xfc012e2c>
   14530:	008011c4 	movi	r2,71
   14534:	1440b816 	blt	r2,r17,14818 <___vfprintf_internal_r+0x1e0c>
   14538:	040000f4 	movhi	r16,3
   1453c:	842eb804 	addi	r16,r16,-17696
   14540:	00c000c4 	movi	r3,3
   14544:	00bfdfc4 	movi	r2,-129
   14548:	d8c02915 	stw	r3,164(sp)
   1454c:	90a4703a 	and	r18,r18,r2
   14550:	df002783 	ldbu	fp,158(sp)
   14554:	d8c02b15 	stw	r3,172(sp)
   14558:	d8002a15 	stw	zero,168(sp)
   1455c:	d8003215 	stw	zero,200(sp)
   14560:	003b0706 	br	13180 <__alt_data_end+0xfc013180>
   14564:	d8c02e17 	ldw	r3,184(sp)
   14568:	1cc00017 	ldw	r19,0(r3)
   1456c:	18c00104 	addi	r3,r3,4
   14570:	d8c02e15 	stw	r3,184(sp)
   14574:	982dd7fa 	srai	r22,r19,31
   14578:	b005883a 	mov	r2,r22
   1457c:	003a7706 	br	12f5c <__alt_data_end+0xfc012f5c>
   14580:	d8c02e17 	ldw	r3,184(sp)
   14584:	d9002f17 	ldw	r4,188(sp)
   14588:	18800017 	ldw	r2,0(r3)
   1458c:	18c00104 	addi	r3,r3,4
   14590:	d8c02e15 	stw	r3,184(sp)
   14594:	11000015 	stw	r4,0(r2)
   14598:	00395406 	br	12aec <__alt_data_end+0xfc012aec>
   1459c:	d9002e17 	ldw	r4,184(sp)
   145a0:	002d883a 	mov	r22,zero
   145a4:	24c00017 	ldw	r19,0(r4)
   145a8:	21000104 	addi	r4,r4,4
   145ac:	d9002e15 	stw	r4,184(sp)
   145b0:	003c0706 	br	135d0 <__alt_data_end+0xfc0135d0>
   145b4:	d9402e17 	ldw	r5,184(sp)
   145b8:	d8c02a17 	ldw	r3,168(sp)
   145bc:	002d883a 	mov	r22,zero
   145c0:	28800104 	addi	r2,r5,4
   145c4:	2cc0000b 	ldhu	r19,0(r5)
   145c8:	183dc10e 	bge	r3,zero,13cd0 <__alt_data_end+0xfc013cd0>
   145cc:	003f7506 	br	143a4 <__alt_data_end+0xfc0143a4>
   145d0:	040000f4 	movhi	r16,3
   145d4:	842eb604 	addi	r16,r16,-17704
   145d8:	003aa706 	br	13078 <__alt_data_end+0xfc013078>
   145dc:	d9002d17 	ldw	r4,180(sp)
   145e0:	d9801e04 	addi	r6,sp,120
   145e4:	b80b883a 	mov	r5,r23
   145e8:	001ad180 	call	1ad18 <__sprint_r>
   145ec:	103a0b1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   145f0:	dc402617 	ldw	r17,152(sp)
   145f4:	d8c02017 	ldw	r3,128(sp)
   145f8:	da000404 	addi	r8,sp,16
   145fc:	003f9c06 	br	14470 <__alt_data_end+0xfc014470>
   14600:	ac400043 	ldbu	r17,1(r21)
   14604:	84000814 	ori	r16,r16,32
   14608:	ad400044 	addi	r21,r21,1
   1460c:	8c403fcc 	andi	r17,r17,255
   14610:	8c40201c 	xori	r17,r17,128
   14614:	8c7fe004 	addi	r17,r17,-128
   14618:	00395e06 	br	12b94 <__alt_data_end+0xfc012b94>
   1461c:	d8c02e15 	stw	r3,184(sp)
   14620:	0039883a 	mov	fp,zero
   14624:	003e3506 	br	13efc <__alt_data_end+0xfc013efc>
   14628:	d9002d17 	ldw	r4,180(sp)
   1462c:	d9801e04 	addi	r6,sp,120
   14630:	b80b883a 	mov	r5,r23
   14634:	001ad180 	call	1ad18 <__sprint_r>
   14638:	1039f81e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   1463c:	d8c02017 	ldw	r3,128(sp)
   14640:	da000404 	addi	r8,sp,16
   14644:	003cd006 	br	13988 <__alt_data_end+0xfc013988>
   14648:	8009883a 	mov	r4,r16
   1464c:	df003d15 	stw	fp,244(sp)
   14650:	00106b00 	call	106b0 <strlen>
   14654:	d8802b15 	stw	r2,172(sp)
   14658:	da003d17 	ldw	r8,244(sp)
   1465c:	103c200e 	bge	r2,zero,136e0 <__alt_data_end+0xfc0136e0>
   14660:	0005883a 	mov	r2,zero
   14664:	003c1e06 	br	136e0 <__alt_data_end+0xfc0136e0>
   14668:	d9002d17 	ldw	r4,180(sp)
   1466c:	d9801e04 	addi	r6,sp,120
   14670:	b80b883a 	mov	r5,r23
   14674:	001ad180 	call	1ad18 <__sprint_r>
   14678:	1039e81e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   1467c:	d8c02017 	ldw	r3,128(sp)
   14680:	d8801f17 	ldw	r2,124(sp)
   14684:	da000404 	addi	r8,sp,16
   14688:	d9403317 	ldw	r5,204(sp)
   1468c:	10800044 	addi	r2,r2,1
   14690:	44000015 	stw	r16,0(r8)
   14694:	28c7883a 	add	r3,r5,r3
   14698:	003b5b06 	br	13408 <__alt_data_end+0xfc013408>
   1469c:	010000f4 	movhi	r4,3
   146a0:	212ed284 	addi	r4,r4,-17590
   146a4:	d9003515 	stw	r4,212(sp)
   146a8:	003af206 	br	13274 <__alt_data_end+0xfc013274>
   146ac:	013fffc4 	movi	r4,-1
   146b0:	003a0806 	br	12ed4 <__alt_data_end+0xfc012ed4>
   146b4:	0023883a 	mov	r17,zero
   146b8:	003d9d06 	br	13d30 <__alt_data_end+0xfc013d30>
   146bc:	d9002d17 	ldw	r4,180(sp)
   146c0:	d9801e04 	addi	r6,sp,120
   146c4:	b80b883a 	mov	r5,r23
   146c8:	001ad180 	call	1ad18 <__sprint_r>
   146cc:	1039d31e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   146d0:	d8c02017 	ldw	r3,128(sp)
   146d4:	da000404 	addi	r8,sp,16
   146d8:	003d9406 	br	13d2c <__alt_data_end+0xfc013d2c>
   146dc:	010000f4 	movhi	r4,3
   146e0:	212ece84 	addi	r4,r4,-17606
   146e4:	d9002c15 	stw	r4,176(sp)
   146e8:	d9002c17 	ldw	r4,176(sp)
   146ec:	1c47883a 	add	r3,r3,r17
   146f0:	10800044 	addi	r2,r2,1
   146f4:	41000015 	stw	r4,0(r8)
   146f8:	44400115 	stw	r17,4(r8)
   146fc:	d8c02015 	stw	r3,128(sp)
   14700:	d8801f15 	stw	r2,124(sp)
   14704:	010001c4 	movi	r4,7
   14708:	20bfd716 	blt	r4,r2,14668 <__alt_data_end+0xfc014668>
   1470c:	42000204 	addi	r8,r8,8
   14710:	003fdd06 	br	14688 <__alt_data_end+0xfc014688>
   14714:	d9002d17 	ldw	r4,180(sp)
   14718:	d9801e04 	addi	r6,sp,120
   1471c:	b80b883a 	mov	r5,r23
   14720:	001ad180 	call	1ad18 <__sprint_r>
   14724:	1039bd1e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   14728:	d8802617 	ldw	r2,152(sp)
   1472c:	d8c02017 	ldw	r3,128(sp)
   14730:	da000404 	addi	r8,sp,16
   14734:	003e1006 	br	13f78 <__alt_data_end+0xfc013f78>
   14738:	00800044 	movi	r2,1
   1473c:	10803fcc 	andi	r2,r2,255
   14740:	00c00044 	movi	r3,1
   14744:	10fa0d26 	beq	r2,r3,12f7c <__alt_data_end+0xfc012f7c>
   14748:	00c00084 	movi	r3,2
   1474c:	10fbaf26 	beq	r2,r3,1360c <__alt_data_end+0xfc01360c>
   14750:	003a6d06 	br	13108 <__alt_data_end+0xfc013108>
   14754:	010000f4 	movhi	r4,3
   14758:	212ed284 	addi	r4,r4,-17590
   1475c:	d9003515 	stw	r4,212(sp)
   14760:	003b5406 	br	134b4 <__alt_data_end+0xfc0134b4>
   14764:	d8802a17 	ldw	r2,168(sp)
   14768:	00c00184 	movi	r3,6
   1476c:	1880012e 	bgeu	r3,r2,14774 <___vfprintf_internal_r+0x1d68>
   14770:	1805883a 	mov	r2,r3
   14774:	d8802b15 	stw	r2,172(sp)
   14778:	1000ef16 	blt	r2,zero,14b38 <___vfprintf_internal_r+0x212c>
   1477c:	040000f4 	movhi	r16,3
   14780:	d8802915 	stw	r2,164(sp)
   14784:	dcc02e15 	stw	r19,184(sp)
   14788:	d8002a15 	stw	zero,168(sp)
   1478c:	d8003215 	stw	zero,200(sp)
   14790:	842ec404 	addi	r16,r16,-17648
   14794:	0039883a 	mov	fp,zero
   14798:	003a8006 	br	1319c <__alt_data_end+0xfc01319c>
   1479c:	0021883a 	mov	r16,zero
   147a0:	003e0706 	br	13fc0 <__alt_data_end+0xfc013fc0>
   147a4:	d9002d17 	ldw	r4,180(sp)
   147a8:	d9801e04 	addi	r6,sp,120
   147ac:	b80b883a 	mov	r5,r23
   147b0:	001ad180 	call	1ad18 <__sprint_r>
   147b4:	1039991e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   147b8:	d8802617 	ldw	r2,152(sp)
   147bc:	d9403317 	ldw	r5,204(sp)
   147c0:	d8c02017 	ldw	r3,128(sp)
   147c4:	da000404 	addi	r8,sp,16
   147c8:	2885c83a 	sub	r2,r5,r2
   147cc:	003dfb06 	br	13fbc <__alt_data_end+0xfc013fbc>
   147d0:	9080004c 	andi	r2,r18,1
   147d4:	103e8f1e 	bne	r2,zero,14214 <__alt_data_end+0xfc014214>
   147d8:	d8802117 	ldw	r2,132(sp)
   147dc:	003e9e06 	br	14258 <__alt_data_end+0xfc014258>
   147e0:	1025883a 	mov	r18,r2
   147e4:	0039883a 	mov	fp,zero
   147e8:	00800084 	movi	r2,2
   147ec:	003fd306 	br	1473c <__alt_data_end+0xfc01473c>
   147f0:	07000b44 	movi	fp,45
   147f4:	df002785 	stb	fp,158(sp)
   147f8:	003a1b06 	br	13068 <__alt_data_end+0xfc013068>
   147fc:	00c00b44 	movi	r3,45
   14800:	d8c02785 	stb	r3,158(sp)
   14804:	d8802915 	stw	r2,164(sp)
   14808:	dc802c17 	ldw	r18,176(sp)
   1480c:	d8002a15 	stw	zero,168(sp)
   14810:	07000b44 	movi	fp,45
   14814:	003a5e06 	br	13190 <__alt_data_end+0xfc013190>
   14818:	040000f4 	movhi	r16,3
   1481c:	842eb904 	addi	r16,r16,-17692
   14820:	003f4706 	br	14540 <__alt_data_end+0xfc014540>
   14824:	d9002e17 	ldw	r4,184(sp)
   14828:	d9402f17 	ldw	r5,188(sp)
   1482c:	20800017 	ldw	r2,0(r4)
   14830:	21000104 	addi	r4,r4,4
   14834:	d9002e15 	stw	r4,184(sp)
   14838:	11400015 	stw	r5,0(r2)
   1483c:	0038ab06 	br	12aec <__alt_data_end+0xfc012aec>
   14840:	dd802617 	ldw	r22,152(sp)
   14844:	00bfff44 	movi	r2,-3
   14848:	b0801c16 	blt	r22,r2,148bc <___vfprintf_internal_r+0x1eb0>
   1484c:	d9402a17 	ldw	r5,168(sp)
   14850:	2d801a16 	blt	r5,r22,148bc <___vfprintf_internal_r+0x1eb0>
   14854:	dd803215 	stw	r22,200(sp)
   14858:	003e8906 	br	14280 <__alt_data_end+0xfc014280>
   1485c:	010000f4 	movhi	r4,3
   14860:	212ece84 	addi	r4,r4,-17606
   14864:	d9002c15 	stw	r4,176(sp)
   14868:	003c9106 	br	13ab0 <__alt_data_end+0xfc013ab0>
   1486c:	e005883a 	mov	r2,fp
   14870:	003e7906 	br	14258 <__alt_data_end+0xfc014258>
   14874:	d9002a17 	ldw	r4,168(sp)
   14878:	df002783 	ldbu	fp,158(sp)
   1487c:	dcc02e15 	stw	r19,184(sp)
   14880:	d9002915 	stw	r4,164(sp)
   14884:	d9002b15 	stw	r4,172(sp)
   14888:	d8002a15 	stw	zero,168(sp)
   1488c:	d8003215 	stw	zero,200(sp)
   14890:	003a3b06 	br	13180 <__alt_data_end+0xfc013180>
   14894:	9080004c 	andi	r2,r18,1
   14898:	0039883a 	mov	fp,zero
   1489c:	10000426 	beq	r2,zero,148b0 <___vfprintf_internal_r+0x1ea4>
   148a0:	00800c04 	movi	r2,48
   148a4:	dc001dc4 	addi	r16,sp,119
   148a8:	d8801dc5 	stb	r2,119(sp)
   148ac:	003b6406 	br	13640 <__alt_data_end+0xfc013640>
   148b0:	d8002b15 	stw	zero,172(sp)
   148b4:	dc001e04 	addi	r16,sp,120
   148b8:	003a2b06 	br	13168 <__alt_data_end+0xfc013168>
   148bc:	8c7fff84 	addi	r17,r17,-2
   148c0:	b5bfffc4 	addi	r22,r22,-1
   148c4:	dd802615 	stw	r22,152(sp)
   148c8:	dc4022c5 	stb	r17,139(sp)
   148cc:	b000bf16 	blt	r22,zero,14bcc <___vfprintf_internal_r+0x21c0>
   148d0:	00800ac4 	movi	r2,43
   148d4:	d8802305 	stb	r2,140(sp)
   148d8:	00800244 	movi	r2,9
   148dc:	15807016 	blt	r2,r22,14aa0 <___vfprintf_internal_r+0x2094>
   148e0:	00800c04 	movi	r2,48
   148e4:	b5800c04 	addi	r22,r22,48
   148e8:	d8802345 	stb	r2,141(sp)
   148ec:	dd802385 	stb	r22,142(sp)
   148f0:	d88023c4 	addi	r2,sp,143
   148f4:	df0022c4 	addi	fp,sp,139
   148f8:	d8c03317 	ldw	r3,204(sp)
   148fc:	1739c83a 	sub	fp,r2,fp
   14900:	d9003317 	ldw	r4,204(sp)
   14904:	e0c7883a 	add	r3,fp,r3
   14908:	df003a15 	stw	fp,232(sp)
   1490c:	d8c02b15 	stw	r3,172(sp)
   14910:	00800044 	movi	r2,1
   14914:	1100b30e 	bge	r2,r4,14be4 <___vfprintf_internal_r+0x21d8>
   14918:	d8c02b17 	ldw	r3,172(sp)
   1491c:	18c00044 	addi	r3,r3,1
   14920:	d8c02b15 	stw	r3,172(sp)
   14924:	1805883a 	mov	r2,r3
   14928:	1800ac16 	blt	r3,zero,14bdc <___vfprintf_internal_r+0x21d0>
   1492c:	d8003215 	stw	zero,200(sp)
   14930:	003e5d06 	br	142a8 <__alt_data_end+0xfc0142a8>
   14934:	d9002d17 	ldw	r4,180(sp)
   14938:	d9801e04 	addi	r6,sp,120
   1493c:	b80b883a 	mov	r5,r23
   14940:	001ad180 	call	1ad18 <__sprint_r>
   14944:	1039351e 	bne	r2,zero,12e1c <__alt_data_end+0xfc012e1c>
   14948:	dc402617 	ldw	r17,152(sp)
   1494c:	d8c02017 	ldw	r3,128(sp)
   14950:	d8801f17 	ldw	r2,124(sp)
   14954:	da000404 	addi	r8,sp,16
   14958:	003ed606 	br	144b4 <__alt_data_end+0xfc0144b4>
   1495c:	182b883a 	mov	r21,r3
   14960:	d8002a15 	stw	zero,168(sp)
   14964:	00388c06 	br	12b98 <__alt_data_end+0xfc012b98>
   14968:	d8802a17 	ldw	r2,168(sp)
   1496c:	103e071e 	bne	r2,zero,1418c <__alt_data_end+0xfc01418c>
   14970:	dc002a15 	stw	r16,168(sp)
   14974:	003e0506 	br	1418c <__alt_data_end+0xfc01418c>
   14978:	d9002a17 	ldw	r4,168(sp)
   1497c:	20c00044 	addi	r3,r4,1
   14980:	003e0f06 	br	141c0 <__alt_data_end+0xfc0141c0>
   14984:	01400184 	movi	r5,6
   14988:	d9402a15 	stw	r5,168(sp)
   1498c:	003dff06 	br	1418c <__alt_data_end+0xfc01418c>
   14990:	d8802104 	addi	r2,sp,132
   14994:	d8800315 	stw	r2,12(sp)
   14998:	d8802504 	addi	r2,sp,148
   1499c:	d8800215 	stw	r2,8(sp)
   149a0:	d8802604 	addi	r2,sp,152
   149a4:	d8800115 	stw	r2,4(sp)
   149a8:	d8802a17 	ldw	r2,168(sp)
   149ac:	d9403617 	ldw	r5,216(sp)
   149b0:	d9002d17 	ldw	r4,180(sp)
   149b4:	d8800015 	stw	r2,0(sp)
   149b8:	01c000c4 	movi	r7,3
   149bc:	980d883a 	mov	r6,r19
   149c0:	da003d15 	stw	r8,244(sp)
   149c4:	001513c0 	call	1513c <_dtoa_r>
   149c8:	d8c02a17 	ldw	r3,168(sp)
   149cc:	da003d17 	ldw	r8,244(sp)
   149d0:	1021883a 	mov	r16,r2
   149d4:	10f9883a 	add	fp,r2,r3
   149d8:	81000007 	ldb	r4,0(r16)
   149dc:	00800c04 	movi	r2,48
   149e0:	20805e26 	beq	r4,r2,14b5c <___vfprintf_internal_r+0x2150>
   149e4:	d8c02617 	ldw	r3,152(sp)
   149e8:	e0f9883a 	add	fp,fp,r3
   149ec:	003e0a06 	br	14218 <__alt_data_end+0xfc014218>
   149f0:	00c00b44 	movi	r3,45
   149f4:	24e0003c 	xorhi	r19,r4,32768
   149f8:	d8c02905 	stb	r3,164(sp)
   149fc:	003de906 	br	141a4 <__alt_data_end+0xfc0141a4>
   14a00:	d8c03217 	ldw	r3,200(sp)
   14a04:	00c07a0e 	bge	zero,r3,14bf0 <___vfprintf_internal_r+0x21e4>
   14a08:	00800044 	movi	r2,1
   14a0c:	d9003317 	ldw	r4,204(sp)
   14a10:	1105883a 	add	r2,r2,r4
   14a14:	d8802b15 	stw	r2,172(sp)
   14a18:	10004e16 	blt	r2,zero,14b54 <___vfprintf_internal_r+0x2148>
   14a1c:	044019c4 	movi	r17,103
   14a20:	003e2106 	br	142a8 <__alt_data_end+0xfc0142a8>
   14a24:	d9002a17 	ldw	r4,168(sp)
   14a28:	d8802104 	addi	r2,sp,132
   14a2c:	d8800315 	stw	r2,12(sp)
   14a30:	d9000015 	stw	r4,0(sp)
   14a34:	d8802504 	addi	r2,sp,148
   14a38:	d9403617 	ldw	r5,216(sp)
   14a3c:	d9002d17 	ldw	r4,180(sp)
   14a40:	d8800215 	stw	r2,8(sp)
   14a44:	d8802604 	addi	r2,sp,152
   14a48:	d8800115 	stw	r2,4(sp)
   14a4c:	01c000c4 	movi	r7,3
   14a50:	980d883a 	mov	r6,r19
   14a54:	da003d15 	stw	r8,244(sp)
   14a58:	001513c0 	call	1513c <_dtoa_r>
   14a5c:	d8c02a17 	ldw	r3,168(sp)
   14a60:	da003d17 	ldw	r8,244(sp)
   14a64:	1021883a 	mov	r16,r2
   14a68:	00801184 	movi	r2,70
   14a6c:	80f9883a 	add	fp,r16,r3
   14a70:	88bfd926 	beq	r17,r2,149d8 <__alt_data_end+0xfc0149d8>
   14a74:	003de806 	br	14218 <__alt_data_end+0xfc014218>
   14a78:	d9002a17 	ldw	r4,168(sp)
   14a7c:	00c04d0e 	bge	zero,r3,14bb4 <___vfprintf_internal_r+0x21a8>
   14a80:	2000441e 	bne	r4,zero,14b94 <___vfprintf_internal_r+0x2188>
   14a84:	9480004c 	andi	r18,r18,1
   14a88:	9000421e 	bne	r18,zero,14b94 <___vfprintf_internal_r+0x2188>
   14a8c:	1805883a 	mov	r2,r3
   14a90:	18006f16 	blt	r3,zero,14c50 <___vfprintf_internal_r+0x2244>
   14a94:	d8c03217 	ldw	r3,200(sp)
   14a98:	d8c02b15 	stw	r3,172(sp)
   14a9c:	003e0206 	br	142a8 <__alt_data_end+0xfc0142a8>
   14aa0:	df0022c4 	addi	fp,sp,139
   14aa4:	dc002a15 	stw	r16,168(sp)
   14aa8:	4027883a 	mov	r19,r8
   14aac:	e021883a 	mov	r16,fp
   14ab0:	b009883a 	mov	r4,r22
   14ab4:	01400284 	movi	r5,10
   14ab8:	000d8080 	call	d808 <__modsi3>
   14abc:	10800c04 	addi	r2,r2,48
   14ac0:	843fffc4 	addi	r16,r16,-1
   14ac4:	b009883a 	mov	r4,r22
   14ac8:	01400284 	movi	r5,10
   14acc:	80800005 	stb	r2,0(r16)
   14ad0:	000d7840 	call	d784 <__divsi3>
   14ad4:	102d883a 	mov	r22,r2
   14ad8:	00800244 	movi	r2,9
   14adc:	15bff416 	blt	r2,r22,14ab0 <__alt_data_end+0xfc014ab0>
   14ae0:	9811883a 	mov	r8,r19
   14ae4:	b0800c04 	addi	r2,r22,48
   14ae8:	8027883a 	mov	r19,r16
   14aec:	997fffc4 	addi	r5,r19,-1
   14af0:	98bfffc5 	stb	r2,-1(r19)
   14af4:	dc002a17 	ldw	r16,168(sp)
   14af8:	2f006d2e 	bgeu	r5,fp,14cb0 <___vfprintf_internal_r+0x22a4>
   14afc:	d9c02384 	addi	r7,sp,142
   14b00:	3ccfc83a 	sub	r7,r7,r19
   14b04:	d9002344 	addi	r4,sp,141
   14b08:	e1cf883a 	add	r7,fp,r7
   14b0c:	00000106 	br	14b14 <___vfprintf_internal_r+0x2108>
   14b10:	28800003 	ldbu	r2,0(r5)
   14b14:	20800005 	stb	r2,0(r4)
   14b18:	21000044 	addi	r4,r4,1
   14b1c:	29400044 	addi	r5,r5,1
   14b20:	393ffb1e 	bne	r7,r4,14b10 <__alt_data_end+0xfc014b10>
   14b24:	d8802304 	addi	r2,sp,140
   14b28:	14c5c83a 	sub	r2,r2,r19
   14b2c:	d8c02344 	addi	r3,sp,141
   14b30:	1885883a 	add	r2,r3,r2
   14b34:	003f7006 	br	148f8 <__alt_data_end+0xfc0148f8>
   14b38:	0005883a 	mov	r2,zero
   14b3c:	003f0f06 	br	1477c <__alt_data_end+0xfc01477c>
   14b40:	d8c03217 	ldw	r3,200(sp)
   14b44:	18c00044 	addi	r3,r3,1
   14b48:	d8c02b15 	stw	r3,172(sp)
   14b4c:	1805883a 	mov	r2,r3
   14b50:	183fb20e 	bge	r3,zero,14a1c <__alt_data_end+0xfc014a1c>
   14b54:	0005883a 	mov	r2,zero
   14b58:	003fb006 	br	14a1c <__alt_data_end+0xfc014a1c>
   14b5c:	d9003617 	ldw	r4,216(sp)
   14b60:	000d883a 	mov	r6,zero
   14b64:	000f883a 	mov	r7,zero
   14b68:	980b883a 	mov	r5,r19
   14b6c:	d8c03c15 	stw	r3,240(sp)
   14b70:	da003d15 	stw	r8,244(sp)
   14b74:	001ea9c0 	call	1ea9c <__eqdf2>
   14b78:	d8c03c17 	ldw	r3,240(sp)
   14b7c:	da003d17 	ldw	r8,244(sp)
   14b80:	103f9826 	beq	r2,zero,149e4 <__alt_data_end+0xfc0149e4>
   14b84:	00800044 	movi	r2,1
   14b88:	10c7c83a 	sub	r3,r2,r3
   14b8c:	d8c02615 	stw	r3,152(sp)
   14b90:	003f9506 	br	149e8 <__alt_data_end+0xfc0149e8>
   14b94:	d9002a17 	ldw	r4,168(sp)
   14b98:	d8c03217 	ldw	r3,200(sp)
   14b9c:	20800044 	addi	r2,r4,1
   14ba0:	1885883a 	add	r2,r3,r2
   14ba4:	d8802b15 	stw	r2,172(sp)
   14ba8:	103dbf0e 	bge	r2,zero,142a8 <__alt_data_end+0xfc0142a8>
   14bac:	0005883a 	mov	r2,zero
   14bb0:	003dbd06 	br	142a8 <__alt_data_end+0xfc0142a8>
   14bb4:	2000201e 	bne	r4,zero,14c38 <___vfprintf_internal_r+0x222c>
   14bb8:	9480004c 	andi	r18,r18,1
   14bbc:	90001e1e 	bne	r18,zero,14c38 <___vfprintf_internal_r+0x222c>
   14bc0:	00800044 	movi	r2,1
   14bc4:	d8802b15 	stw	r2,172(sp)
   14bc8:	003db706 	br	142a8 <__alt_data_end+0xfc0142a8>
   14bcc:	00800b44 	movi	r2,45
   14bd0:	05adc83a 	sub	r22,zero,r22
   14bd4:	d8802305 	stb	r2,140(sp)
   14bd8:	003f3f06 	br	148d8 <__alt_data_end+0xfc0148d8>
   14bdc:	0005883a 	mov	r2,zero
   14be0:	003f5206 	br	1492c <__alt_data_end+0xfc01492c>
   14be4:	90a4703a 	and	r18,r18,r2
   14be8:	903f4e26 	beq	r18,zero,14924 <__alt_data_end+0xfc014924>
   14bec:	003f4a06 	br	14918 <__alt_data_end+0xfc014918>
   14bf0:	00800084 	movi	r2,2
   14bf4:	10c5c83a 	sub	r2,r2,r3
   14bf8:	003f8406 	br	14a0c <__alt_data_end+0xfc014a0c>
   14bfc:	d9402e17 	ldw	r5,184(sp)
   14c00:	d9002e17 	ldw	r4,184(sp)
   14c04:	ac400043 	ldbu	r17,1(r21)
   14c08:	29400017 	ldw	r5,0(r5)
   14c0c:	20800104 	addi	r2,r4,4
   14c10:	d8802e15 	stw	r2,184(sp)
   14c14:	d9402a15 	stw	r5,168(sp)
   14c18:	182b883a 	mov	r21,r3
   14c1c:	283e7b0e 	bge	r5,zero,1460c <__alt_data_end+0xfc01460c>
   14c20:	8c403fcc 	andi	r17,r17,255
   14c24:	017fffc4 	movi	r5,-1
   14c28:	8c40201c 	xori	r17,r17,128
   14c2c:	d9402a15 	stw	r5,168(sp)
   14c30:	8c7fe004 	addi	r17,r17,-128
   14c34:	0037d706 	br	12b94 <__alt_data_end+0xfc012b94>
   14c38:	d8c02a17 	ldw	r3,168(sp)
   14c3c:	18c00084 	addi	r3,r3,2
   14c40:	d8c02b15 	stw	r3,172(sp)
   14c44:	1805883a 	mov	r2,r3
   14c48:	183d970e 	bge	r3,zero,142a8 <__alt_data_end+0xfc0142a8>
   14c4c:	003fd706 	br	14bac <__alt_data_end+0xfc014bac>
   14c50:	0005883a 	mov	r2,zero
   14c54:	003f8f06 	br	14a94 <__alt_data_end+0xfc014a94>
   14c58:	9080004c 	andi	r2,r18,1
   14c5c:	103f821e 	bne	r2,zero,14a68 <__alt_data_end+0xfc014a68>
   14c60:	d8802117 	ldw	r2,132(sp)
   14c64:	1405c83a 	sub	r2,r2,r16
   14c68:	d8803315 	stw	r2,204(sp)
   14c6c:	b47ef426 	beq	r22,r17,14840 <__alt_data_end+0xfc014840>
   14c70:	dd802617 	ldw	r22,152(sp)
   14c74:	003f1206 	br	148c0 <__alt_data_end+0xfc0148c0>
   14c78:	d8c02b03 	ldbu	r3,172(sp)
   14c7c:	d8c02785 	stb	r3,158(sp)
   14c80:	0038df06 	br	13000 <__alt_data_end+0xfc013000>
   14c84:	d8c02b03 	ldbu	r3,172(sp)
   14c88:	d8c02785 	stb	r3,158(sp)
   14c8c:	0038aa06 	br	12f38 <__alt_data_end+0xfc012f38>
   14c90:	d8c02b03 	ldbu	r3,172(sp)
   14c94:	d8c02785 	stb	r3,158(sp)
   14c98:	003a4306 	br	135a8 <__alt_data_end+0xfc0135a8>
   14c9c:	d8c02b03 	ldbu	r3,172(sp)
   14ca0:	d8c02785 	stb	r3,158(sp)
   14ca4:	003af506 	br	1387c <__alt_data_end+0xfc01387c>
   14ca8:	0005883a 	mov	r2,zero
   14cac:	003d7b06 	br	1429c <__alt_data_end+0xfc01429c>
   14cb0:	d8802344 	addi	r2,sp,141
   14cb4:	003f1006 	br	148f8 <__alt_data_end+0xfc0148f8>
   14cb8:	d8c02b03 	ldbu	r3,172(sp)
   14cbc:	d8c02785 	stb	r3,158(sp)
   14cc0:	0038fd06 	br	130b8 <__alt_data_end+0xfc0130b8>
   14cc4:	d8c02b03 	ldbu	r3,172(sp)
   14cc8:	d8c02785 	stb	r3,158(sp)
   14ccc:	003a9706 	br	1372c <__alt_data_end+0xfc01372c>
   14cd0:	d8c02b03 	ldbu	r3,172(sp)
   14cd4:	d8c02785 	stb	r3,158(sp)
   14cd8:	003a1806 	br	1353c <__alt_data_end+0xfc01353c>
   14cdc:	d8c02b03 	ldbu	r3,172(sp)
   14ce0:	d8c02785 	stb	r3,158(sp)
   14ce4:	003abe06 	br	137e0 <__alt_data_end+0xfc0137e0>

00014ce8 <__vfprintf_internal>:
   14ce8:	008000f4 	movhi	r2,3
   14cec:	10bbbb04 	addi	r2,r2,-4372
   14cf0:	300f883a 	mov	r7,r6
   14cf4:	280d883a 	mov	r6,r5
   14cf8:	200b883a 	mov	r5,r4
   14cfc:	11000017 	ldw	r4,0(r2)
   14d00:	0012a0c1 	jmpi	12a0c <___vfprintf_internal_r>

00014d04 <__sbprintf>:
   14d04:	2880030b 	ldhu	r2,12(r5)
   14d08:	2ac01917 	ldw	r11,100(r5)
   14d0c:	2a80038b 	ldhu	r10,14(r5)
   14d10:	2a400717 	ldw	r9,28(r5)
   14d14:	2a000917 	ldw	r8,36(r5)
   14d18:	defee204 	addi	sp,sp,-1144
   14d1c:	00c10004 	movi	r3,1024
   14d20:	dc011a15 	stw	r16,1128(sp)
   14d24:	10bfff4c 	andi	r2,r2,65533
   14d28:	2821883a 	mov	r16,r5
   14d2c:	d8cb883a 	add	r5,sp,r3
   14d30:	dc811c15 	stw	r18,1136(sp)
   14d34:	dc411b15 	stw	r17,1132(sp)
   14d38:	dfc11d15 	stw	ra,1140(sp)
   14d3c:	2025883a 	mov	r18,r4
   14d40:	d881030d 	sth	r2,1036(sp)
   14d44:	dac11915 	stw	r11,1124(sp)
   14d48:	da81038d 	sth	r10,1038(sp)
   14d4c:	da410715 	stw	r9,1052(sp)
   14d50:	da010915 	stw	r8,1060(sp)
   14d54:	dec10015 	stw	sp,1024(sp)
   14d58:	dec10415 	stw	sp,1040(sp)
   14d5c:	d8c10215 	stw	r3,1032(sp)
   14d60:	d8c10515 	stw	r3,1044(sp)
   14d64:	d8010615 	stw	zero,1048(sp)
   14d68:	0012a0c0 	call	12a0c <___vfprintf_internal_r>
   14d6c:	1023883a 	mov	r17,r2
   14d70:	10000416 	blt	r2,zero,14d84 <__sbprintf+0x80>
   14d74:	d9410004 	addi	r5,sp,1024
   14d78:	9009883a 	mov	r4,r18
   14d7c:	00169e00 	call	169e0 <_fflush_r>
   14d80:	10000d1e 	bne	r2,zero,14db8 <__sbprintf+0xb4>
   14d84:	d881030b 	ldhu	r2,1036(sp)
   14d88:	1080100c 	andi	r2,r2,64
   14d8c:	10000326 	beq	r2,zero,14d9c <__sbprintf+0x98>
   14d90:	8080030b 	ldhu	r2,12(r16)
   14d94:	10801014 	ori	r2,r2,64
   14d98:	8080030d 	sth	r2,12(r16)
   14d9c:	8805883a 	mov	r2,r17
   14da0:	dfc11d17 	ldw	ra,1140(sp)
   14da4:	dc811c17 	ldw	r18,1136(sp)
   14da8:	dc411b17 	ldw	r17,1132(sp)
   14dac:	dc011a17 	ldw	r16,1128(sp)
   14db0:	dec11e04 	addi	sp,sp,1144
   14db4:	f800283a 	ret
   14db8:	047fffc4 	movi	r17,-1
   14dbc:	003ff106 	br	14d84 <__alt_data_end+0xfc014d84>

00014dc0 <__swsetup_r>:
   14dc0:	008000f4 	movhi	r2,3
   14dc4:	defffd04 	addi	sp,sp,-12
   14dc8:	10bbbb04 	addi	r2,r2,-4372
   14dcc:	dc400115 	stw	r17,4(sp)
   14dd0:	2023883a 	mov	r17,r4
   14dd4:	11000017 	ldw	r4,0(r2)
   14dd8:	dc000015 	stw	r16,0(sp)
   14ddc:	dfc00215 	stw	ra,8(sp)
   14de0:	2821883a 	mov	r16,r5
   14de4:	20000226 	beq	r4,zero,14df0 <__swsetup_r+0x30>
   14de8:	20800e17 	ldw	r2,56(r4)
   14dec:	10003126 	beq	r2,zero,14eb4 <__swsetup_r+0xf4>
   14df0:	8080030b 	ldhu	r2,12(r16)
   14df4:	10c0020c 	andi	r3,r2,8
   14df8:	1009883a 	mov	r4,r2
   14dfc:	18000f26 	beq	r3,zero,14e3c <__swsetup_r+0x7c>
   14e00:	80c00417 	ldw	r3,16(r16)
   14e04:	18001526 	beq	r3,zero,14e5c <__swsetup_r+0x9c>
   14e08:	1100004c 	andi	r4,r2,1
   14e0c:	20001c1e 	bne	r4,zero,14e80 <__swsetup_r+0xc0>
   14e10:	1080008c 	andi	r2,r2,2
   14e14:	1000291e 	bne	r2,zero,14ebc <__swsetup_r+0xfc>
   14e18:	80800517 	ldw	r2,20(r16)
   14e1c:	80800215 	stw	r2,8(r16)
   14e20:	18001c26 	beq	r3,zero,14e94 <__swsetup_r+0xd4>
   14e24:	0005883a 	mov	r2,zero
   14e28:	dfc00217 	ldw	ra,8(sp)
   14e2c:	dc400117 	ldw	r17,4(sp)
   14e30:	dc000017 	ldw	r16,0(sp)
   14e34:	dec00304 	addi	sp,sp,12
   14e38:	f800283a 	ret
   14e3c:	2080040c 	andi	r2,r4,16
   14e40:	10002e26 	beq	r2,zero,14efc <__swsetup_r+0x13c>
   14e44:	2080010c 	andi	r2,r4,4
   14e48:	10001e1e 	bne	r2,zero,14ec4 <__swsetup_r+0x104>
   14e4c:	80c00417 	ldw	r3,16(r16)
   14e50:	20800214 	ori	r2,r4,8
   14e54:	8080030d 	sth	r2,12(r16)
   14e58:	183feb1e 	bne	r3,zero,14e08 <__alt_data_end+0xfc014e08>
   14e5c:	1100a00c 	andi	r4,r2,640
   14e60:	01408004 	movi	r5,512
   14e64:	217fe826 	beq	r4,r5,14e08 <__alt_data_end+0xfc014e08>
   14e68:	800b883a 	mov	r5,r16
   14e6c:	8809883a 	mov	r4,r17
   14e70:	001797c0 	call	1797c <__smakebuf_r>
   14e74:	8080030b 	ldhu	r2,12(r16)
   14e78:	80c00417 	ldw	r3,16(r16)
   14e7c:	003fe206 	br	14e08 <__alt_data_end+0xfc014e08>
   14e80:	80800517 	ldw	r2,20(r16)
   14e84:	80000215 	stw	zero,8(r16)
   14e88:	0085c83a 	sub	r2,zero,r2
   14e8c:	80800615 	stw	r2,24(r16)
   14e90:	183fe41e 	bne	r3,zero,14e24 <__alt_data_end+0xfc014e24>
   14e94:	80c0030b 	ldhu	r3,12(r16)
   14e98:	0005883a 	mov	r2,zero
   14e9c:	1900200c 	andi	r4,r3,128
   14ea0:	203fe126 	beq	r4,zero,14e28 <__alt_data_end+0xfc014e28>
   14ea4:	18c01014 	ori	r3,r3,64
   14ea8:	80c0030d 	sth	r3,12(r16)
   14eac:	00bfffc4 	movi	r2,-1
   14eb0:	003fdd06 	br	14e28 <__alt_data_end+0xfc014e28>
   14eb4:	0016dcc0 	call	16dcc <__sinit>
   14eb8:	003fcd06 	br	14df0 <__alt_data_end+0xfc014df0>
   14ebc:	0005883a 	mov	r2,zero
   14ec0:	003fd606 	br	14e1c <__alt_data_end+0xfc014e1c>
   14ec4:	81400c17 	ldw	r5,48(r16)
   14ec8:	28000626 	beq	r5,zero,14ee4 <__swsetup_r+0x124>
   14ecc:	80801004 	addi	r2,r16,64
   14ed0:	28800326 	beq	r5,r2,14ee0 <__swsetup_r+0x120>
   14ed4:	8809883a 	mov	r4,r17
   14ed8:	0016f400 	call	16f40 <_free_r>
   14edc:	8100030b 	ldhu	r4,12(r16)
   14ee0:	80000c15 	stw	zero,48(r16)
   14ee4:	80c00417 	ldw	r3,16(r16)
   14ee8:	00bff6c4 	movi	r2,-37
   14eec:	1108703a 	and	r4,r2,r4
   14ef0:	80000115 	stw	zero,4(r16)
   14ef4:	80c00015 	stw	r3,0(r16)
   14ef8:	003fd506 	br	14e50 <__alt_data_end+0xfc014e50>
   14efc:	00800244 	movi	r2,9
   14f00:	88800015 	stw	r2,0(r17)
   14f04:	20801014 	ori	r2,r4,64
   14f08:	8080030d 	sth	r2,12(r16)
   14f0c:	00bfffc4 	movi	r2,-1
   14f10:	003fc506 	br	14e28 <__alt_data_end+0xfc014e28>

00014f14 <quorem>:
   14f14:	defff204 	addi	sp,sp,-56
   14f18:	ddc00b15 	stw	r23,44(sp)
   14f1c:	20800417 	ldw	r2,16(r4)
   14f20:	2dc00417 	ldw	r23,16(r5)
   14f24:	dfc00d15 	stw	ra,52(sp)
   14f28:	df000c15 	stw	fp,48(sp)
   14f2c:	dd800a15 	stw	r22,40(sp)
   14f30:	dd400915 	stw	r21,36(sp)
   14f34:	dd000815 	stw	r20,32(sp)
   14f38:	dcc00715 	stw	r19,28(sp)
   14f3c:	dc800615 	stw	r18,24(sp)
   14f40:	dc400515 	stw	r17,20(sp)
   14f44:	dc000415 	stw	r16,16(sp)
   14f48:	15c07a16 	blt	r2,r23,15134 <quorem+0x220>
   14f4c:	bdffffc4 	addi	r23,r23,-1
   14f50:	bde9883a 	add	r20,r23,r23
   14f54:	28c00504 	addi	r3,r5,20
   14f58:	a529883a 	add	r20,r20,r20
   14f5c:	1d39883a 	add	fp,r3,r20
   14f60:	24c00504 	addi	r19,r4,20
   14f64:	d9400215 	stw	r5,8(sp)
   14f68:	9d29883a 	add	r20,r19,r20
   14f6c:	e1400017 	ldw	r5,0(fp)
   14f70:	d9000015 	stw	r4,0(sp)
   14f74:	a1000017 	ldw	r4,0(r20)
   14f78:	29400044 	addi	r5,r5,1
   14f7c:	d8c00115 	stw	r3,4(sp)
   14f80:	dd000315 	stw	r20,12(sp)
   14f84:	000d87c0 	call	d87c <__udivsi3>
   14f88:	1025883a 	mov	r18,r2
   14f8c:	10003026 	beq	r2,zero,15050 <quorem+0x13c>
   14f90:	dc400117 	ldw	r17,4(sp)
   14f94:	9829883a 	mov	r20,r19
   14f98:	002d883a 	mov	r22,zero
   14f9c:	0021883a 	mov	r16,zero
   14fa0:	8d400017 	ldw	r21,0(r17)
   14fa4:	900b883a 	mov	r5,r18
   14fa8:	8c400104 	addi	r17,r17,4
   14fac:	a93fffcc 	andi	r4,r21,65535
   14fb0:	000d9380 	call	d938 <__mulsi3>
   14fb4:	a808d43a 	srli	r4,r21,16
   14fb8:	900b883a 	mov	r5,r18
   14fbc:	15ad883a 	add	r22,r2,r22
   14fc0:	000d9380 	call	d938 <__mulsi3>
   14fc4:	a1000017 	ldw	r4,0(r20)
   14fc8:	b00cd43a 	srli	r6,r22,16
   14fcc:	b0ffffcc 	andi	r3,r22,65535
   14fd0:	217fffcc 	andi	r5,r4,65535
   14fd4:	2c21883a 	add	r16,r5,r16
   14fd8:	80c7c83a 	sub	r3,r16,r3
   14fdc:	2008d43a 	srli	r4,r4,16
   14fe0:	1185883a 	add	r2,r2,r6
   14fe4:	1821d43a 	srai	r16,r3,16
   14fe8:	117fffcc 	andi	r5,r2,65535
   14fec:	2149c83a 	sub	r4,r4,r5
   14ff0:	2421883a 	add	r16,r4,r16
   14ff4:	8008943a 	slli	r4,r16,16
   14ff8:	18ffffcc 	andi	r3,r3,65535
   14ffc:	102cd43a 	srli	r22,r2,16
   15000:	20c8b03a 	or	r4,r4,r3
   15004:	a1000015 	stw	r4,0(r20)
   15008:	8021d43a 	srai	r16,r16,16
   1500c:	a5000104 	addi	r20,r20,4
   15010:	e47fe32e 	bgeu	fp,r17,14fa0 <__alt_data_end+0xfc014fa0>
   15014:	d8c00317 	ldw	r3,12(sp)
   15018:	18800017 	ldw	r2,0(r3)
   1501c:	10000c1e 	bne	r2,zero,15050 <quorem+0x13c>
   15020:	18bfff04 	addi	r2,r3,-4
   15024:	9880082e 	bgeu	r19,r2,15048 <quorem+0x134>
   15028:	18ffff17 	ldw	r3,-4(r3)
   1502c:	18000326 	beq	r3,zero,1503c <quorem+0x128>
   15030:	00000506 	br	15048 <quorem+0x134>
   15034:	10c00017 	ldw	r3,0(r2)
   15038:	1800031e 	bne	r3,zero,15048 <quorem+0x134>
   1503c:	10bfff04 	addi	r2,r2,-4
   15040:	bdffffc4 	addi	r23,r23,-1
   15044:	98bffb36 	bltu	r19,r2,15034 <__alt_data_end+0xfc015034>
   15048:	d8c00017 	ldw	r3,0(sp)
   1504c:	1dc00415 	stw	r23,16(r3)
   15050:	d9400217 	ldw	r5,8(sp)
   15054:	d9000017 	ldw	r4,0(sp)
   15058:	00186fc0 	call	186fc <__mcmp>
   1505c:	10002816 	blt	r2,zero,15100 <quorem+0x1ec>
   15060:	dc400117 	ldw	r17,4(sp)
   15064:	94800044 	addi	r18,r18,1
   15068:	980d883a 	mov	r6,r19
   1506c:	0007883a 	mov	r3,zero
   15070:	31000017 	ldw	r4,0(r6)
   15074:	89400017 	ldw	r5,0(r17)
   15078:	31800104 	addi	r6,r6,4
   1507c:	20bfffcc 	andi	r2,r4,65535
   15080:	10c7883a 	add	r3,r2,r3
   15084:	28bfffcc 	andi	r2,r5,65535
   15088:	1885c83a 	sub	r2,r3,r2
   1508c:	280ad43a 	srli	r5,r5,16
   15090:	2008d43a 	srli	r4,r4,16
   15094:	1007d43a 	srai	r3,r2,16
   15098:	10bfffcc 	andi	r2,r2,65535
   1509c:	2149c83a 	sub	r4,r4,r5
   150a0:	20c9883a 	add	r4,r4,r3
   150a4:	200a943a 	slli	r5,r4,16
   150a8:	8c400104 	addi	r17,r17,4
   150ac:	2007d43a 	srai	r3,r4,16
   150b0:	2884b03a 	or	r2,r5,r2
   150b4:	30bfff15 	stw	r2,-4(r6)
   150b8:	e47fed2e 	bgeu	fp,r17,15070 <__alt_data_end+0xfc015070>
   150bc:	bdc5883a 	add	r2,r23,r23
   150c0:	1085883a 	add	r2,r2,r2
   150c4:	9887883a 	add	r3,r19,r2
   150c8:	18800017 	ldw	r2,0(r3)
   150cc:	10000c1e 	bne	r2,zero,15100 <quorem+0x1ec>
   150d0:	18bfff04 	addi	r2,r3,-4
   150d4:	9880082e 	bgeu	r19,r2,150f8 <quorem+0x1e4>
   150d8:	18ffff17 	ldw	r3,-4(r3)
   150dc:	18000326 	beq	r3,zero,150ec <quorem+0x1d8>
   150e0:	00000506 	br	150f8 <quorem+0x1e4>
   150e4:	10c00017 	ldw	r3,0(r2)
   150e8:	1800031e 	bne	r3,zero,150f8 <quorem+0x1e4>
   150ec:	10bfff04 	addi	r2,r2,-4
   150f0:	bdffffc4 	addi	r23,r23,-1
   150f4:	98bffb36 	bltu	r19,r2,150e4 <__alt_data_end+0xfc0150e4>
   150f8:	d8c00017 	ldw	r3,0(sp)
   150fc:	1dc00415 	stw	r23,16(r3)
   15100:	9005883a 	mov	r2,r18
   15104:	dfc00d17 	ldw	ra,52(sp)
   15108:	df000c17 	ldw	fp,48(sp)
   1510c:	ddc00b17 	ldw	r23,44(sp)
   15110:	dd800a17 	ldw	r22,40(sp)
   15114:	dd400917 	ldw	r21,36(sp)
   15118:	dd000817 	ldw	r20,32(sp)
   1511c:	dcc00717 	ldw	r19,28(sp)
   15120:	dc800617 	ldw	r18,24(sp)
   15124:	dc400517 	ldw	r17,20(sp)
   15128:	dc000417 	ldw	r16,16(sp)
   1512c:	dec00e04 	addi	sp,sp,56
   15130:	f800283a 	ret
   15134:	0005883a 	mov	r2,zero
   15138:	003ff206 	br	15104 <__alt_data_end+0xfc015104>

0001513c <_dtoa_r>:
   1513c:	20801017 	ldw	r2,64(r4)
   15140:	deffde04 	addi	sp,sp,-136
   15144:	df002015 	stw	fp,128(sp)
   15148:	dcc01b15 	stw	r19,108(sp)
   1514c:	dc801a15 	stw	r18,104(sp)
   15150:	dc401915 	stw	r17,100(sp)
   15154:	dc001815 	stw	r16,96(sp)
   15158:	dfc02115 	stw	ra,132(sp)
   1515c:	ddc01f15 	stw	r23,124(sp)
   15160:	dd801e15 	stw	r22,120(sp)
   15164:	dd401d15 	stw	r21,116(sp)
   15168:	dd001c15 	stw	r20,112(sp)
   1516c:	d9c00315 	stw	r7,12(sp)
   15170:	2039883a 	mov	fp,r4
   15174:	3023883a 	mov	r17,r6
   15178:	2825883a 	mov	r18,r5
   1517c:	dc002417 	ldw	r16,144(sp)
   15180:	3027883a 	mov	r19,r6
   15184:	10000826 	beq	r2,zero,151a8 <_dtoa_r+0x6c>
   15188:	21801117 	ldw	r6,68(r4)
   1518c:	00c00044 	movi	r3,1
   15190:	100b883a 	mov	r5,r2
   15194:	1986983a 	sll	r3,r3,r6
   15198:	11800115 	stw	r6,4(r2)
   1519c:	10c00215 	stw	r3,8(r2)
   151a0:	0017e200 	call	17e20 <_Bfree>
   151a4:	e0001015 	stw	zero,64(fp)
   151a8:	88002e16 	blt	r17,zero,15264 <_dtoa_r+0x128>
   151ac:	80000015 	stw	zero,0(r16)
   151b0:	889ffc2c 	andhi	r2,r17,32752
   151b4:	00dffc34 	movhi	r3,32752
   151b8:	10c01c26 	beq	r2,r3,1522c <_dtoa_r+0xf0>
   151bc:	000d883a 	mov	r6,zero
   151c0:	000f883a 	mov	r7,zero
   151c4:	9009883a 	mov	r4,r18
   151c8:	980b883a 	mov	r5,r19
   151cc:	001ea9c0 	call	1ea9c <__eqdf2>
   151d0:	10002b1e 	bne	r2,zero,15280 <_dtoa_r+0x144>
   151d4:	d9c02317 	ldw	r7,140(sp)
   151d8:	00800044 	movi	r2,1
   151dc:	38800015 	stw	r2,0(r7)
   151e0:	d8802517 	ldw	r2,148(sp)
   151e4:	10019e26 	beq	r2,zero,15860 <_dtoa_r+0x724>
   151e8:	d8c02517 	ldw	r3,148(sp)
   151ec:	008000f4 	movhi	r2,3
   151f0:	10aec644 	addi	r2,r2,-17639
   151f4:	18800015 	stw	r2,0(r3)
   151f8:	10bfffc4 	addi	r2,r2,-1
   151fc:	dfc02117 	ldw	ra,132(sp)
   15200:	df002017 	ldw	fp,128(sp)
   15204:	ddc01f17 	ldw	r23,124(sp)
   15208:	dd801e17 	ldw	r22,120(sp)
   1520c:	dd401d17 	ldw	r21,116(sp)
   15210:	dd001c17 	ldw	r20,112(sp)
   15214:	dcc01b17 	ldw	r19,108(sp)
   15218:	dc801a17 	ldw	r18,104(sp)
   1521c:	dc401917 	ldw	r17,100(sp)
   15220:	dc001817 	ldw	r16,96(sp)
   15224:	dec02204 	addi	sp,sp,136
   15228:	f800283a 	ret
   1522c:	d8c02317 	ldw	r3,140(sp)
   15230:	0089c3c4 	movi	r2,9999
   15234:	18800015 	stw	r2,0(r3)
   15238:	90017726 	beq	r18,zero,15818 <_dtoa_r+0x6dc>
   1523c:	008000f4 	movhi	r2,3
   15240:	10aeda04 	addi	r2,r2,-17560
   15244:	d9002517 	ldw	r4,148(sp)
   15248:	203fec26 	beq	r4,zero,151fc <__alt_data_end+0xfc0151fc>
   1524c:	10c000c7 	ldb	r3,3(r2)
   15250:	1801781e 	bne	r3,zero,15834 <_dtoa_r+0x6f8>
   15254:	10c000c4 	addi	r3,r2,3
   15258:	d9802517 	ldw	r6,148(sp)
   1525c:	30c00015 	stw	r3,0(r6)
   15260:	003fe606 	br	151fc <__alt_data_end+0xfc0151fc>
   15264:	04e00034 	movhi	r19,32768
   15268:	9cffffc4 	addi	r19,r19,-1
   1526c:	00800044 	movi	r2,1
   15270:	8ce6703a 	and	r19,r17,r19
   15274:	80800015 	stw	r2,0(r16)
   15278:	9823883a 	mov	r17,r19
   1527c:	003fcc06 	br	151b0 <__alt_data_end+0xfc0151b0>
   15280:	d8800204 	addi	r2,sp,8
   15284:	d8800015 	stw	r2,0(sp)
   15288:	d9c00104 	addi	r7,sp,4
   1528c:	900b883a 	mov	r5,r18
   15290:	980d883a 	mov	r6,r19
   15294:	e009883a 	mov	r4,fp
   15298:	8820d53a 	srli	r16,r17,20
   1529c:	0018ac80 	call	18ac8 <__d2b>
   152a0:	d8800915 	stw	r2,36(sp)
   152a4:	8001651e 	bne	r16,zero,1583c <_dtoa_r+0x700>
   152a8:	dd800217 	ldw	r22,8(sp)
   152ac:	dc000117 	ldw	r16,4(sp)
   152b0:	00800804 	movi	r2,32
   152b4:	b421883a 	add	r16,r22,r16
   152b8:	80c10c84 	addi	r3,r16,1074
   152bc:	10c2d10e 	bge	r2,r3,15e04 <_dtoa_r+0xcc8>
   152c0:	00801004 	movi	r2,64
   152c4:	81010484 	addi	r4,r16,1042
   152c8:	10c7c83a 	sub	r3,r2,r3
   152cc:	9108d83a 	srl	r4,r18,r4
   152d0:	88e2983a 	sll	r17,r17,r3
   152d4:	2448b03a 	or	r4,r4,r17
   152d8:	001ffb80 	call	1ffb8 <__floatunsidf>
   152dc:	017f8434 	movhi	r5,65040
   152e0:	01800044 	movi	r6,1
   152e4:	1009883a 	mov	r4,r2
   152e8:	194b883a 	add	r5,r3,r5
   152ec:	843fffc4 	addi	r16,r16,-1
   152f0:	d9801115 	stw	r6,68(sp)
   152f4:	000d883a 	mov	r6,zero
   152f8:	01cffe34 	movhi	r7,16376
   152fc:	001f5600 	call	1f560 <__subdf3>
   15300:	0198dbf4 	movhi	r6,25455
   15304:	01cff4f4 	movhi	r7,16339
   15308:	3190d844 	addi	r6,r6,17249
   1530c:	39e1e9c4 	addi	r7,r7,-30809
   15310:	1009883a 	mov	r4,r2
   15314:	180b883a 	mov	r5,r3
   15318:	001ecf40 	call	1ecf4 <__muldf3>
   1531c:	01a2d874 	movhi	r6,35681
   15320:	01cff1f4 	movhi	r7,16327
   15324:	31b22cc4 	addi	r6,r6,-14157
   15328:	39e28a04 	addi	r7,r7,-30168
   1532c:	180b883a 	mov	r5,r3
   15330:	1009883a 	mov	r4,r2
   15334:	001d8200 	call	1d820 <__adddf3>
   15338:	8009883a 	mov	r4,r16
   1533c:	1029883a 	mov	r20,r2
   15340:	1823883a 	mov	r17,r3
   15344:	001fedc0 	call	1fedc <__floatsidf>
   15348:	019427f4 	movhi	r6,20639
   1534c:	01cff4f4 	movhi	r7,16339
   15350:	319e7ec4 	addi	r6,r6,31227
   15354:	39d104c4 	addi	r7,r7,17427
   15358:	1009883a 	mov	r4,r2
   1535c:	180b883a 	mov	r5,r3
   15360:	001ecf40 	call	1ecf4 <__muldf3>
   15364:	100d883a 	mov	r6,r2
   15368:	180f883a 	mov	r7,r3
   1536c:	a009883a 	mov	r4,r20
   15370:	880b883a 	mov	r5,r17
   15374:	001d8200 	call	1d820 <__adddf3>
   15378:	1009883a 	mov	r4,r2
   1537c:	180b883a 	mov	r5,r3
   15380:	1029883a 	mov	r20,r2
   15384:	1823883a 	mov	r17,r3
   15388:	001fe5c0 	call	1fe5c <__fixdfsi>
   1538c:	000d883a 	mov	r6,zero
   15390:	000f883a 	mov	r7,zero
   15394:	a009883a 	mov	r4,r20
   15398:	880b883a 	mov	r5,r17
   1539c:	d8800515 	stw	r2,20(sp)
   153a0:	001ec000 	call	1ec00 <__ledf2>
   153a4:	10028716 	blt	r2,zero,15dc4 <_dtoa_r+0xc88>
   153a8:	d8c00517 	ldw	r3,20(sp)
   153ac:	00800584 	movi	r2,22
   153b0:	10c27536 	bltu	r2,r3,15d88 <_dtoa_r+0xc4c>
   153b4:	180490fa 	slli	r2,r3,3
   153b8:	00c000f4 	movhi	r3,3
   153bc:	18eef504 	addi	r3,r3,-17452
   153c0:	1885883a 	add	r2,r3,r2
   153c4:	11000017 	ldw	r4,0(r2)
   153c8:	11400117 	ldw	r5,4(r2)
   153cc:	900d883a 	mov	r6,r18
   153d0:	980f883a 	mov	r7,r19
   153d4:	001eb240 	call	1eb24 <__gedf2>
   153d8:	00828d0e 	bge	zero,r2,15e10 <_dtoa_r+0xcd4>
   153dc:	d9000517 	ldw	r4,20(sp)
   153e0:	d8000e15 	stw	zero,56(sp)
   153e4:	213fffc4 	addi	r4,r4,-1
   153e8:	d9000515 	stw	r4,20(sp)
   153ec:	b42dc83a 	sub	r22,r22,r16
   153f0:	b5bfffc4 	addi	r22,r22,-1
   153f4:	b0026f16 	blt	r22,zero,15db4 <_dtoa_r+0xc78>
   153f8:	d8000815 	stw	zero,32(sp)
   153fc:	d9c00517 	ldw	r7,20(sp)
   15400:	38026416 	blt	r7,zero,15d94 <_dtoa_r+0xc58>
   15404:	b1ed883a 	add	r22,r22,r7
   15408:	d9c00d15 	stw	r7,52(sp)
   1540c:	d8000a15 	stw	zero,40(sp)
   15410:	d9800317 	ldw	r6,12(sp)
   15414:	00800244 	movi	r2,9
   15418:	11811436 	bltu	r2,r6,1586c <_dtoa_r+0x730>
   1541c:	00800144 	movi	r2,5
   15420:	1184e10e 	bge	r2,r6,167a8 <_dtoa_r+0x166c>
   15424:	31bfff04 	addi	r6,r6,-4
   15428:	d9800315 	stw	r6,12(sp)
   1542c:	0023883a 	mov	r17,zero
   15430:	d9800317 	ldw	r6,12(sp)
   15434:	008000c4 	movi	r2,3
   15438:	30836726 	beq	r6,r2,161d8 <_dtoa_r+0x109c>
   1543c:	1183410e 	bge	r2,r6,16144 <_dtoa_r+0x1008>
   15440:	d9c00317 	ldw	r7,12(sp)
   15444:	00800104 	movi	r2,4
   15448:	38827c26 	beq	r7,r2,15e3c <_dtoa_r+0xd00>
   1544c:	00800144 	movi	r2,5
   15450:	3884c41e 	bne	r7,r2,16764 <_dtoa_r+0x1628>
   15454:	00800044 	movi	r2,1
   15458:	d8800b15 	stw	r2,44(sp)
   1545c:	d8c00517 	ldw	r3,20(sp)
   15460:	d9002217 	ldw	r4,136(sp)
   15464:	1907883a 	add	r3,r3,r4
   15468:	19800044 	addi	r6,r3,1
   1546c:	d8c00c15 	stw	r3,48(sp)
   15470:	d9800615 	stw	r6,24(sp)
   15474:	0183a40e 	bge	zero,r6,16308 <_dtoa_r+0x11cc>
   15478:	d9800617 	ldw	r6,24(sp)
   1547c:	3021883a 	mov	r16,r6
   15480:	e0001115 	stw	zero,68(fp)
   15484:	008005c4 	movi	r2,23
   15488:	1184c92e 	bgeu	r2,r6,167b0 <_dtoa_r+0x1674>
   1548c:	00c00044 	movi	r3,1
   15490:	00800104 	movi	r2,4
   15494:	1085883a 	add	r2,r2,r2
   15498:	11000504 	addi	r4,r2,20
   1549c:	180b883a 	mov	r5,r3
   154a0:	18c00044 	addi	r3,r3,1
   154a4:	313ffb2e 	bgeu	r6,r4,15494 <__alt_data_end+0xfc015494>
   154a8:	e1401115 	stw	r5,68(fp)
   154ac:	e009883a 	mov	r4,fp
   154b0:	0017d780 	call	17d78 <_Balloc>
   154b4:	d8800715 	stw	r2,28(sp)
   154b8:	e0801015 	stw	r2,64(fp)
   154bc:	00800384 	movi	r2,14
   154c0:	1400f736 	bltu	r2,r16,158a0 <_dtoa_r+0x764>
   154c4:	8800f626 	beq	r17,zero,158a0 <_dtoa_r+0x764>
   154c8:	d9c00517 	ldw	r7,20(sp)
   154cc:	01c39a0e 	bge	zero,r7,16338 <_dtoa_r+0x11fc>
   154d0:	388003cc 	andi	r2,r7,15
   154d4:	100490fa 	slli	r2,r2,3
   154d8:	382bd13a 	srai	r21,r7,4
   154dc:	00c000f4 	movhi	r3,3
   154e0:	18eef504 	addi	r3,r3,-17452
   154e4:	1885883a 	add	r2,r3,r2
   154e8:	a8c0040c 	andi	r3,r21,16
   154ec:	12400017 	ldw	r9,0(r2)
   154f0:	12000117 	ldw	r8,4(r2)
   154f4:	18037926 	beq	r3,zero,162dc <_dtoa_r+0x11a0>
   154f8:	008000f4 	movhi	r2,3
   154fc:	10aeeb04 	addi	r2,r2,-17492
   15500:	11800817 	ldw	r6,32(r2)
   15504:	11c00917 	ldw	r7,36(r2)
   15508:	9009883a 	mov	r4,r18
   1550c:	980b883a 	mov	r5,r19
   15510:	da001715 	stw	r8,92(sp)
   15514:	da401615 	stw	r9,88(sp)
   15518:	001e0cc0 	call	1e0cc <__divdf3>
   1551c:	da001717 	ldw	r8,92(sp)
   15520:	da401617 	ldw	r9,88(sp)
   15524:	ad4003cc 	andi	r21,r21,15
   15528:	040000c4 	movi	r16,3
   1552c:	1023883a 	mov	r17,r2
   15530:	1829883a 	mov	r20,r3
   15534:	a8001126 	beq	r21,zero,1557c <_dtoa_r+0x440>
   15538:	05c000f4 	movhi	r23,3
   1553c:	bdeeeb04 	addi	r23,r23,-17492
   15540:	4805883a 	mov	r2,r9
   15544:	4007883a 	mov	r3,r8
   15548:	a980004c 	andi	r6,r21,1
   1554c:	1009883a 	mov	r4,r2
   15550:	a82bd07a 	srai	r21,r21,1
   15554:	180b883a 	mov	r5,r3
   15558:	30000426 	beq	r6,zero,1556c <_dtoa_r+0x430>
   1555c:	b9800017 	ldw	r6,0(r23)
   15560:	b9c00117 	ldw	r7,4(r23)
   15564:	84000044 	addi	r16,r16,1
   15568:	001ecf40 	call	1ecf4 <__muldf3>
   1556c:	bdc00204 	addi	r23,r23,8
   15570:	a83ff51e 	bne	r21,zero,15548 <__alt_data_end+0xfc015548>
   15574:	1013883a 	mov	r9,r2
   15578:	1811883a 	mov	r8,r3
   1557c:	480d883a 	mov	r6,r9
   15580:	400f883a 	mov	r7,r8
   15584:	8809883a 	mov	r4,r17
   15588:	a00b883a 	mov	r5,r20
   1558c:	001e0cc0 	call	1e0cc <__divdf3>
   15590:	d8800f15 	stw	r2,60(sp)
   15594:	d8c01015 	stw	r3,64(sp)
   15598:	d8c00e17 	ldw	r3,56(sp)
   1559c:	18000626 	beq	r3,zero,155b8 <_dtoa_r+0x47c>
   155a0:	d9000f17 	ldw	r4,60(sp)
   155a4:	d9401017 	ldw	r5,64(sp)
   155a8:	000d883a 	mov	r6,zero
   155ac:	01cffc34 	movhi	r7,16368
   155b0:	001ec000 	call	1ec00 <__ledf2>
   155b4:	10040b16 	blt	r2,zero,165e4 <_dtoa_r+0x14a8>
   155b8:	8009883a 	mov	r4,r16
   155bc:	001fedc0 	call	1fedc <__floatsidf>
   155c0:	d9800f17 	ldw	r6,60(sp)
   155c4:	d9c01017 	ldw	r7,64(sp)
   155c8:	1009883a 	mov	r4,r2
   155cc:	180b883a 	mov	r5,r3
   155d0:	001ecf40 	call	1ecf4 <__muldf3>
   155d4:	000d883a 	mov	r6,zero
   155d8:	01d00734 	movhi	r7,16412
   155dc:	1009883a 	mov	r4,r2
   155e0:	180b883a 	mov	r5,r3
   155e4:	001d8200 	call	1d820 <__adddf3>
   155e8:	1021883a 	mov	r16,r2
   155ec:	d8800617 	ldw	r2,24(sp)
   155f0:	047f3034 	movhi	r17,64704
   155f4:	1c63883a 	add	r17,r3,r17
   155f8:	10031826 	beq	r2,zero,1625c <_dtoa_r+0x1120>
   155fc:	d8c00517 	ldw	r3,20(sp)
   15600:	db000617 	ldw	r12,24(sp)
   15604:	d8c01315 	stw	r3,76(sp)
   15608:	d9000b17 	ldw	r4,44(sp)
   1560c:	20038f26 	beq	r4,zero,1644c <_dtoa_r+0x1310>
   15610:	60bfffc4 	addi	r2,r12,-1
   15614:	100490fa 	slli	r2,r2,3
   15618:	00c000f4 	movhi	r3,3
   1561c:	18eef504 	addi	r3,r3,-17452
   15620:	1885883a 	add	r2,r3,r2
   15624:	11800017 	ldw	r6,0(r2)
   15628:	11c00117 	ldw	r7,4(r2)
   1562c:	d8800717 	ldw	r2,28(sp)
   15630:	0009883a 	mov	r4,zero
   15634:	014ff834 	movhi	r5,16352
   15638:	db001615 	stw	r12,88(sp)
   1563c:	15c00044 	addi	r23,r2,1
   15640:	001e0cc0 	call	1e0cc <__divdf3>
   15644:	800d883a 	mov	r6,r16
   15648:	880f883a 	mov	r7,r17
   1564c:	1009883a 	mov	r4,r2
   15650:	180b883a 	mov	r5,r3
   15654:	001f5600 	call	1f560 <__subdf3>
   15658:	d9401017 	ldw	r5,64(sp)
   1565c:	d9000f17 	ldw	r4,60(sp)
   15660:	102b883a 	mov	r21,r2
   15664:	d8c01215 	stw	r3,72(sp)
   15668:	001fe5c0 	call	1fe5c <__fixdfsi>
   1566c:	1009883a 	mov	r4,r2
   15670:	1029883a 	mov	r20,r2
   15674:	001fedc0 	call	1fedc <__floatsidf>
   15678:	d9000f17 	ldw	r4,60(sp)
   1567c:	d9401017 	ldw	r5,64(sp)
   15680:	100d883a 	mov	r6,r2
   15684:	180f883a 	mov	r7,r3
   15688:	001f5600 	call	1f560 <__subdf3>
   1568c:	1823883a 	mov	r17,r3
   15690:	d8c00717 	ldw	r3,28(sp)
   15694:	d9401217 	ldw	r5,72(sp)
   15698:	a2000c04 	addi	r8,r20,48
   1569c:	1021883a 	mov	r16,r2
   156a0:	1a000005 	stb	r8,0(r3)
   156a4:	800d883a 	mov	r6,r16
   156a8:	880f883a 	mov	r7,r17
   156ac:	a809883a 	mov	r4,r21
   156b0:	4029883a 	mov	r20,r8
   156b4:	001eb240 	call	1eb24 <__gedf2>
   156b8:	00841d16 	blt	zero,r2,16730 <_dtoa_r+0x15f4>
   156bc:	800d883a 	mov	r6,r16
   156c0:	880f883a 	mov	r7,r17
   156c4:	0009883a 	mov	r4,zero
   156c8:	014ffc34 	movhi	r5,16368
   156cc:	001f5600 	call	1f560 <__subdf3>
   156d0:	d9401217 	ldw	r5,72(sp)
   156d4:	100d883a 	mov	r6,r2
   156d8:	180f883a 	mov	r7,r3
   156dc:	a809883a 	mov	r4,r21
   156e0:	001eb240 	call	1eb24 <__gedf2>
   156e4:	db001617 	ldw	r12,88(sp)
   156e8:	00840e16 	blt	zero,r2,16724 <_dtoa_r+0x15e8>
   156ec:	00800044 	movi	r2,1
   156f0:	13006b0e 	bge	r2,r12,158a0 <_dtoa_r+0x764>
   156f4:	d9000717 	ldw	r4,28(sp)
   156f8:	dd800f15 	stw	r22,60(sp)
   156fc:	dcc01015 	stw	r19,64(sp)
   15700:	2319883a 	add	r12,r4,r12
   15704:	dcc01217 	ldw	r19,72(sp)
   15708:	602d883a 	mov	r22,r12
   1570c:	dc801215 	stw	r18,72(sp)
   15710:	b825883a 	mov	r18,r23
   15714:	00000906 	br	1573c <_dtoa_r+0x600>
   15718:	001f5600 	call	1f560 <__subdf3>
   1571c:	a80d883a 	mov	r6,r21
   15720:	980f883a 	mov	r7,r19
   15724:	1009883a 	mov	r4,r2
   15728:	180b883a 	mov	r5,r3
   1572c:	001ec000 	call	1ec00 <__ledf2>
   15730:	1003e816 	blt	r2,zero,166d4 <_dtoa_r+0x1598>
   15734:	b825883a 	mov	r18,r23
   15738:	bd83e926 	beq	r23,r22,166e0 <_dtoa_r+0x15a4>
   1573c:	a809883a 	mov	r4,r21
   15740:	980b883a 	mov	r5,r19
   15744:	000d883a 	mov	r6,zero
   15748:	01d00934 	movhi	r7,16420
   1574c:	001ecf40 	call	1ecf4 <__muldf3>
   15750:	000d883a 	mov	r6,zero
   15754:	01d00934 	movhi	r7,16420
   15758:	8009883a 	mov	r4,r16
   1575c:	880b883a 	mov	r5,r17
   15760:	102b883a 	mov	r21,r2
   15764:	1827883a 	mov	r19,r3
   15768:	001ecf40 	call	1ecf4 <__muldf3>
   1576c:	180b883a 	mov	r5,r3
   15770:	1009883a 	mov	r4,r2
   15774:	1821883a 	mov	r16,r3
   15778:	1023883a 	mov	r17,r2
   1577c:	001fe5c0 	call	1fe5c <__fixdfsi>
   15780:	1009883a 	mov	r4,r2
   15784:	1029883a 	mov	r20,r2
   15788:	001fedc0 	call	1fedc <__floatsidf>
   1578c:	8809883a 	mov	r4,r17
   15790:	800b883a 	mov	r5,r16
   15794:	100d883a 	mov	r6,r2
   15798:	180f883a 	mov	r7,r3
   1579c:	001f5600 	call	1f560 <__subdf3>
   157a0:	a5000c04 	addi	r20,r20,48
   157a4:	a80d883a 	mov	r6,r21
   157a8:	980f883a 	mov	r7,r19
   157ac:	1009883a 	mov	r4,r2
   157b0:	180b883a 	mov	r5,r3
   157b4:	95000005 	stb	r20,0(r18)
   157b8:	1021883a 	mov	r16,r2
   157bc:	1823883a 	mov	r17,r3
   157c0:	001ec000 	call	1ec00 <__ledf2>
   157c4:	bdc00044 	addi	r23,r23,1
   157c8:	800d883a 	mov	r6,r16
   157cc:	880f883a 	mov	r7,r17
   157d0:	0009883a 	mov	r4,zero
   157d4:	014ffc34 	movhi	r5,16368
   157d8:	103fcf0e 	bge	r2,zero,15718 <__alt_data_end+0xfc015718>
   157dc:	d8c01317 	ldw	r3,76(sp)
   157e0:	d8c00515 	stw	r3,20(sp)
   157e4:	d9400917 	ldw	r5,36(sp)
   157e8:	e009883a 	mov	r4,fp
   157ec:	0017e200 	call	17e20 <_Bfree>
   157f0:	d9000517 	ldw	r4,20(sp)
   157f4:	d9802317 	ldw	r6,140(sp)
   157f8:	d9c02517 	ldw	r7,148(sp)
   157fc:	b8000005 	stb	zero,0(r23)
   15800:	20800044 	addi	r2,r4,1
   15804:	30800015 	stw	r2,0(r6)
   15808:	3802aa26 	beq	r7,zero,162b4 <_dtoa_r+0x1178>
   1580c:	3dc00015 	stw	r23,0(r7)
   15810:	d8800717 	ldw	r2,28(sp)
   15814:	003e7906 	br	151fc <__alt_data_end+0xfc0151fc>
   15818:	00800434 	movhi	r2,16
   1581c:	10bfffc4 	addi	r2,r2,-1
   15820:	88a2703a 	and	r17,r17,r2
   15824:	883e851e 	bne	r17,zero,1523c <__alt_data_end+0xfc01523c>
   15828:	008000f4 	movhi	r2,3
   1582c:	10aed704 	addi	r2,r2,-17572
   15830:	003e8406 	br	15244 <__alt_data_end+0xfc015244>
   15834:	10c00204 	addi	r3,r2,8
   15838:	003e8706 	br	15258 <__alt_data_end+0xfc015258>
   1583c:	01400434 	movhi	r5,16
   15840:	297fffc4 	addi	r5,r5,-1
   15844:	994a703a 	and	r5,r19,r5
   15848:	9009883a 	mov	r4,r18
   1584c:	843f0044 	addi	r16,r16,-1023
   15850:	294ffc34 	orhi	r5,r5,16368
   15854:	dd800217 	ldw	r22,8(sp)
   15858:	d8001115 	stw	zero,68(sp)
   1585c:	003ea506 	br	152f4 <__alt_data_end+0xfc0152f4>
   15860:	008000f4 	movhi	r2,3
   15864:	10aec604 	addi	r2,r2,-17640
   15868:	003e6406 	br	151fc <__alt_data_end+0xfc0151fc>
   1586c:	e0001115 	stw	zero,68(fp)
   15870:	000b883a 	mov	r5,zero
   15874:	e009883a 	mov	r4,fp
   15878:	0017d780 	call	17d78 <_Balloc>
   1587c:	01bfffc4 	movi	r6,-1
   15880:	01c00044 	movi	r7,1
   15884:	d8800715 	stw	r2,28(sp)
   15888:	d9800c15 	stw	r6,48(sp)
   1588c:	e0801015 	stw	r2,64(fp)
   15890:	d8000315 	stw	zero,12(sp)
   15894:	d9c00b15 	stw	r7,44(sp)
   15898:	d9800615 	stw	r6,24(sp)
   1589c:	d8002215 	stw	zero,136(sp)
   158a0:	d8800117 	ldw	r2,4(sp)
   158a4:	10008916 	blt	r2,zero,15acc <_dtoa_r+0x990>
   158a8:	d9000517 	ldw	r4,20(sp)
   158ac:	00c00384 	movi	r3,14
   158b0:	19008616 	blt	r3,r4,15acc <_dtoa_r+0x990>
   158b4:	200490fa 	slli	r2,r4,3
   158b8:	00c000f4 	movhi	r3,3
   158bc:	d9802217 	ldw	r6,136(sp)
   158c0:	18eef504 	addi	r3,r3,-17452
   158c4:	1885883a 	add	r2,r3,r2
   158c8:	14000017 	ldw	r16,0(r2)
   158cc:	14400117 	ldw	r17,4(r2)
   158d0:	30016316 	blt	r6,zero,15e60 <_dtoa_r+0xd24>
   158d4:	800d883a 	mov	r6,r16
   158d8:	880f883a 	mov	r7,r17
   158dc:	9009883a 	mov	r4,r18
   158e0:	980b883a 	mov	r5,r19
   158e4:	001e0cc0 	call	1e0cc <__divdf3>
   158e8:	180b883a 	mov	r5,r3
   158ec:	1009883a 	mov	r4,r2
   158f0:	001fe5c0 	call	1fe5c <__fixdfsi>
   158f4:	1009883a 	mov	r4,r2
   158f8:	102b883a 	mov	r21,r2
   158fc:	001fedc0 	call	1fedc <__floatsidf>
   15900:	800d883a 	mov	r6,r16
   15904:	880f883a 	mov	r7,r17
   15908:	1009883a 	mov	r4,r2
   1590c:	180b883a 	mov	r5,r3
   15910:	001ecf40 	call	1ecf4 <__muldf3>
   15914:	100d883a 	mov	r6,r2
   15918:	180f883a 	mov	r7,r3
   1591c:	9009883a 	mov	r4,r18
   15920:	980b883a 	mov	r5,r19
   15924:	001f5600 	call	1f560 <__subdf3>
   15928:	d9c00717 	ldw	r7,28(sp)
   1592c:	1009883a 	mov	r4,r2
   15930:	a8800c04 	addi	r2,r21,48
   15934:	38800005 	stb	r2,0(r7)
   15938:	3dc00044 	addi	r23,r7,1
   1593c:	d9c00617 	ldw	r7,24(sp)
   15940:	01800044 	movi	r6,1
   15944:	180b883a 	mov	r5,r3
   15948:	2005883a 	mov	r2,r4
   1594c:	39803826 	beq	r7,r6,15a30 <_dtoa_r+0x8f4>
   15950:	000d883a 	mov	r6,zero
   15954:	01d00934 	movhi	r7,16420
   15958:	001ecf40 	call	1ecf4 <__muldf3>
   1595c:	000d883a 	mov	r6,zero
   15960:	000f883a 	mov	r7,zero
   15964:	1009883a 	mov	r4,r2
   15968:	180b883a 	mov	r5,r3
   1596c:	1025883a 	mov	r18,r2
   15970:	1827883a 	mov	r19,r3
   15974:	001ea9c0 	call	1ea9c <__eqdf2>
   15978:	103f9a26 	beq	r2,zero,157e4 <__alt_data_end+0xfc0157e4>
   1597c:	d9c00617 	ldw	r7,24(sp)
   15980:	d8c00717 	ldw	r3,28(sp)
   15984:	b829883a 	mov	r20,r23
   15988:	38bfffc4 	addi	r2,r7,-1
   1598c:	18ad883a 	add	r22,r3,r2
   15990:	00000a06 	br	159bc <_dtoa_r+0x880>
   15994:	001ecf40 	call	1ecf4 <__muldf3>
   15998:	000d883a 	mov	r6,zero
   1599c:	000f883a 	mov	r7,zero
   159a0:	1009883a 	mov	r4,r2
   159a4:	180b883a 	mov	r5,r3
   159a8:	1025883a 	mov	r18,r2
   159ac:	1827883a 	mov	r19,r3
   159b0:	b829883a 	mov	r20,r23
   159b4:	001ea9c0 	call	1ea9c <__eqdf2>
   159b8:	103f8a26 	beq	r2,zero,157e4 <__alt_data_end+0xfc0157e4>
   159bc:	800d883a 	mov	r6,r16
   159c0:	880f883a 	mov	r7,r17
   159c4:	9009883a 	mov	r4,r18
   159c8:	980b883a 	mov	r5,r19
   159cc:	001e0cc0 	call	1e0cc <__divdf3>
   159d0:	180b883a 	mov	r5,r3
   159d4:	1009883a 	mov	r4,r2
   159d8:	001fe5c0 	call	1fe5c <__fixdfsi>
   159dc:	1009883a 	mov	r4,r2
   159e0:	102b883a 	mov	r21,r2
   159e4:	001fedc0 	call	1fedc <__floatsidf>
   159e8:	800d883a 	mov	r6,r16
   159ec:	880f883a 	mov	r7,r17
   159f0:	1009883a 	mov	r4,r2
   159f4:	180b883a 	mov	r5,r3
   159f8:	001ecf40 	call	1ecf4 <__muldf3>
   159fc:	100d883a 	mov	r6,r2
   15a00:	180f883a 	mov	r7,r3
   15a04:	9009883a 	mov	r4,r18
   15a08:	980b883a 	mov	r5,r19
   15a0c:	001f5600 	call	1f560 <__subdf3>
   15a10:	aa000c04 	addi	r8,r21,48
   15a14:	a2000005 	stb	r8,0(r20)
   15a18:	000d883a 	mov	r6,zero
   15a1c:	01d00934 	movhi	r7,16420
   15a20:	1009883a 	mov	r4,r2
   15a24:	180b883a 	mov	r5,r3
   15a28:	a5c00044 	addi	r23,r20,1
   15a2c:	b53fd91e 	bne	r22,r20,15994 <__alt_data_end+0xfc015994>
   15a30:	100d883a 	mov	r6,r2
   15a34:	180f883a 	mov	r7,r3
   15a38:	1009883a 	mov	r4,r2
   15a3c:	180b883a 	mov	r5,r3
   15a40:	001d8200 	call	1d820 <__adddf3>
   15a44:	100d883a 	mov	r6,r2
   15a48:	180f883a 	mov	r7,r3
   15a4c:	8009883a 	mov	r4,r16
   15a50:	880b883a 	mov	r5,r17
   15a54:	1027883a 	mov	r19,r2
   15a58:	1825883a 	mov	r18,r3
   15a5c:	001ec000 	call	1ec00 <__ledf2>
   15a60:	10000816 	blt	r2,zero,15a84 <_dtoa_r+0x948>
   15a64:	980d883a 	mov	r6,r19
   15a68:	900f883a 	mov	r7,r18
   15a6c:	8009883a 	mov	r4,r16
   15a70:	880b883a 	mov	r5,r17
   15a74:	001ea9c0 	call	1ea9c <__eqdf2>
   15a78:	103f5a1e 	bne	r2,zero,157e4 <__alt_data_end+0xfc0157e4>
   15a7c:	ad40004c 	andi	r21,r21,1
   15a80:	a83f5826 	beq	r21,zero,157e4 <__alt_data_end+0xfc0157e4>
   15a84:	bd3fffc3 	ldbu	r20,-1(r23)
   15a88:	b8bfffc4 	addi	r2,r23,-1
   15a8c:	1007883a 	mov	r3,r2
   15a90:	01400e44 	movi	r5,57
   15a94:	d9800717 	ldw	r6,28(sp)
   15a98:	00000506 	br	15ab0 <_dtoa_r+0x974>
   15a9c:	18ffffc4 	addi	r3,r3,-1
   15aa0:	11824726 	beq	r2,r6,163c0 <_dtoa_r+0x1284>
   15aa4:	1d000003 	ldbu	r20,0(r3)
   15aa8:	102f883a 	mov	r23,r2
   15aac:	10bfffc4 	addi	r2,r2,-1
   15ab0:	a1003fcc 	andi	r4,r20,255
   15ab4:	2100201c 	xori	r4,r4,128
   15ab8:	213fe004 	addi	r4,r4,-128
   15abc:	217ff726 	beq	r4,r5,15a9c <__alt_data_end+0xfc015a9c>
   15ac0:	a2000044 	addi	r8,r20,1
   15ac4:	12000005 	stb	r8,0(r2)
   15ac8:	003f4606 	br	157e4 <__alt_data_end+0xfc0157e4>
   15acc:	d9000b17 	ldw	r4,44(sp)
   15ad0:	2000c826 	beq	r4,zero,15df4 <_dtoa_r+0xcb8>
   15ad4:	d9800317 	ldw	r6,12(sp)
   15ad8:	00c00044 	movi	r3,1
   15adc:	1980f90e 	bge	r3,r6,15ec4 <_dtoa_r+0xd88>
   15ae0:	d8800617 	ldw	r2,24(sp)
   15ae4:	d8c00a17 	ldw	r3,40(sp)
   15ae8:	157fffc4 	addi	r21,r2,-1
   15aec:	1d41f316 	blt	r3,r21,162bc <_dtoa_r+0x1180>
   15af0:	1d6bc83a 	sub	r21,r3,r21
   15af4:	d9c00617 	ldw	r7,24(sp)
   15af8:	3802aa16 	blt	r7,zero,165a4 <_dtoa_r+0x1468>
   15afc:	dd000817 	ldw	r20,32(sp)
   15b00:	d8800617 	ldw	r2,24(sp)
   15b04:	d8c00817 	ldw	r3,32(sp)
   15b08:	01400044 	movi	r5,1
   15b0c:	e009883a 	mov	r4,fp
   15b10:	1887883a 	add	r3,r3,r2
   15b14:	d8c00815 	stw	r3,32(sp)
   15b18:	b0ad883a 	add	r22,r22,r2
   15b1c:	00181ac0 	call	181ac <__i2b>
   15b20:	1023883a 	mov	r17,r2
   15b24:	a0000826 	beq	r20,zero,15b48 <_dtoa_r+0xa0c>
   15b28:	0580070e 	bge	zero,r22,15b48 <_dtoa_r+0xa0c>
   15b2c:	a005883a 	mov	r2,r20
   15b30:	b500b916 	blt	r22,r20,15e18 <_dtoa_r+0xcdc>
   15b34:	d9000817 	ldw	r4,32(sp)
   15b38:	a0a9c83a 	sub	r20,r20,r2
   15b3c:	b0adc83a 	sub	r22,r22,r2
   15b40:	2089c83a 	sub	r4,r4,r2
   15b44:	d9000815 	stw	r4,32(sp)
   15b48:	d9800a17 	ldw	r6,40(sp)
   15b4c:	0181810e 	bge	zero,r6,16154 <_dtoa_r+0x1018>
   15b50:	d9c00b17 	ldw	r7,44(sp)
   15b54:	3800b326 	beq	r7,zero,15e24 <_dtoa_r+0xce8>
   15b58:	a800b226 	beq	r21,zero,15e24 <_dtoa_r+0xce8>
   15b5c:	880b883a 	mov	r5,r17
   15b60:	a80d883a 	mov	r6,r21
   15b64:	e009883a 	mov	r4,fp
   15b68:	00184740 	call	18474 <__pow5mult>
   15b6c:	d9800917 	ldw	r6,36(sp)
   15b70:	100b883a 	mov	r5,r2
   15b74:	e009883a 	mov	r4,fp
   15b78:	1023883a 	mov	r17,r2
   15b7c:	00181e80 	call	181e8 <__multiply>
   15b80:	1021883a 	mov	r16,r2
   15b84:	d8800a17 	ldw	r2,40(sp)
   15b88:	d9400917 	ldw	r5,36(sp)
   15b8c:	e009883a 	mov	r4,fp
   15b90:	1545c83a 	sub	r2,r2,r21
   15b94:	d8800a15 	stw	r2,40(sp)
   15b98:	0017e200 	call	17e20 <_Bfree>
   15b9c:	d8c00a17 	ldw	r3,40(sp)
   15ba0:	18009f1e 	bne	r3,zero,15e20 <_dtoa_r+0xce4>
   15ba4:	05c00044 	movi	r23,1
   15ba8:	e009883a 	mov	r4,fp
   15bac:	b80b883a 	mov	r5,r23
   15bb0:	00181ac0 	call	181ac <__i2b>
   15bb4:	d9000d17 	ldw	r4,52(sp)
   15bb8:	102b883a 	mov	r21,r2
   15bbc:	2000ce26 	beq	r4,zero,15ef8 <_dtoa_r+0xdbc>
   15bc0:	200d883a 	mov	r6,r4
   15bc4:	100b883a 	mov	r5,r2
   15bc8:	e009883a 	mov	r4,fp
   15bcc:	00184740 	call	18474 <__pow5mult>
   15bd0:	d9800317 	ldw	r6,12(sp)
   15bd4:	102b883a 	mov	r21,r2
   15bd8:	b981810e 	bge	r23,r6,161e0 <_dtoa_r+0x10a4>
   15bdc:	0027883a 	mov	r19,zero
   15be0:	a8800417 	ldw	r2,16(r21)
   15be4:	05c00804 	movi	r23,32
   15be8:	10800104 	addi	r2,r2,4
   15bec:	1085883a 	add	r2,r2,r2
   15bf0:	1085883a 	add	r2,r2,r2
   15bf4:	a885883a 	add	r2,r21,r2
   15bf8:	11000017 	ldw	r4,0(r2)
   15bfc:	00180940 	call	18094 <__hi0bits>
   15c00:	b885c83a 	sub	r2,r23,r2
   15c04:	1585883a 	add	r2,r2,r22
   15c08:	108007cc 	andi	r2,r2,31
   15c0c:	1000b326 	beq	r2,zero,15edc <_dtoa_r+0xda0>
   15c10:	00c00804 	movi	r3,32
   15c14:	1887c83a 	sub	r3,r3,r2
   15c18:	01000104 	movi	r4,4
   15c1c:	20c2cd0e 	bge	r4,r3,16754 <_dtoa_r+0x1618>
   15c20:	00c00704 	movi	r3,28
   15c24:	1885c83a 	sub	r2,r3,r2
   15c28:	d8c00817 	ldw	r3,32(sp)
   15c2c:	a0a9883a 	add	r20,r20,r2
   15c30:	b0ad883a 	add	r22,r22,r2
   15c34:	1887883a 	add	r3,r3,r2
   15c38:	d8c00815 	stw	r3,32(sp)
   15c3c:	d9800817 	ldw	r6,32(sp)
   15c40:	0180040e 	bge	zero,r6,15c54 <_dtoa_r+0xb18>
   15c44:	800b883a 	mov	r5,r16
   15c48:	e009883a 	mov	r4,fp
   15c4c:	00185b40 	call	185b4 <__lshift>
   15c50:	1021883a 	mov	r16,r2
   15c54:	0580050e 	bge	zero,r22,15c6c <_dtoa_r+0xb30>
   15c58:	a80b883a 	mov	r5,r21
   15c5c:	b00d883a 	mov	r6,r22
   15c60:	e009883a 	mov	r4,fp
   15c64:	00185b40 	call	185b4 <__lshift>
   15c68:	102b883a 	mov	r21,r2
   15c6c:	d9c00e17 	ldw	r7,56(sp)
   15c70:	3801211e 	bne	r7,zero,160f8 <_dtoa_r+0xfbc>
   15c74:	d9800617 	ldw	r6,24(sp)
   15c78:	0181380e 	bge	zero,r6,1615c <_dtoa_r+0x1020>
   15c7c:	d8c00b17 	ldw	r3,44(sp)
   15c80:	1800ab1e 	bne	r3,zero,15f30 <_dtoa_r+0xdf4>
   15c84:	dc800717 	ldw	r18,28(sp)
   15c88:	dcc00617 	ldw	r19,24(sp)
   15c8c:	9029883a 	mov	r20,r18
   15c90:	00000206 	br	15c9c <_dtoa_r+0xb60>
   15c94:	0017e480 	call	17e48 <__multadd>
   15c98:	1021883a 	mov	r16,r2
   15c9c:	a80b883a 	mov	r5,r21
   15ca0:	8009883a 	mov	r4,r16
   15ca4:	0014f140 	call	14f14 <quorem>
   15ca8:	10800c04 	addi	r2,r2,48
   15cac:	90800005 	stb	r2,0(r18)
   15cb0:	94800044 	addi	r18,r18,1
   15cb4:	9507c83a 	sub	r3,r18,r20
   15cb8:	000f883a 	mov	r7,zero
   15cbc:	01800284 	movi	r6,10
   15cc0:	800b883a 	mov	r5,r16
   15cc4:	e009883a 	mov	r4,fp
   15cc8:	1cfff216 	blt	r3,r19,15c94 <__alt_data_end+0xfc015c94>
   15ccc:	1011883a 	mov	r8,r2
   15cd0:	d8800617 	ldw	r2,24(sp)
   15cd4:	0082370e 	bge	zero,r2,165b4 <_dtoa_r+0x1478>
   15cd8:	d9000717 	ldw	r4,28(sp)
   15cdc:	0025883a 	mov	r18,zero
   15ce0:	20af883a 	add	r23,r4,r2
   15ce4:	01800044 	movi	r6,1
   15ce8:	800b883a 	mov	r5,r16
   15cec:	e009883a 	mov	r4,fp
   15cf0:	da001715 	stw	r8,92(sp)
   15cf4:	00185b40 	call	185b4 <__lshift>
   15cf8:	a80b883a 	mov	r5,r21
   15cfc:	1009883a 	mov	r4,r2
   15d00:	d8800915 	stw	r2,36(sp)
   15d04:	00186fc0 	call	186fc <__mcmp>
   15d08:	da001717 	ldw	r8,92(sp)
   15d0c:	0081800e 	bge	zero,r2,16310 <_dtoa_r+0x11d4>
   15d10:	b93fffc3 	ldbu	r4,-1(r23)
   15d14:	b8bfffc4 	addi	r2,r23,-1
   15d18:	1007883a 	mov	r3,r2
   15d1c:	01800e44 	movi	r6,57
   15d20:	d9c00717 	ldw	r7,28(sp)
   15d24:	00000506 	br	15d3c <_dtoa_r+0xc00>
   15d28:	18ffffc4 	addi	r3,r3,-1
   15d2c:	11c12326 	beq	r2,r7,161bc <_dtoa_r+0x1080>
   15d30:	19000003 	ldbu	r4,0(r3)
   15d34:	102f883a 	mov	r23,r2
   15d38:	10bfffc4 	addi	r2,r2,-1
   15d3c:	21403fcc 	andi	r5,r4,255
   15d40:	2940201c 	xori	r5,r5,128
   15d44:	297fe004 	addi	r5,r5,-128
   15d48:	29bff726 	beq	r5,r6,15d28 <__alt_data_end+0xfc015d28>
   15d4c:	21000044 	addi	r4,r4,1
   15d50:	11000005 	stb	r4,0(r2)
   15d54:	a80b883a 	mov	r5,r21
   15d58:	e009883a 	mov	r4,fp
   15d5c:	0017e200 	call	17e20 <_Bfree>
   15d60:	883ea026 	beq	r17,zero,157e4 <__alt_data_end+0xfc0157e4>
   15d64:	90000426 	beq	r18,zero,15d78 <_dtoa_r+0xc3c>
   15d68:	94400326 	beq	r18,r17,15d78 <_dtoa_r+0xc3c>
   15d6c:	900b883a 	mov	r5,r18
   15d70:	e009883a 	mov	r4,fp
   15d74:	0017e200 	call	17e20 <_Bfree>
   15d78:	880b883a 	mov	r5,r17
   15d7c:	e009883a 	mov	r4,fp
   15d80:	0017e200 	call	17e20 <_Bfree>
   15d84:	003e9706 	br	157e4 <__alt_data_end+0xfc0157e4>
   15d88:	01800044 	movi	r6,1
   15d8c:	d9800e15 	stw	r6,56(sp)
   15d90:	003d9606 	br	153ec <__alt_data_end+0xfc0153ec>
   15d94:	d8800817 	ldw	r2,32(sp)
   15d98:	d8c00517 	ldw	r3,20(sp)
   15d9c:	d8000d15 	stw	zero,52(sp)
   15da0:	10c5c83a 	sub	r2,r2,r3
   15da4:	00c9c83a 	sub	r4,zero,r3
   15da8:	d8800815 	stw	r2,32(sp)
   15dac:	d9000a15 	stw	r4,40(sp)
   15db0:	003d9706 	br	15410 <__alt_data_end+0xfc015410>
   15db4:	05adc83a 	sub	r22,zero,r22
   15db8:	dd800815 	stw	r22,32(sp)
   15dbc:	002d883a 	mov	r22,zero
   15dc0:	003d8e06 	br	153fc <__alt_data_end+0xfc0153fc>
   15dc4:	d9000517 	ldw	r4,20(sp)
   15dc8:	001fedc0 	call	1fedc <__floatsidf>
   15dcc:	100d883a 	mov	r6,r2
   15dd0:	180f883a 	mov	r7,r3
   15dd4:	a009883a 	mov	r4,r20
   15dd8:	880b883a 	mov	r5,r17
   15ddc:	001ea9c0 	call	1ea9c <__eqdf2>
   15de0:	103d7126 	beq	r2,zero,153a8 <__alt_data_end+0xfc0153a8>
   15de4:	d9c00517 	ldw	r7,20(sp)
   15de8:	39ffffc4 	addi	r7,r7,-1
   15dec:	d9c00515 	stw	r7,20(sp)
   15df0:	003d6d06 	br	153a8 <__alt_data_end+0xfc0153a8>
   15df4:	dd400a17 	ldw	r21,40(sp)
   15df8:	dd000817 	ldw	r20,32(sp)
   15dfc:	0023883a 	mov	r17,zero
   15e00:	003f4806 	br	15b24 <__alt_data_end+0xfc015b24>
   15e04:	10e3c83a 	sub	r17,r2,r3
   15e08:	9448983a 	sll	r4,r18,r17
   15e0c:	003d3206 	br	152d8 <__alt_data_end+0xfc0152d8>
   15e10:	d8000e15 	stw	zero,56(sp)
   15e14:	003d7506 	br	153ec <__alt_data_end+0xfc0153ec>
   15e18:	b005883a 	mov	r2,r22
   15e1c:	003f4506 	br	15b34 <__alt_data_end+0xfc015b34>
   15e20:	dc000915 	stw	r16,36(sp)
   15e24:	d9800a17 	ldw	r6,40(sp)
   15e28:	d9400917 	ldw	r5,36(sp)
   15e2c:	e009883a 	mov	r4,fp
   15e30:	00184740 	call	18474 <__pow5mult>
   15e34:	1021883a 	mov	r16,r2
   15e38:	003f5a06 	br	15ba4 <__alt_data_end+0xfc015ba4>
   15e3c:	01c00044 	movi	r7,1
   15e40:	d9c00b15 	stw	r7,44(sp)
   15e44:	d8802217 	ldw	r2,136(sp)
   15e48:	0081280e 	bge	zero,r2,162ec <_dtoa_r+0x11b0>
   15e4c:	100d883a 	mov	r6,r2
   15e50:	1021883a 	mov	r16,r2
   15e54:	d8800c15 	stw	r2,48(sp)
   15e58:	d8800615 	stw	r2,24(sp)
   15e5c:	003d8806 	br	15480 <__alt_data_end+0xfc015480>
   15e60:	d8800617 	ldw	r2,24(sp)
   15e64:	00be9b16 	blt	zero,r2,158d4 <__alt_data_end+0xfc0158d4>
   15e68:	10010f1e 	bne	r2,zero,162a8 <_dtoa_r+0x116c>
   15e6c:	880b883a 	mov	r5,r17
   15e70:	000d883a 	mov	r6,zero
   15e74:	01d00534 	movhi	r7,16404
   15e78:	8009883a 	mov	r4,r16
   15e7c:	001ecf40 	call	1ecf4 <__muldf3>
   15e80:	900d883a 	mov	r6,r18
   15e84:	980f883a 	mov	r7,r19
   15e88:	1009883a 	mov	r4,r2
   15e8c:	180b883a 	mov	r5,r3
   15e90:	001eb240 	call	1eb24 <__gedf2>
   15e94:	002b883a 	mov	r21,zero
   15e98:	0023883a 	mov	r17,zero
   15e9c:	1000bf16 	blt	r2,zero,1619c <_dtoa_r+0x1060>
   15ea0:	d9802217 	ldw	r6,136(sp)
   15ea4:	ddc00717 	ldw	r23,28(sp)
   15ea8:	018c303a 	nor	r6,zero,r6
   15eac:	d9800515 	stw	r6,20(sp)
   15eb0:	a80b883a 	mov	r5,r21
   15eb4:	e009883a 	mov	r4,fp
   15eb8:	0017e200 	call	17e20 <_Bfree>
   15ebc:	883e4926 	beq	r17,zero,157e4 <__alt_data_end+0xfc0157e4>
   15ec0:	003fad06 	br	15d78 <__alt_data_end+0xfc015d78>
   15ec4:	d9c01117 	ldw	r7,68(sp)
   15ec8:	3801bc26 	beq	r7,zero,165bc <_dtoa_r+0x1480>
   15ecc:	10810cc4 	addi	r2,r2,1075
   15ed0:	dd400a17 	ldw	r21,40(sp)
   15ed4:	dd000817 	ldw	r20,32(sp)
   15ed8:	003f0a06 	br	15b04 <__alt_data_end+0xfc015b04>
   15edc:	00800704 	movi	r2,28
   15ee0:	d9000817 	ldw	r4,32(sp)
   15ee4:	a0a9883a 	add	r20,r20,r2
   15ee8:	b0ad883a 	add	r22,r22,r2
   15eec:	2089883a 	add	r4,r4,r2
   15ef0:	d9000815 	stw	r4,32(sp)
   15ef4:	003f5106 	br	15c3c <__alt_data_end+0xfc015c3c>
   15ef8:	d8c00317 	ldw	r3,12(sp)
   15efc:	b8c1fc0e 	bge	r23,r3,166f0 <_dtoa_r+0x15b4>
   15f00:	0027883a 	mov	r19,zero
   15f04:	b805883a 	mov	r2,r23
   15f08:	003f3e06 	br	15c04 <__alt_data_end+0xfc015c04>
   15f0c:	880b883a 	mov	r5,r17
   15f10:	e009883a 	mov	r4,fp
   15f14:	000f883a 	mov	r7,zero
   15f18:	01800284 	movi	r6,10
   15f1c:	0017e480 	call	17e48 <__multadd>
   15f20:	d9000c17 	ldw	r4,48(sp)
   15f24:	1023883a 	mov	r17,r2
   15f28:	0102040e 	bge	zero,r4,1673c <_dtoa_r+0x1600>
   15f2c:	d9000615 	stw	r4,24(sp)
   15f30:	0500050e 	bge	zero,r20,15f48 <_dtoa_r+0xe0c>
   15f34:	880b883a 	mov	r5,r17
   15f38:	a00d883a 	mov	r6,r20
   15f3c:	e009883a 	mov	r4,fp
   15f40:	00185b40 	call	185b4 <__lshift>
   15f44:	1023883a 	mov	r17,r2
   15f48:	9801241e 	bne	r19,zero,163dc <_dtoa_r+0x12a0>
   15f4c:	8829883a 	mov	r20,r17
   15f50:	d9000617 	ldw	r4,24(sp)
   15f54:	dcc00717 	ldw	r19,28(sp)
   15f58:	9480004c 	andi	r18,r18,1
   15f5c:	20bfffc4 	addi	r2,r4,-1
   15f60:	9885883a 	add	r2,r19,r2
   15f64:	d8800415 	stw	r2,16(sp)
   15f68:	dc800615 	stw	r18,24(sp)
   15f6c:	a80b883a 	mov	r5,r21
   15f70:	8009883a 	mov	r4,r16
   15f74:	0014f140 	call	14f14 <quorem>
   15f78:	880b883a 	mov	r5,r17
   15f7c:	8009883a 	mov	r4,r16
   15f80:	102f883a 	mov	r23,r2
   15f84:	00186fc0 	call	186fc <__mcmp>
   15f88:	a80b883a 	mov	r5,r21
   15f8c:	a00d883a 	mov	r6,r20
   15f90:	e009883a 	mov	r4,fp
   15f94:	102d883a 	mov	r22,r2
   15f98:	001875c0 	call	1875c <__mdiff>
   15f9c:	1007883a 	mov	r3,r2
   15fa0:	10800317 	ldw	r2,12(r2)
   15fa4:	bc800c04 	addi	r18,r23,48
   15fa8:	180b883a 	mov	r5,r3
   15fac:	10004e1e 	bne	r2,zero,160e8 <_dtoa_r+0xfac>
   15fb0:	8009883a 	mov	r4,r16
   15fb4:	d8c01615 	stw	r3,88(sp)
   15fb8:	00186fc0 	call	186fc <__mcmp>
   15fbc:	d8c01617 	ldw	r3,88(sp)
   15fc0:	e009883a 	mov	r4,fp
   15fc4:	d8801615 	stw	r2,88(sp)
   15fc8:	180b883a 	mov	r5,r3
   15fcc:	0017e200 	call	17e20 <_Bfree>
   15fd0:	d8801617 	ldw	r2,88(sp)
   15fd4:	1000041e 	bne	r2,zero,15fe8 <_dtoa_r+0xeac>
   15fd8:	d9800317 	ldw	r6,12(sp)
   15fdc:	3000021e 	bne	r6,zero,15fe8 <_dtoa_r+0xeac>
   15fe0:	d8c00617 	ldw	r3,24(sp)
   15fe4:	18003726 	beq	r3,zero,160c4 <_dtoa_r+0xf88>
   15fe8:	b0002016 	blt	r22,zero,1606c <_dtoa_r+0xf30>
   15fec:	b000041e 	bne	r22,zero,16000 <_dtoa_r+0xec4>
   15ff0:	d9000317 	ldw	r4,12(sp)
   15ff4:	2000021e 	bne	r4,zero,16000 <_dtoa_r+0xec4>
   15ff8:	d8c00617 	ldw	r3,24(sp)
   15ffc:	18001b26 	beq	r3,zero,1606c <_dtoa_r+0xf30>
   16000:	00810716 	blt	zero,r2,16420 <_dtoa_r+0x12e4>
   16004:	d8c00417 	ldw	r3,16(sp)
   16008:	9d800044 	addi	r22,r19,1
   1600c:	9c800005 	stb	r18,0(r19)
   16010:	b02f883a 	mov	r23,r22
   16014:	98c10626 	beq	r19,r3,16430 <_dtoa_r+0x12f4>
   16018:	800b883a 	mov	r5,r16
   1601c:	000f883a 	mov	r7,zero
   16020:	01800284 	movi	r6,10
   16024:	e009883a 	mov	r4,fp
   16028:	0017e480 	call	17e48 <__multadd>
   1602c:	1021883a 	mov	r16,r2
   16030:	000f883a 	mov	r7,zero
   16034:	01800284 	movi	r6,10
   16038:	880b883a 	mov	r5,r17
   1603c:	e009883a 	mov	r4,fp
   16040:	8d002526 	beq	r17,r20,160d8 <_dtoa_r+0xf9c>
   16044:	0017e480 	call	17e48 <__multadd>
   16048:	a00b883a 	mov	r5,r20
   1604c:	000f883a 	mov	r7,zero
   16050:	01800284 	movi	r6,10
   16054:	e009883a 	mov	r4,fp
   16058:	1023883a 	mov	r17,r2
   1605c:	0017e480 	call	17e48 <__multadd>
   16060:	1029883a 	mov	r20,r2
   16064:	b027883a 	mov	r19,r22
   16068:	003fc006 	br	15f6c <__alt_data_end+0xfc015f6c>
   1606c:	9011883a 	mov	r8,r18
   16070:	00800e0e 	bge	zero,r2,160ac <_dtoa_r+0xf70>
   16074:	800b883a 	mov	r5,r16
   16078:	01800044 	movi	r6,1
   1607c:	e009883a 	mov	r4,fp
   16080:	da001715 	stw	r8,92(sp)
   16084:	00185b40 	call	185b4 <__lshift>
   16088:	a80b883a 	mov	r5,r21
   1608c:	1009883a 	mov	r4,r2
   16090:	1021883a 	mov	r16,r2
   16094:	00186fc0 	call	186fc <__mcmp>
   16098:	da001717 	ldw	r8,92(sp)
   1609c:	0081960e 	bge	zero,r2,166f8 <_dtoa_r+0x15bc>
   160a0:	00800e44 	movi	r2,57
   160a4:	40817026 	beq	r8,r2,16668 <_dtoa_r+0x152c>
   160a8:	ba000c44 	addi	r8,r23,49
   160ac:	8825883a 	mov	r18,r17
   160b0:	9dc00044 	addi	r23,r19,1
   160b4:	9a000005 	stb	r8,0(r19)
   160b8:	a023883a 	mov	r17,r20
   160bc:	dc000915 	stw	r16,36(sp)
   160c0:	003f2406 	br	15d54 <__alt_data_end+0xfc015d54>
   160c4:	00800e44 	movi	r2,57
   160c8:	9011883a 	mov	r8,r18
   160cc:	90816626 	beq	r18,r2,16668 <_dtoa_r+0x152c>
   160d0:	05bff516 	blt	zero,r22,160a8 <__alt_data_end+0xfc0160a8>
   160d4:	003ff506 	br	160ac <__alt_data_end+0xfc0160ac>
   160d8:	0017e480 	call	17e48 <__multadd>
   160dc:	1023883a 	mov	r17,r2
   160e0:	1029883a 	mov	r20,r2
   160e4:	003fdf06 	br	16064 <__alt_data_end+0xfc016064>
   160e8:	e009883a 	mov	r4,fp
   160ec:	0017e200 	call	17e20 <_Bfree>
   160f0:	00800044 	movi	r2,1
   160f4:	003fbc06 	br	15fe8 <__alt_data_end+0xfc015fe8>
   160f8:	a80b883a 	mov	r5,r21
   160fc:	8009883a 	mov	r4,r16
   16100:	00186fc0 	call	186fc <__mcmp>
   16104:	103edb0e 	bge	r2,zero,15c74 <__alt_data_end+0xfc015c74>
   16108:	800b883a 	mov	r5,r16
   1610c:	000f883a 	mov	r7,zero
   16110:	01800284 	movi	r6,10
   16114:	e009883a 	mov	r4,fp
   16118:	0017e480 	call	17e48 <__multadd>
   1611c:	1021883a 	mov	r16,r2
   16120:	d8800517 	ldw	r2,20(sp)
   16124:	d8c00b17 	ldw	r3,44(sp)
   16128:	10bfffc4 	addi	r2,r2,-1
   1612c:	d8800515 	stw	r2,20(sp)
   16130:	183f761e 	bne	r3,zero,15f0c <__alt_data_end+0xfc015f0c>
   16134:	d9000c17 	ldw	r4,48(sp)
   16138:	0101730e 	bge	zero,r4,16708 <_dtoa_r+0x15cc>
   1613c:	d9000615 	stw	r4,24(sp)
   16140:	003ed006 	br	15c84 <__alt_data_end+0xfc015c84>
   16144:	00800084 	movi	r2,2
   16148:	3081861e 	bne	r6,r2,16764 <_dtoa_r+0x1628>
   1614c:	d8000b15 	stw	zero,44(sp)
   16150:	003f3c06 	br	15e44 <__alt_data_end+0xfc015e44>
   16154:	dc000917 	ldw	r16,36(sp)
   16158:	003e9206 	br	15ba4 <__alt_data_end+0xfc015ba4>
   1615c:	d9c00317 	ldw	r7,12(sp)
   16160:	00800084 	movi	r2,2
   16164:	11fec50e 	bge	r2,r7,15c7c <__alt_data_end+0xfc015c7c>
   16168:	d9000617 	ldw	r4,24(sp)
   1616c:	20013c1e 	bne	r4,zero,16660 <_dtoa_r+0x1524>
   16170:	a80b883a 	mov	r5,r21
   16174:	000f883a 	mov	r7,zero
   16178:	01800144 	movi	r6,5
   1617c:	e009883a 	mov	r4,fp
   16180:	0017e480 	call	17e48 <__multadd>
   16184:	100b883a 	mov	r5,r2
   16188:	8009883a 	mov	r4,r16
   1618c:	102b883a 	mov	r21,r2
   16190:	00186fc0 	call	186fc <__mcmp>
   16194:	dc000915 	stw	r16,36(sp)
   16198:	00bf410e 	bge	zero,r2,15ea0 <__alt_data_end+0xfc015ea0>
   1619c:	d9c00717 	ldw	r7,28(sp)
   161a0:	00800c44 	movi	r2,49
   161a4:	38800005 	stb	r2,0(r7)
   161a8:	d8800517 	ldw	r2,20(sp)
   161ac:	3dc00044 	addi	r23,r7,1
   161b0:	10800044 	addi	r2,r2,1
   161b4:	d8800515 	stw	r2,20(sp)
   161b8:	003f3d06 	br	15eb0 <__alt_data_end+0xfc015eb0>
   161bc:	d9800517 	ldw	r6,20(sp)
   161c0:	d9c00717 	ldw	r7,28(sp)
   161c4:	00800c44 	movi	r2,49
   161c8:	31800044 	addi	r6,r6,1
   161cc:	d9800515 	stw	r6,20(sp)
   161d0:	38800005 	stb	r2,0(r7)
   161d4:	003edf06 	br	15d54 <__alt_data_end+0xfc015d54>
   161d8:	d8000b15 	stw	zero,44(sp)
   161dc:	003c9f06 	br	1545c <__alt_data_end+0xfc01545c>
   161e0:	903e7e1e 	bne	r18,zero,15bdc <__alt_data_end+0xfc015bdc>
   161e4:	00800434 	movhi	r2,16
   161e8:	10bfffc4 	addi	r2,r2,-1
   161ec:	9884703a 	and	r2,r19,r2
   161f0:	1000ea1e 	bne	r2,zero,1659c <_dtoa_r+0x1460>
   161f4:	9cdffc2c 	andhi	r19,r19,32752
   161f8:	9800e826 	beq	r19,zero,1659c <_dtoa_r+0x1460>
   161fc:	d9c00817 	ldw	r7,32(sp)
   16200:	b5800044 	addi	r22,r22,1
   16204:	04c00044 	movi	r19,1
   16208:	39c00044 	addi	r7,r7,1
   1620c:	d9c00815 	stw	r7,32(sp)
   16210:	d8800d17 	ldw	r2,52(sp)
   16214:	103e721e 	bne	r2,zero,15be0 <__alt_data_end+0xfc015be0>
   16218:	00800044 	movi	r2,1
   1621c:	003e7906 	br	15c04 <__alt_data_end+0xfc015c04>
   16220:	8009883a 	mov	r4,r16
   16224:	001fedc0 	call	1fedc <__floatsidf>
   16228:	d9800f17 	ldw	r6,60(sp)
   1622c:	d9c01017 	ldw	r7,64(sp)
   16230:	1009883a 	mov	r4,r2
   16234:	180b883a 	mov	r5,r3
   16238:	001ecf40 	call	1ecf4 <__muldf3>
   1623c:	000d883a 	mov	r6,zero
   16240:	01d00734 	movhi	r7,16412
   16244:	1009883a 	mov	r4,r2
   16248:	180b883a 	mov	r5,r3
   1624c:	001d8200 	call	1d820 <__adddf3>
   16250:	047f3034 	movhi	r17,64704
   16254:	1021883a 	mov	r16,r2
   16258:	1c63883a 	add	r17,r3,r17
   1625c:	d9000f17 	ldw	r4,60(sp)
   16260:	d9401017 	ldw	r5,64(sp)
   16264:	000d883a 	mov	r6,zero
   16268:	01d00534 	movhi	r7,16404
   1626c:	001f5600 	call	1f560 <__subdf3>
   16270:	800d883a 	mov	r6,r16
   16274:	880f883a 	mov	r7,r17
   16278:	1009883a 	mov	r4,r2
   1627c:	180b883a 	mov	r5,r3
   16280:	102b883a 	mov	r21,r2
   16284:	1829883a 	mov	r20,r3
   16288:	001eb240 	call	1eb24 <__gedf2>
   1628c:	00806c16 	blt	zero,r2,16440 <_dtoa_r+0x1304>
   16290:	89e0003c 	xorhi	r7,r17,32768
   16294:	800d883a 	mov	r6,r16
   16298:	a809883a 	mov	r4,r21
   1629c:	a00b883a 	mov	r5,r20
   162a0:	001ec000 	call	1ec00 <__ledf2>
   162a4:	103d7e0e 	bge	r2,zero,158a0 <__alt_data_end+0xfc0158a0>
   162a8:	002b883a 	mov	r21,zero
   162ac:	0023883a 	mov	r17,zero
   162b0:	003efb06 	br	15ea0 <__alt_data_end+0xfc015ea0>
   162b4:	d8800717 	ldw	r2,28(sp)
   162b8:	003bd006 	br	151fc <__alt_data_end+0xfc0151fc>
   162bc:	d9000a17 	ldw	r4,40(sp)
   162c0:	d9800d17 	ldw	r6,52(sp)
   162c4:	dd400a15 	stw	r21,40(sp)
   162c8:	a905c83a 	sub	r2,r21,r4
   162cc:	308d883a 	add	r6,r6,r2
   162d0:	d9800d15 	stw	r6,52(sp)
   162d4:	002b883a 	mov	r21,zero
   162d8:	003e0606 	br	15af4 <__alt_data_end+0xfc015af4>
   162dc:	9023883a 	mov	r17,r18
   162e0:	9829883a 	mov	r20,r19
   162e4:	04000084 	movi	r16,2
   162e8:	003c9206 	br	15534 <__alt_data_end+0xfc015534>
   162ec:	04000044 	movi	r16,1
   162f0:	dc000c15 	stw	r16,48(sp)
   162f4:	dc000615 	stw	r16,24(sp)
   162f8:	dc002215 	stw	r16,136(sp)
   162fc:	e0001115 	stw	zero,68(fp)
   16300:	000b883a 	mov	r5,zero
   16304:	003c6906 	br	154ac <__alt_data_end+0xfc0154ac>
   16308:	3021883a 	mov	r16,r6
   1630c:	003ffb06 	br	162fc <__alt_data_end+0xfc0162fc>
   16310:	1000021e 	bne	r2,zero,1631c <_dtoa_r+0x11e0>
   16314:	4200004c 	andi	r8,r8,1
   16318:	403e7d1e 	bne	r8,zero,15d10 <__alt_data_end+0xfc015d10>
   1631c:	01000c04 	movi	r4,48
   16320:	00000106 	br	16328 <_dtoa_r+0x11ec>
   16324:	102f883a 	mov	r23,r2
   16328:	b8bfffc4 	addi	r2,r23,-1
   1632c:	10c00007 	ldb	r3,0(r2)
   16330:	193ffc26 	beq	r3,r4,16324 <__alt_data_end+0xfc016324>
   16334:	003e8706 	br	15d54 <__alt_data_end+0xfc015d54>
   16338:	d8800517 	ldw	r2,20(sp)
   1633c:	00a3c83a 	sub	r17,zero,r2
   16340:	8800a426 	beq	r17,zero,165d4 <_dtoa_r+0x1498>
   16344:	888003cc 	andi	r2,r17,15
   16348:	100490fa 	slli	r2,r2,3
   1634c:	00c000f4 	movhi	r3,3
   16350:	18eef504 	addi	r3,r3,-17452
   16354:	1885883a 	add	r2,r3,r2
   16358:	11800017 	ldw	r6,0(r2)
   1635c:	11c00117 	ldw	r7,4(r2)
   16360:	9009883a 	mov	r4,r18
   16364:	980b883a 	mov	r5,r19
   16368:	8823d13a 	srai	r17,r17,4
   1636c:	001ecf40 	call	1ecf4 <__muldf3>
   16370:	d8800f15 	stw	r2,60(sp)
   16374:	d8c01015 	stw	r3,64(sp)
   16378:	8800e826 	beq	r17,zero,1671c <_dtoa_r+0x15e0>
   1637c:	050000f4 	movhi	r20,3
   16380:	a52eeb04 	addi	r20,r20,-17492
   16384:	04000084 	movi	r16,2
   16388:	8980004c 	andi	r6,r17,1
   1638c:	1009883a 	mov	r4,r2
   16390:	8823d07a 	srai	r17,r17,1
   16394:	180b883a 	mov	r5,r3
   16398:	30000426 	beq	r6,zero,163ac <_dtoa_r+0x1270>
   1639c:	a1800017 	ldw	r6,0(r20)
   163a0:	a1c00117 	ldw	r7,4(r20)
   163a4:	84000044 	addi	r16,r16,1
   163a8:	001ecf40 	call	1ecf4 <__muldf3>
   163ac:	a5000204 	addi	r20,r20,8
   163b0:	883ff51e 	bne	r17,zero,16388 <__alt_data_end+0xfc016388>
   163b4:	d8800f15 	stw	r2,60(sp)
   163b8:	d8c01015 	stw	r3,64(sp)
   163bc:	003c7606 	br	15598 <__alt_data_end+0xfc015598>
   163c0:	00c00c04 	movi	r3,48
   163c4:	10c00005 	stb	r3,0(r2)
   163c8:	d8c00517 	ldw	r3,20(sp)
   163cc:	bd3fffc3 	ldbu	r20,-1(r23)
   163d0:	18c00044 	addi	r3,r3,1
   163d4:	d8c00515 	stw	r3,20(sp)
   163d8:	003db906 	br	15ac0 <__alt_data_end+0xfc015ac0>
   163dc:	89400117 	ldw	r5,4(r17)
   163e0:	e009883a 	mov	r4,fp
   163e4:	0017d780 	call	17d78 <_Balloc>
   163e8:	89800417 	ldw	r6,16(r17)
   163ec:	89400304 	addi	r5,r17,12
   163f0:	11000304 	addi	r4,r2,12
   163f4:	31800084 	addi	r6,r6,2
   163f8:	318d883a 	add	r6,r6,r6
   163fc:	318d883a 	add	r6,r6,r6
   16400:	1027883a 	mov	r19,r2
   16404:	000fde80 	call	fde8 <memcpy>
   16408:	01800044 	movi	r6,1
   1640c:	980b883a 	mov	r5,r19
   16410:	e009883a 	mov	r4,fp
   16414:	00185b40 	call	185b4 <__lshift>
   16418:	1029883a 	mov	r20,r2
   1641c:	003ecc06 	br	15f50 <__alt_data_end+0xfc015f50>
   16420:	00800e44 	movi	r2,57
   16424:	90809026 	beq	r18,r2,16668 <_dtoa_r+0x152c>
   16428:	92000044 	addi	r8,r18,1
   1642c:	003f1f06 	br	160ac <__alt_data_end+0xfc0160ac>
   16430:	9011883a 	mov	r8,r18
   16434:	8825883a 	mov	r18,r17
   16438:	a023883a 	mov	r17,r20
   1643c:	003e2906 	br	15ce4 <__alt_data_end+0xfc015ce4>
   16440:	002b883a 	mov	r21,zero
   16444:	0023883a 	mov	r17,zero
   16448:	003f5406 	br	1619c <__alt_data_end+0xfc01619c>
   1644c:	61bfffc4 	addi	r6,r12,-1
   16450:	300490fa 	slli	r2,r6,3
   16454:	00c000f4 	movhi	r3,3
   16458:	18eef504 	addi	r3,r3,-17452
   1645c:	1885883a 	add	r2,r3,r2
   16460:	11000017 	ldw	r4,0(r2)
   16464:	11400117 	ldw	r5,4(r2)
   16468:	d8800717 	ldw	r2,28(sp)
   1646c:	880f883a 	mov	r7,r17
   16470:	d9801215 	stw	r6,72(sp)
   16474:	800d883a 	mov	r6,r16
   16478:	db001615 	stw	r12,88(sp)
   1647c:	15c00044 	addi	r23,r2,1
   16480:	001ecf40 	call	1ecf4 <__muldf3>
   16484:	d9401017 	ldw	r5,64(sp)
   16488:	d9000f17 	ldw	r4,60(sp)
   1648c:	d8c01515 	stw	r3,84(sp)
   16490:	d8801415 	stw	r2,80(sp)
   16494:	001fe5c0 	call	1fe5c <__fixdfsi>
   16498:	1009883a 	mov	r4,r2
   1649c:	1021883a 	mov	r16,r2
   164a0:	001fedc0 	call	1fedc <__floatsidf>
   164a4:	d9000f17 	ldw	r4,60(sp)
   164a8:	d9401017 	ldw	r5,64(sp)
   164ac:	100d883a 	mov	r6,r2
   164b0:	180f883a 	mov	r7,r3
   164b4:	001f5600 	call	1f560 <__subdf3>
   164b8:	1829883a 	mov	r20,r3
   164bc:	d8c00717 	ldw	r3,28(sp)
   164c0:	84000c04 	addi	r16,r16,48
   164c4:	1023883a 	mov	r17,r2
   164c8:	1c000005 	stb	r16,0(r3)
   164cc:	db001617 	ldw	r12,88(sp)
   164d0:	00800044 	movi	r2,1
   164d4:	60802226 	beq	r12,r2,16560 <_dtoa_r+0x1424>
   164d8:	d9c00717 	ldw	r7,28(sp)
   164dc:	8805883a 	mov	r2,r17
   164e0:	b82b883a 	mov	r21,r23
   164e4:	3b19883a 	add	r12,r7,r12
   164e8:	6023883a 	mov	r17,r12
   164ec:	a007883a 	mov	r3,r20
   164f0:	dc800f15 	stw	r18,60(sp)
   164f4:	000d883a 	mov	r6,zero
   164f8:	01d00934 	movhi	r7,16420
   164fc:	1009883a 	mov	r4,r2
   16500:	180b883a 	mov	r5,r3
   16504:	001ecf40 	call	1ecf4 <__muldf3>
   16508:	180b883a 	mov	r5,r3
   1650c:	1009883a 	mov	r4,r2
   16510:	1829883a 	mov	r20,r3
   16514:	1025883a 	mov	r18,r2
   16518:	001fe5c0 	call	1fe5c <__fixdfsi>
   1651c:	1009883a 	mov	r4,r2
   16520:	1021883a 	mov	r16,r2
   16524:	001fedc0 	call	1fedc <__floatsidf>
   16528:	100d883a 	mov	r6,r2
   1652c:	180f883a 	mov	r7,r3
   16530:	9009883a 	mov	r4,r18
   16534:	a00b883a 	mov	r5,r20
   16538:	84000c04 	addi	r16,r16,48
   1653c:	001f5600 	call	1f560 <__subdf3>
   16540:	ad400044 	addi	r21,r21,1
   16544:	ac3fffc5 	stb	r16,-1(r21)
   16548:	ac7fea1e 	bne	r21,r17,164f4 <__alt_data_end+0xfc0164f4>
   1654c:	1023883a 	mov	r17,r2
   16550:	d8801217 	ldw	r2,72(sp)
   16554:	dc800f17 	ldw	r18,60(sp)
   16558:	1829883a 	mov	r20,r3
   1655c:	b8af883a 	add	r23,r23,r2
   16560:	d9001417 	ldw	r4,80(sp)
   16564:	d9401517 	ldw	r5,84(sp)
   16568:	000d883a 	mov	r6,zero
   1656c:	01cff834 	movhi	r7,16352
   16570:	001d8200 	call	1d820 <__adddf3>
   16574:	880d883a 	mov	r6,r17
   16578:	a00f883a 	mov	r7,r20
   1657c:	1009883a 	mov	r4,r2
   16580:	180b883a 	mov	r5,r3
   16584:	001ec000 	call	1ec00 <__ledf2>
   16588:	10003e0e 	bge	r2,zero,16684 <_dtoa_r+0x1548>
   1658c:	d9001317 	ldw	r4,76(sp)
   16590:	bd3fffc3 	ldbu	r20,-1(r23)
   16594:	d9000515 	stw	r4,20(sp)
   16598:	003d3b06 	br	15a88 <__alt_data_end+0xfc015a88>
   1659c:	0027883a 	mov	r19,zero
   165a0:	003f1b06 	br	16210 <__alt_data_end+0xfc016210>
   165a4:	d8800817 	ldw	r2,32(sp)
   165a8:	11e9c83a 	sub	r20,r2,r7
   165ac:	0005883a 	mov	r2,zero
   165b0:	003d5406 	br	15b04 <__alt_data_end+0xfc015b04>
   165b4:	00800044 	movi	r2,1
   165b8:	003dc706 	br	15cd8 <__alt_data_end+0xfc015cd8>
   165bc:	d8c00217 	ldw	r3,8(sp)
   165c0:	00800d84 	movi	r2,54
   165c4:	dd400a17 	ldw	r21,40(sp)
   165c8:	10c5c83a 	sub	r2,r2,r3
   165cc:	dd000817 	ldw	r20,32(sp)
   165d0:	003d4c06 	br	15b04 <__alt_data_end+0xfc015b04>
   165d4:	dc800f15 	stw	r18,60(sp)
   165d8:	dcc01015 	stw	r19,64(sp)
   165dc:	04000084 	movi	r16,2
   165e0:	003bed06 	br	15598 <__alt_data_end+0xfc015598>
   165e4:	d9000617 	ldw	r4,24(sp)
   165e8:	203f0d26 	beq	r4,zero,16220 <__alt_data_end+0xfc016220>
   165ec:	d9800c17 	ldw	r6,48(sp)
   165f0:	01bcab0e 	bge	zero,r6,158a0 <__alt_data_end+0xfc0158a0>
   165f4:	d9401017 	ldw	r5,64(sp)
   165f8:	d9000f17 	ldw	r4,60(sp)
   165fc:	000d883a 	mov	r6,zero
   16600:	01d00934 	movhi	r7,16420
   16604:	001ecf40 	call	1ecf4 <__muldf3>
   16608:	81000044 	addi	r4,r16,1
   1660c:	d8800f15 	stw	r2,60(sp)
   16610:	d8c01015 	stw	r3,64(sp)
   16614:	001fedc0 	call	1fedc <__floatsidf>
   16618:	d9800f17 	ldw	r6,60(sp)
   1661c:	d9c01017 	ldw	r7,64(sp)
   16620:	1009883a 	mov	r4,r2
   16624:	180b883a 	mov	r5,r3
   16628:	001ecf40 	call	1ecf4 <__muldf3>
   1662c:	01d00734 	movhi	r7,16412
   16630:	000d883a 	mov	r6,zero
   16634:	1009883a 	mov	r4,r2
   16638:	180b883a 	mov	r5,r3
   1663c:	001d8200 	call	1d820 <__adddf3>
   16640:	d9c00517 	ldw	r7,20(sp)
   16644:	047f3034 	movhi	r17,64704
   16648:	1021883a 	mov	r16,r2
   1664c:	39ffffc4 	addi	r7,r7,-1
   16650:	d9c01315 	stw	r7,76(sp)
   16654:	1c63883a 	add	r17,r3,r17
   16658:	db000c17 	ldw	r12,48(sp)
   1665c:	003bea06 	br	15608 <__alt_data_end+0xfc015608>
   16660:	dc000915 	stw	r16,36(sp)
   16664:	003e0e06 	br	15ea0 <__alt_data_end+0xfc015ea0>
   16668:	01000e44 	movi	r4,57
   1666c:	8825883a 	mov	r18,r17
   16670:	9dc00044 	addi	r23,r19,1
   16674:	99000005 	stb	r4,0(r19)
   16678:	a023883a 	mov	r17,r20
   1667c:	dc000915 	stw	r16,36(sp)
   16680:	003da406 	br	15d14 <__alt_data_end+0xfc015d14>
   16684:	d9801417 	ldw	r6,80(sp)
   16688:	d9c01517 	ldw	r7,84(sp)
   1668c:	0009883a 	mov	r4,zero
   16690:	014ff834 	movhi	r5,16352
   16694:	001f5600 	call	1f560 <__subdf3>
   16698:	880d883a 	mov	r6,r17
   1669c:	a00f883a 	mov	r7,r20
   166a0:	1009883a 	mov	r4,r2
   166a4:	180b883a 	mov	r5,r3
   166a8:	001eb240 	call	1eb24 <__gedf2>
   166ac:	00bc7c0e 	bge	zero,r2,158a0 <__alt_data_end+0xfc0158a0>
   166b0:	01000c04 	movi	r4,48
   166b4:	00000106 	br	166bc <_dtoa_r+0x1580>
   166b8:	102f883a 	mov	r23,r2
   166bc:	b8bfffc4 	addi	r2,r23,-1
   166c0:	10c00007 	ldb	r3,0(r2)
   166c4:	193ffc26 	beq	r3,r4,166b8 <__alt_data_end+0xfc0166b8>
   166c8:	d9801317 	ldw	r6,76(sp)
   166cc:	d9800515 	stw	r6,20(sp)
   166d0:	003c4406 	br	157e4 <__alt_data_end+0xfc0157e4>
   166d4:	d9801317 	ldw	r6,76(sp)
   166d8:	d9800515 	stw	r6,20(sp)
   166dc:	003cea06 	br	15a88 <__alt_data_end+0xfc015a88>
   166e0:	dd800f17 	ldw	r22,60(sp)
   166e4:	dcc01017 	ldw	r19,64(sp)
   166e8:	dc801217 	ldw	r18,72(sp)
   166ec:	003c6c06 	br	158a0 <__alt_data_end+0xfc0158a0>
   166f0:	903e031e 	bne	r18,zero,15f00 <__alt_data_end+0xfc015f00>
   166f4:	003ebb06 	br	161e4 <__alt_data_end+0xfc0161e4>
   166f8:	103e6c1e 	bne	r2,zero,160ac <__alt_data_end+0xfc0160ac>
   166fc:	4080004c 	andi	r2,r8,1
   16700:	103e6a26 	beq	r2,zero,160ac <__alt_data_end+0xfc0160ac>
   16704:	003e6606 	br	160a0 <__alt_data_end+0xfc0160a0>
   16708:	d8c00317 	ldw	r3,12(sp)
   1670c:	00800084 	movi	r2,2
   16710:	10c02916 	blt	r2,r3,167b8 <_dtoa_r+0x167c>
   16714:	d9000c17 	ldw	r4,48(sp)
   16718:	003e8806 	br	1613c <__alt_data_end+0xfc01613c>
   1671c:	04000084 	movi	r16,2
   16720:	003b9d06 	br	15598 <__alt_data_end+0xfc015598>
   16724:	d9001317 	ldw	r4,76(sp)
   16728:	d9000515 	stw	r4,20(sp)
   1672c:	003cd606 	br	15a88 <__alt_data_end+0xfc015a88>
   16730:	d8801317 	ldw	r2,76(sp)
   16734:	d8800515 	stw	r2,20(sp)
   16738:	003c2a06 	br	157e4 <__alt_data_end+0xfc0157e4>
   1673c:	d9800317 	ldw	r6,12(sp)
   16740:	00800084 	movi	r2,2
   16744:	11801516 	blt	r2,r6,1679c <_dtoa_r+0x1660>
   16748:	d9c00c17 	ldw	r7,48(sp)
   1674c:	d9c00615 	stw	r7,24(sp)
   16750:	003df706 	br	15f30 <__alt_data_end+0xfc015f30>
   16754:	193d3926 	beq	r3,r4,15c3c <__alt_data_end+0xfc015c3c>
   16758:	00c00f04 	movi	r3,60
   1675c:	1885c83a 	sub	r2,r3,r2
   16760:	003ddf06 	br	15ee0 <__alt_data_end+0xfc015ee0>
   16764:	e009883a 	mov	r4,fp
   16768:	e0001115 	stw	zero,68(fp)
   1676c:	000b883a 	mov	r5,zero
   16770:	0017d780 	call	17d78 <_Balloc>
   16774:	d8800715 	stw	r2,28(sp)
   16778:	d8c00717 	ldw	r3,28(sp)
   1677c:	00bfffc4 	movi	r2,-1
   16780:	01000044 	movi	r4,1
   16784:	d8800c15 	stw	r2,48(sp)
   16788:	e0c01015 	stw	r3,64(fp)
   1678c:	d9000b15 	stw	r4,44(sp)
   16790:	d8800615 	stw	r2,24(sp)
   16794:	d8002215 	stw	zero,136(sp)
   16798:	003c4106 	br	158a0 <__alt_data_end+0xfc0158a0>
   1679c:	d8c00c17 	ldw	r3,48(sp)
   167a0:	d8c00615 	stw	r3,24(sp)
   167a4:	003e7006 	br	16168 <__alt_data_end+0xfc016168>
   167a8:	04400044 	movi	r17,1
   167ac:	003b2006 	br	15430 <__alt_data_end+0xfc015430>
   167b0:	000b883a 	mov	r5,zero
   167b4:	003b3d06 	br	154ac <__alt_data_end+0xfc0154ac>
   167b8:	d8800c17 	ldw	r2,48(sp)
   167bc:	d8800615 	stw	r2,24(sp)
   167c0:	003e6906 	br	16168 <__alt_data_end+0xfc016168>

000167c4 <__sflush_r>:
   167c4:	2880030b 	ldhu	r2,12(r5)
   167c8:	defffb04 	addi	sp,sp,-20
   167cc:	dcc00315 	stw	r19,12(sp)
   167d0:	dc400115 	stw	r17,4(sp)
   167d4:	dfc00415 	stw	ra,16(sp)
   167d8:	dc800215 	stw	r18,8(sp)
   167dc:	dc000015 	stw	r16,0(sp)
   167e0:	10c0020c 	andi	r3,r2,8
   167e4:	2823883a 	mov	r17,r5
   167e8:	2027883a 	mov	r19,r4
   167ec:	1800311e 	bne	r3,zero,168b4 <__sflush_r+0xf0>
   167f0:	28c00117 	ldw	r3,4(r5)
   167f4:	10820014 	ori	r2,r2,2048
   167f8:	2880030d 	sth	r2,12(r5)
   167fc:	00c04b0e 	bge	zero,r3,1692c <__sflush_r+0x168>
   16800:	8a000a17 	ldw	r8,40(r17)
   16804:	40002326 	beq	r8,zero,16894 <__sflush_r+0xd0>
   16808:	9c000017 	ldw	r16,0(r19)
   1680c:	10c4000c 	andi	r3,r2,4096
   16810:	98000015 	stw	zero,0(r19)
   16814:	18004826 	beq	r3,zero,16938 <__sflush_r+0x174>
   16818:	89801417 	ldw	r6,80(r17)
   1681c:	10c0010c 	andi	r3,r2,4
   16820:	18000626 	beq	r3,zero,1683c <__sflush_r+0x78>
   16824:	88c00117 	ldw	r3,4(r17)
   16828:	88800c17 	ldw	r2,48(r17)
   1682c:	30cdc83a 	sub	r6,r6,r3
   16830:	10000226 	beq	r2,zero,1683c <__sflush_r+0x78>
   16834:	88800f17 	ldw	r2,60(r17)
   16838:	308dc83a 	sub	r6,r6,r2
   1683c:	89400717 	ldw	r5,28(r17)
   16840:	000f883a 	mov	r7,zero
   16844:	9809883a 	mov	r4,r19
   16848:	403ee83a 	callr	r8
   1684c:	00ffffc4 	movi	r3,-1
   16850:	10c04426 	beq	r2,r3,16964 <__sflush_r+0x1a0>
   16854:	88c0030b 	ldhu	r3,12(r17)
   16858:	89000417 	ldw	r4,16(r17)
   1685c:	88000115 	stw	zero,4(r17)
   16860:	197dffcc 	andi	r5,r3,63487
   16864:	8940030d 	sth	r5,12(r17)
   16868:	89000015 	stw	r4,0(r17)
   1686c:	18c4000c 	andi	r3,r3,4096
   16870:	18002c1e 	bne	r3,zero,16924 <__sflush_r+0x160>
   16874:	89400c17 	ldw	r5,48(r17)
   16878:	9c000015 	stw	r16,0(r19)
   1687c:	28000526 	beq	r5,zero,16894 <__sflush_r+0xd0>
   16880:	88801004 	addi	r2,r17,64
   16884:	28800226 	beq	r5,r2,16890 <__sflush_r+0xcc>
   16888:	9809883a 	mov	r4,r19
   1688c:	0016f400 	call	16f40 <_free_r>
   16890:	88000c15 	stw	zero,48(r17)
   16894:	0005883a 	mov	r2,zero
   16898:	dfc00417 	ldw	ra,16(sp)
   1689c:	dcc00317 	ldw	r19,12(sp)
   168a0:	dc800217 	ldw	r18,8(sp)
   168a4:	dc400117 	ldw	r17,4(sp)
   168a8:	dc000017 	ldw	r16,0(sp)
   168ac:	dec00504 	addi	sp,sp,20
   168b0:	f800283a 	ret
   168b4:	2c800417 	ldw	r18,16(r5)
   168b8:	903ff626 	beq	r18,zero,16894 <__alt_data_end+0xfc016894>
   168bc:	2c000017 	ldw	r16,0(r5)
   168c0:	108000cc 	andi	r2,r2,3
   168c4:	2c800015 	stw	r18,0(r5)
   168c8:	84a1c83a 	sub	r16,r16,r18
   168cc:	1000131e 	bne	r2,zero,1691c <__sflush_r+0x158>
   168d0:	28800517 	ldw	r2,20(r5)
   168d4:	88800215 	stw	r2,8(r17)
   168d8:	04000316 	blt	zero,r16,168e8 <__sflush_r+0x124>
   168dc:	003fed06 	br	16894 <__alt_data_end+0xfc016894>
   168e0:	90a5883a 	add	r18,r18,r2
   168e4:	043feb0e 	bge	zero,r16,16894 <__alt_data_end+0xfc016894>
   168e8:	88800917 	ldw	r2,36(r17)
   168ec:	89400717 	ldw	r5,28(r17)
   168f0:	800f883a 	mov	r7,r16
   168f4:	900d883a 	mov	r6,r18
   168f8:	9809883a 	mov	r4,r19
   168fc:	103ee83a 	callr	r2
   16900:	80a1c83a 	sub	r16,r16,r2
   16904:	00bff616 	blt	zero,r2,168e0 <__alt_data_end+0xfc0168e0>
   16908:	88c0030b 	ldhu	r3,12(r17)
   1690c:	00bfffc4 	movi	r2,-1
   16910:	18c01014 	ori	r3,r3,64
   16914:	88c0030d 	sth	r3,12(r17)
   16918:	003fdf06 	br	16898 <__alt_data_end+0xfc016898>
   1691c:	0005883a 	mov	r2,zero
   16920:	003fec06 	br	168d4 <__alt_data_end+0xfc0168d4>
   16924:	88801415 	stw	r2,80(r17)
   16928:	003fd206 	br	16874 <__alt_data_end+0xfc016874>
   1692c:	28c00f17 	ldw	r3,60(r5)
   16930:	00ffb316 	blt	zero,r3,16800 <__alt_data_end+0xfc016800>
   16934:	003fd706 	br	16894 <__alt_data_end+0xfc016894>
   16938:	89400717 	ldw	r5,28(r17)
   1693c:	000d883a 	mov	r6,zero
   16940:	01c00044 	movi	r7,1
   16944:	9809883a 	mov	r4,r19
   16948:	403ee83a 	callr	r8
   1694c:	100d883a 	mov	r6,r2
   16950:	00bfffc4 	movi	r2,-1
   16954:	30801426 	beq	r6,r2,169a8 <__sflush_r+0x1e4>
   16958:	8880030b 	ldhu	r2,12(r17)
   1695c:	8a000a17 	ldw	r8,40(r17)
   16960:	003fae06 	br	1681c <__alt_data_end+0xfc01681c>
   16964:	98c00017 	ldw	r3,0(r19)
   16968:	183fba26 	beq	r3,zero,16854 <__alt_data_end+0xfc016854>
   1696c:	01000744 	movi	r4,29
   16970:	19000626 	beq	r3,r4,1698c <__sflush_r+0x1c8>
   16974:	01000584 	movi	r4,22
   16978:	19000426 	beq	r3,r4,1698c <__sflush_r+0x1c8>
   1697c:	88c0030b 	ldhu	r3,12(r17)
   16980:	18c01014 	ori	r3,r3,64
   16984:	88c0030d 	sth	r3,12(r17)
   16988:	003fc306 	br	16898 <__alt_data_end+0xfc016898>
   1698c:	8880030b 	ldhu	r2,12(r17)
   16990:	88c00417 	ldw	r3,16(r17)
   16994:	88000115 	stw	zero,4(r17)
   16998:	10bdffcc 	andi	r2,r2,63487
   1699c:	8880030d 	sth	r2,12(r17)
   169a0:	88c00015 	stw	r3,0(r17)
   169a4:	003fb306 	br	16874 <__alt_data_end+0xfc016874>
   169a8:	98800017 	ldw	r2,0(r19)
   169ac:	103fea26 	beq	r2,zero,16958 <__alt_data_end+0xfc016958>
   169b0:	00c00744 	movi	r3,29
   169b4:	10c00226 	beq	r2,r3,169c0 <__sflush_r+0x1fc>
   169b8:	00c00584 	movi	r3,22
   169bc:	10c0031e 	bne	r2,r3,169cc <__sflush_r+0x208>
   169c0:	9c000015 	stw	r16,0(r19)
   169c4:	0005883a 	mov	r2,zero
   169c8:	003fb306 	br	16898 <__alt_data_end+0xfc016898>
   169cc:	88c0030b 	ldhu	r3,12(r17)
   169d0:	3005883a 	mov	r2,r6
   169d4:	18c01014 	ori	r3,r3,64
   169d8:	88c0030d 	sth	r3,12(r17)
   169dc:	003fae06 	br	16898 <__alt_data_end+0xfc016898>

000169e0 <_fflush_r>:
   169e0:	defffd04 	addi	sp,sp,-12
   169e4:	dc000115 	stw	r16,4(sp)
   169e8:	dfc00215 	stw	ra,8(sp)
   169ec:	2021883a 	mov	r16,r4
   169f0:	20000226 	beq	r4,zero,169fc <_fflush_r+0x1c>
   169f4:	20800e17 	ldw	r2,56(r4)
   169f8:	10000c26 	beq	r2,zero,16a2c <_fflush_r+0x4c>
   169fc:	2880030f 	ldh	r2,12(r5)
   16a00:	1000051e 	bne	r2,zero,16a18 <_fflush_r+0x38>
   16a04:	0005883a 	mov	r2,zero
   16a08:	dfc00217 	ldw	ra,8(sp)
   16a0c:	dc000117 	ldw	r16,4(sp)
   16a10:	dec00304 	addi	sp,sp,12
   16a14:	f800283a 	ret
   16a18:	8009883a 	mov	r4,r16
   16a1c:	dfc00217 	ldw	ra,8(sp)
   16a20:	dc000117 	ldw	r16,4(sp)
   16a24:	dec00304 	addi	sp,sp,12
   16a28:	00167c41 	jmpi	167c4 <__sflush_r>
   16a2c:	d9400015 	stw	r5,0(sp)
   16a30:	0016dcc0 	call	16dcc <__sinit>
   16a34:	d9400017 	ldw	r5,0(sp)
   16a38:	003ff006 	br	169fc <__alt_data_end+0xfc0169fc>

00016a3c <fflush>:
   16a3c:	20000526 	beq	r4,zero,16a54 <fflush+0x18>
   16a40:	008000f4 	movhi	r2,3
   16a44:	10bbbb04 	addi	r2,r2,-4372
   16a48:	200b883a 	mov	r5,r4
   16a4c:	11000017 	ldw	r4,0(r2)
   16a50:	00169e01 	jmpi	169e0 <_fflush_r>
   16a54:	008000f4 	movhi	r2,3
   16a58:	10bbba04 	addi	r2,r2,-4376
   16a5c:	11000017 	ldw	r4,0(r2)
   16a60:	01400074 	movhi	r5,1
   16a64:	295a7804 	addi	r5,r5,27104
   16a68:	00177dc1 	jmpi	177dc <_fwalk_reent>

00016a6c <__fp_unlock>:
   16a6c:	0005883a 	mov	r2,zero
   16a70:	f800283a 	ret

00016a74 <_cleanup_r>:
   16a74:	014000b4 	movhi	r5,2
   16a78:	29717f04 	addi	r5,r5,-14852
   16a7c:	00177dc1 	jmpi	177dc <_fwalk_reent>

00016a80 <__sinit.part.1>:
   16a80:	defff704 	addi	sp,sp,-36
   16a84:	00c00074 	movhi	r3,1
   16a88:	dfc00815 	stw	ra,32(sp)
   16a8c:	ddc00715 	stw	r23,28(sp)
   16a90:	dd800615 	stw	r22,24(sp)
   16a94:	dd400515 	stw	r21,20(sp)
   16a98:	dd000415 	stw	r20,16(sp)
   16a9c:	dcc00315 	stw	r19,12(sp)
   16aa0:	dc800215 	stw	r18,8(sp)
   16aa4:	dc400115 	stw	r17,4(sp)
   16aa8:	dc000015 	stw	r16,0(sp)
   16aac:	18da9d04 	addi	r3,r3,27252
   16ab0:	24000117 	ldw	r16,4(r4)
   16ab4:	20c00f15 	stw	r3,60(r4)
   16ab8:	2080bb04 	addi	r2,r4,748
   16abc:	00c000c4 	movi	r3,3
   16ac0:	20c0b915 	stw	r3,740(r4)
   16ac4:	2080ba15 	stw	r2,744(r4)
   16ac8:	2000b815 	stw	zero,736(r4)
   16acc:	05c00204 	movi	r23,8
   16ad0:	00800104 	movi	r2,4
   16ad4:	2025883a 	mov	r18,r4
   16ad8:	b80d883a 	mov	r6,r23
   16adc:	81001704 	addi	r4,r16,92
   16ae0:	000b883a 	mov	r5,zero
   16ae4:	80000015 	stw	zero,0(r16)
   16ae8:	80000115 	stw	zero,4(r16)
   16aec:	80000215 	stw	zero,8(r16)
   16af0:	8080030d 	sth	r2,12(r16)
   16af4:	80001915 	stw	zero,100(r16)
   16af8:	8000038d 	sth	zero,14(r16)
   16afc:	80000415 	stw	zero,16(r16)
   16b00:	80000515 	stw	zero,20(r16)
   16b04:	80000615 	stw	zero,24(r16)
   16b08:	000ff300 	call	ff30 <memset>
   16b0c:	058000b4 	movhi	r22,2
   16b10:	94400217 	ldw	r17,8(r18)
   16b14:	054000b4 	movhi	r21,2
   16b18:	050000b4 	movhi	r20,2
   16b1c:	04c000b4 	movhi	r19,2
   16b20:	b5a55c04 	addi	r22,r22,-27280
   16b24:	ad657304 	addi	r21,r21,-27188
   16b28:	a5259204 	addi	r20,r20,-27064
   16b2c:	9ce5a904 	addi	r19,r19,-26972
   16b30:	85800815 	stw	r22,32(r16)
   16b34:	85400915 	stw	r21,36(r16)
   16b38:	85000a15 	stw	r20,40(r16)
   16b3c:	84c00b15 	stw	r19,44(r16)
   16b40:	84000715 	stw	r16,28(r16)
   16b44:	00800284 	movi	r2,10
   16b48:	8880030d 	sth	r2,12(r17)
   16b4c:	00800044 	movi	r2,1
   16b50:	b80d883a 	mov	r6,r23
   16b54:	89001704 	addi	r4,r17,92
   16b58:	000b883a 	mov	r5,zero
   16b5c:	88000015 	stw	zero,0(r17)
   16b60:	88000115 	stw	zero,4(r17)
   16b64:	88000215 	stw	zero,8(r17)
   16b68:	88001915 	stw	zero,100(r17)
   16b6c:	8880038d 	sth	r2,14(r17)
   16b70:	88000415 	stw	zero,16(r17)
   16b74:	88000515 	stw	zero,20(r17)
   16b78:	88000615 	stw	zero,24(r17)
   16b7c:	000ff300 	call	ff30 <memset>
   16b80:	94000317 	ldw	r16,12(r18)
   16b84:	00800484 	movi	r2,18
   16b88:	8c400715 	stw	r17,28(r17)
   16b8c:	8d800815 	stw	r22,32(r17)
   16b90:	8d400915 	stw	r21,36(r17)
   16b94:	8d000a15 	stw	r20,40(r17)
   16b98:	8cc00b15 	stw	r19,44(r17)
   16b9c:	8080030d 	sth	r2,12(r16)
   16ba0:	00800084 	movi	r2,2
   16ba4:	80000015 	stw	zero,0(r16)
   16ba8:	80000115 	stw	zero,4(r16)
   16bac:	80000215 	stw	zero,8(r16)
   16bb0:	80001915 	stw	zero,100(r16)
   16bb4:	8080038d 	sth	r2,14(r16)
   16bb8:	80000415 	stw	zero,16(r16)
   16bbc:	80000515 	stw	zero,20(r16)
   16bc0:	80000615 	stw	zero,24(r16)
   16bc4:	b80d883a 	mov	r6,r23
   16bc8:	000b883a 	mov	r5,zero
   16bcc:	81001704 	addi	r4,r16,92
   16bd0:	000ff300 	call	ff30 <memset>
   16bd4:	00800044 	movi	r2,1
   16bd8:	84000715 	stw	r16,28(r16)
   16bdc:	85800815 	stw	r22,32(r16)
   16be0:	85400915 	stw	r21,36(r16)
   16be4:	85000a15 	stw	r20,40(r16)
   16be8:	84c00b15 	stw	r19,44(r16)
   16bec:	90800e15 	stw	r2,56(r18)
   16bf0:	dfc00817 	ldw	ra,32(sp)
   16bf4:	ddc00717 	ldw	r23,28(sp)
   16bf8:	dd800617 	ldw	r22,24(sp)
   16bfc:	dd400517 	ldw	r21,20(sp)
   16c00:	dd000417 	ldw	r20,16(sp)
   16c04:	dcc00317 	ldw	r19,12(sp)
   16c08:	dc800217 	ldw	r18,8(sp)
   16c0c:	dc400117 	ldw	r17,4(sp)
   16c10:	dc000017 	ldw	r16,0(sp)
   16c14:	dec00904 	addi	sp,sp,36
   16c18:	f800283a 	ret

00016c1c <__fp_lock>:
   16c1c:	0005883a 	mov	r2,zero
   16c20:	f800283a 	ret

00016c24 <__sfmoreglue>:
   16c24:	defffc04 	addi	sp,sp,-16
   16c28:	dc800215 	stw	r18,8(sp)
   16c2c:	2825883a 	mov	r18,r5
   16c30:	dc000015 	stw	r16,0(sp)
   16c34:	01401a04 	movi	r5,104
   16c38:	2021883a 	mov	r16,r4
   16c3c:	913fffc4 	addi	r4,r18,-1
   16c40:	dfc00315 	stw	ra,12(sp)
   16c44:	dc400115 	stw	r17,4(sp)
   16c48:	000d9380 	call	d938 <__mulsi3>
   16c4c:	8009883a 	mov	r4,r16
   16c50:	11401d04 	addi	r5,r2,116
   16c54:	1023883a 	mov	r17,r2
   16c58:	000f5dc0 	call	f5dc <_malloc_r>
   16c5c:	1021883a 	mov	r16,r2
   16c60:	10000726 	beq	r2,zero,16c80 <__sfmoreglue+0x5c>
   16c64:	11000304 	addi	r4,r2,12
   16c68:	10000015 	stw	zero,0(r2)
   16c6c:	14800115 	stw	r18,4(r2)
   16c70:	11000215 	stw	r4,8(r2)
   16c74:	89801a04 	addi	r6,r17,104
   16c78:	000b883a 	mov	r5,zero
   16c7c:	000ff300 	call	ff30 <memset>
   16c80:	8005883a 	mov	r2,r16
   16c84:	dfc00317 	ldw	ra,12(sp)
   16c88:	dc800217 	ldw	r18,8(sp)
   16c8c:	dc400117 	ldw	r17,4(sp)
   16c90:	dc000017 	ldw	r16,0(sp)
   16c94:	dec00404 	addi	sp,sp,16
   16c98:	f800283a 	ret

00016c9c <__sfp>:
   16c9c:	defffb04 	addi	sp,sp,-20
   16ca0:	dc000015 	stw	r16,0(sp)
   16ca4:	040000f4 	movhi	r16,3
   16ca8:	843bba04 	addi	r16,r16,-4376
   16cac:	dcc00315 	stw	r19,12(sp)
   16cb0:	2027883a 	mov	r19,r4
   16cb4:	81000017 	ldw	r4,0(r16)
   16cb8:	dfc00415 	stw	ra,16(sp)
   16cbc:	dc800215 	stw	r18,8(sp)
   16cc0:	20800e17 	ldw	r2,56(r4)
   16cc4:	dc400115 	stw	r17,4(sp)
   16cc8:	1000021e 	bne	r2,zero,16cd4 <__sfp+0x38>
   16ccc:	0016a800 	call	16a80 <__sinit.part.1>
   16cd0:	81000017 	ldw	r4,0(r16)
   16cd4:	2480b804 	addi	r18,r4,736
   16cd8:	047fffc4 	movi	r17,-1
   16cdc:	91000117 	ldw	r4,4(r18)
   16ce0:	94000217 	ldw	r16,8(r18)
   16ce4:	213fffc4 	addi	r4,r4,-1
   16ce8:	20000a16 	blt	r4,zero,16d14 <__sfp+0x78>
   16cec:	8080030f 	ldh	r2,12(r16)
   16cf0:	10000c26 	beq	r2,zero,16d24 <__sfp+0x88>
   16cf4:	80c01d04 	addi	r3,r16,116
   16cf8:	00000206 	br	16d04 <__sfp+0x68>
   16cfc:	18bfe60f 	ldh	r2,-104(r3)
   16d00:	10000826 	beq	r2,zero,16d24 <__sfp+0x88>
   16d04:	213fffc4 	addi	r4,r4,-1
   16d08:	1c3ffd04 	addi	r16,r3,-12
   16d0c:	18c01a04 	addi	r3,r3,104
   16d10:	247ffa1e 	bne	r4,r17,16cfc <__alt_data_end+0xfc016cfc>
   16d14:	90800017 	ldw	r2,0(r18)
   16d18:	10001d26 	beq	r2,zero,16d90 <__sfp+0xf4>
   16d1c:	1025883a 	mov	r18,r2
   16d20:	003fee06 	br	16cdc <__alt_data_end+0xfc016cdc>
   16d24:	00bfffc4 	movi	r2,-1
   16d28:	8080038d 	sth	r2,14(r16)
   16d2c:	00800044 	movi	r2,1
   16d30:	8080030d 	sth	r2,12(r16)
   16d34:	80001915 	stw	zero,100(r16)
   16d38:	80000015 	stw	zero,0(r16)
   16d3c:	80000215 	stw	zero,8(r16)
   16d40:	80000115 	stw	zero,4(r16)
   16d44:	80000415 	stw	zero,16(r16)
   16d48:	80000515 	stw	zero,20(r16)
   16d4c:	80000615 	stw	zero,24(r16)
   16d50:	01800204 	movi	r6,8
   16d54:	000b883a 	mov	r5,zero
   16d58:	81001704 	addi	r4,r16,92
   16d5c:	000ff300 	call	ff30 <memset>
   16d60:	8005883a 	mov	r2,r16
   16d64:	80000c15 	stw	zero,48(r16)
   16d68:	80000d15 	stw	zero,52(r16)
   16d6c:	80001115 	stw	zero,68(r16)
   16d70:	80001215 	stw	zero,72(r16)
   16d74:	dfc00417 	ldw	ra,16(sp)
   16d78:	dcc00317 	ldw	r19,12(sp)
   16d7c:	dc800217 	ldw	r18,8(sp)
   16d80:	dc400117 	ldw	r17,4(sp)
   16d84:	dc000017 	ldw	r16,0(sp)
   16d88:	dec00504 	addi	sp,sp,20
   16d8c:	f800283a 	ret
   16d90:	01400104 	movi	r5,4
   16d94:	9809883a 	mov	r4,r19
   16d98:	0016c240 	call	16c24 <__sfmoreglue>
   16d9c:	90800015 	stw	r2,0(r18)
   16da0:	103fde1e 	bne	r2,zero,16d1c <__alt_data_end+0xfc016d1c>
   16da4:	00800304 	movi	r2,12
   16da8:	98800015 	stw	r2,0(r19)
   16dac:	0005883a 	mov	r2,zero
   16db0:	003ff006 	br	16d74 <__alt_data_end+0xfc016d74>

00016db4 <_cleanup>:
   16db4:	008000f4 	movhi	r2,3
   16db8:	10bbba04 	addi	r2,r2,-4376
   16dbc:	11000017 	ldw	r4,0(r2)
   16dc0:	014000b4 	movhi	r5,2
   16dc4:	29717f04 	addi	r5,r5,-14852
   16dc8:	00177dc1 	jmpi	177dc <_fwalk_reent>

00016dcc <__sinit>:
   16dcc:	20800e17 	ldw	r2,56(r4)
   16dd0:	10000126 	beq	r2,zero,16dd8 <__sinit+0xc>
   16dd4:	f800283a 	ret
   16dd8:	0016a801 	jmpi	16a80 <__sinit.part.1>

00016ddc <__sfp_lock_acquire>:
   16ddc:	f800283a 	ret

00016de0 <__sfp_lock_release>:
   16de0:	f800283a 	ret

00016de4 <__sinit_lock_acquire>:
   16de4:	f800283a 	ret

00016de8 <__sinit_lock_release>:
   16de8:	f800283a 	ret

00016dec <__fp_lock_all>:
   16dec:	008000f4 	movhi	r2,3
   16df0:	10bbbb04 	addi	r2,r2,-4372
   16df4:	11000017 	ldw	r4,0(r2)
   16df8:	01400074 	movhi	r5,1
   16dfc:	295b0704 	addi	r5,r5,27676
   16e00:	00177181 	jmpi	17718 <_fwalk>

00016e04 <__fp_unlock_all>:
   16e04:	008000f4 	movhi	r2,3
   16e08:	10bbbb04 	addi	r2,r2,-4372
   16e0c:	11000017 	ldw	r4,0(r2)
   16e10:	01400074 	movhi	r5,1
   16e14:	295a9b04 	addi	r5,r5,27244
   16e18:	00177181 	jmpi	17718 <_fwalk>

00016e1c <_malloc_trim_r>:
   16e1c:	defffb04 	addi	sp,sp,-20
   16e20:	dcc00315 	stw	r19,12(sp)
   16e24:	04c000f4 	movhi	r19,3
   16e28:	dc800215 	stw	r18,8(sp)
   16e2c:	dc400115 	stw	r17,4(sp)
   16e30:	dc000015 	stw	r16,0(sp)
   16e34:	dfc00415 	stw	ra,16(sp)
   16e38:	2821883a 	mov	r16,r5
   16e3c:	9cf05804 	addi	r19,r19,-16032
   16e40:	2025883a 	mov	r18,r4
   16e44:	00207bc0 	call	207bc <__malloc_lock>
   16e48:	98800217 	ldw	r2,8(r19)
   16e4c:	14400117 	ldw	r17,4(r2)
   16e50:	00bfff04 	movi	r2,-4
   16e54:	88a2703a 	and	r17,r17,r2
   16e58:	8c21c83a 	sub	r16,r17,r16
   16e5c:	8403fbc4 	addi	r16,r16,4079
   16e60:	8020d33a 	srli	r16,r16,12
   16e64:	0083ffc4 	movi	r2,4095
   16e68:	843fffc4 	addi	r16,r16,-1
   16e6c:	8020933a 	slli	r16,r16,12
   16e70:	1400060e 	bge	r2,r16,16e8c <_malloc_trim_r+0x70>
   16e74:	000b883a 	mov	r5,zero
   16e78:	9009883a 	mov	r4,r18
   16e7c:	00101b80 	call	101b8 <_sbrk_r>
   16e80:	98c00217 	ldw	r3,8(r19)
   16e84:	1c47883a 	add	r3,r3,r17
   16e88:	10c00a26 	beq	r2,r3,16eb4 <_malloc_trim_r+0x98>
   16e8c:	9009883a 	mov	r4,r18
   16e90:	00207e00 	call	207e0 <__malloc_unlock>
   16e94:	0005883a 	mov	r2,zero
   16e98:	dfc00417 	ldw	ra,16(sp)
   16e9c:	dcc00317 	ldw	r19,12(sp)
   16ea0:	dc800217 	ldw	r18,8(sp)
   16ea4:	dc400117 	ldw	r17,4(sp)
   16ea8:	dc000017 	ldw	r16,0(sp)
   16eac:	dec00504 	addi	sp,sp,20
   16eb0:	f800283a 	ret
   16eb4:	040bc83a 	sub	r5,zero,r16
   16eb8:	9009883a 	mov	r4,r18
   16ebc:	00101b80 	call	101b8 <_sbrk_r>
   16ec0:	00ffffc4 	movi	r3,-1
   16ec4:	10c00d26 	beq	r2,r3,16efc <_malloc_trim_r+0xe0>
   16ec8:	00c000f4 	movhi	r3,3
   16ecc:	18c8ad04 	addi	r3,r3,8884
   16ed0:	18800017 	ldw	r2,0(r3)
   16ed4:	99000217 	ldw	r4,8(r19)
   16ed8:	8c23c83a 	sub	r17,r17,r16
   16edc:	8c400054 	ori	r17,r17,1
   16ee0:	1421c83a 	sub	r16,r2,r16
   16ee4:	24400115 	stw	r17,4(r4)
   16ee8:	9009883a 	mov	r4,r18
   16eec:	1c000015 	stw	r16,0(r3)
   16ef0:	00207e00 	call	207e0 <__malloc_unlock>
   16ef4:	00800044 	movi	r2,1
   16ef8:	003fe706 	br	16e98 <__alt_data_end+0xfc016e98>
   16efc:	000b883a 	mov	r5,zero
   16f00:	9009883a 	mov	r4,r18
   16f04:	00101b80 	call	101b8 <_sbrk_r>
   16f08:	99000217 	ldw	r4,8(r19)
   16f0c:	014003c4 	movi	r5,15
   16f10:	1107c83a 	sub	r3,r2,r4
   16f14:	28ffdd0e 	bge	r5,r3,16e8c <__alt_data_end+0xfc016e8c>
   16f18:	014000f4 	movhi	r5,3
   16f1c:	297bbc04 	addi	r5,r5,-4368
   16f20:	29400017 	ldw	r5,0(r5)
   16f24:	18c00054 	ori	r3,r3,1
   16f28:	20c00115 	stw	r3,4(r4)
   16f2c:	00c000f4 	movhi	r3,3
   16f30:	1145c83a 	sub	r2,r2,r5
   16f34:	18c8ad04 	addi	r3,r3,8884
   16f38:	18800015 	stw	r2,0(r3)
   16f3c:	003fd306 	br	16e8c <__alt_data_end+0xfc016e8c>

00016f40 <_free_r>:
   16f40:	28004126 	beq	r5,zero,17048 <_free_r+0x108>
   16f44:	defffd04 	addi	sp,sp,-12
   16f48:	dc400115 	stw	r17,4(sp)
   16f4c:	dc000015 	stw	r16,0(sp)
   16f50:	2023883a 	mov	r17,r4
   16f54:	2821883a 	mov	r16,r5
   16f58:	dfc00215 	stw	ra,8(sp)
   16f5c:	00207bc0 	call	207bc <__malloc_lock>
   16f60:	81ffff17 	ldw	r7,-4(r16)
   16f64:	00bfff84 	movi	r2,-2
   16f68:	010000f4 	movhi	r4,3
   16f6c:	81bffe04 	addi	r6,r16,-8
   16f70:	3884703a 	and	r2,r7,r2
   16f74:	21305804 	addi	r4,r4,-16032
   16f78:	308b883a 	add	r5,r6,r2
   16f7c:	2a400117 	ldw	r9,4(r5)
   16f80:	22000217 	ldw	r8,8(r4)
   16f84:	00ffff04 	movi	r3,-4
   16f88:	48c6703a 	and	r3,r9,r3
   16f8c:	2a005726 	beq	r5,r8,170ec <_free_r+0x1ac>
   16f90:	28c00115 	stw	r3,4(r5)
   16f94:	39c0004c 	andi	r7,r7,1
   16f98:	3800091e 	bne	r7,zero,16fc0 <_free_r+0x80>
   16f9c:	823ffe17 	ldw	r8,-8(r16)
   16fa0:	22400204 	addi	r9,r4,8
   16fa4:	320dc83a 	sub	r6,r6,r8
   16fa8:	31c00217 	ldw	r7,8(r6)
   16fac:	1205883a 	add	r2,r2,r8
   16fb0:	3a406526 	beq	r7,r9,17148 <_free_r+0x208>
   16fb4:	32000317 	ldw	r8,12(r6)
   16fb8:	3a000315 	stw	r8,12(r7)
   16fbc:	41c00215 	stw	r7,8(r8)
   16fc0:	28cf883a 	add	r7,r5,r3
   16fc4:	39c00117 	ldw	r7,4(r7)
   16fc8:	39c0004c 	andi	r7,r7,1
   16fcc:	38003a26 	beq	r7,zero,170b8 <_free_r+0x178>
   16fd0:	10c00054 	ori	r3,r2,1
   16fd4:	30c00115 	stw	r3,4(r6)
   16fd8:	3087883a 	add	r3,r6,r2
   16fdc:	18800015 	stw	r2,0(r3)
   16fe0:	00c07fc4 	movi	r3,511
   16fe4:	18801936 	bltu	r3,r2,1704c <_free_r+0x10c>
   16fe8:	1004d0fa 	srli	r2,r2,3
   16fec:	01c00044 	movi	r7,1
   16ff0:	21400117 	ldw	r5,4(r4)
   16ff4:	10c00044 	addi	r3,r2,1
   16ff8:	18c7883a 	add	r3,r3,r3
   16ffc:	1005d0ba 	srai	r2,r2,2
   17000:	18c7883a 	add	r3,r3,r3
   17004:	18c7883a 	add	r3,r3,r3
   17008:	1907883a 	add	r3,r3,r4
   1700c:	3884983a 	sll	r2,r7,r2
   17010:	19c00017 	ldw	r7,0(r3)
   17014:	1a3ffe04 	addi	r8,r3,-8
   17018:	1144b03a 	or	r2,r2,r5
   1701c:	32000315 	stw	r8,12(r6)
   17020:	31c00215 	stw	r7,8(r6)
   17024:	20800115 	stw	r2,4(r4)
   17028:	19800015 	stw	r6,0(r3)
   1702c:	39800315 	stw	r6,12(r7)
   17030:	8809883a 	mov	r4,r17
   17034:	dfc00217 	ldw	ra,8(sp)
   17038:	dc400117 	ldw	r17,4(sp)
   1703c:	dc000017 	ldw	r16,0(sp)
   17040:	dec00304 	addi	sp,sp,12
   17044:	00207e01 	jmpi	207e0 <__malloc_unlock>
   17048:	f800283a 	ret
   1704c:	100ad27a 	srli	r5,r2,9
   17050:	00c00104 	movi	r3,4
   17054:	19404a36 	bltu	r3,r5,17180 <_free_r+0x240>
   17058:	100ad1ba 	srli	r5,r2,6
   1705c:	28c00e44 	addi	r3,r5,57
   17060:	18c7883a 	add	r3,r3,r3
   17064:	29400e04 	addi	r5,r5,56
   17068:	18c7883a 	add	r3,r3,r3
   1706c:	18c7883a 	add	r3,r3,r3
   17070:	1909883a 	add	r4,r3,r4
   17074:	20c00017 	ldw	r3,0(r4)
   17078:	01c000f4 	movhi	r7,3
   1707c:	213ffe04 	addi	r4,r4,-8
   17080:	39f05804 	addi	r7,r7,-16032
   17084:	20c04426 	beq	r4,r3,17198 <_free_r+0x258>
   17088:	01ffff04 	movi	r7,-4
   1708c:	19400117 	ldw	r5,4(r3)
   17090:	29ca703a 	and	r5,r5,r7
   17094:	1140022e 	bgeu	r2,r5,170a0 <_free_r+0x160>
   17098:	18c00217 	ldw	r3,8(r3)
   1709c:	20fffb1e 	bne	r4,r3,1708c <__alt_data_end+0xfc01708c>
   170a0:	19000317 	ldw	r4,12(r3)
   170a4:	31000315 	stw	r4,12(r6)
   170a8:	30c00215 	stw	r3,8(r6)
   170ac:	21800215 	stw	r6,8(r4)
   170b0:	19800315 	stw	r6,12(r3)
   170b4:	003fde06 	br	17030 <__alt_data_end+0xfc017030>
   170b8:	29c00217 	ldw	r7,8(r5)
   170bc:	10c5883a 	add	r2,r2,r3
   170c0:	00c000f4 	movhi	r3,3
   170c4:	18f05a04 	addi	r3,r3,-16024
   170c8:	38c03b26 	beq	r7,r3,171b8 <_free_r+0x278>
   170cc:	2a000317 	ldw	r8,12(r5)
   170d0:	11400054 	ori	r5,r2,1
   170d4:	3087883a 	add	r3,r6,r2
   170d8:	3a000315 	stw	r8,12(r7)
   170dc:	41c00215 	stw	r7,8(r8)
   170e0:	31400115 	stw	r5,4(r6)
   170e4:	18800015 	stw	r2,0(r3)
   170e8:	003fbd06 	br	16fe0 <__alt_data_end+0xfc016fe0>
   170ec:	39c0004c 	andi	r7,r7,1
   170f0:	10c5883a 	add	r2,r2,r3
   170f4:	3800071e 	bne	r7,zero,17114 <_free_r+0x1d4>
   170f8:	81fffe17 	ldw	r7,-8(r16)
   170fc:	31cdc83a 	sub	r6,r6,r7
   17100:	30c00317 	ldw	r3,12(r6)
   17104:	31400217 	ldw	r5,8(r6)
   17108:	11c5883a 	add	r2,r2,r7
   1710c:	28c00315 	stw	r3,12(r5)
   17110:	19400215 	stw	r5,8(r3)
   17114:	10c00054 	ori	r3,r2,1
   17118:	30c00115 	stw	r3,4(r6)
   1711c:	00c000f4 	movhi	r3,3
   17120:	18fbbd04 	addi	r3,r3,-4364
   17124:	18c00017 	ldw	r3,0(r3)
   17128:	21800215 	stw	r6,8(r4)
   1712c:	10ffc036 	bltu	r2,r3,17030 <__alt_data_end+0xfc017030>
   17130:	008000f4 	movhi	r2,3
   17134:	10885504 	addi	r2,r2,8532
   17138:	11400017 	ldw	r5,0(r2)
   1713c:	8809883a 	mov	r4,r17
   17140:	0016e1c0 	call	16e1c <_malloc_trim_r>
   17144:	003fba06 	br	17030 <__alt_data_end+0xfc017030>
   17148:	28c9883a 	add	r4,r5,r3
   1714c:	21000117 	ldw	r4,4(r4)
   17150:	2100004c 	andi	r4,r4,1
   17154:	2000391e 	bne	r4,zero,1723c <_free_r+0x2fc>
   17158:	29c00217 	ldw	r7,8(r5)
   1715c:	29000317 	ldw	r4,12(r5)
   17160:	1885883a 	add	r2,r3,r2
   17164:	10c00054 	ori	r3,r2,1
   17168:	39000315 	stw	r4,12(r7)
   1716c:	21c00215 	stw	r7,8(r4)
   17170:	30c00115 	stw	r3,4(r6)
   17174:	308d883a 	add	r6,r6,r2
   17178:	30800015 	stw	r2,0(r6)
   1717c:	003fac06 	br	17030 <__alt_data_end+0xfc017030>
   17180:	00c00504 	movi	r3,20
   17184:	19401536 	bltu	r3,r5,171dc <_free_r+0x29c>
   17188:	28c01704 	addi	r3,r5,92
   1718c:	18c7883a 	add	r3,r3,r3
   17190:	294016c4 	addi	r5,r5,91
   17194:	003fb406 	br	17068 <__alt_data_end+0xfc017068>
   17198:	280bd0ba 	srai	r5,r5,2
   1719c:	00c00044 	movi	r3,1
   171a0:	38800117 	ldw	r2,4(r7)
   171a4:	194a983a 	sll	r5,r3,r5
   171a8:	2007883a 	mov	r3,r4
   171ac:	2884b03a 	or	r2,r5,r2
   171b0:	38800115 	stw	r2,4(r7)
   171b4:	003fbb06 	br	170a4 <__alt_data_end+0xfc0170a4>
   171b8:	21800515 	stw	r6,20(r4)
   171bc:	21800415 	stw	r6,16(r4)
   171c0:	10c00054 	ori	r3,r2,1
   171c4:	31c00315 	stw	r7,12(r6)
   171c8:	31c00215 	stw	r7,8(r6)
   171cc:	30c00115 	stw	r3,4(r6)
   171d0:	308d883a 	add	r6,r6,r2
   171d4:	30800015 	stw	r2,0(r6)
   171d8:	003f9506 	br	17030 <__alt_data_end+0xfc017030>
   171dc:	00c01504 	movi	r3,84
   171e0:	19400536 	bltu	r3,r5,171f8 <_free_r+0x2b8>
   171e4:	100ad33a 	srli	r5,r2,12
   171e8:	28c01bc4 	addi	r3,r5,111
   171ec:	18c7883a 	add	r3,r3,r3
   171f0:	29401b84 	addi	r5,r5,110
   171f4:	003f9c06 	br	17068 <__alt_data_end+0xfc017068>
   171f8:	00c05504 	movi	r3,340
   171fc:	19400536 	bltu	r3,r5,17214 <_free_r+0x2d4>
   17200:	100ad3fa 	srli	r5,r2,15
   17204:	28c01e04 	addi	r3,r5,120
   17208:	18c7883a 	add	r3,r3,r3
   1720c:	29401dc4 	addi	r5,r5,119
   17210:	003f9506 	br	17068 <__alt_data_end+0xfc017068>
   17214:	00c15504 	movi	r3,1364
   17218:	19400536 	bltu	r3,r5,17230 <_free_r+0x2f0>
   1721c:	100ad4ba 	srli	r5,r2,18
   17220:	28c01f44 	addi	r3,r5,125
   17224:	18c7883a 	add	r3,r3,r3
   17228:	29401f04 	addi	r5,r5,124
   1722c:	003f8e06 	br	17068 <__alt_data_end+0xfc017068>
   17230:	00c03f84 	movi	r3,254
   17234:	01401f84 	movi	r5,126
   17238:	003f8b06 	br	17068 <__alt_data_end+0xfc017068>
   1723c:	10c00054 	ori	r3,r2,1
   17240:	30c00115 	stw	r3,4(r6)
   17244:	308d883a 	add	r6,r6,r2
   17248:	30800015 	stw	r2,0(r6)
   1724c:	003f7806 	br	17030 <__alt_data_end+0xfc017030>

00017250 <__sfvwrite_r>:
   17250:	30800217 	ldw	r2,8(r6)
   17254:	10006726 	beq	r2,zero,173f4 <__sfvwrite_r+0x1a4>
   17258:	28c0030b 	ldhu	r3,12(r5)
   1725c:	defff404 	addi	sp,sp,-48
   17260:	dd400715 	stw	r21,28(sp)
   17264:	dd000615 	stw	r20,24(sp)
   17268:	dc000215 	stw	r16,8(sp)
   1726c:	dfc00b15 	stw	ra,44(sp)
   17270:	df000a15 	stw	fp,40(sp)
   17274:	ddc00915 	stw	r23,36(sp)
   17278:	dd800815 	stw	r22,32(sp)
   1727c:	dcc00515 	stw	r19,20(sp)
   17280:	dc800415 	stw	r18,16(sp)
   17284:	dc400315 	stw	r17,12(sp)
   17288:	1880020c 	andi	r2,r3,8
   1728c:	2821883a 	mov	r16,r5
   17290:	202b883a 	mov	r21,r4
   17294:	3029883a 	mov	r20,r6
   17298:	10002726 	beq	r2,zero,17338 <__sfvwrite_r+0xe8>
   1729c:	28800417 	ldw	r2,16(r5)
   172a0:	10002526 	beq	r2,zero,17338 <__sfvwrite_r+0xe8>
   172a4:	1880008c 	andi	r2,r3,2
   172a8:	a4400017 	ldw	r17,0(r20)
   172ac:	10002a26 	beq	r2,zero,17358 <__sfvwrite_r+0x108>
   172b0:	05a00034 	movhi	r22,32768
   172b4:	0027883a 	mov	r19,zero
   172b8:	0025883a 	mov	r18,zero
   172bc:	b5bf0004 	addi	r22,r22,-1024
   172c0:	980d883a 	mov	r6,r19
   172c4:	a809883a 	mov	r4,r21
   172c8:	90004626 	beq	r18,zero,173e4 <__sfvwrite_r+0x194>
   172cc:	900f883a 	mov	r7,r18
   172d0:	b480022e 	bgeu	r22,r18,172dc <__sfvwrite_r+0x8c>
   172d4:	01e00034 	movhi	r7,32768
   172d8:	39ff0004 	addi	r7,r7,-1024
   172dc:	80800917 	ldw	r2,36(r16)
   172e0:	81400717 	ldw	r5,28(r16)
   172e4:	103ee83a 	callr	r2
   172e8:	00805a0e 	bge	zero,r2,17454 <__sfvwrite_r+0x204>
   172ec:	a0c00217 	ldw	r3,8(r20)
   172f0:	98a7883a 	add	r19,r19,r2
   172f4:	90a5c83a 	sub	r18,r18,r2
   172f8:	1885c83a 	sub	r2,r3,r2
   172fc:	a0800215 	stw	r2,8(r20)
   17300:	103fef1e 	bne	r2,zero,172c0 <__alt_data_end+0xfc0172c0>
   17304:	0005883a 	mov	r2,zero
   17308:	dfc00b17 	ldw	ra,44(sp)
   1730c:	df000a17 	ldw	fp,40(sp)
   17310:	ddc00917 	ldw	r23,36(sp)
   17314:	dd800817 	ldw	r22,32(sp)
   17318:	dd400717 	ldw	r21,28(sp)
   1731c:	dd000617 	ldw	r20,24(sp)
   17320:	dcc00517 	ldw	r19,20(sp)
   17324:	dc800417 	ldw	r18,16(sp)
   17328:	dc400317 	ldw	r17,12(sp)
   1732c:	dc000217 	ldw	r16,8(sp)
   17330:	dec00c04 	addi	sp,sp,48
   17334:	f800283a 	ret
   17338:	800b883a 	mov	r5,r16
   1733c:	a809883a 	mov	r4,r21
   17340:	0014dc00 	call	14dc0 <__swsetup_r>
   17344:	1000ee1e 	bne	r2,zero,17700 <__sfvwrite_r+0x4b0>
   17348:	80c0030b 	ldhu	r3,12(r16)
   1734c:	a4400017 	ldw	r17,0(r20)
   17350:	1880008c 	andi	r2,r3,2
   17354:	103fd61e 	bne	r2,zero,172b0 <__alt_data_end+0xfc0172b0>
   17358:	1880004c 	andi	r2,r3,1
   1735c:	1000421e 	bne	r2,zero,17468 <__sfvwrite_r+0x218>
   17360:	0039883a 	mov	fp,zero
   17364:	0025883a 	mov	r18,zero
   17368:	90001a26 	beq	r18,zero,173d4 <__sfvwrite_r+0x184>
   1736c:	1880800c 	andi	r2,r3,512
   17370:	84c00217 	ldw	r19,8(r16)
   17374:	10002126 	beq	r2,zero,173fc <__sfvwrite_r+0x1ac>
   17378:	982f883a 	mov	r23,r19
   1737c:	94c09636 	bltu	r18,r19,175d8 <__sfvwrite_r+0x388>
   17380:	1881200c 	andi	r2,r3,1152
   17384:	1000a11e 	bne	r2,zero,1760c <__sfvwrite_r+0x3bc>
   17388:	81000017 	ldw	r4,0(r16)
   1738c:	b80d883a 	mov	r6,r23
   17390:	e00b883a 	mov	r5,fp
   17394:	0017c1c0 	call	17c1c <memmove>
   17398:	80c00217 	ldw	r3,8(r16)
   1739c:	81000017 	ldw	r4,0(r16)
   173a0:	9005883a 	mov	r2,r18
   173a4:	1ce7c83a 	sub	r19,r3,r19
   173a8:	25cf883a 	add	r7,r4,r23
   173ac:	84c00215 	stw	r19,8(r16)
   173b0:	81c00015 	stw	r7,0(r16)
   173b4:	a0c00217 	ldw	r3,8(r20)
   173b8:	e0b9883a 	add	fp,fp,r2
   173bc:	90a5c83a 	sub	r18,r18,r2
   173c0:	18a7c83a 	sub	r19,r3,r2
   173c4:	a4c00215 	stw	r19,8(r20)
   173c8:	983fce26 	beq	r19,zero,17304 <__alt_data_end+0xfc017304>
   173cc:	80c0030b 	ldhu	r3,12(r16)
   173d0:	903fe61e 	bne	r18,zero,1736c <__alt_data_end+0xfc01736c>
   173d4:	8f000017 	ldw	fp,0(r17)
   173d8:	8c800117 	ldw	r18,4(r17)
   173dc:	8c400204 	addi	r17,r17,8
   173e0:	003fe106 	br	17368 <__alt_data_end+0xfc017368>
   173e4:	8cc00017 	ldw	r19,0(r17)
   173e8:	8c800117 	ldw	r18,4(r17)
   173ec:	8c400204 	addi	r17,r17,8
   173f0:	003fb306 	br	172c0 <__alt_data_end+0xfc0172c0>
   173f4:	0005883a 	mov	r2,zero
   173f8:	f800283a 	ret
   173fc:	81000017 	ldw	r4,0(r16)
   17400:	80800417 	ldw	r2,16(r16)
   17404:	11005a36 	bltu	r2,r4,17570 <__sfvwrite_r+0x320>
   17408:	85c00517 	ldw	r23,20(r16)
   1740c:	95c05836 	bltu	r18,r23,17570 <__sfvwrite_r+0x320>
   17410:	00a00034 	movhi	r2,32768
   17414:	10bfffc4 	addi	r2,r2,-1
   17418:	9009883a 	mov	r4,r18
   1741c:	1480012e 	bgeu	r2,r18,17424 <__sfvwrite_r+0x1d4>
   17420:	1009883a 	mov	r4,r2
   17424:	b80b883a 	mov	r5,r23
   17428:	000d7840 	call	d784 <__divsi3>
   1742c:	b80b883a 	mov	r5,r23
   17430:	1009883a 	mov	r4,r2
   17434:	000d9380 	call	d938 <__mulsi3>
   17438:	81400717 	ldw	r5,28(r16)
   1743c:	80c00917 	ldw	r3,36(r16)
   17440:	100f883a 	mov	r7,r2
   17444:	e00d883a 	mov	r6,fp
   17448:	a809883a 	mov	r4,r21
   1744c:	183ee83a 	callr	r3
   17450:	00bfd816 	blt	zero,r2,173b4 <__alt_data_end+0xfc0173b4>
   17454:	8080030b 	ldhu	r2,12(r16)
   17458:	10801014 	ori	r2,r2,64
   1745c:	8080030d 	sth	r2,12(r16)
   17460:	00bfffc4 	movi	r2,-1
   17464:	003fa806 	br	17308 <__alt_data_end+0xfc017308>
   17468:	0027883a 	mov	r19,zero
   1746c:	0011883a 	mov	r8,zero
   17470:	0039883a 	mov	fp,zero
   17474:	0025883a 	mov	r18,zero
   17478:	90001f26 	beq	r18,zero,174f8 <__sfvwrite_r+0x2a8>
   1747c:	40005a26 	beq	r8,zero,175e8 <__sfvwrite_r+0x398>
   17480:	982d883a 	mov	r22,r19
   17484:	94c0012e 	bgeu	r18,r19,1748c <__sfvwrite_r+0x23c>
   17488:	902d883a 	mov	r22,r18
   1748c:	81000017 	ldw	r4,0(r16)
   17490:	80800417 	ldw	r2,16(r16)
   17494:	b02f883a 	mov	r23,r22
   17498:	81c00517 	ldw	r7,20(r16)
   1749c:	1100032e 	bgeu	r2,r4,174ac <__sfvwrite_r+0x25c>
   174a0:	80c00217 	ldw	r3,8(r16)
   174a4:	38c7883a 	add	r3,r7,r3
   174a8:	1d801816 	blt	r3,r22,1750c <__sfvwrite_r+0x2bc>
   174ac:	b1c03e16 	blt	r22,r7,175a8 <__sfvwrite_r+0x358>
   174b0:	80800917 	ldw	r2,36(r16)
   174b4:	81400717 	ldw	r5,28(r16)
   174b8:	e00d883a 	mov	r6,fp
   174bc:	da000115 	stw	r8,4(sp)
   174c0:	a809883a 	mov	r4,r21
   174c4:	103ee83a 	callr	r2
   174c8:	102f883a 	mov	r23,r2
   174cc:	da000117 	ldw	r8,4(sp)
   174d0:	00bfe00e 	bge	zero,r2,17454 <__alt_data_end+0xfc017454>
   174d4:	9de7c83a 	sub	r19,r19,r23
   174d8:	98001f26 	beq	r19,zero,17558 <__sfvwrite_r+0x308>
   174dc:	a0800217 	ldw	r2,8(r20)
   174e0:	e5f9883a 	add	fp,fp,r23
   174e4:	95e5c83a 	sub	r18,r18,r23
   174e8:	15efc83a 	sub	r23,r2,r23
   174ec:	a5c00215 	stw	r23,8(r20)
   174f0:	b83f8426 	beq	r23,zero,17304 <__alt_data_end+0xfc017304>
   174f4:	903fe11e 	bne	r18,zero,1747c <__alt_data_end+0xfc01747c>
   174f8:	8f000017 	ldw	fp,0(r17)
   174fc:	8c800117 	ldw	r18,4(r17)
   17500:	0011883a 	mov	r8,zero
   17504:	8c400204 	addi	r17,r17,8
   17508:	003fdb06 	br	17478 <__alt_data_end+0xfc017478>
   1750c:	180d883a 	mov	r6,r3
   17510:	e00b883a 	mov	r5,fp
   17514:	da000115 	stw	r8,4(sp)
   17518:	d8c00015 	stw	r3,0(sp)
   1751c:	0017c1c0 	call	17c1c <memmove>
   17520:	d8c00017 	ldw	r3,0(sp)
   17524:	80800017 	ldw	r2,0(r16)
   17528:	800b883a 	mov	r5,r16
   1752c:	a809883a 	mov	r4,r21
   17530:	10c5883a 	add	r2,r2,r3
   17534:	80800015 	stw	r2,0(r16)
   17538:	d8c00015 	stw	r3,0(sp)
   1753c:	00169e00 	call	169e0 <_fflush_r>
   17540:	d8c00017 	ldw	r3,0(sp)
   17544:	da000117 	ldw	r8,4(sp)
   17548:	103fc21e 	bne	r2,zero,17454 <__alt_data_end+0xfc017454>
   1754c:	182f883a 	mov	r23,r3
   17550:	9de7c83a 	sub	r19,r19,r23
   17554:	983fe11e 	bne	r19,zero,174dc <__alt_data_end+0xfc0174dc>
   17558:	800b883a 	mov	r5,r16
   1755c:	a809883a 	mov	r4,r21
   17560:	00169e00 	call	169e0 <_fflush_r>
   17564:	103fbb1e 	bne	r2,zero,17454 <__alt_data_end+0xfc017454>
   17568:	0011883a 	mov	r8,zero
   1756c:	003fdb06 	br	174dc <__alt_data_end+0xfc0174dc>
   17570:	94c0012e 	bgeu	r18,r19,17578 <__sfvwrite_r+0x328>
   17574:	9027883a 	mov	r19,r18
   17578:	980d883a 	mov	r6,r19
   1757c:	e00b883a 	mov	r5,fp
   17580:	0017c1c0 	call	17c1c <memmove>
   17584:	80800217 	ldw	r2,8(r16)
   17588:	80c00017 	ldw	r3,0(r16)
   1758c:	14c5c83a 	sub	r2,r2,r19
   17590:	1cc7883a 	add	r3,r3,r19
   17594:	80800215 	stw	r2,8(r16)
   17598:	80c00015 	stw	r3,0(r16)
   1759c:	10004326 	beq	r2,zero,176ac <__sfvwrite_r+0x45c>
   175a0:	9805883a 	mov	r2,r19
   175a4:	003f8306 	br	173b4 <__alt_data_end+0xfc0173b4>
   175a8:	b00d883a 	mov	r6,r22
   175ac:	e00b883a 	mov	r5,fp
   175b0:	da000115 	stw	r8,4(sp)
   175b4:	0017c1c0 	call	17c1c <memmove>
   175b8:	80800217 	ldw	r2,8(r16)
   175bc:	80c00017 	ldw	r3,0(r16)
   175c0:	da000117 	ldw	r8,4(sp)
   175c4:	1585c83a 	sub	r2,r2,r22
   175c8:	1dad883a 	add	r22,r3,r22
   175cc:	80800215 	stw	r2,8(r16)
   175d0:	85800015 	stw	r22,0(r16)
   175d4:	003fbf06 	br	174d4 <__alt_data_end+0xfc0174d4>
   175d8:	81000017 	ldw	r4,0(r16)
   175dc:	9027883a 	mov	r19,r18
   175e0:	902f883a 	mov	r23,r18
   175e4:	003f6906 	br	1738c <__alt_data_end+0xfc01738c>
   175e8:	900d883a 	mov	r6,r18
   175ec:	01400284 	movi	r5,10
   175f0:	e009883a 	mov	r4,fp
   175f4:	0017b380 	call	17b38 <memchr>
   175f8:	10003e26 	beq	r2,zero,176f4 <__sfvwrite_r+0x4a4>
   175fc:	10800044 	addi	r2,r2,1
   17600:	1727c83a 	sub	r19,r2,fp
   17604:	02000044 	movi	r8,1
   17608:	003f9d06 	br	17480 <__alt_data_end+0xfc017480>
   1760c:	80800517 	ldw	r2,20(r16)
   17610:	81400417 	ldw	r5,16(r16)
   17614:	81c00017 	ldw	r7,0(r16)
   17618:	10a7883a 	add	r19,r2,r2
   1761c:	9885883a 	add	r2,r19,r2
   17620:	1026d7fa 	srli	r19,r2,31
   17624:	396dc83a 	sub	r22,r7,r5
   17628:	b1000044 	addi	r4,r22,1
   1762c:	9885883a 	add	r2,r19,r2
   17630:	1027d07a 	srai	r19,r2,1
   17634:	2485883a 	add	r2,r4,r18
   17638:	980d883a 	mov	r6,r19
   1763c:	9880022e 	bgeu	r19,r2,17648 <__sfvwrite_r+0x3f8>
   17640:	1027883a 	mov	r19,r2
   17644:	100d883a 	mov	r6,r2
   17648:	18c1000c 	andi	r3,r3,1024
   1764c:	18001c26 	beq	r3,zero,176c0 <__sfvwrite_r+0x470>
   17650:	300b883a 	mov	r5,r6
   17654:	a809883a 	mov	r4,r21
   17658:	000f5dc0 	call	f5dc <_malloc_r>
   1765c:	102f883a 	mov	r23,r2
   17660:	10002926 	beq	r2,zero,17708 <__sfvwrite_r+0x4b8>
   17664:	81400417 	ldw	r5,16(r16)
   17668:	b00d883a 	mov	r6,r22
   1766c:	1009883a 	mov	r4,r2
   17670:	000fde80 	call	fde8 <memcpy>
   17674:	8080030b 	ldhu	r2,12(r16)
   17678:	00fedfc4 	movi	r3,-1153
   1767c:	10c4703a 	and	r2,r2,r3
   17680:	10802014 	ori	r2,r2,128
   17684:	8080030d 	sth	r2,12(r16)
   17688:	bd89883a 	add	r4,r23,r22
   1768c:	9d8fc83a 	sub	r7,r19,r22
   17690:	85c00415 	stw	r23,16(r16)
   17694:	84c00515 	stw	r19,20(r16)
   17698:	81000015 	stw	r4,0(r16)
   1769c:	9027883a 	mov	r19,r18
   176a0:	81c00215 	stw	r7,8(r16)
   176a4:	902f883a 	mov	r23,r18
   176a8:	003f3806 	br	1738c <__alt_data_end+0xfc01738c>
   176ac:	800b883a 	mov	r5,r16
   176b0:	a809883a 	mov	r4,r21
   176b4:	00169e00 	call	169e0 <_fflush_r>
   176b8:	103fb926 	beq	r2,zero,175a0 <__alt_data_end+0xfc0175a0>
   176bc:	003f6506 	br	17454 <__alt_data_end+0xfc017454>
   176c0:	a809883a 	mov	r4,r21
   176c4:	0018f980 	call	18f98 <_realloc_r>
   176c8:	102f883a 	mov	r23,r2
   176cc:	103fee1e 	bne	r2,zero,17688 <__alt_data_end+0xfc017688>
   176d0:	81400417 	ldw	r5,16(r16)
   176d4:	a809883a 	mov	r4,r21
   176d8:	0016f400 	call	16f40 <_free_r>
   176dc:	8080030b 	ldhu	r2,12(r16)
   176e0:	00ffdfc4 	movi	r3,-129
   176e4:	1884703a 	and	r2,r3,r2
   176e8:	00c00304 	movi	r3,12
   176ec:	a8c00015 	stw	r3,0(r21)
   176f0:	003f5906 	br	17458 <__alt_data_end+0xfc017458>
   176f4:	94c00044 	addi	r19,r18,1
   176f8:	02000044 	movi	r8,1
   176fc:	003f6006 	br	17480 <__alt_data_end+0xfc017480>
   17700:	00bfffc4 	movi	r2,-1
   17704:	003f0006 	br	17308 <__alt_data_end+0xfc017308>
   17708:	00800304 	movi	r2,12
   1770c:	a8800015 	stw	r2,0(r21)
   17710:	8080030b 	ldhu	r2,12(r16)
   17714:	003f5006 	br	17458 <__alt_data_end+0xfc017458>

00017718 <_fwalk>:
   17718:	defff704 	addi	sp,sp,-36
   1771c:	dd000415 	stw	r20,16(sp)
   17720:	dfc00815 	stw	ra,32(sp)
   17724:	ddc00715 	stw	r23,28(sp)
   17728:	dd800615 	stw	r22,24(sp)
   1772c:	dd400515 	stw	r21,20(sp)
   17730:	dcc00315 	stw	r19,12(sp)
   17734:	dc800215 	stw	r18,8(sp)
   17738:	dc400115 	stw	r17,4(sp)
   1773c:	dc000015 	stw	r16,0(sp)
   17740:	2500b804 	addi	r20,r4,736
   17744:	a0002326 	beq	r20,zero,177d4 <_fwalk+0xbc>
   17748:	282b883a 	mov	r21,r5
   1774c:	002f883a 	mov	r23,zero
   17750:	05800044 	movi	r22,1
   17754:	04ffffc4 	movi	r19,-1
   17758:	a4400117 	ldw	r17,4(r20)
   1775c:	a4800217 	ldw	r18,8(r20)
   17760:	8c7fffc4 	addi	r17,r17,-1
   17764:	88000d16 	blt	r17,zero,1779c <_fwalk+0x84>
   17768:	94000304 	addi	r16,r18,12
   1776c:	94800384 	addi	r18,r18,14
   17770:	8080000b 	ldhu	r2,0(r16)
   17774:	8c7fffc4 	addi	r17,r17,-1
   17778:	813ffd04 	addi	r4,r16,-12
   1777c:	b080042e 	bgeu	r22,r2,17790 <_fwalk+0x78>
   17780:	9080000f 	ldh	r2,0(r18)
   17784:	14c00226 	beq	r2,r19,17790 <_fwalk+0x78>
   17788:	a83ee83a 	callr	r21
   1778c:	b8aeb03a 	or	r23,r23,r2
   17790:	84001a04 	addi	r16,r16,104
   17794:	94801a04 	addi	r18,r18,104
   17798:	8cfff51e 	bne	r17,r19,17770 <__alt_data_end+0xfc017770>
   1779c:	a5000017 	ldw	r20,0(r20)
   177a0:	a03fed1e 	bne	r20,zero,17758 <__alt_data_end+0xfc017758>
   177a4:	b805883a 	mov	r2,r23
   177a8:	dfc00817 	ldw	ra,32(sp)
   177ac:	ddc00717 	ldw	r23,28(sp)
   177b0:	dd800617 	ldw	r22,24(sp)
   177b4:	dd400517 	ldw	r21,20(sp)
   177b8:	dd000417 	ldw	r20,16(sp)
   177bc:	dcc00317 	ldw	r19,12(sp)
   177c0:	dc800217 	ldw	r18,8(sp)
   177c4:	dc400117 	ldw	r17,4(sp)
   177c8:	dc000017 	ldw	r16,0(sp)
   177cc:	dec00904 	addi	sp,sp,36
   177d0:	f800283a 	ret
   177d4:	002f883a 	mov	r23,zero
   177d8:	003ff206 	br	177a4 <__alt_data_end+0xfc0177a4>

000177dc <_fwalk_reent>:
   177dc:	defff704 	addi	sp,sp,-36
   177e0:	dd000415 	stw	r20,16(sp)
   177e4:	dfc00815 	stw	ra,32(sp)
   177e8:	ddc00715 	stw	r23,28(sp)
   177ec:	dd800615 	stw	r22,24(sp)
   177f0:	dd400515 	stw	r21,20(sp)
   177f4:	dcc00315 	stw	r19,12(sp)
   177f8:	dc800215 	stw	r18,8(sp)
   177fc:	dc400115 	stw	r17,4(sp)
   17800:	dc000015 	stw	r16,0(sp)
   17804:	2500b804 	addi	r20,r4,736
   17808:	a0002326 	beq	r20,zero,17898 <_fwalk_reent+0xbc>
   1780c:	282b883a 	mov	r21,r5
   17810:	2027883a 	mov	r19,r4
   17814:	002f883a 	mov	r23,zero
   17818:	05800044 	movi	r22,1
   1781c:	04bfffc4 	movi	r18,-1
   17820:	a4400117 	ldw	r17,4(r20)
   17824:	a4000217 	ldw	r16,8(r20)
   17828:	8c7fffc4 	addi	r17,r17,-1
   1782c:	88000c16 	blt	r17,zero,17860 <_fwalk_reent+0x84>
   17830:	84000304 	addi	r16,r16,12
   17834:	8080000b 	ldhu	r2,0(r16)
   17838:	8c7fffc4 	addi	r17,r17,-1
   1783c:	817ffd04 	addi	r5,r16,-12
   17840:	b080052e 	bgeu	r22,r2,17858 <_fwalk_reent+0x7c>
   17844:	8080008f 	ldh	r2,2(r16)
   17848:	9809883a 	mov	r4,r19
   1784c:	14800226 	beq	r2,r18,17858 <_fwalk_reent+0x7c>
   17850:	a83ee83a 	callr	r21
   17854:	b8aeb03a 	or	r23,r23,r2
   17858:	84001a04 	addi	r16,r16,104
   1785c:	8cbff51e 	bne	r17,r18,17834 <__alt_data_end+0xfc017834>
   17860:	a5000017 	ldw	r20,0(r20)
   17864:	a03fee1e 	bne	r20,zero,17820 <__alt_data_end+0xfc017820>
   17868:	b805883a 	mov	r2,r23
   1786c:	dfc00817 	ldw	ra,32(sp)
   17870:	ddc00717 	ldw	r23,28(sp)
   17874:	dd800617 	ldw	r22,24(sp)
   17878:	dd400517 	ldw	r21,20(sp)
   1787c:	dd000417 	ldw	r20,16(sp)
   17880:	dcc00317 	ldw	r19,12(sp)
   17884:	dc800217 	ldw	r18,8(sp)
   17888:	dc400117 	ldw	r17,4(sp)
   1788c:	dc000017 	ldw	r16,0(sp)
   17890:	dec00904 	addi	sp,sp,36
   17894:	f800283a 	ret
   17898:	002f883a 	mov	r23,zero
   1789c:	003ff206 	br	17868 <__alt_data_end+0xfc017868>

000178a0 <_setlocale_r>:
   178a0:	30001b26 	beq	r6,zero,17910 <_setlocale_r+0x70>
   178a4:	014000f4 	movhi	r5,3
   178a8:	defffe04 	addi	sp,sp,-8
   178ac:	296edb04 	addi	r5,r5,-17556
   178b0:	3009883a 	mov	r4,r6
   178b4:	dc000015 	stw	r16,0(sp)
   178b8:	dfc00115 	stw	ra,4(sp)
   178bc:	3021883a 	mov	r16,r6
   178c0:	00105d40 	call	105d4 <strcmp>
   178c4:	1000061e 	bne	r2,zero,178e0 <_setlocale_r+0x40>
   178c8:	008000f4 	movhi	r2,3
   178cc:	10aeb404 	addi	r2,r2,-17712
   178d0:	dfc00117 	ldw	ra,4(sp)
   178d4:	dc000017 	ldw	r16,0(sp)
   178d8:	dec00204 	addi	sp,sp,8
   178dc:	f800283a 	ret
   178e0:	014000f4 	movhi	r5,3
   178e4:	296eb404 	addi	r5,r5,-17712
   178e8:	8009883a 	mov	r4,r16
   178ec:	00105d40 	call	105d4 <strcmp>
   178f0:	103ff526 	beq	r2,zero,178c8 <__alt_data_end+0xfc0178c8>
   178f4:	014000f4 	movhi	r5,3
   178f8:	296ebe04 	addi	r5,r5,-17672
   178fc:	8009883a 	mov	r4,r16
   17900:	00105d40 	call	105d4 <strcmp>
   17904:	103ff026 	beq	r2,zero,178c8 <__alt_data_end+0xfc0178c8>
   17908:	0005883a 	mov	r2,zero
   1790c:	003ff006 	br	178d0 <__alt_data_end+0xfc0178d0>
   17910:	008000f4 	movhi	r2,3
   17914:	10aeb404 	addi	r2,r2,-17712
   17918:	f800283a 	ret

0001791c <__locale_charset>:
   1791c:	008000f4 	movhi	r2,3
   17920:	10b16204 	addi	r2,r2,-14968
   17924:	f800283a 	ret

00017928 <__locale_mb_cur_max>:
   17928:	008000f4 	movhi	r2,3
   1792c:	10bbbe04 	addi	r2,r2,-4360
   17930:	10800017 	ldw	r2,0(r2)
   17934:	f800283a 	ret

00017938 <__locale_msgcharset>:
   17938:	008000f4 	movhi	r2,3
   1793c:	10b15a04 	addi	r2,r2,-15000
   17940:	f800283a 	ret

00017944 <__locale_cjk_lang>:
   17944:	0005883a 	mov	r2,zero
   17948:	f800283a 	ret

0001794c <_localeconv_r>:
   1794c:	008000f4 	movhi	r2,3
   17950:	10b16a04 	addi	r2,r2,-14936
   17954:	f800283a 	ret

00017958 <setlocale>:
   17958:	008000f4 	movhi	r2,3
   1795c:	10bbbb04 	addi	r2,r2,-4372
   17960:	280d883a 	mov	r6,r5
   17964:	200b883a 	mov	r5,r4
   17968:	11000017 	ldw	r4,0(r2)
   1796c:	00178a01 	jmpi	178a0 <_setlocale_r>

00017970 <localeconv>:
   17970:	008000f4 	movhi	r2,3
   17974:	10b16a04 	addi	r2,r2,-14936
   17978:	f800283a 	ret

0001797c <__smakebuf_r>:
   1797c:	2880030b 	ldhu	r2,12(r5)
   17980:	10c0008c 	andi	r3,r2,2
   17984:	1800411e 	bne	r3,zero,17a8c <__smakebuf_r+0x110>
   17988:	deffec04 	addi	sp,sp,-80
   1798c:	dc000f15 	stw	r16,60(sp)
   17990:	2821883a 	mov	r16,r5
   17994:	2940038f 	ldh	r5,14(r5)
   17998:	dc401015 	stw	r17,64(sp)
   1799c:	dfc01315 	stw	ra,76(sp)
   179a0:	dcc01215 	stw	r19,72(sp)
   179a4:	dc801115 	stw	r18,68(sp)
   179a8:	2023883a 	mov	r17,r4
   179ac:	28001c16 	blt	r5,zero,17a20 <__smakebuf_r+0xa4>
   179b0:	d80d883a 	mov	r6,sp
   179b4:	001c9080 	call	1c908 <_fstat_r>
   179b8:	10001816 	blt	r2,zero,17a1c <__smakebuf_r+0xa0>
   179bc:	d8800117 	ldw	r2,4(sp)
   179c0:	00e00014 	movui	r3,32768
   179c4:	10bc000c 	andi	r2,r2,61440
   179c8:	14c80020 	cmpeqi	r19,r2,8192
   179cc:	10c03726 	beq	r2,r3,17aac <__smakebuf_r+0x130>
   179d0:	80c0030b 	ldhu	r3,12(r16)
   179d4:	18c20014 	ori	r3,r3,2048
   179d8:	80c0030d 	sth	r3,12(r16)
   179dc:	00c80004 	movi	r3,8192
   179e0:	10c0521e 	bne	r2,r3,17b2c <__smakebuf_r+0x1b0>
   179e4:	8140038f 	ldh	r5,14(r16)
   179e8:	8809883a 	mov	r4,r17
   179ec:	001c9640 	call	1c964 <_isatty_r>
   179f0:	10004c26 	beq	r2,zero,17b24 <__smakebuf_r+0x1a8>
   179f4:	8080030b 	ldhu	r2,12(r16)
   179f8:	80c010c4 	addi	r3,r16,67
   179fc:	80c00015 	stw	r3,0(r16)
   17a00:	10800054 	ori	r2,r2,1
   17a04:	8080030d 	sth	r2,12(r16)
   17a08:	00800044 	movi	r2,1
   17a0c:	80c00415 	stw	r3,16(r16)
   17a10:	80800515 	stw	r2,20(r16)
   17a14:	04810004 	movi	r18,1024
   17a18:	00000706 	br	17a38 <__smakebuf_r+0xbc>
   17a1c:	8080030b 	ldhu	r2,12(r16)
   17a20:	10c0200c 	andi	r3,r2,128
   17a24:	18001f1e 	bne	r3,zero,17aa4 <__smakebuf_r+0x128>
   17a28:	04810004 	movi	r18,1024
   17a2c:	10820014 	ori	r2,r2,2048
   17a30:	8080030d 	sth	r2,12(r16)
   17a34:	0027883a 	mov	r19,zero
   17a38:	900b883a 	mov	r5,r18
   17a3c:	8809883a 	mov	r4,r17
   17a40:	000f5dc0 	call	f5dc <_malloc_r>
   17a44:	10002c26 	beq	r2,zero,17af8 <__smakebuf_r+0x17c>
   17a48:	80c0030b 	ldhu	r3,12(r16)
   17a4c:	01000074 	movhi	r4,1
   17a50:	211a9d04 	addi	r4,r4,27252
   17a54:	89000f15 	stw	r4,60(r17)
   17a58:	18c02014 	ori	r3,r3,128
   17a5c:	80c0030d 	sth	r3,12(r16)
   17a60:	80800015 	stw	r2,0(r16)
   17a64:	80800415 	stw	r2,16(r16)
   17a68:	84800515 	stw	r18,20(r16)
   17a6c:	98001a1e 	bne	r19,zero,17ad8 <__smakebuf_r+0x15c>
   17a70:	dfc01317 	ldw	ra,76(sp)
   17a74:	dcc01217 	ldw	r19,72(sp)
   17a78:	dc801117 	ldw	r18,68(sp)
   17a7c:	dc401017 	ldw	r17,64(sp)
   17a80:	dc000f17 	ldw	r16,60(sp)
   17a84:	dec01404 	addi	sp,sp,80
   17a88:	f800283a 	ret
   17a8c:	288010c4 	addi	r2,r5,67
   17a90:	28800015 	stw	r2,0(r5)
   17a94:	28800415 	stw	r2,16(r5)
   17a98:	00800044 	movi	r2,1
   17a9c:	28800515 	stw	r2,20(r5)
   17aa0:	f800283a 	ret
   17aa4:	04801004 	movi	r18,64
   17aa8:	003fe006 	br	17a2c <__alt_data_end+0xfc017a2c>
   17aac:	81000a17 	ldw	r4,40(r16)
   17ab0:	00c000b4 	movhi	r3,2
   17ab4:	18e59204 	addi	r3,r3,-27064
   17ab8:	20ffc51e 	bne	r4,r3,179d0 <__alt_data_end+0xfc0179d0>
   17abc:	8080030b 	ldhu	r2,12(r16)
   17ac0:	04810004 	movi	r18,1024
   17ac4:	84801315 	stw	r18,76(r16)
   17ac8:	1484b03a 	or	r2,r2,r18
   17acc:	8080030d 	sth	r2,12(r16)
   17ad0:	0027883a 	mov	r19,zero
   17ad4:	003fd806 	br	17a38 <__alt_data_end+0xfc017a38>
   17ad8:	8140038f 	ldh	r5,14(r16)
   17adc:	8809883a 	mov	r4,r17
   17ae0:	001c9640 	call	1c964 <_isatty_r>
   17ae4:	103fe226 	beq	r2,zero,17a70 <__alt_data_end+0xfc017a70>
   17ae8:	8080030b 	ldhu	r2,12(r16)
   17aec:	10800054 	ori	r2,r2,1
   17af0:	8080030d 	sth	r2,12(r16)
   17af4:	003fde06 	br	17a70 <__alt_data_end+0xfc017a70>
   17af8:	8080030b 	ldhu	r2,12(r16)
   17afc:	10c0800c 	andi	r3,r2,512
   17b00:	183fdb1e 	bne	r3,zero,17a70 <__alt_data_end+0xfc017a70>
   17b04:	10800094 	ori	r2,r2,2
   17b08:	80c010c4 	addi	r3,r16,67
   17b0c:	8080030d 	sth	r2,12(r16)
   17b10:	00800044 	movi	r2,1
   17b14:	80c00015 	stw	r3,0(r16)
   17b18:	80c00415 	stw	r3,16(r16)
   17b1c:	80800515 	stw	r2,20(r16)
   17b20:	003fd306 	br	17a70 <__alt_data_end+0xfc017a70>
   17b24:	04810004 	movi	r18,1024
   17b28:	003fc306 	br	17a38 <__alt_data_end+0xfc017a38>
   17b2c:	0027883a 	mov	r19,zero
   17b30:	04810004 	movi	r18,1024
   17b34:	003fc006 	br	17a38 <__alt_data_end+0xfc017a38>

00017b38 <memchr>:
   17b38:	208000cc 	andi	r2,r4,3
   17b3c:	280f883a 	mov	r7,r5
   17b40:	10003426 	beq	r2,zero,17c14 <memchr+0xdc>
   17b44:	30bfffc4 	addi	r2,r6,-1
   17b48:	30001a26 	beq	r6,zero,17bb4 <memchr+0x7c>
   17b4c:	20c00003 	ldbu	r3,0(r4)
   17b50:	29803fcc 	andi	r6,r5,255
   17b54:	30c0051e 	bne	r6,r3,17b6c <memchr+0x34>
   17b58:	00001806 	br	17bbc <memchr+0x84>
   17b5c:	10001526 	beq	r2,zero,17bb4 <memchr+0x7c>
   17b60:	20c00003 	ldbu	r3,0(r4)
   17b64:	10bfffc4 	addi	r2,r2,-1
   17b68:	30c01426 	beq	r6,r3,17bbc <memchr+0x84>
   17b6c:	21000044 	addi	r4,r4,1
   17b70:	20c000cc 	andi	r3,r4,3
   17b74:	183ff91e 	bne	r3,zero,17b5c <__alt_data_end+0xfc017b5c>
   17b78:	020000c4 	movi	r8,3
   17b7c:	40801136 	bltu	r8,r2,17bc4 <memchr+0x8c>
   17b80:	10000c26 	beq	r2,zero,17bb4 <memchr+0x7c>
   17b84:	20c00003 	ldbu	r3,0(r4)
   17b88:	29403fcc 	andi	r5,r5,255
   17b8c:	28c00b26 	beq	r5,r3,17bbc <memchr+0x84>
   17b90:	20c00044 	addi	r3,r4,1
   17b94:	39803fcc 	andi	r6,r7,255
   17b98:	2089883a 	add	r4,r4,r2
   17b9c:	00000306 	br	17bac <memchr+0x74>
   17ba0:	18c00044 	addi	r3,r3,1
   17ba4:	197fffc3 	ldbu	r5,-1(r3)
   17ba8:	31400526 	beq	r6,r5,17bc0 <memchr+0x88>
   17bac:	1805883a 	mov	r2,r3
   17bb0:	20fffb1e 	bne	r4,r3,17ba0 <__alt_data_end+0xfc017ba0>
   17bb4:	0005883a 	mov	r2,zero
   17bb8:	f800283a 	ret
   17bbc:	2005883a 	mov	r2,r4
   17bc0:	f800283a 	ret
   17bc4:	28c03fcc 	andi	r3,r5,255
   17bc8:	1812923a 	slli	r9,r3,8
   17bcc:	02ffbff4 	movhi	r11,65279
   17bd0:	02a02074 	movhi	r10,32897
   17bd4:	48d2b03a 	or	r9,r9,r3
   17bd8:	4806943a 	slli	r3,r9,16
   17bdc:	5affbfc4 	addi	r11,r11,-257
   17be0:	52a02004 	addi	r10,r10,-32640
   17be4:	48d2b03a 	or	r9,r9,r3
   17be8:	20c00017 	ldw	r3,0(r4)
   17bec:	48c6f03a 	xor	r3,r9,r3
   17bf0:	1acd883a 	add	r6,r3,r11
   17bf4:	00c6303a 	nor	r3,zero,r3
   17bf8:	30c6703a 	and	r3,r6,r3
   17bfc:	1a86703a 	and	r3,r3,r10
   17c00:	183fe01e 	bne	r3,zero,17b84 <__alt_data_end+0xfc017b84>
   17c04:	10bfff04 	addi	r2,r2,-4
   17c08:	21000104 	addi	r4,r4,4
   17c0c:	40bff636 	bltu	r8,r2,17be8 <__alt_data_end+0xfc017be8>
   17c10:	003fdb06 	br	17b80 <__alt_data_end+0xfc017b80>
   17c14:	3005883a 	mov	r2,r6
   17c18:	003fd706 	br	17b78 <__alt_data_end+0xfc017b78>

00017c1c <memmove>:
   17c1c:	2005883a 	mov	r2,r4
   17c20:	29000b2e 	bgeu	r5,r4,17c50 <memmove+0x34>
   17c24:	298f883a 	add	r7,r5,r6
   17c28:	21c0092e 	bgeu	r4,r7,17c50 <memmove+0x34>
   17c2c:	2187883a 	add	r3,r4,r6
   17c30:	198bc83a 	sub	r5,r3,r6
   17c34:	30004826 	beq	r6,zero,17d58 <memmove+0x13c>
   17c38:	39ffffc4 	addi	r7,r7,-1
   17c3c:	39000003 	ldbu	r4,0(r7)
   17c40:	18ffffc4 	addi	r3,r3,-1
   17c44:	19000005 	stb	r4,0(r3)
   17c48:	28fffb1e 	bne	r5,r3,17c38 <__alt_data_end+0xfc017c38>
   17c4c:	f800283a 	ret
   17c50:	00c003c4 	movi	r3,15
   17c54:	1980412e 	bgeu	r3,r6,17d5c <memmove+0x140>
   17c58:	2886b03a 	or	r3,r5,r2
   17c5c:	18c000cc 	andi	r3,r3,3
   17c60:	1800401e 	bne	r3,zero,17d64 <memmove+0x148>
   17c64:	33fffc04 	addi	r15,r6,-16
   17c68:	781ed13a 	srli	r15,r15,4
   17c6c:	28c00104 	addi	r3,r5,4
   17c70:	13400104 	addi	r13,r2,4
   17c74:	781c913a 	slli	r14,r15,4
   17c78:	2b000204 	addi	r12,r5,8
   17c7c:	12c00204 	addi	r11,r2,8
   17c80:	73800504 	addi	r14,r14,20
   17c84:	2a800304 	addi	r10,r5,12
   17c88:	12400304 	addi	r9,r2,12
   17c8c:	2b9d883a 	add	r14,r5,r14
   17c90:	2811883a 	mov	r8,r5
   17c94:	100f883a 	mov	r7,r2
   17c98:	41000017 	ldw	r4,0(r8)
   17c9c:	39c00404 	addi	r7,r7,16
   17ca0:	18c00404 	addi	r3,r3,16
   17ca4:	393ffc15 	stw	r4,-16(r7)
   17ca8:	193ffc17 	ldw	r4,-16(r3)
   17cac:	6b400404 	addi	r13,r13,16
   17cb0:	5ac00404 	addi	r11,r11,16
   17cb4:	693ffc15 	stw	r4,-16(r13)
   17cb8:	61000017 	ldw	r4,0(r12)
   17cbc:	4a400404 	addi	r9,r9,16
   17cc0:	42000404 	addi	r8,r8,16
   17cc4:	593ffc15 	stw	r4,-16(r11)
   17cc8:	51000017 	ldw	r4,0(r10)
   17ccc:	63000404 	addi	r12,r12,16
   17cd0:	52800404 	addi	r10,r10,16
   17cd4:	493ffc15 	stw	r4,-16(r9)
   17cd8:	1bbfef1e 	bne	r3,r14,17c98 <__alt_data_end+0xfc017c98>
   17cdc:	79000044 	addi	r4,r15,1
   17ce0:	2008913a 	slli	r4,r4,4
   17ce4:	328003cc 	andi	r10,r6,15
   17ce8:	02c000c4 	movi	r11,3
   17cec:	1107883a 	add	r3,r2,r4
   17cf0:	290b883a 	add	r5,r5,r4
   17cf4:	5a801e2e 	bgeu	r11,r10,17d70 <memmove+0x154>
   17cf8:	1813883a 	mov	r9,r3
   17cfc:	2811883a 	mov	r8,r5
   17d00:	500f883a 	mov	r7,r10
   17d04:	41000017 	ldw	r4,0(r8)
   17d08:	4a400104 	addi	r9,r9,4
   17d0c:	39ffff04 	addi	r7,r7,-4
   17d10:	493fff15 	stw	r4,-4(r9)
   17d14:	42000104 	addi	r8,r8,4
   17d18:	59fffa36 	bltu	r11,r7,17d04 <__alt_data_end+0xfc017d04>
   17d1c:	513fff04 	addi	r4,r10,-4
   17d20:	2008d0ba 	srli	r4,r4,2
   17d24:	318000cc 	andi	r6,r6,3
   17d28:	21000044 	addi	r4,r4,1
   17d2c:	2109883a 	add	r4,r4,r4
   17d30:	2109883a 	add	r4,r4,r4
   17d34:	1907883a 	add	r3,r3,r4
   17d38:	290b883a 	add	r5,r5,r4
   17d3c:	30000b26 	beq	r6,zero,17d6c <memmove+0x150>
   17d40:	198d883a 	add	r6,r3,r6
   17d44:	29c00003 	ldbu	r7,0(r5)
   17d48:	18c00044 	addi	r3,r3,1
   17d4c:	29400044 	addi	r5,r5,1
   17d50:	19ffffc5 	stb	r7,-1(r3)
   17d54:	19bffb1e 	bne	r3,r6,17d44 <__alt_data_end+0xfc017d44>
   17d58:	f800283a 	ret
   17d5c:	1007883a 	mov	r3,r2
   17d60:	003ff606 	br	17d3c <__alt_data_end+0xfc017d3c>
   17d64:	1007883a 	mov	r3,r2
   17d68:	003ff506 	br	17d40 <__alt_data_end+0xfc017d40>
   17d6c:	f800283a 	ret
   17d70:	500d883a 	mov	r6,r10
   17d74:	003ff106 	br	17d3c <__alt_data_end+0xfc017d3c>

00017d78 <_Balloc>:
   17d78:	20801317 	ldw	r2,76(r4)
   17d7c:	defffc04 	addi	sp,sp,-16
   17d80:	dc400115 	stw	r17,4(sp)
   17d84:	dc000015 	stw	r16,0(sp)
   17d88:	dfc00315 	stw	ra,12(sp)
   17d8c:	dc800215 	stw	r18,8(sp)
   17d90:	2023883a 	mov	r17,r4
   17d94:	2821883a 	mov	r16,r5
   17d98:	10000f26 	beq	r2,zero,17dd8 <_Balloc+0x60>
   17d9c:	8407883a 	add	r3,r16,r16
   17da0:	18c7883a 	add	r3,r3,r3
   17da4:	10c7883a 	add	r3,r2,r3
   17da8:	18800017 	ldw	r2,0(r3)
   17dac:	10001126 	beq	r2,zero,17df4 <_Balloc+0x7c>
   17db0:	11000017 	ldw	r4,0(r2)
   17db4:	19000015 	stw	r4,0(r3)
   17db8:	10000415 	stw	zero,16(r2)
   17dbc:	10000315 	stw	zero,12(r2)
   17dc0:	dfc00317 	ldw	ra,12(sp)
   17dc4:	dc800217 	ldw	r18,8(sp)
   17dc8:	dc400117 	ldw	r17,4(sp)
   17dcc:	dc000017 	ldw	r16,0(sp)
   17dd0:	dec00404 	addi	sp,sp,16
   17dd4:	f800283a 	ret
   17dd8:	01800844 	movi	r6,33
   17ddc:	01400104 	movi	r5,4
   17de0:	001c5200 	call	1c520 <_calloc_r>
   17de4:	88801315 	stw	r2,76(r17)
   17de8:	103fec1e 	bne	r2,zero,17d9c <__alt_data_end+0xfc017d9c>
   17dec:	0005883a 	mov	r2,zero
   17df0:	003ff306 	br	17dc0 <__alt_data_end+0xfc017dc0>
   17df4:	01400044 	movi	r5,1
   17df8:	2c24983a 	sll	r18,r5,r16
   17dfc:	8809883a 	mov	r4,r17
   17e00:	91800144 	addi	r6,r18,5
   17e04:	318d883a 	add	r6,r6,r6
   17e08:	318d883a 	add	r6,r6,r6
   17e0c:	001c5200 	call	1c520 <_calloc_r>
   17e10:	103ff626 	beq	r2,zero,17dec <__alt_data_end+0xfc017dec>
   17e14:	14000115 	stw	r16,4(r2)
   17e18:	14800215 	stw	r18,8(r2)
   17e1c:	003fe606 	br	17db8 <__alt_data_end+0xfc017db8>

00017e20 <_Bfree>:
   17e20:	28000826 	beq	r5,zero,17e44 <_Bfree+0x24>
   17e24:	28c00117 	ldw	r3,4(r5)
   17e28:	20801317 	ldw	r2,76(r4)
   17e2c:	18c7883a 	add	r3,r3,r3
   17e30:	18c7883a 	add	r3,r3,r3
   17e34:	10c5883a 	add	r2,r2,r3
   17e38:	10c00017 	ldw	r3,0(r2)
   17e3c:	28c00015 	stw	r3,0(r5)
   17e40:	11400015 	stw	r5,0(r2)
   17e44:	f800283a 	ret

00017e48 <__multadd>:
   17e48:	defff704 	addi	sp,sp,-36
   17e4c:	dc800215 	stw	r18,8(sp)
   17e50:	2c800417 	ldw	r18,16(r5)
   17e54:	dd800615 	stw	r22,24(sp)
   17e58:	dd400515 	stw	r21,20(sp)
   17e5c:	dd000415 	stw	r20,16(sp)
   17e60:	dcc00315 	stw	r19,12(sp)
   17e64:	dc400115 	stw	r17,4(sp)
   17e68:	dc000015 	stw	r16,0(sp)
   17e6c:	dfc00815 	stw	ra,32(sp)
   17e70:	ddc00715 	stw	r23,28(sp)
   17e74:	2827883a 	mov	r19,r5
   17e78:	2029883a 	mov	r20,r4
   17e7c:	3023883a 	mov	r17,r6
   17e80:	3821883a 	mov	r16,r7
   17e84:	2d400504 	addi	r21,r5,20
   17e88:	002d883a 	mov	r22,zero
   17e8c:	adc00017 	ldw	r23,0(r21)
   17e90:	880b883a 	mov	r5,r17
   17e94:	ad400104 	addi	r21,r21,4
   17e98:	b93fffcc 	andi	r4,r23,65535
   17e9c:	000d9380 	call	d938 <__mulsi3>
   17ea0:	b808d43a 	srli	r4,r23,16
   17ea4:	880b883a 	mov	r5,r17
   17ea8:	1421883a 	add	r16,r2,r16
   17eac:	000d9380 	call	d938 <__mulsi3>
   17eb0:	800ed43a 	srli	r7,r16,16
   17eb4:	80ffffcc 	andi	r3,r16,65535
   17eb8:	b5800044 	addi	r22,r22,1
   17ebc:	11c5883a 	add	r2,r2,r7
   17ec0:	100e943a 	slli	r7,r2,16
   17ec4:	1020d43a 	srli	r16,r2,16
   17ec8:	38c7883a 	add	r3,r7,r3
   17ecc:	a8ffff15 	stw	r3,-4(r21)
   17ed0:	b4bfee16 	blt	r22,r18,17e8c <__alt_data_end+0xfc017e8c>
   17ed4:	80000926 	beq	r16,zero,17efc <__multadd+0xb4>
   17ed8:	98800217 	ldw	r2,8(r19)
   17edc:	9080130e 	bge	r18,r2,17f2c <__multadd+0xe4>
   17ee0:	90800144 	addi	r2,r18,5
   17ee4:	1085883a 	add	r2,r2,r2
   17ee8:	1085883a 	add	r2,r2,r2
   17eec:	9885883a 	add	r2,r19,r2
   17ef0:	14000015 	stw	r16,0(r2)
   17ef4:	94800044 	addi	r18,r18,1
   17ef8:	9c800415 	stw	r18,16(r19)
   17efc:	9805883a 	mov	r2,r19
   17f00:	dfc00817 	ldw	ra,32(sp)
   17f04:	ddc00717 	ldw	r23,28(sp)
   17f08:	dd800617 	ldw	r22,24(sp)
   17f0c:	dd400517 	ldw	r21,20(sp)
   17f10:	dd000417 	ldw	r20,16(sp)
   17f14:	dcc00317 	ldw	r19,12(sp)
   17f18:	dc800217 	ldw	r18,8(sp)
   17f1c:	dc400117 	ldw	r17,4(sp)
   17f20:	dc000017 	ldw	r16,0(sp)
   17f24:	dec00904 	addi	sp,sp,36
   17f28:	f800283a 	ret
   17f2c:	99400117 	ldw	r5,4(r19)
   17f30:	a009883a 	mov	r4,r20
   17f34:	29400044 	addi	r5,r5,1
   17f38:	0017d780 	call	17d78 <_Balloc>
   17f3c:	99800417 	ldw	r6,16(r19)
   17f40:	99400304 	addi	r5,r19,12
   17f44:	11000304 	addi	r4,r2,12
   17f48:	31800084 	addi	r6,r6,2
   17f4c:	318d883a 	add	r6,r6,r6
   17f50:	318d883a 	add	r6,r6,r6
   17f54:	1023883a 	mov	r17,r2
   17f58:	000fde80 	call	fde8 <memcpy>
   17f5c:	98000a26 	beq	r19,zero,17f88 <__multadd+0x140>
   17f60:	98c00117 	ldw	r3,4(r19)
   17f64:	a0801317 	ldw	r2,76(r20)
   17f68:	18c7883a 	add	r3,r3,r3
   17f6c:	18c7883a 	add	r3,r3,r3
   17f70:	10c5883a 	add	r2,r2,r3
   17f74:	10c00017 	ldw	r3,0(r2)
   17f78:	98c00015 	stw	r3,0(r19)
   17f7c:	14c00015 	stw	r19,0(r2)
   17f80:	8827883a 	mov	r19,r17
   17f84:	003fd606 	br	17ee0 <__alt_data_end+0xfc017ee0>
   17f88:	8827883a 	mov	r19,r17
   17f8c:	003fd406 	br	17ee0 <__alt_data_end+0xfc017ee0>

00017f90 <__s2b>:
   17f90:	defff904 	addi	sp,sp,-28
   17f94:	dc400115 	stw	r17,4(sp)
   17f98:	dc000015 	stw	r16,0(sp)
   17f9c:	2023883a 	mov	r17,r4
   17fa0:	2821883a 	mov	r16,r5
   17fa4:	39000204 	addi	r4,r7,8
   17fa8:	01400244 	movi	r5,9
   17fac:	dcc00315 	stw	r19,12(sp)
   17fb0:	dc800215 	stw	r18,8(sp)
   17fb4:	dfc00615 	stw	ra,24(sp)
   17fb8:	dd400515 	stw	r21,20(sp)
   17fbc:	dd000415 	stw	r20,16(sp)
   17fc0:	3825883a 	mov	r18,r7
   17fc4:	3027883a 	mov	r19,r6
   17fc8:	000d7840 	call	d784 <__divsi3>
   17fcc:	00c00044 	movi	r3,1
   17fd0:	000b883a 	mov	r5,zero
   17fd4:	1880030e 	bge	r3,r2,17fe4 <__s2b+0x54>
   17fd8:	18c7883a 	add	r3,r3,r3
   17fdc:	29400044 	addi	r5,r5,1
   17fe0:	18bffd16 	blt	r3,r2,17fd8 <__alt_data_end+0xfc017fd8>
   17fe4:	8809883a 	mov	r4,r17
   17fe8:	0017d780 	call	17d78 <_Balloc>
   17fec:	d8c00717 	ldw	r3,28(sp)
   17ff0:	10c00515 	stw	r3,20(r2)
   17ff4:	00c00044 	movi	r3,1
   17ff8:	10c00415 	stw	r3,16(r2)
   17ffc:	00c00244 	movi	r3,9
   18000:	1cc0210e 	bge	r3,r19,18088 <__s2b+0xf8>
   18004:	80eb883a 	add	r21,r16,r3
   18008:	a829883a 	mov	r20,r21
   1800c:	84e1883a 	add	r16,r16,r19
   18010:	a1c00007 	ldb	r7,0(r20)
   18014:	01800284 	movi	r6,10
   18018:	a5000044 	addi	r20,r20,1
   1801c:	100b883a 	mov	r5,r2
   18020:	39fff404 	addi	r7,r7,-48
   18024:	8809883a 	mov	r4,r17
   18028:	0017e480 	call	17e48 <__multadd>
   1802c:	a43ff81e 	bne	r20,r16,18010 <__alt_data_end+0xfc018010>
   18030:	ace1883a 	add	r16,r21,r19
   18034:	843ffe04 	addi	r16,r16,-8
   18038:	9c800a0e 	bge	r19,r18,18064 <__s2b+0xd4>
   1803c:	94e5c83a 	sub	r18,r18,r19
   18040:	84a5883a 	add	r18,r16,r18
   18044:	81c00007 	ldb	r7,0(r16)
   18048:	01800284 	movi	r6,10
   1804c:	84000044 	addi	r16,r16,1
   18050:	100b883a 	mov	r5,r2
   18054:	39fff404 	addi	r7,r7,-48
   18058:	8809883a 	mov	r4,r17
   1805c:	0017e480 	call	17e48 <__multadd>
   18060:	84bff81e 	bne	r16,r18,18044 <__alt_data_end+0xfc018044>
   18064:	dfc00617 	ldw	ra,24(sp)
   18068:	dd400517 	ldw	r21,20(sp)
   1806c:	dd000417 	ldw	r20,16(sp)
   18070:	dcc00317 	ldw	r19,12(sp)
   18074:	dc800217 	ldw	r18,8(sp)
   18078:	dc400117 	ldw	r17,4(sp)
   1807c:	dc000017 	ldw	r16,0(sp)
   18080:	dec00704 	addi	sp,sp,28
   18084:	f800283a 	ret
   18088:	84000284 	addi	r16,r16,10
   1808c:	1827883a 	mov	r19,r3
   18090:	003fe906 	br	18038 <__alt_data_end+0xfc018038>

00018094 <__hi0bits>:
   18094:	20bfffec 	andhi	r2,r4,65535
   18098:	1000141e 	bne	r2,zero,180ec <__hi0bits+0x58>
   1809c:	2008943a 	slli	r4,r4,16
   180a0:	00800404 	movi	r2,16
   180a4:	20ffc02c 	andhi	r3,r4,65280
   180a8:	1800021e 	bne	r3,zero,180b4 <__hi0bits+0x20>
   180ac:	2008923a 	slli	r4,r4,8
   180b0:	10800204 	addi	r2,r2,8
   180b4:	20fc002c 	andhi	r3,r4,61440
   180b8:	1800021e 	bne	r3,zero,180c4 <__hi0bits+0x30>
   180bc:	2008913a 	slli	r4,r4,4
   180c0:	10800104 	addi	r2,r2,4
   180c4:	20f0002c 	andhi	r3,r4,49152
   180c8:	1800031e 	bne	r3,zero,180d8 <__hi0bits+0x44>
   180cc:	2109883a 	add	r4,r4,r4
   180d0:	10800084 	addi	r2,r2,2
   180d4:	2109883a 	add	r4,r4,r4
   180d8:	20000316 	blt	r4,zero,180e8 <__hi0bits+0x54>
   180dc:	2110002c 	andhi	r4,r4,16384
   180e0:	2000041e 	bne	r4,zero,180f4 <__hi0bits+0x60>
   180e4:	00800804 	movi	r2,32
   180e8:	f800283a 	ret
   180ec:	0005883a 	mov	r2,zero
   180f0:	003fec06 	br	180a4 <__alt_data_end+0xfc0180a4>
   180f4:	10800044 	addi	r2,r2,1
   180f8:	f800283a 	ret

000180fc <__lo0bits>:
   180fc:	20c00017 	ldw	r3,0(r4)
   18100:	188001cc 	andi	r2,r3,7
   18104:	10000826 	beq	r2,zero,18128 <__lo0bits+0x2c>
   18108:	1880004c 	andi	r2,r3,1
   1810c:	1000211e 	bne	r2,zero,18194 <__lo0bits+0x98>
   18110:	1880008c 	andi	r2,r3,2
   18114:	1000211e 	bne	r2,zero,1819c <__lo0bits+0xa0>
   18118:	1806d0ba 	srli	r3,r3,2
   1811c:	00800084 	movi	r2,2
   18120:	20c00015 	stw	r3,0(r4)
   18124:	f800283a 	ret
   18128:	18bfffcc 	andi	r2,r3,65535
   1812c:	10001326 	beq	r2,zero,1817c <__lo0bits+0x80>
   18130:	0005883a 	mov	r2,zero
   18134:	19403fcc 	andi	r5,r3,255
   18138:	2800021e 	bne	r5,zero,18144 <__lo0bits+0x48>
   1813c:	1806d23a 	srli	r3,r3,8
   18140:	10800204 	addi	r2,r2,8
   18144:	194003cc 	andi	r5,r3,15
   18148:	2800021e 	bne	r5,zero,18154 <__lo0bits+0x58>
   1814c:	1806d13a 	srli	r3,r3,4
   18150:	10800104 	addi	r2,r2,4
   18154:	194000cc 	andi	r5,r3,3
   18158:	2800021e 	bne	r5,zero,18164 <__lo0bits+0x68>
   1815c:	1806d0ba 	srli	r3,r3,2
   18160:	10800084 	addi	r2,r2,2
   18164:	1940004c 	andi	r5,r3,1
   18168:	2800081e 	bne	r5,zero,1818c <__lo0bits+0x90>
   1816c:	1806d07a 	srli	r3,r3,1
   18170:	1800051e 	bne	r3,zero,18188 <__lo0bits+0x8c>
   18174:	00800804 	movi	r2,32
   18178:	f800283a 	ret
   1817c:	1806d43a 	srli	r3,r3,16
   18180:	00800404 	movi	r2,16
   18184:	003feb06 	br	18134 <__alt_data_end+0xfc018134>
   18188:	10800044 	addi	r2,r2,1
   1818c:	20c00015 	stw	r3,0(r4)
   18190:	f800283a 	ret
   18194:	0005883a 	mov	r2,zero
   18198:	f800283a 	ret
   1819c:	1806d07a 	srli	r3,r3,1
   181a0:	00800044 	movi	r2,1
   181a4:	20c00015 	stw	r3,0(r4)
   181a8:	f800283a 	ret

000181ac <__i2b>:
   181ac:	defffd04 	addi	sp,sp,-12
   181b0:	dc000015 	stw	r16,0(sp)
   181b4:	04000044 	movi	r16,1
   181b8:	dc400115 	stw	r17,4(sp)
   181bc:	2823883a 	mov	r17,r5
   181c0:	800b883a 	mov	r5,r16
   181c4:	dfc00215 	stw	ra,8(sp)
   181c8:	0017d780 	call	17d78 <_Balloc>
   181cc:	14400515 	stw	r17,20(r2)
   181d0:	14000415 	stw	r16,16(r2)
   181d4:	dfc00217 	ldw	ra,8(sp)
   181d8:	dc400117 	ldw	r17,4(sp)
   181dc:	dc000017 	ldw	r16,0(sp)
   181e0:	dec00304 	addi	sp,sp,12
   181e4:	f800283a 	ret

000181e8 <__multiply>:
   181e8:	deffef04 	addi	sp,sp,-68
   181ec:	dc400815 	stw	r17,32(sp)
   181f0:	dc000715 	stw	r16,28(sp)
   181f4:	34400417 	ldw	r17,16(r6)
   181f8:	2c000417 	ldw	r16,16(r5)
   181fc:	dd800d15 	stw	r22,52(sp)
   18200:	dc800915 	stw	r18,36(sp)
   18204:	dfc01015 	stw	ra,64(sp)
   18208:	df000f15 	stw	fp,60(sp)
   1820c:	ddc00e15 	stw	r23,56(sp)
   18210:	dd400c15 	stw	r21,48(sp)
   18214:	dd000b15 	stw	r20,44(sp)
   18218:	dcc00a15 	stw	r19,40(sp)
   1821c:	2825883a 	mov	r18,r5
   18220:	302d883a 	mov	r22,r6
   18224:	8440050e 	bge	r16,r17,1823c <__multiply+0x54>
   18228:	8007883a 	mov	r3,r16
   1822c:	3025883a 	mov	r18,r6
   18230:	8821883a 	mov	r16,r17
   18234:	282d883a 	mov	r22,r5
   18238:	1823883a 	mov	r17,r3
   1823c:	90800217 	ldw	r2,8(r18)
   18240:	8447883a 	add	r3,r16,r17
   18244:	d8c00215 	stw	r3,8(sp)
   18248:	91400117 	ldw	r5,4(r18)
   1824c:	10c0010e 	bge	r2,r3,18254 <__multiply+0x6c>
   18250:	29400044 	addi	r5,r5,1
   18254:	0017d780 	call	17d78 <_Balloc>
   18258:	d8c00217 	ldw	r3,8(sp)
   1825c:	d8800615 	stw	r2,24(sp)
   18260:	18eb883a 	add	r21,r3,r3
   18264:	ad6b883a 	add	r21,r21,r21
   18268:	10c00504 	addi	r3,r2,20
   1826c:	1d6b883a 	add	r21,r3,r21
   18270:	d8c00115 	stw	r3,4(sp)
   18274:	dd400315 	stw	r21,12(sp)
   18278:	1805883a 	mov	r2,r3
   1827c:	1d40042e 	bgeu	r3,r21,18290 <__multiply+0xa8>
   18280:	d8c00317 	ldw	r3,12(sp)
   18284:	10000015 	stw	zero,0(r2)
   18288:	10800104 	addi	r2,r2,4
   1828c:	10fffc36 	bltu	r2,r3,18280 <__alt_data_end+0xfc018280>
   18290:	8c63883a 	add	r17,r17,r17
   18294:	b5800504 	addi	r22,r22,20
   18298:	8c63883a 	add	r17,r17,r17
   1829c:	94800504 	addi	r18,r18,20
   182a0:	8421883a 	add	r16,r16,r16
   182a4:	b463883a 	add	r17,r22,r17
   182a8:	8421883a 	add	r16,r16,r16
   182ac:	dd800015 	stw	r22,0(sp)
   182b0:	dc800415 	stw	r18,16(sp)
   182b4:	dc400515 	stw	r17,20(sp)
   182b8:	9429883a 	add	r20,r18,r16
   182bc:	b4404f2e 	bgeu	r22,r17,183fc <__multiply+0x214>
   182c0:	d8c00017 	ldw	r3,0(sp)
   182c4:	1c800017 	ldw	r18,0(r3)
   182c8:	947fffcc 	andi	r17,r18,65535
   182cc:	88001e26 	beq	r17,zero,18348 <__multiply+0x160>
   182d0:	dd800117 	ldw	r22,4(sp)
   182d4:	dd400417 	ldw	r21,16(sp)
   182d8:	0027883a 	mov	r19,zero
   182dc:	ac800017 	ldw	r18,0(r21)
   182e0:	b4000017 	ldw	r16,0(r22)
   182e4:	880b883a 	mov	r5,r17
   182e8:	913fffcc 	andi	r4,r18,65535
   182ec:	000d9380 	call	d938 <__mulsi3>
   182f0:	9008d43a 	srli	r4,r18,16
   182f4:	84bfffcc 	andi	r18,r16,65535
   182f8:	1485883a 	add	r2,r2,r18
   182fc:	14e5883a 	add	r18,r2,r19
   18300:	8020d43a 	srli	r16,r16,16
   18304:	9026d43a 	srli	r19,r18,16
   18308:	880b883a 	mov	r5,r17
   1830c:	000d9380 	call	d938 <__mulsi3>
   18310:	1405883a 	add	r2,r2,r16
   18314:	14e1883a 	add	r16,r2,r19
   18318:	90ffffcc 	andi	r3,r18,65535
   1831c:	8024943a 	slli	r18,r16,16
   18320:	ad400104 	addi	r21,r21,4
   18324:	b005883a 	mov	r2,r22
   18328:	90c6b03a 	or	r3,r18,r3
   1832c:	b0c00015 	stw	r3,0(r22)
   18330:	8026d43a 	srli	r19,r16,16
   18334:	b5800104 	addi	r22,r22,4
   18338:	ad3fe836 	bltu	r21,r20,182dc <__alt_data_end+0xfc0182dc>
   1833c:	d8c00017 	ldw	r3,0(sp)
   18340:	14c00115 	stw	r19,4(r2)
   18344:	1c800017 	ldw	r18,0(r3)
   18348:	9024d43a 	srli	r18,r18,16
   1834c:	90002226 	beq	r18,zero,183d8 <__multiply+0x1f0>
   18350:	d8c00117 	ldw	r3,4(sp)
   18354:	dd800417 	ldw	r22,16(sp)
   18358:	002f883a 	mov	r23,zero
   1835c:	1f000017 	ldw	fp,0(r3)
   18360:	1823883a 	mov	r17,r3
   18364:	182b883a 	mov	r21,r3
   18368:	e021883a 	mov	r16,fp
   1836c:	00000106 	br	18374 <__multiply+0x18c>
   18370:	982b883a 	mov	r21,r19
   18374:	b100000b 	ldhu	r4,0(r22)
   18378:	8020d43a 	srli	r16,r16,16
   1837c:	900b883a 	mov	r5,r18
   18380:	000d9380 	call	d938 <__mulsi3>
   18384:	1405883a 	add	r2,r2,r16
   18388:	15ef883a 	add	r23,r2,r23
   1838c:	b804943a 	slli	r2,r23,16
   18390:	e0ffffcc 	andi	r3,fp,65535
   18394:	8c400104 	addi	r17,r17,4
   18398:	10c6b03a 	or	r3,r2,r3
   1839c:	88ffff15 	stw	r3,-4(r17)
   183a0:	b5800104 	addi	r22,r22,4
   183a4:	b13fff17 	ldw	r4,-4(r22)
   183a8:	acc00104 	addi	r19,r21,4
   183ac:	900b883a 	mov	r5,r18
   183b0:	2008d43a 	srli	r4,r4,16
   183b4:	9c000017 	ldw	r16,0(r19)
   183b8:	000d9380 	call	d938 <__mulsi3>
   183bc:	b806d43a 	srli	r3,r23,16
   183c0:	813fffcc 	andi	r4,r16,65535
   183c4:	1105883a 	add	r2,r2,r4
   183c8:	10f9883a 	add	fp,r2,r3
   183cc:	e02ed43a 	srli	r23,fp,16
   183d0:	b53fe736 	bltu	r22,r20,18370 <__alt_data_end+0xfc018370>
   183d4:	af000115 	stw	fp,4(r21)
   183d8:	d8c00017 	ldw	r3,0(sp)
   183dc:	d9000517 	ldw	r4,20(sp)
   183e0:	18c00104 	addi	r3,r3,4
   183e4:	d8c00015 	stw	r3,0(sp)
   183e8:	d8c00117 	ldw	r3,4(sp)
   183ec:	18c00104 	addi	r3,r3,4
   183f0:	d8c00115 	stw	r3,4(sp)
   183f4:	d8c00017 	ldw	r3,0(sp)
   183f8:	193fb136 	bltu	r3,r4,182c0 <__alt_data_end+0xfc0182c0>
   183fc:	d8c00217 	ldw	r3,8(sp)
   18400:	00c00c0e 	bge	zero,r3,18434 <__multiply+0x24c>
   18404:	d8c00317 	ldw	r3,12(sp)
   18408:	18bfff17 	ldw	r2,-4(r3)
   1840c:	1d7fff04 	addi	r21,r3,-4
   18410:	10000326 	beq	r2,zero,18420 <__multiply+0x238>
   18414:	00000706 	br	18434 <__multiply+0x24c>
   18418:	a8800017 	ldw	r2,0(r21)
   1841c:	1000051e 	bne	r2,zero,18434 <__multiply+0x24c>
   18420:	d8c00217 	ldw	r3,8(sp)
   18424:	ad7fff04 	addi	r21,r21,-4
   18428:	18ffffc4 	addi	r3,r3,-1
   1842c:	d8c00215 	stw	r3,8(sp)
   18430:	183ff91e 	bne	r3,zero,18418 <__alt_data_end+0xfc018418>
   18434:	d8c00617 	ldw	r3,24(sp)
   18438:	d9000217 	ldw	r4,8(sp)
   1843c:	1805883a 	mov	r2,r3
   18440:	19000415 	stw	r4,16(r3)
   18444:	dfc01017 	ldw	ra,64(sp)
   18448:	df000f17 	ldw	fp,60(sp)
   1844c:	ddc00e17 	ldw	r23,56(sp)
   18450:	dd800d17 	ldw	r22,52(sp)
   18454:	dd400c17 	ldw	r21,48(sp)
   18458:	dd000b17 	ldw	r20,44(sp)
   1845c:	dcc00a17 	ldw	r19,40(sp)
   18460:	dc800917 	ldw	r18,36(sp)
   18464:	dc400817 	ldw	r17,32(sp)
   18468:	dc000717 	ldw	r16,28(sp)
   1846c:	dec01104 	addi	sp,sp,68
   18470:	f800283a 	ret

00018474 <__pow5mult>:
   18474:	defffa04 	addi	sp,sp,-24
   18478:	dcc00315 	stw	r19,12(sp)
   1847c:	dc000015 	stw	r16,0(sp)
   18480:	dfc00515 	stw	ra,20(sp)
   18484:	dd000415 	stw	r20,16(sp)
   18488:	dc800215 	stw	r18,8(sp)
   1848c:	dc400115 	stw	r17,4(sp)
   18490:	308000cc 	andi	r2,r6,3
   18494:	3021883a 	mov	r16,r6
   18498:	2027883a 	mov	r19,r4
   1849c:	10002f1e 	bne	r2,zero,1855c <__pow5mult+0xe8>
   184a0:	2825883a 	mov	r18,r5
   184a4:	8021d0ba 	srai	r16,r16,2
   184a8:	80001a26 	beq	r16,zero,18514 <__pow5mult+0xa0>
   184ac:	9c401217 	ldw	r17,72(r19)
   184b0:	8800061e 	bne	r17,zero,184cc <__pow5mult+0x58>
   184b4:	00003406 	br	18588 <__pow5mult+0x114>
   184b8:	8021d07a 	srai	r16,r16,1
   184bc:	80001526 	beq	r16,zero,18514 <__pow5mult+0xa0>
   184c0:	88800017 	ldw	r2,0(r17)
   184c4:	10001c26 	beq	r2,zero,18538 <__pow5mult+0xc4>
   184c8:	1023883a 	mov	r17,r2
   184cc:	8080004c 	andi	r2,r16,1
   184d0:	103ff926 	beq	r2,zero,184b8 <__alt_data_end+0xfc0184b8>
   184d4:	880d883a 	mov	r6,r17
   184d8:	900b883a 	mov	r5,r18
   184dc:	9809883a 	mov	r4,r19
   184e0:	00181e80 	call	181e8 <__multiply>
   184e4:	90001b26 	beq	r18,zero,18554 <__pow5mult+0xe0>
   184e8:	91000117 	ldw	r4,4(r18)
   184ec:	98c01317 	ldw	r3,76(r19)
   184f0:	8021d07a 	srai	r16,r16,1
   184f4:	2109883a 	add	r4,r4,r4
   184f8:	2109883a 	add	r4,r4,r4
   184fc:	1907883a 	add	r3,r3,r4
   18500:	19000017 	ldw	r4,0(r3)
   18504:	91000015 	stw	r4,0(r18)
   18508:	1c800015 	stw	r18,0(r3)
   1850c:	1025883a 	mov	r18,r2
   18510:	803feb1e 	bne	r16,zero,184c0 <__alt_data_end+0xfc0184c0>
   18514:	9005883a 	mov	r2,r18
   18518:	dfc00517 	ldw	ra,20(sp)
   1851c:	dd000417 	ldw	r20,16(sp)
   18520:	dcc00317 	ldw	r19,12(sp)
   18524:	dc800217 	ldw	r18,8(sp)
   18528:	dc400117 	ldw	r17,4(sp)
   1852c:	dc000017 	ldw	r16,0(sp)
   18530:	dec00604 	addi	sp,sp,24
   18534:	f800283a 	ret
   18538:	880d883a 	mov	r6,r17
   1853c:	880b883a 	mov	r5,r17
   18540:	9809883a 	mov	r4,r19
   18544:	00181e80 	call	181e8 <__multiply>
   18548:	88800015 	stw	r2,0(r17)
   1854c:	10000015 	stw	zero,0(r2)
   18550:	003fdd06 	br	184c8 <__alt_data_end+0xfc0184c8>
   18554:	1025883a 	mov	r18,r2
   18558:	003fd706 	br	184b8 <__alt_data_end+0xfc0184b8>
   1855c:	10bfffc4 	addi	r2,r2,-1
   18560:	1085883a 	add	r2,r2,r2
   18564:	00c000f4 	movhi	r3,3
   18568:	18eede04 	addi	r3,r3,-17544
   1856c:	1085883a 	add	r2,r2,r2
   18570:	1885883a 	add	r2,r3,r2
   18574:	11800017 	ldw	r6,0(r2)
   18578:	000f883a 	mov	r7,zero
   1857c:	0017e480 	call	17e48 <__multadd>
   18580:	1025883a 	mov	r18,r2
   18584:	003fc706 	br	184a4 <__alt_data_end+0xfc0184a4>
   18588:	05000044 	movi	r20,1
   1858c:	a00b883a 	mov	r5,r20
   18590:	9809883a 	mov	r4,r19
   18594:	0017d780 	call	17d78 <_Balloc>
   18598:	1023883a 	mov	r17,r2
   1859c:	00809c44 	movi	r2,625
   185a0:	88800515 	stw	r2,20(r17)
   185a4:	8d000415 	stw	r20,16(r17)
   185a8:	9c401215 	stw	r17,72(r19)
   185ac:	88000015 	stw	zero,0(r17)
   185b0:	003fc606 	br	184cc <__alt_data_end+0xfc0184cc>

000185b4 <__lshift>:
   185b4:	defff904 	addi	sp,sp,-28
   185b8:	dd400515 	stw	r21,20(sp)
   185bc:	dcc00315 	stw	r19,12(sp)
   185c0:	302bd17a 	srai	r21,r6,5
   185c4:	2cc00417 	ldw	r19,16(r5)
   185c8:	28800217 	ldw	r2,8(r5)
   185cc:	dd000415 	stw	r20,16(sp)
   185d0:	ace7883a 	add	r19,r21,r19
   185d4:	dc800215 	stw	r18,8(sp)
   185d8:	dc400115 	stw	r17,4(sp)
   185dc:	dc000015 	stw	r16,0(sp)
   185e0:	dfc00615 	stw	ra,24(sp)
   185e4:	9c000044 	addi	r16,r19,1
   185e8:	2823883a 	mov	r17,r5
   185ec:	3029883a 	mov	r20,r6
   185f0:	2025883a 	mov	r18,r4
   185f4:	29400117 	ldw	r5,4(r5)
   185f8:	1400030e 	bge	r2,r16,18608 <__lshift+0x54>
   185fc:	1085883a 	add	r2,r2,r2
   18600:	29400044 	addi	r5,r5,1
   18604:	143ffd16 	blt	r2,r16,185fc <__alt_data_end+0xfc0185fc>
   18608:	9009883a 	mov	r4,r18
   1860c:	0017d780 	call	17d78 <_Balloc>
   18610:	10c00504 	addi	r3,r2,20
   18614:	0540070e 	bge	zero,r21,18634 <__lshift+0x80>
   18618:	ad6b883a 	add	r21,r21,r21
   1861c:	ad6b883a 	add	r21,r21,r21
   18620:	1809883a 	mov	r4,r3
   18624:	1d47883a 	add	r3,r3,r21
   18628:	20000015 	stw	zero,0(r4)
   1862c:	21000104 	addi	r4,r4,4
   18630:	193ffd1e 	bne	r3,r4,18628 <__alt_data_end+0xfc018628>
   18634:	8a000417 	ldw	r8,16(r17)
   18638:	89000504 	addi	r4,r17,20
   1863c:	a18007cc 	andi	r6,r20,31
   18640:	4211883a 	add	r8,r8,r8
   18644:	4211883a 	add	r8,r8,r8
   18648:	2211883a 	add	r8,r4,r8
   1864c:	30002326 	beq	r6,zero,186dc <__lshift+0x128>
   18650:	02400804 	movi	r9,32
   18654:	4993c83a 	sub	r9,r9,r6
   18658:	000b883a 	mov	r5,zero
   1865c:	21c00017 	ldw	r7,0(r4)
   18660:	1815883a 	mov	r10,r3
   18664:	18c00104 	addi	r3,r3,4
   18668:	398e983a 	sll	r7,r7,r6
   1866c:	21000104 	addi	r4,r4,4
   18670:	394ab03a 	or	r5,r7,r5
   18674:	197fff15 	stw	r5,-4(r3)
   18678:	217fff17 	ldw	r5,-4(r4)
   1867c:	2a4ad83a 	srl	r5,r5,r9
   18680:	223ff636 	bltu	r4,r8,1865c <__alt_data_end+0xfc01865c>
   18684:	51400115 	stw	r5,4(r10)
   18688:	28001a1e 	bne	r5,zero,186f4 <__lshift+0x140>
   1868c:	843fffc4 	addi	r16,r16,-1
   18690:	14000415 	stw	r16,16(r2)
   18694:	88000826 	beq	r17,zero,186b8 <__lshift+0x104>
   18698:	89000117 	ldw	r4,4(r17)
   1869c:	90c01317 	ldw	r3,76(r18)
   186a0:	2109883a 	add	r4,r4,r4
   186a4:	2109883a 	add	r4,r4,r4
   186a8:	1907883a 	add	r3,r3,r4
   186ac:	19000017 	ldw	r4,0(r3)
   186b0:	89000015 	stw	r4,0(r17)
   186b4:	1c400015 	stw	r17,0(r3)
   186b8:	dfc00617 	ldw	ra,24(sp)
   186bc:	dd400517 	ldw	r21,20(sp)
   186c0:	dd000417 	ldw	r20,16(sp)
   186c4:	dcc00317 	ldw	r19,12(sp)
   186c8:	dc800217 	ldw	r18,8(sp)
   186cc:	dc400117 	ldw	r17,4(sp)
   186d0:	dc000017 	ldw	r16,0(sp)
   186d4:	dec00704 	addi	sp,sp,28
   186d8:	f800283a 	ret
   186dc:	21400017 	ldw	r5,0(r4)
   186e0:	18c00104 	addi	r3,r3,4
   186e4:	21000104 	addi	r4,r4,4
   186e8:	197fff15 	stw	r5,-4(r3)
   186ec:	223ffb36 	bltu	r4,r8,186dc <__alt_data_end+0xfc0186dc>
   186f0:	003fe606 	br	1868c <__alt_data_end+0xfc01868c>
   186f4:	9c000084 	addi	r16,r19,2
   186f8:	003fe406 	br	1868c <__alt_data_end+0xfc01868c>

000186fc <__mcmp>:
   186fc:	20800417 	ldw	r2,16(r4)
   18700:	28c00417 	ldw	r3,16(r5)
   18704:	10c5c83a 	sub	r2,r2,r3
   18708:	1000111e 	bne	r2,zero,18750 <__mcmp+0x54>
   1870c:	18c7883a 	add	r3,r3,r3
   18710:	18c7883a 	add	r3,r3,r3
   18714:	21000504 	addi	r4,r4,20
   18718:	29400504 	addi	r5,r5,20
   1871c:	20c5883a 	add	r2,r4,r3
   18720:	28cb883a 	add	r5,r5,r3
   18724:	00000106 	br	1872c <__mcmp+0x30>
   18728:	20800a2e 	bgeu	r4,r2,18754 <__mcmp+0x58>
   1872c:	10bfff04 	addi	r2,r2,-4
   18730:	297fff04 	addi	r5,r5,-4
   18734:	11800017 	ldw	r6,0(r2)
   18738:	28c00017 	ldw	r3,0(r5)
   1873c:	30fffa26 	beq	r6,r3,18728 <__alt_data_end+0xfc018728>
   18740:	30c00236 	bltu	r6,r3,1874c <__mcmp+0x50>
   18744:	00800044 	movi	r2,1
   18748:	f800283a 	ret
   1874c:	00bfffc4 	movi	r2,-1
   18750:	f800283a 	ret
   18754:	0005883a 	mov	r2,zero
   18758:	f800283a 	ret

0001875c <__mdiff>:
   1875c:	28c00417 	ldw	r3,16(r5)
   18760:	30800417 	ldw	r2,16(r6)
   18764:	defffa04 	addi	sp,sp,-24
   18768:	dcc00315 	stw	r19,12(sp)
   1876c:	dc800215 	stw	r18,8(sp)
   18770:	dfc00515 	stw	ra,20(sp)
   18774:	dd000415 	stw	r20,16(sp)
   18778:	dc400115 	stw	r17,4(sp)
   1877c:	dc000015 	stw	r16,0(sp)
   18780:	1887c83a 	sub	r3,r3,r2
   18784:	2825883a 	mov	r18,r5
   18788:	3027883a 	mov	r19,r6
   1878c:	1800141e 	bne	r3,zero,187e0 <__mdiff+0x84>
   18790:	1085883a 	add	r2,r2,r2
   18794:	1085883a 	add	r2,r2,r2
   18798:	2a000504 	addi	r8,r5,20
   1879c:	34000504 	addi	r16,r6,20
   187a0:	4087883a 	add	r3,r8,r2
   187a4:	8085883a 	add	r2,r16,r2
   187a8:	00000106 	br	187b0 <__mdiff+0x54>
   187ac:	40c0592e 	bgeu	r8,r3,18914 <__mdiff+0x1b8>
   187b0:	18ffff04 	addi	r3,r3,-4
   187b4:	10bfff04 	addi	r2,r2,-4
   187b8:	19c00017 	ldw	r7,0(r3)
   187bc:	11400017 	ldw	r5,0(r2)
   187c0:	397ffa26 	beq	r7,r5,187ac <__alt_data_end+0xfc0187ac>
   187c4:	3940592e 	bgeu	r7,r5,1892c <__mdiff+0x1d0>
   187c8:	9005883a 	mov	r2,r18
   187cc:	4023883a 	mov	r17,r8
   187d0:	9825883a 	mov	r18,r19
   187d4:	05000044 	movi	r20,1
   187d8:	1027883a 	mov	r19,r2
   187dc:	00000406 	br	187f0 <__mdiff+0x94>
   187e0:	18005616 	blt	r3,zero,1893c <__mdiff+0x1e0>
   187e4:	34400504 	addi	r17,r6,20
   187e8:	2c000504 	addi	r16,r5,20
   187ec:	0029883a 	mov	r20,zero
   187f0:	91400117 	ldw	r5,4(r18)
   187f4:	0017d780 	call	17d78 <_Balloc>
   187f8:	92400417 	ldw	r9,16(r18)
   187fc:	9b000417 	ldw	r12,16(r19)
   18800:	12c00504 	addi	r11,r2,20
   18804:	4a51883a 	add	r8,r9,r9
   18808:	6319883a 	add	r12,r12,r12
   1880c:	4211883a 	add	r8,r8,r8
   18810:	6319883a 	add	r12,r12,r12
   18814:	15000315 	stw	r20,12(r2)
   18818:	8211883a 	add	r8,r16,r8
   1881c:	8b19883a 	add	r12,r17,r12
   18820:	0007883a 	mov	r3,zero
   18824:	81400017 	ldw	r5,0(r16)
   18828:	89c00017 	ldw	r7,0(r17)
   1882c:	59800104 	addi	r6,r11,4
   18830:	293fffcc 	andi	r4,r5,65535
   18834:	20c7883a 	add	r3,r4,r3
   18838:	393fffcc 	andi	r4,r7,65535
   1883c:	1909c83a 	sub	r4,r3,r4
   18840:	280ad43a 	srli	r5,r5,16
   18844:	380ed43a 	srli	r7,r7,16
   18848:	2007d43a 	srai	r3,r4,16
   1884c:	213fffcc 	andi	r4,r4,65535
   18850:	29cbc83a 	sub	r5,r5,r7
   18854:	28c7883a 	add	r3,r5,r3
   18858:	180a943a 	slli	r5,r3,16
   1885c:	8c400104 	addi	r17,r17,4
   18860:	84000104 	addi	r16,r16,4
   18864:	2908b03a 	or	r4,r5,r4
   18868:	59000015 	stw	r4,0(r11)
   1886c:	1807d43a 	srai	r3,r3,16
   18870:	3015883a 	mov	r10,r6
   18874:	3017883a 	mov	r11,r6
   18878:	8b3fea36 	bltu	r17,r12,18824 <__alt_data_end+0xfc018824>
   1887c:	8200162e 	bgeu	r16,r8,188d8 <__mdiff+0x17c>
   18880:	8017883a 	mov	r11,r16
   18884:	59400017 	ldw	r5,0(r11)
   18888:	31800104 	addi	r6,r6,4
   1888c:	5ac00104 	addi	r11,r11,4
   18890:	293fffcc 	andi	r4,r5,65535
   18894:	20c7883a 	add	r3,r4,r3
   18898:	280ed43a 	srli	r7,r5,16
   1889c:	180bd43a 	srai	r5,r3,16
   188a0:	193fffcc 	andi	r4,r3,65535
   188a4:	3947883a 	add	r3,r7,r5
   188a8:	180a943a 	slli	r5,r3,16
   188ac:	1807d43a 	srai	r3,r3,16
   188b0:	2908b03a 	or	r4,r5,r4
   188b4:	313fff15 	stw	r4,-4(r6)
   188b8:	5a3ff236 	bltu	r11,r8,18884 <__alt_data_end+0xfc018884>
   188bc:	0406303a 	nor	r3,zero,r16
   188c0:	1a07883a 	add	r3,r3,r8
   188c4:	1806d0ba 	srli	r3,r3,2
   188c8:	18c00044 	addi	r3,r3,1
   188cc:	18c7883a 	add	r3,r3,r3
   188d0:	18c7883a 	add	r3,r3,r3
   188d4:	50d5883a 	add	r10,r10,r3
   188d8:	50ffff04 	addi	r3,r10,-4
   188dc:	2000041e 	bne	r4,zero,188f0 <__mdiff+0x194>
   188e0:	18ffff04 	addi	r3,r3,-4
   188e4:	19000017 	ldw	r4,0(r3)
   188e8:	4a7fffc4 	addi	r9,r9,-1
   188ec:	203ffc26 	beq	r4,zero,188e0 <__alt_data_end+0xfc0188e0>
   188f0:	12400415 	stw	r9,16(r2)
   188f4:	dfc00517 	ldw	ra,20(sp)
   188f8:	dd000417 	ldw	r20,16(sp)
   188fc:	dcc00317 	ldw	r19,12(sp)
   18900:	dc800217 	ldw	r18,8(sp)
   18904:	dc400117 	ldw	r17,4(sp)
   18908:	dc000017 	ldw	r16,0(sp)
   1890c:	dec00604 	addi	sp,sp,24
   18910:	f800283a 	ret
   18914:	000b883a 	mov	r5,zero
   18918:	0017d780 	call	17d78 <_Balloc>
   1891c:	00c00044 	movi	r3,1
   18920:	10c00415 	stw	r3,16(r2)
   18924:	10000515 	stw	zero,20(r2)
   18928:	003ff206 	br	188f4 <__alt_data_end+0xfc0188f4>
   1892c:	8023883a 	mov	r17,r16
   18930:	0029883a 	mov	r20,zero
   18934:	4021883a 	mov	r16,r8
   18938:	003fad06 	br	187f0 <__alt_data_end+0xfc0187f0>
   1893c:	9005883a 	mov	r2,r18
   18940:	94400504 	addi	r17,r18,20
   18944:	9c000504 	addi	r16,r19,20
   18948:	9825883a 	mov	r18,r19
   1894c:	05000044 	movi	r20,1
   18950:	1027883a 	mov	r19,r2
   18954:	003fa606 	br	187f0 <__alt_data_end+0xfc0187f0>

00018958 <__ulp>:
   18958:	295ffc2c 	andhi	r5,r5,32752
   1895c:	00bf3034 	movhi	r2,64704
   18960:	2887883a 	add	r3,r5,r2
   18964:	00c0020e 	bge	zero,r3,18970 <__ulp+0x18>
   18968:	0005883a 	mov	r2,zero
   1896c:	f800283a 	ret
   18970:	00c7c83a 	sub	r3,zero,r3
   18974:	1807d53a 	srai	r3,r3,20
   18978:	008004c4 	movi	r2,19
   1897c:	10c00b0e 	bge	r2,r3,189ac <__ulp+0x54>
   18980:	18bffb04 	addi	r2,r3,-20
   18984:	01000784 	movi	r4,30
   18988:	0007883a 	mov	r3,zero
   1898c:	20800516 	blt	r4,r2,189a4 <__ulp+0x4c>
   18990:	010007c4 	movi	r4,31
   18994:	2089c83a 	sub	r4,r4,r2
   18998:	00800044 	movi	r2,1
   1899c:	1104983a 	sll	r2,r2,r4
   189a0:	f800283a 	ret
   189a4:	00800044 	movi	r2,1
   189a8:	f800283a 	ret
   189ac:	01400234 	movhi	r5,8
   189b0:	28c7d83a 	sra	r3,r5,r3
   189b4:	0005883a 	mov	r2,zero
   189b8:	f800283a 	ret

000189bc <__b2d>:
   189bc:	defffa04 	addi	sp,sp,-24
   189c0:	dc000015 	stw	r16,0(sp)
   189c4:	24000417 	ldw	r16,16(r4)
   189c8:	dc400115 	stw	r17,4(sp)
   189cc:	24400504 	addi	r17,r4,20
   189d0:	8421883a 	add	r16,r16,r16
   189d4:	8421883a 	add	r16,r16,r16
   189d8:	8c21883a 	add	r16,r17,r16
   189dc:	dc800215 	stw	r18,8(sp)
   189e0:	84bfff17 	ldw	r18,-4(r16)
   189e4:	dd000415 	stw	r20,16(sp)
   189e8:	dcc00315 	stw	r19,12(sp)
   189ec:	9009883a 	mov	r4,r18
   189f0:	2829883a 	mov	r20,r5
   189f4:	dfc00515 	stw	ra,20(sp)
   189f8:	00180940 	call	18094 <__hi0bits>
   189fc:	00c00804 	movi	r3,32
   18a00:	1889c83a 	sub	r4,r3,r2
   18a04:	a1000015 	stw	r4,0(r20)
   18a08:	01000284 	movi	r4,10
   18a0c:	84ffff04 	addi	r19,r16,-4
   18a10:	20801216 	blt	r4,r2,18a5c <__b2d+0xa0>
   18a14:	018002c4 	movi	r6,11
   18a18:	308dc83a 	sub	r6,r6,r2
   18a1c:	9186d83a 	srl	r3,r18,r6
   18a20:	18cffc34 	orhi	r3,r3,16368
   18a24:	8cc0212e 	bgeu	r17,r19,18aac <__b2d+0xf0>
   18a28:	813ffe17 	ldw	r4,-8(r16)
   18a2c:	218cd83a 	srl	r6,r4,r6
   18a30:	10800544 	addi	r2,r2,21
   18a34:	9084983a 	sll	r2,r18,r2
   18a38:	1184b03a 	or	r2,r2,r6
   18a3c:	dfc00517 	ldw	ra,20(sp)
   18a40:	dd000417 	ldw	r20,16(sp)
   18a44:	dcc00317 	ldw	r19,12(sp)
   18a48:	dc800217 	ldw	r18,8(sp)
   18a4c:	dc400117 	ldw	r17,4(sp)
   18a50:	dc000017 	ldw	r16,0(sp)
   18a54:	dec00604 	addi	sp,sp,24
   18a58:	f800283a 	ret
   18a5c:	8cc00f2e 	bgeu	r17,r19,18a9c <__b2d+0xe0>
   18a60:	117ffd44 	addi	r5,r2,-11
   18a64:	80bffe17 	ldw	r2,-8(r16)
   18a68:	28000e26 	beq	r5,zero,18aa4 <__b2d+0xe8>
   18a6c:	1949c83a 	sub	r4,r3,r5
   18a70:	9164983a 	sll	r18,r18,r5
   18a74:	1106d83a 	srl	r3,r2,r4
   18a78:	81bffe04 	addi	r6,r16,-8
   18a7c:	948ffc34 	orhi	r18,r18,16368
   18a80:	90c6b03a 	or	r3,r18,r3
   18a84:	89800e2e 	bgeu	r17,r6,18ac0 <__b2d+0x104>
   18a88:	81bffd17 	ldw	r6,-12(r16)
   18a8c:	1144983a 	sll	r2,r2,r5
   18a90:	310ad83a 	srl	r5,r6,r4
   18a94:	2884b03a 	or	r2,r5,r2
   18a98:	003fe806 	br	18a3c <__alt_data_end+0xfc018a3c>
   18a9c:	10bffd44 	addi	r2,r2,-11
   18aa0:	1000041e 	bne	r2,zero,18ab4 <__b2d+0xf8>
   18aa4:	90cffc34 	orhi	r3,r18,16368
   18aa8:	003fe406 	br	18a3c <__alt_data_end+0xfc018a3c>
   18aac:	000d883a 	mov	r6,zero
   18ab0:	003fdf06 	br	18a30 <__alt_data_end+0xfc018a30>
   18ab4:	90a4983a 	sll	r18,r18,r2
   18ab8:	0005883a 	mov	r2,zero
   18abc:	003ff906 	br	18aa4 <__alt_data_end+0xfc018aa4>
   18ac0:	1144983a 	sll	r2,r2,r5
   18ac4:	003fdd06 	br	18a3c <__alt_data_end+0xfc018a3c>

00018ac8 <__d2b>:
   18ac8:	defff804 	addi	sp,sp,-32
   18acc:	dc000215 	stw	r16,8(sp)
   18ad0:	3021883a 	mov	r16,r6
   18ad4:	dc400315 	stw	r17,12(sp)
   18ad8:	8022907a 	slli	r17,r16,1
   18adc:	dd000615 	stw	r20,24(sp)
   18ae0:	2829883a 	mov	r20,r5
   18ae4:	01400044 	movi	r5,1
   18ae8:	dcc00515 	stw	r19,20(sp)
   18aec:	dc800415 	stw	r18,16(sp)
   18af0:	dfc00715 	stw	ra,28(sp)
   18af4:	3825883a 	mov	r18,r7
   18af8:	8822d57a 	srli	r17,r17,21
   18afc:	0017d780 	call	17d78 <_Balloc>
   18b00:	1027883a 	mov	r19,r2
   18b04:	00800434 	movhi	r2,16
   18b08:	10bfffc4 	addi	r2,r2,-1
   18b0c:	808c703a 	and	r6,r16,r2
   18b10:	88000126 	beq	r17,zero,18b18 <__d2b+0x50>
   18b14:	31800434 	orhi	r6,r6,16
   18b18:	d9800015 	stw	r6,0(sp)
   18b1c:	a0002426 	beq	r20,zero,18bb0 <__d2b+0xe8>
   18b20:	d9000104 	addi	r4,sp,4
   18b24:	dd000115 	stw	r20,4(sp)
   18b28:	00180fc0 	call	180fc <__lo0bits>
   18b2c:	d8c00017 	ldw	r3,0(sp)
   18b30:	10002f1e 	bne	r2,zero,18bf0 <__d2b+0x128>
   18b34:	d9000117 	ldw	r4,4(sp)
   18b38:	99000515 	stw	r4,20(r19)
   18b3c:	1821003a 	cmpeq	r16,r3,zero
   18b40:	01000084 	movi	r4,2
   18b44:	2421c83a 	sub	r16,r4,r16
   18b48:	98c00615 	stw	r3,24(r19)
   18b4c:	9c000415 	stw	r16,16(r19)
   18b50:	88001f1e 	bne	r17,zero,18bd0 <__d2b+0x108>
   18b54:	10bef384 	addi	r2,r2,-1074
   18b58:	90800015 	stw	r2,0(r18)
   18b5c:	00900034 	movhi	r2,16384
   18b60:	10bfffc4 	addi	r2,r2,-1
   18b64:	8085883a 	add	r2,r16,r2
   18b68:	1085883a 	add	r2,r2,r2
   18b6c:	1085883a 	add	r2,r2,r2
   18b70:	9885883a 	add	r2,r19,r2
   18b74:	11000517 	ldw	r4,20(r2)
   18b78:	8020917a 	slli	r16,r16,5
   18b7c:	00180940 	call	18094 <__hi0bits>
   18b80:	d8c00817 	ldw	r3,32(sp)
   18b84:	8085c83a 	sub	r2,r16,r2
   18b88:	18800015 	stw	r2,0(r3)
   18b8c:	9805883a 	mov	r2,r19
   18b90:	dfc00717 	ldw	ra,28(sp)
   18b94:	dd000617 	ldw	r20,24(sp)
   18b98:	dcc00517 	ldw	r19,20(sp)
   18b9c:	dc800417 	ldw	r18,16(sp)
   18ba0:	dc400317 	ldw	r17,12(sp)
   18ba4:	dc000217 	ldw	r16,8(sp)
   18ba8:	dec00804 	addi	sp,sp,32
   18bac:	f800283a 	ret
   18bb0:	d809883a 	mov	r4,sp
   18bb4:	00180fc0 	call	180fc <__lo0bits>
   18bb8:	d8c00017 	ldw	r3,0(sp)
   18bbc:	04000044 	movi	r16,1
   18bc0:	9c000415 	stw	r16,16(r19)
   18bc4:	98c00515 	stw	r3,20(r19)
   18bc8:	10800804 	addi	r2,r2,32
   18bcc:	883fe126 	beq	r17,zero,18b54 <__alt_data_end+0xfc018b54>
   18bd0:	00c00d44 	movi	r3,53
   18bd4:	8c7ef344 	addi	r17,r17,-1075
   18bd8:	88a3883a 	add	r17,r17,r2
   18bdc:	1885c83a 	sub	r2,r3,r2
   18be0:	d8c00817 	ldw	r3,32(sp)
   18be4:	94400015 	stw	r17,0(r18)
   18be8:	18800015 	stw	r2,0(r3)
   18bec:	003fe706 	br	18b8c <__alt_data_end+0xfc018b8c>
   18bf0:	01000804 	movi	r4,32
   18bf4:	2089c83a 	sub	r4,r4,r2
   18bf8:	1908983a 	sll	r4,r3,r4
   18bfc:	d9400117 	ldw	r5,4(sp)
   18c00:	1886d83a 	srl	r3,r3,r2
   18c04:	2148b03a 	or	r4,r4,r5
   18c08:	99000515 	stw	r4,20(r19)
   18c0c:	d8c00015 	stw	r3,0(sp)
   18c10:	003fca06 	br	18b3c <__alt_data_end+0xfc018b3c>

00018c14 <__ratio>:
   18c14:	defff904 	addi	sp,sp,-28
   18c18:	dc400315 	stw	r17,12(sp)
   18c1c:	2823883a 	mov	r17,r5
   18c20:	d9400104 	addi	r5,sp,4
   18c24:	dfc00615 	stw	ra,24(sp)
   18c28:	dcc00515 	stw	r19,20(sp)
   18c2c:	dc800415 	stw	r18,16(sp)
   18c30:	2027883a 	mov	r19,r4
   18c34:	dc000215 	stw	r16,8(sp)
   18c38:	00189bc0 	call	189bc <__b2d>
   18c3c:	d80b883a 	mov	r5,sp
   18c40:	8809883a 	mov	r4,r17
   18c44:	1025883a 	mov	r18,r2
   18c48:	1821883a 	mov	r16,r3
   18c4c:	00189bc0 	call	189bc <__b2d>
   18c50:	8a000417 	ldw	r8,16(r17)
   18c54:	99000417 	ldw	r4,16(r19)
   18c58:	d9400117 	ldw	r5,4(sp)
   18c5c:	2209c83a 	sub	r4,r4,r8
   18c60:	2010917a 	slli	r8,r4,5
   18c64:	d9000017 	ldw	r4,0(sp)
   18c68:	2909c83a 	sub	r4,r5,r4
   18c6c:	4109883a 	add	r4,r8,r4
   18c70:	01000e0e 	bge	zero,r4,18cac <__ratio+0x98>
   18c74:	2008953a 	slli	r4,r4,20
   18c78:	2421883a 	add	r16,r4,r16
   18c7c:	100d883a 	mov	r6,r2
   18c80:	180f883a 	mov	r7,r3
   18c84:	9009883a 	mov	r4,r18
   18c88:	800b883a 	mov	r5,r16
   18c8c:	001e0cc0 	call	1e0cc <__divdf3>
   18c90:	dfc00617 	ldw	ra,24(sp)
   18c94:	dcc00517 	ldw	r19,20(sp)
   18c98:	dc800417 	ldw	r18,16(sp)
   18c9c:	dc400317 	ldw	r17,12(sp)
   18ca0:	dc000217 	ldw	r16,8(sp)
   18ca4:	dec00704 	addi	sp,sp,28
   18ca8:	f800283a 	ret
   18cac:	2008953a 	slli	r4,r4,20
   18cb0:	1907c83a 	sub	r3,r3,r4
   18cb4:	003ff106 	br	18c7c <__alt_data_end+0xfc018c7c>

00018cb8 <_mprec_log10>:
   18cb8:	defffe04 	addi	sp,sp,-8
   18cbc:	dc000015 	stw	r16,0(sp)
   18cc0:	dfc00115 	stw	ra,4(sp)
   18cc4:	008005c4 	movi	r2,23
   18cc8:	2021883a 	mov	r16,r4
   18ccc:	11000d0e 	bge	r2,r4,18d04 <_mprec_log10+0x4c>
   18cd0:	0005883a 	mov	r2,zero
   18cd4:	00cffc34 	movhi	r3,16368
   18cd8:	843fffc4 	addi	r16,r16,-1
   18cdc:	000d883a 	mov	r6,zero
   18ce0:	01d00934 	movhi	r7,16420
   18ce4:	1009883a 	mov	r4,r2
   18ce8:	180b883a 	mov	r5,r3
   18cec:	001ecf40 	call	1ecf4 <__muldf3>
   18cf0:	803ff91e 	bne	r16,zero,18cd8 <__alt_data_end+0xfc018cd8>
   18cf4:	dfc00117 	ldw	ra,4(sp)
   18cf8:	dc000017 	ldw	r16,0(sp)
   18cfc:	dec00204 	addi	sp,sp,8
   18d00:	f800283a 	ret
   18d04:	202090fa 	slli	r16,r4,3
   18d08:	008000f4 	movhi	r2,3
   18d0c:	10aef504 	addi	r2,r2,-17452
   18d10:	1421883a 	add	r16,r2,r16
   18d14:	80800017 	ldw	r2,0(r16)
   18d18:	80c00117 	ldw	r3,4(r16)
   18d1c:	dfc00117 	ldw	ra,4(sp)
   18d20:	dc000017 	ldw	r16,0(sp)
   18d24:	dec00204 	addi	sp,sp,8
   18d28:	f800283a 	ret

00018d2c <__copybits>:
   18d2c:	297fffc4 	addi	r5,r5,-1
   18d30:	280fd17a 	srai	r7,r5,5
   18d34:	30c00417 	ldw	r3,16(r6)
   18d38:	30800504 	addi	r2,r6,20
   18d3c:	39c00044 	addi	r7,r7,1
   18d40:	18c7883a 	add	r3,r3,r3
   18d44:	39cf883a 	add	r7,r7,r7
   18d48:	18c7883a 	add	r3,r3,r3
   18d4c:	39cf883a 	add	r7,r7,r7
   18d50:	10c7883a 	add	r3,r2,r3
   18d54:	21cf883a 	add	r7,r4,r7
   18d58:	10c00d2e 	bgeu	r2,r3,18d90 <__copybits+0x64>
   18d5c:	200b883a 	mov	r5,r4
   18d60:	12000017 	ldw	r8,0(r2)
   18d64:	29400104 	addi	r5,r5,4
   18d68:	10800104 	addi	r2,r2,4
   18d6c:	2a3fff15 	stw	r8,-4(r5)
   18d70:	10fffb36 	bltu	r2,r3,18d60 <__alt_data_end+0xfc018d60>
   18d74:	1985c83a 	sub	r2,r3,r6
   18d78:	10bffac4 	addi	r2,r2,-21
   18d7c:	1004d0ba 	srli	r2,r2,2
   18d80:	10800044 	addi	r2,r2,1
   18d84:	1085883a 	add	r2,r2,r2
   18d88:	1085883a 	add	r2,r2,r2
   18d8c:	2089883a 	add	r4,r4,r2
   18d90:	21c0032e 	bgeu	r4,r7,18da0 <__copybits+0x74>
   18d94:	20000015 	stw	zero,0(r4)
   18d98:	21000104 	addi	r4,r4,4
   18d9c:	21fffd36 	bltu	r4,r7,18d94 <__alt_data_end+0xfc018d94>
   18da0:	f800283a 	ret

00018da4 <__any_on>:
   18da4:	20c00417 	ldw	r3,16(r4)
   18da8:	2805d17a 	srai	r2,r5,5
   18dac:	21000504 	addi	r4,r4,20
   18db0:	18800d0e 	bge	r3,r2,18de8 <__any_on+0x44>
   18db4:	18c7883a 	add	r3,r3,r3
   18db8:	18c7883a 	add	r3,r3,r3
   18dbc:	20c7883a 	add	r3,r4,r3
   18dc0:	20c0192e 	bgeu	r4,r3,18e28 <__any_on+0x84>
   18dc4:	18bfff17 	ldw	r2,-4(r3)
   18dc8:	18ffff04 	addi	r3,r3,-4
   18dcc:	1000041e 	bne	r2,zero,18de0 <__any_on+0x3c>
   18dd0:	20c0142e 	bgeu	r4,r3,18e24 <__any_on+0x80>
   18dd4:	18ffff04 	addi	r3,r3,-4
   18dd8:	19400017 	ldw	r5,0(r3)
   18ddc:	283ffc26 	beq	r5,zero,18dd0 <__alt_data_end+0xfc018dd0>
   18de0:	00800044 	movi	r2,1
   18de4:	f800283a 	ret
   18de8:	10c00a0e 	bge	r2,r3,18e14 <__any_on+0x70>
   18dec:	1085883a 	add	r2,r2,r2
   18df0:	1085883a 	add	r2,r2,r2
   18df4:	294007cc 	andi	r5,r5,31
   18df8:	2087883a 	add	r3,r4,r2
   18dfc:	283ff026 	beq	r5,zero,18dc0 <__alt_data_end+0xfc018dc0>
   18e00:	19800017 	ldw	r6,0(r3)
   18e04:	3144d83a 	srl	r2,r6,r5
   18e08:	114a983a 	sll	r5,r2,r5
   18e0c:	317ff41e 	bne	r6,r5,18de0 <__alt_data_end+0xfc018de0>
   18e10:	003feb06 	br	18dc0 <__alt_data_end+0xfc018dc0>
   18e14:	1085883a 	add	r2,r2,r2
   18e18:	1085883a 	add	r2,r2,r2
   18e1c:	2087883a 	add	r3,r4,r2
   18e20:	003fe706 	br	18dc0 <__alt_data_end+0xfc018dc0>
   18e24:	f800283a 	ret
   18e28:	0005883a 	mov	r2,zero
   18e2c:	f800283a 	ret

00018e30 <_putc_r>:
   18e30:	defffc04 	addi	sp,sp,-16
   18e34:	dc000215 	stw	r16,8(sp)
   18e38:	dfc00315 	stw	ra,12(sp)
   18e3c:	2021883a 	mov	r16,r4
   18e40:	20000226 	beq	r4,zero,18e4c <_putc_r+0x1c>
   18e44:	20800e17 	ldw	r2,56(r4)
   18e48:	10001b26 	beq	r2,zero,18eb8 <_putc_r+0x88>
   18e4c:	30800217 	ldw	r2,8(r6)
   18e50:	10bfffc4 	addi	r2,r2,-1
   18e54:	30800215 	stw	r2,8(r6)
   18e58:	10000a16 	blt	r2,zero,18e84 <_putc_r+0x54>
   18e5c:	30800017 	ldw	r2,0(r6)
   18e60:	11400005 	stb	r5,0(r2)
   18e64:	30800017 	ldw	r2,0(r6)
   18e68:	10c00044 	addi	r3,r2,1
   18e6c:	30c00015 	stw	r3,0(r6)
   18e70:	10800003 	ldbu	r2,0(r2)
   18e74:	dfc00317 	ldw	ra,12(sp)
   18e78:	dc000217 	ldw	r16,8(sp)
   18e7c:	dec00404 	addi	sp,sp,16
   18e80:	f800283a 	ret
   18e84:	30c00617 	ldw	r3,24(r6)
   18e88:	10c00616 	blt	r2,r3,18ea4 <_putc_r+0x74>
   18e8c:	30800017 	ldw	r2,0(r6)
   18e90:	00c00284 	movi	r3,10
   18e94:	11400005 	stb	r5,0(r2)
   18e98:	30800017 	ldw	r2,0(r6)
   18e9c:	11400003 	ldbu	r5,0(r2)
   18ea0:	28fff11e 	bne	r5,r3,18e68 <__alt_data_end+0xfc018e68>
   18ea4:	8009883a 	mov	r4,r16
   18ea8:	dfc00317 	ldw	ra,12(sp)
   18eac:	dc000217 	ldw	r16,8(sp)
   18eb0:	dec00404 	addi	sp,sp,16
   18eb4:	001c3141 	jmpi	1c314 <__swbuf_r>
   18eb8:	d9400015 	stw	r5,0(sp)
   18ebc:	d9800115 	stw	r6,4(sp)
   18ec0:	0016dcc0 	call	16dcc <__sinit>
   18ec4:	d9800117 	ldw	r6,4(sp)
   18ec8:	d9400017 	ldw	r5,0(sp)
   18ecc:	003fdf06 	br	18e4c <__alt_data_end+0xfc018e4c>

00018ed0 <putc>:
   18ed0:	008000f4 	movhi	r2,3
   18ed4:	defffc04 	addi	sp,sp,-16
   18ed8:	10bbbb04 	addi	r2,r2,-4372
   18edc:	dc000115 	stw	r16,4(sp)
   18ee0:	14000017 	ldw	r16,0(r2)
   18ee4:	dc400215 	stw	r17,8(sp)
   18ee8:	dfc00315 	stw	ra,12(sp)
   18eec:	2023883a 	mov	r17,r4
   18ef0:	80000226 	beq	r16,zero,18efc <putc+0x2c>
   18ef4:	80800e17 	ldw	r2,56(r16)
   18ef8:	10001a26 	beq	r2,zero,18f64 <putc+0x94>
   18efc:	28800217 	ldw	r2,8(r5)
   18f00:	10bfffc4 	addi	r2,r2,-1
   18f04:	28800215 	stw	r2,8(r5)
   18f08:	10000b16 	blt	r2,zero,18f38 <putc+0x68>
   18f0c:	28800017 	ldw	r2,0(r5)
   18f10:	14400005 	stb	r17,0(r2)
   18f14:	28800017 	ldw	r2,0(r5)
   18f18:	10c00044 	addi	r3,r2,1
   18f1c:	28c00015 	stw	r3,0(r5)
   18f20:	10800003 	ldbu	r2,0(r2)
   18f24:	dfc00317 	ldw	ra,12(sp)
   18f28:	dc400217 	ldw	r17,8(sp)
   18f2c:	dc000117 	ldw	r16,4(sp)
   18f30:	dec00404 	addi	sp,sp,16
   18f34:	f800283a 	ret
   18f38:	28c00617 	ldw	r3,24(r5)
   18f3c:	10c00e16 	blt	r2,r3,18f78 <putc+0xa8>
   18f40:	28800017 	ldw	r2,0(r5)
   18f44:	01000284 	movi	r4,10
   18f48:	14400005 	stb	r17,0(r2)
   18f4c:	28800017 	ldw	r2,0(r5)
   18f50:	10c00003 	ldbu	r3,0(r2)
   18f54:	193ff01e 	bne	r3,r4,18f18 <__alt_data_end+0xfc018f18>
   18f58:	280d883a 	mov	r6,r5
   18f5c:	180b883a 	mov	r5,r3
   18f60:	00000706 	br	18f80 <putc+0xb0>
   18f64:	8009883a 	mov	r4,r16
   18f68:	d9400015 	stw	r5,0(sp)
   18f6c:	0016dcc0 	call	16dcc <__sinit>
   18f70:	d9400017 	ldw	r5,0(sp)
   18f74:	003fe106 	br	18efc <__alt_data_end+0xfc018efc>
   18f78:	280d883a 	mov	r6,r5
   18f7c:	880b883a 	mov	r5,r17
   18f80:	8009883a 	mov	r4,r16
   18f84:	dfc00317 	ldw	ra,12(sp)
   18f88:	dc400217 	ldw	r17,8(sp)
   18f8c:	dc000117 	ldw	r16,4(sp)
   18f90:	dec00404 	addi	sp,sp,16
   18f94:	001c3141 	jmpi	1c314 <__swbuf_r>

00018f98 <_realloc_r>:
   18f98:	defff604 	addi	sp,sp,-40
   18f9c:	dc800215 	stw	r18,8(sp)
   18fa0:	dfc00915 	stw	ra,36(sp)
   18fa4:	df000815 	stw	fp,32(sp)
   18fa8:	ddc00715 	stw	r23,28(sp)
   18fac:	dd800615 	stw	r22,24(sp)
   18fb0:	dd400515 	stw	r21,20(sp)
   18fb4:	dd000415 	stw	r20,16(sp)
   18fb8:	dcc00315 	stw	r19,12(sp)
   18fbc:	dc400115 	stw	r17,4(sp)
   18fc0:	dc000015 	stw	r16,0(sp)
   18fc4:	3025883a 	mov	r18,r6
   18fc8:	2800b726 	beq	r5,zero,192a8 <_realloc_r+0x310>
   18fcc:	282b883a 	mov	r21,r5
   18fd0:	2029883a 	mov	r20,r4
   18fd4:	00207bc0 	call	207bc <__malloc_lock>
   18fd8:	a8bfff17 	ldw	r2,-4(r21)
   18fdc:	043fff04 	movi	r16,-4
   18fe0:	90c002c4 	addi	r3,r18,11
   18fe4:	01000584 	movi	r4,22
   18fe8:	acfffe04 	addi	r19,r21,-8
   18fec:	1420703a 	and	r16,r2,r16
   18ff0:	20c0332e 	bgeu	r4,r3,190c0 <_realloc_r+0x128>
   18ff4:	047ffe04 	movi	r17,-8
   18ff8:	1c62703a 	and	r17,r3,r17
   18ffc:	8807883a 	mov	r3,r17
   19000:	88005816 	blt	r17,zero,19164 <_realloc_r+0x1cc>
   19004:	8c805736 	bltu	r17,r18,19164 <_realloc_r+0x1cc>
   19008:	80c0300e 	bge	r16,r3,190cc <_realloc_r+0x134>
   1900c:	070000f4 	movhi	fp,3
   19010:	e7305804 	addi	fp,fp,-16032
   19014:	e1c00217 	ldw	r7,8(fp)
   19018:	9c09883a 	add	r4,r19,r16
   1901c:	22000117 	ldw	r8,4(r4)
   19020:	21c06326 	beq	r4,r7,191b0 <_realloc_r+0x218>
   19024:	017fff84 	movi	r5,-2
   19028:	414a703a 	and	r5,r8,r5
   1902c:	214b883a 	add	r5,r4,r5
   19030:	29800117 	ldw	r6,4(r5)
   19034:	3180004c 	andi	r6,r6,1
   19038:	30003f26 	beq	r6,zero,19138 <_realloc_r+0x1a0>
   1903c:	1080004c 	andi	r2,r2,1
   19040:	10008326 	beq	r2,zero,19250 <_realloc_r+0x2b8>
   19044:	900b883a 	mov	r5,r18
   19048:	a009883a 	mov	r4,r20
   1904c:	000f5dc0 	call	f5dc <_malloc_r>
   19050:	1025883a 	mov	r18,r2
   19054:	10011e26 	beq	r2,zero,194d0 <_realloc_r+0x538>
   19058:	a93fff17 	ldw	r4,-4(r21)
   1905c:	10fffe04 	addi	r3,r2,-8
   19060:	00bfff84 	movi	r2,-2
   19064:	2084703a 	and	r2,r4,r2
   19068:	9885883a 	add	r2,r19,r2
   1906c:	1880ee26 	beq	r3,r2,19428 <_realloc_r+0x490>
   19070:	81bfff04 	addi	r6,r16,-4
   19074:	00800904 	movi	r2,36
   19078:	1180b836 	bltu	r2,r6,1935c <_realloc_r+0x3c4>
   1907c:	00c004c4 	movi	r3,19
   19080:	19809636 	bltu	r3,r6,192dc <_realloc_r+0x344>
   19084:	9005883a 	mov	r2,r18
   19088:	a807883a 	mov	r3,r21
   1908c:	19000017 	ldw	r4,0(r3)
   19090:	11000015 	stw	r4,0(r2)
   19094:	19000117 	ldw	r4,4(r3)
   19098:	11000115 	stw	r4,4(r2)
   1909c:	18c00217 	ldw	r3,8(r3)
   190a0:	10c00215 	stw	r3,8(r2)
   190a4:	a80b883a 	mov	r5,r21
   190a8:	a009883a 	mov	r4,r20
   190ac:	0016f400 	call	16f40 <_free_r>
   190b0:	a009883a 	mov	r4,r20
   190b4:	00207e00 	call	207e0 <__malloc_unlock>
   190b8:	9005883a 	mov	r2,r18
   190bc:	00001206 	br	19108 <_realloc_r+0x170>
   190c0:	00c00404 	movi	r3,16
   190c4:	1823883a 	mov	r17,r3
   190c8:	003fce06 	br	19004 <__alt_data_end+0xfc019004>
   190cc:	a825883a 	mov	r18,r21
   190d0:	8445c83a 	sub	r2,r16,r17
   190d4:	00c003c4 	movi	r3,15
   190d8:	18802636 	bltu	r3,r2,19174 <_realloc_r+0x1dc>
   190dc:	99800117 	ldw	r6,4(r19)
   190e0:	9c07883a 	add	r3,r19,r16
   190e4:	3180004c 	andi	r6,r6,1
   190e8:	3420b03a 	or	r16,r6,r16
   190ec:	9c000115 	stw	r16,4(r19)
   190f0:	18800117 	ldw	r2,4(r3)
   190f4:	10800054 	ori	r2,r2,1
   190f8:	18800115 	stw	r2,4(r3)
   190fc:	a009883a 	mov	r4,r20
   19100:	00207e00 	call	207e0 <__malloc_unlock>
   19104:	9005883a 	mov	r2,r18
   19108:	dfc00917 	ldw	ra,36(sp)
   1910c:	df000817 	ldw	fp,32(sp)
   19110:	ddc00717 	ldw	r23,28(sp)
   19114:	dd800617 	ldw	r22,24(sp)
   19118:	dd400517 	ldw	r21,20(sp)
   1911c:	dd000417 	ldw	r20,16(sp)
   19120:	dcc00317 	ldw	r19,12(sp)
   19124:	dc800217 	ldw	r18,8(sp)
   19128:	dc400117 	ldw	r17,4(sp)
   1912c:	dc000017 	ldw	r16,0(sp)
   19130:	dec00a04 	addi	sp,sp,40
   19134:	f800283a 	ret
   19138:	017fff04 	movi	r5,-4
   1913c:	414a703a 	and	r5,r8,r5
   19140:	814d883a 	add	r6,r16,r5
   19144:	30c01f16 	blt	r6,r3,191c4 <_realloc_r+0x22c>
   19148:	20800317 	ldw	r2,12(r4)
   1914c:	20c00217 	ldw	r3,8(r4)
   19150:	a825883a 	mov	r18,r21
   19154:	3021883a 	mov	r16,r6
   19158:	18800315 	stw	r2,12(r3)
   1915c:	10c00215 	stw	r3,8(r2)
   19160:	003fdb06 	br	190d0 <__alt_data_end+0xfc0190d0>
   19164:	00800304 	movi	r2,12
   19168:	a0800015 	stw	r2,0(r20)
   1916c:	0005883a 	mov	r2,zero
   19170:	003fe506 	br	19108 <__alt_data_end+0xfc019108>
   19174:	98c00117 	ldw	r3,4(r19)
   19178:	9c4b883a 	add	r5,r19,r17
   1917c:	11000054 	ori	r4,r2,1
   19180:	18c0004c 	andi	r3,r3,1
   19184:	1c62b03a 	or	r17,r3,r17
   19188:	9c400115 	stw	r17,4(r19)
   1918c:	29000115 	stw	r4,4(r5)
   19190:	2885883a 	add	r2,r5,r2
   19194:	10c00117 	ldw	r3,4(r2)
   19198:	29400204 	addi	r5,r5,8
   1919c:	a009883a 	mov	r4,r20
   191a0:	18c00054 	ori	r3,r3,1
   191a4:	10c00115 	stw	r3,4(r2)
   191a8:	0016f400 	call	16f40 <_free_r>
   191ac:	003fd306 	br	190fc <__alt_data_end+0xfc0190fc>
   191b0:	017fff04 	movi	r5,-4
   191b4:	414a703a 	and	r5,r8,r5
   191b8:	89800404 	addi	r6,r17,16
   191bc:	8151883a 	add	r8,r16,r5
   191c0:	4180590e 	bge	r8,r6,19328 <_realloc_r+0x390>
   191c4:	1080004c 	andi	r2,r2,1
   191c8:	103f9e1e 	bne	r2,zero,19044 <__alt_data_end+0xfc019044>
   191cc:	adbffe17 	ldw	r22,-8(r21)
   191d0:	00bfff04 	movi	r2,-4
   191d4:	9dadc83a 	sub	r22,r19,r22
   191d8:	b1800117 	ldw	r6,4(r22)
   191dc:	3084703a 	and	r2,r6,r2
   191e0:	20002026 	beq	r4,zero,19264 <_realloc_r+0x2cc>
   191e4:	80af883a 	add	r23,r16,r2
   191e8:	b96f883a 	add	r23,r23,r5
   191ec:	21c05f26 	beq	r4,r7,1936c <_realloc_r+0x3d4>
   191f0:	b8c01c16 	blt	r23,r3,19264 <_realloc_r+0x2cc>
   191f4:	20800317 	ldw	r2,12(r4)
   191f8:	20c00217 	ldw	r3,8(r4)
   191fc:	81bfff04 	addi	r6,r16,-4
   19200:	01000904 	movi	r4,36
   19204:	18800315 	stw	r2,12(r3)
   19208:	10c00215 	stw	r3,8(r2)
   1920c:	b0c00217 	ldw	r3,8(r22)
   19210:	b0800317 	ldw	r2,12(r22)
   19214:	b4800204 	addi	r18,r22,8
   19218:	18800315 	stw	r2,12(r3)
   1921c:	10c00215 	stw	r3,8(r2)
   19220:	21801b36 	bltu	r4,r6,19290 <_realloc_r+0x2f8>
   19224:	008004c4 	movi	r2,19
   19228:	1180352e 	bgeu	r2,r6,19300 <_realloc_r+0x368>
   1922c:	a8800017 	ldw	r2,0(r21)
   19230:	b0800215 	stw	r2,8(r22)
   19234:	a8800117 	ldw	r2,4(r21)
   19238:	b0800315 	stw	r2,12(r22)
   1923c:	008006c4 	movi	r2,27
   19240:	11807f36 	bltu	r2,r6,19440 <_realloc_r+0x4a8>
   19244:	b0800404 	addi	r2,r22,16
   19248:	ad400204 	addi	r21,r21,8
   1924c:	00002d06 	br	19304 <_realloc_r+0x36c>
   19250:	adbffe17 	ldw	r22,-8(r21)
   19254:	00bfff04 	movi	r2,-4
   19258:	9dadc83a 	sub	r22,r19,r22
   1925c:	b1000117 	ldw	r4,4(r22)
   19260:	2084703a 	and	r2,r4,r2
   19264:	b03f7726 	beq	r22,zero,19044 <__alt_data_end+0xfc019044>
   19268:	80af883a 	add	r23,r16,r2
   1926c:	b8ff7516 	blt	r23,r3,19044 <__alt_data_end+0xfc019044>
   19270:	b0800317 	ldw	r2,12(r22)
   19274:	b0c00217 	ldw	r3,8(r22)
   19278:	81bfff04 	addi	r6,r16,-4
   1927c:	01000904 	movi	r4,36
   19280:	18800315 	stw	r2,12(r3)
   19284:	10c00215 	stw	r3,8(r2)
   19288:	b4800204 	addi	r18,r22,8
   1928c:	21bfe52e 	bgeu	r4,r6,19224 <__alt_data_end+0xfc019224>
   19290:	a80b883a 	mov	r5,r21
   19294:	9009883a 	mov	r4,r18
   19298:	0017c1c0 	call	17c1c <memmove>
   1929c:	b821883a 	mov	r16,r23
   192a0:	b027883a 	mov	r19,r22
   192a4:	003f8a06 	br	190d0 <__alt_data_end+0xfc0190d0>
   192a8:	300b883a 	mov	r5,r6
   192ac:	dfc00917 	ldw	ra,36(sp)
   192b0:	df000817 	ldw	fp,32(sp)
   192b4:	ddc00717 	ldw	r23,28(sp)
   192b8:	dd800617 	ldw	r22,24(sp)
   192bc:	dd400517 	ldw	r21,20(sp)
   192c0:	dd000417 	ldw	r20,16(sp)
   192c4:	dcc00317 	ldw	r19,12(sp)
   192c8:	dc800217 	ldw	r18,8(sp)
   192cc:	dc400117 	ldw	r17,4(sp)
   192d0:	dc000017 	ldw	r16,0(sp)
   192d4:	dec00a04 	addi	sp,sp,40
   192d8:	000f5dc1 	jmpi	f5dc <_malloc_r>
   192dc:	a8c00017 	ldw	r3,0(r21)
   192e0:	90c00015 	stw	r3,0(r18)
   192e4:	a8c00117 	ldw	r3,4(r21)
   192e8:	90c00115 	stw	r3,4(r18)
   192ec:	00c006c4 	movi	r3,27
   192f0:	19804536 	bltu	r3,r6,19408 <_realloc_r+0x470>
   192f4:	90800204 	addi	r2,r18,8
   192f8:	a8c00204 	addi	r3,r21,8
   192fc:	003f6306 	br	1908c <__alt_data_end+0xfc01908c>
   19300:	9005883a 	mov	r2,r18
   19304:	a8c00017 	ldw	r3,0(r21)
   19308:	b821883a 	mov	r16,r23
   1930c:	b027883a 	mov	r19,r22
   19310:	10c00015 	stw	r3,0(r2)
   19314:	a8c00117 	ldw	r3,4(r21)
   19318:	10c00115 	stw	r3,4(r2)
   1931c:	a8c00217 	ldw	r3,8(r21)
   19320:	10c00215 	stw	r3,8(r2)
   19324:	003f6a06 	br	190d0 <__alt_data_end+0xfc0190d0>
   19328:	9c67883a 	add	r19,r19,r17
   1932c:	4445c83a 	sub	r2,r8,r17
   19330:	e4c00215 	stw	r19,8(fp)
   19334:	10800054 	ori	r2,r2,1
   19338:	98800115 	stw	r2,4(r19)
   1933c:	a8bfff17 	ldw	r2,-4(r21)
   19340:	a009883a 	mov	r4,r20
   19344:	1080004c 	andi	r2,r2,1
   19348:	1462b03a 	or	r17,r2,r17
   1934c:	ac7fff15 	stw	r17,-4(r21)
   19350:	00207e00 	call	207e0 <__malloc_unlock>
   19354:	a805883a 	mov	r2,r21
   19358:	003f6b06 	br	19108 <__alt_data_end+0xfc019108>
   1935c:	a80b883a 	mov	r5,r21
   19360:	9009883a 	mov	r4,r18
   19364:	0017c1c0 	call	17c1c <memmove>
   19368:	003f4e06 	br	190a4 <__alt_data_end+0xfc0190a4>
   1936c:	89000404 	addi	r4,r17,16
   19370:	b93fbc16 	blt	r23,r4,19264 <__alt_data_end+0xfc019264>
   19374:	b0800317 	ldw	r2,12(r22)
   19378:	b0c00217 	ldw	r3,8(r22)
   1937c:	81bfff04 	addi	r6,r16,-4
   19380:	01000904 	movi	r4,36
   19384:	18800315 	stw	r2,12(r3)
   19388:	10c00215 	stw	r3,8(r2)
   1938c:	b4800204 	addi	r18,r22,8
   19390:	21804336 	bltu	r4,r6,194a0 <_realloc_r+0x508>
   19394:	008004c4 	movi	r2,19
   19398:	11803f2e 	bgeu	r2,r6,19498 <_realloc_r+0x500>
   1939c:	a8800017 	ldw	r2,0(r21)
   193a0:	b0800215 	stw	r2,8(r22)
   193a4:	a8800117 	ldw	r2,4(r21)
   193a8:	b0800315 	stw	r2,12(r22)
   193ac:	008006c4 	movi	r2,27
   193b0:	11803f36 	bltu	r2,r6,194b0 <_realloc_r+0x518>
   193b4:	b0800404 	addi	r2,r22,16
   193b8:	ad400204 	addi	r21,r21,8
   193bc:	a8c00017 	ldw	r3,0(r21)
   193c0:	10c00015 	stw	r3,0(r2)
   193c4:	a8c00117 	ldw	r3,4(r21)
   193c8:	10c00115 	stw	r3,4(r2)
   193cc:	a8c00217 	ldw	r3,8(r21)
   193d0:	10c00215 	stw	r3,8(r2)
   193d4:	b447883a 	add	r3,r22,r17
   193d8:	bc45c83a 	sub	r2,r23,r17
   193dc:	e0c00215 	stw	r3,8(fp)
   193e0:	10800054 	ori	r2,r2,1
   193e4:	18800115 	stw	r2,4(r3)
   193e8:	b0800117 	ldw	r2,4(r22)
   193ec:	a009883a 	mov	r4,r20
   193f0:	1080004c 	andi	r2,r2,1
   193f4:	1462b03a 	or	r17,r2,r17
   193f8:	b4400115 	stw	r17,4(r22)
   193fc:	00207e00 	call	207e0 <__malloc_unlock>
   19400:	9005883a 	mov	r2,r18
   19404:	003f4006 	br	19108 <__alt_data_end+0xfc019108>
   19408:	a8c00217 	ldw	r3,8(r21)
   1940c:	90c00215 	stw	r3,8(r18)
   19410:	a8c00317 	ldw	r3,12(r21)
   19414:	90c00315 	stw	r3,12(r18)
   19418:	30801126 	beq	r6,r2,19460 <_realloc_r+0x4c8>
   1941c:	90800404 	addi	r2,r18,16
   19420:	a8c00404 	addi	r3,r21,16
   19424:	003f1906 	br	1908c <__alt_data_end+0xfc01908c>
   19428:	90ffff17 	ldw	r3,-4(r18)
   1942c:	00bfff04 	movi	r2,-4
   19430:	a825883a 	mov	r18,r21
   19434:	1884703a 	and	r2,r3,r2
   19438:	80a1883a 	add	r16,r16,r2
   1943c:	003f2406 	br	190d0 <__alt_data_end+0xfc0190d0>
   19440:	a8800217 	ldw	r2,8(r21)
   19444:	b0800415 	stw	r2,16(r22)
   19448:	a8800317 	ldw	r2,12(r21)
   1944c:	b0800515 	stw	r2,20(r22)
   19450:	31000a26 	beq	r6,r4,1947c <_realloc_r+0x4e4>
   19454:	b0800604 	addi	r2,r22,24
   19458:	ad400404 	addi	r21,r21,16
   1945c:	003fa906 	br	19304 <__alt_data_end+0xfc019304>
   19460:	a9000417 	ldw	r4,16(r21)
   19464:	90800604 	addi	r2,r18,24
   19468:	a8c00604 	addi	r3,r21,24
   1946c:	91000415 	stw	r4,16(r18)
   19470:	a9000517 	ldw	r4,20(r21)
   19474:	91000515 	stw	r4,20(r18)
   19478:	003f0406 	br	1908c <__alt_data_end+0xfc01908c>
   1947c:	a8c00417 	ldw	r3,16(r21)
   19480:	ad400604 	addi	r21,r21,24
   19484:	b0800804 	addi	r2,r22,32
   19488:	b0c00615 	stw	r3,24(r22)
   1948c:	a8ffff17 	ldw	r3,-4(r21)
   19490:	b0c00715 	stw	r3,28(r22)
   19494:	003f9b06 	br	19304 <__alt_data_end+0xfc019304>
   19498:	9005883a 	mov	r2,r18
   1949c:	003fc706 	br	193bc <__alt_data_end+0xfc0193bc>
   194a0:	a80b883a 	mov	r5,r21
   194a4:	9009883a 	mov	r4,r18
   194a8:	0017c1c0 	call	17c1c <memmove>
   194ac:	003fc906 	br	193d4 <__alt_data_end+0xfc0193d4>
   194b0:	a8800217 	ldw	r2,8(r21)
   194b4:	b0800415 	stw	r2,16(r22)
   194b8:	a8800317 	ldw	r2,12(r21)
   194bc:	b0800515 	stw	r2,20(r22)
   194c0:	31000726 	beq	r6,r4,194e0 <_realloc_r+0x548>
   194c4:	b0800604 	addi	r2,r22,24
   194c8:	ad400404 	addi	r21,r21,16
   194cc:	003fbb06 	br	193bc <__alt_data_end+0xfc0193bc>
   194d0:	a009883a 	mov	r4,r20
   194d4:	00207e00 	call	207e0 <__malloc_unlock>
   194d8:	0005883a 	mov	r2,zero
   194dc:	003f0a06 	br	19108 <__alt_data_end+0xfc019108>
   194e0:	a8c00417 	ldw	r3,16(r21)
   194e4:	ad400604 	addi	r21,r21,24
   194e8:	b0800804 	addi	r2,r22,32
   194ec:	b0c00615 	stw	r3,24(r22)
   194f0:	a8ffff17 	ldw	r3,-4(r21)
   194f4:	b0c00715 	stw	r3,28(r22)
   194f8:	003fb006 	br	193bc <__alt_data_end+0xfc0193bc>

000194fc <__fpclassifyd>:
   194fc:	00a00034 	movhi	r2,32768
   19500:	10bfffc4 	addi	r2,r2,-1
   19504:	2884703a 	and	r2,r5,r2
   19508:	10000726 	beq	r2,zero,19528 <__fpclassifyd+0x2c>
   1950c:	00fffc34 	movhi	r3,65520
   19510:	019ff834 	movhi	r6,32736
   19514:	28c7883a 	add	r3,r5,r3
   19518:	31bfffc4 	addi	r6,r6,-1
   1951c:	30c00536 	bltu	r6,r3,19534 <__fpclassifyd+0x38>
   19520:	00800104 	movi	r2,4
   19524:	f800283a 	ret
   19528:	2000021e 	bne	r4,zero,19534 <__fpclassifyd+0x38>
   1952c:	00800084 	movi	r2,2
   19530:	f800283a 	ret
   19534:	00dffc34 	movhi	r3,32752
   19538:	019ff834 	movhi	r6,32736
   1953c:	28cb883a 	add	r5,r5,r3
   19540:	31bfffc4 	addi	r6,r6,-1
   19544:	317ff62e 	bgeu	r6,r5,19520 <__alt_data_end+0xfc019520>
   19548:	01400434 	movhi	r5,16
   1954c:	297fffc4 	addi	r5,r5,-1
   19550:	28800236 	bltu	r5,r2,1955c <__fpclassifyd+0x60>
   19554:	008000c4 	movi	r2,3
   19558:	f800283a 	ret
   1955c:	10c00226 	beq	r2,r3,19568 <__fpclassifyd+0x6c>
   19560:	0005883a 	mov	r2,zero
   19564:	f800283a 	ret
   19568:	2005003a 	cmpeq	r2,r4,zero
   1956c:	f800283a 	ret

00019570 <__sread>:
   19570:	defffe04 	addi	sp,sp,-8
   19574:	dc000015 	stw	r16,0(sp)
   19578:	2821883a 	mov	r16,r5
   1957c:	2940038f 	ldh	r5,14(r5)
   19580:	dfc00115 	stw	ra,4(sp)
   19584:	001ca180 	call	1ca18 <_read_r>
   19588:	10000716 	blt	r2,zero,195a8 <__sread+0x38>
   1958c:	80c01417 	ldw	r3,80(r16)
   19590:	1887883a 	add	r3,r3,r2
   19594:	80c01415 	stw	r3,80(r16)
   19598:	dfc00117 	ldw	ra,4(sp)
   1959c:	dc000017 	ldw	r16,0(sp)
   195a0:	dec00204 	addi	sp,sp,8
   195a4:	f800283a 	ret
   195a8:	80c0030b 	ldhu	r3,12(r16)
   195ac:	18fbffcc 	andi	r3,r3,61439
   195b0:	80c0030d 	sth	r3,12(r16)
   195b4:	dfc00117 	ldw	ra,4(sp)
   195b8:	dc000017 	ldw	r16,0(sp)
   195bc:	dec00204 	addi	sp,sp,8
   195c0:	f800283a 	ret

000195c4 <__seofread>:
   195c4:	0005883a 	mov	r2,zero
   195c8:	f800283a 	ret

000195cc <__swrite>:
   195cc:	2880030b 	ldhu	r2,12(r5)
   195d0:	defffb04 	addi	sp,sp,-20
   195d4:	dcc00315 	stw	r19,12(sp)
   195d8:	dc800215 	stw	r18,8(sp)
   195dc:	dc400115 	stw	r17,4(sp)
   195e0:	dc000015 	stw	r16,0(sp)
   195e4:	dfc00415 	stw	ra,16(sp)
   195e8:	10c0400c 	andi	r3,r2,256
   195ec:	2821883a 	mov	r16,r5
   195f0:	2023883a 	mov	r17,r4
   195f4:	3025883a 	mov	r18,r6
   195f8:	3827883a 	mov	r19,r7
   195fc:	18000526 	beq	r3,zero,19614 <__swrite+0x48>
   19600:	2940038f 	ldh	r5,14(r5)
   19604:	01c00084 	movi	r7,2
   19608:	000d883a 	mov	r6,zero
   1960c:	001c9b80 	call	1c9b8 <_lseek_r>
   19610:	8080030b 	ldhu	r2,12(r16)
   19614:	8140038f 	ldh	r5,14(r16)
   19618:	10bbffcc 	andi	r2,r2,61439
   1961c:	980f883a 	mov	r7,r19
   19620:	900d883a 	mov	r6,r18
   19624:	8809883a 	mov	r4,r17
   19628:	8080030d 	sth	r2,12(r16)
   1962c:	dfc00417 	ldw	ra,16(sp)
   19630:	dcc00317 	ldw	r19,12(sp)
   19634:	dc800217 	ldw	r18,8(sp)
   19638:	dc400117 	ldw	r17,4(sp)
   1963c:	dc000017 	ldw	r16,0(sp)
   19640:	dec00504 	addi	sp,sp,20
   19644:	001c46c1 	jmpi	1c46c <_write_r>

00019648 <__sseek>:
   19648:	defffe04 	addi	sp,sp,-8
   1964c:	dc000015 	stw	r16,0(sp)
   19650:	2821883a 	mov	r16,r5
   19654:	2940038f 	ldh	r5,14(r5)
   19658:	dfc00115 	stw	ra,4(sp)
   1965c:	001c9b80 	call	1c9b8 <_lseek_r>
   19660:	00ffffc4 	movi	r3,-1
   19664:	10c00826 	beq	r2,r3,19688 <__sseek+0x40>
   19668:	80c0030b 	ldhu	r3,12(r16)
   1966c:	80801415 	stw	r2,80(r16)
   19670:	18c40014 	ori	r3,r3,4096
   19674:	80c0030d 	sth	r3,12(r16)
   19678:	dfc00117 	ldw	ra,4(sp)
   1967c:	dc000017 	ldw	r16,0(sp)
   19680:	dec00204 	addi	sp,sp,8
   19684:	f800283a 	ret
   19688:	80c0030b 	ldhu	r3,12(r16)
   1968c:	18fbffcc 	andi	r3,r3,61439
   19690:	80c0030d 	sth	r3,12(r16)
   19694:	dfc00117 	ldw	ra,4(sp)
   19698:	dc000017 	ldw	r16,0(sp)
   1969c:	dec00204 	addi	sp,sp,8
   196a0:	f800283a 	ret

000196a4 <__sclose>:
   196a4:	2940038f 	ldh	r5,14(r5)
   196a8:	001c4cc1 	jmpi	1c4cc <_close_r>

000196ac <__ssprint_r>:
   196ac:	30800217 	ldw	r2,8(r6)
   196b0:	defff604 	addi	sp,sp,-40
   196b4:	dc800215 	stw	r18,8(sp)
   196b8:	dfc00915 	stw	ra,36(sp)
   196bc:	df000815 	stw	fp,32(sp)
   196c0:	ddc00715 	stw	r23,28(sp)
   196c4:	dd800615 	stw	r22,24(sp)
   196c8:	dd400515 	stw	r21,20(sp)
   196cc:	dd000415 	stw	r20,16(sp)
   196d0:	dcc00315 	stw	r19,12(sp)
   196d4:	dc400115 	stw	r17,4(sp)
   196d8:	dc000015 	stw	r16,0(sp)
   196dc:	3025883a 	mov	r18,r6
   196e0:	10005826 	beq	r2,zero,19844 <__ssprint_r+0x198>
   196e4:	2027883a 	mov	r19,r4
   196e8:	35c00017 	ldw	r23,0(r6)
   196ec:	29000017 	ldw	r4,0(r5)
   196f0:	28800217 	ldw	r2,8(r5)
   196f4:	2823883a 	mov	r17,r5
   196f8:	0039883a 	mov	fp,zero
   196fc:	0021883a 	mov	r16,zero
   19700:	80003926 	beq	r16,zero,197e8 <__ssprint_r+0x13c>
   19704:	102b883a 	mov	r21,r2
   19708:	102d883a 	mov	r22,r2
   1970c:	80803a36 	bltu	r16,r2,197f8 <__ssprint_r+0x14c>
   19710:	88c0030b 	ldhu	r3,12(r17)
   19714:	1881200c 	andi	r2,r3,1152
   19718:	10002626 	beq	r2,zero,197b4 <__ssprint_r+0x108>
   1971c:	88800517 	ldw	r2,20(r17)
   19720:	89400417 	ldw	r5,16(r17)
   19724:	81800044 	addi	r6,r16,1
   19728:	108f883a 	add	r7,r2,r2
   1972c:	3885883a 	add	r2,r7,r2
   19730:	100ed7fa 	srli	r7,r2,31
   19734:	216dc83a 	sub	r22,r4,r5
   19738:	3589883a 	add	r4,r6,r22
   1973c:	3885883a 	add	r2,r7,r2
   19740:	102bd07a 	srai	r21,r2,1
   19744:	a80d883a 	mov	r6,r21
   19748:	a900022e 	bgeu	r21,r4,19754 <__ssprint_r+0xa8>
   1974c:	202b883a 	mov	r21,r4
   19750:	200d883a 	mov	r6,r4
   19754:	18c1000c 	andi	r3,r3,1024
   19758:	18002a26 	beq	r3,zero,19804 <__ssprint_r+0x158>
   1975c:	300b883a 	mov	r5,r6
   19760:	9809883a 	mov	r4,r19
   19764:	000f5dc0 	call	f5dc <_malloc_r>
   19768:	1029883a 	mov	r20,r2
   1976c:	10002c26 	beq	r2,zero,19820 <__ssprint_r+0x174>
   19770:	89400417 	ldw	r5,16(r17)
   19774:	b00d883a 	mov	r6,r22
   19778:	1009883a 	mov	r4,r2
   1977c:	000fde80 	call	fde8 <memcpy>
   19780:	8880030b 	ldhu	r2,12(r17)
   19784:	00fedfc4 	movi	r3,-1153
   19788:	10c4703a 	and	r2,r2,r3
   1978c:	10802014 	ori	r2,r2,128
   19790:	8880030d 	sth	r2,12(r17)
   19794:	a589883a 	add	r4,r20,r22
   19798:	adadc83a 	sub	r22,r21,r22
   1979c:	8d400515 	stw	r21,20(r17)
   197a0:	8d800215 	stw	r22,8(r17)
   197a4:	8d000415 	stw	r20,16(r17)
   197a8:	89000015 	stw	r4,0(r17)
   197ac:	802b883a 	mov	r21,r16
   197b0:	802d883a 	mov	r22,r16
   197b4:	b00d883a 	mov	r6,r22
   197b8:	e00b883a 	mov	r5,fp
   197bc:	0017c1c0 	call	17c1c <memmove>
   197c0:	88800217 	ldw	r2,8(r17)
   197c4:	89000017 	ldw	r4,0(r17)
   197c8:	90c00217 	ldw	r3,8(r18)
   197cc:	1545c83a 	sub	r2,r2,r21
   197d0:	2589883a 	add	r4,r4,r22
   197d4:	88800215 	stw	r2,8(r17)
   197d8:	89000015 	stw	r4,0(r17)
   197dc:	1c21c83a 	sub	r16,r3,r16
   197e0:	94000215 	stw	r16,8(r18)
   197e4:	80001726 	beq	r16,zero,19844 <__ssprint_r+0x198>
   197e8:	bf000017 	ldw	fp,0(r23)
   197ec:	bc000117 	ldw	r16,4(r23)
   197f0:	bdc00204 	addi	r23,r23,8
   197f4:	003fc206 	br	19700 <__alt_data_end+0xfc019700>
   197f8:	802b883a 	mov	r21,r16
   197fc:	802d883a 	mov	r22,r16
   19800:	003fec06 	br	197b4 <__alt_data_end+0xfc0197b4>
   19804:	9809883a 	mov	r4,r19
   19808:	0018f980 	call	18f98 <_realloc_r>
   1980c:	1029883a 	mov	r20,r2
   19810:	103fe01e 	bne	r2,zero,19794 <__alt_data_end+0xfc019794>
   19814:	89400417 	ldw	r5,16(r17)
   19818:	9809883a 	mov	r4,r19
   1981c:	0016f400 	call	16f40 <_free_r>
   19820:	88c0030b 	ldhu	r3,12(r17)
   19824:	00800304 	movi	r2,12
   19828:	98800015 	stw	r2,0(r19)
   1982c:	18c01014 	ori	r3,r3,64
   19830:	88c0030d 	sth	r3,12(r17)
   19834:	00bfffc4 	movi	r2,-1
   19838:	90000215 	stw	zero,8(r18)
   1983c:	90000115 	stw	zero,4(r18)
   19840:	00000206 	br	1984c <__ssprint_r+0x1a0>
   19844:	90000115 	stw	zero,4(r18)
   19848:	0005883a 	mov	r2,zero
   1984c:	dfc00917 	ldw	ra,36(sp)
   19850:	df000817 	ldw	fp,32(sp)
   19854:	ddc00717 	ldw	r23,28(sp)
   19858:	dd800617 	ldw	r22,24(sp)
   1985c:	dd400517 	ldw	r21,20(sp)
   19860:	dd000417 	ldw	r20,16(sp)
   19864:	dcc00317 	ldw	r19,12(sp)
   19868:	dc800217 	ldw	r18,8(sp)
   1986c:	dc400117 	ldw	r17,4(sp)
   19870:	dc000017 	ldw	r16,0(sp)
   19874:	dec00a04 	addi	sp,sp,40
   19878:	f800283a 	ret

0001987c <___svfiprintf_internal_r>:
   1987c:	2880030b 	ldhu	r2,12(r5)
   19880:	deffc804 	addi	sp,sp,-224
   19884:	dcc03115 	stw	r19,196(sp)
   19888:	dfc03715 	stw	ra,220(sp)
   1988c:	df003615 	stw	fp,216(sp)
   19890:	ddc03515 	stw	r23,212(sp)
   19894:	dd803415 	stw	r22,208(sp)
   19898:	dd403315 	stw	r21,204(sp)
   1989c:	dd003215 	stw	r20,200(sp)
   198a0:	dc803015 	stw	r18,192(sp)
   198a4:	dc402f15 	stw	r17,188(sp)
   198a8:	dc002e15 	stw	r16,184(sp)
   198ac:	d9402315 	stw	r5,140(sp)
   198b0:	d9002715 	stw	r4,156(sp)
   198b4:	1080200c 	andi	r2,r2,128
   198b8:	d9c02415 	stw	r7,144(sp)
   198bc:	3027883a 	mov	r19,r6
   198c0:	10000226 	beq	r2,zero,198cc <___svfiprintf_internal_r+0x50>
   198c4:	28800417 	ldw	r2,16(r5)
   198c8:	10046d26 	beq	r2,zero,1aa80 <___svfiprintf_internal_r+0x1204>
   198cc:	d8801a04 	addi	r2,sp,104
   198d0:	d8c019c4 	addi	r3,sp,103
   198d4:	058000f4 	movhi	r22,3
   198d8:	10c9c83a 	sub	r4,r2,r3
   198dc:	b5af2704 	addi	r22,r22,-17252
   198e0:	d8801e15 	stw	r2,120(sp)
   198e4:	d8c01f15 	stw	r3,124(sp)
   198e8:	dec01a15 	stw	sp,104(sp)
   198ec:	d8001c15 	stw	zero,112(sp)
   198f0:	d8001b15 	stw	zero,108(sp)
   198f4:	d811883a 	mov	r8,sp
   198f8:	d8002915 	stw	zero,164(sp)
   198fc:	d8002615 	stw	zero,152(sp)
   19900:	d9002c15 	stw	r4,176(sp)
   19904:	98800007 	ldb	r2,0(r19)
   19908:	10031426 	beq	r2,zero,1a55c <___svfiprintf_internal_r+0xce0>
   1990c:	00c00944 	movi	r3,37
   19910:	9825883a 	mov	r18,r19
   19914:	10c0021e 	bne	r2,r3,19920 <___svfiprintf_internal_r+0xa4>
   19918:	00001406 	br	1996c <___svfiprintf_internal_r+0xf0>
   1991c:	10c00326 	beq	r2,r3,1992c <___svfiprintf_internal_r+0xb0>
   19920:	94800044 	addi	r18,r18,1
   19924:	90800007 	ldb	r2,0(r18)
   19928:	103ffc1e 	bne	r2,zero,1991c <__alt_data_end+0xfc01991c>
   1992c:	94e1c83a 	sub	r16,r18,r19
   19930:	80000e26 	beq	r16,zero,1996c <___svfiprintf_internal_r+0xf0>
   19934:	d8c01c17 	ldw	r3,112(sp)
   19938:	d8801b17 	ldw	r2,108(sp)
   1993c:	44c00015 	stw	r19,0(r8)
   19940:	1c07883a 	add	r3,r3,r16
   19944:	10800044 	addi	r2,r2,1
   19948:	d8c01c15 	stw	r3,112(sp)
   1994c:	44000115 	stw	r16,4(r8)
   19950:	d8801b15 	stw	r2,108(sp)
   19954:	00c001c4 	movi	r3,7
   19958:	18835c16 	blt	r3,r2,1a6cc <___svfiprintf_internal_r+0xe50>
   1995c:	42000204 	addi	r8,r8,8
   19960:	d9402617 	ldw	r5,152(sp)
   19964:	2c0b883a 	add	r5,r5,r16
   19968:	d9402615 	stw	r5,152(sp)
   1996c:	90800007 	ldb	r2,0(r18)
   19970:	1002fc26 	beq	r2,zero,1a564 <___svfiprintf_internal_r+0xce8>
   19974:	0023883a 	mov	r17,zero
   19978:	00bfffc4 	movi	r2,-1
   1997c:	0021883a 	mov	r16,zero
   19980:	94c00044 	addi	r19,r18,1
   19984:	90c00047 	ldb	r3,1(r18)
   19988:	dc402105 	stb	r17,132(sp)
   1998c:	d8001d85 	stb	zero,118(sp)
   19990:	002b883a 	mov	r21,zero
   19994:	d8802015 	stw	r2,128(sp)
   19998:	d8002515 	stw	zero,148(sp)
   1999c:	04801604 	movi	r18,88
   199a0:	05000244 	movi	r20,9
   199a4:	402f883a 	mov	r23,r8
   199a8:	8023883a 	mov	r17,r16
   199ac:	9cc00044 	addi	r19,r19,1
   199b0:	18bff804 	addi	r2,r3,-32
   199b4:	9081fb36 	bltu	r18,r2,1a1a4 <___svfiprintf_internal_r+0x928>
   199b8:	100490ba 	slli	r2,r2,2
   199bc:	010000b4 	movhi	r4,2
   199c0:	21267404 	addi	r4,r4,-26160
   199c4:	1105883a 	add	r2,r2,r4
   199c8:	10800017 	ldw	r2,0(r2)
   199cc:	1000683a 	jmp	r2
   199d0:	00019bd0 	cmplti	zero,zero,1647
   199d4:	0001a1a4 	muli	zero,zero,1670
   199d8:	0001a1a4 	muli	zero,zero,1670
   199dc:	00019bc4 	movi	zero,1647
   199e0:	0001a1a4 	muli	zero,zero,1670
   199e4:	0001a1a4 	muli	zero,zero,1670
   199e8:	0001a1a4 	muli	zero,zero,1670
   199ec:	0001a1a4 	muli	zero,zero,1670
   199f0:	0001a1a4 	muli	zero,zero,1670
   199f4:	0001a1a4 	muli	zero,zero,1670
   199f8:	00019b34 	movhi	zero,1644
   199fc:	00019d30 	cmpltui	zero,zero,1652
   19a00:	0001a1a4 	muli	zero,zero,1670
   19a04:	00019b5c 	xori	zero,zero,1645
   19a08:	0001a1e0 	cmpeqi	zero,zero,1671
   19a0c:	0001a1a4 	muli	zero,zero,1670
   19a10:	0001a1d4 	movui	zero,1671
   19a14:	0001a168 	cmpgeui	zero,zero,1669
   19a18:	0001a168 	cmpgeui	zero,zero,1669
   19a1c:	0001a168 	cmpgeui	zero,zero,1669
   19a20:	0001a168 	cmpgeui	zero,zero,1669
   19a24:	0001a168 	cmpgeui	zero,zero,1669
   19a28:	0001a168 	cmpgeui	zero,zero,1669
   19a2c:	0001a168 	cmpgeui	zero,zero,1669
   19a30:	0001a168 	cmpgeui	zero,zero,1669
   19a34:	0001a168 	cmpgeui	zero,zero,1669
   19a38:	0001a1a4 	muli	zero,zero,1670
   19a3c:	0001a1a4 	muli	zero,zero,1670
   19a40:	0001a1a4 	muli	zero,zero,1670
   19a44:	0001a1a4 	muli	zero,zero,1670
   19a48:	0001a1a4 	muli	zero,zero,1670
   19a4c:	0001a1a4 	muli	zero,zero,1670
   19a50:	0001a1a4 	muli	zero,zero,1670
   19a54:	0001a1a4 	muli	zero,zero,1670
   19a58:	0001a1a4 	muli	zero,zero,1670
   19a5c:	0001a1a4 	muli	zero,zero,1670
   19a60:	0001a0ec 	andhi	zero,zero,1667
   19a64:	0001a1a4 	muli	zero,zero,1670
   19a68:	0001a1a4 	muli	zero,zero,1670
   19a6c:	0001a1a4 	muli	zero,zero,1670
   19a70:	0001a1a4 	muli	zero,zero,1670
   19a74:	0001a1a4 	muli	zero,zero,1670
   19a78:	0001a1a4 	muli	zero,zero,1670
   19a7c:	0001a1a4 	muli	zero,zero,1670
   19a80:	0001a1a4 	muli	zero,zero,1670
   19a84:	0001a1a4 	muli	zero,zero,1670
   19a88:	0001a1a4 	muli	zero,zero,1670
   19a8c:	0001a29c 	xori	zero,zero,1674
   19a90:	0001a1a4 	muli	zero,zero,1670
   19a94:	0001a1a4 	muli	zero,zero,1670
   19a98:	0001a1a4 	muli	zero,zero,1670
   19a9c:	0001a1a4 	muli	zero,zero,1670
   19aa0:	0001a1a4 	muli	zero,zero,1670
   19aa4:	0001a228 	cmpgeui	zero,zero,1672
   19aa8:	0001a1a4 	muli	zero,zero,1670
   19aac:	0001a1a4 	muli	zero,zero,1670
   19ab0:	00019f28 	cmpgeui	zero,zero,1660
   19ab4:	0001a1a4 	muli	zero,zero,1670
   19ab8:	0001a1a4 	muli	zero,zero,1670
   19abc:	0001a1a4 	muli	zero,zero,1670
   19ac0:	0001a1a4 	muli	zero,zero,1670
   19ac4:	0001a1a4 	muli	zero,zero,1670
   19ac8:	0001a1a4 	muli	zero,zero,1670
   19acc:	0001a1a4 	muli	zero,zero,1670
   19ad0:	0001a1a4 	muli	zero,zero,1670
   19ad4:	0001a1a4 	muli	zero,zero,1670
   19ad8:	0001a1a4 	muli	zero,zero,1670
   19adc:	00019df4 	movhi	zero,1655
   19ae0:	00019fd8 	cmpnei	zero,zero,1663
   19ae4:	0001a1a4 	muli	zero,zero,1670
   19ae8:	0001a1a4 	muli	zero,zero,1670
   19aec:	0001a1a4 	muli	zero,zero,1670
   19af0:	00019fcc 	andi	zero,zero,1663
   19af4:	00019fd8 	cmpnei	zero,zero,1663
   19af8:	0001a1a4 	muli	zero,zero,1670
   19afc:	0001a1a4 	muli	zero,zero,1670
   19b00:	00019fb8 	rdprs	zero,zero,1662
   19b04:	0001a1a4 	muli	zero,zero,1670
   19b08:	00019f78 	rdprs	zero,zero,1661
   19b0c:	00019d44 	movi	zero,1653
   19b10:	00019b68 	cmpgeui	zero,zero,1645
   19b14:	0001a0e0 	cmpeqi	zero,zero,1667
   19b18:	0001a1a4 	muli	zero,zero,1670
   19b1c:	0001a08c 	andi	zero,zero,1666
   19b20:	0001a1a4 	muli	zero,zero,1670
   19b24:	00019ca8 	cmpgeui	zero,zero,1650
   19b28:	0001a1a4 	muli	zero,zero,1670
   19b2c:	0001a1a4 	muli	zero,zero,1670
   19b30:	00019bf4 	movhi	zero,1647
   19b34:	d9002417 	ldw	r4,144(sp)
   19b38:	d9402417 	ldw	r5,144(sp)
   19b3c:	21000017 	ldw	r4,0(r4)
   19b40:	28800104 	addi	r2,r5,4
   19b44:	d9002515 	stw	r4,148(sp)
   19b48:	20032b0e 	bge	r4,zero,1a7f8 <___svfiprintf_internal_r+0xf7c>
   19b4c:	d8c02517 	ldw	r3,148(sp)
   19b50:	d8802415 	stw	r2,144(sp)
   19b54:	00c7c83a 	sub	r3,zero,r3
   19b58:	d8c02515 	stw	r3,148(sp)
   19b5c:	8c400114 	ori	r17,r17,4
   19b60:	98c00007 	ldb	r3,0(r19)
   19b64:	003f9106 	br	199ac <__alt_data_end+0xfc0199ac>
   19b68:	00800c04 	movi	r2,48
   19b6c:	d9402417 	ldw	r5,144(sp)
   19b70:	d9002017 	ldw	r4,128(sp)
   19b74:	d8801d05 	stb	r2,116(sp)
   19b78:	00801e04 	movi	r2,120
   19b7c:	d8801d45 	stb	r2,117(sp)
   19b80:	d8001d85 	stb	zero,118(sp)
   19b84:	b811883a 	mov	r8,r23
   19b88:	28c00104 	addi	r3,r5,4
   19b8c:	2c800017 	ldw	r18,0(r5)
   19b90:	0029883a 	mov	r20,zero
   19b94:	88800094 	ori	r2,r17,2
   19b98:	20036316 	blt	r4,zero,1a928 <___svfiprintf_internal_r+0x10ac>
   19b9c:	00bfdfc4 	movi	r2,-129
   19ba0:	88a0703a 	and	r16,r17,r2
   19ba4:	d8c02415 	stw	r3,144(sp)
   19ba8:	84000094 	ori	r16,r16,2
   19bac:	90031c26 	beq	r18,zero,1a820 <___svfiprintf_internal_r+0xfa4>
   19bb0:	014000f4 	movhi	r5,3
   19bb4:	296ebf04 	addi	r5,r5,-17668
   19bb8:	002b883a 	mov	r21,zero
   19bbc:	d9402915 	stw	r5,164(sp)
   19bc0:	00002906 	br	19c68 <___svfiprintf_internal_r+0x3ec>
   19bc4:	8c400054 	ori	r17,r17,1
   19bc8:	98c00007 	ldb	r3,0(r19)
   19bcc:	003f7706 	br	199ac <__alt_data_end+0xfc0199ac>
   19bd0:	a8803fcc 	andi	r2,r21,255
   19bd4:	1080201c 	xori	r2,r2,128
   19bd8:	10bfe004 	addi	r2,r2,-128
   19bdc:	10032a1e 	bne	r2,zero,1a888 <___svfiprintf_internal_r+0x100c>
   19be0:	00c00044 	movi	r3,1
   19be4:	d8c02105 	stb	r3,132(sp)
   19be8:	05400804 	movi	r21,32
   19bec:	98c00007 	ldb	r3,0(r19)
   19bf0:	003f6e06 	br	199ac <__alt_data_end+0xfc0199ac>
   19bf4:	8821883a 	mov	r16,r17
   19bf8:	dc402103 	ldbu	r17,132(sp)
   19bfc:	b811883a 	mov	r8,r23
   19c00:	8c403fcc 	andi	r17,r17,255
   19c04:	8803f01e 	bne	r17,zero,1abc8 <___svfiprintf_internal_r+0x134c>
   19c08:	008000f4 	movhi	r2,3
   19c0c:	10aebf04 	addi	r2,r2,-17668
   19c10:	d8802915 	stw	r2,164(sp)
   19c14:	8080080c 	andi	r2,r16,32
   19c18:	1000cd26 	beq	r2,zero,19f50 <___svfiprintf_internal_r+0x6d4>
   19c1c:	d9002417 	ldw	r4,144(sp)
   19c20:	24800017 	ldw	r18,0(r4)
   19c24:	25000117 	ldw	r20,4(r4)
   19c28:	21000204 	addi	r4,r4,8
   19c2c:	d9002415 	stw	r4,144(sp)
   19c30:	8080004c 	andi	r2,r16,1
   19c34:	1002c726 	beq	r2,zero,1a754 <___svfiprintf_internal_r+0xed8>
   19c38:	9504b03a 	or	r2,r18,r20
   19c3c:	1003061e 	bne	r2,zero,1a858 <___svfiprintf_internal_r+0xfdc>
   19c40:	d9002017 	ldw	r4,128(sp)
   19c44:	d8001d85 	stb	zero,118(sp)
   19c48:	20033e16 	blt	r4,zero,1a944 <___svfiprintf_internal_r+0x10c8>
   19c4c:	00bfdfc4 	movi	r2,-129
   19c50:	80a0703a 	and	r16,r16,r2
   19c54:	d9402017 	ldw	r5,128(sp)
   19c58:	002b883a 	mov	r21,zero
   19c5c:	28002826 	beq	r5,zero,19d00 <___svfiprintf_internal_r+0x484>
   19c60:	0025883a 	mov	r18,zero
   19c64:	0029883a 	mov	r20,zero
   19c68:	d9002917 	ldw	r4,164(sp)
   19c6c:	dc401a04 	addi	r17,sp,104
   19c70:	908003cc 	andi	r2,r18,15
   19c74:	a006973a 	slli	r3,r20,28
   19c78:	2085883a 	add	r2,r4,r2
   19c7c:	9024d13a 	srli	r18,r18,4
   19c80:	10800003 	ldbu	r2,0(r2)
   19c84:	a028d13a 	srli	r20,r20,4
   19c88:	8c7fffc4 	addi	r17,r17,-1
   19c8c:	1ca4b03a 	or	r18,r3,r18
   19c90:	88800005 	stb	r2,0(r17)
   19c94:	9504b03a 	or	r2,r18,r20
   19c98:	103ff51e 	bne	r2,zero,19c70 <__alt_data_end+0xfc019c70>
   19c9c:	d8801e17 	ldw	r2,120(sp)
   19ca0:	1469c83a 	sub	r20,r2,r17
   19ca4:	00001906 	br	19d0c <___svfiprintf_internal_r+0x490>
   19ca8:	8821883a 	mov	r16,r17
   19cac:	dc402103 	ldbu	r17,132(sp)
   19cb0:	b811883a 	mov	r8,r23
   19cb4:	8c403fcc 	andi	r17,r17,255
   19cb8:	8803d01e 	bne	r17,zero,1abfc <___svfiprintf_internal_r+0x1380>
   19cbc:	8080080c 	andi	r2,r16,32
   19cc0:	10016126 	beq	r2,zero,1a248 <___svfiprintf_internal_r+0x9cc>
   19cc4:	d9002417 	ldw	r4,144(sp)
   19cc8:	d9402017 	ldw	r5,128(sp)
   19ccc:	d8001d85 	stb	zero,118(sp)
   19cd0:	20c00204 	addi	r3,r4,8
   19cd4:	24800017 	ldw	r18,0(r4)
   19cd8:	25000117 	ldw	r20,4(r4)
   19cdc:	28030f16 	blt	r5,zero,1a91c <___svfiprintf_internal_r+0x10a0>
   19ce0:	013fdfc4 	movi	r4,-129
   19ce4:	9504b03a 	or	r2,r18,r20
   19ce8:	d8c02415 	stw	r3,144(sp)
   19cec:	8120703a 	and	r16,r16,r4
   19cf0:	002b883a 	mov	r21,zero
   19cf4:	1000cd1e 	bne	r2,zero,1a02c <___svfiprintf_internal_r+0x7b0>
   19cf8:	d8c02017 	ldw	r3,128(sp)
   19cfc:	1803141e 	bne	r3,zero,1a950 <___svfiprintf_internal_r+0x10d4>
   19d00:	d8002015 	stw	zero,128(sp)
   19d04:	0029883a 	mov	r20,zero
   19d08:	dc401a04 	addi	r17,sp,104
   19d0c:	dc802017 	ldw	r18,128(sp)
   19d10:	9500010e 	bge	r18,r20,19d18 <___svfiprintf_internal_r+0x49c>
   19d14:	a025883a 	mov	r18,r20
   19d18:	ad403fcc 	andi	r21,r21,255
   19d1c:	ad40201c 	xori	r21,r21,128
   19d20:	ad7fe004 	addi	r21,r21,-128
   19d24:	a8003f26 	beq	r21,zero,19e24 <___svfiprintf_internal_r+0x5a8>
   19d28:	94800044 	addi	r18,r18,1
   19d2c:	00003d06 	br	19e24 <___svfiprintf_internal_r+0x5a8>
   19d30:	00c00044 	movi	r3,1
   19d34:	d8c02105 	stb	r3,132(sp)
   19d38:	05400ac4 	movi	r21,43
   19d3c:	98c00007 	ldb	r3,0(r19)
   19d40:	003f1a06 	br	199ac <__alt_data_end+0xfc0199ac>
   19d44:	8821883a 	mov	r16,r17
   19d48:	dc402103 	ldbu	r17,132(sp)
   19d4c:	b811883a 	mov	r8,r23
   19d50:	8c403fcc 	andi	r17,r17,255
   19d54:	8803a71e 	bne	r17,zero,1abf4 <___svfiprintf_internal_r+0x1378>
   19d58:	8080080c 	andi	r2,r16,32
   19d5c:	10015726 	beq	r2,zero,1a2bc <___svfiprintf_internal_r+0xa40>
   19d60:	d8c02417 	ldw	r3,144(sp)
   19d64:	d9002017 	ldw	r4,128(sp)
   19d68:	d8001d85 	stb	zero,118(sp)
   19d6c:	18800204 	addi	r2,r3,8
   19d70:	1c800017 	ldw	r18,0(r3)
   19d74:	1d000117 	ldw	r20,4(r3)
   19d78:	2002db16 	blt	r4,zero,1a8e8 <___svfiprintf_internal_r+0x106c>
   19d7c:	013fdfc4 	movi	r4,-129
   19d80:	9506b03a 	or	r3,r18,r20
   19d84:	d8802415 	stw	r2,144(sp)
   19d88:	8120703a 	and	r16,r16,r4
   19d8c:	18015826 	beq	r3,zero,1a2f0 <___svfiprintf_internal_r+0xa74>
   19d90:	002b883a 	mov	r21,zero
   19d94:	dc401a04 	addi	r17,sp,104
   19d98:	9006d0fa 	srli	r3,r18,3
   19d9c:	a008977a 	slli	r4,r20,29
   19da0:	a028d0fa 	srli	r20,r20,3
   19da4:	948001cc 	andi	r18,r18,7
   19da8:	90800c04 	addi	r2,r18,48
   19dac:	8c7fffc4 	addi	r17,r17,-1
   19db0:	20e4b03a 	or	r18,r4,r3
   19db4:	88800005 	stb	r2,0(r17)
   19db8:	9506b03a 	or	r3,r18,r20
   19dbc:	183ff61e 	bne	r3,zero,19d98 <__alt_data_end+0xfc019d98>
   19dc0:	80c0004c 	andi	r3,r16,1
   19dc4:	18028926 	beq	r3,zero,1a7ec <___svfiprintf_internal_r+0xf70>
   19dc8:	10803fcc 	andi	r2,r2,255
   19dcc:	1080201c 	xori	r2,r2,128
   19dd0:	10bfe004 	addi	r2,r2,-128
   19dd4:	00c00c04 	movi	r3,48
   19dd8:	10ffb026 	beq	r2,r3,19c9c <__alt_data_end+0xfc019c9c>
   19ddc:	88ffffc5 	stb	r3,-1(r17)
   19de0:	d8c01e17 	ldw	r3,120(sp)
   19de4:	88bfffc4 	addi	r2,r17,-1
   19de8:	1023883a 	mov	r17,r2
   19dec:	18a9c83a 	sub	r20,r3,r2
   19df0:	003fc606 	br	19d0c <__alt_data_end+0xfc019d0c>
   19df4:	d8c02417 	ldw	r3,144(sp)
   19df8:	04800044 	movi	r18,1
   19dfc:	8821883a 	mov	r16,r17
   19e00:	18800017 	ldw	r2,0(r3)
   19e04:	18c00104 	addi	r3,r3,4
   19e08:	b811883a 	mov	r8,r23
   19e0c:	d8001d85 	stb	zero,118(sp)
   19e10:	d8801005 	stb	r2,64(sp)
   19e14:	d8c02415 	stw	r3,144(sp)
   19e18:	9029883a 	mov	r20,r18
   19e1c:	dc401004 	addi	r17,sp,64
   19e20:	d8002015 	stw	zero,128(sp)
   19e24:	80c0008c 	andi	r3,r16,2
   19e28:	d8c02115 	stw	r3,132(sp)
   19e2c:	18000126 	beq	r3,zero,19e34 <___svfiprintf_internal_r+0x5b8>
   19e30:	94800084 	addi	r18,r18,2
   19e34:	80c0210c 	andi	r3,r16,132
   19e38:	d8c02215 	stw	r3,136(sp)
   19e3c:	1801321e 	bne	r3,zero,1a308 <___svfiprintf_internal_r+0xa8c>
   19e40:	d9002517 	ldw	r4,148(sp)
   19e44:	24b9c83a 	sub	fp,r4,r18
   19e48:	07012f0e 	bge	zero,fp,1a308 <___svfiprintf_internal_r+0xa8c>
   19e4c:	02400404 	movi	r9,16
   19e50:	d8c01c17 	ldw	r3,112(sp)
   19e54:	d8801b17 	ldw	r2,108(sp)
   19e58:	4f03250e 	bge	r9,fp,1aaf0 <___svfiprintf_internal_r+0x1274>
   19e5c:	010000f4 	movhi	r4,3
   19e60:	212f2b04 	addi	r4,r4,-17236
   19e64:	dc002a15 	stw	r16,168(sp)
   19e68:	dc402b15 	stw	r17,172(sp)
   19e6c:	d9002815 	stw	r4,160(sp)
   19e70:	e023883a 	mov	r17,fp
   19e74:	482f883a 	mov	r23,r9
   19e78:	9839883a 	mov	fp,r19
   19e7c:	054001c4 	movi	r21,7
   19e80:	9027883a 	mov	r19,r18
   19e84:	dc002717 	ldw	r16,156(sp)
   19e88:	dc802317 	ldw	r18,140(sp)
   19e8c:	00000306 	br	19e9c <___svfiprintf_internal_r+0x620>
   19e90:	8c7ffc04 	addi	r17,r17,-16
   19e94:	42000204 	addi	r8,r8,8
   19e98:	bc40130e 	bge	r23,r17,19ee8 <___svfiprintf_internal_r+0x66c>
   19e9c:	014000f4 	movhi	r5,3
   19ea0:	18c00404 	addi	r3,r3,16
   19ea4:	10800044 	addi	r2,r2,1
   19ea8:	296f2b04 	addi	r5,r5,-17236
   19eac:	41400015 	stw	r5,0(r8)
   19eb0:	45c00115 	stw	r23,4(r8)
   19eb4:	d8c01c15 	stw	r3,112(sp)
   19eb8:	d8801b15 	stw	r2,108(sp)
   19ebc:	a8bff40e 	bge	r21,r2,19e90 <__alt_data_end+0xfc019e90>
   19ec0:	d9801a04 	addi	r6,sp,104
   19ec4:	900b883a 	mov	r5,r18
   19ec8:	8009883a 	mov	r4,r16
   19ecc:	00196ac0 	call	196ac <__ssprint_r>
   19ed0:	1001aa1e 	bne	r2,zero,1a57c <___svfiprintf_internal_r+0xd00>
   19ed4:	8c7ffc04 	addi	r17,r17,-16
   19ed8:	d8c01c17 	ldw	r3,112(sp)
   19edc:	d8801b17 	ldw	r2,108(sp)
   19ee0:	d811883a 	mov	r8,sp
   19ee4:	bc7fed16 	blt	r23,r17,19e9c <__alt_data_end+0xfc019e9c>
   19ee8:	9825883a 	mov	r18,r19
   19eec:	dc002a17 	ldw	r16,168(sp)
   19ef0:	e027883a 	mov	r19,fp
   19ef4:	8839883a 	mov	fp,r17
   19ef8:	dc402b17 	ldw	r17,172(sp)
   19efc:	d9002817 	ldw	r4,160(sp)
   19f00:	e0c7883a 	add	r3,fp,r3
   19f04:	10800044 	addi	r2,r2,1
   19f08:	41000015 	stw	r4,0(r8)
   19f0c:	47000115 	stw	fp,4(r8)
   19f10:	d8c01c15 	stw	r3,112(sp)
   19f14:	d8801b15 	stw	r2,108(sp)
   19f18:	010001c4 	movi	r4,7
   19f1c:	20821616 	blt	r4,r2,1a778 <___svfiprintf_internal_r+0xefc>
   19f20:	42000204 	addi	r8,r8,8
   19f24:	0000fa06 	br	1a310 <___svfiprintf_internal_r+0xa94>
   19f28:	8821883a 	mov	r16,r17
   19f2c:	dc402103 	ldbu	r17,132(sp)
   19f30:	b811883a 	mov	r8,r23
   19f34:	8c403fcc 	andi	r17,r17,255
   19f38:	8803361e 	bne	r17,zero,1ac14 <___svfiprintf_internal_r+0x1398>
   19f3c:	014000f4 	movhi	r5,3
   19f40:	296eba04 	addi	r5,r5,-17688
   19f44:	d9402915 	stw	r5,164(sp)
   19f48:	8080080c 	andi	r2,r16,32
   19f4c:	103f331e 	bne	r2,zero,19c1c <__alt_data_end+0xfc019c1c>
   19f50:	8080040c 	andi	r2,r16,16
   19f54:	1002551e 	bne	r2,zero,1a8ac <___svfiprintf_internal_r+0x1030>
   19f58:	8080100c 	andi	r2,r16,64
   19f5c:	1002a626 	beq	r2,zero,1a9f8 <___svfiprintf_internal_r+0x117c>
   19f60:	d8802417 	ldw	r2,144(sp)
   19f64:	0029883a 	mov	r20,zero
   19f68:	1480000b 	ldhu	r18,0(r2)
   19f6c:	10800104 	addi	r2,r2,4
   19f70:	d8802415 	stw	r2,144(sp)
   19f74:	003f2e06 	br	19c30 <__alt_data_end+0xfc019c30>
   19f78:	8821883a 	mov	r16,r17
   19f7c:	dc402103 	ldbu	r17,132(sp)
   19f80:	b811883a 	mov	r8,r23
   19f84:	8c403fcc 	andi	r17,r17,255
   19f88:	88030b1e 	bne	r17,zero,1abb8 <___svfiprintf_internal_r+0x133c>
   19f8c:	8080080c 	andi	r2,r16,32
   19f90:	1002271e 	bne	r2,zero,1a830 <___svfiprintf_internal_r+0xfb4>
   19f94:	8080040c 	andi	r2,r16,16
   19f98:	10028e26 	beq	r2,zero,1a9d4 <___svfiprintf_internal_r+0x1158>
   19f9c:	d8c02417 	ldw	r3,144(sp)
   19fa0:	d9002617 	ldw	r4,152(sp)
   19fa4:	18800017 	ldw	r2,0(r3)
   19fa8:	18c00104 	addi	r3,r3,4
   19fac:	d8c02415 	stw	r3,144(sp)
   19fb0:	11000015 	stw	r4,0(r2)
   19fb4:	003e5306 	br	19904 <__alt_data_end+0xfc019904>
   19fb8:	98c00007 	ldb	r3,0(r19)
   19fbc:	01401b04 	movi	r5,108
   19fc0:	19424f26 	beq	r3,r5,1a900 <___svfiprintf_internal_r+0x1084>
   19fc4:	8c400414 	ori	r17,r17,16
   19fc8:	003e7806 	br	199ac <__alt_data_end+0xfc0199ac>
   19fcc:	8c401014 	ori	r17,r17,64
   19fd0:	98c00007 	ldb	r3,0(r19)
   19fd4:	003e7506 	br	199ac <__alt_data_end+0xfc0199ac>
   19fd8:	8821883a 	mov	r16,r17
   19fdc:	dc402103 	ldbu	r17,132(sp)
   19fe0:	b811883a 	mov	r8,r23
   19fe4:	8c403fcc 	andi	r17,r17,255
   19fe8:	8802fe1e 	bne	r17,zero,1abe4 <___svfiprintf_internal_r+0x1368>
   19fec:	8080080c 	andi	r2,r16,32
   19ff0:	10004626 	beq	r2,zero,1a10c <___svfiprintf_internal_r+0x890>
   19ff4:	d9002417 	ldw	r4,144(sp)
   19ff8:	20800117 	ldw	r2,4(r4)
   19ffc:	24800017 	ldw	r18,0(r4)
   1a000:	21000204 	addi	r4,r4,8
   1a004:	d9002415 	stw	r4,144(sp)
   1a008:	1029883a 	mov	r20,r2
   1a00c:	10004a16 	blt	r2,zero,1a138 <___svfiprintf_internal_r+0x8bc>
   1a010:	d9002017 	ldw	r4,128(sp)
   1a014:	dd401d83 	ldbu	r21,118(sp)
   1a018:	2001eb16 	blt	r4,zero,1a7c8 <___svfiprintf_internal_r+0xf4c>
   1a01c:	00ffdfc4 	movi	r3,-129
   1a020:	9504b03a 	or	r2,r18,r20
   1a024:	80e0703a 	and	r16,r16,r3
   1a028:	103f3326 	beq	r2,zero,19cf8 <__alt_data_end+0xfc019cf8>
   1a02c:	a0009426 	beq	r20,zero,1a280 <___svfiprintf_internal_r+0xa04>
   1a030:	dc401a04 	addi	r17,sp,104
   1a034:	402f883a 	mov	r23,r8
   1a038:	9009883a 	mov	r4,r18
   1a03c:	a00b883a 	mov	r5,r20
   1a040:	01800284 	movi	r6,10
   1a044:	000f883a 	mov	r7,zero
   1a048:	001d25c0 	call	1d25c <__umoddi3>
   1a04c:	10800c04 	addi	r2,r2,48
   1a050:	8c7fffc4 	addi	r17,r17,-1
   1a054:	9009883a 	mov	r4,r18
   1a058:	a00b883a 	mov	r5,r20
   1a05c:	88800005 	stb	r2,0(r17)
   1a060:	01800284 	movi	r6,10
   1a064:	000f883a 	mov	r7,zero
   1a068:	001cc600 	call	1cc60 <__udivdi3>
   1a06c:	1025883a 	mov	r18,r2
   1a070:	10c4b03a 	or	r2,r2,r3
   1a074:	1829883a 	mov	r20,r3
   1a078:	103fef1e 	bne	r2,zero,1a038 <__alt_data_end+0xfc01a038>
   1a07c:	d9001e17 	ldw	r4,120(sp)
   1a080:	b811883a 	mov	r8,r23
   1a084:	2469c83a 	sub	r20,r4,r17
   1a088:	003f2006 	br	19d0c <__alt_data_end+0xfc019d0c>
   1a08c:	d8802417 	ldw	r2,144(sp)
   1a090:	8821883a 	mov	r16,r17
   1a094:	d8001d85 	stb	zero,118(sp)
   1a098:	14400017 	ldw	r17,0(r2)
   1a09c:	b811883a 	mov	r8,r23
   1a0a0:	15c00104 	addi	r23,r2,4
   1a0a4:	88026c26 	beq	r17,zero,1aa58 <___svfiprintf_internal_r+0x11dc>
   1a0a8:	d8c02017 	ldw	r3,128(sp)
   1a0ac:	18025f16 	blt	r3,zero,1aa2c <___svfiprintf_internal_r+0x11b0>
   1a0b0:	180d883a 	mov	r6,r3
   1a0b4:	000b883a 	mov	r5,zero
   1a0b8:	8809883a 	mov	r4,r17
   1a0bc:	da002d15 	stw	r8,180(sp)
   1a0c0:	0017b380 	call	17b38 <memchr>
   1a0c4:	da002d17 	ldw	r8,180(sp)
   1a0c8:	1002a526 	beq	r2,zero,1ab60 <___svfiprintf_internal_r+0x12e4>
   1a0cc:	1469c83a 	sub	r20,r2,r17
   1a0d0:	dd401d83 	ldbu	r21,118(sp)
   1a0d4:	ddc02415 	stw	r23,144(sp)
   1a0d8:	d8002015 	stw	zero,128(sp)
   1a0dc:	003f0b06 	br	19d0c <__alt_data_end+0xfc019d0c>
   1a0e0:	8c400814 	ori	r17,r17,32
   1a0e4:	98c00007 	ldb	r3,0(r19)
   1a0e8:	003e3006 	br	199ac <__alt_data_end+0xfc0199ac>
   1a0ec:	8821883a 	mov	r16,r17
   1a0f0:	dc402103 	ldbu	r17,132(sp)
   1a0f4:	b811883a 	mov	r8,r23
   1a0f8:	8c403fcc 	andi	r17,r17,255
   1a0fc:	8802b01e 	bne	r17,zero,1abc0 <___svfiprintf_internal_r+0x1344>
   1a100:	84000414 	ori	r16,r16,16
   1a104:	8080080c 	andi	r2,r16,32
   1a108:	103fba1e 	bne	r2,zero,19ff4 <__alt_data_end+0xfc019ff4>
   1a10c:	8080040c 	andi	r2,r16,16
   1a110:	1001df1e 	bne	r2,zero,1a890 <___svfiprintf_internal_r+0x1014>
   1a114:	8080100c 	andi	r2,r16,64
   1a118:	10023d26 	beq	r2,zero,1aa10 <___svfiprintf_internal_r+0x1194>
   1a11c:	d8802417 	ldw	r2,144(sp)
   1a120:	1480000f 	ldh	r18,0(r2)
   1a124:	10800104 	addi	r2,r2,4
   1a128:	d8802415 	stw	r2,144(sp)
   1a12c:	9029d7fa 	srai	r20,r18,31
   1a130:	a005883a 	mov	r2,r20
   1a134:	103fb60e 	bge	r2,zero,1a010 <__alt_data_end+0xfc01a010>
   1a138:	d9402017 	ldw	r5,128(sp)
   1a13c:	04a5c83a 	sub	r18,zero,r18
   1a140:	05400b44 	movi	r21,45
   1a144:	9004c03a 	cmpne	r2,r18,zero
   1a148:	0529c83a 	sub	r20,zero,r20
   1a14c:	dd401d85 	stb	r21,118(sp)
   1a150:	a0a9c83a 	sub	r20,r20,r2
   1a154:	28026c16 	blt	r5,zero,1ab08 <___svfiprintf_internal_r+0x128c>
   1a158:	00bfdfc4 	movi	r2,-129
   1a15c:	80a0703a 	and	r16,r16,r2
   1a160:	a03fb31e 	bne	r20,zero,1a030 <__alt_data_end+0xfc01a030>
   1a164:	00004606 	br	1a280 <___svfiprintf_internal_r+0xa04>
   1a168:	9839883a 	mov	fp,r19
   1a16c:	d8002515 	stw	zero,148(sp)
   1a170:	1c3ff404 	addi	r16,r3,-48
   1a174:	0009883a 	mov	r4,zero
   1a178:	01400284 	movi	r5,10
   1a17c:	000d9380 	call	d938 <__mulsi3>
   1a180:	e0c00007 	ldb	r3,0(fp)
   1a184:	8089883a 	add	r4,r16,r2
   1a188:	9cc00044 	addi	r19,r19,1
   1a18c:	1c3ff404 	addi	r16,r3,-48
   1a190:	9839883a 	mov	fp,r19
   1a194:	a43ff82e 	bgeu	r20,r16,1a178 <__alt_data_end+0xfc01a178>
   1a198:	d9002515 	stw	r4,148(sp)
   1a19c:	18bff804 	addi	r2,r3,-32
   1a1a0:	90be052e 	bgeu	r18,r2,199b8 <__alt_data_end+0xfc0199b8>
   1a1a4:	8821883a 	mov	r16,r17
   1a1a8:	dc402103 	ldbu	r17,132(sp)
   1a1ac:	b811883a 	mov	r8,r23
   1a1b0:	8c403fcc 	andi	r17,r17,255
   1a1b4:	88028d1e 	bne	r17,zero,1abec <___svfiprintf_internal_r+0x1370>
   1a1b8:	1800ea26 	beq	r3,zero,1a564 <___svfiprintf_internal_r+0xce8>
   1a1bc:	04800044 	movi	r18,1
   1a1c0:	d8c01005 	stb	r3,64(sp)
   1a1c4:	d8001d85 	stb	zero,118(sp)
   1a1c8:	9029883a 	mov	r20,r18
   1a1cc:	dc401004 	addi	r17,sp,64
   1a1d0:	003f1306 	br	19e20 <__alt_data_end+0xfc019e20>
   1a1d4:	8c402014 	ori	r17,r17,128
   1a1d8:	98c00007 	ldb	r3,0(r19)
   1a1dc:	003df306 	br	199ac <__alt_data_end+0xfc0199ac>
   1a1e0:	98c00007 	ldb	r3,0(r19)
   1a1e4:	01000a84 	movi	r4,42
   1a1e8:	9f000044 	addi	fp,r19,1
   1a1ec:	19026326 	beq	r3,r4,1ab7c <___svfiprintf_internal_r+0x1300>
   1a1f0:	1c3ff404 	addi	r16,r3,-48
   1a1f4:	0009883a 	mov	r4,zero
   1a1f8:	a4025636 	bltu	r20,r16,1ab54 <___svfiprintf_internal_r+0x12d8>
   1a1fc:	01400284 	movi	r5,10
   1a200:	000d9380 	call	d938 <__mulsi3>
   1a204:	e0c00007 	ldb	r3,0(fp)
   1a208:	1409883a 	add	r4,r2,r16
   1a20c:	e4c00044 	addi	r19,fp,1
   1a210:	1c3ff404 	addi	r16,r3,-48
   1a214:	9839883a 	mov	fp,r19
   1a218:	a43ff82e 	bgeu	r20,r16,1a1fc <__alt_data_end+0xfc01a1fc>
   1a21c:	20020c16 	blt	r4,zero,1aa50 <___svfiprintf_internal_r+0x11d4>
   1a220:	d9002015 	stw	r4,128(sp)
   1a224:	003de206 	br	199b0 <__alt_data_end+0xfc0199b0>
   1a228:	8821883a 	mov	r16,r17
   1a22c:	dc402103 	ldbu	r17,132(sp)
   1a230:	b811883a 	mov	r8,r23
   1a234:	8c403fcc 	andi	r17,r17,255
   1a238:	8802721e 	bne	r17,zero,1ac04 <___svfiprintf_internal_r+0x1388>
   1a23c:	84000414 	ori	r16,r16,16
   1a240:	8080080c 	andi	r2,r16,32
   1a244:	103e9f1e 	bne	r2,zero,19cc4 <__alt_data_end+0xfc019cc4>
   1a248:	8080040c 	andi	r2,r16,16
   1a24c:	10015326 	beq	r2,zero,1a79c <___svfiprintf_internal_r+0xf20>
   1a250:	d8c02417 	ldw	r3,144(sp)
   1a254:	d9002017 	ldw	r4,128(sp)
   1a258:	d8001d85 	stb	zero,118(sp)
   1a25c:	18800104 	addi	r2,r3,4
   1a260:	1c800017 	ldw	r18,0(r3)
   1a264:	0029883a 	mov	r20,zero
   1a268:	20015516 	blt	r4,zero,1a7c0 <___svfiprintf_internal_r+0xf44>
   1a26c:	00ffdfc4 	movi	r3,-129
   1a270:	d8802415 	stw	r2,144(sp)
   1a274:	80e0703a 	and	r16,r16,r3
   1a278:	002b883a 	mov	r21,zero
   1a27c:	903e9e26 	beq	r18,zero,19cf8 <__alt_data_end+0xfc019cf8>
   1a280:	00800244 	movi	r2,9
   1a284:	14bf6a36 	bltu	r2,r18,1a030 <__alt_data_end+0xfc01a030>
   1a288:	94800c04 	addi	r18,r18,48
   1a28c:	dc8019c5 	stb	r18,103(sp)
   1a290:	dd002c17 	ldw	r20,176(sp)
   1a294:	dc4019c4 	addi	r17,sp,103
   1a298:	003e9c06 	br	19d0c <__alt_data_end+0xfc019d0c>
   1a29c:	8821883a 	mov	r16,r17
   1a2a0:	dc402103 	ldbu	r17,132(sp)
   1a2a4:	b811883a 	mov	r8,r23
   1a2a8:	8c403fcc 	andi	r17,r17,255
   1a2ac:	8802571e 	bne	r17,zero,1ac0c <___svfiprintf_internal_r+0x1390>
   1a2b0:	84000414 	ori	r16,r16,16
   1a2b4:	8080080c 	andi	r2,r16,32
   1a2b8:	103ea91e 	bne	r2,zero,19d60 <__alt_data_end+0xfc019d60>
   1a2bc:	8080040c 	andi	r2,r16,16
   1a2c0:	10018026 	beq	r2,zero,1a8c4 <___svfiprintf_internal_r+0x1048>
   1a2c4:	d9402417 	ldw	r5,144(sp)
   1a2c8:	d8c02017 	ldw	r3,128(sp)
   1a2cc:	d8001d85 	stb	zero,118(sp)
   1a2d0:	28800104 	addi	r2,r5,4
   1a2d4:	2c800017 	ldw	r18,0(r5)
   1a2d8:	0029883a 	mov	r20,zero
   1a2dc:	18018216 	blt	r3,zero,1a8e8 <___svfiprintf_internal_r+0x106c>
   1a2e0:	00ffdfc4 	movi	r3,-129
   1a2e4:	d8802415 	stw	r2,144(sp)
   1a2e8:	80e0703a 	and	r16,r16,r3
   1a2ec:	903ea81e 	bne	r18,zero,19d90 <__alt_data_end+0xfc019d90>
   1a2f0:	d8802017 	ldw	r2,128(sp)
   1a2f4:	002b883a 	mov	r21,zero
   1a2f8:	1001f226 	beq	r2,zero,1aac4 <___svfiprintf_internal_r+0x1248>
   1a2fc:	0025883a 	mov	r18,zero
   1a300:	0029883a 	mov	r20,zero
   1a304:	003ea306 	br	19d94 <__alt_data_end+0xfc019d94>
   1a308:	d8c01c17 	ldw	r3,112(sp)
   1a30c:	d8801b17 	ldw	r2,108(sp)
   1a310:	d9001d87 	ldb	r4,118(sp)
   1a314:	20000b26 	beq	r4,zero,1a344 <___svfiprintf_internal_r+0xac8>
   1a318:	d9001d84 	addi	r4,sp,118
   1a31c:	18c00044 	addi	r3,r3,1
   1a320:	10800044 	addi	r2,r2,1
   1a324:	41000015 	stw	r4,0(r8)
   1a328:	01000044 	movi	r4,1
   1a32c:	41000115 	stw	r4,4(r8)
   1a330:	d8c01c15 	stw	r3,112(sp)
   1a334:	d8801b15 	stw	r2,108(sp)
   1a338:	010001c4 	movi	r4,7
   1a33c:	2080f316 	blt	r4,r2,1a70c <___svfiprintf_internal_r+0xe90>
   1a340:	42000204 	addi	r8,r8,8
   1a344:	d9402117 	ldw	r5,132(sp)
   1a348:	28000b26 	beq	r5,zero,1a378 <___svfiprintf_internal_r+0xafc>
   1a34c:	d9001d04 	addi	r4,sp,116
   1a350:	18c00084 	addi	r3,r3,2
   1a354:	10800044 	addi	r2,r2,1
   1a358:	41000015 	stw	r4,0(r8)
   1a35c:	01000084 	movi	r4,2
   1a360:	41000115 	stw	r4,4(r8)
   1a364:	d8c01c15 	stw	r3,112(sp)
   1a368:	d8801b15 	stw	r2,108(sp)
   1a36c:	010001c4 	movi	r4,7
   1a370:	2080ef16 	blt	r4,r2,1a730 <___svfiprintf_internal_r+0xeb4>
   1a374:	42000204 	addi	r8,r8,8
   1a378:	d9402217 	ldw	r5,136(sp)
   1a37c:	01002004 	movi	r4,128
   1a380:	29008f26 	beq	r5,r4,1a5c0 <___svfiprintf_internal_r+0xd44>
   1a384:	d9002017 	ldw	r4,128(sp)
   1a388:	252fc83a 	sub	r23,r4,r20
   1a38c:	05c0310e 	bge	zero,r23,1a454 <___svfiprintf_internal_r+0xbd8>
   1a390:	07000404 	movi	fp,16
   1a394:	e5c17d0e 	bge	fp,r23,1a98c <___svfiprintf_internal_r+0x1110>
   1a398:	010000f4 	movhi	r4,3
   1a39c:	212f2704 	addi	r4,r4,-17252
   1a3a0:	dc002015 	stw	r16,128(sp)
   1a3a4:	dc402215 	stw	r17,136(sp)
   1a3a8:	d9002115 	stw	r4,132(sp)
   1a3ac:	b823883a 	mov	r17,r23
   1a3b0:	054001c4 	movi	r21,7
   1a3b4:	982f883a 	mov	r23,r19
   1a3b8:	dc002717 	ldw	r16,156(sp)
   1a3bc:	9027883a 	mov	r19,r18
   1a3c0:	dc802317 	ldw	r18,140(sp)
   1a3c4:	00000306 	br	1a3d4 <___svfiprintf_internal_r+0xb58>
   1a3c8:	8c7ffc04 	addi	r17,r17,-16
   1a3cc:	42000204 	addi	r8,r8,8
   1a3d0:	e440110e 	bge	fp,r17,1a418 <___svfiprintf_internal_r+0xb9c>
   1a3d4:	18c00404 	addi	r3,r3,16
   1a3d8:	10800044 	addi	r2,r2,1
   1a3dc:	45800015 	stw	r22,0(r8)
   1a3e0:	47000115 	stw	fp,4(r8)
   1a3e4:	d8c01c15 	stw	r3,112(sp)
   1a3e8:	d8801b15 	stw	r2,108(sp)
   1a3ec:	a8bff60e 	bge	r21,r2,1a3c8 <__alt_data_end+0xfc01a3c8>
   1a3f0:	d9801a04 	addi	r6,sp,104
   1a3f4:	900b883a 	mov	r5,r18
   1a3f8:	8009883a 	mov	r4,r16
   1a3fc:	00196ac0 	call	196ac <__ssprint_r>
   1a400:	10005e1e 	bne	r2,zero,1a57c <___svfiprintf_internal_r+0xd00>
   1a404:	8c7ffc04 	addi	r17,r17,-16
   1a408:	d8c01c17 	ldw	r3,112(sp)
   1a40c:	d8801b17 	ldw	r2,108(sp)
   1a410:	d811883a 	mov	r8,sp
   1a414:	e47fef16 	blt	fp,r17,1a3d4 <__alt_data_end+0xfc01a3d4>
   1a418:	9825883a 	mov	r18,r19
   1a41c:	dc002017 	ldw	r16,128(sp)
   1a420:	b827883a 	mov	r19,r23
   1a424:	882f883a 	mov	r23,r17
   1a428:	dc402217 	ldw	r17,136(sp)
   1a42c:	d9402117 	ldw	r5,132(sp)
   1a430:	1dc7883a 	add	r3,r3,r23
   1a434:	10800044 	addi	r2,r2,1
   1a438:	41400015 	stw	r5,0(r8)
   1a43c:	45c00115 	stw	r23,4(r8)
   1a440:	d8c01c15 	stw	r3,112(sp)
   1a444:	d8801b15 	stw	r2,108(sp)
   1a448:	010001c4 	movi	r4,7
   1a44c:	2080a616 	blt	r4,r2,1a6e8 <___svfiprintf_internal_r+0xe6c>
   1a450:	42000204 	addi	r8,r8,8
   1a454:	a0c7883a 	add	r3,r20,r3
   1a458:	10800044 	addi	r2,r2,1
   1a45c:	44400015 	stw	r17,0(r8)
   1a460:	45000115 	stw	r20,4(r8)
   1a464:	d8c01c15 	stw	r3,112(sp)
   1a468:	d8801b15 	stw	r2,108(sp)
   1a46c:	010001c4 	movi	r4,7
   1a470:	20808816 	blt	r4,r2,1a694 <___svfiprintf_internal_r+0xe18>
   1a474:	42000204 	addi	r8,r8,8
   1a478:	8400010c 	andi	r16,r16,4
   1a47c:	80002c26 	beq	r16,zero,1a530 <___svfiprintf_internal_r+0xcb4>
   1a480:	d8802517 	ldw	r2,148(sp)
   1a484:	14a1c83a 	sub	r16,r2,r18
   1a488:	0400290e 	bge	zero,r16,1a530 <___svfiprintf_internal_r+0xcb4>
   1a48c:	04400404 	movi	r17,16
   1a490:	d8801b17 	ldw	r2,108(sp)
   1a494:	8c01a70e 	bge	r17,r16,1ab34 <___svfiprintf_internal_r+0x12b8>
   1a498:	014000f4 	movhi	r5,3
   1a49c:	296f2b04 	addi	r5,r5,-17236
   1a4a0:	d9402815 	stw	r5,160(sp)
   1a4a4:	050001c4 	movi	r20,7
   1a4a8:	dd402717 	ldw	r21,156(sp)
   1a4ac:	ddc02317 	ldw	r23,140(sp)
   1a4b0:	00000306 	br	1a4c0 <___svfiprintf_internal_r+0xc44>
   1a4b4:	843ffc04 	addi	r16,r16,-16
   1a4b8:	42000204 	addi	r8,r8,8
   1a4bc:	8c00130e 	bge	r17,r16,1a50c <___svfiprintf_internal_r+0xc90>
   1a4c0:	010000f4 	movhi	r4,3
   1a4c4:	18c00404 	addi	r3,r3,16
   1a4c8:	10800044 	addi	r2,r2,1
   1a4cc:	212f2b04 	addi	r4,r4,-17236
   1a4d0:	41000015 	stw	r4,0(r8)
   1a4d4:	44400115 	stw	r17,4(r8)
   1a4d8:	d8c01c15 	stw	r3,112(sp)
   1a4dc:	d8801b15 	stw	r2,108(sp)
   1a4e0:	a0bff40e 	bge	r20,r2,1a4b4 <__alt_data_end+0xfc01a4b4>
   1a4e4:	d9801a04 	addi	r6,sp,104
   1a4e8:	b80b883a 	mov	r5,r23
   1a4ec:	a809883a 	mov	r4,r21
   1a4f0:	00196ac0 	call	196ac <__ssprint_r>
   1a4f4:	1000211e 	bne	r2,zero,1a57c <___svfiprintf_internal_r+0xd00>
   1a4f8:	843ffc04 	addi	r16,r16,-16
   1a4fc:	d8c01c17 	ldw	r3,112(sp)
   1a500:	d8801b17 	ldw	r2,108(sp)
   1a504:	d811883a 	mov	r8,sp
   1a508:	8c3fed16 	blt	r17,r16,1a4c0 <__alt_data_end+0xfc01a4c0>
   1a50c:	d9402817 	ldw	r5,160(sp)
   1a510:	1c07883a 	add	r3,r3,r16
   1a514:	10800044 	addi	r2,r2,1
   1a518:	41400015 	stw	r5,0(r8)
   1a51c:	44000115 	stw	r16,4(r8)
   1a520:	d8c01c15 	stw	r3,112(sp)
   1a524:	d8801b15 	stw	r2,108(sp)
   1a528:	010001c4 	movi	r4,7
   1a52c:	2080b516 	blt	r4,r2,1a804 <___svfiprintf_internal_r+0xf88>
   1a530:	d8802517 	ldw	r2,148(sp)
   1a534:	1480010e 	bge	r2,r18,1a53c <___svfiprintf_internal_r+0xcc0>
   1a538:	9005883a 	mov	r2,r18
   1a53c:	d9002617 	ldw	r4,152(sp)
   1a540:	2089883a 	add	r4,r4,r2
   1a544:	d9002615 	stw	r4,152(sp)
   1a548:	18005a1e 	bne	r3,zero,1a6b4 <___svfiprintf_internal_r+0xe38>
   1a54c:	98800007 	ldb	r2,0(r19)
   1a550:	d8001b15 	stw	zero,108(sp)
   1a554:	d811883a 	mov	r8,sp
   1a558:	103cec1e 	bne	r2,zero,1990c <__alt_data_end+0xfc01990c>
   1a55c:	9825883a 	mov	r18,r19
   1a560:	003d0206 	br	1996c <__alt_data_end+0xfc01996c>
   1a564:	d8801c17 	ldw	r2,112(sp)
   1a568:	10000426 	beq	r2,zero,1a57c <___svfiprintf_internal_r+0xd00>
   1a56c:	d9402317 	ldw	r5,140(sp)
   1a570:	d9002717 	ldw	r4,156(sp)
   1a574:	d9801a04 	addi	r6,sp,104
   1a578:	00196ac0 	call	196ac <__ssprint_r>
   1a57c:	d9402317 	ldw	r5,140(sp)
   1a580:	d8802617 	ldw	r2,152(sp)
   1a584:	28c0030b 	ldhu	r3,12(r5)
   1a588:	18c0100c 	andi	r3,r3,64
   1a58c:	18015c1e 	bne	r3,zero,1ab00 <___svfiprintf_internal_r+0x1284>
   1a590:	dfc03717 	ldw	ra,220(sp)
   1a594:	df003617 	ldw	fp,216(sp)
   1a598:	ddc03517 	ldw	r23,212(sp)
   1a59c:	dd803417 	ldw	r22,208(sp)
   1a5a0:	dd403317 	ldw	r21,204(sp)
   1a5a4:	dd003217 	ldw	r20,200(sp)
   1a5a8:	dcc03117 	ldw	r19,196(sp)
   1a5ac:	dc803017 	ldw	r18,192(sp)
   1a5b0:	dc402f17 	ldw	r17,188(sp)
   1a5b4:	dc002e17 	ldw	r16,184(sp)
   1a5b8:	dec03804 	addi	sp,sp,224
   1a5bc:	f800283a 	ret
   1a5c0:	d9002517 	ldw	r4,148(sp)
   1a5c4:	24afc83a 	sub	r23,r4,r18
   1a5c8:	05ff6e0e 	bge	zero,r23,1a384 <__alt_data_end+0xfc01a384>
   1a5cc:	07000404 	movi	fp,16
   1a5d0:	e5c15c0e 	bge	fp,r23,1ab44 <___svfiprintf_internal_r+0x12c8>
   1a5d4:	010000f4 	movhi	r4,3
   1a5d8:	212f2704 	addi	r4,r4,-17252
   1a5dc:	dc002215 	stw	r16,136(sp)
   1a5e0:	dc402815 	stw	r17,160(sp)
   1a5e4:	d9002115 	stw	r4,132(sp)
   1a5e8:	b823883a 	mov	r17,r23
   1a5ec:	054001c4 	movi	r21,7
   1a5f0:	982f883a 	mov	r23,r19
   1a5f4:	dc002717 	ldw	r16,156(sp)
   1a5f8:	9027883a 	mov	r19,r18
   1a5fc:	dc802317 	ldw	r18,140(sp)
   1a600:	00000306 	br	1a610 <___svfiprintf_internal_r+0xd94>
   1a604:	8c7ffc04 	addi	r17,r17,-16
   1a608:	42000204 	addi	r8,r8,8
   1a60c:	e440110e 	bge	fp,r17,1a654 <___svfiprintf_internal_r+0xdd8>
   1a610:	18c00404 	addi	r3,r3,16
   1a614:	10800044 	addi	r2,r2,1
   1a618:	45800015 	stw	r22,0(r8)
   1a61c:	47000115 	stw	fp,4(r8)
   1a620:	d8c01c15 	stw	r3,112(sp)
   1a624:	d8801b15 	stw	r2,108(sp)
   1a628:	a8bff60e 	bge	r21,r2,1a604 <__alt_data_end+0xfc01a604>
   1a62c:	d9801a04 	addi	r6,sp,104
   1a630:	900b883a 	mov	r5,r18
   1a634:	8009883a 	mov	r4,r16
   1a638:	00196ac0 	call	196ac <__ssprint_r>
   1a63c:	103fcf1e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a640:	8c7ffc04 	addi	r17,r17,-16
   1a644:	d8c01c17 	ldw	r3,112(sp)
   1a648:	d8801b17 	ldw	r2,108(sp)
   1a64c:	d811883a 	mov	r8,sp
   1a650:	e47fef16 	blt	fp,r17,1a610 <__alt_data_end+0xfc01a610>
   1a654:	9825883a 	mov	r18,r19
   1a658:	dc002217 	ldw	r16,136(sp)
   1a65c:	b827883a 	mov	r19,r23
   1a660:	882f883a 	mov	r23,r17
   1a664:	dc402817 	ldw	r17,160(sp)
   1a668:	d9402117 	ldw	r5,132(sp)
   1a66c:	1dc7883a 	add	r3,r3,r23
   1a670:	10800044 	addi	r2,r2,1
   1a674:	41400015 	stw	r5,0(r8)
   1a678:	45c00115 	stw	r23,4(r8)
   1a67c:	d8c01c15 	stw	r3,112(sp)
   1a680:	d8801b15 	stw	r2,108(sp)
   1a684:	010001c4 	movi	r4,7
   1a688:	2080b716 	blt	r4,r2,1a968 <___svfiprintf_internal_r+0x10ec>
   1a68c:	42000204 	addi	r8,r8,8
   1a690:	003f3c06 	br	1a384 <__alt_data_end+0xfc01a384>
   1a694:	d9402317 	ldw	r5,140(sp)
   1a698:	d9002717 	ldw	r4,156(sp)
   1a69c:	d9801a04 	addi	r6,sp,104
   1a6a0:	00196ac0 	call	196ac <__ssprint_r>
   1a6a4:	103fb51e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a6a8:	d8c01c17 	ldw	r3,112(sp)
   1a6ac:	d811883a 	mov	r8,sp
   1a6b0:	003f7106 	br	1a478 <__alt_data_end+0xfc01a478>
   1a6b4:	d9402317 	ldw	r5,140(sp)
   1a6b8:	d9002717 	ldw	r4,156(sp)
   1a6bc:	d9801a04 	addi	r6,sp,104
   1a6c0:	00196ac0 	call	196ac <__ssprint_r>
   1a6c4:	103fa126 	beq	r2,zero,1a54c <__alt_data_end+0xfc01a54c>
   1a6c8:	003fac06 	br	1a57c <__alt_data_end+0xfc01a57c>
   1a6cc:	d9402317 	ldw	r5,140(sp)
   1a6d0:	d9002717 	ldw	r4,156(sp)
   1a6d4:	d9801a04 	addi	r6,sp,104
   1a6d8:	00196ac0 	call	196ac <__ssprint_r>
   1a6dc:	103fa71e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a6e0:	d811883a 	mov	r8,sp
   1a6e4:	003c9e06 	br	19960 <__alt_data_end+0xfc019960>
   1a6e8:	d9402317 	ldw	r5,140(sp)
   1a6ec:	d9002717 	ldw	r4,156(sp)
   1a6f0:	d9801a04 	addi	r6,sp,104
   1a6f4:	00196ac0 	call	196ac <__ssprint_r>
   1a6f8:	103fa01e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a6fc:	d8c01c17 	ldw	r3,112(sp)
   1a700:	d8801b17 	ldw	r2,108(sp)
   1a704:	d811883a 	mov	r8,sp
   1a708:	003f5206 	br	1a454 <__alt_data_end+0xfc01a454>
   1a70c:	d9402317 	ldw	r5,140(sp)
   1a710:	d9002717 	ldw	r4,156(sp)
   1a714:	d9801a04 	addi	r6,sp,104
   1a718:	00196ac0 	call	196ac <__ssprint_r>
   1a71c:	103f971e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a720:	d8c01c17 	ldw	r3,112(sp)
   1a724:	d8801b17 	ldw	r2,108(sp)
   1a728:	d811883a 	mov	r8,sp
   1a72c:	003f0506 	br	1a344 <__alt_data_end+0xfc01a344>
   1a730:	d9402317 	ldw	r5,140(sp)
   1a734:	d9002717 	ldw	r4,156(sp)
   1a738:	d9801a04 	addi	r6,sp,104
   1a73c:	00196ac0 	call	196ac <__ssprint_r>
   1a740:	103f8e1e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a744:	d8c01c17 	ldw	r3,112(sp)
   1a748:	d8801b17 	ldw	r2,108(sp)
   1a74c:	d811883a 	mov	r8,sp
   1a750:	003f0906 	br	1a378 <__alt_data_end+0xfc01a378>
   1a754:	d9402017 	ldw	r5,128(sp)
   1a758:	d8001d85 	stb	zero,118(sp)
   1a75c:	28007716 	blt	r5,zero,1a93c <___svfiprintf_internal_r+0x10c0>
   1a760:	00ffdfc4 	movi	r3,-129
   1a764:	9504b03a 	or	r2,r18,r20
   1a768:	80e0703a 	and	r16,r16,r3
   1a76c:	103d3926 	beq	r2,zero,19c54 <__alt_data_end+0xfc019c54>
   1a770:	002b883a 	mov	r21,zero
   1a774:	003d3c06 	br	19c68 <__alt_data_end+0xfc019c68>
   1a778:	d9402317 	ldw	r5,140(sp)
   1a77c:	d9002717 	ldw	r4,156(sp)
   1a780:	d9801a04 	addi	r6,sp,104
   1a784:	00196ac0 	call	196ac <__ssprint_r>
   1a788:	103f7c1e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a78c:	d8c01c17 	ldw	r3,112(sp)
   1a790:	d8801b17 	ldw	r2,108(sp)
   1a794:	d811883a 	mov	r8,sp
   1a798:	003edd06 	br	1a310 <__alt_data_end+0xfc01a310>
   1a79c:	8080100c 	andi	r2,r16,64
   1a7a0:	d8001d85 	stb	zero,118(sp)
   1a7a4:	10008426 	beq	r2,zero,1a9b8 <___svfiprintf_internal_r+0x113c>
   1a7a8:	d9402417 	ldw	r5,144(sp)
   1a7ac:	d8c02017 	ldw	r3,128(sp)
   1a7b0:	0029883a 	mov	r20,zero
   1a7b4:	28800104 	addi	r2,r5,4
   1a7b8:	2c80000b 	ldhu	r18,0(r5)
   1a7bc:	183eab0e 	bge	r3,zero,1a26c <__alt_data_end+0xfc01a26c>
   1a7c0:	d8802415 	stw	r2,144(sp)
   1a7c4:	002b883a 	mov	r21,zero
   1a7c8:	9504b03a 	or	r2,r18,r20
   1a7cc:	103e171e 	bne	r2,zero,1a02c <__alt_data_end+0xfc01a02c>
   1a7d0:	00800044 	movi	r2,1
   1a7d4:	10803fcc 	andi	r2,r2,255
   1a7d8:	00c00044 	movi	r3,1
   1a7dc:	10c05c26 	beq	r2,r3,1a950 <___svfiprintf_internal_r+0x10d4>
   1a7e0:	00c00084 	movi	r3,2
   1a7e4:	10fd1e26 	beq	r2,r3,19c60 <__alt_data_end+0xfc019c60>
   1a7e8:	003ec406 	br	1a2fc <__alt_data_end+0xfc01a2fc>
   1a7ec:	d9401e17 	ldw	r5,120(sp)
   1a7f0:	2c69c83a 	sub	r20,r5,r17
   1a7f4:	003d4506 	br	19d0c <__alt_data_end+0xfc019d0c>
   1a7f8:	d8802415 	stw	r2,144(sp)
   1a7fc:	98c00007 	ldb	r3,0(r19)
   1a800:	003c6a06 	br	199ac <__alt_data_end+0xfc0199ac>
   1a804:	d9402317 	ldw	r5,140(sp)
   1a808:	d9002717 	ldw	r4,156(sp)
   1a80c:	d9801a04 	addi	r6,sp,104
   1a810:	00196ac0 	call	196ac <__ssprint_r>
   1a814:	103f591e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a818:	d8c01c17 	ldw	r3,112(sp)
   1a81c:	003f4406 	br	1a530 <__alt_data_end+0xfc01a530>
   1a820:	014000f4 	movhi	r5,3
   1a824:	296ebf04 	addi	r5,r5,-17668
   1a828:	d9402915 	stw	r5,164(sp)
   1a82c:	003d0906 	br	19c54 <__alt_data_end+0xfc019c54>
   1a830:	d8c02417 	ldw	r3,144(sp)
   1a834:	d9002617 	ldw	r4,152(sp)
   1a838:	d9402417 	ldw	r5,144(sp)
   1a83c:	18800017 	ldw	r2,0(r3)
   1a840:	2007d7fa 	srai	r3,r4,31
   1a844:	29400104 	addi	r5,r5,4
   1a848:	d9402415 	stw	r5,144(sp)
   1a84c:	11000015 	stw	r4,0(r2)
   1a850:	10c00115 	stw	r3,4(r2)
   1a854:	003c2b06 	br	19904 <__alt_data_end+0xfc019904>
   1a858:	d8c01d45 	stb	r3,117(sp)
   1a85c:	d8c02017 	ldw	r3,128(sp)
   1a860:	00800c04 	movi	r2,48
   1a864:	d8801d05 	stb	r2,116(sp)
   1a868:	d8001d85 	stb	zero,118(sp)
   1a86c:	80800094 	ori	r2,r16,2
   1a870:	1800ac16 	blt	r3,zero,1ab24 <___svfiprintf_internal_r+0x12a8>
   1a874:	00bfdfc4 	movi	r2,-129
   1a878:	80a0703a 	and	r16,r16,r2
   1a87c:	84000094 	ori	r16,r16,2
   1a880:	002b883a 	mov	r21,zero
   1a884:	003cf806 	br	19c68 <__alt_data_end+0xfc019c68>
   1a888:	98c00007 	ldb	r3,0(r19)
   1a88c:	003c4706 	br	199ac <__alt_data_end+0xfc0199ac>
   1a890:	d9402417 	ldw	r5,144(sp)
   1a894:	2c800017 	ldw	r18,0(r5)
   1a898:	29400104 	addi	r5,r5,4
   1a89c:	d9402415 	stw	r5,144(sp)
   1a8a0:	9029d7fa 	srai	r20,r18,31
   1a8a4:	a005883a 	mov	r2,r20
   1a8a8:	003dd806 	br	1a00c <__alt_data_end+0xfc01a00c>
   1a8ac:	d9402417 	ldw	r5,144(sp)
   1a8b0:	0029883a 	mov	r20,zero
   1a8b4:	2c800017 	ldw	r18,0(r5)
   1a8b8:	29400104 	addi	r5,r5,4
   1a8bc:	d9402415 	stw	r5,144(sp)
   1a8c0:	003cdb06 	br	19c30 <__alt_data_end+0xfc019c30>
   1a8c4:	8080100c 	andi	r2,r16,64
   1a8c8:	d8001d85 	stb	zero,118(sp)
   1a8cc:	10003326 	beq	r2,zero,1a99c <___svfiprintf_internal_r+0x1120>
   1a8d0:	d9002417 	ldw	r4,144(sp)
   1a8d4:	d9402017 	ldw	r5,128(sp)
   1a8d8:	0029883a 	mov	r20,zero
   1a8dc:	20800104 	addi	r2,r4,4
   1a8e0:	2480000b 	ldhu	r18,0(r4)
   1a8e4:	283e7e0e 	bge	r5,zero,1a2e0 <__alt_data_end+0xfc01a2e0>
   1a8e8:	9506b03a 	or	r3,r18,r20
   1a8ec:	d8802415 	stw	r2,144(sp)
   1a8f0:	183d271e 	bne	r3,zero,19d90 <__alt_data_end+0xfc019d90>
   1a8f4:	002b883a 	mov	r21,zero
   1a8f8:	0005883a 	mov	r2,zero
   1a8fc:	003fb506 	br	1a7d4 <__alt_data_end+0xfc01a7d4>
   1a900:	98c00043 	ldbu	r3,1(r19)
   1a904:	8c400814 	ori	r17,r17,32
   1a908:	9cc00044 	addi	r19,r19,1
   1a90c:	18c03fcc 	andi	r3,r3,255
   1a910:	18c0201c 	xori	r3,r3,128
   1a914:	18ffe004 	addi	r3,r3,-128
   1a918:	003c2406 	br	199ac <__alt_data_end+0xfc0199ac>
   1a91c:	d8c02415 	stw	r3,144(sp)
   1a920:	002b883a 	mov	r21,zero
   1a924:	003fa806 	br	1a7c8 <__alt_data_end+0xfc01a7c8>
   1a928:	010000f4 	movhi	r4,3
   1a92c:	212ebf04 	addi	r4,r4,-17668
   1a930:	d9002915 	stw	r4,164(sp)
   1a934:	d8c02415 	stw	r3,144(sp)
   1a938:	1021883a 	mov	r16,r2
   1a93c:	9504b03a 	or	r2,r18,r20
   1a940:	103f8b1e 	bne	r2,zero,1a770 <__alt_data_end+0xfc01a770>
   1a944:	002b883a 	mov	r21,zero
   1a948:	00800084 	movi	r2,2
   1a94c:	003fa106 	br	1a7d4 <__alt_data_end+0xfc01a7d4>
   1a950:	0025883a 	mov	r18,zero
   1a954:	94800c04 	addi	r18,r18,48
   1a958:	dc8019c5 	stb	r18,103(sp)
   1a95c:	dd002c17 	ldw	r20,176(sp)
   1a960:	dc4019c4 	addi	r17,sp,103
   1a964:	003ce906 	br	19d0c <__alt_data_end+0xfc019d0c>
   1a968:	d9402317 	ldw	r5,140(sp)
   1a96c:	d9002717 	ldw	r4,156(sp)
   1a970:	d9801a04 	addi	r6,sp,104
   1a974:	00196ac0 	call	196ac <__ssprint_r>
   1a978:	103f001e 	bne	r2,zero,1a57c <__alt_data_end+0xfc01a57c>
   1a97c:	d8c01c17 	ldw	r3,112(sp)
   1a980:	d8801b17 	ldw	r2,108(sp)
   1a984:	d811883a 	mov	r8,sp
   1a988:	003e7e06 	br	1a384 <__alt_data_end+0xfc01a384>
   1a98c:	014000f4 	movhi	r5,3
   1a990:	296f2704 	addi	r5,r5,-17252
   1a994:	d9402115 	stw	r5,132(sp)
   1a998:	003ea406 	br	1a42c <__alt_data_end+0xfc01a42c>
   1a99c:	d8c02417 	ldw	r3,144(sp)
   1a9a0:	d9002017 	ldw	r4,128(sp)
   1a9a4:	0029883a 	mov	r20,zero
   1a9a8:	18800104 	addi	r2,r3,4
   1a9ac:	1c800017 	ldw	r18,0(r3)
   1a9b0:	203e4b0e 	bge	r4,zero,1a2e0 <__alt_data_end+0xfc01a2e0>
   1a9b4:	003fcc06 	br	1a8e8 <__alt_data_end+0xfc01a8e8>
   1a9b8:	d9002417 	ldw	r4,144(sp)
   1a9bc:	d9402017 	ldw	r5,128(sp)
   1a9c0:	0029883a 	mov	r20,zero
   1a9c4:	20800104 	addi	r2,r4,4
   1a9c8:	24800017 	ldw	r18,0(r4)
   1a9cc:	283e270e 	bge	r5,zero,1a26c <__alt_data_end+0xfc01a26c>
   1a9d0:	003f7b06 	br	1a7c0 <__alt_data_end+0xfc01a7c0>
   1a9d4:	8400100c 	andi	r16,r16,64
   1a9d8:	80003326 	beq	r16,zero,1aaa8 <___svfiprintf_internal_r+0x122c>
   1a9dc:	d9402417 	ldw	r5,144(sp)
   1a9e0:	d8c02617 	ldw	r3,152(sp)
   1a9e4:	28800017 	ldw	r2,0(r5)
   1a9e8:	29400104 	addi	r5,r5,4
   1a9ec:	d9402415 	stw	r5,144(sp)
   1a9f0:	10c0000d 	sth	r3,0(r2)
   1a9f4:	003bc306 	br	19904 <__alt_data_end+0xfc019904>
   1a9f8:	d9002417 	ldw	r4,144(sp)
   1a9fc:	0029883a 	mov	r20,zero
   1aa00:	24800017 	ldw	r18,0(r4)
   1aa04:	21000104 	addi	r4,r4,4
   1aa08:	d9002415 	stw	r4,144(sp)
   1aa0c:	003c8806 	br	19c30 <__alt_data_end+0xfc019c30>
   1aa10:	d8c02417 	ldw	r3,144(sp)
   1aa14:	1c800017 	ldw	r18,0(r3)
   1aa18:	18c00104 	addi	r3,r3,4
   1aa1c:	d8c02415 	stw	r3,144(sp)
   1aa20:	9029d7fa 	srai	r20,r18,31
   1aa24:	a005883a 	mov	r2,r20
   1aa28:	003d7806 	br	1a00c <__alt_data_end+0xfc01a00c>
   1aa2c:	8809883a 	mov	r4,r17
   1aa30:	da002d15 	stw	r8,180(sp)
   1aa34:	00106b00 	call	106b0 <strlen>
   1aa38:	1029883a 	mov	r20,r2
   1aa3c:	dd401d83 	ldbu	r21,118(sp)
   1aa40:	ddc02415 	stw	r23,144(sp)
   1aa44:	d8002015 	stw	zero,128(sp)
   1aa48:	da002d17 	ldw	r8,180(sp)
   1aa4c:	003caf06 	br	19d0c <__alt_data_end+0xfc019d0c>
   1aa50:	013fffc4 	movi	r4,-1
   1aa54:	003df206 	br	1a220 <__alt_data_end+0xfc01a220>
   1aa58:	dd002017 	ldw	r20,128(sp)
   1aa5c:	00800184 	movi	r2,6
   1aa60:	1500012e 	bgeu	r2,r20,1aa68 <___svfiprintf_internal_r+0x11ec>
   1aa64:	1029883a 	mov	r20,r2
   1aa68:	a025883a 	mov	r18,r20
   1aa6c:	a0004116 	blt	r20,zero,1ab74 <___svfiprintf_internal_r+0x12f8>
   1aa70:	044000f4 	movhi	r17,3
   1aa74:	ddc02415 	stw	r23,144(sp)
   1aa78:	8c6ec404 	addi	r17,r17,-17648
   1aa7c:	003ce806 	br	19e20 <__alt_data_end+0xfc019e20>
   1aa80:	04001004 	movi	r16,64
   1aa84:	800b883a 	mov	r5,r16
   1aa88:	000f5dc0 	call	f5dc <_malloc_r>
   1aa8c:	d8c02317 	ldw	r3,140(sp)
   1aa90:	18800015 	stw	r2,0(r3)
   1aa94:	18800415 	stw	r2,16(r3)
   1aa98:	10004d26 	beq	r2,zero,1abd0 <___svfiprintf_internal_r+0x1354>
   1aa9c:	d9402317 	ldw	r5,140(sp)
   1aaa0:	2c000515 	stw	r16,20(r5)
   1aaa4:	003b8906 	br	198cc <__alt_data_end+0xfc0198cc>
   1aaa8:	d9002417 	ldw	r4,144(sp)
   1aaac:	d9402617 	ldw	r5,152(sp)
   1aab0:	20800017 	ldw	r2,0(r4)
   1aab4:	21000104 	addi	r4,r4,4
   1aab8:	d9002415 	stw	r4,144(sp)
   1aabc:	11400015 	stw	r5,0(r2)
   1aac0:	003b9006 	br	19904 <__alt_data_end+0xfc019904>
   1aac4:	8080004c 	andi	r2,r16,1
   1aac8:	002b883a 	mov	r21,zero
   1aacc:	10000526 	beq	r2,zero,1aae4 <___svfiprintf_internal_r+0x1268>
   1aad0:	00800c04 	movi	r2,48
   1aad4:	d88019c5 	stb	r2,103(sp)
   1aad8:	dd002c17 	ldw	r20,176(sp)
   1aadc:	dc4019c4 	addi	r17,sp,103
   1aae0:	003c8a06 	br	19d0c <__alt_data_end+0xfc019d0c>
   1aae4:	0029883a 	mov	r20,zero
   1aae8:	dc401a04 	addi	r17,sp,104
   1aaec:	003c8706 	br	19d0c <__alt_data_end+0xfc019d0c>
   1aaf0:	014000f4 	movhi	r5,3
   1aaf4:	296f2b04 	addi	r5,r5,-17236
   1aaf8:	d9402815 	stw	r5,160(sp)
   1aafc:	003cff06 	br	19efc <__alt_data_end+0xfc019efc>
   1ab00:	00bfffc4 	movi	r2,-1
   1ab04:	003ea206 	br	1a590 <__alt_data_end+0xfc01a590>
   1ab08:	00800044 	movi	r2,1
   1ab0c:	10803fcc 	andi	r2,r2,255
   1ab10:	00c00044 	movi	r3,1
   1ab14:	10fd4526 	beq	r2,r3,1a02c <__alt_data_end+0xfc01a02c>
   1ab18:	00c00084 	movi	r3,2
   1ab1c:	10fc5226 	beq	r2,r3,19c68 <__alt_data_end+0xfc019c68>
   1ab20:	003c9c06 	br	19d94 <__alt_data_end+0xfc019d94>
   1ab24:	1021883a 	mov	r16,r2
   1ab28:	002b883a 	mov	r21,zero
   1ab2c:	00800084 	movi	r2,2
   1ab30:	003ff606 	br	1ab0c <__alt_data_end+0xfc01ab0c>
   1ab34:	010000f4 	movhi	r4,3
   1ab38:	212f2b04 	addi	r4,r4,-17236
   1ab3c:	d9002815 	stw	r4,160(sp)
   1ab40:	003e7206 	br	1a50c <__alt_data_end+0xfc01a50c>
   1ab44:	014000f4 	movhi	r5,3
   1ab48:	296f2704 	addi	r5,r5,-17252
   1ab4c:	d9402115 	stw	r5,132(sp)
   1ab50:	003ec506 	br	1a668 <__alt_data_end+0xfc01a668>
   1ab54:	e027883a 	mov	r19,fp
   1ab58:	d8002015 	stw	zero,128(sp)
   1ab5c:	003b9406 	br	199b0 <__alt_data_end+0xfc0199b0>
   1ab60:	dd002017 	ldw	r20,128(sp)
   1ab64:	dd401d83 	ldbu	r21,118(sp)
   1ab68:	ddc02415 	stw	r23,144(sp)
   1ab6c:	d8002015 	stw	zero,128(sp)
   1ab70:	003c6606 	br	19d0c <__alt_data_end+0xfc019d0c>
   1ab74:	0025883a 	mov	r18,zero
   1ab78:	003fbd06 	br	1aa70 <__alt_data_end+0xfc01aa70>
   1ab7c:	d9402417 	ldw	r5,144(sp)
   1ab80:	d8c02417 	ldw	r3,144(sp)
   1ab84:	29400017 	ldw	r5,0(r5)
   1ab88:	19000104 	addi	r4,r3,4
   1ab8c:	d9002415 	stw	r4,144(sp)
   1ab90:	d9402015 	stw	r5,128(sp)
   1ab94:	98c00043 	ldbu	r3,1(r19)
   1ab98:	e027883a 	mov	r19,fp
   1ab9c:	283f5b0e 	bge	r5,zero,1a90c <__alt_data_end+0xfc01a90c>
   1aba0:	18c03fcc 	andi	r3,r3,255
   1aba4:	013fffc4 	movi	r4,-1
   1aba8:	18c0201c 	xori	r3,r3,128
   1abac:	d9002015 	stw	r4,128(sp)
   1abb0:	18ffe004 	addi	r3,r3,-128
   1abb4:	003b7d06 	br	199ac <__alt_data_end+0xfc0199ac>
   1abb8:	dd401d85 	stb	r21,118(sp)
   1abbc:	003cf306 	br	19f8c <__alt_data_end+0xfc019f8c>
   1abc0:	dd401d85 	stb	r21,118(sp)
   1abc4:	003d4e06 	br	1a100 <__alt_data_end+0xfc01a100>
   1abc8:	dd401d85 	stb	r21,118(sp)
   1abcc:	003c0e06 	br	19c08 <__alt_data_end+0xfc019c08>
   1abd0:	d9002717 	ldw	r4,156(sp)
   1abd4:	00800304 	movi	r2,12
   1abd8:	20800015 	stw	r2,0(r4)
   1abdc:	00bfffc4 	movi	r2,-1
   1abe0:	003e6b06 	br	1a590 <__alt_data_end+0xfc01a590>
   1abe4:	dd401d85 	stb	r21,118(sp)
   1abe8:	003d0006 	br	19fec <__alt_data_end+0xfc019fec>
   1abec:	dd401d85 	stb	r21,118(sp)
   1abf0:	003d7106 	br	1a1b8 <__alt_data_end+0xfc01a1b8>
   1abf4:	dd401d85 	stb	r21,118(sp)
   1abf8:	003c5706 	br	19d58 <__alt_data_end+0xfc019d58>
   1abfc:	dd401d85 	stb	r21,118(sp)
   1ac00:	003c2e06 	br	19cbc <__alt_data_end+0xfc019cbc>
   1ac04:	dd401d85 	stb	r21,118(sp)
   1ac08:	003d8c06 	br	1a23c <__alt_data_end+0xfc01a23c>
   1ac0c:	dd401d85 	stb	r21,118(sp)
   1ac10:	003da706 	br	1a2b0 <__alt_data_end+0xfc01a2b0>
   1ac14:	dd401d85 	stb	r21,118(sp)
   1ac18:	003cc806 	br	19f3c <__alt_data_end+0xfc019f3c>

0001ac1c <__sprint_r.part.0>:
   1ac1c:	28801917 	ldw	r2,100(r5)
   1ac20:	defff604 	addi	sp,sp,-40
   1ac24:	dd400515 	stw	r21,20(sp)
   1ac28:	dfc00915 	stw	ra,36(sp)
   1ac2c:	df000815 	stw	fp,32(sp)
   1ac30:	ddc00715 	stw	r23,28(sp)
   1ac34:	dd800615 	stw	r22,24(sp)
   1ac38:	dd000415 	stw	r20,16(sp)
   1ac3c:	dcc00315 	stw	r19,12(sp)
   1ac40:	dc800215 	stw	r18,8(sp)
   1ac44:	dc400115 	stw	r17,4(sp)
   1ac48:	dc000015 	stw	r16,0(sp)
   1ac4c:	1088000c 	andi	r2,r2,8192
   1ac50:	302b883a 	mov	r21,r6
   1ac54:	10002e26 	beq	r2,zero,1ad10 <__sprint_r.part.0+0xf4>
   1ac58:	30800217 	ldw	r2,8(r6)
   1ac5c:	35800017 	ldw	r22,0(r6)
   1ac60:	10002926 	beq	r2,zero,1ad08 <__sprint_r.part.0+0xec>
   1ac64:	2827883a 	mov	r19,r5
   1ac68:	2029883a 	mov	r20,r4
   1ac6c:	b5c00104 	addi	r23,r22,4
   1ac70:	04bfffc4 	movi	r18,-1
   1ac74:	bc400017 	ldw	r17,0(r23)
   1ac78:	b4000017 	ldw	r16,0(r22)
   1ac7c:	0039883a 	mov	fp,zero
   1ac80:	8822d0ba 	srli	r17,r17,2
   1ac84:	8800031e 	bne	r17,zero,1ac94 <__sprint_r.part.0+0x78>
   1ac88:	00001806 	br	1acec <__sprint_r.part.0+0xd0>
   1ac8c:	84000104 	addi	r16,r16,4
   1ac90:	8f001526 	beq	r17,fp,1ace8 <__sprint_r.part.0+0xcc>
   1ac94:	81400017 	ldw	r5,0(r16)
   1ac98:	980d883a 	mov	r6,r19
   1ac9c:	a009883a 	mov	r4,r20
   1aca0:	001c8640 	call	1c864 <_fputwc_r>
   1aca4:	e7000044 	addi	fp,fp,1
   1aca8:	14bff81e 	bne	r2,r18,1ac8c <__alt_data_end+0xfc01ac8c>
   1acac:	9005883a 	mov	r2,r18
   1acb0:	a8000215 	stw	zero,8(r21)
   1acb4:	a8000115 	stw	zero,4(r21)
   1acb8:	dfc00917 	ldw	ra,36(sp)
   1acbc:	df000817 	ldw	fp,32(sp)
   1acc0:	ddc00717 	ldw	r23,28(sp)
   1acc4:	dd800617 	ldw	r22,24(sp)
   1acc8:	dd400517 	ldw	r21,20(sp)
   1accc:	dd000417 	ldw	r20,16(sp)
   1acd0:	dcc00317 	ldw	r19,12(sp)
   1acd4:	dc800217 	ldw	r18,8(sp)
   1acd8:	dc400117 	ldw	r17,4(sp)
   1acdc:	dc000017 	ldw	r16,0(sp)
   1ace0:	dec00a04 	addi	sp,sp,40
   1ace4:	f800283a 	ret
   1ace8:	a8800217 	ldw	r2,8(r21)
   1acec:	8c63883a 	add	r17,r17,r17
   1acf0:	8c63883a 	add	r17,r17,r17
   1acf4:	1445c83a 	sub	r2,r2,r17
   1acf8:	a8800215 	stw	r2,8(r21)
   1acfc:	b5800204 	addi	r22,r22,8
   1ad00:	bdc00204 	addi	r23,r23,8
   1ad04:	103fdb1e 	bne	r2,zero,1ac74 <__alt_data_end+0xfc01ac74>
   1ad08:	0005883a 	mov	r2,zero
   1ad0c:	003fe806 	br	1acb0 <__alt_data_end+0xfc01acb0>
   1ad10:	00172500 	call	17250 <__sfvwrite_r>
   1ad14:	003fe606 	br	1acb0 <__alt_data_end+0xfc01acb0>

0001ad18 <__sprint_r>:
   1ad18:	30c00217 	ldw	r3,8(r6)
   1ad1c:	18000126 	beq	r3,zero,1ad24 <__sprint_r+0xc>
   1ad20:	001ac1c1 	jmpi	1ac1c <__sprint_r.part.0>
   1ad24:	30000115 	stw	zero,4(r6)
   1ad28:	0005883a 	mov	r2,zero
   1ad2c:	f800283a 	ret

0001ad30 <___vfiprintf_internal_r>:
   1ad30:	deffca04 	addi	sp,sp,-216
   1ad34:	dd403115 	stw	r21,196(sp)
   1ad38:	dfc03515 	stw	ra,212(sp)
   1ad3c:	df003415 	stw	fp,208(sp)
   1ad40:	ddc03315 	stw	r23,204(sp)
   1ad44:	dd803215 	stw	r22,200(sp)
   1ad48:	dd003015 	stw	r20,192(sp)
   1ad4c:	dcc02f15 	stw	r19,188(sp)
   1ad50:	dc802e15 	stw	r18,184(sp)
   1ad54:	dc402d15 	stw	r17,180(sp)
   1ad58:	dc002c15 	stw	r16,176(sp)
   1ad5c:	d9002115 	stw	r4,132(sp)
   1ad60:	d9402015 	stw	r5,128(sp)
   1ad64:	d9c02215 	stw	r7,136(sp)
   1ad68:	302b883a 	mov	r21,r6
   1ad6c:	20000226 	beq	r4,zero,1ad78 <___vfiprintf_internal_r+0x48>
   1ad70:	20800e17 	ldw	r2,56(r4)
   1ad74:	1000cf26 	beq	r2,zero,1b0b4 <___vfiprintf_internal_r+0x384>
   1ad78:	d8c02017 	ldw	r3,128(sp)
   1ad7c:	1880030b 	ldhu	r2,12(r3)
   1ad80:	10c8000c 	andi	r3,r2,8192
   1ad84:	1800071e 	bne	r3,zero,1ada4 <___vfiprintf_internal_r+0x74>
   1ad88:	d9402017 	ldw	r5,128(sp)
   1ad8c:	00f7ffc4 	movi	r3,-8193
   1ad90:	10880014 	ori	r2,r2,8192
   1ad94:	29001917 	ldw	r4,100(r5)
   1ad98:	2880030d 	sth	r2,12(r5)
   1ad9c:	20c6703a 	and	r3,r4,r3
   1ada0:	28c01915 	stw	r3,100(r5)
   1ada4:	10c0020c 	andi	r3,r2,8
   1ada8:	1800a526 	beq	r3,zero,1b040 <___vfiprintf_internal_r+0x310>
   1adac:	d9002017 	ldw	r4,128(sp)
   1adb0:	20c00417 	ldw	r3,16(r4)
   1adb4:	1800a226 	beq	r3,zero,1b040 <___vfiprintf_internal_r+0x310>
   1adb8:	1080068c 	andi	r2,r2,26
   1adbc:	00c00284 	movi	r3,10
   1adc0:	10c0a826 	beq	r2,r3,1b064 <___vfiprintf_internal_r+0x334>
   1adc4:	d9001a04 	addi	r4,sp,104
   1adc8:	d94019c4 	addi	r5,sp,103
   1adcc:	048000f4 	movhi	r18,3
   1add0:	2145c83a 	sub	r2,r4,r5
   1add4:	94af2f04 	addi	r18,r18,-17220
   1add8:	d9001e15 	stw	r4,120(sp)
   1addc:	d9401f15 	stw	r5,124(sp)
   1ade0:	dec01a15 	stw	sp,104(sp)
   1ade4:	d8001c15 	stw	zero,112(sp)
   1ade8:	d8001b15 	stw	zero,108(sp)
   1adec:	d811883a 	mov	r8,sp
   1adf0:	d8002615 	stw	zero,152(sp)
   1adf4:	d8002415 	stw	zero,144(sp)
   1adf8:	d8802815 	stw	r2,160(sp)
   1adfc:	a82d883a 	mov	r22,r21
   1ae00:	b0800007 	ldb	r2,0(r22)
   1ae04:	10040d26 	beq	r2,zero,1be3c <___vfiprintf_internal_r+0x110c>
   1ae08:	00c00944 	movi	r3,37
   1ae0c:	b029883a 	mov	r20,r22
   1ae10:	10c0021e 	bne	r2,r3,1ae1c <___vfiprintf_internal_r+0xec>
   1ae14:	00001606 	br	1ae70 <___vfiprintf_internal_r+0x140>
   1ae18:	10c00326 	beq	r2,r3,1ae28 <___vfiprintf_internal_r+0xf8>
   1ae1c:	a5000044 	addi	r20,r20,1
   1ae20:	a0800007 	ldb	r2,0(r20)
   1ae24:	103ffc1e 	bne	r2,zero,1ae18 <__alt_data_end+0xfc01ae18>
   1ae28:	a5a1c83a 	sub	r16,r20,r22
   1ae2c:	80001026 	beq	r16,zero,1ae70 <___vfiprintf_internal_r+0x140>
   1ae30:	d8c01c17 	ldw	r3,112(sp)
   1ae34:	d8801b17 	ldw	r2,108(sp)
   1ae38:	45800015 	stw	r22,0(r8)
   1ae3c:	80c7883a 	add	r3,r16,r3
   1ae40:	10800044 	addi	r2,r2,1
   1ae44:	44000115 	stw	r16,4(r8)
   1ae48:	d8c01c15 	stw	r3,112(sp)
   1ae4c:	d8801b15 	stw	r2,108(sp)
   1ae50:	010001c4 	movi	r4,7
   1ae54:	2080750e 	bge	r4,r2,1b02c <___vfiprintf_internal_r+0x2fc>
   1ae58:	1803951e 	bne	r3,zero,1bcb0 <___vfiprintf_internal_r+0xf80>
   1ae5c:	d8c02417 	ldw	r3,144(sp)
   1ae60:	d8001b15 	stw	zero,108(sp)
   1ae64:	d811883a 	mov	r8,sp
   1ae68:	1c07883a 	add	r3,r3,r16
   1ae6c:	d8c02415 	stw	r3,144(sp)
   1ae70:	a0800007 	ldb	r2,0(r20)
   1ae74:	1002e026 	beq	r2,zero,1b9f8 <___vfiprintf_internal_r+0xcc8>
   1ae78:	a5800044 	addi	r22,r20,1
   1ae7c:	a0c00047 	ldb	r3,1(r20)
   1ae80:	d8001d85 	stb	zero,118(sp)
   1ae84:	0027883a 	mov	r19,zero
   1ae88:	d8002305 	stb	zero,140(sp)
   1ae8c:	043fffc4 	movi	r16,-1
   1ae90:	d8002515 	stw	zero,148(sp)
   1ae94:	0023883a 	mov	r17,zero
   1ae98:	05001604 	movi	r20,88
   1ae9c:	05400244 	movi	r21,9
   1aea0:	402f883a 	mov	r23,r8
   1aea4:	b5800044 	addi	r22,r22,1
   1aea8:	18bff804 	addi	r2,r3,-32
   1aeac:	a0827736 	bltu	r20,r2,1b88c <___vfiprintf_internal_r+0xb5c>
   1aeb0:	100490ba 	slli	r2,r2,2
   1aeb4:	010000b4 	movhi	r4,2
   1aeb8:	212bb204 	addi	r4,r4,-20792
   1aebc:	1105883a 	add	r2,r2,r4
   1aec0:	10800017 	ldw	r2,0(r2)
   1aec4:	1000683a 	jmp	r2
   1aec8:	0001b58c 	andi	zero,zero,1750
   1aecc:	0001b88c 	andi	zero,zero,1762
   1aed0:	0001b88c 	andi	zero,zero,1762
   1aed4:	0001b5a8 	cmpgeui	zero,zero,1750
   1aed8:	0001b88c 	andi	zero,zero,1762
   1aedc:	0001b88c 	andi	zero,zero,1762
   1aee0:	0001b88c 	andi	zero,zero,1762
   1aee4:	0001b88c 	andi	zero,zero,1762
   1aee8:	0001b88c 	andi	zero,zero,1762
   1aeec:	0001b88c 	andi	zero,zero,1762
   1aef0:	0001b7b0 	cmpltui	zero,zero,1758
   1aef4:	0001b7d4 	movui	zero,1759
   1aef8:	0001b88c 	andi	zero,zero,1762
   1aefc:	0001b0cc 	andi	zero,zero,1731
   1af00:	0001b7e8 	cmpgeui	zero,zero,1759
   1af04:	0001b88c 	andi	zero,zero,1762
   1af08:	0001b5b4 	movhi	zero,1750
   1af0c:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af10:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af14:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af18:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af1c:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af20:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af24:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af28:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af2c:	0001b5c0 	call	1b5c <_ZN3USB4TaskEv+0x340>
   1af30:	0001b88c 	andi	zero,zero,1762
   1af34:	0001b88c 	andi	zero,zero,1762
   1af38:	0001b88c 	andi	zero,zero,1762
   1af3c:	0001b88c 	andi	zero,zero,1762
   1af40:	0001b88c 	andi	zero,zero,1762
   1af44:	0001b88c 	andi	zero,zero,1762
   1af48:	0001b88c 	andi	zero,zero,1762
   1af4c:	0001b88c 	andi	zero,zero,1762
   1af50:	0001b88c 	andi	zero,zero,1762
   1af54:	0001b88c 	andi	zero,zero,1762
   1af58:	0001b600 	call	1b60 <_ZN3USB4TaskEv+0x344>
   1af5c:	0001b88c 	andi	zero,zero,1762
   1af60:	0001b88c 	andi	zero,zero,1762
   1af64:	0001b88c 	andi	zero,zero,1762
   1af68:	0001b88c 	andi	zero,zero,1762
   1af6c:	0001b88c 	andi	zero,zero,1762
   1af70:	0001b88c 	andi	zero,zero,1762
   1af74:	0001b88c 	andi	zero,zero,1762
   1af78:	0001b88c 	andi	zero,zero,1762
   1af7c:	0001b88c 	andi	zero,zero,1762
   1af80:	0001b88c 	andi	zero,zero,1762
   1af84:	0001b63c 	xorhi	zero,zero,1752
   1af88:	0001b88c 	andi	zero,zero,1762
   1af8c:	0001b88c 	andi	zero,zero,1762
   1af90:	0001b88c 	andi	zero,zero,1762
   1af94:	0001b88c 	andi	zero,zero,1762
   1af98:	0001b88c 	andi	zero,zero,1762
   1af9c:	0001b698 	cmpnei	zero,zero,1754
   1afa0:	0001b88c 	andi	zero,zero,1762
   1afa4:	0001b88c 	andi	zero,zero,1762
   1afa8:	0001b70c 	andi	zero,zero,1756
   1afac:	0001b88c 	andi	zero,zero,1762
   1afb0:	0001b88c 	andi	zero,zero,1762
   1afb4:	0001b88c 	andi	zero,zero,1762
   1afb8:	0001b88c 	andi	zero,zero,1762
   1afbc:	0001b88c 	andi	zero,zero,1762
   1afc0:	0001b88c 	andi	zero,zero,1762
   1afc4:	0001b88c 	andi	zero,zero,1762
   1afc8:	0001b88c 	andi	zero,zero,1762
   1afcc:	0001b88c 	andi	zero,zero,1762
   1afd0:	0001b88c 	andi	zero,zero,1762
   1afd4:	0001b4b4 	movhi	zero,1746
   1afd8:	0001b4e4 	muli	zero,zero,1747
   1afdc:	0001b88c 	andi	zero,zero,1762
   1afe0:	0001b88c 	andi	zero,zero,1762
   1afe4:	0001b88c 	andi	zero,zero,1762
   1afe8:	0001b834 	movhi	zero,1760
   1afec:	0001b4e4 	muli	zero,zero,1747
   1aff0:	0001b88c 	andi	zero,zero,1762
   1aff4:	0001b88c 	andi	zero,zero,1762
   1aff8:	0001b38c 	andi	zero,zero,1742
   1affc:	0001b88c 	andi	zero,zero,1762
   1b000:	0001b3a0 	cmpeqi	zero,zero,1742
   1b004:	0001b3d8 	cmpnei	zero,zero,1743
   1b008:	0001b0d8 	cmpnei	zero,zero,1731
   1b00c:	0001b380 	call	1b38 <_ZN3USB4TaskEv+0x31c>
   1b010:	0001b88c 	andi	zero,zero,1762
   1b014:	0001b74c 	andi	zero,zero,1757
   1b018:	0001b88c 	andi	zero,zero,1762
   1b01c:	0001b798 	cmpnei	zero,zero,1758
   1b020:	0001b88c 	andi	zero,zero,1762
   1b024:	0001b88c 	andi	zero,zero,1762
   1b028:	0001b45c 	xori	zero,zero,1745
   1b02c:	42000204 	addi	r8,r8,8
   1b030:	d8c02417 	ldw	r3,144(sp)
   1b034:	1c07883a 	add	r3,r3,r16
   1b038:	d8c02415 	stw	r3,144(sp)
   1b03c:	003f8c06 	br	1ae70 <__alt_data_end+0xfc01ae70>
   1b040:	d9402017 	ldw	r5,128(sp)
   1b044:	d9002117 	ldw	r4,132(sp)
   1b048:	0014dc00 	call	14dc0 <__swsetup_r>
   1b04c:	1003c11e 	bne	r2,zero,1bf54 <___vfiprintf_internal_r+0x1224>
   1b050:	d9402017 	ldw	r5,128(sp)
   1b054:	00c00284 	movi	r3,10
   1b058:	2880030b 	ldhu	r2,12(r5)
   1b05c:	1080068c 	andi	r2,r2,26
   1b060:	10ff581e 	bne	r2,r3,1adc4 <__alt_data_end+0xfc01adc4>
   1b064:	d8c02017 	ldw	r3,128(sp)
   1b068:	1880038f 	ldh	r2,14(r3)
   1b06c:	103f5516 	blt	r2,zero,1adc4 <__alt_data_end+0xfc01adc4>
   1b070:	d9c02217 	ldw	r7,136(sp)
   1b074:	d9002117 	ldw	r4,132(sp)
   1b078:	a80d883a 	mov	r6,r21
   1b07c:	180b883a 	mov	r5,r3
   1b080:	001c2580 	call	1c258 <__sbprintf>
   1b084:	dfc03517 	ldw	ra,212(sp)
   1b088:	df003417 	ldw	fp,208(sp)
   1b08c:	ddc03317 	ldw	r23,204(sp)
   1b090:	dd803217 	ldw	r22,200(sp)
   1b094:	dd403117 	ldw	r21,196(sp)
   1b098:	dd003017 	ldw	r20,192(sp)
   1b09c:	dcc02f17 	ldw	r19,188(sp)
   1b0a0:	dc802e17 	ldw	r18,184(sp)
   1b0a4:	dc402d17 	ldw	r17,180(sp)
   1b0a8:	dc002c17 	ldw	r16,176(sp)
   1b0ac:	dec03604 	addi	sp,sp,216
   1b0b0:	f800283a 	ret
   1b0b4:	0016dcc0 	call	16dcc <__sinit>
   1b0b8:	003f2f06 	br	1ad78 <__alt_data_end+0xfc01ad78>
   1b0bc:	d8c02517 	ldw	r3,148(sp)
   1b0c0:	d8802215 	stw	r2,136(sp)
   1b0c4:	00c7c83a 	sub	r3,zero,r3
   1b0c8:	d8c02515 	stw	r3,148(sp)
   1b0cc:	8c400114 	ori	r17,r17,4
   1b0d0:	b0c00007 	ldb	r3,0(r22)
   1b0d4:	003f7306 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b0d8:	00800c04 	movi	r2,48
   1b0dc:	d9402217 	ldw	r5,136(sp)
   1b0e0:	d8801d05 	stb	r2,116(sp)
   1b0e4:	00801e04 	movi	r2,120
   1b0e8:	d8801d45 	stb	r2,117(sp)
   1b0ec:	d8001d85 	stb	zero,118(sp)
   1b0f0:	b811883a 	mov	r8,r23
   1b0f4:	28c00104 	addi	r3,r5,4
   1b0f8:	2cc00017 	ldw	r19,0(r5)
   1b0fc:	0029883a 	mov	r20,zero
   1b100:	88800094 	ori	r2,r17,2
   1b104:	80032516 	blt	r16,zero,1bd9c <___vfiprintf_internal_r+0x106c>
   1b108:	00bfdfc4 	movi	r2,-129
   1b10c:	88a2703a 	and	r17,r17,r2
   1b110:	d8c02215 	stw	r3,136(sp)
   1b114:	8c400094 	ori	r17,r17,2
   1b118:	98032a1e 	bne	r19,zero,1bdc4 <___vfiprintf_internal_r+0x1094>
   1b11c:	008000f4 	movhi	r2,3
   1b120:	10aebf04 	addi	r2,r2,-17668
   1b124:	d8802615 	stw	r2,152(sp)
   1b128:	002b883a 	mov	r21,zero
   1b12c:	8001741e 	bne	r16,zero,1b700 <___vfiprintf_internal_r+0x9d0>
   1b130:	0021883a 	mov	r16,zero
   1b134:	0029883a 	mov	r20,zero
   1b138:	ddc01a04 	addi	r23,sp,104
   1b13c:	8027883a 	mov	r19,r16
   1b140:	8500010e 	bge	r16,r20,1b148 <___vfiprintf_internal_r+0x418>
   1b144:	a027883a 	mov	r19,r20
   1b148:	ad403fcc 	andi	r21,r21,255
   1b14c:	ad40201c 	xori	r21,r21,128
   1b150:	ad7fe004 	addi	r21,r21,-128
   1b154:	a8000126 	beq	r21,zero,1b15c <___vfiprintf_internal_r+0x42c>
   1b158:	9cc00044 	addi	r19,r19,1
   1b15c:	89c0008c 	andi	r7,r17,2
   1b160:	38000126 	beq	r7,zero,1b168 <___vfiprintf_internal_r+0x438>
   1b164:	9cc00084 	addi	r19,r19,2
   1b168:	88c0210c 	andi	r3,r17,132
   1b16c:	1801dd1e 	bne	r3,zero,1b8e4 <___vfiprintf_internal_r+0xbb4>
   1b170:	d9402517 	ldw	r5,148(sp)
   1b174:	2cebc83a 	sub	r21,r5,r19
   1b178:	0541da0e 	bge	zero,r21,1b8e4 <___vfiprintf_internal_r+0xbb4>
   1b17c:	07000404 	movi	fp,16
   1b180:	d8801c17 	ldw	r2,112(sp)
   1b184:	e543be0e 	bge	fp,r21,1c080 <___vfiprintf_internal_r+0x1350>
   1b188:	014000f4 	movhi	r5,3
   1b18c:	296f3304 	addi	r5,r5,-17204
   1b190:	dc002715 	stw	r16,156(sp)
   1b194:	d9801b17 	ldw	r6,108(sp)
   1b198:	a821883a 	mov	r16,r21
   1b19c:	d9402315 	stw	r5,140(sp)
   1b1a0:	028001c4 	movi	r10,7
   1b1a4:	d9c02915 	stw	r7,164(sp)
   1b1a8:	182b883a 	mov	r21,r3
   1b1ac:	00000506 	br	1b1c4 <___vfiprintf_internal_r+0x494>
   1b1b0:	31000084 	addi	r4,r6,2
   1b1b4:	42000204 	addi	r8,r8,8
   1b1b8:	180d883a 	mov	r6,r3
   1b1bc:	843ffc04 	addi	r16,r16,-16
   1b1c0:	e4000f0e 	bge	fp,r16,1b200 <___vfiprintf_internal_r+0x4d0>
   1b1c4:	010000f4 	movhi	r4,3
   1b1c8:	10800404 	addi	r2,r2,16
   1b1cc:	30c00044 	addi	r3,r6,1
   1b1d0:	212f3304 	addi	r4,r4,-17204
   1b1d4:	41000015 	stw	r4,0(r8)
   1b1d8:	47000115 	stw	fp,4(r8)
   1b1dc:	d8801c15 	stw	r2,112(sp)
   1b1e0:	d8c01b15 	stw	r3,108(sp)
   1b1e4:	50fff20e 	bge	r10,r3,1b1b0 <__alt_data_end+0xfc01b1b0>
   1b1e8:	1001b21e 	bne	r2,zero,1b8b4 <___vfiprintf_internal_r+0xb84>
   1b1ec:	843ffc04 	addi	r16,r16,-16
   1b1f0:	000d883a 	mov	r6,zero
   1b1f4:	01000044 	movi	r4,1
   1b1f8:	d811883a 	mov	r8,sp
   1b1fc:	e43ff116 	blt	fp,r16,1b1c4 <__alt_data_end+0xfc01b1c4>
   1b200:	a807883a 	mov	r3,r21
   1b204:	d9c02917 	ldw	r7,164(sp)
   1b208:	802b883a 	mov	r21,r16
   1b20c:	dc002717 	ldw	r16,156(sp)
   1b210:	d9402317 	ldw	r5,140(sp)
   1b214:	a885883a 	add	r2,r21,r2
   1b218:	45400115 	stw	r21,4(r8)
   1b21c:	41400015 	stw	r5,0(r8)
   1b220:	d8801c15 	stw	r2,112(sp)
   1b224:	d9001b15 	stw	r4,108(sp)
   1b228:	014001c4 	movi	r5,7
   1b22c:	29026216 	blt	r5,r4,1bbb8 <___vfiprintf_internal_r+0xe88>
   1b230:	d9801d87 	ldb	r6,118(sp)
   1b234:	42000204 	addi	r8,r8,8
   1b238:	21400044 	addi	r5,r4,1
   1b23c:	3001ae1e 	bne	r6,zero,1b8f8 <___vfiprintf_internal_r+0xbc8>
   1b240:	3801bb26 	beq	r7,zero,1b930 <___vfiprintf_internal_r+0xc00>
   1b244:	d9001d04 	addi	r4,sp,116
   1b248:	10800084 	addi	r2,r2,2
   1b24c:	41000015 	stw	r4,0(r8)
   1b250:	01000084 	movi	r4,2
   1b254:	41000115 	stw	r4,4(r8)
   1b258:	d8801c15 	stw	r2,112(sp)
   1b25c:	d9401b15 	stw	r5,108(sp)
   1b260:	010001c4 	movi	r4,7
   1b264:	2142680e 	bge	r4,r5,1bc08 <___vfiprintf_internal_r+0xed8>
   1b268:	1002b11e 	bne	r2,zero,1bd30 <___vfiprintf_internal_r+0x1000>
   1b26c:	01802004 	movi	r6,128
   1b270:	01400044 	movi	r5,1
   1b274:	0009883a 	mov	r4,zero
   1b278:	d811883a 	mov	r8,sp
   1b27c:	1981ae1e 	bne	r3,r6,1b938 <___vfiprintf_internal_r+0xc08>
   1b280:	d8c02517 	ldw	r3,148(sp)
   1b284:	1cf9c83a 	sub	fp,r3,r19
   1b288:	0701ab0e 	bge	zero,fp,1b938 <___vfiprintf_internal_r+0xc08>
   1b28c:	05400404 	movi	r21,16
   1b290:	af03a90e 	bge	r21,fp,1c138 <___vfiprintf_internal_r+0x1408>
   1b294:	014000f4 	movhi	r5,3
   1b298:	296f2f04 	addi	r5,r5,-17220
   1b29c:	d9402315 	stw	r5,140(sp)
   1b2a0:	01c001c4 	movi	r7,7
   1b2a4:	00000506 	br	1b2bc <___vfiprintf_internal_r+0x58c>
   1b2a8:	21800084 	addi	r6,r4,2
   1b2ac:	42000204 	addi	r8,r8,8
   1b2b0:	1809883a 	mov	r4,r3
   1b2b4:	e73ffc04 	addi	fp,fp,-16
   1b2b8:	af000d0e 	bge	r21,fp,1b2f0 <___vfiprintf_internal_r+0x5c0>
   1b2bc:	10800404 	addi	r2,r2,16
   1b2c0:	20c00044 	addi	r3,r4,1
   1b2c4:	44800015 	stw	r18,0(r8)
   1b2c8:	45400115 	stw	r21,4(r8)
   1b2cc:	d8801c15 	stw	r2,112(sp)
   1b2d0:	d8c01b15 	stw	r3,108(sp)
   1b2d4:	38fff40e 	bge	r7,r3,1b2a8 <__alt_data_end+0xfc01b2a8>
   1b2d8:	10022b1e 	bne	r2,zero,1bb88 <___vfiprintf_internal_r+0xe58>
   1b2dc:	e73ffc04 	addi	fp,fp,-16
   1b2e0:	01800044 	movi	r6,1
   1b2e4:	0009883a 	mov	r4,zero
   1b2e8:	d811883a 	mov	r8,sp
   1b2ec:	af3ff316 	blt	r21,fp,1b2bc <__alt_data_end+0xfc01b2bc>
   1b2f0:	d8c02317 	ldw	r3,140(sp)
   1b2f4:	1705883a 	add	r2,r2,fp
   1b2f8:	47000115 	stw	fp,4(r8)
   1b2fc:	40c00015 	stw	r3,0(r8)
   1b300:	d8801c15 	stw	r2,112(sp)
   1b304:	d9801b15 	stw	r6,108(sp)
   1b308:	00c001c4 	movi	r3,7
   1b30c:	19829416 	blt	r3,r6,1bd60 <___vfiprintf_internal_r+0x1030>
   1b310:	8521c83a 	sub	r16,r16,r20
   1b314:	42000204 	addi	r8,r8,8
   1b318:	31400044 	addi	r5,r6,1
   1b31c:	3009883a 	mov	r4,r6
   1b320:	04018716 	blt	zero,r16,1b940 <___vfiprintf_internal_r+0xc10>
   1b324:	a085883a 	add	r2,r20,r2
   1b328:	45c00015 	stw	r23,0(r8)
   1b32c:	45000115 	stw	r20,4(r8)
   1b330:	d8801c15 	stw	r2,112(sp)
   1b334:	d9401b15 	stw	r5,108(sp)
   1b338:	00c001c4 	movi	r3,7
   1b33c:	1941c20e 	bge	r3,r5,1ba48 <___vfiprintf_internal_r+0xd18>
   1b340:	1002531e 	bne	r2,zero,1bc90 <___vfiprintf_internal_r+0xf60>
   1b344:	d8001b15 	stw	zero,108(sp)
   1b348:	8c40010c 	andi	r17,r17,4
   1b34c:	88023226 	beq	r17,zero,1bc18 <___vfiprintf_internal_r+0xee8>
   1b350:	d9002517 	ldw	r4,148(sp)
   1b354:	24e3c83a 	sub	r17,r4,r19
   1b358:	04432916 	blt	zero,r17,1c000 <___vfiprintf_internal_r+0x12d0>
   1b35c:	d8802517 	ldw	r2,148(sp)
   1b360:	14c0010e 	bge	r2,r19,1b368 <___vfiprintf_internal_r+0x638>
   1b364:	9805883a 	mov	r2,r19
   1b368:	d8c02417 	ldw	r3,144(sp)
   1b36c:	1887883a 	add	r3,r3,r2
   1b370:	d8c02415 	stw	r3,144(sp)
   1b374:	d8001b15 	stw	zero,108(sp)
   1b378:	d811883a 	mov	r8,sp
   1b37c:	003ea006 	br	1ae00 <__alt_data_end+0xfc01ae00>
   1b380:	8c400814 	ori	r17,r17,32
   1b384:	b0c00007 	ldb	r3,0(r22)
   1b388:	003ec606 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b38c:	b0c00007 	ldb	r3,0(r22)
   1b390:	00801b04 	movi	r2,108
   1b394:	18832026 	beq	r3,r2,1c018 <___vfiprintf_internal_r+0x12e8>
   1b398:	8c400414 	ori	r17,r17,16
   1b39c:	003ec106 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b3a0:	9cc03fcc 	andi	r19,r19,255
   1b3a4:	b811883a 	mov	r8,r23
   1b3a8:	9803981e 	bne	r19,zero,1c20c <___vfiprintf_internal_r+0x14dc>
   1b3ac:	8880080c 	andi	r2,r17,32
   1b3b0:	1002be26 	beq	r2,zero,1beac <___vfiprintf_internal_r+0x117c>
   1b3b4:	d9002217 	ldw	r4,136(sp)
   1b3b8:	d9402417 	ldw	r5,144(sp)
   1b3bc:	20800017 	ldw	r2,0(r4)
   1b3c0:	2807d7fa 	srai	r3,r5,31
   1b3c4:	21000104 	addi	r4,r4,4
   1b3c8:	d9002215 	stw	r4,136(sp)
   1b3cc:	11400015 	stw	r5,0(r2)
   1b3d0:	10c00115 	stw	r3,4(r2)
   1b3d4:	003e8a06 	br	1ae00 <__alt_data_end+0xfc01ae00>
   1b3d8:	9cc03fcc 	andi	r19,r19,255
   1b3dc:	b811883a 	mov	r8,r23
   1b3e0:	9803871e 	bne	r19,zero,1c200 <___vfiprintf_internal_r+0x14d0>
   1b3e4:	8880080c 	andi	r2,r17,32
   1b3e8:	10009a26 	beq	r2,zero,1b654 <___vfiprintf_internal_r+0x924>
   1b3ec:	d9002217 	ldw	r4,136(sp)
   1b3f0:	d8001d85 	stb	zero,118(sp)
   1b3f4:	20800204 	addi	r2,r4,8
   1b3f8:	24c00017 	ldw	r19,0(r4)
   1b3fc:	25000117 	ldw	r20,4(r4)
   1b400:	8002a416 	blt	r16,zero,1be94 <___vfiprintf_internal_r+0x1164>
   1b404:	013fdfc4 	movi	r4,-129
   1b408:	9d06b03a 	or	r3,r19,r20
   1b40c:	d8802215 	stw	r2,136(sp)
   1b410:	8922703a 	and	r17,r17,r4
   1b414:	18009b26 	beq	r3,zero,1b684 <___vfiprintf_internal_r+0x954>
   1b418:	002b883a 	mov	r21,zero
   1b41c:	ddc01a04 	addi	r23,sp,104
   1b420:	9806d0fa 	srli	r3,r19,3
   1b424:	a008977a 	slli	r4,r20,29
   1b428:	a028d0fa 	srli	r20,r20,3
   1b42c:	9cc001cc 	andi	r19,r19,7
   1b430:	98800c04 	addi	r2,r19,48
   1b434:	bdffffc4 	addi	r23,r23,-1
   1b438:	20e6b03a 	or	r19,r4,r3
   1b43c:	b8800005 	stb	r2,0(r23)
   1b440:	9d06b03a 	or	r3,r19,r20
   1b444:	183ff61e 	bne	r3,zero,1b420 <__alt_data_end+0xfc01b420>
   1b448:	88c0004c 	andi	r3,r17,1
   1b44c:	18021f1e 	bne	r3,zero,1bccc <___vfiprintf_internal_r+0xf9c>
   1b450:	d9401e17 	ldw	r5,120(sp)
   1b454:	2de9c83a 	sub	r20,r5,r23
   1b458:	003f3806 	br	1b13c <__alt_data_end+0xfc01b13c>
   1b45c:	9cc03fcc 	andi	r19,r19,255
   1b460:	b811883a 	mov	r8,r23
   1b464:	98034f1e 	bne	r19,zero,1c1a4 <___vfiprintf_internal_r+0x1474>
   1b468:	008000f4 	movhi	r2,3
   1b46c:	10aebf04 	addi	r2,r2,-17668
   1b470:	d8802615 	stw	r2,152(sp)
   1b474:	8880080c 	andi	r2,r17,32
   1b478:	1000ac26 	beq	r2,zero,1b72c <___vfiprintf_internal_r+0x9fc>
   1b47c:	d9002217 	ldw	r4,136(sp)
   1b480:	24c00017 	ldw	r19,0(r4)
   1b484:	25000117 	ldw	r20,4(r4)
   1b488:	21000204 	addi	r4,r4,8
   1b48c:	d9002215 	stw	r4,136(sp)
   1b490:	8880004c 	andi	r2,r17,1
   1b494:	1001e726 	beq	r2,zero,1bc34 <___vfiprintf_internal_r+0xf04>
   1b498:	9d04b03a 	or	r2,r19,r20
   1b49c:	10025c1e 	bne	r2,zero,1be10 <___vfiprintf_internal_r+0x10e0>
   1b4a0:	d8001d85 	stb	zero,118(sp)
   1b4a4:	80024416 	blt	r16,zero,1bdb8 <___vfiprintf_internal_r+0x1088>
   1b4a8:	00bfdfc4 	movi	r2,-129
   1b4ac:	88a2703a 	and	r17,r17,r2
   1b4b0:	003f1d06 	br	1b128 <__alt_data_end+0xfc01b128>
   1b4b4:	d8c02217 	ldw	r3,136(sp)
   1b4b8:	04c00044 	movi	r19,1
   1b4bc:	b811883a 	mov	r8,r23
   1b4c0:	18800017 	ldw	r2,0(r3)
   1b4c4:	18c00104 	addi	r3,r3,4
   1b4c8:	d8001d85 	stb	zero,118(sp)
   1b4cc:	d8801005 	stb	r2,64(sp)
   1b4d0:	d8c02215 	stw	r3,136(sp)
   1b4d4:	9829883a 	mov	r20,r19
   1b4d8:	ddc01004 	addi	r23,sp,64
   1b4dc:	0021883a 	mov	r16,zero
   1b4e0:	003f1e06 	br	1b15c <__alt_data_end+0xfc01b15c>
   1b4e4:	9cc03fcc 	andi	r19,r19,255
   1b4e8:	b811883a 	mov	r8,r23
   1b4ec:	9803331e 	bne	r19,zero,1c1bc <___vfiprintf_internal_r+0x148c>
   1b4f0:	8880080c 	andi	r2,r17,32
   1b4f4:	10004826 	beq	r2,zero,1b618 <___vfiprintf_internal_r+0x8e8>
   1b4f8:	d9002217 	ldw	r4,136(sp)
   1b4fc:	20800117 	ldw	r2,4(r4)
   1b500:	24c00017 	ldw	r19,0(r4)
   1b504:	21000204 	addi	r4,r4,8
   1b508:	d9002215 	stw	r4,136(sp)
   1b50c:	1029883a 	mov	r20,r2
   1b510:	10024c16 	blt	r2,zero,1be44 <___vfiprintf_internal_r+0x1114>
   1b514:	dd401d83 	ldbu	r21,118(sp)
   1b518:	80007116 	blt	r16,zero,1b6e0 <___vfiprintf_internal_r+0x9b0>
   1b51c:	00ffdfc4 	movi	r3,-129
   1b520:	9d04b03a 	or	r2,r19,r20
   1b524:	88e2703a 	and	r17,r17,r3
   1b528:	1000d126 	beq	r2,zero,1b870 <___vfiprintf_internal_r+0xb40>
   1b52c:	a0023526 	beq	r20,zero,1be04 <___vfiprintf_internal_r+0x10d4>
   1b530:	ddc01a04 	addi	r23,sp,104
   1b534:	4039883a 	mov	fp,r8
   1b538:	9809883a 	mov	r4,r19
   1b53c:	a00b883a 	mov	r5,r20
   1b540:	01800284 	movi	r6,10
   1b544:	000f883a 	mov	r7,zero
   1b548:	001d25c0 	call	1d25c <__umoddi3>
   1b54c:	10800c04 	addi	r2,r2,48
   1b550:	bdffffc4 	addi	r23,r23,-1
   1b554:	9809883a 	mov	r4,r19
   1b558:	a00b883a 	mov	r5,r20
   1b55c:	b8800005 	stb	r2,0(r23)
   1b560:	01800284 	movi	r6,10
   1b564:	000f883a 	mov	r7,zero
   1b568:	001cc600 	call	1cc60 <__udivdi3>
   1b56c:	1027883a 	mov	r19,r2
   1b570:	10c4b03a 	or	r2,r2,r3
   1b574:	1829883a 	mov	r20,r3
   1b578:	103fef1e 	bne	r2,zero,1b538 <__alt_data_end+0xfc01b538>
   1b57c:	d9001e17 	ldw	r4,120(sp)
   1b580:	e011883a 	mov	r8,fp
   1b584:	25e9c83a 	sub	r20,r4,r23
   1b588:	003eec06 	br	1b13c <__alt_data_end+0xfc01b13c>
   1b58c:	d8802307 	ldb	r2,140(sp)
   1b590:	1002361e 	bne	r2,zero,1be6c <___vfiprintf_internal_r+0x113c>
   1b594:	00c00804 	movi	r3,32
   1b598:	d8c02305 	stb	r3,140(sp)
   1b59c:	04c00044 	movi	r19,1
   1b5a0:	b0c00007 	ldb	r3,0(r22)
   1b5a4:	003e3f06 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b5a8:	8c400054 	ori	r17,r17,1
   1b5ac:	b0c00007 	ldb	r3,0(r22)
   1b5b0:	003e3c06 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b5b4:	8c402014 	ori	r17,r17,128
   1b5b8:	b0c00007 	ldb	r3,0(r22)
   1b5bc:	003e3906 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b5c0:	dc002715 	stw	r16,156(sp)
   1b5c4:	d8002515 	stw	zero,148(sp)
   1b5c8:	1f3ff404 	addi	fp,r3,-48
   1b5cc:	0009883a 	mov	r4,zero
   1b5d0:	b021883a 	mov	r16,r22
   1b5d4:	01400284 	movi	r5,10
   1b5d8:	000d9380 	call	d938 <__mulsi3>
   1b5dc:	80c00007 	ldb	r3,0(r16)
   1b5e0:	e089883a 	add	r4,fp,r2
   1b5e4:	b5800044 	addi	r22,r22,1
   1b5e8:	1f3ff404 	addi	fp,r3,-48
   1b5ec:	b021883a 	mov	r16,r22
   1b5f0:	af3ff82e 	bgeu	r21,fp,1b5d4 <__alt_data_end+0xfc01b5d4>
   1b5f4:	d9002515 	stw	r4,148(sp)
   1b5f8:	dc002717 	ldw	r16,156(sp)
   1b5fc:	003e2a06 	br	1aea8 <__alt_data_end+0xfc01aea8>
   1b600:	9cc03fcc 	andi	r19,r19,255
   1b604:	b811883a 	mov	r8,r23
   1b608:	9802e91e 	bne	r19,zero,1c1b0 <___vfiprintf_internal_r+0x1480>
   1b60c:	8c400414 	ori	r17,r17,16
   1b610:	8880080c 	andi	r2,r17,32
   1b614:	103fb81e 	bne	r2,zero,1b4f8 <__alt_data_end+0xfc01b4f8>
   1b618:	8880040c 	andi	r2,r17,16
   1b61c:	10022e26 	beq	r2,zero,1bed8 <___vfiprintf_internal_r+0x11a8>
   1b620:	d9402217 	ldw	r5,136(sp)
   1b624:	2cc00017 	ldw	r19,0(r5)
   1b628:	29400104 	addi	r5,r5,4
   1b62c:	d9402215 	stw	r5,136(sp)
   1b630:	9829d7fa 	srai	r20,r19,31
   1b634:	a005883a 	mov	r2,r20
   1b638:	003fb506 	br	1b510 <__alt_data_end+0xfc01b510>
   1b63c:	9cc03fcc 	andi	r19,r19,255
   1b640:	b811883a 	mov	r8,r23
   1b644:	9802fa1e 	bne	r19,zero,1c230 <___vfiprintf_internal_r+0x1500>
   1b648:	8c400414 	ori	r17,r17,16
   1b64c:	8880080c 	andi	r2,r17,32
   1b650:	103f661e 	bne	r2,zero,1b3ec <__alt_data_end+0xfc01b3ec>
   1b654:	8880040c 	andi	r2,r17,16
   1b658:	10020626 	beq	r2,zero,1be74 <___vfiprintf_internal_r+0x1144>
   1b65c:	d9402217 	ldw	r5,136(sp)
   1b660:	d8001d85 	stb	zero,118(sp)
   1b664:	0029883a 	mov	r20,zero
   1b668:	28800104 	addi	r2,r5,4
   1b66c:	2cc00017 	ldw	r19,0(r5)
   1b670:	80020816 	blt	r16,zero,1be94 <___vfiprintf_internal_r+0x1164>
   1b674:	00ffdfc4 	movi	r3,-129
   1b678:	d8802215 	stw	r2,136(sp)
   1b67c:	88e2703a 	and	r17,r17,r3
   1b680:	983f651e 	bne	r19,zero,1b418 <__alt_data_end+0xfc01b418>
   1b684:	002b883a 	mov	r21,zero
   1b688:	8002cf26 	beq	r16,zero,1c1c8 <___vfiprintf_internal_r+0x1498>
   1b68c:	0027883a 	mov	r19,zero
   1b690:	0029883a 	mov	r20,zero
   1b694:	003f6106 	br	1b41c <__alt_data_end+0xfc01b41c>
   1b698:	9cc03fcc 	andi	r19,r19,255
   1b69c:	b811883a 	mov	r8,r23
   1b6a0:	9802e01e 	bne	r19,zero,1c224 <___vfiprintf_internal_r+0x14f4>
   1b6a4:	8c400414 	ori	r17,r17,16
   1b6a8:	8880080c 	andi	r2,r17,32
   1b6ac:	1000641e 	bne	r2,zero,1b840 <___vfiprintf_internal_r+0xb10>
   1b6b0:	8880040c 	andi	r2,r17,16
   1b6b4:	1001c81e 	bne	r2,zero,1bdd8 <___vfiprintf_internal_r+0x10a8>
   1b6b8:	8880100c 	andi	r2,r17,64
   1b6bc:	d8001d85 	stb	zero,118(sp)
   1b6c0:	1002281e 	bne	r2,zero,1bf64 <___vfiprintf_internal_r+0x1234>
   1b6c4:	d9002217 	ldw	r4,136(sp)
   1b6c8:	0029883a 	mov	r20,zero
   1b6cc:	20800104 	addi	r2,r4,4
   1b6d0:	24c00017 	ldw	r19,0(r4)
   1b6d4:	8001c60e 	bge	r16,zero,1bdf0 <___vfiprintf_internal_r+0x10c0>
   1b6d8:	d8802215 	stw	r2,136(sp)
   1b6dc:	002b883a 	mov	r21,zero
   1b6e0:	9d04b03a 	or	r2,r19,r20
   1b6e4:	103f911e 	bne	r2,zero,1b52c <__alt_data_end+0xfc01b52c>
   1b6e8:	00800044 	movi	r2,1
   1b6ec:	10803fcc 	andi	r2,r2,255
   1b6f0:	00c00044 	movi	r3,1
   1b6f4:	10c05f26 	beq	r2,r3,1b874 <___vfiprintf_internal_r+0xb44>
   1b6f8:	00c00084 	movi	r3,2
   1b6fc:	10ffe31e 	bne	r2,r3,1b68c <__alt_data_end+0xfc01b68c>
   1b700:	0027883a 	mov	r19,zero
   1b704:	0029883a 	mov	r20,zero
   1b708:	00015106 	br	1bc50 <___vfiprintf_internal_r+0xf20>
   1b70c:	9cc03fcc 	andi	r19,r19,255
   1b710:	b811883a 	mov	r8,r23
   1b714:	9802c01e 	bne	r19,zero,1c218 <___vfiprintf_internal_r+0x14e8>
   1b718:	014000f4 	movhi	r5,3
   1b71c:	296eba04 	addi	r5,r5,-17688
   1b720:	d9402615 	stw	r5,152(sp)
   1b724:	8880080c 	andi	r2,r17,32
   1b728:	103f541e 	bne	r2,zero,1b47c <__alt_data_end+0xfc01b47c>
   1b72c:	8880040c 	andi	r2,r17,16
   1b730:	1001f226 	beq	r2,zero,1befc <___vfiprintf_internal_r+0x11cc>
   1b734:	d9402217 	ldw	r5,136(sp)
   1b738:	0029883a 	mov	r20,zero
   1b73c:	2cc00017 	ldw	r19,0(r5)
   1b740:	29400104 	addi	r5,r5,4
   1b744:	d9402215 	stw	r5,136(sp)
   1b748:	003f5106 	br	1b490 <__alt_data_end+0xfc01b490>
   1b74c:	d8c02217 	ldw	r3,136(sp)
   1b750:	b811883a 	mov	r8,r23
   1b754:	d8001d85 	stb	zero,118(sp)
   1b758:	1dc00017 	ldw	r23,0(r3)
   1b75c:	1f000104 	addi	fp,r3,4
   1b760:	b8025926 	beq	r23,zero,1c0c8 <___vfiprintf_internal_r+0x1398>
   1b764:	80023316 	blt	r16,zero,1c034 <___vfiprintf_internal_r+0x1304>
   1b768:	800d883a 	mov	r6,r16
   1b76c:	000b883a 	mov	r5,zero
   1b770:	b809883a 	mov	r4,r23
   1b774:	da002a15 	stw	r8,168(sp)
   1b778:	0017b380 	call	17b38 <memchr>
   1b77c:	da002a17 	ldw	r8,168(sp)
   1b780:	10026826 	beq	r2,zero,1c124 <___vfiprintf_internal_r+0x13f4>
   1b784:	15e9c83a 	sub	r20,r2,r23
   1b788:	dd401d83 	ldbu	r21,118(sp)
   1b78c:	df002215 	stw	fp,136(sp)
   1b790:	0021883a 	mov	r16,zero
   1b794:	003e6906 	br	1b13c <__alt_data_end+0xfc01b13c>
   1b798:	9cc03fcc 	andi	r19,r19,255
   1b79c:	b811883a 	mov	r8,r23
   1b7a0:	983fc126 	beq	r19,zero,1b6a8 <__alt_data_end+0xfc01b6a8>
   1b7a4:	d8c02303 	ldbu	r3,140(sp)
   1b7a8:	d8c01d85 	stb	r3,118(sp)
   1b7ac:	003fbe06 	br	1b6a8 <__alt_data_end+0xfc01b6a8>
   1b7b0:	d9002217 	ldw	r4,136(sp)
   1b7b4:	d9402217 	ldw	r5,136(sp)
   1b7b8:	21000017 	ldw	r4,0(r4)
   1b7bc:	28800104 	addi	r2,r5,4
   1b7c0:	d9002515 	stw	r4,148(sp)
   1b7c4:	203e3d16 	blt	r4,zero,1b0bc <__alt_data_end+0xfc01b0bc>
   1b7c8:	d8802215 	stw	r2,136(sp)
   1b7cc:	b0c00007 	ldb	r3,0(r22)
   1b7d0:	003db406 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b7d4:	00c00ac4 	movi	r3,43
   1b7d8:	d8c02305 	stb	r3,140(sp)
   1b7dc:	04c00044 	movi	r19,1
   1b7e0:	b0c00007 	ldb	r3,0(r22)
   1b7e4:	003daf06 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b7e8:	b0c00007 	ldb	r3,0(r22)
   1b7ec:	01000a84 	movi	r4,42
   1b7f0:	b4000044 	addi	r16,r22,1
   1b7f4:	19025e26 	beq	r3,r4,1c170 <___vfiprintf_internal_r+0x1440>
   1b7f8:	1f3ff404 	addi	fp,r3,-48
   1b7fc:	0009883a 	mov	r4,zero
   1b800:	af025236 	bltu	r21,fp,1c14c <___vfiprintf_internal_r+0x141c>
   1b804:	01400284 	movi	r5,10
   1b808:	000d9380 	call	d938 <__mulsi3>
   1b80c:	80c00007 	ldb	r3,0(r16)
   1b810:	1709883a 	add	r4,r2,fp
   1b814:	85800044 	addi	r22,r16,1
   1b818:	1f3ff404 	addi	fp,r3,-48
   1b81c:	b021883a 	mov	r16,r22
   1b820:	af3ff82e 	bgeu	r21,fp,1b804 <__alt_data_end+0xfc01b804>
   1b824:	2021883a 	mov	r16,r4
   1b828:	203d9f0e 	bge	r4,zero,1aea8 <__alt_data_end+0xfc01aea8>
   1b82c:	043fffc4 	movi	r16,-1
   1b830:	003d9d06 	br	1aea8 <__alt_data_end+0xfc01aea8>
   1b834:	8c401014 	ori	r17,r17,64
   1b838:	b0c00007 	ldb	r3,0(r22)
   1b83c:	003d9906 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1b840:	d9002217 	ldw	r4,136(sp)
   1b844:	d8001d85 	stb	zero,118(sp)
   1b848:	20c00204 	addi	r3,r4,8
   1b84c:	24c00017 	ldw	r19,0(r4)
   1b850:	25000117 	ldw	r20,4(r4)
   1b854:	8001e716 	blt	r16,zero,1bff4 <___vfiprintf_internal_r+0x12c4>
   1b858:	013fdfc4 	movi	r4,-129
   1b85c:	9d04b03a 	or	r2,r19,r20
   1b860:	d8c02215 	stw	r3,136(sp)
   1b864:	8922703a 	and	r17,r17,r4
   1b868:	002b883a 	mov	r21,zero
   1b86c:	103f2f1e 	bne	r2,zero,1b52c <__alt_data_end+0xfc01b52c>
   1b870:	803e2f26 	beq	r16,zero,1b130 <__alt_data_end+0xfc01b130>
   1b874:	0027883a 	mov	r19,zero
   1b878:	9cc00c04 	addi	r19,r19,48
   1b87c:	dcc019c5 	stb	r19,103(sp)
   1b880:	dd002817 	ldw	r20,160(sp)
   1b884:	ddc019c4 	addi	r23,sp,103
   1b888:	003e2c06 	br	1b13c <__alt_data_end+0xfc01b13c>
   1b88c:	9cc03fcc 	andi	r19,r19,255
   1b890:	b811883a 	mov	r8,r23
   1b894:	9802571e 	bne	r19,zero,1c1f4 <___vfiprintf_internal_r+0x14c4>
   1b898:	18005726 	beq	r3,zero,1b9f8 <___vfiprintf_internal_r+0xcc8>
   1b89c:	04c00044 	movi	r19,1
   1b8a0:	d8c01005 	stb	r3,64(sp)
   1b8a4:	d8001d85 	stb	zero,118(sp)
   1b8a8:	9829883a 	mov	r20,r19
   1b8ac:	ddc01004 	addi	r23,sp,64
   1b8b0:	003f0a06 	br	1b4dc <__alt_data_end+0xfc01b4dc>
   1b8b4:	d9402017 	ldw	r5,128(sp)
   1b8b8:	d9002117 	ldw	r4,132(sp)
   1b8bc:	d9801a04 	addi	r6,sp,104
   1b8c0:	da802a15 	stw	r10,168(sp)
   1b8c4:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1b8c8:	da802a17 	ldw	r10,168(sp)
   1b8cc:	1000501e 	bne	r2,zero,1ba10 <___vfiprintf_internal_r+0xce0>
   1b8d0:	d9801b17 	ldw	r6,108(sp)
   1b8d4:	d8801c17 	ldw	r2,112(sp)
   1b8d8:	d811883a 	mov	r8,sp
   1b8dc:	31000044 	addi	r4,r6,1
   1b8e0:	003e3606 	br	1b1bc <__alt_data_end+0xfc01b1bc>
   1b8e4:	d9001b17 	ldw	r4,108(sp)
   1b8e8:	d8801c17 	ldw	r2,112(sp)
   1b8ec:	21400044 	addi	r5,r4,1
   1b8f0:	d9801d87 	ldb	r6,118(sp)
   1b8f4:	303e5226 	beq	r6,zero,1b240 <__alt_data_end+0xfc01b240>
   1b8f8:	01800044 	movi	r6,1
   1b8fc:	d9001d84 	addi	r4,sp,118
   1b900:	1185883a 	add	r2,r2,r6
   1b904:	41000015 	stw	r4,0(r8)
   1b908:	41800115 	stw	r6,4(r8)
   1b90c:	d8801c15 	stw	r2,112(sp)
   1b910:	d9401b15 	stw	r5,108(sp)
   1b914:	010001c4 	movi	r4,7
   1b918:	2140b00e 	bge	r4,r5,1bbdc <___vfiprintf_internal_r+0xeac>
   1b91c:	1000f61e 	bne	r2,zero,1bcf8 <___vfiprintf_internal_r+0xfc8>
   1b920:	3800b31e 	bne	r7,zero,1bbf0 <___vfiprintf_internal_r+0xec0>
   1b924:	0009883a 	mov	r4,zero
   1b928:	300b883a 	mov	r5,r6
   1b92c:	d811883a 	mov	r8,sp
   1b930:	01802004 	movi	r6,128
   1b934:	19be5226 	beq	r3,r6,1b280 <__alt_data_end+0xfc01b280>
   1b938:	8521c83a 	sub	r16,r16,r20
   1b93c:	043e790e 	bge	zero,r16,1b324 <__alt_data_end+0xfc01b324>
   1b940:	05400404 	movi	r21,16
   1b944:	ac01b00e 	bge	r21,r16,1c008 <___vfiprintf_internal_r+0x12d8>
   1b948:	014000f4 	movhi	r5,3
   1b94c:	296f2f04 	addi	r5,r5,-17220
   1b950:	d9402315 	stw	r5,140(sp)
   1b954:	070001c4 	movi	fp,7
   1b958:	00000506 	br	1b970 <___vfiprintf_internal_r+0xc40>
   1b95c:	21400084 	addi	r5,r4,2
   1b960:	42000204 	addi	r8,r8,8
   1b964:	1809883a 	mov	r4,r3
   1b968:	843ffc04 	addi	r16,r16,-16
   1b96c:	ac000d0e 	bge	r21,r16,1b9a4 <___vfiprintf_internal_r+0xc74>
   1b970:	10800404 	addi	r2,r2,16
   1b974:	20c00044 	addi	r3,r4,1
   1b978:	44800015 	stw	r18,0(r8)
   1b97c:	45400115 	stw	r21,4(r8)
   1b980:	d8801c15 	stw	r2,112(sp)
   1b984:	d8c01b15 	stw	r3,108(sp)
   1b988:	e0fff40e 	bge	fp,r3,1b95c <__alt_data_end+0xfc01b95c>
   1b98c:	1000101e 	bne	r2,zero,1b9d0 <___vfiprintf_internal_r+0xca0>
   1b990:	843ffc04 	addi	r16,r16,-16
   1b994:	01400044 	movi	r5,1
   1b998:	0009883a 	mov	r4,zero
   1b99c:	d811883a 	mov	r8,sp
   1b9a0:	ac3ff316 	blt	r21,r16,1b970 <__alt_data_end+0xfc01b970>
   1b9a4:	d8c02317 	ldw	r3,140(sp)
   1b9a8:	1405883a 	add	r2,r2,r16
   1b9ac:	44000115 	stw	r16,4(r8)
   1b9b0:	40c00015 	stw	r3,0(r8)
   1b9b4:	d8801c15 	stw	r2,112(sp)
   1b9b8:	d9401b15 	stw	r5,108(sp)
   1b9bc:	00c001c4 	movi	r3,7
   1b9c0:	19401916 	blt	r3,r5,1ba28 <___vfiprintf_internal_r+0xcf8>
   1b9c4:	42000204 	addi	r8,r8,8
   1b9c8:	29400044 	addi	r5,r5,1
   1b9cc:	003e5506 	br	1b324 <__alt_data_end+0xfc01b324>
   1b9d0:	d9402017 	ldw	r5,128(sp)
   1b9d4:	d9002117 	ldw	r4,132(sp)
   1b9d8:	d9801a04 	addi	r6,sp,104
   1b9dc:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1b9e0:	10000b1e 	bne	r2,zero,1ba10 <___vfiprintf_internal_r+0xce0>
   1b9e4:	d9001b17 	ldw	r4,108(sp)
   1b9e8:	d8801c17 	ldw	r2,112(sp)
   1b9ec:	d811883a 	mov	r8,sp
   1b9f0:	21400044 	addi	r5,r4,1
   1b9f4:	003fdc06 	br	1b968 <__alt_data_end+0xfc01b968>
   1b9f8:	d8801c17 	ldw	r2,112(sp)
   1b9fc:	10000426 	beq	r2,zero,1ba10 <___vfiprintf_internal_r+0xce0>
   1ba00:	d9402017 	ldw	r5,128(sp)
   1ba04:	d9002117 	ldw	r4,132(sp)
   1ba08:	d9801a04 	addi	r6,sp,104
   1ba0c:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1ba10:	d9402017 	ldw	r5,128(sp)
   1ba14:	2880030b 	ldhu	r2,12(r5)
   1ba18:	1080100c 	andi	r2,r2,64
   1ba1c:	10014d1e 	bne	r2,zero,1bf54 <___vfiprintf_internal_r+0x1224>
   1ba20:	d8802417 	ldw	r2,144(sp)
   1ba24:	003d9706 	br	1b084 <__alt_data_end+0xfc01b084>
   1ba28:	1000d21e 	bne	r2,zero,1bd74 <___vfiprintf_internal_r+0x1044>
   1ba2c:	00c00044 	movi	r3,1
   1ba30:	a005883a 	mov	r2,r20
   1ba34:	ddc00015 	stw	r23,0(sp)
   1ba38:	dd000115 	stw	r20,4(sp)
   1ba3c:	dd001c15 	stw	r20,112(sp)
   1ba40:	d8c01b15 	stw	r3,108(sp)
   1ba44:	d811883a 	mov	r8,sp
   1ba48:	42000204 	addi	r8,r8,8
   1ba4c:	8c40010c 	andi	r17,r17,4
   1ba50:	88004026 	beq	r17,zero,1bb54 <___vfiprintf_internal_r+0xe24>
   1ba54:	d9002517 	ldw	r4,148(sp)
   1ba58:	24e3c83a 	sub	r17,r4,r19
   1ba5c:	04403d0e 	bge	zero,r17,1bb54 <___vfiprintf_internal_r+0xe24>
   1ba60:	04000404 	movi	r16,16
   1ba64:	8441a90e 	bge	r16,r17,1c10c <___vfiprintf_internal_r+0x13dc>
   1ba68:	00c000f4 	movhi	r3,3
   1ba6c:	18ef3304 	addi	r3,r3,-17204
   1ba70:	d9001b17 	ldw	r4,108(sp)
   1ba74:	d8c02315 	stw	r3,140(sp)
   1ba78:	050001c4 	movi	r20,7
   1ba7c:	dd402117 	ldw	r21,132(sp)
   1ba80:	ddc02017 	ldw	r23,128(sp)
   1ba84:	00000506 	br	1ba9c <___vfiprintf_internal_r+0xd6c>
   1ba88:	21400084 	addi	r5,r4,2
   1ba8c:	42000204 	addi	r8,r8,8
   1ba90:	1809883a 	mov	r4,r3
   1ba94:	8c7ffc04 	addi	r17,r17,-16
   1ba98:	84400f0e 	bge	r16,r17,1bad8 <___vfiprintf_internal_r+0xda8>
   1ba9c:	014000f4 	movhi	r5,3
   1baa0:	10800404 	addi	r2,r2,16
   1baa4:	20c00044 	addi	r3,r4,1
   1baa8:	296f3304 	addi	r5,r5,-17204
   1baac:	41400015 	stw	r5,0(r8)
   1bab0:	44000115 	stw	r16,4(r8)
   1bab4:	d8801c15 	stw	r2,112(sp)
   1bab8:	d8c01b15 	stw	r3,108(sp)
   1babc:	a0fff20e 	bge	r20,r3,1ba88 <__alt_data_end+0xfc01ba88>
   1bac0:	1000141e 	bne	r2,zero,1bb14 <___vfiprintf_internal_r+0xde4>
   1bac4:	8c7ffc04 	addi	r17,r17,-16
   1bac8:	01400044 	movi	r5,1
   1bacc:	0009883a 	mov	r4,zero
   1bad0:	d811883a 	mov	r8,sp
   1bad4:	847ff116 	blt	r16,r17,1ba9c <__alt_data_end+0xfc01ba9c>
   1bad8:	d8c02317 	ldw	r3,140(sp)
   1badc:	1445883a 	add	r2,r2,r17
   1bae0:	44400115 	stw	r17,4(r8)
   1bae4:	40c00015 	stw	r3,0(r8)
   1bae8:	d8801c15 	stw	r2,112(sp)
   1baec:	d9401b15 	stw	r5,108(sp)
   1baf0:	00c001c4 	movi	r3,7
   1baf4:	1940170e 	bge	r3,r5,1bb54 <___vfiprintf_internal_r+0xe24>
   1baf8:	1000101e 	bne	r2,zero,1bb3c <___vfiprintf_internal_r+0xe0c>
   1bafc:	d8802517 	ldw	r2,148(sp)
   1bb00:	14c11616 	blt	r2,r19,1bf5c <___vfiprintf_internal_r+0x122c>
   1bb04:	d9002417 	ldw	r4,144(sp)
   1bb08:	2089883a 	add	r4,r4,r2
   1bb0c:	d9002415 	stw	r4,144(sp)
   1bb10:	003e1806 	br	1b374 <__alt_data_end+0xfc01b374>
   1bb14:	d9801a04 	addi	r6,sp,104
   1bb18:	b80b883a 	mov	r5,r23
   1bb1c:	a809883a 	mov	r4,r21
   1bb20:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bb24:	103fba1e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bb28:	d9001b17 	ldw	r4,108(sp)
   1bb2c:	d8801c17 	ldw	r2,112(sp)
   1bb30:	d811883a 	mov	r8,sp
   1bb34:	21400044 	addi	r5,r4,1
   1bb38:	003fd606 	br	1ba94 <__alt_data_end+0xfc01ba94>
   1bb3c:	d9402017 	ldw	r5,128(sp)
   1bb40:	d9002117 	ldw	r4,132(sp)
   1bb44:	d9801a04 	addi	r6,sp,104
   1bb48:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bb4c:	103fb01e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bb50:	d8801c17 	ldw	r2,112(sp)
   1bb54:	d8c02517 	ldw	r3,148(sp)
   1bb58:	1cc0010e 	bge	r3,r19,1bb60 <___vfiprintf_internal_r+0xe30>
   1bb5c:	9807883a 	mov	r3,r19
   1bb60:	d9002417 	ldw	r4,144(sp)
   1bb64:	20c9883a 	add	r4,r4,r3
   1bb68:	d9002415 	stw	r4,144(sp)
   1bb6c:	103e0126 	beq	r2,zero,1b374 <__alt_data_end+0xfc01b374>
   1bb70:	d9402017 	ldw	r5,128(sp)
   1bb74:	d9002117 	ldw	r4,132(sp)
   1bb78:	d9801a04 	addi	r6,sp,104
   1bb7c:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bb80:	103dfc26 	beq	r2,zero,1b374 <__alt_data_end+0xfc01b374>
   1bb84:	003fa206 	br	1ba10 <__alt_data_end+0xfc01ba10>
   1bb88:	d9402017 	ldw	r5,128(sp)
   1bb8c:	d9002117 	ldw	r4,132(sp)
   1bb90:	d9801a04 	addi	r6,sp,104
   1bb94:	d9c02b15 	stw	r7,172(sp)
   1bb98:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bb9c:	d9c02b17 	ldw	r7,172(sp)
   1bba0:	103f9b1e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bba4:	d9001b17 	ldw	r4,108(sp)
   1bba8:	d8801c17 	ldw	r2,112(sp)
   1bbac:	d811883a 	mov	r8,sp
   1bbb0:	21800044 	addi	r6,r4,1
   1bbb4:	003dbf06 	br	1b2b4 <__alt_data_end+0xfc01b2b4>
   1bbb8:	1000d81e 	bne	r2,zero,1bf1c <___vfiprintf_internal_r+0x11ec>
   1bbbc:	d9001d87 	ldb	r4,118(sp)
   1bbc0:	20000a26 	beq	r4,zero,1bbec <___vfiprintf_internal_r+0xebc>
   1bbc4:	00800044 	movi	r2,1
   1bbc8:	d9001d84 	addi	r4,sp,118
   1bbcc:	100b883a 	mov	r5,r2
   1bbd0:	d9000015 	stw	r4,0(sp)
   1bbd4:	d8800115 	stw	r2,4(sp)
   1bbd8:	d811883a 	mov	r8,sp
   1bbdc:	2809883a 	mov	r4,r5
   1bbe0:	42000204 	addi	r8,r8,8
   1bbe4:	29400044 	addi	r5,r5,1
   1bbe8:	003d9506 	br	1b240 <__alt_data_end+0xfc01b240>
   1bbec:	3800fd26 	beq	r7,zero,1bfe4 <___vfiprintf_internal_r+0x12b4>
   1bbf0:	00800084 	movi	r2,2
   1bbf4:	d9001d04 	addi	r4,sp,116
   1bbf8:	d9000015 	stw	r4,0(sp)
   1bbfc:	d8800115 	stw	r2,4(sp)
   1bc00:	01400044 	movi	r5,1
   1bc04:	d811883a 	mov	r8,sp
   1bc08:	2809883a 	mov	r4,r5
   1bc0c:	42000204 	addi	r8,r8,8
   1bc10:	29400044 	addi	r5,r5,1
   1bc14:	003f4606 	br	1b930 <__alt_data_end+0xfc01b930>
   1bc18:	d8802517 	ldw	r2,148(sp)
   1bc1c:	14c0010e 	bge	r2,r19,1bc24 <___vfiprintf_internal_r+0xef4>
   1bc20:	9805883a 	mov	r2,r19
   1bc24:	d9402417 	ldw	r5,144(sp)
   1bc28:	288b883a 	add	r5,r5,r2
   1bc2c:	d9402415 	stw	r5,144(sp)
   1bc30:	003dd006 	br	1b374 <__alt_data_end+0xfc01b374>
   1bc34:	d8001d85 	stb	zero,118(sp)
   1bc38:	80005d16 	blt	r16,zero,1bdb0 <___vfiprintf_internal_r+0x1080>
   1bc3c:	00ffdfc4 	movi	r3,-129
   1bc40:	9d04b03a 	or	r2,r19,r20
   1bc44:	88e2703a 	and	r17,r17,r3
   1bc48:	103d3726 	beq	r2,zero,1b128 <__alt_data_end+0xfc01b128>
   1bc4c:	002b883a 	mov	r21,zero
   1bc50:	d9002617 	ldw	r4,152(sp)
   1bc54:	ddc01a04 	addi	r23,sp,104
   1bc58:	988003cc 	andi	r2,r19,15
   1bc5c:	a006973a 	slli	r3,r20,28
   1bc60:	2085883a 	add	r2,r4,r2
   1bc64:	9826d13a 	srli	r19,r19,4
   1bc68:	10800003 	ldbu	r2,0(r2)
   1bc6c:	a028d13a 	srli	r20,r20,4
   1bc70:	bdffffc4 	addi	r23,r23,-1
   1bc74:	1ce6b03a 	or	r19,r3,r19
   1bc78:	b8800005 	stb	r2,0(r23)
   1bc7c:	9d04b03a 	or	r2,r19,r20
   1bc80:	103ff51e 	bne	r2,zero,1bc58 <__alt_data_end+0xfc01bc58>
   1bc84:	d8801e17 	ldw	r2,120(sp)
   1bc88:	15e9c83a 	sub	r20,r2,r23
   1bc8c:	003d2b06 	br	1b13c <__alt_data_end+0xfc01b13c>
   1bc90:	d9402017 	ldw	r5,128(sp)
   1bc94:	d9002117 	ldw	r4,132(sp)
   1bc98:	d9801a04 	addi	r6,sp,104
   1bc9c:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bca0:	103f5b1e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bca4:	d8801c17 	ldw	r2,112(sp)
   1bca8:	d811883a 	mov	r8,sp
   1bcac:	003f6706 	br	1ba4c <__alt_data_end+0xfc01ba4c>
   1bcb0:	d9402017 	ldw	r5,128(sp)
   1bcb4:	d9002117 	ldw	r4,132(sp)
   1bcb8:	d9801a04 	addi	r6,sp,104
   1bcbc:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bcc0:	103f531e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bcc4:	d811883a 	mov	r8,sp
   1bcc8:	003cd906 	br	1b030 <__alt_data_end+0xfc01b030>
   1bccc:	10803fcc 	andi	r2,r2,255
   1bcd0:	1080201c 	xori	r2,r2,128
   1bcd4:	10bfe004 	addi	r2,r2,-128
   1bcd8:	00c00c04 	movi	r3,48
   1bcdc:	10ffe926 	beq	r2,r3,1bc84 <__alt_data_end+0xfc01bc84>
   1bce0:	b8ffffc5 	stb	r3,-1(r23)
   1bce4:	d8c01e17 	ldw	r3,120(sp)
   1bce8:	b8bfffc4 	addi	r2,r23,-1
   1bcec:	102f883a 	mov	r23,r2
   1bcf0:	18a9c83a 	sub	r20,r3,r2
   1bcf4:	003d1106 	br	1b13c <__alt_data_end+0xfc01b13c>
   1bcf8:	d9402017 	ldw	r5,128(sp)
   1bcfc:	d9002117 	ldw	r4,132(sp)
   1bd00:	d9801a04 	addi	r6,sp,104
   1bd04:	d8c02a15 	stw	r3,168(sp)
   1bd08:	d9c02b15 	stw	r7,172(sp)
   1bd0c:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bd10:	d8c02a17 	ldw	r3,168(sp)
   1bd14:	d9c02b17 	ldw	r7,172(sp)
   1bd18:	103f3d1e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bd1c:	d9001b17 	ldw	r4,108(sp)
   1bd20:	d8801c17 	ldw	r2,112(sp)
   1bd24:	d811883a 	mov	r8,sp
   1bd28:	21400044 	addi	r5,r4,1
   1bd2c:	003d4406 	br	1b240 <__alt_data_end+0xfc01b240>
   1bd30:	d9402017 	ldw	r5,128(sp)
   1bd34:	d9002117 	ldw	r4,132(sp)
   1bd38:	d9801a04 	addi	r6,sp,104
   1bd3c:	d8c02a15 	stw	r3,168(sp)
   1bd40:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bd44:	d8c02a17 	ldw	r3,168(sp)
   1bd48:	103f311e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bd4c:	d9001b17 	ldw	r4,108(sp)
   1bd50:	d8801c17 	ldw	r2,112(sp)
   1bd54:	d811883a 	mov	r8,sp
   1bd58:	21400044 	addi	r5,r4,1
   1bd5c:	003ef406 	br	1b930 <__alt_data_end+0xfc01b930>
   1bd60:	1000bd1e 	bne	r2,zero,1c058 <___vfiprintf_internal_r+0x1328>
   1bd64:	01400044 	movi	r5,1
   1bd68:	0009883a 	mov	r4,zero
   1bd6c:	d811883a 	mov	r8,sp
   1bd70:	003ef106 	br	1b938 <__alt_data_end+0xfc01b938>
   1bd74:	d9402017 	ldw	r5,128(sp)
   1bd78:	d9002117 	ldw	r4,132(sp)
   1bd7c:	d9801a04 	addi	r6,sp,104
   1bd80:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bd84:	103f221e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bd88:	d9401b17 	ldw	r5,108(sp)
   1bd8c:	d8801c17 	ldw	r2,112(sp)
   1bd90:	d811883a 	mov	r8,sp
   1bd94:	29400044 	addi	r5,r5,1
   1bd98:	003d6206 	br	1b324 <__alt_data_end+0xfc01b324>
   1bd9c:	014000f4 	movhi	r5,3
   1bda0:	296ebf04 	addi	r5,r5,-17668
   1bda4:	d9402615 	stw	r5,152(sp)
   1bda8:	d8c02215 	stw	r3,136(sp)
   1bdac:	1023883a 	mov	r17,r2
   1bdb0:	9d04b03a 	or	r2,r19,r20
   1bdb4:	103fa51e 	bne	r2,zero,1bc4c <__alt_data_end+0xfc01bc4c>
   1bdb8:	002b883a 	mov	r21,zero
   1bdbc:	00800084 	movi	r2,2
   1bdc0:	003e4a06 	br	1b6ec <__alt_data_end+0xfc01b6ec>
   1bdc4:	014000f4 	movhi	r5,3
   1bdc8:	296ebf04 	addi	r5,r5,-17668
   1bdcc:	002b883a 	mov	r21,zero
   1bdd0:	d9402615 	stw	r5,152(sp)
   1bdd4:	003f9e06 	br	1bc50 <__alt_data_end+0xfc01bc50>
   1bdd8:	d9402217 	ldw	r5,136(sp)
   1bddc:	d8001d85 	stb	zero,118(sp)
   1bde0:	0029883a 	mov	r20,zero
   1bde4:	28800104 	addi	r2,r5,4
   1bde8:	2cc00017 	ldw	r19,0(r5)
   1bdec:	803e3a16 	blt	r16,zero,1b6d8 <__alt_data_end+0xfc01b6d8>
   1bdf0:	00ffdfc4 	movi	r3,-129
   1bdf4:	d8802215 	stw	r2,136(sp)
   1bdf8:	88e2703a 	and	r17,r17,r3
   1bdfc:	002b883a 	mov	r21,zero
   1be00:	983e9b26 	beq	r19,zero,1b870 <__alt_data_end+0xfc01b870>
   1be04:	00800244 	movi	r2,9
   1be08:	14fdc936 	bltu	r2,r19,1b530 <__alt_data_end+0xfc01b530>
   1be0c:	003e9a06 	br	1b878 <__alt_data_end+0xfc01b878>
   1be10:	00800c04 	movi	r2,48
   1be14:	d8c01d45 	stb	r3,117(sp)
   1be18:	d8801d05 	stb	r2,116(sp)
   1be1c:	d8001d85 	stb	zero,118(sp)
   1be20:	88c00094 	ori	r3,r17,2
   1be24:	80009c16 	blt	r16,zero,1c098 <___vfiprintf_internal_r+0x1368>
   1be28:	00bfdfc4 	movi	r2,-129
   1be2c:	88a2703a 	and	r17,r17,r2
   1be30:	8c400094 	ori	r17,r17,2
   1be34:	002b883a 	mov	r21,zero
   1be38:	003f8506 	br	1bc50 <__alt_data_end+0xfc01bc50>
   1be3c:	b029883a 	mov	r20,r22
   1be40:	003c0b06 	br	1ae70 <__alt_data_end+0xfc01ae70>
   1be44:	04e7c83a 	sub	r19,zero,r19
   1be48:	05400b44 	movi	r21,45
   1be4c:	9804c03a 	cmpne	r2,r19,zero
   1be50:	0529c83a 	sub	r20,zero,r20
   1be54:	dd401d85 	stb	r21,118(sp)
   1be58:	a0a9c83a 	sub	r20,r20,r2
   1be5c:	80009716 	blt	r16,zero,1c0bc <___vfiprintf_internal_r+0x138c>
   1be60:	00bfdfc4 	movi	r2,-129
   1be64:	88a2703a 	and	r17,r17,r2
   1be68:	003db006 	br	1b52c <__alt_data_end+0xfc01b52c>
   1be6c:	b0c00007 	ldb	r3,0(r22)
   1be70:	003c0c06 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1be74:	8880100c 	andi	r2,r17,64
   1be78:	d8001d85 	stb	zero,118(sp)
   1be7c:	1000461e 	bne	r2,zero,1bf98 <___vfiprintf_internal_r+0x1268>
   1be80:	d9002217 	ldw	r4,136(sp)
   1be84:	0029883a 	mov	r20,zero
   1be88:	20800104 	addi	r2,r4,4
   1be8c:	24c00017 	ldw	r19,0(r4)
   1be90:	803df80e 	bge	r16,zero,1b674 <__alt_data_end+0xfc01b674>
   1be94:	9d06b03a 	or	r3,r19,r20
   1be98:	d8802215 	stw	r2,136(sp)
   1be9c:	183d5e1e 	bne	r3,zero,1b418 <__alt_data_end+0xfc01b418>
   1bea0:	002b883a 	mov	r21,zero
   1bea4:	0005883a 	mov	r2,zero
   1bea8:	003e1006 	br	1b6ec <__alt_data_end+0xfc01b6ec>
   1beac:	8880040c 	andi	r2,r17,16
   1beb0:	1000321e 	bne	r2,zero,1bf7c <___vfiprintf_internal_r+0x124c>
   1beb4:	8c40100c 	andi	r17,r17,64
   1beb8:	88008d26 	beq	r17,zero,1c0f0 <___vfiprintf_internal_r+0x13c0>
   1bebc:	d9402217 	ldw	r5,136(sp)
   1bec0:	d8c02417 	ldw	r3,144(sp)
   1bec4:	28800017 	ldw	r2,0(r5)
   1bec8:	29400104 	addi	r5,r5,4
   1becc:	d9402215 	stw	r5,136(sp)
   1bed0:	10c0000d 	sth	r3,0(r2)
   1bed4:	003bca06 	br	1ae00 <__alt_data_end+0xfc01ae00>
   1bed8:	8880100c 	andi	r2,r17,64
   1bedc:	10003a26 	beq	r2,zero,1bfc8 <___vfiprintf_internal_r+0x1298>
   1bee0:	d8802217 	ldw	r2,136(sp)
   1bee4:	14c0000f 	ldh	r19,0(r2)
   1bee8:	10800104 	addi	r2,r2,4
   1beec:	d8802215 	stw	r2,136(sp)
   1bef0:	9829d7fa 	srai	r20,r19,31
   1bef4:	a005883a 	mov	r2,r20
   1bef8:	003d8506 	br	1b510 <__alt_data_end+0xfc01b510>
   1befc:	8880100c 	andi	r2,r17,64
   1bf00:	10002b26 	beq	r2,zero,1bfb0 <___vfiprintf_internal_r+0x1280>
   1bf04:	d8802217 	ldw	r2,136(sp)
   1bf08:	0029883a 	mov	r20,zero
   1bf0c:	14c0000b 	ldhu	r19,0(r2)
   1bf10:	10800104 	addi	r2,r2,4
   1bf14:	d8802215 	stw	r2,136(sp)
   1bf18:	003d5d06 	br	1b490 <__alt_data_end+0xfc01b490>
   1bf1c:	d9402017 	ldw	r5,128(sp)
   1bf20:	d9002117 	ldw	r4,132(sp)
   1bf24:	d9801a04 	addi	r6,sp,104
   1bf28:	d8c02a15 	stw	r3,168(sp)
   1bf2c:	d9c02b15 	stw	r7,172(sp)
   1bf30:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1bf34:	d8c02a17 	ldw	r3,168(sp)
   1bf38:	d9c02b17 	ldw	r7,172(sp)
   1bf3c:	103eb41e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1bf40:	d9001b17 	ldw	r4,108(sp)
   1bf44:	d8801c17 	ldw	r2,112(sp)
   1bf48:	d811883a 	mov	r8,sp
   1bf4c:	21400044 	addi	r5,r4,1
   1bf50:	003e6706 	br	1b8f0 <__alt_data_end+0xfc01b8f0>
   1bf54:	00bfffc4 	movi	r2,-1
   1bf58:	003c4a06 	br	1b084 <__alt_data_end+0xfc01b084>
   1bf5c:	9805883a 	mov	r2,r19
   1bf60:	003ee806 	br	1bb04 <__alt_data_end+0xfc01bb04>
   1bf64:	d8c02217 	ldw	r3,136(sp)
   1bf68:	0029883a 	mov	r20,zero
   1bf6c:	18800104 	addi	r2,r3,4
   1bf70:	1cc0000b 	ldhu	r19,0(r3)
   1bf74:	803f9e0e 	bge	r16,zero,1bdf0 <__alt_data_end+0xfc01bdf0>
   1bf78:	003dd706 	br	1b6d8 <__alt_data_end+0xfc01b6d8>
   1bf7c:	d8c02217 	ldw	r3,136(sp)
   1bf80:	d9002417 	ldw	r4,144(sp)
   1bf84:	18800017 	ldw	r2,0(r3)
   1bf88:	18c00104 	addi	r3,r3,4
   1bf8c:	d8c02215 	stw	r3,136(sp)
   1bf90:	11000015 	stw	r4,0(r2)
   1bf94:	003b9a06 	br	1ae00 <__alt_data_end+0xfc01ae00>
   1bf98:	d8c02217 	ldw	r3,136(sp)
   1bf9c:	0029883a 	mov	r20,zero
   1bfa0:	18800104 	addi	r2,r3,4
   1bfa4:	1cc0000b 	ldhu	r19,0(r3)
   1bfa8:	803db20e 	bge	r16,zero,1b674 <__alt_data_end+0xfc01b674>
   1bfac:	003fb906 	br	1be94 <__alt_data_end+0xfc01be94>
   1bfb0:	d9002217 	ldw	r4,136(sp)
   1bfb4:	0029883a 	mov	r20,zero
   1bfb8:	24c00017 	ldw	r19,0(r4)
   1bfbc:	21000104 	addi	r4,r4,4
   1bfc0:	d9002215 	stw	r4,136(sp)
   1bfc4:	003d3206 	br	1b490 <__alt_data_end+0xfc01b490>
   1bfc8:	d8c02217 	ldw	r3,136(sp)
   1bfcc:	1cc00017 	ldw	r19,0(r3)
   1bfd0:	18c00104 	addi	r3,r3,4
   1bfd4:	d8c02215 	stw	r3,136(sp)
   1bfd8:	9829d7fa 	srai	r20,r19,31
   1bfdc:	a005883a 	mov	r2,r20
   1bfe0:	003d4b06 	br	1b510 <__alt_data_end+0xfc01b510>
   1bfe4:	0009883a 	mov	r4,zero
   1bfe8:	01400044 	movi	r5,1
   1bfec:	d811883a 	mov	r8,sp
   1bff0:	003e4f06 	br	1b930 <__alt_data_end+0xfc01b930>
   1bff4:	d8c02215 	stw	r3,136(sp)
   1bff8:	002b883a 	mov	r21,zero
   1bffc:	003db806 	br	1b6e0 <__alt_data_end+0xfc01b6e0>
   1c000:	d811883a 	mov	r8,sp
   1c004:	003e9606 	br	1ba60 <__alt_data_end+0xfc01ba60>
   1c008:	010000f4 	movhi	r4,3
   1c00c:	212f2f04 	addi	r4,r4,-17220
   1c010:	d9002315 	stw	r4,140(sp)
   1c014:	003e6306 	br	1b9a4 <__alt_data_end+0xfc01b9a4>
   1c018:	b0c00043 	ldbu	r3,1(r22)
   1c01c:	8c400814 	ori	r17,r17,32
   1c020:	b5800044 	addi	r22,r22,1
   1c024:	18c03fcc 	andi	r3,r3,255
   1c028:	18c0201c 	xori	r3,r3,128
   1c02c:	18ffe004 	addi	r3,r3,-128
   1c030:	003b9c06 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1c034:	b809883a 	mov	r4,r23
   1c038:	da002a15 	stw	r8,168(sp)
   1c03c:	00106b00 	call	106b0 <strlen>
   1c040:	1029883a 	mov	r20,r2
   1c044:	dd401d83 	ldbu	r21,118(sp)
   1c048:	df002215 	stw	fp,136(sp)
   1c04c:	0021883a 	mov	r16,zero
   1c050:	da002a17 	ldw	r8,168(sp)
   1c054:	003c3906 	br	1b13c <__alt_data_end+0xfc01b13c>
   1c058:	d9402017 	ldw	r5,128(sp)
   1c05c:	d9002117 	ldw	r4,132(sp)
   1c060:	d9801a04 	addi	r6,sp,104
   1c064:	001ac1c0 	call	1ac1c <__sprint_r.part.0>
   1c068:	103e691e 	bne	r2,zero,1ba10 <__alt_data_end+0xfc01ba10>
   1c06c:	d9001b17 	ldw	r4,108(sp)
   1c070:	d8801c17 	ldw	r2,112(sp)
   1c074:	d811883a 	mov	r8,sp
   1c078:	21400044 	addi	r5,r4,1
   1c07c:	003e2e06 	br	1b938 <__alt_data_end+0xfc01b938>
   1c080:	010000f4 	movhi	r4,3
   1c084:	212f3304 	addi	r4,r4,-17204
   1c088:	d9002315 	stw	r4,140(sp)
   1c08c:	d9001b17 	ldw	r4,108(sp)
   1c090:	21000044 	addi	r4,r4,1
   1c094:	003c5e06 	br	1b210 <__alt_data_end+0xfc01b210>
   1c098:	002b883a 	mov	r21,zero
   1c09c:	00800084 	movi	r2,2
   1c0a0:	10803fcc 	andi	r2,r2,255
   1c0a4:	01000044 	movi	r4,1
   1c0a8:	11002b26 	beq	r2,r4,1c158 <___vfiprintf_internal_r+0x1428>
   1c0ac:	01000084 	movi	r4,2
   1c0b0:	11002b1e 	bne	r2,r4,1c160 <___vfiprintf_internal_r+0x1430>
   1c0b4:	1823883a 	mov	r17,r3
   1c0b8:	003ee506 	br	1bc50 <__alt_data_end+0xfc01bc50>
   1c0bc:	8807883a 	mov	r3,r17
   1c0c0:	00800044 	movi	r2,1
   1c0c4:	003ff606 	br	1c0a0 <__alt_data_end+0xfc01c0a0>
   1c0c8:	00800184 	movi	r2,6
   1c0cc:	1400012e 	bgeu	r2,r16,1c0d4 <___vfiprintf_internal_r+0x13a4>
   1c0d0:	1021883a 	mov	r16,r2
   1c0d4:	8029883a 	mov	r20,r16
   1c0d8:	8027883a 	mov	r19,r16
   1c0dc:	80002216 	blt	r16,zero,1c168 <___vfiprintf_internal_r+0x1438>
   1c0e0:	05c000f4 	movhi	r23,3
   1c0e4:	df002215 	stw	fp,136(sp)
   1c0e8:	bdeec404 	addi	r23,r23,-17648
   1c0ec:	003cfb06 	br	1b4dc <__alt_data_end+0xfc01b4dc>
   1c0f0:	d9002217 	ldw	r4,136(sp)
   1c0f4:	d9402417 	ldw	r5,144(sp)
   1c0f8:	20800017 	ldw	r2,0(r4)
   1c0fc:	21000104 	addi	r4,r4,4
   1c100:	d9002215 	stw	r4,136(sp)
   1c104:	11400015 	stw	r5,0(r2)
   1c108:	003b3d06 	br	1ae00 <__alt_data_end+0xfc01ae00>
   1c10c:	014000f4 	movhi	r5,3
   1c110:	296f3304 	addi	r5,r5,-17204
   1c114:	d9402315 	stw	r5,140(sp)
   1c118:	d9401b17 	ldw	r5,108(sp)
   1c11c:	29400044 	addi	r5,r5,1
   1c120:	003e6d06 	br	1bad8 <__alt_data_end+0xfc01bad8>
   1c124:	8029883a 	mov	r20,r16
   1c128:	dd401d83 	ldbu	r21,118(sp)
   1c12c:	df002215 	stw	fp,136(sp)
   1c130:	0021883a 	mov	r16,zero
   1c134:	003c0106 	br	1b13c <__alt_data_end+0xfc01b13c>
   1c138:	00c000f4 	movhi	r3,3
   1c13c:	18ef2f04 	addi	r3,r3,-17220
   1c140:	d8c02315 	stw	r3,140(sp)
   1c144:	280d883a 	mov	r6,r5
   1c148:	003c6906 	br	1b2f0 <__alt_data_end+0xfc01b2f0>
   1c14c:	802d883a 	mov	r22,r16
   1c150:	0021883a 	mov	r16,zero
   1c154:	003b5406 	br	1aea8 <__alt_data_end+0xfc01aea8>
   1c158:	1823883a 	mov	r17,r3
   1c15c:	003cf306 	br	1b52c <__alt_data_end+0xfc01b52c>
   1c160:	1823883a 	mov	r17,r3
   1c164:	003cad06 	br	1b41c <__alt_data_end+0xfc01b41c>
   1c168:	0027883a 	mov	r19,zero
   1c16c:	003fdc06 	br	1c0e0 <__alt_data_end+0xfc01c0e0>
   1c170:	d9402217 	ldw	r5,136(sp)
   1c174:	8005883a 	mov	r2,r16
   1c178:	b0c00043 	ldbu	r3,1(r22)
   1c17c:	2c000017 	ldw	r16,0(r5)
   1c180:	29000104 	addi	r4,r5,4
   1c184:	d9002215 	stw	r4,136(sp)
   1c188:	102d883a 	mov	r22,r2
   1c18c:	803fa50e 	bge	r16,zero,1c024 <__alt_data_end+0xfc01c024>
   1c190:	18c03fcc 	andi	r3,r3,255
   1c194:	18c0201c 	xori	r3,r3,128
   1c198:	043fffc4 	movi	r16,-1
   1c19c:	18ffe004 	addi	r3,r3,-128
   1c1a0:	003b4006 	br	1aea4 <__alt_data_end+0xfc01aea4>
   1c1a4:	d9402303 	ldbu	r5,140(sp)
   1c1a8:	d9401d85 	stb	r5,118(sp)
   1c1ac:	003cae06 	br	1b468 <__alt_data_end+0xfc01b468>
   1c1b0:	d8c02303 	ldbu	r3,140(sp)
   1c1b4:	d8c01d85 	stb	r3,118(sp)
   1c1b8:	003d1406 	br	1b60c <__alt_data_end+0xfc01b60c>
   1c1bc:	d8c02303 	ldbu	r3,140(sp)
   1c1c0:	d8c01d85 	stb	r3,118(sp)
   1c1c4:	003cca06 	br	1b4f0 <__alt_data_end+0xfc01b4f0>
   1c1c8:	8880004c 	andi	r2,r17,1
   1c1cc:	002b883a 	mov	r21,zero
   1c1d0:	10000526 	beq	r2,zero,1c1e8 <___vfiprintf_internal_r+0x14b8>
   1c1d4:	00800c04 	movi	r2,48
   1c1d8:	d88019c5 	stb	r2,103(sp)
   1c1dc:	dd002817 	ldw	r20,160(sp)
   1c1e0:	ddc019c4 	addi	r23,sp,103
   1c1e4:	003bd506 	br	1b13c <__alt_data_end+0xfc01b13c>
   1c1e8:	0029883a 	mov	r20,zero
   1c1ec:	ddc01a04 	addi	r23,sp,104
   1c1f0:	003bd206 	br	1b13c <__alt_data_end+0xfc01b13c>
   1c1f4:	d9002303 	ldbu	r4,140(sp)
   1c1f8:	d9001d85 	stb	r4,118(sp)
   1c1fc:	003da606 	br	1b898 <__alt_data_end+0xfc01b898>
   1c200:	d8c02303 	ldbu	r3,140(sp)
   1c204:	d8c01d85 	stb	r3,118(sp)
   1c208:	003c7606 	br	1b3e4 <__alt_data_end+0xfc01b3e4>
   1c20c:	d8c02303 	ldbu	r3,140(sp)
   1c210:	d8c01d85 	stb	r3,118(sp)
   1c214:	003c6506 	br	1b3ac <__alt_data_end+0xfc01b3ac>
   1c218:	d9002303 	ldbu	r4,140(sp)
   1c21c:	d9001d85 	stb	r4,118(sp)
   1c220:	003d3d06 	br	1b718 <__alt_data_end+0xfc01b718>
   1c224:	d8c02303 	ldbu	r3,140(sp)
   1c228:	d8c01d85 	stb	r3,118(sp)
   1c22c:	003d1d06 	br	1b6a4 <__alt_data_end+0xfc01b6a4>
   1c230:	d8c02303 	ldbu	r3,140(sp)
   1c234:	d8c01d85 	stb	r3,118(sp)
   1c238:	003d0306 	br	1b648 <__alt_data_end+0xfc01b648>

0001c23c <__vfiprintf_internal>:
   1c23c:	008000f4 	movhi	r2,3
   1c240:	10bbbb04 	addi	r2,r2,-4372
   1c244:	300f883a 	mov	r7,r6
   1c248:	280d883a 	mov	r6,r5
   1c24c:	200b883a 	mov	r5,r4
   1c250:	11000017 	ldw	r4,0(r2)
   1c254:	001ad301 	jmpi	1ad30 <___vfiprintf_internal_r>

0001c258 <__sbprintf>:
   1c258:	2880030b 	ldhu	r2,12(r5)
   1c25c:	2ac01917 	ldw	r11,100(r5)
   1c260:	2a80038b 	ldhu	r10,14(r5)
   1c264:	2a400717 	ldw	r9,28(r5)
   1c268:	2a000917 	ldw	r8,36(r5)
   1c26c:	defee204 	addi	sp,sp,-1144
   1c270:	00c10004 	movi	r3,1024
   1c274:	dc011a15 	stw	r16,1128(sp)
   1c278:	10bfff4c 	andi	r2,r2,65533
   1c27c:	2821883a 	mov	r16,r5
   1c280:	d8cb883a 	add	r5,sp,r3
   1c284:	dc811c15 	stw	r18,1136(sp)
   1c288:	dc411b15 	stw	r17,1132(sp)
   1c28c:	dfc11d15 	stw	ra,1140(sp)
   1c290:	2025883a 	mov	r18,r4
   1c294:	d881030d 	sth	r2,1036(sp)
   1c298:	dac11915 	stw	r11,1124(sp)
   1c29c:	da81038d 	sth	r10,1038(sp)
   1c2a0:	da410715 	stw	r9,1052(sp)
   1c2a4:	da010915 	stw	r8,1060(sp)
   1c2a8:	dec10015 	stw	sp,1024(sp)
   1c2ac:	dec10415 	stw	sp,1040(sp)
   1c2b0:	d8c10215 	stw	r3,1032(sp)
   1c2b4:	d8c10515 	stw	r3,1044(sp)
   1c2b8:	d8010615 	stw	zero,1048(sp)
   1c2bc:	001ad300 	call	1ad30 <___vfiprintf_internal_r>
   1c2c0:	1023883a 	mov	r17,r2
   1c2c4:	10000416 	blt	r2,zero,1c2d8 <__sbprintf+0x80>
   1c2c8:	d9410004 	addi	r5,sp,1024
   1c2cc:	9009883a 	mov	r4,r18
   1c2d0:	00169e00 	call	169e0 <_fflush_r>
   1c2d4:	10000d1e 	bne	r2,zero,1c30c <__sbprintf+0xb4>
   1c2d8:	d881030b 	ldhu	r2,1036(sp)
   1c2dc:	1080100c 	andi	r2,r2,64
   1c2e0:	10000326 	beq	r2,zero,1c2f0 <__sbprintf+0x98>
   1c2e4:	8080030b 	ldhu	r2,12(r16)
   1c2e8:	10801014 	ori	r2,r2,64
   1c2ec:	8080030d 	sth	r2,12(r16)
   1c2f0:	8805883a 	mov	r2,r17
   1c2f4:	dfc11d17 	ldw	ra,1140(sp)
   1c2f8:	dc811c17 	ldw	r18,1136(sp)
   1c2fc:	dc411b17 	ldw	r17,1132(sp)
   1c300:	dc011a17 	ldw	r16,1128(sp)
   1c304:	dec11e04 	addi	sp,sp,1144
   1c308:	f800283a 	ret
   1c30c:	047fffc4 	movi	r17,-1
   1c310:	003ff106 	br	1c2d8 <__alt_data_end+0xfc01c2d8>

0001c314 <__swbuf_r>:
   1c314:	defffb04 	addi	sp,sp,-20
   1c318:	dcc00315 	stw	r19,12(sp)
   1c31c:	dc800215 	stw	r18,8(sp)
   1c320:	dc000015 	stw	r16,0(sp)
   1c324:	dfc00415 	stw	ra,16(sp)
   1c328:	dc400115 	stw	r17,4(sp)
   1c32c:	2025883a 	mov	r18,r4
   1c330:	2827883a 	mov	r19,r5
   1c334:	3021883a 	mov	r16,r6
   1c338:	20000226 	beq	r4,zero,1c344 <__swbuf_r+0x30>
   1c33c:	20800e17 	ldw	r2,56(r4)
   1c340:	10004226 	beq	r2,zero,1c44c <__swbuf_r+0x138>
   1c344:	80800617 	ldw	r2,24(r16)
   1c348:	8100030b 	ldhu	r4,12(r16)
   1c34c:	80800215 	stw	r2,8(r16)
   1c350:	2080020c 	andi	r2,r4,8
   1c354:	10003626 	beq	r2,zero,1c430 <__swbuf_r+0x11c>
   1c358:	80c00417 	ldw	r3,16(r16)
   1c35c:	18003426 	beq	r3,zero,1c430 <__swbuf_r+0x11c>
   1c360:	2088000c 	andi	r2,r4,8192
   1c364:	9c403fcc 	andi	r17,r19,255
   1c368:	10001a26 	beq	r2,zero,1c3d4 <__swbuf_r+0xc0>
   1c36c:	80800017 	ldw	r2,0(r16)
   1c370:	81000517 	ldw	r4,20(r16)
   1c374:	10c7c83a 	sub	r3,r2,r3
   1c378:	1900200e 	bge	r3,r4,1c3fc <__swbuf_r+0xe8>
   1c37c:	18c00044 	addi	r3,r3,1
   1c380:	81000217 	ldw	r4,8(r16)
   1c384:	11400044 	addi	r5,r2,1
   1c388:	81400015 	stw	r5,0(r16)
   1c38c:	213fffc4 	addi	r4,r4,-1
   1c390:	81000215 	stw	r4,8(r16)
   1c394:	14c00005 	stb	r19,0(r2)
   1c398:	80800517 	ldw	r2,20(r16)
   1c39c:	10c01e26 	beq	r2,r3,1c418 <__swbuf_r+0x104>
   1c3a0:	8080030b 	ldhu	r2,12(r16)
   1c3a4:	1080004c 	andi	r2,r2,1
   1c3a8:	10000226 	beq	r2,zero,1c3b4 <__swbuf_r+0xa0>
   1c3ac:	00800284 	movi	r2,10
   1c3b0:	88801926 	beq	r17,r2,1c418 <__swbuf_r+0x104>
   1c3b4:	8805883a 	mov	r2,r17
   1c3b8:	dfc00417 	ldw	ra,16(sp)
   1c3bc:	dcc00317 	ldw	r19,12(sp)
   1c3c0:	dc800217 	ldw	r18,8(sp)
   1c3c4:	dc400117 	ldw	r17,4(sp)
   1c3c8:	dc000017 	ldw	r16,0(sp)
   1c3cc:	dec00504 	addi	sp,sp,20
   1c3d0:	f800283a 	ret
   1c3d4:	81401917 	ldw	r5,100(r16)
   1c3d8:	00b7ffc4 	movi	r2,-8193
   1c3dc:	21080014 	ori	r4,r4,8192
   1c3e0:	2884703a 	and	r2,r5,r2
   1c3e4:	80801915 	stw	r2,100(r16)
   1c3e8:	80800017 	ldw	r2,0(r16)
   1c3ec:	8100030d 	sth	r4,12(r16)
   1c3f0:	81000517 	ldw	r4,20(r16)
   1c3f4:	10c7c83a 	sub	r3,r2,r3
   1c3f8:	193fe016 	blt	r3,r4,1c37c <__alt_data_end+0xfc01c37c>
   1c3fc:	800b883a 	mov	r5,r16
   1c400:	9009883a 	mov	r4,r18
   1c404:	00169e00 	call	169e0 <_fflush_r>
   1c408:	1000071e 	bne	r2,zero,1c428 <__swbuf_r+0x114>
   1c40c:	80800017 	ldw	r2,0(r16)
   1c410:	00c00044 	movi	r3,1
   1c414:	003fda06 	br	1c380 <__alt_data_end+0xfc01c380>
   1c418:	800b883a 	mov	r5,r16
   1c41c:	9009883a 	mov	r4,r18
   1c420:	00169e00 	call	169e0 <_fflush_r>
   1c424:	103fe326 	beq	r2,zero,1c3b4 <__alt_data_end+0xfc01c3b4>
   1c428:	00bfffc4 	movi	r2,-1
   1c42c:	003fe206 	br	1c3b8 <__alt_data_end+0xfc01c3b8>
   1c430:	800b883a 	mov	r5,r16
   1c434:	9009883a 	mov	r4,r18
   1c438:	0014dc00 	call	14dc0 <__swsetup_r>
   1c43c:	103ffa1e 	bne	r2,zero,1c428 <__alt_data_end+0xfc01c428>
   1c440:	8100030b 	ldhu	r4,12(r16)
   1c444:	80c00417 	ldw	r3,16(r16)
   1c448:	003fc506 	br	1c360 <__alt_data_end+0xfc01c360>
   1c44c:	0016dcc0 	call	16dcc <__sinit>
   1c450:	003fbc06 	br	1c344 <__alt_data_end+0xfc01c344>

0001c454 <__swbuf>:
   1c454:	008000f4 	movhi	r2,3
   1c458:	10bbbb04 	addi	r2,r2,-4372
   1c45c:	280d883a 	mov	r6,r5
   1c460:	200b883a 	mov	r5,r4
   1c464:	11000017 	ldw	r4,0(r2)
   1c468:	001c3141 	jmpi	1c314 <__swbuf_r>

0001c46c <_write_r>:
   1c46c:	defffd04 	addi	sp,sp,-12
   1c470:	2805883a 	mov	r2,r5
   1c474:	dc000015 	stw	r16,0(sp)
   1c478:	040000f4 	movhi	r16,3
   1c47c:	dc400115 	stw	r17,4(sp)
   1c480:	300b883a 	mov	r5,r6
   1c484:	84085604 	addi	r16,r16,8536
   1c488:	2023883a 	mov	r17,r4
   1c48c:	380d883a 	mov	r6,r7
   1c490:	1009883a 	mov	r4,r2
   1c494:	dfc00215 	stw	ra,8(sp)
   1c498:	80000015 	stw	zero,0(r16)
   1c49c:	0020b980 	call	20b98 <write>
   1c4a0:	00ffffc4 	movi	r3,-1
   1c4a4:	10c00526 	beq	r2,r3,1c4bc <_write_r+0x50>
   1c4a8:	dfc00217 	ldw	ra,8(sp)
   1c4ac:	dc400117 	ldw	r17,4(sp)
   1c4b0:	dc000017 	ldw	r16,0(sp)
   1c4b4:	dec00304 	addi	sp,sp,12
   1c4b8:	f800283a 	ret
   1c4bc:	80c00017 	ldw	r3,0(r16)
   1c4c0:	183ff926 	beq	r3,zero,1c4a8 <__alt_data_end+0xfc01c4a8>
   1c4c4:	88c00015 	stw	r3,0(r17)
   1c4c8:	003ff706 	br	1c4a8 <__alt_data_end+0xfc01c4a8>

0001c4cc <_close_r>:
   1c4cc:	defffd04 	addi	sp,sp,-12
   1c4d0:	dc000015 	stw	r16,0(sp)
   1c4d4:	040000f4 	movhi	r16,3
   1c4d8:	dc400115 	stw	r17,4(sp)
   1c4dc:	84085604 	addi	r16,r16,8536
   1c4e0:	2023883a 	mov	r17,r4
   1c4e4:	2809883a 	mov	r4,r5
   1c4e8:	dfc00215 	stw	ra,8(sp)
   1c4ec:	80000015 	stw	zero,0(r16)
   1c4f0:	002009c0 	call	2009c <close>
   1c4f4:	00ffffc4 	movi	r3,-1
   1c4f8:	10c00526 	beq	r2,r3,1c510 <_close_r+0x44>
   1c4fc:	dfc00217 	ldw	ra,8(sp)
   1c500:	dc400117 	ldw	r17,4(sp)
   1c504:	dc000017 	ldw	r16,0(sp)
   1c508:	dec00304 	addi	sp,sp,12
   1c50c:	f800283a 	ret
   1c510:	80c00017 	ldw	r3,0(r16)
   1c514:	183ff926 	beq	r3,zero,1c4fc <__alt_data_end+0xfc01c4fc>
   1c518:	88c00015 	stw	r3,0(r17)
   1c51c:	003ff706 	br	1c4fc <__alt_data_end+0xfc01c4fc>

0001c520 <_calloc_r>:
   1c520:	defffe04 	addi	sp,sp,-8
   1c524:	2805883a 	mov	r2,r5
   1c528:	dc000015 	stw	r16,0(sp)
   1c52c:	300b883a 	mov	r5,r6
   1c530:	2021883a 	mov	r16,r4
   1c534:	1009883a 	mov	r4,r2
   1c538:	dfc00115 	stw	ra,4(sp)
   1c53c:	000d9380 	call	d938 <__mulsi3>
   1c540:	100b883a 	mov	r5,r2
   1c544:	8009883a 	mov	r4,r16
   1c548:	000f5dc0 	call	f5dc <_malloc_r>
   1c54c:	10002926 	beq	r2,zero,1c5f4 <_calloc_r+0xd4>
   1c550:	11bfff17 	ldw	r6,-4(r2)
   1c554:	1021883a 	mov	r16,r2
   1c558:	00bfff04 	movi	r2,-4
   1c55c:	308c703a 	and	r6,r6,r2
   1c560:	00c00904 	movi	r3,36
   1c564:	308d883a 	add	r6,r6,r2
   1c568:	19801636 	bltu	r3,r6,1c5c4 <_calloc_r+0xa4>
   1c56c:	008004c4 	movi	r2,19
   1c570:	11800b2e 	bgeu	r2,r6,1c5a0 <_calloc_r+0x80>
   1c574:	80000015 	stw	zero,0(r16)
   1c578:	80000115 	stw	zero,4(r16)
   1c57c:	008006c4 	movi	r2,27
   1c580:	11801a2e 	bgeu	r2,r6,1c5ec <_calloc_r+0xcc>
   1c584:	80000215 	stw	zero,8(r16)
   1c588:	80000315 	stw	zero,12(r16)
   1c58c:	30c0151e 	bne	r6,r3,1c5e4 <_calloc_r+0xc4>
   1c590:	80000415 	stw	zero,16(r16)
   1c594:	80800604 	addi	r2,r16,24
   1c598:	80000515 	stw	zero,20(r16)
   1c59c:	00000106 	br	1c5a4 <_calloc_r+0x84>
   1c5a0:	8005883a 	mov	r2,r16
   1c5a4:	10000015 	stw	zero,0(r2)
   1c5a8:	10000115 	stw	zero,4(r2)
   1c5ac:	10000215 	stw	zero,8(r2)
   1c5b0:	8005883a 	mov	r2,r16
   1c5b4:	dfc00117 	ldw	ra,4(sp)
   1c5b8:	dc000017 	ldw	r16,0(sp)
   1c5bc:	dec00204 	addi	sp,sp,8
   1c5c0:	f800283a 	ret
   1c5c4:	000b883a 	mov	r5,zero
   1c5c8:	8009883a 	mov	r4,r16
   1c5cc:	000ff300 	call	ff30 <memset>
   1c5d0:	8005883a 	mov	r2,r16
   1c5d4:	dfc00117 	ldw	ra,4(sp)
   1c5d8:	dc000017 	ldw	r16,0(sp)
   1c5dc:	dec00204 	addi	sp,sp,8
   1c5e0:	f800283a 	ret
   1c5e4:	80800404 	addi	r2,r16,16
   1c5e8:	003fee06 	br	1c5a4 <__alt_data_end+0xfc01c5a4>
   1c5ec:	80800204 	addi	r2,r16,8
   1c5f0:	003fec06 	br	1c5a4 <__alt_data_end+0xfc01c5a4>
   1c5f4:	0005883a 	mov	r2,zero
   1c5f8:	003fee06 	br	1c5b4 <__alt_data_end+0xfc01c5b4>

0001c5fc <_fclose_r>:
   1c5fc:	28003926 	beq	r5,zero,1c6e4 <_fclose_r+0xe8>
   1c600:	defffc04 	addi	sp,sp,-16
   1c604:	dc400115 	stw	r17,4(sp)
   1c608:	dc000015 	stw	r16,0(sp)
   1c60c:	dfc00315 	stw	ra,12(sp)
   1c610:	dc800215 	stw	r18,8(sp)
   1c614:	2023883a 	mov	r17,r4
   1c618:	2821883a 	mov	r16,r5
   1c61c:	20000226 	beq	r4,zero,1c628 <_fclose_r+0x2c>
   1c620:	20800e17 	ldw	r2,56(r4)
   1c624:	10002726 	beq	r2,zero,1c6c4 <_fclose_r+0xc8>
   1c628:	8080030f 	ldh	r2,12(r16)
   1c62c:	1000071e 	bne	r2,zero,1c64c <_fclose_r+0x50>
   1c630:	0005883a 	mov	r2,zero
   1c634:	dfc00317 	ldw	ra,12(sp)
   1c638:	dc800217 	ldw	r18,8(sp)
   1c63c:	dc400117 	ldw	r17,4(sp)
   1c640:	dc000017 	ldw	r16,0(sp)
   1c644:	dec00404 	addi	sp,sp,16
   1c648:	f800283a 	ret
   1c64c:	800b883a 	mov	r5,r16
   1c650:	8809883a 	mov	r4,r17
   1c654:	00167c40 	call	167c4 <__sflush_r>
   1c658:	1025883a 	mov	r18,r2
   1c65c:	80800b17 	ldw	r2,44(r16)
   1c660:	10000426 	beq	r2,zero,1c674 <_fclose_r+0x78>
   1c664:	81400717 	ldw	r5,28(r16)
   1c668:	8809883a 	mov	r4,r17
   1c66c:	103ee83a 	callr	r2
   1c670:	10001616 	blt	r2,zero,1c6cc <_fclose_r+0xd0>
   1c674:	8080030b 	ldhu	r2,12(r16)
   1c678:	1080200c 	andi	r2,r2,128
   1c67c:	1000151e 	bne	r2,zero,1c6d4 <_fclose_r+0xd8>
   1c680:	81400c17 	ldw	r5,48(r16)
   1c684:	28000526 	beq	r5,zero,1c69c <_fclose_r+0xa0>
   1c688:	80801004 	addi	r2,r16,64
   1c68c:	28800226 	beq	r5,r2,1c698 <_fclose_r+0x9c>
   1c690:	8809883a 	mov	r4,r17
   1c694:	0016f400 	call	16f40 <_free_r>
   1c698:	80000c15 	stw	zero,48(r16)
   1c69c:	81401117 	ldw	r5,68(r16)
   1c6a0:	28000326 	beq	r5,zero,1c6b0 <_fclose_r+0xb4>
   1c6a4:	8809883a 	mov	r4,r17
   1c6a8:	0016f400 	call	16f40 <_free_r>
   1c6ac:	80001115 	stw	zero,68(r16)
   1c6b0:	0016ddc0 	call	16ddc <__sfp_lock_acquire>
   1c6b4:	8000030d 	sth	zero,12(r16)
   1c6b8:	0016de00 	call	16de0 <__sfp_lock_release>
   1c6bc:	9005883a 	mov	r2,r18
   1c6c0:	003fdc06 	br	1c634 <__alt_data_end+0xfc01c634>
   1c6c4:	0016dcc0 	call	16dcc <__sinit>
   1c6c8:	003fd706 	br	1c628 <__alt_data_end+0xfc01c628>
   1c6cc:	04bfffc4 	movi	r18,-1
   1c6d0:	003fe806 	br	1c674 <__alt_data_end+0xfc01c674>
   1c6d4:	81400417 	ldw	r5,16(r16)
   1c6d8:	8809883a 	mov	r4,r17
   1c6dc:	0016f400 	call	16f40 <_free_r>
   1c6e0:	003fe706 	br	1c680 <__alt_data_end+0xfc01c680>
   1c6e4:	0005883a 	mov	r2,zero
   1c6e8:	f800283a 	ret

0001c6ec <fclose>:
   1c6ec:	008000f4 	movhi	r2,3
   1c6f0:	10bbbb04 	addi	r2,r2,-4372
   1c6f4:	200b883a 	mov	r5,r4
   1c6f8:	11000017 	ldw	r4,0(r2)
   1c6fc:	001c5fc1 	jmpi	1c5fc <_fclose_r>

0001c700 <__fputwc>:
   1c700:	defff804 	addi	sp,sp,-32
   1c704:	dcc00415 	stw	r19,16(sp)
   1c708:	dc800315 	stw	r18,12(sp)
   1c70c:	dc000115 	stw	r16,4(sp)
   1c710:	dfc00715 	stw	ra,28(sp)
   1c714:	dd400615 	stw	r21,24(sp)
   1c718:	dd000515 	stw	r20,20(sp)
   1c71c:	dc400215 	stw	r17,8(sp)
   1c720:	2027883a 	mov	r19,r4
   1c724:	2825883a 	mov	r18,r5
   1c728:	3021883a 	mov	r16,r6
   1c72c:	00179280 	call	17928 <__locale_mb_cur_max>
   1c730:	00c00044 	movi	r3,1
   1c734:	10c03e26 	beq	r2,r3,1c830 <__fputwc+0x130>
   1c738:	81c01704 	addi	r7,r16,92
   1c73c:	900d883a 	mov	r6,r18
   1c740:	d80b883a 	mov	r5,sp
   1c744:	9809883a 	mov	r4,r19
   1c748:	001ca780 	call	1ca78 <_wcrtomb_r>
   1c74c:	1029883a 	mov	r20,r2
   1c750:	00bfffc4 	movi	r2,-1
   1c754:	a0802026 	beq	r20,r2,1c7d8 <__fputwc+0xd8>
   1c758:	d9400003 	ldbu	r5,0(sp)
   1c75c:	a0001c26 	beq	r20,zero,1c7d0 <__fputwc+0xd0>
   1c760:	0023883a 	mov	r17,zero
   1c764:	05400284 	movi	r21,10
   1c768:	00000906 	br	1c790 <__fputwc+0x90>
   1c76c:	80800017 	ldw	r2,0(r16)
   1c770:	11400005 	stb	r5,0(r2)
   1c774:	80c00017 	ldw	r3,0(r16)
   1c778:	18c00044 	addi	r3,r3,1
   1c77c:	80c00015 	stw	r3,0(r16)
   1c780:	8c400044 	addi	r17,r17,1
   1c784:	dc45883a 	add	r2,sp,r17
   1c788:	8d00112e 	bgeu	r17,r20,1c7d0 <__fputwc+0xd0>
   1c78c:	11400003 	ldbu	r5,0(r2)
   1c790:	80c00217 	ldw	r3,8(r16)
   1c794:	18ffffc4 	addi	r3,r3,-1
   1c798:	80c00215 	stw	r3,8(r16)
   1c79c:	183ff30e 	bge	r3,zero,1c76c <__alt_data_end+0xfc01c76c>
   1c7a0:	80800617 	ldw	r2,24(r16)
   1c7a4:	18801916 	blt	r3,r2,1c80c <__fputwc+0x10c>
   1c7a8:	80800017 	ldw	r2,0(r16)
   1c7ac:	11400005 	stb	r5,0(r2)
   1c7b0:	80800017 	ldw	r2,0(r16)
   1c7b4:	10c00003 	ldbu	r3,0(r2)
   1c7b8:	10800044 	addi	r2,r2,1
   1c7bc:	1d402326 	beq	r3,r21,1c84c <__fputwc+0x14c>
   1c7c0:	80800015 	stw	r2,0(r16)
   1c7c4:	8c400044 	addi	r17,r17,1
   1c7c8:	dc45883a 	add	r2,sp,r17
   1c7cc:	8d3fef36 	bltu	r17,r20,1c78c <__alt_data_end+0xfc01c78c>
   1c7d0:	9005883a 	mov	r2,r18
   1c7d4:	00000406 	br	1c7e8 <__fputwc+0xe8>
   1c7d8:	80c0030b 	ldhu	r3,12(r16)
   1c7dc:	a005883a 	mov	r2,r20
   1c7e0:	18c01014 	ori	r3,r3,64
   1c7e4:	80c0030d 	sth	r3,12(r16)
   1c7e8:	dfc00717 	ldw	ra,28(sp)
   1c7ec:	dd400617 	ldw	r21,24(sp)
   1c7f0:	dd000517 	ldw	r20,20(sp)
   1c7f4:	dcc00417 	ldw	r19,16(sp)
   1c7f8:	dc800317 	ldw	r18,12(sp)
   1c7fc:	dc400217 	ldw	r17,8(sp)
   1c800:	dc000117 	ldw	r16,4(sp)
   1c804:	dec00804 	addi	sp,sp,32
   1c808:	f800283a 	ret
   1c80c:	800d883a 	mov	r6,r16
   1c810:	29403fcc 	andi	r5,r5,255
   1c814:	9809883a 	mov	r4,r19
   1c818:	001c3140 	call	1c314 <__swbuf_r>
   1c81c:	10bfffe0 	cmpeqi	r2,r2,-1
   1c820:	10803fcc 	andi	r2,r2,255
   1c824:	103fd626 	beq	r2,zero,1c780 <__alt_data_end+0xfc01c780>
   1c828:	00bfffc4 	movi	r2,-1
   1c82c:	003fee06 	br	1c7e8 <__alt_data_end+0xfc01c7e8>
   1c830:	90ffffc4 	addi	r3,r18,-1
   1c834:	01003f84 	movi	r4,254
   1c838:	20ffbf36 	bltu	r4,r3,1c738 <__alt_data_end+0xfc01c738>
   1c83c:	900b883a 	mov	r5,r18
   1c840:	dc800005 	stb	r18,0(sp)
   1c844:	1029883a 	mov	r20,r2
   1c848:	003fc506 	br	1c760 <__alt_data_end+0xfc01c760>
   1c84c:	800d883a 	mov	r6,r16
   1c850:	a80b883a 	mov	r5,r21
   1c854:	9809883a 	mov	r4,r19
   1c858:	001c3140 	call	1c314 <__swbuf_r>
   1c85c:	10bfffe0 	cmpeqi	r2,r2,-1
   1c860:	003fef06 	br	1c820 <__alt_data_end+0xfc01c820>

0001c864 <_fputwc_r>:
   1c864:	3080030b 	ldhu	r2,12(r6)
   1c868:	10c8000c 	andi	r3,r2,8192
   1c86c:	1800051e 	bne	r3,zero,1c884 <_fputwc_r+0x20>
   1c870:	30c01917 	ldw	r3,100(r6)
   1c874:	10880014 	ori	r2,r2,8192
   1c878:	3080030d 	sth	r2,12(r6)
   1c87c:	18880014 	ori	r2,r3,8192
   1c880:	30801915 	stw	r2,100(r6)
   1c884:	001c7001 	jmpi	1c700 <__fputwc>

0001c888 <fputwc>:
   1c888:	008000f4 	movhi	r2,3
   1c88c:	defffc04 	addi	sp,sp,-16
   1c890:	10bbbb04 	addi	r2,r2,-4372
   1c894:	dc000115 	stw	r16,4(sp)
   1c898:	14000017 	ldw	r16,0(r2)
   1c89c:	dc400215 	stw	r17,8(sp)
   1c8a0:	dfc00315 	stw	ra,12(sp)
   1c8a4:	2023883a 	mov	r17,r4
   1c8a8:	80000226 	beq	r16,zero,1c8b4 <fputwc+0x2c>
   1c8ac:	80800e17 	ldw	r2,56(r16)
   1c8b0:	10001026 	beq	r2,zero,1c8f4 <fputwc+0x6c>
   1c8b4:	2880030b 	ldhu	r2,12(r5)
   1c8b8:	10c8000c 	andi	r3,r2,8192
   1c8bc:	1800051e 	bne	r3,zero,1c8d4 <fputwc+0x4c>
   1c8c0:	28c01917 	ldw	r3,100(r5)
   1c8c4:	10880014 	ori	r2,r2,8192
   1c8c8:	2880030d 	sth	r2,12(r5)
   1c8cc:	18880014 	ori	r2,r3,8192
   1c8d0:	28801915 	stw	r2,100(r5)
   1c8d4:	280d883a 	mov	r6,r5
   1c8d8:	8009883a 	mov	r4,r16
   1c8dc:	880b883a 	mov	r5,r17
   1c8e0:	dfc00317 	ldw	ra,12(sp)
   1c8e4:	dc400217 	ldw	r17,8(sp)
   1c8e8:	dc000117 	ldw	r16,4(sp)
   1c8ec:	dec00404 	addi	sp,sp,16
   1c8f0:	001c7001 	jmpi	1c700 <__fputwc>
   1c8f4:	8009883a 	mov	r4,r16
   1c8f8:	d9400015 	stw	r5,0(sp)
   1c8fc:	0016dcc0 	call	16dcc <__sinit>
   1c900:	d9400017 	ldw	r5,0(sp)
   1c904:	003feb06 	br	1c8b4 <__alt_data_end+0xfc01c8b4>

0001c908 <_fstat_r>:
   1c908:	defffd04 	addi	sp,sp,-12
   1c90c:	2805883a 	mov	r2,r5
   1c910:	dc000015 	stw	r16,0(sp)
   1c914:	040000f4 	movhi	r16,3
   1c918:	dc400115 	stw	r17,4(sp)
   1c91c:	84085604 	addi	r16,r16,8536
   1c920:	2023883a 	mov	r17,r4
   1c924:	300b883a 	mov	r5,r6
   1c928:	1009883a 	mov	r4,r2
   1c92c:	dfc00215 	stw	ra,8(sp)
   1c930:	80000015 	stw	zero,0(r16)
   1c934:	00202100 	call	20210 <fstat>
   1c938:	00ffffc4 	movi	r3,-1
   1c93c:	10c00526 	beq	r2,r3,1c954 <_fstat_r+0x4c>
   1c940:	dfc00217 	ldw	ra,8(sp)
   1c944:	dc400117 	ldw	r17,4(sp)
   1c948:	dc000017 	ldw	r16,0(sp)
   1c94c:	dec00304 	addi	sp,sp,12
   1c950:	f800283a 	ret
   1c954:	80c00017 	ldw	r3,0(r16)
   1c958:	183ff926 	beq	r3,zero,1c940 <__alt_data_end+0xfc01c940>
   1c95c:	88c00015 	stw	r3,0(r17)
   1c960:	003ff706 	br	1c940 <__alt_data_end+0xfc01c940>

0001c964 <_isatty_r>:
   1c964:	defffd04 	addi	sp,sp,-12
   1c968:	dc000015 	stw	r16,0(sp)
   1c96c:	040000f4 	movhi	r16,3
   1c970:	dc400115 	stw	r17,4(sp)
   1c974:	84085604 	addi	r16,r16,8536
   1c978:	2023883a 	mov	r17,r4
   1c97c:	2809883a 	mov	r4,r5
   1c980:	dfc00215 	stw	ra,8(sp)
   1c984:	80000015 	stw	zero,0(r16)
   1c988:	00203240 	call	20324 <isatty>
   1c98c:	00ffffc4 	movi	r3,-1
   1c990:	10c00526 	beq	r2,r3,1c9a8 <_isatty_r+0x44>
   1c994:	dfc00217 	ldw	ra,8(sp)
   1c998:	dc400117 	ldw	r17,4(sp)
   1c99c:	dc000017 	ldw	r16,0(sp)
   1c9a0:	dec00304 	addi	sp,sp,12
   1c9a4:	f800283a 	ret
   1c9a8:	80c00017 	ldw	r3,0(r16)
   1c9ac:	183ff926 	beq	r3,zero,1c994 <__alt_data_end+0xfc01c994>
   1c9b0:	88c00015 	stw	r3,0(r17)
   1c9b4:	003ff706 	br	1c994 <__alt_data_end+0xfc01c994>

0001c9b8 <_lseek_r>:
   1c9b8:	defffd04 	addi	sp,sp,-12
   1c9bc:	2805883a 	mov	r2,r5
   1c9c0:	dc000015 	stw	r16,0(sp)
   1c9c4:	040000f4 	movhi	r16,3
   1c9c8:	dc400115 	stw	r17,4(sp)
   1c9cc:	300b883a 	mov	r5,r6
   1c9d0:	84085604 	addi	r16,r16,8536
   1c9d4:	2023883a 	mov	r17,r4
   1c9d8:	380d883a 	mov	r6,r7
   1c9dc:	1009883a 	mov	r4,r2
   1c9e0:	dfc00215 	stw	ra,8(sp)
   1c9e4:	80000015 	stw	zero,0(r16)
   1c9e8:	00206640 	call	20664 <lseek>
   1c9ec:	00ffffc4 	movi	r3,-1
   1c9f0:	10c00526 	beq	r2,r3,1ca08 <_lseek_r+0x50>
   1c9f4:	dfc00217 	ldw	ra,8(sp)
   1c9f8:	dc400117 	ldw	r17,4(sp)
   1c9fc:	dc000017 	ldw	r16,0(sp)
   1ca00:	dec00304 	addi	sp,sp,12
   1ca04:	f800283a 	ret
   1ca08:	80c00017 	ldw	r3,0(r16)
   1ca0c:	183ff926 	beq	r3,zero,1c9f4 <__alt_data_end+0xfc01c9f4>
   1ca10:	88c00015 	stw	r3,0(r17)
   1ca14:	003ff706 	br	1c9f4 <__alt_data_end+0xfc01c9f4>

0001ca18 <_read_r>:
   1ca18:	defffd04 	addi	sp,sp,-12
   1ca1c:	2805883a 	mov	r2,r5
   1ca20:	dc000015 	stw	r16,0(sp)
   1ca24:	040000f4 	movhi	r16,3
   1ca28:	dc400115 	stw	r17,4(sp)
   1ca2c:	300b883a 	mov	r5,r6
   1ca30:	84085604 	addi	r16,r16,8536
   1ca34:	2023883a 	mov	r17,r4
   1ca38:	380d883a 	mov	r6,r7
   1ca3c:	1009883a 	mov	r4,r2
   1ca40:	dfc00215 	stw	ra,8(sp)
   1ca44:	80000015 	stw	zero,0(r16)
   1ca48:	00208400 	call	20840 <read>
   1ca4c:	00ffffc4 	movi	r3,-1
   1ca50:	10c00526 	beq	r2,r3,1ca68 <_read_r+0x50>
   1ca54:	dfc00217 	ldw	ra,8(sp)
   1ca58:	dc400117 	ldw	r17,4(sp)
   1ca5c:	dc000017 	ldw	r16,0(sp)
   1ca60:	dec00304 	addi	sp,sp,12
   1ca64:	f800283a 	ret
   1ca68:	80c00017 	ldw	r3,0(r16)
   1ca6c:	183ff926 	beq	r3,zero,1ca54 <__alt_data_end+0xfc01ca54>
   1ca70:	88c00015 	stw	r3,0(r17)
   1ca74:	003ff706 	br	1ca54 <__alt_data_end+0xfc01ca54>

0001ca78 <_wcrtomb_r>:
   1ca78:	defff604 	addi	sp,sp,-40
   1ca7c:	008000f4 	movhi	r2,3
   1ca80:	dc800815 	stw	r18,32(sp)
   1ca84:	dc400715 	stw	r17,28(sp)
   1ca88:	dc000615 	stw	r16,24(sp)
   1ca8c:	10bbbf04 	addi	r2,r2,-4356
   1ca90:	dfc00915 	stw	ra,36(sp)
   1ca94:	2021883a 	mov	r16,r4
   1ca98:	3823883a 	mov	r17,r7
   1ca9c:	14800017 	ldw	r18,0(r2)
   1caa0:	28001426 	beq	r5,zero,1caf4 <_wcrtomb_r+0x7c>
   1caa4:	d9400415 	stw	r5,16(sp)
   1caa8:	d9800515 	stw	r6,20(sp)
   1caac:	001791c0 	call	1791c <__locale_charset>
   1cab0:	d9800517 	ldw	r6,20(sp)
   1cab4:	d9400417 	ldw	r5,16(sp)
   1cab8:	100f883a 	mov	r7,r2
   1cabc:	dc400015 	stw	r17,0(sp)
   1cac0:	8009883a 	mov	r4,r16
   1cac4:	903ee83a 	callr	r18
   1cac8:	00ffffc4 	movi	r3,-1
   1cacc:	10c0031e 	bne	r2,r3,1cadc <_wcrtomb_r+0x64>
   1cad0:	88000015 	stw	zero,0(r17)
   1cad4:	00c02284 	movi	r3,138
   1cad8:	80c00015 	stw	r3,0(r16)
   1cadc:	dfc00917 	ldw	ra,36(sp)
   1cae0:	dc800817 	ldw	r18,32(sp)
   1cae4:	dc400717 	ldw	r17,28(sp)
   1cae8:	dc000617 	ldw	r16,24(sp)
   1caec:	dec00a04 	addi	sp,sp,40
   1caf0:	f800283a 	ret
   1caf4:	001791c0 	call	1791c <__locale_charset>
   1caf8:	100f883a 	mov	r7,r2
   1cafc:	dc400015 	stw	r17,0(sp)
   1cb00:	000d883a 	mov	r6,zero
   1cb04:	d9400104 	addi	r5,sp,4
   1cb08:	8009883a 	mov	r4,r16
   1cb0c:	903ee83a 	callr	r18
   1cb10:	003fed06 	br	1cac8 <__alt_data_end+0xfc01cac8>

0001cb14 <wcrtomb>:
   1cb14:	defff604 	addi	sp,sp,-40
   1cb18:	008000f4 	movhi	r2,3
   1cb1c:	dc800615 	stw	r18,24(sp)
   1cb20:	dc400515 	stw	r17,20(sp)
   1cb24:	10bbbb04 	addi	r2,r2,-4372
   1cb28:	dfc00915 	stw	ra,36(sp)
   1cb2c:	dd000815 	stw	r20,32(sp)
   1cb30:	dcc00715 	stw	r19,28(sp)
   1cb34:	dc000415 	stw	r16,16(sp)
   1cb38:	3025883a 	mov	r18,r6
   1cb3c:	14400017 	ldw	r17,0(r2)
   1cb40:	20001926 	beq	r4,zero,1cba8 <wcrtomb+0x94>
   1cb44:	008000f4 	movhi	r2,3
   1cb48:	10bbbf04 	addi	r2,r2,-4356
   1cb4c:	15000017 	ldw	r20,0(r2)
   1cb50:	2021883a 	mov	r16,r4
   1cb54:	2827883a 	mov	r19,r5
   1cb58:	001791c0 	call	1791c <__locale_charset>
   1cb5c:	100f883a 	mov	r7,r2
   1cb60:	dc800015 	stw	r18,0(sp)
   1cb64:	980d883a 	mov	r6,r19
   1cb68:	800b883a 	mov	r5,r16
   1cb6c:	8809883a 	mov	r4,r17
   1cb70:	a03ee83a 	callr	r20
   1cb74:	00ffffc4 	movi	r3,-1
   1cb78:	10c0031e 	bne	r2,r3,1cb88 <wcrtomb+0x74>
   1cb7c:	90000015 	stw	zero,0(r18)
   1cb80:	00c02284 	movi	r3,138
   1cb84:	88c00015 	stw	r3,0(r17)
   1cb88:	dfc00917 	ldw	ra,36(sp)
   1cb8c:	dd000817 	ldw	r20,32(sp)
   1cb90:	dcc00717 	ldw	r19,28(sp)
   1cb94:	dc800617 	ldw	r18,24(sp)
   1cb98:	dc400517 	ldw	r17,20(sp)
   1cb9c:	dc000417 	ldw	r16,16(sp)
   1cba0:	dec00a04 	addi	sp,sp,40
   1cba4:	f800283a 	ret
   1cba8:	008000f4 	movhi	r2,3
   1cbac:	10bbbf04 	addi	r2,r2,-4356
   1cbb0:	14000017 	ldw	r16,0(r2)
   1cbb4:	001791c0 	call	1791c <__locale_charset>
   1cbb8:	100f883a 	mov	r7,r2
   1cbbc:	dc800015 	stw	r18,0(sp)
   1cbc0:	000d883a 	mov	r6,zero
   1cbc4:	d9400104 	addi	r5,sp,4
   1cbc8:	8809883a 	mov	r4,r17
   1cbcc:	803ee83a 	callr	r16
   1cbd0:	003fe806 	br	1cb74 <__alt_data_end+0xfc01cb74>

0001cbd4 <__ascii_wctomb>:
   1cbd4:	28000526 	beq	r5,zero,1cbec <__ascii_wctomb+0x18>
   1cbd8:	00803fc4 	movi	r2,255
   1cbdc:	11800536 	bltu	r2,r6,1cbf4 <__ascii_wctomb+0x20>
   1cbe0:	29800005 	stb	r6,0(r5)
   1cbe4:	00800044 	movi	r2,1
   1cbe8:	f800283a 	ret
   1cbec:	0005883a 	mov	r2,zero
   1cbf0:	f800283a 	ret
   1cbf4:	00802284 	movi	r2,138
   1cbf8:	20800015 	stw	r2,0(r4)
   1cbfc:	00bfffc4 	movi	r2,-1
   1cc00:	f800283a 	ret

0001cc04 <_wctomb_r>:
   1cc04:	008000f4 	movhi	r2,3
   1cc08:	defff904 	addi	sp,sp,-28
   1cc0c:	10bbbf04 	addi	r2,r2,-4356
   1cc10:	dfc00615 	stw	ra,24(sp)
   1cc14:	dc400515 	stw	r17,20(sp)
   1cc18:	dc000415 	stw	r16,16(sp)
   1cc1c:	3823883a 	mov	r17,r7
   1cc20:	14000017 	ldw	r16,0(r2)
   1cc24:	d9000115 	stw	r4,4(sp)
   1cc28:	d9400215 	stw	r5,8(sp)
   1cc2c:	d9800315 	stw	r6,12(sp)
   1cc30:	001791c0 	call	1791c <__locale_charset>
   1cc34:	d9800317 	ldw	r6,12(sp)
   1cc38:	d9400217 	ldw	r5,8(sp)
   1cc3c:	d9000117 	ldw	r4,4(sp)
   1cc40:	100f883a 	mov	r7,r2
   1cc44:	dc400015 	stw	r17,0(sp)
   1cc48:	803ee83a 	callr	r16
   1cc4c:	dfc00617 	ldw	ra,24(sp)
   1cc50:	dc400517 	ldw	r17,20(sp)
   1cc54:	dc000417 	ldw	r16,16(sp)
   1cc58:	dec00704 	addi	sp,sp,28
   1cc5c:	f800283a 	ret

0001cc60 <__udivdi3>:
   1cc60:	defff404 	addi	sp,sp,-48
   1cc64:	dcc00515 	stw	r19,20(sp)
   1cc68:	dc000215 	stw	r16,8(sp)
   1cc6c:	dfc00b15 	stw	ra,44(sp)
   1cc70:	df000a15 	stw	fp,40(sp)
   1cc74:	ddc00915 	stw	r23,36(sp)
   1cc78:	dd800815 	stw	r22,32(sp)
   1cc7c:	dd400715 	stw	r21,28(sp)
   1cc80:	dd000615 	stw	r20,24(sp)
   1cc84:	dc800415 	stw	r18,16(sp)
   1cc88:	dc400315 	stw	r17,12(sp)
   1cc8c:	2027883a 	mov	r19,r4
   1cc90:	2821883a 	mov	r16,r5
   1cc94:	3800461e 	bne	r7,zero,1cdb0 <__udivdi3+0x150>
   1cc98:	3023883a 	mov	r17,r6
   1cc9c:	2025883a 	mov	r18,r4
   1cca0:	2980572e 	bgeu	r5,r6,1ce00 <__udivdi3+0x1a0>
   1cca4:	00bfffd4 	movui	r2,65535
   1cca8:	282d883a 	mov	r22,r5
   1ccac:	1180b236 	bltu	r2,r6,1cf78 <__udivdi3+0x318>
   1ccb0:	00803fc4 	movi	r2,255
   1ccb4:	1185803a 	cmpltu	r2,r2,r6
   1ccb8:	100490fa 	slli	r2,r2,3
   1ccbc:	3086d83a 	srl	r3,r6,r2
   1ccc0:	010000f4 	movhi	r4,3
   1ccc4:	212e7404 	addi	r4,r4,-17968
   1ccc8:	20c7883a 	add	r3,r4,r3
   1cccc:	18c00003 	ldbu	r3,0(r3)
   1ccd0:	1885883a 	add	r2,r3,r2
   1ccd4:	00c00804 	movi	r3,32
   1ccd8:	1887c83a 	sub	r3,r3,r2
   1ccdc:	18000526 	beq	r3,zero,1ccf4 <__udivdi3+0x94>
   1cce0:	80e0983a 	sll	r16,r16,r3
   1cce4:	9884d83a 	srl	r2,r19,r2
   1cce8:	30e2983a 	sll	r17,r6,r3
   1ccec:	98e4983a 	sll	r18,r19,r3
   1ccf0:	142cb03a 	or	r22,r2,r16
   1ccf4:	882ad43a 	srli	r21,r17,16
   1ccf8:	b009883a 	mov	r4,r22
   1ccfc:	8d3fffcc 	andi	r20,r17,65535
   1cd00:	a80b883a 	mov	r5,r21
   1cd04:	000d8e00 	call	d8e0 <__umodsi3>
   1cd08:	b009883a 	mov	r4,r22
   1cd0c:	a80b883a 	mov	r5,r21
   1cd10:	1027883a 	mov	r19,r2
   1cd14:	000d87c0 	call	d87c <__udivsi3>
   1cd18:	100b883a 	mov	r5,r2
   1cd1c:	a009883a 	mov	r4,r20
   1cd20:	102d883a 	mov	r22,r2
   1cd24:	000d9380 	call	d938 <__mulsi3>
   1cd28:	9826943a 	slli	r19,r19,16
   1cd2c:	9006d43a 	srli	r3,r18,16
   1cd30:	1cc6b03a 	or	r3,r3,r19
   1cd34:	1880052e 	bgeu	r3,r2,1cd4c <__udivdi3+0xec>
   1cd38:	1c47883a 	add	r3,r3,r17
   1cd3c:	b13fffc4 	addi	r4,r22,-1
   1cd40:	1c400136 	bltu	r3,r17,1cd48 <__udivdi3+0xe8>
   1cd44:	18814236 	bltu	r3,r2,1d250 <__udivdi3+0x5f0>
   1cd48:	202d883a 	mov	r22,r4
   1cd4c:	18a1c83a 	sub	r16,r3,r2
   1cd50:	8009883a 	mov	r4,r16
   1cd54:	a80b883a 	mov	r5,r21
   1cd58:	000d8e00 	call	d8e0 <__umodsi3>
   1cd5c:	1027883a 	mov	r19,r2
   1cd60:	8009883a 	mov	r4,r16
   1cd64:	a80b883a 	mov	r5,r21
   1cd68:	9826943a 	slli	r19,r19,16
   1cd6c:	000d87c0 	call	d87c <__udivsi3>
   1cd70:	100b883a 	mov	r5,r2
   1cd74:	a009883a 	mov	r4,r20
   1cd78:	94bfffcc 	andi	r18,r18,65535
   1cd7c:	1021883a 	mov	r16,r2
   1cd80:	94e4b03a 	or	r18,r18,r19
   1cd84:	000d9380 	call	d938 <__mulsi3>
   1cd88:	9080052e 	bgeu	r18,r2,1cda0 <__udivdi3+0x140>
   1cd8c:	8ca5883a 	add	r18,r17,r18
   1cd90:	80ffffc4 	addi	r3,r16,-1
   1cd94:	94410c36 	bltu	r18,r17,1d1c8 <__udivdi3+0x568>
   1cd98:	90810b2e 	bgeu	r18,r2,1d1c8 <__udivdi3+0x568>
   1cd9c:	843fff84 	addi	r16,r16,-2
   1cda0:	b004943a 	slli	r2,r22,16
   1cda4:	0007883a 	mov	r3,zero
   1cda8:	1404b03a 	or	r2,r2,r16
   1cdac:	00005e06 	br	1cf28 <__udivdi3+0x2c8>
   1cdb0:	29c05b36 	bltu	r5,r7,1cf20 <__udivdi3+0x2c0>
   1cdb4:	00bfffd4 	movui	r2,65535
   1cdb8:	11c0672e 	bgeu	r2,r7,1cf58 <__udivdi3+0x2f8>
   1cdbc:	00804034 	movhi	r2,256
   1cdc0:	10bfffc4 	addi	r2,r2,-1
   1cdc4:	11c10a36 	bltu	r2,r7,1d1f0 <__udivdi3+0x590>
   1cdc8:	00800404 	movi	r2,16
   1cdcc:	3886d83a 	srl	r3,r7,r2
   1cdd0:	010000f4 	movhi	r4,3
   1cdd4:	212e7404 	addi	r4,r4,-17968
   1cdd8:	20c7883a 	add	r3,r4,r3
   1cddc:	18c00003 	ldbu	r3,0(r3)
   1cde0:	05c00804 	movi	r23,32
   1cde4:	1885883a 	add	r2,r3,r2
   1cde8:	b8afc83a 	sub	r23,r23,r2
   1cdec:	b800671e 	bne	r23,zero,1cf8c <__udivdi3+0x32c>
   1cdf0:	3c010536 	bltu	r7,r16,1d208 <__udivdi3+0x5a8>
   1cdf4:	9985403a 	cmpgeu	r2,r19,r6
   1cdf8:	0007883a 	mov	r3,zero
   1cdfc:	00004a06 	br	1cf28 <__udivdi3+0x2c8>
   1ce00:	3000041e 	bne	r6,zero,1ce14 <__udivdi3+0x1b4>
   1ce04:	000b883a 	mov	r5,zero
   1ce08:	01000044 	movi	r4,1
   1ce0c:	000d87c0 	call	d87c <__udivsi3>
   1ce10:	1023883a 	mov	r17,r2
   1ce14:	00bfffd4 	movui	r2,65535
   1ce18:	1440532e 	bgeu	r2,r17,1cf68 <__udivdi3+0x308>
   1ce1c:	00804034 	movhi	r2,256
   1ce20:	10bfffc4 	addi	r2,r2,-1
   1ce24:	1440f436 	bltu	r2,r17,1d1f8 <__udivdi3+0x598>
   1ce28:	00800404 	movi	r2,16
   1ce2c:	8886d83a 	srl	r3,r17,r2
   1ce30:	010000f4 	movhi	r4,3
   1ce34:	212e7404 	addi	r4,r4,-17968
   1ce38:	20c7883a 	add	r3,r4,r3
   1ce3c:	18c00003 	ldbu	r3,0(r3)
   1ce40:	1885883a 	add	r2,r3,r2
   1ce44:	00c00804 	movi	r3,32
   1ce48:	1887c83a 	sub	r3,r3,r2
   1ce4c:	1800a51e 	bne	r3,zero,1d0e4 <__udivdi3+0x484>
   1ce50:	882ad43a 	srli	r21,r17,16
   1ce54:	8461c83a 	sub	r16,r16,r17
   1ce58:	8d3fffcc 	andi	r20,r17,65535
   1ce5c:	00c00044 	movi	r3,1
   1ce60:	a80b883a 	mov	r5,r21
   1ce64:	8009883a 	mov	r4,r16
   1ce68:	d8c00115 	stw	r3,4(sp)
   1ce6c:	000d8e00 	call	d8e0 <__umodsi3>
   1ce70:	a80b883a 	mov	r5,r21
   1ce74:	8009883a 	mov	r4,r16
   1ce78:	1027883a 	mov	r19,r2
   1ce7c:	000d87c0 	call	d87c <__udivsi3>
   1ce80:	a00b883a 	mov	r5,r20
   1ce84:	1009883a 	mov	r4,r2
   1ce88:	102d883a 	mov	r22,r2
   1ce8c:	000d9380 	call	d938 <__mulsi3>
   1ce90:	9826943a 	slli	r19,r19,16
   1ce94:	900ed43a 	srli	r7,r18,16
   1ce98:	d8c00117 	ldw	r3,4(sp)
   1ce9c:	3cceb03a 	or	r7,r7,r19
   1cea0:	3880052e 	bgeu	r7,r2,1ceb8 <__udivdi3+0x258>
   1cea4:	3c4f883a 	add	r7,r7,r17
   1cea8:	b13fffc4 	addi	r4,r22,-1
   1ceac:	3c400136 	bltu	r7,r17,1ceb4 <__udivdi3+0x254>
   1ceb0:	3880e436 	bltu	r7,r2,1d244 <__udivdi3+0x5e4>
   1ceb4:	202d883a 	mov	r22,r4
   1ceb8:	38a1c83a 	sub	r16,r7,r2
   1cebc:	8009883a 	mov	r4,r16
   1cec0:	a80b883a 	mov	r5,r21
   1cec4:	d8c00115 	stw	r3,4(sp)
   1cec8:	000d8e00 	call	d8e0 <__umodsi3>
   1cecc:	1027883a 	mov	r19,r2
   1ced0:	8009883a 	mov	r4,r16
   1ced4:	a80b883a 	mov	r5,r21
   1ced8:	9826943a 	slli	r19,r19,16
   1cedc:	000d87c0 	call	d87c <__udivsi3>
   1cee0:	a00b883a 	mov	r5,r20
   1cee4:	1009883a 	mov	r4,r2
   1cee8:	94bfffcc 	andi	r18,r18,65535
   1ceec:	1021883a 	mov	r16,r2
   1cef0:	94e4b03a 	or	r18,r18,r19
   1cef4:	000d9380 	call	d938 <__mulsi3>
   1cef8:	d8c00117 	ldw	r3,4(sp)
   1cefc:	9080052e 	bgeu	r18,r2,1cf14 <__udivdi3+0x2b4>
   1cf00:	8ca5883a 	add	r18,r17,r18
   1cf04:	813fffc4 	addi	r4,r16,-1
   1cf08:	9440ad36 	bltu	r18,r17,1d1c0 <__udivdi3+0x560>
   1cf0c:	9080ac2e 	bgeu	r18,r2,1d1c0 <__udivdi3+0x560>
   1cf10:	843fff84 	addi	r16,r16,-2
   1cf14:	b004943a 	slli	r2,r22,16
   1cf18:	1404b03a 	or	r2,r2,r16
   1cf1c:	00000206 	br	1cf28 <__udivdi3+0x2c8>
   1cf20:	0007883a 	mov	r3,zero
   1cf24:	0005883a 	mov	r2,zero
   1cf28:	dfc00b17 	ldw	ra,44(sp)
   1cf2c:	df000a17 	ldw	fp,40(sp)
   1cf30:	ddc00917 	ldw	r23,36(sp)
   1cf34:	dd800817 	ldw	r22,32(sp)
   1cf38:	dd400717 	ldw	r21,28(sp)
   1cf3c:	dd000617 	ldw	r20,24(sp)
   1cf40:	dcc00517 	ldw	r19,20(sp)
   1cf44:	dc800417 	ldw	r18,16(sp)
   1cf48:	dc400317 	ldw	r17,12(sp)
   1cf4c:	dc000217 	ldw	r16,8(sp)
   1cf50:	dec00c04 	addi	sp,sp,48
   1cf54:	f800283a 	ret
   1cf58:	00803fc4 	movi	r2,255
   1cf5c:	11c5803a 	cmpltu	r2,r2,r7
   1cf60:	100490fa 	slli	r2,r2,3
   1cf64:	003f9906 	br	1cdcc <__alt_data_end+0xfc01cdcc>
   1cf68:	00803fc4 	movi	r2,255
   1cf6c:	1445803a 	cmpltu	r2,r2,r17
   1cf70:	100490fa 	slli	r2,r2,3
   1cf74:	003fad06 	br	1ce2c <__alt_data_end+0xfc01ce2c>
   1cf78:	00804034 	movhi	r2,256
   1cf7c:	10bfffc4 	addi	r2,r2,-1
   1cf80:	11809f36 	bltu	r2,r6,1d200 <__udivdi3+0x5a0>
   1cf84:	00800404 	movi	r2,16
   1cf88:	003f4c06 	br	1ccbc <__alt_data_end+0xfc01ccbc>
   1cf8c:	3dce983a 	sll	r7,r7,r23
   1cf90:	30b8d83a 	srl	fp,r6,r2
   1cf94:	80a2d83a 	srl	r17,r16,r2
   1cf98:	35cc983a 	sll	r6,r6,r23
   1cf9c:	3f38b03a 	or	fp,r7,fp
   1cfa0:	e024d43a 	srli	r18,fp,16
   1cfa4:	9884d83a 	srl	r2,r19,r2
   1cfa8:	85e0983a 	sll	r16,r16,r23
   1cfac:	8809883a 	mov	r4,r17
   1cfb0:	900b883a 	mov	r5,r18
   1cfb4:	d9800015 	stw	r6,0(sp)
   1cfb8:	1420b03a 	or	r16,r2,r16
   1cfbc:	000d8e00 	call	d8e0 <__umodsi3>
   1cfc0:	900b883a 	mov	r5,r18
   1cfc4:	8809883a 	mov	r4,r17
   1cfc8:	1029883a 	mov	r20,r2
   1cfcc:	e5bfffcc 	andi	r22,fp,65535
   1cfd0:	000d87c0 	call	d87c <__udivsi3>
   1cfd4:	100b883a 	mov	r5,r2
   1cfd8:	b009883a 	mov	r4,r22
   1cfdc:	102b883a 	mov	r21,r2
   1cfe0:	000d9380 	call	d938 <__mulsi3>
   1cfe4:	a028943a 	slli	r20,r20,16
   1cfe8:	8006d43a 	srli	r3,r16,16
   1cfec:	1d06b03a 	or	r3,r3,r20
   1cff0:	1880042e 	bgeu	r3,r2,1d004 <__udivdi3+0x3a4>
   1cff4:	1f07883a 	add	r3,r3,fp
   1cff8:	a93fffc4 	addi	r4,r21,-1
   1cffc:	1f00892e 	bgeu	r3,fp,1d224 <__udivdi3+0x5c4>
   1d000:	202b883a 	mov	r21,r4
   1d004:	18a3c83a 	sub	r17,r3,r2
   1d008:	8809883a 	mov	r4,r17
   1d00c:	900b883a 	mov	r5,r18
   1d010:	000d8e00 	call	d8e0 <__umodsi3>
   1d014:	1029883a 	mov	r20,r2
   1d018:	8809883a 	mov	r4,r17
   1d01c:	900b883a 	mov	r5,r18
   1d020:	a028943a 	slli	r20,r20,16
   1d024:	000d87c0 	call	d87c <__udivsi3>
   1d028:	100b883a 	mov	r5,r2
   1d02c:	b009883a 	mov	r4,r22
   1d030:	843fffcc 	andi	r16,r16,65535
   1d034:	1023883a 	mov	r17,r2
   1d038:	8520b03a 	or	r16,r16,r20
   1d03c:	000d9380 	call	d938 <__mulsi3>
   1d040:	8080042e 	bgeu	r16,r2,1d054 <__udivdi3+0x3f4>
   1d044:	8721883a 	add	r16,r16,fp
   1d048:	88ffffc4 	addi	r3,r17,-1
   1d04c:	8700712e 	bgeu	r16,fp,1d214 <__udivdi3+0x5b4>
   1d050:	1823883a 	mov	r17,r3
   1d054:	a80e943a 	slli	r7,r21,16
   1d058:	d8c00017 	ldw	r3,0(sp)
   1d05c:	80a1c83a 	sub	r16,r16,r2
   1d060:	3c64b03a 	or	r18,r7,r17
   1d064:	1d3fffcc 	andi	r20,r3,65535
   1d068:	9022d43a 	srli	r17,r18,16
   1d06c:	95bfffcc 	andi	r22,r18,65535
   1d070:	a00b883a 	mov	r5,r20
   1d074:	b009883a 	mov	r4,r22
   1d078:	182ad43a 	srli	r21,r3,16
   1d07c:	000d9380 	call	d938 <__mulsi3>
   1d080:	a00b883a 	mov	r5,r20
   1d084:	8809883a 	mov	r4,r17
   1d088:	1039883a 	mov	fp,r2
   1d08c:	000d9380 	call	d938 <__mulsi3>
   1d090:	8809883a 	mov	r4,r17
   1d094:	a80b883a 	mov	r5,r21
   1d098:	1029883a 	mov	r20,r2
   1d09c:	000d9380 	call	d938 <__mulsi3>
   1d0a0:	a80b883a 	mov	r5,r21
   1d0a4:	b009883a 	mov	r4,r22
   1d0a8:	1023883a 	mov	r17,r2
   1d0ac:	000d9380 	call	d938 <__mulsi3>
   1d0b0:	e006d43a 	srli	r3,fp,16
   1d0b4:	1505883a 	add	r2,r2,r20
   1d0b8:	1887883a 	add	r3,r3,r2
   1d0bc:	1d00022e 	bgeu	r3,r20,1d0c8 <__udivdi3+0x468>
   1d0c0:	00800074 	movhi	r2,1
   1d0c4:	88a3883a 	add	r17,r17,r2
   1d0c8:	1804d43a 	srli	r2,r3,16
   1d0cc:	1463883a 	add	r17,r2,r17
   1d0d0:	84404436 	bltu	r16,r17,1d1e4 <__udivdi3+0x584>
   1d0d4:	84403e26 	beq	r16,r17,1d1d0 <__udivdi3+0x570>
   1d0d8:	9005883a 	mov	r2,r18
   1d0dc:	0007883a 	mov	r3,zero
   1d0e0:	003f9106 	br	1cf28 <__alt_data_end+0xfc01cf28>
   1d0e4:	88e2983a 	sll	r17,r17,r3
   1d0e8:	80aed83a 	srl	r23,r16,r2
   1d0ec:	80e0983a 	sll	r16,r16,r3
   1d0f0:	882ad43a 	srli	r21,r17,16
   1d0f4:	9884d83a 	srl	r2,r19,r2
   1d0f8:	b809883a 	mov	r4,r23
   1d0fc:	a80b883a 	mov	r5,r21
   1d100:	98e4983a 	sll	r18,r19,r3
   1d104:	142cb03a 	or	r22,r2,r16
   1d108:	000d8e00 	call	d8e0 <__umodsi3>
   1d10c:	b809883a 	mov	r4,r23
   1d110:	a80b883a 	mov	r5,r21
   1d114:	1027883a 	mov	r19,r2
   1d118:	8d3fffcc 	andi	r20,r17,65535
   1d11c:	000d87c0 	call	d87c <__udivsi3>
   1d120:	a009883a 	mov	r4,r20
   1d124:	100b883a 	mov	r5,r2
   1d128:	102f883a 	mov	r23,r2
   1d12c:	000d9380 	call	d938 <__mulsi3>
   1d130:	9826943a 	slli	r19,r19,16
   1d134:	b008d43a 	srli	r4,r22,16
   1d138:	24c8b03a 	or	r4,r4,r19
   1d13c:	2080062e 	bgeu	r4,r2,1d158 <__udivdi3+0x4f8>
   1d140:	2449883a 	add	r4,r4,r17
   1d144:	b8ffffc4 	addi	r3,r23,-1
   1d148:	24403c36 	bltu	r4,r17,1d23c <__udivdi3+0x5dc>
   1d14c:	20803b2e 	bgeu	r4,r2,1d23c <__udivdi3+0x5dc>
   1d150:	bdffff84 	addi	r23,r23,-2
   1d154:	2449883a 	add	r4,r4,r17
   1d158:	20a1c83a 	sub	r16,r4,r2
   1d15c:	a80b883a 	mov	r5,r21
   1d160:	8009883a 	mov	r4,r16
   1d164:	000d8e00 	call	d8e0 <__umodsi3>
   1d168:	a80b883a 	mov	r5,r21
   1d16c:	8009883a 	mov	r4,r16
   1d170:	1027883a 	mov	r19,r2
   1d174:	000d87c0 	call	d87c <__udivsi3>
   1d178:	a009883a 	mov	r4,r20
   1d17c:	100b883a 	mov	r5,r2
   1d180:	9826943a 	slli	r19,r19,16
   1d184:	1039883a 	mov	fp,r2
   1d188:	000d9380 	call	d938 <__mulsi3>
   1d18c:	b13fffcc 	andi	r4,r22,65535
   1d190:	24c8b03a 	or	r4,r4,r19
   1d194:	2080062e 	bgeu	r4,r2,1d1b0 <__udivdi3+0x550>
   1d198:	2449883a 	add	r4,r4,r17
   1d19c:	e0ffffc4 	addi	r3,fp,-1
   1d1a0:	24402436 	bltu	r4,r17,1d234 <__udivdi3+0x5d4>
   1d1a4:	2080232e 	bgeu	r4,r2,1d234 <__udivdi3+0x5d4>
   1d1a8:	e73fff84 	addi	fp,fp,-2
   1d1ac:	2449883a 	add	r4,r4,r17
   1d1b0:	b82e943a 	slli	r23,r23,16
   1d1b4:	20a1c83a 	sub	r16,r4,r2
   1d1b8:	bf06b03a 	or	r3,r23,fp
   1d1bc:	003f2806 	br	1ce60 <__alt_data_end+0xfc01ce60>
   1d1c0:	2021883a 	mov	r16,r4
   1d1c4:	003f5306 	br	1cf14 <__alt_data_end+0xfc01cf14>
   1d1c8:	1821883a 	mov	r16,r3
   1d1cc:	003ef406 	br	1cda0 <__alt_data_end+0xfc01cda0>
   1d1d0:	1806943a 	slli	r3,r3,16
   1d1d4:	9de6983a 	sll	r19,r19,r23
   1d1d8:	e73fffcc 	andi	fp,fp,65535
   1d1dc:	1f07883a 	add	r3,r3,fp
   1d1e0:	98ffbd2e 	bgeu	r19,r3,1d0d8 <__alt_data_end+0xfc01d0d8>
   1d1e4:	90bfffc4 	addi	r2,r18,-1
   1d1e8:	0007883a 	mov	r3,zero
   1d1ec:	003f4e06 	br	1cf28 <__alt_data_end+0xfc01cf28>
   1d1f0:	00800604 	movi	r2,24
   1d1f4:	003ef506 	br	1cdcc <__alt_data_end+0xfc01cdcc>
   1d1f8:	00800604 	movi	r2,24
   1d1fc:	003f0b06 	br	1ce2c <__alt_data_end+0xfc01ce2c>
   1d200:	00800604 	movi	r2,24
   1d204:	003ead06 	br	1ccbc <__alt_data_end+0xfc01ccbc>
   1d208:	0007883a 	mov	r3,zero
   1d20c:	00800044 	movi	r2,1
   1d210:	003f4506 	br	1cf28 <__alt_data_end+0xfc01cf28>
   1d214:	80bf8e2e 	bgeu	r16,r2,1d050 <__alt_data_end+0xfc01d050>
   1d218:	8c7fff84 	addi	r17,r17,-2
   1d21c:	8721883a 	add	r16,r16,fp
   1d220:	003f8c06 	br	1d054 <__alt_data_end+0xfc01d054>
   1d224:	18bf762e 	bgeu	r3,r2,1d000 <__alt_data_end+0xfc01d000>
   1d228:	ad7fff84 	addi	r21,r21,-2
   1d22c:	1f07883a 	add	r3,r3,fp
   1d230:	003f7406 	br	1d004 <__alt_data_end+0xfc01d004>
   1d234:	1839883a 	mov	fp,r3
   1d238:	003fdd06 	br	1d1b0 <__alt_data_end+0xfc01d1b0>
   1d23c:	182f883a 	mov	r23,r3
   1d240:	003fc506 	br	1d158 <__alt_data_end+0xfc01d158>
   1d244:	b5bfff84 	addi	r22,r22,-2
   1d248:	3c4f883a 	add	r7,r7,r17
   1d24c:	003f1a06 	br	1ceb8 <__alt_data_end+0xfc01ceb8>
   1d250:	b5bfff84 	addi	r22,r22,-2
   1d254:	1c47883a 	add	r3,r3,r17
   1d258:	003ebc06 	br	1cd4c <__alt_data_end+0xfc01cd4c>

0001d25c <__umoddi3>:
   1d25c:	defff304 	addi	sp,sp,-52
   1d260:	df000b15 	stw	fp,44(sp)
   1d264:	dc400415 	stw	r17,16(sp)
   1d268:	dc000315 	stw	r16,12(sp)
   1d26c:	dfc00c15 	stw	ra,48(sp)
   1d270:	ddc00a15 	stw	r23,40(sp)
   1d274:	dd800915 	stw	r22,36(sp)
   1d278:	dd400815 	stw	r21,32(sp)
   1d27c:	dd000715 	stw	r20,28(sp)
   1d280:	dcc00615 	stw	r19,24(sp)
   1d284:	dc800515 	stw	r18,20(sp)
   1d288:	2021883a 	mov	r16,r4
   1d28c:	2823883a 	mov	r17,r5
   1d290:	2839883a 	mov	fp,r5
   1d294:	3800401e 	bne	r7,zero,1d398 <__umoddi3+0x13c>
   1d298:	3027883a 	mov	r19,r6
   1d29c:	2029883a 	mov	r20,r4
   1d2a0:	2980552e 	bgeu	r5,r6,1d3f8 <__umoddi3+0x19c>
   1d2a4:	00bfffd4 	movui	r2,65535
   1d2a8:	1180a236 	bltu	r2,r6,1d534 <__umoddi3+0x2d8>
   1d2ac:	01003fc4 	movi	r4,255
   1d2b0:	2189803a 	cmpltu	r4,r4,r6
   1d2b4:	200890fa 	slli	r4,r4,3
   1d2b8:	3104d83a 	srl	r2,r6,r4
   1d2bc:	00c000f4 	movhi	r3,3
   1d2c0:	18ee7404 	addi	r3,r3,-17968
   1d2c4:	1885883a 	add	r2,r3,r2
   1d2c8:	10c00003 	ldbu	r3,0(r2)
   1d2cc:	00800804 	movi	r2,32
   1d2d0:	1909883a 	add	r4,r3,r4
   1d2d4:	1125c83a 	sub	r18,r2,r4
   1d2d8:	90000526 	beq	r18,zero,1d2f0 <__umoddi3+0x94>
   1d2dc:	8ca2983a 	sll	r17,r17,r18
   1d2e0:	8108d83a 	srl	r4,r16,r4
   1d2e4:	34a6983a 	sll	r19,r6,r18
   1d2e8:	84a8983a 	sll	r20,r16,r18
   1d2ec:	2478b03a 	or	fp,r4,r17
   1d2f0:	982cd43a 	srli	r22,r19,16
   1d2f4:	e009883a 	mov	r4,fp
   1d2f8:	9dffffcc 	andi	r23,r19,65535
   1d2fc:	b00b883a 	mov	r5,r22
   1d300:	000d8e00 	call	d8e0 <__umodsi3>
   1d304:	b00b883a 	mov	r5,r22
   1d308:	e009883a 	mov	r4,fp
   1d30c:	102b883a 	mov	r21,r2
   1d310:	000d87c0 	call	d87c <__udivsi3>
   1d314:	100b883a 	mov	r5,r2
   1d318:	b809883a 	mov	r4,r23
   1d31c:	000d9380 	call	d938 <__mulsi3>
   1d320:	a82a943a 	slli	r21,r21,16
   1d324:	a006d43a 	srli	r3,r20,16
   1d328:	1d46b03a 	or	r3,r3,r21
   1d32c:	1880032e 	bgeu	r3,r2,1d33c <__umoddi3+0xe0>
   1d330:	1cc7883a 	add	r3,r3,r19
   1d334:	1cc00136 	bltu	r3,r19,1d33c <__umoddi3+0xe0>
   1d338:	18813136 	bltu	r3,r2,1d800 <__umoddi3+0x5a4>
   1d33c:	18a1c83a 	sub	r16,r3,r2
   1d340:	b00b883a 	mov	r5,r22
   1d344:	8009883a 	mov	r4,r16
   1d348:	000d8e00 	call	d8e0 <__umodsi3>
   1d34c:	b00b883a 	mov	r5,r22
   1d350:	8009883a 	mov	r4,r16
   1d354:	1023883a 	mov	r17,r2
   1d358:	000d87c0 	call	d87c <__udivsi3>
   1d35c:	100b883a 	mov	r5,r2
   1d360:	b809883a 	mov	r4,r23
   1d364:	8822943a 	slli	r17,r17,16
   1d368:	000d9380 	call	d938 <__mulsi3>
   1d36c:	a0ffffcc 	andi	r3,r20,65535
   1d370:	1c46b03a 	or	r3,r3,r17
   1d374:	1880042e 	bgeu	r3,r2,1d388 <__umoddi3+0x12c>
   1d378:	1cc7883a 	add	r3,r3,r19
   1d37c:	1cc00236 	bltu	r3,r19,1d388 <__umoddi3+0x12c>
   1d380:	1880012e 	bgeu	r3,r2,1d388 <__umoddi3+0x12c>
   1d384:	1cc7883a 	add	r3,r3,r19
   1d388:	1885c83a 	sub	r2,r3,r2
   1d38c:	1484d83a 	srl	r2,r2,r18
   1d390:	0007883a 	mov	r3,zero
   1d394:	00005306 	br	1d4e4 <__umoddi3+0x288>
   1d398:	29c05036 	bltu	r5,r7,1d4dc <__umoddi3+0x280>
   1d39c:	00bfffd4 	movui	r2,65535
   1d3a0:	11c05c2e 	bgeu	r2,r7,1d514 <__umoddi3+0x2b8>
   1d3a4:	00804034 	movhi	r2,256
   1d3a8:	10bfffc4 	addi	r2,r2,-1
   1d3ac:	11c10636 	bltu	r2,r7,1d7c8 <__umoddi3+0x56c>
   1d3b0:	01000404 	movi	r4,16
   1d3b4:	3904d83a 	srl	r2,r7,r4
   1d3b8:	00c000f4 	movhi	r3,3
   1d3bc:	18ee7404 	addi	r3,r3,-17968
   1d3c0:	1885883a 	add	r2,r3,r2
   1d3c4:	14c00003 	ldbu	r19,0(r2)
   1d3c8:	00c00804 	movi	r3,32
   1d3cc:	9927883a 	add	r19,r19,r4
   1d3d0:	1ce9c83a 	sub	r20,r3,r19
   1d3d4:	a0005c1e 	bne	r20,zero,1d548 <__umoddi3+0x2ec>
   1d3d8:	3c400136 	bltu	r7,r17,1d3e0 <__umoddi3+0x184>
   1d3dc:	81810a36 	bltu	r16,r6,1d808 <__umoddi3+0x5ac>
   1d3e0:	8185c83a 	sub	r2,r16,r6
   1d3e4:	89e3c83a 	sub	r17,r17,r7
   1d3e8:	8089803a 	cmpltu	r4,r16,r2
   1d3ec:	8939c83a 	sub	fp,r17,r4
   1d3f0:	e007883a 	mov	r3,fp
   1d3f4:	00003b06 	br	1d4e4 <__umoddi3+0x288>
   1d3f8:	3000041e 	bne	r6,zero,1d40c <__umoddi3+0x1b0>
   1d3fc:	000b883a 	mov	r5,zero
   1d400:	01000044 	movi	r4,1
   1d404:	000d87c0 	call	d87c <__udivsi3>
   1d408:	1027883a 	mov	r19,r2
   1d40c:	00bfffd4 	movui	r2,65535
   1d410:	14c0442e 	bgeu	r2,r19,1d524 <__umoddi3+0x2c8>
   1d414:	00804034 	movhi	r2,256
   1d418:	10bfffc4 	addi	r2,r2,-1
   1d41c:	14c0ec36 	bltu	r2,r19,1d7d0 <__umoddi3+0x574>
   1d420:	00800404 	movi	r2,16
   1d424:	9886d83a 	srl	r3,r19,r2
   1d428:	010000f4 	movhi	r4,3
   1d42c:	212e7404 	addi	r4,r4,-17968
   1d430:	20c7883a 	add	r3,r4,r3
   1d434:	18c00003 	ldbu	r3,0(r3)
   1d438:	1887883a 	add	r3,r3,r2
   1d43c:	00800804 	movi	r2,32
   1d440:	10e5c83a 	sub	r18,r2,r3
   1d444:	9000ab1e 	bne	r18,zero,1d6f4 <__umoddi3+0x498>
   1d448:	982cd43a 	srli	r22,r19,16
   1d44c:	8ce3c83a 	sub	r17,r17,r19
   1d450:	9dffffcc 	andi	r23,r19,65535
   1d454:	b00b883a 	mov	r5,r22
   1d458:	8809883a 	mov	r4,r17
   1d45c:	000d8e00 	call	d8e0 <__umodsi3>
   1d460:	b00b883a 	mov	r5,r22
   1d464:	8809883a 	mov	r4,r17
   1d468:	102b883a 	mov	r21,r2
   1d46c:	000d87c0 	call	d87c <__udivsi3>
   1d470:	b80b883a 	mov	r5,r23
   1d474:	1009883a 	mov	r4,r2
   1d478:	000d9380 	call	d938 <__mulsi3>
   1d47c:	a82a943a 	slli	r21,r21,16
   1d480:	a006d43a 	srli	r3,r20,16
   1d484:	1d46b03a 	or	r3,r3,r21
   1d488:	1880042e 	bgeu	r3,r2,1d49c <__umoddi3+0x240>
   1d48c:	1cc7883a 	add	r3,r3,r19
   1d490:	1cc00236 	bltu	r3,r19,1d49c <__umoddi3+0x240>
   1d494:	1880012e 	bgeu	r3,r2,1d49c <__umoddi3+0x240>
   1d498:	1cc7883a 	add	r3,r3,r19
   1d49c:	18a1c83a 	sub	r16,r3,r2
   1d4a0:	b00b883a 	mov	r5,r22
   1d4a4:	8009883a 	mov	r4,r16
   1d4a8:	000d8e00 	call	d8e0 <__umodsi3>
   1d4ac:	1023883a 	mov	r17,r2
   1d4b0:	b00b883a 	mov	r5,r22
   1d4b4:	8009883a 	mov	r4,r16
   1d4b8:	000d87c0 	call	d87c <__udivsi3>
   1d4bc:	8822943a 	slli	r17,r17,16
   1d4c0:	b80b883a 	mov	r5,r23
   1d4c4:	1009883a 	mov	r4,r2
   1d4c8:	000d9380 	call	d938 <__mulsi3>
   1d4cc:	a53fffcc 	andi	r20,r20,65535
   1d4d0:	a446b03a 	or	r3,r20,r17
   1d4d4:	18bfac2e 	bgeu	r3,r2,1d388 <__alt_data_end+0xfc01d388>
   1d4d8:	003fa706 	br	1d378 <__alt_data_end+0xfc01d378>
   1d4dc:	2005883a 	mov	r2,r4
   1d4e0:	2807883a 	mov	r3,r5
   1d4e4:	dfc00c17 	ldw	ra,48(sp)
   1d4e8:	df000b17 	ldw	fp,44(sp)
   1d4ec:	ddc00a17 	ldw	r23,40(sp)
   1d4f0:	dd800917 	ldw	r22,36(sp)
   1d4f4:	dd400817 	ldw	r21,32(sp)
   1d4f8:	dd000717 	ldw	r20,28(sp)
   1d4fc:	dcc00617 	ldw	r19,24(sp)
   1d500:	dc800517 	ldw	r18,20(sp)
   1d504:	dc400417 	ldw	r17,16(sp)
   1d508:	dc000317 	ldw	r16,12(sp)
   1d50c:	dec00d04 	addi	sp,sp,52
   1d510:	f800283a 	ret
   1d514:	04c03fc4 	movi	r19,255
   1d518:	99c9803a 	cmpltu	r4,r19,r7
   1d51c:	200890fa 	slli	r4,r4,3
   1d520:	003fa406 	br	1d3b4 <__alt_data_end+0xfc01d3b4>
   1d524:	00803fc4 	movi	r2,255
   1d528:	14c5803a 	cmpltu	r2,r2,r19
   1d52c:	100490fa 	slli	r2,r2,3
   1d530:	003fbc06 	br	1d424 <__alt_data_end+0xfc01d424>
   1d534:	00804034 	movhi	r2,256
   1d538:	10bfffc4 	addi	r2,r2,-1
   1d53c:	1180a636 	bltu	r2,r6,1d7d8 <__umoddi3+0x57c>
   1d540:	01000404 	movi	r4,16
   1d544:	003f5c06 	br	1d2b8 <__alt_data_end+0xfc01d2b8>
   1d548:	3d0e983a 	sll	r7,r7,r20
   1d54c:	34ead83a 	srl	r21,r6,r19
   1d550:	8cc6d83a 	srl	r3,r17,r19
   1d554:	8d10983a 	sll	r8,r17,r20
   1d558:	3d6ab03a 	or	r21,r7,r21
   1d55c:	a82cd43a 	srli	r22,r21,16
   1d560:	84e2d83a 	srl	r17,r16,r19
   1d564:	1809883a 	mov	r4,r3
   1d568:	b00b883a 	mov	r5,r22
   1d56c:	8a22b03a 	or	r17,r17,r8
   1d570:	3524983a 	sll	r18,r6,r20
   1d574:	dc400015 	stw	r17,0(sp)
   1d578:	d8c00115 	stw	r3,4(sp)
   1d57c:	000d8e00 	call	d8e0 <__umodsi3>
   1d580:	d8c00117 	ldw	r3,4(sp)
   1d584:	b00b883a 	mov	r5,r22
   1d588:	1039883a 	mov	fp,r2
   1d58c:	1809883a 	mov	r4,r3
   1d590:	000d87c0 	call	d87c <__udivsi3>
   1d594:	adffffcc 	andi	r23,r21,65535
   1d598:	100b883a 	mov	r5,r2
   1d59c:	b809883a 	mov	r4,r23
   1d5a0:	1023883a 	mov	r17,r2
   1d5a4:	000d9380 	call	d938 <__mulsi3>
   1d5a8:	d9400017 	ldw	r5,0(sp)
   1d5ac:	e008943a 	slli	r4,fp,16
   1d5b0:	8520983a 	sll	r16,r16,r20
   1d5b4:	2806d43a 	srli	r3,r5,16
   1d5b8:	1906b03a 	or	r3,r3,r4
   1d5bc:	1880042e 	bgeu	r3,r2,1d5d0 <__umoddi3+0x374>
   1d5c0:	1d47883a 	add	r3,r3,r21
   1d5c4:	893fffc4 	addi	r4,r17,-1
   1d5c8:	1d40892e 	bgeu	r3,r21,1d7f0 <__umoddi3+0x594>
   1d5cc:	2023883a 	mov	r17,r4
   1d5d0:	18b9c83a 	sub	fp,r3,r2
   1d5d4:	b00b883a 	mov	r5,r22
   1d5d8:	e009883a 	mov	r4,fp
   1d5dc:	000d8e00 	call	d8e0 <__umodsi3>
   1d5e0:	b00b883a 	mov	r5,r22
   1d5e4:	e009883a 	mov	r4,fp
   1d5e8:	d8800215 	stw	r2,8(sp)
   1d5ec:	000d87c0 	call	d87c <__udivsi3>
   1d5f0:	100b883a 	mov	r5,r2
   1d5f4:	b809883a 	mov	r4,r23
   1d5f8:	102d883a 	mov	r22,r2
   1d5fc:	000d9380 	call	d938 <__mulsi3>
   1d600:	d9800217 	ldw	r6,8(sp)
   1d604:	d8c00017 	ldw	r3,0(sp)
   1d608:	300c943a 	slli	r6,r6,16
   1d60c:	1a3fffcc 	andi	r8,r3,65535
   1d610:	4190b03a 	or	r8,r8,r6
   1d614:	4080042e 	bgeu	r8,r2,1d628 <__umoddi3+0x3cc>
   1d618:	4551883a 	add	r8,r8,r21
   1d61c:	b0ffffc4 	addi	r3,r22,-1
   1d620:	45406f2e 	bgeu	r8,r21,1d7e0 <__umoddi3+0x584>
   1d624:	182d883a 	mov	r22,r3
   1d628:	880e943a 	slli	r7,r17,16
   1d62c:	9006d43a 	srli	r3,r18,16
   1d630:	91bfffcc 	andi	r6,r18,65535
   1d634:	3dacb03a 	or	r22,r7,r22
   1d638:	b02ed43a 	srli	r23,r22,16
   1d63c:	b5bfffcc 	andi	r22,r22,65535
   1d640:	300b883a 	mov	r5,r6
   1d644:	b009883a 	mov	r4,r22
   1d648:	40a3c83a 	sub	r17,r8,r2
   1d64c:	d8c00115 	stw	r3,4(sp)
   1d650:	d9800215 	stw	r6,8(sp)
   1d654:	000d9380 	call	d938 <__mulsi3>
   1d658:	d9800217 	ldw	r6,8(sp)
   1d65c:	b809883a 	mov	r4,r23
   1d660:	1039883a 	mov	fp,r2
   1d664:	300b883a 	mov	r5,r6
   1d668:	000d9380 	call	d938 <__mulsi3>
   1d66c:	d8c00117 	ldw	r3,4(sp)
   1d670:	b809883a 	mov	r4,r23
   1d674:	d8800215 	stw	r2,8(sp)
   1d678:	180b883a 	mov	r5,r3
   1d67c:	000d9380 	call	d938 <__mulsi3>
   1d680:	d8c00117 	ldw	r3,4(sp)
   1d684:	b009883a 	mov	r4,r22
   1d688:	102f883a 	mov	r23,r2
   1d68c:	180b883a 	mov	r5,r3
   1d690:	000d9380 	call	d938 <__mulsi3>
   1d694:	d9800217 	ldw	r6,8(sp)
   1d698:	e006d43a 	srli	r3,fp,16
   1d69c:	1185883a 	add	r2,r2,r6
   1d6a0:	1885883a 	add	r2,r3,r2
   1d6a4:	1180022e 	bgeu	r2,r6,1d6b0 <__umoddi3+0x454>
   1d6a8:	00c00074 	movhi	r3,1
   1d6ac:	b8ef883a 	add	r23,r23,r3
   1d6b0:	1006d43a 	srli	r3,r2,16
   1d6b4:	1004943a 	slli	r2,r2,16
   1d6b8:	e73fffcc 	andi	fp,fp,65535
   1d6bc:	1dc7883a 	add	r3,r3,r23
   1d6c0:	1739883a 	add	fp,r2,fp
   1d6c4:	88c03a36 	bltu	r17,r3,1d7b0 <__umoddi3+0x554>
   1d6c8:	88c05126 	beq	r17,r3,1d810 <__umoddi3+0x5b4>
   1d6cc:	88c9c83a 	sub	r4,r17,r3
   1d6d0:	e00f883a 	mov	r7,fp
   1d6d4:	81cfc83a 	sub	r7,r16,r7
   1d6d8:	81c7803a 	cmpltu	r3,r16,r7
   1d6dc:	20c7c83a 	sub	r3,r4,r3
   1d6e0:	1cc4983a 	sll	r2,r3,r19
   1d6e4:	3d0ed83a 	srl	r7,r7,r20
   1d6e8:	1d06d83a 	srl	r3,r3,r20
   1d6ec:	11c4b03a 	or	r2,r2,r7
   1d6f0:	003f7c06 	br	1d4e4 <__alt_data_end+0xfc01d4e4>
   1d6f4:	9ca6983a 	sll	r19,r19,r18
   1d6f8:	88f8d83a 	srl	fp,r17,r3
   1d6fc:	80c4d83a 	srl	r2,r16,r3
   1d700:	982cd43a 	srli	r22,r19,16
   1d704:	8ca2983a 	sll	r17,r17,r18
   1d708:	e009883a 	mov	r4,fp
   1d70c:	b00b883a 	mov	r5,r22
   1d710:	146ab03a 	or	r21,r2,r17
   1d714:	000d8e00 	call	d8e0 <__umodsi3>
   1d718:	b00b883a 	mov	r5,r22
   1d71c:	e009883a 	mov	r4,fp
   1d720:	1029883a 	mov	r20,r2
   1d724:	9dffffcc 	andi	r23,r19,65535
   1d728:	000d87c0 	call	d87c <__udivsi3>
   1d72c:	b809883a 	mov	r4,r23
   1d730:	100b883a 	mov	r5,r2
   1d734:	000d9380 	call	d938 <__mulsi3>
   1d738:	a008943a 	slli	r4,r20,16
   1d73c:	a806d43a 	srli	r3,r21,16
   1d740:	84a8983a 	sll	r20,r16,r18
   1d744:	1906b03a 	or	r3,r3,r4
   1d748:	1880042e 	bgeu	r3,r2,1d75c <__umoddi3+0x500>
   1d74c:	1cc7883a 	add	r3,r3,r19
   1d750:	1cc00236 	bltu	r3,r19,1d75c <__umoddi3+0x500>
   1d754:	1880012e 	bgeu	r3,r2,1d75c <__umoddi3+0x500>
   1d758:	1cc7883a 	add	r3,r3,r19
   1d75c:	18a3c83a 	sub	r17,r3,r2
   1d760:	b00b883a 	mov	r5,r22
   1d764:	8809883a 	mov	r4,r17
   1d768:	000d8e00 	call	d8e0 <__umodsi3>
   1d76c:	b00b883a 	mov	r5,r22
   1d770:	8809883a 	mov	r4,r17
   1d774:	1021883a 	mov	r16,r2
   1d778:	000d87c0 	call	d87c <__udivsi3>
   1d77c:	100b883a 	mov	r5,r2
   1d780:	b809883a 	mov	r4,r23
   1d784:	8020943a 	slli	r16,r16,16
   1d788:	000d9380 	call	d938 <__mulsi3>
   1d78c:	a8ffffcc 	andi	r3,r21,65535
   1d790:	1c06b03a 	or	r3,r3,r16
   1d794:	1880042e 	bgeu	r3,r2,1d7a8 <__umoddi3+0x54c>
   1d798:	1cc7883a 	add	r3,r3,r19
   1d79c:	1cc00236 	bltu	r3,r19,1d7a8 <__umoddi3+0x54c>
   1d7a0:	1880012e 	bgeu	r3,r2,1d7a8 <__umoddi3+0x54c>
   1d7a4:	1cc7883a 	add	r3,r3,r19
   1d7a8:	18a3c83a 	sub	r17,r3,r2
   1d7ac:	003f2906 	br	1d454 <__alt_data_end+0xfc01d454>
   1d7b0:	e48fc83a 	sub	r7,fp,r18
   1d7b4:	1d49c83a 	sub	r4,r3,r21
   1d7b8:	e1f9803a 	cmpltu	fp,fp,r7
   1d7bc:	2739c83a 	sub	fp,r4,fp
   1d7c0:	8f09c83a 	sub	r4,r17,fp
   1d7c4:	003fc306 	br	1d6d4 <__alt_data_end+0xfc01d6d4>
   1d7c8:	01000604 	movi	r4,24
   1d7cc:	003ef906 	br	1d3b4 <__alt_data_end+0xfc01d3b4>
   1d7d0:	00800604 	movi	r2,24
   1d7d4:	003f1306 	br	1d424 <__alt_data_end+0xfc01d424>
   1d7d8:	01000604 	movi	r4,24
   1d7dc:	003eb606 	br	1d2b8 <__alt_data_end+0xfc01d2b8>
   1d7e0:	40bf902e 	bgeu	r8,r2,1d624 <__alt_data_end+0xfc01d624>
   1d7e4:	b5bfff84 	addi	r22,r22,-2
   1d7e8:	4551883a 	add	r8,r8,r21
   1d7ec:	003f8e06 	br	1d628 <__alt_data_end+0xfc01d628>
   1d7f0:	18bf762e 	bgeu	r3,r2,1d5cc <__alt_data_end+0xfc01d5cc>
   1d7f4:	8c7fff84 	addi	r17,r17,-2
   1d7f8:	1d47883a 	add	r3,r3,r21
   1d7fc:	003f7406 	br	1d5d0 <__alt_data_end+0xfc01d5d0>
   1d800:	1cc7883a 	add	r3,r3,r19
   1d804:	003ecd06 	br	1d33c <__alt_data_end+0xfc01d33c>
   1d808:	8005883a 	mov	r2,r16
   1d80c:	003ef806 	br	1d3f0 <__alt_data_end+0xfc01d3f0>
   1d810:	873fe736 	bltu	r16,fp,1d7b0 <__alt_data_end+0xfc01d7b0>
   1d814:	e00f883a 	mov	r7,fp
   1d818:	0009883a 	mov	r4,zero
   1d81c:	003fad06 	br	1d6d4 <__alt_data_end+0xfc01d6d4>

0001d820 <__adddf3>:
   1d820:	02c00434 	movhi	r11,16
   1d824:	5affffc4 	addi	r11,r11,-1
   1d828:	2806d7fa 	srli	r3,r5,31
   1d82c:	2ad4703a 	and	r10,r5,r11
   1d830:	3ad2703a 	and	r9,r7,r11
   1d834:	3804d53a 	srli	r2,r7,20
   1d838:	3018d77a 	srli	r12,r6,29
   1d83c:	280ad53a 	srli	r5,r5,20
   1d840:	501490fa 	slli	r10,r10,3
   1d844:	2010d77a 	srli	r8,r4,29
   1d848:	481290fa 	slli	r9,r9,3
   1d84c:	380ed7fa 	srli	r7,r7,31
   1d850:	defffb04 	addi	sp,sp,-20
   1d854:	dc800215 	stw	r18,8(sp)
   1d858:	dc400115 	stw	r17,4(sp)
   1d85c:	dc000015 	stw	r16,0(sp)
   1d860:	dfc00415 	stw	ra,16(sp)
   1d864:	dcc00315 	stw	r19,12(sp)
   1d868:	1c803fcc 	andi	r18,r3,255
   1d86c:	2c01ffcc 	andi	r16,r5,2047
   1d870:	5210b03a 	or	r8,r10,r8
   1d874:	202290fa 	slli	r17,r4,3
   1d878:	1081ffcc 	andi	r2,r2,2047
   1d87c:	4b12b03a 	or	r9,r9,r12
   1d880:	300c90fa 	slli	r6,r6,3
   1d884:	91c07526 	beq	r18,r7,1da5c <__adddf3+0x23c>
   1d888:	8087c83a 	sub	r3,r16,r2
   1d88c:	00c0ab0e 	bge	zero,r3,1db3c <__adddf3+0x31c>
   1d890:	10002a1e 	bne	r2,zero,1d93c <__adddf3+0x11c>
   1d894:	4984b03a 	or	r2,r9,r6
   1d898:	1000961e 	bne	r2,zero,1daf4 <__adddf3+0x2d4>
   1d89c:	888001cc 	andi	r2,r17,7
   1d8a0:	10000726 	beq	r2,zero,1d8c0 <__adddf3+0xa0>
   1d8a4:	888003cc 	andi	r2,r17,15
   1d8a8:	00c00104 	movi	r3,4
   1d8ac:	10c00426 	beq	r2,r3,1d8c0 <__adddf3+0xa0>
   1d8b0:	88c7883a 	add	r3,r17,r3
   1d8b4:	1c63803a 	cmpltu	r17,r3,r17
   1d8b8:	4451883a 	add	r8,r8,r17
   1d8bc:	1823883a 	mov	r17,r3
   1d8c0:	4080202c 	andhi	r2,r8,128
   1d8c4:	10005926 	beq	r2,zero,1da2c <__adddf3+0x20c>
   1d8c8:	84000044 	addi	r16,r16,1
   1d8cc:	0081ffc4 	movi	r2,2047
   1d8d0:	8080ba26 	beq	r16,r2,1dbbc <__adddf3+0x39c>
   1d8d4:	00bfe034 	movhi	r2,65408
   1d8d8:	10bfffc4 	addi	r2,r2,-1
   1d8dc:	4090703a 	and	r8,r8,r2
   1d8e0:	4004977a 	slli	r2,r8,29
   1d8e4:	4010927a 	slli	r8,r8,9
   1d8e8:	8822d0fa 	srli	r17,r17,3
   1d8ec:	8401ffcc 	andi	r16,r16,2047
   1d8f0:	4010d33a 	srli	r8,r8,12
   1d8f4:	9007883a 	mov	r3,r18
   1d8f8:	1444b03a 	or	r2,r2,r17
   1d8fc:	8401ffcc 	andi	r16,r16,2047
   1d900:	8020953a 	slli	r16,r16,20
   1d904:	18c03fcc 	andi	r3,r3,255
   1d908:	01000434 	movhi	r4,16
   1d90c:	213fffc4 	addi	r4,r4,-1
   1d910:	180697fa 	slli	r3,r3,31
   1d914:	4110703a 	and	r8,r8,r4
   1d918:	4410b03a 	or	r8,r8,r16
   1d91c:	40c6b03a 	or	r3,r8,r3
   1d920:	dfc00417 	ldw	ra,16(sp)
   1d924:	dcc00317 	ldw	r19,12(sp)
   1d928:	dc800217 	ldw	r18,8(sp)
   1d92c:	dc400117 	ldw	r17,4(sp)
   1d930:	dc000017 	ldw	r16,0(sp)
   1d934:	dec00504 	addi	sp,sp,20
   1d938:	f800283a 	ret
   1d93c:	0081ffc4 	movi	r2,2047
   1d940:	80bfd626 	beq	r16,r2,1d89c <__alt_data_end+0xfc01d89c>
   1d944:	4a402034 	orhi	r9,r9,128
   1d948:	00800e04 	movi	r2,56
   1d94c:	10c09f16 	blt	r2,r3,1dbcc <__adddf3+0x3ac>
   1d950:	008007c4 	movi	r2,31
   1d954:	10c0c216 	blt	r2,r3,1dc60 <__adddf3+0x440>
   1d958:	00800804 	movi	r2,32
   1d95c:	10c5c83a 	sub	r2,r2,r3
   1d960:	488a983a 	sll	r5,r9,r2
   1d964:	30c8d83a 	srl	r4,r6,r3
   1d968:	3084983a 	sll	r2,r6,r2
   1d96c:	48c6d83a 	srl	r3,r9,r3
   1d970:	290cb03a 	or	r6,r5,r4
   1d974:	1004c03a 	cmpne	r2,r2,zero
   1d978:	308cb03a 	or	r6,r6,r2
   1d97c:	898dc83a 	sub	r6,r17,r6
   1d980:	89a3803a 	cmpltu	r17,r17,r6
   1d984:	40d1c83a 	sub	r8,r8,r3
   1d988:	4451c83a 	sub	r8,r8,r17
   1d98c:	3023883a 	mov	r17,r6
   1d990:	4080202c 	andhi	r2,r8,128
   1d994:	10002326 	beq	r2,zero,1da24 <__adddf3+0x204>
   1d998:	04c02034 	movhi	r19,128
   1d99c:	9cffffc4 	addi	r19,r19,-1
   1d9a0:	44e6703a 	and	r19,r8,r19
   1d9a4:	98007626 	beq	r19,zero,1db80 <__adddf3+0x360>
   1d9a8:	9809883a 	mov	r4,r19
   1d9ac:	000f4ec0 	call	f4ec <__clzsi2>
   1d9b0:	10fffe04 	addi	r3,r2,-8
   1d9b4:	010007c4 	movi	r4,31
   1d9b8:	20c07716 	blt	r4,r3,1db98 <__adddf3+0x378>
   1d9bc:	00800804 	movi	r2,32
   1d9c0:	10c5c83a 	sub	r2,r2,r3
   1d9c4:	8884d83a 	srl	r2,r17,r2
   1d9c8:	98d0983a 	sll	r8,r19,r3
   1d9cc:	88e2983a 	sll	r17,r17,r3
   1d9d0:	1204b03a 	or	r2,r2,r8
   1d9d4:	1c007416 	blt	r3,r16,1dba8 <__adddf3+0x388>
   1d9d8:	1c21c83a 	sub	r16,r3,r16
   1d9dc:	82000044 	addi	r8,r16,1
   1d9e0:	00c007c4 	movi	r3,31
   1d9e4:	1a009116 	blt	r3,r8,1dc2c <__adddf3+0x40c>
   1d9e8:	00c00804 	movi	r3,32
   1d9ec:	1a07c83a 	sub	r3,r3,r8
   1d9f0:	8a08d83a 	srl	r4,r17,r8
   1d9f4:	88e2983a 	sll	r17,r17,r3
   1d9f8:	10c6983a 	sll	r3,r2,r3
   1d9fc:	1210d83a 	srl	r8,r2,r8
   1da00:	8804c03a 	cmpne	r2,r17,zero
   1da04:	1906b03a 	or	r3,r3,r4
   1da08:	18a2b03a 	or	r17,r3,r2
   1da0c:	0021883a 	mov	r16,zero
   1da10:	003fa206 	br	1d89c <__alt_data_end+0xfc01d89c>
   1da14:	1890b03a 	or	r8,r3,r2
   1da18:	40017d26 	beq	r8,zero,1e010 <__adddf3+0x7f0>
   1da1c:	1011883a 	mov	r8,r2
   1da20:	1823883a 	mov	r17,r3
   1da24:	888001cc 	andi	r2,r17,7
   1da28:	103f9e1e 	bne	r2,zero,1d8a4 <__alt_data_end+0xfc01d8a4>
   1da2c:	4004977a 	slli	r2,r8,29
   1da30:	8822d0fa 	srli	r17,r17,3
   1da34:	4010d0fa 	srli	r8,r8,3
   1da38:	9007883a 	mov	r3,r18
   1da3c:	1444b03a 	or	r2,r2,r17
   1da40:	0101ffc4 	movi	r4,2047
   1da44:	81002426 	beq	r16,r4,1dad8 <__adddf3+0x2b8>
   1da48:	8120703a 	and	r16,r16,r4
   1da4c:	01000434 	movhi	r4,16
   1da50:	213fffc4 	addi	r4,r4,-1
   1da54:	4110703a 	and	r8,r8,r4
   1da58:	003fa806 	br	1d8fc <__alt_data_end+0xfc01d8fc>
   1da5c:	8089c83a 	sub	r4,r16,r2
   1da60:	01005e0e 	bge	zero,r4,1dbdc <__adddf3+0x3bc>
   1da64:	10002b26 	beq	r2,zero,1db14 <__adddf3+0x2f4>
   1da68:	0081ffc4 	movi	r2,2047
   1da6c:	80bf8b26 	beq	r16,r2,1d89c <__alt_data_end+0xfc01d89c>
   1da70:	4a402034 	orhi	r9,r9,128
   1da74:	00800e04 	movi	r2,56
   1da78:	1100a40e 	bge	r2,r4,1dd0c <__adddf3+0x4ec>
   1da7c:	498cb03a 	or	r6,r9,r6
   1da80:	300ac03a 	cmpne	r5,r6,zero
   1da84:	0013883a 	mov	r9,zero
   1da88:	2c4b883a 	add	r5,r5,r17
   1da8c:	2c63803a 	cmpltu	r17,r5,r17
   1da90:	4a11883a 	add	r8,r9,r8
   1da94:	8a11883a 	add	r8,r17,r8
   1da98:	2823883a 	mov	r17,r5
   1da9c:	4080202c 	andhi	r2,r8,128
   1daa0:	103fe026 	beq	r2,zero,1da24 <__alt_data_end+0xfc01da24>
   1daa4:	84000044 	addi	r16,r16,1
   1daa8:	0081ffc4 	movi	r2,2047
   1daac:	8080d226 	beq	r16,r2,1ddf8 <__adddf3+0x5d8>
   1dab0:	00bfe034 	movhi	r2,65408
   1dab4:	10bfffc4 	addi	r2,r2,-1
   1dab8:	4090703a 	and	r8,r8,r2
   1dabc:	880ad07a 	srli	r5,r17,1
   1dac0:	400897fa 	slli	r4,r8,31
   1dac4:	88c0004c 	andi	r3,r17,1
   1dac8:	28e2b03a 	or	r17,r5,r3
   1dacc:	4010d07a 	srli	r8,r8,1
   1dad0:	2462b03a 	or	r17,r4,r17
   1dad4:	003f7106 	br	1d89c <__alt_data_end+0xfc01d89c>
   1dad8:	4088b03a 	or	r4,r8,r2
   1dadc:	20014526 	beq	r4,zero,1dff4 <__adddf3+0x7d4>
   1dae0:	01000434 	movhi	r4,16
   1dae4:	42000234 	orhi	r8,r8,8
   1dae8:	213fffc4 	addi	r4,r4,-1
   1daec:	4110703a 	and	r8,r8,r4
   1daf0:	003f8206 	br	1d8fc <__alt_data_end+0xfc01d8fc>
   1daf4:	18ffffc4 	addi	r3,r3,-1
   1daf8:	1800491e 	bne	r3,zero,1dc20 <__adddf3+0x400>
   1dafc:	898bc83a 	sub	r5,r17,r6
   1db00:	8963803a 	cmpltu	r17,r17,r5
   1db04:	4251c83a 	sub	r8,r8,r9
   1db08:	4451c83a 	sub	r8,r8,r17
   1db0c:	2823883a 	mov	r17,r5
   1db10:	003f9f06 	br	1d990 <__alt_data_end+0xfc01d990>
   1db14:	4984b03a 	or	r2,r9,r6
   1db18:	103f6026 	beq	r2,zero,1d89c <__alt_data_end+0xfc01d89c>
   1db1c:	213fffc4 	addi	r4,r4,-1
   1db20:	2000931e 	bne	r4,zero,1dd70 <__adddf3+0x550>
   1db24:	898d883a 	add	r6,r17,r6
   1db28:	3463803a 	cmpltu	r17,r6,r17
   1db2c:	4251883a 	add	r8,r8,r9
   1db30:	8a11883a 	add	r8,r17,r8
   1db34:	3023883a 	mov	r17,r6
   1db38:	003fd806 	br	1da9c <__alt_data_end+0xfc01da9c>
   1db3c:	1800541e 	bne	r3,zero,1dc90 <__adddf3+0x470>
   1db40:	80800044 	addi	r2,r16,1
   1db44:	1081ffcc 	andi	r2,r2,2047
   1db48:	00c00044 	movi	r3,1
   1db4c:	1880a00e 	bge	r3,r2,1ddd0 <__adddf3+0x5b0>
   1db50:	8989c83a 	sub	r4,r17,r6
   1db54:	8905803a 	cmpltu	r2,r17,r4
   1db58:	4267c83a 	sub	r19,r8,r9
   1db5c:	98a7c83a 	sub	r19,r19,r2
   1db60:	9880202c 	andhi	r2,r19,128
   1db64:	10006326 	beq	r2,zero,1dcf4 <__adddf3+0x4d4>
   1db68:	3463c83a 	sub	r17,r6,r17
   1db6c:	4a07c83a 	sub	r3,r9,r8
   1db70:	344d803a 	cmpltu	r6,r6,r17
   1db74:	19a7c83a 	sub	r19,r3,r6
   1db78:	3825883a 	mov	r18,r7
   1db7c:	983f8a1e 	bne	r19,zero,1d9a8 <__alt_data_end+0xfc01d9a8>
   1db80:	8809883a 	mov	r4,r17
   1db84:	000f4ec0 	call	f4ec <__clzsi2>
   1db88:	10800804 	addi	r2,r2,32
   1db8c:	10fffe04 	addi	r3,r2,-8
   1db90:	010007c4 	movi	r4,31
   1db94:	20ff890e 	bge	r4,r3,1d9bc <__alt_data_end+0xfc01d9bc>
   1db98:	10bff604 	addi	r2,r2,-40
   1db9c:	8884983a 	sll	r2,r17,r2
   1dba0:	0023883a 	mov	r17,zero
   1dba4:	1c3f8c0e 	bge	r3,r16,1d9d8 <__alt_data_end+0xfc01d9d8>
   1dba8:	023fe034 	movhi	r8,65408
   1dbac:	423fffc4 	addi	r8,r8,-1
   1dbb0:	80e1c83a 	sub	r16,r16,r3
   1dbb4:	1210703a 	and	r8,r2,r8
   1dbb8:	003f3806 	br	1d89c <__alt_data_end+0xfc01d89c>
   1dbbc:	9007883a 	mov	r3,r18
   1dbc0:	0011883a 	mov	r8,zero
   1dbc4:	0005883a 	mov	r2,zero
   1dbc8:	003f4c06 	br	1d8fc <__alt_data_end+0xfc01d8fc>
   1dbcc:	498cb03a 	or	r6,r9,r6
   1dbd0:	300cc03a 	cmpne	r6,r6,zero
   1dbd4:	0007883a 	mov	r3,zero
   1dbd8:	003f6806 	br	1d97c <__alt_data_end+0xfc01d97c>
   1dbdc:	20009c1e 	bne	r4,zero,1de50 <__adddf3+0x630>
   1dbe0:	80800044 	addi	r2,r16,1
   1dbe4:	1141ffcc 	andi	r5,r2,2047
   1dbe8:	01000044 	movi	r4,1
   1dbec:	2140670e 	bge	r4,r5,1dd8c <__adddf3+0x56c>
   1dbf0:	0101ffc4 	movi	r4,2047
   1dbf4:	11007f26 	beq	r2,r4,1ddf4 <__adddf3+0x5d4>
   1dbf8:	898d883a 	add	r6,r17,r6
   1dbfc:	4247883a 	add	r3,r8,r9
   1dc00:	3451803a 	cmpltu	r8,r6,r17
   1dc04:	40d1883a 	add	r8,r8,r3
   1dc08:	402297fa 	slli	r17,r8,31
   1dc0c:	300cd07a 	srli	r6,r6,1
   1dc10:	4010d07a 	srli	r8,r8,1
   1dc14:	1021883a 	mov	r16,r2
   1dc18:	89a2b03a 	or	r17,r17,r6
   1dc1c:	003f1f06 	br	1d89c <__alt_data_end+0xfc01d89c>
   1dc20:	0081ffc4 	movi	r2,2047
   1dc24:	80bf481e 	bne	r16,r2,1d948 <__alt_data_end+0xfc01d948>
   1dc28:	003f1c06 	br	1d89c <__alt_data_end+0xfc01d89c>
   1dc2c:	843ff844 	addi	r16,r16,-31
   1dc30:	01000804 	movi	r4,32
   1dc34:	1406d83a 	srl	r3,r2,r16
   1dc38:	41005026 	beq	r8,r4,1dd7c <__adddf3+0x55c>
   1dc3c:	01001004 	movi	r4,64
   1dc40:	2211c83a 	sub	r8,r4,r8
   1dc44:	1204983a 	sll	r2,r2,r8
   1dc48:	88a2b03a 	or	r17,r17,r2
   1dc4c:	8822c03a 	cmpne	r17,r17,zero
   1dc50:	1c62b03a 	or	r17,r3,r17
   1dc54:	0011883a 	mov	r8,zero
   1dc58:	0021883a 	mov	r16,zero
   1dc5c:	003f7106 	br	1da24 <__alt_data_end+0xfc01da24>
   1dc60:	193ff804 	addi	r4,r3,-32
   1dc64:	00800804 	movi	r2,32
   1dc68:	4908d83a 	srl	r4,r9,r4
   1dc6c:	18804526 	beq	r3,r2,1dd84 <__adddf3+0x564>
   1dc70:	00801004 	movi	r2,64
   1dc74:	10c5c83a 	sub	r2,r2,r3
   1dc78:	4886983a 	sll	r3,r9,r2
   1dc7c:	198cb03a 	or	r6,r3,r6
   1dc80:	300cc03a 	cmpne	r6,r6,zero
   1dc84:	218cb03a 	or	r6,r4,r6
   1dc88:	0007883a 	mov	r3,zero
   1dc8c:	003f3b06 	br	1d97c <__alt_data_end+0xfc01d97c>
   1dc90:	80002a26 	beq	r16,zero,1dd3c <__adddf3+0x51c>
   1dc94:	0101ffc4 	movi	r4,2047
   1dc98:	11006826 	beq	r2,r4,1de3c <__adddf3+0x61c>
   1dc9c:	00c7c83a 	sub	r3,zero,r3
   1dca0:	42002034 	orhi	r8,r8,128
   1dca4:	01000e04 	movi	r4,56
   1dca8:	20c07c16 	blt	r4,r3,1de9c <__adddf3+0x67c>
   1dcac:	010007c4 	movi	r4,31
   1dcb0:	20c0da16 	blt	r4,r3,1e01c <__adddf3+0x7fc>
   1dcb4:	01000804 	movi	r4,32
   1dcb8:	20c9c83a 	sub	r4,r4,r3
   1dcbc:	4114983a 	sll	r10,r8,r4
   1dcc0:	88cad83a 	srl	r5,r17,r3
   1dcc4:	8908983a 	sll	r4,r17,r4
   1dcc8:	40c6d83a 	srl	r3,r8,r3
   1dccc:	5162b03a 	or	r17,r10,r5
   1dcd0:	2008c03a 	cmpne	r4,r4,zero
   1dcd4:	8922b03a 	or	r17,r17,r4
   1dcd8:	3463c83a 	sub	r17,r6,r17
   1dcdc:	48c7c83a 	sub	r3,r9,r3
   1dce0:	344d803a 	cmpltu	r6,r6,r17
   1dce4:	1991c83a 	sub	r8,r3,r6
   1dce8:	1021883a 	mov	r16,r2
   1dcec:	3825883a 	mov	r18,r7
   1dcf0:	003f2706 	br	1d990 <__alt_data_end+0xfc01d990>
   1dcf4:	24d0b03a 	or	r8,r4,r19
   1dcf8:	40001b1e 	bne	r8,zero,1dd68 <__adddf3+0x548>
   1dcfc:	0005883a 	mov	r2,zero
   1dd00:	0007883a 	mov	r3,zero
   1dd04:	0021883a 	mov	r16,zero
   1dd08:	003f4d06 	br	1da40 <__alt_data_end+0xfc01da40>
   1dd0c:	008007c4 	movi	r2,31
   1dd10:	11003c16 	blt	r2,r4,1de04 <__adddf3+0x5e4>
   1dd14:	00800804 	movi	r2,32
   1dd18:	1105c83a 	sub	r2,r2,r4
   1dd1c:	488e983a 	sll	r7,r9,r2
   1dd20:	310ad83a 	srl	r5,r6,r4
   1dd24:	3084983a 	sll	r2,r6,r2
   1dd28:	4912d83a 	srl	r9,r9,r4
   1dd2c:	394ab03a 	or	r5,r7,r5
   1dd30:	1004c03a 	cmpne	r2,r2,zero
   1dd34:	288ab03a 	or	r5,r5,r2
   1dd38:	003f5306 	br	1da88 <__alt_data_end+0xfc01da88>
   1dd3c:	4448b03a 	or	r4,r8,r17
   1dd40:	20003e26 	beq	r4,zero,1de3c <__adddf3+0x61c>
   1dd44:	00c6303a 	nor	r3,zero,r3
   1dd48:	18003a1e 	bne	r3,zero,1de34 <__adddf3+0x614>
   1dd4c:	3463c83a 	sub	r17,r6,r17
   1dd50:	4a07c83a 	sub	r3,r9,r8
   1dd54:	344d803a 	cmpltu	r6,r6,r17
   1dd58:	1991c83a 	sub	r8,r3,r6
   1dd5c:	1021883a 	mov	r16,r2
   1dd60:	3825883a 	mov	r18,r7
   1dd64:	003f0a06 	br	1d990 <__alt_data_end+0xfc01d990>
   1dd68:	2023883a 	mov	r17,r4
   1dd6c:	003f0d06 	br	1d9a4 <__alt_data_end+0xfc01d9a4>
   1dd70:	0081ffc4 	movi	r2,2047
   1dd74:	80bf3f1e 	bne	r16,r2,1da74 <__alt_data_end+0xfc01da74>
   1dd78:	003ec806 	br	1d89c <__alt_data_end+0xfc01d89c>
   1dd7c:	0005883a 	mov	r2,zero
   1dd80:	003fb106 	br	1dc48 <__alt_data_end+0xfc01dc48>
   1dd84:	0007883a 	mov	r3,zero
   1dd88:	003fbc06 	br	1dc7c <__alt_data_end+0xfc01dc7c>
   1dd8c:	4444b03a 	or	r2,r8,r17
   1dd90:	8000871e 	bne	r16,zero,1dfb0 <__adddf3+0x790>
   1dd94:	1000ba26 	beq	r2,zero,1e080 <__adddf3+0x860>
   1dd98:	4984b03a 	or	r2,r9,r6
   1dd9c:	103ebf26 	beq	r2,zero,1d89c <__alt_data_end+0xfc01d89c>
   1dda0:	8985883a 	add	r2,r17,r6
   1dda4:	4247883a 	add	r3,r8,r9
   1dda8:	1451803a 	cmpltu	r8,r2,r17
   1ddac:	40d1883a 	add	r8,r8,r3
   1ddb0:	40c0202c 	andhi	r3,r8,128
   1ddb4:	1023883a 	mov	r17,r2
   1ddb8:	183f1a26 	beq	r3,zero,1da24 <__alt_data_end+0xfc01da24>
   1ddbc:	00bfe034 	movhi	r2,65408
   1ddc0:	10bfffc4 	addi	r2,r2,-1
   1ddc4:	2021883a 	mov	r16,r4
   1ddc8:	4090703a 	and	r8,r8,r2
   1ddcc:	003eb306 	br	1d89c <__alt_data_end+0xfc01d89c>
   1ddd0:	4444b03a 	or	r2,r8,r17
   1ddd4:	8000291e 	bne	r16,zero,1de7c <__adddf3+0x65c>
   1ddd8:	10004b1e 	bne	r2,zero,1df08 <__adddf3+0x6e8>
   1dddc:	4990b03a 	or	r8,r9,r6
   1dde0:	40008b26 	beq	r8,zero,1e010 <__adddf3+0x7f0>
   1dde4:	4811883a 	mov	r8,r9
   1dde8:	3023883a 	mov	r17,r6
   1ddec:	3825883a 	mov	r18,r7
   1ddf0:	003eaa06 	br	1d89c <__alt_data_end+0xfc01d89c>
   1ddf4:	1021883a 	mov	r16,r2
   1ddf8:	0011883a 	mov	r8,zero
   1ddfc:	0005883a 	mov	r2,zero
   1de00:	003f0f06 	br	1da40 <__alt_data_end+0xfc01da40>
   1de04:	217ff804 	addi	r5,r4,-32
   1de08:	00800804 	movi	r2,32
   1de0c:	494ad83a 	srl	r5,r9,r5
   1de10:	20807d26 	beq	r4,r2,1e008 <__adddf3+0x7e8>
   1de14:	00801004 	movi	r2,64
   1de18:	1109c83a 	sub	r4,r2,r4
   1de1c:	4912983a 	sll	r9,r9,r4
   1de20:	498cb03a 	or	r6,r9,r6
   1de24:	300cc03a 	cmpne	r6,r6,zero
   1de28:	298ab03a 	or	r5,r5,r6
   1de2c:	0013883a 	mov	r9,zero
   1de30:	003f1506 	br	1da88 <__alt_data_end+0xfc01da88>
   1de34:	0101ffc4 	movi	r4,2047
   1de38:	113f9a1e 	bne	r2,r4,1dca4 <__alt_data_end+0xfc01dca4>
   1de3c:	4811883a 	mov	r8,r9
   1de40:	3023883a 	mov	r17,r6
   1de44:	1021883a 	mov	r16,r2
   1de48:	3825883a 	mov	r18,r7
   1de4c:	003e9306 	br	1d89c <__alt_data_end+0xfc01d89c>
   1de50:	8000161e 	bne	r16,zero,1deac <__adddf3+0x68c>
   1de54:	444ab03a 	or	r5,r8,r17
   1de58:	28005126 	beq	r5,zero,1dfa0 <__adddf3+0x780>
   1de5c:	0108303a 	nor	r4,zero,r4
   1de60:	20004d1e 	bne	r4,zero,1df98 <__adddf3+0x778>
   1de64:	89a3883a 	add	r17,r17,r6
   1de68:	4253883a 	add	r9,r8,r9
   1de6c:	898d803a 	cmpltu	r6,r17,r6
   1de70:	3251883a 	add	r8,r6,r9
   1de74:	1021883a 	mov	r16,r2
   1de78:	003f0806 	br	1da9c <__alt_data_end+0xfc01da9c>
   1de7c:	1000301e 	bne	r2,zero,1df40 <__adddf3+0x720>
   1de80:	4984b03a 	or	r2,r9,r6
   1de84:	10007126 	beq	r2,zero,1e04c <__adddf3+0x82c>
   1de88:	4811883a 	mov	r8,r9
   1de8c:	3023883a 	mov	r17,r6
   1de90:	3825883a 	mov	r18,r7
   1de94:	0401ffc4 	movi	r16,2047
   1de98:	003e8006 	br	1d89c <__alt_data_end+0xfc01d89c>
   1de9c:	4462b03a 	or	r17,r8,r17
   1dea0:	8822c03a 	cmpne	r17,r17,zero
   1dea4:	0007883a 	mov	r3,zero
   1dea8:	003f8b06 	br	1dcd8 <__alt_data_end+0xfc01dcd8>
   1deac:	0141ffc4 	movi	r5,2047
   1deb0:	11403b26 	beq	r2,r5,1dfa0 <__adddf3+0x780>
   1deb4:	0109c83a 	sub	r4,zero,r4
   1deb8:	42002034 	orhi	r8,r8,128
   1debc:	01400e04 	movi	r5,56
   1dec0:	29006716 	blt	r5,r4,1e060 <__adddf3+0x840>
   1dec4:	014007c4 	movi	r5,31
   1dec8:	29007016 	blt	r5,r4,1e08c <__adddf3+0x86c>
   1decc:	01400804 	movi	r5,32
   1ded0:	290bc83a 	sub	r5,r5,r4
   1ded4:	4154983a 	sll	r10,r8,r5
   1ded8:	890ed83a 	srl	r7,r17,r4
   1dedc:	894a983a 	sll	r5,r17,r5
   1dee0:	4108d83a 	srl	r4,r8,r4
   1dee4:	51e2b03a 	or	r17,r10,r7
   1dee8:	280ac03a 	cmpne	r5,r5,zero
   1deec:	8962b03a 	or	r17,r17,r5
   1def0:	89a3883a 	add	r17,r17,r6
   1def4:	2253883a 	add	r9,r4,r9
   1def8:	898d803a 	cmpltu	r6,r17,r6
   1defc:	3251883a 	add	r8,r6,r9
   1df00:	1021883a 	mov	r16,r2
   1df04:	003ee506 	br	1da9c <__alt_data_end+0xfc01da9c>
   1df08:	4984b03a 	or	r2,r9,r6
   1df0c:	103e6326 	beq	r2,zero,1d89c <__alt_data_end+0xfc01d89c>
   1df10:	8987c83a 	sub	r3,r17,r6
   1df14:	88c9803a 	cmpltu	r4,r17,r3
   1df18:	4245c83a 	sub	r2,r8,r9
   1df1c:	1105c83a 	sub	r2,r2,r4
   1df20:	1100202c 	andhi	r4,r2,128
   1df24:	203ebb26 	beq	r4,zero,1da14 <__alt_data_end+0xfc01da14>
   1df28:	3463c83a 	sub	r17,r6,r17
   1df2c:	4a07c83a 	sub	r3,r9,r8
   1df30:	344d803a 	cmpltu	r6,r6,r17
   1df34:	1991c83a 	sub	r8,r3,r6
   1df38:	3825883a 	mov	r18,r7
   1df3c:	003e5706 	br	1d89c <__alt_data_end+0xfc01d89c>
   1df40:	4984b03a 	or	r2,r9,r6
   1df44:	10002e26 	beq	r2,zero,1e000 <__adddf3+0x7e0>
   1df48:	4004d0fa 	srli	r2,r8,3
   1df4c:	8822d0fa 	srli	r17,r17,3
   1df50:	4010977a 	slli	r8,r8,29
   1df54:	10c0022c 	andhi	r3,r2,8
   1df58:	4462b03a 	or	r17,r8,r17
   1df5c:	18000826 	beq	r3,zero,1df80 <__adddf3+0x760>
   1df60:	4808d0fa 	srli	r4,r9,3
   1df64:	20c0022c 	andhi	r3,r4,8
   1df68:	1800051e 	bne	r3,zero,1df80 <__adddf3+0x760>
   1df6c:	300cd0fa 	srli	r6,r6,3
   1df70:	4806977a 	slli	r3,r9,29
   1df74:	2005883a 	mov	r2,r4
   1df78:	3825883a 	mov	r18,r7
   1df7c:	19a2b03a 	or	r17,r3,r6
   1df80:	8810d77a 	srli	r8,r17,29
   1df84:	100490fa 	slli	r2,r2,3
   1df88:	882290fa 	slli	r17,r17,3
   1df8c:	0401ffc4 	movi	r16,2047
   1df90:	4090b03a 	or	r8,r8,r2
   1df94:	003e4106 	br	1d89c <__alt_data_end+0xfc01d89c>
   1df98:	0141ffc4 	movi	r5,2047
   1df9c:	117fc71e 	bne	r2,r5,1debc <__alt_data_end+0xfc01debc>
   1dfa0:	4811883a 	mov	r8,r9
   1dfa4:	3023883a 	mov	r17,r6
   1dfa8:	1021883a 	mov	r16,r2
   1dfac:	003e3b06 	br	1d89c <__alt_data_end+0xfc01d89c>
   1dfb0:	10002f26 	beq	r2,zero,1e070 <__adddf3+0x850>
   1dfb4:	4984b03a 	or	r2,r9,r6
   1dfb8:	10001126 	beq	r2,zero,1e000 <__adddf3+0x7e0>
   1dfbc:	4004d0fa 	srli	r2,r8,3
   1dfc0:	8822d0fa 	srli	r17,r17,3
   1dfc4:	4010977a 	slli	r8,r8,29
   1dfc8:	10c0022c 	andhi	r3,r2,8
   1dfcc:	4462b03a 	or	r17,r8,r17
   1dfd0:	183feb26 	beq	r3,zero,1df80 <__alt_data_end+0xfc01df80>
   1dfd4:	4808d0fa 	srli	r4,r9,3
   1dfd8:	20c0022c 	andhi	r3,r4,8
   1dfdc:	183fe81e 	bne	r3,zero,1df80 <__alt_data_end+0xfc01df80>
   1dfe0:	300cd0fa 	srli	r6,r6,3
   1dfe4:	4806977a 	slli	r3,r9,29
   1dfe8:	2005883a 	mov	r2,r4
   1dfec:	19a2b03a 	or	r17,r3,r6
   1dff0:	003fe306 	br	1df80 <__alt_data_end+0xfc01df80>
   1dff4:	0011883a 	mov	r8,zero
   1dff8:	0005883a 	mov	r2,zero
   1dffc:	003e3f06 	br	1d8fc <__alt_data_end+0xfc01d8fc>
   1e000:	0401ffc4 	movi	r16,2047
   1e004:	003e2506 	br	1d89c <__alt_data_end+0xfc01d89c>
   1e008:	0013883a 	mov	r9,zero
   1e00c:	003f8406 	br	1de20 <__alt_data_end+0xfc01de20>
   1e010:	0005883a 	mov	r2,zero
   1e014:	0007883a 	mov	r3,zero
   1e018:	003e8906 	br	1da40 <__alt_data_end+0xfc01da40>
   1e01c:	197ff804 	addi	r5,r3,-32
   1e020:	01000804 	movi	r4,32
   1e024:	414ad83a 	srl	r5,r8,r5
   1e028:	19002426 	beq	r3,r4,1e0bc <__adddf3+0x89c>
   1e02c:	01001004 	movi	r4,64
   1e030:	20c7c83a 	sub	r3,r4,r3
   1e034:	40c6983a 	sll	r3,r8,r3
   1e038:	1c46b03a 	or	r3,r3,r17
   1e03c:	1806c03a 	cmpne	r3,r3,zero
   1e040:	28e2b03a 	or	r17,r5,r3
   1e044:	0007883a 	mov	r3,zero
   1e048:	003f2306 	br	1dcd8 <__alt_data_end+0xfc01dcd8>
   1e04c:	0007883a 	mov	r3,zero
   1e050:	5811883a 	mov	r8,r11
   1e054:	00bfffc4 	movi	r2,-1
   1e058:	0401ffc4 	movi	r16,2047
   1e05c:	003e7806 	br	1da40 <__alt_data_end+0xfc01da40>
   1e060:	4462b03a 	or	r17,r8,r17
   1e064:	8822c03a 	cmpne	r17,r17,zero
   1e068:	0009883a 	mov	r4,zero
   1e06c:	003fa006 	br	1def0 <__alt_data_end+0xfc01def0>
   1e070:	4811883a 	mov	r8,r9
   1e074:	3023883a 	mov	r17,r6
   1e078:	0401ffc4 	movi	r16,2047
   1e07c:	003e0706 	br	1d89c <__alt_data_end+0xfc01d89c>
   1e080:	4811883a 	mov	r8,r9
   1e084:	3023883a 	mov	r17,r6
   1e088:	003e0406 	br	1d89c <__alt_data_end+0xfc01d89c>
   1e08c:	21fff804 	addi	r7,r4,-32
   1e090:	01400804 	movi	r5,32
   1e094:	41ced83a 	srl	r7,r8,r7
   1e098:	21400a26 	beq	r4,r5,1e0c4 <__adddf3+0x8a4>
   1e09c:	01401004 	movi	r5,64
   1e0a0:	2909c83a 	sub	r4,r5,r4
   1e0a4:	4108983a 	sll	r4,r8,r4
   1e0a8:	2448b03a 	or	r4,r4,r17
   1e0ac:	2008c03a 	cmpne	r4,r4,zero
   1e0b0:	3922b03a 	or	r17,r7,r4
   1e0b4:	0009883a 	mov	r4,zero
   1e0b8:	003f8d06 	br	1def0 <__alt_data_end+0xfc01def0>
   1e0bc:	0007883a 	mov	r3,zero
   1e0c0:	003fdd06 	br	1e038 <__alt_data_end+0xfc01e038>
   1e0c4:	0009883a 	mov	r4,zero
   1e0c8:	003ff706 	br	1e0a8 <__alt_data_end+0xfc01e0a8>

0001e0cc <__divdf3>:
   1e0cc:	defff004 	addi	sp,sp,-64
   1e0d0:	dc800815 	stw	r18,32(sp)
   1e0d4:	2824d53a 	srli	r18,r5,20
   1e0d8:	dd800c15 	stw	r22,48(sp)
   1e0dc:	282cd7fa 	srli	r22,r5,31
   1e0e0:	dc000615 	stw	r16,24(sp)
   1e0e4:	04000434 	movhi	r16,16
   1e0e8:	843fffc4 	addi	r16,r16,-1
   1e0ec:	dfc00f15 	stw	ra,60(sp)
   1e0f0:	df000e15 	stw	fp,56(sp)
   1e0f4:	ddc00d15 	stw	r23,52(sp)
   1e0f8:	dd400b15 	stw	r21,44(sp)
   1e0fc:	dd000a15 	stw	r20,40(sp)
   1e100:	dcc00915 	stw	r19,36(sp)
   1e104:	dc400715 	stw	r17,28(sp)
   1e108:	9481ffcc 	andi	r18,r18,2047
   1e10c:	2c20703a 	and	r16,r5,r16
   1e110:	b2003fcc 	andi	r8,r22,255
   1e114:	90006126 	beq	r18,zero,1e29c <__divdf3+0x1d0>
   1e118:	0081ffc4 	movi	r2,2047
   1e11c:	202b883a 	mov	r21,r4
   1e120:	90803726 	beq	r18,r2,1e200 <__divdf3+0x134>
   1e124:	80800434 	orhi	r2,r16,16
   1e128:	100490fa 	slli	r2,r2,3
   1e12c:	2020d77a 	srli	r16,r4,29
   1e130:	202a90fa 	slli	r21,r4,3
   1e134:	94bf0044 	addi	r18,r18,-1023
   1e138:	80a0b03a 	or	r16,r16,r2
   1e13c:	0013883a 	mov	r9,zero
   1e140:	000b883a 	mov	r5,zero
   1e144:	3806d53a 	srli	r3,r7,20
   1e148:	382ed7fa 	srli	r23,r7,31
   1e14c:	04400434 	movhi	r17,16
   1e150:	8c7fffc4 	addi	r17,r17,-1
   1e154:	18c1ffcc 	andi	r3,r3,2047
   1e158:	3029883a 	mov	r20,r6
   1e15c:	3c62703a 	and	r17,r7,r17
   1e160:	bf003fcc 	andi	fp,r23,255
   1e164:	18006e26 	beq	r3,zero,1e320 <__divdf3+0x254>
   1e168:	0081ffc4 	movi	r2,2047
   1e16c:	18806626 	beq	r3,r2,1e308 <__divdf3+0x23c>
   1e170:	88800434 	orhi	r2,r17,16
   1e174:	100490fa 	slli	r2,r2,3
   1e178:	3022d77a 	srli	r17,r6,29
   1e17c:	302890fa 	slli	r20,r6,3
   1e180:	18ff0044 	addi	r3,r3,-1023
   1e184:	88a2b03a 	or	r17,r17,r2
   1e188:	000f883a 	mov	r7,zero
   1e18c:	b5e6f03a 	xor	r19,r22,r23
   1e190:	3a4cb03a 	or	r6,r7,r9
   1e194:	008003c4 	movi	r2,15
   1e198:	9809883a 	mov	r4,r19
   1e19c:	90c7c83a 	sub	r3,r18,r3
   1e1a0:	9cc03fcc 	andi	r19,r19,255
   1e1a4:	11809636 	bltu	r2,r6,1e400 <__divdf3+0x334>
   1e1a8:	300c90ba 	slli	r6,r6,2
   1e1ac:	008000b4 	movhi	r2,2
   1e1b0:	10b87004 	addi	r2,r2,-7744
   1e1b4:	308d883a 	add	r6,r6,r2
   1e1b8:	30800017 	ldw	r2,0(r6)
   1e1bc:	1000683a 	jmp	r2
   1e1c0:	0001e400 	call	1e40 <_ZN3USB13AttemptConfigEhhhb+0xd4>
   1e1c4:	0001e238 	rdprs	zero,zero,1928
   1e1c8:	0001e3f0 	cmpltui	zero,zero,1935
   1e1cc:	0001e22c 	andhi	zero,zero,1928
   1e1d0:	0001e3f0 	cmpltui	zero,zero,1935
   1e1d4:	0001e3c4 	movi	zero,1935
   1e1d8:	0001e3f0 	cmpltui	zero,zero,1935
   1e1dc:	0001e22c 	andhi	zero,zero,1928
   1e1e0:	0001e238 	rdprs	zero,zero,1928
   1e1e4:	0001e238 	rdprs	zero,zero,1928
   1e1e8:	0001e3c4 	movi	zero,1935
   1e1ec:	0001e22c 	andhi	zero,zero,1928
   1e1f0:	0001e21c 	xori	zero,zero,1928
   1e1f4:	0001e21c 	xori	zero,zero,1928
   1e1f8:	0001e21c 	xori	zero,zero,1928
   1e1fc:	0001e788 	cmpgei	zero,zero,1950
   1e200:	2404b03a 	or	r2,r4,r16
   1e204:	10006c1e 	bne	r2,zero,1e3b8 <__divdf3+0x2ec>
   1e208:	02400204 	movi	r9,8
   1e20c:	0021883a 	mov	r16,zero
   1e210:	002b883a 	mov	r21,zero
   1e214:	01400084 	movi	r5,2
   1e218:	003fca06 	br	1e144 <__alt_data_end+0xfc01e144>
   1e21c:	8023883a 	mov	r17,r16
   1e220:	a829883a 	mov	r20,r21
   1e224:	4039883a 	mov	fp,r8
   1e228:	280f883a 	mov	r7,r5
   1e22c:	00800084 	movi	r2,2
   1e230:	3881601e 	bne	r7,r2,1e7b4 <__divdf3+0x6e8>
   1e234:	e027883a 	mov	r19,fp
   1e238:	9900004c 	andi	r4,r19,1
   1e23c:	0081ffc4 	movi	r2,2047
   1e240:	0021883a 	mov	r16,zero
   1e244:	002b883a 	mov	r21,zero
   1e248:	1004953a 	slli	r2,r2,20
   1e24c:	20c03fcc 	andi	r3,r4,255
   1e250:	01400434 	movhi	r5,16
   1e254:	297fffc4 	addi	r5,r5,-1
   1e258:	180697fa 	slli	r3,r3,31
   1e25c:	8160703a 	and	r16,r16,r5
   1e260:	80a0b03a 	or	r16,r16,r2
   1e264:	80c6b03a 	or	r3,r16,r3
   1e268:	a805883a 	mov	r2,r21
   1e26c:	dfc00f17 	ldw	ra,60(sp)
   1e270:	df000e17 	ldw	fp,56(sp)
   1e274:	ddc00d17 	ldw	r23,52(sp)
   1e278:	dd800c17 	ldw	r22,48(sp)
   1e27c:	dd400b17 	ldw	r21,44(sp)
   1e280:	dd000a17 	ldw	r20,40(sp)
   1e284:	dcc00917 	ldw	r19,36(sp)
   1e288:	dc800817 	ldw	r18,32(sp)
   1e28c:	dc400717 	ldw	r17,28(sp)
   1e290:	dc000617 	ldw	r16,24(sp)
   1e294:	dec01004 	addi	sp,sp,64
   1e298:	f800283a 	ret
   1e29c:	2404b03a 	or	r2,r4,r16
   1e2a0:	2023883a 	mov	r17,r4
   1e2a4:	10003f26 	beq	r2,zero,1e3a4 <__divdf3+0x2d8>
   1e2a8:	80015e26 	beq	r16,zero,1e824 <__divdf3+0x758>
   1e2ac:	8009883a 	mov	r4,r16
   1e2b0:	d9800215 	stw	r6,8(sp)
   1e2b4:	d9c00515 	stw	r7,20(sp)
   1e2b8:	da000415 	stw	r8,16(sp)
   1e2bc:	000f4ec0 	call	f4ec <__clzsi2>
   1e2c0:	d9800217 	ldw	r6,8(sp)
   1e2c4:	d9c00517 	ldw	r7,20(sp)
   1e2c8:	da000417 	ldw	r8,16(sp)
   1e2cc:	113ffd44 	addi	r4,r2,-11
   1e2d0:	00c00704 	movi	r3,28
   1e2d4:	19014f16 	blt	r3,r4,1e814 <__divdf3+0x748>
   1e2d8:	00c00744 	movi	r3,29
   1e2dc:	157ffe04 	addi	r21,r2,-8
   1e2e0:	1907c83a 	sub	r3,r3,r4
   1e2e4:	8560983a 	sll	r16,r16,r21
   1e2e8:	88c6d83a 	srl	r3,r17,r3
   1e2ec:	8d6a983a 	sll	r21,r17,r21
   1e2f0:	1c20b03a 	or	r16,r3,r16
   1e2f4:	1080fcc4 	addi	r2,r2,1011
   1e2f8:	00a5c83a 	sub	r18,zero,r2
   1e2fc:	0013883a 	mov	r9,zero
   1e300:	000b883a 	mov	r5,zero
   1e304:	003f8f06 	br	1e144 <__alt_data_end+0xfc01e144>
   1e308:	3444b03a 	or	r2,r6,r17
   1e30c:	1000231e 	bne	r2,zero,1e39c <__divdf3+0x2d0>
   1e310:	0023883a 	mov	r17,zero
   1e314:	0029883a 	mov	r20,zero
   1e318:	01c00084 	movi	r7,2
   1e31c:	003f9b06 	br	1e18c <__alt_data_end+0xfc01e18c>
   1e320:	3444b03a 	or	r2,r6,r17
   1e324:	10001926 	beq	r2,zero,1e38c <__divdf3+0x2c0>
   1e328:	88014b26 	beq	r17,zero,1e858 <__divdf3+0x78c>
   1e32c:	8809883a 	mov	r4,r17
   1e330:	d9400115 	stw	r5,4(sp)
   1e334:	d9800215 	stw	r6,8(sp)
   1e338:	da000415 	stw	r8,16(sp)
   1e33c:	da400315 	stw	r9,12(sp)
   1e340:	000f4ec0 	call	f4ec <__clzsi2>
   1e344:	d9400117 	ldw	r5,4(sp)
   1e348:	d9800217 	ldw	r6,8(sp)
   1e34c:	da000417 	ldw	r8,16(sp)
   1e350:	da400317 	ldw	r9,12(sp)
   1e354:	113ffd44 	addi	r4,r2,-11
   1e358:	00c00704 	movi	r3,28
   1e35c:	19013a16 	blt	r3,r4,1e848 <__divdf3+0x77c>
   1e360:	00c00744 	movi	r3,29
   1e364:	153ffe04 	addi	r20,r2,-8
   1e368:	1907c83a 	sub	r3,r3,r4
   1e36c:	8d22983a 	sll	r17,r17,r20
   1e370:	30c6d83a 	srl	r3,r6,r3
   1e374:	3528983a 	sll	r20,r6,r20
   1e378:	1c62b03a 	or	r17,r3,r17
   1e37c:	1080fcc4 	addi	r2,r2,1011
   1e380:	0087c83a 	sub	r3,zero,r2
   1e384:	000f883a 	mov	r7,zero
   1e388:	003f8006 	br	1e18c <__alt_data_end+0xfc01e18c>
   1e38c:	0023883a 	mov	r17,zero
   1e390:	0029883a 	mov	r20,zero
   1e394:	01c00044 	movi	r7,1
   1e398:	003f7c06 	br	1e18c <__alt_data_end+0xfc01e18c>
   1e39c:	01c000c4 	movi	r7,3
   1e3a0:	003f7a06 	br	1e18c <__alt_data_end+0xfc01e18c>
   1e3a4:	02400104 	movi	r9,4
   1e3a8:	0021883a 	mov	r16,zero
   1e3ac:	002b883a 	mov	r21,zero
   1e3b0:	01400044 	movi	r5,1
   1e3b4:	003f6306 	br	1e144 <__alt_data_end+0xfc01e144>
   1e3b8:	02400304 	movi	r9,12
   1e3bc:	014000c4 	movi	r5,3
   1e3c0:	003f6006 	br	1e144 <__alt_data_end+0xfc01e144>
   1e3c4:	04000434 	movhi	r16,16
   1e3c8:	0009883a 	mov	r4,zero
   1e3cc:	843fffc4 	addi	r16,r16,-1
   1e3d0:	057fffc4 	movi	r21,-1
   1e3d4:	0081ffc4 	movi	r2,2047
   1e3d8:	003f9b06 	br	1e248 <__alt_data_end+0xfc01e248>
   1e3dc:	00c00044 	movi	r3,1
   1e3e0:	1887c83a 	sub	r3,r3,r2
   1e3e4:	01000e04 	movi	r4,56
   1e3e8:	20c1530e 	bge	r4,r3,1e938 <__divdf3+0x86c>
   1e3ec:	9900004c 	andi	r4,r19,1
   1e3f0:	0005883a 	mov	r2,zero
   1e3f4:	0021883a 	mov	r16,zero
   1e3f8:	002b883a 	mov	r21,zero
   1e3fc:	003f9206 	br	1e248 <__alt_data_end+0xfc01e248>
   1e400:	8c012e36 	bltu	r17,r16,1e8bc <__divdf3+0x7f0>
   1e404:	84412c26 	beq	r16,r17,1e8b8 <__divdf3+0x7ec>
   1e408:	a82f883a 	mov	r23,r21
   1e40c:	18ffffc4 	addi	r3,r3,-1
   1e410:	002b883a 	mov	r21,zero
   1e414:	a004d63a 	srli	r2,r20,24
   1e418:	8822923a 	slli	r17,r17,8
   1e41c:	a028923a 	slli	r20,r20,8
   1e420:	8009883a 	mov	r4,r16
   1e424:	88acb03a 	or	r22,r17,r2
   1e428:	dd000015 	stw	r20,0(sp)
   1e42c:	b028d43a 	srli	r20,r22,16
   1e430:	d8c00215 	stw	r3,8(sp)
   1e434:	b4bfffcc 	andi	r18,r22,65535
   1e438:	a00b883a 	mov	r5,r20
   1e43c:	000d87c0 	call	d87c <__udivsi3>
   1e440:	100b883a 	mov	r5,r2
   1e444:	9009883a 	mov	r4,r18
   1e448:	1023883a 	mov	r17,r2
   1e44c:	000d9380 	call	d938 <__mulsi3>
   1e450:	8009883a 	mov	r4,r16
   1e454:	a00b883a 	mov	r5,r20
   1e458:	1039883a 	mov	fp,r2
   1e45c:	000d8e00 	call	d8e0 <__umodsi3>
   1e460:	1004943a 	slli	r2,r2,16
   1e464:	b808d43a 	srli	r4,r23,16
   1e468:	d8c00217 	ldw	r3,8(sp)
   1e46c:	2084b03a 	or	r2,r4,r2
   1e470:	1700062e 	bgeu	r2,fp,1e48c <__divdf3+0x3c0>
   1e474:	1585883a 	add	r2,r2,r22
   1e478:	893fffc4 	addi	r4,r17,-1
   1e47c:	15811d36 	bltu	r2,r22,1e8f4 <__divdf3+0x828>
   1e480:	17011c2e 	bgeu	r2,fp,1e8f4 <__divdf3+0x828>
   1e484:	8c7fff84 	addi	r17,r17,-2
   1e488:	1585883a 	add	r2,r2,r22
   1e48c:	1739c83a 	sub	fp,r2,fp
   1e490:	a00b883a 	mov	r5,r20
   1e494:	e009883a 	mov	r4,fp
   1e498:	d8c00215 	stw	r3,8(sp)
   1e49c:	000d87c0 	call	d87c <__udivsi3>
   1e4a0:	100b883a 	mov	r5,r2
   1e4a4:	9009883a 	mov	r4,r18
   1e4a8:	1021883a 	mov	r16,r2
   1e4ac:	000d9380 	call	d938 <__mulsi3>
   1e4b0:	a00b883a 	mov	r5,r20
   1e4b4:	e009883a 	mov	r4,fp
   1e4b8:	d8800415 	stw	r2,16(sp)
   1e4bc:	000d8e00 	call	d8e0 <__umodsi3>
   1e4c0:	1004943a 	slli	r2,r2,16
   1e4c4:	da000417 	ldw	r8,16(sp)
   1e4c8:	bdffffcc 	andi	r23,r23,65535
   1e4cc:	b884b03a 	or	r2,r23,r2
   1e4d0:	d8c00217 	ldw	r3,8(sp)
   1e4d4:	1200062e 	bgeu	r2,r8,1e4f0 <__divdf3+0x424>
   1e4d8:	1585883a 	add	r2,r2,r22
   1e4dc:	813fffc4 	addi	r4,r16,-1
   1e4e0:	15810236 	bltu	r2,r22,1e8ec <__divdf3+0x820>
   1e4e4:	1201012e 	bgeu	r2,r8,1e8ec <__divdf3+0x820>
   1e4e8:	843fff84 	addi	r16,r16,-2
   1e4ec:	1585883a 	add	r2,r2,r22
   1e4f0:	8822943a 	slli	r17,r17,16
   1e4f4:	d9800017 	ldw	r6,0(sp)
   1e4f8:	1211c83a 	sub	r8,r2,r8
   1e4fc:	8c22b03a 	or	r17,r17,r16
   1e500:	373fffcc 	andi	fp,r6,65535
   1e504:	8abfffcc 	andi	r10,r17,65535
   1e508:	8820d43a 	srli	r16,r17,16
   1e50c:	5009883a 	mov	r4,r10
   1e510:	e00b883a 	mov	r5,fp
   1e514:	302ed43a 	srli	r23,r6,16
   1e518:	d8c00215 	stw	r3,8(sp)
   1e51c:	da000415 	stw	r8,16(sp)
   1e520:	da800115 	stw	r10,4(sp)
   1e524:	000d9380 	call	d938 <__mulsi3>
   1e528:	800b883a 	mov	r5,r16
   1e52c:	e009883a 	mov	r4,fp
   1e530:	d8800515 	stw	r2,20(sp)
   1e534:	000d9380 	call	d938 <__mulsi3>
   1e538:	8009883a 	mov	r4,r16
   1e53c:	b80b883a 	mov	r5,r23
   1e540:	d8800315 	stw	r2,12(sp)
   1e544:	000d9380 	call	d938 <__mulsi3>
   1e548:	da800117 	ldw	r10,4(sp)
   1e54c:	b80b883a 	mov	r5,r23
   1e550:	1021883a 	mov	r16,r2
   1e554:	5009883a 	mov	r4,r10
   1e558:	000d9380 	call	d938 <__mulsi3>
   1e55c:	d9c00517 	ldw	r7,20(sp)
   1e560:	da400317 	ldw	r9,12(sp)
   1e564:	d8c00217 	ldw	r3,8(sp)
   1e568:	3808d43a 	srli	r4,r7,16
   1e56c:	1245883a 	add	r2,r2,r9
   1e570:	da000417 	ldw	r8,16(sp)
   1e574:	2085883a 	add	r2,r4,r2
   1e578:	1240022e 	bgeu	r2,r9,1e584 <__divdf3+0x4b8>
   1e57c:	01000074 	movhi	r4,1
   1e580:	8121883a 	add	r16,r16,r4
   1e584:	1008d43a 	srli	r4,r2,16
   1e588:	1004943a 	slli	r2,r2,16
   1e58c:	39ffffcc 	andi	r7,r7,65535
   1e590:	2409883a 	add	r4,r4,r16
   1e594:	11c5883a 	add	r2,r2,r7
   1e598:	4100bb36 	bltu	r8,r4,1e888 <__divdf3+0x7bc>
   1e59c:	4100d726 	beq	r8,r4,1e8fc <__divdf3+0x830>
   1e5a0:	4109c83a 	sub	r4,r8,r4
   1e5a4:	a8a1c83a 	sub	r16,r21,r2
   1e5a8:	ac2b803a 	cmpltu	r21,r21,r16
   1e5ac:	256bc83a 	sub	r21,r4,r21
   1e5b0:	b540d926 	beq	r22,r21,1e918 <__divdf3+0x84c>
   1e5b4:	a00b883a 	mov	r5,r20
   1e5b8:	a809883a 	mov	r4,r21
   1e5bc:	d8c00215 	stw	r3,8(sp)
   1e5c0:	000d87c0 	call	d87c <__udivsi3>
   1e5c4:	100b883a 	mov	r5,r2
   1e5c8:	9009883a 	mov	r4,r18
   1e5cc:	d8800515 	stw	r2,20(sp)
   1e5d0:	000d9380 	call	d938 <__mulsi3>
   1e5d4:	a809883a 	mov	r4,r21
   1e5d8:	a00b883a 	mov	r5,r20
   1e5dc:	d8800415 	stw	r2,16(sp)
   1e5e0:	000d8e00 	call	d8e0 <__umodsi3>
   1e5e4:	1004943a 	slli	r2,r2,16
   1e5e8:	8008d43a 	srli	r4,r16,16
   1e5ec:	da000417 	ldw	r8,16(sp)
   1e5f0:	d8c00217 	ldw	r3,8(sp)
   1e5f4:	2084b03a 	or	r2,r4,r2
   1e5f8:	d9c00517 	ldw	r7,20(sp)
   1e5fc:	1200062e 	bgeu	r2,r8,1e618 <__divdf3+0x54c>
   1e600:	1585883a 	add	r2,r2,r22
   1e604:	393fffc4 	addi	r4,r7,-1
   1e608:	1580c536 	bltu	r2,r22,1e920 <__divdf3+0x854>
   1e60c:	1200c42e 	bgeu	r2,r8,1e920 <__divdf3+0x854>
   1e610:	39ffff84 	addi	r7,r7,-2
   1e614:	1585883a 	add	r2,r2,r22
   1e618:	122bc83a 	sub	r21,r2,r8
   1e61c:	a00b883a 	mov	r5,r20
   1e620:	a809883a 	mov	r4,r21
   1e624:	d8c00215 	stw	r3,8(sp)
   1e628:	d9c00515 	stw	r7,20(sp)
   1e62c:	000d87c0 	call	d87c <__udivsi3>
   1e630:	9009883a 	mov	r4,r18
   1e634:	100b883a 	mov	r5,r2
   1e638:	d8800415 	stw	r2,16(sp)
   1e63c:	000d9380 	call	d938 <__mulsi3>
   1e640:	a809883a 	mov	r4,r21
   1e644:	a00b883a 	mov	r5,r20
   1e648:	1025883a 	mov	r18,r2
   1e64c:	000d8e00 	call	d8e0 <__umodsi3>
   1e650:	1004943a 	slli	r2,r2,16
   1e654:	813fffcc 	andi	r4,r16,65535
   1e658:	d8c00217 	ldw	r3,8(sp)
   1e65c:	20a0b03a 	or	r16,r4,r2
   1e660:	d9c00517 	ldw	r7,20(sp)
   1e664:	da000417 	ldw	r8,16(sp)
   1e668:	8480062e 	bgeu	r16,r18,1e684 <__divdf3+0x5b8>
   1e66c:	85a1883a 	add	r16,r16,r22
   1e670:	40bfffc4 	addi	r2,r8,-1
   1e674:	8580ac36 	bltu	r16,r22,1e928 <__divdf3+0x85c>
   1e678:	8480ab2e 	bgeu	r16,r18,1e928 <__divdf3+0x85c>
   1e67c:	423fff84 	addi	r8,r8,-2
   1e680:	85a1883a 	add	r16,r16,r22
   1e684:	3804943a 	slli	r2,r7,16
   1e688:	84a1c83a 	sub	r16,r16,r18
   1e68c:	e009883a 	mov	r4,fp
   1e690:	1228b03a 	or	r20,r2,r8
   1e694:	a1ffffcc 	andi	r7,r20,65535
   1e698:	a024d43a 	srli	r18,r20,16
   1e69c:	380b883a 	mov	r5,r7
   1e6a0:	d8c00215 	stw	r3,8(sp)
   1e6a4:	d9c00515 	stw	r7,20(sp)
   1e6a8:	000d9380 	call	d938 <__mulsi3>
   1e6ac:	900b883a 	mov	r5,r18
   1e6b0:	e009883a 	mov	r4,fp
   1e6b4:	102b883a 	mov	r21,r2
   1e6b8:	000d9380 	call	d938 <__mulsi3>
   1e6bc:	900b883a 	mov	r5,r18
   1e6c0:	b809883a 	mov	r4,r23
   1e6c4:	1039883a 	mov	fp,r2
   1e6c8:	000d9380 	call	d938 <__mulsi3>
   1e6cc:	d9c00517 	ldw	r7,20(sp)
   1e6d0:	b80b883a 	mov	r5,r23
   1e6d4:	1025883a 	mov	r18,r2
   1e6d8:	3809883a 	mov	r4,r7
   1e6dc:	000d9380 	call	d938 <__mulsi3>
   1e6e0:	a808d43a 	srli	r4,r21,16
   1e6e4:	1705883a 	add	r2,r2,fp
   1e6e8:	d8c00217 	ldw	r3,8(sp)
   1e6ec:	2085883a 	add	r2,r4,r2
   1e6f0:	1700022e 	bgeu	r2,fp,1e6fc <__divdf3+0x630>
   1e6f4:	01000074 	movhi	r4,1
   1e6f8:	9125883a 	add	r18,r18,r4
   1e6fc:	1008d43a 	srli	r4,r2,16
   1e700:	1004943a 	slli	r2,r2,16
   1e704:	ad7fffcc 	andi	r21,r21,65535
   1e708:	2489883a 	add	r4,r4,r18
   1e70c:	1545883a 	add	r2,r2,r21
   1e710:	81003836 	bltu	r16,r4,1e7f4 <__divdf3+0x728>
   1e714:	81003626 	beq	r16,r4,1e7f0 <__divdf3+0x724>
   1e718:	a5000054 	ori	r20,r20,1
   1e71c:	1880ffc4 	addi	r2,r3,1023
   1e720:	00bf2e0e 	bge	zero,r2,1e3dc <__alt_data_end+0xfc01e3dc>
   1e724:	a10001cc 	andi	r4,r20,7
   1e728:	20000726 	beq	r4,zero,1e748 <__divdf3+0x67c>
   1e72c:	a10003cc 	andi	r4,r20,15
   1e730:	01400104 	movi	r5,4
   1e734:	21400426 	beq	r4,r5,1e748 <__divdf3+0x67c>
   1e738:	a149883a 	add	r4,r20,r5
   1e73c:	2529803a 	cmpltu	r20,r4,r20
   1e740:	8d23883a 	add	r17,r17,r20
   1e744:	2029883a 	mov	r20,r4
   1e748:	8900402c 	andhi	r4,r17,256
   1e74c:	20000426 	beq	r4,zero,1e760 <__divdf3+0x694>
   1e750:	18810004 	addi	r2,r3,1024
   1e754:	00ffc034 	movhi	r3,65280
   1e758:	18ffffc4 	addi	r3,r3,-1
   1e75c:	88e2703a 	and	r17,r17,r3
   1e760:	00c1ff84 	movi	r3,2046
   1e764:	18beb416 	blt	r3,r2,1e238 <__alt_data_end+0xfc01e238>
   1e768:	a028d0fa 	srli	r20,r20,3
   1e76c:	882a977a 	slli	r21,r17,29
   1e770:	8820927a 	slli	r16,r17,9
   1e774:	1081ffcc 	andi	r2,r2,2047
   1e778:	ad2ab03a 	or	r21,r21,r20
   1e77c:	8020d33a 	srli	r16,r16,12
   1e780:	9900004c 	andi	r4,r19,1
   1e784:	003eb006 	br	1e248 <__alt_data_end+0xfc01e248>
   1e788:	8080022c 	andhi	r2,r16,8
   1e78c:	10001226 	beq	r2,zero,1e7d8 <__divdf3+0x70c>
   1e790:	8880022c 	andhi	r2,r17,8
   1e794:	1000101e 	bne	r2,zero,1e7d8 <__divdf3+0x70c>
   1e798:	00800434 	movhi	r2,16
   1e79c:	8c000234 	orhi	r16,r17,8
   1e7a0:	10bfffc4 	addi	r2,r2,-1
   1e7a4:	b809883a 	mov	r4,r23
   1e7a8:	80a0703a 	and	r16,r16,r2
   1e7ac:	a02b883a 	mov	r21,r20
   1e7b0:	003f0806 	br	1e3d4 <__alt_data_end+0xfc01e3d4>
   1e7b4:	008000c4 	movi	r2,3
   1e7b8:	3880b126 	beq	r7,r2,1ea80 <__divdf3+0x9b4>
   1e7bc:	00800044 	movi	r2,1
   1e7c0:	38805b1e 	bne	r7,r2,1e930 <__divdf3+0x864>
   1e7c4:	e009883a 	mov	r4,fp
   1e7c8:	0005883a 	mov	r2,zero
   1e7cc:	0021883a 	mov	r16,zero
   1e7d0:	002b883a 	mov	r21,zero
   1e7d4:	003e9c06 	br	1e248 <__alt_data_end+0xfc01e248>
   1e7d8:	00800434 	movhi	r2,16
   1e7dc:	84000234 	orhi	r16,r16,8
   1e7e0:	10bfffc4 	addi	r2,r2,-1
   1e7e4:	b009883a 	mov	r4,r22
   1e7e8:	80a0703a 	and	r16,r16,r2
   1e7ec:	003ef906 	br	1e3d4 <__alt_data_end+0xfc01e3d4>
   1e7f0:	103fca26 	beq	r2,zero,1e71c <__alt_data_end+0xfc01e71c>
   1e7f4:	b421883a 	add	r16,r22,r16
   1e7f8:	a17fffc4 	addi	r5,r20,-1
   1e7fc:	8580422e 	bgeu	r16,r22,1e908 <__divdf3+0x83c>
   1e800:	2829883a 	mov	r20,r5
   1e804:	813fc41e 	bne	r16,r4,1e718 <__alt_data_end+0xfc01e718>
   1e808:	d9800017 	ldw	r6,0(sp)
   1e80c:	30bfc21e 	bne	r6,r2,1e718 <__alt_data_end+0xfc01e718>
   1e810:	003fc206 	br	1e71c <__alt_data_end+0xfc01e71c>
   1e814:	143ff604 	addi	r16,r2,-40
   1e818:	8c20983a 	sll	r16,r17,r16
   1e81c:	002b883a 	mov	r21,zero
   1e820:	003eb406 	br	1e2f4 <__alt_data_end+0xfc01e2f4>
   1e824:	d9800215 	stw	r6,8(sp)
   1e828:	d9c00515 	stw	r7,20(sp)
   1e82c:	da000415 	stw	r8,16(sp)
   1e830:	000f4ec0 	call	f4ec <__clzsi2>
   1e834:	10800804 	addi	r2,r2,32
   1e838:	da000417 	ldw	r8,16(sp)
   1e83c:	d9c00517 	ldw	r7,20(sp)
   1e840:	d9800217 	ldw	r6,8(sp)
   1e844:	003ea106 	br	1e2cc <__alt_data_end+0xfc01e2cc>
   1e848:	147ff604 	addi	r17,r2,-40
   1e84c:	3462983a 	sll	r17,r6,r17
   1e850:	0029883a 	mov	r20,zero
   1e854:	003ec906 	br	1e37c <__alt_data_end+0xfc01e37c>
   1e858:	3009883a 	mov	r4,r6
   1e85c:	d9400115 	stw	r5,4(sp)
   1e860:	d9800215 	stw	r6,8(sp)
   1e864:	da000415 	stw	r8,16(sp)
   1e868:	da400315 	stw	r9,12(sp)
   1e86c:	000f4ec0 	call	f4ec <__clzsi2>
   1e870:	10800804 	addi	r2,r2,32
   1e874:	da400317 	ldw	r9,12(sp)
   1e878:	da000417 	ldw	r8,16(sp)
   1e87c:	d9800217 	ldw	r6,8(sp)
   1e880:	d9400117 	ldw	r5,4(sp)
   1e884:	003eb306 	br	1e354 <__alt_data_end+0xfc01e354>
   1e888:	d9800017 	ldw	r6,0(sp)
   1e88c:	a9ab883a 	add	r21,r21,r6
   1e890:	a98b803a 	cmpltu	r5,r21,r6
   1e894:	2d8b883a 	add	r5,r5,r22
   1e898:	2a11883a 	add	r8,r5,r8
   1e89c:	897fffc4 	addi	r5,r17,-1
   1e8a0:	b2000c2e 	bgeu	r22,r8,1e8d4 <__divdf3+0x808>
   1e8a4:	41003f36 	bltu	r8,r4,1e9a4 <__divdf3+0x8d8>
   1e8a8:	22006c26 	beq	r4,r8,1ea5c <__divdf3+0x990>
   1e8ac:	4109c83a 	sub	r4,r8,r4
   1e8b0:	2823883a 	mov	r17,r5
   1e8b4:	003f3b06 	br	1e5a4 <__alt_data_end+0xfc01e5a4>
   1e8b8:	ad3ed336 	bltu	r21,r20,1e408 <__alt_data_end+0xfc01e408>
   1e8bc:	a804d07a 	srli	r2,r21,1
   1e8c0:	802e97fa 	slli	r23,r16,31
   1e8c4:	a82a97fa 	slli	r21,r21,31
   1e8c8:	8020d07a 	srli	r16,r16,1
   1e8cc:	b8aeb03a 	or	r23,r23,r2
   1e8d0:	003ed006 	br	1e414 <__alt_data_end+0xfc01e414>
   1e8d4:	b23ff51e 	bne	r22,r8,1e8ac <__alt_data_end+0xfc01e8ac>
   1e8d8:	d9800017 	ldw	r6,0(sp)
   1e8dc:	a9bff12e 	bgeu	r21,r6,1e8a4 <__alt_data_end+0xfc01e8a4>
   1e8e0:	b109c83a 	sub	r4,r22,r4
   1e8e4:	2823883a 	mov	r17,r5
   1e8e8:	003f2e06 	br	1e5a4 <__alt_data_end+0xfc01e5a4>
   1e8ec:	2021883a 	mov	r16,r4
   1e8f0:	003eff06 	br	1e4f0 <__alt_data_end+0xfc01e4f0>
   1e8f4:	2023883a 	mov	r17,r4
   1e8f8:	003ee406 	br	1e48c <__alt_data_end+0xfc01e48c>
   1e8fc:	a8bfe236 	bltu	r21,r2,1e888 <__alt_data_end+0xfc01e888>
   1e900:	0009883a 	mov	r4,zero
   1e904:	003f2706 	br	1e5a4 <__alt_data_end+0xfc01e5a4>
   1e908:	81002d36 	bltu	r16,r4,1e9c0 <__divdf3+0x8f4>
   1e90c:	24005626 	beq	r4,r16,1ea68 <__divdf3+0x99c>
   1e910:	2829883a 	mov	r20,r5
   1e914:	003f8006 	br	1e718 <__alt_data_end+0xfc01e718>
   1e918:	053fffc4 	movi	r20,-1
   1e91c:	003f7f06 	br	1e71c <__alt_data_end+0xfc01e71c>
   1e920:	200f883a 	mov	r7,r4
   1e924:	003f3c06 	br	1e618 <__alt_data_end+0xfc01e618>
   1e928:	1011883a 	mov	r8,r2
   1e92c:	003f5506 	br	1e684 <__alt_data_end+0xfc01e684>
   1e930:	e027883a 	mov	r19,fp
   1e934:	003f7906 	br	1e71c <__alt_data_end+0xfc01e71c>
   1e938:	010007c4 	movi	r4,31
   1e93c:	20c02816 	blt	r4,r3,1e9e0 <__divdf3+0x914>
   1e940:	00800804 	movi	r2,32
   1e944:	10c5c83a 	sub	r2,r2,r3
   1e948:	888a983a 	sll	r5,r17,r2
   1e94c:	a0c8d83a 	srl	r4,r20,r3
   1e950:	a084983a 	sll	r2,r20,r2
   1e954:	88e2d83a 	srl	r17,r17,r3
   1e958:	2906b03a 	or	r3,r5,r4
   1e95c:	1004c03a 	cmpne	r2,r2,zero
   1e960:	1886b03a 	or	r3,r3,r2
   1e964:	188001cc 	andi	r2,r3,7
   1e968:	10000726 	beq	r2,zero,1e988 <__divdf3+0x8bc>
   1e96c:	188003cc 	andi	r2,r3,15
   1e970:	01000104 	movi	r4,4
   1e974:	11000426 	beq	r2,r4,1e988 <__divdf3+0x8bc>
   1e978:	1805883a 	mov	r2,r3
   1e97c:	10c00104 	addi	r3,r2,4
   1e980:	1885803a 	cmpltu	r2,r3,r2
   1e984:	88a3883a 	add	r17,r17,r2
   1e988:	8880202c 	andhi	r2,r17,128
   1e98c:	10002926 	beq	r2,zero,1ea34 <__divdf3+0x968>
   1e990:	9900004c 	andi	r4,r19,1
   1e994:	00800044 	movi	r2,1
   1e998:	0021883a 	mov	r16,zero
   1e99c:	002b883a 	mov	r21,zero
   1e9a0:	003e2906 	br	1e248 <__alt_data_end+0xfc01e248>
   1e9a4:	d9800017 	ldw	r6,0(sp)
   1e9a8:	8c7fff84 	addi	r17,r17,-2
   1e9ac:	a9ab883a 	add	r21,r21,r6
   1e9b0:	a98b803a 	cmpltu	r5,r21,r6
   1e9b4:	2d8b883a 	add	r5,r5,r22
   1e9b8:	2a11883a 	add	r8,r5,r8
   1e9bc:	003ef806 	br	1e5a0 <__alt_data_end+0xfc01e5a0>
   1e9c0:	d9800017 	ldw	r6,0(sp)
   1e9c4:	318f883a 	add	r7,r6,r6
   1e9c8:	398b803a 	cmpltu	r5,r7,r6
   1e9cc:	2d8d883a 	add	r6,r5,r22
   1e9d0:	81a1883a 	add	r16,r16,r6
   1e9d4:	a17fff84 	addi	r5,r20,-2
   1e9d8:	d9c00015 	stw	r7,0(sp)
   1e9dc:	003f8806 	br	1e800 <__alt_data_end+0xfc01e800>
   1e9e0:	013ff844 	movi	r4,-31
   1e9e4:	2085c83a 	sub	r2,r4,r2
   1e9e8:	8888d83a 	srl	r4,r17,r2
   1e9ec:	00800804 	movi	r2,32
   1e9f0:	18802126 	beq	r3,r2,1ea78 <__divdf3+0x9ac>
   1e9f4:	04001004 	movi	r16,64
   1e9f8:	80c7c83a 	sub	r3,r16,r3
   1e9fc:	88e0983a 	sll	r16,r17,r3
   1ea00:	8504b03a 	or	r2,r16,r20
   1ea04:	1004c03a 	cmpne	r2,r2,zero
   1ea08:	2084b03a 	or	r2,r4,r2
   1ea0c:	144001cc 	andi	r17,r2,7
   1ea10:	88000d1e 	bne	r17,zero,1ea48 <__divdf3+0x97c>
   1ea14:	0021883a 	mov	r16,zero
   1ea18:	102ad0fa 	srli	r21,r2,3
   1ea1c:	9900004c 	andi	r4,r19,1
   1ea20:	0005883a 	mov	r2,zero
   1ea24:	ac6ab03a 	or	r21,r21,r17
   1ea28:	003e0706 	br	1e248 <__alt_data_end+0xfc01e248>
   1ea2c:	1007883a 	mov	r3,r2
   1ea30:	0023883a 	mov	r17,zero
   1ea34:	8820927a 	slli	r16,r17,9
   1ea38:	1805883a 	mov	r2,r3
   1ea3c:	8822977a 	slli	r17,r17,29
   1ea40:	8020d33a 	srli	r16,r16,12
   1ea44:	003ff406 	br	1ea18 <__alt_data_end+0xfc01ea18>
   1ea48:	10c003cc 	andi	r3,r2,15
   1ea4c:	01000104 	movi	r4,4
   1ea50:	193ff626 	beq	r3,r4,1ea2c <__alt_data_end+0xfc01ea2c>
   1ea54:	0023883a 	mov	r17,zero
   1ea58:	003fc806 	br	1e97c <__alt_data_end+0xfc01e97c>
   1ea5c:	a8bfd136 	bltu	r21,r2,1e9a4 <__alt_data_end+0xfc01e9a4>
   1ea60:	2823883a 	mov	r17,r5
   1ea64:	003fa606 	br	1e900 <__alt_data_end+0xfc01e900>
   1ea68:	d9800017 	ldw	r6,0(sp)
   1ea6c:	30bfd436 	bltu	r6,r2,1e9c0 <__alt_data_end+0xfc01e9c0>
   1ea70:	2829883a 	mov	r20,r5
   1ea74:	003f6406 	br	1e808 <__alt_data_end+0xfc01e808>
   1ea78:	0021883a 	mov	r16,zero
   1ea7c:	003fe006 	br	1ea00 <__alt_data_end+0xfc01ea00>
   1ea80:	00800434 	movhi	r2,16
   1ea84:	8c000234 	orhi	r16,r17,8
   1ea88:	10bfffc4 	addi	r2,r2,-1
   1ea8c:	e009883a 	mov	r4,fp
   1ea90:	80a0703a 	and	r16,r16,r2
   1ea94:	a02b883a 	mov	r21,r20
   1ea98:	003e4e06 	br	1e3d4 <__alt_data_end+0xfc01e3d4>

0001ea9c <__eqdf2>:
   1ea9c:	2804d53a 	srli	r2,r5,20
   1eaa0:	3806d53a 	srli	r3,r7,20
   1eaa4:	02000434 	movhi	r8,16
   1eaa8:	423fffc4 	addi	r8,r8,-1
   1eaac:	1081ffcc 	andi	r2,r2,2047
   1eab0:	0281ffc4 	movi	r10,2047
   1eab4:	2a12703a 	and	r9,r5,r8
   1eab8:	18c1ffcc 	andi	r3,r3,2047
   1eabc:	3a10703a 	and	r8,r7,r8
   1eac0:	280ad7fa 	srli	r5,r5,31
   1eac4:	380ed7fa 	srli	r7,r7,31
   1eac8:	12801026 	beq	r2,r10,1eb0c <__eqdf2+0x70>
   1eacc:	0281ffc4 	movi	r10,2047
   1ead0:	1a800a26 	beq	r3,r10,1eafc <__eqdf2+0x60>
   1ead4:	10c00226 	beq	r2,r3,1eae0 <__eqdf2+0x44>
   1ead8:	00800044 	movi	r2,1
   1eadc:	f800283a 	ret
   1eae0:	4a3ffd1e 	bne	r9,r8,1ead8 <__alt_data_end+0xfc01ead8>
   1eae4:	21bffc1e 	bne	r4,r6,1ead8 <__alt_data_end+0xfc01ead8>
   1eae8:	29c00c26 	beq	r5,r7,1eb1c <__eqdf2+0x80>
   1eaec:	103ffa1e 	bne	r2,zero,1ead8 <__alt_data_end+0xfc01ead8>
   1eaf0:	2244b03a 	or	r2,r4,r9
   1eaf4:	1004c03a 	cmpne	r2,r2,zero
   1eaf8:	f800283a 	ret
   1eafc:	3214b03a 	or	r10,r6,r8
   1eb00:	503ff426 	beq	r10,zero,1ead4 <__alt_data_end+0xfc01ead4>
   1eb04:	00800044 	movi	r2,1
   1eb08:	f800283a 	ret
   1eb0c:	2254b03a 	or	r10,r4,r9
   1eb10:	503fee26 	beq	r10,zero,1eacc <__alt_data_end+0xfc01eacc>
   1eb14:	00800044 	movi	r2,1
   1eb18:	f800283a 	ret
   1eb1c:	0005883a 	mov	r2,zero
   1eb20:	f800283a 	ret

0001eb24 <__gedf2>:
   1eb24:	2804d53a 	srli	r2,r5,20
   1eb28:	3806d53a 	srli	r3,r7,20
   1eb2c:	02000434 	movhi	r8,16
   1eb30:	423fffc4 	addi	r8,r8,-1
   1eb34:	1081ffcc 	andi	r2,r2,2047
   1eb38:	0241ffc4 	movi	r9,2047
   1eb3c:	2a14703a 	and	r10,r5,r8
   1eb40:	18c1ffcc 	andi	r3,r3,2047
   1eb44:	3a10703a 	and	r8,r7,r8
   1eb48:	280ad7fa 	srli	r5,r5,31
   1eb4c:	380ed7fa 	srli	r7,r7,31
   1eb50:	12401d26 	beq	r2,r9,1ebc8 <__gedf2+0xa4>
   1eb54:	0241ffc4 	movi	r9,2047
   1eb58:	1a401226 	beq	r3,r9,1eba4 <__gedf2+0x80>
   1eb5c:	1000081e 	bne	r2,zero,1eb80 <__gedf2+0x5c>
   1eb60:	2296b03a 	or	r11,r4,r10
   1eb64:	5813003a 	cmpeq	r9,r11,zero
   1eb68:	1800091e 	bne	r3,zero,1eb90 <__gedf2+0x6c>
   1eb6c:	3218b03a 	or	r12,r6,r8
   1eb70:	6000071e 	bne	r12,zero,1eb90 <__gedf2+0x6c>
   1eb74:	0005883a 	mov	r2,zero
   1eb78:	5800101e 	bne	r11,zero,1ebbc <__gedf2+0x98>
   1eb7c:	f800283a 	ret
   1eb80:	18000c1e 	bne	r3,zero,1ebb4 <__gedf2+0x90>
   1eb84:	3212b03a 	or	r9,r6,r8
   1eb88:	48000c26 	beq	r9,zero,1ebbc <__gedf2+0x98>
   1eb8c:	0013883a 	mov	r9,zero
   1eb90:	39c03fcc 	andi	r7,r7,255
   1eb94:	48000826 	beq	r9,zero,1ebb8 <__gedf2+0x94>
   1eb98:	38000926 	beq	r7,zero,1ebc0 <__gedf2+0x9c>
   1eb9c:	00800044 	movi	r2,1
   1eba0:	f800283a 	ret
   1eba4:	3212b03a 	or	r9,r6,r8
   1eba8:	483fec26 	beq	r9,zero,1eb5c <__alt_data_end+0xfc01eb5c>
   1ebac:	00bfff84 	movi	r2,-2
   1ebb0:	f800283a 	ret
   1ebb4:	39c03fcc 	andi	r7,r7,255
   1ebb8:	29c00626 	beq	r5,r7,1ebd4 <__gedf2+0xb0>
   1ebbc:	283ff726 	beq	r5,zero,1eb9c <__alt_data_end+0xfc01eb9c>
   1ebc0:	00bfffc4 	movi	r2,-1
   1ebc4:	f800283a 	ret
   1ebc8:	2292b03a 	or	r9,r4,r10
   1ebcc:	483fe126 	beq	r9,zero,1eb54 <__alt_data_end+0xfc01eb54>
   1ebd0:	003ff606 	br	1ebac <__alt_data_end+0xfc01ebac>
   1ebd4:	18bff916 	blt	r3,r2,1ebbc <__alt_data_end+0xfc01ebbc>
   1ebd8:	10c00316 	blt	r2,r3,1ebe8 <__gedf2+0xc4>
   1ebdc:	42bff736 	bltu	r8,r10,1ebbc <__alt_data_end+0xfc01ebbc>
   1ebe0:	52000326 	beq	r10,r8,1ebf0 <__gedf2+0xcc>
   1ebe4:	5200042e 	bgeu	r10,r8,1ebf8 <__gedf2+0xd4>
   1ebe8:	283fec1e 	bne	r5,zero,1eb9c <__alt_data_end+0xfc01eb9c>
   1ebec:	003ff406 	br	1ebc0 <__alt_data_end+0xfc01ebc0>
   1ebf0:	313ff236 	bltu	r6,r4,1ebbc <__alt_data_end+0xfc01ebbc>
   1ebf4:	21bffc36 	bltu	r4,r6,1ebe8 <__alt_data_end+0xfc01ebe8>
   1ebf8:	0005883a 	mov	r2,zero
   1ebfc:	f800283a 	ret

0001ec00 <__ledf2>:
   1ec00:	2804d53a 	srli	r2,r5,20
   1ec04:	3810d53a 	srli	r8,r7,20
   1ec08:	00c00434 	movhi	r3,16
   1ec0c:	18ffffc4 	addi	r3,r3,-1
   1ec10:	1081ffcc 	andi	r2,r2,2047
   1ec14:	0241ffc4 	movi	r9,2047
   1ec18:	28d4703a 	and	r10,r5,r3
   1ec1c:	4201ffcc 	andi	r8,r8,2047
   1ec20:	38c6703a 	and	r3,r7,r3
   1ec24:	280ad7fa 	srli	r5,r5,31
   1ec28:	380ed7fa 	srli	r7,r7,31
   1ec2c:	12401f26 	beq	r2,r9,1ecac <__ledf2+0xac>
   1ec30:	0241ffc4 	movi	r9,2047
   1ec34:	42401426 	beq	r8,r9,1ec88 <__ledf2+0x88>
   1ec38:	1000091e 	bne	r2,zero,1ec60 <__ledf2+0x60>
   1ec3c:	2296b03a 	or	r11,r4,r10
   1ec40:	5813003a 	cmpeq	r9,r11,zero
   1ec44:	29403fcc 	andi	r5,r5,255
   1ec48:	40000a1e 	bne	r8,zero,1ec74 <__ledf2+0x74>
   1ec4c:	30d8b03a 	or	r12,r6,r3
   1ec50:	6000081e 	bne	r12,zero,1ec74 <__ledf2+0x74>
   1ec54:	0005883a 	mov	r2,zero
   1ec58:	5800111e 	bne	r11,zero,1eca0 <__ledf2+0xa0>
   1ec5c:	f800283a 	ret
   1ec60:	29403fcc 	andi	r5,r5,255
   1ec64:	40000c1e 	bne	r8,zero,1ec98 <__ledf2+0x98>
   1ec68:	30d2b03a 	or	r9,r6,r3
   1ec6c:	48000c26 	beq	r9,zero,1eca0 <__ledf2+0xa0>
   1ec70:	0013883a 	mov	r9,zero
   1ec74:	39c03fcc 	andi	r7,r7,255
   1ec78:	48000826 	beq	r9,zero,1ec9c <__ledf2+0x9c>
   1ec7c:	38001126 	beq	r7,zero,1ecc4 <__ledf2+0xc4>
   1ec80:	00800044 	movi	r2,1
   1ec84:	f800283a 	ret
   1ec88:	30d2b03a 	or	r9,r6,r3
   1ec8c:	483fea26 	beq	r9,zero,1ec38 <__alt_data_end+0xfc01ec38>
   1ec90:	00800084 	movi	r2,2
   1ec94:	f800283a 	ret
   1ec98:	39c03fcc 	andi	r7,r7,255
   1ec9c:	39400726 	beq	r7,r5,1ecbc <__ledf2+0xbc>
   1eca0:	2800081e 	bne	r5,zero,1ecc4 <__ledf2+0xc4>
   1eca4:	00800044 	movi	r2,1
   1eca8:	f800283a 	ret
   1ecac:	2292b03a 	or	r9,r4,r10
   1ecb0:	483fdf26 	beq	r9,zero,1ec30 <__alt_data_end+0xfc01ec30>
   1ecb4:	00800084 	movi	r2,2
   1ecb8:	f800283a 	ret
   1ecbc:	4080030e 	bge	r8,r2,1eccc <__ledf2+0xcc>
   1ecc0:	383fef26 	beq	r7,zero,1ec80 <__alt_data_end+0xfc01ec80>
   1ecc4:	00bfffc4 	movi	r2,-1
   1ecc8:	f800283a 	ret
   1eccc:	123feb16 	blt	r2,r8,1ec7c <__alt_data_end+0xfc01ec7c>
   1ecd0:	1abff336 	bltu	r3,r10,1eca0 <__alt_data_end+0xfc01eca0>
   1ecd4:	50c00326 	beq	r10,r3,1ece4 <__ledf2+0xe4>
   1ecd8:	50c0042e 	bgeu	r10,r3,1ecec <__ledf2+0xec>
   1ecdc:	283fe81e 	bne	r5,zero,1ec80 <__alt_data_end+0xfc01ec80>
   1ece0:	003ff806 	br	1ecc4 <__alt_data_end+0xfc01ecc4>
   1ece4:	313fee36 	bltu	r6,r4,1eca0 <__alt_data_end+0xfc01eca0>
   1ece8:	21bffc36 	bltu	r4,r6,1ecdc <__alt_data_end+0xfc01ecdc>
   1ecec:	0005883a 	mov	r2,zero
   1ecf0:	f800283a 	ret

0001ecf4 <__muldf3>:
   1ecf4:	deffee04 	addi	sp,sp,-72
   1ecf8:	dd000c15 	stw	r20,48(sp)
   1ecfc:	2828d53a 	srli	r20,r5,20
   1ed00:	ddc00f15 	stw	r23,60(sp)
   1ed04:	282ed7fa 	srli	r23,r5,31
   1ed08:	dc000815 	stw	r16,32(sp)
   1ed0c:	04000434 	movhi	r16,16
   1ed10:	dcc00b15 	stw	r19,44(sp)
   1ed14:	843fffc4 	addi	r16,r16,-1
   1ed18:	dfc01115 	stw	ra,68(sp)
   1ed1c:	df001015 	stw	fp,64(sp)
   1ed20:	dd800e15 	stw	r22,56(sp)
   1ed24:	dd400d15 	stw	r21,52(sp)
   1ed28:	dc800a15 	stw	r18,40(sp)
   1ed2c:	dc400915 	stw	r17,36(sp)
   1ed30:	a501ffcc 	andi	r20,r20,2047
   1ed34:	2c20703a 	and	r16,r5,r16
   1ed38:	b827883a 	mov	r19,r23
   1ed3c:	ba403fcc 	andi	r9,r23,255
   1ed40:	a0006026 	beq	r20,zero,1eec4 <__muldf3+0x1d0>
   1ed44:	0081ffc4 	movi	r2,2047
   1ed48:	202d883a 	mov	r22,r4
   1ed4c:	a0803626 	beq	r20,r2,1ee28 <__muldf3+0x134>
   1ed50:	84000434 	orhi	r16,r16,16
   1ed54:	200ad77a 	srli	r5,r4,29
   1ed58:	800490fa 	slli	r2,r16,3
   1ed5c:	202c90fa 	slli	r22,r4,3
   1ed60:	a53f0044 	addi	r20,r20,-1023
   1ed64:	28a0b03a 	or	r16,r5,r2
   1ed68:	002b883a 	mov	r21,zero
   1ed6c:	000b883a 	mov	r5,zero
   1ed70:	3804d53a 	srli	r2,r7,20
   1ed74:	3838d7fa 	srli	fp,r7,31
   1ed78:	04400434 	movhi	r17,16
   1ed7c:	8c7fffc4 	addi	r17,r17,-1
   1ed80:	1081ffcc 	andi	r2,r2,2047
   1ed84:	3025883a 	mov	r18,r6
   1ed88:	3c62703a 	and	r17,r7,r17
   1ed8c:	e2803fcc 	andi	r10,fp,255
   1ed90:	10006d26 	beq	r2,zero,1ef48 <__muldf3+0x254>
   1ed94:	00c1ffc4 	movi	r3,2047
   1ed98:	10c06526 	beq	r2,r3,1ef30 <__muldf3+0x23c>
   1ed9c:	8c400434 	orhi	r17,r17,16
   1eda0:	300ed77a 	srli	r7,r6,29
   1eda4:	880690fa 	slli	r3,r17,3
   1eda8:	302490fa 	slli	r18,r6,3
   1edac:	10bf0044 	addi	r2,r2,-1023
   1edb0:	38e2b03a 	or	r17,r7,r3
   1edb4:	000f883a 	mov	r7,zero
   1edb8:	a087883a 	add	r3,r20,r2
   1edbc:	010003c4 	movi	r4,15
   1edc0:	3d44b03a 	or	r2,r7,r21
   1edc4:	e5ccf03a 	xor	r6,fp,r23
   1edc8:	1a000044 	addi	r8,r3,1
   1edcc:	20809b36 	bltu	r4,r2,1f03c <__muldf3+0x348>
   1edd0:	100490ba 	slli	r2,r2,2
   1edd4:	010000b4 	movhi	r4,2
   1edd8:	213b7a04 	addi	r4,r4,-4632
   1eddc:	1105883a 	add	r2,r2,r4
   1ede0:	10800017 	ldw	r2,0(r2)
   1ede4:	1000683a 	jmp	r2
   1ede8:	0001f03c 	xorhi	zero,zero,1984
   1edec:	0001ee48 	cmpgei	zero,zero,1977
   1edf0:	0001ee48 	cmpgei	zero,zero,1977
   1edf4:	0001ee44 	movi	zero,1977
   1edf8:	0001f018 	cmpnei	zero,zero,1984
   1edfc:	0001f018 	cmpnei	zero,zero,1984
   1ee00:	0001f000 	call	1f00 <_ZN3USB13AttemptConfigEhhhb+0x194>
   1ee04:	0001ee44 	movi	zero,1977
   1ee08:	0001f018 	cmpnei	zero,zero,1984
   1ee0c:	0001f000 	call	1f00 <_ZN3USB13AttemptConfigEhhhb+0x194>
   1ee10:	0001f018 	cmpnei	zero,zero,1984
   1ee14:	0001ee44 	movi	zero,1977
   1ee18:	0001f028 	cmpgeui	zero,zero,1984
   1ee1c:	0001f028 	cmpgeui	zero,zero,1984
   1ee20:	0001f028 	cmpgeui	zero,zero,1984
   1ee24:	0001f388 	cmpgei	zero,zero,1998
   1ee28:	2404b03a 	or	r2,r4,r16
   1ee2c:	1000711e 	bne	r2,zero,1eff4 <__muldf3+0x300>
   1ee30:	05400204 	movi	r21,8
   1ee34:	0021883a 	mov	r16,zero
   1ee38:	002d883a 	mov	r22,zero
   1ee3c:	01400084 	movi	r5,2
   1ee40:	003fcb06 	br	1ed70 <__alt_data_end+0xfc01ed70>
   1ee44:	500d883a 	mov	r6,r10
   1ee48:	00800084 	movi	r2,2
   1ee4c:	38805926 	beq	r7,r2,1efb4 <__muldf3+0x2c0>
   1ee50:	008000c4 	movi	r2,3
   1ee54:	3881bb26 	beq	r7,r2,1f544 <__muldf3+0x850>
   1ee58:	00800044 	movi	r2,1
   1ee5c:	3881961e 	bne	r7,r2,1f4b8 <__muldf3+0x7c4>
   1ee60:	3027883a 	mov	r19,r6
   1ee64:	0005883a 	mov	r2,zero
   1ee68:	0021883a 	mov	r16,zero
   1ee6c:	002d883a 	mov	r22,zero
   1ee70:	1004953a 	slli	r2,r2,20
   1ee74:	98c03fcc 	andi	r3,r19,255
   1ee78:	04400434 	movhi	r17,16
   1ee7c:	8c7fffc4 	addi	r17,r17,-1
   1ee80:	180697fa 	slli	r3,r3,31
   1ee84:	8460703a 	and	r16,r16,r17
   1ee88:	80a0b03a 	or	r16,r16,r2
   1ee8c:	80c6b03a 	or	r3,r16,r3
   1ee90:	b005883a 	mov	r2,r22
   1ee94:	dfc01117 	ldw	ra,68(sp)
   1ee98:	df001017 	ldw	fp,64(sp)
   1ee9c:	ddc00f17 	ldw	r23,60(sp)
   1eea0:	dd800e17 	ldw	r22,56(sp)
   1eea4:	dd400d17 	ldw	r21,52(sp)
   1eea8:	dd000c17 	ldw	r20,48(sp)
   1eeac:	dcc00b17 	ldw	r19,44(sp)
   1eeb0:	dc800a17 	ldw	r18,40(sp)
   1eeb4:	dc400917 	ldw	r17,36(sp)
   1eeb8:	dc000817 	ldw	r16,32(sp)
   1eebc:	dec01204 	addi	sp,sp,72
   1eec0:	f800283a 	ret
   1eec4:	2404b03a 	or	r2,r4,r16
   1eec8:	202b883a 	mov	r21,r4
   1eecc:	10004426 	beq	r2,zero,1efe0 <__muldf3+0x2ec>
   1eed0:	80015126 	beq	r16,zero,1f418 <__muldf3+0x724>
   1eed4:	8009883a 	mov	r4,r16
   1eed8:	d9800715 	stw	r6,28(sp)
   1eedc:	d9c00215 	stw	r7,8(sp)
   1eee0:	da400415 	stw	r9,16(sp)
   1eee4:	000f4ec0 	call	f4ec <__clzsi2>
   1eee8:	d9800717 	ldw	r6,28(sp)
   1eeec:	d9c00217 	ldw	r7,8(sp)
   1eef0:	da400417 	ldw	r9,16(sp)
   1eef4:	113ffd44 	addi	r4,r2,-11
   1eef8:	00c00704 	movi	r3,28
   1eefc:	19014216 	blt	r3,r4,1f408 <__muldf3+0x714>
   1ef00:	00c00744 	movi	r3,29
   1ef04:	15bffe04 	addi	r22,r2,-8
   1ef08:	1907c83a 	sub	r3,r3,r4
   1ef0c:	85a0983a 	sll	r16,r16,r22
   1ef10:	a8c6d83a 	srl	r3,r21,r3
   1ef14:	adac983a 	sll	r22,r21,r22
   1ef18:	1c20b03a 	or	r16,r3,r16
   1ef1c:	1080fcc4 	addi	r2,r2,1011
   1ef20:	00a9c83a 	sub	r20,zero,r2
   1ef24:	002b883a 	mov	r21,zero
   1ef28:	000b883a 	mov	r5,zero
   1ef2c:	003f9006 	br	1ed70 <__alt_data_end+0xfc01ed70>
   1ef30:	3446b03a 	or	r3,r6,r17
   1ef34:	1800281e 	bne	r3,zero,1efd8 <__muldf3+0x2e4>
   1ef38:	0023883a 	mov	r17,zero
   1ef3c:	0025883a 	mov	r18,zero
   1ef40:	01c00084 	movi	r7,2
   1ef44:	003f9c06 	br	1edb8 <__alt_data_end+0xfc01edb8>
   1ef48:	3446b03a 	or	r3,r6,r17
   1ef4c:	18001e26 	beq	r3,zero,1efc8 <__muldf3+0x2d4>
   1ef50:	88012126 	beq	r17,zero,1f3d8 <__muldf3+0x6e4>
   1ef54:	8809883a 	mov	r4,r17
   1ef58:	d9400215 	stw	r5,8(sp)
   1ef5c:	d9800715 	stw	r6,28(sp)
   1ef60:	da400415 	stw	r9,16(sp)
   1ef64:	da800315 	stw	r10,12(sp)
   1ef68:	000f4ec0 	call	f4ec <__clzsi2>
   1ef6c:	d9400217 	ldw	r5,8(sp)
   1ef70:	d9800717 	ldw	r6,28(sp)
   1ef74:	da400417 	ldw	r9,16(sp)
   1ef78:	da800317 	ldw	r10,12(sp)
   1ef7c:	113ffd44 	addi	r4,r2,-11
   1ef80:	00c00704 	movi	r3,28
   1ef84:	19011016 	blt	r3,r4,1f3c8 <__muldf3+0x6d4>
   1ef88:	00c00744 	movi	r3,29
   1ef8c:	14bffe04 	addi	r18,r2,-8
   1ef90:	1907c83a 	sub	r3,r3,r4
   1ef94:	8ca2983a 	sll	r17,r17,r18
   1ef98:	30c6d83a 	srl	r3,r6,r3
   1ef9c:	34a4983a 	sll	r18,r6,r18
   1efa0:	1c62b03a 	or	r17,r3,r17
   1efa4:	1080fcc4 	addi	r2,r2,1011
   1efa8:	0085c83a 	sub	r2,zero,r2
   1efac:	000f883a 	mov	r7,zero
   1efb0:	003f8106 	br	1edb8 <__alt_data_end+0xfc01edb8>
   1efb4:	3027883a 	mov	r19,r6
   1efb8:	0081ffc4 	movi	r2,2047
   1efbc:	0021883a 	mov	r16,zero
   1efc0:	002d883a 	mov	r22,zero
   1efc4:	003faa06 	br	1ee70 <__alt_data_end+0xfc01ee70>
   1efc8:	0023883a 	mov	r17,zero
   1efcc:	0025883a 	mov	r18,zero
   1efd0:	01c00044 	movi	r7,1
   1efd4:	003f7806 	br	1edb8 <__alt_data_end+0xfc01edb8>
   1efd8:	01c000c4 	movi	r7,3
   1efdc:	003f7606 	br	1edb8 <__alt_data_end+0xfc01edb8>
   1efe0:	05400104 	movi	r21,4
   1efe4:	0021883a 	mov	r16,zero
   1efe8:	002d883a 	mov	r22,zero
   1efec:	01400044 	movi	r5,1
   1eff0:	003f5f06 	br	1ed70 <__alt_data_end+0xfc01ed70>
   1eff4:	05400304 	movi	r21,12
   1eff8:	014000c4 	movi	r5,3
   1effc:	003f5c06 	br	1ed70 <__alt_data_end+0xfc01ed70>
   1f000:	04000434 	movhi	r16,16
   1f004:	0027883a 	mov	r19,zero
   1f008:	843fffc4 	addi	r16,r16,-1
   1f00c:	05bfffc4 	movi	r22,-1
   1f010:	0081ffc4 	movi	r2,2047
   1f014:	003f9606 	br	1ee70 <__alt_data_end+0xfc01ee70>
   1f018:	8023883a 	mov	r17,r16
   1f01c:	b025883a 	mov	r18,r22
   1f020:	280f883a 	mov	r7,r5
   1f024:	003f8806 	br	1ee48 <__alt_data_end+0xfc01ee48>
   1f028:	8023883a 	mov	r17,r16
   1f02c:	b025883a 	mov	r18,r22
   1f030:	480d883a 	mov	r6,r9
   1f034:	280f883a 	mov	r7,r5
   1f038:	003f8306 	br	1ee48 <__alt_data_end+0xfc01ee48>
   1f03c:	b026d43a 	srli	r19,r22,16
   1f040:	902ed43a 	srli	r23,r18,16
   1f044:	b5bfffcc 	andi	r22,r22,65535
   1f048:	94bfffcc 	andi	r18,r18,65535
   1f04c:	b00b883a 	mov	r5,r22
   1f050:	9009883a 	mov	r4,r18
   1f054:	d8c00515 	stw	r3,20(sp)
   1f058:	d9800715 	stw	r6,28(sp)
   1f05c:	da000615 	stw	r8,24(sp)
   1f060:	000d9380 	call	d938 <__mulsi3>
   1f064:	980b883a 	mov	r5,r19
   1f068:	9009883a 	mov	r4,r18
   1f06c:	1029883a 	mov	r20,r2
   1f070:	000d9380 	call	d938 <__mulsi3>
   1f074:	b80b883a 	mov	r5,r23
   1f078:	9809883a 	mov	r4,r19
   1f07c:	102b883a 	mov	r21,r2
   1f080:	000d9380 	call	d938 <__mulsi3>
   1f084:	b809883a 	mov	r4,r23
   1f088:	b00b883a 	mov	r5,r22
   1f08c:	1039883a 	mov	fp,r2
   1f090:	000d9380 	call	d938 <__mulsi3>
   1f094:	a008d43a 	srli	r4,r20,16
   1f098:	1545883a 	add	r2,r2,r21
   1f09c:	d8c00517 	ldw	r3,20(sp)
   1f0a0:	2085883a 	add	r2,r4,r2
   1f0a4:	d9800717 	ldw	r6,28(sp)
   1f0a8:	da000617 	ldw	r8,24(sp)
   1f0ac:	1540022e 	bgeu	r2,r21,1f0b8 <__muldf3+0x3c4>
   1f0b0:	01000074 	movhi	r4,1
   1f0b4:	e139883a 	add	fp,fp,r4
   1f0b8:	100e943a 	slli	r7,r2,16
   1f0bc:	1004d43a 	srli	r2,r2,16
   1f0c0:	882ad43a 	srli	r21,r17,16
   1f0c4:	a53fffcc 	andi	r20,r20,65535
   1f0c8:	8c7fffcc 	andi	r17,r17,65535
   1f0cc:	3d29883a 	add	r20,r7,r20
   1f0d0:	b00b883a 	mov	r5,r22
   1f0d4:	8809883a 	mov	r4,r17
   1f0d8:	d8c00515 	stw	r3,20(sp)
   1f0dc:	d9800715 	stw	r6,28(sp)
   1f0e0:	da000615 	stw	r8,24(sp)
   1f0e4:	dd000115 	stw	r20,4(sp)
   1f0e8:	d8800015 	stw	r2,0(sp)
   1f0ec:	000d9380 	call	d938 <__mulsi3>
   1f0f0:	980b883a 	mov	r5,r19
   1f0f4:	8809883a 	mov	r4,r17
   1f0f8:	d8800215 	stw	r2,8(sp)
   1f0fc:	000d9380 	call	d938 <__mulsi3>
   1f100:	9809883a 	mov	r4,r19
   1f104:	a80b883a 	mov	r5,r21
   1f108:	1029883a 	mov	r20,r2
   1f10c:	000d9380 	call	d938 <__mulsi3>
   1f110:	b00b883a 	mov	r5,r22
   1f114:	a809883a 	mov	r4,r21
   1f118:	d8800415 	stw	r2,16(sp)
   1f11c:	000d9380 	call	d938 <__mulsi3>
   1f120:	d9c00217 	ldw	r7,8(sp)
   1f124:	1505883a 	add	r2,r2,r20
   1f128:	d8c00517 	ldw	r3,20(sp)
   1f12c:	3826d43a 	srli	r19,r7,16
   1f130:	d9800717 	ldw	r6,28(sp)
   1f134:	da000617 	ldw	r8,24(sp)
   1f138:	9885883a 	add	r2,r19,r2
   1f13c:	da400417 	ldw	r9,16(sp)
   1f140:	1500022e 	bgeu	r2,r20,1f14c <__muldf3+0x458>
   1f144:	01000074 	movhi	r4,1
   1f148:	4913883a 	add	r9,r9,r4
   1f14c:	1028d43a 	srli	r20,r2,16
   1f150:	1004943a 	slli	r2,r2,16
   1f154:	802cd43a 	srli	r22,r16,16
   1f158:	843fffcc 	andi	r16,r16,65535
   1f15c:	3cffffcc 	andi	r19,r7,65535
   1f160:	9009883a 	mov	r4,r18
   1f164:	800b883a 	mov	r5,r16
   1f168:	a269883a 	add	r20,r20,r9
   1f16c:	d8c00515 	stw	r3,20(sp)
   1f170:	d9800715 	stw	r6,28(sp)
   1f174:	da000615 	stw	r8,24(sp)
   1f178:	14e7883a 	add	r19,r2,r19
   1f17c:	000d9380 	call	d938 <__mulsi3>
   1f180:	9009883a 	mov	r4,r18
   1f184:	b00b883a 	mov	r5,r22
   1f188:	d8800315 	stw	r2,12(sp)
   1f18c:	000d9380 	call	d938 <__mulsi3>
   1f190:	b809883a 	mov	r4,r23
   1f194:	b00b883a 	mov	r5,r22
   1f198:	d8800215 	stw	r2,8(sp)
   1f19c:	000d9380 	call	d938 <__mulsi3>
   1f1a0:	b80b883a 	mov	r5,r23
   1f1a4:	8009883a 	mov	r4,r16
   1f1a8:	d8800415 	stw	r2,16(sp)
   1f1ac:	000d9380 	call	d938 <__mulsi3>
   1f1b0:	da800317 	ldw	r10,12(sp)
   1f1b4:	d9c00217 	ldw	r7,8(sp)
   1f1b8:	d9000017 	ldw	r4,0(sp)
   1f1bc:	502ed43a 	srli	r23,r10,16
   1f1c0:	11c5883a 	add	r2,r2,r7
   1f1c4:	24e5883a 	add	r18,r4,r19
   1f1c8:	b885883a 	add	r2,r23,r2
   1f1cc:	d8c00517 	ldw	r3,20(sp)
   1f1d0:	d9800717 	ldw	r6,28(sp)
   1f1d4:	da000617 	ldw	r8,24(sp)
   1f1d8:	da400417 	ldw	r9,16(sp)
   1f1dc:	11c0022e 	bgeu	r2,r7,1f1e8 <__muldf3+0x4f4>
   1f1e0:	01000074 	movhi	r4,1
   1f1e4:	4913883a 	add	r9,r9,r4
   1f1e8:	100ed43a 	srli	r7,r2,16
   1f1ec:	1004943a 	slli	r2,r2,16
   1f1f0:	55ffffcc 	andi	r23,r10,65535
   1f1f4:	3a53883a 	add	r9,r7,r9
   1f1f8:	8809883a 	mov	r4,r17
   1f1fc:	800b883a 	mov	r5,r16
   1f200:	d8c00515 	stw	r3,20(sp)
   1f204:	d9800715 	stw	r6,28(sp)
   1f208:	da000615 	stw	r8,24(sp)
   1f20c:	da400415 	stw	r9,16(sp)
   1f210:	15ef883a 	add	r23,r2,r23
   1f214:	000d9380 	call	d938 <__mulsi3>
   1f218:	8809883a 	mov	r4,r17
   1f21c:	b00b883a 	mov	r5,r22
   1f220:	d8800215 	stw	r2,8(sp)
   1f224:	000d9380 	call	d938 <__mulsi3>
   1f228:	b00b883a 	mov	r5,r22
   1f22c:	a809883a 	mov	r4,r21
   1f230:	d8800315 	stw	r2,12(sp)
   1f234:	000d9380 	call	d938 <__mulsi3>
   1f238:	8009883a 	mov	r4,r16
   1f23c:	a80b883a 	mov	r5,r21
   1f240:	1023883a 	mov	r17,r2
   1f244:	000d9380 	call	d938 <__mulsi3>
   1f248:	d9c00217 	ldw	r7,8(sp)
   1f24c:	da800317 	ldw	r10,12(sp)
   1f250:	d8c00517 	ldw	r3,20(sp)
   1f254:	3808d43a 	srli	r4,r7,16
   1f258:	1285883a 	add	r2,r2,r10
   1f25c:	d9800717 	ldw	r6,28(sp)
   1f260:	2085883a 	add	r2,r4,r2
   1f264:	da000617 	ldw	r8,24(sp)
   1f268:	da400417 	ldw	r9,16(sp)
   1f26c:	1280022e 	bgeu	r2,r10,1f278 <__muldf3+0x584>
   1f270:	01000074 	movhi	r4,1
   1f274:	8923883a 	add	r17,r17,r4
   1f278:	1008943a 	slli	r4,r2,16
   1f27c:	39ffffcc 	andi	r7,r7,65535
   1f280:	e4b9883a 	add	fp,fp,r18
   1f284:	21cf883a 	add	r7,r4,r7
   1f288:	e4e7803a 	cmpltu	r19,fp,r19
   1f28c:	3d0f883a 	add	r7,r7,r20
   1f290:	bf39883a 	add	fp,r23,fp
   1f294:	99c9883a 	add	r4,r19,r7
   1f298:	e5ef803a 	cmpltu	r23,fp,r23
   1f29c:	490b883a 	add	r5,r9,r4
   1f2a0:	1004d43a 	srli	r2,r2,16
   1f2a4:	b965883a 	add	r18,r23,r5
   1f2a8:	24c9803a 	cmpltu	r4,r4,r19
   1f2ac:	3d29803a 	cmpltu	r20,r7,r20
   1f2b0:	a128b03a 	or	r20,r20,r4
   1f2b4:	95ef803a 	cmpltu	r23,r18,r23
   1f2b8:	2a53803a 	cmpltu	r9,r5,r9
   1f2bc:	a0a9883a 	add	r20,r20,r2
   1f2c0:	4deeb03a 	or	r23,r9,r23
   1f2c4:	a5ef883a 	add	r23,r20,r23
   1f2c8:	bc63883a 	add	r17,r23,r17
   1f2cc:	e004927a 	slli	r2,fp,9
   1f2d0:	d9000117 	ldw	r4,4(sp)
   1f2d4:	882e927a 	slli	r23,r17,9
   1f2d8:	9022d5fa 	srli	r17,r18,23
   1f2dc:	e038d5fa 	srli	fp,fp,23
   1f2e0:	1104b03a 	or	r2,r2,r4
   1f2e4:	9024927a 	slli	r18,r18,9
   1f2e8:	1004c03a 	cmpne	r2,r2,zero
   1f2ec:	bc62b03a 	or	r17,r23,r17
   1f2f0:	1738b03a 	or	fp,r2,fp
   1f2f4:	8880402c 	andhi	r2,r17,256
   1f2f8:	e4a4b03a 	or	r18,fp,r18
   1f2fc:	10000726 	beq	r2,zero,1f31c <__muldf3+0x628>
   1f300:	9006d07a 	srli	r3,r18,1
   1f304:	880497fa 	slli	r2,r17,31
   1f308:	9480004c 	andi	r18,r18,1
   1f30c:	8822d07a 	srli	r17,r17,1
   1f310:	1ca4b03a 	or	r18,r3,r18
   1f314:	14a4b03a 	or	r18,r2,r18
   1f318:	4007883a 	mov	r3,r8
   1f31c:	1880ffc4 	addi	r2,r3,1023
   1f320:	0080460e 	bge	zero,r2,1f43c <__muldf3+0x748>
   1f324:	910001cc 	andi	r4,r18,7
   1f328:	20000726 	beq	r4,zero,1f348 <__muldf3+0x654>
   1f32c:	910003cc 	andi	r4,r18,15
   1f330:	01400104 	movi	r5,4
   1f334:	21400426 	beq	r4,r5,1f348 <__muldf3+0x654>
   1f338:	9149883a 	add	r4,r18,r5
   1f33c:	24a5803a 	cmpltu	r18,r4,r18
   1f340:	8ca3883a 	add	r17,r17,r18
   1f344:	2025883a 	mov	r18,r4
   1f348:	8900402c 	andhi	r4,r17,256
   1f34c:	20000426 	beq	r4,zero,1f360 <__muldf3+0x66c>
   1f350:	18810004 	addi	r2,r3,1024
   1f354:	00ffc034 	movhi	r3,65280
   1f358:	18ffffc4 	addi	r3,r3,-1
   1f35c:	88e2703a 	and	r17,r17,r3
   1f360:	00c1ff84 	movi	r3,2046
   1f364:	18bf1316 	blt	r3,r2,1efb4 <__alt_data_end+0xfc01efb4>
   1f368:	882c977a 	slli	r22,r17,29
   1f36c:	9024d0fa 	srli	r18,r18,3
   1f370:	8822927a 	slli	r17,r17,9
   1f374:	1081ffcc 	andi	r2,r2,2047
   1f378:	b4acb03a 	or	r22,r22,r18
   1f37c:	8820d33a 	srli	r16,r17,12
   1f380:	3027883a 	mov	r19,r6
   1f384:	003eba06 	br	1ee70 <__alt_data_end+0xfc01ee70>
   1f388:	8080022c 	andhi	r2,r16,8
   1f38c:	10000926 	beq	r2,zero,1f3b4 <__muldf3+0x6c0>
   1f390:	8880022c 	andhi	r2,r17,8
   1f394:	1000071e 	bne	r2,zero,1f3b4 <__muldf3+0x6c0>
   1f398:	00800434 	movhi	r2,16
   1f39c:	8c000234 	orhi	r16,r17,8
   1f3a0:	10bfffc4 	addi	r2,r2,-1
   1f3a4:	e027883a 	mov	r19,fp
   1f3a8:	80a0703a 	and	r16,r16,r2
   1f3ac:	902d883a 	mov	r22,r18
   1f3b0:	003f1706 	br	1f010 <__alt_data_end+0xfc01f010>
   1f3b4:	00800434 	movhi	r2,16
   1f3b8:	84000234 	orhi	r16,r16,8
   1f3bc:	10bfffc4 	addi	r2,r2,-1
   1f3c0:	80a0703a 	and	r16,r16,r2
   1f3c4:	003f1206 	br	1f010 <__alt_data_end+0xfc01f010>
   1f3c8:	147ff604 	addi	r17,r2,-40
   1f3cc:	3462983a 	sll	r17,r6,r17
   1f3d0:	0025883a 	mov	r18,zero
   1f3d4:	003ef306 	br	1efa4 <__alt_data_end+0xfc01efa4>
   1f3d8:	3009883a 	mov	r4,r6
   1f3dc:	d9400215 	stw	r5,8(sp)
   1f3e0:	d9800715 	stw	r6,28(sp)
   1f3e4:	da400415 	stw	r9,16(sp)
   1f3e8:	da800315 	stw	r10,12(sp)
   1f3ec:	000f4ec0 	call	f4ec <__clzsi2>
   1f3f0:	10800804 	addi	r2,r2,32
   1f3f4:	da800317 	ldw	r10,12(sp)
   1f3f8:	da400417 	ldw	r9,16(sp)
   1f3fc:	d9800717 	ldw	r6,28(sp)
   1f400:	d9400217 	ldw	r5,8(sp)
   1f404:	003edd06 	br	1ef7c <__alt_data_end+0xfc01ef7c>
   1f408:	143ff604 	addi	r16,r2,-40
   1f40c:	ac20983a 	sll	r16,r21,r16
   1f410:	002d883a 	mov	r22,zero
   1f414:	003ec106 	br	1ef1c <__alt_data_end+0xfc01ef1c>
   1f418:	d9800715 	stw	r6,28(sp)
   1f41c:	d9c00215 	stw	r7,8(sp)
   1f420:	da400415 	stw	r9,16(sp)
   1f424:	000f4ec0 	call	f4ec <__clzsi2>
   1f428:	10800804 	addi	r2,r2,32
   1f42c:	da400417 	ldw	r9,16(sp)
   1f430:	d9c00217 	ldw	r7,8(sp)
   1f434:	d9800717 	ldw	r6,28(sp)
   1f438:	003eae06 	br	1eef4 <__alt_data_end+0xfc01eef4>
   1f43c:	00c00044 	movi	r3,1
   1f440:	1887c83a 	sub	r3,r3,r2
   1f444:	01000e04 	movi	r4,56
   1f448:	20fe8516 	blt	r4,r3,1ee60 <__alt_data_end+0xfc01ee60>
   1f44c:	010007c4 	movi	r4,31
   1f450:	20c01b16 	blt	r4,r3,1f4c0 <__muldf3+0x7cc>
   1f454:	00800804 	movi	r2,32
   1f458:	10c5c83a 	sub	r2,r2,r3
   1f45c:	888a983a 	sll	r5,r17,r2
   1f460:	90c8d83a 	srl	r4,r18,r3
   1f464:	9084983a 	sll	r2,r18,r2
   1f468:	88e2d83a 	srl	r17,r17,r3
   1f46c:	2906b03a 	or	r3,r5,r4
   1f470:	1004c03a 	cmpne	r2,r2,zero
   1f474:	1886b03a 	or	r3,r3,r2
   1f478:	188001cc 	andi	r2,r3,7
   1f47c:	10000726 	beq	r2,zero,1f49c <__muldf3+0x7a8>
   1f480:	188003cc 	andi	r2,r3,15
   1f484:	01000104 	movi	r4,4
   1f488:	11000426 	beq	r2,r4,1f49c <__muldf3+0x7a8>
   1f48c:	1805883a 	mov	r2,r3
   1f490:	10c00104 	addi	r3,r2,4
   1f494:	1885803a 	cmpltu	r2,r3,r2
   1f498:	88a3883a 	add	r17,r17,r2
   1f49c:	8880202c 	andhi	r2,r17,128
   1f4a0:	10001c26 	beq	r2,zero,1f514 <__muldf3+0x820>
   1f4a4:	3027883a 	mov	r19,r6
   1f4a8:	00800044 	movi	r2,1
   1f4ac:	0021883a 	mov	r16,zero
   1f4b0:	002d883a 	mov	r22,zero
   1f4b4:	003e6e06 	br	1ee70 <__alt_data_end+0xfc01ee70>
   1f4b8:	4007883a 	mov	r3,r8
   1f4bc:	003f9706 	br	1f31c <__alt_data_end+0xfc01f31c>
   1f4c0:	017ff844 	movi	r5,-31
   1f4c4:	2885c83a 	sub	r2,r5,r2
   1f4c8:	888ad83a 	srl	r5,r17,r2
   1f4cc:	00800804 	movi	r2,32
   1f4d0:	18801a26 	beq	r3,r2,1f53c <__muldf3+0x848>
   1f4d4:	01001004 	movi	r4,64
   1f4d8:	20c7c83a 	sub	r3,r4,r3
   1f4dc:	88e2983a 	sll	r17,r17,r3
   1f4e0:	8ca4b03a 	or	r18,r17,r18
   1f4e4:	9004c03a 	cmpne	r2,r18,zero
   1f4e8:	2884b03a 	or	r2,r5,r2
   1f4ec:	144001cc 	andi	r17,r2,7
   1f4f0:	88000d1e 	bne	r17,zero,1f528 <__muldf3+0x834>
   1f4f4:	0021883a 	mov	r16,zero
   1f4f8:	102cd0fa 	srli	r22,r2,3
   1f4fc:	3027883a 	mov	r19,r6
   1f500:	0005883a 	mov	r2,zero
   1f504:	b46cb03a 	or	r22,r22,r17
   1f508:	003e5906 	br	1ee70 <__alt_data_end+0xfc01ee70>
   1f50c:	1007883a 	mov	r3,r2
   1f510:	0023883a 	mov	r17,zero
   1f514:	8820927a 	slli	r16,r17,9
   1f518:	1805883a 	mov	r2,r3
   1f51c:	8822977a 	slli	r17,r17,29
   1f520:	8020d33a 	srli	r16,r16,12
   1f524:	003ff406 	br	1f4f8 <__alt_data_end+0xfc01f4f8>
   1f528:	10c003cc 	andi	r3,r2,15
   1f52c:	01000104 	movi	r4,4
   1f530:	193ff626 	beq	r3,r4,1f50c <__alt_data_end+0xfc01f50c>
   1f534:	0023883a 	mov	r17,zero
   1f538:	003fd506 	br	1f490 <__alt_data_end+0xfc01f490>
   1f53c:	0023883a 	mov	r17,zero
   1f540:	003fe706 	br	1f4e0 <__alt_data_end+0xfc01f4e0>
   1f544:	00800434 	movhi	r2,16
   1f548:	8c000234 	orhi	r16,r17,8
   1f54c:	10bfffc4 	addi	r2,r2,-1
   1f550:	3027883a 	mov	r19,r6
   1f554:	80a0703a 	and	r16,r16,r2
   1f558:	902d883a 	mov	r22,r18
   1f55c:	003eac06 	br	1f010 <__alt_data_end+0xfc01f010>

0001f560 <__subdf3>:
   1f560:	02000434 	movhi	r8,16
   1f564:	423fffc4 	addi	r8,r8,-1
   1f568:	defffb04 	addi	sp,sp,-20
   1f56c:	2a14703a 	and	r10,r5,r8
   1f570:	3812d53a 	srli	r9,r7,20
   1f574:	3a10703a 	and	r8,r7,r8
   1f578:	2006d77a 	srli	r3,r4,29
   1f57c:	3004d77a 	srli	r2,r6,29
   1f580:	dc000015 	stw	r16,0(sp)
   1f584:	501490fa 	slli	r10,r10,3
   1f588:	2820d53a 	srli	r16,r5,20
   1f58c:	401090fa 	slli	r8,r8,3
   1f590:	dc800215 	stw	r18,8(sp)
   1f594:	dc400115 	stw	r17,4(sp)
   1f598:	dfc00415 	stw	ra,16(sp)
   1f59c:	202290fa 	slli	r17,r4,3
   1f5a0:	dcc00315 	stw	r19,12(sp)
   1f5a4:	4a41ffcc 	andi	r9,r9,2047
   1f5a8:	0101ffc4 	movi	r4,2047
   1f5ac:	2824d7fa 	srli	r18,r5,31
   1f5b0:	8401ffcc 	andi	r16,r16,2047
   1f5b4:	50c6b03a 	or	r3,r10,r3
   1f5b8:	380ed7fa 	srli	r7,r7,31
   1f5bc:	408ab03a 	or	r5,r8,r2
   1f5c0:	300c90fa 	slli	r6,r6,3
   1f5c4:	49009626 	beq	r9,r4,1f820 <__subdf3+0x2c0>
   1f5c8:	39c0005c 	xori	r7,r7,1
   1f5cc:	8245c83a 	sub	r2,r16,r9
   1f5d0:	3c807426 	beq	r7,r18,1f7a4 <__subdf3+0x244>
   1f5d4:	0080af0e 	bge	zero,r2,1f894 <__subdf3+0x334>
   1f5d8:	48002a1e 	bne	r9,zero,1f684 <__subdf3+0x124>
   1f5dc:	2988b03a 	or	r4,r5,r6
   1f5e0:	20009a1e 	bne	r4,zero,1f84c <__subdf3+0x2ec>
   1f5e4:	888001cc 	andi	r2,r17,7
   1f5e8:	10000726 	beq	r2,zero,1f608 <__subdf3+0xa8>
   1f5ec:	888003cc 	andi	r2,r17,15
   1f5f0:	01000104 	movi	r4,4
   1f5f4:	11000426 	beq	r2,r4,1f608 <__subdf3+0xa8>
   1f5f8:	890b883a 	add	r5,r17,r4
   1f5fc:	2c63803a 	cmpltu	r17,r5,r17
   1f600:	1c47883a 	add	r3,r3,r17
   1f604:	2823883a 	mov	r17,r5
   1f608:	1880202c 	andhi	r2,r3,128
   1f60c:	10005926 	beq	r2,zero,1f774 <__subdf3+0x214>
   1f610:	84000044 	addi	r16,r16,1
   1f614:	0081ffc4 	movi	r2,2047
   1f618:	8080be26 	beq	r16,r2,1f914 <__subdf3+0x3b4>
   1f61c:	017fe034 	movhi	r5,65408
   1f620:	297fffc4 	addi	r5,r5,-1
   1f624:	1946703a 	and	r3,r3,r5
   1f628:	1804977a 	slli	r2,r3,29
   1f62c:	1806927a 	slli	r3,r3,9
   1f630:	8822d0fa 	srli	r17,r17,3
   1f634:	8401ffcc 	andi	r16,r16,2047
   1f638:	180ad33a 	srli	r5,r3,12
   1f63c:	9100004c 	andi	r4,r18,1
   1f640:	1444b03a 	or	r2,r2,r17
   1f644:	80c1ffcc 	andi	r3,r16,2047
   1f648:	1820953a 	slli	r16,r3,20
   1f64c:	20c03fcc 	andi	r3,r4,255
   1f650:	180897fa 	slli	r4,r3,31
   1f654:	00c00434 	movhi	r3,16
   1f658:	18ffffc4 	addi	r3,r3,-1
   1f65c:	28c6703a 	and	r3,r5,r3
   1f660:	1c06b03a 	or	r3,r3,r16
   1f664:	1906b03a 	or	r3,r3,r4
   1f668:	dfc00417 	ldw	ra,16(sp)
   1f66c:	dcc00317 	ldw	r19,12(sp)
   1f670:	dc800217 	ldw	r18,8(sp)
   1f674:	dc400117 	ldw	r17,4(sp)
   1f678:	dc000017 	ldw	r16,0(sp)
   1f67c:	dec00504 	addi	sp,sp,20
   1f680:	f800283a 	ret
   1f684:	0101ffc4 	movi	r4,2047
   1f688:	813fd626 	beq	r16,r4,1f5e4 <__alt_data_end+0xfc01f5e4>
   1f68c:	29402034 	orhi	r5,r5,128
   1f690:	01000e04 	movi	r4,56
   1f694:	2080a316 	blt	r4,r2,1f924 <__subdf3+0x3c4>
   1f698:	010007c4 	movi	r4,31
   1f69c:	2080c616 	blt	r4,r2,1f9b8 <__subdf3+0x458>
   1f6a0:	01000804 	movi	r4,32
   1f6a4:	2089c83a 	sub	r4,r4,r2
   1f6a8:	2910983a 	sll	r8,r5,r4
   1f6ac:	308ed83a 	srl	r7,r6,r2
   1f6b0:	3108983a 	sll	r4,r6,r4
   1f6b4:	2884d83a 	srl	r2,r5,r2
   1f6b8:	41ccb03a 	or	r6,r8,r7
   1f6bc:	2008c03a 	cmpne	r4,r4,zero
   1f6c0:	310cb03a 	or	r6,r6,r4
   1f6c4:	898dc83a 	sub	r6,r17,r6
   1f6c8:	89a3803a 	cmpltu	r17,r17,r6
   1f6cc:	1887c83a 	sub	r3,r3,r2
   1f6d0:	1c47c83a 	sub	r3,r3,r17
   1f6d4:	3023883a 	mov	r17,r6
   1f6d8:	1880202c 	andhi	r2,r3,128
   1f6dc:	10002326 	beq	r2,zero,1f76c <__subdf3+0x20c>
   1f6e0:	04c02034 	movhi	r19,128
   1f6e4:	9cffffc4 	addi	r19,r19,-1
   1f6e8:	1ce6703a 	and	r19,r3,r19
   1f6ec:	98007a26 	beq	r19,zero,1f8d8 <__subdf3+0x378>
   1f6f0:	9809883a 	mov	r4,r19
   1f6f4:	000f4ec0 	call	f4ec <__clzsi2>
   1f6f8:	113ffe04 	addi	r4,r2,-8
   1f6fc:	00c007c4 	movi	r3,31
   1f700:	19007b16 	blt	r3,r4,1f8f0 <__subdf3+0x390>
   1f704:	00800804 	movi	r2,32
   1f708:	1105c83a 	sub	r2,r2,r4
   1f70c:	8884d83a 	srl	r2,r17,r2
   1f710:	9906983a 	sll	r3,r19,r4
   1f714:	8922983a 	sll	r17,r17,r4
   1f718:	10c4b03a 	or	r2,r2,r3
   1f71c:	24007816 	blt	r4,r16,1f900 <__subdf3+0x3a0>
   1f720:	2421c83a 	sub	r16,r4,r16
   1f724:	80c00044 	addi	r3,r16,1
   1f728:	010007c4 	movi	r4,31
   1f72c:	20c09516 	blt	r4,r3,1f984 <__subdf3+0x424>
   1f730:	01400804 	movi	r5,32
   1f734:	28cbc83a 	sub	r5,r5,r3
   1f738:	88c8d83a 	srl	r4,r17,r3
   1f73c:	8962983a 	sll	r17,r17,r5
   1f740:	114a983a 	sll	r5,r2,r5
   1f744:	10c6d83a 	srl	r3,r2,r3
   1f748:	8804c03a 	cmpne	r2,r17,zero
   1f74c:	290ab03a 	or	r5,r5,r4
   1f750:	28a2b03a 	or	r17,r5,r2
   1f754:	0021883a 	mov	r16,zero
   1f758:	003fa206 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1f75c:	2090b03a 	or	r8,r4,r2
   1f760:	40018e26 	beq	r8,zero,1fd9c <__subdf3+0x83c>
   1f764:	1007883a 	mov	r3,r2
   1f768:	2023883a 	mov	r17,r4
   1f76c:	888001cc 	andi	r2,r17,7
   1f770:	103f9e1e 	bne	r2,zero,1f5ec <__alt_data_end+0xfc01f5ec>
   1f774:	1804977a 	slli	r2,r3,29
   1f778:	8822d0fa 	srli	r17,r17,3
   1f77c:	1810d0fa 	srli	r8,r3,3
   1f780:	9100004c 	andi	r4,r18,1
   1f784:	1444b03a 	or	r2,r2,r17
   1f788:	00c1ffc4 	movi	r3,2047
   1f78c:	80c02826 	beq	r16,r3,1f830 <__subdf3+0x2d0>
   1f790:	01400434 	movhi	r5,16
   1f794:	297fffc4 	addi	r5,r5,-1
   1f798:	80e0703a 	and	r16,r16,r3
   1f79c:	414a703a 	and	r5,r8,r5
   1f7a0:	003fa806 	br	1f644 <__alt_data_end+0xfc01f644>
   1f7a4:	0080630e 	bge	zero,r2,1f934 <__subdf3+0x3d4>
   1f7a8:	48003026 	beq	r9,zero,1f86c <__subdf3+0x30c>
   1f7ac:	0101ffc4 	movi	r4,2047
   1f7b0:	813f8c26 	beq	r16,r4,1f5e4 <__alt_data_end+0xfc01f5e4>
   1f7b4:	29402034 	orhi	r5,r5,128
   1f7b8:	01000e04 	movi	r4,56
   1f7bc:	2080a90e 	bge	r4,r2,1fa64 <__subdf3+0x504>
   1f7c0:	298cb03a 	or	r6,r5,r6
   1f7c4:	3012c03a 	cmpne	r9,r6,zero
   1f7c8:	0005883a 	mov	r2,zero
   1f7cc:	4c53883a 	add	r9,r9,r17
   1f7d0:	4c63803a 	cmpltu	r17,r9,r17
   1f7d4:	10c7883a 	add	r3,r2,r3
   1f7d8:	88c7883a 	add	r3,r17,r3
   1f7dc:	4823883a 	mov	r17,r9
   1f7e0:	1880202c 	andhi	r2,r3,128
   1f7e4:	1000d026 	beq	r2,zero,1fb28 <__subdf3+0x5c8>
   1f7e8:	84000044 	addi	r16,r16,1
   1f7ec:	0081ffc4 	movi	r2,2047
   1f7f0:	8080fe26 	beq	r16,r2,1fbec <__subdf3+0x68c>
   1f7f4:	00bfe034 	movhi	r2,65408
   1f7f8:	10bfffc4 	addi	r2,r2,-1
   1f7fc:	1886703a 	and	r3,r3,r2
   1f800:	880ad07a 	srli	r5,r17,1
   1f804:	180497fa 	slli	r2,r3,31
   1f808:	8900004c 	andi	r4,r17,1
   1f80c:	2922b03a 	or	r17,r5,r4
   1f810:	1806d07a 	srli	r3,r3,1
   1f814:	1462b03a 	or	r17,r2,r17
   1f818:	3825883a 	mov	r18,r7
   1f81c:	003f7106 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1f820:	2984b03a 	or	r2,r5,r6
   1f824:	103f6826 	beq	r2,zero,1f5c8 <__alt_data_end+0xfc01f5c8>
   1f828:	39c03fcc 	andi	r7,r7,255
   1f82c:	003f6706 	br	1f5cc <__alt_data_end+0xfc01f5cc>
   1f830:	4086b03a 	or	r3,r8,r2
   1f834:	18015226 	beq	r3,zero,1fd80 <__subdf3+0x820>
   1f838:	00c00434 	movhi	r3,16
   1f83c:	41400234 	orhi	r5,r8,8
   1f840:	18ffffc4 	addi	r3,r3,-1
   1f844:	28ca703a 	and	r5,r5,r3
   1f848:	003f7e06 	br	1f644 <__alt_data_end+0xfc01f644>
   1f84c:	10bfffc4 	addi	r2,r2,-1
   1f850:	1000491e 	bne	r2,zero,1f978 <__subdf3+0x418>
   1f854:	898fc83a 	sub	r7,r17,r6
   1f858:	89e3803a 	cmpltu	r17,r17,r7
   1f85c:	1947c83a 	sub	r3,r3,r5
   1f860:	1c47c83a 	sub	r3,r3,r17
   1f864:	3823883a 	mov	r17,r7
   1f868:	003f9b06 	br	1f6d8 <__alt_data_end+0xfc01f6d8>
   1f86c:	2988b03a 	or	r4,r5,r6
   1f870:	203f5c26 	beq	r4,zero,1f5e4 <__alt_data_end+0xfc01f5e4>
   1f874:	10bfffc4 	addi	r2,r2,-1
   1f878:	1000931e 	bne	r2,zero,1fac8 <__subdf3+0x568>
   1f87c:	898d883a 	add	r6,r17,r6
   1f880:	3463803a 	cmpltu	r17,r6,r17
   1f884:	1947883a 	add	r3,r3,r5
   1f888:	88c7883a 	add	r3,r17,r3
   1f88c:	3023883a 	mov	r17,r6
   1f890:	003fd306 	br	1f7e0 <__alt_data_end+0xfc01f7e0>
   1f894:	1000541e 	bne	r2,zero,1f9e8 <__subdf3+0x488>
   1f898:	80800044 	addi	r2,r16,1
   1f89c:	1081ffcc 	andi	r2,r2,2047
   1f8a0:	01000044 	movi	r4,1
   1f8a4:	2080a20e 	bge	r4,r2,1fb30 <__subdf3+0x5d0>
   1f8a8:	8989c83a 	sub	r4,r17,r6
   1f8ac:	8905803a 	cmpltu	r2,r17,r4
   1f8b0:	1967c83a 	sub	r19,r3,r5
   1f8b4:	98a7c83a 	sub	r19,r19,r2
   1f8b8:	9880202c 	andhi	r2,r19,128
   1f8bc:	10006326 	beq	r2,zero,1fa4c <__subdf3+0x4ec>
   1f8c0:	3463c83a 	sub	r17,r6,r17
   1f8c4:	28c7c83a 	sub	r3,r5,r3
   1f8c8:	344d803a 	cmpltu	r6,r6,r17
   1f8cc:	19a7c83a 	sub	r19,r3,r6
   1f8d0:	3825883a 	mov	r18,r7
   1f8d4:	983f861e 	bne	r19,zero,1f6f0 <__alt_data_end+0xfc01f6f0>
   1f8d8:	8809883a 	mov	r4,r17
   1f8dc:	000f4ec0 	call	f4ec <__clzsi2>
   1f8e0:	10800804 	addi	r2,r2,32
   1f8e4:	113ffe04 	addi	r4,r2,-8
   1f8e8:	00c007c4 	movi	r3,31
   1f8ec:	193f850e 	bge	r3,r4,1f704 <__alt_data_end+0xfc01f704>
   1f8f0:	10bff604 	addi	r2,r2,-40
   1f8f4:	8884983a 	sll	r2,r17,r2
   1f8f8:	0023883a 	mov	r17,zero
   1f8fc:	243f880e 	bge	r4,r16,1f720 <__alt_data_end+0xfc01f720>
   1f900:	00ffe034 	movhi	r3,65408
   1f904:	18ffffc4 	addi	r3,r3,-1
   1f908:	8121c83a 	sub	r16,r16,r4
   1f90c:	10c6703a 	and	r3,r2,r3
   1f910:	003f3406 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1f914:	9100004c 	andi	r4,r18,1
   1f918:	000b883a 	mov	r5,zero
   1f91c:	0005883a 	mov	r2,zero
   1f920:	003f4806 	br	1f644 <__alt_data_end+0xfc01f644>
   1f924:	298cb03a 	or	r6,r5,r6
   1f928:	300cc03a 	cmpne	r6,r6,zero
   1f92c:	0005883a 	mov	r2,zero
   1f930:	003f6406 	br	1f6c4 <__alt_data_end+0xfc01f6c4>
   1f934:	10009a1e 	bne	r2,zero,1fba0 <__subdf3+0x640>
   1f938:	82400044 	addi	r9,r16,1
   1f93c:	4881ffcc 	andi	r2,r9,2047
   1f940:	02800044 	movi	r10,1
   1f944:	5080670e 	bge	r10,r2,1fae4 <__subdf3+0x584>
   1f948:	0081ffc4 	movi	r2,2047
   1f94c:	4880af26 	beq	r9,r2,1fc0c <__subdf3+0x6ac>
   1f950:	898d883a 	add	r6,r17,r6
   1f954:	1945883a 	add	r2,r3,r5
   1f958:	3447803a 	cmpltu	r3,r6,r17
   1f95c:	1887883a 	add	r3,r3,r2
   1f960:	182297fa 	slli	r17,r3,31
   1f964:	300cd07a 	srli	r6,r6,1
   1f968:	1806d07a 	srli	r3,r3,1
   1f96c:	4821883a 	mov	r16,r9
   1f970:	89a2b03a 	or	r17,r17,r6
   1f974:	003f1b06 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1f978:	0101ffc4 	movi	r4,2047
   1f97c:	813f441e 	bne	r16,r4,1f690 <__alt_data_end+0xfc01f690>
   1f980:	003f1806 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1f984:	843ff844 	addi	r16,r16,-31
   1f988:	01400804 	movi	r5,32
   1f98c:	1408d83a 	srl	r4,r2,r16
   1f990:	19405026 	beq	r3,r5,1fad4 <__subdf3+0x574>
   1f994:	01401004 	movi	r5,64
   1f998:	28c7c83a 	sub	r3,r5,r3
   1f99c:	10c4983a 	sll	r2,r2,r3
   1f9a0:	88a2b03a 	or	r17,r17,r2
   1f9a4:	8822c03a 	cmpne	r17,r17,zero
   1f9a8:	2462b03a 	or	r17,r4,r17
   1f9ac:	0007883a 	mov	r3,zero
   1f9b0:	0021883a 	mov	r16,zero
   1f9b4:	003f6d06 	br	1f76c <__alt_data_end+0xfc01f76c>
   1f9b8:	11fff804 	addi	r7,r2,-32
   1f9bc:	01000804 	movi	r4,32
   1f9c0:	29ced83a 	srl	r7,r5,r7
   1f9c4:	11004526 	beq	r2,r4,1fadc <__subdf3+0x57c>
   1f9c8:	01001004 	movi	r4,64
   1f9cc:	2089c83a 	sub	r4,r4,r2
   1f9d0:	2904983a 	sll	r2,r5,r4
   1f9d4:	118cb03a 	or	r6,r2,r6
   1f9d8:	300cc03a 	cmpne	r6,r6,zero
   1f9dc:	398cb03a 	or	r6,r7,r6
   1f9e0:	0005883a 	mov	r2,zero
   1f9e4:	003f3706 	br	1f6c4 <__alt_data_end+0xfc01f6c4>
   1f9e8:	80002a26 	beq	r16,zero,1fa94 <__subdf3+0x534>
   1f9ec:	0101ffc4 	movi	r4,2047
   1f9f0:	49006626 	beq	r9,r4,1fb8c <__subdf3+0x62c>
   1f9f4:	0085c83a 	sub	r2,zero,r2
   1f9f8:	18c02034 	orhi	r3,r3,128
   1f9fc:	01000e04 	movi	r4,56
   1fa00:	20807e16 	blt	r4,r2,1fbfc <__subdf3+0x69c>
   1fa04:	010007c4 	movi	r4,31
   1fa08:	2080e716 	blt	r4,r2,1fda8 <__subdf3+0x848>
   1fa0c:	01000804 	movi	r4,32
   1fa10:	2089c83a 	sub	r4,r4,r2
   1fa14:	1914983a 	sll	r10,r3,r4
   1fa18:	8890d83a 	srl	r8,r17,r2
   1fa1c:	8908983a 	sll	r4,r17,r4
   1fa20:	1884d83a 	srl	r2,r3,r2
   1fa24:	5222b03a 	or	r17,r10,r8
   1fa28:	2006c03a 	cmpne	r3,r4,zero
   1fa2c:	88e2b03a 	or	r17,r17,r3
   1fa30:	3463c83a 	sub	r17,r6,r17
   1fa34:	2885c83a 	sub	r2,r5,r2
   1fa38:	344d803a 	cmpltu	r6,r6,r17
   1fa3c:	1187c83a 	sub	r3,r2,r6
   1fa40:	4821883a 	mov	r16,r9
   1fa44:	3825883a 	mov	r18,r7
   1fa48:	003f2306 	br	1f6d8 <__alt_data_end+0xfc01f6d8>
   1fa4c:	24d0b03a 	or	r8,r4,r19
   1fa50:	40001b1e 	bne	r8,zero,1fac0 <__subdf3+0x560>
   1fa54:	0005883a 	mov	r2,zero
   1fa58:	0009883a 	mov	r4,zero
   1fa5c:	0021883a 	mov	r16,zero
   1fa60:	003f4906 	br	1f788 <__alt_data_end+0xfc01f788>
   1fa64:	010007c4 	movi	r4,31
   1fa68:	20803a16 	blt	r4,r2,1fb54 <__subdf3+0x5f4>
   1fa6c:	01000804 	movi	r4,32
   1fa70:	2089c83a 	sub	r4,r4,r2
   1fa74:	2912983a 	sll	r9,r5,r4
   1fa78:	3090d83a 	srl	r8,r6,r2
   1fa7c:	3108983a 	sll	r4,r6,r4
   1fa80:	2884d83a 	srl	r2,r5,r2
   1fa84:	4a12b03a 	or	r9,r9,r8
   1fa88:	2008c03a 	cmpne	r4,r4,zero
   1fa8c:	4912b03a 	or	r9,r9,r4
   1fa90:	003f4e06 	br	1f7cc <__alt_data_end+0xfc01f7cc>
   1fa94:	1c48b03a 	or	r4,r3,r17
   1fa98:	20003c26 	beq	r4,zero,1fb8c <__subdf3+0x62c>
   1fa9c:	0084303a 	nor	r2,zero,r2
   1faa0:	1000381e 	bne	r2,zero,1fb84 <__subdf3+0x624>
   1faa4:	3463c83a 	sub	r17,r6,r17
   1faa8:	28c5c83a 	sub	r2,r5,r3
   1faac:	344d803a 	cmpltu	r6,r6,r17
   1fab0:	1187c83a 	sub	r3,r2,r6
   1fab4:	4821883a 	mov	r16,r9
   1fab8:	3825883a 	mov	r18,r7
   1fabc:	003f0606 	br	1f6d8 <__alt_data_end+0xfc01f6d8>
   1fac0:	2023883a 	mov	r17,r4
   1fac4:	003f0906 	br	1f6ec <__alt_data_end+0xfc01f6ec>
   1fac8:	0101ffc4 	movi	r4,2047
   1facc:	813f3a1e 	bne	r16,r4,1f7b8 <__alt_data_end+0xfc01f7b8>
   1fad0:	003ec406 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fad4:	0005883a 	mov	r2,zero
   1fad8:	003fb106 	br	1f9a0 <__alt_data_end+0xfc01f9a0>
   1fadc:	0005883a 	mov	r2,zero
   1fae0:	003fbc06 	br	1f9d4 <__alt_data_end+0xfc01f9d4>
   1fae4:	1c44b03a 	or	r2,r3,r17
   1fae8:	80008e1e 	bne	r16,zero,1fd24 <__subdf3+0x7c4>
   1faec:	1000c826 	beq	r2,zero,1fe10 <__subdf3+0x8b0>
   1faf0:	2984b03a 	or	r2,r5,r6
   1faf4:	103ebb26 	beq	r2,zero,1f5e4 <__alt_data_end+0xfc01f5e4>
   1faf8:	8989883a 	add	r4,r17,r6
   1fafc:	1945883a 	add	r2,r3,r5
   1fb00:	2447803a 	cmpltu	r3,r4,r17
   1fb04:	1887883a 	add	r3,r3,r2
   1fb08:	1880202c 	andhi	r2,r3,128
   1fb0c:	2023883a 	mov	r17,r4
   1fb10:	103f1626 	beq	r2,zero,1f76c <__alt_data_end+0xfc01f76c>
   1fb14:	00bfe034 	movhi	r2,65408
   1fb18:	10bfffc4 	addi	r2,r2,-1
   1fb1c:	5021883a 	mov	r16,r10
   1fb20:	1886703a 	and	r3,r3,r2
   1fb24:	003eaf06 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fb28:	3825883a 	mov	r18,r7
   1fb2c:	003f0f06 	br	1f76c <__alt_data_end+0xfc01f76c>
   1fb30:	1c44b03a 	or	r2,r3,r17
   1fb34:	8000251e 	bne	r16,zero,1fbcc <__subdf3+0x66c>
   1fb38:	1000661e 	bne	r2,zero,1fcd4 <__subdf3+0x774>
   1fb3c:	2990b03a 	or	r8,r5,r6
   1fb40:	40009626 	beq	r8,zero,1fd9c <__subdf3+0x83c>
   1fb44:	2807883a 	mov	r3,r5
   1fb48:	3023883a 	mov	r17,r6
   1fb4c:	3825883a 	mov	r18,r7
   1fb50:	003ea406 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fb54:	127ff804 	addi	r9,r2,-32
   1fb58:	01000804 	movi	r4,32
   1fb5c:	2a52d83a 	srl	r9,r5,r9
   1fb60:	11008c26 	beq	r2,r4,1fd94 <__subdf3+0x834>
   1fb64:	01001004 	movi	r4,64
   1fb68:	2085c83a 	sub	r2,r4,r2
   1fb6c:	2884983a 	sll	r2,r5,r2
   1fb70:	118cb03a 	or	r6,r2,r6
   1fb74:	300cc03a 	cmpne	r6,r6,zero
   1fb78:	4992b03a 	or	r9,r9,r6
   1fb7c:	0005883a 	mov	r2,zero
   1fb80:	003f1206 	br	1f7cc <__alt_data_end+0xfc01f7cc>
   1fb84:	0101ffc4 	movi	r4,2047
   1fb88:	493f9c1e 	bne	r9,r4,1f9fc <__alt_data_end+0xfc01f9fc>
   1fb8c:	2807883a 	mov	r3,r5
   1fb90:	3023883a 	mov	r17,r6
   1fb94:	4821883a 	mov	r16,r9
   1fb98:	3825883a 	mov	r18,r7
   1fb9c:	003e9106 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fba0:	80001f1e 	bne	r16,zero,1fc20 <__subdf3+0x6c0>
   1fba4:	1c48b03a 	or	r4,r3,r17
   1fba8:	20005a26 	beq	r4,zero,1fd14 <__subdf3+0x7b4>
   1fbac:	0084303a 	nor	r2,zero,r2
   1fbb0:	1000561e 	bne	r2,zero,1fd0c <__subdf3+0x7ac>
   1fbb4:	89a3883a 	add	r17,r17,r6
   1fbb8:	1945883a 	add	r2,r3,r5
   1fbbc:	898d803a 	cmpltu	r6,r17,r6
   1fbc0:	3087883a 	add	r3,r6,r2
   1fbc4:	4821883a 	mov	r16,r9
   1fbc8:	003f0506 	br	1f7e0 <__alt_data_end+0xfc01f7e0>
   1fbcc:	10002b1e 	bne	r2,zero,1fc7c <__subdf3+0x71c>
   1fbd0:	2984b03a 	or	r2,r5,r6
   1fbd4:	10008026 	beq	r2,zero,1fdd8 <__subdf3+0x878>
   1fbd8:	2807883a 	mov	r3,r5
   1fbdc:	3023883a 	mov	r17,r6
   1fbe0:	3825883a 	mov	r18,r7
   1fbe4:	0401ffc4 	movi	r16,2047
   1fbe8:	003e7e06 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fbec:	3809883a 	mov	r4,r7
   1fbf0:	0011883a 	mov	r8,zero
   1fbf4:	0005883a 	mov	r2,zero
   1fbf8:	003ee306 	br	1f788 <__alt_data_end+0xfc01f788>
   1fbfc:	1c62b03a 	or	r17,r3,r17
   1fc00:	8822c03a 	cmpne	r17,r17,zero
   1fc04:	0005883a 	mov	r2,zero
   1fc08:	003f8906 	br	1fa30 <__alt_data_end+0xfc01fa30>
   1fc0c:	3809883a 	mov	r4,r7
   1fc10:	4821883a 	mov	r16,r9
   1fc14:	0011883a 	mov	r8,zero
   1fc18:	0005883a 	mov	r2,zero
   1fc1c:	003eda06 	br	1f788 <__alt_data_end+0xfc01f788>
   1fc20:	0101ffc4 	movi	r4,2047
   1fc24:	49003b26 	beq	r9,r4,1fd14 <__subdf3+0x7b4>
   1fc28:	0085c83a 	sub	r2,zero,r2
   1fc2c:	18c02034 	orhi	r3,r3,128
   1fc30:	01000e04 	movi	r4,56
   1fc34:	20806e16 	blt	r4,r2,1fdf0 <__subdf3+0x890>
   1fc38:	010007c4 	movi	r4,31
   1fc3c:	20807716 	blt	r4,r2,1fe1c <__subdf3+0x8bc>
   1fc40:	01000804 	movi	r4,32
   1fc44:	2089c83a 	sub	r4,r4,r2
   1fc48:	1914983a 	sll	r10,r3,r4
   1fc4c:	8890d83a 	srl	r8,r17,r2
   1fc50:	8908983a 	sll	r4,r17,r4
   1fc54:	1884d83a 	srl	r2,r3,r2
   1fc58:	5222b03a 	or	r17,r10,r8
   1fc5c:	2006c03a 	cmpne	r3,r4,zero
   1fc60:	88e2b03a 	or	r17,r17,r3
   1fc64:	89a3883a 	add	r17,r17,r6
   1fc68:	1145883a 	add	r2,r2,r5
   1fc6c:	898d803a 	cmpltu	r6,r17,r6
   1fc70:	3087883a 	add	r3,r6,r2
   1fc74:	4821883a 	mov	r16,r9
   1fc78:	003ed906 	br	1f7e0 <__alt_data_end+0xfc01f7e0>
   1fc7c:	2984b03a 	or	r2,r5,r6
   1fc80:	10004226 	beq	r2,zero,1fd8c <__subdf3+0x82c>
   1fc84:	1808d0fa 	srli	r4,r3,3
   1fc88:	8822d0fa 	srli	r17,r17,3
   1fc8c:	1806977a 	slli	r3,r3,29
   1fc90:	2080022c 	andhi	r2,r4,8
   1fc94:	1c62b03a 	or	r17,r3,r17
   1fc98:	10000826 	beq	r2,zero,1fcbc <__subdf3+0x75c>
   1fc9c:	2812d0fa 	srli	r9,r5,3
   1fca0:	4880022c 	andhi	r2,r9,8
   1fca4:	1000051e 	bne	r2,zero,1fcbc <__subdf3+0x75c>
   1fca8:	300cd0fa 	srli	r6,r6,3
   1fcac:	2804977a 	slli	r2,r5,29
   1fcb0:	4809883a 	mov	r4,r9
   1fcb4:	3825883a 	mov	r18,r7
   1fcb8:	11a2b03a 	or	r17,r2,r6
   1fcbc:	8806d77a 	srli	r3,r17,29
   1fcc0:	200890fa 	slli	r4,r4,3
   1fcc4:	882290fa 	slli	r17,r17,3
   1fcc8:	0401ffc4 	movi	r16,2047
   1fccc:	1906b03a 	or	r3,r3,r4
   1fcd0:	003e4406 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fcd4:	2984b03a 	or	r2,r5,r6
   1fcd8:	103e4226 	beq	r2,zero,1f5e4 <__alt_data_end+0xfc01f5e4>
   1fcdc:	8989c83a 	sub	r4,r17,r6
   1fce0:	8911803a 	cmpltu	r8,r17,r4
   1fce4:	1945c83a 	sub	r2,r3,r5
   1fce8:	1205c83a 	sub	r2,r2,r8
   1fcec:	1200202c 	andhi	r8,r2,128
   1fcf0:	403e9a26 	beq	r8,zero,1f75c <__alt_data_end+0xfc01f75c>
   1fcf4:	3463c83a 	sub	r17,r6,r17
   1fcf8:	28c5c83a 	sub	r2,r5,r3
   1fcfc:	344d803a 	cmpltu	r6,r6,r17
   1fd00:	1187c83a 	sub	r3,r2,r6
   1fd04:	3825883a 	mov	r18,r7
   1fd08:	003e3606 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fd0c:	0101ffc4 	movi	r4,2047
   1fd10:	493fc71e 	bne	r9,r4,1fc30 <__alt_data_end+0xfc01fc30>
   1fd14:	2807883a 	mov	r3,r5
   1fd18:	3023883a 	mov	r17,r6
   1fd1c:	4821883a 	mov	r16,r9
   1fd20:	003e3006 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fd24:	10003626 	beq	r2,zero,1fe00 <__subdf3+0x8a0>
   1fd28:	2984b03a 	or	r2,r5,r6
   1fd2c:	10001726 	beq	r2,zero,1fd8c <__subdf3+0x82c>
   1fd30:	1808d0fa 	srli	r4,r3,3
   1fd34:	8822d0fa 	srli	r17,r17,3
   1fd38:	1806977a 	slli	r3,r3,29
   1fd3c:	2080022c 	andhi	r2,r4,8
   1fd40:	1c62b03a 	or	r17,r3,r17
   1fd44:	10000726 	beq	r2,zero,1fd64 <__subdf3+0x804>
   1fd48:	2812d0fa 	srli	r9,r5,3
   1fd4c:	4880022c 	andhi	r2,r9,8
   1fd50:	1000041e 	bne	r2,zero,1fd64 <__subdf3+0x804>
   1fd54:	300cd0fa 	srli	r6,r6,3
   1fd58:	2804977a 	slli	r2,r5,29
   1fd5c:	4809883a 	mov	r4,r9
   1fd60:	11a2b03a 	or	r17,r2,r6
   1fd64:	8806d77a 	srli	r3,r17,29
   1fd68:	200890fa 	slli	r4,r4,3
   1fd6c:	882290fa 	slli	r17,r17,3
   1fd70:	3825883a 	mov	r18,r7
   1fd74:	1906b03a 	or	r3,r3,r4
   1fd78:	0401ffc4 	movi	r16,2047
   1fd7c:	003e1906 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fd80:	000b883a 	mov	r5,zero
   1fd84:	0005883a 	mov	r2,zero
   1fd88:	003e2e06 	br	1f644 <__alt_data_end+0xfc01f644>
   1fd8c:	0401ffc4 	movi	r16,2047
   1fd90:	003e1406 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fd94:	0005883a 	mov	r2,zero
   1fd98:	003f7506 	br	1fb70 <__alt_data_end+0xfc01fb70>
   1fd9c:	0005883a 	mov	r2,zero
   1fda0:	0009883a 	mov	r4,zero
   1fda4:	003e7806 	br	1f788 <__alt_data_end+0xfc01f788>
   1fda8:	123ff804 	addi	r8,r2,-32
   1fdac:	01000804 	movi	r4,32
   1fdb0:	1a10d83a 	srl	r8,r3,r8
   1fdb4:	11002526 	beq	r2,r4,1fe4c <__subdf3+0x8ec>
   1fdb8:	01001004 	movi	r4,64
   1fdbc:	2085c83a 	sub	r2,r4,r2
   1fdc0:	1884983a 	sll	r2,r3,r2
   1fdc4:	1444b03a 	or	r2,r2,r17
   1fdc8:	1004c03a 	cmpne	r2,r2,zero
   1fdcc:	40a2b03a 	or	r17,r8,r2
   1fdd0:	0005883a 	mov	r2,zero
   1fdd4:	003f1606 	br	1fa30 <__alt_data_end+0xfc01fa30>
   1fdd8:	02000434 	movhi	r8,16
   1fddc:	0009883a 	mov	r4,zero
   1fde0:	423fffc4 	addi	r8,r8,-1
   1fde4:	00bfffc4 	movi	r2,-1
   1fde8:	0401ffc4 	movi	r16,2047
   1fdec:	003e6606 	br	1f788 <__alt_data_end+0xfc01f788>
   1fdf0:	1c62b03a 	or	r17,r3,r17
   1fdf4:	8822c03a 	cmpne	r17,r17,zero
   1fdf8:	0005883a 	mov	r2,zero
   1fdfc:	003f9906 	br	1fc64 <__alt_data_end+0xfc01fc64>
   1fe00:	2807883a 	mov	r3,r5
   1fe04:	3023883a 	mov	r17,r6
   1fe08:	0401ffc4 	movi	r16,2047
   1fe0c:	003df506 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fe10:	2807883a 	mov	r3,r5
   1fe14:	3023883a 	mov	r17,r6
   1fe18:	003df206 	br	1f5e4 <__alt_data_end+0xfc01f5e4>
   1fe1c:	123ff804 	addi	r8,r2,-32
   1fe20:	01000804 	movi	r4,32
   1fe24:	1a10d83a 	srl	r8,r3,r8
   1fe28:	11000a26 	beq	r2,r4,1fe54 <__subdf3+0x8f4>
   1fe2c:	01001004 	movi	r4,64
   1fe30:	2085c83a 	sub	r2,r4,r2
   1fe34:	1884983a 	sll	r2,r3,r2
   1fe38:	1444b03a 	or	r2,r2,r17
   1fe3c:	1004c03a 	cmpne	r2,r2,zero
   1fe40:	40a2b03a 	or	r17,r8,r2
   1fe44:	0005883a 	mov	r2,zero
   1fe48:	003f8606 	br	1fc64 <__alt_data_end+0xfc01fc64>
   1fe4c:	0005883a 	mov	r2,zero
   1fe50:	003fdc06 	br	1fdc4 <__alt_data_end+0xfc01fdc4>
   1fe54:	0005883a 	mov	r2,zero
   1fe58:	003ff706 	br	1fe38 <__alt_data_end+0xfc01fe38>

0001fe5c <__fixdfsi>:
   1fe5c:	280cd53a 	srli	r6,r5,20
   1fe60:	00c00434 	movhi	r3,16
   1fe64:	18ffffc4 	addi	r3,r3,-1
   1fe68:	3181ffcc 	andi	r6,r6,2047
   1fe6c:	01c0ff84 	movi	r7,1022
   1fe70:	28c6703a 	and	r3,r5,r3
   1fe74:	280ad7fa 	srli	r5,r5,31
   1fe78:	3980120e 	bge	r7,r6,1fec4 <__fixdfsi+0x68>
   1fe7c:	00810744 	movi	r2,1053
   1fe80:	11800c16 	blt	r2,r6,1feb4 <__fixdfsi+0x58>
   1fe84:	00810cc4 	movi	r2,1075
   1fe88:	1185c83a 	sub	r2,r2,r6
   1fe8c:	01c007c4 	movi	r7,31
   1fe90:	18c00434 	orhi	r3,r3,16
   1fe94:	38800d16 	blt	r7,r2,1fecc <__fixdfsi+0x70>
   1fe98:	31befb44 	addi	r6,r6,-1043
   1fe9c:	2084d83a 	srl	r2,r4,r2
   1fea0:	1986983a 	sll	r3,r3,r6
   1fea4:	1884b03a 	or	r2,r3,r2
   1fea8:	28000726 	beq	r5,zero,1fec8 <__fixdfsi+0x6c>
   1feac:	0085c83a 	sub	r2,zero,r2
   1feb0:	f800283a 	ret
   1feb4:	00a00034 	movhi	r2,32768
   1feb8:	10bfffc4 	addi	r2,r2,-1
   1febc:	2885883a 	add	r2,r5,r2
   1fec0:	f800283a 	ret
   1fec4:	0005883a 	mov	r2,zero
   1fec8:	f800283a 	ret
   1fecc:	008104c4 	movi	r2,1043
   1fed0:	1185c83a 	sub	r2,r2,r6
   1fed4:	1884d83a 	srl	r2,r3,r2
   1fed8:	003ff306 	br	1fea8 <__alt_data_end+0xfc01fea8>

0001fedc <__floatsidf>:
   1fedc:	defffd04 	addi	sp,sp,-12
   1fee0:	dfc00215 	stw	ra,8(sp)
   1fee4:	dc400115 	stw	r17,4(sp)
   1fee8:	dc000015 	stw	r16,0(sp)
   1feec:	20002b26 	beq	r4,zero,1ff9c <__floatsidf+0xc0>
   1fef0:	2023883a 	mov	r17,r4
   1fef4:	2020d7fa 	srli	r16,r4,31
   1fef8:	20002d16 	blt	r4,zero,1ffb0 <__floatsidf+0xd4>
   1fefc:	8809883a 	mov	r4,r17
   1ff00:	000f4ec0 	call	f4ec <__clzsi2>
   1ff04:	01410784 	movi	r5,1054
   1ff08:	288bc83a 	sub	r5,r5,r2
   1ff0c:	01010cc4 	movi	r4,1075
   1ff10:	2149c83a 	sub	r4,r4,r5
   1ff14:	00c007c4 	movi	r3,31
   1ff18:	1900160e 	bge	r3,r4,1ff74 <__floatsidf+0x98>
   1ff1c:	00c104c4 	movi	r3,1043
   1ff20:	1947c83a 	sub	r3,r3,r5
   1ff24:	88c6983a 	sll	r3,r17,r3
   1ff28:	00800434 	movhi	r2,16
   1ff2c:	10bfffc4 	addi	r2,r2,-1
   1ff30:	1886703a 	and	r3,r3,r2
   1ff34:	2941ffcc 	andi	r5,r5,2047
   1ff38:	800d883a 	mov	r6,r16
   1ff3c:	0005883a 	mov	r2,zero
   1ff40:	280a953a 	slli	r5,r5,20
   1ff44:	31803fcc 	andi	r6,r6,255
   1ff48:	01000434 	movhi	r4,16
   1ff4c:	300c97fa 	slli	r6,r6,31
   1ff50:	213fffc4 	addi	r4,r4,-1
   1ff54:	1906703a 	and	r3,r3,r4
   1ff58:	1946b03a 	or	r3,r3,r5
   1ff5c:	1986b03a 	or	r3,r3,r6
   1ff60:	dfc00217 	ldw	ra,8(sp)
   1ff64:	dc400117 	ldw	r17,4(sp)
   1ff68:	dc000017 	ldw	r16,0(sp)
   1ff6c:	dec00304 	addi	sp,sp,12
   1ff70:	f800283a 	ret
   1ff74:	00c002c4 	movi	r3,11
   1ff78:	1887c83a 	sub	r3,r3,r2
   1ff7c:	88c6d83a 	srl	r3,r17,r3
   1ff80:	8904983a 	sll	r2,r17,r4
   1ff84:	01000434 	movhi	r4,16
   1ff88:	213fffc4 	addi	r4,r4,-1
   1ff8c:	2941ffcc 	andi	r5,r5,2047
   1ff90:	1906703a 	and	r3,r3,r4
   1ff94:	800d883a 	mov	r6,r16
   1ff98:	003fe906 	br	1ff40 <__alt_data_end+0xfc01ff40>
   1ff9c:	000d883a 	mov	r6,zero
   1ffa0:	000b883a 	mov	r5,zero
   1ffa4:	0007883a 	mov	r3,zero
   1ffa8:	0005883a 	mov	r2,zero
   1ffac:	003fe406 	br	1ff40 <__alt_data_end+0xfc01ff40>
   1ffb0:	0123c83a 	sub	r17,zero,r4
   1ffb4:	003fd106 	br	1fefc <__alt_data_end+0xfc01fefc>

0001ffb8 <__floatunsidf>:
   1ffb8:	defffe04 	addi	sp,sp,-8
   1ffbc:	dc000015 	stw	r16,0(sp)
   1ffc0:	dfc00115 	stw	ra,4(sp)
   1ffc4:	2021883a 	mov	r16,r4
   1ffc8:	20002226 	beq	r4,zero,20054 <__floatunsidf+0x9c>
   1ffcc:	000f4ec0 	call	f4ec <__clzsi2>
   1ffd0:	01010784 	movi	r4,1054
   1ffd4:	2089c83a 	sub	r4,r4,r2
   1ffd8:	01810cc4 	movi	r6,1075
   1ffdc:	310dc83a 	sub	r6,r6,r4
   1ffe0:	00c007c4 	movi	r3,31
   1ffe4:	1980120e 	bge	r3,r6,20030 <__floatunsidf+0x78>
   1ffe8:	00c104c4 	movi	r3,1043
   1ffec:	1907c83a 	sub	r3,r3,r4
   1fff0:	80ca983a 	sll	r5,r16,r3
   1fff4:	00800434 	movhi	r2,16
   1fff8:	10bfffc4 	addi	r2,r2,-1
   1fffc:	2101ffcc 	andi	r4,r4,2047
   20000:	0021883a 	mov	r16,zero
   20004:	288a703a 	and	r5,r5,r2
   20008:	2008953a 	slli	r4,r4,20
   2000c:	00c00434 	movhi	r3,16
   20010:	18ffffc4 	addi	r3,r3,-1
   20014:	28c6703a 	and	r3,r5,r3
   20018:	8005883a 	mov	r2,r16
   2001c:	1906b03a 	or	r3,r3,r4
   20020:	dfc00117 	ldw	ra,4(sp)
   20024:	dc000017 	ldw	r16,0(sp)
   20028:	dec00204 	addi	sp,sp,8
   2002c:	f800283a 	ret
   20030:	00c002c4 	movi	r3,11
   20034:	188bc83a 	sub	r5,r3,r2
   20038:	814ad83a 	srl	r5,r16,r5
   2003c:	00c00434 	movhi	r3,16
   20040:	18ffffc4 	addi	r3,r3,-1
   20044:	81a0983a 	sll	r16,r16,r6
   20048:	2101ffcc 	andi	r4,r4,2047
   2004c:	28ca703a 	and	r5,r5,r3
   20050:	003fed06 	br	20008 <__alt_data_end+0xfc020008>
   20054:	0009883a 	mov	r4,zero
   20058:	000b883a 	mov	r5,zero
   2005c:	003fea06 	br	20008 <__alt_data_end+0xfc020008>

00020060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20060:	defffe04 	addi	sp,sp,-8
   20064:	dfc00115 	stw	ra,4(sp)
   20068:	df000015 	stw	fp,0(sp)
   2006c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20070:	d0a5bd17 	ldw	r2,-26892(gp)
   20074:	10000326 	beq	r2,zero,20084 <alt_get_errno+0x24>
   20078:	d0a5bd17 	ldw	r2,-26892(gp)
   2007c:	103ee83a 	callr	r2
   20080:	00000106 	br	20088 <alt_get_errno+0x28>
   20084:	d0b24e04 	addi	r2,gp,-14024
}
   20088:	e037883a 	mov	sp,fp
   2008c:	dfc00117 	ldw	ra,4(sp)
   20090:	df000017 	ldw	fp,0(sp)
   20094:	dec00204 	addi	sp,sp,8
   20098:	f800283a 	ret

0002009c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2009c:	defffb04 	addi	sp,sp,-20
   200a0:	dfc00415 	stw	ra,16(sp)
   200a4:	df000315 	stw	fp,12(sp)
   200a8:	df000304 	addi	fp,sp,12
   200ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   200b0:	e0bfff17 	ldw	r2,-4(fp)
   200b4:	10000816 	blt	r2,zero,200d8 <close+0x3c>
   200b8:	01400304 	movi	r5,12
   200bc:	e13fff17 	ldw	r4,-4(fp)
   200c0:	000d9380 	call	d938 <__mulsi3>
   200c4:	1007883a 	mov	r3,r2
   200c8:	008000f4 	movhi	r2,3
   200cc:	10b18204 	addi	r2,r2,-14840
   200d0:	1885883a 	add	r2,r3,r2
   200d4:	00000106 	br	200dc <close+0x40>
   200d8:	0005883a 	mov	r2,zero
   200dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   200e0:	e0bffd17 	ldw	r2,-12(fp)
   200e4:	10001926 	beq	r2,zero,2014c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   200e8:	e0bffd17 	ldw	r2,-12(fp)
   200ec:	10800017 	ldw	r2,0(r2)
   200f0:	10800417 	ldw	r2,16(r2)
   200f4:	10000626 	beq	r2,zero,20110 <close+0x74>
   200f8:	e0bffd17 	ldw	r2,-12(fp)
   200fc:	10800017 	ldw	r2,0(r2)
   20100:	10800417 	ldw	r2,16(r2)
   20104:	e13ffd17 	ldw	r4,-12(fp)
   20108:	103ee83a 	callr	r2
   2010c:	00000106 	br	20114 <close+0x78>
   20110:	0005883a 	mov	r2,zero
   20114:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   20118:	e13fff17 	ldw	r4,-4(fp)
   2011c:	00209440 	call	20944 <alt_release_fd>
    if (rval < 0)
   20120:	e0bffe17 	ldw	r2,-8(fp)
   20124:	1000070e 	bge	r2,zero,20144 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   20128:	00200600 	call	20060 <alt_get_errno>
   2012c:	1007883a 	mov	r3,r2
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	0085c83a 	sub	r2,zero,r2
   20138:	18800015 	stw	r2,0(r3)
      return -1;
   2013c:	00bfffc4 	movi	r2,-1
   20140:	00000706 	br	20160 <close+0xc4>
    }
    return 0;
   20144:	0005883a 	mov	r2,zero
   20148:	00000506 	br	20160 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2014c:	00200600 	call	20060 <alt_get_errno>
   20150:	1007883a 	mov	r3,r2
   20154:	00801444 	movi	r2,81
   20158:	18800015 	stw	r2,0(r3)
    return -1;
   2015c:	00bfffc4 	movi	r2,-1
  }
}
   20160:	e037883a 	mov	sp,fp
   20164:	dfc00117 	ldw	ra,4(sp)
   20168:	df000017 	ldw	fp,0(sp)
   2016c:	dec00204 	addi	sp,sp,8
   20170:	f800283a 	ret

00020174 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   20174:	defffc04 	addi	sp,sp,-16
   20178:	df000315 	stw	fp,12(sp)
   2017c:	df000304 	addi	fp,sp,12
   20180:	e13ffd15 	stw	r4,-12(fp)
   20184:	e17ffe15 	stw	r5,-8(fp)
   20188:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2018c:	e0bfff17 	ldw	r2,-4(fp)
}
   20190:	e037883a 	mov	sp,fp
   20194:	df000017 	ldw	fp,0(sp)
   20198:	dec00104 	addi	sp,sp,4
   2019c:	f800283a 	ret

000201a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   201a0:	defffd04 	addi	sp,sp,-12
   201a4:	df000215 	stw	fp,8(sp)
   201a8:	df000204 	addi	fp,sp,8
   201ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   201b0:	0001883a 	nop
   201b4:	e0bfff17 	ldw	r2,-4(fp)
   201b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   201bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   201c0:	10000226 	beq	r2,zero,201cc <_exit+0x2c>
    ALT_SIM_FAIL();
   201c4:	002af070 	cmpltui	zero,zero,43969
   201c8:	00000106 	br	201d0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   201cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   201d0:	003fff06 	br	201d0 <__alt_data_end+0xfc0201d0>

000201d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   201d4:	defffe04 	addi	sp,sp,-8
   201d8:	dfc00115 	stw	ra,4(sp)
   201dc:	df000015 	stw	fp,0(sp)
   201e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   201e4:	d0a5bd17 	ldw	r2,-26892(gp)
   201e8:	10000326 	beq	r2,zero,201f8 <alt_get_errno+0x24>
   201ec:	d0a5bd17 	ldw	r2,-26892(gp)
   201f0:	103ee83a 	callr	r2
   201f4:	00000106 	br	201fc <alt_get_errno+0x28>
   201f8:	d0b24e04 	addi	r2,gp,-14024
}
   201fc:	e037883a 	mov	sp,fp
   20200:	dfc00117 	ldw	ra,4(sp)
   20204:	df000017 	ldw	fp,0(sp)
   20208:	dec00204 	addi	sp,sp,8
   2020c:	f800283a 	ret

00020210 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   20210:	defffb04 	addi	sp,sp,-20
   20214:	dfc00415 	stw	ra,16(sp)
   20218:	df000315 	stw	fp,12(sp)
   2021c:	df000304 	addi	fp,sp,12
   20220:	e13ffe15 	stw	r4,-8(fp)
   20224:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20228:	e0bffe17 	ldw	r2,-8(fp)
   2022c:	10000816 	blt	r2,zero,20250 <fstat+0x40>
   20230:	01400304 	movi	r5,12
   20234:	e13ffe17 	ldw	r4,-8(fp)
   20238:	000d9380 	call	d938 <__mulsi3>
   2023c:	1007883a 	mov	r3,r2
   20240:	008000f4 	movhi	r2,3
   20244:	10b18204 	addi	r2,r2,-14840
   20248:	1885883a 	add	r2,r3,r2
   2024c:	00000106 	br	20254 <fstat+0x44>
   20250:	0005883a 	mov	r2,zero
   20254:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   20258:	e0bffd17 	ldw	r2,-12(fp)
   2025c:	10001026 	beq	r2,zero,202a0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   20260:	e0bffd17 	ldw	r2,-12(fp)
   20264:	10800017 	ldw	r2,0(r2)
   20268:	10800817 	ldw	r2,32(r2)
   2026c:	10000726 	beq	r2,zero,2028c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   20270:	e0bffd17 	ldw	r2,-12(fp)
   20274:	10800017 	ldw	r2,0(r2)
   20278:	10800817 	ldw	r2,32(r2)
   2027c:	e17fff17 	ldw	r5,-4(fp)
   20280:	e13ffd17 	ldw	r4,-12(fp)
   20284:	103ee83a 	callr	r2
   20288:	00000a06 	br	202b4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2028c:	e0bfff17 	ldw	r2,-4(fp)
   20290:	00c80004 	movi	r3,8192
   20294:	10c00115 	stw	r3,4(r2)
      return 0;
   20298:	0005883a 	mov	r2,zero
   2029c:	00000506 	br	202b4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   202a0:	00201d40 	call	201d4 <alt_get_errno>
   202a4:	1007883a 	mov	r3,r2
   202a8:	00801444 	movi	r2,81
   202ac:	18800015 	stw	r2,0(r3)
    return -1;
   202b0:	00bfffc4 	movi	r2,-1
  }
}
   202b4:	e037883a 	mov	sp,fp
   202b8:	dfc00117 	ldw	ra,4(sp)
   202bc:	df000017 	ldw	fp,0(sp)
   202c0:	dec00204 	addi	sp,sp,8
   202c4:	f800283a 	ret

000202c8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   202c8:	deffff04 	addi	sp,sp,-4
   202cc:	df000015 	stw	fp,0(sp)
   202d0:	d839883a 	mov	fp,sp
  return 0;
   202d4:	0005883a 	mov	r2,zero
}
   202d8:	e037883a 	mov	sp,fp
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00104 	addi	sp,sp,4
   202e4:	f800283a 	ret

000202e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   202e8:	defffe04 	addi	sp,sp,-8
   202ec:	dfc00115 	stw	ra,4(sp)
   202f0:	df000015 	stw	fp,0(sp)
   202f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   202f8:	d0a5bd17 	ldw	r2,-26892(gp)
   202fc:	10000326 	beq	r2,zero,2030c <alt_get_errno+0x24>
   20300:	d0a5bd17 	ldw	r2,-26892(gp)
   20304:	103ee83a 	callr	r2
   20308:	00000106 	br	20310 <alt_get_errno+0x28>
   2030c:	d0b24e04 	addi	r2,gp,-14024
}
   20310:	e037883a 	mov	sp,fp
   20314:	dfc00117 	ldw	ra,4(sp)
   20318:	df000017 	ldw	fp,0(sp)
   2031c:	dec00204 	addi	sp,sp,8
   20320:	f800283a 	ret

00020324 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   20324:	deffed04 	addi	sp,sp,-76
   20328:	dfc01215 	stw	ra,72(sp)
   2032c:	df001115 	stw	fp,68(sp)
   20330:	df001104 	addi	fp,sp,68
   20334:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20338:	e0bfff17 	ldw	r2,-4(fp)
   2033c:	10000816 	blt	r2,zero,20360 <isatty+0x3c>
   20340:	01400304 	movi	r5,12
   20344:	e13fff17 	ldw	r4,-4(fp)
   20348:	000d9380 	call	d938 <__mulsi3>
   2034c:	1007883a 	mov	r3,r2
   20350:	008000f4 	movhi	r2,3
   20354:	10b18204 	addi	r2,r2,-14840
   20358:	1885883a 	add	r2,r3,r2
   2035c:	00000106 	br	20364 <isatty+0x40>
   20360:	0005883a 	mov	r2,zero
   20364:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   20368:	e0bfef17 	ldw	r2,-68(fp)
   2036c:	10000e26 	beq	r2,zero,203a8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   20370:	e0bfef17 	ldw	r2,-68(fp)
   20374:	10800017 	ldw	r2,0(r2)
   20378:	10800817 	ldw	r2,32(r2)
   2037c:	1000021e 	bne	r2,zero,20388 <isatty+0x64>
    {
      return 1;
   20380:	00800044 	movi	r2,1
   20384:	00000d06 	br	203bc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   20388:	e0bff004 	addi	r2,fp,-64
   2038c:	100b883a 	mov	r5,r2
   20390:	e13fff17 	ldw	r4,-4(fp)
   20394:	00202100 	call	20210 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   20398:	e0bff117 	ldw	r2,-60(fp)
   2039c:	10880020 	cmpeqi	r2,r2,8192
   203a0:	10803fcc 	andi	r2,r2,255
   203a4:	00000506 	br	203bc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   203a8:	00202e80 	call	202e8 <alt_get_errno>
   203ac:	1007883a 	mov	r3,r2
   203b0:	00801444 	movi	r2,81
   203b4:	18800015 	stw	r2,0(r3)
    return 0;
   203b8:	0005883a 	mov	r2,zero
  }
}
   203bc:	e037883a 	mov	sp,fp
   203c0:	dfc00117 	ldw	ra,4(sp)
   203c4:	df000017 	ldw	fp,0(sp)
   203c8:	dec00204 	addi	sp,sp,8
   203cc:	f800283a 	ret

000203d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   203d0:	defffe04 	addi	sp,sp,-8
   203d4:	dfc00115 	stw	ra,4(sp)
   203d8:	df000015 	stw	fp,0(sp)
   203dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   203e0:	d0a5bd17 	ldw	r2,-26892(gp)
   203e4:	10000326 	beq	r2,zero,203f4 <alt_get_errno+0x24>
   203e8:	d0a5bd17 	ldw	r2,-26892(gp)
   203ec:	103ee83a 	callr	r2
   203f0:	00000106 	br	203f8 <alt_get_errno+0x28>
   203f4:	d0b24e04 	addi	r2,gp,-14024
}
   203f8:	e037883a 	mov	sp,fp
   203fc:	dfc00117 	ldw	ra,4(sp)
   20400:	df000017 	ldw	fp,0(sp)
   20404:	dec00204 	addi	sp,sp,8
   20408:	f800283a 	ret

0002040c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   2040c:	defffb04 	addi	sp,sp,-20
   20410:	dfc00415 	stw	ra,16(sp)
   20414:	df000315 	stw	fp,12(sp)
   20418:	df000304 	addi	fp,sp,12
   2041c:	e13ffe15 	stw	r4,-8(fp)
   20420:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   20424:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   20428:	e0bffe17 	ldw	r2,-8(fp)
   2042c:	00802f16 	blt	zero,r2,204ec <kill+0xe0>
  {
    switch (sig)
   20430:	e0bfff17 	ldw	r2,-4(fp)
   20434:	10800828 	cmpgeui	r2,r2,32
   20438:	1000291e 	bne	r2,zero,204e0 <kill+0xd4>
   2043c:	e0bfff17 	ldw	r2,-4(fp)
   20440:	100690ba 	slli	r3,r2,2
   20444:	008000b4 	movhi	r2,2
   20448:	10811604 	addi	r2,r2,1112
   2044c:	1885883a 	add	r2,r3,r2
   20450:	10800017 	ldw	r2,0(r2)
   20454:	1000683a 	jmp	r2
   20458:	00020500 	call	2050 <_ZN3USB11ConfiguringEhhb+0x54>
   2045c:	000204e0 	cmpeqi	zero,zero,2067
   20460:	000204e0 	cmpeqi	zero,zero,2067
   20464:	000204d8 	cmpnei	zero,zero,2067
   20468:	000204d8 	cmpnei	zero,zero,2067
   2046c:	000204d8 	cmpnei	zero,zero,2067
   20470:	000204d8 	cmpnei	zero,zero,2067
   20474:	000204e0 	cmpeqi	zero,zero,2067
   20478:	000204d8 	cmpnei	zero,zero,2067
   2047c:	000204d8 	cmpnei	zero,zero,2067
   20480:	000204d8 	cmpnei	zero,zero,2067
   20484:	000204d8 	cmpnei	zero,zero,2067
   20488:	000204d8 	cmpnei	zero,zero,2067
   2048c:	000204d8 	cmpnei	zero,zero,2067
   20490:	000204d8 	cmpnei	zero,zero,2067
   20494:	000204d8 	cmpnei	zero,zero,2067
   20498:	00020500 	call	2050 <_ZN3USB11ConfiguringEhhb+0x54>
   2049c:	000204e0 	cmpeqi	zero,zero,2067
   204a0:	000204e0 	cmpeqi	zero,zero,2067
   204a4:	000204e0 	cmpeqi	zero,zero,2067
   204a8:	00020500 	call	2050 <_ZN3USB11ConfiguringEhhb+0x54>
   204ac:	000204e0 	cmpeqi	zero,zero,2067
   204b0:	000204e0 	cmpeqi	zero,zero,2067
   204b4:	000204d8 	cmpnei	zero,zero,2067
   204b8:	000204d8 	cmpnei	zero,zero,2067
   204bc:	000204d8 	cmpnei	zero,zero,2067
   204c0:	000204d8 	cmpnei	zero,zero,2067
   204c4:	000204d8 	cmpnei	zero,zero,2067
   204c8:	000204e0 	cmpeqi	zero,zero,2067
   204cc:	000204e0 	cmpeqi	zero,zero,2067
   204d0:	000204d8 	cmpnei	zero,zero,2067
   204d4:	000204d8 	cmpnei	zero,zero,2067
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   204d8:	0009883a 	mov	r4,zero
   204dc:	00201a00 	call	201a0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   204e0:	00800584 	movi	r2,22
   204e4:	e0bffd15 	stw	r2,-12(fp)
   204e8:	00000606 	br	20504 <kill+0xf8>
    }
  }

  else if (pid > 0)
   204ec:	e0bffe17 	ldw	r2,-8(fp)
   204f0:	0080040e 	bge	zero,r2,20504 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   204f4:	008000c4 	movi	r2,3
   204f8:	e0bffd15 	stw	r2,-12(fp)
   204fc:	00000106 	br	20504 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   20500:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   20504:	e0bffd17 	ldw	r2,-12(fp)
   20508:	10000626 	beq	r2,zero,20524 <kill+0x118>
  {
    ALT_ERRNO = status;
   2050c:	00203d00 	call	203d0 <alt_get_errno>
   20510:	1007883a 	mov	r3,r2
   20514:	e0bffd17 	ldw	r2,-12(fp)
   20518:	18800015 	stw	r2,0(r3)
    return -1;
   2051c:	00bfffc4 	movi	r2,-1
   20520:	00000106 	br	20528 <kill+0x11c>
  }

  return 0;
   20524:	0005883a 	mov	r2,zero
}
   20528:	e037883a 	mov	sp,fp
   2052c:	dfc00117 	ldw	ra,4(sp)
   20530:	df000017 	ldw	fp,0(sp)
   20534:	dec00204 	addi	sp,sp,8
   20538:	f800283a 	ret

0002053c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2053c:	defffc04 	addi	sp,sp,-16
   20540:	df000315 	stw	fp,12(sp)
   20544:	df000304 	addi	fp,sp,12
   20548:	e13ffd15 	stw	r4,-12(fp)
   2054c:	e17ffe15 	stw	r5,-8(fp)
   20550:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20554:	e0fffe17 	ldw	r3,-8(fp)
   20558:	e0bffd17 	ldw	r2,-12(fp)
   2055c:	18800c26 	beq	r3,r2,20590 <alt_load_section+0x54>
  {
    while( to != end )
   20560:	00000806 	br	20584 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20564:	e0bffe17 	ldw	r2,-8(fp)
   20568:	10c00104 	addi	r3,r2,4
   2056c:	e0fffe15 	stw	r3,-8(fp)
   20570:	e0fffd17 	ldw	r3,-12(fp)
   20574:	19000104 	addi	r4,r3,4
   20578:	e13ffd15 	stw	r4,-12(fp)
   2057c:	18c00017 	ldw	r3,0(r3)
   20580:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20584:	e0fffe17 	ldw	r3,-8(fp)
   20588:	e0bfff17 	ldw	r2,-4(fp)
   2058c:	18bff51e 	bne	r3,r2,20564 <__alt_data_end+0xfc020564>
    {
      *to++ = *from++;
    }
  }
}
   20590:	0001883a 	nop
   20594:	e037883a 	mov	sp,fp
   20598:	df000017 	ldw	fp,0(sp)
   2059c:	dec00104 	addi	sp,sp,4
   205a0:	f800283a 	ret

000205a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   205a4:	defffe04 	addi	sp,sp,-8
   205a8:	dfc00115 	stw	ra,4(sp)
   205ac:	df000015 	stw	fp,0(sp)
   205b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   205b4:	018000f4 	movhi	r6,3
   205b8:	31bbcc04 	addi	r6,r6,-4304
   205bc:	014000f4 	movhi	r5,3
   205c0:	296f4f04 	addi	r5,r5,-17092
   205c4:	010000f4 	movhi	r4,3
   205c8:	213bcc04 	addi	r4,r4,-4304
   205cc:	002053c0 	call	2053c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   205d0:	01800034 	movhi	r6,0
   205d4:	31808c04 	addi	r6,r6,560
   205d8:	01400034 	movhi	r5,0
   205dc:	29400804 	addi	r5,r5,32
   205e0:	01000034 	movhi	r4,0
   205e4:	21000804 	addi	r4,r4,32
   205e8:	002053c0 	call	2053c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   205ec:	018000f4 	movhi	r6,3
   205f0:	31af4f04 	addi	r6,r6,-17092
   205f4:	014000b4 	movhi	r5,2
   205f8:	29532604 	addi	r5,r5,19608
   205fc:	010000b4 	movhi	r4,2
   20600:	21132604 	addi	r4,r4,19608
   20604:	002053c0 	call	2053c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20608:	002396c0 	call	2396c <alt_dcache_flush_all>
  alt_icache_flush_all();
   2060c:	0023bbc0 	call	23bbc <alt_icache_flush_all>
}
   20610:	0001883a 	nop
   20614:	e037883a 	mov	sp,fp
   20618:	dfc00117 	ldw	ra,4(sp)
   2061c:	df000017 	ldw	fp,0(sp)
   20620:	dec00204 	addi	sp,sp,8
   20624:	f800283a 	ret

00020628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20628:	defffe04 	addi	sp,sp,-8
   2062c:	dfc00115 	stw	ra,4(sp)
   20630:	df000015 	stw	fp,0(sp)
   20634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20638:	d0a5bd17 	ldw	r2,-26892(gp)
   2063c:	10000326 	beq	r2,zero,2064c <alt_get_errno+0x24>
   20640:	d0a5bd17 	ldw	r2,-26892(gp)
   20644:	103ee83a 	callr	r2
   20648:	00000106 	br	20650 <alt_get_errno+0x28>
   2064c:	d0b24e04 	addi	r2,gp,-14024
}
   20650:	e037883a 	mov	sp,fp
   20654:	dfc00117 	ldw	ra,4(sp)
   20658:	df000017 	ldw	fp,0(sp)
   2065c:	dec00204 	addi	sp,sp,8
   20660:	f800283a 	ret

00020664 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   20664:	defff904 	addi	sp,sp,-28
   20668:	dfc00615 	stw	ra,24(sp)
   2066c:	df000515 	stw	fp,20(sp)
   20670:	df000504 	addi	fp,sp,20
   20674:	e13ffd15 	stw	r4,-12(fp)
   20678:	e17ffe15 	stw	r5,-8(fp)
   2067c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   20680:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20684:	e0bffd17 	ldw	r2,-12(fp)
   20688:	10000816 	blt	r2,zero,206ac <lseek+0x48>
   2068c:	01400304 	movi	r5,12
   20690:	e13ffd17 	ldw	r4,-12(fp)
   20694:	000d9380 	call	d938 <__mulsi3>
   20698:	1007883a 	mov	r3,r2
   2069c:	008000f4 	movhi	r2,3
   206a0:	10b18204 	addi	r2,r2,-14840
   206a4:	1885883a 	add	r2,r3,r2
   206a8:	00000106 	br	206b0 <lseek+0x4c>
   206ac:	0005883a 	mov	r2,zero
   206b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   206b4:	e0bffc17 	ldw	r2,-16(fp)
   206b8:	10001026 	beq	r2,zero,206fc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   206bc:	e0bffc17 	ldw	r2,-16(fp)
   206c0:	10800017 	ldw	r2,0(r2)
   206c4:	10800717 	ldw	r2,28(r2)
   206c8:	10000926 	beq	r2,zero,206f0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   206cc:	e0bffc17 	ldw	r2,-16(fp)
   206d0:	10800017 	ldw	r2,0(r2)
   206d4:	10800717 	ldw	r2,28(r2)
   206d8:	e1bfff17 	ldw	r6,-4(fp)
   206dc:	e17ffe17 	ldw	r5,-8(fp)
   206e0:	e13ffc17 	ldw	r4,-16(fp)
   206e4:	103ee83a 	callr	r2
   206e8:	e0bffb15 	stw	r2,-20(fp)
   206ec:	00000506 	br	20704 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   206f0:	00bfde84 	movi	r2,-134
   206f4:	e0bffb15 	stw	r2,-20(fp)
   206f8:	00000206 	br	20704 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   206fc:	00bfebc4 	movi	r2,-81
   20700:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   20704:	e0bffb17 	ldw	r2,-20(fp)
   20708:	1000070e 	bge	r2,zero,20728 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2070c:	00206280 	call	20628 <alt_get_errno>
   20710:	1007883a 	mov	r3,r2
   20714:	e0bffb17 	ldw	r2,-20(fp)
   20718:	0085c83a 	sub	r2,zero,r2
   2071c:	18800015 	stw	r2,0(r3)
    rc = -1;
   20720:	00bfffc4 	movi	r2,-1
   20724:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   20728:	e0bffb17 	ldw	r2,-20(fp)
}
   2072c:	e037883a 	mov	sp,fp
   20730:	dfc00117 	ldw	ra,4(sp)
   20734:	df000017 	ldw	fp,0(sp)
   20738:	dec00204 	addi	sp,sp,8
   2073c:	f800283a 	ret

00020740 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20740:	defffd04 	addi	sp,sp,-12
   20744:	dfc00215 	stw	ra,8(sp)
   20748:	df000115 	stw	fp,4(sp)
   2074c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20750:	0009883a 	mov	r4,zero
   20754:	0020ccc0 	call	20ccc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20758:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2075c:	0020d040 	call	20d04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20760:	018000f4 	movhi	r6,3
   20764:	31af3a04 	addi	r6,r6,-17176
   20768:	014000f4 	movhi	r5,3
   2076c:	296f3a04 	addi	r5,r5,-17176
   20770:	010000f4 	movhi	r4,3
   20774:	212f3a04 	addi	r4,r4,-17176
   20778:	0023f600 	call	23f60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2077c:	0023a6c0 	call	23a6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20780:	010000b4 	movhi	r4,2
   20784:	210eb304 	addi	r4,r4,15052
   20788:	00248f80 	call	248f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2078c:	d0b25217 	ldw	r2,-14008(gp)
   20790:	d0f25317 	ldw	r3,-14004(gp)
   20794:	d1325417 	ldw	r4,-14000(gp)
   20798:	200d883a 	mov	r6,r4
   2079c:	180b883a 	mov	r5,r3
   207a0:	1009883a 	mov	r4,r2
   207a4:	000ac780 	call	ac78 <main>
   207a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   207ac:	01000044 	movi	r4,1
   207b0:	002009c0 	call	2009c <close>
  exit (result);
   207b4:	e13fff17 	ldw	r4,-4(fp)
   207b8:	002490c0 	call	2490c <exit>

000207bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   207bc:	defffe04 	addi	sp,sp,-8
   207c0:	df000115 	stw	fp,4(sp)
   207c4:	df000104 	addi	fp,sp,4
   207c8:	e13fff15 	stw	r4,-4(fp)
}
   207cc:	0001883a 	nop
   207d0:	e037883a 	mov	sp,fp
   207d4:	df000017 	ldw	fp,0(sp)
   207d8:	dec00104 	addi	sp,sp,4
   207dc:	f800283a 	ret

000207e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   207e0:	defffe04 	addi	sp,sp,-8
   207e4:	df000115 	stw	fp,4(sp)
   207e8:	df000104 	addi	fp,sp,4
   207ec:	e13fff15 	stw	r4,-4(fp)
}
   207f0:	0001883a 	nop
   207f4:	e037883a 	mov	sp,fp
   207f8:	df000017 	ldw	fp,0(sp)
   207fc:	dec00104 	addi	sp,sp,4
   20800:	f800283a 	ret

00020804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20804:	defffe04 	addi	sp,sp,-8
   20808:	dfc00115 	stw	ra,4(sp)
   2080c:	df000015 	stw	fp,0(sp)
   20810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20814:	d0a5bd17 	ldw	r2,-26892(gp)
   20818:	10000326 	beq	r2,zero,20828 <alt_get_errno+0x24>
   2081c:	d0a5bd17 	ldw	r2,-26892(gp)
   20820:	103ee83a 	callr	r2
   20824:	00000106 	br	2082c <alt_get_errno+0x28>
   20828:	d0b24e04 	addi	r2,gp,-14024
}
   2082c:	e037883a 	mov	sp,fp
   20830:	dfc00117 	ldw	ra,4(sp)
   20834:	df000017 	ldw	fp,0(sp)
   20838:	dec00204 	addi	sp,sp,8
   2083c:	f800283a 	ret

00020840 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   20840:	defff904 	addi	sp,sp,-28
   20844:	dfc00615 	stw	ra,24(sp)
   20848:	df000515 	stw	fp,20(sp)
   2084c:	df000504 	addi	fp,sp,20
   20850:	e13ffd15 	stw	r4,-12(fp)
   20854:	e17ffe15 	stw	r5,-8(fp)
   20858:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2085c:	e0bffd17 	ldw	r2,-12(fp)
   20860:	10000816 	blt	r2,zero,20884 <read+0x44>
   20864:	01400304 	movi	r5,12
   20868:	e13ffd17 	ldw	r4,-12(fp)
   2086c:	000d9380 	call	d938 <__mulsi3>
   20870:	1007883a 	mov	r3,r2
   20874:	008000f4 	movhi	r2,3
   20878:	10b18204 	addi	r2,r2,-14840
   2087c:	1885883a 	add	r2,r3,r2
   20880:	00000106 	br	20888 <read+0x48>
   20884:	0005883a 	mov	r2,zero
   20888:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2088c:	e0bffb17 	ldw	r2,-20(fp)
   20890:	10002226 	beq	r2,zero,2091c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   20894:	e0bffb17 	ldw	r2,-20(fp)
   20898:	10800217 	ldw	r2,8(r2)
   2089c:	108000cc 	andi	r2,r2,3
   208a0:	10800060 	cmpeqi	r2,r2,1
   208a4:	1000181e 	bne	r2,zero,20908 <read+0xc8>
        (fd->dev->read))
   208a8:	e0bffb17 	ldw	r2,-20(fp)
   208ac:	10800017 	ldw	r2,0(r2)
   208b0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   208b4:	10001426 	beq	r2,zero,20908 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   208b8:	e0bffb17 	ldw	r2,-20(fp)
   208bc:	10800017 	ldw	r2,0(r2)
   208c0:	10800517 	ldw	r2,20(r2)
   208c4:	e0ffff17 	ldw	r3,-4(fp)
   208c8:	180d883a 	mov	r6,r3
   208cc:	e17ffe17 	ldw	r5,-8(fp)
   208d0:	e13ffb17 	ldw	r4,-20(fp)
   208d4:	103ee83a 	callr	r2
   208d8:	e0bffc15 	stw	r2,-16(fp)
   208dc:	e0bffc17 	ldw	r2,-16(fp)
   208e0:	1000070e 	bge	r2,zero,20900 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   208e4:	00208040 	call	20804 <alt_get_errno>
   208e8:	1007883a 	mov	r3,r2
   208ec:	e0bffc17 	ldw	r2,-16(fp)
   208f0:	0085c83a 	sub	r2,zero,r2
   208f4:	18800015 	stw	r2,0(r3)
          return -1;
   208f8:	00bfffc4 	movi	r2,-1
   208fc:	00000c06 	br	20930 <read+0xf0>
        }
        return rval;
   20900:	e0bffc17 	ldw	r2,-16(fp)
   20904:	00000a06 	br	20930 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   20908:	00208040 	call	20804 <alt_get_errno>
   2090c:	1007883a 	mov	r3,r2
   20910:	00800344 	movi	r2,13
   20914:	18800015 	stw	r2,0(r3)
   20918:	00000406 	br	2092c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2091c:	00208040 	call	20804 <alt_get_errno>
   20920:	1007883a 	mov	r3,r2
   20924:	00801444 	movi	r2,81
   20928:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2092c:	00bfffc4 	movi	r2,-1
}
   20930:	e037883a 	mov	sp,fp
   20934:	dfc00117 	ldw	ra,4(sp)
   20938:	df000017 	ldw	fp,0(sp)
   2093c:	dec00204 	addi	sp,sp,8
   20940:	f800283a 	ret

00020944 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   20944:	defffc04 	addi	sp,sp,-16
   20948:	dfc00315 	stw	ra,12(sp)
   2094c:	df000215 	stw	fp,8(sp)
   20950:	dc000115 	stw	r16,4(sp)
   20954:	df000204 	addi	fp,sp,8
   20958:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2095c:	e0bffe17 	ldw	r2,-8(fp)
   20960:	108000d0 	cmplti	r2,r2,3
   20964:	1000111e 	bne	r2,zero,209ac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   20968:	040000f4 	movhi	r16,3
   2096c:	84318204 	addi	r16,r16,-14840
   20970:	e0bffe17 	ldw	r2,-8(fp)
   20974:	01400304 	movi	r5,12
   20978:	1009883a 	mov	r4,r2
   2097c:	000d9380 	call	d938 <__mulsi3>
   20980:	8085883a 	add	r2,r16,r2
   20984:	10800204 	addi	r2,r2,8
   20988:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2098c:	040000f4 	movhi	r16,3
   20990:	84318204 	addi	r16,r16,-14840
   20994:	e0bffe17 	ldw	r2,-8(fp)
   20998:	01400304 	movi	r5,12
   2099c:	1009883a 	mov	r4,r2
   209a0:	000d9380 	call	d938 <__mulsi3>
   209a4:	8085883a 	add	r2,r16,r2
   209a8:	10000015 	stw	zero,0(r2)
  }
}
   209ac:	0001883a 	nop
   209b0:	e6ffff04 	addi	sp,fp,-4
   209b4:	dfc00217 	ldw	ra,8(sp)
   209b8:	df000117 	ldw	fp,4(sp)
   209bc:	dc000017 	ldw	r16,0(sp)
   209c0:	dec00304 	addi	sp,sp,12
   209c4:	f800283a 	ret

000209c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   209c8:	defff904 	addi	sp,sp,-28
   209cc:	df000615 	stw	fp,24(sp)
   209d0:	df000604 	addi	fp,sp,24
   209d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   209d8:	0005303a 	rdctl	r2,status
   209dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   209e0:	e0fffe17 	ldw	r3,-8(fp)
   209e4:	00bfff84 	movi	r2,-2
   209e8:	1884703a 	and	r2,r3,r2
   209ec:	1001703a 	wrctl	status,r2
  
  return context;
   209f0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   209f4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   209f8:	d0a5be17 	ldw	r2,-26888(gp)
   209fc:	10c000c4 	addi	r3,r2,3
   20a00:	00bfff04 	movi	r2,-4
   20a04:	1884703a 	and	r2,r3,r2
   20a08:	d0a5be15 	stw	r2,-26888(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   20a0c:	d0e5be17 	ldw	r3,-26888(gp)
   20a10:	e0bfff17 	ldw	r2,-4(fp)
   20a14:	1887883a 	add	r3,r3,r2
   20a18:	00810034 	movhi	r2,1024
   20a1c:	10800004 	addi	r2,r2,0
   20a20:	10c0062e 	bgeu	r2,r3,20a3c <sbrk+0x74>
   20a24:	e0bffb17 	ldw	r2,-20(fp)
   20a28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20a2c:	e0bffa17 	ldw	r2,-24(fp)
   20a30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   20a34:	00bfffc4 	movi	r2,-1
   20a38:	00000b06 	br	20a68 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   20a3c:	d0a5be17 	ldw	r2,-26888(gp)
   20a40:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   20a44:	d0e5be17 	ldw	r3,-26888(gp)
   20a48:	e0bfff17 	ldw	r2,-4(fp)
   20a4c:	1885883a 	add	r2,r3,r2
   20a50:	d0a5be15 	stw	r2,-26888(gp)
   20a54:	e0bffb17 	ldw	r2,-20(fp)
   20a58:	e0bffc15 	stw	r2,-16(fp)
   20a5c:	e0bffc17 	ldw	r2,-16(fp)
   20a60:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   20a64:	e0bffd17 	ldw	r2,-12(fp)
} 
   20a68:	e037883a 	mov	sp,fp
   20a6c:	df000017 	ldw	fp,0(sp)
   20a70:	dec00104 	addi	sp,sp,4
   20a74:	f800283a 	ret

00020a78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20a78:	defffe04 	addi	sp,sp,-8
   20a7c:	dfc00115 	stw	ra,4(sp)
   20a80:	df000015 	stw	fp,0(sp)
   20a84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20a88:	d0a5bd17 	ldw	r2,-26892(gp)
   20a8c:	10000326 	beq	r2,zero,20a9c <alt_get_errno+0x24>
   20a90:	d0a5bd17 	ldw	r2,-26892(gp)
   20a94:	103ee83a 	callr	r2
   20a98:	00000106 	br	20aa0 <alt_get_errno+0x28>
   20a9c:	d0b24e04 	addi	r2,gp,-14024
}
   20aa0:	e037883a 	mov	sp,fp
   20aa4:	dfc00117 	ldw	ra,4(sp)
   20aa8:	df000017 	ldw	fp,0(sp)
   20aac:	dec00204 	addi	sp,sp,8
   20ab0:	f800283a 	ret

00020ab4 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   20ab4:	defffc04 	addi	sp,sp,-16
   20ab8:	dfc00315 	stw	ra,12(sp)
   20abc:	df000215 	stw	fp,8(sp)
   20ac0:	df000204 	addi	fp,sp,8
   20ac4:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   20ac8:	d0b25717 	ldw	r2,-13988(gp)
  clock_t ticks = alt_nticks(); 
   20acc:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20ad0:	d0b25617 	ldw	r2,-13992(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   20ad4:	1000061e 	bne	r2,zero,20af0 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   20ad8:	0020a780 	call	20a78 <alt_get_errno>
   20adc:	1007883a 	mov	r3,r2
   20ae0:	00801604 	movi	r2,88
   20ae4:	18800015 	stw	r2,0(r3)
    return 0;
   20ae8:	0005883a 	mov	r2,zero
   20aec:	00000a06 	br	20b18 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   20af0:	e0bfff17 	ldw	r2,-4(fp)
   20af4:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   20af8:	e0bfff17 	ldw	r2,-4(fp)
   20afc:	e0fffe17 	ldw	r3,-8(fp)
   20b00:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   20b04:	e0bfff17 	ldw	r2,-4(fp)
   20b08:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   20b0c:	e0bfff17 	ldw	r2,-4(fp)
   20b10:	10000315 	stw	zero,12(r2)

  return ticks;
   20b14:	e0bffe17 	ldw	r2,-8(fp)
}
   20b18:	e037883a 	mov	sp,fp
   20b1c:	dfc00117 	ldw	ra,4(sp)
   20b20:	df000017 	ldw	fp,0(sp)
   20b24:	dec00204 	addi	sp,sp,8
   20b28:	f800283a 	ret

00020b2c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   20b2c:	defffd04 	addi	sp,sp,-12
   20b30:	dfc00215 	stw	ra,8(sp)
   20b34:	df000115 	stw	fp,4(sp)
   20b38:	df000104 	addi	fp,sp,4
   20b3c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   20b40:	e13fff17 	ldw	r4,-4(fp)
   20b44:	00238140 	call	23814 <alt_busy_sleep>
}
   20b48:	e037883a 	mov	sp,fp
   20b4c:	dfc00117 	ldw	ra,4(sp)
   20b50:	df000017 	ldw	fp,0(sp)
   20b54:	dec00204 	addi	sp,sp,8
   20b58:	f800283a 	ret

00020b5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20b5c:	defffe04 	addi	sp,sp,-8
   20b60:	dfc00115 	stw	ra,4(sp)
   20b64:	df000015 	stw	fp,0(sp)
   20b68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20b6c:	d0a5bd17 	ldw	r2,-26892(gp)
   20b70:	10000326 	beq	r2,zero,20b80 <alt_get_errno+0x24>
   20b74:	d0a5bd17 	ldw	r2,-26892(gp)
   20b78:	103ee83a 	callr	r2
   20b7c:	00000106 	br	20b84 <alt_get_errno+0x28>
   20b80:	d0b24e04 	addi	r2,gp,-14024
}
   20b84:	e037883a 	mov	sp,fp
   20b88:	dfc00117 	ldw	ra,4(sp)
   20b8c:	df000017 	ldw	fp,0(sp)
   20b90:	dec00204 	addi	sp,sp,8
   20b94:	f800283a 	ret

00020b98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20b98:	defff904 	addi	sp,sp,-28
   20b9c:	dfc00615 	stw	ra,24(sp)
   20ba0:	df000515 	stw	fp,20(sp)
   20ba4:	df000504 	addi	fp,sp,20
   20ba8:	e13ffd15 	stw	r4,-12(fp)
   20bac:	e17ffe15 	stw	r5,-8(fp)
   20bb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20bb4:	e0bffd17 	ldw	r2,-12(fp)
   20bb8:	10000816 	blt	r2,zero,20bdc <write+0x44>
   20bbc:	01400304 	movi	r5,12
   20bc0:	e13ffd17 	ldw	r4,-12(fp)
   20bc4:	000d9380 	call	d938 <__mulsi3>
   20bc8:	1007883a 	mov	r3,r2
   20bcc:	008000f4 	movhi	r2,3
   20bd0:	10b18204 	addi	r2,r2,-14840
   20bd4:	1885883a 	add	r2,r3,r2
   20bd8:	00000106 	br	20be0 <write+0x48>
   20bdc:	0005883a 	mov	r2,zero
   20be0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20be4:	e0bffb17 	ldw	r2,-20(fp)
   20be8:	10002126 	beq	r2,zero,20c70 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   20bec:	e0bffb17 	ldw	r2,-20(fp)
   20bf0:	10800217 	ldw	r2,8(r2)
   20bf4:	108000cc 	andi	r2,r2,3
   20bf8:	10001826 	beq	r2,zero,20c5c <write+0xc4>
   20bfc:	e0bffb17 	ldw	r2,-20(fp)
   20c00:	10800017 	ldw	r2,0(r2)
   20c04:	10800617 	ldw	r2,24(r2)
   20c08:	10001426 	beq	r2,zero,20c5c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   20c0c:	e0bffb17 	ldw	r2,-20(fp)
   20c10:	10800017 	ldw	r2,0(r2)
   20c14:	10800617 	ldw	r2,24(r2)
   20c18:	e0ffff17 	ldw	r3,-4(fp)
   20c1c:	180d883a 	mov	r6,r3
   20c20:	e17ffe17 	ldw	r5,-8(fp)
   20c24:	e13ffb17 	ldw	r4,-20(fp)
   20c28:	103ee83a 	callr	r2
   20c2c:	e0bffc15 	stw	r2,-16(fp)
   20c30:	e0bffc17 	ldw	r2,-16(fp)
   20c34:	1000070e 	bge	r2,zero,20c54 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   20c38:	0020b5c0 	call	20b5c <alt_get_errno>
   20c3c:	1007883a 	mov	r3,r2
   20c40:	e0bffc17 	ldw	r2,-16(fp)
   20c44:	0085c83a 	sub	r2,zero,r2
   20c48:	18800015 	stw	r2,0(r3)
        return -1;
   20c4c:	00bfffc4 	movi	r2,-1
   20c50:	00000c06 	br	20c84 <write+0xec>
      }
      return rval;
   20c54:	e0bffc17 	ldw	r2,-16(fp)
   20c58:	00000a06 	br	20c84 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   20c5c:	0020b5c0 	call	20b5c <alt_get_errno>
   20c60:	1007883a 	mov	r3,r2
   20c64:	00800344 	movi	r2,13
   20c68:	18800015 	stw	r2,0(r3)
   20c6c:	00000406 	br	20c80 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   20c70:	0020b5c0 	call	20b5c <alt_get_errno>
   20c74:	1007883a 	mov	r3,r2
   20c78:	00801444 	movi	r2,81
   20c7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   20c80:	00bfffc4 	movi	r2,-1
}
   20c84:	e037883a 	mov	sp,fp
   20c88:	dfc00117 	ldw	ra,4(sp)
   20c8c:	df000017 	ldw	fp,0(sp)
   20c90:	dec00204 	addi	sp,sp,8
   20c94:	f800283a 	ret

00020c98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20c98:	defffd04 	addi	sp,sp,-12
   20c9c:	dfc00215 	stw	ra,8(sp)
   20ca0:	df000115 	stw	fp,4(sp)
   20ca4:	df000104 	addi	fp,sp,4
   20ca8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20cac:	d165ba04 	addi	r5,gp,-26904
   20cb0:	e13fff17 	ldw	r4,-4(fp)
   20cb4:	00239c80 	call	239c8 <alt_dev_llist_insert>
}
   20cb8:	e037883a 	mov	sp,fp
   20cbc:	dfc00117 	ldw	ra,4(sp)
   20cc0:	df000017 	ldw	fp,0(sp)
   20cc4:	dec00204 	addi	sp,sp,8
   20cc8:	f800283a 	ret

00020ccc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20ccc:	defffd04 	addi	sp,sp,-12
   20cd0:	dfc00215 	stw	ra,8(sp)
   20cd4:	df000115 	stw	fp,4(sp)
   20cd8:	df000104 	addi	fp,sp,4
   20cdc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   20ce0:	002466c0 	call	2466c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20ce4:	00800044 	movi	r2,1
   20ce8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20cec:	0001883a 	nop
   20cf0:	e037883a 	mov	sp,fp
   20cf4:	dfc00117 	ldw	ra,4(sp)
   20cf8:	df000017 	ldw	fp,0(sp)
   20cfc:	dec00204 	addi	sp,sp,8
   20d00:	f800283a 	ret

00020d04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20d04:	defffe04 	addi	sp,sp,-8
   20d08:	dfc00115 	stw	ra,4(sp)
   20d0c:	df000015 	stw	fp,0(sp)
   20d10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20d14:	01c0fa04 	movi	r7,1000
   20d18:	01800084 	movi	r6,2
   20d1c:	000b883a 	mov	r5,zero
   20d20:	01010034 	movhi	r4,1024
   20d24:	21042004 	addi	r4,r4,4224
   20d28:	002366c0 	call	2366c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   20d2c:	010000f4 	movhi	r4,3
   20d30:	2131e204 	addi	r4,r4,-14456
   20d34:	0020fc80 	call	20fc8 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   20d38:	01800044 	movi	r6,1
   20d3c:	000b883a 	mov	r5,zero
   20d40:	010000f4 	movhi	r4,3
   20d44:	2131fa04 	addi	r4,r4,-14360
   20d48:	0022af40 	call	22af4 <altera_avalon_jtag_uart_init>
   20d4c:	010000f4 	movhi	r4,3
   20d50:	2131f004 	addi	r4,r4,-14400
   20d54:	0020c980 	call	20c98 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   20d58:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   20d5c:	0001883a 	nop
}
   20d60:	0001883a 	nop
   20d64:	e037883a 	mov	sp,fp
   20d68:	dfc00117 	ldw	ra,4(sp)
   20d6c:	df000017 	ldw	fp,0(sp)
   20d70:	dec00204 	addi	sp,sp,8
   20d74:	f800283a 	ret

00020d78 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   20d78:	defff904 	addi	sp,sp,-28
   20d7c:	dfc00615 	stw	ra,24(sp)
   20d80:	df000515 	stw	fp,20(sp)
   20d84:	df000504 	addi	fp,sp,20
   20d88:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   20d8c:	008000b4 	movhi	r2,2
   20d90:	10a1a804 	addi	r2,r2,-31072
   20d94:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   20d98:	e0bfff17 	ldw	r2,-4(fp)
   20d9c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   20da0:	e0bffc17 	ldw	r2,-16(fp)
   20da4:	10800717 	ldw	r2,28(r2)
   20da8:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   20dac:	e0bffd17 	ldw	r2,-12(fp)
   20db0:	10800217 	ldw	r2,8(r2)
   20db4:	10800098 	cmpnei	r2,r2,2
   20db8:	1000251e 	bne	r2,zero,20e50 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   20dbc:	e0bffd17 	ldw	r2,-12(fp)
   20dc0:	10c00017 	ldw	r3,0(r2)
   20dc4:	e0bffd17 	ldw	r2,-12(fp)
   20dc8:	10800117 	ldw	r2,4(r2)
   20dcc:	e13ffe04 	addi	r4,fp,-8
   20dd0:	200f883a 	mov	r7,r4
   20dd4:	100d883a 	mov	r6,r2
   20dd8:	180b883a 	mov	r5,r3
   20ddc:	e13ffc17 	ldw	r4,-16(fp)
   20de0:	00215280 	call	21528 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   20de4:	e0bffd17 	ldw	r2,-12(fp)
   20de8:	10c00117 	ldw	r3,4(r2)
   20dec:	e0bffe17 	ldw	r2,-8(fp)
   20df0:	1887c83a 	sub	r3,r3,r2
   20df4:	e0bffd17 	ldw	r2,-12(fp)
   20df8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   20dfc:	e0bffd17 	ldw	r2,-12(fp)
   20e00:	10c00017 	ldw	r3,0(r2)
   20e04:	e0bffe17 	ldw	r2,-8(fp)
   20e08:	1887883a 	add	r3,r3,r2
   20e0c:	e0bffd17 	ldw	r2,-12(fp)
   20e10:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   20e14:	e0bffd17 	ldw	r2,-12(fp)
   20e18:	10800117 	ldw	r2,4(r2)
   20e1c:	10000c26 	beq	r2,zero,20e50 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20e20:	01400704 	movi	r5,28
   20e24:	e13ffc17 	ldw	r4,-16(fp)
   20e28:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   20e2c:	01400084 	movi	r5,2
   20e30:	e13ffc17 	ldw	r4,-16(fp)
   20e34:	00227840 	call	22784 <alt_avalon_i2c_int_enable>
   20e38:	00000e06 	br	20e74 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   20e3c:	e0bffb17 	ldw	r2,-20(fp)
   20e40:	10bfffc4 	addi	r2,r2,-1
   20e44:	e0bffb15 	stw	r2,-20(fp)
   20e48:	e0bffb17 	ldw	r2,-20(fp)
   20e4c:	10000426 	beq	r2,zero,20e60 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   20e50:	e13ffc17 	ldw	r4,-16(fp)
   20e54:	00214e40 	call	214e4 <alt_avalon_i2c_is_busy>
   20e58:	103ff81e 	bne	r2,zero,20e3c <__alt_data_end+0xfc020e3c>
   20e5c:	00000106 	br	20e64 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   20e60:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   20e64:	e13ffc17 	ldw	r4,-16(fp)
   20e68:	002118c0 	call	2118c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   20e6c:	e0bffd17 	ldw	r2,-12(fp)
   20e70:	10000215 	stw	zero,8(r2)
}
   20e74:	e037883a 	mov	sp,fp
   20e78:	dfc00117 	ldw	ra,4(sp)
   20e7c:	df000017 	ldw	fp,0(sp)
   20e80:	dec00204 	addi	sp,sp,8
   20e84:	f800283a 	ret

00020e88 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   20e88:	defffc04 	addi	sp,sp,-16
   20e8c:	dfc00315 	stw	ra,12(sp)
   20e90:	df000215 	stw	fp,8(sp)
   20e94:	df000204 	addi	fp,sp,8
   20e98:	e13ffe15 	stw	r4,-8(fp)
   20e9c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   20ea0:	e0bfff17 	ldw	r2,-4(fp)
   20ea4:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   20ea8:	e1ffff17 	ldw	r7,-4(fp)
   20eac:	000d883a 	mov	r6,zero
   20eb0:	014000b4 	movhi	r5,2
   20eb4:	29435e04 	addi	r5,r5,3448
   20eb8:	e13ffe17 	ldw	r4,-8(fp)
   20ebc:	0020f740 	call	20f74 <alt_avalon_i2c_register_callback>
}
   20ec0:	0001883a 	nop
   20ec4:	e037883a 	mov	sp,fp
   20ec8:	dfc00117 	ldw	ra,4(sp)
   20ecc:	df000017 	ldw	fp,0(sp)
   20ed0:	dec00204 	addi	sp,sp,8
   20ed4:	f800283a 	ret

00020ed8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   20ed8:	defff904 	addi	sp,sp,-28
   20edc:	dfc00615 	stw	ra,24(sp)
   20ee0:	df000515 	stw	fp,20(sp)
   20ee4:	df000504 	addi	fp,sp,20
   20ee8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   20eec:	e0bfff17 	ldw	r2,-4(fp)
   20ef0:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20ef4:	014007c4 	movi	r5,31
   20ef8:	e13ffb17 	ldw	r4,-20(fp)
   20efc:	002271c0 	call	2271c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20f00:	01400704 	movi	r5,28
   20f04:	e13ffb17 	ldw	r4,-20(fp)
   20f08:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   20f0c:	e0bffb17 	ldw	r2,-20(fp)
   20f10:	10800617 	ldw	r2,24(r2)
   20f14:	10001126 	beq	r2,zero,20f5c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20f18:	0005303a 	rdctl	r2,status
   20f1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20f20:	e0fffd17 	ldw	r3,-12(fp)
   20f24:	00bfff84 	movi	r2,-2
   20f28:	1884703a 	and	r2,r3,r2
   20f2c:	1001703a 	wrctl	status,r2
  
  return context;
   20f30:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   20f34:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   20f38:	e0bffb17 	ldw	r2,-20(fp)
   20f3c:	10800617 	ldw	r2,24(r2)
   20f40:	e13ffb17 	ldw	r4,-20(fp)
   20f44:	103ee83a 	callr	r2
   20f48:	e0bffc17 	ldw	r2,-16(fp)
   20f4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f50:	e0bffe17 	ldw	r2,-8(fp)
   20f54:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   20f58:	0001883a 	nop
   20f5c:	0001883a 	nop
}
   20f60:	e037883a 	mov	sp,fp
   20f64:	dfc00117 	ldw	ra,4(sp)
   20f68:	df000017 	ldw	fp,0(sp)
   20f6c:	dec00204 	addi	sp,sp,8
   20f70:	f800283a 	ret

00020f74 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   20f74:	defffb04 	addi	sp,sp,-20
   20f78:	df000415 	stw	fp,16(sp)
   20f7c:	df000404 	addi	fp,sp,16
   20f80:	e13ffc15 	stw	r4,-16(fp)
   20f84:	e17ffd15 	stw	r5,-12(fp)
   20f88:	e1bffe15 	stw	r6,-8(fp)
   20f8c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   20f90:	e0bffc17 	ldw	r2,-16(fp)
   20f94:	e0fffd17 	ldw	r3,-12(fp)
   20f98:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   20f9c:	e0bffc17 	ldw	r2,-16(fp)
   20fa0:	e0ffff17 	ldw	r3,-4(fp)
   20fa4:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   20fa8:	e0bffc17 	ldw	r2,-16(fp)
   20fac:	e0fffe17 	ldw	r3,-8(fp)
   20fb0:	10c00815 	stw	r3,32(r2)

    return ;
   20fb4:	0001883a 	nop
}
   20fb8:	e037883a 	mov	sp,fp
   20fbc:	df000017 	ldw	fp,0(sp)
   20fc0:	dec00104 	addi	sp,sp,4
   20fc4:	f800283a 	ret

00020fc8 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   20fc8:	defff704 	addi	sp,sp,-36
   20fcc:	dfc00815 	stw	ra,32(sp)
   20fd0:	df000715 	stw	fp,28(sp)
   20fd4:	df000704 	addi	fp,sp,28
   20fd8:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   20fdc:	e13fff17 	ldw	r4,-4(fp)
   20fe0:	002118c0 	call	2118c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20fe4:	014007c4 	movi	r5,31
   20fe8:	e13fff17 	ldw	r4,-4(fp)
   20fec:	002271c0 	call	2271c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20ff0:	01400704 	movi	r5,28
   20ff4:	e13fff17 	ldw	r4,-4(fp)
   20ff8:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   20ffc:	014000c4 	movi	r5,3
   21000:	e13fff17 	ldw	r4,-4(fp)
   21004:	00229280 	call	22928 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   21008:	014000c4 	movi	r5,3
   2100c:	e13fff17 	ldw	r4,-4(fp)
   21010:	00228780 	call	22878 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   21014:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   21018:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   2101c:	e0bffb04 	addi	r2,fp,-20
   21020:	018000b4 	movhi	r6,2
   21024:	31a1a804 	addi	r6,r6,-31072
   21028:	100b883a 	mov	r5,r2
   2102c:	e13fff17 	ldw	r4,-4(fp)
   21030:	00213e80 	call	213e8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   21034:	e0bffb04 	addi	r2,fp,-20
   21038:	100b883a 	mov	r5,r2
   2103c:	e13fff17 	ldw	r4,-4(fp)
   21040:	00212880 	call	21288 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   21044:	d165bf04 	addi	r5,gp,-26884
   21048:	e13fff17 	ldw	r4,-4(fp)
   2104c:	00239c80 	call	239c8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   21050:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   21054:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   21058:	e0bffa17 	ldw	r2,-24(fp)
   2105c:	10000c1e 	bne	r2,zero,21090 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   21060:	e0bfff17 	ldw	r2,-4(fp)
   21064:	10c00417 	ldw	r3,16(r2)
   21068:	e0bfff17 	ldw	r2,-4(fp)
   2106c:	10800517 	ldw	r2,20(r2)
   21070:	d8000015 	stw	zero,0(sp)
   21074:	e1ffff17 	ldw	r7,-4(fp)
   21078:	018000b4 	movhi	r6,2
   2107c:	3183b604 	addi	r6,r6,3800
   21080:	100b883a 	mov	r5,r2
   21084:	1809883a 	mov	r4,r3
   21088:	0023bdc0 	call	23bdc <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   2108c:	00000406 	br	210a0 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   21090:	010000f4 	movhi	r4,3
   21094:	212f4704 	addi	r4,r4,-17124
   21098:	00242600 	call	24260 <alt_printf>
    }

    return;
   2109c:	0001883a 	nop

}
   210a0:	e037883a 	mov	sp,fp
   210a4:	dfc00117 	ldw	ra,4(sp)
   210a8:	df000017 	ldw	fp,0(sp)
   210ac:	dec00204 	addi	sp,sp,8
   210b0:	f800283a 	ret

000210b4 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   210b4:	defffc04 	addi	sp,sp,-16
   210b8:	dfc00315 	stw	ra,12(sp)
   210bc:	df000215 	stw	fp,8(sp)
   210c0:	df000204 	addi	fp,sp,8
   210c4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   210c8:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   210cc:	d165bf04 	addi	r5,gp,-26884
   210d0:	e13fff17 	ldw	r4,-4(fp)
   210d4:	0023b2c0 	call	23b2c <alt_find_dev>
   210d8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   210dc:	e0bffe17 	ldw	r2,-8(fp)
}
   210e0:	e037883a 	mov	sp,fp
   210e4:	dfc00117 	ldw	ra,4(sp)
   210e8:	df000017 	ldw	fp,0(sp)
   210ec:	dec00204 	addi	sp,sp,8
   210f0:	f800283a 	ret

000210f4 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   210f4:	defffc04 	addi	sp,sp,-16
   210f8:	df000315 	stw	fp,12(sp)
   210fc:	df000304 	addi	fp,sp,12
   21100:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   21104:	e0bfff17 	ldw	r2,-4(fp)
   21108:	10800717 	ldw	r2,28(r2)
   2110c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   21110:	e0bfff17 	ldw	r2,-4(fp)
   21114:	10800317 	ldw	r2,12(r2)
   21118:	10800204 	addi	r2,r2,8
   2111c:	10800037 	ldwio	r2,0(r2)
   21120:	1080004c 	andi	r2,r2,1
   21124:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   21128:	e0bffe17 	ldw	r2,-8(fp)
   2112c:	10000226 	beq	r2,zero,21138 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   21130:	00bffe44 	movi	r2,-7
   21134:	00001106 	br	2117c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   21138:	e0bfff17 	ldw	r2,-4(fp)
   2113c:	10c00617 	ldw	r3,24(r2)
   21140:	008000b4 	movhi	r2,2
   21144:	10835e04 	addi	r2,r2,3448
   21148:	1880021e 	bne	r3,r2,21154 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   2114c:	e0bffd17 	ldw	r2,-12(fp)
   21150:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   21154:	e0bfff17 	ldw	r2,-4(fp)
   21158:	10800317 	ldw	r2,12(r2)
   2115c:	10800204 	addi	r2,r2,8
   21160:	e0ffff17 	ldw	r3,-4(fp)
   21164:	18c00317 	ldw	r3,12(r3)
   21168:	18c00204 	addi	r3,r3,8
   2116c:	18c00037 	ldwio	r3,0(r3)
   21170:	18c00054 	ori	r3,r3,1
   21174:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   21178:	0005883a 	mov	r2,zero
}
   2117c:	e037883a 	mov	sp,fp
   21180:	df000017 	ldw	fp,0(sp)
   21184:	dec00104 	addi	sp,sp,4
   21188:	f800283a 	ret

0002118c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2118c:	defffe04 	addi	sp,sp,-8
   21190:	df000115 	stw	fp,4(sp)
   21194:	df000104 	addi	fp,sp,4
   21198:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   2119c:	e0bfff17 	ldw	r2,-4(fp)
   211a0:	10800317 	ldw	r2,12(r2)
   211a4:	10800204 	addi	r2,r2,8
   211a8:	e0ffff17 	ldw	r3,-4(fp)
   211ac:	18c00317 	ldw	r3,12(r3)
   211b0:	18c00204 	addi	r3,r3,8
   211b4:	19000037 	ldwio	r4,0(r3)
   211b8:	00ffff84 	movi	r3,-2
   211bc:	20c6703a 	and	r3,r4,r3
   211c0:	10c00035 	stwio	r3,0(r2)

}
   211c4:	0001883a 	nop
   211c8:	e037883a 	mov	sp,fp
   211cc:	df000017 	ldw	fp,0(sp)
   211d0:	dec00104 	addi	sp,sp,4
   211d4:	f800283a 	ret

000211d8 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   211d8:	defffd04 	addi	sp,sp,-12
   211dc:	df000215 	stw	fp,8(sp)
   211e0:	df000204 	addi	fp,sp,8
   211e4:	e13ffe15 	stw	r4,-8(fp)
   211e8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   211ec:	e0bffe17 	ldw	r2,-8(fp)
   211f0:	10c00d17 	ldw	r3,52(r2)
   211f4:	e0bfff17 	ldw	r2,-4(fp)
   211f8:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   211fc:	e0bffe17 	ldw	r2,-8(fp)
   21200:	10800317 	ldw	r2,12(r2)
   21204:	10800204 	addi	r2,r2,8
   21208:	10800037 	ldwio	r2,0(r2)
   2120c:	1080008c 	andi	r2,r2,2
   21210:	1005d07a 	srai	r2,r2,1
   21214:	1007883a 	mov	r3,r2
   21218:	e0bfff17 	ldw	r2,-4(fp)
   2121c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   21220:	e0bffe17 	ldw	r2,-8(fp)
   21224:	10800317 	ldw	r2,12(r2)
   21228:	10800904 	addi	r2,r2,36
   2122c:	10800037 	ldwio	r2,0(r2)
   21230:	1007883a 	mov	r3,r2
   21234:	e0bfff17 	ldw	r2,-4(fp)
   21238:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   2123c:	e0bffe17 	ldw	r2,-8(fp)
   21240:	10800317 	ldw	r2,12(r2)
   21244:	10800804 	addi	r2,r2,32
   21248:	10800037 	ldwio	r2,0(r2)
   2124c:	1007883a 	mov	r3,r2
   21250:	e0bfff17 	ldw	r2,-4(fp)
   21254:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   21258:	e0bffe17 	ldw	r2,-8(fp)
   2125c:	10800317 	ldw	r2,12(r2)
   21260:	10800a04 	addi	r2,r2,40
   21264:	10800037 	ldwio	r2,0(r2)
   21268:	1007883a 	mov	r3,r2
   2126c:	e0bfff17 	ldw	r2,-4(fp)
   21270:	10c0030d 	sth	r3,12(r2)
}
   21274:	0001883a 	nop
   21278:	e037883a 	mov	sp,fp
   2127c:	df000017 	ldw	fp,0(sp)
   21280:	dec00104 	addi	sp,sp,4
   21284:	f800283a 	ret

00021288 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   21288:	defffd04 	addi	sp,sp,-12
   2128c:	df000215 	stw	fp,8(sp)
   21290:	df000204 	addi	fp,sp,8
   21294:	e13ffe15 	stw	r4,-8(fp)
   21298:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   2129c:	e0bfff17 	ldw	r2,-4(fp)
   212a0:	10c00017 	ldw	r3,0(r2)
   212a4:	e0bffe17 	ldw	r2,-8(fp)
   212a8:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   212ac:	e0bffe17 	ldw	r2,-8(fp)
   212b0:	10800317 	ldw	r2,12(r2)
   212b4:	10c00204 	addi	r3,r2,8
   212b8:	e0bffe17 	ldw	r2,-8(fp)
   212bc:	10800317 	ldw	r2,12(r2)
   212c0:	10800204 	addi	r2,r2,8
   212c4:	10800037 	ldwio	r2,0(r2)
   212c8:	1009883a 	mov	r4,r2
   212cc:	00bfff44 	movi	r2,-3
   212d0:	2088703a 	and	r4,r4,r2
   212d4:	e0bfff17 	ldw	r2,-4(fp)
   212d8:	10800117 	ldw	r2,4(r2)
   212dc:	1085883a 	add	r2,r2,r2
   212e0:	1080008c 	andi	r2,r2,2
   212e4:	2084b03a 	or	r2,r4,r2
   212e8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   212ec:	e0bffe17 	ldw	r2,-8(fp)
   212f0:	10800317 	ldw	r2,12(r2)
   212f4:	10800904 	addi	r2,r2,36
   212f8:	e0ffff17 	ldw	r3,-4(fp)
   212fc:	18c0020b 	ldhu	r3,8(r3)
   21300:	18ffffcc 	andi	r3,r3,65535
   21304:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   21308:	e0bffe17 	ldw	r2,-8(fp)
   2130c:	10800317 	ldw	r2,12(r2)
   21310:	10800804 	addi	r2,r2,32
   21314:	e0ffff17 	ldw	r3,-4(fp)
   21318:	18c0028b 	ldhu	r3,10(r3)
   2131c:	18ffffcc 	andi	r3,r3,65535
   21320:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   21324:	e0bffe17 	ldw	r2,-8(fp)
   21328:	10800317 	ldw	r2,12(r2)
   2132c:	10800a04 	addi	r2,r2,40
   21330:	e0ffff17 	ldw	r3,-4(fp)
   21334:	18c0030b 	ldhu	r3,12(r3)
   21338:	18ffffcc 	andi	r3,r3,65535
   2133c:	10c00035 	stwio	r3,0(r2)
}
   21340:	0001883a 	nop
   21344:	e037883a 	mov	sp,fp
   21348:	df000017 	ldw	fp,0(sp)
   2134c:	dec00104 	addi	sp,sp,4
   21350:	f800283a 	ret

00021354 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   21354:	defffb04 	addi	sp,sp,-20
   21358:	dfc00415 	stw	ra,16(sp)
   2135c:	df000315 	stw	fp,12(sp)
   21360:	df000304 	addi	fp,sp,12
   21364:	e13ffd15 	stw	r4,-12(fp)
   21368:	e17ffe15 	stw	r5,-8(fp)
   2136c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   21370:	e0bffe17 	ldw	r2,-8(fp)
   21374:	1080028b 	ldhu	r2,10(r2)
   21378:	10bfffcc 	andi	r2,r2,65535
   2137c:	10000426 	beq	r2,zero,21390 <alt_avalon_i2c_master_config_speed_get+0x3c>
   21380:	e0bffe17 	ldw	r2,-8(fp)
   21384:	1080020b 	ldhu	r2,8(r2)
   21388:	10bfffcc 	andi	r2,r2,65535
   2138c:	1000021e 	bne	r2,zero,21398 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   21390:	00bfff44 	movi	r2,-3
   21394:	00000f06 	br	213d4 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   21398:	e0bffd17 	ldw	r2,-12(fp)
   2139c:	11000c17 	ldw	r4,48(r2)
   213a0:	e0bffe17 	ldw	r2,-8(fp)
   213a4:	1080028b 	ldhu	r2,10(r2)
   213a8:	10ffffcc 	andi	r3,r2,65535
   213ac:	e0bffe17 	ldw	r2,-8(fp)
   213b0:	1080020b 	ldhu	r2,8(r2)
   213b4:	10bfffcc 	andi	r2,r2,65535
   213b8:	1885883a 	add	r2,r3,r2
   213bc:	100b883a 	mov	r5,r2
   213c0:	000d87c0 	call	d87c <__udivsi3>
   213c4:	1007883a 	mov	r3,r2
   213c8:	e0bfff17 	ldw	r2,-4(fp)
   213cc:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   213d0:	0005883a 	mov	r2,zero
}
   213d4:	e037883a 	mov	sp,fp
   213d8:	dfc00117 	ldw	ra,4(sp)
   213dc:	df000017 	ldw	fp,0(sp)
   213e0:	dec00204 	addi	sp,sp,8
   213e4:	f800283a 	ret

000213e8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   213e8:	defff904 	addi	sp,sp,-28
   213ec:	dfc00615 	stw	ra,24(sp)
   213f0:	df000515 	stw	fp,20(sp)
   213f4:	df000504 	addi	fp,sp,20
   213f8:	e13ffd15 	stw	r4,-12(fp)
   213fc:	e17ffe15 	stw	r5,-8(fp)
   21400:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   21404:	e0ffff17 	ldw	r3,-4(fp)
   21408:	008001b4 	movhi	r2,6
   2140c:	1086a004 	addi	r2,r2,6784
   21410:	10c00436 	bltu	r2,r3,21424 <alt_avalon_i2c_master_config_speed_set+0x3c>
   21414:	e0bfff17 	ldw	r2,-4(fp)
   21418:	10000226 	beq	r2,zero,21424 <alt_avalon_i2c_master_config_speed_set+0x3c>
   2141c:	e0bfff17 	ldw	r2,-4(fp)
   21420:	1000021e 	bne	r2,zero,2142c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   21424:	00bfff04 	movi	r2,-4
   21428:	00002906 	br	214d0 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   2142c:	e0bffd17 	ldw	r2,-12(fp)
   21430:	10c00c17 	ldw	r3,48(r2)
   21434:	e0bfff17 	ldw	r2,-4(fp)
   21438:	1085883a 	add	r2,r2,r2
   2143c:	100b883a 	mov	r5,r2
   21440:	1809883a 	mov	r4,r3
   21444:	000d87c0 	call	d87c <__udivsi3>
   21448:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2144c:	e0bffb17 	ldw	r2,-20(fp)
   21450:	10800f04 	addi	r2,r2,60
   21454:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   21458:	e0bffb17 	ldw	r2,-20(fp)
   2145c:	10bff104 	addi	r2,r2,-60
   21460:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   21464:	e0ffff17 	ldw	r3,-4(fp)
   21468:	008000b4 	movhi	r2,2
   2146c:	10a1a804 	addi	r2,r2,-31072
   21470:	10c0042e 	bgeu	r2,r3,21484 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   21474:	e0bffe17 	ldw	r2,-8(fp)
   21478:	00c00044 	movi	r3,1
   2147c:	10c00115 	stw	r3,4(r2)
   21480:	00000206 	br	2148c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   21484:	e0bffe17 	ldw	r2,-8(fp)
   21488:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   2148c:	e0bffb17 	ldw	r2,-20(fp)
   21490:	1007883a 	mov	r3,r2
   21494:	e0bffe17 	ldw	r2,-8(fp)
   21498:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   2149c:	e0bffc17 	ldw	r2,-16(fp)
   214a0:	1007883a 	mov	r3,r2
   214a4:	e0bffe17 	ldw	r2,-8(fp)
   214a8:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   214ac:	e0bffb17 	ldw	r2,-20(fp)
   214b0:	1007883a 	mov	r3,r2
   214b4:	e0bffb17 	ldw	r2,-20(fp)
   214b8:	1004d07a 	srli	r2,r2,1
   214bc:	1885c83a 	sub	r2,r3,r2
   214c0:	1007883a 	mov	r3,r2
   214c4:	e0bffe17 	ldw	r2,-8(fp)
   214c8:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   214cc:	0005883a 	mov	r2,zero

}
   214d0:	e037883a 	mov	sp,fp
   214d4:	dfc00117 	ldw	ra,4(sp)
   214d8:	df000017 	ldw	fp,0(sp)
   214dc:	dec00204 	addi	sp,sp,8
   214e0:	f800283a 	ret

000214e4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   214e4:	defffe04 	addi	sp,sp,-8
   214e8:	df000115 	stw	fp,4(sp)
   214ec:	df000104 	addi	fp,sp,4
   214f0:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   214f4:	e0bfff17 	ldw	r2,-4(fp)
   214f8:	10800317 	ldw	r2,12(r2)
   214fc:	10800504 	addi	r2,r2,20
   21500:	10800037 	ldwio	r2,0(r2)
   21504:	1080004c 	andi	r2,r2,1
   21508:	10000226 	beq	r2,zero,21514 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   2150c:	00800044 	movi	r2,1
   21510:	00000106 	br	21518 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   21514:	0005883a 	mov	r2,zero
}
   21518:	e037883a 	mov	sp,fp
   2151c:	df000017 	ldw	fp,0(sp)
   21520:	dec00104 	addi	sp,sp,4
   21524:	f800283a 	ret

00021528 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   21528:	defffb04 	addi	sp,sp,-20
   2152c:	df000415 	stw	fp,16(sp)
   21530:	df000404 	addi	fp,sp,16
   21534:	e13ffc15 	stw	r4,-16(fp)
   21538:	e17ffd15 	stw	r5,-12(fp)
   2153c:	e1bffe15 	stw	r6,-8(fp)
   21540:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   21544:	e0bfff17 	ldw	r2,-4(fp)
   21548:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2154c:	00001406 	br	215a0 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   21550:	e0bfff17 	ldw	r2,-4(fp)
   21554:	10800017 	ldw	r2,0(r2)
   21558:	e0fffd17 	ldw	r3,-12(fp)
   2155c:	1885883a 	add	r2,r3,r2
   21560:	e0fffc17 	ldw	r3,-16(fp)
   21564:	18c00317 	ldw	r3,12(r3)
   21568:	18c00104 	addi	r3,r3,4
   2156c:	18c00037 	ldwio	r3,0(r3)
   21570:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   21574:	e0bfff17 	ldw	r2,-4(fp)
   21578:	10800017 	ldw	r2,0(r2)
   2157c:	10c00044 	addi	r3,r2,1
   21580:	e0bfff17 	ldw	r2,-4(fp)
   21584:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21588:	e0bfff17 	ldw	r2,-4(fp)
   2158c:	10c00017 	ldw	r3,0(r2)
   21590:	e0bffe17 	ldw	r2,-8(fp)
   21594:	1880021e 	bne	r3,r2,215a0 <alt_avalon_i2c_rx_read_available+0x78>
   21598:	e0bffe17 	ldw	r2,-8(fp)
   2159c:	1000061e 	bne	r2,zero,215b8 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   215a0:	e0bffc17 	ldw	r2,-16(fp)
   215a4:	10800317 	ldw	r2,12(r2)
   215a8:	10800704 	addi	r2,r2,28
   215ac:	10800037 	ldwio	r2,0(r2)
   215b0:	103fe71e 	bne	r2,zero,21550 <__alt_data_end+0xfc021550>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   215b4:	00000106 	br	215bc <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   215b8:	0001883a 	nop
    }
}
   215bc:	0001883a 	nop
   215c0:	e037883a 	mov	sp,fp
   215c4:	df000017 	ldw	fp,0(sp)
   215c8:	dec00104 	addi	sp,sp,4
   215cc:	f800283a 	ret

000215d0 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   215d0:	defffa04 	addi	sp,sp,-24
   215d4:	dfc00515 	stw	ra,20(sp)
   215d8:	df000415 	stw	fp,16(sp)
   215dc:	df000404 	addi	fp,sp,16
   215e0:	e13ffe15 	stw	r4,-8(fp)
   215e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   215e8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   215ec:	008000b4 	movhi	r2,2
   215f0:	10a1a804 	addi	r2,r2,-31072
   215f4:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   215f8:	00000d06 	br	21630 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   215fc:	e0bffd17 	ldw	r2,-12(fp)
   21600:	108002a8 	cmpgeui	r2,r2,10
   21604:	1000021e 	bne	r2,zero,21610 <alt_avalon_i2c_rx_read+0x40>
   21608:	0109c404 	movi	r4,10000
   2160c:	00238140 	call	23814 <alt_busy_sleep>
      if (--timeout == 0)
   21610:	e0bffd17 	ldw	r2,-12(fp)
   21614:	10bfffc4 	addi	r2,r2,-1
   21618:	e0bffd15 	stw	r2,-12(fp)
   2161c:	e0bffd17 	ldw	r2,-12(fp)
   21620:	1000031e 	bne	r2,zero,21630 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   21624:	00bfff84 	movi	r2,-2
   21628:	e0bffc15 	stw	r2,-16(fp)
        break;
   2162c:	00000506 	br	21644 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   21630:	e0bffe17 	ldw	r2,-8(fp)
   21634:	10800317 	ldw	r2,12(r2)
   21638:	10800704 	addi	r2,r2,28
   2163c:	10800037 	ldwio	r2,0(r2)
   21640:	103fee26 	beq	r2,zero,215fc <__alt_data_end+0xfc0215fc>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   21644:	e0bffe17 	ldw	r2,-8(fp)
   21648:	10800317 	ldw	r2,12(r2)
   2164c:	10800104 	addi	r2,r2,4
   21650:	10800037 	ldwio	r2,0(r2)
   21654:	1007883a 	mov	r3,r2
   21658:	e0bfff17 	ldw	r2,-4(fp)
   2165c:	10c00005 	stb	r3,0(r2)
        
    return status;
   21660:	e0bffc17 	ldw	r2,-16(fp)
}
   21664:	e037883a 	mov	sp,fp
   21668:	dfc00117 	ldw	ra,4(sp)
   2166c:	df000017 	ldw	fp,0(sp)
   21670:	dec00204 	addi	sp,sp,8
   21674:	f800283a 	ret

00021678 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   21678:	defff804 	addi	sp,sp,-32
   2167c:	dfc00715 	stw	ra,28(sp)
   21680:	df000615 	stw	fp,24(sp)
   21684:	df000604 	addi	fp,sp,24
   21688:	e13ffc15 	stw	r4,-16(fp)
   2168c:	2809883a 	mov	r4,r5
   21690:	3007883a 	mov	r3,r6
   21694:	3805883a 	mov	r2,r7
   21698:	e13ffd05 	stb	r4,-12(fp)
   2169c:	e0fffe05 	stb	r3,-8(fp)
   216a0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   216a4:	0089c404 	movi	r2,10000
   216a8:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   216ac:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   216b0:	00000c06 	br	216e4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   216b4:	e0bffa17 	ldw	r2,-24(fp)
   216b8:	108002a8 	cmpgeui	r2,r2,10
   216bc:	1000021e 	bne	r2,zero,216c8 <alt_avalon_i2c_cmd_write+0x50>
   216c0:	0109c404 	movi	r4,10000
   216c4:	00238140 	call	23814 <alt_busy_sleep>
      if (--timeout == 0)
   216c8:	e0bffa17 	ldw	r2,-24(fp)
   216cc:	10bfffc4 	addi	r2,r2,-1
   216d0:	e0bffa15 	stw	r2,-24(fp)
   216d4:	e0bffa17 	ldw	r2,-24(fp)
   216d8:	1000021e 	bne	r2,zero,216e4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   216dc:	00bfff84 	movi	r2,-2
   216e0:	00001906 	br	21748 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   216e4:	e0bffc17 	ldw	r2,-16(fp)
   216e8:	10800317 	ldw	r2,12(r2)
   216ec:	10800404 	addi	r2,r2,16
   216f0:	10800037 	ldwio	r2,0(r2)
   216f4:	1080004c 	andi	r2,r2,1
   216f8:	103fee26 	beq	r2,zero,216b4 <__alt_data_end+0xfc0216b4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   216fc:	e0bffc17 	ldw	r2,-16(fp)
   21700:	10800317 	ldw	r2,12(r2)
   21704:	e13ffd03 	ldbu	r4,-12(fp)
   21708:	e0fffe03 	ldbu	r3,-8(fp)
   2170c:	1806927a 	slli	r3,r3,9
   21710:	20c8b03a 	or	r4,r4,r3
   21714:	e0ffff03 	ldbu	r3,-4(fp)
   21718:	1806923a 	slli	r3,r3,8
   2171c:	20c6b03a 	or	r3,r4,r3
   21720:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21724:	e0bffb04 	addi	r2,fp,-20
   21728:	100b883a 	mov	r5,r2
   2172c:	e13ffc17 	ldw	r4,-16(fp)
   21730:	00218b80 	call	218b8 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   21734:	e0bffb04 	addi	r2,fp,-20
   21738:	100b883a 	mov	r5,r2
   2173c:	e13ffc17 	ldw	r4,-16(fp)
   21740:	00219040 	call	21904 <alt_avalon_i2c_check_arblost>
    
    return status;
   21744:	e0bffb17 	ldw	r2,-20(fp)
}
   21748:	e037883a 	mov	sp,fp
   2174c:	dfc00117 	ldw	ra,4(sp)
   21750:	df000017 	ldw	fp,0(sp)
   21754:	dec00204 	addi	sp,sp,8
   21758:	f800283a 	ret

0002175c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   2175c:	defffa04 	addi	sp,sp,-24
   21760:	dfc00515 	stw	ra,20(sp)
   21764:	df000415 	stw	fp,16(sp)
   21768:	df000404 	addi	fp,sp,16
   2176c:	e13ffd15 	stw	r4,-12(fp)
   21770:	e17ffe15 	stw	r5,-8(fp)
   21774:	3005883a 	mov	r2,r6
   21778:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2177c:	e0bffd17 	ldw	r2,-12(fp)
   21780:	10800d17 	ldw	r2,52(r2)
   21784:	10800058 	cmpnei	r2,r2,1
   21788:	10001c1e 	bne	r2,zero,217fc <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2178c:	e0bffd17 	ldw	r2,-12(fp)
   21790:	10800917 	ldw	r2,36(r2)
   21794:	109e0014 	ori	r2,r2,30720
   21798:	1004d1fa 	srli	r2,r2,7
   2179c:	1007883a 	mov	r3,r2
   217a0:	00bfff84 	movi	r2,-2
   217a4:	1884703a 	and	r2,r3,r2
   217a8:	1007883a 	mov	r3,r2
   217ac:	e0bffe17 	ldw	r2,-8(fp)
   217b0:	1884b03a 	or	r2,r3,r2
   217b4:	10803fcc 	andi	r2,r2,255
   217b8:	e0ffff03 	ldbu	r3,-4(fp)
   217bc:	000f883a 	mov	r7,zero
   217c0:	180d883a 	mov	r6,r3
   217c4:	100b883a 	mov	r5,r2
   217c8:	e13ffd17 	ldw	r4,-12(fp)
   217cc:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   217d0:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   217d4:	e0bffd17 	ldw	r2,-12(fp)
   217d8:	10800917 	ldw	r2,36(r2)
   217dc:	10803fcc 	andi	r2,r2,255
   217e0:	000f883a 	mov	r7,zero
   217e4:	000d883a 	mov	r6,zero
   217e8:	100b883a 	mov	r5,r2
   217ec:	e13ffd17 	ldw	r4,-12(fp)
   217f0:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   217f4:	e0bffc15 	stw	r2,-16(fp)
   217f8:	00000e06 	br	21834 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   217fc:	e0bffd17 	ldw	r2,-12(fp)
   21800:	10800917 	ldw	r2,36(r2)
   21804:	1085883a 	add	r2,r2,r2
   21808:	1007883a 	mov	r3,r2
   2180c:	e0bffe17 	ldw	r2,-8(fp)
   21810:	1884b03a 	or	r2,r3,r2
   21814:	10803fcc 	andi	r2,r2,255
   21818:	e0ffff03 	ldbu	r3,-4(fp)
   2181c:	000f883a 	mov	r7,zero
   21820:	180d883a 	mov	r6,r3
   21824:	100b883a 	mov	r5,r2
   21828:	e13ffd17 	ldw	r4,-12(fp)
   2182c:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   21830:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   21834:	e0bffc17 	ldw	r2,-16(fp)
}
   21838:	e037883a 	mov	sp,fp
   2183c:	dfc00117 	ldw	ra,4(sp)
   21840:	df000017 	ldw	fp,0(sp)
   21844:	dec00204 	addi	sp,sp,8
   21848:	f800283a 	ret

0002184c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   2184c:	defffd04 	addi	sp,sp,-12
   21850:	df000215 	stw	fp,8(sp)
   21854:	df000204 	addi	fp,sp,8
   21858:	e13ffe15 	stw	r4,-8(fp)
   2185c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   21860:	e0bffe17 	ldw	r2,-8(fp)
   21864:	10c00917 	ldw	r3,36(r2)
   21868:	e0bfff17 	ldw	r2,-4(fp)
   2186c:	10c00015 	stw	r3,0(r2)
}
   21870:	0001883a 	nop
   21874:	e037883a 	mov	sp,fp
   21878:	df000017 	ldw	fp,0(sp)
   2187c:	dec00104 	addi	sp,sp,4
   21880:	f800283a 	ret

00021884 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   21884:	defffd04 	addi	sp,sp,-12
   21888:	df000215 	stw	fp,8(sp)
   2188c:	df000204 	addi	fp,sp,8
   21890:	e13ffe15 	stw	r4,-8(fp)
   21894:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   21898:	e0bffe17 	ldw	r2,-8(fp)
   2189c:	e0ffff17 	ldw	r3,-4(fp)
   218a0:	10c00915 	stw	r3,36(r2)
}
   218a4:	0001883a 	nop
   218a8:	e037883a 	mov	sp,fp
   218ac:	df000017 	ldw	fp,0(sp)
   218b0:	dec00104 	addi	sp,sp,4
   218b4:	f800283a 	ret

000218b8 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   218b8:	defffd04 	addi	sp,sp,-12
   218bc:	df000215 	stw	fp,8(sp)
   218c0:	df000204 	addi	fp,sp,8
   218c4:	e13ffe15 	stw	r4,-8(fp)
   218c8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   218cc:	e0bffe17 	ldw	r2,-8(fp)
   218d0:	10800317 	ldw	r2,12(r2)
   218d4:	10800404 	addi	r2,r2,16
   218d8:	10800037 	ldwio	r2,0(r2)
   218dc:	1080010c 	andi	r2,r2,4
   218e0:	10000326 	beq	r2,zero,218f0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   218e4:	e0bfff17 	ldw	r2,-4(fp)
   218e8:	00fffec4 	movi	r3,-5
   218ec:	10c00015 	stw	r3,0(r2)
    }
}
   218f0:	0001883a 	nop
   218f4:	e037883a 	mov	sp,fp
   218f8:	df000017 	ldw	fp,0(sp)
   218fc:	dec00104 	addi	sp,sp,4
   21900:	f800283a 	ret

00021904 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   21904:	defffd04 	addi	sp,sp,-12
   21908:	df000215 	stw	fp,8(sp)
   2190c:	df000204 	addi	fp,sp,8
   21910:	e13ffe15 	stw	r4,-8(fp)
   21914:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   21918:	e0bffe17 	ldw	r2,-8(fp)
   2191c:	10800317 	ldw	r2,12(r2)
   21920:	10800404 	addi	r2,r2,16
   21924:	10800037 	ldwio	r2,0(r2)
   21928:	1080020c 	andi	r2,r2,8
   2192c:	10000326 	beq	r2,zero,2193c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   21930:	e0bfff17 	ldw	r2,-4(fp)
   21934:	00fffe84 	movi	r3,-6
   21938:	10c00015 	stw	r3,0(r2)
    }
}
   2193c:	0001883a 	nop
   21940:	e037883a 	mov	sp,fp
   21944:	df000017 	ldw	fp,0(sp)
   21948:	dec00104 	addi	sp,sp,4
   2194c:	f800283a 	ret

00021950 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   21950:	defff804 	addi	sp,sp,-32
   21954:	dfc00715 	stw	ra,28(sp)
   21958:	df000615 	stw	fp,24(sp)
   2195c:	df000604 	addi	fp,sp,24
   21960:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21964:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   21968:	e0bfff17 	ldw	r2,-4(fp)
   2196c:	10800717 	ldw	r2,28(r2)
   21970:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   21974:	e0bffb17 	ldw	r2,-20(fp)
   21978:	10800117 	ldw	r2,4(r2)
   2197c:	10800044 	addi	r2,r2,1
   21980:	0149c404 	movi	r5,10000
   21984:	1009883a 	mov	r4,r2
   21988:	000d9380 	call	d938 <__mulsi3>
   2198c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   21990:	e0bffd04 	addi	r2,fp,-12
   21994:	100b883a 	mov	r5,r2
   21998:	e13fff17 	ldw	r4,-4(fp)
   2199c:	00227e80 	call	227e8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   219a0:	e0bffd17 	ldw	r2,-12(fp)
   219a4:	100b883a 	mov	r5,r2
   219a8:	e13fff17 	ldw	r4,-4(fp)
   219ac:	002271c0 	call	2271c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   219b0:	e0bffc04 	addi	r2,fp,-16
   219b4:	100b883a 	mov	r5,r2
   219b8:	e13fff17 	ldw	r4,-4(fp)
   219bc:	00218b80 	call	218b8 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   219c0:	e0bffc17 	ldw	r2,-16(fp)
   219c4:	10002226 	beq	r2,zero,21a50 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   219c8:	e0bffb17 	ldw	r2,-20(fp)
   219cc:	10800217 	ldw	r2,8(r2)
   219d0:	10001d26 	beq	r2,zero,21a48 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   219d4:	00000d06 	br	21a0c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   219d8:	e0bffa17 	ldw	r2,-24(fp)
   219dc:	108002a8 	cmpgeui	r2,r2,10
   219e0:	1000021e 	bne	r2,zero,219ec <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   219e4:	0109c404 	movi	r4,10000
   219e8:	00238140 	call	23814 <alt_busy_sleep>
              if (--timeout == 0)
   219ec:	e0bffa17 	ldw	r2,-24(fp)
   219f0:	10bfffc4 	addi	r2,r2,-1
   219f4:	e0bffa15 	stw	r2,-24(fp)
   219f8:	e0bffa17 	ldw	r2,-24(fp)
   219fc:	1000031e 	bne	r2,zero,21a0c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   21a00:	00bfff84 	movi	r2,-2
   21a04:	e0bffc15 	stw	r2,-16(fp)
                 break;
   21a08:	00000306 	br	21a18 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21a0c:	e13fff17 	ldw	r4,-4(fp)
   21a10:	00214e40 	call	214e4 <alt_avalon_i2c_is_busy>
   21a14:	103ff01e 	bne	r2,zero,219d8 <__alt_data_end+0xfc0219d8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   21a18:	e0bffb17 	ldw	r2,-20(fp)
   21a1c:	10800017 	ldw	r2,0(r2)
   21a20:	e0fffe04 	addi	r3,fp,-8
   21a24:	180f883a 	mov	r7,r3
   21a28:	000d883a 	mov	r6,zero
   21a2c:	100b883a 	mov	r5,r2
   21a30:	e13fff17 	ldw	r4,-4(fp)
   21a34:	00215280 	call	21528 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   21a38:	e13fff17 	ldw	r4,-4(fp)
   21a3c:	002118c0 	call	2118c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   21a40:	e0bffb17 	ldw	r2,-20(fp)
   21a44:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   21a48:	e0bffc17 	ldw	r2,-16(fp)
   21a4c:	00000a06 	br	21a78 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   21a50:	e0bffb17 	ldw	r2,-20(fp)
   21a54:	10800217 	ldw	r2,8(r2)
   21a58:	10000626 	beq	r2,zero,21a74 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   21a5c:	e0bffd17 	ldw	r2,-12(fp)
   21a60:	100b883a 	mov	r5,r2
   21a64:	e13fff17 	ldw	r4,-4(fp)
   21a68:	00227840 	call	22784 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   21a6c:	00bffe44 	movi	r2,-7
   21a70:	00000106 	br	21a78 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   21a74:	0005883a 	mov	r2,zero
}
   21a78:	e037883a 	mov	sp,fp
   21a7c:	dfc00117 	ldw	ra,4(sp)
   21a80:	df000017 	ldw	fp,0(sp)
   21a84:	dec00204 	addi	sp,sp,8
   21a88:	f800283a 	ret

00021a8c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   21a8c:	defff704 	addi	sp,sp,-36
   21a90:	dfc00815 	stw	ra,32(sp)
   21a94:	df000715 	stw	fp,28(sp)
   21a98:	df000704 	addi	fp,sp,28
   21a9c:	e13ffc15 	stw	r4,-16(fp)
   21aa0:	e17ffd15 	stw	r5,-12(fp)
   21aa4:	e1bffe15 	stw	r6,-8(fp)
   21aa8:	3805883a 	mov	r2,r7
   21aac:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21ab0:	0089c404 	movi	r2,10000
   21ab4:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   21ab8:	00002206 	br	21b44 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   21abc:	e0bffb17 	ldw	r2,-20(fp)
   21ac0:	108002a8 	cmpgeui	r2,r2,10
   21ac4:	1000021e 	bne	r2,zero,21ad0 <alt_avalon_i2c_master_tx+0x44>
   21ac8:	0109c404 	movi	r4,10000
   21acc:	00238140 	call	23814 <alt_busy_sleep>
      if (use_interrupts)
   21ad0:	e0bfff03 	ldbu	r2,-4(fp)
   21ad4:	10000926 	beq	r2,zero,21afc <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   21ad8:	00800044 	movi	r2,1
   21adc:	d8800015 	stw	r2,0(sp)
   21ae0:	000f883a 	mov	r7,zero
   21ae4:	e1bffe17 	ldw	r6,-8(fp)
   21ae8:	e17ffd17 	ldw	r5,-12(fp)
   21aec:	e13ffc17 	ldw	r4,-16(fp)
   21af0:	00220380 	call	22038 <alt_avalon_i2c_master_transmit_using_interrupts>
   21af4:	e0bffa15 	stw	r2,-24(fp)
   21af8:	00000806 	br	21b1c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   21afc:	00800044 	movi	r2,1
   21b00:	d8800015 	stw	r2,0(sp)
   21b04:	000f883a 	mov	r7,zero
   21b08:	e1bffe17 	ldw	r6,-8(fp)
   21b0c:	e17ffd17 	ldw	r5,-12(fp)
   21b10:	e13ffc17 	ldw	r4,-16(fp)
   21b14:	0021e780 	call	21e78 <alt_avalon_i2c_master_transmit>
   21b18:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21b1c:	e0bffa17 	ldw	r2,-24(fp)
   21b20:	10bffea0 	cmpeqi	r2,r2,-6
   21b24:	1000061e 	bne	r2,zero,21b40 <alt_avalon_i2c_master_tx+0xb4>
   21b28:	e0bffa17 	ldw	r2,-24(fp)
   21b2c:	10bffee0 	cmpeqi	r2,r2,-5
   21b30:	1000031e 	bne	r2,zero,21b40 <alt_avalon_i2c_master_tx+0xb4>
   21b34:	e0bffa17 	ldw	r2,-24(fp)
   21b38:	10bffe58 	cmpnei	r2,r2,-7
   21b3c:	1000061e 	bne	r2,zero,21b58 <alt_avalon_i2c_master_tx+0xcc>
   21b40:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   21b44:	e0bffb17 	ldw	r2,-20(fp)
   21b48:	10ffffc4 	addi	r3,r2,-1
   21b4c:	e0fffb15 	stw	r3,-20(fp)
   21b50:	103fda1e 	bne	r2,zero,21abc <__alt_data_end+0xfc021abc>
   21b54:	00000106 	br	21b5c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   21b58:	0001883a 	nop
    }

    return status;
   21b5c:	e0bffa17 	ldw	r2,-24(fp)
}        
   21b60:	e037883a 	mov	sp,fp
   21b64:	dfc00117 	ldw	ra,4(sp)
   21b68:	df000017 	ldw	fp,0(sp)
   21b6c:	dec00204 	addi	sp,sp,8
   21b70:	f800283a 	ret

00021b74 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   21b74:	defff704 	addi	sp,sp,-36
   21b78:	dfc00815 	stw	ra,32(sp)
   21b7c:	df000715 	stw	fp,28(sp)
   21b80:	df000704 	addi	fp,sp,28
   21b84:	e13ffc15 	stw	r4,-16(fp)
   21b88:	e17ffd15 	stw	r5,-12(fp)
   21b8c:	e1bffe15 	stw	r6,-8(fp)
   21b90:	3805883a 	mov	r2,r7
   21b94:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21b98:	0089c404 	movi	r2,10000
   21b9c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   21ba0:	e0bfff03 	ldbu	r2,-4(fp)
   21ba4:	10003426 	beq	r2,zero,21c78 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   21ba8:	00001706 	br	21c08 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21bac:	e0bffb17 	ldw	r2,-20(fp)
   21bb0:	108002a8 	cmpgeui	r2,r2,10
   21bb4:	1000021e 	bne	r2,zero,21bc0 <alt_avalon_i2c_master_rx+0x4c>
   21bb8:	0109c404 	movi	r4,10000
   21bbc:	00238140 	call	23814 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21bc0:	00800044 	movi	r2,1
   21bc4:	d8800015 	stw	r2,0(sp)
   21bc8:	000f883a 	mov	r7,zero
   21bcc:	e1bffe17 	ldw	r6,-8(fp)
   21bd0:	e17ffd17 	ldw	r5,-12(fp)
   21bd4:	e13ffc17 	ldw	r4,-16(fp)
   21bd8:	00224540 	call	22454 <alt_avalon_i2c_master_receive_using_interrupts>
   21bdc:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21be0:	e0bffa17 	ldw	r2,-24(fp)
   21be4:	10bffea0 	cmpeqi	r2,r2,-6
   21be8:	1000061e 	bne	r2,zero,21c04 <alt_avalon_i2c_master_rx+0x90>
   21bec:	e0bffa17 	ldw	r2,-24(fp)
   21bf0:	10bffee0 	cmpeqi	r2,r2,-5
   21bf4:	1000031e 	bne	r2,zero,21c04 <alt_avalon_i2c_master_rx+0x90>
   21bf8:	e0bffa17 	ldw	r2,-24(fp)
   21bfc:	10bffe58 	cmpnei	r2,r2,-7
   21c00:	1000221e 	bne	r2,zero,21c8c <alt_avalon_i2c_master_rx+0x118>
   21c04:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   21c08:	e0bffb17 	ldw	r2,-20(fp)
   21c0c:	10ffffc4 	addi	r3,r2,-1
   21c10:	e0fffb15 	stw	r3,-20(fp)
   21c14:	103fe51e 	bne	r2,zero,21bac <__alt_data_end+0xfc021bac>
   21c18:	00001f06 	br	21c98 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21c1c:	e0bffb17 	ldw	r2,-20(fp)
   21c20:	108002a8 	cmpgeui	r2,r2,10
   21c24:	1000021e 	bne	r2,zero,21c30 <alt_avalon_i2c_master_rx+0xbc>
   21c28:	0109c404 	movi	r4,10000
   21c2c:	00238140 	call	23814 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21c30:	00800044 	movi	r2,1
   21c34:	d8800015 	stw	r2,0(sp)
   21c38:	000f883a 	mov	r7,zero
   21c3c:	e1bffe17 	ldw	r6,-8(fp)
   21c40:	e17ffd17 	ldw	r5,-12(fp)
   21c44:	e13ffc17 	ldw	r4,-16(fp)
   21c48:	00222440 	call	22244 <alt_avalon_i2c_master_receive>
   21c4c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21c50:	e0bffa17 	ldw	r2,-24(fp)
   21c54:	10bffea0 	cmpeqi	r2,r2,-6
   21c58:	1000061e 	bne	r2,zero,21c74 <alt_avalon_i2c_master_rx+0x100>
   21c5c:	e0bffa17 	ldw	r2,-24(fp)
   21c60:	10bffee0 	cmpeqi	r2,r2,-5
   21c64:	1000031e 	bne	r2,zero,21c74 <alt_avalon_i2c_master_rx+0x100>
   21c68:	e0bffa17 	ldw	r2,-24(fp)
   21c6c:	10bffe58 	cmpnei	r2,r2,-7
   21c70:	1000081e 	bne	r2,zero,21c94 <alt_avalon_i2c_master_rx+0x120>
   21c74:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   21c78:	e0bffb17 	ldw	r2,-20(fp)
   21c7c:	10ffffc4 	addi	r3,r2,-1
   21c80:	e0fffb15 	stw	r3,-20(fp)
   21c84:	103fe51e 	bne	r2,zero,21c1c <__alt_data_end+0xfc021c1c>
   21c88:	00000306 	br	21c98 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21c8c:	0001883a 	nop
   21c90:	00000106 	br	21c98 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   21c94:	0001883a 	nop
      }
    }
    
    return status;
   21c98:	e0bffa17 	ldw	r2,-24(fp)
}        
   21c9c:	e037883a 	mov	sp,fp
   21ca0:	dfc00117 	ldw	ra,4(sp)
   21ca4:	df000017 	ldw	fp,0(sp)
   21ca8:	dec00204 	addi	sp,sp,8
   21cac:	f800283a 	ret

00021cb0 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   21cb0:	defff604 	addi	sp,sp,-40
   21cb4:	dfc00915 	stw	ra,36(sp)
   21cb8:	df000815 	stw	fp,32(sp)
   21cbc:	df000804 	addi	fp,sp,32
   21cc0:	e13ffb15 	stw	r4,-20(fp)
   21cc4:	e17ffc15 	stw	r5,-16(fp)
   21cc8:	e1bffd15 	stw	r6,-12(fp)
   21ccc:	e1fffe15 	stw	r7,-8(fp)
   21cd0:	e0800317 	ldw	r2,12(fp)
   21cd4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21cd8:	0089c404 	movi	r2,10000
   21cdc:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   21ce0:	e0bfff03 	ldbu	r2,-4(fp)
   21ce4:	10005626 	beq	r2,zero,21e40 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   21ce8:	00002806 	br	21d8c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21cec:	e0bffa17 	ldw	r2,-24(fp)
   21cf0:	108002a8 	cmpgeui	r2,r2,10
   21cf4:	1000021e 	bne	r2,zero,21d00 <alt_avalon_i2c_master_tx_rx+0x50>
   21cf8:	0109c404 	movi	r4,10000
   21cfc:	00238140 	call	23814 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21d00:	d8000015 	stw	zero,0(sp)
   21d04:	000f883a 	mov	r7,zero
   21d08:	e1bffd17 	ldw	r6,-12(fp)
   21d0c:	e17ffc17 	ldw	r5,-16(fp)
   21d10:	e13ffb17 	ldw	r4,-20(fp)
   21d14:	00220380 	call	22038 <alt_avalon_i2c_master_transmit_using_interrupts>
   21d18:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21d1c:	e0bff917 	ldw	r2,-28(fp)
   21d20:	10bffea0 	cmpeqi	r2,r2,-6
   21d24:	1000191e 	bne	r2,zero,21d8c <alt_avalon_i2c_master_tx_rx+0xdc>
   21d28:	e0bff917 	ldw	r2,-28(fp)
   21d2c:	10bffee0 	cmpeqi	r2,r2,-5
   21d30:	1000161e 	bne	r2,zero,21d8c <alt_avalon_i2c_master_tx_rx+0xdc>
   21d34:	e0bff917 	ldw	r2,-28(fp)
   21d38:	10bffe58 	cmpnei	r2,r2,-7
   21d3c:	1000011e 	bne	r2,zero,21d44 <alt_avalon_i2c_master_tx_rx+0x94>
   21d40:	00001206 	br	21d8c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21d44:	00800044 	movi	r2,1
   21d48:	d8800015 	stw	r2,0(sp)
   21d4c:	01c00044 	movi	r7,1
   21d50:	e1800217 	ldw	r6,8(fp)
   21d54:	e17ffe17 	ldw	r5,-8(fp)
   21d58:	e13ffb17 	ldw	r4,-20(fp)
   21d5c:	00224540 	call	22454 <alt_avalon_i2c_master_receive_using_interrupts>
   21d60:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21d64:	e0bff917 	ldw	r2,-28(fp)
   21d68:	10bffea0 	cmpeqi	r2,r2,-6
   21d6c:	1000061e 	bne	r2,zero,21d88 <alt_avalon_i2c_master_tx_rx+0xd8>
   21d70:	e0bff917 	ldw	r2,-28(fp)
   21d74:	10bffee0 	cmpeqi	r2,r2,-5
   21d78:	1000031e 	bne	r2,zero,21d88 <alt_avalon_i2c_master_tx_rx+0xd8>
   21d7c:	e0bff917 	ldw	r2,-28(fp)
   21d80:	10bffe58 	cmpnei	r2,r2,-7
   21d84:	1000331e 	bne	r2,zero,21e54 <alt_avalon_i2c_master_tx_rx+0x1a4>
   21d88:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   21d8c:	e0bffa17 	ldw	r2,-24(fp)
   21d90:	10ffffc4 	addi	r3,r2,-1
   21d94:	e0fffa15 	stw	r3,-24(fp)
   21d98:	103fd41e 	bne	r2,zero,21cec <__alt_data_end+0xfc021cec>
   21d9c:	00003006 	br	21e60 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21da0:	e0bffa17 	ldw	r2,-24(fp)
   21da4:	108002a8 	cmpgeui	r2,r2,10
   21da8:	1000021e 	bne	r2,zero,21db4 <alt_avalon_i2c_master_tx_rx+0x104>
   21dac:	0109c404 	movi	r4,10000
   21db0:	00238140 	call	23814 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   21db4:	d8000015 	stw	zero,0(sp)
   21db8:	000f883a 	mov	r7,zero
   21dbc:	e1bffd17 	ldw	r6,-12(fp)
   21dc0:	e17ffc17 	ldw	r5,-16(fp)
   21dc4:	e13ffb17 	ldw	r4,-20(fp)
   21dc8:	0021e780 	call	21e78 <alt_avalon_i2c_master_transmit>
   21dcc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21dd0:	e0bff917 	ldw	r2,-28(fp)
   21dd4:	10bffea0 	cmpeqi	r2,r2,-6
   21dd8:	1000191e 	bne	r2,zero,21e40 <alt_avalon_i2c_master_tx_rx+0x190>
   21ddc:	e0bff917 	ldw	r2,-28(fp)
   21de0:	10bffee0 	cmpeqi	r2,r2,-5
   21de4:	1000161e 	bne	r2,zero,21e40 <alt_avalon_i2c_master_tx_rx+0x190>
   21de8:	e0bff917 	ldw	r2,-28(fp)
   21dec:	10bffe58 	cmpnei	r2,r2,-7
   21df0:	1000011e 	bne	r2,zero,21df8 <alt_avalon_i2c_master_tx_rx+0x148>
   21df4:	00001206 	br	21e40 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   21df8:	00800044 	movi	r2,1
   21dfc:	d8800015 	stw	r2,0(sp)
   21e00:	01c00044 	movi	r7,1
   21e04:	e1800217 	ldw	r6,8(fp)
   21e08:	e17ffe17 	ldw	r5,-8(fp)
   21e0c:	e13ffb17 	ldw	r4,-20(fp)
   21e10:	00222440 	call	22244 <alt_avalon_i2c_master_receive>
   21e14:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21e18:	e0bff917 	ldw	r2,-28(fp)
   21e1c:	10bffea0 	cmpeqi	r2,r2,-6
   21e20:	1000061e 	bne	r2,zero,21e3c <alt_avalon_i2c_master_tx_rx+0x18c>
   21e24:	e0bff917 	ldw	r2,-28(fp)
   21e28:	10bffee0 	cmpeqi	r2,r2,-5
   21e2c:	1000031e 	bne	r2,zero,21e3c <alt_avalon_i2c_master_tx_rx+0x18c>
   21e30:	e0bff917 	ldw	r2,-28(fp)
   21e34:	10bffe58 	cmpnei	r2,r2,-7
   21e38:	1000081e 	bne	r2,zero,21e5c <alt_avalon_i2c_master_tx_rx+0x1ac>
   21e3c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   21e40:	e0bffa17 	ldw	r2,-24(fp)
   21e44:	10ffffc4 	addi	r3,r2,-1
   21e48:	e0fffa15 	stw	r3,-24(fp)
   21e4c:	103fd41e 	bne	r2,zero,21da0 <__alt_data_end+0xfc021da0>
   21e50:	00000306 	br	21e60 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21e54:	0001883a 	nop
   21e58:	00000106 	br	21e60 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   21e5c:	0001883a 	nop
      }
    }
    
    return status;
   21e60:	e0bff917 	ldw	r2,-28(fp)
}                                       
   21e64:	e037883a 	mov	sp,fp
   21e68:	dfc00117 	ldw	ra,4(sp)
   21e6c:	df000017 	ldw	fp,0(sp)
   21e70:	dec00204 	addi	sp,sp,8
   21e74:	f800283a 	ret

00021e78 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21e78:	defff704 	addi	sp,sp,-36
   21e7c:	dfc00815 	stw	ra,32(sp)
   21e80:	df000715 	stw	fp,28(sp)
   21e84:	df000704 	addi	fp,sp,28
   21e88:	e13ffb15 	stw	r4,-20(fp)
   21e8c:	e17ffc15 	stw	r5,-16(fp)
   21e90:	e1bffd15 	stw	r6,-12(fp)
   21e94:	3807883a 	mov	r3,r7
   21e98:	e0800217 	ldw	r2,8(fp)
   21e9c:	e0fffe05 	stb	r3,-8(fp)
   21ea0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21ea4:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   21ea8:	0149c404 	movi	r5,10000
   21eac:	e13ffd17 	ldw	r4,-12(fp)
   21eb0:	000d9380 	call	d938 <__mulsi3>
   21eb4:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   21eb8:	e0bffd17 	ldw	r2,-12(fp)
   21ebc:	1000021e 	bne	r2,zero,21ec8 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21ec0:	0005883a 	mov	r2,zero
   21ec4:	00005706 	br	22024 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21ec8:	e0bffe03 	ldbu	r2,-8(fp)
   21ecc:	10000a1e 	bne	r2,zero,21ef8 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21ed0:	e13ffb17 	ldw	r4,-20(fp)
   21ed4:	00210f40 	call	210f4 <alt_avalon_i2c_enable>
   21ed8:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21edc:	e0bffa17 	ldw	r2,-24(fp)
   21ee0:	10000226 	beq	r2,zero,21eec <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   21ee4:	e0bffa17 	ldw	r2,-24(fp)
   21ee8:	00004e06 	br	22024 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21eec:	01400704 	movi	r5,28
   21ef0:	e13ffb17 	ldw	r4,-20(fp)
   21ef4:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21ef8:	e0bffe03 	ldbu	r2,-8(fp)
   21efc:	100d883a 	mov	r6,r2
   21f00:	000b883a 	mov	r5,zero
   21f04:	e13ffb17 	ldw	r4,-20(fp)
   21f08:	002175c0 	call	2175c <alt_avalon_i2c_send_address>
   21f0c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   21f10:	e0bffa17 	ldw	r2,-24(fp)
   21f14:	1000271e 	bne	r2,zero,21fb4 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21f18:	00000f06 	br	21f58 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21f1c:	e0bffc17 	ldw	r2,-16(fp)
   21f20:	10800003 	ldbu	r2,0(r2)
   21f24:	10803fcc 	andi	r2,r2,255
   21f28:	000f883a 	mov	r7,zero
   21f2c:	000d883a 	mov	r6,zero
   21f30:	100b883a 	mov	r5,r2
   21f34:	e13ffb17 	ldw	r4,-20(fp)
   21f38:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   21f3c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   21f40:	e0bffc17 	ldw	r2,-16(fp)
   21f44:	10800044 	addi	r2,r2,1
   21f48:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21f4c:	e0bffd17 	ldw	r2,-12(fp)
   21f50:	10bfffc4 	addi	r2,r2,-1
   21f54:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21f58:	e0bffd17 	ldw	r2,-12(fp)
   21f5c:	108000b0 	cmpltui	r2,r2,2
   21f60:	1000021e 	bne	r2,zero,21f6c <alt_avalon_i2c_master_transmit+0xf4>
   21f64:	e0bffa17 	ldw	r2,-24(fp)
   21f68:	103fec26 	beq	r2,zero,21f1c <__alt_data_end+0xfc021f1c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21f6c:	e0bffa17 	ldw	r2,-24(fp)
   21f70:	1000101e 	bne	r2,zero,21fb4 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21f74:	e0bffc17 	ldw	r2,-16(fp)
   21f78:	10800003 	ldbu	r2,0(r2)
   21f7c:	10803fcc 	andi	r2,r2,255
   21f80:	e0ffff03 	ldbu	r3,-4(fp)
   21f84:	180f883a 	mov	r7,r3
   21f88:	000d883a 	mov	r6,zero
   21f8c:	100b883a 	mov	r5,r2
   21f90:	e13ffb17 	ldw	r4,-20(fp)
   21f94:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   21f98:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   21f9c:	e0bffc17 	ldw	r2,-16(fp)
   21fa0:	10800044 	addi	r2,r2,1
   21fa4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21fa8:	e0bffd17 	ldw	r2,-12(fp)
   21fac:	10bfffc4 	addi	r2,r2,-1
   21fb0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21fb4:	e0bfff03 	ldbu	r2,-4(fp)
   21fb8:	1000101e 	bne	r2,zero,21ffc <alt_avalon_i2c_master_transmit+0x184>
   21fbc:	e0bffa17 	ldw	r2,-24(fp)
   21fc0:	10001726 	beq	r2,zero,22020 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21fc4:	00000d06 	br	21ffc <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21fc8:	e0bff917 	ldw	r2,-28(fp)
   21fcc:	108002a8 	cmpgeui	r2,r2,10
   21fd0:	1000021e 	bne	r2,zero,21fdc <alt_avalon_i2c_master_transmit+0x164>
   21fd4:	0109c404 	movi	r4,10000
   21fd8:	00238140 	call	23814 <alt_busy_sleep>
            if (--timeout == 0)
   21fdc:	e0bff917 	ldw	r2,-28(fp)
   21fe0:	10bfffc4 	addi	r2,r2,-1
   21fe4:	e0bff915 	stw	r2,-28(fp)
   21fe8:	e0bff917 	ldw	r2,-28(fp)
   21fec:	1000031e 	bne	r2,zero,21ffc <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21ff0:	00bfff84 	movi	r2,-2
   21ff4:	e0bffa15 	stw	r2,-24(fp)
               break;
   21ff8:	00000306 	br	22008 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21ffc:	e13ffb17 	ldw	r4,-20(fp)
   22000:	00214e40 	call	214e4 <alt_avalon_i2c_is_busy>
   22004:	103ff01e 	bne	r2,zero,21fc8 <__alt_data_end+0xfc021fc8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   22008:	e0bffa04 	addi	r2,fp,-24
   2200c:	100b883a 	mov	r5,r2
   22010:	e13ffb17 	ldw	r4,-20(fp)
   22014:	00218b80 	call	218b8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22018:	e13ffb17 	ldw	r4,-20(fp)
   2201c:	002118c0 	call	2118c <alt_avalon_i2c_disable>
    }


    return status;
   22020:	e0bffa17 	ldw	r2,-24(fp)
}
   22024:	e037883a 	mov	sp,fp
   22028:	dfc00117 	ldw	ra,4(sp)
   2202c:	df000017 	ldw	fp,0(sp)
   22030:	dec00204 	addi	sp,sp,8
   22034:	f800283a 	ret

00022038 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   22038:	defff604 	addi	sp,sp,-40
   2203c:	dfc00915 	stw	ra,36(sp)
   22040:	df000815 	stw	fp,32(sp)
   22044:	df000804 	addi	fp,sp,32
   22048:	e13ffb15 	stw	r4,-20(fp)
   2204c:	e17ffc15 	stw	r5,-16(fp)
   22050:	e1bffd15 	stw	r6,-12(fp)
   22054:	3807883a 	mov	r3,r7
   22058:	e0800217 	ldw	r2,8(fp)
   2205c:	e0fffe05 	stb	r3,-8(fp)
   22060:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   22064:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   22068:	0149c404 	movi	r5,10000
   2206c:	e13ffd17 	ldw	r4,-12(fp)
   22070:	000d9380 	call	d938 <__mulsi3>
   22074:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   22078:	e0bffb17 	ldw	r2,-20(fp)
   2207c:	10800717 	ldw	r2,28(r2)
   22080:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   22084:	e0bffd17 	ldw	r2,-12(fp)
   22088:	1000021e 	bne	r2,zero,22094 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2208c:	0005883a 	mov	r2,zero
   22090:	00006706 	br	22230 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   22094:	e0bffb17 	ldw	r2,-20(fp)
   22098:	10c00617 	ldw	r3,24(r2)
   2209c:	008000b4 	movhi	r2,2
   220a0:	10835e04 	addi	r2,r2,3448
   220a4:	18800226 	beq	r3,r2,220b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   220a8:	00bfff44 	movi	r2,-3
   220ac:	00006006 	br	22230 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   220b0:	e0bffe03 	ldbu	r2,-8(fp)
   220b4:	10000a1e 	bne	r2,zero,220e0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   220b8:	e13ffb17 	ldw	r4,-20(fp)
   220bc:	00210f40 	call	210f4 <alt_avalon_i2c_enable>
   220c0:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   220c4:	e0bff817 	ldw	r2,-32(fp)
   220c8:	10000226 	beq	r2,zero,220d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   220cc:	e0bff817 	ldw	r2,-32(fp)
   220d0:	00005706 	br	22230 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   220d4:	01400704 	movi	r5,28
   220d8:	e13ffb17 	ldw	r4,-20(fp)
   220dc:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   220e0:	e0bffe03 	ldbu	r2,-8(fp)
   220e4:	100d883a 	mov	r6,r2
   220e8:	000b883a 	mov	r5,zero
   220ec:	e13ffb17 	ldw	r4,-20(fp)
   220f0:	002175c0 	call	2175c <alt_avalon_i2c_send_address>
   220f4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   220f8:	e0bff817 	ldw	r2,-32(fp)
   220fc:	1000271e 	bne	r2,zero,2219c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   22100:	00000f06 	br	22140 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   22104:	e0bffc17 	ldw	r2,-16(fp)
   22108:	10800003 	ldbu	r2,0(r2)
   2210c:	10803fcc 	andi	r2,r2,255
   22110:	000f883a 	mov	r7,zero
   22114:	000d883a 	mov	r6,zero
   22118:	100b883a 	mov	r5,r2
   2211c:	e13ffb17 	ldw	r4,-20(fp)
   22120:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   22124:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   22128:	e0bffc17 	ldw	r2,-16(fp)
   2212c:	10800044 	addi	r2,r2,1
   22130:	e0bffc15 	stw	r2,-16(fp)
            --size;
   22134:	e0bffd17 	ldw	r2,-12(fp)
   22138:	10bfffc4 	addi	r2,r2,-1
   2213c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   22140:	e0bffd17 	ldw	r2,-12(fp)
   22144:	108000b0 	cmpltui	r2,r2,2
   22148:	1000021e 	bne	r2,zero,22154 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   2214c:	e0bff817 	ldw	r2,-32(fp)
   22150:	103fec26 	beq	r2,zero,22104 <__alt_data_end+0xfc022104>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   22154:	e0bff817 	ldw	r2,-32(fp)
   22158:	1000101e 	bne	r2,zero,2219c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2215c:	e0bffc17 	ldw	r2,-16(fp)
   22160:	10800003 	ldbu	r2,0(r2)
   22164:	10803fcc 	andi	r2,r2,255
   22168:	e0ffff03 	ldbu	r3,-4(fp)
   2216c:	180f883a 	mov	r7,r3
   22170:	000d883a 	mov	r6,zero
   22174:	100b883a 	mov	r5,r2
   22178:	e13ffb17 	ldw	r4,-20(fp)
   2217c:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   22180:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   22184:	e0bffc17 	ldw	r2,-16(fp)
   22188:	10800044 	addi	r2,r2,1
   2218c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   22190:	e0bffd17 	ldw	r2,-12(fp)
   22194:	10bfffc4 	addi	r2,r2,-1
   22198:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2219c:	e0bff817 	ldw	r2,-32(fp)
   221a0:	10001426 	beq	r2,zero,221f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   221a4:	00000d06 	br	221dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   221a8:	e0bff917 	ldw	r2,-28(fp)
   221ac:	108002a8 	cmpgeui	r2,r2,10
   221b0:	1000021e 	bne	r2,zero,221bc <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   221b4:	0109c404 	movi	r4,10000
   221b8:	00238140 	call	23814 <alt_busy_sleep>
            if (--timeout == 0)
   221bc:	e0bff917 	ldw	r2,-28(fp)
   221c0:	10bfffc4 	addi	r2,r2,-1
   221c4:	e0bff915 	stw	r2,-28(fp)
   221c8:	e0bff917 	ldw	r2,-28(fp)
   221cc:	1000031e 	bne	r2,zero,221dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   221d0:	00bfff84 	movi	r2,-2
   221d4:	e0bff815 	stw	r2,-32(fp)
               break;
   221d8:	00000306 	br	221e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   221dc:	e13ffb17 	ldw	r4,-20(fp)
   221e0:	00214e40 	call	214e4 <alt_avalon_i2c_is_busy>
   221e4:	103ff01e 	bne	r2,zero,221a8 <__alt_data_end+0xfc0221a8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   221e8:	e13ffb17 	ldw	r4,-20(fp)
   221ec:	002118c0 	call	2118c <alt_avalon_i2c_disable>
   221f0:	00000e06 	br	2222c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   221f4:	e0bfff03 	ldbu	r2,-4(fp)
   221f8:	10000c26 	beq	r2,zero,2222c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   221fc:	01400704 	movi	r5,28
   22200:	e13ffb17 	ldw	r4,-20(fp)
   22204:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   22208:	000b883a 	mov	r5,zero
   2220c:	e13ffb17 	ldw	r4,-20(fp)
   22210:	00229280 	call	22928 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   22214:	e0bffa17 	ldw	r2,-24(fp)
   22218:	00c00044 	movi	r3,1
   2221c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   22220:	01400044 	movi	r5,1
   22224:	e13ffb17 	ldw	r4,-20(fp)
   22228:	00227840 	call	22784 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   2222c:	e0bff817 	ldw	r2,-32(fp)
}
   22230:	e037883a 	mov	sp,fp
   22234:	dfc00117 	ldw	ra,4(sp)
   22238:	df000017 	ldw	fp,0(sp)
   2223c:	dec00204 	addi	sp,sp,8
   22240:	f800283a 	ret

00022244 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   22244:	defff404 	addi	sp,sp,-48
   22248:	dfc00b15 	stw	ra,44(sp)
   2224c:	df000a15 	stw	fp,40(sp)
   22250:	df000a04 	addi	fp,sp,40
   22254:	e13ffb15 	stw	r4,-20(fp)
   22258:	e17ffc15 	stw	r5,-16(fp)
   2225c:	e1bffd15 	stw	r6,-12(fp)
   22260:	3807883a 	mov	r3,r7
   22264:	e0800217 	ldw	r2,8(fp)
   22268:	e0fffe05 	stb	r3,-8(fp)
   2226c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   22270:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   22274:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   22278:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   2227c:	e0bffd17 	ldw	r2,-12(fp)
   22280:	1000021e 	bne	r2,zero,2228c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   22284:	0005883a 	mov	r2,zero
   22288:	00006d06 	br	22440 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2228c:	e0bffe03 	ldbu	r2,-8(fp)
   22290:	10000a1e 	bne	r2,zero,222bc <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   22294:	e13ffb17 	ldw	r4,-20(fp)
   22298:	00210f40 	call	210f4 <alt_avalon_i2c_enable>
   2229c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   222a0:	e0bff917 	ldw	r2,-28(fp)
   222a4:	10000226 	beq	r2,zero,222b0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   222a8:	e0bff917 	ldw	r2,-28(fp)
   222ac:	00006406 	br	22440 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   222b0:	01400704 	movi	r5,28
   222b4:	e13ffb17 	ldw	r4,-20(fp)
   222b8:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   222bc:	e0bffe03 	ldbu	r2,-8(fp)
   222c0:	100d883a 	mov	r6,r2
   222c4:	01400044 	movi	r5,1
   222c8:	e13ffb17 	ldw	r4,-20(fp)
   222cc:	002175c0 	call	2175c <alt_avalon_i2c_send_address>
   222d0:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   222d4:	e0bff917 	ldw	r2,-28(fp)
   222d8:	1000341e 	bne	r2,zero,223ac <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   222dc:	00001906 	br	22344 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   222e0:	000f883a 	mov	r7,zero
   222e4:	000d883a 	mov	r6,zero
   222e8:	000b883a 	mov	r5,zero
   222ec:	e13ffb17 	ldw	r4,-20(fp)
   222f0:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   222f4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   222f8:	e0bff817 	ldw	r2,-32(fp)
   222fc:	10800044 	addi	r2,r2,1
   22300:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   22304:	e0bff917 	ldw	r2,-28(fp)
   22308:	10000e1e 	bne	r2,zero,22344 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2230c:	e0bffa04 	addi	r2,fp,-24
   22310:	100f883a 	mov	r7,r2
   22314:	000d883a 	mov	r6,zero
   22318:	e17ffc17 	ldw	r5,-16(fp)
   2231c:	e13ffb17 	ldw	r4,-20(fp)
   22320:	00215280 	call	21528 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   22324:	e0bffa17 	ldw	r2,-24(fp)
   22328:	e0fffc17 	ldw	r3,-16(fp)
   2232c:	1885883a 	add	r2,r3,r2
   22330:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   22334:	e0bffa17 	ldw	r2,-24(fp)
   22338:	e0fff717 	ldw	r3,-36(fp)
   2233c:	1885883a 	add	r2,r3,r2
   22340:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   22344:	e0bffd17 	ldw	r2,-12(fp)
   22348:	10bfffc4 	addi	r2,r2,-1
   2234c:	e0fff817 	ldw	r3,-32(fp)
   22350:	1880022e 	bgeu	r3,r2,2235c <alt_avalon_i2c_master_receive+0x118>
   22354:	e0bff917 	ldw	r2,-28(fp)
   22358:	103fe126 	beq	r2,zero,222e0 <__alt_data_end+0xfc0222e0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2235c:	e0bff917 	ldw	r2,-28(fp)
   22360:	1000121e 	bne	r2,zero,223ac <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   22364:	e0bfff03 	ldbu	r2,-4(fp)
   22368:	100f883a 	mov	r7,r2
   2236c:	000d883a 	mov	r6,zero
   22370:	000b883a 	mov	r5,zero
   22374:	e13ffb17 	ldw	r4,-20(fp)
   22378:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   2237c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   22380:	00000a06 	br	223ac <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   22384:	e17ffc17 	ldw	r5,-16(fp)
   22388:	e13ffb17 	ldw	r4,-20(fp)
   2238c:	00215d00 	call	215d0 <alt_avalon_i2c_rx_read>
   22390:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   22394:	e0bffc17 	ldw	r2,-16(fp)
   22398:	10800044 	addi	r2,r2,1
   2239c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   223a0:	e0bff717 	ldw	r2,-36(fp)
   223a4:	10800044 	addi	r2,r2,1
   223a8:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   223ac:	e0fff717 	ldw	r3,-36(fp)
   223b0:	e0bffd17 	ldw	r2,-12(fp)
   223b4:	1880022e 	bgeu	r3,r2,223c0 <alt_avalon_i2c_master_receive+0x17c>
   223b8:	e0bff917 	ldw	r2,-28(fp)
   223bc:	103ff126 	beq	r2,zero,22384 <__alt_data_end+0xfc022384>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   223c0:	e0bfff03 	ldbu	r2,-4(fp)
   223c4:	1000021e 	bne	r2,zero,223d0 <alt_avalon_i2c_master_receive+0x18c>
   223c8:	e0bff917 	ldw	r2,-28(fp)
   223cc:	10001b26 	beq	r2,zero,2243c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   223d0:	0149c404 	movi	r5,10000
   223d4:	e13ffd17 	ldw	r4,-12(fp)
   223d8:	000d9380 	call	d938 <__mulsi3>
   223dc:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   223e0:	00000d06 	br	22418 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   223e4:	e0bff617 	ldw	r2,-40(fp)
   223e8:	108002a8 	cmpgeui	r2,r2,10
   223ec:	1000021e 	bne	r2,zero,223f8 <alt_avalon_i2c_master_receive+0x1b4>
   223f0:	0109c404 	movi	r4,10000
   223f4:	00238140 	call	23814 <alt_busy_sleep>
            if (--timeout == 0)
   223f8:	e0bff617 	ldw	r2,-40(fp)
   223fc:	10bfffc4 	addi	r2,r2,-1
   22400:	e0bff615 	stw	r2,-40(fp)
   22404:	e0bff617 	ldw	r2,-40(fp)
   22408:	1000031e 	bne	r2,zero,22418 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2240c:	00bfff84 	movi	r2,-2
   22410:	e0bff915 	stw	r2,-28(fp)
               break;
   22414:	00000306 	br	22424 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22418:	e13ffb17 	ldw	r4,-20(fp)
   2241c:	00214e40 	call	214e4 <alt_avalon_i2c_is_busy>
   22420:	103ff01e 	bne	r2,zero,223e4 <__alt_data_end+0xfc0223e4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   22424:	e0bff904 	addi	r2,fp,-28
   22428:	100b883a 	mov	r5,r2
   2242c:	e13ffb17 	ldw	r4,-20(fp)
   22430:	00218b80 	call	218b8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22434:	e13ffb17 	ldw	r4,-20(fp)
   22438:	002118c0 	call	2118c <alt_avalon_i2c_disable>
    }

    return status;
   2243c:	e0bff917 	ldw	r2,-28(fp)
}
   22440:	e037883a 	mov	sp,fp
   22444:	dfc00117 	ldw	ra,4(sp)
   22448:	df000017 	ldw	fp,0(sp)
   2244c:	dec00204 	addi	sp,sp,8
   22450:	f800283a 	ret

00022454 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   22454:	defff504 	addi	sp,sp,-44
   22458:	dfc00a15 	stw	ra,40(sp)
   2245c:	df000915 	stw	fp,36(sp)
   22460:	df000904 	addi	fp,sp,36
   22464:	e13ffb15 	stw	r4,-20(fp)
   22468:	e17ffc15 	stw	r5,-16(fp)
   2246c:	e1bffd15 	stw	r6,-12(fp)
   22470:	3807883a 	mov	r3,r7
   22474:	e0800217 	ldw	r2,8(fp)
   22478:	e0fffe05 	stb	r3,-8(fp)
   2247c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   22480:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   22484:	e0bffb17 	ldw	r2,-20(fp)
   22488:	10800717 	ldw	r2,28(r2)
   2248c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   22490:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   22494:	e0bffd17 	ldw	r2,-12(fp)
   22498:	1000021e 	bne	r2,zero,224a4 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2249c:	0005883a 	mov	r2,zero
   224a0:	00006306 	br	22630 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   224a4:	e0bffb17 	ldw	r2,-20(fp)
   224a8:	10c00617 	ldw	r3,24(r2)
   224ac:	008000b4 	movhi	r2,2
   224b0:	10835e04 	addi	r2,r2,3448
   224b4:	18800226 	beq	r3,r2,224c0 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   224b8:	00bfff44 	movi	r2,-3
   224bc:	00005c06 	br	22630 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   224c0:	e0bffe03 	ldbu	r2,-8(fp)
   224c4:	10000a1e 	bne	r2,zero,224f0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   224c8:	e13ffb17 	ldw	r4,-20(fp)
   224cc:	00210f40 	call	210f4 <alt_avalon_i2c_enable>
   224d0:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   224d4:	e0bff717 	ldw	r2,-36(fp)
   224d8:	10000226 	beq	r2,zero,224e4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   224dc:	e0bff717 	ldw	r2,-36(fp)
   224e0:	00005306 	br	22630 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   224e4:	01400704 	movi	r5,28
   224e8:	e13ffb17 	ldw	r4,-20(fp)
   224ec:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   224f0:	e0bffe03 	ldbu	r2,-8(fp)
   224f4:	100d883a 	mov	r6,r2
   224f8:	01400044 	movi	r5,1
   224fc:	e13ffb17 	ldw	r4,-20(fp)
   22500:	002175c0 	call	2175c <alt_avalon_i2c_send_address>
   22504:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   22508:	e0bff717 	ldw	r2,-36(fp)
   2250c:	1000191e 	bne	r2,zero,22574 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   22510:	00000906 	br	22538 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   22514:	000f883a 	mov	r7,zero
   22518:	000d883a 	mov	r6,zero
   2251c:	000b883a 	mov	r5,zero
   22520:	e13ffb17 	ldw	r4,-20(fp)
   22524:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   22528:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   2252c:	e0bff917 	ldw	r2,-28(fp)
   22530:	10800044 	addi	r2,r2,1
   22534:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   22538:	e0bffd17 	ldw	r2,-12(fp)
   2253c:	10bfffc4 	addi	r2,r2,-1
   22540:	e0fff917 	ldw	r3,-28(fp)
   22544:	1880022e 	bgeu	r3,r2,22550 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   22548:	e0bff717 	ldw	r2,-36(fp)
   2254c:	103ff126 	beq	r2,zero,22514 <__alt_data_end+0xfc022514>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   22550:	e0bff717 	ldw	r2,-36(fp)
   22554:	1000071e 	bne	r2,zero,22574 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   22558:	e0bfff03 	ldbu	r2,-4(fp)
   2255c:	100f883a 	mov	r7,r2
   22560:	000d883a 	mov	r6,zero
   22564:	000b883a 	mov	r5,zero
   22568:	e13ffb17 	ldw	r4,-20(fp)
   2256c:	00216780 	call	21678 <alt_avalon_i2c_cmd_write>
   22570:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   22574:	e0bff717 	ldw	r2,-36(fp)
   22578:	10001826 	beq	r2,zero,225dc <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   2257c:	0149c404 	movi	r5,10000
   22580:	e13ffd17 	ldw	r4,-12(fp)
   22584:	000d9380 	call	d938 <__mulsi3>
   22588:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2258c:	00000d06 	br	225c4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   22590:	e0bff817 	ldw	r2,-32(fp)
   22594:	108002a8 	cmpgeui	r2,r2,10
   22598:	1000021e 	bne	r2,zero,225a4 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   2259c:	0109c404 	movi	r4,10000
   225a0:	00238140 	call	23814 <alt_busy_sleep>
            if (--timeout == 0)
   225a4:	e0bff817 	ldw	r2,-32(fp)
   225a8:	10bfffc4 	addi	r2,r2,-1
   225ac:	e0bff815 	stw	r2,-32(fp)
   225b0:	e0bff817 	ldw	r2,-32(fp)
   225b4:	1000031e 	bne	r2,zero,225c4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   225b8:	00bfff84 	movi	r2,-2
   225bc:	e0bff715 	stw	r2,-36(fp)
               break;
   225c0:	00000306 	br	225d0 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   225c4:	e13ffb17 	ldw	r4,-20(fp)
   225c8:	00214e40 	call	214e4 <alt_avalon_i2c_is_busy>
   225cc:	103ff01e 	bne	r2,zero,22590 <__alt_data_end+0xfc022590>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   225d0:	e13ffb17 	ldw	r4,-20(fp)
   225d4:	002118c0 	call	2118c <alt_avalon_i2c_disable>
   225d8:	00001406 	br	2262c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   225dc:	e0bfff03 	ldbu	r2,-4(fp)
   225e0:	10001226 	beq	r2,zero,2262c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   225e4:	01400704 	movi	r5,28
   225e8:	e13ffb17 	ldw	r4,-20(fp)
   225ec:	00226e00 	call	226e0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   225f0:	000b883a 	mov	r5,zero
   225f4:	e13ffb17 	ldw	r4,-20(fp)
   225f8:	00228780 	call	22878 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   225fc:	e0bffa17 	ldw	r2,-24(fp)
   22600:	00c00084 	movi	r3,2
   22604:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   22608:	e0bffa17 	ldw	r2,-24(fp)
   2260c:	e0fffc17 	ldw	r3,-16(fp)
   22610:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   22614:	e0bffa17 	ldw	r2,-24(fp)
   22618:	e0fffd17 	ldw	r3,-12(fp)
   2261c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   22620:	01400084 	movi	r5,2
   22624:	e13ffb17 	ldw	r4,-20(fp)
   22628:	00227840 	call	22784 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   2262c:	e0bff717 	ldw	r2,-36(fp)
}
   22630:	e037883a 	mov	sp,fp
   22634:	dfc00117 	ldw	ra,4(sp)
   22638:	df000017 	ldw	fp,0(sp)
   2263c:	dec00204 	addi	sp,sp,8
   22640:	f800283a 	ret

00022644 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   22644:	defffd04 	addi	sp,sp,-12
   22648:	df000215 	stw	fp,8(sp)
   2264c:	df000204 	addi	fp,sp,8
   22650:	e13ffe15 	stw	r4,-8(fp)
   22654:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   22658:	e0bffe17 	ldw	r2,-8(fp)
   2265c:	10800317 	ldw	r2,12(r2)
   22660:	10800404 	addi	r2,r2,16
   22664:	10c00037 	ldwio	r3,0(r2)
   22668:	e0bffe17 	ldw	r2,-8(fp)
   2266c:	10800317 	ldw	r2,12(r2)
   22670:	10800304 	addi	r2,r2,12
   22674:	10800037 	ldwio	r2,0(r2)
   22678:	1884703a 	and	r2,r3,r2
   2267c:	1007883a 	mov	r3,r2
   22680:	e0bfff17 	ldw	r2,-4(fp)
   22684:	10c00015 	stw	r3,0(r2)
}
   22688:	0001883a 	nop
   2268c:	e037883a 	mov	sp,fp
   22690:	df000017 	ldw	fp,0(sp)
   22694:	dec00104 	addi	sp,sp,4
   22698:	f800283a 	ret

0002269c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   2269c:	defffd04 	addi	sp,sp,-12
   226a0:	df000215 	stw	fp,8(sp)
   226a4:	df000204 	addi	fp,sp,8
   226a8:	e13ffe15 	stw	r4,-8(fp)
   226ac:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   226b0:	e0bffe17 	ldw	r2,-8(fp)
   226b4:	10800317 	ldw	r2,12(r2)
   226b8:	10800404 	addi	r2,r2,16
   226bc:	10800037 	ldwio	r2,0(r2)
   226c0:	1007883a 	mov	r3,r2
   226c4:	e0bfff17 	ldw	r2,-4(fp)
   226c8:	10c00015 	stw	r3,0(r2)
}
   226cc:	0001883a 	nop
   226d0:	e037883a 	mov	sp,fp
   226d4:	df000017 	ldw	fp,0(sp)
   226d8:	dec00104 	addi	sp,sp,4
   226dc:	f800283a 	ret

000226e0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   226e0:	defffd04 	addi	sp,sp,-12
   226e4:	df000215 	stw	fp,8(sp)
   226e8:	df000204 	addi	fp,sp,8
   226ec:	e13ffe15 	stw	r4,-8(fp)
   226f0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   226f4:	e0bffe17 	ldw	r2,-8(fp)
   226f8:	10800317 	ldw	r2,12(r2)
   226fc:	10800404 	addi	r2,r2,16
   22700:	e0ffff17 	ldw	r3,-4(fp)
   22704:	10c00035 	stwio	r3,0(r2)
}
   22708:	0001883a 	nop
   2270c:	e037883a 	mov	sp,fp
   22710:	df000017 	ldw	fp,0(sp)
   22714:	dec00104 	addi	sp,sp,4
   22718:	f800283a 	ret

0002271c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2271c:	defffb04 	addi	sp,sp,-20
   22720:	dfc00415 	stw	ra,16(sp)
   22724:	df000315 	stw	fp,12(sp)
   22728:	df000304 	addi	fp,sp,12
   2272c:	e13ffe15 	stw	r4,-8(fp)
   22730:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   22734:	e17ffd04 	addi	r5,fp,-12
   22738:	e13ffe17 	ldw	r4,-8(fp)
   2273c:	00227e80 	call	227e8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   22740:	e0bfff17 	ldw	r2,-4(fp)
   22744:	0086303a 	nor	r3,zero,r2
   22748:	e0bffd17 	ldw	r2,-12(fp)
   2274c:	1884703a 	and	r2,r3,r2
   22750:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   22754:	e0bffe17 	ldw	r2,-8(fp)
   22758:	10800317 	ldw	r2,12(r2)
   2275c:	10800304 	addi	r2,r2,12
   22760:	e0fffd17 	ldw	r3,-12(fp)
   22764:	18c007cc 	andi	r3,r3,31
   22768:	10c00035 	stwio	r3,0(r2)
}
   2276c:	0001883a 	nop
   22770:	e037883a 	mov	sp,fp
   22774:	dfc00117 	ldw	ra,4(sp)
   22778:	df000017 	ldw	fp,0(sp)
   2277c:	dec00204 	addi	sp,sp,8
   22780:	f800283a 	ret

00022784 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   22784:	defffb04 	addi	sp,sp,-20
   22788:	dfc00415 	stw	ra,16(sp)
   2278c:	df000315 	stw	fp,12(sp)
   22790:	df000304 	addi	fp,sp,12
   22794:	e13ffe15 	stw	r4,-8(fp)
   22798:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2279c:	e17ffd04 	addi	r5,fp,-12
   227a0:	e13ffe17 	ldw	r4,-8(fp)
   227a4:	00227e80 	call	227e8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   227a8:	e0fffd17 	ldw	r3,-12(fp)
   227ac:	e0bfff17 	ldw	r2,-4(fp)
   227b0:	1884b03a 	or	r2,r3,r2
   227b4:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   227b8:	e0bffe17 	ldw	r2,-8(fp)
   227bc:	10800317 	ldw	r2,12(r2)
   227c0:	10800304 	addi	r2,r2,12
   227c4:	e0fffd17 	ldw	r3,-12(fp)
   227c8:	18c007cc 	andi	r3,r3,31
   227cc:	10c00035 	stwio	r3,0(r2)
}
   227d0:	0001883a 	nop
   227d4:	e037883a 	mov	sp,fp
   227d8:	dfc00117 	ldw	ra,4(sp)
   227dc:	df000017 	ldw	fp,0(sp)
   227e0:	dec00204 	addi	sp,sp,8
   227e4:	f800283a 	ret

000227e8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   227e8:	defffd04 	addi	sp,sp,-12
   227ec:	df000215 	stw	fp,8(sp)
   227f0:	df000204 	addi	fp,sp,8
   227f4:	e13ffe15 	stw	r4,-8(fp)
   227f8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   227fc:	e0bffe17 	ldw	r2,-8(fp)
   22800:	10800317 	ldw	r2,12(r2)
   22804:	10800304 	addi	r2,r2,12
   22808:	10800037 	ldwio	r2,0(r2)
   2280c:	10c007cc 	andi	r3,r2,31
   22810:	e0bfff17 	ldw	r2,-4(fp)
   22814:	10c00015 	stw	r3,0(r2)
}
   22818:	0001883a 	nop
   2281c:	e037883a 	mov	sp,fp
   22820:	df000017 	ldw	fp,0(sp)
   22824:	dec00104 	addi	sp,sp,4
   22828:	f800283a 	ret

0002282c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   2282c:	defffd04 	addi	sp,sp,-12
   22830:	df000215 	stw	fp,8(sp)
   22834:	df000204 	addi	fp,sp,8
   22838:	e13ffe15 	stw	r4,-8(fp)
   2283c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   22840:	e0bffe17 	ldw	r2,-8(fp)
   22844:	10800317 	ldw	r2,12(r2)
   22848:	10800204 	addi	r2,r2,8
   2284c:	10800037 	ldwio	r2,0(r2)
   22850:	10800c0c 	andi	r2,r2,48
   22854:	1005d13a 	srai	r2,r2,4
   22858:	1007883a 	mov	r3,r2
   2285c:	e0bfff17 	ldw	r2,-4(fp)
   22860:	10c00015 	stw	r3,0(r2)
}
   22864:	0001883a 	nop
   22868:	e037883a 	mov	sp,fp
   2286c:	df000017 	ldw	fp,0(sp)
   22870:	dec00104 	addi	sp,sp,4
   22874:	f800283a 	ret

00022878 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   22878:	defffd04 	addi	sp,sp,-12
   2287c:	df000215 	stw	fp,8(sp)
   22880:	df000204 	addi	fp,sp,8
   22884:	e13ffe15 	stw	r4,-8(fp)
   22888:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   2288c:	e0bffe17 	ldw	r2,-8(fp)
   22890:	10800317 	ldw	r2,12(r2)
   22894:	10800204 	addi	r2,r2,8
   22898:	e0fffe17 	ldw	r3,-8(fp)
   2289c:	18c00317 	ldw	r3,12(r3)
   228a0:	18c00204 	addi	r3,r3,8
   228a4:	18c00037 	ldwio	r3,0(r3)
   228a8:	1809883a 	mov	r4,r3
   228ac:	00fff3c4 	movi	r3,-49
   228b0:	20c8703a 	and	r4,r4,r3
   228b4:	e0ffff17 	ldw	r3,-4(fp)
   228b8:	1806913a 	slli	r3,r3,4
   228bc:	18c00c0c 	andi	r3,r3,48
   228c0:	20c6b03a 	or	r3,r4,r3
   228c4:	10c00035 	stwio	r3,0(r2)
}
   228c8:	0001883a 	nop
   228cc:	e037883a 	mov	sp,fp
   228d0:	df000017 	ldw	fp,0(sp)
   228d4:	dec00104 	addi	sp,sp,4
   228d8:	f800283a 	ret

000228dc <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   228dc:	defffd04 	addi	sp,sp,-12
   228e0:	df000215 	stw	fp,8(sp)
   228e4:	df000204 	addi	fp,sp,8
   228e8:	e13ffe15 	stw	r4,-8(fp)
   228ec:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   228f0:	e0bffe17 	ldw	r2,-8(fp)
   228f4:	10800317 	ldw	r2,12(r2)
   228f8:	10800204 	addi	r2,r2,8
   228fc:	10800037 	ldwio	r2,0(r2)
   22900:	1080030c 	andi	r2,r2,12
   22904:	1005d0ba 	srai	r2,r2,2
   22908:	1007883a 	mov	r3,r2
   2290c:	e0bfff17 	ldw	r2,-4(fp)
   22910:	10c00015 	stw	r3,0(r2)
}
   22914:	0001883a 	nop
   22918:	e037883a 	mov	sp,fp
   2291c:	df000017 	ldw	fp,0(sp)
   22920:	dec00104 	addi	sp,sp,4
   22924:	f800283a 	ret

00022928 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   22928:	defffd04 	addi	sp,sp,-12
   2292c:	df000215 	stw	fp,8(sp)
   22930:	df000204 	addi	fp,sp,8
   22934:	e13ffe15 	stw	r4,-8(fp)
   22938:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   2293c:	e0bffe17 	ldw	r2,-8(fp)
   22940:	10800317 	ldw	r2,12(r2)
   22944:	10c00204 	addi	r3,r2,8
   22948:	e0bffe17 	ldw	r2,-8(fp)
   2294c:	10800317 	ldw	r2,12(r2)
   22950:	10800204 	addi	r2,r2,8
   22954:	10800037 	ldwio	r2,0(r2)
   22958:	1009883a 	mov	r4,r2
   2295c:	00bffcc4 	movi	r2,-13
   22960:	2088703a 	and	r4,r4,r2
   22964:	e0bfff17 	ldw	r2,-4(fp)
   22968:	1085883a 	add	r2,r2,r2
   2296c:	1085883a 	add	r2,r2,r2
   22970:	1080030c 	andi	r2,r2,12
   22974:	2084b03a 	or	r2,r4,r2
   22978:	18800035 	stwio	r2,0(r3)
}
   2297c:	0001883a 	nop
   22980:	e037883a 	mov	sp,fp
   22984:	df000017 	ldw	fp,0(sp)
   22988:	dec00104 	addi	sp,sp,4
   2298c:	f800283a 	ret

00022990 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22990:	defffa04 	addi	sp,sp,-24
   22994:	dfc00515 	stw	ra,20(sp)
   22998:	df000415 	stw	fp,16(sp)
   2299c:	df000404 	addi	fp,sp,16
   229a0:	e13ffd15 	stw	r4,-12(fp)
   229a4:	e17ffe15 	stw	r5,-8(fp)
   229a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   229ac:	e0bffd17 	ldw	r2,-12(fp)
   229b0:	10800017 	ldw	r2,0(r2)
   229b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   229b8:	e0bffc17 	ldw	r2,-16(fp)
   229bc:	10c00a04 	addi	r3,r2,40
   229c0:	e0bffd17 	ldw	r2,-12(fp)
   229c4:	10800217 	ldw	r2,8(r2)
   229c8:	100f883a 	mov	r7,r2
   229cc:	e1bfff17 	ldw	r6,-4(fp)
   229d0:	e17ffe17 	ldw	r5,-8(fp)
   229d4:	1809883a 	mov	r4,r3
   229d8:	0022fb80 	call	22fb8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   229dc:	e037883a 	mov	sp,fp
   229e0:	dfc00117 	ldw	ra,4(sp)
   229e4:	df000017 	ldw	fp,0(sp)
   229e8:	dec00204 	addi	sp,sp,8
   229ec:	f800283a 	ret

000229f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   229f0:	defffa04 	addi	sp,sp,-24
   229f4:	dfc00515 	stw	ra,20(sp)
   229f8:	df000415 	stw	fp,16(sp)
   229fc:	df000404 	addi	fp,sp,16
   22a00:	e13ffd15 	stw	r4,-12(fp)
   22a04:	e17ffe15 	stw	r5,-8(fp)
   22a08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22a0c:	e0bffd17 	ldw	r2,-12(fp)
   22a10:	10800017 	ldw	r2,0(r2)
   22a14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   22a18:	e0bffc17 	ldw	r2,-16(fp)
   22a1c:	10c00a04 	addi	r3,r2,40
   22a20:	e0bffd17 	ldw	r2,-12(fp)
   22a24:	10800217 	ldw	r2,8(r2)
   22a28:	100f883a 	mov	r7,r2
   22a2c:	e1bfff17 	ldw	r6,-4(fp)
   22a30:	e17ffe17 	ldw	r5,-8(fp)
   22a34:	1809883a 	mov	r4,r3
   22a38:	00231d40 	call	231d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   22a3c:	e037883a 	mov	sp,fp
   22a40:	dfc00117 	ldw	ra,4(sp)
   22a44:	df000017 	ldw	fp,0(sp)
   22a48:	dec00204 	addi	sp,sp,8
   22a4c:	f800283a 	ret

00022a50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   22a50:	defffc04 	addi	sp,sp,-16
   22a54:	dfc00315 	stw	ra,12(sp)
   22a58:	df000215 	stw	fp,8(sp)
   22a5c:	df000204 	addi	fp,sp,8
   22a60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22a64:	e0bfff17 	ldw	r2,-4(fp)
   22a68:	10800017 	ldw	r2,0(r2)
   22a6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   22a70:	e0bffe17 	ldw	r2,-8(fp)
   22a74:	10c00a04 	addi	r3,r2,40
   22a78:	e0bfff17 	ldw	r2,-4(fp)
   22a7c:	10800217 	ldw	r2,8(r2)
   22a80:	100b883a 	mov	r5,r2
   22a84:	1809883a 	mov	r4,r3
   22a88:	0022e600 	call	22e60 <altera_avalon_jtag_uart_close>
}
   22a8c:	e037883a 	mov	sp,fp
   22a90:	dfc00117 	ldw	ra,4(sp)
   22a94:	df000017 	ldw	fp,0(sp)
   22a98:	dec00204 	addi	sp,sp,8
   22a9c:	f800283a 	ret

00022aa0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   22aa0:	defffa04 	addi	sp,sp,-24
   22aa4:	dfc00515 	stw	ra,20(sp)
   22aa8:	df000415 	stw	fp,16(sp)
   22aac:	df000404 	addi	fp,sp,16
   22ab0:	e13ffd15 	stw	r4,-12(fp)
   22ab4:	e17ffe15 	stw	r5,-8(fp)
   22ab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   22abc:	e0bffd17 	ldw	r2,-12(fp)
   22ac0:	10800017 	ldw	r2,0(r2)
   22ac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   22ac8:	e0bffc17 	ldw	r2,-16(fp)
   22acc:	10800a04 	addi	r2,r2,40
   22ad0:	e1bfff17 	ldw	r6,-4(fp)
   22ad4:	e17ffe17 	ldw	r5,-8(fp)
   22ad8:	1009883a 	mov	r4,r2
   22adc:	0022ec80 	call	22ec8 <altera_avalon_jtag_uart_ioctl>
}
   22ae0:	e037883a 	mov	sp,fp
   22ae4:	dfc00117 	ldw	ra,4(sp)
   22ae8:	df000017 	ldw	fp,0(sp)
   22aec:	dec00204 	addi	sp,sp,8
   22af0:	f800283a 	ret

00022af4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   22af4:	defffa04 	addi	sp,sp,-24
   22af8:	dfc00515 	stw	ra,20(sp)
   22afc:	df000415 	stw	fp,16(sp)
   22b00:	df000404 	addi	fp,sp,16
   22b04:	e13ffd15 	stw	r4,-12(fp)
   22b08:	e17ffe15 	stw	r5,-8(fp)
   22b0c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22b10:	e0bffd17 	ldw	r2,-12(fp)
   22b14:	00c00044 	movi	r3,1
   22b18:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   22b1c:	e0bffd17 	ldw	r2,-12(fp)
   22b20:	10800017 	ldw	r2,0(r2)
   22b24:	10800104 	addi	r2,r2,4
   22b28:	1007883a 	mov	r3,r2
   22b2c:	e0bffd17 	ldw	r2,-12(fp)
   22b30:	10800817 	ldw	r2,32(r2)
   22b34:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   22b38:	e0bffe17 	ldw	r2,-8(fp)
   22b3c:	e0ffff17 	ldw	r3,-4(fp)
   22b40:	d8000015 	stw	zero,0(sp)
   22b44:	e1fffd17 	ldw	r7,-12(fp)
   22b48:	018000b4 	movhi	r6,2
   22b4c:	318aed04 	addi	r6,r6,11188
   22b50:	180b883a 	mov	r5,r3
   22b54:	1009883a 	mov	r4,r2
   22b58:	0023bdc0 	call	23bdc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   22b5c:	e0bffd17 	ldw	r2,-12(fp)
   22b60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   22b64:	e0bffd17 	ldw	r2,-12(fp)
   22b68:	10800204 	addi	r2,r2,8
   22b6c:	d0f25617 	ldw	r3,-13992(gp)
   22b70:	e1fffd17 	ldw	r7,-12(fp)
   22b74:	018000b4 	movhi	r6,2
   22b78:	318b7004 	addi	r6,r6,11712
   22b7c:	180b883a 	mov	r5,r3
   22b80:	1009883a 	mov	r4,r2
   22b84:	00236e80 	call	236e8 <alt_alarm_start>
   22b88:	1000040e 	bge	r2,zero,22b9c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   22b8c:	e0fffd17 	ldw	r3,-12(fp)
   22b90:	00a00034 	movhi	r2,32768
   22b94:	10bfffc4 	addi	r2,r2,-1
   22b98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   22b9c:	0001883a 	nop
   22ba0:	e037883a 	mov	sp,fp
   22ba4:	dfc00117 	ldw	ra,4(sp)
   22ba8:	df000017 	ldw	fp,0(sp)
   22bac:	dec00204 	addi	sp,sp,8
   22bb0:	f800283a 	ret

00022bb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   22bb4:	defff804 	addi	sp,sp,-32
   22bb8:	df000715 	stw	fp,28(sp)
   22bbc:	df000704 	addi	fp,sp,28
   22bc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   22bc4:	e0bfff17 	ldw	r2,-4(fp)
   22bc8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   22bcc:	e0bffb17 	ldw	r2,-20(fp)
   22bd0:	10800017 	ldw	r2,0(r2)
   22bd4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22bd8:	e0bffc17 	ldw	r2,-16(fp)
   22bdc:	10800104 	addi	r2,r2,4
   22be0:	10800037 	ldwio	r2,0(r2)
   22be4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   22be8:	e0bffd17 	ldw	r2,-12(fp)
   22bec:	1080c00c 	andi	r2,r2,768
   22bf0:	10006d26 	beq	r2,zero,22da8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   22bf4:	e0bffd17 	ldw	r2,-12(fp)
   22bf8:	1080400c 	andi	r2,r2,256
   22bfc:	10003526 	beq	r2,zero,22cd4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   22c00:	00800074 	movhi	r2,1
   22c04:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22c08:	e0bffb17 	ldw	r2,-20(fp)
   22c0c:	10800a17 	ldw	r2,40(r2)
   22c10:	10800044 	addi	r2,r2,1
   22c14:	1081ffcc 	andi	r2,r2,2047
   22c18:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   22c1c:	e0bffb17 	ldw	r2,-20(fp)
   22c20:	10c00b17 	ldw	r3,44(r2)
   22c24:	e0bffe17 	ldw	r2,-8(fp)
   22c28:	18801526 	beq	r3,r2,22c80 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   22c2c:	e0bffc17 	ldw	r2,-16(fp)
   22c30:	10800037 	ldwio	r2,0(r2)
   22c34:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   22c38:	e0bff917 	ldw	r2,-28(fp)
   22c3c:	10a0000c 	andi	r2,r2,32768
   22c40:	10001126 	beq	r2,zero,22c88 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   22c44:	e0bffb17 	ldw	r2,-20(fp)
   22c48:	10800a17 	ldw	r2,40(r2)
   22c4c:	e0fff917 	ldw	r3,-28(fp)
   22c50:	1809883a 	mov	r4,r3
   22c54:	e0fffb17 	ldw	r3,-20(fp)
   22c58:	1885883a 	add	r2,r3,r2
   22c5c:	10800e04 	addi	r2,r2,56
   22c60:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22c64:	e0bffb17 	ldw	r2,-20(fp)
   22c68:	10800a17 	ldw	r2,40(r2)
   22c6c:	10800044 	addi	r2,r2,1
   22c70:	10c1ffcc 	andi	r3,r2,2047
   22c74:	e0bffb17 	ldw	r2,-20(fp)
   22c78:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   22c7c:	003fe206 	br	22c08 <__alt_data_end+0xfc022c08>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   22c80:	0001883a 	nop
   22c84:	00000106 	br	22c8c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   22c88:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   22c8c:	e0bff917 	ldw	r2,-28(fp)
   22c90:	10bfffec 	andhi	r2,r2,65535
   22c94:	10000f26 	beq	r2,zero,22cd4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22c98:	e0bffb17 	ldw	r2,-20(fp)
   22c9c:	10c00817 	ldw	r3,32(r2)
   22ca0:	00bfff84 	movi	r2,-2
   22ca4:	1886703a 	and	r3,r3,r2
   22ca8:	e0bffb17 	ldw	r2,-20(fp)
   22cac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   22cb0:	e0bffc17 	ldw	r2,-16(fp)
   22cb4:	10800104 	addi	r2,r2,4
   22cb8:	1007883a 	mov	r3,r2
   22cbc:	e0bffb17 	ldw	r2,-20(fp)
   22cc0:	10800817 	ldw	r2,32(r2)
   22cc4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22cc8:	e0bffc17 	ldw	r2,-16(fp)
   22ccc:	10800104 	addi	r2,r2,4
   22cd0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   22cd4:	e0bffd17 	ldw	r2,-12(fp)
   22cd8:	1080800c 	andi	r2,r2,512
   22cdc:	103fbe26 	beq	r2,zero,22bd8 <__alt_data_end+0xfc022bd8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   22ce0:	e0bffd17 	ldw	r2,-12(fp)
   22ce4:	1004d43a 	srli	r2,r2,16
   22ce8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   22cec:	00001406 	br	22d40 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   22cf0:	e0bffc17 	ldw	r2,-16(fp)
   22cf4:	e0fffb17 	ldw	r3,-20(fp)
   22cf8:	18c00d17 	ldw	r3,52(r3)
   22cfc:	e13ffb17 	ldw	r4,-20(fp)
   22d00:	20c7883a 	add	r3,r4,r3
   22d04:	18c20e04 	addi	r3,r3,2104
   22d08:	18c00003 	ldbu	r3,0(r3)
   22d0c:	18c03fcc 	andi	r3,r3,255
   22d10:	18c0201c 	xori	r3,r3,128
   22d14:	18ffe004 	addi	r3,r3,-128
   22d18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22d1c:	e0bffb17 	ldw	r2,-20(fp)
   22d20:	10800d17 	ldw	r2,52(r2)
   22d24:	10800044 	addi	r2,r2,1
   22d28:	10c1ffcc 	andi	r3,r2,2047
   22d2c:	e0bffb17 	ldw	r2,-20(fp)
   22d30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   22d34:	e0bffa17 	ldw	r2,-24(fp)
   22d38:	10bfffc4 	addi	r2,r2,-1
   22d3c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   22d40:	e0bffa17 	ldw	r2,-24(fp)
   22d44:	10000526 	beq	r2,zero,22d5c <altera_avalon_jtag_uart_irq+0x1a8>
   22d48:	e0bffb17 	ldw	r2,-20(fp)
   22d4c:	10c00d17 	ldw	r3,52(r2)
   22d50:	e0bffb17 	ldw	r2,-20(fp)
   22d54:	10800c17 	ldw	r2,48(r2)
   22d58:	18bfe51e 	bne	r3,r2,22cf0 <__alt_data_end+0xfc022cf0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   22d5c:	e0bffa17 	ldw	r2,-24(fp)
   22d60:	103f9d26 	beq	r2,zero,22bd8 <__alt_data_end+0xfc022bd8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22d64:	e0bffb17 	ldw	r2,-20(fp)
   22d68:	10c00817 	ldw	r3,32(r2)
   22d6c:	00bfff44 	movi	r2,-3
   22d70:	1886703a 	and	r3,r3,r2
   22d74:	e0bffb17 	ldw	r2,-20(fp)
   22d78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22d7c:	e0bffb17 	ldw	r2,-20(fp)
   22d80:	10800017 	ldw	r2,0(r2)
   22d84:	10800104 	addi	r2,r2,4
   22d88:	1007883a 	mov	r3,r2
   22d8c:	e0bffb17 	ldw	r2,-20(fp)
   22d90:	10800817 	ldw	r2,32(r2)
   22d94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22d98:	e0bffc17 	ldw	r2,-16(fp)
   22d9c:	10800104 	addi	r2,r2,4
   22da0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   22da4:	003f8c06 	br	22bd8 <__alt_data_end+0xfc022bd8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   22da8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   22dac:	0001883a 	nop
   22db0:	e037883a 	mov	sp,fp
   22db4:	df000017 	ldw	fp,0(sp)
   22db8:	dec00104 	addi	sp,sp,4
   22dbc:	f800283a 	ret

00022dc0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   22dc0:	defff804 	addi	sp,sp,-32
   22dc4:	df000715 	stw	fp,28(sp)
   22dc8:	df000704 	addi	fp,sp,28
   22dcc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   22dd0:	e0bffb17 	ldw	r2,-20(fp)
   22dd4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   22dd8:	e0bff917 	ldw	r2,-28(fp)
   22ddc:	10800017 	ldw	r2,0(r2)
   22de0:	10800104 	addi	r2,r2,4
   22de4:	10800037 	ldwio	r2,0(r2)
   22de8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   22dec:	e0bffa17 	ldw	r2,-24(fp)
   22df0:	1081000c 	andi	r2,r2,1024
   22df4:	10000b26 	beq	r2,zero,22e24 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   22df8:	e0bff917 	ldw	r2,-28(fp)
   22dfc:	10800017 	ldw	r2,0(r2)
   22e00:	10800104 	addi	r2,r2,4
   22e04:	1007883a 	mov	r3,r2
   22e08:	e0bff917 	ldw	r2,-28(fp)
   22e0c:	10800817 	ldw	r2,32(r2)
   22e10:	10810014 	ori	r2,r2,1024
   22e14:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   22e18:	e0bff917 	ldw	r2,-28(fp)
   22e1c:	10000915 	stw	zero,36(r2)
   22e20:	00000a06 	br	22e4c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   22e24:	e0bff917 	ldw	r2,-28(fp)
   22e28:	10c00917 	ldw	r3,36(r2)
   22e2c:	00a00034 	movhi	r2,32768
   22e30:	10bfff04 	addi	r2,r2,-4
   22e34:	10c00536 	bltu	r2,r3,22e4c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   22e38:	e0bff917 	ldw	r2,-28(fp)
   22e3c:	10800917 	ldw	r2,36(r2)
   22e40:	10c00044 	addi	r3,r2,1
   22e44:	e0bff917 	ldw	r2,-28(fp)
   22e48:	10c00915 	stw	r3,36(r2)
   22e4c:	d0b25617 	ldw	r2,-13992(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   22e50:	e037883a 	mov	sp,fp
   22e54:	df000017 	ldw	fp,0(sp)
   22e58:	dec00104 	addi	sp,sp,4
   22e5c:	f800283a 	ret

00022e60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   22e60:	defffd04 	addi	sp,sp,-12
   22e64:	df000215 	stw	fp,8(sp)
   22e68:	df000204 	addi	fp,sp,8
   22e6c:	e13ffe15 	stw	r4,-8(fp)
   22e70:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22e74:	00000506 	br	22e8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   22e78:	e0bfff17 	ldw	r2,-4(fp)
   22e7c:	1090000c 	andi	r2,r2,16384
   22e80:	10000226 	beq	r2,zero,22e8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   22e84:	00bffd44 	movi	r2,-11
   22e88:	00000b06 	br	22eb8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22e8c:	e0bffe17 	ldw	r2,-8(fp)
   22e90:	10c00d17 	ldw	r3,52(r2)
   22e94:	e0bffe17 	ldw	r2,-8(fp)
   22e98:	10800c17 	ldw	r2,48(r2)
   22e9c:	18800526 	beq	r3,r2,22eb4 <altera_avalon_jtag_uart_close+0x54>
   22ea0:	e0bffe17 	ldw	r2,-8(fp)
   22ea4:	10c00917 	ldw	r3,36(r2)
   22ea8:	e0bffe17 	ldw	r2,-8(fp)
   22eac:	10800117 	ldw	r2,4(r2)
   22eb0:	18bff136 	bltu	r3,r2,22e78 <__alt_data_end+0xfc022e78>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   22eb4:	0005883a 	mov	r2,zero
}
   22eb8:	e037883a 	mov	sp,fp
   22ebc:	df000017 	ldw	fp,0(sp)
   22ec0:	dec00104 	addi	sp,sp,4
   22ec4:	f800283a 	ret

00022ec8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   22ec8:	defffa04 	addi	sp,sp,-24
   22ecc:	df000515 	stw	fp,20(sp)
   22ed0:	df000504 	addi	fp,sp,20
   22ed4:	e13ffd15 	stw	r4,-12(fp)
   22ed8:	e17ffe15 	stw	r5,-8(fp)
   22edc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   22ee0:	00bff9c4 	movi	r2,-25
   22ee4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22ee8:	e0bffe17 	ldw	r2,-8(fp)
   22eec:	10da8060 	cmpeqi	r3,r2,27137
   22ef0:	1800031e 	bne	r3,zero,22f00 <altera_avalon_jtag_uart_ioctl+0x38>
   22ef4:	109a80a0 	cmpeqi	r2,r2,27138
   22ef8:	1000181e 	bne	r2,zero,22f5c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   22efc:	00002906 	br	22fa4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   22f00:	e0bffd17 	ldw	r2,-12(fp)
   22f04:	10c00117 	ldw	r3,4(r2)
   22f08:	00a00034 	movhi	r2,32768
   22f0c:	10bfffc4 	addi	r2,r2,-1
   22f10:	18802126 	beq	r3,r2,22f98 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   22f14:	e0bfff17 	ldw	r2,-4(fp)
   22f18:	10800017 	ldw	r2,0(r2)
   22f1c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   22f20:	e0bffc17 	ldw	r2,-16(fp)
   22f24:	10800090 	cmplti	r2,r2,2
   22f28:	1000061e 	bne	r2,zero,22f44 <altera_avalon_jtag_uart_ioctl+0x7c>
   22f2c:	e0fffc17 	ldw	r3,-16(fp)
   22f30:	00a00034 	movhi	r2,32768
   22f34:	10bfffc4 	addi	r2,r2,-1
   22f38:	18800226 	beq	r3,r2,22f44 <altera_avalon_jtag_uart_ioctl+0x7c>
   22f3c:	e0bffc17 	ldw	r2,-16(fp)
   22f40:	00000206 	br	22f4c <altera_avalon_jtag_uart_ioctl+0x84>
   22f44:	00a00034 	movhi	r2,32768
   22f48:	10bfff84 	addi	r2,r2,-2
   22f4c:	e0fffd17 	ldw	r3,-12(fp)
   22f50:	18800115 	stw	r2,4(r3)
      rc = 0;
   22f54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22f58:	00000f06 	br	22f98 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   22f5c:	e0bffd17 	ldw	r2,-12(fp)
   22f60:	10c00117 	ldw	r3,4(r2)
   22f64:	00a00034 	movhi	r2,32768
   22f68:	10bfffc4 	addi	r2,r2,-1
   22f6c:	18800c26 	beq	r3,r2,22fa0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22f70:	e0bffd17 	ldw	r2,-12(fp)
   22f74:	10c00917 	ldw	r3,36(r2)
   22f78:	e0bffd17 	ldw	r2,-12(fp)
   22f7c:	10800117 	ldw	r2,4(r2)
   22f80:	1885803a 	cmpltu	r2,r3,r2
   22f84:	10c03fcc 	andi	r3,r2,255
   22f88:	e0bfff17 	ldw	r2,-4(fp)
   22f8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   22f90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22f94:	00000206 	br	22fa0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   22f98:	0001883a 	nop
   22f9c:	00000106 	br	22fa4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   22fa0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   22fa4:	e0bffb17 	ldw	r2,-20(fp)
}
   22fa8:	e037883a 	mov	sp,fp
   22fac:	df000017 	ldw	fp,0(sp)
   22fb0:	dec00104 	addi	sp,sp,4
   22fb4:	f800283a 	ret

00022fb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22fb8:	defff304 	addi	sp,sp,-52
   22fbc:	dfc00c15 	stw	ra,48(sp)
   22fc0:	df000b15 	stw	fp,44(sp)
   22fc4:	df000b04 	addi	fp,sp,44
   22fc8:	e13ffc15 	stw	r4,-16(fp)
   22fcc:	e17ffd15 	stw	r5,-12(fp)
   22fd0:	e1bffe15 	stw	r6,-8(fp)
   22fd4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22fd8:	e0bffd17 	ldw	r2,-12(fp)
   22fdc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22fe0:	00004706 	br	23100 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22fe4:	e0bffc17 	ldw	r2,-16(fp)
   22fe8:	10800a17 	ldw	r2,40(r2)
   22fec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   22ff0:	e0bffc17 	ldw	r2,-16(fp)
   22ff4:	10800b17 	ldw	r2,44(r2)
   22ff8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   22ffc:	e0fff717 	ldw	r3,-36(fp)
   23000:	e0bff817 	ldw	r2,-32(fp)
   23004:	18800536 	bltu	r3,r2,2301c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23008:	e0fff717 	ldw	r3,-36(fp)
   2300c:	e0bff817 	ldw	r2,-32(fp)
   23010:	1885c83a 	sub	r2,r3,r2
   23014:	e0bff615 	stw	r2,-40(fp)
   23018:	00000406 	br	2302c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2301c:	00c20004 	movi	r3,2048
   23020:	e0bff817 	ldw	r2,-32(fp)
   23024:	1885c83a 	sub	r2,r3,r2
   23028:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2302c:	e0bff617 	ldw	r2,-40(fp)
   23030:	10001e26 	beq	r2,zero,230ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   23034:	e0fffe17 	ldw	r3,-8(fp)
   23038:	e0bff617 	ldw	r2,-40(fp)
   2303c:	1880022e 	bgeu	r3,r2,23048 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   23040:	e0bffe17 	ldw	r2,-8(fp)
   23044:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23048:	e0bffc17 	ldw	r2,-16(fp)
   2304c:	10c00e04 	addi	r3,r2,56
   23050:	e0bff817 	ldw	r2,-32(fp)
   23054:	1885883a 	add	r2,r3,r2
   23058:	e1bff617 	ldw	r6,-40(fp)
   2305c:	100b883a 	mov	r5,r2
   23060:	e13ff517 	ldw	r4,-44(fp)
   23064:	000fde80 	call	fde8 <memcpy>
      ptr   += n;
   23068:	e0fff517 	ldw	r3,-44(fp)
   2306c:	e0bff617 	ldw	r2,-40(fp)
   23070:	1885883a 	add	r2,r3,r2
   23074:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   23078:	e0fffe17 	ldw	r3,-8(fp)
   2307c:	e0bff617 	ldw	r2,-40(fp)
   23080:	1885c83a 	sub	r2,r3,r2
   23084:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23088:	e0fff817 	ldw	r3,-32(fp)
   2308c:	e0bff617 	ldw	r2,-40(fp)
   23090:	1885883a 	add	r2,r3,r2
   23094:	10c1ffcc 	andi	r3,r2,2047
   23098:	e0bffc17 	ldw	r2,-16(fp)
   2309c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   230a0:	e0bffe17 	ldw	r2,-8(fp)
   230a4:	00bfcf16 	blt	zero,r2,22fe4 <__alt_data_end+0xfc022fe4>
   230a8:	00000106 	br	230b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   230ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   230b0:	e0fff517 	ldw	r3,-44(fp)
   230b4:	e0bffd17 	ldw	r2,-12(fp)
   230b8:	1880141e 	bne	r3,r2,2310c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   230bc:	e0bfff17 	ldw	r2,-4(fp)
   230c0:	1090000c 	andi	r2,r2,16384
   230c4:	1000131e 	bne	r2,zero,23114 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   230c8:	0001883a 	nop
   230cc:	e0bffc17 	ldw	r2,-16(fp)
   230d0:	10c00a17 	ldw	r3,40(r2)
   230d4:	e0bff717 	ldw	r2,-36(fp)
   230d8:	1880051e 	bne	r3,r2,230f0 <altera_avalon_jtag_uart_read+0x138>
   230dc:	e0bffc17 	ldw	r2,-16(fp)
   230e0:	10c00917 	ldw	r3,36(r2)
   230e4:	e0bffc17 	ldw	r2,-16(fp)
   230e8:	10800117 	ldw	r2,4(r2)
   230ec:	18bff736 	bltu	r3,r2,230cc <__alt_data_end+0xfc0230cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   230f0:	e0bffc17 	ldw	r2,-16(fp)
   230f4:	10c00a17 	ldw	r3,40(r2)
   230f8:	e0bff717 	ldw	r2,-36(fp)
   230fc:	18800726 	beq	r3,r2,2311c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23100:	e0bffe17 	ldw	r2,-8(fp)
   23104:	00bfb716 	blt	zero,r2,22fe4 <__alt_data_end+0xfc022fe4>
   23108:	00000506 	br	23120 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2310c:	0001883a 	nop
   23110:	00000306 	br	23120 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   23114:	0001883a 	nop
   23118:	00000106 	br	23120 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2311c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23120:	e0fff517 	ldw	r3,-44(fp)
   23124:	e0bffd17 	ldw	r2,-12(fp)
   23128:	18801826 	beq	r3,r2,2318c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2312c:	0005303a 	rdctl	r2,status
   23130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23134:	e0fffb17 	ldw	r3,-20(fp)
   23138:	00bfff84 	movi	r2,-2
   2313c:	1884703a 	and	r2,r3,r2
   23140:	1001703a 	wrctl	status,r2
  
  return context;
   23144:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23148:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2314c:	e0bffc17 	ldw	r2,-16(fp)
   23150:	10800817 	ldw	r2,32(r2)
   23154:	10c00054 	ori	r3,r2,1
   23158:	e0bffc17 	ldw	r2,-16(fp)
   2315c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23160:	e0bffc17 	ldw	r2,-16(fp)
   23164:	10800017 	ldw	r2,0(r2)
   23168:	10800104 	addi	r2,r2,4
   2316c:	1007883a 	mov	r3,r2
   23170:	e0bffc17 	ldw	r2,-16(fp)
   23174:	10800817 	ldw	r2,32(r2)
   23178:	18800035 	stwio	r2,0(r3)
   2317c:	e0bffa17 	ldw	r2,-24(fp)
   23180:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23184:	e0bff917 	ldw	r2,-28(fp)
   23188:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2318c:	e0fff517 	ldw	r3,-44(fp)
   23190:	e0bffd17 	ldw	r2,-12(fp)
   23194:	18800426 	beq	r3,r2,231a8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   23198:	e0fff517 	ldw	r3,-44(fp)
   2319c:	e0bffd17 	ldw	r2,-12(fp)
   231a0:	1885c83a 	sub	r2,r3,r2
   231a4:	00000606 	br	231c0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   231a8:	e0bfff17 	ldw	r2,-4(fp)
   231ac:	1090000c 	andi	r2,r2,16384
   231b0:	10000226 	beq	r2,zero,231bc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   231b4:	00bffd44 	movi	r2,-11
   231b8:	00000106 	br	231c0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   231bc:	00bffec4 	movi	r2,-5
}
   231c0:	e037883a 	mov	sp,fp
   231c4:	dfc00117 	ldw	ra,4(sp)
   231c8:	df000017 	ldw	fp,0(sp)
   231cc:	dec00204 	addi	sp,sp,8
   231d0:	f800283a 	ret

000231d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   231d4:	defff304 	addi	sp,sp,-52
   231d8:	dfc00c15 	stw	ra,48(sp)
   231dc:	df000b15 	stw	fp,44(sp)
   231e0:	df000b04 	addi	fp,sp,44
   231e4:	e13ffc15 	stw	r4,-16(fp)
   231e8:	e17ffd15 	stw	r5,-12(fp)
   231ec:	e1bffe15 	stw	r6,-8(fp)
   231f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   231f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   231f8:	e0bffd17 	ldw	r2,-12(fp)
   231fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23200:	00003706 	br	232e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23204:	e0bffc17 	ldw	r2,-16(fp)
   23208:	10800c17 	ldw	r2,48(r2)
   2320c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   23210:	e0bffc17 	ldw	r2,-16(fp)
   23214:	10800d17 	ldw	r2,52(r2)
   23218:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2321c:	e0fff917 	ldw	r3,-28(fp)
   23220:	e0bff517 	ldw	r2,-44(fp)
   23224:	1880062e 	bgeu	r3,r2,23240 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   23228:	e0fff517 	ldw	r3,-44(fp)
   2322c:	e0bff917 	ldw	r2,-28(fp)
   23230:	1885c83a 	sub	r2,r3,r2
   23234:	10bfffc4 	addi	r2,r2,-1
   23238:	e0bff615 	stw	r2,-40(fp)
   2323c:	00000b06 	br	2326c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   23240:	e0bff517 	ldw	r2,-44(fp)
   23244:	10000526 	beq	r2,zero,2325c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   23248:	00c20004 	movi	r3,2048
   2324c:	e0bff917 	ldw	r2,-28(fp)
   23250:	1885c83a 	sub	r2,r3,r2
   23254:	e0bff615 	stw	r2,-40(fp)
   23258:	00000406 	br	2326c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2325c:	00c1ffc4 	movi	r3,2047
   23260:	e0bff917 	ldw	r2,-28(fp)
   23264:	1885c83a 	sub	r2,r3,r2
   23268:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2326c:	e0bff617 	ldw	r2,-40(fp)
   23270:	10001e26 	beq	r2,zero,232ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   23274:	e0fffe17 	ldw	r3,-8(fp)
   23278:	e0bff617 	ldw	r2,-40(fp)
   2327c:	1880022e 	bgeu	r3,r2,23288 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   23280:	e0bffe17 	ldw	r2,-8(fp)
   23284:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   23288:	e0bffc17 	ldw	r2,-16(fp)
   2328c:	10c20e04 	addi	r3,r2,2104
   23290:	e0bff917 	ldw	r2,-28(fp)
   23294:	1885883a 	add	r2,r3,r2
   23298:	e1bff617 	ldw	r6,-40(fp)
   2329c:	e17ffd17 	ldw	r5,-12(fp)
   232a0:	1009883a 	mov	r4,r2
   232a4:	000fde80 	call	fde8 <memcpy>
      ptr   += n;
   232a8:	e0fffd17 	ldw	r3,-12(fp)
   232ac:	e0bff617 	ldw	r2,-40(fp)
   232b0:	1885883a 	add	r2,r3,r2
   232b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   232b8:	e0fffe17 	ldw	r3,-8(fp)
   232bc:	e0bff617 	ldw	r2,-40(fp)
   232c0:	1885c83a 	sub	r2,r3,r2
   232c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   232c8:	e0fff917 	ldw	r3,-28(fp)
   232cc:	e0bff617 	ldw	r2,-40(fp)
   232d0:	1885883a 	add	r2,r3,r2
   232d4:	10c1ffcc 	andi	r3,r2,2047
   232d8:	e0bffc17 	ldw	r2,-16(fp)
   232dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   232e0:	e0bffe17 	ldw	r2,-8(fp)
   232e4:	00bfc716 	blt	zero,r2,23204 <__alt_data_end+0xfc023204>
   232e8:	00000106 	br	232f0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   232ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   232f0:	0005303a 	rdctl	r2,status
   232f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   232f8:	e0fffb17 	ldw	r3,-20(fp)
   232fc:	00bfff84 	movi	r2,-2
   23300:	1884703a 	and	r2,r3,r2
   23304:	1001703a 	wrctl	status,r2
  
  return context;
   23308:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2330c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23310:	e0bffc17 	ldw	r2,-16(fp)
   23314:	10800817 	ldw	r2,32(r2)
   23318:	10c00094 	ori	r3,r2,2
   2331c:	e0bffc17 	ldw	r2,-16(fp)
   23320:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23324:	e0bffc17 	ldw	r2,-16(fp)
   23328:	10800017 	ldw	r2,0(r2)
   2332c:	10800104 	addi	r2,r2,4
   23330:	1007883a 	mov	r3,r2
   23334:	e0bffc17 	ldw	r2,-16(fp)
   23338:	10800817 	ldw	r2,32(r2)
   2333c:	18800035 	stwio	r2,0(r3)
   23340:	e0bffa17 	ldw	r2,-24(fp)
   23344:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23348:	e0bff817 	ldw	r2,-32(fp)
   2334c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   23350:	e0bffe17 	ldw	r2,-8(fp)
   23354:	0080100e 	bge	zero,r2,23398 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   23358:	e0bfff17 	ldw	r2,-4(fp)
   2335c:	1090000c 	andi	r2,r2,16384
   23360:	1000101e 	bne	r2,zero,233a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   23364:	0001883a 	nop
   23368:	e0bffc17 	ldw	r2,-16(fp)
   2336c:	10c00d17 	ldw	r3,52(r2)
   23370:	e0bff517 	ldw	r2,-44(fp)
   23374:	1880051e 	bne	r3,r2,2338c <altera_avalon_jtag_uart_write+0x1b8>
   23378:	e0bffc17 	ldw	r2,-16(fp)
   2337c:	10c00917 	ldw	r3,36(r2)
   23380:	e0bffc17 	ldw	r2,-16(fp)
   23384:	10800117 	ldw	r2,4(r2)
   23388:	18bff736 	bltu	r3,r2,23368 <__alt_data_end+0xfc023368>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2338c:	e0bffc17 	ldw	r2,-16(fp)
   23390:	10800917 	ldw	r2,36(r2)
   23394:	1000051e 	bne	r2,zero,233ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   23398:	e0bffe17 	ldw	r2,-8(fp)
   2339c:	00bfd016 	blt	zero,r2,232e0 <__alt_data_end+0xfc0232e0>
   233a0:	00000306 	br	233b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   233a4:	0001883a 	nop
   233a8:	00000106 	br	233b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   233ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   233b0:	e0fffd17 	ldw	r3,-12(fp)
   233b4:	e0bff717 	ldw	r2,-36(fp)
   233b8:	18800426 	beq	r3,r2,233cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   233bc:	e0fffd17 	ldw	r3,-12(fp)
   233c0:	e0bff717 	ldw	r2,-36(fp)
   233c4:	1885c83a 	sub	r2,r3,r2
   233c8:	00000606 	br	233e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   233cc:	e0bfff17 	ldw	r2,-4(fp)
   233d0:	1090000c 	andi	r2,r2,16384
   233d4:	10000226 	beq	r2,zero,233e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   233d8:	00bffd44 	movi	r2,-11
   233dc:	00000106 	br	233e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   233e0:	00bffec4 	movi	r2,-5
}
   233e4:	e037883a 	mov	sp,fp
   233e8:	dfc00117 	ldw	ra,4(sp)
   233ec:	df000017 	ldw	fp,0(sp)
   233f0:	dec00204 	addi	sp,sp,8
   233f4:	f800283a 	ret

000233f8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   233f8:	defff404 	addi	sp,sp,-48
   233fc:	df000b15 	stw	fp,44(sp)
   23400:	df000b04 	addi	fp,sp,44
   23404:	e13ffc15 	stw	r4,-16(fp)
   23408:	e17ffd15 	stw	r5,-12(fp)
   2340c:	e1bffe15 	stw	r6,-8(fp)
   23410:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   23414:	e0ffff17 	ldw	r3,-4(fp)
   23418:	e0bffe17 	ldw	r2,-8(fp)
   2341c:	1885883a 	add	r2,r3,r2
   23420:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   23424:	e0c00217 	ldw	r3,8(fp)
   23428:	e0800117 	ldw	r2,4(fp)
   2342c:	1885883a 	add	r2,r3,r2
   23430:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   23434:	e0800117 	ldw	r2,4(fp)
   23438:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   2343c:	e0bffe17 	ldw	r2,-8(fp)
   23440:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   23444:	00800044 	movi	r2,1
   23448:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   2344c:	e0bffc17 	ldw	r2,-16(fp)
   23450:	10800504 	addi	r2,r2,20
   23454:	1009883a 	mov	r4,r2
   23458:	00c00044 	movi	r3,1
   2345c:	e0bffd17 	ldw	r2,-12(fp)
   23460:	1884983a 	sll	r2,r3,r2
   23464:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   23468:	e0800317 	ldw	r2,12(fp)
   2346c:	1080008c 	andi	r2,r2,2
   23470:	1000051e 	bne	r2,zero,23488 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   23474:	e0bffc17 	ldw	r2,-16(fp)
   23478:	10800304 	addi	r2,r2,12
   2347c:	1007883a 	mov	r3,r2
   23480:	00810004 	movi	r2,1024
   23484:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   23488:	e0bffc17 	ldw	r2,-16(fp)
   2348c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23490:	e0bffc17 	ldw	r2,-16(fp)
   23494:	10800204 	addi	r2,r2,8
   23498:	10800037 	ldwio	r2,0(r2)
   2349c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   234a0:	e0bffa17 	ldw	r2,-24(fp)
   234a4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   234a8:	10000226 	beq	r2,zero,234b4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   234ac:	e0bff717 	ldw	r2,-36(fp)
   234b0:	1000031e 	bne	r2,zero,234c0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   234b4:	e0bffa17 	ldw	r2,-24(fp)
   234b8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   234bc:	103ff426 	beq	r2,zero,23490 <__alt_data_end+0xfc023490>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   234c0:	e0bffa17 	ldw	r2,-24(fp)
   234c4:	1080100c 	andi	r2,r2,64
   234c8:	10001e26 	beq	r2,zero,23544 <alt_avalon_spi_command+0x14c>
   234cc:	e0bff717 	ldw	r2,-36(fp)
   234d0:	00801c0e 	bge	zero,r2,23544 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   234d4:	e0bff717 	ldw	r2,-36(fp)
   234d8:	10bfffc4 	addi	r2,r2,-1
   234dc:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   234e0:	e0ffff17 	ldw	r3,-4(fp)
   234e4:	e0bff817 	ldw	r2,-32(fp)
   234e8:	18800a2e 	bgeu	r3,r2,23514 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   234ec:	e0bffc17 	ldw	r2,-16(fp)
   234f0:	10800104 	addi	r2,r2,4
   234f4:	1009883a 	mov	r4,r2
   234f8:	e0bfff17 	ldw	r2,-4(fp)
   234fc:	10c00044 	addi	r3,r2,1
   23500:	e0ffff15 	stw	r3,-4(fp)
   23504:	10800003 	ldbu	r2,0(r2)
   23508:	10803fcc 	andi	r2,r2,255
   2350c:	20800035 	stwio	r2,0(r4)
   23510:	00000c06 	br	23544 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   23514:	e0bff517 	ldw	r2,-44(fp)
   23518:	10000826 	beq	r2,zero,2353c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   2351c:	e0bff517 	ldw	r2,-44(fp)
   23520:	10bfffc4 	addi	r2,r2,-1
   23524:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   23528:	e0bffc17 	ldw	r2,-16(fp)
   2352c:	10800104 	addi	r2,r2,4
   23530:	0007883a 	mov	r3,zero
   23534:	10c00035 	stwio	r3,0(r2)
   23538:	00000206 	br	23544 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   2353c:	00bf0004 	movi	r2,-1024
   23540:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   23544:	e0bffa17 	ldw	r2,-24(fp)
   23548:	1080200c 	andi	r2,r2,128
   2354c:	103fd026 	beq	r2,zero,23490 <__alt_data_end+0xfc023490>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   23550:	e0bffc17 	ldw	r2,-16(fp)
   23554:	10800037 	ldwio	r2,0(r2)
   23558:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   2355c:	e0bff617 	ldw	r2,-40(fp)
   23560:	10000426 	beq	r2,zero,23574 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   23564:	e0bff617 	ldw	r2,-40(fp)
   23568:	10bfffc4 	addi	r2,r2,-1
   2356c:	e0bff615 	stw	r2,-40(fp)
   23570:	00000506 	br	23588 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   23574:	e0800217 	ldw	r2,8(fp)
   23578:	10c00044 	addi	r3,r2,1
   2357c:	e0c00215 	stw	r3,8(fp)
   23580:	e0fffb17 	ldw	r3,-20(fp)
   23584:	10c00005 	stb	r3,0(r2)
      credits++;
   23588:	e0bff717 	ldw	r2,-36(fp)
   2358c:	10800044 	addi	r2,r2,1
   23590:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   23594:	e0bff617 	ldw	r2,-40(fp)
   23598:	103fbd1e 	bne	r2,zero,23490 <__alt_data_end+0xfc023490>
   2359c:	e0c00217 	ldw	r3,8(fp)
   235a0:	e0bff917 	ldw	r2,-28(fp)
   235a4:	18bfba1e 	bne	r3,r2,23490 <__alt_data_end+0xfc023490>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   235a8:	e0bffc17 	ldw	r2,-16(fp)
   235ac:	10800204 	addi	r2,r2,8
   235b0:	10800037 	ldwio	r2,0(r2)
   235b4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   235b8:	e0bffa17 	ldw	r2,-24(fp)
   235bc:	1080080c 	andi	r2,r2,32
   235c0:	103ff926 	beq	r2,zero,235a8 <__alt_data_end+0xfc0235a8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   235c4:	e0800317 	ldw	r2,12(fp)
   235c8:	1080004c 	andi	r2,r2,1
   235cc:	1000041e 	bne	r2,zero,235e0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   235d0:	e0bffc17 	ldw	r2,-16(fp)
   235d4:	10800304 	addi	r2,r2,12
   235d8:	0007883a 	mov	r3,zero
   235dc:	10c00035 	stwio	r3,0(r2)

  return read_length;
   235e0:	e0800117 	ldw	r2,4(fp)
}
   235e4:	e037883a 	mov	sp,fp
   235e8:	df000017 	ldw	fp,0(sp)
   235ec:	dec00104 	addi	sp,sp,4
   235f0:	f800283a 	ret

000235f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   235f4:	defffa04 	addi	sp,sp,-24
   235f8:	dfc00515 	stw	ra,20(sp)
   235fc:	df000415 	stw	fp,16(sp)
   23600:	df000404 	addi	fp,sp,16
   23604:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   23608:	0007883a 	mov	r3,zero
   2360c:	e0bfff17 	ldw	r2,-4(fp)
   23610:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   23614:	e0bfff17 	ldw	r2,-4(fp)
   23618:	10800104 	addi	r2,r2,4
   2361c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23620:	0005303a 	rdctl	r2,status
   23624:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23628:	e0fffd17 	ldw	r3,-12(fp)
   2362c:	00bfff84 	movi	r2,-2
   23630:	1884703a 	and	r2,r3,r2
   23634:	1001703a 	wrctl	status,r2
  
  return context;
   23638:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2363c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   23640:	00245640 	call	24564 <alt_tick>
   23644:	e0bffc17 	ldw	r2,-16(fp)
   23648:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2364c:	e0bffe17 	ldw	r2,-8(fp)
   23650:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   23654:	0001883a 	nop
   23658:	e037883a 	mov	sp,fp
   2365c:	dfc00117 	ldw	ra,4(sp)
   23660:	df000017 	ldw	fp,0(sp)
   23664:	dec00204 	addi	sp,sp,8
   23668:	f800283a 	ret

0002366c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2366c:	defff804 	addi	sp,sp,-32
   23670:	dfc00715 	stw	ra,28(sp)
   23674:	df000615 	stw	fp,24(sp)
   23678:	df000604 	addi	fp,sp,24
   2367c:	e13ffc15 	stw	r4,-16(fp)
   23680:	e17ffd15 	stw	r5,-12(fp)
   23684:	e1bffe15 	stw	r6,-8(fp)
   23688:	e1ffff15 	stw	r7,-4(fp)
   2368c:	e0bfff17 	ldw	r2,-4(fp)
   23690:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   23694:	d0b25617 	ldw	r2,-13992(gp)
   23698:	1000021e 	bne	r2,zero,236a4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2369c:	e0bffb17 	ldw	r2,-20(fp)
   236a0:	d0b25615 	stw	r2,-13992(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   236a4:	e0bffc17 	ldw	r2,-16(fp)
   236a8:	10800104 	addi	r2,r2,4
   236ac:	00c001c4 	movi	r3,7
   236b0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   236b4:	d8000015 	stw	zero,0(sp)
   236b8:	e1fffc17 	ldw	r7,-16(fp)
   236bc:	018000b4 	movhi	r6,2
   236c0:	318d7d04 	addi	r6,r6,13812
   236c4:	e17ffe17 	ldw	r5,-8(fp)
   236c8:	e13ffd17 	ldw	r4,-12(fp)
   236cc:	0023bdc0 	call	23bdc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   236d0:	0001883a 	nop
   236d4:	e037883a 	mov	sp,fp
   236d8:	dfc00117 	ldw	ra,4(sp)
   236dc:	df000017 	ldw	fp,0(sp)
   236e0:	dec00204 	addi	sp,sp,8
   236e4:	f800283a 	ret

000236e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   236e8:	defff504 	addi	sp,sp,-44
   236ec:	df000a15 	stw	fp,40(sp)
   236f0:	df000a04 	addi	fp,sp,40
   236f4:	e13ffc15 	stw	r4,-16(fp)
   236f8:	e17ffd15 	stw	r5,-12(fp)
   236fc:	e1bffe15 	stw	r6,-8(fp)
   23700:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23704:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23708:	d0b25617 	ldw	r2,-13992(gp)
  
  if (alt_ticks_per_second ())
   2370c:	10003c26 	beq	r2,zero,23800 <alt_alarm_start+0x118>
  {
    if (alarm)
   23710:	e0bffc17 	ldw	r2,-16(fp)
   23714:	10003826 	beq	r2,zero,237f8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   23718:	e0bffc17 	ldw	r2,-16(fp)
   2371c:	e0fffe17 	ldw	r3,-8(fp)
   23720:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   23724:	e0bffc17 	ldw	r2,-16(fp)
   23728:	e0ffff17 	ldw	r3,-4(fp)
   2372c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23730:	0005303a 	rdctl	r2,status
   23734:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23738:	e0fff917 	ldw	r3,-28(fp)
   2373c:	00bfff84 	movi	r2,-2
   23740:	1884703a 	and	r2,r3,r2
   23744:	1001703a 	wrctl	status,r2
  
  return context;
   23748:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2374c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   23750:	d0b25717 	ldw	r2,-13988(gp)
      
      current_nticks = alt_nticks();
   23754:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   23758:	e0fffd17 	ldw	r3,-12(fp)
   2375c:	e0bff617 	ldw	r2,-40(fp)
   23760:	1885883a 	add	r2,r3,r2
   23764:	10c00044 	addi	r3,r2,1
   23768:	e0bffc17 	ldw	r2,-16(fp)
   2376c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   23770:	e0bffc17 	ldw	r2,-16(fp)
   23774:	10c00217 	ldw	r3,8(r2)
   23778:	e0bff617 	ldw	r2,-40(fp)
   2377c:	1880042e 	bgeu	r3,r2,23790 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   23780:	e0bffc17 	ldw	r2,-16(fp)
   23784:	00c00044 	movi	r3,1
   23788:	10c00405 	stb	r3,16(r2)
   2378c:	00000206 	br	23798 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   23790:	e0bffc17 	ldw	r2,-16(fp)
   23794:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23798:	e0bffc17 	ldw	r2,-16(fp)
   2379c:	d0e5c204 	addi	r3,gp,-26872
   237a0:	e0fffa15 	stw	r3,-24(fp)
   237a4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   237a8:	e0bffb17 	ldw	r2,-20(fp)
   237ac:	e0fffa17 	ldw	r3,-24(fp)
   237b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   237b4:	e0bffa17 	ldw	r2,-24(fp)
   237b8:	10c00017 	ldw	r3,0(r2)
   237bc:	e0bffb17 	ldw	r2,-20(fp)
   237c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   237c4:	e0bffa17 	ldw	r2,-24(fp)
   237c8:	10800017 	ldw	r2,0(r2)
   237cc:	e0fffb17 	ldw	r3,-20(fp)
   237d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   237d4:	e0bffa17 	ldw	r2,-24(fp)
   237d8:	e0fffb17 	ldw	r3,-20(fp)
   237dc:	10c00015 	stw	r3,0(r2)
   237e0:	e0bff817 	ldw	r2,-32(fp)
   237e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   237e8:	e0bff717 	ldw	r2,-36(fp)
   237ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   237f0:	0005883a 	mov	r2,zero
   237f4:	00000306 	br	23804 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   237f8:	00bffa84 	movi	r2,-22
   237fc:	00000106 	br	23804 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   23800:	00bfde84 	movi	r2,-134
  }
}
   23804:	e037883a 	mov	sp,fp
   23808:	df000017 	ldw	fp,0(sp)
   2380c:	dec00104 	addi	sp,sp,4
   23810:	f800283a 	ret

00023814 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   23814:	defffa04 	addi	sp,sp,-24
   23818:	dfc00515 	stw	ra,20(sp)
   2381c:	df000415 	stw	fp,16(sp)
   23820:	df000404 	addi	fp,sp,16
   23824:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   23828:	00800244 	movi	r2,9
   2382c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   23830:	014003f4 	movhi	r5,15
   23834:	29509004 	addi	r5,r5,16960
   23838:	e13ffd17 	ldw	r4,-12(fp)
   2383c:	000d9380 	call	d938 <__mulsi3>
   23840:	100b883a 	mov	r5,r2
   23844:	01017db4 	movhi	r4,1526
   23848:	21384004 	addi	r4,r4,-7936
   2384c:	000d87c0 	call	d87c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   23850:	100b883a 	mov	r5,r2
   23854:	01200034 	movhi	r4,32768
   23858:	213fffc4 	addi	r4,r4,-1
   2385c:	000d87c0 	call	d87c <__udivsi3>
   23860:	100b883a 	mov	r5,r2
   23864:	e13fff17 	ldw	r4,-4(fp)
   23868:	000d87c0 	call	d87c <__udivsi3>
   2386c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   23870:	e0bffe17 	ldw	r2,-8(fp)
   23874:	10002a26 	beq	r2,zero,23920 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   23878:	e03ffc15 	stw	zero,-16(fp)
   2387c:	00001706 	br	238dc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   23880:	00a00034 	movhi	r2,32768
   23884:	10bfffc4 	addi	r2,r2,-1
   23888:	10bfffc4 	addi	r2,r2,-1
   2388c:	103ffe1e 	bne	r2,zero,23888 <__alt_data_end+0xfc023888>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   23890:	014003f4 	movhi	r5,15
   23894:	29509004 	addi	r5,r5,16960
   23898:	e13ffd17 	ldw	r4,-12(fp)
   2389c:	000d9380 	call	d938 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   238a0:	100b883a 	mov	r5,r2
   238a4:	01017db4 	movhi	r4,1526
   238a8:	21384004 	addi	r4,r4,-7936
   238ac:	000d87c0 	call	d87c <__udivsi3>
   238b0:	100b883a 	mov	r5,r2
   238b4:	01200034 	movhi	r4,32768
   238b8:	213fffc4 	addi	r4,r4,-1
   238bc:	000d87c0 	call	d87c <__udivsi3>
   238c0:	1007883a 	mov	r3,r2
   238c4:	e0bfff17 	ldw	r2,-4(fp)
   238c8:	10c5c83a 	sub	r2,r2,r3
   238cc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   238d0:	e0bffc17 	ldw	r2,-16(fp)
   238d4:	10800044 	addi	r2,r2,1
   238d8:	e0bffc15 	stw	r2,-16(fp)
   238dc:	e0fffc17 	ldw	r3,-16(fp)
   238e0:	e0bffe17 	ldw	r2,-8(fp)
   238e4:	18bfe616 	blt	r3,r2,23880 <__alt_data_end+0xfc023880>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   238e8:	014003f4 	movhi	r5,15
   238ec:	29509004 	addi	r5,r5,16960
   238f0:	e13ffd17 	ldw	r4,-12(fp)
   238f4:	000d9380 	call	d938 <__mulsi3>
   238f8:	100b883a 	mov	r5,r2
   238fc:	01017db4 	movhi	r4,1526
   23900:	21384004 	addi	r4,r4,-7936
   23904:	000d87c0 	call	d87c <__udivsi3>
   23908:	e17fff17 	ldw	r5,-4(fp)
   2390c:	1009883a 	mov	r4,r2
   23910:	000d9380 	call	d938 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   23914:	10bfffc4 	addi	r2,r2,-1
   23918:	103ffe1e 	bne	r2,zero,23914 <__alt_data_end+0xfc023914>
   2391c:	00000d06 	br	23954 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23920:	014003f4 	movhi	r5,15
   23924:	29509004 	addi	r5,r5,16960
   23928:	e13ffd17 	ldw	r4,-12(fp)
   2392c:	000d9380 	call	d938 <__mulsi3>
   23930:	100b883a 	mov	r5,r2
   23934:	01017db4 	movhi	r4,1526
   23938:	21384004 	addi	r4,r4,-7936
   2393c:	000d87c0 	call	d87c <__udivsi3>
   23940:	e17fff17 	ldw	r5,-4(fp)
   23944:	1009883a 	mov	r4,r2
   23948:	000d9380 	call	d938 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2394c:	10bfffc4 	addi	r2,r2,-1
   23950:	00bffe16 	blt	zero,r2,2394c <__alt_data_end+0xfc02394c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   23954:	0005883a 	mov	r2,zero
}
   23958:	e037883a 	mov	sp,fp
   2395c:	dfc00117 	ldw	ra,4(sp)
   23960:	df000017 	ldw	fp,0(sp)
   23964:	dec00204 	addi	sp,sp,8
   23968:	f800283a 	ret

0002396c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2396c:	deffff04 	addi	sp,sp,-4
   23970:	df000015 	stw	fp,0(sp)
   23974:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23978:	0001883a 	nop
   2397c:	e037883a 	mov	sp,fp
   23980:	df000017 	ldw	fp,0(sp)
   23984:	dec00104 	addi	sp,sp,4
   23988:	f800283a 	ret

0002398c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2398c:	defffe04 	addi	sp,sp,-8
   23990:	dfc00115 	stw	ra,4(sp)
   23994:	df000015 	stw	fp,0(sp)
   23998:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2399c:	d0a5bd17 	ldw	r2,-26892(gp)
   239a0:	10000326 	beq	r2,zero,239b0 <alt_get_errno+0x24>
   239a4:	d0a5bd17 	ldw	r2,-26892(gp)
   239a8:	103ee83a 	callr	r2
   239ac:	00000106 	br	239b4 <alt_get_errno+0x28>
   239b0:	d0b24e04 	addi	r2,gp,-14024
}
   239b4:	e037883a 	mov	sp,fp
   239b8:	dfc00117 	ldw	ra,4(sp)
   239bc:	df000017 	ldw	fp,0(sp)
   239c0:	dec00204 	addi	sp,sp,8
   239c4:	f800283a 	ret

000239c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   239c8:	defffa04 	addi	sp,sp,-24
   239cc:	dfc00515 	stw	ra,20(sp)
   239d0:	df000415 	stw	fp,16(sp)
   239d4:	df000404 	addi	fp,sp,16
   239d8:	e13ffe15 	stw	r4,-8(fp)
   239dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   239e0:	e0bffe17 	ldw	r2,-8(fp)
   239e4:	10000326 	beq	r2,zero,239f4 <alt_dev_llist_insert+0x2c>
   239e8:	e0bffe17 	ldw	r2,-8(fp)
   239ec:	10800217 	ldw	r2,8(r2)
   239f0:	1000061e 	bne	r2,zero,23a0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   239f4:	002398c0 	call	2398c <alt_get_errno>
   239f8:	1007883a 	mov	r3,r2
   239fc:	00800584 	movi	r2,22
   23a00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23a04:	00bffa84 	movi	r2,-22
   23a08:	00001306 	br	23a58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23a0c:	e0bffe17 	ldw	r2,-8(fp)
   23a10:	e0ffff17 	ldw	r3,-4(fp)
   23a14:	e0fffc15 	stw	r3,-16(fp)
   23a18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23a1c:	e0bffd17 	ldw	r2,-12(fp)
   23a20:	e0fffc17 	ldw	r3,-16(fp)
   23a24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23a28:	e0bffc17 	ldw	r2,-16(fp)
   23a2c:	10c00017 	ldw	r3,0(r2)
   23a30:	e0bffd17 	ldw	r2,-12(fp)
   23a34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23a38:	e0bffc17 	ldw	r2,-16(fp)
   23a3c:	10800017 	ldw	r2,0(r2)
   23a40:	e0fffd17 	ldw	r3,-12(fp)
   23a44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23a48:	e0bffc17 	ldw	r2,-16(fp)
   23a4c:	e0fffd17 	ldw	r3,-12(fp)
   23a50:	10c00015 	stw	r3,0(r2)

  return 0;  
   23a54:	0005883a 	mov	r2,zero
}
   23a58:	e037883a 	mov	sp,fp
   23a5c:	dfc00117 	ldw	ra,4(sp)
   23a60:	df000017 	ldw	fp,0(sp)
   23a64:	dec00204 	addi	sp,sp,8
   23a68:	f800283a 	ret

00023a6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23a6c:	defffd04 	addi	sp,sp,-12
   23a70:	dfc00215 	stw	ra,8(sp)
   23a74:	df000115 	stw	fp,4(sp)
   23a78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23a7c:	008000b4 	movhi	r2,2
   23a80:	10932504 	addi	r2,r2,19604
   23a84:	e0bfff15 	stw	r2,-4(fp)
   23a88:	00000606 	br	23aa4 <_do_ctors+0x38>
        (*ctor) (); 
   23a8c:	e0bfff17 	ldw	r2,-4(fp)
   23a90:	10800017 	ldw	r2,0(r2)
   23a94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23a98:	e0bfff17 	ldw	r2,-4(fp)
   23a9c:	10bfff04 	addi	r2,r2,-4
   23aa0:	e0bfff15 	stw	r2,-4(fp)
   23aa4:	e0ffff17 	ldw	r3,-4(fp)
   23aa8:	008000b4 	movhi	r2,2
   23aac:	10932404 	addi	r2,r2,19600
   23ab0:	18bff62e 	bgeu	r3,r2,23a8c <__alt_data_end+0xfc023a8c>
        (*ctor) (); 
}
   23ab4:	0001883a 	nop
   23ab8:	e037883a 	mov	sp,fp
   23abc:	dfc00117 	ldw	ra,4(sp)
   23ac0:	df000017 	ldw	fp,0(sp)
   23ac4:	dec00204 	addi	sp,sp,8
   23ac8:	f800283a 	ret

00023acc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23acc:	defffd04 	addi	sp,sp,-12
   23ad0:	dfc00215 	stw	ra,8(sp)
   23ad4:	df000115 	stw	fp,4(sp)
   23ad8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23adc:	008000b4 	movhi	r2,2
   23ae0:	10932504 	addi	r2,r2,19604
   23ae4:	e0bfff15 	stw	r2,-4(fp)
   23ae8:	00000606 	br	23b04 <_do_dtors+0x38>
        (*dtor) (); 
   23aec:	e0bfff17 	ldw	r2,-4(fp)
   23af0:	10800017 	ldw	r2,0(r2)
   23af4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23af8:	e0bfff17 	ldw	r2,-4(fp)
   23afc:	10bfff04 	addi	r2,r2,-4
   23b00:	e0bfff15 	stw	r2,-4(fp)
   23b04:	e0ffff17 	ldw	r3,-4(fp)
   23b08:	008000b4 	movhi	r2,2
   23b0c:	10932604 	addi	r2,r2,19608
   23b10:	18bff62e 	bgeu	r3,r2,23aec <__alt_data_end+0xfc023aec>
        (*dtor) (); 
}
   23b14:	0001883a 	nop
   23b18:	e037883a 	mov	sp,fp
   23b1c:	dfc00117 	ldw	ra,4(sp)
   23b20:	df000017 	ldw	fp,0(sp)
   23b24:	dec00204 	addi	sp,sp,8
   23b28:	f800283a 	ret

00023b2c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   23b2c:	defffa04 	addi	sp,sp,-24
   23b30:	dfc00515 	stw	ra,20(sp)
   23b34:	df000415 	stw	fp,16(sp)
   23b38:	df000404 	addi	fp,sp,16
   23b3c:	e13ffe15 	stw	r4,-8(fp)
   23b40:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   23b44:	e0bfff17 	ldw	r2,-4(fp)
   23b48:	10800017 	ldw	r2,0(r2)
   23b4c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   23b50:	e13ffe17 	ldw	r4,-8(fp)
   23b54:	00106b00 	call	106b0 <strlen>
   23b58:	10800044 	addi	r2,r2,1
   23b5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23b60:	00000d06 	br	23b98 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   23b64:	e0bffc17 	ldw	r2,-16(fp)
   23b68:	10800217 	ldw	r2,8(r2)
   23b6c:	e0fffd17 	ldw	r3,-12(fp)
   23b70:	180d883a 	mov	r6,r3
   23b74:	e17ffe17 	ldw	r5,-8(fp)
   23b78:	1009883a 	mov	r4,r2
   23b7c:	00249440 	call	24944 <memcmp>
   23b80:	1000021e 	bne	r2,zero,23b8c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   23b84:	e0bffc17 	ldw	r2,-16(fp)
   23b88:	00000706 	br	23ba8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   23b8c:	e0bffc17 	ldw	r2,-16(fp)
   23b90:	10800017 	ldw	r2,0(r2)
   23b94:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23b98:	e0fffc17 	ldw	r3,-16(fp)
   23b9c:	e0bfff17 	ldw	r2,-4(fp)
   23ba0:	18bff01e 	bne	r3,r2,23b64 <__alt_data_end+0xfc023b64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   23ba4:	0005883a 	mov	r2,zero
}
   23ba8:	e037883a 	mov	sp,fp
   23bac:	dfc00117 	ldw	ra,4(sp)
   23bb0:	df000017 	ldw	fp,0(sp)
   23bb4:	dec00204 	addi	sp,sp,8
   23bb8:	f800283a 	ret

00023bbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23bbc:	deffff04 	addi	sp,sp,-4
   23bc0:	df000015 	stw	fp,0(sp)
   23bc4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23bc8:	0001883a 	nop
   23bcc:	e037883a 	mov	sp,fp
   23bd0:	df000017 	ldw	fp,0(sp)
   23bd4:	dec00104 	addi	sp,sp,4
   23bd8:	f800283a 	ret

00023bdc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23bdc:	defff904 	addi	sp,sp,-28
   23be0:	dfc00615 	stw	ra,24(sp)
   23be4:	df000515 	stw	fp,20(sp)
   23be8:	df000504 	addi	fp,sp,20
   23bec:	e13ffc15 	stw	r4,-16(fp)
   23bf0:	e17ffd15 	stw	r5,-12(fp)
   23bf4:	e1bffe15 	stw	r6,-8(fp)
   23bf8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   23bfc:	e0800217 	ldw	r2,8(fp)
   23c00:	d8800015 	stw	r2,0(sp)
   23c04:	e1ffff17 	ldw	r7,-4(fp)
   23c08:	e1bffe17 	ldw	r6,-8(fp)
   23c0c:	e17ffd17 	ldw	r5,-12(fp)
   23c10:	e13ffc17 	ldw	r4,-16(fp)
   23c14:	0023d8c0 	call	23d8c <alt_iic_isr_register>
}  
   23c18:	e037883a 	mov	sp,fp
   23c1c:	dfc00117 	ldw	ra,4(sp)
   23c20:	df000017 	ldw	fp,0(sp)
   23c24:	dec00204 	addi	sp,sp,8
   23c28:	f800283a 	ret

00023c2c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   23c2c:	defff904 	addi	sp,sp,-28
   23c30:	df000615 	stw	fp,24(sp)
   23c34:	df000604 	addi	fp,sp,24
   23c38:	e13ffe15 	stw	r4,-8(fp)
   23c3c:	e17fff15 	stw	r5,-4(fp)
   23c40:	e0bfff17 	ldw	r2,-4(fp)
   23c44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23c48:	0005303a 	rdctl	r2,status
   23c4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23c50:	e0fffb17 	ldw	r3,-20(fp)
   23c54:	00bfff84 	movi	r2,-2
   23c58:	1884703a 	and	r2,r3,r2
   23c5c:	1001703a 	wrctl	status,r2
  
  return context;
   23c60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23c64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   23c68:	00c00044 	movi	r3,1
   23c6c:	e0bffa17 	ldw	r2,-24(fp)
   23c70:	1884983a 	sll	r2,r3,r2
   23c74:	1007883a 	mov	r3,r2
   23c78:	d0b25517 	ldw	r2,-13996(gp)
   23c7c:	1884b03a 	or	r2,r3,r2
   23c80:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23c84:	d0b25517 	ldw	r2,-13996(gp)
   23c88:	100170fa 	wrctl	ienable,r2
   23c8c:	e0bffc17 	ldw	r2,-16(fp)
   23c90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23c94:	e0bffd17 	ldw	r2,-12(fp)
   23c98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23c9c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   23ca0:	0001883a 	nop
}
   23ca4:	e037883a 	mov	sp,fp
   23ca8:	df000017 	ldw	fp,0(sp)
   23cac:	dec00104 	addi	sp,sp,4
   23cb0:	f800283a 	ret

00023cb4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   23cb4:	defff904 	addi	sp,sp,-28
   23cb8:	df000615 	stw	fp,24(sp)
   23cbc:	df000604 	addi	fp,sp,24
   23cc0:	e13ffe15 	stw	r4,-8(fp)
   23cc4:	e17fff15 	stw	r5,-4(fp)
   23cc8:	e0bfff17 	ldw	r2,-4(fp)
   23ccc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23cd0:	0005303a 	rdctl	r2,status
   23cd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23cd8:	e0fffb17 	ldw	r3,-20(fp)
   23cdc:	00bfff84 	movi	r2,-2
   23ce0:	1884703a 	and	r2,r3,r2
   23ce4:	1001703a 	wrctl	status,r2
  
  return context;
   23ce8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23cec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   23cf0:	00c00044 	movi	r3,1
   23cf4:	e0bffa17 	ldw	r2,-24(fp)
   23cf8:	1884983a 	sll	r2,r3,r2
   23cfc:	0084303a 	nor	r2,zero,r2
   23d00:	1007883a 	mov	r3,r2
   23d04:	d0b25517 	ldw	r2,-13996(gp)
   23d08:	1884703a 	and	r2,r3,r2
   23d0c:	d0b25515 	stw	r2,-13996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23d10:	d0b25517 	ldw	r2,-13996(gp)
   23d14:	100170fa 	wrctl	ienable,r2
   23d18:	e0bffc17 	ldw	r2,-16(fp)
   23d1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23d20:	e0bffd17 	ldw	r2,-12(fp)
   23d24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23d28:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   23d2c:	0001883a 	nop
}
   23d30:	e037883a 	mov	sp,fp
   23d34:	df000017 	ldw	fp,0(sp)
   23d38:	dec00104 	addi	sp,sp,4
   23d3c:	f800283a 	ret

00023d40 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   23d40:	defffc04 	addi	sp,sp,-16
   23d44:	df000315 	stw	fp,12(sp)
   23d48:	df000304 	addi	fp,sp,12
   23d4c:	e13ffe15 	stw	r4,-8(fp)
   23d50:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   23d54:	000530fa 	rdctl	r2,ienable
   23d58:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   23d5c:	00c00044 	movi	r3,1
   23d60:	e0bfff17 	ldw	r2,-4(fp)
   23d64:	1884983a 	sll	r2,r3,r2
   23d68:	1007883a 	mov	r3,r2
   23d6c:	e0bffd17 	ldw	r2,-12(fp)
   23d70:	1884703a 	and	r2,r3,r2
   23d74:	1004c03a 	cmpne	r2,r2,zero
   23d78:	10803fcc 	andi	r2,r2,255
}
   23d7c:	e037883a 	mov	sp,fp
   23d80:	df000017 	ldw	fp,0(sp)
   23d84:	dec00104 	addi	sp,sp,4
   23d88:	f800283a 	ret

00023d8c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23d8c:	defff504 	addi	sp,sp,-44
   23d90:	dfc00a15 	stw	ra,40(sp)
   23d94:	df000915 	stw	fp,36(sp)
   23d98:	df000904 	addi	fp,sp,36
   23d9c:	e13ffc15 	stw	r4,-16(fp)
   23da0:	e17ffd15 	stw	r5,-12(fp)
   23da4:	e1bffe15 	stw	r6,-8(fp)
   23da8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   23dac:	00bffa84 	movi	r2,-22
   23db0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   23db4:	e0bffd17 	ldw	r2,-12(fp)
   23db8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23dbc:	e0bff817 	ldw	r2,-32(fp)
   23dc0:	10800808 	cmpgei	r2,r2,32
   23dc4:	1000271e 	bne	r2,zero,23e64 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23dc8:	0005303a 	rdctl	r2,status
   23dcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23dd0:	e0fffb17 	ldw	r3,-20(fp)
   23dd4:	00bfff84 	movi	r2,-2
   23dd8:	1884703a 	and	r2,r3,r2
   23ddc:	1001703a 	wrctl	status,r2
  
  return context;
   23de0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   23de4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   23de8:	008000f4 	movhi	r2,3
   23dec:	1088b704 	addi	r2,r2,8924
   23df0:	e0fff817 	ldw	r3,-32(fp)
   23df4:	180690fa 	slli	r3,r3,3
   23df8:	10c5883a 	add	r2,r2,r3
   23dfc:	e0fffe17 	ldw	r3,-8(fp)
   23e00:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   23e04:	008000f4 	movhi	r2,3
   23e08:	1088b704 	addi	r2,r2,8924
   23e0c:	e0fff817 	ldw	r3,-32(fp)
   23e10:	180690fa 	slli	r3,r3,3
   23e14:	10c5883a 	add	r2,r2,r3
   23e18:	10800104 	addi	r2,r2,4
   23e1c:	e0ffff17 	ldw	r3,-4(fp)
   23e20:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   23e24:	e0bffe17 	ldw	r2,-8(fp)
   23e28:	10000526 	beq	r2,zero,23e40 <alt_iic_isr_register+0xb4>
   23e2c:	e0bff817 	ldw	r2,-32(fp)
   23e30:	100b883a 	mov	r5,r2
   23e34:	e13ffc17 	ldw	r4,-16(fp)
   23e38:	0023c2c0 	call	23c2c <alt_ic_irq_enable>
   23e3c:	00000406 	br	23e50 <alt_iic_isr_register+0xc4>
   23e40:	e0bff817 	ldw	r2,-32(fp)
   23e44:	100b883a 	mov	r5,r2
   23e48:	e13ffc17 	ldw	r4,-16(fp)
   23e4c:	0023cb40 	call	23cb4 <alt_ic_irq_disable>
   23e50:	e0bff715 	stw	r2,-36(fp)
   23e54:	e0bffa17 	ldw	r2,-24(fp)
   23e58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23e5c:	e0bff917 	ldw	r2,-28(fp)
   23e60:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   23e64:	e0bff717 	ldw	r2,-36(fp)
}
   23e68:	e037883a 	mov	sp,fp
   23e6c:	dfc00117 	ldw	ra,4(sp)
   23e70:	df000017 	ldw	fp,0(sp)
   23e74:	dec00204 	addi	sp,sp,8
   23e78:	f800283a 	ret

00023e7c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23e7c:	defff804 	addi	sp,sp,-32
   23e80:	dfc00715 	stw	ra,28(sp)
   23e84:	df000615 	stw	fp,24(sp)
   23e88:	dc000515 	stw	r16,20(sp)
   23e8c:	df000604 	addi	fp,sp,24
   23e90:	e13ffb15 	stw	r4,-20(fp)
   23e94:	e17ffc15 	stw	r5,-16(fp)
   23e98:	e1bffd15 	stw	r6,-12(fp)
   23e9c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23ea0:	e1bffe17 	ldw	r6,-8(fp)
   23ea4:	e17ffd17 	ldw	r5,-12(fp)
   23ea8:	e13ffc17 	ldw	r4,-16(fp)
   23eac:	00241040 	call	24104 <open>
   23eb0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23eb4:	e0bffa17 	ldw	r2,-24(fp)
   23eb8:	10002216 	blt	r2,zero,23f44 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23ebc:	040000f4 	movhi	r16,3
   23ec0:	84318204 	addi	r16,r16,-14840
   23ec4:	e0bffa17 	ldw	r2,-24(fp)
   23ec8:	01400304 	movi	r5,12
   23ecc:	1009883a 	mov	r4,r2
   23ed0:	000d9380 	call	d938 <__mulsi3>
   23ed4:	8085883a 	add	r2,r16,r2
   23ed8:	10c00017 	ldw	r3,0(r2)
   23edc:	e0bffb17 	ldw	r2,-20(fp)
   23ee0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23ee4:	040000f4 	movhi	r16,3
   23ee8:	84318204 	addi	r16,r16,-14840
   23eec:	e0bffa17 	ldw	r2,-24(fp)
   23ef0:	01400304 	movi	r5,12
   23ef4:	1009883a 	mov	r4,r2
   23ef8:	000d9380 	call	d938 <__mulsi3>
   23efc:	8085883a 	add	r2,r16,r2
   23f00:	10800104 	addi	r2,r2,4
   23f04:	10c00017 	ldw	r3,0(r2)
   23f08:	e0bffb17 	ldw	r2,-20(fp)
   23f0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23f10:	040000f4 	movhi	r16,3
   23f14:	84318204 	addi	r16,r16,-14840
   23f18:	e0bffa17 	ldw	r2,-24(fp)
   23f1c:	01400304 	movi	r5,12
   23f20:	1009883a 	mov	r4,r2
   23f24:	000d9380 	call	d938 <__mulsi3>
   23f28:	8085883a 	add	r2,r16,r2
   23f2c:	10800204 	addi	r2,r2,8
   23f30:	10c00017 	ldw	r3,0(r2)
   23f34:	e0bffb17 	ldw	r2,-20(fp)
   23f38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23f3c:	e13ffa17 	ldw	r4,-24(fp)
   23f40:	00209440 	call	20944 <alt_release_fd>
  }
} 
   23f44:	0001883a 	nop
   23f48:	e6ffff04 	addi	sp,fp,-4
   23f4c:	dfc00217 	ldw	ra,8(sp)
   23f50:	df000117 	ldw	fp,4(sp)
   23f54:	dc000017 	ldw	r16,0(sp)
   23f58:	dec00304 	addi	sp,sp,12
   23f5c:	f800283a 	ret

00023f60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23f60:	defffb04 	addi	sp,sp,-20
   23f64:	dfc00415 	stw	ra,16(sp)
   23f68:	df000315 	stw	fp,12(sp)
   23f6c:	df000304 	addi	fp,sp,12
   23f70:	e13ffd15 	stw	r4,-12(fp)
   23f74:	e17ffe15 	stw	r5,-8(fp)
   23f78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23f7c:	01c07fc4 	movi	r7,511
   23f80:	01800044 	movi	r6,1
   23f84:	e17ffd17 	ldw	r5,-12(fp)
   23f88:	010000f4 	movhi	r4,3
   23f8c:	21318504 	addi	r4,r4,-14828
   23f90:	0023e7c0 	call	23e7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23f94:	01c07fc4 	movi	r7,511
   23f98:	000d883a 	mov	r6,zero
   23f9c:	e17ffe17 	ldw	r5,-8(fp)
   23fa0:	010000f4 	movhi	r4,3
   23fa4:	21318204 	addi	r4,r4,-14840
   23fa8:	0023e7c0 	call	23e7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23fac:	01c07fc4 	movi	r7,511
   23fb0:	01800044 	movi	r6,1
   23fb4:	e17fff17 	ldw	r5,-4(fp)
   23fb8:	010000f4 	movhi	r4,3
   23fbc:	21318804 	addi	r4,r4,-14816
   23fc0:	0023e7c0 	call	23e7c <alt_open_fd>
}  
   23fc4:	0001883a 	nop
   23fc8:	e037883a 	mov	sp,fp
   23fcc:	dfc00117 	ldw	ra,4(sp)
   23fd0:	df000017 	ldw	fp,0(sp)
   23fd4:	dec00204 	addi	sp,sp,8
   23fd8:	f800283a 	ret

00023fdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23fdc:	defffe04 	addi	sp,sp,-8
   23fe0:	dfc00115 	stw	ra,4(sp)
   23fe4:	df000015 	stw	fp,0(sp)
   23fe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23fec:	d0a5bd17 	ldw	r2,-26892(gp)
   23ff0:	10000326 	beq	r2,zero,24000 <alt_get_errno+0x24>
   23ff4:	d0a5bd17 	ldw	r2,-26892(gp)
   23ff8:	103ee83a 	callr	r2
   23ffc:	00000106 	br	24004 <alt_get_errno+0x28>
   24000:	d0b24e04 	addi	r2,gp,-14024
}
   24004:	e037883a 	mov	sp,fp
   24008:	dfc00117 	ldw	ra,4(sp)
   2400c:	df000017 	ldw	fp,0(sp)
   24010:	dec00204 	addi	sp,sp,8
   24014:	f800283a 	ret

00024018 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24018:	defffb04 	addi	sp,sp,-20
   2401c:	dfc00415 	stw	ra,16(sp)
   24020:	df000315 	stw	fp,12(sp)
   24024:	dc000215 	stw	r16,8(sp)
   24028:	df000304 	addi	fp,sp,12
   2402c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24030:	e0bffe17 	ldw	r2,-8(fp)
   24034:	10800217 	ldw	r2,8(r2)
   24038:	10d00034 	orhi	r3,r2,16384
   2403c:	e0bffe17 	ldw	r2,-8(fp)
   24040:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24044:	e03ffd15 	stw	zero,-12(fp)
   24048:	00002306 	br	240d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2404c:	040000f4 	movhi	r16,3
   24050:	84318204 	addi	r16,r16,-14840
   24054:	e0bffd17 	ldw	r2,-12(fp)
   24058:	01400304 	movi	r5,12
   2405c:	1009883a 	mov	r4,r2
   24060:	000d9380 	call	d938 <__mulsi3>
   24064:	8085883a 	add	r2,r16,r2
   24068:	10c00017 	ldw	r3,0(r2)
   2406c:	e0bffe17 	ldw	r2,-8(fp)
   24070:	10800017 	ldw	r2,0(r2)
   24074:	1880151e 	bne	r3,r2,240cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24078:	040000f4 	movhi	r16,3
   2407c:	84318204 	addi	r16,r16,-14840
   24080:	e0bffd17 	ldw	r2,-12(fp)
   24084:	01400304 	movi	r5,12
   24088:	1009883a 	mov	r4,r2
   2408c:	000d9380 	call	d938 <__mulsi3>
   24090:	8085883a 	add	r2,r16,r2
   24094:	10800204 	addi	r2,r2,8
   24098:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2409c:	10000b0e 	bge	r2,zero,240cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   240a0:	01400304 	movi	r5,12
   240a4:	e13ffd17 	ldw	r4,-12(fp)
   240a8:	000d9380 	call	d938 <__mulsi3>
   240ac:	1007883a 	mov	r3,r2
   240b0:	008000f4 	movhi	r2,3
   240b4:	10b18204 	addi	r2,r2,-14840
   240b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   240bc:	e0bffe17 	ldw	r2,-8(fp)
   240c0:	18800226 	beq	r3,r2,240cc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   240c4:	00bffcc4 	movi	r2,-13
   240c8:	00000806 	br	240ec <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   240cc:	e0bffd17 	ldw	r2,-12(fp)
   240d0:	10800044 	addi	r2,r2,1
   240d4:	e0bffd15 	stw	r2,-12(fp)
   240d8:	d0a5bc17 	ldw	r2,-26896(gp)
   240dc:	1007883a 	mov	r3,r2
   240e0:	e0bffd17 	ldw	r2,-12(fp)
   240e4:	18bfd92e 	bgeu	r3,r2,2404c <__alt_data_end+0xfc02404c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   240e8:	0005883a 	mov	r2,zero
}
   240ec:	e6ffff04 	addi	sp,fp,-4
   240f0:	dfc00217 	ldw	ra,8(sp)
   240f4:	df000117 	ldw	fp,4(sp)
   240f8:	dc000017 	ldw	r16,0(sp)
   240fc:	dec00304 	addi	sp,sp,12
   24100:	f800283a 	ret

00024104 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24104:	defff604 	addi	sp,sp,-40
   24108:	dfc00915 	stw	ra,36(sp)
   2410c:	df000815 	stw	fp,32(sp)
   24110:	df000804 	addi	fp,sp,32
   24114:	e13ffd15 	stw	r4,-12(fp)
   24118:	e17ffe15 	stw	r5,-8(fp)
   2411c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24120:	00bfffc4 	movi	r2,-1
   24124:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24128:	00bffb44 	movi	r2,-19
   2412c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24130:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24134:	d165ba04 	addi	r5,gp,-26904
   24138:	e13ffd17 	ldw	r4,-12(fp)
   2413c:	0023b2c0 	call	23b2c <alt_find_dev>
   24140:	e0bff815 	stw	r2,-32(fp)
   24144:	e0bff817 	ldw	r2,-32(fp)
   24148:	1000051e 	bne	r2,zero,24160 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2414c:	e13ffd17 	ldw	r4,-12(fp)
   24150:	00246900 	call	24690 <alt_find_file>
   24154:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24158:	00800044 	movi	r2,1
   2415c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24160:	e0bff817 	ldw	r2,-32(fp)
   24164:	10002b26 	beq	r2,zero,24214 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24168:	e13ff817 	ldw	r4,-32(fp)
   2416c:	00247980 	call	24798 <alt_get_fd>
   24170:	e0bff915 	stw	r2,-28(fp)
   24174:	e0bff917 	ldw	r2,-28(fp)
   24178:	1000030e 	bge	r2,zero,24188 <open+0x84>
    {
      status = index;
   2417c:	e0bff917 	ldw	r2,-28(fp)
   24180:	e0bffa15 	stw	r2,-24(fp)
   24184:	00002506 	br	2421c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   24188:	01400304 	movi	r5,12
   2418c:	e13ff917 	ldw	r4,-28(fp)
   24190:	000d9380 	call	d938 <__mulsi3>
   24194:	1007883a 	mov	r3,r2
   24198:	008000f4 	movhi	r2,3
   2419c:	10b18204 	addi	r2,r2,-14840
   241a0:	1885883a 	add	r2,r3,r2
   241a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   241a8:	e0fffe17 	ldw	r3,-8(fp)
   241ac:	00900034 	movhi	r2,16384
   241b0:	10bfffc4 	addi	r2,r2,-1
   241b4:	1886703a 	and	r3,r3,r2
   241b8:	e0bffc17 	ldw	r2,-16(fp)
   241bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   241c0:	e0bffb17 	ldw	r2,-20(fp)
   241c4:	1000051e 	bne	r2,zero,241dc <open+0xd8>
   241c8:	e13ffc17 	ldw	r4,-16(fp)
   241cc:	00240180 	call	24018 <alt_file_locked>
   241d0:	e0bffa15 	stw	r2,-24(fp)
   241d4:	e0bffa17 	ldw	r2,-24(fp)
   241d8:	10001016 	blt	r2,zero,2421c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   241dc:	e0bff817 	ldw	r2,-32(fp)
   241e0:	10800317 	ldw	r2,12(r2)
   241e4:	10000826 	beq	r2,zero,24208 <open+0x104>
   241e8:	e0bff817 	ldw	r2,-32(fp)
   241ec:	10800317 	ldw	r2,12(r2)
   241f0:	e1ffff17 	ldw	r7,-4(fp)
   241f4:	e1bffe17 	ldw	r6,-8(fp)
   241f8:	e17ffd17 	ldw	r5,-12(fp)
   241fc:	e13ffc17 	ldw	r4,-16(fp)
   24200:	103ee83a 	callr	r2
   24204:	00000106 	br	2420c <open+0x108>
   24208:	0005883a 	mov	r2,zero
   2420c:	e0bffa15 	stw	r2,-24(fp)
   24210:	00000206 	br	2421c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24214:	00bffb44 	movi	r2,-19
   24218:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2421c:	e0bffa17 	ldw	r2,-24(fp)
   24220:	1000090e 	bge	r2,zero,24248 <open+0x144>
  {
    alt_release_fd (index);  
   24224:	e13ff917 	ldw	r4,-28(fp)
   24228:	00209440 	call	20944 <alt_release_fd>
    ALT_ERRNO = -status;
   2422c:	0023fdc0 	call	23fdc <alt_get_errno>
   24230:	1007883a 	mov	r3,r2
   24234:	e0bffa17 	ldw	r2,-24(fp)
   24238:	0085c83a 	sub	r2,zero,r2
   2423c:	18800015 	stw	r2,0(r3)
    return -1;
   24240:	00bfffc4 	movi	r2,-1
   24244:	00000106 	br	2424c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   24248:	e0bff917 	ldw	r2,-28(fp)
}
   2424c:	e037883a 	mov	sp,fp
   24250:	dfc00117 	ldw	ra,4(sp)
   24254:	df000017 	ldw	fp,0(sp)
   24258:	dec00204 	addi	sp,sp,8
   2425c:	f800283a 	ret

00024260 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   24260:	defff204 	addi	sp,sp,-56
   24264:	dfc00a15 	stw	ra,40(sp)
   24268:	df000915 	stw	fp,36(sp)
   2426c:	df000904 	addi	fp,sp,36
   24270:	e13fff15 	stw	r4,-4(fp)
   24274:	e1400215 	stw	r5,8(fp)
   24278:	e1800315 	stw	r6,12(fp)
   2427c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   24280:	e0800204 	addi	r2,fp,8
   24284:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   24288:	e0bfff17 	ldw	r2,-4(fp)
   2428c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   24290:	00006f06 	br	24450 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   24294:	e0bff807 	ldb	r2,-32(fp)
   24298:	10800960 	cmpeqi	r2,r2,37
   2429c:	1000041e 	bne	r2,zero,242b0 <alt_printf+0x50>
        {
            alt_putchar(c);
   242a0:	e0bff807 	ldb	r2,-32(fp)
   242a4:	1009883a 	mov	r4,r2
   242a8:	002448c0 	call	2448c <alt_putchar>
   242ac:	00006806 	br	24450 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   242b0:	e0bff717 	ldw	r2,-36(fp)
   242b4:	10c00044 	addi	r3,r2,1
   242b8:	e0fff715 	stw	r3,-36(fp)
   242bc:	10800003 	ldbu	r2,0(r2)
   242c0:	e0bff805 	stb	r2,-32(fp)
   242c4:	e0bff807 	ldb	r2,-32(fp)
   242c8:	10006926 	beq	r2,zero,24470 <alt_printf+0x210>
            {
                if (c == '%')
   242cc:	e0bff807 	ldb	r2,-32(fp)
   242d0:	10800958 	cmpnei	r2,r2,37
   242d4:	1000041e 	bne	r2,zero,242e8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   242d8:	e0bff807 	ldb	r2,-32(fp)
   242dc:	1009883a 	mov	r4,r2
   242e0:	002448c0 	call	2448c <alt_putchar>
   242e4:	00005a06 	br	24450 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   242e8:	e0bff807 	ldb	r2,-32(fp)
   242ec:	108018d8 	cmpnei	r2,r2,99
   242f0:	1000081e 	bne	r2,zero,24314 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   242f4:	e0bffe17 	ldw	r2,-8(fp)
   242f8:	10c00104 	addi	r3,r2,4
   242fc:	e0fffe15 	stw	r3,-8(fp)
   24300:	10800017 	ldw	r2,0(r2)
   24304:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   24308:	e13ffd17 	ldw	r4,-12(fp)
   2430c:	002448c0 	call	2448c <alt_putchar>
   24310:	00004f06 	br	24450 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   24314:	e0bff807 	ldb	r2,-32(fp)
   24318:	10801e18 	cmpnei	r2,r2,120
   2431c:	1000341e 	bne	r2,zero,243f0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   24320:	e0bffe17 	ldw	r2,-8(fp)
   24324:	10c00104 	addi	r3,r2,4
   24328:	e0fffe15 	stw	r3,-8(fp)
   2432c:	10800017 	ldw	r2,0(r2)
   24330:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   24334:	e0bffb17 	ldw	r2,-20(fp)
   24338:	1000031e 	bne	r2,zero,24348 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   2433c:	01000c04 	movi	r4,48
   24340:	002448c0 	call	2448c <alt_putchar>
                        continue;
   24344:	00004206 	br	24450 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   24348:	00800704 	movi	r2,28
   2434c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   24350:	00000306 	br	24360 <alt_printf+0x100>
                        digit_shift -= 4;
   24354:	e0bff917 	ldw	r2,-28(fp)
   24358:	10bfff04 	addi	r2,r2,-4
   2435c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   24360:	00c003c4 	movi	r3,15
   24364:	e0bff917 	ldw	r2,-28(fp)
   24368:	1884983a 	sll	r2,r3,r2
   2436c:	1007883a 	mov	r3,r2
   24370:	e0bffb17 	ldw	r2,-20(fp)
   24374:	1884703a 	and	r2,r3,r2
   24378:	103ff626 	beq	r2,zero,24354 <__alt_data_end+0xfc024354>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2437c:	00001906 	br	243e4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   24380:	00c003c4 	movi	r3,15
   24384:	e0bff917 	ldw	r2,-28(fp)
   24388:	1884983a 	sll	r2,r3,r2
   2438c:	1007883a 	mov	r3,r2
   24390:	e0bffb17 	ldw	r2,-20(fp)
   24394:	1886703a 	and	r3,r3,r2
   24398:	e0bff917 	ldw	r2,-28(fp)
   2439c:	1884d83a 	srl	r2,r3,r2
   243a0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   243a4:	e0bffc17 	ldw	r2,-16(fp)
   243a8:	108002a8 	cmpgeui	r2,r2,10
   243ac:	1000041e 	bne	r2,zero,243c0 <alt_printf+0x160>
                            c = '0' + digit;
   243b0:	e0bffc17 	ldw	r2,-16(fp)
   243b4:	10800c04 	addi	r2,r2,48
   243b8:	e0bff805 	stb	r2,-32(fp)
   243bc:	00000306 	br	243cc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   243c0:	e0bffc17 	ldw	r2,-16(fp)
   243c4:	108015c4 	addi	r2,r2,87
   243c8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   243cc:	e0bff807 	ldb	r2,-32(fp)
   243d0:	1009883a 	mov	r4,r2
   243d4:	002448c0 	call	2448c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   243d8:	e0bff917 	ldw	r2,-28(fp)
   243dc:	10bfff04 	addi	r2,r2,-4
   243e0:	e0bff915 	stw	r2,-28(fp)
   243e4:	e0bff917 	ldw	r2,-28(fp)
   243e8:	103fe50e 	bge	r2,zero,24380 <__alt_data_end+0xfc024380>
   243ec:	00001806 	br	24450 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   243f0:	e0bff807 	ldb	r2,-32(fp)
   243f4:	10801cd8 	cmpnei	r2,r2,115
   243f8:	1000151e 	bne	r2,zero,24450 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   243fc:	e0bffe17 	ldw	r2,-8(fp)
   24400:	10c00104 	addi	r3,r2,4
   24404:	e0fffe15 	stw	r3,-8(fp)
   24408:	10800017 	ldw	r2,0(r2)
   2440c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   24410:	00000906 	br	24438 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   24414:	e0bffa17 	ldw	r2,-24(fp)
   24418:	10c00044 	addi	r3,r2,1
   2441c:	e0fffa15 	stw	r3,-24(fp)
   24420:	10800003 	ldbu	r2,0(r2)
   24424:	10803fcc 	andi	r2,r2,255
   24428:	1080201c 	xori	r2,r2,128
   2442c:	10bfe004 	addi	r2,r2,-128
   24430:	1009883a 	mov	r4,r2
   24434:	002448c0 	call	2448c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   24438:	e0bffa17 	ldw	r2,-24(fp)
   2443c:	10800003 	ldbu	r2,0(r2)
   24440:	10803fcc 	andi	r2,r2,255
   24444:	1080201c 	xori	r2,r2,128
   24448:	10bfe004 	addi	r2,r2,-128
   2444c:	103ff11e 	bne	r2,zero,24414 <__alt_data_end+0xfc024414>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   24450:	e0bff717 	ldw	r2,-36(fp)
   24454:	10c00044 	addi	r3,r2,1
   24458:	e0fff715 	stw	r3,-36(fp)
   2445c:	10800003 	ldbu	r2,0(r2)
   24460:	e0bff805 	stb	r2,-32(fp)
   24464:	e0bff807 	ldb	r2,-32(fp)
   24468:	103f8a1e 	bne	r2,zero,24294 <__alt_data_end+0xfc024294>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2446c:	00000106 	br	24474 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   24470:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   24474:	0001883a 	nop
   24478:	e037883a 	mov	sp,fp
   2447c:	dfc00117 	ldw	ra,4(sp)
   24480:	df000017 	ldw	fp,0(sp)
   24484:	dec00504 	addi	sp,sp,20
   24488:	f800283a 	ret

0002448c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   2448c:	defffd04 	addi	sp,sp,-12
   24490:	dfc00215 	stw	ra,8(sp)
   24494:	df000115 	stw	fp,4(sp)
   24498:	df000104 	addi	fp,sp,4
   2449c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   244a0:	d0a5b317 	ldw	r2,-26932(gp)
   244a4:	10800217 	ldw	r2,8(r2)
   244a8:	100b883a 	mov	r5,r2
   244ac:	e13fff17 	ldw	r4,-4(fp)
   244b0:	0018ed00 	call	18ed0 <putc>
#endif
#endif
}
   244b4:	e037883a 	mov	sp,fp
   244b8:	dfc00117 	ldw	ra,4(sp)
   244bc:	df000017 	ldw	fp,0(sp)
   244c0:	dec00204 	addi	sp,sp,8
   244c4:	f800283a 	ret

000244c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   244c8:	defffa04 	addi	sp,sp,-24
   244cc:	df000515 	stw	fp,20(sp)
   244d0:	df000504 	addi	fp,sp,20
   244d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   244d8:	0005303a 	rdctl	r2,status
   244dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244e0:	e0fffc17 	ldw	r3,-16(fp)
   244e4:	00bfff84 	movi	r2,-2
   244e8:	1884703a 	and	r2,r3,r2
   244ec:	1001703a 	wrctl	status,r2
  
  return context;
   244f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   244f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   244f8:	e0bfff17 	ldw	r2,-4(fp)
   244fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24500:	e0bffd17 	ldw	r2,-12(fp)
   24504:	10800017 	ldw	r2,0(r2)
   24508:	e0fffd17 	ldw	r3,-12(fp)
   2450c:	18c00117 	ldw	r3,4(r3)
   24510:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24514:	e0bffd17 	ldw	r2,-12(fp)
   24518:	10800117 	ldw	r2,4(r2)
   2451c:	e0fffd17 	ldw	r3,-12(fp)
   24520:	18c00017 	ldw	r3,0(r3)
   24524:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24528:	e0bffd17 	ldw	r2,-12(fp)
   2452c:	e0fffd17 	ldw	r3,-12(fp)
   24530:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24534:	e0bffd17 	ldw	r2,-12(fp)
   24538:	e0fffd17 	ldw	r3,-12(fp)
   2453c:	10c00015 	stw	r3,0(r2)
   24540:	e0bffb17 	ldw	r2,-20(fp)
   24544:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24548:	e0bffe17 	ldw	r2,-8(fp)
   2454c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24550:	0001883a 	nop
   24554:	e037883a 	mov	sp,fp
   24558:	df000017 	ldw	fp,0(sp)
   2455c:	dec00104 	addi	sp,sp,4
   24560:	f800283a 	ret

00024564 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24564:	defffb04 	addi	sp,sp,-20
   24568:	dfc00415 	stw	ra,16(sp)
   2456c:	df000315 	stw	fp,12(sp)
   24570:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24574:	d0a5c217 	ldw	r2,-26872(gp)
   24578:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2457c:	d0b25717 	ldw	r2,-13988(gp)
   24580:	10800044 	addi	r2,r2,1
   24584:	d0b25715 	stw	r2,-13988(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24588:	00002e06 	br	24644 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2458c:	e0bffd17 	ldw	r2,-12(fp)
   24590:	10800017 	ldw	r2,0(r2)
   24594:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24598:	e0bffd17 	ldw	r2,-12(fp)
   2459c:	10800403 	ldbu	r2,16(r2)
   245a0:	10803fcc 	andi	r2,r2,255
   245a4:	10000426 	beq	r2,zero,245b8 <alt_tick+0x54>
   245a8:	d0b25717 	ldw	r2,-13988(gp)
   245ac:	1000021e 	bne	r2,zero,245b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   245b0:	e0bffd17 	ldw	r2,-12(fp)
   245b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   245b8:	e0bffd17 	ldw	r2,-12(fp)
   245bc:	10800217 	ldw	r2,8(r2)
   245c0:	d0f25717 	ldw	r3,-13988(gp)
   245c4:	18801d36 	bltu	r3,r2,2463c <alt_tick+0xd8>
   245c8:	e0bffd17 	ldw	r2,-12(fp)
   245cc:	10800403 	ldbu	r2,16(r2)
   245d0:	10803fcc 	andi	r2,r2,255
   245d4:	1000191e 	bne	r2,zero,2463c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   245d8:	e0bffd17 	ldw	r2,-12(fp)
   245dc:	10800317 	ldw	r2,12(r2)
   245e0:	e0fffd17 	ldw	r3,-12(fp)
   245e4:	18c00517 	ldw	r3,20(r3)
   245e8:	1809883a 	mov	r4,r3
   245ec:	103ee83a 	callr	r2
   245f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   245f4:	e0bfff17 	ldw	r2,-4(fp)
   245f8:	1000031e 	bne	r2,zero,24608 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   245fc:	e13ffd17 	ldw	r4,-12(fp)
   24600:	00244c80 	call	244c8 <alt_alarm_stop>
   24604:	00000d06 	br	2463c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24608:	e0bffd17 	ldw	r2,-12(fp)
   2460c:	10c00217 	ldw	r3,8(r2)
   24610:	e0bfff17 	ldw	r2,-4(fp)
   24614:	1887883a 	add	r3,r3,r2
   24618:	e0bffd17 	ldw	r2,-12(fp)
   2461c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24620:	e0bffd17 	ldw	r2,-12(fp)
   24624:	10c00217 	ldw	r3,8(r2)
   24628:	d0b25717 	ldw	r2,-13988(gp)
   2462c:	1880032e 	bgeu	r3,r2,2463c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24630:	e0bffd17 	ldw	r2,-12(fp)
   24634:	00c00044 	movi	r3,1
   24638:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2463c:	e0bffe17 	ldw	r2,-8(fp)
   24640:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24644:	e0fffd17 	ldw	r3,-12(fp)
   24648:	d0a5c204 	addi	r2,gp,-26872
   2464c:	18bfcf1e 	bne	r3,r2,2458c <__alt_data_end+0xfc02458c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24650:	0001883a 	nop
}
   24654:	0001883a 	nop
   24658:	e037883a 	mov	sp,fp
   2465c:	dfc00117 	ldw	ra,4(sp)
   24660:	df000017 	ldw	fp,0(sp)
   24664:	dec00204 	addi	sp,sp,8
   24668:	f800283a 	ret

0002466c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2466c:	deffff04 	addi	sp,sp,-4
   24670:	df000015 	stw	fp,0(sp)
   24674:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24678:	000170fa 	wrctl	ienable,zero
}
   2467c:	0001883a 	nop
   24680:	e037883a 	mov	sp,fp
   24684:	df000017 	ldw	fp,0(sp)
   24688:	dec00104 	addi	sp,sp,4
   2468c:	f800283a 	ret

00024690 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24690:	defffb04 	addi	sp,sp,-20
   24694:	dfc00415 	stw	ra,16(sp)
   24698:	df000315 	stw	fp,12(sp)
   2469c:	df000304 	addi	fp,sp,12
   246a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   246a4:	d0a5b817 	ldw	r2,-26912(gp)
   246a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   246ac:	00003106 	br	24774 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   246b0:	e0bffd17 	ldw	r2,-12(fp)
   246b4:	10800217 	ldw	r2,8(r2)
   246b8:	1009883a 	mov	r4,r2
   246bc:	00106b00 	call	106b0 <strlen>
   246c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   246c4:	e0bffd17 	ldw	r2,-12(fp)
   246c8:	10c00217 	ldw	r3,8(r2)
   246cc:	e0bffe17 	ldw	r2,-8(fp)
   246d0:	10bfffc4 	addi	r2,r2,-1
   246d4:	1885883a 	add	r2,r3,r2
   246d8:	10800003 	ldbu	r2,0(r2)
   246dc:	10803fcc 	andi	r2,r2,255
   246e0:	1080201c 	xori	r2,r2,128
   246e4:	10bfe004 	addi	r2,r2,-128
   246e8:	10800bd8 	cmpnei	r2,r2,47
   246ec:	1000031e 	bne	r2,zero,246fc <alt_find_file+0x6c>
    {
      len -= 1;
   246f0:	e0bffe17 	ldw	r2,-8(fp)
   246f4:	10bfffc4 	addi	r2,r2,-1
   246f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   246fc:	e0bffe17 	ldw	r2,-8(fp)
   24700:	e0ffff17 	ldw	r3,-4(fp)
   24704:	1885883a 	add	r2,r3,r2
   24708:	10800003 	ldbu	r2,0(r2)
   2470c:	10803fcc 	andi	r2,r2,255
   24710:	1080201c 	xori	r2,r2,128
   24714:	10bfe004 	addi	r2,r2,-128
   24718:	10800be0 	cmpeqi	r2,r2,47
   2471c:	1000081e 	bne	r2,zero,24740 <alt_find_file+0xb0>
   24720:	e0bffe17 	ldw	r2,-8(fp)
   24724:	e0ffff17 	ldw	r3,-4(fp)
   24728:	1885883a 	add	r2,r3,r2
   2472c:	10800003 	ldbu	r2,0(r2)
   24730:	10803fcc 	andi	r2,r2,255
   24734:	1080201c 	xori	r2,r2,128
   24738:	10bfe004 	addi	r2,r2,-128
   2473c:	10000a1e 	bne	r2,zero,24768 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24740:	e0bffd17 	ldw	r2,-12(fp)
   24744:	10800217 	ldw	r2,8(r2)
   24748:	e0fffe17 	ldw	r3,-8(fp)
   2474c:	180d883a 	mov	r6,r3
   24750:	e17fff17 	ldw	r5,-4(fp)
   24754:	1009883a 	mov	r4,r2
   24758:	00249440 	call	24944 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2475c:	1000021e 	bne	r2,zero,24768 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24760:	e0bffd17 	ldw	r2,-12(fp)
   24764:	00000706 	br	24784 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24768:	e0bffd17 	ldw	r2,-12(fp)
   2476c:	10800017 	ldw	r2,0(r2)
   24770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24774:	e0fffd17 	ldw	r3,-12(fp)
   24778:	d0a5b804 	addi	r2,gp,-26912
   2477c:	18bfcc1e 	bne	r3,r2,246b0 <__alt_data_end+0xfc0246b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24780:	0005883a 	mov	r2,zero
}
   24784:	e037883a 	mov	sp,fp
   24788:	dfc00117 	ldw	ra,4(sp)
   2478c:	df000017 	ldw	fp,0(sp)
   24790:	dec00204 	addi	sp,sp,8
   24794:	f800283a 	ret

00024798 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24798:	defffa04 	addi	sp,sp,-24
   2479c:	dfc00515 	stw	ra,20(sp)
   247a0:	df000415 	stw	fp,16(sp)
   247a4:	dc000315 	stw	r16,12(sp)
   247a8:	df000404 	addi	fp,sp,16
   247ac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   247b0:	00bffa04 	movi	r2,-24
   247b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   247b8:	e03ffc15 	stw	zero,-16(fp)
   247bc:	00001d06 	br	24834 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   247c0:	040000f4 	movhi	r16,3
   247c4:	84318204 	addi	r16,r16,-14840
   247c8:	e0bffc17 	ldw	r2,-16(fp)
   247cc:	01400304 	movi	r5,12
   247d0:	1009883a 	mov	r4,r2
   247d4:	000d9380 	call	d938 <__mulsi3>
   247d8:	8085883a 	add	r2,r16,r2
   247dc:	10800017 	ldw	r2,0(r2)
   247e0:	1000111e 	bne	r2,zero,24828 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   247e4:	040000f4 	movhi	r16,3
   247e8:	84318204 	addi	r16,r16,-14840
   247ec:	e0bffc17 	ldw	r2,-16(fp)
   247f0:	01400304 	movi	r5,12
   247f4:	1009883a 	mov	r4,r2
   247f8:	000d9380 	call	d938 <__mulsi3>
   247fc:	8085883a 	add	r2,r16,r2
   24800:	e0fffe17 	ldw	r3,-8(fp)
   24804:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24808:	d0e5bc17 	ldw	r3,-26896(gp)
   2480c:	e0bffc17 	ldw	r2,-16(fp)
   24810:	1880020e 	bge	r3,r2,2481c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   24814:	e0bffc17 	ldw	r2,-16(fp)
   24818:	d0a5bc15 	stw	r2,-26896(gp)
      }
      rc = i;
   2481c:	e0bffc17 	ldw	r2,-16(fp)
   24820:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   24824:	00000606 	br	24840 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24828:	e0bffc17 	ldw	r2,-16(fp)
   2482c:	10800044 	addi	r2,r2,1
   24830:	e0bffc15 	stw	r2,-16(fp)
   24834:	e0bffc17 	ldw	r2,-16(fp)
   24838:	10800810 	cmplti	r2,r2,32
   2483c:	103fe01e 	bne	r2,zero,247c0 <__alt_data_end+0xfc0247c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24840:	e0bffd17 	ldw	r2,-12(fp)
}
   24844:	e6ffff04 	addi	sp,fp,-4
   24848:	dfc00217 	ldw	ra,8(sp)
   2484c:	df000117 	ldw	fp,4(sp)
   24850:	dc000017 	ldw	r16,0(sp)
   24854:	dec00304 	addi	sp,sp,12
   24858:	f800283a 	ret

0002485c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2485c:	defffe04 	addi	sp,sp,-8
   24860:	df000115 	stw	fp,4(sp)
   24864:	df000104 	addi	fp,sp,4
   24868:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2486c:	e0bfff17 	ldw	r2,-4(fp)
   24870:	10bffe84 	addi	r2,r2,-6
   24874:	10c00428 	cmpgeui	r3,r2,16
   24878:	18001a1e 	bne	r3,zero,248e4 <alt_exception_cause_generated_bad_addr+0x88>
   2487c:	100690ba 	slli	r3,r2,2
   24880:	008000b4 	movhi	r2,2
   24884:	10922504 	addi	r2,r2,18580
   24888:	1885883a 	add	r2,r3,r2
   2488c:	10800017 	ldw	r2,0(r2)
   24890:	1000683a 	jmp	r2
   24894:	000248d4 	movui	zero,2339
   24898:	000248d4 	movui	zero,2339
   2489c:	000248e4 	muli	zero,zero,2339
   248a0:	000248e4 	muli	zero,zero,2339
   248a4:	000248e4 	muli	zero,zero,2339
   248a8:	000248d4 	movui	zero,2339
   248ac:	000248dc 	xori	zero,zero,2339
   248b0:	000248e4 	muli	zero,zero,2339
   248b4:	000248d4 	movui	zero,2339
   248b8:	000248d4 	movui	zero,2339
   248bc:	000248e4 	muli	zero,zero,2339
   248c0:	000248d4 	movui	zero,2339
   248c4:	000248dc 	xori	zero,zero,2339
   248c8:	000248e4 	muli	zero,zero,2339
   248cc:	000248e4 	muli	zero,zero,2339
   248d0:	000248d4 	movui	zero,2339
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   248d4:	00800044 	movi	r2,1
   248d8:	00000306 	br	248e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   248dc:	0005883a 	mov	r2,zero
   248e0:	00000106 	br	248e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   248e4:	0005883a 	mov	r2,zero
  }
}
   248e8:	e037883a 	mov	sp,fp
   248ec:	df000017 	ldw	fp,0(sp)
   248f0:	dec00104 	addi	sp,sp,4
   248f4:	f800283a 	ret

000248f8 <atexit>:
   248f8:	200b883a 	mov	r5,r4
   248fc:	000f883a 	mov	r7,zero
   24900:	000d883a 	mov	r6,zero
   24904:	0009883a 	mov	r4,zero
   24908:	00249c01 	jmpi	249c0 <__register_exitproc>

0002490c <exit>:
   2490c:	defffe04 	addi	sp,sp,-8
   24910:	000b883a 	mov	r5,zero
   24914:	dc000015 	stw	r16,0(sp)
   24918:	dfc00115 	stw	ra,4(sp)
   2491c:	2021883a 	mov	r16,r4
   24920:	0024ad80 	call	24ad8 <__call_exitprocs>
   24924:	008000f4 	movhi	r2,3
   24928:	10bbba04 	addi	r2,r2,-4376
   2492c:	11000017 	ldw	r4,0(r2)
   24930:	20800f17 	ldw	r2,60(r4)
   24934:	10000126 	beq	r2,zero,2493c <exit+0x30>
   24938:	103ee83a 	callr	r2
   2493c:	8009883a 	mov	r4,r16
   24940:	00201a00 	call	201a0 <_exit>

00024944 <memcmp>:
   24944:	01c000c4 	movi	r7,3
   24948:	3980192e 	bgeu	r7,r6,249b0 <memcmp+0x6c>
   2494c:	2144b03a 	or	r2,r4,r5
   24950:	11c4703a 	and	r2,r2,r7
   24954:	10000f26 	beq	r2,zero,24994 <memcmp+0x50>
   24958:	20800003 	ldbu	r2,0(r4)
   2495c:	28c00003 	ldbu	r3,0(r5)
   24960:	10c0151e 	bne	r2,r3,249b8 <memcmp+0x74>
   24964:	31bfff84 	addi	r6,r6,-2
   24968:	01ffffc4 	movi	r7,-1
   2496c:	00000406 	br	24980 <memcmp+0x3c>
   24970:	20800003 	ldbu	r2,0(r4)
   24974:	28c00003 	ldbu	r3,0(r5)
   24978:	31bfffc4 	addi	r6,r6,-1
   2497c:	10c00e1e 	bne	r2,r3,249b8 <memcmp+0x74>
   24980:	21000044 	addi	r4,r4,1
   24984:	29400044 	addi	r5,r5,1
   24988:	31fff91e 	bne	r6,r7,24970 <__alt_data_end+0xfc024970>
   2498c:	0005883a 	mov	r2,zero
   24990:	f800283a 	ret
   24994:	20c00017 	ldw	r3,0(r4)
   24998:	28800017 	ldw	r2,0(r5)
   2499c:	18bfee1e 	bne	r3,r2,24958 <__alt_data_end+0xfc024958>
   249a0:	31bfff04 	addi	r6,r6,-4
   249a4:	21000104 	addi	r4,r4,4
   249a8:	29400104 	addi	r5,r5,4
   249ac:	39bff936 	bltu	r7,r6,24994 <__alt_data_end+0xfc024994>
   249b0:	303fe91e 	bne	r6,zero,24958 <__alt_data_end+0xfc024958>
   249b4:	003ff506 	br	2498c <__alt_data_end+0xfc02498c>
   249b8:	10c5c83a 	sub	r2,r2,r3
   249bc:	f800283a 	ret

000249c0 <__register_exitproc>:
   249c0:	defffa04 	addi	sp,sp,-24
   249c4:	dc000315 	stw	r16,12(sp)
   249c8:	040000f4 	movhi	r16,3
   249cc:	843bba04 	addi	r16,r16,-4376
   249d0:	80c00017 	ldw	r3,0(r16)
   249d4:	dc400415 	stw	r17,16(sp)
   249d8:	dfc00515 	stw	ra,20(sp)
   249dc:	18805217 	ldw	r2,328(r3)
   249e0:	2023883a 	mov	r17,r4
   249e4:	10003726 	beq	r2,zero,24ac4 <__register_exitproc+0x104>
   249e8:	10c00117 	ldw	r3,4(r2)
   249ec:	010007c4 	movi	r4,31
   249f0:	20c00e16 	blt	r4,r3,24a2c <__register_exitproc+0x6c>
   249f4:	1a000044 	addi	r8,r3,1
   249f8:	8800221e 	bne	r17,zero,24a84 <__register_exitproc+0xc4>
   249fc:	18c00084 	addi	r3,r3,2
   24a00:	18c7883a 	add	r3,r3,r3
   24a04:	18c7883a 	add	r3,r3,r3
   24a08:	12000115 	stw	r8,4(r2)
   24a0c:	10c7883a 	add	r3,r2,r3
   24a10:	19400015 	stw	r5,0(r3)
   24a14:	0005883a 	mov	r2,zero
   24a18:	dfc00517 	ldw	ra,20(sp)
   24a1c:	dc400417 	ldw	r17,16(sp)
   24a20:	dc000317 	ldw	r16,12(sp)
   24a24:	dec00604 	addi	sp,sp,24
   24a28:	f800283a 	ret
   24a2c:	00800074 	movhi	r2,1
   24a30:	10bd6d04 	addi	r2,r2,-2636
   24a34:	10002626 	beq	r2,zero,24ad0 <__register_exitproc+0x110>
   24a38:	01006404 	movi	r4,400
   24a3c:	d9400015 	stw	r5,0(sp)
   24a40:	d9800115 	stw	r6,4(sp)
   24a44:	d9c00215 	stw	r7,8(sp)
   24a48:	000f5b40 	call	f5b4 <malloc>
   24a4c:	d9400017 	ldw	r5,0(sp)
   24a50:	d9800117 	ldw	r6,4(sp)
   24a54:	d9c00217 	ldw	r7,8(sp)
   24a58:	10001d26 	beq	r2,zero,24ad0 <__register_exitproc+0x110>
   24a5c:	81000017 	ldw	r4,0(r16)
   24a60:	10000115 	stw	zero,4(r2)
   24a64:	02000044 	movi	r8,1
   24a68:	22405217 	ldw	r9,328(r4)
   24a6c:	0007883a 	mov	r3,zero
   24a70:	12400015 	stw	r9,0(r2)
   24a74:	20805215 	stw	r2,328(r4)
   24a78:	10006215 	stw	zero,392(r2)
   24a7c:	10006315 	stw	zero,396(r2)
   24a80:	883fde26 	beq	r17,zero,249fc <__alt_data_end+0xfc0249fc>
   24a84:	18c9883a 	add	r4,r3,r3
   24a88:	2109883a 	add	r4,r4,r4
   24a8c:	1109883a 	add	r4,r2,r4
   24a90:	21802215 	stw	r6,136(r4)
   24a94:	01800044 	movi	r6,1
   24a98:	12406217 	ldw	r9,392(r2)
   24a9c:	30cc983a 	sll	r6,r6,r3
   24aa0:	4992b03a 	or	r9,r9,r6
   24aa4:	12406215 	stw	r9,392(r2)
   24aa8:	21c04215 	stw	r7,264(r4)
   24aac:	01000084 	movi	r4,2
   24ab0:	893fd21e 	bne	r17,r4,249fc <__alt_data_end+0xfc0249fc>
   24ab4:	11006317 	ldw	r4,396(r2)
   24ab8:	218cb03a 	or	r6,r4,r6
   24abc:	11806315 	stw	r6,396(r2)
   24ac0:	003fce06 	br	249fc <__alt_data_end+0xfc0249fc>
   24ac4:	18805304 	addi	r2,r3,332
   24ac8:	18805215 	stw	r2,328(r3)
   24acc:	003fc606 	br	249e8 <__alt_data_end+0xfc0249e8>
   24ad0:	00bfffc4 	movi	r2,-1
   24ad4:	003fd006 	br	24a18 <__alt_data_end+0xfc024a18>

00024ad8 <__call_exitprocs>:
   24ad8:	defff504 	addi	sp,sp,-44
   24adc:	df000915 	stw	fp,36(sp)
   24ae0:	dd400615 	stw	r21,24(sp)
   24ae4:	dc800315 	stw	r18,12(sp)
   24ae8:	dfc00a15 	stw	ra,40(sp)
   24aec:	ddc00815 	stw	r23,32(sp)
   24af0:	dd800715 	stw	r22,28(sp)
   24af4:	dd000515 	stw	r20,20(sp)
   24af8:	dcc00415 	stw	r19,16(sp)
   24afc:	dc400215 	stw	r17,8(sp)
   24b00:	dc000115 	stw	r16,4(sp)
   24b04:	d9000015 	stw	r4,0(sp)
   24b08:	2839883a 	mov	fp,r5
   24b0c:	04800044 	movi	r18,1
   24b10:	057fffc4 	movi	r21,-1
   24b14:	008000f4 	movhi	r2,3
   24b18:	10bbba04 	addi	r2,r2,-4376
   24b1c:	12000017 	ldw	r8,0(r2)
   24b20:	45005217 	ldw	r20,328(r8)
   24b24:	44c05204 	addi	r19,r8,328
   24b28:	a0001c26 	beq	r20,zero,24b9c <__call_exitprocs+0xc4>
   24b2c:	a0800117 	ldw	r2,4(r20)
   24b30:	15ffffc4 	addi	r23,r2,-1
   24b34:	b8000d16 	blt	r23,zero,24b6c <__call_exitprocs+0x94>
   24b38:	14000044 	addi	r16,r2,1
   24b3c:	8421883a 	add	r16,r16,r16
   24b40:	8421883a 	add	r16,r16,r16
   24b44:	84402004 	addi	r17,r16,128
   24b48:	a463883a 	add	r17,r20,r17
   24b4c:	a421883a 	add	r16,r20,r16
   24b50:	e0001e26 	beq	fp,zero,24bcc <__call_exitprocs+0xf4>
   24b54:	80804017 	ldw	r2,256(r16)
   24b58:	e0801c26 	beq	fp,r2,24bcc <__call_exitprocs+0xf4>
   24b5c:	bdffffc4 	addi	r23,r23,-1
   24b60:	843fff04 	addi	r16,r16,-4
   24b64:	8c7fff04 	addi	r17,r17,-4
   24b68:	bd7ff91e 	bne	r23,r21,24b50 <__alt_data_end+0xfc024b50>
   24b6c:	00800074 	movhi	r2,1
   24b70:	10bd7204 	addi	r2,r2,-2616
   24b74:	10000926 	beq	r2,zero,24b9c <__call_exitprocs+0xc4>
   24b78:	a0800117 	ldw	r2,4(r20)
   24b7c:	1000301e 	bne	r2,zero,24c40 <__call_exitprocs+0x168>
   24b80:	a0800017 	ldw	r2,0(r20)
   24b84:	10003226 	beq	r2,zero,24c50 <__call_exitprocs+0x178>
   24b88:	a009883a 	mov	r4,r20
   24b8c:	98800015 	stw	r2,0(r19)
   24b90:	000f5c80 	call	f5c8 <free>
   24b94:	9d000017 	ldw	r20,0(r19)
   24b98:	a03fe41e 	bne	r20,zero,24b2c <__alt_data_end+0xfc024b2c>
   24b9c:	dfc00a17 	ldw	ra,40(sp)
   24ba0:	df000917 	ldw	fp,36(sp)
   24ba4:	ddc00817 	ldw	r23,32(sp)
   24ba8:	dd800717 	ldw	r22,28(sp)
   24bac:	dd400617 	ldw	r21,24(sp)
   24bb0:	dd000517 	ldw	r20,20(sp)
   24bb4:	dcc00417 	ldw	r19,16(sp)
   24bb8:	dc800317 	ldw	r18,12(sp)
   24bbc:	dc400217 	ldw	r17,8(sp)
   24bc0:	dc000117 	ldw	r16,4(sp)
   24bc4:	dec00b04 	addi	sp,sp,44
   24bc8:	f800283a 	ret
   24bcc:	a0800117 	ldw	r2,4(r20)
   24bd0:	80c00017 	ldw	r3,0(r16)
   24bd4:	10bfffc4 	addi	r2,r2,-1
   24bd8:	15c01426 	beq	r2,r23,24c2c <__call_exitprocs+0x154>
   24bdc:	80000015 	stw	zero,0(r16)
   24be0:	183fde26 	beq	r3,zero,24b5c <__alt_data_end+0xfc024b5c>
   24be4:	95c8983a 	sll	r4,r18,r23
   24be8:	a0806217 	ldw	r2,392(r20)
   24bec:	a5800117 	ldw	r22,4(r20)
   24bf0:	2084703a 	and	r2,r4,r2
   24bf4:	10000b26 	beq	r2,zero,24c24 <__call_exitprocs+0x14c>
   24bf8:	a0806317 	ldw	r2,396(r20)
   24bfc:	2088703a 	and	r4,r4,r2
   24c00:	20000c1e 	bne	r4,zero,24c34 <__call_exitprocs+0x15c>
   24c04:	89400017 	ldw	r5,0(r17)
   24c08:	d9000017 	ldw	r4,0(sp)
   24c0c:	183ee83a 	callr	r3
   24c10:	a0800117 	ldw	r2,4(r20)
   24c14:	15bfbf1e 	bne	r2,r22,24b14 <__alt_data_end+0xfc024b14>
   24c18:	98800017 	ldw	r2,0(r19)
   24c1c:	153fcf26 	beq	r2,r20,24b5c <__alt_data_end+0xfc024b5c>
   24c20:	003fbc06 	br	24b14 <__alt_data_end+0xfc024b14>
   24c24:	183ee83a 	callr	r3
   24c28:	003ff906 	br	24c10 <__alt_data_end+0xfc024c10>
   24c2c:	a5c00115 	stw	r23,4(r20)
   24c30:	003feb06 	br	24be0 <__alt_data_end+0xfc024be0>
   24c34:	89000017 	ldw	r4,0(r17)
   24c38:	183ee83a 	callr	r3
   24c3c:	003ff406 	br	24c10 <__alt_data_end+0xfc024c10>
   24c40:	a0800017 	ldw	r2,0(r20)
   24c44:	a027883a 	mov	r19,r20
   24c48:	1029883a 	mov	r20,r2
   24c4c:	003fb606 	br	24b28 <__alt_data_end+0xfc024b28>
   24c50:	0005883a 	mov	r2,zero
   24c54:	003ffb06 	br	24c44 <__alt_data_end+0xfc024c44>
   24c58:	01110bff 	0x1110bff
   24c5c:	01010004 	movi	r4,1024
   24c60:	7f000105 	stb	fp,4(r15)
   24c64:	007d0000 	call	7d000 <_gp+0x477e0>
   24c68:	00000000 	call	0 <__alt_mem_sdram>
   24c6c:	01883a00 	call	1883a0 <_gp+0x152b80>
   24c70:	010d0bff 	0x10d0bff
   24c74:	01010002 	0x1010002
	...
   24c80:	010d0bff 	0x10d0bff
   24c84:	01010004 	movi	r4,1024
   24c88:	00000100 	call	10 <__alt_mem_sdram+0x10>
   24c8c:	00000000 	call	0 <__alt_mem_sdram>
   24c90:	0000ae4c 	andi	zero,zero,697
   24c94:	0000d620 	cmpeqi	zero,zero,856
