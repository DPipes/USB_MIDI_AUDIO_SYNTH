
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002af64 memsz 0x0002af64 flags r-x
    LOAD off    0x0002bf84 vaddr 0x0002af84 paddr 0x0002e170 align 2**12
         filesz 0x000031ec memsz 0x000031ec flags rw-
    LOAD off    0x0002f35c vaddr 0x0003135c paddr 0x0003135c align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00023bc0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007194  00023df0  00023df0  00024df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031ec  0002af84  0002e170  0002bf84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0003135c  0003135c  0002f35c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00031608  00031608  0002f170  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002f170  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001a98  00000000  00000000  0002f198  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00053463  00000000  00000000  00030c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010da0  00000000  00000000  00084093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001575c  00000000  00000000  00094e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a2c  00000000  00000000  000aa590  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ff3d  00000000  00000000  000affbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000243a9  00000000  00000000  000bfef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e42a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c10  00000000  00000000  000e4318  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000ff9ba  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000ff9bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000ff9c2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000ff9c3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000ff9c4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000ff9c8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000ff9cc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000ff9d0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000ff9db  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000ff9e6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000ff9f1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000ffa05  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000ffa30  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fb7c  00000000  00000000  00104eb7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00023df0 l    d  .rodata	00000000 .rodata
0002af84 l    d  .rwdata	00000000 .rwdata
0003135c l    d  .bss	00000000 .bss
00031608 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002ca68 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ca69 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ca6a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ca6b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002ca6c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ca6d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ca6e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ca6f l     O .rwdata	00000001 _ZL9SPI_MODE3
0003135c l     O .bss	00000001 _ZL9usb_error
0003135d l     O .bss	00000001 _ZL14usb_task_state
00031360 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002ca78 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ca79 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ca7a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ca7b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002ca7c l     O .rwdata	00000006 _ZL9XBOX_LEDS
00023ff2 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
00003de0 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002ca9c l     O .rwdata	00000004 _ZL4keys
0002caa0 l     O .rwdata	00000004 _ZL4adsr
00000000 l    df *ABS*	00000000 hidboot.cpp
0002caa4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002caa5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002caa6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002caa7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002caa8 l     O .rwdata	00000002 _ZL9pstrSpace
0002caac l     O .rwdata	00000003 _ZL8pstrCRLF
0002cab0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002cab4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002cab8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002cabc l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00024274 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00024288 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00024294 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
000242a0 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
000242ac l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
000242b8 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000242c8 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002cac4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002cacc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002cad4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002cadc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000242d4 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000242e0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002cae0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002cae4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000242ec l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000242fc l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002caec l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002caf4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0002430c l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002cafc l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0002431c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002cb04 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00024334 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002cb08 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00024340 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0002434c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002cb10 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002cb18 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00024358 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00024364 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002cb20 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002cb28 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00024370 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00024380 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002cb30 l     O .rwdata	00000002 _ZL10pstrUsageX
0002cb34 l     O .rwdata	00000002 _ZL10pstrUsageY
0002cb38 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002cb3c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002cb40 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002cb44 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002cb48 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002cb50 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002cb58 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00024394 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
000243a0 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
000243ac l     O .rodata	0000000b _ZL18pstrUsageByteCount
000243b8 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002cb60 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002cb68 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002cb6c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002cb70 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002cb74 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002cb78 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002cb80 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002cb88 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002cb90 l     O .rwdata	00000004 _ZL12pstrUsageVno
000243c8 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000243d8 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000243e4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000243f0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00024400 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0002440c l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00024418 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0002442c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0002443c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0002444c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0002445c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0002446c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0002447c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0002448c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0002449c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000244a8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000244b8 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000244cc l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000244e0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000244ec l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000244f8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00024504 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00024510 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0002451c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00024528 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00024534 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00024540 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0002454c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00024558 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00024564 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00024574 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00024580 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00024590 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000245a0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000245b0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000245c0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000245d0 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000245e8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00024600 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00024618 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00024628 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00024638 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00024648 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00024658 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00024668 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00024678 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00024688 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00024698 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000246a8 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000246b8 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000246d0 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000246e0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000246f4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00024704 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00024710 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0002471c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00024728 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002cb94 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00024734 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00024744 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00024758 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0002476c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0002477c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0002478c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00024798 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000247ac l     O .rodata	00000009 _ZL17pstrUsageElevator
000247b8 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002cb9c l     O .rwdata	00000007 _ZL15pstrUsageRudder
000247c8 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000247d4 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000247e0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000247f0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00024800 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002cba4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0002480c l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00024818 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00024824 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002cbac l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002cbb4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002cbbc l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002cbc4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00024830 l     O .rodata	00000009 _ZL17pstrUsageSteering
0002483c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00024848 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00024854 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002cbcc l     O .rwdata	00000008 _ZL16pstrUsageBallast
00024860 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00024870 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0002487c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00024888 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002cbd4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00024894 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002cbdc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002cbe4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000248a0 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000248ac l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000248b8 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000248c4 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002cbec l     O .rwdata	00000005 _ZL13pstrUsageVest
000248d0 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000248dc l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000248e8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000248f8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00024908 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00024914 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00024920 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002cbf4 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002cbf8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002cc00 l     O .rwdata	00000005 _ZL13pstrUsageRate
0002492c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00024938 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00024948 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00024958 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00024968 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00024974 l     O .rodata	0000000b _ZL18pstrUsageStickType
00024980 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002cc08 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002cc10 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002cc18 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002cc20 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002cc28 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002cc30 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002cc38 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002cc40 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002cc48 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002cc50 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002cc58 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002cc60 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0002498c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00024998 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000249a4 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002cc68 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002cc70 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002cc78 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002cc80 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002cc88 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000249b0 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000249c0 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002cc90 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002cc98 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000249cc l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000249dc l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000249ec l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000249fc l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00024a0c l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00024a1c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00024a2c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00024a3c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00024a4c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002cc9c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00024a5c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002cca4 l     O .rwdata	00000005 _ZL13pstrUsageBump
00024a6c l     O .rodata	00000009 _ZL16pstrUsageNewGame
00024a78 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002ccac l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00024a84 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00024a90 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002ccb4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00024a9c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00024aac l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00024ab8 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00024ac4 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00024ad0 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00024ae4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00024af4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00024b04 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00024b10 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00024b1c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00024b34 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00024b48 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00024b60 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00024b74 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00024b80 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00024b8c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002ccbc l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002ccc4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002cccc l     O .rwdata	00000004 _ZL14pstrUsagePower
0002ccd0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002ccd8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002ccdc l     O .rwdata	00000005 _ZL13pstrUsageMute
00024b98 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00024ba4 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00024bb4 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002cce4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00024bc4 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00024bd4 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002ccec l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002ccf4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00024be0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00024bf4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002ccfc l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002cd00 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00024c00 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00024c14 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002cd04 l     O .rwdata	00000005 _ZL13pstrUsageRing
00024c20 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00024c2c l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002cd0c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002cd14 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002cd1c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002cd24 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00024c38 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002cd2c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002cd34 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00024c44 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00024c50 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00024c5c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00024c68 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002cd38 l     O .rwdata	00000005 _ZL19pstrUsageConference
00024c74 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002cd40 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002cd48 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002cd50 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00024c80 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002cd58 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002cd60 l     O .rwdata	00000006 _ZL14pstrUsageReady
00024c8c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00024c98 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002cd68 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002cd70 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002cd74 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002cd78 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002cd80 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00024ca4 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002cd88 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002cd90 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002cd98 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002cd9c l     O .rwdata	00000006 _ZL14pstrUsageError
00024cb0 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00024cc0 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00024cd4 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002cda4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00024cec l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00024cf8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00024d08 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002cdac l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00024d18 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00024d28 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00024d3c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00024d50 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00024d64 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00024d78 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002cdb4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00024d88 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00024d94 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002cdbc l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00024da0 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00024dac l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002cdc4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00024dbc l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00024dc8 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002cdcc l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002cdd4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00024dd4 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00024de0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002cddc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002cde4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002cdec l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002cdf4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00024dec l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002cdfc l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002ce04 l     O .rwdata	00000005 _ZL13pstrUsagePark
00024df8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00024e04 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002ce0c l     O .rwdata	00000005 _ZL13pstrUsageLine
00024e10 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00024e1c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00024e28 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00024e34 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00024e40 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002ce14 l     O .rwdata	00000005 _ZL13pstrUsageSend
00024e4c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00024e58 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00024e64 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00024e70 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00024e7c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00024e88 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002ce1c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00024e98 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00024ea8 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00024ebc l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00024ed0 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00024ee4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00024ef8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00024f08 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00024f18 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00024f2c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00024f3c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00024f4c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00024f5c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00024f68 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00024f74 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00024f80 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002ce20 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002ce28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002ce2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002ce30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002ce34 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002ce38 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002ce3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002ce40 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002ce44 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002ce48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002ce4c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002ce50 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002ce54 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002ce58 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002ce5c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002ce60 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002ce64 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00024f94 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00024fa4 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00024fb0 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00024fbc l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002ce68 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002ce6c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002ce74 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002ce7c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002ce84 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00024fc8 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00024fd4 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002ce8c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00024fe0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002ce94 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00024fec l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002ce9c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00024ff8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00025004 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00025010 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0002501c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00025028 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00025038 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00025048 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00025054 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00025060 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002cea4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00025070 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00025080 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002ceac l     O .rwdata	00000006 _ZL14pstrUsageStill
0002ceb4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0002508c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00025098 l     O .rodata	0000000a _ZL17pstrUsageModeStep
000250a4 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
000250b0 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
000250c0 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002ceb8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002cec0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
000250cc l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
000250dc l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
000250e8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000250f4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00025100 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0002510c l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00025118 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00025124 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00025134 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00025140 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0002514c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00025158 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002cec8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002ced0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00025168 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00025178 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00025184 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00025190 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
000251a0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
000251b0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002ced8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002cee0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
000251c0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002cee8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002cef0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002cef8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002cf00 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002cf08 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
000251cc l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
000251d8 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002cf10 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002cf18 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000251e4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000251f0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000251fc l     O .rodata	00000009 _ZL17pstrUsageTracking
00025208 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00025214 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002cf20 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00025220 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002cf28 l     O .rwdata	00000005 _ZL13pstrUsageMark
0002522c l     O .rodata	00000009 _ZL18pstrUsageClearMark
00025238 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00025244 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00025250 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00025260 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00025274 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00025284 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00025294 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
000252a0 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
000252ac l     O .rodata	0000000b _ZL18pstrUsageStopEject
000252b8 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
000252c4 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002cf30 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002cf34 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002cf3c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002cf44 l     O .rwdata	00000007 _ZL15pstrUsageTreble
000252d0 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000252dc l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002cf4c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002cf54 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002cf58 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002cf60 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002cf68 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000252e8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000252f4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00025300 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0002530c l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002cf70 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00025318 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00025324 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00025330 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0002533c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0002534c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0002535c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00025368 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00025374 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00025380 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002cf78 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002cf80 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0002538c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00025398 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002cf88 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
000253a4 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
000253b4 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000253c4 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000253d0 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000253dc l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000253e8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002cf90 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002cf98 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000253f4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00025400 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002540c l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00025418 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002cfa0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00025428 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00025434 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002cfa8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002cfb0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002cfb8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00025444 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00025450 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002545c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00025468 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00025474 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00025484 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00025498 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000254a4 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
000254b8 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000254c8 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000254d4 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000254e4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000254f4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00025504 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00025510 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00025520 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002552c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002553c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002554c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002555c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002556c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00025580 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002cfc0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00025590 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000255a4 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000255b8 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000255c8 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000255d8 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000255e8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000255f4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00025600 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002560c l     O .rodata	00000009 _ZL16pstrUsageALLogon
00025618 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00025624 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00025634 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002564c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00025658 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00025664 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00025670 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002567c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00025688 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00025694 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000256a8 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002cfc8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000256b4 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002cfd0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000256c0 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000256cc l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000256dc l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000256e8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000256f8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00025708 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00025718 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00025724 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00025730 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002573c l     O .rodata	00000009 _ZL16pstrUsageALClock
00025748 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00025758 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00025764 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00025770 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002577c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00025788 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002579c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000257ac l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000257b8 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000257cc l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000257d8 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000257e8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000257fc l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00025810 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00025824 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00025834 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002584c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00025860 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00025870 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00025880 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002cfd8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002cfe0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00025894 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002cfe8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002cff0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002cff8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d000 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000258a0 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d008 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d010 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d018 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d020 l     O .rwdata	00000007 _ZL14pstrUsageACCut
000258ac l     O .rodata	00000009 _ZL16pstrUsageACPaste
000258b8 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002d028 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000258c4 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000258d4 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002d030 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002d038 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002d040 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002d048 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002d050 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000258e0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000258ec l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000258fc l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002590c l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002d058 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00025918 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00025924 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00025930 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002d060 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002593c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00025948 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00025958 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00025964 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00025974 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00025984 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00025990 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002599c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002d068 l     O .rwdata	00000007 _ZL14pstrUsageACPan
000259ac l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000259b8 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000259c8 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002d070 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002d078 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002d080 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002d088 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000259d8 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000259e4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002d090 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000259f0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000259fc l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00025a08 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00025a14 l     O .rodata	0000000a _ZL17pstrUsageACResize
00025a20 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00025a2c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00025a38 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00025a44 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00025a50 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00025a5c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00025a68 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00025a74 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00025a84 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00025a94 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00025aa4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00025ab4 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00025ac0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00025ad0 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00025adc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00025aec l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00025afc l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00025b0c l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00025b18 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00025b24 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00025b30 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00025b3c l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002d098 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002d0a0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00025b48 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002d0a8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002d0b0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00025b54 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002d0b8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00025b60 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00025b70 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00025b7c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00025b8c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00025b9c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00025bac l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002d0c0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002d0c8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00025bb8 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002d0d0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00025bc4 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00025bd0 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00025be0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00025bec l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00025bfc l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00025c08 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00025c14 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00025c20 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00025c2c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00025c38 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00025c44 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002d0d8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002d0e0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00025c50 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00025c5c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002d0e8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00025c6c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00025c78 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00025c84 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00025c94 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00025ca4 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00025cb0 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00025cbc l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00025cc8 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002d0f0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00025cd4 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00025ce0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00025cec l     O .rodata	00000009 _ZL16pstrUsageACReply
00025cf8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00025d08 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002d0f8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00025d14 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002d100 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002d108 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00025d20 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00025d2c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00025d38 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00025d44 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00025d50 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00025d5c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00025d68 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00025d74 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00025d80 l     O .rodata	0000000a _ZL17pstrUsageACRename
00025d8c l     O .rodata	00000009 _ZL16pstrUsageACMerge
00025d98 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00025da4 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00025db0 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00025dbc l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002d110 l     O .rwdata	00000004 _ZL12pstrUsagePen
00025dc8 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00025dd4 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00025de0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00025dec l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00025df8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002d114 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00025e08 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002d11c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00025e14 l     O .rodata	00000009 _ZL17pstrUsageArmature
00025e20 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00025e34 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002d124 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002d12c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002d134 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00025e44 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00025e50 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00025e5c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002d13c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002d144 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002d14c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002d150 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00025e68 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00025e74 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00025e84 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00025e94 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002d158 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002d160 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002d168 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002d170 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00025ea4 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d178 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d180 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00025eb0 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d188 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d190 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00025ebc l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00025ec8 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00025ed8 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00025ee4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00025ef4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00025f00 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00025f10 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00025f1c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00025f2c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00025f38 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00025f48 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00025f58 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00025f64 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00025f70 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00025f7c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00025f88 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00025f94 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00025fa0 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00025fac l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00025fbc l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00025fcc l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d198 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d19c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d1a0 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d1a8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00025fd8 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00025fe4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00025ff0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00025ffc l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d1b0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00026008 l     O .rodata	00000009 _ZL17pstrUsageFontData
00026014 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00026020 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002602c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002603c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002604c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002605c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00026068 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00026074 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00026080 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002608c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00026098 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
000260a4 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
000260b0 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
000260bc l     O .rodata	0000000a _ZL22pstrUsageAttributeData
000260c8 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
000260d8 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
000260e8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
000260f8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00026104 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00026110 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00026120 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d1b8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002612c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002613c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002614c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00026158 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00026164 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00026174 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00026184 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00026194 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
000261a4 l     O .rodata	0000000a _ZL17pstrUsageBlitData
000261b0 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
000261bc l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
000261c8 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
000261d8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000261e8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000261f8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00026208 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d1c0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d1c8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00026218 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d1d0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d1d8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d1e0 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d1e8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00026224 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d1f0 l     O .rwdata	00000005 _ZL13pstrUsageCine
00026230 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d1f8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d200 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002623c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002624c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002625c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002626c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00026278 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00026284 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00026298 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
000262ac l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
000262c0 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
000262d4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000262e4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000262f4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00026300 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002630c l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002631c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002d214 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d215 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d216 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d217 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002d21c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d21d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d21e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d21f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002d220 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d221 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d222 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d223 l     O .rwdata	00000001 _ZL9SPI_MODE3
00026576 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00026586 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008f64 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002d22c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d22d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d22e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d22f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d230 l     O .rwdata	00000002 _ZL9pstrSpace
0002d234 l     O .rwdata	00000003 _ZL8pstrCRLF
0002d238 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d23c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d240 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d244 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00026650 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00026664 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00026670 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
0002667c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00026688 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00026694 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000266a4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d24c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d254 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d25c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d264 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000266b0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000266bc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d268 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d26c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000266c8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000266d8 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d274 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d27c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000266e8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d284 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000266f8 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d28c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00026710 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d290 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002671c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00026728 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d298 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d2a0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00026734 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00026740 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d2a8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d2b0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0002674c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0002675c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d2b8 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d2bc l     O .rwdata	00000002 _ZL10pstrUsageY
0002d2c0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d2c4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d2c8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d2cc l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d2d0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d2d8 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d2e0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00026770 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
0002677c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00026788 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00026794 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d2e8 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d2f0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d2f4 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d2f8 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d2fc l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d300 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d308 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d310 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d318 l     O .rwdata	00000004 _ZL12pstrUsageVno
000267a4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000267b4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000267c0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000267cc l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000267dc l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000267e8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000267f4 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00026808 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00026818 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00026828 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00026838 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00026848 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00026858 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00026868 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00026878 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00026884 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00026894 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000268a8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000268bc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000268c8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000268d4 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000268e0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000268ec l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000268f8 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00026904 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00026910 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002691c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00026928 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00026934 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00026940 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00026950 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0002695c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0002696c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0002697c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0002698c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0002699c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000269ac l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000269c4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000269dc l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000269f4 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00026a04 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00026a14 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00026a24 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00026a34 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00026a44 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00026a54 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00026a64 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00026a74 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00026a84 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00026a94 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00026aac l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00026abc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00026ad0 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00026ae0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00026aec l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00026af8 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00026b04 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d31c l     O .rwdata	00000008 _ZL16pstrUsageAileron
00026b10 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00026b20 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00026b34 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00026b48 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00026b58 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00026b68 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00026b74 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00026b88 l     O .rodata	00000009 _ZL17pstrUsageElevator
00026b94 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d324 l     O .rwdata	00000007 _ZL15pstrUsageRudder
00026ba4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
00026bb0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00026bbc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00026bcc l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00026bdc l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d32c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00026be8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00026bf4 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00026c00 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d334 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d33c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d344 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d34c l     O .rwdata	00000008 _ZL16pstrUsageShifter
00026c0c l     O .rodata	00000009 _ZL17pstrUsageSteering
00026c18 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00026c24 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00026c30 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d354 l     O .rwdata	00000008 _ZL16pstrUsageBallast
00026c3c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00026c4c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00026c58 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00026c64 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d35c l     O .rwdata	00000005 _ZL13pstrUsageBelt
00026c70 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d364 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d36c l     O .rwdata	00000006 _ZL14pstrUsageGlove
00026c7c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00026c88 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00026c94 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00026ca0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d374 l     O .rwdata	00000005 _ZL13pstrUsageVest
00026cac l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00026cb8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00026cc4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00026cd4 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00026ce4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00026cf0 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00026cfc l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d37c l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d380 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d388 l     O .rwdata	00000005 _ZL13pstrUsageRate
00026d08 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00026d14 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00026d24 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00026d34 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00026d44 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00026d50 l     O .rodata	0000000b _ZL18pstrUsageStickType
00026d5c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d390 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d398 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d3a0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d3a8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d3b0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d3b8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d3c0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d3c8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d3d0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d3d8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d3e0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d3e8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00026d68 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00026d74 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00026d80 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d3f0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d3f8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d400 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d408 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d410 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00026d8c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00026d9c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d418 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d420 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00026da8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00026db8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00026dc8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00026dd8 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00026de8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00026df8 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00026e08 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00026e18 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00026e28 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d424 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00026e38 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d42c l     O .rwdata	00000005 _ZL13pstrUsageBump
00026e48 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00026e54 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d434 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00026e60 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00026e6c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d43c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00026e78 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00026e88 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00026e94 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00026ea0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00026eac l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00026ec0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00026ed0 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00026ee0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00026eec l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00026ef8 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00026f10 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00026f24 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00026f3c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00026f50 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00026f5c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00026f68 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d444 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d44c l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d454 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d458 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d460 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d464 l     O .rwdata	00000005 _ZL13pstrUsageMute
00026f74 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00026f80 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00026f90 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d46c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00026fa0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00026fb0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d474 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d47c l     O .rwdata	00000007 _ZL15pstrUsageStereo
00026fbc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00026fd0 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d484 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d488 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00026fdc l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00026ff0 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d48c l     O .rwdata	00000005 _ZL13pstrUsageRing
00026ffc l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00027008 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d494 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d49c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d4a4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d4ac l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00027014 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d4b4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d4bc l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00027020 l     O .rodata	00000009 _ZL17pstrUsageCoverage
0002702c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00027038 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00027044 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d4c0 l     O .rwdata	00000005 _ZL19pstrUsageConference
00027050 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d4c8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d4d0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d4d8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0002705c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d4e0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d4e8 l     O .rwdata	00000006 _ZL14pstrUsageReady
00027068 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00027074 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d4f0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d4f8 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d4fc l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d500 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d508 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00027080 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d510 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d518 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d520 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d524 l     O .rwdata	00000006 _ZL14pstrUsageError
0002708c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
0002709c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000270b0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d52c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000270c8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000270d4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
000270e4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d534 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
000270f4 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00027104 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00027118 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0002712c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00027140 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00027154 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d53c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00027164 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00027170 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d544 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0002717c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00027188 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d54c l     O .rwdata	00000006 _ZL14pstrUsagePhone
00027198 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000271a4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d554 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d55c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000271b0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000271bc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d564 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d56c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d574 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d57c l     O .rwdata	00000007 _ZL15pstrUsageRedial
000271c8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d584 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d58c l     O .rwdata	00000005 _ZL13pstrUsagePark
000271d4 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
000271e0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d594 l     O .rwdata	00000005 _ZL13pstrUsageLine
000271ec l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
000271f8 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00027204 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00027210 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0002721c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d59c l     O .rwdata	00000005 _ZL13pstrUsageSend
00027228 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00027234 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00027240 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0002724c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00027258 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00027264 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d5a4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00027274 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00027284 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00027298 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
000272ac l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
000272c0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
000272d4 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
000272e4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
000272f4 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00027308 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00027318 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00027328 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00027338 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00027344 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00027350 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0002735c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d5a8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d5b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d5b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d5b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d5bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d5c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d5c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d5c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d5cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d5d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d5d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d5d8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d5dc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d5e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d5e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d5e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d5ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00027370 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00027380 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0002738c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00027398 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d5f0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d5f4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d5fc l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d604 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d60c l     O .rwdata	00000006 _ZL14pstrUsageSleep
000273a4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
000273b0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d614 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
000273bc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d61c l     O .rwdata	00000005 _ZL13pstrUsageMenu
000273c8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d624 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
000273d4 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
000273e0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
000273ec l     O .rodata	0000000b _ZL18pstrUsageMenuRight
000273f8 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00027404 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00027414 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00027424 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00027430 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0002743c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d62c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0002744c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0002745c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d634 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d63c l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027468 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00027474 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00027480 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0002748c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002749c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d640 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d648 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
000274a8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
000274b8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
000274c4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000274d0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
000274dc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
000274e8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
000274f4 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00027500 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00027510 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002751c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00027528 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00027534 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d650 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d658 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00027544 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00027554 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00027560 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0002756c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0002757c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0002758c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d660 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d668 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002759c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d670 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d678 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d680 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d688 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d690 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
000275a8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
000275b4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d698 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d6a0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000275c0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000275cc l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000275d8 l     O .rodata	00000009 _ZL17pstrUsageTracking
000275e4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000275f0 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d6a8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000275fc l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d6b0 l     O .rwdata	00000005 _ZL13pstrUsageMark
00027608 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00027614 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00027620 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002762c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002763c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00027650 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00027660 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00027670 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0002767c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00027688 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00027694 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
000276a0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d6b8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d6bc l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d6c4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d6cc l     O .rwdata	00000007 _ZL15pstrUsageTreble
000276ac l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000276b8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d6d4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d6dc l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d6e0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d6e8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d6f0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000276c4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000276d0 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000276dc l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000276e8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002d6f8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000276f4 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00027700 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002770c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00027718 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00027728 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00027738 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00027744 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00027750 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002775c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002d700 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002d708 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00027768 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00027774 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002d710 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00027780 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00027790 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000277a0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000277ac l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000277b8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000277c4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002d718 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002d720 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000277d0 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000277dc l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000277e8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000277f4 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002d728 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00027804 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00027810 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002d730 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002d738 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002d740 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00027820 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002782c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00027838 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00027844 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00027850 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00027860 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00027874 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00027880 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00027894 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000278a4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000278b0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000278c0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000278d0 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000278e0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000278ec l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000278fc l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00027908 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00027918 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00027928 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00027938 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00027948 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002795c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002d748 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002796c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00027980 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00027994 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000279a4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000279b4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000279c4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000279d0 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000279dc l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000279e8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000279f4 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00027a00 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00027a10 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00027a28 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00027a34 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00027a40 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00027a4c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00027a58 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00027a64 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00027a70 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00027a84 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002d750 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00027a90 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002d758 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00027a9c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00027aa8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00027ab8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00027ac4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00027ad4 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00027ae4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00027af4 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00027b00 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00027b0c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00027b18 l     O .rodata	00000009 _ZL16pstrUsageALClock
00027b24 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00027b34 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00027b40 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00027b4c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00027b58 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00027b64 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00027b78 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00027b88 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00027b94 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00027ba8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00027bb4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00027bc4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00027bd8 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00027bec l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00027c00 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00027c10 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00027c28 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00027c3c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00027c4c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00027c5c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002d760 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002d768 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00027c70 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002d770 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002d778 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002d780 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d788 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00027c7c l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d790 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d798 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d7a0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d7a8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00027c88 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00027c94 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002d7b0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00027ca0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00027cb0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002d7b8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002d7c0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002d7c8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002d7d0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002d7d8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00027cbc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00027cc8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00027cd8 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00027ce8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002d7e0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00027cf4 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00027d00 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00027d0c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002d7e8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00027d18 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00027d24 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00027d34 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00027d40 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00027d50 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00027d60 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00027d6c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00027d78 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002d7f0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00027d88 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00027d94 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00027da4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002d7f8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002d800 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002d808 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002d810 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00027db4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00027dc0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002d818 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00027dcc l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00027dd8 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00027de4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00027df0 l     O .rodata	0000000a _ZL17pstrUsageACResize
00027dfc l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00027e08 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00027e14 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00027e20 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00027e2c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00027e38 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00027e44 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00027e50 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00027e60 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00027e70 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00027e80 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00027e90 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00027e9c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00027eac l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00027eb8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00027ec8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00027ed8 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00027ee8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00027ef4 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00027f00 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00027f0c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00027f18 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002d820 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002d828 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00027f24 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002d830 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002d838 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00027f30 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002d840 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00027f3c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00027f4c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00027f58 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00027f68 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00027f78 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00027f88 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002d848 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002d850 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00027f94 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002d858 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00027fa0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00027fac l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00027fbc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00027fc8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00027fd8 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00027fe4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00027ff0 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00027ffc l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00028008 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00028014 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00028020 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002d860 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002d868 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002802c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00028038 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002d870 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00028048 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00028054 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00028060 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00028070 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00028080 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002808c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00028098 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000280a4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002d878 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000280b0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000280bc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000280c8 l     O .rodata	00000009 _ZL16pstrUsageACReply
000280d4 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
000280e4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002d880 l     O .rwdata	00000007 _ZL15pstrUsageACSend
000280f0 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002d888 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002d890 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
000280fc l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00028108 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00028114 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00028120 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002812c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00028138 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00028144 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00028150 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002815c l     O .rodata	0000000a _ZL17pstrUsageACRename
00028168 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00028174 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00028180 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002818c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00028198 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002d898 l     O .rwdata	00000004 _ZL12pstrUsagePen
000281a4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000281b0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000281bc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000281c8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
000281d4 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002d89c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
000281e4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002d8a4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
000281f0 l     O .rodata	00000009 _ZL17pstrUsageArmature
000281fc l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00028210 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002d8ac l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002d8b4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002d8bc l     O .rwdata	00000007 _ZL15pstrUsageFinger
00028220 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002822c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00028238 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002d8c4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002d8cc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002d8d4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002d8d8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00028244 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00028250 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00028260 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00028270 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002d8e0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002d8e8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002d8f0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002d8f8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00028280 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d900 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d908 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002828c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d910 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d918 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00028298 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
000282a4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
000282b4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
000282c0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
000282d0 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
000282dc l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
000282ec l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
000282f8 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00028308 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00028314 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00028324 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00028334 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00028340 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002834c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00028358 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00028364 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00028370 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002837c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00028388 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00028398 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
000283a8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d920 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d924 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d928 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d930 l     O .rwdata	00000005 _ZL16pstrUsageColumns
000283b4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
000283c0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
000283cc l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
000283d8 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d938 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
000283e4 l     O .rodata	00000009 _ZL17pstrUsageFontData
000283f0 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
000283fc l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00028408 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028418 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00028428 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00028438 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00028444 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00028450 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002845c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028468 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00028474 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00028480 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002848c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028498 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
000284a4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
000284b4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
000284c4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
000284d4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
000284e0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
000284ec l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
000284fc l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d940 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00028508 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00028518 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00028528 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00028534 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00028540 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00028550 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00028560 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00028570 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00028580 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002858c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00028598 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
000285a4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
000285b4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000285c4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000285d4 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000285e4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d948 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d950 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000285f4 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d958 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d960 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d968 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d970 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00028600 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d978 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002860c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d980 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d988 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00028618 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00028628 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00028638 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00028648 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00028654 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00028660 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00028674 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00028688 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002869c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
000286b0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000286c0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000286d0 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000286dc l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000286e8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000286f8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002d98e l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d98f l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d990 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d991 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002d994 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d995 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d996 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d997 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d998 l     O .rwdata	00000002 _ZL9pstrSpace
0002d99c l     O .rwdata	00000003 _ZL8pstrCRLF
0002d9a0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d9a4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d9a8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d9ac l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000287d8 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000287ec l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000287f8 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00028804 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00028810 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0002881c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0002882c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d9b4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d9bc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d9c4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d9cc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00028838 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00028844 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d9d0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d9d4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00028850 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00028860 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d9dc l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d9e4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00028870 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d9ec l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00028880 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d9f4 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00028898 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d9f8 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000288a4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
000288b0 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002da00 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002da08 l     O .rwdata	00000006 _ZL14pstrUsageMouse
000288bc l     O .rodata	00000009 _ZL17pstrUsageJoystick
000288c8 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002da10 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002da18 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000288d4 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000288e4 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002da20 l     O .rwdata	00000002 _ZL10pstrUsageX
0002da24 l     O .rwdata	00000002 _ZL10pstrUsageY
0002da28 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002da2c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002da30 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002da34 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002da38 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002da40 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002da48 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000288f8 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00028904 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00028910 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0002891c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002da50 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002da58 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002da5c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002da60 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002da64 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002da68 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002da70 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002da78 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002da80 l     O .rwdata	00000004 _ZL12pstrUsageVno
0002892c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0002893c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00028948 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00028954 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00028964 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00028970 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
0002897c l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00028990 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000289a0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000289b0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000289c0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000289d0 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000289e0 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000289f0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00028a00 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00028a0c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00028a1c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00028a30 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00028a44 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00028a50 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
00028a5c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00028a68 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00028a74 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00028a80 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00028a8c l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00028a98 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00028aa4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00028ab0 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00028abc l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00028ac8 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00028ad8 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00028ae4 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00028af4 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00028b04 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00028b14 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00028b24 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00028b34 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
00028b4c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00028b64 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00028b7c l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00028b8c l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00028b9c l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00028bac l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00028bbc l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00028bcc l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00028bdc l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00028bec l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00028bfc l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00028c0c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00028c1c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00028c34 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00028c44 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00028c58 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00028c68 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00028c74 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00028c80 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00028c8c l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002da84 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00028c98 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00028ca8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00028cbc l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00028cd0 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00028ce0 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00028cf0 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00028cfc l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00028d10 l     O .rodata	00000009 _ZL17pstrUsageElevator
00028d1c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002da8c l     O .rwdata	00000007 _ZL15pstrUsageRudder
00028d2c l     O .rodata	00000009 _ZL17pstrUsageThrottle
00028d38 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00028d44 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00028d54 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00028d64 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002da94 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00028d70 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00028d7c l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00028d88 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002da9c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002daa4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002daac l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002dab4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00028d94 l     O .rodata	00000009 _ZL17pstrUsageSteering
00028da0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00028dac l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00028db8 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002dabc l     O .rwdata	00000008 _ZL16pstrUsageBallast
00028dc4 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00028dd4 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00028de0 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00028dec l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002dac4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00028df8 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002dacc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002dad4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00028e04 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00028e10 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00028e1c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00028e28 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002dadc l     O .rwdata	00000005 _ZL13pstrUsageVest
00028e34 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00028e40 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00028e4c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00028e5c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00028e6c l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00028e78 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00028e84 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002dae4 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002dae8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002daf0 l     O .rwdata	00000005 _ZL13pstrUsageRate
00028e90 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00028e9c l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00028eac l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00028ebc l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00028ecc l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00028ed8 l     O .rodata	0000000b _ZL18pstrUsageStickType
00028ee4 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002daf8 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002db00 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002db08 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002db10 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002db18 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002db20 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002db28 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002db30 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002db38 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002db40 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002db48 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002db50 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00028ef0 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00028efc l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00028f08 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002db58 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002db60 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002db68 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002db70 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002db78 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00028f14 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00028f24 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002db80 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002db88 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00028f30 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00028f40 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00028f50 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00028f60 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00028f70 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00028f80 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00028f90 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00028fa0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00028fb0 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002db8c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00028fc0 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002db94 l     O .rwdata	00000005 _ZL13pstrUsageBump
00028fd0 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00028fdc l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002db9c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00028fe8 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00028ff4 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002dba4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00029000 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00029010 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0002901c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00029028 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00029034 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00029048 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00029058 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00029068 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00029074 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00029080 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00029098 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
000290ac l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
000290c4 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
000290d8 l     O .rodata	00000009 _ZL16pstrUsageNumLock
000290e4 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
000290f0 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002dbac l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002dbb4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002dbbc l     O .rwdata	00000004 _ZL14pstrUsagePower
0002dbc0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002dbc8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002dbcc l     O .rwdata	00000005 _ZL13pstrUsageMute
000290fc l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00029108 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00029118 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002dbd4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00029128 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00029138 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002dbdc l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002dbe4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00029144 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00029158 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002dbec l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002dbf0 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00029164 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00029178 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002dbf4 l     O .rwdata	00000005 _ZL13pstrUsageRing
00029184 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00029190 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002dbfc l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002dc04 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002dc0c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002dc14 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
0002919c l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002dc1c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002dc24 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
000291a8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
000291b4 l     O .rodata	0000000b _ZL18pstrUsageNightMode
000291c0 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
000291cc l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002dc28 l     O .rwdata	00000005 _ZL19pstrUsageConference
000291d8 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002dc30 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002dc38 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002dc40 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
000291e4 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002dc48 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002dc50 l     O .rwdata	00000006 _ZL14pstrUsageReady
000291f0 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
000291fc l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002dc58 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002dc60 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002dc64 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002dc68 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002dc70 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00029208 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002dc78 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002dc80 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002dc88 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002dc8c l     O .rwdata	00000006 _ZL14pstrUsageError
00029214 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00029224 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00029238 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002dc94 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00029250 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
0002925c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
0002926c l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002dc9c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
0002927c l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
0002928c l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
000292a0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
000292b4 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
000292c8 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
000292dc l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002dca4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
000292ec l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
000292f8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002dcac l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00029304 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00029310 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002dcb4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00029320 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0002932c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002dcbc l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002dcc4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00029338 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00029344 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002dccc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002dcd4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002dcdc l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002dce4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00029350 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002dcec l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002dcf4 l     O .rwdata	00000005 _ZL13pstrUsagePark
0002935c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00029368 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002dcfc l     O .rwdata	00000005 _ZL13pstrUsageLine
00029374 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00029380 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
0002938c l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00029398 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
000293a4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002dd04 l     O .rwdata	00000005 _ZL13pstrUsageSend
000293b0 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
000293bc l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
000293c8 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
000293d4 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
000293e0 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
000293ec l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002dd0c l     O .rwdata	00000004 _ZL16pstrUsageMessage
000293fc l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0002940c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00029420 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00029434 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00029448 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0002945c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0002946c l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0002947c l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00029490 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
000294a0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
000294b0 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
000294c0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
000294cc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
000294d8 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
000294e4 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002dd10 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002dd18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002dd1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002dd20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002dd24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002dd28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002dd2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002dd30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002dd34 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002dd38 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002dd3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002dd40 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002dd44 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002dd48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002dd4c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002dd50 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002dd54 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
000294f8 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00029508 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00029514 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00029520 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002dd58 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002dd5c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002dd64 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002dd6c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002dd74 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0002952c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00029538 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002dd7c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00029544 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002dd84 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00029550 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002dd8c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0002955c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00029568 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00029574 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00029580 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0002958c l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0002959c l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
000295ac l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
000295b8 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
000295c4 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002dd94 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
000295d4 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
000295e4 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002dd9c l     O .rwdata	00000006 _ZL14pstrUsageStill
0002dda4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
000295f0 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
000295fc l     O .rodata	0000000a _ZL17pstrUsageModeStep
00029608 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00029614 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00029624 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002dda8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002ddb0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00029630 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00029640 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0002964c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00029658 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00029664 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00029670 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0002967c l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00029688 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00029698 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
000296a4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
000296b0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
000296bc l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002ddb8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002ddc0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
000296cc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
000296dc l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
000296e8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
000296f4 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00029704 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00029714 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002ddc8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002ddd0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00029724 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002ddd8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002dde0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002dde8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002ddf0 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002ddf8 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00029730 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002973c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002de00 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002de08 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00029748 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00029754 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00029760 l     O .rodata	00000009 _ZL17pstrUsageTracking
0002976c l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00029778 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002de10 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00029784 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002de18 l     O .rwdata	00000005 _ZL13pstrUsageMark
00029790 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0002979c l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000297a8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
000297b4 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
000297c4 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
000297d8 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
000297e8 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
000297f8 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00029804 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00029810 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002981c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00029828 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002de20 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002de24 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002de2c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002de34 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00029834 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00029840 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002de3c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002de44 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002de48 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002de50 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002de58 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002984c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00029858 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00029864 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00029870 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002de60 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0002987c l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00029888 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00029894 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000298a0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
000298b0 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000298c0 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000298cc l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
000298d8 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
000298e4 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002de68 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002de70 l     O .rwdata	00000007 _ZL15pstrUsageMotion
000298f0 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
000298fc l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002de78 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00029908 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00029918 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00029928 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00029934 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00029940 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002994c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002de80 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002de88 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00029958 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00029964 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00029970 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0002997c l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002de90 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0002998c l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00029998 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002de98 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002dea0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002dea8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000299a8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
000299b4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000299c0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000299cc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000299d8 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000299e8 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000299fc l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00029a08 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00029a1c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
00029a2c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00029a38 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00029a48 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00029a58 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00029a68 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00029a74 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00029a84 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00029a90 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00029aa0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00029ab0 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00029ac0 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00029ad0 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00029ae4 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002deb0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00029af4 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00029b08 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00029b1c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
00029b2c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
00029b3c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
00029b4c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00029b58 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00029b64 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00029b70 l     O .rodata	00000009 _ZL16pstrUsageALLogon
00029b7c l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00029b88 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00029b98 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00029bb0 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00029bbc l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00029bc8 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00029bd4 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00029be0 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00029bec l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00029bf8 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00029c0c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002deb8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00029c18 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002dec0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00029c24 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00029c30 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00029c40 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
00029c4c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
00029c5c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00029c6c l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00029c7c l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00029c88 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00029c94 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00029ca0 l     O .rodata	00000009 _ZL16pstrUsageALClock
00029cac l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00029cbc l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00029cc8 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00029cd4 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00029ce0 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00029cec l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00029d00 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00029d10 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00029d1c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00029d30 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
00029d3c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
00029d4c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00029d60 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00029d74 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00029d88 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00029d98 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00029db0 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00029dc4 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00029dd4 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00029de4 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002dec8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002ded0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00029df8 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002ded8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002dee0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002dee8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002def0 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00029e04 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002def8 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002df00 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002df08 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002df10 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00029e10 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00029e1c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002df18 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00029e28 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00029e38 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002df20 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002df28 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002df30 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002df38 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002df40 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00029e44 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00029e50 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00029e60 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00029e70 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002df48 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00029e7c l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00029e88 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00029e94 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002df50 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00029ea0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00029eac l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00029ebc l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00029ec8 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00029ed8 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00029ee8 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00029ef4 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00029f00 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002df58 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00029f10 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00029f1c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00029f2c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002df60 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002df68 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002df70 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002df78 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00029f3c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00029f48 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002df80 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00029f54 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00029f60 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00029f6c l     O .rodata	0000000a _ZL17pstrUsageACRotate
00029f78 l     O .rodata	0000000a _ZL17pstrUsageACResize
00029f84 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00029f90 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00029f9c l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00029fa8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00029fb4 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00029fc0 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00029fcc l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00029fd8 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00029fe8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00029ff8 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0002a008 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0002a018 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0002a024 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0002a034 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0002a040 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0002a050 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0002a060 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0002a070 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0002a07c l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0002a088 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0002a094 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0002a0a0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002df88 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002df90 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0002a0ac l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002df98 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002dfa0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0002a0b8 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002dfa8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0002a0c4 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0002a0d4 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002a0e0 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002a0f0 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0002a100 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0002a110 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002dfb0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002dfb8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0002a11c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002dfc0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0002a128 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0002a134 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0002a144 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0002a150 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0002a160 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0002a16c l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0002a178 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0002a184 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0002a190 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0002a19c l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0002a1a8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002dfc8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002dfd0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0002a1b4 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002a1c0 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002dfd8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002a1d0 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0002a1dc l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0002a1e8 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0002a1f8 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0002a208 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0002a214 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0002a220 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0002a22c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002dfe0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0002a238 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0002a244 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0002a250 l     O .rodata	00000009 _ZL16pstrUsageACReply
0002a25c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0002a26c l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002dfe8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0002a278 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002dff0 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002dff8 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0002a284 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0002a290 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0002a29c l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0002a2a8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0002a2b4 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002a2c0 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0002a2cc l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0002a2d8 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0002a2e4 l     O .rodata	0000000a _ZL17pstrUsageACRename
0002a2f0 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0002a2fc l     O .rodata	00000009 _ZL16pstrUsageACSplit
0002a308 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0002a314 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0002a320 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002e000 l     O .rwdata	00000004 _ZL12pstrUsagePen
0002a32c l     O .rodata	0000000a _ZL17pstrUsageLightPen
0002a338 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0002a344 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0002a350 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0002a35c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002e004 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0002a36c l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002e00c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0002a378 l     O .rodata	00000009 _ZL17pstrUsageArmature
0002a384 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0002a398 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002e014 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002e01c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002e024 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0002a3a8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0002a3b4 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0002a3c0 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002e02c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002e034 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002e03c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002e040 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0002a3cc l     O .rodata	0000000b _ZL18pstrUsageDataValid
0002a3d8 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0002a3e8 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0002a3f8 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002e048 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002e050 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002e058 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002e060 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002a408 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002e068 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002e070 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002a414 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002e078 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002e080 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002a420 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002a42c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002a43c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002a448 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002a458 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002a464 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002a474 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002a480 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002a490 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002a49c l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002a4ac l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002a4bc l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002a4c8 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002a4d4 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002a4e0 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002a4ec l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002a4f8 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002a504 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002a510 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002a520 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002a530 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002e088 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002e08c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002e090 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002e098 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002a53c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002a548 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002a554 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002a560 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002e0a0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002a56c l     O .rodata	00000009 _ZL17pstrUsageFontData
0002a578 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002a584 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002a590 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002a5a0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002a5b0 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002a5c0 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002a5cc l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002a5d8 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002a5e4 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002a5f0 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002a5fc l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002a608 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002a614 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002a620 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002a62c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002a63c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002a64c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002a65c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002a668 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002a674 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002a684 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002e0a8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002a690 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002a6a0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002a6b0 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002a6bc l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002a6c8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002a6d8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002a6e8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002a6f8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002a708 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002a714 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002a720 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002a72c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002a73c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002a74c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002a75c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002a76c l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002e0b0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002e0b8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002a77c l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002e0c0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002e0c8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002e0d0 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002e0d8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002a788 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002e0e0 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002a794 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002e0e8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002e0f0 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002a7a0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002a7b0 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002a7c0 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002a7d0 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002a7dc l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002a7e8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002a7fc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002a810 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002a824 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002a838 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002a848 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002a858 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002a864 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002a870 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002a880 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002a88e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002a89e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002e0f8 l     O .rwdata	00000004 _ZL4keys
0002e0fc l     O .rwdata	00000004 _ZL4adsr
0000a638 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a6a0 l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b8d4 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b978 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000bb84 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000bbd8 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000bc64 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000bd98 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000be20 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000c04c l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c924 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000cc0c l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
000314d0 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000ccc4 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000ce74 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0003136c l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000e124 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00031374 l     O .bss	00000004 fc_static
0000e23c l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000e2fc l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002af84 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002ad62 l     O .rodata	00000010 zeroes.4389
0002ad72 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002ad82 l     O .rodata	00000010 zeroes.4404
00013e5c l     F .text	000000bc __sbprintf
0002ad92 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0001406c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00015bc4 l     F .text	00000008 __fp_unlock
00015bd8 l     F .text	0000019c __sinit.part.1
00015d74 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002b7d0 l     O .rwdata	00000020 lc_ctype_charset
0002b7b0 l     O .rwdata	00000020 lc_message_charset
0002b7f0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002adc0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002aee4 l     O .rodata	00000010 zeroes.4333
0002aef4 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
00019d74 l     F .text	000000fc __sprint_r.part.0
0002af04 l     O .rodata	00000010 zeroes.4349
0001b3b0 l     F .text	000000bc __sbprintf
0002af14 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001f1b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001f2cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001f32c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001f440 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001f528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001f694 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001f780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001f95c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002e158 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001fbd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001fcb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001fdf0 l     F .text	00000034 alt_dev_reg
0002b9d0 l     O .rwdata	00000038 i2c_0
0002ba08 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001fed0 l     F .text	00000110 optional_irq_callback
00020030 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021d0c l     F .text	0000020c altera_avalon_jtag_uart_irq
00021f18 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002274c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022ae4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022fd4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023134 l     F .text	0000003c alt_get_errno
00023170 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000313ac g     O .bss	00000004 alt_instruction_exception_handler
0000cdcc g     F .text	00000028 __cxa_free_exception
00024058  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000f224 g     F .text	00000018 putchar
0000b428 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00017e10 g     F .text	00000074 _mprec_log10
0000491c  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b874 g     F .text	00000018 _ZSt10unexpectedv
00017efc g     F .text	0000008c __any_on
0001babc g     F .text	00000054 _isatty_r
0002adcc g     O .rodata	00000028 __mprec_tinytens
0001f898 g     F .text	0000007c alt_main
00006d44 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000f23c g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
00031508 g     O .bss	00000100 alt_irq
0000cf68 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00009770 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001bb10 g     F .text	00000060 _lseek_r
0000e3b8 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002e170 g       *ABS*	00000000 __flash_rwdata_start
000066e4 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001dbf4 g     F .text	00000088 .hidden __eqdf2
0000491c  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000029a8 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c9f8 g     F .text	00000084 __cxa_rethrow
0000e344 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b8b0 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006f88 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000e3a8 g     F .text	00000010 .hidden _Unwind_GetIP
00031608 g       *ABS*	00000000 __alt_heap_start
000090b0  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000f608 g     F .text	0000005c _kill_r
000072f4 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000f1e0 g     F .text	0000003c printf
0002407c  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001bbd0 g     F .text	0000009c _wcrtomb_r
0000f3d0 g     F .text	00000084 _signal_r
0000646c  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000187a0 g     F .text	0000005c __sseek
00015f24 g     F .text	00000010 __sinit
0001b46c g     F .text	00000140 __swbuf_r
00009de4 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000ce48 g     F .text	0000002c __cxa_free_dependent_exception
0000a77c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000048bc  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
000169f8 g     F .text	0000007c _setlocale_r
0002a9a8  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00015d7c g     F .text	00000078 __sfmoreglue
00020728 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001f938 g     F .text	00000024 __malloc_unlock
00005690 g     F .text	00000080 _Z8set_notehh
0000cf68 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00008a00 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000b1b0 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00009198  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
0000203c g     F .text	000007ac _ZN3USB11ConfiguringEhhb
0000cbec g     F .text	00000020 _ZSt18uncaught_exceptionv
0000d1b4 g     F .text	00000440 .hidden __divsf3
00021940 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001dac g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
0000a1b8 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000b4a4 g     F .text	00000020 __cxa_deleted_virtual
000204ac g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002e18  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
0000925c g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
00009bf4 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00016d74 g     F .text	0000015c memmove
00006188  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000cf40 g     F .text	00000004 _ZNSt9exceptionD2Ev
00015f0c g     F .text	00000018 _cleanup
0000a454 g     F .text	00000088 _Z7controlv
00021190 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00016ed0 g     F .text	000000a8 _Balloc
0000dfc4 g     F .text	00000070 .hidden __fixsfsi
00003f1c g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001dc7c g     F .text	000000dc .hidden __gtdf2
00003fe0 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002abdc  w    O .rodata	00000014 _ZTVSt13bad_exception
000237c4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001fc0c g     F .text	00000078 times
00009118  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000e3f4 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002ca84  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008984 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
00004de8  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001ba60 g     F .text	0000005c _fstat_r
000098c0 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00031384 g     O .bss	00000004 errno
00005ec8 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
0001871c g     F .text	00000008 __seofread
0000946c g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
000189d4 g     F .text	000013a0 ___svfiprintf_internal_r
0000e5d0 g     F .text	00000074 .hidden _Unwind_Backtrace
00031398 g     O .bss	00000004 alt_argv
000035a8 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00034a68 g       *ABS*	00000000 _gp
0001fc84 g     F .text	00000030 usleep
00021984 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000dae0 g     F .text	000004e4 .hidden __subsf3
00008310 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002d224  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001f420 g     F .text	00000020 getpid
0000c6f4 g     F .text	00000230 __cxa_call_unexpected
0000ca7c g     F .text	00000008 __cxa_get_exception_ptr
0002063c g     F .text	00000044 alt_avalon_i2c_is_busy
0002b850 g     O .rwdata	00000180 alt_fd_list
0000961c g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00023fc8  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
000072f4 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
000046f4 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000f21c g     F .text	00000008 _putchar_r
0000e4e4 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
000203e0 g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c4c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000e374 g     F .text	00000018 .hidden _Unwind_GetCFA
0000b88c g     F .text	00000014 _ZSt13set_terminatePFvvE
00022c84 g     F .text	00000090 alt_find_dev
00023fbc  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
00011b5c g     F .text	00000008 _times_r
0000ef40 g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00006250  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000cdf4 g     F .text	00000054 __cxa_allocate_dependent_exception
00015bcc g     F .text	0000000c _cleanup_r
0000b53c g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001f034 g     F .text	000000dc .hidden __floatsidf
00024070  w    O .rodata	0000000c _ZTV13USBReadParser
000230b8 g     F .text	0000007c alt_io_redirect
0001dd58 g     F .text	000000f4 .hidden __ltdf2
00004c3c  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00023df0 g       *ABS*	00000000 __DTOR_END__
0000b554 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00020fd0 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000f2fc g     F .text	00000014 puts
0002aa30  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000239b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008398 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000096a4 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00018654 g     F .text	00000074 __fpclassifyd
0000a340 g     F .text	00000114 _Z9MIDI_pollv
00017d6c g     F .text	000000a4 __ratio
0001b394 g     F .text	0000001c __vfiprintf_internal
00007e14 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00022110 g     F .text	0000021c altera_avalon_jtag_uart_read
0000e70c g     F .text	00000014 malloc
0000f1b0 g     F .text	00000030 _printf_r
0000d0d0 g     F .text	00000064 .hidden __udivsi3
0001f47c g     F .text	000000ac isatty
0000f454 g     F .text	000000bc _raise_r
00009860 g     F .text	0000003c _ZN8MAX3421eC2Ev
0002ae1c g     O .rodata	000000c8 __mprec_tens
00006ff4 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
00016a74 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
00004bf4  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0002024c g     F .text	00000098 alt_avalon_i2c_enable
00031380 g     O .bss	00000004 __malloc_top_pad
0000f664 g     F .text	00000004 _getpid_r
00021874 g     F .text	00000068 alt_avalon_i2c_int_disable
00031364 g     O .bss	00000001 usb_task_state
0002e138 g     O .rwdata	00000004 __mb_cur_max
00016aa4 g     F .text	0000000c _localeconv_r
0000aa40 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003f4c g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00007474 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00017304 g     F .text	0000003c __i2b
000163a8 g     F .text	000004c8 __sfvwrite_r
0000b6d4 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000f510 g     F .text	000000a8 __sigtramp_r
000086cc g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002ed0  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000f310 g     F .text	00000054 _sbrk_r
0002aa78  w    O .rodata	00000020 _ZTVSt9type_info
00004cec  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009504 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001bb70 g     F .text	00000060 _read_r
0000cf48 g     F .text	0000000c _ZNKSt9exception4whatEv
00005710 g     F .text	00000048 _Z8set_adsrhm
0002e150 g     O .rwdata	00000004 alt_max_fd
0000653c g     F .text	00000050 _Z9E_Notifycci
0000880c g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001b754 g     F .text	000000f0 _fclose_r
00015b94 g     F .text	00000030 fflush
0000a250 g     F .text	00000078 _Z6onInitv
0003137c g     O .bss	00000004 __malloc_max_sbrked_mem
00009b6c g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0002139c g     F .text	00000210 alt_avalon_i2c_master_receive
0002660c  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001c978 g     F .text	000008ac .hidden __adddf3
0002a9dc  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004d18  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008f64 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017b14 g     F .text	0000010c __b2d
0001c3b4 g     F .text	000005c4 .hidden __umoddi3
0001f7bc g     F .text	000000dc lseek
00006278  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b598 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00006694 g     F .text	00000028 _Z8E_Notifyhi
0000b480 g     F .text	00000004 _ZdlPv
000218dc g     F .text	00000064 alt_avalon_i2c_int_enable
0002e128 g     O .rwdata	00000004 _global_impure_ptr
0000aa50 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
000180f0 g     F .text	00000564 _realloc_r
00031608 g       *ABS*	00000000 __bss_end
00022ee4 g     F .text	000000f0 alt_iic_isr_register
000236bc g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000e32c g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001bdb8 g     F .text	000005fc .hidden __udivdi3
0002179c g     F .text	00000058 alt_avalon_i2c_int_status_get
0001b9bc g     F .text	00000024 _fputwc_r
0002adf4 g     O .rodata	00000028 __mprec_bigtens
000170e8 g     F .text	00000104 __s2b
0000e6a8 g     F .text	00000018 abort
0001f110 g     F .text	000000a8 .hidden __floatunsidf
000263d0  w    O .rodata	00000014 _ZTS17MouseReportParser
00017854 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
000091d4  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
0000378c g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000cb38 g     F .text	000000b4 __cxa_end_catch
00009598 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00015f44 g     F .text	00000018 __fp_lock_all
000240b4  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00022e98 g     F .text	0000004c alt_ic_irq_enabled
0000cf44 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0000319c  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00006228  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
00023620 g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00026598  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
000200cc g     F .text	00000054 alt_avalon_i2c_register_callback
000313a0 g     O .bss	00000004 alt_irq_active
00020120 g     F .text	000000ec alt_avalon_i2c_init
0000b84c g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002b828 g     O .rwdata	00000028 alt_dev_null
0000aa84 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000064a0  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000cf70 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004f98  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
00003348  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
00002c70 g     F .text	00000084 _ZN3USB7setConfEhhh
000090a8 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002aad4  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
00022ac4 g     F .text	00000020 alt_dcache_flush_all
000171ec g     F .text	00000068 __hi0bits
00026618  w    O .rodata	0000000c _ZTI14MidiDescParser
00009dbc g     F .text	00000028 _Z10Vbus_powerb
0002e110  w    O .rwdata	00000008 _ZTISt9exception
0001efb4 g     F .text	00000080 .hidden __fixdfsi
000263e4  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a6d0  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002e170 g       *ABS*	00000000 __ram_rwdata_end
0000b424 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002e148 g     O .rwdata	00000008 alt_dev_list
0000cf70 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001fcf0 g     F .text	00000100 write
00017f88 g     F .text	000000a0 _putc_r
0000a22c g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
00020a5c g     F .text	0000004c alt_avalon_i2c_check_arblost
0000b438 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004e10  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000d5f4 g     F .text	000000bc .hidden __gtsf2
00021838 g     F .text	0000003c alt_avalon_i2c_int_clear
00009230  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00023fa8  w    O .rodata	00000014 _ZTV11AddressPool
0002af84 g       *ABS*	00000000 __ram_rodata_end
0001f368 g     F .text	000000b8 fstat
00002d4c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001f564 g     F .text	00000130 kill
00006518  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001dd58 g     F .text	000000f4 .hidden __ledf2
000240dc  w    O .rodata	00000020 _ZTI7XBOXONE
0002e15c g     O .rwdata	00000008 alt_avalon_i2c_list
00004b7c  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
0002632a g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
000175cc g     F .text	00000140 __pow5mult
00005164  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
00019e88 g     F .text	0000150c ___vfiprintf_internal_r
00031390 g     O .bss	00000004 __nlocale_changed
0000d134 g     F .text	00000058 .hidden __umodsi3
0000b430 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00004958  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
0000a2c8 g     F .text	00000078 _Z10MIDI_setupv
000027e8 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b8a0 g     F .text	00000010 _ZSt13get_terminatev
00031608 g       *ABS*	00000000 end
00024064  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004f64  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
00009a80 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00006438  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000e5b8 g     F .text	00000018 .hidden _Unwind_DeleteException
00021c4c g     F .text	000000c0 altera_avalon_jtag_uart_init
00006200  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0002020c g     F .text	00000040 alt_avalon_i2c_open
00026340 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b604 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000aa40 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002d218 g     O .rwdata	00000004 UsbDEBUGlvl
00023de8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00020be4 g     F .text	000000e8 alt_avalon_i2c_master_tx
000227c4 g     F .text	0000007c alt_avalon_timer_sc_init
0000e644 g     F .text	00000064 .hidden __clzsi2
0000b4c4 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0002232c g     F .text	00000224 altera_avalon_jtag_uart_write
00015f34 g     F .text	00000004 __sfp_lock_acquire
0002ab64  w    O .rodata	00000012 _ZTSSt13bad_exception
00016c90 g     F .text	000000e4 memchr
00011b64 g     F .text	000022dc ___vfprintf_internal_r
0000f668 g     F .text	00000058 _sprintf_r
000048bc  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00016098 g     F .text	00000310 _free_r
000233b8 g     F .text	0000022c alt_printf
00016a80 g     F .text	00000010 __locale_mb_cur_max
00023c30 g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0003138c g     O .bss	00000004 __mlocale_changed
0001ffe0 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002e130 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003f24 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
000313a4 g     O .bss	00000004 _alt_tick_rate
0002aa68  w    O .rodata	0000000d _ZTSSt9type_info
000215ac g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000b484 g     F .text	00000020 __cxa_pure_virtual
00023f94  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
0002411c  w    O .rodata	00000010 _ZTS13USBReadParser
000219d0 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0001770c g     F .text	00000148 __lshift
00022550 g     F .text	000001fc alt_avalon_spi_command
000313a8 g     O .bss	00000004 _alt_nticks
0000f5cc g     F .text	00000018 signal
0001f998 g     F .text	00000104 read
000059f0 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001fe5c g     F .text	00000074 alt_sys_init
00024018  w    O .rodata	00000040 _ZTV7XBOXONE
00018804 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00023b18 g     F .text	00000118 __register_exitproc
00002bdc g     F .text	00000094 _ZN3USB7setAddrEhhh
0000658c g     F .text	00000084 _Z8E_NotifyPKci
000265d4  w    O .rodata	0000000c _ZTV14MidiDescParser
00009140  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
000033dc  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a7c0 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00006404  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
00004da8  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00020e08 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00017340 g     F .text	0000028c __multiply
00002b34 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002d206 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00021fb8 g     F .text	00000068 altera_avalon_jtag_uart_close
00002d4c  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000d18c g     F .text	00000028 .hidden __mulsi3
0002af84 g       *ABS*	00000000 __ram_rwdata_start
0000e414 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00023df0 g       *ABS*	00000000 __ram_rodata_start
000314e0 g     O .bss	00000028 __malloc_current_mallinfo
00005000  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000e528 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00017c20 g     F .text	0000014c __d2b
0002ac04  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000b424 g     F .text	00000004 _ZNSt9type_infoD2Ev
000090f0  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004a14  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002ca70  w    O .rwdata	00000008 _ZTI11AddressPool
0000cf74 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a9bc g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00026624  w    O .rodata	00000011 _ZTS14MidiDescParser
0002aa08  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00021ae8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000238f0 g     F .text	000000c4 alt_get_fd
00005c0c g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0002296c g     F .text	00000158 alt_busy_sleep
00006ae4 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002e120  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001b624 g     F .text	00000054 _close_r
00023a9c g     F .text	0000007c memcmp
00020680 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00021ba8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007ee8 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
00031608 g       *ABS*	00000000 __alt_stack_base
00021bf8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005758 g     F .text	00000298 _Z9calc_adsrtttf
0000a77c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00008150 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004654 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00013f18 g     F .text	00000154 __swsetup_r
0000e56c g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00031368 g     O .bss	00000004 i2c_dev
0001d224 g     F .text	000009d0 .hidden __divdf3
0000a720  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00015df4 g     F .text	00000118 __sfp
00017e84 g     F .text	00000078 __copybits
0000b428 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002b3a8 g     O .rwdata	00000408 __malloc_av_
000049d8  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00015f40 g     F .text	00000004 __sinit_lock_release
0001de4c g     F .text	0000086c .hidden __muldf3
000186c8 g     F .text	00000054 __sread
00004fcc  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002abc8  w    O .rodata	00000014 _ZTVSt9exception
0000cf6c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002d18  w    F .text	00000034 _ZN11AddressPoolC2Ev
000237e8 g     F .text	00000108 alt_find_file
00004cc0  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
00022b20 g     F .text	000000a4 alt_dev_llist_insert
0001f914 g     F .text	00000024 __malloc_lock
0001fb20 g     F .text	000000b0 sbrk
0000f8a0 g     F .text	000022bc ___svfprintf_internal_r
00020aa8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00020a10 g     F .text	0000004c alt_avalon_i2c_check_nack
0002ab04  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c968 g     F .text	00000090 __cxa_throw
00015b38 g     F .text	0000005c _fflush_r
0000e3d8 g     F .text	00000010 .hidden _Unwind_SetIP
00006ef0 g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001b678 g     F .text	000000dc _calloc_r
00024108  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
000066bc g     F .text	00000028 _Z8E_Notifydi
00007d0c g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
0003135c g       *ABS*	00000000 __bss_start
0002ca94  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000f088 g     F .text	00000128 memset
0000880c g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
000051e0  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000a4dc g     F .text	0000015c main
00009af4 g     F .text	00000078 _ZN8MAX3421e5regRdEh
00009cf0 g     F .text	000000cc _ZN8MAX3421e5resetEv
000209dc g     F .text	00000034 alt_avalon_i2c_master_target_set
0003139c g     O .bss	00000004 alt_envp
0002412c  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00031378 g     O .bss	00000004 __malloc_max_total_mem
00021b48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00031365 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001b5ac g     F .text	00000018 __swbuf
0000cf28 g     F .text	0000000c __cxa_get_globals_fast
000217f4 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
000071a0 g     F .text	000000d4 _Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s
00009860 g     F .text	0000003c _ZN8MAX3421eC1Ev
00004f98  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
00002cf4  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
000187fc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001b844 g     F .text	00000014 fclose
0000a748  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
00004528 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
00006610 g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00014294 g     F .text	00001688 _dtoa_r
0000e734 g     F .text	0000080c _malloc_r
0001bd2c g     F .text	00000030 __ascii_wctomb
0000cf54 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002e154 g     O .rwdata	00000004 alt_errno
000263c4  w    O .rodata	0000000c _ZTI17MouseReportParser
0000f5e4 g     F .text	00000010 _init_signal
00002a3c g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006c9c g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002aaf8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00004798 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
00016870 g     F .text	000000c4 _fwalk
0000989c g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
000032e0  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000cf44 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00018028 g     F .text	000000c8 putc
0000cfd8 g     F .text	00000084 .hidden __divsi3
00026638  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00015f74 g     F .text	00000124 _malloc_trim_r
00023df0 g       *ABS*	00000000 __CTOR_END__
0000d6b0 g     F .text	00000430 .hidden __mulsf3
00004bb8  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
000091fc  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00026378  w    O .rodata	00000028 _ZTV17MouseReportParser
0000f72c g     F .text	000000dc strcmp
000035a8 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00023df0 g       *ABS*	00000000 __flash_rodata_start
0002abf0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a6f8  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00023df0 g       *ABS*	00000000 __DTOR_LIST__
000265e0  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001dbf4 g     F .text	00000088 .hidden __nedf2
0001fe24 g     F .text	00000038 alt_irq_init
0001fa9c g     F .text	00000084 alt_release_fd
0000a78c g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000240fc  w    O .rodata	00000009 _ZTS7XBOXONE
0000f6c0 g     F .text	0000006c sprintf
0002ac18 g     O .rodata	00000100 .hidden __clz_tab
00031388 g     O .bss	00000004 _PathLocale
00023a50 g     F .text	00000014 atexit
0000d5f4 g     F .text	000000bc .hidden __gesf2
0001b5c4 g     F .text	00000060 _write_r
00002920 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002ea4  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
00016ab0 g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
0002634c  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009c74 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000e40c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002aa3c  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000ced0 g     F .text	00000058 __cxa_call_terminate
0002e12c g     O .rwdata	00000004 _impure_ptr
0002e118  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00023fe4  w    O .rodata	0000000e _ZTS11AddressPool
00031394 g     O .bss	00000004 alt_argc
000034e0  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
0001591c g     F .text	0000021c __sflush_r
000091fc  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00003130  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00022c24 g     F .text	00000060 _do_dtors
0003146c g     O .bss	00000064 Midi
00016a9c g     F .text	00000008 __locale_cjk_lang
000209a4 g     F .text	00000038 alt_avalon_i2c_master_target_get
000208b4 g     F .text	000000f0 alt_avalon_i2c_send_address
0000b8c4 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002d18  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
00017ab0 g     F .text	00000064 __ulp
0000e3fc g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00015f5c g     F .text	00000018 __fp_unlock_all
00005000  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
00004618 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
00004c60  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002e140 g     O .rwdata	00000008 alt_fs_list
0002aba4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000263ac  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004fcc  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000e3e8 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004c8c  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000ca84 g     F .text	000000b4 __cxa_begin_catch
00004810 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b554 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b864 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
000061d8  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
00016ac8 g     F .text	0000000c localeconv
00009fe0 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004e38  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000cf64 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00021a80 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002e10c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00007274 g     F .text	00000080 _Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
000092fc g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00022d34 g     F .text	00000050 alt_ic_isr_register
000202e4 g     F .text	0000004c alt_avalon_i2c_disable
0000cd6c g     F .text	00000060 __cxa_allocate_exception
0002a9d0  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002e170 g       *ABS*	00000000 _edata
00004f64  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
00031608 g       *ABS*	00000000 _end
0000abac g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000c0f4 g     F .text	00000600 __gxx_personality_sj0
0001b858 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	00000430 _ZN3USB4TaskEv
00022020 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002ca8c  w    O .rwdata	00000008 _ZTI13USBReadParser
00020330 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000cf40 g     F .text	00000004 _ZNSt9exceptionD1Ev
00022e0c g     F .text	0000008c alt_ic_irq_disable
00006160  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00018724 g     F .text	0000007c __swrite
0002e134 g     O .rwdata	00000004 __malloc_trim_threshold
00016a90 g     F .text	0000000c __locale_msgcharset
00023a64 g     F .text	00000038 exit
0000e38c g     F .text	0000001c .hidden _Unwind_SetGR
000061b0  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00016934 g     F .text	000000c4 _fwalk_reent
0000a920 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000e034 g     F .text	000000f0 .hidden __floatunsisf
000178b4 g     F .text	000001fc __mdiff
0000b78c g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000d05c g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00015f38 g     F .text	00000004 __sfp_lock_release
0002ab78  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000064c8  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
000040d8 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
00020540 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009ec8 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
000207d0 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000265ec  w    O .rodata	00000020 _ZTI9USBH_MIDI
000044a0 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000cf78 g     F .text	00000060 .hidden __fixunssfsi
00007c94 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001f2f8 g     F .text	00000034 _exit
00022840 g     F .text	0000012c alt_alarm_start
000263a0  w    O .rodata	0000000c _ZTI20KeyboardReportParser
000082ac g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000e358 g     F .text	0000001c .hidden _Unwind_GetGR
0000cf34 g     F .text	0000000c __cxa_get_globals
000067ec g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
00016ad4 g     F .text	000001bc __smakebuf_r
0002e108 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004c18  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000f808 g     F .text	00000098 strlen
0000f364 g     F .text	0000006c _init_signal_r
0002e100  w    O .rwdata	00000008 _ZTISt9type_info
0002325c g     F .text	0000015c open
0001dc7c g     F .text	000000dc .hidden __gedf2
000235e4 g     F .text	0000003c alt_putchar
0002ab54  w    O .rodata	0000000d _ZTSSt9exception
0000e6c0 g     F .text	0000004c clock
000064f0  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
0000a154 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00026334 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
0000994c g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002e13c g     O .rwdata	00000004 __wctomb
0000cf60 g     F .text	00000004 _ZNSt9exceptionD0Ev
00019e70 g     F .text	00000018 __sprint_r
00022d14 g     F .text	00000020 alt_icache_flush_all
0000e404 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
000313b0 g     O .bss	000000bc Usb
0002e164 g     O .rwdata	00000004 alt_priority_mask
000049d8  w    F .text	0000003c _ZN11ByteSkipperC2Ev
00022d84 g     F .text	00000088 alt_ic_irq_enable
00013e40 g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001bd5c g     F .text	0000005c _wctomb_r
0001e6b8 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
00003de0 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017254 g     F .text	000000b0 __lo0bits
0002e168 g     O .rwdata	00000008 alt_alarm_list
00022bc4 g     F .text	00000060 _do_ctors
000240a8  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000f5f4 g     F .text	00000014 __sigtramp
000093b4 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001bc6c g     F .text	000000c0 wcrtomb
0001f1f4 g     F .text	000000d8 close
00021a34 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002ab84  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001f6fc g     F .text	00000084 alt_load
00020ccc g     F .text	0000013c alt_avalon_i2c_master_rx
0000b43c g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
00004a7c  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001b9e0 g     F .text	00000080 fputwc
0000f5b8 g     F .text	00000014 raise
0002d20c  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000e720 g     F .text	00000014 free
00015f3c g     F .text	00000004 __sinit_lock_acquire
00016fa0 g     F .text	00000148 __multadd
0000b564 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00016f78 g     F .text	00000028 _Bfree
00006a40 g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10854204 	addi	r2,r2,5384
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10854204 	addi	r2,r2,5384
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b25117 	ldw	r2,-14012(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b25117 	ldw	r2,-14012(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6929a14 	ori	gp,gp,19048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	1084d714 	ori	r2,r2,4956

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c58214 	ori	r3,r3,5640

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001f6fc0 	call	1f6fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001f8980 	call	1f898 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210f7c04 	addi	r4,r4,15856
     28c:	000f2fc0 	call	f2fc <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210f7f04 	addi	r4,r4,15868
     2d0:	000f2fc0 	call	f2fc <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210f8404 	addi	r4,r4,15888
     304:	000f2fc0 	call	f2fc <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210f8704 	addi	r4,r4,15900
     340:	000f2fc0 	call	f2fc <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210f8b04 	addi	r4,r4,15916
     374:	000f2fc0 	call	f2fc <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210f8f04 	addi	r4,r4,15932
     3b0:	000f2fc0 	call	f2fc <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210f9204 	addi	r4,r4,15944
     3ec:	000f2fc0 	call	f2fc <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210f9504 	addi	r4,r4,15956
     428:	000f2fc0 	call	f2fc <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210f9804 	addi	r4,r4,15968
     464:	000f2fc0 	call	f2fc <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210f9b04 	addi	r4,r4,15980
     4a0:	000f2fc0 	call	f2fc <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210f9f04 	addi	r4,r4,15996
     4dc:	000f2fc0 	call	f2fc <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210fa304 	addi	r4,r4,16012
     510:	000f2fc0 	call	f2fc <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000d18c0 	call	d18c <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000d0d00 	call	d0d0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000d0d00 	call	d0d0 <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000d0d00 	call	d0d0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000d18c0 	call	d18c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000d0d00 	call	d0d0 <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000d0d00 	call	d0d0 <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000d18c0 	call	d18c <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000d0d00 	call	d0d0 <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000d18c0 	call	d18c <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000d18c0 	call	d18c <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000d0d00 	call	d0d0 <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000d18c0 	call	d18c <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000e6c00 	call	e6c0 <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000e6c00 	call	e6c0 <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000e6c00 	call	e6c0 <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	00098600 	call	9860 <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	0002d4c0 	call	2d4c <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23d45 	stb	r2,-14091(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23d43 	ldbu	r2,-14091(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23d45 	stb	r2,-14091(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002e180 	call	2e18 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002e180 	call	2e18 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002e180 	call	2e18 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	000994c0 	call	994c <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	0009b6c0 	call	9b6c <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	000994c0 	call	994c <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	000a1540 	call	a154 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	000989c0 	call	989c <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23d43 	ldbu	r2,-14091(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23d43 	ldbu	r2,-14091(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23e15 	stw	r2,-14088(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23d45 	stb	r2,-14091(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23d43 	ldbu	r2,-14091(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	1800a01e 	bne	r3,zero,1c10 <_ZN3USB4TaskEv+0x3f4>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	0000a406 	br	1c34 <_ZN3USB4TaskEv+0x418>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00009f06 	br	1c34 <_ZN3USB4TaskEv+0x418>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	1800741e 	bne	r3,zero,1b90 <_ZN3USB4TaskEv+0x374>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18009b1e 	bne	r3,zero,1c34 <_ZN3USB4TaskEv+0x418>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00009606 	br	1c34 <_ZN3USB4TaskEv+0x418>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23d45 	stb	r2,-14091(gp)
                        break;
    1a7c:	00006d06 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23e17 	ldw	r2,-14088(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10005e26 	beq	r2,zero,1c18 <_ZN3USB4TaskEv+0x3fc>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23d45 	stb	r2,-14091(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23d45 	stb	r2,-14091(gp)
                        break;
    1ac0:	00005c06 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10004f26 	beq	r2,zero,1c20 <_ZN3USB4TaskEv+0x404>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23d45 	stb	r2,-14091(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00004206 	br	1c20 <_ZN3USB4TaskEv+0x404>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10003c26 	beq	r2,zero,1c28 <_ZN3USB4TaskEv+0x40c>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23d45 	stb	r2,-14091(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23e15 	stw	r2,-14088(gp)
                        }
                        break;
    1b4c:	00003606 	br	1c28 <_ZN3USB4TaskEv+0x40c>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23e17 	ldw	r2,-14088(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10003026 	beq	r2,zero,1c30 <_ZN3USB4TaskEv+0x414>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23d45 	stb	r2,-14091(gp)
                        else break; // don't fall through
                        printf("IN: %X\n", usb_task_state);
    1b78:	d0b23d43 	ldbu	r2,-14091(gp)
    1b7c:	10803fcc 	andi	r2,r2,255
    1b80:	100b883a 	mov	r5,r2
    1b84:	010000b4 	movhi	r4,2
    1b88:	210fa704 	addi	r4,r4,16028
    1b8c:	000f1e00 	call	f1e0 <printf>
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);
                	printf("CONFIGURING\n");
    1b90:	010000b4 	movhi	r4,2
    1b94:	210fa904 	addi	r4,r4,16036
    1b98:	000f2fc0 	call	f2fc <puts>

                        rcode = Configuring(0, 0, lowspeed);
    1b9c:	e0bffc03 	ldbu	r2,-16(fp)
    1ba0:	100f883a 	mov	r7,r2
    1ba4:	000d883a 	mov	r6,zero
    1ba8:	000b883a 	mov	r5,zero
    1bac:	e13ffe17 	ldw	r4,-8(fp)
    1bb0:	000203c0 	call	203c <_ZN3USB11ConfiguringEhhb>
    1bb4:	e0bffd05 	stb	r2,-12(fp)
                        printf("RCODING\n");
    1bb8:	010000b4 	movhi	r4,2
    1bbc:	210fac04 	addi	r4,r4,16048
    1bc0:	000f2fc0 	call	f2fc <puts>

                        if(rcode) {
    1bc4:	e0bffd03 	ldbu	r2,-12(fp)
    1bc8:	10000b26 	beq	r2,zero,1bf8 <_ZN3USB4TaskEv+0x3dc>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1bcc:	e0bffd03 	ldbu	r2,-12(fp)
    1bd0:	108034a0 	cmpeqi	r2,r2,210
    1bd4:	10000a1e 	bne	r2,zero,1c00 <_ZN3USB4TaskEv+0x3e4>
                                        usb_error = rcode;
    1bd8:	e0bffd03 	ldbu	r2,-12(fp)
    1bdc:	d0b23d05 	stb	r2,-14092(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1be0:	00bfe804 	movi	r2,-96
    1be4:	d0b23d45 	stb	r2,-14091(gp)
                                        printf("ERROR\n");
    1be8:	010000b4 	movhi	r4,2
    1bec:	210fae04 	addi	r4,r4,16056
    1bf0:	000f2fc0 	call	f2fc <puts>
    1bf4:	00000206 	br	1c00 <_ZN3USB4TaskEv+0x3e4>
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bf8:	00bfe404 	movi	r2,-112
    1bfc:	d0b23d45 	stb	r2,-14091(gp)
                        printf("CONFIG\n");
    1c00:	010000b4 	movhi	r4,2
    1c04:	210fb004 	addi	r4,r4,16064
    1c08:	000f2fc0 	call	f2fc <puts>
                        break;
    1c0c:	00000906 	br	1c34 <_ZN3USB4TaskEv+0x418>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1c10:	0001883a 	nop
    1c14:	00000706 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1c18:	0001883a 	nop
    1c1c:	00000506 	br	1c34 <_ZN3USB4TaskEv+0x418>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1c20:	0001883a 	nop
    1c24:	00000306 	br	1c34 <_ZN3USB4TaskEv+0x418>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1c28:	0001883a 	nop
    1c2c:	00000106 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1c30:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1c34:	0001883a 	nop
    1c38:	e037883a 	mov	sp,fp
    1c3c:	dfc00117 	ldw	ra,4(sp)
    1c40:	df000017 	ldw	fp,0(sp)
    1c44:	dec00204 	addi	sp,sp,8
    1c48:	f800283a 	ret

00001c4c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c4c:	defff704 	addi	sp,sp,-36
    1c50:	dfc00815 	stw	ra,32(sp)
    1c54:	df000715 	stw	fp,28(sp)
    1c58:	df000704 	addi	fp,sp,28
    1c5c:	e13ffc15 	stw	r4,-16(fp)
    1c60:	2809883a 	mov	r4,r5
    1c64:	3007883a 	mov	r3,r6
    1c68:	3805883a 	mov	r2,r7
    1c6c:	e13ffd05 	stb	r4,-12(fp)
    1c70:	e0fffe05 	stb	r3,-8(fp)
    1c74:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c78:	e03ff915 	stw	zero,-28(fp)
    1c7c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c80:	e0bffc17 	ldw	r2,-16(fp)
    1c84:	000b883a 	mov	r5,zero
    1c88:	1009883a 	mov	r4,r2
    1c8c:	0002e180 	call	2e18 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c90:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c94:	e0bff917 	ldw	r2,-28(fp)
    1c98:	1000021e 	bne	r2,zero,1ca4 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c9c:	00bff584 	movi	r2,-42
    1ca0:	00003d06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1ca4:	e0bff917 	ldw	r2,-28(fp)
    1ca8:	10c00003 	ldbu	r3,0(r2)
    1cac:	11000043 	ldbu	r4,1(r2)
    1cb0:	2008923a 	slli	r4,r4,8
    1cb4:	20c6b03a 	or	r3,r4,r3
    1cb8:	11000083 	ldbu	r4,2(r2)
    1cbc:	2008943a 	slli	r4,r4,16
    1cc0:	20c6b03a 	or	r3,r4,r3
    1cc4:	108000c3 	ldbu	r2,3(r2)
    1cc8:	1004963a 	slli	r2,r2,24
    1ccc:	10c4b03a 	or	r2,r2,r3
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1cd4:	00bff5c4 	movi	r2,-41
    1cd8:	00002f06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1cdc:	e0bff917 	ldw	r2,-28(fp)
    1ce0:	e0ffff03 	ldbu	r3,-4(fp)
    1ce4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ce8:	e0bffc17 	ldw	r2,-16(fp)
    1cec:	e0fffd03 	ldbu	r3,-12(fp)
    1cf0:	e13ffe03 	ldbu	r4,-8(fp)
    1cf4:	200f883a 	mov	r7,r4
    1cf8:	000d883a 	mov	r6,zero
    1cfc:	180b883a 	mov	r5,r3
    1d00:	1009883a 	mov	r4,r2
    1d04:	0002ed00 	call	2ed0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1d08:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1d0c:	e0bffb03 	ldbu	r2,-20(fp)
    1d10:	1000021e 	bne	r2,zero,1d1c <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1d14:	00bff504 	movi	r2,-44
    1d18:	00001f06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1d1c:	e0bffc17 	ldw	r2,-16(fp)
    1d20:	e0fffb03 	ldbu	r3,-20(fp)
    1d24:	180b883a 	mov	r5,r3
    1d28:	1009883a 	mov	r4,r2
    1d2c:	0002e180 	call	2e18 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1d30:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1d34:	e0bffa17 	ldw	r2,-24(fp)
    1d38:	1000021e 	bne	r2,zero,1d44 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1d3c:	00bff584 	movi	r2,-42
    1d40:	00001506 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d44:	e0bffa17 	ldw	r2,-24(fp)
    1d48:	e0ffff03 	ldbu	r3,-4(fp)
    1d4c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d50:	e0bffb03 	ldbu	r2,-20(fp)
    1d54:	100f883a 	mov	r7,r2
    1d58:	000d883a 	mov	r6,zero
    1d5c:	000b883a 	mov	r5,zero
    1d60:	e13ffc17 	ldw	r4,-16(fp)
    1d64:	0002bdc0 	call	2bdc <_ZN3USB7setAddrEhhh>
    1d68:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d6c:	e0bffb43 	ldbu	r2,-19(fp)
    1d70:	10000826 	beq	r2,zero,1d94 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d74:	e0bffc17 	ldw	r2,-16(fp)
    1d78:	e0fffb03 	ldbu	r3,-20(fp)
    1d7c:	180b883a 	mov	r5,r3
    1d80:	1009883a 	mov	r4,r2
    1d84:	00031300 	call	3130 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d88:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d8c:	e0bffb43 	ldbu	r2,-19(fp)
    1d90:	00000106 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d94:	0005883a 	mov	r2,zero
};
    1d98:	e037883a 	mov	sp,fp
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret

00001dac <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1dac:	defff804 	addi	sp,sp,-32
    1db0:	dfc00715 	stw	ra,28(sp)
    1db4:	df000615 	stw	fp,24(sp)
    1db8:	df000604 	addi	fp,sp,24
    1dbc:	e13ffb15 	stw	r4,-20(fp)
    1dc0:	3009883a 	mov	r4,r6
    1dc4:	3807883a 	mov	r3,r7
    1dc8:	e0800217 	ldw	r2,8(fp)
    1dcc:	e17ffc05 	stb	r5,-16(fp)
    1dd0:	e13ffd05 	stb	r4,-12(fp)
    1dd4:	e0fffe05 	stb	r3,-8(fp)
    1dd8:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1ddc:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1de0:	e0bffc03 	ldbu	r2,-16(fp)
    1de4:	e0fffb17 	ldw	r3,-20(fp)
    1de8:	10800784 	addi	r2,r2,30
    1dec:	1085883a 	add	r2,r2,r2
    1df0:	1085883a 	add	r2,r2,r2
    1df4:	1885883a 	add	r2,r3,r2
    1df8:	10800017 	ldw	r2,0(r2)
    1dfc:	10800017 	ldw	r2,0(r2)
    1e00:	10800104 	addi	r2,r2,4
    1e04:	10c00017 	ldw	r3,0(r2)
    1e08:	e0bffc03 	ldbu	r2,-16(fp)
    1e0c:	e13ffb17 	ldw	r4,-20(fp)
    1e10:	10800784 	addi	r2,r2,30
    1e14:	1085883a 	add	r2,r2,r2
    1e18:	1085883a 	add	r2,r2,r2
    1e1c:	2085883a 	add	r2,r4,r2
    1e20:	10800017 	ldw	r2,0(r2)
    1e24:	e13ffd03 	ldbu	r4,-12(fp)
    1e28:	e17ffe03 	ldbu	r5,-8(fp)
    1e2c:	e1bfff03 	ldbu	r6,-4(fp)
    1e30:	300f883a 	mov	r7,r6
    1e34:	280d883a 	mov	r6,r5
    1e38:	200b883a 	mov	r5,r4
    1e3c:	1009883a 	mov	r4,r2
    1e40:	183ee83a 	callr	r3
    1e44:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e48:	e0bffa43 	ldbu	r2,-23(fp)
    1e4c:	10803818 	cmpnei	r2,r2,224
    1e50:	10001f1e 	bne	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e54:	e0bffd03 	ldbu	r2,-12(fp)
    1e58:	1000071e 	bne	r2,zero,1e78 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e5c:	01800044 	movi	r6,1
    1e60:	01403a04 	movi	r5,232
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e6c:	01001984 	movi	r4,102
    1e70:	00006840 	call	684 <_Z5delaym>
    1e74:	00002606 	br	1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e78:	e0bffd03 	ldbu	r2,-12(fp)
    1e7c:	e0fffb17 	ldw	r3,-20(fp)
    1e80:	10800784 	addi	r2,r2,30
    1e84:	1085883a 	add	r2,r2,r2
    1e88:	1085883a 	add	r2,r2,r2
    1e8c:	1885883a 	add	r2,r3,r2
    1e90:	10800017 	ldw	r2,0(r2)
    1e94:	10800017 	ldw	r2,0(r2)
    1e98:	10800504 	addi	r2,r2,20
    1e9c:	10c00017 	ldw	r3,0(r2)
    1ea0:	e0bffd03 	ldbu	r2,-12(fp)
    1ea4:	e13ffb17 	ldw	r4,-20(fp)
    1ea8:	10800784 	addi	r2,r2,30
    1eac:	1085883a 	add	r2,r2,r2
    1eb0:	1085883a 	add	r2,r2,r2
    1eb4:	2085883a 	add	r2,r4,r2
    1eb8:	10800017 	ldw	r2,0(r2)
    1ebc:	e13ffe03 	ldbu	r4,-8(fp)
    1ec0:	200b883a 	mov	r5,r4
    1ec4:	1009883a 	mov	r4,r2
    1ec8:	183ee83a 	callr	r3
    1ecc:	00001006 	br	1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1ed0:	e0bffa43 	ldbu	r2,-23(fp)
    1ed4:	10800358 	cmpnei	r2,r2,13
    1ed8:	1000091e 	bne	r2,zero,1f00 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1edc:	e0bffa03 	ldbu	r2,-24(fp)
    1ee0:	108000e8 	cmpgeui	r2,r2,3
    1ee4:	1000061e 	bne	r2,zero,1f00 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ee8:	01001904 	movi	r4,100
    1eec:	00006840 	call	684 <_Z5delaym>
                retries++;
    1ef0:	e0bffa03 	ldbu	r2,-24(fp)
    1ef4:	10800044 	addi	r2,r2,1
    1ef8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1efc:	003fb806 	br	1de0 <__alt_data_end+0xfc001de0>
        } else if(rcode)
    1f00:	e0bffa43 	ldbu	r2,-23(fp)
    1f04:	10000226 	beq	r2,zero,1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1f08:	e0bffa43 	ldbu	r2,-23(fp)
    1f0c:	00004606 	br	2028 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1f10:	e0bffc03 	ldbu	r2,-16(fp)
    1f14:	e0fffb17 	ldw	r3,-20(fp)
    1f18:	10800784 	addi	r2,r2,30
    1f1c:	1085883a 	add	r2,r2,r2
    1f20:	1085883a 	add	r2,r2,r2
    1f24:	1885883a 	add	r2,r3,r2
    1f28:	10800017 	ldw	r2,0(r2)
    1f2c:	10800017 	ldw	r2,0(r2)
    1f30:	10c00017 	ldw	r3,0(r2)
    1f34:	e0bffc03 	ldbu	r2,-16(fp)
    1f38:	e13ffb17 	ldw	r4,-20(fp)
    1f3c:	10800784 	addi	r2,r2,30
    1f40:	1085883a 	add	r2,r2,r2
    1f44:	1085883a 	add	r2,r2,r2
    1f48:	2085883a 	add	r2,r4,r2
    1f4c:	10800017 	ldw	r2,0(r2)
    1f50:	e13ffd03 	ldbu	r4,-12(fp)
    1f54:	e17ffe03 	ldbu	r5,-8(fp)
    1f58:	e1bfff03 	ldbu	r6,-4(fp)
    1f5c:	300f883a 	mov	r7,r6
    1f60:	280d883a 	mov	r6,r5
    1f64:	200b883a 	mov	r5,r4
    1f68:	1009883a 	mov	r4,r2
    1f6c:	183ee83a 	callr	r3
    1f70:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f74:	e0bffa43 	ldbu	r2,-23(fp)
    1f78:	10800358 	cmpnei	r2,r2,13
    1f7c:	1000091e 	bne	r2,zero,1fa4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f80:	e0bffa03 	ldbu	r2,-24(fp)
    1f84:	108000e8 	cmpgeui	r2,r2,3
    1f88:	1000061e 	bne	r2,zero,1fa4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f8c:	01001904 	movi	r4,100
    1f90:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f94:	e0bffa03 	ldbu	r2,-24(fp)
    1f98:	10800044 	addi	r2,r2,1
    1f9c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1fa0:	003f8f06 	br	1de0 <__alt_data_end+0xfc001de0>
        }
        if(rcode) {
    1fa4:	e0bffa43 	ldbu	r2,-23(fp)
    1fa8:	10001e26 	beq	r2,zero,2024 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1fac:	e0bffd03 	ldbu	r2,-12(fp)
    1fb0:	1000071e 	bne	r2,zero,1fd0 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1fb4:	01800044 	movi	r6,1
    1fb8:	01403a04 	movi	r5,232
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1fc4:	01001984 	movi	r4,102
    1fc8:	00006840 	call	684 <_Z5delaym>
    1fcc:	00001506 	br	2024 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1fd0:	e0bffd03 	ldbu	r2,-12(fp)
    1fd4:	e0fffb17 	ldw	r3,-20(fp)
    1fd8:	10800784 	addi	r2,r2,30
    1fdc:	1085883a 	add	r2,r2,r2
    1fe0:	1085883a 	add	r2,r2,r2
    1fe4:	1885883a 	add	r2,r3,r2
    1fe8:	10800017 	ldw	r2,0(r2)
    1fec:	10800017 	ldw	r2,0(r2)
    1ff0:	10800504 	addi	r2,r2,20
    1ff4:	10c00017 	ldw	r3,0(r2)
    1ff8:	e0bffd03 	ldbu	r2,-12(fp)
    1ffc:	e13ffb17 	ldw	r4,-20(fp)
    2000:	10800784 	addi	r2,r2,30
    2004:	1085883a 	add	r2,r2,r2
    2008:	1085883a 	add	r2,r2,r2
    200c:	2085883a 	add	r2,r4,r2
    2010:	10800017 	ldw	r2,0(r2)
    2014:	e13ffe03 	ldbu	r4,-8(fp)
    2018:	200b883a 	mov	r5,r4
    201c:	1009883a 	mov	r4,r2
    2020:	183ee83a 	callr	r3
                }
        }
        return rcode;
    2024:	e0bffa43 	ldbu	r2,-23(fp)
}
    2028:	e037883a 	mov	sp,fp
    202c:	dfc00117 	ldw	ra,4(sp)
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00204 	addi	sp,sp,8
    2038:	f800283a 	ret

0000203c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    203c:	deffed04 	addi	sp,sp,-76
    2040:	dfc01215 	stw	ra,72(sp)
    2044:	df001115 	stw	fp,68(sp)
    2048:	df001104 	addi	fp,sp,68
    204c:	e13ffc15 	stw	r4,-16(fp)
    2050:	2809883a 	mov	r4,r5
    2054:	3007883a 	mov	r3,r6
    2058:	3805883a 	mov	r2,r7
    205c:	e13ffd05 	stb	r4,-12(fp)
    2060:	e0fffe05 	stb	r3,-8(fp)
    2064:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        printf("Configuring: parent = %i, port = %i\r\n", parent, port);
    2068:	e0bffd03 	ldbu	r2,-12(fp)
    206c:	e0fffe03 	ldbu	r3,-8(fp)
    2070:	180d883a 	mov	r6,r3
    2074:	100b883a 	mov	r5,r2
    2078:	010000b4 	movhi	r4,2
    207c:	210fb204 	addi	r4,r4,16072
    2080:	000f1e00 	call	f1e0 <printf>
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2084:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    2088:	e0bff684 	addi	r2,fp,-38
    208c:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2090:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2094:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    2098:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    209c:	00800204 	movi	r2,8
    20a0:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    20a4:	e0fffb83 	ldbu	r3,-18(fp)
    20a8:	00bfff84 	movi	r2,-2
    20ac:	1884703a 	and	r2,r3,r2
    20b0:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    20b4:	e0fffb83 	ldbu	r3,-18(fp)
    20b8:	00bfff44 	movi	r2,-3
    20bc:	1884703a 	and	r2,r3,r2
    20c0:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    20c4:	e0bffb83 	ldbu	r2,-18(fp)
    20c8:	108000cc 	andi	r2,r2,3
    20cc:	10800f14 	ori	r2,r2,60
    20d0:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    20d4:	e13ffc17 	ldw	r4,-16(fp)
    20d8:	0002cf40 	call	2cf4 <_ZN3USB14GetAddressPoolEv>
    20dc:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    20e0:	e0bff417 	ldw	r2,-48(fp)
    20e4:	10800017 	ldw	r2,0(r2)
    20e8:	10800017 	ldw	r2,0(r2)
    20ec:	000b883a 	mov	r5,zero
    20f0:	e13ff417 	ldw	r4,-48(fp)
    20f4:	103ee83a 	callr	r2
    20f8:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20fc:	e0bff217 	ldw	r2,-56(fp)
    2100:	1000051e 	bne	r2,zero,2118 <_ZN3USB11ConfiguringEhhb+0xdc>
                printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
    2104:	010000b4 	movhi	r4,2
    2108:	210fbc04 	addi	r4,r4,16112
    210c:	000f2fc0 	call	f2fc <puts>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    2110:	00bff584 	movi	r2,-42
    2114:	0001af06 	br	27d4 <_ZN3USB11ConfiguringEhhb+0x798>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    2118:	e0bff217 	ldw	r2,-56(fp)
    211c:	10c00003 	ldbu	r3,0(r2)
    2120:	11000043 	ldbu	r4,1(r2)
    2124:	2008923a 	slli	r4,r4,8
    2128:	20c6b03a 	or	r3,r4,r3
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008943a 	slli	r4,r4,16
    2134:	20c6b03a 	or	r3,r4,r3
    2138:	108000c3 	ldbu	r2,3(r2)
    213c:	1004963a 	slli	r2,r2,24
    2140:	10c4b03a 	or	r2,r2,r3
    2144:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    2148:	e0bff217 	ldw	r2,-56(fp)
    214c:	e0fffb04 	addi	r3,fp,-20
    2150:	19803fcc 	andi	r6,r3,255
    2154:	11000003 	ldbu	r4,0(r2)
    2158:	2008703a 	and	r4,r4,zero
    215c:	200b883a 	mov	r5,r4
    2160:	3009883a 	mov	r4,r6
    2164:	2908b03a 	or	r4,r5,r4
    2168:	11000005 	stb	r4,0(r2)
    216c:	1808d23a 	srli	r4,r3,8
    2170:	21803fcc 	andi	r6,r4,255
    2174:	11000043 	ldbu	r4,1(r2)
    2178:	2008703a 	and	r4,r4,zero
    217c:	200b883a 	mov	r5,r4
    2180:	3009883a 	mov	r4,r6
    2184:	2908b03a 	or	r4,r5,r4
    2188:	11000045 	stb	r4,1(r2)
    218c:	1808d43a 	srli	r4,r3,16
    2190:	21803fcc 	andi	r6,r4,255
    2194:	11000083 	ldbu	r4,2(r2)
    2198:	2008703a 	and	r4,r4,zero
    219c:	200b883a 	mov	r5,r4
    21a0:	3009883a 	mov	r4,r6
    21a4:	2908b03a 	or	r4,r5,r4
    21a8:	11000085 	stb	r4,2(r2)
    21ac:	180ad63a 	srli	r5,r3,24
    21b0:	10c000c3 	ldbu	r3,3(r2)
    21b4:	1806703a 	and	r3,r3,zero
    21b8:	1809883a 	mov	r4,r3
    21bc:	2807883a 	mov	r3,r5
    21c0:	20c6b03a 	or	r3,r4,r3
    21c4:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    21c8:	e0bff217 	ldw	r2,-56(fp)
    21cc:	e0ffff03 	ldbu	r3,-4(fp)
    21d0:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    21d4:	00800484 	movi	r2,18
    21d8:	10ffffcc 	andi	r3,r2,65535
    21dc:	e0bff684 	addi	r2,fp,-38
    21e0:	d8800015 	stw	r2,0(sp)
    21e4:	180f883a 	mov	r7,r3
    21e8:	000d883a 	mov	r6,zero
    21ec:	000b883a 	mov	r5,zero
    21f0:	e13ffc17 	ldw	r4,-16(fp)
    21f4:	00029200 	call	2920 <_ZN3USB11getDevDescrEhhtPh>
    21f8:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    21fc:	e0bff217 	ldw	r2,-56(fp)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	19403fcc 	andi	r5,r3,255
    2208:	10c00003 	ldbu	r3,0(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c00005 	stb	r3,0(r2)
    2220:	e0fff317 	ldw	r3,-52(fp)
    2224:	1806d23a 	srli	r3,r3,8
    2228:	19403fcc 	andi	r5,r3,255
    222c:	10c00043 	ldbu	r3,1(r2)
    2230:	1806703a 	and	r3,r3,zero
    2234:	1809883a 	mov	r4,r3
    2238:	2807883a 	mov	r3,r5
    223c:	20c6b03a 	or	r3,r4,r3
    2240:	10c00045 	stb	r3,1(r2)
    2244:	e0fff317 	ldw	r3,-52(fp)
    2248:	1806d43a 	srli	r3,r3,16
    224c:	19403fcc 	andi	r5,r3,255
    2250:	10c00083 	ldbu	r3,2(r2)
    2254:	1806703a 	and	r3,r3,zero
    2258:	1809883a 	mov	r4,r3
    225c:	2807883a 	mov	r3,r5
    2260:	20c6b03a 	or	r3,r4,r3
    2264:	10c00085 	stb	r3,2(r2)
    2268:	e0fff317 	ldw	r3,-52(fp)
    226c:	180ad63a 	srli	r5,r3,24
    2270:	10c000c3 	ldbu	r3,3(r2)
    2274:	1806703a 	and	r3,r3,zero
    2278:	1809883a 	mov	r4,r3
    227c:	2807883a 	mov	r3,r5
    2280:	20c6b03a 	or	r3,r4,r3
    2284:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2288:	e0bff043 	ldbu	r2,-63(fp)
    228c:	10000526 	beq	r2,zero,22a4 <_ZN3USB11ConfiguringEhhb+0x268>
                printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
    2290:	010000b4 	movhi	r4,2
    2294:	210fca04 	addi	r4,r4,16168
    2298:	000f2fc0 	call	f2fc <puts>
                return rcode;
    229c:	e0bff043 	ldbu	r2,-63(fp)
    22a0:	00014c06 	br	27d4 <_ZN3USB11ConfiguringEhhb+0x798>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    22a4:	e0bff117 	ldw	r2,-60(fp)
    22a8:	10c00203 	ldbu	r3,8(r2)
    22ac:	10800243 	ldbu	r2,9(r2)
    22b0:	1004923a 	slli	r2,r2,8
    22b4:	10c4b03a 	or	r2,r2,r3
    22b8:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    22bc:	e0bff117 	ldw	r2,-60(fp)
    22c0:	10c00283 	ldbu	r3,10(r2)
    22c4:	108002c3 	ldbu	r2,11(r2)
    22c8:	1004923a 	slli	r2,r2,8
    22cc:	10c4b03a 	or	r2,r2,r3
    22d0:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    22d4:	e0bff117 	ldw	r2,-60(fp)
    22d8:	10800103 	ldbu	r2,4(r2)
    22dc:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    22e0:	e0bff117 	ldw	r2,-60(fp)
    22e4:	10800143 	ldbu	r2,5(r2)
    22e8:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    22ec:	e03ff005 	stb	zero,-64(fp)
    22f0:	e0bff003 	ldbu	r2,-64(fp)
    22f4:	10800428 	cmpgeui	r2,r2,16
    22f8:	1000941e 	bne	r2,zero,254c <_ZN3USB11ConfiguringEhhb+0x510>
            	printf("%d\n", devConfigIndex);
    22fc:	e0bff003 	ldbu	r2,-64(fp)
    2300:	100b883a 	mov	r5,r2
    2304:	010000b4 	movhi	r4,2
    2308:	210fd704 	addi	r4,r4,16220
    230c:	000f1e00 	call	f1e0 <printf>
            	printf("%X\n", devConfig[devConfigIndex]);
    2310:	e0bff003 	ldbu	r2,-64(fp)
    2314:	e0fffc17 	ldw	r3,-16(fp)
    2318:	10800784 	addi	r2,r2,30
    231c:	1085883a 	add	r2,r2,r2
    2320:	1085883a 	add	r2,r2,r2
    2324:	1885883a 	add	r2,r3,r2
    2328:	10800017 	ldw	r2,0(r2)
    232c:	100b883a 	mov	r5,r2
    2330:	010000b4 	movhi	r4,2
    2334:	210fd804 	addi	r4,r4,16224
    2338:	000f1e00 	call	f1e0 <printf>
                if(!devConfig[devConfigIndex]) {
    233c:	e0bff003 	ldbu	r2,-64(fp)
    2340:	e0fffc17 	ldw	r3,-16(fp)
    2344:	10800784 	addi	r2,r2,30
    2348:	1085883a 	add	r2,r2,r2
    234c:	1085883a 	add	r2,r2,r2
    2350:	1885883a 	add	r2,r3,r2
    2354:	10800017 	ldw	r2,0(r2)
    2358:	1000041e 	bne	r2,zero,236c <_ZN3USB11ConfiguringEhhb+0x330>
                	printf("BLOCKED\n");
    235c:	010000b4 	movhi	r4,2
    2360:	210fd904 	addi	r4,r4,16228
    2364:	000f2fc0 	call	f2fc <puts>
                	continue;
    2368:	00007306 	br	2538 <_ZN3USB11ConfiguringEhhb+0x4fc>
                } // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    236c:	e0bff003 	ldbu	r2,-64(fp)
    2370:	e0fffc17 	ldw	r3,-16(fp)
    2374:	10800784 	addi	r2,r2,30
    2378:	1085883a 	add	r2,r2,r2
    237c:	1085883a 	add	r2,r2,r2
    2380:	1885883a 	add	r2,r3,r2
    2384:	10800017 	ldw	r2,0(r2)
    2388:	10800017 	ldw	r2,0(r2)
    238c:	10800404 	addi	r2,r2,16
    2390:	10c00017 	ldw	r3,0(r2)
    2394:	e0bff003 	ldbu	r2,-64(fp)
    2398:	e13ffc17 	ldw	r4,-16(fp)
    239c:	10800784 	addi	r2,r2,30
    23a0:	1085883a 	add	r2,r2,r2
    23a4:	1085883a 	add	r2,r2,r2
    23a8:	2085883a 	add	r2,r4,r2
    23ac:	10800017 	ldw	r2,0(r2)
    23b0:	1009883a 	mov	r4,r2
    23b4:	183ee83a 	callr	r3
    23b8:	10803fcc 	andi	r2,r2,255
    23bc:	1004c03a 	cmpne	r2,r2,zero
    23c0:	10803fcc 	andi	r2,r2,255
    23c4:	10005b1e 	bne	r2,zero,2534 <_ZN3USB11ConfiguringEhhb+0x4f8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
    23c8:	e0bff003 	ldbu	r2,-64(fp)
    23cc:	e0fffc17 	ldw	r3,-16(fp)
    23d0:	10800784 	addi	r2,r2,30
    23d4:	1085883a 	add	r2,r2,r2
    23d8:	1085883a 	add	r2,r2,r2
    23dc:	1885883a 	add	r2,r3,r2
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10800017 	ldw	r2,0(r2)
    23e8:	10800804 	addi	r2,r2,32
    23ec:	10c00017 	ldw	r3,0(r2)
    23f0:	e0bff003 	ldbu	r2,-64(fp)
    23f4:	e13ffc17 	ldw	r4,-16(fp)
    23f8:	10800784 	addi	r2,r2,30
    23fc:	1085883a 	add	r2,r2,r2
    2400:	1085883a 	add	r2,r2,r2
    2404:	2085883a 	add	r2,r4,r2
    2408:	10800017 	ldw	r2,0(r2)
    240c:	e13ff643 	ldbu	r4,-39(fp)
    2410:	200b883a 	mov	r5,r4
    2414:	1009883a 	mov	r4,r2
    2418:	183ee83a 	callr	r3
    241c:	10803fcc 	andi	r2,r2,255
    2420:	10003226 	beq	r2,zero,24ec <_ZN3USB11ConfiguringEhhb+0x4b0>
    2424:	e0bff003 	ldbu	r2,-64(fp)
    2428:	e0fffc17 	ldw	r3,-16(fp)
    242c:	10800784 	addi	r2,r2,30
    2430:	1085883a 	add	r2,r2,r2
    2434:	1085883a 	add	r2,r2,r2
    2438:	1885883a 	add	r2,r3,r2
    243c:	10800017 	ldw	r2,0(r2)
    2440:	10800017 	ldw	r2,0(r2)
    2444:	10800604 	addi	r2,r2,24
    2448:	10c00017 	ldw	r3,0(r2)
    244c:	e0bff003 	ldbu	r2,-64(fp)
    2450:	e13ffc17 	ldw	r4,-16(fp)
    2454:	10800784 	addi	r2,r2,30
    2458:	1085883a 	add	r2,r2,r2
    245c:	1085883a 	add	r2,r2,r2
    2460:	2085883a 	add	r2,r4,r2
    2464:	10800017 	ldw	r2,0(r2)
    2468:	e13ff50b 	ldhu	r4,-44(fp)
    246c:	e17ff58b 	ldhu	r5,-42(fp)
    2470:	280d883a 	mov	r6,r5
    2474:	200b883a 	mov	r5,r4
    2478:	1009883a 	mov	r4,r2
    247c:	183ee83a 	callr	r3
    2480:	10803fcc 	andi	r2,r2,255
    2484:	1000171e 	bne	r2,zero,24e4 <_ZN3USB11ConfiguringEhhb+0x4a8>
    2488:	e0bff003 	ldbu	r2,-64(fp)
    248c:	e0fffc17 	ldw	r3,-16(fp)
    2490:	10800784 	addi	r2,r2,30
    2494:	1085883a 	add	r2,r2,r2
    2498:	1085883a 	add	r2,r2,r2
    249c:	1885883a 	add	r2,r3,r2
    24a0:	10800017 	ldw	r2,0(r2)
    24a4:	10800017 	ldw	r2,0(r2)
    24a8:	10800704 	addi	r2,r2,28
    24ac:	10c00017 	ldw	r3,0(r2)
    24b0:	e0bff003 	ldbu	r2,-64(fp)
    24b4:	e13ffc17 	ldw	r4,-16(fp)
    24b8:	10800784 	addi	r2,r2,30
    24bc:	1085883a 	add	r2,r2,r2
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	2085883a 	add	r2,r4,r2
    24c8:	10800017 	ldw	r2,0(r2)
    24cc:	e13ff603 	ldbu	r4,-40(fp)
    24d0:	200b883a 	mov	r5,r4
    24d4:	1009883a 	mov	r4,r2
    24d8:	183ee83a 	callr	r3
    24dc:	10803fcc 	andi	r2,r2,255
    24e0:	10000226 	beq	r2,zero,24ec <_ZN3USB11ConfiguringEhhb+0x4b0>
    24e4:	00800044 	movi	r2,1
    24e8:	00000106 	br	24f0 <_ZN3USB11ConfiguringEhhb+0x4b4>
    24ec:	0005883a 	mov	r2,zero
    24f0:	10803fcc 	andi	r2,r2,255
    24f4:	10001026 	beq	r2,zero,2538 <_ZN3USB11ConfiguringEhhb+0x4fc>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    24f8:	e0fff003 	ldbu	r3,-64(fp)
    24fc:	e13ffd03 	ldbu	r4,-12(fp)
    2500:	e17ffe03 	ldbu	r5,-8(fp)
    2504:	e0bfff03 	ldbu	r2,-4(fp)
    2508:	d8800015 	stw	r2,0(sp)
    250c:	280f883a 	mov	r7,r5
    2510:	200d883a 	mov	r6,r4
    2514:	180b883a 	mov	r5,r3
    2518:	e13ffc17 	ldw	r4,-16(fp)
    251c:	0001dac0 	call	1dac <_ZN3USB13AttemptConfigEhhhb>
    2520:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
    2524:	e0bff043 	ldbu	r2,-63(fp)
    2528:	10803460 	cmpeqi	r2,r2,209
    252c:	10000626 	beq	r2,zero,2548 <_ZN3USB11ConfiguringEhhb+0x50c>
    2530:	00000106 	br	2538 <_ZN3USB11ConfiguringEhhb+0x4fc>
            	printf("%X\n", devConfig[devConfigIndex]);
                if(!devConfig[devConfigIndex]) {
                	printf("BLOCKED\n");
                	continue;
                } // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2534:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    2538:	e0bff003 	ldbu	r2,-64(fp)
    253c:	10800044 	addi	r2,r2,1
    2540:	e0bff005 	stb	r2,-64(fp)
    2544:	003f6a06 	br	22f0 <__alt_data_end+0xfc0022f0>
                } // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
    2548:	0001883a 	nop
                }
        }

        printf("UNBLOCKED\n");
    254c:	010000b4 	movhi	r4,2
    2550:	210fdb04 	addi	r4,r4,16236
    2554:	000f2fc0 	call	f2fc <puts>

        if(devConfigIndex < USB_NUMDEVICES) {
    2558:	e0bff003 	ldbu	r2,-64(fp)
    255c:	10800428 	cmpgeui	r2,r2,16
    2560:	1000021e 	bne	r2,zero,256c <_ZN3USB11ConfiguringEhhb+0x530>
                return rcode;
    2564:	e0bff043 	ldbu	r2,-63(fp)
    2568:	00009a06 	br	27d4 <_ZN3USB11ConfiguringEhhb+0x798>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    256c:	e03ff005 	stb	zero,-64(fp)
    2570:	e0bff003 	ldbu	r2,-64(fp)
    2574:	10800428 	cmpgeui	r2,r2,16
    2578:	10008c1e 	bne	r2,zero,27ac <_ZN3USB11ConfiguringEhhb+0x770>
                if(!devConfig[devConfigIndex]) continue;
    257c:	e0bff003 	ldbu	r2,-64(fp)
    2580:	e0fffc17 	ldw	r3,-16(fp)
    2584:	10800784 	addi	r2,r2,30
    2588:	1085883a 	add	r2,r2,r2
    258c:	1085883a 	add	r2,r2,r2
    2590:	1885883a 	add	r2,r3,r2
    2594:	10800017 	ldw	r2,0(r2)
    2598:	10007b26 	beq	r2,zero,2788 <_ZN3USB11ConfiguringEhhb+0x74c>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    259c:	e0bff003 	ldbu	r2,-64(fp)
    25a0:	e0fffc17 	ldw	r3,-16(fp)
    25a4:	10800784 	addi	r2,r2,30
    25a8:	1085883a 	add	r2,r2,r2
    25ac:	1085883a 	add	r2,r2,r2
    25b0:	1885883a 	add	r2,r3,r2
    25b4:	10800017 	ldw	r2,0(r2)
    25b8:	10800017 	ldw	r2,0(r2)
    25bc:	10800404 	addi	r2,r2,16
    25c0:	10c00017 	ldw	r3,0(r2)
    25c4:	e0bff003 	ldbu	r2,-64(fp)
    25c8:	e13ffc17 	ldw	r4,-16(fp)
    25cc:	10800784 	addi	r2,r2,30
    25d0:	1085883a 	add	r2,r2,r2
    25d4:	1085883a 	add	r2,r2,r2
    25d8:	2085883a 	add	r2,r4,r2
    25dc:	10800017 	ldw	r2,0(r2)
    25e0:	1009883a 	mov	r4,r2
    25e4:	183ee83a 	callr	r3
    25e8:	10803fcc 	andi	r2,r2,255
    25ec:	1004c03a 	cmpne	r2,r2,zero
    25f0:	10803fcc 	andi	r2,r2,255
    25f4:	1000661e 	bne	r2,zero,2790 <_ZN3USB11ConfiguringEhhb+0x754>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    25f8:	e0bff003 	ldbu	r2,-64(fp)
    25fc:	e0fffc17 	ldw	r3,-16(fp)
    2600:	10800784 	addi	r2,r2,30
    2604:	1085883a 	add	r2,r2,r2
    2608:	1085883a 	add	r2,r2,r2
    260c:	1885883a 	add	r2,r3,r2
    2610:	10800017 	ldw	r2,0(r2)
    2614:	10800017 	ldw	r2,0(r2)
    2618:	10800804 	addi	r2,r2,32
    261c:	10c00017 	ldw	r3,0(r2)
    2620:	e0bff003 	ldbu	r2,-64(fp)
    2624:	e13ffc17 	ldw	r4,-16(fp)
    2628:	10800784 	addi	r2,r2,30
    262c:	1085883a 	add	r2,r2,r2
    2630:	1085883a 	add	r2,r2,r2
    2634:	2085883a 	add	r2,r4,r2
    2638:	10800017 	ldw	r2,0(r2)
    263c:	e13ff643 	ldbu	r4,-39(fp)
    2640:	200b883a 	mov	r5,r4
    2644:	1009883a 	mov	r4,r2
    2648:	183ee83a 	callr	r3
    264c:	10803fcc 	andi	r2,r2,255
    2650:	10003226 	beq	r2,zero,271c <_ZN3USB11ConfiguringEhhb+0x6e0>
    2654:	e0bff003 	ldbu	r2,-64(fp)
    2658:	e0fffc17 	ldw	r3,-16(fp)
    265c:	10800784 	addi	r2,r2,30
    2660:	1085883a 	add	r2,r2,r2
    2664:	1085883a 	add	r2,r2,r2
    2668:	1885883a 	add	r2,r3,r2
    266c:	10800017 	ldw	r2,0(r2)
    2670:	10800017 	ldw	r2,0(r2)
    2674:	10800604 	addi	r2,r2,24
    2678:	10c00017 	ldw	r3,0(r2)
    267c:	e0bff003 	ldbu	r2,-64(fp)
    2680:	e13ffc17 	ldw	r4,-16(fp)
    2684:	10800784 	addi	r2,r2,30
    2688:	1085883a 	add	r2,r2,r2
    268c:	1085883a 	add	r2,r2,r2
    2690:	2085883a 	add	r2,r4,r2
    2694:	10800017 	ldw	r2,0(r2)
    2698:	e13ff50b 	ldhu	r4,-44(fp)
    269c:	e17ff58b 	ldhu	r5,-42(fp)
    26a0:	280d883a 	mov	r6,r5
    26a4:	200b883a 	mov	r5,r4
    26a8:	1009883a 	mov	r4,r2
    26ac:	183ee83a 	callr	r3
    26b0:	10803fcc 	andi	r2,r2,255
    26b4:	1000171e 	bne	r2,zero,2714 <_ZN3USB11ConfiguringEhhb+0x6d8>
    26b8:	e0bff003 	ldbu	r2,-64(fp)
    26bc:	e0fffc17 	ldw	r3,-16(fp)
    26c0:	10800784 	addi	r2,r2,30
    26c4:	1085883a 	add	r2,r2,r2
    26c8:	1085883a 	add	r2,r2,r2
    26cc:	1885883a 	add	r2,r3,r2
    26d0:	10800017 	ldw	r2,0(r2)
    26d4:	10800017 	ldw	r2,0(r2)
    26d8:	10800704 	addi	r2,r2,28
    26dc:	10c00017 	ldw	r3,0(r2)
    26e0:	e0bff003 	ldbu	r2,-64(fp)
    26e4:	e13ffc17 	ldw	r4,-16(fp)
    26e8:	10800784 	addi	r2,r2,30
    26ec:	1085883a 	add	r2,r2,r2
    26f0:	1085883a 	add	r2,r2,r2
    26f4:	2085883a 	add	r2,r4,r2
    26f8:	10800017 	ldw	r2,0(r2)
    26fc:	e13ff603 	ldbu	r4,-40(fp)
    2700:	200b883a 	mov	r5,r4
    2704:	1009883a 	mov	r4,r2
    2708:	183ee83a 	callr	r3
    270c:	10803fcc 	andi	r2,r2,255
    2710:	10000226 	beq	r2,zero,271c <_ZN3USB11ConfiguringEhhb+0x6e0>
    2714:	00800044 	movi	r2,1
    2718:	00000106 	br	2720 <_ZN3USB11ConfiguringEhhb+0x6e4>
    271c:	0005883a 	mov	r2,zero
    2720:	10803fcc 	andi	r2,r2,255
    2724:	10001c1e 	bne	r2,zero,2798 <_ZN3USB11ConfiguringEhhb+0x75c>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
    2728:	e0fff003 	ldbu	r3,-64(fp)
    272c:	e13ffd03 	ldbu	r4,-12(fp)
    2730:	e17ffe03 	ldbu	r5,-8(fp)
    2734:	e0bfff03 	ldbu	r2,-4(fp)
    2738:	d8800015 	stw	r2,0(sp)
    273c:	280f883a 	mov	r7,r5
    2740:	200d883a 	mov	r6,r4
    2744:	180b883a 	mov	r5,r3
    2748:	e13ffc17 	ldw	r4,-16(fp)
    274c:	0001dac0 	call	1dac <_ZN3USB13AttemptConfigEhhhb>
    2750:	e0bff045 	stb	r2,-63(fp)

                printf("ERROR ENUMERATING %2.2x\r\n", rcode);
    2754:	e0bff043 	ldbu	r2,-63(fp)
    2758:	100b883a 	mov	r5,r2
    275c:	010000b4 	movhi	r4,2
    2760:	210fde04 	addi	r4,r4,16248
    2764:	000f1e00 	call	f1e0 <printf>
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
    2768:	e0bff043 	ldbu	r2,-63(fp)
    276c:	10803460 	cmpeqi	r2,r2,209
    2770:	10000a1e 	bne	r2,zero,279c <_ZN3USB11ConfiguringEhhb+0x760>
    2774:	e0bff043 	ldbu	r2,-63(fp)
    2778:	10803660 	cmpeqi	r2,r2,217
    277c:	1000071e 	bne	r2,zero,279c <_ZN3USB11ConfiguringEhhb+0x760>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
    2780:	e0bff043 	ldbu	r2,-63(fp)
    2784:	00001306 	br	27d4 <_ZN3USB11ConfiguringEhhb+0x798>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
    2788:	0001883a 	nop
    278c:	00000306 	br	279c <_ZN3USB11ConfiguringEhhb+0x760>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
    2790:	0001883a 	nop
    2794:	00000106 	br	279c <_ZN3USB11ConfiguringEhhb+0x760>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
    2798:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
    279c:	e0bff003 	ldbu	r2,-64(fp)
    27a0:	10800044 	addi	r2,r2,1
    27a4:	e0bff005 	stb	r2,-64(fp)
    27a8:	003f7106 	br	2570 <__alt_data_end+0xfc002570>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
    27ac:	e0bffd03 	ldbu	r2,-12(fp)
    27b0:	e0fffe03 	ldbu	r3,-8(fp)
    27b4:	e13fff03 	ldbu	r4,-4(fp)
    27b8:	200f883a 	mov	r7,r4
    27bc:	180d883a 	mov	r6,r3
    27c0:	100b883a 	mov	r5,r2
    27c4:	e13ffc17 	ldw	r4,-16(fp)
    27c8:	0001c4c0 	call	1c4c <_ZN3USB17DefaultAddressingEhhb>
    27cc:	e0bff045 	stb	r2,-63(fp)

        return rcode;
    27d0:	e0bff043 	ldbu	r2,-63(fp)
}
    27d4:	e037883a 	mov	sp,fp
    27d8:	dfc00117 	ldw	ra,4(sp)
    27dc:	df000017 	ldw	fp,0(sp)
    27e0:	dec00204 	addi	sp,sp,8
    27e4:	f800283a 	ret

000027e8 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    27e8:	defffb04 	addi	sp,sp,-20
    27ec:	dfc00415 	stw	ra,16(sp)
    27f0:	df000315 	stw	fp,12(sp)
    27f4:	df000304 	addi	fp,sp,12
    27f8:	e13ffe15 	stw	r4,-8(fp)
    27fc:	2805883a 	mov	r2,r5
    2800:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2804:	e0bfff03 	ldbu	r2,-4(fp)
    2808:	1000021e 	bne	r2,zero,2814 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    280c:	0005883a 	mov	r2,zero
    2810:	00003e06 	br	290c <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2814:	e03ffd05 	stb	zero,-12(fp)
    2818:	e0bffd03 	ldbu	r2,-12(fp)
    281c:	10800428 	cmpgeui	r2,r2,16
    2820:	1000391e 	bne	r2,zero,2908 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2824:	e0bffd03 	ldbu	r2,-12(fp)
    2828:	e0fffe17 	ldw	r3,-8(fp)
    282c:	10800784 	addi	r2,r2,30
    2830:	1085883a 	add	r2,r2,r2
    2834:	1085883a 	add	r2,r2,r2
    2838:	1885883a 	add	r2,r3,r2
    283c:	10800017 	ldw	r2,0(r2)
    2840:	10002c26 	beq	r2,zero,28f4 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2844:	e0bffd03 	ldbu	r2,-12(fp)
    2848:	e0fffe17 	ldw	r3,-8(fp)
    284c:	10800784 	addi	r2,r2,30
    2850:	1085883a 	add	r2,r2,r2
    2854:	1085883a 	add	r2,r2,r2
    2858:	1885883a 	add	r2,r3,r2
    285c:	10800017 	ldw	r2,0(r2)
    2860:	10800017 	ldw	r2,0(r2)
    2864:	10800404 	addi	r2,r2,16
    2868:	10c00017 	ldw	r3,0(r2)
    286c:	e0bffd03 	ldbu	r2,-12(fp)
    2870:	e13ffe17 	ldw	r4,-8(fp)
    2874:	10800784 	addi	r2,r2,30
    2878:	1085883a 	add	r2,r2,r2
    287c:	1085883a 	add	r2,r2,r2
    2880:	2085883a 	add	r2,r4,r2
    2884:	10800017 	ldw	r2,0(r2)
    2888:	1009883a 	mov	r4,r2
    288c:	183ee83a 	callr	r3
    2890:	10c03fcc 	andi	r3,r2,255
    2894:	e0bfff03 	ldbu	r2,-4(fp)
    2898:	1885003a 	cmpeq	r2,r3,r2
    289c:	10803fcc 	andi	r2,r2,255
    28a0:	10001526 	beq	r2,zero,28f8 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    28a4:	e0bffd03 	ldbu	r2,-12(fp)
    28a8:	e0fffe17 	ldw	r3,-8(fp)
    28ac:	10800784 	addi	r2,r2,30
    28b0:	1085883a 	add	r2,r2,r2
    28b4:	1085883a 	add	r2,r2,r2
    28b8:	1885883a 	add	r2,r3,r2
    28bc:	10800017 	ldw	r2,0(r2)
    28c0:	10800017 	ldw	r2,0(r2)
    28c4:	10800204 	addi	r2,r2,8
    28c8:	10c00017 	ldw	r3,0(r2)
    28cc:	e0bffd03 	ldbu	r2,-12(fp)
    28d0:	e13ffe17 	ldw	r4,-8(fp)
    28d4:	10800784 	addi	r2,r2,30
    28d8:	1085883a 	add	r2,r2,r2
    28dc:	1085883a 	add	r2,r2,r2
    28e0:	2085883a 	add	r2,r4,r2
    28e4:	10800017 	ldw	r2,0(r2)
    28e8:	1009883a 	mov	r4,r2
    28ec:	183ee83a 	callr	r3
    28f0:	00000606 	br	290c <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    28f4:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    28f8:	e0bffd03 	ldbu	r2,-12(fp)
    28fc:	10800044 	addi	r2,r2,1
    2900:	e0bffd05 	stb	r2,-12(fp)
    2904:	003fc406 	br	2818 <__alt_data_end+0xfc002818>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    2908:	0005883a 	mov	r2,zero
        printf("END\n");
}
    290c:	e037883a 	mov	sp,fp
    2910:	dfc00117 	ldw	ra,4(sp)
    2914:	df000017 	ldw	fp,0(sp)
    2918:	dec00204 	addi	sp,sp,8
    291c:	f800283a 	ret

00002920 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    2920:	defff204 	addi	sp,sp,-56
    2924:	dfc00d15 	stw	ra,52(sp)
    2928:	df000c15 	stw	fp,48(sp)
    292c:	df000c04 	addi	fp,sp,48
    2930:	e13ffc15 	stw	r4,-16(fp)
    2934:	2809883a 	mov	r4,r5
    2938:	3007883a 	mov	r3,r6
    293c:	3805883a 	mov	r2,r7
    2940:	e13ffd05 	stb	r4,-12(fp)
    2944:	e0fffe05 	stb	r3,-8(fp)
    2948:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    294c:	e17ffd03 	ldbu	r5,-12(fp)
    2950:	e1bffe03 	ldbu	r6,-8(fp)
    2954:	e0bfff0b 	ldhu	r2,-4(fp)
    2958:	e0ffff0b 	ldhu	r3,-4(fp)
    295c:	d8000715 	stw	zero,28(sp)
    2960:	e1000217 	ldw	r4,8(fp)
    2964:	d9000615 	stw	r4,24(sp)
    2968:	d8c00515 	stw	r3,20(sp)
    296c:	d8800415 	stw	r2,16(sp)
    2970:	d8000315 	stw	zero,12(sp)
    2974:	00800044 	movi	r2,1
    2978:	d8800215 	stw	r2,8(sp)
    297c:	d8000115 	stw	zero,4(sp)
    2980:	00800184 	movi	r2,6
    2984:	d8800015 	stw	r2,0(sp)
    2988:	01c02004 	movi	r7,128
    298c:	e13ffc17 	ldw	r4,-16(fp)
    2990:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2994:	e037883a 	mov	sp,fp
    2998:	dfc00117 	ldw	ra,4(sp)
    299c:	df000017 	ldw	fp,0(sp)
    29a0:	dec00204 	addi	sp,sp,8
    29a4:	f800283a 	ret

000029a8 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    29a8:	defff104 	addi	sp,sp,-60
    29ac:	dfc00e15 	stw	ra,56(sp)
    29b0:	df000d15 	stw	fp,52(sp)
    29b4:	df000d04 	addi	fp,sp,52
    29b8:	e13ffb15 	stw	r4,-20(fp)
    29bc:	3009883a 	mov	r4,r6
    29c0:	3807883a 	mov	r3,r7
    29c4:	e0800217 	ldw	r2,8(fp)
    29c8:	e17ffc05 	stb	r5,-16(fp)
    29cc:	e13ffd05 	stb	r4,-12(fp)
    29d0:	e0fffe0d 	sth	r3,-8(fp)
    29d4:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    29d8:	e23ffc03 	ldbu	r8,-16(fp)
    29dc:	e1bffd03 	ldbu	r6,-12(fp)
    29e0:	e0bfff03 	ldbu	r2,-4(fp)
    29e4:	e0fffe0b 	ldhu	r3,-8(fp)
    29e8:	e13ffe0b 	ldhu	r4,-8(fp)
    29ec:	d8000715 	stw	zero,28(sp)
    29f0:	e1400317 	ldw	r5,12(fp)
    29f4:	d9400615 	stw	r5,24(sp)
    29f8:	d9000515 	stw	r4,20(sp)
    29fc:	d8c00415 	stw	r3,16(sp)
    2a00:	d8000315 	stw	zero,12(sp)
    2a04:	00c00084 	movi	r3,2
    2a08:	d8c00215 	stw	r3,8(sp)
    2a0c:	d8800115 	stw	r2,4(sp)
    2a10:	00800184 	movi	r2,6
    2a14:	d8800015 	stw	r2,0(sp)
    2a18:	01c02004 	movi	r7,128
    2a1c:	400b883a 	mov	r5,r8
    2a20:	e13ffb17 	ldw	r4,-20(fp)
    2a24:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2a28:	e037883a 	mov	sp,fp
    2a2c:	dfc00117 	ldw	ra,4(sp)
    2a30:	df000017 	ldw	fp,0(sp)
    2a34:	dec00204 	addi	sp,sp,8
    2a38:	f800283a 	ret

00002a3c <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    2a3c:	deffdf04 	addi	sp,sp,-132
    2a40:	dfc02015 	stw	ra,128(sp)
    2a44:	df001f15 	stw	fp,124(sp)
    2a48:	df001f04 	addi	fp,sp,124
    2a4c:	e13ffc15 	stw	r4,-16(fp)
    2a50:	2809883a 	mov	r4,r5
    2a54:	3007883a 	mov	r3,r6
    2a58:	3805883a 	mov	r2,r7
    2a5c:	e13ffd05 	stb	r4,-12(fp)
    2a60:	e0fffe05 	stb	r3,-8(fp)
    2a64:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    2a68:	00801004 	movi	r2,64
    2a6c:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    2a70:	e0bfec04 	addi	r2,fp,-80
    2a74:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    2a78:	e13ffd03 	ldbu	r4,-12(fp)
    2a7c:	e17ffe03 	ldbu	r5,-8(fp)
    2a80:	e0bfff03 	ldbu	r2,-4(fp)
    2a84:	e0ffec04 	addi	r3,fp,-80
    2a88:	d8c00115 	stw	r3,4(sp)
    2a8c:	d8800015 	stw	r2,0(sp)
    2a90:	01c00244 	movi	r7,9
    2a94:	280d883a 	mov	r6,r5
    2a98:	200b883a 	mov	r5,r4
    2a9c:	e13ffc17 	ldw	r4,-16(fp)
    2aa0:	00029a80 	call	29a8 <_ZN3USB12getConfDescrEhhthPh>
    2aa4:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    2aa8:	e0bfeb03 	ldbu	r2,-84(fp)
    2aac:	10000226 	beq	r2,zero,2ab8 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    2ab0:	e0bfeb03 	ldbu	r2,-84(fp)
    2ab4:	00001a06 	br	2b20 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    2ab8:	e0bfea17 	ldw	r2,-88(fp)
    2abc:	10c00083 	ldbu	r3,2(r2)
    2ac0:	108000c3 	ldbu	r2,3(r2)
    2ac4:	1004923a 	slli	r2,r2,8
    2ac8:	10c4b03a 	or	r2,r2,r3
    2acc:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    2ad0:	e17ffd03 	ldbu	r5,-12(fp)
    2ad4:	e1bffe03 	ldbu	r6,-8(fp)
    2ad8:	e0bfff03 	ldbu	r2,-4(fp)
    2adc:	e0ffeb8b 	ldhu	r3,-82(fp)
    2ae0:	e1000217 	ldw	r4,8(fp)
    2ae4:	d9000715 	stw	r4,28(sp)
    2ae8:	e13fec04 	addi	r4,fp,-80
    2aec:	d9000615 	stw	r4,24(sp)
    2af0:	01001004 	movi	r4,64
    2af4:	d9000515 	stw	r4,20(sp)
    2af8:	d8c00415 	stw	r3,16(sp)
    2afc:	d8000315 	stw	zero,12(sp)
    2b00:	00c00084 	movi	r3,2
    2b04:	d8c00215 	stw	r3,8(sp)
    2b08:	d8800115 	stw	r2,4(sp)
    2b0c:	00800184 	movi	r2,6
    2b10:	d8800015 	stw	r2,0(sp)
    2b14:	01c02004 	movi	r7,128
    2b18:	e13ffc17 	ldw	r4,-16(fp)
    2b1c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2b20:	e037883a 	mov	sp,fp
    2b24:	dfc00117 	ldw	ra,4(sp)
    2b28:	df000017 	ldw	fp,0(sp)
    2b2c:	dec00204 	addi	sp,sp,8
    2b30:	f800283a 	ret

00002b34 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2b34:	defff004 	addi	sp,sp,-64
    2b38:	dfc00f15 	stw	ra,60(sp)
    2b3c:	df000e15 	stw	fp,56(sp)
    2b40:	df000e04 	addi	fp,sp,56
    2b44:	e13ffa15 	stw	r4,-24(fp)
    2b48:	2811883a 	mov	r8,r5
    2b4c:	300b883a 	mov	r5,r6
    2b50:	3809883a 	mov	r4,r7
    2b54:	e0c00217 	ldw	r3,8(fp)
    2b58:	e0800317 	ldw	r2,12(fp)
    2b5c:	e23ffb05 	stb	r8,-20(fp)
    2b60:	e17ffc05 	stb	r5,-16(fp)
    2b64:	e13ffd0d 	sth	r4,-12(fp)
    2b68:	e0fffe05 	stb	r3,-8(fp)
    2b6c:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    2b70:	e23ffb03 	ldbu	r8,-20(fp)
    2b74:	e27ffc03 	ldbu	r9,-16(fp)
    2b78:	e0bffe03 	ldbu	r2,-8(fp)
    2b7c:	e0ffff0b 	ldhu	r3,-4(fp)
    2b80:	e13ffd0b 	ldhu	r4,-12(fp)
    2b84:	e17ffd0b 	ldhu	r5,-12(fp)
    2b88:	d8000715 	stw	zero,28(sp)
    2b8c:	e1800417 	ldw	r6,16(fp)
    2b90:	d9800615 	stw	r6,24(sp)
    2b94:	d9400515 	stw	r5,20(sp)
    2b98:	d9000415 	stw	r4,16(sp)
    2b9c:	d8c00315 	stw	r3,12(sp)
    2ba0:	00c000c4 	movi	r3,3
    2ba4:	d8c00215 	stw	r3,8(sp)
    2ba8:	d8800115 	stw	r2,4(sp)
    2bac:	00800184 	movi	r2,6
    2bb0:	d8800015 	stw	r2,0(sp)
    2bb4:	01c02004 	movi	r7,128
    2bb8:	480d883a 	mov	r6,r9
    2bbc:	400b883a 	mov	r5,r8
    2bc0:	e13ffa17 	ldw	r4,-24(fp)
    2bc4:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2bc8:	e037883a 	mov	sp,fp
    2bcc:	dfc00117 	ldw	ra,4(sp)
    2bd0:	df000017 	ldw	fp,0(sp)
    2bd4:	dec00204 	addi	sp,sp,8
    2bd8:	f800283a 	ret

00002bdc <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    2bdc:	defff104 	addi	sp,sp,-60
    2be0:	dfc00e15 	stw	ra,56(sp)
    2be4:	df000d15 	stw	fp,52(sp)
    2be8:	df000d04 	addi	fp,sp,52
    2bec:	e13ffc15 	stw	r4,-16(fp)
    2bf0:	2809883a 	mov	r4,r5
    2bf4:	3007883a 	mov	r3,r6
    2bf8:	3805883a 	mov	r2,r7
    2bfc:	e13ffd05 	stb	r4,-12(fp)
    2c00:	e0fffe05 	stb	r3,-8(fp)
    2c04:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2c08:	e0fffd03 	ldbu	r3,-12(fp)
    2c0c:	e13ffe03 	ldbu	r4,-8(fp)
    2c10:	e0bfff03 	ldbu	r2,-4(fp)
    2c14:	d8000715 	stw	zero,28(sp)
    2c18:	d8000615 	stw	zero,24(sp)
    2c1c:	d8000515 	stw	zero,20(sp)
    2c20:	d8000415 	stw	zero,16(sp)
    2c24:	d8000315 	stw	zero,12(sp)
    2c28:	d8000215 	stw	zero,8(sp)
    2c2c:	d8800115 	stw	r2,4(sp)
    2c30:	00800144 	movi	r2,5
    2c34:	d8800015 	stw	r2,0(sp)
    2c38:	000f883a 	mov	r7,zero
    2c3c:	200d883a 	mov	r6,r4
    2c40:	180b883a 	mov	r5,r3
    2c44:	e13ffc17 	ldw	r4,-16(fp)
    2c48:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2c4c:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    2c50:	01004b04 	movi	r4,300
    2c54:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2c58:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2c5c:	e037883a 	mov	sp,fp
    2c60:	dfc00117 	ldw	ra,4(sp)
    2c64:	df000017 	ldw	fp,0(sp)
    2c68:	dec00204 	addi	sp,sp,8
    2c6c:	f800283a 	ret

00002c70 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    2c70:	defff204 	addi	sp,sp,-56
    2c74:	dfc00d15 	stw	ra,52(sp)
    2c78:	df000c15 	stw	fp,48(sp)
    2c7c:	df000c04 	addi	fp,sp,48
    2c80:	e13ffc15 	stw	r4,-16(fp)
    2c84:	2809883a 	mov	r4,r5
    2c88:	3007883a 	mov	r3,r6
    2c8c:	3805883a 	mov	r2,r7
    2c90:	e13ffd05 	stb	r4,-12(fp)
    2c94:	e0fffe05 	stb	r3,-8(fp)
    2c98:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2c9c:	e0fffd03 	ldbu	r3,-12(fp)
    2ca0:	e13ffe03 	ldbu	r4,-8(fp)
    2ca4:	e0bfff03 	ldbu	r2,-4(fp)
    2ca8:	d8000715 	stw	zero,28(sp)
    2cac:	d8000615 	stw	zero,24(sp)
    2cb0:	d8000515 	stw	zero,20(sp)
    2cb4:	d8000415 	stw	zero,16(sp)
    2cb8:	d8000315 	stw	zero,12(sp)
    2cbc:	d8000215 	stw	zero,8(sp)
    2cc0:	d8800115 	stw	r2,4(sp)
    2cc4:	00800244 	movi	r2,9
    2cc8:	d8800015 	stw	r2,0(sp)
    2ccc:	000f883a 	mov	r7,zero
    2cd0:	200d883a 	mov	r6,r4
    2cd4:	180b883a 	mov	r5,r3
    2cd8:	e13ffc17 	ldw	r4,-16(fp)
    2cdc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2ce0:	e037883a 	mov	sp,fp
    2ce4:	dfc00117 	ldw	ra,4(sp)
    2ce8:	df000017 	ldw	fp,0(sp)
    2cec:	dec00204 	addi	sp,sp,8
    2cf0:	f800283a 	ret

00002cf4 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    2cf4:	defffe04 	addi	sp,sp,-8
    2cf8:	df000115 	stw	fp,4(sp)
    2cfc:	df000104 	addi	fp,sp,4
    2d00:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2d04:	e0bfff17 	ldw	r2,-4(fp)
        };
    2d08:	e037883a 	mov	sp,fp
    2d0c:	df000017 	ldw	fp,0(sp)
    2d10:	dec00104 	addi	sp,sp,4
    2d14:	f800283a 	ret

00002d18 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2d18:	defffe04 	addi	sp,sp,-8
    2d1c:	df000115 	stw	fp,4(sp)
    2d20:	df000104 	addi	fp,sp,4
    2d24:	e13fff15 	stw	r4,-4(fp)
    2d28:	008000b4 	movhi	r2,2
    2d2c:	108fec04 	addi	r2,r2,16304
    2d30:	e0ffff17 	ldw	r3,-4(fp)
    2d34:	18800015 	stw	r2,0(r3)
    2d38:	0001883a 	nop
    2d3c:	e037883a 	mov	sp,fp
    2d40:	df000017 	ldw	fp,0(sp)
    2d44:	dec00104 	addi	sp,sp,4
    2d48:	f800283a 	ret

00002d4c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2d4c:	defffd04 	addi	sp,sp,-12
    2d50:	dfc00215 	stw	ra,8(sp)
    2d54:	df000115 	stw	fp,4(sp)
    2d58:	df000104 	addi	fp,sp,4
    2d5c:	e13fff15 	stw	r4,-4(fp)
    2d60:	e0bfff17 	ldw	r2,-4(fp)
    2d64:	1009883a 	mov	r4,r2
    2d68:	0002d180 	call	2d18 <_ZN11AddressPoolC1Ev>
    2d6c:	008000b4 	movhi	r2,2
    2d70:	108fe704 	addi	r2,r2,16284
    2d74:	e0ffff17 	ldw	r3,-4(fp)
    2d78:	18800015 	stw	r2,0(r3)
    2d7c:	e0bfff17 	ldw	r2,-4(fp)
    2d80:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2d84:	000b883a 	mov	r5,zero
    2d88:	e13fff17 	ldw	r4,-4(fp)
    2d8c:	000319c0 	call	319c <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    2d90:	e0bfff17 	ldw	r2,-4(fp)
    2d94:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2d98:	e0bfff17 	ldw	r2,-4(fp)
    2d9c:	10c00104 	addi	r3,r2,4
    2da0:	e0bfff17 	ldw	r2,-4(fp)
    2da4:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    2da8:	e0bfff17 	ldw	r2,-4(fp)
    2dac:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    2db0:	e0bfff17 	ldw	r2,-4(fp)
    2db4:	00c00204 	movi	r3,8
    2db8:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    2dbc:	e0bfff17 	ldw	r2,-4(fp)
    2dc0:	11000183 	ldbu	r4,6(r2)
    2dc4:	00ffff84 	movi	r3,-2
    2dc8:	20c6703a 	and	r3,r4,r3
    2dcc:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    2dd0:	e0bfff17 	ldw	r2,-4(fp)
    2dd4:	11000183 	ldbu	r4,6(r2)
    2dd8:	00ffff44 	movi	r3,-3
    2ddc:	20c6703a 	and	r3,r4,r3
    2de0:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    2de4:	e0bfff17 	ldw	r2,-4(fp)
    2de8:	10c00183 	ldbu	r3,6(r2)
    2dec:	18c000cc 	andi	r3,r3,3
    2df0:	18c00f14 	ori	r3,r3,60
    2df4:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    2df8:	e13fff17 	ldw	r4,-4(fp)
    2dfc:	00032e00 	call	32e0 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    2e00:	0001883a 	nop
    2e04:	e037883a 	mov	sp,fp
    2e08:	dfc00117 	ldw	ra,4(sp)
    2e0c:	df000017 	ldw	fp,0(sp)
    2e10:	dec00204 	addi	sp,sp,8
    2e14:	f800283a 	ret

00002e18 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2e18:	defffa04 	addi	sp,sp,-24
    2e1c:	dfc00515 	stw	ra,20(sp)
    2e20:	df000415 	stw	fp,16(sp)
    2e24:	dc000315 	stw	r16,12(sp)
    2e28:	df000404 	addi	fp,sp,16
    2e2c:	e13ffd15 	stw	r4,-12(fp)
    2e30:	2805883a 	mov	r2,r5
    2e34:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2e38:	e0bffe03 	ldbu	r2,-8(fp)
    2e3c:	1000031e 	bne	r2,zero,2e4c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2e40:	e0bffd17 	ldw	r2,-12(fp)
    2e44:	10800204 	addi	r2,r2,8
    2e48:	00001006 	br	2e8c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2e4c:	e0bffe03 	ldbu	r2,-8(fp)
    2e50:	100b883a 	mov	r5,r2
    2e54:	e13ffd17 	ldw	r4,-12(fp)
    2e58:	00033480 	call	3348 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2e5c:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2e60:	e0bffc03 	ldbu	r2,-16(fp)
    2e64:	10000826 	beq	r2,zero,2e88 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2e68:	e0bffd17 	ldw	r2,-12(fp)
    2e6c:	14000204 	addi	r16,r2,8
    2e70:	e0bffc03 	ldbu	r2,-16(fp)
    2e74:	014001c4 	movi	r5,7
    2e78:	1009883a 	mov	r4,r2
    2e7c:	000d18c0 	call	d18c <__mulsi3>
    2e80:	8085883a 	add	r2,r16,r2
    2e84:	00000106 	br	2e8c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2e88:	0005883a 	mov	r2,zero
        };
    2e8c:	e6ffff04 	addi	sp,fp,-4
    2e90:	dfc00217 	ldw	ra,8(sp)
    2e94:	df000117 	ldw	fp,4(sp)
    2e98:	dc000017 	ldw	r16,0(sp)
    2e9c:	dec00304 	addi	sp,sp,12
    2ea0:	f800283a 	ret

00002ea4 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2ea4:	defffd04 	addi	sp,sp,-12
    2ea8:	df000215 	stw	fp,8(sp)
    2eac:	df000204 	addi	fp,sp,8
    2eb0:	2005883a 	mov	r2,r4
    2eb4:	e17fff15 	stw	r5,-4(fp)
    2eb8:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2ebc:	0001883a 	nop
    2ec0:	e037883a 	mov	sp,fp
    2ec4:	df000017 	ldw	fp,0(sp)
    2ec8:	dec00104 	addi	sp,sp,4
    2ecc:	f800283a 	ret

00002ed0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2ed0:	defff804 	addi	sp,sp,-32
    2ed4:	dfc00715 	stw	ra,28(sp)
    2ed8:	df000615 	stw	fp,24(sp)
    2edc:	dc000515 	stw	r16,20(sp)
    2ee0:	df000604 	addi	fp,sp,24
    2ee4:	e13ffb15 	stw	r4,-20(fp)
    2ee8:	2809883a 	mov	r4,r5
    2eec:	3007883a 	mov	r3,r6
    2ef0:	3805883a 	mov	r2,r7
    2ef4:	e13ffc05 	stb	r4,-16(fp)
    2ef8:	e0fffd05 	stb	r3,-12(fp)
    2efc:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2f00:	e0bffc03 	ldbu	r2,-16(fp)
    2f04:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2f08:	e0fffa43 	ldbu	r3,-23(fp)
    2f0c:	00bfe004 	movi	r2,-128
    2f10:	1884703a 	and	r2,r3,r2
    2f14:	10803fcc 	andi	r2,r2,255
    2f18:	1000031e 	bne	r2,zero,2f28 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2f1c:	e0bffe03 	ldbu	r2,-8(fp)
    2f20:	10800230 	cmpltui	r2,r2,8
    2f24:	1000021e 	bne	r2,zero,2f30 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2f28:	0005883a 	mov	r2,zero
    2f2c:	00007a06 	br	3118 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2f30:	e0bffd03 	ldbu	r2,-12(fp)
    2f34:	10000726 	beq	r2,zero,2f54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2f38:	e0bffb17 	ldw	r2,-20(fp)
    2f3c:	108001c3 	ldbu	r2,7(r2)
    2f40:	10803fcc 	andi	r2,r2,255
    2f44:	108001d8 	cmpnei	r2,r2,7
    2f48:	1000021e 	bne	r2,zero,2f54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2f4c:	0005883a 	mov	r2,zero
    2f50:	00007106 	br	3118 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2f54:	000b883a 	mov	r5,zero
    2f58:	e13ffb17 	ldw	r4,-20(fp)
    2f5c:	00033480 	call	3348 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2f60:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2f64:	e0bffa03 	ldbu	r2,-24(fp)
    2f68:	1000021e 	bne	r2,zero,2f74 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2f6c:	0005883a 	mov	r2,zero
    2f70:	00006906 	br	3118 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2f74:	e0bffa43 	ldbu	r2,-23(fp)
    2f78:	10803fcc 	andi	r2,r2,255
    2f7c:	1000241e 	bne	r2,zero,3010 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2f80:	e0bffd03 	ldbu	r2,-12(fp)
    2f84:	10001026 	beq	r2,zero,2fc8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2f88:	e0bffa03 	ldbu	r2,-24(fp)
    2f8c:	e43ffb17 	ldw	r16,-20(fp)
    2f90:	014001c4 	movi	r5,7
    2f94:	1009883a 	mov	r4,r2
    2f98:	000d18c0 	call	d18c <__mulsi3>
    2f9c:	8085883a 	add	r2,r16,r2
    2fa0:	10800304 	addi	r2,r2,12
    2fa4:	00c01044 	movi	r3,65
    2fa8:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2fac:	e0bffb17 	ldw	r2,-20(fp)
    2fb0:	108001c3 	ldbu	r2,7(r2)
    2fb4:	10800044 	addi	r2,r2,1
    2fb8:	1007883a 	mov	r3,r2
    2fbc:	e0bffb17 	ldw	r2,-20(fp)
    2fc0:	10c001c5 	stb	r3,7(r2)
    2fc4:	00000906 	br	2fec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2fc8:	e0bffa03 	ldbu	r2,-24(fp)
    2fcc:	e43ffb17 	ldw	r16,-20(fp)
    2fd0:	014001c4 	movi	r5,7
    2fd4:	1009883a 	mov	r4,r2
    2fd8:	000d18c0 	call	d18c <__mulsi3>
    2fdc:	8085883a 	add	r2,r16,r2
    2fe0:	10800304 	addi	r2,r2,12
    2fe4:	00c00044 	movi	r3,1
    2fe8:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2fec:	e0bffa03 	ldbu	r2,-24(fp)
    2ff0:	e43ffb17 	ldw	r16,-20(fp)
    2ff4:	014001c4 	movi	r5,7
    2ff8:	1009883a 	mov	r4,r2
    2ffc:	000d18c0 	call	d18c <__mulsi3>
    3000:	8085883a 	add	r2,r16,r2
    3004:	10800304 	addi	r2,r2,12
    3008:	10800003 	ldbu	r2,0(r2)
    300c:	00004206 	br	3118 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    3010:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    3014:	e0bffa43 	ldbu	r2,-23(fp)
    3018:	108001cc 	andi	r2,r2,7
    301c:	108001cc 	andi	r2,r2,7
    3020:	100890fa 	slli	r4,r2,3
    3024:	e0fffa83 	ldbu	r3,-22(fp)
    3028:	00bff1c4 	movi	r2,-57
    302c:	1884703a 	and	r2,r3,r2
    3030:	1007883a 	mov	r3,r2
    3034:	2005883a 	mov	r2,r4
    3038:	1884b03a 	or	r2,r3,r2
    303c:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    3040:	e0bffd03 	ldbu	r2,-12(fp)
    3044:	10001526 	beq	r2,zero,309c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    3048:	e0bffa83 	ldbu	r2,-22(fp)
    304c:	10801014 	ori	r2,r2,64
    3050:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    3054:	e0bffb17 	ldw	r2,-20(fp)
    3058:	108001c3 	ldbu	r2,7(r2)
    305c:	10800044 	addi	r2,r2,1
    3060:	1007883a 	mov	r3,r2
    3064:	e0bffb17 	ldw	r2,-20(fp)
    3068:	10c001c5 	stb	r3,7(r2)
    306c:	e0bffb17 	ldw	r2,-20(fp)
    3070:	108001c3 	ldbu	r2,7(r2)
    3074:	108001cc 	andi	r2,r2,7
    3078:	110001cc 	andi	r4,r2,7
    307c:	e0fffa83 	ldbu	r3,-22(fp)
    3080:	00bffe04 	movi	r2,-8
    3084:	1884703a 	and	r2,r3,r2
    3088:	1007883a 	mov	r3,r2
    308c:	2005883a 	mov	r2,r4
    3090:	1884b03a 	or	r2,r3,r2
    3094:	e0bffa85 	stb	r2,-22(fp)
    3098:	00000e06 	br	30d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    309c:	e0fffa83 	ldbu	r3,-22(fp)
    30a0:	00bfefc4 	movi	r2,-65
    30a4:	1884703a 	and	r2,r3,r2
    30a8:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    30ac:	e0bffe03 	ldbu	r2,-8(fp)
    30b0:	108001cc 	andi	r2,r2,7
    30b4:	110001cc 	andi	r4,r2,7
    30b8:	e0fffa83 	ldbu	r3,-22(fp)
    30bc:	00bffe04 	movi	r2,-8
    30c0:	1884703a 	and	r2,r3,r2
    30c4:	1007883a 	mov	r3,r2
    30c8:	2005883a 	mov	r2,r4
    30cc:	1884b03a 	or	r2,r3,r2
    30d0:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    30d4:	e0bffa03 	ldbu	r2,-24(fp)
    30d8:	e43ffb17 	ldw	r16,-20(fp)
    30dc:	014001c4 	movi	r5,7
    30e0:	1009883a 	mov	r4,r2
    30e4:	000d18c0 	call	d18c <__mulsi3>
    30e8:	8085883a 	add	r2,r16,r2
    30ec:	10800304 	addi	r2,r2,12
    30f0:	e0fffa83 	ldbu	r3,-22(fp)
    30f4:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    30f8:	e0bffa03 	ldbu	r2,-24(fp)
    30fc:	e43ffb17 	ldw	r16,-20(fp)
    3100:	014001c4 	movi	r5,7
    3104:	1009883a 	mov	r4,r2
    3108:	000d18c0 	call	d18c <__mulsi3>
    310c:	8085883a 	add	r2,r16,r2
    3110:	10800304 	addi	r2,r2,12
    3114:	10800003 	ldbu	r2,0(r2)
        };
    3118:	e6ffff04 	addi	sp,fp,-4
    311c:	dfc00217 	ldw	ra,8(sp)
    3120:	df000117 	ldw	fp,4(sp)
    3124:	dc000017 	ldw	r16,0(sp)
    3128:	dec00304 	addi	sp,sp,12
    312c:	f800283a 	ret

00003130 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    3130:	defffb04 	addi	sp,sp,-20
    3134:	dfc00415 	stw	ra,16(sp)
    3138:	df000315 	stw	fp,12(sp)
    313c:	df000304 	addi	fp,sp,12
    3140:	e13ffe15 	stw	r4,-8(fp)
    3144:	2805883a 	mov	r2,r5
    3148:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    314c:	e0bfff03 	ldbu	r2,-4(fp)
    3150:	10801058 	cmpnei	r2,r2,65
    3154:	1000031e 	bne	r2,zero,3164 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    3158:	e13ffe17 	ldw	r4,-8(fp)
    315c:	00032e00 	call	32e0 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    3160:	00000906 	br	3188 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    3164:	e0bfff03 	ldbu	r2,-4(fp)
    3168:	100b883a 	mov	r5,r2
    316c:	e13ffe17 	ldw	r4,-8(fp)
    3170:	00033480 	call	3348 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    3174:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    3178:	e0bffd03 	ldbu	r2,-12(fp)
    317c:	100b883a 	mov	r5,r2
    3180:	e13ffe17 	ldw	r4,-8(fp)
    3184:	00033dc0 	call	33dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    3188:	e037883a 	mov	sp,fp
    318c:	dfc00117 	ldw	ra,4(sp)
    3190:	df000017 	ldw	fp,0(sp)
    3194:	dec00204 	addi	sp,sp,8
    3198:	f800283a 	ret

0000319c <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    319c:	defffa04 	addi	sp,sp,-24
    31a0:	dfc00515 	stw	ra,20(sp)
    31a4:	df000415 	stw	fp,16(sp)
    31a8:	dc400315 	stw	r17,12(sp)
    31ac:	dc000215 	stw	r16,8(sp)
    31b0:	df000404 	addi	fp,sp,16
    31b4:	e13ffc15 	stw	r4,-16(fp)
    31b8:	2805883a 	mov	r2,r5
    31bc:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    31c0:	e0bffd03 	ldbu	r2,-12(fp)
    31c4:	e43ffc17 	ldw	r16,-16(fp)
    31c8:	014001c4 	movi	r5,7
    31cc:	1009883a 	mov	r4,r2
    31d0:	000d18c0 	call	d18c <__mulsi3>
    31d4:	8085883a 	add	r2,r16,r2
    31d8:	10800304 	addi	r2,r2,12
    31dc:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    31e0:	e0bffd03 	ldbu	r2,-12(fp)
    31e4:	e43ffc17 	ldw	r16,-16(fp)
    31e8:	014001c4 	movi	r5,7
    31ec:	1009883a 	mov	r4,r2
    31f0:	000d18c0 	call	d18c <__mulsi3>
    31f4:	8085883a 	add	r2,r16,r2
    31f8:	10800344 	addi	r2,r2,13
    31fc:	00c00044 	movi	r3,1
    3200:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    3204:	e0bffd03 	ldbu	r2,-12(fp)
    3208:	e43ffc17 	ldw	r16,-16(fp)
    320c:	014001c4 	movi	r5,7
    3210:	1009883a 	mov	r4,r2
    3214:	000d18c0 	call	d18c <__mulsi3>
    3218:	8085883a 	add	r2,r16,r2
    321c:	10800384 	addi	r2,r2,14
    3220:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    3224:	e0fffd03 	ldbu	r3,-12(fp)
    3228:	e0bffc17 	ldw	r2,-16(fp)
    322c:	14000104 	addi	r16,r2,4
    3230:	e47ffc17 	ldw	r17,-16(fp)
    3234:	014001c4 	movi	r5,7
    3238:	1809883a 	mov	r4,r3
    323c:	000d18c0 	call	d18c <__mulsi3>
    3240:	8885883a 	add	r2,r17,r2
    3244:	10800204 	addi	r2,r2,8
    3248:	81403fcc 	andi	r5,r16,255
    324c:	10c00003 	ldbu	r3,0(r2)
    3250:	1806703a 	and	r3,r3,zero
    3254:	1809883a 	mov	r4,r3
    3258:	2807883a 	mov	r3,r5
    325c:	20c6b03a 	or	r3,r4,r3
    3260:	10c00005 	stb	r3,0(r2)
    3264:	8006d23a 	srli	r3,r16,8
    3268:	19403fcc 	andi	r5,r3,255
    326c:	10c00043 	ldbu	r3,1(r2)
    3270:	1806703a 	and	r3,r3,zero
    3274:	1809883a 	mov	r4,r3
    3278:	2807883a 	mov	r3,r5
    327c:	20c6b03a 	or	r3,r4,r3
    3280:	10c00045 	stb	r3,1(r2)
    3284:	8006d43a 	srli	r3,r16,16
    3288:	19403fcc 	andi	r5,r3,255
    328c:	10c00083 	ldbu	r3,2(r2)
    3290:	1806703a 	and	r3,r3,zero
    3294:	1809883a 	mov	r4,r3
    3298:	2807883a 	mov	r3,r5
    329c:	20c6b03a 	or	r3,r4,r3
    32a0:	10c00085 	stb	r3,2(r2)
    32a4:	800ad63a 	srli	r5,r16,24
    32a8:	10c000c3 	ldbu	r3,3(r2)
    32ac:	1806703a 	and	r3,r3,zero
    32b0:	1809883a 	mov	r4,r3
    32b4:	2807883a 	mov	r3,r5
    32b8:	20c6b03a 	or	r3,r4,r3
    32bc:	10c000c5 	stb	r3,3(r2)
        };
    32c0:	0001883a 	nop
    32c4:	e6fffe04 	addi	sp,fp,-8
    32c8:	dfc00317 	ldw	ra,12(sp)
    32cc:	df000217 	ldw	fp,8(sp)
    32d0:	dc400117 	ldw	r17,4(sp)
    32d4:	dc000017 	ldw	r16,0(sp)
    32d8:	dec00404 	addi	sp,sp,16
    32dc:	f800283a 	ret

000032e0 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    32e0:	defffc04 	addi	sp,sp,-16
    32e4:	dfc00315 	stw	ra,12(sp)
    32e8:	df000215 	stw	fp,8(sp)
    32ec:	df000204 	addi	fp,sp,8
    32f0:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    32f4:	00800044 	movi	r2,1
    32f8:	e0bffe05 	stb	r2,-8(fp)
    32fc:	e0bffe03 	ldbu	r2,-8(fp)
    3300:	10800428 	cmpgeui	r2,r2,16
    3304:	1000081e 	bne	r2,zero,3328 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    3308:	e0bffe03 	ldbu	r2,-8(fp)
    330c:	100b883a 	mov	r5,r2
    3310:	e13fff17 	ldw	r4,-4(fp)
    3314:	000319c0 	call	319c <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    3318:	e0bffe03 	ldbu	r2,-8(fp)
    331c:	10800044 	addi	r2,r2,1
    3320:	e0bffe05 	stb	r2,-8(fp)
    3324:	003ff506 	br	32fc <__alt_data_end+0xfc0032fc>
                        InitEntry(i);

                hubCounter = 0;
    3328:	e0bfff17 	ldw	r2,-4(fp)
    332c:	100001c5 	stb	zero,7(r2)
        };
    3330:	0001883a 	nop
    3334:	e037883a 	mov	sp,fp
    3338:	dfc00117 	ldw	ra,4(sp)
    333c:	df000017 	ldw	fp,0(sp)
    3340:	dec00204 	addi	sp,sp,8
    3344:	f800283a 	ret

00003348 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    3348:	defffa04 	addi	sp,sp,-24
    334c:	dfc00515 	stw	ra,20(sp)
    3350:	df000415 	stw	fp,16(sp)
    3354:	dc000315 	stw	r16,12(sp)
    3358:	df000404 	addi	fp,sp,16
    335c:	e13ffd15 	stw	r4,-12(fp)
    3360:	2805883a 	mov	r2,r5
    3364:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    3368:	00800044 	movi	r2,1
    336c:	e0bffc05 	stb	r2,-16(fp)
    3370:	e0bffc03 	ldbu	r2,-16(fp)
    3374:	10800428 	cmpgeui	r2,r2,16
    3378:	1000111e 	bne	r2,zero,33c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    337c:	e0bffc03 	ldbu	r2,-16(fp)
    3380:	e43ffd17 	ldw	r16,-12(fp)
    3384:	014001c4 	movi	r5,7
    3388:	1009883a 	mov	r4,r2
    338c:	000d18c0 	call	d18c <__mulsi3>
    3390:	8085883a 	add	r2,r16,r2
    3394:	10800304 	addi	r2,r2,12
    3398:	10800003 	ldbu	r2,0(r2)
    339c:	10c03fcc 	andi	r3,r2,255
    33a0:	e0bffe03 	ldbu	r2,-8(fp)
    33a4:	1880021e 	bne	r3,r2,33b0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    33a8:	e0bffc03 	ldbu	r2,-16(fp)
    33ac:	00000506 	br	33c4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    33b0:	e0bffc03 	ldbu	r2,-16(fp)
    33b4:	10800044 	addi	r2,r2,1
    33b8:	e0bffc05 	stb	r2,-16(fp)
    33bc:	003fec06 	br	3370 <__alt_data_end+0xfc003370>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    33c0:	0005883a 	mov	r2,zero
        };
    33c4:	e6ffff04 	addi	sp,fp,-4
    33c8:	dfc00217 	ldw	ra,8(sp)
    33cc:	df000117 	ldw	fp,4(sp)
    33d0:	dc000017 	ldw	r16,0(sp)
    33d4:	dec00304 	addi	sp,sp,12
    33d8:	f800283a 	ret

000033dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    33dc:	defffa04 	addi	sp,sp,-24
    33e0:	dfc00515 	stw	ra,20(sp)
    33e4:	df000415 	stw	fp,16(sp)
    33e8:	dc000315 	stw	r16,12(sp)
    33ec:	df000404 	addi	fp,sp,16
    33f0:	e13ffd15 	stw	r4,-12(fp)
    33f4:	2805883a 	mov	r2,r5
    33f8:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    33fc:	e0bffe03 	ldbu	r2,-8(fp)
    3400:	10003026 	beq	r2,zero,34c4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    3404:	e0bffe03 	ldbu	r2,-8(fp)
    3408:	e43ffd17 	ldw	r16,-12(fp)
    340c:	014001c4 	movi	r5,7
    3410:	1009883a 	mov	r4,r2
    3414:	000d18c0 	call	d18c <__mulsi3>
    3418:	8085883a 	add	r2,r16,r2
    341c:	10800304 	addi	r2,r2,12
    3420:	10800003 	ldbu	r2,0(r2)
    3424:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    3428:	e0bffc43 	ldbu	r2,-15(fp)
    342c:	1080100c 	andi	r2,r2,64
    3430:	10803fcc 	andi	r2,r2,255
    3434:	10001e26 	beq	r2,zero,34b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    3438:	00800044 	movi	r2,1
    343c:	e0bffc05 	stb	r2,-16(fp)
    3440:	e0bffc03 	ldbu	r2,-16(fp)
    3444:	100d883a 	mov	r6,r2
    3448:	e17ffc43 	ldbu	r5,-15(fp)
    344c:	e13ffd17 	ldw	r4,-12(fp)
    3450:	00034e00 	call	34e0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    3454:	e0bffc05 	stb	r2,-16(fp)
    3458:	e0bffc03 	ldbu	r2,-16(fp)
    345c:	1004c03a 	cmpne	r2,r2,zero
    3460:	10803fcc 	andi	r2,r2,255
    3464:	10000526 	beq	r2,zero,347c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    3468:	e0bffc03 	ldbu	r2,-16(fp)
    346c:	100b883a 	mov	r5,r2
    3470:	e13ffd17 	ldw	r4,-12(fp)
    3474:	00033dc0 	call	33dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    3478:	003ff106 	br	3440 <__alt_data_end+0xfc003440>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    347c:	e0bffd17 	ldw	r2,-12(fp)
    3480:	10c001c3 	ldbu	r3,7(r2)
    3484:	e0bffc43 	ldbu	r2,-15(fp)
    3488:	108001cc 	andi	r2,r2,7
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	10803fcc 	andi	r2,r2,255
    3494:	1880061e 	bne	r3,r2,34b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    3498:	e0bffd17 	ldw	r2,-12(fp)
    349c:	108001c3 	ldbu	r2,7(r2)
    34a0:	10bfffc4 	addi	r2,r2,-1
    34a4:	1007883a 	mov	r3,r2
    34a8:	e0bffd17 	ldw	r2,-12(fp)
    34ac:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    34b0:	e0bffe03 	ldbu	r2,-8(fp)
    34b4:	100b883a 	mov	r5,r2
    34b8:	e13ffd17 	ldw	r4,-12(fp)
    34bc:	000319c0 	call	319c <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    34c0:	00000106 	br	34c8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    34c4:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    34c8:	e6ffff04 	addi	sp,fp,-4
    34cc:	dfc00217 	ldw	ra,8(sp)
    34d0:	df000117 	ldw	fp,4(sp)
    34d4:	dc000017 	ldw	r16,0(sp)
    34d8:	dec00304 	addi	sp,sp,12
    34dc:	f800283a 	ret

000034e0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    34e0:	defff904 	addi	sp,sp,-28
    34e4:	dfc00615 	stw	ra,24(sp)
    34e8:	df000515 	stw	fp,20(sp)
    34ec:	dc000415 	stw	r16,16(sp)
    34f0:	df000504 	addi	fp,sp,20
    34f4:	e13ffc15 	stw	r4,-16(fp)
    34f8:	e17ffd05 	stb	r5,-12(fp)
    34fc:	3005883a 	mov	r2,r6
    3500:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3504:	e0bffe03 	ldbu	r2,-8(fp)
    3508:	10000526 	beq	r2,zero,3520 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    350c:	e0bffe03 	ldbu	r2,-8(fp)
    3510:	10800428 	cmpgeui	r2,r2,16
    3514:	1000021e 	bne	r2,zero,3520 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3518:	e0bffe03 	ldbu	r2,-8(fp)
    351c:	00000106 	br	3524 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    3520:	00800044 	movi	r2,1
    3524:	e0bffb05 	stb	r2,-20(fp)
    3528:	e0bffb03 	ldbu	r2,-20(fp)
    352c:	10800428 	cmpgeui	r2,r2,16
    3530:	1000161e 	bne	r2,zero,358c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3534:	e0bffb03 	ldbu	r2,-20(fp)
    3538:	e43ffc17 	ldw	r16,-16(fp)
    353c:	014001c4 	movi	r5,7
    3540:	1009883a 	mov	r4,r2
    3544:	000d18c0 	call	d18c <__mulsi3>
    3548:	8085883a 	add	r2,r16,r2
    354c:	10800304 	addi	r2,r2,12
    3550:	10800003 	ldbu	r2,0(r2)
    3554:	1004d0fa 	srli	r2,r2,3
    3558:	108001cc 	andi	r2,r2,7
    355c:	1007883a 	mov	r3,r2
    3560:	e0bffd03 	ldbu	r2,-12(fp)
    3564:	108001cc 	andi	r2,r2,7
    3568:	18c03fcc 	andi	r3,r3,255
    356c:	10803fcc 	andi	r2,r2,255
    3570:	1880021e 	bne	r3,r2,357c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3574:	e0bffb03 	ldbu	r2,-20(fp)
    3578:	00000506 	br	3590 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    357c:	e0bffb03 	ldbu	r2,-20(fp)
    3580:	10800044 	addi	r2,r2,1
    3584:	e0bffb05 	stb	r2,-20(fp)
    3588:	003fe706 	br	3528 <__alt_data_end+0xfc003528>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    358c:	0005883a 	mov	r2,zero
        };
    3590:	e6ffff04 	addi	sp,fp,-4
    3594:	dfc00217 	ldw	ra,8(sp)
    3598:	df000117 	ldw	fp,4(sp)
    359c:	dc000017 	ldw	r16,0(sp)
    35a0:	dec00304 	addi	sp,sp,12
    35a4:	f800283a 	ret

000035a8 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    35a8:	defffb04 	addi	sp,sp,-20
    35ac:	dfc00415 	stw	ra,16(sp)
    35b0:	df000315 	stw	fp,12(sp)
    35b4:	df000304 	addi	fp,sp,12
    35b8:	e13ffe15 	stw	r4,-8(fp)
    35bc:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    35c0:	e0bffe17 	ldw	r2,-8(fp)
    35c4:	1009883a 	mov	r4,r2
    35c8:	0004f640 	call	4f64 <_ZN15USBDeviceConfigC1Ev>
    35cc:	e0bffe17 	ldw	r2,-8(fp)
    35d0:	10800104 	addi	r2,r2,4
    35d4:	1009883a 	mov	r4,r2
    35d8:	0004f980 	call	4f98 <_ZN17UsbConfigXtracterC1Ev>
    35dc:	008000b4 	movhi	r2,2
    35e0:	10900804 	addi	r2,r2,16416
    35e4:	e0fffe17 	ldw	r3,-8(fp)
    35e8:	18800015 	stw	r2,0(r3)
    35ec:	008000b4 	movhi	r2,2
    35f0:	10901504 	addi	r2,r2,16468
    35f4:	e0fffe17 	ldw	r3,-8(fp)
    35f8:	18800115 	stw	r2,4(r3)
    35fc:	e0bffe17 	ldw	r2,-8(fp)
    3600:	e0ffff17 	ldw	r3,-4(fp)
    3604:	10c00315 	stw	r3,12(r2)
    3608:	e0bffe17 	ldw	r2,-8(fp)
    360c:	10000405 	stb	zero,16(r2)
    3610:	e0bffe17 	ldw	r2,-8(fp)
    3614:	00c00044 	movi	r3,1
    3618:	10c006c5 	stb	r3,27(r2)
    361c:	e0bffe17 	ldw	r2,-8(fp)
    3620:	10000715 	stw	zero,28(r2)
    3624:	e0bffe17 	ldw	r2,-8(fp)
    3628:	10000905 	stb	zero,36(r2)
    362c:	e0bffe17 	ldw	r2,-8(fp)
    3630:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3634:	e03ffd05 	stb	zero,-12(fp)
    3638:	e0bffd03 	ldbu	r2,-12(fp)
    363c:	108000e8 	cmpgeui	r2,r2,3
    3640:	1000431e 	bne	r2,zero,3750 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3644:	e0fffd03 	ldbu	r3,-12(fp)
    3648:	e13ffe17 	ldw	r4,-8(fp)
    364c:	1805883a 	mov	r2,r3
    3650:	1085883a 	add	r2,r2,r2
    3654:	10c5883a 	add	r2,r2,r3
    3658:	2085883a 	add	r2,r4,r2
    365c:	10800444 	addi	r2,r2,17
    3660:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3664:	e13ffd03 	ldbu	r4,-12(fp)
    3668:	e0bffd03 	ldbu	r2,-12(fp)
    366c:	10000226 	beq	r2,zero,3678 <_ZN7XBOXONEC1EP3USB+0xd0>
    3670:	0007883a 	mov	r3,zero
    3674:	00000106 	br	367c <_ZN7XBOXONEC1EP3USB+0xd4>
    3678:	00c00204 	movi	r3,8
    367c:	e17ffe17 	ldw	r5,-8(fp)
    3680:	2005883a 	mov	r2,r4
    3684:	1085883a 	add	r2,r2,r2
    3688:	1105883a 	add	r2,r2,r4
    368c:	2885883a 	add	r2,r5,r2
    3690:	10800484 	addi	r2,r2,18
    3694:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    3698:	e0fffd03 	ldbu	r3,-12(fp)
    369c:	e13ffe17 	ldw	r4,-8(fp)
    36a0:	1805883a 	mov	r2,r3
    36a4:	1085883a 	add	r2,r2,r2
    36a8:	10c5883a 	add	r2,r2,r3
    36ac:	2085883a 	add	r2,r4,r2
    36b0:	10800404 	addi	r2,r2,16
    36b4:	110000c3 	ldbu	r4,3(r2)
    36b8:	00ffff84 	movi	r3,-2
    36bc:	20c6703a 	and	r3,r4,r3
    36c0:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    36c4:	e0fffd03 	ldbu	r3,-12(fp)
    36c8:	e13ffe17 	ldw	r4,-8(fp)
    36cc:	1805883a 	mov	r2,r3
    36d0:	1085883a 	add	r2,r2,r2
    36d4:	10c5883a 	add	r2,r2,r3
    36d8:	2085883a 	add	r2,r4,r2
    36dc:	10800404 	addi	r2,r2,16
    36e0:	110000c3 	ldbu	r4,3(r2)
    36e4:	00ffff44 	movi	r3,-3
    36e8:	20c6703a 	and	r3,r4,r3
    36ec:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    36f0:	e13ffd03 	ldbu	r4,-12(fp)
    36f4:	e0bffd03 	ldbu	r2,-12(fp)
    36f8:	10000226 	beq	r2,zero,3704 <_ZN7XBOXONEC1EP3USB+0x15c>
    36fc:	00c00044 	movi	r3,1
    3700:	00000106 	br	3708 <_ZN7XBOXONEC1EP3USB+0x160>
    3704:	00c003c4 	movi	r3,15
    3708:	e17ffe17 	ldw	r5,-8(fp)
    370c:	2005883a 	mov	r2,r4
    3710:	1085883a 	add	r2,r2,r2
    3714:	1105883a 	add	r2,r2,r4
    3718:	2885883a 	add	r2,r5,r2
    371c:	10800404 	addi	r2,r2,16
    3720:	18c7883a 	add	r3,r3,r3
    3724:	18cb883a 	add	r5,r3,r3
    3728:	10c000c3 	ldbu	r3,3(r2)
    372c:	18c000cc 	andi	r3,r3,3
    3730:	1809883a 	mov	r4,r3
    3734:	2807883a 	mov	r3,r5
    3738:	20c6b03a 	or	r3,r4,r3
    373c:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3740:	e0bffd03 	ldbu	r2,-12(fp)
    3744:	10800044 	addi	r2,r2,1
    3748:	e0bffd05 	stb	r2,-12(fp)
    374c:	003fba06 	br	3638 <__alt_data_end+0xfc003638>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    3750:	e0bffe17 	ldw	r2,-8(fp)
    3754:	10800317 	ldw	r2,12(r2)
    3758:	10000626 	beq	r2,zero,3774 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    375c:	e0bffe17 	ldw	r2,-8(fp)
    3760:	10800317 	ldw	r2,12(r2)
    3764:	e0fffe17 	ldw	r3,-8(fp)
    3768:	180b883a 	mov	r5,r3
    376c:	1009883a 	mov	r4,r2
    3770:	0004d180 	call	4d18 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3774:	0001883a 	nop
    3778:	e037883a 	mov	sp,fp
    377c:	dfc00117 	ldw	ra,4(sp)
    3780:	df000017 	ldw	fp,0(sp)
    3784:	dec00204 	addi	sp,sp,8
    3788:	f800283a 	ret

0000378c <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    378c:	deffde04 	addi	sp,sp,-136
    3790:	dfc02115 	stw	ra,132(sp)
    3794:	df002015 	stw	fp,128(sp)
    3798:	df002004 	addi	fp,sp,128
    379c:	e13ffc15 	stw	r4,-16(fp)
    37a0:	2809883a 	mov	r4,r5
    37a4:	3007883a 	mov	r3,r6
    37a8:	3805883a 	mov	r2,r7
    37ac:	e13ffd05 	stb	r4,-12(fp)
    37b0:	e0fffe05 	stb	r3,-8(fp)
    37b4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    37b8:	e0bfe744 	addi	r2,fp,-99
    37bc:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    37c0:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    37c4:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    37c8:	e0bffc17 	ldw	r2,-16(fp)
    37cc:	10800317 	ldw	r2,12(r2)
    37d0:	1009883a 	mov	r4,r2
    37d4:	0002cf40 	call	2cf4 <_ZN3USB14GetAddressPoolEv>
    37d8:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    37dc:	e0bffc17 	ldw	r2,-16(fp)
    37e0:	10800403 	ldbu	r2,16(r2)
    37e4:	10803fcc 	andi	r2,r2,255
    37e8:	10000226 	beq	r2,zero,37f4 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    37ec:	00bff644 	movi	r2,-39
    37f0:	00017606 	br	3dcc <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    37f4:	e0bfe517 	ldw	r2,-108(fp)
    37f8:	10800017 	ldw	r2,0(r2)
    37fc:	10800017 	ldw	r2,0(r2)
    3800:	000b883a 	mov	r5,zero
    3804:	e13fe517 	ldw	r4,-108(fp)
    3808:	103ee83a 	callr	r2
    380c:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    3810:	e0bfe317 	ldw	r2,-116(fp)
    3814:	1000021e 	bne	r2,zero,3820 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3818:	00bff584 	movi	r2,-42
    381c:	00016b06 	br	3dcc <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    3820:	e0bfe317 	ldw	r2,-116(fp)
    3824:	10c00003 	ldbu	r3,0(r2)
    3828:	11000043 	ldbu	r4,1(r2)
    382c:	2008923a 	slli	r4,r4,8
    3830:	20c6b03a 	or	r3,r4,r3
    3834:	11000083 	ldbu	r4,2(r2)
    3838:	2008943a 	slli	r4,r4,16
    383c:	20c6b03a 	or	r3,r4,r3
    3840:	108000c3 	ldbu	r2,3(r2)
    3844:	1004963a 	slli	r2,r2,24
    3848:	10c4b03a 	or	r2,r2,r3
    384c:	1000021e 	bne	r2,zero,3858 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    3850:	00bff5c4 	movi	r2,-41
    3854:	00015d06 	br	3dcc <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    3858:	e0bfe317 	ldw	r2,-116(fp)
    385c:	10c00003 	ldbu	r3,0(r2)
    3860:	11000043 	ldbu	r4,1(r2)
    3864:	2008923a 	slli	r4,r4,8
    3868:	20c6b03a 	or	r3,r4,r3
    386c:	11000083 	ldbu	r4,2(r2)
    3870:	2008943a 	slli	r4,r4,16
    3874:	20c6b03a 	or	r3,r4,r3
    3878:	108000c3 	ldbu	r2,3(r2)
    387c:	1004963a 	slli	r2,r2,24
    3880:	10c4b03a 	or	r2,r2,r3
    3884:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    3888:	e0bffc17 	ldw	r2,-16(fp)
    388c:	10c00444 	addi	r3,r2,17
    3890:	e0bfe317 	ldw	r2,-116(fp)
    3894:	19803fcc 	andi	r6,r3,255
    3898:	11000003 	ldbu	r4,0(r2)
    389c:	2008703a 	and	r4,r4,zero
    38a0:	200b883a 	mov	r5,r4
    38a4:	3009883a 	mov	r4,r6
    38a8:	2908b03a 	or	r4,r5,r4
    38ac:	11000005 	stb	r4,0(r2)
    38b0:	1808d23a 	srli	r4,r3,8
    38b4:	21803fcc 	andi	r6,r4,255
    38b8:	11000043 	ldbu	r4,1(r2)
    38bc:	2008703a 	and	r4,r4,zero
    38c0:	200b883a 	mov	r5,r4
    38c4:	3009883a 	mov	r4,r6
    38c8:	2908b03a 	or	r4,r5,r4
    38cc:	11000045 	stb	r4,1(r2)
    38d0:	1808d43a 	srli	r4,r3,16
    38d4:	21803fcc 	andi	r6,r4,255
    38d8:	11000083 	ldbu	r4,2(r2)
    38dc:	2008703a 	and	r4,r4,zero
    38e0:	200b883a 	mov	r5,r4
    38e4:	3009883a 	mov	r4,r6
    38e8:	2908b03a 	or	r4,r5,r4
    38ec:	11000085 	stb	r4,2(r2)
    38f0:	180ad63a 	srli	r5,r3,24
    38f4:	10c000c3 	ldbu	r3,3(r2)
    38f8:	1806703a 	and	r3,r3,zero
    38fc:	1809883a 	mov	r4,r3
    3900:	2807883a 	mov	r3,r5
    3904:	20c6b03a 	or	r3,r4,r3
    3908:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    390c:	e0bfe317 	ldw	r2,-116(fp)
    3910:	e0ffff03 	ldbu	r3,-4(fp)
    3914:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    3918:	e0bffc17 	ldw	r2,-16(fp)
    391c:	10c00317 	ldw	r3,12(r2)
    3920:	00800484 	movi	r2,18
    3924:	113fffcc 	andi	r4,r2,65535
    3928:	e0bfe744 	addi	r2,fp,-99
    392c:	d8800015 	stw	r2,0(sp)
    3930:	200f883a 	mov	r7,r4
    3934:	000d883a 	mov	r6,zero
    3938:	000b883a 	mov	r5,zero
    393c:	1809883a 	mov	r4,r3
    3940:	00029200 	call	2920 <_ZN3USB11getDevDescrEhhtPh>
    3944:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    3948:	e0bfe317 	ldw	r2,-116(fp)
    394c:	e0ffe417 	ldw	r3,-112(fp)
    3950:	19403fcc 	andi	r5,r3,255
    3954:	10c00003 	ldbu	r3,0(r2)
    3958:	1806703a 	and	r3,r3,zero
    395c:	1809883a 	mov	r4,r3
    3960:	2807883a 	mov	r3,r5
    3964:	20c6b03a 	or	r3,r4,r3
    3968:	10c00005 	stb	r3,0(r2)
    396c:	e0ffe417 	ldw	r3,-112(fp)
    3970:	1806d23a 	srli	r3,r3,8
    3974:	19403fcc 	andi	r5,r3,255
    3978:	10c00043 	ldbu	r3,1(r2)
    397c:	1806703a 	and	r3,r3,zero
    3980:	1809883a 	mov	r4,r3
    3984:	2807883a 	mov	r3,r5
    3988:	20c6b03a 	or	r3,r4,r3
    398c:	10c00045 	stb	r3,1(r2)
    3990:	e0ffe417 	ldw	r3,-112(fp)
    3994:	1806d43a 	srli	r3,r3,16
    3998:	19403fcc 	andi	r5,r3,255
    399c:	10c00083 	ldbu	r3,2(r2)
    39a0:	1806703a 	and	r3,r3,zero
    39a4:	1809883a 	mov	r4,r3
    39a8:	2807883a 	mov	r3,r5
    39ac:	20c6b03a 	or	r3,r4,r3
    39b0:	10c00085 	stb	r3,2(r2)
    39b4:	e0ffe417 	ldw	r3,-112(fp)
    39b8:	180ad63a 	srli	r5,r3,24
    39bc:	10c000c3 	ldbu	r3,3(r2)
    39c0:	1806703a 	and	r3,r3,zero
    39c4:	1809883a 	mov	r4,r3
    39c8:	2807883a 	mov	r3,r5
    39cc:	20c6b03a 	or	r3,r4,r3
    39d0:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    39d4:	e0bfe103 	ldbu	r2,-124(fp)
    39d8:	1000e61e 	bne	r2,zero,3d74 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    39dc:	e0bfe217 	ldw	r2,-120(fp)
    39e0:	10c00203 	ldbu	r3,8(r2)
    39e4:	10800243 	ldbu	r2,9(r2)
    39e8:	1004923a 	slli	r2,r2,8
    39ec:	10c4b03a 	or	r2,r2,r3
    39f0:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    39f4:	e0bfe217 	ldw	r2,-120(fp)
    39f8:	10c00283 	ldbu	r3,10(r2)
    39fc:	108002c3 	ldbu	r2,11(r2)
    3a00:	1004923a 	slli	r2,r2,8
    3a04:	10c4b03a 	or	r2,r2,r3
    3a08:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3a0c:	e0bffc17 	ldw	r2,-16(fp)
    3a10:	10800017 	ldw	r2,0(r2)
    3a14:	10800604 	addi	r2,r2,24
    3a18:	10800017 	ldw	r2,0(r2)
    3a1c:	e0ffe60b 	ldhu	r3,-104(fp)
    3a20:	e13fe68b 	ldhu	r4,-102(fp)
    3a24:	200d883a 	mov	r6,r4
    3a28:	180b883a 	mov	r5,r3
    3a2c:	e13ffc17 	ldw	r4,-16(fp)
    3a30:	103ee83a 	callr	r2
    3a34:	1080005c 	xori	r2,r2,1
    3a38:	10803fcc 	andi	r2,r2,255
    3a3c:	1000d51e 	bne	r2,zero,3d94 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    3a40:	e0bfe517 	ldw	r2,-108(fp)
    3a44:	10800017 	ldw	r2,0(r2)
    3a48:	10800104 	addi	r2,r2,4
    3a4c:	10800017 	ldw	r2,0(r2)
    3a50:	e0fffd03 	ldbu	r3,-12(fp)
    3a54:	e13ffe03 	ldbu	r4,-8(fp)
    3a58:	200f883a 	mov	r7,r4
    3a5c:	000d883a 	mov	r6,zero
    3a60:	180b883a 	mov	r5,r3
    3a64:	e13fe517 	ldw	r4,-108(fp)
    3a68:	103ee83a 	callr	r2
    3a6c:	1007883a 	mov	r3,r2
    3a70:	e0bffc17 	ldw	r2,-16(fp)
    3a74:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    3a78:	e0bffc17 	ldw	r2,-16(fp)
    3a7c:	10800403 	ldbu	r2,16(r2)
    3a80:	10803fcc 	andi	r2,r2,255
    3a84:	1000021e 	bne	r2,zero,3a90 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    3a88:	00bff504 	movi	r2,-44
    3a8c:	0000cf06 	br	3dcc <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    3a90:	e0bfe217 	ldw	r2,-120(fp)
    3a94:	10c001c3 	ldbu	r3,7(r2)
    3a98:	e0bffc17 	ldw	r2,-16(fp)
    3a9c:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    3aa0:	e0bffc17 	ldw	r2,-16(fp)
    3aa4:	10c00317 	ldw	r3,12(r2)
    3aa8:	e0bffc17 	ldw	r2,-16(fp)
    3aac:	10800403 	ldbu	r2,16(r2)
    3ab0:	10803fcc 	andi	r2,r2,255
    3ab4:	100f883a 	mov	r7,r2
    3ab8:	000d883a 	mov	r6,zero
    3abc:	000b883a 	mov	r5,zero
    3ac0:	1809883a 	mov	r4,r3
    3ac4:	0002bdc0 	call	2bdc <_ZN3USB7setAddrEhhh>
    3ac8:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    3acc:	e0bfe103 	ldbu	r2,-124(fp)
    3ad0:	10001026 	beq	r2,zero,3b14 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    3ad4:	e0bfe317 	ldw	r2,-116(fp)
    3ad8:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    3adc:	e0bfe517 	ldw	r2,-108(fp)
    3ae0:	10800017 	ldw	r2,0(r2)
    3ae4:	10800204 	addi	r2,r2,8
    3ae8:	10800017 	ldw	r2,0(r2)
    3aec:	e0fffc17 	ldw	r3,-16(fp)
    3af0:	18c00403 	ldbu	r3,16(r3)
    3af4:	18c03fcc 	andi	r3,r3,255
    3af8:	180b883a 	mov	r5,r3
    3afc:	e13fe517 	ldw	r4,-108(fp)
    3b00:	103ee83a 	callr	r2
                bAddress = 0;
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3b0c:	e0bfe103 	ldbu	r2,-124(fp)
    3b10:	0000ae06 	br	3dcc <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3b14:	e0bfe317 	ldw	r2,-116(fp)
    3b18:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3b1c:	e0bfe517 	ldw	r2,-108(fp)
    3b20:	10800017 	ldw	r2,0(r2)
    3b24:	10800017 	ldw	r2,0(r2)
    3b28:	e0fffc17 	ldw	r3,-16(fp)
    3b2c:	18c00403 	ldbu	r3,16(r3)
    3b30:	18c03fcc 	andi	r3,r3,255
    3b34:	180b883a 	mov	r5,r3
    3b38:	e13fe517 	ldw	r4,-108(fp)
    3b3c:	103ee83a 	callr	r2
    3b40:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3b44:	e0bfe317 	ldw	r2,-116(fp)
    3b48:	1000021e 	bne	r2,zero,3b54 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3b4c:	00bff584 	movi	r2,-42
    3b50:	00009e06 	br	3dcc <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3b54:	e0bfe317 	ldw	r2,-116(fp)
    3b58:	e0ffff03 	ldbu	r3,-4(fp)
    3b5c:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    3b60:	e0bffc17 	ldw	r2,-16(fp)
    3b64:	10c00317 	ldw	r3,12(r2)
    3b68:	e0bffc17 	ldw	r2,-16(fp)
    3b6c:	10800403 	ldbu	r2,16(r2)
    3b70:	11003fcc 	andi	r4,r2,255
    3b74:	e0bffc17 	ldw	r2,-16(fp)
    3b78:	10800444 	addi	r2,r2,17
    3b7c:	100f883a 	mov	r7,r2
    3b80:	01800044 	movi	r6,1
    3b84:	200b883a 	mov	r5,r4
    3b88:	1809883a 	mov	r4,r3
    3b8c:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3b90:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3b94:	e0bfe103 	ldbu	r2,-124(fp)
    3b98:	1000781e 	bne	r2,zero,3d7c <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3b9c:	e0bfe217 	ldw	r2,-120(fp)
    3ba0:	10800443 	ldbu	r2,17(r2)
    3ba4:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    3ba8:	e0bfe703 	ldbu	r2,-100(fp)
    3bac:	01402004 	movi	r5,128
    3bb0:	1009883a 	mov	r4,r2
    3bb4:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3bb8:	e03fe145 	stb	zero,-123(fp)
    3bbc:	e0ffe143 	ldbu	r3,-123(fp)
    3bc0:	e0bfe703 	ldbu	r2,-100(fp)
    3bc4:	1880222e 	bgeu	r3,r2,3c50 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    3bc8:	e0bffc17 	ldw	r2,-16(fp)
    3bcc:	10c00104 	addi	r3,r2,4
    3bd0:	e0bfed04 	addi	r2,fp,-76
    3bd4:	180b883a 	mov	r5,r3
    3bd8:	1009883a 	mov	r4,r2
    3bdc:	00050000 	call	5000 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	10c00317 	ldw	r3,12(r2)
    3be8:	e0bffc17 	ldw	r2,-16(fp)
    3bec:	10800403 	ldbu	r2,16(r2)
    3bf0:	11003fcc 	andi	r4,r2,255
    3bf4:	e17fe143 	ldbu	r5,-123(fp)
    3bf8:	e0bfed04 	addi	r2,fp,-76
    3bfc:	d8800015 	stw	r2,0(sp)
    3c00:	280f883a 	mov	r7,r5
    3c04:	000d883a 	mov	r6,zero
    3c08:	200b883a 	mov	r5,r4
    3c0c:	1809883a 	mov	r4,r3
    3c10:	0002a3c0 	call	2a3c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3c14:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3c18:	e0bfe103 	ldbu	r2,-124(fp)
    3c1c:	10000226 	beq	r2,zero,3c28 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    3c20:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3c24:	00006206 	br	3db0 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3c28:	e0bffc17 	ldw	r2,-16(fp)
    3c2c:	108006c3 	ldbu	r2,27(r2)
    3c30:	10803fcc 	andi	r2,r2,255
    3c34:	108000f0 	cmpltui	r2,r2,3
    3c38:	10000426 	beq	r2,zero,3c4c <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3c3c:	e0bfe143 	ldbu	r2,-123(fp)
    3c40:	10800044 	addi	r2,r2,1
    3c44:	e0bfe145 	stb	r2,-123(fp)
    3c48:	003fdc06 	br	3bbc <__alt_data_end+0xfc003bbc>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3c4c:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    3c50:	e0bffc17 	ldw	r2,-16(fp)
    3c54:	108006c3 	ldbu	r2,27(r2)
    3c58:	10803fcc 	andi	r2,r2,255
    3c5c:	108000e8 	cmpgeui	r2,r2,3
    3c60:	10004e26 	beq	r2,zero,3d9c <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3c64:	e0bffc17 	ldw	r2,-16(fp)
    3c68:	10c00317 	ldw	r3,12(r2)
    3c6c:	e0bffc17 	ldw	r2,-16(fp)
    3c70:	10800403 	ldbu	r2,16(r2)
    3c74:	11003fcc 	andi	r4,r2,255
    3c78:	e0bffc17 	ldw	r2,-16(fp)
    3c7c:	108006c3 	ldbu	r2,27(r2)
    3c80:	11403fcc 	andi	r5,r2,255
    3c84:	e0bffc17 	ldw	r2,-16(fp)
    3c88:	10800444 	addi	r2,r2,17
    3c8c:	100f883a 	mov	r7,r2
    3c90:	280d883a 	mov	r6,r5
    3c94:	200b883a 	mov	r5,r4
    3c98:	1809883a 	mov	r4,r3
    3c9c:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    3ca0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3ca4:	e0bfe103 	ldbu	r2,-124(fp)
    3ca8:	1000361e 	bne	r2,zero,3d84 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    3cac:	01003204 	movi	r4,200
    3cb0:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    3cb4:	e0bffc17 	ldw	r2,-16(fp)
    3cb8:	10c00317 	ldw	r3,12(r2)
    3cbc:	e0bffc17 	ldw	r2,-16(fp)
    3cc0:	10800403 	ldbu	r2,16(r2)
    3cc4:	11003fcc 	andi	r4,r2,255
    3cc8:	e0bffc17 	ldw	r2,-16(fp)
    3ccc:	10800443 	ldbu	r2,17(r2)
    3cd0:	11403fcc 	andi	r5,r2,255
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
    3cd8:	10800683 	ldbu	r2,26(r2)
    3cdc:	10803fcc 	andi	r2,r2,255
    3ce0:	100f883a 	mov	r7,r2
    3ce4:	280d883a 	mov	r6,r5
    3ce8:	200b883a 	mov	r5,r4
    3cec:	1809883a 	mov	r4,r3
    3cf0:	0002c700 	call	2c70 <_ZN3USB7setConfEhhh>
    3cf4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3cf8:	e0bfe103 	ldbu	r2,-124(fp)
    3cfc:	1000231e 	bne	r2,zero,3d8c <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    3d00:	01003204 	movi	r4,200
    3d04:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3d08:	e0bffc17 	ldw	r2,-16(fp)
    3d0c:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    3d10:	00800144 	movi	r2,5
    3d14:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3d18:	00800804 	movi	r2,32
    3d1c:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    3d20:	00800044 	movi	r2,1
    3d24:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3d28:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3d2c:	e0bfebc4 	addi	r2,fp,-81
    3d30:	01800144 	movi	r6,5
    3d34:	100b883a 	mov	r5,r2
    3d38:	e13ffc17 	ldw	r4,-16(fp)
    3d3c:	00046540 	call	4654 <_ZN7XBOXONE11XboxCommandEPht>
    3d40:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3d44:	e0bfe103 	ldbu	r2,-124(fp)
    3d48:	1000181e 	bne	r2,zero,3dac <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3d4c:	e13ffc17 	ldw	r4,-16(fp)
    3d50:	00046f40 	call	46f4 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3d54:	e0bffc17 	ldw	r2,-16(fp)
    3d58:	00c00044 	movi	r3,1
    3d5c:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    3d60:	e0bffc17 	ldw	r2,-16(fp)
    3d64:	00c00044 	movi	r3,1
    3d68:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3d6c:	0005883a 	mov	r2,zero
    3d70:	00001606 	br	3dcc <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3d74:	0001883a 	nop
    3d78:	00000d06 	br	3db0 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3d7c:	0001883a 	nop
    3d80:	00000b06 	br	3db0 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3d84:	0001883a 	nop
    3d88:	00000906 	br	3db0 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3d8c:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3d90:	00000706 	br	3db0 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3d94:	0001883a 	nop
    3d98:	00000106 	br	3da0 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3d9c:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    3da0:	00bff444 	movi	r2,-47
    3da4:	e0bfe105 	stb	r2,-124(fp)
    3da8:	00000106 	br	3db0 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    3dac:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    3db0:	e0bffc17 	ldw	r2,-16(fp)
    3db4:	10800017 	ldw	r2,0(r2)
    3db8:	10800204 	addi	r2,r2,8
    3dbc:	10800017 	ldw	r2,0(r2)
    3dc0:	e13ffc17 	ldw	r4,-16(fp)
    3dc4:	103ee83a 	callr	r2
        return rcode;
    3dc8:	e0bfe103 	ldbu	r2,-124(fp)
}
    3dcc:	e037883a 	mov	sp,fp
    3dd0:	dfc00117 	ldw	ra,4(sp)
    3dd4:	df000017 	ldw	fp,0(sp)
    3dd8:	dec00204 	addi	sp,sp,8
    3ddc:	f800283a 	ret

00003de0 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    3de0:	defff904 	addi	sp,sp,-28
    3de4:	df000615 	stw	fp,24(sp)
    3de8:	df000604 	addi	fp,sp,24
    3dec:	e13ffb15 	stw	r4,-20(fp)
    3df0:	3009883a 	mov	r4,r6
    3df4:	3807883a 	mov	r3,r7
    3df8:	e0800117 	ldw	r2,4(fp)
    3dfc:	e17ffc05 	stb	r5,-16(fp)
    3e00:	e13ffd05 	stb	r4,-12(fp)
    3e04:	e0fffe05 	stb	r3,-8(fp)
    3e08:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3e0c:	e0bffb17 	ldw	r2,-20(fp)
    3e10:	e0fffc03 	ldbu	r3,-16(fp)
    3e14:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3e18:	e0800217 	ldw	r2,8(fp)
    3e1c:	108000c3 	ldbu	r2,3(r2)
    3e20:	10803fcc 	andi	r2,r2,255
    3e24:	108000cc 	andi	r2,r2,3
    3e28:	108000d8 	cmpnei	r2,r2,3
    3e2c:	1000361e 	bne	r2,zero,3f08 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3e30:	e0800217 	ldw	r2,8(fp)
    3e34:	10800083 	ldbu	r2,2(r2)
    3e38:	10803fcc 	andi	r2,r2,255
    3e3c:	1080201c 	xori	r2,r2,128
    3e40:	10bfe004 	addi	r2,r2,-128
    3e44:	1000020e 	bge	r2,zero,3e50 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3e48:	00800084 	movi	r2,2
    3e4c:	00000106 	br	3e54 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3e50:	00800044 	movi	r2,1
    3e54:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3e58:	e0fffa03 	ldbu	r3,-24(fp)
    3e5c:	e0800217 	ldw	r2,8(fp)
    3e60:	10800083 	ldbu	r2,2(r2)
    3e64:	108003cc 	andi	r2,r2,15
    3e68:	100b883a 	mov	r5,r2
    3e6c:	e13ffb17 	ldw	r4,-20(fp)
    3e70:	1805883a 	mov	r2,r3
    3e74:	1085883a 	add	r2,r2,r2
    3e78:	10c5883a 	add	r2,r2,r3
    3e7c:	2085883a 	add	r2,r4,r2
    3e80:	10800444 	addi	r2,r2,17
    3e84:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3e88:	e0fffa03 	ldbu	r3,-24(fp)
    3e8c:	e0800217 	ldw	r2,8(fp)
    3e90:	11000103 	ldbu	r4,4(r2)
    3e94:	10800143 	ldbu	r2,5(r2)
    3e98:	1004923a 	slli	r2,r2,8
    3e9c:	1104b03a 	or	r2,r2,r4
    3ea0:	100b883a 	mov	r5,r2
    3ea4:	e13ffb17 	ldw	r4,-20(fp)
    3ea8:	1805883a 	mov	r2,r3
    3eac:	1085883a 	add	r2,r2,r2
    3eb0:	10c5883a 	add	r2,r2,r3
    3eb4:	2085883a 	add	r2,r4,r2
    3eb8:	10800484 	addi	r2,r2,18
    3ebc:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3ec0:	e0bffb17 	ldw	r2,-20(fp)
    3ec4:	10c00903 	ldbu	r3,36(r2)
    3ec8:	e0800217 	ldw	r2,8(fp)
    3ecc:	10800183 	ldbu	r2,6(r2)
    3ed0:	18c03fcc 	andi	r3,r3,255
    3ed4:	10803fcc 	andi	r2,r2,255
    3ed8:	1880042e 	bgeu	r3,r2,3eec <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3edc:	e0800217 	ldw	r2,8(fp)
    3ee0:	10c00183 	ldbu	r3,6(r2)
    3ee4:	e0bffb17 	ldw	r2,-20(fp)
    3ee8:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3eec:	e0bffb17 	ldw	r2,-20(fp)
    3ef0:	108006c3 	ldbu	r2,27(r2)
    3ef4:	10800044 	addi	r2,r2,1
    3ef8:	1007883a 	mov	r3,r2
    3efc:	e0bffb17 	ldw	r2,-20(fp)
    3f00:	10c006c5 	stb	r3,27(r2)
    3f04:	00000106 	br	3f0c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3f08:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3f0c:	e037883a 	mov	sp,fp
    3f10:	df000017 	ldw	fp,0(sp)
    3f14:	dec00104 	addi	sp,sp,4
    3f18:	f800283a 	ret

00003f1c <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3f1c:	213fff04 	addi	r4,r4,-4
    3f20:	0003de01 	jmpi	3de0 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003f24 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3f24:	defffd04 	addi	sp,sp,-12
    3f28:	df000215 	stw	fp,8(sp)
    3f2c:	df000204 	addi	fp,sp,8
    3f30:	e13ffe15 	stw	r4,-8(fp)
    3f34:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3f38:	0001883a 	nop
    3f3c:	e037883a 	mov	sp,fp
    3f40:	df000017 	ldw	fp,0(sp)
    3f44:	dec00104 	addi	sp,sp,4
    3f48:	f800283a 	ret

00003f4c <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3f4c:	defffd04 	addi	sp,sp,-12
    3f50:	dfc00215 	stw	ra,8(sp)
    3f54:	df000115 	stw	fp,4(sp)
    3f58:	df000104 	addi	fp,sp,4
    3f5c:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3f60:	e0bfff17 	ldw	r2,-4(fp)
    3f64:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3f68:	e0bfff17 	ldw	r2,-4(fp)
    3f6c:	10800317 	ldw	r2,12(r2)
    3f70:	1009883a 	mov	r4,r2
    3f74:	0002cf40 	call	2cf4 <_ZN3USB14GetAddressPoolEv>
    3f78:	1009883a 	mov	r4,r2
    3f7c:	20800017 	ldw	r2,0(r4)
    3f80:	10800204 	addi	r2,r2,8
    3f84:	10800017 	ldw	r2,0(r2)
    3f88:	e0ffff17 	ldw	r3,-4(fp)
    3f8c:	18c00403 	ldbu	r3,16(r3)
    3f90:	18c03fcc 	andi	r3,r3,255
    3f94:	180b883a 	mov	r5,r3
    3f98:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3f9c:	e0bfff17 	ldw	r2,-4(fp)
    3fa0:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3fa4:	e0bfff17 	ldw	r2,-4(fp)
    3fa8:	00c00044 	movi	r3,1
    3fac:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3fb0:	e0bfff17 	ldw	r2,-4(fp)
    3fb4:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3fb8:	e0bfff17 	ldw	r2,-4(fp)
    3fbc:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3fc0:	e0bfff17 	ldw	r2,-4(fp)
    3fc4:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3fc8:	0005883a 	mov	r2,zero
}
    3fcc:	e037883a 	mov	sp,fp
    3fd0:	dfc00117 	ldw	ra,4(sp)
    3fd4:	df000017 	ldw	fp,0(sp)
    3fd8:	dec00204 	addi	sp,sp,8
    3fdc:	f800283a 	ret

00003fe0 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3fe0:	defffa04 	addi	sp,sp,-24
    3fe4:	dfc00515 	stw	ra,20(sp)
    3fe8:	df000415 	stw	fp,16(sp)
    3fec:	df000404 	addi	fp,sp,16
    3ff0:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3ff4:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3ff8:	e0bfff17 	ldw	r2,-4(fp)
    3ffc:	10800943 	ldbu	r2,37(r2)
    4000:	1080005c 	xori	r2,r2,1
    4004:	10803fcc 	andi	r2,r2,255
    4008:	10000226 	beq	r2,zero,4014 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    400c:	0005883a 	mov	r2,zero
    4010:	00002c06 	br	40c4 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    4014:	00006dc0 	call	6dc <_Z6millisv>
    4018:	1007883a 	mov	r3,r2
    401c:	e0bfff17 	ldw	r2,-4(fp)
    4020:	10800717 	ldw	r2,28(r2)
    4024:	1885c83a 	sub	r2,r3,r2
    4028:	0084303a 	nor	r2,zero,r2
    402c:	1004d7fa 	srli	r2,r2,31
    4030:	10803fcc 	andi	r2,r2,255
    4034:	10002226 	beq	r2,zero,40c0 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    4038:	00006dc0 	call	6dc <_Z6millisv>
    403c:	1007883a 	mov	r3,r2
    4040:	e0bfff17 	ldw	r2,-4(fp)
    4044:	10800903 	ldbu	r2,36(r2)
    4048:	10803fcc 	andi	r2,r2,255
    404c:	1887883a 	add	r3,r3,r2
    4050:	e0bfff17 	ldw	r2,-4(fp)
    4054:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    4058:	e0bfff17 	ldw	r2,-4(fp)
    405c:	10800603 	ldbu	r2,24(r2)
    4060:	10803fcc 	andi	r2,r2,255
    4064:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    4068:	e0bfff17 	ldw	r2,-4(fp)
    406c:	11000317 	ldw	r4,12(r2)
    4070:	e0bfff17 	ldw	r2,-4(fp)
    4074:	10800403 	ldbu	r2,16(r2)
    4078:	11403fcc 	andi	r5,r2,255
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	108005c3 	ldbu	r2,23(r2)
    4084:	11803fcc 	andi	r6,r2,255
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	10800f84 	addi	r2,r2,62
    4090:	e0ffff17 	ldw	r3,-4(fp)
    4094:	18c00903 	ldbu	r3,36(r3)
    4098:	18c03fcc 	andi	r3,r3,255
    409c:	e1fffe84 	addi	r7,fp,-6
    40a0:	d8c00115 	stw	r3,4(sp)
    40a4:	d8800015 	stw	r2,0(sp)
    40a8:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    40ac:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    40b0:	e0bffe43 	ldbu	r2,-7(fp)
    40b4:	1000021e 	bne	r2,zero,40c0 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    40b8:	e13fff17 	ldw	r4,-4(fp)
    40bc:	00040d80 	call	40d8 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    40c0:	e0bffe03 	ldbu	r2,-8(fp)
}
    40c4:	e037883a 	mov	sp,fp
    40c8:	dfc00117 	ldw	ra,4(sp)
    40cc:	df000017 	ldw	fp,0(sp)
    40d0:	dec00204 	addi	sp,sp,8
    40d4:	f800283a 	ret

000040d8 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    40d8:	defffd04 	addi	sp,sp,-12
    40dc:	df000215 	stw	fp,8(sp)
    40e0:	df000204 	addi	fp,sp,8
    40e4:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    40e8:	e0bfff17 	ldw	r2,-4(fp)
    40ec:	10800f83 	ldbu	r2,62(r2)
    40f0:	10803fcc 	andi	r2,r2,255
    40f4:	108001d8 	cmpnei	r2,r2,7
    40f8:	10002f1e 	bne	r2,zero,41b8 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    40fc:	e0bfff17 	ldw	r2,-4(fp)
    4100:	10801083 	ldbu	r2,66(r2)
    4104:	10803fcc 	andi	r2,r2,255
    4108:	10800058 	cmpnei	r2,r2,1
    410c:	10000a1e 	bne	r2,zero,4138 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4110:	e0bfff17 	ldw	r2,-4(fp)
    4114:	10c0098b 	ldhu	r3,38(r2)
    4118:	008000b4 	movhi	r2,2
    411c:	10900484 	addi	r2,r2,16402
    4120:	1080000b 	ldhu	r2,0(r2)
    4124:	1884b03a 	or	r2,r3,r2
    4128:	1007883a 	mov	r3,r2
    412c:	e0bfff17 	ldw	r2,-4(fp)
    4130:	10c0098d 	sth	r3,38(r2)
    4134:	00000b06 	br	4164 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    4138:	e0bfff17 	ldw	r2,-4(fp)
    413c:	1080098b 	ldhu	r2,38(r2)
    4140:	1007883a 	mov	r3,r2
    4144:	008000b4 	movhi	r2,2
    4148:	10900484 	addi	r2,r2,16402
    414c:	1080000b 	ldhu	r2,0(r2)
    4150:	0084303a 	nor	r2,zero,r2
    4154:	1884703a 	and	r2,r3,r2
    4158:	1007883a 	mov	r3,r2
    415c:	e0bfff17 	ldw	r2,-4(fp)
    4160:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10c0098b 	ldhu	r3,38(r2)
    416c:	e0bfff17 	ldw	r2,-4(fp)
    4170:	10800a0b 	ldhu	r2,40(r2)
    4174:	18ffffcc 	andi	r3,r3,65535
    4178:	10bfffcc 	andi	r2,r2,65535
    417c:	18800e26 	beq	r3,r2,41b8 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	1080098b 	ldhu	r2,38(r2)
    4188:	1007883a 	mov	r3,r2
    418c:	e0bfff17 	ldw	r2,-4(fp)
    4190:	10800a0b 	ldhu	r2,40(r2)
    4194:	0084303a 	nor	r2,zero,r2
    4198:	1884703a 	and	r2,r3,r2
    419c:	1007883a 	mov	r3,r2
    41a0:	e0bfff17 	ldw	r2,-4(fp)
    41a4:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    41a8:	e0bfff17 	ldw	r2,-4(fp)
    41ac:	10c0098b 	ldhu	r3,38(r2)
    41b0:	e0bfff17 	ldw	r2,-4(fp)
    41b4:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    41b8:	e0bfff17 	ldw	r2,-4(fp)
    41bc:	10800f83 	ldbu	r2,62(r2)
    41c0:	10803fcc 	andi	r2,r2,255
    41c4:	10800820 	cmpeqi	r2,r2,32
    41c8:	1000b026 	beq	r2,zero,448c <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    41cc:	e0bfff17 	ldw	r2,-4(fp)
    41d0:	10c0098b 	ldhu	r3,38(r2)
    41d4:	008000b4 	movhi	r2,2
    41d8:	10900484 	addi	r2,r2,16402
    41dc:	1080000b 	ldhu	r2,0(r2)
    41e0:	1884703a 	and	r2,r3,r2
    41e4:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    41e8:	e0bfff17 	ldw	r2,-4(fp)
    41ec:	108010c3 	ldbu	r2,67(r2)
    41f0:	10803fcc 	andi	r2,r2,255
    41f4:	108003cc 	andi	r2,r2,15
    41f8:	1004923a 	slli	r2,r2,8
    41fc:	1007883a 	mov	r3,r2
    4200:	e0bffe0b 	ldhu	r2,-8(fp)
    4204:	1884b03a 	or	r2,r3,r2
    4208:	1007883a 	mov	r3,r2
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	10801083 	ldbu	r2,66(r2)
    4214:	10803fcc 	andi	r2,r2,255
    4218:	10803c0c 	andi	r2,r2,240
    421c:	1884b03a 	or	r2,r3,r2
    4220:	1007883a 	mov	r3,r2
    4224:	e0bfff17 	ldw	r2,-4(fp)
    4228:	10801083 	ldbu	r2,66(r2)
    422c:	10803fcc 	andi	r2,r2,255
    4230:	1080030c 	andi	r2,r2,12
    4234:	100492ba 	slli	r2,r2,10
    4238:	1884b03a 	or	r2,r3,r2
    423c:	1007883a 	mov	r3,r2
    4240:	e0bfff17 	ldw	r2,-4(fp)
    4244:	10801083 	ldbu	r2,66(r2)
    4248:	10803fcc 	andi	r2,r2,255
    424c:	1080004c 	andi	r2,r2,1
    4250:	100490fa 	slli	r2,r2,3
    4254:	1884b03a 	or	r2,r3,r2
    4258:	1007883a 	mov	r3,r2
    425c:	e0bfff17 	ldw	r2,-4(fp)
    4260:	108010c3 	ldbu	r2,67(r2)
    4264:	10803fcc 	andi	r2,r2,255
    4268:	1080300c 	andi	r2,r2,192
    426c:	1004923a 	slli	r2,r2,8
    4270:	1884b03a 	or	r2,r3,r2
    4274:	1007883a 	mov	r3,r2
    4278:	e0bfff17 	ldw	r2,-4(fp)
    427c:	108010c3 	ldbu	r2,67(r2)
    4280:	10803fcc 	andi	r2,r2,255
    4284:	10800c0c 	andi	r2,r2,48
    4288:	1005d13a 	srai	r2,r2,4
    428c:	1884b03a 	or	r2,r3,r2
    4290:	1007883a 	mov	r3,r2
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    429c:	e0bfff17 	ldw	r2,-4(fp)
    42a0:	10801143 	ldbu	r2,69(r2)
    42a4:	10803fcc 	andi	r2,r2,255
    42a8:	1004923a 	slli	r2,r2,8
    42ac:	1007883a 	mov	r3,r2
    42b0:	e0bfff17 	ldw	r2,-4(fp)
    42b4:	10801103 	ldbu	r2,68(r2)
    42b8:	10803fcc 	andi	r2,r2,255
    42bc:	1884b03a 	or	r2,r3,r2
    42c0:	1007883a 	mov	r3,r2
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    42cc:	e0bfff17 	ldw	r2,-4(fp)
    42d0:	108011c3 	ldbu	r2,71(r2)
    42d4:	10803fcc 	andi	r2,r2,255
    42d8:	1004923a 	slli	r2,r2,8
    42dc:	1007883a 	mov	r3,r2
    42e0:	e0bfff17 	ldw	r2,-4(fp)
    42e4:	10801183 	ldbu	r2,70(r2)
    42e8:	10803fcc 	andi	r2,r2,255
    42ec:	1884b03a 	or	r2,r3,r2
    42f0:	1007883a 	mov	r3,r2
    42f4:	e0bfff17 	ldw	r2,-4(fp)
    42f8:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	10801243 	ldbu	r2,73(r2)
    4304:	10803fcc 	andi	r2,r2,255
    4308:	1004923a 	slli	r2,r2,8
    430c:	1007883a 	mov	r3,r2
    4310:	e0bfff17 	ldw	r2,-4(fp)
    4314:	10801203 	ldbu	r2,72(r2)
    4318:	10803fcc 	andi	r2,r2,255
    431c:	1884b03a 	or	r2,r3,r2
    4320:	1007883a 	mov	r3,r2
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	108012c3 	ldbu	r2,75(r2)
    4334:	10803fcc 	andi	r2,r2,255
    4338:	1004923a 	slli	r2,r2,8
    433c:	1007883a 	mov	r3,r2
    4340:	e0bfff17 	ldw	r2,-4(fp)
    4344:	10801283 	ldbu	r2,74(r2)
    4348:	10803fcc 	andi	r2,r2,255
    434c:	1884b03a 	or	r2,r3,r2
    4350:	1007883a 	mov	r3,r2
    4354:	e0bfff17 	ldw	r2,-4(fp)
    4358:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    435c:	e0bfff17 	ldw	r2,-4(fp)
    4360:	10801343 	ldbu	r2,77(r2)
    4364:	10803fcc 	andi	r2,r2,255
    4368:	1004923a 	slli	r2,r2,8
    436c:	1007883a 	mov	r3,r2
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10801303 	ldbu	r2,76(r2)
    4378:	10803fcc 	andi	r2,r2,255
    437c:	1884b03a 	or	r2,r3,r2
    4380:	1007883a 	mov	r3,r2
    4384:	e0bfff17 	ldw	r2,-4(fp)
    4388:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    438c:	e0bfff17 	ldw	r2,-4(fp)
    4390:	108013c3 	ldbu	r2,79(r2)
    4394:	10803fcc 	andi	r2,r2,255
    4398:	1004923a 	slli	r2,r2,8
    439c:	1007883a 	mov	r3,r2
    43a0:	e0bfff17 	ldw	r2,-4(fp)
    43a4:	10801383 	ldbu	r2,78(r2)
    43a8:	10803fcc 	andi	r2,r2,255
    43ac:	1884b03a 	or	r2,r3,r2
    43b0:	1007883a 	mov	r3,r2
    43b4:	e0bfff17 	ldw	r2,-4(fp)
    43b8:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    43bc:	e0bfff17 	ldw	r2,-4(fp)
    43c0:	10c0098b 	ldhu	r3,38(r2)
    43c4:	e0bfff17 	ldw	r2,-4(fp)
    43c8:	10800a0b 	ldhu	r2,40(r2)
    43cc:	18ffffcc 	andi	r3,r3,65535
    43d0:	10bfffcc 	andi	r2,r2,65535
    43d4:	18800e26 	beq	r3,r2,4410 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    43d8:	e0bfff17 	ldw	r2,-4(fp)
    43dc:	1080098b 	ldhu	r2,38(r2)
    43e0:	1007883a 	mov	r3,r2
    43e4:	e0bfff17 	ldw	r2,-4(fp)
    43e8:	10800a0b 	ldhu	r2,40(r2)
    43ec:	0084303a 	nor	r2,zero,r2
    43f0:	1884703a 	and	r2,r3,r2
    43f4:	1007883a 	mov	r3,r2
    43f8:	e0bfff17 	ldw	r2,-4(fp)
    43fc:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    4400:	e0bfff17 	ldw	r2,-4(fp)
    4404:	10c0098b 	ldhu	r3,38(r2)
    4408:	e0bfff17 	ldw	r2,-4(fp)
    440c:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    4410:	e0bfff17 	ldw	r2,-4(fp)
    4414:	10800d0b 	ldhu	r2,52(r2)
    4418:	10bfffcc 	andi	r2,r2,65535
    441c:	10000726 	beq	r2,zero,443c <_ZN7XBOXONE10readReportEv+0x364>
    4420:	e0bfff17 	ldw	r2,-4(fp)
    4424:	10800e0b 	ldhu	r2,56(r2)
    4428:	10bfffcc 	andi	r2,r2,65535
    442c:	1000031e 	bne	r2,zero,443c <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    4430:	e0bfff17 	ldw	r2,-4(fp)
    4434:	00c00044 	movi	r3,1
    4438:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    443c:	e0bfff17 	ldw	r2,-4(fp)
    4440:	10c00d0b 	ldhu	r3,52(r2)
    4444:	e0bfff17 	ldw	r2,-4(fp)
    4448:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10800d8b 	ldhu	r2,54(r2)
    4454:	10bfffcc 	andi	r2,r2,65535
    4458:	10000726 	beq	r2,zero,4478 <_ZN7XBOXONE10readReportEv+0x3a0>
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	10800e8b 	ldhu	r2,58(r2)
    4464:	10bfffcc 	andi	r2,r2,65535
    4468:	1000031e 	bne	r2,zero,4478 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    446c:	e0bfff17 	ldw	r2,-4(fp)
    4470:	00c00044 	movi	r3,1
    4474:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    4478:	e0bfff17 	ldw	r2,-4(fp)
    447c:	10c00d8b 	ldhu	r3,54(r2)
    4480:	e0bfff17 	ldw	r2,-4(fp)
    4484:	10c00e8d 	sth	r3,58(r2)
    4488:	00000106 	br	4490 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    448c:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    4490:	e037883a 	mov	sp,fp
    4494:	df000017 	ldw	fp,0(sp)
    4498:	dec00104 	addi	sp,sp,4
    449c:	f800283a 	ret

000044a0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    44a0:	defffd04 	addi	sp,sp,-12
    44a4:	df000215 	stw	fp,8(sp)
    44a8:	df000204 	addi	fp,sp,8
    44ac:	e13ffe15 	stw	r4,-8(fp)
    44b0:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    44b4:	e0bfff17 	ldw	r2,-4(fp)
    44b8:	10800218 	cmpnei	r2,r2,8
    44bc:	1000031e 	bne	r2,zero,44cc <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    44c0:	e0bffe17 	ldw	r2,-8(fp)
    44c4:	10800d0b 	ldhu	r2,52(r2)
    44c8:	00001306 	br	4518 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    44cc:	e0bfff17 	ldw	r2,-4(fp)
    44d0:	10800258 	cmpnei	r2,r2,9
    44d4:	1000031e 	bne	r2,zero,44e4 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    44d8:	e0bffe17 	ldw	r2,-8(fp)
    44dc:	10800d8b 	ldhu	r2,54(r2)
    44e0:	00000d06 	br	4518 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    44e4:	e0bffe17 	ldw	r2,-8(fp)
    44e8:	10c0098b 	ldhu	r3,38(r2)
    44ec:	e0bfff17 	ldw	r2,-4(fp)
    44f0:	10803fcc 	andi	r2,r2,255
    44f4:	1089883a 	add	r4,r2,r2
    44f8:	008000b4 	movhi	r2,2
    44fc:	108ffc84 	addi	r2,r2,16370
    4500:	2085883a 	add	r2,r4,r2
    4504:	1080000b 	ldhu	r2,0(r2)
    4508:	1884703a 	and	r2,r3,r2
    450c:	10bfffcc 	andi	r2,r2,65535
    4510:	1004c03a 	cmpne	r2,r2,zero
    4514:	10803fcc 	andi	r2,r2,255
}
    4518:	e037883a 	mov	sp,fp
    451c:	df000017 	ldw	fp,0(sp)
    4520:	dec00104 	addi	sp,sp,4
    4524:	f800283a 	ret

00004528 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    4528:	defffc04 	addi	sp,sp,-16
    452c:	df000315 	stw	fp,12(sp)
    4530:	df000304 	addi	fp,sp,12
    4534:	e13ffe15 	stw	r4,-8(fp)
    4538:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    453c:	e0bfff17 	ldw	r2,-4(fp)
    4540:	10800218 	cmpnei	r2,r2,8
    4544:	10000a1e 	bne	r2,zero,4570 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    4548:	e0bffe17 	ldw	r2,-8(fp)
    454c:	10800f03 	ldbu	r2,60(r2)
    4550:	10803fcc 	andi	r2,r2,255
    4554:	10000426 	beq	r2,zero,4568 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    4558:	e0bffe17 	ldw	r2,-8(fp)
    455c:	10000f05 	stb	zero,60(r2)
                        return true;
    4560:	00800044 	movi	r2,1
    4564:	00002806 	br	4608 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4568:	0005883a 	mov	r2,zero
    456c:	00002606 	br	4608 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    4570:	e0bfff17 	ldw	r2,-4(fp)
    4574:	10800258 	cmpnei	r2,r2,9
    4578:	10000a1e 	bne	r2,zero,45a4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    457c:	e0bffe17 	ldw	r2,-8(fp)
    4580:	10800f43 	ldbu	r2,61(r2)
    4584:	10803fcc 	andi	r2,r2,255
    4588:	10000426 	beq	r2,zero,459c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    458c:	e0bffe17 	ldw	r2,-8(fp)
    4590:	10000f45 	stb	zero,61(r2)
                        return true;
    4594:	00800044 	movi	r2,1
    4598:	00001b06 	br	4608 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    459c:	0005883a 	mov	r2,zero
    45a0:	00001906 	br	4608 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    45a4:	e0bfff17 	ldw	r2,-4(fp)
    45a8:	10803fcc 	andi	r2,r2,255
    45ac:	1087883a 	add	r3,r2,r2
    45b0:	008000b4 	movhi	r2,2
    45b4:	108ffc84 	addi	r2,r2,16370
    45b8:	1885883a 	add	r2,r3,r2
    45bc:	1080000b 	ldhu	r2,0(r2)
    45c0:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    45c4:	e0bffe17 	ldw	r2,-8(fp)
    45c8:	10c00a8b 	ldhu	r3,42(r2)
    45cc:	e0bffd0b 	ldhu	r2,-12(fp)
    45d0:	1884703a 	and	r2,r3,r2
    45d4:	10bfffcc 	andi	r2,r2,65535
    45d8:	1004c03a 	cmpne	r2,r2,zero
    45dc:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	10800a8b 	ldhu	r2,42(r2)
    45e8:	1007883a 	mov	r3,r2
    45ec:	e0bffd0b 	ldhu	r2,-12(fp)
    45f0:	0084303a 	nor	r2,zero,r2
    45f4:	1884703a 	and	r2,r3,r2
    45f8:	1007883a 	mov	r3,r2
    45fc:	e0bffe17 	ldw	r2,-8(fp)
    4600:	10c00a8d 	sth	r3,42(r2)
        return click;
    4604:	e0bffd83 	ldbu	r2,-10(fp)
}
    4608:	e037883a 	mov	sp,fp
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00104 	addi	sp,sp,4
    4614:	f800283a 	ret

00004618 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    4618:	defffd04 	addi	sp,sp,-12
    461c:	df000215 	stw	fp,8(sp)
    4620:	df000204 	addi	fp,sp,8
    4624:	e13ffe15 	stw	r4,-8(fp)
    4628:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    462c:	e0bfff17 	ldw	r2,-4(fp)
    4630:	e0fffe17 	ldw	r3,-8(fp)
    4634:	10800584 	addi	r2,r2,22
    4638:	1085883a 	add	r2,r2,r2
    463c:	1885883a 	add	r2,r3,r2
    4640:	1080000b 	ldhu	r2,0(r2)
}
    4644:	e037883a 	mov	sp,fp
    4648:	df000017 	ldw	fp,0(sp)
    464c:	dec00104 	addi	sp,sp,4
    4650:	f800283a 	ret

00004654 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4654:	defff904 	addi	sp,sp,-28
    4658:	dfc00615 	stw	ra,24(sp)
    465c:	df000515 	stw	fp,20(sp)
    4660:	df000504 	addi	fp,sp,20
    4664:	e13ffd15 	stw	r4,-12(fp)
    4668:	e17ffe15 	stw	r5,-8(fp)
    466c:	3005883a 	mov	r2,r6
    4670:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4674:	e0bffe17 	ldw	r2,-8(fp)
    4678:	10c00084 	addi	r3,r2,2
    467c:	e0bffd17 	ldw	r2,-12(fp)
    4680:	10801f83 	ldbu	r2,126(r2)
    4684:	11000044 	addi	r4,r2,1
    4688:	200b883a 	mov	r5,r4
    468c:	e13ffd17 	ldw	r4,-12(fp)
    4690:	21401f85 	stb	r5,126(r4)
    4694:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    4698:	e0bffd17 	ldw	r2,-12(fp)
    469c:	10c00317 	ldw	r3,12(r2)
    46a0:	e0bffd17 	ldw	r2,-12(fp)
    46a4:	10800403 	ldbu	r2,16(r2)
    46a8:	11003fcc 	andi	r4,r2,255
    46ac:	e0bffd17 	ldw	r2,-12(fp)
    46b0:	10800503 	ldbu	r2,20(r2)
    46b4:	11403fcc 	andi	r5,r2,255
    46b8:	e1bfff0b 	ldhu	r6,-4(fp)
    46bc:	e0bffe17 	ldw	r2,-8(fp)
    46c0:	d8800015 	stw	r2,0(sp)
    46c4:	300f883a 	mov	r7,r6
    46c8:	280d883a 	mov	r6,r5
    46cc:	200b883a 	mov	r5,r4
    46d0:	1809883a 	mov	r4,r3
    46d4:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    46d8:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    46dc:	e0bffc03 	ldbu	r2,-16(fp)
}
    46e0:	e037883a 	mov	sp,fp
    46e4:	dfc00117 	ldw	ra,4(sp)
    46e8:	df000017 	ldw	fp,0(sp)
    46ec:	dec00204 	addi	sp,sp,8
    46f0:	f800283a 	ret

000046f4 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    46f4:	defff904 	addi	sp,sp,-28
    46f8:	dfc00615 	stw	ra,24(sp)
    46fc:	df000515 	stw	fp,20(sp)
    4700:	df000504 	addi	fp,sp,20
    4704:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4708:	00800244 	movi	r2,9
    470c:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    4710:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4714:	00800244 	movi	r2,9
    4718:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    471c:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4720:	008003c4 	movi	r2,15
    4724:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    4728:	00800104 	movi	r2,4
    472c:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    4730:	00800104 	movi	r2,4
    4734:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    4738:	00800804 	movi	r2,32
    473c:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    4740:	00800804 	movi	r2,32
    4744:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    4748:	00bfe004 	movi	r2,-128
    474c:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    4750:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4754:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4758:	01800344 	movi	r6,13
    475c:	e17ffb04 	addi	r5,fp,-20
    4760:	e13fff17 	ldw	r4,-4(fp)
    4764:	00046540 	call	4654 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    4768:	e0bfff17 	ldw	r2,-4(fp)
    476c:	10800817 	ldw	r2,32(r2)
    4770:	10000326 	beq	r2,zero,4780 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4774:	e0bfff17 	ldw	r2,-4(fp)
    4778:	10800817 	ldw	r2,32(r2)
    477c:	103ee83a 	callr	r2
}
    4780:	0001883a 	nop
    4784:	e037883a 	mov	sp,fp
    4788:	dfc00117 	ldw	ra,4(sp)
    478c:	df000017 	ldw	fp,0(sp)
    4790:	dec00204 	addi	sp,sp,8
    4794:	f800283a 	ret

00004798 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    4798:	defff904 	addi	sp,sp,-28
    479c:	dfc00615 	stw	ra,24(sp)
    47a0:	df000515 	stw	fp,20(sp)
    47a4:	df000504 	addi	fp,sp,20
    47a8:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    47ac:	00800244 	movi	r2,9
    47b0:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    47b4:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    47b8:	00800244 	movi	r2,9
    47bc:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    47c0:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    47c4:	008003c4 	movi	r2,15
    47c8:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    47cc:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    47d0:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    47d4:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    47d8:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    47dc:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    47e0:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    47e4:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    47e8:	01800344 	movi	r6,13
    47ec:	e17ffb04 	addi	r5,fp,-20
    47f0:	e13fff17 	ldw	r4,-4(fp)
    47f4:	00046540 	call	4654 <_ZN7XBOXONE11XboxCommandEPht>
}
    47f8:	0001883a 	nop
    47fc:	e037883a 	mov	sp,fp
    4800:	dfc00117 	ldw	ra,4(sp)
    4804:	df000017 	ldw	fp,0(sp)
    4808:	dec00204 	addi	sp,sp,8
    480c:	f800283a 	ret

00004810 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    4810:	defff504 	addi	sp,sp,-44
    4814:	dfc00a15 	stw	ra,40(sp)
    4818:	df000915 	stw	fp,36(sp)
    481c:	df000904 	addi	fp,sp,36
    4820:	e13ffb15 	stw	r4,-20(fp)
    4824:	3009883a 	mov	r4,r6
    4828:	3807883a 	mov	r3,r7
    482c:	e0800217 	ldw	r2,8(fp)
    4830:	e17ffc05 	stb	r5,-16(fp)
    4834:	e13ffd05 	stb	r4,-12(fp)
    4838:	e0fffe05 	stb	r3,-8(fp)
    483c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4840:	00800244 	movi	r2,9
    4844:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    4848:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    484c:	00800244 	movi	r2,9
    4850:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4854:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4858:	008003c4 	movi	r2,15
    485c:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    4860:	e0bffc03 	ldbu	r2,-16(fp)
    4864:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    4868:	e0bffd03 	ldbu	r2,-12(fp)
    486c:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    4870:	e0bffe03 	ldbu	r2,-8(fp)
    4874:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    4878:	e0bfff03 	ldbu	r2,-4(fp)
    487c:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    4880:	00bfffc4 	movi	r2,-1
    4884:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    4888:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    488c:	00bfffc4 	movi	r2,-1
    4890:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    4894:	01800344 	movi	r6,13
    4898:	e17ff704 	addi	r5,fp,-36
    489c:	e13ffb17 	ldw	r4,-20(fp)
    48a0:	00046540 	call	4654 <_ZN7XBOXONE11XboxCommandEPht>
}
    48a4:	0001883a 	nop
    48a8:	e037883a 	mov	sp,fp
    48ac:	dfc00117 	ldw	ra,4(sp)
    48b0:	df000017 	ldw	fp,0(sp)
    48b4:	dec00204 	addi	sp,sp,8
    48b8:	f800283a 	ret

000048bc <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    48bc:	defffe04 	addi	sp,sp,-8
    48c0:	df000115 	stw	fp,4(sp)
    48c4:	df000104 	addi	fp,sp,4
    48c8:	e13fff15 	stw	r4,-4(fp)
    48cc:	e0bfff17 	ldw	r2,-4(fp)
    48d0:	10000005 	stb	zero,0(r2)
    48d4:	e0bfff17 	ldw	r2,-4(fp)
    48d8:	10c00043 	ldbu	r3,1(r2)
    48dc:	1806703a 	and	r3,r3,zero
    48e0:	10c00045 	stb	r3,1(r2)
    48e4:	10c00083 	ldbu	r3,2(r2)
    48e8:	1806703a 	and	r3,r3,zero
    48ec:	10c00085 	stb	r3,2(r2)
    48f0:	10c000c3 	ldbu	r3,3(r2)
    48f4:	1806703a 	and	r3,r3,zero
    48f8:	10c000c5 	stb	r3,3(r2)
    48fc:	10c00103 	ldbu	r3,4(r2)
    4900:	1806703a 	and	r3,r3,zero
    4904:	10c00105 	stb	r3,4(r2)
        };
    4908:	0001883a 	nop
    490c:	e037883a 	mov	sp,fp
    4910:	df000017 	ldw	fp,0(sp)
    4914:	dec00104 	addi	sp,sp,4
    4918:	f800283a 	ret

0000491c <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    491c:	defffe04 	addi	sp,sp,-8
    4920:	df000115 	stw	fp,4(sp)
    4924:	df000104 	addi	fp,sp,4
    4928:	e13fff15 	stw	r4,-4(fp)
    492c:	e0bfff17 	ldw	r2,-4(fp)
    4930:	10000015 	stw	zero,0(r2)
    4934:	e0bfff17 	ldw	r2,-4(fp)
    4938:	10000105 	stb	zero,4(r2)
    493c:	e0bfff17 	ldw	r2,-4(fp)
    4940:	10000145 	stb	zero,5(r2)
        };
    4944:	0001883a 	nop
    4948:	e037883a 	mov	sp,fp
    494c:	df000017 	ldw	fp,0(sp)
    4950:	dec00104 	addi	sp,sp,4
    4954:	f800283a 	ret

00004958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    4958:	defffd04 	addi	sp,sp,-12
    495c:	df000215 	stw	fp,8(sp)
    4960:	df000204 	addi	fp,sp,8
    4964:	e13ffe15 	stw	r4,-8(fp)
    4968:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    496c:	e0bfff17 	ldw	r2,-4(fp)
    4970:	10c00043 	ldbu	r3,1(r2)
    4974:	11000083 	ldbu	r4,2(r2)
    4978:	2008923a 	slli	r4,r4,8
    497c:	20c6b03a 	or	r3,r4,r3
    4980:	110000c3 	ldbu	r4,3(r2)
    4984:	2008943a 	slli	r4,r4,16
    4988:	20c6b03a 	or	r3,r4,r3
    498c:	10800103 	ldbu	r2,4(r2)
    4990:	1004963a 	slli	r2,r2,24
    4994:	10c4b03a 	or	r2,r2,r3
    4998:	1007883a 	mov	r3,r2
    499c:	e0bffe17 	ldw	r2,-8(fp)
    49a0:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    49a4:	e0bfff17 	ldw	r2,-4(fp)
    49a8:	10c00003 	ldbu	r3,0(r2)
    49ac:	e0bffe17 	ldw	r2,-8(fp)
    49b0:	10c00145 	stb	r3,5(r2)
    49b4:	e0bffe17 	ldw	r2,-8(fp)
    49b8:	10c00143 	ldbu	r3,5(r2)
    49bc:	e0bffe17 	ldw	r2,-8(fp)
    49c0:	10c00105 	stb	r3,4(r2)
        };
    49c4:	0001883a 	nop
    49c8:	e037883a 	mov	sp,fp
    49cc:	df000017 	ldw	fp,0(sp)
    49d0:	dec00104 	addi	sp,sp,4
    49d4:	f800283a 	ret

000049d8 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    49d8:	defffe04 	addi	sp,sp,-8
    49dc:	df000115 	stw	fp,4(sp)
    49e0:	df000104 	addi	fp,sp,4
    49e4:	e13fff15 	stw	r4,-4(fp)
    49e8:	e0bfff17 	ldw	r2,-4(fp)
    49ec:	10000015 	stw	zero,0(r2)
    49f0:	e0bfff17 	ldw	r2,-4(fp)
    49f4:	10000105 	stb	zero,4(r2)
    49f8:	e0bfff17 	ldw	r2,-4(fp)
    49fc:	1000018d 	sth	zero,6(r2)
        };
    4a00:	0001883a 	nop
    4a04:	e037883a 	mov	sp,fp
    4a08:	df000017 	ldw	fp,0(sp)
    4a0c:	dec00104 	addi	sp,sp,4
    4a10:	f800283a 	ret

00004a14 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4a14:	defffd04 	addi	sp,sp,-12
    4a18:	df000215 	stw	fp,8(sp)
    4a1c:	df000204 	addi	fp,sp,8
    4a20:	e13ffe15 	stw	r4,-8(fp)
    4a24:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4a28:	e0bfff17 	ldw	r2,-4(fp)
    4a2c:	10c00043 	ldbu	r3,1(r2)
    4a30:	11000083 	ldbu	r4,2(r2)
    4a34:	2008923a 	slli	r4,r4,8
    4a38:	20c6b03a 	or	r3,r4,r3
    4a3c:	110000c3 	ldbu	r4,3(r2)
    4a40:	2008943a 	slli	r4,r4,16
    4a44:	20c6b03a 	or	r3,r4,r3
    4a48:	10800103 	ldbu	r2,4(r2)
    4a4c:	1004963a 	slli	r2,r2,24
    4a50:	10c4b03a 	or	r2,r2,r3
    4a54:	1007883a 	mov	r3,r2
    4a58:	e0bffe17 	ldw	r2,-8(fp)
    4a5c:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    4a60:	e0bffe17 	ldw	r2,-8(fp)
    4a64:	1000018d 	sth	zero,6(r2)
        };
    4a68:	0001883a 	nop
    4a6c:	e037883a 	mov	sp,fp
    4a70:	df000017 	ldw	fp,0(sp)
    4a74:	dec00104 	addi	sp,sp,4
    4a78:	f800283a 	ret

00004a7c <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    4a7c:	defffb04 	addi	sp,sp,-20
    4a80:	df000415 	stw	fp,16(sp)
    4a84:	df000404 	addi	fp,sp,16
    4a88:	e13ffc15 	stw	r4,-16(fp)
    4a8c:	e17ffd15 	stw	r5,-12(fp)
    4a90:	e1bffe15 	stw	r6,-8(fp)
    4a94:	3805883a 	mov	r2,r7
    4a98:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    4a9c:	e0bffc17 	ldw	r2,-16(fp)
    4aa0:	10800103 	ldbu	r2,4(r2)
    4aa4:	10803fcc 	andi	r2,r2,255
    4aa8:	10000326 	beq	r2,zero,4ab8 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    4aac:	10800060 	cmpeqi	r2,r2,1
    4ab0:	10000a1e 	bne	r2,zero,4adc <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    4ab4:	00002906 	br	4b5c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    4ab8:	e0bffc17 	ldw	r2,-16(fp)
    4abc:	e0ffff0b 	ldhu	r3,-4(fp)
    4ac0:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    4ac4:	e0bffc17 	ldw	r2,-16(fp)
    4ac8:	10800103 	ldbu	r2,4(r2)
    4acc:	10800044 	addi	r2,r2,1
    4ad0:	1007883a 	mov	r3,r2
    4ad4:	e0bffc17 	ldw	r2,-16(fp)
    4ad8:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    4adc:	e0bffc17 	ldw	r2,-16(fp)
    4ae0:	1080018b 	ldhu	r2,6(r2)
    4ae4:	10bfffcc 	andi	r2,r2,65535
    4ae8:	10001626 	beq	r2,zero,4b44 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4aec:	e0bffe17 	ldw	r2,-8(fp)
    4af0:	1080000b 	ldhu	r2,0(r2)
    4af4:	10bfffcc 	andi	r2,r2,65535
    4af8:	10001226 	beq	r2,zero,4b44 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    4afc:	e0bffc17 	ldw	r2,-16(fp)
    4b00:	1080018b 	ldhu	r2,6(r2)
    4b04:	10bfffc4 	addi	r2,r2,-1
    4b08:	1007883a 	mov	r3,r2
    4b0c:	e0bffc17 	ldw	r2,-16(fp)
    4b10:	10c0018d 	sth	r3,6(r2)
    4b14:	e0bffd17 	ldw	r2,-12(fp)
    4b18:	10800017 	ldw	r2,0(r2)
    4b1c:	10c00044 	addi	r3,r2,1
    4b20:	e0bffd17 	ldw	r2,-12(fp)
    4b24:	10c00015 	stw	r3,0(r2)
    4b28:	e0bffe17 	ldw	r2,-8(fp)
    4b2c:	1080000b 	ldhu	r2,0(r2)
    4b30:	10bfffc4 	addi	r2,r2,-1
    4b34:	1007883a 	mov	r3,r2
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	10c0000d 	sth	r3,0(r2)
    4b40:	003fe606 	br	4adc <__alt_data_end+0xfc004adc>

                                if(!countDown)
    4b44:	e0bffc17 	ldw	r2,-16(fp)
    4b48:	1080018b 	ldhu	r2,6(r2)
    4b4c:	10bfffcc 	andi	r2,r2,65535
    4b50:	1000021e 	bne	r2,zero,4b5c <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4b54:	e0bffc17 	ldw	r2,-16(fp)
    4b58:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4b5c:	e0bffc17 	ldw	r2,-16(fp)
    4b60:	1080018b 	ldhu	r2,6(r2)
    4b64:	10bfffcc 	andi	r2,r2,65535
    4b68:	1005003a 	cmpeq	r2,r2,zero
        };
    4b6c:	e037883a 	mov	sp,fp
    4b70:	df000017 	ldw	fp,0(sp)
    4b74:	dec00104 	addi	sp,sp,4
    4b78:	f800283a 	ret

00004b7c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4b7c:	defffb04 	addi	sp,sp,-20
    4b80:	df000415 	stw	fp,16(sp)
    4b84:	df000404 	addi	fp,sp,16
    4b88:	e13ffc15 	stw	r4,-16(fp)
    4b8c:	2809883a 	mov	r4,r5
    4b90:	3007883a 	mov	r3,r6
    4b94:	3805883a 	mov	r2,r7
    4b98:	e13ffd05 	stb	r4,-12(fp)
    4b9c:	e0fffe05 	stb	r3,-8(fp)
    4ba0:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4ba4:	0005883a 	mov	r2,zero
        }
    4ba8:	e037883a 	mov	sp,fp
    4bac:	df000017 	ldw	fp,0(sp)
    4bb0:	dec00104 	addi	sp,sp,4
    4bb4:	f800283a 	ret

00004bb8 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4bb8:	defffb04 	addi	sp,sp,-20
    4bbc:	df000415 	stw	fp,16(sp)
    4bc0:	df000404 	addi	fp,sp,16
    4bc4:	e13ffc15 	stw	r4,-16(fp)
    4bc8:	2809883a 	mov	r4,r5
    4bcc:	3007883a 	mov	r3,r6
    4bd0:	3805883a 	mov	r2,r7
    4bd4:	e13ffd05 	stb	r4,-12(fp)
    4bd8:	e0fffe05 	stb	r3,-8(fp)
    4bdc:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    4be0:	0005883a 	mov	r2,zero
        }
    4be4:	e037883a 	mov	sp,fp
    4be8:	df000017 	ldw	fp,0(sp)
    4bec:	dec00104 	addi	sp,sp,4
    4bf0:	f800283a 	ret

00004bf4 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    4bf4:	defffe04 	addi	sp,sp,-8
    4bf8:	df000115 	stw	fp,4(sp)
    4bfc:	df000104 	addi	fp,sp,4
    4c00:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4c04:	0005883a 	mov	r2,zero
        }
    4c08:	e037883a 	mov	sp,fp
    4c0c:	df000017 	ldw	fp,0(sp)
    4c10:	dec00104 	addi	sp,sp,4
    4c14:	f800283a 	ret

00004c18 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4c18:	defffe04 	addi	sp,sp,-8
    4c1c:	df000115 	stw	fp,4(sp)
    4c20:	df000104 	addi	fp,sp,4
    4c24:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4c28:	0005883a 	mov	r2,zero
        }
    4c2c:	e037883a 	mov	sp,fp
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00104 	addi	sp,sp,4
    4c38:	f800283a 	ret

00004c3c <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4c3c:	defffe04 	addi	sp,sp,-8
    4c40:	df000115 	stw	fp,4(sp)
    4c44:	df000104 	addi	fp,sp,4
    4c48:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4c4c:	0005883a 	mov	r2,zero
        }
    4c50:	e037883a 	mov	sp,fp
    4c54:	df000017 	ldw	fp,0(sp)
    4c58:	dec00104 	addi	sp,sp,4
    4c5c:	f800283a 	ret

00004c60 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    4c60:	defffd04 	addi	sp,sp,-12
    4c64:	df000215 	stw	fp,8(sp)
    4c68:	df000204 	addi	fp,sp,8
    4c6c:	e13ffe15 	stw	r4,-8(fp)
    4c70:	2805883a 	mov	r2,r5
    4c74:	e0bfff05 	stb	r2,-4(fp)
                return;
    4c78:	0001883a 	nop
        } // Note used for hubs only!
    4c7c:	e037883a 	mov	sp,fp
    4c80:	df000017 	ldw	fp,0(sp)
    4c84:	dec00104 	addi	sp,sp,4
    4c88:	f800283a 	ret

00004c8c <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4c8c:	defffc04 	addi	sp,sp,-16
    4c90:	df000315 	stw	fp,12(sp)
    4c94:	df000304 	addi	fp,sp,12
    4c98:	e13ffd15 	stw	r4,-12(fp)
    4c9c:	2807883a 	mov	r3,r5
    4ca0:	3005883a 	mov	r2,r6
    4ca4:	e0fffe0d 	sth	r3,-8(fp)
    4ca8:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    4cac:	0005883a 	mov	r2,zero
        }
    4cb0:	e037883a 	mov	sp,fp
    4cb4:	df000017 	ldw	fp,0(sp)
    4cb8:	dec00104 	addi	sp,sp,4
    4cbc:	f800283a 	ret

00004cc0 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    4cc0:	defffd04 	addi	sp,sp,-12
    4cc4:	df000215 	stw	fp,8(sp)
    4cc8:	df000204 	addi	fp,sp,8
    4ccc:	e13ffe15 	stw	r4,-8(fp)
    4cd0:	2805883a 	mov	r2,r5
    4cd4:	e0bfff05 	stb	r2,-4(fp)
                return false;
    4cd8:	0005883a 	mov	r2,zero
        }
    4cdc:	e037883a 	mov	sp,fp
    4ce0:	df000017 	ldw	fp,0(sp)
    4ce4:	dec00104 	addi	sp,sp,4
    4ce8:	f800283a 	ret

00004cec <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    4cec:	defffd04 	addi	sp,sp,-12
    4cf0:	df000215 	stw	fp,8(sp)
    4cf4:	df000204 	addi	fp,sp,8
    4cf8:	e13ffe15 	stw	r4,-8(fp)
    4cfc:	2805883a 	mov	r2,r5
    4d00:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4d04:	00800044 	movi	r2,1
        }
    4d08:	e037883a 	mov	sp,fp
    4d0c:	df000017 	ldw	fp,0(sp)
    4d10:	dec00104 	addi	sp,sp,4
    4d14:	f800283a 	ret

00004d18 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4d18:	defffc04 	addi	sp,sp,-16
    4d1c:	df000315 	stw	fp,12(sp)
    4d20:	df000304 	addi	fp,sp,12
    4d24:	e13ffe15 	stw	r4,-8(fp)
    4d28:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4d2c:	e03ffd05 	stb	zero,-12(fp)
    4d30:	e0bffd03 	ldbu	r2,-12(fp)
    4d34:	10800428 	cmpgeui	r2,r2,16
    4d38:	1000161e 	bne	r2,zero,4d94 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4d3c:	e0bffd03 	ldbu	r2,-12(fp)
    4d40:	e0fffe17 	ldw	r3,-8(fp)
    4d44:	10800784 	addi	r2,r2,30
    4d48:	1085883a 	add	r2,r2,r2
    4d4c:	1085883a 	add	r2,r2,r2
    4d50:	1885883a 	add	r2,r3,r2
    4d54:	10800017 	ldw	r2,0(r2)
    4d58:	10000a1e 	bne	r2,zero,4d84 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4d5c:	e0bffd03 	ldbu	r2,-12(fp)
    4d60:	e0fffe17 	ldw	r3,-8(fp)
    4d64:	10800784 	addi	r2,r2,30
    4d68:	1085883a 	add	r2,r2,r2
    4d6c:	1085883a 	add	r2,r2,r2
    4d70:	1885883a 	add	r2,r3,r2
    4d74:	e0ffff17 	ldw	r3,-4(fp)
    4d78:	10c00015 	stw	r3,0(r2)
                                return 0;
    4d7c:	0005883a 	mov	r2,zero
    4d80:	00000506 	br	4d98 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4d84:	e0bffd03 	ldbu	r2,-12(fp)
    4d88:	10800044 	addi	r2,r2,1
    4d8c:	e0bffd05 	stb	r2,-12(fp)
    4d90:	003fe706 	br	4d30 <__alt_data_end+0xfc004d30>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4d94:	00bff4c4 	movi	r2,-45
        };
    4d98:	e037883a 	mov	sp,fp
    4d9c:	df000017 	ldw	fp,0(sp)
    4da0:	dec00104 	addi	sp,sp,4
    4da4:	f800283a 	ret

00004da8 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    4da8:	defffa04 	addi	sp,sp,-24
    4dac:	df000515 	stw	fp,20(sp)
    4db0:	df000504 	addi	fp,sp,20
    4db4:	e13ffb15 	stw	r4,-20(fp)
    4db8:	3009883a 	mov	r4,r6
    4dbc:	3807883a 	mov	r3,r7
    4dc0:	e0800117 	ldw	r2,4(fp)
    4dc4:	e17ffc05 	stb	r5,-16(fp)
    4dc8:	e13ffd05 	stb	r4,-12(fp)
    4dcc:	e0fffe05 	stb	r3,-8(fp)
    4dd0:	e0bfff05 	stb	r2,-4(fp)
        };
    4dd4:	0001883a 	nop
    4dd8:	e037883a 	mov	sp,fp
    4ddc:	df000017 	ldw	fp,0(sp)
    4de0:	dec00104 	addi	sp,sp,4
    4de4:	f800283a 	ret

00004de8 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    4de8:	defffe04 	addi	sp,sp,-8
    4dec:	df000115 	stw	fp,4(sp)
    4df0:	df000104 	addi	fp,sp,4
    4df4:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    4df8:	e0bfff17 	ldw	r2,-4(fp)
    4dfc:	10800403 	ldbu	r2,16(r2)
        };
    4e00:	e037883a 	mov	sp,fp
    4e04:	df000017 	ldw	fp,0(sp)
    4e08:	dec00104 	addi	sp,sp,4
    4e0c:	f800283a 	ret

00004e10 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4e10:	defffe04 	addi	sp,sp,-8
    4e14:	df000115 	stw	fp,4(sp)
    4e18:	df000104 	addi	fp,sp,4
    4e1c:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4e20:	e0bfff17 	ldw	r2,-4(fp)
    4e24:	10800943 	ldbu	r2,37(r2)
        };
    4e28:	e037883a 	mov	sp,fp
    4e2c:	df000017 	ldw	fp,0(sp)
    4e30:	dec00104 	addi	sp,sp,4
    4e34:	f800283a 	ret

00004e38 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4e38:	defffc04 	addi	sp,sp,-16
    4e3c:	df000315 	stw	fp,12(sp)
    4e40:	df000304 	addi	fp,sp,12
    4e44:	e13ffd15 	stw	r4,-12(fp)
    4e48:	2807883a 	mov	r3,r5
    4e4c:	3005883a 	mov	r2,r6
    4e50:	e0fffe0d 	sth	r3,-8(fp)
    4e54:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4e58:	e0bffe0b 	ldhu	r2,-8(fp)
    4e5c:	108117a0 	cmpeqi	r2,r2,1118
    4e60:	10000f1e 	bne	r2,zero,4ea0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4e64:	e0bffe0b 	ldhu	r2,-8(fp)
    4e68:	1081ce20 	cmpeqi	r2,r2,1848
    4e6c:	10000c1e 	bne	r2,zero,4ea0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4e70:	e0bffe0b 	ldhu	r2,-8(fp)
    4e74:	10839be0 	cmpeqi	r2,r2,3695
    4e78:	1000091e 	bne	r2,zero,4ea0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4e7c:	e0bffe0b 	ldhu	r2,-8(fp)
    4e80:	1083c360 	cmpeqi	r2,r2,3853
    4e84:	1000061e 	bne	r2,zero,4ea0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4e88:	e0bffe0b 	ldhu	r2,-8(fp)
    4e8c:	10854ca0 	cmpeqi	r2,r2,5426
    4e90:	1000031e 	bne	r2,zero,4ea0 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4e94:	e0bffe0b 	ldhu	r2,-8(fp)
    4e98:	10893198 	cmpnei	r2,r2,9414
    4e9c:	10002c1e 	bne	r2,zero,4f50 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4ea0:	e0bfff0b 	ldhu	r2,-4(fp)
    4ea4:	1080b460 	cmpeqi	r2,r2,721
    4ea8:	1000271e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4eac:	e0bfff0b 	ldhu	r2,-4(fp)
    4eb0:	1080b760 	cmpeqi	r2,r2,733
    4eb4:	1000241e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4eb8:	e0bfff0b 	ldhu	r2,-4(fp)
    4ebc:	1080b8e0 	cmpeqi	r2,r2,739
    4ec0:	1000211e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ec4:	e0bfff0b 	ldhu	r2,-4(fp)
    4ec8:	1080baa0 	cmpeqi	r2,r2,746
    4ecc:	10001e1e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ed0:	e0bfff0b 	ldhu	r2,-4(fp)
    4ed4:	10928060 	cmpeqi	r2,r2,18945
    4ed8:	10001b1e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4edc:	e0bfff0b 	ldhu	r2,-4(fp)
    4ee0:	10804e60 	cmpeqi	r2,r2,313
    4ee4:	1000181e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ee8:	e0bfff0b 	ldhu	r2,-4(fp)
    4eec:	108051a0 	cmpeqi	r2,r2,326
    4ef0:	1000151e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ef4:	e0bfff0b 	ldhu	r2,-4(fp)
    4ef8:	108019e0 	cmpeqi	r2,r2,103
    4efc:	1000121e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4f00:	e0bfff0b 	ldhu	r2,-4(fp)
    4f04:	108280e0 	cmpeqi	r2,r2,2563
    4f08:	10000f1e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4f0c:	e0bfff0b 	ldhu	r2,-4(fp)
    4f10:	109506a0 	cmpeqi	r2,r2,21530
    4f14:	10000c1e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4f18:	e0bfff0b 	ldhu	r2,-4(fp)
    4f1c:	10950aa0 	cmpeqi	r2,r2,21546
    4f20:	1000091e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4f24:	e0bfff0b 	ldhu	r2,-4(fp)
    4f28:	10950ea0 	cmpeqi	r2,r2,21562
    4f2c:	1000061e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4f30:	e0bfff0b 	ldhu	r2,-4(fp)
    4f34:	1082c2a0 	cmpeqi	r2,r2,2826
    4f38:	1000031e 	bne	r2,zero,4f48 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4f3c:	e0bfff0b 	ldhu	r2,-4(fp)
    4f40:	1082c498 	cmpnei	r2,r2,2834
    4f44:	1000021e 	bne	r2,zero,4f50 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4f48:	00800044 	movi	r2,1
    4f4c:	00000106 	br	4f54 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4f50:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4f54:	e037883a 	mov	sp,fp
    4f58:	df000017 	ldw	fp,0(sp)
    4f5c:	dec00104 	addi	sp,sp,4
    4f60:	f800283a 	ret

00004f64 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4f64:	defffe04 	addi	sp,sp,-8
    4f68:	df000115 	stw	fp,4(sp)
    4f6c:	df000104 	addi	fp,sp,4
    4f70:	e13fff15 	stw	r4,-4(fp)
    4f74:	008000b4 	movhi	r2,2
    4f78:	10902104 	addi	r2,r2,16516
    4f7c:	e0ffff17 	ldw	r3,-4(fp)
    4f80:	18800015 	stw	r2,0(r3)
    4f84:	0001883a 	nop
    4f88:	e037883a 	mov	sp,fp
    4f8c:	df000017 	ldw	fp,0(sp)
    4f90:	dec00104 	addi	sp,sp,4
    4f94:	f800283a 	ret

00004f98 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4f98:	defffe04 	addi	sp,sp,-8
    4f9c:	df000115 	stw	fp,4(sp)
    4fa0:	df000104 	addi	fp,sp,4
    4fa4:	e13fff15 	stw	r4,-4(fp)
    4fa8:	008000b4 	movhi	r2,2
    4fac:	10901b04 	addi	r2,r2,16492
    4fb0:	e0ffff17 	ldw	r3,-4(fp)
    4fb4:	18800015 	stw	r2,0(r3)
    4fb8:	0001883a 	nop
    4fbc:	e037883a 	mov	sp,fp
    4fc0:	df000017 	ldw	fp,0(sp)
    4fc4:	dec00104 	addi	sp,sp,4
    4fc8:	f800283a 	ret

00004fcc <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4fcc:	defffe04 	addi	sp,sp,-8
    4fd0:	df000115 	stw	fp,4(sp)
    4fd4:	df000104 	addi	fp,sp,4
    4fd8:	e13fff15 	stw	r4,-4(fp)
    4fdc:	008000b4 	movhi	r2,2
    4fe0:	10901e04 	addi	r2,r2,16504
    4fe4:	e0ffff17 	ldw	r3,-4(fp)
    4fe8:	18800015 	stw	r2,0(r3)
    4fec:	0001883a 	nop
    4ff0:	e037883a 	mov	sp,fp
    4ff4:	df000017 	ldw	fp,0(sp)
    4ff8:	dec00104 	addi	sp,sp,4
    4ffc:	f800283a 	ret

00005000 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    5000:	defffc04 	addi	sp,sp,-16
    5004:	dfc00315 	stw	ra,12(sp)
    5008:	df000215 	stw	fp,8(sp)
    500c:	df000204 	addi	fp,sp,8
    5010:	e13ffe15 	stw	r4,-8(fp)
    5014:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    5018:	e0bffe17 	ldw	r2,-8(fp)
    501c:	1009883a 	mov	r4,r2
    5020:	0004fcc0 	call	4fcc <_ZN13USBReadParserC1Ev>
    5024:	008000b4 	movhi	r2,2
    5028:	10901804 	addi	r2,r2,16480
    502c:	e0fffe17 	ldw	r3,-8(fp)
    5030:	18800015 	stw	r2,0(r3)
    5034:	e0bffe17 	ldw	r2,-8(fp)
    5038:	e0ffff17 	ldw	r3,-4(fp)
    503c:	10c00115 	stw	r3,4(r2)
    5040:	e0bffe17 	ldw	r2,-8(fp)
    5044:	10800204 	addi	r2,r2,8
    5048:	1009883a 	mov	r4,r2
    504c:	00048bc0 	call	48bc <_ZN16MultiValueBufferC1Ev>
    5050:	e0bffe17 	ldw	r2,-8(fp)
    5054:	10800404 	addi	r2,r2,16
    5058:	1009883a 	mov	r4,r2
    505c:	000491c0 	call	491c <_ZN20MultiByteValueParserC1Ev>
    5060:	e0bffe17 	ldw	r2,-8(fp)
    5064:	10800604 	addi	r2,r2,24
    5068:	1009883a 	mov	r4,r2
    506c:	00049d80 	call	49d8 <_ZN11ByteSkipperC1Ev>
    5070:	e0bffe17 	ldw	r2,-8(fp)
    5074:	10000c05 	stb	zero,48(r2)
    5078:	e0bffe17 	ldw	r2,-8(fp)
    507c:	10000c45 	stb	zero,49(r2)
    5080:	e0bffe17 	ldw	r2,-8(fp)
    5084:	10000c85 	stb	zero,50(r2)
    5088:	e0bffe17 	ldw	r2,-8(fp)
    508c:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    5090:	e0bffe17 	ldw	r2,-8(fp)
    5094:	10c00804 	addi	r3,r2,32
    5098:	e0bffe17 	ldw	r2,-8(fp)
    509c:	19803fcc 	andi	r6,r3,255
    50a0:	11000243 	ldbu	r4,9(r2)
    50a4:	2008703a 	and	r4,r4,zero
    50a8:	200b883a 	mov	r5,r4
    50ac:	3009883a 	mov	r4,r6
    50b0:	2908b03a 	or	r4,r5,r4
    50b4:	11000245 	stb	r4,9(r2)
    50b8:	1808d23a 	srli	r4,r3,8
    50bc:	21803fcc 	andi	r6,r4,255
    50c0:	11000283 	ldbu	r4,10(r2)
    50c4:	2008703a 	and	r4,r4,zero
    50c8:	200b883a 	mov	r5,r4
    50cc:	3009883a 	mov	r4,r6
    50d0:	2908b03a 	or	r4,r5,r4
    50d4:	11000285 	stb	r4,10(r2)
    50d8:	1808d43a 	srli	r4,r3,16
    50dc:	21803fcc 	andi	r6,r4,255
    50e0:	110002c3 	ldbu	r4,11(r2)
    50e4:	2008703a 	and	r4,r4,zero
    50e8:	200b883a 	mov	r5,r4
    50ec:	3009883a 	mov	r4,r6
    50f0:	2908b03a 	or	r4,r5,r4
    50f4:	110002c5 	stb	r4,11(r2)
    50f8:	180ad63a 	srli	r5,r3,24
    50fc:	10c00303 	ldbu	r3,12(r2)
    5100:	1806703a 	and	r3,r3,zero
    5104:	1809883a 	mov	r4,r3
    5108:	2807883a 	mov	r3,r5
    510c:	20c6b03a 	or	r3,r4,r3
    5110:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    5114:	e0bffe17 	ldw	r2,-8(fp)
    5118:	10c00404 	addi	r3,r2,16
    511c:	e0bffe17 	ldw	r2,-8(fp)
    5120:	10800204 	addi	r2,r2,8
    5124:	100b883a 	mov	r5,r2
    5128:	1809883a 	mov	r4,r3
    512c:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    5130:	e0bffe17 	ldw	r2,-8(fp)
    5134:	10c00604 	addi	r3,r2,24
    5138:	e0bffe17 	ldw	r2,-8(fp)
    513c:	10800204 	addi	r2,r2,8
    5140:	100b883a 	mov	r5,r2
    5144:	1809883a 	mov	r4,r3
    5148:	0004a140 	call	4a14 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    514c:	0001883a 	nop
    5150:	e037883a 	mov	sp,fp
    5154:	dfc00117 	ldw	ra,4(sp)
    5158:	df000017 	ldw	fp,0(sp)
    515c:	dec00204 	addi	sp,sp,8
    5160:	f800283a 	ret

00005164 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    5164:	defff804 	addi	sp,sp,-32
    5168:	dfc00715 	stw	ra,28(sp)
    516c:	df000615 	stw	fp,24(sp)
    5170:	df000604 	addi	fp,sp,24
    5174:	e13ffc15 	stw	r4,-16(fp)
    5178:	2805883a 	mov	r2,r5
    517c:	e1bffe15 	stw	r6,-8(fp)
    5180:	e1ffff15 	stw	r7,-4(fp)
    5184:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    5188:	e0bffd0b 	ldhu	r2,-12(fp)
    518c:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    5190:	e0bffe17 	ldw	r2,-8(fp)
    5194:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    5198:	e0bffa0b 	ldhu	r2,-24(fp)
    519c:	10bfffcc 	andi	r2,r2,65535
    51a0:	10000a26 	beq	r2,zero,51cc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    51a4:	e0bffb04 	addi	r2,fp,-20
    51a8:	e1bffa04 	addi	r6,fp,-24
    51ac:	100b883a 	mov	r5,r2
    51b0:	e13ffc17 	ldw	r4,-16(fp)
    51b4:	00051e00 	call	51e0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    51b8:	1080005c 	xori	r2,r2,1
    51bc:	10803fcc 	andi	r2,r2,255
    51c0:	1000011e 	bne	r2,zero,51c8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    51c4:	003ff406 	br	5198 <__alt_data_end+0xfc005198>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    51c8:	0001883a 	nop
}
    51cc:	e037883a 	mov	sp,fp
    51d0:	dfc00117 	ldw	ra,4(sp)
    51d4:	df000017 	ldw	fp,0(sp)
    51d8:	dec00204 	addi	sp,sp,8
    51dc:	f800283a 	ret

000051e0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    51e0:	defff604 	addi	sp,sp,-40
    51e4:	dfc00915 	stw	ra,36(sp)
    51e8:	df000815 	stw	fp,32(sp)
    51ec:	df000804 	addi	fp,sp,32
    51f0:	e13ffc15 	stw	r4,-16(fp)
    51f4:	e17ffd15 	stw	r5,-12(fp)
    51f8:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    51fc:	e0bffc17 	ldw	r2,-16(fp)
    5200:	10800804 	addi	r2,r2,32
    5204:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    5208:	e0bffc17 	ldw	r2,-16(fp)
    520c:	10800804 	addi	r2,r2,32
    5210:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    5214:	e0bffc17 	ldw	r2,-16(fp)
    5218:	10800c03 	ldbu	r2,48(r2)
    521c:	10803fcc 	andi	r2,r2,255
    5220:	10c00168 	cmpgeui	r3,r2,5
    5224:	1801141e 	bne	r3,zero,5678 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    5228:	100690ba 	slli	r3,r2,2
    522c:	00800034 	movhi	r2,0
    5230:	10949004 	addi	r2,r2,21056
    5234:	1885883a 	add	r2,r3,r2
    5238:	10800017 	ldw	r2,0(r2)
    523c:	1000683a 	jmp	r2
    5240:	00005254 	movui	zero,329
    5244:	00005288 	cmpgei	zero,zero,330
    5248:	00005310 	cmplti	zero,zero,332
    524c:	000053a4 	muli	zero,zero,334
    5250:	00005410 	cmplti	zero,zero,336
                case 0:
                        theBuffer.valueSize = 2;
    5254:	e0bffc17 	ldw	r2,-16(fp)
    5258:	00c00084 	movi	r3,2
    525c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    5260:	e0bffc17 	ldw	r2,-16(fp)
    5264:	10c00404 	addi	r3,r2,16
    5268:	e0bffc17 	ldw	r2,-16(fp)
    526c:	10800204 	addi	r2,r2,8
    5270:	100b883a 	mov	r5,r2
    5274:	1809883a 	mov	r4,r3
    5278:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    527c:	e0bffc17 	ldw	r2,-16(fp)
    5280:	00c00044 	movi	r3,1
    5284:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    5288:	e0bffc17 	ldw	r2,-16(fp)
    528c:	10800404 	addi	r2,r2,16
    5290:	e1bffe17 	ldw	r6,-8(fp)
    5294:	e17ffd17 	ldw	r5,-12(fp)
    5298:	1009883a 	mov	r4,r2
    529c:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    52a0:	1080005c 	xori	r2,r2,1
    52a4:	10803fcc 	andi	r2,r2,255
    52a8:	10000226 	beq	r2,zero,52b4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    52ac:	0005883a 	mov	r2,zero
    52b0:	0000f206 	br	567c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    52b4:	e0bffc17 	ldw	r2,-16(fp)
    52b8:	10c00217 	ldw	r3,8(r2)
    52bc:	1806d23a 	srli	r3,r3,8
    52c0:	10800317 	ldw	r2,12(r2)
    52c4:	10803fcc 	andi	r2,r2,255
    52c8:	1004963a 	slli	r2,r2,24
    52cc:	10c4b03a 	or	r2,r2,r3
    52d0:	10c00003 	ldbu	r3,0(r2)
    52d4:	e0bffc17 	ldw	r2,-16(fp)
    52d8:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    52dc:	e0bffc17 	ldw	r2,-16(fp)
    52e0:	10c00217 	ldw	r3,8(r2)
    52e4:	1806d23a 	srli	r3,r3,8
    52e8:	10800317 	ldw	r2,12(r2)
    52ec:	10803fcc 	andi	r2,r2,255
    52f0:	1004963a 	slli	r2,r2,24
    52f4:	10c4b03a 	or	r2,r2,r3
    52f8:	10c00043 	ldbu	r3,1(r2)
    52fc:	e0bffc17 	ldw	r2,-16(fp)
    5300:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    5304:	e0bffc17 	ldw	r2,-16(fp)
    5308:	00c00084 	movi	r3,2
    530c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    5310:	e0bffc17 	ldw	r2,-16(fp)
    5314:	10800804 	addi	r2,r2,32
    5318:	10c00084 	addi	r3,r2,2
    531c:	e0bffc17 	ldw	r2,-16(fp)
    5320:	19803fcc 	andi	r6,r3,255
    5324:	11000243 	ldbu	r4,9(r2)
    5328:	2008703a 	and	r4,r4,zero
    532c:	200b883a 	mov	r5,r4
    5330:	3009883a 	mov	r4,r6
    5334:	2908b03a 	or	r4,r5,r4
    5338:	11000245 	stb	r4,9(r2)
    533c:	1808d23a 	srli	r4,r3,8
    5340:	21803fcc 	andi	r6,r4,255
    5344:	11000283 	ldbu	r4,10(r2)
    5348:	2008703a 	and	r4,r4,zero
    534c:	200b883a 	mov	r5,r4
    5350:	3009883a 	mov	r4,r6
    5354:	2908b03a 	or	r4,r5,r4
    5358:	11000285 	stb	r4,10(r2)
    535c:	1808d43a 	srli	r4,r3,16
    5360:	21803fcc 	andi	r6,r4,255
    5364:	110002c3 	ldbu	r4,11(r2)
    5368:	2008703a 	and	r4,r4,zero
    536c:	200b883a 	mov	r5,r4
    5370:	3009883a 	mov	r4,r6
    5374:	2908b03a 	or	r4,r5,r4
    5378:	110002c5 	stb	r4,11(r2)
    537c:	180ad63a 	srli	r5,r3,24
    5380:	10c00303 	ldbu	r3,12(r2)
    5384:	1806703a 	and	r3,r3,zero
    5388:	1809883a 	mov	r4,r3
    538c:	2807883a 	mov	r3,r5
    5390:	20c6b03a 	or	r3,r4,r3
    5394:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    5398:	e0bffc17 	ldw	r2,-16(fp)
    539c:	00c000c4 	movi	r3,3
    53a0:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    53a4:	e0bffc17 	ldw	r2,-16(fp)
    53a8:	10800c83 	ldbu	r2,50(r2)
    53ac:	10803fcc 	andi	r2,r2,255
    53b0:	10c00120 	cmpeqi	r3,r2,4
    53b4:	1800021e 	bne	r3,zero,53c0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    53b8:	10800148 	cmpgei	r2,r2,5
    53bc:	00000306 	br	53cc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    53c0:	e0bffc17 	ldw	r2,-16(fp)
    53c4:	10000cc5 	stb	zero,51(r2)
                                        break;
    53c8:	00000106 	br	53d0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    53cc:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    53d0:	e0bffc17 	ldw	r2,-16(fp)
    53d4:	10800c43 	ldbu	r2,49(r2)
    53d8:	10bfff84 	addi	r2,r2,-2
    53dc:	1007883a 	mov	r3,r2
    53e0:	e0bffc17 	ldw	r2,-16(fp)
    53e4:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	10c00404 	addi	r3,r2,16
    53f0:	e0bffc17 	ldw	r2,-16(fp)
    53f4:	10800204 	addi	r2,r2,8
    53f8:	100b883a 	mov	r5,r2
    53fc:	1809883a 	mov	r4,r3
    5400:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    5404:	e0bffc17 	ldw	r2,-16(fp)
    5408:	00c00104 	movi	r3,4
    540c:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    5410:	e0bffc17 	ldw	r2,-16(fp)
    5414:	10800c83 	ldbu	r2,50(r2)
    5418:	10803fcc 	andi	r2,r2,255
    541c:	10c00120 	cmpeqi	r3,r2,4
    5420:	1800141e 	bne	r3,zero,5474 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    5424:	10c00160 	cmpeqi	r3,r2,5
    5428:	1800311e 	bne	r3,zero,54f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    542c:	108000a0 	cmpeqi	r2,r2,2
    5430:	10005a26 	beq	r2,zero,559c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    5434:	e0bffc17 	ldw	r2,-16(fp)
    5438:	10800404 	addi	r2,r2,16
    543c:	e1bffe17 	ldw	r6,-8(fp)
    5440:	e17ffd17 	ldw	r5,-12(fp)
    5444:	1009883a 	mov	r4,r2
    5448:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    544c:	1080005c 	xori	r2,r2,1
    5450:	10803fcc 	andi	r2,r2,255
    5454:	10000226 	beq	r2,zero,5460 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    5458:	0005883a 	mov	r2,zero
    545c:	00008706 	br	567c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    5460:	e0bffa17 	ldw	r2,-24(fp)
    5464:	10c00143 	ldbu	r3,5(r2)
    5468:	e0bffc17 	ldw	r2,-16(fp)
    546c:	10c00d05 	stb	r3,52(r2)
                                        break;
    5470:	00005e06 	br	55ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    5474:	e0bffc17 	ldw	r2,-16(fp)
    5478:	10800404 	addi	r2,r2,16
    547c:	e1bffe17 	ldw	r6,-8(fp)
    5480:	e17ffd17 	ldw	r5,-12(fp)
    5484:	1009883a 	mov	r4,r2
    5488:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    548c:	1080005c 	xori	r2,r2,1
    5490:	10803fcc 	andi	r2,r2,255
    5494:	10000226 	beq	r2,zero,54a0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    5498:	0005883a 	mov	r2,zero
    549c:	00007706 	br	567c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    54a0:	e0bffc17 	ldw	r2,-16(fp)
    54a4:	10800e03 	ldbu	r2,56(r2)
    54a8:	10803fcc 	andi	r2,r2,255
    54ac:	10004c1e 	bne	r2,zero,55e0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    54b0:	e0bffc17 	ldw	r2,-16(fp)
    54b4:	00c00044 	movi	r3,1
    54b8:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    54bc:	e0bffb17 	ldw	r2,-20(fp)
    54c0:	10c00083 	ldbu	r3,2(r2)
    54c4:	e0bffc17 	ldw	r2,-16(fp)
    54c8:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    54cc:	e0bffb17 	ldw	r2,-20(fp)
    54d0:	10c000c3 	ldbu	r3,3(r2)
    54d4:	e0bffc17 	ldw	r2,-16(fp)
    54d8:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    54dc:	e0bffb17 	ldw	r2,-20(fp)
    54e0:	10c001c3 	ldbu	r3,7(r2)
    54e4:	e0bffc17 	ldw	r2,-16(fp)
    54e8:	10c00d45 	stb	r3,53(r2)
                                        break;
    54ec:	00003f06 	br	55ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    54f0:	e0bffc17 	ldw	r2,-16(fp)
    54f4:	10800404 	addi	r2,r2,16
    54f8:	e1bffe17 	ldw	r6,-8(fp)
    54fc:	e17ffd17 	ldw	r5,-12(fp)
    5500:	1009883a 	mov	r4,r2
    5504:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5508:	1080005c 	xori	r2,r2,1
    550c:	10803fcc 	andi	r2,r2,255
    5510:	10000226 	beq	r2,zero,551c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5514:	0005883a 	mov	r2,zero
    5518:	00005806 	br	567c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    551c:	e0bffc17 	ldw	r2,-16(fp)
    5520:	10800cc3 	ldbu	r2,51(r2)
    5524:	10803fcc 	andi	r2,r2,255
    5528:	10002f26 	beq	r2,zero,55e8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    552c:	e0bffc17 	ldw	r2,-16(fp)
    5530:	10800117 	ldw	r2,4(r2)
    5534:	10002c26 	beq	r2,zero,55e8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    5538:	e0bffc17 	ldw	r2,-16(fp)
    553c:	10800117 	ldw	r2,4(r2)
    5540:	10800017 	ldw	r2,0(r2)
    5544:	10800017 	ldw	r2,0(r2)
    5548:	e0fffc17 	ldw	r3,-16(fp)
    554c:	1a000117 	ldw	r8,4(r3)
    5550:	e0fffc17 	ldw	r3,-16(fp)
    5554:	18c00d03 	ldbu	r3,52(r3)
    5558:	19403fcc 	andi	r5,r3,255
    555c:	e0fffc17 	ldw	r3,-16(fp)
    5560:	18c00d83 	ldbu	r3,54(r3)
    5564:	19803fcc 	andi	r6,r3,255
    5568:	e0fffc17 	ldw	r3,-16(fp)
    556c:	18c00dc3 	ldbu	r3,55(r3)
    5570:	19c03fcc 	andi	r7,r3,255
    5574:	e0fffc17 	ldw	r3,-16(fp)
    5578:	18c00d43 	ldbu	r3,53(r3)
    557c:	18c03fcc 	andi	r3,r3,255
    5580:	e13ffc17 	ldw	r4,-16(fp)
    5584:	21000804 	addi	r4,r4,32
    5588:	d9000115 	stw	r4,4(sp)
    558c:	d8c00015 	stw	r3,0(sp)
    5590:	4009883a 	mov	r4,r8
    5594:	103ee83a 	callr	r2
                                        break;
    5598:	00001306 	br	55e8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    559c:	e0bffc17 	ldw	r2,-16(fp)
    55a0:	10c00604 	addi	r3,r2,24
    55a4:	e0bffc17 	ldw	r2,-16(fp)
    55a8:	10800c43 	ldbu	r2,49(r2)
    55ac:	10803fcc 	andi	r2,r2,255
    55b0:	10bfff84 	addi	r2,r2,-2
    55b4:	10bfffcc 	andi	r2,r2,65535
    55b8:	100f883a 	mov	r7,r2
    55bc:	e1bffe17 	ldw	r6,-8(fp)
    55c0:	e17ffd17 	ldw	r5,-12(fp)
    55c4:	1809883a 	mov	r4,r3
    55c8:	0004a7c0 	call	4a7c <_ZN11ByteSkipper4SkipEPPhPtt>
    55cc:	1080005c 	xori	r2,r2,1
    55d0:	10803fcc 	andi	r2,r2,255
    55d4:	10000526 	beq	r2,zero,55ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    55d8:	0005883a 	mov	r2,zero
    55dc:	00002706 	br	567c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    55e0:	0001883a 	nop
    55e4:	00000106 	br	55ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    55e8:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    55ec:	e0bffc17 	ldw	r2,-16(fp)
    55f0:	10c00804 	addi	r3,r2,32
    55f4:	e0bffc17 	ldw	r2,-16(fp)
    55f8:	19803fcc 	andi	r6,r3,255
    55fc:	11000243 	ldbu	r4,9(r2)
    5600:	2008703a 	and	r4,r4,zero
    5604:	200b883a 	mov	r5,r4
    5608:	3009883a 	mov	r4,r6
    560c:	2908b03a 	or	r4,r5,r4
    5610:	11000245 	stb	r4,9(r2)
    5614:	1808d23a 	srli	r4,r3,8
    5618:	21803fcc 	andi	r6,r4,255
    561c:	11000283 	ldbu	r4,10(r2)
    5620:	2008703a 	and	r4,r4,zero
    5624:	200b883a 	mov	r5,r4
    5628:	3009883a 	mov	r4,r6
    562c:	2908b03a 	or	r4,r5,r4
    5630:	11000285 	stb	r4,10(r2)
    5634:	1808d43a 	srli	r4,r3,16
    5638:	21803fcc 	andi	r6,r4,255
    563c:	110002c3 	ldbu	r4,11(r2)
    5640:	2008703a 	and	r4,r4,zero
    5644:	200b883a 	mov	r5,r4
    5648:	3009883a 	mov	r4,r6
    564c:	2908b03a 	or	r4,r5,r4
    5650:	110002c5 	stb	r4,11(r2)
    5654:	180ad63a 	srli	r5,r3,24
    5658:	10c00303 	ldbu	r3,12(r2)
    565c:	1806703a 	and	r3,r3,zero
    5660:	1809883a 	mov	r4,r3
    5664:	2807883a 	mov	r3,r5
    5668:	20c6b03a 	or	r3,r4,r3
    566c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    5670:	e0bffc17 	ldw	r2,-16(fp)
    5674:	10000c05 	stb	zero,48(r2)
        }
        return true;
    5678:	00800044 	movi	r2,1
}
    567c:	e037883a 	mov	sp,fp
    5680:	dfc00117 	ldw	ra,4(sp)
    5684:	df000017 	ldw	fp,0(sp)
    5688:	dec00204 	addi	sp,sp,8
    568c:	f800283a 	ret

00005690 <_Z8set_notehh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 note, alt_u8 vel) {
    5690:	defffc04 	addi	sp,sp,-16
    5694:	df000315 	stw	fp,12(sp)
    5698:	df000304 	addi	fp,sp,12
    569c:	2007883a 	mov	r3,r4
    56a0:	2805883a 	mov	r2,r5
    56a4:	e0fffe05 	stb	r3,-8(fp)
    56a8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(vel == 0) {
    56ac:	e0bfff03 	ldbu	r2,-4(fp)
    56b0:	1000081e 	bne	r2,zero,56d4 <_Z8set_notehh+0x44>
		set_val = keys->NOTE[note];
    56b4:	d0e00d17 	ldw	r3,-32716(gp)
    56b8:	e0bffe03 	ldbu	r2,-8(fp)
    56bc:	1085883a 	add	r2,r2,r2
    56c0:	1085883a 	add	r2,r2,r2
    56c4:	1885883a 	add	r2,r3,r2
    56c8:	10800017 	ldw	r2,0(r2)
    56cc:	e0bffd15 	stw	r2,-12(fp)
    56d0:	00000306 	br	56e0 <_Z8set_notehh+0x50>
	}
	else {
		set_val = 0x80 + vel;
    56d4:	e0bfff03 	ldbu	r2,-4(fp)
    56d8:	10802004 	addi	r2,r2,128
    56dc:	e0bffd15 	stw	r2,-12(fp)
	}

	keys->NOTE[note] = set_val;
    56e0:	d0e00d17 	ldw	r3,-32716(gp)
    56e4:	e0bffe03 	ldbu	r2,-8(fp)
    56e8:	1085883a 	add	r2,r2,r2
    56ec:	1085883a 	add	r2,r2,r2
    56f0:	1885883a 	add	r2,r3,r2
    56f4:	e0fffd17 	ldw	r3,-12(fp)
    56f8:	10c00015 	stw	r3,0(r2)
}
    56fc:	0001883a 	nop
    5700:	e037883a 	mov	sp,fp
    5704:	df000017 	ldw	fp,0(sp)
    5708:	dec00104 	addi	sp,sp,4
    570c:	f800283a 	ret

00005710 <_Z8set_adsrhm>:

void set_adsr(alt_u8 par, alt_u32 val) {
    5710:	defffd04 	addi	sp,sp,-12
    5714:	df000215 	stw	fp,8(sp)
    5718:	df000204 	addi	fp,sp,8
    571c:	2005883a 	mov	r2,r4
    5720:	e17fff15 	stw	r5,-4(fp)
    5724:	e0bffe05 	stb	r2,-8(fp)
	adsr->VAL[par] = val;
    5728:	d0e00e17 	ldw	r3,-32712(gp)
    572c:	e0bffe03 	ldbu	r2,-8(fp)
    5730:	1085883a 	add	r2,r2,r2
    5734:	1085883a 	add	r2,r2,r2
    5738:	1885883a 	add	r2,r3,r2
    573c:	e0ffff17 	ldw	r3,-4(fp)
    5740:	10c00015 	stw	r3,0(r2)
}
    5744:	0001883a 	nop
    5748:	e037883a 	mov	sp,fp
    574c:	df000017 	ldw	fp,0(sp)
    5750:	dec00104 	addi	sp,sp,4
    5754:	f800283a 	ret

00005758 <_Z9calc_adsrtttf>:

void calc_adsr(alt_u16 att_m_seconds, alt_u16 dec_m_seconds, alt_u16 rel_m_seconds, float peak_amp) {
    5758:	defff204 	addi	sp,sp,-56
    575c:	dfc00d15 	stw	ra,52(sp)
    5760:	df000c15 	stw	fp,48(sp)
    5764:	dc000b15 	stw	r16,44(sp)
    5768:	df000c04 	addi	fp,sp,48
    576c:	2807883a 	mov	r3,r5
    5770:	3005883a 	mov	r2,r6
    5774:	e1fffe15 	stw	r7,-8(fp)
    5778:	e13ffb0d 	sth	r4,-20(fp)
    577c:	e0fffc0d 	sth	r3,-16(fp)
    5780:	e0bffd0d 	sth	r2,-12(fp)

	alt_u32 ATT_LEN, ATT_STEP, PEAK_ATT, DEC_LEN, DEC_STEP, REL_LEN, REL_STEP;

	if (att_m_seconds > 5000) {
    5784:	e0bffb0b 	ldhu	r2,-20(fp)
    5788:	1084e270 	cmpltui	r2,r2,5001
    578c:	1000041e 	bne	r2,zero,57a0 <_Z9calc_adsrtttf+0x48>
		printf("ERRROR: Requested attack length is too long.\n");
    5790:	010000b4 	movhi	r4,2
    5794:	21105004 	addi	r4,r4,16704
    5798:	000f2fc0 	call	f2fc <puts>
		return;
    579c:	00008e06 	br	59d8 <_Z9calc_adsrtttf+0x280>
	}
	if (dec_m_seconds > 5000) {
    57a0:	e0bffc0b 	ldhu	r2,-16(fp)
    57a4:	1084e270 	cmpltui	r2,r2,5001
    57a8:	1000041e 	bne	r2,zero,57bc <_Z9calc_adsrtttf+0x64>
		printf("ERRROR: Requested decay length is too long.\n");
    57ac:	010000b4 	movhi	r4,2
    57b0:	21105c04 	addi	r4,r4,16752
    57b4:	000f2fc0 	call	f2fc <puts>
		return;
    57b8:	00008706 	br	59d8 <_Z9calc_adsrtttf+0x280>
	}
	if (rel_m_seconds > 10000) {
    57bc:	e0bffd0b 	ldhu	r2,-12(fp)
    57c0:	1089c470 	cmpltui	r2,r2,10001
    57c4:	1000041e 	bne	r2,zero,57d8 <_Z9calc_adsrtttf+0x80>
		printf("ERRROR: Requested release length is too long.\n");
    57c8:	010000b4 	movhi	r4,2
    57cc:	21106704 	addi	r4,r4,16796
    57d0:	000f2fc0 	call	f2fc <puts>
		return;
    57d4:	00008006 	br	59d8 <_Z9calc_adsrtttf+0x280>
	}
	if (peak_amp > (float) 1.9) {
    57d8:	014ffcf4 	movhi	r5,16371
    57dc:	294cccc4 	addi	r5,r5,13107
    57e0:	e13ffe17 	ldw	r4,-8(fp)
    57e4:	000d5f40 	call	d5f4 <__gesf2>
    57e8:	0080040e 	bge	zero,r2,57fc <_Z9calc_adsrtttf+0xa4>
		printf("ERROR: Requested peak attack amplitude is too large.\n");
    57ec:	010000b4 	movhi	r4,2
    57f0:	21107304 	addi	r4,r4,16844
    57f4:	000f2fc0 	call	f2fc <puts>
		return;
    57f8:	00007706 	br	59d8 <_Z9calc_adsrtttf+0x280>
	}

	ATT_LEN = (att_m_seconds * F_S) / 1000;
    57fc:	e0bffb0b 	ldhu	r2,-20(fp)
    5800:	016b1114 	movui	r5,44100
    5804:	1009883a 	mov	r4,r2
    5808:	000d18c0 	call	d18c <__mulsi3>
    580c:	0140fa04 	movi	r5,1000
    5810:	1009883a 	mov	r4,r2
    5814:	000cfd80 	call	cfd8 <__divsi3>
    5818:	e0bff415 	stw	r2,-48(fp)
	ATT_STEP = (peak_amp * (alt_u32) 0x80000) / ATT_LEN;
    581c:	01524034 	movhi	r5,18688
    5820:	e13ffe17 	ldw	r4,-8(fp)
    5824:	000d6b00 	call	d6b0 <__mulsf3>
    5828:	1007883a 	mov	r3,r2
    582c:	1821883a 	mov	r16,r3
    5830:	e13ff417 	ldw	r4,-48(fp)
    5834:	000e0340 	call	e034 <__floatunsisf>
    5838:	1007883a 	mov	r3,r2
    583c:	180b883a 	mov	r5,r3
    5840:	8009883a 	mov	r4,r16
    5844:	000d1b40 	call	d1b4 <__divsf3>
    5848:	1007883a 	mov	r3,r2
    584c:	1805883a 	mov	r2,r3
    5850:	1009883a 	mov	r4,r2
    5854:	000cf780 	call	cf78 <__fixunssfsi>
    5858:	e0bff515 	stw	r2,-44(fp)
	PEAK_ATT = ATT_LEN * ATT_STEP;
    585c:	e17ff517 	ldw	r5,-44(fp)
    5860:	e13ff417 	ldw	r4,-48(fp)
    5864:	000d18c0 	call	d18c <__mulsi3>
    5868:	e0bff615 	stw	r2,-40(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    586c:	e0bffc0b 	ldhu	r2,-16(fp)
    5870:	016b1114 	movui	r5,44100
    5874:	1009883a 	mov	r4,r2
    5878:	000d18c0 	call	d18c <__mulsi3>
    587c:	0140fa04 	movi	r5,1000
    5880:	1009883a 	mov	r4,r2
    5884:	000cfd80 	call	cfd8 <__divsi3>
    5888:	e0bff715 	stw	r2,-36(fp)
	DEC_STEP = ((peak_amp - 1) * (alt_u32) 0x80000) / DEC_LEN;
    588c:	014fe034 	movhi	r5,16256
    5890:	e13ffe17 	ldw	r4,-8(fp)
    5894:	000dae00 	call	dae0 <__subsf3>
    5898:	1007883a 	mov	r3,r2
    589c:	1805883a 	mov	r2,r3
    58a0:	01524034 	movhi	r5,18688
    58a4:	1009883a 	mov	r4,r2
    58a8:	000d6b00 	call	d6b0 <__mulsf3>
    58ac:	1007883a 	mov	r3,r2
    58b0:	1821883a 	mov	r16,r3
    58b4:	e13ff717 	ldw	r4,-36(fp)
    58b8:	000e0340 	call	e034 <__floatunsisf>
    58bc:	1007883a 	mov	r3,r2
    58c0:	180b883a 	mov	r5,r3
    58c4:	8009883a 	mov	r4,r16
    58c8:	000d1b40 	call	d1b4 <__divsf3>
    58cc:	1007883a 	mov	r3,r2
    58d0:	1805883a 	mov	r2,r3
    58d4:	1009883a 	mov	r4,r2
    58d8:	000cf780 	call	cf78 <__fixunssfsi>
    58dc:	e0bff815 	stw	r2,-32(fp)
	REL_LEN = (rel_m_seconds * 44100) / 1000;
    58e0:	e0bffd0b 	ldhu	r2,-12(fp)
    58e4:	016b1114 	movui	r5,44100
    58e8:	1009883a 	mov	r4,r2
    58ec:	000d18c0 	call	d18c <__mulsi3>
    58f0:	0140fa04 	movi	r5,1000
    58f4:	1009883a 	mov	r4,r2
    58f8:	000cfd80 	call	cfd8 <__divsi3>
    58fc:	e0bff915 	stw	r2,-28(fp)
	REL_STEP = ((alt_u32) 0x80000) / REL_LEN;
    5900:	e17ff917 	ldw	r5,-28(fp)
    5904:	01000234 	movhi	r4,8
    5908:	000d0d00 	call	d0d0 <__udivsi3>
    590c:	e0bffa15 	stw	r2,-24(fp)

	printf("ATT_LEN:  %X\n", ATT_LEN);
    5910:	e17ff417 	ldw	r5,-48(fp)
    5914:	010000b4 	movhi	r4,2
    5918:	21108104 	addi	r4,r4,16900
    591c:	000f1e00 	call	f1e0 <printf>
	printf("ATT_STEP: %X\n", ATT_STEP);
    5920:	e17ff517 	ldw	r5,-44(fp)
    5924:	010000b4 	movhi	r4,2
    5928:	21108504 	addi	r4,r4,16916
    592c:	000f1e00 	call	f1e0 <printf>
	printf("PEAK_ATT: %X\n", PEAK_ATT);
    5930:	e17ff617 	ldw	r5,-40(fp)
    5934:	010000b4 	movhi	r4,2
    5938:	21108904 	addi	r4,r4,16932
    593c:	000f1e00 	call	f1e0 <printf>
	printf("DEC_LEN:  %X\n", DEC_LEN);
    5940:	e17ff717 	ldw	r5,-36(fp)
    5944:	010000b4 	movhi	r4,2
    5948:	21108d04 	addi	r4,r4,16948
    594c:	000f1e00 	call	f1e0 <printf>
	printf("DEC_STEP: %X\n", DEC_STEP);
    5950:	e17ff817 	ldw	r5,-32(fp)
    5954:	010000b4 	movhi	r4,2
    5958:	21109104 	addi	r4,r4,16964
    595c:	000f1e00 	call	f1e0 <printf>
	printf("REL_LEN:  %X\n", REL_LEN);
    5960:	e17ff917 	ldw	r5,-28(fp)
    5964:	010000b4 	movhi	r4,2
    5968:	21109504 	addi	r4,r4,16980
    596c:	000f1e00 	call	f1e0 <printf>
	printf("REL_STEP: %X\n", REL_STEP);
    5970:	e17ffa17 	ldw	r5,-24(fp)
    5974:	010000b4 	movhi	r4,2
    5978:	21109904 	addi	r4,r4,16996
    597c:	000f1e00 	call	f1e0 <printf>

	set_adsr(ATT_L, ATT_LEN);
    5980:	e17ff417 	ldw	r5,-48(fp)
    5984:	01000044 	movi	r4,1
    5988:	00057100 	call	5710 <_Z8set_adsrhm>
	set_adsr(ATT_S, ATT_STEP);
    598c:	e17ff517 	ldw	r5,-44(fp)
    5990:	01000084 	movi	r4,2
    5994:	00057100 	call	5710 <_Z8set_adsrhm>
	set_adsr(PEAK_A, PEAK_ATT);
    5998:	e17ff617 	ldw	r5,-40(fp)
    599c:	0009883a 	mov	r4,zero
    59a0:	00057100 	call	5710 <_Z8set_adsrhm>
	set_adsr(DEC_L, DEC_LEN);
    59a4:	e17ff717 	ldw	r5,-36(fp)
    59a8:	010000c4 	movi	r4,3
    59ac:	00057100 	call	5710 <_Z8set_adsrhm>
	set_adsr(DEC_S, DEC_STEP);
    59b0:	e17ff817 	ldw	r5,-32(fp)
    59b4:	01000104 	movi	r4,4
    59b8:	00057100 	call	5710 <_Z8set_adsrhm>
	set_adsr(REL_L, REL_LEN);
    59bc:	e17ff917 	ldw	r5,-28(fp)
    59c0:	01000144 	movi	r4,5
    59c4:	00057100 	call	5710 <_Z8set_adsrhm>
	set_adsr(REL_S, REL_STEP);
    59c8:	e17ffa17 	ldw	r5,-24(fp)
    59cc:	01000184 	movi	r4,6
    59d0:	00057100 	call	5710 <_Z8set_adsrhm>

	return;
    59d4:	0001883a 	nop
}
    59d8:	e6ffff04 	addi	sp,fp,-4
    59dc:	dfc00217 	ldw	ra,8(sp)
    59e0:	df000117 	ldw	fp,4(sp)
    59e4:	dc000017 	ldw	r16,0(sp)
    59e8:	dec00304 	addi	sp,sp,12
    59ec:	f800283a 	ret

000059f0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    59f0:	defff904 	addi	sp,sp,-28
    59f4:	dfc00615 	stw	ra,24(sp)
    59f8:	df000515 	stw	fp,20(sp)
    59fc:	df000504 	addi	fp,sp,20
    5a00:	e13ffc15 	stw	r4,-16(fp)
    5a04:	e17ffd15 	stw	r5,-12(fp)
    5a08:	3007883a 	mov	r3,r6
    5a0c:	3805883a 	mov	r2,r7
    5a10:	e0fffe05 	stb	r3,-8(fp)
    5a14:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    5a18:	e0800217 	ldw	r2,8(fp)
    5a1c:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    5a20:	e0bffc17 	ldw	r2,-16(fp)
    5a24:	10800117 	ldw	r2,4(r2)
    5a28:	1080004c 	andi	r2,r2,1
    5a2c:	1007883a 	mov	r3,r2
    5a30:	e0bffb17 	ldw	r2,-20(fp)
    5a34:	10800003 	ldbu	r2,0(r2)
    5a38:	1080004c 	andi	r2,r2,1
    5a3c:	18c03fcc 	andi	r3,r3,255
    5a40:	10803fcc 	andi	r2,r2,255
    5a44:	18801426 	beq	r3,r2,5a98 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5a48:	e0bffb17 	ldw	r2,-20(fp)
    5a4c:	10800003 	ldbu	r2,0(r2)
    5a50:	1080004c 	andi	r2,r2,1
    5a54:	10803fcc 	andi	r2,r2,255
    5a58:	10000826 	beq	r2,zero,5a7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5a5c:	e0bffc17 	ldw	r2,-16(fp)
    5a60:	10800017 	ldw	r2,0(r2)
    5a64:	10800304 	addi	r2,r2,12
    5a68:	10800017 	ldw	r2,0(r2)
    5a6c:	e17ffb17 	ldw	r5,-20(fp)
    5a70:	e13ffc17 	ldw	r4,-16(fp)
    5a74:	103ee83a 	callr	r2
    5a78:	00000706 	br	5a98 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5a7c:	e0bffc17 	ldw	r2,-16(fp)
    5a80:	10800017 	ldw	r2,0(r2)
    5a84:	10800204 	addi	r2,r2,8
    5a88:	10800017 	ldw	r2,0(r2)
    5a8c:	e17ffb17 	ldw	r5,-20(fp)
    5a90:	e13ffc17 	ldw	r4,-16(fp)
    5a94:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5a98:	e0bffc17 	ldw	r2,-16(fp)
    5a9c:	10800117 	ldw	r2,4(r2)
    5aa0:	1004d07a 	srli	r2,r2,1
    5aa4:	1080004c 	andi	r2,r2,1
    5aa8:	1007883a 	mov	r3,r2
    5aac:	e0bffb17 	ldw	r2,-20(fp)
    5ab0:	10800003 	ldbu	r2,0(r2)
    5ab4:	1004d07a 	srli	r2,r2,1
    5ab8:	1080004c 	andi	r2,r2,1
    5abc:	18c03fcc 	andi	r3,r3,255
    5ac0:	10803fcc 	andi	r2,r2,255
    5ac4:	18801426 	beq	r3,r2,5b18 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    5ac8:	e0bffb17 	ldw	r2,-20(fp)
    5acc:	10800003 	ldbu	r2,0(r2)
    5ad0:	1080008c 	andi	r2,r2,2
    5ad4:	10803fcc 	andi	r2,r2,255
    5ad8:	10000826 	beq	r2,zero,5afc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    5adc:	e0bffc17 	ldw	r2,-16(fp)
    5ae0:	10800017 	ldw	r2,0(r2)
    5ae4:	10800504 	addi	r2,r2,20
    5ae8:	10800017 	ldw	r2,0(r2)
    5aec:	e17ffb17 	ldw	r5,-20(fp)
    5af0:	e13ffc17 	ldw	r4,-16(fp)
    5af4:	103ee83a 	callr	r2
    5af8:	00000706 	br	5b18 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    5afc:	e0bffc17 	ldw	r2,-16(fp)
    5b00:	10800017 	ldw	r2,0(r2)
    5b04:	10800404 	addi	r2,r2,16
    5b08:	10800017 	ldw	r2,0(r2)
    5b0c:	e17ffb17 	ldw	r5,-20(fp)
    5b10:	e13ffc17 	ldw	r4,-16(fp)
    5b14:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5b18:	e0bffc17 	ldw	r2,-16(fp)
    5b1c:	10800117 	ldw	r2,4(r2)
    5b20:	1004d0ba 	srli	r2,r2,2
    5b24:	1080004c 	andi	r2,r2,1
    5b28:	1007883a 	mov	r3,r2
    5b2c:	e0bffb17 	ldw	r2,-20(fp)
    5b30:	10800003 	ldbu	r2,0(r2)
    5b34:	1004d0ba 	srli	r2,r2,2
    5b38:	1080004c 	andi	r2,r2,1
    5b3c:	18c03fcc 	andi	r3,r3,255
    5b40:	10803fcc 	andi	r2,r2,255
    5b44:	18801426 	beq	r3,r2,5b98 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5b48:	e0bffb17 	ldw	r2,-20(fp)
    5b4c:	10800003 	ldbu	r2,0(r2)
    5b50:	1080010c 	andi	r2,r2,4
    5b54:	10803fcc 	andi	r2,r2,255
    5b58:	10000826 	beq	r2,zero,5b7c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5b5c:	e0bffc17 	ldw	r2,-16(fp)
    5b60:	10800017 	ldw	r2,0(r2)
    5b64:	10800704 	addi	r2,r2,28
    5b68:	10800017 	ldw	r2,0(r2)
    5b6c:	e17ffb17 	ldw	r5,-20(fp)
    5b70:	e13ffc17 	ldw	r4,-16(fp)
    5b74:	103ee83a 	callr	r2
    5b78:	00000706 	br	5b98 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5b7c:	e0bffc17 	ldw	r2,-16(fp)
    5b80:	10800017 	ldw	r2,0(r2)
    5b84:	10800604 	addi	r2,r2,24
    5b88:	10800017 	ldw	r2,0(r2)
    5b8c:	e17ffb17 	ldw	r5,-20(fp)
    5b90:	e13ffc17 	ldw	r4,-16(fp)
    5b94:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5b98:	e0bffb17 	ldw	r2,-20(fp)
    5b9c:	10800043 	ldbu	r2,1(r2)
    5ba0:	10803fcc 	andi	r2,r2,255
    5ba4:	1080201c 	xori	r2,r2,128
    5ba8:	10bfe004 	addi	r2,r2,-128
    5bac:	1000061e 	bne	r2,zero,5bc8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    5bb0:	e0bffb17 	ldw	r2,-20(fp)
    5bb4:	10800083 	ldbu	r2,2(r2)
    5bb8:	10803fcc 	andi	r2,r2,255
    5bbc:	1080201c 	xori	r2,r2,128
    5bc0:	10bfe004 	addi	r2,r2,-128
    5bc4:	10000726 	beq	r2,zero,5be4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    5bc8:	e0bffc17 	ldw	r2,-16(fp)
    5bcc:	10800017 	ldw	r2,0(r2)
    5bd0:	10800104 	addi	r2,r2,4
    5bd4:	10800017 	ldw	r2,0(r2)
    5bd8:	e17ffb17 	ldw	r5,-20(fp)
    5bdc:	e13ffc17 	ldw	r4,-16(fp)
    5be0:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    5be4:	e0800217 	ldw	r2,8(fp)
    5be8:	10c00003 	ldbu	r3,0(r2)
    5bec:	e0bffc17 	ldw	r2,-16(fp)
    5bf0:	10c00105 	stb	r3,4(r2)
#endif

};
    5bf4:	0001883a 	nop
    5bf8:	e037883a 	mov	sp,fp
    5bfc:	dfc00117 	ldw	ra,4(sp)
    5c00:	df000017 	ldw	fp,0(sp)
    5c04:	dec00204 	addi	sp,sp,8
    5c08:	f800283a 	ret

00005c0c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5c0c:	defff804 	addi	sp,sp,-32
    5c10:	dfc00715 	stw	ra,28(sp)
    5c14:	df000615 	stw	fp,24(sp)
    5c18:	df000604 	addi	fp,sp,24
    5c1c:	e13ffc15 	stw	r4,-16(fp)
    5c20:	e17ffd15 	stw	r5,-12(fp)
    5c24:	3007883a 	mov	r3,r6
    5c28:	3805883a 	mov	r2,r7
    5c2c:	e0fffe05 	stb	r3,-8(fp)
    5c30:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5c34:	e0800217 	ldw	r2,8(fp)
    5c38:	10800084 	addi	r2,r2,2
    5c3c:	10800003 	ldbu	r2,0(r2)
    5c40:	10803fcc 	andi	r2,r2,255
    5c44:	10800058 	cmpnei	r2,r2,1
    5c48:	10009926 	beq	r2,zero,5eb0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5c4c:	e0bffc17 	ldw	r2,-16(fp)
    5c50:	10c00103 	ldbu	r3,4(r2)
    5c54:	e0800217 	ldw	r2,8(fp)
    5c58:	10800003 	ldbu	r2,0(r2)
    5c5c:	18c03fcc 	andi	r3,r3,255
    5c60:	10803fcc 	andi	r2,r2,255
    5c64:	18800e26 	beq	r3,r2,5ca0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5c68:	e0bffc17 	ldw	r2,-16(fp)
    5c6c:	10800017 	ldw	r2,0(r2)
    5c70:	10800204 	addi	r2,r2,8
    5c74:	10800017 	ldw	r2,0(r2)
    5c78:	e0fffc17 	ldw	r3,-16(fp)
    5c7c:	18c00103 	ldbu	r3,4(r3)
    5c80:	19003fcc 	andi	r4,r3,255
    5c84:	e0c00217 	ldw	r3,8(fp)
    5c88:	18c00003 	ldbu	r3,0(r3)
    5c8c:	18c03fcc 	andi	r3,r3,255
    5c90:	180d883a 	mov	r6,r3
    5c94:	200b883a 	mov	r5,r4
    5c98:	e13ffc17 	ldw	r4,-16(fp)
    5c9c:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    5ca0:	00800084 	movi	r2,2
    5ca4:	e0bffa05 	stb	r2,-24(fp)
    5ca8:	e0bffa03 	ldbu	r2,-24(fp)
    5cac:	10800228 	cmpgeui	r2,r2,8
    5cb0:	10006e1e 	bne	r2,zero,5e6c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    5cb4:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    5cb8:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    5cbc:	00800084 	movi	r2,2
    5cc0:	e0bffac5 	stb	r2,-21(fp)
    5cc4:	e0bffac3 	ldbu	r2,-21(fp)
    5cc8:	10800228 	cmpgeui	r2,r2,8
    5ccc:	10002f1e 	bne	r2,zero,5d8c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    5cd0:	e0bffa03 	ldbu	r2,-24(fp)
    5cd4:	e0c00217 	ldw	r3,8(fp)
    5cd8:	1885883a 	add	r2,r3,r2
    5cdc:	11000003 	ldbu	r4,0(r2)
    5ce0:	e0bffac3 	ldbu	r2,-21(fp)
    5ce4:	e0fffc17 	ldw	r3,-16(fp)
    5ce8:	1885883a 	add	r2,r3,r2
    5cec:	10800104 	addi	r2,r2,4
    5cf0:	10800003 	ldbu	r2,0(r2)
    5cf4:	20c03fcc 	andi	r3,r4,255
    5cf8:	10803fcc 	andi	r2,r2,255
    5cfc:	1880091e 	bne	r3,r2,5d24 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    5d00:	e0bffa03 	ldbu	r2,-24(fp)
    5d04:	e0c00217 	ldw	r3,8(fp)
    5d08:	1885883a 	add	r2,r3,r2
    5d0c:	10800003 	ldbu	r2,0(r2)
    5d10:	10803fcc 	andi	r2,r2,255
    5d14:	10800060 	cmpeqi	r2,r2,1
    5d18:	1000021e 	bne	r2,zero,5d24 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5d1c:	00800044 	movi	r2,1
    5d20:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5d24:	e0bffac3 	ldbu	r2,-21(fp)
    5d28:	e0c00217 	ldw	r3,8(fp)
    5d2c:	1885883a 	add	r2,r3,r2
    5d30:	11000003 	ldbu	r4,0(r2)
    5d34:	e0bffa03 	ldbu	r2,-24(fp)
    5d38:	e0fffc17 	ldw	r3,-16(fp)
    5d3c:	1885883a 	add	r2,r3,r2
    5d40:	10800104 	addi	r2,r2,4
    5d44:	10800003 	ldbu	r2,0(r2)
    5d48:	20c03fcc 	andi	r3,r4,255
    5d4c:	10803fcc 	andi	r2,r2,255
    5d50:	18800a1e 	bne	r3,r2,5d7c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5d54:	e0bffa03 	ldbu	r2,-24(fp)
    5d58:	e0fffc17 	ldw	r3,-16(fp)
    5d5c:	1885883a 	add	r2,r3,r2
    5d60:	10800104 	addi	r2,r2,4
    5d64:	10800003 	ldbu	r2,0(r2)
    5d68:	10803fcc 	andi	r2,r2,255
    5d6c:	10800060 	cmpeqi	r2,r2,1
    5d70:	1000021e 	bne	r2,zero,5d7c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5d74:	00800044 	movi	r2,1
    5d78:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5d7c:	e0bffac3 	ldbu	r2,-21(fp)
    5d80:	10800044 	addi	r2,r2,1
    5d84:	e0bffac5 	stb	r2,-21(fp)
    5d88:	003fce06 	br	5cc4 <__alt_data_end+0xfc005cc4>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5d8c:	e0bffa43 	ldbu	r2,-23(fp)
    5d90:	1080005c 	xori	r2,r2,1
    5d94:	10803fcc 	andi	r2,r2,255
    5d98:	10001c26 	beq	r2,zero,5e0c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5d9c:	e0bffc17 	ldw	r2,-16(fp)
    5da0:	10800017 	ldw	r2,0(r2)
    5da4:	10800104 	addi	r2,r2,4
    5da8:	10800017 	ldw	r2,0(r2)
    5dac:	e0fffa03 	ldbu	r3,-24(fp)
    5db0:	e1000217 	ldw	r4,8(fp)
    5db4:	20c7883a 	add	r3,r4,r3
    5db8:	18c00003 	ldbu	r3,0(r3)
    5dbc:	18c03fcc 	andi	r3,r3,255
    5dc0:	180d883a 	mov	r6,r3
    5dc4:	e17ffd17 	ldw	r5,-12(fp)
    5dc8:	e13ffc17 	ldw	r4,-16(fp)
    5dcc:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    5dd0:	e0bffc17 	ldw	r2,-16(fp)
    5dd4:	10800017 	ldw	r2,0(r2)
    5dd8:	10800304 	addi	r2,r2,12
    5ddc:	10800017 	ldw	r2,0(r2)
    5de0:	e0c00217 	ldw	r3,8(fp)
    5de4:	18c00003 	ldbu	r3,0(r3)
    5de8:	19403fcc 	andi	r5,r3,255
    5dec:	e0fffa03 	ldbu	r3,-24(fp)
    5df0:	e1000217 	ldw	r4,8(fp)
    5df4:	20c7883a 	add	r3,r4,r3
    5df8:	18c00003 	ldbu	r3,0(r3)
    5dfc:	18c03fcc 	andi	r3,r3,255
    5e00:	180d883a 	mov	r6,r3
    5e04:	e13ffc17 	ldw	r4,-16(fp)
    5e08:	103ee83a 	callr	r2
                }
                if (!up)
    5e0c:	e0bffa83 	ldbu	r2,-22(fp)
    5e10:	1080005c 	xori	r2,r2,1
    5e14:	10803fcc 	andi	r2,r2,255
    5e18:	10001026 	beq	r2,zero,5e5c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5e1c:	e0bffc17 	ldw	r2,-16(fp)
    5e20:	10800017 	ldw	r2,0(r2)
    5e24:	10800404 	addi	r2,r2,16
    5e28:	10800017 	ldw	r2,0(r2)
    5e2c:	e0fffc17 	ldw	r3,-16(fp)
    5e30:	18c00103 	ldbu	r3,4(r3)
    5e34:	19403fcc 	andi	r5,r3,255
    5e38:	e0fffa03 	ldbu	r3,-24(fp)
    5e3c:	e13ffc17 	ldw	r4,-16(fp)
    5e40:	20c7883a 	add	r3,r4,r3
    5e44:	18c00104 	addi	r3,r3,4
    5e48:	18c00003 	ldbu	r3,0(r3)
    5e4c:	18c03fcc 	andi	r3,r3,255
    5e50:	180d883a 	mov	r6,r3
    5e54:	e13ffc17 	ldw	r4,-16(fp)
    5e58:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5e5c:	e0bffa03 	ldbu	r2,-24(fp)
    5e60:	10800044 	addi	r2,r2,1
    5e64:	e0bffa05 	stb	r2,-24(fp)
    5e68:	003f8f06 	br	5ca8 <__alt_data_end+0xfc005ca8>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5e6c:	e03ffb05 	stb	zero,-20(fp)
    5e70:	e0bffb03 	ldbu	r2,-20(fp)
    5e74:	10800228 	cmpgeui	r2,r2,8
    5e78:	10000e1e 	bne	r2,zero,5eb4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5e7c:	e0bffb03 	ldbu	r2,-20(fp)
    5e80:	e0fffb03 	ldbu	r3,-20(fp)
    5e84:	e1000217 	ldw	r4,8(fp)
    5e88:	20c7883a 	add	r3,r4,r3
    5e8c:	18c00003 	ldbu	r3,0(r3)
    5e90:	e13ffc17 	ldw	r4,-16(fp)
    5e94:	2085883a 	add	r2,r4,r2
    5e98:	10800104 	addi	r2,r2,4
    5e9c:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5ea0:	e0bffb03 	ldbu	r2,-20(fp)
    5ea4:	10800044 	addi	r2,r2,1
    5ea8:	e0bffb05 	stb	r2,-20(fp)
    5eac:	003ff006 	br	5e70 <__alt_data_end+0xfc005e70>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5eb0:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5eb4:	e037883a 	mov	sp,fp
    5eb8:	dfc00117 	ldw	ra,4(sp)
    5ebc:	df000017 	ldw	fp,0(sp)
    5ec0:	dec00204 	addi	sp,sp,8
    5ec4:	f800283a 	ret

00005ec8 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5ec8:	defffa04 	addi	sp,sp,-24
    5ecc:	dfc00515 	stw	ra,20(sp)
    5ed0:	df000415 	stw	fp,16(sp)
    5ed4:	df000404 	addi	fp,sp,16
    5ed8:	e13ffd15 	stw	r4,-12(fp)
    5edc:	2807883a 	mov	r3,r5
    5ee0:	3005883a 	mov	r2,r6
    5ee4:	e0fffe05 	stb	r3,-8(fp)
    5ee8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5eec:	e0bffe03 	ldbu	r2,-8(fp)
    5ef0:	1080088c 	andi	r2,r2,34
    5ef4:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5ef8:	e0bfff03 	ldbu	r2,-4(fp)
    5efc:	10800130 	cmpltui	r2,r2,4
    5f00:	1000151e 	bne	r2,zero,5f58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5f04:	e0bfff03 	ldbu	r2,-4(fp)
    5f08:	108007a8 	cmpgeui	r2,r2,30
    5f0c:	1000121e 	bne	r2,zero,5f58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5f10:	e0bffd17 	ldw	r2,-12(fp)
    5f14:	10800317 	ldw	r2,12(r2)
    5f18:	1080008c 	andi	r2,r2,2
    5f1c:	1000021e 	bne	r2,zero,5f28 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5f20:	e0bffc03 	ldbu	r2,-16(fp)
    5f24:	1000061e 	bne	r2,zero,5f40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f28:	e0bffd17 	ldw	r2,-12(fp)
    5f2c:	10800317 	ldw	r2,12(r2)
    5f30:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5f34:	10000526 	beq	r2,zero,5f4c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5f38:	e0bffc03 	ldbu	r2,-16(fp)
    5f3c:	1000031e 	bne	r2,zero,5f4c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5f40:	e0bfff03 	ldbu	r2,-4(fp)
    5f44:	10800f44 	addi	r2,r2,61
    5f48:	00008006 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5f4c:	e0bfff03 	ldbu	r2,-4(fp)
    5f50:	10801744 	addi	r2,r2,93
    5f54:	00007d06 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5f58:	e0bfff03 	ldbu	r2,-4(fp)
    5f5c:	108007b0 	cmpltui	r2,r2,30
    5f60:	1000191e 	bne	r2,zero,5fc8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5f64:	e0bfff03 	ldbu	r2,-4(fp)
    5f68:	10800a28 	cmpgeui	r2,r2,40
    5f6c:	1000161e 	bne	r2,zero,5fc8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5f70:	e0bffc03 	ldbu	r2,-16(fp)
    5f74:	10000c26 	beq	r2,zero,5fa8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5f78:	e0bffd17 	ldw	r2,-12(fp)
    5f7c:	10800017 	ldw	r2,0(r2)
    5f80:	10800504 	addi	r2,r2,20
    5f84:	10800017 	ldw	r2,0(r2)
    5f88:	e13ffd17 	ldw	r4,-12(fp)
    5f8c:	103ee83a 	callr	r2
    5f90:	1007883a 	mov	r3,r2
    5f94:	e0bfff03 	ldbu	r2,-4(fp)
    5f98:	10bff884 	addi	r2,r2,-30
    5f9c:	1885883a 	add	r2,r3,r2
    5fa0:	10800003 	ldbu	r2,0(r2)
    5fa4:	00006906 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5fa8:	e0bfff03 	ldbu	r2,-4(fp)
    5fac:	108009e0 	cmpeqi	r2,r2,39
    5fb0:	1000031e 	bne	r2,zero,5fc0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5fb4:	e0bfff03 	ldbu	r2,-4(fp)
    5fb8:	108004c4 	addi	r2,r2,19
    5fbc:	00006306 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5fc0:	00800c04 	movi	r2,48
    5fc4:	00006106 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5fc8:	e0bfff03 	ldbu	r2,-4(fp)
    5fcc:	10801670 	cmpltui	r2,r2,89
    5fd0:	10000a1e 	bne	r2,zero,5ffc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5fd4:	e0bfff03 	ldbu	r2,-4(fp)
    5fd8:	108018a8 	cmpgeui	r2,r2,98
    5fdc:	1000071e 	bne	r2,zero,5ffc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5fe0:	e0bffd17 	ldw	r2,-12(fp)
    5fe4:	10800317 	ldw	r2,12(r2)
    5fe8:	1080004c 	andi	r2,r2,1
    5fec:	10005626 	beq	r2,zero,6148 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5ff0:	e0bfff03 	ldbu	r2,-4(fp)
    5ff4:	10bff604 	addi	r2,r2,-40
    5ff8:	00005406 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5ffc:	e0bfff03 	ldbu	r2,-4(fp)
    6000:	10800b70 	cmpltui	r2,r2,45
    6004:	10001d1e 	bne	r2,zero,607c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    6008:	e0bfff03 	ldbu	r2,-4(fp)
    600c:	10800e68 	cmpgeui	r2,r2,57
    6010:	10001a1e 	bne	r2,zero,607c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    6014:	e0bffc03 	ldbu	r2,-16(fp)
    6018:	10000c26 	beq	r2,zero,604c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    601c:	e0bffd17 	ldw	r2,-12(fp)
    6020:	10800017 	ldw	r2,0(r2)
    6024:	10800604 	addi	r2,r2,24
    6028:	10800017 	ldw	r2,0(r2)
    602c:	e13ffd17 	ldw	r4,-12(fp)
    6030:	103ee83a 	callr	r2
    6034:	1007883a 	mov	r3,r2
    6038:	e0bfff03 	ldbu	r2,-4(fp)
    603c:	10bff4c4 	addi	r2,r2,-45
    6040:	1885883a 	add	r2,r3,r2
    6044:	10800003 	ldbu	r2,0(r2)
    6048:	00004006 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    604c:	e0bffd17 	ldw	r2,-12(fp)
    6050:	10800017 	ldw	r2,0(r2)
    6054:	10800704 	addi	r2,r2,28
    6058:	10800017 	ldw	r2,0(r2)
    605c:	e13ffd17 	ldw	r4,-12(fp)
    6060:	103ee83a 	callr	r2
    6064:	1007883a 	mov	r3,r2
    6068:	e0bfff03 	ldbu	r2,-4(fp)
    606c:	10bff4c4 	addi	r2,r2,-45
    6070:	1885883a 	add	r2,r3,r2
    6074:	10800003 	ldbu	r2,0(r2)
    6078:	00003406 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    607c:	e0bfff03 	ldbu	r2,-4(fp)
    6080:	10801530 	cmpltui	r2,r2,84
    6084:	10000f1e 	bne	r2,zero,60c4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    6088:	e0bfff03 	ldbu	r2,-4(fp)
    608c:	10801668 	cmpgeui	r2,r2,89
    6090:	10000c1e 	bne	r2,zero,60c4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    6094:	e0bffd17 	ldw	r2,-12(fp)
    6098:	10800017 	ldw	r2,0(r2)
    609c:	10800804 	addi	r2,r2,32
    60a0:	10800017 	ldw	r2,0(r2)
    60a4:	e13ffd17 	ldw	r4,-12(fp)
    60a8:	103ee83a 	callr	r2
    60ac:	1007883a 	mov	r3,r2
    60b0:	e0bfff03 	ldbu	r2,-4(fp)
    60b4:	10bfeb04 	addi	r2,r2,-84
    60b8:	1885883a 	add	r2,r3,r2
    60bc:	10800003 	ldbu	r2,0(r2)
    60c0:	00002206 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    60c4:	e0bfff03 	ldbu	r2,-4(fp)
    60c8:	10c00b20 	cmpeqi	r3,r2,44
    60cc:	18000a1e 	bne	r3,zero,60f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    60d0:	10c00b48 	cmpgei	r3,r2,45
    60d4:	1800031e 	bne	r3,zero,60e4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    60d8:	10800a20 	cmpeqi	r2,r2,40
    60dc:	1000081e 	bne	r2,zero,6100 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    60e0:	00001906 	br	6148 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    60e4:	10c018a0 	cmpeqi	r3,r2,98
    60e8:	1800071e 	bne	r3,zero,6108 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    60ec:	108018e0 	cmpeqi	r2,r2,99
    60f0:	10000d1e 	bne	r2,zero,6128 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    60f4:	00001406 	br	6148 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    60f8:	00800804 	movi	r2,32
    60fc:	00001306 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    6100:	00800344 	movi	r2,13
    6104:	00001106 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    6108:	e0bffd17 	ldw	r2,-12(fp)
    610c:	10800317 	ldw	r2,12(r2)
    6110:	1080004c 	andi	r2,r2,1
    6114:	10000226 	beq	r2,zero,6120 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    6118:	00800c04 	movi	r2,48
    611c:	00000b06 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6120:	0005883a 	mov	r2,zero
    6124:	00000906 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    6128:	e0bffd17 	ldw	r2,-12(fp)
    612c:	10800317 	ldw	r2,12(r2)
    6130:	1080004c 	andi	r2,r2,1
    6134:	10000226 	beq	r2,zero,6140 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    6138:	00800b84 	movi	r2,46
    613c:	00000306 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    6140:	0005883a 	mov	r2,zero
    6144:	00000106 	br	614c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    6148:	0005883a 	mov	r2,zero
}
    614c:	e037883a 	mov	sp,fp
    6150:	dfc00117 	ldw	ra,4(sp)
    6154:	df000017 	ldw	fp,0(sp)
    6158:	dec00204 	addi	sp,sp,8
    615c:	f800283a 	ret

00006160 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    6160:	defffd04 	addi	sp,sp,-12
    6164:	df000215 	stw	fp,8(sp)
    6168:	df000204 	addi	fp,sp,8
    616c:	e13ffe15 	stw	r4,-8(fp)
    6170:	e17fff15 	stw	r5,-4(fp)
        };
    6174:	0001883a 	nop
    6178:	e037883a 	mov	sp,fp
    617c:	df000017 	ldw	fp,0(sp)
    6180:	dec00104 	addi	sp,sp,4
    6184:	f800283a 	ret

00006188 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    6188:	defffd04 	addi	sp,sp,-12
    618c:	df000215 	stw	fp,8(sp)
    6190:	df000204 	addi	fp,sp,8
    6194:	e13ffe15 	stw	r4,-8(fp)
    6198:	e17fff15 	stw	r5,-4(fp)
        };
    619c:	0001883a 	nop
    61a0:	e037883a 	mov	sp,fp
    61a4:	df000017 	ldw	fp,0(sp)
    61a8:	dec00104 	addi	sp,sp,4
    61ac:	f800283a 	ret

000061b0 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    61b0:	defffd04 	addi	sp,sp,-12
    61b4:	df000215 	stw	fp,8(sp)
    61b8:	df000204 	addi	fp,sp,8
    61bc:	e13ffe15 	stw	r4,-8(fp)
    61c0:	e17fff15 	stw	r5,-4(fp)
        };
    61c4:	0001883a 	nop
    61c8:	e037883a 	mov	sp,fp
    61cc:	df000017 	ldw	fp,0(sp)
    61d0:	dec00104 	addi	sp,sp,4
    61d4:	f800283a 	ret

000061d8 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    61d8:	defffd04 	addi	sp,sp,-12
    61dc:	df000215 	stw	fp,8(sp)
    61e0:	df000204 	addi	fp,sp,8
    61e4:	e13ffe15 	stw	r4,-8(fp)
    61e8:	e17fff15 	stw	r5,-4(fp)
        };
    61ec:	0001883a 	nop
    61f0:	e037883a 	mov	sp,fp
    61f4:	df000017 	ldw	fp,0(sp)
    61f8:	dec00104 	addi	sp,sp,4
    61fc:	f800283a 	ret

00006200 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6200:	defffd04 	addi	sp,sp,-12
    6204:	df000215 	stw	fp,8(sp)
    6208:	df000204 	addi	fp,sp,8
    620c:	e13ffe15 	stw	r4,-8(fp)
    6210:	e17fff15 	stw	r5,-4(fp)
        };
    6214:	0001883a 	nop
    6218:	e037883a 	mov	sp,fp
    621c:	df000017 	ldw	fp,0(sp)
    6220:	dec00104 	addi	sp,sp,4
    6224:	f800283a 	ret

00006228 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    6228:	defffd04 	addi	sp,sp,-12
    622c:	df000215 	stw	fp,8(sp)
    6230:	df000204 	addi	fp,sp,8
    6234:	e13ffe15 	stw	r4,-8(fp)
    6238:	e17fff15 	stw	r5,-4(fp)
        };
    623c:	0001883a 	nop
    6240:	e037883a 	mov	sp,fp
    6244:	df000017 	ldw	fp,0(sp)
    6248:	dec00104 	addi	sp,sp,4
    624c:	f800283a 	ret

00006250 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    6250:	defffd04 	addi	sp,sp,-12
    6254:	df000215 	stw	fp,8(sp)
    6258:	df000204 	addi	fp,sp,8
    625c:	e13ffe15 	stw	r4,-8(fp)
    6260:	e17fff15 	stw	r5,-4(fp)
        };
    6264:	0001883a 	nop
    6268:	e037883a 	mov	sp,fp
    626c:	df000017 	ldw	fp,0(sp)
    6270:	dec00104 	addi	sp,sp,4
    6274:	f800283a 	ret

00006278 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    6278:	defff704 	addi	sp,sp,-36
    627c:	dfc00815 	stw	ra,32(sp)
    6280:	df000715 	stw	fp,28(sp)
    6284:	df000704 	addi	fp,sp,28
    6288:	e13ffd15 	stw	r4,-12(fp)
    628c:	e17ffe15 	stw	r5,-8(fp)
    6290:	3005883a 	mov	r2,r6
    6294:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    6298:	e0bffd17 	ldw	r2,-12(fp)
    629c:	10800303 	ldbu	r2,12(r2)
    62a0:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    62a4:	e0bfff03 	ldbu	r2,-4(fp)
    62a8:	10c011e0 	cmpeqi	r3,r2,71
    62ac:	1800271e 	bne	r3,zero,634c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    62b0:	10c014e0 	cmpeqi	r3,r2,83
    62b4:	1800031e 	bne	r3,zero,62c4 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    62b8:	10800e60 	cmpeqi	r2,r2,57
    62bc:	1000111e 	bne	r2,zero,6304 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    62c0:	00003506 	br	6398 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    62c4:	e0bffd17 	ldw	r2,-12(fp)
    62c8:	10800317 	ldw	r2,12(r2)
    62cc:	1080004c 	andi	r2,r2,1
    62d0:	0084303a 	nor	r2,zero,r2
    62d4:	1080004c 	andi	r2,r2,1
    62d8:	1007883a 	mov	r3,r2
    62dc:	e0bffd17 	ldw	r2,-12(fp)
    62e0:	1940004c 	andi	r5,r3,1
    62e4:	11000303 	ldbu	r4,12(r2)
    62e8:	00ffff84 	movi	r3,-2
    62ec:	20c6703a 	and	r3,r4,r3
    62f0:	1809883a 	mov	r4,r3
    62f4:	2807883a 	mov	r3,r5
    62f8:	20c6b03a 	or	r3,r4,r3
    62fc:	10c00305 	stb	r3,12(r2)
                                break;
    6300:	00002506 	br	6398 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    6304:	e0bffd17 	ldw	r2,-12(fp)
    6308:	10800317 	ldw	r2,12(r2)
    630c:	1004d07a 	srli	r2,r2,1
    6310:	1080004c 	andi	r2,r2,1
    6314:	0084303a 	nor	r2,zero,r2
    6318:	1080004c 	andi	r2,r2,1
    631c:	1007883a 	mov	r3,r2
    6320:	e0bffd17 	ldw	r2,-12(fp)
    6324:	18c0004c 	andi	r3,r3,1
    6328:	18cb883a 	add	r5,r3,r3
    632c:	11000303 	ldbu	r4,12(r2)
    6330:	00ffff44 	movi	r3,-3
    6334:	20c6703a 	and	r3,r4,r3
    6338:	1809883a 	mov	r4,r3
    633c:	2807883a 	mov	r3,r5
    6340:	20c6b03a 	or	r3,r4,r3
    6344:	10c00305 	stb	r3,12(r2)
                                break;
    6348:	00001306 	br	6398 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    634c:	e0bffd17 	ldw	r2,-12(fp)
    6350:	10800317 	ldw	r2,12(r2)
    6354:	1004d0ba 	srli	r2,r2,2
    6358:	1080004c 	andi	r2,r2,1
    635c:	0084303a 	nor	r2,zero,r2
    6360:	1080004c 	andi	r2,r2,1
    6364:	1007883a 	mov	r3,r2
    6368:	e0bffd17 	ldw	r2,-12(fp)
    636c:	18c0004c 	andi	r3,r3,1
    6370:	18c7883a 	add	r3,r3,r3
    6374:	18cb883a 	add	r5,r3,r3
    6378:	11000303 	ldbu	r4,12(r2)
    637c:	00fffec4 	movi	r3,-5
    6380:	20c6703a 	and	r3,r4,r3
    6384:	1809883a 	mov	r4,r3
    6388:	2807883a 	mov	r3,r5
    638c:	20c6b03a 	or	r3,r4,r3
    6390:	10c00305 	stb	r3,12(r2)
                                break;
    6394:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    6398:	e0bffd17 	ldw	r2,-12(fp)
    639c:	10800303 	ldbu	r2,12(r2)
    63a0:	10c03fcc 	andi	r3,r2,255
    63a4:	e0bffc03 	ldbu	r2,-16(fp)
    63a8:	18801026 	beq	r3,r2,63ec <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    63ac:	e0bffe17 	ldw	r2,-8(fp)
    63b0:	10000e26 	beq	r2,zero,63ec <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    63b4:	e0bffd17 	ldw	r2,-12(fp)
    63b8:	10800303 	ldbu	r2,12(r2)
    63bc:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    63c0:	e0bffc44 	addi	r2,fp,-15
    63c4:	d8800215 	stw	r2,8(sp)
    63c8:	00800044 	movi	r2,1
    63cc:	d8800115 	stw	r2,4(sp)
    63d0:	d8000015 	stw	zero,0(sp)
    63d4:	01c00084 	movi	r7,2
    63d8:	000d883a 	mov	r6,zero
    63dc:	000b883a 	mov	r5,zero
    63e0:	e13ffe17 	ldw	r4,-8(fp)
    63e4:	00092fc0 	call	92fc <_ZN6USBHID9SetReportEhhhhtPh>
    63e8:	00000106 	br	63f0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    63ec:	0005883a 	mov	r2,zero
        };
    63f0:	e037883a 	mov	sp,fp
    63f4:	dfc00117 	ldw	ra,4(sp)
    63f8:	df000017 	ldw	fp,0(sp)
    63fc:	dec00204 	addi	sp,sp,8
    6400:	f800283a 	ret

00006404 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    6404:	defffc04 	addi	sp,sp,-16
    6408:	df000315 	stw	fp,12(sp)
    640c:	df000304 	addi	fp,sp,12
    6410:	e13ffd15 	stw	r4,-12(fp)
    6414:	2807883a 	mov	r3,r5
    6418:	3005883a 	mov	r2,r6
    641c:	e0fffe05 	stb	r3,-8(fp)
    6420:	e0bfff05 	stb	r2,-4(fp)
        };
    6424:	0001883a 	nop
    6428:	e037883a 	mov	sp,fp
    642c:	df000017 	ldw	fp,0(sp)
    6430:	dec00104 	addi	sp,sp,4
    6434:	f800283a 	ret

00006438 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6438:	defffc04 	addi	sp,sp,-16
    643c:	df000315 	stw	fp,12(sp)
    6440:	df000304 	addi	fp,sp,12
    6444:	e13ffd15 	stw	r4,-12(fp)
    6448:	2807883a 	mov	r3,r5
    644c:	3005883a 	mov	r2,r6
    6450:	e0fffe05 	stb	r3,-8(fp)
    6454:	e0bfff05 	stb	r2,-4(fp)
        };
    6458:	0001883a 	nop
    645c:	e037883a 	mov	sp,fp
    6460:	df000017 	ldw	fp,0(sp)
    6464:	dec00104 	addi	sp,sp,4
    6468:	f800283a 	ret

0000646c <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    646c:	defffc04 	addi	sp,sp,-16
    6470:	df000315 	stw	fp,12(sp)
    6474:	df000304 	addi	fp,sp,12
    6478:	e13ffd15 	stw	r4,-12(fp)
    647c:	2807883a 	mov	r3,r5
    6480:	3005883a 	mov	r2,r6
    6484:	e0fffe05 	stb	r3,-8(fp)
    6488:	e0bfff05 	stb	r2,-4(fp)
        };
    648c:	0001883a 	nop
    6490:	e037883a 	mov	sp,fp
    6494:	df000017 	ldw	fp,0(sp)
    6498:	dec00104 	addi	sp,sp,4
    649c:	f800283a 	ret

000064a0 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    64a0:	defffe04 	addi	sp,sp,-8
    64a4:	df000115 	stw	fp,4(sp)
    64a8:	df000104 	addi	fp,sp,4
    64ac:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    64b0:	008000b4 	movhi	r2,2
    64b4:	1098ca84 	addi	r2,r2,25386
        };
    64b8:	e037883a 	mov	sp,fp
    64bc:	df000017 	ldw	fp,0(sp)
    64c0:	dec00104 	addi	sp,sp,4
    64c4:	f800283a 	ret

000064c8 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    64c8:	defffe04 	addi	sp,sp,-8
    64cc:	df000115 	stw	fp,4(sp)
    64d0:	df000104 	addi	fp,sp,4
    64d4:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    64d8:	008000b4 	movhi	r2,2
    64dc:	1098cd04 	addi	r2,r2,25396
        };
    64e0:	e037883a 	mov	sp,fp
    64e4:	df000017 	ldw	fp,0(sp)
    64e8:	dec00104 	addi	sp,sp,4
    64ec:	f800283a 	ret

000064f0 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    64f0:	defffe04 	addi	sp,sp,-8
    64f4:	df000115 	stw	fp,4(sp)
    64f8:	df000104 	addi	fp,sp,4
    64fc:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    6500:	008000b4 	movhi	r2,2
    6504:	1098d004 	addi	r2,r2,25408
        };
    6508:	e037883a 	mov	sp,fp
    650c:	df000017 	ldw	fp,0(sp)
    6510:	dec00104 	addi	sp,sp,4
    6514:	f800283a 	ret

00006518 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    6518:	defffe04 	addi	sp,sp,-8
    651c:	df000115 	stw	fp,4(sp)
    6520:	df000104 	addi	fp,sp,4
    6524:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    6528:	d0a1e784 	addi	r2,gp,-30818
        };
    652c:	e037883a 	mov	sp,fp
    6530:	df000017 	ldw	fp,0(sp)
    6534:	dec00104 	addi	sp,sp,4
    6538:	f800283a 	ret

0000653c <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    653c:	defffc04 	addi	sp,sp,-16
    6540:	dfc00315 	stw	ra,12(sp)
    6544:	df000215 	stw	fp,8(sp)
    6548:	df000204 	addi	fp,sp,8
    654c:	2005883a 	mov	r2,r4
    6550:	e17fff15 	stw	r5,-4(fp)
    6554:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    6558:	d0e1ec17 	ldw	r3,-30800(gp)
    655c:	e0bfff17 	ldw	r2,-4(fp)
    6560:	18800416 	blt	r3,r2,6574 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6564:	e0bffe07 	ldb	r2,-8(fp)
    6568:	1009883a 	mov	r4,r2
    656c:	000f2240 	call	f224 <putchar>
    6570:	00000106 	br	6578 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6574:	0001883a 	nop
        printf("%c", c);
}
    6578:	e037883a 	mov	sp,fp
    657c:	dfc00117 	ldw	ra,4(sp)
    6580:	df000017 	ldw	fp,0(sp)
    6584:	dec00204 	addi	sp,sp,8
    6588:	f800283a 	ret

0000658c <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    658c:	defffb04 	addi	sp,sp,-20
    6590:	dfc00415 	stw	ra,16(sp)
    6594:	df000315 	stw	fp,12(sp)
    6598:	df000304 	addi	fp,sp,12
    659c:	e13ffe15 	stw	r4,-8(fp)
    65a0:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    65a4:	d0e1ec17 	ldw	r3,-30800(gp)
    65a8:	e0bfff17 	ldw	r2,-4(fp)
    65ac:	18801016 	blt	r3,r2,65f0 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    65b0:	e0bffe17 	ldw	r2,-8(fp)
    65b4:	10001026 	beq	r2,zero,65f8 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    65b8:	e0bffe17 	ldw	r2,-8(fp)
    65bc:	10c00044 	addi	r3,r2,1
    65c0:	e0fffe15 	stw	r3,-8(fp)
    65c4:	10800003 	ldbu	r2,0(r2)
    65c8:	e0bffd05 	stb	r2,-12(fp)
    65cc:	e0bffd07 	ldb	r2,-12(fp)
    65d0:	1004c03a 	cmpne	r2,r2,zero
    65d4:	10803fcc 	andi	r2,r2,255
    65d8:	10000826 	beq	r2,zero,65fc <_Z8E_NotifyPKci+0x70>
    65dc:	e0bffd07 	ldb	r2,-12(fp)
    65e0:	e17fff17 	ldw	r5,-4(fp)
    65e4:	1009883a 	mov	r4,r2
    65e8:	000653c0 	call	653c <_Z9E_Notifycci>
    65ec:	003ff206 	br	65b8 <__alt_data_end+0xfc0065b8>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    65f0:	0001883a 	nop
    65f4:	00000106 	br	65fc <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    65f8:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    65fc:	e037883a 	mov	sp,fp
    6600:	dfc00117 	ldw	ra,4(sp)
    6604:	df000017 	ldw	fp,0(sp)
    6608:	dec00204 	addi	sp,sp,8
    660c:	f800283a 	ret

00006610 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    6610:	defffb04 	addi	sp,sp,-20
    6614:	dfc00415 	stw	ra,16(sp)
    6618:	df000315 	stw	fp,12(sp)
    661c:	df000304 	addi	fp,sp,12
    6620:	e13ffe15 	stw	r4,-8(fp)
    6624:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6628:	d0e1ec17 	ldw	r3,-30800(gp)
    662c:	e0bfff17 	ldw	r2,-4(fp)
    6630:	18801016 	blt	r3,r2,6674 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6634:	e0bffe17 	ldw	r2,-8(fp)
    6638:	10001026 	beq	r2,zero,667c <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    663c:	e0bffe17 	ldw	r2,-8(fp)
    6640:	10c00044 	addi	r3,r2,1
    6644:	e0fffe15 	stw	r3,-8(fp)
    6648:	10800003 	ldbu	r2,0(r2)
    664c:	e0bffd05 	stb	r2,-12(fp)
    6650:	e0bffd07 	ldb	r2,-12(fp)
    6654:	1004c03a 	cmpne	r2,r2,zero
    6658:	10803fcc 	andi	r2,r2,255
    665c:	10000826 	beq	r2,zero,6680 <_Z11E_NotifyStrPKci+0x70>
    6660:	e0bffd07 	ldb	r2,-12(fp)
    6664:	e17fff17 	ldw	r5,-4(fp)
    6668:	1009883a 	mov	r4,r2
    666c:	000653c0 	call	653c <_Z9E_Notifycci>
    6670:	003ff206 	br	663c <__alt_data_end+0xfc00663c>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6674:	0001883a 	nop
    6678:	00000106 	br	6680 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    667c:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    6680:	e037883a 	mov	sp,fp
    6684:	dfc00117 	ldw	ra,4(sp)
    6688:	df000017 	ldw	fp,0(sp)
    668c:	dec00204 	addi	sp,sp,8
    6690:	f800283a 	ret

00006694 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    6694:	defffd04 	addi	sp,sp,-12
    6698:	df000215 	stw	fp,8(sp)
    669c:	df000204 	addi	fp,sp,8
    66a0:	2005883a 	mov	r2,r4
    66a4:	e17fff15 	stw	r5,-4(fp)
    66a8:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    66ac:	e037883a 	mov	sp,fp
    66b0:	df000017 	ldw	fp,0(sp)
    66b4:	dec00104 	addi	sp,sp,4
    66b8:	f800283a 	ret

000066bc <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    66bc:	defffc04 	addi	sp,sp,-16
    66c0:	df000315 	stw	fp,12(sp)
    66c4:	df000304 	addi	fp,sp,12
    66c8:	e13ffd15 	stw	r4,-12(fp)
    66cc:	e17ffe15 	stw	r5,-8(fp)
    66d0:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    66d4:	e037883a 	mov	sp,fp
    66d8:	df000017 	ldw	fp,0(sp)
    66dc:	dec00104 	addi	sp,sp,4
    66e0:	f800283a 	ret

000066e4 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    66e4:	defffc04 	addi	sp,sp,-16
    66e8:	df000315 	stw	fp,12(sp)
    66ec:	df000304 	addi	fp,sp,12
    66f0:	e13ffd15 	stw	r4,-12(fp)
    66f4:	e17ffe15 	stw	r5,-8(fp)
    66f8:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    66fc:	e0bffd17 	ldw	r2,-12(fp)
    6700:	10800017 	ldw	r2,0(r2)
    6704:	1000021e 	bne	r2,zero,6710 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    6708:	0005883a 	mov	r2,zero
    670c:	00003306 	br	67dc <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6710:	e0bffd17 	ldw	r2,-12(fp)
    6714:	10800103 	ldbu	r2,4(r2)
    6718:	10803fcc 	andi	r2,r2,255
    671c:	10002426 	beq	r2,zero,67b0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    6720:	e0bfff17 	ldw	r2,-4(fp)
    6724:	1080000b 	ldhu	r2,0(r2)
    6728:	10bfffcc 	andi	r2,r2,65535
    672c:	10002026 	beq	r2,zero,67b0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    6730:	e0bffd17 	ldw	r2,-12(fp)
    6734:	10800017 	ldw	r2,0(r2)
    6738:	e0fffd17 	ldw	r3,-12(fp)
    673c:	18c00143 	ldbu	r3,5(r3)
    6740:	19003fcc 	andi	r4,r3,255
    6744:	e0fffd17 	ldw	r3,-12(fp)
    6748:	18c00103 	ldbu	r3,4(r3)
    674c:	18c03fcc 	andi	r3,r3,255
    6750:	20c7c83a 	sub	r3,r4,r3
    6754:	10c5883a 	add	r2,r2,r3
    6758:	e0fffe17 	ldw	r3,-8(fp)
    675c:	18c00017 	ldw	r3,0(r3)
    6760:	18c00003 	ldbu	r3,0(r3)
    6764:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6768:	e0bffd17 	ldw	r2,-12(fp)
    676c:	10800103 	ldbu	r2,4(r2)
    6770:	10bfffc4 	addi	r2,r2,-1
    6774:	1007883a 	mov	r3,r2
    6778:	e0bffd17 	ldw	r2,-12(fp)
    677c:	10c00105 	stb	r3,4(r2)
    6780:	e0bfff17 	ldw	r2,-4(fp)
    6784:	1080000b 	ldhu	r2,0(r2)
    6788:	10bfffc4 	addi	r2,r2,-1
    678c:	1007883a 	mov	r3,r2
    6790:	e0bfff17 	ldw	r2,-4(fp)
    6794:	10c0000d 	sth	r3,0(r2)
    6798:	e0bffe17 	ldw	r2,-8(fp)
    679c:	10800017 	ldw	r2,0(r2)
    67a0:	10c00044 	addi	r3,r2,1
    67a4:	e0bffe17 	ldw	r2,-8(fp)
    67a8:	10c00015 	stw	r3,0(r2)
    67ac:	003fd806 	br	6710 <__alt_data_end+0xfc006710>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    67b0:	e0bffd17 	ldw	r2,-12(fp)
    67b4:	10800103 	ldbu	r2,4(r2)
    67b8:	10803fcc 	andi	r2,r2,255
    67bc:	10000226 	beq	r2,zero,67c8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    67c0:	0005883a 	mov	r2,zero
    67c4:	00000506 	br	67dc <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    67c8:	e0bffd17 	ldw	r2,-12(fp)
    67cc:	10c00143 	ldbu	r3,5(r2)
    67d0:	e0bffd17 	ldw	r2,-12(fp)
    67d4:	10c00105 	stb	r3,4(r2)
        return true;
    67d8:	00800044 	movi	r2,1
}
    67dc:	e037883a 	mov	sp,fp
    67e0:	df000017 	ldw	fp,0(sp)
    67e4:	dec00104 	addi	sp,sp,4
    67e8:	f800283a 	ret

000067ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    67ec:	defffa04 	addi	sp,sp,-24
    67f0:	dfc00515 	stw	ra,20(sp)
    67f4:	df000415 	stw	fp,16(sp)
    67f8:	df000404 	addi	fp,sp,16
    67fc:	e13ffc15 	stw	r4,-16(fp)
    6800:	e17ffd15 	stw	r5,-12(fp)
    6804:	e1bffe15 	stw	r6,-8(fp)
    6808:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    680c:	e0bffc17 	ldw	r2,-16(fp)
    6810:	10800003 	ldbu	r2,0(r2)
    6814:	10803fcc 	andi	r2,r2,255
    6818:	10c00060 	cmpeqi	r3,r2,1
    681c:	1800181e 	bne	r3,zero,6880 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    6820:	10c00088 	cmpgei	r3,r2,2
    6824:	1800021e 	bne	r3,zero,6830 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    6828:	10000626 	beq	r2,zero,6844 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    682c:	00007e06 	br	6a28 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    6830:	10c000a0 	cmpeqi	r3,r2,2
    6834:	18004a1e 	bne	r3,zero,6960 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    6838:	108000e0 	cmpeqi	r2,r2,3
    683c:	1000571e 	bne	r2,zero,699c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    6840:	00007906 	br	6a28 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6844:	e0bffc17 	ldw	r2,-16(fp)
    6848:	10800417 	ldw	r2,16(r2)
    684c:	e0fffc17 	ldw	r3,-16(fp)
    6850:	18c00303 	ldbu	r3,12(r3)
    6854:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6858:	e0bffc17 	ldw	r2,-16(fp)
    685c:	10c00504 	addi	r3,r2,20
    6860:	e0bffc17 	ldw	r2,-16(fp)
    6864:	10800417 	ldw	r2,16(r2)
    6868:	100b883a 	mov	r5,r2
    686c:	1809883a 	mov	r4,r3
    6870:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6874:	e0bffc17 	ldw	r2,-16(fp)
    6878:	00c00044 	movi	r3,1
    687c:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    6880:	e0bffc17 	ldw	r2,-16(fp)
    6884:	10800504 	addi	r2,r2,20
    6888:	e1bffe17 	ldw	r6,-8(fp)
    688c:	e17ffd17 	ldw	r5,-12(fp)
    6890:	1009883a 	mov	r4,r2
    6894:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    6898:	1080005c 	xori	r2,r2,1
    689c:	10803fcc 	andi	r2,r2,255
    68a0:	10000226 	beq	r2,zero,68ac <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    68a4:	0005883a 	mov	r2,zero
    68a8:	00006006 	br	6a2c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    68ac:	e0bffc17 	ldw	r2,-16(fp)
    68b0:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    68b4:	e0bffc17 	ldw	r2,-16(fp)
    68b8:	10800417 	ldw	r2,16(r2)
    68bc:	10800003 	ldbu	r2,0(r2)
    68c0:	10803fcc 	andi	r2,r2,255
    68c4:	10800130 	cmpltui	r2,r2,4
    68c8:	10000e1e 	bne	r2,zero,6904 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    68cc:	e0bffc17 	ldw	r2,-16(fp)
    68d0:	10800417 	ldw	r2,16(r2)
    68d4:	10c00043 	ldbu	r3,1(r2)
    68d8:	11000083 	ldbu	r4,2(r2)
    68dc:	2008923a 	slli	r4,r4,8
    68e0:	20c6b03a 	or	r3,r4,r3
    68e4:	110000c3 	ldbu	r4,3(r2)
    68e8:	2008943a 	slli	r4,r4,16
    68ec:	20c6b03a 	or	r3,r4,r3
    68f0:	10800103 	ldbu	r2,4(r2)
    68f4:	1004963a 	slli	r2,r2,24
    68f8:	10c4b03a 	or	r2,r2,r3
    68fc:	10800017 	ldw	r2,0(r2)
    6900:	00000e06 	br	693c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    6904:	e0bffc17 	ldw	r2,-16(fp)
    6908:	10800417 	ldw	r2,16(r2)
    690c:	10c00043 	ldbu	r3,1(r2)
    6910:	11000083 	ldbu	r4,2(r2)
    6914:	2008923a 	slli	r4,r4,8
    6918:	20c6b03a 	or	r3,r4,r3
    691c:	110000c3 	ldbu	r4,3(r2)
    6920:	2008943a 	slli	r4,r4,16
    6924:	20c6b03a 	or	r3,r4,r3
    6928:	10800103 	ldbu	r2,4(r2)
    692c:	1004963a 	slli	r2,r2,24
    6930:	10c4b03a 	or	r2,r2,r3
    6934:	1080000b 	ldhu	r2,0(r2)
    6938:	10bfffcc 	andi	r2,r2,65535
    693c:	e0fffc17 	ldw	r3,-16(fp)
    6940:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6944:	e0bffc17 	ldw	r2,-16(fp)
    6948:	10c00117 	ldw	r3,4(r2)
    694c:	e0bffc17 	ldw	r2,-16(fp)
    6950:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6954:	e0bffc17 	ldw	r2,-16(fp)
    6958:	00c00084 	movi	r3,2
    695c:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    6960:	e0bffc17 	ldw	r2,-16(fp)
    6964:	10800417 	ldw	r2,16(r2)
    6968:	e0fffc17 	ldw	r3,-16(fp)
    696c:	18c00343 	ldbu	r3,13(r3)
    6970:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6974:	e0bffc17 	ldw	r2,-16(fp)
    6978:	10c00504 	addi	r3,r2,20
    697c:	e0bffc17 	ldw	r2,-16(fp)
    6980:	10800417 	ldw	r2,16(r2)
    6984:	100b883a 	mov	r5,r2
    6988:	1809883a 	mov	r4,r3
    698c:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    6990:	e0bffc17 	ldw	r2,-16(fp)
    6994:	00c000c4 	movi	r3,3
    6998:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    699c:	e0bffc17 	ldw	r2,-16(fp)
    69a0:	10800217 	ldw	r2,8(r2)
    69a4:	10001e26 	beq	r2,zero,6a20 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    69a8:	e0bffc17 	ldw	r2,-16(fp)
    69ac:	10800504 	addi	r2,r2,20
    69b0:	e1bffe17 	ldw	r6,-8(fp)
    69b4:	e17ffd17 	ldw	r5,-12(fp)
    69b8:	1009883a 	mov	r4,r2
    69bc:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    69c0:	1080005c 	xori	r2,r2,1
    69c4:	10803fcc 	andi	r2,r2,255
    69c8:	10000226 	beq	r2,zero,69d4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    69cc:	0005883a 	mov	r2,zero
    69d0:	00001606 	br	6a2c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    69d4:	e0bfff17 	ldw	r2,-4(fp)
    69d8:	10000b26 	beq	r2,zero,6a08 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    69dc:	e0bffc17 	ldw	r2,-16(fp)
    69e0:	11000417 	ldw	r4,16(r2)
    69e4:	e0bffc17 	ldw	r2,-16(fp)
    69e8:	10c00117 	ldw	r3,4(r2)
    69ec:	e0bffc17 	ldw	r2,-16(fp)
    69f0:	10800217 	ldw	r2,8(r2)
    69f4:	1887c83a 	sub	r3,r3,r2
    69f8:	e0bfff17 	ldw	r2,-4(fp)
    69fc:	e1800217 	ldw	r6,8(fp)
    6a00:	180b883a 	mov	r5,r3
    6a04:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6a08:	e0bffc17 	ldw	r2,-16(fp)
    6a0c:	10800217 	ldw	r2,8(r2)
    6a10:	10ffffc4 	addi	r3,r2,-1
    6a14:	e0bffc17 	ldw	r2,-16(fp)
    6a18:	10c00215 	stw	r3,8(r2)
    6a1c:	003fdf06 	br	699c <__alt_data_end+0xfc00699c>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    6a20:	e0bffc17 	ldw	r2,-16(fp)
    6a24:	10000005 	stb	zero,0(r2)
        }
        return true;
    6a28:	00800044 	movi	r2,1
}
    6a2c:	e037883a 	mov	sp,fp
    6a30:	dfc00117 	ldw	ra,4(sp)
    6a34:	df000017 	ldw	fp,0(sp)
    6a38:	dec00204 	addi	sp,sp,8
    6a3c:	f800283a 	ret

00006a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    6a40:	defff904 	addi	sp,sp,-28
    6a44:	dfc00615 	stw	ra,24(sp)
    6a48:	df000515 	stw	fp,20(sp)
    6a4c:	df000504 	addi	fp,sp,20
    6a50:	e13ffd15 	stw	r4,-12(fp)
    6a54:	2807883a 	mov	r3,r5
    6a58:	3005883a 	mov	r2,r6
    6a5c:	e0fffe05 	stb	r3,-8(fp)
    6a60:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6a64:	e0bfff0b 	ldhu	r2,-4(fp)
    6a68:	1005d23a 	srai	r2,r2,8
    6a6c:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    6a70:	e0bfff0b 	ldhu	r2,-4(fp)
    6a74:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6a78:	e03ffb8d 	sth	zero,-18(fp)
    6a7c:	e03ffc0d 	sth	zero,-16(fp)
    6a80:	e0bffe03 	ldbu	r2,-8(fp)
    6a84:	e0bffbc5 	stb	r2,-17(fp)
    6a88:	e0bffb03 	ldbu	r2,-20(fp)
    6a8c:	e0bffc05 	stb	r2,-16(fp)
    6a90:	e0bffb43 	ldbu	r2,-19(fp)
    6a94:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6a98:	e0bffb84 	addi	r2,fp,-18
    6a9c:	000f883a 	mov	r7,zero
    6aa0:	01800104 	movi	r6,4
    6aa4:	100b883a 	mov	r5,r2
    6aa8:	e13ffd17 	ldw	r4,-12(fp)
    6aac:	0020be40 	call	20be4 <alt_avalon_i2c_master_tx>
    6ab0:	1004c03a 	cmpne	r2,r2,zero
    6ab4:	10803fcc 	andi	r2,r2,255
    6ab8:	10000426 	beq	r2,zero,6acc <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    6abc:	010000b4 	movhi	r4,2
    6ac0:	2118fe04 	addi	r4,r4,25592
    6ac4:	000f1e00 	call	f1e0 <printf>
	}
	return;
    6ac8:	0001883a 	nop
    6acc:	0001883a 	nop
}
    6ad0:	e037883a 	mov	sp,fp
    6ad4:	dfc00117 	ldw	ra,4(sp)
    6ad8:	df000017 	ldw	fp,0(sp)
    6adc:	dec00204 	addi	sp,sp,8
    6ae0:	f800283a 	ret

00006ae4 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6ae4:	defff604 	addi	sp,sp,-40
    6ae8:	dfc00915 	stw	ra,36(sp)
    6aec:	df000815 	stw	fp,32(sp)
    6af0:	dc000715 	stw	r16,28(sp)
    6af4:	df000804 	addi	fp,sp,32
    6af8:	e13ffb15 	stw	r4,-20(fp)
    6afc:	3009883a 	mov	r4,r6
    6b00:	e1fffe15 	stw	r7,-8(fp)
    6b04:	e17ffc05 	stb	r5,-16(fp)
    6b08:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6b0c:	d809883a 	mov	r4,sp
    6b10:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6b14:	e13ffd03 	ldbu	r4,-12(fp)
    6b18:	21000044 	addi	r4,r4,1
    6b1c:	2109883a 	add	r4,r4,r4
    6b20:	213fffc4 	addi	r4,r4,-1
    6b24:	e13ff915 	stw	r4,-28(fp)
    6b28:	200b883a 	mov	r5,r4
    6b2c:	29400044 	addi	r5,r5,1
    6b30:	2819883a 	mov	r12,r5
    6b34:	001b883a 	mov	r13,zero
    6b38:	600ad77a 	srli	r5,r12,29
    6b3c:	681290fa 	slli	r9,r13,3
    6b40:	2a52b03a 	or	r9,r5,r9
    6b44:	601090fa 	slli	r8,r12,3
    6b48:	200b883a 	mov	r5,r4
    6b4c:	29400044 	addi	r5,r5,1
    6b50:	2815883a 	mov	r10,r5
    6b54:	0017883a 	mov	r11,zero
    6b58:	500ad77a 	srli	r5,r10,29
    6b5c:	580690fa 	slli	r3,r11,3
    6b60:	28c6b03a 	or	r3,r5,r3
    6b64:	500490fa 	slli	r2,r10,3
    6b68:	2005883a 	mov	r2,r4
    6b6c:	10800044 	addi	r2,r2,1
    6b70:	108000c4 	addi	r2,r2,3
    6b74:	1004d0ba 	srli	r2,r2,2
    6b78:	1085883a 	add	r2,r2,r2
    6b7c:	1085883a 	add	r2,r2,r2
    6b80:	d8b7c83a 	sub	sp,sp,r2
    6b84:	d805883a 	mov	r2,sp
    6b88:	1005883a 	mov	r2,r2
    6b8c:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    6b90:	e0bffa17 	ldw	r2,-24(fp)
    6b94:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6b98:	e0bffa17 	ldw	r2,-24(fp)
    6b9c:	e0fffc03 	ldbu	r3,-16(fp)
    6ba0:	10c00045 	stb	r3,1(r2)
	int i = 0;
    6ba4:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    6ba8:	e03ff815 	stw	zero,-32(fp)
    6bac:	e0bffd03 	ldbu	r2,-12(fp)
    6bb0:	e0fff817 	ldw	r3,-32(fp)
    6bb4:	18801e0e 	bge	r3,r2,6c30 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    6bb8:	e0bff817 	ldw	r2,-32(fp)
    6bbc:	10c00084 	addi	r3,r2,2
    6bc0:	e0bff817 	ldw	r2,-32(fp)
    6bc4:	1085883a 	add	r2,r2,r2
    6bc8:	1009883a 	mov	r4,r2
    6bcc:	e0bffe17 	ldw	r2,-8(fp)
    6bd0:	1105883a 	add	r2,r2,r4
    6bd4:	1080000b 	ldhu	r2,0(r2)
    6bd8:	10bfffcc 	andi	r2,r2,65535
    6bdc:	1005d23a 	srai	r2,r2,8
    6be0:	1009883a 	mov	r4,r2
    6be4:	e0bffa17 	ldw	r2,-24(fp)
    6be8:	10c5883a 	add	r2,r2,r3
    6bec:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    6bf0:	e0bff817 	ldw	r2,-32(fp)
    6bf4:	10c000c4 	addi	r3,r2,3
    6bf8:	e0bff817 	ldw	r2,-32(fp)
    6bfc:	1085883a 	add	r2,r2,r2
    6c00:	1009883a 	mov	r4,r2
    6c04:	e0bffe17 	ldw	r2,-8(fp)
    6c08:	1105883a 	add	r2,r2,r4
    6c0c:	1080000b 	ldhu	r2,0(r2)
    6c10:	1009883a 	mov	r4,r2
    6c14:	e0bffa17 	ldw	r2,-24(fp)
    6c18:	10c5883a 	add	r2,r2,r3
    6c1c:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    6c20:	e0bff817 	ldw	r2,-32(fp)
    6c24:	10800044 	addi	r2,r2,1
    6c28:	e0bff815 	stw	r2,-32(fp)
    6c2c:	003fdf06 	br	6bac <__alt_data_end+0xfc006bac>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6c30:	e0fffa17 	ldw	r3,-24(fp)
    6c34:	e0bffd03 	ldbu	r2,-12(fp)
    6c38:	10800044 	addi	r2,r2,1
    6c3c:	1085883a 	add	r2,r2,r2
    6c40:	000f883a 	mov	r7,zero
    6c44:	100d883a 	mov	r6,r2
    6c48:	180b883a 	mov	r5,r3
    6c4c:	e13ffb17 	ldw	r4,-20(fp)
    6c50:	0020be40 	call	20be4 <alt_avalon_i2c_master_tx>
    6c54:	1004c03a 	cmpne	r2,r2,zero
    6c58:	10803fcc 	andi	r2,r2,255
    6c5c:	10000326 	beq	r2,zero,6c6c <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    6c60:	010000b4 	movhi	r4,2
    6c64:	21190504 	addi	r4,r4,25620
    6c68:	000f1e00 	call	f1e0 <printf>
	}
	return (data+nwords);
    6c6c:	e0bffd03 	ldbu	r2,-12(fp)
    6c70:	1085883a 	add	r2,r2,r2
    6c74:	1007883a 	mov	r3,r2
    6c78:	e0bffe17 	ldw	r2,-8(fp)
    6c7c:	10c5883a 	add	r2,r2,r3
    6c80:	8037883a 	mov	sp,r16
}
    6c84:	e6ffff04 	addi	sp,fp,-4
    6c88:	dfc00217 	ldw	ra,8(sp)
    6c8c:	df000117 	ldw	fp,4(sp)
    6c90:	dc000017 	ldw	r16,0(sp)
    6c94:	dec00304 	addi	sp,sp,12
    6c98:	f800283a 	ret

00006c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6c9c:	defff804 	addi	sp,sp,-32
    6ca0:	dfc00715 	stw	ra,28(sp)
    6ca4:	df000615 	stw	fp,24(sp)
    6ca8:	df000604 	addi	fp,sp,24
    6cac:	e13ffe15 	stw	r4,-8(fp)
    6cb0:	2805883a 	mov	r2,r5
    6cb4:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    6cb8:	e03ffc8d 	sth	zero,-14(fp)
    6cbc:	e0bfff03 	ldbu	r2,-4(fp)
    6cc0:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    6cc4:	e03ffd05 	stb	zero,-12(fp)
    6cc8:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6ccc:	e13ffd04 	addi	r4,fp,-12
    6cd0:	e0fffc84 	addi	r3,fp,-14
    6cd4:	d8000115 	stw	zero,4(sp)
    6cd8:	00800084 	movi	r2,2
    6cdc:	d8800015 	stw	r2,0(sp)
    6ce0:	200f883a 	mov	r7,r4
    6ce4:	01800084 	movi	r6,2
    6ce8:	180b883a 	mov	r5,r3
    6cec:	e13ffe17 	ldw	r4,-8(fp)
    6cf0:	0020e080 	call	20e08 <alt_avalon_i2c_master_tx_rx>
    6cf4:	1004c03a 	cmpne	r2,r2,zero
    6cf8:	10803fcc 	andi	r2,r2,255
    6cfc:	10000326 	beq	r2,zero,6d0c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    6d00:	010000b4 	movhi	r4,2
    6d04:	21190b04 	addi	r4,r4,25644
    6d08:	000f1e00 	call	f1e0 <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6d0c:	e0bffd03 	ldbu	r2,-12(fp)
    6d10:	10803fcc 	andi	r2,r2,255
    6d14:	1004923a 	slli	r2,r2,8
    6d18:	1007883a 	mov	r3,r2
    6d1c:	e0bffd43 	ldbu	r2,-11(fp)
    6d20:	10803fcc 	andi	r2,r2,255
    6d24:	1884b03a 	or	r2,r3,r2
    6d28:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6d2c:	e0bffc0b 	ldhu	r2,-16(fp)
}
    6d30:	e037883a 	mov	sp,fp
    6d34:	dfc00117 	ldw	ra,4(sp)
    6d38:	df000017 	ldw	fp,0(sp)
    6d3c:	dec00204 	addi	sp,sp,8
    6d40:	f800283a 	ret

00006d44 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6d44:	defff304 	addi	sp,sp,-52
    6d48:	dfc00c15 	stw	ra,48(sp)
    6d4c:	df000b15 	stw	fp,44(sp)
    6d50:	dc000a15 	stw	r16,40(sp)
    6d54:	df000b04 	addi	fp,sp,44
    6d58:	e13ffb15 	stw	r4,-20(fp)
    6d5c:	3009883a 	mov	r4,r6
    6d60:	e1fffe15 	stw	r7,-8(fp)
    6d64:	e17ffc05 	stb	r5,-16(fp)
    6d68:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6d6c:	d809883a 	mov	r4,sp
    6d70:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6d74:	e03ffa0d 	sth	zero,-24(fp)
    6d78:	e13ffc03 	ldbu	r4,-16(fp)
    6d7c:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    6d80:	e13ffd03 	ldbu	r4,-12(fp)
    6d84:	2109883a 	add	r4,r4,r4
    6d88:	213fffc4 	addi	r4,r4,-1
    6d8c:	e13ff815 	stw	r4,-32(fp)
    6d90:	200b883a 	mov	r5,r4
    6d94:	29400044 	addi	r5,r5,1
    6d98:	2819883a 	mov	r12,r5
    6d9c:	001b883a 	mov	r13,zero
    6da0:	600ad77a 	srli	r5,r12,29
    6da4:	681290fa 	slli	r9,r13,3
    6da8:	2a52b03a 	or	r9,r5,r9
    6dac:	601090fa 	slli	r8,r12,3
    6db0:	200b883a 	mov	r5,r4
    6db4:	29400044 	addi	r5,r5,1
    6db8:	2815883a 	mov	r10,r5
    6dbc:	0017883a 	mov	r11,zero
    6dc0:	500ad77a 	srli	r5,r10,29
    6dc4:	580690fa 	slli	r3,r11,3
    6dc8:	28c6b03a 	or	r3,r5,r3
    6dcc:	500490fa 	slli	r2,r10,3
    6dd0:	2005883a 	mov	r2,r4
    6dd4:	10800044 	addi	r2,r2,1
    6dd8:	108000c4 	addi	r2,r2,3
    6ddc:	1004d0ba 	srli	r2,r2,2
    6de0:	1085883a 	add	r2,r2,r2
    6de4:	1085883a 	add	r2,r2,r2
    6de8:	d8b7c83a 	sub	sp,sp,r2
    6dec:	d8800204 	addi	r2,sp,8
    6df0:	1005883a 	mov	r2,r2
    6df4:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    6df8:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    6dfc:	e0fff917 	ldw	r3,-28(fp)
    6e00:	e0bffd03 	ldbu	r2,-12(fp)
    6e04:	1085883a 	add	r2,r2,r2
    6e08:	1009883a 	mov	r4,r2
    6e0c:	e0bffa04 	addi	r2,fp,-24
    6e10:	d8000115 	stw	zero,4(sp)
    6e14:	d9000015 	stw	r4,0(sp)
    6e18:	180f883a 	mov	r7,r3
    6e1c:	01800084 	movi	r6,2
    6e20:	100b883a 	mov	r5,r2
    6e24:	e13ffb17 	ldw	r4,-20(fp)
    6e28:	0020e080 	call	20e08 <alt_avalon_i2c_master_tx_rx>
    6e2c:	1004c03a 	cmpne	r2,r2,zero
    6e30:	10803fcc 	andi	r2,r2,255
    6e34:	10000326 	beq	r2,zero,6e44 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6e38:	010000b4 	movhi	r4,2
    6e3c:	21191104 	addi	r4,r4,25668
    6e40:	000f1e00 	call	f1e0 <printf>
	}
	for(i = 0; i < nwords; i++) {
    6e44:	e03ff715 	stw	zero,-36(fp)
    6e48:	e0bffd03 	ldbu	r2,-12(fp)
    6e4c:	e0fff717 	ldw	r3,-36(fp)
    6e50:	18801b0e 	bge	r3,r2,6ec0 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6e54:	e0bff717 	ldw	r2,-36(fp)
    6e58:	1085883a 	add	r2,r2,r2
    6e5c:	1007883a 	mov	r3,r2
    6e60:	e0bffe17 	ldw	r2,-8(fp)
    6e64:	10c7883a 	add	r3,r2,r3
    6e68:	e0bff717 	ldw	r2,-36(fp)
    6e6c:	1085883a 	add	r2,r2,r2
    6e70:	1009883a 	mov	r4,r2
    6e74:	e0bff917 	ldw	r2,-28(fp)
    6e78:	1105883a 	add	r2,r2,r4
    6e7c:	10800003 	ldbu	r2,0(r2)
    6e80:	10803fcc 	andi	r2,r2,255
    6e84:	1004923a 	slli	r2,r2,8
    6e88:	100b883a 	mov	r5,r2
    6e8c:	e0bff717 	ldw	r2,-36(fp)
    6e90:	1085883a 	add	r2,r2,r2
    6e94:	10800044 	addi	r2,r2,1
    6e98:	e13ff917 	ldw	r4,-28(fp)
    6e9c:	2085883a 	add	r2,r4,r2
    6ea0:	10800003 	ldbu	r2,0(r2)
    6ea4:	10803fcc 	andi	r2,r2,255
    6ea8:	2884b03a 	or	r2,r5,r2
    6eac:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6eb0:	e0bff717 	ldw	r2,-36(fp)
    6eb4:	10800044 	addi	r2,r2,1
    6eb8:	e0bff715 	stw	r2,-36(fp)
    6ebc:	003fe206 	br	6e48 <__alt_data_end+0xfc006e48>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6ec0:	e0bffd03 	ldbu	r2,-12(fp)
    6ec4:	1085883a 	add	r2,r2,r2
    6ec8:	1007883a 	mov	r3,r2
    6ecc:	e0bffe17 	ldw	r2,-8(fp)
    6ed0:	10c5883a 	add	r2,r2,r3
    6ed4:	8037883a 	mov	sp,r16
}
    6ed8:	e6ffff04 	addi	sp,fp,-4
    6edc:	dfc00217 	ldw	ra,8(sp)
    6ee0:	df000117 	ldw	fp,4(sp)
    6ee4:	dc000017 	ldw	r16,0(sp)
    6ee8:	dec00304 	addi	sp,sp,12
    6eec:	f800283a 	ret

00006ef0 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6ef0:	defffd04 	addi	sp,sp,-12
    6ef4:	dfc00215 	stw	ra,8(sp)
    6ef8:	df000115 	stw	fp,4(sp)
    6efc:	df000104 	addi	fp,sp,4
    6f00:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6f04:	01400284 	movi	r5,10
    6f08:	e13fff17 	ldw	r4,-4(fp)
    6f0c:	00209dc0 	call	209dc <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6f10:	01902f04 	movi	r6,16572
    6f14:	01400c04 	movi	r5,48
    6f18:	e13fff17 	ldw	r4,-4(fp)
    6f1c:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6f20:	01801384 	movi	r6,78
    6f24:	01400a04 	movi	r5,40
    6f28:	e13fff17 	ldw	r4,-4(fp)
    6f2c:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6f30:	01800844 	movi	r6,33
    6f34:	01400084 	movi	r5,2
    6f38:	e13fff17 	ldw	r4,-4(fp)
    6f3c:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6f40:	01800104 	movi	r6,4
    6f44:	01400104 	movi	r5,4
    6f48:	e13fff17 	ldw	r4,-4(fp)
    6f4c:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_24);
    6f50:	01800404 	movi	r6,16
    6f54:	01400184 	movi	r5,6
    6f58:	e13fff17 	ldw	r4,-4(fp)
    6f5c:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6f60:	01800404 	movi	r6,16
    6f64:	01400284 	movi	r5,10
    6f68:	e13fff17 	ldw	r4,-4(fp)
    6f6c:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6f70:	0001883a 	nop
    6f74:	e037883a 	mov	sp,fp
    6f78:	dfc00117 	ldw	ra,4(sp)
    6f7c:	df000017 	ldw	fp,0(sp)
    6f80:	dec00204 	addi	sp,sp,8
    6f84:	f800283a 	ret

00006f88 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6f88:	defffd04 	addi	sp,sp,-12
    6f8c:	dfc00215 	stw	ra,8(sp)
    6f90:	df000115 	stw	fp,4(sp)
    6f94:	df000104 	addi	fp,sp,4
    6f98:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6f9c:	01901004 	movi	r6,16448
    6fa0:	01400884 	movi	r5,34
    6fa4:	e13fff17 	ldw	r4,-4(fp)
    6fa8:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6fac:	019c1c04 	movi	r6,28784
    6fb0:	01400404 	movi	r5,16
    6fb4:	e13fff17 	ldw	r4,-4(fp)
    6fb8:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6fbc:	01808004 	movi	r6,512
    6fc0:	01400384 	movi	r5,14
    6fc4:	e13fff17 	ldw	r4,-4(fp)
    6fc8:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6fcc:	01804044 	movi	r6,257
    6fd0:	01400904 	movi	r5,36
    6fd4:	e13fff17 	ldw	r4,-4(fp)
    6fd8:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6fdc:	0001883a 	nop
    6fe0:	e037883a 	mov	sp,fp
    6fe4:	dfc00117 	ldw	ra,4(sp)
    6fe8:	df000017 	ldw	fp,0(sp)
    6fec:	dec00204 	addi	sp,sp,8
    6ff0:	f800283a 	ret

00006ff4 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6ff4:	defffd04 	addi	sp,sp,-12
    6ff8:	dfc00215 	stw	ra,8(sp)
    6ffc:	df000115 	stw	fp,4(sp)
    7000:	df000104 	addi	fp,sp,4
    7004:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    7008:	000b883a 	mov	r5,zero
    700c:	e13fff17 	ldw	r4,-4(fp)
    7010:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7014:	10bfffcc 	andi	r2,r2,65535
    7018:	100b883a 	mov	r5,r2
    701c:	010000b4 	movhi	r4,2
    7020:	21191704 	addi	r4,r4,25692
    7024:	000f1e00 	call	f1e0 <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    7028:	01400084 	movi	r5,2
    702c:	e13fff17 	ldw	r4,-4(fp)
    7030:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7034:	10bfffcc 	andi	r2,r2,65535
    7038:	100b883a 	mov	r5,r2
    703c:	010000b4 	movhi	r4,2
    7040:	21191a04 	addi	r4,r4,25704
    7044:	000f1e00 	call	f1e0 <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    7048:	01400104 	movi	r5,4
    704c:	e13fff17 	ldw	r4,-4(fp)
    7050:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7054:	10bfffcc 	andi	r2,r2,65535
    7058:	100b883a 	mov	r5,r2
    705c:	010000b4 	movhi	r4,2
    7060:	21191f04 	addi	r4,r4,25724
    7064:	000f1e00 	call	f1e0 <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    7068:	01400184 	movi	r5,6
    706c:	e13fff17 	ldw	r4,-4(fp)
    7070:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7074:	10bfffcc 	andi	r2,r2,65535
    7078:	100b883a 	mov	r5,r2
    707c:	010000b4 	movhi	r4,2
    7080:	21192404 	addi	r4,r4,25744
    7084:	000f1e00 	call	f1e0 <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    7088:	01400284 	movi	r5,10
    708c:	e13fff17 	ldw	r4,-4(fp)
    7090:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7094:	10bfffcc 	andi	r2,r2,65535
    7098:	100b883a 	mov	r5,r2
    709c:	010000b4 	movhi	r4,2
    70a0:	21192904 	addi	r4,r4,25764
    70a4:	000f1e00 	call	f1e0 <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    70a8:	01400c04 	movi	r5,48
    70ac:	e13fff17 	ldw	r4,-4(fp)
    70b0:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70b4:	10bfffcc 	andi	r2,r2,65535
    70b8:	100b883a 	mov	r5,r2
    70bc:	010000b4 	movhi	r4,2
    70c0:	21192e04 	addi	r4,r4,25784
    70c4:	000f1e00 	call	f1e0 <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    70c8:	01400384 	movi	r5,14
    70cc:	e13fff17 	ldw	r4,-4(fp)
    70d0:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70d4:	10bfffcc 	andi	r2,r2,65535
    70d8:	100b883a 	mov	r5,r2
    70dc:	010000b4 	movhi	r4,2
    70e0:	21193304 	addi	r4,r4,25804
    70e4:	000f1e00 	call	f1e0 <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    70e8:	01400904 	movi	r5,36
    70ec:	e13fff17 	ldw	r4,-4(fp)
    70f0:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    70f4:	10bfffcc 	andi	r2,r2,65535
    70f8:	100b883a 	mov	r5,r2
    70fc:	010000b4 	movhi	r4,2
    7100:	21193804 	addi	r4,r4,25824
    7104:	000f1e00 	call	f1e0 <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    7108:	01400e04 	movi	r5,56
    710c:	e13fff17 	ldw	r4,-4(fp)
    7110:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7114:	10bfffcc 	andi	r2,r2,65535
    7118:	100b883a 	mov	r5,r2
    711c:	010000b4 	movhi	r4,2
    7120:	21193d04 	addi	r4,r4,25844
    7124:	000f1e00 	call	f1e0 <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    7128:	01400804 	movi	r5,32
    712c:	e13fff17 	ldw	r4,-4(fp)
    7130:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7134:	10bfffcc 	andi	r2,r2,65535
    7138:	100b883a 	mov	r5,r2
    713c:	010000b4 	movhi	r4,2
    7140:	21194204 	addi	r4,r4,25864
    7144:	000f1e00 	call	f1e0 <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    7148:	01400404 	movi	r5,16
    714c:	e13fff17 	ldw	r4,-4(fp)
    7150:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7154:	10bfffcc 	andi	r2,r2,65535
    7158:	100b883a 	mov	r5,r2
    715c:	010000b4 	movhi	r4,2
    7160:	21194704 	addi	r4,r4,25884
    7164:	000f1e00 	call	f1e0 <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    7168:	01400884 	movi	r5,34
    716c:	e13fff17 	ldw	r4,-4(fp)
    7170:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7174:	10bfffcc 	andi	r2,r2,65535
    7178:	100b883a 	mov	r5,r2
    717c:	010000b4 	movhi	r4,2
    7180:	21194c04 	addi	r4,r4,25904
    7184:	000f1e00 	call	f1e0 <printf>
}
    7188:	0001883a 	nop
    718c:	e037883a 	mov	sp,fp
    7190:	dfc00117 	ldw	ra,4(sp)
    7194:	df000017 	ldw	fp,0(sp)
    7198:	dec00204 	addi	sp,sp,8
    719c:	f800283a 	ret

000071a0 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000vol_up(ALT_AVALON_I2C_DEV_t* dev) {
    71a0:	defffc04 	addi	sp,sp,-16
    71a4:	dfc00315 	stw	ra,12(sp)
    71a8:	df000215 	stw	fp,8(sp)
    71ac:	df000204 	addi	fp,sp,8
    71b0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    71b4:	01400404 	movi	r5,16
    71b8:	e13fff17 	ldw	r4,-4(fp)
    71bc:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    71c0:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    71c4:	e03ffe0d 	sth	zero,-8(fp)
	printf("Current:	%X\n", current_vol);
    71c8:	e0bffe8b 	ldhu	r2,-6(fp)
    71cc:	100b883a 	mov	r5,r2
    71d0:	010000b4 	movhi	r4,2
    71d4:	21195104 	addi	r4,r4,25924
    71d8:	000f1e00 	call	f1e0 <printf>
	printf("Sum:		%X\n", (current_vol >> 8) + DAC_VOL_STEP);
    71dc:	e0bffe8b 	ldhu	r2,-6(fp)
    71e0:	1005d23a 	srai	r2,r2,8
    71e4:	10800084 	addi	r2,r2,2
    71e8:	100b883a 	mov	r5,r2
    71ec:	010000b4 	movhi	r4,2
    71f0:	21195504 	addi	r4,r4,25940
    71f4:	000f1e00 	call	f1e0 <printf>
	printf("Max:		%X\n", DAC_MAX_VOL);
    71f8:	01400f04 	movi	r5,60
    71fc:	010000b4 	movhi	r4,2
    7200:	21195804 	addi	r4,r4,25952
    7204:	000f1e00 	call	f1e0 <printf>
	if (DAC_MAX_VOL >= ((current_vol >> 8) - DAC_VOL_STEP)) new_vol = (DAC_MAX_VOL << 8) | DAC_MAX_VOL;
    7208:	e0bffe8b 	ldhu	r2,-6(fp)
    720c:	1005d23a 	srai	r2,r2,8
    7210:	10bfff84 	addi	r2,r2,-2
    7214:	10800f48 	cmpgei	r2,r2,61
    7218:	1000031e 	bne	r2,zero,7228 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x88>
    721c:	008f0f04 	movi	r2,15420
    7220:	e0bffe0d 	sth	r2,-8(fp)
    7224:	00000306 	br	7234 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x94>
	else new_vol = current_vol - ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    7228:	e0bffe8b 	ldhu	r2,-6(fp)
    722c:	10bf7f84 	addi	r2,r2,-514
    7230:	e0bffe0d 	sth	r2,-8(fp)
	printf("New:		%X\n", new_vol);
    7234:	e0bffe0b 	ldhu	r2,-8(fp)
    7238:	100b883a 	mov	r5,r2
    723c:	010000b4 	movhi	r4,2
    7240:	21195b04 	addi	r4,r4,25964
    7244:	000f1e00 	call	f1e0 <printf>
	I2Creg_wr(dev, DAC_VOL, new_vol);
    7248:	e0bffe0b 	ldhu	r2,-8(fp)
    724c:	100d883a 	mov	r6,r2
    7250:	01400404 	movi	r5,16
    7254:	e13fff17 	ldw	r4,-4(fp)
    7258:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    725c:	0001883a 	nop
    7260:	e037883a 	mov	sp,fp
    7264:	dfc00117 	ldw	ra,4(sp)
    7268:	df000017 	ldw	fp,0(sp)
    726c:	dec00204 	addi	sp,sp,8
    7270:	f800283a 	ret

00007274 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>:


void SGTL5000vol_down(ALT_AVALON_I2C_DEV_t* dev) {
    7274:	defffc04 	addi	sp,sp,-16
    7278:	dfc00315 	stw	ra,12(sp)
    727c:	df000215 	stw	fp,8(sp)
    7280:	df000204 	addi	fp,sp,8
    7284:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    7288:	01400404 	movi	r5,16
    728c:	e13fff17 	ldw	r4,-4(fp)
    7290:	0006c9c0 	call	6c9c <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    7294:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    7298:	e03ffe0d 	sth	zero,-8(fp)
	if (DAC_MIN_VOL <= ((current_vol >> 8) + DAC_VOL_STEP)) new_vol = (DAC_MIN_VOL << 8) | DAC_MIN_VOL;
    729c:	e0bffe8b 	ldhu	r2,-6(fp)
    72a0:	1005d23a 	srai	r2,r2,8
    72a4:	10800084 	addi	r2,r2,2
    72a8:	10803c10 	cmplti	r2,r2,240
    72ac:	1000031e 	bne	r2,zero,72bc <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x48>
    72b0:	00bc3c04 	movi	r2,-3856
    72b4:	e0bffe0d 	sth	r2,-8(fp)
    72b8:	00000306 	br	72c8 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x54>
	else new_vol = current_vol + ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    72bc:	e0bffe8b 	ldhu	r2,-6(fp)
    72c0:	10808084 	addi	r2,r2,514
    72c4:	e0bffe0d 	sth	r2,-8(fp)
	I2Creg_wr(dev, DAC_VOL, new_vol);
    72c8:	e0bffe0b 	ldhu	r2,-8(fp)
    72cc:	100d883a 	mov	r6,r2
    72d0:	01400404 	movi	r5,16
    72d4:	e13fff17 	ldw	r4,-4(fp)
    72d8:	0006a400 	call	6a40 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    72dc:	0001883a 	nop
    72e0:	e037883a 	mov	sp,fp
    72e4:	dfc00117 	ldw	ra,4(sp)
    72e8:	df000017 	ldw	fp,0(sp)
    72ec:	dec00204 	addi	sp,sp,8
    72f0:	f800283a 	ret

000072f4 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    72f4:	defffb04 	addi	sp,sp,-20
    72f8:	dfc00415 	stw	ra,16(sp)
    72fc:	df000315 	stw	fp,12(sp)
    7300:	df000304 	addi	fp,sp,12
    7304:	e13ffe15 	stw	r4,-8(fp)
    7308:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    730c:	e0bffe17 	ldw	r2,-8(fp)
    7310:	1009883a 	mov	r4,r2
    7314:	0004f640 	call	4f64 <_ZN15USBDeviceConfigC1Ev>
    7318:	e0bffe17 	ldw	r2,-8(fp)
    731c:	10800104 	addi	r2,r2,4
    7320:	1009883a 	mov	r4,r2
    7324:	00091fc0 	call	91fc <_ZN21UsbMidiConfigXtracterC1Ev>
    7328:	008000b4 	movhi	r2,2
    732c:	10996804 	addi	r2,r2,26016
    7330:	e0fffe17 	ldw	r3,-8(fp)
    7334:	18800015 	stw	r2,0(r3)
    7338:	008000b4 	movhi	r2,2
    733c:	10997404 	addi	r2,r2,26064
    7340:	e0fffe17 	ldw	r3,-8(fp)
    7344:	18800115 	stw	r2,4(r3)
    7348:	e0bffe17 	ldw	r2,-8(fp)
    734c:	e0ffff17 	ldw	r3,-4(fp)
    7350:	10c00215 	stw	r3,8(r2)
    7354:	e0bffe17 	ldw	r2,-8(fp)
    7358:	10000305 	stb	zero,12(r2)
    735c:	e0bffe17 	ldw	r2,-8(fp)
    7360:	10000345 	stb	zero,13(r2)
    7364:	e0bffe17 	ldw	r2,-8(fp)
    7368:	10001705 	stb	zero,92(r2)
    736c:	e0bffe17 	ldw	r2,-8(fp)
    7370:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7374:	e03ffd05 	stb	zero,-12(fp)
    7378:	e0bffd03 	ldbu	r2,-12(fp)
    737c:	108000e8 	cmpgeui	r2,r2,3
    7380:	10002d1e 	bne	r2,zero,7438 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    7384:	e0fffd03 	ldbu	r3,-12(fp)
    7388:	e13ffe17 	ldw	r4,-8(fp)
    738c:	1805883a 	mov	r2,r3
    7390:	1085883a 	add	r2,r2,r2
    7394:	10c5883a 	add	r2,r2,r3
    7398:	2085883a 	add	r2,r4,r2
    739c:	108004c4 	addi	r2,r2,19
    73a0:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    73a4:	e13ffd03 	ldbu	r4,-12(fp)
    73a8:	e0bffd03 	ldbu	r2,-12(fp)
    73ac:	10000226 	beq	r2,zero,73b8 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    73b0:	0007883a 	mov	r3,zero
    73b4:	00000106 	br	73bc <_ZN9USBH_MIDIC1EP3USB+0xc8>
    73b8:	00c00204 	movi	r3,8
    73bc:	e17ffe17 	ldw	r5,-8(fp)
    73c0:	2005883a 	mov	r2,r4
    73c4:	1085883a 	add	r2,r2,r2
    73c8:	1105883a 	add	r2,r2,r4
    73cc:	2885883a 	add	r2,r5,r2
    73d0:	10800504 	addi	r2,r2,20
    73d4:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    73d8:	e13ffd03 	ldbu	r4,-12(fp)
    73dc:	e0bffd03 	ldbu	r2,-12(fp)
    73e0:	10000226 	beq	r2,zero,73ec <_ZN9USBH_MIDIC1EP3USB+0xf8>
    73e4:	00c00044 	movi	r3,1
    73e8:	00000106 	br	73f0 <_ZN9USBH_MIDIC1EP3USB+0xfc>
    73ec:	00c003c4 	movi	r3,15
    73f0:	e17ffe17 	ldw	r5,-8(fp)
    73f4:	2005883a 	mov	r2,r4
    73f8:	1085883a 	add	r2,r2,r2
    73fc:	1105883a 	add	r2,r2,r4
    7400:	2885883a 	add	r2,r5,r2
    7404:	10800404 	addi	r2,r2,16
    7408:	18c7883a 	add	r3,r3,r3
    740c:	18cb883a 	add	r5,r3,r3
    7410:	10c00143 	ldbu	r3,5(r2)
    7414:	18c000cc 	andi	r3,r3,3
    7418:	1809883a 	mov	r4,r3
    741c:	2807883a 	mov	r3,r5
    7420:	20c6b03a 	or	r3,r4,r3
    7424:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7428:	e0bffd03 	ldbu	r2,-12(fp)
    742c:	10800044 	addi	r2,r2,1
    7430:	e0bffd05 	stb	r2,-12(fp)
    7434:	003fd006 	br	7378 <__alt_data_end+0xfc007378>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    7438:	e0bffe17 	ldw	r2,-8(fp)
    743c:	10800217 	ldw	r2,8(r2)
    7440:	10000626 	beq	r2,zero,745c <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7444:	e0bffe17 	ldw	r2,-8(fp)
    7448:	10800217 	ldw	r2,8(r2)
    744c:	e0fffe17 	ldw	r3,-8(fp)
    7450:	180b883a 	mov	r5,r3
    7454:	1009883a 	mov	r4,r2
    7458:	0004d180 	call	4d18 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    745c:	0001883a 	nop
    7460:	e037883a 	mov	sp,fp
    7464:	dfc00117 	ldw	ra,4(sp)
    7468:	df000017 	ldw	fp,0(sp)
    746c:	dec00204 	addi	sp,sp,8
    7470:	f800283a 	ret

00007474 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    7474:	deffe004 	addi	sp,sp,-128
    7478:	dfc01f15 	stw	ra,124(sp)
    747c:	df001e15 	stw	fp,120(sp)
    7480:	df001e04 	addi	fp,sp,120
    7484:	e13ffc15 	stw	r4,-16(fp)
    7488:	2809883a 	mov	r4,r5
    748c:	3007883a 	mov	r3,r6
    7490:	3805883a 	mov	r2,r7
    7494:	e13ffd05 	stb	r4,-12(fp)
    7498:	e0fffe05 	stb	r3,-8(fp)
    749c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    74a0:	e0bfe944 	addi	r2,fp,-91
    74a4:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    74a8:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    74ac:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    74b0:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    74b4:	00800044 	movi	r2,1
    74b8:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    74bc:	00800044 	movi	r2,1
    74c0:	e0bfe3c5 	stb	r2,-113(fp)
    74c4:	e0bfe3c3 	ldbu	r2,-113(fp)
    74c8:	108000e8 	cmpgeui	r2,r2,3
    74cc:	10001a1e 	bne	r2,zero,7538 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    74d0:	e0ffe3c3 	ldbu	r3,-113(fp)
    74d4:	e13ffc17 	ldw	r4,-16(fp)
    74d8:	1805883a 	mov	r2,r3
    74dc:	1085883a 	add	r2,r2,r2
    74e0:	10c5883a 	add	r2,r2,r3
    74e4:	2085883a 	add	r2,r4,r2
    74e8:	10800404 	addi	r2,r2,16
    74ec:	11000143 	ldbu	r4,5(r2)
    74f0:	00ffff84 	movi	r3,-2
    74f4:	20c6703a 	and	r3,r4,r3
    74f8:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    74fc:	e0ffe3c3 	ldbu	r3,-113(fp)
    7500:	e13ffc17 	ldw	r4,-16(fp)
    7504:	1805883a 	mov	r2,r3
    7508:	1085883a 	add	r2,r2,r2
    750c:	10c5883a 	add	r2,r2,r3
    7510:	2085883a 	add	r2,r4,r2
    7514:	10800404 	addi	r2,r2,16
    7518:	11000143 	ldbu	r4,5(r2)
    751c:	00ffff44 	movi	r3,-3
    7520:	20c6703a 	and	r3,r4,r3
    7524:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7528:	e0bfe3c3 	ldbu	r2,-113(fp)
    752c:	10800044 	addi	r2,r2,1
    7530:	e0bfe3c5 	stb	r2,-113(fp)
    7534:	003fe306 	br	74c4 <__alt_data_end+0xfc0074c4>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7538:	e0bffc17 	ldw	r2,-16(fp)
    753c:	10800217 	ldw	r2,8(r2)
    7540:	1009883a 	mov	r4,r2
    7544:	0002cf40 	call	2cf4 <_ZN3USB14GetAddressPoolEv>
    7548:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    754c:	e0bffc17 	ldw	r2,-16(fp)
    7550:	10800303 	ldbu	r2,12(r2)
    7554:	10803fcc 	andi	r2,r2,255
    7558:	10000226 	beq	r2,zero,7564 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    755c:	00bff644 	movi	r2,-39
    7560:	0001c706 	br	7c80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7564:	e0bfe817 	ldw	r2,-96(fp)
    7568:	10800017 	ldw	r2,0(r2)
    756c:	10800017 	ldw	r2,0(r2)
    7570:	e0fffc17 	ldw	r3,-16(fp)
    7574:	18c00303 	ldbu	r3,12(r3)
    7578:	18c03fcc 	andi	r3,r3,255
    757c:	180b883a 	mov	r5,r3
    7580:	e13fe817 	ldw	r4,-96(fp)
    7584:	103ee83a 	callr	r2
    7588:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    758c:	e0bfe617 	ldw	r2,-104(fp)
    7590:	1000021e 	bne	r2,zero,759c <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7594:	00bff584 	movi	r2,-42
    7598:	0001b906 	br	7c80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    759c:	e0bfe617 	ldw	r2,-104(fp)
    75a0:	10c00003 	ldbu	r3,0(r2)
    75a4:	11000043 	ldbu	r4,1(r2)
    75a8:	2008923a 	slli	r4,r4,8
    75ac:	20c6b03a 	or	r3,r4,r3
    75b0:	11000083 	ldbu	r4,2(r2)
    75b4:	2008943a 	slli	r4,r4,16
    75b8:	20c6b03a 	or	r3,r4,r3
    75bc:	108000c3 	ldbu	r2,3(r2)
    75c0:	1004963a 	slli	r2,r2,24
    75c4:	10c4b03a 	or	r2,r2,r3
    75c8:	1000021e 	bne	r2,zero,75d4 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    75cc:	00bff5c4 	movi	r2,-41
    75d0:	0001ab06 	br	7c80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    75d4:	e0bfe617 	ldw	r2,-104(fp)
    75d8:	10c00003 	ldbu	r3,0(r2)
    75dc:	11000043 	ldbu	r4,1(r2)
    75e0:	2008923a 	slli	r4,r4,8
    75e4:	20c6b03a 	or	r3,r4,r3
    75e8:	11000083 	ldbu	r4,2(r2)
    75ec:	2008943a 	slli	r4,r4,16
    75f0:	20c6b03a 	or	r3,r4,r3
    75f4:	108000c3 	ldbu	r2,3(r2)
    75f8:	1004963a 	slli	r2,r2,24
    75fc:	10c4b03a 	or	r2,r2,r3
    7600:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7604:	e0bffc17 	ldw	r2,-16(fp)
    7608:	10c004c4 	addi	r3,r2,19
    760c:	e0bfe617 	ldw	r2,-104(fp)
    7610:	19803fcc 	andi	r6,r3,255
    7614:	11000003 	ldbu	r4,0(r2)
    7618:	2008703a 	and	r4,r4,zero
    761c:	200b883a 	mov	r5,r4
    7620:	3009883a 	mov	r4,r6
    7624:	2908b03a 	or	r4,r5,r4
    7628:	11000005 	stb	r4,0(r2)
    762c:	1808d23a 	srli	r4,r3,8
    7630:	21803fcc 	andi	r6,r4,255
    7634:	11000043 	ldbu	r4,1(r2)
    7638:	2008703a 	and	r4,r4,zero
    763c:	200b883a 	mov	r5,r4
    7640:	3009883a 	mov	r4,r6
    7644:	2908b03a 	or	r4,r5,r4
    7648:	11000045 	stb	r4,1(r2)
    764c:	1808d43a 	srli	r4,r3,16
    7650:	21803fcc 	andi	r6,r4,255
    7654:	11000083 	ldbu	r4,2(r2)
    7658:	2008703a 	and	r4,r4,zero
    765c:	200b883a 	mov	r5,r4
    7660:	3009883a 	mov	r4,r6
    7664:	2908b03a 	or	r4,r5,r4
    7668:	11000085 	stb	r4,2(r2)
    766c:	180ad63a 	srli	r5,r3,24
    7670:	10c000c3 	ldbu	r3,3(r2)
    7674:	1806703a 	and	r3,r3,zero
    7678:	1809883a 	mov	r4,r3
    767c:	2807883a 	mov	r3,r5
    7680:	20c6b03a 	or	r3,r4,r3
    7684:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    7688:	e0bfe617 	ldw	r2,-104(fp)
    768c:	e0ffff03 	ldbu	r3,-4(fp)
    7690:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    7694:	e0bffc17 	ldw	r2,-16(fp)
    7698:	10c00217 	ldw	r3,8(r2)
    769c:	e0bfe944 	addi	r2,fp,-91
    76a0:	d8800015 	stw	r2,0(sp)
    76a4:	01c00204 	movi	r7,8
    76a8:	000d883a 	mov	r6,zero
    76ac:	000b883a 	mov	r5,zero
    76b0:	1809883a 	mov	r4,r3
    76b4:	00029200 	call	2920 <_ZN3USB11getDevDescrEhhtPh>
    76b8:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    76bc:	e0bfe617 	ldw	r2,-104(fp)
    76c0:	e0ffe717 	ldw	r3,-100(fp)
    76c4:	19403fcc 	andi	r5,r3,255
    76c8:	10c00003 	ldbu	r3,0(r2)
    76cc:	1806703a 	and	r3,r3,zero
    76d0:	1809883a 	mov	r4,r3
    76d4:	2807883a 	mov	r3,r5
    76d8:	20c6b03a 	or	r3,r4,r3
    76dc:	10c00005 	stb	r3,0(r2)
    76e0:	e0ffe717 	ldw	r3,-100(fp)
    76e4:	1806d23a 	srli	r3,r3,8
    76e8:	19403fcc 	andi	r5,r3,255
    76ec:	10c00043 	ldbu	r3,1(r2)
    76f0:	1806703a 	and	r3,r3,zero
    76f4:	1809883a 	mov	r4,r3
    76f8:	2807883a 	mov	r3,r5
    76fc:	20c6b03a 	or	r3,r4,r3
    7700:	10c00045 	stb	r3,1(r2)
    7704:	e0ffe717 	ldw	r3,-100(fp)
    7708:	1806d43a 	srli	r3,r3,16
    770c:	19403fcc 	andi	r5,r3,255
    7710:	10c00083 	ldbu	r3,2(r2)
    7714:	1806703a 	and	r3,r3,zero
    7718:	1809883a 	mov	r4,r3
    771c:	2807883a 	mov	r3,r5
    7720:	20c6b03a 	or	r3,r4,r3
    7724:	10c00085 	stb	r3,2(r2)
    7728:	e0ffe717 	ldw	r3,-100(fp)
    772c:	180ad63a 	srli	r5,r3,24
    7730:	10c000c3 	ldbu	r3,3(r2)
    7734:	1806703a 	and	r3,r3,zero
    7738:	1809883a 	mov	r4,r3
    773c:	2807883a 	mov	r3,r5
    7740:	20c6b03a 	or	r3,r4,r3
    7744:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7748:	e0bfe303 	ldbu	r2,-116(fp)
    774c:	10013a1e 	bne	r2,zero,7c38 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    7750:	e0bfe817 	ldw	r2,-96(fp)
    7754:	10800017 	ldw	r2,0(r2)
    7758:	10800104 	addi	r2,r2,4
    775c:	10800017 	ldw	r2,0(r2)
    7760:	e0fffd03 	ldbu	r3,-12(fp)
    7764:	e13ffe03 	ldbu	r4,-8(fp)
    7768:	200f883a 	mov	r7,r4
    776c:	000d883a 	mov	r6,zero
    7770:	180b883a 	mov	r5,r3
    7774:	e13fe817 	ldw	r4,-96(fp)
    7778:	103ee83a 	callr	r2
    777c:	1007883a 	mov	r3,r2
    7780:	e0bffc17 	ldw	r2,-16(fp)
    7784:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    7788:	e0bffc17 	ldw	r2,-16(fp)
    778c:	10800303 	ldbu	r2,12(r2)
    7790:	10803fcc 	andi	r2,r2,255
    7794:	1000021e 	bne	r2,zero,77a0 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    7798:	00bff504 	movi	r2,-44
    779c:	00013806 	br	7c80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    77a0:	e0bfe517 	ldw	r2,-108(fp)
    77a4:	10c001c3 	ldbu	r3,7(r2)
    77a8:	e0bffc17 	ldw	r2,-16(fp)
    77ac:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    77b0:	e0bffc17 	ldw	r2,-16(fp)
    77b4:	10c00217 	ldw	r3,8(r2)
    77b8:	e0bffc17 	ldw	r2,-16(fp)
    77bc:	10800303 	ldbu	r2,12(r2)
    77c0:	10803fcc 	andi	r2,r2,255
    77c4:	100f883a 	mov	r7,r2
    77c8:	000d883a 	mov	r6,zero
    77cc:	000b883a 	mov	r5,zero
    77d0:	1809883a 	mov	r4,r3
    77d4:	0002bdc0 	call	2bdc <_ZN3USB7setAddrEhhh>
    77d8:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    77dc:	e0bfe303 	ldbu	r2,-116(fp)
    77e0:	10001026 	beq	r2,zero,7824 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    77e4:	e0bfe617 	ldw	r2,-104(fp)
    77e8:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    77ec:	e0bfe817 	ldw	r2,-96(fp)
    77f0:	10800017 	ldw	r2,0(r2)
    77f4:	10800204 	addi	r2,r2,8
    77f8:	10800017 	ldw	r2,0(r2)
    77fc:	e0fffc17 	ldw	r3,-16(fp)
    7800:	18c00303 	ldbu	r3,12(r3)
    7804:	18c03fcc 	andi	r3,r3,255
    7808:	180b883a 	mov	r5,r3
    780c:	e13fe817 	ldw	r4,-96(fp)
    7810:	103ee83a 	callr	r2
                bAddress = 0;
    7814:	e0bffc17 	ldw	r2,-16(fp)
    7818:	10000305 	stb	zero,12(r2)
                return rcode;
    781c:	e0bfe303 	ldbu	r2,-116(fp)
    7820:	00011706 	br	7c80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7824:	e0bffc17 	ldw	r2,-16(fp)
    7828:	10800303 	ldbu	r2,12(r2)
    782c:	10803fcc 	andi	r2,r2,255
    7830:	01402004 	movi	r5,128
    7834:	1009883a 	mov	r4,r2
    7838:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    783c:	e0bfe617 	ldw	r2,-104(fp)
    7840:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7844:	e0bfe817 	ldw	r2,-96(fp)
    7848:	10800017 	ldw	r2,0(r2)
    784c:	10800017 	ldw	r2,0(r2)
    7850:	e0fffc17 	ldw	r3,-16(fp)
    7854:	18c00303 	ldbu	r3,12(r3)
    7858:	18c03fcc 	andi	r3,r3,255
    785c:	180b883a 	mov	r5,r3
    7860:	e13fe817 	ldw	r4,-96(fp)
    7864:	103ee83a 	callr	r2
    7868:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    786c:	e0bfe617 	ldw	r2,-104(fp)
    7870:	1000021e 	bne	r2,zero,787c <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7874:	00bff584 	movi	r2,-42
    7878:	00010106 	br	7c80 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    787c:	e0bfe617 	ldw	r2,-104(fp)
    7880:	e0ffff03 	ldbu	r3,-4(fp)
    7884:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    7888:	e0bffc17 	ldw	r2,-16(fp)
    788c:	10c00217 	ldw	r3,8(r2)
    7890:	e0bffc17 	ldw	r2,-16(fp)
    7894:	10800303 	ldbu	r2,12(r2)
    7898:	11003fcc 	andi	r4,r2,255
    789c:	00800484 	movi	r2,18
    78a0:	117fffcc 	andi	r5,r2,65535
    78a4:	e0bfe944 	addi	r2,fp,-91
    78a8:	d8800015 	stw	r2,0(sp)
    78ac:	280f883a 	mov	r7,r5
    78b0:	000d883a 	mov	r6,zero
    78b4:	200b883a 	mov	r5,r4
    78b8:	1809883a 	mov	r4,r3
    78bc:	00029200 	call	2920 <_ZN3USB11getDevDescrEhhtPh>
    78c0:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    78c4:	e0bfe303 	ldbu	r2,-116(fp)
    78c8:	1000dd1e 	bne	r2,zero,7c40 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    78cc:	e0bfe517 	ldw	r2,-108(fp)
    78d0:	10c00203 	ldbu	r3,8(r2)
    78d4:	10800243 	ldbu	r2,9(r2)
    78d8:	1004923a 	slli	r2,r2,8
    78dc:	10c4b03a 	or	r2,r2,r3
    78e0:	1007883a 	mov	r3,r2
    78e4:	e0bffc17 	ldw	r2,-16(fp)
    78e8:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    78ec:	e0bfe517 	ldw	r2,-108(fp)
    78f0:	10c00283 	ldbu	r3,10(r2)
    78f4:	108002c3 	ldbu	r2,11(r2)
    78f8:	1004923a 	slli	r2,r2,8
    78fc:	10c4b03a 	or	r2,r2,r3
    7900:	1007883a 	mov	r3,r2
    7904:	e0bffc17 	ldw	r2,-16(fp)
    7908:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    790c:	e0bfe517 	ldw	r2,-108(fp)
    7910:	10800443 	ldbu	r2,17(r2)
    7914:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7918:	e0bffc17 	ldw	r2,-16(fp)
    791c:	10c00217 	ldw	r3,8(r2)
    7920:	e0bffc17 	ldw	r2,-16(fp)
    7924:	10800303 	ldbu	r2,12(r2)
    7928:	11003fcc 	andi	r4,r2,255
    792c:	e0bffc17 	ldw	r2,-16(fp)
    7930:	108004c4 	addi	r2,r2,19
    7934:	100f883a 	mov	r7,r2
    7938:	01800044 	movi	r6,1
    793c:	200b883a 	mov	r5,r4
    7940:	1809883a 	mov	r4,r3
    7944:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7948:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    794c:	e0bfe303 	ldbu	r2,-116(fp)
    7950:	1000bd1e 	bne	r2,zero,7c48 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7954:	e0bffc17 	ldw	r2,-16(fp)
    7958:	1080040b 	ldhu	r2,16(r2)
    795c:	10bfffcc 	andi	r2,r2,65535
    7960:	01402004 	movi	r5,128
    7964:	1009883a 	mov	r4,r2
    7968:	00092300 	call	9230 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    796c:	e0bffc17 	ldw	r2,-16(fp)
    7970:	1080038b 	ldhu	r2,14(r2)
    7974:	10bfffcc 	andi	r2,r2,65535
    7978:	01402004 	movi	r5,128
    797c:	1009883a 	mov	r4,r2
    7980:	00092300 	call	9230 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    7984:	e0bfe903 	ldbu	r2,-92(fp)
    7988:	01402004 	movi	r5,128
    798c:	1009883a 	mov	r4,r2
    7990:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    7994:	e0bffc17 	ldw	r2,-16(fp)
    7998:	00c000c4 	movi	r3,3
    799c:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    79a0:	e13ffc17 	ldw	r4,-16(fp)
    79a4:	0007d0c0 	call	7d0c <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    79a8:	e03fe405 	stb	zero,-112(fp)
    79ac:	e0ffe403 	ldbu	r3,-112(fp)
    79b0:	e0bfe903 	ldbu	r2,-92(fp)
    79b4:	18802a2e 	bgeu	r3,r2,7a60 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    79b8:	e0bffc17 	ldw	r2,-16(fp)
    79bc:	10c00104 	addi	r3,r2,4
    79c0:	e0bfee04 	addi	r2,fp,-72
    79c4:	01800044 	movi	r6,1
    79c8:	180b883a 	mov	r5,r3
    79cc:	1009883a 	mov	r4,r2
    79d0:	000880c0 	call	880c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    79d4:	e0bffc17 	ldw	r2,-16(fp)
    79d8:	10c00217 	ldw	r3,8(r2)
    79dc:	e0bffc17 	ldw	r2,-16(fp)
    79e0:	10800303 	ldbu	r2,12(r2)
    79e4:	11003fcc 	andi	r4,r2,255
    79e8:	e17fe403 	ldbu	r5,-112(fp)
    79ec:	e0bfee04 	addi	r2,fp,-72
    79f0:	d8800015 	stw	r2,0(sp)
    79f4:	280f883a 	mov	r7,r5
    79f8:	000d883a 	mov	r6,zero
    79fc:	200b883a 	mov	r5,r4
    7a00:	1809883a 	mov	r4,r3
    7a04:	0002a3c0 	call	2a3c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7a08:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    7a0c:	e0bfe303 	ldbu	r2,-116(fp)
    7a10:	10008f1e 	bne	r2,zero,7c50 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7a14:	e0bfee04 	addi	r2,fp,-72
    7a18:	1009883a 	mov	r4,r2
    7a1c:	00091180 	call	9118 <_ZN14MidiDescParser9getNumEPsEv>
    7a20:	1007883a 	mov	r3,r2
    7a24:	e0bfe383 	ldbu	r2,-114(fp)
    7a28:	10c5883a 	add	r2,r2,r3
    7a2c:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    7a30:	e0bfe383 	ldbu	r2,-114(fp)
    7a34:	108000b0 	cmpltui	r2,r2,2
    7a38:	1000051e 	bne	r2,zero,7a50 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7a3c:	e0bfee04 	addi	r2,fp,-72
    7a40:	1009883a 	mov	r4,r2
    7a44:	00090f00 	call	90f0 <_ZN14MidiDescParser12getConfValueEv>
    7a48:	e0bfe345 	stb	r2,-115(fp)
    7a4c:	00000406 	br	7a60 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    7a50:	e0bfe403 	ldbu	r2,-112(fp)
    7a54:	10800044 	addi	r2,r2,1
    7a58:	e0bfe405 	stb	r2,-112(fp)
    7a5c:	003fd306 	br	79ac <__alt_data_end+0xfc0079ac>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    7a60:	e0bfe383 	ldbu	r2,-114(fp)
    7a64:	01402004 	movi	r5,128
    7a68:	1009883a 	mov	r4,r2
    7a6c:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    7a70:	e0bfe383 	ldbu	r2,-114(fp)
    7a74:	10800058 	cmpnei	r2,r2,1
    7a78:	1000321e 	bne	r2,zero,7b44 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7a7c:	e03fe445 	stb	zero,-111(fp)
    7a80:	e0ffe443 	ldbu	r3,-111(fp)
    7a84:	e0bfe903 	ldbu	r2,-92(fp)
    7a88:	18802a2e 	bgeu	r3,r2,7b34 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    7a8c:	e0bffc17 	ldw	r2,-16(fp)
    7a90:	10c00104 	addi	r3,r2,4
    7a94:	e0bfee04 	addi	r2,fp,-72
    7a98:	000d883a 	mov	r6,zero
    7a9c:	180b883a 	mov	r5,r3
    7aa0:	1009883a 	mov	r4,r2
    7aa4:	000880c0 	call	880c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    7aa8:	e0bffc17 	ldw	r2,-16(fp)
    7aac:	10c00217 	ldw	r3,8(r2)
    7ab0:	e0bffc17 	ldw	r2,-16(fp)
    7ab4:	10800303 	ldbu	r2,12(r2)
    7ab8:	11003fcc 	andi	r4,r2,255
    7abc:	e17fe443 	ldbu	r5,-111(fp)
    7ac0:	e0bfee04 	addi	r2,fp,-72
    7ac4:	d8800015 	stw	r2,0(sp)
    7ac8:	280f883a 	mov	r7,r5
    7acc:	000d883a 	mov	r6,zero
    7ad0:	200b883a 	mov	r5,r4
    7ad4:	1809883a 	mov	r4,r3
    7ad8:	0002a3c0 	call	2a3c <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7adc:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    7ae0:	e0bfe303 	ldbu	r2,-116(fp)
    7ae4:	10005c1e 	bne	r2,zero,7c58 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    7ae8:	e0bfee04 	addi	r2,fp,-72
    7aec:	1009883a 	mov	r4,r2
    7af0:	00091180 	call	9118 <_ZN14MidiDescParser9getNumEPsEv>
    7af4:	1007883a 	mov	r3,r2
    7af8:	e0bfe383 	ldbu	r2,-114(fp)
    7afc:	10c5883a 	add	r2,r2,r3
    7b00:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7b04:	e0bfe383 	ldbu	r2,-114(fp)
    7b08:	108000b0 	cmpltui	r2,r2,2
    7b0c:	1000051e 	bne	r2,zero,7b24 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    7b10:	e0bfee04 	addi	r2,fp,-72
    7b14:	1009883a 	mov	r4,r2
    7b18:	00090f00 	call	90f0 <_ZN14MidiDescParser12getConfValueEv>
    7b1c:	e0bfe345 	stb	r2,-115(fp)
    7b20:	00000406 	br	7b34 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7b24:	e0bfe443 	ldbu	r2,-111(fp)
    7b28:	10800044 	addi	r2,r2,1
    7b2c:	e0bfe445 	stb	r2,-111(fp)
    7b30:	003fd306 	br	7a80 <__alt_data_end+0xfc007a80>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7b34:	e0bfe383 	ldbu	r2,-114(fp)
    7b38:	01402004 	movi	r5,128
    7b3c:	1009883a 	mov	r4,r2
    7b40:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7b44:	e0bfe383 	ldbu	r2,-114(fp)
    7b48:	108000a8 	cmpgeui	r2,r2,2
    7b4c:	1000031e 	bne	r2,zero,7b5c <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    7b50:	00bfffc4 	movi	r2,-1
    7b54:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7b58:	00004206 	br	7c64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7b5c:	e0bffc17 	ldw	r2,-16(fp)
    7b60:	10c00217 	ldw	r3,8(r2)
    7b64:	e0bffc17 	ldw	r2,-16(fp)
    7b68:	10800303 	ldbu	r2,12(r2)
    7b6c:	11003fcc 	andi	r4,r2,255
    7b70:	e0bffc17 	ldw	r2,-16(fp)
    7b74:	108004c4 	addi	r2,r2,19
    7b78:	100f883a 	mov	r7,r2
    7b7c:	018000c4 	movi	r6,3
    7b80:	200b883a 	mov	r5,r4
    7b84:	1809883a 	mov	r4,r3
    7b88:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7b8c:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    7b90:	e0bfe343 	ldbu	r2,-115(fp)
    7b94:	01402004 	movi	r5,128
    7b98:	1009883a 	mov	r4,r2
    7b9c:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    7ba0:	e0bffc17 	ldw	r2,-16(fp)
    7ba4:	10800583 	ldbu	r2,22(r2)
    7ba8:	10bfe004 	addi	r2,r2,-128
    7bac:	10803fcc 	andi	r2,r2,255
    7bb0:	01402004 	movi	r5,128
    7bb4:	1009883a 	mov	r4,r2
    7bb8:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    7bbc:	e0bffc17 	ldw	r2,-16(fp)
    7bc0:	10800643 	ldbu	r2,25(r2)
    7bc4:	10803fcc 	andi	r2,r2,255
    7bc8:	01402004 	movi	r5,128
    7bcc:	1009883a 	mov	r4,r2
    7bd0:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    7bd4:	e0bffc17 	ldw	r2,-16(fp)
    7bd8:	10c00217 	ldw	r3,8(r2)
    7bdc:	e0bffc17 	ldw	r2,-16(fp)
    7be0:	10800303 	ldbu	r2,12(r2)
    7be4:	10803fcc 	andi	r2,r2,255
    7be8:	e13fe343 	ldbu	r4,-115(fp)
    7bec:	200f883a 	mov	r7,r4
    7bf0:	000d883a 	mov	r6,zero
    7bf4:	100b883a 	mov	r5,r2
    7bf8:	1809883a 	mov	r4,r3
    7bfc:	0002c700 	call	2c70 <_ZN3USB7setConfEhhh>
    7c00:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7c04:	e0bfe303 	ldbu	r2,-116(fp)
    7c08:	1000151e 	bne	r2,zero,7c60 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7c0c:	e0bffc17 	ldw	r2,-16(fp)
    7c10:	10801817 	ldw	r2,96(r2)
    7c14:	10000326 	beq	r2,zero,7c24 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7c18:	e0bffc17 	ldw	r2,-16(fp)
    7c1c:	10801817 	ldw	r2,96(r2)
    7c20:	103ee83a 	callr	r2

        bPollEnable = true;
    7c24:	e0bffc17 	ldw	r2,-16(fp)
    7c28:	00c00044 	movi	r3,1
    7c2c:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    7c30:	0005883a 	mov	r2,zero
    7c34:	00001206 	br	7c80 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7c38:	0001883a 	nop
    7c3c:	00000906 	br	7c64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    7c40:	0001883a 	nop
    7c44:	00000706 	br	7c64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7c48:	0001883a 	nop
    7c4c:	00000506 	br	7c64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    7c50:	0001883a 	nop
    7c54:	00000306 	br	7c64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7c58:	0001883a 	nop
    7c5c:	00000106 	br	7c64 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    7c60:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7c64:	e0bffc17 	ldw	r2,-16(fp)
    7c68:	10800017 	ldw	r2,0(r2)
    7c6c:	10800204 	addi	r2,r2,8
    7c70:	10800017 	ldw	r2,0(r2)
    7c74:	e13ffc17 	ldw	r4,-16(fp)
    7c78:	103ee83a 	callr	r2
        return rcode;
    7c7c:	e0bfe303 	ldbu	r2,-116(fp)
}
    7c80:	e037883a 	mov	sp,fp
    7c84:	dfc00117 	ldw	ra,4(sp)
    7c88:	df000017 	ldw	fp,0(sp)
    7c8c:	dec00204 	addi	sp,sp,8
    7c90:	f800283a 	ret

00007c94 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7c94:	defffd04 	addi	sp,sp,-12
    7c98:	dfc00215 	stw	ra,8(sp)
    7c9c:	df000115 	stw	fp,4(sp)
    7ca0:	df000104 	addi	fp,sp,4
    7ca4:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    7ca8:	e0bfff17 	ldw	r2,-4(fp)
    7cac:	10800217 	ldw	r2,8(r2)
    7cb0:	1009883a 	mov	r4,r2
    7cb4:	0002cf40 	call	2cf4 <_ZN3USB14GetAddressPoolEv>
    7cb8:	1009883a 	mov	r4,r2
    7cbc:	20800017 	ldw	r2,0(r4)
    7cc0:	10800204 	addi	r2,r2,8
    7cc4:	10800017 	ldw	r2,0(r2)
    7cc8:	e0ffff17 	ldw	r3,-4(fp)
    7ccc:	18c00303 	ldbu	r3,12(r3)
    7cd0:	18c03fcc 	andi	r3,r3,255
    7cd4:	180b883a 	mov	r5,r3
    7cd8:	103ee83a 	callr	r2
        bAddress     = 0;
    7cdc:	e0bfff17 	ldw	r2,-4(fp)
    7ce0:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    7ce4:	e0bfff17 	ldw	r2,-4(fp)
    7ce8:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    7cec:	e0bfff17 	ldw	r2,-4(fp)
    7cf0:	10001705 	stb	zero,92(r2)
        return 0;
    7cf4:	0005883a 	mov	r2,zero
}
    7cf8:	e037883a 	mov	sp,fp
    7cfc:	dfc00117 	ldw	ra,4(sp)
    7d00:	df000017 	ldw	fp,0(sp)
    7d04:	dec00204 	addi	sp,sp,8
    7d08:	f800283a 	ret

00007d0c <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7d0c:	defffe04 	addi	sp,sp,-8
    7d10:	df000115 	stw	fp,4(sp)
    7d14:	df000104 	addi	fp,sp,4
    7d18:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7d1c:	e0bfff17 	ldw	r2,-4(fp)
    7d20:	1080040b 	ldhu	r2,16(r2)
    7d24:	10bfffcc 	andi	r2,r2,65535
    7d28:	10848d58 	cmpnei	r2,r2,4661
    7d2c:	1000351e 	bne	r2,zero,7e04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    7d30:	e0bfff17 	ldw	r2,-4(fp)
    7d34:	1080038b 	ldhu	r2,14(r2)
    7d38:	10bfffcc 	andi	r2,r2,65535
    7d3c:	10800820 	cmpeqi	r2,r2,32
    7d40:	10000f1e 	bne	r2,zero,7d80 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7d44:	e0bfff17 	ldw	r2,-4(fp)
    7d48:	1080038b 	ldhu	r2,14(r2)
    7d4c:	10bfffcc 	andi	r2,r2,65535
    7d50:	10800da0 	cmpeqi	r2,r2,54
    7d54:	10000a1e 	bne	r2,zero,7d80 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7d58:	e0bfff17 	ldw	r2,-4(fp)
    7d5c:	1080038b 	ldhu	r2,14(r2)
    7d60:	10bfffcc 	andi	r2,r2,65535
    7d64:	10801460 	cmpeqi	r2,r2,81
    7d68:	1000051e 	bne	r2,zero,7d80 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7d6c:	e0bfff17 	ldw	r2,-4(fp)
    7d70:	1080038b 	ldhu	r2,14(r2)
    7d74:	10bfffcc 	andi	r2,r2,65535
    7d78:	10801a58 	cmpnei	r2,r2,105
    7d7c:	1000041e 	bne	r2,zero,7d90 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    7d80:	e0bfff17 	ldw	r2,-4(fp)
    7d84:	00c00084 	movi	r3,2
    7d88:	10c00485 	stb	r3,18(r2)
                        return;
    7d8c:	00001d06 	br	7e04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    7d90:	e0bfff17 	ldw	r2,-4(fp)
    7d94:	1080038b 	ldhu	r2,14(r2)
    7d98:	10bfffcc 	andi	r2,r2,65535
    7d9c:	10800c30 	cmpltui	r2,r2,48
    7da0:	1000051e 	bne	r2,zero,7db8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    7da4:	e0bfff17 	ldw	r2,-4(fp)
    7da8:	1080038b 	ldhu	r2,14(r2)
    7dac:	10bfffcc 	andi	r2,r2,65535
    7db0:	10800cf0 	cmpltui	r2,r2,51
    7db4:	10000f1e 	bne	r2,zero,7df4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7db8:	e0bfff17 	ldw	r2,-4(fp)
    7dbc:	1080038b 	ldhu	r2,14(r2)
    7dc0:	10bfffcc 	andi	r2,r2,65535
    7dc4:	10800d60 	cmpeqi	r2,r2,53
    7dc8:	10000a1e 	bne	r2,zero,7df4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    7dcc:	e0bfff17 	ldw	r2,-4(fp)
    7dd0:	1080038b 	ldhu	r2,14(r2)
    7dd4:	10bfffcc 	andi	r2,r2,65535
    7dd8:	10801ef0 	cmpltui	r2,r2,123
    7ddc:	1000091e 	bne	r2,zero,7e04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    7de0:	e0bfff17 	ldw	r2,-4(fp)
    7de4:	1080038b 	ldhu	r2,14(r2)
    7de8:	10bfffcc 	andi	r2,r2,65535
    7dec:	10801fa8 	cmpgeui	r2,r2,126
    7df0:	1000041e 	bne	r2,zero,7e04 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    7df4:	e0bfff17 	ldw	r2,-4(fp)
    7df8:	00c00084 	movi	r3,2
    7dfc:	10c00485 	stb	r3,18(r2)
                        return;
    7e00:	0001883a 	nop
                }
        }
}
    7e04:	e037883a 	mov	sp,fp
    7e08:	df000017 	ldw	fp,0(sp)
    7e0c:	dec00104 	addi	sp,sp,4
    7e10:	f800283a 	ret

00007e14 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7e14:	defff804 	addi	sp,sp,-32
    7e18:	dfc00715 	stw	ra,28(sp)
    7e1c:	df000615 	stw	fp,24(sp)
    7e20:	df000604 	addi	fp,sp,24
    7e24:	e13ffd15 	stw	r4,-12(fp)
    7e28:	e17ffe15 	stw	r5,-8(fp)
    7e2c:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7e30:	e0bffd17 	ldw	r2,-12(fp)
    7e34:	108005c3 	ldbu	r2,23(r2)
    7e38:	10c03fcc 	andi	r3,r2,255
    7e3c:	e0bffe17 	ldw	r2,-8(fp)
    7e40:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7e44:	e0bffd17 	ldw	r2,-12(fp)
    7e48:	10c00217 	ldw	r3,8(r2)
    7e4c:	e0bffd17 	ldw	r2,-12(fp)
    7e50:	10800303 	ldbu	r2,12(r2)
    7e54:	11003fcc 	andi	r4,r2,255
    7e58:	e0bffd17 	ldw	r2,-12(fp)
    7e5c:	10800583 	ldbu	r2,22(r2)
    7e60:	11403fcc 	andi	r5,r2,255
    7e64:	d8000115 	stw	zero,4(sp)
    7e68:	e0bfff17 	ldw	r2,-4(fp)
    7e6c:	d8800015 	stw	r2,0(sp)
    7e70:	e1fffe17 	ldw	r7,-8(fp)
    7e74:	280d883a 	mov	r6,r5
    7e78:	200b883a 	mov	r5,r4
    7e7c:	1809883a 	mov	r4,r3
    7e80:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7e84:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7e88:	e0bffe17 	ldw	r2,-8(fp)
    7e8c:	1080000b 	ldhu	r2,0(r2)
    7e90:	10bfffcc 	andi	r2,r2,65535
    7e94:	10800f28 	cmpgeui	r2,r2,60
    7e98:	10000d1e 	bne	r2,zero,7ed0 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7e9c:	e0bffe17 	ldw	r2,-8(fp)
    7ea0:	1080000b 	ldhu	r2,0(r2)
    7ea4:	10bfffcc 	andi	r2,r2,65535
    7ea8:	e0ffff17 	ldw	r3,-4(fp)
    7eac:	1885883a 	add	r2,r3,r2
    7eb0:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7eb4:	e0bffe17 	ldw	r2,-8(fp)
    7eb8:	1080000b 	ldhu	r2,0(r2)
    7ebc:	10bfffcc 	andi	r2,r2,65535
    7ec0:	10800044 	addi	r2,r2,1
    7ec4:	e0ffff17 	ldw	r3,-4(fp)
    7ec8:	1885883a 	add	r2,r3,r2
    7ecc:	10000005 	stb	zero,0(r2)
        }
        return r;
    7ed0:	e0bffc03 	ldbu	r2,-16(fp)
}
    7ed4:	e037883a 	mov	sp,fp
    7ed8:	dfc00117 	ldw	ra,4(sp)
    7edc:	df000017 	ldw	fp,0(sp)
    7ee0:	dec00204 	addi	sp,sp,8
    7ee4:	f800283a 	ret

00007ee8 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7ee8:	defff904 	addi	sp,sp,-28
    7eec:	dfc00615 	stw	ra,24(sp)
    7ef0:	df000515 	stw	fp,20(sp)
    7ef4:	df000504 	addi	fp,sp,20
    7ef8:	e13ffd15 	stw	r4,-12(fp)
    7efc:	e17ffe15 	stw	r5,-8(fp)
    7f00:	3005883a 	mov	r2,r6
    7f04:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7f08:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7f0c:	e0bffd17 	ldw	r2,-12(fp)
    7f10:	10800343 	ldbu	r2,13(r2)
    7f14:	1080005c 	xori	r2,r2,1
    7f18:	10803fcc 	andi	r2,r2,255
    7f1c:	10000226 	beq	r2,zero,7f28 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7f20:	0005883a 	mov	r2,zero
    7f24:	00008506 	br	813c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7f28:	e0bffd17 	ldw	r2,-12(fp)
    7f2c:	10801703 	ldbu	r2,92(r2)
    7f30:	10803fcc 	andi	r2,r2,255
    7f34:	10001826 	beq	r2,zero,7f98 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7f38:	e0bffd17 	ldw	r2,-12(fp)
    7f3c:	10801703 	ldbu	r2,92(r2)
    7f40:	10803fcc 	andi	r2,r2,255
    7f44:	10801028 	cmpgeui	r2,r2,64
    7f48:	1000131e 	bne	r2,zero,7f98 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7f4c:	e0bffd17 	ldw	r2,-12(fp)
    7f50:	10801703 	ldbu	r2,92(r2)
    7f54:	10803fcc 	andi	r2,r2,255
    7f58:	e0fffd17 	ldw	r3,-12(fp)
    7f5c:	1885883a 	add	r2,r3,r2
    7f60:	10800704 	addi	r2,r2,28
    7f64:	10800003 	ldbu	r2,0(r2)
    7f68:	10803fcc 	andi	r2,r2,255
    7f6c:	10002a1e 	bne	r2,zero,8018 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7f70:	e0bffd17 	ldw	r2,-12(fp)
    7f74:	10801703 	ldbu	r2,92(r2)
    7f78:	10803fcc 	andi	r2,r2,255
    7f7c:	10800044 	addi	r2,r2,1
    7f80:	e0fffd17 	ldw	r3,-12(fp)
    7f84:	1885883a 	add	r2,r3,r2
    7f88:	10800704 	addi	r2,r2,28
    7f8c:	10800003 	ldbu	r2,0(r2)
    7f90:	10803fcc 	andi	r2,r2,255
    7f94:	1000201e 	bne	r2,zero,8018 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7f98:	e0bffd17 	ldw	r2,-12(fp)
    7f9c:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7fa0:	e0bffd17 	ldw	r2,-12(fp)
    7fa4:	10c00704 	addi	r3,r2,28
    7fa8:	e0bffc04 	addi	r2,fp,-16
    7fac:	180d883a 	mov	r6,r3
    7fb0:	100b883a 	mov	r5,r2
    7fb4:	e13ffd17 	ldw	r4,-12(fp)
    7fb8:	0007e140 	call	7e14 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7fbc:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7fc0:	e0bffb03 	ldbu	r2,-20(fp)
    7fc4:	10000226 	beq	r2,zero,7fd0 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7fc8:	0005883a 	mov	r2,zero
    7fcc:	00005b06 	br	813c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7fd0:	e0bffd17 	ldw	r2,-12(fp)
    7fd4:	10800703 	ldbu	r2,28(r2)
    7fd8:	10803fcc 	andi	r2,r2,255
    7fdc:	10000e1e 	bne	r2,zero,8018 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7fe0:	e0bffd17 	ldw	r2,-12(fp)
    7fe4:	10800743 	ldbu	r2,29(r2)
    7fe8:	10803fcc 	andi	r2,r2,255
    7fec:	10000a1e 	bne	r2,zero,8018 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7ff0:	e0bffd17 	ldw	r2,-12(fp)
    7ff4:	10800783 	ldbu	r2,30(r2)
    7ff8:	10803fcc 	andi	r2,r2,255
    7ffc:	1000061e 	bne	r2,zero,8018 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    8000:	e0bffd17 	ldw	r2,-12(fp)
    8004:	108007c3 	ldbu	r2,31(r2)
    8008:	10803fcc 	andi	r2,r2,255
    800c:	1000021e 	bne	r2,zero,8018 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    8010:	0005883a 	mov	r2,zero
    8014:	00004906 	br	813c <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    8018:	e0bffd17 	ldw	r2,-12(fp)
    801c:	10801703 	ldbu	r2,92(r2)
    8020:	10803fcc 	andi	r2,r2,255
    8024:	e0fffd17 	ldw	r3,-12(fp)
    8028:	1885883a 	add	r2,r3,r2
    802c:	10800704 	addi	r2,r2,28
    8030:	10800003 	ldbu	r2,0(r2)
    8034:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    8038:	e0bfff03 	ldbu	r2,-4(fp)
    803c:	10000526 	beq	r2,zero,8054 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    8040:	e0bffe17 	ldw	r2,-8(fp)
    8044:	10c00044 	addi	r3,r2,1
    8048:	e0fffe15 	stw	r3,-8(fp)
    804c:	e0fffb43 	ldbu	r3,-19(fp)
    8050:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    8054:	e0bffd17 	ldw	r2,-12(fp)
    8058:	10801703 	ldbu	r2,92(r2)
    805c:	10800044 	addi	r2,r2,1
    8060:	1007883a 	mov	r3,r2
    8064:	e0bffd17 	ldw	r2,-12(fp)
    8068:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    806c:	e0bffe17 	ldw	r2,-8(fp)
    8070:	10c00044 	addi	r3,r2,1
    8074:	e0fffe15 	stw	r3,-8(fp)
    8078:	e0fffd17 	ldw	r3,-12(fp)
    807c:	18c01703 	ldbu	r3,92(r3)
    8080:	19000044 	addi	r4,r3,1
    8084:	200b883a 	mov	r5,r4
    8088:	e13ffd17 	ldw	r4,-12(fp)
    808c:	21401705 	stb	r5,92(r4)
    8090:	18c03fcc 	andi	r3,r3,255
    8094:	e13ffd17 	ldw	r4,-12(fp)
    8098:	20c7883a 	add	r3,r4,r3
    809c:	18c00704 	addi	r3,r3,28
    80a0:	18c00003 	ldbu	r3,0(r3)
    80a4:	e0fffb85 	stb	r3,-18(fp)
    80a8:	e0fffb83 	ldbu	r3,-18(fp)
    80ac:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    80b0:	e0bffe17 	ldw	r2,-8(fp)
    80b4:	10c00044 	addi	r3,r2,1
    80b8:	e0fffe15 	stw	r3,-8(fp)
    80bc:	e0fffd17 	ldw	r3,-12(fp)
    80c0:	18c01703 	ldbu	r3,92(r3)
    80c4:	19000044 	addi	r4,r3,1
    80c8:	200b883a 	mov	r5,r4
    80cc:	e13ffd17 	ldw	r4,-12(fp)
    80d0:	21401705 	stb	r5,92(r4)
    80d4:	18c03fcc 	andi	r3,r3,255
    80d8:	e13ffd17 	ldw	r4,-12(fp)
    80dc:	20c7883a 	add	r3,r4,r3
    80e0:	18c00704 	addi	r3,r3,28
    80e4:	18c00003 	ldbu	r3,0(r3)
    80e8:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    80ec:	e0bffe17 	ldw	r2,-8(fp)
    80f0:	10c00044 	addi	r3,r2,1
    80f4:	e0fffe15 	stw	r3,-8(fp)
    80f8:	e0fffd17 	ldw	r3,-12(fp)
    80fc:	18c01703 	ldbu	r3,92(r3)
    8100:	19000044 	addi	r4,r3,1
    8104:	200b883a 	mov	r5,r4
    8108:	e13ffd17 	ldw	r4,-12(fp)
    810c:	21401705 	stb	r5,92(r4)
    8110:	18c03fcc 	andi	r3,r3,255
    8114:	e13ffd17 	ldw	r4,-12(fp)
    8118:	20c7883a 	add	r3,r4,r3
    811c:	18c00704 	addi	r3,r3,28
    8120:	18c00003 	ldbu	r3,0(r3)
    8124:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    8128:	e0bffb43 	ldbu	r2,-19(fp)
    812c:	108003cc 	andi	r2,r2,15
    8130:	100b883a 	mov	r5,r2
    8134:	e13ffd17 	ldw	r4,-12(fp)
    8138:	00091980 	call	9198 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    813c:	e037883a 	mov	sp,fp
    8140:	dfc00117 	ldw	ra,4(sp)
    8144:	df000017 	ldw	fp,0(sp)
    8148:	dec00204 	addi	sp,sp,8
    814c:	f800283a 	ret

00008150 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    8150:	defff804 	addi	sp,sp,-32
    8154:	dfc00715 	stw	ra,28(sp)
    8158:	df000615 	stw	fp,24(sp)
    815c:	df000604 	addi	fp,sp,24
    8160:	e13ffd15 	stw	r4,-12(fp)
    8164:	e17ffe15 	stw	r5,-8(fp)
    8168:	3005883a 	mov	r2,r6
    816c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    8170:	e0bffe17 	ldw	r2,-8(fp)
    8174:	10800003 	ldbu	r2,0(r2)
    8178:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    817c:	e0bffb03 	ldbu	r2,-20(fp)
    8180:	100b883a 	mov	r5,r2
    8184:	e13ffd17 	ldw	r4,-12(fp)
    8188:	00091400 	call	9140 <_ZN9USBH_MIDI17convertStatus2CinEh>
    818c:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    8190:	e0bffb03 	ldbu	r2,-20(fp)
    8194:	10803c18 	cmpnei	r2,r2,240
    8198:	10000b1e 	bne	r2,zero,81c8 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    819c:	e17ffe17 	ldw	r5,-8(fp)
    81a0:	e13ffd17 	ldw	r4,-12(fp)
    81a4:	00083100 	call	8310 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    81a8:	10bfffcc 	andi	r2,r2,65535
    81ac:	e0ffff03 	ldbu	r3,-4(fp)
    81b0:	180f883a 	mov	r7,r3
    81b4:	100d883a 	mov	r6,r2
    81b8:	e17ffe17 	ldw	r5,-8(fp)
    81bc:	e13ffd17 	ldw	r4,-12(fp)
    81c0:	00083980 	call	8398 <_ZN9USBH_MIDI9SendSysExEPhth>
    81c4:	00003406 	br	8298 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    81c8:	e0bfff03 	ldbu	r2,-4(fp)
    81cc:	1004913a 	slli	r2,r2,4
    81d0:	1007883a 	mov	r3,r2
    81d4:	e0bffb43 	ldbu	r2,-19(fp)
    81d8:	1884b03a 	or	r2,r3,r2
    81dc:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    81e0:	e0bffe17 	ldw	r2,-8(fp)
    81e4:	10800003 	ldbu	r2,0(r2)
    81e8:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    81ec:	e0bffb43 	ldbu	r2,-19(fp)
    81f0:	100b883a 	mov	r5,r2
    81f4:	e13ffd17 	ldw	r4,-12(fp)
    81f8:	00091980 	call	9198 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    81fc:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    8200:	e0bffb83 	ldbu	r2,-18(fp)
    8204:	10c000a0 	cmpeqi	r3,r2,2
    8208:	18000c1e 	bne	r3,zero,823c <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    820c:	10c000e0 	cmpeqi	r3,r2,3
    8210:	1800031e 	bne	r3,zero,8220 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    8214:	10800060 	cmpeqi	r2,r2,1
    8218:	10000d1e 	bne	r2,zero,8250 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    821c:	00000f06 	br	825c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    8220:	e0bffe17 	ldw	r2,-8(fp)
    8224:	10800043 	ldbu	r2,1(r2)
    8228:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    822c:	e0bffe17 	ldw	r2,-8(fp)
    8230:	10800083 	ldbu	r2,2(r2)
    8234:	e0bffc85 	stb	r2,-14(fp)
                break;
    8238:	00000806 	br	825c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    823c:	e0bffe17 	ldw	r2,-8(fp)
    8240:	10800043 	ldbu	r2,1(r2)
    8244:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    8248:	e03ffc85 	stb	zero,-14(fp)
                break;
    824c:	00000306 	br	825c <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    8250:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    8254:	e03ffc85 	stb	zero,-14(fp)
                break;
    8258:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    825c:	e0bffd17 	ldw	r2,-12(fp)
    8260:	10c00217 	ldw	r3,8(r2)
    8264:	e0bffd17 	ldw	r2,-12(fp)
    8268:	10800303 	ldbu	r2,12(r2)
    826c:	11003fcc 	andi	r4,r2,255
    8270:	e0bffd17 	ldw	r2,-12(fp)
    8274:	10800643 	ldbu	r2,25(r2)
    8278:	11403fcc 	andi	r5,r2,255
    827c:	e0bffbc4 	addi	r2,fp,-17
    8280:	d8800015 	stw	r2,0(sp)
    8284:	01c00104 	movi	r7,4
    8288:	280d883a 	mov	r6,r5
    828c:	200b883a 	mov	r5,r4
    8290:	1809883a 	mov	r4,r3
    8294:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    8298:	e037883a 	mov	sp,fp
    829c:	dfc00117 	ldw	ra,4(sp)
    82a0:	df000017 	ldw	fp,0(sp)
    82a4:	dec00204 	addi	sp,sp,8
    82a8:	f800283a 	ret

000082ac <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    82ac:	defffb04 	addi	sp,sp,-20
    82b0:	dfc00415 	stw	ra,16(sp)
    82b4:	df000315 	stw	fp,12(sp)
    82b8:	df000304 	addi	fp,sp,12
    82bc:	e13ffd15 	stw	r4,-12(fp)
    82c0:	2807883a 	mov	r3,r5
    82c4:	3005883a 	mov	r2,r6
    82c8:	e0fffe05 	stb	r3,-8(fp)
    82cc:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    82d0:	e0bfff03 	ldbu	r2,-4(fp)
    82d4:	1000051e 	bne	r2,zero,82ec <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    82d8:	e0bffe03 	ldbu	r2,-8(fp)
    82dc:	100b883a 	mov	r5,r2
    82e0:	e13ffd17 	ldw	r4,-12(fp)
    82e4:	00091400 	call	9140 <_ZN9USBH_MIDI17convertStatus2CinEh>
    82e8:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    82ec:	e0bfff03 	ldbu	r2,-4(fp)
    82f0:	100b883a 	mov	r5,r2
    82f4:	e13ffd17 	ldw	r4,-12(fp)
    82f8:	00091980 	call	9198 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    82fc:	e037883a 	mov	sp,fp
    8300:	dfc00117 	ldw	ra,4(sp)
    8304:	df000017 	ldw	fp,0(sp)
    8308:	dec00204 	addi	sp,sp,8
    830c:	f800283a 	ret

00008310 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    8310:	defffc04 	addi	sp,sp,-16
    8314:	df000315 	stw	fp,12(sp)
    8318:	df000304 	addi	fp,sp,12
    831c:	e13ffe15 	stw	r4,-8(fp)
    8320:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    8324:	00800044 	movi	r2,1
    8328:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    832c:	e0bfff17 	ldw	r2,-4(fp)
    8330:	10800003 	ldbu	r2,0(r2)
    8334:	10803fcc 	andi	r2,r2,255
    8338:	10803c20 	cmpeqi	r2,r2,240
    833c:	1000021e 	bne	r2,zero,8348 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    8340:	0005883a 	mov	r2,zero
    8344:	00001006 	br	8388 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    8348:	e0bfff17 	ldw	r2,-4(fp)
    834c:	10800003 	ldbu	r2,0(r2)
    8350:	10803fcc 	andi	r2,r2,255
    8354:	10803de0 	cmpeqi	r2,r2,247
    8358:	10000a1e 	bne	r2,zero,8384 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    835c:	e0bfff17 	ldw	r2,-4(fp)
    8360:	10800044 	addi	r2,r2,1
    8364:	e0bfff15 	stw	r2,-4(fp)
                c++;
    8368:	e0bffd0b 	ldhu	r2,-12(fp)
    836c:	10800044 	addi	r2,r2,1
    8370:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    8374:	e0bffd0b 	ldhu	r2,-12(fp)
    8378:	10804070 	cmpltui	r2,r2,257
    837c:	103ff21e 	bne	r2,zero,8348 <__alt_data_end+0xfc008348>
                        c = 0;
    8380:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    8384:	e0bffd0b 	ldhu	r2,-12(fp)
}
    8388:	e037883a 	mov	sp,fp
    838c:	df000017 	ldw	fp,0(sp)
    8390:	dec00104 	addi	sp,sp,4
    8394:	f800283a 	ret

00008398 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    8398:	deffe704 	addi	sp,sp,-100
    839c:	dfc01815 	stw	ra,96(sp)
    83a0:	df001715 	stw	fp,92(sp)
    83a4:	df001704 	addi	fp,sp,92
    83a8:	e13ffc15 	stw	r4,-16(fp)
    83ac:	e17ffd15 	stw	r5,-12(fp)
    83b0:	3007883a 	mov	r3,r6
    83b4:	3805883a 	mov	r2,r7
    83b8:	e0fffe0d 	sth	r3,-8(fp)
    83bc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    83c0:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    83c4:	e0bffe0b 	ldhu	r2,-8(fp)
    83c8:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    83cc:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    83d0:	e0bffc17 	ldw	r2,-16(fp)
    83d4:	108005c3 	ldbu	r2,23(r2)
    83d8:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    83dc:	e0bffe0b 	ldhu	r2,-8(fp)
    83e0:	01402004 	movi	r5,128
    83e4:	1009883a 	mov	r4,r2
    83e8:	00092300 	call	9230 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    83ec:	e0bfea8b 	ldhu	r2,-86(fp)
    83f0:	1000b026 	beq	r2,zero,86b4 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    83f4:	e0bfeb03 	ldbu	r2,-84(fp)
    83f8:	e0ffff03 	ldbu	r3,-4(fp)
    83fc:	1806913a 	slli	r3,r3,4
    8400:	18c00114 	ori	r3,r3,4
    8404:	1809883a 	mov	r4,r3
    8408:	e0ffeb84 	addi	r3,fp,-82
    840c:	1885883a 	add	r2,r3,r2
    8410:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    8414:	e0bfea8b 	ldhu	r2,-86(fp)
    8418:	10c000a0 	cmpeqi	r3,r2,2
    841c:	18002a1e 	bne	r3,zero,84c8 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    8420:	10c000e0 	cmpeqi	r3,r2,3
    8424:	1800521e 	bne	r3,zero,8570 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    8428:	10800060 	cmpeqi	r2,r2,1
    842c:	10005826 	beq	r2,zero,8590 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    8430:	e0bfeb03 	ldbu	r2,-84(fp)
    8434:	10c00044 	addi	r3,r2,1
    8438:	e0ffeb05 	stb	r3,-84(fp)
    843c:	10803fcc 	andi	r2,r2,255
    8440:	e0ffff03 	ldbu	r3,-4(fp)
    8444:	1806913a 	slli	r3,r3,4
    8448:	18c00154 	ori	r3,r3,5
    844c:	1809883a 	mov	r4,r3
    8450:	e0ffeb84 	addi	r3,fp,-82
    8454:	1885883a 	add	r2,r3,r2
    8458:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    845c:	e0bfeb03 	ldbu	r2,-84(fp)
    8460:	10c00044 	addi	r3,r2,1
    8464:	e0ffeb05 	stb	r3,-84(fp)
    8468:	11003fcc 	andi	r4,r2,255
    846c:	e0bffd17 	ldw	r2,-12(fp)
    8470:	10c00044 	addi	r3,r2,1
    8474:	e0fffd15 	stw	r3,-12(fp)
    8478:	10c00003 	ldbu	r3,0(r2)
    847c:	e0bfeb84 	addi	r2,fp,-82
    8480:	1105883a 	add	r2,r2,r4
    8484:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8488:	e0bfeb03 	ldbu	r2,-84(fp)
    848c:	10c00044 	addi	r3,r2,1
    8490:	e0ffeb05 	stb	r3,-84(fp)
    8494:	10803fcc 	andi	r2,r2,255
    8498:	e0ffeb84 	addi	r3,fp,-82
    849c:	1885883a 	add	r2,r3,r2
    84a0:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    84a4:	e0bfeb03 	ldbu	r2,-84(fp)
    84a8:	10c00044 	addi	r3,r2,1
    84ac:	e0ffeb05 	stb	r3,-84(fp)
    84b0:	10803fcc 	andi	r2,r2,255
    84b4:	e0ffeb84 	addi	r3,fp,-82
    84b8:	1885883a 	add	r2,r3,r2
    84bc:	10000005 	stb	zero,0(r2)
                        n = 0;
    84c0:	e03fea8d 	sth	zero,-86(fp)
                        break;
    84c4:	00005a06 	br	8630 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    84c8:	e0bfeb03 	ldbu	r2,-84(fp)
    84cc:	10c00044 	addi	r3,r2,1
    84d0:	e0ffeb05 	stb	r3,-84(fp)
    84d4:	10803fcc 	andi	r2,r2,255
    84d8:	e0ffff03 	ldbu	r3,-4(fp)
    84dc:	1806913a 	slli	r3,r3,4
    84e0:	18c00194 	ori	r3,r3,6
    84e4:	1809883a 	mov	r4,r3
    84e8:	e0ffeb84 	addi	r3,fp,-82
    84ec:	1885883a 	add	r2,r3,r2
    84f0:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    84f4:	e0bfeb03 	ldbu	r2,-84(fp)
    84f8:	10c00044 	addi	r3,r2,1
    84fc:	e0ffeb05 	stb	r3,-84(fp)
    8500:	11003fcc 	andi	r4,r2,255
    8504:	e0bffd17 	ldw	r2,-12(fp)
    8508:	10c00044 	addi	r3,r2,1
    850c:	e0fffd15 	stw	r3,-12(fp)
    8510:	10c00003 	ldbu	r3,0(r2)
    8514:	e0bfeb84 	addi	r2,fp,-82
    8518:	1105883a 	add	r2,r2,r4
    851c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    8520:	e0bfeb03 	ldbu	r2,-84(fp)
    8524:	10c00044 	addi	r3,r2,1
    8528:	e0ffeb05 	stb	r3,-84(fp)
    852c:	11003fcc 	andi	r4,r2,255
    8530:	e0bffd17 	ldw	r2,-12(fp)
    8534:	10c00044 	addi	r3,r2,1
    8538:	e0fffd15 	stw	r3,-12(fp)
    853c:	10c00003 	ldbu	r3,0(r2)
    8540:	e0bfeb84 	addi	r2,fp,-82
    8544:	1105883a 	add	r2,r2,r4
    8548:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    854c:	e0bfeb03 	ldbu	r2,-84(fp)
    8550:	10c00044 	addi	r3,r2,1
    8554:	e0ffeb05 	stb	r3,-84(fp)
    8558:	10803fcc 	andi	r2,r2,255
    855c:	e0ffeb84 	addi	r3,fp,-82
    8560:	1885883a 	add	r2,r3,r2
    8564:	10000005 	stb	zero,0(r2)
                        n = 0;
    8568:	e03fea8d 	sth	zero,-86(fp)
                        break;
    856c:	00003006 	br	8630 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    8570:	e0bfeb03 	ldbu	r2,-84(fp)
    8574:	e0ffff03 	ldbu	r3,-4(fp)
    8578:	1806913a 	slli	r3,r3,4
    857c:	18c001d4 	ori	r3,r3,7
    8580:	1809883a 	mov	r4,r3
    8584:	e0ffeb84 	addi	r3,fp,-82
    8588:	1885883a 	add	r2,r3,r2
    858c:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    8590:	e0bfeb03 	ldbu	r2,-84(fp)
    8594:	10800044 	addi	r2,r2,1
    8598:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    859c:	e0bfeb03 	ldbu	r2,-84(fp)
    85a0:	10c00044 	addi	r3,r2,1
    85a4:	e0ffeb05 	stb	r3,-84(fp)
    85a8:	11003fcc 	andi	r4,r2,255
    85ac:	e0bffd17 	ldw	r2,-12(fp)
    85b0:	10c00044 	addi	r3,r2,1
    85b4:	e0fffd15 	stw	r3,-12(fp)
    85b8:	10c00003 	ldbu	r3,0(r2)
    85bc:	e0bfeb84 	addi	r2,fp,-82
    85c0:	1105883a 	add	r2,r2,r4
    85c4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    85c8:	e0bfeb03 	ldbu	r2,-84(fp)
    85cc:	10c00044 	addi	r3,r2,1
    85d0:	e0ffeb05 	stb	r3,-84(fp)
    85d4:	11003fcc 	andi	r4,r2,255
    85d8:	e0bffd17 	ldw	r2,-12(fp)
    85dc:	10c00044 	addi	r3,r2,1
    85e0:	e0fffd15 	stw	r3,-12(fp)
    85e4:	10c00003 	ldbu	r3,0(r2)
    85e8:	e0bfeb84 	addi	r2,fp,-82
    85ec:	1105883a 	add	r2,r2,r4
    85f0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    85f4:	e0bfeb03 	ldbu	r2,-84(fp)
    85f8:	10c00044 	addi	r3,r2,1
    85fc:	e0ffeb05 	stb	r3,-84(fp)
    8600:	11003fcc 	andi	r4,r2,255
    8604:	e0bffd17 	ldw	r2,-12(fp)
    8608:	10c00044 	addi	r3,r2,1
    860c:	e0fffd15 	stw	r3,-12(fp)
    8610:	10c00003 	ldbu	r3,0(r2)
    8614:	e0bfeb84 	addi	r2,fp,-82
    8618:	1105883a 	add	r2,r2,r4
    861c:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    8620:	e0bfea8b 	ldhu	r2,-86(fp)
    8624:	10bfff44 	addi	r2,r2,-3
    8628:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    862c:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    8630:	e0ffeb03 	ldbu	r3,-84(fp)
    8634:	e0bfeb43 	ldbu	r2,-83(fp)
    8638:	1880022e 	bgeu	r3,r2,8644 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    863c:	e0bfea8b 	ldhu	r2,-86(fp)
    8640:	103f6a1e 	bne	r2,zero,83ec <__alt_data_end+0xfc0083ec>
                        USBTRACE2(" wptr:\t", wptr);
    8644:	e0bfeb03 	ldbu	r2,-84(fp)
    8648:	01402004 	movi	r5,128
    864c:	1009883a 	mov	r4,r2
    8650:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8654:	e0bffc17 	ldw	r2,-16(fp)
    8658:	10c00217 	ldw	r3,8(r2)
    865c:	e0bffc17 	ldw	r2,-16(fp)
    8660:	10800303 	ldbu	r2,12(r2)
    8664:	11003fcc 	andi	r4,r2,255
    8668:	e0bffc17 	ldw	r2,-16(fp)
    866c:	10800643 	ldbu	r2,25(r2)
    8670:	11403fcc 	andi	r5,r2,255
    8674:	e1bfeb03 	ldbu	r6,-84(fp)
    8678:	e0bfeb84 	addi	r2,fp,-82
    867c:	d8800015 	stw	r2,0(sp)
    8680:	300f883a 	mov	r7,r6
    8684:	280d883a 	mov	r6,r5
    8688:	200b883a 	mov	r5,r4
    868c:	1809883a 	mov	r4,r3
    8690:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    8694:	e0bfea05 	stb	r2,-88(fp)
    8698:	e0bfea03 	ldbu	r2,-88(fp)
    869c:	1004c03a 	cmpne	r2,r2,zero
    86a0:	10803fcc 	andi	r2,r2,255
    86a4:	1000021e 	bne	r2,zero,86b0 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    86a8:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    86ac:	003f4f06 	br	83ec <__alt_data_end+0xfc0083ec>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    86b0:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    86b4:	e0bfea03 	ldbu	r2,-88(fp)
}
    86b8:	e037883a 	mov	sp,fp
    86bc:	dfc00117 	ldw	ra,4(sp)
    86c0:	df000017 	ldw	fp,0(sp)
    86c4:	dec00204 	addi	sp,sp,8
    86c8:	f800283a 	ret

000086cc <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    86cc:	defffb04 	addi	sp,sp,-20
    86d0:	df000415 	stw	fp,16(sp)
    86d4:	df000404 	addi	fp,sp,16
    86d8:	e13ffd15 	stw	r4,-12(fp)
    86dc:	e17ffe15 	stw	r5,-8(fp)
    86e0:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    86e4:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    86e8:	e0bffe17 	ldw	r2,-8(fp)
    86ec:	10800003 	ldbu	r2,0(r2)
    86f0:	108003cc 	andi	r2,r2,15
    86f4:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    86f8:	e0bffc43 	ldbu	r2,-15(fp)
    86fc:	1080030c 	andi	r2,r2,12
    8700:	10800120 	cmpeqi	r2,r2,4
    8704:	1000021e 	bne	r2,zero,8710 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8708:	e0bffc03 	ldbu	r2,-16(fp)
    870c:	00003b06 	br	87fc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    8710:	e0bffc43 	ldbu	r2,-15(fp)
    8714:	10c00160 	cmpeqi	r3,r2,5
    8718:	18002e1e 	bne	r3,zero,87d4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    871c:	10c00188 	cmpgei	r3,r2,6
    8720:	1800031e 	bne	r3,zero,8730 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8724:	10800120 	cmpeqi	r2,r2,4
    8728:	1000061e 	bne	r2,zero,8744 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    872c:	00003206 	br	87f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    8730:	10c001a0 	cmpeqi	r3,r2,6
    8734:	1800181e 	bne	r3,zero,8798 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8738:	108001e0 	cmpeqi	r2,r2,7
    873c:	1000011e 	bne	r2,zero,8744 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8740:	00002d06 	br	87f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8744:	e0bfff17 	ldw	r2,-4(fp)
    8748:	10c00044 	addi	r3,r2,1
    874c:	e0ffff15 	stw	r3,-4(fp)
    8750:	e0fffe17 	ldw	r3,-8(fp)
    8754:	18c00043 	ldbu	r3,1(r3)
    8758:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    875c:	e0bfff17 	ldw	r2,-4(fp)
    8760:	10c00044 	addi	r3,r2,1
    8764:	e0ffff15 	stw	r3,-4(fp)
    8768:	e0fffe17 	ldw	r3,-8(fp)
    876c:	18c00083 	ldbu	r3,2(r3)
    8770:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8774:	e0bfff17 	ldw	r2,-4(fp)
    8778:	10c00044 	addi	r3,r2,1
    877c:	e0ffff15 	stw	r3,-4(fp)
    8780:	e0fffe17 	ldw	r3,-8(fp)
    8784:	18c000c3 	ldbu	r3,3(r3)
    8788:	10c00005 	stb	r3,0(r2)
                rc = 3;
    878c:	008000c4 	movi	r2,3
    8790:	e0bffc05 	stb	r2,-16(fp)
                break;
    8794:	00001806 	br	87f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    8798:	e0bfff17 	ldw	r2,-4(fp)
    879c:	10c00044 	addi	r3,r2,1
    87a0:	e0ffff15 	stw	r3,-4(fp)
    87a4:	e0fffe17 	ldw	r3,-8(fp)
    87a8:	18c00043 	ldbu	r3,1(r3)
    87ac:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    87b0:	e0bfff17 	ldw	r2,-4(fp)
    87b4:	10c00044 	addi	r3,r2,1
    87b8:	e0ffff15 	stw	r3,-4(fp)
    87bc:	e0fffe17 	ldw	r3,-8(fp)
    87c0:	18c00083 	ldbu	r3,2(r3)
    87c4:	10c00005 	stb	r3,0(r2)
                rc = 2;
    87c8:	00800084 	movi	r2,2
    87cc:	e0bffc05 	stb	r2,-16(fp)
                break;
    87d0:	00000906 	br	87f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    87d4:	e0bfff17 	ldw	r2,-4(fp)
    87d8:	10c00044 	addi	r3,r2,1
    87dc:	e0ffff15 	stw	r3,-4(fp)
    87e0:	e0fffe17 	ldw	r3,-8(fp)
    87e4:	18c00043 	ldbu	r3,1(r3)
    87e8:	10c00005 	stb	r3,0(r2)
                rc = 1;
    87ec:	00800044 	movi	r2,1
    87f0:	e0bffc05 	stb	r2,-16(fp)
                break;
    87f4:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    87f8:	e0bffc03 	ldbu	r2,-16(fp)
}
    87fc:	e037883a 	mov	sp,fp
    8800:	df000017 	ldw	fp,0(sp)
    8804:	dec00104 	addi	sp,sp,4
    8808:	f800283a 	ret

0000880c <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    880c:	defffb04 	addi	sp,sp,-20
    8810:	dfc00415 	stw	ra,16(sp)
    8814:	df000315 	stw	fp,12(sp)
    8818:	df000304 	addi	fp,sp,12
    881c:	e13ffd15 	stw	r4,-12(fp)
    8820:	e17ffe15 	stw	r5,-8(fp)
    8824:	3005883a 	mov	r2,r6
    8828:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    882c:	e0bffd17 	ldw	r2,-12(fp)
    8830:	1009883a 	mov	r4,r2
    8834:	0004fcc0 	call	4fcc <_ZN13USBReadParserC1Ev>
    8838:	008000b4 	movhi	r2,2
    883c:	10997704 	addi	r2,r2,26076
    8840:	e0fffd17 	ldw	r3,-12(fp)
    8844:	18800015 	stw	r2,0(r3)
    8848:	e0bffd17 	ldw	r2,-12(fp)
    884c:	e0fffe17 	ldw	r3,-8(fp)
    8850:	10c00115 	stw	r3,4(r2)
    8854:	e0bffd17 	ldw	r2,-12(fp)
    8858:	10800204 	addi	r2,r2,8
    885c:	1009883a 	mov	r4,r2
    8860:	00048bc0 	call	48bc <_ZN16MultiValueBufferC1Ev>
    8864:	e0bffd17 	ldw	r2,-12(fp)
    8868:	10800404 	addi	r2,r2,16
    886c:	1009883a 	mov	r4,r2
    8870:	000491c0 	call	491c <_ZN20MultiByteValueParserC1Ev>
    8874:	e0bffd17 	ldw	r2,-12(fp)
    8878:	10800604 	addi	r2,r2,24
    887c:	1009883a 	mov	r4,r2
    8880:	00049d80 	call	49d8 <_ZN11ByteSkipperC1Ev>
    8884:	e0bffd17 	ldw	r2,-12(fp)
    8888:	10000c05 	stb	zero,48(r2)
    888c:	e0bffd17 	ldw	r2,-12(fp)
    8890:	10000c45 	stb	zero,49(r2)
    8894:	e0bffd17 	ldw	r2,-12(fp)
    8898:	10000c85 	stb	zero,50(r2)
    889c:	e0bffd17 	ldw	r2,-12(fp)
    88a0:	10000cc5 	stb	zero,51(r2)
    88a4:	e0bffd17 	ldw	r2,-12(fp)
    88a8:	e0ffff03 	ldbu	r3,-4(fp)
    88ac:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    88b0:	e0bffd17 	ldw	r2,-12(fp)
    88b4:	10c00804 	addi	r3,r2,32
    88b8:	e0bffd17 	ldw	r2,-12(fp)
    88bc:	19803fcc 	andi	r6,r3,255
    88c0:	11000243 	ldbu	r4,9(r2)
    88c4:	2008703a 	and	r4,r4,zero
    88c8:	200b883a 	mov	r5,r4
    88cc:	3009883a 	mov	r4,r6
    88d0:	2908b03a 	or	r4,r5,r4
    88d4:	11000245 	stb	r4,9(r2)
    88d8:	1808d23a 	srli	r4,r3,8
    88dc:	21803fcc 	andi	r6,r4,255
    88e0:	11000283 	ldbu	r4,10(r2)
    88e4:	2008703a 	and	r4,r4,zero
    88e8:	200b883a 	mov	r5,r4
    88ec:	3009883a 	mov	r4,r6
    88f0:	2908b03a 	or	r4,r5,r4
    88f4:	11000285 	stb	r4,10(r2)
    88f8:	1808d43a 	srli	r4,r3,16
    88fc:	21803fcc 	andi	r6,r4,255
    8900:	110002c3 	ldbu	r4,11(r2)
    8904:	2008703a 	and	r4,r4,zero
    8908:	200b883a 	mov	r5,r4
    890c:	3009883a 	mov	r4,r6
    8910:	2908b03a 	or	r4,r5,r4
    8914:	110002c5 	stb	r4,11(r2)
    8918:	180ad63a 	srli	r5,r3,24
    891c:	10c00303 	ldbu	r3,12(r2)
    8920:	1806703a 	and	r3,r3,zero
    8924:	1809883a 	mov	r4,r3
    8928:	2807883a 	mov	r3,r5
    892c:	20c6b03a 	or	r3,r4,r3
    8930:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8934:	e0bffd17 	ldw	r2,-12(fp)
    8938:	10c00404 	addi	r3,r2,16
    893c:	e0bffd17 	ldw	r2,-12(fp)
    8940:	10800204 	addi	r2,r2,8
    8944:	100b883a 	mov	r5,r2
    8948:	1809883a 	mov	r4,r3
    894c:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    8950:	e0bffd17 	ldw	r2,-12(fp)
    8954:	10c00604 	addi	r3,r2,24
    8958:	e0bffd17 	ldw	r2,-12(fp)
    895c:	10800204 	addi	r2,r2,8
    8960:	100b883a 	mov	r5,r2
    8964:	1809883a 	mov	r4,r3
    8968:	0004a140 	call	4a14 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    896c:	0001883a 	nop
    8970:	e037883a 	mov	sp,fp
    8974:	dfc00117 	ldw	ra,4(sp)
    8978:	df000017 	ldw	fp,0(sp)
    897c:	dec00204 	addi	sp,sp,8
    8980:	f800283a 	ret

00008984 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    8984:	defff804 	addi	sp,sp,-32
    8988:	dfc00715 	stw	ra,28(sp)
    898c:	df000615 	stw	fp,24(sp)
    8990:	df000604 	addi	fp,sp,24
    8994:	e13ffc15 	stw	r4,-16(fp)
    8998:	2805883a 	mov	r2,r5
    899c:	e1bffe15 	stw	r6,-8(fp)
    89a0:	e1ffff15 	stw	r7,-4(fp)
    89a4:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    89a8:	e0bffd0b 	ldhu	r2,-12(fp)
    89ac:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    89b0:	e0bffe17 	ldw	r2,-8(fp)
    89b4:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    89b8:	e0bffa0b 	ldhu	r2,-24(fp)
    89bc:	10bfffcc 	andi	r2,r2,65535
    89c0:	10000a26 	beq	r2,zero,89ec <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    89c4:	e0bffb04 	addi	r2,fp,-20
    89c8:	e1bffa04 	addi	r6,fp,-24
    89cc:	100b883a 	mov	r5,r2
    89d0:	e13ffc17 	ldw	r4,-16(fp)
    89d4:	0008a000 	call	8a00 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    89d8:	1080005c 	xori	r2,r2,1
    89dc:	10803fcc 	andi	r2,r2,255
    89e0:	1000011e 	bne	r2,zero,89e8 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    89e4:	003ff406 	br	89b8 <__alt_data_end+0xfc0089b8>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    89e8:	0001883a 	nop
}
    89ec:	e037883a 	mov	sp,fp
    89f0:	dfc00117 	ldw	ra,4(sp)
    89f4:	df000017 	ldw	fp,0(sp)
    89f8:	dec00204 	addi	sp,sp,8
    89fc:	f800283a 	ret

00008a00 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    8a00:	defff604 	addi	sp,sp,-40
    8a04:	dfc00915 	stw	ra,36(sp)
    8a08:	df000815 	stw	fp,32(sp)
    8a0c:	df000804 	addi	fp,sp,32
    8a10:	e13ffc15 	stw	r4,-16(fp)
    8a14:	e17ffd15 	stw	r5,-12(fp)
    8a18:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8a1c:	e0bffc17 	ldw	r2,-16(fp)
    8a20:	10800804 	addi	r2,r2,32
    8a24:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8a28:	e0bffc17 	ldw	r2,-16(fp)
    8a2c:	10800804 	addi	r2,r2,32
    8a30:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8a34:	e0bffc17 	ldw	r2,-16(fp)
    8a38:	10800c03 	ldbu	r2,48(r2)
    8a3c:	10803fcc 	andi	r2,r2,255
    8a40:	10c00168 	cmpgeui	r3,r2,5
    8a44:	1801411e 	bne	r3,zero,8f4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8a48:	100690ba 	slli	r3,r2,2
    8a4c:	00800074 	movhi	r2,1
    8a50:	10a29804 	addi	r2,r2,-30112
    8a54:	1885883a 	add	r2,r3,r2
    8a58:	10800017 	ldw	r2,0(r2)
    8a5c:	1000683a 	jmp	r2
    8a60:	00008a74 	movhi	zero,553
    8a64:	00008aa8 	cmpgeui	zero,zero,554
    8a68:	00008b30 	cmpltui	zero,zero,556
    8a6c:	00008bc4 	movi	zero,559
    8a70:	00008c30 	cmpltui	zero,zero,560
                case 0:
                        theBuffer.valueSize = 2;
    8a74:	e0bffc17 	ldw	r2,-16(fp)
    8a78:	00c00084 	movi	r3,2
    8a7c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8a80:	e0bffc17 	ldw	r2,-16(fp)
    8a84:	10c00404 	addi	r3,r2,16
    8a88:	e0bffc17 	ldw	r2,-16(fp)
    8a8c:	10800204 	addi	r2,r2,8
    8a90:	100b883a 	mov	r5,r2
    8a94:	1809883a 	mov	r4,r3
    8a98:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    8a9c:	e0bffc17 	ldw	r2,-16(fp)
    8aa0:	00c00044 	movi	r3,1
    8aa4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    8aa8:	e0bffc17 	ldw	r2,-16(fp)
    8aac:	10800404 	addi	r2,r2,16
    8ab0:	e1bffe17 	ldw	r6,-8(fp)
    8ab4:	e17ffd17 	ldw	r5,-12(fp)
    8ab8:	1009883a 	mov	r4,r2
    8abc:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8ac0:	1080005c 	xori	r2,r2,1
    8ac4:	10803fcc 	andi	r2,r2,255
    8ac8:	10000226 	beq	r2,zero,8ad4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    8acc:	0005883a 	mov	r2,zero
    8ad0:	00011f06 	br	8f50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    8ad4:	e0bffc17 	ldw	r2,-16(fp)
    8ad8:	10c00217 	ldw	r3,8(r2)
    8adc:	1806d23a 	srli	r3,r3,8
    8ae0:	10800317 	ldw	r2,12(r2)
    8ae4:	10803fcc 	andi	r2,r2,255
    8ae8:	1004963a 	slli	r2,r2,24
    8aec:	10c4b03a 	or	r2,r2,r3
    8af0:	10c00003 	ldbu	r3,0(r2)
    8af4:	e0bffc17 	ldw	r2,-16(fp)
    8af8:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    8afc:	e0bffc17 	ldw	r2,-16(fp)
    8b00:	10c00217 	ldw	r3,8(r2)
    8b04:	1806d23a 	srli	r3,r3,8
    8b08:	10800317 	ldw	r2,12(r2)
    8b0c:	10803fcc 	andi	r2,r2,255
    8b10:	1004963a 	slli	r2,r2,24
    8b14:	10c4b03a 	or	r2,r2,r3
    8b18:	10c00043 	ldbu	r3,1(r2)
    8b1c:	e0bffc17 	ldw	r2,-16(fp)
    8b20:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8b24:	e0bffc17 	ldw	r2,-16(fp)
    8b28:	00c00084 	movi	r3,2
    8b2c:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    8b30:	e0bffc17 	ldw	r2,-16(fp)
    8b34:	10800804 	addi	r2,r2,32
    8b38:	10c00084 	addi	r3,r2,2
    8b3c:	e0bffc17 	ldw	r2,-16(fp)
    8b40:	19803fcc 	andi	r6,r3,255
    8b44:	11000243 	ldbu	r4,9(r2)
    8b48:	2008703a 	and	r4,r4,zero
    8b4c:	200b883a 	mov	r5,r4
    8b50:	3009883a 	mov	r4,r6
    8b54:	2908b03a 	or	r4,r5,r4
    8b58:	11000245 	stb	r4,9(r2)
    8b5c:	1808d23a 	srli	r4,r3,8
    8b60:	21803fcc 	andi	r6,r4,255
    8b64:	11000283 	ldbu	r4,10(r2)
    8b68:	2008703a 	and	r4,r4,zero
    8b6c:	200b883a 	mov	r5,r4
    8b70:	3009883a 	mov	r4,r6
    8b74:	2908b03a 	or	r4,r5,r4
    8b78:	11000285 	stb	r4,10(r2)
    8b7c:	1808d43a 	srli	r4,r3,16
    8b80:	21803fcc 	andi	r6,r4,255
    8b84:	110002c3 	ldbu	r4,11(r2)
    8b88:	2008703a 	and	r4,r4,zero
    8b8c:	200b883a 	mov	r5,r4
    8b90:	3009883a 	mov	r4,r6
    8b94:	2908b03a 	or	r4,r5,r4
    8b98:	110002c5 	stb	r4,11(r2)
    8b9c:	180ad63a 	srli	r5,r3,24
    8ba0:	10c00303 	ldbu	r3,12(r2)
    8ba4:	1806703a 	and	r3,r3,zero
    8ba8:	1809883a 	mov	r4,r3
    8bac:	2807883a 	mov	r3,r5
    8bb0:	20c6b03a 	or	r3,r4,r3
    8bb4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    8bb8:	e0bffc17 	ldw	r2,-16(fp)
    8bbc:	00c000c4 	movi	r3,3
    8bc0:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    8bc4:	e0bffc17 	ldw	r2,-16(fp)
    8bc8:	10800c83 	ldbu	r2,50(r2)
    8bcc:	10803fcc 	andi	r2,r2,255
    8bd0:	10c00120 	cmpeqi	r3,r2,4
    8bd4:	1800021e 	bne	r3,zero,8be0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    8bd8:	10800148 	cmpgei	r2,r2,5
    8bdc:	00000306 	br	8bec <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    8be0:	e0bffc17 	ldw	r2,-16(fp)
    8be4:	10000d45 	stb	zero,53(r2)
                                        break;
    8be8:	00000106 	br	8bf0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    8bec:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    8bf0:	e0bffc17 	ldw	r2,-16(fp)
    8bf4:	10800c43 	ldbu	r2,49(r2)
    8bf8:	10bfff84 	addi	r2,r2,-2
    8bfc:	1007883a 	mov	r3,r2
    8c00:	e0bffc17 	ldw	r2,-16(fp)
    8c04:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8c08:	e0bffc17 	ldw	r2,-16(fp)
    8c0c:	10c00404 	addi	r3,r2,16
    8c10:	e0bffc17 	ldw	r2,-16(fp)
    8c14:	10800204 	addi	r2,r2,8
    8c18:	100b883a 	mov	r5,r2
    8c1c:	1809883a 	mov	r4,r3
    8c20:	00049580 	call	4958 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8c24:	e0bffc17 	ldw	r2,-16(fp)
    8c28:	00c00104 	movi	r3,4
    8c2c:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    8c30:	e0bffc17 	ldw	r2,-16(fp)
    8c34:	10800c83 	ldbu	r2,50(r2)
    8c38:	10803fcc 	andi	r2,r2,255
    8c3c:	10c00120 	cmpeqi	r3,r2,4
    8c40:	1800141e 	bne	r3,zero,8c94 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8c44:	10c00160 	cmpeqi	r3,r2,5
    8c48:	18005a1e 	bne	r3,zero,8db4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8c4c:	108000a0 	cmpeqi	r2,r2,2
    8c50:	10008526 	beq	r2,zero,8e68 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8c54:	e0bffc17 	ldw	r2,-16(fp)
    8c58:	10800404 	addi	r2,r2,16
    8c5c:	e1bffe17 	ldw	r6,-8(fp)
    8c60:	e17ffd17 	ldw	r5,-12(fp)
    8c64:	1009883a 	mov	r4,r2
    8c68:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8c6c:	1080005c 	xori	r2,r2,1
    8c70:	10803fcc 	andi	r2,r2,255
    8c74:	10000226 	beq	r2,zero,8c80 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8c78:	0005883a 	mov	r2,zero
    8c7c:	0000b406 	br	8f50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    8c80:	e0bffa17 	ldw	r2,-24(fp)
    8c84:	10c00143 	ldbu	r3,5(r2)
    8c88:	e0bffc17 	ldw	r2,-16(fp)
    8c8c:	10c00d85 	stb	r3,54(r2)
                                        break;
    8c90:	00008b06 	br	8ec0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8c94:	e0bffc17 	ldw	r2,-16(fp)
    8c98:	10800404 	addi	r2,r2,16
    8c9c:	e1bffe17 	ldw	r6,-8(fp)
    8ca0:	e17ffd17 	ldw	r5,-12(fp)
    8ca4:	1009883a 	mov	r4,r2
    8ca8:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8cac:	1080005c 	xori	r2,r2,1
    8cb0:	10803fcc 	andi	r2,r2,255
    8cb4:	10000226 	beq	r2,zero,8cc0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    8cb8:	0005883a 	mov	r2,zero
    8cbc:	0000a406 	br	8f50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    8cc0:	e0bffb17 	ldw	r2,-20(fp)
    8cc4:	10800083 	ldbu	r2,2(r2)
    8cc8:	10803fcc 	andi	r2,r2,255
    8ccc:	01402004 	movi	r5,128
    8cd0:	1009883a 	mov	r4,r2
    8cd4:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    8cd8:	e0bffb17 	ldw	r2,-20(fp)
    8cdc:	108000c3 	ldbu	r2,3(r2)
    8ce0:	10803fcc 	andi	r2,r2,255
    8ce4:	01402004 	movi	r5,128
    8ce8:	1009883a 	mov	r4,r2
    8cec:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    8cf0:	e0bffb17 	ldw	r2,-20(fp)
    8cf4:	10800103 	ldbu	r2,4(r2)
    8cf8:	10803fcc 	andi	r2,r2,255
    8cfc:	01402004 	movi	r5,128
    8d00:	1009883a 	mov	r4,r2
    8d04:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8d08:	e0bffb17 	ldw	r2,-20(fp)
    8d0c:	10800143 	ldbu	r2,5(r2)
    8d10:	10803fcc 	andi	r2,r2,255
    8d14:	01402004 	movi	r5,128
    8d18:	1009883a 	mov	r4,r2
    8d1c:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    8d20:	e0bffb17 	ldw	r2,-20(fp)
    8d24:	10800183 	ldbu	r2,6(r2)
    8d28:	10803fcc 	andi	r2,r2,255
    8d2c:	01402004 	movi	r5,128
    8d30:	1009883a 	mov	r4,r2
    8d34:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8d38:	e0bffb17 	ldw	r2,-20(fp)
    8d3c:	108001c3 	ldbu	r2,7(r2)
    8d40:	10803fcc 	andi	r2,r2,255
    8d44:	01402004 	movi	r5,128
    8d48:	1009883a 	mov	r4,r2
    8d4c:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    8d50:	e0bffc17 	ldw	r2,-16(fp)
    8d54:	10800d03 	ldbu	r2,52(r2)
    8d58:	10803fcc 	andi	r2,r2,255
    8d5c:	10000a26 	beq	r2,zero,8d88 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    8d60:	e0bffb17 	ldw	r2,-20(fp)
    8d64:	10800143 	ldbu	r2,5(r2)
    8d68:	10803fcc 	andi	r2,r2,255
    8d6c:	10800058 	cmpnei	r2,r2,1
    8d70:	10004e1e 	bne	r2,zero,8eac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8d74:	e0bffb17 	ldw	r2,-20(fp)
    8d78:	10800183 	ldbu	r2,6(r2)
    8d7c:	10803fcc 	andi	r2,r2,255
    8d80:	108000d8 	cmpnei	r2,r2,3
    8d84:	1000491e 	bne	r2,zero,8eac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    8d88:	e0bffc17 	ldw	r2,-16(fp)
    8d8c:	00c00044 	movi	r3,1
    8d90:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8d94:	e0bffc17 	ldw	r2,-16(fp)
    8d98:	10800cc3 	ldbu	r2,51(r2)
    8d9c:	10803fcc 	andi	r2,r2,255
    8da0:	108000a8 	cmpgeui	r2,r2,2
    8da4:	1000431e 	bne	r2,zero,8eb4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    8da8:	e0bffc17 	ldw	r2,-16(fp)
    8dac:	10000cc5 	stb	zero,51(r2)
                                        break;
    8db0:	00004006 	br	8eb4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    8db4:	e0bffc17 	ldw	r2,-16(fp)
    8db8:	10800404 	addi	r2,r2,16
    8dbc:	e1bffe17 	ldw	r6,-8(fp)
    8dc0:	e17ffd17 	ldw	r5,-12(fp)
    8dc4:	1009883a 	mov	r4,r2
    8dc8:	00066e40 	call	66e4 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8dcc:	1080005c 	xori	r2,r2,1
    8dd0:	10803fcc 	andi	r2,r2,255
    8dd4:	10000226 	beq	r2,zero,8de0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    8dd8:	0005883a 	mov	r2,zero
    8ddc:	00005c06 	br	8f50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    8de0:	e0bffc17 	ldw	r2,-16(fp)
    8de4:	10800d43 	ldbu	r2,53(r2)
    8de8:	10803fcc 	andi	r2,r2,255
    8dec:	10003326 	beq	r2,zero,8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    8df0:	e0bffc17 	ldw	r2,-16(fp)
    8df4:	10800cc3 	ldbu	r2,51(r2)
    8df8:	10803fcc 	andi	r2,r2,255
    8dfc:	108000a8 	cmpgeui	r2,r2,2
    8e00:	10002e1e 	bne	r2,zero,8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8e04:	e0bffc17 	ldw	r2,-16(fp)
    8e08:	10800117 	ldw	r2,4(r2)
    8e0c:	10800017 	ldw	r2,0(r2)
    8e10:	10800017 	ldw	r2,0(r2)
    8e14:	e0fffc17 	ldw	r3,-16(fp)
    8e18:	19000117 	ldw	r4,4(r3)
    8e1c:	e0fffc17 	ldw	r3,-16(fp)
    8e20:	18c00d83 	ldbu	r3,54(r3)
    8e24:	19403fcc 	andi	r5,r3,255
    8e28:	e0fffc17 	ldw	r3,-16(fp)
    8e2c:	18c00804 	addi	r3,r3,32
    8e30:	d8c00115 	stw	r3,4(sp)
    8e34:	d8000015 	stw	zero,0(sp)
    8e38:	000f883a 	mov	r7,zero
    8e3c:	000d883a 	mov	r6,zero
    8e40:	103ee83a 	callr	r2
    8e44:	10803fcc 	andi	r2,r2,255
    8e48:	10001c26 	beq	r2,zero,8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8e4c:	e0bffc17 	ldw	r2,-16(fp)
    8e50:	10800cc3 	ldbu	r2,51(r2)
    8e54:	10800044 	addi	r2,r2,1
    8e58:	1007883a 	mov	r3,r2
    8e5c:	e0bffc17 	ldw	r2,-16(fp)
    8e60:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8e64:	00001506 	br	8ebc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8e68:	e0bffc17 	ldw	r2,-16(fp)
    8e6c:	10c00604 	addi	r3,r2,24
    8e70:	e0bffc17 	ldw	r2,-16(fp)
    8e74:	10800c43 	ldbu	r2,49(r2)
    8e78:	10803fcc 	andi	r2,r2,255
    8e7c:	10bfff84 	addi	r2,r2,-2
    8e80:	10bfffcc 	andi	r2,r2,65535
    8e84:	100f883a 	mov	r7,r2
    8e88:	e1bffe17 	ldw	r6,-8(fp)
    8e8c:	e17ffd17 	ldw	r5,-12(fp)
    8e90:	1809883a 	mov	r4,r3
    8e94:	0004a7c0 	call	4a7c <_ZN11ByteSkipper4SkipEPPhPtt>
    8e98:	1080005c 	xori	r2,r2,1
    8e9c:	10803fcc 	andi	r2,r2,255
    8ea0:	10000726 	beq	r2,zero,8ec0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8ea4:	0005883a 	mov	r2,zero
    8ea8:	00002906 	br	8f50 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8eac:	0001883a 	nop
    8eb0:	00000306 	br	8ec0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8eb4:	0001883a 	nop
    8eb8:	00000106 	br	8ec0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8ebc:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8ec0:	e0bffc17 	ldw	r2,-16(fp)
    8ec4:	10c00804 	addi	r3,r2,32
    8ec8:	e0bffc17 	ldw	r2,-16(fp)
    8ecc:	19803fcc 	andi	r6,r3,255
    8ed0:	11000243 	ldbu	r4,9(r2)
    8ed4:	2008703a 	and	r4,r4,zero
    8ed8:	200b883a 	mov	r5,r4
    8edc:	3009883a 	mov	r4,r6
    8ee0:	2908b03a 	or	r4,r5,r4
    8ee4:	11000245 	stb	r4,9(r2)
    8ee8:	1808d23a 	srli	r4,r3,8
    8eec:	21803fcc 	andi	r6,r4,255
    8ef0:	11000283 	ldbu	r4,10(r2)
    8ef4:	2008703a 	and	r4,r4,zero
    8ef8:	200b883a 	mov	r5,r4
    8efc:	3009883a 	mov	r4,r6
    8f00:	2908b03a 	or	r4,r5,r4
    8f04:	11000285 	stb	r4,10(r2)
    8f08:	1808d43a 	srli	r4,r3,16
    8f0c:	21803fcc 	andi	r6,r4,255
    8f10:	110002c3 	ldbu	r4,11(r2)
    8f14:	2008703a 	and	r4,r4,zero
    8f18:	200b883a 	mov	r5,r4
    8f1c:	3009883a 	mov	r4,r6
    8f20:	2908b03a 	or	r4,r5,r4
    8f24:	110002c5 	stb	r4,11(r2)
    8f28:	180ad63a 	srli	r5,r3,24
    8f2c:	10c00303 	ldbu	r3,12(r2)
    8f30:	1806703a 	and	r3,r3,zero
    8f34:	1809883a 	mov	r4,r3
    8f38:	2807883a 	mov	r3,r5
    8f3c:	20c6b03a 	or	r3,r4,r3
    8f40:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8f44:	e0bffc17 	ldw	r2,-16(fp)
    8f48:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8f4c:	00800044 	movi	r2,1
}
    8f50:	e037883a 	mov	sp,fp
    8f54:	dfc00117 	ldw	ra,4(sp)
    8f58:	df000017 	ldw	fp,0(sp)
    8f5c:	dec00204 	addi	sp,sp,8
    8f60:	f800283a 	ret

00008f64 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8f64:	defff904 	addi	sp,sp,-28
    8f68:	df000615 	stw	fp,24(sp)
    8f6c:	df000604 	addi	fp,sp,24
    8f70:	e13ffb15 	stw	r4,-20(fp)
    8f74:	3009883a 	mov	r4,r6
    8f78:	3807883a 	mov	r3,r7
    8f7c:	e0800117 	ldw	r2,4(fp)
    8f80:	e17ffc05 	stb	r5,-16(fp)
    8f84:	e13ffd05 	stb	r4,-12(fp)
    8f88:	e0fffe05 	stb	r3,-8(fp)
    8f8c:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8f90:	e0800217 	ldw	r2,8(fp)
    8f94:	10c000c3 	ldbu	r3,3(r2)
    8f98:	e0bffb17 	ldw	r2,-20(fp)
    8f9c:	10800483 	ldbu	r2,18(r2)
    8fa0:	1884703a 	and	r2,r3,r2
    8fa4:	10803fcc 	andi	r2,r2,255
    8fa8:	10800098 	cmpnei	r2,r2,2
    8fac:	10001f1e 	bne	r2,zero,902c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8fb0:	e0800217 	ldw	r2,8(fp)
    8fb4:	10800083 	ldbu	r2,2(r2)
    8fb8:	10803fcc 	andi	r2,r2,255
    8fbc:	1080201c 	xori	r2,r2,128
    8fc0:	10bfe004 	addi	r2,r2,-128
    8fc4:	1000020e 	bge	r2,zero,8fd0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8fc8:	00800044 	movi	r2,1
    8fcc:	00000106 	br	8fd4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8fd0:	00800084 	movi	r2,2
    8fd4:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8fd8:	e0fffa03 	ldbu	r3,-24(fp)
    8fdc:	e0800217 	ldw	r2,8(fp)
    8fe0:	10800083 	ldbu	r2,2(r2)
    8fe4:	108003cc 	andi	r2,r2,15
    8fe8:	100b883a 	mov	r5,r2
    8fec:	e13ffb17 	ldw	r4,-20(fp)
    8ff0:	1805883a 	mov	r2,r3
    8ff4:	1085883a 	add	r2,r2,r2
    8ff8:	10c5883a 	add	r2,r2,r3
    8ffc:	2085883a 	add	r2,r4,r2
    9000:	108004c4 	addi	r2,r2,19
    9004:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    9008:	e0800217 	ldw	r2,8(fp)
    900c:	10c00103 	ldbu	r3,4(r2)
    9010:	10800143 	ldbu	r2,5(r2)
    9014:	1004923a 	slli	r2,r2,8
    9018:	10c4b03a 	or	r2,r2,r3
    901c:	10bfffcc 	andi	r2,r2,65535
    9020:	10801070 	cmpltui	r2,r2,65
    9024:	10000d1e 	bne	r2,zero,905c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    9028:	00000206 	br	9034 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    902c:	0005883a 	mov	r2,zero
    9030:	00001906 	br	9098 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    9034:	e0fffa03 	ldbu	r3,-24(fp)
    9038:	e13ffb17 	ldw	r4,-20(fp)
    903c:	1805883a 	mov	r2,r3
    9040:	1085883a 	add	r2,r2,r2
    9044:	10c5883a 	add	r2,r2,r3
    9048:	2085883a 	add	r2,r4,r2
    904c:	10800504 	addi	r2,r2,20
    9050:	00c01004 	movi	r3,64
    9054:	10c00005 	stb	r3,0(r2)
    9058:	00000e06 	br	9094 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    905c:	e0fffa03 	ldbu	r3,-24(fp)
    9060:	e0800217 	ldw	r2,8(fp)
    9064:	11000103 	ldbu	r4,4(r2)
    9068:	10800143 	ldbu	r2,5(r2)
    906c:	1004923a 	slli	r2,r2,8
    9070:	1104b03a 	or	r2,r2,r4
    9074:	100b883a 	mov	r5,r2
    9078:	e13ffb17 	ldw	r4,-20(fp)
    907c:	1805883a 	mov	r2,r3
    9080:	1085883a 	add	r2,r2,r2
    9084:	10c5883a 	add	r2,r2,r3
    9088:	2085883a 	add	r2,r4,r2
    908c:	10800504 	addi	r2,r2,20
    9090:	11400005 	stb	r5,0(r2)
        }

        return true;
    9094:	00800044 	movi	r2,1
}
    9098:	e037883a 	mov	sp,fp
    909c:	df000017 	ldw	fp,0(sp)
    90a0:	dec00104 	addi	sp,sp,4
    90a4:	f800283a 	ret

000090a8 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    90a8:	213fff04 	addi	r4,r4,-4
    90ac:	0008f641 	jmpi	8f64 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

000090b0 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    90b0:	defffa04 	addi	sp,sp,-24
    90b4:	df000515 	stw	fp,20(sp)
    90b8:	df000504 	addi	fp,sp,20
    90bc:	e13ffb15 	stw	r4,-20(fp)
    90c0:	3009883a 	mov	r4,r6
    90c4:	3807883a 	mov	r3,r7
    90c8:	e0800117 	ldw	r2,4(fp)
    90cc:	e17ffc05 	stb	r5,-16(fp)
    90d0:	e13ffd05 	stb	r4,-12(fp)
    90d4:	e0fffe05 	stb	r3,-8(fp)
    90d8:	e0bfff05 	stb	r2,-4(fp)
                return true;
    90dc:	00800044 	movi	r2,1
        };
    90e0:	e037883a 	mov	sp,fp
    90e4:	df000017 	ldw	fp,0(sp)
    90e8:	dec00104 	addi	sp,sp,4
    90ec:	f800283a 	ret

000090f0 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    90f0:	defffe04 	addi	sp,sp,-8
    90f4:	df000115 	stw	fp,4(sp)
    90f8:	df000104 	addi	fp,sp,4
    90fc:	e13fff15 	stw	r4,-4(fp)
    9100:	e0bfff17 	ldw	r2,-4(fp)
    9104:	10800d83 	ldbu	r2,54(r2)
    9108:	e037883a 	mov	sp,fp
    910c:	df000017 	ldw	fp,0(sp)
    9110:	dec00104 	addi	sp,sp,4
    9114:	f800283a 	ret

00009118 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    9118:	defffe04 	addi	sp,sp,-8
    911c:	df000115 	stw	fp,4(sp)
    9120:	df000104 	addi	fp,sp,4
    9124:	e13fff15 	stw	r4,-4(fp)
    9128:	e0bfff17 	ldw	r2,-4(fp)
    912c:	10800cc3 	ldbu	r2,51(r2)
    9130:	e037883a 	mov	sp,fp
    9134:	df000017 	ldw	fp,0(sp)
    9138:	dec00104 	addi	sp,sp,4
    913c:	f800283a 	ret

00009140 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    9140:	defffd04 	addi	sp,sp,-12
    9144:	df000215 	stw	fp,8(sp)
    9148:	df000204 	addi	fp,sp,8
    914c:	e13ffe15 	stw	r4,-8(fp)
    9150:	2805883a 	mov	r2,r5
    9154:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    9158:	e0bfff03 	ldbu	r2,-4(fp)
    915c:	10803c28 	cmpgeui	r2,r2,240
    9160:	1000031e 	bne	r2,zero,9170 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    9164:	e0bfff03 	ldbu	r2,-4(fp)
    9168:	1004d13a 	srli	r2,r2,4
    916c:	00000606 	br	9188 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    9170:	e0bfff03 	ldbu	r2,-4(fp)
    9174:	10c003cc 	andi	r3,r2,15
    9178:	008000b4 	movhi	r2,2
    917c:	10996184 	addi	r2,r2,25990
    9180:	1885883a 	add	r2,r3,r2
    9184:	10800003 	ldbu	r2,0(r2)
        };
    9188:	e037883a 	mov	sp,fp
    918c:	df000017 	ldw	fp,0(sp)
    9190:	dec00104 	addi	sp,sp,4
    9194:	f800283a 	ret

00009198 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    9198:	defffd04 	addi	sp,sp,-12
    919c:	df000215 	stw	fp,8(sp)
    91a0:	df000204 	addi	fp,sp,8
    91a4:	e13ffe15 	stw	r4,-8(fp)
    91a8:	2805883a 	mov	r2,r5
    91ac:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    91b0:	e0ffff03 	ldbu	r3,-4(fp)
    91b4:	008000b4 	movhi	r2,2
    91b8:	10995d84 	addi	r2,r2,25974
    91bc:	1885883a 	add	r2,r3,r2
    91c0:	10800003 	ldbu	r2,0(r2)
        };
    91c4:	e037883a 	mov	sp,fp
    91c8:	df000017 	ldw	fp,0(sp)
    91cc:	dec00104 	addi	sp,sp,4
    91d0:	f800283a 	ret

000091d4 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    91d4:	defffe04 	addi	sp,sp,-8
    91d8:	df000115 	stw	fp,4(sp)
    91dc:	df000104 	addi	fp,sp,4
    91e0:	e13fff15 	stw	r4,-4(fp)
    91e4:	e0bfff17 	ldw	r2,-4(fp)
    91e8:	10800303 	ldbu	r2,12(r2)
    91ec:	e037883a 	mov	sp,fp
    91f0:	df000017 	ldw	fp,0(sp)
    91f4:	dec00104 	addi	sp,sp,4
    91f8:	f800283a 	ret

000091fc <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    91fc:	defffe04 	addi	sp,sp,-8
    9200:	df000115 	stw	fp,4(sp)
    9204:	df000104 	addi	fp,sp,4
    9208:	e13fff15 	stw	r4,-4(fp)
    920c:	008000b4 	movhi	r2,2
    9210:	10997a04 	addi	r2,r2,26088
    9214:	e0ffff17 	ldw	r3,-4(fp)
    9218:	18800015 	stw	r2,0(r3)
    921c:	0001883a 	nop
    9220:	e037883a 	mov	sp,fp
    9224:	df000017 	ldw	fp,0(sp)
    9228:	dec00104 	addi	sp,sp,4
    922c:	f800283a 	ret

00009230 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    9230:	defffd04 	addi	sp,sp,-12
    9234:	df000215 	stw	fp,8(sp)
    9238:	df000204 	addi	fp,sp,8
    923c:	2005883a 	mov	r2,r4
    9240:	e17fff15 	stw	r5,-4(fp)
    9244:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    9248:	0001883a 	nop
    924c:	e037883a 	mov	sp,fp
    9250:	df000017 	ldw	fp,0(sp)
    9254:	dec00104 	addi	sp,sp,4
    9258:	f800283a 	ret

0000925c <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    925c:	deffe204 	addi	sp,sp,-120
    9260:	dfc01d15 	stw	ra,116(sp)
    9264:	df001c15 	stw	fp,112(sp)
    9268:	df001c04 	addi	fp,sp,112
    926c:	e13ffd15 	stw	r4,-12(fp)
    9270:	2805883a 	mov	r2,r5
    9274:	e1bfff15 	stw	r6,-4(fp)
    9278:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    927c:	00801004 	movi	r2,64
    9280:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    9284:	e0bffd17 	ldw	r2,-12(fp)
    9288:	11000217 	ldw	r4,8(r2)
    928c:	e0bffd17 	ldw	r2,-12(fp)
    9290:	10800303 	ldbu	r2,12(r2)
    9294:	11403fcc 	andi	r5,r2,255
    9298:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    929c:	e0ffff17 	ldw	r3,-4(fp)
    92a0:	d8c00715 	stw	r3,28(sp)
    92a4:	e0ffec84 	addi	r3,fp,-78
    92a8:	d8c00615 	stw	r3,24(sp)
    92ac:	00c01004 	movi	r3,64
    92b0:	d8c00515 	stw	r3,20(sp)
    92b4:	00c02004 	movi	r3,128
    92b8:	d8c00415 	stw	r3,16(sp)
    92bc:	d8800315 	stw	r2,12(sp)
    92c0:	00800884 	movi	r2,34
    92c4:	d8800215 	stw	r2,8(sp)
    92c8:	d8000115 	stw	zero,4(sp)
    92cc:	00800184 	movi	r2,6
    92d0:	d8800015 	stw	r2,0(sp)
    92d4:	01c02044 	movi	r7,129
    92d8:	000d883a 	mov	r6,zero
    92dc:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    92e0:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    92e4:	e0bfec43 	ldbu	r2,-79(fp)
}
    92e8:	e037883a 	mov	sp,fp
    92ec:	dfc00117 	ldw	ra,4(sp)
    92f0:	df000017 	ldw	fp,0(sp)
    92f4:	dec00204 	addi	sp,sp,8
    92f8:	f800283a 	ret

000092fc <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    92fc:	defff004 	addi	sp,sp,-64
    9300:	dfc00f15 	stw	ra,60(sp)
    9304:	df000e15 	stw	fp,56(sp)
    9308:	df000e04 	addi	fp,sp,56
    930c:	e13ffa15 	stw	r4,-24(fp)
    9310:	2811883a 	mov	r8,r5
    9314:	300b883a 	mov	r5,r6
    9318:	3809883a 	mov	r4,r7
    931c:	e0c00217 	ldw	r3,8(fp)
    9320:	e0800317 	ldw	r2,12(fp)
    9324:	e23ffb05 	stb	r8,-20(fp)
    9328:	e17ffc05 	stb	r5,-16(fp)
    932c:	e13ffd05 	stb	r4,-12(fp)
    9330:	e0fffe05 	stb	r3,-8(fp)
    9334:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    9338:	e0bffa17 	ldw	r2,-24(fp)
    933c:	12000217 	ldw	r8,8(r2)
    9340:	e0bffa17 	ldw	r2,-24(fp)
    9344:	10800303 	ldbu	r2,12(r2)
    9348:	12403fcc 	andi	r9,r2,255
    934c:	e2bffb03 	ldbu	r10,-20(fp)
    9350:	e0bffe03 	ldbu	r2,-8(fp)
    9354:	e0fffd03 	ldbu	r3,-12(fp)
    9358:	e13ffc03 	ldbu	r4,-16(fp)
    935c:	e17fff0b 	ldhu	r5,-4(fp)
    9360:	e1bfff0b 	ldhu	r6,-4(fp)
    9364:	d8000715 	stw	zero,28(sp)
    9368:	e1c00417 	ldw	r7,16(fp)
    936c:	d9c00615 	stw	r7,24(sp)
    9370:	d9800515 	stw	r6,20(sp)
    9374:	d9400415 	stw	r5,16(sp)
    9378:	d9000315 	stw	r4,12(sp)
    937c:	d8c00215 	stw	r3,8(sp)
    9380:	d8800115 	stw	r2,4(sp)
    9384:	00800244 	movi	r2,9
    9388:	d8800015 	stw	r2,0(sp)
    938c:	01c00844 	movi	r7,33
    9390:	500d883a 	mov	r6,r10
    9394:	480b883a 	mov	r5,r9
    9398:	4009883a 	mov	r4,r8
    939c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    93a0:	e037883a 	mov	sp,fp
    93a4:	dfc00117 	ldw	ra,4(sp)
    93a8:	df000017 	ldw	fp,0(sp)
    93ac:	dec00204 	addi	sp,sp,8
    93b0:	f800283a 	ret

000093b4 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    93b4:	defff004 	addi	sp,sp,-64
    93b8:	dfc00f15 	stw	ra,60(sp)
    93bc:	df000e15 	stw	fp,56(sp)
    93c0:	df000e04 	addi	fp,sp,56
    93c4:	e13ffa15 	stw	r4,-24(fp)
    93c8:	2811883a 	mov	r8,r5
    93cc:	300b883a 	mov	r5,r6
    93d0:	3809883a 	mov	r4,r7
    93d4:	e0c00217 	ldw	r3,8(fp)
    93d8:	e0800317 	ldw	r2,12(fp)
    93dc:	e23ffb05 	stb	r8,-20(fp)
    93e0:	e17ffc05 	stb	r5,-16(fp)
    93e4:	e13ffd05 	stb	r4,-12(fp)
    93e8:	e0fffe05 	stb	r3,-8(fp)
    93ec:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    93f0:	e0bffa17 	ldw	r2,-24(fp)
    93f4:	12000217 	ldw	r8,8(r2)
    93f8:	e0bffa17 	ldw	r2,-24(fp)
    93fc:	10800303 	ldbu	r2,12(r2)
    9400:	12403fcc 	andi	r9,r2,255
    9404:	e2bffb03 	ldbu	r10,-20(fp)
    9408:	e0bffe03 	ldbu	r2,-8(fp)
    940c:	e0fffd03 	ldbu	r3,-12(fp)
    9410:	e13ffc03 	ldbu	r4,-16(fp)
    9414:	e17fff0b 	ldhu	r5,-4(fp)
    9418:	e1bfff0b 	ldhu	r6,-4(fp)
    941c:	d8000715 	stw	zero,28(sp)
    9420:	e1c00417 	ldw	r7,16(fp)
    9424:	d9c00615 	stw	r7,24(sp)
    9428:	d9800515 	stw	r6,20(sp)
    942c:	d9400415 	stw	r5,16(sp)
    9430:	d9000315 	stw	r4,12(sp)
    9434:	d8c00215 	stw	r3,8(sp)
    9438:	d8800115 	stw	r2,4(sp)
    943c:	00800044 	movi	r2,1
    9440:	d8800015 	stw	r2,0(sp)
    9444:	01c02844 	movi	r7,161
    9448:	500d883a 	mov	r6,r10
    944c:	480b883a 	mov	r5,r9
    9450:	4009883a 	mov	r4,r8
    9454:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9458:	e037883a 	mov	sp,fp
    945c:	dfc00117 	ldw	ra,4(sp)
    9460:	df000017 	ldw	fp,0(sp)
    9464:	dec00204 	addi	sp,sp,8
    9468:	f800283a 	ret

0000946c <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    946c:	defff204 	addi	sp,sp,-56
    9470:	dfc00d15 	stw	ra,52(sp)
    9474:	df000c15 	stw	fp,48(sp)
    9478:	df000c04 	addi	fp,sp,48
    947c:	e13ffc15 	stw	r4,-16(fp)
    9480:	2807883a 	mov	r3,r5
    9484:	3005883a 	mov	r2,r6
    9488:	e1ffff15 	stw	r7,-4(fp)
    948c:	e0fffd05 	stb	r3,-12(fp)
    9490:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    9494:	e0bffc17 	ldw	r2,-16(fp)
    9498:	12000217 	ldw	r8,8(r2)
    949c:	e0bffc17 	ldw	r2,-16(fp)
    94a0:	10800303 	ldbu	r2,12(r2)
    94a4:	11403fcc 	andi	r5,r2,255
    94a8:	e0bffe03 	ldbu	r2,-8(fp)
    94ac:	e0fffd03 	ldbu	r3,-12(fp)
    94b0:	d8000715 	stw	zero,28(sp)
    94b4:	e13fff17 	ldw	r4,-4(fp)
    94b8:	d9000615 	stw	r4,24(sp)
    94bc:	01000044 	movi	r4,1
    94c0:	d9000515 	stw	r4,20(sp)
    94c4:	01000044 	movi	r4,1
    94c8:	d9000415 	stw	r4,16(sp)
    94cc:	d8c00315 	stw	r3,12(sp)
    94d0:	d8000215 	stw	zero,8(sp)
    94d4:	d8800115 	stw	r2,4(sp)
    94d8:	00800084 	movi	r2,2
    94dc:	d8800015 	stw	r2,0(sp)
    94e0:	01c02844 	movi	r7,161
    94e4:	000d883a 	mov	r6,zero
    94e8:	4009883a 	mov	r4,r8
    94ec:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    94f0:	e037883a 	mov	sp,fp
    94f4:	dfc00117 	ldw	ra,4(sp)
    94f8:	df000017 	ldw	fp,0(sp)
    94fc:	dec00204 	addi	sp,sp,8
    9500:	f800283a 	ret

00009504 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9504:	defff204 	addi	sp,sp,-56
    9508:	dfc00d15 	stw	ra,52(sp)
    950c:	df000c15 	stw	fp,48(sp)
    9510:	df000c04 	addi	fp,sp,48
    9514:	e13ffc15 	stw	r4,-16(fp)
    9518:	2809883a 	mov	r4,r5
    951c:	3007883a 	mov	r3,r6
    9520:	3805883a 	mov	r2,r7
    9524:	e13ffd05 	stb	r4,-12(fp)
    9528:	e0fffe05 	stb	r3,-8(fp)
    952c:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    9530:	e0bffc17 	ldw	r2,-16(fp)
    9534:	12000217 	ldw	r8,8(r2)
    9538:	e0bffc17 	ldw	r2,-16(fp)
    953c:	10800303 	ldbu	r2,12(r2)
    9540:	11403fcc 	andi	r5,r2,255
    9544:	e0bffe03 	ldbu	r2,-8(fp)
    9548:	e0ffff03 	ldbu	r3,-4(fp)
    954c:	e13ffd03 	ldbu	r4,-12(fp)
    9550:	d8000715 	stw	zero,28(sp)
    9554:	d8000615 	stw	zero,24(sp)
    9558:	d8000515 	stw	zero,20(sp)
    955c:	d8000415 	stw	zero,16(sp)
    9560:	d9000315 	stw	r4,12(sp)
    9564:	d8c00215 	stw	r3,8(sp)
    9568:	d8800115 	stw	r2,4(sp)
    956c:	00800284 	movi	r2,10
    9570:	d8800015 	stw	r2,0(sp)
    9574:	01c00844 	movi	r7,33
    9578:	000d883a 	mov	r6,zero
    957c:	4009883a 	mov	r4,r8
    9580:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9584:	e037883a 	mov	sp,fp
    9588:	dfc00117 	ldw	ra,4(sp)
    958c:	df000017 	ldw	fp,0(sp)
    9590:	dec00204 	addi	sp,sp,8
    9594:	f800283a 	ret

00009598 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    9598:	defff304 	addi	sp,sp,-52
    959c:	dfc00c15 	stw	ra,48(sp)
    95a0:	df000b15 	stw	fp,44(sp)
    95a4:	df000b04 	addi	fp,sp,44
    95a8:	e13ffd15 	stw	r4,-12(fp)
    95ac:	2807883a 	mov	r3,r5
    95b0:	3005883a 	mov	r2,r6
    95b4:	e0fffe05 	stb	r3,-8(fp)
    95b8:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    95bc:	e0bffd17 	ldw	r2,-12(fp)
    95c0:	11000217 	ldw	r4,8(r2)
    95c4:	e0bffd17 	ldw	r2,-12(fp)
    95c8:	10800303 	ldbu	r2,12(r2)
    95cc:	11403fcc 	andi	r5,r2,255
    95d0:	e0bfff03 	ldbu	r2,-4(fp)
    95d4:	e0fffe03 	ldbu	r3,-8(fp)
    95d8:	d8000715 	stw	zero,28(sp)
    95dc:	d8000615 	stw	zero,24(sp)
    95e0:	d8000515 	stw	zero,20(sp)
    95e4:	d8000415 	stw	zero,16(sp)
    95e8:	d8c00315 	stw	r3,12(sp)
    95ec:	d8000215 	stw	zero,8(sp)
    95f0:	d8800115 	stw	r2,4(sp)
    95f4:	008002c4 	movi	r2,11
    95f8:	d8800015 	stw	r2,0(sp)
    95fc:	01c00844 	movi	r7,33
    9600:	000d883a 	mov	r6,zero
    9604:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9608:	e037883a 	mov	sp,fp
    960c:	dfc00117 	ldw	ra,4(sp)
    9610:	df000017 	ldw	fp,0(sp)
    9614:	dec00204 	addi	sp,sp,8
    9618:	f800283a 	ret

0000961c <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    961c:	defff304 	addi	sp,sp,-52
    9620:	dfc00c15 	stw	ra,48(sp)
    9624:	df000b15 	stw	fp,44(sp)
    9628:	df000b04 	addi	fp,sp,44
    962c:	e13ffd15 	stw	r4,-12(fp)
    9630:	2805883a 	mov	r2,r5
    9634:	e1bfff15 	stw	r6,-4(fp)
    9638:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    963c:	e0bffd17 	ldw	r2,-12(fp)
    9640:	11000217 	ldw	r4,8(r2)
    9644:	e0bffd17 	ldw	r2,-12(fp)
    9648:	10800303 	ldbu	r2,12(r2)
    964c:	11403fcc 	andi	r5,r2,255
    9650:	e0bffe03 	ldbu	r2,-8(fp)
    9654:	d8000715 	stw	zero,28(sp)
    9658:	e0ffff17 	ldw	r3,-4(fp)
    965c:	d8c00615 	stw	r3,24(sp)
    9660:	00c00044 	movi	r3,1
    9664:	d8c00515 	stw	r3,20(sp)
    9668:	00c00044 	movi	r3,1
    966c:	d8c00415 	stw	r3,16(sp)
    9670:	d8800315 	stw	r2,12(sp)
    9674:	d8000215 	stw	zero,8(sp)
    9678:	d8000115 	stw	zero,4(sp)
    967c:	008000c4 	movi	r2,3
    9680:	d8800015 	stw	r2,0(sp)
    9684:	01c02844 	movi	r7,161
    9688:	000d883a 	mov	r6,zero
    968c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9690:	e037883a 	mov	sp,fp
    9694:	dfc00117 	ldw	ra,4(sp)
    9698:	df000017 	ldw	fp,0(sp)
    969c:	dec00204 	addi	sp,sp,8
    96a0:	f800283a 	ret

000096a4 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    96a4:	defffc04 	addi	sp,sp,-16
    96a8:	dfc00315 	stw	ra,12(sp)
    96ac:	df000215 	stw	fp,8(sp)
    96b0:	df000204 	addi	fp,sp,8
    96b4:	e13ffe15 	stw	r4,-8(fp)
    96b8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    96bc:	e0bfff17 	ldw	r2,-4(fp)
    96c0:	10800003 	ldbu	r2,0(r2)
    96c4:	10803fcc 	andi	r2,r2,255
    96c8:	01402004 	movi	r5,128
    96cc:	1009883a 	mov	r4,r2
    96d0:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    96d4:	e0bfff17 	ldw	r2,-4(fp)
    96d8:	10800043 	ldbu	r2,1(r2)
    96dc:	10803fcc 	andi	r2,r2,255
    96e0:	01402004 	movi	r5,128
    96e4:	1009883a 	mov	r4,r2
    96e8:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    96ec:	e0bfff17 	ldw	r2,-4(fp)
    96f0:	10800083 	ldbu	r2,2(r2)
    96f4:	10803fcc 	andi	r2,r2,255
    96f8:	01402004 	movi	r5,128
    96fc:	1009883a 	mov	r4,r2
    9700:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9704:	e0bfff17 	ldw	r2,-4(fp)
    9708:	108000c3 	ldbu	r2,3(r2)
    970c:	10803fcc 	andi	r2,r2,255
    9710:	01402004 	movi	r5,128
    9714:	1009883a 	mov	r4,r2
    9718:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    971c:	e0bfff17 	ldw	r2,-4(fp)
    9720:	10c00103 	ldbu	r3,4(r2)
    9724:	10800143 	ldbu	r2,5(r2)
    9728:	1004923a 	slli	r2,r2,8
    972c:	10c4b03a 	or	r2,r2,r3
    9730:	10bfffcc 	andi	r2,r2,65535
    9734:	01402004 	movi	r5,128
    9738:	1009883a 	mov	r4,r2
    973c:	00092300 	call	9230 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    9740:	e0bfff17 	ldw	r2,-4(fp)
    9744:	10800183 	ldbu	r2,6(r2)
    9748:	10803fcc 	andi	r2,r2,255
    974c:	01402004 	movi	r5,128
    9750:	1009883a 	mov	r4,r2
    9754:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>
}
    9758:	0001883a 	nop
    975c:	e037883a 	mov	sp,fp
    9760:	dfc00117 	ldw	ra,4(sp)
    9764:	df000017 	ldw	fp,0(sp)
    9768:	dec00204 	addi	sp,sp,8
    976c:	f800283a 	ret

00009770 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    9770:	defffc04 	addi	sp,sp,-16
    9774:	dfc00315 	stw	ra,12(sp)
    9778:	df000215 	stw	fp,8(sp)
    977c:	df000204 	addi	fp,sp,8
    9780:	e13ffe15 	stw	r4,-8(fp)
    9784:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    9788:	e0bfff17 	ldw	r2,-4(fp)
    978c:	10800003 	ldbu	r2,0(r2)
    9790:	10803fcc 	andi	r2,r2,255
    9794:	01402004 	movi	r5,128
    9798:	1009883a 	mov	r4,r2
    979c:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    97a0:	e0bfff17 	ldw	r2,-4(fp)
    97a4:	10800043 	ldbu	r2,1(r2)
    97a8:	10803fcc 	andi	r2,r2,255
    97ac:	01402004 	movi	r5,128
    97b0:	1009883a 	mov	r4,r2
    97b4:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    97b8:	e0bfff17 	ldw	r2,-4(fp)
    97bc:	10c00083 	ldbu	r3,2(r2)
    97c0:	108000c3 	ldbu	r2,3(r2)
    97c4:	1004923a 	slli	r2,r2,8
    97c8:	10c4b03a 	or	r2,r2,r3
    97cc:	10bfffcc 	andi	r2,r2,65535
    97d0:	01402004 	movi	r5,128
    97d4:	1009883a 	mov	r4,r2
    97d8:	00092300 	call	9230 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    97dc:	e0bfff17 	ldw	r2,-4(fp)
    97e0:	10800103 	ldbu	r2,4(r2)
    97e4:	10803fcc 	andi	r2,r2,255
    97e8:	01402004 	movi	r5,128
    97ec:	1009883a 	mov	r4,r2
    97f0:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    97f4:	e0bfff17 	ldw	r2,-4(fp)
    97f8:	10800143 	ldbu	r2,5(r2)
    97fc:	10803fcc 	andi	r2,r2,255
    9800:	01402004 	movi	r5,128
    9804:	1009883a 	mov	r4,r2
    9808:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    980c:	e0bfff17 	ldw	r2,-4(fp)
    9810:	10800183 	ldbu	r2,6(r2)
    9814:	10803fcc 	andi	r2,r2,255
    9818:	01402004 	movi	r5,128
    981c:	1009883a 	mov	r4,r2
    9820:	0002ea40 	call	2ea4 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9824:	e0bfff17 	ldw	r2,-4(fp)
    9828:	10c001c3 	ldbu	r3,7(r2)
    982c:	10800203 	ldbu	r2,8(r2)
    9830:	1004923a 	slli	r2,r2,8
    9834:	10c4b03a 	or	r2,r2,r3
    9838:	10bfffcc 	andi	r2,r2,65535
    983c:	01402004 	movi	r5,128
    9840:	1009883a 	mov	r4,r2
    9844:	00092300 	call	9230 <_Z10D_PrintHexItEvT_i>
}
    9848:	0001883a 	nop
    984c:	e037883a 	mov	sp,fp
    9850:	dfc00117 	ldw	ra,4(sp)
    9854:	df000017 	ldw	fp,0(sp)
    9858:	dec00204 	addi	sp,sp,8
    985c:	f800283a 	ret

00009860 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    9860:	defffd04 	addi	sp,sp,-12
    9864:	dfc00215 	stw	ra,8(sp)
    9868:	df000115 	stw	fp,4(sp)
    986c:	df000104 	addi	fp,sp,4
    9870:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9874:	010000f4 	movhi	r4,3
    9878:	2121c204 	addi	r4,r4,-30968
    987c:	000f2fc0 	call	f2fc <puts>
	vbusState = 0;
    9880:	d0323f45 	stb	zero,-14083(gp)
};
    9884:	0001883a 	nop
    9888:	e037883a 	mov	sp,fp
    988c:	dfc00117 	ldw	ra,4(sp)
    9890:	df000017 	ldw	fp,0(sp)
    9894:	dec00204 	addi	sp,sp,8
    9898:	f800283a 	ret

0000989c <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    989c:	defffe04 	addi	sp,sp,-8
    98a0:	df000115 	stw	fp,4(sp)
    98a4:	df000104 	addi	fp,sp,4
    98a8:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    98ac:	d0b23f43 	ldbu	r2,-14083(gp)
};
    98b0:	e037883a 	mov	sp,fp
    98b4:	df000017 	ldw	fp,0(sp)
    98b8:	dec00104 	addi	sp,sp,4
    98bc:	f800283a 	ret

000098c0 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    98c0:	defff704 	addi	sp,sp,-36
    98c4:	dfc00815 	stw	ra,32(sp)
    98c8:	df000715 	stw	fp,28(sp)
    98cc:	df000704 	addi	fp,sp,28
    98d0:	e13ffd15 	stw	r4,-12(fp)
    98d4:	2807883a 	mov	r3,r5
    98d8:	3005883a 	mov	r2,r6
    98dc:	e0fffe05 	stb	r3,-8(fp)
    98e0:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    98e4:	e03ffc45 	stb	zero,-15(fp)
    98e8:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    98ec:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    98f0:	e0bffe03 	ldbu	r2,-8(fp)
    98f4:	10800084 	addi	r2,r2,2
    98f8:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    98fc:	e0bfff03 	ldbu	r2,-4(fp)
    9900:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9904:	e0fffc44 	addi	r3,fp,-15
    9908:	d8000215 	stw	zero,8(sp)
    990c:	e0bffcc4 	addi	r2,fp,-13
    9910:	d8800115 	stw	r2,4(sp)
    9914:	d8000015 	stw	zero,0(sp)
    9918:	180f883a 	mov	r7,r3
    991c:	01800084 	movi	r6,2
    9920:	000b883a 	mov	r5,zero
    9924:	01010034 	movhi	r4,1024
    9928:	21064804 	addi	r4,r4,6432
    992c:	00225500 	call	22550 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    9930:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9934:	0001883a 	nop
    9938:	e037883a 	mov	sp,fp
    993c:	dfc00117 	ldw	ra,4(sp)
    9940:	df000017 	ldw	fp,0(sp)
    9944:	dec00204 	addi	sp,sp,8
    9948:	f800283a 	ret

0000994c <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    994c:	defff304 	addi	sp,sp,-52
    9950:	dfc00c15 	stw	ra,48(sp)
    9954:	df000b15 	stw	fp,44(sp)
    9958:	dc000a15 	stw	r16,40(sp)
    995c:	df000b04 	addi	fp,sp,44
    9960:	e13ffb15 	stw	r4,-20(fp)
    9964:	3009883a 	mov	r4,r6
    9968:	e1fffe15 	stw	r7,-8(fp)
    996c:	e17ffc05 	stb	r5,-16(fp)
    9970:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9974:	d809883a 	mov	r4,sp
    9978:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    997c:	e13ffd03 	ldbu	r4,-12(fp)
    9980:	e13ff815 	stw	r4,-32(fp)
    9984:	200b883a 	mov	r5,r4
    9988:	29400044 	addi	r5,r5,1
    998c:	2819883a 	mov	r12,r5
    9990:	001b883a 	mov	r13,zero
    9994:	600ad77a 	srli	r5,r12,29
    9998:	681290fa 	slli	r9,r13,3
    999c:	2a52b03a 	or	r9,r5,r9
    99a0:	601090fa 	slli	r8,r12,3
    99a4:	200b883a 	mov	r5,r4
    99a8:	29400044 	addi	r5,r5,1
    99ac:	2815883a 	mov	r10,r5
    99b0:	0017883a 	mov	r11,zero
    99b4:	500ad77a 	srli	r5,r10,29
    99b8:	580690fa 	slli	r3,r11,3
    99bc:	28c6b03a 	or	r3,r5,r3
    99c0:	500490fa 	slli	r2,r10,3
    99c4:	2005883a 	mov	r2,r4
    99c8:	10800044 	addi	r2,r2,1
    99cc:	108000c4 	addi	r2,r2,3
    99d0:	1004d0ba 	srli	r2,r2,2
    99d4:	1085883a 	add	r2,r2,r2
    99d8:	1085883a 	add	r2,r2,r2
    99dc:	d8b7c83a 	sub	sp,sp,r2
    99e0:	d8800304 	addi	r2,sp,12
    99e4:	1005883a 	mov	r2,r2
    99e8:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    99ec:	e0bffc03 	ldbu	r2,-16(fp)
    99f0:	10800084 	addi	r2,r2,2
    99f4:	1007883a 	mov	r3,r2
    99f8:	e0bff917 	ldw	r2,-28(fp)
    99fc:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    9a00:	e0bff917 	ldw	r2,-28(fp)
    9a04:	10800044 	addi	r2,r2,1
    9a08:	e0fffd03 	ldbu	r3,-12(fp)
    9a0c:	180d883a 	mov	r6,r3
    9a10:	e17ffe17 	ldw	r5,-8(fp)
    9a14:	1009883a 	mov	r4,r2
    9a18:	000ef400 	call	ef40 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9a1c:	e0bffd03 	ldbu	r2,-12(fp)
    9a20:	10800044 	addi	r2,r2,1
    9a24:	1009883a 	mov	r4,r2
    9a28:	e0fff917 	ldw	r3,-28(fp)
    9a2c:	d8000215 	stw	zero,8(sp)
    9a30:	e0bffa44 	addi	r2,fp,-23
    9a34:	d8800115 	stw	r2,4(sp)
    9a38:	d8000015 	stw	zero,0(sp)
    9a3c:	180f883a 	mov	r7,r3
    9a40:	200d883a 	mov	r6,r4
    9a44:	000b883a 	mov	r5,zero
    9a48:	01010034 	movhi	r4,1024
    9a4c:	21064804 	addi	r4,r4,6432
    9a50:	00225500 	call	22550 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9a54:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9a58:	e0bffd03 	ldbu	r2,-12(fp)
    9a5c:	e0fffe17 	ldw	r3,-8(fp)
    9a60:	1885883a 	add	r2,r3,r2
    9a64:	8037883a 	mov	sp,r16
}
    9a68:	e6ffff04 	addi	sp,fp,-4
    9a6c:	dfc00217 	ldw	ra,8(sp)
    9a70:	df000117 	ldw	fp,4(sp)
    9a74:	dc000017 	ldw	r16,0(sp)
    9a78:	dec00304 	addi	sp,sp,12
    9a7c:	f800283a 	ret

00009a80 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    9a80:	defffc04 	addi	sp,sp,-16
    9a84:	dfc00315 	stw	ra,12(sp)
    9a88:	df000215 	stw	fp,8(sp)
    9a8c:	df000204 	addi	fp,sp,8
    9a90:	e13ffe15 	stw	r4,-8(fp)
    9a94:	2805883a 	mov	r2,r5
    9a98:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    9a9c:	010000f4 	movhi	r4,3
    9aa0:	2121c804 	addi	r4,r4,-30944
    9aa4:	000f2fc0 	call	f2fc <puts>
	regWr(rIOPINS1, data);
    9aa8:	e0bfff03 	ldbu	r2,-4(fp)
    9aac:	100d883a 	mov	r6,r2
    9ab0:	01402804 	movi	r5,160
    9ab4:	e13ffe17 	ldw	r4,-8(fp)
    9ab8:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    9abc:	e0bfff03 	ldbu	r2,-4(fp)
    9ac0:	1005d13a 	srai	r2,r2,4
    9ac4:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    9ac8:	e0bfff03 	ldbu	r2,-4(fp)
    9acc:	100d883a 	mov	r6,r2
    9ad0:	01402a04 	movi	r5,168
    9ad4:	e13ffe17 	ldw	r4,-8(fp)
    9ad8:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	return;
    9adc:	0001883a 	nop
}
    9ae0:	e037883a 	mov	sp,fp
    9ae4:	dfc00117 	ldw	ra,4(sp)
    9ae8:	df000017 	ldw	fp,0(sp)
    9aec:	dec00204 	addi	sp,sp,8
    9af0:	f800283a 	ret

00009af4 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    9af4:	defff804 	addi	sp,sp,-32
    9af8:	dfc00715 	stw	ra,28(sp)
    9afc:	df000615 	stw	fp,24(sp)
    9b00:	df000604 	addi	fp,sp,24
    9b04:	e13ffe15 	stw	r4,-8(fp)
    9b08:	2805883a 	mov	r2,r5
    9b0c:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9b10:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9b14:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9b18:	e0bfff03 	ldbu	r2,-4(fp)
    9b1c:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9b20:	e0fffd44 	addi	r3,fp,-11
    9b24:	d8000215 	stw	zero,8(sp)
    9b28:	e0bffd84 	addi	r2,fp,-10
    9b2c:	d8800115 	stw	r2,4(sp)
    9b30:	00800044 	movi	r2,1
    9b34:	d8800015 	stw	r2,0(sp)
    9b38:	180f883a 	mov	r7,r3
    9b3c:	01800044 	movi	r6,1
    9b40:	000b883a 	mov	r5,zero
    9b44:	01010034 	movhi	r4,1024
    9b48:	21064804 	addi	r4,r4,6432
    9b4c:	00225500 	call	22550 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    9b50:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9b54:	e0bffd83 	ldbu	r2,-10(fp)
}
    9b58:	e037883a 	mov	sp,fp
    9b5c:	dfc00117 	ldw	ra,4(sp)
    9b60:	df000017 	ldw	fp,0(sp)
    9b64:	dec00204 	addi	sp,sp,8
    9b68:	f800283a 	ret

00009b6c <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9b6c:	defff604 	addi	sp,sp,-40
    9b70:	dfc00915 	stw	ra,36(sp)
    9b74:	df000815 	stw	fp,32(sp)
    9b78:	df000804 	addi	fp,sp,32
    9b7c:	e13ffc15 	stw	r4,-16(fp)
    9b80:	2807883a 	mov	r3,r5
    9b84:	3005883a 	mov	r2,r6
    9b88:	e1ffff15 	stw	r7,-4(fp)
    9b8c:	e0fffd05 	stb	r3,-12(fp)
    9b90:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9b94:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9b98:	e0bffd03 	ldbu	r2,-12(fp)
    9b9c:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    9ba0:	e0bffe03 	ldbu	r2,-8(fp)
    9ba4:	e13ffb44 	addi	r4,fp,-19
    9ba8:	d8000215 	stw	zero,8(sp)
    9bac:	e0ffff17 	ldw	r3,-4(fp)
    9bb0:	d8c00115 	stw	r3,4(sp)
    9bb4:	d8800015 	stw	r2,0(sp)
    9bb8:	200f883a 	mov	r7,r4
    9bbc:	01800044 	movi	r6,1
    9bc0:	000b883a 	mov	r5,zero
    9bc4:	01010034 	movhi	r4,1024
    9bc8:	21064804 	addi	r4,r4,6432
    9bcc:	00225500 	call	22550 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    9bd0:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    9bd4:	e0bffe03 	ldbu	r2,-8(fp)
    9bd8:	e0ffff17 	ldw	r3,-4(fp)
    9bdc:	1885883a 	add	r2,r3,r2
}
    9be0:	e037883a 	mov	sp,fp
    9be4:	dfc00117 	ldw	ra,4(sp)
    9be8:	df000017 	ldw	fp,0(sp)
    9bec:	dec00204 	addi	sp,sp,8
    9bf0:	f800283a 	ret

00009bf4 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    9bf4:	defffc04 	addi	sp,sp,-16
    9bf8:	dfc00315 	stw	ra,12(sp)
    9bfc:	df000215 	stw	fp,8(sp)
    9c00:	df000204 	addi	fp,sp,8
    9c04:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9c08:	010000f4 	movhi	r4,3
    9c0c:	2121cc04 	addi	r4,r4,-30928
    9c10:	000f2fc0 	call	f2fc <puts>
	uint8_t gpin = 0;
    9c14:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9c18:	01402a04 	movi	r5,168
    9c1c:	e13fff17 	ldw	r4,-4(fp)
    9c20:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    9c24:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9c28:	e0fffe03 	ldbu	r3,-8(fp)
    9c2c:	00bffc04 	movi	r2,-16
    9c30:	1884703a 	and	r2,r3,r2
    9c34:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9c38:	01402804 	movi	r5,160
    9c3c:	e13fff17 	ldw	r4,-4(fp)
    9c40:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    9c44:	10803fcc 	andi	r2,r2,255
    9c48:	1005d13a 	srai	r2,r2,4
    9c4c:	1007883a 	mov	r3,r2
    9c50:	e0bffe03 	ldbu	r2,-8(fp)
    9c54:	1884b03a 	or	r2,r3,r2
    9c58:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9c5c:	e0bffe03 	ldbu	r2,-8(fp)
}
    9c60:	e037883a 	mov	sp,fp
    9c64:	dfc00117 	ldw	ra,4(sp)
    9c68:	df000017 	ldw	fp,0(sp)
    9c6c:	dec00204 	addi	sp,sp,8
    9c70:	f800283a 	ret

00009c74 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9c74:	defffc04 	addi	sp,sp,-16
    9c78:	dfc00315 	stw	ra,12(sp)
    9c7c:	df000215 	stw	fp,8(sp)
    9c80:	df000204 	addi	fp,sp,8
    9c84:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    9c88:	010000f4 	movhi	r4,3
    9c8c:	2121d004 	addi	r4,r4,-30912
    9c90:	000f2fc0 	call	f2fc <puts>
	uint8_t gpout = 0;
    9c94:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    9c98:	01402804 	movi	r5,160
    9c9c:	e13fff17 	ldw	r4,-4(fp)
    9ca0:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    9ca4:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    9ca8:	e0bffe03 	ldbu	r2,-8(fp)
    9cac:	108003cc 	andi	r2,r2,15
    9cb0:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    9cb4:	01402a04 	movi	r5,168
    9cb8:	e13fff17 	ldw	r4,-4(fp)
    9cbc:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    9cc0:	10803fcc 	andi	r2,r2,255
    9cc4:	1004913a 	slli	r2,r2,4
    9cc8:	1007883a 	mov	r3,r2
    9ccc:	e0bffe03 	ldbu	r2,-8(fp)
    9cd0:	1884b03a 	or	r2,r3,r2
    9cd4:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    9cd8:	e0bffe03 	ldbu	r2,-8(fp)
}
    9cdc:	e037883a 	mov	sp,fp
    9ce0:	dfc00117 	ldw	ra,4(sp)
    9ce4:	df000017 	ldw	fp,0(sp)
    9ce8:	dec00204 	addi	sp,sp,8
    9cec:	f800283a 	ret

00009cf0 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    9cf0:	defffc04 	addi	sp,sp,-16
    9cf4:	dfc00315 	stw	ra,12(sp)
    9cf8:	df000215 	stw	fp,8(sp)
    9cfc:	df000204 	addi	fp,sp,8
    9d00:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9d04:	010000f4 	movhi	r4,3
    9d08:	2121d604 	addi	r4,r4,-30888
    9d0c:	000f2fc0 	call	f2fc <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    9d10:	0007883a 	mov	r3,zero
    9d14:	00810034 	movhi	r2,1024
    9d18:	10867404 	addi	r2,r2,6608
    9d1c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    9d20:	010003f4 	movhi	r4,15
    9d24:	21109004 	addi	r4,r4,16960
    9d28:	001fc840 	call	1fc84 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9d2c:	00c00044 	movi	r3,1
    9d30:	00810034 	movhi	r2,1024
    9d34:	10867404 	addi	r2,r2,6608
    9d38:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9d3c:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    9d40:	01800804 	movi	r6,32
    9d44:	01401e04 	movi	r5,120
    9d48:	e13fff17 	ldw	r4,-4(fp)
    9d4c:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    9d50:	000d883a 	mov	r6,zero
    9d54:	01401e04 	movi	r5,120
    9d58:	e13fff17 	ldw	r4,-4(fp)
    9d5c:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    9d60:	e0bffe0b 	ldhu	r2,-8(fp)
    9d64:	10800044 	addi	r2,r2,1
    9d68:	e0bffe0d 	sth	r2,-8(fp)
    9d6c:	e0bffe0b 	ldhu	r2,-8(fp)
    9d70:	1004c03a 	cmpne	r2,r2,zero
    9d74:	10803fcc 	andi	r2,r2,255
    9d78:	10000a26 	beq	r2,zero,9da4 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9d7c:	01401a04 	movi	r5,104
    9d80:	e13fff17 	ldw	r4,-4(fp)
    9d84:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    9d88:	10803fcc 	andi	r2,r2,255
    9d8c:	1080004c 	andi	r2,r2,1
    9d90:	1004c03a 	cmpne	r2,r2,zero
    9d94:	10803fcc 	andi	r2,r2,255
    9d98:	1000011e 	bne	r2,zero,9da0 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9d9c:	003ff006 	br	9d60 <__alt_data_end+0xfc009d60>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    9da0:	0001883a 	nop
		}
	}
	return ( i);
    9da4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9da8:	e037883a 	mov	sp,fp
    9dac:	dfc00117 	ldw	ra,4(sp)
    9db0:	df000017 	ldw	fp,0(sp)
    9db4:	dec00204 	addi	sp,sp,8
    9db8:	f800283a 	ret

00009dbc <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    9dbc:	defffe04 	addi	sp,sp,-8
    9dc0:	df000115 	stw	fp,4(sp)
    9dc4:	df000104 	addi	fp,sp,4
    9dc8:	2005883a 	mov	r2,r4
    9dcc:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    9dd0:	00800044 	movi	r2,1
}
    9dd4:	e037883a 	mov	sp,fp
    9dd8:	df000017 	ldw	fp,0(sp)
    9ddc:	dec00104 	addi	sp,sp,4
    9de0:	f800283a 	ret

00009de4 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    9de4:	defffd04 	addi	sp,sp,-12
    9de8:	dfc00215 	stw	ra,8(sp)
    9dec:	df000115 	stw	fp,4(sp)
    9df0:	df000104 	addi	fp,sp,4
    9df4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    9df8:	010000f4 	movhi	r4,3
    9dfc:	2121da04 	addi	r4,r4,-30872
    9e00:	000f2fc0 	call	f2fc <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9e04:	01800604 	movi	r6,24
    9e08:	01402204 	movi	r5,136
    9e0c:	e13fff17 	ldw	r4,-4(fp)
    9e10:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9e14:	e13fff17 	ldw	r4,-4(fp)
    9e18:	0009cf00 	call	9cf0 <_ZN8MAX3421e5resetEv>
    9e1c:	10bfffcc 	andi	r2,r2,65535
    9e20:	1005003a 	cmpeq	r2,r2,zero
    9e24:	10803fcc 	andi	r2,r2,255
    9e28:	10000226 	beq	r2,zero,9e34 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9e2c:	00bfffc4 	movi	r2,-1
    9e30:	00002006 	br	9eb4 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9e34:	01803044 	movi	r6,193
    9e38:	01403604 	movi	r5,216
    9e3c:	e13fff17 	ldw	r4,-4(fp)
    9e40:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9e44:	01801804 	movi	r6,96
    9e48:	01403404 	movi	r5,208
    9e4c:	e13fff17 	ldw	r4,-4(fp)
    9e50:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9e54:	01800104 	movi	r6,4
    9e58:	01403a04 	movi	r5,232
    9e5c:	e13fff17 	ldw	r4,-4(fp)
    9e60:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9e64:	01403a04 	movi	r5,232
    9e68:	e13fff17 	ldw	r4,-4(fp)
    9e6c:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    9e70:	10803fcc 	andi	r2,r2,255
    9e74:	1080010c 	andi	r2,r2,4
    9e78:	1005003a 	cmpeq	r2,r2,zero
    9e7c:	10803fcc 	andi	r2,r2,255
    9e80:	10000126 	beq	r2,zero,9e88 <_ZN8MAX3421e4InitEv+0xa4>
    9e84:	003ff706 	br	9e64 <__alt_data_end+0xfc009e64>

	busprobe(); //check if anything is connected
    9e88:	e13fff17 	ldw	r4,-4(fp)
    9e8c:	0009fe00 	call	9fe0 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9e90:	01800804 	movi	r6,32
    9e94:	01403204 	movi	r5,200
    9e98:	e13fff17 	ldw	r4,-4(fp)
    9e9c:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9ea0:	01800044 	movi	r6,1
    9ea4:	01402004 	movi	r5,128
    9ea8:	e13fff17 	ldw	r4,-4(fp)
    9eac:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9eb0:	0005883a 	mov	r2,zero
}
    9eb4:	e037883a 	mov	sp,fp
    9eb8:	dfc00117 	ldw	ra,4(sp)
    9ebc:	df000017 	ldw	fp,0(sp)
    9ec0:	dec00204 	addi	sp,sp,8
    9ec4:	f800283a 	ret

00009ec8 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9ec8:	defffc04 	addi	sp,sp,-16
    9ecc:	dfc00315 	stw	ra,12(sp)
    9ed0:	df000215 	stw	fp,8(sp)
    9ed4:	df000204 	addi	fp,sp,8
    9ed8:	e13ffe15 	stw	r4,-8(fp)
    9edc:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9ee0:	010000f4 	movhi	r4,3
    9ee4:	2121de04 	addi	r4,r4,-30856
    9ee8:	000f2fc0 	call	f2fc <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9eec:	01800644 	movi	r6,25
    9ef0:	01402204 	movi	r5,136
    9ef4:	e13ffe17 	ldw	r4,-8(fp)
    9ef8:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9efc:	e13ffe17 	ldw	r4,-8(fp)
    9f00:	0009cf00 	call	9cf0 <_ZN8MAX3421e5resetEv>
    9f04:	10bfffcc 	andi	r2,r2,65535
    9f08:	1005003a 	cmpeq	r2,r2,zero
    9f0c:	10803fcc 	andi	r2,r2,255
    9f10:	10000226 	beq	r2,zero,9f1c <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9f14:	00bfffc4 	movi	r2,-1
    9f18:	00002c06 	br	9fcc <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9f1c:	e0bfff17 	ldw	r2,-4(fp)
    9f20:	1080fa08 	cmpgei	r2,r2,1000
    9f24:	1000021e 	bne	r2,zero,9f30 <_ZN8MAX3421e4InitEi+0x68>
    9f28:	0080fa04 	movi	r2,1000
    9f2c:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9f30:	e0bfff17 	ldw	r2,-4(fp)
    9f34:	1009883a 	mov	r4,r2
    9f38:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9f3c:	01803044 	movi	r6,193
    9f40:	01403604 	movi	r5,216
    9f44:	e13ffe17 	ldw	r4,-8(fp)
    9f48:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9f4c:	01801804 	movi	r6,96
    9f50:	01403404 	movi	r5,208
    9f54:	e13ffe17 	ldw	r4,-8(fp)
    9f58:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9f5c:	01800104 	movi	r6,4
    9f60:	01403a04 	movi	r5,232
    9f64:	e13ffe17 	ldw	r4,-8(fp)
    9f68:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9f6c:	01403a04 	movi	r5,232
    9f70:	e13ffe17 	ldw	r4,-8(fp)
    9f74:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    9f78:	10803fcc 	andi	r2,r2,255
    9f7c:	1080010c 	andi	r2,r2,4
    9f80:	1005003a 	cmpeq	r2,r2,zero
    9f84:	10803fcc 	andi	r2,r2,255
    9f88:	10000126 	beq	r2,zero,9f90 <_ZN8MAX3421e4InitEi+0xc8>
    9f8c:	003ff706 	br	9f6c <__alt_data_end+0xfc009f6c>

	busprobe(); //check if anything is connected
    9f90:	e13ffe17 	ldw	r4,-8(fp)
    9f94:	0009fe00 	call	9fe0 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9f98:	01800804 	movi	r6,32
    9f9c:	01403204 	movi	r5,200
    9fa0:	e13ffe17 	ldw	r4,-8(fp)
    9fa4:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9fa8:	01800044 	movi	r6,1
    9fac:	01402004 	movi	r5,128
    9fb0:	e13ffe17 	ldw	r4,-8(fp)
    9fb4:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9fb8:	01800604 	movi	r6,24
    9fbc:	01402204 	movi	r5,136
    9fc0:	e13ffe17 	ldw	r4,-8(fp)
    9fc4:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9fc8:	0005883a 	mov	r2,zero
}
    9fcc:	e037883a 	mov	sp,fp
    9fd0:	dfc00117 	ldw	ra,4(sp)
    9fd4:	df000017 	ldw	fp,0(sp)
    9fd8:	dec00204 	addi	sp,sp,8
    9fdc:	f800283a 	ret

00009fe0 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9fe0:	defffc04 	addi	sp,sp,-16
    9fe4:	dfc00315 	stw	ra,12(sp)
    9fe8:	df000215 	stw	fp,8(sp)
    9fec:	df000204 	addi	fp,sp,8
    9ff0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9ff4:	010000f4 	movhi	r4,3
    9ff8:	2121e404 	addi	r4,r4,-30832
    9ffc:	000f2fc0 	call	f2fc <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    a000:	01403e04 	movi	r5,248
    a004:	e13fff17 	ldw	r4,-4(fp)
    a008:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    a00c:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    a010:	e0fffe03 	ldbu	r3,-8(fp)
    a014:	00bff004 	movi	r2,-64
    a018:	1884703a 	and	r2,r3,r2
    a01c:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    a020:	e0bffe03 	ldbu	r2,-8(fp)
    a024:	10c01020 	cmpeqi	r3,r2,64
    a028:	1800251e 	bne	r3,zero,a0c0 <_ZN8MAX3421e8busprobeEv+0xe0>
    a02c:	10c01048 	cmpgei	r3,r2,65
    a030:	1800021e 	bne	r3,zero,a03c <_ZN8MAX3421e8busprobeEv+0x5c>
    a034:	10003b26 	beq	r2,zero,a124 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    a038:	00004006 	br	a13c <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    a03c:	10c02020 	cmpeqi	r3,r2,128
    a040:	1800031e 	bne	r3,zero,a050 <_ZN8MAX3421e8busprobeEv+0x70>
    a044:	10803020 	cmpeqi	r2,r2,192
    a048:	1000331e 	bne	r2,zero,a118 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    a04c:	00003b06 	br	a13c <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    a050:	01403604 	movi	r5,216
    a054:	e13fff17 	ldw	r4,-4(fp)
    a058:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    a05c:	10803fcc 	andi	r2,r2,255
    a060:	1080008c 	andi	r2,r2,2
    a064:	1005003a 	cmpeq	r2,r2,zero
    a068:	10803fcc 	andi	r2,r2,255
    a06c:	10000a26 	beq	r2,zero,a098 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    a070:	010000f4 	movhi	r4,3
    a074:	2121e904 	addi	r4,r4,-30812
    a078:	000f2fc0 	call	f2fc <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    a07c:	01803244 	movi	r6,201
    a080:	01403604 	movi	r5,216
    a084:	e13fff17 	ldw	r4,-4(fp)
    a088:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    a08c:	00800084 	movi	r2,2
    a090:	d0b23f45 	stb	r2,-14083(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    a094:	00002906 	br	a13c <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    a098:	010000f4 	movhi	r4,3
    a09c:	2121f004 	addi	r4,r4,-30784
    a0a0:	000f2fc0 	call	f2fc <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    a0a4:	018032c4 	movi	r6,203
    a0a8:	01403604 	movi	r5,216
    a0ac:	e13fff17 	ldw	r4,-4(fp)
    a0b0:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    a0b4:	008000c4 	movi	r2,3
    a0b8:	d0b23f45 	stb	r2,-14083(gp)
			}
			break;
    a0bc:	00001f06 	br	a13c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    a0c0:	01403604 	movi	r5,216
    a0c4:	e13fff17 	ldw	r4,-4(fp)
    a0c8:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    a0cc:	10803fcc 	andi	r2,r2,255
    a0d0:	1080008c 	andi	r2,r2,2
    a0d4:	1005003a 	cmpeq	r2,r2,zero
    a0d8:	10803fcc 	andi	r2,r2,255
    a0dc:	10000726 	beq	r2,zero,a0fc <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    a0e0:	018032c4 	movi	r6,203
    a0e4:	01403604 	movi	r5,216
    a0e8:	e13fff17 	ldw	r4,-4(fp)
    a0ec:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    a0f0:	008000c4 	movi	r2,3
    a0f4:	d0b23f45 	stb	r2,-14083(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    a0f8:	00001006 	br	a13c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    a0fc:	01803244 	movi	r6,201
    a100:	01403604 	movi	r5,216
    a104:	e13fff17 	ldw	r4,-4(fp)
    a108:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    a10c:	00800084 	movi	r2,2
    a110:	d0b23f45 	stb	r2,-14083(gp)
			}
			break;
    a114:	00000906 	br	a13c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    a118:	00800044 	movi	r2,1
    a11c:	d0b23f45 	stb	r2,-14083(gp)
			break;
    a120:	00000606 	br	a13c <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    a124:	01803444 	movi	r6,209
    a128:	01403604 	movi	r5,216
    a12c:	e13fff17 	ldw	r4,-4(fp)
    a130:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    a134:	d0323f45 	stb	zero,-14083(gp)
			break;
    a138:	0001883a 	nop
	}//end switch( bus_sample )
}
    a13c:	0001883a 	nop
    a140:	e037883a 	mov	sp,fp
    a144:	dfc00117 	ldw	ra,4(sp)
    a148:	df000017 	ldw	fp,0(sp)
    a14c:	dec00204 	addi	sp,sp,8
    a150:	f800283a 	ret

0000a154 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    a154:	defffc04 	addi	sp,sp,-16
    a158:	dfc00315 	stw	ra,12(sp)
    a15c:	df000215 	stw	fp,8(sp)
    a160:	df000204 	addi	fp,sp,8
    a164:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    a168:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    a16c:	00810034 	movhi	r2,1024
    a170:	10867c04 	addi	r2,r2,6640
    a174:	10800003 	ldbu	r2,0(r2)
    a178:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    a17c:	00810034 	movhi	r2,1024
    a180:	10867c04 	addi	r2,r2,6640
    a184:	10800037 	ldwio	r2,0(r2)
    a188:	1005003a 	cmpeq	r2,r2,zero
    a18c:	10803fcc 	andi	r2,r2,255
    a190:	10000326 	beq	r2,zero,a1a0 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    a194:	e13fff17 	ldw	r4,-4(fp)
    a198:	000a1b80 	call	a1b8 <_ZN8MAX3421e10IntHandlerEv>
    a19c:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    a1a0:	e0bffe03 	ldbu	r2,-8(fp)
}
    a1a4:	e037883a 	mov	sp,fp
    a1a8:	dfc00117 	ldw	ra,4(sp)
    a1ac:	df000017 	ldw	fp,0(sp)
    a1b0:	dec00204 	addi	sp,sp,8
    a1b4:	f800283a 	ret

0000a1b8 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    a1b8:	defffc04 	addi	sp,sp,-16
    a1bc:	dfc00315 	stw	ra,12(sp)
    a1c0:	df000215 	stw	fp,8(sp)
    a1c4:	df000204 	addi	fp,sp,8
    a1c8:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    a1cc:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    a1d0:	01403204 	movi	r5,200
    a1d4:	e13fff17 	ldw	r4,-4(fp)
    a1d8:	0009af40 	call	9af4 <_ZN8MAX3421e5regRdEh>
    a1dc:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    a1e0:	e0bffe43 	ldbu	r2,-7(fp)
    a1e4:	1080080c 	andi	r2,r2,32
    a1e8:	10000526 	beq	r2,zero,a200 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    a1ec:	e13fff17 	ldw	r4,-4(fp)
    a1f0:	0009fe00 	call	9fe0 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    a1f4:	e0bffe03 	ldbu	r2,-8(fp)
    a1f8:	10800814 	ori	r2,r2,32
    a1fc:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    a200:	e0bffe03 	ldbu	r2,-8(fp)
    a204:	100d883a 	mov	r6,r2
    a208:	01403204 	movi	r5,200
    a20c:	e13fff17 	ldw	r4,-4(fp)
    a210:	00098c00 	call	98c0 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    a214:	e0bffe03 	ldbu	r2,-8(fp)
}
    a218:	e037883a 	mov	sp,fp
    a21c:	dfc00117 	ldw	ra,4(sp)
    a220:	df000017 	ldw	fp,0(sp)
    a224:	dec00204 	addi	sp,sp,8
    a228:	f800283a 	ret

0000a22c <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    a22c:	defffe04 	addi	sp,sp,-8
    a230:	df000115 	stw	fp,4(sp)
    a234:	df000104 	addi	fp,sp,4
    a238:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    a23c:	0005883a 	mov	r2,zero
}
    a240:	e037883a 	mov	sp,fp
    a244:	df000017 	ldw	fp,0(sp)
    a248:	dec00104 	addi	sp,sp,4
    a24c:	f800283a 	ret

0000a250 <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure

void MIDI_poll();

void onInit()
{
    a250:	defff804 	addi	sp,sp,-32
    a254:	dfc00715 	stw	ra,28(sp)
    a258:	df000615 	stw	fp,24(sp)
    a25c:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    a260:	010000f4 	movhi	r4,3
    a264:	21051b04 	addi	r4,r4,5228
    a268:	000a6f80 	call	a6f8 <_ZN9USBH_MIDI8idVendorEv>
    a26c:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    a270:	010000f4 	movhi	r4,3
    a274:	21051b04 	addi	r4,r4,5228
    a278:	000a7200 	call	a720 <_ZN9USBH_MIDI9idProductEv>
    a27c:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    a280:	e0fffa0b 	ldhu	r3,-24(fp)
    a284:	e13ffa8b 	ldhu	r4,-22(fp)
    a288:	e0bffb04 	addi	r2,fp,-20
    a28c:	200f883a 	mov	r7,r4
    a290:	180d883a 	mov	r6,r3
    a294:	014000f4 	movhi	r5,3
    a298:	296a2c04 	addi	r5,r5,-22352
    a29c:	1009883a 	mov	r4,r2
    a2a0:	000f6c00 	call	f6c0 <sprintf>
  printf("%s\n", buf);
    a2a4:	e0bffb04 	addi	r2,fp,-20
    a2a8:	1009883a 	mov	r4,r2
    a2ac:	000f2fc0 	call	f2fc <puts>
}
    a2b0:	0001883a 	nop
    a2b4:	e037883a 	mov	sp,fp
    a2b8:	dfc00117 	ldw	ra,4(sp)
    a2bc:	df000017 	ldw	fp,0(sp)
    a2c0:	dec00204 	addi	sp,sp,8
    a2c4:	f800283a 	ret

0000a2c8 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    a2c8:	defffe04 	addi	sp,sp,-8
    a2cc:	dfc00115 	stw	ra,4(sp)
    a2d0:	df000015 	stw	fp,0(sp)
    a2d4:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    a2d8:	010000f4 	movhi	r4,3
    a2dc:	2104ec04 	addi	r4,r4,5040
    a2e0:	0009de40 	call	9de4 <_ZN8MAX3421e4InitEv>
    a2e4:	10803fcc 	andi	r2,r2,255
    a2e8:	1080201c 	xori	r2,r2,128
    a2ec:	10bfe004 	addi	r2,r2,-128
    a2f0:	10bfffe0 	cmpeqi	r2,r2,-1
    a2f4:	10803fcc 	andi	r2,r2,255
    a2f8:	10000326 	beq	r2,zero,a308 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    a2fc:	010000f4 	movhi	r4,3
    a300:	212a3104 	addi	r4,r4,-22332
    a304:	000f1e00 	call	f1e0 <printf>
	printf ("USB Started\n\r");
    a308:	010000f4 	movhi	r4,3
    a30c:	212a3304 	addi	r4,r4,-22324
    a310:	000f1e00 	call	f1e0 <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    a314:	01400074 	movhi	r5,1
    a318:	29689404 	addi	r5,r5,-23984
    a31c:	010000f4 	movhi	r4,3
    a320:	21051b04 	addi	r4,r4,5228
    a324:	000a7480 	call	a748 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    a328:	0001883a 	nop
    a32c:	e037883a 	mov	sp,fp
    a330:	dfc00117 	ldw	ra,4(sp)
    a334:	df000017 	ldw	fp,0(sp)
    a338:	dec00204 	addi	sp,sp,8
    a33c:	f800283a 	ret

0000a340 <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to serial MIDI
void MIDI_poll()
{
    a340:	deffec04 	addi	sp,sp,-80
    a344:	dfc01315 	stw	ra,76(sp)
    a348:	df001215 	stw	fp,72(sp)
    a34c:	df001204 	addi	fp,sp,72
  uint8_t note, vel;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    a350:	e0ffef84 	addi	r3,fp,-66
    a354:	e0bfff84 	addi	r2,fp,-2
    a358:	180d883a 	mov	r6,r3
    a35c:	100b883a 	mov	r5,r2
    a360:	010000f4 	movhi	r4,3
    a364:	21051b04 	addi	r4,r4,5228
    a368:	0007e140 	call	7e14 <_ZN9USBH_MIDI8RecvDataEPtPh>
    a36c:	10803fcc 	andi	r2,r2,255
    a370:	1005003a 	cmpeq	r2,r2,zero
    a374:	10803fcc 	andi	r2,r2,255
    a378:	10003026 	beq	r2,zero,a43c <_Z9MIDI_pollv+0xfc>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    a37c:	e03fee15 	stw	zero,-72(fp)
    a380:	e0bfee17 	ldw	r2,-72(fp)
    a384:	10801008 	cmpgei	r2,r2,64
    a388:	10002c1e 	bne	r2,zero,a43c <_Z9MIDI_pollv+0xfc>
    	if (bufMidi[i] == 0x90) {
    a38c:	e0ffef84 	addi	r3,fp,-66
    a390:	e0bfee17 	ldw	r2,-72(fp)
    a394:	1885883a 	add	r2,r3,r2
    a398:	10800003 	ldbu	r2,0(r2)
    a39c:	10803fcc 	andi	r2,r2,255
    a3a0:	10802418 	cmpnei	r2,r2,144
    a3a4:	1000211e 	bne	r2,zero,a42c <_Z9MIDI_pollv+0xec>
    		note = bufMidi[i+1];
    a3a8:	e0bfee17 	ldw	r2,-72(fp)
    a3ac:	10800044 	addi	r2,r2,1
    a3b0:	e0ffef84 	addi	r3,fp,-66
    a3b4:	1885883a 	add	r2,r3,r2
    a3b8:	10800003 	ldbu	r2,0(r2)
    a3bc:	e0bfef05 	stb	r2,-68(fp)
    		vel = bufMidi[i+2];
    a3c0:	e0bfee17 	ldw	r2,-72(fp)
    a3c4:	10800084 	addi	r2,r2,2
    a3c8:	e0ffef84 	addi	r3,fp,-66
    a3cc:	1885883a 	add	r2,r3,r2
    a3d0:	10800003 	ldbu	r2,0(r2)
    a3d4:	e0bfef45 	stb	r2,-67(fp)
    		i += 2;
    a3d8:	e0bfee17 	ldw	r2,-72(fp)
    a3dc:	10800084 	addi	r2,r2,2
    a3e0:	e0bfee15 	stw	r2,-72(fp)

    		set_note(note, vel);
    a3e4:	e0bfef03 	ldbu	r2,-68(fp)
    a3e8:	e0ffef43 	ldbu	r3,-67(fp)
    a3ec:	180b883a 	mov	r5,r3
    a3f0:	1009883a 	mov	r4,r2
    a3f4:	00056900 	call	5690 <_Z8set_notehh>

        	if(vel == 0) {
    a3f8:	e0bfef43 	ldbu	r2,-67(fp)
    a3fc:	1000061e 	bne	r2,zero,a418 <_Z9MIDI_pollv+0xd8>
        		printf("Note Off:	%d\n", note);
    a400:	e0bfef03 	ldbu	r2,-68(fp)
    a404:	100b883a 	mov	r5,r2
    a408:	010000f4 	movhi	r4,3
    a40c:	212a3704 	addi	r4,r4,-22308
    a410:	000f1e00 	call	f1e0 <printf>
    a414:	00000506 	br	a42c <_Z9MIDI_pollv+0xec>
        	}
        	else {
        		printf("Note On:	%d\n", note);
    a418:	e0bfef03 	ldbu	r2,-68(fp)
    a41c:	100b883a 	mov	r5,r2
    a420:	010000f4 	movhi	r4,3
    a424:	212a3b04 	addi	r4,r4,-22292
    a428:	000f1e00 	call	f1e0 <printf>
  uint8_t note, vel;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    a42c:	e0bfee17 	ldw	r2,-72(fp)
    a430:	10800044 	addi	r2,r2,1
    a434:	e0bfee15 	stw	r2,-72(fp)
    a438:	003fd106 	br	a380 <__alt_data_end+0xfc00a380>
        	}

    	}
    }
  }
}
    a43c:	0001883a 	nop
    a440:	e037883a 	mov	sp,fp
    a444:	dfc00117 	ldw	ra,4(sp)
    a448:	df000017 	ldw	fp,0(sp)
    a44c:	dec00204 	addi	sp,sp,8
    a450:	f800283a 	ret

0000a454 <_Z7controlv>:

void control() {
    a454:	defffd04 	addi	sp,sp,-12
    a458:	dfc00215 	stw	ra,8(sp)
    a45c:	df000115 	stw	fp,4(sp)
    a460:	df000104 	addi	fp,sp,4
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    a464:	00810034 	movhi	r2,1024
    a468:	10868804 	addi	r2,r2,6688
    a46c:	10800037 	ldwio	r2,0(r2)
    a470:	e0bfff05 	stb	r2,-4(fp)
	if ((~con & 0x1) && (~con & 0x2)) {
    a474:	e0bfff03 	ldbu	r2,-4(fp)
    a478:	1080004c 	andi	r2,r2,1
    a47c:	1000031e 	bne	r2,zero,a48c <_Z7controlv+0x38>
    a480:	e0bfff03 	ldbu	r2,-4(fp)
    a484:	1080008c 	andi	r2,r2,2
    a488:	10000e26 	beq	r2,zero,a4c4 <_Z7controlv+0x70>
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
    a48c:	e0bfff03 	ldbu	r2,-4(fp)
    a490:	1080004c 	andi	r2,r2,1
    a494:	1000041e 	bne	r2,zero,a4a8 <_Z7controlv+0x54>
    a498:	d0b24017 	ldw	r2,-14080(gp)
    a49c:	1009883a 	mov	r4,r2
    a4a0:	00071a00 	call	71a0 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
}
    a4a4:	00000706 	br	a4c4 <_Z7controlv+0x70>
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
	if ((~con & 0x1) && (~con & 0x2)) {
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
    a4a8:	e0bfff03 	ldbu	r2,-4(fp)
    a4ac:	1080008c 	andi	r2,r2,2
    a4b0:	1000041e 	bne	r2,zero,a4c4 <_Z7controlv+0x70>
    a4b4:	d0b24017 	ldw	r2,-14080(gp)
    a4b8:	1009883a 	mov	r4,r2
    a4bc:	00072740 	call	7274 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>
}
    a4c0:	00000006 	br	a4c4 <_Z7controlv+0x70>
    a4c4:	0001883a 	nop
    a4c8:	e037883a 	mov	sp,fp
    a4cc:	dfc00117 	ldw	ra,4(sp)
    a4d0:	df000017 	ldw	fp,0(sp)
    a4d4:	dec00204 	addi	sp,sp,8
    a4d8:	f800283a 	ret

0000a4dc <main>:

int main() {
    a4dc:	defffb04 	addi	sp,sp,-20
    a4e0:	dfc00415 	stw	ra,16(sp)
    a4e4:	df000315 	stw	fp,12(sp)
    a4e8:	df000304 	addi	fp,sp,12

	uint8_t timer;
	alt_u16 att_m_seconds = 250;
    a4ec:	00803e84 	movi	r2,250
    a4f0:	e0bffd0d 	sth	r2,-12(fp)
	alt_u16 dec_m_seconds = 100;
    a4f4:	00801904 	movi	r2,100
    a4f8:	e0bffd8d 	sth	r2,-10(fp)
	alt_u16 rel_m_seconds = 300;
    a4fc:	00804b04 	movi	r2,300
    a500:	e0bffe0d 	sth	r2,-8(fp)
	float peak_amp = 1.3;
    a504:	008fe9b4 	movhi	r2,16294
    a508:	10999984 	addi	r2,r2,26214
    a50c:	e0bfff15 	stw	r2,-4(fp)

	printf("Initializing SGTL5000...\n");
    a510:	010000f4 	movhi	r4,3
    a514:	212a3f04 	addi	r4,r4,-22276
    a518:	000f2fc0 	call	f2fc <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a51c:	010000f4 	movhi	r4,3
    a520:	212a4604 	addi	r4,r4,-22248
    a524:	002020c0 	call	2020c <alt_avalon_i2c_open>
    a528:	d0b24015 	stw	r2,-14080(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a52c:	d0b24017 	ldw	r2,-14080(gp)
    a530:	1000031e 	bne	r2,zero,a540 <main+0x64>
    a534:	010000f4 	movhi	r4,3
    a538:	212a4904 	addi	r4,r4,-22236
    a53c:	000f2fc0 	call	f2fc <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a540:	d0b24017 	ldw	r2,-14080(gp)
    a544:	1009883a 	mov	r4,r2
    a548:	0006ef00 	call	6ef0 <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a54c:	010000f4 	movhi	r4,3
    a550:	212a5104 	addi	r4,r4,-22204
    a554:	000f2fc0 	call	f2fc <puts>
	SGTL5000audio_on(i2c_dev);
    a558:	d0b24017 	ldw	r2,-14080(gp)
    a55c:	1009883a 	mov	r4,r2
    a560:	0006f880 	call	6f88 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	I2Creg_wr(i2c_dev, ANA_TEST1, TM_SELECT_MIC | TESTMODE);
	I2Creg_wr(i2c_dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | VAG_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP | ADC_POWERUP_ANA);
	I2Creg_wr(i2c_dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
	*/

	SGTL5000status(i2c_dev);
    a564:	d0b24017 	ldw	r2,-14080(gp)
    a568:	1009883a 	mov	r4,r2
    a56c:	0006ff40 	call	6ff4 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>

	printf("Audio running\n");
    a570:	010000f4 	movhi	r4,3
    a574:	212a5604 	addi	r4,r4,-22184
    a578:	000f2fc0 	call	f2fc <puts>

	printf("Initializing ADSR...\n");
    a57c:	010000f4 	movhi	r4,3
    a580:	212a5a04 	addi	r4,r4,-22168
    a584:	000f2fc0 	call	f2fc <puts>

	calc_adsr(att_m_seconds, dec_m_seconds, rel_m_seconds, peak_amp);
    a588:	e0bffd0b 	ldhu	r2,-12(fp)
    a58c:	e0fffd8b 	ldhu	r3,-10(fp)
    a590:	e13ffe0b 	ldhu	r4,-8(fp)
    a594:	e1ffff17 	ldw	r7,-4(fp)
    a598:	200d883a 	mov	r6,r4
    a59c:	180b883a 	mov	r5,r3
    a5a0:	1009883a 	mov	r4,r2
    a5a4:	00057580 	call	5758 <_Z9calc_adsrtttf>

	printf("ADSR set\n");
    a5a8:	010000f4 	movhi	r4,3
    a5ac:	212a6004 	addi	r4,r4,-22144
    a5b0:	000f2fc0 	call	f2fc <puts>

	MIDI_setup();
    a5b4:	000a2c80 	call	a2c8 <_Z10MIDI_setupv>

	printf("MIDI set\n");
    a5b8:	010000f4 	movhi	r4,3
    a5bc:	212a6304 	addi	r4,r4,-22132
    a5c0:	000f2fc0 	call	f2fc <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a5c4:	010000f4 	movhi	r4,3
    a5c8:	2104ec04 	addi	r4,r4,5040
    a5cc:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a5d0:	10803fcc 	andi	r2,r2,255
    a5d4:	10802418 	cmpnei	r2,r2,144
    a5d8:	10803fcc 	andi	r2,r2,255
    a5dc:	10000c26 	beq	r2,zero,a610 <main+0x134>
		Usb.Task();
    a5e0:	010000f4 	movhi	r4,3
    a5e4:	2104ec04 	addi	r4,r4,5040
    a5e8:	000181c0 	call	181c <_ZN3USB4TaskEv>
        printf("%X\n", Usb.getUsbTaskState());
    a5ec:	010000f4 	movhi	r4,3
    a5f0:	2104ec04 	addi	r4,r4,5040
    a5f4:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a5f8:	10803fcc 	andi	r2,r2,255
    a5fc:	100b883a 	mov	r5,r2
    a600:	010000f4 	movhi	r4,3
    a604:	212a6604 	addi	r4,r4,-22120
    a608:	000f1e00 	call	f1e0 <printf>

	MIDI_setup();

	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a60c:	003fed06 	br	a5c4 <__alt_data_end+0xfc00a5c4>
		Usb.Task();
        printf("%X\n", Usb.getUsbTaskState());
	}

	printf("USB running\n");
    a610:	010000f4 	movhi	r4,3
    a614:	212a6704 	addi	r4,r4,-22116
    a618:	000f2fc0 	call	f2fc <puts>

	while(1) {
		if ( Midi ) {
    a61c:	010000f4 	movhi	r4,3
    a620:	21051b04 	addi	r4,r4,5228
    a624:	000a6d00 	call	a6d0 <_ZN9USBH_MIDIcvbEv>
    a628:	10803fcc 	andi	r2,r2,255
    a62c:	103ffb26 	beq	r2,zero,a61c <__alt_data_end+0xfc00a61c>
			MIDI_poll();
    a630:	000a3400 	call	a340 <_Z9MIDI_pollv>
        printf("%X\n", Usb.getUsbTaskState());
	}

	printf("USB running\n");

	while(1) {
    a634:	003ff906 	br	a61c <__alt_data_end+0xfc00a61c>

0000a638 <_Z41__static_initialization_and_destruction_0ii>:
		//	timer = 0;
		//}
	}

	printf("Ended");
}
    a638:	defffc04 	addi	sp,sp,-16
    a63c:	dfc00315 	stw	ra,12(sp)
    a640:	df000215 	stw	fp,8(sp)
    a644:	df000204 	addi	fp,sp,8
    a648:	e13ffe15 	stw	r4,-8(fp)
    a64c:	e17fff15 	stw	r5,-4(fp)
    a650:	e0bffe17 	ldw	r2,-8(fp)
    a654:	10800058 	cmpnei	r2,r2,1
    a658:	10000b1e 	bne	r2,zero,a688 <_Z41__static_initialization_and_destruction_0ii+0x50>
    a65c:	e0ffff17 	ldw	r3,-4(fp)
    a660:	00bfffd4 	movui	r2,65535
    a664:	1880081e 	bne	r3,r2,a688 <_Z41__static_initialization_and_destruction_0ii+0x50>
 * This is sample program. Do not expect perfect behavior.
 *******************************************************************************
 */


USB Usb;
    a668:	010000f4 	movhi	r4,3
    a66c:	2104ec04 	addi	r4,r4,5040
    a670:	00007040 	call	704 <_ZN3USBC1Ev>
//USBHub Hub(&Usb);
USBH_MIDI  Midi(&Usb);
    a674:	014000f4 	movhi	r5,3
    a678:	2944ec04 	addi	r5,r5,5040
    a67c:	010000f4 	movhi	r4,3
    a680:	21051b04 	addi	r4,r4,5228
    a684:	00072f40 	call	72f4 <_ZN9USBH_MIDIC1EP3USB>
		//	timer = 0;
		//}
	}

	printf("Ended");
}
    a688:	0001883a 	nop
    a68c:	e037883a 	mov	sp,fp
    a690:	dfc00117 	ldw	ra,4(sp)
    a694:	df000017 	ldw	fp,0(sp)
    a698:	dec00204 	addi	sp,sp,8
    a69c:	f800283a 	ret

0000a6a0 <_GLOBAL__sub_I_Usb>:
    a6a0:	defffe04 	addi	sp,sp,-8
    a6a4:	dfc00115 	stw	ra,4(sp)
    a6a8:	df000015 	stw	fp,0(sp)
    a6ac:	d839883a 	mov	fp,sp
    a6b0:	017fffd4 	movui	r5,65535
    a6b4:	01000044 	movi	r4,1
    a6b8:	000a6380 	call	a638 <_Z41__static_initialization_and_destruction_0ii>
    a6bc:	e037883a 	mov	sp,fp
    a6c0:	dfc00117 	ldw	ra,4(sp)
    a6c4:	df000017 	ldw	fp,0(sp)
    a6c8:	dec00204 	addi	sp,sp,8
    a6cc:	f800283a 	ret

0000a6d0 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a6d0:	defffe04 	addi	sp,sp,-8
    a6d4:	df000115 	stw	fp,4(sp)
    a6d8:	df000104 	addi	fp,sp,4
    a6dc:	e13fff15 	stw	r4,-4(fp)
    a6e0:	e0bfff17 	ldw	r2,-4(fp)
    a6e4:	10800343 	ldbu	r2,13(r2)
    a6e8:	e037883a 	mov	sp,fp
    a6ec:	df000017 	ldw	fp,0(sp)
    a6f0:	dec00104 	addi	sp,sp,4
    a6f4:	f800283a 	ret

0000a6f8 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a6f8:	defffe04 	addi	sp,sp,-8
    a6fc:	df000115 	stw	fp,4(sp)
    a700:	df000104 	addi	fp,sp,4
    a704:	e13fff15 	stw	r4,-4(fp)
    a708:	e0bfff17 	ldw	r2,-4(fp)
    a70c:	1080040b 	ldhu	r2,16(r2)
    a710:	e037883a 	mov	sp,fp
    a714:	df000017 	ldw	fp,0(sp)
    a718:	dec00104 	addi	sp,sp,4
    a71c:	f800283a 	ret

0000a720 <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a720:	defffe04 	addi	sp,sp,-8
    a724:	df000115 	stw	fp,4(sp)
    a728:	df000104 	addi	fp,sp,4
    a72c:	e13fff15 	stw	r4,-4(fp)
    a730:	e0bfff17 	ldw	r2,-4(fp)
    a734:	1080038b 	ldhu	r2,14(r2)
    a738:	e037883a 	mov	sp,fp
    a73c:	df000017 	ldw	fp,0(sp)
    a740:	dec00104 	addi	sp,sp,4
    a744:	f800283a 	ret

0000a748 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a748:	defffd04 	addi	sp,sp,-12
    a74c:	df000215 	stw	fp,8(sp)
    a750:	df000204 	addi	fp,sp,8
    a754:	e13ffe15 	stw	r4,-8(fp)
    a758:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a75c:	e0bffe17 	ldw	r2,-8(fp)
    a760:	e0ffff17 	ldw	r3,-4(fp)
    a764:	10c01815 	stw	r3,96(r2)
        };
    a768:	0001883a 	nop
    a76c:	e037883a 	mov	sp,fp
    a770:	df000017 	ldw	fp,0(sp)
    a774:	dec00104 	addi	sp,sp,4
    a778:	f800283a 	ret

0000a77c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a77c:	008000f4 	movhi	r2,3
    a780:	10aa7904 	addi	r2,r2,-22044
    a784:	20800015 	stw	r2,0(r4)
    a788:	000b5541 	jmpi	b554 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a78c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a78c:	defffe04 	addi	sp,sp,-8
    a790:	008000f4 	movhi	r2,3
    a794:	dc000015 	stw	r16,0(sp)
    a798:	dfc00115 	stw	ra,4(sp)
    a79c:	10aa7904 	addi	r2,r2,-22044
    a7a0:	20800015 	stw	r2,0(r4)
    a7a4:	2021883a 	mov	r16,r4
    a7a8:	000b5540 	call	b554 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a7ac:	8009883a 	mov	r4,r16
    a7b0:	dfc00117 	ldw	ra,4(sp)
    a7b4:	dc000017 	ldw	r16,0(sp)
    a7b8:	dec00204 	addi	sp,sp,8
    a7bc:	000b4801 	jmpi	b480 <_ZdlPv>

0000a7c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a7c0:	defff504 	addi	sp,sp,-44
    a7c4:	dc000115 	stw	r16,4(sp)
    a7c8:	38800117 	ldw	r2,4(r7)
    a7cc:	24000117 	ldw	r16,4(r4)
    a7d0:	df000915 	stw	fp,36(sp)
    a7d4:	ddc00815 	stw	r23,32(sp)
    a7d8:	dd800715 	stw	r22,28(sp)
    a7dc:	dcc00415 	stw	r19,16(sp)
    a7e0:	dc800315 	stw	r18,12(sp)
    a7e4:	dc400215 	stw	r17,8(sp)
    a7e8:	dfc00a15 	stw	ra,40(sp)
    a7ec:	dd400615 	stw	r21,24(sp)
    a7f0:	dd000515 	stw	r20,20(sp)
    a7f4:	2823883a 	mov	r17,r5
    a7f8:	3039883a 	mov	fp,r6
    a7fc:	dcc00b17 	ldw	r19,44(sp)
    a800:	ddc00c17 	ldw	r23,48(sp)
    a804:	dd800d17 	ldw	r22,52(sp)
    a808:	dc800e17 	ldw	r18,56(sp)
    a80c:	80800b26 	beq	r16,r2,a83c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a810:	80c00007 	ldb	r3,0(r16)
    a814:	2029883a 	mov	r20,r4
    a818:	01000a84 	movi	r4,42
    a81c:	382b883a 	mov	r21,r7
    a820:	19001a26 	beq	r3,r4,a88c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a824:	100b883a 	mov	r5,r2
    a828:	8009883a 	mov	r4,r16
    a82c:	d8c00015 	stw	r3,0(sp)
    a830:	000f72c0 	call	f72c <strcmp>
    a834:	d8c00017 	ldw	r3,0(sp)
    a838:	1000141e 	bne	r2,zero,a88c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a83c:	94c00015 	stw	r19,0(r18)
    a840:	97000115 	stw	fp,4(r18)
    a844:	88002816 	blt	r17,zero,a8e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a848:	9c63883a 	add	r17,r19,r17
    a84c:	b4403226 	beq	r22,r17,a918 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a850:	00800044 	movi	r2,1
    a854:	90800315 	stw	r2,12(r18)
    a858:	0005883a 	mov	r2,zero
    a85c:	dfc00a17 	ldw	ra,40(sp)
    a860:	df000917 	ldw	fp,36(sp)
    a864:	ddc00817 	ldw	r23,32(sp)
    a868:	dd800717 	ldw	r22,28(sp)
    a86c:	dd400617 	ldw	r21,24(sp)
    a870:	dd000517 	ldw	r20,20(sp)
    a874:	dcc00417 	ldw	r19,16(sp)
    a878:	dc800317 	ldw	r18,12(sp)
    a87c:	dc400217 	ldw	r17,8(sp)
    a880:	dc000117 	ldw	r16,4(sp)
    a884:	dec00b04 	addi	sp,sp,44
    a888:	f800283a 	ret
    a88c:	9d801926 	beq	r19,r22,a8f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a890:	a1000217 	ldw	r4,8(r20)
    a894:	a80f883a 	mov	r7,r21
    a898:	e00d883a 	mov	r6,fp
    a89c:	20800017 	ldw	r2,0(r4)
    a8a0:	dc800e15 	stw	r18,56(sp)
    a8a4:	dd800d15 	stw	r22,52(sp)
    a8a8:	ddc00c15 	stw	r23,48(sp)
    a8ac:	dcc00b15 	stw	r19,44(sp)
    a8b0:	10800717 	ldw	r2,28(r2)
    a8b4:	880b883a 	mov	r5,r17
    a8b8:	dfc00a17 	ldw	ra,40(sp)
    a8bc:	df000917 	ldw	fp,36(sp)
    a8c0:	ddc00817 	ldw	r23,32(sp)
    a8c4:	dd800717 	ldw	r22,28(sp)
    a8c8:	dd400617 	ldw	r21,24(sp)
    a8cc:	dd000517 	ldw	r20,20(sp)
    a8d0:	dcc00417 	ldw	r19,16(sp)
    a8d4:	dc800317 	ldw	r18,12(sp)
    a8d8:	dc400217 	ldw	r17,8(sp)
    a8dc:	dc000117 	ldw	r16,4(sp)
    a8e0:	dec00b04 	addi	sp,sp,44
    a8e4:	1000683a 	jmp	r2
    a8e8:	00bfff84 	movi	r2,-2
    a8ec:	88bfda1e 	bne	r17,r2,a858 <__alt_data_end+0xfc00a858>
    a8f0:	003fd706 	br	a850 <__alt_data_end+0xfc00a850>
    a8f4:	b9400117 	ldw	r5,4(r23)
    a8f8:	81400526 	beq	r16,r5,a910 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a8fc:	00800a84 	movi	r2,42
    a900:	18bfe326 	beq	r3,r2,a890 <__alt_data_end+0xfc00a890>
    a904:	8009883a 	mov	r4,r16
    a908:	000f72c0 	call	f72c <strcmp>
    a90c:	103fe01e 	bne	r2,zero,a890 <__alt_data_end+0xfc00a890>
    a910:	97000215 	stw	fp,8(r18)
    a914:	003fd006 	br	a858 <__alt_data_end+0xfc00a858>
    a918:	00800184 	movi	r2,6
    a91c:	003fcd06 	br	a854 <__alt_data_end+0xfc00a854>

0000a920 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a920:	defffa04 	addi	sp,sp,-24
    a924:	dc000215 	stw	r16,8(sp)
    a928:	dc000617 	ldw	r16,24(sp)
    a92c:	dc800415 	stw	r18,16(sp)
    a930:	dc400315 	stw	r17,12(sp)
    a934:	dfc00515 	stw	ra,20(sp)
    a938:	2023883a 	mov	r17,r4
    a93c:	2825883a 	mov	r18,r5
    a940:	81800b26 	beq	r16,r6,a970 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a944:	89000217 	ldw	r4,8(r17)
    a948:	900b883a 	mov	r5,r18
    a94c:	20800017 	ldw	r2,0(r4)
    a950:	dc000615 	stw	r16,24(sp)
    a954:	10800817 	ldw	r2,32(r2)
    a958:	dfc00517 	ldw	ra,20(sp)
    a95c:	dc800417 	ldw	r18,16(sp)
    a960:	dc400317 	ldw	r17,12(sp)
    a964:	dc000217 	ldw	r16,8(sp)
    a968:	dec00604 	addi	sp,sp,24
    a96c:	1000683a 	jmp	r2
    a970:	21000117 	ldw	r4,4(r4)
    a974:	39400117 	ldw	r5,4(r7)
    a978:	21400926 	beq	r4,r5,a9a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a97c:	20c00007 	ldb	r3,0(r4)
    a980:	00800a84 	movi	r2,42
    a984:	18bfef26 	beq	r3,r2,a944 <__alt_data_end+0xfc00a944>
    a988:	d9800015 	stw	r6,0(sp)
    a98c:	d9c00115 	stw	r7,4(sp)
    a990:	000f72c0 	call	f72c <strcmp>
    a994:	d9800017 	ldw	r6,0(sp)
    a998:	d9c00117 	ldw	r7,4(sp)
    a99c:	103fe91e 	bne	r2,zero,a944 <__alt_data_end+0xfc00a944>
    a9a0:	00800184 	movi	r2,6
    a9a4:	dfc00517 	ldw	ra,20(sp)
    a9a8:	dc800417 	ldw	r18,16(sp)
    a9ac:	dc400317 	ldw	r17,12(sp)
    a9b0:	dc000217 	ldw	r16,8(sp)
    a9b4:	dec00604 	addi	sp,sp,24
    a9b8:	f800283a 	ret

0000a9bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a9bc:	defffb04 	addi	sp,sp,-20
    a9c0:	dcc00315 	stw	r19,12(sp)
    a9c4:	dc800215 	stw	r18,8(sp)
    a9c8:	dc400115 	stw	r17,4(sp)
    a9cc:	dc000015 	stw	r16,0(sp)
    a9d0:	dfc00415 	stw	ra,16(sp)
    a9d4:	2027883a 	mov	r19,r4
    a9d8:	2821883a 	mov	r16,r5
    a9dc:	3023883a 	mov	r17,r6
    a9e0:	3825883a 	mov	r18,r7
    a9e4:	000b5980 	call	b598 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a9e8:	10c03fcc 	andi	r3,r2,255
    a9ec:	18000726 	beq	r3,zero,aa0c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a9f0:	dfc00417 	ldw	ra,16(sp)
    a9f4:	dcc00317 	ldw	r19,12(sp)
    a9f8:	dc800217 	ldw	r18,8(sp)
    a9fc:	dc400117 	ldw	r17,4(sp)
    aa00:	dc000017 	ldw	r16,0(sp)
    aa04:	dec00504 	addi	sp,sp,20
    aa08:	f800283a 	ret
    aa0c:	99000217 	ldw	r4,8(r19)
    aa10:	900f883a 	mov	r7,r18
    aa14:	880d883a 	mov	r6,r17
    aa18:	20800017 	ldw	r2,0(r4)
    aa1c:	800b883a 	mov	r5,r16
    aa20:	10800617 	ldw	r2,24(r2)
    aa24:	dfc00417 	ldw	ra,16(sp)
    aa28:	dcc00317 	ldw	r19,12(sp)
    aa2c:	dc800217 	ldw	r18,8(sp)
    aa30:	dc400117 	ldw	r17,4(sp)
    aa34:	dc000017 	ldw	r16,0(sp)
    aa38:	dec00504 	addi	sp,sp,20
    aa3c:	1000683a 	jmp	r2

0000aa40 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    aa40:	008000f4 	movhi	r2,3
    aa44:	10aa9104 	addi	r2,r2,-21948
    aa48:	20800015 	stw	r2,0(r4)
    aa4c:	000b5541 	jmpi	b554 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000aa50 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    aa50:	defffe04 	addi	sp,sp,-8
    aa54:	008000f4 	movhi	r2,3
    aa58:	dc000015 	stw	r16,0(sp)
    aa5c:	dfc00115 	stw	ra,4(sp)
    aa60:	10aa9104 	addi	r2,r2,-21948
    aa64:	20800015 	stw	r2,0(r4)
    aa68:	2021883a 	mov	r16,r4
    aa6c:	000b5540 	call	b554 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    aa70:	8009883a 	mov	r4,r16
    aa74:	dfc00117 	ldw	ra,4(sp)
    aa78:	dc000017 	ldw	r16,0(sp)
    aa7c:	dec00204 	addi	sp,sp,8
    aa80:	000b4801 	jmpi	b480 <_ZdlPv>

0000aa84 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    aa84:	defff504 	addi	sp,sp,-44
    aa88:	dc400215 	stw	r17,8(sp)
    aa8c:	dc400b17 	ldw	r17,44(sp)
    aa90:	df000915 	stw	fp,36(sp)
    aa94:	ddc00815 	stw	r23,32(sp)
    aa98:	dd800715 	stw	r22,28(sp)
    aa9c:	dc000115 	stw	r16,4(sp)
    aaa0:	dfc00a15 	stw	ra,40(sp)
    aaa4:	dd400615 	stw	r21,24(sp)
    aaa8:	dd000515 	stw	r20,20(sp)
    aaac:	dcc00415 	stw	r19,16(sp)
    aab0:	dc800315 	stw	r18,12(sp)
    aab4:	3039883a 	mov	fp,r6
    aab8:	2021883a 	mov	r16,r4
    aabc:	282d883a 	mov	r22,r5
    aac0:	382f883a 	mov	r23,r7
    aac4:	34402c26 	beq	r6,r17,ab78 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    aac8:	85000317 	ldw	r20,12(r16)
    aacc:	048000c4 	movi	r18,3
    aad0:	04ffff44 	movi	r19,-3
    aad4:	a484983a 	sll	r2,r20,r18
    aad8:	b80f883a 	mov	r7,r23
    aadc:	b00b883a 	mov	r5,r22
    aae0:	10800304 	addi	r2,r2,12
    aae4:	80a1883a 	add	r16,r16,r2
    aae8:	a0001626 	beq	r20,zero,ab44 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    aaec:	81800017 	ldw	r6,0(r16)
    aaf0:	a53fffc4 	addi	r20,r20,-1
    aaf4:	3080008c 	andi	r2,r6,2
    aaf8:	3540004c 	andi	r21,r6,1
    aafc:	10000d26 	beq	r2,zero,ab34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    ab00:	300dd23a 	srai	r6,r6,8
    ab04:	a8000426 	beq	r21,zero,ab18 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    ab08:	b4c00a26 	beq	r22,r19,ab34 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    ab0c:	e0800017 	ldw	r2,0(fp)
    ab10:	118d883a 	add	r6,r2,r6
    ab14:	31800017 	ldw	r6,0(r6)
    ab18:	813fff17 	ldw	r4,-4(r16)
    ab1c:	e18d883a 	add	r6,fp,r6
    ab20:	20800017 	ldw	r2,0(r4)
    ab24:	dc400015 	stw	r17,0(sp)
    ab28:	10800817 	ldw	r2,32(r2)
    ab2c:	103ee83a 	callr	r2
    ab30:	90801b16 	blt	r18,r2,aba0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    ab34:	843ffe04 	addi	r16,r16,-8
    ab38:	b80f883a 	mov	r7,r23
    ab3c:	b00b883a 	mov	r5,r22
    ab40:	a03fea1e 	bne	r20,zero,aaec <__alt_data_end+0xfc00aaec>
    ab44:	00800044 	movi	r2,1
    ab48:	dfc00a17 	ldw	ra,40(sp)
    ab4c:	df000917 	ldw	fp,36(sp)
    ab50:	ddc00817 	ldw	r23,32(sp)
    ab54:	dd800717 	ldw	r22,28(sp)
    ab58:	dd400617 	ldw	r21,24(sp)
    ab5c:	dd000517 	ldw	r20,20(sp)
    ab60:	dcc00417 	ldw	r19,16(sp)
    ab64:	dc800317 	ldw	r18,12(sp)
    ab68:	dc400217 	ldw	r17,8(sp)
    ab6c:	dc000117 	ldw	r16,4(sp)
    ab70:	dec00b04 	addi	sp,sp,44
    ab74:	f800283a 	ret
    ab78:	21000117 	ldw	r4,4(r4)
    ab7c:	39400117 	ldw	r5,4(r7)
    ab80:	21400526 	beq	r4,r5,ab98 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    ab84:	20c00007 	ldb	r3,0(r4)
    ab88:	00800a84 	movi	r2,42
    ab8c:	18bfce26 	beq	r3,r2,aac8 <__alt_data_end+0xfc00aac8>
    ab90:	000f72c0 	call	f72c <strcmp>
    ab94:	103fcc1e 	bne	r2,zero,aac8 <__alt_data_end+0xfc00aac8>
    ab98:	00800184 	movi	r2,6
    ab9c:	003fea06 	br	ab48 <__alt_data_end+0xfc00ab48>
    aba0:	a83fe926 	beq	r21,zero,ab48 <__alt_data_end+0xfc00ab48>
    aba4:	10800054 	ori	r2,r2,1
    aba8:	003fe706 	br	ab48 <__alt_data_end+0xfc00ab48>

0000abac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    abac:	deffe804 	addi	sp,sp,-96
    abb0:	df001615 	stw	fp,88(sp)
    abb4:	df001b17 	ldw	fp,108(sp)
    abb8:	ddc01515 	stw	r23,84(sp)
    abbc:	dd001215 	stw	r20,72(sp)
    abc0:	e0800417 	ldw	r2,16(fp)
    abc4:	dcc01115 	stw	r19,68(sp)
    abc8:	dfc01715 	stw	ra,92(sp)
    abcc:	dd801415 	stw	r22,80(sp)
    abd0:	dd401315 	stw	r21,76(sp)
    abd4:	dc801015 	stw	r18,64(sp)
    abd8:	dc400f15 	stw	r17,60(sp)
    abdc:	dc000e15 	stw	r16,56(sp)
    abe0:	d9000b15 	stw	r4,44(sp)
    abe4:	d9c00915 	stw	r7,36(sp)
    abe8:	1080040c 	andi	r2,r2,16
    abec:	282f883a 	mov	r23,r5
    abf0:	3027883a 	mov	r19,r6
    abf4:	dd001817 	ldw	r20,96(sp)
    abf8:	10000226 	beq	r2,zero,ac04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    abfc:	20800217 	ldw	r2,8(r4)
    ac00:	e0800415 	stw	r2,16(fp)
    ac04:	d8c01a17 	ldw	r3,104(sp)
    ac08:	a0c0cb26 	beq	r20,r3,af38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    ac0c:	d8c00b17 	ldw	r3,44(sp)
    ac10:	1c000117 	ldw	r16,4(r3)
    ac14:	d8c00917 	ldw	r3,36(sp)
    ac18:	19400117 	ldw	r5,4(r3)
    ac1c:	2c000626 	beq	r5,r16,ac38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    ac20:	80c00007 	ldb	r3,0(r16)
    ac24:	00800a84 	movi	r2,42
    ac28:	18801b26 	beq	r3,r2,ac98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    ac2c:	8009883a 	mov	r4,r16
    ac30:	000f72c0 	call	f72c <strcmp>
    ac34:	1000181e 	bne	r2,zero,ac98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    ac38:	e5000015 	stw	r20,0(fp)
    ac3c:	e4c00115 	stw	r19,4(fp)
    ac40:	b8010916 	blt	r23,zero,b068 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    ac44:	d8c01a17 	ldw	r3,104(sp)
    ac48:	a5d9883a 	add	r12,r20,r23
    ac4c:	1b014126 	beq	r3,r12,b154 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    ac50:	00800044 	movi	r2,1
    ac54:	e0800315 	stw	r2,12(fp)
    ac58:	0005883a 	mov	r2,zero
    ac5c:	dfc01717 	ldw	ra,92(sp)
    ac60:	df001617 	ldw	fp,88(sp)
    ac64:	ddc01517 	ldw	r23,84(sp)
    ac68:	dd801417 	ldw	r22,80(sp)
    ac6c:	dd401317 	ldw	r21,76(sp)
    ac70:	dd001217 	ldw	r20,72(sp)
    ac74:	dcc01117 	ldw	r19,68(sp)
    ac78:	dc801017 	ldw	r18,64(sp)
    ac7c:	dc400f17 	ldw	r17,60(sp)
    ac80:	dc000e17 	ldw	r16,56(sp)
    ac84:	dec01804 	addi	sp,sp,96
    ac88:	f800283a 	ret
    ac8c:	d8c00917 	ldw	r3,36(sp)
    ac90:	18800117 	ldw	r2,4(r3)
    ac94:	80bfe826 	beq	r16,r2,ac38 <__alt_data_end+0xfc00ac38>
    ac98:	b800ef16 	blt	r23,zero,b058 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    ac9c:	d8c01a17 	ldw	r3,104(sp)
    aca0:	1dedc83a 	sub	r22,r3,r23
    aca4:	e005883a 	mov	r2,fp
    aca8:	00c00044 	movi	r3,1
    acac:	b039883a 	mov	fp,r22
    acb0:	0021883a 	mov	r16,zero
    acb4:	a02d883a 	mov	r22,r20
    acb8:	d8000a45 	stb	zero,41(sp)
    acbc:	d8c00a05 	stb	r3,40(sp)
    acc0:	048000c4 	movi	r18,3
    acc4:	1029883a 	mov	r20,r2
    acc8:	d8c00b17 	ldw	r3,44(sp)
    accc:	b805883a 	mov	r2,r23
    acd0:	1ac00317 	ldw	r11,12(r3)
    acd4:	581490fa 	slli	r10,r11,3
    acd8:	52800304 	addi	r10,r10,12
    acdc:	1aab883a 	add	r21,r3,r10
    ace0:	b007883a 	mov	r3,r22
    ace4:	582d883a 	mov	r22,r11
    ace8:	a82f883a 	mov	r23,r21
    acec:	1823883a 	mov	r17,r3
    acf0:	102b883a 	mov	r21,r2
    acf4:	b0005526 	beq	r22,zero,ae4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    acf8:	b8800017 	ldw	r2,0(r23)
    acfc:	a1400417 	ldw	r5,16(r20)
    ad00:	d8000415 	stw	zero,16(sp)
    ad04:	d8000515 	stw	zero,20(sp)
    ad08:	d8000615 	stw	zero,24(sp)
    ad0c:	d8000715 	stw	zero,28(sp)
    ad10:	d9400815 	stw	r5,32(sp)
    ad14:	1100004c 	andi	r4,r2,1
    ad18:	1007d23a 	srai	r3,r2,8
    ad1c:	20007526 	beq	r4,zero,aef4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    ad20:	89000017 	ldw	r4,0(r17)
    ad24:	99800054 	ori	r6,r19,1
    ad28:	20c7883a 	add	r3,r4,r3
    ad2c:	18c00017 	ldw	r3,0(r3)
    ad30:	88c7883a 	add	r3,r17,r3
    ad34:	e0000326 	beq	fp,zero,ad44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    ad38:	d9c00a03 	ldbu	r7,40(sp)
    ad3c:	e0c9803a 	cmpltu	r4,fp,r3
    ad40:	21c07226 	beq	r4,r7,af0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    ad44:	1080008c 	andi	r2,r2,2
    ad48:	1000041e 	bne	r2,zero,ad5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    ad4c:	013fff84 	movi	r4,-2
    ad50:	a9007126 	beq	r21,r4,af18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    ad54:	00bfff44 	movi	r2,-3
    ad58:	308c703a 	and	r6,r6,r2
    ad5c:	b93fff17 	ldw	r4,-4(r23)
    ad60:	d9400404 	addi	r5,sp,16
    ad64:	d9c00917 	ldw	r7,36(sp)
    ad68:	20800017 	ldw	r2,0(r4)
    ad6c:	d9400315 	stw	r5,12(sp)
    ad70:	d9401a17 	ldw	r5,104(sp)
    ad74:	d8c00015 	stw	r3,0(sp)
    ad78:	d9400215 	stw	r5,8(sp)
    ad7c:	d9401917 	ldw	r5,100(sp)
    ad80:	d9400115 	stw	r5,4(sp)
    ad84:	10800717 	ldw	r2,28(r2)
    ad88:	a80b883a 	mov	r5,r21
    ad8c:	103ee83a 	callr	r2
    ad90:	a1400217 	ldw	r5,8(r20)
    ad94:	d9000617 	ldw	r4,24(sp)
    ad98:	d8c00717 	ldw	r3,28(sp)
    ad9c:	2908b03a 	or	r4,r5,r4
    ada0:	a1000215 	stw	r4,8(r20)
    ada4:	01400184 	movi	r5,6
    ada8:	1940a426 	beq	r3,r5,b03c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    adac:	01400084 	movi	r5,2
    adb0:	1940a226 	beq	r3,r5,b03c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    adb4:	81403fcc 	andi	r5,r16,255
    adb8:	a1800017 	ldw	r6,0(r20)
    adbc:	28004f1e 	bne	r5,zero,aefc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    adc0:	30007926 	beq	r6,zero,afa8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    adc4:	d9400417 	ldw	r5,16(sp)
    adc8:	29806926 	beq	r5,r6,af70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    adcc:	28006d26 	beq	r5,zero,af84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    add0:	a2800317 	ldw	r10,12(r20)
    add4:	9100250e 	bge	r18,r4,ae6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    add8:	2100004c 	andi	r4,r4,1
    addc:	20000326 	beq	r4,zero,adec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    ade0:	a0800417 	ldw	r2,16(r20)
    ade4:	1080008c 	andi	r2,r2,2
    ade8:	1000201e 	bne	r2,zero,ae6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    adec:	50004d1e 	bne	r10,zero,af24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    adf0:	18002626 	beq	r3,zero,ae8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    adf4:	02800044 	movi	r10,1
    adf8:	181b883a 	mov	r13,r3
    adfc:	1a84f03a 	xor	r2,r3,r10
    ae00:	501f883a 	mov	r15,r10
    ae04:	90801f0e 	bge	r18,r2,ae84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    ae08:	90c0880e 	bge	r18,r3,b02c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    ae0c:	d9400417 	ldw	r5,16(sp)
    ae10:	1880008c 	andi	r2,r3,2
    ae14:	d9000517 	ldw	r4,20(sp)
    ae18:	a1400015 	stw	r5,0(r20)
    ae1c:	0021883a 	mov	r16,zero
    ae20:	a1000115 	stw	r4,4(r20)
    ae24:	a0c00315 	stw	r3,12(r20)
    ae28:	10004f1e 	bne	r2,zero,af68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    ae2c:	6b40004c 	andi	r13,r13,1
    ae30:	68004d26 	beq	r13,zero,af68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    ae34:	a1000217 	ldw	r4,8(r20)
    ae38:	01400104 	movi	r5,4
    ae3c:	21408826 	beq	r4,r5,b060 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    ae40:	b5bfffc4 	addi	r22,r22,-1
    ae44:	bdfffe04 	addi	r23,r23,-8
    ae48:	b03fab1e 	bne	r22,zero,acf8 <__alt_data_end+0xfc00acf8>
    ae4c:	d8800a43 	ldbu	r2,41(sp)
    ae50:	a82f883a 	mov	r23,r21
    ae54:	882d883a 	mov	r22,r17
    ae58:	10008126 	beq	r2,zero,b060 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    ae5c:	dd400a03 	ldbu	r21,40(sp)
    ae60:	a8007f26 	beq	r21,zero,b060 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    ae64:	d8000a05 	stb	zero,40(sp)
    ae68:	003f9706 	br	acc8 <__alt_data_end+0xfc00acc8>
    ae6c:	501f883a 	mov	r15,r10
    ae70:	181b883a 	mov	r13,r3
    ae74:	02800b0e 	bge	zero,r10,aea4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    ae78:	00c0570e 	bge	zero,r3,afd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    ae7c:	1a84f03a 	xor	r2,r3,r10
    ae80:	90bfe116 	blt	r18,r2,ae08 <__alt_data_end+0xfc00ae08>
    ae84:	1bc6703a 	and	r3,r3,r15
    ae88:	90c09916 	blt	r18,r3,b0f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    ae8c:	01000044 	movi	r4,1
    ae90:	a1000315 	stw	r4,12(r20)
    ae94:	a0000015 	stw	zero,0(r20)
    ae98:	a1000217 	ldw	r4,8(r20)
    ae9c:	04000044 	movi	r16,1
    aea0:	003fe506 	br	ae38 <__alt_data_end+0xfc00ae38>
    aea4:	90c00a0e 	bge	r18,r3,aed0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aea8:	1880004c 	andi	r2,r3,1
    aeac:	10000426 	beq	r2,zero,aec0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    aeb0:	d9000b17 	ldw	r4,44(sp)
    aeb4:	20800217 	ldw	r2,8(r4)
    aeb8:	1080008c 	andi	r2,r2,2
    aebc:	1000041e 	bne	r2,zero,aed0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aec0:	1880005c 	xori	r2,r3,1
    aec4:	90bfd216 	blt	r18,r2,ae10 <__alt_data_end+0xfc00ae10>
    aec8:	03c00044 	movi	r15,1
    aecc:	003fed06 	br	ae84 <__alt_data_end+0xfc00ae84>
    aed0:	a8006e16 	blt	r21,zero,b08c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    aed4:	d8801a17 	ldw	r2,104(sp)
    aed8:	354d883a 	add	r6,r6,r21
    aedc:	11805026 	beq	r2,r6,b020 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    aee0:	00c0a50e 	bge	zero,r3,b178 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    aee4:	03c00044 	movi	r15,1
    aee8:	1bc4f03a 	xor	r2,r3,r15
    aeec:	7815883a 	mov	r10,r15
    aef0:	003fc406 	br	ae04 <__alt_data_end+0xfc00ae04>
    aef4:	980d883a 	mov	r6,r19
    aef8:	003f8d06 	br	ad30 <__alt_data_end+0xfc00ad30>
    aefc:	303fb11e 	bne	r6,zero,adc4 <__alt_data_end+0xfc00adc4>
    af00:	d9400417 	ldw	r5,16(sp)
    af04:	283fb21e 	bne	r5,zero,add0 <__alt_data_end+0xfc00add0>
    af08:	003fcb06 	br	ae38 <__alt_data_end+0xfc00ae38>
    af0c:	00c00044 	movi	r3,1
    af10:	d8c00a45 	stb	r3,41(sp)
    af14:	003fca06 	br	ae40 <__alt_data_end+0xfc00ae40>
    af18:	294000cc 	andi	r5,r5,3
    af1c:	283fc826 	beq	r5,zero,ae40 <__alt_data_end+0xfc00ae40>
    af20:	003f8c06 	br	ad54 <__alt_data_end+0xfc00ad54>
    af24:	18001a26 	beq	r3,zero,af90 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    af28:	181b883a 	mov	r13,r3
    af2c:	501f883a 	mov	r15,r10
    af30:	50c4f03a 	xor	r2,r10,r3
    af34:	003fb306 	br	ae04 <__alt_data_end+0xfc00ae04>
    af38:	d8c00b17 	ldw	r3,44(sp)
    af3c:	1c000117 	ldw	r16,4(r3)
    af40:	d8c01917 	ldw	r3,100(sp)
    af44:	19400117 	ldw	r5,4(r3)
    af48:	81400626 	beq	r16,r5,af64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    af4c:	80c00007 	ldb	r3,0(r16)
    af50:	00800a84 	movi	r2,42
    af54:	18bf4d26 	beq	r3,r2,ac8c <__alt_data_end+0xfc00ac8c>
    af58:	8009883a 	mov	r4,r16
    af5c:	000f72c0 	call	f72c <strcmp>
    af60:	10005c1e 	bne	r2,zero,b0d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    af64:	e4c00215 	stw	r19,8(fp)
    af68:	0005883a 	mov	r2,zero
    af6c:	003f3b06 	br	ac5c <__alt_data_end+0xfc00ac5c>
    af70:	a0c00117 	ldw	r3,4(r20)
    af74:	d8800517 	ldw	r2,20(sp)
    af78:	1884b03a 	or	r2,r3,r2
    af7c:	a0800115 	stw	r2,4(r20)
    af80:	003fad06 	br	ae38 <__alt_data_end+0xfc00ae38>
    af84:	10803fcc 	andi	r2,r2,255
    af88:	103f911e 	bne	r2,zero,add0 <__alt_data_end+0xfc00add0>
    af8c:	003faa06 	br	ae38 <__alt_data_end+0xfc00ae38>
    af90:	501b883a 	mov	r13,r10
    af94:	5080005c 	xori	r2,r10,1
    af98:	5007883a 	mov	r3,r10
    af9c:	90bfbb0e 	bge	r18,r2,ae8c <__alt_data_end+0xfc00ae8c>
    afa0:	6880008c 	andi	r2,r13,2
    afa4:	003f9f06 	br	ae24 <__alt_data_end+0xfc00ae24>
    afa8:	d8c00417 	ldw	r3,16(sp)
    afac:	d9400517 	ldw	r5,20(sp)
    afb0:	a0c00015 	stw	r3,0(r20)
    afb4:	a1400115 	stw	r5,4(r20)
    afb8:	18000526 	beq	r3,zero,afd0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    afbc:	20001626 	beq	r4,zero,b018 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    afc0:	d9400b17 	ldw	r5,44(sp)
    afc4:	28c00217 	ldw	r3,8(r5)
    afc8:	18c0004c 	andi	r3,r3,1
    afcc:	183f2326 	beq	r3,zero,ac5c <__alt_data_end+0xfc00ac5c>
    afd0:	1021883a 	mov	r16,r2
    afd4:	003f9806 	br	ae38 <__alt_data_end+0xfc00ae38>
    afd8:	9280060e 	bge	r18,r10,aff4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    afdc:	5080004c 	andi	r2,r10,1
    afe0:	10002426 	beq	r2,zero,b074 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    afe4:	d8c00b17 	ldw	r3,44(sp)
    afe8:	18800217 	ldw	r2,8(r3)
    afec:	1080008c 	andi	r2,r2,2
    aff0:	10003c26 	beq	r2,zero,b0e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    aff4:	d9400417 	ldw	r5,16(sp)
    aff8:	a8004216 	blt	r21,zero,b104 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    affc:	d8c01a17 	ldw	r3,104(sp)
    b000:	2d45883a 	add	r2,r5,r21
    b004:	18805726 	beq	r3,r2,b164 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    b008:	7880005c 	xori	r2,r15,1
    b00c:	781b883a 	mov	r13,r15
    b010:	5007883a 	mov	r3,r10
    b014:	003fe106 	br	af9c <__alt_data_end+0xfc00af9c>
    b018:	1021883a 	mov	r16,r2
    b01c:	003f8806 	br	ae40 <__alt_data_end+0xfc00ae40>
    b020:	03c00184 	movi	r15,6
    b024:	00ffb016 	blt	zero,r3,aee8 <__alt_data_end+0xfc00aee8>
    b028:	7815883a 	mov	r10,r15
    b02c:	7880008c 	andi	r2,r15,2
    b030:	781b883a 	mov	r13,r15
    b034:	5007883a 	mov	r3,r10
    b038:	003f7a06 	br	ae24 <__alt_data_end+0xfc00ae24>
    b03c:	a039883a 	mov	fp,r20
    b040:	e0c00315 	stw	r3,12(fp)
    b044:	d8c00417 	ldw	r3,16(sp)
    b048:	a0c00015 	stw	r3,0(r20)
    b04c:	d8c00517 	ldw	r3,20(sp)
    b050:	a0c00115 	stw	r3,4(r20)
    b054:	003f0106 	br	ac5c <__alt_data_end+0xfc00ac5c>
    b058:	002d883a 	mov	r22,zero
    b05c:	003f1106 	br	aca4 <__alt_data_end+0xfc00aca4>
    b060:	8005883a 	mov	r2,r16
    b064:	003efd06 	br	ac5c <__alt_data_end+0xfc00ac5c>
    b068:	00bfff84 	movi	r2,-2
    b06c:	b8bfbe1e 	bne	r23,r2,af68 <__alt_data_end+0xfc00af68>
    b070:	003ef706 	br	ac50 <__alt_data_end+0xfc00ac50>
    b074:	5080005c 	xori	r2,r10,1
    b078:	90bf840e 	bge	r18,r2,ae8c <__alt_data_end+0xfc00ae8c>
    b07c:	501b883a 	mov	r13,r10
    b080:	5080008c 	andi	r2,r10,2
    b084:	5007883a 	mov	r3,r10
    b088:	003f6606 	br	ae24 <__alt_data_end+0xfc00ae24>
    b08c:	013fff84 	movi	r4,-2
    b090:	a9003226 	beq	r21,r4,b15c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    b094:	d9400917 	ldw	r5,36(sp)
    b098:	d9001a17 	ldw	r4,104(sp)
    b09c:	d9c01917 	ldw	r7,100(sp)
    b0a0:	28800017 	ldw	r2,0(r5)
    b0a4:	d9000015 	stw	r4,0(sp)
    b0a8:	d9000917 	ldw	r4,36(sp)
    b0ac:	10800817 	ldw	r2,32(r2)
    b0b0:	a80b883a 	mov	r5,r21
    b0b4:	d8c00d15 	stw	r3,52(sp)
    b0b8:	db400c15 	stw	r13,48(sp)
    b0bc:	103ee83a 	callr	r2
    b0c0:	1015883a 	mov	r10,r2
    b0c4:	101f883a 	mov	r15,r2
    b0c8:	db400c17 	ldw	r13,48(sp)
    b0cc:	d8c00d17 	ldw	r3,52(sp)
    b0d0:	003f6906 	br	ae78 <__alt_data_end+0xfc00ae78>
    b0d4:	d8c00917 	ldw	r3,36(sp)
    b0d8:	19400117 	ldw	r5,4(r3)
    b0dc:	817ed31e 	bne	r16,r5,ac2c <__alt_data_end+0xfc00ac2c>
    b0e0:	003ed506 	br	ac38 <__alt_data_end+0xfc00ac38>
    b0e4:	5080005c 	xori	r2,r10,1
    b0e8:	90bfe416 	blt	r18,r2,b07c <__alt_data_end+0xfc00b07c>
    b0ec:	003f6706 	br	ae8c <__alt_data_end+0xfc00ae8c>
    b0f0:	00800084 	movi	r2,2
    b0f4:	a0800315 	stw	r2,12(r20)
    b0f8:	a0000015 	stw	zero,0(r20)
    b0fc:	00800044 	movi	r2,1
    b100:	003ed606 	br	ac5c <__alt_data_end+0xfc00ac5c>
    b104:	013fff84 	movi	r4,-2
    b108:	a9002526 	beq	r21,r4,b1a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    b10c:	d8c00917 	ldw	r3,36(sp)
    b110:	d9c01917 	ldw	r7,100(sp)
    b114:	d9000917 	ldw	r4,36(sp)
    b118:	18800017 	ldw	r2,0(r3)
    b11c:	d8c01a17 	ldw	r3,104(sp)
    b120:	280d883a 	mov	r6,r5
    b124:	a80b883a 	mov	r5,r21
    b128:	d8c00015 	stw	r3,0(sp)
    b12c:	10800817 	ldw	r2,32(r2)
    b130:	da800c15 	stw	r10,48(sp)
    b134:	dbc00d15 	stw	r15,52(sp)
    b138:	103ee83a 	callr	r2
    b13c:	da800c17 	ldw	r10,48(sp)
    b140:	1007883a 	mov	r3,r2
    b144:	101b883a 	mov	r13,r2
    b148:	dbc00d17 	ldw	r15,52(sp)
    b14c:	1284f03a 	xor	r2,r2,r10
    b150:	003f2c06 	br	ae04 <__alt_data_end+0xfc00ae04>
    b154:	00800184 	movi	r2,6
    b158:	003ebe06 	br	ac54 <__alt_data_end+0xfc00ac54>
    b15c:	00ff4b0e 	bge	zero,r3,ae8c <__alt_data_end+0xfc00ae8c>
    b160:	003f6006 	br	aee4 <__alt_data_end+0xfc00aee4>
    b164:	5080019c 	xori	r2,r10,6
    b168:	90800916 	blt	r18,r2,b190 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b16c:	50c0018c 	andi	r3,r10,6
    b170:	90ff460e 	bge	r18,r3,ae8c <__alt_data_end+0xfc00ae8c>
    b174:	003fde06 	br	b0f0 <__alt_data_end+0xfc00b0f0>
    b178:	d8c01a17 	ldw	r3,104(sp)
    b17c:	2d45883a 	add	r2,r5,r21
    b180:	18800326 	beq	r3,r2,b190 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    b184:	02800044 	movi	r10,1
    b188:	501f883a 	mov	r15,r10
    b18c:	003f9e06 	br	b008 <__alt_data_end+0xfc00b008>
    b190:	03400184 	movi	r13,6
    b194:	00800084 	movi	r2,2
    b198:	6807883a 	mov	r3,r13
    b19c:	003f1d06 	br	ae14 <__alt_data_end+0xfc00ae14>
    b1a0:	501b883a 	mov	r13,r10
    b1a4:	5080005c 	xori	r2,r10,1
    b1a8:	5007883a 	mov	r3,r10
    b1ac:	003f7b06 	br	af9c <__alt_data_end+0xfc00af9c>

0000b1b0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    b1b0:	deffef04 	addi	sp,sp,-68
    b1b4:	ddc00e15 	stw	r23,56(sp)
    b1b8:	dd000b15 	stw	r20,44(sp)
    b1bc:	dc400815 	stw	r17,32(sp)
    b1c0:	3029883a 	mov	r20,r6
    b1c4:	dfc01015 	stw	ra,64(sp)
    b1c8:	df000f15 	stw	fp,60(sp)
    b1cc:	dd800d15 	stw	r22,52(sp)
    b1d0:	dd400c15 	stw	r21,48(sp)
    b1d4:	dcc00a15 	stw	r19,40(sp)
    b1d8:	dc800915 	stw	r18,36(sp)
    b1dc:	dc000715 	stw	r16,28(sp)
    b1e0:	d9000515 	stw	r4,20(sp)
    b1e4:	2823883a 	mov	r17,r5
    b1e8:	382f883a 	mov	r23,r7
    b1ec:	000b5980 	call	b598 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    b1f0:	100d883a 	mov	r6,r2
    b1f4:	10803fcc 	andi	r2,r2,255
    b1f8:	1000441e 	bne	r2,zero,b30c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    b1fc:	bc000217 	ldw	r16,8(r23)
    b200:	8080040c 	andi	r2,r16,16
    b204:	10000226 	beq	r2,zero,b210 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    b208:	d8c00517 	ldw	r3,20(sp)
    b20c:	1c000217 	ldw	r16,8(r3)
    b210:	d8c00517 	ldw	r3,20(sp)
    b214:	d8800517 	ldw	r2,20(sp)
    b218:	1f000317 	ldw	fp,12(r3)
    b21c:	e01090fa 	slli	r8,fp,3
    b220:	40c00304 	addi	r3,r8,12
    b224:	10ed883a 	add	r22,r2,r3
    b228:	80c0004c 	andi	r3,r16,1
    b22c:	42000204 	addi	r8,r8,8
    b230:	d8c00415 	stw	r3,16(sp)
    b234:	122b883a 	add	r21,r2,r8
    b238:	e0003226 	beq	fp,zero,b304 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    b23c:	b1800017 	ldw	r6,0(r22)
    b240:	d8000015 	stw	zero,0(sp)
    b244:	d8000115 	stw	zero,4(sp)
    b248:	dc000215 	stw	r16,8(sp)
    b24c:	d8000315 	stw	zero,12(sp)
    b250:	34c0008c 	andi	r19,r6,2
    b254:	3480004c 	andi	r18,r6,1
    b258:	9800021e 	bne	r19,zero,b264 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    b25c:	d8c00417 	ldw	r3,16(sp)
    b260:	18002426 	beq	r3,zero,b2f4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b264:	a0003626 	beq	r20,zero,b340 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    b268:	300dd23a 	srai	r6,r6,8
    b26c:	90000326 	beq	r18,zero,b27c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    b270:	a0800017 	ldw	r2,0(r20)
    b274:	118d883a 	add	r6,r2,r6
    b278:	31800017 	ldw	r6,0(r6)
    b27c:	a18d883a 	add	r6,r20,r6
    b280:	a9000017 	ldw	r4,0(r21)
    b284:	d80f883a 	mov	r7,sp
    b288:	880b883a 	mov	r5,r17
    b28c:	20800017 	ldw	r2,0(r4)
    b290:	10800617 	ldw	r2,24(r2)
    b294:	103ee83a 	callr	r2
    b298:	100d883a 	mov	r6,r2
    b29c:	10803fcc 	andi	r2,r2,255
    b2a0:	10001426 	beq	r2,zero,b2f4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    b2a4:	d8800317 	ldw	r2,12(sp)
    b2a8:	00c00204 	movi	r3,8
    b2ac:	10c02626 	beq	r2,r3,b348 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    b2b0:	d8800117 	ldw	r2,4(sp)
    b2b4:	00c000c4 	movi	r3,3
    b2b8:	1880040e 	bge	r3,r2,b2cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    b2bc:	9800031e 	bne	r19,zero,b2cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    b2c0:	00ffff44 	movi	r3,-3
    b2c4:	10c4703a 	and	r2,r2,r3
    b2c8:	d8800115 	stw	r2,4(sp)
    b2cc:	b9400317 	ldw	r5,12(r23)
    b2d0:	28002126 	beq	r5,zero,b358 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    b2d4:	b8800017 	ldw	r2,0(r23)
    b2d8:	d9000017 	ldw	r4,0(sp)
    b2dc:	11004d1e 	bne	r2,r4,b414 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    b2e0:	10003126 	beq	r2,zero,b3a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    b2e4:	b9000117 	ldw	r4,4(r23)
    b2e8:	d8800117 	ldw	r2,4(sp)
    b2ec:	2084b03a 	or	r2,r4,r2
    b2f0:	b8800115 	stw	r2,4(r23)
    b2f4:	e73fffc4 	addi	fp,fp,-1
    b2f8:	b5bffe04 	addi	r22,r22,-8
    b2fc:	ad7ffe04 	addi	r21,r21,-8
    b300:	e03fce1e 	bne	fp,zero,b23c <__alt_data_end+0xfc00b23c>
    b304:	b9800117 	ldw	r6,4(r23)
    b308:	300cc03a 	cmpne	r6,r6,zero
    b30c:	3005883a 	mov	r2,r6
    b310:	dfc01017 	ldw	ra,64(sp)
    b314:	df000f17 	ldw	fp,60(sp)
    b318:	ddc00e17 	ldw	r23,56(sp)
    b31c:	dd800d17 	ldw	r22,52(sp)
    b320:	dd400c17 	ldw	r21,48(sp)
    b324:	dd000b17 	ldw	r20,44(sp)
    b328:	dcc00a17 	ldw	r19,40(sp)
    b32c:	dc800917 	ldw	r18,36(sp)
    b330:	dc400817 	ldw	r17,32(sp)
    b334:	dc000717 	ldw	r16,28(sp)
    b338:	dec01104 	addi	sp,sp,68
    b33c:	f800283a 	ret
    b340:	000d883a 	mov	r6,zero
    b344:	003fce06 	br	b280 <__alt_data_end+0xfc00b280>
    b348:	903fd926 	beq	r18,zero,b2b0 <__alt_data_end+0xfc00b2b0>
    b34c:	a8800017 	ldw	r2,0(r21)
    b350:	d8800315 	stw	r2,12(sp)
    b354:	003fd606 	br	b2b0 <__alt_data_end+0xfc00b2b0>
    b358:	d9000017 	ldw	r4,0(sp)
    b35c:	d8800117 	ldw	r2,4(sp)
    b360:	00c000c4 	movi	r3,3
    b364:	b9000015 	stw	r4,0(r23)
    b368:	d9000217 	ldw	r4,8(sp)
    b36c:	b8800115 	stw	r2,4(r23)
    b370:	b9000215 	stw	r4,8(r23)
    b374:	d9000317 	ldw	r4,12(sp)
    b378:	b9000315 	stw	r4,12(r23)
    b37c:	18bfe30e 	bge	r3,r2,b30c <__alt_data_end+0xfc00b30c>
    b380:	1100008c 	andi	r4,r2,2
    b384:	20001926 	beq	r4,zero,b3ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    b388:	d8c00517 	ldw	r3,20(sp)
    b38c:	18800217 	ldw	r2,8(r3)
    b390:	1080004c 	andi	r2,r2,1
    b394:	103fdd26 	beq	r2,zero,b30c <__alt_data_end+0xfc00b30c>
    b398:	e73fffc4 	addi	fp,fp,-1
    b39c:	b5bffe04 	addi	r22,r22,-8
    b3a0:	ad7ffe04 	addi	r21,r21,-8
    b3a4:	003fd606 	br	b300 <__alt_data_end+0xfc00b300>
    b3a8:	d8800317 	ldw	r2,12(sp)
    b3ac:	00c00204 	movi	r3,8
    b3b0:	10c00b26 	beq	r2,r3,b3e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b3b4:	28c00a26 	beq	r5,r3,b3e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b3b8:	11000117 	ldw	r4,4(r2)
    b3bc:	29400117 	ldw	r5,4(r5)
    b3c0:	217fc826 	beq	r4,r5,b2e4 <__alt_data_end+0xfc00b2e4>
    b3c4:	20800007 	ldb	r2,0(r4)
    b3c8:	00c00a84 	movi	r3,42
    b3cc:	10c00426 	beq	r2,r3,b3e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    b3d0:	d9800615 	stw	r6,24(sp)
    b3d4:	000f72c0 	call	f72c <strcmp>
    b3d8:	d9800617 	ldw	r6,24(sp)
    b3dc:	103fc126 	beq	r2,zero,b2e4 <__alt_data_end+0xfc00b2e4>
    b3e0:	00800084 	movi	r2,2
    b3e4:	b8800115 	stw	r2,4(r23)
    b3e8:	003fc806 	br	b30c <__alt_data_end+0xfc00b30c>
    b3ec:	1080004c 	andi	r2,r2,1
    b3f0:	103fc626 	beq	r2,zero,b30c <__alt_data_end+0xfc00b30c>
    b3f4:	d8c00517 	ldw	r3,20(sp)
    b3f8:	18800217 	ldw	r2,8(r3)
    b3fc:	1080008c 	andi	r2,r2,2
    b400:	103fc226 	beq	r2,zero,b30c <__alt_data_end+0xfc00b30c>
    b404:	e73fffc4 	addi	fp,fp,-1
    b408:	b5bffe04 	addi	r22,r22,-8
    b40c:	ad7ffe04 	addi	r21,r21,-8
    b410:	003fbb06 	br	b300 <__alt_data_end+0xfc00b300>
    b414:	00800084 	movi	r2,2
    b418:	b8000015 	stw	zero,0(r23)
    b41c:	b8800115 	stw	r2,4(r23)
    b420:	003fba06 	br	b30c <__alt_data_end+0xfc00b30c>

0000b424 <_ZNSt9type_infoD1Ev>:
    b424:	f800283a 	ret

0000b428 <_ZNKSt9type_info14__is_pointer_pEv>:
    b428:	0005883a 	mov	r2,zero
    b42c:	f800283a 	ret

0000b430 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    b430:	0005883a 	mov	r2,zero
    b434:	f800283a 	ret

0000b438 <_ZNSt9type_infoD0Ev>:
    b438:	000b4801 	jmpi	b480 <_ZdlPv>

0000b43c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    b43c:	21000117 	ldw	r4,4(r4)
    b440:	29400117 	ldw	r5,4(r5)
    b444:	21400c26 	beq	r4,r5,b478 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    b448:	20c00007 	ldb	r3,0(r4)
    b44c:	00800a84 	movi	r2,42
    b450:	18800726 	beq	r3,r2,b470 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    b454:	deffff04 	addi	sp,sp,-4
    b458:	dfc00015 	stw	ra,0(sp)
    b45c:	000f72c0 	call	f72c <strcmp>
    b460:	1005003a 	cmpeq	r2,r2,zero
    b464:	dfc00017 	ldw	ra,0(sp)
    b468:	dec00104 	addi	sp,sp,4
    b46c:	f800283a 	ret
    b470:	0005883a 	mov	r2,zero
    b474:	f800283a 	ret
    b478:	00800044 	movi	r2,1
    b47c:	f800283a 	ret

0000b480 <_ZdlPv>:
    b480:	000e7201 	jmpi	e720 <free>

0000b484 <__cxa_pure_virtual>:
    b484:	014000f4 	movhi	r5,3
    b488:	deffff04 	addi	sp,sp,-4
    b48c:	296aa604 	addi	r5,r5,-21864
    b490:	018006c4 	movi	r6,27
    b494:	01000084 	movi	r4,2
    b498:	dfc00015 	stw	ra,0(sp)
    b49c:	001fcf00 	call	1fcf0 <write>
    b4a0:	000b84c0 	call	b84c <_ZSt9terminatev>

0000b4a4 <__cxa_deleted_virtual>:
    b4a4:	014000f4 	movhi	r5,3
    b4a8:	deffff04 	addi	sp,sp,-4
    b4ac:	296aad04 	addi	r5,r5,-21836
    b4b0:	01800784 	movi	r6,30
    b4b4:	01000084 	movi	r4,2
    b4b8:	dfc00015 	stw	ra,0(sp)
    b4bc:	001fcf00 	call	1fcf0 <write>
    b4c0:	000b84c0 	call	b84c <_ZSt9terminatev>

0000b4c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    b4c4:	20800017 	ldw	r2,0(r4)
    b4c8:	defffa04 	addi	sp,sp,-24
    b4cc:	dc000415 	stw	r16,16(sp)
    b4d0:	10800617 	ldw	r2,24(r2)
    b4d4:	3021883a 	mov	r16,r6
    b4d8:	31800017 	ldw	r6,0(r6)
    b4dc:	00c00404 	movi	r3,16
    b4e0:	d8c00215 	stw	r3,8(sp)
    b4e4:	dfc00515 	stw	ra,20(sp)
    b4e8:	d8000015 	stw	zero,0(sp)
    b4ec:	d8000115 	stw	zero,4(sp)
    b4f0:	d8000315 	stw	zero,12(sp)
    b4f4:	d80f883a 	mov	r7,sp
    b4f8:	103ee83a 	callr	r2
    b4fc:	d8800117 	ldw	r2,4(sp)
    b500:	00c00184 	movi	r3,6
    b504:	1080018c 	andi	r2,r2,6
    b508:	10c00526 	beq	r2,r3,b520 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b50c:	0005883a 	mov	r2,zero
    b510:	dfc00517 	ldw	ra,20(sp)
    b514:	dc000417 	ldw	r16,16(sp)
    b518:	dec00604 	addi	sp,sp,24
    b51c:	f800283a 	ret
    b520:	d8c00017 	ldw	r3,0(sp)
    b524:	00800044 	movi	r2,1
    b528:	80c00015 	stw	r3,0(r16)
    b52c:	dfc00517 	ldw	ra,20(sp)
    b530:	dc000417 	ldw	r16,16(sp)
    b534:	dec00604 	addi	sp,sp,24
    b538:	f800283a 	ret

0000b53c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b53c:	d8800017 	ldw	r2,0(sp)
    b540:	11800226 	beq	r2,r6,b54c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b544:	00800044 	movi	r2,1
    b548:	f800283a 	ret
    b54c:	00800184 	movi	r2,6
    b550:	f800283a 	ret

0000b554 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b554:	008000f4 	movhi	r2,3
    b558:	10aac304 	addi	r2,r2,-21748
    b55c:	20800015 	stw	r2,0(r4)
    b560:	000b4241 	jmpi	b424 <_ZNSt9type_infoD1Ev>

0000b564 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b564:	defffe04 	addi	sp,sp,-8
    b568:	008000f4 	movhi	r2,3
    b56c:	dc000015 	stw	r16,0(sp)
    b570:	dfc00115 	stw	ra,4(sp)
    b574:	10aac304 	addi	r2,r2,-21748
    b578:	20800015 	stw	r2,0(r4)
    b57c:	2021883a 	mov	r16,r4
    b580:	000b4240 	call	b424 <_ZNSt9type_infoD1Ev>
    b584:	8009883a 	mov	r4,r16
    b588:	dfc00117 	ldw	ra,4(sp)
    b58c:	dc000017 	ldw	r16,0(sp)
    b590:	dec00204 	addi	sp,sp,8
    b594:	000b4801 	jmpi	b480 <_ZdlPv>

0000b598 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b598:	21000117 	ldw	r4,4(r4)
    b59c:	29400117 	ldw	r5,4(r5)
    b5a0:	defffd04 	addi	sp,sp,-12
    b5a4:	dc400115 	stw	r17,4(sp)
    b5a8:	dc000015 	stw	r16,0(sp)
    b5ac:	dfc00215 	stw	ra,8(sp)
    b5b0:	3023883a 	mov	r17,r6
    b5b4:	3821883a 	mov	r16,r7
    b5b8:	21400526 	beq	r4,r5,b5d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b5bc:	20c00007 	ldb	r3,0(r4)
    b5c0:	00800a84 	movi	r2,42
    b5c4:	18800d26 	beq	r3,r2,b5fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b5c8:	000f72c0 	call	f72c <strcmp>
    b5cc:	10000b1e 	bne	r2,zero,b5fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b5d0:	00800204 	movi	r2,8
    b5d4:	80800315 	stw	r2,12(r16)
    b5d8:	00800184 	movi	r2,6
    b5dc:	80800115 	stw	r2,4(r16)
    b5e0:	84400015 	stw	r17,0(r16)
    b5e4:	00800044 	movi	r2,1
    b5e8:	dfc00217 	ldw	ra,8(sp)
    b5ec:	dc400117 	ldw	r17,4(sp)
    b5f0:	dc000017 	ldw	r16,0(sp)
    b5f4:	dec00304 	addi	sp,sp,12
    b5f8:	f800283a 	ret
    b5fc:	0005883a 	mov	r2,zero
    b600:	003ff906 	br	b5e8 <__alt_data_end+0xfc00b5e8>

0000b604 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b604:	defffa04 	addi	sp,sp,-24
    b608:	dc800415 	stw	r18,16(sp)
    b60c:	d8800817 	ldw	r2,32(sp)
    b610:	dc800617 	ldw	r18,24(sp)
    b614:	dc400315 	stw	r17,12(sp)
    b618:	dc000215 	stw	r16,8(sp)
    b61c:	dfc00515 	stw	ra,20(sp)
    b620:	dc400917 	ldw	r17,36(sp)
    b624:	24000117 	ldw	r16,4(r4)
    b628:	90801526 	beq	r18,r2,b680 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b62c:	39400117 	ldw	r5,4(r7)
    b630:	2c000826 	beq	r5,r16,b654 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b634:	80c00007 	ldb	r3,0(r16)
    b638:	00800a84 	movi	r2,42
    b63c:	18800926 	beq	r3,r2,b664 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b640:	8009883a 	mov	r4,r16
    b644:	d9800115 	stw	r6,4(sp)
    b648:	000f72c0 	call	f72c <strcmp>
    b64c:	d9800117 	ldw	r6,4(sp)
    b650:	1000041e 	bne	r2,zero,b664 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b654:	00800044 	movi	r2,1
    b658:	8c800015 	stw	r18,0(r17)
    b65c:	89800115 	stw	r6,4(r17)
    b660:	88800315 	stw	r2,12(r17)
    b664:	0005883a 	mov	r2,zero
    b668:	dfc00517 	ldw	ra,20(sp)
    b66c:	dc800417 	ldw	r18,16(sp)
    b670:	dc400317 	ldw	r17,12(sp)
    b674:	dc000217 	ldw	r16,8(sp)
    b678:	dec00604 	addi	sp,sp,24
    b67c:	f800283a 	ret
    b680:	d8800717 	ldw	r2,28(sp)
    b684:	11400117 	ldw	r5,4(r2)
    b688:	81400a26 	beq	r16,r5,b6b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b68c:	80c00007 	ldb	r3,0(r16)
    b690:	00800a84 	movi	r2,42
    b694:	18800c26 	beq	r3,r2,b6c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b698:	8009883a 	mov	r4,r16
    b69c:	d9800115 	stw	r6,4(sp)
    b6a0:	d9c00015 	stw	r7,0(sp)
    b6a4:	000f72c0 	call	f72c <strcmp>
    b6a8:	d9800117 	ldw	r6,4(sp)
    b6ac:	d9c00017 	ldw	r7,0(sp)
    b6b0:	1000021e 	bne	r2,zero,b6bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b6b4:	89800215 	stw	r6,8(r17)
    b6b8:	003fea06 	br	b664 <__alt_data_end+0xfc00b664>
    b6bc:	39400117 	ldw	r5,4(r7)
    b6c0:	817fdf1e 	bne	r16,r5,b640 <__alt_data_end+0xfc00b640>
    b6c4:	003fe306 	br	b654 <__alt_data_end+0xfc00b654>
    b6c8:	38800117 	ldw	r2,4(r7)
    b6cc:	80bfe51e 	bne	r16,r2,b664 <__alt_data_end+0xfc00b664>
    b6d0:	003fe006 	br	b654 <__alt_data_end+0xfc00b654>

0000b6d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b6d4:	20800117 	ldw	r2,4(r4)
    b6d8:	28c00117 	ldw	r3,4(r5)
    b6dc:	10c02926 	beq	r2,r3,b784 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b6e0:	defffb04 	addi	sp,sp,-20
    b6e4:	dcc00315 	stw	r19,12(sp)
    b6e8:	dc800215 	stw	r18,8(sp)
    b6ec:	dc400115 	stw	r17,4(sp)
    b6f0:	dc000015 	stw	r16,0(sp)
    b6f4:	dfc00415 	stw	ra,16(sp)
    b6f8:	2821883a 	mov	r16,r5
    b6fc:	11400007 	ldb	r5,0(r2)
    b700:	2025883a 	mov	r18,r4
    b704:	01000a84 	movi	r4,42
    b708:	3823883a 	mov	r17,r7
    b70c:	3027883a 	mov	r19,r6
    b710:	29000626 	beq	r5,r4,b72c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b714:	180b883a 	mov	r5,r3
    b718:	1009883a 	mov	r4,r2
    b71c:	000f72c0 	call	f72c <strcmp>
    b720:	1000021e 	bne	r2,zero,b72c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b724:	00800044 	movi	r2,1
    b728:	00000306 	br	b738 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b72c:	008000c4 	movi	r2,3
    b730:	1440082e 	bgeu	r2,r17,b754 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b734:	0005883a 	mov	r2,zero
    b738:	dfc00417 	ldw	ra,16(sp)
    b73c:	dcc00317 	ldw	r19,12(sp)
    b740:	dc800217 	ldw	r18,8(sp)
    b744:	dc400117 	ldw	r17,4(sp)
    b748:	dc000017 	ldw	r16,0(sp)
    b74c:	dec00504 	addi	sp,sp,20
    b750:	f800283a 	ret
    b754:	80800017 	ldw	r2,0(r16)
    b758:	980d883a 	mov	r6,r19
    b75c:	900b883a 	mov	r5,r18
    b760:	10800517 	ldw	r2,20(r2)
    b764:	8009883a 	mov	r4,r16
    b768:	dfc00417 	ldw	ra,16(sp)
    b76c:	dcc00317 	ldw	r19,12(sp)
    b770:	dc800217 	ldw	r18,8(sp)
    b774:	dc400117 	ldw	r17,4(sp)
    b778:	dc000017 	ldw	r16,0(sp)
    b77c:	dec00504 	addi	sp,sp,20
    b780:	1000683a 	jmp	r2
    b784:	00800044 	movi	r2,1
    b788:	f800283a 	ret

0000b78c <_ZN10__cxxabiv111__terminateEPFvvE>:
    b78c:	00800074 	movhi	r2,1
    b790:	deffef04 	addi	sp,sp,-68
    b794:	10b03d04 	addi	r2,r2,-16140
    b798:	d8800615 	stw	r2,24(sp)
    b79c:	008000b4 	movhi	r2,2
    b7a0:	108f6c04 	addi	r2,r2,15792
    b7a4:	d8800715 	stw	r2,28(sp)
    b7a8:	00800074 	movhi	r2,1
    b7ac:	10adf904 	addi	r2,r2,-18460
    b7b0:	d9000d15 	stw	r4,52(sp)
    b7b4:	d809883a 	mov	r4,sp
    b7b8:	d8800915 	stw	r2,36(sp)
    b7bc:	dfc01015 	stw	ra,64(sp)
    b7c0:	df000f15 	stw	fp,60(sp)
    b7c4:	dec00815 	stw	sp,32(sp)
    b7c8:	dec00a15 	stw	sp,40(sp)
    b7cc:	000e32c0 	call	e32c <_Unwind_SjLj_Register>
    b7d0:	00800044 	movi	r2,1
    b7d4:	d8800115 	stw	r2,4(sp)
    b7d8:	d8800d17 	ldw	r2,52(sp)
    b7dc:	103ee83a 	callr	r2
    b7e0:	000e6a80 	call	e6a8 <abort>
    b7e4:	d8c00217 	ldw	r3,8(sp)
    b7e8:	d8800117 	ldw	r2,4(sp)
    b7ec:	d8c00d15 	stw	r3,52(sp)
    b7f0:	d8c00317 	ldw	r3,12(sp)
    b7f4:	d8c00e15 	stw	r3,56(sp)
    b7f8:	10000b26 	beq	r2,zero,b828 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b7fc:	10bfffc4 	addi	r2,r2,-1
    b800:	10000126 	beq	r2,zero,b808 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b804:	003b68fa 	trap	3
    b808:	d8000115 	stw	zero,4(sp)
    b80c:	000cb380 	call	cb38 <__cxa_end_catch>
    b810:	d8c00e17 	ldw	r3,56(sp)
    b814:	00bfffc4 	movi	r2,-1
    b818:	18800826 	beq	r3,r2,b83c <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b81c:	d9000d17 	ldw	r4,52(sp)
    b820:	d8800115 	stw	r2,4(sp)
    b824:	000e5280 	call	e528 <_Unwind_SjLj_Resume>
    b828:	d9000d17 	ldw	r4,52(sp)
    b82c:	000ca840 	call	ca84 <__cxa_begin_catch>
    b830:	00800084 	movi	r2,2
    b834:	d8800115 	stw	r2,4(sp)
    b838:	000e6a80 	call	e6a8 <abort>
    b83c:	d8800e17 	ldw	r2,56(sp)
    b840:	d9000d17 	ldw	r4,52(sp)
    b844:	d8800115 	stw	r2,4(sp)
    b848:	000c6f40 	call	c6f4 <__cxa_call_unexpected>

0000b84c <_ZSt9terminatev>:
    b84c:	008000f4 	movhi	r2,3
    b850:	10b84304 	addi	r2,r2,-7924
    b854:	11000017 	ldw	r4,0(r2)
    b858:	deffff04 	addi	sp,sp,-4
    b85c:	dfc00015 	stw	ra,0(sp)
    b860:	000b78c0 	call	b78c <_ZN10__cxxabiv111__terminateEPFvvE>

0000b864 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b864:	deffff04 	addi	sp,sp,-4
    b868:	dfc00015 	stw	ra,0(sp)
    b86c:	203ee83a 	callr	r4
    b870:	000b84c0 	call	b84c <_ZSt9terminatev>

0000b874 <_ZSt10unexpectedv>:
    b874:	008000f4 	movhi	r2,3
    b878:	10b84204 	addi	r2,r2,-7928
    b87c:	11000017 	ldw	r4,0(r2)
    b880:	deffff04 	addi	sp,sp,-4
    b884:	dfc00015 	stw	ra,0(sp)
    b888:	000b8640 	call	b864 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b88c <_ZSt13set_terminatePFvvE>:
    b88c:	00c000f4 	movhi	r3,3
    b890:	18f84304 	addi	r3,r3,-7924
    b894:	18800017 	ldw	r2,0(r3)
    b898:	19000015 	stw	r4,0(r3)
    b89c:	f800283a 	ret

0000b8a0 <_ZSt13get_terminatev>:
    b8a0:	008000f4 	movhi	r2,3
    b8a4:	10b84304 	addi	r2,r2,-7924
    b8a8:	10800017 	ldw	r2,0(r2)
    b8ac:	f800283a 	ret

0000b8b0 <_ZSt14set_unexpectedPFvvE>:
    b8b0:	00c000f4 	movhi	r3,3
    b8b4:	18f84204 	addi	r3,r3,-7928
    b8b8:	18800017 	ldw	r2,0(r3)
    b8bc:	19000015 	stw	r4,0(r3)
    b8c0:	f800283a 	ret

0000b8c4 <_ZSt14get_unexpectedv>:
    b8c4:	008000f4 	movhi	r2,3
    b8c8:	10b84204 	addi	r2,r2,-7928
    b8cc:	10800017 	ldw	r2,0(r2)
    b8d0:	f800283a 	ret

0000b8d4 <_ZL21size_of_encoded_valueh>:
    b8d4:	deffff04 	addi	sp,sp,-4
    b8d8:	dfc00015 	stw	ra,0(sp)
    b8dc:	20c03fcc 	andi	r3,r4,255
    b8e0:	00803fc4 	movi	r2,255
    b8e4:	18802026 	beq	r3,r2,b968 <_ZL21size_of_encoded_valueh+0x94>
    b8e8:	210001cc 	andi	r4,r4,7
    b8ec:	00800144 	movi	r2,5
    b8f0:	11001c36 	bltu	r2,r4,b964 <_ZL21size_of_encoded_valueh+0x90>
    b8f4:	200890ba 	slli	r4,r4,2
    b8f8:	00800074 	movhi	r2,1
    b8fc:	10ae4304 	addi	r2,r2,-18164
    b900:	2089883a 	add	r4,r4,r2
    b904:	20800017 	ldw	r2,0(r4)
    b908:	1000683a 	jmp	r2
    b90c:	0000b924 	muli	zero,zero,740
    b910:	0000b964 	muli	zero,zero,741
    b914:	0000b934 	movhi	zero,740
    b918:	0000b924 	muli	zero,zero,740
    b91c:	0000b954 	movui	zero,741
    b920:	0000b944 	movi	zero,741
    b924:	00800104 	movi	r2,4
    b928:	dfc00017 	ldw	ra,0(sp)
    b92c:	dec00104 	addi	sp,sp,4
    b930:	f800283a 	ret
    b934:	00800084 	movi	r2,2
    b938:	dfc00017 	ldw	ra,0(sp)
    b93c:	dec00104 	addi	sp,sp,4
    b940:	f800283a 	ret
    b944:	00800044 	movi	r2,1
    b948:	dfc00017 	ldw	ra,0(sp)
    b94c:	dec00104 	addi	sp,sp,4
    b950:	f800283a 	ret
    b954:	00800204 	movi	r2,8
    b958:	dfc00017 	ldw	ra,0(sp)
    b95c:	dec00104 	addi	sp,sp,4
    b960:	f800283a 	ret
    b964:	000e6a80 	call	e6a8 <abort>
    b968:	0005883a 	mov	r2,zero
    b96c:	dfc00017 	ldw	ra,0(sp)
    b970:	dec00104 	addi	sp,sp,4
    b974:	f800283a 	ret

0000b978 <_ZL28read_encoded_value_with_basehjPKhPj>:
    b978:	deffff04 	addi	sp,sp,-4
    b97c:	dfc00015 	stw	ra,0(sp)
    b980:	20c03fcc 	andi	r3,r4,255
    b984:	00801404 	movi	r2,80
    b988:	18807326 	beq	r3,r2,bb58 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b98c:	20c003cc 	andi	r3,r4,15
    b990:	00800304 	movi	r2,12
    b994:	10c06f36 	bltu	r2,r3,bb54 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b998:	180690ba 	slli	r3,r3,2
    b99c:	02000074 	movhi	r8,1
    b9a0:	422e6c04 	addi	r8,r8,-18000
    b9a4:	1a07883a 	add	r3,r3,r8
    b9a8:	18800017 	ldw	r2,0(r3)
    b9ac:	1000683a 	jmp	r2
    b9b0:	0000b9e4 	muli	zero,zero,743
    b9b4:	0000bb00 	call	bb0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14>
    b9b8:	0000bb3c 	xorhi	zero,zero,748
    b9bc:	0000b9e4 	muli	zero,zero,743
    b9c0:	0000ba48 	cmpgei	zero,zero,745
    b9c4:	0000ba9c 	xori	zero,zero,746
    b9c8:	0000bb54 	movui	zero,749
    b9cc:	0000bb54 	movui	zero,749
    b9d0:	0000bb54 	movui	zero,749
    b9d4:	0000baa8 	cmpgeui	zero,zero,746
    b9d8:	0000ba78 	rdprs	zero,zero,745
    b9dc:	0000b9e4 	muli	zero,zero,743
    b9e0:	0000ba48 	cmpgei	zero,zero,745
    b9e4:	30800043 	ldbu	r2,1(r6)
    b9e8:	30c00083 	ldbu	r3,2(r6)
    b9ec:	324000c3 	ldbu	r9,3(r6)
    b9f0:	32000003 	ldbu	r8,0(r6)
    b9f4:	1004923a 	slli	r2,r2,8
    b9f8:	1806943a 	slli	r3,r3,16
    b9fc:	4812963a 	slli	r9,r9,24
    ba00:	1204b03a 	or	r2,r2,r8
    ba04:	1884b03a 	or	r2,r3,r2
    ba08:	4886b03a 	or	r3,r9,r2
    ba0c:	30800104 	addi	r2,r6,4
    ba10:	18000926 	beq	r3,zero,ba38 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    ba14:	22001c0c 	andi	r8,r4,112
    ba18:	02400404 	movi	r9,16
    ba1c:	42405726 	beq	r8,r9,bb7c <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    ba20:	21003fcc 	andi	r4,r4,255
    ba24:	2100201c 	xori	r4,r4,128
    ba28:	213fe004 	addi	r4,r4,-128
    ba2c:	1947883a 	add	r3,r3,r5
    ba30:	2000010e 	bge	r4,zero,ba38 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    ba34:	18c00017 	ldw	r3,0(r3)
    ba38:	38c00015 	stw	r3,0(r7)
    ba3c:	dfc00017 	ldw	ra,0(sp)
    ba40:	dec00104 	addi	sp,sp,4
    ba44:	f800283a 	ret
    ba48:	30800043 	ldbu	r2,1(r6)
    ba4c:	30c00083 	ldbu	r3,2(r6)
    ba50:	324000c3 	ldbu	r9,3(r6)
    ba54:	32000003 	ldbu	r8,0(r6)
    ba58:	1004923a 	slli	r2,r2,8
    ba5c:	1806943a 	slli	r3,r3,16
    ba60:	4812963a 	slli	r9,r9,24
    ba64:	1204b03a 	or	r2,r2,r8
    ba68:	1884b03a 	or	r2,r3,r2
    ba6c:	4886b03a 	or	r3,r9,r2
    ba70:	30800204 	addi	r2,r6,8
    ba74:	003fe606 	br	ba10 <__alt_data_end+0xfc00ba10>
    ba78:	30c00043 	ldbu	r3,1(r6)
    ba7c:	32000003 	ldbu	r8,0(r6)
    ba80:	30800084 	addi	r2,r6,2
    ba84:	1806923a 	slli	r3,r3,8
    ba88:	1a06b03a 	or	r3,r3,r8
    ba8c:	18ffffcc 	andi	r3,r3,65535
    ba90:	18e0001c 	xori	r3,r3,32768
    ba94:	18e00004 	addi	r3,r3,-32768
    ba98:	003fdd06 	br	ba10 <__alt_data_end+0xfc00ba10>
    ba9c:	30c00003 	ldbu	r3,0(r6)
    baa0:	30800044 	addi	r2,r6,1
    baa4:	003fda06 	br	ba10 <__alt_data_end+0xfc00ba10>
    baa8:	3017883a 	mov	r11,r6
    baac:	0007883a 	mov	r3,zero
    bab0:	0013883a 	mov	r9,zero
    bab4:	5a800003 	ldbu	r10,0(r11)
    bab8:	58800044 	addi	r2,r11,1
    babc:	1017883a 	mov	r11,r2
    bac0:	52001fcc 	andi	r8,r10,127
    bac4:	4250983a 	sll	r8,r8,r9
    bac8:	53003fcc 	andi	r12,r10,255
    bacc:	6300201c 	xori	r12,r12,128
    bad0:	633fe004 	addi	r12,r12,-128
    bad4:	1a06b03a 	or	r3,r3,r8
    bad8:	4a4001c4 	addi	r9,r9,7
    badc:	603ff516 	blt	r12,zero,bab4 <__alt_data_end+0xfc00bab4>
    bae0:	020007c4 	movi	r8,31
    bae4:	427fca36 	bltu	r8,r9,ba10 <__alt_data_end+0xfc00ba10>
    bae8:	5280100c 	andi	r10,r10,64
    baec:	503fc826 	beq	r10,zero,ba10 <__alt_data_end+0xfc00ba10>
    baf0:	023fffc4 	movi	r8,-1
    baf4:	4252983a 	sll	r9,r8,r9
    baf8:	1a46b03a 	or	r3,r3,r9
    bafc:	003fc506 	br	ba14 <__alt_data_end+0xfc00ba14>
    bb00:	3017883a 	mov	r11,r6
    bb04:	0007883a 	mov	r3,zero
    bb08:	0015883a 	mov	r10,zero
    bb0c:	5a000003 	ldbu	r8,0(r11)
    bb10:	58800044 	addi	r2,r11,1
    bb14:	1017883a 	mov	r11,r2
    bb18:	42401fcc 	andi	r9,r8,127
    bb1c:	4a92983a 	sll	r9,r9,r10
    bb20:	42003fcc 	andi	r8,r8,255
    bb24:	4200201c 	xori	r8,r8,128
    bb28:	423fe004 	addi	r8,r8,-128
    bb2c:	1a46b03a 	or	r3,r3,r9
    bb30:	528001c4 	addi	r10,r10,7
    bb34:	403ff516 	blt	r8,zero,bb0c <__alt_data_end+0xfc00bb0c>
    bb38:	003fb506 	br	ba10 <__alt_data_end+0xfc00ba10>
    bb3c:	30c00043 	ldbu	r3,1(r6)
    bb40:	32000003 	ldbu	r8,0(r6)
    bb44:	30800084 	addi	r2,r6,2
    bb48:	1806923a 	slli	r3,r3,8
    bb4c:	1a06b03a 	or	r3,r3,r8
    bb50:	003faf06 	br	ba10 <__alt_data_end+0xfc00ba10>
    bb54:	000e6a80 	call	e6a8 <abort>
    bb58:	308000c4 	addi	r2,r6,3
    bb5c:	00ffff04 	movi	r3,-4
    bb60:	10c4703a 	and	r2,r2,r3
    bb64:	10c00017 	ldw	r3,0(r2)
    bb68:	10800104 	addi	r2,r2,4
    bb6c:	38c00015 	stw	r3,0(r7)
    bb70:	dfc00017 	ldw	ra,0(sp)
    bb74:	dec00104 	addi	sp,sp,4
    bb78:	f800283a 	ret
    bb7c:	300b883a 	mov	r5,r6
    bb80:	003fa706 	br	ba20 <__alt_data_end+0xfc00ba20>

0000bb84 <_ZL15get_ttype_entryP16lsda_header_infom>:
    bb84:	defffc04 	addi	sp,sp,-16
    bb88:	dfc00315 	stw	ra,12(sp)
    bb8c:	dc000215 	stw	r16,8(sp)
    bb90:	2021883a 	mov	r16,r4
    bb94:	21000503 	ldbu	r4,20(r4)
    bb98:	d9400115 	stw	r5,4(sp)
    bb9c:	000b8d40 	call	b8d4 <_ZL21size_of_encoded_valueh>
    bba0:	d9400117 	ldw	r5,4(sp)
    bba4:	1009883a 	mov	r4,r2
    bba8:	000d18c0 	call	d18c <__mulsi3>
    bbac:	81800317 	ldw	r6,12(r16)
    bbb0:	81400217 	ldw	r5,8(r16)
    bbb4:	81000503 	ldbu	r4,20(r16)
    bbb8:	d80f883a 	mov	r7,sp
    bbbc:	308dc83a 	sub	r6,r6,r2
    bbc0:	000b9780 	call	b978 <_ZL28read_encoded_value_with_basehjPKhPj>
    bbc4:	d8800017 	ldw	r2,0(sp)
    bbc8:	dfc00317 	ldw	ra,12(sp)
    bbcc:	dc000217 	ldw	r16,8(sp)
    bbd0:	dec00404 	addi	sp,sp,16
    bbd4:	f800283a 	ret

0000bbd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    bbd8:	deffff04 	addi	sp,sp,-4
    bbdc:	dfc00015 	stw	ra,0(sp)
    bbe0:	20c03fcc 	andi	r3,r4,255
    bbe4:	00803fc4 	movi	r2,255
    bbe8:	18800e26 	beq	r3,r2,bc24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    bbec:	20801c0c 	andi	r2,r4,112
    bbf0:	00c00804 	movi	r3,32
    bbf4:	10c01726 	beq	r2,r3,bc54 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    bbf8:	18800e2e 	bgeu	r3,r2,bc34 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    bbfc:	00c01004 	movi	r3,64
    bc00:	10c01026 	beq	r2,r3,bc44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    bc04:	00c01404 	movi	r3,80
    bc08:	10c00626 	beq	r2,r3,bc24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    bc0c:	00c00c04 	movi	r3,48
    bc10:	10c00b1e 	bne	r2,r3,bc40 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    bc14:	2809883a 	mov	r4,r5
    bc18:	dfc00017 	ldw	ra,0(sp)
    bc1c:	dec00104 	addi	sp,sp,4
    bc20:	000e4041 	jmpi	e404 <_Unwind_GetDataRelBase>
    bc24:	0005883a 	mov	r2,zero
    bc28:	dfc00017 	ldw	ra,0(sp)
    bc2c:	dec00104 	addi	sp,sp,4
    bc30:	f800283a 	ret
    bc34:	103ffb26 	beq	r2,zero,bc24 <__alt_data_end+0xfc00bc24>
    bc38:	00c00404 	movi	r3,16
    bc3c:	10fff926 	beq	r2,r3,bc24 <__alt_data_end+0xfc00bc24>
    bc40:	000e6a80 	call	e6a8 <abort>
    bc44:	2809883a 	mov	r4,r5
    bc48:	dfc00017 	ldw	ra,0(sp)
    bc4c:	dec00104 	addi	sp,sp,4
    bc50:	000e3f41 	jmpi	e3f4 <_Unwind_GetRegionStart>
    bc54:	2809883a 	mov	r4,r5
    bc58:	dfc00017 	ldw	ra,0(sp)
    bc5c:	dec00104 	addi	sp,sp,4
    bc60:	000e40c1 	jmpi	e40c <_Unwind_GetTextRelBase>

0000bc64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    bc64:	defffb04 	addi	sp,sp,-20
    bc68:	dcc00315 	stw	r19,12(sp)
    bc6c:	dc400115 	stw	r17,4(sp)
    bc70:	dc000015 	stw	r16,0(sp)
    bc74:	dfc00415 	stw	ra,16(sp)
    bc78:	dc800215 	stw	r18,8(sp)
    bc7c:	2027883a 	mov	r19,r4
    bc80:	2821883a 	mov	r16,r5
    bc84:	3023883a 	mov	r17,r6
    bc88:	20003f26 	beq	r4,zero,bd88 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    bc8c:	000e3f40 	call	e3f4 <_Unwind_GetRegionStart>
    bc90:	88800015 	stw	r2,0(r17)
    bc94:	84800003 	ldbu	r18,0(r16)
    bc98:	00c03fc4 	movi	r3,255
    bc9c:	84000044 	addi	r16,r16,1
    bca0:	90c03726 	beq	r18,r3,bd80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    bca4:	980b883a 	mov	r5,r19
    bca8:	9009883a 	mov	r4,r18
    bcac:	000bbd80 	call	bbd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bcb0:	800d883a 	mov	r6,r16
    bcb4:	89c00104 	addi	r7,r17,4
    bcb8:	100b883a 	mov	r5,r2
    bcbc:	9009883a 	mov	r4,r18
    bcc0:	000b9780 	call	b978 <_ZL28read_encoded_value_with_basehjPKhPj>
    bcc4:	1021883a 	mov	r16,r2
    bcc8:	80c00003 	ldbu	r3,0(r16)
    bccc:	01003fc4 	movi	r4,255
    bcd0:	80800044 	addi	r2,r16,1
    bcd4:	88c00505 	stb	r3,20(r17)
    bcd8:	18c03fcc 	andi	r3,r3,255
    bcdc:	19002c26 	beq	r3,r4,bd90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    bce0:	100f883a 	mov	r7,r2
    bce4:	000d883a 	mov	r6,zero
    bce8:	000b883a 	mov	r5,zero
    bcec:	38c00003 	ldbu	r3,0(r7)
    bcf0:	10800044 	addi	r2,r2,1
    bcf4:	100f883a 	mov	r7,r2
    bcf8:	19001fcc 	andi	r4,r3,127
    bcfc:	2148983a 	sll	r4,r4,r5
    bd00:	18c03fcc 	andi	r3,r3,255
    bd04:	18c0201c 	xori	r3,r3,128
    bd08:	18ffe004 	addi	r3,r3,-128
    bd0c:	310cb03a 	or	r6,r6,r4
    bd10:	294001c4 	addi	r5,r5,7
    bd14:	183ff516 	blt	r3,zero,bcec <__alt_data_end+0xfc00bcec>
    bd18:	118d883a 	add	r6,r2,r6
    bd1c:	89800315 	stw	r6,12(r17)
    bd20:	10c00003 	ldbu	r3,0(r2)
    bd24:	000d883a 	mov	r6,zero
    bd28:	10800044 	addi	r2,r2,1
    bd2c:	88c00545 	stb	r3,21(r17)
    bd30:	000b883a 	mov	r5,zero
    bd34:	10c00003 	ldbu	r3,0(r2)
    bd38:	10800044 	addi	r2,r2,1
    bd3c:	19001fcc 	andi	r4,r3,127
    bd40:	2148983a 	sll	r4,r4,r5
    bd44:	18c03fcc 	andi	r3,r3,255
    bd48:	18c0201c 	xori	r3,r3,128
    bd4c:	18ffe004 	addi	r3,r3,-128
    bd50:	310cb03a 	or	r6,r6,r4
    bd54:	294001c4 	addi	r5,r5,7
    bd58:	183ff616 	blt	r3,zero,bd34 <__alt_data_end+0xfc00bd34>
    bd5c:	118d883a 	add	r6,r2,r6
    bd60:	89800415 	stw	r6,16(r17)
    bd64:	dfc00417 	ldw	ra,16(sp)
    bd68:	dcc00317 	ldw	r19,12(sp)
    bd6c:	dc800217 	ldw	r18,8(sp)
    bd70:	dc400117 	ldw	r17,4(sp)
    bd74:	dc000017 	ldw	r16,0(sp)
    bd78:	dec00504 	addi	sp,sp,20
    bd7c:	f800283a 	ret
    bd80:	88800115 	stw	r2,4(r17)
    bd84:	003fd006 	br	bcc8 <__alt_data_end+0xfc00bcc8>
    bd88:	0005883a 	mov	r2,zero
    bd8c:	003fc006 	br	bc90 <__alt_data_end+0xfc00bc90>
    bd90:	88000315 	stw	zero,12(r17)
    bd94:	003fe206 	br	bd20 <__alt_data_end+0xfc00bd20>

0000bd98 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    bd98:	28800017 	ldw	r2,0(r5)
    bd9c:	30c00017 	ldw	r3,0(r6)
    bda0:	defffb04 	addi	sp,sp,-20
    bda4:	10800217 	ldw	r2,8(r2)
    bda8:	dc400315 	stw	r17,12(sp)
    bdac:	dc000215 	stw	r16,8(sp)
    bdb0:	d9400115 	stw	r5,4(sp)
    bdb4:	dfc00415 	stw	ra,16(sp)
    bdb8:	2021883a 	mov	r16,r4
    bdbc:	d8c00015 	stw	r3,0(sp)
    bdc0:	2809883a 	mov	r4,r5
    bdc4:	3023883a 	mov	r17,r6
    bdc8:	103ee83a 	callr	r2
    bdcc:	10803fcc 	andi	r2,r2,255
    bdd0:	d9400117 	ldw	r5,4(sp)
    bdd4:	10000326 	beq	r2,zero,bde4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    bdd8:	d8800017 	ldw	r2,0(sp)
    bddc:	10800017 	ldw	r2,0(r2)
    bde0:	d8800015 	stw	r2,0(sp)
    bde4:	80800017 	ldw	r2,0(r16)
    bde8:	01c00044 	movi	r7,1
    bdec:	d80d883a 	mov	r6,sp
    bdf0:	10800417 	ldw	r2,16(r2)
    bdf4:	8009883a 	mov	r4,r16
    bdf8:	103ee83a 	callr	r2
    bdfc:	10c03fcc 	andi	r3,r2,255
    be00:	18000226 	beq	r3,zero,be0c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    be04:	d8c00017 	ldw	r3,0(sp)
    be08:	88c00015 	stw	r3,0(r17)
    be0c:	dfc00417 	ldw	ra,16(sp)
    be10:	dc400317 	ldw	r17,12(sp)
    be14:	dc000217 	ldw	r16,8(sp)
    be18:	dec00504 	addi	sp,sp,20
    be1c:	f800283a 	ret

0000be20 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    be20:	defff304 	addi	sp,sp,-52
    be24:	dc800615 	stw	r18,24(sp)
    be28:	3825d23a 	srai	r18,r7,8
    be2c:	dd000815 	stw	r20,32(sp)
    be30:	dcc00715 	stw	r19,28(sp)
    be34:	dfc00c15 	stw	ra,48(sp)
    be38:	ddc00b15 	stw	r23,44(sp)
    be3c:	dd800a15 	stw	r22,40(sp)
    be40:	dd400915 	stw	r21,36(sp)
    be44:	dc400515 	stw	r17,20(sp)
    be48:	dc000415 	stw	r16,16(sp)
    be4c:	d9400215 	stw	r5,8(sp)
    be50:	3827883a 	mov	r19,r7
    be54:	2029883a 	mov	r20,r4
    be58:	9000010e 	bge	r18,zero,be60 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    be5c:	04a5c83a 	sub	r18,zero,r18
    be60:	000b883a 	mov	r5,zero
    be64:	01000144 	movi	r4,5
    be68:	d9800315 	stw	r6,12(sp)
    be6c:	000bbd80 	call	bbd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    be70:	d9800317 	ldw	r6,12(sp)
    be74:	d9c00104 	addi	r7,sp,4
    be78:	100b883a 	mov	r5,r2
    be7c:	01000144 	movi	r4,5
    be80:	000b9780 	call	b978 <_ZL28read_encoded_value_with_basehjPKhPj>
    be84:	017ffe44 	movi	r5,-7
    be88:	1009883a 	mov	r4,r2
    be8c:	1021883a 	mov	r16,r2
    be90:	000d18c0 	call	d18c <__mulsi3>
    be94:	102d883a 	mov	r22,r2
    be98:	0023883a 	mov	r17,zero
    be9c:	85400003 	ldbu	r21,0(r16)
    bea0:	8009883a 	mov	r4,r16
    bea4:	014001c4 	movi	r5,7
    bea8:	000d18c0 	call	d18c <__mulsi3>
    beac:	a8c01fcc 	andi	r3,r21,127
    beb0:	1585883a 	add	r2,r2,r22
    beb4:	1886983a 	sll	r3,r3,r2
    beb8:	ad403fcc 	andi	r21,r21,255
    bebc:	ad40201c 	xori	r21,r21,128
    bec0:	ad7fe004 	addi	r21,r21,-128
    bec4:	84000044 	addi	r16,r16,1
    bec8:	88e2b03a 	or	r17,r17,r3
    becc:	a83ff316 	blt	r21,zero,be9c <__alt_data_end+0xfc00be9c>
    bed0:	8461883a 	add	r16,r16,r17
    bed4:	017ffe44 	movi	r5,-7
    bed8:	8009883a 	mov	r4,r16
    bedc:	000d18c0 	call	d18c <__mulsi3>
    bee0:	102d883a 	mov	r22,r2
    bee4:	002b883a 	mov	r21,zero
    bee8:	84400003 	ldbu	r17,0(r16)
    beec:	8009883a 	mov	r4,r16
    bef0:	014001c4 	movi	r5,7
    bef4:	000d18c0 	call	d18c <__mulsi3>
    bef8:	88c01fcc 	andi	r3,r17,127
    befc:	1585883a 	add	r2,r2,r22
    bf00:	1886983a 	sll	r3,r3,r2
    bf04:	8c403fcc 	andi	r17,r17,255
    bf08:	8c40201c 	xori	r17,r17,128
    bf0c:	8c7fe004 	addi	r17,r17,-128
    bf10:	84000044 	addi	r16,r16,1
    bf14:	a8eab03a 	or	r21,r21,r3
    bf18:	883ff316 	blt	r17,zero,bee8 <__alt_data_end+0xfc00bee8>
    bf1c:	94403fcc 	andi	r17,r18,255
    bf20:	8c7fffc4 	addi	r17,r17,-1
    bf24:	8463883a 	add	r17,r16,r17
    bf28:	ad4000c4 	addi	r21,r21,3
    bf2c:	00bfff04 	movi	r2,-4
    bf30:	ac21883a 	add	r16,r21,r16
    bf34:	017ffe44 	movi	r5,-7
    bf38:	8809883a 	mov	r4,r17
    bf3c:	80a0703a 	and	r16,r16,r2
    bf40:	000d18c0 	call	d18c <__mulsi3>
    bf44:	0025883a 	mov	r18,zero
    bf48:	102f883a 	mov	r23,r2
    bf4c:	8d800003 	ldbu	r22,0(r17)
    bf50:	8809883a 	mov	r4,r17
    bf54:	014001c4 	movi	r5,7
    bf58:	000d18c0 	call	d18c <__mulsi3>
    bf5c:	b0c01fcc 	andi	r3,r22,127
    bf60:	15c5883a 	add	r2,r2,r23
    bf64:	1886983a 	sll	r3,r3,r2
    bf68:	b5803fcc 	andi	r22,r22,255
    bf6c:	b580201c 	xori	r22,r22,128
    bf70:	8d400044 	addi	r21,r17,1
    bf74:	b5bfe004 	addi	r22,r22,-128
    bf78:	90e4b03a 	or	r18,r18,r3
    bf7c:	a823883a 	mov	r17,r21
    bf80:	b03ff216 	blt	r22,zero,bf4c <__alt_data_end+0xfc00bf4c>
    bf84:	9cc03fcc 	andi	r19,r19,255
    bf88:	90002426 	beq	r18,zero,c01c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    bf8c:	9809883a 	mov	r4,r19
    bf90:	000b8d40 	call	b8d4 <_ZL21size_of_encoded_valueh>
    bf94:	100b883a 	mov	r5,r2
    bf98:	913fffc4 	addi	r4,r18,-1
    bf9c:	000d18c0 	call	d18c <__mulsi3>
    bfa0:	d9400d17 	ldw	r5,52(sp)
    bfa4:	d80f883a 	mov	r7,sp
    bfa8:	9809883a 	mov	r4,r19
    bfac:	140d883a 	add	r6,r2,r16
    bfb0:	000b9780 	call	b978 <_ZL28read_encoded_value_with_basehjPKhPj>
    bfb4:	d9000017 	ldw	r4,0(sp)
    bfb8:	d9800204 	addi	r6,sp,8
    bfbc:	a00b883a 	mov	r5,r20
    bfc0:	000bd980 	call	bd98 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bfc4:	10c03fcc 	andi	r3,r2,255
    bfc8:	1800151e 	bne	r3,zero,c020 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    bfcc:	a809883a 	mov	r4,r21
    bfd0:	017ffe44 	movi	r5,-7
    bfd4:	000d18c0 	call	d18c <__mulsi3>
    bfd8:	102d883a 	mov	r22,r2
    bfdc:	a809883a 	mov	r4,r21
    bfe0:	0025883a 	mov	r18,zero
    bfe4:	24400003 	ldbu	r17,0(r4)
    bfe8:	014001c4 	movi	r5,7
    bfec:	000d18c0 	call	d18c <__mulsi3>
    bff0:	88c01fcc 	andi	r3,r17,127
    bff4:	1585883a 	add	r2,r2,r22
    bff8:	1886983a 	sll	r3,r3,r2
    bffc:	8c403fcc 	andi	r17,r17,255
    c000:	8c40201c 	xori	r17,r17,128
    c004:	ad400044 	addi	r21,r21,1
    c008:	8c7fe004 	addi	r17,r17,-128
    c00c:	90e4b03a 	or	r18,r18,r3
    c010:	a809883a 	mov	r4,r21
    c014:	883ff316 	blt	r17,zero,bfe4 <__alt_data_end+0xfc00bfe4>
    c018:	003fdb06 	br	bf88 <__alt_data_end+0xfc00bf88>
    c01c:	0005883a 	mov	r2,zero
    c020:	dfc00c17 	ldw	ra,48(sp)
    c024:	ddc00b17 	ldw	r23,44(sp)
    c028:	dd800a17 	ldw	r22,40(sp)
    c02c:	dd400917 	ldw	r21,36(sp)
    c030:	dd000817 	ldw	r20,32(sp)
    c034:	dcc00717 	ldw	r19,28(sp)
    c038:	dc800617 	ldw	r18,24(sp)
    c03c:	dc400517 	ldw	r17,20(sp)
    c040:	dc000417 	ldw	r16,16(sp)
    c044:	dec00d04 	addi	sp,sp,52
    c048:	f800283a 	ret

0000c04c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    c04c:	defffb04 	addi	sp,sp,-20
    c050:	dc000115 	stw	r16,4(sp)
    c054:	24000317 	ldw	r16,12(r4)
    c058:	01ce303a 	nor	r7,zero,r7
    c05c:	dc800315 	stw	r18,12(sp)
    c060:	dc400215 	stw	r17,8(sp)
    c064:	dfc00415 	stw	ra,16(sp)
    c068:	2023883a 	mov	r17,r4
    c06c:	2825883a 	mov	r18,r5
    c070:	d9800015 	stw	r6,0(sp)
    c074:	81e1883a 	add	r16,r16,r7
    c078:	800d883a 	mov	r6,r16
    c07c:	000b883a 	mov	r5,zero
    c080:	0009883a 	mov	r4,zero
    c084:	30800003 	ldbu	r2,0(r6)
    c088:	84000044 	addi	r16,r16,1
    c08c:	800d883a 	mov	r6,r16
    c090:	10c01fcc 	andi	r3,r2,127
    c094:	1906983a 	sll	r3,r3,r4
    c098:	10803fcc 	andi	r2,r2,255
    c09c:	1080201c 	xori	r2,r2,128
    c0a0:	10bfe004 	addi	r2,r2,-128
    c0a4:	28cab03a 	or	r5,r5,r3
    c0a8:	210001c4 	addi	r4,r4,7
    c0ac:	103ff516 	blt	r2,zero,c084 <__alt_data_end+0xfc00c084>
    c0b0:	28000e26 	beq	r5,zero,c0ec <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    c0b4:	8809883a 	mov	r4,r17
    c0b8:	000bb840 	call	bb84 <_ZL15get_ttype_entryP16lsda_header_infom>
    c0bc:	d80d883a 	mov	r6,sp
    c0c0:	900b883a 	mov	r5,r18
    c0c4:	1009883a 	mov	r4,r2
    c0c8:	000bd980 	call	bd98 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c0cc:	10c03fcc 	andi	r3,r2,255
    c0d0:	183fe926 	beq	r3,zero,c078 <__alt_data_end+0xfc00c078>
    c0d4:	dfc00417 	ldw	ra,16(sp)
    c0d8:	dc800317 	ldw	r18,12(sp)
    c0dc:	dc400217 	ldw	r17,8(sp)
    c0e0:	dc000117 	ldw	r16,4(sp)
    c0e4:	dec00504 	addi	sp,sp,20
    c0e8:	f800283a 	ret
    c0ec:	0005883a 	mov	r2,zero
    c0f0:	003ff806 	br	c0d4 <__alt_data_end+0xfc00c0d4>

0000c0f4 <__gxx_personality_sj0>:
    c0f4:	00800074 	movhi	r2,1
    c0f8:	deffdd04 	addi	sp,sp,-140
    c0fc:	10b03d04 	addi	r2,r2,-16140
    c100:	d8800e15 	stw	r2,56(sp)
    c104:	008000b4 	movhi	r2,2
    c108:	108f7204 	addi	r2,r2,15816
    c10c:	d8800f15 	stw	r2,60(sp)
    c110:	00800074 	movhi	r2,1
    c114:	10b1b304 	addi	r2,r2,-14644
    c118:	d9001515 	stw	r4,84(sp)
    c11c:	d9000804 	addi	r4,sp,32
    c120:	d8801115 	stw	r2,68(sp)
    c124:	dfc02215 	stw	ra,136(sp)
    c128:	df002115 	stw	fp,132(sp)
    c12c:	dec01015 	stw	sp,64(sp)
    c130:	dec01215 	stw	sp,72(sp)
    c134:	d9401915 	stw	r5,100(sp)
    c138:	d9801615 	stw	r6,88(sp)
    c13c:	d9c01715 	stw	r7,92(sp)
    c140:	000e32c0 	call	e32c <_Unwind_SjLj_Register>
    c144:	d8c01517 	ldw	r3,84(sp)
    c148:	d8000715 	stw	zero,28(sp)
    c14c:	d8000615 	stw	zero,24(sp)
    c150:	00800044 	movi	r2,1
    c154:	18800926 	beq	r3,r2,c17c <__gxx_personality_sj0+0x88>
    c158:	01c000c4 	movi	r7,3
    c15c:	d9c01515 	stw	r7,84(sp)
    c160:	d9000804 	addi	r4,sp,32
    c164:	000e3440 	call	e344 <_Unwind_SjLj_Unregister>
    c168:	d8801517 	ldw	r2,84(sp)
    c16c:	dfc02217 	ldw	ra,136(sp)
    c170:	df002117 	ldw	fp,132(sp)
    c174:	dec02304 	addi	sp,sp,140
    c178:	f800283a 	ret
    c17c:	d9001617 	ldw	r4,88(sp)
    c180:	00af3574 	movhi	r2,48341
    c184:	d9c01717 	ldw	r7,92(sp)
    c188:	10b54004 	addi	r2,r2,-11008
    c18c:	00ee2cb4 	movhi	r3,47282
    c190:	2085883a 	add	r2,r4,r2
    c194:	18eaaf04 	addi	r3,r3,-21828
    c198:	d8801b15 	stw	r2,108(sp)
    c19c:	38c7883a 	add	r3,r7,r3
    c1a0:	1105803a 	cmpltu	r2,r2,r4
    c1a4:	10c7883a 	add	r3,r2,r3
    c1a8:	d8c01c15 	stw	r3,112(sp)
    c1ac:	d8c01917 	ldw	r3,100(sp)
    c1b0:	00800184 	movi	r2,6
    c1b4:	18805426 	beq	r3,r2,c308 <__gxx_personality_sj0+0x214>
    c1b8:	d9002417 	ldw	r4,144(sp)
    c1bc:	00bfffc4 	movi	r2,-1
    c1c0:	d8800915 	stw	r2,36(sp)
    c1c4:	000e3e80 	call	e3e8 <_Unwind_GetLanguageSpecificData>
    c1c8:	d8801a15 	stw	r2,104(sp)
    c1cc:	1000c926 	beq	r2,zero,c4f4 <__gxx_personality_sj0+0x400>
    c1d0:	d9002417 	ldw	r4,144(sp)
    c1d4:	d80d883a 	mov	r6,sp
    c1d8:	100b883a 	mov	r5,r2
    c1dc:	000bc640 	call	bc64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c1e0:	d9402417 	ldw	r5,144(sp)
    c1e4:	d9000503 	ldbu	r4,20(sp)
    c1e8:	d8801515 	stw	r2,84(sp)
    c1ec:	000bbd80 	call	bbd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c1f0:	d9002417 	ldw	r4,144(sp)
    c1f4:	d9400604 	addi	r5,sp,24
    c1f8:	d8800215 	stw	r2,8(sp)
    c1fc:	000e3b80 	call	e3b8 <_Unwind_GetIPInfo>
    c200:	d8c00617 	ldw	r3,24(sp)
    c204:	18006126 	beq	r3,zero,c38c <__gxx_personality_sj0+0x298>
    c208:	1000ba16 	blt	r2,zero,c4f4 <__gxx_personality_sj0+0x400>
    c20c:	10002f1e 	bne	r2,zero,c2cc <__gxx_personality_sj0+0x1d8>
    c210:	d8001515 	stw	zero,84(sp)
    c214:	d8001f15 	stw	zero,124(sp)
    c218:	d8001815 	stw	zero,96(sp)
    c21c:	00c00044 	movi	r3,1
    c220:	d9001917 	ldw	r4,100(sp)
    c224:	2080004c 	andi	r2,r4,1
    c228:	1000b51e 	bne	r2,zero,c500 <__gxx_personality_sj0+0x40c>
    c22c:	d9001917 	ldw	r4,100(sp)
    c230:	2080020c 	andi	r2,r4,8
    c234:	1000b71e 	bne	r2,zero,c514 <__gxx_personality_sj0+0x420>
    c238:	d9c01c17 	ldw	r7,112(sp)
    c23c:	3800b826 	beq	r7,zero,c520 <__gxx_personality_sj0+0x42c>
    c240:	00800044 	movi	r2,1
    c244:	1880b526 	beq	r3,r2,c51c <__gxx_personality_sj0+0x428>
    c248:	d9c01517 	ldw	r7,84(sp)
    c24c:	3800f516 	blt	r7,zero,c624 <__gxx_personality_sj0+0x530>
    c250:	d9002417 	ldw	r4,144(sp)
    c254:	d9802317 	ldw	r6,140(sp)
    c258:	00bfffc4 	movi	r2,-1
    c25c:	000b883a 	mov	r5,zero
    c260:	d8800915 	stw	r2,36(sp)
    c264:	000e38c0 	call	e38c <_Unwind_SetGR>
    c268:	d9801517 	ldw	r6,84(sp)
    c26c:	d9002417 	ldw	r4,144(sp)
    c270:	01400044 	movi	r5,1
    c274:	000e38c0 	call	e38c <_Unwind_SetGR>
    c278:	d9002417 	ldw	r4,144(sp)
    c27c:	d9401f17 	ldw	r5,124(sp)
    c280:	000e3d80 	call	e3d8 <_Unwind_SetIP>
    c284:	010001c4 	movi	r4,7
    c288:	d9001515 	stw	r4,84(sp)
    c28c:	003fb406 	br	c160 <__alt_data_end+0xfc00c160>
    c290:	000f883a 	mov	r7,zero
    c294:	000d883a 	mov	r6,zero
    c298:	19000003 	ldbu	r4,0(r3)
    c29c:	18c00044 	addi	r3,r3,1
    c2a0:	d8c01515 	stw	r3,84(sp)
    c2a4:	21401fcc 	andi	r5,r4,127
    c2a8:	298a983a 	sll	r5,r5,r6
    c2ac:	21003fcc 	andi	r4,r4,255
    c2b0:	2100201c 	xori	r4,r4,128
    c2b4:	213fe004 	addi	r4,r4,-128
    c2b8:	394eb03a 	or	r7,r7,r5
    c2bc:	318001c4 	addi	r6,r6,7
    c2c0:	203ff516 	blt	r4,zero,c298 <__alt_data_end+0xfc00c298>
    c2c4:	10bfffc4 	addi	r2,r2,-1
    c2c8:	10003226 	beq	r2,zero,c394 <__gxx_personality_sj0+0x2a0>
    c2cc:	d9c01517 	ldw	r7,84(sp)
    c2d0:	0011883a 	mov	r8,zero
    c2d4:	000d883a 	mov	r6,zero
    c2d8:	39000003 	ldbu	r4,0(r7)
    c2dc:	38c00044 	addi	r3,r7,1
    c2e0:	180f883a 	mov	r7,r3
    c2e4:	21401fcc 	andi	r5,r4,127
    c2e8:	298a983a 	sll	r5,r5,r6
    c2ec:	21003fcc 	andi	r4,r4,255
    c2f0:	2100201c 	xori	r4,r4,128
    c2f4:	213fe004 	addi	r4,r4,-128
    c2f8:	4150b03a 	or	r8,r8,r5
    c2fc:	318001c4 	addi	r6,r6,7
    c300:	203ff516 	blt	r4,zero,c2d8 <__alt_data_end+0xfc00c2d8>
    c304:	003fe206 	br	c290 <__alt_data_end+0xfc00c290>
    c308:	d9001c17 	ldw	r4,112(sp)
    c30c:	203faa1e 	bne	r4,zero,c1b8 <__alt_data_end+0xfc00c1b8>
    c310:	d9c01517 	ldw	r7,84(sp)
    c314:	d8801b17 	ldw	r2,108(sp)
    c318:	38bfa736 	bltu	r7,r2,c1b8 <__alt_data_end+0xfc00c1b8>
    c31c:	d8c02317 	ldw	r3,140(sp)
    c320:	18fffe17 	ldw	r3,-8(r3)
    c324:	d8c01f15 	stw	r3,124(sp)
    c328:	18008226 	beq	r3,zero,c534 <__gxx_personality_sj0+0x440>
    c32c:	d9002317 	ldw	r4,140(sp)
    c330:	d9c02317 	ldw	r7,140(sp)
    c334:	213ffb17 	ldw	r4,-20(r4)
    c338:	39fffd17 	ldw	r7,-12(r7)
    c33c:	d9001515 	stw	r4,84(sp)
    c340:	d9c01a15 	stw	r7,104(sp)
    c344:	d8801517 	ldw	r2,84(sp)
    c348:	103fc10e 	bge	r2,zero,c250 <__alt_data_end+0xfc00c250>
    c34c:	d9002417 	ldw	r4,144(sp)
    c350:	d9401a17 	ldw	r5,104(sp)
    c354:	d80d883a 	mov	r6,sp
    c358:	00bfffc4 	movi	r2,-1
    c35c:	d8800915 	stw	r2,36(sp)
    c360:	000bc640 	call	bc64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c364:	d9402417 	ldw	r5,144(sp)
    c368:	d9000503 	ldbu	r4,20(sp)
    c36c:	000bbd80 	call	bbd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c370:	d9000503 	ldbu	r4,20(sp)
    c374:	d9402417 	ldw	r5,144(sp)
    c378:	d8800215 	stw	r2,8(sp)
    c37c:	000bbd80 	call	bbd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    c380:	d8c02317 	ldw	r3,140(sp)
    c384:	18bffe15 	stw	r2,-8(r3)
    c388:	003fb106 	br	c250 <__alt_data_end+0xfc00c250>
    c38c:	10bfffc4 	addi	r2,r2,-1
    c390:	003f9d06 	br	c208 <__alt_data_end+0xfc00c208>
    c394:	42000044 	addi	r8,r8,1
    c398:	da001f15 	stw	r8,124(sp)
    c39c:	38005326 	beq	r7,zero,c4ec <__gxx_personality_sj0+0x3f8>
    c3a0:	d8800417 	ldw	r2,16(sp)
    c3a4:	39ffffc4 	addi	r7,r7,-1
    c3a8:	11c5883a 	add	r2,r2,r7
    c3ac:	d8801815 	stw	r2,96(sp)
    c3b0:	40005026 	beq	r8,zero,c4f4 <__gxx_personality_sj0+0x400>
    c3b4:	10007426 	beq	r2,zero,c588 <__gxx_personality_sj0+0x494>
    c3b8:	d8801917 	ldw	r2,100(sp)
    c3bc:	1080020c 	andi	r2,r2,8
    c3c0:	d8802015 	stw	r2,128(sp)
    c3c4:	1000a21e 	bne	r2,zero,c650 <__gxx_personality_sj0+0x55c>
    c3c8:	d8c01c17 	ldw	r3,112(sp)
    c3cc:	1800b026 	beq	r3,zero,c690 <__gxx_personality_sj0+0x59c>
    c3d0:	01c000f4 	movhi	r7,3
    c3d4:	39f84804 	addi	r7,r7,-7904
    c3d8:	d9c01e15 	stw	r7,120(sp)
    c3dc:	d8001d05 	stb	zero,116(sp)
    c3e0:	d8c01817 	ldw	r3,96(sp)
    c3e4:	d8001515 	stw	zero,84(sp)
    c3e8:	0009883a 	mov	r4,zero
    c3ec:	19400003 	ldbu	r5,0(r3)
    c3f0:	18800044 	addi	r2,r3,1
    c3f4:	d9c01517 	ldw	r7,84(sp)
    c3f8:	28c01fcc 	andi	r3,r5,127
    c3fc:	1906983a 	sll	r3,r3,r4
    c400:	29803fcc 	andi	r6,r5,255
    c404:	3180201c 	xori	r6,r6,128
    c408:	38ceb03a 	or	r7,r7,r3
    c40c:	d8801715 	stw	r2,92(sp)
    c410:	31bfe004 	addi	r6,r6,-128
    c414:	d9c01515 	stw	r7,84(sp)
    c418:	210001c4 	addi	r4,r4,7
    c41c:	1007883a 	mov	r3,r2
    c420:	303ff216 	blt	r6,zero,c3ec <__alt_data_end+0xfc00c3ec>
    c424:	00c007c4 	movi	r3,31
    c428:	19000836 	bltu	r3,r4,c44c <__gxx_personality_sj0+0x358>
    c42c:	2940100c 	andi	r5,r5,64
    c430:	28000626 	beq	r5,zero,c44c <__gxx_personality_sj0+0x358>
    c434:	01c00044 	movi	r7,1
    c438:	3908983a 	sll	r4,r7,r4
    c43c:	d8c01517 	ldw	r3,84(sp)
    c440:	0109c83a 	sub	r4,zero,r4
    c444:	1906b03a 	or	r3,r3,r4
    c448:	d8c01515 	stw	r3,84(sp)
    c44c:	d8001615 	stw	zero,88(sp)
    c450:	0009883a 	mov	r4,zero
    c454:	11400003 	ldbu	r5,0(r2)
    c458:	d9c01617 	ldw	r7,88(sp)
    c45c:	10800044 	addi	r2,r2,1
    c460:	28c01fcc 	andi	r3,r5,127
    c464:	1906983a 	sll	r3,r3,r4
    c468:	29803fcc 	andi	r6,r5,255
    c46c:	3180201c 	xori	r6,r6,128
    c470:	38ceb03a 	or	r7,r7,r3
    c474:	31bfe004 	addi	r6,r6,-128
    c478:	d9c01615 	stw	r7,88(sp)
    c47c:	210001c4 	addi	r4,r4,7
    c480:	303ff416 	blt	r6,zero,c454 <__alt_data_end+0xfc00c454>
    c484:	008007c4 	movi	r2,31
    c488:	11000736 	bltu	r2,r4,c4a8 <__gxx_personality_sj0+0x3b4>
    c48c:	2940100c 	andi	r5,r5,64
    c490:	28000526 	beq	r5,zero,c4a8 <__gxx_personality_sj0+0x3b4>
    c494:	00c00044 	movi	r3,1
    c498:	1908983a 	sll	r4,r3,r4
    c49c:	0109c83a 	sub	r4,zero,r4
    c4a0:	390eb03a 	or	r7,r7,r4
    c4a4:	d9c01615 	stw	r7,88(sp)
    c4a8:	d9001517 	ldw	r4,84(sp)
    c4ac:	20003c26 	beq	r4,zero,c5a0 <__gxx_personality_sj0+0x4ac>
    c4b0:	01003e0e 	bge	zero,r4,c5ac <__gxx_personality_sj0+0x4b8>
    c4b4:	01ffffc4 	movi	r7,-1
    c4b8:	200b883a 	mov	r5,r4
    c4bc:	d809883a 	mov	r4,sp
    c4c0:	d9c00915 	stw	r7,36(sp)
    c4c4:	000bb840 	call	bb84 <_ZL15get_ttype_entryP16lsda_header_infom>
    c4c8:	10005f26 	beq	r2,zero,c648 <__gxx_personality_sj0+0x554>
    c4cc:	d8c01e17 	ldw	r3,120(sp)
    c4d0:	1800571e 	bne	r3,zero,c630 <__gxx_personality_sj0+0x53c>
    c4d4:	d9001617 	ldw	r4,88(sp)
    c4d8:	20002926 	beq	r4,zero,c580 <__gxx_personality_sj0+0x48c>
    c4dc:	d9c01717 	ldw	r7,92(sp)
    c4e0:	390f883a 	add	r7,r7,r4
    c4e4:	d9c01815 	stw	r7,96(sp)
    c4e8:	003fbd06 	br	c3e0 <__alt_data_end+0xfc00c3e0>
    c4ec:	d8c01f17 	ldw	r3,124(sp)
    c4f0:	1800251e 	bne	r3,zero,c588 <__gxx_personality_sj0+0x494>
    c4f4:	01000204 	movi	r4,8
    c4f8:	d9001515 	stw	r4,84(sp)
    c4fc:	003f1806 	br	c160 <__alt_data_end+0xfc00c160>
    c500:	d8801c17 	ldw	r2,112(sp)
    c504:	10000d26 	beq	r2,zero,c53c <__gxx_personality_sj0+0x448>
    c508:	00800184 	movi	r2,6
    c50c:	d8801515 	stw	r2,84(sp)
    c510:	003f1306 	br	c160 <__alt_data_end+0xfc00c160>
    c514:	00800044 	movi	r2,1
    c518:	18bf4d1e 	bne	r3,r2,c250 <__alt_data_end+0xfc00c250>
    c51c:	000b84c0 	call	b84c <_ZSt9terminatev>
    c520:	d9001b17 	ldw	r4,108(sp)
    c524:	00800044 	movi	r2,1
    c528:	113f4536 	bltu	r2,r4,c240 <__alt_data_end+0xfc00c240>
    c52c:	00800044 	movi	r2,1
    c530:	18bf841e 	bne	r3,r2,c344 <__alt_data_end+0xfc00c344>
    c534:	d9002317 	ldw	r4,140(sp)
    c538:	000ced00 	call	ced0 <__cxa_call_terminate>
    c53c:	d8c01b17 	ldw	r3,108(sp)
    c540:	00800044 	movi	r2,1
    c544:	10fff036 	bltu	r2,r3,c508 <__alt_data_end+0xfc00c508>
    c548:	d9002317 	ldw	r4,140(sp)
    c54c:	d8801817 	ldw	r2,96(sp)
    c550:	d9c01517 	ldw	r7,84(sp)
    c554:	d8c01a17 	ldw	r3,104(sp)
    c558:	20bffc15 	stw	r2,-16(r4)
    c55c:	d8800717 	ldw	r2,28(sp)
    c560:	21fffb15 	stw	r7,-20(r4)
    c564:	d9c01f17 	ldw	r7,124(sp)
    c568:	20bfff15 	stw	r2,-4(r4)
    c56c:	00800184 	movi	r2,6
    c570:	20fffd15 	stw	r3,-12(r4)
    c574:	21fffe15 	stw	r7,-8(r4)
    c578:	d8801515 	stw	r2,84(sp)
    c57c:	003ef806 	br	c160 <__alt_data_end+0xfc00c160>
    c580:	d8801d03 	ldbu	r2,116(sp)
    c584:	103fdb26 	beq	r2,zero,c4f4 <__alt_data_end+0xfc00c4f4>
    c588:	d8c01917 	ldw	r3,100(sp)
    c58c:	1880004c 	andi	r2,r3,1
    c590:	103fd81e 	bne	r2,zero,c4f4 <__alt_data_end+0xfc00c4f4>
    c594:	d8001515 	stw	zero,84(sp)
    c598:	00c00084 	movi	r3,2
    c59c:	003f2306 	br	c22c <__alt_data_end+0xfc00c22c>
    c5a0:	00c00044 	movi	r3,1
    c5a4:	d8c01d05 	stb	r3,116(sp)
    c5a8:	003fca06 	br	c4d4 <__alt_data_end+0xfc00c4d4>
    c5ac:	d9001e17 	ldw	r4,120(sp)
    c5b0:	20000426 	beq	r4,zero,c5c4 <__gxx_personality_sj0+0x4d0>
    c5b4:	d9c02017 	ldw	r7,128(sp)
    c5b8:	3800021e 	bne	r7,zero,c5c4 <__gxx_personality_sj0+0x4d0>
    c5bc:	d8801c17 	ldw	r2,112(sp)
    c5c0:	10002726 	beq	r2,zero,c660 <__gxx_personality_sj0+0x56c>
    c5c4:	d8801517 	ldw	r2,84(sp)
    c5c8:	000d883a 	mov	r6,zero
    c5cc:	000b883a 	mov	r5,zero
    c5d0:	0088303a 	nor	r4,zero,r2
    c5d4:	d8800317 	ldw	r2,12(sp)
    c5d8:	1109883a 	add	r4,r2,r4
    c5dc:	20800003 	ldbu	r2,0(r4)
    c5e0:	21000044 	addi	r4,r4,1
    c5e4:	10c01fcc 	andi	r3,r2,127
    c5e8:	1946983a 	sll	r3,r3,r5
    c5ec:	10803fcc 	andi	r2,r2,255
    c5f0:	1080201c 	xori	r2,r2,128
    c5f4:	10bfe004 	addi	r2,r2,-128
    c5f8:	30ccb03a 	or	r6,r6,r3
    c5fc:	294001c4 	addi	r5,r5,7
    c600:	103ff616 	blt	r2,zero,c5dc <__alt_data_end+0xfc00c5dc>
    c604:	3005003a 	cmpeq	r2,r6,zero
    c608:	10803fcc 	andi	r2,r2,255
    c60c:	103fb126 	beq	r2,zero,c4d4 <__alt_data_end+0xfc00c4d4>
    c610:	d9c01917 	ldw	r7,100(sp)
    c614:	3880004c 	andi	r2,r7,1
    c618:	103fb91e 	bne	r2,zero,c500 <__alt_data_end+0xfc00c500>
    c61c:	d8802017 	ldw	r2,128(sp)
    c620:	10002d26 	beq	r2,zero,c6d8 <__gxx_personality_sj0+0x5e4>
    c624:	00800044 	movi	r2,1
    c628:	d8800915 	stw	r2,36(sp)
    c62c:	000b8740 	call	b874 <_ZSt10unexpectedv>
    c630:	d9800704 	addi	r6,sp,28
    c634:	180b883a 	mov	r5,r3
    c638:	1009883a 	mov	r4,r2
    c63c:	000bd980 	call	bd98 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c640:	10803fcc 	andi	r2,r2,255
    c644:	103fa326 	beq	r2,zero,c4d4 <__alt_data_end+0xfc00c4d4>
    c648:	00c000c4 	movi	r3,3
    c64c:	003ef406 	br	c220 <__alt_data_end+0xfc00c220>
    c650:	010000f4 	movhi	r4,3
    c654:	21384604 	addi	r4,r4,-7912
    c658:	d9001e15 	stw	r4,120(sp)
    c65c:	003f5f06 	br	c3dc <__alt_data_end+0xfc00c3dc>
    c660:	d9001b17 	ldw	r4,108(sp)
    c664:	00c00044 	movi	r3,1
    c668:	193fd636 	bltu	r3,r4,c5c4 <__alt_data_end+0xfc00c5c4>
    c66c:	01ffffc4 	movi	r7,-1
    c670:	d9c00915 	stw	r7,36(sp)
    c674:	d9800717 	ldw	r6,28(sp)
    c678:	d9c01517 	ldw	r7,84(sp)
    c67c:	d9401e17 	ldw	r5,120(sp)
    c680:	d809883a 	mov	r4,sp
    c684:	000c04c0 	call	c04c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c688:	1080005c 	xori	r2,r2,1
    c68c:	003fde06 	br	c608 <__alt_data_end+0xfc00c608>
    c690:	d9001b17 	ldw	r4,108(sp)
    c694:	00800044 	movi	r2,1
    c698:	113f4d36 	bltu	r2,r4,c3d0 <__alt_data_end+0xfc00c3d0>
    c69c:	d9c02317 	ldw	r7,140(sp)
    c6a0:	38800017 	ldw	r2,0(r7)
    c6a4:	1080004c 	andi	r2,r2,1
    c6a8:	1000061e 	bne	r2,zero,c6c4 <__gxx_personality_sj0+0x5d0>
    c6ac:	d8c02317 	ldw	r3,140(sp)
    c6b0:	18800504 	addi	r2,r3,20
    c6b4:	d8800715 	stw	r2,28(sp)
    c6b8:	10bff017 	ldw	r2,-64(r2)
    c6bc:	d8801e15 	stw	r2,120(sp)
    c6c0:	003f4606 	br	c3dc <__alt_data_end+0xfc00c3dc>
    c6c4:	38bff517 	ldw	r2,-44(r7)
    c6c8:	003ffa06 	br	c6b4 <__alt_data_end+0xfc00c6b4>
    c6cc:	d9000a17 	ldw	r4,40(sp)
    c6d0:	000ca840 	call	ca84 <__cxa_begin_catch>
    c6d4:	003f9106 	br	c51c <__alt_data_end+0xfc00c51c>
    c6d8:	d9c01c17 	ldw	r7,112(sp)
    c6dc:	383eda1e 	bne	r7,zero,c248 <__alt_data_end+0xfc00c248>
    c6e0:	d8c01b17 	ldw	r3,108(sp)
    c6e4:	00800044 	movi	r2,1
    c6e8:	10fed736 	bltu	r2,r3,c248 <__alt_data_end+0xfc00c248>
    c6ec:	00c000c4 	movi	r3,3
    c6f0:	003f8e06 	br	c52c <__alt_data_end+0xfc00c52c>

0000c6f4 <__cxa_call_unexpected>:
    c6f4:	00800074 	movhi	r2,1
    c6f8:	deffe604 	addi	sp,sp,-104
    c6fc:	10b03d04 	addi	r2,r2,-16140
    c700:	d8800d15 	stw	r2,52(sp)
    c704:	008000b4 	movhi	r2,2
    c708:	108f7604 	addi	r2,r2,15832
    c70c:	d8800e15 	stw	r2,56(sp)
    c710:	d8800104 	addi	r2,sp,4
    c714:	d8800f15 	stw	r2,60(sp)
    c718:	00800074 	movhi	r2,1
    c71c:	10b1e004 	addi	r2,r2,-14464
    c720:	d9001415 	stw	r4,80(sp)
    c724:	d9000704 	addi	r4,sp,28
    c728:	dfc01915 	stw	ra,100(sp)
    c72c:	d8801015 	stw	r2,64(sp)
    c730:	df001815 	stw	fp,96(sp)
    c734:	dec01115 	stw	sp,68(sp)
    c738:	000e32c0 	call	e32c <_Unwind_SjLj_Register>
    c73c:	d9001417 	ldw	r4,80(sp)
    c740:	000ca840 	call	ca84 <__cxa_begin_catch>
    c744:	d8c01417 	ldw	r3,80(sp)
    c748:	18bffe17 	ldw	r2,-8(r3)
    c74c:	193ff717 	ldw	r4,-36(r3)
    c750:	18fffd17 	ldw	r3,-12(r3)
    c754:	d8800315 	stw	r2,12(sp)
    c758:	d8c01615 	stw	r3,88(sp)
    c75c:	d8c01417 	ldw	r3,80(sp)
    c760:	18fffb17 	ldw	r3,-20(r3)
    c764:	d8c01515 	stw	r3,84(sp)
    c768:	d8c01417 	ldw	r3,80(sp)
    c76c:	18fff817 	ldw	r3,-32(r3)
    c770:	d8c01415 	stw	r3,80(sp)
    c774:	00c00044 	movi	r3,1
    c778:	d8c00815 	stw	r3,32(sp)
    c77c:	000b8640 	call	b864 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c780:	d8c00917 	ldw	r3,36(sp)
    c784:	d8800817 	ldw	r2,32(sp)
    c788:	d8c01715 	stw	r3,92(sp)
    c78c:	10000a26 	beq	r2,zero,c7b8 <__cxa_call_unexpected+0xc4>
    c790:	10bfffc4 	addi	r2,r2,-1
    c794:	10000126 	beq	r2,zero,c79c <__cxa_call_unexpected+0xa8>
    c798:	003b68fa 	trap	3
    c79c:	d8000815 	stw	zero,32(sp)
    c7a0:	000cb380 	call	cb38 <__cxa_end_catch>
    c7a4:	000cb380 	call	cb38 <__cxa_end_catch>
    c7a8:	d9001717 	ldw	r4,92(sp)
    c7ac:	00bfffc4 	movi	r2,-1
    c7b0:	d8800815 	stw	r2,32(sp)
    c7b4:	000e5280 	call	e528 <_Unwind_SjLj_Resume>
    c7b8:	d9001717 	ldw	r4,92(sp)
    c7bc:	000ca840 	call	ca84 <__cxa_begin_catch>
    c7c0:	000cf280 	call	cf28 <__cxa_get_globals_fast>
    c7c4:	10800017 	ldw	r2,0(r2)
    c7c8:	10c00b17 	ldw	r3,44(r2)
    c7cc:	18c0004c 	andi	r3,r3,1
    c7d0:	18001e26 	beq	r3,zero,c84c <__cxa_call_unexpected+0x158>
    c7d4:	10800017 	ldw	r2,0(r2)
    c7d8:	d8801715 	stw	r2,92(sp)
    c7dc:	d8801517 	ldw	r2,84(sp)
    c7e0:	00802b0e 	bge	zero,r2,c890 <__cxa_call_unexpected+0x19c>
    c7e4:	d8c01717 	ldw	r3,92(sp)
    c7e8:	d8800317 	ldw	r2,12(sp)
    c7ec:	d9c01517 	ldw	r7,84(sp)
    c7f0:	193ff017 	ldw	r4,-64(r3)
    c7f4:	d9801617 	ldw	r6,88(sp)
    c7f8:	d8800015 	stw	r2,0(sp)
    c7fc:	180b883a 	mov	r5,r3
    c800:	00800084 	movi	r2,2
    c804:	d8800815 	stw	r2,32(sp)
    c808:	000be200 	call	be20 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c80c:	10803fcc 	andi	r2,r2,255
    c810:	10001e1e 	bne	r2,zero,c88c <__cxa_call_unexpected+0x198>
    c814:	d8800317 	ldw	r2,12(sp)
    c818:	d9c01517 	ldw	r7,84(sp)
    c81c:	d9801617 	ldw	r6,88(sp)
    c820:	010000f4 	movhi	r4,3
    c824:	d8800015 	stw	r2,0(sp)
    c828:	212ade04 	addi	r4,r4,-21640
    c82c:	00800084 	movi	r2,2
    c830:	000b883a 	mov	r5,zero
    c834:	d8800815 	stw	r2,32(sp)
    c838:	000be200 	call	be20 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c83c:	10803fcc 	andi	r2,r2,255
    c840:	1000051e 	bne	r2,zero,c858 <__cxa_call_unexpected+0x164>
    c844:	d9001417 	ldw	r4,80(sp)
    c848:	000b78c0 	call	b78c <_ZN10__cxxabiv111__terminateEPFvvE>
    c84c:	10801004 	addi	r2,r2,64
    c850:	d8801715 	stw	r2,92(sp)
    c854:	003fe106 	br	c7dc <__alt_data_end+0xfc00c7dc>
    c858:	01000104 	movi	r4,4
    c85c:	000cd6c0 	call	cd6c <__cxa_allocate_exception>
    c860:	00c000f4 	movhi	r3,3
    c864:	18eaf904 	addi	r3,r3,-21532
    c868:	01800074 	movhi	r6,1
    c86c:	014000f4 	movhi	r5,3
    c870:	10c00015 	stw	r3,0(r2)
    c874:	31b3d104 	addi	r6,r6,-12476
    c878:	00c00084 	movi	r3,2
    c87c:	296ade04 	addi	r5,r5,-21640
    c880:	1009883a 	mov	r4,r2
    c884:	d8c00815 	stw	r3,32(sp)
    c888:	000c9680 	call	c968 <__cxa_throw>
    c88c:	000c9f80 	call	c9f8 <__cxa_rethrow>
    c890:	d9401617 	ldw	r5,88(sp)
    c894:	00800084 	movi	r2,2
    c898:	d9800104 	addi	r6,sp,4
    c89c:	0009883a 	mov	r4,zero
    c8a0:	d8800815 	stw	r2,32(sp)
    c8a4:	000bc640 	call	bc64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c8a8:	d9801717 	ldw	r6,92(sp)
    c8ac:	d9c01517 	ldw	r7,84(sp)
    c8b0:	d9000104 	addi	r4,sp,4
    c8b4:	317ff017 	ldw	r5,-64(r6)
    c8b8:	000c04c0 	call	c04c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c8bc:	10803fcc 	andi	r2,r2,255
    c8c0:	1000171e 	bne	r2,zero,c920 <__cxa_call_unexpected+0x22c>
    c8c4:	d9c01517 	ldw	r7,84(sp)
    c8c8:	014000f4 	movhi	r5,3
    c8cc:	00800084 	movi	r2,2
    c8d0:	296ade04 	addi	r5,r5,-21640
    c8d4:	000d883a 	mov	r6,zero
    c8d8:	d9000104 	addi	r4,sp,4
    c8dc:	d8800815 	stw	r2,32(sp)
    c8e0:	000c04c0 	call	c04c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c8e4:	10803fcc 	andi	r2,r2,255
    c8e8:	103fd626 	beq	r2,zero,c844 <__alt_data_end+0xfc00c844>
    c8ec:	01000104 	movi	r4,4
    c8f0:	000cd6c0 	call	cd6c <__cxa_allocate_exception>
    c8f4:	00c000f4 	movhi	r3,3
    c8f8:	18eaf904 	addi	r3,r3,-21532
    c8fc:	01800074 	movhi	r6,1
    c900:	014000f4 	movhi	r5,3
    c904:	10c00015 	stw	r3,0(r2)
    c908:	31b3d104 	addi	r6,r6,-12476
    c90c:	00c00084 	movi	r3,2
    c910:	296ade04 	addi	r5,r5,-21640
    c914:	1009883a 	mov	r4,r2
    c918:	d8c00815 	stw	r3,32(sp)
    c91c:	000c9680 	call	c968 <__cxa_throw>
    c920:	000c9f80 	call	c9f8 <__cxa_rethrow>

0000c924 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c924:	defffe04 	addi	sp,sp,-8
    c928:	dfc00115 	stw	ra,4(sp)
    c92c:	dc000015 	stw	r16,0(sp)
    c930:	00800044 	movi	r2,1
    c934:	11000a36 	bltu	r2,r4,c960 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c938:	28bff617 	ldw	r2,-40(r5)
    c93c:	2c000504 	addi	r16,r5,20
    c940:	10000226 	beq	r2,zero,c94c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c944:	8009883a 	mov	r4,r16
    c948:	103ee83a 	callr	r2
    c94c:	8009883a 	mov	r4,r16
    c950:	dfc00117 	ldw	ra,4(sp)
    c954:	dc000017 	ldw	r16,0(sp)
    c958:	dec00204 	addi	sp,sp,8
    c95c:	000cdcc1 	jmpi	cdcc <__cxa_free_exception>
    c960:	293ff817 	ldw	r4,-32(r5)
    c964:	000b78c0 	call	b78c <_ZN10__cxxabiv111__terminateEPFvvE>

0000c968 <__cxa_throw>:
    c968:	defffb04 	addi	sp,sp,-20
    c96c:	dfc00415 	stw	ra,16(sp)
    c970:	dcc00315 	stw	r19,12(sp)
    c974:	dc800215 	stw	r18,8(sp)
    c978:	2827883a 	mov	r19,r5
    c97c:	3025883a 	mov	r18,r6
    c980:	dc400115 	stw	r17,4(sp)
    c984:	dc000015 	stw	r16,0(sp)
    c988:	2021883a 	mov	r16,r4
    c98c:	000cf340 	call	cf34 <__cxa_get_globals>
    c990:	10c00117 	ldw	r3,4(r2)
    c994:	847ffb04 	addi	r17,r16,-20
    c998:	18c00044 	addi	r3,r3,1
    c99c:	10c00115 	stw	r3,4(r2)
    c9a0:	00800044 	movi	r2,1
    c9a4:	80bfef15 	stw	r2,-68(r16)
    c9a8:	84fff015 	stw	r19,-64(r16)
    c9ac:	84bff115 	stw	r18,-60(r16)
    c9b0:	000b8c40 	call	b8c4 <_ZSt14get_unexpectedv>
    c9b4:	80bff215 	stw	r2,-56(r16)
    c9b8:	000b8a00 	call	b8a0 <_ZSt13get_terminatev>
    c9bc:	80bff315 	stw	r2,-52(r16)
    c9c0:	0090caf4 	movhi	r2,17195
    c9c4:	108ac004 	addi	r2,r2,11008
    c9c8:	80bffb15 	stw	r2,-20(r16)
    c9cc:	0091d3b4 	movhi	r2,18254
    c9d0:	109550c4 	addi	r2,r2,21827
    c9d4:	80bffc15 	stw	r2,-16(r16)
    c9d8:	00800074 	movhi	r2,1
    c9dc:	10b24904 	addi	r2,r2,-14044
    c9e0:	8809883a 	mov	r4,r17
    c9e4:	80bffd15 	stw	r2,-12(r16)
    c9e8:	000e4140 	call	e414 <_Unwind_SjLj_RaiseException>
    c9ec:	8809883a 	mov	r4,r17
    c9f0:	000ca840 	call	ca84 <__cxa_begin_catch>
    c9f4:	000b84c0 	call	b84c <_ZSt9terminatev>

0000c9f8 <__cxa_rethrow>:
    c9f8:	defffe04 	addi	sp,sp,-8
    c9fc:	dfc00115 	stw	ra,4(sp)
    ca00:	dc000015 	stw	r16,0(sp)
    ca04:	000cf340 	call	cf34 <__cxa_get_globals>
    ca08:	10c00117 	ldw	r3,4(r2)
    ca0c:	11000017 	ldw	r4,0(r2)
    ca10:	18c00044 	addi	r3,r3,1
    ca14:	10c00115 	stw	r3,4(r2)
    ca18:	20001126 	beq	r4,zero,ca60 <__cxa_rethrow+0x68>
    ca1c:	21400b17 	ldw	r5,44(r4)
    ca20:	01ef3574 	movhi	r7,48341
    ca24:	39f54004 	addi	r7,r7,-11008
    ca28:	29cf883a 	add	r7,r5,r7
    ca2c:	20c00c17 	ldw	r3,48(r4)
    ca30:	394d803a 	cmpltu	r6,r7,r5
    ca34:	016e2cb4 	movhi	r5,47282
    ca38:	296aaf04 	addi	r5,r5,-21828
    ca3c:	1947883a 	add	r3,r3,r5
    ca40:	30c7883a 	add	r3,r6,r3
    ca44:	18000726 	beq	r3,zero,ca64 <__cxa_rethrow+0x6c>
    ca48:	10000015 	stw	zero,0(r2)
    ca4c:	24000b04 	addi	r16,r4,44
    ca50:	8009883a 	mov	r4,r16
    ca54:	000e56c0 	call	e56c <_Unwind_SjLj_Resume_or_Rethrow>
    ca58:	8009883a 	mov	r4,r16
    ca5c:	000ca840 	call	ca84 <__cxa_begin_catch>
    ca60:	000b84c0 	call	b84c <_ZSt9terminatev>
    ca64:	00c00044 	movi	r3,1
    ca68:	19fff736 	bltu	r3,r7,ca48 <__alt_data_end+0xfc00ca48>
    ca6c:	20800517 	ldw	r2,20(r4)
    ca70:	0085c83a 	sub	r2,zero,r2
    ca74:	20800515 	stw	r2,20(r4)
    ca78:	003ff406 	br	ca4c <__alt_data_end+0xfc00ca4c>

0000ca7c <__cxa_get_exception_ptr>:
    ca7c:	20bfff17 	ldw	r2,-4(r4)
    ca80:	f800283a 	ret

0000ca84 <__cxa_begin_catch>:
    ca84:	defffe04 	addi	sp,sp,-8
    ca88:	dc000015 	stw	r16,0(sp)
    ca8c:	dfc00115 	stw	ra,4(sp)
    ca90:	2021883a 	mov	r16,r4
    ca94:	000cf340 	call	cf34 <__cxa_get_globals>
    ca98:	81000017 	ldw	r4,0(r16)
    ca9c:	80c00117 	ldw	r3,4(r16)
    caa0:	01af3574 	movhi	r6,48341
    caa4:	31b54004 	addi	r6,r6,-11008
    caa8:	016e2cb4 	movhi	r5,47282
    caac:	296aaf04 	addi	r5,r5,-21828
    cab0:	218d883a 	add	r6,r4,r6
    cab4:	3109803a 	cmpltu	r4,r6,r4
    cab8:	1947883a 	add	r3,r3,r5
    cabc:	20c7883a 	add	r3,r4,r3
    cac0:	817ff504 	addi	r5,r16,-44
    cac4:	11000017 	ldw	r4,0(r2)
    cac8:	18000726 	beq	r3,zero,cae8 <__cxa_begin_catch+0x64>
    cacc:	2000191e 	bne	r4,zero,cb34 <__cxa_begin_catch+0xb0>
    cad0:	11400015 	stw	r5,0(r2)
    cad4:	0005883a 	mov	r2,zero
    cad8:	dfc00117 	ldw	ra,4(sp)
    cadc:	dc000017 	ldw	r16,0(sp)
    cae0:	dec00204 	addi	sp,sp,8
    cae4:	f800283a 	ret
    cae8:	01c00044 	movi	r7,1
    caec:	39bff736 	bltu	r7,r6,cacc <__alt_data_end+0xfc00cacc>
    caf0:	80fffa17 	ldw	r3,-24(r16)
    caf4:	18000d16 	blt	r3,zero,cb2c <__cxa_begin_catch+0xa8>
    caf8:	18c00044 	addi	r3,r3,1
    cafc:	11800117 	ldw	r6,4(r2)
    cb00:	80fffa15 	stw	r3,-24(r16)
    cb04:	30ffffc4 	addi	r3,r6,-1
    cb08:	10c00115 	stw	r3,4(r2)
    cb0c:	21400226 	beq	r4,r5,cb18 <__cxa_begin_catch+0x94>
    cb10:	813ff915 	stw	r4,-28(r16)
    cb14:	11400015 	stw	r5,0(r2)
    cb18:	80bfff17 	ldw	r2,-4(r16)
    cb1c:	dfc00117 	ldw	ra,4(sp)
    cb20:	dc000017 	ldw	r16,0(sp)
    cb24:	dec00204 	addi	sp,sp,8
    cb28:	f800283a 	ret
    cb2c:	38c7c83a 	sub	r3,r7,r3
    cb30:	003ff206 	br	cafc <__alt_data_end+0xfc00cafc>
    cb34:	000b84c0 	call	b84c <_ZSt9terminatev>

0000cb38 <__cxa_end_catch>:
    cb38:	deffff04 	addi	sp,sp,-4
    cb3c:	dfc00015 	stw	ra,0(sp)
    cb40:	000cf280 	call	cf28 <__cxa_get_globals_fast>
    cb44:	11000017 	ldw	r4,0(r2)
    cb48:	20001426 	beq	r4,zero,cb9c <__cxa_end_catch+0x64>
    cb4c:	21400b17 	ldw	r5,44(r4)
    cb50:	01ef3574 	movhi	r7,48341
    cb54:	39f54004 	addi	r7,r7,-11008
    cb58:	29cf883a 	add	r7,r5,r7
    cb5c:	20c00c17 	ldw	r3,48(r4)
    cb60:	394d803a 	cmpltu	r6,r7,r5
    cb64:	016e2cb4 	movhi	r5,47282
    cb68:	296aaf04 	addi	r5,r5,-21828
    cb6c:	1947883a 	add	r3,r3,r5
    cb70:	30c7883a 	add	r3,r6,r3
    cb74:	18000c1e 	bne	r3,zero,cba8 <__cxa_end_catch+0x70>
    cb78:	00c00044 	movi	r3,1
    cb7c:	19c00a36 	bltu	r3,r7,cba8 <__cxa_end_catch+0x70>
    cb80:	20c00517 	ldw	r3,20(r4)
    cb84:	18000d16 	blt	r3,zero,cbbc <__cxa_end_catch+0x84>
    cb88:	18ffffc4 	addi	r3,r3,-1
    cb8c:	18001026 	beq	r3,zero,cbd0 <__cxa_end_catch+0x98>
    cb90:	00bfffc4 	movi	r2,-1
    cb94:	18801426 	beq	r3,r2,cbe8 <__cxa_end_catch+0xb0>
    cb98:	20c00515 	stw	r3,20(r4)
    cb9c:	dfc00017 	ldw	ra,0(sp)
    cba0:	dec00104 	addi	sp,sp,4
    cba4:	f800283a 	ret
    cba8:	21000b04 	addi	r4,r4,44
    cbac:	10000015 	stw	zero,0(r2)
    cbb0:	dfc00017 	ldw	ra,0(sp)
    cbb4:	dec00104 	addi	sp,sp,4
    cbb8:	000e5b81 	jmpi	e5b8 <_Unwind_DeleteException>
    cbbc:	18c00044 	addi	r3,r3,1
    cbc0:	183ff51e 	bne	r3,zero,cb98 <__alt_data_end+0xfc00cb98>
    cbc4:	21400417 	ldw	r5,16(r4)
    cbc8:	11400015 	stw	r5,0(r2)
    cbcc:	003ff206 	br	cb98 <__alt_data_end+0xfc00cb98>
    cbd0:	20c00417 	ldw	r3,16(r4)
    cbd4:	21000b04 	addi	r4,r4,44
    cbd8:	10c00015 	stw	r3,0(r2)
    cbdc:	dfc00017 	ldw	ra,0(sp)
    cbe0:	dec00104 	addi	sp,sp,4
    cbe4:	000e5b81 	jmpi	e5b8 <_Unwind_DeleteException>
    cbe8:	000b84c0 	call	b84c <_ZSt9terminatev>

0000cbec <_ZSt18uncaught_exceptionv>:
    cbec:	deffff04 	addi	sp,sp,-4
    cbf0:	dfc00015 	stw	ra,0(sp)
    cbf4:	000cf340 	call	cf34 <__cxa_get_globals>
    cbf8:	10800117 	ldw	r2,4(r2)
    cbfc:	1004c03a 	cmpne	r2,r2,zero
    cc00:	dfc00017 	ldw	ra,0(sp)
    cc04:	dec00104 	addi	sp,sp,4
    cc08:	f800283a 	ret

0000cc0c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    cc0c:	018000f4 	movhi	r6,3
    cc10:	31853404 	addi	r6,r6,5328
    cc14:	31400117 	ldw	r5,4(r6)
    cc18:	223fff04 	addi	r8,r4,-4
    cc1c:	227fff17 	ldw	r9,-4(r4)
    cc20:	28001326 	beq	r5,zero,cc70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    cc24:	424f883a 	add	r7,r8,r9
    cc28:	29c01426 	beq	r5,r7,cc7c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    cc2c:	28c00117 	ldw	r3,4(r5)
    cc30:	18001c26 	beq	r3,zero,cca4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    cc34:	38c00336 	bltu	r7,r3,cc44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    cc38:	00001e06 	br	ccb4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    cc3c:	3880052e 	bgeu	r7,r2,cc54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    cc40:	1007883a 	mov	r3,r2
    cc44:	18800117 	ldw	r2,4(r3)
    cc48:	29800104 	addi	r6,r5,4
    cc4c:	180b883a 	mov	r5,r3
    cc50:	103ffa1e 	bne	r2,zero,cc3c <__alt_data_end+0xfc00cc3c>
    cc54:	19400017 	ldw	r5,0(r3)
    cc58:	194f883a 	add	r7,r3,r5
    cc5c:	41c00e26 	beq	r8,r7,cc98 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    cc60:	20800015 	stw	r2,0(r4)
    cc64:	30800017 	ldw	r2,0(r6)
    cc68:	12000115 	stw	r8,4(r2)
    cc6c:	f800283a 	ret
    cc70:	20000015 	stw	zero,0(r4)
    cc74:	32000115 	stw	r8,4(r6)
    cc78:	f800283a 	ret
    cc7c:	28c00017 	ldw	r3,0(r5)
    cc80:	28800117 	ldw	r2,4(r5)
    cc84:	1a53883a 	add	r9,r3,r9
    cc88:	227fff15 	stw	r9,-4(r4)
    cc8c:	20800015 	stw	r2,0(r4)
    cc90:	32000115 	stw	r8,4(r6)
    cc94:	f800283a 	ret
    cc98:	494b883a 	add	r5,r9,r5
    cc9c:	19400015 	stw	r5,0(r3)
    cca0:	f800283a 	ret
    cca4:	0005883a 	mov	r2,zero
    cca8:	2807883a 	mov	r3,r5
    ccac:	31800104 	addi	r6,r6,4
    ccb0:	003fe806 	br	cc54 <__alt_data_end+0xfc00cc54>
    ccb4:	1805883a 	mov	r2,r3
    ccb8:	31800104 	addi	r6,r6,4
    ccbc:	2807883a 	mov	r3,r5
    ccc0:	003fe406 	br	cc54 <__alt_data_end+0xfc00cc54>

0000ccc4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    ccc4:	20800104 	addi	r2,r4,4
    ccc8:	00c001c4 	movi	r3,7
    cccc:	1880112e 	bgeu	r3,r2,cd14 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    ccd0:	20c9883a 	add	r4,r4,r3
    ccd4:	00bfff04 	movi	r2,-4
    ccd8:	208a703a 	and	r5,r4,r2
    ccdc:	018000f4 	movhi	r6,3
    cce0:	31853404 	addi	r6,r6,5328
    cce4:	30c00117 	ldw	r3,4(r6)
    cce8:	18000826 	beq	r3,zero,cd0c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    ccec:	19000017 	ldw	r4,0(r3)
    ccf0:	21400436 	bltu	r4,r5,cd04 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    ccf4:	00001a06 	br	cd60 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    ccf8:	11000017 	ldw	r4,0(r2)
    ccfc:	2140072e 	bgeu	r4,r5,cd1c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    cd00:	1007883a 	mov	r3,r2
    cd04:	18800117 	ldw	r2,4(r3)
    cd08:	103ffb1e 	bne	r2,zero,ccf8 <__alt_data_end+0xfc00ccf8>
    cd0c:	0005883a 	mov	r2,zero
    cd10:	f800283a 	ret
    cd14:	01400204 	movi	r5,8
    cd18:	003ff006 	br	ccdc <__alt_data_end+0xfc00ccdc>
    cd1c:	18c00104 	addi	r3,r3,4
    cd20:	2149c83a 	sub	r4,r4,r5
    cd24:	018001c4 	movi	r6,7
    cd28:	3100092e 	bgeu	r6,r4,cd50 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    cd2c:	11c00117 	ldw	r7,4(r2)
    cd30:	114d883a 	add	r6,r2,r5
    cd34:	31000015 	stw	r4,0(r6)
    cd38:	31c00115 	stw	r7,4(r6)
    cd3c:	18800017 	ldw	r2,0(r3)
    cd40:	11400015 	stw	r5,0(r2)
    cd44:	19800015 	stw	r6,0(r3)
    cd48:	10800104 	addi	r2,r2,4
    cd4c:	f800283a 	ret
    cd50:	11000117 	ldw	r4,4(r2)
    cd54:	10800104 	addi	r2,r2,4
    cd58:	19000015 	stw	r4,0(r3)
    cd5c:	f800283a 	ret
    cd60:	1805883a 	mov	r2,r3
    cd64:	30c00104 	addi	r3,r6,4
    cd68:	003fed06 	br	cd20 <__alt_data_end+0xfc00cd20>

0000cd6c <__cxa_allocate_exception>:
    cd6c:	defffd04 	addi	sp,sp,-12
    cd70:	dc400115 	stw	r17,4(sp)
    cd74:	24401104 	addi	r17,r4,68
    cd78:	8809883a 	mov	r4,r17
    cd7c:	dc000015 	stw	r16,0(sp)
    cd80:	dfc00215 	stw	ra,8(sp)
    cd84:	000e70c0 	call	e70c <malloc>
    cd88:	1021883a 	mov	r16,r2
    cd8c:	10000a26 	beq	r2,zero,cdb8 <__cxa_allocate_exception+0x4c>
    cd90:	01801104 	movi	r6,68
    cd94:	000b883a 	mov	r5,zero
    cd98:	8009883a 	mov	r4,r16
    cd9c:	000f0880 	call	f088 <memset>
    cda0:	80801104 	addi	r2,r16,68
    cda4:	dfc00217 	ldw	ra,8(sp)
    cda8:	dc400117 	ldw	r17,4(sp)
    cdac:	dc000017 	ldw	r16,0(sp)
    cdb0:	dec00304 	addi	sp,sp,12
    cdb4:	f800283a 	ret
    cdb8:	8809883a 	mov	r4,r17
    cdbc:	000ccc40 	call	ccc4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    cdc0:	1021883a 	mov	r16,r2
    cdc4:	103ff21e 	bne	r2,zero,cd90 <__alt_data_end+0xfc00cd90>
    cdc8:	000b84c0 	call	b84c <_ZSt9terminatev>

0000cdcc <__cxa_free_exception>:
    cdcc:	00c000f4 	movhi	r3,3
    cdd0:	18c53404 	addi	r3,r3,5328
    cdd4:	18800217 	ldw	r2,8(r3)
    cdd8:	213fef04 	addi	r4,r4,-68
    cddc:	1100042e 	bgeu	r2,r4,cdf0 <__cxa_free_exception+0x24>
    cde0:	18c00317 	ldw	r3,12(r3)
    cde4:	10c5883a 	add	r2,r2,r3
    cde8:	2080012e 	bgeu	r4,r2,cdf0 <__cxa_free_exception+0x24>
    cdec:	000cc0c1 	jmpi	cc0c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    cdf0:	000e7201 	jmpi	e720 <free>

0000cdf4 <__cxa_allocate_dependent_exception>:
    cdf4:	defffe04 	addi	sp,sp,-8
    cdf8:	01001004 	movi	r4,64
    cdfc:	dc000015 	stw	r16,0(sp)
    ce00:	dfc00115 	stw	ra,4(sp)
    ce04:	000e70c0 	call	e70c <malloc>
    ce08:	1021883a 	mov	r16,r2
    ce0c:	10000926 	beq	r2,zero,ce34 <__cxa_allocate_dependent_exception+0x40>
    ce10:	01801004 	movi	r6,64
    ce14:	000b883a 	mov	r5,zero
    ce18:	8009883a 	mov	r4,r16
    ce1c:	000f0880 	call	f088 <memset>
    ce20:	8005883a 	mov	r2,r16
    ce24:	dfc00117 	ldw	ra,4(sp)
    ce28:	dc000017 	ldw	r16,0(sp)
    ce2c:	dec00204 	addi	sp,sp,8
    ce30:	f800283a 	ret
    ce34:	01001004 	movi	r4,64
    ce38:	000ccc40 	call	ccc4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    ce3c:	1021883a 	mov	r16,r2
    ce40:	103ff31e 	bne	r2,zero,ce10 <__alt_data_end+0xfc00ce10>
    ce44:	000b84c0 	call	b84c <_ZSt9terminatev>

0000ce48 <__cxa_free_dependent_exception>:
    ce48:	014000f4 	movhi	r5,3
    ce4c:	29453404 	addi	r5,r5,5328
    ce50:	28c00217 	ldw	r3,8(r5)
    ce54:	2005883a 	mov	r2,r4
    ce58:	1900042e 	bgeu	r3,r4,ce6c <__cxa_free_dependent_exception+0x24>
    ce5c:	29400317 	ldw	r5,12(r5)
    ce60:	1947883a 	add	r3,r3,r5
    ce64:	20c0012e 	bgeu	r4,r3,ce6c <__cxa_free_dependent_exception+0x24>
    ce68:	000cc0c1 	jmpi	cc0c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    ce6c:	1009883a 	mov	r4,r2
    ce70:	000e7201 	jmpi	e720 <free>

0000ce74 <_GLOBAL__sub_I___cxa_allocate_exception>:
    ce74:	defffd04 	addi	sp,sp,-12
    ce78:	dc400115 	stw	r17,4(sp)
    ce7c:	dc000015 	stw	r16,0(sp)
    ce80:	04424004 	movi	r17,2304
    ce84:	040000f4 	movhi	r16,3
    ce88:	84053404 	addi	r16,r16,5328
    ce8c:	8809883a 	mov	r4,r17
    ce90:	dfc00215 	stw	ra,8(sp)
    ce94:	84400315 	stw	r17,12(r16)
    ce98:	000e70c0 	call	e70c <malloc>
    ce9c:	80800215 	stw	r2,8(r16)
    cea0:	10000826 	beq	r2,zero,cec4 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    cea4:	80800115 	stw	r2,4(r16)
    cea8:	14400015 	stw	r17,0(r2)
    ceac:	10000115 	stw	zero,4(r2)
    ceb0:	dfc00217 	ldw	ra,8(sp)
    ceb4:	dc400117 	ldw	r17,4(sp)
    ceb8:	dc000017 	ldw	r16,0(sp)
    cebc:	dec00304 	addi	sp,sp,12
    cec0:	f800283a 	ret
    cec4:	80000315 	stw	zero,12(r16)
    cec8:	80000115 	stw	zero,4(r16)
    cecc:	003ff806 	br	ceb0 <__alt_data_end+0xfc00ceb0>

0000ced0 <__cxa_call_terminate>:
    ced0:	defffe04 	addi	sp,sp,-8
    ced4:	dfc00115 	stw	ra,4(sp)
    ced8:	dc000015 	stw	r16,0(sp)
    cedc:	20000d26 	beq	r4,zero,cf14 <__cxa_call_terminate+0x44>
    cee0:	2021883a 	mov	r16,r4
    cee4:	000ca840 	call	ca84 <__cxa_begin_catch>
    cee8:	80c00017 	ldw	r3,0(r16)
    ceec:	016f3574 	movhi	r5,48341
    cef0:	29754004 	addi	r5,r5,-11008
    cef4:	194b883a 	add	r5,r3,r5
    cef8:	80800117 	ldw	r2,4(r16)
    cefc:	28c9803a 	cmpltu	r4,r5,r3
    cf00:	00ee2cb4 	movhi	r3,47282
    cf04:	18eaaf04 	addi	r3,r3,-21828
    cf08:	10c5883a 	add	r2,r2,r3
    cf0c:	2085883a 	add	r2,r4,r2
    cf10:	10000126 	beq	r2,zero,cf18 <__cxa_call_terminate+0x48>
    cf14:	000b84c0 	call	b84c <_ZSt9terminatev>
    cf18:	00800044 	movi	r2,1
    cf1c:	117ffd36 	bltu	r2,r5,cf14 <__alt_data_end+0xfc00cf14>
    cf20:	813ff817 	ldw	r4,-32(r16)
    cf24:	000b78c0 	call	b78c <_ZN10__cxxabiv111__terminateEPFvvE>

0000cf28 <__cxa_get_globals_fast>:
    cf28:	008000f4 	movhi	r2,3
    cf2c:	1084db04 	addi	r2,r2,4972
    cf30:	f800283a 	ret

0000cf34 <__cxa_get_globals>:
    cf34:	008000f4 	movhi	r2,3
    cf38:	1084db04 	addi	r2,r2,4972
    cf3c:	f800283a 	ret

0000cf40 <_ZNSt9exceptionD1Ev>:
    cf40:	f800283a 	ret

0000cf44 <_ZNSt13bad_exceptionD1Ev>:
    cf44:	f800283a 	ret

0000cf48 <_ZNKSt9exception4whatEv>:
    cf48:	008000f4 	movhi	r2,3
    cf4c:	10aacc04 	addi	r2,r2,-21712
    cf50:	f800283a 	ret

0000cf54 <_ZNKSt13bad_exception4whatEv>:
    cf54:	008000f4 	movhi	r2,3
    cf58:	10aad004 	addi	r2,r2,-21696
    cf5c:	f800283a 	ret

0000cf60 <_ZNSt9exceptionD0Ev>:
    cf60:	000b4801 	jmpi	b480 <_ZdlPv>

0000cf64 <_ZNSt13bad_exceptionD0Ev>:
    cf64:	000b4801 	jmpi	b480 <_ZdlPv>

0000cf68 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    cf68:	f800283a 	ret

0000cf6c <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    cf6c:	000b4801 	jmpi	b480 <_ZdlPv>

0000cf70 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    cf70:	f800283a 	ret

0000cf74 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    cf74:	000b4801 	jmpi	b480 <_ZdlPv>

0000cf78 <__fixunssfsi>:
    cf78:	defffd04 	addi	sp,sp,-12
    cf7c:	dc000015 	stw	r16,0(sp)
    cf80:	0413c034 	movhi	r16,20224
    cf84:	800b883a 	mov	r5,r16
    cf88:	dc400115 	stw	r17,4(sp)
    cf8c:	dfc00215 	stw	ra,8(sp)
    cf90:	2023883a 	mov	r17,r4
    cf94:	000d5f40 	call	d5f4 <__gesf2>
    cf98:	1000070e 	bge	r2,zero,cfb8 <__fixunssfsi+0x40>
    cf9c:	8809883a 	mov	r4,r17
    cfa0:	000dfc40 	call	dfc4 <__fixsfsi>
    cfa4:	dfc00217 	ldw	ra,8(sp)
    cfa8:	dc400117 	ldw	r17,4(sp)
    cfac:	dc000017 	ldw	r16,0(sp)
    cfb0:	dec00304 	addi	sp,sp,12
    cfb4:	f800283a 	ret
    cfb8:	800b883a 	mov	r5,r16
    cfbc:	8809883a 	mov	r4,r17
    cfc0:	000dae00 	call	dae0 <__subsf3>
    cfc4:	1009883a 	mov	r4,r2
    cfc8:	000dfc40 	call	dfc4 <__fixsfsi>
    cfcc:	00e00034 	movhi	r3,32768
    cfd0:	10c5883a 	add	r2,r2,r3
    cfd4:	003ff306 	br	cfa4 <__alt_data_end+0xfc00cfa4>

0000cfd8 <__divsi3>:
    cfd8:	20001b16 	blt	r4,zero,d048 <__divsi3+0x70>
    cfdc:	000f883a 	mov	r7,zero
    cfe0:	28001616 	blt	r5,zero,d03c <__divsi3+0x64>
    cfe4:	200d883a 	mov	r6,r4
    cfe8:	29001a2e 	bgeu	r5,r4,d054 <__divsi3+0x7c>
    cfec:	00800804 	movi	r2,32
    cff0:	00c00044 	movi	r3,1
    cff4:	00000106 	br	cffc <__divsi3+0x24>
    cff8:	10000d26 	beq	r2,zero,d030 <__divsi3+0x58>
    cffc:	294b883a 	add	r5,r5,r5
    d000:	10bfffc4 	addi	r2,r2,-1
    d004:	18c7883a 	add	r3,r3,r3
    d008:	293ffb36 	bltu	r5,r4,cff8 <__alt_data_end+0xfc00cff8>
    d00c:	0005883a 	mov	r2,zero
    d010:	18000726 	beq	r3,zero,d030 <__divsi3+0x58>
    d014:	0005883a 	mov	r2,zero
    d018:	31400236 	bltu	r6,r5,d024 <__divsi3+0x4c>
    d01c:	314dc83a 	sub	r6,r6,r5
    d020:	10c4b03a 	or	r2,r2,r3
    d024:	1806d07a 	srli	r3,r3,1
    d028:	280ad07a 	srli	r5,r5,1
    d02c:	183ffa1e 	bne	r3,zero,d018 <__alt_data_end+0xfc00d018>
    d030:	38000126 	beq	r7,zero,d038 <__divsi3+0x60>
    d034:	0085c83a 	sub	r2,zero,r2
    d038:	f800283a 	ret
    d03c:	014bc83a 	sub	r5,zero,r5
    d040:	39c0005c 	xori	r7,r7,1
    d044:	003fe706 	br	cfe4 <__alt_data_end+0xfc00cfe4>
    d048:	0109c83a 	sub	r4,zero,r4
    d04c:	01c00044 	movi	r7,1
    d050:	003fe306 	br	cfe0 <__alt_data_end+0xfc00cfe0>
    d054:	00c00044 	movi	r3,1
    d058:	003fee06 	br	d014 <__alt_data_end+0xfc00d014>

0000d05c <__modsi3>:
    d05c:	20001716 	blt	r4,zero,d0bc <__modsi3+0x60>
    d060:	000f883a 	mov	r7,zero
    d064:	2005883a 	mov	r2,r4
    d068:	28001216 	blt	r5,zero,d0b4 <__modsi3+0x58>
    d06c:	2900162e 	bgeu	r5,r4,d0c8 <__modsi3+0x6c>
    d070:	01800804 	movi	r6,32
    d074:	00c00044 	movi	r3,1
    d078:	00000106 	br	d080 <__modsi3+0x24>
    d07c:	30000a26 	beq	r6,zero,d0a8 <__modsi3+0x4c>
    d080:	294b883a 	add	r5,r5,r5
    d084:	31bfffc4 	addi	r6,r6,-1
    d088:	18c7883a 	add	r3,r3,r3
    d08c:	293ffb36 	bltu	r5,r4,d07c <__alt_data_end+0xfc00d07c>
    d090:	18000526 	beq	r3,zero,d0a8 <__modsi3+0x4c>
    d094:	1806d07a 	srli	r3,r3,1
    d098:	11400136 	bltu	r2,r5,d0a0 <__modsi3+0x44>
    d09c:	1145c83a 	sub	r2,r2,r5
    d0a0:	280ad07a 	srli	r5,r5,1
    d0a4:	183ffb1e 	bne	r3,zero,d094 <__alt_data_end+0xfc00d094>
    d0a8:	38000126 	beq	r7,zero,d0b0 <__modsi3+0x54>
    d0ac:	0085c83a 	sub	r2,zero,r2
    d0b0:	f800283a 	ret
    d0b4:	014bc83a 	sub	r5,zero,r5
    d0b8:	003fec06 	br	d06c <__alt_data_end+0xfc00d06c>
    d0bc:	0109c83a 	sub	r4,zero,r4
    d0c0:	01c00044 	movi	r7,1
    d0c4:	003fe706 	br	d064 <__alt_data_end+0xfc00d064>
    d0c8:	00c00044 	movi	r3,1
    d0cc:	003ff106 	br	d094 <__alt_data_end+0xfc00d094>

0000d0d0 <__udivsi3>:
    d0d0:	200d883a 	mov	r6,r4
    d0d4:	2900152e 	bgeu	r5,r4,d12c <__udivsi3+0x5c>
    d0d8:	28001416 	blt	r5,zero,d12c <__udivsi3+0x5c>
    d0dc:	00800804 	movi	r2,32
    d0e0:	00c00044 	movi	r3,1
    d0e4:	00000206 	br	d0f0 <__udivsi3+0x20>
    d0e8:	10000e26 	beq	r2,zero,d124 <__udivsi3+0x54>
    d0ec:	28000516 	blt	r5,zero,d104 <__udivsi3+0x34>
    d0f0:	294b883a 	add	r5,r5,r5
    d0f4:	10bfffc4 	addi	r2,r2,-1
    d0f8:	18c7883a 	add	r3,r3,r3
    d0fc:	293ffa36 	bltu	r5,r4,d0e8 <__alt_data_end+0xfc00d0e8>
    d100:	18000826 	beq	r3,zero,d124 <__udivsi3+0x54>
    d104:	0005883a 	mov	r2,zero
    d108:	31400236 	bltu	r6,r5,d114 <__udivsi3+0x44>
    d10c:	314dc83a 	sub	r6,r6,r5
    d110:	10c4b03a 	or	r2,r2,r3
    d114:	1806d07a 	srli	r3,r3,1
    d118:	280ad07a 	srli	r5,r5,1
    d11c:	183ffa1e 	bne	r3,zero,d108 <__alt_data_end+0xfc00d108>
    d120:	f800283a 	ret
    d124:	0005883a 	mov	r2,zero
    d128:	f800283a 	ret
    d12c:	00c00044 	movi	r3,1
    d130:	003ff406 	br	d104 <__alt_data_end+0xfc00d104>

0000d134 <__umodsi3>:
    d134:	2005883a 	mov	r2,r4
    d138:	2900122e 	bgeu	r5,r4,d184 <__umodsi3+0x50>
    d13c:	28001116 	blt	r5,zero,d184 <__umodsi3+0x50>
    d140:	01800804 	movi	r6,32
    d144:	00c00044 	movi	r3,1
    d148:	00000206 	br	d154 <__umodsi3+0x20>
    d14c:	30000c26 	beq	r6,zero,d180 <__umodsi3+0x4c>
    d150:	28000516 	blt	r5,zero,d168 <__umodsi3+0x34>
    d154:	294b883a 	add	r5,r5,r5
    d158:	31bfffc4 	addi	r6,r6,-1
    d15c:	18c7883a 	add	r3,r3,r3
    d160:	293ffa36 	bltu	r5,r4,d14c <__alt_data_end+0xfc00d14c>
    d164:	18000626 	beq	r3,zero,d180 <__umodsi3+0x4c>
    d168:	1806d07a 	srli	r3,r3,1
    d16c:	11400136 	bltu	r2,r5,d174 <__umodsi3+0x40>
    d170:	1145c83a 	sub	r2,r2,r5
    d174:	280ad07a 	srli	r5,r5,1
    d178:	183ffb1e 	bne	r3,zero,d168 <__alt_data_end+0xfc00d168>
    d17c:	f800283a 	ret
    d180:	f800283a 	ret
    d184:	00c00044 	movi	r3,1
    d188:	003ff706 	br	d168 <__alt_data_end+0xfc00d168>

0000d18c <__mulsi3>:
    d18c:	0005883a 	mov	r2,zero
    d190:	20000726 	beq	r4,zero,d1b0 <__mulsi3+0x24>
    d194:	20c0004c 	andi	r3,r4,1
    d198:	2008d07a 	srli	r4,r4,1
    d19c:	18000126 	beq	r3,zero,d1a4 <__mulsi3+0x18>
    d1a0:	1145883a 	add	r2,r2,r5
    d1a4:	294b883a 	add	r5,r5,r5
    d1a8:	203ffa1e 	bne	r4,zero,d194 <__alt_data_end+0xfc00d194>
    d1ac:	f800283a 	ret
    d1b0:	f800283a 	ret

0000d1b4 <__divsf3>:
    d1b4:	defff504 	addi	sp,sp,-44
    d1b8:	200cd5fa 	srli	r6,r4,23
    d1bc:	dcc00415 	stw	r19,16(sp)
    d1c0:	2026d7fa 	srli	r19,r4,31
    d1c4:	00c02034 	movhi	r3,128
    d1c8:	dd800715 	stw	r22,28(sp)
    d1cc:	dd000515 	stw	r20,20(sp)
    d1d0:	dc800315 	stw	r18,12(sp)
    d1d4:	18ffffc4 	addi	r3,r3,-1
    d1d8:	dfc00a15 	stw	ra,40(sp)
    d1dc:	df000915 	stw	fp,36(sp)
    d1e0:	ddc00815 	stw	r23,32(sp)
    d1e4:	dd400615 	stw	r21,24(sp)
    d1e8:	dc400215 	stw	r17,8(sp)
    d1ec:	dc000115 	stw	r16,4(sp)
    d1f0:	35003fcc 	andi	r20,r6,255
    d1f4:	1924703a 	and	r18,r3,r4
    d1f8:	9d803fcc 	andi	r22,r19,255
    d1fc:	a0005226 	beq	r20,zero,d348 <__divsf3+0x194>
    d200:	00803fc4 	movi	r2,255
    d204:	a0802e26 	beq	r20,r2,d2c0 <__divsf3+0x10c>
    d208:	91002034 	orhi	r4,r18,128
    d20c:	202490fa 	slli	r18,r4,3
    d210:	a53fe044 	addi	r20,r20,-127
    d214:	0021883a 	mov	r16,zero
    d218:	002f883a 	mov	r23,zero
    d21c:	280cd5fa 	srli	r6,r5,23
    d220:	282ad7fa 	srli	r21,r5,31
    d224:	00c02034 	movhi	r3,128
    d228:	18ffffc4 	addi	r3,r3,-1
    d22c:	31803fcc 	andi	r6,r6,255
    d230:	1962703a 	and	r17,r3,r5
    d234:	af003fcc 	andi	fp,r21,255
    d238:	30004a26 	beq	r6,zero,d364 <__divsf3+0x1b0>
    d23c:	00803fc4 	movi	r2,255
    d240:	30804526 	beq	r6,r2,d358 <__divsf3+0x1a4>
    d244:	89402034 	orhi	r5,r17,128
    d248:	282290fa 	slli	r17,r5,3
    d24c:	31bfe044 	addi	r6,r6,-127
    d250:	000b883a 	mov	r5,zero
    d254:	2c20b03a 	or	r16,r5,r16
    d258:	802090ba 	slli	r16,r16,2
    d25c:	00800074 	movhi	r2,1
    d260:	10b4a004 	addi	r2,r2,-11648
    d264:	80a1883a 	add	r16,r16,r2
    d268:	81000017 	ldw	r4,0(r16)
    d26c:	9d46f03a 	xor	r3,r19,r21
    d270:	180f883a 	mov	r7,r3
    d274:	18803fcc 	andi	r2,r3,255
    d278:	a18dc83a 	sub	r6,r20,r6
    d27c:	2000683a 	jmp	r4
    d280:	0000d464 	muli	zero,zero,849
    d284:	0000d2e8 	cmpgeui	zero,zero,843
    d288:	0000d458 	cmpnei	zero,zero,849
    d28c:	0000d2d4 	movui	zero,843
    d290:	0000d458 	cmpnei	zero,zero,849
    d294:	0000d430 	cmpltui	zero,zero,848
    d298:	0000d458 	cmpnei	zero,zero,849
    d29c:	0000d2d4 	movui	zero,843
    d2a0:	0000d2e8 	cmpgeui	zero,zero,843
    d2a4:	0000d2e8 	cmpgeui	zero,zero,843
    d2a8:	0000d430 	cmpltui	zero,zero,848
    d2ac:	0000d2d4 	movui	zero,843
    d2b0:	0000d544 	movi	zero,853
    d2b4:	0000d544 	movi	zero,853
    d2b8:	0000d544 	movi	zero,853
    d2bc:	0000d4f8 	rdprs	zero,zero,851
    d2c0:	9000581e 	bne	r18,zero,d424 <__divsf3+0x270>
    d2c4:	04000204 	movi	r16,8
    d2c8:	05c00084 	movi	r23,2
    d2cc:	003fd306 	br	d21c <__alt_data_end+0xfc00d21c>
    d2d0:	0023883a 	mov	r17,zero
    d2d4:	e02d883a 	mov	r22,fp
    d2d8:	282f883a 	mov	r23,r5
    d2dc:	00800084 	movi	r2,2
    d2e0:	b8808f1e 	bne	r23,r2,d520 <__divsf3+0x36c>
    d2e4:	b005883a 	mov	r2,r22
    d2e8:	11c0004c 	andi	r7,r2,1
    d2ec:	013fffc4 	movi	r4,-1
    d2f0:	000d883a 	mov	r6,zero
    d2f4:	21003fcc 	andi	r4,r4,255
    d2f8:	200895fa 	slli	r4,r4,23
    d2fc:	38803fcc 	andi	r2,r7,255
    d300:	00c02034 	movhi	r3,128
    d304:	100497fa 	slli	r2,r2,31
    d308:	18ffffc4 	addi	r3,r3,-1
    d30c:	30c6703a 	and	r3,r6,r3
    d310:	1906b03a 	or	r3,r3,r4
    d314:	1884b03a 	or	r2,r3,r2
    d318:	dfc00a17 	ldw	ra,40(sp)
    d31c:	df000917 	ldw	fp,36(sp)
    d320:	ddc00817 	ldw	r23,32(sp)
    d324:	dd800717 	ldw	r22,28(sp)
    d328:	dd400617 	ldw	r21,24(sp)
    d32c:	dd000517 	ldw	r20,20(sp)
    d330:	dcc00417 	ldw	r19,16(sp)
    d334:	dc800317 	ldw	r18,12(sp)
    d338:	dc400217 	ldw	r17,8(sp)
    d33c:	dc000117 	ldw	r16,4(sp)
    d340:	dec00b04 	addi	sp,sp,44
    d344:	f800283a 	ret
    d348:	90002b1e 	bne	r18,zero,d3f8 <__divsf3+0x244>
    d34c:	04000104 	movi	r16,4
    d350:	05c00044 	movi	r23,1
    d354:	003fb106 	br	d21c <__alt_data_end+0xfc00d21c>
    d358:	8800251e 	bne	r17,zero,d3f0 <__divsf3+0x23c>
    d35c:	01400084 	movi	r5,2
    d360:	00000206 	br	d36c <__divsf3+0x1b8>
    d364:	88001a1e 	bne	r17,zero,d3d0 <__divsf3+0x21c>
    d368:	01400044 	movi	r5,1
    d36c:	8160b03a 	or	r16,r16,r5
    d370:	802090ba 	slli	r16,r16,2
    d374:	00c00074 	movhi	r3,1
    d378:	18f4e404 	addi	r3,r3,-11376
    d37c:	80e1883a 	add	r16,r16,r3
    d380:	80c00017 	ldw	r3,0(r16)
    d384:	9d44f03a 	xor	r2,r19,r21
    d388:	a18dc83a 	sub	r6,r20,r6
    d38c:	1800683a 	jmp	r3
    d390:	0000d2e8 	cmpgeui	zero,zero,843
    d394:	0000d2e8 	cmpgeui	zero,zero,843
    d398:	0000d534 	movhi	zero,852
    d39c:	0000d2d0 	cmplti	zero,zero,843
    d3a0:	0000d534 	movhi	zero,852
    d3a4:	0000d430 	cmpltui	zero,zero,848
    d3a8:	0000d534 	movhi	zero,852
    d3ac:	0000d2d0 	cmplti	zero,zero,843
    d3b0:	0000d2e8 	cmpgeui	zero,zero,843
    d3b4:	0000d2e8 	cmpgeui	zero,zero,843
    d3b8:	0000d430 	cmpltui	zero,zero,848
    d3bc:	0000d2d0 	cmplti	zero,zero,843
    d3c0:	0000d544 	movi	zero,853
    d3c4:	0000d544 	movi	zero,853
    d3c8:	0000d544 	movi	zero,853
    d3cc:	0000d55c 	xori	zero,zero,853
    d3d0:	8809883a 	mov	r4,r17
    d3d4:	000e6440 	call	e644 <__clzsi2>
    d3d8:	10fffec4 	addi	r3,r2,-5
    d3dc:	10801d84 	addi	r2,r2,118
    d3e0:	88e2983a 	sll	r17,r17,r3
    d3e4:	008dc83a 	sub	r6,zero,r2
    d3e8:	000b883a 	mov	r5,zero
    d3ec:	003f9906 	br	d254 <__alt_data_end+0xfc00d254>
    d3f0:	014000c4 	movi	r5,3
    d3f4:	003f9706 	br	d254 <__alt_data_end+0xfc00d254>
    d3f8:	9009883a 	mov	r4,r18
    d3fc:	d9400015 	stw	r5,0(sp)
    d400:	000e6440 	call	e644 <__clzsi2>
    d404:	10fffec4 	addi	r3,r2,-5
    d408:	11801d84 	addi	r6,r2,118
    d40c:	90e4983a 	sll	r18,r18,r3
    d410:	01a9c83a 	sub	r20,zero,r6
    d414:	0021883a 	mov	r16,zero
    d418:	002f883a 	mov	r23,zero
    d41c:	d9400017 	ldw	r5,0(sp)
    d420:	003f7e06 	br	d21c <__alt_data_end+0xfc00d21c>
    d424:	04000304 	movi	r16,12
    d428:	05c000c4 	movi	r23,3
    d42c:	003f7b06 	br	d21c <__alt_data_end+0xfc00d21c>
    d430:	01802034 	movhi	r6,128
    d434:	000f883a 	mov	r7,zero
    d438:	31bfffc4 	addi	r6,r6,-1
    d43c:	013fffc4 	movi	r4,-1
    d440:	003fac06 	br	d2f4 <__alt_data_end+0xfc00d2f4>
    d444:	01400044 	movi	r5,1
    d448:	2909c83a 	sub	r4,r5,r4
    d44c:	00c006c4 	movi	r3,27
    d450:	19004b0e 	bge	r3,r4,d580 <__divsf3+0x3cc>
    d454:	114e703a 	and	r7,r2,r5
    d458:	0009883a 	mov	r4,zero
    d45c:	000d883a 	mov	r6,zero
    d460:	003fa406 	br	d2f4 <__alt_data_end+0xfc00d2f4>
    d464:	9006917a 	slli	r3,r18,5
    d468:	8822917a 	slli	r17,r17,5
    d46c:	1c40372e 	bgeu	r3,r17,d54c <__divsf3+0x398>
    d470:	31bfffc4 	addi	r6,r6,-1
    d474:	010006c4 	movi	r4,27
    d478:	000b883a 	mov	r5,zero
    d47c:	180f883a 	mov	r7,r3
    d480:	294b883a 	add	r5,r5,r5
    d484:	18c7883a 	add	r3,r3,r3
    d488:	38000116 	blt	r7,zero,d490 <__divsf3+0x2dc>
    d48c:	1c400236 	bltu	r3,r17,d498 <__divsf3+0x2e4>
    d490:	1c47c83a 	sub	r3,r3,r17
    d494:	29400054 	ori	r5,r5,1
    d498:	213fffc4 	addi	r4,r4,-1
    d49c:	203ff71e 	bne	r4,zero,d47c <__alt_data_end+0xfc00d47c>
    d4a0:	1806c03a 	cmpne	r3,r3,zero
    d4a4:	1962b03a 	or	r17,r3,r5
    d4a8:	31001fc4 	addi	r4,r6,127
    d4ac:	013fe50e 	bge	zero,r4,d444 <__alt_data_end+0xfc00d444>
    d4b0:	88c001cc 	andi	r3,r17,7
    d4b4:	18000426 	beq	r3,zero,d4c8 <__divsf3+0x314>
    d4b8:	88c003cc 	andi	r3,r17,15
    d4bc:	01400104 	movi	r5,4
    d4c0:	19400126 	beq	r3,r5,d4c8 <__divsf3+0x314>
    d4c4:	8963883a 	add	r17,r17,r5
    d4c8:	88c2002c 	andhi	r3,r17,2048
    d4cc:	18000426 	beq	r3,zero,d4e0 <__divsf3+0x32c>
    d4d0:	00fe0034 	movhi	r3,63488
    d4d4:	18ffffc4 	addi	r3,r3,-1
    d4d8:	31002004 	addi	r4,r6,128
    d4dc:	88e2703a 	and	r17,r17,r3
    d4e0:	00c03f84 	movi	r3,254
    d4e4:	193f8016 	blt	r3,r4,d2e8 <__alt_data_end+0xfc00d2e8>
    d4e8:	880c91ba 	slli	r6,r17,6
    d4ec:	11c0004c 	andi	r7,r2,1
    d4f0:	300cd27a 	srli	r6,r6,9
    d4f4:	003f7f06 	br	d2f4 <__alt_data_end+0xfc00d2f4>
    d4f8:	9080102c 	andhi	r2,r18,64
    d4fc:	10000226 	beq	r2,zero,d508 <__divsf3+0x354>
    d500:	8880102c 	andhi	r2,r17,64
    d504:	10001826 	beq	r2,zero,d568 <__divsf3+0x3b4>
    d508:	00802034 	movhi	r2,128
    d50c:	91801034 	orhi	r6,r18,64
    d510:	10bfffc4 	addi	r2,r2,-1
    d514:	980f883a 	mov	r7,r19
    d518:	308c703a 	and	r6,r6,r2
    d51c:	003fc706 	br	d43c <__alt_data_end+0xfc00d43c>
    d520:	008000c4 	movi	r2,3
    d524:	b8802d26 	beq	r23,r2,d5dc <__divsf3+0x428>
    d528:	00c00044 	movi	r3,1
    d52c:	b005883a 	mov	r2,r22
    d530:	b8ffdd1e 	bne	r23,r3,d4a8 <__alt_data_end+0xfc00d4a8>
    d534:	11c0004c 	andi	r7,r2,1
    d538:	0009883a 	mov	r4,zero
    d53c:	000d883a 	mov	r6,zero
    d540:	003f6c06 	br	d2f4 <__alt_data_end+0xfc00d2f4>
    d544:	9023883a 	mov	r17,r18
    d548:	003f6406 	br	d2dc <__alt_data_end+0xfc00d2dc>
    d54c:	1c47c83a 	sub	r3,r3,r17
    d550:	01000684 	movi	r4,26
    d554:	01400044 	movi	r5,1
    d558:	003fc806 	br	d47c <__alt_data_end+0xfc00d47c>
    d55c:	9080102c 	andhi	r2,r18,64
    d560:	103fe926 	beq	r2,zero,d508 <__alt_data_end+0xfc00d508>
    d564:	0023883a 	mov	r17,zero
    d568:	00802034 	movhi	r2,128
    d56c:	89801034 	orhi	r6,r17,64
    d570:	10bfffc4 	addi	r2,r2,-1
    d574:	a80f883a 	mov	r7,r21
    d578:	308c703a 	and	r6,r6,r2
    d57c:	003faf06 	br	d43c <__alt_data_end+0xfc00d43c>
    d580:	01c00804 	movi	r7,32
    d584:	390fc83a 	sub	r7,r7,r4
    d588:	89ce983a 	sll	r7,r17,r7
    d58c:	890ad83a 	srl	r5,r17,r4
    d590:	380ec03a 	cmpne	r7,r7,zero
    d594:	29cab03a 	or	r5,r5,r7
    d598:	28c001cc 	andi	r3,r5,7
    d59c:	18000426 	beq	r3,zero,d5b0 <__divsf3+0x3fc>
    d5a0:	28c003cc 	andi	r3,r5,15
    d5a4:	01000104 	movi	r4,4
    d5a8:	19000126 	beq	r3,r4,d5b0 <__divsf3+0x3fc>
    d5ac:	290b883a 	add	r5,r5,r4
    d5b0:	28c1002c 	andhi	r3,r5,1024
    d5b4:	18000426 	beq	r3,zero,d5c8 <__divsf3+0x414>
    d5b8:	11c0004c 	andi	r7,r2,1
    d5bc:	01000044 	movi	r4,1
    d5c0:	000d883a 	mov	r6,zero
    d5c4:	003f4b06 	br	d2f4 <__alt_data_end+0xfc00d2f4>
    d5c8:	280a91ba 	slli	r5,r5,6
    d5cc:	11c0004c 	andi	r7,r2,1
    d5d0:	0009883a 	mov	r4,zero
    d5d4:	280cd27a 	srli	r6,r5,9
    d5d8:	003f4606 	br	d2f4 <__alt_data_end+0xfc00d2f4>
    d5dc:	00802034 	movhi	r2,128
    d5e0:	89801034 	orhi	r6,r17,64
    d5e4:	10bfffc4 	addi	r2,r2,-1
    d5e8:	b00f883a 	mov	r7,r22
    d5ec:	308c703a 	and	r6,r6,r2
    d5f0:	003f9206 	br	d43c <__alt_data_end+0xfc00d43c>

0000d5f4 <__gesf2>:
    d5f4:	2004d5fa 	srli	r2,r4,23
    d5f8:	2806d5fa 	srli	r3,r5,23
    d5fc:	01802034 	movhi	r6,128
    d600:	31bfffc4 	addi	r6,r6,-1
    d604:	10803fcc 	andi	r2,r2,255
    d608:	01c03fc4 	movi	r7,255
    d60c:	3110703a 	and	r8,r6,r4
    d610:	18c03fcc 	andi	r3,r3,255
    d614:	314c703a 	and	r6,r6,r5
    d618:	2008d7fa 	srli	r4,r4,31
    d61c:	280ad7fa 	srli	r5,r5,31
    d620:	11c01926 	beq	r2,r7,d688 <__gesf2+0x94>
    d624:	01c03fc4 	movi	r7,255
    d628:	19c00f26 	beq	r3,r7,d668 <__gesf2+0x74>
    d62c:	1000061e 	bne	r2,zero,d648 <__gesf2+0x54>
    d630:	400f003a 	cmpeq	r7,r8,zero
    d634:	1800071e 	bne	r3,zero,d654 <__gesf2+0x60>
    d638:	3000061e 	bne	r6,zero,d654 <__gesf2+0x60>
    d63c:	0005883a 	mov	r2,zero
    d640:	40000e1e 	bne	r8,zero,d67c <__gesf2+0x88>
    d644:	f800283a 	ret
    d648:	18000a1e 	bne	r3,zero,d674 <__gesf2+0x80>
    d64c:	30000b26 	beq	r6,zero,d67c <__gesf2+0x88>
    d650:	000f883a 	mov	r7,zero
    d654:	29403fcc 	andi	r5,r5,255
    d658:	38000726 	beq	r7,zero,d678 <__gesf2+0x84>
    d65c:	28000826 	beq	r5,zero,d680 <__gesf2+0x8c>
    d660:	00800044 	movi	r2,1
    d664:	f800283a 	ret
    d668:	303ff026 	beq	r6,zero,d62c <__alt_data_end+0xfc00d62c>
    d66c:	00bfff84 	movi	r2,-2
    d670:	f800283a 	ret
    d674:	29403fcc 	andi	r5,r5,255
    d678:	21400526 	beq	r4,r5,d690 <__gesf2+0x9c>
    d67c:	203ff826 	beq	r4,zero,d660 <__alt_data_end+0xfc00d660>
    d680:	00bfffc4 	movi	r2,-1
    d684:	f800283a 	ret
    d688:	403fe626 	beq	r8,zero,d624 <__alt_data_end+0xfc00d624>
    d68c:	003ff706 	br	d66c <__alt_data_end+0xfc00d66c>
    d690:	18bffa16 	blt	r3,r2,d67c <__alt_data_end+0xfc00d67c>
    d694:	10c00216 	blt	r2,r3,d6a0 <__gesf2+0xac>
    d698:	323ff836 	bltu	r6,r8,d67c <__alt_data_end+0xfc00d67c>
    d69c:	4180022e 	bgeu	r8,r6,d6a8 <__gesf2+0xb4>
    d6a0:	203fef1e 	bne	r4,zero,d660 <__alt_data_end+0xfc00d660>
    d6a4:	003ff606 	br	d680 <__alt_data_end+0xfc00d680>
    d6a8:	0005883a 	mov	r2,zero
    d6ac:	f800283a 	ret

0000d6b0 <__mulsf3>:
    d6b0:	defff504 	addi	sp,sp,-44
    d6b4:	dc000115 	stw	r16,4(sp)
    d6b8:	2020d5fa 	srli	r16,r4,23
    d6bc:	dd400615 	stw	r21,24(sp)
    d6c0:	202ad7fa 	srli	r21,r4,31
    d6c4:	dc800315 	stw	r18,12(sp)
    d6c8:	04802034 	movhi	r18,128
    d6cc:	df000915 	stw	fp,36(sp)
    d6d0:	dd000515 	stw	r20,20(sp)
    d6d4:	94bfffc4 	addi	r18,r18,-1
    d6d8:	dfc00a15 	stw	ra,40(sp)
    d6dc:	ddc00815 	stw	r23,32(sp)
    d6e0:	dd800715 	stw	r22,28(sp)
    d6e4:	dcc00415 	stw	r19,16(sp)
    d6e8:	dc400215 	stw	r17,8(sp)
    d6ec:	84003fcc 	andi	r16,r16,255
    d6f0:	9124703a 	and	r18,r18,r4
    d6f4:	a829883a 	mov	r20,r21
    d6f8:	af003fcc 	andi	fp,r21,255
    d6fc:	80005426 	beq	r16,zero,d850 <__mulsf3+0x1a0>
    d700:	00803fc4 	movi	r2,255
    d704:	80802f26 	beq	r16,r2,d7c4 <__mulsf3+0x114>
    d708:	91002034 	orhi	r4,r18,128
    d70c:	202490fa 	slli	r18,r4,3
    d710:	843fe044 	addi	r16,r16,-127
    d714:	0023883a 	mov	r17,zero
    d718:	002f883a 	mov	r23,zero
    d71c:	2804d5fa 	srli	r2,r5,23
    d720:	282cd7fa 	srli	r22,r5,31
    d724:	01002034 	movhi	r4,128
    d728:	213fffc4 	addi	r4,r4,-1
    d72c:	10803fcc 	andi	r2,r2,255
    d730:	2166703a 	and	r19,r4,r5
    d734:	b1803fcc 	andi	r6,r22,255
    d738:	10004c26 	beq	r2,zero,d86c <__mulsf3+0x1bc>
    d73c:	00c03fc4 	movi	r3,255
    d740:	10c04726 	beq	r2,r3,d860 <__mulsf3+0x1b0>
    d744:	99002034 	orhi	r4,r19,128
    d748:	202690fa 	slli	r19,r4,3
    d74c:	10bfe044 	addi	r2,r2,-127
    d750:	0007883a 	mov	r3,zero
    d754:	80a1883a 	add	r16,r16,r2
    d758:	010003c4 	movi	r4,15
    d75c:	1c44b03a 	or	r2,r3,r17
    d760:	b56af03a 	xor	r21,r22,r21
    d764:	81c00044 	addi	r7,r16,1
    d768:	20806b36 	bltu	r4,r2,d918 <__mulsf3+0x268>
    d76c:	100490ba 	slli	r2,r2,2
    d770:	01000074 	movhi	r4,1
    d774:	2135e104 	addi	r4,r4,-10364
    d778:	1105883a 	add	r2,r2,r4
    d77c:	10800017 	ldw	r2,0(r2)
    d780:	1000683a 	jmp	r2
    d784:	0000d918 	cmpnei	zero,zero,868
    d788:	0000d7d8 	cmpnei	zero,zero,863
    d78c:	0000d7d8 	cmpnei	zero,zero,863
    d790:	0000d7d4 	movui	zero,863
    d794:	0000d8fc 	xorhi	zero,zero,867
    d798:	0000d8fc 	xorhi	zero,zero,867
    d79c:	0000d8e8 	cmpgeui	zero,zero,867
    d7a0:	0000d7d4 	movui	zero,863
    d7a4:	0000d8fc 	xorhi	zero,zero,867
    d7a8:	0000d8e8 	cmpgeui	zero,zero,867
    d7ac:	0000d8fc 	xorhi	zero,zero,867
    d7b0:	0000d7d4 	movui	zero,863
    d7b4:	0000d908 	cmpgei	zero,zero,868
    d7b8:	0000d908 	cmpgei	zero,zero,868
    d7bc:	0000d908 	cmpgei	zero,zero,868
    d7c0:	0000da18 	cmpnei	zero,zero,872
    d7c4:	90003b1e 	bne	r18,zero,d8b4 <__mulsf3+0x204>
    d7c8:	04400204 	movi	r17,8
    d7cc:	05c00084 	movi	r23,2
    d7d0:	003fd206 	br	d71c <__alt_data_end+0xfc00d71c>
    d7d4:	302b883a 	mov	r21,r6
    d7d8:	00800084 	movi	r2,2
    d7dc:	18802626 	beq	r3,r2,d878 <__mulsf3+0x1c8>
    d7e0:	008000c4 	movi	r2,3
    d7e4:	1880b826 	beq	r3,r2,dac8 <__mulsf3+0x418>
    d7e8:	00800044 	movi	r2,1
    d7ec:	1880af1e 	bne	r3,r2,daac <__mulsf3+0x3fc>
    d7f0:	a829883a 	mov	r20,r21
    d7f4:	0007883a 	mov	r3,zero
    d7f8:	0009883a 	mov	r4,zero
    d7fc:	18803fcc 	andi	r2,r3,255
    d800:	100695fa 	slli	r3,r2,23
    d804:	a0803fcc 	andi	r2,r20,255
    d808:	100a97fa 	slli	r5,r2,31
    d80c:	00802034 	movhi	r2,128
    d810:	10bfffc4 	addi	r2,r2,-1
    d814:	2084703a 	and	r2,r4,r2
    d818:	10c4b03a 	or	r2,r2,r3
    d81c:	1144b03a 	or	r2,r2,r5
    d820:	dfc00a17 	ldw	ra,40(sp)
    d824:	df000917 	ldw	fp,36(sp)
    d828:	ddc00817 	ldw	r23,32(sp)
    d82c:	dd800717 	ldw	r22,28(sp)
    d830:	dd400617 	ldw	r21,24(sp)
    d834:	dd000517 	ldw	r20,20(sp)
    d838:	dcc00417 	ldw	r19,16(sp)
    d83c:	dc800317 	ldw	r18,12(sp)
    d840:	dc400217 	ldw	r17,8(sp)
    d844:	dc000117 	ldw	r16,4(sp)
    d848:	dec00b04 	addi	sp,sp,44
    d84c:	f800283a 	ret
    d850:	90000d1e 	bne	r18,zero,d888 <__mulsf3+0x1d8>
    d854:	04400104 	movi	r17,4
    d858:	05c00044 	movi	r23,1
    d85c:	003faf06 	br	d71c <__alt_data_end+0xfc00d71c>
    d860:	9806c03a 	cmpne	r3,r19,zero
    d864:	18c00084 	addi	r3,r3,2
    d868:	003fba06 	br	d754 <__alt_data_end+0xfc00d754>
    d86c:	9800141e 	bne	r19,zero,d8c0 <__mulsf3+0x210>
    d870:	00c00044 	movi	r3,1
    d874:	003fb706 	br	d754 <__alt_data_end+0xfc00d754>
    d878:	a829883a 	mov	r20,r21
    d87c:	00ffffc4 	movi	r3,-1
    d880:	0009883a 	mov	r4,zero
    d884:	003fdd06 	br	d7fc <__alt_data_end+0xfc00d7fc>
    d888:	9009883a 	mov	r4,r18
    d88c:	d9400015 	stw	r5,0(sp)
    d890:	000e6440 	call	e644 <__clzsi2>
    d894:	10fffec4 	addi	r3,r2,-5
    d898:	10801d84 	addi	r2,r2,118
    d89c:	90e4983a 	sll	r18,r18,r3
    d8a0:	00a1c83a 	sub	r16,zero,r2
    d8a4:	0023883a 	mov	r17,zero
    d8a8:	002f883a 	mov	r23,zero
    d8ac:	d9400017 	ldw	r5,0(sp)
    d8b0:	003f9a06 	br	d71c <__alt_data_end+0xfc00d71c>
    d8b4:	04400304 	movi	r17,12
    d8b8:	05c000c4 	movi	r23,3
    d8bc:	003f9706 	br	d71c <__alt_data_end+0xfc00d71c>
    d8c0:	9809883a 	mov	r4,r19
    d8c4:	d9800015 	stw	r6,0(sp)
    d8c8:	000e6440 	call	e644 <__clzsi2>
    d8cc:	10fffec4 	addi	r3,r2,-5
    d8d0:	10801d84 	addi	r2,r2,118
    d8d4:	98e6983a 	sll	r19,r19,r3
    d8d8:	0085c83a 	sub	r2,zero,r2
    d8dc:	0007883a 	mov	r3,zero
    d8e0:	d9800017 	ldw	r6,0(sp)
    d8e4:	003f9b06 	br	d754 <__alt_data_end+0xfc00d754>
    d8e8:	01002034 	movhi	r4,128
    d8ec:	0029883a 	mov	r20,zero
    d8f0:	213fffc4 	addi	r4,r4,-1
    d8f4:	00ffffc4 	movi	r3,-1
    d8f8:	003fc006 	br	d7fc <__alt_data_end+0xfc00d7fc>
    d8fc:	9027883a 	mov	r19,r18
    d900:	b807883a 	mov	r3,r23
    d904:	003fb406 	br	d7d8 <__alt_data_end+0xfc00d7d8>
    d908:	9027883a 	mov	r19,r18
    d90c:	e02b883a 	mov	r21,fp
    d910:	b807883a 	mov	r3,r23
    d914:	003fb006 	br	d7d8 <__alt_data_end+0xfc00d7d8>
    d918:	9028d43a 	srli	r20,r18,16
    d91c:	982cd43a 	srli	r22,r19,16
    d920:	94bfffcc 	andi	r18,r18,65535
    d924:	9cffffcc 	andi	r19,r19,65535
    d928:	980b883a 	mov	r5,r19
    d92c:	9009883a 	mov	r4,r18
    d930:	d9c00015 	stw	r7,0(sp)
    d934:	000d18c0 	call	d18c <__mulsi3>
    d938:	a00b883a 	mov	r5,r20
    d93c:	9809883a 	mov	r4,r19
    d940:	1023883a 	mov	r17,r2
    d944:	000d18c0 	call	d18c <__mulsi3>
    d948:	a009883a 	mov	r4,r20
    d94c:	b00b883a 	mov	r5,r22
    d950:	1027883a 	mov	r19,r2
    d954:	000d18c0 	call	d18c <__mulsi3>
    d958:	b00b883a 	mov	r5,r22
    d95c:	9009883a 	mov	r4,r18
    d960:	1029883a 	mov	r20,r2
    d964:	000d18c0 	call	d18c <__mulsi3>
    d968:	8806d43a 	srli	r3,r17,16
    d96c:	14c5883a 	add	r2,r2,r19
    d970:	d9c00017 	ldw	r7,0(sp)
    d974:	1885883a 	add	r2,r3,r2
    d978:	14c0022e 	bgeu	r2,r19,d984 <__mulsf3+0x2d4>
    d97c:	00c00074 	movhi	r3,1
    d980:	a0e9883a 	add	r20,r20,r3
    d984:	1026943a 	slli	r19,r2,16
    d988:	8c7fffcc 	andi	r17,r17,65535
    d98c:	1004d43a 	srli	r2,r2,16
    d990:	9c63883a 	add	r17,r19,r17
    d994:	882691ba 	slli	r19,r17,6
    d998:	1505883a 	add	r2,r2,r20
    d99c:	8822d6ba 	srli	r17,r17,26
    d9a0:	100891ba 	slli	r4,r2,6
    d9a4:	9826c03a 	cmpne	r19,r19,zero
    d9a8:	9c62b03a 	or	r17,r19,r17
    d9ac:	8926b03a 	or	r19,r17,r4
    d9b0:	9882002c 	andhi	r2,r19,2048
    d9b4:	10000426 	beq	r2,zero,d9c8 <__mulsf3+0x318>
    d9b8:	9804d07a 	srli	r2,r19,1
    d9bc:	9900004c 	andi	r4,r19,1
    d9c0:	3821883a 	mov	r16,r7
    d9c4:	1126b03a 	or	r19,r2,r4
    d9c8:	80c01fc4 	addi	r3,r16,127
    d9cc:	00c0210e 	bge	zero,r3,da54 <__mulsf3+0x3a4>
    d9d0:	988001cc 	andi	r2,r19,7
    d9d4:	10000426 	beq	r2,zero,d9e8 <__mulsf3+0x338>
    d9d8:	988003cc 	andi	r2,r19,15
    d9dc:	01000104 	movi	r4,4
    d9e0:	11000126 	beq	r2,r4,d9e8 <__mulsf3+0x338>
    d9e4:	9927883a 	add	r19,r19,r4
    d9e8:	9882002c 	andhi	r2,r19,2048
    d9ec:	10000426 	beq	r2,zero,da00 <__mulsf3+0x350>
    d9f0:	00be0034 	movhi	r2,63488
    d9f4:	10bfffc4 	addi	r2,r2,-1
    d9f8:	80c02004 	addi	r3,r16,128
    d9fc:	98a6703a 	and	r19,r19,r2
    da00:	00803f84 	movi	r2,254
    da04:	10ff9c16 	blt	r2,r3,d878 <__alt_data_end+0xfc00d878>
    da08:	980891ba 	slli	r4,r19,6
    da0c:	a829883a 	mov	r20,r21
    da10:	2008d27a 	srli	r4,r4,9
    da14:	003f7906 	br	d7fc <__alt_data_end+0xfc00d7fc>
    da18:	9080102c 	andhi	r2,r18,64
    da1c:	10000826 	beq	r2,zero,da40 <__mulsf3+0x390>
    da20:	9880102c 	andhi	r2,r19,64
    da24:	1000061e 	bne	r2,zero,da40 <__mulsf3+0x390>
    da28:	00802034 	movhi	r2,128
    da2c:	99001034 	orhi	r4,r19,64
    da30:	10bfffc4 	addi	r2,r2,-1
    da34:	b029883a 	mov	r20,r22
    da38:	2088703a 	and	r4,r4,r2
    da3c:	003fad06 	br	d8f4 <__alt_data_end+0xfc00d8f4>
    da40:	00802034 	movhi	r2,128
    da44:	91001034 	orhi	r4,r18,64
    da48:	10bfffc4 	addi	r2,r2,-1
    da4c:	2088703a 	and	r4,r4,r2
    da50:	003fa806 	br	d8f4 <__alt_data_end+0xfc00d8f4>
    da54:	00800044 	movi	r2,1
    da58:	10c7c83a 	sub	r3,r2,r3
    da5c:	008006c4 	movi	r2,27
    da60:	10ff6316 	blt	r2,r3,d7f0 <__alt_data_end+0xfc00d7f0>
    da64:	00800804 	movi	r2,32
    da68:	10c5c83a 	sub	r2,r2,r3
    da6c:	9884983a 	sll	r2,r19,r2
    da70:	98c6d83a 	srl	r3,r19,r3
    da74:	1004c03a 	cmpne	r2,r2,zero
    da78:	1884b03a 	or	r2,r3,r2
    da7c:	10c001cc 	andi	r3,r2,7
    da80:	18000426 	beq	r3,zero,da94 <__mulsf3+0x3e4>
    da84:	10c003cc 	andi	r3,r2,15
    da88:	01000104 	movi	r4,4
    da8c:	19000126 	beq	r3,r4,da94 <__mulsf3+0x3e4>
    da90:	1105883a 	add	r2,r2,r4
    da94:	10c1002c 	andhi	r3,r2,1024
    da98:	18000626 	beq	r3,zero,dab4 <__mulsf3+0x404>
    da9c:	a829883a 	mov	r20,r21
    daa0:	00c00044 	movi	r3,1
    daa4:	0009883a 	mov	r4,zero
    daa8:	003f5406 	br	d7fc <__alt_data_end+0xfc00d7fc>
    daac:	3821883a 	mov	r16,r7
    dab0:	003fc506 	br	d9c8 <__alt_data_end+0xfc00d9c8>
    dab4:	100491ba 	slli	r2,r2,6
    dab8:	a829883a 	mov	r20,r21
    dabc:	0007883a 	mov	r3,zero
    dac0:	1008d27a 	srli	r4,r2,9
    dac4:	003f4d06 	br	d7fc <__alt_data_end+0xfc00d7fc>
    dac8:	00802034 	movhi	r2,128
    dacc:	99001034 	orhi	r4,r19,64
    dad0:	10bfffc4 	addi	r2,r2,-1
    dad4:	a829883a 	mov	r20,r21
    dad8:	2088703a 	and	r4,r4,r2
    dadc:	003f8506 	br	d8f4 <__alt_data_end+0xfc00d8f4>

0000dae0 <__subsf3>:
    dae0:	defffc04 	addi	sp,sp,-16
    dae4:	280cd5fa 	srli	r6,r5,23
    dae8:	dc000015 	stw	r16,0(sp)
    daec:	01c02034 	movhi	r7,128
    daf0:	2020d5fa 	srli	r16,r4,23
    daf4:	39ffffc4 	addi	r7,r7,-1
    daf8:	3906703a 	and	r3,r7,r4
    dafc:	dc400115 	stw	r17,4(sp)
    db00:	394e703a 	and	r7,r7,r5
    db04:	2022d7fa 	srli	r17,r4,31
    db08:	dfc00315 	stw	ra,12(sp)
    db0c:	dc800215 	stw	r18,8(sp)
    db10:	31803fcc 	andi	r6,r6,255
    db14:	01003fc4 	movi	r4,255
    db18:	84003fcc 	andi	r16,r16,255
    db1c:	180690fa 	slli	r3,r3,3
    db20:	2804d7fa 	srli	r2,r5,31
    db24:	380e90fa 	slli	r7,r7,3
    db28:	31006d26 	beq	r6,r4,dce0 <__subsf3+0x200>
    db2c:	1080005c 	xori	r2,r2,1
    db30:	8189c83a 	sub	r4,r16,r6
    db34:	14404f26 	beq	r2,r17,dc74 <__subsf3+0x194>
    db38:	0100770e 	bge	zero,r4,dd18 <__subsf3+0x238>
    db3c:	30001e1e 	bne	r6,zero,dbb8 <__subsf3+0xd8>
    db40:	38006a1e 	bne	r7,zero,dcec <__subsf3+0x20c>
    db44:	188001cc 	andi	r2,r3,7
    db48:	10000426 	beq	r2,zero,db5c <__subsf3+0x7c>
    db4c:	188003cc 	andi	r2,r3,15
    db50:	01000104 	movi	r4,4
    db54:	11000126 	beq	r2,r4,db5c <__subsf3+0x7c>
    db58:	1907883a 	add	r3,r3,r4
    db5c:	1881002c 	andhi	r2,r3,1024
    db60:	10003926 	beq	r2,zero,dc48 <__subsf3+0x168>
    db64:	84000044 	addi	r16,r16,1
    db68:	00803fc4 	movi	r2,255
    db6c:	80807526 	beq	r16,r2,dd44 <__subsf3+0x264>
    db70:	180691ba 	slli	r3,r3,6
    db74:	8880004c 	andi	r2,r17,1
    db78:	180ad27a 	srli	r5,r3,9
    db7c:	84003fcc 	andi	r16,r16,255
    db80:	800695fa 	slli	r3,r16,23
    db84:	10803fcc 	andi	r2,r2,255
    db88:	01002034 	movhi	r4,128
    db8c:	213fffc4 	addi	r4,r4,-1
    db90:	100497fa 	slli	r2,r2,31
    db94:	2920703a 	and	r16,r5,r4
    db98:	80e0b03a 	or	r16,r16,r3
    db9c:	8084b03a 	or	r2,r16,r2
    dba0:	dfc00317 	ldw	ra,12(sp)
    dba4:	dc800217 	ldw	r18,8(sp)
    dba8:	dc400117 	ldw	r17,4(sp)
    dbac:	dc000017 	ldw	r16,0(sp)
    dbb0:	dec00404 	addi	sp,sp,16
    dbb4:	f800283a 	ret
    dbb8:	00803fc4 	movi	r2,255
    dbbc:	80bfe126 	beq	r16,r2,db44 <__alt_data_end+0xfc00db44>
    dbc0:	39c10034 	orhi	r7,r7,1024
    dbc4:	008006c4 	movi	r2,27
    dbc8:	11007416 	blt	r2,r4,dd9c <__subsf3+0x2bc>
    dbcc:	00800804 	movi	r2,32
    dbd0:	1105c83a 	sub	r2,r2,r4
    dbd4:	3884983a 	sll	r2,r7,r2
    dbd8:	390ed83a 	srl	r7,r7,r4
    dbdc:	1008c03a 	cmpne	r4,r2,zero
    dbe0:	390eb03a 	or	r7,r7,r4
    dbe4:	19c7c83a 	sub	r3,r3,r7
    dbe8:	1881002c 	andhi	r2,r3,1024
    dbec:	10001426 	beq	r2,zero,dc40 <__subsf3+0x160>
    dbf0:	04810034 	movhi	r18,1024
    dbf4:	94bfffc4 	addi	r18,r18,-1
    dbf8:	1ca4703a 	and	r18,r3,r18
    dbfc:	9009883a 	mov	r4,r18
    dc00:	000e6440 	call	e644 <__clzsi2>
    dc04:	10bffec4 	addi	r2,r2,-5
    dc08:	90a4983a 	sll	r18,r18,r2
    dc0c:	14005116 	blt	r2,r16,dd54 <__subsf3+0x274>
    dc10:	1405c83a 	sub	r2,r2,r16
    dc14:	10c00044 	addi	r3,r2,1
    dc18:	00800804 	movi	r2,32
    dc1c:	10c5c83a 	sub	r2,r2,r3
    dc20:	9084983a 	sll	r2,r18,r2
    dc24:	90e4d83a 	srl	r18,r18,r3
    dc28:	0021883a 	mov	r16,zero
    dc2c:	1006c03a 	cmpne	r3,r2,zero
    dc30:	90c6b03a 	or	r3,r18,r3
    dc34:	003fc306 	br	db44 <__alt_data_end+0xfc00db44>
    dc38:	2000e026 	beq	r4,zero,dfbc <__subsf3+0x4dc>
    dc3c:	2007883a 	mov	r3,r4
    dc40:	188001cc 	andi	r2,r3,7
    dc44:	103fc11e 	bne	r2,zero,db4c <__alt_data_end+0xfc00db4c>
    dc48:	180ad0fa 	srli	r5,r3,3
    dc4c:	00c03fc4 	movi	r3,255
    dc50:	8880004c 	andi	r2,r17,1
    dc54:	80c0031e 	bne	r16,r3,dc64 <__subsf3+0x184>
    dc58:	28006d26 	beq	r5,zero,de10 <__subsf3+0x330>
    dc5c:	29401034 	orhi	r5,r5,64
    dc60:	043fffc4 	movi	r16,-1
    dc64:	00c02034 	movhi	r3,128
    dc68:	18ffffc4 	addi	r3,r3,-1
    dc6c:	28ca703a 	and	r5,r5,r3
    dc70:	003fc206 	br	db7c <__alt_data_end+0xfc00db7c>
    dc74:	01003c0e 	bge	zero,r4,dd68 <__subsf3+0x288>
    dc78:	30002126 	beq	r6,zero,dd00 <__subsf3+0x220>
    dc7c:	01403fc4 	movi	r5,255
    dc80:	817fb026 	beq	r16,r5,db44 <__alt_data_end+0xfc00db44>
    dc84:	39c10034 	orhi	r7,r7,1024
    dc88:	014006c4 	movi	r5,27
    dc8c:	29007416 	blt	r5,r4,de60 <__subsf3+0x380>
    dc90:	01400804 	movi	r5,32
    dc94:	290bc83a 	sub	r5,r5,r4
    dc98:	394a983a 	sll	r5,r7,r5
    dc9c:	390ed83a 	srl	r7,r7,r4
    dca0:	2808c03a 	cmpne	r4,r5,zero
    dca4:	390eb03a 	or	r7,r7,r4
    dca8:	19c7883a 	add	r3,r3,r7
    dcac:	1901002c 	andhi	r4,r3,1024
    dcb0:	20003826 	beq	r4,zero,dd94 <__subsf3+0x2b4>
    dcb4:	84000044 	addi	r16,r16,1
    dcb8:	01003fc4 	movi	r4,255
    dcbc:	81005426 	beq	r16,r4,de10 <__subsf3+0x330>
    dcc0:	1023883a 	mov	r17,r2
    dcc4:	00bf0034 	movhi	r2,64512
    dcc8:	10bfffc4 	addi	r2,r2,-1
    dccc:	1900004c 	andi	r4,r3,1
    dcd0:	1886703a 	and	r3,r3,r2
    dcd4:	1806d07a 	srli	r3,r3,1
    dcd8:	1906b03a 	or	r3,r3,r4
    dcdc:	003f9906 	br	db44 <__alt_data_end+0xfc00db44>
    dce0:	383f9226 	beq	r7,zero,db2c <__alt_data_end+0xfc00db2c>
    dce4:	10803fcc 	andi	r2,r2,255
    dce8:	003f9106 	br	db30 <__alt_data_end+0xfc00db30>
    dcec:	213fffc4 	addi	r4,r4,-1
    dcf0:	203fbc26 	beq	r4,zero,dbe4 <__alt_data_end+0xfc00dbe4>
    dcf4:	00803fc4 	movi	r2,255
    dcf8:	80bfb21e 	bne	r16,r2,dbc4 <__alt_data_end+0xfc00dbc4>
    dcfc:	003f9106 	br	db44 <__alt_data_end+0xfc00db44>
    dd00:	383f9026 	beq	r7,zero,db44 <__alt_data_end+0xfc00db44>
    dd04:	213fffc4 	addi	r4,r4,-1
    dd08:	203fe726 	beq	r4,zero,dca8 <__alt_data_end+0xfc00dca8>
    dd0c:	01403fc4 	movi	r5,255
    dd10:	817fdd1e 	bne	r16,r5,dc88 <__alt_data_end+0xfc00dc88>
    dd14:	003f8b06 	br	db44 <__alt_data_end+0xfc00db44>
    dd18:	2000221e 	bne	r4,zero,dda4 <__subsf3+0x2c4>
    dd1c:	81000044 	addi	r4,r16,1
    dd20:	21003fcc 	andi	r4,r4,255
    dd24:	01400044 	movi	r5,1
    dd28:	2900470e 	bge	r5,r4,de48 <__subsf3+0x368>
    dd2c:	19e5c83a 	sub	r18,r3,r7
    dd30:	9141002c 	andhi	r5,r18,1024
    dd34:	28002d26 	beq	r5,zero,ddec <__subsf3+0x30c>
    dd38:	38e5c83a 	sub	r18,r7,r3
    dd3c:	1023883a 	mov	r17,r2
    dd40:	003fae06 	br	dbfc <__alt_data_end+0xfc00dbfc>
    dd44:	8880004c 	andi	r2,r17,1
    dd48:	043fffc4 	movi	r16,-1
    dd4c:	000b883a 	mov	r5,zero
    dd50:	003f8a06 	br	db7c <__alt_data_end+0xfc00db7c>
    dd54:	00ff0034 	movhi	r3,64512
    dd58:	18ffffc4 	addi	r3,r3,-1
    dd5c:	80a1c83a 	sub	r16,r16,r2
    dd60:	90c6703a 	and	r3,r18,r3
    dd64:	003f7706 	br	db44 <__alt_data_end+0xfc00db44>
    dd68:	2000431e 	bne	r4,zero,de78 <__subsf3+0x398>
    dd6c:	81000044 	addi	r4,r16,1
    dd70:	21803fcc 	andi	r6,r4,255
    dd74:	01400044 	movi	r5,1
    dd78:	2980280e 	bge	r5,r6,de1c <__subsf3+0x33c>
    dd7c:	01403fc4 	movi	r5,255
    dd80:	21402326 	beq	r4,r5,de10 <__subsf3+0x330>
    dd84:	19c7883a 	add	r3,r3,r7
    dd88:	1806d07a 	srli	r3,r3,1
    dd8c:	2021883a 	mov	r16,r4
    dd90:	003f6c06 	br	db44 <__alt_data_end+0xfc00db44>
    dd94:	1023883a 	mov	r17,r2
    dd98:	003fa906 	br	dc40 <__alt_data_end+0xfc00dc40>
    dd9c:	01c00044 	movi	r7,1
    dda0:	003f9006 	br	dbe4 <__alt_data_end+0xfc00dbe4>
    dda4:	8000151e 	bne	r16,zero,ddfc <__subsf3+0x31c>
    dda8:	18002f26 	beq	r3,zero,de68 <__subsf3+0x388>
    ddac:	0108303a 	nor	r4,zero,r4
    ddb0:	20000a26 	beq	r4,zero,dddc <__subsf3+0x2fc>
    ddb4:	01403fc4 	movi	r5,255
    ddb8:	31402b26 	beq	r6,r5,de68 <__subsf3+0x388>
    ddbc:	014006c4 	movi	r5,27
    ddc0:	29006e16 	blt	r5,r4,df7c <__subsf3+0x49c>
    ddc4:	01400804 	movi	r5,32
    ddc8:	290bc83a 	sub	r5,r5,r4
    ddcc:	194a983a 	sll	r5,r3,r5
    ddd0:	1908d83a 	srl	r4,r3,r4
    ddd4:	2806c03a 	cmpne	r3,r5,zero
    ddd8:	20c6b03a 	or	r3,r4,r3
    dddc:	38c7c83a 	sub	r3,r7,r3
    dde0:	3021883a 	mov	r16,r6
    dde4:	1023883a 	mov	r17,r2
    dde8:	003f7f06 	br	dbe8 <__alt_data_end+0xfc00dbe8>
    ddec:	903f831e 	bne	r18,zero,dbfc <__alt_data_end+0xfc00dbfc>
    ddf0:	0005883a 	mov	r2,zero
    ddf4:	0021883a 	mov	r16,zero
    ddf8:	003f9a06 	br	dc64 <__alt_data_end+0xfc00dc64>
    ddfc:	01403fc4 	movi	r5,255
    de00:	31401926 	beq	r6,r5,de68 <__subsf3+0x388>
    de04:	0109c83a 	sub	r4,zero,r4
    de08:	18c10034 	orhi	r3,r3,1024
    de0c:	003feb06 	br	ddbc <__alt_data_end+0xfc00ddbc>
    de10:	043fffc4 	movi	r16,-1
    de14:	000b883a 	mov	r5,zero
    de18:	003f5806 	br	db7c <__alt_data_end+0xfc00db7c>
    de1c:	8000481e 	bne	r16,zero,df40 <__subsf3+0x460>
    de20:	18006226 	beq	r3,zero,dfac <__subsf3+0x4cc>
    de24:	383f4726 	beq	r7,zero,db44 <__alt_data_end+0xfc00db44>
    de28:	19c7883a 	add	r3,r3,r7
    de2c:	1881002c 	andhi	r2,r3,1024
    de30:	103f8326 	beq	r2,zero,dc40 <__alt_data_end+0xfc00dc40>
    de34:	00bf0034 	movhi	r2,64512
    de38:	10bfffc4 	addi	r2,r2,-1
    de3c:	2821883a 	mov	r16,r5
    de40:	1886703a 	and	r3,r3,r2
    de44:	003f3f06 	br	db44 <__alt_data_end+0xfc00db44>
    de48:	80001c1e 	bne	r16,zero,debc <__subsf3+0x3dc>
    de4c:	1800261e 	bne	r3,zero,dee8 <__subsf3+0x408>
    de50:	38004c26 	beq	r7,zero,df84 <__subsf3+0x4a4>
    de54:	3807883a 	mov	r3,r7
    de58:	1023883a 	mov	r17,r2
    de5c:	003f3906 	br	db44 <__alt_data_end+0xfc00db44>
    de60:	01c00044 	movi	r7,1
    de64:	003f9006 	br	dca8 <__alt_data_end+0xfc00dca8>
    de68:	3807883a 	mov	r3,r7
    de6c:	3021883a 	mov	r16,r6
    de70:	1023883a 	mov	r17,r2
    de74:	003f3306 	br	db44 <__alt_data_end+0xfc00db44>
    de78:	8000161e 	bne	r16,zero,ded4 <__subsf3+0x3f4>
    de7c:	18002d26 	beq	r3,zero,df34 <__subsf3+0x454>
    de80:	0108303a 	nor	r4,zero,r4
    de84:	20000a26 	beq	r4,zero,deb0 <__subsf3+0x3d0>
    de88:	01403fc4 	movi	r5,255
    de8c:	31402926 	beq	r6,r5,df34 <__subsf3+0x454>
    de90:	014006c4 	movi	r5,27
    de94:	29004716 	blt	r5,r4,dfb4 <__subsf3+0x4d4>
    de98:	01400804 	movi	r5,32
    de9c:	290bc83a 	sub	r5,r5,r4
    dea0:	194a983a 	sll	r5,r3,r5
    dea4:	1908d83a 	srl	r4,r3,r4
    dea8:	2806c03a 	cmpne	r3,r5,zero
    deac:	20c6b03a 	or	r3,r4,r3
    deb0:	19c7883a 	add	r3,r3,r7
    deb4:	3021883a 	mov	r16,r6
    deb8:	003f7c06 	br	dcac <__alt_data_end+0xfc00dcac>
    debc:	1800111e 	bne	r3,zero,df04 <__subsf3+0x424>
    dec0:	38003326 	beq	r7,zero,df90 <__subsf3+0x4b0>
    dec4:	3807883a 	mov	r3,r7
    dec8:	1023883a 	mov	r17,r2
    decc:	04003fc4 	movi	r16,255
    ded0:	003f1c06 	br	db44 <__alt_data_end+0xfc00db44>
    ded4:	01403fc4 	movi	r5,255
    ded8:	31401626 	beq	r6,r5,df34 <__subsf3+0x454>
    dedc:	0109c83a 	sub	r4,zero,r4
    dee0:	18c10034 	orhi	r3,r3,1024
    dee4:	003fea06 	br	de90 <__alt_data_end+0xfc00de90>
    dee8:	383f1626 	beq	r7,zero,db44 <__alt_data_end+0xfc00db44>
    deec:	19c9c83a 	sub	r4,r3,r7
    def0:	2141002c 	andhi	r5,r4,1024
    def4:	283f5026 	beq	r5,zero,dc38 <__alt_data_end+0xfc00dc38>
    def8:	38c7c83a 	sub	r3,r7,r3
    defc:	1023883a 	mov	r17,r2
    df00:	003f1006 	br	db44 <__alt_data_end+0xfc00db44>
    df04:	38001b26 	beq	r7,zero,df74 <__subsf3+0x494>
    df08:	1806d0fa 	srli	r3,r3,3
    df0c:	1900102c 	andhi	r4,r3,64
    df10:	20000526 	beq	r4,zero,df28 <__subsf3+0x448>
    df14:	380ed0fa 	srli	r7,r7,3
    df18:	3900102c 	andhi	r4,r7,64
    df1c:	2000021e 	bne	r4,zero,df28 <__subsf3+0x448>
    df20:	3807883a 	mov	r3,r7
    df24:	1023883a 	mov	r17,r2
    df28:	180690fa 	slli	r3,r3,3
    df2c:	04003fc4 	movi	r16,255
    df30:	003f0406 	br	db44 <__alt_data_end+0xfc00db44>
    df34:	3807883a 	mov	r3,r7
    df38:	3021883a 	mov	r16,r6
    df3c:	003f0106 	br	db44 <__alt_data_end+0xfc00db44>
    df40:	18001726 	beq	r3,zero,dfa0 <__subsf3+0x4c0>
    df44:	38000b26 	beq	r7,zero,df74 <__subsf3+0x494>
    df48:	1806d0fa 	srli	r3,r3,3
    df4c:	1900102c 	andhi	r4,r3,64
    df50:	20000426 	beq	r4,zero,df64 <__subsf3+0x484>
    df54:	380ed0fa 	srli	r7,r7,3
    df58:	3900102c 	andhi	r4,r7,64
    df5c:	2000011e 	bne	r4,zero,df64 <__subsf3+0x484>
    df60:	3807883a 	mov	r3,r7
    df64:	180690fa 	slli	r3,r3,3
    df68:	1023883a 	mov	r17,r2
    df6c:	04003fc4 	movi	r16,255
    df70:	003ef406 	br	db44 <__alt_data_end+0xfc00db44>
    df74:	04003fc4 	movi	r16,255
    df78:	003ef206 	br	db44 <__alt_data_end+0xfc00db44>
    df7c:	00c00044 	movi	r3,1
    df80:	003f9606 	br	dddc <__alt_data_end+0xfc00dddc>
    df84:	000b883a 	mov	r5,zero
    df88:	0005883a 	mov	r2,zero
    df8c:	003f3506 	br	dc64 <__alt_data_end+0xfc00dc64>
    df90:	01402034 	movhi	r5,128
    df94:	297fffc4 	addi	r5,r5,-1
    df98:	0005883a 	mov	r2,zero
    df9c:	003f2f06 	br	dc5c <__alt_data_end+0xfc00dc5c>
    dfa0:	3807883a 	mov	r3,r7
    dfa4:	04003fc4 	movi	r16,255
    dfa8:	003ee606 	br	db44 <__alt_data_end+0xfc00db44>
    dfac:	3807883a 	mov	r3,r7
    dfb0:	003ee406 	br	db44 <__alt_data_end+0xfc00db44>
    dfb4:	00c00044 	movi	r3,1
    dfb8:	003fbd06 	br	deb0 <__alt_data_end+0xfc00deb0>
    dfbc:	0005883a 	mov	r2,zero
    dfc0:	003f2806 	br	dc64 <__alt_data_end+0xfc00dc64>

0000dfc4 <__fixsfsi>:
    dfc4:	200ad5fa 	srli	r5,r4,23
    dfc8:	00c02034 	movhi	r3,128
    dfcc:	18ffffc4 	addi	r3,r3,-1
    dfd0:	29403fcc 	andi	r5,r5,255
    dfd4:	00801f84 	movi	r2,126
    dfd8:	1906703a 	and	r3,r3,r4
    dfdc:	2008d7fa 	srli	r4,r4,31
    dfe0:	11400e0e 	bge	r2,r5,e01c <__fixsfsi+0x58>
    dfe4:	00802744 	movi	r2,157
    dfe8:	11400816 	blt	r2,r5,e00c <__fixsfsi+0x48>
    dfec:	00802544 	movi	r2,149
    dff0:	18c02034 	orhi	r3,r3,128
    dff4:	11400b0e 	bge	r2,r5,e024 <__fixsfsi+0x60>
    dff8:	28bfda84 	addi	r2,r5,-150
    dffc:	1884983a 	sll	r2,r3,r2
    e000:	20000726 	beq	r4,zero,e020 <__fixsfsi+0x5c>
    e004:	0085c83a 	sub	r2,zero,r2
    e008:	f800283a 	ret
    e00c:	00a00034 	movhi	r2,32768
    e010:	10bfffc4 	addi	r2,r2,-1
    e014:	2085883a 	add	r2,r4,r2
    e018:	f800283a 	ret
    e01c:	0005883a 	mov	r2,zero
    e020:	f800283a 	ret
    e024:	00802584 	movi	r2,150
    e028:	1145c83a 	sub	r2,r2,r5
    e02c:	1884d83a 	srl	r2,r3,r2
    e030:	003ff306 	br	e000 <__alt_data_end+0xfc00e000>

0000e034 <__floatunsisf>:
    e034:	defffe04 	addi	sp,sp,-8
    e038:	dfc00115 	stw	ra,4(sp)
    e03c:	dc000015 	stw	r16,0(sp)
    e040:	20002c26 	beq	r4,zero,e0f4 <__floatunsisf+0xc0>
    e044:	2021883a 	mov	r16,r4
    e048:	000e6440 	call	e644 <__clzsi2>
    e04c:	00c02784 	movi	r3,158
    e050:	1887c83a 	sub	r3,r3,r2
    e054:	01002584 	movi	r4,150
    e058:	20c00f16 	blt	r4,r3,e098 <__floatunsisf+0x64>
    e05c:	20c9c83a 	sub	r4,r4,r3
    e060:	8108983a 	sll	r4,r16,r4
    e064:	00802034 	movhi	r2,128
    e068:	10bfffc4 	addi	r2,r2,-1
    e06c:	2088703a 	and	r4,r4,r2
    e070:	18803fcc 	andi	r2,r3,255
    e074:	100695fa 	slli	r3,r2,23
    e078:	00802034 	movhi	r2,128
    e07c:	10bfffc4 	addi	r2,r2,-1
    e080:	2084703a 	and	r2,r4,r2
    e084:	10c4b03a 	or	r2,r2,r3
    e088:	dfc00117 	ldw	ra,4(sp)
    e08c:	dc000017 	ldw	r16,0(sp)
    e090:	dec00204 	addi	sp,sp,8
    e094:	f800283a 	ret
    e098:	01002644 	movi	r4,153
    e09c:	20c01816 	blt	r4,r3,e100 <__floatunsisf+0xcc>
    e0a0:	20c9c83a 	sub	r4,r4,r3
    e0a4:	8108983a 	sll	r4,r16,r4
    e0a8:	017f0034 	movhi	r5,64512
    e0ac:	297fffc4 	addi	r5,r5,-1
    e0b0:	218001cc 	andi	r6,r4,7
    e0b4:	214a703a 	and	r5,r4,r5
    e0b8:	30000426 	beq	r6,zero,e0cc <__floatunsisf+0x98>
    e0bc:	210003cc 	andi	r4,r4,15
    e0c0:	01800104 	movi	r6,4
    e0c4:	21800126 	beq	r4,r6,e0cc <__floatunsisf+0x98>
    e0c8:	298b883a 	add	r5,r5,r6
    e0cc:	2901002c 	andhi	r4,r5,1024
    e0d0:	20000526 	beq	r4,zero,e0e8 <__floatunsisf+0xb4>
    e0d4:	00c027c4 	movi	r3,159
    e0d8:	1887c83a 	sub	r3,r3,r2
    e0dc:	00bf0034 	movhi	r2,64512
    e0e0:	10bfffc4 	addi	r2,r2,-1
    e0e4:	288a703a 	and	r5,r5,r2
    e0e8:	280891ba 	slli	r4,r5,6
    e0ec:	2008d27a 	srli	r4,r4,9
    e0f0:	003fdf06 	br	e070 <__alt_data_end+0xfc00e070>
    e0f4:	0007883a 	mov	r3,zero
    e0f8:	0009883a 	mov	r4,zero
    e0fc:	003fdc06 	br	e070 <__alt_data_end+0xfc00e070>
    e100:	01402e44 	movi	r5,185
    e104:	28cbc83a 	sub	r5,r5,r3
    e108:	01000144 	movi	r4,5
    e10c:	2089c83a 	sub	r4,r4,r2
    e110:	814a983a 	sll	r5,r16,r5
    e114:	8108d83a 	srl	r4,r16,r4
    e118:	2820c03a 	cmpne	r16,r5,zero
    e11c:	2408b03a 	or	r4,r4,r16
    e120:	003fe106 	br	e0a8 <__alt_data_end+0xfc00e0a8>

0000e124 <_Unwind_ForcedUnwind_Phase2>:
    e124:	defff404 	addi	sp,sp,-48
    e128:	dd800915 	stw	r22,36(sp)
    e12c:	058000f4 	movhi	r22,3
    e130:	ddc00a15 	stw	r23,40(sp)
    e134:	dd400815 	stw	r21,32(sp)
    e138:	dd000715 	stw	r20,28(sp)
    e13c:	dcc00615 	stw	r19,24(sp)
    e140:	dc400415 	stw	r17,16(sp)
    e144:	dc000315 	stw	r16,12(sp)
    e148:	dfc00b15 	stw	ra,44(sp)
    e14c:	dc800515 	stw	r18,20(sp)
    e150:	2021883a 	mov	r16,r4
    e154:	2823883a 	mov	r17,r5
    e158:	24c00317 	ldw	r19,12(r4)
    e15c:	25000417 	ldw	r20,16(r4)
    e160:	28c00017 	ldw	r3,0(r5)
    e164:	b584dd04 	addi	r22,r22,4980
    e168:	054001c4 	movi	r21,7
    e16c:	05c00204 	movi	r23,8
    e170:	00001606 	br	e1cc <_Unwind_ForcedUnwind_Phase2+0xa8>
    e174:	81800017 	ldw	r6,0(r16)
    e178:	81c00117 	ldw	r7,4(r16)
    e17c:	1c800617 	ldw	r18,24(r3)
    e180:	dd000215 	stw	r20,8(sp)
    e184:	dc400115 	stw	r17,4(sp)
    e188:	dc000015 	stw	r16,0(sp)
    e18c:	983ee83a 	callr	r19
    e190:	01400284 	movi	r5,10
    e194:	01000044 	movi	r4,1
    e198:	1000241e 	bne	r2,zero,e22c <_Unwind_ForcedUnwind_Phase2+0x108>
    e19c:	90000726 	beq	r18,zero,e1bc <_Unwind_ForcedUnwind_Phase2+0x98>
    e1a0:	81800017 	ldw	r6,0(r16)
    e1a4:	81c00117 	ldw	r7,4(r16)
    e1a8:	dc400115 	stw	r17,4(sp)
    e1ac:	dc000015 	stw	r16,0(sp)
    e1b0:	903ee83a 	callr	r18
    e1b4:	15401f26 	beq	r2,r21,e234 <_Unwind_ForcedUnwind_Phase2+0x110>
    e1b8:	15c01c1e 	bne	r2,r23,e22c <_Unwind_ForcedUnwind_Phase2+0x108>
    e1bc:	88800017 	ldw	r2,0(r17)
    e1c0:	10c00017 	ldw	r3,0(r2)
    e1c4:	b0c00015 	stw	r3,0(r22)
    e1c8:	88c00015 	stw	r3,0(r17)
    e1cc:	01400284 	movi	r5,10
    e1d0:	01000044 	movi	r4,1
    e1d4:	183fe71e 	bne	r3,zero,e174 <__alt_data_end+0xfc00e174>
    e1d8:	81800017 	ldw	r6,0(r16)
    e1dc:	81c00117 	ldw	r7,4(r16)
    e1e0:	01400684 	movi	r5,26
    e1e4:	dd000215 	stw	r20,8(sp)
    e1e8:	dc400115 	stw	r17,4(sp)
    e1ec:	dc000015 	stw	r16,0(sp)
    e1f0:	01000044 	movi	r4,1
    e1f4:	983ee83a 	callr	r19
    e1f8:	10000c1e 	bne	r2,zero,e22c <_Unwind_ForcedUnwind_Phase2+0x108>
    e1fc:	00800144 	movi	r2,5
    e200:	dfc00b17 	ldw	ra,44(sp)
    e204:	ddc00a17 	ldw	r23,40(sp)
    e208:	dd800917 	ldw	r22,36(sp)
    e20c:	dd400817 	ldw	r21,32(sp)
    e210:	dd000717 	ldw	r20,28(sp)
    e214:	dcc00617 	ldw	r19,24(sp)
    e218:	dc800517 	ldw	r18,20(sp)
    e21c:	dc400417 	ldw	r17,16(sp)
    e220:	dc000317 	ldw	r16,12(sp)
    e224:	dec00c04 	addi	sp,sp,48
    e228:	f800283a 	ret
    e22c:	00800084 	movi	r2,2
    e230:	003ff306 	br	e200 <__alt_data_end+0xfc00e200>
    e234:	a805883a 	mov	r2,r21
    e238:	003ff106 	br	e200 <__alt_data_end+0xfc00e200>

0000e23c <_Unwind_RaiseException_Phase2>:
    e23c:	28c00017 	ldw	r3,0(r5)
    e240:	defff804 	addi	sp,sp,-32
    e244:	dcc00515 	stw	r19,20(sp)
    e248:	dc800415 	stw	r18,16(sp)
    e24c:	dc400315 	stw	r17,12(sp)
    e250:	dc000215 	stw	r16,8(sp)
    e254:	dfc00715 	stw	ra,28(sp)
    e258:	dd000615 	stw	r20,24(sp)
    e25c:	2823883a 	mov	r17,r5
    e260:	2021883a 	mov	r16,r4
    e264:	048001c4 	movi	r18,7
    e268:	04c00204 	movi	r19,8
    e26c:	18001326 	beq	r3,zero,e2bc <_Unwind_RaiseException_Phase2+0x80>
    e270:	81000417 	ldw	r4,16(r16)
    e274:	1a000617 	ldw	r8,24(r3)
    e278:	19001926 	beq	r3,r4,e2e0 <_Unwind_RaiseException_Phase2+0xa4>
    e27c:	40000c26 	beq	r8,zero,e2b0 <_Unwind_RaiseException_Phase2+0x74>
    e280:	01400084 	movi	r5,2
    e284:	0029883a 	mov	r20,zero
    e288:	81800017 	ldw	r6,0(r16)
    e28c:	81c00117 	ldw	r7,4(r16)
    e290:	01000044 	movi	r4,1
    e294:	dc400115 	stw	r17,4(sp)
    e298:	dc000015 	stw	r16,0(sp)
    e29c:	403ee83a 	callr	r8
    e2a0:	14801326 	beq	r2,r18,e2f0 <_Unwind_RaiseException_Phase2+0xb4>
    e2a4:	14c0051e 	bne	r2,r19,e2bc <_Unwind_RaiseException_Phase2+0x80>
    e2a8:	a000131e 	bne	r20,zero,e2f8 <_Unwind_RaiseException_Phase2+0xbc>
    e2ac:	88c00017 	ldw	r3,0(r17)
    e2b0:	18c00017 	ldw	r3,0(r3)
    e2b4:	88c00015 	stw	r3,0(r17)
    e2b8:	183fed1e 	bne	r3,zero,e270 <__alt_data_end+0xfc00e270>
    e2bc:	00800084 	movi	r2,2
    e2c0:	dfc00717 	ldw	ra,28(sp)
    e2c4:	dd000617 	ldw	r20,24(sp)
    e2c8:	dcc00517 	ldw	r19,20(sp)
    e2cc:	dc800417 	ldw	r18,16(sp)
    e2d0:	dc400317 	ldw	r17,12(sp)
    e2d4:	dc000217 	ldw	r16,8(sp)
    e2d8:	dec00804 	addi	sp,sp,32
    e2dc:	f800283a 	ret
    e2e0:	40000526 	beq	r8,zero,e2f8 <_Unwind_RaiseException_Phase2+0xbc>
    e2e4:	01400184 	movi	r5,6
    e2e8:	05000104 	movi	r20,4
    e2ec:	003fe606 	br	e288 <__alt_data_end+0xfc00e288>
    e2f0:	9005883a 	mov	r2,r18
    e2f4:	003ff206 	br	e2c0 <__alt_data_end+0xfc00e2c0>
    e2f8:	000e6a80 	call	e6a8 <abort>

0000e2fc <uw_install_context.isra.1>:
    e2fc:	20c00017 	ldw	r3,0(r4)
    e300:	deffff04 	addi	sp,sp,-4
    e304:	014000f4 	movhi	r5,3
    e308:	19000917 	ldw	r4,36(r3)
    e30c:	df000015 	stw	fp,0(sp)
    e310:	18800804 	addi	r2,r3,32
    e314:	d839883a 	mov	fp,sp
    e318:	2944dd04 	addi	r5,r5,4980
    e31c:	28c00015 	stw	r3,0(r5)
    e320:	17000017 	ldw	fp,0(r2)
    e324:	1ec00a17 	ldw	sp,40(r3)
    e328:	2000683a 	jmp	r4

0000e32c <_Unwind_SjLj_Register>:
    e32c:	008000f4 	movhi	r2,3
    e330:	1084dd04 	addi	r2,r2,4980
    e334:	10c00017 	ldw	r3,0(r2)
    e338:	11000015 	stw	r4,0(r2)
    e33c:	20c00015 	stw	r3,0(r4)
    e340:	f800283a 	ret

0000e344 <_Unwind_SjLj_Unregister>:
    e344:	20c00017 	ldw	r3,0(r4)
    e348:	008000f4 	movhi	r2,3
    e34c:	1084dd04 	addi	r2,r2,4980
    e350:	10c00015 	stw	r3,0(r2)
    e354:	f800283a 	ret

0000e358 <_Unwind_GetGR>:
    e358:	20800017 	ldw	r2,0(r4)
    e35c:	29400084 	addi	r5,r5,2
    e360:	294b883a 	add	r5,r5,r5
    e364:	294b883a 	add	r5,r5,r5
    e368:	114b883a 	add	r5,r2,r5
    e36c:	28800017 	ldw	r2,0(r5)
    e370:	f800283a 	ret

0000e374 <_Unwind_GetCFA>:
    e374:	20800017 	ldw	r2,0(r4)
    e378:	10000226 	beq	r2,zero,e384 <_Unwind_GetCFA+0x10>
    e37c:	10800a17 	ldw	r2,40(r2)
    e380:	f800283a 	ret
    e384:	0005883a 	mov	r2,zero
    e388:	f800283a 	ret

0000e38c <_Unwind_SetGR>:
    e38c:	20800017 	ldw	r2,0(r4)
    e390:	29400084 	addi	r5,r5,2
    e394:	294b883a 	add	r5,r5,r5
    e398:	294b883a 	add	r5,r5,r5
    e39c:	114b883a 	add	r5,r2,r5
    e3a0:	29800015 	stw	r6,0(r5)
    e3a4:	f800283a 	ret

0000e3a8 <_Unwind_GetIP>:
    e3a8:	20800017 	ldw	r2,0(r4)
    e3ac:	10800117 	ldw	r2,4(r2)
    e3b0:	10800044 	addi	r2,r2,1
    e3b4:	f800283a 	ret

0000e3b8 <_Unwind_GetIPInfo>:
    e3b8:	20800017 	ldw	r2,0(r4)
    e3bc:	28000015 	stw	zero,0(r5)
    e3c0:	10000326 	beq	r2,zero,e3d0 <_Unwind_GetIPInfo+0x18>
    e3c4:	10800117 	ldw	r2,4(r2)
    e3c8:	10800044 	addi	r2,r2,1
    e3cc:	f800283a 	ret
    e3d0:	0005883a 	mov	r2,zero
    e3d4:	f800283a 	ret

0000e3d8 <_Unwind_SetIP>:
    e3d8:	20800017 	ldw	r2,0(r4)
    e3dc:	297fffc4 	addi	r5,r5,-1
    e3e0:	11400115 	stw	r5,4(r2)
    e3e4:	f800283a 	ret

0000e3e8 <_Unwind_GetLanguageSpecificData>:
    e3e8:	20800017 	ldw	r2,0(r4)
    e3ec:	10800717 	ldw	r2,28(r2)
    e3f0:	f800283a 	ret

0000e3f4 <_Unwind_GetRegionStart>:
    e3f4:	0005883a 	mov	r2,zero
    e3f8:	f800283a 	ret

0000e3fc <_Unwind_FindEnclosingFunction>:
    e3fc:	0005883a 	mov	r2,zero
    e400:	f800283a 	ret

0000e404 <_Unwind_GetDataRelBase>:
    e404:	0005883a 	mov	r2,zero
    e408:	f800283a 	ret

0000e40c <_Unwind_GetTextRelBase>:
    e40c:	0005883a 	mov	r2,zero
    e410:	f800283a 	ret

0000e414 <_Unwind_SjLj_RaiseException>:
    e414:	008000f4 	movhi	r2,3
    e418:	defff804 	addi	sp,sp,-32
    e41c:	1084dd04 	addi	r2,r2,4980
    e420:	dc800515 	stw	r18,20(sp)
    e424:	14800017 	ldw	r18,0(r2)
    e428:	dfc00715 	stw	ra,28(sp)
    e42c:	dcc00615 	stw	r19,24(sp)
    e430:	dc400415 	stw	r17,16(sp)
    e434:	dc000315 	stw	r16,12(sp)
    e438:	dc800215 	stw	r18,8(sp)
    e43c:	90001426 	beq	r18,zero,e490 <_Unwind_SjLj_RaiseException+0x7c>
    e440:	2021883a 	mov	r16,r4
    e444:	9005883a 	mov	r2,r18
    e448:	04400184 	movi	r17,6
    e44c:	04c00204 	movi	r19,8
    e450:	10800617 	ldw	r2,24(r2)
    e454:	10000a26 	beq	r2,zero,e480 <_Unwind_SjLj_RaiseException+0x6c>
    e458:	81800017 	ldw	r6,0(r16)
    e45c:	81c00117 	ldw	r7,4(r16)
    e460:	01400044 	movi	r5,1
    e464:	d8c00204 	addi	r3,sp,8
    e468:	d8c00115 	stw	r3,4(sp)
    e46c:	dc000015 	stw	r16,0(sp)
    e470:	2809883a 	mov	r4,r5
    e474:	103ee83a 	callr	r2
    e478:	14400d26 	beq	r2,r17,e4b0 <_Unwind_SjLj_RaiseException+0x9c>
    e47c:	14c0171e 	bne	r2,r19,e4dc <_Unwind_SjLj_RaiseException+0xc8>
    e480:	d8800217 	ldw	r2,8(sp)
    e484:	10800017 	ldw	r2,0(r2)
    e488:	d8800215 	stw	r2,8(sp)
    e48c:	103ff01e 	bne	r2,zero,e450 <__alt_data_end+0xfc00e450>
    e490:	00800144 	movi	r2,5
    e494:	dfc00717 	ldw	ra,28(sp)
    e498:	dcc00617 	ldw	r19,24(sp)
    e49c:	dc800517 	ldw	r18,20(sp)
    e4a0:	dc400417 	ldw	r17,16(sp)
    e4a4:	dc000317 	ldw	r16,12(sp)
    e4a8:	dec00804 	addi	sp,sp,32
    e4ac:	f800283a 	ret
    e4b0:	d8800217 	ldw	r2,8(sp)
    e4b4:	80000315 	stw	zero,12(r16)
    e4b8:	d9400204 	addi	r5,sp,8
    e4bc:	80800415 	stw	r2,16(r16)
    e4c0:	8009883a 	mov	r4,r16
    e4c4:	dc800215 	stw	r18,8(sp)
    e4c8:	000e23c0 	call	e23c <_Unwind_RaiseException_Phase2>
    e4cc:	00c001c4 	movi	r3,7
    e4d0:	10fff01e 	bne	r2,r3,e494 <__alt_data_end+0xfc00e494>
    e4d4:	d9000204 	addi	r4,sp,8
    e4d8:	000e2fc0 	call	e2fc <uw_install_context.isra.1>
    e4dc:	008000c4 	movi	r2,3
    e4e0:	003fec06 	br	e494 <__alt_data_end+0xfc00e494>

0000e4e4 <_Unwind_SjLj_ForcedUnwind>:
    e4e4:	00c000f4 	movhi	r3,3
    e4e8:	18c4dd04 	addi	r3,r3,4980
    e4ec:	defffe04 	addi	sp,sp,-8
    e4f0:	18c00017 	ldw	r3,0(r3)
    e4f4:	dfc00115 	stw	ra,4(sp)
    e4f8:	21400315 	stw	r5,12(r4)
    e4fc:	21800415 	stw	r6,16(r4)
    e500:	d80b883a 	mov	r5,sp
    e504:	d8c00015 	stw	r3,0(sp)
    e508:	000e1240 	call	e124 <_Unwind_ForcedUnwind_Phase2>
    e50c:	00c001c4 	movi	r3,7
    e510:	10c00326 	beq	r2,r3,e520 <_Unwind_SjLj_ForcedUnwind+0x3c>
    e514:	dfc00117 	ldw	ra,4(sp)
    e518:	dec00204 	addi	sp,sp,8
    e51c:	f800283a 	ret
    e520:	d809883a 	mov	r4,sp
    e524:	000e2fc0 	call	e2fc <uw_install_context.isra.1>

0000e528 <_Unwind_SjLj_Resume>:
    e528:	00c000f4 	movhi	r3,3
    e52c:	18c4dd04 	addi	r3,r3,4980
    e530:	18c00017 	ldw	r3,0(r3)
    e534:	20800317 	ldw	r2,12(r4)
    e538:	defffe04 	addi	sp,sp,-8
    e53c:	dfc00115 	stw	ra,4(sp)
    e540:	d8c00015 	stw	r3,0(sp)
    e544:	d80b883a 	mov	r5,sp
    e548:	1000041e 	bne	r2,zero,e55c <_Unwind_SjLj_Resume+0x34>
    e54c:	000e23c0 	call	e23c <_Unwind_RaiseException_Phase2>
    e550:	00c001c4 	movi	r3,7
    e554:	10c00326 	beq	r2,r3,e564 <_Unwind_SjLj_Resume+0x3c>
    e558:	000e6a80 	call	e6a8 <abort>
    e55c:	000e1240 	call	e124 <_Unwind_ForcedUnwind_Phase2>
    e560:	003ffb06 	br	e550 <__alt_data_end+0xfc00e550>
    e564:	d809883a 	mov	r4,sp
    e568:	000e2fc0 	call	e2fc <uw_install_context.isra.1>

0000e56c <_Unwind_SjLj_Resume_or_Rethrow>:
    e56c:	20800317 	ldw	r2,12(r4)
    e570:	defffe04 	addi	sp,sp,-8
    e574:	dfc00115 	stw	ra,4(sp)
    e578:	1000041e 	bne	r2,zero,e58c <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    e57c:	000e4140 	call	e414 <_Unwind_SjLj_RaiseException>
    e580:	dfc00117 	ldw	ra,4(sp)
    e584:	dec00204 	addi	sp,sp,8
    e588:	f800283a 	ret
    e58c:	008000f4 	movhi	r2,3
    e590:	1084dd04 	addi	r2,r2,4980
    e594:	10800017 	ldw	r2,0(r2)
    e598:	d80b883a 	mov	r5,sp
    e59c:	d8800015 	stw	r2,0(sp)
    e5a0:	000e1240 	call	e124 <_Unwind_ForcedUnwind_Phase2>
    e5a4:	00c001c4 	movi	r3,7
    e5a8:	10c00126 	beq	r2,r3,e5b0 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    e5ac:	000e6a80 	call	e6a8 <abort>
    e5b0:	d809883a 	mov	r4,sp
    e5b4:	000e2fc0 	call	e2fc <uw_install_context.isra.1>

0000e5b8 <_Unwind_DeleteException>:
    e5b8:	20800217 	ldw	r2,8(r4)
    e5bc:	10000326 	beq	r2,zero,e5cc <_Unwind_DeleteException+0x14>
    e5c0:	200b883a 	mov	r5,r4
    e5c4:	01000044 	movi	r4,1
    e5c8:	1000683a 	jmp	r2
    e5cc:	f800283a 	ret

0000e5d0 <_Unwind_Backtrace>:
    e5d0:	008000f4 	movhi	r2,3
    e5d4:	1084dd04 	addi	r2,r2,4980
    e5d8:	10800017 	ldw	r2,0(r2)
    e5dc:	defffc04 	addi	sp,sp,-16
    e5e0:	dc400215 	stw	r17,8(sp)
    e5e4:	dc000115 	stw	r16,4(sp)
    e5e8:	dfc00315 	stw	ra,12(sp)
    e5ec:	2023883a 	mov	r17,r4
    e5f0:	2821883a 	mov	r16,r5
    e5f4:	d8800015 	stw	r2,0(sp)
    e5f8:	00000506 	br	e610 <_Unwind_Backtrace+0x40>
    e5fc:	883ee83a 	callr	r17
    e600:	10000e1e 	bne	r2,zero,e63c <_Unwind_Backtrace+0x6c>
    e604:	d8800017 	ldw	r2,0(sp)
    e608:	10800017 	ldw	r2,0(r2)
    e60c:	d8800015 	stw	r2,0(sp)
    e610:	800b883a 	mov	r5,r16
    e614:	d809883a 	mov	r4,sp
    e618:	103ff81e 	bne	r2,zero,e5fc <__alt_data_end+0xfc00e5fc>
    e61c:	883ee83a 	callr	r17
    e620:	1000061e 	bne	r2,zero,e63c <_Unwind_Backtrace+0x6c>
    e624:	00800144 	movi	r2,5
    e628:	dfc00317 	ldw	ra,12(sp)
    e62c:	dc400217 	ldw	r17,8(sp)
    e630:	dc000117 	ldw	r16,4(sp)
    e634:	dec00404 	addi	sp,sp,16
    e638:	f800283a 	ret
    e63c:	008000c4 	movi	r2,3
    e640:	003ff906 	br	e628 <__alt_data_end+0xfc00e628>

0000e644 <__clzsi2>:
    e644:	00bfffd4 	movui	r2,65535
    e648:	11000536 	bltu	r2,r4,e660 <__clzsi2+0x1c>
    e64c:	00803fc4 	movi	r2,255
    e650:	11000f36 	bltu	r2,r4,e690 <__clzsi2+0x4c>
    e654:	00800804 	movi	r2,32
    e658:	0007883a 	mov	r3,zero
    e65c:	00000506 	br	e674 <__clzsi2+0x30>
    e660:	00804034 	movhi	r2,256
    e664:	10bfffc4 	addi	r2,r2,-1
    e668:	11000c2e 	bgeu	r2,r4,e69c <__clzsi2+0x58>
    e66c:	00800204 	movi	r2,8
    e670:	00c00604 	movi	r3,24
    e674:	20c8d83a 	srl	r4,r4,r3
    e678:	00c000f4 	movhi	r3,3
    e67c:	18eb0604 	addi	r3,r3,-21480
    e680:	1909883a 	add	r4,r3,r4
    e684:	20c00003 	ldbu	r3,0(r4)
    e688:	10c5c83a 	sub	r2,r2,r3
    e68c:	f800283a 	ret
    e690:	00800604 	movi	r2,24
    e694:	00c00204 	movi	r3,8
    e698:	003ff606 	br	e674 <__alt_data_end+0xfc00e674>
    e69c:	00800404 	movi	r2,16
    e6a0:	1007883a 	mov	r3,r2
    e6a4:	003ff306 	br	e674 <__alt_data_end+0xfc00e674>

0000e6a8 <abort>:
    e6a8:	deffff04 	addi	sp,sp,-4
    e6ac:	01000184 	movi	r4,6
    e6b0:	dfc00015 	stw	ra,0(sp)
    e6b4:	000f5b80 	call	f5b8 <raise>
    e6b8:	01000044 	movi	r4,1
    e6bc:	001f2f80 	call	1f2f8 <_exit>

0000e6c0 <clock>:
    e6c0:	008000f4 	movhi	r2,3
    e6c4:	10b84b04 	addi	r2,r2,-7892
    e6c8:	11000017 	ldw	r4,0(r2)
    e6cc:	defffb04 	addi	sp,sp,-20
    e6d0:	d80b883a 	mov	r5,sp
    e6d4:	dfc00415 	stw	ra,16(sp)
    e6d8:	0011b5c0 	call	11b5c <_times_r>
    e6dc:	00ffffc4 	movi	r3,-1
    e6e0:	10c00726 	beq	r2,r3,e700 <clock+0x40>
    e6e4:	d8c00017 	ldw	r3,0(sp)
    e6e8:	d8800117 	ldw	r2,4(sp)
    e6ec:	1885883a 	add	r2,r3,r2
    e6f0:	d8c00217 	ldw	r3,8(sp)
    e6f4:	10c7883a 	add	r3,r2,r3
    e6f8:	d8800317 	ldw	r2,12(sp)
    e6fc:	1885883a 	add	r2,r3,r2
    e700:	dfc00417 	ldw	ra,16(sp)
    e704:	dec00504 	addi	sp,sp,20
    e708:	f800283a 	ret

0000e70c <malloc>:
    e70c:	008000f4 	movhi	r2,3
    e710:	10b84b04 	addi	r2,r2,-7892
    e714:	200b883a 	mov	r5,r4
    e718:	11000017 	ldw	r4,0(r2)
    e71c:	000e7341 	jmpi	e734 <_malloc_r>

0000e720 <free>:
    e720:	008000f4 	movhi	r2,3
    e724:	10b84b04 	addi	r2,r2,-7892
    e728:	200b883a 	mov	r5,r4
    e72c:	11000017 	ldw	r4,0(r2)
    e730:	00160981 	jmpi	16098 <_free_r>

0000e734 <_malloc_r>:
    e734:	defff504 	addi	sp,sp,-44
    e738:	dc800315 	stw	r18,12(sp)
    e73c:	dfc00a15 	stw	ra,40(sp)
    e740:	df000915 	stw	fp,36(sp)
    e744:	ddc00815 	stw	r23,32(sp)
    e748:	dd800715 	stw	r22,28(sp)
    e74c:	dd400615 	stw	r21,24(sp)
    e750:	dd000515 	stw	r20,20(sp)
    e754:	dcc00415 	stw	r19,16(sp)
    e758:	dc400215 	stw	r17,8(sp)
    e75c:	dc000115 	stw	r16,4(sp)
    e760:	288002c4 	addi	r2,r5,11
    e764:	00c00584 	movi	r3,22
    e768:	2025883a 	mov	r18,r4
    e76c:	18807f2e 	bgeu	r3,r2,e96c <_malloc_r+0x238>
    e770:	047ffe04 	movi	r17,-8
    e774:	1462703a 	and	r17,r2,r17
    e778:	8800a316 	blt	r17,zero,ea08 <_malloc_r+0x2d4>
    e77c:	8940a236 	bltu	r17,r5,ea08 <_malloc_r+0x2d4>
    e780:	001f9140 	call	1f914 <__malloc_lock>
    e784:	00807dc4 	movi	r2,503
    e788:	1441e92e 	bgeu	r2,r17,ef30 <_malloc_r+0x7fc>
    e78c:	8804d27a 	srli	r2,r17,9
    e790:	1000a126 	beq	r2,zero,ea18 <_malloc_r+0x2e4>
    e794:	00c00104 	movi	r3,4
    e798:	18811e36 	bltu	r3,r2,ec14 <_malloc_r+0x4e0>
    e79c:	8804d1ba 	srli	r2,r17,6
    e7a0:	12000e44 	addi	r8,r2,57
    e7a4:	11c00e04 	addi	r7,r2,56
    e7a8:	4209883a 	add	r4,r8,r8
    e7ac:	04c000f4 	movhi	r19,3
    e7b0:	2109883a 	add	r4,r4,r4
    e7b4:	9cecea04 	addi	r19,r19,-19544
    e7b8:	2109883a 	add	r4,r4,r4
    e7bc:	9909883a 	add	r4,r19,r4
    e7c0:	24000117 	ldw	r16,4(r4)
    e7c4:	213ffe04 	addi	r4,r4,-8
    e7c8:	24009726 	beq	r4,r16,ea28 <_malloc_r+0x2f4>
    e7cc:	80800117 	ldw	r2,4(r16)
    e7d0:	01bfff04 	movi	r6,-4
    e7d4:	014003c4 	movi	r5,15
    e7d8:	1184703a 	and	r2,r2,r6
    e7dc:	1447c83a 	sub	r3,r2,r17
    e7e0:	28c00716 	blt	r5,r3,e800 <_malloc_r+0xcc>
    e7e4:	1800920e 	bge	r3,zero,ea30 <_malloc_r+0x2fc>
    e7e8:	84000317 	ldw	r16,12(r16)
    e7ec:	24008e26 	beq	r4,r16,ea28 <_malloc_r+0x2f4>
    e7f0:	80800117 	ldw	r2,4(r16)
    e7f4:	1184703a 	and	r2,r2,r6
    e7f8:	1447c83a 	sub	r3,r2,r17
    e7fc:	28fff90e 	bge	r5,r3,e7e4 <__alt_data_end+0xfc00e7e4>
    e800:	3809883a 	mov	r4,r7
    e804:	018000f4 	movhi	r6,3
    e808:	9c000417 	ldw	r16,16(r19)
    e80c:	31acea04 	addi	r6,r6,-19544
    e810:	32000204 	addi	r8,r6,8
    e814:	82013426 	beq	r16,r8,ece8 <_malloc_r+0x5b4>
    e818:	80c00117 	ldw	r3,4(r16)
    e81c:	00bfff04 	movi	r2,-4
    e820:	188e703a 	and	r7,r3,r2
    e824:	3c45c83a 	sub	r2,r7,r17
    e828:	00c003c4 	movi	r3,15
    e82c:	18811f16 	blt	r3,r2,ecac <_malloc_r+0x578>
    e830:	32000515 	stw	r8,20(r6)
    e834:	32000415 	stw	r8,16(r6)
    e838:	10007f0e 	bge	r2,zero,ea38 <_malloc_r+0x304>
    e83c:	00807fc4 	movi	r2,511
    e840:	11c0fd36 	bltu	r2,r7,ec38 <_malloc_r+0x504>
    e844:	3806d0fa 	srli	r3,r7,3
    e848:	01c00044 	movi	r7,1
    e84c:	30800117 	ldw	r2,4(r6)
    e850:	19400044 	addi	r5,r3,1
    e854:	294b883a 	add	r5,r5,r5
    e858:	1807d0ba 	srai	r3,r3,2
    e85c:	294b883a 	add	r5,r5,r5
    e860:	294b883a 	add	r5,r5,r5
    e864:	298b883a 	add	r5,r5,r6
    e868:	38c6983a 	sll	r3,r7,r3
    e86c:	29c00017 	ldw	r7,0(r5)
    e870:	2a7ffe04 	addi	r9,r5,-8
    e874:	1886b03a 	or	r3,r3,r2
    e878:	82400315 	stw	r9,12(r16)
    e87c:	81c00215 	stw	r7,8(r16)
    e880:	30c00115 	stw	r3,4(r6)
    e884:	2c000015 	stw	r16,0(r5)
    e888:	3c000315 	stw	r16,12(r7)
    e88c:	2005d0ba 	srai	r2,r4,2
    e890:	01400044 	movi	r5,1
    e894:	288a983a 	sll	r5,r5,r2
    e898:	19406f36 	bltu	r3,r5,ea58 <_malloc_r+0x324>
    e89c:	28c4703a 	and	r2,r5,r3
    e8a0:	10000a1e 	bne	r2,zero,e8cc <_malloc_r+0x198>
    e8a4:	00bfff04 	movi	r2,-4
    e8a8:	294b883a 	add	r5,r5,r5
    e8ac:	2088703a 	and	r4,r4,r2
    e8b0:	28c4703a 	and	r2,r5,r3
    e8b4:	21000104 	addi	r4,r4,4
    e8b8:	1000041e 	bne	r2,zero,e8cc <_malloc_r+0x198>
    e8bc:	294b883a 	add	r5,r5,r5
    e8c0:	28c4703a 	and	r2,r5,r3
    e8c4:	21000104 	addi	r4,r4,4
    e8c8:	103ffc26 	beq	r2,zero,e8bc <__alt_data_end+0xfc00e8bc>
    e8cc:	02bfff04 	movi	r10,-4
    e8d0:	024003c4 	movi	r9,15
    e8d4:	21800044 	addi	r6,r4,1
    e8d8:	318d883a 	add	r6,r6,r6
    e8dc:	318d883a 	add	r6,r6,r6
    e8e0:	318d883a 	add	r6,r6,r6
    e8e4:	998d883a 	add	r6,r19,r6
    e8e8:	333ffe04 	addi	r12,r6,-8
    e8ec:	2017883a 	mov	r11,r4
    e8f0:	31800104 	addi	r6,r6,4
    e8f4:	34000017 	ldw	r16,0(r6)
    e8f8:	31fffd04 	addi	r7,r6,-12
    e8fc:	81c0041e 	bne	r16,r7,e910 <_malloc_r+0x1dc>
    e900:	0000fb06 	br	ecf0 <_malloc_r+0x5bc>
    e904:	1801030e 	bge	r3,zero,ed14 <_malloc_r+0x5e0>
    e908:	84000317 	ldw	r16,12(r16)
    e90c:	81c0f826 	beq	r16,r7,ecf0 <_malloc_r+0x5bc>
    e910:	80800117 	ldw	r2,4(r16)
    e914:	1284703a 	and	r2,r2,r10
    e918:	1447c83a 	sub	r3,r2,r17
    e91c:	48fff90e 	bge	r9,r3,e904 <__alt_data_end+0xfc00e904>
    e920:	80800317 	ldw	r2,12(r16)
    e924:	81000217 	ldw	r4,8(r16)
    e928:	89400054 	ori	r5,r17,1
    e92c:	81400115 	stw	r5,4(r16)
    e930:	20800315 	stw	r2,12(r4)
    e934:	11000215 	stw	r4,8(r2)
    e938:	8463883a 	add	r17,r16,r17
    e93c:	9c400515 	stw	r17,20(r19)
    e940:	9c400415 	stw	r17,16(r19)
    e944:	18800054 	ori	r2,r3,1
    e948:	88800115 	stw	r2,4(r17)
    e94c:	8a000315 	stw	r8,12(r17)
    e950:	8a000215 	stw	r8,8(r17)
    e954:	88e3883a 	add	r17,r17,r3
    e958:	88c00015 	stw	r3,0(r17)
    e95c:	9009883a 	mov	r4,r18
    e960:	001f9380 	call	1f938 <__malloc_unlock>
    e964:	80800204 	addi	r2,r16,8
    e968:	00001b06 	br	e9d8 <_malloc_r+0x2a4>
    e96c:	04400404 	movi	r17,16
    e970:	89402536 	bltu	r17,r5,ea08 <_malloc_r+0x2d4>
    e974:	001f9140 	call	1f914 <__malloc_lock>
    e978:	00800184 	movi	r2,6
    e97c:	01000084 	movi	r4,2
    e980:	04c000f4 	movhi	r19,3
    e984:	1085883a 	add	r2,r2,r2
    e988:	9cecea04 	addi	r19,r19,-19544
    e98c:	1085883a 	add	r2,r2,r2
    e990:	9885883a 	add	r2,r19,r2
    e994:	14000117 	ldw	r16,4(r2)
    e998:	10fffe04 	addi	r3,r2,-8
    e99c:	80c0d926 	beq	r16,r3,ed04 <_malloc_r+0x5d0>
    e9a0:	80c00117 	ldw	r3,4(r16)
    e9a4:	81000317 	ldw	r4,12(r16)
    e9a8:	00bfff04 	movi	r2,-4
    e9ac:	1884703a 	and	r2,r3,r2
    e9b0:	81400217 	ldw	r5,8(r16)
    e9b4:	8085883a 	add	r2,r16,r2
    e9b8:	10c00117 	ldw	r3,4(r2)
    e9bc:	29000315 	stw	r4,12(r5)
    e9c0:	21400215 	stw	r5,8(r4)
    e9c4:	18c00054 	ori	r3,r3,1
    e9c8:	10c00115 	stw	r3,4(r2)
    e9cc:	9009883a 	mov	r4,r18
    e9d0:	001f9380 	call	1f938 <__malloc_unlock>
    e9d4:	80800204 	addi	r2,r16,8
    e9d8:	dfc00a17 	ldw	ra,40(sp)
    e9dc:	df000917 	ldw	fp,36(sp)
    e9e0:	ddc00817 	ldw	r23,32(sp)
    e9e4:	dd800717 	ldw	r22,28(sp)
    e9e8:	dd400617 	ldw	r21,24(sp)
    e9ec:	dd000517 	ldw	r20,20(sp)
    e9f0:	dcc00417 	ldw	r19,16(sp)
    e9f4:	dc800317 	ldw	r18,12(sp)
    e9f8:	dc400217 	ldw	r17,8(sp)
    e9fc:	dc000117 	ldw	r16,4(sp)
    ea00:	dec00b04 	addi	sp,sp,44
    ea04:	f800283a 	ret
    ea08:	00800304 	movi	r2,12
    ea0c:	90800015 	stw	r2,0(r18)
    ea10:	0005883a 	mov	r2,zero
    ea14:	003ff006 	br	e9d8 <__alt_data_end+0xfc00e9d8>
    ea18:	01002004 	movi	r4,128
    ea1c:	02001004 	movi	r8,64
    ea20:	01c00fc4 	movi	r7,63
    ea24:	003f6106 	br	e7ac <__alt_data_end+0xfc00e7ac>
    ea28:	4009883a 	mov	r4,r8
    ea2c:	003f7506 	br	e804 <__alt_data_end+0xfc00e804>
    ea30:	81000317 	ldw	r4,12(r16)
    ea34:	003fde06 	br	e9b0 <__alt_data_end+0xfc00e9b0>
    ea38:	81c5883a 	add	r2,r16,r7
    ea3c:	11400117 	ldw	r5,4(r2)
    ea40:	9009883a 	mov	r4,r18
    ea44:	29400054 	ori	r5,r5,1
    ea48:	11400115 	stw	r5,4(r2)
    ea4c:	001f9380 	call	1f938 <__malloc_unlock>
    ea50:	80800204 	addi	r2,r16,8
    ea54:	003fe006 	br	e9d8 <__alt_data_end+0xfc00e9d8>
    ea58:	9c000217 	ldw	r16,8(r19)
    ea5c:	00bfff04 	movi	r2,-4
    ea60:	85800117 	ldw	r22,4(r16)
    ea64:	b0ac703a 	and	r22,r22,r2
    ea68:	b4400336 	bltu	r22,r17,ea78 <_malloc_r+0x344>
    ea6c:	b445c83a 	sub	r2,r22,r17
    ea70:	00c003c4 	movi	r3,15
    ea74:	18805d16 	blt	r3,r2,ebec <_malloc_r+0x4b8>
    ea78:	05c000f4 	movhi	r23,3
    ea7c:	008000f4 	movhi	r2,3
    ea80:	1084e004 	addi	r2,r2,4992
    ea84:	bdf84c04 	addi	r23,r23,-7888
    ea88:	15400017 	ldw	r21,0(r2)
    ea8c:	b8c00017 	ldw	r3,0(r23)
    ea90:	00bfffc4 	movi	r2,-1
    ea94:	858d883a 	add	r6,r16,r22
    ea98:	8d6b883a 	add	r21,r17,r21
    ea9c:	1880ea26 	beq	r3,r2,ee48 <_malloc_r+0x714>
    eaa0:	ad4403c4 	addi	r21,r21,4111
    eaa4:	00bc0004 	movi	r2,-4096
    eaa8:	a8aa703a 	and	r21,r21,r2
    eaac:	a80b883a 	mov	r5,r21
    eab0:	9009883a 	mov	r4,r18
    eab4:	d9800015 	stw	r6,0(sp)
    eab8:	000f3100 	call	f310 <_sbrk_r>
    eabc:	1029883a 	mov	r20,r2
    eac0:	00bfffc4 	movi	r2,-1
    eac4:	d9800017 	ldw	r6,0(sp)
    eac8:	a080e826 	beq	r20,r2,ee6c <_malloc_r+0x738>
    eacc:	a180a636 	bltu	r20,r6,ed68 <_malloc_r+0x634>
    ead0:	070000f4 	movhi	fp,3
    ead4:	e7053804 	addi	fp,fp,5344
    ead8:	e0800017 	ldw	r2,0(fp)
    eadc:	a887883a 	add	r3,r21,r2
    eae0:	e0c00015 	stw	r3,0(fp)
    eae4:	3500e626 	beq	r6,r20,ee80 <_malloc_r+0x74c>
    eae8:	b9000017 	ldw	r4,0(r23)
    eaec:	00bfffc4 	movi	r2,-1
    eaf0:	2080ee26 	beq	r4,r2,eeac <_malloc_r+0x778>
    eaf4:	a185c83a 	sub	r2,r20,r6
    eaf8:	10c5883a 	add	r2,r2,r3
    eafc:	e0800015 	stw	r2,0(fp)
    eb00:	a0c001cc 	andi	r3,r20,7
    eb04:	1800bc26 	beq	r3,zero,edf8 <_malloc_r+0x6c4>
    eb08:	a0e9c83a 	sub	r20,r20,r3
    eb0c:	00840204 	movi	r2,4104
    eb10:	a5000204 	addi	r20,r20,8
    eb14:	10c7c83a 	sub	r3,r2,r3
    eb18:	a545883a 	add	r2,r20,r21
    eb1c:	1083ffcc 	andi	r2,r2,4095
    eb20:	18abc83a 	sub	r21,r3,r2
    eb24:	a80b883a 	mov	r5,r21
    eb28:	9009883a 	mov	r4,r18
    eb2c:	000f3100 	call	f310 <_sbrk_r>
    eb30:	00ffffc4 	movi	r3,-1
    eb34:	10c0e126 	beq	r2,r3,eebc <_malloc_r+0x788>
    eb38:	1505c83a 	sub	r2,r2,r20
    eb3c:	1545883a 	add	r2,r2,r21
    eb40:	10800054 	ori	r2,r2,1
    eb44:	e0c00017 	ldw	r3,0(fp)
    eb48:	9d000215 	stw	r20,8(r19)
    eb4c:	a0800115 	stw	r2,4(r20)
    eb50:	a8c7883a 	add	r3,r21,r3
    eb54:	e0c00015 	stw	r3,0(fp)
    eb58:	84c00e26 	beq	r16,r19,eb94 <_malloc_r+0x460>
    eb5c:	018003c4 	movi	r6,15
    eb60:	3580a72e 	bgeu	r6,r22,ee00 <_malloc_r+0x6cc>
    eb64:	81400117 	ldw	r5,4(r16)
    eb68:	013ffe04 	movi	r4,-8
    eb6c:	b0bffd04 	addi	r2,r22,-12
    eb70:	1104703a 	and	r2,r2,r4
    eb74:	2900004c 	andi	r4,r5,1
    eb78:	2088b03a 	or	r4,r4,r2
    eb7c:	81000115 	stw	r4,4(r16)
    eb80:	01400144 	movi	r5,5
    eb84:	8089883a 	add	r4,r16,r2
    eb88:	21400115 	stw	r5,4(r4)
    eb8c:	21400215 	stw	r5,8(r4)
    eb90:	3080cd36 	bltu	r6,r2,eec8 <_malloc_r+0x794>
    eb94:	008000f4 	movhi	r2,3
    eb98:	1084df04 	addi	r2,r2,4988
    eb9c:	11000017 	ldw	r4,0(r2)
    eba0:	20c0012e 	bgeu	r4,r3,eba8 <_malloc_r+0x474>
    eba4:	10c00015 	stw	r3,0(r2)
    eba8:	008000f4 	movhi	r2,3
    ebac:	1084de04 	addi	r2,r2,4984
    ebb0:	11000017 	ldw	r4,0(r2)
    ebb4:	9c000217 	ldw	r16,8(r19)
    ebb8:	20c0012e 	bgeu	r4,r3,ebc0 <_malloc_r+0x48c>
    ebbc:	10c00015 	stw	r3,0(r2)
    ebc0:	80c00117 	ldw	r3,4(r16)
    ebc4:	00bfff04 	movi	r2,-4
    ebc8:	1886703a 	and	r3,r3,r2
    ebcc:	1c45c83a 	sub	r2,r3,r17
    ebd0:	1c400236 	bltu	r3,r17,ebdc <_malloc_r+0x4a8>
    ebd4:	00c003c4 	movi	r3,15
    ebd8:	18800416 	blt	r3,r2,ebec <_malloc_r+0x4b8>
    ebdc:	9009883a 	mov	r4,r18
    ebe0:	001f9380 	call	1f938 <__malloc_unlock>
    ebe4:	0005883a 	mov	r2,zero
    ebe8:	003f7b06 	br	e9d8 <__alt_data_end+0xfc00e9d8>
    ebec:	88c00054 	ori	r3,r17,1
    ebf0:	80c00115 	stw	r3,4(r16)
    ebf4:	8463883a 	add	r17,r16,r17
    ebf8:	10800054 	ori	r2,r2,1
    ebfc:	9c400215 	stw	r17,8(r19)
    ec00:	88800115 	stw	r2,4(r17)
    ec04:	9009883a 	mov	r4,r18
    ec08:	001f9380 	call	1f938 <__malloc_unlock>
    ec0c:	80800204 	addi	r2,r16,8
    ec10:	003f7106 	br	e9d8 <__alt_data_end+0xfc00e9d8>
    ec14:	00c00504 	movi	r3,20
    ec18:	18804a2e 	bgeu	r3,r2,ed44 <_malloc_r+0x610>
    ec1c:	00c01504 	movi	r3,84
    ec20:	18806e36 	bltu	r3,r2,eddc <_malloc_r+0x6a8>
    ec24:	8804d33a 	srli	r2,r17,12
    ec28:	12001bc4 	addi	r8,r2,111
    ec2c:	11c01b84 	addi	r7,r2,110
    ec30:	4209883a 	add	r4,r8,r8
    ec34:	003edd06 	br	e7ac <__alt_data_end+0xfc00e7ac>
    ec38:	3804d27a 	srli	r2,r7,9
    ec3c:	00c00104 	movi	r3,4
    ec40:	1880442e 	bgeu	r3,r2,ed54 <_malloc_r+0x620>
    ec44:	00c00504 	movi	r3,20
    ec48:	18808136 	bltu	r3,r2,ee50 <_malloc_r+0x71c>
    ec4c:	11401704 	addi	r5,r2,92
    ec50:	10c016c4 	addi	r3,r2,91
    ec54:	294b883a 	add	r5,r5,r5
    ec58:	294b883a 	add	r5,r5,r5
    ec5c:	294b883a 	add	r5,r5,r5
    ec60:	994b883a 	add	r5,r19,r5
    ec64:	28800017 	ldw	r2,0(r5)
    ec68:	018000f4 	movhi	r6,3
    ec6c:	297ffe04 	addi	r5,r5,-8
    ec70:	31acea04 	addi	r6,r6,-19544
    ec74:	28806526 	beq	r5,r2,ee0c <_malloc_r+0x6d8>
    ec78:	01bfff04 	movi	r6,-4
    ec7c:	10c00117 	ldw	r3,4(r2)
    ec80:	1986703a 	and	r3,r3,r6
    ec84:	38c0022e 	bgeu	r7,r3,ec90 <_malloc_r+0x55c>
    ec88:	10800217 	ldw	r2,8(r2)
    ec8c:	28bffb1e 	bne	r5,r2,ec7c <__alt_data_end+0xfc00ec7c>
    ec90:	11400317 	ldw	r5,12(r2)
    ec94:	98c00117 	ldw	r3,4(r19)
    ec98:	81400315 	stw	r5,12(r16)
    ec9c:	80800215 	stw	r2,8(r16)
    eca0:	2c000215 	stw	r16,8(r5)
    eca4:	14000315 	stw	r16,12(r2)
    eca8:	003ef806 	br	e88c <__alt_data_end+0xfc00e88c>
    ecac:	88c00054 	ori	r3,r17,1
    ecb0:	80c00115 	stw	r3,4(r16)
    ecb4:	8463883a 	add	r17,r16,r17
    ecb8:	34400515 	stw	r17,20(r6)
    ecbc:	34400415 	stw	r17,16(r6)
    ecc0:	10c00054 	ori	r3,r2,1
    ecc4:	8a000315 	stw	r8,12(r17)
    ecc8:	8a000215 	stw	r8,8(r17)
    eccc:	88c00115 	stw	r3,4(r17)
    ecd0:	88a3883a 	add	r17,r17,r2
    ecd4:	88800015 	stw	r2,0(r17)
    ecd8:	9009883a 	mov	r4,r18
    ecdc:	001f9380 	call	1f938 <__malloc_unlock>
    ece0:	80800204 	addi	r2,r16,8
    ece4:	003f3c06 	br	e9d8 <__alt_data_end+0xfc00e9d8>
    ece8:	30c00117 	ldw	r3,4(r6)
    ecec:	003ee706 	br	e88c <__alt_data_end+0xfc00e88c>
    ecf0:	5ac00044 	addi	r11,r11,1
    ecf4:	588000cc 	andi	r2,r11,3
    ecf8:	31800204 	addi	r6,r6,8
    ecfc:	103efd1e 	bne	r2,zero,e8f4 <__alt_data_end+0xfc00e8f4>
    ed00:	00002406 	br	ed94 <_malloc_r+0x660>
    ed04:	14000317 	ldw	r16,12(r2)
    ed08:	143f251e 	bne	r2,r16,e9a0 <__alt_data_end+0xfc00e9a0>
    ed0c:	21000084 	addi	r4,r4,2
    ed10:	003ebc06 	br	e804 <__alt_data_end+0xfc00e804>
    ed14:	8085883a 	add	r2,r16,r2
    ed18:	10c00117 	ldw	r3,4(r2)
    ed1c:	81000317 	ldw	r4,12(r16)
    ed20:	81400217 	ldw	r5,8(r16)
    ed24:	18c00054 	ori	r3,r3,1
    ed28:	10c00115 	stw	r3,4(r2)
    ed2c:	29000315 	stw	r4,12(r5)
    ed30:	21400215 	stw	r5,8(r4)
    ed34:	9009883a 	mov	r4,r18
    ed38:	001f9380 	call	1f938 <__malloc_unlock>
    ed3c:	80800204 	addi	r2,r16,8
    ed40:	003f2506 	br	e9d8 <__alt_data_end+0xfc00e9d8>
    ed44:	12001704 	addi	r8,r2,92
    ed48:	11c016c4 	addi	r7,r2,91
    ed4c:	4209883a 	add	r4,r8,r8
    ed50:	003e9606 	br	e7ac <__alt_data_end+0xfc00e7ac>
    ed54:	3804d1ba 	srli	r2,r7,6
    ed58:	11400e44 	addi	r5,r2,57
    ed5c:	10c00e04 	addi	r3,r2,56
    ed60:	294b883a 	add	r5,r5,r5
    ed64:	003fbc06 	br	ec58 <__alt_data_end+0xfc00ec58>
    ed68:	84ff5926 	beq	r16,r19,ead0 <__alt_data_end+0xfc00ead0>
    ed6c:	008000f4 	movhi	r2,3
    ed70:	10acea04 	addi	r2,r2,-19544
    ed74:	14000217 	ldw	r16,8(r2)
    ed78:	00bfff04 	movi	r2,-4
    ed7c:	80c00117 	ldw	r3,4(r16)
    ed80:	1886703a 	and	r3,r3,r2
    ed84:	003f9106 	br	ebcc <__alt_data_end+0xfc00ebcc>
    ed88:	60800217 	ldw	r2,8(r12)
    ed8c:	213fffc4 	addi	r4,r4,-1
    ed90:	1300651e 	bne	r2,r12,ef28 <_malloc_r+0x7f4>
    ed94:	208000cc 	andi	r2,r4,3
    ed98:	633ffe04 	addi	r12,r12,-8
    ed9c:	103ffa1e 	bne	r2,zero,ed88 <__alt_data_end+0xfc00ed88>
    eda0:	98800117 	ldw	r2,4(r19)
    eda4:	0146303a 	nor	r3,zero,r5
    eda8:	1884703a 	and	r2,r3,r2
    edac:	98800115 	stw	r2,4(r19)
    edb0:	294b883a 	add	r5,r5,r5
    edb4:	117f2836 	bltu	r2,r5,ea58 <__alt_data_end+0xfc00ea58>
    edb8:	283f2726 	beq	r5,zero,ea58 <__alt_data_end+0xfc00ea58>
    edbc:	2886703a 	and	r3,r5,r2
    edc0:	5809883a 	mov	r4,r11
    edc4:	183ec31e 	bne	r3,zero,e8d4 <__alt_data_end+0xfc00e8d4>
    edc8:	294b883a 	add	r5,r5,r5
    edcc:	2886703a 	and	r3,r5,r2
    edd0:	21000104 	addi	r4,r4,4
    edd4:	183ffc26 	beq	r3,zero,edc8 <__alt_data_end+0xfc00edc8>
    edd8:	003ebe06 	br	e8d4 <__alt_data_end+0xfc00e8d4>
    eddc:	00c05504 	movi	r3,340
    ede0:	18801236 	bltu	r3,r2,ee2c <_malloc_r+0x6f8>
    ede4:	8804d3fa 	srli	r2,r17,15
    ede8:	12001e04 	addi	r8,r2,120
    edec:	11c01dc4 	addi	r7,r2,119
    edf0:	4209883a 	add	r4,r8,r8
    edf4:	003e6d06 	br	e7ac <__alt_data_end+0xfc00e7ac>
    edf8:	00c40004 	movi	r3,4096
    edfc:	003f4606 	br	eb18 <__alt_data_end+0xfc00eb18>
    ee00:	00800044 	movi	r2,1
    ee04:	a0800115 	stw	r2,4(r20)
    ee08:	003f7406 	br	ebdc <__alt_data_end+0xfc00ebdc>
    ee0c:	1805d0ba 	srai	r2,r3,2
    ee10:	01c00044 	movi	r7,1
    ee14:	30c00117 	ldw	r3,4(r6)
    ee18:	388e983a 	sll	r7,r7,r2
    ee1c:	2805883a 	mov	r2,r5
    ee20:	38c6b03a 	or	r3,r7,r3
    ee24:	30c00115 	stw	r3,4(r6)
    ee28:	003f9b06 	br	ec98 <__alt_data_end+0xfc00ec98>
    ee2c:	00c15504 	movi	r3,1364
    ee30:	18801a36 	bltu	r3,r2,ee9c <_malloc_r+0x768>
    ee34:	8804d4ba 	srli	r2,r17,18
    ee38:	12001f44 	addi	r8,r2,125
    ee3c:	11c01f04 	addi	r7,r2,124
    ee40:	4209883a 	add	r4,r8,r8
    ee44:	003e5906 	br	e7ac <__alt_data_end+0xfc00e7ac>
    ee48:	ad400404 	addi	r21,r21,16
    ee4c:	003f1706 	br	eaac <__alt_data_end+0xfc00eaac>
    ee50:	00c01504 	movi	r3,84
    ee54:	18802336 	bltu	r3,r2,eee4 <_malloc_r+0x7b0>
    ee58:	3804d33a 	srli	r2,r7,12
    ee5c:	11401bc4 	addi	r5,r2,111
    ee60:	10c01b84 	addi	r3,r2,110
    ee64:	294b883a 	add	r5,r5,r5
    ee68:	003f7b06 	br	ec58 <__alt_data_end+0xfc00ec58>
    ee6c:	9c000217 	ldw	r16,8(r19)
    ee70:	00bfff04 	movi	r2,-4
    ee74:	80c00117 	ldw	r3,4(r16)
    ee78:	1886703a 	and	r3,r3,r2
    ee7c:	003f5306 	br	ebcc <__alt_data_end+0xfc00ebcc>
    ee80:	3083ffcc 	andi	r2,r6,4095
    ee84:	103f181e 	bne	r2,zero,eae8 <__alt_data_end+0xfc00eae8>
    ee88:	99000217 	ldw	r4,8(r19)
    ee8c:	b545883a 	add	r2,r22,r21
    ee90:	10800054 	ori	r2,r2,1
    ee94:	20800115 	stw	r2,4(r4)
    ee98:	003f3e06 	br	eb94 <__alt_data_end+0xfc00eb94>
    ee9c:	01003f84 	movi	r4,254
    eea0:	02001fc4 	movi	r8,127
    eea4:	01c01f84 	movi	r7,126
    eea8:	003e4006 	br	e7ac <__alt_data_end+0xfc00e7ac>
    eeac:	008000f4 	movhi	r2,3
    eeb0:	10b84c04 	addi	r2,r2,-7888
    eeb4:	15000015 	stw	r20,0(r2)
    eeb8:	003f1106 	br	eb00 <__alt_data_end+0xfc00eb00>
    eebc:	00800044 	movi	r2,1
    eec0:	002b883a 	mov	r21,zero
    eec4:	003f1f06 	br	eb44 <__alt_data_end+0xfc00eb44>
    eec8:	81400204 	addi	r5,r16,8
    eecc:	9009883a 	mov	r4,r18
    eed0:	00160980 	call	16098 <_free_r>
    eed4:	008000f4 	movhi	r2,3
    eed8:	10853804 	addi	r2,r2,5344
    eedc:	10c00017 	ldw	r3,0(r2)
    eee0:	003f2c06 	br	eb94 <__alt_data_end+0xfc00eb94>
    eee4:	00c05504 	movi	r3,340
    eee8:	18800536 	bltu	r3,r2,ef00 <_malloc_r+0x7cc>
    eeec:	3804d3fa 	srli	r2,r7,15
    eef0:	11401e04 	addi	r5,r2,120
    eef4:	10c01dc4 	addi	r3,r2,119
    eef8:	294b883a 	add	r5,r5,r5
    eefc:	003f5606 	br	ec58 <__alt_data_end+0xfc00ec58>
    ef00:	00c15504 	movi	r3,1364
    ef04:	18800536 	bltu	r3,r2,ef1c <_malloc_r+0x7e8>
    ef08:	3804d4ba 	srli	r2,r7,18
    ef0c:	11401f44 	addi	r5,r2,125
    ef10:	10c01f04 	addi	r3,r2,124
    ef14:	294b883a 	add	r5,r5,r5
    ef18:	003f4f06 	br	ec58 <__alt_data_end+0xfc00ec58>
    ef1c:	01403f84 	movi	r5,254
    ef20:	00c01f84 	movi	r3,126
    ef24:	003f4c06 	br	ec58 <__alt_data_end+0xfc00ec58>
    ef28:	98800117 	ldw	r2,4(r19)
    ef2c:	003fa006 	br	edb0 <__alt_data_end+0xfc00edb0>
    ef30:	8808d0fa 	srli	r4,r17,3
    ef34:	20800044 	addi	r2,r4,1
    ef38:	1085883a 	add	r2,r2,r2
    ef3c:	003e9006 	br	e980 <__alt_data_end+0xfc00e980>

0000ef40 <memcpy>:
    ef40:	defffd04 	addi	sp,sp,-12
    ef44:	dfc00215 	stw	ra,8(sp)
    ef48:	dc400115 	stw	r17,4(sp)
    ef4c:	dc000015 	stw	r16,0(sp)
    ef50:	00c003c4 	movi	r3,15
    ef54:	2005883a 	mov	r2,r4
    ef58:	1980452e 	bgeu	r3,r6,f070 <memcpy+0x130>
    ef5c:	2906b03a 	or	r3,r5,r4
    ef60:	18c000cc 	andi	r3,r3,3
    ef64:	1800441e 	bne	r3,zero,f078 <memcpy+0x138>
    ef68:	347ffc04 	addi	r17,r6,-16
    ef6c:	8822d13a 	srli	r17,r17,4
    ef70:	28c00104 	addi	r3,r5,4
    ef74:	23400104 	addi	r13,r4,4
    ef78:	8820913a 	slli	r16,r17,4
    ef7c:	2b000204 	addi	r12,r5,8
    ef80:	22c00204 	addi	r11,r4,8
    ef84:	84000504 	addi	r16,r16,20
    ef88:	2a800304 	addi	r10,r5,12
    ef8c:	22400304 	addi	r9,r4,12
    ef90:	2c21883a 	add	r16,r5,r16
    ef94:	2811883a 	mov	r8,r5
    ef98:	200f883a 	mov	r7,r4
    ef9c:	41000017 	ldw	r4,0(r8)
    efa0:	1fc00017 	ldw	ra,0(r3)
    efa4:	63c00017 	ldw	r15,0(r12)
    efa8:	39000015 	stw	r4,0(r7)
    efac:	53800017 	ldw	r14,0(r10)
    efb0:	6fc00015 	stw	ra,0(r13)
    efb4:	5bc00015 	stw	r15,0(r11)
    efb8:	4b800015 	stw	r14,0(r9)
    efbc:	18c00404 	addi	r3,r3,16
    efc0:	39c00404 	addi	r7,r7,16
    efc4:	42000404 	addi	r8,r8,16
    efc8:	6b400404 	addi	r13,r13,16
    efcc:	63000404 	addi	r12,r12,16
    efd0:	5ac00404 	addi	r11,r11,16
    efd4:	52800404 	addi	r10,r10,16
    efd8:	4a400404 	addi	r9,r9,16
    efdc:	1c3fef1e 	bne	r3,r16,ef9c <__alt_data_end+0xfc00ef9c>
    efe0:	89c00044 	addi	r7,r17,1
    efe4:	380e913a 	slli	r7,r7,4
    efe8:	310003cc 	andi	r4,r6,15
    efec:	02c000c4 	movi	r11,3
    eff0:	11c7883a 	add	r3,r2,r7
    eff4:	29cb883a 	add	r5,r5,r7
    eff8:	5900212e 	bgeu	r11,r4,f080 <memcpy+0x140>
    effc:	1813883a 	mov	r9,r3
    f000:	2811883a 	mov	r8,r5
    f004:	200f883a 	mov	r7,r4
    f008:	42800017 	ldw	r10,0(r8)
    f00c:	4a400104 	addi	r9,r9,4
    f010:	39ffff04 	addi	r7,r7,-4
    f014:	4abfff15 	stw	r10,-4(r9)
    f018:	42000104 	addi	r8,r8,4
    f01c:	59fffa36 	bltu	r11,r7,f008 <__alt_data_end+0xfc00f008>
    f020:	213fff04 	addi	r4,r4,-4
    f024:	2008d0ba 	srli	r4,r4,2
    f028:	318000cc 	andi	r6,r6,3
    f02c:	21000044 	addi	r4,r4,1
    f030:	2109883a 	add	r4,r4,r4
    f034:	2109883a 	add	r4,r4,r4
    f038:	1907883a 	add	r3,r3,r4
    f03c:	290b883a 	add	r5,r5,r4
    f040:	30000626 	beq	r6,zero,f05c <memcpy+0x11c>
    f044:	198d883a 	add	r6,r3,r6
    f048:	29c00003 	ldbu	r7,0(r5)
    f04c:	18c00044 	addi	r3,r3,1
    f050:	29400044 	addi	r5,r5,1
    f054:	19ffffc5 	stb	r7,-1(r3)
    f058:	19bffb1e 	bne	r3,r6,f048 <__alt_data_end+0xfc00f048>
    f05c:	dfc00217 	ldw	ra,8(sp)
    f060:	dc400117 	ldw	r17,4(sp)
    f064:	dc000017 	ldw	r16,0(sp)
    f068:	dec00304 	addi	sp,sp,12
    f06c:	f800283a 	ret
    f070:	2007883a 	mov	r3,r4
    f074:	003ff206 	br	f040 <__alt_data_end+0xfc00f040>
    f078:	2007883a 	mov	r3,r4
    f07c:	003ff106 	br	f044 <__alt_data_end+0xfc00f044>
    f080:	200d883a 	mov	r6,r4
    f084:	003fee06 	br	f040 <__alt_data_end+0xfc00f040>

0000f088 <memset>:
    f088:	20c000cc 	andi	r3,r4,3
    f08c:	2005883a 	mov	r2,r4
    f090:	18004426 	beq	r3,zero,f1a4 <memset+0x11c>
    f094:	31ffffc4 	addi	r7,r6,-1
    f098:	30004026 	beq	r6,zero,f19c <memset+0x114>
    f09c:	2813883a 	mov	r9,r5
    f0a0:	200d883a 	mov	r6,r4
    f0a4:	2007883a 	mov	r3,r4
    f0a8:	00000406 	br	f0bc <memset+0x34>
    f0ac:	3a3fffc4 	addi	r8,r7,-1
    f0b0:	31800044 	addi	r6,r6,1
    f0b4:	38003926 	beq	r7,zero,f19c <memset+0x114>
    f0b8:	400f883a 	mov	r7,r8
    f0bc:	18c00044 	addi	r3,r3,1
    f0c0:	32400005 	stb	r9,0(r6)
    f0c4:	1a0000cc 	andi	r8,r3,3
    f0c8:	403ff81e 	bne	r8,zero,f0ac <__alt_data_end+0xfc00f0ac>
    f0cc:	010000c4 	movi	r4,3
    f0d0:	21c02d2e 	bgeu	r4,r7,f188 <memset+0x100>
    f0d4:	29003fcc 	andi	r4,r5,255
    f0d8:	200c923a 	slli	r6,r4,8
    f0dc:	3108b03a 	or	r4,r6,r4
    f0e0:	200c943a 	slli	r6,r4,16
    f0e4:	218cb03a 	or	r6,r4,r6
    f0e8:	010003c4 	movi	r4,15
    f0ec:	21c0182e 	bgeu	r4,r7,f150 <memset+0xc8>
    f0f0:	3b3ffc04 	addi	r12,r7,-16
    f0f4:	6018d13a 	srli	r12,r12,4
    f0f8:	1a000104 	addi	r8,r3,4
    f0fc:	1ac00204 	addi	r11,r3,8
    f100:	6008913a 	slli	r4,r12,4
    f104:	1a800304 	addi	r10,r3,12
    f108:	1813883a 	mov	r9,r3
    f10c:	21000504 	addi	r4,r4,20
    f110:	1909883a 	add	r4,r3,r4
    f114:	49800015 	stw	r6,0(r9)
    f118:	41800015 	stw	r6,0(r8)
    f11c:	59800015 	stw	r6,0(r11)
    f120:	51800015 	stw	r6,0(r10)
    f124:	42000404 	addi	r8,r8,16
    f128:	4a400404 	addi	r9,r9,16
    f12c:	5ac00404 	addi	r11,r11,16
    f130:	52800404 	addi	r10,r10,16
    f134:	413ff71e 	bne	r8,r4,f114 <__alt_data_end+0xfc00f114>
    f138:	63000044 	addi	r12,r12,1
    f13c:	6018913a 	slli	r12,r12,4
    f140:	39c003cc 	andi	r7,r7,15
    f144:	010000c4 	movi	r4,3
    f148:	1b07883a 	add	r3,r3,r12
    f14c:	21c00e2e 	bgeu	r4,r7,f188 <memset+0x100>
    f150:	1813883a 	mov	r9,r3
    f154:	3811883a 	mov	r8,r7
    f158:	010000c4 	movi	r4,3
    f15c:	49800015 	stw	r6,0(r9)
    f160:	423fff04 	addi	r8,r8,-4
    f164:	4a400104 	addi	r9,r9,4
    f168:	223ffc36 	bltu	r4,r8,f15c <__alt_data_end+0xfc00f15c>
    f16c:	393fff04 	addi	r4,r7,-4
    f170:	2008d0ba 	srli	r4,r4,2
    f174:	39c000cc 	andi	r7,r7,3
    f178:	21000044 	addi	r4,r4,1
    f17c:	2109883a 	add	r4,r4,r4
    f180:	2109883a 	add	r4,r4,r4
    f184:	1907883a 	add	r3,r3,r4
    f188:	38000526 	beq	r7,zero,f1a0 <memset+0x118>
    f18c:	19cf883a 	add	r7,r3,r7
    f190:	19400005 	stb	r5,0(r3)
    f194:	18c00044 	addi	r3,r3,1
    f198:	38fffd1e 	bne	r7,r3,f190 <__alt_data_end+0xfc00f190>
    f19c:	f800283a 	ret
    f1a0:	f800283a 	ret
    f1a4:	2007883a 	mov	r3,r4
    f1a8:	300f883a 	mov	r7,r6
    f1ac:	003fc706 	br	f0cc <__alt_data_end+0xfc00f0cc>

0000f1b0 <_printf_r>:
    f1b0:	defffd04 	addi	sp,sp,-12
    f1b4:	2805883a 	mov	r2,r5
    f1b8:	dfc00015 	stw	ra,0(sp)
    f1bc:	d9800115 	stw	r6,4(sp)
    f1c0:	d9c00215 	stw	r7,8(sp)
    f1c4:	21400217 	ldw	r5,8(r4)
    f1c8:	d9c00104 	addi	r7,sp,4
    f1cc:	100d883a 	mov	r6,r2
    f1d0:	0011b640 	call	11b64 <___vfprintf_internal_r>
    f1d4:	dfc00017 	ldw	ra,0(sp)
    f1d8:	dec00304 	addi	sp,sp,12
    f1dc:	f800283a 	ret

0000f1e0 <printf>:
    f1e0:	defffc04 	addi	sp,sp,-16
    f1e4:	dfc00015 	stw	ra,0(sp)
    f1e8:	d9400115 	stw	r5,4(sp)
    f1ec:	d9800215 	stw	r6,8(sp)
    f1f0:	d9c00315 	stw	r7,12(sp)
    f1f4:	008000f4 	movhi	r2,3
    f1f8:	10b84b04 	addi	r2,r2,-7892
    f1fc:	10800017 	ldw	r2,0(r2)
    f200:	200b883a 	mov	r5,r4
    f204:	d9800104 	addi	r6,sp,4
    f208:	11000217 	ldw	r4,8(r2)
    f20c:	0013e400 	call	13e40 <__vfprintf_internal>
    f210:	dfc00017 	ldw	ra,0(sp)
    f214:	dec00404 	addi	sp,sp,16
    f218:	f800283a 	ret

0000f21c <_putchar_r>:
    f21c:	21800217 	ldw	r6,8(r4)
    f220:	0017f881 	jmpi	17f88 <_putc_r>

0000f224 <putchar>:
    f224:	008000f4 	movhi	r2,3
    f228:	10b84b04 	addi	r2,r2,-7892
    f22c:	200b883a 	mov	r5,r4
    f230:	11000017 	ldw	r4,0(r2)
    f234:	21800217 	ldw	r6,8(r4)
    f238:	0017f881 	jmpi	17f88 <_putc_r>

0000f23c <_puts_r>:
    f23c:	defff604 	addi	sp,sp,-40
    f240:	dc000715 	stw	r16,28(sp)
    f244:	2021883a 	mov	r16,r4
    f248:	2809883a 	mov	r4,r5
    f24c:	dc400815 	stw	r17,32(sp)
    f250:	dfc00915 	stw	ra,36(sp)
    f254:	2823883a 	mov	r17,r5
    f258:	000f8080 	call	f808 <strlen>
    f25c:	10c00044 	addi	r3,r2,1
    f260:	d8800115 	stw	r2,4(sp)
    f264:	008000f4 	movhi	r2,3
    f268:	10ab4704 	addi	r2,r2,-21220
    f26c:	d8800215 	stw	r2,8(sp)
    f270:	00800044 	movi	r2,1
    f274:	d8800315 	stw	r2,12(sp)
    f278:	00800084 	movi	r2,2
    f27c:	dc400015 	stw	r17,0(sp)
    f280:	d8c00615 	stw	r3,24(sp)
    f284:	dec00415 	stw	sp,16(sp)
    f288:	d8800515 	stw	r2,20(sp)
    f28c:	80000226 	beq	r16,zero,f298 <_puts_r+0x5c>
    f290:	80800e17 	ldw	r2,56(r16)
    f294:	10001426 	beq	r2,zero,f2e8 <_puts_r+0xac>
    f298:	81400217 	ldw	r5,8(r16)
    f29c:	2880030b 	ldhu	r2,12(r5)
    f2a0:	10c8000c 	andi	r3,r2,8192
    f2a4:	1800061e 	bne	r3,zero,f2c0 <_puts_r+0x84>
    f2a8:	29001917 	ldw	r4,100(r5)
    f2ac:	00f7ffc4 	movi	r3,-8193
    f2b0:	10880014 	ori	r2,r2,8192
    f2b4:	20c6703a 	and	r3,r4,r3
    f2b8:	2880030d 	sth	r2,12(r5)
    f2bc:	28c01915 	stw	r3,100(r5)
    f2c0:	d9800404 	addi	r6,sp,16
    f2c4:	8009883a 	mov	r4,r16
    f2c8:	00163a80 	call	163a8 <__sfvwrite_r>
    f2cc:	1000091e 	bne	r2,zero,f2f4 <_puts_r+0xb8>
    f2d0:	00800284 	movi	r2,10
    f2d4:	dfc00917 	ldw	ra,36(sp)
    f2d8:	dc400817 	ldw	r17,32(sp)
    f2dc:	dc000717 	ldw	r16,28(sp)
    f2e0:	dec00a04 	addi	sp,sp,40
    f2e4:	f800283a 	ret
    f2e8:	8009883a 	mov	r4,r16
    f2ec:	0015f240 	call	15f24 <__sinit>
    f2f0:	003fe906 	br	f298 <__alt_data_end+0xfc00f298>
    f2f4:	00bfffc4 	movi	r2,-1
    f2f8:	003ff606 	br	f2d4 <__alt_data_end+0xfc00f2d4>

0000f2fc <puts>:
    f2fc:	008000f4 	movhi	r2,3
    f300:	10b84b04 	addi	r2,r2,-7892
    f304:	200b883a 	mov	r5,r4
    f308:	11000017 	ldw	r4,0(r2)
    f30c:	000f23c1 	jmpi	f23c <_puts_r>

0000f310 <_sbrk_r>:
    f310:	defffd04 	addi	sp,sp,-12
    f314:	dc000015 	stw	r16,0(sp)
    f318:	040000f4 	movhi	r16,3
    f31c:	dc400115 	stw	r17,4(sp)
    f320:	8404e104 	addi	r16,r16,4996
    f324:	2023883a 	mov	r17,r4
    f328:	2809883a 	mov	r4,r5
    f32c:	dfc00215 	stw	ra,8(sp)
    f330:	80000015 	stw	zero,0(r16)
    f334:	001fb200 	call	1fb20 <sbrk>
    f338:	00ffffc4 	movi	r3,-1
    f33c:	10c00526 	beq	r2,r3,f354 <_sbrk_r+0x44>
    f340:	dfc00217 	ldw	ra,8(sp)
    f344:	dc400117 	ldw	r17,4(sp)
    f348:	dc000017 	ldw	r16,0(sp)
    f34c:	dec00304 	addi	sp,sp,12
    f350:	f800283a 	ret
    f354:	80c00017 	ldw	r3,0(r16)
    f358:	183ff926 	beq	r3,zero,f340 <__alt_data_end+0xfc00f340>
    f35c:	88c00015 	stw	r3,0(r17)
    f360:	003ff706 	br	f340 <__alt_data_end+0xfc00f340>

0000f364 <_init_signal_r>:
    f364:	2080b717 	ldw	r2,732(r4)
    f368:	10000226 	beq	r2,zero,f374 <_init_signal_r+0x10>
    f36c:	0005883a 	mov	r2,zero
    f370:	f800283a 	ret
    f374:	defffe04 	addi	sp,sp,-8
    f378:	01402004 	movi	r5,128
    f37c:	dc000015 	stw	r16,0(sp)
    f380:	dfc00115 	stw	ra,4(sp)
    f384:	2021883a 	mov	r16,r4
    f388:	000e7340 	call	e734 <_malloc_r>
    f38c:	8080b715 	stw	r2,732(r16)
    f390:	10000d26 	beq	r2,zero,f3c8 <_init_signal_r+0x64>
    f394:	0007883a 	mov	r3,zero
    f398:	01002004 	movi	r4,128
    f39c:	00000106 	br	f3a4 <_init_signal_r+0x40>
    f3a0:	8080b717 	ldw	r2,732(r16)
    f3a4:	10c5883a 	add	r2,r2,r3
    f3a8:	10000015 	stw	zero,0(r2)
    f3ac:	18c00104 	addi	r3,r3,4
    f3b0:	193ffb1e 	bne	r3,r4,f3a0 <__alt_data_end+0xfc00f3a0>
    f3b4:	0005883a 	mov	r2,zero
    f3b8:	dfc00117 	ldw	ra,4(sp)
    f3bc:	dc000017 	ldw	r16,0(sp)
    f3c0:	dec00204 	addi	sp,sp,8
    f3c4:	f800283a 	ret
    f3c8:	00bfffc4 	movi	r2,-1
    f3cc:	003ffa06 	br	f3b8 <__alt_data_end+0xfc00f3b8>

0000f3d0 <_signal_r>:
    f3d0:	00c007c4 	movi	r3,31
    f3d4:	19401536 	bltu	r3,r5,f42c <_signal_r+0x5c>
    f3d8:	2080b717 	ldw	r2,732(r4)
    f3dc:	defffc04 	addi	sp,sp,-16
    f3e0:	dc800215 	stw	r18,8(sp)
    f3e4:	dc400115 	stw	r17,4(sp)
    f3e8:	dc000015 	stw	r16,0(sp)
    f3ec:	dfc00315 	stw	ra,12(sp)
    f3f0:	3023883a 	mov	r17,r6
    f3f4:	2021883a 	mov	r16,r4
    f3f8:	2825883a 	mov	r18,r5
    f3fc:	10000f26 	beq	r2,zero,f43c <_signal_r+0x6c>
    f400:	948b883a 	add	r5,r18,r18
    f404:	294b883a 	add	r5,r5,r5
    f408:	114b883a 	add	r5,r2,r5
    f40c:	28800017 	ldw	r2,0(r5)
    f410:	2c400015 	stw	r17,0(r5)
    f414:	dfc00317 	ldw	ra,12(sp)
    f418:	dc800217 	ldw	r18,8(sp)
    f41c:	dc400117 	ldw	r17,4(sp)
    f420:	dc000017 	ldw	r16,0(sp)
    f424:	dec00404 	addi	sp,sp,16
    f428:	f800283a 	ret
    f42c:	00c00584 	movi	r3,22
    f430:	20c00015 	stw	r3,0(r4)
    f434:	00bfffc4 	movi	r2,-1
    f438:	f800283a 	ret
    f43c:	000f3640 	call	f364 <_init_signal_r>
    f440:	1000021e 	bne	r2,zero,f44c <_signal_r+0x7c>
    f444:	8080b717 	ldw	r2,732(r16)
    f448:	003fed06 	br	f400 <__alt_data_end+0xfc00f400>
    f44c:	00bfffc4 	movi	r2,-1
    f450:	003ff006 	br	f414 <__alt_data_end+0xfc00f414>

0000f454 <_raise_r>:
    f454:	008007c4 	movi	r2,31
    f458:	11402936 	bltu	r2,r5,f500 <_raise_r+0xac>
    f45c:	20c0b717 	ldw	r3,732(r4)
    f460:	defffd04 	addi	sp,sp,-12
    f464:	dc400115 	stw	r17,4(sp)
    f468:	dc000015 	stw	r16,0(sp)
    f46c:	dfc00215 	stw	ra,8(sp)
    f470:	2021883a 	mov	r16,r4
    f474:	2823883a 	mov	r17,r5
    f478:	18001726 	beq	r3,zero,f4d8 <_raise_r+0x84>
    f47c:	2945883a 	add	r2,r5,r5
    f480:	1085883a 	add	r2,r2,r2
    f484:	1887883a 	add	r3,r3,r2
    f488:	19800017 	ldw	r6,0(r3)
    f48c:	30001226 	beq	r6,zero,f4d8 <_raise_r+0x84>
    f490:	00800044 	movi	r2,1
    f494:	30800e26 	beq	r6,r2,f4d0 <_raise_r+0x7c>
    f498:	013fffc4 	movi	r4,-1
    f49c:	31000926 	beq	r6,r4,f4c4 <_raise_r+0x70>
    f4a0:	18000015 	stw	zero,0(r3)
    f4a4:	2809883a 	mov	r4,r5
    f4a8:	303ee83a 	callr	r6
    f4ac:	0005883a 	mov	r2,zero
    f4b0:	dfc00217 	ldw	ra,8(sp)
    f4b4:	dc400117 	ldw	r17,4(sp)
    f4b8:	dc000017 	ldw	r16,0(sp)
    f4bc:	dec00304 	addi	sp,sp,12
    f4c0:	f800283a 	ret
    f4c4:	00c00584 	movi	r3,22
    f4c8:	80c00015 	stw	r3,0(r16)
    f4cc:	003ff806 	br	f4b0 <__alt_data_end+0xfc00f4b0>
    f4d0:	0005883a 	mov	r2,zero
    f4d4:	003ff606 	br	f4b0 <__alt_data_end+0xfc00f4b0>
    f4d8:	8009883a 	mov	r4,r16
    f4dc:	000f6640 	call	f664 <_getpid_r>
    f4e0:	880d883a 	mov	r6,r17
    f4e4:	100b883a 	mov	r5,r2
    f4e8:	8009883a 	mov	r4,r16
    f4ec:	dfc00217 	ldw	ra,8(sp)
    f4f0:	dc400117 	ldw	r17,4(sp)
    f4f4:	dc000017 	ldw	r16,0(sp)
    f4f8:	dec00304 	addi	sp,sp,12
    f4fc:	000f6081 	jmpi	f608 <_kill_r>
    f500:	00800584 	movi	r2,22
    f504:	20800015 	stw	r2,0(r4)
    f508:	00bfffc4 	movi	r2,-1
    f50c:	f800283a 	ret

0000f510 <__sigtramp_r>:
    f510:	008007c4 	movi	r2,31
    f514:	11402436 	bltu	r2,r5,f5a8 <__sigtramp_r+0x98>
    f518:	20c0b717 	ldw	r3,732(r4)
    f51c:	defffd04 	addi	sp,sp,-12
    f520:	dc400115 	stw	r17,4(sp)
    f524:	dc000015 	stw	r16,0(sp)
    f528:	dfc00215 	stw	ra,8(sp)
    f52c:	2021883a 	mov	r16,r4
    f530:	2823883a 	mov	r17,r5
    f534:	18001826 	beq	r3,zero,f598 <__sigtramp_r+0x88>
    f538:	8c45883a 	add	r2,r17,r17
    f53c:	1085883a 	add	r2,r2,r2
    f540:	1885883a 	add	r2,r3,r2
    f544:	10c00017 	ldw	r3,0(r2)
    f548:	18001126 	beq	r3,zero,f590 <__sigtramp_r+0x80>
    f54c:	013fffc4 	movi	r4,-1
    f550:	19000d26 	beq	r3,r4,f588 <__sigtramp_r+0x78>
    f554:	01000044 	movi	r4,1
    f558:	19000926 	beq	r3,r4,f580 <__sigtramp_r+0x70>
    f55c:	10000015 	stw	zero,0(r2)
    f560:	8809883a 	mov	r4,r17
    f564:	183ee83a 	callr	r3
    f568:	0005883a 	mov	r2,zero
    f56c:	dfc00217 	ldw	ra,8(sp)
    f570:	dc400117 	ldw	r17,4(sp)
    f574:	dc000017 	ldw	r16,0(sp)
    f578:	dec00304 	addi	sp,sp,12
    f57c:	f800283a 	ret
    f580:	008000c4 	movi	r2,3
    f584:	003ff906 	br	f56c <__alt_data_end+0xfc00f56c>
    f588:	00800084 	movi	r2,2
    f58c:	003ff706 	br	f56c <__alt_data_end+0xfc00f56c>
    f590:	00800044 	movi	r2,1
    f594:	003ff506 	br	f56c <__alt_data_end+0xfc00f56c>
    f598:	000f3640 	call	f364 <_init_signal_r>
    f59c:	1000041e 	bne	r2,zero,f5b0 <__sigtramp_r+0xa0>
    f5a0:	80c0b717 	ldw	r3,732(r16)
    f5a4:	003fe406 	br	f538 <__alt_data_end+0xfc00f538>
    f5a8:	00bfffc4 	movi	r2,-1
    f5ac:	f800283a 	ret
    f5b0:	00bfffc4 	movi	r2,-1
    f5b4:	003fed06 	br	f56c <__alt_data_end+0xfc00f56c>

0000f5b8 <raise>:
    f5b8:	008000f4 	movhi	r2,3
    f5bc:	10b84b04 	addi	r2,r2,-7892
    f5c0:	200b883a 	mov	r5,r4
    f5c4:	11000017 	ldw	r4,0(r2)
    f5c8:	000f4541 	jmpi	f454 <_raise_r>

0000f5cc <signal>:
    f5cc:	008000f4 	movhi	r2,3
    f5d0:	10b84b04 	addi	r2,r2,-7892
    f5d4:	280d883a 	mov	r6,r5
    f5d8:	200b883a 	mov	r5,r4
    f5dc:	11000017 	ldw	r4,0(r2)
    f5e0:	000f3d01 	jmpi	f3d0 <_signal_r>

0000f5e4 <_init_signal>:
    f5e4:	008000f4 	movhi	r2,3
    f5e8:	10b84b04 	addi	r2,r2,-7892
    f5ec:	11000017 	ldw	r4,0(r2)
    f5f0:	000f3641 	jmpi	f364 <_init_signal_r>

0000f5f4 <__sigtramp>:
    f5f4:	008000f4 	movhi	r2,3
    f5f8:	10b84b04 	addi	r2,r2,-7892
    f5fc:	200b883a 	mov	r5,r4
    f600:	11000017 	ldw	r4,0(r2)
    f604:	000f5101 	jmpi	f510 <__sigtramp_r>

0000f608 <_kill_r>:
    f608:	defffd04 	addi	sp,sp,-12
    f60c:	2805883a 	mov	r2,r5
    f610:	dc000015 	stw	r16,0(sp)
    f614:	040000f4 	movhi	r16,3
    f618:	dc400115 	stw	r17,4(sp)
    f61c:	8404e104 	addi	r16,r16,4996
    f620:	2023883a 	mov	r17,r4
    f624:	300b883a 	mov	r5,r6
    f628:	1009883a 	mov	r4,r2
    f62c:	dfc00215 	stw	ra,8(sp)
    f630:	80000015 	stw	zero,0(r16)
    f634:	001f5640 	call	1f564 <kill>
    f638:	00ffffc4 	movi	r3,-1
    f63c:	10c00526 	beq	r2,r3,f654 <_kill_r+0x4c>
    f640:	dfc00217 	ldw	ra,8(sp)
    f644:	dc400117 	ldw	r17,4(sp)
    f648:	dc000017 	ldw	r16,0(sp)
    f64c:	dec00304 	addi	sp,sp,12
    f650:	f800283a 	ret
    f654:	80c00017 	ldw	r3,0(r16)
    f658:	183ff926 	beq	r3,zero,f640 <__alt_data_end+0xfc00f640>
    f65c:	88c00015 	stw	r3,0(r17)
    f660:	003ff706 	br	f640 <__alt_data_end+0xfc00f640>

0000f664 <_getpid_r>:
    f664:	001f4201 	jmpi	1f420 <getpid>

0000f668 <_sprintf_r>:
    f668:	deffe404 	addi	sp,sp,-112
    f66c:	2807883a 	mov	r3,r5
    f670:	dfc01a15 	stw	ra,104(sp)
    f674:	d9c01b15 	stw	r7,108(sp)
    f678:	00a00034 	movhi	r2,32768
    f67c:	10bfffc4 	addi	r2,r2,-1
    f680:	02008204 	movi	r8,520
    f684:	d8800215 	stw	r2,8(sp)
    f688:	d8800515 	stw	r2,20(sp)
    f68c:	d9c01b04 	addi	r7,sp,108
    f690:	d80b883a 	mov	r5,sp
    f694:	00bfffc4 	movi	r2,-1
    f698:	d8c00015 	stw	r3,0(sp)
    f69c:	d8c00415 	stw	r3,16(sp)
    f6a0:	da00030d 	sth	r8,12(sp)
    f6a4:	d880038d 	sth	r2,14(sp)
    f6a8:	000f8a00 	call	f8a0 <___svfprintf_internal_r>
    f6ac:	d8c00017 	ldw	r3,0(sp)
    f6b0:	18000005 	stb	zero,0(r3)
    f6b4:	dfc01a17 	ldw	ra,104(sp)
    f6b8:	dec01c04 	addi	sp,sp,112
    f6bc:	f800283a 	ret

0000f6c0 <sprintf>:
    f6c0:	deffe304 	addi	sp,sp,-116
    f6c4:	2007883a 	mov	r3,r4
    f6c8:	dfc01a15 	stw	ra,104(sp)
    f6cc:	d9801b15 	stw	r6,108(sp)
    f6d0:	d9c01c15 	stw	r7,112(sp)
    f6d4:	010000f4 	movhi	r4,3
    f6d8:	21384b04 	addi	r4,r4,-7892
    f6dc:	21000017 	ldw	r4,0(r4)
    f6e0:	00a00034 	movhi	r2,32768
    f6e4:	10bfffc4 	addi	r2,r2,-1
    f6e8:	280d883a 	mov	r6,r5
    f6ec:	02008204 	movi	r8,520
    f6f0:	d8800215 	stw	r2,8(sp)
    f6f4:	d8800515 	stw	r2,20(sp)
    f6f8:	d9c01b04 	addi	r7,sp,108
    f6fc:	d80b883a 	mov	r5,sp
    f700:	00bfffc4 	movi	r2,-1
    f704:	d8c00015 	stw	r3,0(sp)
    f708:	d8c00415 	stw	r3,16(sp)
    f70c:	da00030d 	sth	r8,12(sp)
    f710:	d880038d 	sth	r2,14(sp)
    f714:	000f8a00 	call	f8a0 <___svfprintf_internal_r>
    f718:	d8c00017 	ldw	r3,0(sp)
    f71c:	18000005 	stb	zero,0(r3)
    f720:	dfc01a17 	ldw	ra,104(sp)
    f724:	dec01d04 	addi	sp,sp,116
    f728:	f800283a 	ret

0000f72c <strcmp>:
    f72c:	2144b03a 	or	r2,r4,r5
    f730:	108000cc 	andi	r2,r2,3
    f734:	1000171e 	bne	r2,zero,f794 <strcmp+0x68>
    f738:	20800017 	ldw	r2,0(r4)
    f73c:	28c00017 	ldw	r3,0(r5)
    f740:	10c0141e 	bne	r2,r3,f794 <strcmp+0x68>
    f744:	027fbff4 	movhi	r9,65279
    f748:	4a7fbfc4 	addi	r9,r9,-257
    f74c:	0086303a 	nor	r3,zero,r2
    f750:	02202074 	movhi	r8,32897
    f754:	1245883a 	add	r2,r2,r9
    f758:	42202004 	addi	r8,r8,-32640
    f75c:	10c4703a 	and	r2,r2,r3
    f760:	1204703a 	and	r2,r2,r8
    f764:	10000226 	beq	r2,zero,f770 <strcmp+0x44>
    f768:	00002306 	br	f7f8 <strcmp+0xcc>
    f76c:	1000221e 	bne	r2,zero,f7f8 <strcmp+0xcc>
    f770:	21000104 	addi	r4,r4,4
    f774:	20c00017 	ldw	r3,0(r4)
    f778:	29400104 	addi	r5,r5,4
    f77c:	29800017 	ldw	r6,0(r5)
    f780:	1a4f883a 	add	r7,r3,r9
    f784:	00c4303a 	nor	r2,zero,r3
    f788:	3884703a 	and	r2,r7,r2
    f78c:	1204703a 	and	r2,r2,r8
    f790:	19bff626 	beq	r3,r6,f76c <__alt_data_end+0xfc00f76c>
    f794:	20800003 	ldbu	r2,0(r4)
    f798:	10c03fcc 	andi	r3,r2,255
    f79c:	18c0201c 	xori	r3,r3,128
    f7a0:	18ffe004 	addi	r3,r3,-128
    f7a4:	18000c26 	beq	r3,zero,f7d8 <strcmp+0xac>
    f7a8:	29800007 	ldb	r6,0(r5)
    f7ac:	19800326 	beq	r3,r6,f7bc <strcmp+0x90>
    f7b0:	00001306 	br	f800 <strcmp+0xd4>
    f7b4:	29800007 	ldb	r6,0(r5)
    f7b8:	11800b1e 	bne	r2,r6,f7e8 <strcmp+0xbc>
    f7bc:	21000044 	addi	r4,r4,1
    f7c0:	20c00003 	ldbu	r3,0(r4)
    f7c4:	29400044 	addi	r5,r5,1
    f7c8:	18803fcc 	andi	r2,r3,255
    f7cc:	1080201c 	xori	r2,r2,128
    f7d0:	10bfe004 	addi	r2,r2,-128
    f7d4:	103ff71e 	bne	r2,zero,f7b4 <__alt_data_end+0xfc00f7b4>
    f7d8:	0007883a 	mov	r3,zero
    f7dc:	28800003 	ldbu	r2,0(r5)
    f7e0:	1885c83a 	sub	r2,r3,r2
    f7e4:	f800283a 	ret
    f7e8:	28800003 	ldbu	r2,0(r5)
    f7ec:	18c03fcc 	andi	r3,r3,255
    f7f0:	1885c83a 	sub	r2,r3,r2
    f7f4:	f800283a 	ret
    f7f8:	0005883a 	mov	r2,zero
    f7fc:	f800283a 	ret
    f800:	10c03fcc 	andi	r3,r2,255
    f804:	003ff506 	br	f7dc <__alt_data_end+0xfc00f7dc>

0000f808 <strlen>:
    f808:	208000cc 	andi	r2,r4,3
    f80c:	10002026 	beq	r2,zero,f890 <strlen+0x88>
    f810:	20800007 	ldb	r2,0(r4)
    f814:	10002026 	beq	r2,zero,f898 <strlen+0x90>
    f818:	2005883a 	mov	r2,r4
    f81c:	00000206 	br	f828 <strlen+0x20>
    f820:	10c00007 	ldb	r3,0(r2)
    f824:	18001826 	beq	r3,zero,f888 <strlen+0x80>
    f828:	10800044 	addi	r2,r2,1
    f82c:	10c000cc 	andi	r3,r2,3
    f830:	183ffb1e 	bne	r3,zero,f820 <__alt_data_end+0xfc00f820>
    f834:	10c00017 	ldw	r3,0(r2)
    f838:	01ffbff4 	movhi	r7,65279
    f83c:	39ffbfc4 	addi	r7,r7,-257
    f840:	00ca303a 	nor	r5,zero,r3
    f844:	01a02074 	movhi	r6,32897
    f848:	19c7883a 	add	r3,r3,r7
    f84c:	31a02004 	addi	r6,r6,-32640
    f850:	1946703a 	and	r3,r3,r5
    f854:	1986703a 	and	r3,r3,r6
    f858:	1800091e 	bne	r3,zero,f880 <strlen+0x78>
    f85c:	10800104 	addi	r2,r2,4
    f860:	10c00017 	ldw	r3,0(r2)
    f864:	19cb883a 	add	r5,r3,r7
    f868:	00c6303a 	nor	r3,zero,r3
    f86c:	28c6703a 	and	r3,r5,r3
    f870:	1986703a 	and	r3,r3,r6
    f874:	183ff926 	beq	r3,zero,f85c <__alt_data_end+0xfc00f85c>
    f878:	00000106 	br	f880 <strlen+0x78>
    f87c:	10800044 	addi	r2,r2,1
    f880:	10c00007 	ldb	r3,0(r2)
    f884:	183ffd1e 	bne	r3,zero,f87c <__alt_data_end+0xfc00f87c>
    f888:	1105c83a 	sub	r2,r2,r4
    f88c:	f800283a 	ret
    f890:	2005883a 	mov	r2,r4
    f894:	003fe706 	br	f834 <__alt_data_end+0xfc00f834>
    f898:	0005883a 	mov	r2,zero
    f89c:	f800283a 	ret

0000f8a0 <___svfprintf_internal_r>:
    f8a0:	deffb704 	addi	sp,sp,-292
    f8a4:	dfc04815 	stw	ra,288(sp)
    f8a8:	ddc04615 	stw	r23,280(sp)
    f8ac:	d9402d15 	stw	r5,180(sp)
    f8b0:	d9003915 	stw	r4,228(sp)
    f8b4:	302f883a 	mov	r23,r6
    f8b8:	d9c02e15 	stw	r7,184(sp)
    f8bc:	df004715 	stw	fp,284(sp)
    f8c0:	dd804515 	stw	r22,276(sp)
    f8c4:	dd404415 	stw	r21,272(sp)
    f8c8:	dd004315 	stw	r20,268(sp)
    f8cc:	dcc04215 	stw	r19,264(sp)
    f8d0:	dc804115 	stw	r18,260(sp)
    f8d4:	dc404015 	stw	r17,256(sp)
    f8d8:	dc003f15 	stw	r16,252(sp)
    f8dc:	0016aa40 	call	16aa4 <_localeconv_r>
    f8e0:	10800017 	ldw	r2,0(r2)
    f8e4:	1009883a 	mov	r4,r2
    f8e8:	d8803415 	stw	r2,208(sp)
    f8ec:	000f8080 	call	f808 <strlen>
    f8f0:	d8c02d17 	ldw	r3,180(sp)
    f8f4:	d8803815 	stw	r2,224(sp)
    f8f8:	1880030b 	ldhu	r2,12(r3)
    f8fc:	1080200c 	andi	r2,r2,128
    f900:	10000226 	beq	r2,zero,f90c <___svfprintf_internal_r+0x6c>
    f904:	18800417 	ldw	r2,16(r3)
    f908:	1006b126 	beq	r2,zero,113d0 <___svfprintf_internal_r+0x1b30>
    f90c:	dcc03917 	ldw	r19,228(sp)
    f910:	d8c00404 	addi	r3,sp,16
    f914:	054000f4 	movhi	r21,3
    f918:	d9001e04 	addi	r4,sp,120
    f91c:	ad6b5884 	addi	r21,r21,-21150
    f920:	d8c01e15 	stw	r3,120(sp)
    f924:	d8002015 	stw	zero,128(sp)
    f928:	d8001f15 	stw	zero,124(sp)
    f92c:	d8003315 	stw	zero,204(sp)
    f930:	d8003615 	stw	zero,216(sp)
    f934:	d8003715 	stw	zero,220(sp)
    f938:	1811883a 	mov	r8,r3
    f93c:	d8003a15 	stw	zero,232(sp)
    f940:	d8003b15 	stw	zero,236(sp)
    f944:	d8002f15 	stw	zero,188(sp)
    f948:	d9002815 	stw	r4,160(sp)
    f94c:	b8800007 	ldb	r2,0(r23)
    f950:	10027726 	beq	r2,zero,10330 <___svfprintf_internal_r+0xa90>
    f954:	00c00944 	movi	r3,37
    f958:	b823883a 	mov	r17,r23
    f95c:	10c0021e 	bne	r2,r3,f968 <___svfprintf_internal_r+0xc8>
    f960:	00001406 	br	f9b4 <___svfprintf_internal_r+0x114>
    f964:	10c00326 	beq	r2,r3,f974 <___svfprintf_internal_r+0xd4>
    f968:	8c400044 	addi	r17,r17,1
    f96c:	88800007 	ldb	r2,0(r17)
    f970:	103ffc1e 	bne	r2,zero,f964 <__alt_data_end+0xfc00f964>
    f974:	8de1c83a 	sub	r16,r17,r23
    f978:	80000e26 	beq	r16,zero,f9b4 <___svfprintf_internal_r+0x114>
    f97c:	d8c02017 	ldw	r3,128(sp)
    f980:	d8801f17 	ldw	r2,124(sp)
    f984:	45c00015 	stw	r23,0(r8)
    f988:	1c07883a 	add	r3,r3,r16
    f98c:	10800044 	addi	r2,r2,1
    f990:	d8c02015 	stw	r3,128(sp)
    f994:	44000115 	stw	r16,4(r8)
    f998:	d8801f15 	stw	r2,124(sp)
    f99c:	00c001c4 	movi	r3,7
    f9a0:	18809916 	blt	r3,r2,fc08 <___svfprintf_internal_r+0x368>
    f9a4:	42000204 	addi	r8,r8,8
    f9a8:	d9402f17 	ldw	r5,188(sp)
    f9ac:	2c0b883a 	add	r5,r5,r16
    f9b0:	d9402f15 	stw	r5,188(sp)
    f9b4:	88800007 	ldb	r2,0(r17)
    f9b8:	10009a26 	beq	r2,zero,fc24 <___svfprintf_internal_r+0x384>
    f9bc:	8dc00044 	addi	r23,r17,1
    f9c0:	8c400047 	ldb	r17,1(r17)
    f9c4:	0021883a 	mov	r16,zero
    f9c8:	00bfffc4 	movi	r2,-1
    f9cc:	0025883a 	mov	r18,zero
    f9d0:	dc002905 	stb	r16,164(sp)
    f9d4:	d8002785 	stb	zero,158(sp)
    f9d8:	d8002b05 	stb	zero,172(sp)
    f9dc:	d8802a15 	stw	r2,168(sp)
    f9e0:	d8003115 	stw	zero,196(sp)
    f9e4:	05001604 	movi	r20,88
    f9e8:	05800244 	movi	r22,9
    f9ec:	4039883a 	mov	fp,r8
    f9f0:	9021883a 	mov	r16,r18
    f9f4:	bdc00044 	addi	r23,r23,1
    f9f8:	88bff804 	addi	r2,r17,-32
    f9fc:	a0831e36 	bltu	r20,r2,10678 <___svfprintf_internal_r+0xdd8>
    fa00:	100490ba 	slli	r2,r2,2
    fa04:	00c00074 	movhi	r3,1
    fa08:	18fe8604 	addi	r3,r3,-1512
    fa0c:	10c5883a 	add	r2,r2,r3
    fa10:	10800017 	ldw	r2,0(r2)
    fa14:	1000683a 	jmp	r2
    fa18:	000105c0 	call	105c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xc8>
    fa1c:	00010678 	rdprs	zero,zero,1049
    fa20:	00010678 	rdprs	zero,zero,1049
    fa24:	000105b4 	movhi	zero,1046
    fa28:	00010678 	rdprs	zero,zero,1049
    fa2c:	00010678 	rdprs	zero,zero,1049
    fa30:	00010678 	rdprs	zero,zero,1049
    fa34:	00010678 	rdprs	zero,zero,1049
    fa38:	00010678 	rdprs	zero,zero,1049
    fa3c:	00010678 	rdprs	zero,zero,1049
    fa40:	0000fc80 	call	fc8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x34>
    fa44:	000104c4 	movi	zero,1043
    fa48:	00010678 	rdprs	zero,zero,1049
    fa4c:	0000fb8c 	andi	zero,zero,1006
    fa50:	0000fca4 	muli	zero,zero,1010
    fa54:	00010678 	rdprs	zero,zero,1049
    fa58:	0000fd30 	cmpltui	zero,zero,1012
    fa5c:	0000fcf4 	movhi	zero,1011
    fa60:	0000fcf4 	movhi	zero,1011
    fa64:	0000fcf4 	movhi	zero,1011
    fa68:	0000fcf4 	movhi	zero,1011
    fa6c:	0000fcf4 	movhi	zero,1011
    fa70:	0000fcf4 	movhi	zero,1011
    fa74:	0000fcf4 	movhi	zero,1011
    fa78:	0000fcf4 	movhi	zero,1011
    fa7c:	0000fcf4 	movhi	zero,1011
    fa80:	00010678 	rdprs	zero,zero,1049
    fa84:	00010678 	rdprs	zero,zero,1049
    fa88:	00010678 	rdprs	zero,zero,1049
    fa8c:	00010678 	rdprs	zero,zero,1049
    fa90:	00010678 	rdprs	zero,zero,1049
    fa94:	00010678 	rdprs	zero,zero,1049
    fa98:	00010678 	rdprs	zero,zero,1049
    fa9c:	00010678 	rdprs	zero,zero,1049
    faa0:	00010678 	rdprs	zero,zero,1049
    faa4:	00010678 	rdprs	zero,zero,1049
    faa8:	0000fdf4 	movhi	zero,1015
    faac:	0000fd3c 	xorhi	zero,zero,1012
    fab0:	00010678 	rdprs	zero,zero,1049
    fab4:	0000fd3c 	xorhi	zero,zero,1012
    fab8:	00010678 	rdprs	zero,zero,1049
    fabc:	00010678 	rdprs	zero,zero,1049
    fac0:	00010678 	rdprs	zero,zero,1049
    fac4:	00010678 	rdprs	zero,zero,1049
    fac8:	0000fde8 	cmpgeui	zero,zero,1015
    facc:	00010678 	rdprs	zero,zero,1049
    fad0:	00010678 	rdprs	zero,zero,1049
    fad4:	0000febc 	xorhi	zero,zero,1018
    fad8:	00010678 	rdprs	zero,zero,1049
    fadc:	00010678 	rdprs	zero,zero,1049
    fae0:	00010678 	rdprs	zero,zero,1049
    fae4:	00010678 	rdprs	zero,zero,1049
    fae8:	00010678 	rdprs	zero,zero,1049
    faec:	00010338 	rdprs	zero,zero,1036
    faf0:	00010678 	rdprs	zero,zero,1049
    faf4:	00010678 	rdprs	zero,zero,1049
    faf8:	000103a4 	muli	zero,zero,1038
    fafc:	00010678 	rdprs	zero,zero,1049
    fb00:	00010678 	rdprs	zero,zero,1049
    fb04:	00010678 	rdprs	zero,zero,1049
    fb08:	00010678 	rdprs	zero,zero,1049
    fb0c:	00010678 	rdprs	zero,zero,1049
    fb10:	00010678 	rdprs	zero,zero,1049
    fb14:	00010678 	rdprs	zero,zero,1049
    fb18:	00010678 	rdprs	zero,zero,1049
    fb1c:	00010678 	rdprs	zero,zero,1049
    fb20:	00010678 	rdprs	zero,zero,1049
    fb24:	00010460 	cmpeqi	zero,zero,1041
    fb28:	000105e0 	cmpeqi	zero,zero,1047
    fb2c:	0000fd3c 	xorhi	zero,zero,1012
    fb30:	0000fd3c 	xorhi	zero,zero,1012
    fb34:	0000fd3c 	xorhi	zero,zero,1012
    fb38:	00010654 	movui	zero,1049
    fb3c:	000105e0 	cmpeqi	zero,zero,1047
    fb40:	00010678 	rdprs	zero,zero,1049
    fb44:	00010678 	rdprs	zero,zero,1049
    fb48:	00010600 	call	1060 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
    fb4c:	00010678 	rdprs	zero,zero,1049
    fb50:	00010614 	movui	zero,1048
    fb54:	000104a4 	muli	zero,zero,1042
    fb58:	0000fb98 	cmpnei	zero,zero,1006
    fb5c:	000104dc 	xori	zero,zero,1043
    fb60:	00010678 	rdprs	zero,zero,1049
    fb64:	000104e8 	cmpgeui	zero,zero,1043
    fb68:	00010678 	rdprs	zero,zero,1049
    fb6c:	0001054c 	andi	zero,zero,1045
    fb70:	00010678 	rdprs	zero,zero,1049
    fb74:	00010678 	rdprs	zero,zero,1049
    fb78:	0001056c 	andhi	zero,zero,1045
    fb7c:	d8c03117 	ldw	r3,196(sp)
    fb80:	d8802e15 	stw	r2,184(sp)
    fb84:	00c7c83a 	sub	r3,zero,r3
    fb88:	d8c03115 	stw	r3,196(sp)
    fb8c:	84000114 	ori	r16,r16,4
    fb90:	bc400007 	ldb	r17,0(r23)
    fb94:	003f9706 	br	f9f4 <__alt_data_end+0xfc00f9f4>
    fb98:	00800c04 	movi	r2,48
    fb9c:	d8802705 	stb	r2,156(sp)
    fba0:	00801e04 	movi	r2,120
    fba4:	d8802745 	stb	r2,157(sp)
    fba8:	d9002a17 	ldw	r4,168(sp)
    fbac:	d8802e17 	ldw	r2,184(sp)
    fbb0:	d8002785 	stb	zero,158(sp)
    fbb4:	e011883a 	mov	r8,fp
    fbb8:	10c00104 	addi	r3,r2,4
    fbbc:	15000017 	ldw	r20,0(r2)
    fbc0:	002d883a 	mov	r22,zero
    fbc4:	80800094 	ori	r2,r16,2
    fbc8:	2002b616 	blt	r4,zero,106a4 <___svfprintf_internal_r+0xe04>
    fbcc:	00bfdfc4 	movi	r2,-129
    fbd0:	80a4703a 	and	r18,r16,r2
    fbd4:	d8c02e15 	stw	r3,184(sp)
    fbd8:	94800094 	ori	r18,r18,2
    fbdc:	a002a01e 	bne	r20,zero,10660 <___svfprintf_internal_r+0xdc0>
    fbe0:	014000f4 	movhi	r5,3
    fbe4:	296b5104 	addi	r5,r5,-21180
    fbe8:	d9403a15 	stw	r5,232(sp)
    fbec:	04401e04 	movi	r17,120
    fbf0:	d8c02a17 	ldw	r3,168(sp)
    fbf4:	0039883a 	mov	fp,zero
    fbf8:	1801e626 	beq	r3,zero,10394 <___svfprintf_internal_r+0xaf4>
    fbfc:	0029883a 	mov	r20,zero
    fc00:	002d883a 	mov	r22,zero
    fc04:	00020506 	br	1041c <___svfprintf_internal_r+0xb7c>
    fc08:	d9402d17 	ldw	r5,180(sp)
    fc0c:	d9801e04 	addi	r6,sp,120
    fc10:	9809883a 	mov	r4,r19
    fc14:	00188040 	call	18804 <__ssprint_r>
    fc18:	1000081e 	bne	r2,zero,fc3c <___svfprintf_internal_r+0x39c>
    fc1c:	da000404 	addi	r8,sp,16
    fc20:	003f6106 	br	f9a8 <__alt_data_end+0xfc00f9a8>
    fc24:	d8802017 	ldw	r2,128(sp)
    fc28:	10000426 	beq	r2,zero,fc3c <___svfprintf_internal_r+0x39c>
    fc2c:	d9402d17 	ldw	r5,180(sp)
    fc30:	d9003917 	ldw	r4,228(sp)
    fc34:	d9801e04 	addi	r6,sp,120
    fc38:	00188040 	call	18804 <__ssprint_r>
    fc3c:	d8802d17 	ldw	r2,180(sp)
    fc40:	10c0030b 	ldhu	r3,12(r2)
    fc44:	d8802f17 	ldw	r2,188(sp)
    fc48:	18c0100c 	andi	r3,r3,64
    fc4c:	1806251e 	bne	r3,zero,114e4 <___svfprintf_internal_r+0x1c44>
    fc50:	dfc04817 	ldw	ra,288(sp)
    fc54:	df004717 	ldw	fp,284(sp)
    fc58:	ddc04617 	ldw	r23,280(sp)
    fc5c:	dd804517 	ldw	r22,276(sp)
    fc60:	dd404417 	ldw	r21,272(sp)
    fc64:	dd004317 	ldw	r20,268(sp)
    fc68:	dcc04217 	ldw	r19,264(sp)
    fc6c:	dc804117 	ldw	r18,260(sp)
    fc70:	dc404017 	ldw	r17,256(sp)
    fc74:	dc003f17 	ldw	r16,252(sp)
    fc78:	dec04904 	addi	sp,sp,292
    fc7c:	f800283a 	ret
    fc80:	d9002e17 	ldw	r4,184(sp)
    fc84:	d9402e17 	ldw	r5,184(sp)
    fc88:	21000017 	ldw	r4,0(r4)
    fc8c:	28800104 	addi	r2,r5,4
    fc90:	d9003115 	stw	r4,196(sp)
    fc94:	203fb916 	blt	r4,zero,fb7c <__alt_data_end+0xfc00fb7c>
    fc98:	d8802e15 	stw	r2,184(sp)
    fc9c:	bc400007 	ldb	r17,0(r23)
    fca0:	003f5406 	br	f9f4 <__alt_data_end+0xfc00f9f4>
    fca4:	bc400007 	ldb	r17,0(r23)
    fca8:	01000a84 	movi	r4,42
    fcac:	b8c00044 	addi	r3,r23,1
    fcb0:	89076926 	beq	r17,r4,11a58 <___svfprintf_internal_r+0x21b8>
    fcb4:	8cbff404 	addi	r18,r17,-48
    fcb8:	b486b936 	bltu	r22,r18,117a0 <___svfprintf_internal_r+0x1f00>
    fcbc:	0009883a 	mov	r4,zero
    fcc0:	1823883a 	mov	r17,r3
    fcc4:	01400284 	movi	r5,10
    fcc8:	000d18c0 	call	d18c <__mulsi3>
    fccc:	88c00007 	ldb	r3,0(r17)
    fcd0:	1489883a 	add	r4,r2,r18
    fcd4:	8dc00044 	addi	r23,r17,1
    fcd8:	1cbff404 	addi	r18,r3,-48
    fcdc:	b823883a 	mov	r17,r23
    fce0:	b4bff82e 	bgeu	r22,r18,fcc4 <__alt_data_end+0xfc00fcc4>
    fce4:	1823883a 	mov	r17,r3
    fce8:	20060416 	blt	r4,zero,114fc <___svfprintf_internal_r+0x1c5c>
    fcec:	d9002a15 	stw	r4,168(sp)
    fcf0:	003f4106 	br	f9f8 <__alt_data_end+0xfc00f9f8>
    fcf4:	8cbff404 	addi	r18,r17,-48
    fcf8:	d8003115 	stw	zero,196(sp)
    fcfc:	0009883a 	mov	r4,zero
    fd00:	b823883a 	mov	r17,r23
    fd04:	01400284 	movi	r5,10
    fd08:	000d18c0 	call	d18c <__mulsi3>
    fd0c:	88c00007 	ldb	r3,0(r17)
    fd10:	9089883a 	add	r4,r18,r2
    fd14:	bdc00044 	addi	r23,r23,1
    fd18:	1cbff404 	addi	r18,r3,-48
    fd1c:	b823883a 	mov	r17,r23
    fd20:	b4bff82e 	bgeu	r22,r18,fd04 <__alt_data_end+0xfc00fd04>
    fd24:	1823883a 	mov	r17,r3
    fd28:	d9003115 	stw	r4,196(sp)
    fd2c:	003f3206 	br	f9f8 <__alt_data_end+0xfc00f9f8>
    fd30:	84002014 	ori	r16,r16,128
    fd34:	bc400007 	ldb	r17,0(r23)
    fd38:	003f2e06 	br	f9f4 <__alt_data_end+0xfc00f9f4>
    fd3c:	8025883a 	mov	r18,r16
    fd40:	dc002903 	ldbu	r16,164(sp)
    fd44:	e011883a 	mov	r8,fp
    fd48:	84003fcc 	andi	r16,r16,255
    fd4c:	8007721e 	bne	r16,zero,11b18 <___svfprintf_internal_r+0x2278>
    fd50:	9080020c 	andi	r2,r18,8
    fd54:	1004a526 	beq	r2,zero,10fec <___svfprintf_internal_r+0x174c>
    fd58:	d9002e17 	ldw	r4,184(sp)
    fd5c:	d9402e17 	ldw	r5,184(sp)
    fd60:	d8802e17 	ldw	r2,184(sp)
    fd64:	21000017 	ldw	r4,0(r4)
    fd68:	29400117 	ldw	r5,4(r5)
    fd6c:	10800204 	addi	r2,r2,8
    fd70:	d9003615 	stw	r4,216(sp)
    fd74:	d9403715 	stw	r5,220(sp)
    fd78:	d8802e15 	stw	r2,184(sp)
    fd7c:	d9003617 	ldw	r4,216(sp)
    fd80:	d9403717 	ldw	r5,220(sp)
    fd84:	da003e15 	stw	r8,248(sp)
    fd88:	04000044 	movi	r16,1
    fd8c:	00186540 	call	18654 <__fpclassifyd>
    fd90:	da003e17 	ldw	r8,248(sp)
    fd94:	1404731e 	bne	r2,r16,10f64 <___svfprintf_internal_r+0x16c4>
    fd98:	d9003617 	ldw	r4,216(sp)
    fd9c:	d9403717 	ldw	r5,220(sp)
    fda0:	000d883a 	mov	r6,zero
    fda4:	000f883a 	mov	r7,zero
    fda8:	001dd580 	call	1dd58 <__ledf2>
    fdac:	da003e17 	ldw	r8,248(sp)
    fdb0:	10061b16 	blt	r2,zero,11620 <___svfprintf_internal_r+0x1d80>
    fdb4:	df002783 	ldbu	fp,158(sp)
    fdb8:	008011c4 	movi	r2,71
    fdbc:	1445810e 	bge	r2,r17,113c4 <___svfprintf_internal_r+0x1b24>
    fdc0:	040000f4 	movhi	r16,3
    fdc4:	842b4904 	addi	r16,r16,-21212
    fdc8:	00c000c4 	movi	r3,3
    fdcc:	00bfdfc4 	movi	r2,-129
    fdd0:	d8c02915 	stw	r3,164(sp)
    fdd4:	90a4703a 	and	r18,r18,r2
    fdd8:	d8c02b15 	stw	r3,172(sp)
    fddc:	d8002a15 	stw	zero,168(sp)
    fde0:	d8003215 	stw	zero,200(sp)
    fde4:	00006c06 	br	ff98 <___svfprintf_internal_r+0x6f8>
    fde8:	84000214 	ori	r16,r16,8
    fdec:	bc400007 	ldb	r17,0(r23)
    fdf0:	003f0006 	br	f9f4 <__alt_data_end+0xfc00f9f4>
    fdf4:	8025883a 	mov	r18,r16
    fdf8:	dc002903 	ldbu	r16,164(sp)
    fdfc:	e011883a 	mov	r8,fp
    fe00:	84003fcc 	andi	r16,r16,255
    fe04:	80073f1e 	bne	r16,zero,11b04 <___svfprintf_internal_r+0x2264>
    fe08:	94800414 	ori	r18,r18,16
    fe0c:	9080080c 	andi	r2,r18,32
    fe10:	1003bb26 	beq	r2,zero,10d00 <___svfprintf_internal_r+0x1460>
    fe14:	d9002e17 	ldw	r4,184(sp)
    fe18:	20800117 	ldw	r2,4(r4)
    fe1c:	25000017 	ldw	r20,0(r4)
    fe20:	21000204 	addi	r4,r4,8
    fe24:	d9002e15 	stw	r4,184(sp)
    fe28:	102d883a 	mov	r22,r2
    fe2c:	1003bd16 	blt	r2,zero,10d24 <___svfprintf_internal_r+0x1484>
    fe30:	d9002a17 	ldw	r4,168(sp)
    fe34:	df002783 	ldbu	fp,158(sp)
    fe38:	2003d016 	blt	r4,zero,10d7c <___svfprintf_internal_r+0x14dc>
    fe3c:	00ffdfc4 	movi	r3,-129
    fe40:	a584b03a 	or	r2,r20,r22
    fe44:	90e4703a 	and	r18,r18,r3
    fe48:	10015026 	beq	r2,zero,1038c <___svfprintf_internal_r+0xaec>
    fe4c:	b0037026 	beq	r22,zero,10c10 <___svfprintf_internal_r+0x1370>
    fe50:	dc402915 	stw	r17,164(sp)
    fe54:	dc001e04 	addi	r16,sp,120
    fe58:	b023883a 	mov	r17,r22
    fe5c:	402d883a 	mov	r22,r8
    fe60:	a009883a 	mov	r4,r20
    fe64:	880b883a 	mov	r5,r17
    fe68:	01800284 	movi	r6,10
    fe6c:	000f883a 	mov	r7,zero
    fe70:	001c3b40 	call	1c3b4 <__umoddi3>
    fe74:	10800c04 	addi	r2,r2,48
    fe78:	843fffc4 	addi	r16,r16,-1
    fe7c:	a009883a 	mov	r4,r20
    fe80:	880b883a 	mov	r5,r17
    fe84:	80800005 	stb	r2,0(r16)
    fe88:	01800284 	movi	r6,10
    fe8c:	000f883a 	mov	r7,zero
    fe90:	001bdb80 	call	1bdb8 <__udivdi3>
    fe94:	1029883a 	mov	r20,r2
    fe98:	10c4b03a 	or	r2,r2,r3
    fe9c:	1823883a 	mov	r17,r3
    fea0:	103fef1e 	bne	r2,zero,fe60 <__alt_data_end+0xfc00fe60>
    fea4:	d8c02817 	ldw	r3,160(sp)
    fea8:	dc402917 	ldw	r17,164(sp)
    feac:	b011883a 	mov	r8,r22
    feb0:	1c07c83a 	sub	r3,r3,r16
    feb4:	d8c02b15 	stw	r3,172(sp)
    feb8:	00003106 	br	ff80 <___svfprintf_internal_r+0x6e0>
    febc:	8025883a 	mov	r18,r16
    fec0:	dc002903 	ldbu	r16,164(sp)
    fec4:	e011883a 	mov	r8,fp
    fec8:	84003fcc 	andi	r16,r16,255
    fecc:	80070a1e 	bne	r16,zero,11af8 <___svfprintf_internal_r+0x2258>
    fed0:	94800414 	ori	r18,r18,16
    fed4:	9080080c 	andi	r2,r18,32
    fed8:	1002f626 	beq	r2,zero,10ab4 <___svfprintf_internal_r+0x1214>
    fedc:	d9002e17 	ldw	r4,184(sp)
    fee0:	d9402a17 	ldw	r5,168(sp)
    fee4:	d8002785 	stb	zero,158(sp)
    fee8:	20800204 	addi	r2,r4,8
    feec:	25000017 	ldw	r20,0(r4)
    fef0:	25800117 	ldw	r22,4(r4)
    fef4:	28043716 	blt	r5,zero,10fd4 <___svfprintf_internal_r+0x1734>
    fef8:	013fdfc4 	movi	r4,-129
    fefc:	a586b03a 	or	r3,r20,r22
    ff00:	d8802e15 	stw	r2,184(sp)
    ff04:	9124703a 	and	r18,r18,r4
    ff08:	1802f71e 	bne	r3,zero,10ae8 <___svfprintf_internal_r+0x1248>
    ff0c:	d9402a17 	ldw	r5,168(sp)
    ff10:	0039883a 	mov	fp,zero
    ff14:	2806df26 	beq	r5,zero,11a94 <___svfprintf_internal_r+0x21f4>
    ff18:	0029883a 	mov	r20,zero
    ff1c:	002d883a 	mov	r22,zero
    ff20:	dc001e04 	addi	r16,sp,120
    ff24:	a006d0fa 	srli	r3,r20,3
    ff28:	b008977a 	slli	r4,r22,29
    ff2c:	b02cd0fa 	srli	r22,r22,3
    ff30:	a50001cc 	andi	r20,r20,7
    ff34:	a0800c04 	addi	r2,r20,48
    ff38:	843fffc4 	addi	r16,r16,-1
    ff3c:	20e8b03a 	or	r20,r4,r3
    ff40:	80800005 	stb	r2,0(r16)
    ff44:	a586b03a 	or	r3,r20,r22
    ff48:	183ff61e 	bne	r3,zero,ff24 <__alt_data_end+0xfc00ff24>
    ff4c:	90c0004c 	andi	r3,r18,1
    ff50:	18013f26 	beq	r3,zero,10450 <___svfprintf_internal_r+0xbb0>
    ff54:	10803fcc 	andi	r2,r2,255
    ff58:	1080201c 	xori	r2,r2,128
    ff5c:	10bfe004 	addi	r2,r2,-128
    ff60:	00c00c04 	movi	r3,48
    ff64:	10c13a26 	beq	r2,r3,10450 <___svfprintf_internal_r+0xbb0>
    ff68:	80ffffc5 	stb	r3,-1(r16)
    ff6c:	d8c02817 	ldw	r3,160(sp)
    ff70:	80bfffc4 	addi	r2,r16,-1
    ff74:	1021883a 	mov	r16,r2
    ff78:	1887c83a 	sub	r3,r3,r2
    ff7c:	d8c02b15 	stw	r3,172(sp)
    ff80:	d8802b17 	ldw	r2,172(sp)
    ff84:	d9002a17 	ldw	r4,168(sp)
    ff88:	1100010e 	bge	r2,r4,ff90 <___svfprintf_internal_r+0x6f0>
    ff8c:	2005883a 	mov	r2,r4
    ff90:	d8802915 	stw	r2,164(sp)
    ff94:	d8003215 	stw	zero,200(sp)
    ff98:	e7003fcc 	andi	fp,fp,255
    ff9c:	e700201c 	xori	fp,fp,128
    ffa0:	e73fe004 	addi	fp,fp,-128
    ffa4:	e0000326 	beq	fp,zero,ffb4 <___svfprintf_internal_r+0x714>
    ffa8:	d8c02917 	ldw	r3,164(sp)
    ffac:	18c00044 	addi	r3,r3,1
    ffb0:	d8c02915 	stw	r3,164(sp)
    ffb4:	90c0008c 	andi	r3,r18,2
    ffb8:	d8c02c15 	stw	r3,176(sp)
    ffbc:	18000326 	beq	r3,zero,ffcc <___svfprintf_internal_r+0x72c>
    ffc0:	d8c02917 	ldw	r3,164(sp)
    ffc4:	18c00084 	addi	r3,r3,2
    ffc8:	d8c02915 	stw	r3,164(sp)
    ffcc:	90c0210c 	andi	r3,r18,132
    ffd0:	d8c03015 	stw	r3,192(sp)
    ffd4:	1801c31e 	bne	r3,zero,106e4 <___svfprintf_internal_r+0xe44>
    ffd8:	d9003117 	ldw	r4,196(sp)
    ffdc:	d8c02917 	ldw	r3,164(sp)
    ffe0:	20e9c83a 	sub	r20,r4,r3
    ffe4:	0501bf0e 	bge	zero,r20,106e4 <___svfprintf_internal_r+0xe44>
    ffe8:	02400404 	movi	r9,16
    ffec:	d8c02017 	ldw	r3,128(sp)
    fff0:	d8801f17 	ldw	r2,124(sp)
    fff4:	4d053d0e 	bge	r9,r20,114ec <___svfprintf_internal_r+0x1c4c>
    fff8:	014000f4 	movhi	r5,3
    fffc:	296b5c84 	addi	r5,r5,-21134
   10000:	dc403c15 	stw	r17,240(sp)
   10004:	d9403515 	stw	r5,212(sp)
   10008:	a023883a 	mov	r17,r20
   1000c:	482d883a 	mov	r22,r9
   10010:	9029883a 	mov	r20,r18
   10014:	070001c4 	movi	fp,7
   10018:	8025883a 	mov	r18,r16
   1001c:	dc002d17 	ldw	r16,180(sp)
   10020:	00000306 	br	10030 <___svfprintf_internal_r+0x790>
   10024:	8c7ffc04 	addi	r17,r17,-16
   10028:	42000204 	addi	r8,r8,8
   1002c:	b440130e 	bge	r22,r17,1007c <___svfprintf_internal_r+0x7dc>
   10030:	010000f4 	movhi	r4,3
   10034:	18c00404 	addi	r3,r3,16
   10038:	10800044 	addi	r2,r2,1
   1003c:	212b5c84 	addi	r4,r4,-21134
   10040:	41000015 	stw	r4,0(r8)
   10044:	45800115 	stw	r22,4(r8)
   10048:	d8c02015 	stw	r3,128(sp)
   1004c:	d8801f15 	stw	r2,124(sp)
   10050:	e0bff40e 	bge	fp,r2,10024 <__alt_data_end+0xfc010024>
   10054:	d9801e04 	addi	r6,sp,120
   10058:	800b883a 	mov	r5,r16
   1005c:	9809883a 	mov	r4,r19
   10060:	00188040 	call	18804 <__ssprint_r>
   10064:	103ef51e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10068:	8c7ffc04 	addi	r17,r17,-16
   1006c:	d8c02017 	ldw	r3,128(sp)
   10070:	d8801f17 	ldw	r2,124(sp)
   10074:	da000404 	addi	r8,sp,16
   10078:	b47fed16 	blt	r22,r17,10030 <__alt_data_end+0xfc010030>
   1007c:	9021883a 	mov	r16,r18
   10080:	a025883a 	mov	r18,r20
   10084:	8829883a 	mov	r20,r17
   10088:	dc403c17 	ldw	r17,240(sp)
   1008c:	d9403517 	ldw	r5,212(sp)
   10090:	a0c7883a 	add	r3,r20,r3
   10094:	10800044 	addi	r2,r2,1
   10098:	41400015 	stw	r5,0(r8)
   1009c:	45000115 	stw	r20,4(r8)
   100a0:	d8c02015 	stw	r3,128(sp)
   100a4:	d8801f15 	stw	r2,124(sp)
   100a8:	010001c4 	movi	r4,7
   100ac:	2082c116 	blt	r4,r2,10bb4 <___svfprintf_internal_r+0x1314>
   100b0:	df002787 	ldb	fp,158(sp)
   100b4:	42000204 	addi	r8,r8,8
   100b8:	e0000c26 	beq	fp,zero,100ec <___svfprintf_internal_r+0x84c>
   100bc:	d8801f17 	ldw	r2,124(sp)
   100c0:	d9002784 	addi	r4,sp,158
   100c4:	18c00044 	addi	r3,r3,1
   100c8:	10800044 	addi	r2,r2,1
   100cc:	41000015 	stw	r4,0(r8)
   100d0:	01000044 	movi	r4,1
   100d4:	41000115 	stw	r4,4(r8)
   100d8:	d8c02015 	stw	r3,128(sp)
   100dc:	d8801f15 	stw	r2,124(sp)
   100e0:	010001c4 	movi	r4,7
   100e4:	20825a16 	blt	r4,r2,10a50 <___svfprintf_internal_r+0x11b0>
   100e8:	42000204 	addi	r8,r8,8
   100ec:	d8802c17 	ldw	r2,176(sp)
   100f0:	10000c26 	beq	r2,zero,10124 <___svfprintf_internal_r+0x884>
   100f4:	d8801f17 	ldw	r2,124(sp)
   100f8:	d9002704 	addi	r4,sp,156
   100fc:	18c00084 	addi	r3,r3,2
   10100:	10800044 	addi	r2,r2,1
   10104:	41000015 	stw	r4,0(r8)
   10108:	01000084 	movi	r4,2
   1010c:	41000115 	stw	r4,4(r8)
   10110:	d8c02015 	stw	r3,128(sp)
   10114:	d8801f15 	stw	r2,124(sp)
   10118:	010001c4 	movi	r4,7
   1011c:	20825416 	blt	r4,r2,10a70 <___svfprintf_internal_r+0x11d0>
   10120:	42000204 	addi	r8,r8,8
   10124:	d9003017 	ldw	r4,192(sp)
   10128:	00802004 	movi	r2,128
   1012c:	2081b926 	beq	r4,r2,10814 <___svfprintf_internal_r+0xf74>
   10130:	d9402a17 	ldw	r5,168(sp)
   10134:	d8802b17 	ldw	r2,172(sp)
   10138:	28adc83a 	sub	r22,r5,r2
   1013c:	05802f0e 	bge	zero,r22,101fc <___svfprintf_internal_r+0x95c>
   10140:	07000404 	movi	fp,16
   10144:	d8801f17 	ldw	r2,124(sp)
   10148:	e583e20e 	bge	fp,r22,110d4 <___svfprintf_internal_r+0x1834>
   1014c:	014000f4 	movhi	r5,3
   10150:	296b5884 	addi	r5,r5,-21150
   10154:	dc402a15 	stw	r17,168(sp)
   10158:	d9402c15 	stw	r5,176(sp)
   1015c:	b023883a 	mov	r17,r22
   10160:	050001c4 	movi	r20,7
   10164:	902d883a 	mov	r22,r18
   10168:	8025883a 	mov	r18,r16
   1016c:	dc002d17 	ldw	r16,180(sp)
   10170:	00000306 	br	10180 <___svfprintf_internal_r+0x8e0>
   10174:	8c7ffc04 	addi	r17,r17,-16
   10178:	42000204 	addi	r8,r8,8
   1017c:	e440110e 	bge	fp,r17,101c4 <___svfprintf_internal_r+0x924>
   10180:	18c00404 	addi	r3,r3,16
   10184:	10800044 	addi	r2,r2,1
   10188:	45400015 	stw	r21,0(r8)
   1018c:	47000115 	stw	fp,4(r8)
   10190:	d8c02015 	stw	r3,128(sp)
   10194:	d8801f15 	stw	r2,124(sp)
   10198:	a0bff60e 	bge	r20,r2,10174 <__alt_data_end+0xfc010174>
   1019c:	d9801e04 	addi	r6,sp,120
   101a0:	800b883a 	mov	r5,r16
   101a4:	9809883a 	mov	r4,r19
   101a8:	00188040 	call	18804 <__ssprint_r>
   101ac:	103ea31e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   101b0:	8c7ffc04 	addi	r17,r17,-16
   101b4:	d8c02017 	ldw	r3,128(sp)
   101b8:	d8801f17 	ldw	r2,124(sp)
   101bc:	da000404 	addi	r8,sp,16
   101c0:	e47fef16 	blt	fp,r17,10180 <__alt_data_end+0xfc010180>
   101c4:	9021883a 	mov	r16,r18
   101c8:	b025883a 	mov	r18,r22
   101cc:	882d883a 	mov	r22,r17
   101d0:	dc402a17 	ldw	r17,168(sp)
   101d4:	d9002c17 	ldw	r4,176(sp)
   101d8:	1d87883a 	add	r3,r3,r22
   101dc:	10800044 	addi	r2,r2,1
   101e0:	41000015 	stw	r4,0(r8)
   101e4:	45800115 	stw	r22,4(r8)
   101e8:	d8c02015 	stw	r3,128(sp)
   101ec:	d8801f15 	stw	r2,124(sp)
   101f0:	010001c4 	movi	r4,7
   101f4:	20820e16 	blt	r4,r2,10a30 <___svfprintf_internal_r+0x1190>
   101f8:	42000204 	addi	r8,r8,8
   101fc:	9080400c 	andi	r2,r18,256
   10200:	10013a1e 	bne	r2,zero,106ec <___svfprintf_internal_r+0xe4c>
   10204:	d9402b17 	ldw	r5,172(sp)
   10208:	d8801f17 	ldw	r2,124(sp)
   1020c:	44000015 	stw	r16,0(r8)
   10210:	1947883a 	add	r3,r3,r5
   10214:	10800044 	addi	r2,r2,1
   10218:	41400115 	stw	r5,4(r8)
   1021c:	d8c02015 	stw	r3,128(sp)
   10220:	d8801f15 	stw	r2,124(sp)
   10224:	010001c4 	movi	r4,7
   10228:	2081f316 	blt	r4,r2,109f8 <___svfprintf_internal_r+0x1158>
   1022c:	42000204 	addi	r8,r8,8
   10230:	9480010c 	andi	r18,r18,4
   10234:	90003226 	beq	r18,zero,10300 <___svfprintf_internal_r+0xa60>
   10238:	d9403117 	ldw	r5,196(sp)
   1023c:	d8802917 	ldw	r2,164(sp)
   10240:	28a1c83a 	sub	r16,r5,r2
   10244:	04002e0e 	bge	zero,r16,10300 <___svfprintf_internal_r+0xa60>
   10248:	04400404 	movi	r17,16
   1024c:	d8801f17 	ldw	r2,124(sp)
   10250:	8c04db0e 	bge	r17,r16,115c0 <___svfprintf_internal_r+0x1d20>
   10254:	014000f4 	movhi	r5,3
   10258:	296b5c84 	addi	r5,r5,-21134
   1025c:	d9403515 	stw	r5,212(sp)
   10260:	048001c4 	movi	r18,7
   10264:	dd002d17 	ldw	r20,180(sp)
   10268:	00000306 	br	10278 <___svfprintf_internal_r+0x9d8>
   1026c:	843ffc04 	addi	r16,r16,-16
   10270:	42000204 	addi	r8,r8,8
   10274:	8c00130e 	bge	r17,r16,102c4 <___svfprintf_internal_r+0xa24>
   10278:	010000f4 	movhi	r4,3
   1027c:	18c00404 	addi	r3,r3,16
   10280:	10800044 	addi	r2,r2,1
   10284:	212b5c84 	addi	r4,r4,-21134
   10288:	41000015 	stw	r4,0(r8)
   1028c:	44400115 	stw	r17,4(r8)
   10290:	d8c02015 	stw	r3,128(sp)
   10294:	d8801f15 	stw	r2,124(sp)
   10298:	90bff40e 	bge	r18,r2,1026c <__alt_data_end+0xfc01026c>
   1029c:	d9801e04 	addi	r6,sp,120
   102a0:	a00b883a 	mov	r5,r20
   102a4:	9809883a 	mov	r4,r19
   102a8:	00188040 	call	18804 <__ssprint_r>
   102ac:	103e631e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   102b0:	843ffc04 	addi	r16,r16,-16
   102b4:	d8c02017 	ldw	r3,128(sp)
   102b8:	d8801f17 	ldw	r2,124(sp)
   102bc:	da000404 	addi	r8,sp,16
   102c0:	8c3fed16 	blt	r17,r16,10278 <__alt_data_end+0xfc010278>
   102c4:	d9403517 	ldw	r5,212(sp)
   102c8:	1c07883a 	add	r3,r3,r16
   102cc:	10800044 	addi	r2,r2,1
   102d0:	41400015 	stw	r5,0(r8)
   102d4:	44000115 	stw	r16,4(r8)
   102d8:	d8c02015 	stw	r3,128(sp)
   102dc:	d8801f15 	stw	r2,124(sp)
   102e0:	010001c4 	movi	r4,7
   102e4:	2080060e 	bge	r4,r2,10300 <___svfprintf_internal_r+0xa60>
   102e8:	d9402d17 	ldw	r5,180(sp)
   102ec:	d9801e04 	addi	r6,sp,120
   102f0:	9809883a 	mov	r4,r19
   102f4:	00188040 	call	18804 <__ssprint_r>
   102f8:	103e501e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   102fc:	d8c02017 	ldw	r3,128(sp)
   10300:	d8803117 	ldw	r2,196(sp)
   10304:	d9002917 	ldw	r4,164(sp)
   10308:	1100010e 	bge	r2,r4,10310 <___svfprintf_internal_r+0xa70>
   1030c:	2005883a 	mov	r2,r4
   10310:	d9402f17 	ldw	r5,188(sp)
   10314:	288b883a 	add	r5,r5,r2
   10318:	d9402f15 	stw	r5,188(sp)
   1031c:	1801be1e 	bne	r3,zero,10a18 <___svfprintf_internal_r+0x1178>
   10320:	b8800007 	ldb	r2,0(r23)
   10324:	d8001f15 	stw	zero,124(sp)
   10328:	da000404 	addi	r8,sp,16
   1032c:	103d891e 	bne	r2,zero,f954 <__alt_data_end+0xfc00f954>
   10330:	b823883a 	mov	r17,r23
   10334:	003d9f06 	br	f9b4 <__alt_data_end+0xfc00f9b4>
   10338:	8025883a 	mov	r18,r16
   1033c:	dc002903 	ldbu	r16,164(sp)
   10340:	e011883a 	mov	r8,fp
   10344:	84003fcc 	andi	r16,r16,255
   10348:	8005e61e 	bne	r16,zero,11ae4 <___svfprintf_internal_r+0x2244>
   1034c:	94800414 	ori	r18,r18,16
   10350:	9080080c 	andi	r2,r18,32
   10354:	10022026 	beq	r2,zero,10bd8 <___svfprintf_internal_r+0x1338>
   10358:	d9002e17 	ldw	r4,184(sp)
   1035c:	d9402a17 	ldw	r5,168(sp)
   10360:	d8002785 	stb	zero,158(sp)
   10364:	20c00204 	addi	r3,r4,8
   10368:	25000017 	ldw	r20,0(r4)
   1036c:	25800117 	ldw	r22,4(r4)
   10370:	2803ad16 	blt	r5,zero,11228 <___svfprintf_internal_r+0x1988>
   10374:	013fdfc4 	movi	r4,-129
   10378:	a584b03a 	or	r2,r20,r22
   1037c:	d8c02e15 	stw	r3,184(sp)
   10380:	9124703a 	and	r18,r18,r4
   10384:	0039883a 	mov	fp,zero
   10388:	103eb01e 	bne	r2,zero,fe4c <__alt_data_end+0xfc00fe4c>
   1038c:	d8802a17 	ldw	r2,168(sp)
   10390:	1002e71e 	bne	r2,zero,10f30 <___svfprintf_internal_r+0x1690>
   10394:	d8002a15 	stw	zero,168(sp)
   10398:	d8002b15 	stw	zero,172(sp)
   1039c:	dc001e04 	addi	r16,sp,120
   103a0:	003ef706 	br	ff80 <__alt_data_end+0xfc00ff80>
   103a4:	8025883a 	mov	r18,r16
   103a8:	dc002903 	ldbu	r16,164(sp)
   103ac:	e011883a 	mov	r8,fp
   103b0:	84003fcc 	andi	r16,r16,255
   103b4:	8005c81e 	bne	r16,zero,11ad8 <___svfprintf_internal_r+0x2238>
   103b8:	010000f4 	movhi	r4,3
   103bc:	212b4c04 	addi	r4,r4,-21200
   103c0:	d9003a15 	stw	r4,232(sp)
   103c4:	9080080c 	andi	r2,r18,32
   103c8:	10007226 	beq	r2,zero,10594 <___svfprintf_internal_r+0xcf4>
   103cc:	d9402e17 	ldw	r5,184(sp)
   103d0:	2d000017 	ldw	r20,0(r5)
   103d4:	2d800117 	ldw	r22,4(r5)
   103d8:	29400204 	addi	r5,r5,8
   103dc:	d9402e15 	stw	r5,184(sp)
   103e0:	9080004c 	andi	r2,r18,1
   103e4:	1001aa26 	beq	r2,zero,10a90 <___svfprintf_internal_r+0x11f0>
   103e8:	a584b03a 	or	r2,r20,r22
   103ec:	10032526 	beq	r2,zero,11084 <___svfprintf_internal_r+0x17e4>
   103f0:	d8c02a17 	ldw	r3,168(sp)
   103f4:	00800c04 	movi	r2,48
   103f8:	d8802705 	stb	r2,156(sp)
   103fc:	dc402745 	stb	r17,157(sp)
   10400:	d8002785 	stb	zero,158(sp)
   10404:	90800094 	ori	r2,r18,2
   10408:	1804a316 	blt	r3,zero,11698 <___svfprintf_internal_r+0x1df8>
   1040c:	00bfdfc4 	movi	r2,-129
   10410:	90a4703a 	and	r18,r18,r2
   10414:	94800094 	ori	r18,r18,2
   10418:	0039883a 	mov	fp,zero
   1041c:	d9003a17 	ldw	r4,232(sp)
   10420:	dc001e04 	addi	r16,sp,120
   10424:	a08003cc 	andi	r2,r20,15
   10428:	b006973a 	slli	r3,r22,28
   1042c:	2085883a 	add	r2,r4,r2
   10430:	a028d13a 	srli	r20,r20,4
   10434:	10800003 	ldbu	r2,0(r2)
   10438:	b02cd13a 	srli	r22,r22,4
   1043c:	843fffc4 	addi	r16,r16,-1
   10440:	1d28b03a 	or	r20,r3,r20
   10444:	80800005 	stb	r2,0(r16)
   10448:	a584b03a 	or	r2,r20,r22
   1044c:	103ff51e 	bne	r2,zero,10424 <__alt_data_end+0xfc010424>
   10450:	d8c02817 	ldw	r3,160(sp)
   10454:	1c07c83a 	sub	r3,r3,r16
   10458:	d8c02b15 	stw	r3,172(sp)
   1045c:	003ec806 	br	ff80 <__alt_data_end+0xfc00ff80>
   10460:	d8c02e17 	ldw	r3,184(sp)
   10464:	d9002e17 	ldw	r4,184(sp)
   10468:	8025883a 	mov	r18,r16
   1046c:	18800017 	ldw	r2,0(r3)
   10470:	21000104 	addi	r4,r4,4
   10474:	00c00044 	movi	r3,1
   10478:	e011883a 	mov	r8,fp
   1047c:	d8c02915 	stw	r3,164(sp)
   10480:	d8002785 	stb	zero,158(sp)
   10484:	d8801405 	stb	r2,80(sp)
   10488:	d9002e15 	stw	r4,184(sp)
   1048c:	d8c02b15 	stw	r3,172(sp)
   10490:	d8002a15 	stw	zero,168(sp)
   10494:	d8003215 	stw	zero,200(sp)
   10498:	dc001404 	addi	r16,sp,80
   1049c:	0039883a 	mov	fp,zero
   104a0:	003ec406 	br	ffb4 <__alt_data_end+0xfc00ffb4>
   104a4:	8025883a 	mov	r18,r16
   104a8:	dc002903 	ldbu	r16,164(sp)
   104ac:	e011883a 	mov	r8,fp
   104b0:	84003fcc 	andi	r16,r16,255
   104b4:	803e8726 	beq	r16,zero,fed4 <__alt_data_end+0xfc00fed4>
   104b8:	d8c02b03 	ldbu	r3,172(sp)
   104bc:	d8c02785 	stb	r3,158(sp)
   104c0:	003e8406 	br	fed4 <__alt_data_end+0xfc00fed4>
   104c4:	00c00044 	movi	r3,1
   104c8:	d8c02905 	stb	r3,164(sp)
   104cc:	00c00ac4 	movi	r3,43
   104d0:	d8c02b05 	stb	r3,172(sp)
   104d4:	bc400007 	ldb	r17,0(r23)
   104d8:	003d4606 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   104dc:	84000814 	ori	r16,r16,32
   104e0:	bc400007 	ldb	r17,0(r23)
   104e4:	003d4306 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   104e8:	d8802e17 	ldw	r2,184(sp)
   104ec:	8025883a 	mov	r18,r16
   104f0:	d8002785 	stb	zero,158(sp)
   104f4:	14000017 	ldw	r16,0(r2)
   104f8:	e011883a 	mov	r8,fp
   104fc:	15000104 	addi	r20,r2,4
   10500:	80042126 	beq	r16,zero,11588 <___svfprintf_internal_r+0x1ce8>
   10504:	d8c02a17 	ldw	r3,168(sp)
   10508:	1803ee16 	blt	r3,zero,114c4 <___svfprintf_internal_r+0x1c24>
   1050c:	180d883a 	mov	r6,r3
   10510:	000b883a 	mov	r5,zero
   10514:	8009883a 	mov	r4,r16
   10518:	df003e15 	stw	fp,248(sp)
   1051c:	0016c900 	call	16c90 <memchr>
   10520:	da003e17 	ldw	r8,248(sp)
   10524:	10046a26 	beq	r2,zero,116d0 <___svfprintf_internal_r+0x1e30>
   10528:	1405c83a 	sub	r2,r2,r16
   1052c:	d8802b15 	stw	r2,172(sp)
   10530:	1003ea16 	blt	r2,zero,114dc <___svfprintf_internal_r+0x1c3c>
   10534:	df002783 	ldbu	fp,158(sp)
   10538:	d8802915 	stw	r2,164(sp)
   1053c:	dd002e15 	stw	r20,184(sp)
   10540:	d8002a15 	stw	zero,168(sp)
   10544:	d8003215 	stw	zero,200(sp)
   10548:	003e9306 	br	ff98 <__alt_data_end+0xfc00ff98>
   1054c:	8025883a 	mov	r18,r16
   10550:	dc002903 	ldbu	r16,164(sp)
   10554:	e011883a 	mov	r8,fp
   10558:	84003fcc 	andi	r16,r16,255
   1055c:	803f7c26 	beq	r16,zero,10350 <__alt_data_end+0xfc010350>
   10560:	d8c02b03 	ldbu	r3,172(sp)
   10564:	d8c02785 	stb	r3,158(sp)
   10568:	003f7906 	br	10350 <__alt_data_end+0xfc010350>
   1056c:	8025883a 	mov	r18,r16
   10570:	dc002903 	ldbu	r16,164(sp)
   10574:	e011883a 	mov	r8,fp
   10578:	84003fcc 	andi	r16,r16,255
   1057c:	8005741e 	bne	r16,zero,11b50 <___svfprintf_internal_r+0x22b0>
   10580:	010000f4 	movhi	r4,3
   10584:	212b5104 	addi	r4,r4,-21180
   10588:	d9003a15 	stw	r4,232(sp)
   1058c:	9080080c 	andi	r2,r18,32
   10590:	103f8e1e 	bne	r2,zero,103cc <__alt_data_end+0xfc0103cc>
   10594:	9080040c 	andi	r2,r18,16
   10598:	1002a726 	beq	r2,zero,11038 <___svfprintf_internal_r+0x1798>
   1059c:	d8802e17 	ldw	r2,184(sp)
   105a0:	002d883a 	mov	r22,zero
   105a4:	15000017 	ldw	r20,0(r2)
   105a8:	10800104 	addi	r2,r2,4
   105ac:	d8802e15 	stw	r2,184(sp)
   105b0:	003f8b06 	br	103e0 <__alt_data_end+0xfc0103e0>
   105b4:	84000054 	ori	r16,r16,1
   105b8:	bc400007 	ldb	r17,0(r23)
   105bc:	003d0d06 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   105c0:	d8802b07 	ldb	r2,172(sp)
   105c4:	1002a41e 	bne	r2,zero,11058 <___svfprintf_internal_r+0x17b8>
   105c8:	00c00044 	movi	r3,1
   105cc:	d8c02905 	stb	r3,164(sp)
   105d0:	00c00804 	movi	r3,32
   105d4:	d8c02b05 	stb	r3,172(sp)
   105d8:	bc400007 	ldb	r17,0(r23)
   105dc:	003d0506 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   105e0:	8025883a 	mov	r18,r16
   105e4:	dc002903 	ldbu	r16,164(sp)
   105e8:	e011883a 	mov	r8,fp
   105ec:	84003fcc 	andi	r16,r16,255
   105f0:	803e0626 	beq	r16,zero,fe0c <__alt_data_end+0xfc00fe0c>
   105f4:	d8c02b03 	ldbu	r3,172(sp)
   105f8:	d8c02785 	stb	r3,158(sp)
   105fc:	003e0306 	br	fe0c <__alt_data_end+0xfc00fe0c>
   10600:	bc400007 	ldb	r17,0(r23)
   10604:	00801b04 	movi	r2,108
   10608:	88830a26 	beq	r17,r2,11234 <___svfprintf_internal_r+0x1994>
   1060c:	84000414 	ori	r16,r16,16
   10610:	003cf806 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   10614:	8025883a 	mov	r18,r16
   10618:	dc002903 	ldbu	r16,164(sp)
   1061c:	e011883a 	mov	r8,fp
   10620:	84003fcc 	andi	r16,r16,255
   10624:	8005471e 	bne	r16,zero,11b44 <___svfprintf_internal_r+0x22a4>
   10628:	9080080c 	andi	r2,r18,32
   1062c:	10028c26 	beq	r2,zero,11060 <___svfprintf_internal_r+0x17c0>
   10630:	d9002e17 	ldw	r4,184(sp)
   10634:	d9402f17 	ldw	r5,188(sp)
   10638:	20800017 	ldw	r2,0(r4)
   1063c:	2807d7fa 	srai	r3,r5,31
   10640:	21000104 	addi	r4,r4,4
   10644:	d9002e15 	stw	r4,184(sp)
   10648:	11400015 	stw	r5,0(r2)
   1064c:	10c00115 	stw	r3,4(r2)
   10650:	003cbe06 	br	f94c <__alt_data_end+0xfc00f94c>
   10654:	84001014 	ori	r16,r16,64
   10658:	bc400007 	ldb	r17,0(r23)
   1065c:	003ce506 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   10660:	010000f4 	movhi	r4,3
   10664:	212b5104 	addi	r4,r4,-21180
   10668:	0039883a 	mov	fp,zero
   1066c:	d9003a15 	stw	r4,232(sp)
   10670:	04401e04 	movi	r17,120
   10674:	003f6906 	br	1041c <__alt_data_end+0xfc01041c>
   10678:	8025883a 	mov	r18,r16
   1067c:	dc002903 	ldbu	r16,164(sp)
   10680:	e011883a 	mov	r8,fp
   10684:	84003fcc 	andi	r16,r16,255
   10688:	8005261e 	bne	r16,zero,11b24 <___svfprintf_internal_r+0x2284>
   1068c:	883d6526 	beq	r17,zero,fc24 <__alt_data_end+0xfc00fc24>
   10690:	00c00044 	movi	r3,1
   10694:	d8c02915 	stw	r3,164(sp)
   10698:	dc401405 	stb	r17,80(sp)
   1069c:	d8002785 	stb	zero,158(sp)
   106a0:	003f7a06 	br	1048c <__alt_data_end+0xfc01048c>
   106a4:	010000f4 	movhi	r4,3
   106a8:	212b5104 	addi	r4,r4,-21180
   106ac:	d9003a15 	stw	r4,232(sp)
   106b0:	d8c02e15 	stw	r3,184(sp)
   106b4:	1025883a 	mov	r18,r2
   106b8:	04401e04 	movi	r17,120
   106bc:	a584b03a 	or	r2,r20,r22
   106c0:	1000fa1e 	bne	r2,zero,10aac <___svfprintf_internal_r+0x120c>
   106c4:	0039883a 	mov	fp,zero
   106c8:	00800084 	movi	r2,2
   106cc:	10803fcc 	andi	r2,r2,255
   106d0:	00c00044 	movi	r3,1
   106d4:	10c21626 	beq	r2,r3,10f30 <___svfprintf_internal_r+0x1690>
   106d8:	00c00084 	movi	r3,2
   106dc:	10fe0e1e 	bne	r2,r3,ff18 <__alt_data_end+0xfc00ff18>
   106e0:	003d4606 	br	fbfc <__alt_data_end+0xfc00fbfc>
   106e4:	d8c02017 	ldw	r3,128(sp)
   106e8:	003e7306 	br	100b8 <__alt_data_end+0xfc0100b8>
   106ec:	00801944 	movi	r2,101
   106f0:	14407c0e 	bge	r2,r17,108e4 <___svfprintf_internal_r+0x1044>
   106f4:	d9003617 	ldw	r4,216(sp)
   106f8:	d9403717 	ldw	r5,220(sp)
   106fc:	000d883a 	mov	r6,zero
   10700:	000f883a 	mov	r7,zero
   10704:	d8c03d15 	stw	r3,244(sp)
   10708:	da003e15 	stw	r8,248(sp)
   1070c:	001dbf40 	call	1dbf4 <__eqdf2>
   10710:	d8c03d17 	ldw	r3,244(sp)
   10714:	da003e17 	ldw	r8,248(sp)
   10718:	1000f51e 	bne	r2,zero,10af0 <___svfprintf_internal_r+0x1250>
   1071c:	d8801f17 	ldw	r2,124(sp)
   10720:	010000f4 	movhi	r4,3
   10724:	212b5804 	addi	r4,r4,-21152
   10728:	18c00044 	addi	r3,r3,1
   1072c:	10800044 	addi	r2,r2,1
   10730:	41000015 	stw	r4,0(r8)
   10734:	01000044 	movi	r4,1
   10738:	41000115 	stw	r4,4(r8)
   1073c:	d8c02015 	stw	r3,128(sp)
   10740:	d8801f15 	stw	r2,124(sp)
   10744:	010001c4 	movi	r4,7
   10748:	20826616 	blt	r4,r2,110e4 <___svfprintf_internal_r+0x1844>
   1074c:	42000204 	addi	r8,r8,8
   10750:	d8802617 	ldw	r2,152(sp)
   10754:	d9403317 	ldw	r5,204(sp)
   10758:	11400216 	blt	r2,r5,10764 <___svfprintf_internal_r+0xec4>
   1075c:	9080004c 	andi	r2,r18,1
   10760:	103eb326 	beq	r2,zero,10230 <__alt_data_end+0xfc010230>
   10764:	d8803817 	ldw	r2,224(sp)
   10768:	d9003417 	ldw	r4,208(sp)
   1076c:	d9403817 	ldw	r5,224(sp)
   10770:	1887883a 	add	r3,r3,r2
   10774:	d8801f17 	ldw	r2,124(sp)
   10778:	41000015 	stw	r4,0(r8)
   1077c:	41400115 	stw	r5,4(r8)
   10780:	10800044 	addi	r2,r2,1
   10784:	d8c02015 	stw	r3,128(sp)
   10788:	d8801f15 	stw	r2,124(sp)
   1078c:	010001c4 	movi	r4,7
   10790:	2082af16 	blt	r4,r2,11250 <___svfprintf_internal_r+0x19b0>
   10794:	42000204 	addi	r8,r8,8
   10798:	d8803317 	ldw	r2,204(sp)
   1079c:	143fffc4 	addi	r16,r2,-1
   107a0:	043ea30e 	bge	zero,r16,10230 <__alt_data_end+0xfc010230>
   107a4:	04400404 	movi	r17,16
   107a8:	d8801f17 	ldw	r2,124(sp)
   107ac:	8c00860e 	bge	r17,r16,109c8 <___svfprintf_internal_r+0x1128>
   107b0:	014000f4 	movhi	r5,3
   107b4:	296b5884 	addi	r5,r5,-21150
   107b8:	d9402c15 	stw	r5,176(sp)
   107bc:	058001c4 	movi	r22,7
   107c0:	dd002d17 	ldw	r20,180(sp)
   107c4:	00000306 	br	107d4 <___svfprintf_internal_r+0xf34>
   107c8:	42000204 	addi	r8,r8,8
   107cc:	843ffc04 	addi	r16,r16,-16
   107d0:	8c00800e 	bge	r17,r16,109d4 <___svfprintf_internal_r+0x1134>
   107d4:	18c00404 	addi	r3,r3,16
   107d8:	10800044 	addi	r2,r2,1
   107dc:	45400015 	stw	r21,0(r8)
   107e0:	44400115 	stw	r17,4(r8)
   107e4:	d8c02015 	stw	r3,128(sp)
   107e8:	d8801f15 	stw	r2,124(sp)
   107ec:	b0bff60e 	bge	r22,r2,107c8 <__alt_data_end+0xfc0107c8>
   107f0:	d9801e04 	addi	r6,sp,120
   107f4:	a00b883a 	mov	r5,r20
   107f8:	9809883a 	mov	r4,r19
   107fc:	00188040 	call	18804 <__ssprint_r>
   10800:	103d0e1e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10804:	d8c02017 	ldw	r3,128(sp)
   10808:	d8801f17 	ldw	r2,124(sp)
   1080c:	da000404 	addi	r8,sp,16
   10810:	003fee06 	br	107cc <__alt_data_end+0xfc0107cc>
   10814:	d9403117 	ldw	r5,196(sp)
   10818:	d8802917 	ldw	r2,164(sp)
   1081c:	28adc83a 	sub	r22,r5,r2
   10820:	05be430e 	bge	zero,r22,10130 <__alt_data_end+0xfc010130>
   10824:	07000404 	movi	fp,16
   10828:	d8801f17 	ldw	r2,124(sp)
   1082c:	e583a20e 	bge	fp,r22,116b8 <___svfprintf_internal_r+0x1e18>
   10830:	014000f4 	movhi	r5,3
   10834:	296b5884 	addi	r5,r5,-21150
   10838:	dc403015 	stw	r17,192(sp)
   1083c:	d9402c15 	stw	r5,176(sp)
   10840:	b023883a 	mov	r17,r22
   10844:	050001c4 	movi	r20,7
   10848:	902d883a 	mov	r22,r18
   1084c:	8025883a 	mov	r18,r16
   10850:	dc002d17 	ldw	r16,180(sp)
   10854:	00000306 	br	10864 <___svfprintf_internal_r+0xfc4>
   10858:	8c7ffc04 	addi	r17,r17,-16
   1085c:	42000204 	addi	r8,r8,8
   10860:	e440110e 	bge	fp,r17,108a8 <___svfprintf_internal_r+0x1008>
   10864:	18c00404 	addi	r3,r3,16
   10868:	10800044 	addi	r2,r2,1
   1086c:	45400015 	stw	r21,0(r8)
   10870:	47000115 	stw	fp,4(r8)
   10874:	d8c02015 	stw	r3,128(sp)
   10878:	d8801f15 	stw	r2,124(sp)
   1087c:	a0bff60e 	bge	r20,r2,10858 <__alt_data_end+0xfc010858>
   10880:	d9801e04 	addi	r6,sp,120
   10884:	800b883a 	mov	r5,r16
   10888:	9809883a 	mov	r4,r19
   1088c:	00188040 	call	18804 <__ssprint_r>
   10890:	103cea1e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10894:	8c7ffc04 	addi	r17,r17,-16
   10898:	d8c02017 	ldw	r3,128(sp)
   1089c:	d8801f17 	ldw	r2,124(sp)
   108a0:	da000404 	addi	r8,sp,16
   108a4:	e47fef16 	blt	fp,r17,10864 <__alt_data_end+0xfc010864>
   108a8:	9021883a 	mov	r16,r18
   108ac:	b025883a 	mov	r18,r22
   108b0:	882d883a 	mov	r22,r17
   108b4:	dc403017 	ldw	r17,192(sp)
   108b8:	d9002c17 	ldw	r4,176(sp)
   108bc:	1d87883a 	add	r3,r3,r22
   108c0:	10800044 	addi	r2,r2,1
   108c4:	41000015 	stw	r4,0(r8)
   108c8:	45800115 	stw	r22,4(r8)
   108cc:	d8c02015 	stw	r3,128(sp)
   108d0:	d8801f15 	stw	r2,124(sp)
   108d4:	010001c4 	movi	r4,7
   108d8:	20819a16 	blt	r4,r2,10f44 <___svfprintf_internal_r+0x16a4>
   108dc:	42000204 	addi	r8,r8,8
   108e0:	003e1306 	br	10130 <__alt_data_end+0xfc010130>
   108e4:	d9403317 	ldw	r5,204(sp)
   108e8:	00800044 	movi	r2,1
   108ec:	18c00044 	addi	r3,r3,1
   108f0:	1141710e 	bge	r2,r5,10eb8 <___svfprintf_internal_r+0x1618>
   108f4:	dc401f17 	ldw	r17,124(sp)
   108f8:	00800044 	movi	r2,1
   108fc:	40800115 	stw	r2,4(r8)
   10900:	8c400044 	addi	r17,r17,1
   10904:	44000015 	stw	r16,0(r8)
   10908:	d8c02015 	stw	r3,128(sp)
   1090c:	dc401f15 	stw	r17,124(sp)
   10910:	008001c4 	movi	r2,7
   10914:	14417416 	blt	r2,r17,10ee8 <___svfprintf_internal_r+0x1648>
   10918:	42000204 	addi	r8,r8,8
   1091c:	d8803817 	ldw	r2,224(sp)
   10920:	d9003417 	ldw	r4,208(sp)
   10924:	8c400044 	addi	r17,r17,1
   10928:	10c7883a 	add	r3,r2,r3
   1092c:	40800115 	stw	r2,4(r8)
   10930:	41000015 	stw	r4,0(r8)
   10934:	d8c02015 	stw	r3,128(sp)
   10938:	dc401f15 	stw	r17,124(sp)
   1093c:	008001c4 	movi	r2,7
   10940:	14417216 	blt	r2,r17,10f0c <___svfprintf_internal_r+0x166c>
   10944:	45800204 	addi	r22,r8,8
   10948:	d9003617 	ldw	r4,216(sp)
   1094c:	d9403717 	ldw	r5,220(sp)
   10950:	000d883a 	mov	r6,zero
   10954:	000f883a 	mov	r7,zero
   10958:	d8c03d15 	stw	r3,244(sp)
   1095c:	001dbf40 	call	1dbf4 <__eqdf2>
   10960:	d8c03d17 	ldw	r3,244(sp)
   10964:	1000b326 	beq	r2,zero,10c34 <___svfprintf_internal_r+0x1394>
   10968:	d9403317 	ldw	r5,204(sp)
   1096c:	84000044 	addi	r16,r16,1
   10970:	8c400044 	addi	r17,r17,1
   10974:	28bfffc4 	addi	r2,r5,-1
   10978:	1887883a 	add	r3,r3,r2
   1097c:	b0800115 	stw	r2,4(r22)
   10980:	b4000015 	stw	r16,0(r22)
   10984:	d8c02015 	stw	r3,128(sp)
   10988:	dc401f15 	stw	r17,124(sp)
   1098c:	008001c4 	movi	r2,7
   10990:	1440d216 	blt	r2,r17,10cdc <___svfprintf_internal_r+0x143c>
   10994:	b5800204 	addi	r22,r22,8
   10998:	d9003b17 	ldw	r4,236(sp)
   1099c:	df0022c4 	addi	fp,sp,139
   109a0:	8c400044 	addi	r17,r17,1
   109a4:	20c7883a 	add	r3,r4,r3
   109a8:	b7000015 	stw	fp,0(r22)
   109ac:	b1000115 	stw	r4,4(r22)
   109b0:	d8c02015 	stw	r3,128(sp)
   109b4:	dc401f15 	stw	r17,124(sp)
   109b8:	008001c4 	movi	r2,7
   109bc:	14400e16 	blt	r2,r17,109f8 <___svfprintf_internal_r+0x1158>
   109c0:	b2000204 	addi	r8,r22,8
   109c4:	003e1a06 	br	10230 <__alt_data_end+0xfc010230>
   109c8:	010000f4 	movhi	r4,3
   109cc:	212b5884 	addi	r4,r4,-21150
   109d0:	d9002c15 	stw	r4,176(sp)
   109d4:	d9002c17 	ldw	r4,176(sp)
   109d8:	1c07883a 	add	r3,r3,r16
   109dc:	44000115 	stw	r16,4(r8)
   109e0:	41000015 	stw	r4,0(r8)
   109e4:	10800044 	addi	r2,r2,1
   109e8:	d8c02015 	stw	r3,128(sp)
   109ec:	d8801f15 	stw	r2,124(sp)
   109f0:	010001c4 	movi	r4,7
   109f4:	20be0d0e 	bge	r4,r2,1022c <__alt_data_end+0xfc01022c>
   109f8:	d9402d17 	ldw	r5,180(sp)
   109fc:	d9801e04 	addi	r6,sp,120
   10a00:	9809883a 	mov	r4,r19
   10a04:	00188040 	call	18804 <__ssprint_r>
   10a08:	103c8c1e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10a0c:	d8c02017 	ldw	r3,128(sp)
   10a10:	da000404 	addi	r8,sp,16
   10a14:	003e0606 	br	10230 <__alt_data_end+0xfc010230>
   10a18:	d9402d17 	ldw	r5,180(sp)
   10a1c:	d9801e04 	addi	r6,sp,120
   10a20:	9809883a 	mov	r4,r19
   10a24:	00188040 	call	18804 <__ssprint_r>
   10a28:	103e3d26 	beq	r2,zero,10320 <__alt_data_end+0xfc010320>
   10a2c:	003c8306 	br	fc3c <__alt_data_end+0xfc00fc3c>
   10a30:	d9402d17 	ldw	r5,180(sp)
   10a34:	d9801e04 	addi	r6,sp,120
   10a38:	9809883a 	mov	r4,r19
   10a3c:	00188040 	call	18804 <__ssprint_r>
   10a40:	103c7e1e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10a44:	d8c02017 	ldw	r3,128(sp)
   10a48:	da000404 	addi	r8,sp,16
   10a4c:	003deb06 	br	101fc <__alt_data_end+0xfc0101fc>
   10a50:	d9402d17 	ldw	r5,180(sp)
   10a54:	d9801e04 	addi	r6,sp,120
   10a58:	9809883a 	mov	r4,r19
   10a5c:	00188040 	call	18804 <__ssprint_r>
   10a60:	103c761e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10a64:	d8c02017 	ldw	r3,128(sp)
   10a68:	da000404 	addi	r8,sp,16
   10a6c:	003d9f06 	br	100ec <__alt_data_end+0xfc0100ec>
   10a70:	d9402d17 	ldw	r5,180(sp)
   10a74:	d9801e04 	addi	r6,sp,120
   10a78:	9809883a 	mov	r4,r19
   10a7c:	00188040 	call	18804 <__ssprint_r>
   10a80:	103c6e1e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10a84:	d8c02017 	ldw	r3,128(sp)
   10a88:	da000404 	addi	r8,sp,16
   10a8c:	003da506 	br	10124 <__alt_data_end+0xfc010124>
   10a90:	d9402a17 	ldw	r5,168(sp)
   10a94:	d8002785 	stb	zero,158(sp)
   10a98:	283f0816 	blt	r5,zero,106bc <__alt_data_end+0xfc0106bc>
   10a9c:	00ffdfc4 	movi	r3,-129
   10aa0:	a584b03a 	or	r2,r20,r22
   10aa4:	90e4703a 	and	r18,r18,r3
   10aa8:	103c5126 	beq	r2,zero,fbf0 <__alt_data_end+0xfc00fbf0>
   10aac:	0039883a 	mov	fp,zero
   10ab0:	003e5a06 	br	1041c <__alt_data_end+0xfc01041c>
   10ab4:	9080040c 	andi	r2,r18,16
   10ab8:	10013d26 	beq	r2,zero,10fb0 <___svfprintf_internal_r+0x1710>
   10abc:	d8c02e17 	ldw	r3,184(sp)
   10ac0:	d9002a17 	ldw	r4,168(sp)
   10ac4:	d8002785 	stb	zero,158(sp)
   10ac8:	18800104 	addi	r2,r3,4
   10acc:	1d000017 	ldw	r20,0(r3)
   10ad0:	002d883a 	mov	r22,zero
   10ad4:	20013f16 	blt	r4,zero,10fd4 <___svfprintf_internal_r+0x1734>
   10ad8:	00ffdfc4 	movi	r3,-129
   10adc:	d8802e15 	stw	r2,184(sp)
   10ae0:	90e4703a 	and	r18,r18,r3
   10ae4:	a03d0926 	beq	r20,zero,ff0c <__alt_data_end+0xfc00ff0c>
   10ae8:	0039883a 	mov	fp,zero
   10aec:	003d0c06 	br	ff20 <__alt_data_end+0xfc00ff20>
   10af0:	dc402617 	ldw	r17,152(sp)
   10af4:	0441830e 	bge	zero,r17,11104 <___svfprintf_internal_r+0x1864>
   10af8:	dc403217 	ldw	r17,200(sp)
   10afc:	d8803317 	ldw	r2,204(sp)
   10b00:	1440010e 	bge	r2,r17,10b08 <___svfprintf_internal_r+0x1268>
   10b04:	1023883a 	mov	r17,r2
   10b08:	04400a0e 	bge	zero,r17,10b34 <___svfprintf_internal_r+0x1294>
   10b0c:	d8801f17 	ldw	r2,124(sp)
   10b10:	1c47883a 	add	r3,r3,r17
   10b14:	44000015 	stw	r16,0(r8)
   10b18:	10800044 	addi	r2,r2,1
   10b1c:	44400115 	stw	r17,4(r8)
   10b20:	d8c02015 	stw	r3,128(sp)
   10b24:	d8801f15 	stw	r2,124(sp)
   10b28:	010001c4 	movi	r4,7
   10b2c:	20827516 	blt	r4,r2,11504 <___svfprintf_internal_r+0x1c64>
   10b30:	42000204 	addi	r8,r8,8
   10b34:	88027b16 	blt	r17,zero,11524 <___svfprintf_internal_r+0x1c84>
   10b38:	d9003217 	ldw	r4,200(sp)
   10b3c:	2463c83a 	sub	r17,r4,r17
   10b40:	0440990e 	bge	zero,r17,10da8 <___svfprintf_internal_r+0x1508>
   10b44:	05800404 	movi	r22,16
   10b48:	d8801f17 	ldw	r2,124(sp)
   10b4c:	b441530e 	bge	r22,r17,1109c <___svfprintf_internal_r+0x17fc>
   10b50:	010000f4 	movhi	r4,3
   10b54:	212b5884 	addi	r4,r4,-21150
   10b58:	d9002c15 	stw	r4,176(sp)
   10b5c:	070001c4 	movi	fp,7
   10b60:	dd002d17 	ldw	r20,180(sp)
   10b64:	00000306 	br	10b74 <___svfprintf_internal_r+0x12d4>
   10b68:	42000204 	addi	r8,r8,8
   10b6c:	8c7ffc04 	addi	r17,r17,-16
   10b70:	b4414d0e 	bge	r22,r17,110a8 <___svfprintf_internal_r+0x1808>
   10b74:	18c00404 	addi	r3,r3,16
   10b78:	10800044 	addi	r2,r2,1
   10b7c:	45400015 	stw	r21,0(r8)
   10b80:	45800115 	stw	r22,4(r8)
   10b84:	d8c02015 	stw	r3,128(sp)
   10b88:	d8801f15 	stw	r2,124(sp)
   10b8c:	e0bff60e 	bge	fp,r2,10b68 <__alt_data_end+0xfc010b68>
   10b90:	d9801e04 	addi	r6,sp,120
   10b94:	a00b883a 	mov	r5,r20
   10b98:	9809883a 	mov	r4,r19
   10b9c:	00188040 	call	18804 <__ssprint_r>
   10ba0:	103c261e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10ba4:	d8c02017 	ldw	r3,128(sp)
   10ba8:	d8801f17 	ldw	r2,124(sp)
   10bac:	da000404 	addi	r8,sp,16
   10bb0:	003fee06 	br	10b6c <__alt_data_end+0xfc010b6c>
   10bb4:	d9402d17 	ldw	r5,180(sp)
   10bb8:	d9801e04 	addi	r6,sp,120
   10bbc:	9809883a 	mov	r4,r19
   10bc0:	00188040 	call	18804 <__ssprint_r>
   10bc4:	103c1d1e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10bc8:	d8c02017 	ldw	r3,128(sp)
   10bcc:	df002787 	ldb	fp,158(sp)
   10bd0:	da000404 	addi	r8,sp,16
   10bd4:	003d3806 	br	100b8 <__alt_data_end+0xfc0100b8>
   10bd8:	9080040c 	andi	r2,r18,16
   10bdc:	10005c26 	beq	r2,zero,10d50 <___svfprintf_internal_r+0x14b0>
   10be0:	d8c02e17 	ldw	r3,184(sp)
   10be4:	d9002a17 	ldw	r4,168(sp)
   10be8:	d8002785 	stb	zero,158(sp)
   10bec:	18800104 	addi	r2,r3,4
   10bf0:	1d000017 	ldw	r20,0(r3)
   10bf4:	002d883a 	mov	r22,zero
   10bf8:	20005e16 	blt	r4,zero,10d74 <___svfprintf_internal_r+0x14d4>
   10bfc:	00ffdfc4 	movi	r3,-129
   10c00:	d8802e15 	stw	r2,184(sp)
   10c04:	90e4703a 	and	r18,r18,r3
   10c08:	0039883a 	mov	fp,zero
   10c0c:	a03ddf26 	beq	r20,zero,1038c <__alt_data_end+0xfc01038c>
   10c10:	00800244 	movi	r2,9
   10c14:	153c8e36 	bltu	r2,r20,fe50 <__alt_data_end+0xfc00fe50>
   10c18:	a5000c04 	addi	r20,r20,48
   10c1c:	dc001dc4 	addi	r16,sp,119
   10c20:	dd001dc5 	stb	r20,119(sp)
   10c24:	d8c02817 	ldw	r3,160(sp)
   10c28:	1c07c83a 	sub	r3,r3,r16
   10c2c:	d8c02b15 	stw	r3,172(sp)
   10c30:	003cd306 	br	ff80 <__alt_data_end+0xfc00ff80>
   10c34:	d8803317 	ldw	r2,204(sp)
   10c38:	143fffc4 	addi	r16,r2,-1
   10c3c:	043f560e 	bge	zero,r16,10998 <__alt_data_end+0xfc010998>
   10c40:	07000404 	movi	fp,16
   10c44:	e403530e 	bge	fp,r16,11994 <___svfprintf_internal_r+0x20f4>
   10c48:	014000f4 	movhi	r5,3
   10c4c:	296b5884 	addi	r5,r5,-21150
   10c50:	d9402c15 	stw	r5,176(sp)
   10c54:	01c001c4 	movi	r7,7
   10c58:	dd002d17 	ldw	r20,180(sp)
   10c5c:	00000306 	br	10c6c <___svfprintf_internal_r+0x13cc>
   10c60:	843ffc04 	addi	r16,r16,-16
   10c64:	b5800204 	addi	r22,r22,8
   10c68:	e400130e 	bge	fp,r16,10cb8 <___svfprintf_internal_r+0x1418>
   10c6c:	18c00404 	addi	r3,r3,16
   10c70:	8c400044 	addi	r17,r17,1
   10c74:	b5400015 	stw	r21,0(r22)
   10c78:	b7000115 	stw	fp,4(r22)
   10c7c:	d8c02015 	stw	r3,128(sp)
   10c80:	dc401f15 	stw	r17,124(sp)
   10c84:	3c7ff60e 	bge	r7,r17,10c60 <__alt_data_end+0xfc010c60>
   10c88:	d9801e04 	addi	r6,sp,120
   10c8c:	a00b883a 	mov	r5,r20
   10c90:	9809883a 	mov	r4,r19
   10c94:	d9c03d15 	stw	r7,244(sp)
   10c98:	00188040 	call	18804 <__ssprint_r>
   10c9c:	d9c03d17 	ldw	r7,244(sp)
   10ca0:	103be61e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10ca4:	843ffc04 	addi	r16,r16,-16
   10ca8:	d8c02017 	ldw	r3,128(sp)
   10cac:	dc401f17 	ldw	r17,124(sp)
   10cb0:	dd800404 	addi	r22,sp,16
   10cb4:	e43fed16 	blt	fp,r16,10c6c <__alt_data_end+0xfc010c6c>
   10cb8:	d8802c17 	ldw	r2,176(sp)
   10cbc:	1c07883a 	add	r3,r3,r16
   10cc0:	8c400044 	addi	r17,r17,1
   10cc4:	b0800015 	stw	r2,0(r22)
   10cc8:	b4000115 	stw	r16,4(r22)
   10ccc:	d8c02015 	stw	r3,128(sp)
   10cd0:	dc401f15 	stw	r17,124(sp)
   10cd4:	008001c4 	movi	r2,7
   10cd8:	147f2e0e 	bge	r2,r17,10994 <__alt_data_end+0xfc010994>
   10cdc:	d9402d17 	ldw	r5,180(sp)
   10ce0:	d9801e04 	addi	r6,sp,120
   10ce4:	9809883a 	mov	r4,r19
   10ce8:	00188040 	call	18804 <__ssprint_r>
   10cec:	103bd31e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10cf0:	d8c02017 	ldw	r3,128(sp)
   10cf4:	dc401f17 	ldw	r17,124(sp)
   10cf8:	dd800404 	addi	r22,sp,16
   10cfc:	003f2606 	br	10998 <__alt_data_end+0xfc010998>
   10d00:	9080040c 	andi	r2,r18,16
   10d04:	1000c326 	beq	r2,zero,11014 <___svfprintf_internal_r+0x1774>
   10d08:	d9402e17 	ldw	r5,184(sp)
   10d0c:	2d000017 	ldw	r20,0(r5)
   10d10:	29400104 	addi	r5,r5,4
   10d14:	d9402e15 	stw	r5,184(sp)
   10d18:	a02dd7fa 	srai	r22,r20,31
   10d1c:	b005883a 	mov	r2,r22
   10d20:	103c430e 	bge	r2,zero,fe30 <__alt_data_end+0xfc00fe30>
   10d24:	d9402a17 	ldw	r5,168(sp)
   10d28:	0529c83a 	sub	r20,zero,r20
   10d2c:	07000b44 	movi	fp,45
   10d30:	a004c03a 	cmpne	r2,r20,zero
   10d34:	05adc83a 	sub	r22,zero,r22
   10d38:	df002785 	stb	fp,158(sp)
   10d3c:	b0adc83a 	sub	r22,r22,r2
   10d40:	28022e16 	blt	r5,zero,115fc <___svfprintf_internal_r+0x1d5c>
   10d44:	00bfdfc4 	movi	r2,-129
   10d48:	90a4703a 	and	r18,r18,r2
   10d4c:	003c3f06 	br	fe4c <__alt_data_end+0xfc00fe4c>
   10d50:	9080100c 	andi	r2,r18,64
   10d54:	d8002785 	stb	zero,158(sp)
   10d58:	10012526 	beq	r2,zero,111f0 <___svfprintf_internal_r+0x1950>
   10d5c:	d9402e17 	ldw	r5,184(sp)
   10d60:	d8c02a17 	ldw	r3,168(sp)
   10d64:	002d883a 	mov	r22,zero
   10d68:	28800104 	addi	r2,r5,4
   10d6c:	2d00000b 	ldhu	r20,0(r5)
   10d70:	183fa20e 	bge	r3,zero,10bfc <__alt_data_end+0xfc010bfc>
   10d74:	d8802e15 	stw	r2,184(sp)
   10d78:	0039883a 	mov	fp,zero
   10d7c:	a584b03a 	or	r2,r20,r22
   10d80:	103c321e 	bne	r2,zero,fe4c <__alt_data_end+0xfc00fe4c>
   10d84:	00800044 	movi	r2,1
   10d88:	003e5006 	br	106cc <__alt_data_end+0xfc0106cc>
   10d8c:	d9402d17 	ldw	r5,180(sp)
   10d90:	d9801e04 	addi	r6,sp,120
   10d94:	9809883a 	mov	r4,r19
   10d98:	00188040 	call	18804 <__ssprint_r>
   10d9c:	103ba71e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10da0:	d8c02017 	ldw	r3,128(sp)
   10da4:	da000404 	addi	r8,sp,16
   10da8:	d9003217 	ldw	r4,200(sp)
   10dac:	d8802617 	ldw	r2,152(sp)
   10db0:	d9403317 	ldw	r5,204(sp)
   10db4:	8123883a 	add	r17,r16,r4
   10db8:	11400216 	blt	r2,r5,10dc4 <___svfprintf_internal_r+0x1524>
   10dbc:	9100004c 	andi	r4,r18,1
   10dc0:	20000d26 	beq	r4,zero,10df8 <___svfprintf_internal_r+0x1558>
   10dc4:	d9003817 	ldw	r4,224(sp)
   10dc8:	d9403417 	ldw	r5,208(sp)
   10dcc:	1907883a 	add	r3,r3,r4
   10dd0:	d9001f17 	ldw	r4,124(sp)
   10dd4:	41400015 	stw	r5,0(r8)
   10dd8:	d9403817 	ldw	r5,224(sp)
   10ddc:	21000044 	addi	r4,r4,1
   10de0:	d8c02015 	stw	r3,128(sp)
   10de4:	41400115 	stw	r5,4(r8)
   10de8:	d9001f15 	stw	r4,124(sp)
   10dec:	014001c4 	movi	r5,7
   10df0:	2901dc16 	blt	r5,r4,11564 <___svfprintf_internal_r+0x1cc4>
   10df4:	42000204 	addi	r8,r8,8
   10df8:	d9003317 	ldw	r4,204(sp)
   10dfc:	8121883a 	add	r16,r16,r4
   10e00:	2085c83a 	sub	r2,r4,r2
   10e04:	8461c83a 	sub	r16,r16,r17
   10e08:	1400010e 	bge	r2,r16,10e10 <___svfprintf_internal_r+0x1570>
   10e0c:	1021883a 	mov	r16,r2
   10e10:	04000a0e 	bge	zero,r16,10e3c <___svfprintf_internal_r+0x159c>
   10e14:	d9001f17 	ldw	r4,124(sp)
   10e18:	1c07883a 	add	r3,r3,r16
   10e1c:	44400015 	stw	r17,0(r8)
   10e20:	21000044 	addi	r4,r4,1
   10e24:	44000115 	stw	r16,4(r8)
   10e28:	d8c02015 	stw	r3,128(sp)
   10e2c:	d9001f15 	stw	r4,124(sp)
   10e30:	014001c4 	movi	r5,7
   10e34:	2901e616 	blt	r5,r4,115d0 <___svfprintf_internal_r+0x1d30>
   10e38:	42000204 	addi	r8,r8,8
   10e3c:	8001f616 	blt	r16,zero,11618 <___svfprintf_internal_r+0x1d78>
   10e40:	1421c83a 	sub	r16,r2,r16
   10e44:	043cfa0e 	bge	zero,r16,10230 <__alt_data_end+0xfc010230>
   10e48:	04400404 	movi	r17,16
   10e4c:	d8801f17 	ldw	r2,124(sp)
   10e50:	8c3edd0e 	bge	r17,r16,109c8 <__alt_data_end+0xfc0109c8>
   10e54:	014000f4 	movhi	r5,3
   10e58:	296b5884 	addi	r5,r5,-21150
   10e5c:	d9402c15 	stw	r5,176(sp)
   10e60:	058001c4 	movi	r22,7
   10e64:	dd002d17 	ldw	r20,180(sp)
   10e68:	00000306 	br	10e78 <___svfprintf_internal_r+0x15d8>
   10e6c:	42000204 	addi	r8,r8,8
   10e70:	843ffc04 	addi	r16,r16,-16
   10e74:	8c3ed70e 	bge	r17,r16,109d4 <__alt_data_end+0xfc0109d4>
   10e78:	18c00404 	addi	r3,r3,16
   10e7c:	10800044 	addi	r2,r2,1
   10e80:	45400015 	stw	r21,0(r8)
   10e84:	44400115 	stw	r17,4(r8)
   10e88:	d8c02015 	stw	r3,128(sp)
   10e8c:	d8801f15 	stw	r2,124(sp)
   10e90:	b0bff60e 	bge	r22,r2,10e6c <__alt_data_end+0xfc010e6c>
   10e94:	d9801e04 	addi	r6,sp,120
   10e98:	a00b883a 	mov	r5,r20
   10e9c:	9809883a 	mov	r4,r19
   10ea0:	00188040 	call	18804 <__ssprint_r>
   10ea4:	103b651e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10ea8:	d8c02017 	ldw	r3,128(sp)
   10eac:	d8801f17 	ldw	r2,124(sp)
   10eb0:	da000404 	addi	r8,sp,16
   10eb4:	003fee06 	br	10e70 <__alt_data_end+0xfc010e70>
   10eb8:	9088703a 	and	r4,r18,r2
   10ebc:	203e8d1e 	bne	r4,zero,108f4 <__alt_data_end+0xfc0108f4>
   10ec0:	dc401f17 	ldw	r17,124(sp)
   10ec4:	40800115 	stw	r2,4(r8)
   10ec8:	44000015 	stw	r16,0(r8)
   10ecc:	8c400044 	addi	r17,r17,1
   10ed0:	d8c02015 	stw	r3,128(sp)
   10ed4:	dc401f15 	stw	r17,124(sp)
   10ed8:	008001c4 	movi	r2,7
   10edc:	147f7f16 	blt	r2,r17,10cdc <__alt_data_end+0xfc010cdc>
   10ee0:	45800204 	addi	r22,r8,8
   10ee4:	003eac06 	br	10998 <__alt_data_end+0xfc010998>
   10ee8:	d9402d17 	ldw	r5,180(sp)
   10eec:	d9801e04 	addi	r6,sp,120
   10ef0:	9809883a 	mov	r4,r19
   10ef4:	00188040 	call	18804 <__ssprint_r>
   10ef8:	103b501e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10efc:	d8c02017 	ldw	r3,128(sp)
   10f00:	dc401f17 	ldw	r17,124(sp)
   10f04:	da000404 	addi	r8,sp,16
   10f08:	003e8406 	br	1091c <__alt_data_end+0xfc01091c>
   10f0c:	d9402d17 	ldw	r5,180(sp)
   10f10:	d9801e04 	addi	r6,sp,120
   10f14:	9809883a 	mov	r4,r19
   10f18:	00188040 	call	18804 <__ssprint_r>
   10f1c:	103b471e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10f20:	d8c02017 	ldw	r3,128(sp)
   10f24:	dc401f17 	ldw	r17,124(sp)
   10f28:	dd800404 	addi	r22,sp,16
   10f2c:	003e8606 	br	10948 <__alt_data_end+0xfc010948>
   10f30:	0029883a 	mov	r20,zero
   10f34:	a5000c04 	addi	r20,r20,48
   10f38:	dc001dc4 	addi	r16,sp,119
   10f3c:	dd001dc5 	stb	r20,119(sp)
   10f40:	003f3806 	br	10c24 <__alt_data_end+0xfc010c24>
   10f44:	d9402d17 	ldw	r5,180(sp)
   10f48:	d9801e04 	addi	r6,sp,120
   10f4c:	9809883a 	mov	r4,r19
   10f50:	00188040 	call	18804 <__ssprint_r>
   10f54:	103b391e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   10f58:	d8c02017 	ldw	r3,128(sp)
   10f5c:	da000404 	addi	r8,sp,16
   10f60:	003c7306 	br	10130 <__alt_data_end+0xfc010130>
   10f64:	d9003617 	ldw	r4,216(sp)
   10f68:	d9403717 	ldw	r5,220(sp)
   10f6c:	da003e15 	stw	r8,248(sp)
   10f70:	00186540 	call	18654 <__fpclassifyd>
   10f74:	da003e17 	ldw	r8,248(sp)
   10f78:	1000bd1e 	bne	r2,zero,11270 <___svfprintf_internal_r+0x19d0>
   10f7c:	008011c4 	movi	r2,71
   10f80:	14411e0e 	bge	r2,r17,113fc <___svfprintf_internal_r+0x1b5c>
   10f84:	040000f4 	movhi	r16,3
   10f88:	842b4b04 	addi	r16,r16,-21204
   10f8c:	00c000c4 	movi	r3,3
   10f90:	00bfdfc4 	movi	r2,-129
   10f94:	d8c02915 	stw	r3,164(sp)
   10f98:	90a4703a 	and	r18,r18,r2
   10f9c:	df002783 	ldbu	fp,158(sp)
   10fa0:	d8c02b15 	stw	r3,172(sp)
   10fa4:	d8002a15 	stw	zero,168(sp)
   10fa8:	d8003215 	stw	zero,200(sp)
   10fac:	003bfa06 	br	ff98 <__alt_data_end+0xfc00ff98>
   10fb0:	9080100c 	andi	r2,r18,64
   10fb4:	d8002785 	stb	zero,158(sp)
   10fb8:	10009426 	beq	r2,zero,1120c <___svfprintf_internal_r+0x196c>
   10fbc:	d9402e17 	ldw	r5,184(sp)
   10fc0:	d8c02a17 	ldw	r3,168(sp)
   10fc4:	002d883a 	mov	r22,zero
   10fc8:	28800104 	addi	r2,r5,4
   10fcc:	2d00000b 	ldhu	r20,0(r5)
   10fd0:	183ec10e 	bge	r3,zero,10ad8 <__alt_data_end+0xfc010ad8>
   10fd4:	a586b03a 	or	r3,r20,r22
   10fd8:	d8802e15 	stw	r2,184(sp)
   10fdc:	183ec21e 	bne	r3,zero,10ae8 <__alt_data_end+0xfc010ae8>
   10fe0:	0039883a 	mov	fp,zero
   10fe4:	0005883a 	mov	r2,zero
   10fe8:	003db806 	br	106cc <__alt_data_end+0xfc0106cc>
   10fec:	d8c02e17 	ldw	r3,184(sp)
   10ff0:	d9002e17 	ldw	r4,184(sp)
   10ff4:	d9402e17 	ldw	r5,184(sp)
   10ff8:	18c00017 	ldw	r3,0(r3)
   10ffc:	21000117 	ldw	r4,4(r4)
   11000:	29400204 	addi	r5,r5,8
   11004:	d8c03615 	stw	r3,216(sp)
   11008:	d9003715 	stw	r4,220(sp)
   1100c:	d9402e15 	stw	r5,184(sp)
   11010:	003b5a06 	br	fd7c <__alt_data_end+0xfc00fd7c>
   11014:	9080100c 	andi	r2,r18,64
   11018:	10010726 	beq	r2,zero,11438 <___svfprintf_internal_r+0x1b98>
   1101c:	d8802e17 	ldw	r2,184(sp)
   11020:	1500000f 	ldh	r20,0(r2)
   11024:	10800104 	addi	r2,r2,4
   11028:	d8802e15 	stw	r2,184(sp)
   1102c:	a02dd7fa 	srai	r22,r20,31
   11030:	b005883a 	mov	r2,r22
   11034:	003b7d06 	br	fe2c <__alt_data_end+0xfc00fe2c>
   11038:	9080100c 	andi	r2,r18,64
   1103c:	10010526 	beq	r2,zero,11454 <___svfprintf_internal_r+0x1bb4>
   11040:	d8c02e17 	ldw	r3,184(sp)
   11044:	002d883a 	mov	r22,zero
   11048:	1d00000b 	ldhu	r20,0(r3)
   1104c:	18c00104 	addi	r3,r3,4
   11050:	d8c02e15 	stw	r3,184(sp)
   11054:	003ce206 	br	103e0 <__alt_data_end+0xfc0103e0>
   11058:	bc400007 	ldb	r17,0(r23)
   1105c:	003a6506 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   11060:	9080040c 	andi	r2,r18,16
   11064:	10010126 	beq	r2,zero,1146c <___svfprintf_internal_r+0x1bcc>
   11068:	d8c02e17 	ldw	r3,184(sp)
   1106c:	d9002f17 	ldw	r4,188(sp)
   11070:	18800017 	ldw	r2,0(r3)
   11074:	18c00104 	addi	r3,r3,4
   11078:	d8c02e15 	stw	r3,184(sp)
   1107c:	11000015 	stw	r4,0(r2)
   11080:	003a3206 	br	f94c <__alt_data_end+0xfc00f94c>
   11084:	d9002a17 	ldw	r4,168(sp)
   11088:	d8002785 	stb	zero,158(sp)
   1108c:	203d8d16 	blt	r4,zero,106c4 <__alt_data_end+0xfc0106c4>
   11090:	00bfdfc4 	movi	r2,-129
   11094:	90a4703a 	and	r18,r18,r2
   11098:	003ad506 	br	fbf0 <__alt_data_end+0xfc00fbf0>
   1109c:	014000f4 	movhi	r5,3
   110a0:	296b5884 	addi	r5,r5,-21150
   110a4:	d9402c15 	stw	r5,176(sp)
   110a8:	d9402c17 	ldw	r5,176(sp)
   110ac:	1c47883a 	add	r3,r3,r17
   110b0:	10800044 	addi	r2,r2,1
   110b4:	41400015 	stw	r5,0(r8)
   110b8:	44400115 	stw	r17,4(r8)
   110bc:	d8c02015 	stw	r3,128(sp)
   110c0:	d8801f15 	stw	r2,124(sp)
   110c4:	010001c4 	movi	r4,7
   110c8:	20bf3016 	blt	r4,r2,10d8c <__alt_data_end+0xfc010d8c>
   110cc:	42000204 	addi	r8,r8,8
   110d0:	003f3506 	br	10da8 <__alt_data_end+0xfc010da8>
   110d4:	010000f4 	movhi	r4,3
   110d8:	212b5884 	addi	r4,r4,-21150
   110dc:	d9002c15 	stw	r4,176(sp)
   110e0:	003c3c06 	br	101d4 <__alt_data_end+0xfc0101d4>
   110e4:	d9402d17 	ldw	r5,180(sp)
   110e8:	d9801e04 	addi	r6,sp,120
   110ec:	9809883a 	mov	r4,r19
   110f0:	00188040 	call	18804 <__ssprint_r>
   110f4:	103ad11e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   110f8:	d8c02017 	ldw	r3,128(sp)
   110fc:	da000404 	addi	r8,sp,16
   11100:	003d9306 	br	10750 <__alt_data_end+0xfc010750>
   11104:	d8801f17 	ldw	r2,124(sp)
   11108:	014000f4 	movhi	r5,3
   1110c:	01000044 	movi	r4,1
   11110:	18c00044 	addi	r3,r3,1
   11114:	10800044 	addi	r2,r2,1
   11118:	296b5804 	addi	r5,r5,-21152
   1111c:	41000115 	stw	r4,4(r8)
   11120:	41400015 	stw	r5,0(r8)
   11124:	d8c02015 	stw	r3,128(sp)
   11128:	d8801f15 	stw	r2,124(sp)
   1112c:	010001c4 	movi	r4,7
   11130:	2080b516 	blt	r4,r2,11408 <___svfprintf_internal_r+0x1b68>
   11134:	42000204 	addi	r8,r8,8
   11138:	8800041e 	bne	r17,zero,1114c <___svfprintf_internal_r+0x18ac>
   1113c:	d8803317 	ldw	r2,204(sp)
   11140:	1000021e 	bne	r2,zero,1114c <___svfprintf_internal_r+0x18ac>
   11144:	9080004c 	andi	r2,r18,1
   11148:	103c3926 	beq	r2,zero,10230 <__alt_data_end+0xfc010230>
   1114c:	d9003817 	ldw	r4,224(sp)
   11150:	d8801f17 	ldw	r2,124(sp)
   11154:	d9403417 	ldw	r5,208(sp)
   11158:	20c7883a 	add	r3,r4,r3
   1115c:	10800044 	addi	r2,r2,1
   11160:	41000115 	stw	r4,4(r8)
   11164:	41400015 	stw	r5,0(r8)
   11168:	d8c02015 	stw	r3,128(sp)
   1116c:	d8801f15 	stw	r2,124(sp)
   11170:	010001c4 	movi	r4,7
   11174:	20818016 	blt	r4,r2,11778 <___svfprintf_internal_r+0x1ed8>
   11178:	42000204 	addi	r8,r8,8
   1117c:	0463c83a 	sub	r17,zero,r17
   11180:	0440cb0e 	bge	zero,r17,114b0 <___svfprintf_internal_r+0x1c10>
   11184:	05800404 	movi	r22,16
   11188:	b440e80e 	bge	r22,r17,1152c <___svfprintf_internal_r+0x1c8c>
   1118c:	014000f4 	movhi	r5,3
   11190:	296b5884 	addi	r5,r5,-21150
   11194:	d9402c15 	stw	r5,176(sp)
   11198:	070001c4 	movi	fp,7
   1119c:	dd002d17 	ldw	r20,180(sp)
   111a0:	00000306 	br	111b0 <___svfprintf_internal_r+0x1910>
   111a4:	42000204 	addi	r8,r8,8
   111a8:	8c7ffc04 	addi	r17,r17,-16
   111ac:	b440e20e 	bge	r22,r17,11538 <___svfprintf_internal_r+0x1c98>
   111b0:	18c00404 	addi	r3,r3,16
   111b4:	10800044 	addi	r2,r2,1
   111b8:	45400015 	stw	r21,0(r8)
   111bc:	45800115 	stw	r22,4(r8)
   111c0:	d8c02015 	stw	r3,128(sp)
   111c4:	d8801f15 	stw	r2,124(sp)
   111c8:	e0bff60e 	bge	fp,r2,111a4 <__alt_data_end+0xfc0111a4>
   111cc:	d9801e04 	addi	r6,sp,120
   111d0:	a00b883a 	mov	r5,r20
   111d4:	9809883a 	mov	r4,r19
   111d8:	00188040 	call	18804 <__ssprint_r>
   111dc:	103a971e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   111e0:	d8c02017 	ldw	r3,128(sp)
   111e4:	d8801f17 	ldw	r2,124(sp)
   111e8:	da000404 	addi	r8,sp,16
   111ec:	003fee06 	br	111a8 <__alt_data_end+0xfc0111a8>
   111f0:	d9002e17 	ldw	r4,184(sp)
   111f4:	d9402a17 	ldw	r5,168(sp)
   111f8:	002d883a 	mov	r22,zero
   111fc:	20800104 	addi	r2,r4,4
   11200:	25000017 	ldw	r20,0(r4)
   11204:	283e7d0e 	bge	r5,zero,10bfc <__alt_data_end+0xfc010bfc>
   11208:	003eda06 	br	10d74 <__alt_data_end+0xfc010d74>
   1120c:	d9002e17 	ldw	r4,184(sp)
   11210:	d9402a17 	ldw	r5,168(sp)
   11214:	002d883a 	mov	r22,zero
   11218:	20800104 	addi	r2,r4,4
   1121c:	25000017 	ldw	r20,0(r4)
   11220:	283e2d0e 	bge	r5,zero,10ad8 <__alt_data_end+0xfc010ad8>
   11224:	003f6b06 	br	10fd4 <__alt_data_end+0xfc010fd4>
   11228:	d8c02e15 	stw	r3,184(sp)
   1122c:	0039883a 	mov	fp,zero
   11230:	003ed206 	br	10d7c <__alt_data_end+0xfc010d7c>
   11234:	bc400043 	ldbu	r17,1(r23)
   11238:	84000814 	ori	r16,r16,32
   1123c:	bdc00044 	addi	r23,r23,1
   11240:	8c403fcc 	andi	r17,r17,255
   11244:	8c40201c 	xori	r17,r17,128
   11248:	8c7fe004 	addi	r17,r17,-128
   1124c:	0039e906 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   11250:	d9402d17 	ldw	r5,180(sp)
   11254:	d9801e04 	addi	r6,sp,120
   11258:	9809883a 	mov	r4,r19
   1125c:	00188040 	call	18804 <__ssprint_r>
   11260:	103a761e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   11264:	d8c02017 	ldw	r3,128(sp)
   11268:	da000404 	addi	r8,sp,16
   1126c:	003d4a06 	br	10798 <__alt_data_end+0xfc010798>
   11270:	d9002a17 	ldw	r4,168(sp)
   11274:	05bff7c4 	movi	r22,-33
   11278:	00bfffc4 	movi	r2,-1
   1127c:	8dac703a 	and	r22,r17,r22
   11280:	20806a26 	beq	r4,r2,1142c <___svfprintf_internal_r+0x1b8c>
   11284:	008011c4 	movi	r2,71
   11288:	b0813726 	beq	r22,r2,11768 <___svfprintf_internal_r+0x1ec8>
   1128c:	d9003717 	ldw	r4,220(sp)
   11290:	90c04014 	ori	r3,r18,256
   11294:	d8c02c15 	stw	r3,176(sp)
   11298:	20015d16 	blt	r4,zero,11810 <___svfprintf_internal_r+0x1f70>
   1129c:	dd003717 	ldw	r20,220(sp)
   112a0:	d8002905 	stb	zero,164(sp)
   112a4:	00801984 	movi	r2,102
   112a8:	88814026 	beq	r17,r2,117ac <___svfprintf_internal_r+0x1f0c>
   112ac:	00801184 	movi	r2,70
   112b0:	88817126 	beq	r17,r2,11878 <___svfprintf_internal_r+0x1fd8>
   112b4:	00801144 	movi	r2,69
   112b8:	b0816226 	beq	r22,r2,11844 <___svfprintf_internal_r+0x1fa4>
   112bc:	d8c02a17 	ldw	r3,168(sp)
   112c0:	d8802104 	addi	r2,sp,132
   112c4:	d8800315 	stw	r2,12(sp)
   112c8:	d9403617 	ldw	r5,216(sp)
   112cc:	d8802504 	addi	r2,sp,148
   112d0:	d8800215 	stw	r2,8(sp)
   112d4:	d8802604 	addi	r2,sp,152
   112d8:	d8c00015 	stw	r3,0(sp)
   112dc:	d8800115 	stw	r2,4(sp)
   112e0:	01c00084 	movi	r7,2
   112e4:	a00d883a 	mov	r6,r20
   112e8:	9809883a 	mov	r4,r19
   112ec:	d8c03d15 	stw	r3,244(sp)
   112f0:	da003e15 	stw	r8,248(sp)
   112f4:	00142940 	call	14294 <_dtoa_r>
   112f8:	1021883a 	mov	r16,r2
   112fc:	008019c4 	movi	r2,103
   11300:	d8c03d17 	ldw	r3,244(sp)
   11304:	da003e17 	ldw	r8,248(sp)
   11308:	8880e726 	beq	r17,r2,116a8 <___svfprintf_internal_r+0x1e08>
   1130c:	008011c4 	movi	r2,71
   11310:	8880d426 	beq	r17,r2,11664 <___svfprintf_internal_r+0x1dc4>
   11314:	80f9883a 	add	fp,r16,r3
   11318:	d9003617 	ldw	r4,216(sp)
   1131c:	000d883a 	mov	r6,zero
   11320:	000f883a 	mov	r7,zero
   11324:	a00b883a 	mov	r5,r20
   11328:	da003e15 	stw	r8,248(sp)
   1132c:	001dbf40 	call	1dbf4 <__eqdf2>
   11330:	da003e17 	ldw	r8,248(sp)
   11334:	1000e426 	beq	r2,zero,116c8 <___svfprintf_internal_r+0x1e28>
   11338:	d8802117 	ldw	r2,132(sp)
   1133c:	1700062e 	bgeu	r2,fp,11358 <___svfprintf_internal_r+0x1ab8>
   11340:	01000c04 	movi	r4,48
   11344:	10c00044 	addi	r3,r2,1
   11348:	d8c02115 	stw	r3,132(sp)
   1134c:	11000005 	stb	r4,0(r2)
   11350:	d8802117 	ldw	r2,132(sp)
   11354:	173ffb36 	bltu	r2,fp,11344 <__alt_data_end+0xfc011344>
   11358:	1405c83a 	sub	r2,r2,r16
   1135c:	d8803315 	stw	r2,204(sp)
   11360:	008011c4 	movi	r2,71
   11364:	b080c526 	beq	r22,r2,1167c <___svfprintf_internal_r+0x1ddc>
   11368:	00801944 	movi	r2,101
   1136c:	1441d80e 	bge	r2,r17,11ad0 <___svfprintf_internal_r+0x2230>
   11370:	d8c02617 	ldw	r3,152(sp)
   11374:	00801984 	movi	r2,102
   11378:	d8c03215 	stw	r3,200(sp)
   1137c:	88813426 	beq	r17,r2,11850 <___svfprintf_internal_r+0x1fb0>
   11380:	d8c03217 	ldw	r3,200(sp)
   11384:	d9003317 	ldw	r4,204(sp)
   11388:	19012516 	blt	r3,r4,11820 <___svfprintf_internal_r+0x1f80>
   1138c:	9480004c 	andi	r18,r18,1
   11390:	9001841e 	bne	r18,zero,119a4 <___svfprintf_internal_r+0x2104>
   11394:	1805883a 	mov	r2,r3
   11398:	1801cb16 	blt	r3,zero,11ac8 <___svfprintf_internal_r+0x2228>
   1139c:	d8c03217 	ldw	r3,200(sp)
   113a0:	044019c4 	movi	r17,103
   113a4:	d8c02b15 	stw	r3,172(sp)
   113a8:	df002907 	ldb	fp,164(sp)
   113ac:	e000a61e 	bne	fp,zero,11648 <___svfprintf_internal_r+0x1da8>
   113b0:	df002783 	ldbu	fp,158(sp)
   113b4:	d8802915 	stw	r2,164(sp)
   113b8:	dc802c17 	ldw	r18,176(sp)
   113bc:	d8002a15 	stw	zero,168(sp)
   113c0:	003af506 	br	ff98 <__alt_data_end+0xfc00ff98>
   113c4:	040000f4 	movhi	r16,3
   113c8:	842b4804 	addi	r16,r16,-21216
   113cc:	003a7e06 	br	fdc8 <__alt_data_end+0xfc00fdc8>
   113d0:	d9003917 	ldw	r4,228(sp)
   113d4:	04001004 	movi	r16,64
   113d8:	800b883a 	mov	r5,r16
   113dc:	000e7340 	call	e734 <_malloc_r>
   113e0:	d9002d17 	ldw	r4,180(sp)
   113e4:	20800015 	stw	r2,0(r4)
   113e8:	20800415 	stw	r2,16(r4)
   113ec:	1001d026 	beq	r2,zero,11b30 <___svfprintf_internal_r+0x2290>
   113f0:	d8802d17 	ldw	r2,180(sp)
   113f4:	14000515 	stw	r16,20(r2)
   113f8:	00394406 	br	f90c <__alt_data_end+0xfc00f90c>
   113fc:	040000f4 	movhi	r16,3
   11400:	842b4a04 	addi	r16,r16,-21208
   11404:	003ee106 	br	10f8c <__alt_data_end+0xfc010f8c>
   11408:	d9402d17 	ldw	r5,180(sp)
   1140c:	d9801e04 	addi	r6,sp,120
   11410:	9809883a 	mov	r4,r19
   11414:	00188040 	call	18804 <__ssprint_r>
   11418:	103a081e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   1141c:	dc402617 	ldw	r17,152(sp)
   11420:	d8c02017 	ldw	r3,128(sp)
   11424:	da000404 	addi	r8,sp,16
   11428:	003f4306 	br	11138 <__alt_data_end+0xfc011138>
   1142c:	01400184 	movi	r5,6
   11430:	d9402a15 	stw	r5,168(sp)
   11434:	003f9506 	br	1128c <__alt_data_end+0xfc01128c>
   11438:	d8c02e17 	ldw	r3,184(sp)
   1143c:	1d000017 	ldw	r20,0(r3)
   11440:	18c00104 	addi	r3,r3,4
   11444:	d8c02e15 	stw	r3,184(sp)
   11448:	a02dd7fa 	srai	r22,r20,31
   1144c:	b005883a 	mov	r2,r22
   11450:	003a7606 	br	fe2c <__alt_data_end+0xfc00fe2c>
   11454:	d9002e17 	ldw	r4,184(sp)
   11458:	002d883a 	mov	r22,zero
   1145c:	25000017 	ldw	r20,0(r4)
   11460:	21000104 	addi	r4,r4,4
   11464:	d9002e15 	stw	r4,184(sp)
   11468:	003bdd06 	br	103e0 <__alt_data_end+0xfc0103e0>
   1146c:	9480100c 	andi	r18,r18,64
   11470:	90006e26 	beq	r18,zero,1162c <___svfprintf_internal_r+0x1d8c>
   11474:	d9402e17 	ldw	r5,184(sp)
   11478:	d8c02f17 	ldw	r3,188(sp)
   1147c:	28800017 	ldw	r2,0(r5)
   11480:	29400104 	addi	r5,r5,4
   11484:	d9402e15 	stw	r5,184(sp)
   11488:	10c0000d 	sth	r3,0(r2)
   1148c:	00392f06 	br	f94c <__alt_data_end+0xfc00f94c>
   11490:	d9402d17 	ldw	r5,180(sp)
   11494:	d9801e04 	addi	r6,sp,120
   11498:	9809883a 	mov	r4,r19
   1149c:	00188040 	call	18804 <__ssprint_r>
   114a0:	1039e61e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   114a4:	d8c02017 	ldw	r3,128(sp)
   114a8:	d8801f17 	ldw	r2,124(sp)
   114ac:	da000404 	addi	r8,sp,16
   114b0:	d9403317 	ldw	r5,204(sp)
   114b4:	10800044 	addi	r2,r2,1
   114b8:	44000015 	stw	r16,0(r8)
   114bc:	28c7883a 	add	r3,r5,r3
   114c0:	003b5506 	br	10218 <__alt_data_end+0xfc010218>
   114c4:	8009883a 	mov	r4,r16
   114c8:	df003e15 	stw	fp,248(sp)
   114cc:	000f8080 	call	f808 <strlen>
   114d0:	d8802b15 	stw	r2,172(sp)
   114d4:	da003e17 	ldw	r8,248(sp)
   114d8:	103c160e 	bge	r2,zero,10534 <__alt_data_end+0xfc010534>
   114dc:	0005883a 	mov	r2,zero
   114e0:	003c1406 	br	10534 <__alt_data_end+0xfc010534>
   114e4:	00bfffc4 	movi	r2,-1
   114e8:	0039d906 	br	fc50 <__alt_data_end+0xfc00fc50>
   114ec:	010000f4 	movhi	r4,3
   114f0:	212b5c84 	addi	r4,r4,-21134
   114f4:	d9003515 	stw	r4,212(sp)
   114f8:	003ae406 	br	1008c <__alt_data_end+0xfc01008c>
   114fc:	013fffc4 	movi	r4,-1
   11500:	0039fa06 	br	fcec <__alt_data_end+0xfc00fcec>
   11504:	d9402d17 	ldw	r5,180(sp)
   11508:	d9801e04 	addi	r6,sp,120
   1150c:	9809883a 	mov	r4,r19
   11510:	00188040 	call	18804 <__ssprint_r>
   11514:	1039c91e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   11518:	d8c02017 	ldw	r3,128(sp)
   1151c:	da000404 	addi	r8,sp,16
   11520:	003d8406 	br	10b34 <__alt_data_end+0xfc010b34>
   11524:	0023883a 	mov	r17,zero
   11528:	003d8306 	br	10b38 <__alt_data_end+0xfc010b38>
   1152c:	010000f4 	movhi	r4,3
   11530:	212b5884 	addi	r4,r4,-21150
   11534:	d9002c15 	stw	r4,176(sp)
   11538:	d9002c17 	ldw	r4,176(sp)
   1153c:	1c47883a 	add	r3,r3,r17
   11540:	10800044 	addi	r2,r2,1
   11544:	41000015 	stw	r4,0(r8)
   11548:	44400115 	stw	r17,4(r8)
   1154c:	d8c02015 	stw	r3,128(sp)
   11550:	d8801f15 	stw	r2,124(sp)
   11554:	010001c4 	movi	r4,7
   11558:	20bfcd16 	blt	r4,r2,11490 <__alt_data_end+0xfc011490>
   1155c:	42000204 	addi	r8,r8,8
   11560:	003fd306 	br	114b0 <__alt_data_end+0xfc0114b0>
   11564:	d9402d17 	ldw	r5,180(sp)
   11568:	d9801e04 	addi	r6,sp,120
   1156c:	9809883a 	mov	r4,r19
   11570:	00188040 	call	18804 <__ssprint_r>
   11574:	1039b11e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   11578:	d8802617 	ldw	r2,152(sp)
   1157c:	d8c02017 	ldw	r3,128(sp)
   11580:	da000404 	addi	r8,sp,16
   11584:	003e1c06 	br	10df8 <__alt_data_end+0xfc010df8>
   11588:	d8802a17 	ldw	r2,168(sp)
   1158c:	00c00184 	movi	r3,6
   11590:	1880012e 	bgeu	r3,r2,11598 <___svfprintf_internal_r+0x1cf8>
   11594:	1805883a 	mov	r2,r3
   11598:	d8802b15 	stw	r2,172(sp)
   1159c:	1000f316 	blt	r2,zero,1196c <___svfprintf_internal_r+0x20cc>
   115a0:	040000f4 	movhi	r16,3
   115a4:	d8802915 	stw	r2,164(sp)
   115a8:	dd002e15 	stw	r20,184(sp)
   115ac:	d8002a15 	stw	zero,168(sp)
   115b0:	d8003215 	stw	zero,200(sp)
   115b4:	842b5604 	addi	r16,r16,-21160
   115b8:	0039883a 	mov	fp,zero
   115bc:	003a7d06 	br	ffb4 <__alt_data_end+0xfc00ffb4>
   115c0:	010000f4 	movhi	r4,3
   115c4:	212b5c84 	addi	r4,r4,-21134
   115c8:	d9003515 	stw	r4,212(sp)
   115cc:	003b3d06 	br	102c4 <__alt_data_end+0xfc0102c4>
   115d0:	d9402d17 	ldw	r5,180(sp)
   115d4:	d9801e04 	addi	r6,sp,120
   115d8:	9809883a 	mov	r4,r19
   115dc:	00188040 	call	18804 <__ssprint_r>
   115e0:	1039961e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   115e4:	d8802617 	ldw	r2,152(sp)
   115e8:	d9403317 	ldw	r5,204(sp)
   115ec:	d8c02017 	ldw	r3,128(sp)
   115f0:	da000404 	addi	r8,sp,16
   115f4:	2885c83a 	sub	r2,r5,r2
   115f8:	003e1006 	br	10e3c <__alt_data_end+0xfc010e3c>
   115fc:	00800044 	movi	r2,1
   11600:	10803fcc 	andi	r2,r2,255
   11604:	00c00044 	movi	r3,1
   11608:	10fa1026 	beq	r2,r3,fe4c <__alt_data_end+0xfc00fe4c>
   1160c:	00c00084 	movi	r3,2
   11610:	10fb8226 	beq	r2,r3,1041c <__alt_data_end+0xfc01041c>
   11614:	003a4206 	br	ff20 <__alt_data_end+0xfc00ff20>
   11618:	0021883a 	mov	r16,zero
   1161c:	003e0806 	br	10e40 <__alt_data_end+0xfc010e40>
   11620:	07000b44 	movi	fp,45
   11624:	df002785 	stb	fp,158(sp)
   11628:	0039e306 	br	fdb8 <__alt_data_end+0xfc00fdb8>
   1162c:	d9002e17 	ldw	r4,184(sp)
   11630:	d9402f17 	ldw	r5,188(sp)
   11634:	20800017 	ldw	r2,0(r4)
   11638:	21000104 	addi	r4,r4,4
   1163c:	d9002e15 	stw	r4,184(sp)
   11640:	11400015 	stw	r5,0(r2)
   11644:	0038c106 	br	f94c <__alt_data_end+0xfc00f94c>
   11648:	00c00b44 	movi	r3,45
   1164c:	d8c02785 	stb	r3,158(sp)
   11650:	d8802915 	stw	r2,164(sp)
   11654:	dc802c17 	ldw	r18,176(sp)
   11658:	d8002a15 	stw	zero,168(sp)
   1165c:	07000b44 	movi	fp,45
   11660:	003a5106 	br	ffa8 <__alt_data_end+0xfc00ffa8>
   11664:	9080004c 	andi	r2,r18,1
   11668:	1000941e 	bne	r2,zero,118bc <___svfprintf_internal_r+0x201c>
   1166c:	d8802117 	ldw	r2,132(sp)
   11670:	1405c83a 	sub	r2,r2,r16
   11674:	d8803315 	stw	r2,204(sp)
   11678:	b441151e 	bne	r22,r17,11ad0 <___svfprintf_internal_r+0x2230>
   1167c:	dd802617 	ldw	r22,152(sp)
   11680:	00bfff44 	movi	r2,-3
   11684:	b0801a16 	blt	r22,r2,116f0 <___svfprintf_internal_r+0x1e50>
   11688:	d9402a17 	ldw	r5,168(sp)
   1168c:	2d801816 	blt	r5,r22,116f0 <___svfprintf_internal_r+0x1e50>
   11690:	dd803215 	stw	r22,200(sp)
   11694:	003f3a06 	br	11380 <__alt_data_end+0xfc011380>
   11698:	1025883a 	mov	r18,r2
   1169c:	0039883a 	mov	fp,zero
   116a0:	00800084 	movi	r2,2
   116a4:	003fd606 	br	11600 <__alt_data_end+0xfc011600>
   116a8:	9080004c 	andi	r2,r18,1
   116ac:	103f191e 	bne	r2,zero,11314 <__alt_data_end+0xfc011314>
   116b0:	d8802117 	ldw	r2,132(sp)
   116b4:	003f2806 	br	11358 <__alt_data_end+0xfc011358>
   116b8:	010000f4 	movhi	r4,3
   116bc:	212b5884 	addi	r4,r4,-21150
   116c0:	d9002c15 	stw	r4,176(sp)
   116c4:	003c7c06 	br	108b8 <__alt_data_end+0xfc0108b8>
   116c8:	e005883a 	mov	r2,fp
   116cc:	003f2206 	br	11358 <__alt_data_end+0xfc011358>
   116d0:	d9002a17 	ldw	r4,168(sp)
   116d4:	df002783 	ldbu	fp,158(sp)
   116d8:	dd002e15 	stw	r20,184(sp)
   116dc:	d9002915 	stw	r4,164(sp)
   116e0:	d9002b15 	stw	r4,172(sp)
   116e4:	d8002a15 	stw	zero,168(sp)
   116e8:	d8003215 	stw	zero,200(sp)
   116ec:	003a2a06 	br	ff98 <__alt_data_end+0xfc00ff98>
   116f0:	8c7fff84 	addi	r17,r17,-2
   116f4:	b5bfffc4 	addi	r22,r22,-1
   116f8:	dd802615 	stw	r22,152(sp)
   116fc:	dc4022c5 	stb	r17,139(sp)
   11700:	b000c316 	blt	r22,zero,11a10 <___svfprintf_internal_r+0x2170>
   11704:	00800ac4 	movi	r2,43
   11708:	d8802305 	stb	r2,140(sp)
   1170c:	00800244 	movi	r2,9
   11710:	15806e16 	blt	r2,r22,118cc <___svfprintf_internal_r+0x202c>
   11714:	00800c04 	movi	r2,48
   11718:	b5800c04 	addi	r22,r22,48
   1171c:	d8802345 	stb	r2,141(sp)
   11720:	dd802385 	stb	r22,142(sp)
   11724:	d88023c4 	addi	r2,sp,143
   11728:	df0022c4 	addi	fp,sp,139
   1172c:	d8c03317 	ldw	r3,204(sp)
   11730:	1739c83a 	sub	fp,r2,fp
   11734:	d9003317 	ldw	r4,204(sp)
   11738:	e0c7883a 	add	r3,fp,r3
   1173c:	df003b15 	stw	fp,236(sp)
   11740:	d8c02b15 	stw	r3,172(sp)
   11744:	00800044 	movi	r2,1
   11748:	1100b70e 	bge	r2,r4,11a28 <___svfprintf_internal_r+0x2188>
   1174c:	d8c02b17 	ldw	r3,172(sp)
   11750:	18c00044 	addi	r3,r3,1
   11754:	d8c02b15 	stw	r3,172(sp)
   11758:	1805883a 	mov	r2,r3
   1175c:	1800b016 	blt	r3,zero,11a20 <___svfprintf_internal_r+0x2180>
   11760:	d8003215 	stw	zero,200(sp)
   11764:	003f1006 	br	113a8 <__alt_data_end+0xfc0113a8>
   11768:	d8802a17 	ldw	r2,168(sp)
   1176c:	103ec71e 	bne	r2,zero,1128c <__alt_data_end+0xfc01128c>
   11770:	dc002a15 	stw	r16,168(sp)
   11774:	003ec506 	br	1128c <__alt_data_end+0xfc01128c>
   11778:	d9402d17 	ldw	r5,180(sp)
   1177c:	d9801e04 	addi	r6,sp,120
   11780:	9809883a 	mov	r4,r19
   11784:	00188040 	call	18804 <__ssprint_r>
   11788:	10392c1e 	bne	r2,zero,fc3c <__alt_data_end+0xfc00fc3c>
   1178c:	dc402617 	ldw	r17,152(sp)
   11790:	d8c02017 	ldw	r3,128(sp)
   11794:	d8801f17 	ldw	r2,124(sp)
   11798:	da000404 	addi	r8,sp,16
   1179c:	003e7706 	br	1117c <__alt_data_end+0xfc01117c>
   117a0:	182f883a 	mov	r23,r3
   117a4:	d8002a15 	stw	zero,168(sp)
   117a8:	00389306 	br	f9f8 <__alt_data_end+0xfc00f9f8>
   117ac:	d8c02a17 	ldw	r3,168(sp)
   117b0:	d8802104 	addi	r2,sp,132
   117b4:	d8800315 	stw	r2,12(sp)
   117b8:	d9403617 	ldw	r5,216(sp)
   117bc:	d8802504 	addi	r2,sp,148
   117c0:	d8800215 	stw	r2,8(sp)
   117c4:	d8802604 	addi	r2,sp,152
   117c8:	d8c00015 	stw	r3,0(sp)
   117cc:	9809883a 	mov	r4,r19
   117d0:	d8800115 	stw	r2,4(sp)
   117d4:	01c000c4 	movi	r7,3
   117d8:	a00d883a 	mov	r6,r20
   117dc:	da003e15 	stw	r8,248(sp)
   117e0:	00142940 	call	14294 <_dtoa_r>
   117e4:	d9002a17 	ldw	r4,168(sp)
   117e8:	da003e17 	ldw	r8,248(sp)
   117ec:	1021883a 	mov	r16,r2
   117f0:	1139883a 	add	fp,r2,r4
   117f4:	2007883a 	mov	r3,r4
   117f8:	81000007 	ldb	r4,0(r16)
   117fc:	00800c04 	movi	r2,48
   11800:	20806f26 	beq	r4,r2,119c0 <___svfprintf_internal_r+0x2120>
   11804:	d8c02617 	ldw	r3,152(sp)
   11808:	e0f9883a 	add	fp,fp,r3
   1180c:	003ec206 	br	11318 <__alt_data_end+0xfc011318>
   11810:	00c00b44 	movi	r3,45
   11814:	2520003c 	xorhi	r20,r4,32768
   11818:	d8c02905 	stb	r3,164(sp)
   1181c:	003ea106 	br	112a4 <__alt_data_end+0xfc0112a4>
   11820:	d8c03217 	ldw	r3,200(sp)
   11824:	00c0890e 	bge	zero,r3,11a4c <___svfprintf_internal_r+0x21ac>
   11828:	00800044 	movi	r2,1
   1182c:	d9003317 	ldw	r4,204(sp)
   11830:	1105883a 	add	r2,r2,r4
   11834:	d8802b15 	stw	r2,172(sp)
   11838:	10005f16 	blt	r2,zero,119b8 <___svfprintf_internal_r+0x2118>
   1183c:	044019c4 	movi	r17,103
   11840:	003ed906 	br	113a8 <__alt_data_end+0xfc0113a8>
   11844:	d9002a17 	ldw	r4,168(sp)
   11848:	20c00044 	addi	r3,r4,1
   1184c:	003e9c06 	br	112c0 <__alt_data_end+0xfc0112c0>
   11850:	d9002a17 	ldw	r4,168(sp)
   11854:	00c0680e 	bge	zero,r3,119f8 <___svfprintf_internal_r+0x2158>
   11858:	2000461e 	bne	r4,zero,11974 <___svfprintf_internal_r+0x20d4>
   1185c:	9480004c 	andi	r18,r18,1
   11860:	9000441e 	bne	r18,zero,11974 <___svfprintf_internal_r+0x20d4>
   11864:	1805883a 	mov	r2,r3
   11868:	1800a116 	blt	r3,zero,11af0 <___svfprintf_internal_r+0x2250>
   1186c:	d8c03217 	ldw	r3,200(sp)
   11870:	d8c02b15 	stw	r3,172(sp)
   11874:	003ecc06 	br	113a8 <__alt_data_end+0xfc0113a8>
   11878:	d9402a17 	ldw	r5,168(sp)
   1187c:	d8802104 	addi	r2,sp,132
   11880:	d8800315 	stw	r2,12(sp)
   11884:	d9400015 	stw	r5,0(sp)
   11888:	d8802504 	addi	r2,sp,148
   1188c:	d9403617 	ldw	r5,216(sp)
   11890:	d8800215 	stw	r2,8(sp)
   11894:	d8802604 	addi	r2,sp,152
   11898:	d8800115 	stw	r2,4(sp)
   1189c:	01c000c4 	movi	r7,3
   118a0:	a00d883a 	mov	r6,r20
   118a4:	9809883a 	mov	r4,r19
   118a8:	da003e15 	stw	r8,248(sp)
   118ac:	00142940 	call	14294 <_dtoa_r>
   118b0:	d8c02a17 	ldw	r3,168(sp)
   118b4:	da003e17 	ldw	r8,248(sp)
   118b8:	1021883a 	mov	r16,r2
   118bc:	00801184 	movi	r2,70
   118c0:	80f9883a 	add	fp,r16,r3
   118c4:	88bfcc26 	beq	r17,r2,117f8 <__alt_data_end+0xfc0117f8>
   118c8:	003e9306 	br	11318 <__alt_data_end+0xfc011318>
   118cc:	df0022c4 	addi	fp,sp,139
   118d0:	dc002a15 	stw	r16,168(sp)
   118d4:	9829883a 	mov	r20,r19
   118d8:	e021883a 	mov	r16,fp
   118dc:	4027883a 	mov	r19,r8
   118e0:	b009883a 	mov	r4,r22
   118e4:	01400284 	movi	r5,10
   118e8:	000d05c0 	call	d05c <__modsi3>
   118ec:	10800c04 	addi	r2,r2,48
   118f0:	843fffc4 	addi	r16,r16,-1
   118f4:	b009883a 	mov	r4,r22
   118f8:	01400284 	movi	r5,10
   118fc:	80800005 	stb	r2,0(r16)
   11900:	000cfd80 	call	cfd8 <__divsi3>
   11904:	102d883a 	mov	r22,r2
   11908:	00800244 	movi	r2,9
   1190c:	15bff416 	blt	r2,r22,118e0 <__alt_data_end+0xfc0118e0>
   11910:	9811883a 	mov	r8,r19
   11914:	b0800c04 	addi	r2,r22,48
   11918:	a027883a 	mov	r19,r20
   1191c:	8029883a 	mov	r20,r16
   11920:	a17fffc4 	addi	r5,r20,-1
   11924:	a0bfffc5 	stb	r2,-1(r20)
   11928:	dc002a17 	ldw	r16,168(sp)
   1192c:	2f00782e 	bgeu	r5,fp,11b10 <___svfprintf_internal_r+0x2270>
   11930:	d9c02384 	addi	r7,sp,142
   11934:	3d0fc83a 	sub	r7,r7,r20
   11938:	d9002344 	addi	r4,sp,141
   1193c:	e1cf883a 	add	r7,fp,r7
   11940:	00000106 	br	11948 <___svfprintf_internal_r+0x20a8>
   11944:	28800003 	ldbu	r2,0(r5)
   11948:	20800005 	stb	r2,0(r4)
   1194c:	21000044 	addi	r4,r4,1
   11950:	29400044 	addi	r5,r5,1
   11954:	21fffb1e 	bne	r4,r7,11944 <__alt_data_end+0xfc011944>
   11958:	d8802304 	addi	r2,sp,140
   1195c:	1505c83a 	sub	r2,r2,r20
   11960:	d8c02344 	addi	r3,sp,141
   11964:	1885883a 	add	r2,r3,r2
   11968:	003f7006 	br	1172c <__alt_data_end+0xfc01172c>
   1196c:	0005883a 	mov	r2,zero
   11970:	003f0b06 	br	115a0 <__alt_data_end+0xfc0115a0>
   11974:	d9002a17 	ldw	r4,168(sp)
   11978:	d8c03217 	ldw	r3,200(sp)
   1197c:	20800044 	addi	r2,r4,1
   11980:	1885883a 	add	r2,r3,r2
   11984:	d8802b15 	stw	r2,172(sp)
   11988:	103e870e 	bge	r2,zero,113a8 <__alt_data_end+0xfc0113a8>
   1198c:	0005883a 	mov	r2,zero
   11990:	003e8506 	br	113a8 <__alt_data_end+0xfc0113a8>
   11994:	010000f4 	movhi	r4,3
   11998:	212b5884 	addi	r4,r4,-21150
   1199c:	d9002c15 	stw	r4,176(sp)
   119a0:	003cc506 	br	10cb8 <__alt_data_end+0xfc010cb8>
   119a4:	d8c03217 	ldw	r3,200(sp)
   119a8:	18c00044 	addi	r3,r3,1
   119ac:	d8c02b15 	stw	r3,172(sp)
   119b0:	1805883a 	mov	r2,r3
   119b4:	183fa10e 	bge	r3,zero,1183c <__alt_data_end+0xfc01183c>
   119b8:	0005883a 	mov	r2,zero
   119bc:	003f9f06 	br	1183c <__alt_data_end+0xfc01183c>
   119c0:	d9003617 	ldw	r4,216(sp)
   119c4:	000d883a 	mov	r6,zero
   119c8:	000f883a 	mov	r7,zero
   119cc:	a00b883a 	mov	r5,r20
   119d0:	d8c03d15 	stw	r3,244(sp)
   119d4:	da003e15 	stw	r8,248(sp)
   119d8:	001dbf40 	call	1dbf4 <__eqdf2>
   119dc:	d8c03d17 	ldw	r3,244(sp)
   119e0:	da003e17 	ldw	r8,248(sp)
   119e4:	103f8726 	beq	r2,zero,11804 <__alt_data_end+0xfc011804>
   119e8:	00800044 	movi	r2,1
   119ec:	10c7c83a 	sub	r3,r2,r3
   119f0:	d8c02615 	stw	r3,152(sp)
   119f4:	003f8406 	br	11808 <__alt_data_end+0xfc011808>
   119f8:	20000e1e 	bne	r4,zero,11a34 <___svfprintf_internal_r+0x2194>
   119fc:	9480004c 	andi	r18,r18,1
   11a00:	90000c1e 	bne	r18,zero,11a34 <___svfprintf_internal_r+0x2194>
   11a04:	00800044 	movi	r2,1
   11a08:	d8802b15 	stw	r2,172(sp)
   11a0c:	003e6606 	br	113a8 <__alt_data_end+0xfc0113a8>
   11a10:	00800b44 	movi	r2,45
   11a14:	05adc83a 	sub	r22,zero,r22
   11a18:	d8802305 	stb	r2,140(sp)
   11a1c:	003f3b06 	br	1170c <__alt_data_end+0xfc01170c>
   11a20:	0005883a 	mov	r2,zero
   11a24:	003f4e06 	br	11760 <__alt_data_end+0xfc011760>
   11a28:	90a4703a 	and	r18,r18,r2
   11a2c:	903f4a26 	beq	r18,zero,11758 <__alt_data_end+0xfc011758>
   11a30:	003f4606 	br	1174c <__alt_data_end+0xfc01174c>
   11a34:	d8c02a17 	ldw	r3,168(sp)
   11a38:	18c00084 	addi	r3,r3,2
   11a3c:	d8c02b15 	stw	r3,172(sp)
   11a40:	1805883a 	mov	r2,r3
   11a44:	183e580e 	bge	r3,zero,113a8 <__alt_data_end+0xfc0113a8>
   11a48:	003fd006 	br	1198c <__alt_data_end+0xfc01198c>
   11a4c:	00800084 	movi	r2,2
   11a50:	10c5c83a 	sub	r2,r2,r3
   11a54:	003f7506 	br	1182c <__alt_data_end+0xfc01182c>
   11a58:	d9402e17 	ldw	r5,184(sp)
   11a5c:	d9002e17 	ldw	r4,184(sp)
   11a60:	bc400043 	ldbu	r17,1(r23)
   11a64:	29400017 	ldw	r5,0(r5)
   11a68:	20800104 	addi	r2,r4,4
   11a6c:	d8802e15 	stw	r2,184(sp)
   11a70:	d9402a15 	stw	r5,168(sp)
   11a74:	182f883a 	mov	r23,r3
   11a78:	283df10e 	bge	r5,zero,11240 <__alt_data_end+0xfc011240>
   11a7c:	8c403fcc 	andi	r17,r17,255
   11a80:	017fffc4 	movi	r5,-1
   11a84:	8c40201c 	xori	r17,r17,128
   11a88:	d9402a15 	stw	r5,168(sp)
   11a8c:	8c7fe004 	addi	r17,r17,-128
   11a90:	0037d806 	br	f9f4 <__alt_data_end+0xfc00f9f4>
   11a94:	9080004c 	andi	r2,r18,1
   11a98:	0039883a 	mov	fp,zero
   11a9c:	10000726 	beq	r2,zero,11abc <___svfprintf_internal_r+0x221c>
   11aa0:	d8c02817 	ldw	r3,160(sp)
   11aa4:	dc001dc4 	addi	r16,sp,119
   11aa8:	00800c04 	movi	r2,48
   11aac:	1c07c83a 	sub	r3,r3,r16
   11ab0:	d8801dc5 	stb	r2,119(sp)
   11ab4:	d8c02b15 	stw	r3,172(sp)
   11ab8:	00393106 	br	ff80 <__alt_data_end+0xfc00ff80>
   11abc:	d8002b15 	stw	zero,172(sp)
   11ac0:	dc001e04 	addi	r16,sp,120
   11ac4:	00392e06 	br	ff80 <__alt_data_end+0xfc00ff80>
   11ac8:	0005883a 	mov	r2,zero
   11acc:	003e3306 	br	1139c <__alt_data_end+0xfc01139c>
   11ad0:	dd802617 	ldw	r22,152(sp)
   11ad4:	003f0706 	br	116f4 <__alt_data_end+0xfc0116f4>
   11ad8:	d8c02b03 	ldbu	r3,172(sp)
   11adc:	d8c02785 	stb	r3,158(sp)
   11ae0:	003a3506 	br	103b8 <__alt_data_end+0xfc0103b8>
   11ae4:	d8c02b03 	ldbu	r3,172(sp)
   11ae8:	d8c02785 	stb	r3,158(sp)
   11aec:	003a1706 	br	1034c <__alt_data_end+0xfc01034c>
   11af0:	0005883a 	mov	r2,zero
   11af4:	003f5d06 	br	1186c <__alt_data_end+0xfc01186c>
   11af8:	d8c02b03 	ldbu	r3,172(sp)
   11afc:	d8c02785 	stb	r3,158(sp)
   11b00:	0038f306 	br	fed0 <__alt_data_end+0xfc00fed0>
   11b04:	d8c02b03 	ldbu	r3,172(sp)
   11b08:	d8c02785 	stb	r3,158(sp)
   11b0c:	0038be06 	br	fe08 <__alt_data_end+0xfc00fe08>
   11b10:	d8802344 	addi	r2,sp,141
   11b14:	003f0506 	br	1172c <__alt_data_end+0xfc01172c>
   11b18:	d8c02b03 	ldbu	r3,172(sp)
   11b1c:	d8c02785 	stb	r3,158(sp)
   11b20:	00388b06 	br	fd50 <__alt_data_end+0xfc00fd50>
   11b24:	d8c02b03 	ldbu	r3,172(sp)
   11b28:	d8c02785 	stb	r3,158(sp)
   11b2c:	003ad706 	br	1068c <__alt_data_end+0xfc01068c>
   11b30:	d9403917 	ldw	r5,228(sp)
   11b34:	00800304 	movi	r2,12
   11b38:	28800015 	stw	r2,0(r5)
   11b3c:	00bfffc4 	movi	r2,-1
   11b40:	00384306 	br	fc50 <__alt_data_end+0xfc00fc50>
   11b44:	d8c02b03 	ldbu	r3,172(sp)
   11b48:	d8c02785 	stb	r3,158(sp)
   11b4c:	003ab606 	br	10628 <__alt_data_end+0xfc010628>
   11b50:	d8c02b03 	ldbu	r3,172(sp)
   11b54:	d8c02785 	stb	r3,158(sp)
   11b58:	003a8906 	br	10580 <__alt_data_end+0xfc010580>

00011b5c <_times_r>:
   11b5c:	2809883a 	mov	r4,r5
   11b60:	001fc0c1 	jmpi	1fc0c <times>

00011b64 <___vfprintf_internal_r>:
   11b64:	deffb804 	addi	sp,sp,-288
   11b68:	dfc04715 	stw	ra,284(sp)
   11b6c:	ddc04515 	stw	r23,276(sp)
   11b70:	dd404315 	stw	r21,268(sp)
   11b74:	d9002d15 	stw	r4,180(sp)
   11b78:	282f883a 	mov	r23,r5
   11b7c:	302b883a 	mov	r21,r6
   11b80:	d9c02e15 	stw	r7,184(sp)
   11b84:	df004615 	stw	fp,280(sp)
   11b88:	dd804415 	stw	r22,272(sp)
   11b8c:	dd004215 	stw	r20,264(sp)
   11b90:	dcc04115 	stw	r19,260(sp)
   11b94:	dc804015 	stw	r18,256(sp)
   11b98:	dc403f15 	stw	r17,252(sp)
   11b9c:	dc003e15 	stw	r16,248(sp)
   11ba0:	0016aa40 	call	16aa4 <_localeconv_r>
   11ba4:	10800017 	ldw	r2,0(r2)
   11ba8:	1009883a 	mov	r4,r2
   11bac:	d8803415 	stw	r2,208(sp)
   11bb0:	000f8080 	call	f808 <strlen>
   11bb4:	d8803715 	stw	r2,220(sp)
   11bb8:	d8802d17 	ldw	r2,180(sp)
   11bbc:	10000226 	beq	r2,zero,11bc8 <___vfprintf_internal_r+0x64>
   11bc0:	10800e17 	ldw	r2,56(r2)
   11bc4:	1000fb26 	beq	r2,zero,11fb4 <___vfprintf_internal_r+0x450>
   11bc8:	b880030b 	ldhu	r2,12(r23)
   11bcc:	10c8000c 	andi	r3,r2,8192
   11bd0:	1800061e 	bne	r3,zero,11bec <___vfprintf_internal_r+0x88>
   11bd4:	b9001917 	ldw	r4,100(r23)
   11bd8:	00f7ffc4 	movi	r3,-8193
   11bdc:	10880014 	ori	r2,r2,8192
   11be0:	20c6703a 	and	r3,r4,r3
   11be4:	b880030d 	sth	r2,12(r23)
   11be8:	b8c01915 	stw	r3,100(r23)
   11bec:	10c0020c 	andi	r3,r2,8
   11bf0:	1800c326 	beq	r3,zero,11f00 <___vfprintf_internal_r+0x39c>
   11bf4:	b8c00417 	ldw	r3,16(r23)
   11bf8:	1800c126 	beq	r3,zero,11f00 <___vfprintf_internal_r+0x39c>
   11bfc:	1080068c 	andi	r2,r2,26
   11c00:	00c00284 	movi	r3,10
   11c04:	10c0c626 	beq	r2,r3,11f20 <___vfprintf_internal_r+0x3bc>
   11c08:	d8c00404 	addi	r3,sp,16
   11c0c:	050000f4 	movhi	r20,3
   11c10:	d9001e04 	addi	r4,sp,120
   11c14:	a52b6084 	addi	r20,r20,-21118
   11c18:	d8c01e15 	stw	r3,120(sp)
   11c1c:	d8002015 	stw	zero,128(sp)
   11c20:	d8001f15 	stw	zero,124(sp)
   11c24:	d8003315 	stw	zero,204(sp)
   11c28:	d8003615 	stw	zero,216(sp)
   11c2c:	d8003815 	stw	zero,224(sp)
   11c30:	1811883a 	mov	r8,r3
   11c34:	d8003915 	stw	zero,228(sp)
   11c38:	d8003a15 	stw	zero,232(sp)
   11c3c:	d8002f15 	stw	zero,188(sp)
   11c40:	d9002815 	stw	r4,160(sp)
   11c44:	a8800007 	ldb	r2,0(r21)
   11c48:	10028b26 	beq	r2,zero,12678 <___vfprintf_internal_r+0xb14>
   11c4c:	00c00944 	movi	r3,37
   11c50:	a823883a 	mov	r17,r21
   11c54:	10c0021e 	bne	r2,r3,11c60 <___vfprintf_internal_r+0xfc>
   11c58:	00001406 	br	11cac <___vfprintf_internal_r+0x148>
   11c5c:	10c00326 	beq	r2,r3,11c6c <___vfprintf_internal_r+0x108>
   11c60:	8c400044 	addi	r17,r17,1
   11c64:	88800007 	ldb	r2,0(r17)
   11c68:	103ffc1e 	bne	r2,zero,11c5c <__alt_data_end+0xfc011c5c>
   11c6c:	8d61c83a 	sub	r16,r17,r21
   11c70:	80000e26 	beq	r16,zero,11cac <___vfprintf_internal_r+0x148>
   11c74:	d8c02017 	ldw	r3,128(sp)
   11c78:	d8801f17 	ldw	r2,124(sp)
   11c7c:	45400015 	stw	r21,0(r8)
   11c80:	1c07883a 	add	r3,r3,r16
   11c84:	10800044 	addi	r2,r2,1
   11c88:	d8c02015 	stw	r3,128(sp)
   11c8c:	44000115 	stw	r16,4(r8)
   11c90:	d8801f15 	stw	r2,124(sp)
   11c94:	00c001c4 	movi	r3,7
   11c98:	1880a916 	blt	r3,r2,11f40 <___vfprintf_internal_r+0x3dc>
   11c9c:	42000204 	addi	r8,r8,8
   11ca0:	d9402f17 	ldw	r5,188(sp)
   11ca4:	2c0b883a 	add	r5,r5,r16
   11ca8:	d9402f15 	stw	r5,188(sp)
   11cac:	88800007 	ldb	r2,0(r17)
   11cb0:	1000aa26 	beq	r2,zero,11f5c <___vfprintf_internal_r+0x3f8>
   11cb4:	8d400044 	addi	r21,r17,1
   11cb8:	8c400047 	ldb	r17,1(r17)
   11cbc:	0021883a 	mov	r16,zero
   11cc0:	00bfffc4 	movi	r2,-1
   11cc4:	0025883a 	mov	r18,zero
   11cc8:	dc002905 	stb	r16,164(sp)
   11ccc:	d8002785 	stb	zero,158(sp)
   11cd0:	d8002b05 	stb	zero,172(sp)
   11cd4:	d8802a15 	stw	r2,168(sp)
   11cd8:	d8003115 	stw	zero,196(sp)
   11cdc:	04c01604 	movi	r19,88
   11ce0:	05800244 	movi	r22,9
   11ce4:	9021883a 	mov	r16,r18
   11ce8:	4039883a 	mov	fp,r8
   11cec:	ad400044 	addi	r21,r21,1
   11cf0:	88bff804 	addi	r2,r17,-32
   11cf4:	98833236 	bltu	r19,r2,129c0 <___vfprintf_internal_r+0xe5c>
   11cf8:	100490ba 	slli	r2,r2,2
   11cfc:	00c00074 	movhi	r3,1
   11d00:	18c74404 	addi	r3,r3,7440
   11d04:	10c5883a 	add	r2,r2,r3
   11d08:	10800017 	ldw	r2,0(r2)
   11d0c:	1000683a 	jmp	r2
   11d10:	000128b8 	rdprs	zero,zero,1186
   11d14:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d18:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d1c:	000128d8 	cmpnei	zero,zero,1187
   11d20:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d24:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d28:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d2c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d30:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d34:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d38:	00011fc0 	call	11fc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x268>
   11d3c:	000127c8 	cmpgei	zero,zero,1183
   11d40:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d44:	00011e84 	movi	zero,1146
   11d48:	00011fe4 	muli	zero,zero,1151
   11d4c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d50:	00012034 	movhi	zero,1152
   11d54:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d58:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d5c:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d60:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d64:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d68:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d6c:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d70:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d74:	00012040 	call	1204 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x270>
   11d78:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d7c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d80:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d84:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d88:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d8c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d90:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d94:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d98:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11d9c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11da0:	0001207c 	xorhi	zero,zero,1153
   11da4:	00012144 	movi	zero,1157
   11da8:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dac:	00012144 	movi	zero,1157
   11db0:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11db4:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11db8:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dbc:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dc0:	000121f0 	cmpltui	zero,zero,1159
   11dc4:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dc8:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dcc:	000121fc 	xorhi	zero,zero,1159
   11dd0:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dd4:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dd8:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11ddc:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11de0:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11de4:	00012680 	call	1268 <_ZN3USB11outTransferEhhtPh+0x28>
   11de8:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dec:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11df0:	000126ec 	andhi	zero,zero,1179
   11df4:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11df8:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11dfc:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e00:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e04:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e08:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e0c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e10:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e14:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e18:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e1c:	00012964 	muli	zero,zero,1189
   11e20:	000128e4 	muli	zero,zero,1187
   11e24:	00012144 	movi	zero,1157
   11e28:	00012144 	movi	zero,1157
   11e2c:	00012144 	movi	zero,1157
   11e30:	00012904 	movi	zero,1188
   11e34:	000128e4 	muli	zero,zero,1187
   11e38:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e3c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e40:	00012910 	cmplti	zero,zero,1188
   11e44:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e48:	00012924 	muli	zero,zero,1188
   11e4c:	000127a8 	cmpgeui	zero,zero,1182
   11e50:	00011e90 	cmplti	zero,zero,1146
   11e54:	000127e0 	cmpeqi	zero,zero,1183
   11e58:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e5c:	000127ec 	andhi	zero,zero,1183
   11e60:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e64:	00012850 	cmplti	zero,zero,1185
   11e68:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e6c:	000129c0 	call	129c <_ZN3USB11outTransferEhhtPh+0x5c>
   11e70:	00012870 	cmpltui	zero,zero,1185
   11e74:	d8c03117 	ldw	r3,196(sp)
   11e78:	d8802e15 	stw	r2,184(sp)
   11e7c:	00c7c83a 	sub	r3,zero,r3
   11e80:	d8c03115 	stw	r3,196(sp)
   11e84:	84000114 	ori	r16,r16,4
   11e88:	ac400007 	ldb	r17,0(r21)
   11e8c:	003f9706 	br	11cec <__alt_data_end+0xfc011cec>
   11e90:	00800c04 	movi	r2,48
   11e94:	d8802705 	stb	r2,156(sp)
   11e98:	00801e04 	movi	r2,120
   11e9c:	d8802745 	stb	r2,157(sp)
   11ea0:	d9002a17 	ldw	r4,168(sp)
   11ea4:	d8802e17 	ldw	r2,184(sp)
   11ea8:	d8002785 	stb	zero,158(sp)
   11eac:	e011883a 	mov	r8,fp
   11eb0:	10c00104 	addi	r3,r2,4
   11eb4:	14c00017 	ldw	r19,0(r2)
   11eb8:	002d883a 	mov	r22,zero
   11ebc:	80800094 	ori	r2,r16,2
   11ec0:	2002ca16 	blt	r4,zero,129ec <___vfprintf_internal_r+0xe88>
   11ec4:	00bfdfc4 	movi	r2,-129
   11ec8:	80a4703a 	and	r18,r16,r2
   11ecc:	d8c02e15 	stw	r3,184(sp)
   11ed0:	94800094 	ori	r18,r18,2
   11ed4:	9802b41e 	bne	r19,zero,129a8 <___vfprintf_internal_r+0xe44>
   11ed8:	014000f4 	movhi	r5,3
   11edc:	296b5104 	addi	r5,r5,-21180
   11ee0:	d9403915 	stw	r5,228(sp)
   11ee4:	04401e04 	movi	r17,120
   11ee8:	d8802a17 	ldw	r2,168(sp)
   11eec:	0039883a 	mov	fp,zero
   11ef0:	1001fa26 	beq	r2,zero,126dc <___vfprintf_internal_r+0xb78>
   11ef4:	0027883a 	mov	r19,zero
   11ef8:	002d883a 	mov	r22,zero
   11efc:	00021906 	br	12764 <___vfprintf_internal_r+0xc00>
   11f00:	d9002d17 	ldw	r4,180(sp)
   11f04:	b80b883a 	mov	r5,r23
   11f08:	0013f180 	call	13f18 <__swsetup_r>
   11f0c:	1005dc1e 	bne	r2,zero,13680 <___vfprintf_internal_r+0x1b1c>
   11f10:	b880030b 	ldhu	r2,12(r23)
   11f14:	00c00284 	movi	r3,10
   11f18:	1080068c 	andi	r2,r2,26
   11f1c:	10ff3a1e 	bne	r2,r3,11c08 <__alt_data_end+0xfc011c08>
   11f20:	b880038f 	ldh	r2,14(r23)
   11f24:	103f3816 	blt	r2,zero,11c08 <__alt_data_end+0xfc011c08>
   11f28:	d9c02e17 	ldw	r7,184(sp)
   11f2c:	d9002d17 	ldw	r4,180(sp)
   11f30:	a80d883a 	mov	r6,r21
   11f34:	b80b883a 	mov	r5,r23
   11f38:	0013e5c0 	call	13e5c <__sbprintf>
   11f3c:	00001106 	br	11f84 <___vfprintf_internal_r+0x420>
   11f40:	d9002d17 	ldw	r4,180(sp)
   11f44:	d9801e04 	addi	r6,sp,120
   11f48:	b80b883a 	mov	r5,r23
   11f4c:	0019e700 	call	19e70 <__sprint_r>
   11f50:	1000081e 	bne	r2,zero,11f74 <___vfprintf_internal_r+0x410>
   11f54:	da000404 	addi	r8,sp,16
   11f58:	003f5106 	br	11ca0 <__alt_data_end+0xfc011ca0>
   11f5c:	d8802017 	ldw	r2,128(sp)
   11f60:	10000426 	beq	r2,zero,11f74 <___vfprintf_internal_r+0x410>
   11f64:	d9002d17 	ldw	r4,180(sp)
   11f68:	d9801e04 	addi	r6,sp,120
   11f6c:	b80b883a 	mov	r5,r23
   11f70:	0019e700 	call	19e70 <__sprint_r>
   11f74:	b880030b 	ldhu	r2,12(r23)
   11f78:	1080100c 	andi	r2,r2,64
   11f7c:	1005c01e 	bne	r2,zero,13680 <___vfprintf_internal_r+0x1b1c>
   11f80:	d8802f17 	ldw	r2,188(sp)
   11f84:	dfc04717 	ldw	ra,284(sp)
   11f88:	df004617 	ldw	fp,280(sp)
   11f8c:	ddc04517 	ldw	r23,276(sp)
   11f90:	dd804417 	ldw	r22,272(sp)
   11f94:	dd404317 	ldw	r21,268(sp)
   11f98:	dd004217 	ldw	r20,264(sp)
   11f9c:	dcc04117 	ldw	r19,260(sp)
   11fa0:	dc804017 	ldw	r18,256(sp)
   11fa4:	dc403f17 	ldw	r17,252(sp)
   11fa8:	dc003e17 	ldw	r16,248(sp)
   11fac:	dec04804 	addi	sp,sp,288
   11fb0:	f800283a 	ret
   11fb4:	d9002d17 	ldw	r4,180(sp)
   11fb8:	0015f240 	call	15f24 <__sinit>
   11fbc:	003f0206 	br	11bc8 <__alt_data_end+0xfc011bc8>
   11fc0:	d9002e17 	ldw	r4,184(sp)
   11fc4:	d9402e17 	ldw	r5,184(sp)
   11fc8:	21000017 	ldw	r4,0(r4)
   11fcc:	28800104 	addi	r2,r5,4
   11fd0:	d9003115 	stw	r4,196(sp)
   11fd4:	203fa716 	blt	r4,zero,11e74 <__alt_data_end+0xfc011e74>
   11fd8:	d8802e15 	stw	r2,184(sp)
   11fdc:	ac400007 	ldb	r17,0(r21)
   11fe0:	003f4206 	br	11cec <__alt_data_end+0xfc011cec>
   11fe4:	ac400007 	ldb	r17,0(r21)
   11fe8:	01000a84 	movi	r4,42
   11fec:	a8c00044 	addi	r3,r21,1
   11ff0:	89075826 	beq	r17,r4,13d54 <___vfprintf_internal_r+0x21f0>
   11ff4:	8cbff404 	addi	r18,r17,-48
   11ff8:	b486ae36 	bltu	r22,r18,13ab4 <___vfprintf_internal_r+0x1f50>
   11ffc:	0009883a 	mov	r4,zero
   12000:	1823883a 	mov	r17,r3
   12004:	01400284 	movi	r5,10
   12008:	000d18c0 	call	d18c <__mulsi3>
   1200c:	88c00007 	ldb	r3,0(r17)
   12010:	1489883a 	add	r4,r2,r18
   12014:	8d400044 	addi	r21,r17,1
   12018:	1cbff404 	addi	r18,r3,-48
   1201c:	a823883a 	mov	r17,r21
   12020:	b4bff82e 	bgeu	r22,r18,12004 <__alt_data_end+0xfc012004>
   12024:	1823883a 	mov	r17,r3
   12028:	2005f616 	blt	r4,zero,13804 <___vfprintf_internal_r+0x1ca0>
   1202c:	d9002a15 	stw	r4,168(sp)
   12030:	003f2f06 	br	11cf0 <__alt_data_end+0xfc011cf0>
   12034:	84002014 	ori	r16,r16,128
   12038:	ac400007 	ldb	r17,0(r21)
   1203c:	003f2b06 	br	11cec <__alt_data_end+0xfc011cec>
   12040:	8cbff404 	addi	r18,r17,-48
   12044:	d8003115 	stw	zero,196(sp)
   12048:	0009883a 	mov	r4,zero
   1204c:	a823883a 	mov	r17,r21
   12050:	01400284 	movi	r5,10
   12054:	000d18c0 	call	d18c <__mulsi3>
   12058:	88c00007 	ldb	r3,0(r17)
   1205c:	9089883a 	add	r4,r18,r2
   12060:	ad400044 	addi	r21,r21,1
   12064:	1cbff404 	addi	r18,r3,-48
   12068:	a823883a 	mov	r17,r21
   1206c:	b4bff82e 	bgeu	r22,r18,12050 <__alt_data_end+0xfc012050>
   12070:	1823883a 	mov	r17,r3
   12074:	d9003115 	stw	r4,196(sp)
   12078:	003f1d06 	br	11cf0 <__alt_data_end+0xfc011cf0>
   1207c:	8025883a 	mov	r18,r16
   12080:	dc002903 	ldbu	r16,164(sp)
   12084:	e011883a 	mov	r8,fp
   12088:	84003fcc 	andi	r16,r16,255
   1208c:	8007531e 	bne	r16,zero,13ddc <___vfprintf_internal_r+0x2278>
   12090:	94800414 	ori	r18,r18,16
   12094:	9080080c 	andi	r2,r18,32
   12098:	1003a326 	beq	r2,zero,12f28 <___vfprintf_internal_r+0x13c4>
   1209c:	d9002e17 	ldw	r4,184(sp)
   120a0:	20800117 	ldw	r2,4(r4)
   120a4:	24c00017 	ldw	r19,0(r4)
   120a8:	21000204 	addi	r4,r4,8
   120ac:	d9002e15 	stw	r4,184(sp)
   120b0:	102d883a 	mov	r22,r2
   120b4:	10047316 	blt	r2,zero,13284 <___vfprintf_internal_r+0x1720>
   120b8:	d9002a17 	ldw	r4,168(sp)
   120bc:	df002783 	ldbu	fp,158(sp)
   120c0:	2003e416 	blt	r4,zero,13054 <___vfprintf_internal_r+0x14f0>
   120c4:	00ffdfc4 	movi	r3,-129
   120c8:	9d84b03a 	or	r2,r19,r22
   120cc:	90e4703a 	and	r18,r18,r3
   120d0:	10018026 	beq	r2,zero,126d4 <___vfprintf_internal_r+0xb70>
   120d4:	b003ab26 	beq	r22,zero,12f84 <___vfprintf_internal_r+0x1420>
   120d8:	dc402915 	stw	r17,164(sp)
   120dc:	dc001e04 	addi	r16,sp,120
   120e0:	b023883a 	mov	r17,r22
   120e4:	402d883a 	mov	r22,r8
   120e8:	9809883a 	mov	r4,r19
   120ec:	880b883a 	mov	r5,r17
   120f0:	01800284 	movi	r6,10
   120f4:	000f883a 	mov	r7,zero
   120f8:	001c3b40 	call	1c3b4 <__umoddi3>
   120fc:	10800c04 	addi	r2,r2,48
   12100:	843fffc4 	addi	r16,r16,-1
   12104:	9809883a 	mov	r4,r19
   12108:	880b883a 	mov	r5,r17
   1210c:	80800005 	stb	r2,0(r16)
   12110:	01800284 	movi	r6,10
   12114:	000f883a 	mov	r7,zero
   12118:	001bdb80 	call	1bdb8 <__udivdi3>
   1211c:	1027883a 	mov	r19,r2
   12120:	10c4b03a 	or	r2,r2,r3
   12124:	1823883a 	mov	r17,r3
   12128:	103fef1e 	bne	r2,zero,120e8 <__alt_data_end+0xfc0120e8>
   1212c:	d8c02817 	ldw	r3,160(sp)
   12130:	dc402917 	ldw	r17,164(sp)
   12134:	b011883a 	mov	r8,r22
   12138:	1c07c83a 	sub	r3,r3,r16
   1213c:	d8c02b15 	stw	r3,172(sp)
   12140:	00005f06 	br	122c0 <___vfprintf_internal_r+0x75c>
   12144:	8025883a 	mov	r18,r16
   12148:	dc002903 	ldbu	r16,164(sp)
   1214c:	e011883a 	mov	r8,fp
   12150:	84003fcc 	andi	r16,r16,255
   12154:	80071e1e 	bne	r16,zero,13dd0 <___vfprintf_internal_r+0x226c>
   12158:	9080020c 	andi	r2,r18,8
   1215c:	1004af26 	beq	r2,zero,1341c <___vfprintf_internal_r+0x18b8>
   12160:	d9002e17 	ldw	r4,184(sp)
   12164:	d9402e17 	ldw	r5,184(sp)
   12168:	d8802e17 	ldw	r2,184(sp)
   1216c:	21000017 	ldw	r4,0(r4)
   12170:	29400117 	ldw	r5,4(r5)
   12174:	10800204 	addi	r2,r2,8
   12178:	d9003615 	stw	r4,216(sp)
   1217c:	d9403815 	stw	r5,224(sp)
   12180:	d8802e15 	stw	r2,184(sp)
   12184:	d9003617 	ldw	r4,216(sp)
   12188:	d9403817 	ldw	r5,224(sp)
   1218c:	da003d15 	stw	r8,244(sp)
   12190:	04000044 	movi	r16,1
   12194:	00186540 	call	18654 <__fpclassifyd>
   12198:	da003d17 	ldw	r8,244(sp)
   1219c:	1404441e 	bne	r2,r16,132b0 <___vfprintf_internal_r+0x174c>
   121a0:	d9003617 	ldw	r4,216(sp)
   121a4:	d9403817 	ldw	r5,224(sp)
   121a8:	000d883a 	mov	r6,zero
   121ac:	000f883a 	mov	r7,zero
   121b0:	001dd580 	call	1dd58 <__ledf2>
   121b4:	da003d17 	ldw	r8,244(sp)
   121b8:	1005e316 	blt	r2,zero,13948 <___vfprintf_internal_r+0x1de4>
   121bc:	df002783 	ldbu	fp,158(sp)
   121c0:	008011c4 	movi	r2,71
   121c4:	1445580e 	bge	r2,r17,13728 <___vfprintf_internal_r+0x1bc4>
   121c8:	040000f4 	movhi	r16,3
   121cc:	842b4904 	addi	r16,r16,-21212
   121d0:	00c000c4 	movi	r3,3
   121d4:	00bfdfc4 	movi	r2,-129
   121d8:	d8c02915 	stw	r3,164(sp)
   121dc:	90a4703a 	and	r18,r18,r2
   121e0:	d8c02b15 	stw	r3,172(sp)
   121e4:	d8002a15 	stw	zero,168(sp)
   121e8:	d8003215 	stw	zero,200(sp)
   121ec:	00003a06 	br	122d8 <___vfprintf_internal_r+0x774>
   121f0:	84000214 	ori	r16,r16,8
   121f4:	ac400007 	ldb	r17,0(r21)
   121f8:	003ebc06 	br	11cec <__alt_data_end+0xfc011cec>
   121fc:	8025883a 	mov	r18,r16
   12200:	dc002903 	ldbu	r16,164(sp)
   12204:	e011883a 	mov	r8,fp
   12208:	84003fcc 	andi	r16,r16,255
   1220c:	8007001e 	bne	r16,zero,13e10 <___vfprintf_internal_r+0x22ac>
   12210:	94800414 	ori	r18,r18,16
   12214:	9080080c 	andi	r2,r18,32
   12218:	1002fa26 	beq	r2,zero,12e04 <___vfprintf_internal_r+0x12a0>
   1221c:	d9002e17 	ldw	r4,184(sp)
   12220:	d9402a17 	ldw	r5,168(sp)
   12224:	d8002785 	stb	zero,158(sp)
   12228:	20800204 	addi	r2,r4,8
   1222c:	24c00017 	ldw	r19,0(r4)
   12230:	25800117 	ldw	r22,4(r4)
   12234:	2804b116 	blt	r5,zero,134fc <___vfprintf_internal_r+0x1998>
   12238:	013fdfc4 	movi	r4,-129
   1223c:	9d86b03a 	or	r3,r19,r22
   12240:	d8802e15 	stw	r2,184(sp)
   12244:	9124703a 	and	r18,r18,r4
   12248:	1802fb1e 	bne	r3,zero,12e38 <___vfprintf_internal_r+0x12d4>
   1224c:	d8c02a17 	ldw	r3,168(sp)
   12250:	0039883a 	mov	fp,zero
   12254:	1805e526 	beq	r3,zero,139ec <___vfprintf_internal_r+0x1e88>
   12258:	0027883a 	mov	r19,zero
   1225c:	002d883a 	mov	r22,zero
   12260:	dc001e04 	addi	r16,sp,120
   12264:	9806d0fa 	srli	r3,r19,3
   12268:	b008977a 	slli	r4,r22,29
   1226c:	b02cd0fa 	srli	r22,r22,3
   12270:	9cc001cc 	andi	r19,r19,7
   12274:	98800c04 	addi	r2,r19,48
   12278:	843fffc4 	addi	r16,r16,-1
   1227c:	20e6b03a 	or	r19,r4,r3
   12280:	80800005 	stb	r2,0(r16)
   12284:	9d86b03a 	or	r3,r19,r22
   12288:	183ff61e 	bne	r3,zero,12264 <__alt_data_end+0xfc012264>
   1228c:	90c0004c 	andi	r3,r18,1
   12290:	18014126 	beq	r3,zero,12798 <___vfprintf_internal_r+0xc34>
   12294:	10803fcc 	andi	r2,r2,255
   12298:	1080201c 	xori	r2,r2,128
   1229c:	10bfe004 	addi	r2,r2,-128
   122a0:	00c00c04 	movi	r3,48
   122a4:	10c13c26 	beq	r2,r3,12798 <___vfprintf_internal_r+0xc34>
   122a8:	80ffffc5 	stb	r3,-1(r16)
   122ac:	d8c02817 	ldw	r3,160(sp)
   122b0:	80bfffc4 	addi	r2,r16,-1
   122b4:	1021883a 	mov	r16,r2
   122b8:	1887c83a 	sub	r3,r3,r2
   122bc:	d8c02b15 	stw	r3,172(sp)
   122c0:	d8802b17 	ldw	r2,172(sp)
   122c4:	d9002a17 	ldw	r4,168(sp)
   122c8:	1100010e 	bge	r2,r4,122d0 <___vfprintf_internal_r+0x76c>
   122cc:	2005883a 	mov	r2,r4
   122d0:	d8802915 	stw	r2,164(sp)
   122d4:	d8003215 	stw	zero,200(sp)
   122d8:	e7003fcc 	andi	fp,fp,255
   122dc:	e700201c 	xori	fp,fp,128
   122e0:	e73fe004 	addi	fp,fp,-128
   122e4:	e0000326 	beq	fp,zero,122f4 <___vfprintf_internal_r+0x790>
   122e8:	d8c02917 	ldw	r3,164(sp)
   122ec:	18c00044 	addi	r3,r3,1
   122f0:	d8c02915 	stw	r3,164(sp)
   122f4:	90c0008c 	andi	r3,r18,2
   122f8:	d8c02c15 	stw	r3,176(sp)
   122fc:	18000326 	beq	r3,zero,1230c <___vfprintf_internal_r+0x7a8>
   12300:	d8c02917 	ldw	r3,164(sp)
   12304:	18c00084 	addi	r3,r3,2
   12308:	d8c02915 	stw	r3,164(sp)
   1230c:	90c0210c 	andi	r3,r18,132
   12310:	d8c03015 	stw	r3,192(sp)
   12314:	1801c51e 	bne	r3,zero,12a2c <___vfprintf_internal_r+0xec8>
   12318:	d9003117 	ldw	r4,196(sp)
   1231c:	d8c02917 	ldw	r3,164(sp)
   12320:	20e7c83a 	sub	r19,r4,r3
   12324:	04c1c10e 	bge	zero,r19,12a2c <___vfprintf_internal_r+0xec8>
   12328:	02400404 	movi	r9,16
   1232c:	d8c02017 	ldw	r3,128(sp)
   12330:	d8801f17 	ldw	r2,124(sp)
   12334:	4cc52f0e 	bge	r9,r19,137f4 <___vfprintf_internal_r+0x1c90>
   12338:	014000f4 	movhi	r5,3
   1233c:	296b6484 	addi	r5,r5,-21102
   12340:	dc403b15 	stw	r17,236(sp)
   12344:	d9403515 	stw	r5,212(sp)
   12348:	9823883a 	mov	r17,r19
   1234c:	482d883a 	mov	r22,r9
   12350:	9027883a 	mov	r19,r18
   12354:	070001c4 	movi	fp,7
   12358:	8025883a 	mov	r18,r16
   1235c:	dc002d17 	ldw	r16,180(sp)
   12360:	00000306 	br	12370 <___vfprintf_internal_r+0x80c>
   12364:	8c7ffc04 	addi	r17,r17,-16
   12368:	42000204 	addi	r8,r8,8
   1236c:	b440130e 	bge	r22,r17,123bc <___vfprintf_internal_r+0x858>
   12370:	010000f4 	movhi	r4,3
   12374:	18c00404 	addi	r3,r3,16
   12378:	10800044 	addi	r2,r2,1
   1237c:	212b6484 	addi	r4,r4,-21102
   12380:	41000015 	stw	r4,0(r8)
   12384:	45800115 	stw	r22,4(r8)
   12388:	d8c02015 	stw	r3,128(sp)
   1238c:	d8801f15 	stw	r2,124(sp)
   12390:	e0bff40e 	bge	fp,r2,12364 <__alt_data_end+0xfc012364>
   12394:	d9801e04 	addi	r6,sp,120
   12398:	b80b883a 	mov	r5,r23
   1239c:	8009883a 	mov	r4,r16
   123a0:	0019e700 	call	19e70 <__sprint_r>
   123a4:	103ef31e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   123a8:	8c7ffc04 	addi	r17,r17,-16
   123ac:	d8c02017 	ldw	r3,128(sp)
   123b0:	d8801f17 	ldw	r2,124(sp)
   123b4:	da000404 	addi	r8,sp,16
   123b8:	b47fed16 	blt	r22,r17,12370 <__alt_data_end+0xfc012370>
   123bc:	9021883a 	mov	r16,r18
   123c0:	9825883a 	mov	r18,r19
   123c4:	8827883a 	mov	r19,r17
   123c8:	dc403b17 	ldw	r17,236(sp)
   123cc:	d9403517 	ldw	r5,212(sp)
   123d0:	98c7883a 	add	r3,r19,r3
   123d4:	10800044 	addi	r2,r2,1
   123d8:	41400015 	stw	r5,0(r8)
   123dc:	44c00115 	stw	r19,4(r8)
   123e0:	d8c02015 	stw	r3,128(sp)
   123e4:	d8801f15 	stw	r2,124(sp)
   123e8:	010001c4 	movi	r4,7
   123ec:	2082c516 	blt	r4,r2,12f04 <___vfprintf_internal_r+0x13a0>
   123f0:	df002787 	ldb	fp,158(sp)
   123f4:	42000204 	addi	r8,r8,8
   123f8:	e0000c26 	beq	fp,zero,1242c <___vfprintf_internal_r+0x8c8>
   123fc:	d8801f17 	ldw	r2,124(sp)
   12400:	d9002784 	addi	r4,sp,158
   12404:	18c00044 	addi	r3,r3,1
   12408:	10800044 	addi	r2,r2,1
   1240c:	41000015 	stw	r4,0(r8)
   12410:	01000044 	movi	r4,1
   12414:	41000115 	stw	r4,4(r8)
   12418:	d8c02015 	stw	r3,128(sp)
   1241c:	d8801f15 	stw	r2,124(sp)
   12420:	010001c4 	movi	r4,7
   12424:	20825e16 	blt	r4,r2,12da0 <___vfprintf_internal_r+0x123c>
   12428:	42000204 	addi	r8,r8,8
   1242c:	d8802c17 	ldw	r2,176(sp)
   12430:	10000c26 	beq	r2,zero,12464 <___vfprintf_internal_r+0x900>
   12434:	d8801f17 	ldw	r2,124(sp)
   12438:	d9002704 	addi	r4,sp,156
   1243c:	18c00084 	addi	r3,r3,2
   12440:	10800044 	addi	r2,r2,1
   12444:	41000015 	stw	r4,0(r8)
   12448:	01000084 	movi	r4,2
   1244c:	41000115 	stw	r4,4(r8)
   12450:	d8c02015 	stw	r3,128(sp)
   12454:	d8801f15 	stw	r2,124(sp)
   12458:	010001c4 	movi	r4,7
   1245c:	20825816 	blt	r4,r2,12dc0 <___vfprintf_internal_r+0x125c>
   12460:	42000204 	addi	r8,r8,8
   12464:	d9003017 	ldw	r4,192(sp)
   12468:	00802004 	movi	r2,128
   1246c:	2081bb26 	beq	r4,r2,12b5c <___vfprintf_internal_r+0xff8>
   12470:	d9402a17 	ldw	r5,168(sp)
   12474:	d8802b17 	ldw	r2,172(sp)
   12478:	28adc83a 	sub	r22,r5,r2
   1247c:	0580310e 	bge	zero,r22,12544 <___vfprintf_internal_r+0x9e0>
   12480:	07000404 	movi	fp,16
   12484:	d8801f17 	ldw	r2,124(sp)
   12488:	e584360e 	bge	fp,r22,13564 <___vfprintf_internal_r+0x1a00>
   1248c:	014000f4 	movhi	r5,3
   12490:	296b6084 	addi	r5,r5,-21118
   12494:	dc402a15 	stw	r17,168(sp)
   12498:	d9402c15 	stw	r5,176(sp)
   1249c:	b023883a 	mov	r17,r22
   124a0:	04c001c4 	movi	r19,7
   124a4:	a82d883a 	mov	r22,r21
   124a8:	902b883a 	mov	r21,r18
   124ac:	8025883a 	mov	r18,r16
   124b0:	dc002d17 	ldw	r16,180(sp)
   124b4:	00000306 	br	124c4 <___vfprintf_internal_r+0x960>
   124b8:	8c7ffc04 	addi	r17,r17,-16
   124bc:	42000204 	addi	r8,r8,8
   124c0:	e440110e 	bge	fp,r17,12508 <___vfprintf_internal_r+0x9a4>
   124c4:	18c00404 	addi	r3,r3,16
   124c8:	10800044 	addi	r2,r2,1
   124cc:	45000015 	stw	r20,0(r8)
   124d0:	47000115 	stw	fp,4(r8)
   124d4:	d8c02015 	stw	r3,128(sp)
   124d8:	d8801f15 	stw	r2,124(sp)
   124dc:	98bff60e 	bge	r19,r2,124b8 <__alt_data_end+0xfc0124b8>
   124e0:	d9801e04 	addi	r6,sp,120
   124e4:	b80b883a 	mov	r5,r23
   124e8:	8009883a 	mov	r4,r16
   124ec:	0019e700 	call	19e70 <__sprint_r>
   124f0:	103ea01e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   124f4:	8c7ffc04 	addi	r17,r17,-16
   124f8:	d8c02017 	ldw	r3,128(sp)
   124fc:	d8801f17 	ldw	r2,124(sp)
   12500:	da000404 	addi	r8,sp,16
   12504:	e47fef16 	blt	fp,r17,124c4 <__alt_data_end+0xfc0124c4>
   12508:	9021883a 	mov	r16,r18
   1250c:	a825883a 	mov	r18,r21
   12510:	b02b883a 	mov	r21,r22
   12514:	882d883a 	mov	r22,r17
   12518:	dc402a17 	ldw	r17,168(sp)
   1251c:	d9002c17 	ldw	r4,176(sp)
   12520:	1d87883a 	add	r3,r3,r22
   12524:	10800044 	addi	r2,r2,1
   12528:	41000015 	stw	r4,0(r8)
   1252c:	45800115 	stw	r22,4(r8)
   12530:	d8c02015 	stw	r3,128(sp)
   12534:	d8801f15 	stw	r2,124(sp)
   12538:	010001c4 	movi	r4,7
   1253c:	20821016 	blt	r4,r2,12d80 <___vfprintf_internal_r+0x121c>
   12540:	42000204 	addi	r8,r8,8
   12544:	9080400c 	andi	r2,r18,256
   12548:	10013a1e 	bne	r2,zero,12a34 <___vfprintf_internal_r+0xed0>
   1254c:	d9402b17 	ldw	r5,172(sp)
   12550:	d8801f17 	ldw	r2,124(sp)
   12554:	44000015 	stw	r16,0(r8)
   12558:	1947883a 	add	r3,r3,r5
   1255c:	10800044 	addi	r2,r2,1
   12560:	41400115 	stw	r5,4(r8)
   12564:	d8c02015 	stw	r3,128(sp)
   12568:	d8801f15 	stw	r2,124(sp)
   1256c:	010001c4 	movi	r4,7
   12570:	2081f516 	blt	r4,r2,12d48 <___vfprintf_internal_r+0x11e4>
   12574:	42000204 	addi	r8,r8,8
   12578:	9480010c 	andi	r18,r18,4
   1257c:	90003226 	beq	r18,zero,12648 <___vfprintf_internal_r+0xae4>
   12580:	d9403117 	ldw	r5,196(sp)
   12584:	d8802917 	ldw	r2,164(sp)
   12588:	28a1c83a 	sub	r16,r5,r2
   1258c:	04002e0e 	bge	zero,r16,12648 <___vfprintf_internal_r+0xae4>
   12590:	04400404 	movi	r17,16
   12594:	d8801f17 	ldw	r2,124(sp)
   12598:	8c04c40e 	bge	r17,r16,138ac <___vfprintf_internal_r+0x1d48>
   1259c:	014000f4 	movhi	r5,3
   125a0:	296b6484 	addi	r5,r5,-21102
   125a4:	d9403515 	stw	r5,212(sp)
   125a8:	048001c4 	movi	r18,7
   125ac:	dcc02d17 	ldw	r19,180(sp)
   125b0:	00000306 	br	125c0 <___vfprintf_internal_r+0xa5c>
   125b4:	843ffc04 	addi	r16,r16,-16
   125b8:	42000204 	addi	r8,r8,8
   125bc:	8c00130e 	bge	r17,r16,1260c <___vfprintf_internal_r+0xaa8>
   125c0:	010000f4 	movhi	r4,3
   125c4:	18c00404 	addi	r3,r3,16
   125c8:	10800044 	addi	r2,r2,1
   125cc:	212b6484 	addi	r4,r4,-21102
   125d0:	41000015 	stw	r4,0(r8)
   125d4:	44400115 	stw	r17,4(r8)
   125d8:	d8c02015 	stw	r3,128(sp)
   125dc:	d8801f15 	stw	r2,124(sp)
   125e0:	90bff40e 	bge	r18,r2,125b4 <__alt_data_end+0xfc0125b4>
   125e4:	d9801e04 	addi	r6,sp,120
   125e8:	b80b883a 	mov	r5,r23
   125ec:	9809883a 	mov	r4,r19
   125f0:	0019e700 	call	19e70 <__sprint_r>
   125f4:	103e5f1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   125f8:	843ffc04 	addi	r16,r16,-16
   125fc:	d8c02017 	ldw	r3,128(sp)
   12600:	d8801f17 	ldw	r2,124(sp)
   12604:	da000404 	addi	r8,sp,16
   12608:	8c3fed16 	blt	r17,r16,125c0 <__alt_data_end+0xfc0125c0>
   1260c:	d9403517 	ldw	r5,212(sp)
   12610:	1c07883a 	add	r3,r3,r16
   12614:	10800044 	addi	r2,r2,1
   12618:	41400015 	stw	r5,0(r8)
   1261c:	44000115 	stw	r16,4(r8)
   12620:	d8c02015 	stw	r3,128(sp)
   12624:	d8801f15 	stw	r2,124(sp)
   12628:	010001c4 	movi	r4,7
   1262c:	2080060e 	bge	r4,r2,12648 <___vfprintf_internal_r+0xae4>
   12630:	d9002d17 	ldw	r4,180(sp)
   12634:	d9801e04 	addi	r6,sp,120
   12638:	b80b883a 	mov	r5,r23
   1263c:	0019e700 	call	19e70 <__sprint_r>
   12640:	103e4c1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12644:	d8c02017 	ldw	r3,128(sp)
   12648:	d8803117 	ldw	r2,196(sp)
   1264c:	d9002917 	ldw	r4,164(sp)
   12650:	1100010e 	bge	r2,r4,12658 <___vfprintf_internal_r+0xaf4>
   12654:	2005883a 	mov	r2,r4
   12658:	d9402f17 	ldw	r5,188(sp)
   1265c:	288b883a 	add	r5,r5,r2
   12660:	d9402f15 	stw	r5,188(sp)
   12664:	1801c01e 	bne	r3,zero,12d68 <___vfprintf_internal_r+0x1204>
   12668:	a8800007 	ldb	r2,0(r21)
   1266c:	d8001f15 	stw	zero,124(sp)
   12670:	da000404 	addi	r8,sp,16
   12674:	103d751e 	bne	r2,zero,11c4c <__alt_data_end+0xfc011c4c>
   12678:	a823883a 	mov	r17,r21
   1267c:	003d8b06 	br	11cac <__alt_data_end+0xfc011cac>
   12680:	8025883a 	mov	r18,r16
   12684:	dc002903 	ldbu	r16,164(sp)
   12688:	e011883a 	mov	r8,fp
   1268c:	84003fcc 	andi	r16,r16,255
   12690:	8005e51e 	bne	r16,zero,13e28 <___vfprintf_internal_r+0x22c4>
   12694:	94800414 	ori	r18,r18,16
   12698:	9080080c 	andi	r2,r18,32
   1269c:	10022b26 	beq	r2,zero,12f4c <___vfprintf_internal_r+0x13e8>
   126a0:	d9002e17 	ldw	r4,184(sp)
   126a4:	d9402a17 	ldw	r5,168(sp)
   126a8:	d8002785 	stb	zero,158(sp)
   126ac:	20c00204 	addi	r3,r4,8
   126b0:	24c00017 	ldw	r19,0(r4)
   126b4:	25800117 	ldw	r22,4(r4)
   126b8:	28042e16 	blt	r5,zero,13774 <___vfprintf_internal_r+0x1c10>
   126bc:	013fdfc4 	movi	r4,-129
   126c0:	9d84b03a 	or	r2,r19,r22
   126c4:	d8c02e15 	stw	r3,184(sp)
   126c8:	9124703a 	and	r18,r18,r4
   126cc:	0039883a 	mov	fp,zero
   126d0:	103e801e 	bne	r2,zero,120d4 <__alt_data_end+0xfc0120d4>
   126d4:	d9002a17 	ldw	r4,168(sp)
   126d8:	2002e01e 	bne	r4,zero,1325c <___vfprintf_internal_r+0x16f8>
   126dc:	d8002a15 	stw	zero,168(sp)
   126e0:	d8002b15 	stw	zero,172(sp)
   126e4:	dc001e04 	addi	r16,sp,120
   126e8:	003ef506 	br	122c0 <__alt_data_end+0xfc0122c0>
   126ec:	8025883a 	mov	r18,r16
   126f0:	dc002903 	ldbu	r16,164(sp)
   126f4:	e011883a 	mov	r8,fp
   126f8:	84003fcc 	andi	r16,r16,255
   126fc:	8005ba1e 	bne	r16,zero,13de8 <___vfprintf_internal_r+0x2284>
   12700:	010000f4 	movhi	r4,3
   12704:	212b4c04 	addi	r4,r4,-21200
   12708:	d9003915 	stw	r4,228(sp)
   1270c:	9080080c 	andi	r2,r18,32
   12710:	10006126 	beq	r2,zero,12898 <___vfprintf_internal_r+0xd34>
   12714:	d9402e17 	ldw	r5,184(sp)
   12718:	2cc00017 	ldw	r19,0(r5)
   1271c:	2d800117 	ldw	r22,4(r5)
   12720:	29400204 	addi	r5,r5,8
   12724:	d9402e15 	stw	r5,184(sp)
   12728:	9080004c 	andi	r2,r18,1
   1272c:	1001ac26 	beq	r2,zero,12de0 <___vfprintf_internal_r+0x127c>
   12730:	9d84b03a 	or	r2,r19,r22
   12734:	10038526 	beq	r2,zero,1354c <___vfprintf_internal_r+0x19e8>
   12738:	d8c02a17 	ldw	r3,168(sp)
   1273c:	00800c04 	movi	r2,48
   12740:	d8802705 	stb	r2,156(sp)
   12744:	dc402745 	stb	r17,157(sp)
   12748:	d8002785 	stb	zero,158(sp)
   1274c:	90800094 	ori	r2,r18,2
   12750:	18047916 	blt	r3,zero,13938 <___vfprintf_internal_r+0x1dd4>
   12754:	00bfdfc4 	movi	r2,-129
   12758:	90a4703a 	and	r18,r18,r2
   1275c:	94800094 	ori	r18,r18,2
   12760:	0039883a 	mov	fp,zero
   12764:	d9003917 	ldw	r4,228(sp)
   12768:	dc001e04 	addi	r16,sp,120
   1276c:	988003cc 	andi	r2,r19,15
   12770:	b006973a 	slli	r3,r22,28
   12774:	2085883a 	add	r2,r4,r2
   12778:	9826d13a 	srli	r19,r19,4
   1277c:	10800003 	ldbu	r2,0(r2)
   12780:	b02cd13a 	srli	r22,r22,4
   12784:	843fffc4 	addi	r16,r16,-1
   12788:	1ce6b03a 	or	r19,r3,r19
   1278c:	80800005 	stb	r2,0(r16)
   12790:	9d84b03a 	or	r2,r19,r22
   12794:	103ff51e 	bne	r2,zero,1276c <__alt_data_end+0xfc01276c>
   12798:	d8c02817 	ldw	r3,160(sp)
   1279c:	1c07c83a 	sub	r3,r3,r16
   127a0:	d8c02b15 	stw	r3,172(sp)
   127a4:	003ec606 	br	122c0 <__alt_data_end+0xfc0122c0>
   127a8:	8025883a 	mov	r18,r16
   127ac:	dc002903 	ldbu	r16,164(sp)
   127b0:	e011883a 	mov	r8,fp
   127b4:	84003fcc 	andi	r16,r16,255
   127b8:	803e9626 	beq	r16,zero,12214 <__alt_data_end+0xfc012214>
   127bc:	d8c02b03 	ldbu	r3,172(sp)
   127c0:	d8c02785 	stb	r3,158(sp)
   127c4:	003e9306 	br	12214 <__alt_data_end+0xfc012214>
   127c8:	00c00044 	movi	r3,1
   127cc:	d8c02905 	stb	r3,164(sp)
   127d0:	00c00ac4 	movi	r3,43
   127d4:	d8c02b05 	stb	r3,172(sp)
   127d8:	ac400007 	ldb	r17,0(r21)
   127dc:	003d4306 	br	11cec <__alt_data_end+0xfc011cec>
   127e0:	84000814 	ori	r16,r16,32
   127e4:	ac400007 	ldb	r17,0(r21)
   127e8:	003d4006 	br	11cec <__alt_data_end+0xfc011cec>
   127ec:	d8802e17 	ldw	r2,184(sp)
   127f0:	8025883a 	mov	r18,r16
   127f4:	d8002785 	stb	zero,158(sp)
   127f8:	14000017 	ldw	r16,0(r2)
   127fc:	e011883a 	mov	r8,fp
   12800:	14c00104 	addi	r19,r2,4
   12804:	80042d26 	beq	r16,zero,138bc <___vfprintf_internal_r+0x1d58>
   12808:	d8c02a17 	ldw	r3,168(sp)
   1280c:	1803e416 	blt	r3,zero,137a0 <___vfprintf_internal_r+0x1c3c>
   12810:	180d883a 	mov	r6,r3
   12814:	000b883a 	mov	r5,zero
   12818:	8009883a 	mov	r4,r16
   1281c:	df003d15 	stw	fp,244(sp)
   12820:	0016c900 	call	16c90 <memchr>
   12824:	da003d17 	ldw	r8,244(sp)
   12828:	10046826 	beq	r2,zero,139cc <___vfprintf_internal_r+0x1e68>
   1282c:	1405c83a 	sub	r2,r2,r16
   12830:	d8802b15 	stw	r2,172(sp)
   12834:	1003e016 	blt	r2,zero,137b8 <___vfprintf_internal_r+0x1c54>
   12838:	df002783 	ldbu	fp,158(sp)
   1283c:	d8802915 	stw	r2,164(sp)
   12840:	dcc02e15 	stw	r19,184(sp)
   12844:	d8002a15 	stw	zero,168(sp)
   12848:	d8003215 	stw	zero,200(sp)
   1284c:	003ea206 	br	122d8 <__alt_data_end+0xfc0122d8>
   12850:	8025883a 	mov	r18,r16
   12854:	dc002903 	ldbu	r16,164(sp)
   12858:	e011883a 	mov	r8,fp
   1285c:	84003fcc 	andi	r16,r16,255
   12860:	803f8d26 	beq	r16,zero,12698 <__alt_data_end+0xfc012698>
   12864:	d8c02b03 	ldbu	r3,172(sp)
   12868:	d8c02785 	stb	r3,158(sp)
   1286c:	003f8a06 	br	12698 <__alt_data_end+0xfc012698>
   12870:	8025883a 	mov	r18,r16
   12874:	dc002903 	ldbu	r16,164(sp)
   12878:	e011883a 	mov	r8,fp
   1287c:	84003fcc 	andi	r16,r16,255
   12880:	8005661e 	bne	r16,zero,13e1c <___vfprintf_internal_r+0x22b8>
   12884:	010000f4 	movhi	r4,3
   12888:	212b5104 	addi	r4,r4,-21180
   1288c:	d9003915 	stw	r4,228(sp)
   12890:	9080080c 	andi	r2,r18,32
   12894:	103f9f1e 	bne	r2,zero,12714 <__alt_data_end+0xfc012714>
   12898:	9080040c 	andi	r2,r18,16
   1289c:	1002eb26 	beq	r2,zero,1344c <___vfprintf_internal_r+0x18e8>
   128a0:	d8802e17 	ldw	r2,184(sp)
   128a4:	002d883a 	mov	r22,zero
   128a8:	14c00017 	ldw	r19,0(r2)
   128ac:	10800104 	addi	r2,r2,4
   128b0:	d8802e15 	stw	r2,184(sp)
   128b4:	003f9c06 	br	12728 <__alt_data_end+0xfc012728>
   128b8:	d8802b07 	ldb	r2,172(sp)
   128bc:	1002e11e 	bne	r2,zero,13444 <___vfprintf_internal_r+0x18e0>
   128c0:	00c00044 	movi	r3,1
   128c4:	d8c02905 	stb	r3,164(sp)
   128c8:	00c00804 	movi	r3,32
   128cc:	d8c02b05 	stb	r3,172(sp)
   128d0:	ac400007 	ldb	r17,0(r21)
   128d4:	003d0506 	br	11cec <__alt_data_end+0xfc011cec>
   128d8:	84000054 	ori	r16,r16,1
   128dc:	ac400007 	ldb	r17,0(r21)
   128e0:	003d0206 	br	11cec <__alt_data_end+0xfc011cec>
   128e4:	8025883a 	mov	r18,r16
   128e8:	dc002903 	ldbu	r16,164(sp)
   128ec:	e011883a 	mov	r8,fp
   128f0:	84003fcc 	andi	r16,r16,255
   128f4:	803de726 	beq	r16,zero,12094 <__alt_data_end+0xfc012094>
   128f8:	d8c02b03 	ldbu	r3,172(sp)
   128fc:	d8c02785 	stb	r3,158(sp)
   12900:	003de406 	br	12094 <__alt_data_end+0xfc012094>
   12904:	84001014 	ori	r16,r16,64
   12908:	ac400007 	ldb	r17,0(r21)
   1290c:	003cf706 	br	11cec <__alt_data_end+0xfc011cec>
   12910:	ac400007 	ldb	r17,0(r21)
   12914:	00801b04 	movi	r2,108
   12918:	88838f26 	beq	r17,r2,13758 <___vfprintf_internal_r+0x1bf4>
   1291c:	84000414 	ori	r16,r16,16
   12920:	003cf206 	br	11cec <__alt_data_end+0xfc011cec>
   12924:	8025883a 	mov	r18,r16
   12928:	dc002903 	ldbu	r16,164(sp)
   1292c:	e011883a 	mov	r8,fp
   12930:	84003fcc 	andi	r16,r16,255
   12934:	80053f1e 	bne	r16,zero,13e34 <___vfprintf_internal_r+0x22d0>
   12938:	9080080c 	andi	r2,r18,32
   1293c:	1002d226 	beq	r2,zero,13488 <___vfprintf_internal_r+0x1924>
   12940:	d9002e17 	ldw	r4,184(sp)
   12944:	d9402f17 	ldw	r5,188(sp)
   12948:	20800017 	ldw	r2,0(r4)
   1294c:	2807d7fa 	srai	r3,r5,31
   12950:	21000104 	addi	r4,r4,4
   12954:	d9002e15 	stw	r4,184(sp)
   12958:	11400015 	stw	r5,0(r2)
   1295c:	10c00115 	stw	r3,4(r2)
   12960:	003cb806 	br	11c44 <__alt_data_end+0xfc011c44>
   12964:	d8c02e17 	ldw	r3,184(sp)
   12968:	d9002e17 	ldw	r4,184(sp)
   1296c:	8025883a 	mov	r18,r16
   12970:	18800017 	ldw	r2,0(r3)
   12974:	21000104 	addi	r4,r4,4
   12978:	00c00044 	movi	r3,1
   1297c:	e011883a 	mov	r8,fp
   12980:	d8c02915 	stw	r3,164(sp)
   12984:	d8002785 	stb	zero,158(sp)
   12988:	d8801405 	stb	r2,80(sp)
   1298c:	d9002e15 	stw	r4,184(sp)
   12990:	d8c02b15 	stw	r3,172(sp)
   12994:	d8002a15 	stw	zero,168(sp)
   12998:	d8003215 	stw	zero,200(sp)
   1299c:	dc001404 	addi	r16,sp,80
   129a0:	0039883a 	mov	fp,zero
   129a4:	003e5306 	br	122f4 <__alt_data_end+0xfc0122f4>
   129a8:	010000f4 	movhi	r4,3
   129ac:	212b5104 	addi	r4,r4,-21180
   129b0:	0039883a 	mov	fp,zero
   129b4:	d9003915 	stw	r4,228(sp)
   129b8:	04401e04 	movi	r17,120
   129bc:	003f6906 	br	12764 <__alt_data_end+0xfc012764>
   129c0:	8025883a 	mov	r18,r16
   129c4:	dc002903 	ldbu	r16,164(sp)
   129c8:	e011883a 	mov	r8,fp
   129cc:	84003fcc 	andi	r16,r16,255
   129d0:	8005081e 	bne	r16,zero,13df4 <___vfprintf_internal_r+0x2290>
   129d4:	883d6126 	beq	r17,zero,11f5c <__alt_data_end+0xfc011f5c>
   129d8:	00c00044 	movi	r3,1
   129dc:	d8c02915 	stw	r3,164(sp)
   129e0:	dc401405 	stb	r17,80(sp)
   129e4:	d8002785 	stb	zero,158(sp)
   129e8:	003fe906 	br	12990 <__alt_data_end+0xfc012990>
   129ec:	014000f4 	movhi	r5,3
   129f0:	296b5104 	addi	r5,r5,-21180
   129f4:	d9403915 	stw	r5,228(sp)
   129f8:	d8c02e15 	stw	r3,184(sp)
   129fc:	1025883a 	mov	r18,r2
   12a00:	04401e04 	movi	r17,120
   12a04:	9d84b03a 	or	r2,r19,r22
   12a08:	1000fc1e 	bne	r2,zero,12dfc <___vfprintf_internal_r+0x1298>
   12a0c:	0039883a 	mov	fp,zero
   12a10:	00800084 	movi	r2,2
   12a14:	10803fcc 	andi	r2,r2,255
   12a18:	00c00044 	movi	r3,1
   12a1c:	10c20f26 	beq	r2,r3,1325c <___vfprintf_internal_r+0x16f8>
   12a20:	00c00084 	movi	r3,2
   12a24:	10fd3326 	beq	r2,r3,11ef4 <__alt_data_end+0xfc011ef4>
   12a28:	003e0b06 	br	12258 <__alt_data_end+0xfc012258>
   12a2c:	d8c02017 	ldw	r3,128(sp)
   12a30:	003e7106 	br	123f8 <__alt_data_end+0xfc0123f8>
   12a34:	00801944 	movi	r2,101
   12a38:	14407e0e 	bge	r2,r17,12c34 <___vfprintf_internal_r+0x10d0>
   12a3c:	d9003617 	ldw	r4,216(sp)
   12a40:	d9403817 	ldw	r5,224(sp)
   12a44:	000d883a 	mov	r6,zero
   12a48:	000f883a 	mov	r7,zero
   12a4c:	d8c03c15 	stw	r3,240(sp)
   12a50:	da003d15 	stw	r8,244(sp)
   12a54:	001dbf40 	call	1dbf4 <__eqdf2>
   12a58:	d8c03c17 	ldw	r3,240(sp)
   12a5c:	da003d17 	ldw	r8,244(sp)
   12a60:	1000f71e 	bne	r2,zero,12e40 <___vfprintf_internal_r+0x12dc>
   12a64:	d8801f17 	ldw	r2,124(sp)
   12a68:	010000f4 	movhi	r4,3
   12a6c:	212b5804 	addi	r4,r4,-21152
   12a70:	18c00044 	addi	r3,r3,1
   12a74:	10800044 	addi	r2,r2,1
   12a78:	41000015 	stw	r4,0(r8)
   12a7c:	01000044 	movi	r4,1
   12a80:	41000115 	stw	r4,4(r8)
   12a84:	d8c02015 	stw	r3,128(sp)
   12a88:	d8801f15 	stw	r2,124(sp)
   12a8c:	010001c4 	movi	r4,7
   12a90:	2082b816 	blt	r4,r2,13574 <___vfprintf_internal_r+0x1a10>
   12a94:	42000204 	addi	r8,r8,8
   12a98:	d8802617 	ldw	r2,152(sp)
   12a9c:	d9403317 	ldw	r5,204(sp)
   12aa0:	11400216 	blt	r2,r5,12aac <___vfprintf_internal_r+0xf48>
   12aa4:	9080004c 	andi	r2,r18,1
   12aa8:	103eb326 	beq	r2,zero,12578 <__alt_data_end+0xfc012578>
   12aac:	d8803717 	ldw	r2,220(sp)
   12ab0:	d9003417 	ldw	r4,208(sp)
   12ab4:	d9403717 	ldw	r5,220(sp)
   12ab8:	1887883a 	add	r3,r3,r2
   12abc:	d8801f17 	ldw	r2,124(sp)
   12ac0:	41000015 	stw	r4,0(r8)
   12ac4:	41400115 	stw	r5,4(r8)
   12ac8:	10800044 	addi	r2,r2,1
   12acc:	d8c02015 	stw	r3,128(sp)
   12ad0:	d8801f15 	stw	r2,124(sp)
   12ad4:	010001c4 	movi	r4,7
   12ad8:	20832916 	blt	r4,r2,13780 <___vfprintf_internal_r+0x1c1c>
   12adc:	42000204 	addi	r8,r8,8
   12ae0:	d8803317 	ldw	r2,204(sp)
   12ae4:	143fffc4 	addi	r16,r2,-1
   12ae8:	043ea30e 	bge	zero,r16,12578 <__alt_data_end+0xfc012578>
   12aec:	04400404 	movi	r17,16
   12af0:	d8801f17 	ldw	r2,124(sp)
   12af4:	8c00880e 	bge	r17,r16,12d18 <___vfprintf_internal_r+0x11b4>
   12af8:	014000f4 	movhi	r5,3
   12afc:	296b6084 	addi	r5,r5,-21118
   12b00:	d9402c15 	stw	r5,176(sp)
   12b04:	058001c4 	movi	r22,7
   12b08:	dcc02d17 	ldw	r19,180(sp)
   12b0c:	00000306 	br	12b1c <___vfprintf_internal_r+0xfb8>
   12b10:	42000204 	addi	r8,r8,8
   12b14:	843ffc04 	addi	r16,r16,-16
   12b18:	8c00820e 	bge	r17,r16,12d24 <___vfprintf_internal_r+0x11c0>
   12b1c:	18c00404 	addi	r3,r3,16
   12b20:	10800044 	addi	r2,r2,1
   12b24:	45000015 	stw	r20,0(r8)
   12b28:	44400115 	stw	r17,4(r8)
   12b2c:	d8c02015 	stw	r3,128(sp)
   12b30:	d8801f15 	stw	r2,124(sp)
   12b34:	b0bff60e 	bge	r22,r2,12b10 <__alt_data_end+0xfc012b10>
   12b38:	d9801e04 	addi	r6,sp,120
   12b3c:	b80b883a 	mov	r5,r23
   12b40:	9809883a 	mov	r4,r19
   12b44:	0019e700 	call	19e70 <__sprint_r>
   12b48:	103d0a1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12b4c:	d8c02017 	ldw	r3,128(sp)
   12b50:	d8801f17 	ldw	r2,124(sp)
   12b54:	da000404 	addi	r8,sp,16
   12b58:	003fee06 	br	12b14 <__alt_data_end+0xfc012b14>
   12b5c:	d9403117 	ldw	r5,196(sp)
   12b60:	d8802917 	ldw	r2,164(sp)
   12b64:	28adc83a 	sub	r22,r5,r2
   12b68:	05be410e 	bge	zero,r22,12470 <__alt_data_end+0xfc012470>
   12b6c:	07000404 	movi	fp,16
   12b70:	d8801f17 	ldw	r2,124(sp)
   12b74:	e5838f0e 	bge	fp,r22,139b4 <___vfprintf_internal_r+0x1e50>
   12b78:	014000f4 	movhi	r5,3
   12b7c:	296b6084 	addi	r5,r5,-21118
   12b80:	dc403015 	stw	r17,192(sp)
   12b84:	d9402c15 	stw	r5,176(sp)
   12b88:	b023883a 	mov	r17,r22
   12b8c:	04c001c4 	movi	r19,7
   12b90:	a82d883a 	mov	r22,r21
   12b94:	902b883a 	mov	r21,r18
   12b98:	8025883a 	mov	r18,r16
   12b9c:	dc002d17 	ldw	r16,180(sp)
   12ba0:	00000306 	br	12bb0 <___vfprintf_internal_r+0x104c>
   12ba4:	8c7ffc04 	addi	r17,r17,-16
   12ba8:	42000204 	addi	r8,r8,8
   12bac:	e440110e 	bge	fp,r17,12bf4 <___vfprintf_internal_r+0x1090>
   12bb0:	18c00404 	addi	r3,r3,16
   12bb4:	10800044 	addi	r2,r2,1
   12bb8:	45000015 	stw	r20,0(r8)
   12bbc:	47000115 	stw	fp,4(r8)
   12bc0:	d8c02015 	stw	r3,128(sp)
   12bc4:	d8801f15 	stw	r2,124(sp)
   12bc8:	98bff60e 	bge	r19,r2,12ba4 <__alt_data_end+0xfc012ba4>
   12bcc:	d9801e04 	addi	r6,sp,120
   12bd0:	b80b883a 	mov	r5,r23
   12bd4:	8009883a 	mov	r4,r16
   12bd8:	0019e700 	call	19e70 <__sprint_r>
   12bdc:	103ce51e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12be0:	8c7ffc04 	addi	r17,r17,-16
   12be4:	d8c02017 	ldw	r3,128(sp)
   12be8:	d8801f17 	ldw	r2,124(sp)
   12bec:	da000404 	addi	r8,sp,16
   12bf0:	e47fef16 	blt	fp,r17,12bb0 <__alt_data_end+0xfc012bb0>
   12bf4:	9021883a 	mov	r16,r18
   12bf8:	a825883a 	mov	r18,r21
   12bfc:	b02b883a 	mov	r21,r22
   12c00:	882d883a 	mov	r22,r17
   12c04:	dc403017 	ldw	r17,192(sp)
   12c08:	d9002c17 	ldw	r4,176(sp)
   12c0c:	1d87883a 	add	r3,r3,r22
   12c10:	10800044 	addi	r2,r2,1
   12c14:	41000015 	stw	r4,0(r8)
   12c18:	45800115 	stw	r22,4(r8)
   12c1c:	d8c02015 	stw	r3,128(sp)
   12c20:	d8801f15 	stw	r2,124(sp)
   12c24:	010001c4 	movi	r4,7
   12c28:	20818e16 	blt	r4,r2,13264 <___vfprintf_internal_r+0x1700>
   12c2c:	42000204 	addi	r8,r8,8
   12c30:	003e0f06 	br	12470 <__alt_data_end+0xfc012470>
   12c34:	d9403317 	ldw	r5,204(sp)
   12c38:	00800044 	movi	r2,1
   12c3c:	18c00044 	addi	r3,r3,1
   12c40:	1141530e 	bge	r2,r5,13190 <___vfprintf_internal_r+0x162c>
   12c44:	dc401f17 	ldw	r17,124(sp)
   12c48:	00800044 	movi	r2,1
   12c4c:	40800115 	stw	r2,4(r8)
   12c50:	8c400044 	addi	r17,r17,1
   12c54:	44000015 	stw	r16,0(r8)
   12c58:	d8c02015 	stw	r3,128(sp)
   12c5c:	dc401f15 	stw	r17,124(sp)
   12c60:	008001c4 	movi	r2,7
   12c64:	14416b16 	blt	r2,r17,13214 <___vfprintf_internal_r+0x16b0>
   12c68:	42000204 	addi	r8,r8,8
   12c6c:	d8803717 	ldw	r2,220(sp)
   12c70:	d9003417 	ldw	r4,208(sp)
   12c74:	8c400044 	addi	r17,r17,1
   12c78:	10c7883a 	add	r3,r2,r3
   12c7c:	40800115 	stw	r2,4(r8)
   12c80:	41000015 	stw	r4,0(r8)
   12c84:	d8c02015 	stw	r3,128(sp)
   12c88:	dc401f15 	stw	r17,124(sp)
   12c8c:	008001c4 	movi	r2,7
   12c90:	14416916 	blt	r2,r17,13238 <___vfprintf_internal_r+0x16d4>
   12c94:	45800204 	addi	r22,r8,8
   12c98:	d9003617 	ldw	r4,216(sp)
   12c9c:	d9403817 	ldw	r5,224(sp)
   12ca0:	000d883a 	mov	r6,zero
   12ca4:	000f883a 	mov	r7,zero
   12ca8:	d8c03c15 	stw	r3,240(sp)
   12cac:	001dbf40 	call	1dbf4 <__eqdf2>
   12cb0:	d8c03c17 	ldw	r3,240(sp)
   12cb4:	1000bc26 	beq	r2,zero,12fa8 <___vfprintf_internal_r+0x1444>
   12cb8:	d9403317 	ldw	r5,204(sp)
   12cbc:	84000044 	addi	r16,r16,1
   12cc0:	8c400044 	addi	r17,r17,1
   12cc4:	28bfffc4 	addi	r2,r5,-1
   12cc8:	1887883a 	add	r3,r3,r2
   12ccc:	b0800115 	stw	r2,4(r22)
   12cd0:	b4000015 	stw	r16,0(r22)
   12cd4:	d8c02015 	stw	r3,128(sp)
   12cd8:	dc401f15 	stw	r17,124(sp)
   12cdc:	008001c4 	movi	r2,7
   12ce0:	14414316 	blt	r2,r17,131f0 <___vfprintf_internal_r+0x168c>
   12ce4:	b5800204 	addi	r22,r22,8
   12ce8:	d9003a17 	ldw	r4,232(sp)
   12cec:	df0022c4 	addi	fp,sp,139
   12cf0:	8c400044 	addi	r17,r17,1
   12cf4:	20c7883a 	add	r3,r4,r3
   12cf8:	b7000015 	stw	fp,0(r22)
   12cfc:	b1000115 	stw	r4,4(r22)
   12d00:	d8c02015 	stw	r3,128(sp)
   12d04:	dc401f15 	stw	r17,124(sp)
   12d08:	008001c4 	movi	r2,7
   12d0c:	14400e16 	blt	r2,r17,12d48 <___vfprintf_internal_r+0x11e4>
   12d10:	b2000204 	addi	r8,r22,8
   12d14:	003e1806 	br	12578 <__alt_data_end+0xfc012578>
   12d18:	010000f4 	movhi	r4,3
   12d1c:	212b6084 	addi	r4,r4,-21118
   12d20:	d9002c15 	stw	r4,176(sp)
   12d24:	d9002c17 	ldw	r4,176(sp)
   12d28:	1c07883a 	add	r3,r3,r16
   12d2c:	44000115 	stw	r16,4(r8)
   12d30:	41000015 	stw	r4,0(r8)
   12d34:	10800044 	addi	r2,r2,1
   12d38:	d8c02015 	stw	r3,128(sp)
   12d3c:	d8801f15 	stw	r2,124(sp)
   12d40:	010001c4 	movi	r4,7
   12d44:	20be0b0e 	bge	r4,r2,12574 <__alt_data_end+0xfc012574>
   12d48:	d9002d17 	ldw	r4,180(sp)
   12d4c:	d9801e04 	addi	r6,sp,120
   12d50:	b80b883a 	mov	r5,r23
   12d54:	0019e700 	call	19e70 <__sprint_r>
   12d58:	103c861e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12d5c:	d8c02017 	ldw	r3,128(sp)
   12d60:	da000404 	addi	r8,sp,16
   12d64:	003e0406 	br	12578 <__alt_data_end+0xfc012578>
   12d68:	d9002d17 	ldw	r4,180(sp)
   12d6c:	d9801e04 	addi	r6,sp,120
   12d70:	b80b883a 	mov	r5,r23
   12d74:	0019e700 	call	19e70 <__sprint_r>
   12d78:	103e3b26 	beq	r2,zero,12668 <__alt_data_end+0xfc012668>
   12d7c:	003c7d06 	br	11f74 <__alt_data_end+0xfc011f74>
   12d80:	d9002d17 	ldw	r4,180(sp)
   12d84:	d9801e04 	addi	r6,sp,120
   12d88:	b80b883a 	mov	r5,r23
   12d8c:	0019e700 	call	19e70 <__sprint_r>
   12d90:	103c781e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12d94:	d8c02017 	ldw	r3,128(sp)
   12d98:	da000404 	addi	r8,sp,16
   12d9c:	003de906 	br	12544 <__alt_data_end+0xfc012544>
   12da0:	d9002d17 	ldw	r4,180(sp)
   12da4:	d9801e04 	addi	r6,sp,120
   12da8:	b80b883a 	mov	r5,r23
   12dac:	0019e700 	call	19e70 <__sprint_r>
   12db0:	103c701e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12db4:	d8c02017 	ldw	r3,128(sp)
   12db8:	da000404 	addi	r8,sp,16
   12dbc:	003d9b06 	br	1242c <__alt_data_end+0xfc01242c>
   12dc0:	d9002d17 	ldw	r4,180(sp)
   12dc4:	d9801e04 	addi	r6,sp,120
   12dc8:	b80b883a 	mov	r5,r23
   12dcc:	0019e700 	call	19e70 <__sprint_r>
   12dd0:	103c681e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12dd4:	d8c02017 	ldw	r3,128(sp)
   12dd8:	da000404 	addi	r8,sp,16
   12ddc:	003da106 	br	12464 <__alt_data_end+0xfc012464>
   12de0:	d9402a17 	ldw	r5,168(sp)
   12de4:	d8002785 	stb	zero,158(sp)
   12de8:	283f0616 	blt	r5,zero,12a04 <__alt_data_end+0xfc012a04>
   12dec:	00ffdfc4 	movi	r3,-129
   12df0:	9d84b03a 	or	r2,r19,r22
   12df4:	90e4703a 	and	r18,r18,r3
   12df8:	103c3b26 	beq	r2,zero,11ee8 <__alt_data_end+0xfc011ee8>
   12dfc:	0039883a 	mov	fp,zero
   12e00:	003e5806 	br	12764 <__alt_data_end+0xfc012764>
   12e04:	9080040c 	andi	r2,r18,16
   12e08:	1001b326 	beq	r2,zero,134d8 <___vfprintf_internal_r+0x1974>
   12e0c:	d8c02e17 	ldw	r3,184(sp)
   12e10:	d9002a17 	ldw	r4,168(sp)
   12e14:	d8002785 	stb	zero,158(sp)
   12e18:	18800104 	addi	r2,r3,4
   12e1c:	1cc00017 	ldw	r19,0(r3)
   12e20:	002d883a 	mov	r22,zero
   12e24:	2001b516 	blt	r4,zero,134fc <___vfprintf_internal_r+0x1998>
   12e28:	00ffdfc4 	movi	r3,-129
   12e2c:	d8802e15 	stw	r2,184(sp)
   12e30:	90e4703a 	and	r18,r18,r3
   12e34:	983d0526 	beq	r19,zero,1224c <__alt_data_end+0xfc01224c>
   12e38:	0039883a 	mov	fp,zero
   12e3c:	003d0806 	br	12260 <__alt_data_end+0xfc012260>
   12e40:	dc402617 	ldw	r17,152(sp)
   12e44:	0441d30e 	bge	zero,r17,13594 <___vfprintf_internal_r+0x1a30>
   12e48:	dc403217 	ldw	r17,200(sp)
   12e4c:	d8803317 	ldw	r2,204(sp)
   12e50:	1440010e 	bge	r2,r17,12e58 <___vfprintf_internal_r+0x12f4>
   12e54:	1023883a 	mov	r17,r2
   12e58:	04400a0e 	bge	zero,r17,12e84 <___vfprintf_internal_r+0x1320>
   12e5c:	d8801f17 	ldw	r2,124(sp)
   12e60:	1c47883a 	add	r3,r3,r17
   12e64:	44000015 	stw	r16,0(r8)
   12e68:	10800044 	addi	r2,r2,1
   12e6c:	44400115 	stw	r17,4(r8)
   12e70:	d8c02015 	stw	r3,128(sp)
   12e74:	d8801f15 	stw	r2,124(sp)
   12e78:	010001c4 	movi	r4,7
   12e7c:	20826516 	blt	r4,r2,13814 <___vfprintf_internal_r+0x1cb0>
   12e80:	42000204 	addi	r8,r8,8
   12e84:	88026116 	blt	r17,zero,1380c <___vfprintf_internal_r+0x1ca8>
   12e88:	d9003217 	ldw	r4,200(sp)
   12e8c:	2463c83a 	sub	r17,r4,r17
   12e90:	04407b0e 	bge	zero,r17,13080 <___vfprintf_internal_r+0x151c>
   12e94:	05800404 	movi	r22,16
   12e98:	d8801f17 	ldw	r2,124(sp)
   12e9c:	b4419d0e 	bge	r22,r17,13514 <___vfprintf_internal_r+0x19b0>
   12ea0:	010000f4 	movhi	r4,3
   12ea4:	212b6084 	addi	r4,r4,-21118
   12ea8:	d9002c15 	stw	r4,176(sp)
   12eac:	070001c4 	movi	fp,7
   12eb0:	dcc02d17 	ldw	r19,180(sp)
   12eb4:	00000306 	br	12ec4 <___vfprintf_internal_r+0x1360>
   12eb8:	42000204 	addi	r8,r8,8
   12ebc:	8c7ffc04 	addi	r17,r17,-16
   12ec0:	b441970e 	bge	r22,r17,13520 <___vfprintf_internal_r+0x19bc>
   12ec4:	18c00404 	addi	r3,r3,16
   12ec8:	10800044 	addi	r2,r2,1
   12ecc:	45000015 	stw	r20,0(r8)
   12ed0:	45800115 	stw	r22,4(r8)
   12ed4:	d8c02015 	stw	r3,128(sp)
   12ed8:	d8801f15 	stw	r2,124(sp)
   12edc:	e0bff60e 	bge	fp,r2,12eb8 <__alt_data_end+0xfc012eb8>
   12ee0:	d9801e04 	addi	r6,sp,120
   12ee4:	b80b883a 	mov	r5,r23
   12ee8:	9809883a 	mov	r4,r19
   12eec:	0019e700 	call	19e70 <__sprint_r>
   12ef0:	103c201e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12ef4:	d8c02017 	ldw	r3,128(sp)
   12ef8:	d8801f17 	ldw	r2,124(sp)
   12efc:	da000404 	addi	r8,sp,16
   12f00:	003fee06 	br	12ebc <__alt_data_end+0xfc012ebc>
   12f04:	d9002d17 	ldw	r4,180(sp)
   12f08:	d9801e04 	addi	r6,sp,120
   12f0c:	b80b883a 	mov	r5,r23
   12f10:	0019e700 	call	19e70 <__sprint_r>
   12f14:	103c171e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   12f18:	d8c02017 	ldw	r3,128(sp)
   12f1c:	df002787 	ldb	fp,158(sp)
   12f20:	da000404 	addi	r8,sp,16
   12f24:	003d3406 	br	123f8 <__alt_data_end+0xfc0123f8>
   12f28:	9080040c 	andi	r2,r18,16
   12f2c:	10016126 	beq	r2,zero,134b4 <___vfprintf_internal_r+0x1950>
   12f30:	d9402e17 	ldw	r5,184(sp)
   12f34:	2cc00017 	ldw	r19,0(r5)
   12f38:	29400104 	addi	r5,r5,4
   12f3c:	d9402e15 	stw	r5,184(sp)
   12f40:	982dd7fa 	srai	r22,r19,31
   12f44:	b005883a 	mov	r2,r22
   12f48:	003c5a06 	br	120b4 <__alt_data_end+0xfc0120b4>
   12f4c:	9080040c 	andi	r2,r18,16
   12f50:	10003526 	beq	r2,zero,13028 <___vfprintf_internal_r+0x14c4>
   12f54:	d8c02e17 	ldw	r3,184(sp)
   12f58:	d9002a17 	ldw	r4,168(sp)
   12f5c:	d8002785 	stb	zero,158(sp)
   12f60:	18800104 	addi	r2,r3,4
   12f64:	1cc00017 	ldw	r19,0(r3)
   12f68:	002d883a 	mov	r22,zero
   12f6c:	20003716 	blt	r4,zero,1304c <___vfprintf_internal_r+0x14e8>
   12f70:	00ffdfc4 	movi	r3,-129
   12f74:	d8802e15 	stw	r2,184(sp)
   12f78:	90e4703a 	and	r18,r18,r3
   12f7c:	0039883a 	mov	fp,zero
   12f80:	983dd426 	beq	r19,zero,126d4 <__alt_data_end+0xfc0126d4>
   12f84:	00800244 	movi	r2,9
   12f88:	14fc5336 	bltu	r2,r19,120d8 <__alt_data_end+0xfc0120d8>
   12f8c:	d8c02817 	ldw	r3,160(sp)
   12f90:	dc001dc4 	addi	r16,sp,119
   12f94:	9cc00c04 	addi	r19,r19,48
   12f98:	1c07c83a 	sub	r3,r3,r16
   12f9c:	dcc01dc5 	stb	r19,119(sp)
   12fa0:	d8c02b15 	stw	r3,172(sp)
   12fa4:	003cc606 	br	122c0 <__alt_data_end+0xfc0122c0>
   12fa8:	d8803317 	ldw	r2,204(sp)
   12fac:	143fffc4 	addi	r16,r2,-1
   12fb0:	043f4d0e 	bge	zero,r16,12ce8 <__alt_data_end+0xfc012ce8>
   12fb4:	07000404 	movi	fp,16
   12fb8:	e400810e 	bge	fp,r16,131c0 <___vfprintf_internal_r+0x165c>
   12fbc:	014000f4 	movhi	r5,3
   12fc0:	296b6084 	addi	r5,r5,-21118
   12fc4:	d9402c15 	stw	r5,176(sp)
   12fc8:	01c001c4 	movi	r7,7
   12fcc:	dcc02d17 	ldw	r19,180(sp)
   12fd0:	00000306 	br	12fe0 <___vfprintf_internal_r+0x147c>
   12fd4:	b5800204 	addi	r22,r22,8
   12fd8:	843ffc04 	addi	r16,r16,-16
   12fdc:	e4007b0e 	bge	fp,r16,131cc <___vfprintf_internal_r+0x1668>
   12fe0:	18c00404 	addi	r3,r3,16
   12fe4:	8c400044 	addi	r17,r17,1
   12fe8:	b5000015 	stw	r20,0(r22)
   12fec:	b7000115 	stw	fp,4(r22)
   12ff0:	d8c02015 	stw	r3,128(sp)
   12ff4:	dc401f15 	stw	r17,124(sp)
   12ff8:	3c7ff60e 	bge	r7,r17,12fd4 <__alt_data_end+0xfc012fd4>
   12ffc:	d9801e04 	addi	r6,sp,120
   13000:	b80b883a 	mov	r5,r23
   13004:	9809883a 	mov	r4,r19
   13008:	d9c03c15 	stw	r7,240(sp)
   1300c:	0019e700 	call	19e70 <__sprint_r>
   13010:	d9c03c17 	ldw	r7,240(sp)
   13014:	103bd71e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13018:	d8c02017 	ldw	r3,128(sp)
   1301c:	dc401f17 	ldw	r17,124(sp)
   13020:	dd800404 	addi	r22,sp,16
   13024:	003fec06 	br	12fd8 <__alt_data_end+0xfc012fd8>
   13028:	9080100c 	andi	r2,r18,64
   1302c:	d8002785 	stb	zero,158(sp)
   13030:	10010e26 	beq	r2,zero,1346c <___vfprintf_internal_r+0x1908>
   13034:	d9402e17 	ldw	r5,184(sp)
   13038:	d8c02a17 	ldw	r3,168(sp)
   1303c:	002d883a 	mov	r22,zero
   13040:	28800104 	addi	r2,r5,4
   13044:	2cc0000b 	ldhu	r19,0(r5)
   13048:	183fc90e 	bge	r3,zero,12f70 <__alt_data_end+0xfc012f70>
   1304c:	d8802e15 	stw	r2,184(sp)
   13050:	0039883a 	mov	fp,zero
   13054:	9d84b03a 	or	r2,r19,r22
   13058:	103c1e1e 	bne	r2,zero,120d4 <__alt_data_end+0xfc0120d4>
   1305c:	00800044 	movi	r2,1
   13060:	003e6c06 	br	12a14 <__alt_data_end+0xfc012a14>
   13064:	d9002d17 	ldw	r4,180(sp)
   13068:	d9801e04 	addi	r6,sp,120
   1306c:	b80b883a 	mov	r5,r23
   13070:	0019e700 	call	19e70 <__sprint_r>
   13074:	103bbf1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13078:	d8c02017 	ldw	r3,128(sp)
   1307c:	da000404 	addi	r8,sp,16
   13080:	d9003217 	ldw	r4,200(sp)
   13084:	d8802617 	ldw	r2,152(sp)
   13088:	d9403317 	ldw	r5,204(sp)
   1308c:	8123883a 	add	r17,r16,r4
   13090:	11400216 	blt	r2,r5,1309c <___vfprintf_internal_r+0x1538>
   13094:	9100004c 	andi	r4,r18,1
   13098:	20000d26 	beq	r4,zero,130d0 <___vfprintf_internal_r+0x156c>
   1309c:	d9003717 	ldw	r4,220(sp)
   130a0:	d9403417 	ldw	r5,208(sp)
   130a4:	1907883a 	add	r3,r3,r4
   130a8:	d9001f17 	ldw	r4,124(sp)
   130ac:	41400015 	stw	r5,0(r8)
   130b0:	d9403717 	ldw	r5,220(sp)
   130b4:	21000044 	addi	r4,r4,1
   130b8:	d8c02015 	stw	r3,128(sp)
   130bc:	41400115 	stw	r5,4(r8)
   130c0:	d9001f15 	stw	r4,124(sp)
   130c4:	014001c4 	movi	r5,7
   130c8:	2901e816 	blt	r5,r4,1386c <___vfprintf_internal_r+0x1d08>
   130cc:	42000204 	addi	r8,r8,8
   130d0:	d9003317 	ldw	r4,204(sp)
   130d4:	8121883a 	add	r16,r16,r4
   130d8:	2085c83a 	sub	r2,r4,r2
   130dc:	8461c83a 	sub	r16,r16,r17
   130e0:	1400010e 	bge	r2,r16,130e8 <___vfprintf_internal_r+0x1584>
   130e4:	1021883a 	mov	r16,r2
   130e8:	04000a0e 	bge	zero,r16,13114 <___vfprintf_internal_r+0x15b0>
   130ec:	d9001f17 	ldw	r4,124(sp)
   130f0:	1c07883a 	add	r3,r3,r16
   130f4:	44400015 	stw	r17,0(r8)
   130f8:	21000044 	addi	r4,r4,1
   130fc:	44000115 	stw	r16,4(r8)
   13100:	d8c02015 	stw	r3,128(sp)
   13104:	d9001f15 	stw	r4,124(sp)
   13108:	014001c4 	movi	r5,7
   1310c:	2901fb16 	blt	r5,r4,138fc <___vfprintf_internal_r+0x1d98>
   13110:	42000204 	addi	r8,r8,8
   13114:	8001f716 	blt	r16,zero,138f4 <___vfprintf_internal_r+0x1d90>
   13118:	1421c83a 	sub	r16,r2,r16
   1311c:	043d160e 	bge	zero,r16,12578 <__alt_data_end+0xfc012578>
   13120:	04400404 	movi	r17,16
   13124:	d8801f17 	ldw	r2,124(sp)
   13128:	8c3efb0e 	bge	r17,r16,12d18 <__alt_data_end+0xfc012d18>
   1312c:	014000f4 	movhi	r5,3
   13130:	296b6084 	addi	r5,r5,-21118
   13134:	d9402c15 	stw	r5,176(sp)
   13138:	058001c4 	movi	r22,7
   1313c:	dcc02d17 	ldw	r19,180(sp)
   13140:	00000306 	br	13150 <___vfprintf_internal_r+0x15ec>
   13144:	42000204 	addi	r8,r8,8
   13148:	843ffc04 	addi	r16,r16,-16
   1314c:	8c3ef50e 	bge	r17,r16,12d24 <__alt_data_end+0xfc012d24>
   13150:	18c00404 	addi	r3,r3,16
   13154:	10800044 	addi	r2,r2,1
   13158:	45000015 	stw	r20,0(r8)
   1315c:	44400115 	stw	r17,4(r8)
   13160:	d8c02015 	stw	r3,128(sp)
   13164:	d8801f15 	stw	r2,124(sp)
   13168:	b0bff60e 	bge	r22,r2,13144 <__alt_data_end+0xfc013144>
   1316c:	d9801e04 	addi	r6,sp,120
   13170:	b80b883a 	mov	r5,r23
   13174:	9809883a 	mov	r4,r19
   13178:	0019e700 	call	19e70 <__sprint_r>
   1317c:	103b7d1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13180:	d8c02017 	ldw	r3,128(sp)
   13184:	d8801f17 	ldw	r2,124(sp)
   13188:	da000404 	addi	r8,sp,16
   1318c:	003fee06 	br	13148 <__alt_data_end+0xfc013148>
   13190:	9088703a 	and	r4,r18,r2
   13194:	203eab1e 	bne	r4,zero,12c44 <__alt_data_end+0xfc012c44>
   13198:	dc401f17 	ldw	r17,124(sp)
   1319c:	40800115 	stw	r2,4(r8)
   131a0:	44000015 	stw	r16,0(r8)
   131a4:	8c400044 	addi	r17,r17,1
   131a8:	d8c02015 	stw	r3,128(sp)
   131ac:	dc401f15 	stw	r17,124(sp)
   131b0:	008001c4 	movi	r2,7
   131b4:	14400e16 	blt	r2,r17,131f0 <___vfprintf_internal_r+0x168c>
   131b8:	45800204 	addi	r22,r8,8
   131bc:	003eca06 	br	12ce8 <__alt_data_end+0xfc012ce8>
   131c0:	010000f4 	movhi	r4,3
   131c4:	212b6084 	addi	r4,r4,-21118
   131c8:	d9002c15 	stw	r4,176(sp)
   131cc:	d8802c17 	ldw	r2,176(sp)
   131d0:	1c07883a 	add	r3,r3,r16
   131d4:	8c400044 	addi	r17,r17,1
   131d8:	b0800015 	stw	r2,0(r22)
   131dc:	b4000115 	stw	r16,4(r22)
   131e0:	d8c02015 	stw	r3,128(sp)
   131e4:	dc401f15 	stw	r17,124(sp)
   131e8:	008001c4 	movi	r2,7
   131ec:	147ebd0e 	bge	r2,r17,12ce4 <__alt_data_end+0xfc012ce4>
   131f0:	d9002d17 	ldw	r4,180(sp)
   131f4:	d9801e04 	addi	r6,sp,120
   131f8:	b80b883a 	mov	r5,r23
   131fc:	0019e700 	call	19e70 <__sprint_r>
   13200:	103b5c1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13204:	d8c02017 	ldw	r3,128(sp)
   13208:	dc401f17 	ldw	r17,124(sp)
   1320c:	dd800404 	addi	r22,sp,16
   13210:	003eb506 	br	12ce8 <__alt_data_end+0xfc012ce8>
   13214:	d9002d17 	ldw	r4,180(sp)
   13218:	d9801e04 	addi	r6,sp,120
   1321c:	b80b883a 	mov	r5,r23
   13220:	0019e700 	call	19e70 <__sprint_r>
   13224:	103b531e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13228:	d8c02017 	ldw	r3,128(sp)
   1322c:	dc401f17 	ldw	r17,124(sp)
   13230:	da000404 	addi	r8,sp,16
   13234:	003e8d06 	br	12c6c <__alt_data_end+0xfc012c6c>
   13238:	d9002d17 	ldw	r4,180(sp)
   1323c:	d9801e04 	addi	r6,sp,120
   13240:	b80b883a 	mov	r5,r23
   13244:	0019e700 	call	19e70 <__sprint_r>
   13248:	103b4a1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   1324c:	d8c02017 	ldw	r3,128(sp)
   13250:	dc401f17 	ldw	r17,124(sp)
   13254:	dd800404 	addi	r22,sp,16
   13258:	003e8f06 	br	12c98 <__alt_data_end+0xfc012c98>
   1325c:	0027883a 	mov	r19,zero
   13260:	003f4a06 	br	12f8c <__alt_data_end+0xfc012f8c>
   13264:	d9002d17 	ldw	r4,180(sp)
   13268:	d9801e04 	addi	r6,sp,120
   1326c:	b80b883a 	mov	r5,r23
   13270:	0019e700 	call	19e70 <__sprint_r>
   13274:	103b3f1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13278:	d8c02017 	ldw	r3,128(sp)
   1327c:	da000404 	addi	r8,sp,16
   13280:	003c7b06 	br	12470 <__alt_data_end+0xfc012470>
   13284:	d9402a17 	ldw	r5,168(sp)
   13288:	04e7c83a 	sub	r19,zero,r19
   1328c:	07000b44 	movi	fp,45
   13290:	9804c03a 	cmpne	r2,r19,zero
   13294:	05adc83a 	sub	r22,zero,r22
   13298:	df002785 	stb	fp,158(sp)
   1329c:	b0adc83a 	sub	r22,r22,r2
   132a0:	28017b16 	blt	r5,zero,13890 <___vfprintf_internal_r+0x1d2c>
   132a4:	00bfdfc4 	movi	r2,-129
   132a8:	90a4703a 	and	r18,r18,r2
   132ac:	003b8906 	br	120d4 <__alt_data_end+0xfc0120d4>
   132b0:	d9003617 	ldw	r4,216(sp)
   132b4:	d9403817 	ldw	r5,224(sp)
   132b8:	da003d15 	stw	r8,244(sp)
   132bc:	00186540 	call	18654 <__fpclassifyd>
   132c0:	da003d17 	ldw	r8,244(sp)
   132c4:	1000f026 	beq	r2,zero,13688 <___vfprintf_internal_r+0x1b24>
   132c8:	d9002a17 	ldw	r4,168(sp)
   132cc:	05bff7c4 	movi	r22,-33
   132d0:	00bfffc4 	movi	r2,-1
   132d4:	8dac703a 	and	r22,r17,r22
   132d8:	20820026 	beq	r4,r2,13adc <___vfprintf_internal_r+0x1f78>
   132dc:	008011c4 	movi	r2,71
   132e0:	b081f726 	beq	r22,r2,13ac0 <___vfprintf_internal_r+0x1f5c>
   132e4:	d9003817 	ldw	r4,224(sp)
   132e8:	90c04014 	ori	r3,r18,256
   132ec:	d8c02c15 	stw	r3,176(sp)
   132f0:	20021516 	blt	r4,zero,13b48 <___vfprintf_internal_r+0x1fe4>
   132f4:	dcc03817 	ldw	r19,224(sp)
   132f8:	d8002905 	stb	zero,164(sp)
   132fc:	00801984 	movi	r2,102
   13300:	8881f926 	beq	r17,r2,13ae8 <___vfprintf_internal_r+0x1f84>
   13304:	00801184 	movi	r2,70
   13308:	88821c26 	beq	r17,r2,13b7c <___vfprintf_internal_r+0x2018>
   1330c:	00801144 	movi	r2,69
   13310:	b081ef26 	beq	r22,r2,13ad0 <___vfprintf_internal_r+0x1f6c>
   13314:	d8c02a17 	ldw	r3,168(sp)
   13318:	d8802104 	addi	r2,sp,132
   1331c:	d8800315 	stw	r2,12(sp)
   13320:	d9403617 	ldw	r5,216(sp)
   13324:	d8802504 	addi	r2,sp,148
   13328:	d9002d17 	ldw	r4,180(sp)
   1332c:	d8800215 	stw	r2,8(sp)
   13330:	d8802604 	addi	r2,sp,152
   13334:	d8c00015 	stw	r3,0(sp)
   13338:	d8800115 	stw	r2,4(sp)
   1333c:	01c00084 	movi	r7,2
   13340:	980d883a 	mov	r6,r19
   13344:	d8c03c15 	stw	r3,240(sp)
   13348:	da003d15 	stw	r8,244(sp)
   1334c:	00142940 	call	14294 <_dtoa_r>
   13350:	1021883a 	mov	r16,r2
   13354:	008019c4 	movi	r2,103
   13358:	d8c03c17 	ldw	r3,240(sp)
   1335c:	da003d17 	ldw	r8,244(sp)
   13360:	88817126 	beq	r17,r2,13928 <___vfprintf_internal_r+0x1dc4>
   13364:	008011c4 	movi	r2,71
   13368:	88829126 	beq	r17,r2,13db0 <___vfprintf_internal_r+0x224c>
   1336c:	80f9883a 	add	fp,r16,r3
   13370:	d9003617 	ldw	r4,216(sp)
   13374:	000d883a 	mov	r6,zero
   13378:	000f883a 	mov	r7,zero
   1337c:	980b883a 	mov	r5,r19
   13380:	da003d15 	stw	r8,244(sp)
   13384:	001dbf40 	call	1dbf4 <__eqdf2>
   13388:	da003d17 	ldw	r8,244(sp)
   1338c:	10018d26 	beq	r2,zero,139c4 <___vfprintf_internal_r+0x1e60>
   13390:	d8802117 	ldw	r2,132(sp)
   13394:	1700062e 	bgeu	r2,fp,133b0 <___vfprintf_internal_r+0x184c>
   13398:	01000c04 	movi	r4,48
   1339c:	10c00044 	addi	r3,r2,1
   133a0:	d8c02115 	stw	r3,132(sp)
   133a4:	11000005 	stb	r4,0(r2)
   133a8:	d8802117 	ldw	r2,132(sp)
   133ac:	173ffb36 	bltu	r2,fp,1339c <__alt_data_end+0xfc01339c>
   133b0:	1405c83a 	sub	r2,r2,r16
   133b4:	d8803315 	stw	r2,204(sp)
   133b8:	008011c4 	movi	r2,71
   133bc:	b0817626 	beq	r22,r2,13998 <___vfprintf_internal_r+0x1e34>
   133c0:	00801944 	movi	r2,101
   133c4:	1442800e 	bge	r2,r17,13dc8 <___vfprintf_internal_r+0x2264>
   133c8:	d8c02617 	ldw	r3,152(sp)
   133cc:	00801984 	movi	r2,102
   133d0:	d8c03215 	stw	r3,200(sp)
   133d4:	8881fe26 	beq	r17,r2,13bd0 <___vfprintf_internal_r+0x206c>
   133d8:	d8c03217 	ldw	r3,200(sp)
   133dc:	d9003317 	ldw	r4,204(sp)
   133e0:	1901dd16 	blt	r3,r4,13b58 <___vfprintf_internal_r+0x1ff4>
   133e4:	9480004c 	andi	r18,r18,1
   133e8:	90022b1e 	bne	r18,zero,13c98 <___vfprintf_internal_r+0x2134>
   133ec:	1805883a 	mov	r2,r3
   133f0:	18028316 	blt	r3,zero,13e00 <___vfprintf_internal_r+0x229c>
   133f4:	d8c03217 	ldw	r3,200(sp)
   133f8:	044019c4 	movi	r17,103
   133fc:	d8c02b15 	stw	r3,172(sp)
   13400:	df002907 	ldb	fp,164(sp)
   13404:	e001531e 	bne	fp,zero,13954 <___vfprintf_internal_r+0x1df0>
   13408:	df002783 	ldbu	fp,158(sp)
   1340c:	d8802915 	stw	r2,164(sp)
   13410:	dc802c17 	ldw	r18,176(sp)
   13414:	d8002a15 	stw	zero,168(sp)
   13418:	003baf06 	br	122d8 <__alt_data_end+0xfc0122d8>
   1341c:	d8c02e17 	ldw	r3,184(sp)
   13420:	d9002e17 	ldw	r4,184(sp)
   13424:	d9402e17 	ldw	r5,184(sp)
   13428:	18c00017 	ldw	r3,0(r3)
   1342c:	21000117 	ldw	r4,4(r4)
   13430:	29400204 	addi	r5,r5,8
   13434:	d8c03615 	stw	r3,216(sp)
   13438:	d9003815 	stw	r4,224(sp)
   1343c:	d9402e15 	stw	r5,184(sp)
   13440:	003b5006 	br	12184 <__alt_data_end+0xfc012184>
   13444:	ac400007 	ldb	r17,0(r21)
   13448:	003a2806 	br	11cec <__alt_data_end+0xfc011cec>
   1344c:	9080100c 	andi	r2,r18,64
   13450:	1000a826 	beq	r2,zero,136f4 <___vfprintf_internal_r+0x1b90>
   13454:	d8c02e17 	ldw	r3,184(sp)
   13458:	002d883a 	mov	r22,zero
   1345c:	1cc0000b 	ldhu	r19,0(r3)
   13460:	18c00104 	addi	r3,r3,4
   13464:	d8c02e15 	stw	r3,184(sp)
   13468:	003caf06 	br	12728 <__alt_data_end+0xfc012728>
   1346c:	d9002e17 	ldw	r4,184(sp)
   13470:	d9402a17 	ldw	r5,168(sp)
   13474:	002d883a 	mov	r22,zero
   13478:	20800104 	addi	r2,r4,4
   1347c:	24c00017 	ldw	r19,0(r4)
   13480:	283ebb0e 	bge	r5,zero,12f70 <__alt_data_end+0xfc012f70>
   13484:	003ef106 	br	1304c <__alt_data_end+0xfc01304c>
   13488:	9080040c 	andi	r2,r18,16
   1348c:	1000921e 	bne	r2,zero,136d8 <___vfprintf_internal_r+0x1b74>
   13490:	9480100c 	andi	r18,r18,64
   13494:	90013926 	beq	r18,zero,1397c <___vfprintf_internal_r+0x1e18>
   13498:	d9402e17 	ldw	r5,184(sp)
   1349c:	d8c02f17 	ldw	r3,188(sp)
   134a0:	28800017 	ldw	r2,0(r5)
   134a4:	29400104 	addi	r5,r5,4
   134a8:	d9402e15 	stw	r5,184(sp)
   134ac:	10c0000d 	sth	r3,0(r2)
   134b0:	0039e406 	br	11c44 <__alt_data_end+0xfc011c44>
   134b4:	9080100c 	andi	r2,r18,64
   134b8:	10008026 	beq	r2,zero,136bc <___vfprintf_internal_r+0x1b58>
   134bc:	d8802e17 	ldw	r2,184(sp)
   134c0:	14c0000f 	ldh	r19,0(r2)
   134c4:	10800104 	addi	r2,r2,4
   134c8:	d8802e15 	stw	r2,184(sp)
   134cc:	982dd7fa 	srai	r22,r19,31
   134d0:	b005883a 	mov	r2,r22
   134d4:	003af706 	br	120b4 <__alt_data_end+0xfc0120b4>
   134d8:	9080100c 	andi	r2,r18,64
   134dc:	d8002785 	stb	zero,158(sp)
   134e0:	10008a1e 	bne	r2,zero,1370c <___vfprintf_internal_r+0x1ba8>
   134e4:	d9002e17 	ldw	r4,184(sp)
   134e8:	d9402a17 	ldw	r5,168(sp)
   134ec:	002d883a 	mov	r22,zero
   134f0:	20800104 	addi	r2,r4,4
   134f4:	24c00017 	ldw	r19,0(r4)
   134f8:	283e4b0e 	bge	r5,zero,12e28 <__alt_data_end+0xfc012e28>
   134fc:	9d86b03a 	or	r3,r19,r22
   13500:	d8802e15 	stw	r2,184(sp)
   13504:	183e4c1e 	bne	r3,zero,12e38 <__alt_data_end+0xfc012e38>
   13508:	0039883a 	mov	fp,zero
   1350c:	0005883a 	mov	r2,zero
   13510:	003d4006 	br	12a14 <__alt_data_end+0xfc012a14>
   13514:	014000f4 	movhi	r5,3
   13518:	296b6084 	addi	r5,r5,-21118
   1351c:	d9402c15 	stw	r5,176(sp)
   13520:	d9402c17 	ldw	r5,176(sp)
   13524:	1c47883a 	add	r3,r3,r17
   13528:	10800044 	addi	r2,r2,1
   1352c:	41400015 	stw	r5,0(r8)
   13530:	44400115 	stw	r17,4(r8)
   13534:	d8c02015 	stw	r3,128(sp)
   13538:	d8801f15 	stw	r2,124(sp)
   1353c:	010001c4 	movi	r4,7
   13540:	20bec816 	blt	r4,r2,13064 <__alt_data_end+0xfc013064>
   13544:	42000204 	addi	r8,r8,8
   13548:	003ecd06 	br	13080 <__alt_data_end+0xfc013080>
   1354c:	d9002a17 	ldw	r4,168(sp)
   13550:	d8002785 	stb	zero,158(sp)
   13554:	203d2d16 	blt	r4,zero,12a0c <__alt_data_end+0xfc012a0c>
   13558:	00bfdfc4 	movi	r2,-129
   1355c:	90a4703a 	and	r18,r18,r2
   13560:	003a6106 	br	11ee8 <__alt_data_end+0xfc011ee8>
   13564:	010000f4 	movhi	r4,3
   13568:	212b6084 	addi	r4,r4,-21118
   1356c:	d9002c15 	stw	r4,176(sp)
   13570:	003bea06 	br	1251c <__alt_data_end+0xfc01251c>
   13574:	d9002d17 	ldw	r4,180(sp)
   13578:	d9801e04 	addi	r6,sp,120
   1357c:	b80b883a 	mov	r5,r23
   13580:	0019e700 	call	19e70 <__sprint_r>
   13584:	103a7b1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13588:	d8c02017 	ldw	r3,128(sp)
   1358c:	da000404 	addi	r8,sp,16
   13590:	003d4106 	br	12a98 <__alt_data_end+0xfc012a98>
   13594:	d8801f17 	ldw	r2,124(sp)
   13598:	014000f4 	movhi	r5,3
   1359c:	01000044 	movi	r4,1
   135a0:	18c00044 	addi	r3,r3,1
   135a4:	10800044 	addi	r2,r2,1
   135a8:	296b5804 	addi	r5,r5,-21152
   135ac:	41000115 	stw	r4,4(r8)
   135b0:	41400015 	stw	r5,0(r8)
   135b4:	d8c02015 	stw	r3,128(sp)
   135b8:	d8801f15 	stw	r2,124(sp)
   135bc:	010001c4 	movi	r4,7
   135c0:	20805c16 	blt	r4,r2,13734 <___vfprintf_internal_r+0x1bd0>
   135c4:	42000204 	addi	r8,r8,8
   135c8:	8800041e 	bne	r17,zero,135dc <___vfprintf_internal_r+0x1a78>
   135cc:	d8803317 	ldw	r2,204(sp)
   135d0:	1000021e 	bne	r2,zero,135dc <___vfprintf_internal_r+0x1a78>
   135d4:	9080004c 	andi	r2,r18,1
   135d8:	103be726 	beq	r2,zero,12578 <__alt_data_end+0xfc012578>
   135dc:	d9003717 	ldw	r4,220(sp)
   135e0:	d8801f17 	ldw	r2,124(sp)
   135e4:	d9403417 	ldw	r5,208(sp)
   135e8:	20c7883a 	add	r3,r4,r3
   135ec:	10800044 	addi	r2,r2,1
   135f0:	41000115 	stw	r4,4(r8)
   135f4:	41400015 	stw	r5,0(r8)
   135f8:	d8c02015 	stw	r3,128(sp)
   135fc:	d8801f15 	stw	r2,124(sp)
   13600:	010001c4 	movi	r4,7
   13604:	20812116 	blt	r4,r2,13a8c <___vfprintf_internal_r+0x1f28>
   13608:	42000204 	addi	r8,r8,8
   1360c:	0463c83a 	sub	r17,zero,r17
   13610:	0440730e 	bge	zero,r17,137e0 <___vfprintf_internal_r+0x1c7c>
   13614:	05800404 	movi	r22,16
   13618:	b440860e 	bge	r22,r17,13834 <___vfprintf_internal_r+0x1cd0>
   1361c:	014000f4 	movhi	r5,3
   13620:	296b6084 	addi	r5,r5,-21118
   13624:	d9402c15 	stw	r5,176(sp)
   13628:	070001c4 	movi	fp,7
   1362c:	dcc02d17 	ldw	r19,180(sp)
   13630:	00000306 	br	13640 <___vfprintf_internal_r+0x1adc>
   13634:	42000204 	addi	r8,r8,8
   13638:	8c7ffc04 	addi	r17,r17,-16
   1363c:	b440800e 	bge	r22,r17,13840 <___vfprintf_internal_r+0x1cdc>
   13640:	18c00404 	addi	r3,r3,16
   13644:	10800044 	addi	r2,r2,1
   13648:	45000015 	stw	r20,0(r8)
   1364c:	45800115 	stw	r22,4(r8)
   13650:	d8c02015 	stw	r3,128(sp)
   13654:	d8801f15 	stw	r2,124(sp)
   13658:	e0bff60e 	bge	fp,r2,13634 <__alt_data_end+0xfc013634>
   1365c:	d9801e04 	addi	r6,sp,120
   13660:	b80b883a 	mov	r5,r23
   13664:	9809883a 	mov	r4,r19
   13668:	0019e700 	call	19e70 <__sprint_r>
   1366c:	103a411e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13670:	d8c02017 	ldw	r3,128(sp)
   13674:	d8801f17 	ldw	r2,124(sp)
   13678:	da000404 	addi	r8,sp,16
   1367c:	003fee06 	br	13638 <__alt_data_end+0xfc013638>
   13680:	00bfffc4 	movi	r2,-1
   13684:	003a3f06 	br	11f84 <__alt_data_end+0xfc011f84>
   13688:	008011c4 	movi	r2,71
   1368c:	1440b816 	blt	r2,r17,13970 <___vfprintf_internal_r+0x1e0c>
   13690:	040000f4 	movhi	r16,3
   13694:	842b4a04 	addi	r16,r16,-21208
   13698:	00c000c4 	movi	r3,3
   1369c:	00bfdfc4 	movi	r2,-129
   136a0:	d8c02915 	stw	r3,164(sp)
   136a4:	90a4703a 	and	r18,r18,r2
   136a8:	df002783 	ldbu	fp,158(sp)
   136ac:	d8c02b15 	stw	r3,172(sp)
   136b0:	d8002a15 	stw	zero,168(sp)
   136b4:	d8003215 	stw	zero,200(sp)
   136b8:	003b0706 	br	122d8 <__alt_data_end+0xfc0122d8>
   136bc:	d8c02e17 	ldw	r3,184(sp)
   136c0:	1cc00017 	ldw	r19,0(r3)
   136c4:	18c00104 	addi	r3,r3,4
   136c8:	d8c02e15 	stw	r3,184(sp)
   136cc:	982dd7fa 	srai	r22,r19,31
   136d0:	b005883a 	mov	r2,r22
   136d4:	003a7706 	br	120b4 <__alt_data_end+0xfc0120b4>
   136d8:	d8c02e17 	ldw	r3,184(sp)
   136dc:	d9002f17 	ldw	r4,188(sp)
   136e0:	18800017 	ldw	r2,0(r3)
   136e4:	18c00104 	addi	r3,r3,4
   136e8:	d8c02e15 	stw	r3,184(sp)
   136ec:	11000015 	stw	r4,0(r2)
   136f0:	00395406 	br	11c44 <__alt_data_end+0xfc011c44>
   136f4:	d9002e17 	ldw	r4,184(sp)
   136f8:	002d883a 	mov	r22,zero
   136fc:	24c00017 	ldw	r19,0(r4)
   13700:	21000104 	addi	r4,r4,4
   13704:	d9002e15 	stw	r4,184(sp)
   13708:	003c0706 	br	12728 <__alt_data_end+0xfc012728>
   1370c:	d9402e17 	ldw	r5,184(sp)
   13710:	d8c02a17 	ldw	r3,168(sp)
   13714:	002d883a 	mov	r22,zero
   13718:	28800104 	addi	r2,r5,4
   1371c:	2cc0000b 	ldhu	r19,0(r5)
   13720:	183dc10e 	bge	r3,zero,12e28 <__alt_data_end+0xfc012e28>
   13724:	003f7506 	br	134fc <__alt_data_end+0xfc0134fc>
   13728:	040000f4 	movhi	r16,3
   1372c:	842b4804 	addi	r16,r16,-21216
   13730:	003aa706 	br	121d0 <__alt_data_end+0xfc0121d0>
   13734:	d9002d17 	ldw	r4,180(sp)
   13738:	d9801e04 	addi	r6,sp,120
   1373c:	b80b883a 	mov	r5,r23
   13740:	0019e700 	call	19e70 <__sprint_r>
   13744:	103a0b1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13748:	dc402617 	ldw	r17,152(sp)
   1374c:	d8c02017 	ldw	r3,128(sp)
   13750:	da000404 	addi	r8,sp,16
   13754:	003f9c06 	br	135c8 <__alt_data_end+0xfc0135c8>
   13758:	ac400043 	ldbu	r17,1(r21)
   1375c:	84000814 	ori	r16,r16,32
   13760:	ad400044 	addi	r21,r21,1
   13764:	8c403fcc 	andi	r17,r17,255
   13768:	8c40201c 	xori	r17,r17,128
   1376c:	8c7fe004 	addi	r17,r17,-128
   13770:	00395e06 	br	11cec <__alt_data_end+0xfc011cec>
   13774:	d8c02e15 	stw	r3,184(sp)
   13778:	0039883a 	mov	fp,zero
   1377c:	003e3506 	br	13054 <__alt_data_end+0xfc013054>
   13780:	d9002d17 	ldw	r4,180(sp)
   13784:	d9801e04 	addi	r6,sp,120
   13788:	b80b883a 	mov	r5,r23
   1378c:	0019e700 	call	19e70 <__sprint_r>
   13790:	1039f81e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13794:	d8c02017 	ldw	r3,128(sp)
   13798:	da000404 	addi	r8,sp,16
   1379c:	003cd006 	br	12ae0 <__alt_data_end+0xfc012ae0>
   137a0:	8009883a 	mov	r4,r16
   137a4:	df003d15 	stw	fp,244(sp)
   137a8:	000f8080 	call	f808 <strlen>
   137ac:	d8802b15 	stw	r2,172(sp)
   137b0:	da003d17 	ldw	r8,244(sp)
   137b4:	103c200e 	bge	r2,zero,12838 <__alt_data_end+0xfc012838>
   137b8:	0005883a 	mov	r2,zero
   137bc:	003c1e06 	br	12838 <__alt_data_end+0xfc012838>
   137c0:	d9002d17 	ldw	r4,180(sp)
   137c4:	d9801e04 	addi	r6,sp,120
   137c8:	b80b883a 	mov	r5,r23
   137cc:	0019e700 	call	19e70 <__sprint_r>
   137d0:	1039e81e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   137d4:	d8c02017 	ldw	r3,128(sp)
   137d8:	d8801f17 	ldw	r2,124(sp)
   137dc:	da000404 	addi	r8,sp,16
   137e0:	d9403317 	ldw	r5,204(sp)
   137e4:	10800044 	addi	r2,r2,1
   137e8:	44000015 	stw	r16,0(r8)
   137ec:	28c7883a 	add	r3,r5,r3
   137f0:	003b5b06 	br	12560 <__alt_data_end+0xfc012560>
   137f4:	010000f4 	movhi	r4,3
   137f8:	212b6484 	addi	r4,r4,-21102
   137fc:	d9003515 	stw	r4,212(sp)
   13800:	003af206 	br	123cc <__alt_data_end+0xfc0123cc>
   13804:	013fffc4 	movi	r4,-1
   13808:	003a0806 	br	1202c <__alt_data_end+0xfc01202c>
   1380c:	0023883a 	mov	r17,zero
   13810:	003d9d06 	br	12e88 <__alt_data_end+0xfc012e88>
   13814:	d9002d17 	ldw	r4,180(sp)
   13818:	d9801e04 	addi	r6,sp,120
   1381c:	b80b883a 	mov	r5,r23
   13820:	0019e700 	call	19e70 <__sprint_r>
   13824:	1039d31e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13828:	d8c02017 	ldw	r3,128(sp)
   1382c:	da000404 	addi	r8,sp,16
   13830:	003d9406 	br	12e84 <__alt_data_end+0xfc012e84>
   13834:	010000f4 	movhi	r4,3
   13838:	212b6084 	addi	r4,r4,-21118
   1383c:	d9002c15 	stw	r4,176(sp)
   13840:	d9002c17 	ldw	r4,176(sp)
   13844:	1c47883a 	add	r3,r3,r17
   13848:	10800044 	addi	r2,r2,1
   1384c:	41000015 	stw	r4,0(r8)
   13850:	44400115 	stw	r17,4(r8)
   13854:	d8c02015 	stw	r3,128(sp)
   13858:	d8801f15 	stw	r2,124(sp)
   1385c:	010001c4 	movi	r4,7
   13860:	20bfd716 	blt	r4,r2,137c0 <__alt_data_end+0xfc0137c0>
   13864:	42000204 	addi	r8,r8,8
   13868:	003fdd06 	br	137e0 <__alt_data_end+0xfc0137e0>
   1386c:	d9002d17 	ldw	r4,180(sp)
   13870:	d9801e04 	addi	r6,sp,120
   13874:	b80b883a 	mov	r5,r23
   13878:	0019e700 	call	19e70 <__sprint_r>
   1387c:	1039bd1e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13880:	d8802617 	ldw	r2,152(sp)
   13884:	d8c02017 	ldw	r3,128(sp)
   13888:	da000404 	addi	r8,sp,16
   1388c:	003e1006 	br	130d0 <__alt_data_end+0xfc0130d0>
   13890:	00800044 	movi	r2,1
   13894:	10803fcc 	andi	r2,r2,255
   13898:	00c00044 	movi	r3,1
   1389c:	10fa0d26 	beq	r2,r3,120d4 <__alt_data_end+0xfc0120d4>
   138a0:	00c00084 	movi	r3,2
   138a4:	10fbaf26 	beq	r2,r3,12764 <__alt_data_end+0xfc012764>
   138a8:	003a6d06 	br	12260 <__alt_data_end+0xfc012260>
   138ac:	010000f4 	movhi	r4,3
   138b0:	212b6484 	addi	r4,r4,-21102
   138b4:	d9003515 	stw	r4,212(sp)
   138b8:	003b5406 	br	1260c <__alt_data_end+0xfc01260c>
   138bc:	d8802a17 	ldw	r2,168(sp)
   138c0:	00c00184 	movi	r3,6
   138c4:	1880012e 	bgeu	r3,r2,138cc <___vfprintf_internal_r+0x1d68>
   138c8:	1805883a 	mov	r2,r3
   138cc:	d8802b15 	stw	r2,172(sp)
   138d0:	1000ef16 	blt	r2,zero,13c90 <___vfprintf_internal_r+0x212c>
   138d4:	040000f4 	movhi	r16,3
   138d8:	d8802915 	stw	r2,164(sp)
   138dc:	dcc02e15 	stw	r19,184(sp)
   138e0:	d8002a15 	stw	zero,168(sp)
   138e4:	d8003215 	stw	zero,200(sp)
   138e8:	842b5604 	addi	r16,r16,-21160
   138ec:	0039883a 	mov	fp,zero
   138f0:	003a8006 	br	122f4 <__alt_data_end+0xfc0122f4>
   138f4:	0021883a 	mov	r16,zero
   138f8:	003e0706 	br	13118 <__alt_data_end+0xfc013118>
   138fc:	d9002d17 	ldw	r4,180(sp)
   13900:	d9801e04 	addi	r6,sp,120
   13904:	b80b883a 	mov	r5,r23
   13908:	0019e700 	call	19e70 <__sprint_r>
   1390c:	1039991e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13910:	d8802617 	ldw	r2,152(sp)
   13914:	d9403317 	ldw	r5,204(sp)
   13918:	d8c02017 	ldw	r3,128(sp)
   1391c:	da000404 	addi	r8,sp,16
   13920:	2885c83a 	sub	r2,r5,r2
   13924:	003dfb06 	br	13114 <__alt_data_end+0xfc013114>
   13928:	9080004c 	andi	r2,r18,1
   1392c:	103e8f1e 	bne	r2,zero,1336c <__alt_data_end+0xfc01336c>
   13930:	d8802117 	ldw	r2,132(sp)
   13934:	003e9e06 	br	133b0 <__alt_data_end+0xfc0133b0>
   13938:	1025883a 	mov	r18,r2
   1393c:	0039883a 	mov	fp,zero
   13940:	00800084 	movi	r2,2
   13944:	003fd306 	br	13894 <__alt_data_end+0xfc013894>
   13948:	07000b44 	movi	fp,45
   1394c:	df002785 	stb	fp,158(sp)
   13950:	003a1b06 	br	121c0 <__alt_data_end+0xfc0121c0>
   13954:	00c00b44 	movi	r3,45
   13958:	d8c02785 	stb	r3,158(sp)
   1395c:	d8802915 	stw	r2,164(sp)
   13960:	dc802c17 	ldw	r18,176(sp)
   13964:	d8002a15 	stw	zero,168(sp)
   13968:	07000b44 	movi	fp,45
   1396c:	003a5e06 	br	122e8 <__alt_data_end+0xfc0122e8>
   13970:	040000f4 	movhi	r16,3
   13974:	842b4b04 	addi	r16,r16,-21204
   13978:	003f4706 	br	13698 <__alt_data_end+0xfc013698>
   1397c:	d9002e17 	ldw	r4,184(sp)
   13980:	d9402f17 	ldw	r5,188(sp)
   13984:	20800017 	ldw	r2,0(r4)
   13988:	21000104 	addi	r4,r4,4
   1398c:	d9002e15 	stw	r4,184(sp)
   13990:	11400015 	stw	r5,0(r2)
   13994:	0038ab06 	br	11c44 <__alt_data_end+0xfc011c44>
   13998:	dd802617 	ldw	r22,152(sp)
   1399c:	00bfff44 	movi	r2,-3
   139a0:	b0801c16 	blt	r22,r2,13a14 <___vfprintf_internal_r+0x1eb0>
   139a4:	d9402a17 	ldw	r5,168(sp)
   139a8:	2d801a16 	blt	r5,r22,13a14 <___vfprintf_internal_r+0x1eb0>
   139ac:	dd803215 	stw	r22,200(sp)
   139b0:	003e8906 	br	133d8 <__alt_data_end+0xfc0133d8>
   139b4:	010000f4 	movhi	r4,3
   139b8:	212b6084 	addi	r4,r4,-21118
   139bc:	d9002c15 	stw	r4,176(sp)
   139c0:	003c9106 	br	12c08 <__alt_data_end+0xfc012c08>
   139c4:	e005883a 	mov	r2,fp
   139c8:	003e7906 	br	133b0 <__alt_data_end+0xfc0133b0>
   139cc:	d9002a17 	ldw	r4,168(sp)
   139d0:	df002783 	ldbu	fp,158(sp)
   139d4:	dcc02e15 	stw	r19,184(sp)
   139d8:	d9002915 	stw	r4,164(sp)
   139dc:	d9002b15 	stw	r4,172(sp)
   139e0:	d8002a15 	stw	zero,168(sp)
   139e4:	d8003215 	stw	zero,200(sp)
   139e8:	003a3b06 	br	122d8 <__alt_data_end+0xfc0122d8>
   139ec:	9080004c 	andi	r2,r18,1
   139f0:	0039883a 	mov	fp,zero
   139f4:	10000426 	beq	r2,zero,13a08 <___vfprintf_internal_r+0x1ea4>
   139f8:	00800c04 	movi	r2,48
   139fc:	dc001dc4 	addi	r16,sp,119
   13a00:	d8801dc5 	stb	r2,119(sp)
   13a04:	003b6406 	br	12798 <__alt_data_end+0xfc012798>
   13a08:	d8002b15 	stw	zero,172(sp)
   13a0c:	dc001e04 	addi	r16,sp,120
   13a10:	003a2b06 	br	122c0 <__alt_data_end+0xfc0122c0>
   13a14:	8c7fff84 	addi	r17,r17,-2
   13a18:	b5bfffc4 	addi	r22,r22,-1
   13a1c:	dd802615 	stw	r22,152(sp)
   13a20:	dc4022c5 	stb	r17,139(sp)
   13a24:	b000bf16 	blt	r22,zero,13d24 <___vfprintf_internal_r+0x21c0>
   13a28:	00800ac4 	movi	r2,43
   13a2c:	d8802305 	stb	r2,140(sp)
   13a30:	00800244 	movi	r2,9
   13a34:	15807016 	blt	r2,r22,13bf8 <___vfprintf_internal_r+0x2094>
   13a38:	00800c04 	movi	r2,48
   13a3c:	b5800c04 	addi	r22,r22,48
   13a40:	d8802345 	stb	r2,141(sp)
   13a44:	dd802385 	stb	r22,142(sp)
   13a48:	d88023c4 	addi	r2,sp,143
   13a4c:	df0022c4 	addi	fp,sp,139
   13a50:	d8c03317 	ldw	r3,204(sp)
   13a54:	1739c83a 	sub	fp,r2,fp
   13a58:	d9003317 	ldw	r4,204(sp)
   13a5c:	e0c7883a 	add	r3,fp,r3
   13a60:	df003a15 	stw	fp,232(sp)
   13a64:	d8c02b15 	stw	r3,172(sp)
   13a68:	00800044 	movi	r2,1
   13a6c:	1100b30e 	bge	r2,r4,13d3c <___vfprintf_internal_r+0x21d8>
   13a70:	d8c02b17 	ldw	r3,172(sp)
   13a74:	18c00044 	addi	r3,r3,1
   13a78:	d8c02b15 	stw	r3,172(sp)
   13a7c:	1805883a 	mov	r2,r3
   13a80:	1800ac16 	blt	r3,zero,13d34 <___vfprintf_internal_r+0x21d0>
   13a84:	d8003215 	stw	zero,200(sp)
   13a88:	003e5d06 	br	13400 <__alt_data_end+0xfc013400>
   13a8c:	d9002d17 	ldw	r4,180(sp)
   13a90:	d9801e04 	addi	r6,sp,120
   13a94:	b80b883a 	mov	r5,r23
   13a98:	0019e700 	call	19e70 <__sprint_r>
   13a9c:	1039351e 	bne	r2,zero,11f74 <__alt_data_end+0xfc011f74>
   13aa0:	dc402617 	ldw	r17,152(sp)
   13aa4:	d8c02017 	ldw	r3,128(sp)
   13aa8:	d8801f17 	ldw	r2,124(sp)
   13aac:	da000404 	addi	r8,sp,16
   13ab0:	003ed606 	br	1360c <__alt_data_end+0xfc01360c>
   13ab4:	182b883a 	mov	r21,r3
   13ab8:	d8002a15 	stw	zero,168(sp)
   13abc:	00388c06 	br	11cf0 <__alt_data_end+0xfc011cf0>
   13ac0:	d8802a17 	ldw	r2,168(sp)
   13ac4:	103e071e 	bne	r2,zero,132e4 <__alt_data_end+0xfc0132e4>
   13ac8:	dc002a15 	stw	r16,168(sp)
   13acc:	003e0506 	br	132e4 <__alt_data_end+0xfc0132e4>
   13ad0:	d9002a17 	ldw	r4,168(sp)
   13ad4:	20c00044 	addi	r3,r4,1
   13ad8:	003e0f06 	br	13318 <__alt_data_end+0xfc013318>
   13adc:	01400184 	movi	r5,6
   13ae0:	d9402a15 	stw	r5,168(sp)
   13ae4:	003dff06 	br	132e4 <__alt_data_end+0xfc0132e4>
   13ae8:	d8802104 	addi	r2,sp,132
   13aec:	d8800315 	stw	r2,12(sp)
   13af0:	d8802504 	addi	r2,sp,148
   13af4:	d8800215 	stw	r2,8(sp)
   13af8:	d8802604 	addi	r2,sp,152
   13afc:	d8800115 	stw	r2,4(sp)
   13b00:	d8802a17 	ldw	r2,168(sp)
   13b04:	d9403617 	ldw	r5,216(sp)
   13b08:	d9002d17 	ldw	r4,180(sp)
   13b0c:	d8800015 	stw	r2,0(sp)
   13b10:	01c000c4 	movi	r7,3
   13b14:	980d883a 	mov	r6,r19
   13b18:	da003d15 	stw	r8,244(sp)
   13b1c:	00142940 	call	14294 <_dtoa_r>
   13b20:	d8c02a17 	ldw	r3,168(sp)
   13b24:	da003d17 	ldw	r8,244(sp)
   13b28:	1021883a 	mov	r16,r2
   13b2c:	10f9883a 	add	fp,r2,r3
   13b30:	81000007 	ldb	r4,0(r16)
   13b34:	00800c04 	movi	r2,48
   13b38:	20805e26 	beq	r4,r2,13cb4 <___vfprintf_internal_r+0x2150>
   13b3c:	d8c02617 	ldw	r3,152(sp)
   13b40:	e0f9883a 	add	fp,fp,r3
   13b44:	003e0a06 	br	13370 <__alt_data_end+0xfc013370>
   13b48:	00c00b44 	movi	r3,45
   13b4c:	24e0003c 	xorhi	r19,r4,32768
   13b50:	d8c02905 	stb	r3,164(sp)
   13b54:	003de906 	br	132fc <__alt_data_end+0xfc0132fc>
   13b58:	d8c03217 	ldw	r3,200(sp)
   13b5c:	00c07a0e 	bge	zero,r3,13d48 <___vfprintf_internal_r+0x21e4>
   13b60:	00800044 	movi	r2,1
   13b64:	d9003317 	ldw	r4,204(sp)
   13b68:	1105883a 	add	r2,r2,r4
   13b6c:	d8802b15 	stw	r2,172(sp)
   13b70:	10004e16 	blt	r2,zero,13cac <___vfprintf_internal_r+0x2148>
   13b74:	044019c4 	movi	r17,103
   13b78:	003e2106 	br	13400 <__alt_data_end+0xfc013400>
   13b7c:	d9002a17 	ldw	r4,168(sp)
   13b80:	d8802104 	addi	r2,sp,132
   13b84:	d8800315 	stw	r2,12(sp)
   13b88:	d9000015 	stw	r4,0(sp)
   13b8c:	d8802504 	addi	r2,sp,148
   13b90:	d9403617 	ldw	r5,216(sp)
   13b94:	d9002d17 	ldw	r4,180(sp)
   13b98:	d8800215 	stw	r2,8(sp)
   13b9c:	d8802604 	addi	r2,sp,152
   13ba0:	d8800115 	stw	r2,4(sp)
   13ba4:	01c000c4 	movi	r7,3
   13ba8:	980d883a 	mov	r6,r19
   13bac:	da003d15 	stw	r8,244(sp)
   13bb0:	00142940 	call	14294 <_dtoa_r>
   13bb4:	d8c02a17 	ldw	r3,168(sp)
   13bb8:	da003d17 	ldw	r8,244(sp)
   13bbc:	1021883a 	mov	r16,r2
   13bc0:	00801184 	movi	r2,70
   13bc4:	80f9883a 	add	fp,r16,r3
   13bc8:	88bfd926 	beq	r17,r2,13b30 <__alt_data_end+0xfc013b30>
   13bcc:	003de806 	br	13370 <__alt_data_end+0xfc013370>
   13bd0:	d9002a17 	ldw	r4,168(sp)
   13bd4:	00c04d0e 	bge	zero,r3,13d0c <___vfprintf_internal_r+0x21a8>
   13bd8:	2000441e 	bne	r4,zero,13cec <___vfprintf_internal_r+0x2188>
   13bdc:	9480004c 	andi	r18,r18,1
   13be0:	9000421e 	bne	r18,zero,13cec <___vfprintf_internal_r+0x2188>
   13be4:	1805883a 	mov	r2,r3
   13be8:	18006f16 	blt	r3,zero,13da8 <___vfprintf_internal_r+0x2244>
   13bec:	d8c03217 	ldw	r3,200(sp)
   13bf0:	d8c02b15 	stw	r3,172(sp)
   13bf4:	003e0206 	br	13400 <__alt_data_end+0xfc013400>
   13bf8:	df0022c4 	addi	fp,sp,139
   13bfc:	dc002a15 	stw	r16,168(sp)
   13c00:	4027883a 	mov	r19,r8
   13c04:	e021883a 	mov	r16,fp
   13c08:	b009883a 	mov	r4,r22
   13c0c:	01400284 	movi	r5,10
   13c10:	000d05c0 	call	d05c <__modsi3>
   13c14:	10800c04 	addi	r2,r2,48
   13c18:	843fffc4 	addi	r16,r16,-1
   13c1c:	b009883a 	mov	r4,r22
   13c20:	01400284 	movi	r5,10
   13c24:	80800005 	stb	r2,0(r16)
   13c28:	000cfd80 	call	cfd8 <__divsi3>
   13c2c:	102d883a 	mov	r22,r2
   13c30:	00800244 	movi	r2,9
   13c34:	15bff416 	blt	r2,r22,13c08 <__alt_data_end+0xfc013c08>
   13c38:	9811883a 	mov	r8,r19
   13c3c:	b0800c04 	addi	r2,r22,48
   13c40:	8027883a 	mov	r19,r16
   13c44:	997fffc4 	addi	r5,r19,-1
   13c48:	98bfffc5 	stb	r2,-1(r19)
   13c4c:	dc002a17 	ldw	r16,168(sp)
   13c50:	2f006d2e 	bgeu	r5,fp,13e08 <___vfprintf_internal_r+0x22a4>
   13c54:	d9c02384 	addi	r7,sp,142
   13c58:	3ccfc83a 	sub	r7,r7,r19
   13c5c:	d9002344 	addi	r4,sp,141
   13c60:	e1cf883a 	add	r7,fp,r7
   13c64:	00000106 	br	13c6c <___vfprintf_internal_r+0x2108>
   13c68:	28800003 	ldbu	r2,0(r5)
   13c6c:	20800005 	stb	r2,0(r4)
   13c70:	21000044 	addi	r4,r4,1
   13c74:	29400044 	addi	r5,r5,1
   13c78:	393ffb1e 	bne	r7,r4,13c68 <__alt_data_end+0xfc013c68>
   13c7c:	d8802304 	addi	r2,sp,140
   13c80:	14c5c83a 	sub	r2,r2,r19
   13c84:	d8c02344 	addi	r3,sp,141
   13c88:	1885883a 	add	r2,r3,r2
   13c8c:	003f7006 	br	13a50 <__alt_data_end+0xfc013a50>
   13c90:	0005883a 	mov	r2,zero
   13c94:	003f0f06 	br	138d4 <__alt_data_end+0xfc0138d4>
   13c98:	d8c03217 	ldw	r3,200(sp)
   13c9c:	18c00044 	addi	r3,r3,1
   13ca0:	d8c02b15 	stw	r3,172(sp)
   13ca4:	1805883a 	mov	r2,r3
   13ca8:	183fb20e 	bge	r3,zero,13b74 <__alt_data_end+0xfc013b74>
   13cac:	0005883a 	mov	r2,zero
   13cb0:	003fb006 	br	13b74 <__alt_data_end+0xfc013b74>
   13cb4:	d9003617 	ldw	r4,216(sp)
   13cb8:	000d883a 	mov	r6,zero
   13cbc:	000f883a 	mov	r7,zero
   13cc0:	980b883a 	mov	r5,r19
   13cc4:	d8c03c15 	stw	r3,240(sp)
   13cc8:	da003d15 	stw	r8,244(sp)
   13ccc:	001dbf40 	call	1dbf4 <__eqdf2>
   13cd0:	d8c03c17 	ldw	r3,240(sp)
   13cd4:	da003d17 	ldw	r8,244(sp)
   13cd8:	103f9826 	beq	r2,zero,13b3c <__alt_data_end+0xfc013b3c>
   13cdc:	00800044 	movi	r2,1
   13ce0:	10c7c83a 	sub	r3,r2,r3
   13ce4:	d8c02615 	stw	r3,152(sp)
   13ce8:	003f9506 	br	13b40 <__alt_data_end+0xfc013b40>
   13cec:	d9002a17 	ldw	r4,168(sp)
   13cf0:	d8c03217 	ldw	r3,200(sp)
   13cf4:	20800044 	addi	r2,r4,1
   13cf8:	1885883a 	add	r2,r3,r2
   13cfc:	d8802b15 	stw	r2,172(sp)
   13d00:	103dbf0e 	bge	r2,zero,13400 <__alt_data_end+0xfc013400>
   13d04:	0005883a 	mov	r2,zero
   13d08:	003dbd06 	br	13400 <__alt_data_end+0xfc013400>
   13d0c:	2000201e 	bne	r4,zero,13d90 <___vfprintf_internal_r+0x222c>
   13d10:	9480004c 	andi	r18,r18,1
   13d14:	90001e1e 	bne	r18,zero,13d90 <___vfprintf_internal_r+0x222c>
   13d18:	00800044 	movi	r2,1
   13d1c:	d8802b15 	stw	r2,172(sp)
   13d20:	003db706 	br	13400 <__alt_data_end+0xfc013400>
   13d24:	00800b44 	movi	r2,45
   13d28:	05adc83a 	sub	r22,zero,r22
   13d2c:	d8802305 	stb	r2,140(sp)
   13d30:	003f3f06 	br	13a30 <__alt_data_end+0xfc013a30>
   13d34:	0005883a 	mov	r2,zero
   13d38:	003f5206 	br	13a84 <__alt_data_end+0xfc013a84>
   13d3c:	90a4703a 	and	r18,r18,r2
   13d40:	903f4e26 	beq	r18,zero,13a7c <__alt_data_end+0xfc013a7c>
   13d44:	003f4a06 	br	13a70 <__alt_data_end+0xfc013a70>
   13d48:	00800084 	movi	r2,2
   13d4c:	10c5c83a 	sub	r2,r2,r3
   13d50:	003f8406 	br	13b64 <__alt_data_end+0xfc013b64>
   13d54:	d9402e17 	ldw	r5,184(sp)
   13d58:	d9002e17 	ldw	r4,184(sp)
   13d5c:	ac400043 	ldbu	r17,1(r21)
   13d60:	29400017 	ldw	r5,0(r5)
   13d64:	20800104 	addi	r2,r4,4
   13d68:	d8802e15 	stw	r2,184(sp)
   13d6c:	d9402a15 	stw	r5,168(sp)
   13d70:	182b883a 	mov	r21,r3
   13d74:	283e7b0e 	bge	r5,zero,13764 <__alt_data_end+0xfc013764>
   13d78:	8c403fcc 	andi	r17,r17,255
   13d7c:	017fffc4 	movi	r5,-1
   13d80:	8c40201c 	xori	r17,r17,128
   13d84:	d9402a15 	stw	r5,168(sp)
   13d88:	8c7fe004 	addi	r17,r17,-128
   13d8c:	0037d706 	br	11cec <__alt_data_end+0xfc011cec>
   13d90:	d8c02a17 	ldw	r3,168(sp)
   13d94:	18c00084 	addi	r3,r3,2
   13d98:	d8c02b15 	stw	r3,172(sp)
   13d9c:	1805883a 	mov	r2,r3
   13da0:	183d970e 	bge	r3,zero,13400 <__alt_data_end+0xfc013400>
   13da4:	003fd706 	br	13d04 <__alt_data_end+0xfc013d04>
   13da8:	0005883a 	mov	r2,zero
   13dac:	003f8f06 	br	13bec <__alt_data_end+0xfc013bec>
   13db0:	9080004c 	andi	r2,r18,1
   13db4:	103f821e 	bne	r2,zero,13bc0 <__alt_data_end+0xfc013bc0>
   13db8:	d8802117 	ldw	r2,132(sp)
   13dbc:	1405c83a 	sub	r2,r2,r16
   13dc0:	d8803315 	stw	r2,204(sp)
   13dc4:	b47ef426 	beq	r22,r17,13998 <__alt_data_end+0xfc013998>
   13dc8:	dd802617 	ldw	r22,152(sp)
   13dcc:	003f1206 	br	13a18 <__alt_data_end+0xfc013a18>
   13dd0:	d8c02b03 	ldbu	r3,172(sp)
   13dd4:	d8c02785 	stb	r3,158(sp)
   13dd8:	0038df06 	br	12158 <__alt_data_end+0xfc012158>
   13ddc:	d8c02b03 	ldbu	r3,172(sp)
   13de0:	d8c02785 	stb	r3,158(sp)
   13de4:	0038aa06 	br	12090 <__alt_data_end+0xfc012090>
   13de8:	d8c02b03 	ldbu	r3,172(sp)
   13dec:	d8c02785 	stb	r3,158(sp)
   13df0:	003a4306 	br	12700 <__alt_data_end+0xfc012700>
   13df4:	d8c02b03 	ldbu	r3,172(sp)
   13df8:	d8c02785 	stb	r3,158(sp)
   13dfc:	003af506 	br	129d4 <__alt_data_end+0xfc0129d4>
   13e00:	0005883a 	mov	r2,zero
   13e04:	003d7b06 	br	133f4 <__alt_data_end+0xfc0133f4>
   13e08:	d8802344 	addi	r2,sp,141
   13e0c:	003f1006 	br	13a50 <__alt_data_end+0xfc013a50>
   13e10:	d8c02b03 	ldbu	r3,172(sp)
   13e14:	d8c02785 	stb	r3,158(sp)
   13e18:	0038fd06 	br	12210 <__alt_data_end+0xfc012210>
   13e1c:	d8c02b03 	ldbu	r3,172(sp)
   13e20:	d8c02785 	stb	r3,158(sp)
   13e24:	003a9706 	br	12884 <__alt_data_end+0xfc012884>
   13e28:	d8c02b03 	ldbu	r3,172(sp)
   13e2c:	d8c02785 	stb	r3,158(sp)
   13e30:	003a1806 	br	12694 <__alt_data_end+0xfc012694>
   13e34:	d8c02b03 	ldbu	r3,172(sp)
   13e38:	d8c02785 	stb	r3,158(sp)
   13e3c:	003abe06 	br	12938 <__alt_data_end+0xfc012938>

00013e40 <__vfprintf_internal>:
   13e40:	008000f4 	movhi	r2,3
   13e44:	10b84b04 	addi	r2,r2,-7892
   13e48:	300f883a 	mov	r7,r6
   13e4c:	280d883a 	mov	r6,r5
   13e50:	200b883a 	mov	r5,r4
   13e54:	11000017 	ldw	r4,0(r2)
   13e58:	0011b641 	jmpi	11b64 <___vfprintf_internal_r>

00013e5c <__sbprintf>:
   13e5c:	2880030b 	ldhu	r2,12(r5)
   13e60:	2ac01917 	ldw	r11,100(r5)
   13e64:	2a80038b 	ldhu	r10,14(r5)
   13e68:	2a400717 	ldw	r9,28(r5)
   13e6c:	2a000917 	ldw	r8,36(r5)
   13e70:	defee204 	addi	sp,sp,-1144
   13e74:	00c10004 	movi	r3,1024
   13e78:	dc011a15 	stw	r16,1128(sp)
   13e7c:	10bfff4c 	andi	r2,r2,65533
   13e80:	2821883a 	mov	r16,r5
   13e84:	d8cb883a 	add	r5,sp,r3
   13e88:	dc811c15 	stw	r18,1136(sp)
   13e8c:	dc411b15 	stw	r17,1132(sp)
   13e90:	dfc11d15 	stw	ra,1140(sp)
   13e94:	2025883a 	mov	r18,r4
   13e98:	d881030d 	sth	r2,1036(sp)
   13e9c:	dac11915 	stw	r11,1124(sp)
   13ea0:	da81038d 	sth	r10,1038(sp)
   13ea4:	da410715 	stw	r9,1052(sp)
   13ea8:	da010915 	stw	r8,1060(sp)
   13eac:	dec10015 	stw	sp,1024(sp)
   13eb0:	dec10415 	stw	sp,1040(sp)
   13eb4:	d8c10215 	stw	r3,1032(sp)
   13eb8:	d8c10515 	stw	r3,1044(sp)
   13ebc:	d8010615 	stw	zero,1048(sp)
   13ec0:	0011b640 	call	11b64 <___vfprintf_internal_r>
   13ec4:	1023883a 	mov	r17,r2
   13ec8:	10000416 	blt	r2,zero,13edc <__sbprintf+0x80>
   13ecc:	d9410004 	addi	r5,sp,1024
   13ed0:	9009883a 	mov	r4,r18
   13ed4:	0015b380 	call	15b38 <_fflush_r>
   13ed8:	10000d1e 	bne	r2,zero,13f10 <__sbprintf+0xb4>
   13edc:	d881030b 	ldhu	r2,1036(sp)
   13ee0:	1080100c 	andi	r2,r2,64
   13ee4:	10000326 	beq	r2,zero,13ef4 <__sbprintf+0x98>
   13ee8:	8080030b 	ldhu	r2,12(r16)
   13eec:	10801014 	ori	r2,r2,64
   13ef0:	8080030d 	sth	r2,12(r16)
   13ef4:	8805883a 	mov	r2,r17
   13ef8:	dfc11d17 	ldw	ra,1140(sp)
   13efc:	dc811c17 	ldw	r18,1136(sp)
   13f00:	dc411b17 	ldw	r17,1132(sp)
   13f04:	dc011a17 	ldw	r16,1128(sp)
   13f08:	dec11e04 	addi	sp,sp,1144
   13f0c:	f800283a 	ret
   13f10:	047fffc4 	movi	r17,-1
   13f14:	003ff106 	br	13edc <__alt_data_end+0xfc013edc>

00013f18 <__swsetup_r>:
   13f18:	008000f4 	movhi	r2,3
   13f1c:	defffd04 	addi	sp,sp,-12
   13f20:	10b84b04 	addi	r2,r2,-7892
   13f24:	dc400115 	stw	r17,4(sp)
   13f28:	2023883a 	mov	r17,r4
   13f2c:	11000017 	ldw	r4,0(r2)
   13f30:	dc000015 	stw	r16,0(sp)
   13f34:	dfc00215 	stw	ra,8(sp)
   13f38:	2821883a 	mov	r16,r5
   13f3c:	20000226 	beq	r4,zero,13f48 <__swsetup_r+0x30>
   13f40:	20800e17 	ldw	r2,56(r4)
   13f44:	10003126 	beq	r2,zero,1400c <__swsetup_r+0xf4>
   13f48:	8080030b 	ldhu	r2,12(r16)
   13f4c:	10c0020c 	andi	r3,r2,8
   13f50:	1009883a 	mov	r4,r2
   13f54:	18000f26 	beq	r3,zero,13f94 <__swsetup_r+0x7c>
   13f58:	80c00417 	ldw	r3,16(r16)
   13f5c:	18001526 	beq	r3,zero,13fb4 <__swsetup_r+0x9c>
   13f60:	1100004c 	andi	r4,r2,1
   13f64:	20001c1e 	bne	r4,zero,13fd8 <__swsetup_r+0xc0>
   13f68:	1080008c 	andi	r2,r2,2
   13f6c:	1000291e 	bne	r2,zero,14014 <__swsetup_r+0xfc>
   13f70:	80800517 	ldw	r2,20(r16)
   13f74:	80800215 	stw	r2,8(r16)
   13f78:	18001c26 	beq	r3,zero,13fec <__swsetup_r+0xd4>
   13f7c:	0005883a 	mov	r2,zero
   13f80:	dfc00217 	ldw	ra,8(sp)
   13f84:	dc400117 	ldw	r17,4(sp)
   13f88:	dc000017 	ldw	r16,0(sp)
   13f8c:	dec00304 	addi	sp,sp,12
   13f90:	f800283a 	ret
   13f94:	2080040c 	andi	r2,r4,16
   13f98:	10002e26 	beq	r2,zero,14054 <__swsetup_r+0x13c>
   13f9c:	2080010c 	andi	r2,r4,4
   13fa0:	10001e1e 	bne	r2,zero,1401c <__swsetup_r+0x104>
   13fa4:	80c00417 	ldw	r3,16(r16)
   13fa8:	20800214 	ori	r2,r4,8
   13fac:	8080030d 	sth	r2,12(r16)
   13fb0:	183feb1e 	bne	r3,zero,13f60 <__alt_data_end+0xfc013f60>
   13fb4:	1100a00c 	andi	r4,r2,640
   13fb8:	01408004 	movi	r5,512
   13fbc:	217fe826 	beq	r4,r5,13f60 <__alt_data_end+0xfc013f60>
   13fc0:	800b883a 	mov	r5,r16
   13fc4:	8809883a 	mov	r4,r17
   13fc8:	0016ad40 	call	16ad4 <__smakebuf_r>
   13fcc:	8080030b 	ldhu	r2,12(r16)
   13fd0:	80c00417 	ldw	r3,16(r16)
   13fd4:	003fe206 	br	13f60 <__alt_data_end+0xfc013f60>
   13fd8:	80800517 	ldw	r2,20(r16)
   13fdc:	80000215 	stw	zero,8(r16)
   13fe0:	0085c83a 	sub	r2,zero,r2
   13fe4:	80800615 	stw	r2,24(r16)
   13fe8:	183fe41e 	bne	r3,zero,13f7c <__alt_data_end+0xfc013f7c>
   13fec:	80c0030b 	ldhu	r3,12(r16)
   13ff0:	0005883a 	mov	r2,zero
   13ff4:	1900200c 	andi	r4,r3,128
   13ff8:	203fe126 	beq	r4,zero,13f80 <__alt_data_end+0xfc013f80>
   13ffc:	18c01014 	ori	r3,r3,64
   14000:	80c0030d 	sth	r3,12(r16)
   14004:	00bfffc4 	movi	r2,-1
   14008:	003fdd06 	br	13f80 <__alt_data_end+0xfc013f80>
   1400c:	0015f240 	call	15f24 <__sinit>
   14010:	003fcd06 	br	13f48 <__alt_data_end+0xfc013f48>
   14014:	0005883a 	mov	r2,zero
   14018:	003fd606 	br	13f74 <__alt_data_end+0xfc013f74>
   1401c:	81400c17 	ldw	r5,48(r16)
   14020:	28000626 	beq	r5,zero,1403c <__swsetup_r+0x124>
   14024:	80801004 	addi	r2,r16,64
   14028:	28800326 	beq	r5,r2,14038 <__swsetup_r+0x120>
   1402c:	8809883a 	mov	r4,r17
   14030:	00160980 	call	16098 <_free_r>
   14034:	8100030b 	ldhu	r4,12(r16)
   14038:	80000c15 	stw	zero,48(r16)
   1403c:	80c00417 	ldw	r3,16(r16)
   14040:	00bff6c4 	movi	r2,-37
   14044:	1108703a 	and	r4,r2,r4
   14048:	80000115 	stw	zero,4(r16)
   1404c:	80c00015 	stw	r3,0(r16)
   14050:	003fd506 	br	13fa8 <__alt_data_end+0xfc013fa8>
   14054:	00800244 	movi	r2,9
   14058:	88800015 	stw	r2,0(r17)
   1405c:	20801014 	ori	r2,r4,64
   14060:	8080030d 	sth	r2,12(r16)
   14064:	00bfffc4 	movi	r2,-1
   14068:	003fc506 	br	13f80 <__alt_data_end+0xfc013f80>

0001406c <quorem>:
   1406c:	defff204 	addi	sp,sp,-56
   14070:	ddc00b15 	stw	r23,44(sp)
   14074:	20800417 	ldw	r2,16(r4)
   14078:	2dc00417 	ldw	r23,16(r5)
   1407c:	dfc00d15 	stw	ra,52(sp)
   14080:	df000c15 	stw	fp,48(sp)
   14084:	dd800a15 	stw	r22,40(sp)
   14088:	dd400915 	stw	r21,36(sp)
   1408c:	dd000815 	stw	r20,32(sp)
   14090:	dcc00715 	stw	r19,28(sp)
   14094:	dc800615 	stw	r18,24(sp)
   14098:	dc400515 	stw	r17,20(sp)
   1409c:	dc000415 	stw	r16,16(sp)
   140a0:	15c07a16 	blt	r2,r23,1428c <quorem+0x220>
   140a4:	bdffffc4 	addi	r23,r23,-1
   140a8:	bde9883a 	add	r20,r23,r23
   140ac:	28c00504 	addi	r3,r5,20
   140b0:	a529883a 	add	r20,r20,r20
   140b4:	1d39883a 	add	fp,r3,r20
   140b8:	24c00504 	addi	r19,r4,20
   140bc:	d9400215 	stw	r5,8(sp)
   140c0:	9d29883a 	add	r20,r19,r20
   140c4:	e1400017 	ldw	r5,0(fp)
   140c8:	d9000015 	stw	r4,0(sp)
   140cc:	a1000017 	ldw	r4,0(r20)
   140d0:	29400044 	addi	r5,r5,1
   140d4:	d8c00115 	stw	r3,4(sp)
   140d8:	dd000315 	stw	r20,12(sp)
   140dc:	000d0d00 	call	d0d0 <__udivsi3>
   140e0:	1025883a 	mov	r18,r2
   140e4:	10003026 	beq	r2,zero,141a8 <quorem+0x13c>
   140e8:	dc400117 	ldw	r17,4(sp)
   140ec:	9829883a 	mov	r20,r19
   140f0:	002d883a 	mov	r22,zero
   140f4:	0021883a 	mov	r16,zero
   140f8:	8d400017 	ldw	r21,0(r17)
   140fc:	900b883a 	mov	r5,r18
   14100:	8c400104 	addi	r17,r17,4
   14104:	a93fffcc 	andi	r4,r21,65535
   14108:	000d18c0 	call	d18c <__mulsi3>
   1410c:	a808d43a 	srli	r4,r21,16
   14110:	900b883a 	mov	r5,r18
   14114:	15ad883a 	add	r22,r2,r22
   14118:	000d18c0 	call	d18c <__mulsi3>
   1411c:	a1000017 	ldw	r4,0(r20)
   14120:	b00cd43a 	srli	r6,r22,16
   14124:	b0ffffcc 	andi	r3,r22,65535
   14128:	217fffcc 	andi	r5,r4,65535
   1412c:	2c21883a 	add	r16,r5,r16
   14130:	80c7c83a 	sub	r3,r16,r3
   14134:	2008d43a 	srli	r4,r4,16
   14138:	1185883a 	add	r2,r2,r6
   1413c:	1821d43a 	srai	r16,r3,16
   14140:	117fffcc 	andi	r5,r2,65535
   14144:	2149c83a 	sub	r4,r4,r5
   14148:	2421883a 	add	r16,r4,r16
   1414c:	8008943a 	slli	r4,r16,16
   14150:	18ffffcc 	andi	r3,r3,65535
   14154:	102cd43a 	srli	r22,r2,16
   14158:	20c8b03a 	or	r4,r4,r3
   1415c:	a1000015 	stw	r4,0(r20)
   14160:	8021d43a 	srai	r16,r16,16
   14164:	a5000104 	addi	r20,r20,4
   14168:	e47fe32e 	bgeu	fp,r17,140f8 <__alt_data_end+0xfc0140f8>
   1416c:	d8c00317 	ldw	r3,12(sp)
   14170:	18800017 	ldw	r2,0(r3)
   14174:	10000c1e 	bne	r2,zero,141a8 <quorem+0x13c>
   14178:	18bfff04 	addi	r2,r3,-4
   1417c:	9880082e 	bgeu	r19,r2,141a0 <quorem+0x134>
   14180:	18ffff17 	ldw	r3,-4(r3)
   14184:	18000326 	beq	r3,zero,14194 <quorem+0x128>
   14188:	00000506 	br	141a0 <quorem+0x134>
   1418c:	10c00017 	ldw	r3,0(r2)
   14190:	1800031e 	bne	r3,zero,141a0 <quorem+0x134>
   14194:	10bfff04 	addi	r2,r2,-4
   14198:	bdffffc4 	addi	r23,r23,-1
   1419c:	98bffb36 	bltu	r19,r2,1418c <__alt_data_end+0xfc01418c>
   141a0:	d8c00017 	ldw	r3,0(sp)
   141a4:	1dc00415 	stw	r23,16(r3)
   141a8:	d9400217 	ldw	r5,8(sp)
   141ac:	d9000017 	ldw	r4,0(sp)
   141b0:	00178540 	call	17854 <__mcmp>
   141b4:	10002816 	blt	r2,zero,14258 <quorem+0x1ec>
   141b8:	dc400117 	ldw	r17,4(sp)
   141bc:	94800044 	addi	r18,r18,1
   141c0:	980d883a 	mov	r6,r19
   141c4:	0007883a 	mov	r3,zero
   141c8:	31000017 	ldw	r4,0(r6)
   141cc:	89400017 	ldw	r5,0(r17)
   141d0:	31800104 	addi	r6,r6,4
   141d4:	20bfffcc 	andi	r2,r4,65535
   141d8:	10c7883a 	add	r3,r2,r3
   141dc:	28bfffcc 	andi	r2,r5,65535
   141e0:	1885c83a 	sub	r2,r3,r2
   141e4:	280ad43a 	srli	r5,r5,16
   141e8:	2008d43a 	srli	r4,r4,16
   141ec:	1007d43a 	srai	r3,r2,16
   141f0:	10bfffcc 	andi	r2,r2,65535
   141f4:	2149c83a 	sub	r4,r4,r5
   141f8:	20c9883a 	add	r4,r4,r3
   141fc:	200a943a 	slli	r5,r4,16
   14200:	8c400104 	addi	r17,r17,4
   14204:	2007d43a 	srai	r3,r4,16
   14208:	2884b03a 	or	r2,r5,r2
   1420c:	30bfff15 	stw	r2,-4(r6)
   14210:	e47fed2e 	bgeu	fp,r17,141c8 <__alt_data_end+0xfc0141c8>
   14214:	bdc5883a 	add	r2,r23,r23
   14218:	1085883a 	add	r2,r2,r2
   1421c:	9887883a 	add	r3,r19,r2
   14220:	18800017 	ldw	r2,0(r3)
   14224:	10000c1e 	bne	r2,zero,14258 <quorem+0x1ec>
   14228:	18bfff04 	addi	r2,r3,-4
   1422c:	9880082e 	bgeu	r19,r2,14250 <quorem+0x1e4>
   14230:	18ffff17 	ldw	r3,-4(r3)
   14234:	18000326 	beq	r3,zero,14244 <quorem+0x1d8>
   14238:	00000506 	br	14250 <quorem+0x1e4>
   1423c:	10c00017 	ldw	r3,0(r2)
   14240:	1800031e 	bne	r3,zero,14250 <quorem+0x1e4>
   14244:	10bfff04 	addi	r2,r2,-4
   14248:	bdffffc4 	addi	r23,r23,-1
   1424c:	98bffb36 	bltu	r19,r2,1423c <__alt_data_end+0xfc01423c>
   14250:	d8c00017 	ldw	r3,0(sp)
   14254:	1dc00415 	stw	r23,16(r3)
   14258:	9005883a 	mov	r2,r18
   1425c:	dfc00d17 	ldw	ra,52(sp)
   14260:	df000c17 	ldw	fp,48(sp)
   14264:	ddc00b17 	ldw	r23,44(sp)
   14268:	dd800a17 	ldw	r22,40(sp)
   1426c:	dd400917 	ldw	r21,36(sp)
   14270:	dd000817 	ldw	r20,32(sp)
   14274:	dcc00717 	ldw	r19,28(sp)
   14278:	dc800617 	ldw	r18,24(sp)
   1427c:	dc400517 	ldw	r17,20(sp)
   14280:	dc000417 	ldw	r16,16(sp)
   14284:	dec00e04 	addi	sp,sp,56
   14288:	f800283a 	ret
   1428c:	0005883a 	mov	r2,zero
   14290:	003ff206 	br	1425c <__alt_data_end+0xfc01425c>

00014294 <_dtoa_r>:
   14294:	20801017 	ldw	r2,64(r4)
   14298:	deffde04 	addi	sp,sp,-136
   1429c:	df002015 	stw	fp,128(sp)
   142a0:	dcc01b15 	stw	r19,108(sp)
   142a4:	dc801a15 	stw	r18,104(sp)
   142a8:	dc401915 	stw	r17,100(sp)
   142ac:	dc001815 	stw	r16,96(sp)
   142b0:	dfc02115 	stw	ra,132(sp)
   142b4:	ddc01f15 	stw	r23,124(sp)
   142b8:	dd801e15 	stw	r22,120(sp)
   142bc:	dd401d15 	stw	r21,116(sp)
   142c0:	dd001c15 	stw	r20,112(sp)
   142c4:	d9c00315 	stw	r7,12(sp)
   142c8:	2039883a 	mov	fp,r4
   142cc:	3023883a 	mov	r17,r6
   142d0:	2825883a 	mov	r18,r5
   142d4:	dc002417 	ldw	r16,144(sp)
   142d8:	3027883a 	mov	r19,r6
   142dc:	10000826 	beq	r2,zero,14300 <_dtoa_r+0x6c>
   142e0:	21801117 	ldw	r6,68(r4)
   142e4:	00c00044 	movi	r3,1
   142e8:	100b883a 	mov	r5,r2
   142ec:	1986983a 	sll	r3,r3,r6
   142f0:	11800115 	stw	r6,4(r2)
   142f4:	10c00215 	stw	r3,8(r2)
   142f8:	0016f780 	call	16f78 <_Bfree>
   142fc:	e0001015 	stw	zero,64(fp)
   14300:	88002e16 	blt	r17,zero,143bc <_dtoa_r+0x128>
   14304:	80000015 	stw	zero,0(r16)
   14308:	889ffc2c 	andhi	r2,r17,32752
   1430c:	00dffc34 	movhi	r3,32752
   14310:	10c01c26 	beq	r2,r3,14384 <_dtoa_r+0xf0>
   14314:	000d883a 	mov	r6,zero
   14318:	000f883a 	mov	r7,zero
   1431c:	9009883a 	mov	r4,r18
   14320:	980b883a 	mov	r5,r19
   14324:	001dbf40 	call	1dbf4 <__eqdf2>
   14328:	10002b1e 	bne	r2,zero,143d8 <_dtoa_r+0x144>
   1432c:	d9c02317 	ldw	r7,140(sp)
   14330:	00800044 	movi	r2,1
   14334:	38800015 	stw	r2,0(r7)
   14338:	d8802517 	ldw	r2,148(sp)
   1433c:	10019e26 	beq	r2,zero,149b8 <_dtoa_r+0x724>
   14340:	d8c02517 	ldw	r3,148(sp)
   14344:	008000f4 	movhi	r2,3
   14348:	10ab5844 	addi	r2,r2,-21151
   1434c:	18800015 	stw	r2,0(r3)
   14350:	10bfffc4 	addi	r2,r2,-1
   14354:	dfc02117 	ldw	ra,132(sp)
   14358:	df002017 	ldw	fp,128(sp)
   1435c:	ddc01f17 	ldw	r23,124(sp)
   14360:	dd801e17 	ldw	r22,120(sp)
   14364:	dd401d17 	ldw	r21,116(sp)
   14368:	dd001c17 	ldw	r20,112(sp)
   1436c:	dcc01b17 	ldw	r19,108(sp)
   14370:	dc801a17 	ldw	r18,104(sp)
   14374:	dc401917 	ldw	r17,100(sp)
   14378:	dc001817 	ldw	r16,96(sp)
   1437c:	dec02204 	addi	sp,sp,136
   14380:	f800283a 	ret
   14384:	d8c02317 	ldw	r3,140(sp)
   14388:	0089c3c4 	movi	r2,9999
   1438c:	18800015 	stw	r2,0(r3)
   14390:	90017726 	beq	r18,zero,14970 <_dtoa_r+0x6dc>
   14394:	008000f4 	movhi	r2,3
   14398:	10ab6c04 	addi	r2,r2,-21072
   1439c:	d9002517 	ldw	r4,148(sp)
   143a0:	203fec26 	beq	r4,zero,14354 <__alt_data_end+0xfc014354>
   143a4:	10c000c7 	ldb	r3,3(r2)
   143a8:	1801781e 	bne	r3,zero,1498c <_dtoa_r+0x6f8>
   143ac:	10c000c4 	addi	r3,r2,3
   143b0:	d9802517 	ldw	r6,148(sp)
   143b4:	30c00015 	stw	r3,0(r6)
   143b8:	003fe606 	br	14354 <__alt_data_end+0xfc014354>
   143bc:	04e00034 	movhi	r19,32768
   143c0:	9cffffc4 	addi	r19,r19,-1
   143c4:	00800044 	movi	r2,1
   143c8:	8ce6703a 	and	r19,r17,r19
   143cc:	80800015 	stw	r2,0(r16)
   143d0:	9823883a 	mov	r17,r19
   143d4:	003fcc06 	br	14308 <__alt_data_end+0xfc014308>
   143d8:	d8800204 	addi	r2,sp,8
   143dc:	d8800015 	stw	r2,0(sp)
   143e0:	d9c00104 	addi	r7,sp,4
   143e4:	900b883a 	mov	r5,r18
   143e8:	980d883a 	mov	r6,r19
   143ec:	e009883a 	mov	r4,fp
   143f0:	8820d53a 	srli	r16,r17,20
   143f4:	0017c200 	call	17c20 <__d2b>
   143f8:	d8800915 	stw	r2,36(sp)
   143fc:	8001651e 	bne	r16,zero,14994 <_dtoa_r+0x700>
   14400:	dd800217 	ldw	r22,8(sp)
   14404:	dc000117 	ldw	r16,4(sp)
   14408:	00800804 	movi	r2,32
   1440c:	b421883a 	add	r16,r22,r16
   14410:	80c10c84 	addi	r3,r16,1074
   14414:	10c2d10e 	bge	r2,r3,14f5c <_dtoa_r+0xcc8>
   14418:	00801004 	movi	r2,64
   1441c:	81010484 	addi	r4,r16,1042
   14420:	10c7c83a 	sub	r3,r2,r3
   14424:	9108d83a 	srl	r4,r18,r4
   14428:	88e2983a 	sll	r17,r17,r3
   1442c:	2448b03a 	or	r4,r4,r17
   14430:	001f1100 	call	1f110 <__floatunsidf>
   14434:	017f8434 	movhi	r5,65040
   14438:	01800044 	movi	r6,1
   1443c:	1009883a 	mov	r4,r2
   14440:	194b883a 	add	r5,r3,r5
   14444:	843fffc4 	addi	r16,r16,-1
   14448:	d9801115 	stw	r6,68(sp)
   1444c:	000d883a 	mov	r6,zero
   14450:	01cffe34 	movhi	r7,16376
   14454:	001e6b80 	call	1e6b8 <__subdf3>
   14458:	0198dbf4 	movhi	r6,25455
   1445c:	01cff4f4 	movhi	r7,16339
   14460:	3190d844 	addi	r6,r6,17249
   14464:	39e1e9c4 	addi	r7,r7,-30809
   14468:	1009883a 	mov	r4,r2
   1446c:	180b883a 	mov	r5,r3
   14470:	001de4c0 	call	1de4c <__muldf3>
   14474:	01a2d874 	movhi	r6,35681
   14478:	01cff1f4 	movhi	r7,16327
   1447c:	31b22cc4 	addi	r6,r6,-14157
   14480:	39e28a04 	addi	r7,r7,-30168
   14484:	180b883a 	mov	r5,r3
   14488:	1009883a 	mov	r4,r2
   1448c:	001c9780 	call	1c978 <__adddf3>
   14490:	8009883a 	mov	r4,r16
   14494:	1029883a 	mov	r20,r2
   14498:	1823883a 	mov	r17,r3
   1449c:	001f0340 	call	1f034 <__floatsidf>
   144a0:	019427f4 	movhi	r6,20639
   144a4:	01cff4f4 	movhi	r7,16339
   144a8:	319e7ec4 	addi	r6,r6,31227
   144ac:	39d104c4 	addi	r7,r7,17427
   144b0:	1009883a 	mov	r4,r2
   144b4:	180b883a 	mov	r5,r3
   144b8:	001de4c0 	call	1de4c <__muldf3>
   144bc:	100d883a 	mov	r6,r2
   144c0:	180f883a 	mov	r7,r3
   144c4:	a009883a 	mov	r4,r20
   144c8:	880b883a 	mov	r5,r17
   144cc:	001c9780 	call	1c978 <__adddf3>
   144d0:	1009883a 	mov	r4,r2
   144d4:	180b883a 	mov	r5,r3
   144d8:	1029883a 	mov	r20,r2
   144dc:	1823883a 	mov	r17,r3
   144e0:	001efb40 	call	1efb4 <__fixdfsi>
   144e4:	000d883a 	mov	r6,zero
   144e8:	000f883a 	mov	r7,zero
   144ec:	a009883a 	mov	r4,r20
   144f0:	880b883a 	mov	r5,r17
   144f4:	d8800515 	stw	r2,20(sp)
   144f8:	001dd580 	call	1dd58 <__ledf2>
   144fc:	10028716 	blt	r2,zero,14f1c <_dtoa_r+0xc88>
   14500:	d8c00517 	ldw	r3,20(sp)
   14504:	00800584 	movi	r2,22
   14508:	10c27536 	bltu	r2,r3,14ee0 <_dtoa_r+0xc4c>
   1450c:	180490fa 	slli	r2,r3,3
   14510:	00c000f4 	movhi	r3,3
   14514:	18eb8704 	addi	r3,r3,-20964
   14518:	1885883a 	add	r2,r3,r2
   1451c:	11000017 	ldw	r4,0(r2)
   14520:	11400117 	ldw	r5,4(r2)
   14524:	900d883a 	mov	r6,r18
   14528:	980f883a 	mov	r7,r19
   1452c:	001dc7c0 	call	1dc7c <__gedf2>
   14530:	00828d0e 	bge	zero,r2,14f68 <_dtoa_r+0xcd4>
   14534:	d9000517 	ldw	r4,20(sp)
   14538:	d8000e15 	stw	zero,56(sp)
   1453c:	213fffc4 	addi	r4,r4,-1
   14540:	d9000515 	stw	r4,20(sp)
   14544:	b42dc83a 	sub	r22,r22,r16
   14548:	b5bfffc4 	addi	r22,r22,-1
   1454c:	b0026f16 	blt	r22,zero,14f0c <_dtoa_r+0xc78>
   14550:	d8000815 	stw	zero,32(sp)
   14554:	d9c00517 	ldw	r7,20(sp)
   14558:	38026416 	blt	r7,zero,14eec <_dtoa_r+0xc58>
   1455c:	b1ed883a 	add	r22,r22,r7
   14560:	d9c00d15 	stw	r7,52(sp)
   14564:	d8000a15 	stw	zero,40(sp)
   14568:	d9800317 	ldw	r6,12(sp)
   1456c:	00800244 	movi	r2,9
   14570:	11811436 	bltu	r2,r6,149c4 <_dtoa_r+0x730>
   14574:	00800144 	movi	r2,5
   14578:	1184e10e 	bge	r2,r6,15900 <_dtoa_r+0x166c>
   1457c:	31bfff04 	addi	r6,r6,-4
   14580:	d9800315 	stw	r6,12(sp)
   14584:	0023883a 	mov	r17,zero
   14588:	d9800317 	ldw	r6,12(sp)
   1458c:	008000c4 	movi	r2,3
   14590:	30836726 	beq	r6,r2,15330 <_dtoa_r+0x109c>
   14594:	1183410e 	bge	r2,r6,1529c <_dtoa_r+0x1008>
   14598:	d9c00317 	ldw	r7,12(sp)
   1459c:	00800104 	movi	r2,4
   145a0:	38827c26 	beq	r7,r2,14f94 <_dtoa_r+0xd00>
   145a4:	00800144 	movi	r2,5
   145a8:	3884c41e 	bne	r7,r2,158bc <_dtoa_r+0x1628>
   145ac:	00800044 	movi	r2,1
   145b0:	d8800b15 	stw	r2,44(sp)
   145b4:	d8c00517 	ldw	r3,20(sp)
   145b8:	d9002217 	ldw	r4,136(sp)
   145bc:	1907883a 	add	r3,r3,r4
   145c0:	19800044 	addi	r6,r3,1
   145c4:	d8c00c15 	stw	r3,48(sp)
   145c8:	d9800615 	stw	r6,24(sp)
   145cc:	0183a40e 	bge	zero,r6,15460 <_dtoa_r+0x11cc>
   145d0:	d9800617 	ldw	r6,24(sp)
   145d4:	3021883a 	mov	r16,r6
   145d8:	e0001115 	stw	zero,68(fp)
   145dc:	008005c4 	movi	r2,23
   145e0:	1184c92e 	bgeu	r2,r6,15908 <_dtoa_r+0x1674>
   145e4:	00c00044 	movi	r3,1
   145e8:	00800104 	movi	r2,4
   145ec:	1085883a 	add	r2,r2,r2
   145f0:	11000504 	addi	r4,r2,20
   145f4:	180b883a 	mov	r5,r3
   145f8:	18c00044 	addi	r3,r3,1
   145fc:	313ffb2e 	bgeu	r6,r4,145ec <__alt_data_end+0xfc0145ec>
   14600:	e1401115 	stw	r5,68(fp)
   14604:	e009883a 	mov	r4,fp
   14608:	0016ed00 	call	16ed0 <_Balloc>
   1460c:	d8800715 	stw	r2,28(sp)
   14610:	e0801015 	stw	r2,64(fp)
   14614:	00800384 	movi	r2,14
   14618:	1400f736 	bltu	r2,r16,149f8 <_dtoa_r+0x764>
   1461c:	8800f626 	beq	r17,zero,149f8 <_dtoa_r+0x764>
   14620:	d9c00517 	ldw	r7,20(sp)
   14624:	01c39a0e 	bge	zero,r7,15490 <_dtoa_r+0x11fc>
   14628:	388003cc 	andi	r2,r7,15
   1462c:	100490fa 	slli	r2,r2,3
   14630:	382bd13a 	srai	r21,r7,4
   14634:	00c000f4 	movhi	r3,3
   14638:	18eb8704 	addi	r3,r3,-20964
   1463c:	1885883a 	add	r2,r3,r2
   14640:	a8c0040c 	andi	r3,r21,16
   14644:	12400017 	ldw	r9,0(r2)
   14648:	12000117 	ldw	r8,4(r2)
   1464c:	18037926 	beq	r3,zero,15434 <_dtoa_r+0x11a0>
   14650:	008000f4 	movhi	r2,3
   14654:	10ab7d04 	addi	r2,r2,-21004
   14658:	11800817 	ldw	r6,32(r2)
   1465c:	11c00917 	ldw	r7,36(r2)
   14660:	9009883a 	mov	r4,r18
   14664:	980b883a 	mov	r5,r19
   14668:	da001715 	stw	r8,92(sp)
   1466c:	da401615 	stw	r9,88(sp)
   14670:	001d2240 	call	1d224 <__divdf3>
   14674:	da001717 	ldw	r8,92(sp)
   14678:	da401617 	ldw	r9,88(sp)
   1467c:	ad4003cc 	andi	r21,r21,15
   14680:	040000c4 	movi	r16,3
   14684:	1023883a 	mov	r17,r2
   14688:	1829883a 	mov	r20,r3
   1468c:	a8001126 	beq	r21,zero,146d4 <_dtoa_r+0x440>
   14690:	05c000f4 	movhi	r23,3
   14694:	bdeb7d04 	addi	r23,r23,-21004
   14698:	4805883a 	mov	r2,r9
   1469c:	4007883a 	mov	r3,r8
   146a0:	a980004c 	andi	r6,r21,1
   146a4:	1009883a 	mov	r4,r2
   146a8:	a82bd07a 	srai	r21,r21,1
   146ac:	180b883a 	mov	r5,r3
   146b0:	30000426 	beq	r6,zero,146c4 <_dtoa_r+0x430>
   146b4:	b9800017 	ldw	r6,0(r23)
   146b8:	b9c00117 	ldw	r7,4(r23)
   146bc:	84000044 	addi	r16,r16,1
   146c0:	001de4c0 	call	1de4c <__muldf3>
   146c4:	bdc00204 	addi	r23,r23,8
   146c8:	a83ff51e 	bne	r21,zero,146a0 <__alt_data_end+0xfc0146a0>
   146cc:	1013883a 	mov	r9,r2
   146d0:	1811883a 	mov	r8,r3
   146d4:	480d883a 	mov	r6,r9
   146d8:	400f883a 	mov	r7,r8
   146dc:	8809883a 	mov	r4,r17
   146e0:	a00b883a 	mov	r5,r20
   146e4:	001d2240 	call	1d224 <__divdf3>
   146e8:	d8800f15 	stw	r2,60(sp)
   146ec:	d8c01015 	stw	r3,64(sp)
   146f0:	d8c00e17 	ldw	r3,56(sp)
   146f4:	18000626 	beq	r3,zero,14710 <_dtoa_r+0x47c>
   146f8:	d9000f17 	ldw	r4,60(sp)
   146fc:	d9401017 	ldw	r5,64(sp)
   14700:	000d883a 	mov	r6,zero
   14704:	01cffc34 	movhi	r7,16368
   14708:	001dd580 	call	1dd58 <__ledf2>
   1470c:	10040b16 	blt	r2,zero,1573c <_dtoa_r+0x14a8>
   14710:	8009883a 	mov	r4,r16
   14714:	001f0340 	call	1f034 <__floatsidf>
   14718:	d9800f17 	ldw	r6,60(sp)
   1471c:	d9c01017 	ldw	r7,64(sp)
   14720:	1009883a 	mov	r4,r2
   14724:	180b883a 	mov	r5,r3
   14728:	001de4c0 	call	1de4c <__muldf3>
   1472c:	000d883a 	mov	r6,zero
   14730:	01d00734 	movhi	r7,16412
   14734:	1009883a 	mov	r4,r2
   14738:	180b883a 	mov	r5,r3
   1473c:	001c9780 	call	1c978 <__adddf3>
   14740:	1021883a 	mov	r16,r2
   14744:	d8800617 	ldw	r2,24(sp)
   14748:	047f3034 	movhi	r17,64704
   1474c:	1c63883a 	add	r17,r3,r17
   14750:	10031826 	beq	r2,zero,153b4 <_dtoa_r+0x1120>
   14754:	d8c00517 	ldw	r3,20(sp)
   14758:	db000617 	ldw	r12,24(sp)
   1475c:	d8c01315 	stw	r3,76(sp)
   14760:	d9000b17 	ldw	r4,44(sp)
   14764:	20038f26 	beq	r4,zero,155a4 <_dtoa_r+0x1310>
   14768:	60bfffc4 	addi	r2,r12,-1
   1476c:	100490fa 	slli	r2,r2,3
   14770:	00c000f4 	movhi	r3,3
   14774:	18eb8704 	addi	r3,r3,-20964
   14778:	1885883a 	add	r2,r3,r2
   1477c:	11800017 	ldw	r6,0(r2)
   14780:	11c00117 	ldw	r7,4(r2)
   14784:	d8800717 	ldw	r2,28(sp)
   14788:	0009883a 	mov	r4,zero
   1478c:	014ff834 	movhi	r5,16352
   14790:	db001615 	stw	r12,88(sp)
   14794:	15c00044 	addi	r23,r2,1
   14798:	001d2240 	call	1d224 <__divdf3>
   1479c:	800d883a 	mov	r6,r16
   147a0:	880f883a 	mov	r7,r17
   147a4:	1009883a 	mov	r4,r2
   147a8:	180b883a 	mov	r5,r3
   147ac:	001e6b80 	call	1e6b8 <__subdf3>
   147b0:	d9401017 	ldw	r5,64(sp)
   147b4:	d9000f17 	ldw	r4,60(sp)
   147b8:	102b883a 	mov	r21,r2
   147bc:	d8c01215 	stw	r3,72(sp)
   147c0:	001efb40 	call	1efb4 <__fixdfsi>
   147c4:	1009883a 	mov	r4,r2
   147c8:	1029883a 	mov	r20,r2
   147cc:	001f0340 	call	1f034 <__floatsidf>
   147d0:	d9000f17 	ldw	r4,60(sp)
   147d4:	d9401017 	ldw	r5,64(sp)
   147d8:	100d883a 	mov	r6,r2
   147dc:	180f883a 	mov	r7,r3
   147e0:	001e6b80 	call	1e6b8 <__subdf3>
   147e4:	1823883a 	mov	r17,r3
   147e8:	d8c00717 	ldw	r3,28(sp)
   147ec:	d9401217 	ldw	r5,72(sp)
   147f0:	a2000c04 	addi	r8,r20,48
   147f4:	1021883a 	mov	r16,r2
   147f8:	1a000005 	stb	r8,0(r3)
   147fc:	800d883a 	mov	r6,r16
   14800:	880f883a 	mov	r7,r17
   14804:	a809883a 	mov	r4,r21
   14808:	4029883a 	mov	r20,r8
   1480c:	001dc7c0 	call	1dc7c <__gedf2>
   14810:	00841d16 	blt	zero,r2,15888 <_dtoa_r+0x15f4>
   14814:	800d883a 	mov	r6,r16
   14818:	880f883a 	mov	r7,r17
   1481c:	0009883a 	mov	r4,zero
   14820:	014ffc34 	movhi	r5,16368
   14824:	001e6b80 	call	1e6b8 <__subdf3>
   14828:	d9401217 	ldw	r5,72(sp)
   1482c:	100d883a 	mov	r6,r2
   14830:	180f883a 	mov	r7,r3
   14834:	a809883a 	mov	r4,r21
   14838:	001dc7c0 	call	1dc7c <__gedf2>
   1483c:	db001617 	ldw	r12,88(sp)
   14840:	00840e16 	blt	zero,r2,1587c <_dtoa_r+0x15e8>
   14844:	00800044 	movi	r2,1
   14848:	13006b0e 	bge	r2,r12,149f8 <_dtoa_r+0x764>
   1484c:	d9000717 	ldw	r4,28(sp)
   14850:	dd800f15 	stw	r22,60(sp)
   14854:	dcc01015 	stw	r19,64(sp)
   14858:	2319883a 	add	r12,r4,r12
   1485c:	dcc01217 	ldw	r19,72(sp)
   14860:	602d883a 	mov	r22,r12
   14864:	dc801215 	stw	r18,72(sp)
   14868:	b825883a 	mov	r18,r23
   1486c:	00000906 	br	14894 <_dtoa_r+0x600>
   14870:	001e6b80 	call	1e6b8 <__subdf3>
   14874:	a80d883a 	mov	r6,r21
   14878:	980f883a 	mov	r7,r19
   1487c:	1009883a 	mov	r4,r2
   14880:	180b883a 	mov	r5,r3
   14884:	001dd580 	call	1dd58 <__ledf2>
   14888:	1003e816 	blt	r2,zero,1582c <_dtoa_r+0x1598>
   1488c:	b825883a 	mov	r18,r23
   14890:	bd83e926 	beq	r23,r22,15838 <_dtoa_r+0x15a4>
   14894:	a809883a 	mov	r4,r21
   14898:	980b883a 	mov	r5,r19
   1489c:	000d883a 	mov	r6,zero
   148a0:	01d00934 	movhi	r7,16420
   148a4:	001de4c0 	call	1de4c <__muldf3>
   148a8:	000d883a 	mov	r6,zero
   148ac:	01d00934 	movhi	r7,16420
   148b0:	8009883a 	mov	r4,r16
   148b4:	880b883a 	mov	r5,r17
   148b8:	102b883a 	mov	r21,r2
   148bc:	1827883a 	mov	r19,r3
   148c0:	001de4c0 	call	1de4c <__muldf3>
   148c4:	180b883a 	mov	r5,r3
   148c8:	1009883a 	mov	r4,r2
   148cc:	1821883a 	mov	r16,r3
   148d0:	1023883a 	mov	r17,r2
   148d4:	001efb40 	call	1efb4 <__fixdfsi>
   148d8:	1009883a 	mov	r4,r2
   148dc:	1029883a 	mov	r20,r2
   148e0:	001f0340 	call	1f034 <__floatsidf>
   148e4:	8809883a 	mov	r4,r17
   148e8:	800b883a 	mov	r5,r16
   148ec:	100d883a 	mov	r6,r2
   148f0:	180f883a 	mov	r7,r3
   148f4:	001e6b80 	call	1e6b8 <__subdf3>
   148f8:	a5000c04 	addi	r20,r20,48
   148fc:	a80d883a 	mov	r6,r21
   14900:	980f883a 	mov	r7,r19
   14904:	1009883a 	mov	r4,r2
   14908:	180b883a 	mov	r5,r3
   1490c:	95000005 	stb	r20,0(r18)
   14910:	1021883a 	mov	r16,r2
   14914:	1823883a 	mov	r17,r3
   14918:	001dd580 	call	1dd58 <__ledf2>
   1491c:	bdc00044 	addi	r23,r23,1
   14920:	800d883a 	mov	r6,r16
   14924:	880f883a 	mov	r7,r17
   14928:	0009883a 	mov	r4,zero
   1492c:	014ffc34 	movhi	r5,16368
   14930:	103fcf0e 	bge	r2,zero,14870 <__alt_data_end+0xfc014870>
   14934:	d8c01317 	ldw	r3,76(sp)
   14938:	d8c00515 	stw	r3,20(sp)
   1493c:	d9400917 	ldw	r5,36(sp)
   14940:	e009883a 	mov	r4,fp
   14944:	0016f780 	call	16f78 <_Bfree>
   14948:	d9000517 	ldw	r4,20(sp)
   1494c:	d9802317 	ldw	r6,140(sp)
   14950:	d9c02517 	ldw	r7,148(sp)
   14954:	b8000005 	stb	zero,0(r23)
   14958:	20800044 	addi	r2,r4,1
   1495c:	30800015 	stw	r2,0(r6)
   14960:	3802aa26 	beq	r7,zero,1540c <_dtoa_r+0x1178>
   14964:	3dc00015 	stw	r23,0(r7)
   14968:	d8800717 	ldw	r2,28(sp)
   1496c:	003e7906 	br	14354 <__alt_data_end+0xfc014354>
   14970:	00800434 	movhi	r2,16
   14974:	10bfffc4 	addi	r2,r2,-1
   14978:	88a2703a 	and	r17,r17,r2
   1497c:	883e851e 	bne	r17,zero,14394 <__alt_data_end+0xfc014394>
   14980:	008000f4 	movhi	r2,3
   14984:	10ab6904 	addi	r2,r2,-21084
   14988:	003e8406 	br	1439c <__alt_data_end+0xfc01439c>
   1498c:	10c00204 	addi	r3,r2,8
   14990:	003e8706 	br	143b0 <__alt_data_end+0xfc0143b0>
   14994:	01400434 	movhi	r5,16
   14998:	297fffc4 	addi	r5,r5,-1
   1499c:	994a703a 	and	r5,r19,r5
   149a0:	9009883a 	mov	r4,r18
   149a4:	843f0044 	addi	r16,r16,-1023
   149a8:	294ffc34 	orhi	r5,r5,16368
   149ac:	dd800217 	ldw	r22,8(sp)
   149b0:	d8001115 	stw	zero,68(sp)
   149b4:	003ea506 	br	1444c <__alt_data_end+0xfc01444c>
   149b8:	008000f4 	movhi	r2,3
   149bc:	10ab5804 	addi	r2,r2,-21152
   149c0:	003e6406 	br	14354 <__alt_data_end+0xfc014354>
   149c4:	e0001115 	stw	zero,68(fp)
   149c8:	000b883a 	mov	r5,zero
   149cc:	e009883a 	mov	r4,fp
   149d0:	0016ed00 	call	16ed0 <_Balloc>
   149d4:	01bfffc4 	movi	r6,-1
   149d8:	01c00044 	movi	r7,1
   149dc:	d8800715 	stw	r2,28(sp)
   149e0:	d9800c15 	stw	r6,48(sp)
   149e4:	e0801015 	stw	r2,64(fp)
   149e8:	d8000315 	stw	zero,12(sp)
   149ec:	d9c00b15 	stw	r7,44(sp)
   149f0:	d9800615 	stw	r6,24(sp)
   149f4:	d8002215 	stw	zero,136(sp)
   149f8:	d8800117 	ldw	r2,4(sp)
   149fc:	10008916 	blt	r2,zero,14c24 <_dtoa_r+0x990>
   14a00:	d9000517 	ldw	r4,20(sp)
   14a04:	00c00384 	movi	r3,14
   14a08:	19008616 	blt	r3,r4,14c24 <_dtoa_r+0x990>
   14a0c:	200490fa 	slli	r2,r4,3
   14a10:	00c000f4 	movhi	r3,3
   14a14:	d9802217 	ldw	r6,136(sp)
   14a18:	18eb8704 	addi	r3,r3,-20964
   14a1c:	1885883a 	add	r2,r3,r2
   14a20:	14000017 	ldw	r16,0(r2)
   14a24:	14400117 	ldw	r17,4(r2)
   14a28:	30016316 	blt	r6,zero,14fb8 <_dtoa_r+0xd24>
   14a2c:	800d883a 	mov	r6,r16
   14a30:	880f883a 	mov	r7,r17
   14a34:	9009883a 	mov	r4,r18
   14a38:	980b883a 	mov	r5,r19
   14a3c:	001d2240 	call	1d224 <__divdf3>
   14a40:	180b883a 	mov	r5,r3
   14a44:	1009883a 	mov	r4,r2
   14a48:	001efb40 	call	1efb4 <__fixdfsi>
   14a4c:	1009883a 	mov	r4,r2
   14a50:	102b883a 	mov	r21,r2
   14a54:	001f0340 	call	1f034 <__floatsidf>
   14a58:	800d883a 	mov	r6,r16
   14a5c:	880f883a 	mov	r7,r17
   14a60:	1009883a 	mov	r4,r2
   14a64:	180b883a 	mov	r5,r3
   14a68:	001de4c0 	call	1de4c <__muldf3>
   14a6c:	100d883a 	mov	r6,r2
   14a70:	180f883a 	mov	r7,r3
   14a74:	9009883a 	mov	r4,r18
   14a78:	980b883a 	mov	r5,r19
   14a7c:	001e6b80 	call	1e6b8 <__subdf3>
   14a80:	d9c00717 	ldw	r7,28(sp)
   14a84:	1009883a 	mov	r4,r2
   14a88:	a8800c04 	addi	r2,r21,48
   14a8c:	38800005 	stb	r2,0(r7)
   14a90:	3dc00044 	addi	r23,r7,1
   14a94:	d9c00617 	ldw	r7,24(sp)
   14a98:	01800044 	movi	r6,1
   14a9c:	180b883a 	mov	r5,r3
   14aa0:	2005883a 	mov	r2,r4
   14aa4:	39803826 	beq	r7,r6,14b88 <_dtoa_r+0x8f4>
   14aa8:	000d883a 	mov	r6,zero
   14aac:	01d00934 	movhi	r7,16420
   14ab0:	001de4c0 	call	1de4c <__muldf3>
   14ab4:	000d883a 	mov	r6,zero
   14ab8:	000f883a 	mov	r7,zero
   14abc:	1009883a 	mov	r4,r2
   14ac0:	180b883a 	mov	r5,r3
   14ac4:	1025883a 	mov	r18,r2
   14ac8:	1827883a 	mov	r19,r3
   14acc:	001dbf40 	call	1dbf4 <__eqdf2>
   14ad0:	103f9a26 	beq	r2,zero,1493c <__alt_data_end+0xfc01493c>
   14ad4:	d9c00617 	ldw	r7,24(sp)
   14ad8:	d8c00717 	ldw	r3,28(sp)
   14adc:	b829883a 	mov	r20,r23
   14ae0:	38bfffc4 	addi	r2,r7,-1
   14ae4:	18ad883a 	add	r22,r3,r2
   14ae8:	00000a06 	br	14b14 <_dtoa_r+0x880>
   14aec:	001de4c0 	call	1de4c <__muldf3>
   14af0:	000d883a 	mov	r6,zero
   14af4:	000f883a 	mov	r7,zero
   14af8:	1009883a 	mov	r4,r2
   14afc:	180b883a 	mov	r5,r3
   14b00:	1025883a 	mov	r18,r2
   14b04:	1827883a 	mov	r19,r3
   14b08:	b829883a 	mov	r20,r23
   14b0c:	001dbf40 	call	1dbf4 <__eqdf2>
   14b10:	103f8a26 	beq	r2,zero,1493c <__alt_data_end+0xfc01493c>
   14b14:	800d883a 	mov	r6,r16
   14b18:	880f883a 	mov	r7,r17
   14b1c:	9009883a 	mov	r4,r18
   14b20:	980b883a 	mov	r5,r19
   14b24:	001d2240 	call	1d224 <__divdf3>
   14b28:	180b883a 	mov	r5,r3
   14b2c:	1009883a 	mov	r4,r2
   14b30:	001efb40 	call	1efb4 <__fixdfsi>
   14b34:	1009883a 	mov	r4,r2
   14b38:	102b883a 	mov	r21,r2
   14b3c:	001f0340 	call	1f034 <__floatsidf>
   14b40:	800d883a 	mov	r6,r16
   14b44:	880f883a 	mov	r7,r17
   14b48:	1009883a 	mov	r4,r2
   14b4c:	180b883a 	mov	r5,r3
   14b50:	001de4c0 	call	1de4c <__muldf3>
   14b54:	100d883a 	mov	r6,r2
   14b58:	180f883a 	mov	r7,r3
   14b5c:	9009883a 	mov	r4,r18
   14b60:	980b883a 	mov	r5,r19
   14b64:	001e6b80 	call	1e6b8 <__subdf3>
   14b68:	aa000c04 	addi	r8,r21,48
   14b6c:	a2000005 	stb	r8,0(r20)
   14b70:	000d883a 	mov	r6,zero
   14b74:	01d00934 	movhi	r7,16420
   14b78:	1009883a 	mov	r4,r2
   14b7c:	180b883a 	mov	r5,r3
   14b80:	a5c00044 	addi	r23,r20,1
   14b84:	b53fd91e 	bne	r22,r20,14aec <__alt_data_end+0xfc014aec>
   14b88:	100d883a 	mov	r6,r2
   14b8c:	180f883a 	mov	r7,r3
   14b90:	1009883a 	mov	r4,r2
   14b94:	180b883a 	mov	r5,r3
   14b98:	001c9780 	call	1c978 <__adddf3>
   14b9c:	100d883a 	mov	r6,r2
   14ba0:	180f883a 	mov	r7,r3
   14ba4:	8009883a 	mov	r4,r16
   14ba8:	880b883a 	mov	r5,r17
   14bac:	1027883a 	mov	r19,r2
   14bb0:	1825883a 	mov	r18,r3
   14bb4:	001dd580 	call	1dd58 <__ledf2>
   14bb8:	10000816 	blt	r2,zero,14bdc <_dtoa_r+0x948>
   14bbc:	980d883a 	mov	r6,r19
   14bc0:	900f883a 	mov	r7,r18
   14bc4:	8009883a 	mov	r4,r16
   14bc8:	880b883a 	mov	r5,r17
   14bcc:	001dbf40 	call	1dbf4 <__eqdf2>
   14bd0:	103f5a1e 	bne	r2,zero,1493c <__alt_data_end+0xfc01493c>
   14bd4:	ad40004c 	andi	r21,r21,1
   14bd8:	a83f5826 	beq	r21,zero,1493c <__alt_data_end+0xfc01493c>
   14bdc:	bd3fffc3 	ldbu	r20,-1(r23)
   14be0:	b8bfffc4 	addi	r2,r23,-1
   14be4:	1007883a 	mov	r3,r2
   14be8:	01400e44 	movi	r5,57
   14bec:	d9800717 	ldw	r6,28(sp)
   14bf0:	00000506 	br	14c08 <_dtoa_r+0x974>
   14bf4:	18ffffc4 	addi	r3,r3,-1
   14bf8:	11824726 	beq	r2,r6,15518 <_dtoa_r+0x1284>
   14bfc:	1d000003 	ldbu	r20,0(r3)
   14c00:	102f883a 	mov	r23,r2
   14c04:	10bfffc4 	addi	r2,r2,-1
   14c08:	a1003fcc 	andi	r4,r20,255
   14c0c:	2100201c 	xori	r4,r4,128
   14c10:	213fe004 	addi	r4,r4,-128
   14c14:	217ff726 	beq	r4,r5,14bf4 <__alt_data_end+0xfc014bf4>
   14c18:	a2000044 	addi	r8,r20,1
   14c1c:	12000005 	stb	r8,0(r2)
   14c20:	003f4606 	br	1493c <__alt_data_end+0xfc01493c>
   14c24:	d9000b17 	ldw	r4,44(sp)
   14c28:	2000c826 	beq	r4,zero,14f4c <_dtoa_r+0xcb8>
   14c2c:	d9800317 	ldw	r6,12(sp)
   14c30:	00c00044 	movi	r3,1
   14c34:	1980f90e 	bge	r3,r6,1501c <_dtoa_r+0xd88>
   14c38:	d8800617 	ldw	r2,24(sp)
   14c3c:	d8c00a17 	ldw	r3,40(sp)
   14c40:	157fffc4 	addi	r21,r2,-1
   14c44:	1d41f316 	blt	r3,r21,15414 <_dtoa_r+0x1180>
   14c48:	1d6bc83a 	sub	r21,r3,r21
   14c4c:	d9c00617 	ldw	r7,24(sp)
   14c50:	3802aa16 	blt	r7,zero,156fc <_dtoa_r+0x1468>
   14c54:	dd000817 	ldw	r20,32(sp)
   14c58:	d8800617 	ldw	r2,24(sp)
   14c5c:	d8c00817 	ldw	r3,32(sp)
   14c60:	01400044 	movi	r5,1
   14c64:	e009883a 	mov	r4,fp
   14c68:	1887883a 	add	r3,r3,r2
   14c6c:	d8c00815 	stw	r3,32(sp)
   14c70:	b0ad883a 	add	r22,r22,r2
   14c74:	00173040 	call	17304 <__i2b>
   14c78:	1023883a 	mov	r17,r2
   14c7c:	a0000826 	beq	r20,zero,14ca0 <_dtoa_r+0xa0c>
   14c80:	0580070e 	bge	zero,r22,14ca0 <_dtoa_r+0xa0c>
   14c84:	a005883a 	mov	r2,r20
   14c88:	b500b916 	blt	r22,r20,14f70 <_dtoa_r+0xcdc>
   14c8c:	d9000817 	ldw	r4,32(sp)
   14c90:	a0a9c83a 	sub	r20,r20,r2
   14c94:	b0adc83a 	sub	r22,r22,r2
   14c98:	2089c83a 	sub	r4,r4,r2
   14c9c:	d9000815 	stw	r4,32(sp)
   14ca0:	d9800a17 	ldw	r6,40(sp)
   14ca4:	0181810e 	bge	zero,r6,152ac <_dtoa_r+0x1018>
   14ca8:	d9c00b17 	ldw	r7,44(sp)
   14cac:	3800b326 	beq	r7,zero,14f7c <_dtoa_r+0xce8>
   14cb0:	a800b226 	beq	r21,zero,14f7c <_dtoa_r+0xce8>
   14cb4:	880b883a 	mov	r5,r17
   14cb8:	a80d883a 	mov	r6,r21
   14cbc:	e009883a 	mov	r4,fp
   14cc0:	00175cc0 	call	175cc <__pow5mult>
   14cc4:	d9800917 	ldw	r6,36(sp)
   14cc8:	100b883a 	mov	r5,r2
   14ccc:	e009883a 	mov	r4,fp
   14cd0:	1023883a 	mov	r17,r2
   14cd4:	00173400 	call	17340 <__multiply>
   14cd8:	1021883a 	mov	r16,r2
   14cdc:	d8800a17 	ldw	r2,40(sp)
   14ce0:	d9400917 	ldw	r5,36(sp)
   14ce4:	e009883a 	mov	r4,fp
   14ce8:	1545c83a 	sub	r2,r2,r21
   14cec:	d8800a15 	stw	r2,40(sp)
   14cf0:	0016f780 	call	16f78 <_Bfree>
   14cf4:	d8c00a17 	ldw	r3,40(sp)
   14cf8:	18009f1e 	bne	r3,zero,14f78 <_dtoa_r+0xce4>
   14cfc:	05c00044 	movi	r23,1
   14d00:	e009883a 	mov	r4,fp
   14d04:	b80b883a 	mov	r5,r23
   14d08:	00173040 	call	17304 <__i2b>
   14d0c:	d9000d17 	ldw	r4,52(sp)
   14d10:	102b883a 	mov	r21,r2
   14d14:	2000ce26 	beq	r4,zero,15050 <_dtoa_r+0xdbc>
   14d18:	200d883a 	mov	r6,r4
   14d1c:	100b883a 	mov	r5,r2
   14d20:	e009883a 	mov	r4,fp
   14d24:	00175cc0 	call	175cc <__pow5mult>
   14d28:	d9800317 	ldw	r6,12(sp)
   14d2c:	102b883a 	mov	r21,r2
   14d30:	b981810e 	bge	r23,r6,15338 <_dtoa_r+0x10a4>
   14d34:	0027883a 	mov	r19,zero
   14d38:	a8800417 	ldw	r2,16(r21)
   14d3c:	05c00804 	movi	r23,32
   14d40:	10800104 	addi	r2,r2,4
   14d44:	1085883a 	add	r2,r2,r2
   14d48:	1085883a 	add	r2,r2,r2
   14d4c:	a885883a 	add	r2,r21,r2
   14d50:	11000017 	ldw	r4,0(r2)
   14d54:	00171ec0 	call	171ec <__hi0bits>
   14d58:	b885c83a 	sub	r2,r23,r2
   14d5c:	1585883a 	add	r2,r2,r22
   14d60:	108007cc 	andi	r2,r2,31
   14d64:	1000b326 	beq	r2,zero,15034 <_dtoa_r+0xda0>
   14d68:	00c00804 	movi	r3,32
   14d6c:	1887c83a 	sub	r3,r3,r2
   14d70:	01000104 	movi	r4,4
   14d74:	20c2cd0e 	bge	r4,r3,158ac <_dtoa_r+0x1618>
   14d78:	00c00704 	movi	r3,28
   14d7c:	1885c83a 	sub	r2,r3,r2
   14d80:	d8c00817 	ldw	r3,32(sp)
   14d84:	a0a9883a 	add	r20,r20,r2
   14d88:	b0ad883a 	add	r22,r22,r2
   14d8c:	1887883a 	add	r3,r3,r2
   14d90:	d8c00815 	stw	r3,32(sp)
   14d94:	d9800817 	ldw	r6,32(sp)
   14d98:	0180040e 	bge	zero,r6,14dac <_dtoa_r+0xb18>
   14d9c:	800b883a 	mov	r5,r16
   14da0:	e009883a 	mov	r4,fp
   14da4:	001770c0 	call	1770c <__lshift>
   14da8:	1021883a 	mov	r16,r2
   14dac:	0580050e 	bge	zero,r22,14dc4 <_dtoa_r+0xb30>
   14db0:	a80b883a 	mov	r5,r21
   14db4:	b00d883a 	mov	r6,r22
   14db8:	e009883a 	mov	r4,fp
   14dbc:	001770c0 	call	1770c <__lshift>
   14dc0:	102b883a 	mov	r21,r2
   14dc4:	d9c00e17 	ldw	r7,56(sp)
   14dc8:	3801211e 	bne	r7,zero,15250 <_dtoa_r+0xfbc>
   14dcc:	d9800617 	ldw	r6,24(sp)
   14dd0:	0181380e 	bge	zero,r6,152b4 <_dtoa_r+0x1020>
   14dd4:	d8c00b17 	ldw	r3,44(sp)
   14dd8:	1800ab1e 	bne	r3,zero,15088 <_dtoa_r+0xdf4>
   14ddc:	dc800717 	ldw	r18,28(sp)
   14de0:	dcc00617 	ldw	r19,24(sp)
   14de4:	9029883a 	mov	r20,r18
   14de8:	00000206 	br	14df4 <_dtoa_r+0xb60>
   14dec:	0016fa00 	call	16fa0 <__multadd>
   14df0:	1021883a 	mov	r16,r2
   14df4:	a80b883a 	mov	r5,r21
   14df8:	8009883a 	mov	r4,r16
   14dfc:	001406c0 	call	1406c <quorem>
   14e00:	10800c04 	addi	r2,r2,48
   14e04:	90800005 	stb	r2,0(r18)
   14e08:	94800044 	addi	r18,r18,1
   14e0c:	9507c83a 	sub	r3,r18,r20
   14e10:	000f883a 	mov	r7,zero
   14e14:	01800284 	movi	r6,10
   14e18:	800b883a 	mov	r5,r16
   14e1c:	e009883a 	mov	r4,fp
   14e20:	1cfff216 	blt	r3,r19,14dec <__alt_data_end+0xfc014dec>
   14e24:	1011883a 	mov	r8,r2
   14e28:	d8800617 	ldw	r2,24(sp)
   14e2c:	0082370e 	bge	zero,r2,1570c <_dtoa_r+0x1478>
   14e30:	d9000717 	ldw	r4,28(sp)
   14e34:	0025883a 	mov	r18,zero
   14e38:	20af883a 	add	r23,r4,r2
   14e3c:	01800044 	movi	r6,1
   14e40:	800b883a 	mov	r5,r16
   14e44:	e009883a 	mov	r4,fp
   14e48:	da001715 	stw	r8,92(sp)
   14e4c:	001770c0 	call	1770c <__lshift>
   14e50:	a80b883a 	mov	r5,r21
   14e54:	1009883a 	mov	r4,r2
   14e58:	d8800915 	stw	r2,36(sp)
   14e5c:	00178540 	call	17854 <__mcmp>
   14e60:	da001717 	ldw	r8,92(sp)
   14e64:	0081800e 	bge	zero,r2,15468 <_dtoa_r+0x11d4>
   14e68:	b93fffc3 	ldbu	r4,-1(r23)
   14e6c:	b8bfffc4 	addi	r2,r23,-1
   14e70:	1007883a 	mov	r3,r2
   14e74:	01800e44 	movi	r6,57
   14e78:	d9c00717 	ldw	r7,28(sp)
   14e7c:	00000506 	br	14e94 <_dtoa_r+0xc00>
   14e80:	18ffffc4 	addi	r3,r3,-1
   14e84:	11c12326 	beq	r2,r7,15314 <_dtoa_r+0x1080>
   14e88:	19000003 	ldbu	r4,0(r3)
   14e8c:	102f883a 	mov	r23,r2
   14e90:	10bfffc4 	addi	r2,r2,-1
   14e94:	21403fcc 	andi	r5,r4,255
   14e98:	2940201c 	xori	r5,r5,128
   14e9c:	297fe004 	addi	r5,r5,-128
   14ea0:	29bff726 	beq	r5,r6,14e80 <__alt_data_end+0xfc014e80>
   14ea4:	21000044 	addi	r4,r4,1
   14ea8:	11000005 	stb	r4,0(r2)
   14eac:	a80b883a 	mov	r5,r21
   14eb0:	e009883a 	mov	r4,fp
   14eb4:	0016f780 	call	16f78 <_Bfree>
   14eb8:	883ea026 	beq	r17,zero,1493c <__alt_data_end+0xfc01493c>
   14ebc:	90000426 	beq	r18,zero,14ed0 <_dtoa_r+0xc3c>
   14ec0:	94400326 	beq	r18,r17,14ed0 <_dtoa_r+0xc3c>
   14ec4:	900b883a 	mov	r5,r18
   14ec8:	e009883a 	mov	r4,fp
   14ecc:	0016f780 	call	16f78 <_Bfree>
   14ed0:	880b883a 	mov	r5,r17
   14ed4:	e009883a 	mov	r4,fp
   14ed8:	0016f780 	call	16f78 <_Bfree>
   14edc:	003e9706 	br	1493c <__alt_data_end+0xfc01493c>
   14ee0:	01800044 	movi	r6,1
   14ee4:	d9800e15 	stw	r6,56(sp)
   14ee8:	003d9606 	br	14544 <__alt_data_end+0xfc014544>
   14eec:	d8800817 	ldw	r2,32(sp)
   14ef0:	d8c00517 	ldw	r3,20(sp)
   14ef4:	d8000d15 	stw	zero,52(sp)
   14ef8:	10c5c83a 	sub	r2,r2,r3
   14efc:	00c9c83a 	sub	r4,zero,r3
   14f00:	d8800815 	stw	r2,32(sp)
   14f04:	d9000a15 	stw	r4,40(sp)
   14f08:	003d9706 	br	14568 <__alt_data_end+0xfc014568>
   14f0c:	05adc83a 	sub	r22,zero,r22
   14f10:	dd800815 	stw	r22,32(sp)
   14f14:	002d883a 	mov	r22,zero
   14f18:	003d8e06 	br	14554 <__alt_data_end+0xfc014554>
   14f1c:	d9000517 	ldw	r4,20(sp)
   14f20:	001f0340 	call	1f034 <__floatsidf>
   14f24:	100d883a 	mov	r6,r2
   14f28:	180f883a 	mov	r7,r3
   14f2c:	a009883a 	mov	r4,r20
   14f30:	880b883a 	mov	r5,r17
   14f34:	001dbf40 	call	1dbf4 <__eqdf2>
   14f38:	103d7126 	beq	r2,zero,14500 <__alt_data_end+0xfc014500>
   14f3c:	d9c00517 	ldw	r7,20(sp)
   14f40:	39ffffc4 	addi	r7,r7,-1
   14f44:	d9c00515 	stw	r7,20(sp)
   14f48:	003d6d06 	br	14500 <__alt_data_end+0xfc014500>
   14f4c:	dd400a17 	ldw	r21,40(sp)
   14f50:	dd000817 	ldw	r20,32(sp)
   14f54:	0023883a 	mov	r17,zero
   14f58:	003f4806 	br	14c7c <__alt_data_end+0xfc014c7c>
   14f5c:	10e3c83a 	sub	r17,r2,r3
   14f60:	9448983a 	sll	r4,r18,r17
   14f64:	003d3206 	br	14430 <__alt_data_end+0xfc014430>
   14f68:	d8000e15 	stw	zero,56(sp)
   14f6c:	003d7506 	br	14544 <__alt_data_end+0xfc014544>
   14f70:	b005883a 	mov	r2,r22
   14f74:	003f4506 	br	14c8c <__alt_data_end+0xfc014c8c>
   14f78:	dc000915 	stw	r16,36(sp)
   14f7c:	d9800a17 	ldw	r6,40(sp)
   14f80:	d9400917 	ldw	r5,36(sp)
   14f84:	e009883a 	mov	r4,fp
   14f88:	00175cc0 	call	175cc <__pow5mult>
   14f8c:	1021883a 	mov	r16,r2
   14f90:	003f5a06 	br	14cfc <__alt_data_end+0xfc014cfc>
   14f94:	01c00044 	movi	r7,1
   14f98:	d9c00b15 	stw	r7,44(sp)
   14f9c:	d8802217 	ldw	r2,136(sp)
   14fa0:	0081280e 	bge	zero,r2,15444 <_dtoa_r+0x11b0>
   14fa4:	100d883a 	mov	r6,r2
   14fa8:	1021883a 	mov	r16,r2
   14fac:	d8800c15 	stw	r2,48(sp)
   14fb0:	d8800615 	stw	r2,24(sp)
   14fb4:	003d8806 	br	145d8 <__alt_data_end+0xfc0145d8>
   14fb8:	d8800617 	ldw	r2,24(sp)
   14fbc:	00be9b16 	blt	zero,r2,14a2c <__alt_data_end+0xfc014a2c>
   14fc0:	10010f1e 	bne	r2,zero,15400 <_dtoa_r+0x116c>
   14fc4:	880b883a 	mov	r5,r17
   14fc8:	000d883a 	mov	r6,zero
   14fcc:	01d00534 	movhi	r7,16404
   14fd0:	8009883a 	mov	r4,r16
   14fd4:	001de4c0 	call	1de4c <__muldf3>
   14fd8:	900d883a 	mov	r6,r18
   14fdc:	980f883a 	mov	r7,r19
   14fe0:	1009883a 	mov	r4,r2
   14fe4:	180b883a 	mov	r5,r3
   14fe8:	001dc7c0 	call	1dc7c <__gedf2>
   14fec:	002b883a 	mov	r21,zero
   14ff0:	0023883a 	mov	r17,zero
   14ff4:	1000bf16 	blt	r2,zero,152f4 <_dtoa_r+0x1060>
   14ff8:	d9802217 	ldw	r6,136(sp)
   14ffc:	ddc00717 	ldw	r23,28(sp)
   15000:	018c303a 	nor	r6,zero,r6
   15004:	d9800515 	stw	r6,20(sp)
   15008:	a80b883a 	mov	r5,r21
   1500c:	e009883a 	mov	r4,fp
   15010:	0016f780 	call	16f78 <_Bfree>
   15014:	883e4926 	beq	r17,zero,1493c <__alt_data_end+0xfc01493c>
   15018:	003fad06 	br	14ed0 <__alt_data_end+0xfc014ed0>
   1501c:	d9c01117 	ldw	r7,68(sp)
   15020:	3801bc26 	beq	r7,zero,15714 <_dtoa_r+0x1480>
   15024:	10810cc4 	addi	r2,r2,1075
   15028:	dd400a17 	ldw	r21,40(sp)
   1502c:	dd000817 	ldw	r20,32(sp)
   15030:	003f0a06 	br	14c5c <__alt_data_end+0xfc014c5c>
   15034:	00800704 	movi	r2,28
   15038:	d9000817 	ldw	r4,32(sp)
   1503c:	a0a9883a 	add	r20,r20,r2
   15040:	b0ad883a 	add	r22,r22,r2
   15044:	2089883a 	add	r4,r4,r2
   15048:	d9000815 	stw	r4,32(sp)
   1504c:	003f5106 	br	14d94 <__alt_data_end+0xfc014d94>
   15050:	d8c00317 	ldw	r3,12(sp)
   15054:	b8c1fc0e 	bge	r23,r3,15848 <_dtoa_r+0x15b4>
   15058:	0027883a 	mov	r19,zero
   1505c:	b805883a 	mov	r2,r23
   15060:	003f3e06 	br	14d5c <__alt_data_end+0xfc014d5c>
   15064:	880b883a 	mov	r5,r17
   15068:	e009883a 	mov	r4,fp
   1506c:	000f883a 	mov	r7,zero
   15070:	01800284 	movi	r6,10
   15074:	0016fa00 	call	16fa0 <__multadd>
   15078:	d9000c17 	ldw	r4,48(sp)
   1507c:	1023883a 	mov	r17,r2
   15080:	0102040e 	bge	zero,r4,15894 <_dtoa_r+0x1600>
   15084:	d9000615 	stw	r4,24(sp)
   15088:	0500050e 	bge	zero,r20,150a0 <_dtoa_r+0xe0c>
   1508c:	880b883a 	mov	r5,r17
   15090:	a00d883a 	mov	r6,r20
   15094:	e009883a 	mov	r4,fp
   15098:	001770c0 	call	1770c <__lshift>
   1509c:	1023883a 	mov	r17,r2
   150a0:	9801241e 	bne	r19,zero,15534 <_dtoa_r+0x12a0>
   150a4:	8829883a 	mov	r20,r17
   150a8:	d9000617 	ldw	r4,24(sp)
   150ac:	dcc00717 	ldw	r19,28(sp)
   150b0:	9480004c 	andi	r18,r18,1
   150b4:	20bfffc4 	addi	r2,r4,-1
   150b8:	9885883a 	add	r2,r19,r2
   150bc:	d8800415 	stw	r2,16(sp)
   150c0:	dc800615 	stw	r18,24(sp)
   150c4:	a80b883a 	mov	r5,r21
   150c8:	8009883a 	mov	r4,r16
   150cc:	001406c0 	call	1406c <quorem>
   150d0:	880b883a 	mov	r5,r17
   150d4:	8009883a 	mov	r4,r16
   150d8:	102f883a 	mov	r23,r2
   150dc:	00178540 	call	17854 <__mcmp>
   150e0:	a80b883a 	mov	r5,r21
   150e4:	a00d883a 	mov	r6,r20
   150e8:	e009883a 	mov	r4,fp
   150ec:	102d883a 	mov	r22,r2
   150f0:	00178b40 	call	178b4 <__mdiff>
   150f4:	1007883a 	mov	r3,r2
   150f8:	10800317 	ldw	r2,12(r2)
   150fc:	bc800c04 	addi	r18,r23,48
   15100:	180b883a 	mov	r5,r3
   15104:	10004e1e 	bne	r2,zero,15240 <_dtoa_r+0xfac>
   15108:	8009883a 	mov	r4,r16
   1510c:	d8c01615 	stw	r3,88(sp)
   15110:	00178540 	call	17854 <__mcmp>
   15114:	d8c01617 	ldw	r3,88(sp)
   15118:	e009883a 	mov	r4,fp
   1511c:	d8801615 	stw	r2,88(sp)
   15120:	180b883a 	mov	r5,r3
   15124:	0016f780 	call	16f78 <_Bfree>
   15128:	d8801617 	ldw	r2,88(sp)
   1512c:	1000041e 	bne	r2,zero,15140 <_dtoa_r+0xeac>
   15130:	d9800317 	ldw	r6,12(sp)
   15134:	3000021e 	bne	r6,zero,15140 <_dtoa_r+0xeac>
   15138:	d8c00617 	ldw	r3,24(sp)
   1513c:	18003726 	beq	r3,zero,1521c <_dtoa_r+0xf88>
   15140:	b0002016 	blt	r22,zero,151c4 <_dtoa_r+0xf30>
   15144:	b000041e 	bne	r22,zero,15158 <_dtoa_r+0xec4>
   15148:	d9000317 	ldw	r4,12(sp)
   1514c:	2000021e 	bne	r4,zero,15158 <_dtoa_r+0xec4>
   15150:	d8c00617 	ldw	r3,24(sp)
   15154:	18001b26 	beq	r3,zero,151c4 <_dtoa_r+0xf30>
   15158:	00810716 	blt	zero,r2,15578 <_dtoa_r+0x12e4>
   1515c:	d8c00417 	ldw	r3,16(sp)
   15160:	9d800044 	addi	r22,r19,1
   15164:	9c800005 	stb	r18,0(r19)
   15168:	b02f883a 	mov	r23,r22
   1516c:	98c10626 	beq	r19,r3,15588 <_dtoa_r+0x12f4>
   15170:	800b883a 	mov	r5,r16
   15174:	000f883a 	mov	r7,zero
   15178:	01800284 	movi	r6,10
   1517c:	e009883a 	mov	r4,fp
   15180:	0016fa00 	call	16fa0 <__multadd>
   15184:	1021883a 	mov	r16,r2
   15188:	000f883a 	mov	r7,zero
   1518c:	01800284 	movi	r6,10
   15190:	880b883a 	mov	r5,r17
   15194:	e009883a 	mov	r4,fp
   15198:	8d002526 	beq	r17,r20,15230 <_dtoa_r+0xf9c>
   1519c:	0016fa00 	call	16fa0 <__multadd>
   151a0:	a00b883a 	mov	r5,r20
   151a4:	000f883a 	mov	r7,zero
   151a8:	01800284 	movi	r6,10
   151ac:	e009883a 	mov	r4,fp
   151b0:	1023883a 	mov	r17,r2
   151b4:	0016fa00 	call	16fa0 <__multadd>
   151b8:	1029883a 	mov	r20,r2
   151bc:	b027883a 	mov	r19,r22
   151c0:	003fc006 	br	150c4 <__alt_data_end+0xfc0150c4>
   151c4:	9011883a 	mov	r8,r18
   151c8:	00800e0e 	bge	zero,r2,15204 <_dtoa_r+0xf70>
   151cc:	800b883a 	mov	r5,r16
   151d0:	01800044 	movi	r6,1
   151d4:	e009883a 	mov	r4,fp
   151d8:	da001715 	stw	r8,92(sp)
   151dc:	001770c0 	call	1770c <__lshift>
   151e0:	a80b883a 	mov	r5,r21
   151e4:	1009883a 	mov	r4,r2
   151e8:	1021883a 	mov	r16,r2
   151ec:	00178540 	call	17854 <__mcmp>
   151f0:	da001717 	ldw	r8,92(sp)
   151f4:	0081960e 	bge	zero,r2,15850 <_dtoa_r+0x15bc>
   151f8:	00800e44 	movi	r2,57
   151fc:	40817026 	beq	r8,r2,157c0 <_dtoa_r+0x152c>
   15200:	ba000c44 	addi	r8,r23,49
   15204:	8825883a 	mov	r18,r17
   15208:	9dc00044 	addi	r23,r19,1
   1520c:	9a000005 	stb	r8,0(r19)
   15210:	a023883a 	mov	r17,r20
   15214:	dc000915 	stw	r16,36(sp)
   15218:	003f2406 	br	14eac <__alt_data_end+0xfc014eac>
   1521c:	00800e44 	movi	r2,57
   15220:	9011883a 	mov	r8,r18
   15224:	90816626 	beq	r18,r2,157c0 <_dtoa_r+0x152c>
   15228:	05bff516 	blt	zero,r22,15200 <__alt_data_end+0xfc015200>
   1522c:	003ff506 	br	15204 <__alt_data_end+0xfc015204>
   15230:	0016fa00 	call	16fa0 <__multadd>
   15234:	1023883a 	mov	r17,r2
   15238:	1029883a 	mov	r20,r2
   1523c:	003fdf06 	br	151bc <__alt_data_end+0xfc0151bc>
   15240:	e009883a 	mov	r4,fp
   15244:	0016f780 	call	16f78 <_Bfree>
   15248:	00800044 	movi	r2,1
   1524c:	003fbc06 	br	15140 <__alt_data_end+0xfc015140>
   15250:	a80b883a 	mov	r5,r21
   15254:	8009883a 	mov	r4,r16
   15258:	00178540 	call	17854 <__mcmp>
   1525c:	103edb0e 	bge	r2,zero,14dcc <__alt_data_end+0xfc014dcc>
   15260:	800b883a 	mov	r5,r16
   15264:	000f883a 	mov	r7,zero
   15268:	01800284 	movi	r6,10
   1526c:	e009883a 	mov	r4,fp
   15270:	0016fa00 	call	16fa0 <__multadd>
   15274:	1021883a 	mov	r16,r2
   15278:	d8800517 	ldw	r2,20(sp)
   1527c:	d8c00b17 	ldw	r3,44(sp)
   15280:	10bfffc4 	addi	r2,r2,-1
   15284:	d8800515 	stw	r2,20(sp)
   15288:	183f761e 	bne	r3,zero,15064 <__alt_data_end+0xfc015064>
   1528c:	d9000c17 	ldw	r4,48(sp)
   15290:	0101730e 	bge	zero,r4,15860 <_dtoa_r+0x15cc>
   15294:	d9000615 	stw	r4,24(sp)
   15298:	003ed006 	br	14ddc <__alt_data_end+0xfc014ddc>
   1529c:	00800084 	movi	r2,2
   152a0:	3081861e 	bne	r6,r2,158bc <_dtoa_r+0x1628>
   152a4:	d8000b15 	stw	zero,44(sp)
   152a8:	003f3c06 	br	14f9c <__alt_data_end+0xfc014f9c>
   152ac:	dc000917 	ldw	r16,36(sp)
   152b0:	003e9206 	br	14cfc <__alt_data_end+0xfc014cfc>
   152b4:	d9c00317 	ldw	r7,12(sp)
   152b8:	00800084 	movi	r2,2
   152bc:	11fec50e 	bge	r2,r7,14dd4 <__alt_data_end+0xfc014dd4>
   152c0:	d9000617 	ldw	r4,24(sp)
   152c4:	20013c1e 	bne	r4,zero,157b8 <_dtoa_r+0x1524>
   152c8:	a80b883a 	mov	r5,r21
   152cc:	000f883a 	mov	r7,zero
   152d0:	01800144 	movi	r6,5
   152d4:	e009883a 	mov	r4,fp
   152d8:	0016fa00 	call	16fa0 <__multadd>
   152dc:	100b883a 	mov	r5,r2
   152e0:	8009883a 	mov	r4,r16
   152e4:	102b883a 	mov	r21,r2
   152e8:	00178540 	call	17854 <__mcmp>
   152ec:	dc000915 	stw	r16,36(sp)
   152f0:	00bf410e 	bge	zero,r2,14ff8 <__alt_data_end+0xfc014ff8>
   152f4:	d9c00717 	ldw	r7,28(sp)
   152f8:	00800c44 	movi	r2,49
   152fc:	38800005 	stb	r2,0(r7)
   15300:	d8800517 	ldw	r2,20(sp)
   15304:	3dc00044 	addi	r23,r7,1
   15308:	10800044 	addi	r2,r2,1
   1530c:	d8800515 	stw	r2,20(sp)
   15310:	003f3d06 	br	15008 <__alt_data_end+0xfc015008>
   15314:	d9800517 	ldw	r6,20(sp)
   15318:	d9c00717 	ldw	r7,28(sp)
   1531c:	00800c44 	movi	r2,49
   15320:	31800044 	addi	r6,r6,1
   15324:	d9800515 	stw	r6,20(sp)
   15328:	38800005 	stb	r2,0(r7)
   1532c:	003edf06 	br	14eac <__alt_data_end+0xfc014eac>
   15330:	d8000b15 	stw	zero,44(sp)
   15334:	003c9f06 	br	145b4 <__alt_data_end+0xfc0145b4>
   15338:	903e7e1e 	bne	r18,zero,14d34 <__alt_data_end+0xfc014d34>
   1533c:	00800434 	movhi	r2,16
   15340:	10bfffc4 	addi	r2,r2,-1
   15344:	9884703a 	and	r2,r19,r2
   15348:	1000ea1e 	bne	r2,zero,156f4 <_dtoa_r+0x1460>
   1534c:	9cdffc2c 	andhi	r19,r19,32752
   15350:	9800e826 	beq	r19,zero,156f4 <_dtoa_r+0x1460>
   15354:	d9c00817 	ldw	r7,32(sp)
   15358:	b5800044 	addi	r22,r22,1
   1535c:	04c00044 	movi	r19,1
   15360:	39c00044 	addi	r7,r7,1
   15364:	d9c00815 	stw	r7,32(sp)
   15368:	d8800d17 	ldw	r2,52(sp)
   1536c:	103e721e 	bne	r2,zero,14d38 <__alt_data_end+0xfc014d38>
   15370:	00800044 	movi	r2,1
   15374:	003e7906 	br	14d5c <__alt_data_end+0xfc014d5c>
   15378:	8009883a 	mov	r4,r16
   1537c:	001f0340 	call	1f034 <__floatsidf>
   15380:	d9800f17 	ldw	r6,60(sp)
   15384:	d9c01017 	ldw	r7,64(sp)
   15388:	1009883a 	mov	r4,r2
   1538c:	180b883a 	mov	r5,r3
   15390:	001de4c0 	call	1de4c <__muldf3>
   15394:	000d883a 	mov	r6,zero
   15398:	01d00734 	movhi	r7,16412
   1539c:	1009883a 	mov	r4,r2
   153a0:	180b883a 	mov	r5,r3
   153a4:	001c9780 	call	1c978 <__adddf3>
   153a8:	047f3034 	movhi	r17,64704
   153ac:	1021883a 	mov	r16,r2
   153b0:	1c63883a 	add	r17,r3,r17
   153b4:	d9000f17 	ldw	r4,60(sp)
   153b8:	d9401017 	ldw	r5,64(sp)
   153bc:	000d883a 	mov	r6,zero
   153c0:	01d00534 	movhi	r7,16404
   153c4:	001e6b80 	call	1e6b8 <__subdf3>
   153c8:	800d883a 	mov	r6,r16
   153cc:	880f883a 	mov	r7,r17
   153d0:	1009883a 	mov	r4,r2
   153d4:	180b883a 	mov	r5,r3
   153d8:	102b883a 	mov	r21,r2
   153dc:	1829883a 	mov	r20,r3
   153e0:	001dc7c0 	call	1dc7c <__gedf2>
   153e4:	00806c16 	blt	zero,r2,15598 <_dtoa_r+0x1304>
   153e8:	89e0003c 	xorhi	r7,r17,32768
   153ec:	800d883a 	mov	r6,r16
   153f0:	a809883a 	mov	r4,r21
   153f4:	a00b883a 	mov	r5,r20
   153f8:	001dd580 	call	1dd58 <__ledf2>
   153fc:	103d7e0e 	bge	r2,zero,149f8 <__alt_data_end+0xfc0149f8>
   15400:	002b883a 	mov	r21,zero
   15404:	0023883a 	mov	r17,zero
   15408:	003efb06 	br	14ff8 <__alt_data_end+0xfc014ff8>
   1540c:	d8800717 	ldw	r2,28(sp)
   15410:	003bd006 	br	14354 <__alt_data_end+0xfc014354>
   15414:	d9000a17 	ldw	r4,40(sp)
   15418:	d9800d17 	ldw	r6,52(sp)
   1541c:	dd400a15 	stw	r21,40(sp)
   15420:	a905c83a 	sub	r2,r21,r4
   15424:	308d883a 	add	r6,r6,r2
   15428:	d9800d15 	stw	r6,52(sp)
   1542c:	002b883a 	mov	r21,zero
   15430:	003e0606 	br	14c4c <__alt_data_end+0xfc014c4c>
   15434:	9023883a 	mov	r17,r18
   15438:	9829883a 	mov	r20,r19
   1543c:	04000084 	movi	r16,2
   15440:	003c9206 	br	1468c <__alt_data_end+0xfc01468c>
   15444:	04000044 	movi	r16,1
   15448:	dc000c15 	stw	r16,48(sp)
   1544c:	dc000615 	stw	r16,24(sp)
   15450:	dc002215 	stw	r16,136(sp)
   15454:	e0001115 	stw	zero,68(fp)
   15458:	000b883a 	mov	r5,zero
   1545c:	003c6906 	br	14604 <__alt_data_end+0xfc014604>
   15460:	3021883a 	mov	r16,r6
   15464:	003ffb06 	br	15454 <__alt_data_end+0xfc015454>
   15468:	1000021e 	bne	r2,zero,15474 <_dtoa_r+0x11e0>
   1546c:	4200004c 	andi	r8,r8,1
   15470:	403e7d1e 	bne	r8,zero,14e68 <__alt_data_end+0xfc014e68>
   15474:	01000c04 	movi	r4,48
   15478:	00000106 	br	15480 <_dtoa_r+0x11ec>
   1547c:	102f883a 	mov	r23,r2
   15480:	b8bfffc4 	addi	r2,r23,-1
   15484:	10c00007 	ldb	r3,0(r2)
   15488:	193ffc26 	beq	r3,r4,1547c <__alt_data_end+0xfc01547c>
   1548c:	003e8706 	br	14eac <__alt_data_end+0xfc014eac>
   15490:	d8800517 	ldw	r2,20(sp)
   15494:	00a3c83a 	sub	r17,zero,r2
   15498:	8800a426 	beq	r17,zero,1572c <_dtoa_r+0x1498>
   1549c:	888003cc 	andi	r2,r17,15
   154a0:	100490fa 	slli	r2,r2,3
   154a4:	00c000f4 	movhi	r3,3
   154a8:	18eb8704 	addi	r3,r3,-20964
   154ac:	1885883a 	add	r2,r3,r2
   154b0:	11800017 	ldw	r6,0(r2)
   154b4:	11c00117 	ldw	r7,4(r2)
   154b8:	9009883a 	mov	r4,r18
   154bc:	980b883a 	mov	r5,r19
   154c0:	8823d13a 	srai	r17,r17,4
   154c4:	001de4c0 	call	1de4c <__muldf3>
   154c8:	d8800f15 	stw	r2,60(sp)
   154cc:	d8c01015 	stw	r3,64(sp)
   154d0:	8800e826 	beq	r17,zero,15874 <_dtoa_r+0x15e0>
   154d4:	050000f4 	movhi	r20,3
   154d8:	a52b7d04 	addi	r20,r20,-21004
   154dc:	04000084 	movi	r16,2
   154e0:	8980004c 	andi	r6,r17,1
   154e4:	1009883a 	mov	r4,r2
   154e8:	8823d07a 	srai	r17,r17,1
   154ec:	180b883a 	mov	r5,r3
   154f0:	30000426 	beq	r6,zero,15504 <_dtoa_r+0x1270>
   154f4:	a1800017 	ldw	r6,0(r20)
   154f8:	a1c00117 	ldw	r7,4(r20)
   154fc:	84000044 	addi	r16,r16,1
   15500:	001de4c0 	call	1de4c <__muldf3>
   15504:	a5000204 	addi	r20,r20,8
   15508:	883ff51e 	bne	r17,zero,154e0 <__alt_data_end+0xfc0154e0>
   1550c:	d8800f15 	stw	r2,60(sp)
   15510:	d8c01015 	stw	r3,64(sp)
   15514:	003c7606 	br	146f0 <__alt_data_end+0xfc0146f0>
   15518:	00c00c04 	movi	r3,48
   1551c:	10c00005 	stb	r3,0(r2)
   15520:	d8c00517 	ldw	r3,20(sp)
   15524:	bd3fffc3 	ldbu	r20,-1(r23)
   15528:	18c00044 	addi	r3,r3,1
   1552c:	d8c00515 	stw	r3,20(sp)
   15530:	003db906 	br	14c18 <__alt_data_end+0xfc014c18>
   15534:	89400117 	ldw	r5,4(r17)
   15538:	e009883a 	mov	r4,fp
   1553c:	0016ed00 	call	16ed0 <_Balloc>
   15540:	89800417 	ldw	r6,16(r17)
   15544:	89400304 	addi	r5,r17,12
   15548:	11000304 	addi	r4,r2,12
   1554c:	31800084 	addi	r6,r6,2
   15550:	318d883a 	add	r6,r6,r6
   15554:	318d883a 	add	r6,r6,r6
   15558:	1027883a 	mov	r19,r2
   1555c:	000ef400 	call	ef40 <memcpy>
   15560:	01800044 	movi	r6,1
   15564:	980b883a 	mov	r5,r19
   15568:	e009883a 	mov	r4,fp
   1556c:	001770c0 	call	1770c <__lshift>
   15570:	1029883a 	mov	r20,r2
   15574:	003ecc06 	br	150a8 <__alt_data_end+0xfc0150a8>
   15578:	00800e44 	movi	r2,57
   1557c:	90809026 	beq	r18,r2,157c0 <_dtoa_r+0x152c>
   15580:	92000044 	addi	r8,r18,1
   15584:	003f1f06 	br	15204 <__alt_data_end+0xfc015204>
   15588:	9011883a 	mov	r8,r18
   1558c:	8825883a 	mov	r18,r17
   15590:	a023883a 	mov	r17,r20
   15594:	003e2906 	br	14e3c <__alt_data_end+0xfc014e3c>
   15598:	002b883a 	mov	r21,zero
   1559c:	0023883a 	mov	r17,zero
   155a0:	003f5406 	br	152f4 <__alt_data_end+0xfc0152f4>
   155a4:	61bfffc4 	addi	r6,r12,-1
   155a8:	300490fa 	slli	r2,r6,3
   155ac:	00c000f4 	movhi	r3,3
   155b0:	18eb8704 	addi	r3,r3,-20964
   155b4:	1885883a 	add	r2,r3,r2
   155b8:	11000017 	ldw	r4,0(r2)
   155bc:	11400117 	ldw	r5,4(r2)
   155c0:	d8800717 	ldw	r2,28(sp)
   155c4:	880f883a 	mov	r7,r17
   155c8:	d9801215 	stw	r6,72(sp)
   155cc:	800d883a 	mov	r6,r16
   155d0:	db001615 	stw	r12,88(sp)
   155d4:	15c00044 	addi	r23,r2,1
   155d8:	001de4c0 	call	1de4c <__muldf3>
   155dc:	d9401017 	ldw	r5,64(sp)
   155e0:	d9000f17 	ldw	r4,60(sp)
   155e4:	d8c01515 	stw	r3,84(sp)
   155e8:	d8801415 	stw	r2,80(sp)
   155ec:	001efb40 	call	1efb4 <__fixdfsi>
   155f0:	1009883a 	mov	r4,r2
   155f4:	1021883a 	mov	r16,r2
   155f8:	001f0340 	call	1f034 <__floatsidf>
   155fc:	d9000f17 	ldw	r4,60(sp)
   15600:	d9401017 	ldw	r5,64(sp)
   15604:	100d883a 	mov	r6,r2
   15608:	180f883a 	mov	r7,r3
   1560c:	001e6b80 	call	1e6b8 <__subdf3>
   15610:	1829883a 	mov	r20,r3
   15614:	d8c00717 	ldw	r3,28(sp)
   15618:	84000c04 	addi	r16,r16,48
   1561c:	1023883a 	mov	r17,r2
   15620:	1c000005 	stb	r16,0(r3)
   15624:	db001617 	ldw	r12,88(sp)
   15628:	00800044 	movi	r2,1
   1562c:	60802226 	beq	r12,r2,156b8 <_dtoa_r+0x1424>
   15630:	d9c00717 	ldw	r7,28(sp)
   15634:	8805883a 	mov	r2,r17
   15638:	b82b883a 	mov	r21,r23
   1563c:	3b19883a 	add	r12,r7,r12
   15640:	6023883a 	mov	r17,r12
   15644:	a007883a 	mov	r3,r20
   15648:	dc800f15 	stw	r18,60(sp)
   1564c:	000d883a 	mov	r6,zero
   15650:	01d00934 	movhi	r7,16420
   15654:	1009883a 	mov	r4,r2
   15658:	180b883a 	mov	r5,r3
   1565c:	001de4c0 	call	1de4c <__muldf3>
   15660:	180b883a 	mov	r5,r3
   15664:	1009883a 	mov	r4,r2
   15668:	1829883a 	mov	r20,r3
   1566c:	1025883a 	mov	r18,r2
   15670:	001efb40 	call	1efb4 <__fixdfsi>
   15674:	1009883a 	mov	r4,r2
   15678:	1021883a 	mov	r16,r2
   1567c:	001f0340 	call	1f034 <__floatsidf>
   15680:	100d883a 	mov	r6,r2
   15684:	180f883a 	mov	r7,r3
   15688:	9009883a 	mov	r4,r18
   1568c:	a00b883a 	mov	r5,r20
   15690:	84000c04 	addi	r16,r16,48
   15694:	001e6b80 	call	1e6b8 <__subdf3>
   15698:	ad400044 	addi	r21,r21,1
   1569c:	ac3fffc5 	stb	r16,-1(r21)
   156a0:	ac7fea1e 	bne	r21,r17,1564c <__alt_data_end+0xfc01564c>
   156a4:	1023883a 	mov	r17,r2
   156a8:	d8801217 	ldw	r2,72(sp)
   156ac:	dc800f17 	ldw	r18,60(sp)
   156b0:	1829883a 	mov	r20,r3
   156b4:	b8af883a 	add	r23,r23,r2
   156b8:	d9001417 	ldw	r4,80(sp)
   156bc:	d9401517 	ldw	r5,84(sp)
   156c0:	000d883a 	mov	r6,zero
   156c4:	01cff834 	movhi	r7,16352
   156c8:	001c9780 	call	1c978 <__adddf3>
   156cc:	880d883a 	mov	r6,r17
   156d0:	a00f883a 	mov	r7,r20
   156d4:	1009883a 	mov	r4,r2
   156d8:	180b883a 	mov	r5,r3
   156dc:	001dd580 	call	1dd58 <__ledf2>
   156e0:	10003e0e 	bge	r2,zero,157dc <_dtoa_r+0x1548>
   156e4:	d9001317 	ldw	r4,76(sp)
   156e8:	bd3fffc3 	ldbu	r20,-1(r23)
   156ec:	d9000515 	stw	r4,20(sp)
   156f0:	003d3b06 	br	14be0 <__alt_data_end+0xfc014be0>
   156f4:	0027883a 	mov	r19,zero
   156f8:	003f1b06 	br	15368 <__alt_data_end+0xfc015368>
   156fc:	d8800817 	ldw	r2,32(sp)
   15700:	11e9c83a 	sub	r20,r2,r7
   15704:	0005883a 	mov	r2,zero
   15708:	003d5406 	br	14c5c <__alt_data_end+0xfc014c5c>
   1570c:	00800044 	movi	r2,1
   15710:	003dc706 	br	14e30 <__alt_data_end+0xfc014e30>
   15714:	d8c00217 	ldw	r3,8(sp)
   15718:	00800d84 	movi	r2,54
   1571c:	dd400a17 	ldw	r21,40(sp)
   15720:	10c5c83a 	sub	r2,r2,r3
   15724:	dd000817 	ldw	r20,32(sp)
   15728:	003d4c06 	br	14c5c <__alt_data_end+0xfc014c5c>
   1572c:	dc800f15 	stw	r18,60(sp)
   15730:	dcc01015 	stw	r19,64(sp)
   15734:	04000084 	movi	r16,2
   15738:	003bed06 	br	146f0 <__alt_data_end+0xfc0146f0>
   1573c:	d9000617 	ldw	r4,24(sp)
   15740:	203f0d26 	beq	r4,zero,15378 <__alt_data_end+0xfc015378>
   15744:	d9800c17 	ldw	r6,48(sp)
   15748:	01bcab0e 	bge	zero,r6,149f8 <__alt_data_end+0xfc0149f8>
   1574c:	d9401017 	ldw	r5,64(sp)
   15750:	d9000f17 	ldw	r4,60(sp)
   15754:	000d883a 	mov	r6,zero
   15758:	01d00934 	movhi	r7,16420
   1575c:	001de4c0 	call	1de4c <__muldf3>
   15760:	81000044 	addi	r4,r16,1
   15764:	d8800f15 	stw	r2,60(sp)
   15768:	d8c01015 	stw	r3,64(sp)
   1576c:	001f0340 	call	1f034 <__floatsidf>
   15770:	d9800f17 	ldw	r6,60(sp)
   15774:	d9c01017 	ldw	r7,64(sp)
   15778:	1009883a 	mov	r4,r2
   1577c:	180b883a 	mov	r5,r3
   15780:	001de4c0 	call	1de4c <__muldf3>
   15784:	01d00734 	movhi	r7,16412
   15788:	000d883a 	mov	r6,zero
   1578c:	1009883a 	mov	r4,r2
   15790:	180b883a 	mov	r5,r3
   15794:	001c9780 	call	1c978 <__adddf3>
   15798:	d9c00517 	ldw	r7,20(sp)
   1579c:	047f3034 	movhi	r17,64704
   157a0:	1021883a 	mov	r16,r2
   157a4:	39ffffc4 	addi	r7,r7,-1
   157a8:	d9c01315 	stw	r7,76(sp)
   157ac:	1c63883a 	add	r17,r3,r17
   157b0:	db000c17 	ldw	r12,48(sp)
   157b4:	003bea06 	br	14760 <__alt_data_end+0xfc014760>
   157b8:	dc000915 	stw	r16,36(sp)
   157bc:	003e0e06 	br	14ff8 <__alt_data_end+0xfc014ff8>
   157c0:	01000e44 	movi	r4,57
   157c4:	8825883a 	mov	r18,r17
   157c8:	9dc00044 	addi	r23,r19,1
   157cc:	99000005 	stb	r4,0(r19)
   157d0:	a023883a 	mov	r17,r20
   157d4:	dc000915 	stw	r16,36(sp)
   157d8:	003da406 	br	14e6c <__alt_data_end+0xfc014e6c>
   157dc:	d9801417 	ldw	r6,80(sp)
   157e0:	d9c01517 	ldw	r7,84(sp)
   157e4:	0009883a 	mov	r4,zero
   157e8:	014ff834 	movhi	r5,16352
   157ec:	001e6b80 	call	1e6b8 <__subdf3>
   157f0:	880d883a 	mov	r6,r17
   157f4:	a00f883a 	mov	r7,r20
   157f8:	1009883a 	mov	r4,r2
   157fc:	180b883a 	mov	r5,r3
   15800:	001dc7c0 	call	1dc7c <__gedf2>
   15804:	00bc7c0e 	bge	zero,r2,149f8 <__alt_data_end+0xfc0149f8>
   15808:	01000c04 	movi	r4,48
   1580c:	00000106 	br	15814 <_dtoa_r+0x1580>
   15810:	102f883a 	mov	r23,r2
   15814:	b8bfffc4 	addi	r2,r23,-1
   15818:	10c00007 	ldb	r3,0(r2)
   1581c:	193ffc26 	beq	r3,r4,15810 <__alt_data_end+0xfc015810>
   15820:	d9801317 	ldw	r6,76(sp)
   15824:	d9800515 	stw	r6,20(sp)
   15828:	003c4406 	br	1493c <__alt_data_end+0xfc01493c>
   1582c:	d9801317 	ldw	r6,76(sp)
   15830:	d9800515 	stw	r6,20(sp)
   15834:	003cea06 	br	14be0 <__alt_data_end+0xfc014be0>
   15838:	dd800f17 	ldw	r22,60(sp)
   1583c:	dcc01017 	ldw	r19,64(sp)
   15840:	dc801217 	ldw	r18,72(sp)
   15844:	003c6c06 	br	149f8 <__alt_data_end+0xfc0149f8>
   15848:	903e031e 	bne	r18,zero,15058 <__alt_data_end+0xfc015058>
   1584c:	003ebb06 	br	1533c <__alt_data_end+0xfc01533c>
   15850:	103e6c1e 	bne	r2,zero,15204 <__alt_data_end+0xfc015204>
   15854:	4080004c 	andi	r2,r8,1
   15858:	103e6a26 	beq	r2,zero,15204 <__alt_data_end+0xfc015204>
   1585c:	003e6606 	br	151f8 <__alt_data_end+0xfc0151f8>
   15860:	d8c00317 	ldw	r3,12(sp)
   15864:	00800084 	movi	r2,2
   15868:	10c02916 	blt	r2,r3,15910 <_dtoa_r+0x167c>
   1586c:	d9000c17 	ldw	r4,48(sp)
   15870:	003e8806 	br	15294 <__alt_data_end+0xfc015294>
   15874:	04000084 	movi	r16,2
   15878:	003b9d06 	br	146f0 <__alt_data_end+0xfc0146f0>
   1587c:	d9001317 	ldw	r4,76(sp)
   15880:	d9000515 	stw	r4,20(sp)
   15884:	003cd606 	br	14be0 <__alt_data_end+0xfc014be0>
   15888:	d8801317 	ldw	r2,76(sp)
   1588c:	d8800515 	stw	r2,20(sp)
   15890:	003c2a06 	br	1493c <__alt_data_end+0xfc01493c>
   15894:	d9800317 	ldw	r6,12(sp)
   15898:	00800084 	movi	r2,2
   1589c:	11801516 	blt	r2,r6,158f4 <_dtoa_r+0x1660>
   158a0:	d9c00c17 	ldw	r7,48(sp)
   158a4:	d9c00615 	stw	r7,24(sp)
   158a8:	003df706 	br	15088 <__alt_data_end+0xfc015088>
   158ac:	193d3926 	beq	r3,r4,14d94 <__alt_data_end+0xfc014d94>
   158b0:	00c00f04 	movi	r3,60
   158b4:	1885c83a 	sub	r2,r3,r2
   158b8:	003ddf06 	br	15038 <__alt_data_end+0xfc015038>
   158bc:	e009883a 	mov	r4,fp
   158c0:	e0001115 	stw	zero,68(fp)
   158c4:	000b883a 	mov	r5,zero
   158c8:	0016ed00 	call	16ed0 <_Balloc>
   158cc:	d8800715 	stw	r2,28(sp)
   158d0:	d8c00717 	ldw	r3,28(sp)
   158d4:	00bfffc4 	movi	r2,-1
   158d8:	01000044 	movi	r4,1
   158dc:	d8800c15 	stw	r2,48(sp)
   158e0:	e0c01015 	stw	r3,64(fp)
   158e4:	d9000b15 	stw	r4,44(sp)
   158e8:	d8800615 	stw	r2,24(sp)
   158ec:	d8002215 	stw	zero,136(sp)
   158f0:	003c4106 	br	149f8 <__alt_data_end+0xfc0149f8>
   158f4:	d8c00c17 	ldw	r3,48(sp)
   158f8:	d8c00615 	stw	r3,24(sp)
   158fc:	003e7006 	br	152c0 <__alt_data_end+0xfc0152c0>
   15900:	04400044 	movi	r17,1
   15904:	003b2006 	br	14588 <__alt_data_end+0xfc014588>
   15908:	000b883a 	mov	r5,zero
   1590c:	003b3d06 	br	14604 <__alt_data_end+0xfc014604>
   15910:	d8800c17 	ldw	r2,48(sp)
   15914:	d8800615 	stw	r2,24(sp)
   15918:	003e6906 	br	152c0 <__alt_data_end+0xfc0152c0>

0001591c <__sflush_r>:
   1591c:	2880030b 	ldhu	r2,12(r5)
   15920:	defffb04 	addi	sp,sp,-20
   15924:	dcc00315 	stw	r19,12(sp)
   15928:	dc400115 	stw	r17,4(sp)
   1592c:	dfc00415 	stw	ra,16(sp)
   15930:	dc800215 	stw	r18,8(sp)
   15934:	dc000015 	stw	r16,0(sp)
   15938:	10c0020c 	andi	r3,r2,8
   1593c:	2823883a 	mov	r17,r5
   15940:	2027883a 	mov	r19,r4
   15944:	1800311e 	bne	r3,zero,15a0c <__sflush_r+0xf0>
   15948:	28c00117 	ldw	r3,4(r5)
   1594c:	10820014 	ori	r2,r2,2048
   15950:	2880030d 	sth	r2,12(r5)
   15954:	00c04b0e 	bge	zero,r3,15a84 <__sflush_r+0x168>
   15958:	8a000a17 	ldw	r8,40(r17)
   1595c:	40002326 	beq	r8,zero,159ec <__sflush_r+0xd0>
   15960:	9c000017 	ldw	r16,0(r19)
   15964:	10c4000c 	andi	r3,r2,4096
   15968:	98000015 	stw	zero,0(r19)
   1596c:	18004826 	beq	r3,zero,15a90 <__sflush_r+0x174>
   15970:	89801417 	ldw	r6,80(r17)
   15974:	10c0010c 	andi	r3,r2,4
   15978:	18000626 	beq	r3,zero,15994 <__sflush_r+0x78>
   1597c:	88c00117 	ldw	r3,4(r17)
   15980:	88800c17 	ldw	r2,48(r17)
   15984:	30cdc83a 	sub	r6,r6,r3
   15988:	10000226 	beq	r2,zero,15994 <__sflush_r+0x78>
   1598c:	88800f17 	ldw	r2,60(r17)
   15990:	308dc83a 	sub	r6,r6,r2
   15994:	89400717 	ldw	r5,28(r17)
   15998:	000f883a 	mov	r7,zero
   1599c:	9809883a 	mov	r4,r19
   159a0:	403ee83a 	callr	r8
   159a4:	00ffffc4 	movi	r3,-1
   159a8:	10c04426 	beq	r2,r3,15abc <__sflush_r+0x1a0>
   159ac:	88c0030b 	ldhu	r3,12(r17)
   159b0:	89000417 	ldw	r4,16(r17)
   159b4:	88000115 	stw	zero,4(r17)
   159b8:	197dffcc 	andi	r5,r3,63487
   159bc:	8940030d 	sth	r5,12(r17)
   159c0:	89000015 	stw	r4,0(r17)
   159c4:	18c4000c 	andi	r3,r3,4096
   159c8:	18002c1e 	bne	r3,zero,15a7c <__sflush_r+0x160>
   159cc:	89400c17 	ldw	r5,48(r17)
   159d0:	9c000015 	stw	r16,0(r19)
   159d4:	28000526 	beq	r5,zero,159ec <__sflush_r+0xd0>
   159d8:	88801004 	addi	r2,r17,64
   159dc:	28800226 	beq	r5,r2,159e8 <__sflush_r+0xcc>
   159e0:	9809883a 	mov	r4,r19
   159e4:	00160980 	call	16098 <_free_r>
   159e8:	88000c15 	stw	zero,48(r17)
   159ec:	0005883a 	mov	r2,zero
   159f0:	dfc00417 	ldw	ra,16(sp)
   159f4:	dcc00317 	ldw	r19,12(sp)
   159f8:	dc800217 	ldw	r18,8(sp)
   159fc:	dc400117 	ldw	r17,4(sp)
   15a00:	dc000017 	ldw	r16,0(sp)
   15a04:	dec00504 	addi	sp,sp,20
   15a08:	f800283a 	ret
   15a0c:	2c800417 	ldw	r18,16(r5)
   15a10:	903ff626 	beq	r18,zero,159ec <__alt_data_end+0xfc0159ec>
   15a14:	2c000017 	ldw	r16,0(r5)
   15a18:	108000cc 	andi	r2,r2,3
   15a1c:	2c800015 	stw	r18,0(r5)
   15a20:	84a1c83a 	sub	r16,r16,r18
   15a24:	1000131e 	bne	r2,zero,15a74 <__sflush_r+0x158>
   15a28:	28800517 	ldw	r2,20(r5)
   15a2c:	88800215 	stw	r2,8(r17)
   15a30:	04000316 	blt	zero,r16,15a40 <__sflush_r+0x124>
   15a34:	003fed06 	br	159ec <__alt_data_end+0xfc0159ec>
   15a38:	90a5883a 	add	r18,r18,r2
   15a3c:	043feb0e 	bge	zero,r16,159ec <__alt_data_end+0xfc0159ec>
   15a40:	88800917 	ldw	r2,36(r17)
   15a44:	89400717 	ldw	r5,28(r17)
   15a48:	800f883a 	mov	r7,r16
   15a4c:	900d883a 	mov	r6,r18
   15a50:	9809883a 	mov	r4,r19
   15a54:	103ee83a 	callr	r2
   15a58:	80a1c83a 	sub	r16,r16,r2
   15a5c:	00bff616 	blt	zero,r2,15a38 <__alt_data_end+0xfc015a38>
   15a60:	88c0030b 	ldhu	r3,12(r17)
   15a64:	00bfffc4 	movi	r2,-1
   15a68:	18c01014 	ori	r3,r3,64
   15a6c:	88c0030d 	sth	r3,12(r17)
   15a70:	003fdf06 	br	159f0 <__alt_data_end+0xfc0159f0>
   15a74:	0005883a 	mov	r2,zero
   15a78:	003fec06 	br	15a2c <__alt_data_end+0xfc015a2c>
   15a7c:	88801415 	stw	r2,80(r17)
   15a80:	003fd206 	br	159cc <__alt_data_end+0xfc0159cc>
   15a84:	28c00f17 	ldw	r3,60(r5)
   15a88:	00ffb316 	blt	zero,r3,15958 <__alt_data_end+0xfc015958>
   15a8c:	003fd706 	br	159ec <__alt_data_end+0xfc0159ec>
   15a90:	89400717 	ldw	r5,28(r17)
   15a94:	000d883a 	mov	r6,zero
   15a98:	01c00044 	movi	r7,1
   15a9c:	9809883a 	mov	r4,r19
   15aa0:	403ee83a 	callr	r8
   15aa4:	100d883a 	mov	r6,r2
   15aa8:	00bfffc4 	movi	r2,-1
   15aac:	30801426 	beq	r6,r2,15b00 <__sflush_r+0x1e4>
   15ab0:	8880030b 	ldhu	r2,12(r17)
   15ab4:	8a000a17 	ldw	r8,40(r17)
   15ab8:	003fae06 	br	15974 <__alt_data_end+0xfc015974>
   15abc:	98c00017 	ldw	r3,0(r19)
   15ac0:	183fba26 	beq	r3,zero,159ac <__alt_data_end+0xfc0159ac>
   15ac4:	01000744 	movi	r4,29
   15ac8:	19000626 	beq	r3,r4,15ae4 <__sflush_r+0x1c8>
   15acc:	01000584 	movi	r4,22
   15ad0:	19000426 	beq	r3,r4,15ae4 <__sflush_r+0x1c8>
   15ad4:	88c0030b 	ldhu	r3,12(r17)
   15ad8:	18c01014 	ori	r3,r3,64
   15adc:	88c0030d 	sth	r3,12(r17)
   15ae0:	003fc306 	br	159f0 <__alt_data_end+0xfc0159f0>
   15ae4:	8880030b 	ldhu	r2,12(r17)
   15ae8:	88c00417 	ldw	r3,16(r17)
   15aec:	88000115 	stw	zero,4(r17)
   15af0:	10bdffcc 	andi	r2,r2,63487
   15af4:	8880030d 	sth	r2,12(r17)
   15af8:	88c00015 	stw	r3,0(r17)
   15afc:	003fb306 	br	159cc <__alt_data_end+0xfc0159cc>
   15b00:	98800017 	ldw	r2,0(r19)
   15b04:	103fea26 	beq	r2,zero,15ab0 <__alt_data_end+0xfc015ab0>
   15b08:	00c00744 	movi	r3,29
   15b0c:	10c00226 	beq	r2,r3,15b18 <__sflush_r+0x1fc>
   15b10:	00c00584 	movi	r3,22
   15b14:	10c0031e 	bne	r2,r3,15b24 <__sflush_r+0x208>
   15b18:	9c000015 	stw	r16,0(r19)
   15b1c:	0005883a 	mov	r2,zero
   15b20:	003fb306 	br	159f0 <__alt_data_end+0xfc0159f0>
   15b24:	88c0030b 	ldhu	r3,12(r17)
   15b28:	3005883a 	mov	r2,r6
   15b2c:	18c01014 	ori	r3,r3,64
   15b30:	88c0030d 	sth	r3,12(r17)
   15b34:	003fae06 	br	159f0 <__alt_data_end+0xfc0159f0>

00015b38 <_fflush_r>:
   15b38:	defffd04 	addi	sp,sp,-12
   15b3c:	dc000115 	stw	r16,4(sp)
   15b40:	dfc00215 	stw	ra,8(sp)
   15b44:	2021883a 	mov	r16,r4
   15b48:	20000226 	beq	r4,zero,15b54 <_fflush_r+0x1c>
   15b4c:	20800e17 	ldw	r2,56(r4)
   15b50:	10000c26 	beq	r2,zero,15b84 <_fflush_r+0x4c>
   15b54:	2880030f 	ldh	r2,12(r5)
   15b58:	1000051e 	bne	r2,zero,15b70 <_fflush_r+0x38>
   15b5c:	0005883a 	mov	r2,zero
   15b60:	dfc00217 	ldw	ra,8(sp)
   15b64:	dc000117 	ldw	r16,4(sp)
   15b68:	dec00304 	addi	sp,sp,12
   15b6c:	f800283a 	ret
   15b70:	8009883a 	mov	r4,r16
   15b74:	dfc00217 	ldw	ra,8(sp)
   15b78:	dc000117 	ldw	r16,4(sp)
   15b7c:	dec00304 	addi	sp,sp,12
   15b80:	001591c1 	jmpi	1591c <__sflush_r>
   15b84:	d9400015 	stw	r5,0(sp)
   15b88:	0015f240 	call	15f24 <__sinit>
   15b8c:	d9400017 	ldw	r5,0(sp)
   15b90:	003ff006 	br	15b54 <__alt_data_end+0xfc015b54>

00015b94 <fflush>:
   15b94:	20000526 	beq	r4,zero,15bac <fflush+0x18>
   15b98:	008000f4 	movhi	r2,3
   15b9c:	10b84b04 	addi	r2,r2,-7892
   15ba0:	200b883a 	mov	r5,r4
   15ba4:	11000017 	ldw	r4,0(r2)
   15ba8:	0015b381 	jmpi	15b38 <_fflush_r>
   15bac:	008000f4 	movhi	r2,3
   15bb0:	10b84a04 	addi	r2,r2,-7896
   15bb4:	11000017 	ldw	r4,0(r2)
   15bb8:	01400074 	movhi	r5,1
   15bbc:	2956ce04 	addi	r5,r5,23352
   15bc0:	00169341 	jmpi	16934 <_fwalk_reent>

00015bc4 <__fp_unlock>:
   15bc4:	0005883a 	mov	r2,zero
   15bc8:	f800283a 	ret

00015bcc <_cleanup_r>:
   15bcc:	014000b4 	movhi	r5,2
   15bd0:	296dd504 	addi	r5,r5,-18604
   15bd4:	00169341 	jmpi	16934 <_fwalk_reent>

00015bd8 <__sinit.part.1>:
   15bd8:	defff704 	addi	sp,sp,-36
   15bdc:	00c00074 	movhi	r3,1
   15be0:	dfc00815 	stw	ra,32(sp)
   15be4:	ddc00715 	stw	r23,28(sp)
   15be8:	dd800615 	stw	r22,24(sp)
   15bec:	dd400515 	stw	r21,20(sp)
   15bf0:	dd000415 	stw	r20,16(sp)
   15bf4:	dcc00315 	stw	r19,12(sp)
   15bf8:	dc800215 	stw	r18,8(sp)
   15bfc:	dc400115 	stw	r17,4(sp)
   15c00:	dc000015 	stw	r16,0(sp)
   15c04:	18d6f304 	addi	r3,r3,23500
   15c08:	24000117 	ldw	r16,4(r4)
   15c0c:	20c00f15 	stw	r3,60(r4)
   15c10:	2080bb04 	addi	r2,r4,748
   15c14:	00c000c4 	movi	r3,3
   15c18:	20c0b915 	stw	r3,740(r4)
   15c1c:	2080ba15 	stw	r2,744(r4)
   15c20:	2000b815 	stw	zero,736(r4)
   15c24:	05c00204 	movi	r23,8
   15c28:	00800104 	movi	r2,4
   15c2c:	2025883a 	mov	r18,r4
   15c30:	b80d883a 	mov	r6,r23
   15c34:	81001704 	addi	r4,r16,92
   15c38:	000b883a 	mov	r5,zero
   15c3c:	80000015 	stw	zero,0(r16)
   15c40:	80000115 	stw	zero,4(r16)
   15c44:	80000215 	stw	zero,8(r16)
   15c48:	8080030d 	sth	r2,12(r16)
   15c4c:	80001915 	stw	zero,100(r16)
   15c50:	8000038d 	sth	zero,14(r16)
   15c54:	80000415 	stw	zero,16(r16)
   15c58:	80000515 	stw	zero,20(r16)
   15c5c:	80000615 	stw	zero,24(r16)
   15c60:	000f0880 	call	f088 <memset>
   15c64:	058000b4 	movhi	r22,2
   15c68:	94400217 	ldw	r17,8(r18)
   15c6c:	054000b4 	movhi	r21,2
   15c70:	050000b4 	movhi	r20,2
   15c74:	04c000b4 	movhi	r19,2
   15c78:	b5a1b204 	addi	r22,r22,-31032
   15c7c:	ad61c904 	addi	r21,r21,-30940
   15c80:	a521e804 	addi	r20,r20,-30816
   15c84:	9ce1ff04 	addi	r19,r19,-30724
   15c88:	85800815 	stw	r22,32(r16)
   15c8c:	85400915 	stw	r21,36(r16)
   15c90:	85000a15 	stw	r20,40(r16)
   15c94:	84c00b15 	stw	r19,44(r16)
   15c98:	84000715 	stw	r16,28(r16)
   15c9c:	00800284 	movi	r2,10
   15ca0:	8880030d 	sth	r2,12(r17)
   15ca4:	00800044 	movi	r2,1
   15ca8:	b80d883a 	mov	r6,r23
   15cac:	89001704 	addi	r4,r17,92
   15cb0:	000b883a 	mov	r5,zero
   15cb4:	88000015 	stw	zero,0(r17)
   15cb8:	88000115 	stw	zero,4(r17)
   15cbc:	88000215 	stw	zero,8(r17)
   15cc0:	88001915 	stw	zero,100(r17)
   15cc4:	8880038d 	sth	r2,14(r17)
   15cc8:	88000415 	stw	zero,16(r17)
   15ccc:	88000515 	stw	zero,20(r17)
   15cd0:	88000615 	stw	zero,24(r17)
   15cd4:	000f0880 	call	f088 <memset>
   15cd8:	94000317 	ldw	r16,12(r18)
   15cdc:	00800484 	movi	r2,18
   15ce0:	8c400715 	stw	r17,28(r17)
   15ce4:	8d800815 	stw	r22,32(r17)
   15ce8:	8d400915 	stw	r21,36(r17)
   15cec:	8d000a15 	stw	r20,40(r17)
   15cf0:	8cc00b15 	stw	r19,44(r17)
   15cf4:	8080030d 	sth	r2,12(r16)
   15cf8:	00800084 	movi	r2,2
   15cfc:	80000015 	stw	zero,0(r16)
   15d00:	80000115 	stw	zero,4(r16)
   15d04:	80000215 	stw	zero,8(r16)
   15d08:	80001915 	stw	zero,100(r16)
   15d0c:	8080038d 	sth	r2,14(r16)
   15d10:	80000415 	stw	zero,16(r16)
   15d14:	80000515 	stw	zero,20(r16)
   15d18:	80000615 	stw	zero,24(r16)
   15d1c:	b80d883a 	mov	r6,r23
   15d20:	000b883a 	mov	r5,zero
   15d24:	81001704 	addi	r4,r16,92
   15d28:	000f0880 	call	f088 <memset>
   15d2c:	00800044 	movi	r2,1
   15d30:	84000715 	stw	r16,28(r16)
   15d34:	85800815 	stw	r22,32(r16)
   15d38:	85400915 	stw	r21,36(r16)
   15d3c:	85000a15 	stw	r20,40(r16)
   15d40:	84c00b15 	stw	r19,44(r16)
   15d44:	90800e15 	stw	r2,56(r18)
   15d48:	dfc00817 	ldw	ra,32(sp)
   15d4c:	ddc00717 	ldw	r23,28(sp)
   15d50:	dd800617 	ldw	r22,24(sp)
   15d54:	dd400517 	ldw	r21,20(sp)
   15d58:	dd000417 	ldw	r20,16(sp)
   15d5c:	dcc00317 	ldw	r19,12(sp)
   15d60:	dc800217 	ldw	r18,8(sp)
   15d64:	dc400117 	ldw	r17,4(sp)
   15d68:	dc000017 	ldw	r16,0(sp)
   15d6c:	dec00904 	addi	sp,sp,36
   15d70:	f800283a 	ret

00015d74 <__fp_lock>:
   15d74:	0005883a 	mov	r2,zero
   15d78:	f800283a 	ret

00015d7c <__sfmoreglue>:
   15d7c:	defffc04 	addi	sp,sp,-16
   15d80:	dc800215 	stw	r18,8(sp)
   15d84:	2825883a 	mov	r18,r5
   15d88:	dc000015 	stw	r16,0(sp)
   15d8c:	01401a04 	movi	r5,104
   15d90:	2021883a 	mov	r16,r4
   15d94:	913fffc4 	addi	r4,r18,-1
   15d98:	dfc00315 	stw	ra,12(sp)
   15d9c:	dc400115 	stw	r17,4(sp)
   15da0:	000d18c0 	call	d18c <__mulsi3>
   15da4:	8009883a 	mov	r4,r16
   15da8:	11401d04 	addi	r5,r2,116
   15dac:	1023883a 	mov	r17,r2
   15db0:	000e7340 	call	e734 <_malloc_r>
   15db4:	1021883a 	mov	r16,r2
   15db8:	10000726 	beq	r2,zero,15dd8 <__sfmoreglue+0x5c>
   15dbc:	11000304 	addi	r4,r2,12
   15dc0:	10000015 	stw	zero,0(r2)
   15dc4:	14800115 	stw	r18,4(r2)
   15dc8:	11000215 	stw	r4,8(r2)
   15dcc:	89801a04 	addi	r6,r17,104
   15dd0:	000b883a 	mov	r5,zero
   15dd4:	000f0880 	call	f088 <memset>
   15dd8:	8005883a 	mov	r2,r16
   15ddc:	dfc00317 	ldw	ra,12(sp)
   15de0:	dc800217 	ldw	r18,8(sp)
   15de4:	dc400117 	ldw	r17,4(sp)
   15de8:	dc000017 	ldw	r16,0(sp)
   15dec:	dec00404 	addi	sp,sp,16
   15df0:	f800283a 	ret

00015df4 <__sfp>:
   15df4:	defffb04 	addi	sp,sp,-20
   15df8:	dc000015 	stw	r16,0(sp)
   15dfc:	040000f4 	movhi	r16,3
   15e00:	84384a04 	addi	r16,r16,-7896
   15e04:	dcc00315 	stw	r19,12(sp)
   15e08:	2027883a 	mov	r19,r4
   15e0c:	81000017 	ldw	r4,0(r16)
   15e10:	dfc00415 	stw	ra,16(sp)
   15e14:	dc800215 	stw	r18,8(sp)
   15e18:	20800e17 	ldw	r2,56(r4)
   15e1c:	dc400115 	stw	r17,4(sp)
   15e20:	1000021e 	bne	r2,zero,15e2c <__sfp+0x38>
   15e24:	0015bd80 	call	15bd8 <__sinit.part.1>
   15e28:	81000017 	ldw	r4,0(r16)
   15e2c:	2480b804 	addi	r18,r4,736
   15e30:	047fffc4 	movi	r17,-1
   15e34:	91000117 	ldw	r4,4(r18)
   15e38:	94000217 	ldw	r16,8(r18)
   15e3c:	213fffc4 	addi	r4,r4,-1
   15e40:	20000a16 	blt	r4,zero,15e6c <__sfp+0x78>
   15e44:	8080030f 	ldh	r2,12(r16)
   15e48:	10000c26 	beq	r2,zero,15e7c <__sfp+0x88>
   15e4c:	80c01d04 	addi	r3,r16,116
   15e50:	00000206 	br	15e5c <__sfp+0x68>
   15e54:	18bfe60f 	ldh	r2,-104(r3)
   15e58:	10000826 	beq	r2,zero,15e7c <__sfp+0x88>
   15e5c:	213fffc4 	addi	r4,r4,-1
   15e60:	1c3ffd04 	addi	r16,r3,-12
   15e64:	18c01a04 	addi	r3,r3,104
   15e68:	247ffa1e 	bne	r4,r17,15e54 <__alt_data_end+0xfc015e54>
   15e6c:	90800017 	ldw	r2,0(r18)
   15e70:	10001d26 	beq	r2,zero,15ee8 <__sfp+0xf4>
   15e74:	1025883a 	mov	r18,r2
   15e78:	003fee06 	br	15e34 <__alt_data_end+0xfc015e34>
   15e7c:	00bfffc4 	movi	r2,-1
   15e80:	8080038d 	sth	r2,14(r16)
   15e84:	00800044 	movi	r2,1
   15e88:	8080030d 	sth	r2,12(r16)
   15e8c:	80001915 	stw	zero,100(r16)
   15e90:	80000015 	stw	zero,0(r16)
   15e94:	80000215 	stw	zero,8(r16)
   15e98:	80000115 	stw	zero,4(r16)
   15e9c:	80000415 	stw	zero,16(r16)
   15ea0:	80000515 	stw	zero,20(r16)
   15ea4:	80000615 	stw	zero,24(r16)
   15ea8:	01800204 	movi	r6,8
   15eac:	000b883a 	mov	r5,zero
   15eb0:	81001704 	addi	r4,r16,92
   15eb4:	000f0880 	call	f088 <memset>
   15eb8:	8005883a 	mov	r2,r16
   15ebc:	80000c15 	stw	zero,48(r16)
   15ec0:	80000d15 	stw	zero,52(r16)
   15ec4:	80001115 	stw	zero,68(r16)
   15ec8:	80001215 	stw	zero,72(r16)
   15ecc:	dfc00417 	ldw	ra,16(sp)
   15ed0:	dcc00317 	ldw	r19,12(sp)
   15ed4:	dc800217 	ldw	r18,8(sp)
   15ed8:	dc400117 	ldw	r17,4(sp)
   15edc:	dc000017 	ldw	r16,0(sp)
   15ee0:	dec00504 	addi	sp,sp,20
   15ee4:	f800283a 	ret
   15ee8:	01400104 	movi	r5,4
   15eec:	9809883a 	mov	r4,r19
   15ef0:	0015d7c0 	call	15d7c <__sfmoreglue>
   15ef4:	90800015 	stw	r2,0(r18)
   15ef8:	103fde1e 	bne	r2,zero,15e74 <__alt_data_end+0xfc015e74>
   15efc:	00800304 	movi	r2,12
   15f00:	98800015 	stw	r2,0(r19)
   15f04:	0005883a 	mov	r2,zero
   15f08:	003ff006 	br	15ecc <__alt_data_end+0xfc015ecc>

00015f0c <_cleanup>:
   15f0c:	008000f4 	movhi	r2,3
   15f10:	10b84a04 	addi	r2,r2,-7896
   15f14:	11000017 	ldw	r4,0(r2)
   15f18:	014000b4 	movhi	r5,2
   15f1c:	296dd504 	addi	r5,r5,-18604
   15f20:	00169341 	jmpi	16934 <_fwalk_reent>

00015f24 <__sinit>:
   15f24:	20800e17 	ldw	r2,56(r4)
   15f28:	10000126 	beq	r2,zero,15f30 <__sinit+0xc>
   15f2c:	f800283a 	ret
   15f30:	0015bd81 	jmpi	15bd8 <__sinit.part.1>

00015f34 <__sfp_lock_acquire>:
   15f34:	f800283a 	ret

00015f38 <__sfp_lock_release>:
   15f38:	f800283a 	ret

00015f3c <__sinit_lock_acquire>:
   15f3c:	f800283a 	ret

00015f40 <__sinit_lock_release>:
   15f40:	f800283a 	ret

00015f44 <__fp_lock_all>:
   15f44:	008000f4 	movhi	r2,3
   15f48:	10b84b04 	addi	r2,r2,-7892
   15f4c:	11000017 	ldw	r4,0(r2)
   15f50:	01400074 	movhi	r5,1
   15f54:	29575d04 	addi	r5,r5,23924
   15f58:	00168701 	jmpi	16870 <_fwalk>

00015f5c <__fp_unlock_all>:
   15f5c:	008000f4 	movhi	r2,3
   15f60:	10b84b04 	addi	r2,r2,-7892
   15f64:	11000017 	ldw	r4,0(r2)
   15f68:	01400074 	movhi	r5,1
   15f6c:	2956f104 	addi	r5,r5,23492
   15f70:	00168701 	jmpi	16870 <_fwalk>

00015f74 <_malloc_trim_r>:
   15f74:	defffb04 	addi	sp,sp,-20
   15f78:	dcc00315 	stw	r19,12(sp)
   15f7c:	04c000f4 	movhi	r19,3
   15f80:	dc800215 	stw	r18,8(sp)
   15f84:	dc400115 	stw	r17,4(sp)
   15f88:	dc000015 	stw	r16,0(sp)
   15f8c:	dfc00415 	stw	ra,16(sp)
   15f90:	2821883a 	mov	r16,r5
   15f94:	9cecea04 	addi	r19,r19,-19544
   15f98:	2025883a 	mov	r18,r4
   15f9c:	001f9140 	call	1f914 <__malloc_lock>
   15fa0:	98800217 	ldw	r2,8(r19)
   15fa4:	14400117 	ldw	r17,4(r2)
   15fa8:	00bfff04 	movi	r2,-4
   15fac:	88a2703a 	and	r17,r17,r2
   15fb0:	8c21c83a 	sub	r16,r17,r16
   15fb4:	8403fbc4 	addi	r16,r16,4079
   15fb8:	8020d33a 	srli	r16,r16,12
   15fbc:	0083ffc4 	movi	r2,4095
   15fc0:	843fffc4 	addi	r16,r16,-1
   15fc4:	8020933a 	slli	r16,r16,12
   15fc8:	1400060e 	bge	r2,r16,15fe4 <_malloc_trim_r+0x70>
   15fcc:	000b883a 	mov	r5,zero
   15fd0:	9009883a 	mov	r4,r18
   15fd4:	000f3100 	call	f310 <_sbrk_r>
   15fd8:	98c00217 	ldw	r3,8(r19)
   15fdc:	1c47883a 	add	r3,r3,r17
   15fe0:	10c00a26 	beq	r2,r3,1600c <_malloc_trim_r+0x98>
   15fe4:	9009883a 	mov	r4,r18
   15fe8:	001f9380 	call	1f938 <__malloc_unlock>
   15fec:	0005883a 	mov	r2,zero
   15ff0:	dfc00417 	ldw	ra,16(sp)
   15ff4:	dcc00317 	ldw	r19,12(sp)
   15ff8:	dc800217 	ldw	r18,8(sp)
   15ffc:	dc400117 	ldw	r17,4(sp)
   16000:	dc000017 	ldw	r16,0(sp)
   16004:	dec00504 	addi	sp,sp,20
   16008:	f800283a 	ret
   1600c:	040bc83a 	sub	r5,zero,r16
   16010:	9009883a 	mov	r4,r18
   16014:	000f3100 	call	f310 <_sbrk_r>
   16018:	00ffffc4 	movi	r3,-1
   1601c:	10c00d26 	beq	r2,r3,16054 <_malloc_trim_r+0xe0>
   16020:	00c000f4 	movhi	r3,3
   16024:	18c53804 	addi	r3,r3,5344
   16028:	18800017 	ldw	r2,0(r3)
   1602c:	99000217 	ldw	r4,8(r19)
   16030:	8c23c83a 	sub	r17,r17,r16
   16034:	8c400054 	ori	r17,r17,1
   16038:	1421c83a 	sub	r16,r2,r16
   1603c:	24400115 	stw	r17,4(r4)
   16040:	9009883a 	mov	r4,r18
   16044:	1c000015 	stw	r16,0(r3)
   16048:	001f9380 	call	1f938 <__malloc_unlock>
   1604c:	00800044 	movi	r2,1
   16050:	003fe706 	br	15ff0 <__alt_data_end+0xfc015ff0>
   16054:	000b883a 	mov	r5,zero
   16058:	9009883a 	mov	r4,r18
   1605c:	000f3100 	call	f310 <_sbrk_r>
   16060:	99000217 	ldw	r4,8(r19)
   16064:	014003c4 	movi	r5,15
   16068:	1107c83a 	sub	r3,r2,r4
   1606c:	28ffdd0e 	bge	r5,r3,15fe4 <__alt_data_end+0xfc015fe4>
   16070:	014000f4 	movhi	r5,3
   16074:	29784c04 	addi	r5,r5,-7888
   16078:	29400017 	ldw	r5,0(r5)
   1607c:	18c00054 	ori	r3,r3,1
   16080:	20c00115 	stw	r3,4(r4)
   16084:	00c000f4 	movhi	r3,3
   16088:	1145c83a 	sub	r2,r2,r5
   1608c:	18c53804 	addi	r3,r3,5344
   16090:	18800015 	stw	r2,0(r3)
   16094:	003fd306 	br	15fe4 <__alt_data_end+0xfc015fe4>

00016098 <_free_r>:
   16098:	28004126 	beq	r5,zero,161a0 <_free_r+0x108>
   1609c:	defffd04 	addi	sp,sp,-12
   160a0:	dc400115 	stw	r17,4(sp)
   160a4:	dc000015 	stw	r16,0(sp)
   160a8:	2023883a 	mov	r17,r4
   160ac:	2821883a 	mov	r16,r5
   160b0:	dfc00215 	stw	ra,8(sp)
   160b4:	001f9140 	call	1f914 <__malloc_lock>
   160b8:	81ffff17 	ldw	r7,-4(r16)
   160bc:	00bfff84 	movi	r2,-2
   160c0:	010000f4 	movhi	r4,3
   160c4:	81bffe04 	addi	r6,r16,-8
   160c8:	3884703a 	and	r2,r7,r2
   160cc:	212cea04 	addi	r4,r4,-19544
   160d0:	308b883a 	add	r5,r6,r2
   160d4:	2a400117 	ldw	r9,4(r5)
   160d8:	22000217 	ldw	r8,8(r4)
   160dc:	00ffff04 	movi	r3,-4
   160e0:	48c6703a 	and	r3,r9,r3
   160e4:	2a005726 	beq	r5,r8,16244 <_free_r+0x1ac>
   160e8:	28c00115 	stw	r3,4(r5)
   160ec:	39c0004c 	andi	r7,r7,1
   160f0:	3800091e 	bne	r7,zero,16118 <_free_r+0x80>
   160f4:	823ffe17 	ldw	r8,-8(r16)
   160f8:	22400204 	addi	r9,r4,8
   160fc:	320dc83a 	sub	r6,r6,r8
   16100:	31c00217 	ldw	r7,8(r6)
   16104:	1205883a 	add	r2,r2,r8
   16108:	3a406526 	beq	r7,r9,162a0 <_free_r+0x208>
   1610c:	32000317 	ldw	r8,12(r6)
   16110:	3a000315 	stw	r8,12(r7)
   16114:	41c00215 	stw	r7,8(r8)
   16118:	28cf883a 	add	r7,r5,r3
   1611c:	39c00117 	ldw	r7,4(r7)
   16120:	39c0004c 	andi	r7,r7,1
   16124:	38003a26 	beq	r7,zero,16210 <_free_r+0x178>
   16128:	10c00054 	ori	r3,r2,1
   1612c:	30c00115 	stw	r3,4(r6)
   16130:	3087883a 	add	r3,r6,r2
   16134:	18800015 	stw	r2,0(r3)
   16138:	00c07fc4 	movi	r3,511
   1613c:	18801936 	bltu	r3,r2,161a4 <_free_r+0x10c>
   16140:	1004d0fa 	srli	r2,r2,3
   16144:	01c00044 	movi	r7,1
   16148:	21400117 	ldw	r5,4(r4)
   1614c:	10c00044 	addi	r3,r2,1
   16150:	18c7883a 	add	r3,r3,r3
   16154:	1005d0ba 	srai	r2,r2,2
   16158:	18c7883a 	add	r3,r3,r3
   1615c:	18c7883a 	add	r3,r3,r3
   16160:	1907883a 	add	r3,r3,r4
   16164:	3884983a 	sll	r2,r7,r2
   16168:	19c00017 	ldw	r7,0(r3)
   1616c:	1a3ffe04 	addi	r8,r3,-8
   16170:	1144b03a 	or	r2,r2,r5
   16174:	32000315 	stw	r8,12(r6)
   16178:	31c00215 	stw	r7,8(r6)
   1617c:	20800115 	stw	r2,4(r4)
   16180:	19800015 	stw	r6,0(r3)
   16184:	39800315 	stw	r6,12(r7)
   16188:	8809883a 	mov	r4,r17
   1618c:	dfc00217 	ldw	ra,8(sp)
   16190:	dc400117 	ldw	r17,4(sp)
   16194:	dc000017 	ldw	r16,0(sp)
   16198:	dec00304 	addi	sp,sp,12
   1619c:	001f9381 	jmpi	1f938 <__malloc_unlock>
   161a0:	f800283a 	ret
   161a4:	100ad27a 	srli	r5,r2,9
   161a8:	00c00104 	movi	r3,4
   161ac:	19404a36 	bltu	r3,r5,162d8 <_free_r+0x240>
   161b0:	100ad1ba 	srli	r5,r2,6
   161b4:	28c00e44 	addi	r3,r5,57
   161b8:	18c7883a 	add	r3,r3,r3
   161bc:	29400e04 	addi	r5,r5,56
   161c0:	18c7883a 	add	r3,r3,r3
   161c4:	18c7883a 	add	r3,r3,r3
   161c8:	1909883a 	add	r4,r3,r4
   161cc:	20c00017 	ldw	r3,0(r4)
   161d0:	01c000f4 	movhi	r7,3
   161d4:	213ffe04 	addi	r4,r4,-8
   161d8:	39ecea04 	addi	r7,r7,-19544
   161dc:	20c04426 	beq	r4,r3,162f0 <_free_r+0x258>
   161e0:	01ffff04 	movi	r7,-4
   161e4:	19400117 	ldw	r5,4(r3)
   161e8:	29ca703a 	and	r5,r5,r7
   161ec:	1140022e 	bgeu	r2,r5,161f8 <_free_r+0x160>
   161f0:	18c00217 	ldw	r3,8(r3)
   161f4:	20fffb1e 	bne	r4,r3,161e4 <__alt_data_end+0xfc0161e4>
   161f8:	19000317 	ldw	r4,12(r3)
   161fc:	31000315 	stw	r4,12(r6)
   16200:	30c00215 	stw	r3,8(r6)
   16204:	21800215 	stw	r6,8(r4)
   16208:	19800315 	stw	r6,12(r3)
   1620c:	003fde06 	br	16188 <__alt_data_end+0xfc016188>
   16210:	29c00217 	ldw	r7,8(r5)
   16214:	10c5883a 	add	r2,r2,r3
   16218:	00c000f4 	movhi	r3,3
   1621c:	18ecec04 	addi	r3,r3,-19536
   16220:	38c03b26 	beq	r7,r3,16310 <_free_r+0x278>
   16224:	2a000317 	ldw	r8,12(r5)
   16228:	11400054 	ori	r5,r2,1
   1622c:	3087883a 	add	r3,r6,r2
   16230:	3a000315 	stw	r8,12(r7)
   16234:	41c00215 	stw	r7,8(r8)
   16238:	31400115 	stw	r5,4(r6)
   1623c:	18800015 	stw	r2,0(r3)
   16240:	003fbd06 	br	16138 <__alt_data_end+0xfc016138>
   16244:	39c0004c 	andi	r7,r7,1
   16248:	10c5883a 	add	r2,r2,r3
   1624c:	3800071e 	bne	r7,zero,1626c <_free_r+0x1d4>
   16250:	81fffe17 	ldw	r7,-8(r16)
   16254:	31cdc83a 	sub	r6,r6,r7
   16258:	30c00317 	ldw	r3,12(r6)
   1625c:	31400217 	ldw	r5,8(r6)
   16260:	11c5883a 	add	r2,r2,r7
   16264:	28c00315 	stw	r3,12(r5)
   16268:	19400215 	stw	r5,8(r3)
   1626c:	10c00054 	ori	r3,r2,1
   16270:	30c00115 	stw	r3,4(r6)
   16274:	00c000f4 	movhi	r3,3
   16278:	18f84d04 	addi	r3,r3,-7884
   1627c:	18c00017 	ldw	r3,0(r3)
   16280:	21800215 	stw	r6,8(r4)
   16284:	10ffc036 	bltu	r2,r3,16188 <__alt_data_end+0xfc016188>
   16288:	008000f4 	movhi	r2,3
   1628c:	1084e004 	addi	r2,r2,4992
   16290:	11400017 	ldw	r5,0(r2)
   16294:	8809883a 	mov	r4,r17
   16298:	0015f740 	call	15f74 <_malloc_trim_r>
   1629c:	003fba06 	br	16188 <__alt_data_end+0xfc016188>
   162a0:	28c9883a 	add	r4,r5,r3
   162a4:	21000117 	ldw	r4,4(r4)
   162a8:	2100004c 	andi	r4,r4,1
   162ac:	2000391e 	bne	r4,zero,16394 <_free_r+0x2fc>
   162b0:	29c00217 	ldw	r7,8(r5)
   162b4:	29000317 	ldw	r4,12(r5)
   162b8:	1885883a 	add	r2,r3,r2
   162bc:	10c00054 	ori	r3,r2,1
   162c0:	39000315 	stw	r4,12(r7)
   162c4:	21c00215 	stw	r7,8(r4)
   162c8:	30c00115 	stw	r3,4(r6)
   162cc:	308d883a 	add	r6,r6,r2
   162d0:	30800015 	stw	r2,0(r6)
   162d4:	003fac06 	br	16188 <__alt_data_end+0xfc016188>
   162d8:	00c00504 	movi	r3,20
   162dc:	19401536 	bltu	r3,r5,16334 <_free_r+0x29c>
   162e0:	28c01704 	addi	r3,r5,92
   162e4:	18c7883a 	add	r3,r3,r3
   162e8:	294016c4 	addi	r5,r5,91
   162ec:	003fb406 	br	161c0 <__alt_data_end+0xfc0161c0>
   162f0:	280bd0ba 	srai	r5,r5,2
   162f4:	00c00044 	movi	r3,1
   162f8:	38800117 	ldw	r2,4(r7)
   162fc:	194a983a 	sll	r5,r3,r5
   16300:	2007883a 	mov	r3,r4
   16304:	2884b03a 	or	r2,r5,r2
   16308:	38800115 	stw	r2,4(r7)
   1630c:	003fbb06 	br	161fc <__alt_data_end+0xfc0161fc>
   16310:	21800515 	stw	r6,20(r4)
   16314:	21800415 	stw	r6,16(r4)
   16318:	10c00054 	ori	r3,r2,1
   1631c:	31c00315 	stw	r7,12(r6)
   16320:	31c00215 	stw	r7,8(r6)
   16324:	30c00115 	stw	r3,4(r6)
   16328:	308d883a 	add	r6,r6,r2
   1632c:	30800015 	stw	r2,0(r6)
   16330:	003f9506 	br	16188 <__alt_data_end+0xfc016188>
   16334:	00c01504 	movi	r3,84
   16338:	19400536 	bltu	r3,r5,16350 <_free_r+0x2b8>
   1633c:	100ad33a 	srli	r5,r2,12
   16340:	28c01bc4 	addi	r3,r5,111
   16344:	18c7883a 	add	r3,r3,r3
   16348:	29401b84 	addi	r5,r5,110
   1634c:	003f9c06 	br	161c0 <__alt_data_end+0xfc0161c0>
   16350:	00c05504 	movi	r3,340
   16354:	19400536 	bltu	r3,r5,1636c <_free_r+0x2d4>
   16358:	100ad3fa 	srli	r5,r2,15
   1635c:	28c01e04 	addi	r3,r5,120
   16360:	18c7883a 	add	r3,r3,r3
   16364:	29401dc4 	addi	r5,r5,119
   16368:	003f9506 	br	161c0 <__alt_data_end+0xfc0161c0>
   1636c:	00c15504 	movi	r3,1364
   16370:	19400536 	bltu	r3,r5,16388 <_free_r+0x2f0>
   16374:	100ad4ba 	srli	r5,r2,18
   16378:	28c01f44 	addi	r3,r5,125
   1637c:	18c7883a 	add	r3,r3,r3
   16380:	29401f04 	addi	r5,r5,124
   16384:	003f8e06 	br	161c0 <__alt_data_end+0xfc0161c0>
   16388:	00c03f84 	movi	r3,254
   1638c:	01401f84 	movi	r5,126
   16390:	003f8b06 	br	161c0 <__alt_data_end+0xfc0161c0>
   16394:	10c00054 	ori	r3,r2,1
   16398:	30c00115 	stw	r3,4(r6)
   1639c:	308d883a 	add	r6,r6,r2
   163a0:	30800015 	stw	r2,0(r6)
   163a4:	003f7806 	br	16188 <__alt_data_end+0xfc016188>

000163a8 <__sfvwrite_r>:
   163a8:	30800217 	ldw	r2,8(r6)
   163ac:	10006726 	beq	r2,zero,1654c <__sfvwrite_r+0x1a4>
   163b0:	28c0030b 	ldhu	r3,12(r5)
   163b4:	defff404 	addi	sp,sp,-48
   163b8:	dd400715 	stw	r21,28(sp)
   163bc:	dd000615 	stw	r20,24(sp)
   163c0:	dc000215 	stw	r16,8(sp)
   163c4:	dfc00b15 	stw	ra,44(sp)
   163c8:	df000a15 	stw	fp,40(sp)
   163cc:	ddc00915 	stw	r23,36(sp)
   163d0:	dd800815 	stw	r22,32(sp)
   163d4:	dcc00515 	stw	r19,20(sp)
   163d8:	dc800415 	stw	r18,16(sp)
   163dc:	dc400315 	stw	r17,12(sp)
   163e0:	1880020c 	andi	r2,r3,8
   163e4:	2821883a 	mov	r16,r5
   163e8:	202b883a 	mov	r21,r4
   163ec:	3029883a 	mov	r20,r6
   163f0:	10002726 	beq	r2,zero,16490 <__sfvwrite_r+0xe8>
   163f4:	28800417 	ldw	r2,16(r5)
   163f8:	10002526 	beq	r2,zero,16490 <__sfvwrite_r+0xe8>
   163fc:	1880008c 	andi	r2,r3,2
   16400:	a4400017 	ldw	r17,0(r20)
   16404:	10002a26 	beq	r2,zero,164b0 <__sfvwrite_r+0x108>
   16408:	05a00034 	movhi	r22,32768
   1640c:	0027883a 	mov	r19,zero
   16410:	0025883a 	mov	r18,zero
   16414:	b5bf0004 	addi	r22,r22,-1024
   16418:	980d883a 	mov	r6,r19
   1641c:	a809883a 	mov	r4,r21
   16420:	90004626 	beq	r18,zero,1653c <__sfvwrite_r+0x194>
   16424:	900f883a 	mov	r7,r18
   16428:	b480022e 	bgeu	r22,r18,16434 <__sfvwrite_r+0x8c>
   1642c:	01e00034 	movhi	r7,32768
   16430:	39ff0004 	addi	r7,r7,-1024
   16434:	80800917 	ldw	r2,36(r16)
   16438:	81400717 	ldw	r5,28(r16)
   1643c:	103ee83a 	callr	r2
   16440:	00805a0e 	bge	zero,r2,165ac <__sfvwrite_r+0x204>
   16444:	a0c00217 	ldw	r3,8(r20)
   16448:	98a7883a 	add	r19,r19,r2
   1644c:	90a5c83a 	sub	r18,r18,r2
   16450:	1885c83a 	sub	r2,r3,r2
   16454:	a0800215 	stw	r2,8(r20)
   16458:	103fef1e 	bne	r2,zero,16418 <__alt_data_end+0xfc016418>
   1645c:	0005883a 	mov	r2,zero
   16460:	dfc00b17 	ldw	ra,44(sp)
   16464:	df000a17 	ldw	fp,40(sp)
   16468:	ddc00917 	ldw	r23,36(sp)
   1646c:	dd800817 	ldw	r22,32(sp)
   16470:	dd400717 	ldw	r21,28(sp)
   16474:	dd000617 	ldw	r20,24(sp)
   16478:	dcc00517 	ldw	r19,20(sp)
   1647c:	dc800417 	ldw	r18,16(sp)
   16480:	dc400317 	ldw	r17,12(sp)
   16484:	dc000217 	ldw	r16,8(sp)
   16488:	dec00c04 	addi	sp,sp,48
   1648c:	f800283a 	ret
   16490:	800b883a 	mov	r5,r16
   16494:	a809883a 	mov	r4,r21
   16498:	0013f180 	call	13f18 <__swsetup_r>
   1649c:	1000ee1e 	bne	r2,zero,16858 <__sfvwrite_r+0x4b0>
   164a0:	80c0030b 	ldhu	r3,12(r16)
   164a4:	a4400017 	ldw	r17,0(r20)
   164a8:	1880008c 	andi	r2,r3,2
   164ac:	103fd61e 	bne	r2,zero,16408 <__alt_data_end+0xfc016408>
   164b0:	1880004c 	andi	r2,r3,1
   164b4:	1000421e 	bne	r2,zero,165c0 <__sfvwrite_r+0x218>
   164b8:	0039883a 	mov	fp,zero
   164bc:	0025883a 	mov	r18,zero
   164c0:	90001a26 	beq	r18,zero,1652c <__sfvwrite_r+0x184>
   164c4:	1880800c 	andi	r2,r3,512
   164c8:	84c00217 	ldw	r19,8(r16)
   164cc:	10002126 	beq	r2,zero,16554 <__sfvwrite_r+0x1ac>
   164d0:	982f883a 	mov	r23,r19
   164d4:	94c09636 	bltu	r18,r19,16730 <__sfvwrite_r+0x388>
   164d8:	1881200c 	andi	r2,r3,1152
   164dc:	1000a11e 	bne	r2,zero,16764 <__sfvwrite_r+0x3bc>
   164e0:	81000017 	ldw	r4,0(r16)
   164e4:	b80d883a 	mov	r6,r23
   164e8:	e00b883a 	mov	r5,fp
   164ec:	0016d740 	call	16d74 <memmove>
   164f0:	80c00217 	ldw	r3,8(r16)
   164f4:	81000017 	ldw	r4,0(r16)
   164f8:	9005883a 	mov	r2,r18
   164fc:	1ce7c83a 	sub	r19,r3,r19
   16500:	25cf883a 	add	r7,r4,r23
   16504:	84c00215 	stw	r19,8(r16)
   16508:	81c00015 	stw	r7,0(r16)
   1650c:	a0c00217 	ldw	r3,8(r20)
   16510:	e0b9883a 	add	fp,fp,r2
   16514:	90a5c83a 	sub	r18,r18,r2
   16518:	18a7c83a 	sub	r19,r3,r2
   1651c:	a4c00215 	stw	r19,8(r20)
   16520:	983fce26 	beq	r19,zero,1645c <__alt_data_end+0xfc01645c>
   16524:	80c0030b 	ldhu	r3,12(r16)
   16528:	903fe61e 	bne	r18,zero,164c4 <__alt_data_end+0xfc0164c4>
   1652c:	8f000017 	ldw	fp,0(r17)
   16530:	8c800117 	ldw	r18,4(r17)
   16534:	8c400204 	addi	r17,r17,8
   16538:	003fe106 	br	164c0 <__alt_data_end+0xfc0164c0>
   1653c:	8cc00017 	ldw	r19,0(r17)
   16540:	8c800117 	ldw	r18,4(r17)
   16544:	8c400204 	addi	r17,r17,8
   16548:	003fb306 	br	16418 <__alt_data_end+0xfc016418>
   1654c:	0005883a 	mov	r2,zero
   16550:	f800283a 	ret
   16554:	81000017 	ldw	r4,0(r16)
   16558:	80800417 	ldw	r2,16(r16)
   1655c:	11005a36 	bltu	r2,r4,166c8 <__sfvwrite_r+0x320>
   16560:	85c00517 	ldw	r23,20(r16)
   16564:	95c05836 	bltu	r18,r23,166c8 <__sfvwrite_r+0x320>
   16568:	00a00034 	movhi	r2,32768
   1656c:	10bfffc4 	addi	r2,r2,-1
   16570:	9009883a 	mov	r4,r18
   16574:	1480012e 	bgeu	r2,r18,1657c <__sfvwrite_r+0x1d4>
   16578:	1009883a 	mov	r4,r2
   1657c:	b80b883a 	mov	r5,r23
   16580:	000cfd80 	call	cfd8 <__divsi3>
   16584:	b80b883a 	mov	r5,r23
   16588:	1009883a 	mov	r4,r2
   1658c:	000d18c0 	call	d18c <__mulsi3>
   16590:	81400717 	ldw	r5,28(r16)
   16594:	80c00917 	ldw	r3,36(r16)
   16598:	100f883a 	mov	r7,r2
   1659c:	e00d883a 	mov	r6,fp
   165a0:	a809883a 	mov	r4,r21
   165a4:	183ee83a 	callr	r3
   165a8:	00bfd816 	blt	zero,r2,1650c <__alt_data_end+0xfc01650c>
   165ac:	8080030b 	ldhu	r2,12(r16)
   165b0:	10801014 	ori	r2,r2,64
   165b4:	8080030d 	sth	r2,12(r16)
   165b8:	00bfffc4 	movi	r2,-1
   165bc:	003fa806 	br	16460 <__alt_data_end+0xfc016460>
   165c0:	0027883a 	mov	r19,zero
   165c4:	0011883a 	mov	r8,zero
   165c8:	0039883a 	mov	fp,zero
   165cc:	0025883a 	mov	r18,zero
   165d0:	90001f26 	beq	r18,zero,16650 <__sfvwrite_r+0x2a8>
   165d4:	40005a26 	beq	r8,zero,16740 <__sfvwrite_r+0x398>
   165d8:	982d883a 	mov	r22,r19
   165dc:	94c0012e 	bgeu	r18,r19,165e4 <__sfvwrite_r+0x23c>
   165e0:	902d883a 	mov	r22,r18
   165e4:	81000017 	ldw	r4,0(r16)
   165e8:	80800417 	ldw	r2,16(r16)
   165ec:	b02f883a 	mov	r23,r22
   165f0:	81c00517 	ldw	r7,20(r16)
   165f4:	1100032e 	bgeu	r2,r4,16604 <__sfvwrite_r+0x25c>
   165f8:	80c00217 	ldw	r3,8(r16)
   165fc:	38c7883a 	add	r3,r7,r3
   16600:	1d801816 	blt	r3,r22,16664 <__sfvwrite_r+0x2bc>
   16604:	b1c03e16 	blt	r22,r7,16700 <__sfvwrite_r+0x358>
   16608:	80800917 	ldw	r2,36(r16)
   1660c:	81400717 	ldw	r5,28(r16)
   16610:	e00d883a 	mov	r6,fp
   16614:	da000115 	stw	r8,4(sp)
   16618:	a809883a 	mov	r4,r21
   1661c:	103ee83a 	callr	r2
   16620:	102f883a 	mov	r23,r2
   16624:	da000117 	ldw	r8,4(sp)
   16628:	00bfe00e 	bge	zero,r2,165ac <__alt_data_end+0xfc0165ac>
   1662c:	9de7c83a 	sub	r19,r19,r23
   16630:	98001f26 	beq	r19,zero,166b0 <__sfvwrite_r+0x308>
   16634:	a0800217 	ldw	r2,8(r20)
   16638:	e5f9883a 	add	fp,fp,r23
   1663c:	95e5c83a 	sub	r18,r18,r23
   16640:	15efc83a 	sub	r23,r2,r23
   16644:	a5c00215 	stw	r23,8(r20)
   16648:	b83f8426 	beq	r23,zero,1645c <__alt_data_end+0xfc01645c>
   1664c:	903fe11e 	bne	r18,zero,165d4 <__alt_data_end+0xfc0165d4>
   16650:	8f000017 	ldw	fp,0(r17)
   16654:	8c800117 	ldw	r18,4(r17)
   16658:	0011883a 	mov	r8,zero
   1665c:	8c400204 	addi	r17,r17,8
   16660:	003fdb06 	br	165d0 <__alt_data_end+0xfc0165d0>
   16664:	180d883a 	mov	r6,r3
   16668:	e00b883a 	mov	r5,fp
   1666c:	da000115 	stw	r8,4(sp)
   16670:	d8c00015 	stw	r3,0(sp)
   16674:	0016d740 	call	16d74 <memmove>
   16678:	d8c00017 	ldw	r3,0(sp)
   1667c:	80800017 	ldw	r2,0(r16)
   16680:	800b883a 	mov	r5,r16
   16684:	a809883a 	mov	r4,r21
   16688:	10c5883a 	add	r2,r2,r3
   1668c:	80800015 	stw	r2,0(r16)
   16690:	d8c00015 	stw	r3,0(sp)
   16694:	0015b380 	call	15b38 <_fflush_r>
   16698:	d8c00017 	ldw	r3,0(sp)
   1669c:	da000117 	ldw	r8,4(sp)
   166a0:	103fc21e 	bne	r2,zero,165ac <__alt_data_end+0xfc0165ac>
   166a4:	182f883a 	mov	r23,r3
   166a8:	9de7c83a 	sub	r19,r19,r23
   166ac:	983fe11e 	bne	r19,zero,16634 <__alt_data_end+0xfc016634>
   166b0:	800b883a 	mov	r5,r16
   166b4:	a809883a 	mov	r4,r21
   166b8:	0015b380 	call	15b38 <_fflush_r>
   166bc:	103fbb1e 	bne	r2,zero,165ac <__alt_data_end+0xfc0165ac>
   166c0:	0011883a 	mov	r8,zero
   166c4:	003fdb06 	br	16634 <__alt_data_end+0xfc016634>
   166c8:	94c0012e 	bgeu	r18,r19,166d0 <__sfvwrite_r+0x328>
   166cc:	9027883a 	mov	r19,r18
   166d0:	980d883a 	mov	r6,r19
   166d4:	e00b883a 	mov	r5,fp
   166d8:	0016d740 	call	16d74 <memmove>
   166dc:	80800217 	ldw	r2,8(r16)
   166e0:	80c00017 	ldw	r3,0(r16)
   166e4:	14c5c83a 	sub	r2,r2,r19
   166e8:	1cc7883a 	add	r3,r3,r19
   166ec:	80800215 	stw	r2,8(r16)
   166f0:	80c00015 	stw	r3,0(r16)
   166f4:	10004326 	beq	r2,zero,16804 <__sfvwrite_r+0x45c>
   166f8:	9805883a 	mov	r2,r19
   166fc:	003f8306 	br	1650c <__alt_data_end+0xfc01650c>
   16700:	b00d883a 	mov	r6,r22
   16704:	e00b883a 	mov	r5,fp
   16708:	da000115 	stw	r8,4(sp)
   1670c:	0016d740 	call	16d74 <memmove>
   16710:	80800217 	ldw	r2,8(r16)
   16714:	80c00017 	ldw	r3,0(r16)
   16718:	da000117 	ldw	r8,4(sp)
   1671c:	1585c83a 	sub	r2,r2,r22
   16720:	1dad883a 	add	r22,r3,r22
   16724:	80800215 	stw	r2,8(r16)
   16728:	85800015 	stw	r22,0(r16)
   1672c:	003fbf06 	br	1662c <__alt_data_end+0xfc01662c>
   16730:	81000017 	ldw	r4,0(r16)
   16734:	9027883a 	mov	r19,r18
   16738:	902f883a 	mov	r23,r18
   1673c:	003f6906 	br	164e4 <__alt_data_end+0xfc0164e4>
   16740:	900d883a 	mov	r6,r18
   16744:	01400284 	movi	r5,10
   16748:	e009883a 	mov	r4,fp
   1674c:	0016c900 	call	16c90 <memchr>
   16750:	10003e26 	beq	r2,zero,1684c <__sfvwrite_r+0x4a4>
   16754:	10800044 	addi	r2,r2,1
   16758:	1727c83a 	sub	r19,r2,fp
   1675c:	02000044 	movi	r8,1
   16760:	003f9d06 	br	165d8 <__alt_data_end+0xfc0165d8>
   16764:	80800517 	ldw	r2,20(r16)
   16768:	81400417 	ldw	r5,16(r16)
   1676c:	81c00017 	ldw	r7,0(r16)
   16770:	10a7883a 	add	r19,r2,r2
   16774:	9885883a 	add	r2,r19,r2
   16778:	1026d7fa 	srli	r19,r2,31
   1677c:	396dc83a 	sub	r22,r7,r5
   16780:	b1000044 	addi	r4,r22,1
   16784:	9885883a 	add	r2,r19,r2
   16788:	1027d07a 	srai	r19,r2,1
   1678c:	2485883a 	add	r2,r4,r18
   16790:	980d883a 	mov	r6,r19
   16794:	9880022e 	bgeu	r19,r2,167a0 <__sfvwrite_r+0x3f8>
   16798:	1027883a 	mov	r19,r2
   1679c:	100d883a 	mov	r6,r2
   167a0:	18c1000c 	andi	r3,r3,1024
   167a4:	18001c26 	beq	r3,zero,16818 <__sfvwrite_r+0x470>
   167a8:	300b883a 	mov	r5,r6
   167ac:	a809883a 	mov	r4,r21
   167b0:	000e7340 	call	e734 <_malloc_r>
   167b4:	102f883a 	mov	r23,r2
   167b8:	10002926 	beq	r2,zero,16860 <__sfvwrite_r+0x4b8>
   167bc:	81400417 	ldw	r5,16(r16)
   167c0:	b00d883a 	mov	r6,r22
   167c4:	1009883a 	mov	r4,r2
   167c8:	000ef400 	call	ef40 <memcpy>
   167cc:	8080030b 	ldhu	r2,12(r16)
   167d0:	00fedfc4 	movi	r3,-1153
   167d4:	10c4703a 	and	r2,r2,r3
   167d8:	10802014 	ori	r2,r2,128
   167dc:	8080030d 	sth	r2,12(r16)
   167e0:	bd89883a 	add	r4,r23,r22
   167e4:	9d8fc83a 	sub	r7,r19,r22
   167e8:	85c00415 	stw	r23,16(r16)
   167ec:	84c00515 	stw	r19,20(r16)
   167f0:	81000015 	stw	r4,0(r16)
   167f4:	9027883a 	mov	r19,r18
   167f8:	81c00215 	stw	r7,8(r16)
   167fc:	902f883a 	mov	r23,r18
   16800:	003f3806 	br	164e4 <__alt_data_end+0xfc0164e4>
   16804:	800b883a 	mov	r5,r16
   16808:	a809883a 	mov	r4,r21
   1680c:	0015b380 	call	15b38 <_fflush_r>
   16810:	103fb926 	beq	r2,zero,166f8 <__alt_data_end+0xfc0166f8>
   16814:	003f6506 	br	165ac <__alt_data_end+0xfc0165ac>
   16818:	a809883a 	mov	r4,r21
   1681c:	00180f00 	call	180f0 <_realloc_r>
   16820:	102f883a 	mov	r23,r2
   16824:	103fee1e 	bne	r2,zero,167e0 <__alt_data_end+0xfc0167e0>
   16828:	81400417 	ldw	r5,16(r16)
   1682c:	a809883a 	mov	r4,r21
   16830:	00160980 	call	16098 <_free_r>
   16834:	8080030b 	ldhu	r2,12(r16)
   16838:	00ffdfc4 	movi	r3,-129
   1683c:	1884703a 	and	r2,r3,r2
   16840:	00c00304 	movi	r3,12
   16844:	a8c00015 	stw	r3,0(r21)
   16848:	003f5906 	br	165b0 <__alt_data_end+0xfc0165b0>
   1684c:	94c00044 	addi	r19,r18,1
   16850:	02000044 	movi	r8,1
   16854:	003f6006 	br	165d8 <__alt_data_end+0xfc0165d8>
   16858:	00bfffc4 	movi	r2,-1
   1685c:	003f0006 	br	16460 <__alt_data_end+0xfc016460>
   16860:	00800304 	movi	r2,12
   16864:	a8800015 	stw	r2,0(r21)
   16868:	8080030b 	ldhu	r2,12(r16)
   1686c:	003f5006 	br	165b0 <__alt_data_end+0xfc0165b0>

00016870 <_fwalk>:
   16870:	defff704 	addi	sp,sp,-36
   16874:	dd000415 	stw	r20,16(sp)
   16878:	dfc00815 	stw	ra,32(sp)
   1687c:	ddc00715 	stw	r23,28(sp)
   16880:	dd800615 	stw	r22,24(sp)
   16884:	dd400515 	stw	r21,20(sp)
   16888:	dcc00315 	stw	r19,12(sp)
   1688c:	dc800215 	stw	r18,8(sp)
   16890:	dc400115 	stw	r17,4(sp)
   16894:	dc000015 	stw	r16,0(sp)
   16898:	2500b804 	addi	r20,r4,736
   1689c:	a0002326 	beq	r20,zero,1692c <_fwalk+0xbc>
   168a0:	282b883a 	mov	r21,r5
   168a4:	002f883a 	mov	r23,zero
   168a8:	05800044 	movi	r22,1
   168ac:	04ffffc4 	movi	r19,-1
   168b0:	a4400117 	ldw	r17,4(r20)
   168b4:	a4800217 	ldw	r18,8(r20)
   168b8:	8c7fffc4 	addi	r17,r17,-1
   168bc:	88000d16 	blt	r17,zero,168f4 <_fwalk+0x84>
   168c0:	94000304 	addi	r16,r18,12
   168c4:	94800384 	addi	r18,r18,14
   168c8:	8080000b 	ldhu	r2,0(r16)
   168cc:	8c7fffc4 	addi	r17,r17,-1
   168d0:	813ffd04 	addi	r4,r16,-12
   168d4:	b080042e 	bgeu	r22,r2,168e8 <_fwalk+0x78>
   168d8:	9080000f 	ldh	r2,0(r18)
   168dc:	14c00226 	beq	r2,r19,168e8 <_fwalk+0x78>
   168e0:	a83ee83a 	callr	r21
   168e4:	b8aeb03a 	or	r23,r23,r2
   168e8:	84001a04 	addi	r16,r16,104
   168ec:	94801a04 	addi	r18,r18,104
   168f0:	8cfff51e 	bne	r17,r19,168c8 <__alt_data_end+0xfc0168c8>
   168f4:	a5000017 	ldw	r20,0(r20)
   168f8:	a03fed1e 	bne	r20,zero,168b0 <__alt_data_end+0xfc0168b0>
   168fc:	b805883a 	mov	r2,r23
   16900:	dfc00817 	ldw	ra,32(sp)
   16904:	ddc00717 	ldw	r23,28(sp)
   16908:	dd800617 	ldw	r22,24(sp)
   1690c:	dd400517 	ldw	r21,20(sp)
   16910:	dd000417 	ldw	r20,16(sp)
   16914:	dcc00317 	ldw	r19,12(sp)
   16918:	dc800217 	ldw	r18,8(sp)
   1691c:	dc400117 	ldw	r17,4(sp)
   16920:	dc000017 	ldw	r16,0(sp)
   16924:	dec00904 	addi	sp,sp,36
   16928:	f800283a 	ret
   1692c:	002f883a 	mov	r23,zero
   16930:	003ff206 	br	168fc <__alt_data_end+0xfc0168fc>

00016934 <_fwalk_reent>:
   16934:	defff704 	addi	sp,sp,-36
   16938:	dd000415 	stw	r20,16(sp)
   1693c:	dfc00815 	stw	ra,32(sp)
   16940:	ddc00715 	stw	r23,28(sp)
   16944:	dd800615 	stw	r22,24(sp)
   16948:	dd400515 	stw	r21,20(sp)
   1694c:	dcc00315 	stw	r19,12(sp)
   16950:	dc800215 	stw	r18,8(sp)
   16954:	dc400115 	stw	r17,4(sp)
   16958:	dc000015 	stw	r16,0(sp)
   1695c:	2500b804 	addi	r20,r4,736
   16960:	a0002326 	beq	r20,zero,169f0 <_fwalk_reent+0xbc>
   16964:	282b883a 	mov	r21,r5
   16968:	2027883a 	mov	r19,r4
   1696c:	002f883a 	mov	r23,zero
   16970:	05800044 	movi	r22,1
   16974:	04bfffc4 	movi	r18,-1
   16978:	a4400117 	ldw	r17,4(r20)
   1697c:	a4000217 	ldw	r16,8(r20)
   16980:	8c7fffc4 	addi	r17,r17,-1
   16984:	88000c16 	blt	r17,zero,169b8 <_fwalk_reent+0x84>
   16988:	84000304 	addi	r16,r16,12
   1698c:	8080000b 	ldhu	r2,0(r16)
   16990:	8c7fffc4 	addi	r17,r17,-1
   16994:	817ffd04 	addi	r5,r16,-12
   16998:	b080052e 	bgeu	r22,r2,169b0 <_fwalk_reent+0x7c>
   1699c:	8080008f 	ldh	r2,2(r16)
   169a0:	9809883a 	mov	r4,r19
   169a4:	14800226 	beq	r2,r18,169b0 <_fwalk_reent+0x7c>
   169a8:	a83ee83a 	callr	r21
   169ac:	b8aeb03a 	or	r23,r23,r2
   169b0:	84001a04 	addi	r16,r16,104
   169b4:	8cbff51e 	bne	r17,r18,1698c <__alt_data_end+0xfc01698c>
   169b8:	a5000017 	ldw	r20,0(r20)
   169bc:	a03fee1e 	bne	r20,zero,16978 <__alt_data_end+0xfc016978>
   169c0:	b805883a 	mov	r2,r23
   169c4:	dfc00817 	ldw	ra,32(sp)
   169c8:	ddc00717 	ldw	r23,28(sp)
   169cc:	dd800617 	ldw	r22,24(sp)
   169d0:	dd400517 	ldw	r21,20(sp)
   169d4:	dd000417 	ldw	r20,16(sp)
   169d8:	dcc00317 	ldw	r19,12(sp)
   169dc:	dc800217 	ldw	r18,8(sp)
   169e0:	dc400117 	ldw	r17,4(sp)
   169e4:	dc000017 	ldw	r16,0(sp)
   169e8:	dec00904 	addi	sp,sp,36
   169ec:	f800283a 	ret
   169f0:	002f883a 	mov	r23,zero
   169f4:	003ff206 	br	169c0 <__alt_data_end+0xfc0169c0>

000169f8 <_setlocale_r>:
   169f8:	30001b26 	beq	r6,zero,16a68 <_setlocale_r+0x70>
   169fc:	014000f4 	movhi	r5,3
   16a00:	defffe04 	addi	sp,sp,-8
   16a04:	296b6d04 	addi	r5,r5,-21068
   16a08:	3009883a 	mov	r4,r6
   16a0c:	dc000015 	stw	r16,0(sp)
   16a10:	dfc00115 	stw	ra,4(sp)
   16a14:	3021883a 	mov	r16,r6
   16a18:	000f72c0 	call	f72c <strcmp>
   16a1c:	1000061e 	bne	r2,zero,16a38 <_setlocale_r+0x40>
   16a20:	008000f4 	movhi	r2,3
   16a24:	10ab4604 	addi	r2,r2,-21224
   16a28:	dfc00117 	ldw	ra,4(sp)
   16a2c:	dc000017 	ldw	r16,0(sp)
   16a30:	dec00204 	addi	sp,sp,8
   16a34:	f800283a 	ret
   16a38:	014000f4 	movhi	r5,3
   16a3c:	296b4604 	addi	r5,r5,-21224
   16a40:	8009883a 	mov	r4,r16
   16a44:	000f72c0 	call	f72c <strcmp>
   16a48:	103ff526 	beq	r2,zero,16a20 <__alt_data_end+0xfc016a20>
   16a4c:	014000f4 	movhi	r5,3
   16a50:	296b5004 	addi	r5,r5,-21184
   16a54:	8009883a 	mov	r4,r16
   16a58:	000f72c0 	call	f72c <strcmp>
   16a5c:	103ff026 	beq	r2,zero,16a20 <__alt_data_end+0xfc016a20>
   16a60:	0005883a 	mov	r2,zero
   16a64:	003ff006 	br	16a28 <__alt_data_end+0xfc016a28>
   16a68:	008000f4 	movhi	r2,3
   16a6c:	10ab4604 	addi	r2,r2,-21224
   16a70:	f800283a 	ret

00016a74 <__locale_charset>:
   16a74:	008000f4 	movhi	r2,3
   16a78:	10adf404 	addi	r2,r2,-18480
   16a7c:	f800283a 	ret

00016a80 <__locale_mb_cur_max>:
   16a80:	008000f4 	movhi	r2,3
   16a84:	10b84e04 	addi	r2,r2,-7880
   16a88:	10800017 	ldw	r2,0(r2)
   16a8c:	f800283a 	ret

00016a90 <__locale_msgcharset>:
   16a90:	008000f4 	movhi	r2,3
   16a94:	10adec04 	addi	r2,r2,-18512
   16a98:	f800283a 	ret

00016a9c <__locale_cjk_lang>:
   16a9c:	0005883a 	mov	r2,zero
   16aa0:	f800283a 	ret

00016aa4 <_localeconv_r>:
   16aa4:	008000f4 	movhi	r2,3
   16aa8:	10adfc04 	addi	r2,r2,-18448
   16aac:	f800283a 	ret

00016ab0 <setlocale>:
   16ab0:	008000f4 	movhi	r2,3
   16ab4:	10b84b04 	addi	r2,r2,-7892
   16ab8:	280d883a 	mov	r6,r5
   16abc:	200b883a 	mov	r5,r4
   16ac0:	11000017 	ldw	r4,0(r2)
   16ac4:	00169f81 	jmpi	169f8 <_setlocale_r>

00016ac8 <localeconv>:
   16ac8:	008000f4 	movhi	r2,3
   16acc:	10adfc04 	addi	r2,r2,-18448
   16ad0:	f800283a 	ret

00016ad4 <__smakebuf_r>:
   16ad4:	2880030b 	ldhu	r2,12(r5)
   16ad8:	10c0008c 	andi	r3,r2,2
   16adc:	1800411e 	bne	r3,zero,16be4 <__smakebuf_r+0x110>
   16ae0:	deffec04 	addi	sp,sp,-80
   16ae4:	dc000f15 	stw	r16,60(sp)
   16ae8:	2821883a 	mov	r16,r5
   16aec:	2940038f 	ldh	r5,14(r5)
   16af0:	dc401015 	stw	r17,64(sp)
   16af4:	dfc01315 	stw	ra,76(sp)
   16af8:	dcc01215 	stw	r19,72(sp)
   16afc:	dc801115 	stw	r18,68(sp)
   16b00:	2023883a 	mov	r17,r4
   16b04:	28001c16 	blt	r5,zero,16b78 <__smakebuf_r+0xa4>
   16b08:	d80d883a 	mov	r6,sp
   16b0c:	001ba600 	call	1ba60 <_fstat_r>
   16b10:	10001816 	blt	r2,zero,16b74 <__smakebuf_r+0xa0>
   16b14:	d8800117 	ldw	r2,4(sp)
   16b18:	00e00014 	movui	r3,32768
   16b1c:	10bc000c 	andi	r2,r2,61440
   16b20:	14c80020 	cmpeqi	r19,r2,8192
   16b24:	10c03726 	beq	r2,r3,16c04 <__smakebuf_r+0x130>
   16b28:	80c0030b 	ldhu	r3,12(r16)
   16b2c:	18c20014 	ori	r3,r3,2048
   16b30:	80c0030d 	sth	r3,12(r16)
   16b34:	00c80004 	movi	r3,8192
   16b38:	10c0521e 	bne	r2,r3,16c84 <__smakebuf_r+0x1b0>
   16b3c:	8140038f 	ldh	r5,14(r16)
   16b40:	8809883a 	mov	r4,r17
   16b44:	001babc0 	call	1babc <_isatty_r>
   16b48:	10004c26 	beq	r2,zero,16c7c <__smakebuf_r+0x1a8>
   16b4c:	8080030b 	ldhu	r2,12(r16)
   16b50:	80c010c4 	addi	r3,r16,67
   16b54:	80c00015 	stw	r3,0(r16)
   16b58:	10800054 	ori	r2,r2,1
   16b5c:	8080030d 	sth	r2,12(r16)
   16b60:	00800044 	movi	r2,1
   16b64:	80c00415 	stw	r3,16(r16)
   16b68:	80800515 	stw	r2,20(r16)
   16b6c:	04810004 	movi	r18,1024
   16b70:	00000706 	br	16b90 <__smakebuf_r+0xbc>
   16b74:	8080030b 	ldhu	r2,12(r16)
   16b78:	10c0200c 	andi	r3,r2,128
   16b7c:	18001f1e 	bne	r3,zero,16bfc <__smakebuf_r+0x128>
   16b80:	04810004 	movi	r18,1024
   16b84:	10820014 	ori	r2,r2,2048
   16b88:	8080030d 	sth	r2,12(r16)
   16b8c:	0027883a 	mov	r19,zero
   16b90:	900b883a 	mov	r5,r18
   16b94:	8809883a 	mov	r4,r17
   16b98:	000e7340 	call	e734 <_malloc_r>
   16b9c:	10002c26 	beq	r2,zero,16c50 <__smakebuf_r+0x17c>
   16ba0:	80c0030b 	ldhu	r3,12(r16)
   16ba4:	01000074 	movhi	r4,1
   16ba8:	2116f304 	addi	r4,r4,23500
   16bac:	89000f15 	stw	r4,60(r17)
   16bb0:	18c02014 	ori	r3,r3,128
   16bb4:	80c0030d 	sth	r3,12(r16)
   16bb8:	80800015 	stw	r2,0(r16)
   16bbc:	80800415 	stw	r2,16(r16)
   16bc0:	84800515 	stw	r18,20(r16)
   16bc4:	98001a1e 	bne	r19,zero,16c30 <__smakebuf_r+0x15c>
   16bc8:	dfc01317 	ldw	ra,76(sp)
   16bcc:	dcc01217 	ldw	r19,72(sp)
   16bd0:	dc801117 	ldw	r18,68(sp)
   16bd4:	dc401017 	ldw	r17,64(sp)
   16bd8:	dc000f17 	ldw	r16,60(sp)
   16bdc:	dec01404 	addi	sp,sp,80
   16be0:	f800283a 	ret
   16be4:	288010c4 	addi	r2,r5,67
   16be8:	28800015 	stw	r2,0(r5)
   16bec:	28800415 	stw	r2,16(r5)
   16bf0:	00800044 	movi	r2,1
   16bf4:	28800515 	stw	r2,20(r5)
   16bf8:	f800283a 	ret
   16bfc:	04801004 	movi	r18,64
   16c00:	003fe006 	br	16b84 <__alt_data_end+0xfc016b84>
   16c04:	81000a17 	ldw	r4,40(r16)
   16c08:	00c000b4 	movhi	r3,2
   16c0c:	18e1e804 	addi	r3,r3,-30816
   16c10:	20ffc51e 	bne	r4,r3,16b28 <__alt_data_end+0xfc016b28>
   16c14:	8080030b 	ldhu	r2,12(r16)
   16c18:	04810004 	movi	r18,1024
   16c1c:	84801315 	stw	r18,76(r16)
   16c20:	1484b03a 	or	r2,r2,r18
   16c24:	8080030d 	sth	r2,12(r16)
   16c28:	0027883a 	mov	r19,zero
   16c2c:	003fd806 	br	16b90 <__alt_data_end+0xfc016b90>
   16c30:	8140038f 	ldh	r5,14(r16)
   16c34:	8809883a 	mov	r4,r17
   16c38:	001babc0 	call	1babc <_isatty_r>
   16c3c:	103fe226 	beq	r2,zero,16bc8 <__alt_data_end+0xfc016bc8>
   16c40:	8080030b 	ldhu	r2,12(r16)
   16c44:	10800054 	ori	r2,r2,1
   16c48:	8080030d 	sth	r2,12(r16)
   16c4c:	003fde06 	br	16bc8 <__alt_data_end+0xfc016bc8>
   16c50:	8080030b 	ldhu	r2,12(r16)
   16c54:	10c0800c 	andi	r3,r2,512
   16c58:	183fdb1e 	bne	r3,zero,16bc8 <__alt_data_end+0xfc016bc8>
   16c5c:	10800094 	ori	r2,r2,2
   16c60:	80c010c4 	addi	r3,r16,67
   16c64:	8080030d 	sth	r2,12(r16)
   16c68:	00800044 	movi	r2,1
   16c6c:	80c00015 	stw	r3,0(r16)
   16c70:	80c00415 	stw	r3,16(r16)
   16c74:	80800515 	stw	r2,20(r16)
   16c78:	003fd306 	br	16bc8 <__alt_data_end+0xfc016bc8>
   16c7c:	04810004 	movi	r18,1024
   16c80:	003fc306 	br	16b90 <__alt_data_end+0xfc016b90>
   16c84:	0027883a 	mov	r19,zero
   16c88:	04810004 	movi	r18,1024
   16c8c:	003fc006 	br	16b90 <__alt_data_end+0xfc016b90>

00016c90 <memchr>:
   16c90:	208000cc 	andi	r2,r4,3
   16c94:	280f883a 	mov	r7,r5
   16c98:	10003426 	beq	r2,zero,16d6c <memchr+0xdc>
   16c9c:	30bfffc4 	addi	r2,r6,-1
   16ca0:	30001a26 	beq	r6,zero,16d0c <memchr+0x7c>
   16ca4:	20c00003 	ldbu	r3,0(r4)
   16ca8:	29803fcc 	andi	r6,r5,255
   16cac:	30c0051e 	bne	r6,r3,16cc4 <memchr+0x34>
   16cb0:	00001806 	br	16d14 <memchr+0x84>
   16cb4:	10001526 	beq	r2,zero,16d0c <memchr+0x7c>
   16cb8:	20c00003 	ldbu	r3,0(r4)
   16cbc:	10bfffc4 	addi	r2,r2,-1
   16cc0:	30c01426 	beq	r6,r3,16d14 <memchr+0x84>
   16cc4:	21000044 	addi	r4,r4,1
   16cc8:	20c000cc 	andi	r3,r4,3
   16ccc:	183ff91e 	bne	r3,zero,16cb4 <__alt_data_end+0xfc016cb4>
   16cd0:	020000c4 	movi	r8,3
   16cd4:	40801136 	bltu	r8,r2,16d1c <memchr+0x8c>
   16cd8:	10000c26 	beq	r2,zero,16d0c <memchr+0x7c>
   16cdc:	20c00003 	ldbu	r3,0(r4)
   16ce0:	29403fcc 	andi	r5,r5,255
   16ce4:	28c00b26 	beq	r5,r3,16d14 <memchr+0x84>
   16ce8:	20c00044 	addi	r3,r4,1
   16cec:	39803fcc 	andi	r6,r7,255
   16cf0:	2089883a 	add	r4,r4,r2
   16cf4:	00000306 	br	16d04 <memchr+0x74>
   16cf8:	18c00044 	addi	r3,r3,1
   16cfc:	197fffc3 	ldbu	r5,-1(r3)
   16d00:	31400526 	beq	r6,r5,16d18 <memchr+0x88>
   16d04:	1805883a 	mov	r2,r3
   16d08:	20fffb1e 	bne	r4,r3,16cf8 <__alt_data_end+0xfc016cf8>
   16d0c:	0005883a 	mov	r2,zero
   16d10:	f800283a 	ret
   16d14:	2005883a 	mov	r2,r4
   16d18:	f800283a 	ret
   16d1c:	28c03fcc 	andi	r3,r5,255
   16d20:	1812923a 	slli	r9,r3,8
   16d24:	02ffbff4 	movhi	r11,65279
   16d28:	02a02074 	movhi	r10,32897
   16d2c:	48d2b03a 	or	r9,r9,r3
   16d30:	4806943a 	slli	r3,r9,16
   16d34:	5affbfc4 	addi	r11,r11,-257
   16d38:	52a02004 	addi	r10,r10,-32640
   16d3c:	48d2b03a 	or	r9,r9,r3
   16d40:	20c00017 	ldw	r3,0(r4)
   16d44:	48c6f03a 	xor	r3,r9,r3
   16d48:	1acd883a 	add	r6,r3,r11
   16d4c:	00c6303a 	nor	r3,zero,r3
   16d50:	30c6703a 	and	r3,r6,r3
   16d54:	1a86703a 	and	r3,r3,r10
   16d58:	183fe01e 	bne	r3,zero,16cdc <__alt_data_end+0xfc016cdc>
   16d5c:	10bfff04 	addi	r2,r2,-4
   16d60:	21000104 	addi	r4,r4,4
   16d64:	40bff636 	bltu	r8,r2,16d40 <__alt_data_end+0xfc016d40>
   16d68:	003fdb06 	br	16cd8 <__alt_data_end+0xfc016cd8>
   16d6c:	3005883a 	mov	r2,r6
   16d70:	003fd706 	br	16cd0 <__alt_data_end+0xfc016cd0>

00016d74 <memmove>:
   16d74:	2005883a 	mov	r2,r4
   16d78:	29000b2e 	bgeu	r5,r4,16da8 <memmove+0x34>
   16d7c:	298f883a 	add	r7,r5,r6
   16d80:	21c0092e 	bgeu	r4,r7,16da8 <memmove+0x34>
   16d84:	2187883a 	add	r3,r4,r6
   16d88:	198bc83a 	sub	r5,r3,r6
   16d8c:	30004826 	beq	r6,zero,16eb0 <memmove+0x13c>
   16d90:	39ffffc4 	addi	r7,r7,-1
   16d94:	39000003 	ldbu	r4,0(r7)
   16d98:	18ffffc4 	addi	r3,r3,-1
   16d9c:	19000005 	stb	r4,0(r3)
   16da0:	28fffb1e 	bne	r5,r3,16d90 <__alt_data_end+0xfc016d90>
   16da4:	f800283a 	ret
   16da8:	00c003c4 	movi	r3,15
   16dac:	1980412e 	bgeu	r3,r6,16eb4 <memmove+0x140>
   16db0:	2886b03a 	or	r3,r5,r2
   16db4:	18c000cc 	andi	r3,r3,3
   16db8:	1800401e 	bne	r3,zero,16ebc <memmove+0x148>
   16dbc:	33fffc04 	addi	r15,r6,-16
   16dc0:	781ed13a 	srli	r15,r15,4
   16dc4:	28c00104 	addi	r3,r5,4
   16dc8:	13400104 	addi	r13,r2,4
   16dcc:	781c913a 	slli	r14,r15,4
   16dd0:	2b000204 	addi	r12,r5,8
   16dd4:	12c00204 	addi	r11,r2,8
   16dd8:	73800504 	addi	r14,r14,20
   16ddc:	2a800304 	addi	r10,r5,12
   16de0:	12400304 	addi	r9,r2,12
   16de4:	2b9d883a 	add	r14,r5,r14
   16de8:	2811883a 	mov	r8,r5
   16dec:	100f883a 	mov	r7,r2
   16df0:	41000017 	ldw	r4,0(r8)
   16df4:	39c00404 	addi	r7,r7,16
   16df8:	18c00404 	addi	r3,r3,16
   16dfc:	393ffc15 	stw	r4,-16(r7)
   16e00:	193ffc17 	ldw	r4,-16(r3)
   16e04:	6b400404 	addi	r13,r13,16
   16e08:	5ac00404 	addi	r11,r11,16
   16e0c:	693ffc15 	stw	r4,-16(r13)
   16e10:	61000017 	ldw	r4,0(r12)
   16e14:	4a400404 	addi	r9,r9,16
   16e18:	42000404 	addi	r8,r8,16
   16e1c:	593ffc15 	stw	r4,-16(r11)
   16e20:	51000017 	ldw	r4,0(r10)
   16e24:	63000404 	addi	r12,r12,16
   16e28:	52800404 	addi	r10,r10,16
   16e2c:	493ffc15 	stw	r4,-16(r9)
   16e30:	1bbfef1e 	bne	r3,r14,16df0 <__alt_data_end+0xfc016df0>
   16e34:	79000044 	addi	r4,r15,1
   16e38:	2008913a 	slli	r4,r4,4
   16e3c:	328003cc 	andi	r10,r6,15
   16e40:	02c000c4 	movi	r11,3
   16e44:	1107883a 	add	r3,r2,r4
   16e48:	290b883a 	add	r5,r5,r4
   16e4c:	5a801e2e 	bgeu	r11,r10,16ec8 <memmove+0x154>
   16e50:	1813883a 	mov	r9,r3
   16e54:	2811883a 	mov	r8,r5
   16e58:	500f883a 	mov	r7,r10
   16e5c:	41000017 	ldw	r4,0(r8)
   16e60:	4a400104 	addi	r9,r9,4
   16e64:	39ffff04 	addi	r7,r7,-4
   16e68:	493fff15 	stw	r4,-4(r9)
   16e6c:	42000104 	addi	r8,r8,4
   16e70:	59fffa36 	bltu	r11,r7,16e5c <__alt_data_end+0xfc016e5c>
   16e74:	513fff04 	addi	r4,r10,-4
   16e78:	2008d0ba 	srli	r4,r4,2
   16e7c:	318000cc 	andi	r6,r6,3
   16e80:	21000044 	addi	r4,r4,1
   16e84:	2109883a 	add	r4,r4,r4
   16e88:	2109883a 	add	r4,r4,r4
   16e8c:	1907883a 	add	r3,r3,r4
   16e90:	290b883a 	add	r5,r5,r4
   16e94:	30000b26 	beq	r6,zero,16ec4 <memmove+0x150>
   16e98:	198d883a 	add	r6,r3,r6
   16e9c:	29c00003 	ldbu	r7,0(r5)
   16ea0:	18c00044 	addi	r3,r3,1
   16ea4:	29400044 	addi	r5,r5,1
   16ea8:	19ffffc5 	stb	r7,-1(r3)
   16eac:	19bffb1e 	bne	r3,r6,16e9c <__alt_data_end+0xfc016e9c>
   16eb0:	f800283a 	ret
   16eb4:	1007883a 	mov	r3,r2
   16eb8:	003ff606 	br	16e94 <__alt_data_end+0xfc016e94>
   16ebc:	1007883a 	mov	r3,r2
   16ec0:	003ff506 	br	16e98 <__alt_data_end+0xfc016e98>
   16ec4:	f800283a 	ret
   16ec8:	500d883a 	mov	r6,r10
   16ecc:	003ff106 	br	16e94 <__alt_data_end+0xfc016e94>

00016ed0 <_Balloc>:
   16ed0:	20801317 	ldw	r2,76(r4)
   16ed4:	defffc04 	addi	sp,sp,-16
   16ed8:	dc400115 	stw	r17,4(sp)
   16edc:	dc000015 	stw	r16,0(sp)
   16ee0:	dfc00315 	stw	ra,12(sp)
   16ee4:	dc800215 	stw	r18,8(sp)
   16ee8:	2023883a 	mov	r17,r4
   16eec:	2821883a 	mov	r16,r5
   16ef0:	10000f26 	beq	r2,zero,16f30 <_Balloc+0x60>
   16ef4:	8407883a 	add	r3,r16,r16
   16ef8:	18c7883a 	add	r3,r3,r3
   16efc:	10c7883a 	add	r3,r2,r3
   16f00:	18800017 	ldw	r2,0(r3)
   16f04:	10001126 	beq	r2,zero,16f4c <_Balloc+0x7c>
   16f08:	11000017 	ldw	r4,0(r2)
   16f0c:	19000015 	stw	r4,0(r3)
   16f10:	10000415 	stw	zero,16(r2)
   16f14:	10000315 	stw	zero,12(r2)
   16f18:	dfc00317 	ldw	ra,12(sp)
   16f1c:	dc800217 	ldw	r18,8(sp)
   16f20:	dc400117 	ldw	r17,4(sp)
   16f24:	dc000017 	ldw	r16,0(sp)
   16f28:	dec00404 	addi	sp,sp,16
   16f2c:	f800283a 	ret
   16f30:	01800844 	movi	r6,33
   16f34:	01400104 	movi	r5,4
   16f38:	001b6780 	call	1b678 <_calloc_r>
   16f3c:	88801315 	stw	r2,76(r17)
   16f40:	103fec1e 	bne	r2,zero,16ef4 <__alt_data_end+0xfc016ef4>
   16f44:	0005883a 	mov	r2,zero
   16f48:	003ff306 	br	16f18 <__alt_data_end+0xfc016f18>
   16f4c:	01400044 	movi	r5,1
   16f50:	2c24983a 	sll	r18,r5,r16
   16f54:	8809883a 	mov	r4,r17
   16f58:	91800144 	addi	r6,r18,5
   16f5c:	318d883a 	add	r6,r6,r6
   16f60:	318d883a 	add	r6,r6,r6
   16f64:	001b6780 	call	1b678 <_calloc_r>
   16f68:	103ff626 	beq	r2,zero,16f44 <__alt_data_end+0xfc016f44>
   16f6c:	14000115 	stw	r16,4(r2)
   16f70:	14800215 	stw	r18,8(r2)
   16f74:	003fe606 	br	16f10 <__alt_data_end+0xfc016f10>

00016f78 <_Bfree>:
   16f78:	28000826 	beq	r5,zero,16f9c <_Bfree+0x24>
   16f7c:	28c00117 	ldw	r3,4(r5)
   16f80:	20801317 	ldw	r2,76(r4)
   16f84:	18c7883a 	add	r3,r3,r3
   16f88:	18c7883a 	add	r3,r3,r3
   16f8c:	10c5883a 	add	r2,r2,r3
   16f90:	10c00017 	ldw	r3,0(r2)
   16f94:	28c00015 	stw	r3,0(r5)
   16f98:	11400015 	stw	r5,0(r2)
   16f9c:	f800283a 	ret

00016fa0 <__multadd>:
   16fa0:	defff704 	addi	sp,sp,-36
   16fa4:	dc800215 	stw	r18,8(sp)
   16fa8:	2c800417 	ldw	r18,16(r5)
   16fac:	dd800615 	stw	r22,24(sp)
   16fb0:	dd400515 	stw	r21,20(sp)
   16fb4:	dd000415 	stw	r20,16(sp)
   16fb8:	dcc00315 	stw	r19,12(sp)
   16fbc:	dc400115 	stw	r17,4(sp)
   16fc0:	dc000015 	stw	r16,0(sp)
   16fc4:	dfc00815 	stw	ra,32(sp)
   16fc8:	ddc00715 	stw	r23,28(sp)
   16fcc:	2827883a 	mov	r19,r5
   16fd0:	2029883a 	mov	r20,r4
   16fd4:	3023883a 	mov	r17,r6
   16fd8:	3821883a 	mov	r16,r7
   16fdc:	2d400504 	addi	r21,r5,20
   16fe0:	002d883a 	mov	r22,zero
   16fe4:	adc00017 	ldw	r23,0(r21)
   16fe8:	880b883a 	mov	r5,r17
   16fec:	ad400104 	addi	r21,r21,4
   16ff0:	b93fffcc 	andi	r4,r23,65535
   16ff4:	000d18c0 	call	d18c <__mulsi3>
   16ff8:	b808d43a 	srli	r4,r23,16
   16ffc:	880b883a 	mov	r5,r17
   17000:	1421883a 	add	r16,r2,r16
   17004:	000d18c0 	call	d18c <__mulsi3>
   17008:	800ed43a 	srli	r7,r16,16
   1700c:	80ffffcc 	andi	r3,r16,65535
   17010:	b5800044 	addi	r22,r22,1
   17014:	11c5883a 	add	r2,r2,r7
   17018:	100e943a 	slli	r7,r2,16
   1701c:	1020d43a 	srli	r16,r2,16
   17020:	38c7883a 	add	r3,r7,r3
   17024:	a8ffff15 	stw	r3,-4(r21)
   17028:	b4bfee16 	blt	r22,r18,16fe4 <__alt_data_end+0xfc016fe4>
   1702c:	80000926 	beq	r16,zero,17054 <__multadd+0xb4>
   17030:	98800217 	ldw	r2,8(r19)
   17034:	9080130e 	bge	r18,r2,17084 <__multadd+0xe4>
   17038:	90800144 	addi	r2,r18,5
   1703c:	1085883a 	add	r2,r2,r2
   17040:	1085883a 	add	r2,r2,r2
   17044:	9885883a 	add	r2,r19,r2
   17048:	14000015 	stw	r16,0(r2)
   1704c:	94800044 	addi	r18,r18,1
   17050:	9c800415 	stw	r18,16(r19)
   17054:	9805883a 	mov	r2,r19
   17058:	dfc00817 	ldw	ra,32(sp)
   1705c:	ddc00717 	ldw	r23,28(sp)
   17060:	dd800617 	ldw	r22,24(sp)
   17064:	dd400517 	ldw	r21,20(sp)
   17068:	dd000417 	ldw	r20,16(sp)
   1706c:	dcc00317 	ldw	r19,12(sp)
   17070:	dc800217 	ldw	r18,8(sp)
   17074:	dc400117 	ldw	r17,4(sp)
   17078:	dc000017 	ldw	r16,0(sp)
   1707c:	dec00904 	addi	sp,sp,36
   17080:	f800283a 	ret
   17084:	99400117 	ldw	r5,4(r19)
   17088:	a009883a 	mov	r4,r20
   1708c:	29400044 	addi	r5,r5,1
   17090:	0016ed00 	call	16ed0 <_Balloc>
   17094:	99800417 	ldw	r6,16(r19)
   17098:	99400304 	addi	r5,r19,12
   1709c:	11000304 	addi	r4,r2,12
   170a0:	31800084 	addi	r6,r6,2
   170a4:	318d883a 	add	r6,r6,r6
   170a8:	318d883a 	add	r6,r6,r6
   170ac:	1023883a 	mov	r17,r2
   170b0:	000ef400 	call	ef40 <memcpy>
   170b4:	98000a26 	beq	r19,zero,170e0 <__multadd+0x140>
   170b8:	98c00117 	ldw	r3,4(r19)
   170bc:	a0801317 	ldw	r2,76(r20)
   170c0:	18c7883a 	add	r3,r3,r3
   170c4:	18c7883a 	add	r3,r3,r3
   170c8:	10c5883a 	add	r2,r2,r3
   170cc:	10c00017 	ldw	r3,0(r2)
   170d0:	98c00015 	stw	r3,0(r19)
   170d4:	14c00015 	stw	r19,0(r2)
   170d8:	8827883a 	mov	r19,r17
   170dc:	003fd606 	br	17038 <__alt_data_end+0xfc017038>
   170e0:	8827883a 	mov	r19,r17
   170e4:	003fd406 	br	17038 <__alt_data_end+0xfc017038>

000170e8 <__s2b>:
   170e8:	defff904 	addi	sp,sp,-28
   170ec:	dc400115 	stw	r17,4(sp)
   170f0:	dc000015 	stw	r16,0(sp)
   170f4:	2023883a 	mov	r17,r4
   170f8:	2821883a 	mov	r16,r5
   170fc:	39000204 	addi	r4,r7,8
   17100:	01400244 	movi	r5,9
   17104:	dcc00315 	stw	r19,12(sp)
   17108:	dc800215 	stw	r18,8(sp)
   1710c:	dfc00615 	stw	ra,24(sp)
   17110:	dd400515 	stw	r21,20(sp)
   17114:	dd000415 	stw	r20,16(sp)
   17118:	3825883a 	mov	r18,r7
   1711c:	3027883a 	mov	r19,r6
   17120:	000cfd80 	call	cfd8 <__divsi3>
   17124:	00c00044 	movi	r3,1
   17128:	000b883a 	mov	r5,zero
   1712c:	1880030e 	bge	r3,r2,1713c <__s2b+0x54>
   17130:	18c7883a 	add	r3,r3,r3
   17134:	29400044 	addi	r5,r5,1
   17138:	18bffd16 	blt	r3,r2,17130 <__alt_data_end+0xfc017130>
   1713c:	8809883a 	mov	r4,r17
   17140:	0016ed00 	call	16ed0 <_Balloc>
   17144:	d8c00717 	ldw	r3,28(sp)
   17148:	10c00515 	stw	r3,20(r2)
   1714c:	00c00044 	movi	r3,1
   17150:	10c00415 	stw	r3,16(r2)
   17154:	00c00244 	movi	r3,9
   17158:	1cc0210e 	bge	r3,r19,171e0 <__s2b+0xf8>
   1715c:	80eb883a 	add	r21,r16,r3
   17160:	a829883a 	mov	r20,r21
   17164:	84e1883a 	add	r16,r16,r19
   17168:	a1c00007 	ldb	r7,0(r20)
   1716c:	01800284 	movi	r6,10
   17170:	a5000044 	addi	r20,r20,1
   17174:	100b883a 	mov	r5,r2
   17178:	39fff404 	addi	r7,r7,-48
   1717c:	8809883a 	mov	r4,r17
   17180:	0016fa00 	call	16fa0 <__multadd>
   17184:	a43ff81e 	bne	r20,r16,17168 <__alt_data_end+0xfc017168>
   17188:	ace1883a 	add	r16,r21,r19
   1718c:	843ffe04 	addi	r16,r16,-8
   17190:	9c800a0e 	bge	r19,r18,171bc <__s2b+0xd4>
   17194:	94e5c83a 	sub	r18,r18,r19
   17198:	84a5883a 	add	r18,r16,r18
   1719c:	81c00007 	ldb	r7,0(r16)
   171a0:	01800284 	movi	r6,10
   171a4:	84000044 	addi	r16,r16,1
   171a8:	100b883a 	mov	r5,r2
   171ac:	39fff404 	addi	r7,r7,-48
   171b0:	8809883a 	mov	r4,r17
   171b4:	0016fa00 	call	16fa0 <__multadd>
   171b8:	84bff81e 	bne	r16,r18,1719c <__alt_data_end+0xfc01719c>
   171bc:	dfc00617 	ldw	ra,24(sp)
   171c0:	dd400517 	ldw	r21,20(sp)
   171c4:	dd000417 	ldw	r20,16(sp)
   171c8:	dcc00317 	ldw	r19,12(sp)
   171cc:	dc800217 	ldw	r18,8(sp)
   171d0:	dc400117 	ldw	r17,4(sp)
   171d4:	dc000017 	ldw	r16,0(sp)
   171d8:	dec00704 	addi	sp,sp,28
   171dc:	f800283a 	ret
   171e0:	84000284 	addi	r16,r16,10
   171e4:	1827883a 	mov	r19,r3
   171e8:	003fe906 	br	17190 <__alt_data_end+0xfc017190>

000171ec <__hi0bits>:
   171ec:	20bfffec 	andhi	r2,r4,65535
   171f0:	1000141e 	bne	r2,zero,17244 <__hi0bits+0x58>
   171f4:	2008943a 	slli	r4,r4,16
   171f8:	00800404 	movi	r2,16
   171fc:	20ffc02c 	andhi	r3,r4,65280
   17200:	1800021e 	bne	r3,zero,1720c <__hi0bits+0x20>
   17204:	2008923a 	slli	r4,r4,8
   17208:	10800204 	addi	r2,r2,8
   1720c:	20fc002c 	andhi	r3,r4,61440
   17210:	1800021e 	bne	r3,zero,1721c <__hi0bits+0x30>
   17214:	2008913a 	slli	r4,r4,4
   17218:	10800104 	addi	r2,r2,4
   1721c:	20f0002c 	andhi	r3,r4,49152
   17220:	1800031e 	bne	r3,zero,17230 <__hi0bits+0x44>
   17224:	2109883a 	add	r4,r4,r4
   17228:	10800084 	addi	r2,r2,2
   1722c:	2109883a 	add	r4,r4,r4
   17230:	20000316 	blt	r4,zero,17240 <__hi0bits+0x54>
   17234:	2110002c 	andhi	r4,r4,16384
   17238:	2000041e 	bne	r4,zero,1724c <__hi0bits+0x60>
   1723c:	00800804 	movi	r2,32
   17240:	f800283a 	ret
   17244:	0005883a 	mov	r2,zero
   17248:	003fec06 	br	171fc <__alt_data_end+0xfc0171fc>
   1724c:	10800044 	addi	r2,r2,1
   17250:	f800283a 	ret

00017254 <__lo0bits>:
   17254:	20c00017 	ldw	r3,0(r4)
   17258:	188001cc 	andi	r2,r3,7
   1725c:	10000826 	beq	r2,zero,17280 <__lo0bits+0x2c>
   17260:	1880004c 	andi	r2,r3,1
   17264:	1000211e 	bne	r2,zero,172ec <__lo0bits+0x98>
   17268:	1880008c 	andi	r2,r3,2
   1726c:	1000211e 	bne	r2,zero,172f4 <__lo0bits+0xa0>
   17270:	1806d0ba 	srli	r3,r3,2
   17274:	00800084 	movi	r2,2
   17278:	20c00015 	stw	r3,0(r4)
   1727c:	f800283a 	ret
   17280:	18bfffcc 	andi	r2,r3,65535
   17284:	10001326 	beq	r2,zero,172d4 <__lo0bits+0x80>
   17288:	0005883a 	mov	r2,zero
   1728c:	19403fcc 	andi	r5,r3,255
   17290:	2800021e 	bne	r5,zero,1729c <__lo0bits+0x48>
   17294:	1806d23a 	srli	r3,r3,8
   17298:	10800204 	addi	r2,r2,8
   1729c:	194003cc 	andi	r5,r3,15
   172a0:	2800021e 	bne	r5,zero,172ac <__lo0bits+0x58>
   172a4:	1806d13a 	srli	r3,r3,4
   172a8:	10800104 	addi	r2,r2,4
   172ac:	194000cc 	andi	r5,r3,3
   172b0:	2800021e 	bne	r5,zero,172bc <__lo0bits+0x68>
   172b4:	1806d0ba 	srli	r3,r3,2
   172b8:	10800084 	addi	r2,r2,2
   172bc:	1940004c 	andi	r5,r3,1
   172c0:	2800081e 	bne	r5,zero,172e4 <__lo0bits+0x90>
   172c4:	1806d07a 	srli	r3,r3,1
   172c8:	1800051e 	bne	r3,zero,172e0 <__lo0bits+0x8c>
   172cc:	00800804 	movi	r2,32
   172d0:	f800283a 	ret
   172d4:	1806d43a 	srli	r3,r3,16
   172d8:	00800404 	movi	r2,16
   172dc:	003feb06 	br	1728c <__alt_data_end+0xfc01728c>
   172e0:	10800044 	addi	r2,r2,1
   172e4:	20c00015 	stw	r3,0(r4)
   172e8:	f800283a 	ret
   172ec:	0005883a 	mov	r2,zero
   172f0:	f800283a 	ret
   172f4:	1806d07a 	srli	r3,r3,1
   172f8:	00800044 	movi	r2,1
   172fc:	20c00015 	stw	r3,0(r4)
   17300:	f800283a 	ret

00017304 <__i2b>:
   17304:	defffd04 	addi	sp,sp,-12
   17308:	dc000015 	stw	r16,0(sp)
   1730c:	04000044 	movi	r16,1
   17310:	dc400115 	stw	r17,4(sp)
   17314:	2823883a 	mov	r17,r5
   17318:	800b883a 	mov	r5,r16
   1731c:	dfc00215 	stw	ra,8(sp)
   17320:	0016ed00 	call	16ed0 <_Balloc>
   17324:	14400515 	stw	r17,20(r2)
   17328:	14000415 	stw	r16,16(r2)
   1732c:	dfc00217 	ldw	ra,8(sp)
   17330:	dc400117 	ldw	r17,4(sp)
   17334:	dc000017 	ldw	r16,0(sp)
   17338:	dec00304 	addi	sp,sp,12
   1733c:	f800283a 	ret

00017340 <__multiply>:
   17340:	deffef04 	addi	sp,sp,-68
   17344:	dc400815 	stw	r17,32(sp)
   17348:	dc000715 	stw	r16,28(sp)
   1734c:	34400417 	ldw	r17,16(r6)
   17350:	2c000417 	ldw	r16,16(r5)
   17354:	dd800d15 	stw	r22,52(sp)
   17358:	dc800915 	stw	r18,36(sp)
   1735c:	dfc01015 	stw	ra,64(sp)
   17360:	df000f15 	stw	fp,60(sp)
   17364:	ddc00e15 	stw	r23,56(sp)
   17368:	dd400c15 	stw	r21,48(sp)
   1736c:	dd000b15 	stw	r20,44(sp)
   17370:	dcc00a15 	stw	r19,40(sp)
   17374:	2825883a 	mov	r18,r5
   17378:	302d883a 	mov	r22,r6
   1737c:	8440050e 	bge	r16,r17,17394 <__multiply+0x54>
   17380:	8007883a 	mov	r3,r16
   17384:	3025883a 	mov	r18,r6
   17388:	8821883a 	mov	r16,r17
   1738c:	282d883a 	mov	r22,r5
   17390:	1823883a 	mov	r17,r3
   17394:	90800217 	ldw	r2,8(r18)
   17398:	8447883a 	add	r3,r16,r17
   1739c:	d8c00215 	stw	r3,8(sp)
   173a0:	91400117 	ldw	r5,4(r18)
   173a4:	10c0010e 	bge	r2,r3,173ac <__multiply+0x6c>
   173a8:	29400044 	addi	r5,r5,1
   173ac:	0016ed00 	call	16ed0 <_Balloc>
   173b0:	d8c00217 	ldw	r3,8(sp)
   173b4:	d8800615 	stw	r2,24(sp)
   173b8:	18eb883a 	add	r21,r3,r3
   173bc:	ad6b883a 	add	r21,r21,r21
   173c0:	10c00504 	addi	r3,r2,20
   173c4:	1d6b883a 	add	r21,r3,r21
   173c8:	d8c00115 	stw	r3,4(sp)
   173cc:	dd400315 	stw	r21,12(sp)
   173d0:	1805883a 	mov	r2,r3
   173d4:	1d40042e 	bgeu	r3,r21,173e8 <__multiply+0xa8>
   173d8:	d8c00317 	ldw	r3,12(sp)
   173dc:	10000015 	stw	zero,0(r2)
   173e0:	10800104 	addi	r2,r2,4
   173e4:	10fffc36 	bltu	r2,r3,173d8 <__alt_data_end+0xfc0173d8>
   173e8:	8c63883a 	add	r17,r17,r17
   173ec:	b5800504 	addi	r22,r22,20
   173f0:	8c63883a 	add	r17,r17,r17
   173f4:	94800504 	addi	r18,r18,20
   173f8:	8421883a 	add	r16,r16,r16
   173fc:	b463883a 	add	r17,r22,r17
   17400:	8421883a 	add	r16,r16,r16
   17404:	dd800015 	stw	r22,0(sp)
   17408:	dc800415 	stw	r18,16(sp)
   1740c:	dc400515 	stw	r17,20(sp)
   17410:	9429883a 	add	r20,r18,r16
   17414:	b4404f2e 	bgeu	r22,r17,17554 <__multiply+0x214>
   17418:	d8c00017 	ldw	r3,0(sp)
   1741c:	1c800017 	ldw	r18,0(r3)
   17420:	947fffcc 	andi	r17,r18,65535
   17424:	88001e26 	beq	r17,zero,174a0 <__multiply+0x160>
   17428:	dd800117 	ldw	r22,4(sp)
   1742c:	dd400417 	ldw	r21,16(sp)
   17430:	0027883a 	mov	r19,zero
   17434:	ac800017 	ldw	r18,0(r21)
   17438:	b4000017 	ldw	r16,0(r22)
   1743c:	880b883a 	mov	r5,r17
   17440:	913fffcc 	andi	r4,r18,65535
   17444:	000d18c0 	call	d18c <__mulsi3>
   17448:	9008d43a 	srli	r4,r18,16
   1744c:	84bfffcc 	andi	r18,r16,65535
   17450:	1485883a 	add	r2,r2,r18
   17454:	14e5883a 	add	r18,r2,r19
   17458:	8020d43a 	srli	r16,r16,16
   1745c:	9026d43a 	srli	r19,r18,16
   17460:	880b883a 	mov	r5,r17
   17464:	000d18c0 	call	d18c <__mulsi3>
   17468:	1405883a 	add	r2,r2,r16
   1746c:	14e1883a 	add	r16,r2,r19
   17470:	90ffffcc 	andi	r3,r18,65535
   17474:	8024943a 	slli	r18,r16,16
   17478:	ad400104 	addi	r21,r21,4
   1747c:	b005883a 	mov	r2,r22
   17480:	90c6b03a 	or	r3,r18,r3
   17484:	b0c00015 	stw	r3,0(r22)
   17488:	8026d43a 	srli	r19,r16,16
   1748c:	b5800104 	addi	r22,r22,4
   17490:	ad3fe836 	bltu	r21,r20,17434 <__alt_data_end+0xfc017434>
   17494:	d8c00017 	ldw	r3,0(sp)
   17498:	14c00115 	stw	r19,4(r2)
   1749c:	1c800017 	ldw	r18,0(r3)
   174a0:	9024d43a 	srli	r18,r18,16
   174a4:	90002226 	beq	r18,zero,17530 <__multiply+0x1f0>
   174a8:	d8c00117 	ldw	r3,4(sp)
   174ac:	dd800417 	ldw	r22,16(sp)
   174b0:	002f883a 	mov	r23,zero
   174b4:	1f000017 	ldw	fp,0(r3)
   174b8:	1823883a 	mov	r17,r3
   174bc:	182b883a 	mov	r21,r3
   174c0:	e021883a 	mov	r16,fp
   174c4:	00000106 	br	174cc <__multiply+0x18c>
   174c8:	982b883a 	mov	r21,r19
   174cc:	b100000b 	ldhu	r4,0(r22)
   174d0:	8020d43a 	srli	r16,r16,16
   174d4:	900b883a 	mov	r5,r18
   174d8:	000d18c0 	call	d18c <__mulsi3>
   174dc:	1405883a 	add	r2,r2,r16
   174e0:	15ef883a 	add	r23,r2,r23
   174e4:	b804943a 	slli	r2,r23,16
   174e8:	e0ffffcc 	andi	r3,fp,65535
   174ec:	8c400104 	addi	r17,r17,4
   174f0:	10c6b03a 	or	r3,r2,r3
   174f4:	88ffff15 	stw	r3,-4(r17)
   174f8:	b5800104 	addi	r22,r22,4
   174fc:	b13fff17 	ldw	r4,-4(r22)
   17500:	acc00104 	addi	r19,r21,4
   17504:	900b883a 	mov	r5,r18
   17508:	2008d43a 	srli	r4,r4,16
   1750c:	9c000017 	ldw	r16,0(r19)
   17510:	000d18c0 	call	d18c <__mulsi3>
   17514:	b806d43a 	srli	r3,r23,16
   17518:	813fffcc 	andi	r4,r16,65535
   1751c:	1105883a 	add	r2,r2,r4
   17520:	10f9883a 	add	fp,r2,r3
   17524:	e02ed43a 	srli	r23,fp,16
   17528:	b53fe736 	bltu	r22,r20,174c8 <__alt_data_end+0xfc0174c8>
   1752c:	af000115 	stw	fp,4(r21)
   17530:	d8c00017 	ldw	r3,0(sp)
   17534:	d9000517 	ldw	r4,20(sp)
   17538:	18c00104 	addi	r3,r3,4
   1753c:	d8c00015 	stw	r3,0(sp)
   17540:	d8c00117 	ldw	r3,4(sp)
   17544:	18c00104 	addi	r3,r3,4
   17548:	d8c00115 	stw	r3,4(sp)
   1754c:	d8c00017 	ldw	r3,0(sp)
   17550:	193fb136 	bltu	r3,r4,17418 <__alt_data_end+0xfc017418>
   17554:	d8c00217 	ldw	r3,8(sp)
   17558:	00c00c0e 	bge	zero,r3,1758c <__multiply+0x24c>
   1755c:	d8c00317 	ldw	r3,12(sp)
   17560:	18bfff17 	ldw	r2,-4(r3)
   17564:	1d7fff04 	addi	r21,r3,-4
   17568:	10000326 	beq	r2,zero,17578 <__multiply+0x238>
   1756c:	00000706 	br	1758c <__multiply+0x24c>
   17570:	a8800017 	ldw	r2,0(r21)
   17574:	1000051e 	bne	r2,zero,1758c <__multiply+0x24c>
   17578:	d8c00217 	ldw	r3,8(sp)
   1757c:	ad7fff04 	addi	r21,r21,-4
   17580:	18ffffc4 	addi	r3,r3,-1
   17584:	d8c00215 	stw	r3,8(sp)
   17588:	183ff91e 	bne	r3,zero,17570 <__alt_data_end+0xfc017570>
   1758c:	d8c00617 	ldw	r3,24(sp)
   17590:	d9000217 	ldw	r4,8(sp)
   17594:	1805883a 	mov	r2,r3
   17598:	19000415 	stw	r4,16(r3)
   1759c:	dfc01017 	ldw	ra,64(sp)
   175a0:	df000f17 	ldw	fp,60(sp)
   175a4:	ddc00e17 	ldw	r23,56(sp)
   175a8:	dd800d17 	ldw	r22,52(sp)
   175ac:	dd400c17 	ldw	r21,48(sp)
   175b0:	dd000b17 	ldw	r20,44(sp)
   175b4:	dcc00a17 	ldw	r19,40(sp)
   175b8:	dc800917 	ldw	r18,36(sp)
   175bc:	dc400817 	ldw	r17,32(sp)
   175c0:	dc000717 	ldw	r16,28(sp)
   175c4:	dec01104 	addi	sp,sp,68
   175c8:	f800283a 	ret

000175cc <__pow5mult>:
   175cc:	defffa04 	addi	sp,sp,-24
   175d0:	dcc00315 	stw	r19,12(sp)
   175d4:	dc000015 	stw	r16,0(sp)
   175d8:	dfc00515 	stw	ra,20(sp)
   175dc:	dd000415 	stw	r20,16(sp)
   175e0:	dc800215 	stw	r18,8(sp)
   175e4:	dc400115 	stw	r17,4(sp)
   175e8:	308000cc 	andi	r2,r6,3
   175ec:	3021883a 	mov	r16,r6
   175f0:	2027883a 	mov	r19,r4
   175f4:	10002f1e 	bne	r2,zero,176b4 <__pow5mult+0xe8>
   175f8:	2825883a 	mov	r18,r5
   175fc:	8021d0ba 	srai	r16,r16,2
   17600:	80001a26 	beq	r16,zero,1766c <__pow5mult+0xa0>
   17604:	9c401217 	ldw	r17,72(r19)
   17608:	8800061e 	bne	r17,zero,17624 <__pow5mult+0x58>
   1760c:	00003406 	br	176e0 <__pow5mult+0x114>
   17610:	8021d07a 	srai	r16,r16,1
   17614:	80001526 	beq	r16,zero,1766c <__pow5mult+0xa0>
   17618:	88800017 	ldw	r2,0(r17)
   1761c:	10001c26 	beq	r2,zero,17690 <__pow5mult+0xc4>
   17620:	1023883a 	mov	r17,r2
   17624:	8080004c 	andi	r2,r16,1
   17628:	103ff926 	beq	r2,zero,17610 <__alt_data_end+0xfc017610>
   1762c:	880d883a 	mov	r6,r17
   17630:	900b883a 	mov	r5,r18
   17634:	9809883a 	mov	r4,r19
   17638:	00173400 	call	17340 <__multiply>
   1763c:	90001b26 	beq	r18,zero,176ac <__pow5mult+0xe0>
   17640:	91000117 	ldw	r4,4(r18)
   17644:	98c01317 	ldw	r3,76(r19)
   17648:	8021d07a 	srai	r16,r16,1
   1764c:	2109883a 	add	r4,r4,r4
   17650:	2109883a 	add	r4,r4,r4
   17654:	1907883a 	add	r3,r3,r4
   17658:	19000017 	ldw	r4,0(r3)
   1765c:	91000015 	stw	r4,0(r18)
   17660:	1c800015 	stw	r18,0(r3)
   17664:	1025883a 	mov	r18,r2
   17668:	803feb1e 	bne	r16,zero,17618 <__alt_data_end+0xfc017618>
   1766c:	9005883a 	mov	r2,r18
   17670:	dfc00517 	ldw	ra,20(sp)
   17674:	dd000417 	ldw	r20,16(sp)
   17678:	dcc00317 	ldw	r19,12(sp)
   1767c:	dc800217 	ldw	r18,8(sp)
   17680:	dc400117 	ldw	r17,4(sp)
   17684:	dc000017 	ldw	r16,0(sp)
   17688:	dec00604 	addi	sp,sp,24
   1768c:	f800283a 	ret
   17690:	880d883a 	mov	r6,r17
   17694:	880b883a 	mov	r5,r17
   17698:	9809883a 	mov	r4,r19
   1769c:	00173400 	call	17340 <__multiply>
   176a0:	88800015 	stw	r2,0(r17)
   176a4:	10000015 	stw	zero,0(r2)
   176a8:	003fdd06 	br	17620 <__alt_data_end+0xfc017620>
   176ac:	1025883a 	mov	r18,r2
   176b0:	003fd706 	br	17610 <__alt_data_end+0xfc017610>
   176b4:	10bfffc4 	addi	r2,r2,-1
   176b8:	1085883a 	add	r2,r2,r2
   176bc:	00c000f4 	movhi	r3,3
   176c0:	18eb7004 	addi	r3,r3,-21056
   176c4:	1085883a 	add	r2,r2,r2
   176c8:	1885883a 	add	r2,r3,r2
   176cc:	11800017 	ldw	r6,0(r2)
   176d0:	000f883a 	mov	r7,zero
   176d4:	0016fa00 	call	16fa0 <__multadd>
   176d8:	1025883a 	mov	r18,r2
   176dc:	003fc706 	br	175fc <__alt_data_end+0xfc0175fc>
   176e0:	05000044 	movi	r20,1
   176e4:	a00b883a 	mov	r5,r20
   176e8:	9809883a 	mov	r4,r19
   176ec:	0016ed00 	call	16ed0 <_Balloc>
   176f0:	1023883a 	mov	r17,r2
   176f4:	00809c44 	movi	r2,625
   176f8:	88800515 	stw	r2,20(r17)
   176fc:	8d000415 	stw	r20,16(r17)
   17700:	9c401215 	stw	r17,72(r19)
   17704:	88000015 	stw	zero,0(r17)
   17708:	003fc606 	br	17624 <__alt_data_end+0xfc017624>

0001770c <__lshift>:
   1770c:	defff904 	addi	sp,sp,-28
   17710:	dd400515 	stw	r21,20(sp)
   17714:	dcc00315 	stw	r19,12(sp)
   17718:	302bd17a 	srai	r21,r6,5
   1771c:	2cc00417 	ldw	r19,16(r5)
   17720:	28800217 	ldw	r2,8(r5)
   17724:	dd000415 	stw	r20,16(sp)
   17728:	ace7883a 	add	r19,r21,r19
   1772c:	dc800215 	stw	r18,8(sp)
   17730:	dc400115 	stw	r17,4(sp)
   17734:	dc000015 	stw	r16,0(sp)
   17738:	dfc00615 	stw	ra,24(sp)
   1773c:	9c000044 	addi	r16,r19,1
   17740:	2823883a 	mov	r17,r5
   17744:	3029883a 	mov	r20,r6
   17748:	2025883a 	mov	r18,r4
   1774c:	29400117 	ldw	r5,4(r5)
   17750:	1400030e 	bge	r2,r16,17760 <__lshift+0x54>
   17754:	1085883a 	add	r2,r2,r2
   17758:	29400044 	addi	r5,r5,1
   1775c:	143ffd16 	blt	r2,r16,17754 <__alt_data_end+0xfc017754>
   17760:	9009883a 	mov	r4,r18
   17764:	0016ed00 	call	16ed0 <_Balloc>
   17768:	10c00504 	addi	r3,r2,20
   1776c:	0540070e 	bge	zero,r21,1778c <__lshift+0x80>
   17770:	ad6b883a 	add	r21,r21,r21
   17774:	ad6b883a 	add	r21,r21,r21
   17778:	1809883a 	mov	r4,r3
   1777c:	1d47883a 	add	r3,r3,r21
   17780:	20000015 	stw	zero,0(r4)
   17784:	21000104 	addi	r4,r4,4
   17788:	193ffd1e 	bne	r3,r4,17780 <__alt_data_end+0xfc017780>
   1778c:	8a000417 	ldw	r8,16(r17)
   17790:	89000504 	addi	r4,r17,20
   17794:	a18007cc 	andi	r6,r20,31
   17798:	4211883a 	add	r8,r8,r8
   1779c:	4211883a 	add	r8,r8,r8
   177a0:	2211883a 	add	r8,r4,r8
   177a4:	30002326 	beq	r6,zero,17834 <__lshift+0x128>
   177a8:	02400804 	movi	r9,32
   177ac:	4993c83a 	sub	r9,r9,r6
   177b0:	000b883a 	mov	r5,zero
   177b4:	21c00017 	ldw	r7,0(r4)
   177b8:	1815883a 	mov	r10,r3
   177bc:	18c00104 	addi	r3,r3,4
   177c0:	398e983a 	sll	r7,r7,r6
   177c4:	21000104 	addi	r4,r4,4
   177c8:	394ab03a 	or	r5,r7,r5
   177cc:	197fff15 	stw	r5,-4(r3)
   177d0:	217fff17 	ldw	r5,-4(r4)
   177d4:	2a4ad83a 	srl	r5,r5,r9
   177d8:	223ff636 	bltu	r4,r8,177b4 <__alt_data_end+0xfc0177b4>
   177dc:	51400115 	stw	r5,4(r10)
   177e0:	28001a1e 	bne	r5,zero,1784c <__lshift+0x140>
   177e4:	843fffc4 	addi	r16,r16,-1
   177e8:	14000415 	stw	r16,16(r2)
   177ec:	88000826 	beq	r17,zero,17810 <__lshift+0x104>
   177f0:	89000117 	ldw	r4,4(r17)
   177f4:	90c01317 	ldw	r3,76(r18)
   177f8:	2109883a 	add	r4,r4,r4
   177fc:	2109883a 	add	r4,r4,r4
   17800:	1907883a 	add	r3,r3,r4
   17804:	19000017 	ldw	r4,0(r3)
   17808:	89000015 	stw	r4,0(r17)
   1780c:	1c400015 	stw	r17,0(r3)
   17810:	dfc00617 	ldw	ra,24(sp)
   17814:	dd400517 	ldw	r21,20(sp)
   17818:	dd000417 	ldw	r20,16(sp)
   1781c:	dcc00317 	ldw	r19,12(sp)
   17820:	dc800217 	ldw	r18,8(sp)
   17824:	dc400117 	ldw	r17,4(sp)
   17828:	dc000017 	ldw	r16,0(sp)
   1782c:	dec00704 	addi	sp,sp,28
   17830:	f800283a 	ret
   17834:	21400017 	ldw	r5,0(r4)
   17838:	18c00104 	addi	r3,r3,4
   1783c:	21000104 	addi	r4,r4,4
   17840:	197fff15 	stw	r5,-4(r3)
   17844:	223ffb36 	bltu	r4,r8,17834 <__alt_data_end+0xfc017834>
   17848:	003fe606 	br	177e4 <__alt_data_end+0xfc0177e4>
   1784c:	9c000084 	addi	r16,r19,2
   17850:	003fe406 	br	177e4 <__alt_data_end+0xfc0177e4>

00017854 <__mcmp>:
   17854:	20800417 	ldw	r2,16(r4)
   17858:	28c00417 	ldw	r3,16(r5)
   1785c:	10c5c83a 	sub	r2,r2,r3
   17860:	1000111e 	bne	r2,zero,178a8 <__mcmp+0x54>
   17864:	18c7883a 	add	r3,r3,r3
   17868:	18c7883a 	add	r3,r3,r3
   1786c:	21000504 	addi	r4,r4,20
   17870:	29400504 	addi	r5,r5,20
   17874:	20c5883a 	add	r2,r4,r3
   17878:	28cb883a 	add	r5,r5,r3
   1787c:	00000106 	br	17884 <__mcmp+0x30>
   17880:	20800a2e 	bgeu	r4,r2,178ac <__mcmp+0x58>
   17884:	10bfff04 	addi	r2,r2,-4
   17888:	297fff04 	addi	r5,r5,-4
   1788c:	11800017 	ldw	r6,0(r2)
   17890:	28c00017 	ldw	r3,0(r5)
   17894:	30fffa26 	beq	r6,r3,17880 <__alt_data_end+0xfc017880>
   17898:	30c00236 	bltu	r6,r3,178a4 <__mcmp+0x50>
   1789c:	00800044 	movi	r2,1
   178a0:	f800283a 	ret
   178a4:	00bfffc4 	movi	r2,-1
   178a8:	f800283a 	ret
   178ac:	0005883a 	mov	r2,zero
   178b0:	f800283a 	ret

000178b4 <__mdiff>:
   178b4:	28c00417 	ldw	r3,16(r5)
   178b8:	30800417 	ldw	r2,16(r6)
   178bc:	defffa04 	addi	sp,sp,-24
   178c0:	dcc00315 	stw	r19,12(sp)
   178c4:	dc800215 	stw	r18,8(sp)
   178c8:	dfc00515 	stw	ra,20(sp)
   178cc:	dd000415 	stw	r20,16(sp)
   178d0:	dc400115 	stw	r17,4(sp)
   178d4:	dc000015 	stw	r16,0(sp)
   178d8:	1887c83a 	sub	r3,r3,r2
   178dc:	2825883a 	mov	r18,r5
   178e0:	3027883a 	mov	r19,r6
   178e4:	1800141e 	bne	r3,zero,17938 <__mdiff+0x84>
   178e8:	1085883a 	add	r2,r2,r2
   178ec:	1085883a 	add	r2,r2,r2
   178f0:	2a000504 	addi	r8,r5,20
   178f4:	34000504 	addi	r16,r6,20
   178f8:	4087883a 	add	r3,r8,r2
   178fc:	8085883a 	add	r2,r16,r2
   17900:	00000106 	br	17908 <__mdiff+0x54>
   17904:	40c0592e 	bgeu	r8,r3,17a6c <__mdiff+0x1b8>
   17908:	18ffff04 	addi	r3,r3,-4
   1790c:	10bfff04 	addi	r2,r2,-4
   17910:	19c00017 	ldw	r7,0(r3)
   17914:	11400017 	ldw	r5,0(r2)
   17918:	397ffa26 	beq	r7,r5,17904 <__alt_data_end+0xfc017904>
   1791c:	3940592e 	bgeu	r7,r5,17a84 <__mdiff+0x1d0>
   17920:	9005883a 	mov	r2,r18
   17924:	4023883a 	mov	r17,r8
   17928:	9825883a 	mov	r18,r19
   1792c:	05000044 	movi	r20,1
   17930:	1027883a 	mov	r19,r2
   17934:	00000406 	br	17948 <__mdiff+0x94>
   17938:	18005616 	blt	r3,zero,17a94 <__mdiff+0x1e0>
   1793c:	34400504 	addi	r17,r6,20
   17940:	2c000504 	addi	r16,r5,20
   17944:	0029883a 	mov	r20,zero
   17948:	91400117 	ldw	r5,4(r18)
   1794c:	0016ed00 	call	16ed0 <_Balloc>
   17950:	92400417 	ldw	r9,16(r18)
   17954:	9b000417 	ldw	r12,16(r19)
   17958:	12c00504 	addi	r11,r2,20
   1795c:	4a51883a 	add	r8,r9,r9
   17960:	6319883a 	add	r12,r12,r12
   17964:	4211883a 	add	r8,r8,r8
   17968:	6319883a 	add	r12,r12,r12
   1796c:	15000315 	stw	r20,12(r2)
   17970:	8211883a 	add	r8,r16,r8
   17974:	8b19883a 	add	r12,r17,r12
   17978:	0007883a 	mov	r3,zero
   1797c:	81400017 	ldw	r5,0(r16)
   17980:	89c00017 	ldw	r7,0(r17)
   17984:	59800104 	addi	r6,r11,4
   17988:	293fffcc 	andi	r4,r5,65535
   1798c:	20c7883a 	add	r3,r4,r3
   17990:	393fffcc 	andi	r4,r7,65535
   17994:	1909c83a 	sub	r4,r3,r4
   17998:	280ad43a 	srli	r5,r5,16
   1799c:	380ed43a 	srli	r7,r7,16
   179a0:	2007d43a 	srai	r3,r4,16
   179a4:	213fffcc 	andi	r4,r4,65535
   179a8:	29cbc83a 	sub	r5,r5,r7
   179ac:	28c7883a 	add	r3,r5,r3
   179b0:	180a943a 	slli	r5,r3,16
   179b4:	8c400104 	addi	r17,r17,4
   179b8:	84000104 	addi	r16,r16,4
   179bc:	2908b03a 	or	r4,r5,r4
   179c0:	59000015 	stw	r4,0(r11)
   179c4:	1807d43a 	srai	r3,r3,16
   179c8:	3015883a 	mov	r10,r6
   179cc:	3017883a 	mov	r11,r6
   179d0:	8b3fea36 	bltu	r17,r12,1797c <__alt_data_end+0xfc01797c>
   179d4:	8200162e 	bgeu	r16,r8,17a30 <__mdiff+0x17c>
   179d8:	8017883a 	mov	r11,r16
   179dc:	59400017 	ldw	r5,0(r11)
   179e0:	31800104 	addi	r6,r6,4
   179e4:	5ac00104 	addi	r11,r11,4
   179e8:	293fffcc 	andi	r4,r5,65535
   179ec:	20c7883a 	add	r3,r4,r3
   179f0:	280ed43a 	srli	r7,r5,16
   179f4:	180bd43a 	srai	r5,r3,16
   179f8:	193fffcc 	andi	r4,r3,65535
   179fc:	3947883a 	add	r3,r7,r5
   17a00:	180a943a 	slli	r5,r3,16
   17a04:	1807d43a 	srai	r3,r3,16
   17a08:	2908b03a 	or	r4,r5,r4
   17a0c:	313fff15 	stw	r4,-4(r6)
   17a10:	5a3ff236 	bltu	r11,r8,179dc <__alt_data_end+0xfc0179dc>
   17a14:	0406303a 	nor	r3,zero,r16
   17a18:	1a07883a 	add	r3,r3,r8
   17a1c:	1806d0ba 	srli	r3,r3,2
   17a20:	18c00044 	addi	r3,r3,1
   17a24:	18c7883a 	add	r3,r3,r3
   17a28:	18c7883a 	add	r3,r3,r3
   17a2c:	50d5883a 	add	r10,r10,r3
   17a30:	50ffff04 	addi	r3,r10,-4
   17a34:	2000041e 	bne	r4,zero,17a48 <__mdiff+0x194>
   17a38:	18ffff04 	addi	r3,r3,-4
   17a3c:	19000017 	ldw	r4,0(r3)
   17a40:	4a7fffc4 	addi	r9,r9,-1
   17a44:	203ffc26 	beq	r4,zero,17a38 <__alt_data_end+0xfc017a38>
   17a48:	12400415 	stw	r9,16(r2)
   17a4c:	dfc00517 	ldw	ra,20(sp)
   17a50:	dd000417 	ldw	r20,16(sp)
   17a54:	dcc00317 	ldw	r19,12(sp)
   17a58:	dc800217 	ldw	r18,8(sp)
   17a5c:	dc400117 	ldw	r17,4(sp)
   17a60:	dc000017 	ldw	r16,0(sp)
   17a64:	dec00604 	addi	sp,sp,24
   17a68:	f800283a 	ret
   17a6c:	000b883a 	mov	r5,zero
   17a70:	0016ed00 	call	16ed0 <_Balloc>
   17a74:	00c00044 	movi	r3,1
   17a78:	10c00415 	stw	r3,16(r2)
   17a7c:	10000515 	stw	zero,20(r2)
   17a80:	003ff206 	br	17a4c <__alt_data_end+0xfc017a4c>
   17a84:	8023883a 	mov	r17,r16
   17a88:	0029883a 	mov	r20,zero
   17a8c:	4021883a 	mov	r16,r8
   17a90:	003fad06 	br	17948 <__alt_data_end+0xfc017948>
   17a94:	9005883a 	mov	r2,r18
   17a98:	94400504 	addi	r17,r18,20
   17a9c:	9c000504 	addi	r16,r19,20
   17aa0:	9825883a 	mov	r18,r19
   17aa4:	05000044 	movi	r20,1
   17aa8:	1027883a 	mov	r19,r2
   17aac:	003fa606 	br	17948 <__alt_data_end+0xfc017948>

00017ab0 <__ulp>:
   17ab0:	295ffc2c 	andhi	r5,r5,32752
   17ab4:	00bf3034 	movhi	r2,64704
   17ab8:	2887883a 	add	r3,r5,r2
   17abc:	00c0020e 	bge	zero,r3,17ac8 <__ulp+0x18>
   17ac0:	0005883a 	mov	r2,zero
   17ac4:	f800283a 	ret
   17ac8:	00c7c83a 	sub	r3,zero,r3
   17acc:	1807d53a 	srai	r3,r3,20
   17ad0:	008004c4 	movi	r2,19
   17ad4:	10c00b0e 	bge	r2,r3,17b04 <__ulp+0x54>
   17ad8:	18bffb04 	addi	r2,r3,-20
   17adc:	01000784 	movi	r4,30
   17ae0:	0007883a 	mov	r3,zero
   17ae4:	20800516 	blt	r4,r2,17afc <__ulp+0x4c>
   17ae8:	010007c4 	movi	r4,31
   17aec:	2089c83a 	sub	r4,r4,r2
   17af0:	00800044 	movi	r2,1
   17af4:	1104983a 	sll	r2,r2,r4
   17af8:	f800283a 	ret
   17afc:	00800044 	movi	r2,1
   17b00:	f800283a 	ret
   17b04:	01400234 	movhi	r5,8
   17b08:	28c7d83a 	sra	r3,r5,r3
   17b0c:	0005883a 	mov	r2,zero
   17b10:	f800283a 	ret

00017b14 <__b2d>:
   17b14:	defffa04 	addi	sp,sp,-24
   17b18:	dc000015 	stw	r16,0(sp)
   17b1c:	24000417 	ldw	r16,16(r4)
   17b20:	dc400115 	stw	r17,4(sp)
   17b24:	24400504 	addi	r17,r4,20
   17b28:	8421883a 	add	r16,r16,r16
   17b2c:	8421883a 	add	r16,r16,r16
   17b30:	8c21883a 	add	r16,r17,r16
   17b34:	dc800215 	stw	r18,8(sp)
   17b38:	84bfff17 	ldw	r18,-4(r16)
   17b3c:	dd000415 	stw	r20,16(sp)
   17b40:	dcc00315 	stw	r19,12(sp)
   17b44:	9009883a 	mov	r4,r18
   17b48:	2829883a 	mov	r20,r5
   17b4c:	dfc00515 	stw	ra,20(sp)
   17b50:	00171ec0 	call	171ec <__hi0bits>
   17b54:	00c00804 	movi	r3,32
   17b58:	1889c83a 	sub	r4,r3,r2
   17b5c:	a1000015 	stw	r4,0(r20)
   17b60:	01000284 	movi	r4,10
   17b64:	84ffff04 	addi	r19,r16,-4
   17b68:	20801216 	blt	r4,r2,17bb4 <__b2d+0xa0>
   17b6c:	018002c4 	movi	r6,11
   17b70:	308dc83a 	sub	r6,r6,r2
   17b74:	9186d83a 	srl	r3,r18,r6
   17b78:	18cffc34 	orhi	r3,r3,16368
   17b7c:	8cc0212e 	bgeu	r17,r19,17c04 <__b2d+0xf0>
   17b80:	813ffe17 	ldw	r4,-8(r16)
   17b84:	218cd83a 	srl	r6,r4,r6
   17b88:	10800544 	addi	r2,r2,21
   17b8c:	9084983a 	sll	r2,r18,r2
   17b90:	1184b03a 	or	r2,r2,r6
   17b94:	dfc00517 	ldw	ra,20(sp)
   17b98:	dd000417 	ldw	r20,16(sp)
   17b9c:	dcc00317 	ldw	r19,12(sp)
   17ba0:	dc800217 	ldw	r18,8(sp)
   17ba4:	dc400117 	ldw	r17,4(sp)
   17ba8:	dc000017 	ldw	r16,0(sp)
   17bac:	dec00604 	addi	sp,sp,24
   17bb0:	f800283a 	ret
   17bb4:	8cc00f2e 	bgeu	r17,r19,17bf4 <__b2d+0xe0>
   17bb8:	117ffd44 	addi	r5,r2,-11
   17bbc:	80bffe17 	ldw	r2,-8(r16)
   17bc0:	28000e26 	beq	r5,zero,17bfc <__b2d+0xe8>
   17bc4:	1949c83a 	sub	r4,r3,r5
   17bc8:	9164983a 	sll	r18,r18,r5
   17bcc:	1106d83a 	srl	r3,r2,r4
   17bd0:	81bffe04 	addi	r6,r16,-8
   17bd4:	948ffc34 	orhi	r18,r18,16368
   17bd8:	90c6b03a 	or	r3,r18,r3
   17bdc:	89800e2e 	bgeu	r17,r6,17c18 <__b2d+0x104>
   17be0:	81bffd17 	ldw	r6,-12(r16)
   17be4:	1144983a 	sll	r2,r2,r5
   17be8:	310ad83a 	srl	r5,r6,r4
   17bec:	2884b03a 	or	r2,r5,r2
   17bf0:	003fe806 	br	17b94 <__alt_data_end+0xfc017b94>
   17bf4:	10bffd44 	addi	r2,r2,-11
   17bf8:	1000041e 	bne	r2,zero,17c0c <__b2d+0xf8>
   17bfc:	90cffc34 	orhi	r3,r18,16368
   17c00:	003fe406 	br	17b94 <__alt_data_end+0xfc017b94>
   17c04:	000d883a 	mov	r6,zero
   17c08:	003fdf06 	br	17b88 <__alt_data_end+0xfc017b88>
   17c0c:	90a4983a 	sll	r18,r18,r2
   17c10:	0005883a 	mov	r2,zero
   17c14:	003ff906 	br	17bfc <__alt_data_end+0xfc017bfc>
   17c18:	1144983a 	sll	r2,r2,r5
   17c1c:	003fdd06 	br	17b94 <__alt_data_end+0xfc017b94>

00017c20 <__d2b>:
   17c20:	defff804 	addi	sp,sp,-32
   17c24:	dc000215 	stw	r16,8(sp)
   17c28:	3021883a 	mov	r16,r6
   17c2c:	dc400315 	stw	r17,12(sp)
   17c30:	8022907a 	slli	r17,r16,1
   17c34:	dd000615 	stw	r20,24(sp)
   17c38:	2829883a 	mov	r20,r5
   17c3c:	01400044 	movi	r5,1
   17c40:	dcc00515 	stw	r19,20(sp)
   17c44:	dc800415 	stw	r18,16(sp)
   17c48:	dfc00715 	stw	ra,28(sp)
   17c4c:	3825883a 	mov	r18,r7
   17c50:	8822d57a 	srli	r17,r17,21
   17c54:	0016ed00 	call	16ed0 <_Balloc>
   17c58:	1027883a 	mov	r19,r2
   17c5c:	00800434 	movhi	r2,16
   17c60:	10bfffc4 	addi	r2,r2,-1
   17c64:	808c703a 	and	r6,r16,r2
   17c68:	88000126 	beq	r17,zero,17c70 <__d2b+0x50>
   17c6c:	31800434 	orhi	r6,r6,16
   17c70:	d9800015 	stw	r6,0(sp)
   17c74:	a0002426 	beq	r20,zero,17d08 <__d2b+0xe8>
   17c78:	d9000104 	addi	r4,sp,4
   17c7c:	dd000115 	stw	r20,4(sp)
   17c80:	00172540 	call	17254 <__lo0bits>
   17c84:	d8c00017 	ldw	r3,0(sp)
   17c88:	10002f1e 	bne	r2,zero,17d48 <__d2b+0x128>
   17c8c:	d9000117 	ldw	r4,4(sp)
   17c90:	99000515 	stw	r4,20(r19)
   17c94:	1821003a 	cmpeq	r16,r3,zero
   17c98:	01000084 	movi	r4,2
   17c9c:	2421c83a 	sub	r16,r4,r16
   17ca0:	98c00615 	stw	r3,24(r19)
   17ca4:	9c000415 	stw	r16,16(r19)
   17ca8:	88001f1e 	bne	r17,zero,17d28 <__d2b+0x108>
   17cac:	10bef384 	addi	r2,r2,-1074
   17cb0:	90800015 	stw	r2,0(r18)
   17cb4:	00900034 	movhi	r2,16384
   17cb8:	10bfffc4 	addi	r2,r2,-1
   17cbc:	8085883a 	add	r2,r16,r2
   17cc0:	1085883a 	add	r2,r2,r2
   17cc4:	1085883a 	add	r2,r2,r2
   17cc8:	9885883a 	add	r2,r19,r2
   17ccc:	11000517 	ldw	r4,20(r2)
   17cd0:	8020917a 	slli	r16,r16,5
   17cd4:	00171ec0 	call	171ec <__hi0bits>
   17cd8:	d8c00817 	ldw	r3,32(sp)
   17cdc:	8085c83a 	sub	r2,r16,r2
   17ce0:	18800015 	stw	r2,0(r3)
   17ce4:	9805883a 	mov	r2,r19
   17ce8:	dfc00717 	ldw	ra,28(sp)
   17cec:	dd000617 	ldw	r20,24(sp)
   17cf0:	dcc00517 	ldw	r19,20(sp)
   17cf4:	dc800417 	ldw	r18,16(sp)
   17cf8:	dc400317 	ldw	r17,12(sp)
   17cfc:	dc000217 	ldw	r16,8(sp)
   17d00:	dec00804 	addi	sp,sp,32
   17d04:	f800283a 	ret
   17d08:	d809883a 	mov	r4,sp
   17d0c:	00172540 	call	17254 <__lo0bits>
   17d10:	d8c00017 	ldw	r3,0(sp)
   17d14:	04000044 	movi	r16,1
   17d18:	9c000415 	stw	r16,16(r19)
   17d1c:	98c00515 	stw	r3,20(r19)
   17d20:	10800804 	addi	r2,r2,32
   17d24:	883fe126 	beq	r17,zero,17cac <__alt_data_end+0xfc017cac>
   17d28:	00c00d44 	movi	r3,53
   17d2c:	8c7ef344 	addi	r17,r17,-1075
   17d30:	88a3883a 	add	r17,r17,r2
   17d34:	1885c83a 	sub	r2,r3,r2
   17d38:	d8c00817 	ldw	r3,32(sp)
   17d3c:	94400015 	stw	r17,0(r18)
   17d40:	18800015 	stw	r2,0(r3)
   17d44:	003fe706 	br	17ce4 <__alt_data_end+0xfc017ce4>
   17d48:	01000804 	movi	r4,32
   17d4c:	2089c83a 	sub	r4,r4,r2
   17d50:	1908983a 	sll	r4,r3,r4
   17d54:	d9400117 	ldw	r5,4(sp)
   17d58:	1886d83a 	srl	r3,r3,r2
   17d5c:	2148b03a 	or	r4,r4,r5
   17d60:	99000515 	stw	r4,20(r19)
   17d64:	d8c00015 	stw	r3,0(sp)
   17d68:	003fca06 	br	17c94 <__alt_data_end+0xfc017c94>

00017d6c <__ratio>:
   17d6c:	defff904 	addi	sp,sp,-28
   17d70:	dc400315 	stw	r17,12(sp)
   17d74:	2823883a 	mov	r17,r5
   17d78:	d9400104 	addi	r5,sp,4
   17d7c:	dfc00615 	stw	ra,24(sp)
   17d80:	dcc00515 	stw	r19,20(sp)
   17d84:	dc800415 	stw	r18,16(sp)
   17d88:	2027883a 	mov	r19,r4
   17d8c:	dc000215 	stw	r16,8(sp)
   17d90:	0017b140 	call	17b14 <__b2d>
   17d94:	d80b883a 	mov	r5,sp
   17d98:	8809883a 	mov	r4,r17
   17d9c:	1025883a 	mov	r18,r2
   17da0:	1821883a 	mov	r16,r3
   17da4:	0017b140 	call	17b14 <__b2d>
   17da8:	8a000417 	ldw	r8,16(r17)
   17dac:	99000417 	ldw	r4,16(r19)
   17db0:	d9400117 	ldw	r5,4(sp)
   17db4:	2209c83a 	sub	r4,r4,r8
   17db8:	2010917a 	slli	r8,r4,5
   17dbc:	d9000017 	ldw	r4,0(sp)
   17dc0:	2909c83a 	sub	r4,r5,r4
   17dc4:	4109883a 	add	r4,r8,r4
   17dc8:	01000e0e 	bge	zero,r4,17e04 <__ratio+0x98>
   17dcc:	2008953a 	slli	r4,r4,20
   17dd0:	2421883a 	add	r16,r4,r16
   17dd4:	100d883a 	mov	r6,r2
   17dd8:	180f883a 	mov	r7,r3
   17ddc:	9009883a 	mov	r4,r18
   17de0:	800b883a 	mov	r5,r16
   17de4:	001d2240 	call	1d224 <__divdf3>
   17de8:	dfc00617 	ldw	ra,24(sp)
   17dec:	dcc00517 	ldw	r19,20(sp)
   17df0:	dc800417 	ldw	r18,16(sp)
   17df4:	dc400317 	ldw	r17,12(sp)
   17df8:	dc000217 	ldw	r16,8(sp)
   17dfc:	dec00704 	addi	sp,sp,28
   17e00:	f800283a 	ret
   17e04:	2008953a 	slli	r4,r4,20
   17e08:	1907c83a 	sub	r3,r3,r4
   17e0c:	003ff106 	br	17dd4 <__alt_data_end+0xfc017dd4>

00017e10 <_mprec_log10>:
   17e10:	defffe04 	addi	sp,sp,-8
   17e14:	dc000015 	stw	r16,0(sp)
   17e18:	dfc00115 	stw	ra,4(sp)
   17e1c:	008005c4 	movi	r2,23
   17e20:	2021883a 	mov	r16,r4
   17e24:	11000d0e 	bge	r2,r4,17e5c <_mprec_log10+0x4c>
   17e28:	0005883a 	mov	r2,zero
   17e2c:	00cffc34 	movhi	r3,16368
   17e30:	843fffc4 	addi	r16,r16,-1
   17e34:	000d883a 	mov	r6,zero
   17e38:	01d00934 	movhi	r7,16420
   17e3c:	1009883a 	mov	r4,r2
   17e40:	180b883a 	mov	r5,r3
   17e44:	001de4c0 	call	1de4c <__muldf3>
   17e48:	803ff91e 	bne	r16,zero,17e30 <__alt_data_end+0xfc017e30>
   17e4c:	dfc00117 	ldw	ra,4(sp)
   17e50:	dc000017 	ldw	r16,0(sp)
   17e54:	dec00204 	addi	sp,sp,8
   17e58:	f800283a 	ret
   17e5c:	202090fa 	slli	r16,r4,3
   17e60:	008000f4 	movhi	r2,3
   17e64:	10ab8704 	addi	r2,r2,-20964
   17e68:	1421883a 	add	r16,r2,r16
   17e6c:	80800017 	ldw	r2,0(r16)
   17e70:	80c00117 	ldw	r3,4(r16)
   17e74:	dfc00117 	ldw	ra,4(sp)
   17e78:	dc000017 	ldw	r16,0(sp)
   17e7c:	dec00204 	addi	sp,sp,8
   17e80:	f800283a 	ret

00017e84 <__copybits>:
   17e84:	297fffc4 	addi	r5,r5,-1
   17e88:	280fd17a 	srai	r7,r5,5
   17e8c:	30c00417 	ldw	r3,16(r6)
   17e90:	30800504 	addi	r2,r6,20
   17e94:	39c00044 	addi	r7,r7,1
   17e98:	18c7883a 	add	r3,r3,r3
   17e9c:	39cf883a 	add	r7,r7,r7
   17ea0:	18c7883a 	add	r3,r3,r3
   17ea4:	39cf883a 	add	r7,r7,r7
   17ea8:	10c7883a 	add	r3,r2,r3
   17eac:	21cf883a 	add	r7,r4,r7
   17eb0:	10c00d2e 	bgeu	r2,r3,17ee8 <__copybits+0x64>
   17eb4:	200b883a 	mov	r5,r4
   17eb8:	12000017 	ldw	r8,0(r2)
   17ebc:	29400104 	addi	r5,r5,4
   17ec0:	10800104 	addi	r2,r2,4
   17ec4:	2a3fff15 	stw	r8,-4(r5)
   17ec8:	10fffb36 	bltu	r2,r3,17eb8 <__alt_data_end+0xfc017eb8>
   17ecc:	1985c83a 	sub	r2,r3,r6
   17ed0:	10bffac4 	addi	r2,r2,-21
   17ed4:	1004d0ba 	srli	r2,r2,2
   17ed8:	10800044 	addi	r2,r2,1
   17edc:	1085883a 	add	r2,r2,r2
   17ee0:	1085883a 	add	r2,r2,r2
   17ee4:	2089883a 	add	r4,r4,r2
   17ee8:	21c0032e 	bgeu	r4,r7,17ef8 <__copybits+0x74>
   17eec:	20000015 	stw	zero,0(r4)
   17ef0:	21000104 	addi	r4,r4,4
   17ef4:	21fffd36 	bltu	r4,r7,17eec <__alt_data_end+0xfc017eec>
   17ef8:	f800283a 	ret

00017efc <__any_on>:
   17efc:	20c00417 	ldw	r3,16(r4)
   17f00:	2805d17a 	srai	r2,r5,5
   17f04:	21000504 	addi	r4,r4,20
   17f08:	18800d0e 	bge	r3,r2,17f40 <__any_on+0x44>
   17f0c:	18c7883a 	add	r3,r3,r3
   17f10:	18c7883a 	add	r3,r3,r3
   17f14:	20c7883a 	add	r3,r4,r3
   17f18:	20c0192e 	bgeu	r4,r3,17f80 <__any_on+0x84>
   17f1c:	18bfff17 	ldw	r2,-4(r3)
   17f20:	18ffff04 	addi	r3,r3,-4
   17f24:	1000041e 	bne	r2,zero,17f38 <__any_on+0x3c>
   17f28:	20c0142e 	bgeu	r4,r3,17f7c <__any_on+0x80>
   17f2c:	18ffff04 	addi	r3,r3,-4
   17f30:	19400017 	ldw	r5,0(r3)
   17f34:	283ffc26 	beq	r5,zero,17f28 <__alt_data_end+0xfc017f28>
   17f38:	00800044 	movi	r2,1
   17f3c:	f800283a 	ret
   17f40:	10c00a0e 	bge	r2,r3,17f6c <__any_on+0x70>
   17f44:	1085883a 	add	r2,r2,r2
   17f48:	1085883a 	add	r2,r2,r2
   17f4c:	294007cc 	andi	r5,r5,31
   17f50:	2087883a 	add	r3,r4,r2
   17f54:	283ff026 	beq	r5,zero,17f18 <__alt_data_end+0xfc017f18>
   17f58:	19800017 	ldw	r6,0(r3)
   17f5c:	3144d83a 	srl	r2,r6,r5
   17f60:	114a983a 	sll	r5,r2,r5
   17f64:	317ff41e 	bne	r6,r5,17f38 <__alt_data_end+0xfc017f38>
   17f68:	003feb06 	br	17f18 <__alt_data_end+0xfc017f18>
   17f6c:	1085883a 	add	r2,r2,r2
   17f70:	1085883a 	add	r2,r2,r2
   17f74:	2087883a 	add	r3,r4,r2
   17f78:	003fe706 	br	17f18 <__alt_data_end+0xfc017f18>
   17f7c:	f800283a 	ret
   17f80:	0005883a 	mov	r2,zero
   17f84:	f800283a 	ret

00017f88 <_putc_r>:
   17f88:	defffc04 	addi	sp,sp,-16
   17f8c:	dc000215 	stw	r16,8(sp)
   17f90:	dfc00315 	stw	ra,12(sp)
   17f94:	2021883a 	mov	r16,r4
   17f98:	20000226 	beq	r4,zero,17fa4 <_putc_r+0x1c>
   17f9c:	20800e17 	ldw	r2,56(r4)
   17fa0:	10001b26 	beq	r2,zero,18010 <_putc_r+0x88>
   17fa4:	30800217 	ldw	r2,8(r6)
   17fa8:	10bfffc4 	addi	r2,r2,-1
   17fac:	30800215 	stw	r2,8(r6)
   17fb0:	10000a16 	blt	r2,zero,17fdc <_putc_r+0x54>
   17fb4:	30800017 	ldw	r2,0(r6)
   17fb8:	11400005 	stb	r5,0(r2)
   17fbc:	30800017 	ldw	r2,0(r6)
   17fc0:	10c00044 	addi	r3,r2,1
   17fc4:	30c00015 	stw	r3,0(r6)
   17fc8:	10800003 	ldbu	r2,0(r2)
   17fcc:	dfc00317 	ldw	ra,12(sp)
   17fd0:	dc000217 	ldw	r16,8(sp)
   17fd4:	dec00404 	addi	sp,sp,16
   17fd8:	f800283a 	ret
   17fdc:	30c00617 	ldw	r3,24(r6)
   17fe0:	10c00616 	blt	r2,r3,17ffc <_putc_r+0x74>
   17fe4:	30800017 	ldw	r2,0(r6)
   17fe8:	00c00284 	movi	r3,10
   17fec:	11400005 	stb	r5,0(r2)
   17ff0:	30800017 	ldw	r2,0(r6)
   17ff4:	11400003 	ldbu	r5,0(r2)
   17ff8:	28fff11e 	bne	r5,r3,17fc0 <__alt_data_end+0xfc017fc0>
   17ffc:	8009883a 	mov	r4,r16
   18000:	dfc00317 	ldw	ra,12(sp)
   18004:	dc000217 	ldw	r16,8(sp)
   18008:	dec00404 	addi	sp,sp,16
   1800c:	001b46c1 	jmpi	1b46c <__swbuf_r>
   18010:	d9400015 	stw	r5,0(sp)
   18014:	d9800115 	stw	r6,4(sp)
   18018:	0015f240 	call	15f24 <__sinit>
   1801c:	d9800117 	ldw	r6,4(sp)
   18020:	d9400017 	ldw	r5,0(sp)
   18024:	003fdf06 	br	17fa4 <__alt_data_end+0xfc017fa4>

00018028 <putc>:
   18028:	008000f4 	movhi	r2,3
   1802c:	defffc04 	addi	sp,sp,-16
   18030:	10b84b04 	addi	r2,r2,-7892
   18034:	dc000115 	stw	r16,4(sp)
   18038:	14000017 	ldw	r16,0(r2)
   1803c:	dc400215 	stw	r17,8(sp)
   18040:	dfc00315 	stw	ra,12(sp)
   18044:	2023883a 	mov	r17,r4
   18048:	80000226 	beq	r16,zero,18054 <putc+0x2c>
   1804c:	80800e17 	ldw	r2,56(r16)
   18050:	10001a26 	beq	r2,zero,180bc <putc+0x94>
   18054:	28800217 	ldw	r2,8(r5)
   18058:	10bfffc4 	addi	r2,r2,-1
   1805c:	28800215 	stw	r2,8(r5)
   18060:	10000b16 	blt	r2,zero,18090 <putc+0x68>
   18064:	28800017 	ldw	r2,0(r5)
   18068:	14400005 	stb	r17,0(r2)
   1806c:	28800017 	ldw	r2,0(r5)
   18070:	10c00044 	addi	r3,r2,1
   18074:	28c00015 	stw	r3,0(r5)
   18078:	10800003 	ldbu	r2,0(r2)
   1807c:	dfc00317 	ldw	ra,12(sp)
   18080:	dc400217 	ldw	r17,8(sp)
   18084:	dc000117 	ldw	r16,4(sp)
   18088:	dec00404 	addi	sp,sp,16
   1808c:	f800283a 	ret
   18090:	28c00617 	ldw	r3,24(r5)
   18094:	10c00e16 	blt	r2,r3,180d0 <putc+0xa8>
   18098:	28800017 	ldw	r2,0(r5)
   1809c:	01000284 	movi	r4,10
   180a0:	14400005 	stb	r17,0(r2)
   180a4:	28800017 	ldw	r2,0(r5)
   180a8:	10c00003 	ldbu	r3,0(r2)
   180ac:	193ff01e 	bne	r3,r4,18070 <__alt_data_end+0xfc018070>
   180b0:	280d883a 	mov	r6,r5
   180b4:	180b883a 	mov	r5,r3
   180b8:	00000706 	br	180d8 <putc+0xb0>
   180bc:	8009883a 	mov	r4,r16
   180c0:	d9400015 	stw	r5,0(sp)
   180c4:	0015f240 	call	15f24 <__sinit>
   180c8:	d9400017 	ldw	r5,0(sp)
   180cc:	003fe106 	br	18054 <__alt_data_end+0xfc018054>
   180d0:	280d883a 	mov	r6,r5
   180d4:	880b883a 	mov	r5,r17
   180d8:	8009883a 	mov	r4,r16
   180dc:	dfc00317 	ldw	ra,12(sp)
   180e0:	dc400217 	ldw	r17,8(sp)
   180e4:	dc000117 	ldw	r16,4(sp)
   180e8:	dec00404 	addi	sp,sp,16
   180ec:	001b46c1 	jmpi	1b46c <__swbuf_r>

000180f0 <_realloc_r>:
   180f0:	defff604 	addi	sp,sp,-40
   180f4:	dc800215 	stw	r18,8(sp)
   180f8:	dfc00915 	stw	ra,36(sp)
   180fc:	df000815 	stw	fp,32(sp)
   18100:	ddc00715 	stw	r23,28(sp)
   18104:	dd800615 	stw	r22,24(sp)
   18108:	dd400515 	stw	r21,20(sp)
   1810c:	dd000415 	stw	r20,16(sp)
   18110:	dcc00315 	stw	r19,12(sp)
   18114:	dc400115 	stw	r17,4(sp)
   18118:	dc000015 	stw	r16,0(sp)
   1811c:	3025883a 	mov	r18,r6
   18120:	2800b726 	beq	r5,zero,18400 <_realloc_r+0x310>
   18124:	282b883a 	mov	r21,r5
   18128:	2029883a 	mov	r20,r4
   1812c:	001f9140 	call	1f914 <__malloc_lock>
   18130:	a8bfff17 	ldw	r2,-4(r21)
   18134:	043fff04 	movi	r16,-4
   18138:	90c002c4 	addi	r3,r18,11
   1813c:	01000584 	movi	r4,22
   18140:	acfffe04 	addi	r19,r21,-8
   18144:	1420703a 	and	r16,r2,r16
   18148:	20c0332e 	bgeu	r4,r3,18218 <_realloc_r+0x128>
   1814c:	047ffe04 	movi	r17,-8
   18150:	1c62703a 	and	r17,r3,r17
   18154:	8807883a 	mov	r3,r17
   18158:	88005816 	blt	r17,zero,182bc <_realloc_r+0x1cc>
   1815c:	8c805736 	bltu	r17,r18,182bc <_realloc_r+0x1cc>
   18160:	80c0300e 	bge	r16,r3,18224 <_realloc_r+0x134>
   18164:	070000f4 	movhi	fp,3
   18168:	e72cea04 	addi	fp,fp,-19544
   1816c:	e1c00217 	ldw	r7,8(fp)
   18170:	9c09883a 	add	r4,r19,r16
   18174:	22000117 	ldw	r8,4(r4)
   18178:	21c06326 	beq	r4,r7,18308 <_realloc_r+0x218>
   1817c:	017fff84 	movi	r5,-2
   18180:	414a703a 	and	r5,r8,r5
   18184:	214b883a 	add	r5,r4,r5
   18188:	29800117 	ldw	r6,4(r5)
   1818c:	3180004c 	andi	r6,r6,1
   18190:	30003f26 	beq	r6,zero,18290 <_realloc_r+0x1a0>
   18194:	1080004c 	andi	r2,r2,1
   18198:	10008326 	beq	r2,zero,183a8 <_realloc_r+0x2b8>
   1819c:	900b883a 	mov	r5,r18
   181a0:	a009883a 	mov	r4,r20
   181a4:	000e7340 	call	e734 <_malloc_r>
   181a8:	1025883a 	mov	r18,r2
   181ac:	10011e26 	beq	r2,zero,18628 <_realloc_r+0x538>
   181b0:	a93fff17 	ldw	r4,-4(r21)
   181b4:	10fffe04 	addi	r3,r2,-8
   181b8:	00bfff84 	movi	r2,-2
   181bc:	2084703a 	and	r2,r4,r2
   181c0:	9885883a 	add	r2,r19,r2
   181c4:	1880ee26 	beq	r3,r2,18580 <_realloc_r+0x490>
   181c8:	81bfff04 	addi	r6,r16,-4
   181cc:	00800904 	movi	r2,36
   181d0:	1180b836 	bltu	r2,r6,184b4 <_realloc_r+0x3c4>
   181d4:	00c004c4 	movi	r3,19
   181d8:	19809636 	bltu	r3,r6,18434 <_realloc_r+0x344>
   181dc:	9005883a 	mov	r2,r18
   181e0:	a807883a 	mov	r3,r21
   181e4:	19000017 	ldw	r4,0(r3)
   181e8:	11000015 	stw	r4,0(r2)
   181ec:	19000117 	ldw	r4,4(r3)
   181f0:	11000115 	stw	r4,4(r2)
   181f4:	18c00217 	ldw	r3,8(r3)
   181f8:	10c00215 	stw	r3,8(r2)
   181fc:	a80b883a 	mov	r5,r21
   18200:	a009883a 	mov	r4,r20
   18204:	00160980 	call	16098 <_free_r>
   18208:	a009883a 	mov	r4,r20
   1820c:	001f9380 	call	1f938 <__malloc_unlock>
   18210:	9005883a 	mov	r2,r18
   18214:	00001206 	br	18260 <_realloc_r+0x170>
   18218:	00c00404 	movi	r3,16
   1821c:	1823883a 	mov	r17,r3
   18220:	003fce06 	br	1815c <__alt_data_end+0xfc01815c>
   18224:	a825883a 	mov	r18,r21
   18228:	8445c83a 	sub	r2,r16,r17
   1822c:	00c003c4 	movi	r3,15
   18230:	18802636 	bltu	r3,r2,182cc <_realloc_r+0x1dc>
   18234:	99800117 	ldw	r6,4(r19)
   18238:	9c07883a 	add	r3,r19,r16
   1823c:	3180004c 	andi	r6,r6,1
   18240:	3420b03a 	or	r16,r6,r16
   18244:	9c000115 	stw	r16,4(r19)
   18248:	18800117 	ldw	r2,4(r3)
   1824c:	10800054 	ori	r2,r2,1
   18250:	18800115 	stw	r2,4(r3)
   18254:	a009883a 	mov	r4,r20
   18258:	001f9380 	call	1f938 <__malloc_unlock>
   1825c:	9005883a 	mov	r2,r18
   18260:	dfc00917 	ldw	ra,36(sp)
   18264:	df000817 	ldw	fp,32(sp)
   18268:	ddc00717 	ldw	r23,28(sp)
   1826c:	dd800617 	ldw	r22,24(sp)
   18270:	dd400517 	ldw	r21,20(sp)
   18274:	dd000417 	ldw	r20,16(sp)
   18278:	dcc00317 	ldw	r19,12(sp)
   1827c:	dc800217 	ldw	r18,8(sp)
   18280:	dc400117 	ldw	r17,4(sp)
   18284:	dc000017 	ldw	r16,0(sp)
   18288:	dec00a04 	addi	sp,sp,40
   1828c:	f800283a 	ret
   18290:	017fff04 	movi	r5,-4
   18294:	414a703a 	and	r5,r8,r5
   18298:	814d883a 	add	r6,r16,r5
   1829c:	30c01f16 	blt	r6,r3,1831c <_realloc_r+0x22c>
   182a0:	20800317 	ldw	r2,12(r4)
   182a4:	20c00217 	ldw	r3,8(r4)
   182a8:	a825883a 	mov	r18,r21
   182ac:	3021883a 	mov	r16,r6
   182b0:	18800315 	stw	r2,12(r3)
   182b4:	10c00215 	stw	r3,8(r2)
   182b8:	003fdb06 	br	18228 <__alt_data_end+0xfc018228>
   182bc:	00800304 	movi	r2,12
   182c0:	a0800015 	stw	r2,0(r20)
   182c4:	0005883a 	mov	r2,zero
   182c8:	003fe506 	br	18260 <__alt_data_end+0xfc018260>
   182cc:	98c00117 	ldw	r3,4(r19)
   182d0:	9c4b883a 	add	r5,r19,r17
   182d4:	11000054 	ori	r4,r2,1
   182d8:	18c0004c 	andi	r3,r3,1
   182dc:	1c62b03a 	or	r17,r3,r17
   182e0:	9c400115 	stw	r17,4(r19)
   182e4:	29000115 	stw	r4,4(r5)
   182e8:	2885883a 	add	r2,r5,r2
   182ec:	10c00117 	ldw	r3,4(r2)
   182f0:	29400204 	addi	r5,r5,8
   182f4:	a009883a 	mov	r4,r20
   182f8:	18c00054 	ori	r3,r3,1
   182fc:	10c00115 	stw	r3,4(r2)
   18300:	00160980 	call	16098 <_free_r>
   18304:	003fd306 	br	18254 <__alt_data_end+0xfc018254>
   18308:	017fff04 	movi	r5,-4
   1830c:	414a703a 	and	r5,r8,r5
   18310:	89800404 	addi	r6,r17,16
   18314:	8151883a 	add	r8,r16,r5
   18318:	4180590e 	bge	r8,r6,18480 <_realloc_r+0x390>
   1831c:	1080004c 	andi	r2,r2,1
   18320:	103f9e1e 	bne	r2,zero,1819c <__alt_data_end+0xfc01819c>
   18324:	adbffe17 	ldw	r22,-8(r21)
   18328:	00bfff04 	movi	r2,-4
   1832c:	9dadc83a 	sub	r22,r19,r22
   18330:	b1800117 	ldw	r6,4(r22)
   18334:	3084703a 	and	r2,r6,r2
   18338:	20002026 	beq	r4,zero,183bc <_realloc_r+0x2cc>
   1833c:	80af883a 	add	r23,r16,r2
   18340:	b96f883a 	add	r23,r23,r5
   18344:	21c05f26 	beq	r4,r7,184c4 <_realloc_r+0x3d4>
   18348:	b8c01c16 	blt	r23,r3,183bc <_realloc_r+0x2cc>
   1834c:	20800317 	ldw	r2,12(r4)
   18350:	20c00217 	ldw	r3,8(r4)
   18354:	81bfff04 	addi	r6,r16,-4
   18358:	01000904 	movi	r4,36
   1835c:	18800315 	stw	r2,12(r3)
   18360:	10c00215 	stw	r3,8(r2)
   18364:	b0c00217 	ldw	r3,8(r22)
   18368:	b0800317 	ldw	r2,12(r22)
   1836c:	b4800204 	addi	r18,r22,8
   18370:	18800315 	stw	r2,12(r3)
   18374:	10c00215 	stw	r3,8(r2)
   18378:	21801b36 	bltu	r4,r6,183e8 <_realloc_r+0x2f8>
   1837c:	008004c4 	movi	r2,19
   18380:	1180352e 	bgeu	r2,r6,18458 <_realloc_r+0x368>
   18384:	a8800017 	ldw	r2,0(r21)
   18388:	b0800215 	stw	r2,8(r22)
   1838c:	a8800117 	ldw	r2,4(r21)
   18390:	b0800315 	stw	r2,12(r22)
   18394:	008006c4 	movi	r2,27
   18398:	11807f36 	bltu	r2,r6,18598 <_realloc_r+0x4a8>
   1839c:	b0800404 	addi	r2,r22,16
   183a0:	ad400204 	addi	r21,r21,8
   183a4:	00002d06 	br	1845c <_realloc_r+0x36c>
   183a8:	adbffe17 	ldw	r22,-8(r21)
   183ac:	00bfff04 	movi	r2,-4
   183b0:	9dadc83a 	sub	r22,r19,r22
   183b4:	b1000117 	ldw	r4,4(r22)
   183b8:	2084703a 	and	r2,r4,r2
   183bc:	b03f7726 	beq	r22,zero,1819c <__alt_data_end+0xfc01819c>
   183c0:	80af883a 	add	r23,r16,r2
   183c4:	b8ff7516 	blt	r23,r3,1819c <__alt_data_end+0xfc01819c>
   183c8:	b0800317 	ldw	r2,12(r22)
   183cc:	b0c00217 	ldw	r3,8(r22)
   183d0:	81bfff04 	addi	r6,r16,-4
   183d4:	01000904 	movi	r4,36
   183d8:	18800315 	stw	r2,12(r3)
   183dc:	10c00215 	stw	r3,8(r2)
   183e0:	b4800204 	addi	r18,r22,8
   183e4:	21bfe52e 	bgeu	r4,r6,1837c <__alt_data_end+0xfc01837c>
   183e8:	a80b883a 	mov	r5,r21
   183ec:	9009883a 	mov	r4,r18
   183f0:	0016d740 	call	16d74 <memmove>
   183f4:	b821883a 	mov	r16,r23
   183f8:	b027883a 	mov	r19,r22
   183fc:	003f8a06 	br	18228 <__alt_data_end+0xfc018228>
   18400:	300b883a 	mov	r5,r6
   18404:	dfc00917 	ldw	ra,36(sp)
   18408:	df000817 	ldw	fp,32(sp)
   1840c:	ddc00717 	ldw	r23,28(sp)
   18410:	dd800617 	ldw	r22,24(sp)
   18414:	dd400517 	ldw	r21,20(sp)
   18418:	dd000417 	ldw	r20,16(sp)
   1841c:	dcc00317 	ldw	r19,12(sp)
   18420:	dc800217 	ldw	r18,8(sp)
   18424:	dc400117 	ldw	r17,4(sp)
   18428:	dc000017 	ldw	r16,0(sp)
   1842c:	dec00a04 	addi	sp,sp,40
   18430:	000e7341 	jmpi	e734 <_malloc_r>
   18434:	a8c00017 	ldw	r3,0(r21)
   18438:	90c00015 	stw	r3,0(r18)
   1843c:	a8c00117 	ldw	r3,4(r21)
   18440:	90c00115 	stw	r3,4(r18)
   18444:	00c006c4 	movi	r3,27
   18448:	19804536 	bltu	r3,r6,18560 <_realloc_r+0x470>
   1844c:	90800204 	addi	r2,r18,8
   18450:	a8c00204 	addi	r3,r21,8
   18454:	003f6306 	br	181e4 <__alt_data_end+0xfc0181e4>
   18458:	9005883a 	mov	r2,r18
   1845c:	a8c00017 	ldw	r3,0(r21)
   18460:	b821883a 	mov	r16,r23
   18464:	b027883a 	mov	r19,r22
   18468:	10c00015 	stw	r3,0(r2)
   1846c:	a8c00117 	ldw	r3,4(r21)
   18470:	10c00115 	stw	r3,4(r2)
   18474:	a8c00217 	ldw	r3,8(r21)
   18478:	10c00215 	stw	r3,8(r2)
   1847c:	003f6a06 	br	18228 <__alt_data_end+0xfc018228>
   18480:	9c67883a 	add	r19,r19,r17
   18484:	4445c83a 	sub	r2,r8,r17
   18488:	e4c00215 	stw	r19,8(fp)
   1848c:	10800054 	ori	r2,r2,1
   18490:	98800115 	stw	r2,4(r19)
   18494:	a8bfff17 	ldw	r2,-4(r21)
   18498:	a009883a 	mov	r4,r20
   1849c:	1080004c 	andi	r2,r2,1
   184a0:	1462b03a 	or	r17,r2,r17
   184a4:	ac7fff15 	stw	r17,-4(r21)
   184a8:	001f9380 	call	1f938 <__malloc_unlock>
   184ac:	a805883a 	mov	r2,r21
   184b0:	003f6b06 	br	18260 <__alt_data_end+0xfc018260>
   184b4:	a80b883a 	mov	r5,r21
   184b8:	9009883a 	mov	r4,r18
   184bc:	0016d740 	call	16d74 <memmove>
   184c0:	003f4e06 	br	181fc <__alt_data_end+0xfc0181fc>
   184c4:	89000404 	addi	r4,r17,16
   184c8:	b93fbc16 	blt	r23,r4,183bc <__alt_data_end+0xfc0183bc>
   184cc:	b0800317 	ldw	r2,12(r22)
   184d0:	b0c00217 	ldw	r3,8(r22)
   184d4:	81bfff04 	addi	r6,r16,-4
   184d8:	01000904 	movi	r4,36
   184dc:	18800315 	stw	r2,12(r3)
   184e0:	10c00215 	stw	r3,8(r2)
   184e4:	b4800204 	addi	r18,r22,8
   184e8:	21804336 	bltu	r4,r6,185f8 <_realloc_r+0x508>
   184ec:	008004c4 	movi	r2,19
   184f0:	11803f2e 	bgeu	r2,r6,185f0 <_realloc_r+0x500>
   184f4:	a8800017 	ldw	r2,0(r21)
   184f8:	b0800215 	stw	r2,8(r22)
   184fc:	a8800117 	ldw	r2,4(r21)
   18500:	b0800315 	stw	r2,12(r22)
   18504:	008006c4 	movi	r2,27
   18508:	11803f36 	bltu	r2,r6,18608 <_realloc_r+0x518>
   1850c:	b0800404 	addi	r2,r22,16
   18510:	ad400204 	addi	r21,r21,8
   18514:	a8c00017 	ldw	r3,0(r21)
   18518:	10c00015 	stw	r3,0(r2)
   1851c:	a8c00117 	ldw	r3,4(r21)
   18520:	10c00115 	stw	r3,4(r2)
   18524:	a8c00217 	ldw	r3,8(r21)
   18528:	10c00215 	stw	r3,8(r2)
   1852c:	b447883a 	add	r3,r22,r17
   18530:	bc45c83a 	sub	r2,r23,r17
   18534:	e0c00215 	stw	r3,8(fp)
   18538:	10800054 	ori	r2,r2,1
   1853c:	18800115 	stw	r2,4(r3)
   18540:	b0800117 	ldw	r2,4(r22)
   18544:	a009883a 	mov	r4,r20
   18548:	1080004c 	andi	r2,r2,1
   1854c:	1462b03a 	or	r17,r2,r17
   18550:	b4400115 	stw	r17,4(r22)
   18554:	001f9380 	call	1f938 <__malloc_unlock>
   18558:	9005883a 	mov	r2,r18
   1855c:	003f4006 	br	18260 <__alt_data_end+0xfc018260>
   18560:	a8c00217 	ldw	r3,8(r21)
   18564:	90c00215 	stw	r3,8(r18)
   18568:	a8c00317 	ldw	r3,12(r21)
   1856c:	90c00315 	stw	r3,12(r18)
   18570:	30801126 	beq	r6,r2,185b8 <_realloc_r+0x4c8>
   18574:	90800404 	addi	r2,r18,16
   18578:	a8c00404 	addi	r3,r21,16
   1857c:	003f1906 	br	181e4 <__alt_data_end+0xfc0181e4>
   18580:	90ffff17 	ldw	r3,-4(r18)
   18584:	00bfff04 	movi	r2,-4
   18588:	a825883a 	mov	r18,r21
   1858c:	1884703a 	and	r2,r3,r2
   18590:	80a1883a 	add	r16,r16,r2
   18594:	003f2406 	br	18228 <__alt_data_end+0xfc018228>
   18598:	a8800217 	ldw	r2,8(r21)
   1859c:	b0800415 	stw	r2,16(r22)
   185a0:	a8800317 	ldw	r2,12(r21)
   185a4:	b0800515 	stw	r2,20(r22)
   185a8:	31000a26 	beq	r6,r4,185d4 <_realloc_r+0x4e4>
   185ac:	b0800604 	addi	r2,r22,24
   185b0:	ad400404 	addi	r21,r21,16
   185b4:	003fa906 	br	1845c <__alt_data_end+0xfc01845c>
   185b8:	a9000417 	ldw	r4,16(r21)
   185bc:	90800604 	addi	r2,r18,24
   185c0:	a8c00604 	addi	r3,r21,24
   185c4:	91000415 	stw	r4,16(r18)
   185c8:	a9000517 	ldw	r4,20(r21)
   185cc:	91000515 	stw	r4,20(r18)
   185d0:	003f0406 	br	181e4 <__alt_data_end+0xfc0181e4>
   185d4:	a8c00417 	ldw	r3,16(r21)
   185d8:	ad400604 	addi	r21,r21,24
   185dc:	b0800804 	addi	r2,r22,32
   185e0:	b0c00615 	stw	r3,24(r22)
   185e4:	a8ffff17 	ldw	r3,-4(r21)
   185e8:	b0c00715 	stw	r3,28(r22)
   185ec:	003f9b06 	br	1845c <__alt_data_end+0xfc01845c>
   185f0:	9005883a 	mov	r2,r18
   185f4:	003fc706 	br	18514 <__alt_data_end+0xfc018514>
   185f8:	a80b883a 	mov	r5,r21
   185fc:	9009883a 	mov	r4,r18
   18600:	0016d740 	call	16d74 <memmove>
   18604:	003fc906 	br	1852c <__alt_data_end+0xfc01852c>
   18608:	a8800217 	ldw	r2,8(r21)
   1860c:	b0800415 	stw	r2,16(r22)
   18610:	a8800317 	ldw	r2,12(r21)
   18614:	b0800515 	stw	r2,20(r22)
   18618:	31000726 	beq	r6,r4,18638 <_realloc_r+0x548>
   1861c:	b0800604 	addi	r2,r22,24
   18620:	ad400404 	addi	r21,r21,16
   18624:	003fbb06 	br	18514 <__alt_data_end+0xfc018514>
   18628:	a009883a 	mov	r4,r20
   1862c:	001f9380 	call	1f938 <__malloc_unlock>
   18630:	0005883a 	mov	r2,zero
   18634:	003f0a06 	br	18260 <__alt_data_end+0xfc018260>
   18638:	a8c00417 	ldw	r3,16(r21)
   1863c:	ad400604 	addi	r21,r21,24
   18640:	b0800804 	addi	r2,r22,32
   18644:	b0c00615 	stw	r3,24(r22)
   18648:	a8ffff17 	ldw	r3,-4(r21)
   1864c:	b0c00715 	stw	r3,28(r22)
   18650:	003fb006 	br	18514 <__alt_data_end+0xfc018514>

00018654 <__fpclassifyd>:
   18654:	00a00034 	movhi	r2,32768
   18658:	10bfffc4 	addi	r2,r2,-1
   1865c:	2884703a 	and	r2,r5,r2
   18660:	10000726 	beq	r2,zero,18680 <__fpclassifyd+0x2c>
   18664:	00fffc34 	movhi	r3,65520
   18668:	019ff834 	movhi	r6,32736
   1866c:	28c7883a 	add	r3,r5,r3
   18670:	31bfffc4 	addi	r6,r6,-1
   18674:	30c00536 	bltu	r6,r3,1868c <__fpclassifyd+0x38>
   18678:	00800104 	movi	r2,4
   1867c:	f800283a 	ret
   18680:	2000021e 	bne	r4,zero,1868c <__fpclassifyd+0x38>
   18684:	00800084 	movi	r2,2
   18688:	f800283a 	ret
   1868c:	00dffc34 	movhi	r3,32752
   18690:	019ff834 	movhi	r6,32736
   18694:	28cb883a 	add	r5,r5,r3
   18698:	31bfffc4 	addi	r6,r6,-1
   1869c:	317ff62e 	bgeu	r6,r5,18678 <__alt_data_end+0xfc018678>
   186a0:	01400434 	movhi	r5,16
   186a4:	297fffc4 	addi	r5,r5,-1
   186a8:	28800236 	bltu	r5,r2,186b4 <__fpclassifyd+0x60>
   186ac:	008000c4 	movi	r2,3
   186b0:	f800283a 	ret
   186b4:	10c00226 	beq	r2,r3,186c0 <__fpclassifyd+0x6c>
   186b8:	0005883a 	mov	r2,zero
   186bc:	f800283a 	ret
   186c0:	2005003a 	cmpeq	r2,r4,zero
   186c4:	f800283a 	ret

000186c8 <__sread>:
   186c8:	defffe04 	addi	sp,sp,-8
   186cc:	dc000015 	stw	r16,0(sp)
   186d0:	2821883a 	mov	r16,r5
   186d4:	2940038f 	ldh	r5,14(r5)
   186d8:	dfc00115 	stw	ra,4(sp)
   186dc:	001bb700 	call	1bb70 <_read_r>
   186e0:	10000716 	blt	r2,zero,18700 <__sread+0x38>
   186e4:	80c01417 	ldw	r3,80(r16)
   186e8:	1887883a 	add	r3,r3,r2
   186ec:	80c01415 	stw	r3,80(r16)
   186f0:	dfc00117 	ldw	ra,4(sp)
   186f4:	dc000017 	ldw	r16,0(sp)
   186f8:	dec00204 	addi	sp,sp,8
   186fc:	f800283a 	ret
   18700:	80c0030b 	ldhu	r3,12(r16)
   18704:	18fbffcc 	andi	r3,r3,61439
   18708:	80c0030d 	sth	r3,12(r16)
   1870c:	dfc00117 	ldw	ra,4(sp)
   18710:	dc000017 	ldw	r16,0(sp)
   18714:	dec00204 	addi	sp,sp,8
   18718:	f800283a 	ret

0001871c <__seofread>:
   1871c:	0005883a 	mov	r2,zero
   18720:	f800283a 	ret

00018724 <__swrite>:
   18724:	2880030b 	ldhu	r2,12(r5)
   18728:	defffb04 	addi	sp,sp,-20
   1872c:	dcc00315 	stw	r19,12(sp)
   18730:	dc800215 	stw	r18,8(sp)
   18734:	dc400115 	stw	r17,4(sp)
   18738:	dc000015 	stw	r16,0(sp)
   1873c:	dfc00415 	stw	ra,16(sp)
   18740:	10c0400c 	andi	r3,r2,256
   18744:	2821883a 	mov	r16,r5
   18748:	2023883a 	mov	r17,r4
   1874c:	3025883a 	mov	r18,r6
   18750:	3827883a 	mov	r19,r7
   18754:	18000526 	beq	r3,zero,1876c <__swrite+0x48>
   18758:	2940038f 	ldh	r5,14(r5)
   1875c:	01c00084 	movi	r7,2
   18760:	000d883a 	mov	r6,zero
   18764:	001bb100 	call	1bb10 <_lseek_r>
   18768:	8080030b 	ldhu	r2,12(r16)
   1876c:	8140038f 	ldh	r5,14(r16)
   18770:	10bbffcc 	andi	r2,r2,61439
   18774:	980f883a 	mov	r7,r19
   18778:	900d883a 	mov	r6,r18
   1877c:	8809883a 	mov	r4,r17
   18780:	8080030d 	sth	r2,12(r16)
   18784:	dfc00417 	ldw	ra,16(sp)
   18788:	dcc00317 	ldw	r19,12(sp)
   1878c:	dc800217 	ldw	r18,8(sp)
   18790:	dc400117 	ldw	r17,4(sp)
   18794:	dc000017 	ldw	r16,0(sp)
   18798:	dec00504 	addi	sp,sp,20
   1879c:	001b5c41 	jmpi	1b5c4 <_write_r>

000187a0 <__sseek>:
   187a0:	defffe04 	addi	sp,sp,-8
   187a4:	dc000015 	stw	r16,0(sp)
   187a8:	2821883a 	mov	r16,r5
   187ac:	2940038f 	ldh	r5,14(r5)
   187b0:	dfc00115 	stw	ra,4(sp)
   187b4:	001bb100 	call	1bb10 <_lseek_r>
   187b8:	00ffffc4 	movi	r3,-1
   187bc:	10c00826 	beq	r2,r3,187e0 <__sseek+0x40>
   187c0:	80c0030b 	ldhu	r3,12(r16)
   187c4:	80801415 	stw	r2,80(r16)
   187c8:	18c40014 	ori	r3,r3,4096
   187cc:	80c0030d 	sth	r3,12(r16)
   187d0:	dfc00117 	ldw	ra,4(sp)
   187d4:	dc000017 	ldw	r16,0(sp)
   187d8:	dec00204 	addi	sp,sp,8
   187dc:	f800283a 	ret
   187e0:	80c0030b 	ldhu	r3,12(r16)
   187e4:	18fbffcc 	andi	r3,r3,61439
   187e8:	80c0030d 	sth	r3,12(r16)
   187ec:	dfc00117 	ldw	ra,4(sp)
   187f0:	dc000017 	ldw	r16,0(sp)
   187f4:	dec00204 	addi	sp,sp,8
   187f8:	f800283a 	ret

000187fc <__sclose>:
   187fc:	2940038f 	ldh	r5,14(r5)
   18800:	001b6241 	jmpi	1b624 <_close_r>

00018804 <__ssprint_r>:
   18804:	30800217 	ldw	r2,8(r6)
   18808:	defff604 	addi	sp,sp,-40
   1880c:	dc800215 	stw	r18,8(sp)
   18810:	dfc00915 	stw	ra,36(sp)
   18814:	df000815 	stw	fp,32(sp)
   18818:	ddc00715 	stw	r23,28(sp)
   1881c:	dd800615 	stw	r22,24(sp)
   18820:	dd400515 	stw	r21,20(sp)
   18824:	dd000415 	stw	r20,16(sp)
   18828:	dcc00315 	stw	r19,12(sp)
   1882c:	dc400115 	stw	r17,4(sp)
   18830:	dc000015 	stw	r16,0(sp)
   18834:	3025883a 	mov	r18,r6
   18838:	10005826 	beq	r2,zero,1899c <__ssprint_r+0x198>
   1883c:	2027883a 	mov	r19,r4
   18840:	35c00017 	ldw	r23,0(r6)
   18844:	29000017 	ldw	r4,0(r5)
   18848:	28800217 	ldw	r2,8(r5)
   1884c:	2823883a 	mov	r17,r5
   18850:	0039883a 	mov	fp,zero
   18854:	0021883a 	mov	r16,zero
   18858:	80003926 	beq	r16,zero,18940 <__ssprint_r+0x13c>
   1885c:	102b883a 	mov	r21,r2
   18860:	102d883a 	mov	r22,r2
   18864:	80803a36 	bltu	r16,r2,18950 <__ssprint_r+0x14c>
   18868:	88c0030b 	ldhu	r3,12(r17)
   1886c:	1881200c 	andi	r2,r3,1152
   18870:	10002626 	beq	r2,zero,1890c <__ssprint_r+0x108>
   18874:	88800517 	ldw	r2,20(r17)
   18878:	89400417 	ldw	r5,16(r17)
   1887c:	81800044 	addi	r6,r16,1
   18880:	108f883a 	add	r7,r2,r2
   18884:	3885883a 	add	r2,r7,r2
   18888:	100ed7fa 	srli	r7,r2,31
   1888c:	216dc83a 	sub	r22,r4,r5
   18890:	3589883a 	add	r4,r6,r22
   18894:	3885883a 	add	r2,r7,r2
   18898:	102bd07a 	srai	r21,r2,1
   1889c:	a80d883a 	mov	r6,r21
   188a0:	a900022e 	bgeu	r21,r4,188ac <__ssprint_r+0xa8>
   188a4:	202b883a 	mov	r21,r4
   188a8:	200d883a 	mov	r6,r4
   188ac:	18c1000c 	andi	r3,r3,1024
   188b0:	18002a26 	beq	r3,zero,1895c <__ssprint_r+0x158>
   188b4:	300b883a 	mov	r5,r6
   188b8:	9809883a 	mov	r4,r19
   188bc:	000e7340 	call	e734 <_malloc_r>
   188c0:	1029883a 	mov	r20,r2
   188c4:	10002c26 	beq	r2,zero,18978 <__ssprint_r+0x174>
   188c8:	89400417 	ldw	r5,16(r17)
   188cc:	b00d883a 	mov	r6,r22
   188d0:	1009883a 	mov	r4,r2
   188d4:	000ef400 	call	ef40 <memcpy>
   188d8:	8880030b 	ldhu	r2,12(r17)
   188dc:	00fedfc4 	movi	r3,-1153
   188e0:	10c4703a 	and	r2,r2,r3
   188e4:	10802014 	ori	r2,r2,128
   188e8:	8880030d 	sth	r2,12(r17)
   188ec:	a589883a 	add	r4,r20,r22
   188f0:	adadc83a 	sub	r22,r21,r22
   188f4:	8d400515 	stw	r21,20(r17)
   188f8:	8d800215 	stw	r22,8(r17)
   188fc:	8d000415 	stw	r20,16(r17)
   18900:	89000015 	stw	r4,0(r17)
   18904:	802b883a 	mov	r21,r16
   18908:	802d883a 	mov	r22,r16
   1890c:	b00d883a 	mov	r6,r22
   18910:	e00b883a 	mov	r5,fp
   18914:	0016d740 	call	16d74 <memmove>
   18918:	88800217 	ldw	r2,8(r17)
   1891c:	89000017 	ldw	r4,0(r17)
   18920:	90c00217 	ldw	r3,8(r18)
   18924:	1545c83a 	sub	r2,r2,r21
   18928:	2589883a 	add	r4,r4,r22
   1892c:	88800215 	stw	r2,8(r17)
   18930:	89000015 	stw	r4,0(r17)
   18934:	1c21c83a 	sub	r16,r3,r16
   18938:	94000215 	stw	r16,8(r18)
   1893c:	80001726 	beq	r16,zero,1899c <__ssprint_r+0x198>
   18940:	bf000017 	ldw	fp,0(r23)
   18944:	bc000117 	ldw	r16,4(r23)
   18948:	bdc00204 	addi	r23,r23,8
   1894c:	003fc206 	br	18858 <__alt_data_end+0xfc018858>
   18950:	802b883a 	mov	r21,r16
   18954:	802d883a 	mov	r22,r16
   18958:	003fec06 	br	1890c <__alt_data_end+0xfc01890c>
   1895c:	9809883a 	mov	r4,r19
   18960:	00180f00 	call	180f0 <_realloc_r>
   18964:	1029883a 	mov	r20,r2
   18968:	103fe01e 	bne	r2,zero,188ec <__alt_data_end+0xfc0188ec>
   1896c:	89400417 	ldw	r5,16(r17)
   18970:	9809883a 	mov	r4,r19
   18974:	00160980 	call	16098 <_free_r>
   18978:	88c0030b 	ldhu	r3,12(r17)
   1897c:	00800304 	movi	r2,12
   18980:	98800015 	stw	r2,0(r19)
   18984:	18c01014 	ori	r3,r3,64
   18988:	88c0030d 	sth	r3,12(r17)
   1898c:	00bfffc4 	movi	r2,-1
   18990:	90000215 	stw	zero,8(r18)
   18994:	90000115 	stw	zero,4(r18)
   18998:	00000206 	br	189a4 <__ssprint_r+0x1a0>
   1899c:	90000115 	stw	zero,4(r18)
   189a0:	0005883a 	mov	r2,zero
   189a4:	dfc00917 	ldw	ra,36(sp)
   189a8:	df000817 	ldw	fp,32(sp)
   189ac:	ddc00717 	ldw	r23,28(sp)
   189b0:	dd800617 	ldw	r22,24(sp)
   189b4:	dd400517 	ldw	r21,20(sp)
   189b8:	dd000417 	ldw	r20,16(sp)
   189bc:	dcc00317 	ldw	r19,12(sp)
   189c0:	dc800217 	ldw	r18,8(sp)
   189c4:	dc400117 	ldw	r17,4(sp)
   189c8:	dc000017 	ldw	r16,0(sp)
   189cc:	dec00a04 	addi	sp,sp,40
   189d0:	f800283a 	ret

000189d4 <___svfiprintf_internal_r>:
   189d4:	2880030b 	ldhu	r2,12(r5)
   189d8:	deffc804 	addi	sp,sp,-224
   189dc:	dcc03115 	stw	r19,196(sp)
   189e0:	dfc03715 	stw	ra,220(sp)
   189e4:	df003615 	stw	fp,216(sp)
   189e8:	ddc03515 	stw	r23,212(sp)
   189ec:	dd803415 	stw	r22,208(sp)
   189f0:	dd403315 	stw	r21,204(sp)
   189f4:	dd003215 	stw	r20,200(sp)
   189f8:	dc803015 	stw	r18,192(sp)
   189fc:	dc402f15 	stw	r17,188(sp)
   18a00:	dc002e15 	stw	r16,184(sp)
   18a04:	d9402315 	stw	r5,140(sp)
   18a08:	d9002715 	stw	r4,156(sp)
   18a0c:	1080200c 	andi	r2,r2,128
   18a10:	d9c02415 	stw	r7,144(sp)
   18a14:	3027883a 	mov	r19,r6
   18a18:	10000226 	beq	r2,zero,18a24 <___svfiprintf_internal_r+0x50>
   18a1c:	28800417 	ldw	r2,16(r5)
   18a20:	10046d26 	beq	r2,zero,19bd8 <___svfiprintf_internal_r+0x1204>
   18a24:	d8801a04 	addi	r2,sp,104
   18a28:	d8c019c4 	addi	r3,sp,103
   18a2c:	058000f4 	movhi	r22,3
   18a30:	10c9c83a 	sub	r4,r2,r3
   18a34:	b5abb904 	addi	r22,r22,-20764
   18a38:	d8801e15 	stw	r2,120(sp)
   18a3c:	d8c01f15 	stw	r3,124(sp)
   18a40:	dec01a15 	stw	sp,104(sp)
   18a44:	d8001c15 	stw	zero,112(sp)
   18a48:	d8001b15 	stw	zero,108(sp)
   18a4c:	d811883a 	mov	r8,sp
   18a50:	d8002915 	stw	zero,164(sp)
   18a54:	d8002615 	stw	zero,152(sp)
   18a58:	d9002c15 	stw	r4,176(sp)
   18a5c:	98800007 	ldb	r2,0(r19)
   18a60:	10031426 	beq	r2,zero,196b4 <___svfiprintf_internal_r+0xce0>
   18a64:	00c00944 	movi	r3,37
   18a68:	9825883a 	mov	r18,r19
   18a6c:	10c0021e 	bne	r2,r3,18a78 <___svfiprintf_internal_r+0xa4>
   18a70:	00001406 	br	18ac4 <___svfiprintf_internal_r+0xf0>
   18a74:	10c00326 	beq	r2,r3,18a84 <___svfiprintf_internal_r+0xb0>
   18a78:	94800044 	addi	r18,r18,1
   18a7c:	90800007 	ldb	r2,0(r18)
   18a80:	103ffc1e 	bne	r2,zero,18a74 <__alt_data_end+0xfc018a74>
   18a84:	94e1c83a 	sub	r16,r18,r19
   18a88:	80000e26 	beq	r16,zero,18ac4 <___svfiprintf_internal_r+0xf0>
   18a8c:	d8c01c17 	ldw	r3,112(sp)
   18a90:	d8801b17 	ldw	r2,108(sp)
   18a94:	44c00015 	stw	r19,0(r8)
   18a98:	1c07883a 	add	r3,r3,r16
   18a9c:	10800044 	addi	r2,r2,1
   18aa0:	d8c01c15 	stw	r3,112(sp)
   18aa4:	44000115 	stw	r16,4(r8)
   18aa8:	d8801b15 	stw	r2,108(sp)
   18aac:	00c001c4 	movi	r3,7
   18ab0:	18835c16 	blt	r3,r2,19824 <___svfiprintf_internal_r+0xe50>
   18ab4:	42000204 	addi	r8,r8,8
   18ab8:	d9402617 	ldw	r5,152(sp)
   18abc:	2c0b883a 	add	r5,r5,r16
   18ac0:	d9402615 	stw	r5,152(sp)
   18ac4:	90800007 	ldb	r2,0(r18)
   18ac8:	1002fc26 	beq	r2,zero,196bc <___svfiprintf_internal_r+0xce8>
   18acc:	0023883a 	mov	r17,zero
   18ad0:	00bfffc4 	movi	r2,-1
   18ad4:	0021883a 	mov	r16,zero
   18ad8:	94c00044 	addi	r19,r18,1
   18adc:	90c00047 	ldb	r3,1(r18)
   18ae0:	dc402105 	stb	r17,132(sp)
   18ae4:	d8001d85 	stb	zero,118(sp)
   18ae8:	002b883a 	mov	r21,zero
   18aec:	d8802015 	stw	r2,128(sp)
   18af0:	d8002515 	stw	zero,148(sp)
   18af4:	04801604 	movi	r18,88
   18af8:	05000244 	movi	r20,9
   18afc:	402f883a 	mov	r23,r8
   18b00:	8023883a 	mov	r17,r16
   18b04:	9cc00044 	addi	r19,r19,1
   18b08:	18bff804 	addi	r2,r3,-32
   18b0c:	9081fb36 	bltu	r18,r2,192fc <___svfiprintf_internal_r+0x928>
   18b10:	100490ba 	slli	r2,r2,2
   18b14:	010000b4 	movhi	r4,2
   18b18:	2122ca04 	addi	r4,r4,-29912
   18b1c:	1105883a 	add	r2,r2,r4
   18b20:	10800017 	ldw	r2,0(r2)
   18b24:	1000683a 	jmp	r2
   18b28:	00018d28 	cmpgeui	zero,zero,1588
   18b2c:	000192fc 	xorhi	zero,zero,1611
   18b30:	000192fc 	xorhi	zero,zero,1611
   18b34:	00018d1c 	xori	zero,zero,1588
   18b38:	000192fc 	xorhi	zero,zero,1611
   18b3c:	000192fc 	xorhi	zero,zero,1611
   18b40:	000192fc 	xorhi	zero,zero,1611
   18b44:	000192fc 	xorhi	zero,zero,1611
   18b48:	000192fc 	xorhi	zero,zero,1611
   18b4c:	000192fc 	xorhi	zero,zero,1611
   18b50:	00018c8c 	andi	zero,zero,1586
   18b54:	00018e88 	cmpgei	zero,zero,1594
   18b58:	000192fc 	xorhi	zero,zero,1611
   18b5c:	00018cb4 	movhi	zero,1586
   18b60:	00019338 	rdprs	zero,zero,1612
   18b64:	000192fc 	xorhi	zero,zero,1611
   18b68:	0001932c 	andhi	zero,zero,1612
   18b6c:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b70:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b74:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b78:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b7c:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b80:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b84:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b88:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b8c:	000192c0 	call	192c <_ZN3USB4TaskEv+0x110>
   18b90:	000192fc 	xorhi	zero,zero,1611
   18b94:	000192fc 	xorhi	zero,zero,1611
   18b98:	000192fc 	xorhi	zero,zero,1611
   18b9c:	000192fc 	xorhi	zero,zero,1611
   18ba0:	000192fc 	xorhi	zero,zero,1611
   18ba4:	000192fc 	xorhi	zero,zero,1611
   18ba8:	000192fc 	xorhi	zero,zero,1611
   18bac:	000192fc 	xorhi	zero,zero,1611
   18bb0:	000192fc 	xorhi	zero,zero,1611
   18bb4:	000192fc 	xorhi	zero,zero,1611
   18bb8:	00019244 	movi	zero,1609
   18bbc:	000192fc 	xorhi	zero,zero,1611
   18bc0:	000192fc 	xorhi	zero,zero,1611
   18bc4:	000192fc 	xorhi	zero,zero,1611
   18bc8:	000192fc 	xorhi	zero,zero,1611
   18bcc:	000192fc 	xorhi	zero,zero,1611
   18bd0:	000192fc 	xorhi	zero,zero,1611
   18bd4:	000192fc 	xorhi	zero,zero,1611
   18bd8:	000192fc 	xorhi	zero,zero,1611
   18bdc:	000192fc 	xorhi	zero,zero,1611
   18be0:	000192fc 	xorhi	zero,zero,1611
   18be4:	000193f4 	movhi	zero,1615
   18be8:	000192fc 	xorhi	zero,zero,1611
   18bec:	000192fc 	xorhi	zero,zero,1611
   18bf0:	000192fc 	xorhi	zero,zero,1611
   18bf4:	000192fc 	xorhi	zero,zero,1611
   18bf8:	000192fc 	xorhi	zero,zero,1611
   18bfc:	00019380 	call	1938 <_ZN3USB4TaskEv+0x11c>
   18c00:	000192fc 	xorhi	zero,zero,1611
   18c04:	000192fc 	xorhi	zero,zero,1611
   18c08:	00019080 	call	1908 <_ZN3USB4TaskEv+0xec>
   18c0c:	000192fc 	xorhi	zero,zero,1611
   18c10:	000192fc 	xorhi	zero,zero,1611
   18c14:	000192fc 	xorhi	zero,zero,1611
   18c18:	000192fc 	xorhi	zero,zero,1611
   18c1c:	000192fc 	xorhi	zero,zero,1611
   18c20:	000192fc 	xorhi	zero,zero,1611
   18c24:	000192fc 	xorhi	zero,zero,1611
   18c28:	000192fc 	xorhi	zero,zero,1611
   18c2c:	000192fc 	xorhi	zero,zero,1611
   18c30:	000192fc 	xorhi	zero,zero,1611
   18c34:	00018f4c 	andi	zero,zero,1597
   18c38:	00019130 	cmpltui	zero,zero,1604
   18c3c:	000192fc 	xorhi	zero,zero,1611
   18c40:	000192fc 	xorhi	zero,zero,1611
   18c44:	000192fc 	xorhi	zero,zero,1611
   18c48:	00019124 	muli	zero,zero,1604
   18c4c:	00019130 	cmpltui	zero,zero,1604
   18c50:	000192fc 	xorhi	zero,zero,1611
   18c54:	000192fc 	xorhi	zero,zero,1611
   18c58:	00019110 	cmplti	zero,zero,1604
   18c5c:	000192fc 	xorhi	zero,zero,1611
   18c60:	000190d0 	cmplti	zero,zero,1603
   18c64:	00018e9c 	xori	zero,zero,1594
   18c68:	00018cc0 	call	18cc <_ZN3USB4TaskEv+0xb0>
   18c6c:	00019238 	rdprs	zero,zero,1608
   18c70:	000192fc 	xorhi	zero,zero,1611
   18c74:	000191e4 	muli	zero,zero,1607
   18c78:	000192fc 	xorhi	zero,zero,1611
   18c7c:	00018e00 	call	18e0 <_ZN3USB4TaskEv+0xc4>
   18c80:	000192fc 	xorhi	zero,zero,1611
   18c84:	000192fc 	xorhi	zero,zero,1611
   18c88:	00018d4c 	andi	zero,zero,1589
   18c8c:	d9002417 	ldw	r4,144(sp)
   18c90:	d9402417 	ldw	r5,144(sp)
   18c94:	21000017 	ldw	r4,0(r4)
   18c98:	28800104 	addi	r2,r5,4
   18c9c:	d9002515 	stw	r4,148(sp)
   18ca0:	20032b0e 	bge	r4,zero,19950 <___svfiprintf_internal_r+0xf7c>
   18ca4:	d8c02517 	ldw	r3,148(sp)
   18ca8:	d8802415 	stw	r2,144(sp)
   18cac:	00c7c83a 	sub	r3,zero,r3
   18cb0:	d8c02515 	stw	r3,148(sp)
   18cb4:	8c400114 	ori	r17,r17,4
   18cb8:	98c00007 	ldb	r3,0(r19)
   18cbc:	003f9106 	br	18b04 <__alt_data_end+0xfc018b04>
   18cc0:	00800c04 	movi	r2,48
   18cc4:	d9402417 	ldw	r5,144(sp)
   18cc8:	d9002017 	ldw	r4,128(sp)
   18ccc:	d8801d05 	stb	r2,116(sp)
   18cd0:	00801e04 	movi	r2,120
   18cd4:	d8801d45 	stb	r2,117(sp)
   18cd8:	d8001d85 	stb	zero,118(sp)
   18cdc:	b811883a 	mov	r8,r23
   18ce0:	28c00104 	addi	r3,r5,4
   18ce4:	2c800017 	ldw	r18,0(r5)
   18ce8:	0029883a 	mov	r20,zero
   18cec:	88800094 	ori	r2,r17,2
   18cf0:	20036316 	blt	r4,zero,19a80 <___svfiprintf_internal_r+0x10ac>
   18cf4:	00bfdfc4 	movi	r2,-129
   18cf8:	88a0703a 	and	r16,r17,r2
   18cfc:	d8c02415 	stw	r3,144(sp)
   18d00:	84000094 	ori	r16,r16,2
   18d04:	90031c26 	beq	r18,zero,19978 <___svfiprintf_internal_r+0xfa4>
   18d08:	014000f4 	movhi	r5,3
   18d0c:	296b5104 	addi	r5,r5,-21180
   18d10:	002b883a 	mov	r21,zero
   18d14:	d9402915 	stw	r5,164(sp)
   18d18:	00002906 	br	18dc0 <___svfiprintf_internal_r+0x3ec>
   18d1c:	8c400054 	ori	r17,r17,1
   18d20:	98c00007 	ldb	r3,0(r19)
   18d24:	003f7706 	br	18b04 <__alt_data_end+0xfc018b04>
   18d28:	a8803fcc 	andi	r2,r21,255
   18d2c:	1080201c 	xori	r2,r2,128
   18d30:	10bfe004 	addi	r2,r2,-128
   18d34:	10032a1e 	bne	r2,zero,199e0 <___svfiprintf_internal_r+0x100c>
   18d38:	00c00044 	movi	r3,1
   18d3c:	d8c02105 	stb	r3,132(sp)
   18d40:	05400804 	movi	r21,32
   18d44:	98c00007 	ldb	r3,0(r19)
   18d48:	003f6e06 	br	18b04 <__alt_data_end+0xfc018b04>
   18d4c:	8821883a 	mov	r16,r17
   18d50:	dc402103 	ldbu	r17,132(sp)
   18d54:	b811883a 	mov	r8,r23
   18d58:	8c403fcc 	andi	r17,r17,255
   18d5c:	8803f01e 	bne	r17,zero,19d20 <___svfiprintf_internal_r+0x134c>
   18d60:	008000f4 	movhi	r2,3
   18d64:	10ab5104 	addi	r2,r2,-21180
   18d68:	d8802915 	stw	r2,164(sp)
   18d6c:	8080080c 	andi	r2,r16,32
   18d70:	1000cd26 	beq	r2,zero,190a8 <___svfiprintf_internal_r+0x6d4>
   18d74:	d9002417 	ldw	r4,144(sp)
   18d78:	24800017 	ldw	r18,0(r4)
   18d7c:	25000117 	ldw	r20,4(r4)
   18d80:	21000204 	addi	r4,r4,8
   18d84:	d9002415 	stw	r4,144(sp)
   18d88:	8080004c 	andi	r2,r16,1
   18d8c:	1002c726 	beq	r2,zero,198ac <___svfiprintf_internal_r+0xed8>
   18d90:	9504b03a 	or	r2,r18,r20
   18d94:	1003061e 	bne	r2,zero,199b0 <___svfiprintf_internal_r+0xfdc>
   18d98:	d9002017 	ldw	r4,128(sp)
   18d9c:	d8001d85 	stb	zero,118(sp)
   18da0:	20033e16 	blt	r4,zero,19a9c <___svfiprintf_internal_r+0x10c8>
   18da4:	00bfdfc4 	movi	r2,-129
   18da8:	80a0703a 	and	r16,r16,r2
   18dac:	d9402017 	ldw	r5,128(sp)
   18db0:	002b883a 	mov	r21,zero
   18db4:	28002826 	beq	r5,zero,18e58 <___svfiprintf_internal_r+0x484>
   18db8:	0025883a 	mov	r18,zero
   18dbc:	0029883a 	mov	r20,zero
   18dc0:	d9002917 	ldw	r4,164(sp)
   18dc4:	dc401a04 	addi	r17,sp,104
   18dc8:	908003cc 	andi	r2,r18,15
   18dcc:	a006973a 	slli	r3,r20,28
   18dd0:	2085883a 	add	r2,r4,r2
   18dd4:	9024d13a 	srli	r18,r18,4
   18dd8:	10800003 	ldbu	r2,0(r2)
   18ddc:	a028d13a 	srli	r20,r20,4
   18de0:	8c7fffc4 	addi	r17,r17,-1
   18de4:	1ca4b03a 	or	r18,r3,r18
   18de8:	88800005 	stb	r2,0(r17)
   18dec:	9504b03a 	or	r2,r18,r20
   18df0:	103ff51e 	bne	r2,zero,18dc8 <__alt_data_end+0xfc018dc8>
   18df4:	d8801e17 	ldw	r2,120(sp)
   18df8:	1469c83a 	sub	r20,r2,r17
   18dfc:	00001906 	br	18e64 <___svfiprintf_internal_r+0x490>
   18e00:	8821883a 	mov	r16,r17
   18e04:	dc402103 	ldbu	r17,132(sp)
   18e08:	b811883a 	mov	r8,r23
   18e0c:	8c403fcc 	andi	r17,r17,255
   18e10:	8803d01e 	bne	r17,zero,19d54 <___svfiprintf_internal_r+0x1380>
   18e14:	8080080c 	andi	r2,r16,32
   18e18:	10016126 	beq	r2,zero,193a0 <___svfiprintf_internal_r+0x9cc>
   18e1c:	d9002417 	ldw	r4,144(sp)
   18e20:	d9402017 	ldw	r5,128(sp)
   18e24:	d8001d85 	stb	zero,118(sp)
   18e28:	20c00204 	addi	r3,r4,8
   18e2c:	24800017 	ldw	r18,0(r4)
   18e30:	25000117 	ldw	r20,4(r4)
   18e34:	28030f16 	blt	r5,zero,19a74 <___svfiprintf_internal_r+0x10a0>
   18e38:	013fdfc4 	movi	r4,-129
   18e3c:	9504b03a 	or	r2,r18,r20
   18e40:	d8c02415 	stw	r3,144(sp)
   18e44:	8120703a 	and	r16,r16,r4
   18e48:	002b883a 	mov	r21,zero
   18e4c:	1000cd1e 	bne	r2,zero,19184 <___svfiprintf_internal_r+0x7b0>
   18e50:	d8c02017 	ldw	r3,128(sp)
   18e54:	1803141e 	bne	r3,zero,19aa8 <___svfiprintf_internal_r+0x10d4>
   18e58:	d8002015 	stw	zero,128(sp)
   18e5c:	0029883a 	mov	r20,zero
   18e60:	dc401a04 	addi	r17,sp,104
   18e64:	dc802017 	ldw	r18,128(sp)
   18e68:	9500010e 	bge	r18,r20,18e70 <___svfiprintf_internal_r+0x49c>
   18e6c:	a025883a 	mov	r18,r20
   18e70:	ad403fcc 	andi	r21,r21,255
   18e74:	ad40201c 	xori	r21,r21,128
   18e78:	ad7fe004 	addi	r21,r21,-128
   18e7c:	a8003f26 	beq	r21,zero,18f7c <___svfiprintf_internal_r+0x5a8>
   18e80:	94800044 	addi	r18,r18,1
   18e84:	00003d06 	br	18f7c <___svfiprintf_internal_r+0x5a8>
   18e88:	00c00044 	movi	r3,1
   18e8c:	d8c02105 	stb	r3,132(sp)
   18e90:	05400ac4 	movi	r21,43
   18e94:	98c00007 	ldb	r3,0(r19)
   18e98:	003f1a06 	br	18b04 <__alt_data_end+0xfc018b04>
   18e9c:	8821883a 	mov	r16,r17
   18ea0:	dc402103 	ldbu	r17,132(sp)
   18ea4:	b811883a 	mov	r8,r23
   18ea8:	8c403fcc 	andi	r17,r17,255
   18eac:	8803a71e 	bne	r17,zero,19d4c <___svfiprintf_internal_r+0x1378>
   18eb0:	8080080c 	andi	r2,r16,32
   18eb4:	10015726 	beq	r2,zero,19414 <___svfiprintf_internal_r+0xa40>
   18eb8:	d8c02417 	ldw	r3,144(sp)
   18ebc:	d9002017 	ldw	r4,128(sp)
   18ec0:	d8001d85 	stb	zero,118(sp)
   18ec4:	18800204 	addi	r2,r3,8
   18ec8:	1c800017 	ldw	r18,0(r3)
   18ecc:	1d000117 	ldw	r20,4(r3)
   18ed0:	2002db16 	blt	r4,zero,19a40 <___svfiprintf_internal_r+0x106c>
   18ed4:	013fdfc4 	movi	r4,-129
   18ed8:	9506b03a 	or	r3,r18,r20
   18edc:	d8802415 	stw	r2,144(sp)
   18ee0:	8120703a 	and	r16,r16,r4
   18ee4:	18015826 	beq	r3,zero,19448 <___svfiprintf_internal_r+0xa74>
   18ee8:	002b883a 	mov	r21,zero
   18eec:	dc401a04 	addi	r17,sp,104
   18ef0:	9006d0fa 	srli	r3,r18,3
   18ef4:	a008977a 	slli	r4,r20,29
   18ef8:	a028d0fa 	srli	r20,r20,3
   18efc:	948001cc 	andi	r18,r18,7
   18f00:	90800c04 	addi	r2,r18,48
   18f04:	8c7fffc4 	addi	r17,r17,-1
   18f08:	20e4b03a 	or	r18,r4,r3
   18f0c:	88800005 	stb	r2,0(r17)
   18f10:	9506b03a 	or	r3,r18,r20
   18f14:	183ff61e 	bne	r3,zero,18ef0 <__alt_data_end+0xfc018ef0>
   18f18:	80c0004c 	andi	r3,r16,1
   18f1c:	18028926 	beq	r3,zero,19944 <___svfiprintf_internal_r+0xf70>
   18f20:	10803fcc 	andi	r2,r2,255
   18f24:	1080201c 	xori	r2,r2,128
   18f28:	10bfe004 	addi	r2,r2,-128
   18f2c:	00c00c04 	movi	r3,48
   18f30:	10ffb026 	beq	r2,r3,18df4 <__alt_data_end+0xfc018df4>
   18f34:	88ffffc5 	stb	r3,-1(r17)
   18f38:	d8c01e17 	ldw	r3,120(sp)
   18f3c:	88bfffc4 	addi	r2,r17,-1
   18f40:	1023883a 	mov	r17,r2
   18f44:	18a9c83a 	sub	r20,r3,r2
   18f48:	003fc606 	br	18e64 <__alt_data_end+0xfc018e64>
   18f4c:	d8c02417 	ldw	r3,144(sp)
   18f50:	04800044 	movi	r18,1
   18f54:	8821883a 	mov	r16,r17
   18f58:	18800017 	ldw	r2,0(r3)
   18f5c:	18c00104 	addi	r3,r3,4
   18f60:	b811883a 	mov	r8,r23
   18f64:	d8001d85 	stb	zero,118(sp)
   18f68:	d8801005 	stb	r2,64(sp)
   18f6c:	d8c02415 	stw	r3,144(sp)
   18f70:	9029883a 	mov	r20,r18
   18f74:	dc401004 	addi	r17,sp,64
   18f78:	d8002015 	stw	zero,128(sp)
   18f7c:	80c0008c 	andi	r3,r16,2
   18f80:	d8c02115 	stw	r3,132(sp)
   18f84:	18000126 	beq	r3,zero,18f8c <___svfiprintf_internal_r+0x5b8>
   18f88:	94800084 	addi	r18,r18,2
   18f8c:	80c0210c 	andi	r3,r16,132
   18f90:	d8c02215 	stw	r3,136(sp)
   18f94:	1801321e 	bne	r3,zero,19460 <___svfiprintf_internal_r+0xa8c>
   18f98:	d9002517 	ldw	r4,148(sp)
   18f9c:	24b9c83a 	sub	fp,r4,r18
   18fa0:	07012f0e 	bge	zero,fp,19460 <___svfiprintf_internal_r+0xa8c>
   18fa4:	02400404 	movi	r9,16
   18fa8:	d8c01c17 	ldw	r3,112(sp)
   18fac:	d8801b17 	ldw	r2,108(sp)
   18fb0:	4f03250e 	bge	r9,fp,19c48 <___svfiprintf_internal_r+0x1274>
   18fb4:	010000f4 	movhi	r4,3
   18fb8:	212bbd04 	addi	r4,r4,-20748
   18fbc:	dc002a15 	stw	r16,168(sp)
   18fc0:	dc402b15 	stw	r17,172(sp)
   18fc4:	d9002815 	stw	r4,160(sp)
   18fc8:	e023883a 	mov	r17,fp
   18fcc:	482f883a 	mov	r23,r9
   18fd0:	9839883a 	mov	fp,r19
   18fd4:	054001c4 	movi	r21,7
   18fd8:	9027883a 	mov	r19,r18
   18fdc:	dc002717 	ldw	r16,156(sp)
   18fe0:	dc802317 	ldw	r18,140(sp)
   18fe4:	00000306 	br	18ff4 <___svfiprintf_internal_r+0x620>
   18fe8:	8c7ffc04 	addi	r17,r17,-16
   18fec:	42000204 	addi	r8,r8,8
   18ff0:	bc40130e 	bge	r23,r17,19040 <___svfiprintf_internal_r+0x66c>
   18ff4:	014000f4 	movhi	r5,3
   18ff8:	18c00404 	addi	r3,r3,16
   18ffc:	10800044 	addi	r2,r2,1
   19000:	296bbd04 	addi	r5,r5,-20748
   19004:	41400015 	stw	r5,0(r8)
   19008:	45c00115 	stw	r23,4(r8)
   1900c:	d8c01c15 	stw	r3,112(sp)
   19010:	d8801b15 	stw	r2,108(sp)
   19014:	a8bff40e 	bge	r21,r2,18fe8 <__alt_data_end+0xfc018fe8>
   19018:	d9801a04 	addi	r6,sp,104
   1901c:	900b883a 	mov	r5,r18
   19020:	8009883a 	mov	r4,r16
   19024:	00188040 	call	18804 <__ssprint_r>
   19028:	1001aa1e 	bne	r2,zero,196d4 <___svfiprintf_internal_r+0xd00>
   1902c:	8c7ffc04 	addi	r17,r17,-16
   19030:	d8c01c17 	ldw	r3,112(sp)
   19034:	d8801b17 	ldw	r2,108(sp)
   19038:	d811883a 	mov	r8,sp
   1903c:	bc7fed16 	blt	r23,r17,18ff4 <__alt_data_end+0xfc018ff4>
   19040:	9825883a 	mov	r18,r19
   19044:	dc002a17 	ldw	r16,168(sp)
   19048:	e027883a 	mov	r19,fp
   1904c:	8839883a 	mov	fp,r17
   19050:	dc402b17 	ldw	r17,172(sp)
   19054:	d9002817 	ldw	r4,160(sp)
   19058:	e0c7883a 	add	r3,fp,r3
   1905c:	10800044 	addi	r2,r2,1
   19060:	41000015 	stw	r4,0(r8)
   19064:	47000115 	stw	fp,4(r8)
   19068:	d8c01c15 	stw	r3,112(sp)
   1906c:	d8801b15 	stw	r2,108(sp)
   19070:	010001c4 	movi	r4,7
   19074:	20821616 	blt	r4,r2,198d0 <___svfiprintf_internal_r+0xefc>
   19078:	42000204 	addi	r8,r8,8
   1907c:	0000fa06 	br	19468 <___svfiprintf_internal_r+0xa94>
   19080:	8821883a 	mov	r16,r17
   19084:	dc402103 	ldbu	r17,132(sp)
   19088:	b811883a 	mov	r8,r23
   1908c:	8c403fcc 	andi	r17,r17,255
   19090:	8803361e 	bne	r17,zero,19d6c <___svfiprintf_internal_r+0x1398>
   19094:	014000f4 	movhi	r5,3
   19098:	296b4c04 	addi	r5,r5,-21200
   1909c:	d9402915 	stw	r5,164(sp)
   190a0:	8080080c 	andi	r2,r16,32
   190a4:	103f331e 	bne	r2,zero,18d74 <__alt_data_end+0xfc018d74>
   190a8:	8080040c 	andi	r2,r16,16
   190ac:	1002551e 	bne	r2,zero,19a04 <___svfiprintf_internal_r+0x1030>
   190b0:	8080100c 	andi	r2,r16,64
   190b4:	1002a626 	beq	r2,zero,19b50 <___svfiprintf_internal_r+0x117c>
   190b8:	d8802417 	ldw	r2,144(sp)
   190bc:	0029883a 	mov	r20,zero
   190c0:	1480000b 	ldhu	r18,0(r2)
   190c4:	10800104 	addi	r2,r2,4
   190c8:	d8802415 	stw	r2,144(sp)
   190cc:	003f2e06 	br	18d88 <__alt_data_end+0xfc018d88>
   190d0:	8821883a 	mov	r16,r17
   190d4:	dc402103 	ldbu	r17,132(sp)
   190d8:	b811883a 	mov	r8,r23
   190dc:	8c403fcc 	andi	r17,r17,255
   190e0:	88030b1e 	bne	r17,zero,19d10 <___svfiprintf_internal_r+0x133c>
   190e4:	8080080c 	andi	r2,r16,32
   190e8:	1002271e 	bne	r2,zero,19988 <___svfiprintf_internal_r+0xfb4>
   190ec:	8080040c 	andi	r2,r16,16
   190f0:	10028e26 	beq	r2,zero,19b2c <___svfiprintf_internal_r+0x1158>
   190f4:	d8c02417 	ldw	r3,144(sp)
   190f8:	d9002617 	ldw	r4,152(sp)
   190fc:	18800017 	ldw	r2,0(r3)
   19100:	18c00104 	addi	r3,r3,4
   19104:	d8c02415 	stw	r3,144(sp)
   19108:	11000015 	stw	r4,0(r2)
   1910c:	003e5306 	br	18a5c <__alt_data_end+0xfc018a5c>
   19110:	98c00007 	ldb	r3,0(r19)
   19114:	01401b04 	movi	r5,108
   19118:	19424f26 	beq	r3,r5,19a58 <___svfiprintf_internal_r+0x1084>
   1911c:	8c400414 	ori	r17,r17,16
   19120:	003e7806 	br	18b04 <__alt_data_end+0xfc018b04>
   19124:	8c401014 	ori	r17,r17,64
   19128:	98c00007 	ldb	r3,0(r19)
   1912c:	003e7506 	br	18b04 <__alt_data_end+0xfc018b04>
   19130:	8821883a 	mov	r16,r17
   19134:	dc402103 	ldbu	r17,132(sp)
   19138:	b811883a 	mov	r8,r23
   1913c:	8c403fcc 	andi	r17,r17,255
   19140:	8802fe1e 	bne	r17,zero,19d3c <___svfiprintf_internal_r+0x1368>
   19144:	8080080c 	andi	r2,r16,32
   19148:	10004626 	beq	r2,zero,19264 <___svfiprintf_internal_r+0x890>
   1914c:	d9002417 	ldw	r4,144(sp)
   19150:	20800117 	ldw	r2,4(r4)
   19154:	24800017 	ldw	r18,0(r4)
   19158:	21000204 	addi	r4,r4,8
   1915c:	d9002415 	stw	r4,144(sp)
   19160:	1029883a 	mov	r20,r2
   19164:	10004a16 	blt	r2,zero,19290 <___svfiprintf_internal_r+0x8bc>
   19168:	d9002017 	ldw	r4,128(sp)
   1916c:	dd401d83 	ldbu	r21,118(sp)
   19170:	2001eb16 	blt	r4,zero,19920 <___svfiprintf_internal_r+0xf4c>
   19174:	00ffdfc4 	movi	r3,-129
   19178:	9504b03a 	or	r2,r18,r20
   1917c:	80e0703a 	and	r16,r16,r3
   19180:	103f3326 	beq	r2,zero,18e50 <__alt_data_end+0xfc018e50>
   19184:	a0009426 	beq	r20,zero,193d8 <___svfiprintf_internal_r+0xa04>
   19188:	dc401a04 	addi	r17,sp,104
   1918c:	402f883a 	mov	r23,r8
   19190:	9009883a 	mov	r4,r18
   19194:	a00b883a 	mov	r5,r20
   19198:	01800284 	movi	r6,10
   1919c:	000f883a 	mov	r7,zero
   191a0:	001c3b40 	call	1c3b4 <__umoddi3>
   191a4:	10800c04 	addi	r2,r2,48
   191a8:	8c7fffc4 	addi	r17,r17,-1
   191ac:	9009883a 	mov	r4,r18
   191b0:	a00b883a 	mov	r5,r20
   191b4:	88800005 	stb	r2,0(r17)
   191b8:	01800284 	movi	r6,10
   191bc:	000f883a 	mov	r7,zero
   191c0:	001bdb80 	call	1bdb8 <__udivdi3>
   191c4:	1025883a 	mov	r18,r2
   191c8:	10c4b03a 	or	r2,r2,r3
   191cc:	1829883a 	mov	r20,r3
   191d0:	103fef1e 	bne	r2,zero,19190 <__alt_data_end+0xfc019190>
   191d4:	d9001e17 	ldw	r4,120(sp)
   191d8:	b811883a 	mov	r8,r23
   191dc:	2469c83a 	sub	r20,r4,r17
   191e0:	003f2006 	br	18e64 <__alt_data_end+0xfc018e64>
   191e4:	d8802417 	ldw	r2,144(sp)
   191e8:	8821883a 	mov	r16,r17
   191ec:	d8001d85 	stb	zero,118(sp)
   191f0:	14400017 	ldw	r17,0(r2)
   191f4:	b811883a 	mov	r8,r23
   191f8:	15c00104 	addi	r23,r2,4
   191fc:	88026c26 	beq	r17,zero,19bb0 <___svfiprintf_internal_r+0x11dc>
   19200:	d8c02017 	ldw	r3,128(sp)
   19204:	18025f16 	blt	r3,zero,19b84 <___svfiprintf_internal_r+0x11b0>
   19208:	180d883a 	mov	r6,r3
   1920c:	000b883a 	mov	r5,zero
   19210:	8809883a 	mov	r4,r17
   19214:	da002d15 	stw	r8,180(sp)
   19218:	0016c900 	call	16c90 <memchr>
   1921c:	da002d17 	ldw	r8,180(sp)
   19220:	1002a526 	beq	r2,zero,19cb8 <___svfiprintf_internal_r+0x12e4>
   19224:	1469c83a 	sub	r20,r2,r17
   19228:	dd401d83 	ldbu	r21,118(sp)
   1922c:	ddc02415 	stw	r23,144(sp)
   19230:	d8002015 	stw	zero,128(sp)
   19234:	003f0b06 	br	18e64 <__alt_data_end+0xfc018e64>
   19238:	8c400814 	ori	r17,r17,32
   1923c:	98c00007 	ldb	r3,0(r19)
   19240:	003e3006 	br	18b04 <__alt_data_end+0xfc018b04>
   19244:	8821883a 	mov	r16,r17
   19248:	dc402103 	ldbu	r17,132(sp)
   1924c:	b811883a 	mov	r8,r23
   19250:	8c403fcc 	andi	r17,r17,255
   19254:	8802b01e 	bne	r17,zero,19d18 <___svfiprintf_internal_r+0x1344>
   19258:	84000414 	ori	r16,r16,16
   1925c:	8080080c 	andi	r2,r16,32
   19260:	103fba1e 	bne	r2,zero,1914c <__alt_data_end+0xfc01914c>
   19264:	8080040c 	andi	r2,r16,16
   19268:	1001df1e 	bne	r2,zero,199e8 <___svfiprintf_internal_r+0x1014>
   1926c:	8080100c 	andi	r2,r16,64
   19270:	10023d26 	beq	r2,zero,19b68 <___svfiprintf_internal_r+0x1194>
   19274:	d8802417 	ldw	r2,144(sp)
   19278:	1480000f 	ldh	r18,0(r2)
   1927c:	10800104 	addi	r2,r2,4
   19280:	d8802415 	stw	r2,144(sp)
   19284:	9029d7fa 	srai	r20,r18,31
   19288:	a005883a 	mov	r2,r20
   1928c:	103fb60e 	bge	r2,zero,19168 <__alt_data_end+0xfc019168>
   19290:	d9402017 	ldw	r5,128(sp)
   19294:	04a5c83a 	sub	r18,zero,r18
   19298:	05400b44 	movi	r21,45
   1929c:	9004c03a 	cmpne	r2,r18,zero
   192a0:	0529c83a 	sub	r20,zero,r20
   192a4:	dd401d85 	stb	r21,118(sp)
   192a8:	a0a9c83a 	sub	r20,r20,r2
   192ac:	28026c16 	blt	r5,zero,19c60 <___svfiprintf_internal_r+0x128c>
   192b0:	00bfdfc4 	movi	r2,-129
   192b4:	80a0703a 	and	r16,r16,r2
   192b8:	a03fb31e 	bne	r20,zero,19188 <__alt_data_end+0xfc019188>
   192bc:	00004606 	br	193d8 <___svfiprintf_internal_r+0xa04>
   192c0:	9839883a 	mov	fp,r19
   192c4:	d8002515 	stw	zero,148(sp)
   192c8:	1c3ff404 	addi	r16,r3,-48
   192cc:	0009883a 	mov	r4,zero
   192d0:	01400284 	movi	r5,10
   192d4:	000d18c0 	call	d18c <__mulsi3>
   192d8:	e0c00007 	ldb	r3,0(fp)
   192dc:	8089883a 	add	r4,r16,r2
   192e0:	9cc00044 	addi	r19,r19,1
   192e4:	1c3ff404 	addi	r16,r3,-48
   192e8:	9839883a 	mov	fp,r19
   192ec:	a43ff82e 	bgeu	r20,r16,192d0 <__alt_data_end+0xfc0192d0>
   192f0:	d9002515 	stw	r4,148(sp)
   192f4:	18bff804 	addi	r2,r3,-32
   192f8:	90be052e 	bgeu	r18,r2,18b10 <__alt_data_end+0xfc018b10>
   192fc:	8821883a 	mov	r16,r17
   19300:	dc402103 	ldbu	r17,132(sp)
   19304:	b811883a 	mov	r8,r23
   19308:	8c403fcc 	andi	r17,r17,255
   1930c:	88028d1e 	bne	r17,zero,19d44 <___svfiprintf_internal_r+0x1370>
   19310:	1800ea26 	beq	r3,zero,196bc <___svfiprintf_internal_r+0xce8>
   19314:	04800044 	movi	r18,1
   19318:	d8c01005 	stb	r3,64(sp)
   1931c:	d8001d85 	stb	zero,118(sp)
   19320:	9029883a 	mov	r20,r18
   19324:	dc401004 	addi	r17,sp,64
   19328:	003f1306 	br	18f78 <__alt_data_end+0xfc018f78>
   1932c:	8c402014 	ori	r17,r17,128
   19330:	98c00007 	ldb	r3,0(r19)
   19334:	003df306 	br	18b04 <__alt_data_end+0xfc018b04>
   19338:	98c00007 	ldb	r3,0(r19)
   1933c:	01000a84 	movi	r4,42
   19340:	9f000044 	addi	fp,r19,1
   19344:	19026326 	beq	r3,r4,19cd4 <___svfiprintf_internal_r+0x1300>
   19348:	1c3ff404 	addi	r16,r3,-48
   1934c:	0009883a 	mov	r4,zero
   19350:	a4025636 	bltu	r20,r16,19cac <___svfiprintf_internal_r+0x12d8>
   19354:	01400284 	movi	r5,10
   19358:	000d18c0 	call	d18c <__mulsi3>
   1935c:	e0c00007 	ldb	r3,0(fp)
   19360:	1409883a 	add	r4,r2,r16
   19364:	e4c00044 	addi	r19,fp,1
   19368:	1c3ff404 	addi	r16,r3,-48
   1936c:	9839883a 	mov	fp,r19
   19370:	a43ff82e 	bgeu	r20,r16,19354 <__alt_data_end+0xfc019354>
   19374:	20020c16 	blt	r4,zero,19ba8 <___svfiprintf_internal_r+0x11d4>
   19378:	d9002015 	stw	r4,128(sp)
   1937c:	003de206 	br	18b08 <__alt_data_end+0xfc018b08>
   19380:	8821883a 	mov	r16,r17
   19384:	dc402103 	ldbu	r17,132(sp)
   19388:	b811883a 	mov	r8,r23
   1938c:	8c403fcc 	andi	r17,r17,255
   19390:	8802721e 	bne	r17,zero,19d5c <___svfiprintf_internal_r+0x1388>
   19394:	84000414 	ori	r16,r16,16
   19398:	8080080c 	andi	r2,r16,32
   1939c:	103e9f1e 	bne	r2,zero,18e1c <__alt_data_end+0xfc018e1c>
   193a0:	8080040c 	andi	r2,r16,16
   193a4:	10015326 	beq	r2,zero,198f4 <___svfiprintf_internal_r+0xf20>
   193a8:	d8c02417 	ldw	r3,144(sp)
   193ac:	d9002017 	ldw	r4,128(sp)
   193b0:	d8001d85 	stb	zero,118(sp)
   193b4:	18800104 	addi	r2,r3,4
   193b8:	1c800017 	ldw	r18,0(r3)
   193bc:	0029883a 	mov	r20,zero
   193c0:	20015516 	blt	r4,zero,19918 <___svfiprintf_internal_r+0xf44>
   193c4:	00ffdfc4 	movi	r3,-129
   193c8:	d8802415 	stw	r2,144(sp)
   193cc:	80e0703a 	and	r16,r16,r3
   193d0:	002b883a 	mov	r21,zero
   193d4:	903e9e26 	beq	r18,zero,18e50 <__alt_data_end+0xfc018e50>
   193d8:	00800244 	movi	r2,9
   193dc:	14bf6a36 	bltu	r2,r18,19188 <__alt_data_end+0xfc019188>
   193e0:	94800c04 	addi	r18,r18,48
   193e4:	dc8019c5 	stb	r18,103(sp)
   193e8:	dd002c17 	ldw	r20,176(sp)
   193ec:	dc4019c4 	addi	r17,sp,103
   193f0:	003e9c06 	br	18e64 <__alt_data_end+0xfc018e64>
   193f4:	8821883a 	mov	r16,r17
   193f8:	dc402103 	ldbu	r17,132(sp)
   193fc:	b811883a 	mov	r8,r23
   19400:	8c403fcc 	andi	r17,r17,255
   19404:	8802571e 	bne	r17,zero,19d64 <___svfiprintf_internal_r+0x1390>
   19408:	84000414 	ori	r16,r16,16
   1940c:	8080080c 	andi	r2,r16,32
   19410:	103ea91e 	bne	r2,zero,18eb8 <__alt_data_end+0xfc018eb8>
   19414:	8080040c 	andi	r2,r16,16
   19418:	10018026 	beq	r2,zero,19a1c <___svfiprintf_internal_r+0x1048>
   1941c:	d9402417 	ldw	r5,144(sp)
   19420:	d8c02017 	ldw	r3,128(sp)
   19424:	d8001d85 	stb	zero,118(sp)
   19428:	28800104 	addi	r2,r5,4
   1942c:	2c800017 	ldw	r18,0(r5)
   19430:	0029883a 	mov	r20,zero
   19434:	18018216 	blt	r3,zero,19a40 <___svfiprintf_internal_r+0x106c>
   19438:	00ffdfc4 	movi	r3,-129
   1943c:	d8802415 	stw	r2,144(sp)
   19440:	80e0703a 	and	r16,r16,r3
   19444:	903ea81e 	bne	r18,zero,18ee8 <__alt_data_end+0xfc018ee8>
   19448:	d8802017 	ldw	r2,128(sp)
   1944c:	002b883a 	mov	r21,zero
   19450:	1001f226 	beq	r2,zero,19c1c <___svfiprintf_internal_r+0x1248>
   19454:	0025883a 	mov	r18,zero
   19458:	0029883a 	mov	r20,zero
   1945c:	003ea306 	br	18eec <__alt_data_end+0xfc018eec>
   19460:	d8c01c17 	ldw	r3,112(sp)
   19464:	d8801b17 	ldw	r2,108(sp)
   19468:	d9001d87 	ldb	r4,118(sp)
   1946c:	20000b26 	beq	r4,zero,1949c <___svfiprintf_internal_r+0xac8>
   19470:	d9001d84 	addi	r4,sp,118
   19474:	18c00044 	addi	r3,r3,1
   19478:	10800044 	addi	r2,r2,1
   1947c:	41000015 	stw	r4,0(r8)
   19480:	01000044 	movi	r4,1
   19484:	41000115 	stw	r4,4(r8)
   19488:	d8c01c15 	stw	r3,112(sp)
   1948c:	d8801b15 	stw	r2,108(sp)
   19490:	010001c4 	movi	r4,7
   19494:	2080f316 	blt	r4,r2,19864 <___svfiprintf_internal_r+0xe90>
   19498:	42000204 	addi	r8,r8,8
   1949c:	d9402117 	ldw	r5,132(sp)
   194a0:	28000b26 	beq	r5,zero,194d0 <___svfiprintf_internal_r+0xafc>
   194a4:	d9001d04 	addi	r4,sp,116
   194a8:	18c00084 	addi	r3,r3,2
   194ac:	10800044 	addi	r2,r2,1
   194b0:	41000015 	stw	r4,0(r8)
   194b4:	01000084 	movi	r4,2
   194b8:	41000115 	stw	r4,4(r8)
   194bc:	d8c01c15 	stw	r3,112(sp)
   194c0:	d8801b15 	stw	r2,108(sp)
   194c4:	010001c4 	movi	r4,7
   194c8:	2080ef16 	blt	r4,r2,19888 <___svfiprintf_internal_r+0xeb4>
   194cc:	42000204 	addi	r8,r8,8
   194d0:	d9402217 	ldw	r5,136(sp)
   194d4:	01002004 	movi	r4,128
   194d8:	29008f26 	beq	r5,r4,19718 <___svfiprintf_internal_r+0xd44>
   194dc:	d9002017 	ldw	r4,128(sp)
   194e0:	252fc83a 	sub	r23,r4,r20
   194e4:	05c0310e 	bge	zero,r23,195ac <___svfiprintf_internal_r+0xbd8>
   194e8:	07000404 	movi	fp,16
   194ec:	e5c17d0e 	bge	fp,r23,19ae4 <___svfiprintf_internal_r+0x1110>
   194f0:	010000f4 	movhi	r4,3
   194f4:	212bb904 	addi	r4,r4,-20764
   194f8:	dc002015 	stw	r16,128(sp)
   194fc:	dc402215 	stw	r17,136(sp)
   19500:	d9002115 	stw	r4,132(sp)
   19504:	b823883a 	mov	r17,r23
   19508:	054001c4 	movi	r21,7
   1950c:	982f883a 	mov	r23,r19
   19510:	dc002717 	ldw	r16,156(sp)
   19514:	9027883a 	mov	r19,r18
   19518:	dc802317 	ldw	r18,140(sp)
   1951c:	00000306 	br	1952c <___svfiprintf_internal_r+0xb58>
   19520:	8c7ffc04 	addi	r17,r17,-16
   19524:	42000204 	addi	r8,r8,8
   19528:	e440110e 	bge	fp,r17,19570 <___svfiprintf_internal_r+0xb9c>
   1952c:	18c00404 	addi	r3,r3,16
   19530:	10800044 	addi	r2,r2,1
   19534:	45800015 	stw	r22,0(r8)
   19538:	47000115 	stw	fp,4(r8)
   1953c:	d8c01c15 	stw	r3,112(sp)
   19540:	d8801b15 	stw	r2,108(sp)
   19544:	a8bff60e 	bge	r21,r2,19520 <__alt_data_end+0xfc019520>
   19548:	d9801a04 	addi	r6,sp,104
   1954c:	900b883a 	mov	r5,r18
   19550:	8009883a 	mov	r4,r16
   19554:	00188040 	call	18804 <__ssprint_r>
   19558:	10005e1e 	bne	r2,zero,196d4 <___svfiprintf_internal_r+0xd00>
   1955c:	8c7ffc04 	addi	r17,r17,-16
   19560:	d8c01c17 	ldw	r3,112(sp)
   19564:	d8801b17 	ldw	r2,108(sp)
   19568:	d811883a 	mov	r8,sp
   1956c:	e47fef16 	blt	fp,r17,1952c <__alt_data_end+0xfc01952c>
   19570:	9825883a 	mov	r18,r19
   19574:	dc002017 	ldw	r16,128(sp)
   19578:	b827883a 	mov	r19,r23
   1957c:	882f883a 	mov	r23,r17
   19580:	dc402217 	ldw	r17,136(sp)
   19584:	d9402117 	ldw	r5,132(sp)
   19588:	1dc7883a 	add	r3,r3,r23
   1958c:	10800044 	addi	r2,r2,1
   19590:	41400015 	stw	r5,0(r8)
   19594:	45c00115 	stw	r23,4(r8)
   19598:	d8c01c15 	stw	r3,112(sp)
   1959c:	d8801b15 	stw	r2,108(sp)
   195a0:	010001c4 	movi	r4,7
   195a4:	2080a616 	blt	r4,r2,19840 <___svfiprintf_internal_r+0xe6c>
   195a8:	42000204 	addi	r8,r8,8
   195ac:	a0c7883a 	add	r3,r20,r3
   195b0:	10800044 	addi	r2,r2,1
   195b4:	44400015 	stw	r17,0(r8)
   195b8:	45000115 	stw	r20,4(r8)
   195bc:	d8c01c15 	stw	r3,112(sp)
   195c0:	d8801b15 	stw	r2,108(sp)
   195c4:	010001c4 	movi	r4,7
   195c8:	20808816 	blt	r4,r2,197ec <___svfiprintf_internal_r+0xe18>
   195cc:	42000204 	addi	r8,r8,8
   195d0:	8400010c 	andi	r16,r16,4
   195d4:	80002c26 	beq	r16,zero,19688 <___svfiprintf_internal_r+0xcb4>
   195d8:	d8802517 	ldw	r2,148(sp)
   195dc:	14a1c83a 	sub	r16,r2,r18
   195e0:	0400290e 	bge	zero,r16,19688 <___svfiprintf_internal_r+0xcb4>
   195e4:	04400404 	movi	r17,16
   195e8:	d8801b17 	ldw	r2,108(sp)
   195ec:	8c01a70e 	bge	r17,r16,19c8c <___svfiprintf_internal_r+0x12b8>
   195f0:	014000f4 	movhi	r5,3
   195f4:	296bbd04 	addi	r5,r5,-20748
   195f8:	d9402815 	stw	r5,160(sp)
   195fc:	050001c4 	movi	r20,7
   19600:	dd402717 	ldw	r21,156(sp)
   19604:	ddc02317 	ldw	r23,140(sp)
   19608:	00000306 	br	19618 <___svfiprintf_internal_r+0xc44>
   1960c:	843ffc04 	addi	r16,r16,-16
   19610:	42000204 	addi	r8,r8,8
   19614:	8c00130e 	bge	r17,r16,19664 <___svfiprintf_internal_r+0xc90>
   19618:	010000f4 	movhi	r4,3
   1961c:	18c00404 	addi	r3,r3,16
   19620:	10800044 	addi	r2,r2,1
   19624:	212bbd04 	addi	r4,r4,-20748
   19628:	41000015 	stw	r4,0(r8)
   1962c:	44400115 	stw	r17,4(r8)
   19630:	d8c01c15 	stw	r3,112(sp)
   19634:	d8801b15 	stw	r2,108(sp)
   19638:	a0bff40e 	bge	r20,r2,1960c <__alt_data_end+0xfc01960c>
   1963c:	d9801a04 	addi	r6,sp,104
   19640:	b80b883a 	mov	r5,r23
   19644:	a809883a 	mov	r4,r21
   19648:	00188040 	call	18804 <__ssprint_r>
   1964c:	1000211e 	bne	r2,zero,196d4 <___svfiprintf_internal_r+0xd00>
   19650:	843ffc04 	addi	r16,r16,-16
   19654:	d8c01c17 	ldw	r3,112(sp)
   19658:	d8801b17 	ldw	r2,108(sp)
   1965c:	d811883a 	mov	r8,sp
   19660:	8c3fed16 	blt	r17,r16,19618 <__alt_data_end+0xfc019618>
   19664:	d9402817 	ldw	r5,160(sp)
   19668:	1c07883a 	add	r3,r3,r16
   1966c:	10800044 	addi	r2,r2,1
   19670:	41400015 	stw	r5,0(r8)
   19674:	44000115 	stw	r16,4(r8)
   19678:	d8c01c15 	stw	r3,112(sp)
   1967c:	d8801b15 	stw	r2,108(sp)
   19680:	010001c4 	movi	r4,7
   19684:	2080b516 	blt	r4,r2,1995c <___svfiprintf_internal_r+0xf88>
   19688:	d8802517 	ldw	r2,148(sp)
   1968c:	1480010e 	bge	r2,r18,19694 <___svfiprintf_internal_r+0xcc0>
   19690:	9005883a 	mov	r2,r18
   19694:	d9002617 	ldw	r4,152(sp)
   19698:	2089883a 	add	r4,r4,r2
   1969c:	d9002615 	stw	r4,152(sp)
   196a0:	18005a1e 	bne	r3,zero,1980c <___svfiprintf_internal_r+0xe38>
   196a4:	98800007 	ldb	r2,0(r19)
   196a8:	d8001b15 	stw	zero,108(sp)
   196ac:	d811883a 	mov	r8,sp
   196b0:	103cec1e 	bne	r2,zero,18a64 <__alt_data_end+0xfc018a64>
   196b4:	9825883a 	mov	r18,r19
   196b8:	003d0206 	br	18ac4 <__alt_data_end+0xfc018ac4>
   196bc:	d8801c17 	ldw	r2,112(sp)
   196c0:	10000426 	beq	r2,zero,196d4 <___svfiprintf_internal_r+0xd00>
   196c4:	d9402317 	ldw	r5,140(sp)
   196c8:	d9002717 	ldw	r4,156(sp)
   196cc:	d9801a04 	addi	r6,sp,104
   196d0:	00188040 	call	18804 <__ssprint_r>
   196d4:	d9402317 	ldw	r5,140(sp)
   196d8:	d8802617 	ldw	r2,152(sp)
   196dc:	28c0030b 	ldhu	r3,12(r5)
   196e0:	18c0100c 	andi	r3,r3,64
   196e4:	18015c1e 	bne	r3,zero,19c58 <___svfiprintf_internal_r+0x1284>
   196e8:	dfc03717 	ldw	ra,220(sp)
   196ec:	df003617 	ldw	fp,216(sp)
   196f0:	ddc03517 	ldw	r23,212(sp)
   196f4:	dd803417 	ldw	r22,208(sp)
   196f8:	dd403317 	ldw	r21,204(sp)
   196fc:	dd003217 	ldw	r20,200(sp)
   19700:	dcc03117 	ldw	r19,196(sp)
   19704:	dc803017 	ldw	r18,192(sp)
   19708:	dc402f17 	ldw	r17,188(sp)
   1970c:	dc002e17 	ldw	r16,184(sp)
   19710:	dec03804 	addi	sp,sp,224
   19714:	f800283a 	ret
   19718:	d9002517 	ldw	r4,148(sp)
   1971c:	24afc83a 	sub	r23,r4,r18
   19720:	05ff6e0e 	bge	zero,r23,194dc <__alt_data_end+0xfc0194dc>
   19724:	07000404 	movi	fp,16
   19728:	e5c15c0e 	bge	fp,r23,19c9c <___svfiprintf_internal_r+0x12c8>
   1972c:	010000f4 	movhi	r4,3
   19730:	212bb904 	addi	r4,r4,-20764
   19734:	dc002215 	stw	r16,136(sp)
   19738:	dc402815 	stw	r17,160(sp)
   1973c:	d9002115 	stw	r4,132(sp)
   19740:	b823883a 	mov	r17,r23
   19744:	054001c4 	movi	r21,7
   19748:	982f883a 	mov	r23,r19
   1974c:	dc002717 	ldw	r16,156(sp)
   19750:	9027883a 	mov	r19,r18
   19754:	dc802317 	ldw	r18,140(sp)
   19758:	00000306 	br	19768 <___svfiprintf_internal_r+0xd94>
   1975c:	8c7ffc04 	addi	r17,r17,-16
   19760:	42000204 	addi	r8,r8,8
   19764:	e440110e 	bge	fp,r17,197ac <___svfiprintf_internal_r+0xdd8>
   19768:	18c00404 	addi	r3,r3,16
   1976c:	10800044 	addi	r2,r2,1
   19770:	45800015 	stw	r22,0(r8)
   19774:	47000115 	stw	fp,4(r8)
   19778:	d8c01c15 	stw	r3,112(sp)
   1977c:	d8801b15 	stw	r2,108(sp)
   19780:	a8bff60e 	bge	r21,r2,1975c <__alt_data_end+0xfc01975c>
   19784:	d9801a04 	addi	r6,sp,104
   19788:	900b883a 	mov	r5,r18
   1978c:	8009883a 	mov	r4,r16
   19790:	00188040 	call	18804 <__ssprint_r>
   19794:	103fcf1e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   19798:	8c7ffc04 	addi	r17,r17,-16
   1979c:	d8c01c17 	ldw	r3,112(sp)
   197a0:	d8801b17 	ldw	r2,108(sp)
   197a4:	d811883a 	mov	r8,sp
   197a8:	e47fef16 	blt	fp,r17,19768 <__alt_data_end+0xfc019768>
   197ac:	9825883a 	mov	r18,r19
   197b0:	dc002217 	ldw	r16,136(sp)
   197b4:	b827883a 	mov	r19,r23
   197b8:	882f883a 	mov	r23,r17
   197bc:	dc402817 	ldw	r17,160(sp)
   197c0:	d9402117 	ldw	r5,132(sp)
   197c4:	1dc7883a 	add	r3,r3,r23
   197c8:	10800044 	addi	r2,r2,1
   197cc:	41400015 	stw	r5,0(r8)
   197d0:	45c00115 	stw	r23,4(r8)
   197d4:	d8c01c15 	stw	r3,112(sp)
   197d8:	d8801b15 	stw	r2,108(sp)
   197dc:	010001c4 	movi	r4,7
   197e0:	2080b716 	blt	r4,r2,19ac0 <___svfiprintf_internal_r+0x10ec>
   197e4:	42000204 	addi	r8,r8,8
   197e8:	003f3c06 	br	194dc <__alt_data_end+0xfc0194dc>
   197ec:	d9402317 	ldw	r5,140(sp)
   197f0:	d9002717 	ldw	r4,156(sp)
   197f4:	d9801a04 	addi	r6,sp,104
   197f8:	00188040 	call	18804 <__ssprint_r>
   197fc:	103fb51e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   19800:	d8c01c17 	ldw	r3,112(sp)
   19804:	d811883a 	mov	r8,sp
   19808:	003f7106 	br	195d0 <__alt_data_end+0xfc0195d0>
   1980c:	d9402317 	ldw	r5,140(sp)
   19810:	d9002717 	ldw	r4,156(sp)
   19814:	d9801a04 	addi	r6,sp,104
   19818:	00188040 	call	18804 <__ssprint_r>
   1981c:	103fa126 	beq	r2,zero,196a4 <__alt_data_end+0xfc0196a4>
   19820:	003fac06 	br	196d4 <__alt_data_end+0xfc0196d4>
   19824:	d9402317 	ldw	r5,140(sp)
   19828:	d9002717 	ldw	r4,156(sp)
   1982c:	d9801a04 	addi	r6,sp,104
   19830:	00188040 	call	18804 <__ssprint_r>
   19834:	103fa71e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   19838:	d811883a 	mov	r8,sp
   1983c:	003c9e06 	br	18ab8 <__alt_data_end+0xfc018ab8>
   19840:	d9402317 	ldw	r5,140(sp)
   19844:	d9002717 	ldw	r4,156(sp)
   19848:	d9801a04 	addi	r6,sp,104
   1984c:	00188040 	call	18804 <__ssprint_r>
   19850:	103fa01e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   19854:	d8c01c17 	ldw	r3,112(sp)
   19858:	d8801b17 	ldw	r2,108(sp)
   1985c:	d811883a 	mov	r8,sp
   19860:	003f5206 	br	195ac <__alt_data_end+0xfc0195ac>
   19864:	d9402317 	ldw	r5,140(sp)
   19868:	d9002717 	ldw	r4,156(sp)
   1986c:	d9801a04 	addi	r6,sp,104
   19870:	00188040 	call	18804 <__ssprint_r>
   19874:	103f971e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   19878:	d8c01c17 	ldw	r3,112(sp)
   1987c:	d8801b17 	ldw	r2,108(sp)
   19880:	d811883a 	mov	r8,sp
   19884:	003f0506 	br	1949c <__alt_data_end+0xfc01949c>
   19888:	d9402317 	ldw	r5,140(sp)
   1988c:	d9002717 	ldw	r4,156(sp)
   19890:	d9801a04 	addi	r6,sp,104
   19894:	00188040 	call	18804 <__ssprint_r>
   19898:	103f8e1e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   1989c:	d8c01c17 	ldw	r3,112(sp)
   198a0:	d8801b17 	ldw	r2,108(sp)
   198a4:	d811883a 	mov	r8,sp
   198a8:	003f0906 	br	194d0 <__alt_data_end+0xfc0194d0>
   198ac:	d9402017 	ldw	r5,128(sp)
   198b0:	d8001d85 	stb	zero,118(sp)
   198b4:	28007716 	blt	r5,zero,19a94 <___svfiprintf_internal_r+0x10c0>
   198b8:	00ffdfc4 	movi	r3,-129
   198bc:	9504b03a 	or	r2,r18,r20
   198c0:	80e0703a 	and	r16,r16,r3
   198c4:	103d3926 	beq	r2,zero,18dac <__alt_data_end+0xfc018dac>
   198c8:	002b883a 	mov	r21,zero
   198cc:	003d3c06 	br	18dc0 <__alt_data_end+0xfc018dc0>
   198d0:	d9402317 	ldw	r5,140(sp)
   198d4:	d9002717 	ldw	r4,156(sp)
   198d8:	d9801a04 	addi	r6,sp,104
   198dc:	00188040 	call	18804 <__ssprint_r>
   198e0:	103f7c1e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   198e4:	d8c01c17 	ldw	r3,112(sp)
   198e8:	d8801b17 	ldw	r2,108(sp)
   198ec:	d811883a 	mov	r8,sp
   198f0:	003edd06 	br	19468 <__alt_data_end+0xfc019468>
   198f4:	8080100c 	andi	r2,r16,64
   198f8:	d8001d85 	stb	zero,118(sp)
   198fc:	10008426 	beq	r2,zero,19b10 <___svfiprintf_internal_r+0x113c>
   19900:	d9402417 	ldw	r5,144(sp)
   19904:	d8c02017 	ldw	r3,128(sp)
   19908:	0029883a 	mov	r20,zero
   1990c:	28800104 	addi	r2,r5,4
   19910:	2c80000b 	ldhu	r18,0(r5)
   19914:	183eab0e 	bge	r3,zero,193c4 <__alt_data_end+0xfc0193c4>
   19918:	d8802415 	stw	r2,144(sp)
   1991c:	002b883a 	mov	r21,zero
   19920:	9504b03a 	or	r2,r18,r20
   19924:	103e171e 	bne	r2,zero,19184 <__alt_data_end+0xfc019184>
   19928:	00800044 	movi	r2,1
   1992c:	10803fcc 	andi	r2,r2,255
   19930:	00c00044 	movi	r3,1
   19934:	10c05c26 	beq	r2,r3,19aa8 <___svfiprintf_internal_r+0x10d4>
   19938:	00c00084 	movi	r3,2
   1993c:	10fd1e26 	beq	r2,r3,18db8 <__alt_data_end+0xfc018db8>
   19940:	003ec406 	br	19454 <__alt_data_end+0xfc019454>
   19944:	d9401e17 	ldw	r5,120(sp)
   19948:	2c69c83a 	sub	r20,r5,r17
   1994c:	003d4506 	br	18e64 <__alt_data_end+0xfc018e64>
   19950:	d8802415 	stw	r2,144(sp)
   19954:	98c00007 	ldb	r3,0(r19)
   19958:	003c6a06 	br	18b04 <__alt_data_end+0xfc018b04>
   1995c:	d9402317 	ldw	r5,140(sp)
   19960:	d9002717 	ldw	r4,156(sp)
   19964:	d9801a04 	addi	r6,sp,104
   19968:	00188040 	call	18804 <__ssprint_r>
   1996c:	103f591e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   19970:	d8c01c17 	ldw	r3,112(sp)
   19974:	003f4406 	br	19688 <__alt_data_end+0xfc019688>
   19978:	014000f4 	movhi	r5,3
   1997c:	296b5104 	addi	r5,r5,-21180
   19980:	d9402915 	stw	r5,164(sp)
   19984:	003d0906 	br	18dac <__alt_data_end+0xfc018dac>
   19988:	d8c02417 	ldw	r3,144(sp)
   1998c:	d9002617 	ldw	r4,152(sp)
   19990:	d9402417 	ldw	r5,144(sp)
   19994:	18800017 	ldw	r2,0(r3)
   19998:	2007d7fa 	srai	r3,r4,31
   1999c:	29400104 	addi	r5,r5,4
   199a0:	d9402415 	stw	r5,144(sp)
   199a4:	11000015 	stw	r4,0(r2)
   199a8:	10c00115 	stw	r3,4(r2)
   199ac:	003c2b06 	br	18a5c <__alt_data_end+0xfc018a5c>
   199b0:	d8c01d45 	stb	r3,117(sp)
   199b4:	d8c02017 	ldw	r3,128(sp)
   199b8:	00800c04 	movi	r2,48
   199bc:	d8801d05 	stb	r2,116(sp)
   199c0:	d8001d85 	stb	zero,118(sp)
   199c4:	80800094 	ori	r2,r16,2
   199c8:	1800ac16 	blt	r3,zero,19c7c <___svfiprintf_internal_r+0x12a8>
   199cc:	00bfdfc4 	movi	r2,-129
   199d0:	80a0703a 	and	r16,r16,r2
   199d4:	84000094 	ori	r16,r16,2
   199d8:	002b883a 	mov	r21,zero
   199dc:	003cf806 	br	18dc0 <__alt_data_end+0xfc018dc0>
   199e0:	98c00007 	ldb	r3,0(r19)
   199e4:	003c4706 	br	18b04 <__alt_data_end+0xfc018b04>
   199e8:	d9402417 	ldw	r5,144(sp)
   199ec:	2c800017 	ldw	r18,0(r5)
   199f0:	29400104 	addi	r5,r5,4
   199f4:	d9402415 	stw	r5,144(sp)
   199f8:	9029d7fa 	srai	r20,r18,31
   199fc:	a005883a 	mov	r2,r20
   19a00:	003dd806 	br	19164 <__alt_data_end+0xfc019164>
   19a04:	d9402417 	ldw	r5,144(sp)
   19a08:	0029883a 	mov	r20,zero
   19a0c:	2c800017 	ldw	r18,0(r5)
   19a10:	29400104 	addi	r5,r5,4
   19a14:	d9402415 	stw	r5,144(sp)
   19a18:	003cdb06 	br	18d88 <__alt_data_end+0xfc018d88>
   19a1c:	8080100c 	andi	r2,r16,64
   19a20:	d8001d85 	stb	zero,118(sp)
   19a24:	10003326 	beq	r2,zero,19af4 <___svfiprintf_internal_r+0x1120>
   19a28:	d9002417 	ldw	r4,144(sp)
   19a2c:	d9402017 	ldw	r5,128(sp)
   19a30:	0029883a 	mov	r20,zero
   19a34:	20800104 	addi	r2,r4,4
   19a38:	2480000b 	ldhu	r18,0(r4)
   19a3c:	283e7e0e 	bge	r5,zero,19438 <__alt_data_end+0xfc019438>
   19a40:	9506b03a 	or	r3,r18,r20
   19a44:	d8802415 	stw	r2,144(sp)
   19a48:	183d271e 	bne	r3,zero,18ee8 <__alt_data_end+0xfc018ee8>
   19a4c:	002b883a 	mov	r21,zero
   19a50:	0005883a 	mov	r2,zero
   19a54:	003fb506 	br	1992c <__alt_data_end+0xfc01992c>
   19a58:	98c00043 	ldbu	r3,1(r19)
   19a5c:	8c400814 	ori	r17,r17,32
   19a60:	9cc00044 	addi	r19,r19,1
   19a64:	18c03fcc 	andi	r3,r3,255
   19a68:	18c0201c 	xori	r3,r3,128
   19a6c:	18ffe004 	addi	r3,r3,-128
   19a70:	003c2406 	br	18b04 <__alt_data_end+0xfc018b04>
   19a74:	d8c02415 	stw	r3,144(sp)
   19a78:	002b883a 	mov	r21,zero
   19a7c:	003fa806 	br	19920 <__alt_data_end+0xfc019920>
   19a80:	010000f4 	movhi	r4,3
   19a84:	212b5104 	addi	r4,r4,-21180
   19a88:	d9002915 	stw	r4,164(sp)
   19a8c:	d8c02415 	stw	r3,144(sp)
   19a90:	1021883a 	mov	r16,r2
   19a94:	9504b03a 	or	r2,r18,r20
   19a98:	103f8b1e 	bne	r2,zero,198c8 <__alt_data_end+0xfc0198c8>
   19a9c:	002b883a 	mov	r21,zero
   19aa0:	00800084 	movi	r2,2
   19aa4:	003fa106 	br	1992c <__alt_data_end+0xfc01992c>
   19aa8:	0025883a 	mov	r18,zero
   19aac:	94800c04 	addi	r18,r18,48
   19ab0:	dc8019c5 	stb	r18,103(sp)
   19ab4:	dd002c17 	ldw	r20,176(sp)
   19ab8:	dc4019c4 	addi	r17,sp,103
   19abc:	003ce906 	br	18e64 <__alt_data_end+0xfc018e64>
   19ac0:	d9402317 	ldw	r5,140(sp)
   19ac4:	d9002717 	ldw	r4,156(sp)
   19ac8:	d9801a04 	addi	r6,sp,104
   19acc:	00188040 	call	18804 <__ssprint_r>
   19ad0:	103f001e 	bne	r2,zero,196d4 <__alt_data_end+0xfc0196d4>
   19ad4:	d8c01c17 	ldw	r3,112(sp)
   19ad8:	d8801b17 	ldw	r2,108(sp)
   19adc:	d811883a 	mov	r8,sp
   19ae0:	003e7e06 	br	194dc <__alt_data_end+0xfc0194dc>
   19ae4:	014000f4 	movhi	r5,3
   19ae8:	296bb904 	addi	r5,r5,-20764
   19aec:	d9402115 	stw	r5,132(sp)
   19af0:	003ea406 	br	19584 <__alt_data_end+0xfc019584>
   19af4:	d8c02417 	ldw	r3,144(sp)
   19af8:	d9002017 	ldw	r4,128(sp)
   19afc:	0029883a 	mov	r20,zero
   19b00:	18800104 	addi	r2,r3,4
   19b04:	1c800017 	ldw	r18,0(r3)
   19b08:	203e4b0e 	bge	r4,zero,19438 <__alt_data_end+0xfc019438>
   19b0c:	003fcc06 	br	19a40 <__alt_data_end+0xfc019a40>
   19b10:	d9002417 	ldw	r4,144(sp)
   19b14:	d9402017 	ldw	r5,128(sp)
   19b18:	0029883a 	mov	r20,zero
   19b1c:	20800104 	addi	r2,r4,4
   19b20:	24800017 	ldw	r18,0(r4)
   19b24:	283e270e 	bge	r5,zero,193c4 <__alt_data_end+0xfc0193c4>
   19b28:	003f7b06 	br	19918 <__alt_data_end+0xfc019918>
   19b2c:	8400100c 	andi	r16,r16,64
   19b30:	80003326 	beq	r16,zero,19c00 <___svfiprintf_internal_r+0x122c>
   19b34:	d9402417 	ldw	r5,144(sp)
   19b38:	d8c02617 	ldw	r3,152(sp)
   19b3c:	28800017 	ldw	r2,0(r5)
   19b40:	29400104 	addi	r5,r5,4
   19b44:	d9402415 	stw	r5,144(sp)
   19b48:	10c0000d 	sth	r3,0(r2)
   19b4c:	003bc306 	br	18a5c <__alt_data_end+0xfc018a5c>
   19b50:	d9002417 	ldw	r4,144(sp)
   19b54:	0029883a 	mov	r20,zero
   19b58:	24800017 	ldw	r18,0(r4)
   19b5c:	21000104 	addi	r4,r4,4
   19b60:	d9002415 	stw	r4,144(sp)
   19b64:	003c8806 	br	18d88 <__alt_data_end+0xfc018d88>
   19b68:	d8c02417 	ldw	r3,144(sp)
   19b6c:	1c800017 	ldw	r18,0(r3)
   19b70:	18c00104 	addi	r3,r3,4
   19b74:	d8c02415 	stw	r3,144(sp)
   19b78:	9029d7fa 	srai	r20,r18,31
   19b7c:	a005883a 	mov	r2,r20
   19b80:	003d7806 	br	19164 <__alt_data_end+0xfc019164>
   19b84:	8809883a 	mov	r4,r17
   19b88:	da002d15 	stw	r8,180(sp)
   19b8c:	000f8080 	call	f808 <strlen>
   19b90:	1029883a 	mov	r20,r2
   19b94:	dd401d83 	ldbu	r21,118(sp)
   19b98:	ddc02415 	stw	r23,144(sp)
   19b9c:	d8002015 	stw	zero,128(sp)
   19ba0:	da002d17 	ldw	r8,180(sp)
   19ba4:	003caf06 	br	18e64 <__alt_data_end+0xfc018e64>
   19ba8:	013fffc4 	movi	r4,-1
   19bac:	003df206 	br	19378 <__alt_data_end+0xfc019378>
   19bb0:	dd002017 	ldw	r20,128(sp)
   19bb4:	00800184 	movi	r2,6
   19bb8:	1500012e 	bgeu	r2,r20,19bc0 <___svfiprintf_internal_r+0x11ec>
   19bbc:	1029883a 	mov	r20,r2
   19bc0:	a025883a 	mov	r18,r20
   19bc4:	a0004116 	blt	r20,zero,19ccc <___svfiprintf_internal_r+0x12f8>
   19bc8:	044000f4 	movhi	r17,3
   19bcc:	ddc02415 	stw	r23,144(sp)
   19bd0:	8c6b5604 	addi	r17,r17,-21160
   19bd4:	003ce806 	br	18f78 <__alt_data_end+0xfc018f78>
   19bd8:	04001004 	movi	r16,64
   19bdc:	800b883a 	mov	r5,r16
   19be0:	000e7340 	call	e734 <_malloc_r>
   19be4:	d8c02317 	ldw	r3,140(sp)
   19be8:	18800015 	stw	r2,0(r3)
   19bec:	18800415 	stw	r2,16(r3)
   19bf0:	10004d26 	beq	r2,zero,19d28 <___svfiprintf_internal_r+0x1354>
   19bf4:	d9402317 	ldw	r5,140(sp)
   19bf8:	2c000515 	stw	r16,20(r5)
   19bfc:	003b8906 	br	18a24 <__alt_data_end+0xfc018a24>
   19c00:	d9002417 	ldw	r4,144(sp)
   19c04:	d9402617 	ldw	r5,152(sp)
   19c08:	20800017 	ldw	r2,0(r4)
   19c0c:	21000104 	addi	r4,r4,4
   19c10:	d9002415 	stw	r4,144(sp)
   19c14:	11400015 	stw	r5,0(r2)
   19c18:	003b9006 	br	18a5c <__alt_data_end+0xfc018a5c>
   19c1c:	8080004c 	andi	r2,r16,1
   19c20:	002b883a 	mov	r21,zero
   19c24:	10000526 	beq	r2,zero,19c3c <___svfiprintf_internal_r+0x1268>
   19c28:	00800c04 	movi	r2,48
   19c2c:	d88019c5 	stb	r2,103(sp)
   19c30:	dd002c17 	ldw	r20,176(sp)
   19c34:	dc4019c4 	addi	r17,sp,103
   19c38:	003c8a06 	br	18e64 <__alt_data_end+0xfc018e64>
   19c3c:	0029883a 	mov	r20,zero
   19c40:	dc401a04 	addi	r17,sp,104
   19c44:	003c8706 	br	18e64 <__alt_data_end+0xfc018e64>
   19c48:	014000f4 	movhi	r5,3
   19c4c:	296bbd04 	addi	r5,r5,-20748
   19c50:	d9402815 	stw	r5,160(sp)
   19c54:	003cff06 	br	19054 <__alt_data_end+0xfc019054>
   19c58:	00bfffc4 	movi	r2,-1
   19c5c:	003ea206 	br	196e8 <__alt_data_end+0xfc0196e8>
   19c60:	00800044 	movi	r2,1
   19c64:	10803fcc 	andi	r2,r2,255
   19c68:	00c00044 	movi	r3,1
   19c6c:	10fd4526 	beq	r2,r3,19184 <__alt_data_end+0xfc019184>
   19c70:	00c00084 	movi	r3,2
   19c74:	10fc5226 	beq	r2,r3,18dc0 <__alt_data_end+0xfc018dc0>
   19c78:	003c9c06 	br	18eec <__alt_data_end+0xfc018eec>
   19c7c:	1021883a 	mov	r16,r2
   19c80:	002b883a 	mov	r21,zero
   19c84:	00800084 	movi	r2,2
   19c88:	003ff606 	br	19c64 <__alt_data_end+0xfc019c64>
   19c8c:	010000f4 	movhi	r4,3
   19c90:	212bbd04 	addi	r4,r4,-20748
   19c94:	d9002815 	stw	r4,160(sp)
   19c98:	003e7206 	br	19664 <__alt_data_end+0xfc019664>
   19c9c:	014000f4 	movhi	r5,3
   19ca0:	296bb904 	addi	r5,r5,-20764
   19ca4:	d9402115 	stw	r5,132(sp)
   19ca8:	003ec506 	br	197c0 <__alt_data_end+0xfc0197c0>
   19cac:	e027883a 	mov	r19,fp
   19cb0:	d8002015 	stw	zero,128(sp)
   19cb4:	003b9406 	br	18b08 <__alt_data_end+0xfc018b08>
   19cb8:	dd002017 	ldw	r20,128(sp)
   19cbc:	dd401d83 	ldbu	r21,118(sp)
   19cc0:	ddc02415 	stw	r23,144(sp)
   19cc4:	d8002015 	stw	zero,128(sp)
   19cc8:	003c6606 	br	18e64 <__alt_data_end+0xfc018e64>
   19ccc:	0025883a 	mov	r18,zero
   19cd0:	003fbd06 	br	19bc8 <__alt_data_end+0xfc019bc8>
   19cd4:	d9402417 	ldw	r5,144(sp)
   19cd8:	d8c02417 	ldw	r3,144(sp)
   19cdc:	29400017 	ldw	r5,0(r5)
   19ce0:	19000104 	addi	r4,r3,4
   19ce4:	d9002415 	stw	r4,144(sp)
   19ce8:	d9402015 	stw	r5,128(sp)
   19cec:	98c00043 	ldbu	r3,1(r19)
   19cf0:	e027883a 	mov	r19,fp
   19cf4:	283f5b0e 	bge	r5,zero,19a64 <__alt_data_end+0xfc019a64>
   19cf8:	18c03fcc 	andi	r3,r3,255
   19cfc:	013fffc4 	movi	r4,-1
   19d00:	18c0201c 	xori	r3,r3,128
   19d04:	d9002015 	stw	r4,128(sp)
   19d08:	18ffe004 	addi	r3,r3,-128
   19d0c:	003b7d06 	br	18b04 <__alt_data_end+0xfc018b04>
   19d10:	dd401d85 	stb	r21,118(sp)
   19d14:	003cf306 	br	190e4 <__alt_data_end+0xfc0190e4>
   19d18:	dd401d85 	stb	r21,118(sp)
   19d1c:	003d4e06 	br	19258 <__alt_data_end+0xfc019258>
   19d20:	dd401d85 	stb	r21,118(sp)
   19d24:	003c0e06 	br	18d60 <__alt_data_end+0xfc018d60>
   19d28:	d9002717 	ldw	r4,156(sp)
   19d2c:	00800304 	movi	r2,12
   19d30:	20800015 	stw	r2,0(r4)
   19d34:	00bfffc4 	movi	r2,-1
   19d38:	003e6b06 	br	196e8 <__alt_data_end+0xfc0196e8>
   19d3c:	dd401d85 	stb	r21,118(sp)
   19d40:	003d0006 	br	19144 <__alt_data_end+0xfc019144>
   19d44:	dd401d85 	stb	r21,118(sp)
   19d48:	003d7106 	br	19310 <__alt_data_end+0xfc019310>
   19d4c:	dd401d85 	stb	r21,118(sp)
   19d50:	003c5706 	br	18eb0 <__alt_data_end+0xfc018eb0>
   19d54:	dd401d85 	stb	r21,118(sp)
   19d58:	003c2e06 	br	18e14 <__alt_data_end+0xfc018e14>
   19d5c:	dd401d85 	stb	r21,118(sp)
   19d60:	003d8c06 	br	19394 <__alt_data_end+0xfc019394>
   19d64:	dd401d85 	stb	r21,118(sp)
   19d68:	003da706 	br	19408 <__alt_data_end+0xfc019408>
   19d6c:	dd401d85 	stb	r21,118(sp)
   19d70:	003cc806 	br	19094 <__alt_data_end+0xfc019094>

00019d74 <__sprint_r.part.0>:
   19d74:	28801917 	ldw	r2,100(r5)
   19d78:	defff604 	addi	sp,sp,-40
   19d7c:	dd400515 	stw	r21,20(sp)
   19d80:	dfc00915 	stw	ra,36(sp)
   19d84:	df000815 	stw	fp,32(sp)
   19d88:	ddc00715 	stw	r23,28(sp)
   19d8c:	dd800615 	stw	r22,24(sp)
   19d90:	dd000415 	stw	r20,16(sp)
   19d94:	dcc00315 	stw	r19,12(sp)
   19d98:	dc800215 	stw	r18,8(sp)
   19d9c:	dc400115 	stw	r17,4(sp)
   19da0:	dc000015 	stw	r16,0(sp)
   19da4:	1088000c 	andi	r2,r2,8192
   19da8:	302b883a 	mov	r21,r6
   19dac:	10002e26 	beq	r2,zero,19e68 <__sprint_r.part.0+0xf4>
   19db0:	30800217 	ldw	r2,8(r6)
   19db4:	35800017 	ldw	r22,0(r6)
   19db8:	10002926 	beq	r2,zero,19e60 <__sprint_r.part.0+0xec>
   19dbc:	2827883a 	mov	r19,r5
   19dc0:	2029883a 	mov	r20,r4
   19dc4:	b5c00104 	addi	r23,r22,4
   19dc8:	04bfffc4 	movi	r18,-1
   19dcc:	bc400017 	ldw	r17,0(r23)
   19dd0:	b4000017 	ldw	r16,0(r22)
   19dd4:	0039883a 	mov	fp,zero
   19dd8:	8822d0ba 	srli	r17,r17,2
   19ddc:	8800031e 	bne	r17,zero,19dec <__sprint_r.part.0+0x78>
   19de0:	00001806 	br	19e44 <__sprint_r.part.0+0xd0>
   19de4:	84000104 	addi	r16,r16,4
   19de8:	8f001526 	beq	r17,fp,19e40 <__sprint_r.part.0+0xcc>
   19dec:	81400017 	ldw	r5,0(r16)
   19df0:	980d883a 	mov	r6,r19
   19df4:	a009883a 	mov	r4,r20
   19df8:	001b9bc0 	call	1b9bc <_fputwc_r>
   19dfc:	e7000044 	addi	fp,fp,1
   19e00:	14bff81e 	bne	r2,r18,19de4 <__alt_data_end+0xfc019de4>
   19e04:	9005883a 	mov	r2,r18
   19e08:	a8000215 	stw	zero,8(r21)
   19e0c:	a8000115 	stw	zero,4(r21)
   19e10:	dfc00917 	ldw	ra,36(sp)
   19e14:	df000817 	ldw	fp,32(sp)
   19e18:	ddc00717 	ldw	r23,28(sp)
   19e1c:	dd800617 	ldw	r22,24(sp)
   19e20:	dd400517 	ldw	r21,20(sp)
   19e24:	dd000417 	ldw	r20,16(sp)
   19e28:	dcc00317 	ldw	r19,12(sp)
   19e2c:	dc800217 	ldw	r18,8(sp)
   19e30:	dc400117 	ldw	r17,4(sp)
   19e34:	dc000017 	ldw	r16,0(sp)
   19e38:	dec00a04 	addi	sp,sp,40
   19e3c:	f800283a 	ret
   19e40:	a8800217 	ldw	r2,8(r21)
   19e44:	8c63883a 	add	r17,r17,r17
   19e48:	8c63883a 	add	r17,r17,r17
   19e4c:	1445c83a 	sub	r2,r2,r17
   19e50:	a8800215 	stw	r2,8(r21)
   19e54:	b5800204 	addi	r22,r22,8
   19e58:	bdc00204 	addi	r23,r23,8
   19e5c:	103fdb1e 	bne	r2,zero,19dcc <__alt_data_end+0xfc019dcc>
   19e60:	0005883a 	mov	r2,zero
   19e64:	003fe806 	br	19e08 <__alt_data_end+0xfc019e08>
   19e68:	00163a80 	call	163a8 <__sfvwrite_r>
   19e6c:	003fe606 	br	19e08 <__alt_data_end+0xfc019e08>

00019e70 <__sprint_r>:
   19e70:	30c00217 	ldw	r3,8(r6)
   19e74:	18000126 	beq	r3,zero,19e7c <__sprint_r+0xc>
   19e78:	0019d741 	jmpi	19d74 <__sprint_r.part.0>
   19e7c:	30000115 	stw	zero,4(r6)
   19e80:	0005883a 	mov	r2,zero
   19e84:	f800283a 	ret

00019e88 <___vfiprintf_internal_r>:
   19e88:	deffca04 	addi	sp,sp,-216
   19e8c:	dd403115 	stw	r21,196(sp)
   19e90:	dfc03515 	stw	ra,212(sp)
   19e94:	df003415 	stw	fp,208(sp)
   19e98:	ddc03315 	stw	r23,204(sp)
   19e9c:	dd803215 	stw	r22,200(sp)
   19ea0:	dd003015 	stw	r20,192(sp)
   19ea4:	dcc02f15 	stw	r19,188(sp)
   19ea8:	dc802e15 	stw	r18,184(sp)
   19eac:	dc402d15 	stw	r17,180(sp)
   19eb0:	dc002c15 	stw	r16,176(sp)
   19eb4:	d9002115 	stw	r4,132(sp)
   19eb8:	d9402015 	stw	r5,128(sp)
   19ebc:	d9c02215 	stw	r7,136(sp)
   19ec0:	302b883a 	mov	r21,r6
   19ec4:	20000226 	beq	r4,zero,19ed0 <___vfiprintf_internal_r+0x48>
   19ec8:	20800e17 	ldw	r2,56(r4)
   19ecc:	1000cf26 	beq	r2,zero,1a20c <___vfiprintf_internal_r+0x384>
   19ed0:	d8c02017 	ldw	r3,128(sp)
   19ed4:	1880030b 	ldhu	r2,12(r3)
   19ed8:	10c8000c 	andi	r3,r2,8192
   19edc:	1800071e 	bne	r3,zero,19efc <___vfiprintf_internal_r+0x74>
   19ee0:	d9402017 	ldw	r5,128(sp)
   19ee4:	00f7ffc4 	movi	r3,-8193
   19ee8:	10880014 	ori	r2,r2,8192
   19eec:	29001917 	ldw	r4,100(r5)
   19ef0:	2880030d 	sth	r2,12(r5)
   19ef4:	20c6703a 	and	r3,r4,r3
   19ef8:	28c01915 	stw	r3,100(r5)
   19efc:	10c0020c 	andi	r3,r2,8
   19f00:	1800a526 	beq	r3,zero,1a198 <___vfiprintf_internal_r+0x310>
   19f04:	d9002017 	ldw	r4,128(sp)
   19f08:	20c00417 	ldw	r3,16(r4)
   19f0c:	1800a226 	beq	r3,zero,1a198 <___vfiprintf_internal_r+0x310>
   19f10:	1080068c 	andi	r2,r2,26
   19f14:	00c00284 	movi	r3,10
   19f18:	10c0a826 	beq	r2,r3,1a1bc <___vfiprintf_internal_r+0x334>
   19f1c:	d9001a04 	addi	r4,sp,104
   19f20:	d94019c4 	addi	r5,sp,103
   19f24:	048000f4 	movhi	r18,3
   19f28:	2145c83a 	sub	r2,r4,r5
   19f2c:	94abc104 	addi	r18,r18,-20732
   19f30:	d9001e15 	stw	r4,120(sp)
   19f34:	d9401f15 	stw	r5,124(sp)
   19f38:	dec01a15 	stw	sp,104(sp)
   19f3c:	d8001c15 	stw	zero,112(sp)
   19f40:	d8001b15 	stw	zero,108(sp)
   19f44:	d811883a 	mov	r8,sp
   19f48:	d8002615 	stw	zero,152(sp)
   19f4c:	d8002415 	stw	zero,144(sp)
   19f50:	d8802815 	stw	r2,160(sp)
   19f54:	a82d883a 	mov	r22,r21
   19f58:	b0800007 	ldb	r2,0(r22)
   19f5c:	10040d26 	beq	r2,zero,1af94 <___vfiprintf_internal_r+0x110c>
   19f60:	00c00944 	movi	r3,37
   19f64:	b029883a 	mov	r20,r22
   19f68:	10c0021e 	bne	r2,r3,19f74 <___vfiprintf_internal_r+0xec>
   19f6c:	00001606 	br	19fc8 <___vfiprintf_internal_r+0x140>
   19f70:	10c00326 	beq	r2,r3,19f80 <___vfiprintf_internal_r+0xf8>
   19f74:	a5000044 	addi	r20,r20,1
   19f78:	a0800007 	ldb	r2,0(r20)
   19f7c:	103ffc1e 	bne	r2,zero,19f70 <__alt_data_end+0xfc019f70>
   19f80:	a5a1c83a 	sub	r16,r20,r22
   19f84:	80001026 	beq	r16,zero,19fc8 <___vfiprintf_internal_r+0x140>
   19f88:	d8c01c17 	ldw	r3,112(sp)
   19f8c:	d8801b17 	ldw	r2,108(sp)
   19f90:	45800015 	stw	r22,0(r8)
   19f94:	80c7883a 	add	r3,r16,r3
   19f98:	10800044 	addi	r2,r2,1
   19f9c:	44000115 	stw	r16,4(r8)
   19fa0:	d8c01c15 	stw	r3,112(sp)
   19fa4:	d8801b15 	stw	r2,108(sp)
   19fa8:	010001c4 	movi	r4,7
   19fac:	2080750e 	bge	r4,r2,1a184 <___vfiprintf_internal_r+0x2fc>
   19fb0:	1803951e 	bne	r3,zero,1ae08 <___vfiprintf_internal_r+0xf80>
   19fb4:	d8c02417 	ldw	r3,144(sp)
   19fb8:	d8001b15 	stw	zero,108(sp)
   19fbc:	d811883a 	mov	r8,sp
   19fc0:	1c07883a 	add	r3,r3,r16
   19fc4:	d8c02415 	stw	r3,144(sp)
   19fc8:	a0800007 	ldb	r2,0(r20)
   19fcc:	1002e026 	beq	r2,zero,1ab50 <___vfiprintf_internal_r+0xcc8>
   19fd0:	a5800044 	addi	r22,r20,1
   19fd4:	a0c00047 	ldb	r3,1(r20)
   19fd8:	d8001d85 	stb	zero,118(sp)
   19fdc:	0027883a 	mov	r19,zero
   19fe0:	d8002305 	stb	zero,140(sp)
   19fe4:	043fffc4 	movi	r16,-1
   19fe8:	d8002515 	stw	zero,148(sp)
   19fec:	0023883a 	mov	r17,zero
   19ff0:	05001604 	movi	r20,88
   19ff4:	05400244 	movi	r21,9
   19ff8:	402f883a 	mov	r23,r8
   19ffc:	b5800044 	addi	r22,r22,1
   1a000:	18bff804 	addi	r2,r3,-32
   1a004:	a0827736 	bltu	r20,r2,1a9e4 <___vfiprintf_internal_r+0xb5c>
   1a008:	100490ba 	slli	r2,r2,2
   1a00c:	010000b4 	movhi	r4,2
   1a010:	21280804 	addi	r4,r4,-24544
   1a014:	1105883a 	add	r2,r2,r4
   1a018:	10800017 	ldw	r2,0(r2)
   1a01c:	1000683a 	jmp	r2
   1a020:	0001a6e4 	muli	zero,zero,1691
   1a024:	0001a9e4 	muli	zero,zero,1703
   1a028:	0001a9e4 	muli	zero,zero,1703
   1a02c:	0001a700 	call	1a70 <_ZN3USB4TaskEv+0x254>
   1a030:	0001a9e4 	muli	zero,zero,1703
   1a034:	0001a9e4 	muli	zero,zero,1703
   1a038:	0001a9e4 	muli	zero,zero,1703
   1a03c:	0001a9e4 	muli	zero,zero,1703
   1a040:	0001a9e4 	muli	zero,zero,1703
   1a044:	0001a9e4 	muli	zero,zero,1703
   1a048:	0001a908 	cmpgei	zero,zero,1700
   1a04c:	0001a92c 	andhi	zero,zero,1700
   1a050:	0001a9e4 	muli	zero,zero,1703
   1a054:	0001a224 	muli	zero,zero,1672
   1a058:	0001a940 	call	1a94 <_ZN3USB4TaskEv+0x278>
   1a05c:	0001a9e4 	muli	zero,zero,1703
   1a060:	0001a70c 	andi	zero,zero,1692
   1a064:	0001a718 	cmpnei	zero,zero,1692
   1a068:	0001a718 	cmpnei	zero,zero,1692
   1a06c:	0001a718 	cmpnei	zero,zero,1692
   1a070:	0001a718 	cmpnei	zero,zero,1692
   1a074:	0001a718 	cmpnei	zero,zero,1692
   1a078:	0001a718 	cmpnei	zero,zero,1692
   1a07c:	0001a718 	cmpnei	zero,zero,1692
   1a080:	0001a718 	cmpnei	zero,zero,1692
   1a084:	0001a718 	cmpnei	zero,zero,1692
   1a088:	0001a9e4 	muli	zero,zero,1703
   1a08c:	0001a9e4 	muli	zero,zero,1703
   1a090:	0001a9e4 	muli	zero,zero,1703
   1a094:	0001a9e4 	muli	zero,zero,1703
   1a098:	0001a9e4 	muli	zero,zero,1703
   1a09c:	0001a9e4 	muli	zero,zero,1703
   1a0a0:	0001a9e4 	muli	zero,zero,1703
   1a0a4:	0001a9e4 	muli	zero,zero,1703
   1a0a8:	0001a9e4 	muli	zero,zero,1703
   1a0ac:	0001a9e4 	muli	zero,zero,1703
   1a0b0:	0001a758 	cmpnei	zero,zero,1693
   1a0b4:	0001a9e4 	muli	zero,zero,1703
   1a0b8:	0001a9e4 	muli	zero,zero,1703
   1a0bc:	0001a9e4 	muli	zero,zero,1703
   1a0c0:	0001a9e4 	muli	zero,zero,1703
   1a0c4:	0001a9e4 	muli	zero,zero,1703
   1a0c8:	0001a9e4 	muli	zero,zero,1703
   1a0cc:	0001a9e4 	muli	zero,zero,1703
   1a0d0:	0001a9e4 	muli	zero,zero,1703
   1a0d4:	0001a9e4 	muli	zero,zero,1703
   1a0d8:	0001a9e4 	muli	zero,zero,1703
   1a0dc:	0001a794 	movui	zero,1694
   1a0e0:	0001a9e4 	muli	zero,zero,1703
   1a0e4:	0001a9e4 	muli	zero,zero,1703
   1a0e8:	0001a9e4 	muli	zero,zero,1703
   1a0ec:	0001a9e4 	muli	zero,zero,1703
   1a0f0:	0001a9e4 	muli	zero,zero,1703
   1a0f4:	0001a7f0 	cmpltui	zero,zero,1695
   1a0f8:	0001a9e4 	muli	zero,zero,1703
   1a0fc:	0001a9e4 	muli	zero,zero,1703
   1a100:	0001a864 	muli	zero,zero,1697
   1a104:	0001a9e4 	muli	zero,zero,1703
   1a108:	0001a9e4 	muli	zero,zero,1703
   1a10c:	0001a9e4 	muli	zero,zero,1703
   1a110:	0001a9e4 	muli	zero,zero,1703
   1a114:	0001a9e4 	muli	zero,zero,1703
   1a118:	0001a9e4 	muli	zero,zero,1703
   1a11c:	0001a9e4 	muli	zero,zero,1703
   1a120:	0001a9e4 	muli	zero,zero,1703
   1a124:	0001a9e4 	muli	zero,zero,1703
   1a128:	0001a9e4 	muli	zero,zero,1703
   1a12c:	0001a60c 	andi	zero,zero,1688
   1a130:	0001a63c 	xorhi	zero,zero,1688
   1a134:	0001a9e4 	muli	zero,zero,1703
   1a138:	0001a9e4 	muli	zero,zero,1703
   1a13c:	0001a9e4 	muli	zero,zero,1703
   1a140:	0001a98c 	andi	zero,zero,1702
   1a144:	0001a63c 	xorhi	zero,zero,1688
   1a148:	0001a9e4 	muli	zero,zero,1703
   1a14c:	0001a9e4 	muli	zero,zero,1703
   1a150:	0001a4e4 	muli	zero,zero,1683
   1a154:	0001a9e4 	muli	zero,zero,1703
   1a158:	0001a4f8 	rdprs	zero,zero,1683
   1a15c:	0001a530 	cmpltui	zero,zero,1684
   1a160:	0001a230 	cmpltui	zero,zero,1672
   1a164:	0001a4d8 	cmpnei	zero,zero,1683
   1a168:	0001a9e4 	muli	zero,zero,1703
   1a16c:	0001a8a4 	muli	zero,zero,1698
   1a170:	0001a9e4 	muli	zero,zero,1703
   1a174:	0001a8f0 	cmpltui	zero,zero,1699
   1a178:	0001a9e4 	muli	zero,zero,1703
   1a17c:	0001a9e4 	muli	zero,zero,1703
   1a180:	0001a5b4 	movhi	zero,1686
   1a184:	42000204 	addi	r8,r8,8
   1a188:	d8c02417 	ldw	r3,144(sp)
   1a18c:	1c07883a 	add	r3,r3,r16
   1a190:	d8c02415 	stw	r3,144(sp)
   1a194:	003f8c06 	br	19fc8 <__alt_data_end+0xfc019fc8>
   1a198:	d9402017 	ldw	r5,128(sp)
   1a19c:	d9002117 	ldw	r4,132(sp)
   1a1a0:	0013f180 	call	13f18 <__swsetup_r>
   1a1a4:	1003c11e 	bne	r2,zero,1b0ac <___vfiprintf_internal_r+0x1224>
   1a1a8:	d9402017 	ldw	r5,128(sp)
   1a1ac:	00c00284 	movi	r3,10
   1a1b0:	2880030b 	ldhu	r2,12(r5)
   1a1b4:	1080068c 	andi	r2,r2,26
   1a1b8:	10ff581e 	bne	r2,r3,19f1c <__alt_data_end+0xfc019f1c>
   1a1bc:	d8c02017 	ldw	r3,128(sp)
   1a1c0:	1880038f 	ldh	r2,14(r3)
   1a1c4:	103f5516 	blt	r2,zero,19f1c <__alt_data_end+0xfc019f1c>
   1a1c8:	d9c02217 	ldw	r7,136(sp)
   1a1cc:	d9002117 	ldw	r4,132(sp)
   1a1d0:	a80d883a 	mov	r6,r21
   1a1d4:	180b883a 	mov	r5,r3
   1a1d8:	001b3b00 	call	1b3b0 <__sbprintf>
   1a1dc:	dfc03517 	ldw	ra,212(sp)
   1a1e0:	df003417 	ldw	fp,208(sp)
   1a1e4:	ddc03317 	ldw	r23,204(sp)
   1a1e8:	dd803217 	ldw	r22,200(sp)
   1a1ec:	dd403117 	ldw	r21,196(sp)
   1a1f0:	dd003017 	ldw	r20,192(sp)
   1a1f4:	dcc02f17 	ldw	r19,188(sp)
   1a1f8:	dc802e17 	ldw	r18,184(sp)
   1a1fc:	dc402d17 	ldw	r17,180(sp)
   1a200:	dc002c17 	ldw	r16,176(sp)
   1a204:	dec03604 	addi	sp,sp,216
   1a208:	f800283a 	ret
   1a20c:	0015f240 	call	15f24 <__sinit>
   1a210:	003f2f06 	br	19ed0 <__alt_data_end+0xfc019ed0>
   1a214:	d8c02517 	ldw	r3,148(sp)
   1a218:	d8802215 	stw	r2,136(sp)
   1a21c:	00c7c83a 	sub	r3,zero,r3
   1a220:	d8c02515 	stw	r3,148(sp)
   1a224:	8c400114 	ori	r17,r17,4
   1a228:	b0c00007 	ldb	r3,0(r22)
   1a22c:	003f7306 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a230:	00800c04 	movi	r2,48
   1a234:	d9402217 	ldw	r5,136(sp)
   1a238:	d8801d05 	stb	r2,116(sp)
   1a23c:	00801e04 	movi	r2,120
   1a240:	d8801d45 	stb	r2,117(sp)
   1a244:	d8001d85 	stb	zero,118(sp)
   1a248:	b811883a 	mov	r8,r23
   1a24c:	28c00104 	addi	r3,r5,4
   1a250:	2cc00017 	ldw	r19,0(r5)
   1a254:	0029883a 	mov	r20,zero
   1a258:	88800094 	ori	r2,r17,2
   1a25c:	80032516 	blt	r16,zero,1aef4 <___vfiprintf_internal_r+0x106c>
   1a260:	00bfdfc4 	movi	r2,-129
   1a264:	88a2703a 	and	r17,r17,r2
   1a268:	d8c02215 	stw	r3,136(sp)
   1a26c:	8c400094 	ori	r17,r17,2
   1a270:	98032a1e 	bne	r19,zero,1af1c <___vfiprintf_internal_r+0x1094>
   1a274:	008000f4 	movhi	r2,3
   1a278:	10ab5104 	addi	r2,r2,-21180
   1a27c:	d8802615 	stw	r2,152(sp)
   1a280:	002b883a 	mov	r21,zero
   1a284:	8001741e 	bne	r16,zero,1a858 <___vfiprintf_internal_r+0x9d0>
   1a288:	0021883a 	mov	r16,zero
   1a28c:	0029883a 	mov	r20,zero
   1a290:	ddc01a04 	addi	r23,sp,104
   1a294:	8027883a 	mov	r19,r16
   1a298:	8500010e 	bge	r16,r20,1a2a0 <___vfiprintf_internal_r+0x418>
   1a29c:	a027883a 	mov	r19,r20
   1a2a0:	ad403fcc 	andi	r21,r21,255
   1a2a4:	ad40201c 	xori	r21,r21,128
   1a2a8:	ad7fe004 	addi	r21,r21,-128
   1a2ac:	a8000126 	beq	r21,zero,1a2b4 <___vfiprintf_internal_r+0x42c>
   1a2b0:	9cc00044 	addi	r19,r19,1
   1a2b4:	89c0008c 	andi	r7,r17,2
   1a2b8:	38000126 	beq	r7,zero,1a2c0 <___vfiprintf_internal_r+0x438>
   1a2bc:	9cc00084 	addi	r19,r19,2
   1a2c0:	88c0210c 	andi	r3,r17,132
   1a2c4:	1801dd1e 	bne	r3,zero,1aa3c <___vfiprintf_internal_r+0xbb4>
   1a2c8:	d9402517 	ldw	r5,148(sp)
   1a2cc:	2cebc83a 	sub	r21,r5,r19
   1a2d0:	0541da0e 	bge	zero,r21,1aa3c <___vfiprintf_internal_r+0xbb4>
   1a2d4:	07000404 	movi	fp,16
   1a2d8:	d8801c17 	ldw	r2,112(sp)
   1a2dc:	e543be0e 	bge	fp,r21,1b1d8 <___vfiprintf_internal_r+0x1350>
   1a2e0:	014000f4 	movhi	r5,3
   1a2e4:	296bc504 	addi	r5,r5,-20716
   1a2e8:	dc002715 	stw	r16,156(sp)
   1a2ec:	d9801b17 	ldw	r6,108(sp)
   1a2f0:	a821883a 	mov	r16,r21
   1a2f4:	d9402315 	stw	r5,140(sp)
   1a2f8:	028001c4 	movi	r10,7
   1a2fc:	d9c02915 	stw	r7,164(sp)
   1a300:	182b883a 	mov	r21,r3
   1a304:	00000506 	br	1a31c <___vfiprintf_internal_r+0x494>
   1a308:	31000084 	addi	r4,r6,2
   1a30c:	42000204 	addi	r8,r8,8
   1a310:	180d883a 	mov	r6,r3
   1a314:	843ffc04 	addi	r16,r16,-16
   1a318:	e4000f0e 	bge	fp,r16,1a358 <___vfiprintf_internal_r+0x4d0>
   1a31c:	010000f4 	movhi	r4,3
   1a320:	10800404 	addi	r2,r2,16
   1a324:	30c00044 	addi	r3,r6,1
   1a328:	212bc504 	addi	r4,r4,-20716
   1a32c:	41000015 	stw	r4,0(r8)
   1a330:	47000115 	stw	fp,4(r8)
   1a334:	d8801c15 	stw	r2,112(sp)
   1a338:	d8c01b15 	stw	r3,108(sp)
   1a33c:	50fff20e 	bge	r10,r3,1a308 <__alt_data_end+0xfc01a308>
   1a340:	1001b21e 	bne	r2,zero,1aa0c <___vfiprintf_internal_r+0xb84>
   1a344:	843ffc04 	addi	r16,r16,-16
   1a348:	000d883a 	mov	r6,zero
   1a34c:	01000044 	movi	r4,1
   1a350:	d811883a 	mov	r8,sp
   1a354:	e43ff116 	blt	fp,r16,1a31c <__alt_data_end+0xfc01a31c>
   1a358:	a807883a 	mov	r3,r21
   1a35c:	d9c02917 	ldw	r7,164(sp)
   1a360:	802b883a 	mov	r21,r16
   1a364:	dc002717 	ldw	r16,156(sp)
   1a368:	d9402317 	ldw	r5,140(sp)
   1a36c:	a885883a 	add	r2,r21,r2
   1a370:	45400115 	stw	r21,4(r8)
   1a374:	41400015 	stw	r5,0(r8)
   1a378:	d8801c15 	stw	r2,112(sp)
   1a37c:	d9001b15 	stw	r4,108(sp)
   1a380:	014001c4 	movi	r5,7
   1a384:	29026216 	blt	r5,r4,1ad10 <___vfiprintf_internal_r+0xe88>
   1a388:	d9801d87 	ldb	r6,118(sp)
   1a38c:	42000204 	addi	r8,r8,8
   1a390:	21400044 	addi	r5,r4,1
   1a394:	3001ae1e 	bne	r6,zero,1aa50 <___vfiprintf_internal_r+0xbc8>
   1a398:	3801bb26 	beq	r7,zero,1aa88 <___vfiprintf_internal_r+0xc00>
   1a39c:	d9001d04 	addi	r4,sp,116
   1a3a0:	10800084 	addi	r2,r2,2
   1a3a4:	41000015 	stw	r4,0(r8)
   1a3a8:	01000084 	movi	r4,2
   1a3ac:	41000115 	stw	r4,4(r8)
   1a3b0:	d8801c15 	stw	r2,112(sp)
   1a3b4:	d9401b15 	stw	r5,108(sp)
   1a3b8:	010001c4 	movi	r4,7
   1a3bc:	2142680e 	bge	r4,r5,1ad60 <___vfiprintf_internal_r+0xed8>
   1a3c0:	1002b11e 	bne	r2,zero,1ae88 <___vfiprintf_internal_r+0x1000>
   1a3c4:	01802004 	movi	r6,128
   1a3c8:	01400044 	movi	r5,1
   1a3cc:	0009883a 	mov	r4,zero
   1a3d0:	d811883a 	mov	r8,sp
   1a3d4:	1981ae1e 	bne	r3,r6,1aa90 <___vfiprintf_internal_r+0xc08>
   1a3d8:	d8c02517 	ldw	r3,148(sp)
   1a3dc:	1cf9c83a 	sub	fp,r3,r19
   1a3e0:	0701ab0e 	bge	zero,fp,1aa90 <___vfiprintf_internal_r+0xc08>
   1a3e4:	05400404 	movi	r21,16
   1a3e8:	af03a90e 	bge	r21,fp,1b290 <___vfiprintf_internal_r+0x1408>
   1a3ec:	014000f4 	movhi	r5,3
   1a3f0:	296bc104 	addi	r5,r5,-20732
   1a3f4:	d9402315 	stw	r5,140(sp)
   1a3f8:	01c001c4 	movi	r7,7
   1a3fc:	00000506 	br	1a414 <___vfiprintf_internal_r+0x58c>
   1a400:	21800084 	addi	r6,r4,2
   1a404:	42000204 	addi	r8,r8,8
   1a408:	1809883a 	mov	r4,r3
   1a40c:	e73ffc04 	addi	fp,fp,-16
   1a410:	af000d0e 	bge	r21,fp,1a448 <___vfiprintf_internal_r+0x5c0>
   1a414:	10800404 	addi	r2,r2,16
   1a418:	20c00044 	addi	r3,r4,1
   1a41c:	44800015 	stw	r18,0(r8)
   1a420:	45400115 	stw	r21,4(r8)
   1a424:	d8801c15 	stw	r2,112(sp)
   1a428:	d8c01b15 	stw	r3,108(sp)
   1a42c:	38fff40e 	bge	r7,r3,1a400 <__alt_data_end+0xfc01a400>
   1a430:	10022b1e 	bne	r2,zero,1ace0 <___vfiprintf_internal_r+0xe58>
   1a434:	e73ffc04 	addi	fp,fp,-16
   1a438:	01800044 	movi	r6,1
   1a43c:	0009883a 	mov	r4,zero
   1a440:	d811883a 	mov	r8,sp
   1a444:	af3ff316 	blt	r21,fp,1a414 <__alt_data_end+0xfc01a414>
   1a448:	d8c02317 	ldw	r3,140(sp)
   1a44c:	1705883a 	add	r2,r2,fp
   1a450:	47000115 	stw	fp,4(r8)
   1a454:	40c00015 	stw	r3,0(r8)
   1a458:	d8801c15 	stw	r2,112(sp)
   1a45c:	d9801b15 	stw	r6,108(sp)
   1a460:	00c001c4 	movi	r3,7
   1a464:	19829416 	blt	r3,r6,1aeb8 <___vfiprintf_internal_r+0x1030>
   1a468:	8521c83a 	sub	r16,r16,r20
   1a46c:	42000204 	addi	r8,r8,8
   1a470:	31400044 	addi	r5,r6,1
   1a474:	3009883a 	mov	r4,r6
   1a478:	04018716 	blt	zero,r16,1aa98 <___vfiprintf_internal_r+0xc10>
   1a47c:	a085883a 	add	r2,r20,r2
   1a480:	45c00015 	stw	r23,0(r8)
   1a484:	45000115 	stw	r20,4(r8)
   1a488:	d8801c15 	stw	r2,112(sp)
   1a48c:	d9401b15 	stw	r5,108(sp)
   1a490:	00c001c4 	movi	r3,7
   1a494:	1941c20e 	bge	r3,r5,1aba0 <___vfiprintf_internal_r+0xd18>
   1a498:	1002531e 	bne	r2,zero,1ade8 <___vfiprintf_internal_r+0xf60>
   1a49c:	d8001b15 	stw	zero,108(sp)
   1a4a0:	8c40010c 	andi	r17,r17,4
   1a4a4:	88023226 	beq	r17,zero,1ad70 <___vfiprintf_internal_r+0xee8>
   1a4a8:	d9002517 	ldw	r4,148(sp)
   1a4ac:	24e3c83a 	sub	r17,r4,r19
   1a4b0:	04432916 	blt	zero,r17,1b158 <___vfiprintf_internal_r+0x12d0>
   1a4b4:	d8802517 	ldw	r2,148(sp)
   1a4b8:	14c0010e 	bge	r2,r19,1a4c0 <___vfiprintf_internal_r+0x638>
   1a4bc:	9805883a 	mov	r2,r19
   1a4c0:	d8c02417 	ldw	r3,144(sp)
   1a4c4:	1887883a 	add	r3,r3,r2
   1a4c8:	d8c02415 	stw	r3,144(sp)
   1a4cc:	d8001b15 	stw	zero,108(sp)
   1a4d0:	d811883a 	mov	r8,sp
   1a4d4:	003ea006 	br	19f58 <__alt_data_end+0xfc019f58>
   1a4d8:	8c400814 	ori	r17,r17,32
   1a4dc:	b0c00007 	ldb	r3,0(r22)
   1a4e0:	003ec606 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a4e4:	b0c00007 	ldb	r3,0(r22)
   1a4e8:	00801b04 	movi	r2,108
   1a4ec:	18832026 	beq	r3,r2,1b170 <___vfiprintf_internal_r+0x12e8>
   1a4f0:	8c400414 	ori	r17,r17,16
   1a4f4:	003ec106 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a4f8:	9cc03fcc 	andi	r19,r19,255
   1a4fc:	b811883a 	mov	r8,r23
   1a500:	9803981e 	bne	r19,zero,1b364 <___vfiprintf_internal_r+0x14dc>
   1a504:	8880080c 	andi	r2,r17,32
   1a508:	1002be26 	beq	r2,zero,1b004 <___vfiprintf_internal_r+0x117c>
   1a50c:	d9002217 	ldw	r4,136(sp)
   1a510:	d9402417 	ldw	r5,144(sp)
   1a514:	20800017 	ldw	r2,0(r4)
   1a518:	2807d7fa 	srai	r3,r5,31
   1a51c:	21000104 	addi	r4,r4,4
   1a520:	d9002215 	stw	r4,136(sp)
   1a524:	11400015 	stw	r5,0(r2)
   1a528:	10c00115 	stw	r3,4(r2)
   1a52c:	003e8a06 	br	19f58 <__alt_data_end+0xfc019f58>
   1a530:	9cc03fcc 	andi	r19,r19,255
   1a534:	b811883a 	mov	r8,r23
   1a538:	9803871e 	bne	r19,zero,1b358 <___vfiprintf_internal_r+0x14d0>
   1a53c:	8880080c 	andi	r2,r17,32
   1a540:	10009a26 	beq	r2,zero,1a7ac <___vfiprintf_internal_r+0x924>
   1a544:	d9002217 	ldw	r4,136(sp)
   1a548:	d8001d85 	stb	zero,118(sp)
   1a54c:	20800204 	addi	r2,r4,8
   1a550:	24c00017 	ldw	r19,0(r4)
   1a554:	25000117 	ldw	r20,4(r4)
   1a558:	8002a416 	blt	r16,zero,1afec <___vfiprintf_internal_r+0x1164>
   1a55c:	013fdfc4 	movi	r4,-129
   1a560:	9d06b03a 	or	r3,r19,r20
   1a564:	d8802215 	stw	r2,136(sp)
   1a568:	8922703a 	and	r17,r17,r4
   1a56c:	18009b26 	beq	r3,zero,1a7dc <___vfiprintf_internal_r+0x954>
   1a570:	002b883a 	mov	r21,zero
   1a574:	ddc01a04 	addi	r23,sp,104
   1a578:	9806d0fa 	srli	r3,r19,3
   1a57c:	a008977a 	slli	r4,r20,29
   1a580:	a028d0fa 	srli	r20,r20,3
   1a584:	9cc001cc 	andi	r19,r19,7
   1a588:	98800c04 	addi	r2,r19,48
   1a58c:	bdffffc4 	addi	r23,r23,-1
   1a590:	20e6b03a 	or	r19,r4,r3
   1a594:	b8800005 	stb	r2,0(r23)
   1a598:	9d06b03a 	or	r3,r19,r20
   1a59c:	183ff61e 	bne	r3,zero,1a578 <__alt_data_end+0xfc01a578>
   1a5a0:	88c0004c 	andi	r3,r17,1
   1a5a4:	18021f1e 	bne	r3,zero,1ae24 <___vfiprintf_internal_r+0xf9c>
   1a5a8:	d9401e17 	ldw	r5,120(sp)
   1a5ac:	2de9c83a 	sub	r20,r5,r23
   1a5b0:	003f3806 	br	1a294 <__alt_data_end+0xfc01a294>
   1a5b4:	9cc03fcc 	andi	r19,r19,255
   1a5b8:	b811883a 	mov	r8,r23
   1a5bc:	98034f1e 	bne	r19,zero,1b2fc <___vfiprintf_internal_r+0x1474>
   1a5c0:	008000f4 	movhi	r2,3
   1a5c4:	10ab5104 	addi	r2,r2,-21180
   1a5c8:	d8802615 	stw	r2,152(sp)
   1a5cc:	8880080c 	andi	r2,r17,32
   1a5d0:	1000ac26 	beq	r2,zero,1a884 <___vfiprintf_internal_r+0x9fc>
   1a5d4:	d9002217 	ldw	r4,136(sp)
   1a5d8:	24c00017 	ldw	r19,0(r4)
   1a5dc:	25000117 	ldw	r20,4(r4)
   1a5e0:	21000204 	addi	r4,r4,8
   1a5e4:	d9002215 	stw	r4,136(sp)
   1a5e8:	8880004c 	andi	r2,r17,1
   1a5ec:	1001e726 	beq	r2,zero,1ad8c <___vfiprintf_internal_r+0xf04>
   1a5f0:	9d04b03a 	or	r2,r19,r20
   1a5f4:	10025c1e 	bne	r2,zero,1af68 <___vfiprintf_internal_r+0x10e0>
   1a5f8:	d8001d85 	stb	zero,118(sp)
   1a5fc:	80024416 	blt	r16,zero,1af10 <___vfiprintf_internal_r+0x1088>
   1a600:	00bfdfc4 	movi	r2,-129
   1a604:	88a2703a 	and	r17,r17,r2
   1a608:	003f1d06 	br	1a280 <__alt_data_end+0xfc01a280>
   1a60c:	d8c02217 	ldw	r3,136(sp)
   1a610:	04c00044 	movi	r19,1
   1a614:	b811883a 	mov	r8,r23
   1a618:	18800017 	ldw	r2,0(r3)
   1a61c:	18c00104 	addi	r3,r3,4
   1a620:	d8001d85 	stb	zero,118(sp)
   1a624:	d8801005 	stb	r2,64(sp)
   1a628:	d8c02215 	stw	r3,136(sp)
   1a62c:	9829883a 	mov	r20,r19
   1a630:	ddc01004 	addi	r23,sp,64
   1a634:	0021883a 	mov	r16,zero
   1a638:	003f1e06 	br	1a2b4 <__alt_data_end+0xfc01a2b4>
   1a63c:	9cc03fcc 	andi	r19,r19,255
   1a640:	b811883a 	mov	r8,r23
   1a644:	9803331e 	bne	r19,zero,1b314 <___vfiprintf_internal_r+0x148c>
   1a648:	8880080c 	andi	r2,r17,32
   1a64c:	10004826 	beq	r2,zero,1a770 <___vfiprintf_internal_r+0x8e8>
   1a650:	d9002217 	ldw	r4,136(sp)
   1a654:	20800117 	ldw	r2,4(r4)
   1a658:	24c00017 	ldw	r19,0(r4)
   1a65c:	21000204 	addi	r4,r4,8
   1a660:	d9002215 	stw	r4,136(sp)
   1a664:	1029883a 	mov	r20,r2
   1a668:	10024c16 	blt	r2,zero,1af9c <___vfiprintf_internal_r+0x1114>
   1a66c:	dd401d83 	ldbu	r21,118(sp)
   1a670:	80007116 	blt	r16,zero,1a838 <___vfiprintf_internal_r+0x9b0>
   1a674:	00ffdfc4 	movi	r3,-129
   1a678:	9d04b03a 	or	r2,r19,r20
   1a67c:	88e2703a 	and	r17,r17,r3
   1a680:	1000d126 	beq	r2,zero,1a9c8 <___vfiprintf_internal_r+0xb40>
   1a684:	a0023526 	beq	r20,zero,1af5c <___vfiprintf_internal_r+0x10d4>
   1a688:	ddc01a04 	addi	r23,sp,104
   1a68c:	4039883a 	mov	fp,r8
   1a690:	9809883a 	mov	r4,r19
   1a694:	a00b883a 	mov	r5,r20
   1a698:	01800284 	movi	r6,10
   1a69c:	000f883a 	mov	r7,zero
   1a6a0:	001c3b40 	call	1c3b4 <__umoddi3>
   1a6a4:	10800c04 	addi	r2,r2,48
   1a6a8:	bdffffc4 	addi	r23,r23,-1
   1a6ac:	9809883a 	mov	r4,r19
   1a6b0:	a00b883a 	mov	r5,r20
   1a6b4:	b8800005 	stb	r2,0(r23)
   1a6b8:	01800284 	movi	r6,10
   1a6bc:	000f883a 	mov	r7,zero
   1a6c0:	001bdb80 	call	1bdb8 <__udivdi3>
   1a6c4:	1027883a 	mov	r19,r2
   1a6c8:	10c4b03a 	or	r2,r2,r3
   1a6cc:	1829883a 	mov	r20,r3
   1a6d0:	103fef1e 	bne	r2,zero,1a690 <__alt_data_end+0xfc01a690>
   1a6d4:	d9001e17 	ldw	r4,120(sp)
   1a6d8:	e011883a 	mov	r8,fp
   1a6dc:	25e9c83a 	sub	r20,r4,r23
   1a6e0:	003eec06 	br	1a294 <__alt_data_end+0xfc01a294>
   1a6e4:	d8802307 	ldb	r2,140(sp)
   1a6e8:	1002361e 	bne	r2,zero,1afc4 <___vfiprintf_internal_r+0x113c>
   1a6ec:	00c00804 	movi	r3,32
   1a6f0:	d8c02305 	stb	r3,140(sp)
   1a6f4:	04c00044 	movi	r19,1
   1a6f8:	b0c00007 	ldb	r3,0(r22)
   1a6fc:	003e3f06 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a700:	8c400054 	ori	r17,r17,1
   1a704:	b0c00007 	ldb	r3,0(r22)
   1a708:	003e3c06 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a70c:	8c402014 	ori	r17,r17,128
   1a710:	b0c00007 	ldb	r3,0(r22)
   1a714:	003e3906 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a718:	dc002715 	stw	r16,156(sp)
   1a71c:	d8002515 	stw	zero,148(sp)
   1a720:	1f3ff404 	addi	fp,r3,-48
   1a724:	0009883a 	mov	r4,zero
   1a728:	b021883a 	mov	r16,r22
   1a72c:	01400284 	movi	r5,10
   1a730:	000d18c0 	call	d18c <__mulsi3>
   1a734:	80c00007 	ldb	r3,0(r16)
   1a738:	e089883a 	add	r4,fp,r2
   1a73c:	b5800044 	addi	r22,r22,1
   1a740:	1f3ff404 	addi	fp,r3,-48
   1a744:	b021883a 	mov	r16,r22
   1a748:	af3ff82e 	bgeu	r21,fp,1a72c <__alt_data_end+0xfc01a72c>
   1a74c:	d9002515 	stw	r4,148(sp)
   1a750:	dc002717 	ldw	r16,156(sp)
   1a754:	003e2a06 	br	1a000 <__alt_data_end+0xfc01a000>
   1a758:	9cc03fcc 	andi	r19,r19,255
   1a75c:	b811883a 	mov	r8,r23
   1a760:	9802e91e 	bne	r19,zero,1b308 <___vfiprintf_internal_r+0x1480>
   1a764:	8c400414 	ori	r17,r17,16
   1a768:	8880080c 	andi	r2,r17,32
   1a76c:	103fb81e 	bne	r2,zero,1a650 <__alt_data_end+0xfc01a650>
   1a770:	8880040c 	andi	r2,r17,16
   1a774:	10022e26 	beq	r2,zero,1b030 <___vfiprintf_internal_r+0x11a8>
   1a778:	d9402217 	ldw	r5,136(sp)
   1a77c:	2cc00017 	ldw	r19,0(r5)
   1a780:	29400104 	addi	r5,r5,4
   1a784:	d9402215 	stw	r5,136(sp)
   1a788:	9829d7fa 	srai	r20,r19,31
   1a78c:	a005883a 	mov	r2,r20
   1a790:	003fb506 	br	1a668 <__alt_data_end+0xfc01a668>
   1a794:	9cc03fcc 	andi	r19,r19,255
   1a798:	b811883a 	mov	r8,r23
   1a79c:	9802fa1e 	bne	r19,zero,1b388 <___vfiprintf_internal_r+0x1500>
   1a7a0:	8c400414 	ori	r17,r17,16
   1a7a4:	8880080c 	andi	r2,r17,32
   1a7a8:	103f661e 	bne	r2,zero,1a544 <__alt_data_end+0xfc01a544>
   1a7ac:	8880040c 	andi	r2,r17,16
   1a7b0:	10020626 	beq	r2,zero,1afcc <___vfiprintf_internal_r+0x1144>
   1a7b4:	d9402217 	ldw	r5,136(sp)
   1a7b8:	d8001d85 	stb	zero,118(sp)
   1a7bc:	0029883a 	mov	r20,zero
   1a7c0:	28800104 	addi	r2,r5,4
   1a7c4:	2cc00017 	ldw	r19,0(r5)
   1a7c8:	80020816 	blt	r16,zero,1afec <___vfiprintf_internal_r+0x1164>
   1a7cc:	00ffdfc4 	movi	r3,-129
   1a7d0:	d8802215 	stw	r2,136(sp)
   1a7d4:	88e2703a 	and	r17,r17,r3
   1a7d8:	983f651e 	bne	r19,zero,1a570 <__alt_data_end+0xfc01a570>
   1a7dc:	002b883a 	mov	r21,zero
   1a7e0:	8002cf26 	beq	r16,zero,1b320 <___vfiprintf_internal_r+0x1498>
   1a7e4:	0027883a 	mov	r19,zero
   1a7e8:	0029883a 	mov	r20,zero
   1a7ec:	003f6106 	br	1a574 <__alt_data_end+0xfc01a574>
   1a7f0:	9cc03fcc 	andi	r19,r19,255
   1a7f4:	b811883a 	mov	r8,r23
   1a7f8:	9802e01e 	bne	r19,zero,1b37c <___vfiprintf_internal_r+0x14f4>
   1a7fc:	8c400414 	ori	r17,r17,16
   1a800:	8880080c 	andi	r2,r17,32
   1a804:	1000641e 	bne	r2,zero,1a998 <___vfiprintf_internal_r+0xb10>
   1a808:	8880040c 	andi	r2,r17,16
   1a80c:	1001c81e 	bne	r2,zero,1af30 <___vfiprintf_internal_r+0x10a8>
   1a810:	8880100c 	andi	r2,r17,64
   1a814:	d8001d85 	stb	zero,118(sp)
   1a818:	1002281e 	bne	r2,zero,1b0bc <___vfiprintf_internal_r+0x1234>
   1a81c:	d9002217 	ldw	r4,136(sp)
   1a820:	0029883a 	mov	r20,zero
   1a824:	20800104 	addi	r2,r4,4
   1a828:	24c00017 	ldw	r19,0(r4)
   1a82c:	8001c60e 	bge	r16,zero,1af48 <___vfiprintf_internal_r+0x10c0>
   1a830:	d8802215 	stw	r2,136(sp)
   1a834:	002b883a 	mov	r21,zero
   1a838:	9d04b03a 	or	r2,r19,r20
   1a83c:	103f911e 	bne	r2,zero,1a684 <__alt_data_end+0xfc01a684>
   1a840:	00800044 	movi	r2,1
   1a844:	10803fcc 	andi	r2,r2,255
   1a848:	00c00044 	movi	r3,1
   1a84c:	10c05f26 	beq	r2,r3,1a9cc <___vfiprintf_internal_r+0xb44>
   1a850:	00c00084 	movi	r3,2
   1a854:	10ffe31e 	bne	r2,r3,1a7e4 <__alt_data_end+0xfc01a7e4>
   1a858:	0027883a 	mov	r19,zero
   1a85c:	0029883a 	mov	r20,zero
   1a860:	00015106 	br	1ada8 <___vfiprintf_internal_r+0xf20>
   1a864:	9cc03fcc 	andi	r19,r19,255
   1a868:	b811883a 	mov	r8,r23
   1a86c:	9802c01e 	bne	r19,zero,1b370 <___vfiprintf_internal_r+0x14e8>
   1a870:	014000f4 	movhi	r5,3
   1a874:	296b4c04 	addi	r5,r5,-21200
   1a878:	d9402615 	stw	r5,152(sp)
   1a87c:	8880080c 	andi	r2,r17,32
   1a880:	103f541e 	bne	r2,zero,1a5d4 <__alt_data_end+0xfc01a5d4>
   1a884:	8880040c 	andi	r2,r17,16
   1a888:	1001f226 	beq	r2,zero,1b054 <___vfiprintf_internal_r+0x11cc>
   1a88c:	d9402217 	ldw	r5,136(sp)
   1a890:	0029883a 	mov	r20,zero
   1a894:	2cc00017 	ldw	r19,0(r5)
   1a898:	29400104 	addi	r5,r5,4
   1a89c:	d9402215 	stw	r5,136(sp)
   1a8a0:	003f5106 	br	1a5e8 <__alt_data_end+0xfc01a5e8>
   1a8a4:	d8c02217 	ldw	r3,136(sp)
   1a8a8:	b811883a 	mov	r8,r23
   1a8ac:	d8001d85 	stb	zero,118(sp)
   1a8b0:	1dc00017 	ldw	r23,0(r3)
   1a8b4:	1f000104 	addi	fp,r3,4
   1a8b8:	b8025926 	beq	r23,zero,1b220 <___vfiprintf_internal_r+0x1398>
   1a8bc:	80023316 	blt	r16,zero,1b18c <___vfiprintf_internal_r+0x1304>
   1a8c0:	800d883a 	mov	r6,r16
   1a8c4:	000b883a 	mov	r5,zero
   1a8c8:	b809883a 	mov	r4,r23
   1a8cc:	da002a15 	stw	r8,168(sp)
   1a8d0:	0016c900 	call	16c90 <memchr>
   1a8d4:	da002a17 	ldw	r8,168(sp)
   1a8d8:	10026826 	beq	r2,zero,1b27c <___vfiprintf_internal_r+0x13f4>
   1a8dc:	15e9c83a 	sub	r20,r2,r23
   1a8e0:	dd401d83 	ldbu	r21,118(sp)
   1a8e4:	df002215 	stw	fp,136(sp)
   1a8e8:	0021883a 	mov	r16,zero
   1a8ec:	003e6906 	br	1a294 <__alt_data_end+0xfc01a294>
   1a8f0:	9cc03fcc 	andi	r19,r19,255
   1a8f4:	b811883a 	mov	r8,r23
   1a8f8:	983fc126 	beq	r19,zero,1a800 <__alt_data_end+0xfc01a800>
   1a8fc:	d8c02303 	ldbu	r3,140(sp)
   1a900:	d8c01d85 	stb	r3,118(sp)
   1a904:	003fbe06 	br	1a800 <__alt_data_end+0xfc01a800>
   1a908:	d9002217 	ldw	r4,136(sp)
   1a90c:	d9402217 	ldw	r5,136(sp)
   1a910:	21000017 	ldw	r4,0(r4)
   1a914:	28800104 	addi	r2,r5,4
   1a918:	d9002515 	stw	r4,148(sp)
   1a91c:	203e3d16 	blt	r4,zero,1a214 <__alt_data_end+0xfc01a214>
   1a920:	d8802215 	stw	r2,136(sp)
   1a924:	b0c00007 	ldb	r3,0(r22)
   1a928:	003db406 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a92c:	00c00ac4 	movi	r3,43
   1a930:	d8c02305 	stb	r3,140(sp)
   1a934:	04c00044 	movi	r19,1
   1a938:	b0c00007 	ldb	r3,0(r22)
   1a93c:	003daf06 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a940:	b0c00007 	ldb	r3,0(r22)
   1a944:	01000a84 	movi	r4,42
   1a948:	b4000044 	addi	r16,r22,1
   1a94c:	19025e26 	beq	r3,r4,1b2c8 <___vfiprintf_internal_r+0x1440>
   1a950:	1f3ff404 	addi	fp,r3,-48
   1a954:	0009883a 	mov	r4,zero
   1a958:	af025236 	bltu	r21,fp,1b2a4 <___vfiprintf_internal_r+0x141c>
   1a95c:	01400284 	movi	r5,10
   1a960:	000d18c0 	call	d18c <__mulsi3>
   1a964:	80c00007 	ldb	r3,0(r16)
   1a968:	1709883a 	add	r4,r2,fp
   1a96c:	85800044 	addi	r22,r16,1
   1a970:	1f3ff404 	addi	fp,r3,-48
   1a974:	b021883a 	mov	r16,r22
   1a978:	af3ff82e 	bgeu	r21,fp,1a95c <__alt_data_end+0xfc01a95c>
   1a97c:	2021883a 	mov	r16,r4
   1a980:	203d9f0e 	bge	r4,zero,1a000 <__alt_data_end+0xfc01a000>
   1a984:	043fffc4 	movi	r16,-1
   1a988:	003d9d06 	br	1a000 <__alt_data_end+0xfc01a000>
   1a98c:	8c401014 	ori	r17,r17,64
   1a990:	b0c00007 	ldb	r3,0(r22)
   1a994:	003d9906 	br	19ffc <__alt_data_end+0xfc019ffc>
   1a998:	d9002217 	ldw	r4,136(sp)
   1a99c:	d8001d85 	stb	zero,118(sp)
   1a9a0:	20c00204 	addi	r3,r4,8
   1a9a4:	24c00017 	ldw	r19,0(r4)
   1a9a8:	25000117 	ldw	r20,4(r4)
   1a9ac:	8001e716 	blt	r16,zero,1b14c <___vfiprintf_internal_r+0x12c4>
   1a9b0:	013fdfc4 	movi	r4,-129
   1a9b4:	9d04b03a 	or	r2,r19,r20
   1a9b8:	d8c02215 	stw	r3,136(sp)
   1a9bc:	8922703a 	and	r17,r17,r4
   1a9c0:	002b883a 	mov	r21,zero
   1a9c4:	103f2f1e 	bne	r2,zero,1a684 <__alt_data_end+0xfc01a684>
   1a9c8:	803e2f26 	beq	r16,zero,1a288 <__alt_data_end+0xfc01a288>
   1a9cc:	0027883a 	mov	r19,zero
   1a9d0:	9cc00c04 	addi	r19,r19,48
   1a9d4:	dcc019c5 	stb	r19,103(sp)
   1a9d8:	dd002817 	ldw	r20,160(sp)
   1a9dc:	ddc019c4 	addi	r23,sp,103
   1a9e0:	003e2c06 	br	1a294 <__alt_data_end+0xfc01a294>
   1a9e4:	9cc03fcc 	andi	r19,r19,255
   1a9e8:	b811883a 	mov	r8,r23
   1a9ec:	9802571e 	bne	r19,zero,1b34c <___vfiprintf_internal_r+0x14c4>
   1a9f0:	18005726 	beq	r3,zero,1ab50 <___vfiprintf_internal_r+0xcc8>
   1a9f4:	04c00044 	movi	r19,1
   1a9f8:	d8c01005 	stb	r3,64(sp)
   1a9fc:	d8001d85 	stb	zero,118(sp)
   1aa00:	9829883a 	mov	r20,r19
   1aa04:	ddc01004 	addi	r23,sp,64
   1aa08:	003f0a06 	br	1a634 <__alt_data_end+0xfc01a634>
   1aa0c:	d9402017 	ldw	r5,128(sp)
   1aa10:	d9002117 	ldw	r4,132(sp)
   1aa14:	d9801a04 	addi	r6,sp,104
   1aa18:	da802a15 	stw	r10,168(sp)
   1aa1c:	0019d740 	call	19d74 <__sprint_r.part.0>
   1aa20:	da802a17 	ldw	r10,168(sp)
   1aa24:	1000501e 	bne	r2,zero,1ab68 <___vfiprintf_internal_r+0xce0>
   1aa28:	d9801b17 	ldw	r6,108(sp)
   1aa2c:	d8801c17 	ldw	r2,112(sp)
   1aa30:	d811883a 	mov	r8,sp
   1aa34:	31000044 	addi	r4,r6,1
   1aa38:	003e3606 	br	1a314 <__alt_data_end+0xfc01a314>
   1aa3c:	d9001b17 	ldw	r4,108(sp)
   1aa40:	d8801c17 	ldw	r2,112(sp)
   1aa44:	21400044 	addi	r5,r4,1
   1aa48:	d9801d87 	ldb	r6,118(sp)
   1aa4c:	303e5226 	beq	r6,zero,1a398 <__alt_data_end+0xfc01a398>
   1aa50:	01800044 	movi	r6,1
   1aa54:	d9001d84 	addi	r4,sp,118
   1aa58:	1185883a 	add	r2,r2,r6
   1aa5c:	41000015 	stw	r4,0(r8)
   1aa60:	41800115 	stw	r6,4(r8)
   1aa64:	d8801c15 	stw	r2,112(sp)
   1aa68:	d9401b15 	stw	r5,108(sp)
   1aa6c:	010001c4 	movi	r4,7
   1aa70:	2140b00e 	bge	r4,r5,1ad34 <___vfiprintf_internal_r+0xeac>
   1aa74:	1000f61e 	bne	r2,zero,1ae50 <___vfiprintf_internal_r+0xfc8>
   1aa78:	3800b31e 	bne	r7,zero,1ad48 <___vfiprintf_internal_r+0xec0>
   1aa7c:	0009883a 	mov	r4,zero
   1aa80:	300b883a 	mov	r5,r6
   1aa84:	d811883a 	mov	r8,sp
   1aa88:	01802004 	movi	r6,128
   1aa8c:	19be5226 	beq	r3,r6,1a3d8 <__alt_data_end+0xfc01a3d8>
   1aa90:	8521c83a 	sub	r16,r16,r20
   1aa94:	043e790e 	bge	zero,r16,1a47c <__alt_data_end+0xfc01a47c>
   1aa98:	05400404 	movi	r21,16
   1aa9c:	ac01b00e 	bge	r21,r16,1b160 <___vfiprintf_internal_r+0x12d8>
   1aaa0:	014000f4 	movhi	r5,3
   1aaa4:	296bc104 	addi	r5,r5,-20732
   1aaa8:	d9402315 	stw	r5,140(sp)
   1aaac:	070001c4 	movi	fp,7
   1aab0:	00000506 	br	1aac8 <___vfiprintf_internal_r+0xc40>
   1aab4:	21400084 	addi	r5,r4,2
   1aab8:	42000204 	addi	r8,r8,8
   1aabc:	1809883a 	mov	r4,r3
   1aac0:	843ffc04 	addi	r16,r16,-16
   1aac4:	ac000d0e 	bge	r21,r16,1aafc <___vfiprintf_internal_r+0xc74>
   1aac8:	10800404 	addi	r2,r2,16
   1aacc:	20c00044 	addi	r3,r4,1
   1aad0:	44800015 	stw	r18,0(r8)
   1aad4:	45400115 	stw	r21,4(r8)
   1aad8:	d8801c15 	stw	r2,112(sp)
   1aadc:	d8c01b15 	stw	r3,108(sp)
   1aae0:	e0fff40e 	bge	fp,r3,1aab4 <__alt_data_end+0xfc01aab4>
   1aae4:	1000101e 	bne	r2,zero,1ab28 <___vfiprintf_internal_r+0xca0>
   1aae8:	843ffc04 	addi	r16,r16,-16
   1aaec:	01400044 	movi	r5,1
   1aaf0:	0009883a 	mov	r4,zero
   1aaf4:	d811883a 	mov	r8,sp
   1aaf8:	ac3ff316 	blt	r21,r16,1aac8 <__alt_data_end+0xfc01aac8>
   1aafc:	d8c02317 	ldw	r3,140(sp)
   1ab00:	1405883a 	add	r2,r2,r16
   1ab04:	44000115 	stw	r16,4(r8)
   1ab08:	40c00015 	stw	r3,0(r8)
   1ab0c:	d8801c15 	stw	r2,112(sp)
   1ab10:	d9401b15 	stw	r5,108(sp)
   1ab14:	00c001c4 	movi	r3,7
   1ab18:	19401916 	blt	r3,r5,1ab80 <___vfiprintf_internal_r+0xcf8>
   1ab1c:	42000204 	addi	r8,r8,8
   1ab20:	29400044 	addi	r5,r5,1
   1ab24:	003e5506 	br	1a47c <__alt_data_end+0xfc01a47c>
   1ab28:	d9402017 	ldw	r5,128(sp)
   1ab2c:	d9002117 	ldw	r4,132(sp)
   1ab30:	d9801a04 	addi	r6,sp,104
   1ab34:	0019d740 	call	19d74 <__sprint_r.part.0>
   1ab38:	10000b1e 	bne	r2,zero,1ab68 <___vfiprintf_internal_r+0xce0>
   1ab3c:	d9001b17 	ldw	r4,108(sp)
   1ab40:	d8801c17 	ldw	r2,112(sp)
   1ab44:	d811883a 	mov	r8,sp
   1ab48:	21400044 	addi	r5,r4,1
   1ab4c:	003fdc06 	br	1aac0 <__alt_data_end+0xfc01aac0>
   1ab50:	d8801c17 	ldw	r2,112(sp)
   1ab54:	10000426 	beq	r2,zero,1ab68 <___vfiprintf_internal_r+0xce0>
   1ab58:	d9402017 	ldw	r5,128(sp)
   1ab5c:	d9002117 	ldw	r4,132(sp)
   1ab60:	d9801a04 	addi	r6,sp,104
   1ab64:	0019d740 	call	19d74 <__sprint_r.part.0>
   1ab68:	d9402017 	ldw	r5,128(sp)
   1ab6c:	2880030b 	ldhu	r2,12(r5)
   1ab70:	1080100c 	andi	r2,r2,64
   1ab74:	10014d1e 	bne	r2,zero,1b0ac <___vfiprintf_internal_r+0x1224>
   1ab78:	d8802417 	ldw	r2,144(sp)
   1ab7c:	003d9706 	br	1a1dc <__alt_data_end+0xfc01a1dc>
   1ab80:	1000d21e 	bne	r2,zero,1aecc <___vfiprintf_internal_r+0x1044>
   1ab84:	00c00044 	movi	r3,1
   1ab88:	a005883a 	mov	r2,r20
   1ab8c:	ddc00015 	stw	r23,0(sp)
   1ab90:	dd000115 	stw	r20,4(sp)
   1ab94:	dd001c15 	stw	r20,112(sp)
   1ab98:	d8c01b15 	stw	r3,108(sp)
   1ab9c:	d811883a 	mov	r8,sp
   1aba0:	42000204 	addi	r8,r8,8
   1aba4:	8c40010c 	andi	r17,r17,4
   1aba8:	88004026 	beq	r17,zero,1acac <___vfiprintf_internal_r+0xe24>
   1abac:	d9002517 	ldw	r4,148(sp)
   1abb0:	24e3c83a 	sub	r17,r4,r19
   1abb4:	04403d0e 	bge	zero,r17,1acac <___vfiprintf_internal_r+0xe24>
   1abb8:	04000404 	movi	r16,16
   1abbc:	8441a90e 	bge	r16,r17,1b264 <___vfiprintf_internal_r+0x13dc>
   1abc0:	00c000f4 	movhi	r3,3
   1abc4:	18ebc504 	addi	r3,r3,-20716
   1abc8:	d9001b17 	ldw	r4,108(sp)
   1abcc:	d8c02315 	stw	r3,140(sp)
   1abd0:	050001c4 	movi	r20,7
   1abd4:	dd402117 	ldw	r21,132(sp)
   1abd8:	ddc02017 	ldw	r23,128(sp)
   1abdc:	00000506 	br	1abf4 <___vfiprintf_internal_r+0xd6c>
   1abe0:	21400084 	addi	r5,r4,2
   1abe4:	42000204 	addi	r8,r8,8
   1abe8:	1809883a 	mov	r4,r3
   1abec:	8c7ffc04 	addi	r17,r17,-16
   1abf0:	84400f0e 	bge	r16,r17,1ac30 <___vfiprintf_internal_r+0xda8>
   1abf4:	014000f4 	movhi	r5,3
   1abf8:	10800404 	addi	r2,r2,16
   1abfc:	20c00044 	addi	r3,r4,1
   1ac00:	296bc504 	addi	r5,r5,-20716
   1ac04:	41400015 	stw	r5,0(r8)
   1ac08:	44000115 	stw	r16,4(r8)
   1ac0c:	d8801c15 	stw	r2,112(sp)
   1ac10:	d8c01b15 	stw	r3,108(sp)
   1ac14:	a0fff20e 	bge	r20,r3,1abe0 <__alt_data_end+0xfc01abe0>
   1ac18:	1000141e 	bne	r2,zero,1ac6c <___vfiprintf_internal_r+0xde4>
   1ac1c:	8c7ffc04 	addi	r17,r17,-16
   1ac20:	01400044 	movi	r5,1
   1ac24:	0009883a 	mov	r4,zero
   1ac28:	d811883a 	mov	r8,sp
   1ac2c:	847ff116 	blt	r16,r17,1abf4 <__alt_data_end+0xfc01abf4>
   1ac30:	d8c02317 	ldw	r3,140(sp)
   1ac34:	1445883a 	add	r2,r2,r17
   1ac38:	44400115 	stw	r17,4(r8)
   1ac3c:	40c00015 	stw	r3,0(r8)
   1ac40:	d8801c15 	stw	r2,112(sp)
   1ac44:	d9401b15 	stw	r5,108(sp)
   1ac48:	00c001c4 	movi	r3,7
   1ac4c:	1940170e 	bge	r3,r5,1acac <___vfiprintf_internal_r+0xe24>
   1ac50:	1000101e 	bne	r2,zero,1ac94 <___vfiprintf_internal_r+0xe0c>
   1ac54:	d8802517 	ldw	r2,148(sp)
   1ac58:	14c11616 	blt	r2,r19,1b0b4 <___vfiprintf_internal_r+0x122c>
   1ac5c:	d9002417 	ldw	r4,144(sp)
   1ac60:	2089883a 	add	r4,r4,r2
   1ac64:	d9002415 	stw	r4,144(sp)
   1ac68:	003e1806 	br	1a4cc <__alt_data_end+0xfc01a4cc>
   1ac6c:	d9801a04 	addi	r6,sp,104
   1ac70:	b80b883a 	mov	r5,r23
   1ac74:	a809883a 	mov	r4,r21
   1ac78:	0019d740 	call	19d74 <__sprint_r.part.0>
   1ac7c:	103fba1e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1ac80:	d9001b17 	ldw	r4,108(sp)
   1ac84:	d8801c17 	ldw	r2,112(sp)
   1ac88:	d811883a 	mov	r8,sp
   1ac8c:	21400044 	addi	r5,r4,1
   1ac90:	003fd606 	br	1abec <__alt_data_end+0xfc01abec>
   1ac94:	d9402017 	ldw	r5,128(sp)
   1ac98:	d9002117 	ldw	r4,132(sp)
   1ac9c:	d9801a04 	addi	r6,sp,104
   1aca0:	0019d740 	call	19d74 <__sprint_r.part.0>
   1aca4:	103fb01e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1aca8:	d8801c17 	ldw	r2,112(sp)
   1acac:	d8c02517 	ldw	r3,148(sp)
   1acb0:	1cc0010e 	bge	r3,r19,1acb8 <___vfiprintf_internal_r+0xe30>
   1acb4:	9807883a 	mov	r3,r19
   1acb8:	d9002417 	ldw	r4,144(sp)
   1acbc:	20c9883a 	add	r4,r4,r3
   1acc0:	d9002415 	stw	r4,144(sp)
   1acc4:	103e0126 	beq	r2,zero,1a4cc <__alt_data_end+0xfc01a4cc>
   1acc8:	d9402017 	ldw	r5,128(sp)
   1accc:	d9002117 	ldw	r4,132(sp)
   1acd0:	d9801a04 	addi	r6,sp,104
   1acd4:	0019d740 	call	19d74 <__sprint_r.part.0>
   1acd8:	103dfc26 	beq	r2,zero,1a4cc <__alt_data_end+0xfc01a4cc>
   1acdc:	003fa206 	br	1ab68 <__alt_data_end+0xfc01ab68>
   1ace0:	d9402017 	ldw	r5,128(sp)
   1ace4:	d9002117 	ldw	r4,132(sp)
   1ace8:	d9801a04 	addi	r6,sp,104
   1acec:	d9c02b15 	stw	r7,172(sp)
   1acf0:	0019d740 	call	19d74 <__sprint_r.part.0>
   1acf4:	d9c02b17 	ldw	r7,172(sp)
   1acf8:	103f9b1e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1acfc:	d9001b17 	ldw	r4,108(sp)
   1ad00:	d8801c17 	ldw	r2,112(sp)
   1ad04:	d811883a 	mov	r8,sp
   1ad08:	21800044 	addi	r6,r4,1
   1ad0c:	003dbf06 	br	1a40c <__alt_data_end+0xfc01a40c>
   1ad10:	1000d81e 	bne	r2,zero,1b074 <___vfiprintf_internal_r+0x11ec>
   1ad14:	d9001d87 	ldb	r4,118(sp)
   1ad18:	20000a26 	beq	r4,zero,1ad44 <___vfiprintf_internal_r+0xebc>
   1ad1c:	00800044 	movi	r2,1
   1ad20:	d9001d84 	addi	r4,sp,118
   1ad24:	100b883a 	mov	r5,r2
   1ad28:	d9000015 	stw	r4,0(sp)
   1ad2c:	d8800115 	stw	r2,4(sp)
   1ad30:	d811883a 	mov	r8,sp
   1ad34:	2809883a 	mov	r4,r5
   1ad38:	42000204 	addi	r8,r8,8
   1ad3c:	29400044 	addi	r5,r5,1
   1ad40:	003d9506 	br	1a398 <__alt_data_end+0xfc01a398>
   1ad44:	3800fd26 	beq	r7,zero,1b13c <___vfiprintf_internal_r+0x12b4>
   1ad48:	00800084 	movi	r2,2
   1ad4c:	d9001d04 	addi	r4,sp,116
   1ad50:	d9000015 	stw	r4,0(sp)
   1ad54:	d8800115 	stw	r2,4(sp)
   1ad58:	01400044 	movi	r5,1
   1ad5c:	d811883a 	mov	r8,sp
   1ad60:	2809883a 	mov	r4,r5
   1ad64:	42000204 	addi	r8,r8,8
   1ad68:	29400044 	addi	r5,r5,1
   1ad6c:	003f4606 	br	1aa88 <__alt_data_end+0xfc01aa88>
   1ad70:	d8802517 	ldw	r2,148(sp)
   1ad74:	14c0010e 	bge	r2,r19,1ad7c <___vfiprintf_internal_r+0xef4>
   1ad78:	9805883a 	mov	r2,r19
   1ad7c:	d9402417 	ldw	r5,144(sp)
   1ad80:	288b883a 	add	r5,r5,r2
   1ad84:	d9402415 	stw	r5,144(sp)
   1ad88:	003dd006 	br	1a4cc <__alt_data_end+0xfc01a4cc>
   1ad8c:	d8001d85 	stb	zero,118(sp)
   1ad90:	80005d16 	blt	r16,zero,1af08 <___vfiprintf_internal_r+0x1080>
   1ad94:	00ffdfc4 	movi	r3,-129
   1ad98:	9d04b03a 	or	r2,r19,r20
   1ad9c:	88e2703a 	and	r17,r17,r3
   1ada0:	103d3726 	beq	r2,zero,1a280 <__alt_data_end+0xfc01a280>
   1ada4:	002b883a 	mov	r21,zero
   1ada8:	d9002617 	ldw	r4,152(sp)
   1adac:	ddc01a04 	addi	r23,sp,104
   1adb0:	988003cc 	andi	r2,r19,15
   1adb4:	a006973a 	slli	r3,r20,28
   1adb8:	2085883a 	add	r2,r4,r2
   1adbc:	9826d13a 	srli	r19,r19,4
   1adc0:	10800003 	ldbu	r2,0(r2)
   1adc4:	a028d13a 	srli	r20,r20,4
   1adc8:	bdffffc4 	addi	r23,r23,-1
   1adcc:	1ce6b03a 	or	r19,r3,r19
   1add0:	b8800005 	stb	r2,0(r23)
   1add4:	9d04b03a 	or	r2,r19,r20
   1add8:	103ff51e 	bne	r2,zero,1adb0 <__alt_data_end+0xfc01adb0>
   1addc:	d8801e17 	ldw	r2,120(sp)
   1ade0:	15e9c83a 	sub	r20,r2,r23
   1ade4:	003d2b06 	br	1a294 <__alt_data_end+0xfc01a294>
   1ade8:	d9402017 	ldw	r5,128(sp)
   1adec:	d9002117 	ldw	r4,132(sp)
   1adf0:	d9801a04 	addi	r6,sp,104
   1adf4:	0019d740 	call	19d74 <__sprint_r.part.0>
   1adf8:	103f5b1e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1adfc:	d8801c17 	ldw	r2,112(sp)
   1ae00:	d811883a 	mov	r8,sp
   1ae04:	003f6706 	br	1aba4 <__alt_data_end+0xfc01aba4>
   1ae08:	d9402017 	ldw	r5,128(sp)
   1ae0c:	d9002117 	ldw	r4,132(sp)
   1ae10:	d9801a04 	addi	r6,sp,104
   1ae14:	0019d740 	call	19d74 <__sprint_r.part.0>
   1ae18:	103f531e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1ae1c:	d811883a 	mov	r8,sp
   1ae20:	003cd906 	br	1a188 <__alt_data_end+0xfc01a188>
   1ae24:	10803fcc 	andi	r2,r2,255
   1ae28:	1080201c 	xori	r2,r2,128
   1ae2c:	10bfe004 	addi	r2,r2,-128
   1ae30:	00c00c04 	movi	r3,48
   1ae34:	10ffe926 	beq	r2,r3,1addc <__alt_data_end+0xfc01addc>
   1ae38:	b8ffffc5 	stb	r3,-1(r23)
   1ae3c:	d8c01e17 	ldw	r3,120(sp)
   1ae40:	b8bfffc4 	addi	r2,r23,-1
   1ae44:	102f883a 	mov	r23,r2
   1ae48:	18a9c83a 	sub	r20,r3,r2
   1ae4c:	003d1106 	br	1a294 <__alt_data_end+0xfc01a294>
   1ae50:	d9402017 	ldw	r5,128(sp)
   1ae54:	d9002117 	ldw	r4,132(sp)
   1ae58:	d9801a04 	addi	r6,sp,104
   1ae5c:	d8c02a15 	stw	r3,168(sp)
   1ae60:	d9c02b15 	stw	r7,172(sp)
   1ae64:	0019d740 	call	19d74 <__sprint_r.part.0>
   1ae68:	d8c02a17 	ldw	r3,168(sp)
   1ae6c:	d9c02b17 	ldw	r7,172(sp)
   1ae70:	103f3d1e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1ae74:	d9001b17 	ldw	r4,108(sp)
   1ae78:	d8801c17 	ldw	r2,112(sp)
   1ae7c:	d811883a 	mov	r8,sp
   1ae80:	21400044 	addi	r5,r4,1
   1ae84:	003d4406 	br	1a398 <__alt_data_end+0xfc01a398>
   1ae88:	d9402017 	ldw	r5,128(sp)
   1ae8c:	d9002117 	ldw	r4,132(sp)
   1ae90:	d9801a04 	addi	r6,sp,104
   1ae94:	d8c02a15 	stw	r3,168(sp)
   1ae98:	0019d740 	call	19d74 <__sprint_r.part.0>
   1ae9c:	d8c02a17 	ldw	r3,168(sp)
   1aea0:	103f311e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1aea4:	d9001b17 	ldw	r4,108(sp)
   1aea8:	d8801c17 	ldw	r2,112(sp)
   1aeac:	d811883a 	mov	r8,sp
   1aeb0:	21400044 	addi	r5,r4,1
   1aeb4:	003ef406 	br	1aa88 <__alt_data_end+0xfc01aa88>
   1aeb8:	1000bd1e 	bne	r2,zero,1b1b0 <___vfiprintf_internal_r+0x1328>
   1aebc:	01400044 	movi	r5,1
   1aec0:	0009883a 	mov	r4,zero
   1aec4:	d811883a 	mov	r8,sp
   1aec8:	003ef106 	br	1aa90 <__alt_data_end+0xfc01aa90>
   1aecc:	d9402017 	ldw	r5,128(sp)
   1aed0:	d9002117 	ldw	r4,132(sp)
   1aed4:	d9801a04 	addi	r6,sp,104
   1aed8:	0019d740 	call	19d74 <__sprint_r.part.0>
   1aedc:	103f221e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1aee0:	d9401b17 	ldw	r5,108(sp)
   1aee4:	d8801c17 	ldw	r2,112(sp)
   1aee8:	d811883a 	mov	r8,sp
   1aeec:	29400044 	addi	r5,r5,1
   1aef0:	003d6206 	br	1a47c <__alt_data_end+0xfc01a47c>
   1aef4:	014000f4 	movhi	r5,3
   1aef8:	296b5104 	addi	r5,r5,-21180
   1aefc:	d9402615 	stw	r5,152(sp)
   1af00:	d8c02215 	stw	r3,136(sp)
   1af04:	1023883a 	mov	r17,r2
   1af08:	9d04b03a 	or	r2,r19,r20
   1af0c:	103fa51e 	bne	r2,zero,1ada4 <__alt_data_end+0xfc01ada4>
   1af10:	002b883a 	mov	r21,zero
   1af14:	00800084 	movi	r2,2
   1af18:	003e4a06 	br	1a844 <__alt_data_end+0xfc01a844>
   1af1c:	014000f4 	movhi	r5,3
   1af20:	296b5104 	addi	r5,r5,-21180
   1af24:	002b883a 	mov	r21,zero
   1af28:	d9402615 	stw	r5,152(sp)
   1af2c:	003f9e06 	br	1ada8 <__alt_data_end+0xfc01ada8>
   1af30:	d9402217 	ldw	r5,136(sp)
   1af34:	d8001d85 	stb	zero,118(sp)
   1af38:	0029883a 	mov	r20,zero
   1af3c:	28800104 	addi	r2,r5,4
   1af40:	2cc00017 	ldw	r19,0(r5)
   1af44:	803e3a16 	blt	r16,zero,1a830 <__alt_data_end+0xfc01a830>
   1af48:	00ffdfc4 	movi	r3,-129
   1af4c:	d8802215 	stw	r2,136(sp)
   1af50:	88e2703a 	and	r17,r17,r3
   1af54:	002b883a 	mov	r21,zero
   1af58:	983e9b26 	beq	r19,zero,1a9c8 <__alt_data_end+0xfc01a9c8>
   1af5c:	00800244 	movi	r2,9
   1af60:	14fdc936 	bltu	r2,r19,1a688 <__alt_data_end+0xfc01a688>
   1af64:	003e9a06 	br	1a9d0 <__alt_data_end+0xfc01a9d0>
   1af68:	00800c04 	movi	r2,48
   1af6c:	d8c01d45 	stb	r3,117(sp)
   1af70:	d8801d05 	stb	r2,116(sp)
   1af74:	d8001d85 	stb	zero,118(sp)
   1af78:	88c00094 	ori	r3,r17,2
   1af7c:	80009c16 	blt	r16,zero,1b1f0 <___vfiprintf_internal_r+0x1368>
   1af80:	00bfdfc4 	movi	r2,-129
   1af84:	88a2703a 	and	r17,r17,r2
   1af88:	8c400094 	ori	r17,r17,2
   1af8c:	002b883a 	mov	r21,zero
   1af90:	003f8506 	br	1ada8 <__alt_data_end+0xfc01ada8>
   1af94:	b029883a 	mov	r20,r22
   1af98:	003c0b06 	br	19fc8 <__alt_data_end+0xfc019fc8>
   1af9c:	04e7c83a 	sub	r19,zero,r19
   1afa0:	05400b44 	movi	r21,45
   1afa4:	9804c03a 	cmpne	r2,r19,zero
   1afa8:	0529c83a 	sub	r20,zero,r20
   1afac:	dd401d85 	stb	r21,118(sp)
   1afb0:	a0a9c83a 	sub	r20,r20,r2
   1afb4:	80009716 	blt	r16,zero,1b214 <___vfiprintf_internal_r+0x138c>
   1afb8:	00bfdfc4 	movi	r2,-129
   1afbc:	88a2703a 	and	r17,r17,r2
   1afc0:	003db006 	br	1a684 <__alt_data_end+0xfc01a684>
   1afc4:	b0c00007 	ldb	r3,0(r22)
   1afc8:	003c0c06 	br	19ffc <__alt_data_end+0xfc019ffc>
   1afcc:	8880100c 	andi	r2,r17,64
   1afd0:	d8001d85 	stb	zero,118(sp)
   1afd4:	1000461e 	bne	r2,zero,1b0f0 <___vfiprintf_internal_r+0x1268>
   1afd8:	d9002217 	ldw	r4,136(sp)
   1afdc:	0029883a 	mov	r20,zero
   1afe0:	20800104 	addi	r2,r4,4
   1afe4:	24c00017 	ldw	r19,0(r4)
   1afe8:	803df80e 	bge	r16,zero,1a7cc <__alt_data_end+0xfc01a7cc>
   1afec:	9d06b03a 	or	r3,r19,r20
   1aff0:	d8802215 	stw	r2,136(sp)
   1aff4:	183d5e1e 	bne	r3,zero,1a570 <__alt_data_end+0xfc01a570>
   1aff8:	002b883a 	mov	r21,zero
   1affc:	0005883a 	mov	r2,zero
   1b000:	003e1006 	br	1a844 <__alt_data_end+0xfc01a844>
   1b004:	8880040c 	andi	r2,r17,16
   1b008:	1000321e 	bne	r2,zero,1b0d4 <___vfiprintf_internal_r+0x124c>
   1b00c:	8c40100c 	andi	r17,r17,64
   1b010:	88008d26 	beq	r17,zero,1b248 <___vfiprintf_internal_r+0x13c0>
   1b014:	d9402217 	ldw	r5,136(sp)
   1b018:	d8c02417 	ldw	r3,144(sp)
   1b01c:	28800017 	ldw	r2,0(r5)
   1b020:	29400104 	addi	r5,r5,4
   1b024:	d9402215 	stw	r5,136(sp)
   1b028:	10c0000d 	sth	r3,0(r2)
   1b02c:	003bca06 	br	19f58 <__alt_data_end+0xfc019f58>
   1b030:	8880100c 	andi	r2,r17,64
   1b034:	10003a26 	beq	r2,zero,1b120 <___vfiprintf_internal_r+0x1298>
   1b038:	d8802217 	ldw	r2,136(sp)
   1b03c:	14c0000f 	ldh	r19,0(r2)
   1b040:	10800104 	addi	r2,r2,4
   1b044:	d8802215 	stw	r2,136(sp)
   1b048:	9829d7fa 	srai	r20,r19,31
   1b04c:	a005883a 	mov	r2,r20
   1b050:	003d8506 	br	1a668 <__alt_data_end+0xfc01a668>
   1b054:	8880100c 	andi	r2,r17,64
   1b058:	10002b26 	beq	r2,zero,1b108 <___vfiprintf_internal_r+0x1280>
   1b05c:	d8802217 	ldw	r2,136(sp)
   1b060:	0029883a 	mov	r20,zero
   1b064:	14c0000b 	ldhu	r19,0(r2)
   1b068:	10800104 	addi	r2,r2,4
   1b06c:	d8802215 	stw	r2,136(sp)
   1b070:	003d5d06 	br	1a5e8 <__alt_data_end+0xfc01a5e8>
   1b074:	d9402017 	ldw	r5,128(sp)
   1b078:	d9002117 	ldw	r4,132(sp)
   1b07c:	d9801a04 	addi	r6,sp,104
   1b080:	d8c02a15 	stw	r3,168(sp)
   1b084:	d9c02b15 	stw	r7,172(sp)
   1b088:	0019d740 	call	19d74 <__sprint_r.part.0>
   1b08c:	d8c02a17 	ldw	r3,168(sp)
   1b090:	d9c02b17 	ldw	r7,172(sp)
   1b094:	103eb41e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1b098:	d9001b17 	ldw	r4,108(sp)
   1b09c:	d8801c17 	ldw	r2,112(sp)
   1b0a0:	d811883a 	mov	r8,sp
   1b0a4:	21400044 	addi	r5,r4,1
   1b0a8:	003e6706 	br	1aa48 <__alt_data_end+0xfc01aa48>
   1b0ac:	00bfffc4 	movi	r2,-1
   1b0b0:	003c4a06 	br	1a1dc <__alt_data_end+0xfc01a1dc>
   1b0b4:	9805883a 	mov	r2,r19
   1b0b8:	003ee806 	br	1ac5c <__alt_data_end+0xfc01ac5c>
   1b0bc:	d8c02217 	ldw	r3,136(sp)
   1b0c0:	0029883a 	mov	r20,zero
   1b0c4:	18800104 	addi	r2,r3,4
   1b0c8:	1cc0000b 	ldhu	r19,0(r3)
   1b0cc:	803f9e0e 	bge	r16,zero,1af48 <__alt_data_end+0xfc01af48>
   1b0d0:	003dd706 	br	1a830 <__alt_data_end+0xfc01a830>
   1b0d4:	d8c02217 	ldw	r3,136(sp)
   1b0d8:	d9002417 	ldw	r4,144(sp)
   1b0dc:	18800017 	ldw	r2,0(r3)
   1b0e0:	18c00104 	addi	r3,r3,4
   1b0e4:	d8c02215 	stw	r3,136(sp)
   1b0e8:	11000015 	stw	r4,0(r2)
   1b0ec:	003b9a06 	br	19f58 <__alt_data_end+0xfc019f58>
   1b0f0:	d8c02217 	ldw	r3,136(sp)
   1b0f4:	0029883a 	mov	r20,zero
   1b0f8:	18800104 	addi	r2,r3,4
   1b0fc:	1cc0000b 	ldhu	r19,0(r3)
   1b100:	803db20e 	bge	r16,zero,1a7cc <__alt_data_end+0xfc01a7cc>
   1b104:	003fb906 	br	1afec <__alt_data_end+0xfc01afec>
   1b108:	d9002217 	ldw	r4,136(sp)
   1b10c:	0029883a 	mov	r20,zero
   1b110:	24c00017 	ldw	r19,0(r4)
   1b114:	21000104 	addi	r4,r4,4
   1b118:	d9002215 	stw	r4,136(sp)
   1b11c:	003d3206 	br	1a5e8 <__alt_data_end+0xfc01a5e8>
   1b120:	d8c02217 	ldw	r3,136(sp)
   1b124:	1cc00017 	ldw	r19,0(r3)
   1b128:	18c00104 	addi	r3,r3,4
   1b12c:	d8c02215 	stw	r3,136(sp)
   1b130:	9829d7fa 	srai	r20,r19,31
   1b134:	a005883a 	mov	r2,r20
   1b138:	003d4b06 	br	1a668 <__alt_data_end+0xfc01a668>
   1b13c:	0009883a 	mov	r4,zero
   1b140:	01400044 	movi	r5,1
   1b144:	d811883a 	mov	r8,sp
   1b148:	003e4f06 	br	1aa88 <__alt_data_end+0xfc01aa88>
   1b14c:	d8c02215 	stw	r3,136(sp)
   1b150:	002b883a 	mov	r21,zero
   1b154:	003db806 	br	1a838 <__alt_data_end+0xfc01a838>
   1b158:	d811883a 	mov	r8,sp
   1b15c:	003e9606 	br	1abb8 <__alt_data_end+0xfc01abb8>
   1b160:	010000f4 	movhi	r4,3
   1b164:	212bc104 	addi	r4,r4,-20732
   1b168:	d9002315 	stw	r4,140(sp)
   1b16c:	003e6306 	br	1aafc <__alt_data_end+0xfc01aafc>
   1b170:	b0c00043 	ldbu	r3,1(r22)
   1b174:	8c400814 	ori	r17,r17,32
   1b178:	b5800044 	addi	r22,r22,1
   1b17c:	18c03fcc 	andi	r3,r3,255
   1b180:	18c0201c 	xori	r3,r3,128
   1b184:	18ffe004 	addi	r3,r3,-128
   1b188:	003b9c06 	br	19ffc <__alt_data_end+0xfc019ffc>
   1b18c:	b809883a 	mov	r4,r23
   1b190:	da002a15 	stw	r8,168(sp)
   1b194:	000f8080 	call	f808 <strlen>
   1b198:	1029883a 	mov	r20,r2
   1b19c:	dd401d83 	ldbu	r21,118(sp)
   1b1a0:	df002215 	stw	fp,136(sp)
   1b1a4:	0021883a 	mov	r16,zero
   1b1a8:	da002a17 	ldw	r8,168(sp)
   1b1ac:	003c3906 	br	1a294 <__alt_data_end+0xfc01a294>
   1b1b0:	d9402017 	ldw	r5,128(sp)
   1b1b4:	d9002117 	ldw	r4,132(sp)
   1b1b8:	d9801a04 	addi	r6,sp,104
   1b1bc:	0019d740 	call	19d74 <__sprint_r.part.0>
   1b1c0:	103e691e 	bne	r2,zero,1ab68 <__alt_data_end+0xfc01ab68>
   1b1c4:	d9001b17 	ldw	r4,108(sp)
   1b1c8:	d8801c17 	ldw	r2,112(sp)
   1b1cc:	d811883a 	mov	r8,sp
   1b1d0:	21400044 	addi	r5,r4,1
   1b1d4:	003e2e06 	br	1aa90 <__alt_data_end+0xfc01aa90>
   1b1d8:	010000f4 	movhi	r4,3
   1b1dc:	212bc504 	addi	r4,r4,-20716
   1b1e0:	d9002315 	stw	r4,140(sp)
   1b1e4:	d9001b17 	ldw	r4,108(sp)
   1b1e8:	21000044 	addi	r4,r4,1
   1b1ec:	003c5e06 	br	1a368 <__alt_data_end+0xfc01a368>
   1b1f0:	002b883a 	mov	r21,zero
   1b1f4:	00800084 	movi	r2,2
   1b1f8:	10803fcc 	andi	r2,r2,255
   1b1fc:	01000044 	movi	r4,1
   1b200:	11002b26 	beq	r2,r4,1b2b0 <___vfiprintf_internal_r+0x1428>
   1b204:	01000084 	movi	r4,2
   1b208:	11002b1e 	bne	r2,r4,1b2b8 <___vfiprintf_internal_r+0x1430>
   1b20c:	1823883a 	mov	r17,r3
   1b210:	003ee506 	br	1ada8 <__alt_data_end+0xfc01ada8>
   1b214:	8807883a 	mov	r3,r17
   1b218:	00800044 	movi	r2,1
   1b21c:	003ff606 	br	1b1f8 <__alt_data_end+0xfc01b1f8>
   1b220:	00800184 	movi	r2,6
   1b224:	1400012e 	bgeu	r2,r16,1b22c <___vfiprintf_internal_r+0x13a4>
   1b228:	1021883a 	mov	r16,r2
   1b22c:	8029883a 	mov	r20,r16
   1b230:	8027883a 	mov	r19,r16
   1b234:	80002216 	blt	r16,zero,1b2c0 <___vfiprintf_internal_r+0x1438>
   1b238:	05c000f4 	movhi	r23,3
   1b23c:	df002215 	stw	fp,136(sp)
   1b240:	bdeb5604 	addi	r23,r23,-21160
   1b244:	003cfb06 	br	1a634 <__alt_data_end+0xfc01a634>
   1b248:	d9002217 	ldw	r4,136(sp)
   1b24c:	d9402417 	ldw	r5,144(sp)
   1b250:	20800017 	ldw	r2,0(r4)
   1b254:	21000104 	addi	r4,r4,4
   1b258:	d9002215 	stw	r4,136(sp)
   1b25c:	11400015 	stw	r5,0(r2)
   1b260:	003b3d06 	br	19f58 <__alt_data_end+0xfc019f58>
   1b264:	014000f4 	movhi	r5,3
   1b268:	296bc504 	addi	r5,r5,-20716
   1b26c:	d9402315 	stw	r5,140(sp)
   1b270:	d9401b17 	ldw	r5,108(sp)
   1b274:	29400044 	addi	r5,r5,1
   1b278:	003e6d06 	br	1ac30 <__alt_data_end+0xfc01ac30>
   1b27c:	8029883a 	mov	r20,r16
   1b280:	dd401d83 	ldbu	r21,118(sp)
   1b284:	df002215 	stw	fp,136(sp)
   1b288:	0021883a 	mov	r16,zero
   1b28c:	003c0106 	br	1a294 <__alt_data_end+0xfc01a294>
   1b290:	00c000f4 	movhi	r3,3
   1b294:	18ebc104 	addi	r3,r3,-20732
   1b298:	d8c02315 	stw	r3,140(sp)
   1b29c:	280d883a 	mov	r6,r5
   1b2a0:	003c6906 	br	1a448 <__alt_data_end+0xfc01a448>
   1b2a4:	802d883a 	mov	r22,r16
   1b2a8:	0021883a 	mov	r16,zero
   1b2ac:	003b5406 	br	1a000 <__alt_data_end+0xfc01a000>
   1b2b0:	1823883a 	mov	r17,r3
   1b2b4:	003cf306 	br	1a684 <__alt_data_end+0xfc01a684>
   1b2b8:	1823883a 	mov	r17,r3
   1b2bc:	003cad06 	br	1a574 <__alt_data_end+0xfc01a574>
   1b2c0:	0027883a 	mov	r19,zero
   1b2c4:	003fdc06 	br	1b238 <__alt_data_end+0xfc01b238>
   1b2c8:	d9402217 	ldw	r5,136(sp)
   1b2cc:	8005883a 	mov	r2,r16
   1b2d0:	b0c00043 	ldbu	r3,1(r22)
   1b2d4:	2c000017 	ldw	r16,0(r5)
   1b2d8:	29000104 	addi	r4,r5,4
   1b2dc:	d9002215 	stw	r4,136(sp)
   1b2e0:	102d883a 	mov	r22,r2
   1b2e4:	803fa50e 	bge	r16,zero,1b17c <__alt_data_end+0xfc01b17c>
   1b2e8:	18c03fcc 	andi	r3,r3,255
   1b2ec:	18c0201c 	xori	r3,r3,128
   1b2f0:	043fffc4 	movi	r16,-1
   1b2f4:	18ffe004 	addi	r3,r3,-128
   1b2f8:	003b4006 	br	19ffc <__alt_data_end+0xfc019ffc>
   1b2fc:	d9402303 	ldbu	r5,140(sp)
   1b300:	d9401d85 	stb	r5,118(sp)
   1b304:	003cae06 	br	1a5c0 <__alt_data_end+0xfc01a5c0>
   1b308:	d8c02303 	ldbu	r3,140(sp)
   1b30c:	d8c01d85 	stb	r3,118(sp)
   1b310:	003d1406 	br	1a764 <__alt_data_end+0xfc01a764>
   1b314:	d8c02303 	ldbu	r3,140(sp)
   1b318:	d8c01d85 	stb	r3,118(sp)
   1b31c:	003cca06 	br	1a648 <__alt_data_end+0xfc01a648>
   1b320:	8880004c 	andi	r2,r17,1
   1b324:	002b883a 	mov	r21,zero
   1b328:	10000526 	beq	r2,zero,1b340 <___vfiprintf_internal_r+0x14b8>
   1b32c:	00800c04 	movi	r2,48
   1b330:	d88019c5 	stb	r2,103(sp)
   1b334:	dd002817 	ldw	r20,160(sp)
   1b338:	ddc019c4 	addi	r23,sp,103
   1b33c:	003bd506 	br	1a294 <__alt_data_end+0xfc01a294>
   1b340:	0029883a 	mov	r20,zero
   1b344:	ddc01a04 	addi	r23,sp,104
   1b348:	003bd206 	br	1a294 <__alt_data_end+0xfc01a294>
   1b34c:	d9002303 	ldbu	r4,140(sp)
   1b350:	d9001d85 	stb	r4,118(sp)
   1b354:	003da606 	br	1a9f0 <__alt_data_end+0xfc01a9f0>
   1b358:	d8c02303 	ldbu	r3,140(sp)
   1b35c:	d8c01d85 	stb	r3,118(sp)
   1b360:	003c7606 	br	1a53c <__alt_data_end+0xfc01a53c>
   1b364:	d8c02303 	ldbu	r3,140(sp)
   1b368:	d8c01d85 	stb	r3,118(sp)
   1b36c:	003c6506 	br	1a504 <__alt_data_end+0xfc01a504>
   1b370:	d9002303 	ldbu	r4,140(sp)
   1b374:	d9001d85 	stb	r4,118(sp)
   1b378:	003d3d06 	br	1a870 <__alt_data_end+0xfc01a870>
   1b37c:	d8c02303 	ldbu	r3,140(sp)
   1b380:	d8c01d85 	stb	r3,118(sp)
   1b384:	003d1d06 	br	1a7fc <__alt_data_end+0xfc01a7fc>
   1b388:	d8c02303 	ldbu	r3,140(sp)
   1b38c:	d8c01d85 	stb	r3,118(sp)
   1b390:	003d0306 	br	1a7a0 <__alt_data_end+0xfc01a7a0>

0001b394 <__vfiprintf_internal>:
   1b394:	008000f4 	movhi	r2,3
   1b398:	10b84b04 	addi	r2,r2,-7892
   1b39c:	300f883a 	mov	r7,r6
   1b3a0:	280d883a 	mov	r6,r5
   1b3a4:	200b883a 	mov	r5,r4
   1b3a8:	11000017 	ldw	r4,0(r2)
   1b3ac:	0019e881 	jmpi	19e88 <___vfiprintf_internal_r>

0001b3b0 <__sbprintf>:
   1b3b0:	2880030b 	ldhu	r2,12(r5)
   1b3b4:	2ac01917 	ldw	r11,100(r5)
   1b3b8:	2a80038b 	ldhu	r10,14(r5)
   1b3bc:	2a400717 	ldw	r9,28(r5)
   1b3c0:	2a000917 	ldw	r8,36(r5)
   1b3c4:	defee204 	addi	sp,sp,-1144
   1b3c8:	00c10004 	movi	r3,1024
   1b3cc:	dc011a15 	stw	r16,1128(sp)
   1b3d0:	10bfff4c 	andi	r2,r2,65533
   1b3d4:	2821883a 	mov	r16,r5
   1b3d8:	d8cb883a 	add	r5,sp,r3
   1b3dc:	dc811c15 	stw	r18,1136(sp)
   1b3e0:	dc411b15 	stw	r17,1132(sp)
   1b3e4:	dfc11d15 	stw	ra,1140(sp)
   1b3e8:	2025883a 	mov	r18,r4
   1b3ec:	d881030d 	sth	r2,1036(sp)
   1b3f0:	dac11915 	stw	r11,1124(sp)
   1b3f4:	da81038d 	sth	r10,1038(sp)
   1b3f8:	da410715 	stw	r9,1052(sp)
   1b3fc:	da010915 	stw	r8,1060(sp)
   1b400:	dec10015 	stw	sp,1024(sp)
   1b404:	dec10415 	stw	sp,1040(sp)
   1b408:	d8c10215 	stw	r3,1032(sp)
   1b40c:	d8c10515 	stw	r3,1044(sp)
   1b410:	d8010615 	stw	zero,1048(sp)
   1b414:	0019e880 	call	19e88 <___vfiprintf_internal_r>
   1b418:	1023883a 	mov	r17,r2
   1b41c:	10000416 	blt	r2,zero,1b430 <__sbprintf+0x80>
   1b420:	d9410004 	addi	r5,sp,1024
   1b424:	9009883a 	mov	r4,r18
   1b428:	0015b380 	call	15b38 <_fflush_r>
   1b42c:	10000d1e 	bne	r2,zero,1b464 <__sbprintf+0xb4>
   1b430:	d881030b 	ldhu	r2,1036(sp)
   1b434:	1080100c 	andi	r2,r2,64
   1b438:	10000326 	beq	r2,zero,1b448 <__sbprintf+0x98>
   1b43c:	8080030b 	ldhu	r2,12(r16)
   1b440:	10801014 	ori	r2,r2,64
   1b444:	8080030d 	sth	r2,12(r16)
   1b448:	8805883a 	mov	r2,r17
   1b44c:	dfc11d17 	ldw	ra,1140(sp)
   1b450:	dc811c17 	ldw	r18,1136(sp)
   1b454:	dc411b17 	ldw	r17,1132(sp)
   1b458:	dc011a17 	ldw	r16,1128(sp)
   1b45c:	dec11e04 	addi	sp,sp,1144
   1b460:	f800283a 	ret
   1b464:	047fffc4 	movi	r17,-1
   1b468:	003ff106 	br	1b430 <__alt_data_end+0xfc01b430>

0001b46c <__swbuf_r>:
   1b46c:	defffb04 	addi	sp,sp,-20
   1b470:	dcc00315 	stw	r19,12(sp)
   1b474:	dc800215 	stw	r18,8(sp)
   1b478:	dc000015 	stw	r16,0(sp)
   1b47c:	dfc00415 	stw	ra,16(sp)
   1b480:	dc400115 	stw	r17,4(sp)
   1b484:	2025883a 	mov	r18,r4
   1b488:	2827883a 	mov	r19,r5
   1b48c:	3021883a 	mov	r16,r6
   1b490:	20000226 	beq	r4,zero,1b49c <__swbuf_r+0x30>
   1b494:	20800e17 	ldw	r2,56(r4)
   1b498:	10004226 	beq	r2,zero,1b5a4 <__swbuf_r+0x138>
   1b49c:	80800617 	ldw	r2,24(r16)
   1b4a0:	8100030b 	ldhu	r4,12(r16)
   1b4a4:	80800215 	stw	r2,8(r16)
   1b4a8:	2080020c 	andi	r2,r4,8
   1b4ac:	10003626 	beq	r2,zero,1b588 <__swbuf_r+0x11c>
   1b4b0:	80c00417 	ldw	r3,16(r16)
   1b4b4:	18003426 	beq	r3,zero,1b588 <__swbuf_r+0x11c>
   1b4b8:	2088000c 	andi	r2,r4,8192
   1b4bc:	9c403fcc 	andi	r17,r19,255
   1b4c0:	10001a26 	beq	r2,zero,1b52c <__swbuf_r+0xc0>
   1b4c4:	80800017 	ldw	r2,0(r16)
   1b4c8:	81000517 	ldw	r4,20(r16)
   1b4cc:	10c7c83a 	sub	r3,r2,r3
   1b4d0:	1900200e 	bge	r3,r4,1b554 <__swbuf_r+0xe8>
   1b4d4:	18c00044 	addi	r3,r3,1
   1b4d8:	81000217 	ldw	r4,8(r16)
   1b4dc:	11400044 	addi	r5,r2,1
   1b4e0:	81400015 	stw	r5,0(r16)
   1b4e4:	213fffc4 	addi	r4,r4,-1
   1b4e8:	81000215 	stw	r4,8(r16)
   1b4ec:	14c00005 	stb	r19,0(r2)
   1b4f0:	80800517 	ldw	r2,20(r16)
   1b4f4:	10c01e26 	beq	r2,r3,1b570 <__swbuf_r+0x104>
   1b4f8:	8080030b 	ldhu	r2,12(r16)
   1b4fc:	1080004c 	andi	r2,r2,1
   1b500:	10000226 	beq	r2,zero,1b50c <__swbuf_r+0xa0>
   1b504:	00800284 	movi	r2,10
   1b508:	88801926 	beq	r17,r2,1b570 <__swbuf_r+0x104>
   1b50c:	8805883a 	mov	r2,r17
   1b510:	dfc00417 	ldw	ra,16(sp)
   1b514:	dcc00317 	ldw	r19,12(sp)
   1b518:	dc800217 	ldw	r18,8(sp)
   1b51c:	dc400117 	ldw	r17,4(sp)
   1b520:	dc000017 	ldw	r16,0(sp)
   1b524:	dec00504 	addi	sp,sp,20
   1b528:	f800283a 	ret
   1b52c:	81401917 	ldw	r5,100(r16)
   1b530:	00b7ffc4 	movi	r2,-8193
   1b534:	21080014 	ori	r4,r4,8192
   1b538:	2884703a 	and	r2,r5,r2
   1b53c:	80801915 	stw	r2,100(r16)
   1b540:	80800017 	ldw	r2,0(r16)
   1b544:	8100030d 	sth	r4,12(r16)
   1b548:	81000517 	ldw	r4,20(r16)
   1b54c:	10c7c83a 	sub	r3,r2,r3
   1b550:	193fe016 	blt	r3,r4,1b4d4 <__alt_data_end+0xfc01b4d4>
   1b554:	800b883a 	mov	r5,r16
   1b558:	9009883a 	mov	r4,r18
   1b55c:	0015b380 	call	15b38 <_fflush_r>
   1b560:	1000071e 	bne	r2,zero,1b580 <__swbuf_r+0x114>
   1b564:	80800017 	ldw	r2,0(r16)
   1b568:	00c00044 	movi	r3,1
   1b56c:	003fda06 	br	1b4d8 <__alt_data_end+0xfc01b4d8>
   1b570:	800b883a 	mov	r5,r16
   1b574:	9009883a 	mov	r4,r18
   1b578:	0015b380 	call	15b38 <_fflush_r>
   1b57c:	103fe326 	beq	r2,zero,1b50c <__alt_data_end+0xfc01b50c>
   1b580:	00bfffc4 	movi	r2,-1
   1b584:	003fe206 	br	1b510 <__alt_data_end+0xfc01b510>
   1b588:	800b883a 	mov	r5,r16
   1b58c:	9009883a 	mov	r4,r18
   1b590:	0013f180 	call	13f18 <__swsetup_r>
   1b594:	103ffa1e 	bne	r2,zero,1b580 <__alt_data_end+0xfc01b580>
   1b598:	8100030b 	ldhu	r4,12(r16)
   1b59c:	80c00417 	ldw	r3,16(r16)
   1b5a0:	003fc506 	br	1b4b8 <__alt_data_end+0xfc01b4b8>
   1b5a4:	0015f240 	call	15f24 <__sinit>
   1b5a8:	003fbc06 	br	1b49c <__alt_data_end+0xfc01b49c>

0001b5ac <__swbuf>:
   1b5ac:	008000f4 	movhi	r2,3
   1b5b0:	10b84b04 	addi	r2,r2,-7892
   1b5b4:	280d883a 	mov	r6,r5
   1b5b8:	200b883a 	mov	r5,r4
   1b5bc:	11000017 	ldw	r4,0(r2)
   1b5c0:	001b46c1 	jmpi	1b46c <__swbuf_r>

0001b5c4 <_write_r>:
   1b5c4:	defffd04 	addi	sp,sp,-12
   1b5c8:	2805883a 	mov	r2,r5
   1b5cc:	dc000015 	stw	r16,0(sp)
   1b5d0:	040000f4 	movhi	r16,3
   1b5d4:	dc400115 	stw	r17,4(sp)
   1b5d8:	300b883a 	mov	r5,r6
   1b5dc:	8404e104 	addi	r16,r16,4996
   1b5e0:	2023883a 	mov	r17,r4
   1b5e4:	380d883a 	mov	r6,r7
   1b5e8:	1009883a 	mov	r4,r2
   1b5ec:	dfc00215 	stw	ra,8(sp)
   1b5f0:	80000015 	stw	zero,0(r16)
   1b5f4:	001fcf00 	call	1fcf0 <write>
   1b5f8:	00ffffc4 	movi	r3,-1
   1b5fc:	10c00526 	beq	r2,r3,1b614 <_write_r+0x50>
   1b600:	dfc00217 	ldw	ra,8(sp)
   1b604:	dc400117 	ldw	r17,4(sp)
   1b608:	dc000017 	ldw	r16,0(sp)
   1b60c:	dec00304 	addi	sp,sp,12
   1b610:	f800283a 	ret
   1b614:	80c00017 	ldw	r3,0(r16)
   1b618:	183ff926 	beq	r3,zero,1b600 <__alt_data_end+0xfc01b600>
   1b61c:	88c00015 	stw	r3,0(r17)
   1b620:	003ff706 	br	1b600 <__alt_data_end+0xfc01b600>

0001b624 <_close_r>:
   1b624:	defffd04 	addi	sp,sp,-12
   1b628:	dc000015 	stw	r16,0(sp)
   1b62c:	040000f4 	movhi	r16,3
   1b630:	dc400115 	stw	r17,4(sp)
   1b634:	8404e104 	addi	r16,r16,4996
   1b638:	2023883a 	mov	r17,r4
   1b63c:	2809883a 	mov	r4,r5
   1b640:	dfc00215 	stw	ra,8(sp)
   1b644:	80000015 	stw	zero,0(r16)
   1b648:	001f1f40 	call	1f1f4 <close>
   1b64c:	00ffffc4 	movi	r3,-1
   1b650:	10c00526 	beq	r2,r3,1b668 <_close_r+0x44>
   1b654:	dfc00217 	ldw	ra,8(sp)
   1b658:	dc400117 	ldw	r17,4(sp)
   1b65c:	dc000017 	ldw	r16,0(sp)
   1b660:	dec00304 	addi	sp,sp,12
   1b664:	f800283a 	ret
   1b668:	80c00017 	ldw	r3,0(r16)
   1b66c:	183ff926 	beq	r3,zero,1b654 <__alt_data_end+0xfc01b654>
   1b670:	88c00015 	stw	r3,0(r17)
   1b674:	003ff706 	br	1b654 <__alt_data_end+0xfc01b654>

0001b678 <_calloc_r>:
   1b678:	defffe04 	addi	sp,sp,-8
   1b67c:	2805883a 	mov	r2,r5
   1b680:	dc000015 	stw	r16,0(sp)
   1b684:	300b883a 	mov	r5,r6
   1b688:	2021883a 	mov	r16,r4
   1b68c:	1009883a 	mov	r4,r2
   1b690:	dfc00115 	stw	ra,4(sp)
   1b694:	000d18c0 	call	d18c <__mulsi3>
   1b698:	100b883a 	mov	r5,r2
   1b69c:	8009883a 	mov	r4,r16
   1b6a0:	000e7340 	call	e734 <_malloc_r>
   1b6a4:	10002926 	beq	r2,zero,1b74c <_calloc_r+0xd4>
   1b6a8:	11bfff17 	ldw	r6,-4(r2)
   1b6ac:	1021883a 	mov	r16,r2
   1b6b0:	00bfff04 	movi	r2,-4
   1b6b4:	308c703a 	and	r6,r6,r2
   1b6b8:	00c00904 	movi	r3,36
   1b6bc:	308d883a 	add	r6,r6,r2
   1b6c0:	19801636 	bltu	r3,r6,1b71c <_calloc_r+0xa4>
   1b6c4:	008004c4 	movi	r2,19
   1b6c8:	11800b2e 	bgeu	r2,r6,1b6f8 <_calloc_r+0x80>
   1b6cc:	80000015 	stw	zero,0(r16)
   1b6d0:	80000115 	stw	zero,4(r16)
   1b6d4:	008006c4 	movi	r2,27
   1b6d8:	11801a2e 	bgeu	r2,r6,1b744 <_calloc_r+0xcc>
   1b6dc:	80000215 	stw	zero,8(r16)
   1b6e0:	80000315 	stw	zero,12(r16)
   1b6e4:	30c0151e 	bne	r6,r3,1b73c <_calloc_r+0xc4>
   1b6e8:	80000415 	stw	zero,16(r16)
   1b6ec:	80800604 	addi	r2,r16,24
   1b6f0:	80000515 	stw	zero,20(r16)
   1b6f4:	00000106 	br	1b6fc <_calloc_r+0x84>
   1b6f8:	8005883a 	mov	r2,r16
   1b6fc:	10000015 	stw	zero,0(r2)
   1b700:	10000115 	stw	zero,4(r2)
   1b704:	10000215 	stw	zero,8(r2)
   1b708:	8005883a 	mov	r2,r16
   1b70c:	dfc00117 	ldw	ra,4(sp)
   1b710:	dc000017 	ldw	r16,0(sp)
   1b714:	dec00204 	addi	sp,sp,8
   1b718:	f800283a 	ret
   1b71c:	000b883a 	mov	r5,zero
   1b720:	8009883a 	mov	r4,r16
   1b724:	000f0880 	call	f088 <memset>
   1b728:	8005883a 	mov	r2,r16
   1b72c:	dfc00117 	ldw	ra,4(sp)
   1b730:	dc000017 	ldw	r16,0(sp)
   1b734:	dec00204 	addi	sp,sp,8
   1b738:	f800283a 	ret
   1b73c:	80800404 	addi	r2,r16,16
   1b740:	003fee06 	br	1b6fc <__alt_data_end+0xfc01b6fc>
   1b744:	80800204 	addi	r2,r16,8
   1b748:	003fec06 	br	1b6fc <__alt_data_end+0xfc01b6fc>
   1b74c:	0005883a 	mov	r2,zero
   1b750:	003fee06 	br	1b70c <__alt_data_end+0xfc01b70c>

0001b754 <_fclose_r>:
   1b754:	28003926 	beq	r5,zero,1b83c <_fclose_r+0xe8>
   1b758:	defffc04 	addi	sp,sp,-16
   1b75c:	dc400115 	stw	r17,4(sp)
   1b760:	dc000015 	stw	r16,0(sp)
   1b764:	dfc00315 	stw	ra,12(sp)
   1b768:	dc800215 	stw	r18,8(sp)
   1b76c:	2023883a 	mov	r17,r4
   1b770:	2821883a 	mov	r16,r5
   1b774:	20000226 	beq	r4,zero,1b780 <_fclose_r+0x2c>
   1b778:	20800e17 	ldw	r2,56(r4)
   1b77c:	10002726 	beq	r2,zero,1b81c <_fclose_r+0xc8>
   1b780:	8080030f 	ldh	r2,12(r16)
   1b784:	1000071e 	bne	r2,zero,1b7a4 <_fclose_r+0x50>
   1b788:	0005883a 	mov	r2,zero
   1b78c:	dfc00317 	ldw	ra,12(sp)
   1b790:	dc800217 	ldw	r18,8(sp)
   1b794:	dc400117 	ldw	r17,4(sp)
   1b798:	dc000017 	ldw	r16,0(sp)
   1b79c:	dec00404 	addi	sp,sp,16
   1b7a0:	f800283a 	ret
   1b7a4:	800b883a 	mov	r5,r16
   1b7a8:	8809883a 	mov	r4,r17
   1b7ac:	001591c0 	call	1591c <__sflush_r>
   1b7b0:	1025883a 	mov	r18,r2
   1b7b4:	80800b17 	ldw	r2,44(r16)
   1b7b8:	10000426 	beq	r2,zero,1b7cc <_fclose_r+0x78>
   1b7bc:	81400717 	ldw	r5,28(r16)
   1b7c0:	8809883a 	mov	r4,r17
   1b7c4:	103ee83a 	callr	r2
   1b7c8:	10001616 	blt	r2,zero,1b824 <_fclose_r+0xd0>
   1b7cc:	8080030b 	ldhu	r2,12(r16)
   1b7d0:	1080200c 	andi	r2,r2,128
   1b7d4:	1000151e 	bne	r2,zero,1b82c <_fclose_r+0xd8>
   1b7d8:	81400c17 	ldw	r5,48(r16)
   1b7dc:	28000526 	beq	r5,zero,1b7f4 <_fclose_r+0xa0>
   1b7e0:	80801004 	addi	r2,r16,64
   1b7e4:	28800226 	beq	r5,r2,1b7f0 <_fclose_r+0x9c>
   1b7e8:	8809883a 	mov	r4,r17
   1b7ec:	00160980 	call	16098 <_free_r>
   1b7f0:	80000c15 	stw	zero,48(r16)
   1b7f4:	81401117 	ldw	r5,68(r16)
   1b7f8:	28000326 	beq	r5,zero,1b808 <_fclose_r+0xb4>
   1b7fc:	8809883a 	mov	r4,r17
   1b800:	00160980 	call	16098 <_free_r>
   1b804:	80001115 	stw	zero,68(r16)
   1b808:	0015f340 	call	15f34 <__sfp_lock_acquire>
   1b80c:	8000030d 	sth	zero,12(r16)
   1b810:	0015f380 	call	15f38 <__sfp_lock_release>
   1b814:	9005883a 	mov	r2,r18
   1b818:	003fdc06 	br	1b78c <__alt_data_end+0xfc01b78c>
   1b81c:	0015f240 	call	15f24 <__sinit>
   1b820:	003fd706 	br	1b780 <__alt_data_end+0xfc01b780>
   1b824:	04bfffc4 	movi	r18,-1
   1b828:	003fe806 	br	1b7cc <__alt_data_end+0xfc01b7cc>
   1b82c:	81400417 	ldw	r5,16(r16)
   1b830:	8809883a 	mov	r4,r17
   1b834:	00160980 	call	16098 <_free_r>
   1b838:	003fe706 	br	1b7d8 <__alt_data_end+0xfc01b7d8>
   1b83c:	0005883a 	mov	r2,zero
   1b840:	f800283a 	ret

0001b844 <fclose>:
   1b844:	008000f4 	movhi	r2,3
   1b848:	10b84b04 	addi	r2,r2,-7892
   1b84c:	200b883a 	mov	r5,r4
   1b850:	11000017 	ldw	r4,0(r2)
   1b854:	001b7541 	jmpi	1b754 <_fclose_r>

0001b858 <__fputwc>:
   1b858:	defff804 	addi	sp,sp,-32
   1b85c:	dcc00415 	stw	r19,16(sp)
   1b860:	dc800315 	stw	r18,12(sp)
   1b864:	dc000115 	stw	r16,4(sp)
   1b868:	dfc00715 	stw	ra,28(sp)
   1b86c:	dd400615 	stw	r21,24(sp)
   1b870:	dd000515 	stw	r20,20(sp)
   1b874:	dc400215 	stw	r17,8(sp)
   1b878:	2027883a 	mov	r19,r4
   1b87c:	2825883a 	mov	r18,r5
   1b880:	3021883a 	mov	r16,r6
   1b884:	0016a800 	call	16a80 <__locale_mb_cur_max>
   1b888:	00c00044 	movi	r3,1
   1b88c:	10c03e26 	beq	r2,r3,1b988 <__fputwc+0x130>
   1b890:	81c01704 	addi	r7,r16,92
   1b894:	900d883a 	mov	r6,r18
   1b898:	d80b883a 	mov	r5,sp
   1b89c:	9809883a 	mov	r4,r19
   1b8a0:	001bbd00 	call	1bbd0 <_wcrtomb_r>
   1b8a4:	1029883a 	mov	r20,r2
   1b8a8:	00bfffc4 	movi	r2,-1
   1b8ac:	a0802026 	beq	r20,r2,1b930 <__fputwc+0xd8>
   1b8b0:	d9400003 	ldbu	r5,0(sp)
   1b8b4:	a0001c26 	beq	r20,zero,1b928 <__fputwc+0xd0>
   1b8b8:	0023883a 	mov	r17,zero
   1b8bc:	05400284 	movi	r21,10
   1b8c0:	00000906 	br	1b8e8 <__fputwc+0x90>
   1b8c4:	80800017 	ldw	r2,0(r16)
   1b8c8:	11400005 	stb	r5,0(r2)
   1b8cc:	80c00017 	ldw	r3,0(r16)
   1b8d0:	18c00044 	addi	r3,r3,1
   1b8d4:	80c00015 	stw	r3,0(r16)
   1b8d8:	8c400044 	addi	r17,r17,1
   1b8dc:	dc45883a 	add	r2,sp,r17
   1b8e0:	8d00112e 	bgeu	r17,r20,1b928 <__fputwc+0xd0>
   1b8e4:	11400003 	ldbu	r5,0(r2)
   1b8e8:	80c00217 	ldw	r3,8(r16)
   1b8ec:	18ffffc4 	addi	r3,r3,-1
   1b8f0:	80c00215 	stw	r3,8(r16)
   1b8f4:	183ff30e 	bge	r3,zero,1b8c4 <__alt_data_end+0xfc01b8c4>
   1b8f8:	80800617 	ldw	r2,24(r16)
   1b8fc:	18801916 	blt	r3,r2,1b964 <__fputwc+0x10c>
   1b900:	80800017 	ldw	r2,0(r16)
   1b904:	11400005 	stb	r5,0(r2)
   1b908:	80800017 	ldw	r2,0(r16)
   1b90c:	10c00003 	ldbu	r3,0(r2)
   1b910:	10800044 	addi	r2,r2,1
   1b914:	1d402326 	beq	r3,r21,1b9a4 <__fputwc+0x14c>
   1b918:	80800015 	stw	r2,0(r16)
   1b91c:	8c400044 	addi	r17,r17,1
   1b920:	dc45883a 	add	r2,sp,r17
   1b924:	8d3fef36 	bltu	r17,r20,1b8e4 <__alt_data_end+0xfc01b8e4>
   1b928:	9005883a 	mov	r2,r18
   1b92c:	00000406 	br	1b940 <__fputwc+0xe8>
   1b930:	80c0030b 	ldhu	r3,12(r16)
   1b934:	a005883a 	mov	r2,r20
   1b938:	18c01014 	ori	r3,r3,64
   1b93c:	80c0030d 	sth	r3,12(r16)
   1b940:	dfc00717 	ldw	ra,28(sp)
   1b944:	dd400617 	ldw	r21,24(sp)
   1b948:	dd000517 	ldw	r20,20(sp)
   1b94c:	dcc00417 	ldw	r19,16(sp)
   1b950:	dc800317 	ldw	r18,12(sp)
   1b954:	dc400217 	ldw	r17,8(sp)
   1b958:	dc000117 	ldw	r16,4(sp)
   1b95c:	dec00804 	addi	sp,sp,32
   1b960:	f800283a 	ret
   1b964:	800d883a 	mov	r6,r16
   1b968:	29403fcc 	andi	r5,r5,255
   1b96c:	9809883a 	mov	r4,r19
   1b970:	001b46c0 	call	1b46c <__swbuf_r>
   1b974:	10bfffe0 	cmpeqi	r2,r2,-1
   1b978:	10803fcc 	andi	r2,r2,255
   1b97c:	103fd626 	beq	r2,zero,1b8d8 <__alt_data_end+0xfc01b8d8>
   1b980:	00bfffc4 	movi	r2,-1
   1b984:	003fee06 	br	1b940 <__alt_data_end+0xfc01b940>
   1b988:	90ffffc4 	addi	r3,r18,-1
   1b98c:	01003f84 	movi	r4,254
   1b990:	20ffbf36 	bltu	r4,r3,1b890 <__alt_data_end+0xfc01b890>
   1b994:	900b883a 	mov	r5,r18
   1b998:	dc800005 	stb	r18,0(sp)
   1b99c:	1029883a 	mov	r20,r2
   1b9a0:	003fc506 	br	1b8b8 <__alt_data_end+0xfc01b8b8>
   1b9a4:	800d883a 	mov	r6,r16
   1b9a8:	a80b883a 	mov	r5,r21
   1b9ac:	9809883a 	mov	r4,r19
   1b9b0:	001b46c0 	call	1b46c <__swbuf_r>
   1b9b4:	10bfffe0 	cmpeqi	r2,r2,-1
   1b9b8:	003fef06 	br	1b978 <__alt_data_end+0xfc01b978>

0001b9bc <_fputwc_r>:
   1b9bc:	3080030b 	ldhu	r2,12(r6)
   1b9c0:	10c8000c 	andi	r3,r2,8192
   1b9c4:	1800051e 	bne	r3,zero,1b9dc <_fputwc_r+0x20>
   1b9c8:	30c01917 	ldw	r3,100(r6)
   1b9cc:	10880014 	ori	r2,r2,8192
   1b9d0:	3080030d 	sth	r2,12(r6)
   1b9d4:	18880014 	ori	r2,r3,8192
   1b9d8:	30801915 	stw	r2,100(r6)
   1b9dc:	001b8581 	jmpi	1b858 <__fputwc>

0001b9e0 <fputwc>:
   1b9e0:	008000f4 	movhi	r2,3
   1b9e4:	defffc04 	addi	sp,sp,-16
   1b9e8:	10b84b04 	addi	r2,r2,-7892
   1b9ec:	dc000115 	stw	r16,4(sp)
   1b9f0:	14000017 	ldw	r16,0(r2)
   1b9f4:	dc400215 	stw	r17,8(sp)
   1b9f8:	dfc00315 	stw	ra,12(sp)
   1b9fc:	2023883a 	mov	r17,r4
   1ba00:	80000226 	beq	r16,zero,1ba0c <fputwc+0x2c>
   1ba04:	80800e17 	ldw	r2,56(r16)
   1ba08:	10001026 	beq	r2,zero,1ba4c <fputwc+0x6c>
   1ba0c:	2880030b 	ldhu	r2,12(r5)
   1ba10:	10c8000c 	andi	r3,r2,8192
   1ba14:	1800051e 	bne	r3,zero,1ba2c <fputwc+0x4c>
   1ba18:	28c01917 	ldw	r3,100(r5)
   1ba1c:	10880014 	ori	r2,r2,8192
   1ba20:	2880030d 	sth	r2,12(r5)
   1ba24:	18880014 	ori	r2,r3,8192
   1ba28:	28801915 	stw	r2,100(r5)
   1ba2c:	280d883a 	mov	r6,r5
   1ba30:	8009883a 	mov	r4,r16
   1ba34:	880b883a 	mov	r5,r17
   1ba38:	dfc00317 	ldw	ra,12(sp)
   1ba3c:	dc400217 	ldw	r17,8(sp)
   1ba40:	dc000117 	ldw	r16,4(sp)
   1ba44:	dec00404 	addi	sp,sp,16
   1ba48:	001b8581 	jmpi	1b858 <__fputwc>
   1ba4c:	8009883a 	mov	r4,r16
   1ba50:	d9400015 	stw	r5,0(sp)
   1ba54:	0015f240 	call	15f24 <__sinit>
   1ba58:	d9400017 	ldw	r5,0(sp)
   1ba5c:	003feb06 	br	1ba0c <__alt_data_end+0xfc01ba0c>

0001ba60 <_fstat_r>:
   1ba60:	defffd04 	addi	sp,sp,-12
   1ba64:	2805883a 	mov	r2,r5
   1ba68:	dc000015 	stw	r16,0(sp)
   1ba6c:	040000f4 	movhi	r16,3
   1ba70:	dc400115 	stw	r17,4(sp)
   1ba74:	8404e104 	addi	r16,r16,4996
   1ba78:	2023883a 	mov	r17,r4
   1ba7c:	300b883a 	mov	r5,r6
   1ba80:	1009883a 	mov	r4,r2
   1ba84:	dfc00215 	stw	ra,8(sp)
   1ba88:	80000015 	stw	zero,0(r16)
   1ba8c:	001f3680 	call	1f368 <fstat>
   1ba90:	00ffffc4 	movi	r3,-1
   1ba94:	10c00526 	beq	r2,r3,1baac <_fstat_r+0x4c>
   1ba98:	dfc00217 	ldw	ra,8(sp)
   1ba9c:	dc400117 	ldw	r17,4(sp)
   1baa0:	dc000017 	ldw	r16,0(sp)
   1baa4:	dec00304 	addi	sp,sp,12
   1baa8:	f800283a 	ret
   1baac:	80c00017 	ldw	r3,0(r16)
   1bab0:	183ff926 	beq	r3,zero,1ba98 <__alt_data_end+0xfc01ba98>
   1bab4:	88c00015 	stw	r3,0(r17)
   1bab8:	003ff706 	br	1ba98 <__alt_data_end+0xfc01ba98>

0001babc <_isatty_r>:
   1babc:	defffd04 	addi	sp,sp,-12
   1bac0:	dc000015 	stw	r16,0(sp)
   1bac4:	040000f4 	movhi	r16,3
   1bac8:	dc400115 	stw	r17,4(sp)
   1bacc:	8404e104 	addi	r16,r16,4996
   1bad0:	2023883a 	mov	r17,r4
   1bad4:	2809883a 	mov	r4,r5
   1bad8:	dfc00215 	stw	ra,8(sp)
   1badc:	80000015 	stw	zero,0(r16)
   1bae0:	001f47c0 	call	1f47c <isatty>
   1bae4:	00ffffc4 	movi	r3,-1
   1bae8:	10c00526 	beq	r2,r3,1bb00 <_isatty_r+0x44>
   1baec:	dfc00217 	ldw	ra,8(sp)
   1baf0:	dc400117 	ldw	r17,4(sp)
   1baf4:	dc000017 	ldw	r16,0(sp)
   1baf8:	dec00304 	addi	sp,sp,12
   1bafc:	f800283a 	ret
   1bb00:	80c00017 	ldw	r3,0(r16)
   1bb04:	183ff926 	beq	r3,zero,1baec <__alt_data_end+0xfc01baec>
   1bb08:	88c00015 	stw	r3,0(r17)
   1bb0c:	003ff706 	br	1baec <__alt_data_end+0xfc01baec>

0001bb10 <_lseek_r>:
   1bb10:	defffd04 	addi	sp,sp,-12
   1bb14:	2805883a 	mov	r2,r5
   1bb18:	dc000015 	stw	r16,0(sp)
   1bb1c:	040000f4 	movhi	r16,3
   1bb20:	dc400115 	stw	r17,4(sp)
   1bb24:	300b883a 	mov	r5,r6
   1bb28:	8404e104 	addi	r16,r16,4996
   1bb2c:	2023883a 	mov	r17,r4
   1bb30:	380d883a 	mov	r6,r7
   1bb34:	1009883a 	mov	r4,r2
   1bb38:	dfc00215 	stw	ra,8(sp)
   1bb3c:	80000015 	stw	zero,0(r16)
   1bb40:	001f7bc0 	call	1f7bc <lseek>
   1bb44:	00ffffc4 	movi	r3,-1
   1bb48:	10c00526 	beq	r2,r3,1bb60 <_lseek_r+0x50>
   1bb4c:	dfc00217 	ldw	ra,8(sp)
   1bb50:	dc400117 	ldw	r17,4(sp)
   1bb54:	dc000017 	ldw	r16,0(sp)
   1bb58:	dec00304 	addi	sp,sp,12
   1bb5c:	f800283a 	ret
   1bb60:	80c00017 	ldw	r3,0(r16)
   1bb64:	183ff926 	beq	r3,zero,1bb4c <__alt_data_end+0xfc01bb4c>
   1bb68:	88c00015 	stw	r3,0(r17)
   1bb6c:	003ff706 	br	1bb4c <__alt_data_end+0xfc01bb4c>

0001bb70 <_read_r>:
   1bb70:	defffd04 	addi	sp,sp,-12
   1bb74:	2805883a 	mov	r2,r5
   1bb78:	dc000015 	stw	r16,0(sp)
   1bb7c:	040000f4 	movhi	r16,3
   1bb80:	dc400115 	stw	r17,4(sp)
   1bb84:	300b883a 	mov	r5,r6
   1bb88:	8404e104 	addi	r16,r16,4996
   1bb8c:	2023883a 	mov	r17,r4
   1bb90:	380d883a 	mov	r6,r7
   1bb94:	1009883a 	mov	r4,r2
   1bb98:	dfc00215 	stw	ra,8(sp)
   1bb9c:	80000015 	stw	zero,0(r16)
   1bba0:	001f9980 	call	1f998 <read>
   1bba4:	00ffffc4 	movi	r3,-1
   1bba8:	10c00526 	beq	r2,r3,1bbc0 <_read_r+0x50>
   1bbac:	dfc00217 	ldw	ra,8(sp)
   1bbb0:	dc400117 	ldw	r17,4(sp)
   1bbb4:	dc000017 	ldw	r16,0(sp)
   1bbb8:	dec00304 	addi	sp,sp,12
   1bbbc:	f800283a 	ret
   1bbc0:	80c00017 	ldw	r3,0(r16)
   1bbc4:	183ff926 	beq	r3,zero,1bbac <__alt_data_end+0xfc01bbac>
   1bbc8:	88c00015 	stw	r3,0(r17)
   1bbcc:	003ff706 	br	1bbac <__alt_data_end+0xfc01bbac>

0001bbd0 <_wcrtomb_r>:
   1bbd0:	defff604 	addi	sp,sp,-40
   1bbd4:	008000f4 	movhi	r2,3
   1bbd8:	dc800815 	stw	r18,32(sp)
   1bbdc:	dc400715 	stw	r17,28(sp)
   1bbe0:	dc000615 	stw	r16,24(sp)
   1bbe4:	10b84f04 	addi	r2,r2,-7876
   1bbe8:	dfc00915 	stw	ra,36(sp)
   1bbec:	2021883a 	mov	r16,r4
   1bbf0:	3823883a 	mov	r17,r7
   1bbf4:	14800017 	ldw	r18,0(r2)
   1bbf8:	28001426 	beq	r5,zero,1bc4c <_wcrtomb_r+0x7c>
   1bbfc:	d9400415 	stw	r5,16(sp)
   1bc00:	d9800515 	stw	r6,20(sp)
   1bc04:	0016a740 	call	16a74 <__locale_charset>
   1bc08:	d9800517 	ldw	r6,20(sp)
   1bc0c:	d9400417 	ldw	r5,16(sp)
   1bc10:	100f883a 	mov	r7,r2
   1bc14:	dc400015 	stw	r17,0(sp)
   1bc18:	8009883a 	mov	r4,r16
   1bc1c:	903ee83a 	callr	r18
   1bc20:	00ffffc4 	movi	r3,-1
   1bc24:	10c0031e 	bne	r2,r3,1bc34 <_wcrtomb_r+0x64>
   1bc28:	88000015 	stw	zero,0(r17)
   1bc2c:	00c02284 	movi	r3,138
   1bc30:	80c00015 	stw	r3,0(r16)
   1bc34:	dfc00917 	ldw	ra,36(sp)
   1bc38:	dc800817 	ldw	r18,32(sp)
   1bc3c:	dc400717 	ldw	r17,28(sp)
   1bc40:	dc000617 	ldw	r16,24(sp)
   1bc44:	dec00a04 	addi	sp,sp,40
   1bc48:	f800283a 	ret
   1bc4c:	0016a740 	call	16a74 <__locale_charset>
   1bc50:	100f883a 	mov	r7,r2
   1bc54:	dc400015 	stw	r17,0(sp)
   1bc58:	000d883a 	mov	r6,zero
   1bc5c:	d9400104 	addi	r5,sp,4
   1bc60:	8009883a 	mov	r4,r16
   1bc64:	903ee83a 	callr	r18
   1bc68:	003fed06 	br	1bc20 <__alt_data_end+0xfc01bc20>

0001bc6c <wcrtomb>:
   1bc6c:	defff604 	addi	sp,sp,-40
   1bc70:	008000f4 	movhi	r2,3
   1bc74:	dc800615 	stw	r18,24(sp)
   1bc78:	dc400515 	stw	r17,20(sp)
   1bc7c:	10b84b04 	addi	r2,r2,-7892
   1bc80:	dfc00915 	stw	ra,36(sp)
   1bc84:	dd000815 	stw	r20,32(sp)
   1bc88:	dcc00715 	stw	r19,28(sp)
   1bc8c:	dc000415 	stw	r16,16(sp)
   1bc90:	3025883a 	mov	r18,r6
   1bc94:	14400017 	ldw	r17,0(r2)
   1bc98:	20001926 	beq	r4,zero,1bd00 <wcrtomb+0x94>
   1bc9c:	008000f4 	movhi	r2,3
   1bca0:	10b84f04 	addi	r2,r2,-7876
   1bca4:	15000017 	ldw	r20,0(r2)
   1bca8:	2021883a 	mov	r16,r4
   1bcac:	2827883a 	mov	r19,r5
   1bcb0:	0016a740 	call	16a74 <__locale_charset>
   1bcb4:	100f883a 	mov	r7,r2
   1bcb8:	dc800015 	stw	r18,0(sp)
   1bcbc:	980d883a 	mov	r6,r19
   1bcc0:	800b883a 	mov	r5,r16
   1bcc4:	8809883a 	mov	r4,r17
   1bcc8:	a03ee83a 	callr	r20
   1bccc:	00ffffc4 	movi	r3,-1
   1bcd0:	10c0031e 	bne	r2,r3,1bce0 <wcrtomb+0x74>
   1bcd4:	90000015 	stw	zero,0(r18)
   1bcd8:	00c02284 	movi	r3,138
   1bcdc:	88c00015 	stw	r3,0(r17)
   1bce0:	dfc00917 	ldw	ra,36(sp)
   1bce4:	dd000817 	ldw	r20,32(sp)
   1bce8:	dcc00717 	ldw	r19,28(sp)
   1bcec:	dc800617 	ldw	r18,24(sp)
   1bcf0:	dc400517 	ldw	r17,20(sp)
   1bcf4:	dc000417 	ldw	r16,16(sp)
   1bcf8:	dec00a04 	addi	sp,sp,40
   1bcfc:	f800283a 	ret
   1bd00:	008000f4 	movhi	r2,3
   1bd04:	10b84f04 	addi	r2,r2,-7876
   1bd08:	14000017 	ldw	r16,0(r2)
   1bd0c:	0016a740 	call	16a74 <__locale_charset>
   1bd10:	100f883a 	mov	r7,r2
   1bd14:	dc800015 	stw	r18,0(sp)
   1bd18:	000d883a 	mov	r6,zero
   1bd1c:	d9400104 	addi	r5,sp,4
   1bd20:	8809883a 	mov	r4,r17
   1bd24:	803ee83a 	callr	r16
   1bd28:	003fe806 	br	1bccc <__alt_data_end+0xfc01bccc>

0001bd2c <__ascii_wctomb>:
   1bd2c:	28000526 	beq	r5,zero,1bd44 <__ascii_wctomb+0x18>
   1bd30:	00803fc4 	movi	r2,255
   1bd34:	11800536 	bltu	r2,r6,1bd4c <__ascii_wctomb+0x20>
   1bd38:	29800005 	stb	r6,0(r5)
   1bd3c:	00800044 	movi	r2,1
   1bd40:	f800283a 	ret
   1bd44:	0005883a 	mov	r2,zero
   1bd48:	f800283a 	ret
   1bd4c:	00802284 	movi	r2,138
   1bd50:	20800015 	stw	r2,0(r4)
   1bd54:	00bfffc4 	movi	r2,-1
   1bd58:	f800283a 	ret

0001bd5c <_wctomb_r>:
   1bd5c:	008000f4 	movhi	r2,3
   1bd60:	defff904 	addi	sp,sp,-28
   1bd64:	10b84f04 	addi	r2,r2,-7876
   1bd68:	dfc00615 	stw	ra,24(sp)
   1bd6c:	dc400515 	stw	r17,20(sp)
   1bd70:	dc000415 	stw	r16,16(sp)
   1bd74:	3823883a 	mov	r17,r7
   1bd78:	14000017 	ldw	r16,0(r2)
   1bd7c:	d9000115 	stw	r4,4(sp)
   1bd80:	d9400215 	stw	r5,8(sp)
   1bd84:	d9800315 	stw	r6,12(sp)
   1bd88:	0016a740 	call	16a74 <__locale_charset>
   1bd8c:	d9800317 	ldw	r6,12(sp)
   1bd90:	d9400217 	ldw	r5,8(sp)
   1bd94:	d9000117 	ldw	r4,4(sp)
   1bd98:	100f883a 	mov	r7,r2
   1bd9c:	dc400015 	stw	r17,0(sp)
   1bda0:	803ee83a 	callr	r16
   1bda4:	dfc00617 	ldw	ra,24(sp)
   1bda8:	dc400517 	ldw	r17,20(sp)
   1bdac:	dc000417 	ldw	r16,16(sp)
   1bdb0:	dec00704 	addi	sp,sp,28
   1bdb4:	f800283a 	ret

0001bdb8 <__udivdi3>:
   1bdb8:	defff404 	addi	sp,sp,-48
   1bdbc:	dcc00515 	stw	r19,20(sp)
   1bdc0:	dc000215 	stw	r16,8(sp)
   1bdc4:	dfc00b15 	stw	ra,44(sp)
   1bdc8:	df000a15 	stw	fp,40(sp)
   1bdcc:	ddc00915 	stw	r23,36(sp)
   1bdd0:	dd800815 	stw	r22,32(sp)
   1bdd4:	dd400715 	stw	r21,28(sp)
   1bdd8:	dd000615 	stw	r20,24(sp)
   1bddc:	dc800415 	stw	r18,16(sp)
   1bde0:	dc400315 	stw	r17,12(sp)
   1bde4:	2027883a 	mov	r19,r4
   1bde8:	2821883a 	mov	r16,r5
   1bdec:	3800461e 	bne	r7,zero,1bf08 <__udivdi3+0x150>
   1bdf0:	3023883a 	mov	r17,r6
   1bdf4:	2025883a 	mov	r18,r4
   1bdf8:	2980572e 	bgeu	r5,r6,1bf58 <__udivdi3+0x1a0>
   1bdfc:	00bfffd4 	movui	r2,65535
   1be00:	282d883a 	mov	r22,r5
   1be04:	1180b236 	bltu	r2,r6,1c0d0 <__udivdi3+0x318>
   1be08:	00803fc4 	movi	r2,255
   1be0c:	1185803a 	cmpltu	r2,r2,r6
   1be10:	100490fa 	slli	r2,r2,3
   1be14:	3086d83a 	srl	r3,r6,r2
   1be18:	010000f4 	movhi	r4,3
   1be1c:	212b0604 	addi	r4,r4,-21480
   1be20:	20c7883a 	add	r3,r4,r3
   1be24:	18c00003 	ldbu	r3,0(r3)
   1be28:	1885883a 	add	r2,r3,r2
   1be2c:	00c00804 	movi	r3,32
   1be30:	1887c83a 	sub	r3,r3,r2
   1be34:	18000526 	beq	r3,zero,1be4c <__udivdi3+0x94>
   1be38:	80e0983a 	sll	r16,r16,r3
   1be3c:	9884d83a 	srl	r2,r19,r2
   1be40:	30e2983a 	sll	r17,r6,r3
   1be44:	98e4983a 	sll	r18,r19,r3
   1be48:	142cb03a 	or	r22,r2,r16
   1be4c:	882ad43a 	srli	r21,r17,16
   1be50:	b009883a 	mov	r4,r22
   1be54:	8d3fffcc 	andi	r20,r17,65535
   1be58:	a80b883a 	mov	r5,r21
   1be5c:	000d1340 	call	d134 <__umodsi3>
   1be60:	b009883a 	mov	r4,r22
   1be64:	a80b883a 	mov	r5,r21
   1be68:	1027883a 	mov	r19,r2
   1be6c:	000d0d00 	call	d0d0 <__udivsi3>
   1be70:	100b883a 	mov	r5,r2
   1be74:	a009883a 	mov	r4,r20
   1be78:	102d883a 	mov	r22,r2
   1be7c:	000d18c0 	call	d18c <__mulsi3>
   1be80:	9826943a 	slli	r19,r19,16
   1be84:	9006d43a 	srli	r3,r18,16
   1be88:	1cc6b03a 	or	r3,r3,r19
   1be8c:	1880052e 	bgeu	r3,r2,1bea4 <__udivdi3+0xec>
   1be90:	1c47883a 	add	r3,r3,r17
   1be94:	b13fffc4 	addi	r4,r22,-1
   1be98:	1c400136 	bltu	r3,r17,1bea0 <__udivdi3+0xe8>
   1be9c:	18814236 	bltu	r3,r2,1c3a8 <__udivdi3+0x5f0>
   1bea0:	202d883a 	mov	r22,r4
   1bea4:	18a1c83a 	sub	r16,r3,r2
   1bea8:	8009883a 	mov	r4,r16
   1beac:	a80b883a 	mov	r5,r21
   1beb0:	000d1340 	call	d134 <__umodsi3>
   1beb4:	1027883a 	mov	r19,r2
   1beb8:	8009883a 	mov	r4,r16
   1bebc:	a80b883a 	mov	r5,r21
   1bec0:	9826943a 	slli	r19,r19,16
   1bec4:	000d0d00 	call	d0d0 <__udivsi3>
   1bec8:	100b883a 	mov	r5,r2
   1becc:	a009883a 	mov	r4,r20
   1bed0:	94bfffcc 	andi	r18,r18,65535
   1bed4:	1021883a 	mov	r16,r2
   1bed8:	94e4b03a 	or	r18,r18,r19
   1bedc:	000d18c0 	call	d18c <__mulsi3>
   1bee0:	9080052e 	bgeu	r18,r2,1bef8 <__udivdi3+0x140>
   1bee4:	8ca5883a 	add	r18,r17,r18
   1bee8:	80ffffc4 	addi	r3,r16,-1
   1beec:	94410c36 	bltu	r18,r17,1c320 <__udivdi3+0x568>
   1bef0:	90810b2e 	bgeu	r18,r2,1c320 <__udivdi3+0x568>
   1bef4:	843fff84 	addi	r16,r16,-2
   1bef8:	b004943a 	slli	r2,r22,16
   1befc:	0007883a 	mov	r3,zero
   1bf00:	1404b03a 	or	r2,r2,r16
   1bf04:	00005e06 	br	1c080 <__udivdi3+0x2c8>
   1bf08:	29c05b36 	bltu	r5,r7,1c078 <__udivdi3+0x2c0>
   1bf0c:	00bfffd4 	movui	r2,65535
   1bf10:	11c0672e 	bgeu	r2,r7,1c0b0 <__udivdi3+0x2f8>
   1bf14:	00804034 	movhi	r2,256
   1bf18:	10bfffc4 	addi	r2,r2,-1
   1bf1c:	11c10a36 	bltu	r2,r7,1c348 <__udivdi3+0x590>
   1bf20:	00800404 	movi	r2,16
   1bf24:	3886d83a 	srl	r3,r7,r2
   1bf28:	010000f4 	movhi	r4,3
   1bf2c:	212b0604 	addi	r4,r4,-21480
   1bf30:	20c7883a 	add	r3,r4,r3
   1bf34:	18c00003 	ldbu	r3,0(r3)
   1bf38:	05c00804 	movi	r23,32
   1bf3c:	1885883a 	add	r2,r3,r2
   1bf40:	b8afc83a 	sub	r23,r23,r2
   1bf44:	b800671e 	bne	r23,zero,1c0e4 <__udivdi3+0x32c>
   1bf48:	3c010536 	bltu	r7,r16,1c360 <__udivdi3+0x5a8>
   1bf4c:	9985403a 	cmpgeu	r2,r19,r6
   1bf50:	0007883a 	mov	r3,zero
   1bf54:	00004a06 	br	1c080 <__udivdi3+0x2c8>
   1bf58:	3000041e 	bne	r6,zero,1bf6c <__udivdi3+0x1b4>
   1bf5c:	000b883a 	mov	r5,zero
   1bf60:	01000044 	movi	r4,1
   1bf64:	000d0d00 	call	d0d0 <__udivsi3>
   1bf68:	1023883a 	mov	r17,r2
   1bf6c:	00bfffd4 	movui	r2,65535
   1bf70:	1440532e 	bgeu	r2,r17,1c0c0 <__udivdi3+0x308>
   1bf74:	00804034 	movhi	r2,256
   1bf78:	10bfffc4 	addi	r2,r2,-1
   1bf7c:	1440f436 	bltu	r2,r17,1c350 <__udivdi3+0x598>
   1bf80:	00800404 	movi	r2,16
   1bf84:	8886d83a 	srl	r3,r17,r2
   1bf88:	010000f4 	movhi	r4,3
   1bf8c:	212b0604 	addi	r4,r4,-21480
   1bf90:	20c7883a 	add	r3,r4,r3
   1bf94:	18c00003 	ldbu	r3,0(r3)
   1bf98:	1885883a 	add	r2,r3,r2
   1bf9c:	00c00804 	movi	r3,32
   1bfa0:	1887c83a 	sub	r3,r3,r2
   1bfa4:	1800a51e 	bne	r3,zero,1c23c <__udivdi3+0x484>
   1bfa8:	882ad43a 	srli	r21,r17,16
   1bfac:	8461c83a 	sub	r16,r16,r17
   1bfb0:	8d3fffcc 	andi	r20,r17,65535
   1bfb4:	00c00044 	movi	r3,1
   1bfb8:	a80b883a 	mov	r5,r21
   1bfbc:	8009883a 	mov	r4,r16
   1bfc0:	d8c00115 	stw	r3,4(sp)
   1bfc4:	000d1340 	call	d134 <__umodsi3>
   1bfc8:	a80b883a 	mov	r5,r21
   1bfcc:	8009883a 	mov	r4,r16
   1bfd0:	1027883a 	mov	r19,r2
   1bfd4:	000d0d00 	call	d0d0 <__udivsi3>
   1bfd8:	a00b883a 	mov	r5,r20
   1bfdc:	1009883a 	mov	r4,r2
   1bfe0:	102d883a 	mov	r22,r2
   1bfe4:	000d18c0 	call	d18c <__mulsi3>
   1bfe8:	9826943a 	slli	r19,r19,16
   1bfec:	900ed43a 	srli	r7,r18,16
   1bff0:	d8c00117 	ldw	r3,4(sp)
   1bff4:	3cceb03a 	or	r7,r7,r19
   1bff8:	3880052e 	bgeu	r7,r2,1c010 <__udivdi3+0x258>
   1bffc:	3c4f883a 	add	r7,r7,r17
   1c000:	b13fffc4 	addi	r4,r22,-1
   1c004:	3c400136 	bltu	r7,r17,1c00c <__udivdi3+0x254>
   1c008:	3880e436 	bltu	r7,r2,1c39c <__udivdi3+0x5e4>
   1c00c:	202d883a 	mov	r22,r4
   1c010:	38a1c83a 	sub	r16,r7,r2
   1c014:	8009883a 	mov	r4,r16
   1c018:	a80b883a 	mov	r5,r21
   1c01c:	d8c00115 	stw	r3,4(sp)
   1c020:	000d1340 	call	d134 <__umodsi3>
   1c024:	1027883a 	mov	r19,r2
   1c028:	8009883a 	mov	r4,r16
   1c02c:	a80b883a 	mov	r5,r21
   1c030:	9826943a 	slli	r19,r19,16
   1c034:	000d0d00 	call	d0d0 <__udivsi3>
   1c038:	a00b883a 	mov	r5,r20
   1c03c:	1009883a 	mov	r4,r2
   1c040:	94bfffcc 	andi	r18,r18,65535
   1c044:	1021883a 	mov	r16,r2
   1c048:	94e4b03a 	or	r18,r18,r19
   1c04c:	000d18c0 	call	d18c <__mulsi3>
   1c050:	d8c00117 	ldw	r3,4(sp)
   1c054:	9080052e 	bgeu	r18,r2,1c06c <__udivdi3+0x2b4>
   1c058:	8ca5883a 	add	r18,r17,r18
   1c05c:	813fffc4 	addi	r4,r16,-1
   1c060:	9440ad36 	bltu	r18,r17,1c318 <__udivdi3+0x560>
   1c064:	9080ac2e 	bgeu	r18,r2,1c318 <__udivdi3+0x560>
   1c068:	843fff84 	addi	r16,r16,-2
   1c06c:	b004943a 	slli	r2,r22,16
   1c070:	1404b03a 	or	r2,r2,r16
   1c074:	00000206 	br	1c080 <__udivdi3+0x2c8>
   1c078:	0007883a 	mov	r3,zero
   1c07c:	0005883a 	mov	r2,zero
   1c080:	dfc00b17 	ldw	ra,44(sp)
   1c084:	df000a17 	ldw	fp,40(sp)
   1c088:	ddc00917 	ldw	r23,36(sp)
   1c08c:	dd800817 	ldw	r22,32(sp)
   1c090:	dd400717 	ldw	r21,28(sp)
   1c094:	dd000617 	ldw	r20,24(sp)
   1c098:	dcc00517 	ldw	r19,20(sp)
   1c09c:	dc800417 	ldw	r18,16(sp)
   1c0a0:	dc400317 	ldw	r17,12(sp)
   1c0a4:	dc000217 	ldw	r16,8(sp)
   1c0a8:	dec00c04 	addi	sp,sp,48
   1c0ac:	f800283a 	ret
   1c0b0:	00803fc4 	movi	r2,255
   1c0b4:	11c5803a 	cmpltu	r2,r2,r7
   1c0b8:	100490fa 	slli	r2,r2,3
   1c0bc:	003f9906 	br	1bf24 <__alt_data_end+0xfc01bf24>
   1c0c0:	00803fc4 	movi	r2,255
   1c0c4:	1445803a 	cmpltu	r2,r2,r17
   1c0c8:	100490fa 	slli	r2,r2,3
   1c0cc:	003fad06 	br	1bf84 <__alt_data_end+0xfc01bf84>
   1c0d0:	00804034 	movhi	r2,256
   1c0d4:	10bfffc4 	addi	r2,r2,-1
   1c0d8:	11809f36 	bltu	r2,r6,1c358 <__udivdi3+0x5a0>
   1c0dc:	00800404 	movi	r2,16
   1c0e0:	003f4c06 	br	1be14 <__alt_data_end+0xfc01be14>
   1c0e4:	3dce983a 	sll	r7,r7,r23
   1c0e8:	30b8d83a 	srl	fp,r6,r2
   1c0ec:	80a2d83a 	srl	r17,r16,r2
   1c0f0:	35cc983a 	sll	r6,r6,r23
   1c0f4:	3f38b03a 	or	fp,r7,fp
   1c0f8:	e024d43a 	srli	r18,fp,16
   1c0fc:	9884d83a 	srl	r2,r19,r2
   1c100:	85e0983a 	sll	r16,r16,r23
   1c104:	8809883a 	mov	r4,r17
   1c108:	900b883a 	mov	r5,r18
   1c10c:	d9800015 	stw	r6,0(sp)
   1c110:	1420b03a 	or	r16,r2,r16
   1c114:	000d1340 	call	d134 <__umodsi3>
   1c118:	900b883a 	mov	r5,r18
   1c11c:	8809883a 	mov	r4,r17
   1c120:	1029883a 	mov	r20,r2
   1c124:	e5bfffcc 	andi	r22,fp,65535
   1c128:	000d0d00 	call	d0d0 <__udivsi3>
   1c12c:	100b883a 	mov	r5,r2
   1c130:	b009883a 	mov	r4,r22
   1c134:	102b883a 	mov	r21,r2
   1c138:	000d18c0 	call	d18c <__mulsi3>
   1c13c:	a028943a 	slli	r20,r20,16
   1c140:	8006d43a 	srli	r3,r16,16
   1c144:	1d06b03a 	or	r3,r3,r20
   1c148:	1880042e 	bgeu	r3,r2,1c15c <__udivdi3+0x3a4>
   1c14c:	1f07883a 	add	r3,r3,fp
   1c150:	a93fffc4 	addi	r4,r21,-1
   1c154:	1f00892e 	bgeu	r3,fp,1c37c <__udivdi3+0x5c4>
   1c158:	202b883a 	mov	r21,r4
   1c15c:	18a3c83a 	sub	r17,r3,r2
   1c160:	8809883a 	mov	r4,r17
   1c164:	900b883a 	mov	r5,r18
   1c168:	000d1340 	call	d134 <__umodsi3>
   1c16c:	1029883a 	mov	r20,r2
   1c170:	8809883a 	mov	r4,r17
   1c174:	900b883a 	mov	r5,r18
   1c178:	a028943a 	slli	r20,r20,16
   1c17c:	000d0d00 	call	d0d0 <__udivsi3>
   1c180:	100b883a 	mov	r5,r2
   1c184:	b009883a 	mov	r4,r22
   1c188:	843fffcc 	andi	r16,r16,65535
   1c18c:	1023883a 	mov	r17,r2
   1c190:	8520b03a 	or	r16,r16,r20
   1c194:	000d18c0 	call	d18c <__mulsi3>
   1c198:	8080042e 	bgeu	r16,r2,1c1ac <__udivdi3+0x3f4>
   1c19c:	8721883a 	add	r16,r16,fp
   1c1a0:	88ffffc4 	addi	r3,r17,-1
   1c1a4:	8700712e 	bgeu	r16,fp,1c36c <__udivdi3+0x5b4>
   1c1a8:	1823883a 	mov	r17,r3
   1c1ac:	a80e943a 	slli	r7,r21,16
   1c1b0:	d8c00017 	ldw	r3,0(sp)
   1c1b4:	80a1c83a 	sub	r16,r16,r2
   1c1b8:	3c64b03a 	or	r18,r7,r17
   1c1bc:	1d3fffcc 	andi	r20,r3,65535
   1c1c0:	9022d43a 	srli	r17,r18,16
   1c1c4:	95bfffcc 	andi	r22,r18,65535
   1c1c8:	a00b883a 	mov	r5,r20
   1c1cc:	b009883a 	mov	r4,r22
   1c1d0:	182ad43a 	srli	r21,r3,16
   1c1d4:	000d18c0 	call	d18c <__mulsi3>
   1c1d8:	a00b883a 	mov	r5,r20
   1c1dc:	8809883a 	mov	r4,r17
   1c1e0:	1039883a 	mov	fp,r2
   1c1e4:	000d18c0 	call	d18c <__mulsi3>
   1c1e8:	8809883a 	mov	r4,r17
   1c1ec:	a80b883a 	mov	r5,r21
   1c1f0:	1029883a 	mov	r20,r2
   1c1f4:	000d18c0 	call	d18c <__mulsi3>
   1c1f8:	a80b883a 	mov	r5,r21
   1c1fc:	b009883a 	mov	r4,r22
   1c200:	1023883a 	mov	r17,r2
   1c204:	000d18c0 	call	d18c <__mulsi3>
   1c208:	e006d43a 	srli	r3,fp,16
   1c20c:	1505883a 	add	r2,r2,r20
   1c210:	1887883a 	add	r3,r3,r2
   1c214:	1d00022e 	bgeu	r3,r20,1c220 <__udivdi3+0x468>
   1c218:	00800074 	movhi	r2,1
   1c21c:	88a3883a 	add	r17,r17,r2
   1c220:	1804d43a 	srli	r2,r3,16
   1c224:	1463883a 	add	r17,r2,r17
   1c228:	84404436 	bltu	r16,r17,1c33c <__udivdi3+0x584>
   1c22c:	84403e26 	beq	r16,r17,1c328 <__udivdi3+0x570>
   1c230:	9005883a 	mov	r2,r18
   1c234:	0007883a 	mov	r3,zero
   1c238:	003f9106 	br	1c080 <__alt_data_end+0xfc01c080>
   1c23c:	88e2983a 	sll	r17,r17,r3
   1c240:	80aed83a 	srl	r23,r16,r2
   1c244:	80e0983a 	sll	r16,r16,r3
   1c248:	882ad43a 	srli	r21,r17,16
   1c24c:	9884d83a 	srl	r2,r19,r2
   1c250:	b809883a 	mov	r4,r23
   1c254:	a80b883a 	mov	r5,r21
   1c258:	98e4983a 	sll	r18,r19,r3
   1c25c:	142cb03a 	or	r22,r2,r16
   1c260:	000d1340 	call	d134 <__umodsi3>
   1c264:	b809883a 	mov	r4,r23
   1c268:	a80b883a 	mov	r5,r21
   1c26c:	1027883a 	mov	r19,r2
   1c270:	8d3fffcc 	andi	r20,r17,65535
   1c274:	000d0d00 	call	d0d0 <__udivsi3>
   1c278:	a009883a 	mov	r4,r20
   1c27c:	100b883a 	mov	r5,r2
   1c280:	102f883a 	mov	r23,r2
   1c284:	000d18c0 	call	d18c <__mulsi3>
   1c288:	9826943a 	slli	r19,r19,16
   1c28c:	b008d43a 	srli	r4,r22,16
   1c290:	24c8b03a 	or	r4,r4,r19
   1c294:	2080062e 	bgeu	r4,r2,1c2b0 <__udivdi3+0x4f8>
   1c298:	2449883a 	add	r4,r4,r17
   1c29c:	b8ffffc4 	addi	r3,r23,-1
   1c2a0:	24403c36 	bltu	r4,r17,1c394 <__udivdi3+0x5dc>
   1c2a4:	20803b2e 	bgeu	r4,r2,1c394 <__udivdi3+0x5dc>
   1c2a8:	bdffff84 	addi	r23,r23,-2
   1c2ac:	2449883a 	add	r4,r4,r17
   1c2b0:	20a1c83a 	sub	r16,r4,r2
   1c2b4:	a80b883a 	mov	r5,r21
   1c2b8:	8009883a 	mov	r4,r16
   1c2bc:	000d1340 	call	d134 <__umodsi3>
   1c2c0:	a80b883a 	mov	r5,r21
   1c2c4:	8009883a 	mov	r4,r16
   1c2c8:	1027883a 	mov	r19,r2
   1c2cc:	000d0d00 	call	d0d0 <__udivsi3>
   1c2d0:	a009883a 	mov	r4,r20
   1c2d4:	100b883a 	mov	r5,r2
   1c2d8:	9826943a 	slli	r19,r19,16
   1c2dc:	1039883a 	mov	fp,r2
   1c2e0:	000d18c0 	call	d18c <__mulsi3>
   1c2e4:	b13fffcc 	andi	r4,r22,65535
   1c2e8:	24c8b03a 	or	r4,r4,r19
   1c2ec:	2080062e 	bgeu	r4,r2,1c308 <__udivdi3+0x550>
   1c2f0:	2449883a 	add	r4,r4,r17
   1c2f4:	e0ffffc4 	addi	r3,fp,-1
   1c2f8:	24402436 	bltu	r4,r17,1c38c <__udivdi3+0x5d4>
   1c2fc:	2080232e 	bgeu	r4,r2,1c38c <__udivdi3+0x5d4>
   1c300:	e73fff84 	addi	fp,fp,-2
   1c304:	2449883a 	add	r4,r4,r17
   1c308:	b82e943a 	slli	r23,r23,16
   1c30c:	20a1c83a 	sub	r16,r4,r2
   1c310:	bf06b03a 	or	r3,r23,fp
   1c314:	003f2806 	br	1bfb8 <__alt_data_end+0xfc01bfb8>
   1c318:	2021883a 	mov	r16,r4
   1c31c:	003f5306 	br	1c06c <__alt_data_end+0xfc01c06c>
   1c320:	1821883a 	mov	r16,r3
   1c324:	003ef406 	br	1bef8 <__alt_data_end+0xfc01bef8>
   1c328:	1806943a 	slli	r3,r3,16
   1c32c:	9de6983a 	sll	r19,r19,r23
   1c330:	e73fffcc 	andi	fp,fp,65535
   1c334:	1f07883a 	add	r3,r3,fp
   1c338:	98ffbd2e 	bgeu	r19,r3,1c230 <__alt_data_end+0xfc01c230>
   1c33c:	90bfffc4 	addi	r2,r18,-1
   1c340:	0007883a 	mov	r3,zero
   1c344:	003f4e06 	br	1c080 <__alt_data_end+0xfc01c080>
   1c348:	00800604 	movi	r2,24
   1c34c:	003ef506 	br	1bf24 <__alt_data_end+0xfc01bf24>
   1c350:	00800604 	movi	r2,24
   1c354:	003f0b06 	br	1bf84 <__alt_data_end+0xfc01bf84>
   1c358:	00800604 	movi	r2,24
   1c35c:	003ead06 	br	1be14 <__alt_data_end+0xfc01be14>
   1c360:	0007883a 	mov	r3,zero
   1c364:	00800044 	movi	r2,1
   1c368:	003f4506 	br	1c080 <__alt_data_end+0xfc01c080>
   1c36c:	80bf8e2e 	bgeu	r16,r2,1c1a8 <__alt_data_end+0xfc01c1a8>
   1c370:	8c7fff84 	addi	r17,r17,-2
   1c374:	8721883a 	add	r16,r16,fp
   1c378:	003f8c06 	br	1c1ac <__alt_data_end+0xfc01c1ac>
   1c37c:	18bf762e 	bgeu	r3,r2,1c158 <__alt_data_end+0xfc01c158>
   1c380:	ad7fff84 	addi	r21,r21,-2
   1c384:	1f07883a 	add	r3,r3,fp
   1c388:	003f7406 	br	1c15c <__alt_data_end+0xfc01c15c>
   1c38c:	1839883a 	mov	fp,r3
   1c390:	003fdd06 	br	1c308 <__alt_data_end+0xfc01c308>
   1c394:	182f883a 	mov	r23,r3
   1c398:	003fc506 	br	1c2b0 <__alt_data_end+0xfc01c2b0>
   1c39c:	b5bfff84 	addi	r22,r22,-2
   1c3a0:	3c4f883a 	add	r7,r7,r17
   1c3a4:	003f1a06 	br	1c010 <__alt_data_end+0xfc01c010>
   1c3a8:	b5bfff84 	addi	r22,r22,-2
   1c3ac:	1c47883a 	add	r3,r3,r17
   1c3b0:	003ebc06 	br	1bea4 <__alt_data_end+0xfc01bea4>

0001c3b4 <__umoddi3>:
   1c3b4:	defff304 	addi	sp,sp,-52
   1c3b8:	df000b15 	stw	fp,44(sp)
   1c3bc:	dc400415 	stw	r17,16(sp)
   1c3c0:	dc000315 	stw	r16,12(sp)
   1c3c4:	dfc00c15 	stw	ra,48(sp)
   1c3c8:	ddc00a15 	stw	r23,40(sp)
   1c3cc:	dd800915 	stw	r22,36(sp)
   1c3d0:	dd400815 	stw	r21,32(sp)
   1c3d4:	dd000715 	stw	r20,28(sp)
   1c3d8:	dcc00615 	stw	r19,24(sp)
   1c3dc:	dc800515 	stw	r18,20(sp)
   1c3e0:	2021883a 	mov	r16,r4
   1c3e4:	2823883a 	mov	r17,r5
   1c3e8:	2839883a 	mov	fp,r5
   1c3ec:	3800401e 	bne	r7,zero,1c4f0 <__umoddi3+0x13c>
   1c3f0:	3027883a 	mov	r19,r6
   1c3f4:	2029883a 	mov	r20,r4
   1c3f8:	2980552e 	bgeu	r5,r6,1c550 <__umoddi3+0x19c>
   1c3fc:	00bfffd4 	movui	r2,65535
   1c400:	1180a236 	bltu	r2,r6,1c68c <__umoddi3+0x2d8>
   1c404:	01003fc4 	movi	r4,255
   1c408:	2189803a 	cmpltu	r4,r4,r6
   1c40c:	200890fa 	slli	r4,r4,3
   1c410:	3104d83a 	srl	r2,r6,r4
   1c414:	00c000f4 	movhi	r3,3
   1c418:	18eb0604 	addi	r3,r3,-21480
   1c41c:	1885883a 	add	r2,r3,r2
   1c420:	10c00003 	ldbu	r3,0(r2)
   1c424:	00800804 	movi	r2,32
   1c428:	1909883a 	add	r4,r3,r4
   1c42c:	1125c83a 	sub	r18,r2,r4
   1c430:	90000526 	beq	r18,zero,1c448 <__umoddi3+0x94>
   1c434:	8ca2983a 	sll	r17,r17,r18
   1c438:	8108d83a 	srl	r4,r16,r4
   1c43c:	34a6983a 	sll	r19,r6,r18
   1c440:	84a8983a 	sll	r20,r16,r18
   1c444:	2478b03a 	or	fp,r4,r17
   1c448:	982cd43a 	srli	r22,r19,16
   1c44c:	e009883a 	mov	r4,fp
   1c450:	9dffffcc 	andi	r23,r19,65535
   1c454:	b00b883a 	mov	r5,r22
   1c458:	000d1340 	call	d134 <__umodsi3>
   1c45c:	b00b883a 	mov	r5,r22
   1c460:	e009883a 	mov	r4,fp
   1c464:	102b883a 	mov	r21,r2
   1c468:	000d0d00 	call	d0d0 <__udivsi3>
   1c46c:	100b883a 	mov	r5,r2
   1c470:	b809883a 	mov	r4,r23
   1c474:	000d18c0 	call	d18c <__mulsi3>
   1c478:	a82a943a 	slli	r21,r21,16
   1c47c:	a006d43a 	srli	r3,r20,16
   1c480:	1d46b03a 	or	r3,r3,r21
   1c484:	1880032e 	bgeu	r3,r2,1c494 <__umoddi3+0xe0>
   1c488:	1cc7883a 	add	r3,r3,r19
   1c48c:	1cc00136 	bltu	r3,r19,1c494 <__umoddi3+0xe0>
   1c490:	18813136 	bltu	r3,r2,1c958 <__umoddi3+0x5a4>
   1c494:	18a1c83a 	sub	r16,r3,r2
   1c498:	b00b883a 	mov	r5,r22
   1c49c:	8009883a 	mov	r4,r16
   1c4a0:	000d1340 	call	d134 <__umodsi3>
   1c4a4:	b00b883a 	mov	r5,r22
   1c4a8:	8009883a 	mov	r4,r16
   1c4ac:	1023883a 	mov	r17,r2
   1c4b0:	000d0d00 	call	d0d0 <__udivsi3>
   1c4b4:	100b883a 	mov	r5,r2
   1c4b8:	b809883a 	mov	r4,r23
   1c4bc:	8822943a 	slli	r17,r17,16
   1c4c0:	000d18c0 	call	d18c <__mulsi3>
   1c4c4:	a0ffffcc 	andi	r3,r20,65535
   1c4c8:	1c46b03a 	or	r3,r3,r17
   1c4cc:	1880042e 	bgeu	r3,r2,1c4e0 <__umoddi3+0x12c>
   1c4d0:	1cc7883a 	add	r3,r3,r19
   1c4d4:	1cc00236 	bltu	r3,r19,1c4e0 <__umoddi3+0x12c>
   1c4d8:	1880012e 	bgeu	r3,r2,1c4e0 <__umoddi3+0x12c>
   1c4dc:	1cc7883a 	add	r3,r3,r19
   1c4e0:	1885c83a 	sub	r2,r3,r2
   1c4e4:	1484d83a 	srl	r2,r2,r18
   1c4e8:	0007883a 	mov	r3,zero
   1c4ec:	00005306 	br	1c63c <__umoddi3+0x288>
   1c4f0:	29c05036 	bltu	r5,r7,1c634 <__umoddi3+0x280>
   1c4f4:	00bfffd4 	movui	r2,65535
   1c4f8:	11c05c2e 	bgeu	r2,r7,1c66c <__umoddi3+0x2b8>
   1c4fc:	00804034 	movhi	r2,256
   1c500:	10bfffc4 	addi	r2,r2,-1
   1c504:	11c10636 	bltu	r2,r7,1c920 <__umoddi3+0x56c>
   1c508:	01000404 	movi	r4,16
   1c50c:	3904d83a 	srl	r2,r7,r4
   1c510:	00c000f4 	movhi	r3,3
   1c514:	18eb0604 	addi	r3,r3,-21480
   1c518:	1885883a 	add	r2,r3,r2
   1c51c:	14c00003 	ldbu	r19,0(r2)
   1c520:	00c00804 	movi	r3,32
   1c524:	9927883a 	add	r19,r19,r4
   1c528:	1ce9c83a 	sub	r20,r3,r19
   1c52c:	a0005c1e 	bne	r20,zero,1c6a0 <__umoddi3+0x2ec>
   1c530:	3c400136 	bltu	r7,r17,1c538 <__umoddi3+0x184>
   1c534:	81810a36 	bltu	r16,r6,1c960 <__umoddi3+0x5ac>
   1c538:	8185c83a 	sub	r2,r16,r6
   1c53c:	89e3c83a 	sub	r17,r17,r7
   1c540:	8089803a 	cmpltu	r4,r16,r2
   1c544:	8939c83a 	sub	fp,r17,r4
   1c548:	e007883a 	mov	r3,fp
   1c54c:	00003b06 	br	1c63c <__umoddi3+0x288>
   1c550:	3000041e 	bne	r6,zero,1c564 <__umoddi3+0x1b0>
   1c554:	000b883a 	mov	r5,zero
   1c558:	01000044 	movi	r4,1
   1c55c:	000d0d00 	call	d0d0 <__udivsi3>
   1c560:	1027883a 	mov	r19,r2
   1c564:	00bfffd4 	movui	r2,65535
   1c568:	14c0442e 	bgeu	r2,r19,1c67c <__umoddi3+0x2c8>
   1c56c:	00804034 	movhi	r2,256
   1c570:	10bfffc4 	addi	r2,r2,-1
   1c574:	14c0ec36 	bltu	r2,r19,1c928 <__umoddi3+0x574>
   1c578:	00800404 	movi	r2,16
   1c57c:	9886d83a 	srl	r3,r19,r2
   1c580:	010000f4 	movhi	r4,3
   1c584:	212b0604 	addi	r4,r4,-21480
   1c588:	20c7883a 	add	r3,r4,r3
   1c58c:	18c00003 	ldbu	r3,0(r3)
   1c590:	1887883a 	add	r3,r3,r2
   1c594:	00800804 	movi	r2,32
   1c598:	10e5c83a 	sub	r18,r2,r3
   1c59c:	9000ab1e 	bne	r18,zero,1c84c <__umoddi3+0x498>
   1c5a0:	982cd43a 	srli	r22,r19,16
   1c5a4:	8ce3c83a 	sub	r17,r17,r19
   1c5a8:	9dffffcc 	andi	r23,r19,65535
   1c5ac:	b00b883a 	mov	r5,r22
   1c5b0:	8809883a 	mov	r4,r17
   1c5b4:	000d1340 	call	d134 <__umodsi3>
   1c5b8:	b00b883a 	mov	r5,r22
   1c5bc:	8809883a 	mov	r4,r17
   1c5c0:	102b883a 	mov	r21,r2
   1c5c4:	000d0d00 	call	d0d0 <__udivsi3>
   1c5c8:	b80b883a 	mov	r5,r23
   1c5cc:	1009883a 	mov	r4,r2
   1c5d0:	000d18c0 	call	d18c <__mulsi3>
   1c5d4:	a82a943a 	slli	r21,r21,16
   1c5d8:	a006d43a 	srli	r3,r20,16
   1c5dc:	1d46b03a 	or	r3,r3,r21
   1c5e0:	1880042e 	bgeu	r3,r2,1c5f4 <__umoddi3+0x240>
   1c5e4:	1cc7883a 	add	r3,r3,r19
   1c5e8:	1cc00236 	bltu	r3,r19,1c5f4 <__umoddi3+0x240>
   1c5ec:	1880012e 	bgeu	r3,r2,1c5f4 <__umoddi3+0x240>
   1c5f0:	1cc7883a 	add	r3,r3,r19
   1c5f4:	18a1c83a 	sub	r16,r3,r2
   1c5f8:	b00b883a 	mov	r5,r22
   1c5fc:	8009883a 	mov	r4,r16
   1c600:	000d1340 	call	d134 <__umodsi3>
   1c604:	1023883a 	mov	r17,r2
   1c608:	b00b883a 	mov	r5,r22
   1c60c:	8009883a 	mov	r4,r16
   1c610:	000d0d00 	call	d0d0 <__udivsi3>
   1c614:	8822943a 	slli	r17,r17,16
   1c618:	b80b883a 	mov	r5,r23
   1c61c:	1009883a 	mov	r4,r2
   1c620:	000d18c0 	call	d18c <__mulsi3>
   1c624:	a53fffcc 	andi	r20,r20,65535
   1c628:	a446b03a 	or	r3,r20,r17
   1c62c:	18bfac2e 	bgeu	r3,r2,1c4e0 <__alt_data_end+0xfc01c4e0>
   1c630:	003fa706 	br	1c4d0 <__alt_data_end+0xfc01c4d0>
   1c634:	2005883a 	mov	r2,r4
   1c638:	2807883a 	mov	r3,r5
   1c63c:	dfc00c17 	ldw	ra,48(sp)
   1c640:	df000b17 	ldw	fp,44(sp)
   1c644:	ddc00a17 	ldw	r23,40(sp)
   1c648:	dd800917 	ldw	r22,36(sp)
   1c64c:	dd400817 	ldw	r21,32(sp)
   1c650:	dd000717 	ldw	r20,28(sp)
   1c654:	dcc00617 	ldw	r19,24(sp)
   1c658:	dc800517 	ldw	r18,20(sp)
   1c65c:	dc400417 	ldw	r17,16(sp)
   1c660:	dc000317 	ldw	r16,12(sp)
   1c664:	dec00d04 	addi	sp,sp,52
   1c668:	f800283a 	ret
   1c66c:	04c03fc4 	movi	r19,255
   1c670:	99c9803a 	cmpltu	r4,r19,r7
   1c674:	200890fa 	slli	r4,r4,3
   1c678:	003fa406 	br	1c50c <__alt_data_end+0xfc01c50c>
   1c67c:	00803fc4 	movi	r2,255
   1c680:	14c5803a 	cmpltu	r2,r2,r19
   1c684:	100490fa 	slli	r2,r2,3
   1c688:	003fbc06 	br	1c57c <__alt_data_end+0xfc01c57c>
   1c68c:	00804034 	movhi	r2,256
   1c690:	10bfffc4 	addi	r2,r2,-1
   1c694:	1180a636 	bltu	r2,r6,1c930 <__umoddi3+0x57c>
   1c698:	01000404 	movi	r4,16
   1c69c:	003f5c06 	br	1c410 <__alt_data_end+0xfc01c410>
   1c6a0:	3d0e983a 	sll	r7,r7,r20
   1c6a4:	34ead83a 	srl	r21,r6,r19
   1c6a8:	8cc6d83a 	srl	r3,r17,r19
   1c6ac:	8d10983a 	sll	r8,r17,r20
   1c6b0:	3d6ab03a 	or	r21,r7,r21
   1c6b4:	a82cd43a 	srli	r22,r21,16
   1c6b8:	84e2d83a 	srl	r17,r16,r19
   1c6bc:	1809883a 	mov	r4,r3
   1c6c0:	b00b883a 	mov	r5,r22
   1c6c4:	8a22b03a 	or	r17,r17,r8
   1c6c8:	3524983a 	sll	r18,r6,r20
   1c6cc:	dc400015 	stw	r17,0(sp)
   1c6d0:	d8c00115 	stw	r3,4(sp)
   1c6d4:	000d1340 	call	d134 <__umodsi3>
   1c6d8:	d8c00117 	ldw	r3,4(sp)
   1c6dc:	b00b883a 	mov	r5,r22
   1c6e0:	1039883a 	mov	fp,r2
   1c6e4:	1809883a 	mov	r4,r3
   1c6e8:	000d0d00 	call	d0d0 <__udivsi3>
   1c6ec:	adffffcc 	andi	r23,r21,65535
   1c6f0:	100b883a 	mov	r5,r2
   1c6f4:	b809883a 	mov	r4,r23
   1c6f8:	1023883a 	mov	r17,r2
   1c6fc:	000d18c0 	call	d18c <__mulsi3>
   1c700:	d9400017 	ldw	r5,0(sp)
   1c704:	e008943a 	slli	r4,fp,16
   1c708:	8520983a 	sll	r16,r16,r20
   1c70c:	2806d43a 	srli	r3,r5,16
   1c710:	1906b03a 	or	r3,r3,r4
   1c714:	1880042e 	bgeu	r3,r2,1c728 <__umoddi3+0x374>
   1c718:	1d47883a 	add	r3,r3,r21
   1c71c:	893fffc4 	addi	r4,r17,-1
   1c720:	1d40892e 	bgeu	r3,r21,1c948 <__umoddi3+0x594>
   1c724:	2023883a 	mov	r17,r4
   1c728:	18b9c83a 	sub	fp,r3,r2
   1c72c:	b00b883a 	mov	r5,r22
   1c730:	e009883a 	mov	r4,fp
   1c734:	000d1340 	call	d134 <__umodsi3>
   1c738:	b00b883a 	mov	r5,r22
   1c73c:	e009883a 	mov	r4,fp
   1c740:	d8800215 	stw	r2,8(sp)
   1c744:	000d0d00 	call	d0d0 <__udivsi3>
   1c748:	100b883a 	mov	r5,r2
   1c74c:	b809883a 	mov	r4,r23
   1c750:	102d883a 	mov	r22,r2
   1c754:	000d18c0 	call	d18c <__mulsi3>
   1c758:	d9800217 	ldw	r6,8(sp)
   1c75c:	d8c00017 	ldw	r3,0(sp)
   1c760:	300c943a 	slli	r6,r6,16
   1c764:	1a3fffcc 	andi	r8,r3,65535
   1c768:	4190b03a 	or	r8,r8,r6
   1c76c:	4080042e 	bgeu	r8,r2,1c780 <__umoddi3+0x3cc>
   1c770:	4551883a 	add	r8,r8,r21
   1c774:	b0ffffc4 	addi	r3,r22,-1
   1c778:	45406f2e 	bgeu	r8,r21,1c938 <__umoddi3+0x584>
   1c77c:	182d883a 	mov	r22,r3
   1c780:	880e943a 	slli	r7,r17,16
   1c784:	9006d43a 	srli	r3,r18,16
   1c788:	91bfffcc 	andi	r6,r18,65535
   1c78c:	3dacb03a 	or	r22,r7,r22
   1c790:	b02ed43a 	srli	r23,r22,16
   1c794:	b5bfffcc 	andi	r22,r22,65535
   1c798:	300b883a 	mov	r5,r6
   1c79c:	b009883a 	mov	r4,r22
   1c7a0:	40a3c83a 	sub	r17,r8,r2
   1c7a4:	d8c00115 	stw	r3,4(sp)
   1c7a8:	d9800215 	stw	r6,8(sp)
   1c7ac:	000d18c0 	call	d18c <__mulsi3>
   1c7b0:	d9800217 	ldw	r6,8(sp)
   1c7b4:	b809883a 	mov	r4,r23
   1c7b8:	1039883a 	mov	fp,r2
   1c7bc:	300b883a 	mov	r5,r6
   1c7c0:	000d18c0 	call	d18c <__mulsi3>
   1c7c4:	d8c00117 	ldw	r3,4(sp)
   1c7c8:	b809883a 	mov	r4,r23
   1c7cc:	d8800215 	stw	r2,8(sp)
   1c7d0:	180b883a 	mov	r5,r3
   1c7d4:	000d18c0 	call	d18c <__mulsi3>
   1c7d8:	d8c00117 	ldw	r3,4(sp)
   1c7dc:	b009883a 	mov	r4,r22
   1c7e0:	102f883a 	mov	r23,r2
   1c7e4:	180b883a 	mov	r5,r3
   1c7e8:	000d18c0 	call	d18c <__mulsi3>
   1c7ec:	d9800217 	ldw	r6,8(sp)
   1c7f0:	e006d43a 	srli	r3,fp,16
   1c7f4:	1185883a 	add	r2,r2,r6
   1c7f8:	1885883a 	add	r2,r3,r2
   1c7fc:	1180022e 	bgeu	r2,r6,1c808 <__umoddi3+0x454>
   1c800:	00c00074 	movhi	r3,1
   1c804:	b8ef883a 	add	r23,r23,r3
   1c808:	1006d43a 	srli	r3,r2,16
   1c80c:	1004943a 	slli	r2,r2,16
   1c810:	e73fffcc 	andi	fp,fp,65535
   1c814:	1dc7883a 	add	r3,r3,r23
   1c818:	1739883a 	add	fp,r2,fp
   1c81c:	88c03a36 	bltu	r17,r3,1c908 <__umoddi3+0x554>
   1c820:	88c05126 	beq	r17,r3,1c968 <__umoddi3+0x5b4>
   1c824:	88c9c83a 	sub	r4,r17,r3
   1c828:	e00f883a 	mov	r7,fp
   1c82c:	81cfc83a 	sub	r7,r16,r7
   1c830:	81c7803a 	cmpltu	r3,r16,r7
   1c834:	20c7c83a 	sub	r3,r4,r3
   1c838:	1cc4983a 	sll	r2,r3,r19
   1c83c:	3d0ed83a 	srl	r7,r7,r20
   1c840:	1d06d83a 	srl	r3,r3,r20
   1c844:	11c4b03a 	or	r2,r2,r7
   1c848:	003f7c06 	br	1c63c <__alt_data_end+0xfc01c63c>
   1c84c:	9ca6983a 	sll	r19,r19,r18
   1c850:	88f8d83a 	srl	fp,r17,r3
   1c854:	80c4d83a 	srl	r2,r16,r3
   1c858:	982cd43a 	srli	r22,r19,16
   1c85c:	8ca2983a 	sll	r17,r17,r18
   1c860:	e009883a 	mov	r4,fp
   1c864:	b00b883a 	mov	r5,r22
   1c868:	146ab03a 	or	r21,r2,r17
   1c86c:	000d1340 	call	d134 <__umodsi3>
   1c870:	b00b883a 	mov	r5,r22
   1c874:	e009883a 	mov	r4,fp
   1c878:	1029883a 	mov	r20,r2
   1c87c:	9dffffcc 	andi	r23,r19,65535
   1c880:	000d0d00 	call	d0d0 <__udivsi3>
   1c884:	b809883a 	mov	r4,r23
   1c888:	100b883a 	mov	r5,r2
   1c88c:	000d18c0 	call	d18c <__mulsi3>
   1c890:	a008943a 	slli	r4,r20,16
   1c894:	a806d43a 	srli	r3,r21,16
   1c898:	84a8983a 	sll	r20,r16,r18
   1c89c:	1906b03a 	or	r3,r3,r4
   1c8a0:	1880042e 	bgeu	r3,r2,1c8b4 <__umoddi3+0x500>
   1c8a4:	1cc7883a 	add	r3,r3,r19
   1c8a8:	1cc00236 	bltu	r3,r19,1c8b4 <__umoddi3+0x500>
   1c8ac:	1880012e 	bgeu	r3,r2,1c8b4 <__umoddi3+0x500>
   1c8b0:	1cc7883a 	add	r3,r3,r19
   1c8b4:	18a3c83a 	sub	r17,r3,r2
   1c8b8:	b00b883a 	mov	r5,r22
   1c8bc:	8809883a 	mov	r4,r17
   1c8c0:	000d1340 	call	d134 <__umodsi3>
   1c8c4:	b00b883a 	mov	r5,r22
   1c8c8:	8809883a 	mov	r4,r17
   1c8cc:	1021883a 	mov	r16,r2
   1c8d0:	000d0d00 	call	d0d0 <__udivsi3>
   1c8d4:	100b883a 	mov	r5,r2
   1c8d8:	b809883a 	mov	r4,r23
   1c8dc:	8020943a 	slli	r16,r16,16
   1c8e0:	000d18c0 	call	d18c <__mulsi3>
   1c8e4:	a8ffffcc 	andi	r3,r21,65535
   1c8e8:	1c06b03a 	or	r3,r3,r16
   1c8ec:	1880042e 	bgeu	r3,r2,1c900 <__umoddi3+0x54c>
   1c8f0:	1cc7883a 	add	r3,r3,r19
   1c8f4:	1cc00236 	bltu	r3,r19,1c900 <__umoddi3+0x54c>
   1c8f8:	1880012e 	bgeu	r3,r2,1c900 <__umoddi3+0x54c>
   1c8fc:	1cc7883a 	add	r3,r3,r19
   1c900:	18a3c83a 	sub	r17,r3,r2
   1c904:	003f2906 	br	1c5ac <__alt_data_end+0xfc01c5ac>
   1c908:	e48fc83a 	sub	r7,fp,r18
   1c90c:	1d49c83a 	sub	r4,r3,r21
   1c910:	e1f9803a 	cmpltu	fp,fp,r7
   1c914:	2739c83a 	sub	fp,r4,fp
   1c918:	8f09c83a 	sub	r4,r17,fp
   1c91c:	003fc306 	br	1c82c <__alt_data_end+0xfc01c82c>
   1c920:	01000604 	movi	r4,24
   1c924:	003ef906 	br	1c50c <__alt_data_end+0xfc01c50c>
   1c928:	00800604 	movi	r2,24
   1c92c:	003f1306 	br	1c57c <__alt_data_end+0xfc01c57c>
   1c930:	01000604 	movi	r4,24
   1c934:	003eb606 	br	1c410 <__alt_data_end+0xfc01c410>
   1c938:	40bf902e 	bgeu	r8,r2,1c77c <__alt_data_end+0xfc01c77c>
   1c93c:	b5bfff84 	addi	r22,r22,-2
   1c940:	4551883a 	add	r8,r8,r21
   1c944:	003f8e06 	br	1c780 <__alt_data_end+0xfc01c780>
   1c948:	18bf762e 	bgeu	r3,r2,1c724 <__alt_data_end+0xfc01c724>
   1c94c:	8c7fff84 	addi	r17,r17,-2
   1c950:	1d47883a 	add	r3,r3,r21
   1c954:	003f7406 	br	1c728 <__alt_data_end+0xfc01c728>
   1c958:	1cc7883a 	add	r3,r3,r19
   1c95c:	003ecd06 	br	1c494 <__alt_data_end+0xfc01c494>
   1c960:	8005883a 	mov	r2,r16
   1c964:	003ef806 	br	1c548 <__alt_data_end+0xfc01c548>
   1c968:	873fe736 	bltu	r16,fp,1c908 <__alt_data_end+0xfc01c908>
   1c96c:	e00f883a 	mov	r7,fp
   1c970:	0009883a 	mov	r4,zero
   1c974:	003fad06 	br	1c82c <__alt_data_end+0xfc01c82c>

0001c978 <__adddf3>:
   1c978:	02c00434 	movhi	r11,16
   1c97c:	5affffc4 	addi	r11,r11,-1
   1c980:	2806d7fa 	srli	r3,r5,31
   1c984:	2ad4703a 	and	r10,r5,r11
   1c988:	3ad2703a 	and	r9,r7,r11
   1c98c:	3804d53a 	srli	r2,r7,20
   1c990:	3018d77a 	srli	r12,r6,29
   1c994:	280ad53a 	srli	r5,r5,20
   1c998:	501490fa 	slli	r10,r10,3
   1c99c:	2010d77a 	srli	r8,r4,29
   1c9a0:	481290fa 	slli	r9,r9,3
   1c9a4:	380ed7fa 	srli	r7,r7,31
   1c9a8:	defffb04 	addi	sp,sp,-20
   1c9ac:	dc800215 	stw	r18,8(sp)
   1c9b0:	dc400115 	stw	r17,4(sp)
   1c9b4:	dc000015 	stw	r16,0(sp)
   1c9b8:	dfc00415 	stw	ra,16(sp)
   1c9bc:	dcc00315 	stw	r19,12(sp)
   1c9c0:	1c803fcc 	andi	r18,r3,255
   1c9c4:	2c01ffcc 	andi	r16,r5,2047
   1c9c8:	5210b03a 	or	r8,r10,r8
   1c9cc:	202290fa 	slli	r17,r4,3
   1c9d0:	1081ffcc 	andi	r2,r2,2047
   1c9d4:	4b12b03a 	or	r9,r9,r12
   1c9d8:	300c90fa 	slli	r6,r6,3
   1c9dc:	91c07526 	beq	r18,r7,1cbb4 <__adddf3+0x23c>
   1c9e0:	8087c83a 	sub	r3,r16,r2
   1c9e4:	00c0ab0e 	bge	zero,r3,1cc94 <__adddf3+0x31c>
   1c9e8:	10002a1e 	bne	r2,zero,1ca94 <__adddf3+0x11c>
   1c9ec:	4984b03a 	or	r2,r9,r6
   1c9f0:	1000961e 	bne	r2,zero,1cc4c <__adddf3+0x2d4>
   1c9f4:	888001cc 	andi	r2,r17,7
   1c9f8:	10000726 	beq	r2,zero,1ca18 <__adddf3+0xa0>
   1c9fc:	888003cc 	andi	r2,r17,15
   1ca00:	00c00104 	movi	r3,4
   1ca04:	10c00426 	beq	r2,r3,1ca18 <__adddf3+0xa0>
   1ca08:	88c7883a 	add	r3,r17,r3
   1ca0c:	1c63803a 	cmpltu	r17,r3,r17
   1ca10:	4451883a 	add	r8,r8,r17
   1ca14:	1823883a 	mov	r17,r3
   1ca18:	4080202c 	andhi	r2,r8,128
   1ca1c:	10005926 	beq	r2,zero,1cb84 <__adddf3+0x20c>
   1ca20:	84000044 	addi	r16,r16,1
   1ca24:	0081ffc4 	movi	r2,2047
   1ca28:	8080ba26 	beq	r16,r2,1cd14 <__adddf3+0x39c>
   1ca2c:	00bfe034 	movhi	r2,65408
   1ca30:	10bfffc4 	addi	r2,r2,-1
   1ca34:	4090703a 	and	r8,r8,r2
   1ca38:	4004977a 	slli	r2,r8,29
   1ca3c:	4010927a 	slli	r8,r8,9
   1ca40:	8822d0fa 	srli	r17,r17,3
   1ca44:	8401ffcc 	andi	r16,r16,2047
   1ca48:	4010d33a 	srli	r8,r8,12
   1ca4c:	9007883a 	mov	r3,r18
   1ca50:	1444b03a 	or	r2,r2,r17
   1ca54:	8401ffcc 	andi	r16,r16,2047
   1ca58:	8020953a 	slli	r16,r16,20
   1ca5c:	18c03fcc 	andi	r3,r3,255
   1ca60:	01000434 	movhi	r4,16
   1ca64:	213fffc4 	addi	r4,r4,-1
   1ca68:	180697fa 	slli	r3,r3,31
   1ca6c:	4110703a 	and	r8,r8,r4
   1ca70:	4410b03a 	or	r8,r8,r16
   1ca74:	40c6b03a 	or	r3,r8,r3
   1ca78:	dfc00417 	ldw	ra,16(sp)
   1ca7c:	dcc00317 	ldw	r19,12(sp)
   1ca80:	dc800217 	ldw	r18,8(sp)
   1ca84:	dc400117 	ldw	r17,4(sp)
   1ca88:	dc000017 	ldw	r16,0(sp)
   1ca8c:	dec00504 	addi	sp,sp,20
   1ca90:	f800283a 	ret
   1ca94:	0081ffc4 	movi	r2,2047
   1ca98:	80bfd626 	beq	r16,r2,1c9f4 <__alt_data_end+0xfc01c9f4>
   1ca9c:	4a402034 	orhi	r9,r9,128
   1caa0:	00800e04 	movi	r2,56
   1caa4:	10c09f16 	blt	r2,r3,1cd24 <__adddf3+0x3ac>
   1caa8:	008007c4 	movi	r2,31
   1caac:	10c0c216 	blt	r2,r3,1cdb8 <__adddf3+0x440>
   1cab0:	00800804 	movi	r2,32
   1cab4:	10c5c83a 	sub	r2,r2,r3
   1cab8:	488a983a 	sll	r5,r9,r2
   1cabc:	30c8d83a 	srl	r4,r6,r3
   1cac0:	3084983a 	sll	r2,r6,r2
   1cac4:	48c6d83a 	srl	r3,r9,r3
   1cac8:	290cb03a 	or	r6,r5,r4
   1cacc:	1004c03a 	cmpne	r2,r2,zero
   1cad0:	308cb03a 	or	r6,r6,r2
   1cad4:	898dc83a 	sub	r6,r17,r6
   1cad8:	89a3803a 	cmpltu	r17,r17,r6
   1cadc:	40d1c83a 	sub	r8,r8,r3
   1cae0:	4451c83a 	sub	r8,r8,r17
   1cae4:	3023883a 	mov	r17,r6
   1cae8:	4080202c 	andhi	r2,r8,128
   1caec:	10002326 	beq	r2,zero,1cb7c <__adddf3+0x204>
   1caf0:	04c02034 	movhi	r19,128
   1caf4:	9cffffc4 	addi	r19,r19,-1
   1caf8:	44e6703a 	and	r19,r8,r19
   1cafc:	98007626 	beq	r19,zero,1ccd8 <__adddf3+0x360>
   1cb00:	9809883a 	mov	r4,r19
   1cb04:	000e6440 	call	e644 <__clzsi2>
   1cb08:	10fffe04 	addi	r3,r2,-8
   1cb0c:	010007c4 	movi	r4,31
   1cb10:	20c07716 	blt	r4,r3,1ccf0 <__adddf3+0x378>
   1cb14:	00800804 	movi	r2,32
   1cb18:	10c5c83a 	sub	r2,r2,r3
   1cb1c:	8884d83a 	srl	r2,r17,r2
   1cb20:	98d0983a 	sll	r8,r19,r3
   1cb24:	88e2983a 	sll	r17,r17,r3
   1cb28:	1204b03a 	or	r2,r2,r8
   1cb2c:	1c007416 	blt	r3,r16,1cd00 <__adddf3+0x388>
   1cb30:	1c21c83a 	sub	r16,r3,r16
   1cb34:	82000044 	addi	r8,r16,1
   1cb38:	00c007c4 	movi	r3,31
   1cb3c:	1a009116 	blt	r3,r8,1cd84 <__adddf3+0x40c>
   1cb40:	00c00804 	movi	r3,32
   1cb44:	1a07c83a 	sub	r3,r3,r8
   1cb48:	8a08d83a 	srl	r4,r17,r8
   1cb4c:	88e2983a 	sll	r17,r17,r3
   1cb50:	10c6983a 	sll	r3,r2,r3
   1cb54:	1210d83a 	srl	r8,r2,r8
   1cb58:	8804c03a 	cmpne	r2,r17,zero
   1cb5c:	1906b03a 	or	r3,r3,r4
   1cb60:	18a2b03a 	or	r17,r3,r2
   1cb64:	0021883a 	mov	r16,zero
   1cb68:	003fa206 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cb6c:	1890b03a 	or	r8,r3,r2
   1cb70:	40017d26 	beq	r8,zero,1d168 <__adddf3+0x7f0>
   1cb74:	1011883a 	mov	r8,r2
   1cb78:	1823883a 	mov	r17,r3
   1cb7c:	888001cc 	andi	r2,r17,7
   1cb80:	103f9e1e 	bne	r2,zero,1c9fc <__alt_data_end+0xfc01c9fc>
   1cb84:	4004977a 	slli	r2,r8,29
   1cb88:	8822d0fa 	srli	r17,r17,3
   1cb8c:	4010d0fa 	srli	r8,r8,3
   1cb90:	9007883a 	mov	r3,r18
   1cb94:	1444b03a 	or	r2,r2,r17
   1cb98:	0101ffc4 	movi	r4,2047
   1cb9c:	81002426 	beq	r16,r4,1cc30 <__adddf3+0x2b8>
   1cba0:	8120703a 	and	r16,r16,r4
   1cba4:	01000434 	movhi	r4,16
   1cba8:	213fffc4 	addi	r4,r4,-1
   1cbac:	4110703a 	and	r8,r8,r4
   1cbb0:	003fa806 	br	1ca54 <__alt_data_end+0xfc01ca54>
   1cbb4:	8089c83a 	sub	r4,r16,r2
   1cbb8:	01005e0e 	bge	zero,r4,1cd34 <__adddf3+0x3bc>
   1cbbc:	10002b26 	beq	r2,zero,1cc6c <__adddf3+0x2f4>
   1cbc0:	0081ffc4 	movi	r2,2047
   1cbc4:	80bf8b26 	beq	r16,r2,1c9f4 <__alt_data_end+0xfc01c9f4>
   1cbc8:	4a402034 	orhi	r9,r9,128
   1cbcc:	00800e04 	movi	r2,56
   1cbd0:	1100a40e 	bge	r2,r4,1ce64 <__adddf3+0x4ec>
   1cbd4:	498cb03a 	or	r6,r9,r6
   1cbd8:	300ac03a 	cmpne	r5,r6,zero
   1cbdc:	0013883a 	mov	r9,zero
   1cbe0:	2c4b883a 	add	r5,r5,r17
   1cbe4:	2c63803a 	cmpltu	r17,r5,r17
   1cbe8:	4a11883a 	add	r8,r9,r8
   1cbec:	8a11883a 	add	r8,r17,r8
   1cbf0:	2823883a 	mov	r17,r5
   1cbf4:	4080202c 	andhi	r2,r8,128
   1cbf8:	103fe026 	beq	r2,zero,1cb7c <__alt_data_end+0xfc01cb7c>
   1cbfc:	84000044 	addi	r16,r16,1
   1cc00:	0081ffc4 	movi	r2,2047
   1cc04:	8080d226 	beq	r16,r2,1cf50 <__adddf3+0x5d8>
   1cc08:	00bfe034 	movhi	r2,65408
   1cc0c:	10bfffc4 	addi	r2,r2,-1
   1cc10:	4090703a 	and	r8,r8,r2
   1cc14:	880ad07a 	srli	r5,r17,1
   1cc18:	400897fa 	slli	r4,r8,31
   1cc1c:	88c0004c 	andi	r3,r17,1
   1cc20:	28e2b03a 	or	r17,r5,r3
   1cc24:	4010d07a 	srli	r8,r8,1
   1cc28:	2462b03a 	or	r17,r4,r17
   1cc2c:	003f7106 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cc30:	4088b03a 	or	r4,r8,r2
   1cc34:	20014526 	beq	r4,zero,1d14c <__adddf3+0x7d4>
   1cc38:	01000434 	movhi	r4,16
   1cc3c:	42000234 	orhi	r8,r8,8
   1cc40:	213fffc4 	addi	r4,r4,-1
   1cc44:	4110703a 	and	r8,r8,r4
   1cc48:	003f8206 	br	1ca54 <__alt_data_end+0xfc01ca54>
   1cc4c:	18ffffc4 	addi	r3,r3,-1
   1cc50:	1800491e 	bne	r3,zero,1cd78 <__adddf3+0x400>
   1cc54:	898bc83a 	sub	r5,r17,r6
   1cc58:	8963803a 	cmpltu	r17,r17,r5
   1cc5c:	4251c83a 	sub	r8,r8,r9
   1cc60:	4451c83a 	sub	r8,r8,r17
   1cc64:	2823883a 	mov	r17,r5
   1cc68:	003f9f06 	br	1cae8 <__alt_data_end+0xfc01cae8>
   1cc6c:	4984b03a 	or	r2,r9,r6
   1cc70:	103f6026 	beq	r2,zero,1c9f4 <__alt_data_end+0xfc01c9f4>
   1cc74:	213fffc4 	addi	r4,r4,-1
   1cc78:	2000931e 	bne	r4,zero,1cec8 <__adddf3+0x550>
   1cc7c:	898d883a 	add	r6,r17,r6
   1cc80:	3463803a 	cmpltu	r17,r6,r17
   1cc84:	4251883a 	add	r8,r8,r9
   1cc88:	8a11883a 	add	r8,r17,r8
   1cc8c:	3023883a 	mov	r17,r6
   1cc90:	003fd806 	br	1cbf4 <__alt_data_end+0xfc01cbf4>
   1cc94:	1800541e 	bne	r3,zero,1cde8 <__adddf3+0x470>
   1cc98:	80800044 	addi	r2,r16,1
   1cc9c:	1081ffcc 	andi	r2,r2,2047
   1cca0:	00c00044 	movi	r3,1
   1cca4:	1880a00e 	bge	r3,r2,1cf28 <__adddf3+0x5b0>
   1cca8:	8989c83a 	sub	r4,r17,r6
   1ccac:	8905803a 	cmpltu	r2,r17,r4
   1ccb0:	4267c83a 	sub	r19,r8,r9
   1ccb4:	98a7c83a 	sub	r19,r19,r2
   1ccb8:	9880202c 	andhi	r2,r19,128
   1ccbc:	10006326 	beq	r2,zero,1ce4c <__adddf3+0x4d4>
   1ccc0:	3463c83a 	sub	r17,r6,r17
   1ccc4:	4a07c83a 	sub	r3,r9,r8
   1ccc8:	344d803a 	cmpltu	r6,r6,r17
   1cccc:	19a7c83a 	sub	r19,r3,r6
   1ccd0:	3825883a 	mov	r18,r7
   1ccd4:	983f8a1e 	bne	r19,zero,1cb00 <__alt_data_end+0xfc01cb00>
   1ccd8:	8809883a 	mov	r4,r17
   1ccdc:	000e6440 	call	e644 <__clzsi2>
   1cce0:	10800804 	addi	r2,r2,32
   1cce4:	10fffe04 	addi	r3,r2,-8
   1cce8:	010007c4 	movi	r4,31
   1ccec:	20ff890e 	bge	r4,r3,1cb14 <__alt_data_end+0xfc01cb14>
   1ccf0:	10bff604 	addi	r2,r2,-40
   1ccf4:	8884983a 	sll	r2,r17,r2
   1ccf8:	0023883a 	mov	r17,zero
   1ccfc:	1c3f8c0e 	bge	r3,r16,1cb30 <__alt_data_end+0xfc01cb30>
   1cd00:	023fe034 	movhi	r8,65408
   1cd04:	423fffc4 	addi	r8,r8,-1
   1cd08:	80e1c83a 	sub	r16,r16,r3
   1cd0c:	1210703a 	and	r8,r2,r8
   1cd10:	003f3806 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cd14:	9007883a 	mov	r3,r18
   1cd18:	0011883a 	mov	r8,zero
   1cd1c:	0005883a 	mov	r2,zero
   1cd20:	003f4c06 	br	1ca54 <__alt_data_end+0xfc01ca54>
   1cd24:	498cb03a 	or	r6,r9,r6
   1cd28:	300cc03a 	cmpne	r6,r6,zero
   1cd2c:	0007883a 	mov	r3,zero
   1cd30:	003f6806 	br	1cad4 <__alt_data_end+0xfc01cad4>
   1cd34:	20009c1e 	bne	r4,zero,1cfa8 <__adddf3+0x630>
   1cd38:	80800044 	addi	r2,r16,1
   1cd3c:	1141ffcc 	andi	r5,r2,2047
   1cd40:	01000044 	movi	r4,1
   1cd44:	2140670e 	bge	r4,r5,1cee4 <__adddf3+0x56c>
   1cd48:	0101ffc4 	movi	r4,2047
   1cd4c:	11007f26 	beq	r2,r4,1cf4c <__adddf3+0x5d4>
   1cd50:	898d883a 	add	r6,r17,r6
   1cd54:	4247883a 	add	r3,r8,r9
   1cd58:	3451803a 	cmpltu	r8,r6,r17
   1cd5c:	40d1883a 	add	r8,r8,r3
   1cd60:	402297fa 	slli	r17,r8,31
   1cd64:	300cd07a 	srli	r6,r6,1
   1cd68:	4010d07a 	srli	r8,r8,1
   1cd6c:	1021883a 	mov	r16,r2
   1cd70:	89a2b03a 	or	r17,r17,r6
   1cd74:	003f1f06 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cd78:	0081ffc4 	movi	r2,2047
   1cd7c:	80bf481e 	bne	r16,r2,1caa0 <__alt_data_end+0xfc01caa0>
   1cd80:	003f1c06 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cd84:	843ff844 	addi	r16,r16,-31
   1cd88:	01000804 	movi	r4,32
   1cd8c:	1406d83a 	srl	r3,r2,r16
   1cd90:	41005026 	beq	r8,r4,1ced4 <__adddf3+0x55c>
   1cd94:	01001004 	movi	r4,64
   1cd98:	2211c83a 	sub	r8,r4,r8
   1cd9c:	1204983a 	sll	r2,r2,r8
   1cda0:	88a2b03a 	or	r17,r17,r2
   1cda4:	8822c03a 	cmpne	r17,r17,zero
   1cda8:	1c62b03a 	or	r17,r3,r17
   1cdac:	0011883a 	mov	r8,zero
   1cdb0:	0021883a 	mov	r16,zero
   1cdb4:	003f7106 	br	1cb7c <__alt_data_end+0xfc01cb7c>
   1cdb8:	193ff804 	addi	r4,r3,-32
   1cdbc:	00800804 	movi	r2,32
   1cdc0:	4908d83a 	srl	r4,r9,r4
   1cdc4:	18804526 	beq	r3,r2,1cedc <__adddf3+0x564>
   1cdc8:	00801004 	movi	r2,64
   1cdcc:	10c5c83a 	sub	r2,r2,r3
   1cdd0:	4886983a 	sll	r3,r9,r2
   1cdd4:	198cb03a 	or	r6,r3,r6
   1cdd8:	300cc03a 	cmpne	r6,r6,zero
   1cddc:	218cb03a 	or	r6,r4,r6
   1cde0:	0007883a 	mov	r3,zero
   1cde4:	003f3b06 	br	1cad4 <__alt_data_end+0xfc01cad4>
   1cde8:	80002a26 	beq	r16,zero,1ce94 <__adddf3+0x51c>
   1cdec:	0101ffc4 	movi	r4,2047
   1cdf0:	11006826 	beq	r2,r4,1cf94 <__adddf3+0x61c>
   1cdf4:	00c7c83a 	sub	r3,zero,r3
   1cdf8:	42002034 	orhi	r8,r8,128
   1cdfc:	01000e04 	movi	r4,56
   1ce00:	20c07c16 	blt	r4,r3,1cff4 <__adddf3+0x67c>
   1ce04:	010007c4 	movi	r4,31
   1ce08:	20c0da16 	blt	r4,r3,1d174 <__adddf3+0x7fc>
   1ce0c:	01000804 	movi	r4,32
   1ce10:	20c9c83a 	sub	r4,r4,r3
   1ce14:	4114983a 	sll	r10,r8,r4
   1ce18:	88cad83a 	srl	r5,r17,r3
   1ce1c:	8908983a 	sll	r4,r17,r4
   1ce20:	40c6d83a 	srl	r3,r8,r3
   1ce24:	5162b03a 	or	r17,r10,r5
   1ce28:	2008c03a 	cmpne	r4,r4,zero
   1ce2c:	8922b03a 	or	r17,r17,r4
   1ce30:	3463c83a 	sub	r17,r6,r17
   1ce34:	48c7c83a 	sub	r3,r9,r3
   1ce38:	344d803a 	cmpltu	r6,r6,r17
   1ce3c:	1991c83a 	sub	r8,r3,r6
   1ce40:	1021883a 	mov	r16,r2
   1ce44:	3825883a 	mov	r18,r7
   1ce48:	003f2706 	br	1cae8 <__alt_data_end+0xfc01cae8>
   1ce4c:	24d0b03a 	or	r8,r4,r19
   1ce50:	40001b1e 	bne	r8,zero,1cec0 <__adddf3+0x548>
   1ce54:	0005883a 	mov	r2,zero
   1ce58:	0007883a 	mov	r3,zero
   1ce5c:	0021883a 	mov	r16,zero
   1ce60:	003f4d06 	br	1cb98 <__alt_data_end+0xfc01cb98>
   1ce64:	008007c4 	movi	r2,31
   1ce68:	11003c16 	blt	r2,r4,1cf5c <__adddf3+0x5e4>
   1ce6c:	00800804 	movi	r2,32
   1ce70:	1105c83a 	sub	r2,r2,r4
   1ce74:	488e983a 	sll	r7,r9,r2
   1ce78:	310ad83a 	srl	r5,r6,r4
   1ce7c:	3084983a 	sll	r2,r6,r2
   1ce80:	4912d83a 	srl	r9,r9,r4
   1ce84:	394ab03a 	or	r5,r7,r5
   1ce88:	1004c03a 	cmpne	r2,r2,zero
   1ce8c:	288ab03a 	or	r5,r5,r2
   1ce90:	003f5306 	br	1cbe0 <__alt_data_end+0xfc01cbe0>
   1ce94:	4448b03a 	or	r4,r8,r17
   1ce98:	20003e26 	beq	r4,zero,1cf94 <__adddf3+0x61c>
   1ce9c:	00c6303a 	nor	r3,zero,r3
   1cea0:	18003a1e 	bne	r3,zero,1cf8c <__adddf3+0x614>
   1cea4:	3463c83a 	sub	r17,r6,r17
   1cea8:	4a07c83a 	sub	r3,r9,r8
   1ceac:	344d803a 	cmpltu	r6,r6,r17
   1ceb0:	1991c83a 	sub	r8,r3,r6
   1ceb4:	1021883a 	mov	r16,r2
   1ceb8:	3825883a 	mov	r18,r7
   1cebc:	003f0a06 	br	1cae8 <__alt_data_end+0xfc01cae8>
   1cec0:	2023883a 	mov	r17,r4
   1cec4:	003f0d06 	br	1cafc <__alt_data_end+0xfc01cafc>
   1cec8:	0081ffc4 	movi	r2,2047
   1cecc:	80bf3f1e 	bne	r16,r2,1cbcc <__alt_data_end+0xfc01cbcc>
   1ced0:	003ec806 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1ced4:	0005883a 	mov	r2,zero
   1ced8:	003fb106 	br	1cda0 <__alt_data_end+0xfc01cda0>
   1cedc:	0007883a 	mov	r3,zero
   1cee0:	003fbc06 	br	1cdd4 <__alt_data_end+0xfc01cdd4>
   1cee4:	4444b03a 	or	r2,r8,r17
   1cee8:	8000871e 	bne	r16,zero,1d108 <__adddf3+0x790>
   1ceec:	1000ba26 	beq	r2,zero,1d1d8 <__adddf3+0x860>
   1cef0:	4984b03a 	or	r2,r9,r6
   1cef4:	103ebf26 	beq	r2,zero,1c9f4 <__alt_data_end+0xfc01c9f4>
   1cef8:	8985883a 	add	r2,r17,r6
   1cefc:	4247883a 	add	r3,r8,r9
   1cf00:	1451803a 	cmpltu	r8,r2,r17
   1cf04:	40d1883a 	add	r8,r8,r3
   1cf08:	40c0202c 	andhi	r3,r8,128
   1cf0c:	1023883a 	mov	r17,r2
   1cf10:	183f1a26 	beq	r3,zero,1cb7c <__alt_data_end+0xfc01cb7c>
   1cf14:	00bfe034 	movhi	r2,65408
   1cf18:	10bfffc4 	addi	r2,r2,-1
   1cf1c:	2021883a 	mov	r16,r4
   1cf20:	4090703a 	and	r8,r8,r2
   1cf24:	003eb306 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cf28:	4444b03a 	or	r2,r8,r17
   1cf2c:	8000291e 	bne	r16,zero,1cfd4 <__adddf3+0x65c>
   1cf30:	10004b1e 	bne	r2,zero,1d060 <__adddf3+0x6e8>
   1cf34:	4990b03a 	or	r8,r9,r6
   1cf38:	40008b26 	beq	r8,zero,1d168 <__adddf3+0x7f0>
   1cf3c:	4811883a 	mov	r8,r9
   1cf40:	3023883a 	mov	r17,r6
   1cf44:	3825883a 	mov	r18,r7
   1cf48:	003eaa06 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cf4c:	1021883a 	mov	r16,r2
   1cf50:	0011883a 	mov	r8,zero
   1cf54:	0005883a 	mov	r2,zero
   1cf58:	003f0f06 	br	1cb98 <__alt_data_end+0xfc01cb98>
   1cf5c:	217ff804 	addi	r5,r4,-32
   1cf60:	00800804 	movi	r2,32
   1cf64:	494ad83a 	srl	r5,r9,r5
   1cf68:	20807d26 	beq	r4,r2,1d160 <__adddf3+0x7e8>
   1cf6c:	00801004 	movi	r2,64
   1cf70:	1109c83a 	sub	r4,r2,r4
   1cf74:	4912983a 	sll	r9,r9,r4
   1cf78:	498cb03a 	or	r6,r9,r6
   1cf7c:	300cc03a 	cmpne	r6,r6,zero
   1cf80:	298ab03a 	or	r5,r5,r6
   1cf84:	0013883a 	mov	r9,zero
   1cf88:	003f1506 	br	1cbe0 <__alt_data_end+0xfc01cbe0>
   1cf8c:	0101ffc4 	movi	r4,2047
   1cf90:	113f9a1e 	bne	r2,r4,1cdfc <__alt_data_end+0xfc01cdfc>
   1cf94:	4811883a 	mov	r8,r9
   1cf98:	3023883a 	mov	r17,r6
   1cf9c:	1021883a 	mov	r16,r2
   1cfa0:	3825883a 	mov	r18,r7
   1cfa4:	003e9306 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cfa8:	8000161e 	bne	r16,zero,1d004 <__adddf3+0x68c>
   1cfac:	444ab03a 	or	r5,r8,r17
   1cfb0:	28005126 	beq	r5,zero,1d0f8 <__adddf3+0x780>
   1cfb4:	0108303a 	nor	r4,zero,r4
   1cfb8:	20004d1e 	bne	r4,zero,1d0f0 <__adddf3+0x778>
   1cfbc:	89a3883a 	add	r17,r17,r6
   1cfc0:	4253883a 	add	r9,r8,r9
   1cfc4:	898d803a 	cmpltu	r6,r17,r6
   1cfc8:	3251883a 	add	r8,r6,r9
   1cfcc:	1021883a 	mov	r16,r2
   1cfd0:	003f0806 	br	1cbf4 <__alt_data_end+0xfc01cbf4>
   1cfd4:	1000301e 	bne	r2,zero,1d098 <__adddf3+0x720>
   1cfd8:	4984b03a 	or	r2,r9,r6
   1cfdc:	10007126 	beq	r2,zero,1d1a4 <__adddf3+0x82c>
   1cfe0:	4811883a 	mov	r8,r9
   1cfe4:	3023883a 	mov	r17,r6
   1cfe8:	3825883a 	mov	r18,r7
   1cfec:	0401ffc4 	movi	r16,2047
   1cff0:	003e8006 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1cff4:	4462b03a 	or	r17,r8,r17
   1cff8:	8822c03a 	cmpne	r17,r17,zero
   1cffc:	0007883a 	mov	r3,zero
   1d000:	003f8b06 	br	1ce30 <__alt_data_end+0xfc01ce30>
   1d004:	0141ffc4 	movi	r5,2047
   1d008:	11403b26 	beq	r2,r5,1d0f8 <__adddf3+0x780>
   1d00c:	0109c83a 	sub	r4,zero,r4
   1d010:	42002034 	orhi	r8,r8,128
   1d014:	01400e04 	movi	r5,56
   1d018:	29006716 	blt	r5,r4,1d1b8 <__adddf3+0x840>
   1d01c:	014007c4 	movi	r5,31
   1d020:	29007016 	blt	r5,r4,1d1e4 <__adddf3+0x86c>
   1d024:	01400804 	movi	r5,32
   1d028:	290bc83a 	sub	r5,r5,r4
   1d02c:	4154983a 	sll	r10,r8,r5
   1d030:	890ed83a 	srl	r7,r17,r4
   1d034:	894a983a 	sll	r5,r17,r5
   1d038:	4108d83a 	srl	r4,r8,r4
   1d03c:	51e2b03a 	or	r17,r10,r7
   1d040:	280ac03a 	cmpne	r5,r5,zero
   1d044:	8962b03a 	or	r17,r17,r5
   1d048:	89a3883a 	add	r17,r17,r6
   1d04c:	2253883a 	add	r9,r4,r9
   1d050:	898d803a 	cmpltu	r6,r17,r6
   1d054:	3251883a 	add	r8,r6,r9
   1d058:	1021883a 	mov	r16,r2
   1d05c:	003ee506 	br	1cbf4 <__alt_data_end+0xfc01cbf4>
   1d060:	4984b03a 	or	r2,r9,r6
   1d064:	103e6326 	beq	r2,zero,1c9f4 <__alt_data_end+0xfc01c9f4>
   1d068:	8987c83a 	sub	r3,r17,r6
   1d06c:	88c9803a 	cmpltu	r4,r17,r3
   1d070:	4245c83a 	sub	r2,r8,r9
   1d074:	1105c83a 	sub	r2,r2,r4
   1d078:	1100202c 	andhi	r4,r2,128
   1d07c:	203ebb26 	beq	r4,zero,1cb6c <__alt_data_end+0xfc01cb6c>
   1d080:	3463c83a 	sub	r17,r6,r17
   1d084:	4a07c83a 	sub	r3,r9,r8
   1d088:	344d803a 	cmpltu	r6,r6,r17
   1d08c:	1991c83a 	sub	r8,r3,r6
   1d090:	3825883a 	mov	r18,r7
   1d094:	003e5706 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1d098:	4984b03a 	or	r2,r9,r6
   1d09c:	10002e26 	beq	r2,zero,1d158 <__adddf3+0x7e0>
   1d0a0:	4004d0fa 	srli	r2,r8,3
   1d0a4:	8822d0fa 	srli	r17,r17,3
   1d0a8:	4010977a 	slli	r8,r8,29
   1d0ac:	10c0022c 	andhi	r3,r2,8
   1d0b0:	4462b03a 	or	r17,r8,r17
   1d0b4:	18000826 	beq	r3,zero,1d0d8 <__adddf3+0x760>
   1d0b8:	4808d0fa 	srli	r4,r9,3
   1d0bc:	20c0022c 	andhi	r3,r4,8
   1d0c0:	1800051e 	bne	r3,zero,1d0d8 <__adddf3+0x760>
   1d0c4:	300cd0fa 	srli	r6,r6,3
   1d0c8:	4806977a 	slli	r3,r9,29
   1d0cc:	2005883a 	mov	r2,r4
   1d0d0:	3825883a 	mov	r18,r7
   1d0d4:	19a2b03a 	or	r17,r3,r6
   1d0d8:	8810d77a 	srli	r8,r17,29
   1d0dc:	100490fa 	slli	r2,r2,3
   1d0e0:	882290fa 	slli	r17,r17,3
   1d0e4:	0401ffc4 	movi	r16,2047
   1d0e8:	4090b03a 	or	r8,r8,r2
   1d0ec:	003e4106 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1d0f0:	0141ffc4 	movi	r5,2047
   1d0f4:	117fc71e 	bne	r2,r5,1d014 <__alt_data_end+0xfc01d014>
   1d0f8:	4811883a 	mov	r8,r9
   1d0fc:	3023883a 	mov	r17,r6
   1d100:	1021883a 	mov	r16,r2
   1d104:	003e3b06 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1d108:	10002f26 	beq	r2,zero,1d1c8 <__adddf3+0x850>
   1d10c:	4984b03a 	or	r2,r9,r6
   1d110:	10001126 	beq	r2,zero,1d158 <__adddf3+0x7e0>
   1d114:	4004d0fa 	srli	r2,r8,3
   1d118:	8822d0fa 	srli	r17,r17,3
   1d11c:	4010977a 	slli	r8,r8,29
   1d120:	10c0022c 	andhi	r3,r2,8
   1d124:	4462b03a 	or	r17,r8,r17
   1d128:	183feb26 	beq	r3,zero,1d0d8 <__alt_data_end+0xfc01d0d8>
   1d12c:	4808d0fa 	srli	r4,r9,3
   1d130:	20c0022c 	andhi	r3,r4,8
   1d134:	183fe81e 	bne	r3,zero,1d0d8 <__alt_data_end+0xfc01d0d8>
   1d138:	300cd0fa 	srli	r6,r6,3
   1d13c:	4806977a 	slli	r3,r9,29
   1d140:	2005883a 	mov	r2,r4
   1d144:	19a2b03a 	or	r17,r3,r6
   1d148:	003fe306 	br	1d0d8 <__alt_data_end+0xfc01d0d8>
   1d14c:	0011883a 	mov	r8,zero
   1d150:	0005883a 	mov	r2,zero
   1d154:	003e3f06 	br	1ca54 <__alt_data_end+0xfc01ca54>
   1d158:	0401ffc4 	movi	r16,2047
   1d15c:	003e2506 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1d160:	0013883a 	mov	r9,zero
   1d164:	003f8406 	br	1cf78 <__alt_data_end+0xfc01cf78>
   1d168:	0005883a 	mov	r2,zero
   1d16c:	0007883a 	mov	r3,zero
   1d170:	003e8906 	br	1cb98 <__alt_data_end+0xfc01cb98>
   1d174:	197ff804 	addi	r5,r3,-32
   1d178:	01000804 	movi	r4,32
   1d17c:	414ad83a 	srl	r5,r8,r5
   1d180:	19002426 	beq	r3,r4,1d214 <__adddf3+0x89c>
   1d184:	01001004 	movi	r4,64
   1d188:	20c7c83a 	sub	r3,r4,r3
   1d18c:	40c6983a 	sll	r3,r8,r3
   1d190:	1c46b03a 	or	r3,r3,r17
   1d194:	1806c03a 	cmpne	r3,r3,zero
   1d198:	28e2b03a 	or	r17,r5,r3
   1d19c:	0007883a 	mov	r3,zero
   1d1a0:	003f2306 	br	1ce30 <__alt_data_end+0xfc01ce30>
   1d1a4:	0007883a 	mov	r3,zero
   1d1a8:	5811883a 	mov	r8,r11
   1d1ac:	00bfffc4 	movi	r2,-1
   1d1b0:	0401ffc4 	movi	r16,2047
   1d1b4:	003e7806 	br	1cb98 <__alt_data_end+0xfc01cb98>
   1d1b8:	4462b03a 	or	r17,r8,r17
   1d1bc:	8822c03a 	cmpne	r17,r17,zero
   1d1c0:	0009883a 	mov	r4,zero
   1d1c4:	003fa006 	br	1d048 <__alt_data_end+0xfc01d048>
   1d1c8:	4811883a 	mov	r8,r9
   1d1cc:	3023883a 	mov	r17,r6
   1d1d0:	0401ffc4 	movi	r16,2047
   1d1d4:	003e0706 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1d1d8:	4811883a 	mov	r8,r9
   1d1dc:	3023883a 	mov	r17,r6
   1d1e0:	003e0406 	br	1c9f4 <__alt_data_end+0xfc01c9f4>
   1d1e4:	21fff804 	addi	r7,r4,-32
   1d1e8:	01400804 	movi	r5,32
   1d1ec:	41ced83a 	srl	r7,r8,r7
   1d1f0:	21400a26 	beq	r4,r5,1d21c <__adddf3+0x8a4>
   1d1f4:	01401004 	movi	r5,64
   1d1f8:	2909c83a 	sub	r4,r5,r4
   1d1fc:	4108983a 	sll	r4,r8,r4
   1d200:	2448b03a 	or	r4,r4,r17
   1d204:	2008c03a 	cmpne	r4,r4,zero
   1d208:	3922b03a 	or	r17,r7,r4
   1d20c:	0009883a 	mov	r4,zero
   1d210:	003f8d06 	br	1d048 <__alt_data_end+0xfc01d048>
   1d214:	0007883a 	mov	r3,zero
   1d218:	003fdd06 	br	1d190 <__alt_data_end+0xfc01d190>
   1d21c:	0009883a 	mov	r4,zero
   1d220:	003ff706 	br	1d200 <__alt_data_end+0xfc01d200>

0001d224 <__divdf3>:
   1d224:	defff004 	addi	sp,sp,-64
   1d228:	dc800815 	stw	r18,32(sp)
   1d22c:	2824d53a 	srli	r18,r5,20
   1d230:	dd800c15 	stw	r22,48(sp)
   1d234:	282cd7fa 	srli	r22,r5,31
   1d238:	dc000615 	stw	r16,24(sp)
   1d23c:	04000434 	movhi	r16,16
   1d240:	843fffc4 	addi	r16,r16,-1
   1d244:	dfc00f15 	stw	ra,60(sp)
   1d248:	df000e15 	stw	fp,56(sp)
   1d24c:	ddc00d15 	stw	r23,52(sp)
   1d250:	dd400b15 	stw	r21,44(sp)
   1d254:	dd000a15 	stw	r20,40(sp)
   1d258:	dcc00915 	stw	r19,36(sp)
   1d25c:	dc400715 	stw	r17,28(sp)
   1d260:	9481ffcc 	andi	r18,r18,2047
   1d264:	2c20703a 	and	r16,r5,r16
   1d268:	b2003fcc 	andi	r8,r22,255
   1d26c:	90006126 	beq	r18,zero,1d3f4 <__divdf3+0x1d0>
   1d270:	0081ffc4 	movi	r2,2047
   1d274:	202b883a 	mov	r21,r4
   1d278:	90803726 	beq	r18,r2,1d358 <__divdf3+0x134>
   1d27c:	80800434 	orhi	r2,r16,16
   1d280:	100490fa 	slli	r2,r2,3
   1d284:	2020d77a 	srli	r16,r4,29
   1d288:	202a90fa 	slli	r21,r4,3
   1d28c:	94bf0044 	addi	r18,r18,-1023
   1d290:	80a0b03a 	or	r16,r16,r2
   1d294:	0013883a 	mov	r9,zero
   1d298:	000b883a 	mov	r5,zero
   1d29c:	3806d53a 	srli	r3,r7,20
   1d2a0:	382ed7fa 	srli	r23,r7,31
   1d2a4:	04400434 	movhi	r17,16
   1d2a8:	8c7fffc4 	addi	r17,r17,-1
   1d2ac:	18c1ffcc 	andi	r3,r3,2047
   1d2b0:	3029883a 	mov	r20,r6
   1d2b4:	3c62703a 	and	r17,r7,r17
   1d2b8:	bf003fcc 	andi	fp,r23,255
   1d2bc:	18006e26 	beq	r3,zero,1d478 <__divdf3+0x254>
   1d2c0:	0081ffc4 	movi	r2,2047
   1d2c4:	18806626 	beq	r3,r2,1d460 <__divdf3+0x23c>
   1d2c8:	88800434 	orhi	r2,r17,16
   1d2cc:	100490fa 	slli	r2,r2,3
   1d2d0:	3022d77a 	srli	r17,r6,29
   1d2d4:	302890fa 	slli	r20,r6,3
   1d2d8:	18ff0044 	addi	r3,r3,-1023
   1d2dc:	88a2b03a 	or	r17,r17,r2
   1d2e0:	000f883a 	mov	r7,zero
   1d2e4:	b5e6f03a 	xor	r19,r22,r23
   1d2e8:	3a4cb03a 	or	r6,r7,r9
   1d2ec:	008003c4 	movi	r2,15
   1d2f0:	9809883a 	mov	r4,r19
   1d2f4:	90c7c83a 	sub	r3,r18,r3
   1d2f8:	9cc03fcc 	andi	r19,r19,255
   1d2fc:	11809636 	bltu	r2,r6,1d558 <__divdf3+0x334>
   1d300:	300c90ba 	slli	r6,r6,2
   1d304:	008000b4 	movhi	r2,2
   1d308:	10b4c604 	addi	r2,r2,-11496
   1d30c:	308d883a 	add	r6,r6,r2
   1d310:	30800017 	ldw	r2,0(r6)
   1d314:	1000683a 	jmp	r2
   1d318:	0001d558 	cmpnei	zero,zero,1877
   1d31c:	0001d390 	cmplti	zero,zero,1870
   1d320:	0001d548 	cmpgei	zero,zero,1877
   1d324:	0001d384 	movi	zero,1870
   1d328:	0001d548 	cmpgei	zero,zero,1877
   1d32c:	0001d51c 	xori	zero,zero,1876
   1d330:	0001d548 	cmpgei	zero,zero,1877
   1d334:	0001d384 	movi	zero,1870
   1d338:	0001d390 	cmplti	zero,zero,1870
   1d33c:	0001d390 	cmplti	zero,zero,1870
   1d340:	0001d51c 	xori	zero,zero,1876
   1d344:	0001d384 	movi	zero,1870
   1d348:	0001d374 	movhi	zero,1869
   1d34c:	0001d374 	movhi	zero,1869
   1d350:	0001d374 	movhi	zero,1869
   1d354:	0001d8e0 	cmpeqi	zero,zero,1891
   1d358:	2404b03a 	or	r2,r4,r16
   1d35c:	10006c1e 	bne	r2,zero,1d510 <__divdf3+0x2ec>
   1d360:	02400204 	movi	r9,8
   1d364:	0021883a 	mov	r16,zero
   1d368:	002b883a 	mov	r21,zero
   1d36c:	01400084 	movi	r5,2
   1d370:	003fca06 	br	1d29c <__alt_data_end+0xfc01d29c>
   1d374:	8023883a 	mov	r17,r16
   1d378:	a829883a 	mov	r20,r21
   1d37c:	4039883a 	mov	fp,r8
   1d380:	280f883a 	mov	r7,r5
   1d384:	00800084 	movi	r2,2
   1d388:	3881601e 	bne	r7,r2,1d90c <__divdf3+0x6e8>
   1d38c:	e027883a 	mov	r19,fp
   1d390:	9900004c 	andi	r4,r19,1
   1d394:	0081ffc4 	movi	r2,2047
   1d398:	0021883a 	mov	r16,zero
   1d39c:	002b883a 	mov	r21,zero
   1d3a0:	1004953a 	slli	r2,r2,20
   1d3a4:	20c03fcc 	andi	r3,r4,255
   1d3a8:	01400434 	movhi	r5,16
   1d3ac:	297fffc4 	addi	r5,r5,-1
   1d3b0:	180697fa 	slli	r3,r3,31
   1d3b4:	8160703a 	and	r16,r16,r5
   1d3b8:	80a0b03a 	or	r16,r16,r2
   1d3bc:	80c6b03a 	or	r3,r16,r3
   1d3c0:	a805883a 	mov	r2,r21
   1d3c4:	dfc00f17 	ldw	ra,60(sp)
   1d3c8:	df000e17 	ldw	fp,56(sp)
   1d3cc:	ddc00d17 	ldw	r23,52(sp)
   1d3d0:	dd800c17 	ldw	r22,48(sp)
   1d3d4:	dd400b17 	ldw	r21,44(sp)
   1d3d8:	dd000a17 	ldw	r20,40(sp)
   1d3dc:	dcc00917 	ldw	r19,36(sp)
   1d3e0:	dc800817 	ldw	r18,32(sp)
   1d3e4:	dc400717 	ldw	r17,28(sp)
   1d3e8:	dc000617 	ldw	r16,24(sp)
   1d3ec:	dec01004 	addi	sp,sp,64
   1d3f0:	f800283a 	ret
   1d3f4:	2404b03a 	or	r2,r4,r16
   1d3f8:	2023883a 	mov	r17,r4
   1d3fc:	10003f26 	beq	r2,zero,1d4fc <__divdf3+0x2d8>
   1d400:	80015e26 	beq	r16,zero,1d97c <__divdf3+0x758>
   1d404:	8009883a 	mov	r4,r16
   1d408:	d9800215 	stw	r6,8(sp)
   1d40c:	d9c00515 	stw	r7,20(sp)
   1d410:	da000415 	stw	r8,16(sp)
   1d414:	000e6440 	call	e644 <__clzsi2>
   1d418:	d9800217 	ldw	r6,8(sp)
   1d41c:	d9c00517 	ldw	r7,20(sp)
   1d420:	da000417 	ldw	r8,16(sp)
   1d424:	113ffd44 	addi	r4,r2,-11
   1d428:	00c00704 	movi	r3,28
   1d42c:	19014f16 	blt	r3,r4,1d96c <__divdf3+0x748>
   1d430:	00c00744 	movi	r3,29
   1d434:	157ffe04 	addi	r21,r2,-8
   1d438:	1907c83a 	sub	r3,r3,r4
   1d43c:	8560983a 	sll	r16,r16,r21
   1d440:	88c6d83a 	srl	r3,r17,r3
   1d444:	8d6a983a 	sll	r21,r17,r21
   1d448:	1c20b03a 	or	r16,r3,r16
   1d44c:	1080fcc4 	addi	r2,r2,1011
   1d450:	00a5c83a 	sub	r18,zero,r2
   1d454:	0013883a 	mov	r9,zero
   1d458:	000b883a 	mov	r5,zero
   1d45c:	003f8f06 	br	1d29c <__alt_data_end+0xfc01d29c>
   1d460:	3444b03a 	or	r2,r6,r17
   1d464:	1000231e 	bne	r2,zero,1d4f4 <__divdf3+0x2d0>
   1d468:	0023883a 	mov	r17,zero
   1d46c:	0029883a 	mov	r20,zero
   1d470:	01c00084 	movi	r7,2
   1d474:	003f9b06 	br	1d2e4 <__alt_data_end+0xfc01d2e4>
   1d478:	3444b03a 	or	r2,r6,r17
   1d47c:	10001926 	beq	r2,zero,1d4e4 <__divdf3+0x2c0>
   1d480:	88014b26 	beq	r17,zero,1d9b0 <__divdf3+0x78c>
   1d484:	8809883a 	mov	r4,r17
   1d488:	d9400115 	stw	r5,4(sp)
   1d48c:	d9800215 	stw	r6,8(sp)
   1d490:	da000415 	stw	r8,16(sp)
   1d494:	da400315 	stw	r9,12(sp)
   1d498:	000e6440 	call	e644 <__clzsi2>
   1d49c:	d9400117 	ldw	r5,4(sp)
   1d4a0:	d9800217 	ldw	r6,8(sp)
   1d4a4:	da000417 	ldw	r8,16(sp)
   1d4a8:	da400317 	ldw	r9,12(sp)
   1d4ac:	113ffd44 	addi	r4,r2,-11
   1d4b0:	00c00704 	movi	r3,28
   1d4b4:	19013a16 	blt	r3,r4,1d9a0 <__divdf3+0x77c>
   1d4b8:	00c00744 	movi	r3,29
   1d4bc:	153ffe04 	addi	r20,r2,-8
   1d4c0:	1907c83a 	sub	r3,r3,r4
   1d4c4:	8d22983a 	sll	r17,r17,r20
   1d4c8:	30c6d83a 	srl	r3,r6,r3
   1d4cc:	3528983a 	sll	r20,r6,r20
   1d4d0:	1c62b03a 	or	r17,r3,r17
   1d4d4:	1080fcc4 	addi	r2,r2,1011
   1d4d8:	0087c83a 	sub	r3,zero,r2
   1d4dc:	000f883a 	mov	r7,zero
   1d4e0:	003f8006 	br	1d2e4 <__alt_data_end+0xfc01d2e4>
   1d4e4:	0023883a 	mov	r17,zero
   1d4e8:	0029883a 	mov	r20,zero
   1d4ec:	01c00044 	movi	r7,1
   1d4f0:	003f7c06 	br	1d2e4 <__alt_data_end+0xfc01d2e4>
   1d4f4:	01c000c4 	movi	r7,3
   1d4f8:	003f7a06 	br	1d2e4 <__alt_data_end+0xfc01d2e4>
   1d4fc:	02400104 	movi	r9,4
   1d500:	0021883a 	mov	r16,zero
   1d504:	002b883a 	mov	r21,zero
   1d508:	01400044 	movi	r5,1
   1d50c:	003f6306 	br	1d29c <__alt_data_end+0xfc01d29c>
   1d510:	02400304 	movi	r9,12
   1d514:	014000c4 	movi	r5,3
   1d518:	003f6006 	br	1d29c <__alt_data_end+0xfc01d29c>
   1d51c:	04000434 	movhi	r16,16
   1d520:	0009883a 	mov	r4,zero
   1d524:	843fffc4 	addi	r16,r16,-1
   1d528:	057fffc4 	movi	r21,-1
   1d52c:	0081ffc4 	movi	r2,2047
   1d530:	003f9b06 	br	1d3a0 <__alt_data_end+0xfc01d3a0>
   1d534:	00c00044 	movi	r3,1
   1d538:	1887c83a 	sub	r3,r3,r2
   1d53c:	01000e04 	movi	r4,56
   1d540:	20c1530e 	bge	r4,r3,1da90 <__divdf3+0x86c>
   1d544:	9900004c 	andi	r4,r19,1
   1d548:	0005883a 	mov	r2,zero
   1d54c:	0021883a 	mov	r16,zero
   1d550:	002b883a 	mov	r21,zero
   1d554:	003f9206 	br	1d3a0 <__alt_data_end+0xfc01d3a0>
   1d558:	8c012e36 	bltu	r17,r16,1da14 <__divdf3+0x7f0>
   1d55c:	84412c26 	beq	r16,r17,1da10 <__divdf3+0x7ec>
   1d560:	a82f883a 	mov	r23,r21
   1d564:	18ffffc4 	addi	r3,r3,-1
   1d568:	002b883a 	mov	r21,zero
   1d56c:	a004d63a 	srli	r2,r20,24
   1d570:	8822923a 	slli	r17,r17,8
   1d574:	a028923a 	slli	r20,r20,8
   1d578:	8009883a 	mov	r4,r16
   1d57c:	88acb03a 	or	r22,r17,r2
   1d580:	dd000015 	stw	r20,0(sp)
   1d584:	b028d43a 	srli	r20,r22,16
   1d588:	d8c00215 	stw	r3,8(sp)
   1d58c:	b4bfffcc 	andi	r18,r22,65535
   1d590:	a00b883a 	mov	r5,r20
   1d594:	000d0d00 	call	d0d0 <__udivsi3>
   1d598:	100b883a 	mov	r5,r2
   1d59c:	9009883a 	mov	r4,r18
   1d5a0:	1023883a 	mov	r17,r2
   1d5a4:	000d18c0 	call	d18c <__mulsi3>
   1d5a8:	8009883a 	mov	r4,r16
   1d5ac:	a00b883a 	mov	r5,r20
   1d5b0:	1039883a 	mov	fp,r2
   1d5b4:	000d1340 	call	d134 <__umodsi3>
   1d5b8:	1004943a 	slli	r2,r2,16
   1d5bc:	b808d43a 	srli	r4,r23,16
   1d5c0:	d8c00217 	ldw	r3,8(sp)
   1d5c4:	2084b03a 	or	r2,r4,r2
   1d5c8:	1700062e 	bgeu	r2,fp,1d5e4 <__divdf3+0x3c0>
   1d5cc:	1585883a 	add	r2,r2,r22
   1d5d0:	893fffc4 	addi	r4,r17,-1
   1d5d4:	15811d36 	bltu	r2,r22,1da4c <__divdf3+0x828>
   1d5d8:	17011c2e 	bgeu	r2,fp,1da4c <__divdf3+0x828>
   1d5dc:	8c7fff84 	addi	r17,r17,-2
   1d5e0:	1585883a 	add	r2,r2,r22
   1d5e4:	1739c83a 	sub	fp,r2,fp
   1d5e8:	a00b883a 	mov	r5,r20
   1d5ec:	e009883a 	mov	r4,fp
   1d5f0:	d8c00215 	stw	r3,8(sp)
   1d5f4:	000d0d00 	call	d0d0 <__udivsi3>
   1d5f8:	100b883a 	mov	r5,r2
   1d5fc:	9009883a 	mov	r4,r18
   1d600:	1021883a 	mov	r16,r2
   1d604:	000d18c0 	call	d18c <__mulsi3>
   1d608:	a00b883a 	mov	r5,r20
   1d60c:	e009883a 	mov	r4,fp
   1d610:	d8800415 	stw	r2,16(sp)
   1d614:	000d1340 	call	d134 <__umodsi3>
   1d618:	1004943a 	slli	r2,r2,16
   1d61c:	da000417 	ldw	r8,16(sp)
   1d620:	bdffffcc 	andi	r23,r23,65535
   1d624:	b884b03a 	or	r2,r23,r2
   1d628:	d8c00217 	ldw	r3,8(sp)
   1d62c:	1200062e 	bgeu	r2,r8,1d648 <__divdf3+0x424>
   1d630:	1585883a 	add	r2,r2,r22
   1d634:	813fffc4 	addi	r4,r16,-1
   1d638:	15810236 	bltu	r2,r22,1da44 <__divdf3+0x820>
   1d63c:	1201012e 	bgeu	r2,r8,1da44 <__divdf3+0x820>
   1d640:	843fff84 	addi	r16,r16,-2
   1d644:	1585883a 	add	r2,r2,r22
   1d648:	8822943a 	slli	r17,r17,16
   1d64c:	d9800017 	ldw	r6,0(sp)
   1d650:	1211c83a 	sub	r8,r2,r8
   1d654:	8c22b03a 	or	r17,r17,r16
   1d658:	373fffcc 	andi	fp,r6,65535
   1d65c:	8abfffcc 	andi	r10,r17,65535
   1d660:	8820d43a 	srli	r16,r17,16
   1d664:	5009883a 	mov	r4,r10
   1d668:	e00b883a 	mov	r5,fp
   1d66c:	302ed43a 	srli	r23,r6,16
   1d670:	d8c00215 	stw	r3,8(sp)
   1d674:	da000415 	stw	r8,16(sp)
   1d678:	da800115 	stw	r10,4(sp)
   1d67c:	000d18c0 	call	d18c <__mulsi3>
   1d680:	800b883a 	mov	r5,r16
   1d684:	e009883a 	mov	r4,fp
   1d688:	d8800515 	stw	r2,20(sp)
   1d68c:	000d18c0 	call	d18c <__mulsi3>
   1d690:	8009883a 	mov	r4,r16
   1d694:	b80b883a 	mov	r5,r23
   1d698:	d8800315 	stw	r2,12(sp)
   1d69c:	000d18c0 	call	d18c <__mulsi3>
   1d6a0:	da800117 	ldw	r10,4(sp)
   1d6a4:	b80b883a 	mov	r5,r23
   1d6a8:	1021883a 	mov	r16,r2
   1d6ac:	5009883a 	mov	r4,r10
   1d6b0:	000d18c0 	call	d18c <__mulsi3>
   1d6b4:	d9c00517 	ldw	r7,20(sp)
   1d6b8:	da400317 	ldw	r9,12(sp)
   1d6bc:	d8c00217 	ldw	r3,8(sp)
   1d6c0:	3808d43a 	srli	r4,r7,16
   1d6c4:	1245883a 	add	r2,r2,r9
   1d6c8:	da000417 	ldw	r8,16(sp)
   1d6cc:	2085883a 	add	r2,r4,r2
   1d6d0:	1240022e 	bgeu	r2,r9,1d6dc <__divdf3+0x4b8>
   1d6d4:	01000074 	movhi	r4,1
   1d6d8:	8121883a 	add	r16,r16,r4
   1d6dc:	1008d43a 	srli	r4,r2,16
   1d6e0:	1004943a 	slli	r2,r2,16
   1d6e4:	39ffffcc 	andi	r7,r7,65535
   1d6e8:	2409883a 	add	r4,r4,r16
   1d6ec:	11c5883a 	add	r2,r2,r7
   1d6f0:	4100bb36 	bltu	r8,r4,1d9e0 <__divdf3+0x7bc>
   1d6f4:	4100d726 	beq	r8,r4,1da54 <__divdf3+0x830>
   1d6f8:	4109c83a 	sub	r4,r8,r4
   1d6fc:	a8a1c83a 	sub	r16,r21,r2
   1d700:	ac2b803a 	cmpltu	r21,r21,r16
   1d704:	256bc83a 	sub	r21,r4,r21
   1d708:	b540d926 	beq	r22,r21,1da70 <__divdf3+0x84c>
   1d70c:	a00b883a 	mov	r5,r20
   1d710:	a809883a 	mov	r4,r21
   1d714:	d8c00215 	stw	r3,8(sp)
   1d718:	000d0d00 	call	d0d0 <__udivsi3>
   1d71c:	100b883a 	mov	r5,r2
   1d720:	9009883a 	mov	r4,r18
   1d724:	d8800515 	stw	r2,20(sp)
   1d728:	000d18c0 	call	d18c <__mulsi3>
   1d72c:	a809883a 	mov	r4,r21
   1d730:	a00b883a 	mov	r5,r20
   1d734:	d8800415 	stw	r2,16(sp)
   1d738:	000d1340 	call	d134 <__umodsi3>
   1d73c:	1004943a 	slli	r2,r2,16
   1d740:	8008d43a 	srli	r4,r16,16
   1d744:	da000417 	ldw	r8,16(sp)
   1d748:	d8c00217 	ldw	r3,8(sp)
   1d74c:	2084b03a 	or	r2,r4,r2
   1d750:	d9c00517 	ldw	r7,20(sp)
   1d754:	1200062e 	bgeu	r2,r8,1d770 <__divdf3+0x54c>
   1d758:	1585883a 	add	r2,r2,r22
   1d75c:	393fffc4 	addi	r4,r7,-1
   1d760:	1580c536 	bltu	r2,r22,1da78 <__divdf3+0x854>
   1d764:	1200c42e 	bgeu	r2,r8,1da78 <__divdf3+0x854>
   1d768:	39ffff84 	addi	r7,r7,-2
   1d76c:	1585883a 	add	r2,r2,r22
   1d770:	122bc83a 	sub	r21,r2,r8
   1d774:	a00b883a 	mov	r5,r20
   1d778:	a809883a 	mov	r4,r21
   1d77c:	d8c00215 	stw	r3,8(sp)
   1d780:	d9c00515 	stw	r7,20(sp)
   1d784:	000d0d00 	call	d0d0 <__udivsi3>
   1d788:	9009883a 	mov	r4,r18
   1d78c:	100b883a 	mov	r5,r2
   1d790:	d8800415 	stw	r2,16(sp)
   1d794:	000d18c0 	call	d18c <__mulsi3>
   1d798:	a809883a 	mov	r4,r21
   1d79c:	a00b883a 	mov	r5,r20
   1d7a0:	1025883a 	mov	r18,r2
   1d7a4:	000d1340 	call	d134 <__umodsi3>
   1d7a8:	1004943a 	slli	r2,r2,16
   1d7ac:	813fffcc 	andi	r4,r16,65535
   1d7b0:	d8c00217 	ldw	r3,8(sp)
   1d7b4:	20a0b03a 	or	r16,r4,r2
   1d7b8:	d9c00517 	ldw	r7,20(sp)
   1d7bc:	da000417 	ldw	r8,16(sp)
   1d7c0:	8480062e 	bgeu	r16,r18,1d7dc <__divdf3+0x5b8>
   1d7c4:	85a1883a 	add	r16,r16,r22
   1d7c8:	40bfffc4 	addi	r2,r8,-1
   1d7cc:	8580ac36 	bltu	r16,r22,1da80 <__divdf3+0x85c>
   1d7d0:	8480ab2e 	bgeu	r16,r18,1da80 <__divdf3+0x85c>
   1d7d4:	423fff84 	addi	r8,r8,-2
   1d7d8:	85a1883a 	add	r16,r16,r22
   1d7dc:	3804943a 	slli	r2,r7,16
   1d7e0:	84a1c83a 	sub	r16,r16,r18
   1d7e4:	e009883a 	mov	r4,fp
   1d7e8:	1228b03a 	or	r20,r2,r8
   1d7ec:	a1ffffcc 	andi	r7,r20,65535
   1d7f0:	a024d43a 	srli	r18,r20,16
   1d7f4:	380b883a 	mov	r5,r7
   1d7f8:	d8c00215 	stw	r3,8(sp)
   1d7fc:	d9c00515 	stw	r7,20(sp)
   1d800:	000d18c0 	call	d18c <__mulsi3>
   1d804:	900b883a 	mov	r5,r18
   1d808:	e009883a 	mov	r4,fp
   1d80c:	102b883a 	mov	r21,r2
   1d810:	000d18c0 	call	d18c <__mulsi3>
   1d814:	900b883a 	mov	r5,r18
   1d818:	b809883a 	mov	r4,r23
   1d81c:	1039883a 	mov	fp,r2
   1d820:	000d18c0 	call	d18c <__mulsi3>
   1d824:	d9c00517 	ldw	r7,20(sp)
   1d828:	b80b883a 	mov	r5,r23
   1d82c:	1025883a 	mov	r18,r2
   1d830:	3809883a 	mov	r4,r7
   1d834:	000d18c0 	call	d18c <__mulsi3>
   1d838:	a808d43a 	srli	r4,r21,16
   1d83c:	1705883a 	add	r2,r2,fp
   1d840:	d8c00217 	ldw	r3,8(sp)
   1d844:	2085883a 	add	r2,r4,r2
   1d848:	1700022e 	bgeu	r2,fp,1d854 <__divdf3+0x630>
   1d84c:	01000074 	movhi	r4,1
   1d850:	9125883a 	add	r18,r18,r4
   1d854:	1008d43a 	srli	r4,r2,16
   1d858:	1004943a 	slli	r2,r2,16
   1d85c:	ad7fffcc 	andi	r21,r21,65535
   1d860:	2489883a 	add	r4,r4,r18
   1d864:	1545883a 	add	r2,r2,r21
   1d868:	81003836 	bltu	r16,r4,1d94c <__divdf3+0x728>
   1d86c:	81003626 	beq	r16,r4,1d948 <__divdf3+0x724>
   1d870:	a5000054 	ori	r20,r20,1
   1d874:	1880ffc4 	addi	r2,r3,1023
   1d878:	00bf2e0e 	bge	zero,r2,1d534 <__alt_data_end+0xfc01d534>
   1d87c:	a10001cc 	andi	r4,r20,7
   1d880:	20000726 	beq	r4,zero,1d8a0 <__divdf3+0x67c>
   1d884:	a10003cc 	andi	r4,r20,15
   1d888:	01400104 	movi	r5,4
   1d88c:	21400426 	beq	r4,r5,1d8a0 <__divdf3+0x67c>
   1d890:	a149883a 	add	r4,r20,r5
   1d894:	2529803a 	cmpltu	r20,r4,r20
   1d898:	8d23883a 	add	r17,r17,r20
   1d89c:	2029883a 	mov	r20,r4
   1d8a0:	8900402c 	andhi	r4,r17,256
   1d8a4:	20000426 	beq	r4,zero,1d8b8 <__divdf3+0x694>
   1d8a8:	18810004 	addi	r2,r3,1024
   1d8ac:	00ffc034 	movhi	r3,65280
   1d8b0:	18ffffc4 	addi	r3,r3,-1
   1d8b4:	88e2703a 	and	r17,r17,r3
   1d8b8:	00c1ff84 	movi	r3,2046
   1d8bc:	18beb416 	blt	r3,r2,1d390 <__alt_data_end+0xfc01d390>
   1d8c0:	a028d0fa 	srli	r20,r20,3
   1d8c4:	882a977a 	slli	r21,r17,29
   1d8c8:	8820927a 	slli	r16,r17,9
   1d8cc:	1081ffcc 	andi	r2,r2,2047
   1d8d0:	ad2ab03a 	or	r21,r21,r20
   1d8d4:	8020d33a 	srli	r16,r16,12
   1d8d8:	9900004c 	andi	r4,r19,1
   1d8dc:	003eb006 	br	1d3a0 <__alt_data_end+0xfc01d3a0>
   1d8e0:	8080022c 	andhi	r2,r16,8
   1d8e4:	10001226 	beq	r2,zero,1d930 <__divdf3+0x70c>
   1d8e8:	8880022c 	andhi	r2,r17,8
   1d8ec:	1000101e 	bne	r2,zero,1d930 <__divdf3+0x70c>
   1d8f0:	00800434 	movhi	r2,16
   1d8f4:	8c000234 	orhi	r16,r17,8
   1d8f8:	10bfffc4 	addi	r2,r2,-1
   1d8fc:	b809883a 	mov	r4,r23
   1d900:	80a0703a 	and	r16,r16,r2
   1d904:	a02b883a 	mov	r21,r20
   1d908:	003f0806 	br	1d52c <__alt_data_end+0xfc01d52c>
   1d90c:	008000c4 	movi	r2,3
   1d910:	3880b126 	beq	r7,r2,1dbd8 <__divdf3+0x9b4>
   1d914:	00800044 	movi	r2,1
   1d918:	38805b1e 	bne	r7,r2,1da88 <__divdf3+0x864>
   1d91c:	e009883a 	mov	r4,fp
   1d920:	0005883a 	mov	r2,zero
   1d924:	0021883a 	mov	r16,zero
   1d928:	002b883a 	mov	r21,zero
   1d92c:	003e9c06 	br	1d3a0 <__alt_data_end+0xfc01d3a0>
   1d930:	00800434 	movhi	r2,16
   1d934:	84000234 	orhi	r16,r16,8
   1d938:	10bfffc4 	addi	r2,r2,-1
   1d93c:	b009883a 	mov	r4,r22
   1d940:	80a0703a 	and	r16,r16,r2
   1d944:	003ef906 	br	1d52c <__alt_data_end+0xfc01d52c>
   1d948:	103fca26 	beq	r2,zero,1d874 <__alt_data_end+0xfc01d874>
   1d94c:	b421883a 	add	r16,r22,r16
   1d950:	a17fffc4 	addi	r5,r20,-1
   1d954:	8580422e 	bgeu	r16,r22,1da60 <__divdf3+0x83c>
   1d958:	2829883a 	mov	r20,r5
   1d95c:	813fc41e 	bne	r16,r4,1d870 <__alt_data_end+0xfc01d870>
   1d960:	d9800017 	ldw	r6,0(sp)
   1d964:	30bfc21e 	bne	r6,r2,1d870 <__alt_data_end+0xfc01d870>
   1d968:	003fc206 	br	1d874 <__alt_data_end+0xfc01d874>
   1d96c:	143ff604 	addi	r16,r2,-40
   1d970:	8c20983a 	sll	r16,r17,r16
   1d974:	002b883a 	mov	r21,zero
   1d978:	003eb406 	br	1d44c <__alt_data_end+0xfc01d44c>
   1d97c:	d9800215 	stw	r6,8(sp)
   1d980:	d9c00515 	stw	r7,20(sp)
   1d984:	da000415 	stw	r8,16(sp)
   1d988:	000e6440 	call	e644 <__clzsi2>
   1d98c:	10800804 	addi	r2,r2,32
   1d990:	da000417 	ldw	r8,16(sp)
   1d994:	d9c00517 	ldw	r7,20(sp)
   1d998:	d9800217 	ldw	r6,8(sp)
   1d99c:	003ea106 	br	1d424 <__alt_data_end+0xfc01d424>
   1d9a0:	147ff604 	addi	r17,r2,-40
   1d9a4:	3462983a 	sll	r17,r6,r17
   1d9a8:	0029883a 	mov	r20,zero
   1d9ac:	003ec906 	br	1d4d4 <__alt_data_end+0xfc01d4d4>
   1d9b0:	3009883a 	mov	r4,r6
   1d9b4:	d9400115 	stw	r5,4(sp)
   1d9b8:	d9800215 	stw	r6,8(sp)
   1d9bc:	da000415 	stw	r8,16(sp)
   1d9c0:	da400315 	stw	r9,12(sp)
   1d9c4:	000e6440 	call	e644 <__clzsi2>
   1d9c8:	10800804 	addi	r2,r2,32
   1d9cc:	da400317 	ldw	r9,12(sp)
   1d9d0:	da000417 	ldw	r8,16(sp)
   1d9d4:	d9800217 	ldw	r6,8(sp)
   1d9d8:	d9400117 	ldw	r5,4(sp)
   1d9dc:	003eb306 	br	1d4ac <__alt_data_end+0xfc01d4ac>
   1d9e0:	d9800017 	ldw	r6,0(sp)
   1d9e4:	a9ab883a 	add	r21,r21,r6
   1d9e8:	a98b803a 	cmpltu	r5,r21,r6
   1d9ec:	2d8b883a 	add	r5,r5,r22
   1d9f0:	2a11883a 	add	r8,r5,r8
   1d9f4:	897fffc4 	addi	r5,r17,-1
   1d9f8:	b2000c2e 	bgeu	r22,r8,1da2c <__divdf3+0x808>
   1d9fc:	41003f36 	bltu	r8,r4,1dafc <__divdf3+0x8d8>
   1da00:	22006c26 	beq	r4,r8,1dbb4 <__divdf3+0x990>
   1da04:	4109c83a 	sub	r4,r8,r4
   1da08:	2823883a 	mov	r17,r5
   1da0c:	003f3b06 	br	1d6fc <__alt_data_end+0xfc01d6fc>
   1da10:	ad3ed336 	bltu	r21,r20,1d560 <__alt_data_end+0xfc01d560>
   1da14:	a804d07a 	srli	r2,r21,1
   1da18:	802e97fa 	slli	r23,r16,31
   1da1c:	a82a97fa 	slli	r21,r21,31
   1da20:	8020d07a 	srli	r16,r16,1
   1da24:	b8aeb03a 	or	r23,r23,r2
   1da28:	003ed006 	br	1d56c <__alt_data_end+0xfc01d56c>
   1da2c:	b23ff51e 	bne	r22,r8,1da04 <__alt_data_end+0xfc01da04>
   1da30:	d9800017 	ldw	r6,0(sp)
   1da34:	a9bff12e 	bgeu	r21,r6,1d9fc <__alt_data_end+0xfc01d9fc>
   1da38:	b109c83a 	sub	r4,r22,r4
   1da3c:	2823883a 	mov	r17,r5
   1da40:	003f2e06 	br	1d6fc <__alt_data_end+0xfc01d6fc>
   1da44:	2021883a 	mov	r16,r4
   1da48:	003eff06 	br	1d648 <__alt_data_end+0xfc01d648>
   1da4c:	2023883a 	mov	r17,r4
   1da50:	003ee406 	br	1d5e4 <__alt_data_end+0xfc01d5e4>
   1da54:	a8bfe236 	bltu	r21,r2,1d9e0 <__alt_data_end+0xfc01d9e0>
   1da58:	0009883a 	mov	r4,zero
   1da5c:	003f2706 	br	1d6fc <__alt_data_end+0xfc01d6fc>
   1da60:	81002d36 	bltu	r16,r4,1db18 <__divdf3+0x8f4>
   1da64:	24005626 	beq	r4,r16,1dbc0 <__divdf3+0x99c>
   1da68:	2829883a 	mov	r20,r5
   1da6c:	003f8006 	br	1d870 <__alt_data_end+0xfc01d870>
   1da70:	053fffc4 	movi	r20,-1
   1da74:	003f7f06 	br	1d874 <__alt_data_end+0xfc01d874>
   1da78:	200f883a 	mov	r7,r4
   1da7c:	003f3c06 	br	1d770 <__alt_data_end+0xfc01d770>
   1da80:	1011883a 	mov	r8,r2
   1da84:	003f5506 	br	1d7dc <__alt_data_end+0xfc01d7dc>
   1da88:	e027883a 	mov	r19,fp
   1da8c:	003f7906 	br	1d874 <__alt_data_end+0xfc01d874>
   1da90:	010007c4 	movi	r4,31
   1da94:	20c02816 	blt	r4,r3,1db38 <__divdf3+0x914>
   1da98:	00800804 	movi	r2,32
   1da9c:	10c5c83a 	sub	r2,r2,r3
   1daa0:	888a983a 	sll	r5,r17,r2
   1daa4:	a0c8d83a 	srl	r4,r20,r3
   1daa8:	a084983a 	sll	r2,r20,r2
   1daac:	88e2d83a 	srl	r17,r17,r3
   1dab0:	2906b03a 	or	r3,r5,r4
   1dab4:	1004c03a 	cmpne	r2,r2,zero
   1dab8:	1886b03a 	or	r3,r3,r2
   1dabc:	188001cc 	andi	r2,r3,7
   1dac0:	10000726 	beq	r2,zero,1dae0 <__divdf3+0x8bc>
   1dac4:	188003cc 	andi	r2,r3,15
   1dac8:	01000104 	movi	r4,4
   1dacc:	11000426 	beq	r2,r4,1dae0 <__divdf3+0x8bc>
   1dad0:	1805883a 	mov	r2,r3
   1dad4:	10c00104 	addi	r3,r2,4
   1dad8:	1885803a 	cmpltu	r2,r3,r2
   1dadc:	88a3883a 	add	r17,r17,r2
   1dae0:	8880202c 	andhi	r2,r17,128
   1dae4:	10002926 	beq	r2,zero,1db8c <__divdf3+0x968>
   1dae8:	9900004c 	andi	r4,r19,1
   1daec:	00800044 	movi	r2,1
   1daf0:	0021883a 	mov	r16,zero
   1daf4:	002b883a 	mov	r21,zero
   1daf8:	003e2906 	br	1d3a0 <__alt_data_end+0xfc01d3a0>
   1dafc:	d9800017 	ldw	r6,0(sp)
   1db00:	8c7fff84 	addi	r17,r17,-2
   1db04:	a9ab883a 	add	r21,r21,r6
   1db08:	a98b803a 	cmpltu	r5,r21,r6
   1db0c:	2d8b883a 	add	r5,r5,r22
   1db10:	2a11883a 	add	r8,r5,r8
   1db14:	003ef806 	br	1d6f8 <__alt_data_end+0xfc01d6f8>
   1db18:	d9800017 	ldw	r6,0(sp)
   1db1c:	318f883a 	add	r7,r6,r6
   1db20:	398b803a 	cmpltu	r5,r7,r6
   1db24:	2d8d883a 	add	r6,r5,r22
   1db28:	81a1883a 	add	r16,r16,r6
   1db2c:	a17fff84 	addi	r5,r20,-2
   1db30:	d9c00015 	stw	r7,0(sp)
   1db34:	003f8806 	br	1d958 <__alt_data_end+0xfc01d958>
   1db38:	013ff844 	movi	r4,-31
   1db3c:	2085c83a 	sub	r2,r4,r2
   1db40:	8888d83a 	srl	r4,r17,r2
   1db44:	00800804 	movi	r2,32
   1db48:	18802126 	beq	r3,r2,1dbd0 <__divdf3+0x9ac>
   1db4c:	04001004 	movi	r16,64
   1db50:	80c7c83a 	sub	r3,r16,r3
   1db54:	88e0983a 	sll	r16,r17,r3
   1db58:	8504b03a 	or	r2,r16,r20
   1db5c:	1004c03a 	cmpne	r2,r2,zero
   1db60:	2084b03a 	or	r2,r4,r2
   1db64:	144001cc 	andi	r17,r2,7
   1db68:	88000d1e 	bne	r17,zero,1dba0 <__divdf3+0x97c>
   1db6c:	0021883a 	mov	r16,zero
   1db70:	102ad0fa 	srli	r21,r2,3
   1db74:	9900004c 	andi	r4,r19,1
   1db78:	0005883a 	mov	r2,zero
   1db7c:	ac6ab03a 	or	r21,r21,r17
   1db80:	003e0706 	br	1d3a0 <__alt_data_end+0xfc01d3a0>
   1db84:	1007883a 	mov	r3,r2
   1db88:	0023883a 	mov	r17,zero
   1db8c:	8820927a 	slli	r16,r17,9
   1db90:	1805883a 	mov	r2,r3
   1db94:	8822977a 	slli	r17,r17,29
   1db98:	8020d33a 	srli	r16,r16,12
   1db9c:	003ff406 	br	1db70 <__alt_data_end+0xfc01db70>
   1dba0:	10c003cc 	andi	r3,r2,15
   1dba4:	01000104 	movi	r4,4
   1dba8:	193ff626 	beq	r3,r4,1db84 <__alt_data_end+0xfc01db84>
   1dbac:	0023883a 	mov	r17,zero
   1dbb0:	003fc806 	br	1dad4 <__alt_data_end+0xfc01dad4>
   1dbb4:	a8bfd136 	bltu	r21,r2,1dafc <__alt_data_end+0xfc01dafc>
   1dbb8:	2823883a 	mov	r17,r5
   1dbbc:	003fa606 	br	1da58 <__alt_data_end+0xfc01da58>
   1dbc0:	d9800017 	ldw	r6,0(sp)
   1dbc4:	30bfd436 	bltu	r6,r2,1db18 <__alt_data_end+0xfc01db18>
   1dbc8:	2829883a 	mov	r20,r5
   1dbcc:	003f6406 	br	1d960 <__alt_data_end+0xfc01d960>
   1dbd0:	0021883a 	mov	r16,zero
   1dbd4:	003fe006 	br	1db58 <__alt_data_end+0xfc01db58>
   1dbd8:	00800434 	movhi	r2,16
   1dbdc:	8c000234 	orhi	r16,r17,8
   1dbe0:	10bfffc4 	addi	r2,r2,-1
   1dbe4:	e009883a 	mov	r4,fp
   1dbe8:	80a0703a 	and	r16,r16,r2
   1dbec:	a02b883a 	mov	r21,r20
   1dbf0:	003e4e06 	br	1d52c <__alt_data_end+0xfc01d52c>

0001dbf4 <__eqdf2>:
   1dbf4:	2804d53a 	srli	r2,r5,20
   1dbf8:	3806d53a 	srli	r3,r7,20
   1dbfc:	02000434 	movhi	r8,16
   1dc00:	423fffc4 	addi	r8,r8,-1
   1dc04:	1081ffcc 	andi	r2,r2,2047
   1dc08:	0281ffc4 	movi	r10,2047
   1dc0c:	2a12703a 	and	r9,r5,r8
   1dc10:	18c1ffcc 	andi	r3,r3,2047
   1dc14:	3a10703a 	and	r8,r7,r8
   1dc18:	280ad7fa 	srli	r5,r5,31
   1dc1c:	380ed7fa 	srli	r7,r7,31
   1dc20:	12801026 	beq	r2,r10,1dc64 <__eqdf2+0x70>
   1dc24:	0281ffc4 	movi	r10,2047
   1dc28:	1a800a26 	beq	r3,r10,1dc54 <__eqdf2+0x60>
   1dc2c:	10c00226 	beq	r2,r3,1dc38 <__eqdf2+0x44>
   1dc30:	00800044 	movi	r2,1
   1dc34:	f800283a 	ret
   1dc38:	4a3ffd1e 	bne	r9,r8,1dc30 <__alt_data_end+0xfc01dc30>
   1dc3c:	21bffc1e 	bne	r4,r6,1dc30 <__alt_data_end+0xfc01dc30>
   1dc40:	29c00c26 	beq	r5,r7,1dc74 <__eqdf2+0x80>
   1dc44:	103ffa1e 	bne	r2,zero,1dc30 <__alt_data_end+0xfc01dc30>
   1dc48:	2244b03a 	or	r2,r4,r9
   1dc4c:	1004c03a 	cmpne	r2,r2,zero
   1dc50:	f800283a 	ret
   1dc54:	3214b03a 	or	r10,r6,r8
   1dc58:	503ff426 	beq	r10,zero,1dc2c <__alt_data_end+0xfc01dc2c>
   1dc5c:	00800044 	movi	r2,1
   1dc60:	f800283a 	ret
   1dc64:	2254b03a 	or	r10,r4,r9
   1dc68:	503fee26 	beq	r10,zero,1dc24 <__alt_data_end+0xfc01dc24>
   1dc6c:	00800044 	movi	r2,1
   1dc70:	f800283a 	ret
   1dc74:	0005883a 	mov	r2,zero
   1dc78:	f800283a 	ret

0001dc7c <__gedf2>:
   1dc7c:	2804d53a 	srli	r2,r5,20
   1dc80:	3806d53a 	srli	r3,r7,20
   1dc84:	02000434 	movhi	r8,16
   1dc88:	423fffc4 	addi	r8,r8,-1
   1dc8c:	1081ffcc 	andi	r2,r2,2047
   1dc90:	0241ffc4 	movi	r9,2047
   1dc94:	2a14703a 	and	r10,r5,r8
   1dc98:	18c1ffcc 	andi	r3,r3,2047
   1dc9c:	3a10703a 	and	r8,r7,r8
   1dca0:	280ad7fa 	srli	r5,r5,31
   1dca4:	380ed7fa 	srli	r7,r7,31
   1dca8:	12401d26 	beq	r2,r9,1dd20 <__gedf2+0xa4>
   1dcac:	0241ffc4 	movi	r9,2047
   1dcb0:	1a401226 	beq	r3,r9,1dcfc <__gedf2+0x80>
   1dcb4:	1000081e 	bne	r2,zero,1dcd8 <__gedf2+0x5c>
   1dcb8:	2296b03a 	or	r11,r4,r10
   1dcbc:	5813003a 	cmpeq	r9,r11,zero
   1dcc0:	1800091e 	bne	r3,zero,1dce8 <__gedf2+0x6c>
   1dcc4:	3218b03a 	or	r12,r6,r8
   1dcc8:	6000071e 	bne	r12,zero,1dce8 <__gedf2+0x6c>
   1dccc:	0005883a 	mov	r2,zero
   1dcd0:	5800101e 	bne	r11,zero,1dd14 <__gedf2+0x98>
   1dcd4:	f800283a 	ret
   1dcd8:	18000c1e 	bne	r3,zero,1dd0c <__gedf2+0x90>
   1dcdc:	3212b03a 	or	r9,r6,r8
   1dce0:	48000c26 	beq	r9,zero,1dd14 <__gedf2+0x98>
   1dce4:	0013883a 	mov	r9,zero
   1dce8:	39c03fcc 	andi	r7,r7,255
   1dcec:	48000826 	beq	r9,zero,1dd10 <__gedf2+0x94>
   1dcf0:	38000926 	beq	r7,zero,1dd18 <__gedf2+0x9c>
   1dcf4:	00800044 	movi	r2,1
   1dcf8:	f800283a 	ret
   1dcfc:	3212b03a 	or	r9,r6,r8
   1dd00:	483fec26 	beq	r9,zero,1dcb4 <__alt_data_end+0xfc01dcb4>
   1dd04:	00bfff84 	movi	r2,-2
   1dd08:	f800283a 	ret
   1dd0c:	39c03fcc 	andi	r7,r7,255
   1dd10:	29c00626 	beq	r5,r7,1dd2c <__gedf2+0xb0>
   1dd14:	283ff726 	beq	r5,zero,1dcf4 <__alt_data_end+0xfc01dcf4>
   1dd18:	00bfffc4 	movi	r2,-1
   1dd1c:	f800283a 	ret
   1dd20:	2292b03a 	or	r9,r4,r10
   1dd24:	483fe126 	beq	r9,zero,1dcac <__alt_data_end+0xfc01dcac>
   1dd28:	003ff606 	br	1dd04 <__alt_data_end+0xfc01dd04>
   1dd2c:	18bff916 	blt	r3,r2,1dd14 <__alt_data_end+0xfc01dd14>
   1dd30:	10c00316 	blt	r2,r3,1dd40 <__gedf2+0xc4>
   1dd34:	42bff736 	bltu	r8,r10,1dd14 <__alt_data_end+0xfc01dd14>
   1dd38:	52000326 	beq	r10,r8,1dd48 <__gedf2+0xcc>
   1dd3c:	5200042e 	bgeu	r10,r8,1dd50 <__gedf2+0xd4>
   1dd40:	283fec1e 	bne	r5,zero,1dcf4 <__alt_data_end+0xfc01dcf4>
   1dd44:	003ff406 	br	1dd18 <__alt_data_end+0xfc01dd18>
   1dd48:	313ff236 	bltu	r6,r4,1dd14 <__alt_data_end+0xfc01dd14>
   1dd4c:	21bffc36 	bltu	r4,r6,1dd40 <__alt_data_end+0xfc01dd40>
   1dd50:	0005883a 	mov	r2,zero
   1dd54:	f800283a 	ret

0001dd58 <__ledf2>:
   1dd58:	2804d53a 	srli	r2,r5,20
   1dd5c:	3810d53a 	srli	r8,r7,20
   1dd60:	00c00434 	movhi	r3,16
   1dd64:	18ffffc4 	addi	r3,r3,-1
   1dd68:	1081ffcc 	andi	r2,r2,2047
   1dd6c:	0241ffc4 	movi	r9,2047
   1dd70:	28d4703a 	and	r10,r5,r3
   1dd74:	4201ffcc 	andi	r8,r8,2047
   1dd78:	38c6703a 	and	r3,r7,r3
   1dd7c:	280ad7fa 	srli	r5,r5,31
   1dd80:	380ed7fa 	srli	r7,r7,31
   1dd84:	12401f26 	beq	r2,r9,1de04 <__ledf2+0xac>
   1dd88:	0241ffc4 	movi	r9,2047
   1dd8c:	42401426 	beq	r8,r9,1dde0 <__ledf2+0x88>
   1dd90:	1000091e 	bne	r2,zero,1ddb8 <__ledf2+0x60>
   1dd94:	2296b03a 	or	r11,r4,r10
   1dd98:	5813003a 	cmpeq	r9,r11,zero
   1dd9c:	29403fcc 	andi	r5,r5,255
   1dda0:	40000a1e 	bne	r8,zero,1ddcc <__ledf2+0x74>
   1dda4:	30d8b03a 	or	r12,r6,r3
   1dda8:	6000081e 	bne	r12,zero,1ddcc <__ledf2+0x74>
   1ddac:	0005883a 	mov	r2,zero
   1ddb0:	5800111e 	bne	r11,zero,1ddf8 <__ledf2+0xa0>
   1ddb4:	f800283a 	ret
   1ddb8:	29403fcc 	andi	r5,r5,255
   1ddbc:	40000c1e 	bne	r8,zero,1ddf0 <__ledf2+0x98>
   1ddc0:	30d2b03a 	or	r9,r6,r3
   1ddc4:	48000c26 	beq	r9,zero,1ddf8 <__ledf2+0xa0>
   1ddc8:	0013883a 	mov	r9,zero
   1ddcc:	39c03fcc 	andi	r7,r7,255
   1ddd0:	48000826 	beq	r9,zero,1ddf4 <__ledf2+0x9c>
   1ddd4:	38001126 	beq	r7,zero,1de1c <__ledf2+0xc4>
   1ddd8:	00800044 	movi	r2,1
   1dddc:	f800283a 	ret
   1dde0:	30d2b03a 	or	r9,r6,r3
   1dde4:	483fea26 	beq	r9,zero,1dd90 <__alt_data_end+0xfc01dd90>
   1dde8:	00800084 	movi	r2,2
   1ddec:	f800283a 	ret
   1ddf0:	39c03fcc 	andi	r7,r7,255
   1ddf4:	39400726 	beq	r7,r5,1de14 <__ledf2+0xbc>
   1ddf8:	2800081e 	bne	r5,zero,1de1c <__ledf2+0xc4>
   1ddfc:	00800044 	movi	r2,1
   1de00:	f800283a 	ret
   1de04:	2292b03a 	or	r9,r4,r10
   1de08:	483fdf26 	beq	r9,zero,1dd88 <__alt_data_end+0xfc01dd88>
   1de0c:	00800084 	movi	r2,2
   1de10:	f800283a 	ret
   1de14:	4080030e 	bge	r8,r2,1de24 <__ledf2+0xcc>
   1de18:	383fef26 	beq	r7,zero,1ddd8 <__alt_data_end+0xfc01ddd8>
   1de1c:	00bfffc4 	movi	r2,-1
   1de20:	f800283a 	ret
   1de24:	123feb16 	blt	r2,r8,1ddd4 <__alt_data_end+0xfc01ddd4>
   1de28:	1abff336 	bltu	r3,r10,1ddf8 <__alt_data_end+0xfc01ddf8>
   1de2c:	50c00326 	beq	r10,r3,1de3c <__ledf2+0xe4>
   1de30:	50c0042e 	bgeu	r10,r3,1de44 <__ledf2+0xec>
   1de34:	283fe81e 	bne	r5,zero,1ddd8 <__alt_data_end+0xfc01ddd8>
   1de38:	003ff806 	br	1de1c <__alt_data_end+0xfc01de1c>
   1de3c:	313fee36 	bltu	r6,r4,1ddf8 <__alt_data_end+0xfc01ddf8>
   1de40:	21bffc36 	bltu	r4,r6,1de34 <__alt_data_end+0xfc01de34>
   1de44:	0005883a 	mov	r2,zero
   1de48:	f800283a 	ret

0001de4c <__muldf3>:
   1de4c:	deffee04 	addi	sp,sp,-72
   1de50:	dd000c15 	stw	r20,48(sp)
   1de54:	2828d53a 	srli	r20,r5,20
   1de58:	ddc00f15 	stw	r23,60(sp)
   1de5c:	282ed7fa 	srli	r23,r5,31
   1de60:	dc000815 	stw	r16,32(sp)
   1de64:	04000434 	movhi	r16,16
   1de68:	dcc00b15 	stw	r19,44(sp)
   1de6c:	843fffc4 	addi	r16,r16,-1
   1de70:	dfc01115 	stw	ra,68(sp)
   1de74:	df001015 	stw	fp,64(sp)
   1de78:	dd800e15 	stw	r22,56(sp)
   1de7c:	dd400d15 	stw	r21,52(sp)
   1de80:	dc800a15 	stw	r18,40(sp)
   1de84:	dc400915 	stw	r17,36(sp)
   1de88:	a501ffcc 	andi	r20,r20,2047
   1de8c:	2c20703a 	and	r16,r5,r16
   1de90:	b827883a 	mov	r19,r23
   1de94:	ba403fcc 	andi	r9,r23,255
   1de98:	a0006026 	beq	r20,zero,1e01c <__muldf3+0x1d0>
   1de9c:	0081ffc4 	movi	r2,2047
   1dea0:	202d883a 	mov	r22,r4
   1dea4:	a0803626 	beq	r20,r2,1df80 <__muldf3+0x134>
   1dea8:	84000434 	orhi	r16,r16,16
   1deac:	200ad77a 	srli	r5,r4,29
   1deb0:	800490fa 	slli	r2,r16,3
   1deb4:	202c90fa 	slli	r22,r4,3
   1deb8:	a53f0044 	addi	r20,r20,-1023
   1debc:	28a0b03a 	or	r16,r5,r2
   1dec0:	002b883a 	mov	r21,zero
   1dec4:	000b883a 	mov	r5,zero
   1dec8:	3804d53a 	srli	r2,r7,20
   1decc:	3838d7fa 	srli	fp,r7,31
   1ded0:	04400434 	movhi	r17,16
   1ded4:	8c7fffc4 	addi	r17,r17,-1
   1ded8:	1081ffcc 	andi	r2,r2,2047
   1dedc:	3025883a 	mov	r18,r6
   1dee0:	3c62703a 	and	r17,r7,r17
   1dee4:	e2803fcc 	andi	r10,fp,255
   1dee8:	10006d26 	beq	r2,zero,1e0a0 <__muldf3+0x254>
   1deec:	00c1ffc4 	movi	r3,2047
   1def0:	10c06526 	beq	r2,r3,1e088 <__muldf3+0x23c>
   1def4:	8c400434 	orhi	r17,r17,16
   1def8:	300ed77a 	srli	r7,r6,29
   1defc:	880690fa 	slli	r3,r17,3
   1df00:	302490fa 	slli	r18,r6,3
   1df04:	10bf0044 	addi	r2,r2,-1023
   1df08:	38e2b03a 	or	r17,r7,r3
   1df0c:	000f883a 	mov	r7,zero
   1df10:	a087883a 	add	r3,r20,r2
   1df14:	010003c4 	movi	r4,15
   1df18:	3d44b03a 	or	r2,r7,r21
   1df1c:	e5ccf03a 	xor	r6,fp,r23
   1df20:	1a000044 	addi	r8,r3,1
   1df24:	20809b36 	bltu	r4,r2,1e194 <__muldf3+0x348>
   1df28:	100490ba 	slli	r2,r2,2
   1df2c:	010000b4 	movhi	r4,2
   1df30:	2137d004 	addi	r4,r4,-8384
   1df34:	1105883a 	add	r2,r2,r4
   1df38:	10800017 	ldw	r2,0(r2)
   1df3c:	1000683a 	jmp	r2
   1df40:	0001e194 	movui	zero,1926
   1df44:	0001dfa0 	cmpeqi	zero,zero,1918
   1df48:	0001dfa0 	cmpeqi	zero,zero,1918
   1df4c:	0001df9c 	xori	zero,zero,1918
   1df50:	0001e170 	cmpltui	zero,zero,1925
   1df54:	0001e170 	cmpltui	zero,zero,1925
   1df58:	0001e158 	cmpnei	zero,zero,1925
   1df5c:	0001df9c 	xori	zero,zero,1918
   1df60:	0001e170 	cmpltui	zero,zero,1925
   1df64:	0001e158 	cmpnei	zero,zero,1925
   1df68:	0001e170 	cmpltui	zero,zero,1925
   1df6c:	0001df9c 	xori	zero,zero,1918
   1df70:	0001e180 	call	1e18 <_ZN3USB13AttemptConfigEhhhb+0x6c>
   1df74:	0001e180 	call	1e18 <_ZN3USB13AttemptConfigEhhhb+0x6c>
   1df78:	0001e180 	call	1e18 <_ZN3USB13AttemptConfigEhhhb+0x6c>
   1df7c:	0001e4e0 	cmpeqi	zero,zero,1939
   1df80:	2404b03a 	or	r2,r4,r16
   1df84:	1000711e 	bne	r2,zero,1e14c <__muldf3+0x300>
   1df88:	05400204 	movi	r21,8
   1df8c:	0021883a 	mov	r16,zero
   1df90:	002d883a 	mov	r22,zero
   1df94:	01400084 	movi	r5,2
   1df98:	003fcb06 	br	1dec8 <__alt_data_end+0xfc01dec8>
   1df9c:	500d883a 	mov	r6,r10
   1dfa0:	00800084 	movi	r2,2
   1dfa4:	38805926 	beq	r7,r2,1e10c <__muldf3+0x2c0>
   1dfa8:	008000c4 	movi	r2,3
   1dfac:	3881bb26 	beq	r7,r2,1e69c <__muldf3+0x850>
   1dfb0:	00800044 	movi	r2,1
   1dfb4:	3881961e 	bne	r7,r2,1e610 <__muldf3+0x7c4>
   1dfb8:	3027883a 	mov	r19,r6
   1dfbc:	0005883a 	mov	r2,zero
   1dfc0:	0021883a 	mov	r16,zero
   1dfc4:	002d883a 	mov	r22,zero
   1dfc8:	1004953a 	slli	r2,r2,20
   1dfcc:	98c03fcc 	andi	r3,r19,255
   1dfd0:	04400434 	movhi	r17,16
   1dfd4:	8c7fffc4 	addi	r17,r17,-1
   1dfd8:	180697fa 	slli	r3,r3,31
   1dfdc:	8460703a 	and	r16,r16,r17
   1dfe0:	80a0b03a 	or	r16,r16,r2
   1dfe4:	80c6b03a 	or	r3,r16,r3
   1dfe8:	b005883a 	mov	r2,r22
   1dfec:	dfc01117 	ldw	ra,68(sp)
   1dff0:	df001017 	ldw	fp,64(sp)
   1dff4:	ddc00f17 	ldw	r23,60(sp)
   1dff8:	dd800e17 	ldw	r22,56(sp)
   1dffc:	dd400d17 	ldw	r21,52(sp)
   1e000:	dd000c17 	ldw	r20,48(sp)
   1e004:	dcc00b17 	ldw	r19,44(sp)
   1e008:	dc800a17 	ldw	r18,40(sp)
   1e00c:	dc400917 	ldw	r17,36(sp)
   1e010:	dc000817 	ldw	r16,32(sp)
   1e014:	dec01204 	addi	sp,sp,72
   1e018:	f800283a 	ret
   1e01c:	2404b03a 	or	r2,r4,r16
   1e020:	202b883a 	mov	r21,r4
   1e024:	10004426 	beq	r2,zero,1e138 <__muldf3+0x2ec>
   1e028:	80015126 	beq	r16,zero,1e570 <__muldf3+0x724>
   1e02c:	8009883a 	mov	r4,r16
   1e030:	d9800715 	stw	r6,28(sp)
   1e034:	d9c00215 	stw	r7,8(sp)
   1e038:	da400415 	stw	r9,16(sp)
   1e03c:	000e6440 	call	e644 <__clzsi2>
   1e040:	d9800717 	ldw	r6,28(sp)
   1e044:	d9c00217 	ldw	r7,8(sp)
   1e048:	da400417 	ldw	r9,16(sp)
   1e04c:	113ffd44 	addi	r4,r2,-11
   1e050:	00c00704 	movi	r3,28
   1e054:	19014216 	blt	r3,r4,1e560 <__muldf3+0x714>
   1e058:	00c00744 	movi	r3,29
   1e05c:	15bffe04 	addi	r22,r2,-8
   1e060:	1907c83a 	sub	r3,r3,r4
   1e064:	85a0983a 	sll	r16,r16,r22
   1e068:	a8c6d83a 	srl	r3,r21,r3
   1e06c:	adac983a 	sll	r22,r21,r22
   1e070:	1c20b03a 	or	r16,r3,r16
   1e074:	1080fcc4 	addi	r2,r2,1011
   1e078:	00a9c83a 	sub	r20,zero,r2
   1e07c:	002b883a 	mov	r21,zero
   1e080:	000b883a 	mov	r5,zero
   1e084:	003f9006 	br	1dec8 <__alt_data_end+0xfc01dec8>
   1e088:	3446b03a 	or	r3,r6,r17
   1e08c:	1800281e 	bne	r3,zero,1e130 <__muldf3+0x2e4>
   1e090:	0023883a 	mov	r17,zero
   1e094:	0025883a 	mov	r18,zero
   1e098:	01c00084 	movi	r7,2
   1e09c:	003f9c06 	br	1df10 <__alt_data_end+0xfc01df10>
   1e0a0:	3446b03a 	or	r3,r6,r17
   1e0a4:	18001e26 	beq	r3,zero,1e120 <__muldf3+0x2d4>
   1e0a8:	88012126 	beq	r17,zero,1e530 <__muldf3+0x6e4>
   1e0ac:	8809883a 	mov	r4,r17
   1e0b0:	d9400215 	stw	r5,8(sp)
   1e0b4:	d9800715 	stw	r6,28(sp)
   1e0b8:	da400415 	stw	r9,16(sp)
   1e0bc:	da800315 	stw	r10,12(sp)
   1e0c0:	000e6440 	call	e644 <__clzsi2>
   1e0c4:	d9400217 	ldw	r5,8(sp)
   1e0c8:	d9800717 	ldw	r6,28(sp)
   1e0cc:	da400417 	ldw	r9,16(sp)
   1e0d0:	da800317 	ldw	r10,12(sp)
   1e0d4:	113ffd44 	addi	r4,r2,-11
   1e0d8:	00c00704 	movi	r3,28
   1e0dc:	19011016 	blt	r3,r4,1e520 <__muldf3+0x6d4>
   1e0e0:	00c00744 	movi	r3,29
   1e0e4:	14bffe04 	addi	r18,r2,-8
   1e0e8:	1907c83a 	sub	r3,r3,r4
   1e0ec:	8ca2983a 	sll	r17,r17,r18
   1e0f0:	30c6d83a 	srl	r3,r6,r3
   1e0f4:	34a4983a 	sll	r18,r6,r18
   1e0f8:	1c62b03a 	or	r17,r3,r17
   1e0fc:	1080fcc4 	addi	r2,r2,1011
   1e100:	0085c83a 	sub	r2,zero,r2
   1e104:	000f883a 	mov	r7,zero
   1e108:	003f8106 	br	1df10 <__alt_data_end+0xfc01df10>
   1e10c:	3027883a 	mov	r19,r6
   1e110:	0081ffc4 	movi	r2,2047
   1e114:	0021883a 	mov	r16,zero
   1e118:	002d883a 	mov	r22,zero
   1e11c:	003faa06 	br	1dfc8 <__alt_data_end+0xfc01dfc8>
   1e120:	0023883a 	mov	r17,zero
   1e124:	0025883a 	mov	r18,zero
   1e128:	01c00044 	movi	r7,1
   1e12c:	003f7806 	br	1df10 <__alt_data_end+0xfc01df10>
   1e130:	01c000c4 	movi	r7,3
   1e134:	003f7606 	br	1df10 <__alt_data_end+0xfc01df10>
   1e138:	05400104 	movi	r21,4
   1e13c:	0021883a 	mov	r16,zero
   1e140:	002d883a 	mov	r22,zero
   1e144:	01400044 	movi	r5,1
   1e148:	003f5f06 	br	1dec8 <__alt_data_end+0xfc01dec8>
   1e14c:	05400304 	movi	r21,12
   1e150:	014000c4 	movi	r5,3
   1e154:	003f5c06 	br	1dec8 <__alt_data_end+0xfc01dec8>
   1e158:	04000434 	movhi	r16,16
   1e15c:	0027883a 	mov	r19,zero
   1e160:	843fffc4 	addi	r16,r16,-1
   1e164:	05bfffc4 	movi	r22,-1
   1e168:	0081ffc4 	movi	r2,2047
   1e16c:	003f9606 	br	1dfc8 <__alt_data_end+0xfc01dfc8>
   1e170:	8023883a 	mov	r17,r16
   1e174:	b025883a 	mov	r18,r22
   1e178:	280f883a 	mov	r7,r5
   1e17c:	003f8806 	br	1dfa0 <__alt_data_end+0xfc01dfa0>
   1e180:	8023883a 	mov	r17,r16
   1e184:	b025883a 	mov	r18,r22
   1e188:	480d883a 	mov	r6,r9
   1e18c:	280f883a 	mov	r7,r5
   1e190:	003f8306 	br	1dfa0 <__alt_data_end+0xfc01dfa0>
   1e194:	b026d43a 	srli	r19,r22,16
   1e198:	902ed43a 	srli	r23,r18,16
   1e19c:	b5bfffcc 	andi	r22,r22,65535
   1e1a0:	94bfffcc 	andi	r18,r18,65535
   1e1a4:	b00b883a 	mov	r5,r22
   1e1a8:	9009883a 	mov	r4,r18
   1e1ac:	d8c00515 	stw	r3,20(sp)
   1e1b0:	d9800715 	stw	r6,28(sp)
   1e1b4:	da000615 	stw	r8,24(sp)
   1e1b8:	000d18c0 	call	d18c <__mulsi3>
   1e1bc:	980b883a 	mov	r5,r19
   1e1c0:	9009883a 	mov	r4,r18
   1e1c4:	1029883a 	mov	r20,r2
   1e1c8:	000d18c0 	call	d18c <__mulsi3>
   1e1cc:	b80b883a 	mov	r5,r23
   1e1d0:	9809883a 	mov	r4,r19
   1e1d4:	102b883a 	mov	r21,r2
   1e1d8:	000d18c0 	call	d18c <__mulsi3>
   1e1dc:	b809883a 	mov	r4,r23
   1e1e0:	b00b883a 	mov	r5,r22
   1e1e4:	1039883a 	mov	fp,r2
   1e1e8:	000d18c0 	call	d18c <__mulsi3>
   1e1ec:	a008d43a 	srli	r4,r20,16
   1e1f0:	1545883a 	add	r2,r2,r21
   1e1f4:	d8c00517 	ldw	r3,20(sp)
   1e1f8:	2085883a 	add	r2,r4,r2
   1e1fc:	d9800717 	ldw	r6,28(sp)
   1e200:	da000617 	ldw	r8,24(sp)
   1e204:	1540022e 	bgeu	r2,r21,1e210 <__muldf3+0x3c4>
   1e208:	01000074 	movhi	r4,1
   1e20c:	e139883a 	add	fp,fp,r4
   1e210:	100e943a 	slli	r7,r2,16
   1e214:	1004d43a 	srli	r2,r2,16
   1e218:	882ad43a 	srli	r21,r17,16
   1e21c:	a53fffcc 	andi	r20,r20,65535
   1e220:	8c7fffcc 	andi	r17,r17,65535
   1e224:	3d29883a 	add	r20,r7,r20
   1e228:	b00b883a 	mov	r5,r22
   1e22c:	8809883a 	mov	r4,r17
   1e230:	d8c00515 	stw	r3,20(sp)
   1e234:	d9800715 	stw	r6,28(sp)
   1e238:	da000615 	stw	r8,24(sp)
   1e23c:	dd000115 	stw	r20,4(sp)
   1e240:	d8800015 	stw	r2,0(sp)
   1e244:	000d18c0 	call	d18c <__mulsi3>
   1e248:	980b883a 	mov	r5,r19
   1e24c:	8809883a 	mov	r4,r17
   1e250:	d8800215 	stw	r2,8(sp)
   1e254:	000d18c0 	call	d18c <__mulsi3>
   1e258:	9809883a 	mov	r4,r19
   1e25c:	a80b883a 	mov	r5,r21
   1e260:	1029883a 	mov	r20,r2
   1e264:	000d18c0 	call	d18c <__mulsi3>
   1e268:	b00b883a 	mov	r5,r22
   1e26c:	a809883a 	mov	r4,r21
   1e270:	d8800415 	stw	r2,16(sp)
   1e274:	000d18c0 	call	d18c <__mulsi3>
   1e278:	d9c00217 	ldw	r7,8(sp)
   1e27c:	1505883a 	add	r2,r2,r20
   1e280:	d8c00517 	ldw	r3,20(sp)
   1e284:	3826d43a 	srli	r19,r7,16
   1e288:	d9800717 	ldw	r6,28(sp)
   1e28c:	da000617 	ldw	r8,24(sp)
   1e290:	9885883a 	add	r2,r19,r2
   1e294:	da400417 	ldw	r9,16(sp)
   1e298:	1500022e 	bgeu	r2,r20,1e2a4 <__muldf3+0x458>
   1e29c:	01000074 	movhi	r4,1
   1e2a0:	4913883a 	add	r9,r9,r4
   1e2a4:	1028d43a 	srli	r20,r2,16
   1e2a8:	1004943a 	slli	r2,r2,16
   1e2ac:	802cd43a 	srli	r22,r16,16
   1e2b0:	843fffcc 	andi	r16,r16,65535
   1e2b4:	3cffffcc 	andi	r19,r7,65535
   1e2b8:	9009883a 	mov	r4,r18
   1e2bc:	800b883a 	mov	r5,r16
   1e2c0:	a269883a 	add	r20,r20,r9
   1e2c4:	d8c00515 	stw	r3,20(sp)
   1e2c8:	d9800715 	stw	r6,28(sp)
   1e2cc:	da000615 	stw	r8,24(sp)
   1e2d0:	14e7883a 	add	r19,r2,r19
   1e2d4:	000d18c0 	call	d18c <__mulsi3>
   1e2d8:	9009883a 	mov	r4,r18
   1e2dc:	b00b883a 	mov	r5,r22
   1e2e0:	d8800315 	stw	r2,12(sp)
   1e2e4:	000d18c0 	call	d18c <__mulsi3>
   1e2e8:	b809883a 	mov	r4,r23
   1e2ec:	b00b883a 	mov	r5,r22
   1e2f0:	d8800215 	stw	r2,8(sp)
   1e2f4:	000d18c0 	call	d18c <__mulsi3>
   1e2f8:	b80b883a 	mov	r5,r23
   1e2fc:	8009883a 	mov	r4,r16
   1e300:	d8800415 	stw	r2,16(sp)
   1e304:	000d18c0 	call	d18c <__mulsi3>
   1e308:	da800317 	ldw	r10,12(sp)
   1e30c:	d9c00217 	ldw	r7,8(sp)
   1e310:	d9000017 	ldw	r4,0(sp)
   1e314:	502ed43a 	srli	r23,r10,16
   1e318:	11c5883a 	add	r2,r2,r7
   1e31c:	24e5883a 	add	r18,r4,r19
   1e320:	b885883a 	add	r2,r23,r2
   1e324:	d8c00517 	ldw	r3,20(sp)
   1e328:	d9800717 	ldw	r6,28(sp)
   1e32c:	da000617 	ldw	r8,24(sp)
   1e330:	da400417 	ldw	r9,16(sp)
   1e334:	11c0022e 	bgeu	r2,r7,1e340 <__muldf3+0x4f4>
   1e338:	01000074 	movhi	r4,1
   1e33c:	4913883a 	add	r9,r9,r4
   1e340:	100ed43a 	srli	r7,r2,16
   1e344:	1004943a 	slli	r2,r2,16
   1e348:	55ffffcc 	andi	r23,r10,65535
   1e34c:	3a53883a 	add	r9,r7,r9
   1e350:	8809883a 	mov	r4,r17
   1e354:	800b883a 	mov	r5,r16
   1e358:	d8c00515 	stw	r3,20(sp)
   1e35c:	d9800715 	stw	r6,28(sp)
   1e360:	da000615 	stw	r8,24(sp)
   1e364:	da400415 	stw	r9,16(sp)
   1e368:	15ef883a 	add	r23,r2,r23
   1e36c:	000d18c0 	call	d18c <__mulsi3>
   1e370:	8809883a 	mov	r4,r17
   1e374:	b00b883a 	mov	r5,r22
   1e378:	d8800215 	stw	r2,8(sp)
   1e37c:	000d18c0 	call	d18c <__mulsi3>
   1e380:	b00b883a 	mov	r5,r22
   1e384:	a809883a 	mov	r4,r21
   1e388:	d8800315 	stw	r2,12(sp)
   1e38c:	000d18c0 	call	d18c <__mulsi3>
   1e390:	8009883a 	mov	r4,r16
   1e394:	a80b883a 	mov	r5,r21
   1e398:	1023883a 	mov	r17,r2
   1e39c:	000d18c0 	call	d18c <__mulsi3>
   1e3a0:	d9c00217 	ldw	r7,8(sp)
   1e3a4:	da800317 	ldw	r10,12(sp)
   1e3a8:	d8c00517 	ldw	r3,20(sp)
   1e3ac:	3808d43a 	srli	r4,r7,16
   1e3b0:	1285883a 	add	r2,r2,r10
   1e3b4:	d9800717 	ldw	r6,28(sp)
   1e3b8:	2085883a 	add	r2,r4,r2
   1e3bc:	da000617 	ldw	r8,24(sp)
   1e3c0:	da400417 	ldw	r9,16(sp)
   1e3c4:	1280022e 	bgeu	r2,r10,1e3d0 <__muldf3+0x584>
   1e3c8:	01000074 	movhi	r4,1
   1e3cc:	8923883a 	add	r17,r17,r4
   1e3d0:	1008943a 	slli	r4,r2,16
   1e3d4:	39ffffcc 	andi	r7,r7,65535
   1e3d8:	e4b9883a 	add	fp,fp,r18
   1e3dc:	21cf883a 	add	r7,r4,r7
   1e3e0:	e4e7803a 	cmpltu	r19,fp,r19
   1e3e4:	3d0f883a 	add	r7,r7,r20
   1e3e8:	bf39883a 	add	fp,r23,fp
   1e3ec:	99c9883a 	add	r4,r19,r7
   1e3f0:	e5ef803a 	cmpltu	r23,fp,r23
   1e3f4:	490b883a 	add	r5,r9,r4
   1e3f8:	1004d43a 	srli	r2,r2,16
   1e3fc:	b965883a 	add	r18,r23,r5
   1e400:	24c9803a 	cmpltu	r4,r4,r19
   1e404:	3d29803a 	cmpltu	r20,r7,r20
   1e408:	a128b03a 	or	r20,r20,r4
   1e40c:	95ef803a 	cmpltu	r23,r18,r23
   1e410:	2a53803a 	cmpltu	r9,r5,r9
   1e414:	a0a9883a 	add	r20,r20,r2
   1e418:	4deeb03a 	or	r23,r9,r23
   1e41c:	a5ef883a 	add	r23,r20,r23
   1e420:	bc63883a 	add	r17,r23,r17
   1e424:	e004927a 	slli	r2,fp,9
   1e428:	d9000117 	ldw	r4,4(sp)
   1e42c:	882e927a 	slli	r23,r17,9
   1e430:	9022d5fa 	srli	r17,r18,23
   1e434:	e038d5fa 	srli	fp,fp,23
   1e438:	1104b03a 	or	r2,r2,r4
   1e43c:	9024927a 	slli	r18,r18,9
   1e440:	1004c03a 	cmpne	r2,r2,zero
   1e444:	bc62b03a 	or	r17,r23,r17
   1e448:	1738b03a 	or	fp,r2,fp
   1e44c:	8880402c 	andhi	r2,r17,256
   1e450:	e4a4b03a 	or	r18,fp,r18
   1e454:	10000726 	beq	r2,zero,1e474 <__muldf3+0x628>
   1e458:	9006d07a 	srli	r3,r18,1
   1e45c:	880497fa 	slli	r2,r17,31
   1e460:	9480004c 	andi	r18,r18,1
   1e464:	8822d07a 	srli	r17,r17,1
   1e468:	1ca4b03a 	or	r18,r3,r18
   1e46c:	14a4b03a 	or	r18,r2,r18
   1e470:	4007883a 	mov	r3,r8
   1e474:	1880ffc4 	addi	r2,r3,1023
   1e478:	0080460e 	bge	zero,r2,1e594 <__muldf3+0x748>
   1e47c:	910001cc 	andi	r4,r18,7
   1e480:	20000726 	beq	r4,zero,1e4a0 <__muldf3+0x654>
   1e484:	910003cc 	andi	r4,r18,15
   1e488:	01400104 	movi	r5,4
   1e48c:	21400426 	beq	r4,r5,1e4a0 <__muldf3+0x654>
   1e490:	9149883a 	add	r4,r18,r5
   1e494:	24a5803a 	cmpltu	r18,r4,r18
   1e498:	8ca3883a 	add	r17,r17,r18
   1e49c:	2025883a 	mov	r18,r4
   1e4a0:	8900402c 	andhi	r4,r17,256
   1e4a4:	20000426 	beq	r4,zero,1e4b8 <__muldf3+0x66c>
   1e4a8:	18810004 	addi	r2,r3,1024
   1e4ac:	00ffc034 	movhi	r3,65280
   1e4b0:	18ffffc4 	addi	r3,r3,-1
   1e4b4:	88e2703a 	and	r17,r17,r3
   1e4b8:	00c1ff84 	movi	r3,2046
   1e4bc:	18bf1316 	blt	r3,r2,1e10c <__alt_data_end+0xfc01e10c>
   1e4c0:	882c977a 	slli	r22,r17,29
   1e4c4:	9024d0fa 	srli	r18,r18,3
   1e4c8:	8822927a 	slli	r17,r17,9
   1e4cc:	1081ffcc 	andi	r2,r2,2047
   1e4d0:	b4acb03a 	or	r22,r22,r18
   1e4d4:	8820d33a 	srli	r16,r17,12
   1e4d8:	3027883a 	mov	r19,r6
   1e4dc:	003eba06 	br	1dfc8 <__alt_data_end+0xfc01dfc8>
   1e4e0:	8080022c 	andhi	r2,r16,8
   1e4e4:	10000926 	beq	r2,zero,1e50c <__muldf3+0x6c0>
   1e4e8:	8880022c 	andhi	r2,r17,8
   1e4ec:	1000071e 	bne	r2,zero,1e50c <__muldf3+0x6c0>
   1e4f0:	00800434 	movhi	r2,16
   1e4f4:	8c000234 	orhi	r16,r17,8
   1e4f8:	10bfffc4 	addi	r2,r2,-1
   1e4fc:	e027883a 	mov	r19,fp
   1e500:	80a0703a 	and	r16,r16,r2
   1e504:	902d883a 	mov	r22,r18
   1e508:	003f1706 	br	1e168 <__alt_data_end+0xfc01e168>
   1e50c:	00800434 	movhi	r2,16
   1e510:	84000234 	orhi	r16,r16,8
   1e514:	10bfffc4 	addi	r2,r2,-1
   1e518:	80a0703a 	and	r16,r16,r2
   1e51c:	003f1206 	br	1e168 <__alt_data_end+0xfc01e168>
   1e520:	147ff604 	addi	r17,r2,-40
   1e524:	3462983a 	sll	r17,r6,r17
   1e528:	0025883a 	mov	r18,zero
   1e52c:	003ef306 	br	1e0fc <__alt_data_end+0xfc01e0fc>
   1e530:	3009883a 	mov	r4,r6
   1e534:	d9400215 	stw	r5,8(sp)
   1e538:	d9800715 	stw	r6,28(sp)
   1e53c:	da400415 	stw	r9,16(sp)
   1e540:	da800315 	stw	r10,12(sp)
   1e544:	000e6440 	call	e644 <__clzsi2>
   1e548:	10800804 	addi	r2,r2,32
   1e54c:	da800317 	ldw	r10,12(sp)
   1e550:	da400417 	ldw	r9,16(sp)
   1e554:	d9800717 	ldw	r6,28(sp)
   1e558:	d9400217 	ldw	r5,8(sp)
   1e55c:	003edd06 	br	1e0d4 <__alt_data_end+0xfc01e0d4>
   1e560:	143ff604 	addi	r16,r2,-40
   1e564:	ac20983a 	sll	r16,r21,r16
   1e568:	002d883a 	mov	r22,zero
   1e56c:	003ec106 	br	1e074 <__alt_data_end+0xfc01e074>
   1e570:	d9800715 	stw	r6,28(sp)
   1e574:	d9c00215 	stw	r7,8(sp)
   1e578:	da400415 	stw	r9,16(sp)
   1e57c:	000e6440 	call	e644 <__clzsi2>
   1e580:	10800804 	addi	r2,r2,32
   1e584:	da400417 	ldw	r9,16(sp)
   1e588:	d9c00217 	ldw	r7,8(sp)
   1e58c:	d9800717 	ldw	r6,28(sp)
   1e590:	003eae06 	br	1e04c <__alt_data_end+0xfc01e04c>
   1e594:	00c00044 	movi	r3,1
   1e598:	1887c83a 	sub	r3,r3,r2
   1e59c:	01000e04 	movi	r4,56
   1e5a0:	20fe8516 	blt	r4,r3,1dfb8 <__alt_data_end+0xfc01dfb8>
   1e5a4:	010007c4 	movi	r4,31
   1e5a8:	20c01b16 	blt	r4,r3,1e618 <__muldf3+0x7cc>
   1e5ac:	00800804 	movi	r2,32
   1e5b0:	10c5c83a 	sub	r2,r2,r3
   1e5b4:	888a983a 	sll	r5,r17,r2
   1e5b8:	90c8d83a 	srl	r4,r18,r3
   1e5bc:	9084983a 	sll	r2,r18,r2
   1e5c0:	88e2d83a 	srl	r17,r17,r3
   1e5c4:	2906b03a 	or	r3,r5,r4
   1e5c8:	1004c03a 	cmpne	r2,r2,zero
   1e5cc:	1886b03a 	or	r3,r3,r2
   1e5d0:	188001cc 	andi	r2,r3,7
   1e5d4:	10000726 	beq	r2,zero,1e5f4 <__muldf3+0x7a8>
   1e5d8:	188003cc 	andi	r2,r3,15
   1e5dc:	01000104 	movi	r4,4
   1e5e0:	11000426 	beq	r2,r4,1e5f4 <__muldf3+0x7a8>
   1e5e4:	1805883a 	mov	r2,r3
   1e5e8:	10c00104 	addi	r3,r2,4
   1e5ec:	1885803a 	cmpltu	r2,r3,r2
   1e5f0:	88a3883a 	add	r17,r17,r2
   1e5f4:	8880202c 	andhi	r2,r17,128
   1e5f8:	10001c26 	beq	r2,zero,1e66c <__muldf3+0x820>
   1e5fc:	3027883a 	mov	r19,r6
   1e600:	00800044 	movi	r2,1
   1e604:	0021883a 	mov	r16,zero
   1e608:	002d883a 	mov	r22,zero
   1e60c:	003e6e06 	br	1dfc8 <__alt_data_end+0xfc01dfc8>
   1e610:	4007883a 	mov	r3,r8
   1e614:	003f9706 	br	1e474 <__alt_data_end+0xfc01e474>
   1e618:	017ff844 	movi	r5,-31
   1e61c:	2885c83a 	sub	r2,r5,r2
   1e620:	888ad83a 	srl	r5,r17,r2
   1e624:	00800804 	movi	r2,32
   1e628:	18801a26 	beq	r3,r2,1e694 <__muldf3+0x848>
   1e62c:	01001004 	movi	r4,64
   1e630:	20c7c83a 	sub	r3,r4,r3
   1e634:	88e2983a 	sll	r17,r17,r3
   1e638:	8ca4b03a 	or	r18,r17,r18
   1e63c:	9004c03a 	cmpne	r2,r18,zero
   1e640:	2884b03a 	or	r2,r5,r2
   1e644:	144001cc 	andi	r17,r2,7
   1e648:	88000d1e 	bne	r17,zero,1e680 <__muldf3+0x834>
   1e64c:	0021883a 	mov	r16,zero
   1e650:	102cd0fa 	srli	r22,r2,3
   1e654:	3027883a 	mov	r19,r6
   1e658:	0005883a 	mov	r2,zero
   1e65c:	b46cb03a 	or	r22,r22,r17
   1e660:	003e5906 	br	1dfc8 <__alt_data_end+0xfc01dfc8>
   1e664:	1007883a 	mov	r3,r2
   1e668:	0023883a 	mov	r17,zero
   1e66c:	8820927a 	slli	r16,r17,9
   1e670:	1805883a 	mov	r2,r3
   1e674:	8822977a 	slli	r17,r17,29
   1e678:	8020d33a 	srli	r16,r16,12
   1e67c:	003ff406 	br	1e650 <__alt_data_end+0xfc01e650>
   1e680:	10c003cc 	andi	r3,r2,15
   1e684:	01000104 	movi	r4,4
   1e688:	193ff626 	beq	r3,r4,1e664 <__alt_data_end+0xfc01e664>
   1e68c:	0023883a 	mov	r17,zero
   1e690:	003fd506 	br	1e5e8 <__alt_data_end+0xfc01e5e8>
   1e694:	0023883a 	mov	r17,zero
   1e698:	003fe706 	br	1e638 <__alt_data_end+0xfc01e638>
   1e69c:	00800434 	movhi	r2,16
   1e6a0:	8c000234 	orhi	r16,r17,8
   1e6a4:	10bfffc4 	addi	r2,r2,-1
   1e6a8:	3027883a 	mov	r19,r6
   1e6ac:	80a0703a 	and	r16,r16,r2
   1e6b0:	902d883a 	mov	r22,r18
   1e6b4:	003eac06 	br	1e168 <__alt_data_end+0xfc01e168>

0001e6b8 <__subdf3>:
   1e6b8:	02000434 	movhi	r8,16
   1e6bc:	423fffc4 	addi	r8,r8,-1
   1e6c0:	defffb04 	addi	sp,sp,-20
   1e6c4:	2a14703a 	and	r10,r5,r8
   1e6c8:	3812d53a 	srli	r9,r7,20
   1e6cc:	3a10703a 	and	r8,r7,r8
   1e6d0:	2006d77a 	srli	r3,r4,29
   1e6d4:	3004d77a 	srli	r2,r6,29
   1e6d8:	dc000015 	stw	r16,0(sp)
   1e6dc:	501490fa 	slli	r10,r10,3
   1e6e0:	2820d53a 	srli	r16,r5,20
   1e6e4:	401090fa 	slli	r8,r8,3
   1e6e8:	dc800215 	stw	r18,8(sp)
   1e6ec:	dc400115 	stw	r17,4(sp)
   1e6f0:	dfc00415 	stw	ra,16(sp)
   1e6f4:	202290fa 	slli	r17,r4,3
   1e6f8:	dcc00315 	stw	r19,12(sp)
   1e6fc:	4a41ffcc 	andi	r9,r9,2047
   1e700:	0101ffc4 	movi	r4,2047
   1e704:	2824d7fa 	srli	r18,r5,31
   1e708:	8401ffcc 	andi	r16,r16,2047
   1e70c:	50c6b03a 	or	r3,r10,r3
   1e710:	380ed7fa 	srli	r7,r7,31
   1e714:	408ab03a 	or	r5,r8,r2
   1e718:	300c90fa 	slli	r6,r6,3
   1e71c:	49009626 	beq	r9,r4,1e978 <__subdf3+0x2c0>
   1e720:	39c0005c 	xori	r7,r7,1
   1e724:	8245c83a 	sub	r2,r16,r9
   1e728:	3c807426 	beq	r7,r18,1e8fc <__subdf3+0x244>
   1e72c:	0080af0e 	bge	zero,r2,1e9ec <__subdf3+0x334>
   1e730:	48002a1e 	bne	r9,zero,1e7dc <__subdf3+0x124>
   1e734:	2988b03a 	or	r4,r5,r6
   1e738:	20009a1e 	bne	r4,zero,1e9a4 <__subdf3+0x2ec>
   1e73c:	888001cc 	andi	r2,r17,7
   1e740:	10000726 	beq	r2,zero,1e760 <__subdf3+0xa8>
   1e744:	888003cc 	andi	r2,r17,15
   1e748:	01000104 	movi	r4,4
   1e74c:	11000426 	beq	r2,r4,1e760 <__subdf3+0xa8>
   1e750:	890b883a 	add	r5,r17,r4
   1e754:	2c63803a 	cmpltu	r17,r5,r17
   1e758:	1c47883a 	add	r3,r3,r17
   1e75c:	2823883a 	mov	r17,r5
   1e760:	1880202c 	andhi	r2,r3,128
   1e764:	10005926 	beq	r2,zero,1e8cc <__subdf3+0x214>
   1e768:	84000044 	addi	r16,r16,1
   1e76c:	0081ffc4 	movi	r2,2047
   1e770:	8080be26 	beq	r16,r2,1ea6c <__subdf3+0x3b4>
   1e774:	017fe034 	movhi	r5,65408
   1e778:	297fffc4 	addi	r5,r5,-1
   1e77c:	1946703a 	and	r3,r3,r5
   1e780:	1804977a 	slli	r2,r3,29
   1e784:	1806927a 	slli	r3,r3,9
   1e788:	8822d0fa 	srli	r17,r17,3
   1e78c:	8401ffcc 	andi	r16,r16,2047
   1e790:	180ad33a 	srli	r5,r3,12
   1e794:	9100004c 	andi	r4,r18,1
   1e798:	1444b03a 	or	r2,r2,r17
   1e79c:	80c1ffcc 	andi	r3,r16,2047
   1e7a0:	1820953a 	slli	r16,r3,20
   1e7a4:	20c03fcc 	andi	r3,r4,255
   1e7a8:	180897fa 	slli	r4,r3,31
   1e7ac:	00c00434 	movhi	r3,16
   1e7b0:	18ffffc4 	addi	r3,r3,-1
   1e7b4:	28c6703a 	and	r3,r5,r3
   1e7b8:	1c06b03a 	or	r3,r3,r16
   1e7bc:	1906b03a 	or	r3,r3,r4
   1e7c0:	dfc00417 	ldw	ra,16(sp)
   1e7c4:	dcc00317 	ldw	r19,12(sp)
   1e7c8:	dc800217 	ldw	r18,8(sp)
   1e7cc:	dc400117 	ldw	r17,4(sp)
   1e7d0:	dc000017 	ldw	r16,0(sp)
   1e7d4:	dec00504 	addi	sp,sp,20
   1e7d8:	f800283a 	ret
   1e7dc:	0101ffc4 	movi	r4,2047
   1e7e0:	813fd626 	beq	r16,r4,1e73c <__alt_data_end+0xfc01e73c>
   1e7e4:	29402034 	orhi	r5,r5,128
   1e7e8:	01000e04 	movi	r4,56
   1e7ec:	2080a316 	blt	r4,r2,1ea7c <__subdf3+0x3c4>
   1e7f0:	010007c4 	movi	r4,31
   1e7f4:	2080c616 	blt	r4,r2,1eb10 <__subdf3+0x458>
   1e7f8:	01000804 	movi	r4,32
   1e7fc:	2089c83a 	sub	r4,r4,r2
   1e800:	2910983a 	sll	r8,r5,r4
   1e804:	308ed83a 	srl	r7,r6,r2
   1e808:	3108983a 	sll	r4,r6,r4
   1e80c:	2884d83a 	srl	r2,r5,r2
   1e810:	41ccb03a 	or	r6,r8,r7
   1e814:	2008c03a 	cmpne	r4,r4,zero
   1e818:	310cb03a 	or	r6,r6,r4
   1e81c:	898dc83a 	sub	r6,r17,r6
   1e820:	89a3803a 	cmpltu	r17,r17,r6
   1e824:	1887c83a 	sub	r3,r3,r2
   1e828:	1c47c83a 	sub	r3,r3,r17
   1e82c:	3023883a 	mov	r17,r6
   1e830:	1880202c 	andhi	r2,r3,128
   1e834:	10002326 	beq	r2,zero,1e8c4 <__subdf3+0x20c>
   1e838:	04c02034 	movhi	r19,128
   1e83c:	9cffffc4 	addi	r19,r19,-1
   1e840:	1ce6703a 	and	r19,r3,r19
   1e844:	98007a26 	beq	r19,zero,1ea30 <__subdf3+0x378>
   1e848:	9809883a 	mov	r4,r19
   1e84c:	000e6440 	call	e644 <__clzsi2>
   1e850:	113ffe04 	addi	r4,r2,-8
   1e854:	00c007c4 	movi	r3,31
   1e858:	19007b16 	blt	r3,r4,1ea48 <__subdf3+0x390>
   1e85c:	00800804 	movi	r2,32
   1e860:	1105c83a 	sub	r2,r2,r4
   1e864:	8884d83a 	srl	r2,r17,r2
   1e868:	9906983a 	sll	r3,r19,r4
   1e86c:	8922983a 	sll	r17,r17,r4
   1e870:	10c4b03a 	or	r2,r2,r3
   1e874:	24007816 	blt	r4,r16,1ea58 <__subdf3+0x3a0>
   1e878:	2421c83a 	sub	r16,r4,r16
   1e87c:	80c00044 	addi	r3,r16,1
   1e880:	010007c4 	movi	r4,31
   1e884:	20c09516 	blt	r4,r3,1eadc <__subdf3+0x424>
   1e888:	01400804 	movi	r5,32
   1e88c:	28cbc83a 	sub	r5,r5,r3
   1e890:	88c8d83a 	srl	r4,r17,r3
   1e894:	8962983a 	sll	r17,r17,r5
   1e898:	114a983a 	sll	r5,r2,r5
   1e89c:	10c6d83a 	srl	r3,r2,r3
   1e8a0:	8804c03a 	cmpne	r2,r17,zero
   1e8a4:	290ab03a 	or	r5,r5,r4
   1e8a8:	28a2b03a 	or	r17,r5,r2
   1e8ac:	0021883a 	mov	r16,zero
   1e8b0:	003fa206 	br	1e73c <__alt_data_end+0xfc01e73c>
   1e8b4:	2090b03a 	or	r8,r4,r2
   1e8b8:	40018e26 	beq	r8,zero,1eef4 <__subdf3+0x83c>
   1e8bc:	1007883a 	mov	r3,r2
   1e8c0:	2023883a 	mov	r17,r4
   1e8c4:	888001cc 	andi	r2,r17,7
   1e8c8:	103f9e1e 	bne	r2,zero,1e744 <__alt_data_end+0xfc01e744>
   1e8cc:	1804977a 	slli	r2,r3,29
   1e8d0:	8822d0fa 	srli	r17,r17,3
   1e8d4:	1810d0fa 	srli	r8,r3,3
   1e8d8:	9100004c 	andi	r4,r18,1
   1e8dc:	1444b03a 	or	r2,r2,r17
   1e8e0:	00c1ffc4 	movi	r3,2047
   1e8e4:	80c02826 	beq	r16,r3,1e988 <__subdf3+0x2d0>
   1e8e8:	01400434 	movhi	r5,16
   1e8ec:	297fffc4 	addi	r5,r5,-1
   1e8f0:	80e0703a 	and	r16,r16,r3
   1e8f4:	414a703a 	and	r5,r8,r5
   1e8f8:	003fa806 	br	1e79c <__alt_data_end+0xfc01e79c>
   1e8fc:	0080630e 	bge	zero,r2,1ea8c <__subdf3+0x3d4>
   1e900:	48003026 	beq	r9,zero,1e9c4 <__subdf3+0x30c>
   1e904:	0101ffc4 	movi	r4,2047
   1e908:	813f8c26 	beq	r16,r4,1e73c <__alt_data_end+0xfc01e73c>
   1e90c:	29402034 	orhi	r5,r5,128
   1e910:	01000e04 	movi	r4,56
   1e914:	2080a90e 	bge	r4,r2,1ebbc <__subdf3+0x504>
   1e918:	298cb03a 	or	r6,r5,r6
   1e91c:	3012c03a 	cmpne	r9,r6,zero
   1e920:	0005883a 	mov	r2,zero
   1e924:	4c53883a 	add	r9,r9,r17
   1e928:	4c63803a 	cmpltu	r17,r9,r17
   1e92c:	10c7883a 	add	r3,r2,r3
   1e930:	88c7883a 	add	r3,r17,r3
   1e934:	4823883a 	mov	r17,r9
   1e938:	1880202c 	andhi	r2,r3,128
   1e93c:	1000d026 	beq	r2,zero,1ec80 <__subdf3+0x5c8>
   1e940:	84000044 	addi	r16,r16,1
   1e944:	0081ffc4 	movi	r2,2047
   1e948:	8080fe26 	beq	r16,r2,1ed44 <__subdf3+0x68c>
   1e94c:	00bfe034 	movhi	r2,65408
   1e950:	10bfffc4 	addi	r2,r2,-1
   1e954:	1886703a 	and	r3,r3,r2
   1e958:	880ad07a 	srli	r5,r17,1
   1e95c:	180497fa 	slli	r2,r3,31
   1e960:	8900004c 	andi	r4,r17,1
   1e964:	2922b03a 	or	r17,r5,r4
   1e968:	1806d07a 	srli	r3,r3,1
   1e96c:	1462b03a 	or	r17,r2,r17
   1e970:	3825883a 	mov	r18,r7
   1e974:	003f7106 	br	1e73c <__alt_data_end+0xfc01e73c>
   1e978:	2984b03a 	or	r2,r5,r6
   1e97c:	103f6826 	beq	r2,zero,1e720 <__alt_data_end+0xfc01e720>
   1e980:	39c03fcc 	andi	r7,r7,255
   1e984:	003f6706 	br	1e724 <__alt_data_end+0xfc01e724>
   1e988:	4086b03a 	or	r3,r8,r2
   1e98c:	18015226 	beq	r3,zero,1eed8 <__subdf3+0x820>
   1e990:	00c00434 	movhi	r3,16
   1e994:	41400234 	orhi	r5,r8,8
   1e998:	18ffffc4 	addi	r3,r3,-1
   1e99c:	28ca703a 	and	r5,r5,r3
   1e9a0:	003f7e06 	br	1e79c <__alt_data_end+0xfc01e79c>
   1e9a4:	10bfffc4 	addi	r2,r2,-1
   1e9a8:	1000491e 	bne	r2,zero,1ead0 <__subdf3+0x418>
   1e9ac:	898fc83a 	sub	r7,r17,r6
   1e9b0:	89e3803a 	cmpltu	r17,r17,r7
   1e9b4:	1947c83a 	sub	r3,r3,r5
   1e9b8:	1c47c83a 	sub	r3,r3,r17
   1e9bc:	3823883a 	mov	r17,r7
   1e9c0:	003f9b06 	br	1e830 <__alt_data_end+0xfc01e830>
   1e9c4:	2988b03a 	or	r4,r5,r6
   1e9c8:	203f5c26 	beq	r4,zero,1e73c <__alt_data_end+0xfc01e73c>
   1e9cc:	10bfffc4 	addi	r2,r2,-1
   1e9d0:	1000931e 	bne	r2,zero,1ec20 <__subdf3+0x568>
   1e9d4:	898d883a 	add	r6,r17,r6
   1e9d8:	3463803a 	cmpltu	r17,r6,r17
   1e9dc:	1947883a 	add	r3,r3,r5
   1e9e0:	88c7883a 	add	r3,r17,r3
   1e9e4:	3023883a 	mov	r17,r6
   1e9e8:	003fd306 	br	1e938 <__alt_data_end+0xfc01e938>
   1e9ec:	1000541e 	bne	r2,zero,1eb40 <__subdf3+0x488>
   1e9f0:	80800044 	addi	r2,r16,1
   1e9f4:	1081ffcc 	andi	r2,r2,2047
   1e9f8:	01000044 	movi	r4,1
   1e9fc:	2080a20e 	bge	r4,r2,1ec88 <__subdf3+0x5d0>
   1ea00:	8989c83a 	sub	r4,r17,r6
   1ea04:	8905803a 	cmpltu	r2,r17,r4
   1ea08:	1967c83a 	sub	r19,r3,r5
   1ea0c:	98a7c83a 	sub	r19,r19,r2
   1ea10:	9880202c 	andhi	r2,r19,128
   1ea14:	10006326 	beq	r2,zero,1eba4 <__subdf3+0x4ec>
   1ea18:	3463c83a 	sub	r17,r6,r17
   1ea1c:	28c7c83a 	sub	r3,r5,r3
   1ea20:	344d803a 	cmpltu	r6,r6,r17
   1ea24:	19a7c83a 	sub	r19,r3,r6
   1ea28:	3825883a 	mov	r18,r7
   1ea2c:	983f861e 	bne	r19,zero,1e848 <__alt_data_end+0xfc01e848>
   1ea30:	8809883a 	mov	r4,r17
   1ea34:	000e6440 	call	e644 <__clzsi2>
   1ea38:	10800804 	addi	r2,r2,32
   1ea3c:	113ffe04 	addi	r4,r2,-8
   1ea40:	00c007c4 	movi	r3,31
   1ea44:	193f850e 	bge	r3,r4,1e85c <__alt_data_end+0xfc01e85c>
   1ea48:	10bff604 	addi	r2,r2,-40
   1ea4c:	8884983a 	sll	r2,r17,r2
   1ea50:	0023883a 	mov	r17,zero
   1ea54:	243f880e 	bge	r4,r16,1e878 <__alt_data_end+0xfc01e878>
   1ea58:	00ffe034 	movhi	r3,65408
   1ea5c:	18ffffc4 	addi	r3,r3,-1
   1ea60:	8121c83a 	sub	r16,r16,r4
   1ea64:	10c6703a 	and	r3,r2,r3
   1ea68:	003f3406 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ea6c:	9100004c 	andi	r4,r18,1
   1ea70:	000b883a 	mov	r5,zero
   1ea74:	0005883a 	mov	r2,zero
   1ea78:	003f4806 	br	1e79c <__alt_data_end+0xfc01e79c>
   1ea7c:	298cb03a 	or	r6,r5,r6
   1ea80:	300cc03a 	cmpne	r6,r6,zero
   1ea84:	0005883a 	mov	r2,zero
   1ea88:	003f6406 	br	1e81c <__alt_data_end+0xfc01e81c>
   1ea8c:	10009a1e 	bne	r2,zero,1ecf8 <__subdf3+0x640>
   1ea90:	82400044 	addi	r9,r16,1
   1ea94:	4881ffcc 	andi	r2,r9,2047
   1ea98:	02800044 	movi	r10,1
   1ea9c:	5080670e 	bge	r10,r2,1ec3c <__subdf3+0x584>
   1eaa0:	0081ffc4 	movi	r2,2047
   1eaa4:	4880af26 	beq	r9,r2,1ed64 <__subdf3+0x6ac>
   1eaa8:	898d883a 	add	r6,r17,r6
   1eaac:	1945883a 	add	r2,r3,r5
   1eab0:	3447803a 	cmpltu	r3,r6,r17
   1eab4:	1887883a 	add	r3,r3,r2
   1eab8:	182297fa 	slli	r17,r3,31
   1eabc:	300cd07a 	srli	r6,r6,1
   1eac0:	1806d07a 	srli	r3,r3,1
   1eac4:	4821883a 	mov	r16,r9
   1eac8:	89a2b03a 	or	r17,r17,r6
   1eacc:	003f1b06 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ead0:	0101ffc4 	movi	r4,2047
   1ead4:	813f441e 	bne	r16,r4,1e7e8 <__alt_data_end+0xfc01e7e8>
   1ead8:	003f1806 	br	1e73c <__alt_data_end+0xfc01e73c>
   1eadc:	843ff844 	addi	r16,r16,-31
   1eae0:	01400804 	movi	r5,32
   1eae4:	1408d83a 	srl	r4,r2,r16
   1eae8:	19405026 	beq	r3,r5,1ec2c <__subdf3+0x574>
   1eaec:	01401004 	movi	r5,64
   1eaf0:	28c7c83a 	sub	r3,r5,r3
   1eaf4:	10c4983a 	sll	r2,r2,r3
   1eaf8:	88a2b03a 	or	r17,r17,r2
   1eafc:	8822c03a 	cmpne	r17,r17,zero
   1eb00:	2462b03a 	or	r17,r4,r17
   1eb04:	0007883a 	mov	r3,zero
   1eb08:	0021883a 	mov	r16,zero
   1eb0c:	003f6d06 	br	1e8c4 <__alt_data_end+0xfc01e8c4>
   1eb10:	11fff804 	addi	r7,r2,-32
   1eb14:	01000804 	movi	r4,32
   1eb18:	29ced83a 	srl	r7,r5,r7
   1eb1c:	11004526 	beq	r2,r4,1ec34 <__subdf3+0x57c>
   1eb20:	01001004 	movi	r4,64
   1eb24:	2089c83a 	sub	r4,r4,r2
   1eb28:	2904983a 	sll	r2,r5,r4
   1eb2c:	118cb03a 	or	r6,r2,r6
   1eb30:	300cc03a 	cmpne	r6,r6,zero
   1eb34:	398cb03a 	or	r6,r7,r6
   1eb38:	0005883a 	mov	r2,zero
   1eb3c:	003f3706 	br	1e81c <__alt_data_end+0xfc01e81c>
   1eb40:	80002a26 	beq	r16,zero,1ebec <__subdf3+0x534>
   1eb44:	0101ffc4 	movi	r4,2047
   1eb48:	49006626 	beq	r9,r4,1ece4 <__subdf3+0x62c>
   1eb4c:	0085c83a 	sub	r2,zero,r2
   1eb50:	18c02034 	orhi	r3,r3,128
   1eb54:	01000e04 	movi	r4,56
   1eb58:	20807e16 	blt	r4,r2,1ed54 <__subdf3+0x69c>
   1eb5c:	010007c4 	movi	r4,31
   1eb60:	2080e716 	blt	r4,r2,1ef00 <__subdf3+0x848>
   1eb64:	01000804 	movi	r4,32
   1eb68:	2089c83a 	sub	r4,r4,r2
   1eb6c:	1914983a 	sll	r10,r3,r4
   1eb70:	8890d83a 	srl	r8,r17,r2
   1eb74:	8908983a 	sll	r4,r17,r4
   1eb78:	1884d83a 	srl	r2,r3,r2
   1eb7c:	5222b03a 	or	r17,r10,r8
   1eb80:	2006c03a 	cmpne	r3,r4,zero
   1eb84:	88e2b03a 	or	r17,r17,r3
   1eb88:	3463c83a 	sub	r17,r6,r17
   1eb8c:	2885c83a 	sub	r2,r5,r2
   1eb90:	344d803a 	cmpltu	r6,r6,r17
   1eb94:	1187c83a 	sub	r3,r2,r6
   1eb98:	4821883a 	mov	r16,r9
   1eb9c:	3825883a 	mov	r18,r7
   1eba0:	003f2306 	br	1e830 <__alt_data_end+0xfc01e830>
   1eba4:	24d0b03a 	or	r8,r4,r19
   1eba8:	40001b1e 	bne	r8,zero,1ec18 <__subdf3+0x560>
   1ebac:	0005883a 	mov	r2,zero
   1ebb0:	0009883a 	mov	r4,zero
   1ebb4:	0021883a 	mov	r16,zero
   1ebb8:	003f4906 	br	1e8e0 <__alt_data_end+0xfc01e8e0>
   1ebbc:	010007c4 	movi	r4,31
   1ebc0:	20803a16 	blt	r4,r2,1ecac <__subdf3+0x5f4>
   1ebc4:	01000804 	movi	r4,32
   1ebc8:	2089c83a 	sub	r4,r4,r2
   1ebcc:	2912983a 	sll	r9,r5,r4
   1ebd0:	3090d83a 	srl	r8,r6,r2
   1ebd4:	3108983a 	sll	r4,r6,r4
   1ebd8:	2884d83a 	srl	r2,r5,r2
   1ebdc:	4a12b03a 	or	r9,r9,r8
   1ebe0:	2008c03a 	cmpne	r4,r4,zero
   1ebe4:	4912b03a 	or	r9,r9,r4
   1ebe8:	003f4e06 	br	1e924 <__alt_data_end+0xfc01e924>
   1ebec:	1c48b03a 	or	r4,r3,r17
   1ebf0:	20003c26 	beq	r4,zero,1ece4 <__subdf3+0x62c>
   1ebf4:	0084303a 	nor	r2,zero,r2
   1ebf8:	1000381e 	bne	r2,zero,1ecdc <__subdf3+0x624>
   1ebfc:	3463c83a 	sub	r17,r6,r17
   1ec00:	28c5c83a 	sub	r2,r5,r3
   1ec04:	344d803a 	cmpltu	r6,r6,r17
   1ec08:	1187c83a 	sub	r3,r2,r6
   1ec0c:	4821883a 	mov	r16,r9
   1ec10:	3825883a 	mov	r18,r7
   1ec14:	003f0606 	br	1e830 <__alt_data_end+0xfc01e830>
   1ec18:	2023883a 	mov	r17,r4
   1ec1c:	003f0906 	br	1e844 <__alt_data_end+0xfc01e844>
   1ec20:	0101ffc4 	movi	r4,2047
   1ec24:	813f3a1e 	bne	r16,r4,1e910 <__alt_data_end+0xfc01e910>
   1ec28:	003ec406 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ec2c:	0005883a 	mov	r2,zero
   1ec30:	003fb106 	br	1eaf8 <__alt_data_end+0xfc01eaf8>
   1ec34:	0005883a 	mov	r2,zero
   1ec38:	003fbc06 	br	1eb2c <__alt_data_end+0xfc01eb2c>
   1ec3c:	1c44b03a 	or	r2,r3,r17
   1ec40:	80008e1e 	bne	r16,zero,1ee7c <__subdf3+0x7c4>
   1ec44:	1000c826 	beq	r2,zero,1ef68 <__subdf3+0x8b0>
   1ec48:	2984b03a 	or	r2,r5,r6
   1ec4c:	103ebb26 	beq	r2,zero,1e73c <__alt_data_end+0xfc01e73c>
   1ec50:	8989883a 	add	r4,r17,r6
   1ec54:	1945883a 	add	r2,r3,r5
   1ec58:	2447803a 	cmpltu	r3,r4,r17
   1ec5c:	1887883a 	add	r3,r3,r2
   1ec60:	1880202c 	andhi	r2,r3,128
   1ec64:	2023883a 	mov	r17,r4
   1ec68:	103f1626 	beq	r2,zero,1e8c4 <__alt_data_end+0xfc01e8c4>
   1ec6c:	00bfe034 	movhi	r2,65408
   1ec70:	10bfffc4 	addi	r2,r2,-1
   1ec74:	5021883a 	mov	r16,r10
   1ec78:	1886703a 	and	r3,r3,r2
   1ec7c:	003eaf06 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ec80:	3825883a 	mov	r18,r7
   1ec84:	003f0f06 	br	1e8c4 <__alt_data_end+0xfc01e8c4>
   1ec88:	1c44b03a 	or	r2,r3,r17
   1ec8c:	8000251e 	bne	r16,zero,1ed24 <__subdf3+0x66c>
   1ec90:	1000661e 	bne	r2,zero,1ee2c <__subdf3+0x774>
   1ec94:	2990b03a 	or	r8,r5,r6
   1ec98:	40009626 	beq	r8,zero,1eef4 <__subdf3+0x83c>
   1ec9c:	2807883a 	mov	r3,r5
   1eca0:	3023883a 	mov	r17,r6
   1eca4:	3825883a 	mov	r18,r7
   1eca8:	003ea406 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ecac:	127ff804 	addi	r9,r2,-32
   1ecb0:	01000804 	movi	r4,32
   1ecb4:	2a52d83a 	srl	r9,r5,r9
   1ecb8:	11008c26 	beq	r2,r4,1eeec <__subdf3+0x834>
   1ecbc:	01001004 	movi	r4,64
   1ecc0:	2085c83a 	sub	r2,r4,r2
   1ecc4:	2884983a 	sll	r2,r5,r2
   1ecc8:	118cb03a 	or	r6,r2,r6
   1eccc:	300cc03a 	cmpne	r6,r6,zero
   1ecd0:	4992b03a 	or	r9,r9,r6
   1ecd4:	0005883a 	mov	r2,zero
   1ecd8:	003f1206 	br	1e924 <__alt_data_end+0xfc01e924>
   1ecdc:	0101ffc4 	movi	r4,2047
   1ece0:	493f9c1e 	bne	r9,r4,1eb54 <__alt_data_end+0xfc01eb54>
   1ece4:	2807883a 	mov	r3,r5
   1ece8:	3023883a 	mov	r17,r6
   1ecec:	4821883a 	mov	r16,r9
   1ecf0:	3825883a 	mov	r18,r7
   1ecf4:	003e9106 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ecf8:	80001f1e 	bne	r16,zero,1ed78 <__subdf3+0x6c0>
   1ecfc:	1c48b03a 	or	r4,r3,r17
   1ed00:	20005a26 	beq	r4,zero,1ee6c <__subdf3+0x7b4>
   1ed04:	0084303a 	nor	r2,zero,r2
   1ed08:	1000561e 	bne	r2,zero,1ee64 <__subdf3+0x7ac>
   1ed0c:	89a3883a 	add	r17,r17,r6
   1ed10:	1945883a 	add	r2,r3,r5
   1ed14:	898d803a 	cmpltu	r6,r17,r6
   1ed18:	3087883a 	add	r3,r6,r2
   1ed1c:	4821883a 	mov	r16,r9
   1ed20:	003f0506 	br	1e938 <__alt_data_end+0xfc01e938>
   1ed24:	10002b1e 	bne	r2,zero,1edd4 <__subdf3+0x71c>
   1ed28:	2984b03a 	or	r2,r5,r6
   1ed2c:	10008026 	beq	r2,zero,1ef30 <__subdf3+0x878>
   1ed30:	2807883a 	mov	r3,r5
   1ed34:	3023883a 	mov	r17,r6
   1ed38:	3825883a 	mov	r18,r7
   1ed3c:	0401ffc4 	movi	r16,2047
   1ed40:	003e7e06 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ed44:	3809883a 	mov	r4,r7
   1ed48:	0011883a 	mov	r8,zero
   1ed4c:	0005883a 	mov	r2,zero
   1ed50:	003ee306 	br	1e8e0 <__alt_data_end+0xfc01e8e0>
   1ed54:	1c62b03a 	or	r17,r3,r17
   1ed58:	8822c03a 	cmpne	r17,r17,zero
   1ed5c:	0005883a 	mov	r2,zero
   1ed60:	003f8906 	br	1eb88 <__alt_data_end+0xfc01eb88>
   1ed64:	3809883a 	mov	r4,r7
   1ed68:	4821883a 	mov	r16,r9
   1ed6c:	0011883a 	mov	r8,zero
   1ed70:	0005883a 	mov	r2,zero
   1ed74:	003eda06 	br	1e8e0 <__alt_data_end+0xfc01e8e0>
   1ed78:	0101ffc4 	movi	r4,2047
   1ed7c:	49003b26 	beq	r9,r4,1ee6c <__subdf3+0x7b4>
   1ed80:	0085c83a 	sub	r2,zero,r2
   1ed84:	18c02034 	orhi	r3,r3,128
   1ed88:	01000e04 	movi	r4,56
   1ed8c:	20806e16 	blt	r4,r2,1ef48 <__subdf3+0x890>
   1ed90:	010007c4 	movi	r4,31
   1ed94:	20807716 	blt	r4,r2,1ef74 <__subdf3+0x8bc>
   1ed98:	01000804 	movi	r4,32
   1ed9c:	2089c83a 	sub	r4,r4,r2
   1eda0:	1914983a 	sll	r10,r3,r4
   1eda4:	8890d83a 	srl	r8,r17,r2
   1eda8:	8908983a 	sll	r4,r17,r4
   1edac:	1884d83a 	srl	r2,r3,r2
   1edb0:	5222b03a 	or	r17,r10,r8
   1edb4:	2006c03a 	cmpne	r3,r4,zero
   1edb8:	88e2b03a 	or	r17,r17,r3
   1edbc:	89a3883a 	add	r17,r17,r6
   1edc0:	1145883a 	add	r2,r2,r5
   1edc4:	898d803a 	cmpltu	r6,r17,r6
   1edc8:	3087883a 	add	r3,r6,r2
   1edcc:	4821883a 	mov	r16,r9
   1edd0:	003ed906 	br	1e938 <__alt_data_end+0xfc01e938>
   1edd4:	2984b03a 	or	r2,r5,r6
   1edd8:	10004226 	beq	r2,zero,1eee4 <__subdf3+0x82c>
   1eddc:	1808d0fa 	srli	r4,r3,3
   1ede0:	8822d0fa 	srli	r17,r17,3
   1ede4:	1806977a 	slli	r3,r3,29
   1ede8:	2080022c 	andhi	r2,r4,8
   1edec:	1c62b03a 	or	r17,r3,r17
   1edf0:	10000826 	beq	r2,zero,1ee14 <__subdf3+0x75c>
   1edf4:	2812d0fa 	srli	r9,r5,3
   1edf8:	4880022c 	andhi	r2,r9,8
   1edfc:	1000051e 	bne	r2,zero,1ee14 <__subdf3+0x75c>
   1ee00:	300cd0fa 	srli	r6,r6,3
   1ee04:	2804977a 	slli	r2,r5,29
   1ee08:	4809883a 	mov	r4,r9
   1ee0c:	3825883a 	mov	r18,r7
   1ee10:	11a2b03a 	or	r17,r2,r6
   1ee14:	8806d77a 	srli	r3,r17,29
   1ee18:	200890fa 	slli	r4,r4,3
   1ee1c:	882290fa 	slli	r17,r17,3
   1ee20:	0401ffc4 	movi	r16,2047
   1ee24:	1906b03a 	or	r3,r3,r4
   1ee28:	003e4406 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ee2c:	2984b03a 	or	r2,r5,r6
   1ee30:	103e4226 	beq	r2,zero,1e73c <__alt_data_end+0xfc01e73c>
   1ee34:	8989c83a 	sub	r4,r17,r6
   1ee38:	8911803a 	cmpltu	r8,r17,r4
   1ee3c:	1945c83a 	sub	r2,r3,r5
   1ee40:	1205c83a 	sub	r2,r2,r8
   1ee44:	1200202c 	andhi	r8,r2,128
   1ee48:	403e9a26 	beq	r8,zero,1e8b4 <__alt_data_end+0xfc01e8b4>
   1ee4c:	3463c83a 	sub	r17,r6,r17
   1ee50:	28c5c83a 	sub	r2,r5,r3
   1ee54:	344d803a 	cmpltu	r6,r6,r17
   1ee58:	1187c83a 	sub	r3,r2,r6
   1ee5c:	3825883a 	mov	r18,r7
   1ee60:	003e3606 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ee64:	0101ffc4 	movi	r4,2047
   1ee68:	493fc71e 	bne	r9,r4,1ed88 <__alt_data_end+0xfc01ed88>
   1ee6c:	2807883a 	mov	r3,r5
   1ee70:	3023883a 	mov	r17,r6
   1ee74:	4821883a 	mov	r16,r9
   1ee78:	003e3006 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ee7c:	10003626 	beq	r2,zero,1ef58 <__subdf3+0x8a0>
   1ee80:	2984b03a 	or	r2,r5,r6
   1ee84:	10001726 	beq	r2,zero,1eee4 <__subdf3+0x82c>
   1ee88:	1808d0fa 	srli	r4,r3,3
   1ee8c:	8822d0fa 	srli	r17,r17,3
   1ee90:	1806977a 	slli	r3,r3,29
   1ee94:	2080022c 	andhi	r2,r4,8
   1ee98:	1c62b03a 	or	r17,r3,r17
   1ee9c:	10000726 	beq	r2,zero,1eebc <__subdf3+0x804>
   1eea0:	2812d0fa 	srli	r9,r5,3
   1eea4:	4880022c 	andhi	r2,r9,8
   1eea8:	1000041e 	bne	r2,zero,1eebc <__subdf3+0x804>
   1eeac:	300cd0fa 	srli	r6,r6,3
   1eeb0:	2804977a 	slli	r2,r5,29
   1eeb4:	4809883a 	mov	r4,r9
   1eeb8:	11a2b03a 	or	r17,r2,r6
   1eebc:	8806d77a 	srli	r3,r17,29
   1eec0:	200890fa 	slli	r4,r4,3
   1eec4:	882290fa 	slli	r17,r17,3
   1eec8:	3825883a 	mov	r18,r7
   1eecc:	1906b03a 	or	r3,r3,r4
   1eed0:	0401ffc4 	movi	r16,2047
   1eed4:	003e1906 	br	1e73c <__alt_data_end+0xfc01e73c>
   1eed8:	000b883a 	mov	r5,zero
   1eedc:	0005883a 	mov	r2,zero
   1eee0:	003e2e06 	br	1e79c <__alt_data_end+0xfc01e79c>
   1eee4:	0401ffc4 	movi	r16,2047
   1eee8:	003e1406 	br	1e73c <__alt_data_end+0xfc01e73c>
   1eeec:	0005883a 	mov	r2,zero
   1eef0:	003f7506 	br	1ecc8 <__alt_data_end+0xfc01ecc8>
   1eef4:	0005883a 	mov	r2,zero
   1eef8:	0009883a 	mov	r4,zero
   1eefc:	003e7806 	br	1e8e0 <__alt_data_end+0xfc01e8e0>
   1ef00:	123ff804 	addi	r8,r2,-32
   1ef04:	01000804 	movi	r4,32
   1ef08:	1a10d83a 	srl	r8,r3,r8
   1ef0c:	11002526 	beq	r2,r4,1efa4 <__subdf3+0x8ec>
   1ef10:	01001004 	movi	r4,64
   1ef14:	2085c83a 	sub	r2,r4,r2
   1ef18:	1884983a 	sll	r2,r3,r2
   1ef1c:	1444b03a 	or	r2,r2,r17
   1ef20:	1004c03a 	cmpne	r2,r2,zero
   1ef24:	40a2b03a 	or	r17,r8,r2
   1ef28:	0005883a 	mov	r2,zero
   1ef2c:	003f1606 	br	1eb88 <__alt_data_end+0xfc01eb88>
   1ef30:	02000434 	movhi	r8,16
   1ef34:	0009883a 	mov	r4,zero
   1ef38:	423fffc4 	addi	r8,r8,-1
   1ef3c:	00bfffc4 	movi	r2,-1
   1ef40:	0401ffc4 	movi	r16,2047
   1ef44:	003e6606 	br	1e8e0 <__alt_data_end+0xfc01e8e0>
   1ef48:	1c62b03a 	or	r17,r3,r17
   1ef4c:	8822c03a 	cmpne	r17,r17,zero
   1ef50:	0005883a 	mov	r2,zero
   1ef54:	003f9906 	br	1edbc <__alt_data_end+0xfc01edbc>
   1ef58:	2807883a 	mov	r3,r5
   1ef5c:	3023883a 	mov	r17,r6
   1ef60:	0401ffc4 	movi	r16,2047
   1ef64:	003df506 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ef68:	2807883a 	mov	r3,r5
   1ef6c:	3023883a 	mov	r17,r6
   1ef70:	003df206 	br	1e73c <__alt_data_end+0xfc01e73c>
   1ef74:	123ff804 	addi	r8,r2,-32
   1ef78:	01000804 	movi	r4,32
   1ef7c:	1a10d83a 	srl	r8,r3,r8
   1ef80:	11000a26 	beq	r2,r4,1efac <__subdf3+0x8f4>
   1ef84:	01001004 	movi	r4,64
   1ef88:	2085c83a 	sub	r2,r4,r2
   1ef8c:	1884983a 	sll	r2,r3,r2
   1ef90:	1444b03a 	or	r2,r2,r17
   1ef94:	1004c03a 	cmpne	r2,r2,zero
   1ef98:	40a2b03a 	or	r17,r8,r2
   1ef9c:	0005883a 	mov	r2,zero
   1efa0:	003f8606 	br	1edbc <__alt_data_end+0xfc01edbc>
   1efa4:	0005883a 	mov	r2,zero
   1efa8:	003fdc06 	br	1ef1c <__alt_data_end+0xfc01ef1c>
   1efac:	0005883a 	mov	r2,zero
   1efb0:	003ff706 	br	1ef90 <__alt_data_end+0xfc01ef90>

0001efb4 <__fixdfsi>:
   1efb4:	280cd53a 	srli	r6,r5,20
   1efb8:	00c00434 	movhi	r3,16
   1efbc:	18ffffc4 	addi	r3,r3,-1
   1efc0:	3181ffcc 	andi	r6,r6,2047
   1efc4:	01c0ff84 	movi	r7,1022
   1efc8:	28c6703a 	and	r3,r5,r3
   1efcc:	280ad7fa 	srli	r5,r5,31
   1efd0:	3980120e 	bge	r7,r6,1f01c <__fixdfsi+0x68>
   1efd4:	00810744 	movi	r2,1053
   1efd8:	11800c16 	blt	r2,r6,1f00c <__fixdfsi+0x58>
   1efdc:	00810cc4 	movi	r2,1075
   1efe0:	1185c83a 	sub	r2,r2,r6
   1efe4:	01c007c4 	movi	r7,31
   1efe8:	18c00434 	orhi	r3,r3,16
   1efec:	38800d16 	blt	r7,r2,1f024 <__fixdfsi+0x70>
   1eff0:	31befb44 	addi	r6,r6,-1043
   1eff4:	2084d83a 	srl	r2,r4,r2
   1eff8:	1986983a 	sll	r3,r3,r6
   1effc:	1884b03a 	or	r2,r3,r2
   1f000:	28000726 	beq	r5,zero,1f020 <__fixdfsi+0x6c>
   1f004:	0085c83a 	sub	r2,zero,r2
   1f008:	f800283a 	ret
   1f00c:	00a00034 	movhi	r2,32768
   1f010:	10bfffc4 	addi	r2,r2,-1
   1f014:	2885883a 	add	r2,r5,r2
   1f018:	f800283a 	ret
   1f01c:	0005883a 	mov	r2,zero
   1f020:	f800283a 	ret
   1f024:	008104c4 	movi	r2,1043
   1f028:	1185c83a 	sub	r2,r2,r6
   1f02c:	1884d83a 	srl	r2,r3,r2
   1f030:	003ff306 	br	1f000 <__alt_data_end+0xfc01f000>

0001f034 <__floatsidf>:
   1f034:	defffd04 	addi	sp,sp,-12
   1f038:	dfc00215 	stw	ra,8(sp)
   1f03c:	dc400115 	stw	r17,4(sp)
   1f040:	dc000015 	stw	r16,0(sp)
   1f044:	20002b26 	beq	r4,zero,1f0f4 <__floatsidf+0xc0>
   1f048:	2023883a 	mov	r17,r4
   1f04c:	2020d7fa 	srli	r16,r4,31
   1f050:	20002d16 	blt	r4,zero,1f108 <__floatsidf+0xd4>
   1f054:	8809883a 	mov	r4,r17
   1f058:	000e6440 	call	e644 <__clzsi2>
   1f05c:	01410784 	movi	r5,1054
   1f060:	288bc83a 	sub	r5,r5,r2
   1f064:	01010cc4 	movi	r4,1075
   1f068:	2149c83a 	sub	r4,r4,r5
   1f06c:	00c007c4 	movi	r3,31
   1f070:	1900160e 	bge	r3,r4,1f0cc <__floatsidf+0x98>
   1f074:	00c104c4 	movi	r3,1043
   1f078:	1947c83a 	sub	r3,r3,r5
   1f07c:	88c6983a 	sll	r3,r17,r3
   1f080:	00800434 	movhi	r2,16
   1f084:	10bfffc4 	addi	r2,r2,-1
   1f088:	1886703a 	and	r3,r3,r2
   1f08c:	2941ffcc 	andi	r5,r5,2047
   1f090:	800d883a 	mov	r6,r16
   1f094:	0005883a 	mov	r2,zero
   1f098:	280a953a 	slli	r5,r5,20
   1f09c:	31803fcc 	andi	r6,r6,255
   1f0a0:	01000434 	movhi	r4,16
   1f0a4:	300c97fa 	slli	r6,r6,31
   1f0a8:	213fffc4 	addi	r4,r4,-1
   1f0ac:	1906703a 	and	r3,r3,r4
   1f0b0:	1946b03a 	or	r3,r3,r5
   1f0b4:	1986b03a 	or	r3,r3,r6
   1f0b8:	dfc00217 	ldw	ra,8(sp)
   1f0bc:	dc400117 	ldw	r17,4(sp)
   1f0c0:	dc000017 	ldw	r16,0(sp)
   1f0c4:	dec00304 	addi	sp,sp,12
   1f0c8:	f800283a 	ret
   1f0cc:	00c002c4 	movi	r3,11
   1f0d0:	1887c83a 	sub	r3,r3,r2
   1f0d4:	88c6d83a 	srl	r3,r17,r3
   1f0d8:	8904983a 	sll	r2,r17,r4
   1f0dc:	01000434 	movhi	r4,16
   1f0e0:	213fffc4 	addi	r4,r4,-1
   1f0e4:	2941ffcc 	andi	r5,r5,2047
   1f0e8:	1906703a 	and	r3,r3,r4
   1f0ec:	800d883a 	mov	r6,r16
   1f0f0:	003fe906 	br	1f098 <__alt_data_end+0xfc01f098>
   1f0f4:	000d883a 	mov	r6,zero
   1f0f8:	000b883a 	mov	r5,zero
   1f0fc:	0007883a 	mov	r3,zero
   1f100:	0005883a 	mov	r2,zero
   1f104:	003fe406 	br	1f098 <__alt_data_end+0xfc01f098>
   1f108:	0123c83a 	sub	r17,zero,r4
   1f10c:	003fd106 	br	1f054 <__alt_data_end+0xfc01f054>

0001f110 <__floatunsidf>:
   1f110:	defffe04 	addi	sp,sp,-8
   1f114:	dc000015 	stw	r16,0(sp)
   1f118:	dfc00115 	stw	ra,4(sp)
   1f11c:	2021883a 	mov	r16,r4
   1f120:	20002226 	beq	r4,zero,1f1ac <__floatunsidf+0x9c>
   1f124:	000e6440 	call	e644 <__clzsi2>
   1f128:	01010784 	movi	r4,1054
   1f12c:	2089c83a 	sub	r4,r4,r2
   1f130:	01810cc4 	movi	r6,1075
   1f134:	310dc83a 	sub	r6,r6,r4
   1f138:	00c007c4 	movi	r3,31
   1f13c:	1980120e 	bge	r3,r6,1f188 <__floatunsidf+0x78>
   1f140:	00c104c4 	movi	r3,1043
   1f144:	1907c83a 	sub	r3,r3,r4
   1f148:	80ca983a 	sll	r5,r16,r3
   1f14c:	00800434 	movhi	r2,16
   1f150:	10bfffc4 	addi	r2,r2,-1
   1f154:	2101ffcc 	andi	r4,r4,2047
   1f158:	0021883a 	mov	r16,zero
   1f15c:	288a703a 	and	r5,r5,r2
   1f160:	2008953a 	slli	r4,r4,20
   1f164:	00c00434 	movhi	r3,16
   1f168:	18ffffc4 	addi	r3,r3,-1
   1f16c:	28c6703a 	and	r3,r5,r3
   1f170:	8005883a 	mov	r2,r16
   1f174:	1906b03a 	or	r3,r3,r4
   1f178:	dfc00117 	ldw	ra,4(sp)
   1f17c:	dc000017 	ldw	r16,0(sp)
   1f180:	dec00204 	addi	sp,sp,8
   1f184:	f800283a 	ret
   1f188:	00c002c4 	movi	r3,11
   1f18c:	188bc83a 	sub	r5,r3,r2
   1f190:	814ad83a 	srl	r5,r16,r5
   1f194:	00c00434 	movhi	r3,16
   1f198:	18ffffc4 	addi	r3,r3,-1
   1f19c:	81a0983a 	sll	r16,r16,r6
   1f1a0:	2101ffcc 	andi	r4,r4,2047
   1f1a4:	28ca703a 	and	r5,r5,r3
   1f1a8:	003fed06 	br	1f160 <__alt_data_end+0xfc01f160>
   1f1ac:	0009883a 	mov	r4,zero
   1f1b0:	000b883a 	mov	r5,zero
   1f1b4:	003fea06 	br	1f160 <__alt_data_end+0xfc01f160>

0001f1b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f1b8:	defffe04 	addi	sp,sp,-8
   1f1bc:	dfc00115 	stw	ra,4(sp)
   1f1c0:	df000015 	stw	fp,0(sp)
   1f1c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f1c8:	d0a5bb17 	ldw	r2,-26900(gp)
   1f1cc:	10000326 	beq	r2,zero,1f1dc <alt_get_errno+0x24>
   1f1d0:	d0a5bb17 	ldw	r2,-26900(gp)
   1f1d4:	103ee83a 	callr	r2
   1f1d8:	00000106 	br	1f1e0 <alt_get_errno+0x28>
   1f1dc:	d0b24704 	addi	r2,gp,-14052
}
   1f1e0:	e037883a 	mov	sp,fp
   1f1e4:	dfc00117 	ldw	ra,4(sp)
   1f1e8:	df000017 	ldw	fp,0(sp)
   1f1ec:	dec00204 	addi	sp,sp,8
   1f1f0:	f800283a 	ret

0001f1f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1f1f4:	defffb04 	addi	sp,sp,-20
   1f1f8:	dfc00415 	stw	ra,16(sp)
   1f1fc:	df000315 	stw	fp,12(sp)
   1f200:	df000304 	addi	fp,sp,12
   1f204:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1f208:	e0bfff17 	ldw	r2,-4(fp)
   1f20c:	10000816 	blt	r2,zero,1f230 <close+0x3c>
   1f210:	01400304 	movi	r5,12
   1f214:	e13fff17 	ldw	r4,-4(fp)
   1f218:	000d18c0 	call	d18c <__mulsi3>
   1f21c:	1007883a 	mov	r3,r2
   1f220:	008000f4 	movhi	r2,3
   1f224:	10ae1404 	addi	r2,r2,-18352
   1f228:	1885883a 	add	r2,r3,r2
   1f22c:	00000106 	br	1f234 <close+0x40>
   1f230:	0005883a 	mov	r2,zero
   1f234:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1f238:	e0bffd17 	ldw	r2,-12(fp)
   1f23c:	10001926 	beq	r2,zero,1f2a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1f240:	e0bffd17 	ldw	r2,-12(fp)
   1f244:	10800017 	ldw	r2,0(r2)
   1f248:	10800417 	ldw	r2,16(r2)
   1f24c:	10000626 	beq	r2,zero,1f268 <close+0x74>
   1f250:	e0bffd17 	ldw	r2,-12(fp)
   1f254:	10800017 	ldw	r2,0(r2)
   1f258:	10800417 	ldw	r2,16(r2)
   1f25c:	e13ffd17 	ldw	r4,-12(fp)
   1f260:	103ee83a 	callr	r2
   1f264:	00000106 	br	1f26c <close+0x78>
   1f268:	0005883a 	mov	r2,zero
   1f26c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1f270:	e13fff17 	ldw	r4,-4(fp)
   1f274:	001fa9c0 	call	1fa9c <alt_release_fd>
    if (rval < 0)
   1f278:	e0bffe17 	ldw	r2,-8(fp)
   1f27c:	1000070e 	bge	r2,zero,1f29c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1f280:	001f1b80 	call	1f1b8 <alt_get_errno>
   1f284:	1007883a 	mov	r3,r2
   1f288:	e0bffe17 	ldw	r2,-8(fp)
   1f28c:	0085c83a 	sub	r2,zero,r2
   1f290:	18800015 	stw	r2,0(r3)
      return -1;
   1f294:	00bfffc4 	movi	r2,-1
   1f298:	00000706 	br	1f2b8 <close+0xc4>
    }
    return 0;
   1f29c:	0005883a 	mov	r2,zero
   1f2a0:	00000506 	br	1f2b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f2a4:	001f1b80 	call	1f1b8 <alt_get_errno>
   1f2a8:	1007883a 	mov	r3,r2
   1f2ac:	00801444 	movi	r2,81
   1f2b0:	18800015 	stw	r2,0(r3)
    return -1;
   1f2b4:	00bfffc4 	movi	r2,-1
  }
}
   1f2b8:	e037883a 	mov	sp,fp
   1f2bc:	dfc00117 	ldw	ra,4(sp)
   1f2c0:	df000017 	ldw	fp,0(sp)
   1f2c4:	dec00204 	addi	sp,sp,8
   1f2c8:	f800283a 	ret

0001f2cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1f2cc:	defffc04 	addi	sp,sp,-16
   1f2d0:	df000315 	stw	fp,12(sp)
   1f2d4:	df000304 	addi	fp,sp,12
   1f2d8:	e13ffd15 	stw	r4,-12(fp)
   1f2dc:	e17ffe15 	stw	r5,-8(fp)
   1f2e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1f2e4:	e0bfff17 	ldw	r2,-4(fp)
}
   1f2e8:	e037883a 	mov	sp,fp
   1f2ec:	df000017 	ldw	fp,0(sp)
   1f2f0:	dec00104 	addi	sp,sp,4
   1f2f4:	f800283a 	ret

0001f2f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1f2f8:	defffd04 	addi	sp,sp,-12
   1f2fc:	df000215 	stw	fp,8(sp)
   1f300:	df000204 	addi	fp,sp,8
   1f304:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1f308:	0001883a 	nop
   1f30c:	e0bfff17 	ldw	r2,-4(fp)
   1f310:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1f314:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1f318:	10000226 	beq	r2,zero,1f324 <_exit+0x2c>
    ALT_SIM_FAIL();
   1f31c:	002af070 	cmpltui	zero,zero,43969
   1f320:	00000106 	br	1f328 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1f324:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1f328:	003fff06 	br	1f328 <__alt_data_end+0xfc01f328>

0001f32c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f32c:	defffe04 	addi	sp,sp,-8
   1f330:	dfc00115 	stw	ra,4(sp)
   1f334:	df000015 	stw	fp,0(sp)
   1f338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f33c:	d0a5bb17 	ldw	r2,-26900(gp)
   1f340:	10000326 	beq	r2,zero,1f350 <alt_get_errno+0x24>
   1f344:	d0a5bb17 	ldw	r2,-26900(gp)
   1f348:	103ee83a 	callr	r2
   1f34c:	00000106 	br	1f354 <alt_get_errno+0x28>
   1f350:	d0b24704 	addi	r2,gp,-14052
}
   1f354:	e037883a 	mov	sp,fp
   1f358:	dfc00117 	ldw	ra,4(sp)
   1f35c:	df000017 	ldw	fp,0(sp)
   1f360:	dec00204 	addi	sp,sp,8
   1f364:	f800283a 	ret

0001f368 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1f368:	defffb04 	addi	sp,sp,-20
   1f36c:	dfc00415 	stw	ra,16(sp)
   1f370:	df000315 	stw	fp,12(sp)
   1f374:	df000304 	addi	fp,sp,12
   1f378:	e13ffe15 	stw	r4,-8(fp)
   1f37c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f380:	e0bffe17 	ldw	r2,-8(fp)
   1f384:	10000816 	blt	r2,zero,1f3a8 <fstat+0x40>
   1f388:	01400304 	movi	r5,12
   1f38c:	e13ffe17 	ldw	r4,-8(fp)
   1f390:	000d18c0 	call	d18c <__mulsi3>
   1f394:	1007883a 	mov	r3,r2
   1f398:	008000f4 	movhi	r2,3
   1f39c:	10ae1404 	addi	r2,r2,-18352
   1f3a0:	1885883a 	add	r2,r3,r2
   1f3a4:	00000106 	br	1f3ac <fstat+0x44>
   1f3a8:	0005883a 	mov	r2,zero
   1f3ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1f3b0:	e0bffd17 	ldw	r2,-12(fp)
   1f3b4:	10001026 	beq	r2,zero,1f3f8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1f3b8:	e0bffd17 	ldw	r2,-12(fp)
   1f3bc:	10800017 	ldw	r2,0(r2)
   1f3c0:	10800817 	ldw	r2,32(r2)
   1f3c4:	10000726 	beq	r2,zero,1f3e4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1f3c8:	e0bffd17 	ldw	r2,-12(fp)
   1f3cc:	10800017 	ldw	r2,0(r2)
   1f3d0:	10800817 	ldw	r2,32(r2)
   1f3d4:	e17fff17 	ldw	r5,-4(fp)
   1f3d8:	e13ffd17 	ldw	r4,-12(fp)
   1f3dc:	103ee83a 	callr	r2
   1f3e0:	00000a06 	br	1f40c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1f3e4:	e0bfff17 	ldw	r2,-4(fp)
   1f3e8:	00c80004 	movi	r3,8192
   1f3ec:	10c00115 	stw	r3,4(r2)
      return 0;
   1f3f0:	0005883a 	mov	r2,zero
   1f3f4:	00000506 	br	1f40c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f3f8:	001f32c0 	call	1f32c <alt_get_errno>
   1f3fc:	1007883a 	mov	r3,r2
   1f400:	00801444 	movi	r2,81
   1f404:	18800015 	stw	r2,0(r3)
    return -1;
   1f408:	00bfffc4 	movi	r2,-1
  }
}
   1f40c:	e037883a 	mov	sp,fp
   1f410:	dfc00117 	ldw	ra,4(sp)
   1f414:	df000017 	ldw	fp,0(sp)
   1f418:	dec00204 	addi	sp,sp,8
   1f41c:	f800283a 	ret

0001f420 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1f420:	deffff04 	addi	sp,sp,-4
   1f424:	df000015 	stw	fp,0(sp)
   1f428:	d839883a 	mov	fp,sp
  return 0;
   1f42c:	0005883a 	mov	r2,zero
}
   1f430:	e037883a 	mov	sp,fp
   1f434:	df000017 	ldw	fp,0(sp)
   1f438:	dec00104 	addi	sp,sp,4
   1f43c:	f800283a 	ret

0001f440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f440:	defffe04 	addi	sp,sp,-8
   1f444:	dfc00115 	stw	ra,4(sp)
   1f448:	df000015 	stw	fp,0(sp)
   1f44c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f450:	d0a5bb17 	ldw	r2,-26900(gp)
   1f454:	10000326 	beq	r2,zero,1f464 <alt_get_errno+0x24>
   1f458:	d0a5bb17 	ldw	r2,-26900(gp)
   1f45c:	103ee83a 	callr	r2
   1f460:	00000106 	br	1f468 <alt_get_errno+0x28>
   1f464:	d0b24704 	addi	r2,gp,-14052
}
   1f468:	e037883a 	mov	sp,fp
   1f46c:	dfc00117 	ldw	ra,4(sp)
   1f470:	df000017 	ldw	fp,0(sp)
   1f474:	dec00204 	addi	sp,sp,8
   1f478:	f800283a 	ret

0001f47c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1f47c:	deffed04 	addi	sp,sp,-76
   1f480:	dfc01215 	stw	ra,72(sp)
   1f484:	df001115 	stw	fp,68(sp)
   1f488:	df001104 	addi	fp,sp,68
   1f48c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f490:	e0bfff17 	ldw	r2,-4(fp)
   1f494:	10000816 	blt	r2,zero,1f4b8 <isatty+0x3c>
   1f498:	01400304 	movi	r5,12
   1f49c:	e13fff17 	ldw	r4,-4(fp)
   1f4a0:	000d18c0 	call	d18c <__mulsi3>
   1f4a4:	1007883a 	mov	r3,r2
   1f4a8:	008000f4 	movhi	r2,3
   1f4ac:	10ae1404 	addi	r2,r2,-18352
   1f4b0:	1885883a 	add	r2,r3,r2
   1f4b4:	00000106 	br	1f4bc <isatty+0x40>
   1f4b8:	0005883a 	mov	r2,zero
   1f4bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1f4c0:	e0bfef17 	ldw	r2,-68(fp)
   1f4c4:	10000e26 	beq	r2,zero,1f500 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1f4c8:	e0bfef17 	ldw	r2,-68(fp)
   1f4cc:	10800017 	ldw	r2,0(r2)
   1f4d0:	10800817 	ldw	r2,32(r2)
   1f4d4:	1000021e 	bne	r2,zero,1f4e0 <isatty+0x64>
    {
      return 1;
   1f4d8:	00800044 	movi	r2,1
   1f4dc:	00000d06 	br	1f514 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1f4e0:	e0bff004 	addi	r2,fp,-64
   1f4e4:	100b883a 	mov	r5,r2
   1f4e8:	e13fff17 	ldw	r4,-4(fp)
   1f4ec:	001f3680 	call	1f368 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1f4f0:	e0bff117 	ldw	r2,-60(fp)
   1f4f4:	10880020 	cmpeqi	r2,r2,8192
   1f4f8:	10803fcc 	andi	r2,r2,255
   1f4fc:	00000506 	br	1f514 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f500:	001f4400 	call	1f440 <alt_get_errno>
   1f504:	1007883a 	mov	r3,r2
   1f508:	00801444 	movi	r2,81
   1f50c:	18800015 	stw	r2,0(r3)
    return 0;
   1f510:	0005883a 	mov	r2,zero
  }
}
   1f514:	e037883a 	mov	sp,fp
   1f518:	dfc00117 	ldw	ra,4(sp)
   1f51c:	df000017 	ldw	fp,0(sp)
   1f520:	dec00204 	addi	sp,sp,8
   1f524:	f800283a 	ret

0001f528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f528:	defffe04 	addi	sp,sp,-8
   1f52c:	dfc00115 	stw	ra,4(sp)
   1f530:	df000015 	stw	fp,0(sp)
   1f534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f538:	d0a5bb17 	ldw	r2,-26900(gp)
   1f53c:	10000326 	beq	r2,zero,1f54c <alt_get_errno+0x24>
   1f540:	d0a5bb17 	ldw	r2,-26900(gp)
   1f544:	103ee83a 	callr	r2
   1f548:	00000106 	br	1f550 <alt_get_errno+0x28>
   1f54c:	d0b24704 	addi	r2,gp,-14052
}
   1f550:	e037883a 	mov	sp,fp
   1f554:	dfc00117 	ldw	ra,4(sp)
   1f558:	df000017 	ldw	fp,0(sp)
   1f55c:	dec00204 	addi	sp,sp,8
   1f560:	f800283a 	ret

0001f564 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1f564:	defffb04 	addi	sp,sp,-20
   1f568:	dfc00415 	stw	ra,16(sp)
   1f56c:	df000315 	stw	fp,12(sp)
   1f570:	df000304 	addi	fp,sp,12
   1f574:	e13ffe15 	stw	r4,-8(fp)
   1f578:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1f57c:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1f580:	e0bffe17 	ldw	r2,-8(fp)
   1f584:	00802f16 	blt	zero,r2,1f644 <kill+0xe0>
  {
    switch (sig)
   1f588:	e0bfff17 	ldw	r2,-4(fp)
   1f58c:	10800828 	cmpgeui	r2,r2,32
   1f590:	1000291e 	bne	r2,zero,1f638 <kill+0xd4>
   1f594:	e0bfff17 	ldw	r2,-4(fp)
   1f598:	100690ba 	slli	r3,r2,2
   1f59c:	008000b4 	movhi	r2,2
   1f5a0:	10bd6c04 	addi	r2,r2,-2640
   1f5a4:	1885883a 	add	r2,r3,r2
   1f5a8:	10800017 	ldw	r2,0(r2)
   1f5ac:	1000683a 	jmp	r2
   1f5b0:	0001f658 	cmpnei	zero,zero,2009
   1f5b4:	0001f638 	rdprs	zero,zero,2008
   1f5b8:	0001f638 	rdprs	zero,zero,2008
   1f5bc:	0001f630 	cmpltui	zero,zero,2008
   1f5c0:	0001f630 	cmpltui	zero,zero,2008
   1f5c4:	0001f630 	cmpltui	zero,zero,2008
   1f5c8:	0001f630 	cmpltui	zero,zero,2008
   1f5cc:	0001f638 	rdprs	zero,zero,2008
   1f5d0:	0001f630 	cmpltui	zero,zero,2008
   1f5d4:	0001f630 	cmpltui	zero,zero,2008
   1f5d8:	0001f630 	cmpltui	zero,zero,2008
   1f5dc:	0001f630 	cmpltui	zero,zero,2008
   1f5e0:	0001f630 	cmpltui	zero,zero,2008
   1f5e4:	0001f630 	cmpltui	zero,zero,2008
   1f5e8:	0001f630 	cmpltui	zero,zero,2008
   1f5ec:	0001f630 	cmpltui	zero,zero,2008
   1f5f0:	0001f658 	cmpnei	zero,zero,2009
   1f5f4:	0001f638 	rdprs	zero,zero,2008
   1f5f8:	0001f638 	rdprs	zero,zero,2008
   1f5fc:	0001f638 	rdprs	zero,zero,2008
   1f600:	0001f658 	cmpnei	zero,zero,2009
   1f604:	0001f638 	rdprs	zero,zero,2008
   1f608:	0001f638 	rdprs	zero,zero,2008
   1f60c:	0001f630 	cmpltui	zero,zero,2008
   1f610:	0001f630 	cmpltui	zero,zero,2008
   1f614:	0001f630 	cmpltui	zero,zero,2008
   1f618:	0001f630 	cmpltui	zero,zero,2008
   1f61c:	0001f630 	cmpltui	zero,zero,2008
   1f620:	0001f638 	rdprs	zero,zero,2008
   1f624:	0001f638 	rdprs	zero,zero,2008
   1f628:	0001f630 	cmpltui	zero,zero,2008
   1f62c:	0001f630 	cmpltui	zero,zero,2008
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1f630:	0009883a 	mov	r4,zero
   1f634:	001f2f80 	call	1f2f8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1f638:	00800584 	movi	r2,22
   1f63c:	e0bffd15 	stw	r2,-12(fp)
   1f640:	00000606 	br	1f65c <kill+0xf8>
    }
  }

  else if (pid > 0)
   1f644:	e0bffe17 	ldw	r2,-8(fp)
   1f648:	0080040e 	bge	zero,r2,1f65c <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1f64c:	008000c4 	movi	r2,3
   1f650:	e0bffd15 	stw	r2,-12(fp)
   1f654:	00000106 	br	1f65c <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1f658:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1f65c:	e0bffd17 	ldw	r2,-12(fp)
   1f660:	10000626 	beq	r2,zero,1f67c <kill+0x118>
  {
    ALT_ERRNO = status;
   1f664:	001f5280 	call	1f528 <alt_get_errno>
   1f668:	1007883a 	mov	r3,r2
   1f66c:	e0bffd17 	ldw	r2,-12(fp)
   1f670:	18800015 	stw	r2,0(r3)
    return -1;
   1f674:	00bfffc4 	movi	r2,-1
   1f678:	00000106 	br	1f680 <kill+0x11c>
  }

  return 0;
   1f67c:	0005883a 	mov	r2,zero
}
   1f680:	e037883a 	mov	sp,fp
   1f684:	dfc00117 	ldw	ra,4(sp)
   1f688:	df000017 	ldw	fp,0(sp)
   1f68c:	dec00204 	addi	sp,sp,8
   1f690:	f800283a 	ret

0001f694 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1f694:	defffc04 	addi	sp,sp,-16
   1f698:	df000315 	stw	fp,12(sp)
   1f69c:	df000304 	addi	fp,sp,12
   1f6a0:	e13ffd15 	stw	r4,-12(fp)
   1f6a4:	e17ffe15 	stw	r5,-8(fp)
   1f6a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1f6ac:	e0fffe17 	ldw	r3,-8(fp)
   1f6b0:	e0bffd17 	ldw	r2,-12(fp)
   1f6b4:	18800c26 	beq	r3,r2,1f6e8 <alt_load_section+0x54>
  {
    while( to != end )
   1f6b8:	00000806 	br	1f6dc <alt_load_section+0x48>
    {
      *to++ = *from++;
   1f6bc:	e0bffe17 	ldw	r2,-8(fp)
   1f6c0:	10c00104 	addi	r3,r2,4
   1f6c4:	e0fffe15 	stw	r3,-8(fp)
   1f6c8:	e0fffd17 	ldw	r3,-12(fp)
   1f6cc:	19000104 	addi	r4,r3,4
   1f6d0:	e13ffd15 	stw	r4,-12(fp)
   1f6d4:	18c00017 	ldw	r3,0(r3)
   1f6d8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1f6dc:	e0fffe17 	ldw	r3,-8(fp)
   1f6e0:	e0bfff17 	ldw	r2,-4(fp)
   1f6e4:	18bff51e 	bne	r3,r2,1f6bc <__alt_data_end+0xfc01f6bc>
    {
      *to++ = *from++;
    }
  }
}
   1f6e8:	0001883a 	nop
   1f6ec:	e037883a 	mov	sp,fp
   1f6f0:	df000017 	ldw	fp,0(sp)
   1f6f4:	dec00104 	addi	sp,sp,4
   1f6f8:	f800283a 	ret

0001f6fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1f6fc:	defffe04 	addi	sp,sp,-8
   1f700:	dfc00115 	stw	ra,4(sp)
   1f704:	df000015 	stw	fp,0(sp)
   1f708:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1f70c:	018000f4 	movhi	r6,3
   1f710:	31b85c04 	addi	r6,r6,-7824
   1f714:	014000f4 	movhi	r5,3
   1f718:	296be104 	addi	r5,r5,-20604
   1f71c:	010000f4 	movhi	r4,3
   1f720:	21385c04 	addi	r4,r4,-7824
   1f724:	001f6940 	call	1f694 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1f728:	01800034 	movhi	r6,0
   1f72c:	31808c04 	addi	r6,r6,560
   1f730:	01400034 	movhi	r5,0
   1f734:	29400804 	addi	r5,r5,32
   1f738:	01000034 	movhi	r4,0
   1f73c:	21000804 	addi	r4,r4,32
   1f740:	001f6940 	call	1f694 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1f744:	018000f4 	movhi	r6,3
   1f748:	31abe104 	addi	r6,r6,-20604
   1f74c:	014000b4 	movhi	r5,2
   1f750:	294f7c04 	addi	r5,r5,15856
   1f754:	010000b4 	movhi	r4,2
   1f758:	210f7c04 	addi	r4,r4,15856
   1f75c:	001f6940 	call	1f694 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1f760:	0022ac40 	call	22ac4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1f764:	0022d140 	call	22d14 <alt_icache_flush_all>
}
   1f768:	0001883a 	nop
   1f76c:	e037883a 	mov	sp,fp
   1f770:	dfc00117 	ldw	ra,4(sp)
   1f774:	df000017 	ldw	fp,0(sp)
   1f778:	dec00204 	addi	sp,sp,8
   1f77c:	f800283a 	ret

0001f780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f780:	defffe04 	addi	sp,sp,-8
   1f784:	dfc00115 	stw	ra,4(sp)
   1f788:	df000015 	stw	fp,0(sp)
   1f78c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f790:	d0a5bb17 	ldw	r2,-26900(gp)
   1f794:	10000326 	beq	r2,zero,1f7a4 <alt_get_errno+0x24>
   1f798:	d0a5bb17 	ldw	r2,-26900(gp)
   1f79c:	103ee83a 	callr	r2
   1f7a0:	00000106 	br	1f7a8 <alt_get_errno+0x28>
   1f7a4:	d0b24704 	addi	r2,gp,-14052
}
   1f7a8:	e037883a 	mov	sp,fp
   1f7ac:	dfc00117 	ldw	ra,4(sp)
   1f7b0:	df000017 	ldw	fp,0(sp)
   1f7b4:	dec00204 	addi	sp,sp,8
   1f7b8:	f800283a 	ret

0001f7bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1f7bc:	defff904 	addi	sp,sp,-28
   1f7c0:	dfc00615 	stw	ra,24(sp)
   1f7c4:	df000515 	stw	fp,20(sp)
   1f7c8:	df000504 	addi	fp,sp,20
   1f7cc:	e13ffd15 	stw	r4,-12(fp)
   1f7d0:	e17ffe15 	stw	r5,-8(fp)
   1f7d4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1f7d8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f7dc:	e0bffd17 	ldw	r2,-12(fp)
   1f7e0:	10000816 	blt	r2,zero,1f804 <lseek+0x48>
   1f7e4:	01400304 	movi	r5,12
   1f7e8:	e13ffd17 	ldw	r4,-12(fp)
   1f7ec:	000d18c0 	call	d18c <__mulsi3>
   1f7f0:	1007883a 	mov	r3,r2
   1f7f4:	008000f4 	movhi	r2,3
   1f7f8:	10ae1404 	addi	r2,r2,-18352
   1f7fc:	1885883a 	add	r2,r3,r2
   1f800:	00000106 	br	1f808 <lseek+0x4c>
   1f804:	0005883a 	mov	r2,zero
   1f808:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1f80c:	e0bffc17 	ldw	r2,-16(fp)
   1f810:	10001026 	beq	r2,zero,1f854 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1f814:	e0bffc17 	ldw	r2,-16(fp)
   1f818:	10800017 	ldw	r2,0(r2)
   1f81c:	10800717 	ldw	r2,28(r2)
   1f820:	10000926 	beq	r2,zero,1f848 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1f824:	e0bffc17 	ldw	r2,-16(fp)
   1f828:	10800017 	ldw	r2,0(r2)
   1f82c:	10800717 	ldw	r2,28(r2)
   1f830:	e1bfff17 	ldw	r6,-4(fp)
   1f834:	e17ffe17 	ldw	r5,-8(fp)
   1f838:	e13ffc17 	ldw	r4,-16(fp)
   1f83c:	103ee83a 	callr	r2
   1f840:	e0bffb15 	stw	r2,-20(fp)
   1f844:	00000506 	br	1f85c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1f848:	00bfde84 	movi	r2,-134
   1f84c:	e0bffb15 	stw	r2,-20(fp)
   1f850:	00000206 	br	1f85c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1f854:	00bfebc4 	movi	r2,-81
   1f858:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1f85c:	e0bffb17 	ldw	r2,-20(fp)
   1f860:	1000070e 	bge	r2,zero,1f880 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1f864:	001f7800 	call	1f780 <alt_get_errno>
   1f868:	1007883a 	mov	r3,r2
   1f86c:	e0bffb17 	ldw	r2,-20(fp)
   1f870:	0085c83a 	sub	r2,zero,r2
   1f874:	18800015 	stw	r2,0(r3)
    rc = -1;
   1f878:	00bfffc4 	movi	r2,-1
   1f87c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1f880:	e0bffb17 	ldw	r2,-20(fp)
}
   1f884:	e037883a 	mov	sp,fp
   1f888:	dfc00117 	ldw	ra,4(sp)
   1f88c:	df000017 	ldw	fp,0(sp)
   1f890:	dec00204 	addi	sp,sp,8
   1f894:	f800283a 	ret

0001f898 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1f898:	defffd04 	addi	sp,sp,-12
   1f89c:	dfc00215 	stw	ra,8(sp)
   1f8a0:	df000115 	stw	fp,4(sp)
   1f8a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1f8a8:	0009883a 	mov	r4,zero
   1f8ac:	001fe240 	call	1fe24 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1f8b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1f8b4:	001fe5c0 	call	1fe5c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1f8b8:	018000f4 	movhi	r6,3
   1f8bc:	31abcc04 	addi	r6,r6,-20688
   1f8c0:	014000f4 	movhi	r5,3
   1f8c4:	296bcc04 	addi	r5,r5,-20688
   1f8c8:	010000f4 	movhi	r4,3
   1f8cc:	212bcc04 	addi	r4,r4,-20688
   1f8d0:	00230b80 	call	230b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1f8d4:	0022bc40 	call	22bc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1f8d8:	010000b4 	movhi	r4,2
   1f8dc:	210b0904 	addi	r4,r4,11300
   1f8e0:	0023a500 	call	23a50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1f8e4:	d0b24b17 	ldw	r2,-14036(gp)
   1f8e8:	d0f24c17 	ldw	r3,-14032(gp)
   1f8ec:	d1324d17 	ldw	r4,-14028(gp)
   1f8f0:	200d883a 	mov	r6,r4
   1f8f4:	180b883a 	mov	r5,r3
   1f8f8:	1009883a 	mov	r4,r2
   1f8fc:	000a4dc0 	call	a4dc <main>
   1f900:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1f904:	01000044 	movi	r4,1
   1f908:	001f1f40 	call	1f1f4 <close>
  exit (result);
   1f90c:	e13fff17 	ldw	r4,-4(fp)
   1f910:	0023a640 	call	23a64 <exit>

0001f914 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1f914:	defffe04 	addi	sp,sp,-8
   1f918:	df000115 	stw	fp,4(sp)
   1f91c:	df000104 	addi	fp,sp,4
   1f920:	e13fff15 	stw	r4,-4(fp)
}
   1f924:	0001883a 	nop
   1f928:	e037883a 	mov	sp,fp
   1f92c:	df000017 	ldw	fp,0(sp)
   1f930:	dec00104 	addi	sp,sp,4
   1f934:	f800283a 	ret

0001f938 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1f938:	defffe04 	addi	sp,sp,-8
   1f93c:	df000115 	stw	fp,4(sp)
   1f940:	df000104 	addi	fp,sp,4
   1f944:	e13fff15 	stw	r4,-4(fp)
}
   1f948:	0001883a 	nop
   1f94c:	e037883a 	mov	sp,fp
   1f950:	df000017 	ldw	fp,0(sp)
   1f954:	dec00104 	addi	sp,sp,4
   1f958:	f800283a 	ret

0001f95c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f95c:	defffe04 	addi	sp,sp,-8
   1f960:	dfc00115 	stw	ra,4(sp)
   1f964:	df000015 	stw	fp,0(sp)
   1f968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f96c:	d0a5bb17 	ldw	r2,-26900(gp)
   1f970:	10000326 	beq	r2,zero,1f980 <alt_get_errno+0x24>
   1f974:	d0a5bb17 	ldw	r2,-26900(gp)
   1f978:	103ee83a 	callr	r2
   1f97c:	00000106 	br	1f984 <alt_get_errno+0x28>
   1f980:	d0b24704 	addi	r2,gp,-14052
}
   1f984:	e037883a 	mov	sp,fp
   1f988:	dfc00117 	ldw	ra,4(sp)
   1f98c:	df000017 	ldw	fp,0(sp)
   1f990:	dec00204 	addi	sp,sp,8
   1f994:	f800283a 	ret

0001f998 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1f998:	defff904 	addi	sp,sp,-28
   1f99c:	dfc00615 	stw	ra,24(sp)
   1f9a0:	df000515 	stw	fp,20(sp)
   1f9a4:	df000504 	addi	fp,sp,20
   1f9a8:	e13ffd15 	stw	r4,-12(fp)
   1f9ac:	e17ffe15 	stw	r5,-8(fp)
   1f9b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f9b4:	e0bffd17 	ldw	r2,-12(fp)
   1f9b8:	10000816 	blt	r2,zero,1f9dc <read+0x44>
   1f9bc:	01400304 	movi	r5,12
   1f9c0:	e13ffd17 	ldw	r4,-12(fp)
   1f9c4:	000d18c0 	call	d18c <__mulsi3>
   1f9c8:	1007883a 	mov	r3,r2
   1f9cc:	008000f4 	movhi	r2,3
   1f9d0:	10ae1404 	addi	r2,r2,-18352
   1f9d4:	1885883a 	add	r2,r3,r2
   1f9d8:	00000106 	br	1f9e0 <read+0x48>
   1f9dc:	0005883a 	mov	r2,zero
   1f9e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f9e4:	e0bffb17 	ldw	r2,-20(fp)
   1f9e8:	10002226 	beq	r2,zero,1fa74 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f9ec:	e0bffb17 	ldw	r2,-20(fp)
   1f9f0:	10800217 	ldw	r2,8(r2)
   1f9f4:	108000cc 	andi	r2,r2,3
   1f9f8:	10800060 	cmpeqi	r2,r2,1
   1f9fc:	1000181e 	bne	r2,zero,1fa60 <read+0xc8>
        (fd->dev->read))
   1fa00:	e0bffb17 	ldw	r2,-20(fp)
   1fa04:	10800017 	ldw	r2,0(r2)
   1fa08:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1fa0c:	10001426 	beq	r2,zero,1fa60 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1fa10:	e0bffb17 	ldw	r2,-20(fp)
   1fa14:	10800017 	ldw	r2,0(r2)
   1fa18:	10800517 	ldw	r2,20(r2)
   1fa1c:	e0ffff17 	ldw	r3,-4(fp)
   1fa20:	180d883a 	mov	r6,r3
   1fa24:	e17ffe17 	ldw	r5,-8(fp)
   1fa28:	e13ffb17 	ldw	r4,-20(fp)
   1fa2c:	103ee83a 	callr	r2
   1fa30:	e0bffc15 	stw	r2,-16(fp)
   1fa34:	e0bffc17 	ldw	r2,-16(fp)
   1fa38:	1000070e 	bge	r2,zero,1fa58 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1fa3c:	001f95c0 	call	1f95c <alt_get_errno>
   1fa40:	1007883a 	mov	r3,r2
   1fa44:	e0bffc17 	ldw	r2,-16(fp)
   1fa48:	0085c83a 	sub	r2,zero,r2
   1fa4c:	18800015 	stw	r2,0(r3)
          return -1;
   1fa50:	00bfffc4 	movi	r2,-1
   1fa54:	00000c06 	br	1fa88 <read+0xf0>
        }
        return rval;
   1fa58:	e0bffc17 	ldw	r2,-16(fp)
   1fa5c:	00000a06 	br	1fa88 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1fa60:	001f95c0 	call	1f95c <alt_get_errno>
   1fa64:	1007883a 	mov	r3,r2
   1fa68:	00800344 	movi	r2,13
   1fa6c:	18800015 	stw	r2,0(r3)
   1fa70:	00000406 	br	1fa84 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1fa74:	001f95c0 	call	1f95c <alt_get_errno>
   1fa78:	1007883a 	mov	r3,r2
   1fa7c:	00801444 	movi	r2,81
   1fa80:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1fa84:	00bfffc4 	movi	r2,-1
}
   1fa88:	e037883a 	mov	sp,fp
   1fa8c:	dfc00117 	ldw	ra,4(sp)
   1fa90:	df000017 	ldw	fp,0(sp)
   1fa94:	dec00204 	addi	sp,sp,8
   1fa98:	f800283a 	ret

0001fa9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1fa9c:	defffc04 	addi	sp,sp,-16
   1faa0:	dfc00315 	stw	ra,12(sp)
   1faa4:	df000215 	stw	fp,8(sp)
   1faa8:	dc000115 	stw	r16,4(sp)
   1faac:	df000204 	addi	fp,sp,8
   1fab0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1fab4:	e0bffe17 	ldw	r2,-8(fp)
   1fab8:	108000d0 	cmplti	r2,r2,3
   1fabc:	1000111e 	bne	r2,zero,1fb04 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1fac0:	040000f4 	movhi	r16,3
   1fac4:	842e1404 	addi	r16,r16,-18352
   1fac8:	e0bffe17 	ldw	r2,-8(fp)
   1facc:	01400304 	movi	r5,12
   1fad0:	1009883a 	mov	r4,r2
   1fad4:	000d18c0 	call	d18c <__mulsi3>
   1fad8:	8085883a 	add	r2,r16,r2
   1fadc:	10800204 	addi	r2,r2,8
   1fae0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1fae4:	040000f4 	movhi	r16,3
   1fae8:	842e1404 	addi	r16,r16,-18352
   1faec:	e0bffe17 	ldw	r2,-8(fp)
   1faf0:	01400304 	movi	r5,12
   1faf4:	1009883a 	mov	r4,r2
   1faf8:	000d18c0 	call	d18c <__mulsi3>
   1fafc:	8085883a 	add	r2,r16,r2
   1fb00:	10000015 	stw	zero,0(r2)
  }
}
   1fb04:	0001883a 	nop
   1fb08:	e6ffff04 	addi	sp,fp,-4
   1fb0c:	dfc00217 	ldw	ra,8(sp)
   1fb10:	df000117 	ldw	fp,4(sp)
   1fb14:	dc000017 	ldw	r16,0(sp)
   1fb18:	dec00304 	addi	sp,sp,12
   1fb1c:	f800283a 	ret

0001fb20 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1fb20:	defff904 	addi	sp,sp,-28
   1fb24:	df000615 	stw	fp,24(sp)
   1fb28:	df000604 	addi	fp,sp,24
   1fb2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fb30:	0005303a 	rdctl	r2,status
   1fb34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fb38:	e0fffe17 	ldw	r3,-8(fp)
   1fb3c:	00bfff84 	movi	r2,-2
   1fb40:	1884703a 	and	r2,r3,r2
   1fb44:	1001703a 	wrctl	status,r2
  
  return context;
   1fb48:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1fb4c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1fb50:	d0a5bc17 	ldw	r2,-26896(gp)
   1fb54:	10c000c4 	addi	r3,r2,3
   1fb58:	00bfff04 	movi	r2,-4
   1fb5c:	1884703a 	and	r2,r3,r2
   1fb60:	d0a5bc15 	stw	r2,-26896(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1fb64:	d0e5bc17 	ldw	r3,-26896(gp)
   1fb68:	e0bfff17 	ldw	r2,-4(fp)
   1fb6c:	1887883a 	add	r3,r3,r2
   1fb70:	00810034 	movhi	r2,1024
   1fb74:	10800004 	addi	r2,r2,0
   1fb78:	10c0062e 	bgeu	r2,r3,1fb94 <sbrk+0x74>
   1fb7c:	e0bffb17 	ldw	r2,-20(fp)
   1fb80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fb84:	e0bffa17 	ldw	r2,-24(fp)
   1fb88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1fb8c:	00bfffc4 	movi	r2,-1
   1fb90:	00000b06 	br	1fbc0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1fb94:	d0a5bc17 	ldw	r2,-26896(gp)
   1fb98:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1fb9c:	d0e5bc17 	ldw	r3,-26896(gp)
   1fba0:	e0bfff17 	ldw	r2,-4(fp)
   1fba4:	1885883a 	add	r2,r3,r2
   1fba8:	d0a5bc15 	stw	r2,-26896(gp)
   1fbac:	e0bffb17 	ldw	r2,-20(fp)
   1fbb0:	e0bffc15 	stw	r2,-16(fp)
   1fbb4:	e0bffc17 	ldw	r2,-16(fp)
   1fbb8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1fbbc:	e0bffd17 	ldw	r2,-12(fp)
} 
   1fbc0:	e037883a 	mov	sp,fp
   1fbc4:	df000017 	ldw	fp,0(sp)
   1fbc8:	dec00104 	addi	sp,sp,4
   1fbcc:	f800283a 	ret

0001fbd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1fbd0:	defffe04 	addi	sp,sp,-8
   1fbd4:	dfc00115 	stw	ra,4(sp)
   1fbd8:	df000015 	stw	fp,0(sp)
   1fbdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fbe0:	d0a5bb17 	ldw	r2,-26900(gp)
   1fbe4:	10000326 	beq	r2,zero,1fbf4 <alt_get_errno+0x24>
   1fbe8:	d0a5bb17 	ldw	r2,-26900(gp)
   1fbec:	103ee83a 	callr	r2
   1fbf0:	00000106 	br	1fbf8 <alt_get_errno+0x28>
   1fbf4:	d0b24704 	addi	r2,gp,-14052
}
   1fbf8:	e037883a 	mov	sp,fp
   1fbfc:	dfc00117 	ldw	ra,4(sp)
   1fc00:	df000017 	ldw	fp,0(sp)
   1fc04:	dec00204 	addi	sp,sp,8
   1fc08:	f800283a 	ret

0001fc0c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1fc0c:	defffc04 	addi	sp,sp,-16
   1fc10:	dfc00315 	stw	ra,12(sp)
   1fc14:	df000215 	stw	fp,8(sp)
   1fc18:	df000204 	addi	fp,sp,8
   1fc1c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1fc20:	d0b25017 	ldw	r2,-14016(gp)
  clock_t ticks = alt_nticks(); 
   1fc24:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1fc28:	d0b24f17 	ldw	r2,-14020(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1fc2c:	1000061e 	bne	r2,zero,1fc48 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1fc30:	001fbd00 	call	1fbd0 <alt_get_errno>
   1fc34:	1007883a 	mov	r3,r2
   1fc38:	00801604 	movi	r2,88
   1fc3c:	18800015 	stw	r2,0(r3)
    return 0;
   1fc40:	0005883a 	mov	r2,zero
   1fc44:	00000a06 	br	1fc70 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1fc48:	e0bfff17 	ldw	r2,-4(fp)
   1fc4c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1fc50:	e0bfff17 	ldw	r2,-4(fp)
   1fc54:	e0fffe17 	ldw	r3,-8(fp)
   1fc58:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1fc5c:	e0bfff17 	ldw	r2,-4(fp)
   1fc60:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1fc64:	e0bfff17 	ldw	r2,-4(fp)
   1fc68:	10000315 	stw	zero,12(r2)

  return ticks;
   1fc6c:	e0bffe17 	ldw	r2,-8(fp)
}
   1fc70:	e037883a 	mov	sp,fp
   1fc74:	dfc00117 	ldw	ra,4(sp)
   1fc78:	df000017 	ldw	fp,0(sp)
   1fc7c:	dec00204 	addi	sp,sp,8
   1fc80:	f800283a 	ret

0001fc84 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1fc84:	defffd04 	addi	sp,sp,-12
   1fc88:	dfc00215 	stw	ra,8(sp)
   1fc8c:	df000115 	stw	fp,4(sp)
   1fc90:	df000104 	addi	fp,sp,4
   1fc94:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1fc98:	e13fff17 	ldw	r4,-4(fp)
   1fc9c:	002296c0 	call	2296c <alt_busy_sleep>
}
   1fca0:	e037883a 	mov	sp,fp
   1fca4:	dfc00117 	ldw	ra,4(sp)
   1fca8:	df000017 	ldw	fp,0(sp)
   1fcac:	dec00204 	addi	sp,sp,8
   1fcb0:	f800283a 	ret

0001fcb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1fcb4:	defffe04 	addi	sp,sp,-8
   1fcb8:	dfc00115 	stw	ra,4(sp)
   1fcbc:	df000015 	stw	fp,0(sp)
   1fcc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fcc4:	d0a5bb17 	ldw	r2,-26900(gp)
   1fcc8:	10000326 	beq	r2,zero,1fcd8 <alt_get_errno+0x24>
   1fccc:	d0a5bb17 	ldw	r2,-26900(gp)
   1fcd0:	103ee83a 	callr	r2
   1fcd4:	00000106 	br	1fcdc <alt_get_errno+0x28>
   1fcd8:	d0b24704 	addi	r2,gp,-14052
}
   1fcdc:	e037883a 	mov	sp,fp
   1fce0:	dfc00117 	ldw	ra,4(sp)
   1fce4:	df000017 	ldw	fp,0(sp)
   1fce8:	dec00204 	addi	sp,sp,8
   1fcec:	f800283a 	ret

0001fcf0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1fcf0:	defff904 	addi	sp,sp,-28
   1fcf4:	dfc00615 	stw	ra,24(sp)
   1fcf8:	df000515 	stw	fp,20(sp)
   1fcfc:	df000504 	addi	fp,sp,20
   1fd00:	e13ffd15 	stw	r4,-12(fp)
   1fd04:	e17ffe15 	stw	r5,-8(fp)
   1fd08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1fd0c:	e0bffd17 	ldw	r2,-12(fp)
   1fd10:	10000816 	blt	r2,zero,1fd34 <write+0x44>
   1fd14:	01400304 	movi	r5,12
   1fd18:	e13ffd17 	ldw	r4,-12(fp)
   1fd1c:	000d18c0 	call	d18c <__mulsi3>
   1fd20:	1007883a 	mov	r3,r2
   1fd24:	008000f4 	movhi	r2,3
   1fd28:	10ae1404 	addi	r2,r2,-18352
   1fd2c:	1885883a 	add	r2,r3,r2
   1fd30:	00000106 	br	1fd38 <write+0x48>
   1fd34:	0005883a 	mov	r2,zero
   1fd38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1fd3c:	e0bffb17 	ldw	r2,-20(fp)
   1fd40:	10002126 	beq	r2,zero,1fdc8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1fd44:	e0bffb17 	ldw	r2,-20(fp)
   1fd48:	10800217 	ldw	r2,8(r2)
   1fd4c:	108000cc 	andi	r2,r2,3
   1fd50:	10001826 	beq	r2,zero,1fdb4 <write+0xc4>
   1fd54:	e0bffb17 	ldw	r2,-20(fp)
   1fd58:	10800017 	ldw	r2,0(r2)
   1fd5c:	10800617 	ldw	r2,24(r2)
   1fd60:	10001426 	beq	r2,zero,1fdb4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1fd64:	e0bffb17 	ldw	r2,-20(fp)
   1fd68:	10800017 	ldw	r2,0(r2)
   1fd6c:	10800617 	ldw	r2,24(r2)
   1fd70:	e0ffff17 	ldw	r3,-4(fp)
   1fd74:	180d883a 	mov	r6,r3
   1fd78:	e17ffe17 	ldw	r5,-8(fp)
   1fd7c:	e13ffb17 	ldw	r4,-20(fp)
   1fd80:	103ee83a 	callr	r2
   1fd84:	e0bffc15 	stw	r2,-16(fp)
   1fd88:	e0bffc17 	ldw	r2,-16(fp)
   1fd8c:	1000070e 	bge	r2,zero,1fdac <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1fd90:	001fcb40 	call	1fcb4 <alt_get_errno>
   1fd94:	1007883a 	mov	r3,r2
   1fd98:	e0bffc17 	ldw	r2,-16(fp)
   1fd9c:	0085c83a 	sub	r2,zero,r2
   1fda0:	18800015 	stw	r2,0(r3)
        return -1;
   1fda4:	00bfffc4 	movi	r2,-1
   1fda8:	00000c06 	br	1fddc <write+0xec>
      }
      return rval;
   1fdac:	e0bffc17 	ldw	r2,-16(fp)
   1fdb0:	00000a06 	br	1fddc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1fdb4:	001fcb40 	call	1fcb4 <alt_get_errno>
   1fdb8:	1007883a 	mov	r3,r2
   1fdbc:	00800344 	movi	r2,13
   1fdc0:	18800015 	stw	r2,0(r3)
   1fdc4:	00000406 	br	1fdd8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1fdc8:	001fcb40 	call	1fcb4 <alt_get_errno>
   1fdcc:	1007883a 	mov	r3,r2
   1fdd0:	00801444 	movi	r2,81
   1fdd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1fdd8:	00bfffc4 	movi	r2,-1
}
   1fddc:	e037883a 	mov	sp,fp
   1fde0:	dfc00117 	ldw	ra,4(sp)
   1fde4:	df000017 	ldw	fp,0(sp)
   1fde8:	dec00204 	addi	sp,sp,8
   1fdec:	f800283a 	ret

0001fdf0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1fdf0:	defffd04 	addi	sp,sp,-12
   1fdf4:	dfc00215 	stw	ra,8(sp)
   1fdf8:	df000115 	stw	fp,4(sp)
   1fdfc:	df000104 	addi	fp,sp,4
   1fe00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1fe04:	d165b804 	addi	r5,gp,-26912
   1fe08:	e13fff17 	ldw	r4,-4(fp)
   1fe0c:	0022b200 	call	22b20 <alt_dev_llist_insert>
}
   1fe10:	e037883a 	mov	sp,fp
   1fe14:	dfc00117 	ldw	ra,4(sp)
   1fe18:	df000017 	ldw	fp,0(sp)
   1fe1c:	dec00204 	addi	sp,sp,8
   1fe20:	f800283a 	ret

0001fe24 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1fe24:	defffd04 	addi	sp,sp,-12
   1fe28:	dfc00215 	stw	ra,8(sp)
   1fe2c:	df000115 	stw	fp,4(sp)
   1fe30:	df000104 	addi	fp,sp,4
   1fe34:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1fe38:	00237c40 	call	237c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1fe3c:	00800044 	movi	r2,1
   1fe40:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1fe44:	0001883a 	nop
   1fe48:	e037883a 	mov	sp,fp
   1fe4c:	dfc00117 	ldw	ra,4(sp)
   1fe50:	df000017 	ldw	fp,0(sp)
   1fe54:	dec00204 	addi	sp,sp,8
   1fe58:	f800283a 	ret

0001fe5c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1fe5c:	defffe04 	addi	sp,sp,-8
   1fe60:	dfc00115 	stw	ra,4(sp)
   1fe64:	df000015 	stw	fp,0(sp)
   1fe68:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1fe6c:	01c0fa04 	movi	r7,1000
   1fe70:	01800084 	movi	r6,2
   1fe74:	000b883a 	mov	r5,zero
   1fe78:	01010034 	movhi	r4,1024
   1fe7c:	21062004 	addi	r4,r4,6272
   1fe80:	00227c40 	call	227c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1fe84:	010000f4 	movhi	r4,3
   1fe88:	212e7404 	addi	r4,r4,-17968
   1fe8c:	00201200 	call	20120 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1fe90:	01800044 	movi	r6,1
   1fe94:	000b883a 	mov	r5,zero
   1fe98:	010000f4 	movhi	r4,3
   1fe9c:	212e8c04 	addi	r4,r4,-17872
   1fea0:	0021c4c0 	call	21c4c <altera_avalon_jtag_uart_init>
   1fea4:	010000f4 	movhi	r4,3
   1fea8:	212e8204 	addi	r4,r4,-17912
   1feac:	001fdf00 	call	1fdf0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1feb0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1feb4:	0001883a 	nop
}
   1feb8:	0001883a 	nop
   1febc:	e037883a 	mov	sp,fp
   1fec0:	dfc00117 	ldw	ra,4(sp)
   1fec4:	df000017 	ldw	fp,0(sp)
   1fec8:	dec00204 	addi	sp,sp,8
   1fecc:	f800283a 	ret

0001fed0 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1fed0:	defff904 	addi	sp,sp,-28
   1fed4:	dfc00615 	stw	ra,24(sp)
   1fed8:	df000515 	stw	fp,20(sp)
   1fedc:	df000504 	addi	fp,sp,20
   1fee0:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1fee4:	008000b4 	movhi	r2,2
   1fee8:	10a1a804 	addi	r2,r2,-31072
   1feec:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1fef0:	e0bfff17 	ldw	r2,-4(fp)
   1fef4:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1fef8:	e0bffc17 	ldw	r2,-16(fp)
   1fefc:	10800717 	ldw	r2,28(r2)
   1ff00:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1ff04:	e0bffd17 	ldw	r2,-12(fp)
   1ff08:	10800217 	ldw	r2,8(r2)
   1ff0c:	10800098 	cmpnei	r2,r2,2
   1ff10:	1000251e 	bne	r2,zero,1ffa8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1ff14:	e0bffd17 	ldw	r2,-12(fp)
   1ff18:	10c00017 	ldw	r3,0(r2)
   1ff1c:	e0bffd17 	ldw	r2,-12(fp)
   1ff20:	10800117 	ldw	r2,4(r2)
   1ff24:	e13ffe04 	addi	r4,fp,-8
   1ff28:	200f883a 	mov	r7,r4
   1ff2c:	100d883a 	mov	r6,r2
   1ff30:	180b883a 	mov	r5,r3
   1ff34:	e13ffc17 	ldw	r4,-16(fp)
   1ff38:	00206800 	call	20680 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1ff3c:	e0bffd17 	ldw	r2,-12(fp)
   1ff40:	10c00117 	ldw	r3,4(r2)
   1ff44:	e0bffe17 	ldw	r2,-8(fp)
   1ff48:	1887c83a 	sub	r3,r3,r2
   1ff4c:	e0bffd17 	ldw	r2,-12(fp)
   1ff50:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1ff54:	e0bffd17 	ldw	r2,-12(fp)
   1ff58:	10c00017 	ldw	r3,0(r2)
   1ff5c:	e0bffe17 	ldw	r2,-8(fp)
   1ff60:	1887883a 	add	r3,r3,r2
   1ff64:	e0bffd17 	ldw	r2,-12(fp)
   1ff68:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1ff6c:	e0bffd17 	ldw	r2,-12(fp)
   1ff70:	10800117 	ldw	r2,4(r2)
   1ff74:	10000c26 	beq	r2,zero,1ffa8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1ff78:	01400704 	movi	r5,28
   1ff7c:	e13ffc17 	ldw	r4,-16(fp)
   1ff80:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1ff84:	01400084 	movi	r5,2
   1ff88:	e13ffc17 	ldw	r4,-16(fp)
   1ff8c:	00218dc0 	call	218dc <alt_avalon_i2c_int_enable>
   1ff90:	00000e06 	br	1ffcc <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1ff94:	e0bffb17 	ldw	r2,-20(fp)
   1ff98:	10bfffc4 	addi	r2,r2,-1
   1ff9c:	e0bffb15 	stw	r2,-20(fp)
   1ffa0:	e0bffb17 	ldw	r2,-20(fp)
   1ffa4:	10000426 	beq	r2,zero,1ffb8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1ffa8:	e13ffc17 	ldw	r4,-16(fp)
   1ffac:	002063c0 	call	2063c <alt_avalon_i2c_is_busy>
   1ffb0:	103ff81e 	bne	r2,zero,1ff94 <__alt_data_end+0xfc01ff94>
   1ffb4:	00000106 	br	1ffbc <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1ffb8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1ffbc:	e13ffc17 	ldw	r4,-16(fp)
   1ffc0:	00202e40 	call	202e4 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1ffc4:	e0bffd17 	ldw	r2,-12(fp)
   1ffc8:	10000215 	stw	zero,8(r2)
}
   1ffcc:	e037883a 	mov	sp,fp
   1ffd0:	dfc00117 	ldw	ra,4(sp)
   1ffd4:	df000017 	ldw	fp,0(sp)
   1ffd8:	dec00204 	addi	sp,sp,8
   1ffdc:	f800283a 	ret

0001ffe0 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1ffe0:	defffc04 	addi	sp,sp,-16
   1ffe4:	dfc00315 	stw	ra,12(sp)
   1ffe8:	df000215 	stw	fp,8(sp)
   1ffec:	df000204 	addi	fp,sp,8
   1fff0:	e13ffe15 	stw	r4,-8(fp)
   1fff4:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1fff8:	e0bfff17 	ldw	r2,-4(fp)
   1fffc:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   20000:	e1ffff17 	ldw	r7,-4(fp)
   20004:	000d883a 	mov	r6,zero
   20008:	014000b4 	movhi	r5,2
   2000c:	297fb404 	addi	r5,r5,-304
   20010:	e13ffe17 	ldw	r4,-8(fp)
   20014:	00200cc0 	call	200cc <alt_avalon_i2c_register_callback>
}
   20018:	0001883a 	nop
   2001c:	e037883a 	mov	sp,fp
   20020:	dfc00117 	ldw	ra,4(sp)
   20024:	df000017 	ldw	fp,0(sp)
   20028:	dec00204 	addi	sp,sp,8
   2002c:	f800283a 	ret

00020030 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   20030:	defff904 	addi	sp,sp,-28
   20034:	dfc00615 	stw	ra,24(sp)
   20038:	df000515 	stw	fp,20(sp)
   2003c:	df000504 	addi	fp,sp,20
   20040:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   20044:	e0bfff17 	ldw	r2,-4(fp)
   20048:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2004c:	014007c4 	movi	r5,31
   20050:	e13ffb17 	ldw	r4,-20(fp)
   20054:	00218740 	call	21874 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20058:	01400704 	movi	r5,28
   2005c:	e13ffb17 	ldw	r4,-20(fp)
   20060:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   20064:	e0bffb17 	ldw	r2,-20(fp)
   20068:	10800617 	ldw	r2,24(r2)
   2006c:	10001126 	beq	r2,zero,200b4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20070:	0005303a 	rdctl	r2,status
   20074:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20078:	e0fffd17 	ldw	r3,-12(fp)
   2007c:	00bfff84 	movi	r2,-2
   20080:	1884703a 	and	r2,r3,r2
   20084:	1001703a 	wrctl	status,r2
  
  return context;
   20088:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2008c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   20090:	e0bffb17 	ldw	r2,-20(fp)
   20094:	10800617 	ldw	r2,24(r2)
   20098:	e13ffb17 	ldw	r4,-20(fp)
   2009c:	103ee83a 	callr	r2
   200a0:	e0bffc17 	ldw	r2,-16(fp)
   200a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   200a8:	e0bffe17 	ldw	r2,-8(fp)
   200ac:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   200b0:	0001883a 	nop
   200b4:	0001883a 	nop
}
   200b8:	e037883a 	mov	sp,fp
   200bc:	dfc00117 	ldw	ra,4(sp)
   200c0:	df000017 	ldw	fp,0(sp)
   200c4:	dec00204 	addi	sp,sp,8
   200c8:	f800283a 	ret

000200cc <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   200cc:	defffb04 	addi	sp,sp,-20
   200d0:	df000415 	stw	fp,16(sp)
   200d4:	df000404 	addi	fp,sp,16
   200d8:	e13ffc15 	stw	r4,-16(fp)
   200dc:	e17ffd15 	stw	r5,-12(fp)
   200e0:	e1bffe15 	stw	r6,-8(fp)
   200e4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   200e8:	e0bffc17 	ldw	r2,-16(fp)
   200ec:	e0fffd17 	ldw	r3,-12(fp)
   200f0:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   200f4:	e0bffc17 	ldw	r2,-16(fp)
   200f8:	e0ffff17 	ldw	r3,-4(fp)
   200fc:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   20100:	e0bffc17 	ldw	r2,-16(fp)
   20104:	e0fffe17 	ldw	r3,-8(fp)
   20108:	10c00815 	stw	r3,32(r2)

    return ;
   2010c:	0001883a 	nop
}
   20110:	e037883a 	mov	sp,fp
   20114:	df000017 	ldw	fp,0(sp)
   20118:	dec00104 	addi	sp,sp,4
   2011c:	f800283a 	ret

00020120 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   20120:	defff704 	addi	sp,sp,-36
   20124:	dfc00815 	stw	ra,32(sp)
   20128:	df000715 	stw	fp,28(sp)
   2012c:	df000704 	addi	fp,sp,28
   20130:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   20134:	e13fff17 	ldw	r4,-4(fp)
   20138:	00202e40 	call	202e4 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2013c:	014007c4 	movi	r5,31
   20140:	e13fff17 	ldw	r4,-4(fp)
   20144:	00218740 	call	21874 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20148:	01400704 	movi	r5,28
   2014c:	e13fff17 	ldw	r4,-4(fp)
   20150:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   20154:	014000c4 	movi	r5,3
   20158:	e13fff17 	ldw	r4,-4(fp)
   2015c:	0021a800 	call	21a80 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   20160:	014000c4 	movi	r5,3
   20164:	e13fff17 	ldw	r4,-4(fp)
   20168:	00219d00 	call	219d0 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   2016c:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   20170:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   20174:	e0bffb04 	addi	r2,fp,-20
   20178:	018000b4 	movhi	r6,2
   2017c:	31a1a804 	addi	r6,r6,-31072
   20180:	100b883a 	mov	r5,r2
   20184:	e13fff17 	ldw	r4,-4(fp)
   20188:	00205400 	call	20540 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   2018c:	e0bffb04 	addi	r2,fp,-20
   20190:	100b883a 	mov	r5,r2
   20194:	e13fff17 	ldw	r4,-4(fp)
   20198:	00203e00 	call	203e0 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   2019c:	d165bd04 	addi	r5,gp,-26892
   201a0:	e13fff17 	ldw	r4,-4(fp)
   201a4:	0022b200 	call	22b20 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   201a8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   201ac:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   201b0:	e0bffa17 	ldw	r2,-24(fp)
   201b4:	10000c1e 	bne	r2,zero,201e8 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   201b8:	e0bfff17 	ldw	r2,-4(fp)
   201bc:	10c00417 	ldw	r3,16(r2)
   201c0:	e0bfff17 	ldw	r2,-4(fp)
   201c4:	10800517 	ldw	r2,20(r2)
   201c8:	d8000015 	stw	zero,0(sp)
   201cc:	e1ffff17 	ldw	r7,-4(fp)
   201d0:	018000b4 	movhi	r6,2
   201d4:	31800c04 	addi	r6,r6,48
   201d8:	100b883a 	mov	r5,r2
   201dc:	1809883a 	mov	r4,r3
   201e0:	0022d340 	call	22d34 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   201e4:	00000406 	br	201f8 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   201e8:	010000f4 	movhi	r4,3
   201ec:	212bd904 	addi	r4,r4,-20636
   201f0:	00233b80 	call	233b8 <alt_printf>
    }

    return;
   201f4:	0001883a 	nop

}
   201f8:	e037883a 	mov	sp,fp
   201fc:	dfc00117 	ldw	ra,4(sp)
   20200:	df000017 	ldw	fp,0(sp)
   20204:	dec00204 	addi	sp,sp,8
   20208:	f800283a 	ret

0002020c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   2020c:	defffc04 	addi	sp,sp,-16
   20210:	dfc00315 	stw	ra,12(sp)
   20214:	df000215 	stw	fp,8(sp)
   20218:	df000204 	addi	fp,sp,8
   2021c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   20220:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   20224:	d165bd04 	addi	r5,gp,-26892
   20228:	e13fff17 	ldw	r4,-4(fp)
   2022c:	0022c840 	call	22c84 <alt_find_dev>
   20230:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   20234:	e0bffe17 	ldw	r2,-8(fp)
}
   20238:	e037883a 	mov	sp,fp
   2023c:	dfc00117 	ldw	ra,4(sp)
   20240:	df000017 	ldw	fp,0(sp)
   20244:	dec00204 	addi	sp,sp,8
   20248:	f800283a 	ret

0002024c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2024c:	defffc04 	addi	sp,sp,-16
   20250:	df000315 	stw	fp,12(sp)
   20254:	df000304 	addi	fp,sp,12
   20258:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   2025c:	e0bfff17 	ldw	r2,-4(fp)
   20260:	10800717 	ldw	r2,28(r2)
   20264:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   20268:	e0bfff17 	ldw	r2,-4(fp)
   2026c:	10800317 	ldw	r2,12(r2)
   20270:	10800204 	addi	r2,r2,8
   20274:	10800037 	ldwio	r2,0(r2)
   20278:	1080004c 	andi	r2,r2,1
   2027c:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   20280:	e0bffe17 	ldw	r2,-8(fp)
   20284:	10000226 	beq	r2,zero,20290 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   20288:	00bffe44 	movi	r2,-7
   2028c:	00001106 	br	202d4 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   20290:	e0bfff17 	ldw	r2,-4(fp)
   20294:	10c00617 	ldw	r3,24(r2)
   20298:	008000b4 	movhi	r2,2
   2029c:	10bfb404 	addi	r2,r2,-304
   202a0:	1880021e 	bne	r3,r2,202ac <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   202a4:	e0bffd17 	ldw	r2,-12(fp)
   202a8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   202ac:	e0bfff17 	ldw	r2,-4(fp)
   202b0:	10800317 	ldw	r2,12(r2)
   202b4:	10800204 	addi	r2,r2,8
   202b8:	e0ffff17 	ldw	r3,-4(fp)
   202bc:	18c00317 	ldw	r3,12(r3)
   202c0:	18c00204 	addi	r3,r3,8
   202c4:	18c00037 	ldwio	r3,0(r3)
   202c8:	18c00054 	ori	r3,r3,1
   202cc:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   202d0:	0005883a 	mov	r2,zero
}
   202d4:	e037883a 	mov	sp,fp
   202d8:	df000017 	ldw	fp,0(sp)
   202dc:	dec00104 	addi	sp,sp,4
   202e0:	f800283a 	ret

000202e4 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   202e4:	defffe04 	addi	sp,sp,-8
   202e8:	df000115 	stw	fp,4(sp)
   202ec:	df000104 	addi	fp,sp,4
   202f0:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   202f4:	e0bfff17 	ldw	r2,-4(fp)
   202f8:	10800317 	ldw	r2,12(r2)
   202fc:	10800204 	addi	r2,r2,8
   20300:	e0ffff17 	ldw	r3,-4(fp)
   20304:	18c00317 	ldw	r3,12(r3)
   20308:	18c00204 	addi	r3,r3,8
   2030c:	19000037 	ldwio	r4,0(r3)
   20310:	00ffff84 	movi	r3,-2
   20314:	20c6703a 	and	r3,r4,r3
   20318:	10c00035 	stwio	r3,0(r2)

}
   2031c:	0001883a 	nop
   20320:	e037883a 	mov	sp,fp
   20324:	df000017 	ldw	fp,0(sp)
   20328:	dec00104 	addi	sp,sp,4
   2032c:	f800283a 	ret

00020330 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   20330:	defffd04 	addi	sp,sp,-12
   20334:	df000215 	stw	fp,8(sp)
   20338:	df000204 	addi	fp,sp,8
   2033c:	e13ffe15 	stw	r4,-8(fp)
   20340:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   20344:	e0bffe17 	ldw	r2,-8(fp)
   20348:	10c00d17 	ldw	r3,52(r2)
   2034c:	e0bfff17 	ldw	r2,-4(fp)
   20350:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   20354:	e0bffe17 	ldw	r2,-8(fp)
   20358:	10800317 	ldw	r2,12(r2)
   2035c:	10800204 	addi	r2,r2,8
   20360:	10800037 	ldwio	r2,0(r2)
   20364:	1080008c 	andi	r2,r2,2
   20368:	1005d07a 	srai	r2,r2,1
   2036c:	1007883a 	mov	r3,r2
   20370:	e0bfff17 	ldw	r2,-4(fp)
   20374:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   20378:	e0bffe17 	ldw	r2,-8(fp)
   2037c:	10800317 	ldw	r2,12(r2)
   20380:	10800904 	addi	r2,r2,36
   20384:	10800037 	ldwio	r2,0(r2)
   20388:	1007883a 	mov	r3,r2
   2038c:	e0bfff17 	ldw	r2,-4(fp)
   20390:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   20394:	e0bffe17 	ldw	r2,-8(fp)
   20398:	10800317 	ldw	r2,12(r2)
   2039c:	10800804 	addi	r2,r2,32
   203a0:	10800037 	ldwio	r2,0(r2)
   203a4:	1007883a 	mov	r3,r2
   203a8:	e0bfff17 	ldw	r2,-4(fp)
   203ac:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   203b0:	e0bffe17 	ldw	r2,-8(fp)
   203b4:	10800317 	ldw	r2,12(r2)
   203b8:	10800a04 	addi	r2,r2,40
   203bc:	10800037 	ldwio	r2,0(r2)
   203c0:	1007883a 	mov	r3,r2
   203c4:	e0bfff17 	ldw	r2,-4(fp)
   203c8:	10c0030d 	sth	r3,12(r2)
}
   203cc:	0001883a 	nop
   203d0:	e037883a 	mov	sp,fp
   203d4:	df000017 	ldw	fp,0(sp)
   203d8:	dec00104 	addi	sp,sp,4
   203dc:	f800283a 	ret

000203e0 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   203e0:	defffd04 	addi	sp,sp,-12
   203e4:	df000215 	stw	fp,8(sp)
   203e8:	df000204 	addi	fp,sp,8
   203ec:	e13ffe15 	stw	r4,-8(fp)
   203f0:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   203f4:	e0bfff17 	ldw	r2,-4(fp)
   203f8:	10c00017 	ldw	r3,0(r2)
   203fc:	e0bffe17 	ldw	r2,-8(fp)
   20400:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   20404:	e0bffe17 	ldw	r2,-8(fp)
   20408:	10800317 	ldw	r2,12(r2)
   2040c:	10c00204 	addi	r3,r2,8
   20410:	e0bffe17 	ldw	r2,-8(fp)
   20414:	10800317 	ldw	r2,12(r2)
   20418:	10800204 	addi	r2,r2,8
   2041c:	10800037 	ldwio	r2,0(r2)
   20420:	1009883a 	mov	r4,r2
   20424:	00bfff44 	movi	r2,-3
   20428:	2088703a 	and	r4,r4,r2
   2042c:	e0bfff17 	ldw	r2,-4(fp)
   20430:	10800117 	ldw	r2,4(r2)
   20434:	1085883a 	add	r2,r2,r2
   20438:	1080008c 	andi	r2,r2,2
   2043c:	2084b03a 	or	r2,r4,r2
   20440:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   20444:	e0bffe17 	ldw	r2,-8(fp)
   20448:	10800317 	ldw	r2,12(r2)
   2044c:	10800904 	addi	r2,r2,36
   20450:	e0ffff17 	ldw	r3,-4(fp)
   20454:	18c0020b 	ldhu	r3,8(r3)
   20458:	18ffffcc 	andi	r3,r3,65535
   2045c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   20460:	e0bffe17 	ldw	r2,-8(fp)
   20464:	10800317 	ldw	r2,12(r2)
   20468:	10800804 	addi	r2,r2,32
   2046c:	e0ffff17 	ldw	r3,-4(fp)
   20470:	18c0028b 	ldhu	r3,10(r3)
   20474:	18ffffcc 	andi	r3,r3,65535
   20478:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   2047c:	e0bffe17 	ldw	r2,-8(fp)
   20480:	10800317 	ldw	r2,12(r2)
   20484:	10800a04 	addi	r2,r2,40
   20488:	e0ffff17 	ldw	r3,-4(fp)
   2048c:	18c0030b 	ldhu	r3,12(r3)
   20490:	18ffffcc 	andi	r3,r3,65535
   20494:	10c00035 	stwio	r3,0(r2)
}
   20498:	0001883a 	nop
   2049c:	e037883a 	mov	sp,fp
   204a0:	df000017 	ldw	fp,0(sp)
   204a4:	dec00104 	addi	sp,sp,4
   204a8:	f800283a 	ret

000204ac <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   204ac:	defffb04 	addi	sp,sp,-20
   204b0:	dfc00415 	stw	ra,16(sp)
   204b4:	df000315 	stw	fp,12(sp)
   204b8:	df000304 	addi	fp,sp,12
   204bc:	e13ffd15 	stw	r4,-12(fp)
   204c0:	e17ffe15 	stw	r5,-8(fp)
   204c4:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   204c8:	e0bffe17 	ldw	r2,-8(fp)
   204cc:	1080028b 	ldhu	r2,10(r2)
   204d0:	10bfffcc 	andi	r2,r2,65535
   204d4:	10000426 	beq	r2,zero,204e8 <alt_avalon_i2c_master_config_speed_get+0x3c>
   204d8:	e0bffe17 	ldw	r2,-8(fp)
   204dc:	1080020b 	ldhu	r2,8(r2)
   204e0:	10bfffcc 	andi	r2,r2,65535
   204e4:	1000021e 	bne	r2,zero,204f0 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   204e8:	00bfff44 	movi	r2,-3
   204ec:	00000f06 	br	2052c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   204f0:	e0bffd17 	ldw	r2,-12(fp)
   204f4:	11000c17 	ldw	r4,48(r2)
   204f8:	e0bffe17 	ldw	r2,-8(fp)
   204fc:	1080028b 	ldhu	r2,10(r2)
   20500:	10ffffcc 	andi	r3,r2,65535
   20504:	e0bffe17 	ldw	r2,-8(fp)
   20508:	1080020b 	ldhu	r2,8(r2)
   2050c:	10bfffcc 	andi	r2,r2,65535
   20510:	1885883a 	add	r2,r3,r2
   20514:	100b883a 	mov	r5,r2
   20518:	000d0d00 	call	d0d0 <__udivsi3>
   2051c:	1007883a 	mov	r3,r2
   20520:	e0bfff17 	ldw	r2,-4(fp)
   20524:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20528:	0005883a 	mov	r2,zero
}
   2052c:	e037883a 	mov	sp,fp
   20530:	dfc00117 	ldw	ra,4(sp)
   20534:	df000017 	ldw	fp,0(sp)
   20538:	dec00204 	addi	sp,sp,8
   2053c:	f800283a 	ret

00020540 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   20540:	defff904 	addi	sp,sp,-28
   20544:	dfc00615 	stw	ra,24(sp)
   20548:	df000515 	stw	fp,20(sp)
   2054c:	df000504 	addi	fp,sp,20
   20550:	e13ffd15 	stw	r4,-12(fp)
   20554:	e17ffe15 	stw	r5,-8(fp)
   20558:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   2055c:	e0ffff17 	ldw	r3,-4(fp)
   20560:	008001b4 	movhi	r2,6
   20564:	1086a004 	addi	r2,r2,6784
   20568:	10c00436 	bltu	r2,r3,2057c <alt_avalon_i2c_master_config_speed_set+0x3c>
   2056c:	e0bfff17 	ldw	r2,-4(fp)
   20570:	10000226 	beq	r2,zero,2057c <alt_avalon_i2c_master_config_speed_set+0x3c>
   20574:	e0bfff17 	ldw	r2,-4(fp)
   20578:	1000021e 	bne	r2,zero,20584 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   2057c:	00bfff04 	movi	r2,-4
   20580:	00002906 	br	20628 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   20584:	e0bffd17 	ldw	r2,-12(fp)
   20588:	10c00c17 	ldw	r3,48(r2)
   2058c:	e0bfff17 	ldw	r2,-4(fp)
   20590:	1085883a 	add	r2,r2,r2
   20594:	100b883a 	mov	r5,r2
   20598:	1809883a 	mov	r4,r3
   2059c:	000d0d00 	call	d0d0 <__udivsi3>
   205a0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   205a4:	e0bffb17 	ldw	r2,-20(fp)
   205a8:	10800f04 	addi	r2,r2,60
   205ac:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   205b0:	e0bffb17 	ldw	r2,-20(fp)
   205b4:	10bff104 	addi	r2,r2,-60
   205b8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   205bc:	e0ffff17 	ldw	r3,-4(fp)
   205c0:	008000b4 	movhi	r2,2
   205c4:	10a1a804 	addi	r2,r2,-31072
   205c8:	10c0042e 	bgeu	r2,r3,205dc <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   205cc:	e0bffe17 	ldw	r2,-8(fp)
   205d0:	00c00044 	movi	r3,1
   205d4:	10c00115 	stw	r3,4(r2)
   205d8:	00000206 	br	205e4 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   205dc:	e0bffe17 	ldw	r2,-8(fp)
   205e0:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   205e4:	e0bffb17 	ldw	r2,-20(fp)
   205e8:	1007883a 	mov	r3,r2
   205ec:	e0bffe17 	ldw	r2,-8(fp)
   205f0:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   205f4:	e0bffc17 	ldw	r2,-16(fp)
   205f8:	1007883a 	mov	r3,r2
   205fc:	e0bffe17 	ldw	r2,-8(fp)
   20600:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   20604:	e0bffb17 	ldw	r2,-20(fp)
   20608:	1007883a 	mov	r3,r2
   2060c:	e0bffb17 	ldw	r2,-20(fp)
   20610:	1004d07a 	srli	r2,r2,1
   20614:	1885c83a 	sub	r2,r3,r2
   20618:	1007883a 	mov	r3,r2
   2061c:	e0bffe17 	ldw	r2,-8(fp)
   20620:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   20624:	0005883a 	mov	r2,zero

}
   20628:	e037883a 	mov	sp,fp
   2062c:	dfc00117 	ldw	ra,4(sp)
   20630:	df000017 	ldw	fp,0(sp)
   20634:	dec00204 	addi	sp,sp,8
   20638:	f800283a 	ret

0002063c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2063c:	defffe04 	addi	sp,sp,-8
   20640:	df000115 	stw	fp,4(sp)
   20644:	df000104 	addi	fp,sp,4
   20648:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   2064c:	e0bfff17 	ldw	r2,-4(fp)
   20650:	10800317 	ldw	r2,12(r2)
   20654:	10800504 	addi	r2,r2,20
   20658:	10800037 	ldwio	r2,0(r2)
   2065c:	1080004c 	andi	r2,r2,1
   20660:	10000226 	beq	r2,zero,2066c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   20664:	00800044 	movi	r2,1
   20668:	00000106 	br	20670 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   2066c:	0005883a 	mov	r2,zero
}
   20670:	e037883a 	mov	sp,fp
   20674:	df000017 	ldw	fp,0(sp)
   20678:	dec00104 	addi	sp,sp,4
   2067c:	f800283a 	ret

00020680 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   20680:	defffb04 	addi	sp,sp,-20
   20684:	df000415 	stw	fp,16(sp)
   20688:	df000404 	addi	fp,sp,16
   2068c:	e13ffc15 	stw	r4,-16(fp)
   20690:	e17ffd15 	stw	r5,-12(fp)
   20694:	e1bffe15 	stw	r6,-8(fp)
   20698:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   2069c:	e0bfff17 	ldw	r2,-4(fp)
   206a0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   206a4:	00001406 	br	206f8 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   206a8:	e0bfff17 	ldw	r2,-4(fp)
   206ac:	10800017 	ldw	r2,0(r2)
   206b0:	e0fffd17 	ldw	r3,-12(fp)
   206b4:	1885883a 	add	r2,r3,r2
   206b8:	e0fffc17 	ldw	r3,-16(fp)
   206bc:	18c00317 	ldw	r3,12(r3)
   206c0:	18c00104 	addi	r3,r3,4
   206c4:	18c00037 	ldwio	r3,0(r3)
   206c8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   206cc:	e0bfff17 	ldw	r2,-4(fp)
   206d0:	10800017 	ldw	r2,0(r2)
   206d4:	10c00044 	addi	r3,r2,1
   206d8:	e0bfff17 	ldw	r2,-4(fp)
   206dc:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   206e0:	e0bfff17 	ldw	r2,-4(fp)
   206e4:	10c00017 	ldw	r3,0(r2)
   206e8:	e0bffe17 	ldw	r2,-8(fp)
   206ec:	1880021e 	bne	r3,r2,206f8 <alt_avalon_i2c_rx_read_available+0x78>
   206f0:	e0bffe17 	ldw	r2,-8(fp)
   206f4:	1000061e 	bne	r2,zero,20710 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   206f8:	e0bffc17 	ldw	r2,-16(fp)
   206fc:	10800317 	ldw	r2,12(r2)
   20700:	10800704 	addi	r2,r2,28
   20704:	10800037 	ldwio	r2,0(r2)
   20708:	103fe71e 	bne	r2,zero,206a8 <__alt_data_end+0xfc0206a8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   2070c:	00000106 	br	20714 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   20710:	0001883a 	nop
    }
}
   20714:	0001883a 	nop
   20718:	e037883a 	mov	sp,fp
   2071c:	df000017 	ldw	fp,0(sp)
   20720:	dec00104 	addi	sp,sp,4
   20724:	f800283a 	ret

00020728 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   20728:	defffa04 	addi	sp,sp,-24
   2072c:	dfc00515 	stw	ra,20(sp)
   20730:	df000415 	stw	fp,16(sp)
   20734:	df000404 	addi	fp,sp,16
   20738:	e13ffe15 	stw	r4,-8(fp)
   2073c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   20740:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   20744:	008000b4 	movhi	r2,2
   20748:	10a1a804 	addi	r2,r2,-31072
   2074c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   20750:	00000d06 	br	20788 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   20754:	e0bffd17 	ldw	r2,-12(fp)
   20758:	108002a8 	cmpgeui	r2,r2,10
   2075c:	1000021e 	bne	r2,zero,20768 <alt_avalon_i2c_rx_read+0x40>
   20760:	0109c404 	movi	r4,10000
   20764:	002296c0 	call	2296c <alt_busy_sleep>
      if (--timeout == 0)
   20768:	e0bffd17 	ldw	r2,-12(fp)
   2076c:	10bfffc4 	addi	r2,r2,-1
   20770:	e0bffd15 	stw	r2,-12(fp)
   20774:	e0bffd17 	ldw	r2,-12(fp)
   20778:	1000031e 	bne	r2,zero,20788 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   2077c:	00bfff84 	movi	r2,-2
   20780:	e0bffc15 	stw	r2,-16(fp)
        break;
   20784:	00000506 	br	2079c <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   20788:	e0bffe17 	ldw	r2,-8(fp)
   2078c:	10800317 	ldw	r2,12(r2)
   20790:	10800704 	addi	r2,r2,28
   20794:	10800037 	ldwio	r2,0(r2)
   20798:	103fee26 	beq	r2,zero,20754 <__alt_data_end+0xfc020754>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2079c:	e0bffe17 	ldw	r2,-8(fp)
   207a0:	10800317 	ldw	r2,12(r2)
   207a4:	10800104 	addi	r2,r2,4
   207a8:	10800037 	ldwio	r2,0(r2)
   207ac:	1007883a 	mov	r3,r2
   207b0:	e0bfff17 	ldw	r2,-4(fp)
   207b4:	10c00005 	stb	r3,0(r2)
        
    return status;
   207b8:	e0bffc17 	ldw	r2,-16(fp)
}
   207bc:	e037883a 	mov	sp,fp
   207c0:	dfc00117 	ldw	ra,4(sp)
   207c4:	df000017 	ldw	fp,0(sp)
   207c8:	dec00204 	addi	sp,sp,8
   207cc:	f800283a 	ret

000207d0 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   207d0:	defff804 	addi	sp,sp,-32
   207d4:	dfc00715 	stw	ra,28(sp)
   207d8:	df000615 	stw	fp,24(sp)
   207dc:	df000604 	addi	fp,sp,24
   207e0:	e13ffc15 	stw	r4,-16(fp)
   207e4:	2809883a 	mov	r4,r5
   207e8:	3007883a 	mov	r3,r6
   207ec:	3805883a 	mov	r2,r7
   207f0:	e13ffd05 	stb	r4,-12(fp)
   207f4:	e0fffe05 	stb	r3,-8(fp)
   207f8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   207fc:	0089c404 	movi	r2,10000
   20800:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20804:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   20808:	00000c06 	br	2083c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   2080c:	e0bffa17 	ldw	r2,-24(fp)
   20810:	108002a8 	cmpgeui	r2,r2,10
   20814:	1000021e 	bne	r2,zero,20820 <alt_avalon_i2c_cmd_write+0x50>
   20818:	0109c404 	movi	r4,10000
   2081c:	002296c0 	call	2296c <alt_busy_sleep>
      if (--timeout == 0)
   20820:	e0bffa17 	ldw	r2,-24(fp)
   20824:	10bfffc4 	addi	r2,r2,-1
   20828:	e0bffa15 	stw	r2,-24(fp)
   2082c:	e0bffa17 	ldw	r2,-24(fp)
   20830:	1000021e 	bne	r2,zero,2083c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   20834:	00bfff84 	movi	r2,-2
   20838:	00001906 	br	208a0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2083c:	e0bffc17 	ldw	r2,-16(fp)
   20840:	10800317 	ldw	r2,12(r2)
   20844:	10800404 	addi	r2,r2,16
   20848:	10800037 	ldwio	r2,0(r2)
   2084c:	1080004c 	andi	r2,r2,1
   20850:	103fee26 	beq	r2,zero,2080c <__alt_data_end+0xfc02080c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   20854:	e0bffc17 	ldw	r2,-16(fp)
   20858:	10800317 	ldw	r2,12(r2)
   2085c:	e13ffd03 	ldbu	r4,-12(fp)
   20860:	e0fffe03 	ldbu	r3,-8(fp)
   20864:	1806927a 	slli	r3,r3,9
   20868:	20c8b03a 	or	r4,r4,r3
   2086c:	e0ffff03 	ldbu	r3,-4(fp)
   20870:	1806923a 	slli	r3,r3,8
   20874:	20c6b03a 	or	r3,r4,r3
   20878:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2087c:	e0bffb04 	addi	r2,fp,-20
   20880:	100b883a 	mov	r5,r2
   20884:	e13ffc17 	ldw	r4,-16(fp)
   20888:	0020a100 	call	20a10 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   2088c:	e0bffb04 	addi	r2,fp,-20
   20890:	100b883a 	mov	r5,r2
   20894:	e13ffc17 	ldw	r4,-16(fp)
   20898:	0020a5c0 	call	20a5c <alt_avalon_i2c_check_arblost>
    
    return status;
   2089c:	e0bffb17 	ldw	r2,-20(fp)
}
   208a0:	e037883a 	mov	sp,fp
   208a4:	dfc00117 	ldw	ra,4(sp)
   208a8:	df000017 	ldw	fp,0(sp)
   208ac:	dec00204 	addi	sp,sp,8
   208b0:	f800283a 	ret

000208b4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   208b4:	defffa04 	addi	sp,sp,-24
   208b8:	dfc00515 	stw	ra,20(sp)
   208bc:	df000415 	stw	fp,16(sp)
   208c0:	df000404 	addi	fp,sp,16
   208c4:	e13ffd15 	stw	r4,-12(fp)
   208c8:	e17ffe15 	stw	r5,-8(fp)
   208cc:	3005883a 	mov	r2,r6
   208d0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   208d4:	e0bffd17 	ldw	r2,-12(fp)
   208d8:	10800d17 	ldw	r2,52(r2)
   208dc:	10800058 	cmpnei	r2,r2,1
   208e0:	10001c1e 	bne	r2,zero,20954 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   208e4:	e0bffd17 	ldw	r2,-12(fp)
   208e8:	10800917 	ldw	r2,36(r2)
   208ec:	109e0014 	ori	r2,r2,30720
   208f0:	1004d1fa 	srli	r2,r2,7
   208f4:	1007883a 	mov	r3,r2
   208f8:	00bfff84 	movi	r2,-2
   208fc:	1884703a 	and	r2,r3,r2
   20900:	1007883a 	mov	r3,r2
   20904:	e0bffe17 	ldw	r2,-8(fp)
   20908:	1884b03a 	or	r2,r3,r2
   2090c:	10803fcc 	andi	r2,r2,255
   20910:	e0ffff03 	ldbu	r3,-4(fp)
   20914:	000f883a 	mov	r7,zero
   20918:	180d883a 	mov	r6,r3
   2091c:	100b883a 	mov	r5,r2
   20920:	e13ffd17 	ldw	r4,-12(fp)
   20924:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   20928:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   2092c:	e0bffd17 	ldw	r2,-12(fp)
   20930:	10800917 	ldw	r2,36(r2)
   20934:	10803fcc 	andi	r2,r2,255
   20938:	000f883a 	mov	r7,zero
   2093c:	000d883a 	mov	r6,zero
   20940:	100b883a 	mov	r5,r2
   20944:	e13ffd17 	ldw	r4,-12(fp)
   20948:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   2094c:	e0bffc15 	stw	r2,-16(fp)
   20950:	00000e06 	br	2098c <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   20954:	e0bffd17 	ldw	r2,-12(fp)
   20958:	10800917 	ldw	r2,36(r2)
   2095c:	1085883a 	add	r2,r2,r2
   20960:	1007883a 	mov	r3,r2
   20964:	e0bffe17 	ldw	r2,-8(fp)
   20968:	1884b03a 	or	r2,r3,r2
   2096c:	10803fcc 	andi	r2,r2,255
   20970:	e0ffff03 	ldbu	r3,-4(fp)
   20974:	000f883a 	mov	r7,zero
   20978:	180d883a 	mov	r6,r3
   2097c:	100b883a 	mov	r5,r2
   20980:	e13ffd17 	ldw	r4,-12(fp)
   20984:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   20988:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   2098c:	e0bffc17 	ldw	r2,-16(fp)
}
   20990:	e037883a 	mov	sp,fp
   20994:	dfc00117 	ldw	ra,4(sp)
   20998:	df000017 	ldw	fp,0(sp)
   2099c:	dec00204 	addi	sp,sp,8
   209a0:	f800283a 	ret

000209a4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   209a4:	defffd04 	addi	sp,sp,-12
   209a8:	df000215 	stw	fp,8(sp)
   209ac:	df000204 	addi	fp,sp,8
   209b0:	e13ffe15 	stw	r4,-8(fp)
   209b4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   209b8:	e0bffe17 	ldw	r2,-8(fp)
   209bc:	10c00917 	ldw	r3,36(r2)
   209c0:	e0bfff17 	ldw	r2,-4(fp)
   209c4:	10c00015 	stw	r3,0(r2)
}
   209c8:	0001883a 	nop
   209cc:	e037883a 	mov	sp,fp
   209d0:	df000017 	ldw	fp,0(sp)
   209d4:	dec00104 	addi	sp,sp,4
   209d8:	f800283a 	ret

000209dc <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   209dc:	defffd04 	addi	sp,sp,-12
   209e0:	df000215 	stw	fp,8(sp)
   209e4:	df000204 	addi	fp,sp,8
   209e8:	e13ffe15 	stw	r4,-8(fp)
   209ec:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   209f0:	e0bffe17 	ldw	r2,-8(fp)
   209f4:	e0ffff17 	ldw	r3,-4(fp)
   209f8:	10c00915 	stw	r3,36(r2)
}
   209fc:	0001883a 	nop
   20a00:	e037883a 	mov	sp,fp
   20a04:	df000017 	ldw	fp,0(sp)
   20a08:	dec00104 	addi	sp,sp,4
   20a0c:	f800283a 	ret

00020a10 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   20a10:	defffd04 	addi	sp,sp,-12
   20a14:	df000215 	stw	fp,8(sp)
   20a18:	df000204 	addi	fp,sp,8
   20a1c:	e13ffe15 	stw	r4,-8(fp)
   20a20:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   20a24:	e0bffe17 	ldw	r2,-8(fp)
   20a28:	10800317 	ldw	r2,12(r2)
   20a2c:	10800404 	addi	r2,r2,16
   20a30:	10800037 	ldwio	r2,0(r2)
   20a34:	1080010c 	andi	r2,r2,4
   20a38:	10000326 	beq	r2,zero,20a48 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   20a3c:	e0bfff17 	ldw	r2,-4(fp)
   20a40:	00fffec4 	movi	r3,-5
   20a44:	10c00015 	stw	r3,0(r2)
    }
}
   20a48:	0001883a 	nop
   20a4c:	e037883a 	mov	sp,fp
   20a50:	df000017 	ldw	fp,0(sp)
   20a54:	dec00104 	addi	sp,sp,4
   20a58:	f800283a 	ret

00020a5c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   20a5c:	defffd04 	addi	sp,sp,-12
   20a60:	df000215 	stw	fp,8(sp)
   20a64:	df000204 	addi	fp,sp,8
   20a68:	e13ffe15 	stw	r4,-8(fp)
   20a6c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   20a70:	e0bffe17 	ldw	r2,-8(fp)
   20a74:	10800317 	ldw	r2,12(r2)
   20a78:	10800404 	addi	r2,r2,16
   20a7c:	10800037 	ldwio	r2,0(r2)
   20a80:	1080020c 	andi	r2,r2,8
   20a84:	10000326 	beq	r2,zero,20a94 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   20a88:	e0bfff17 	ldw	r2,-4(fp)
   20a8c:	00fffe84 	movi	r3,-6
   20a90:	10c00015 	stw	r3,0(r2)
    }
}
   20a94:	0001883a 	nop
   20a98:	e037883a 	mov	sp,fp
   20a9c:	df000017 	ldw	fp,0(sp)
   20aa0:	dec00104 	addi	sp,sp,4
   20aa4:	f800283a 	ret

00020aa8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20aa8:	defff804 	addi	sp,sp,-32
   20aac:	dfc00715 	stw	ra,28(sp)
   20ab0:	df000615 	stw	fp,24(sp)
   20ab4:	df000604 	addi	fp,sp,24
   20ab8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20abc:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20ac0:	e0bfff17 	ldw	r2,-4(fp)
   20ac4:	10800717 	ldw	r2,28(r2)
   20ac8:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   20acc:	e0bffb17 	ldw	r2,-20(fp)
   20ad0:	10800117 	ldw	r2,4(r2)
   20ad4:	10800044 	addi	r2,r2,1
   20ad8:	0149c404 	movi	r5,10000
   20adc:	1009883a 	mov	r4,r2
   20ae0:	000d18c0 	call	d18c <__mulsi3>
   20ae4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   20ae8:	e0bffd04 	addi	r2,fp,-12
   20aec:	100b883a 	mov	r5,r2
   20af0:	e13fff17 	ldw	r4,-4(fp)
   20af4:	00219400 	call	21940 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   20af8:	e0bffd17 	ldw	r2,-12(fp)
   20afc:	100b883a 	mov	r5,r2
   20b00:	e13fff17 	ldw	r4,-4(fp)
   20b04:	00218740 	call	21874 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   20b08:	e0bffc04 	addi	r2,fp,-16
   20b0c:	100b883a 	mov	r5,r2
   20b10:	e13fff17 	ldw	r4,-4(fp)
   20b14:	0020a100 	call	20a10 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   20b18:	e0bffc17 	ldw	r2,-16(fp)
   20b1c:	10002226 	beq	r2,zero,20ba8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   20b20:	e0bffb17 	ldw	r2,-20(fp)
   20b24:	10800217 	ldw	r2,8(r2)
   20b28:	10001d26 	beq	r2,zero,20ba0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20b2c:	00000d06 	br	20b64 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   20b30:	e0bffa17 	ldw	r2,-24(fp)
   20b34:	108002a8 	cmpgeui	r2,r2,10
   20b38:	1000021e 	bne	r2,zero,20b44 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   20b3c:	0109c404 	movi	r4,10000
   20b40:	002296c0 	call	2296c <alt_busy_sleep>
              if (--timeout == 0)
   20b44:	e0bffa17 	ldw	r2,-24(fp)
   20b48:	10bfffc4 	addi	r2,r2,-1
   20b4c:	e0bffa15 	stw	r2,-24(fp)
   20b50:	e0bffa17 	ldw	r2,-24(fp)
   20b54:	1000031e 	bne	r2,zero,20b64 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   20b58:	00bfff84 	movi	r2,-2
   20b5c:	e0bffc15 	stw	r2,-16(fp)
                 break;
   20b60:	00000306 	br	20b70 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20b64:	e13fff17 	ldw	r4,-4(fp)
   20b68:	002063c0 	call	2063c <alt_avalon_i2c_is_busy>
   20b6c:	103ff01e 	bne	r2,zero,20b30 <__alt_data_end+0xfc020b30>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   20b70:	e0bffb17 	ldw	r2,-20(fp)
   20b74:	10800017 	ldw	r2,0(r2)
   20b78:	e0fffe04 	addi	r3,fp,-8
   20b7c:	180f883a 	mov	r7,r3
   20b80:	000d883a 	mov	r6,zero
   20b84:	100b883a 	mov	r5,r2
   20b88:	e13fff17 	ldw	r4,-4(fp)
   20b8c:	00206800 	call	20680 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   20b90:	e13fff17 	ldw	r4,-4(fp)
   20b94:	00202e40 	call	202e4 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   20b98:	e0bffb17 	ldw	r2,-20(fp)
   20b9c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   20ba0:	e0bffc17 	ldw	r2,-16(fp)
   20ba4:	00000a06 	br	20bd0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   20ba8:	e0bffb17 	ldw	r2,-20(fp)
   20bac:	10800217 	ldw	r2,8(r2)
   20bb0:	10000626 	beq	r2,zero,20bcc <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   20bb4:	e0bffd17 	ldw	r2,-12(fp)
   20bb8:	100b883a 	mov	r5,r2
   20bbc:	e13fff17 	ldw	r4,-4(fp)
   20bc0:	00218dc0 	call	218dc <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   20bc4:	00bffe44 	movi	r2,-7
   20bc8:	00000106 	br	20bd0 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   20bcc:	0005883a 	mov	r2,zero
}
   20bd0:	e037883a 	mov	sp,fp
   20bd4:	dfc00117 	ldw	ra,4(sp)
   20bd8:	df000017 	ldw	fp,0(sp)
   20bdc:	dec00204 	addi	sp,sp,8
   20be0:	f800283a 	ret

00020be4 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20be4:	defff704 	addi	sp,sp,-36
   20be8:	dfc00815 	stw	ra,32(sp)
   20bec:	df000715 	stw	fp,28(sp)
   20bf0:	df000704 	addi	fp,sp,28
   20bf4:	e13ffc15 	stw	r4,-16(fp)
   20bf8:	e17ffd15 	stw	r5,-12(fp)
   20bfc:	e1bffe15 	stw	r6,-8(fp)
   20c00:	3805883a 	mov	r2,r7
   20c04:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20c08:	0089c404 	movi	r2,10000
   20c0c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   20c10:	00002206 	br	20c9c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   20c14:	e0bffb17 	ldw	r2,-20(fp)
   20c18:	108002a8 	cmpgeui	r2,r2,10
   20c1c:	1000021e 	bne	r2,zero,20c28 <alt_avalon_i2c_master_tx+0x44>
   20c20:	0109c404 	movi	r4,10000
   20c24:	002296c0 	call	2296c <alt_busy_sleep>
      if (use_interrupts)
   20c28:	e0bfff03 	ldbu	r2,-4(fp)
   20c2c:	10000926 	beq	r2,zero,20c54 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   20c30:	00800044 	movi	r2,1
   20c34:	d8800015 	stw	r2,0(sp)
   20c38:	000f883a 	mov	r7,zero
   20c3c:	e1bffe17 	ldw	r6,-8(fp)
   20c40:	e17ffd17 	ldw	r5,-12(fp)
   20c44:	e13ffc17 	ldw	r4,-16(fp)
   20c48:	00211900 	call	21190 <alt_avalon_i2c_master_transmit_using_interrupts>
   20c4c:	e0bffa15 	stw	r2,-24(fp)
   20c50:	00000806 	br	20c74 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   20c54:	00800044 	movi	r2,1
   20c58:	d8800015 	stw	r2,0(sp)
   20c5c:	000f883a 	mov	r7,zero
   20c60:	e1bffe17 	ldw	r6,-8(fp)
   20c64:	e17ffd17 	ldw	r5,-12(fp)
   20c68:	e13ffc17 	ldw	r4,-16(fp)
   20c6c:	0020fd00 	call	20fd0 <alt_avalon_i2c_master_transmit>
   20c70:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20c74:	e0bffa17 	ldw	r2,-24(fp)
   20c78:	10bffea0 	cmpeqi	r2,r2,-6
   20c7c:	1000061e 	bne	r2,zero,20c98 <alt_avalon_i2c_master_tx+0xb4>
   20c80:	e0bffa17 	ldw	r2,-24(fp)
   20c84:	10bffee0 	cmpeqi	r2,r2,-5
   20c88:	1000031e 	bne	r2,zero,20c98 <alt_avalon_i2c_master_tx+0xb4>
   20c8c:	e0bffa17 	ldw	r2,-24(fp)
   20c90:	10bffe58 	cmpnei	r2,r2,-7
   20c94:	1000061e 	bne	r2,zero,20cb0 <alt_avalon_i2c_master_tx+0xcc>
   20c98:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   20c9c:	e0bffb17 	ldw	r2,-20(fp)
   20ca0:	10ffffc4 	addi	r3,r2,-1
   20ca4:	e0fffb15 	stw	r3,-20(fp)
   20ca8:	103fda1e 	bne	r2,zero,20c14 <__alt_data_end+0xfc020c14>
   20cac:	00000106 	br	20cb4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   20cb0:	0001883a 	nop
    }

    return status;
   20cb4:	e0bffa17 	ldw	r2,-24(fp)
}        
   20cb8:	e037883a 	mov	sp,fp
   20cbc:	dfc00117 	ldw	ra,4(sp)
   20cc0:	df000017 	ldw	fp,0(sp)
   20cc4:	dec00204 	addi	sp,sp,8
   20cc8:	f800283a 	ret

00020ccc <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20ccc:	defff704 	addi	sp,sp,-36
   20cd0:	dfc00815 	stw	ra,32(sp)
   20cd4:	df000715 	stw	fp,28(sp)
   20cd8:	df000704 	addi	fp,sp,28
   20cdc:	e13ffc15 	stw	r4,-16(fp)
   20ce0:	e17ffd15 	stw	r5,-12(fp)
   20ce4:	e1bffe15 	stw	r6,-8(fp)
   20ce8:	3805883a 	mov	r2,r7
   20cec:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20cf0:	0089c404 	movi	r2,10000
   20cf4:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   20cf8:	e0bfff03 	ldbu	r2,-4(fp)
   20cfc:	10003426 	beq	r2,zero,20dd0 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   20d00:	00001706 	br	20d60 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20d04:	e0bffb17 	ldw	r2,-20(fp)
   20d08:	108002a8 	cmpgeui	r2,r2,10
   20d0c:	1000021e 	bne	r2,zero,20d18 <alt_avalon_i2c_master_rx+0x4c>
   20d10:	0109c404 	movi	r4,10000
   20d14:	002296c0 	call	2296c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20d18:	00800044 	movi	r2,1
   20d1c:	d8800015 	stw	r2,0(sp)
   20d20:	000f883a 	mov	r7,zero
   20d24:	e1bffe17 	ldw	r6,-8(fp)
   20d28:	e17ffd17 	ldw	r5,-12(fp)
   20d2c:	e13ffc17 	ldw	r4,-16(fp)
   20d30:	00215ac0 	call	215ac <alt_avalon_i2c_master_receive_using_interrupts>
   20d34:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20d38:	e0bffa17 	ldw	r2,-24(fp)
   20d3c:	10bffea0 	cmpeqi	r2,r2,-6
   20d40:	1000061e 	bne	r2,zero,20d5c <alt_avalon_i2c_master_rx+0x90>
   20d44:	e0bffa17 	ldw	r2,-24(fp)
   20d48:	10bffee0 	cmpeqi	r2,r2,-5
   20d4c:	1000031e 	bne	r2,zero,20d5c <alt_avalon_i2c_master_rx+0x90>
   20d50:	e0bffa17 	ldw	r2,-24(fp)
   20d54:	10bffe58 	cmpnei	r2,r2,-7
   20d58:	1000221e 	bne	r2,zero,20de4 <alt_avalon_i2c_master_rx+0x118>
   20d5c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   20d60:	e0bffb17 	ldw	r2,-20(fp)
   20d64:	10ffffc4 	addi	r3,r2,-1
   20d68:	e0fffb15 	stw	r3,-20(fp)
   20d6c:	103fe51e 	bne	r2,zero,20d04 <__alt_data_end+0xfc020d04>
   20d70:	00001f06 	br	20df0 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20d74:	e0bffb17 	ldw	r2,-20(fp)
   20d78:	108002a8 	cmpgeui	r2,r2,10
   20d7c:	1000021e 	bne	r2,zero,20d88 <alt_avalon_i2c_master_rx+0xbc>
   20d80:	0109c404 	movi	r4,10000
   20d84:	002296c0 	call	2296c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20d88:	00800044 	movi	r2,1
   20d8c:	d8800015 	stw	r2,0(sp)
   20d90:	000f883a 	mov	r7,zero
   20d94:	e1bffe17 	ldw	r6,-8(fp)
   20d98:	e17ffd17 	ldw	r5,-12(fp)
   20d9c:	e13ffc17 	ldw	r4,-16(fp)
   20da0:	002139c0 	call	2139c <alt_avalon_i2c_master_receive>
   20da4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20da8:	e0bffa17 	ldw	r2,-24(fp)
   20dac:	10bffea0 	cmpeqi	r2,r2,-6
   20db0:	1000061e 	bne	r2,zero,20dcc <alt_avalon_i2c_master_rx+0x100>
   20db4:	e0bffa17 	ldw	r2,-24(fp)
   20db8:	10bffee0 	cmpeqi	r2,r2,-5
   20dbc:	1000031e 	bne	r2,zero,20dcc <alt_avalon_i2c_master_rx+0x100>
   20dc0:	e0bffa17 	ldw	r2,-24(fp)
   20dc4:	10bffe58 	cmpnei	r2,r2,-7
   20dc8:	1000081e 	bne	r2,zero,20dec <alt_avalon_i2c_master_rx+0x120>
   20dcc:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   20dd0:	e0bffb17 	ldw	r2,-20(fp)
   20dd4:	10ffffc4 	addi	r3,r2,-1
   20dd8:	e0fffb15 	stw	r3,-20(fp)
   20ddc:	103fe51e 	bne	r2,zero,20d74 <__alt_data_end+0xfc020d74>
   20de0:	00000306 	br	20df0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20de4:	0001883a 	nop
   20de8:	00000106 	br	20df0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20dec:	0001883a 	nop
      }
    }
    
    return status;
   20df0:	e0bffa17 	ldw	r2,-24(fp)
}        
   20df4:	e037883a 	mov	sp,fp
   20df8:	dfc00117 	ldw	ra,4(sp)
   20dfc:	df000017 	ldw	fp,0(sp)
   20e00:	dec00204 	addi	sp,sp,8
   20e04:	f800283a 	ret

00020e08 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   20e08:	defff604 	addi	sp,sp,-40
   20e0c:	dfc00915 	stw	ra,36(sp)
   20e10:	df000815 	stw	fp,32(sp)
   20e14:	df000804 	addi	fp,sp,32
   20e18:	e13ffb15 	stw	r4,-20(fp)
   20e1c:	e17ffc15 	stw	r5,-16(fp)
   20e20:	e1bffd15 	stw	r6,-12(fp)
   20e24:	e1fffe15 	stw	r7,-8(fp)
   20e28:	e0800317 	ldw	r2,12(fp)
   20e2c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20e30:	0089c404 	movi	r2,10000
   20e34:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   20e38:	e0bfff03 	ldbu	r2,-4(fp)
   20e3c:	10005626 	beq	r2,zero,20f98 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   20e40:	00002806 	br	20ee4 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20e44:	e0bffa17 	ldw	r2,-24(fp)
   20e48:	108002a8 	cmpgeui	r2,r2,10
   20e4c:	1000021e 	bne	r2,zero,20e58 <alt_avalon_i2c_master_tx_rx+0x50>
   20e50:	0109c404 	movi	r4,10000
   20e54:	002296c0 	call	2296c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20e58:	d8000015 	stw	zero,0(sp)
   20e5c:	000f883a 	mov	r7,zero
   20e60:	e1bffd17 	ldw	r6,-12(fp)
   20e64:	e17ffc17 	ldw	r5,-16(fp)
   20e68:	e13ffb17 	ldw	r4,-20(fp)
   20e6c:	00211900 	call	21190 <alt_avalon_i2c_master_transmit_using_interrupts>
   20e70:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20e74:	e0bff917 	ldw	r2,-28(fp)
   20e78:	10bffea0 	cmpeqi	r2,r2,-6
   20e7c:	1000191e 	bne	r2,zero,20ee4 <alt_avalon_i2c_master_tx_rx+0xdc>
   20e80:	e0bff917 	ldw	r2,-28(fp)
   20e84:	10bffee0 	cmpeqi	r2,r2,-5
   20e88:	1000161e 	bne	r2,zero,20ee4 <alt_avalon_i2c_master_tx_rx+0xdc>
   20e8c:	e0bff917 	ldw	r2,-28(fp)
   20e90:	10bffe58 	cmpnei	r2,r2,-7
   20e94:	1000011e 	bne	r2,zero,20e9c <alt_avalon_i2c_master_tx_rx+0x94>
   20e98:	00001206 	br	20ee4 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20e9c:	00800044 	movi	r2,1
   20ea0:	d8800015 	stw	r2,0(sp)
   20ea4:	01c00044 	movi	r7,1
   20ea8:	e1800217 	ldw	r6,8(fp)
   20eac:	e17ffe17 	ldw	r5,-8(fp)
   20eb0:	e13ffb17 	ldw	r4,-20(fp)
   20eb4:	00215ac0 	call	215ac <alt_avalon_i2c_master_receive_using_interrupts>
   20eb8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20ebc:	e0bff917 	ldw	r2,-28(fp)
   20ec0:	10bffea0 	cmpeqi	r2,r2,-6
   20ec4:	1000061e 	bne	r2,zero,20ee0 <alt_avalon_i2c_master_tx_rx+0xd8>
   20ec8:	e0bff917 	ldw	r2,-28(fp)
   20ecc:	10bffee0 	cmpeqi	r2,r2,-5
   20ed0:	1000031e 	bne	r2,zero,20ee0 <alt_avalon_i2c_master_tx_rx+0xd8>
   20ed4:	e0bff917 	ldw	r2,-28(fp)
   20ed8:	10bffe58 	cmpnei	r2,r2,-7
   20edc:	1000331e 	bne	r2,zero,20fac <alt_avalon_i2c_master_tx_rx+0x1a4>
   20ee0:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   20ee4:	e0bffa17 	ldw	r2,-24(fp)
   20ee8:	10ffffc4 	addi	r3,r2,-1
   20eec:	e0fffa15 	stw	r3,-24(fp)
   20ef0:	103fd41e 	bne	r2,zero,20e44 <__alt_data_end+0xfc020e44>
   20ef4:	00003006 	br	20fb8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20ef8:	e0bffa17 	ldw	r2,-24(fp)
   20efc:	108002a8 	cmpgeui	r2,r2,10
   20f00:	1000021e 	bne	r2,zero,20f0c <alt_avalon_i2c_master_tx_rx+0x104>
   20f04:	0109c404 	movi	r4,10000
   20f08:	002296c0 	call	2296c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20f0c:	d8000015 	stw	zero,0(sp)
   20f10:	000f883a 	mov	r7,zero
   20f14:	e1bffd17 	ldw	r6,-12(fp)
   20f18:	e17ffc17 	ldw	r5,-16(fp)
   20f1c:	e13ffb17 	ldw	r4,-20(fp)
   20f20:	0020fd00 	call	20fd0 <alt_avalon_i2c_master_transmit>
   20f24:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20f28:	e0bff917 	ldw	r2,-28(fp)
   20f2c:	10bffea0 	cmpeqi	r2,r2,-6
   20f30:	1000191e 	bne	r2,zero,20f98 <alt_avalon_i2c_master_tx_rx+0x190>
   20f34:	e0bff917 	ldw	r2,-28(fp)
   20f38:	10bffee0 	cmpeqi	r2,r2,-5
   20f3c:	1000161e 	bne	r2,zero,20f98 <alt_avalon_i2c_master_tx_rx+0x190>
   20f40:	e0bff917 	ldw	r2,-28(fp)
   20f44:	10bffe58 	cmpnei	r2,r2,-7
   20f48:	1000011e 	bne	r2,zero,20f50 <alt_avalon_i2c_master_tx_rx+0x148>
   20f4c:	00001206 	br	20f98 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20f50:	00800044 	movi	r2,1
   20f54:	d8800015 	stw	r2,0(sp)
   20f58:	01c00044 	movi	r7,1
   20f5c:	e1800217 	ldw	r6,8(fp)
   20f60:	e17ffe17 	ldw	r5,-8(fp)
   20f64:	e13ffb17 	ldw	r4,-20(fp)
   20f68:	002139c0 	call	2139c <alt_avalon_i2c_master_receive>
   20f6c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20f70:	e0bff917 	ldw	r2,-28(fp)
   20f74:	10bffea0 	cmpeqi	r2,r2,-6
   20f78:	1000061e 	bne	r2,zero,20f94 <alt_avalon_i2c_master_tx_rx+0x18c>
   20f7c:	e0bff917 	ldw	r2,-28(fp)
   20f80:	10bffee0 	cmpeqi	r2,r2,-5
   20f84:	1000031e 	bne	r2,zero,20f94 <alt_avalon_i2c_master_tx_rx+0x18c>
   20f88:	e0bff917 	ldw	r2,-28(fp)
   20f8c:	10bffe58 	cmpnei	r2,r2,-7
   20f90:	1000081e 	bne	r2,zero,20fb4 <alt_avalon_i2c_master_tx_rx+0x1ac>
   20f94:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   20f98:	e0bffa17 	ldw	r2,-24(fp)
   20f9c:	10ffffc4 	addi	r3,r2,-1
   20fa0:	e0fffa15 	stw	r3,-24(fp)
   20fa4:	103fd41e 	bne	r2,zero,20ef8 <__alt_data_end+0xfc020ef8>
   20fa8:	00000306 	br	20fb8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20fac:	0001883a 	nop
   20fb0:	00000106 	br	20fb8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20fb4:	0001883a 	nop
      }
    }
    
    return status;
   20fb8:	e0bff917 	ldw	r2,-28(fp)
}                                       
   20fbc:	e037883a 	mov	sp,fp
   20fc0:	dfc00117 	ldw	ra,4(sp)
   20fc4:	df000017 	ldw	fp,0(sp)
   20fc8:	dec00204 	addi	sp,sp,8
   20fcc:	f800283a 	ret

00020fd0 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20fd0:	defff704 	addi	sp,sp,-36
   20fd4:	dfc00815 	stw	ra,32(sp)
   20fd8:	df000715 	stw	fp,28(sp)
   20fdc:	df000704 	addi	fp,sp,28
   20fe0:	e13ffb15 	stw	r4,-20(fp)
   20fe4:	e17ffc15 	stw	r5,-16(fp)
   20fe8:	e1bffd15 	stw	r6,-12(fp)
   20fec:	3807883a 	mov	r3,r7
   20ff0:	e0800217 	ldw	r2,8(fp)
   20ff4:	e0fffe05 	stb	r3,-8(fp)
   20ff8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20ffc:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   21000:	0149c404 	movi	r5,10000
   21004:	e13ffd17 	ldw	r4,-12(fp)
   21008:	000d18c0 	call	d18c <__mulsi3>
   2100c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   21010:	e0bffd17 	ldw	r2,-12(fp)
   21014:	1000021e 	bne	r2,zero,21020 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21018:	0005883a 	mov	r2,zero
   2101c:	00005706 	br	2117c <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21020:	e0bffe03 	ldbu	r2,-8(fp)
   21024:	10000a1e 	bne	r2,zero,21050 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21028:	e13ffb17 	ldw	r4,-20(fp)
   2102c:	002024c0 	call	2024c <alt_avalon_i2c_enable>
   21030:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21034:	e0bffa17 	ldw	r2,-24(fp)
   21038:	10000226 	beq	r2,zero,21044 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   2103c:	e0bffa17 	ldw	r2,-24(fp)
   21040:	00004e06 	br	2117c <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21044:	01400704 	movi	r5,28
   21048:	e13ffb17 	ldw	r4,-20(fp)
   2104c:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21050:	e0bffe03 	ldbu	r2,-8(fp)
   21054:	100d883a 	mov	r6,r2
   21058:	000b883a 	mov	r5,zero
   2105c:	e13ffb17 	ldw	r4,-20(fp)
   21060:	00208b40 	call	208b4 <alt_avalon_i2c_send_address>
   21064:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   21068:	e0bffa17 	ldw	r2,-24(fp)
   2106c:	1000271e 	bne	r2,zero,2110c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21070:	00000f06 	br	210b0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21074:	e0bffc17 	ldw	r2,-16(fp)
   21078:	10800003 	ldbu	r2,0(r2)
   2107c:	10803fcc 	andi	r2,r2,255
   21080:	000f883a 	mov	r7,zero
   21084:	000d883a 	mov	r6,zero
   21088:	100b883a 	mov	r5,r2
   2108c:	e13ffb17 	ldw	r4,-20(fp)
   21090:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   21094:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   21098:	e0bffc17 	ldw	r2,-16(fp)
   2109c:	10800044 	addi	r2,r2,1
   210a0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   210a4:	e0bffd17 	ldw	r2,-12(fp)
   210a8:	10bfffc4 	addi	r2,r2,-1
   210ac:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   210b0:	e0bffd17 	ldw	r2,-12(fp)
   210b4:	108000b0 	cmpltui	r2,r2,2
   210b8:	1000021e 	bne	r2,zero,210c4 <alt_avalon_i2c_master_transmit+0xf4>
   210bc:	e0bffa17 	ldw	r2,-24(fp)
   210c0:	103fec26 	beq	r2,zero,21074 <__alt_data_end+0xfc021074>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   210c4:	e0bffa17 	ldw	r2,-24(fp)
   210c8:	1000101e 	bne	r2,zero,2110c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   210cc:	e0bffc17 	ldw	r2,-16(fp)
   210d0:	10800003 	ldbu	r2,0(r2)
   210d4:	10803fcc 	andi	r2,r2,255
   210d8:	e0ffff03 	ldbu	r3,-4(fp)
   210dc:	180f883a 	mov	r7,r3
   210e0:	000d883a 	mov	r6,zero
   210e4:	100b883a 	mov	r5,r2
   210e8:	e13ffb17 	ldw	r4,-20(fp)
   210ec:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   210f0:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   210f4:	e0bffc17 	ldw	r2,-16(fp)
   210f8:	10800044 	addi	r2,r2,1
   210fc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21100:	e0bffd17 	ldw	r2,-12(fp)
   21104:	10bfffc4 	addi	r2,r2,-1
   21108:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2110c:	e0bfff03 	ldbu	r2,-4(fp)
   21110:	1000101e 	bne	r2,zero,21154 <alt_avalon_i2c_master_transmit+0x184>
   21114:	e0bffa17 	ldw	r2,-24(fp)
   21118:	10001726 	beq	r2,zero,21178 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2111c:	00000d06 	br	21154 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21120:	e0bff917 	ldw	r2,-28(fp)
   21124:	108002a8 	cmpgeui	r2,r2,10
   21128:	1000021e 	bne	r2,zero,21134 <alt_avalon_i2c_master_transmit+0x164>
   2112c:	0109c404 	movi	r4,10000
   21130:	002296c0 	call	2296c <alt_busy_sleep>
            if (--timeout == 0)
   21134:	e0bff917 	ldw	r2,-28(fp)
   21138:	10bfffc4 	addi	r2,r2,-1
   2113c:	e0bff915 	stw	r2,-28(fp)
   21140:	e0bff917 	ldw	r2,-28(fp)
   21144:	1000031e 	bne	r2,zero,21154 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21148:	00bfff84 	movi	r2,-2
   2114c:	e0bffa15 	stw	r2,-24(fp)
               break;
   21150:	00000306 	br	21160 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21154:	e13ffb17 	ldw	r4,-20(fp)
   21158:	002063c0 	call	2063c <alt_avalon_i2c_is_busy>
   2115c:	103ff01e 	bne	r2,zero,21120 <__alt_data_end+0xfc021120>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   21160:	e0bffa04 	addi	r2,fp,-24
   21164:	100b883a 	mov	r5,r2
   21168:	e13ffb17 	ldw	r4,-20(fp)
   2116c:	0020a100 	call	20a10 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21170:	e13ffb17 	ldw	r4,-20(fp)
   21174:	00202e40 	call	202e4 <alt_avalon_i2c_disable>
    }


    return status;
   21178:	e0bffa17 	ldw	r2,-24(fp)
}
   2117c:	e037883a 	mov	sp,fp
   21180:	dfc00117 	ldw	ra,4(sp)
   21184:	df000017 	ldw	fp,0(sp)
   21188:	dec00204 	addi	sp,sp,8
   2118c:	f800283a 	ret

00021190 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21190:	defff604 	addi	sp,sp,-40
   21194:	dfc00915 	stw	ra,36(sp)
   21198:	df000815 	stw	fp,32(sp)
   2119c:	df000804 	addi	fp,sp,32
   211a0:	e13ffb15 	stw	r4,-20(fp)
   211a4:	e17ffc15 	stw	r5,-16(fp)
   211a8:	e1bffd15 	stw	r6,-12(fp)
   211ac:	3807883a 	mov	r3,r7
   211b0:	e0800217 	ldw	r2,8(fp)
   211b4:	e0fffe05 	stb	r3,-8(fp)
   211b8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   211bc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   211c0:	0149c404 	movi	r5,10000
   211c4:	e13ffd17 	ldw	r4,-12(fp)
   211c8:	000d18c0 	call	d18c <__mulsi3>
   211cc:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   211d0:	e0bffb17 	ldw	r2,-20(fp)
   211d4:	10800717 	ldw	r2,28(r2)
   211d8:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   211dc:	e0bffd17 	ldw	r2,-12(fp)
   211e0:	1000021e 	bne	r2,zero,211ec <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   211e4:	0005883a 	mov	r2,zero
   211e8:	00006706 	br	21388 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   211ec:	e0bffb17 	ldw	r2,-20(fp)
   211f0:	10c00617 	ldw	r3,24(r2)
   211f4:	008000b4 	movhi	r2,2
   211f8:	10bfb404 	addi	r2,r2,-304
   211fc:	18800226 	beq	r3,r2,21208 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21200:	00bfff44 	movi	r2,-3
   21204:	00006006 	br	21388 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21208:	e0bffe03 	ldbu	r2,-8(fp)
   2120c:	10000a1e 	bne	r2,zero,21238 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21210:	e13ffb17 	ldw	r4,-20(fp)
   21214:	002024c0 	call	2024c <alt_avalon_i2c_enable>
   21218:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2121c:	e0bff817 	ldw	r2,-32(fp)
   21220:	10000226 	beq	r2,zero,2122c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   21224:	e0bff817 	ldw	r2,-32(fp)
   21228:	00005706 	br	21388 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2122c:	01400704 	movi	r5,28
   21230:	e13ffb17 	ldw	r4,-20(fp)
   21234:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21238:	e0bffe03 	ldbu	r2,-8(fp)
   2123c:	100d883a 	mov	r6,r2
   21240:	000b883a 	mov	r5,zero
   21244:	e13ffb17 	ldw	r4,-20(fp)
   21248:	00208b40 	call	208b4 <alt_avalon_i2c_send_address>
   2124c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   21250:	e0bff817 	ldw	r2,-32(fp)
   21254:	1000271e 	bne	r2,zero,212f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21258:	00000f06 	br	21298 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2125c:	e0bffc17 	ldw	r2,-16(fp)
   21260:	10800003 	ldbu	r2,0(r2)
   21264:	10803fcc 	andi	r2,r2,255
   21268:	000f883a 	mov	r7,zero
   2126c:	000d883a 	mov	r6,zero
   21270:	100b883a 	mov	r5,r2
   21274:	e13ffb17 	ldw	r4,-20(fp)
   21278:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   2127c:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   21280:	e0bffc17 	ldw	r2,-16(fp)
   21284:	10800044 	addi	r2,r2,1
   21288:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2128c:	e0bffd17 	ldw	r2,-12(fp)
   21290:	10bfffc4 	addi	r2,r2,-1
   21294:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21298:	e0bffd17 	ldw	r2,-12(fp)
   2129c:	108000b0 	cmpltui	r2,r2,2
   212a0:	1000021e 	bne	r2,zero,212ac <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   212a4:	e0bff817 	ldw	r2,-32(fp)
   212a8:	103fec26 	beq	r2,zero,2125c <__alt_data_end+0xfc02125c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   212ac:	e0bff817 	ldw	r2,-32(fp)
   212b0:	1000101e 	bne	r2,zero,212f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   212b4:	e0bffc17 	ldw	r2,-16(fp)
   212b8:	10800003 	ldbu	r2,0(r2)
   212bc:	10803fcc 	andi	r2,r2,255
   212c0:	e0ffff03 	ldbu	r3,-4(fp)
   212c4:	180f883a 	mov	r7,r3
   212c8:	000d883a 	mov	r6,zero
   212cc:	100b883a 	mov	r5,r2
   212d0:	e13ffb17 	ldw	r4,-20(fp)
   212d4:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   212d8:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   212dc:	e0bffc17 	ldw	r2,-16(fp)
   212e0:	10800044 	addi	r2,r2,1
   212e4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   212e8:	e0bffd17 	ldw	r2,-12(fp)
   212ec:	10bfffc4 	addi	r2,r2,-1
   212f0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   212f4:	e0bff817 	ldw	r2,-32(fp)
   212f8:	10001426 	beq	r2,zero,2134c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   212fc:	00000d06 	br	21334 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   21300:	e0bff917 	ldw	r2,-28(fp)
   21304:	108002a8 	cmpgeui	r2,r2,10
   21308:	1000021e 	bne	r2,zero,21314 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   2130c:	0109c404 	movi	r4,10000
   21310:	002296c0 	call	2296c <alt_busy_sleep>
            if (--timeout == 0)
   21314:	e0bff917 	ldw	r2,-28(fp)
   21318:	10bfffc4 	addi	r2,r2,-1
   2131c:	e0bff915 	stw	r2,-28(fp)
   21320:	e0bff917 	ldw	r2,-28(fp)
   21324:	1000031e 	bne	r2,zero,21334 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21328:	00bfff84 	movi	r2,-2
   2132c:	e0bff815 	stw	r2,-32(fp)
               break;
   21330:	00000306 	br	21340 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21334:	e13ffb17 	ldw	r4,-20(fp)
   21338:	002063c0 	call	2063c <alt_avalon_i2c_is_busy>
   2133c:	103ff01e 	bne	r2,zero,21300 <__alt_data_end+0xfc021300>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21340:	e13ffb17 	ldw	r4,-20(fp)
   21344:	00202e40 	call	202e4 <alt_avalon_i2c_disable>
   21348:	00000e06 	br	21384 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   2134c:	e0bfff03 	ldbu	r2,-4(fp)
   21350:	10000c26 	beq	r2,zero,21384 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21354:	01400704 	movi	r5,28
   21358:	e13ffb17 	ldw	r4,-20(fp)
   2135c:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   21360:	000b883a 	mov	r5,zero
   21364:	e13ffb17 	ldw	r4,-20(fp)
   21368:	0021a800 	call	21a80 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   2136c:	e0bffa17 	ldw	r2,-24(fp)
   21370:	00c00044 	movi	r3,1
   21374:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   21378:	01400044 	movi	r5,1
   2137c:	e13ffb17 	ldw	r4,-20(fp)
   21380:	00218dc0 	call	218dc <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   21384:	e0bff817 	ldw	r2,-32(fp)
}
   21388:	e037883a 	mov	sp,fp
   2138c:	dfc00117 	ldw	ra,4(sp)
   21390:	df000017 	ldw	fp,0(sp)
   21394:	dec00204 	addi	sp,sp,8
   21398:	f800283a 	ret

0002139c <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   2139c:	defff404 	addi	sp,sp,-48
   213a0:	dfc00b15 	stw	ra,44(sp)
   213a4:	df000a15 	stw	fp,40(sp)
   213a8:	df000a04 	addi	fp,sp,40
   213ac:	e13ffb15 	stw	r4,-20(fp)
   213b0:	e17ffc15 	stw	r5,-16(fp)
   213b4:	e1bffd15 	stw	r6,-12(fp)
   213b8:	3807883a 	mov	r3,r7
   213bc:	e0800217 	ldw	r2,8(fp)
   213c0:	e0fffe05 	stb	r3,-8(fp)
   213c4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   213c8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   213cc:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   213d0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   213d4:	e0bffd17 	ldw	r2,-12(fp)
   213d8:	1000021e 	bne	r2,zero,213e4 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   213dc:	0005883a 	mov	r2,zero
   213e0:	00006d06 	br	21598 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   213e4:	e0bffe03 	ldbu	r2,-8(fp)
   213e8:	10000a1e 	bne	r2,zero,21414 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   213ec:	e13ffb17 	ldw	r4,-20(fp)
   213f0:	002024c0 	call	2024c <alt_avalon_i2c_enable>
   213f4:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   213f8:	e0bff917 	ldw	r2,-28(fp)
   213fc:	10000226 	beq	r2,zero,21408 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   21400:	e0bff917 	ldw	r2,-28(fp)
   21404:	00006406 	br	21598 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21408:	01400704 	movi	r5,28
   2140c:	e13ffb17 	ldw	r4,-20(fp)
   21410:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21414:	e0bffe03 	ldbu	r2,-8(fp)
   21418:	100d883a 	mov	r6,r2
   2141c:	01400044 	movi	r5,1
   21420:	e13ffb17 	ldw	r4,-20(fp)
   21424:	00208b40 	call	208b4 <alt_avalon_i2c_send_address>
   21428:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2142c:	e0bff917 	ldw	r2,-28(fp)
   21430:	1000341e 	bne	r2,zero,21504 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21434:	00001906 	br	2149c <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21438:	000f883a 	mov	r7,zero
   2143c:	000d883a 	mov	r6,zero
   21440:	000b883a 	mov	r5,zero
   21444:	e13ffb17 	ldw	r4,-20(fp)
   21448:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   2144c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   21450:	e0bff817 	ldw	r2,-32(fp)
   21454:	10800044 	addi	r2,r2,1
   21458:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   2145c:	e0bff917 	ldw	r2,-28(fp)
   21460:	10000e1e 	bne	r2,zero,2149c <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   21464:	e0bffa04 	addi	r2,fp,-24
   21468:	100f883a 	mov	r7,r2
   2146c:	000d883a 	mov	r6,zero
   21470:	e17ffc17 	ldw	r5,-16(fp)
   21474:	e13ffb17 	ldw	r4,-20(fp)
   21478:	00206800 	call	20680 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   2147c:	e0bffa17 	ldw	r2,-24(fp)
   21480:	e0fffc17 	ldw	r3,-16(fp)
   21484:	1885883a 	add	r2,r3,r2
   21488:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   2148c:	e0bffa17 	ldw	r2,-24(fp)
   21490:	e0fff717 	ldw	r3,-36(fp)
   21494:	1885883a 	add	r2,r3,r2
   21498:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2149c:	e0bffd17 	ldw	r2,-12(fp)
   214a0:	10bfffc4 	addi	r2,r2,-1
   214a4:	e0fff817 	ldw	r3,-32(fp)
   214a8:	1880022e 	bgeu	r3,r2,214b4 <alt_avalon_i2c_master_receive+0x118>
   214ac:	e0bff917 	ldw	r2,-28(fp)
   214b0:	103fe126 	beq	r2,zero,21438 <__alt_data_end+0xfc021438>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   214b4:	e0bff917 	ldw	r2,-28(fp)
   214b8:	1000121e 	bne	r2,zero,21504 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   214bc:	e0bfff03 	ldbu	r2,-4(fp)
   214c0:	100f883a 	mov	r7,r2
   214c4:	000d883a 	mov	r6,zero
   214c8:	000b883a 	mov	r5,zero
   214cc:	e13ffb17 	ldw	r4,-20(fp)
   214d0:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   214d4:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   214d8:	00000a06 	br	21504 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   214dc:	e17ffc17 	ldw	r5,-16(fp)
   214e0:	e13ffb17 	ldw	r4,-20(fp)
   214e4:	00207280 	call	20728 <alt_avalon_i2c_rx_read>
   214e8:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   214ec:	e0bffc17 	ldw	r2,-16(fp)
   214f0:	10800044 	addi	r2,r2,1
   214f4:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   214f8:	e0bff717 	ldw	r2,-36(fp)
   214fc:	10800044 	addi	r2,r2,1
   21500:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   21504:	e0fff717 	ldw	r3,-36(fp)
   21508:	e0bffd17 	ldw	r2,-12(fp)
   2150c:	1880022e 	bgeu	r3,r2,21518 <alt_avalon_i2c_master_receive+0x17c>
   21510:	e0bff917 	ldw	r2,-28(fp)
   21514:	103ff126 	beq	r2,zero,214dc <__alt_data_end+0xfc0214dc>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21518:	e0bfff03 	ldbu	r2,-4(fp)
   2151c:	1000021e 	bne	r2,zero,21528 <alt_avalon_i2c_master_receive+0x18c>
   21520:	e0bff917 	ldw	r2,-28(fp)
   21524:	10001b26 	beq	r2,zero,21594 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   21528:	0149c404 	movi	r5,10000
   2152c:	e13ffd17 	ldw	r4,-12(fp)
   21530:	000d18c0 	call	d18c <__mulsi3>
   21534:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21538:	00000d06 	br	21570 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2153c:	e0bff617 	ldw	r2,-40(fp)
   21540:	108002a8 	cmpgeui	r2,r2,10
   21544:	1000021e 	bne	r2,zero,21550 <alt_avalon_i2c_master_receive+0x1b4>
   21548:	0109c404 	movi	r4,10000
   2154c:	002296c0 	call	2296c <alt_busy_sleep>
            if (--timeout == 0)
   21550:	e0bff617 	ldw	r2,-40(fp)
   21554:	10bfffc4 	addi	r2,r2,-1
   21558:	e0bff615 	stw	r2,-40(fp)
   2155c:	e0bff617 	ldw	r2,-40(fp)
   21560:	1000031e 	bne	r2,zero,21570 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21564:	00bfff84 	movi	r2,-2
   21568:	e0bff915 	stw	r2,-28(fp)
               break;
   2156c:	00000306 	br	2157c <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21570:	e13ffb17 	ldw	r4,-20(fp)
   21574:	002063c0 	call	2063c <alt_avalon_i2c_is_busy>
   21578:	103ff01e 	bne	r2,zero,2153c <__alt_data_end+0xfc02153c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   2157c:	e0bff904 	addi	r2,fp,-28
   21580:	100b883a 	mov	r5,r2
   21584:	e13ffb17 	ldw	r4,-20(fp)
   21588:	0020a100 	call	20a10 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2158c:	e13ffb17 	ldw	r4,-20(fp)
   21590:	00202e40 	call	202e4 <alt_avalon_i2c_disable>
    }

    return status;
   21594:	e0bff917 	ldw	r2,-28(fp)
}
   21598:	e037883a 	mov	sp,fp
   2159c:	dfc00117 	ldw	ra,4(sp)
   215a0:	df000017 	ldw	fp,0(sp)
   215a4:	dec00204 	addi	sp,sp,8
   215a8:	f800283a 	ret

000215ac <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   215ac:	defff504 	addi	sp,sp,-44
   215b0:	dfc00a15 	stw	ra,40(sp)
   215b4:	df000915 	stw	fp,36(sp)
   215b8:	df000904 	addi	fp,sp,36
   215bc:	e13ffb15 	stw	r4,-20(fp)
   215c0:	e17ffc15 	stw	r5,-16(fp)
   215c4:	e1bffd15 	stw	r6,-12(fp)
   215c8:	3807883a 	mov	r3,r7
   215cc:	e0800217 	ldw	r2,8(fp)
   215d0:	e0fffe05 	stb	r3,-8(fp)
   215d4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   215d8:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   215dc:	e0bffb17 	ldw	r2,-20(fp)
   215e0:	10800717 	ldw	r2,28(r2)
   215e4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   215e8:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   215ec:	e0bffd17 	ldw	r2,-12(fp)
   215f0:	1000021e 	bne	r2,zero,215fc <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   215f4:	0005883a 	mov	r2,zero
   215f8:	00006306 	br	21788 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   215fc:	e0bffb17 	ldw	r2,-20(fp)
   21600:	10c00617 	ldw	r3,24(r2)
   21604:	008000b4 	movhi	r2,2
   21608:	10bfb404 	addi	r2,r2,-304
   2160c:	18800226 	beq	r3,r2,21618 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21610:	00bfff44 	movi	r2,-3
   21614:	00005c06 	br	21788 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21618:	e0bffe03 	ldbu	r2,-8(fp)
   2161c:	10000a1e 	bne	r2,zero,21648 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21620:	e13ffb17 	ldw	r4,-20(fp)
   21624:	002024c0 	call	2024c <alt_avalon_i2c_enable>
   21628:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2162c:	e0bff717 	ldw	r2,-36(fp)
   21630:	10000226 	beq	r2,zero,2163c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   21634:	e0bff717 	ldw	r2,-36(fp)
   21638:	00005306 	br	21788 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2163c:	01400704 	movi	r5,28
   21640:	e13ffb17 	ldw	r4,-20(fp)
   21644:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21648:	e0bffe03 	ldbu	r2,-8(fp)
   2164c:	100d883a 	mov	r6,r2
   21650:	01400044 	movi	r5,1
   21654:	e13ffb17 	ldw	r4,-20(fp)
   21658:	00208b40 	call	208b4 <alt_avalon_i2c_send_address>
   2165c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   21660:	e0bff717 	ldw	r2,-36(fp)
   21664:	1000191e 	bne	r2,zero,216cc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21668:	00000906 	br	21690 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2166c:	000f883a 	mov	r7,zero
   21670:	000d883a 	mov	r6,zero
   21674:	000b883a 	mov	r5,zero
   21678:	e13ffb17 	ldw	r4,-20(fp)
   2167c:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   21680:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   21684:	e0bff917 	ldw	r2,-28(fp)
   21688:	10800044 	addi	r2,r2,1
   2168c:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21690:	e0bffd17 	ldw	r2,-12(fp)
   21694:	10bfffc4 	addi	r2,r2,-1
   21698:	e0fff917 	ldw	r3,-28(fp)
   2169c:	1880022e 	bgeu	r3,r2,216a8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   216a0:	e0bff717 	ldw	r2,-36(fp)
   216a4:	103ff126 	beq	r2,zero,2166c <__alt_data_end+0xfc02166c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   216a8:	e0bff717 	ldw	r2,-36(fp)
   216ac:	1000071e 	bne	r2,zero,216cc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   216b0:	e0bfff03 	ldbu	r2,-4(fp)
   216b4:	100f883a 	mov	r7,r2
   216b8:	000d883a 	mov	r6,zero
   216bc:	000b883a 	mov	r5,zero
   216c0:	e13ffb17 	ldw	r4,-20(fp)
   216c4:	00207d00 	call	207d0 <alt_avalon_i2c_cmd_write>
   216c8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   216cc:	e0bff717 	ldw	r2,-36(fp)
   216d0:	10001826 	beq	r2,zero,21734 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   216d4:	0149c404 	movi	r5,10000
   216d8:	e13ffd17 	ldw	r4,-12(fp)
   216dc:	000d18c0 	call	d18c <__mulsi3>
   216e0:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   216e4:	00000d06 	br	2171c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   216e8:	e0bff817 	ldw	r2,-32(fp)
   216ec:	108002a8 	cmpgeui	r2,r2,10
   216f0:	1000021e 	bne	r2,zero,216fc <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   216f4:	0109c404 	movi	r4,10000
   216f8:	002296c0 	call	2296c <alt_busy_sleep>
            if (--timeout == 0)
   216fc:	e0bff817 	ldw	r2,-32(fp)
   21700:	10bfffc4 	addi	r2,r2,-1
   21704:	e0bff815 	stw	r2,-32(fp)
   21708:	e0bff817 	ldw	r2,-32(fp)
   2170c:	1000031e 	bne	r2,zero,2171c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21710:	00bfff84 	movi	r2,-2
   21714:	e0bff715 	stw	r2,-36(fp)
               break;
   21718:	00000306 	br	21728 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2171c:	e13ffb17 	ldw	r4,-20(fp)
   21720:	002063c0 	call	2063c <alt_avalon_i2c_is_busy>
   21724:	103ff01e 	bne	r2,zero,216e8 <__alt_data_end+0xfc0216e8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21728:	e13ffb17 	ldw	r4,-20(fp)
   2172c:	00202e40 	call	202e4 <alt_avalon_i2c_disable>
   21730:	00001406 	br	21784 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   21734:	e0bfff03 	ldbu	r2,-4(fp)
   21738:	10001226 	beq	r2,zero,21784 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2173c:	01400704 	movi	r5,28
   21740:	e13ffb17 	ldw	r4,-20(fp)
   21744:	00218380 	call	21838 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   21748:	000b883a 	mov	r5,zero
   2174c:	e13ffb17 	ldw	r4,-20(fp)
   21750:	00219d00 	call	219d0 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   21754:	e0bffa17 	ldw	r2,-24(fp)
   21758:	00c00084 	movi	r3,2
   2175c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   21760:	e0bffa17 	ldw	r2,-24(fp)
   21764:	e0fffc17 	ldw	r3,-16(fp)
   21768:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   2176c:	e0bffa17 	ldw	r2,-24(fp)
   21770:	e0fffd17 	ldw	r3,-12(fp)
   21774:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   21778:	01400084 	movi	r5,2
   2177c:	e13ffb17 	ldw	r4,-20(fp)
   21780:	00218dc0 	call	218dc <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   21784:	e0bff717 	ldw	r2,-36(fp)
}
   21788:	e037883a 	mov	sp,fp
   2178c:	dfc00117 	ldw	ra,4(sp)
   21790:	df000017 	ldw	fp,0(sp)
   21794:	dec00204 	addi	sp,sp,8
   21798:	f800283a 	ret

0002179c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   2179c:	defffd04 	addi	sp,sp,-12
   217a0:	df000215 	stw	fp,8(sp)
   217a4:	df000204 	addi	fp,sp,8
   217a8:	e13ffe15 	stw	r4,-8(fp)
   217ac:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   217b0:	e0bffe17 	ldw	r2,-8(fp)
   217b4:	10800317 	ldw	r2,12(r2)
   217b8:	10800404 	addi	r2,r2,16
   217bc:	10c00037 	ldwio	r3,0(r2)
   217c0:	e0bffe17 	ldw	r2,-8(fp)
   217c4:	10800317 	ldw	r2,12(r2)
   217c8:	10800304 	addi	r2,r2,12
   217cc:	10800037 	ldwio	r2,0(r2)
   217d0:	1884703a 	and	r2,r3,r2
   217d4:	1007883a 	mov	r3,r2
   217d8:	e0bfff17 	ldw	r2,-4(fp)
   217dc:	10c00015 	stw	r3,0(r2)
}
   217e0:	0001883a 	nop
   217e4:	e037883a 	mov	sp,fp
   217e8:	df000017 	ldw	fp,0(sp)
   217ec:	dec00104 	addi	sp,sp,4
   217f0:	f800283a 	ret

000217f4 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   217f4:	defffd04 	addi	sp,sp,-12
   217f8:	df000215 	stw	fp,8(sp)
   217fc:	df000204 	addi	fp,sp,8
   21800:	e13ffe15 	stw	r4,-8(fp)
   21804:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   21808:	e0bffe17 	ldw	r2,-8(fp)
   2180c:	10800317 	ldw	r2,12(r2)
   21810:	10800404 	addi	r2,r2,16
   21814:	10800037 	ldwio	r2,0(r2)
   21818:	1007883a 	mov	r3,r2
   2181c:	e0bfff17 	ldw	r2,-4(fp)
   21820:	10c00015 	stw	r3,0(r2)
}
   21824:	0001883a 	nop
   21828:	e037883a 	mov	sp,fp
   2182c:	df000017 	ldw	fp,0(sp)
   21830:	dec00104 	addi	sp,sp,4
   21834:	f800283a 	ret

00021838 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21838:	defffd04 	addi	sp,sp,-12
   2183c:	df000215 	stw	fp,8(sp)
   21840:	df000204 	addi	fp,sp,8
   21844:	e13ffe15 	stw	r4,-8(fp)
   21848:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2184c:	e0bffe17 	ldw	r2,-8(fp)
   21850:	10800317 	ldw	r2,12(r2)
   21854:	10800404 	addi	r2,r2,16
   21858:	e0ffff17 	ldw	r3,-4(fp)
   2185c:	10c00035 	stwio	r3,0(r2)
}
   21860:	0001883a 	nop
   21864:	e037883a 	mov	sp,fp
   21868:	df000017 	ldw	fp,0(sp)
   2186c:	dec00104 	addi	sp,sp,4
   21870:	f800283a 	ret

00021874 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21874:	defffb04 	addi	sp,sp,-20
   21878:	dfc00415 	stw	ra,16(sp)
   2187c:	df000315 	stw	fp,12(sp)
   21880:	df000304 	addi	fp,sp,12
   21884:	e13ffe15 	stw	r4,-8(fp)
   21888:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2188c:	e17ffd04 	addi	r5,fp,-12
   21890:	e13ffe17 	ldw	r4,-8(fp)
   21894:	00219400 	call	21940 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   21898:	e0bfff17 	ldw	r2,-4(fp)
   2189c:	0086303a 	nor	r3,zero,r2
   218a0:	e0bffd17 	ldw	r2,-12(fp)
   218a4:	1884703a 	and	r2,r3,r2
   218a8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   218ac:	e0bffe17 	ldw	r2,-8(fp)
   218b0:	10800317 	ldw	r2,12(r2)
   218b4:	10800304 	addi	r2,r2,12
   218b8:	e0fffd17 	ldw	r3,-12(fp)
   218bc:	18c007cc 	andi	r3,r3,31
   218c0:	10c00035 	stwio	r3,0(r2)
}
   218c4:	0001883a 	nop
   218c8:	e037883a 	mov	sp,fp
   218cc:	dfc00117 	ldw	ra,4(sp)
   218d0:	df000017 	ldw	fp,0(sp)
   218d4:	dec00204 	addi	sp,sp,8
   218d8:	f800283a 	ret

000218dc <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   218dc:	defffb04 	addi	sp,sp,-20
   218e0:	dfc00415 	stw	ra,16(sp)
   218e4:	df000315 	stw	fp,12(sp)
   218e8:	df000304 	addi	fp,sp,12
   218ec:	e13ffe15 	stw	r4,-8(fp)
   218f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   218f4:	e17ffd04 	addi	r5,fp,-12
   218f8:	e13ffe17 	ldw	r4,-8(fp)
   218fc:	00219400 	call	21940 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   21900:	e0fffd17 	ldw	r3,-12(fp)
   21904:	e0bfff17 	ldw	r2,-4(fp)
   21908:	1884b03a 	or	r2,r3,r2
   2190c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   21910:	e0bffe17 	ldw	r2,-8(fp)
   21914:	10800317 	ldw	r2,12(r2)
   21918:	10800304 	addi	r2,r2,12
   2191c:	e0fffd17 	ldw	r3,-12(fp)
   21920:	18c007cc 	andi	r3,r3,31
   21924:	10c00035 	stwio	r3,0(r2)
}
   21928:	0001883a 	nop
   2192c:	e037883a 	mov	sp,fp
   21930:	dfc00117 	ldw	ra,4(sp)
   21934:	df000017 	ldw	fp,0(sp)
   21938:	dec00204 	addi	sp,sp,8
   2193c:	f800283a 	ret

00021940 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   21940:	defffd04 	addi	sp,sp,-12
   21944:	df000215 	stw	fp,8(sp)
   21948:	df000204 	addi	fp,sp,8
   2194c:	e13ffe15 	stw	r4,-8(fp)
   21950:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   21954:	e0bffe17 	ldw	r2,-8(fp)
   21958:	10800317 	ldw	r2,12(r2)
   2195c:	10800304 	addi	r2,r2,12
   21960:	10800037 	ldwio	r2,0(r2)
   21964:	10c007cc 	andi	r3,r2,31
   21968:	e0bfff17 	ldw	r2,-4(fp)
   2196c:	10c00015 	stw	r3,0(r2)
}
   21970:	0001883a 	nop
   21974:	e037883a 	mov	sp,fp
   21978:	df000017 	ldw	fp,0(sp)
   2197c:	dec00104 	addi	sp,sp,4
   21980:	f800283a 	ret

00021984 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   21984:	defffd04 	addi	sp,sp,-12
   21988:	df000215 	stw	fp,8(sp)
   2198c:	df000204 	addi	fp,sp,8
   21990:	e13ffe15 	stw	r4,-8(fp)
   21994:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   21998:	e0bffe17 	ldw	r2,-8(fp)
   2199c:	10800317 	ldw	r2,12(r2)
   219a0:	10800204 	addi	r2,r2,8
   219a4:	10800037 	ldwio	r2,0(r2)
   219a8:	10800c0c 	andi	r2,r2,48
   219ac:	1005d13a 	srai	r2,r2,4
   219b0:	1007883a 	mov	r3,r2
   219b4:	e0bfff17 	ldw	r2,-4(fp)
   219b8:	10c00015 	stw	r3,0(r2)
}
   219bc:	0001883a 	nop
   219c0:	e037883a 	mov	sp,fp
   219c4:	df000017 	ldw	fp,0(sp)
   219c8:	dec00104 	addi	sp,sp,4
   219cc:	f800283a 	ret

000219d0 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   219d0:	defffd04 	addi	sp,sp,-12
   219d4:	df000215 	stw	fp,8(sp)
   219d8:	df000204 	addi	fp,sp,8
   219dc:	e13ffe15 	stw	r4,-8(fp)
   219e0:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   219e4:	e0bffe17 	ldw	r2,-8(fp)
   219e8:	10800317 	ldw	r2,12(r2)
   219ec:	10800204 	addi	r2,r2,8
   219f0:	e0fffe17 	ldw	r3,-8(fp)
   219f4:	18c00317 	ldw	r3,12(r3)
   219f8:	18c00204 	addi	r3,r3,8
   219fc:	18c00037 	ldwio	r3,0(r3)
   21a00:	1809883a 	mov	r4,r3
   21a04:	00fff3c4 	movi	r3,-49
   21a08:	20c8703a 	and	r4,r4,r3
   21a0c:	e0ffff17 	ldw	r3,-4(fp)
   21a10:	1806913a 	slli	r3,r3,4
   21a14:	18c00c0c 	andi	r3,r3,48
   21a18:	20c6b03a 	or	r3,r4,r3
   21a1c:	10c00035 	stwio	r3,0(r2)
}
   21a20:	0001883a 	nop
   21a24:	e037883a 	mov	sp,fp
   21a28:	df000017 	ldw	fp,0(sp)
   21a2c:	dec00104 	addi	sp,sp,4
   21a30:	f800283a 	ret

00021a34 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   21a34:	defffd04 	addi	sp,sp,-12
   21a38:	df000215 	stw	fp,8(sp)
   21a3c:	df000204 	addi	fp,sp,8
   21a40:	e13ffe15 	stw	r4,-8(fp)
   21a44:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   21a48:	e0bffe17 	ldw	r2,-8(fp)
   21a4c:	10800317 	ldw	r2,12(r2)
   21a50:	10800204 	addi	r2,r2,8
   21a54:	10800037 	ldwio	r2,0(r2)
   21a58:	1080030c 	andi	r2,r2,12
   21a5c:	1005d0ba 	srai	r2,r2,2
   21a60:	1007883a 	mov	r3,r2
   21a64:	e0bfff17 	ldw	r2,-4(fp)
   21a68:	10c00015 	stw	r3,0(r2)
}
   21a6c:	0001883a 	nop
   21a70:	e037883a 	mov	sp,fp
   21a74:	df000017 	ldw	fp,0(sp)
   21a78:	dec00104 	addi	sp,sp,4
   21a7c:	f800283a 	ret

00021a80 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   21a80:	defffd04 	addi	sp,sp,-12
   21a84:	df000215 	stw	fp,8(sp)
   21a88:	df000204 	addi	fp,sp,8
   21a8c:	e13ffe15 	stw	r4,-8(fp)
   21a90:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   21a94:	e0bffe17 	ldw	r2,-8(fp)
   21a98:	10800317 	ldw	r2,12(r2)
   21a9c:	10c00204 	addi	r3,r2,8
   21aa0:	e0bffe17 	ldw	r2,-8(fp)
   21aa4:	10800317 	ldw	r2,12(r2)
   21aa8:	10800204 	addi	r2,r2,8
   21aac:	10800037 	ldwio	r2,0(r2)
   21ab0:	1009883a 	mov	r4,r2
   21ab4:	00bffcc4 	movi	r2,-13
   21ab8:	2088703a 	and	r4,r4,r2
   21abc:	e0bfff17 	ldw	r2,-4(fp)
   21ac0:	1085883a 	add	r2,r2,r2
   21ac4:	1085883a 	add	r2,r2,r2
   21ac8:	1080030c 	andi	r2,r2,12
   21acc:	2084b03a 	or	r2,r4,r2
   21ad0:	18800035 	stwio	r2,0(r3)
}
   21ad4:	0001883a 	nop
   21ad8:	e037883a 	mov	sp,fp
   21adc:	df000017 	ldw	fp,0(sp)
   21ae0:	dec00104 	addi	sp,sp,4
   21ae4:	f800283a 	ret

00021ae8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21ae8:	defffa04 	addi	sp,sp,-24
   21aec:	dfc00515 	stw	ra,20(sp)
   21af0:	df000415 	stw	fp,16(sp)
   21af4:	df000404 	addi	fp,sp,16
   21af8:	e13ffd15 	stw	r4,-12(fp)
   21afc:	e17ffe15 	stw	r5,-8(fp)
   21b00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21b04:	e0bffd17 	ldw	r2,-12(fp)
   21b08:	10800017 	ldw	r2,0(r2)
   21b0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21b10:	e0bffc17 	ldw	r2,-16(fp)
   21b14:	10c00a04 	addi	r3,r2,40
   21b18:	e0bffd17 	ldw	r2,-12(fp)
   21b1c:	10800217 	ldw	r2,8(r2)
   21b20:	100f883a 	mov	r7,r2
   21b24:	e1bfff17 	ldw	r6,-4(fp)
   21b28:	e17ffe17 	ldw	r5,-8(fp)
   21b2c:	1809883a 	mov	r4,r3
   21b30:	00221100 	call	22110 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   21b34:	e037883a 	mov	sp,fp
   21b38:	dfc00117 	ldw	ra,4(sp)
   21b3c:	df000017 	ldw	fp,0(sp)
   21b40:	dec00204 	addi	sp,sp,8
   21b44:	f800283a 	ret

00021b48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21b48:	defffa04 	addi	sp,sp,-24
   21b4c:	dfc00515 	stw	ra,20(sp)
   21b50:	df000415 	stw	fp,16(sp)
   21b54:	df000404 	addi	fp,sp,16
   21b58:	e13ffd15 	stw	r4,-12(fp)
   21b5c:	e17ffe15 	stw	r5,-8(fp)
   21b60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21b64:	e0bffd17 	ldw	r2,-12(fp)
   21b68:	10800017 	ldw	r2,0(r2)
   21b6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   21b70:	e0bffc17 	ldw	r2,-16(fp)
   21b74:	10c00a04 	addi	r3,r2,40
   21b78:	e0bffd17 	ldw	r2,-12(fp)
   21b7c:	10800217 	ldw	r2,8(r2)
   21b80:	100f883a 	mov	r7,r2
   21b84:	e1bfff17 	ldw	r6,-4(fp)
   21b88:	e17ffe17 	ldw	r5,-8(fp)
   21b8c:	1809883a 	mov	r4,r3
   21b90:	002232c0 	call	2232c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   21b94:	e037883a 	mov	sp,fp
   21b98:	dfc00117 	ldw	ra,4(sp)
   21b9c:	df000017 	ldw	fp,0(sp)
   21ba0:	dec00204 	addi	sp,sp,8
   21ba4:	f800283a 	ret

00021ba8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   21ba8:	defffc04 	addi	sp,sp,-16
   21bac:	dfc00315 	stw	ra,12(sp)
   21bb0:	df000215 	stw	fp,8(sp)
   21bb4:	df000204 	addi	fp,sp,8
   21bb8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21bbc:	e0bfff17 	ldw	r2,-4(fp)
   21bc0:	10800017 	ldw	r2,0(r2)
   21bc4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   21bc8:	e0bffe17 	ldw	r2,-8(fp)
   21bcc:	10c00a04 	addi	r3,r2,40
   21bd0:	e0bfff17 	ldw	r2,-4(fp)
   21bd4:	10800217 	ldw	r2,8(r2)
   21bd8:	100b883a 	mov	r5,r2
   21bdc:	1809883a 	mov	r4,r3
   21be0:	0021fb80 	call	21fb8 <altera_avalon_jtag_uart_close>
}
   21be4:	e037883a 	mov	sp,fp
   21be8:	dfc00117 	ldw	ra,4(sp)
   21bec:	df000017 	ldw	fp,0(sp)
   21bf0:	dec00204 	addi	sp,sp,8
   21bf4:	f800283a 	ret

00021bf8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21bf8:	defffa04 	addi	sp,sp,-24
   21bfc:	dfc00515 	stw	ra,20(sp)
   21c00:	df000415 	stw	fp,16(sp)
   21c04:	df000404 	addi	fp,sp,16
   21c08:	e13ffd15 	stw	r4,-12(fp)
   21c0c:	e17ffe15 	stw	r5,-8(fp)
   21c10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   21c14:	e0bffd17 	ldw	r2,-12(fp)
   21c18:	10800017 	ldw	r2,0(r2)
   21c1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21c20:	e0bffc17 	ldw	r2,-16(fp)
   21c24:	10800a04 	addi	r2,r2,40
   21c28:	e1bfff17 	ldw	r6,-4(fp)
   21c2c:	e17ffe17 	ldw	r5,-8(fp)
   21c30:	1009883a 	mov	r4,r2
   21c34:	00220200 	call	22020 <altera_avalon_jtag_uart_ioctl>
}
   21c38:	e037883a 	mov	sp,fp
   21c3c:	dfc00117 	ldw	ra,4(sp)
   21c40:	df000017 	ldw	fp,0(sp)
   21c44:	dec00204 	addi	sp,sp,8
   21c48:	f800283a 	ret

00021c4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21c4c:	defffa04 	addi	sp,sp,-24
   21c50:	dfc00515 	stw	ra,20(sp)
   21c54:	df000415 	stw	fp,16(sp)
   21c58:	df000404 	addi	fp,sp,16
   21c5c:	e13ffd15 	stw	r4,-12(fp)
   21c60:	e17ffe15 	stw	r5,-8(fp)
   21c64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21c68:	e0bffd17 	ldw	r2,-12(fp)
   21c6c:	00c00044 	movi	r3,1
   21c70:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   21c74:	e0bffd17 	ldw	r2,-12(fp)
   21c78:	10800017 	ldw	r2,0(r2)
   21c7c:	10800104 	addi	r2,r2,4
   21c80:	1007883a 	mov	r3,r2
   21c84:	e0bffd17 	ldw	r2,-12(fp)
   21c88:	10800817 	ldw	r2,32(r2)
   21c8c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   21c90:	e0bffe17 	ldw	r2,-8(fp)
   21c94:	e0ffff17 	ldw	r3,-4(fp)
   21c98:	d8000015 	stw	zero,0(sp)
   21c9c:	e1fffd17 	ldw	r7,-12(fp)
   21ca0:	018000b4 	movhi	r6,2
   21ca4:	31874304 	addi	r6,r6,7436
   21ca8:	180b883a 	mov	r5,r3
   21cac:	1009883a 	mov	r4,r2
   21cb0:	0022d340 	call	22d34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   21cb4:	e0bffd17 	ldw	r2,-12(fp)
   21cb8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21cbc:	e0bffd17 	ldw	r2,-12(fp)
   21cc0:	10800204 	addi	r2,r2,8
   21cc4:	d0f24f17 	ldw	r3,-14020(gp)
   21cc8:	e1fffd17 	ldw	r7,-12(fp)
   21ccc:	018000b4 	movhi	r6,2
   21cd0:	3187c604 	addi	r6,r6,7960
   21cd4:	180b883a 	mov	r5,r3
   21cd8:	1009883a 	mov	r4,r2
   21cdc:	00228400 	call	22840 <alt_alarm_start>
   21ce0:	1000040e 	bge	r2,zero,21cf4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21ce4:	e0fffd17 	ldw	r3,-12(fp)
   21ce8:	00a00034 	movhi	r2,32768
   21cec:	10bfffc4 	addi	r2,r2,-1
   21cf0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21cf4:	0001883a 	nop
   21cf8:	e037883a 	mov	sp,fp
   21cfc:	dfc00117 	ldw	ra,4(sp)
   21d00:	df000017 	ldw	fp,0(sp)
   21d04:	dec00204 	addi	sp,sp,8
   21d08:	f800283a 	ret

00021d0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21d0c:	defff804 	addi	sp,sp,-32
   21d10:	df000715 	stw	fp,28(sp)
   21d14:	df000704 	addi	fp,sp,28
   21d18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21d1c:	e0bfff17 	ldw	r2,-4(fp)
   21d20:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   21d24:	e0bffb17 	ldw	r2,-20(fp)
   21d28:	10800017 	ldw	r2,0(r2)
   21d2c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21d30:	e0bffc17 	ldw	r2,-16(fp)
   21d34:	10800104 	addi	r2,r2,4
   21d38:	10800037 	ldwio	r2,0(r2)
   21d3c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21d40:	e0bffd17 	ldw	r2,-12(fp)
   21d44:	1080c00c 	andi	r2,r2,768
   21d48:	10006d26 	beq	r2,zero,21f00 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21d4c:	e0bffd17 	ldw	r2,-12(fp)
   21d50:	1080400c 	andi	r2,r2,256
   21d54:	10003526 	beq	r2,zero,21e2c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21d58:	00800074 	movhi	r2,1
   21d5c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21d60:	e0bffb17 	ldw	r2,-20(fp)
   21d64:	10800a17 	ldw	r2,40(r2)
   21d68:	10800044 	addi	r2,r2,1
   21d6c:	1081ffcc 	andi	r2,r2,2047
   21d70:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   21d74:	e0bffb17 	ldw	r2,-20(fp)
   21d78:	10c00b17 	ldw	r3,44(r2)
   21d7c:	e0bffe17 	ldw	r2,-8(fp)
   21d80:	18801526 	beq	r3,r2,21dd8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21d84:	e0bffc17 	ldw	r2,-16(fp)
   21d88:	10800037 	ldwio	r2,0(r2)
   21d8c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21d90:	e0bff917 	ldw	r2,-28(fp)
   21d94:	10a0000c 	andi	r2,r2,32768
   21d98:	10001126 	beq	r2,zero,21de0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21d9c:	e0bffb17 	ldw	r2,-20(fp)
   21da0:	10800a17 	ldw	r2,40(r2)
   21da4:	e0fff917 	ldw	r3,-28(fp)
   21da8:	1809883a 	mov	r4,r3
   21dac:	e0fffb17 	ldw	r3,-20(fp)
   21db0:	1885883a 	add	r2,r3,r2
   21db4:	10800e04 	addi	r2,r2,56
   21db8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21dbc:	e0bffb17 	ldw	r2,-20(fp)
   21dc0:	10800a17 	ldw	r2,40(r2)
   21dc4:	10800044 	addi	r2,r2,1
   21dc8:	10c1ffcc 	andi	r3,r2,2047
   21dcc:	e0bffb17 	ldw	r2,-20(fp)
   21dd0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   21dd4:	003fe206 	br	21d60 <__alt_data_end+0xfc021d60>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   21dd8:	0001883a 	nop
   21ddc:	00000106 	br	21de4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   21de0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21de4:	e0bff917 	ldw	r2,-28(fp)
   21de8:	10bfffec 	andhi	r2,r2,65535
   21dec:	10000f26 	beq	r2,zero,21e2c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21df0:	e0bffb17 	ldw	r2,-20(fp)
   21df4:	10c00817 	ldw	r3,32(r2)
   21df8:	00bfff84 	movi	r2,-2
   21dfc:	1886703a 	and	r3,r3,r2
   21e00:	e0bffb17 	ldw	r2,-20(fp)
   21e04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21e08:	e0bffc17 	ldw	r2,-16(fp)
   21e0c:	10800104 	addi	r2,r2,4
   21e10:	1007883a 	mov	r3,r2
   21e14:	e0bffb17 	ldw	r2,-20(fp)
   21e18:	10800817 	ldw	r2,32(r2)
   21e1c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21e20:	e0bffc17 	ldw	r2,-16(fp)
   21e24:	10800104 	addi	r2,r2,4
   21e28:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21e2c:	e0bffd17 	ldw	r2,-12(fp)
   21e30:	1080800c 	andi	r2,r2,512
   21e34:	103fbe26 	beq	r2,zero,21d30 <__alt_data_end+0xfc021d30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21e38:	e0bffd17 	ldw	r2,-12(fp)
   21e3c:	1004d43a 	srli	r2,r2,16
   21e40:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21e44:	00001406 	br	21e98 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21e48:	e0bffc17 	ldw	r2,-16(fp)
   21e4c:	e0fffb17 	ldw	r3,-20(fp)
   21e50:	18c00d17 	ldw	r3,52(r3)
   21e54:	e13ffb17 	ldw	r4,-20(fp)
   21e58:	20c7883a 	add	r3,r4,r3
   21e5c:	18c20e04 	addi	r3,r3,2104
   21e60:	18c00003 	ldbu	r3,0(r3)
   21e64:	18c03fcc 	andi	r3,r3,255
   21e68:	18c0201c 	xori	r3,r3,128
   21e6c:	18ffe004 	addi	r3,r3,-128
   21e70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21e74:	e0bffb17 	ldw	r2,-20(fp)
   21e78:	10800d17 	ldw	r2,52(r2)
   21e7c:	10800044 	addi	r2,r2,1
   21e80:	10c1ffcc 	andi	r3,r2,2047
   21e84:	e0bffb17 	ldw	r2,-20(fp)
   21e88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21e8c:	e0bffa17 	ldw	r2,-24(fp)
   21e90:	10bfffc4 	addi	r2,r2,-1
   21e94:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21e98:	e0bffa17 	ldw	r2,-24(fp)
   21e9c:	10000526 	beq	r2,zero,21eb4 <altera_avalon_jtag_uart_irq+0x1a8>
   21ea0:	e0bffb17 	ldw	r2,-20(fp)
   21ea4:	10c00d17 	ldw	r3,52(r2)
   21ea8:	e0bffb17 	ldw	r2,-20(fp)
   21eac:	10800c17 	ldw	r2,48(r2)
   21eb0:	18bfe51e 	bne	r3,r2,21e48 <__alt_data_end+0xfc021e48>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21eb4:	e0bffa17 	ldw	r2,-24(fp)
   21eb8:	103f9d26 	beq	r2,zero,21d30 <__alt_data_end+0xfc021d30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21ebc:	e0bffb17 	ldw	r2,-20(fp)
   21ec0:	10c00817 	ldw	r3,32(r2)
   21ec4:	00bfff44 	movi	r2,-3
   21ec8:	1886703a 	and	r3,r3,r2
   21ecc:	e0bffb17 	ldw	r2,-20(fp)
   21ed0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21ed4:	e0bffb17 	ldw	r2,-20(fp)
   21ed8:	10800017 	ldw	r2,0(r2)
   21edc:	10800104 	addi	r2,r2,4
   21ee0:	1007883a 	mov	r3,r2
   21ee4:	e0bffb17 	ldw	r2,-20(fp)
   21ee8:	10800817 	ldw	r2,32(r2)
   21eec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21ef0:	e0bffc17 	ldw	r2,-16(fp)
   21ef4:	10800104 	addi	r2,r2,4
   21ef8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21efc:	003f8c06 	br	21d30 <__alt_data_end+0xfc021d30>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21f00:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   21f04:	0001883a 	nop
   21f08:	e037883a 	mov	sp,fp
   21f0c:	df000017 	ldw	fp,0(sp)
   21f10:	dec00104 	addi	sp,sp,4
   21f14:	f800283a 	ret

00021f18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21f18:	defff804 	addi	sp,sp,-32
   21f1c:	df000715 	stw	fp,28(sp)
   21f20:	df000704 	addi	fp,sp,28
   21f24:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21f28:	e0bffb17 	ldw	r2,-20(fp)
   21f2c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21f30:	e0bff917 	ldw	r2,-28(fp)
   21f34:	10800017 	ldw	r2,0(r2)
   21f38:	10800104 	addi	r2,r2,4
   21f3c:	10800037 	ldwio	r2,0(r2)
   21f40:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21f44:	e0bffa17 	ldw	r2,-24(fp)
   21f48:	1081000c 	andi	r2,r2,1024
   21f4c:	10000b26 	beq	r2,zero,21f7c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21f50:	e0bff917 	ldw	r2,-28(fp)
   21f54:	10800017 	ldw	r2,0(r2)
   21f58:	10800104 	addi	r2,r2,4
   21f5c:	1007883a 	mov	r3,r2
   21f60:	e0bff917 	ldw	r2,-28(fp)
   21f64:	10800817 	ldw	r2,32(r2)
   21f68:	10810014 	ori	r2,r2,1024
   21f6c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21f70:	e0bff917 	ldw	r2,-28(fp)
   21f74:	10000915 	stw	zero,36(r2)
   21f78:	00000a06 	br	21fa4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21f7c:	e0bff917 	ldw	r2,-28(fp)
   21f80:	10c00917 	ldw	r3,36(r2)
   21f84:	00a00034 	movhi	r2,32768
   21f88:	10bfff04 	addi	r2,r2,-4
   21f8c:	10c00536 	bltu	r2,r3,21fa4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21f90:	e0bff917 	ldw	r2,-28(fp)
   21f94:	10800917 	ldw	r2,36(r2)
   21f98:	10c00044 	addi	r3,r2,1
   21f9c:	e0bff917 	ldw	r2,-28(fp)
   21fa0:	10c00915 	stw	r3,36(r2)
   21fa4:	d0b24f17 	ldw	r2,-14020(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21fa8:	e037883a 	mov	sp,fp
   21fac:	df000017 	ldw	fp,0(sp)
   21fb0:	dec00104 	addi	sp,sp,4
   21fb4:	f800283a 	ret

00021fb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21fb8:	defffd04 	addi	sp,sp,-12
   21fbc:	df000215 	stw	fp,8(sp)
   21fc0:	df000204 	addi	fp,sp,8
   21fc4:	e13ffe15 	stw	r4,-8(fp)
   21fc8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21fcc:	00000506 	br	21fe4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21fd0:	e0bfff17 	ldw	r2,-4(fp)
   21fd4:	1090000c 	andi	r2,r2,16384
   21fd8:	10000226 	beq	r2,zero,21fe4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21fdc:	00bffd44 	movi	r2,-11
   21fe0:	00000b06 	br	22010 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21fe4:	e0bffe17 	ldw	r2,-8(fp)
   21fe8:	10c00d17 	ldw	r3,52(r2)
   21fec:	e0bffe17 	ldw	r2,-8(fp)
   21ff0:	10800c17 	ldw	r2,48(r2)
   21ff4:	18800526 	beq	r3,r2,2200c <altera_avalon_jtag_uart_close+0x54>
   21ff8:	e0bffe17 	ldw	r2,-8(fp)
   21ffc:	10c00917 	ldw	r3,36(r2)
   22000:	e0bffe17 	ldw	r2,-8(fp)
   22004:	10800117 	ldw	r2,4(r2)
   22008:	18bff136 	bltu	r3,r2,21fd0 <__alt_data_end+0xfc021fd0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2200c:	0005883a 	mov	r2,zero
}
   22010:	e037883a 	mov	sp,fp
   22014:	df000017 	ldw	fp,0(sp)
   22018:	dec00104 	addi	sp,sp,4
   2201c:	f800283a 	ret

00022020 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   22020:	defffa04 	addi	sp,sp,-24
   22024:	df000515 	stw	fp,20(sp)
   22028:	df000504 	addi	fp,sp,20
   2202c:	e13ffd15 	stw	r4,-12(fp)
   22030:	e17ffe15 	stw	r5,-8(fp)
   22034:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   22038:	00bff9c4 	movi	r2,-25
   2203c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22040:	e0bffe17 	ldw	r2,-8(fp)
   22044:	10da8060 	cmpeqi	r3,r2,27137
   22048:	1800031e 	bne	r3,zero,22058 <altera_avalon_jtag_uart_ioctl+0x38>
   2204c:	109a80a0 	cmpeqi	r2,r2,27138
   22050:	1000181e 	bne	r2,zero,220b4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   22054:	00002906 	br	220fc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   22058:	e0bffd17 	ldw	r2,-12(fp)
   2205c:	10c00117 	ldw	r3,4(r2)
   22060:	00a00034 	movhi	r2,32768
   22064:	10bfffc4 	addi	r2,r2,-1
   22068:	18802126 	beq	r3,r2,220f0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2206c:	e0bfff17 	ldw	r2,-4(fp)
   22070:	10800017 	ldw	r2,0(r2)
   22074:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   22078:	e0bffc17 	ldw	r2,-16(fp)
   2207c:	10800090 	cmplti	r2,r2,2
   22080:	1000061e 	bne	r2,zero,2209c <altera_avalon_jtag_uart_ioctl+0x7c>
   22084:	e0fffc17 	ldw	r3,-16(fp)
   22088:	00a00034 	movhi	r2,32768
   2208c:	10bfffc4 	addi	r2,r2,-1
   22090:	18800226 	beq	r3,r2,2209c <altera_avalon_jtag_uart_ioctl+0x7c>
   22094:	e0bffc17 	ldw	r2,-16(fp)
   22098:	00000206 	br	220a4 <altera_avalon_jtag_uart_ioctl+0x84>
   2209c:	00a00034 	movhi	r2,32768
   220a0:	10bfff84 	addi	r2,r2,-2
   220a4:	e0fffd17 	ldw	r3,-12(fp)
   220a8:	18800115 	stw	r2,4(r3)
      rc = 0;
   220ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   220b0:	00000f06 	br	220f0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   220b4:	e0bffd17 	ldw	r2,-12(fp)
   220b8:	10c00117 	ldw	r3,4(r2)
   220bc:	00a00034 	movhi	r2,32768
   220c0:	10bfffc4 	addi	r2,r2,-1
   220c4:	18800c26 	beq	r3,r2,220f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   220c8:	e0bffd17 	ldw	r2,-12(fp)
   220cc:	10c00917 	ldw	r3,36(r2)
   220d0:	e0bffd17 	ldw	r2,-12(fp)
   220d4:	10800117 	ldw	r2,4(r2)
   220d8:	1885803a 	cmpltu	r2,r3,r2
   220dc:	10c03fcc 	andi	r3,r2,255
   220e0:	e0bfff17 	ldw	r2,-4(fp)
   220e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   220e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   220ec:	00000206 	br	220f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   220f0:	0001883a 	nop
   220f4:	00000106 	br	220fc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   220f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   220fc:	e0bffb17 	ldw	r2,-20(fp)
}
   22100:	e037883a 	mov	sp,fp
   22104:	df000017 	ldw	fp,0(sp)
   22108:	dec00104 	addi	sp,sp,4
   2210c:	f800283a 	ret

00022110 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22110:	defff304 	addi	sp,sp,-52
   22114:	dfc00c15 	stw	ra,48(sp)
   22118:	df000b15 	stw	fp,44(sp)
   2211c:	df000b04 	addi	fp,sp,44
   22120:	e13ffc15 	stw	r4,-16(fp)
   22124:	e17ffd15 	stw	r5,-12(fp)
   22128:	e1bffe15 	stw	r6,-8(fp)
   2212c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22130:	e0bffd17 	ldw	r2,-12(fp)
   22134:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22138:	00004706 	br	22258 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2213c:	e0bffc17 	ldw	r2,-16(fp)
   22140:	10800a17 	ldw	r2,40(r2)
   22144:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   22148:	e0bffc17 	ldw	r2,-16(fp)
   2214c:	10800b17 	ldw	r2,44(r2)
   22150:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   22154:	e0fff717 	ldw	r3,-36(fp)
   22158:	e0bff817 	ldw	r2,-32(fp)
   2215c:	18800536 	bltu	r3,r2,22174 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   22160:	e0fff717 	ldw	r3,-36(fp)
   22164:	e0bff817 	ldw	r2,-32(fp)
   22168:	1885c83a 	sub	r2,r3,r2
   2216c:	e0bff615 	stw	r2,-40(fp)
   22170:	00000406 	br	22184 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22174:	00c20004 	movi	r3,2048
   22178:	e0bff817 	ldw	r2,-32(fp)
   2217c:	1885c83a 	sub	r2,r3,r2
   22180:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   22184:	e0bff617 	ldw	r2,-40(fp)
   22188:	10001e26 	beq	r2,zero,22204 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2218c:	e0fffe17 	ldw	r3,-8(fp)
   22190:	e0bff617 	ldw	r2,-40(fp)
   22194:	1880022e 	bgeu	r3,r2,221a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   22198:	e0bffe17 	ldw	r2,-8(fp)
   2219c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   221a0:	e0bffc17 	ldw	r2,-16(fp)
   221a4:	10c00e04 	addi	r3,r2,56
   221a8:	e0bff817 	ldw	r2,-32(fp)
   221ac:	1885883a 	add	r2,r3,r2
   221b0:	e1bff617 	ldw	r6,-40(fp)
   221b4:	100b883a 	mov	r5,r2
   221b8:	e13ff517 	ldw	r4,-44(fp)
   221bc:	000ef400 	call	ef40 <memcpy>
      ptr   += n;
   221c0:	e0fff517 	ldw	r3,-44(fp)
   221c4:	e0bff617 	ldw	r2,-40(fp)
   221c8:	1885883a 	add	r2,r3,r2
   221cc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   221d0:	e0fffe17 	ldw	r3,-8(fp)
   221d4:	e0bff617 	ldw	r2,-40(fp)
   221d8:	1885c83a 	sub	r2,r3,r2
   221dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   221e0:	e0fff817 	ldw	r3,-32(fp)
   221e4:	e0bff617 	ldw	r2,-40(fp)
   221e8:	1885883a 	add	r2,r3,r2
   221ec:	10c1ffcc 	andi	r3,r2,2047
   221f0:	e0bffc17 	ldw	r2,-16(fp)
   221f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   221f8:	e0bffe17 	ldw	r2,-8(fp)
   221fc:	00bfcf16 	blt	zero,r2,2213c <__alt_data_end+0xfc02213c>
   22200:	00000106 	br	22208 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   22204:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   22208:	e0fff517 	ldw	r3,-44(fp)
   2220c:	e0bffd17 	ldw	r2,-12(fp)
   22210:	1880141e 	bne	r3,r2,22264 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   22214:	e0bfff17 	ldw	r2,-4(fp)
   22218:	1090000c 	andi	r2,r2,16384
   2221c:	1000131e 	bne	r2,zero,2226c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   22220:	0001883a 	nop
   22224:	e0bffc17 	ldw	r2,-16(fp)
   22228:	10c00a17 	ldw	r3,40(r2)
   2222c:	e0bff717 	ldw	r2,-36(fp)
   22230:	1880051e 	bne	r3,r2,22248 <altera_avalon_jtag_uart_read+0x138>
   22234:	e0bffc17 	ldw	r2,-16(fp)
   22238:	10c00917 	ldw	r3,36(r2)
   2223c:	e0bffc17 	ldw	r2,-16(fp)
   22240:	10800117 	ldw	r2,4(r2)
   22244:	18bff736 	bltu	r3,r2,22224 <__alt_data_end+0xfc022224>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   22248:	e0bffc17 	ldw	r2,-16(fp)
   2224c:	10c00a17 	ldw	r3,40(r2)
   22250:	e0bff717 	ldw	r2,-36(fp)
   22254:	18800726 	beq	r3,r2,22274 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22258:	e0bffe17 	ldw	r2,-8(fp)
   2225c:	00bfb716 	blt	zero,r2,2213c <__alt_data_end+0xfc02213c>
   22260:	00000506 	br	22278 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   22264:	0001883a 	nop
   22268:	00000306 	br	22278 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2226c:	0001883a 	nop
   22270:	00000106 	br	22278 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   22274:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   22278:	e0fff517 	ldw	r3,-44(fp)
   2227c:	e0bffd17 	ldw	r2,-12(fp)
   22280:	18801826 	beq	r3,r2,222e4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22284:	0005303a 	rdctl	r2,status
   22288:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2228c:	e0fffb17 	ldw	r3,-20(fp)
   22290:	00bfff84 	movi	r2,-2
   22294:	1884703a 	and	r2,r3,r2
   22298:	1001703a 	wrctl	status,r2
  
  return context;
   2229c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   222a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   222a4:	e0bffc17 	ldw	r2,-16(fp)
   222a8:	10800817 	ldw	r2,32(r2)
   222ac:	10c00054 	ori	r3,r2,1
   222b0:	e0bffc17 	ldw	r2,-16(fp)
   222b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   222b8:	e0bffc17 	ldw	r2,-16(fp)
   222bc:	10800017 	ldw	r2,0(r2)
   222c0:	10800104 	addi	r2,r2,4
   222c4:	1007883a 	mov	r3,r2
   222c8:	e0bffc17 	ldw	r2,-16(fp)
   222cc:	10800817 	ldw	r2,32(r2)
   222d0:	18800035 	stwio	r2,0(r3)
   222d4:	e0bffa17 	ldw	r2,-24(fp)
   222d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   222dc:	e0bff917 	ldw	r2,-28(fp)
   222e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   222e4:	e0fff517 	ldw	r3,-44(fp)
   222e8:	e0bffd17 	ldw	r2,-12(fp)
   222ec:	18800426 	beq	r3,r2,22300 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   222f0:	e0fff517 	ldw	r3,-44(fp)
   222f4:	e0bffd17 	ldw	r2,-12(fp)
   222f8:	1885c83a 	sub	r2,r3,r2
   222fc:	00000606 	br	22318 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   22300:	e0bfff17 	ldw	r2,-4(fp)
   22304:	1090000c 	andi	r2,r2,16384
   22308:	10000226 	beq	r2,zero,22314 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2230c:	00bffd44 	movi	r2,-11
   22310:	00000106 	br	22318 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   22314:	00bffec4 	movi	r2,-5
}
   22318:	e037883a 	mov	sp,fp
   2231c:	dfc00117 	ldw	ra,4(sp)
   22320:	df000017 	ldw	fp,0(sp)
   22324:	dec00204 	addi	sp,sp,8
   22328:	f800283a 	ret

0002232c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2232c:	defff304 	addi	sp,sp,-52
   22330:	dfc00c15 	stw	ra,48(sp)
   22334:	df000b15 	stw	fp,44(sp)
   22338:	df000b04 	addi	fp,sp,44
   2233c:	e13ffc15 	stw	r4,-16(fp)
   22340:	e17ffd15 	stw	r5,-12(fp)
   22344:	e1bffe15 	stw	r6,-8(fp)
   22348:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2234c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   22350:	e0bffd17 	ldw	r2,-12(fp)
   22354:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   22358:	00003706 	br	22438 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2235c:	e0bffc17 	ldw	r2,-16(fp)
   22360:	10800c17 	ldw	r2,48(r2)
   22364:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   22368:	e0bffc17 	ldw	r2,-16(fp)
   2236c:	10800d17 	ldw	r2,52(r2)
   22370:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   22374:	e0fff917 	ldw	r3,-28(fp)
   22378:	e0bff517 	ldw	r2,-44(fp)
   2237c:	1880062e 	bgeu	r3,r2,22398 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   22380:	e0fff517 	ldw	r3,-44(fp)
   22384:	e0bff917 	ldw	r2,-28(fp)
   22388:	1885c83a 	sub	r2,r3,r2
   2238c:	10bfffc4 	addi	r2,r2,-1
   22390:	e0bff615 	stw	r2,-40(fp)
   22394:	00000b06 	br	223c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   22398:	e0bff517 	ldw	r2,-44(fp)
   2239c:	10000526 	beq	r2,zero,223b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   223a0:	00c20004 	movi	r3,2048
   223a4:	e0bff917 	ldw	r2,-28(fp)
   223a8:	1885c83a 	sub	r2,r3,r2
   223ac:	e0bff615 	stw	r2,-40(fp)
   223b0:	00000406 	br	223c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   223b4:	00c1ffc4 	movi	r3,2047
   223b8:	e0bff917 	ldw	r2,-28(fp)
   223bc:	1885c83a 	sub	r2,r3,r2
   223c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   223c4:	e0bff617 	ldw	r2,-40(fp)
   223c8:	10001e26 	beq	r2,zero,22444 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   223cc:	e0fffe17 	ldw	r3,-8(fp)
   223d0:	e0bff617 	ldw	r2,-40(fp)
   223d4:	1880022e 	bgeu	r3,r2,223e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   223d8:	e0bffe17 	ldw	r2,-8(fp)
   223dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   223e0:	e0bffc17 	ldw	r2,-16(fp)
   223e4:	10c20e04 	addi	r3,r2,2104
   223e8:	e0bff917 	ldw	r2,-28(fp)
   223ec:	1885883a 	add	r2,r3,r2
   223f0:	e1bff617 	ldw	r6,-40(fp)
   223f4:	e17ffd17 	ldw	r5,-12(fp)
   223f8:	1009883a 	mov	r4,r2
   223fc:	000ef400 	call	ef40 <memcpy>
      ptr   += n;
   22400:	e0fffd17 	ldw	r3,-12(fp)
   22404:	e0bff617 	ldw	r2,-40(fp)
   22408:	1885883a 	add	r2,r3,r2
   2240c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   22410:	e0fffe17 	ldw	r3,-8(fp)
   22414:	e0bff617 	ldw	r2,-40(fp)
   22418:	1885c83a 	sub	r2,r3,r2
   2241c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22420:	e0fff917 	ldw	r3,-28(fp)
   22424:	e0bff617 	ldw	r2,-40(fp)
   22428:	1885883a 	add	r2,r3,r2
   2242c:	10c1ffcc 	andi	r3,r2,2047
   22430:	e0bffc17 	ldw	r2,-16(fp)
   22434:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   22438:	e0bffe17 	ldw	r2,-8(fp)
   2243c:	00bfc716 	blt	zero,r2,2235c <__alt_data_end+0xfc02235c>
   22440:	00000106 	br	22448 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   22444:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22448:	0005303a 	rdctl	r2,status
   2244c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22450:	e0fffb17 	ldw	r3,-20(fp)
   22454:	00bfff84 	movi	r2,-2
   22458:	1884703a 	and	r2,r3,r2
   2245c:	1001703a 	wrctl	status,r2
  
  return context;
   22460:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   22464:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22468:	e0bffc17 	ldw	r2,-16(fp)
   2246c:	10800817 	ldw	r2,32(r2)
   22470:	10c00094 	ori	r3,r2,2
   22474:	e0bffc17 	ldw	r2,-16(fp)
   22478:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2247c:	e0bffc17 	ldw	r2,-16(fp)
   22480:	10800017 	ldw	r2,0(r2)
   22484:	10800104 	addi	r2,r2,4
   22488:	1007883a 	mov	r3,r2
   2248c:	e0bffc17 	ldw	r2,-16(fp)
   22490:	10800817 	ldw	r2,32(r2)
   22494:	18800035 	stwio	r2,0(r3)
   22498:	e0bffa17 	ldw	r2,-24(fp)
   2249c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   224a0:	e0bff817 	ldw	r2,-32(fp)
   224a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   224a8:	e0bffe17 	ldw	r2,-8(fp)
   224ac:	0080100e 	bge	zero,r2,224f0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   224b0:	e0bfff17 	ldw	r2,-4(fp)
   224b4:	1090000c 	andi	r2,r2,16384
   224b8:	1000101e 	bne	r2,zero,224fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   224bc:	0001883a 	nop
   224c0:	e0bffc17 	ldw	r2,-16(fp)
   224c4:	10c00d17 	ldw	r3,52(r2)
   224c8:	e0bff517 	ldw	r2,-44(fp)
   224cc:	1880051e 	bne	r3,r2,224e4 <altera_avalon_jtag_uart_write+0x1b8>
   224d0:	e0bffc17 	ldw	r2,-16(fp)
   224d4:	10c00917 	ldw	r3,36(r2)
   224d8:	e0bffc17 	ldw	r2,-16(fp)
   224dc:	10800117 	ldw	r2,4(r2)
   224e0:	18bff736 	bltu	r3,r2,224c0 <__alt_data_end+0xfc0224c0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   224e4:	e0bffc17 	ldw	r2,-16(fp)
   224e8:	10800917 	ldw	r2,36(r2)
   224ec:	1000051e 	bne	r2,zero,22504 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   224f0:	e0bffe17 	ldw	r2,-8(fp)
   224f4:	00bfd016 	blt	zero,r2,22438 <__alt_data_end+0xfc022438>
   224f8:	00000306 	br	22508 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   224fc:	0001883a 	nop
   22500:	00000106 	br	22508 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   22504:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   22508:	e0fffd17 	ldw	r3,-12(fp)
   2250c:	e0bff717 	ldw	r2,-36(fp)
   22510:	18800426 	beq	r3,r2,22524 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   22514:	e0fffd17 	ldw	r3,-12(fp)
   22518:	e0bff717 	ldw	r2,-36(fp)
   2251c:	1885c83a 	sub	r2,r3,r2
   22520:	00000606 	br	2253c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   22524:	e0bfff17 	ldw	r2,-4(fp)
   22528:	1090000c 	andi	r2,r2,16384
   2252c:	10000226 	beq	r2,zero,22538 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   22530:	00bffd44 	movi	r2,-11
   22534:	00000106 	br	2253c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   22538:	00bffec4 	movi	r2,-5
}
   2253c:	e037883a 	mov	sp,fp
   22540:	dfc00117 	ldw	ra,4(sp)
   22544:	df000017 	ldw	fp,0(sp)
   22548:	dec00204 	addi	sp,sp,8
   2254c:	f800283a 	ret

00022550 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   22550:	defff404 	addi	sp,sp,-48
   22554:	df000b15 	stw	fp,44(sp)
   22558:	df000b04 	addi	fp,sp,44
   2255c:	e13ffc15 	stw	r4,-16(fp)
   22560:	e17ffd15 	stw	r5,-12(fp)
   22564:	e1bffe15 	stw	r6,-8(fp)
   22568:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   2256c:	e0ffff17 	ldw	r3,-4(fp)
   22570:	e0bffe17 	ldw	r2,-8(fp)
   22574:	1885883a 	add	r2,r3,r2
   22578:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   2257c:	e0c00217 	ldw	r3,8(fp)
   22580:	e0800117 	ldw	r2,4(fp)
   22584:	1885883a 	add	r2,r3,r2
   22588:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   2258c:	e0800117 	ldw	r2,4(fp)
   22590:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   22594:	e0bffe17 	ldw	r2,-8(fp)
   22598:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   2259c:	00800044 	movi	r2,1
   225a0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   225a4:	e0bffc17 	ldw	r2,-16(fp)
   225a8:	10800504 	addi	r2,r2,20
   225ac:	1009883a 	mov	r4,r2
   225b0:	00c00044 	movi	r3,1
   225b4:	e0bffd17 	ldw	r2,-12(fp)
   225b8:	1884983a 	sll	r2,r3,r2
   225bc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   225c0:	e0800317 	ldw	r2,12(fp)
   225c4:	1080008c 	andi	r2,r2,2
   225c8:	1000051e 	bne	r2,zero,225e0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   225cc:	e0bffc17 	ldw	r2,-16(fp)
   225d0:	10800304 	addi	r2,r2,12
   225d4:	1007883a 	mov	r3,r2
   225d8:	00810004 	movi	r2,1024
   225dc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   225e0:	e0bffc17 	ldw	r2,-16(fp)
   225e4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   225e8:	e0bffc17 	ldw	r2,-16(fp)
   225ec:	10800204 	addi	r2,r2,8
   225f0:	10800037 	ldwio	r2,0(r2)
   225f4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   225f8:	e0bffa17 	ldw	r2,-24(fp)
   225fc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22600:	10000226 	beq	r2,zero,2260c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22604:	e0bff717 	ldw	r2,-36(fp)
   22608:	1000031e 	bne	r2,zero,22618 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   2260c:	e0bffa17 	ldw	r2,-24(fp)
   22610:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22614:	103ff426 	beq	r2,zero,225e8 <__alt_data_end+0xfc0225e8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   22618:	e0bffa17 	ldw	r2,-24(fp)
   2261c:	1080100c 	andi	r2,r2,64
   22620:	10001e26 	beq	r2,zero,2269c <alt_avalon_spi_command+0x14c>
   22624:	e0bff717 	ldw	r2,-36(fp)
   22628:	00801c0e 	bge	zero,r2,2269c <alt_avalon_spi_command+0x14c>
    {
      credits--;
   2262c:	e0bff717 	ldw	r2,-36(fp)
   22630:	10bfffc4 	addi	r2,r2,-1
   22634:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   22638:	e0ffff17 	ldw	r3,-4(fp)
   2263c:	e0bff817 	ldw	r2,-32(fp)
   22640:	18800a2e 	bgeu	r3,r2,2266c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   22644:	e0bffc17 	ldw	r2,-16(fp)
   22648:	10800104 	addi	r2,r2,4
   2264c:	1009883a 	mov	r4,r2
   22650:	e0bfff17 	ldw	r2,-4(fp)
   22654:	10c00044 	addi	r3,r2,1
   22658:	e0ffff15 	stw	r3,-4(fp)
   2265c:	10800003 	ldbu	r2,0(r2)
   22660:	10803fcc 	andi	r2,r2,255
   22664:	20800035 	stwio	r2,0(r4)
   22668:	00000c06 	br	2269c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   2266c:	e0bff517 	ldw	r2,-44(fp)
   22670:	10000826 	beq	r2,zero,22694 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   22674:	e0bff517 	ldw	r2,-44(fp)
   22678:	10bfffc4 	addi	r2,r2,-1
   2267c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   22680:	e0bffc17 	ldw	r2,-16(fp)
   22684:	10800104 	addi	r2,r2,4
   22688:	0007883a 	mov	r3,zero
   2268c:	10c00035 	stwio	r3,0(r2)
   22690:	00000206 	br	2269c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   22694:	00bf0004 	movi	r2,-1024
   22698:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   2269c:	e0bffa17 	ldw	r2,-24(fp)
   226a0:	1080200c 	andi	r2,r2,128
   226a4:	103fd026 	beq	r2,zero,225e8 <__alt_data_end+0xfc0225e8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   226a8:	e0bffc17 	ldw	r2,-16(fp)
   226ac:	10800037 	ldwio	r2,0(r2)
   226b0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   226b4:	e0bff617 	ldw	r2,-40(fp)
   226b8:	10000426 	beq	r2,zero,226cc <alt_avalon_spi_command+0x17c>
        read_ignore--;
   226bc:	e0bff617 	ldw	r2,-40(fp)
   226c0:	10bfffc4 	addi	r2,r2,-1
   226c4:	e0bff615 	stw	r2,-40(fp)
   226c8:	00000506 	br	226e0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   226cc:	e0800217 	ldw	r2,8(fp)
   226d0:	10c00044 	addi	r3,r2,1
   226d4:	e0c00215 	stw	r3,8(fp)
   226d8:	e0fffb17 	ldw	r3,-20(fp)
   226dc:	10c00005 	stb	r3,0(r2)
      credits++;
   226e0:	e0bff717 	ldw	r2,-36(fp)
   226e4:	10800044 	addi	r2,r2,1
   226e8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   226ec:	e0bff617 	ldw	r2,-40(fp)
   226f0:	103fbd1e 	bne	r2,zero,225e8 <__alt_data_end+0xfc0225e8>
   226f4:	e0c00217 	ldw	r3,8(fp)
   226f8:	e0bff917 	ldw	r2,-28(fp)
   226fc:	18bfba1e 	bne	r3,r2,225e8 <__alt_data_end+0xfc0225e8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22700:	e0bffc17 	ldw	r2,-16(fp)
   22704:	10800204 	addi	r2,r2,8
   22708:	10800037 	ldwio	r2,0(r2)
   2270c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   22710:	e0bffa17 	ldw	r2,-24(fp)
   22714:	1080080c 	andi	r2,r2,32
   22718:	103ff926 	beq	r2,zero,22700 <__alt_data_end+0xfc022700>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   2271c:	e0800317 	ldw	r2,12(fp)
   22720:	1080004c 	andi	r2,r2,1
   22724:	1000041e 	bne	r2,zero,22738 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   22728:	e0bffc17 	ldw	r2,-16(fp)
   2272c:	10800304 	addi	r2,r2,12
   22730:	0007883a 	mov	r3,zero
   22734:	10c00035 	stwio	r3,0(r2)

  return read_length;
   22738:	e0800117 	ldw	r2,4(fp)
}
   2273c:	e037883a 	mov	sp,fp
   22740:	df000017 	ldw	fp,0(sp)
   22744:	dec00104 	addi	sp,sp,4
   22748:	f800283a 	ret

0002274c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2274c:	defffa04 	addi	sp,sp,-24
   22750:	dfc00515 	stw	ra,20(sp)
   22754:	df000415 	stw	fp,16(sp)
   22758:	df000404 	addi	fp,sp,16
   2275c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22760:	0007883a 	mov	r3,zero
   22764:	e0bfff17 	ldw	r2,-4(fp)
   22768:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2276c:	e0bfff17 	ldw	r2,-4(fp)
   22770:	10800104 	addi	r2,r2,4
   22774:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22778:	0005303a 	rdctl	r2,status
   2277c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22780:	e0fffd17 	ldw	r3,-12(fp)
   22784:	00bfff84 	movi	r2,-2
   22788:	1884703a 	and	r2,r3,r2
   2278c:	1001703a 	wrctl	status,r2
  
  return context;
   22790:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   22794:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   22798:	00236bc0 	call	236bc <alt_tick>
   2279c:	e0bffc17 	ldw	r2,-16(fp)
   227a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   227a4:	e0bffe17 	ldw	r2,-8(fp)
   227a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   227ac:	0001883a 	nop
   227b0:	e037883a 	mov	sp,fp
   227b4:	dfc00117 	ldw	ra,4(sp)
   227b8:	df000017 	ldw	fp,0(sp)
   227bc:	dec00204 	addi	sp,sp,8
   227c0:	f800283a 	ret

000227c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   227c4:	defff804 	addi	sp,sp,-32
   227c8:	dfc00715 	stw	ra,28(sp)
   227cc:	df000615 	stw	fp,24(sp)
   227d0:	df000604 	addi	fp,sp,24
   227d4:	e13ffc15 	stw	r4,-16(fp)
   227d8:	e17ffd15 	stw	r5,-12(fp)
   227dc:	e1bffe15 	stw	r6,-8(fp)
   227e0:	e1ffff15 	stw	r7,-4(fp)
   227e4:	e0bfff17 	ldw	r2,-4(fp)
   227e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   227ec:	d0b24f17 	ldw	r2,-14020(gp)
   227f0:	1000021e 	bne	r2,zero,227fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   227f4:	e0bffb17 	ldw	r2,-20(fp)
   227f8:	d0b24f15 	stw	r2,-14020(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   227fc:	e0bffc17 	ldw	r2,-16(fp)
   22800:	10800104 	addi	r2,r2,4
   22804:	00c001c4 	movi	r3,7
   22808:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2280c:	d8000015 	stw	zero,0(sp)
   22810:	e1fffc17 	ldw	r7,-16(fp)
   22814:	018000b4 	movhi	r6,2
   22818:	3189d304 	addi	r6,r6,10060
   2281c:	e17ffe17 	ldw	r5,-8(fp)
   22820:	e13ffd17 	ldw	r4,-12(fp)
   22824:	0022d340 	call	22d34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   22828:	0001883a 	nop
   2282c:	e037883a 	mov	sp,fp
   22830:	dfc00117 	ldw	ra,4(sp)
   22834:	df000017 	ldw	fp,0(sp)
   22838:	dec00204 	addi	sp,sp,8
   2283c:	f800283a 	ret

00022840 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   22840:	defff504 	addi	sp,sp,-44
   22844:	df000a15 	stw	fp,40(sp)
   22848:	df000a04 	addi	fp,sp,40
   2284c:	e13ffc15 	stw	r4,-16(fp)
   22850:	e17ffd15 	stw	r5,-12(fp)
   22854:	e1bffe15 	stw	r6,-8(fp)
   22858:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2285c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22860:	d0b24f17 	ldw	r2,-14020(gp)
  
  if (alt_ticks_per_second ())
   22864:	10003c26 	beq	r2,zero,22958 <alt_alarm_start+0x118>
  {
    if (alarm)
   22868:	e0bffc17 	ldw	r2,-16(fp)
   2286c:	10003826 	beq	r2,zero,22950 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   22870:	e0bffc17 	ldw	r2,-16(fp)
   22874:	e0fffe17 	ldw	r3,-8(fp)
   22878:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2287c:	e0bffc17 	ldw	r2,-16(fp)
   22880:	e0ffff17 	ldw	r3,-4(fp)
   22884:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22888:	0005303a 	rdctl	r2,status
   2288c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22890:	e0fff917 	ldw	r3,-28(fp)
   22894:	00bfff84 	movi	r2,-2
   22898:	1884703a 	and	r2,r3,r2
   2289c:	1001703a 	wrctl	status,r2
  
  return context;
   228a0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   228a4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   228a8:	d0b25017 	ldw	r2,-14016(gp)
      
      current_nticks = alt_nticks();
   228ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   228b0:	e0fffd17 	ldw	r3,-12(fp)
   228b4:	e0bff617 	ldw	r2,-40(fp)
   228b8:	1885883a 	add	r2,r3,r2
   228bc:	10c00044 	addi	r3,r2,1
   228c0:	e0bffc17 	ldw	r2,-16(fp)
   228c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   228c8:	e0bffc17 	ldw	r2,-16(fp)
   228cc:	10c00217 	ldw	r3,8(r2)
   228d0:	e0bff617 	ldw	r2,-40(fp)
   228d4:	1880042e 	bgeu	r3,r2,228e8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   228d8:	e0bffc17 	ldw	r2,-16(fp)
   228dc:	00c00044 	movi	r3,1
   228e0:	10c00405 	stb	r3,16(r2)
   228e4:	00000206 	br	228f0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   228e8:	e0bffc17 	ldw	r2,-16(fp)
   228ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   228f0:	e0bffc17 	ldw	r2,-16(fp)
   228f4:	d0e5c004 	addi	r3,gp,-26880
   228f8:	e0fffa15 	stw	r3,-24(fp)
   228fc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22900:	e0bffb17 	ldw	r2,-20(fp)
   22904:	e0fffa17 	ldw	r3,-24(fp)
   22908:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2290c:	e0bffa17 	ldw	r2,-24(fp)
   22910:	10c00017 	ldw	r3,0(r2)
   22914:	e0bffb17 	ldw	r2,-20(fp)
   22918:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2291c:	e0bffa17 	ldw	r2,-24(fp)
   22920:	10800017 	ldw	r2,0(r2)
   22924:	e0fffb17 	ldw	r3,-20(fp)
   22928:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2292c:	e0bffa17 	ldw	r2,-24(fp)
   22930:	e0fffb17 	ldw	r3,-20(fp)
   22934:	10c00015 	stw	r3,0(r2)
   22938:	e0bff817 	ldw	r2,-32(fp)
   2293c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22940:	e0bff717 	ldw	r2,-36(fp)
   22944:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   22948:	0005883a 	mov	r2,zero
   2294c:	00000306 	br	2295c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   22950:	00bffa84 	movi	r2,-22
   22954:	00000106 	br	2295c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   22958:	00bfde84 	movi	r2,-134
  }
}
   2295c:	e037883a 	mov	sp,fp
   22960:	df000017 	ldw	fp,0(sp)
   22964:	dec00104 	addi	sp,sp,4
   22968:	f800283a 	ret

0002296c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2296c:	defffa04 	addi	sp,sp,-24
   22970:	dfc00515 	stw	ra,20(sp)
   22974:	df000415 	stw	fp,16(sp)
   22978:	df000404 	addi	fp,sp,16
   2297c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   22980:	00800244 	movi	r2,9
   22984:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   22988:	014003f4 	movhi	r5,15
   2298c:	29509004 	addi	r5,r5,16960
   22990:	e13ffd17 	ldw	r4,-12(fp)
   22994:	000d18c0 	call	d18c <__mulsi3>
   22998:	100b883a 	mov	r5,r2
   2299c:	01017db4 	movhi	r4,1526
   229a0:	21384004 	addi	r4,r4,-7936
   229a4:	000d0d00 	call	d0d0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   229a8:	100b883a 	mov	r5,r2
   229ac:	01200034 	movhi	r4,32768
   229b0:	213fffc4 	addi	r4,r4,-1
   229b4:	000d0d00 	call	d0d0 <__udivsi3>
   229b8:	100b883a 	mov	r5,r2
   229bc:	e13fff17 	ldw	r4,-4(fp)
   229c0:	000d0d00 	call	d0d0 <__udivsi3>
   229c4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   229c8:	e0bffe17 	ldw	r2,-8(fp)
   229cc:	10002a26 	beq	r2,zero,22a78 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   229d0:	e03ffc15 	stw	zero,-16(fp)
   229d4:	00001706 	br	22a34 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   229d8:	00a00034 	movhi	r2,32768
   229dc:	10bfffc4 	addi	r2,r2,-1
   229e0:	10bfffc4 	addi	r2,r2,-1
   229e4:	103ffe1e 	bne	r2,zero,229e0 <__alt_data_end+0xfc0229e0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   229e8:	014003f4 	movhi	r5,15
   229ec:	29509004 	addi	r5,r5,16960
   229f0:	e13ffd17 	ldw	r4,-12(fp)
   229f4:	000d18c0 	call	d18c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   229f8:	100b883a 	mov	r5,r2
   229fc:	01017db4 	movhi	r4,1526
   22a00:	21384004 	addi	r4,r4,-7936
   22a04:	000d0d00 	call	d0d0 <__udivsi3>
   22a08:	100b883a 	mov	r5,r2
   22a0c:	01200034 	movhi	r4,32768
   22a10:	213fffc4 	addi	r4,r4,-1
   22a14:	000d0d00 	call	d0d0 <__udivsi3>
   22a18:	1007883a 	mov	r3,r2
   22a1c:	e0bfff17 	ldw	r2,-4(fp)
   22a20:	10c5c83a 	sub	r2,r2,r3
   22a24:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   22a28:	e0bffc17 	ldw	r2,-16(fp)
   22a2c:	10800044 	addi	r2,r2,1
   22a30:	e0bffc15 	stw	r2,-16(fp)
   22a34:	e0fffc17 	ldw	r3,-16(fp)
   22a38:	e0bffe17 	ldw	r2,-8(fp)
   22a3c:	18bfe616 	blt	r3,r2,229d8 <__alt_data_end+0xfc0229d8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22a40:	014003f4 	movhi	r5,15
   22a44:	29509004 	addi	r5,r5,16960
   22a48:	e13ffd17 	ldw	r4,-12(fp)
   22a4c:	000d18c0 	call	d18c <__mulsi3>
   22a50:	100b883a 	mov	r5,r2
   22a54:	01017db4 	movhi	r4,1526
   22a58:	21384004 	addi	r4,r4,-7936
   22a5c:	000d0d00 	call	d0d0 <__udivsi3>
   22a60:	e17fff17 	ldw	r5,-4(fp)
   22a64:	1009883a 	mov	r4,r2
   22a68:	000d18c0 	call	d18c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   22a6c:	10bfffc4 	addi	r2,r2,-1
   22a70:	103ffe1e 	bne	r2,zero,22a6c <__alt_data_end+0xfc022a6c>
   22a74:	00000d06 	br	22aac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22a78:	014003f4 	movhi	r5,15
   22a7c:	29509004 	addi	r5,r5,16960
   22a80:	e13ffd17 	ldw	r4,-12(fp)
   22a84:	000d18c0 	call	d18c <__mulsi3>
   22a88:	100b883a 	mov	r5,r2
   22a8c:	01017db4 	movhi	r4,1526
   22a90:	21384004 	addi	r4,r4,-7936
   22a94:	000d0d00 	call	d0d0 <__udivsi3>
   22a98:	e17fff17 	ldw	r5,-4(fp)
   22a9c:	1009883a 	mov	r4,r2
   22aa0:	000d18c0 	call	d18c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   22aa4:	10bfffc4 	addi	r2,r2,-1
   22aa8:	00bffe16 	blt	zero,r2,22aa4 <__alt_data_end+0xfc022aa4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   22aac:	0005883a 	mov	r2,zero
}
   22ab0:	e037883a 	mov	sp,fp
   22ab4:	dfc00117 	ldw	ra,4(sp)
   22ab8:	df000017 	ldw	fp,0(sp)
   22abc:	dec00204 	addi	sp,sp,8
   22ac0:	f800283a 	ret

00022ac4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   22ac4:	deffff04 	addi	sp,sp,-4
   22ac8:	df000015 	stw	fp,0(sp)
   22acc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22ad0:	0001883a 	nop
   22ad4:	e037883a 	mov	sp,fp
   22ad8:	df000017 	ldw	fp,0(sp)
   22adc:	dec00104 	addi	sp,sp,4
   22ae0:	f800283a 	ret

00022ae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22ae4:	defffe04 	addi	sp,sp,-8
   22ae8:	dfc00115 	stw	ra,4(sp)
   22aec:	df000015 	stw	fp,0(sp)
   22af0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22af4:	d0a5bb17 	ldw	r2,-26900(gp)
   22af8:	10000326 	beq	r2,zero,22b08 <alt_get_errno+0x24>
   22afc:	d0a5bb17 	ldw	r2,-26900(gp)
   22b00:	103ee83a 	callr	r2
   22b04:	00000106 	br	22b0c <alt_get_errno+0x28>
   22b08:	d0b24704 	addi	r2,gp,-14052
}
   22b0c:	e037883a 	mov	sp,fp
   22b10:	dfc00117 	ldw	ra,4(sp)
   22b14:	df000017 	ldw	fp,0(sp)
   22b18:	dec00204 	addi	sp,sp,8
   22b1c:	f800283a 	ret

00022b20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22b20:	defffa04 	addi	sp,sp,-24
   22b24:	dfc00515 	stw	ra,20(sp)
   22b28:	df000415 	stw	fp,16(sp)
   22b2c:	df000404 	addi	fp,sp,16
   22b30:	e13ffe15 	stw	r4,-8(fp)
   22b34:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22b38:	e0bffe17 	ldw	r2,-8(fp)
   22b3c:	10000326 	beq	r2,zero,22b4c <alt_dev_llist_insert+0x2c>
   22b40:	e0bffe17 	ldw	r2,-8(fp)
   22b44:	10800217 	ldw	r2,8(r2)
   22b48:	1000061e 	bne	r2,zero,22b64 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22b4c:	0022ae40 	call	22ae4 <alt_get_errno>
   22b50:	1007883a 	mov	r3,r2
   22b54:	00800584 	movi	r2,22
   22b58:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22b5c:	00bffa84 	movi	r2,-22
   22b60:	00001306 	br	22bb0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22b64:	e0bffe17 	ldw	r2,-8(fp)
   22b68:	e0ffff17 	ldw	r3,-4(fp)
   22b6c:	e0fffc15 	stw	r3,-16(fp)
   22b70:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22b74:	e0bffd17 	ldw	r2,-12(fp)
   22b78:	e0fffc17 	ldw	r3,-16(fp)
   22b7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22b80:	e0bffc17 	ldw	r2,-16(fp)
   22b84:	10c00017 	ldw	r3,0(r2)
   22b88:	e0bffd17 	ldw	r2,-12(fp)
   22b8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22b90:	e0bffc17 	ldw	r2,-16(fp)
   22b94:	10800017 	ldw	r2,0(r2)
   22b98:	e0fffd17 	ldw	r3,-12(fp)
   22b9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22ba0:	e0bffc17 	ldw	r2,-16(fp)
   22ba4:	e0fffd17 	ldw	r3,-12(fp)
   22ba8:	10c00015 	stw	r3,0(r2)

  return 0;  
   22bac:	0005883a 	mov	r2,zero
}
   22bb0:	e037883a 	mov	sp,fp
   22bb4:	dfc00117 	ldw	ra,4(sp)
   22bb8:	df000017 	ldw	fp,0(sp)
   22bbc:	dec00204 	addi	sp,sp,8
   22bc0:	f800283a 	ret

00022bc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   22bc4:	defffd04 	addi	sp,sp,-12
   22bc8:	dfc00215 	stw	ra,8(sp)
   22bcc:	df000115 	stw	fp,4(sp)
   22bd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22bd4:	008000b4 	movhi	r2,2
   22bd8:	108f7b04 	addi	r2,r2,15852
   22bdc:	e0bfff15 	stw	r2,-4(fp)
   22be0:	00000606 	br	22bfc <_do_ctors+0x38>
        (*ctor) (); 
   22be4:	e0bfff17 	ldw	r2,-4(fp)
   22be8:	10800017 	ldw	r2,0(r2)
   22bec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22bf0:	e0bfff17 	ldw	r2,-4(fp)
   22bf4:	10bfff04 	addi	r2,r2,-4
   22bf8:	e0bfff15 	stw	r2,-4(fp)
   22bfc:	e0ffff17 	ldw	r3,-4(fp)
   22c00:	008000b4 	movhi	r2,2
   22c04:	108f7a04 	addi	r2,r2,15848
   22c08:	18bff62e 	bgeu	r3,r2,22be4 <__alt_data_end+0xfc022be4>
        (*ctor) (); 
}
   22c0c:	0001883a 	nop
   22c10:	e037883a 	mov	sp,fp
   22c14:	dfc00117 	ldw	ra,4(sp)
   22c18:	df000017 	ldw	fp,0(sp)
   22c1c:	dec00204 	addi	sp,sp,8
   22c20:	f800283a 	ret

00022c24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22c24:	defffd04 	addi	sp,sp,-12
   22c28:	dfc00215 	stw	ra,8(sp)
   22c2c:	df000115 	stw	fp,4(sp)
   22c30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22c34:	008000b4 	movhi	r2,2
   22c38:	108f7b04 	addi	r2,r2,15852
   22c3c:	e0bfff15 	stw	r2,-4(fp)
   22c40:	00000606 	br	22c5c <_do_dtors+0x38>
        (*dtor) (); 
   22c44:	e0bfff17 	ldw	r2,-4(fp)
   22c48:	10800017 	ldw	r2,0(r2)
   22c4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22c50:	e0bfff17 	ldw	r2,-4(fp)
   22c54:	10bfff04 	addi	r2,r2,-4
   22c58:	e0bfff15 	stw	r2,-4(fp)
   22c5c:	e0ffff17 	ldw	r3,-4(fp)
   22c60:	008000b4 	movhi	r2,2
   22c64:	108f7c04 	addi	r2,r2,15856
   22c68:	18bff62e 	bgeu	r3,r2,22c44 <__alt_data_end+0xfc022c44>
        (*dtor) (); 
}
   22c6c:	0001883a 	nop
   22c70:	e037883a 	mov	sp,fp
   22c74:	dfc00117 	ldw	ra,4(sp)
   22c78:	df000017 	ldw	fp,0(sp)
   22c7c:	dec00204 	addi	sp,sp,8
   22c80:	f800283a 	ret

00022c84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22c84:	defffa04 	addi	sp,sp,-24
   22c88:	dfc00515 	stw	ra,20(sp)
   22c8c:	df000415 	stw	fp,16(sp)
   22c90:	df000404 	addi	fp,sp,16
   22c94:	e13ffe15 	stw	r4,-8(fp)
   22c98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   22c9c:	e0bfff17 	ldw	r2,-4(fp)
   22ca0:	10800017 	ldw	r2,0(r2)
   22ca4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   22ca8:	e13ffe17 	ldw	r4,-8(fp)
   22cac:	000f8080 	call	f808 <strlen>
   22cb0:	10800044 	addi	r2,r2,1
   22cb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22cb8:	00000d06 	br	22cf0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   22cbc:	e0bffc17 	ldw	r2,-16(fp)
   22cc0:	10800217 	ldw	r2,8(r2)
   22cc4:	e0fffd17 	ldw	r3,-12(fp)
   22cc8:	180d883a 	mov	r6,r3
   22ccc:	e17ffe17 	ldw	r5,-8(fp)
   22cd0:	1009883a 	mov	r4,r2
   22cd4:	0023a9c0 	call	23a9c <memcmp>
   22cd8:	1000021e 	bne	r2,zero,22ce4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   22cdc:	e0bffc17 	ldw	r2,-16(fp)
   22ce0:	00000706 	br	22d00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22ce4:	e0bffc17 	ldw	r2,-16(fp)
   22ce8:	10800017 	ldw	r2,0(r2)
   22cec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22cf0:	e0fffc17 	ldw	r3,-16(fp)
   22cf4:	e0bfff17 	ldw	r2,-4(fp)
   22cf8:	18bff01e 	bne	r3,r2,22cbc <__alt_data_end+0xfc022cbc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   22cfc:	0005883a 	mov	r2,zero
}
   22d00:	e037883a 	mov	sp,fp
   22d04:	dfc00117 	ldw	ra,4(sp)
   22d08:	df000017 	ldw	fp,0(sp)
   22d0c:	dec00204 	addi	sp,sp,8
   22d10:	f800283a 	ret

00022d14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22d14:	deffff04 	addi	sp,sp,-4
   22d18:	df000015 	stw	fp,0(sp)
   22d1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22d20:	0001883a 	nop
   22d24:	e037883a 	mov	sp,fp
   22d28:	df000017 	ldw	fp,0(sp)
   22d2c:	dec00104 	addi	sp,sp,4
   22d30:	f800283a 	ret

00022d34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22d34:	defff904 	addi	sp,sp,-28
   22d38:	dfc00615 	stw	ra,24(sp)
   22d3c:	df000515 	stw	fp,20(sp)
   22d40:	df000504 	addi	fp,sp,20
   22d44:	e13ffc15 	stw	r4,-16(fp)
   22d48:	e17ffd15 	stw	r5,-12(fp)
   22d4c:	e1bffe15 	stw	r6,-8(fp)
   22d50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22d54:	e0800217 	ldw	r2,8(fp)
   22d58:	d8800015 	stw	r2,0(sp)
   22d5c:	e1ffff17 	ldw	r7,-4(fp)
   22d60:	e1bffe17 	ldw	r6,-8(fp)
   22d64:	e17ffd17 	ldw	r5,-12(fp)
   22d68:	e13ffc17 	ldw	r4,-16(fp)
   22d6c:	0022ee40 	call	22ee4 <alt_iic_isr_register>
}  
   22d70:	e037883a 	mov	sp,fp
   22d74:	dfc00117 	ldw	ra,4(sp)
   22d78:	df000017 	ldw	fp,0(sp)
   22d7c:	dec00204 	addi	sp,sp,8
   22d80:	f800283a 	ret

00022d84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   22d84:	defff904 	addi	sp,sp,-28
   22d88:	df000615 	stw	fp,24(sp)
   22d8c:	df000604 	addi	fp,sp,24
   22d90:	e13ffe15 	stw	r4,-8(fp)
   22d94:	e17fff15 	stw	r5,-4(fp)
   22d98:	e0bfff17 	ldw	r2,-4(fp)
   22d9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22da0:	0005303a 	rdctl	r2,status
   22da4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22da8:	e0fffb17 	ldw	r3,-20(fp)
   22dac:	00bfff84 	movi	r2,-2
   22db0:	1884703a 	and	r2,r3,r2
   22db4:	1001703a 	wrctl	status,r2
  
  return context;
   22db8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22dbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22dc0:	00c00044 	movi	r3,1
   22dc4:	e0bffa17 	ldw	r2,-24(fp)
   22dc8:	1884983a 	sll	r2,r3,r2
   22dcc:	1007883a 	mov	r3,r2
   22dd0:	d0b24e17 	ldw	r2,-14024(gp)
   22dd4:	1884b03a 	or	r2,r3,r2
   22dd8:	d0b24e15 	stw	r2,-14024(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22ddc:	d0b24e17 	ldw	r2,-14024(gp)
   22de0:	100170fa 	wrctl	ienable,r2
   22de4:	e0bffc17 	ldw	r2,-16(fp)
   22de8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22dec:	e0bffd17 	ldw	r2,-12(fp)
   22df0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22df4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22df8:	0001883a 	nop
}
   22dfc:	e037883a 	mov	sp,fp
   22e00:	df000017 	ldw	fp,0(sp)
   22e04:	dec00104 	addi	sp,sp,4
   22e08:	f800283a 	ret

00022e0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22e0c:	defff904 	addi	sp,sp,-28
   22e10:	df000615 	stw	fp,24(sp)
   22e14:	df000604 	addi	fp,sp,24
   22e18:	e13ffe15 	stw	r4,-8(fp)
   22e1c:	e17fff15 	stw	r5,-4(fp)
   22e20:	e0bfff17 	ldw	r2,-4(fp)
   22e24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22e28:	0005303a 	rdctl	r2,status
   22e2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22e30:	e0fffb17 	ldw	r3,-20(fp)
   22e34:	00bfff84 	movi	r2,-2
   22e38:	1884703a 	and	r2,r3,r2
   22e3c:	1001703a 	wrctl	status,r2
  
  return context;
   22e40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22e44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22e48:	00c00044 	movi	r3,1
   22e4c:	e0bffa17 	ldw	r2,-24(fp)
   22e50:	1884983a 	sll	r2,r3,r2
   22e54:	0084303a 	nor	r2,zero,r2
   22e58:	1007883a 	mov	r3,r2
   22e5c:	d0b24e17 	ldw	r2,-14024(gp)
   22e60:	1884703a 	and	r2,r3,r2
   22e64:	d0b24e15 	stw	r2,-14024(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22e68:	d0b24e17 	ldw	r2,-14024(gp)
   22e6c:	100170fa 	wrctl	ienable,r2
   22e70:	e0bffc17 	ldw	r2,-16(fp)
   22e74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22e78:	e0bffd17 	ldw	r2,-12(fp)
   22e7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22e80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22e84:	0001883a 	nop
}
   22e88:	e037883a 	mov	sp,fp
   22e8c:	df000017 	ldw	fp,0(sp)
   22e90:	dec00104 	addi	sp,sp,4
   22e94:	f800283a 	ret

00022e98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   22e98:	defffc04 	addi	sp,sp,-16
   22e9c:	df000315 	stw	fp,12(sp)
   22ea0:	df000304 	addi	fp,sp,12
   22ea4:	e13ffe15 	stw	r4,-8(fp)
   22ea8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   22eac:	000530fa 	rdctl	r2,ienable
   22eb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22eb4:	00c00044 	movi	r3,1
   22eb8:	e0bfff17 	ldw	r2,-4(fp)
   22ebc:	1884983a 	sll	r2,r3,r2
   22ec0:	1007883a 	mov	r3,r2
   22ec4:	e0bffd17 	ldw	r2,-12(fp)
   22ec8:	1884703a 	and	r2,r3,r2
   22ecc:	1004c03a 	cmpne	r2,r2,zero
   22ed0:	10803fcc 	andi	r2,r2,255
}
   22ed4:	e037883a 	mov	sp,fp
   22ed8:	df000017 	ldw	fp,0(sp)
   22edc:	dec00104 	addi	sp,sp,4
   22ee0:	f800283a 	ret

00022ee4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22ee4:	defff504 	addi	sp,sp,-44
   22ee8:	dfc00a15 	stw	ra,40(sp)
   22eec:	df000915 	stw	fp,36(sp)
   22ef0:	df000904 	addi	fp,sp,36
   22ef4:	e13ffc15 	stw	r4,-16(fp)
   22ef8:	e17ffd15 	stw	r5,-12(fp)
   22efc:	e1bffe15 	stw	r6,-8(fp)
   22f00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22f04:	00bffa84 	movi	r2,-22
   22f08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22f0c:	e0bffd17 	ldw	r2,-12(fp)
   22f10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22f14:	e0bff817 	ldw	r2,-32(fp)
   22f18:	10800808 	cmpgei	r2,r2,32
   22f1c:	1000271e 	bne	r2,zero,22fbc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22f20:	0005303a 	rdctl	r2,status
   22f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22f28:	e0fffb17 	ldw	r3,-20(fp)
   22f2c:	00bfff84 	movi	r2,-2
   22f30:	1884703a 	and	r2,r3,r2
   22f34:	1001703a 	wrctl	status,r2
  
  return context;
   22f38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22f3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   22f40:	008000f4 	movhi	r2,3
   22f44:	10854204 	addi	r2,r2,5384
   22f48:	e0fff817 	ldw	r3,-32(fp)
   22f4c:	180690fa 	slli	r3,r3,3
   22f50:	10c5883a 	add	r2,r2,r3
   22f54:	e0fffe17 	ldw	r3,-8(fp)
   22f58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22f5c:	008000f4 	movhi	r2,3
   22f60:	10854204 	addi	r2,r2,5384
   22f64:	e0fff817 	ldw	r3,-32(fp)
   22f68:	180690fa 	slli	r3,r3,3
   22f6c:	10c5883a 	add	r2,r2,r3
   22f70:	10800104 	addi	r2,r2,4
   22f74:	e0ffff17 	ldw	r3,-4(fp)
   22f78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22f7c:	e0bffe17 	ldw	r2,-8(fp)
   22f80:	10000526 	beq	r2,zero,22f98 <alt_iic_isr_register+0xb4>
   22f84:	e0bff817 	ldw	r2,-32(fp)
   22f88:	100b883a 	mov	r5,r2
   22f8c:	e13ffc17 	ldw	r4,-16(fp)
   22f90:	0022d840 	call	22d84 <alt_ic_irq_enable>
   22f94:	00000406 	br	22fa8 <alt_iic_isr_register+0xc4>
   22f98:	e0bff817 	ldw	r2,-32(fp)
   22f9c:	100b883a 	mov	r5,r2
   22fa0:	e13ffc17 	ldw	r4,-16(fp)
   22fa4:	0022e0c0 	call	22e0c <alt_ic_irq_disable>
   22fa8:	e0bff715 	stw	r2,-36(fp)
   22fac:	e0bffa17 	ldw	r2,-24(fp)
   22fb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22fb4:	e0bff917 	ldw	r2,-28(fp)
   22fb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22fbc:	e0bff717 	ldw	r2,-36(fp)
}
   22fc0:	e037883a 	mov	sp,fp
   22fc4:	dfc00117 	ldw	ra,4(sp)
   22fc8:	df000017 	ldw	fp,0(sp)
   22fcc:	dec00204 	addi	sp,sp,8
   22fd0:	f800283a 	ret

00022fd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22fd4:	defff804 	addi	sp,sp,-32
   22fd8:	dfc00715 	stw	ra,28(sp)
   22fdc:	df000615 	stw	fp,24(sp)
   22fe0:	dc000515 	stw	r16,20(sp)
   22fe4:	df000604 	addi	fp,sp,24
   22fe8:	e13ffb15 	stw	r4,-20(fp)
   22fec:	e17ffc15 	stw	r5,-16(fp)
   22ff0:	e1bffd15 	stw	r6,-12(fp)
   22ff4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   22ff8:	e1bffe17 	ldw	r6,-8(fp)
   22ffc:	e17ffd17 	ldw	r5,-12(fp)
   23000:	e13ffc17 	ldw	r4,-16(fp)
   23004:	002325c0 	call	2325c <open>
   23008:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   2300c:	e0bffa17 	ldw	r2,-24(fp)
   23010:	10002216 	blt	r2,zero,2309c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23014:	040000f4 	movhi	r16,3
   23018:	842e1404 	addi	r16,r16,-18352
   2301c:	e0bffa17 	ldw	r2,-24(fp)
   23020:	01400304 	movi	r5,12
   23024:	1009883a 	mov	r4,r2
   23028:	000d18c0 	call	d18c <__mulsi3>
   2302c:	8085883a 	add	r2,r16,r2
   23030:	10c00017 	ldw	r3,0(r2)
   23034:	e0bffb17 	ldw	r2,-20(fp)
   23038:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2303c:	040000f4 	movhi	r16,3
   23040:	842e1404 	addi	r16,r16,-18352
   23044:	e0bffa17 	ldw	r2,-24(fp)
   23048:	01400304 	movi	r5,12
   2304c:	1009883a 	mov	r4,r2
   23050:	000d18c0 	call	d18c <__mulsi3>
   23054:	8085883a 	add	r2,r16,r2
   23058:	10800104 	addi	r2,r2,4
   2305c:	10c00017 	ldw	r3,0(r2)
   23060:	e0bffb17 	ldw	r2,-20(fp)
   23064:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23068:	040000f4 	movhi	r16,3
   2306c:	842e1404 	addi	r16,r16,-18352
   23070:	e0bffa17 	ldw	r2,-24(fp)
   23074:	01400304 	movi	r5,12
   23078:	1009883a 	mov	r4,r2
   2307c:	000d18c0 	call	d18c <__mulsi3>
   23080:	8085883a 	add	r2,r16,r2
   23084:	10800204 	addi	r2,r2,8
   23088:	10c00017 	ldw	r3,0(r2)
   2308c:	e0bffb17 	ldw	r2,-20(fp)
   23090:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23094:	e13ffa17 	ldw	r4,-24(fp)
   23098:	001fa9c0 	call	1fa9c <alt_release_fd>
  }
} 
   2309c:	0001883a 	nop
   230a0:	e6ffff04 	addi	sp,fp,-4
   230a4:	dfc00217 	ldw	ra,8(sp)
   230a8:	df000117 	ldw	fp,4(sp)
   230ac:	dc000017 	ldw	r16,0(sp)
   230b0:	dec00304 	addi	sp,sp,12
   230b4:	f800283a 	ret

000230b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   230b8:	defffb04 	addi	sp,sp,-20
   230bc:	dfc00415 	stw	ra,16(sp)
   230c0:	df000315 	stw	fp,12(sp)
   230c4:	df000304 	addi	fp,sp,12
   230c8:	e13ffd15 	stw	r4,-12(fp)
   230cc:	e17ffe15 	stw	r5,-8(fp)
   230d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   230d4:	01c07fc4 	movi	r7,511
   230d8:	01800044 	movi	r6,1
   230dc:	e17ffd17 	ldw	r5,-12(fp)
   230e0:	010000f4 	movhi	r4,3
   230e4:	212e1704 	addi	r4,r4,-18340
   230e8:	0022fd40 	call	22fd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   230ec:	01c07fc4 	movi	r7,511
   230f0:	000d883a 	mov	r6,zero
   230f4:	e17ffe17 	ldw	r5,-8(fp)
   230f8:	010000f4 	movhi	r4,3
   230fc:	212e1404 	addi	r4,r4,-18352
   23100:	0022fd40 	call	22fd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23104:	01c07fc4 	movi	r7,511
   23108:	01800044 	movi	r6,1
   2310c:	e17fff17 	ldw	r5,-4(fp)
   23110:	010000f4 	movhi	r4,3
   23114:	212e1a04 	addi	r4,r4,-18328
   23118:	0022fd40 	call	22fd4 <alt_open_fd>
}  
   2311c:	0001883a 	nop
   23120:	e037883a 	mov	sp,fp
   23124:	dfc00117 	ldw	ra,4(sp)
   23128:	df000017 	ldw	fp,0(sp)
   2312c:	dec00204 	addi	sp,sp,8
   23130:	f800283a 	ret

00023134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23134:	defffe04 	addi	sp,sp,-8
   23138:	dfc00115 	stw	ra,4(sp)
   2313c:	df000015 	stw	fp,0(sp)
   23140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23144:	d0a5bb17 	ldw	r2,-26900(gp)
   23148:	10000326 	beq	r2,zero,23158 <alt_get_errno+0x24>
   2314c:	d0a5bb17 	ldw	r2,-26900(gp)
   23150:	103ee83a 	callr	r2
   23154:	00000106 	br	2315c <alt_get_errno+0x28>
   23158:	d0b24704 	addi	r2,gp,-14052
}
   2315c:	e037883a 	mov	sp,fp
   23160:	dfc00117 	ldw	ra,4(sp)
   23164:	df000017 	ldw	fp,0(sp)
   23168:	dec00204 	addi	sp,sp,8
   2316c:	f800283a 	ret

00023170 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23170:	defffb04 	addi	sp,sp,-20
   23174:	dfc00415 	stw	ra,16(sp)
   23178:	df000315 	stw	fp,12(sp)
   2317c:	dc000215 	stw	r16,8(sp)
   23180:	df000304 	addi	fp,sp,12
   23184:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23188:	e0bffe17 	ldw	r2,-8(fp)
   2318c:	10800217 	ldw	r2,8(r2)
   23190:	10d00034 	orhi	r3,r2,16384
   23194:	e0bffe17 	ldw	r2,-8(fp)
   23198:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2319c:	e03ffd15 	stw	zero,-12(fp)
   231a0:	00002306 	br	23230 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   231a4:	040000f4 	movhi	r16,3
   231a8:	842e1404 	addi	r16,r16,-18352
   231ac:	e0bffd17 	ldw	r2,-12(fp)
   231b0:	01400304 	movi	r5,12
   231b4:	1009883a 	mov	r4,r2
   231b8:	000d18c0 	call	d18c <__mulsi3>
   231bc:	8085883a 	add	r2,r16,r2
   231c0:	10c00017 	ldw	r3,0(r2)
   231c4:	e0bffe17 	ldw	r2,-8(fp)
   231c8:	10800017 	ldw	r2,0(r2)
   231cc:	1880151e 	bne	r3,r2,23224 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   231d0:	040000f4 	movhi	r16,3
   231d4:	842e1404 	addi	r16,r16,-18352
   231d8:	e0bffd17 	ldw	r2,-12(fp)
   231dc:	01400304 	movi	r5,12
   231e0:	1009883a 	mov	r4,r2
   231e4:	000d18c0 	call	d18c <__mulsi3>
   231e8:	8085883a 	add	r2,r16,r2
   231ec:	10800204 	addi	r2,r2,8
   231f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   231f4:	10000b0e 	bge	r2,zero,23224 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   231f8:	01400304 	movi	r5,12
   231fc:	e13ffd17 	ldw	r4,-12(fp)
   23200:	000d18c0 	call	d18c <__mulsi3>
   23204:	1007883a 	mov	r3,r2
   23208:	008000f4 	movhi	r2,3
   2320c:	10ae1404 	addi	r2,r2,-18352
   23210:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23214:	e0bffe17 	ldw	r2,-8(fp)
   23218:	18800226 	beq	r3,r2,23224 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2321c:	00bffcc4 	movi	r2,-13
   23220:	00000806 	br	23244 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23224:	e0bffd17 	ldw	r2,-12(fp)
   23228:	10800044 	addi	r2,r2,1
   2322c:	e0bffd15 	stw	r2,-12(fp)
   23230:	d0a5ba17 	ldw	r2,-26904(gp)
   23234:	1007883a 	mov	r3,r2
   23238:	e0bffd17 	ldw	r2,-12(fp)
   2323c:	18bfd92e 	bgeu	r3,r2,231a4 <__alt_data_end+0xfc0231a4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   23240:	0005883a 	mov	r2,zero
}
   23244:	e6ffff04 	addi	sp,fp,-4
   23248:	dfc00217 	ldw	ra,8(sp)
   2324c:	df000117 	ldw	fp,4(sp)
   23250:	dc000017 	ldw	r16,0(sp)
   23254:	dec00304 	addi	sp,sp,12
   23258:	f800283a 	ret

0002325c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2325c:	defff604 	addi	sp,sp,-40
   23260:	dfc00915 	stw	ra,36(sp)
   23264:	df000815 	stw	fp,32(sp)
   23268:	df000804 	addi	fp,sp,32
   2326c:	e13ffd15 	stw	r4,-12(fp)
   23270:	e17ffe15 	stw	r5,-8(fp)
   23274:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   23278:	00bfffc4 	movi	r2,-1
   2327c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   23280:	00bffb44 	movi	r2,-19
   23284:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   23288:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2328c:	d165b804 	addi	r5,gp,-26912
   23290:	e13ffd17 	ldw	r4,-12(fp)
   23294:	0022c840 	call	22c84 <alt_find_dev>
   23298:	e0bff815 	stw	r2,-32(fp)
   2329c:	e0bff817 	ldw	r2,-32(fp)
   232a0:	1000051e 	bne	r2,zero,232b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   232a4:	e13ffd17 	ldw	r4,-12(fp)
   232a8:	00237e80 	call	237e8 <alt_find_file>
   232ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   232b0:	00800044 	movi	r2,1
   232b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   232b8:	e0bff817 	ldw	r2,-32(fp)
   232bc:	10002b26 	beq	r2,zero,2336c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   232c0:	e13ff817 	ldw	r4,-32(fp)
   232c4:	00238f00 	call	238f0 <alt_get_fd>
   232c8:	e0bff915 	stw	r2,-28(fp)
   232cc:	e0bff917 	ldw	r2,-28(fp)
   232d0:	1000030e 	bge	r2,zero,232e0 <open+0x84>
    {
      status = index;
   232d4:	e0bff917 	ldw	r2,-28(fp)
   232d8:	e0bffa15 	stw	r2,-24(fp)
   232dc:	00002506 	br	23374 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   232e0:	01400304 	movi	r5,12
   232e4:	e13ff917 	ldw	r4,-28(fp)
   232e8:	000d18c0 	call	d18c <__mulsi3>
   232ec:	1007883a 	mov	r3,r2
   232f0:	008000f4 	movhi	r2,3
   232f4:	10ae1404 	addi	r2,r2,-18352
   232f8:	1885883a 	add	r2,r3,r2
   232fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   23300:	e0fffe17 	ldw	r3,-8(fp)
   23304:	00900034 	movhi	r2,16384
   23308:	10bfffc4 	addi	r2,r2,-1
   2330c:	1886703a 	and	r3,r3,r2
   23310:	e0bffc17 	ldw	r2,-16(fp)
   23314:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   23318:	e0bffb17 	ldw	r2,-20(fp)
   2331c:	1000051e 	bne	r2,zero,23334 <open+0xd8>
   23320:	e13ffc17 	ldw	r4,-16(fp)
   23324:	00231700 	call	23170 <alt_file_locked>
   23328:	e0bffa15 	stw	r2,-24(fp)
   2332c:	e0bffa17 	ldw	r2,-24(fp)
   23330:	10001016 	blt	r2,zero,23374 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   23334:	e0bff817 	ldw	r2,-32(fp)
   23338:	10800317 	ldw	r2,12(r2)
   2333c:	10000826 	beq	r2,zero,23360 <open+0x104>
   23340:	e0bff817 	ldw	r2,-32(fp)
   23344:	10800317 	ldw	r2,12(r2)
   23348:	e1ffff17 	ldw	r7,-4(fp)
   2334c:	e1bffe17 	ldw	r6,-8(fp)
   23350:	e17ffd17 	ldw	r5,-12(fp)
   23354:	e13ffc17 	ldw	r4,-16(fp)
   23358:	103ee83a 	callr	r2
   2335c:	00000106 	br	23364 <open+0x108>
   23360:	0005883a 	mov	r2,zero
   23364:	e0bffa15 	stw	r2,-24(fp)
   23368:	00000206 	br	23374 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2336c:	00bffb44 	movi	r2,-19
   23370:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   23374:	e0bffa17 	ldw	r2,-24(fp)
   23378:	1000090e 	bge	r2,zero,233a0 <open+0x144>
  {
    alt_release_fd (index);  
   2337c:	e13ff917 	ldw	r4,-28(fp)
   23380:	001fa9c0 	call	1fa9c <alt_release_fd>
    ALT_ERRNO = -status;
   23384:	00231340 	call	23134 <alt_get_errno>
   23388:	1007883a 	mov	r3,r2
   2338c:	e0bffa17 	ldw	r2,-24(fp)
   23390:	0085c83a 	sub	r2,zero,r2
   23394:	18800015 	stw	r2,0(r3)
    return -1;
   23398:	00bfffc4 	movi	r2,-1
   2339c:	00000106 	br	233a4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   233a0:	e0bff917 	ldw	r2,-28(fp)
}
   233a4:	e037883a 	mov	sp,fp
   233a8:	dfc00117 	ldw	ra,4(sp)
   233ac:	df000017 	ldw	fp,0(sp)
   233b0:	dec00204 	addi	sp,sp,8
   233b4:	f800283a 	ret

000233b8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   233b8:	defff204 	addi	sp,sp,-56
   233bc:	dfc00a15 	stw	ra,40(sp)
   233c0:	df000915 	stw	fp,36(sp)
   233c4:	df000904 	addi	fp,sp,36
   233c8:	e13fff15 	stw	r4,-4(fp)
   233cc:	e1400215 	stw	r5,8(fp)
   233d0:	e1800315 	stw	r6,12(fp)
   233d4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   233d8:	e0800204 	addi	r2,fp,8
   233dc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   233e0:	e0bfff17 	ldw	r2,-4(fp)
   233e4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   233e8:	00006f06 	br	235a8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   233ec:	e0bff807 	ldb	r2,-32(fp)
   233f0:	10800960 	cmpeqi	r2,r2,37
   233f4:	1000041e 	bne	r2,zero,23408 <alt_printf+0x50>
        {
            alt_putchar(c);
   233f8:	e0bff807 	ldb	r2,-32(fp)
   233fc:	1009883a 	mov	r4,r2
   23400:	00235e40 	call	235e4 <alt_putchar>
   23404:	00006806 	br	235a8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   23408:	e0bff717 	ldw	r2,-36(fp)
   2340c:	10c00044 	addi	r3,r2,1
   23410:	e0fff715 	stw	r3,-36(fp)
   23414:	10800003 	ldbu	r2,0(r2)
   23418:	e0bff805 	stb	r2,-32(fp)
   2341c:	e0bff807 	ldb	r2,-32(fp)
   23420:	10006926 	beq	r2,zero,235c8 <alt_printf+0x210>
            {
                if (c == '%')
   23424:	e0bff807 	ldb	r2,-32(fp)
   23428:	10800958 	cmpnei	r2,r2,37
   2342c:	1000041e 	bne	r2,zero,23440 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   23430:	e0bff807 	ldb	r2,-32(fp)
   23434:	1009883a 	mov	r4,r2
   23438:	00235e40 	call	235e4 <alt_putchar>
   2343c:	00005a06 	br	235a8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   23440:	e0bff807 	ldb	r2,-32(fp)
   23444:	108018d8 	cmpnei	r2,r2,99
   23448:	1000081e 	bne	r2,zero,2346c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   2344c:	e0bffe17 	ldw	r2,-8(fp)
   23450:	10c00104 	addi	r3,r2,4
   23454:	e0fffe15 	stw	r3,-8(fp)
   23458:	10800017 	ldw	r2,0(r2)
   2345c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   23460:	e13ffd17 	ldw	r4,-12(fp)
   23464:	00235e40 	call	235e4 <alt_putchar>
   23468:	00004f06 	br	235a8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   2346c:	e0bff807 	ldb	r2,-32(fp)
   23470:	10801e18 	cmpnei	r2,r2,120
   23474:	1000341e 	bne	r2,zero,23548 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   23478:	e0bffe17 	ldw	r2,-8(fp)
   2347c:	10c00104 	addi	r3,r2,4
   23480:	e0fffe15 	stw	r3,-8(fp)
   23484:	10800017 	ldw	r2,0(r2)
   23488:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   2348c:	e0bffb17 	ldw	r2,-20(fp)
   23490:	1000031e 	bne	r2,zero,234a0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   23494:	01000c04 	movi	r4,48
   23498:	00235e40 	call	235e4 <alt_putchar>
                        continue;
   2349c:	00004206 	br	235a8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   234a0:	00800704 	movi	r2,28
   234a4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   234a8:	00000306 	br	234b8 <alt_printf+0x100>
                        digit_shift -= 4;
   234ac:	e0bff917 	ldw	r2,-28(fp)
   234b0:	10bfff04 	addi	r2,r2,-4
   234b4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   234b8:	00c003c4 	movi	r3,15
   234bc:	e0bff917 	ldw	r2,-28(fp)
   234c0:	1884983a 	sll	r2,r3,r2
   234c4:	1007883a 	mov	r3,r2
   234c8:	e0bffb17 	ldw	r2,-20(fp)
   234cc:	1884703a 	and	r2,r3,r2
   234d0:	103ff626 	beq	r2,zero,234ac <__alt_data_end+0xfc0234ac>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   234d4:	00001906 	br	2353c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   234d8:	00c003c4 	movi	r3,15
   234dc:	e0bff917 	ldw	r2,-28(fp)
   234e0:	1884983a 	sll	r2,r3,r2
   234e4:	1007883a 	mov	r3,r2
   234e8:	e0bffb17 	ldw	r2,-20(fp)
   234ec:	1886703a 	and	r3,r3,r2
   234f0:	e0bff917 	ldw	r2,-28(fp)
   234f4:	1884d83a 	srl	r2,r3,r2
   234f8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   234fc:	e0bffc17 	ldw	r2,-16(fp)
   23500:	108002a8 	cmpgeui	r2,r2,10
   23504:	1000041e 	bne	r2,zero,23518 <alt_printf+0x160>
                            c = '0' + digit;
   23508:	e0bffc17 	ldw	r2,-16(fp)
   2350c:	10800c04 	addi	r2,r2,48
   23510:	e0bff805 	stb	r2,-32(fp)
   23514:	00000306 	br	23524 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   23518:	e0bffc17 	ldw	r2,-16(fp)
   2351c:	108015c4 	addi	r2,r2,87
   23520:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   23524:	e0bff807 	ldb	r2,-32(fp)
   23528:	1009883a 	mov	r4,r2
   2352c:	00235e40 	call	235e4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   23530:	e0bff917 	ldw	r2,-28(fp)
   23534:	10bfff04 	addi	r2,r2,-4
   23538:	e0bff915 	stw	r2,-28(fp)
   2353c:	e0bff917 	ldw	r2,-28(fp)
   23540:	103fe50e 	bge	r2,zero,234d8 <__alt_data_end+0xfc0234d8>
   23544:	00001806 	br	235a8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   23548:	e0bff807 	ldb	r2,-32(fp)
   2354c:	10801cd8 	cmpnei	r2,r2,115
   23550:	1000151e 	bne	r2,zero,235a8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   23554:	e0bffe17 	ldw	r2,-8(fp)
   23558:	10c00104 	addi	r3,r2,4
   2355c:	e0fffe15 	stw	r3,-8(fp)
   23560:	10800017 	ldw	r2,0(r2)
   23564:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   23568:	00000906 	br	23590 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2356c:	e0bffa17 	ldw	r2,-24(fp)
   23570:	10c00044 	addi	r3,r2,1
   23574:	e0fffa15 	stw	r3,-24(fp)
   23578:	10800003 	ldbu	r2,0(r2)
   2357c:	10803fcc 	andi	r2,r2,255
   23580:	1080201c 	xori	r2,r2,128
   23584:	10bfe004 	addi	r2,r2,-128
   23588:	1009883a 	mov	r4,r2
   2358c:	00235e40 	call	235e4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   23590:	e0bffa17 	ldw	r2,-24(fp)
   23594:	10800003 	ldbu	r2,0(r2)
   23598:	10803fcc 	andi	r2,r2,255
   2359c:	1080201c 	xori	r2,r2,128
   235a0:	10bfe004 	addi	r2,r2,-128
   235a4:	103ff11e 	bne	r2,zero,2356c <__alt_data_end+0xfc02356c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   235a8:	e0bff717 	ldw	r2,-36(fp)
   235ac:	10c00044 	addi	r3,r2,1
   235b0:	e0fff715 	stw	r3,-36(fp)
   235b4:	10800003 	ldbu	r2,0(r2)
   235b8:	e0bff805 	stb	r2,-32(fp)
   235bc:	e0bff807 	ldb	r2,-32(fp)
   235c0:	103f8a1e 	bne	r2,zero,233ec <__alt_data_end+0xfc0233ec>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   235c4:	00000106 	br	235cc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   235c8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   235cc:	0001883a 	nop
   235d0:	e037883a 	mov	sp,fp
   235d4:	dfc00117 	ldw	ra,4(sp)
   235d8:	df000017 	ldw	fp,0(sp)
   235dc:	dec00504 	addi	sp,sp,20
   235e0:	f800283a 	ret

000235e4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   235e4:	defffd04 	addi	sp,sp,-12
   235e8:	dfc00215 	stw	ra,8(sp)
   235ec:	df000115 	stw	fp,4(sp)
   235f0:	df000104 	addi	fp,sp,4
   235f4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   235f8:	d0a5b117 	ldw	r2,-26940(gp)
   235fc:	10800217 	ldw	r2,8(r2)
   23600:	100b883a 	mov	r5,r2
   23604:	e13fff17 	ldw	r4,-4(fp)
   23608:	00180280 	call	18028 <putc>
#endif
#endif
}
   2360c:	e037883a 	mov	sp,fp
   23610:	dfc00117 	ldw	ra,4(sp)
   23614:	df000017 	ldw	fp,0(sp)
   23618:	dec00204 	addi	sp,sp,8
   2361c:	f800283a 	ret

00023620 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   23620:	defffa04 	addi	sp,sp,-24
   23624:	df000515 	stw	fp,20(sp)
   23628:	df000504 	addi	fp,sp,20
   2362c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23630:	0005303a 	rdctl	r2,status
   23634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23638:	e0fffc17 	ldw	r3,-16(fp)
   2363c:	00bfff84 	movi	r2,-2
   23640:	1884703a 	and	r2,r3,r2
   23644:	1001703a 	wrctl	status,r2
  
  return context;
   23648:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2364c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   23650:	e0bfff17 	ldw	r2,-4(fp)
   23654:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23658:	e0bffd17 	ldw	r2,-12(fp)
   2365c:	10800017 	ldw	r2,0(r2)
   23660:	e0fffd17 	ldw	r3,-12(fp)
   23664:	18c00117 	ldw	r3,4(r3)
   23668:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2366c:	e0bffd17 	ldw	r2,-12(fp)
   23670:	10800117 	ldw	r2,4(r2)
   23674:	e0fffd17 	ldw	r3,-12(fp)
   23678:	18c00017 	ldw	r3,0(r3)
   2367c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   23680:	e0bffd17 	ldw	r2,-12(fp)
   23684:	e0fffd17 	ldw	r3,-12(fp)
   23688:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2368c:	e0bffd17 	ldw	r2,-12(fp)
   23690:	e0fffd17 	ldw	r3,-12(fp)
   23694:	10c00015 	stw	r3,0(r2)
   23698:	e0bffb17 	ldw	r2,-20(fp)
   2369c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   236a0:	e0bffe17 	ldw	r2,-8(fp)
   236a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   236a8:	0001883a 	nop
   236ac:	e037883a 	mov	sp,fp
   236b0:	df000017 	ldw	fp,0(sp)
   236b4:	dec00104 	addi	sp,sp,4
   236b8:	f800283a 	ret

000236bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   236bc:	defffb04 	addi	sp,sp,-20
   236c0:	dfc00415 	stw	ra,16(sp)
   236c4:	df000315 	stw	fp,12(sp)
   236c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   236cc:	d0a5c017 	ldw	r2,-26880(gp)
   236d0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   236d4:	d0b25017 	ldw	r2,-14016(gp)
   236d8:	10800044 	addi	r2,r2,1
   236dc:	d0b25015 	stw	r2,-14016(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   236e0:	00002e06 	br	2379c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   236e4:	e0bffd17 	ldw	r2,-12(fp)
   236e8:	10800017 	ldw	r2,0(r2)
   236ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   236f0:	e0bffd17 	ldw	r2,-12(fp)
   236f4:	10800403 	ldbu	r2,16(r2)
   236f8:	10803fcc 	andi	r2,r2,255
   236fc:	10000426 	beq	r2,zero,23710 <alt_tick+0x54>
   23700:	d0b25017 	ldw	r2,-14016(gp)
   23704:	1000021e 	bne	r2,zero,23710 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23708:	e0bffd17 	ldw	r2,-12(fp)
   2370c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   23710:	e0bffd17 	ldw	r2,-12(fp)
   23714:	10800217 	ldw	r2,8(r2)
   23718:	d0f25017 	ldw	r3,-14016(gp)
   2371c:	18801d36 	bltu	r3,r2,23794 <alt_tick+0xd8>
   23720:	e0bffd17 	ldw	r2,-12(fp)
   23724:	10800403 	ldbu	r2,16(r2)
   23728:	10803fcc 	andi	r2,r2,255
   2372c:	1000191e 	bne	r2,zero,23794 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   23730:	e0bffd17 	ldw	r2,-12(fp)
   23734:	10800317 	ldw	r2,12(r2)
   23738:	e0fffd17 	ldw	r3,-12(fp)
   2373c:	18c00517 	ldw	r3,20(r3)
   23740:	1809883a 	mov	r4,r3
   23744:	103ee83a 	callr	r2
   23748:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2374c:	e0bfff17 	ldw	r2,-4(fp)
   23750:	1000031e 	bne	r2,zero,23760 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23754:	e13ffd17 	ldw	r4,-12(fp)
   23758:	00236200 	call	23620 <alt_alarm_stop>
   2375c:	00000d06 	br	23794 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23760:	e0bffd17 	ldw	r2,-12(fp)
   23764:	10c00217 	ldw	r3,8(r2)
   23768:	e0bfff17 	ldw	r2,-4(fp)
   2376c:	1887883a 	add	r3,r3,r2
   23770:	e0bffd17 	ldw	r2,-12(fp)
   23774:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23778:	e0bffd17 	ldw	r2,-12(fp)
   2377c:	10c00217 	ldw	r3,8(r2)
   23780:	d0b25017 	ldw	r2,-14016(gp)
   23784:	1880032e 	bgeu	r3,r2,23794 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   23788:	e0bffd17 	ldw	r2,-12(fp)
   2378c:	00c00044 	movi	r3,1
   23790:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   23794:	e0bffe17 	ldw	r2,-8(fp)
   23798:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2379c:	e0fffd17 	ldw	r3,-12(fp)
   237a0:	d0a5c004 	addi	r2,gp,-26880
   237a4:	18bfcf1e 	bne	r3,r2,236e4 <__alt_data_end+0xfc0236e4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   237a8:	0001883a 	nop
}
   237ac:	0001883a 	nop
   237b0:	e037883a 	mov	sp,fp
   237b4:	dfc00117 	ldw	ra,4(sp)
   237b8:	df000017 	ldw	fp,0(sp)
   237bc:	dec00204 	addi	sp,sp,8
   237c0:	f800283a 	ret

000237c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   237c4:	deffff04 	addi	sp,sp,-4
   237c8:	df000015 	stw	fp,0(sp)
   237cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   237d0:	000170fa 	wrctl	ienable,zero
}
   237d4:	0001883a 	nop
   237d8:	e037883a 	mov	sp,fp
   237dc:	df000017 	ldw	fp,0(sp)
   237e0:	dec00104 	addi	sp,sp,4
   237e4:	f800283a 	ret

000237e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   237e8:	defffb04 	addi	sp,sp,-20
   237ec:	dfc00415 	stw	ra,16(sp)
   237f0:	df000315 	stw	fp,12(sp)
   237f4:	df000304 	addi	fp,sp,12
   237f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   237fc:	d0a5b617 	ldw	r2,-26920(gp)
   23800:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23804:	00003106 	br	238cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23808:	e0bffd17 	ldw	r2,-12(fp)
   2380c:	10800217 	ldw	r2,8(r2)
   23810:	1009883a 	mov	r4,r2
   23814:	000f8080 	call	f808 <strlen>
   23818:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2381c:	e0bffd17 	ldw	r2,-12(fp)
   23820:	10c00217 	ldw	r3,8(r2)
   23824:	e0bffe17 	ldw	r2,-8(fp)
   23828:	10bfffc4 	addi	r2,r2,-1
   2382c:	1885883a 	add	r2,r3,r2
   23830:	10800003 	ldbu	r2,0(r2)
   23834:	10803fcc 	andi	r2,r2,255
   23838:	1080201c 	xori	r2,r2,128
   2383c:	10bfe004 	addi	r2,r2,-128
   23840:	10800bd8 	cmpnei	r2,r2,47
   23844:	1000031e 	bne	r2,zero,23854 <alt_find_file+0x6c>
    {
      len -= 1;
   23848:	e0bffe17 	ldw	r2,-8(fp)
   2384c:	10bfffc4 	addi	r2,r2,-1
   23850:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23854:	e0bffe17 	ldw	r2,-8(fp)
   23858:	e0ffff17 	ldw	r3,-4(fp)
   2385c:	1885883a 	add	r2,r3,r2
   23860:	10800003 	ldbu	r2,0(r2)
   23864:	10803fcc 	andi	r2,r2,255
   23868:	1080201c 	xori	r2,r2,128
   2386c:	10bfe004 	addi	r2,r2,-128
   23870:	10800be0 	cmpeqi	r2,r2,47
   23874:	1000081e 	bne	r2,zero,23898 <alt_find_file+0xb0>
   23878:	e0bffe17 	ldw	r2,-8(fp)
   2387c:	e0ffff17 	ldw	r3,-4(fp)
   23880:	1885883a 	add	r2,r3,r2
   23884:	10800003 	ldbu	r2,0(r2)
   23888:	10803fcc 	andi	r2,r2,255
   2388c:	1080201c 	xori	r2,r2,128
   23890:	10bfe004 	addi	r2,r2,-128
   23894:	10000a1e 	bne	r2,zero,238c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   23898:	e0bffd17 	ldw	r2,-12(fp)
   2389c:	10800217 	ldw	r2,8(r2)
   238a0:	e0fffe17 	ldw	r3,-8(fp)
   238a4:	180d883a 	mov	r6,r3
   238a8:	e17fff17 	ldw	r5,-4(fp)
   238ac:	1009883a 	mov	r4,r2
   238b0:	0023a9c0 	call	23a9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   238b4:	1000021e 	bne	r2,zero,238c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   238b8:	e0bffd17 	ldw	r2,-12(fp)
   238bc:	00000706 	br	238dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   238c0:	e0bffd17 	ldw	r2,-12(fp)
   238c4:	10800017 	ldw	r2,0(r2)
   238c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   238cc:	e0fffd17 	ldw	r3,-12(fp)
   238d0:	d0a5b604 	addi	r2,gp,-26920
   238d4:	18bfcc1e 	bne	r3,r2,23808 <__alt_data_end+0xfc023808>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   238d8:	0005883a 	mov	r2,zero
}
   238dc:	e037883a 	mov	sp,fp
   238e0:	dfc00117 	ldw	ra,4(sp)
   238e4:	df000017 	ldw	fp,0(sp)
   238e8:	dec00204 	addi	sp,sp,8
   238ec:	f800283a 	ret

000238f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   238f0:	defffa04 	addi	sp,sp,-24
   238f4:	dfc00515 	stw	ra,20(sp)
   238f8:	df000415 	stw	fp,16(sp)
   238fc:	dc000315 	stw	r16,12(sp)
   23900:	df000404 	addi	fp,sp,16
   23904:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   23908:	00bffa04 	movi	r2,-24
   2390c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23910:	e03ffc15 	stw	zero,-16(fp)
   23914:	00001d06 	br	2398c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   23918:	040000f4 	movhi	r16,3
   2391c:	842e1404 	addi	r16,r16,-18352
   23920:	e0bffc17 	ldw	r2,-16(fp)
   23924:	01400304 	movi	r5,12
   23928:	1009883a 	mov	r4,r2
   2392c:	000d18c0 	call	d18c <__mulsi3>
   23930:	8085883a 	add	r2,r16,r2
   23934:	10800017 	ldw	r2,0(r2)
   23938:	1000111e 	bne	r2,zero,23980 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   2393c:	040000f4 	movhi	r16,3
   23940:	842e1404 	addi	r16,r16,-18352
   23944:	e0bffc17 	ldw	r2,-16(fp)
   23948:	01400304 	movi	r5,12
   2394c:	1009883a 	mov	r4,r2
   23950:	000d18c0 	call	d18c <__mulsi3>
   23954:	8085883a 	add	r2,r16,r2
   23958:	e0fffe17 	ldw	r3,-8(fp)
   2395c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   23960:	d0e5ba17 	ldw	r3,-26904(gp)
   23964:	e0bffc17 	ldw	r2,-16(fp)
   23968:	1880020e 	bge	r3,r2,23974 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   2396c:	e0bffc17 	ldw	r2,-16(fp)
   23970:	d0a5ba15 	stw	r2,-26904(gp)
      }
      rc = i;
   23974:	e0bffc17 	ldw	r2,-16(fp)
   23978:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2397c:	00000606 	br	23998 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23980:	e0bffc17 	ldw	r2,-16(fp)
   23984:	10800044 	addi	r2,r2,1
   23988:	e0bffc15 	stw	r2,-16(fp)
   2398c:	e0bffc17 	ldw	r2,-16(fp)
   23990:	10800810 	cmplti	r2,r2,32
   23994:	103fe01e 	bne	r2,zero,23918 <__alt_data_end+0xfc023918>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   23998:	e0bffd17 	ldw	r2,-12(fp)
}
   2399c:	e6ffff04 	addi	sp,fp,-4
   239a0:	dfc00217 	ldw	ra,8(sp)
   239a4:	df000117 	ldw	fp,4(sp)
   239a8:	dc000017 	ldw	r16,0(sp)
   239ac:	dec00304 	addi	sp,sp,12
   239b0:	f800283a 	ret

000239b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   239b4:	defffe04 	addi	sp,sp,-8
   239b8:	df000115 	stw	fp,4(sp)
   239bc:	df000104 	addi	fp,sp,4
   239c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   239c4:	e0bfff17 	ldw	r2,-4(fp)
   239c8:	10bffe84 	addi	r2,r2,-6
   239cc:	10c00428 	cmpgeui	r3,r2,16
   239d0:	18001a1e 	bne	r3,zero,23a3c <alt_exception_cause_generated_bad_addr+0x88>
   239d4:	100690ba 	slli	r3,r2,2
   239d8:	008000b4 	movhi	r2,2
   239dc:	108e7b04 	addi	r2,r2,14828
   239e0:	1885883a 	add	r2,r3,r2
   239e4:	10800017 	ldw	r2,0(r2)
   239e8:	1000683a 	jmp	r2
   239ec:	00023a2c 	andhi	zero,zero,2280
   239f0:	00023a2c 	andhi	zero,zero,2280
   239f4:	00023a3c 	xorhi	zero,zero,2280
   239f8:	00023a3c 	xorhi	zero,zero,2280
   239fc:	00023a3c 	xorhi	zero,zero,2280
   23a00:	00023a2c 	andhi	zero,zero,2280
   23a04:	00023a34 	movhi	zero,2280
   23a08:	00023a3c 	xorhi	zero,zero,2280
   23a0c:	00023a2c 	andhi	zero,zero,2280
   23a10:	00023a2c 	andhi	zero,zero,2280
   23a14:	00023a3c 	xorhi	zero,zero,2280
   23a18:	00023a2c 	andhi	zero,zero,2280
   23a1c:	00023a34 	movhi	zero,2280
   23a20:	00023a3c 	xorhi	zero,zero,2280
   23a24:	00023a3c 	xorhi	zero,zero,2280
   23a28:	00023a2c 	andhi	zero,zero,2280
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23a2c:	00800044 	movi	r2,1
   23a30:	00000306 	br	23a40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23a34:	0005883a 	mov	r2,zero
   23a38:	00000106 	br	23a40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23a3c:	0005883a 	mov	r2,zero
  }
}
   23a40:	e037883a 	mov	sp,fp
   23a44:	df000017 	ldw	fp,0(sp)
   23a48:	dec00104 	addi	sp,sp,4
   23a4c:	f800283a 	ret

00023a50 <atexit>:
   23a50:	200b883a 	mov	r5,r4
   23a54:	000f883a 	mov	r7,zero
   23a58:	000d883a 	mov	r6,zero
   23a5c:	0009883a 	mov	r4,zero
   23a60:	0023b181 	jmpi	23b18 <__register_exitproc>

00023a64 <exit>:
   23a64:	defffe04 	addi	sp,sp,-8
   23a68:	000b883a 	mov	r5,zero
   23a6c:	dc000015 	stw	r16,0(sp)
   23a70:	dfc00115 	stw	ra,4(sp)
   23a74:	2021883a 	mov	r16,r4
   23a78:	0023c300 	call	23c30 <__call_exitprocs>
   23a7c:	008000f4 	movhi	r2,3
   23a80:	10b84a04 	addi	r2,r2,-7896
   23a84:	11000017 	ldw	r4,0(r2)
   23a88:	20800f17 	ldw	r2,60(r4)
   23a8c:	10000126 	beq	r2,zero,23a94 <exit+0x30>
   23a90:	103ee83a 	callr	r2
   23a94:	8009883a 	mov	r4,r16
   23a98:	001f2f80 	call	1f2f8 <_exit>

00023a9c <memcmp>:
   23a9c:	01c000c4 	movi	r7,3
   23aa0:	3980192e 	bgeu	r7,r6,23b08 <memcmp+0x6c>
   23aa4:	2144b03a 	or	r2,r4,r5
   23aa8:	11c4703a 	and	r2,r2,r7
   23aac:	10000f26 	beq	r2,zero,23aec <memcmp+0x50>
   23ab0:	20800003 	ldbu	r2,0(r4)
   23ab4:	28c00003 	ldbu	r3,0(r5)
   23ab8:	10c0151e 	bne	r2,r3,23b10 <memcmp+0x74>
   23abc:	31bfff84 	addi	r6,r6,-2
   23ac0:	01ffffc4 	movi	r7,-1
   23ac4:	00000406 	br	23ad8 <memcmp+0x3c>
   23ac8:	20800003 	ldbu	r2,0(r4)
   23acc:	28c00003 	ldbu	r3,0(r5)
   23ad0:	31bfffc4 	addi	r6,r6,-1
   23ad4:	10c00e1e 	bne	r2,r3,23b10 <memcmp+0x74>
   23ad8:	21000044 	addi	r4,r4,1
   23adc:	29400044 	addi	r5,r5,1
   23ae0:	31fff91e 	bne	r6,r7,23ac8 <__alt_data_end+0xfc023ac8>
   23ae4:	0005883a 	mov	r2,zero
   23ae8:	f800283a 	ret
   23aec:	20c00017 	ldw	r3,0(r4)
   23af0:	28800017 	ldw	r2,0(r5)
   23af4:	18bfee1e 	bne	r3,r2,23ab0 <__alt_data_end+0xfc023ab0>
   23af8:	31bfff04 	addi	r6,r6,-4
   23afc:	21000104 	addi	r4,r4,4
   23b00:	29400104 	addi	r5,r5,4
   23b04:	39bff936 	bltu	r7,r6,23aec <__alt_data_end+0xfc023aec>
   23b08:	303fe91e 	bne	r6,zero,23ab0 <__alt_data_end+0xfc023ab0>
   23b0c:	003ff506 	br	23ae4 <__alt_data_end+0xfc023ae4>
   23b10:	10c5c83a 	sub	r2,r2,r3
   23b14:	f800283a 	ret

00023b18 <__register_exitproc>:
   23b18:	defffa04 	addi	sp,sp,-24
   23b1c:	dc000315 	stw	r16,12(sp)
   23b20:	040000f4 	movhi	r16,3
   23b24:	84384a04 	addi	r16,r16,-7896
   23b28:	80c00017 	ldw	r3,0(r16)
   23b2c:	dc400415 	stw	r17,16(sp)
   23b30:	dfc00515 	stw	ra,20(sp)
   23b34:	18805217 	ldw	r2,328(r3)
   23b38:	2023883a 	mov	r17,r4
   23b3c:	10003726 	beq	r2,zero,23c1c <__register_exitproc+0x104>
   23b40:	10c00117 	ldw	r3,4(r2)
   23b44:	010007c4 	movi	r4,31
   23b48:	20c00e16 	blt	r4,r3,23b84 <__register_exitproc+0x6c>
   23b4c:	1a000044 	addi	r8,r3,1
   23b50:	8800221e 	bne	r17,zero,23bdc <__register_exitproc+0xc4>
   23b54:	18c00084 	addi	r3,r3,2
   23b58:	18c7883a 	add	r3,r3,r3
   23b5c:	18c7883a 	add	r3,r3,r3
   23b60:	12000115 	stw	r8,4(r2)
   23b64:	10c7883a 	add	r3,r2,r3
   23b68:	19400015 	stw	r5,0(r3)
   23b6c:	0005883a 	mov	r2,zero
   23b70:	dfc00517 	ldw	ra,20(sp)
   23b74:	dc400417 	ldw	r17,16(sp)
   23b78:	dc000317 	ldw	r16,12(sp)
   23b7c:	dec00604 	addi	sp,sp,24
   23b80:	f800283a 	ret
   23b84:	00800074 	movhi	r2,1
   23b88:	10b9c304 	addi	r2,r2,-6388
   23b8c:	10002626 	beq	r2,zero,23c28 <__register_exitproc+0x110>
   23b90:	01006404 	movi	r4,400
   23b94:	d9400015 	stw	r5,0(sp)
   23b98:	d9800115 	stw	r6,4(sp)
   23b9c:	d9c00215 	stw	r7,8(sp)
   23ba0:	000e70c0 	call	e70c <malloc>
   23ba4:	d9400017 	ldw	r5,0(sp)
   23ba8:	d9800117 	ldw	r6,4(sp)
   23bac:	d9c00217 	ldw	r7,8(sp)
   23bb0:	10001d26 	beq	r2,zero,23c28 <__register_exitproc+0x110>
   23bb4:	81000017 	ldw	r4,0(r16)
   23bb8:	10000115 	stw	zero,4(r2)
   23bbc:	02000044 	movi	r8,1
   23bc0:	22405217 	ldw	r9,328(r4)
   23bc4:	0007883a 	mov	r3,zero
   23bc8:	12400015 	stw	r9,0(r2)
   23bcc:	20805215 	stw	r2,328(r4)
   23bd0:	10006215 	stw	zero,392(r2)
   23bd4:	10006315 	stw	zero,396(r2)
   23bd8:	883fde26 	beq	r17,zero,23b54 <__alt_data_end+0xfc023b54>
   23bdc:	18c9883a 	add	r4,r3,r3
   23be0:	2109883a 	add	r4,r4,r4
   23be4:	1109883a 	add	r4,r2,r4
   23be8:	21802215 	stw	r6,136(r4)
   23bec:	01800044 	movi	r6,1
   23bf0:	12406217 	ldw	r9,392(r2)
   23bf4:	30cc983a 	sll	r6,r6,r3
   23bf8:	4992b03a 	or	r9,r9,r6
   23bfc:	12406215 	stw	r9,392(r2)
   23c00:	21c04215 	stw	r7,264(r4)
   23c04:	01000084 	movi	r4,2
   23c08:	893fd21e 	bne	r17,r4,23b54 <__alt_data_end+0xfc023b54>
   23c0c:	11006317 	ldw	r4,396(r2)
   23c10:	218cb03a 	or	r6,r4,r6
   23c14:	11806315 	stw	r6,396(r2)
   23c18:	003fce06 	br	23b54 <__alt_data_end+0xfc023b54>
   23c1c:	18805304 	addi	r2,r3,332
   23c20:	18805215 	stw	r2,328(r3)
   23c24:	003fc606 	br	23b40 <__alt_data_end+0xfc023b40>
   23c28:	00bfffc4 	movi	r2,-1
   23c2c:	003fd006 	br	23b70 <__alt_data_end+0xfc023b70>

00023c30 <__call_exitprocs>:
   23c30:	defff504 	addi	sp,sp,-44
   23c34:	df000915 	stw	fp,36(sp)
   23c38:	dd400615 	stw	r21,24(sp)
   23c3c:	dc800315 	stw	r18,12(sp)
   23c40:	dfc00a15 	stw	ra,40(sp)
   23c44:	ddc00815 	stw	r23,32(sp)
   23c48:	dd800715 	stw	r22,28(sp)
   23c4c:	dd000515 	stw	r20,20(sp)
   23c50:	dcc00415 	stw	r19,16(sp)
   23c54:	dc400215 	stw	r17,8(sp)
   23c58:	dc000115 	stw	r16,4(sp)
   23c5c:	d9000015 	stw	r4,0(sp)
   23c60:	2839883a 	mov	fp,r5
   23c64:	04800044 	movi	r18,1
   23c68:	057fffc4 	movi	r21,-1
   23c6c:	008000f4 	movhi	r2,3
   23c70:	10b84a04 	addi	r2,r2,-7896
   23c74:	12000017 	ldw	r8,0(r2)
   23c78:	45005217 	ldw	r20,328(r8)
   23c7c:	44c05204 	addi	r19,r8,328
   23c80:	a0001c26 	beq	r20,zero,23cf4 <__call_exitprocs+0xc4>
   23c84:	a0800117 	ldw	r2,4(r20)
   23c88:	15ffffc4 	addi	r23,r2,-1
   23c8c:	b8000d16 	blt	r23,zero,23cc4 <__call_exitprocs+0x94>
   23c90:	14000044 	addi	r16,r2,1
   23c94:	8421883a 	add	r16,r16,r16
   23c98:	8421883a 	add	r16,r16,r16
   23c9c:	84402004 	addi	r17,r16,128
   23ca0:	a463883a 	add	r17,r20,r17
   23ca4:	a421883a 	add	r16,r20,r16
   23ca8:	e0001e26 	beq	fp,zero,23d24 <__call_exitprocs+0xf4>
   23cac:	80804017 	ldw	r2,256(r16)
   23cb0:	e0801c26 	beq	fp,r2,23d24 <__call_exitprocs+0xf4>
   23cb4:	bdffffc4 	addi	r23,r23,-1
   23cb8:	843fff04 	addi	r16,r16,-4
   23cbc:	8c7fff04 	addi	r17,r17,-4
   23cc0:	bd7ff91e 	bne	r23,r21,23ca8 <__alt_data_end+0xfc023ca8>
   23cc4:	00800074 	movhi	r2,1
   23cc8:	10b9c804 	addi	r2,r2,-6368
   23ccc:	10000926 	beq	r2,zero,23cf4 <__call_exitprocs+0xc4>
   23cd0:	a0800117 	ldw	r2,4(r20)
   23cd4:	1000301e 	bne	r2,zero,23d98 <__call_exitprocs+0x168>
   23cd8:	a0800017 	ldw	r2,0(r20)
   23cdc:	10003226 	beq	r2,zero,23da8 <__call_exitprocs+0x178>
   23ce0:	a009883a 	mov	r4,r20
   23ce4:	98800015 	stw	r2,0(r19)
   23ce8:	000e7200 	call	e720 <free>
   23cec:	9d000017 	ldw	r20,0(r19)
   23cf0:	a03fe41e 	bne	r20,zero,23c84 <__alt_data_end+0xfc023c84>
   23cf4:	dfc00a17 	ldw	ra,40(sp)
   23cf8:	df000917 	ldw	fp,36(sp)
   23cfc:	ddc00817 	ldw	r23,32(sp)
   23d00:	dd800717 	ldw	r22,28(sp)
   23d04:	dd400617 	ldw	r21,24(sp)
   23d08:	dd000517 	ldw	r20,20(sp)
   23d0c:	dcc00417 	ldw	r19,16(sp)
   23d10:	dc800317 	ldw	r18,12(sp)
   23d14:	dc400217 	ldw	r17,8(sp)
   23d18:	dc000117 	ldw	r16,4(sp)
   23d1c:	dec00b04 	addi	sp,sp,44
   23d20:	f800283a 	ret
   23d24:	a0800117 	ldw	r2,4(r20)
   23d28:	80c00017 	ldw	r3,0(r16)
   23d2c:	10bfffc4 	addi	r2,r2,-1
   23d30:	15c01426 	beq	r2,r23,23d84 <__call_exitprocs+0x154>
   23d34:	80000015 	stw	zero,0(r16)
   23d38:	183fde26 	beq	r3,zero,23cb4 <__alt_data_end+0xfc023cb4>
   23d3c:	95c8983a 	sll	r4,r18,r23
   23d40:	a0806217 	ldw	r2,392(r20)
   23d44:	a5800117 	ldw	r22,4(r20)
   23d48:	2084703a 	and	r2,r4,r2
   23d4c:	10000b26 	beq	r2,zero,23d7c <__call_exitprocs+0x14c>
   23d50:	a0806317 	ldw	r2,396(r20)
   23d54:	2088703a 	and	r4,r4,r2
   23d58:	20000c1e 	bne	r4,zero,23d8c <__call_exitprocs+0x15c>
   23d5c:	89400017 	ldw	r5,0(r17)
   23d60:	d9000017 	ldw	r4,0(sp)
   23d64:	183ee83a 	callr	r3
   23d68:	a0800117 	ldw	r2,4(r20)
   23d6c:	15bfbf1e 	bne	r2,r22,23c6c <__alt_data_end+0xfc023c6c>
   23d70:	98800017 	ldw	r2,0(r19)
   23d74:	153fcf26 	beq	r2,r20,23cb4 <__alt_data_end+0xfc023cb4>
   23d78:	003fbc06 	br	23c6c <__alt_data_end+0xfc023c6c>
   23d7c:	183ee83a 	callr	r3
   23d80:	003ff906 	br	23d68 <__alt_data_end+0xfc023d68>
   23d84:	a5c00115 	stw	r23,4(r20)
   23d88:	003feb06 	br	23d38 <__alt_data_end+0xfc023d38>
   23d8c:	89000017 	ldw	r4,0(r17)
   23d90:	183ee83a 	callr	r3
   23d94:	003ff406 	br	23d68 <__alt_data_end+0xfc023d68>
   23d98:	a0800017 	ldw	r2,0(r20)
   23d9c:	a027883a 	mov	r19,r20
   23da0:	1029883a 	mov	r20,r2
   23da4:	003fb606 	br	23c80 <__alt_data_end+0xfc023c80>
   23da8:	0005883a 	mov	r2,zero
   23dac:	003ffb06 	br	23d9c <__alt_data_end+0xfc023d9c>
   23db0:	01110bff 	0x1110bff
   23db4:	01010004 	movi	r4,1024
   23db8:	7f000105 	stb	fp,4(r15)
   23dbc:	007d0000 	call	7d000 <_gp+0x48598>
   23dc0:	00000000 	call	0 <__alt_mem_sdram>
   23dc4:	01883a00 	call	1883a0 <_gp+0x153938>
   23dc8:	010d0bff 	0x10d0bff
   23dcc:	01010002 	0x1010002
	...
   23dd8:	010d0bff 	0x10d0bff
   23ddc:	01010004 	movi	r4,1024
   23de0:	00000100 	call	10 <__alt_mem_sdram+0x10>
   23de4:	00000000 	call	0 <__alt_mem_sdram>
   23de8:	0000a6a0 	cmpeqi	zero,zero,666
   23dec:	0000ce74 	movhi	zero,825
