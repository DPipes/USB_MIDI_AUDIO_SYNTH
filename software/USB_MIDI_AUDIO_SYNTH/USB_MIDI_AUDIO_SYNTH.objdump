
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014fd8 memsz 0x00014fd8 flags r-x
    LOAD off    0x00015ff8 vaddr 0x00014ff8 paddr 0x00016b64 align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x000186d0 vaddr 0x000186d0 paddr 0x000186d0 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014750  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000678  00014980  00014980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  00014ff8  00016b64  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  000186d0  000186d0  000186d0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000189b8  000189b8  00017b64  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00017b64  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001020  00000000  00000000  00017b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027d97  00000000  00000000  00018ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a071  00000000  00000000  0004093f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c917  00000000  00000000  0004a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f90  00000000  00000000  000572c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004d48  00000000  00000000  0005a258  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a90  00000000  00000000  0005efa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00076a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001918  00000000  00000000  00076a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c476  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007c479  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c47e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c47f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c480  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c484  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c488  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0007c48c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0007c497  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0007c4a2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  0007c4ad  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0007c4c1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  0007c4ec  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008a058  00000000  00000000  00081973  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00014980 l    d  .rodata	00000000 .rodata
00014ff8 l    d  .rwdata	00000000 .rwdata
000186d0 l    d  .bss	00000000 .bss
000189b8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SGTL5000.c
00000000 l    df *ABS*	00000000 main.c
00016b0c l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
000186e0 l     O .bss	00000004 usb_delay.2608
000186e4 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014d12 l     O .rodata	00000010 zeroes.4404
000055cc l     F .text	000000bc __sbprintf
00014d22 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000057dc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007334 l     F .text	00000008 __fp_unlock
00007348 l     F .text	0000019c __sinit.part.1
000074e4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015028 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001546c l     O .rwdata	00000020 lc_ctype_charset
0001544c l     O .rwdata	00000020 lc_message_charset
0001548c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00014d54 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a9b8 l     F .text	000000fc __sprint_r.part.0
00014e78 l     O .rodata	00000010 zeroes.4349
0000bff4 l     F .text	000000bc __sbprintf
00014e88 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000fe60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ff74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ffa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001017c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010268 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010444 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016b4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001088c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000109c8 l     F .text	00000034 alt_dev_reg
00015a74 l     O .rwdata	00000038 i2c_0
00015aac l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00010aa8 l     F .text	00000110 optional_irq_callback
00010c08 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000128e4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00012af0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013324 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000136bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013bac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013d0c l     F .text	0000003c alt_get_errno
00013d48 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001871c g     O .bss	00000004 alt_instruction_exception_handler
00009ffc g     F .text	00000074 _mprec_log10
0000a0e8 g     F .text	0000008c __any_on
0000c5a8 g     F .text	00000054 _isatty_r
00014d60 g     O .rodata	00000028 __mprec_tinytens
00010380 g     F .text	0000007c alt_main
00016b10 g     O .rwdata	00000008 ctrl_xfers
00003168 g     F .text	000000c0 _puts_r
000188b8 g     O .bss	00000100 alt_irq
000006e0 g     F .text	000000a8 SGTL5000init
0000c5fc g     F .text	00000060 _lseek_r
000026d4 g     F .text	00000644 USB_Task
00016b64 g       *ABS*	00000000 __flash_rwdata_start
00000304 g     F .text	000001a4 I2Cbytes_wr
0000e838 g     F .text	00000088 .hidden __eqdf2
000189b8 g       *ABS*	00000000 __alt_heap_start
0000312c g     F .text	0000003c printf
0000c814 g     F .text	0000009c _wcrtomb_r
000017f8 g     F .text	00000088 kbdPoll
0000a878 g     F .text	0000005c __sseek
00007694 g     F .text	00000010 __sinit
0000c6bc g     F .text	00000140 __swbuf_r
00008168 g     F .text	0000007c _setlocale_r
000074ec g     F .text	00000078 __sfmoreglue
00011300 g     F .text	000000a8 alt_avalon_i2c_rx_read
00010420 g     F .text	00000024 __malloc_unlock
000007f4 g     F .text	000001f0 GetDriverandReport
00012518 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00011084 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00008e38 g     F .text	0000015c memmove
0000767c g     F .text	00000018 _cleanup
00011d68 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
000090bc g     F .text	000000a8 _Balloc
0000194c g     F .text	00000084 MAXreg_wr
00014ff8 g     O .rwdata	00000030 ClientDriverTable
0000e8c0 g     F .text	000000dc .hidden __gtdf2
000141f8 g     F .text	00000024 altera_nios2_gen2_irq_init
00002d18 g     F .text	0000002c MSDProbe
00000000 g     F .entry	0000000c __reset
000021d4 g     F .text	000000e8 XferCtrlData
00000020 g       *ABS*	00000000 __flash_exceptions_start
00018720 g     O .bss	00000010 hid_ep
0000c54c g     F .text	0000005c _fstat_r
00018700 g     O .bss	00000004 errno
0000026c g     F .text	00000098 I2Creg_wr
0000a7f4 g     F .text	00000008 __seofread
00018708 g     O .bss	00000004 alt_argv
0001eb0c g       *ABS*	00000000 _gp
0001085c g     F .text	00000030 usleep
0001255c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00001b34 g     F .text	00000078 MAXreg_rd
00011214 g     F .text	00000044 alt_avalon_i2c_is_busy
000158f4 g     O .rwdata	00000180 alt_fd_list
00001730 g     F .text	00000040 HID_init
00010fb8 g     F .text	000000cc alt_avalon_i2c_master_config_set
0001385c g     F .text	00000090 alt_find_dev
00008cf0 g     F .text	00000148 memcpy
0000733c g     F .text	0000000c _cleanup_r
0000fc78 g     F .text	000000dc .hidden __floatsidf
00013c90 g     F .text	0000007c alt_io_redirect
0000e99c g     F .text	000000f4 .hidden __ltdf2
00014980 g       *ABS*	00000000 __DTOR_END__
00011ba8 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00003228 g     F .text	00000014 puts
000143e8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a6d8 g     F .text	00000074 __fpclassifyd
00009f58 g     F .text	000000a4 __ratio
0000bfd8 g     F .text	0000001c __vfiprintf_internal
00012ce8 g     F .text	0000021c altera_avalon_jtag_uart_read
000030fc g     F .text	00000030 _printf_r
00003018 g     F .text	00000064 .hidden __udivsi3
000100d0 g     F .text	000000ac isatty
00014db0 g     O .rodata	000000c8 __mprec_tens
000081e4 g     F .text	0000000c __locale_charset
00010e24 g     F .text	00000098 alt_avalon_i2c_enable
000186fc g     O .bss	00000004 __malloc_top_pad
0001244c g     F .text	00000068 alt_avalon_i2c_int_disable
00016b18 g     O .rwdata	00000001 usb_task_state
00016b24 g     O .rwdata	00000004 __mb_cur_max
00008214 g     F .text	0000000c _localeconv_r
000094f0 g     F .text	0000003c __i2b
00007b18 g     F .text	000004c8 __sfvwrite_r
0000a74c g     F .text	00000054 _sbrk_r
0000c65c g     F .text	00000060 _read_r
00001e88 g     F .text	00000094 MAX3421E_init
00000ce0 g     F .text	00000038 setKeycode
00016b44 g     O .rwdata	00000004 alt_max_fd
0000c240 g     F .text	000000f0 _fclose_r
00007304 g     F .text	00000030 fflush
000186f8 g     O .bss	00000004 __malloc_max_sbrked_mem
00011f74 g     F .text	00000210 alt_avalon_i2c_master_receive
0000d5bc g     F .text	000008ac .hidden __adddf3
00009d00 g     F .text	0000010c __b2d
0000cff8 g     F .text	000005c4 .hidden __umoddi3
000102a4 g     F .text	000000dc lseek
000124b4 g     F .text	00000064 alt_avalon_i2c_int_enable
00016b1c g     O .rwdata	00000004 _global_impure_ptr
0000a174 g     F .text	00000564 _realloc_r
000189b8 g       *ABS*	00000000 __bss_end
00013abc g     F .text	000000f0 alt_iic_isr_register
00010754 g     F .text	00000108 alt_tick
0000c9fc g     F .text	000005fc .hidden __udivdi3
00012374 g     F .text	00000058 alt_avalon_i2c_int_status_get
0000c4a8 g     F .text	00000024 _fputwc_r
00014d88 g     O .rodata	00000028 __mprec_bigtens
000092d4 g     F .text	00000104 __s2b
0000fd54 g     F .text	000000a8 .hidden __floatunsidf
00009a40 g     F .text	00000060 __mcmp
000076b4 g     F .text	00000018 __fp_lock_all
00013a70 g     F .text	0000004c alt_ic_irq_enabled
000106b8 g     F .text	0000009c alt_alarm_stop
00010ca4 g     F .text	00000054 alt_avalon_i2c_register_callback
00018718 g     O .bss	00000004 alt_irq_active
00010cf8 g     F .text	000000ec alt_avalon_i2c_init
00002de0 g     F .text	0000002c DummyProbe
000000fc g     F .exceptions	000000d4 alt_irq_handler
000158cc g     O .rwdata	00000028 alt_dev_null
00001770 g     F .text	00000088 mousePoll
00001cdc g     F .text	00000024 Vbus_power
0001369c g     F .text	00000020 alt_dcache_flush_all
000093d8 g     F .text	00000068 __hi0bits
0000fbf8 g     F .text	00000080 .hidden __fixdfsi
00016b64 g       *ABS*	00000000 __ram_rwdata_end
00016b3c g     O .rwdata	00000008 alt_dev_list
000108c8 g     F .text	00000100 write
0001454c g     F .text	000000a0 _putc_r
00011634 g     F .text	0000004c alt_avalon_i2c_check_arblost
00012410 g     F .text	0000003c alt_avalon_i2c_int_clear
00014ff8 g       *ABS*	00000000 __ram_rodata_end
000186e5 g     O .bss	00000001 usb_error
0000ffdc g     F .text	000000b8 fstat
0000e99c g     F .text	000000f4 .hidden __ledf2
00016b58 g     O .rwdata	00000008 alt_avalon_i2c_list
000097b8 g     F .text	00000140 __pow5mult
0000aacc g     F .text	0000150c ___vfiprintf_internal_r
000186f0 g     O .bss	00000004 __nlocale_changed
0000307c g     F .text	00000058 .hidden __umodsi3
000189b8 g       *ABS*	00000000 end
00012824 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00010de4 g     F .text	00000040 alt_avalon_i2c_open
00002330 g     F .text	0000017c XferDispatchPkt
00014980 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000117bc g     F .text	000000e8 alt_avalon_i2c_master_tx
0001339c g     F .text	0000007c alt_avalon_timer_sc_init
0000fdfc g     F .text	00000064 .hidden __clzsi2
00012f04 g     F .text	00000224 altera_avalon_jtag_uart_write
000076a4 g     F .text	00000004 __sfp_lock_acquire
00008c0c g     F .text	000000e4 memchr
000032d4 g     F .text	000022dc ___vfprintf_internal_r
00002054 g     F .text	00000034 MaxGpxHandler
00007808 g     F .text	00000310 _free_r
00013f90 g     F .text	0000022c alt_printf
000081f0 g     F .text	00000010 __locale_mb_cur_max
000147cc g     F .text	00000180 __call_exitprocs
000004a8 g     F .text	000000a0 I2Creg_rd
000186ec g     O .bss	00000004 __mlocale_changed
00010bb8 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00016b28 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00018710 g     O .bss	00000004 _alt_tick_rate
00001bac g     F .text	00000088 MAXbytes_rd
00012184 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
000125a8 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
000098f8 g     F .text	00000148 __lshift
00013128 g     F .text	000001fc alt_avalon_spi_command
00018714 g     O .bss	00000004 _alt_nticks
00010480 g     F .text	00000104 read
00010a34 g     F .text	00000074 alt_sys_init
00018870 g     O .bss	00000048 devtable
000146b4 g     F .text	00000118 __register_exitproc
00001328 g     F .text	00000408 HIDKProbe
00018730 g     O .bss	00000018 msd_ep
000119e0 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0000952c g     F .text	0000028c __multiply
00012b90 g     F .text	00000068 altera_avalon_jtag_uart_close
0000263c g     F .text	00000098 USB_init
000030d4 g     F .text	00000028 .hidden __mulsi3
00018770 g     O .bss	00000100 bigbuf
00014ff8 g       *ABS*	00000000 __ram_rwdata_start
00014980 g       *ABS*	00000000 __ram_rodata_start
00018748 g     O .bss	00000028 __malloc_current_mallinfo
000186dc g     O .bss	00000001 last_usb_task_state
00009e0c g     F .text	0000014c __d2b
000186d4 g     O .bss	00000008 dev0ep
00000a30 g     F .text	00000050 clearLED
000126c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00014324 g     F .text	000000c4 alt_get_fd
00013544 g     F .text	00000158 alt_busy_sleep
00002d44 g     F .text	00000038 MSDEventHandler
0000c110 g     F .text	00000054 _close_r
000144d0 g     F .text	0000007c memcmp
00011258 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00012780 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000189b8 g       *ABS*	00000000 __alt_stack_base
000127d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005688 g     F .text	00000154 __swsetup_r
0000de68 g     F .text	000009d0 .hidden __divdf3
00007564 g     F .text	00000118 __sfp
0000a070 g     F .text	00000078 __copybits
000154c4 g     O .rwdata	00000408 __malloc_av_
000076b0 g     F .text	00000004 __sinit_lock_release
00002da8 g     F .text	00000038 CDCEventHandler
0000ea90 g     F .text	0000086c .hidden __muldf3
00002e0c g     F .text	00000038 DummyEventHandler
0000a7a0 g     F .text	00000054 __sread
0001421c g     F .text	00000108 alt_find_file
000136f8 g     F .text	000000a4 alt_dev_llist_insert
000103fc g     F .text	00000024 __malloc_lock
00010608 g     F .text	000000b0 sbrk
00011680 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
000115e8 g     F .text	0000004c alt_avalon_i2c_check_nack
000072a8 g     F .text	0000005c _fflush_r
0000c164 g     F .text	000000dc _calloc_r
000186d0 g       *ABS*	00000000 __bss_start
00001d00 g     F .text	00000188 MAX_busprobe
000186d0 g     O .bss	00000002 hid_device
00008f94 g     F .text	00000128 memset
00000d18 g     F .text	00000208 main
00001f1c g     F .text	0000006c MAX3421E_Task
000115b4 g     F .text	00000034 alt_avalon_i2c_master_target_set
0001870c g     O .bss	00000004 alt_envp
000186f4 g     O .bss	00000004 __malloc_max_total_mem
00012720 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c7fc g     F .text	00000018 __swbuf
00002e9c g     F .text	00000084 ConvUTF8ToStr
000123cc g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0000a8d4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c330 g     F .text	00000014 fclose
00005a04 g     F .text	00001688 _dtoa_r
00008400 g     F .text	0000080c _malloc_r
0000c970 g     F .text	00000030 __ascii_wctomb
00016b48 g     O .rwdata	00000004 alt_errno
00007fe0 g     F .text	000000c4 _fwalk
000145ec g     F .text	000000c8 putc
00002f20 g     F .text	00000084 .hidden __divsi3
000024ac g     F .text	00000190 XferInTransfer
00000ba0 g     F .text	00000140 printSignedHex1
000076e4 g     F .text	00000124 _malloc_trim_r
00014980 g       *ABS*	00000000 __CTOR_END__
00002e64 g     F .text	00000038 GetDevtable
0000a8dc g     F .text	000000dc strcmp
00014980 g       *ABS*	00000000 __flash_rodata_start
00014980 g       *ABS*	00000000 __DTOR_LIST__
000022bc g     F .text	00000074 XferCtrlND
0000e838 g     F .text	00000088 .hidden __nedf2
00001c34 g     F .text	000000a8 MAX3421E_reset
000109fc g     F .text	00000038 alt_irq_init
00010584 g     F .text	00000084 alt_release_fd
00014e98 g     O .rodata	00000100 .hidden __clz_tab
000186e8 g     O .bss	00000004 _PathLocale
00014484 g     F .text	00000014 atexit
0000c0b0 g     F .text	00000060 _write_r
00008220 g     F .text	00000018 setlocale
00016b20 g     O .rwdata	00000004 _impure_ptr
00018704 g     O .bss	00000004 alt_argc
0000708c g     F .text	0000021c __sflush_r
000137fc g     F .text	00000060 _do_dtors
0000820c g     F .text	00000008 __locale_cjk_lang
0001157c g     F .text	00000038 alt_avalon_i2c_master_target_get
0001148c g     F .text	000000f0 alt_avalon_i2c_send_address
000019d0 g     F .text	00000164 MAXbytes_wr
00000020 g       .exceptions	00000000 alt_irq_entry
00009c9c g     F .text	00000064 __ulp
000076cc g     F .text	00000018 __fp_unlock_all
00016b34 g     O .rwdata	00000008 alt_fs_list
00002d7c g     F .text	0000002c CDCProbe
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008238 g     F .text	0000000c localeconv
000009e4 g     F .text	0000004c setLED
00002e44 g     F .text	00000020 GetUsbTaskState
00012658 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0001390c g     F .text	00000050 alt_ic_isr_register
00010ebc g     F .text	0000004c alt_avalon_i2c_disable
00014a20 g     O .rodata	00000010 devclasses
00016b64 g       *ABS*	00000000 _edata
000018b8 g     F .text	00000038 HIDKEventHandler
000189b8 g       *ABS*	00000000 _end
00001f88 g     F .text	000000cc MaxIntHandler
0000c344 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
00012bf8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010f08 g     F .text	000000b0 alt_avalon_i2c_master_config_get
000018f0 g     F .text	00000034 SPI_init
000139e4 g     F .text	0000008c alt_ic_irq_disable
0000a7fc g     F .text	0000007c __swrite
00000548 g     F .text	00000198 I2Cbytes_rd
00016b2c g     O .rwdata	00000004 __malloc_trim_threshold
00008200 g     F .text	0000000c __locale_msgcharset
00014498 g     F .text	00000038 exit
000080a4 g     F .text	000000c4 _fwalk_reent
00009aa0 g     F .text	000001fc __mdiff
00002fa4 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000076a8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00011118 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000113a8 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00001880 g     F .text	00000038 HIDMEventHandler
0001494c g     F .text	00000034 _exit
00013418 g     F .text	0000012c alt_alarm_start
00000a80 g     F .text	00000120 printSignedHex0
00008244 g     F .text	000001bc __smakebuf_r
0000323c g     F .text	00000098 strlen
00013e34 g     F .text	0000015c open
0000e8c0 g     F .text	000000dc .hidden __gedf2
000141bc g     F .text	0000003c alt_putchar
00016b30 g     O .rwdata	00000004 __wctomb
0000aab4 g     F .text	00000018 __sprint_r
000138ec g     F .text	00000020 alt_icache_flush_all
00016b60 g     O .rwdata	00000004 alt_priority_mask
0001395c g     F .text	00000088 alt_ic_irq_enable
000055b0 g     F .text	0000001c __vfprintf_internal
00000f20 g     F .text	00000408 HIDMProbe
0000c9a0 g     F .text	0000005c _wctomb_r
00001924 g     F .text	00000028 SPI_wr
0000f2fc g     F .text	000008fc .hidden __subdf3
00009440 g     F .text	000000b0 __lo0bits
00016b50 g     O .rwdata	00000008 alt_alarm_list
0001379c g     F .text	00000060 _do_ctors
0000c8b0 g     F .text	000000c0 wcrtomb
0000fe9c g     F .text	000000d8 close
0001260c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00000788 g     F .text	0000006c SGTL5000audio_on
000101e4 g     F .text	00000084 alt_load
000118a4 g     F .text	0000013c alt_avalon_i2c_master_rx
0000c4cc g     F .text	00000080 fputwc
000076ac g     F .text	00000004 __sinit_lock_acquire
00002088 g     F .text	0000014c XferCtrlReq
0000918c g     F .text	00000148 __multadd
00009164 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a22e04 	addi	r2,r2,-30536
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a22e04 	addi	r2,r2,-30536
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a70417 	ldw	r2,-25584(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a70417 	ldw	r2,-25584(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6bac314 	ori	gp,gp,60172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10a1b414 	ori	r2,r2,34512

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18e26e14 	ori	r3,r3,35256

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00101e40 	call	101e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00103800 	call	10380 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <I2Creg_wr>:
#include <unistd.h>

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
     26c:	defff904 	addi	sp,sp,-28
     270:	dfc00615 	stw	ra,24(sp)
     274:	df000515 	stw	fp,20(sp)
     278:	df000504 	addi	fp,sp,20
     27c:	e13ffd15 	stw	r4,-12(fp)
     280:	2807883a 	mov	r3,r5
     284:	3005883a 	mov	r2,r6
     288:	e0fffe05 	stb	r3,-8(fp)
     28c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
     290:	e0bfff0b 	ldhu	r2,-4(fp)
     294:	1004d23a 	srli	r2,r2,8
     298:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
     29c:	e0bfff0b 	ldhu	r2,-4(fp)
     2a0:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
     2a4:	e03ffb85 	stb	zero,-18(fp)
     2a8:	e0bffe03 	ldbu	r2,-8(fp)
     2ac:	e0bffbc5 	stb	r2,-17(fp)
     2b0:	e0bffb03 	ldbu	r2,-20(fp)
     2b4:	e0bffc05 	stb	r2,-16(fp)
     2b8:	e0bffb43 	ldbu	r2,-19(fp)
     2bc:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
     2c0:	e0bffb84 	addi	r2,fp,-18
     2c4:	000f883a 	mov	r7,zero
     2c8:	01800104 	movi	r6,4
     2cc:	100b883a 	mov	r5,r2
     2d0:	e13ffd17 	ldw	r4,-12(fp)
     2d4:	00117bc0 	call	117bc <alt_avalon_i2c_master_tx>
     2d8:	10000426 	beq	r2,zero,2ec <I2Creg_wr+0x80>
		printf("I2C Register Write Error");
     2dc:	01000074 	movhi	r4,1
     2e0:	21126004 	addi	r4,r4,18816
     2e4:	000312c0 	call	312c <printf>
	}
	return;
     2e8:	0001883a 	nop
     2ec:	0001883a 	nop
}
     2f0:	e037883a 	mov	sp,fp
     2f4:	dfc00117 	ldw	ra,4(sp)
     2f8:	df000017 	ldw	fp,0(sp)
     2fc:	dec00204 	addi	sp,sp,8
     300:	f800283a 	ret

00000304 <I2Cbytes_wr>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
     304:	defff604 	addi	sp,sp,-40
     308:	dfc00915 	stw	ra,36(sp)
     30c:	df000815 	stw	fp,32(sp)
     310:	dc000715 	stw	r16,28(sp)
     314:	df000804 	addi	fp,sp,32
     318:	e13ffb15 	stw	r4,-20(fp)
     31c:	3009883a 	mov	r4,r6
     320:	e1fffe15 	stw	r7,-8(fp)
     324:	e17ffc05 	stb	r5,-16(fp)
     328:	e13ffd05 	stb	r4,-12(fp)
     32c:	d809883a 	mov	r4,sp
     330:	2021883a 	mov	r16,r4
	alt_u8 txbuffer[2*nwords+2];
     334:	e13ffd03 	ldbu	r4,-12(fp)
     338:	21000044 	addi	r4,r4,1
     33c:	2109883a 	add	r4,r4,r4
     340:	217fffc4 	addi	r5,r4,-1
     344:	e17ff915 	stw	r5,-28(fp)
     348:	200b883a 	mov	r5,r4
     34c:	2819883a 	mov	r12,r5
     350:	001b883a 	mov	r13,zero
     354:	600ad77a 	srli	r5,r12,29
     358:	681290fa 	slli	r9,r13,3
     35c:	2a52b03a 	or	r9,r5,r9
     360:	601090fa 	slli	r8,r12,3
     364:	200b883a 	mov	r5,r4
     368:	2815883a 	mov	r10,r5
     36c:	0017883a 	mov	r11,zero
     370:	500ad77a 	srli	r5,r10,29
     374:	580690fa 	slli	r3,r11,3
     378:	28c6b03a 	or	r3,r5,r3
     37c:	500490fa 	slli	r2,r10,3
     380:	2005883a 	mov	r2,r4
     384:	108000c4 	addi	r2,r2,3
     388:	1004d0ba 	srli	r2,r2,2
     38c:	1085883a 	add	r2,r2,r2
     390:	1085883a 	add	r2,r2,r2
     394:	d8b7c83a 	sub	sp,sp,r2
     398:	d805883a 	mov	r2,sp
     39c:	1005883a 	mov	r2,r2
     3a0:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
     3a4:	e0bffa17 	ldw	r2,-24(fp)
     3a8:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
     3ac:	e0bffa17 	ldw	r2,-24(fp)
     3b0:	e0fffc03 	ldbu	r3,-16(fp)
     3b4:	10c00045 	stb	r3,1(r2)
	int i = 0;
     3b8:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
     3bc:	e03ff815 	stw	zero,-32(fp)
     3c0:	00001d06 	br	438 <I2Cbytes_wr+0x134>
		txbuffer[i+2] = data[i] >> 8;
     3c4:	e0bff817 	ldw	r2,-32(fp)
     3c8:	10c00084 	addi	r3,r2,2
     3cc:	e0bff817 	ldw	r2,-32(fp)
     3d0:	1085883a 	add	r2,r2,r2
     3d4:	1009883a 	mov	r4,r2
     3d8:	e0bffe17 	ldw	r2,-8(fp)
     3dc:	1105883a 	add	r2,r2,r4
     3e0:	1080000b 	ldhu	r2,0(r2)
     3e4:	10bfffcc 	andi	r2,r2,65535
     3e8:	1004d23a 	srli	r2,r2,8
     3ec:	1009883a 	mov	r4,r2
     3f0:	e0bffa17 	ldw	r2,-24(fp)
     3f4:	10c5883a 	add	r2,r2,r3
     3f8:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
     3fc:	e0bff817 	ldw	r2,-32(fp)
     400:	10c000c4 	addi	r3,r2,3
     404:	e0bff817 	ldw	r2,-32(fp)
     408:	1085883a 	add	r2,r2,r2
     40c:	1009883a 	mov	r4,r2
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	1105883a 	add	r2,r2,r4
     418:	1080000b 	ldhu	r2,0(r2)
     41c:	1009883a 	mov	r4,r2
     420:	e0bffa17 	ldw	r2,-24(fp)
     424:	10c5883a 	add	r2,r2,r3
     428:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
     42c:	e0bff817 	ldw	r2,-32(fp)
     430:	10800044 	addi	r2,r2,1
     434:	e0bff815 	stw	r2,-32(fp)
     438:	e0bffd03 	ldbu	r2,-12(fp)
     43c:	e0fff817 	ldw	r3,-32(fp)
     440:	18bfe016 	blt	r3,r2,3c4 <__alt_data_end+0xfc0003c4>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
     444:	e0fffa17 	ldw	r3,-24(fp)
     448:	e0bffd03 	ldbu	r2,-12(fp)
     44c:	10800044 	addi	r2,r2,1
     450:	1085883a 	add	r2,r2,r2
     454:	000f883a 	mov	r7,zero
     458:	100d883a 	mov	r6,r2
     45c:	180b883a 	mov	r5,r3
     460:	e13ffb17 	ldw	r4,-20(fp)
     464:	00117bc0 	call	117bc <alt_avalon_i2c_master_tx>
     468:	10000326 	beq	r2,zero,478 <I2Cbytes_wr+0x174>
		printf("I2C Bytes Write Error");
     46c:	01000074 	movhi	r4,1
     470:	21126704 	addi	r4,r4,18844
     474:	000312c0 	call	312c <printf>
	}
	return (data+nwords);
     478:	e0bffd03 	ldbu	r2,-12(fp)
     47c:	1085883a 	add	r2,r2,r2
     480:	1007883a 	mov	r3,r2
     484:	e0bffe17 	ldw	r2,-8(fp)
     488:	10c5883a 	add	r2,r2,r3
     48c:	8037883a 	mov	sp,r16
}
     490:	e6ffff04 	addi	sp,fp,-4
     494:	dfc00217 	ldw	ra,8(sp)
     498:	df000117 	ldw	fp,4(sp)
     49c:	dc000017 	ldw	r16,0(sp)
     4a0:	dec00304 	addi	sp,sp,12
     4a4:	f800283a 	ret

000004a8 <I2Creg_rd>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
     4a8:	defff804 	addi	sp,sp,-32
     4ac:	dfc00715 	stw	ra,28(sp)
     4b0:	df000615 	stw	fp,24(sp)
     4b4:	df000604 	addi	fp,sp,24
     4b8:	e13ffe15 	stw	r4,-8(fp)
     4bc:	2805883a 	mov	r2,r5
     4c0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
     4c4:	e03ffc85 	stb	zero,-14(fp)
     4c8:	e0bfff03 	ldbu	r2,-4(fp)
     4cc:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
     4d0:	e03ffd05 	stb	zero,-12(fp)
     4d4:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
     4d8:	e13ffd04 	addi	r4,fp,-12
     4dc:	e0fffc84 	addi	r3,fp,-14
     4e0:	d8000115 	stw	zero,4(sp)
     4e4:	00800084 	movi	r2,2
     4e8:	d8800015 	stw	r2,0(sp)
     4ec:	200f883a 	mov	r7,r4
     4f0:	01800084 	movi	r6,2
     4f4:	180b883a 	mov	r5,r3
     4f8:	e13ffe17 	ldw	r4,-8(fp)
     4fc:	00119e00 	call	119e0 <alt_avalon_i2c_master_tx_rx>
     500:	10000326 	beq	r2,zero,510 <I2Creg_rd+0x68>
		printf("I2C Register Read Error");
     504:	01000074 	movhi	r4,1
     508:	21126d04 	addi	r4,r4,18868
     50c:	000312c0 	call	312c <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
     510:	e0bffd03 	ldbu	r2,-12(fp)
     514:	10803fcc 	andi	r2,r2,255
     518:	1004923a 	slli	r2,r2,8
     51c:	1007883a 	mov	r3,r2
     520:	e0bffd43 	ldbu	r2,-11(fp)
     524:	10803fcc 	andi	r2,r2,255
     528:	1884b03a 	or	r2,r3,r2
     52c:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
     530:	e0bffc0b 	ldhu	r2,-16(fp)
}
     534:	e037883a 	mov	sp,fp
     538:	dfc00117 	ldw	ra,4(sp)
     53c:	df000017 	ldw	fp,0(sp)
     540:	dec00204 	addi	sp,sp,8
     544:	f800283a 	ret

00000548 <I2Cbytes_rd>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
     548:	defff304 	addi	sp,sp,-52
     54c:	dfc00c15 	stw	ra,48(sp)
     550:	df000b15 	stw	fp,44(sp)
     554:	dc000a15 	stw	r16,40(sp)
     558:	df000b04 	addi	fp,sp,44
     55c:	e13ffb15 	stw	r4,-20(fp)
     560:	3009883a 	mov	r4,r6
     564:	e1fffe15 	stw	r7,-8(fp)
     568:	e17ffc05 	stb	r5,-16(fp)
     56c:	e13ffd05 	stb	r4,-12(fp)
     570:	d809883a 	mov	r4,sp
     574:	2021883a 	mov	r16,r4
	alt_u8 txbuffer[2] = {0x00, reg};
     578:	e03ffa05 	stb	zero,-24(fp)
     57c:	e13ffc03 	ldbu	r4,-16(fp)
     580:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
     584:	e13ffd03 	ldbu	r4,-12(fp)
     588:	2109883a 	add	r4,r4,r4
     58c:	217fffc4 	addi	r5,r4,-1
     590:	e17ff815 	stw	r5,-32(fp)
     594:	200b883a 	mov	r5,r4
     598:	2819883a 	mov	r12,r5
     59c:	001b883a 	mov	r13,zero
     5a0:	600ad77a 	srli	r5,r12,29
     5a4:	681290fa 	slli	r9,r13,3
     5a8:	2a52b03a 	or	r9,r5,r9
     5ac:	601090fa 	slli	r8,r12,3
     5b0:	200b883a 	mov	r5,r4
     5b4:	2815883a 	mov	r10,r5
     5b8:	0017883a 	mov	r11,zero
     5bc:	500ad77a 	srli	r5,r10,29
     5c0:	580690fa 	slli	r3,r11,3
     5c4:	28c6b03a 	or	r3,r5,r3
     5c8:	500490fa 	slli	r2,r10,3
     5cc:	2005883a 	mov	r2,r4
     5d0:	108000c4 	addi	r2,r2,3
     5d4:	1004d0ba 	srli	r2,r2,2
     5d8:	1085883a 	add	r2,r2,r2
     5dc:	1085883a 	add	r2,r2,r2
     5e0:	d8b7c83a 	sub	sp,sp,r2
     5e4:	d8800204 	addi	r2,sp,8
     5e8:	1005883a 	mov	r2,r2
     5ec:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
     5f0:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
     5f4:	e0fff917 	ldw	r3,-28(fp)
     5f8:	e0bffd03 	ldbu	r2,-12(fp)
     5fc:	1085883a 	add	r2,r2,r2
     600:	1009883a 	mov	r4,r2
     604:	e0bffa04 	addi	r2,fp,-24
     608:	d8000115 	stw	zero,4(sp)
     60c:	d9000015 	stw	r4,0(sp)
     610:	180f883a 	mov	r7,r3
     614:	01800084 	movi	r6,2
     618:	100b883a 	mov	r5,r2
     61c:	e13ffb17 	ldw	r4,-20(fp)
     620:	00119e00 	call	119e0 <alt_avalon_i2c_master_tx_rx>
     624:	10000326 	beq	r2,zero,634 <I2Cbytes_rd+0xec>
		printf("I2C Bytes Read Error");
     628:	01000074 	movhi	r4,1
     62c:	21127304 	addi	r4,r4,18892
     630:	000312c0 	call	312c <printf>
	}
	for(i = 0; i < nwords; i++) {
     634:	e03ff715 	stw	zero,-36(fp)
     638:	00001a06 	br	6a4 <I2Cbytes_rd+0x15c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
     63c:	e0bff717 	ldw	r2,-36(fp)
     640:	1085883a 	add	r2,r2,r2
     644:	1007883a 	mov	r3,r2
     648:	e0bffe17 	ldw	r2,-8(fp)
     64c:	10c7883a 	add	r3,r2,r3
     650:	e0bff717 	ldw	r2,-36(fp)
     654:	1085883a 	add	r2,r2,r2
     658:	1009883a 	mov	r4,r2
     65c:	e0bff917 	ldw	r2,-28(fp)
     660:	1105883a 	add	r2,r2,r4
     664:	10800003 	ldbu	r2,0(r2)
     668:	10803fcc 	andi	r2,r2,255
     66c:	1004923a 	slli	r2,r2,8
     670:	100b883a 	mov	r5,r2
     674:	e0bff717 	ldw	r2,-36(fp)
     678:	1085883a 	add	r2,r2,r2
     67c:	10800044 	addi	r2,r2,1
     680:	e13ff917 	ldw	r4,-28(fp)
     684:	2085883a 	add	r2,r4,r2
     688:	10800003 	ldbu	r2,0(r2)
     68c:	10803fcc 	andi	r2,r2,255
     690:	2884b03a 	or	r2,r5,r2
     694:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
     698:	e0bff717 	ldw	r2,-36(fp)
     69c:	10800044 	addi	r2,r2,1
     6a0:	e0bff715 	stw	r2,-36(fp)
     6a4:	e0bffd03 	ldbu	r2,-12(fp)
     6a8:	e0fff717 	ldw	r3,-36(fp)
     6ac:	18bfe316 	blt	r3,r2,63c <__alt_data_end+0xfc00063c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
     6b0:	e0bffd03 	ldbu	r2,-12(fp)
     6b4:	1085883a 	add	r2,r2,r2
     6b8:	1007883a 	mov	r3,r2
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	10c5883a 	add	r2,r2,r3
     6c4:	8037883a 	mov	sp,r16
}
     6c8:	e6ffff04 	addi	sp,fp,-4
     6cc:	dfc00217 	ldw	ra,8(sp)
     6d0:	df000117 	ldw	fp,4(sp)
     6d4:	dc000017 	ldw	r16,0(sp)
     6d8:	dec00304 	addi	sp,sp,12
     6dc:	f800283a 	ret

000006e0 <SGTL5000init>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
     6e0:	defffd04 	addi	sp,sp,-12
     6e4:	dfc00215 	stw	ra,8(sp)
     6e8:	df000115 	stw	fp,4(sp)
     6ec:	df000104 	addi	fp,sp,4
     6f0:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
     6f4:	01400284 	movi	r5,10
     6f8:	e13fff17 	ldw	r4,-4(fp)
     6fc:	00115b40 	call	115b4 <alt_avalon_i2c_master_target_set>

	//Writes parameters to registers

	I2Creg_wr(dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | VAG_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP);
     700:	019ebf04 	movi	r6,31484
     704:	01400c04 	movi	r5,48
     708:	e13fff17 	ldw	r4,-4(fp)
     70c:	000026c0 	call	26c <I2Creg_wr>

	//Maybe needed?
	I2Creg_wr(dev, REF_CTRL, 0x004E);
     710:	01801384 	movi	r6,78
     714:	01400a04 	movi	r5,40
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, LINE_OUT_CTRL, 0x0322);
     720:	0180c884 	movi	r6,802
     724:	01400b04 	movi	r5,44
     728:	e13fff17 	ldw	r4,-4(fp)
     72c:	000026c0 	call	26c <I2Creg_wr>

	I2Creg_wr(dev, DIG_POWER, DAC_POWERUP_DIG | I2S_IN_POWERUP);
     730:	01800844 	movi	r6,33
     734:	01400084 	movi	r5,2
     738:	e13fff17 	ldw	r4,-4(fp)
     73c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
     740:	01800104 	movi	r6,4
     744:	01400104 	movi	r5,4
     748:	e13fff17 	ldw	r4,-4(fp)
     74c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, I2S_CTRL, DLEN_16);
     750:	01800c04 	movi	r6,48
     754:	01400184 	movi	r5,6
     758:	e13fff17 	ldw	r4,-4(fp)
     75c:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
     760:	01800404 	movi	r6,16
     764:	01400284 	movi	r5,10
     768:	e13fff17 	ldw	r4,-4(fp)
     76c:	000026c0 	call	26c <I2Creg_wr>

}
     770:	0001883a 	nop
     774:	e037883a 	mov	sp,fp
     778:	dfc00117 	ldw	ra,4(sp)
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00204 	addi	sp,sp,8
     784:	f800283a 	ret

00000788 <SGTL5000audio_on>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
     788:	defffd04 	addi	sp,sp,-12
     78c:	dfc00215 	stw	ra,8(sp)
     790:	df000115 	stw	fp,4(sp)
     794:	df000104 	addi	fp,sp,4
     798:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, HP_VOL_INIT);
     79c:	01901004 	movi	r6,16448
     7a0:	01400884 	movi	r5,34
     7a4:	e13fff17 	ldw	r4,-4(fp)
     7a8:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, DAC_VOL, DAC_VOL_INIT);
     7ac:	019c1c04 	movi	r6,28784
     7b0:	01400404 	movi	r5,16
     7b4:	e13fff17 	ldw	r4,-4(fp)
     7b8:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
     7bc:	01808004 	movi	r6,512
     7c0:	01400384 	movi	r5,14
     7c4:	e13fff17 	ldw	r4,-4(fp)
     7c8:	000026c0 	call	26c <I2Creg_wr>
	I2Creg_wr(dev, ANA_CTRL, MUTE_LO | !MUTE_HP | MUTE_ADC);
     7cc:	01804044 	movi	r6,257
     7d0:	01400904 	movi	r5,36
     7d4:	e13fff17 	ldw	r4,-4(fp)
     7d8:	000026c0 	call	26c <I2Creg_wr>

}
     7dc:	0001883a 	nop
     7e0:	e037883a 	mov	sp,fp
     7e4:	dfc00117 	ldw	ra,4(sp)
     7e8:	df000017 	ldw	fp,0(sp)
     7ec:	dec00204 	addi	sp,sp,8
     7f0:	f800283a 	ret

000007f4 <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
     7f4:	defff604 	addi	sp,sp,-40
     7f8:	dfc00915 	stw	ra,36(sp)
     7fc:	df000815 	stw	fp,32(sp)
     800:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
     804:	00bfffc4 	movi	r2,-1
     808:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
     80c:	01000074 	movhi	r4,1
     810:	21128c04 	addi	r4,r4,18992
     814:	00032280 	call	3228 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
     818:	00800044 	movi	r2,1
     81c:	e0bffd05 	stb	r2,-12(fp)
     820:	00001f06 	br	8a0 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
     824:	e0bffd03 	ldbu	r2,-12(fp)
     828:	1009883a 	mov	r4,r2
     82c:	0002e640 	call	2e64 <GetDevtable>
     830:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
     834:	e0bffe17 	ldw	r2,-8(fp)
     838:	10800017 	ldw	r2,0(r2)
     83c:	10001526 	beq	r2,zero,894 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
     840:	e0bffd03 	ldbu	r2,-12(fp)
     844:	100b883a 	mov	r5,r2
     848:	01000074 	movhi	r4,1
     84c:	21129504 	addi	r4,r4,19028
     850:	000312c0 	call	312c <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
     854:	e0bffe17 	ldw	r2,-8(fp)
     858:	10800103 	ldbu	r2,4(r2)
     85c:	10c03fcc 	andi	r3,r2,255
     860:	00800074 	movhi	r2,1
     864:	10928804 	addi	r2,r2,18976
     868:	18c7883a 	add	r3,r3,r3
     86c:	18c7883a 	add	r3,r3,r3
     870:	10c5883a 	add	r2,r2,r3
     874:	10800017 	ldw	r2,0(r2)
     878:	100b883a 	mov	r5,r2
     87c:	01000074 	movhi	r4,1
     880:	21129804 	addi	r4,r4,19040
     884:	000312c0 	call	312c <printf>
			device = tpl_ptr->devclass;
     888:	e0bffe17 	ldw	r2,-8(fp)
     88c:	10800103 	ldbu	r2,4(r2)
     890:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
     894:	e0bffd03 	ldbu	r2,-12(fp)
     898:	10800044 	addi	r2,r2,1
     89c:	e0bffd05 	stb	r2,-12(fp)
     8a0:	e0bffd03 	ldbu	r2,-12(fp)
     8a4:	10800230 	cmpltui	r2,r2,8
     8a8:	103fde1e 	bne	r2,zero,824 <__alt_data_end+0xfc000824>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
     8ac:	d0a00003 	ldbu	r2,-32768(gp)
     8b0:	11003fcc 	andi	r4,r2,255
     8b4:	d0a6f143 	ldbu	r2,-25659(gp)
     8b8:	10803fcc 	andi	r2,r2,255
     8bc:	e0ffff44 	addi	r3,fp,-3
     8c0:	d8c00415 	stw	r3,16(sp)
     8c4:	00c00044 	movi	r3,1
     8c8:	d8c00315 	stw	r3,12(sp)
     8cc:	d8800215 	stw	r2,8(sp)
     8d0:	d8000115 	stw	zero,4(sp)
     8d4:	d8000015 	stw	zero,0(sp)
     8d8:	01c00084 	movi	r7,2
     8dc:	01802844 	movi	r6,161
     8e0:	000b883a 	mov	r5,zero
     8e4:	00020880 	call	2088 <XferCtrlReq>
     8e8:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
     8ec:	e0bfff03 	ldbu	r2,-4(fp)
     8f0:	10000926 	beq	r2,zero,918 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
     8f4:	01000074 	movhi	r4,1
     8f8:	21129a04 	addi	r4,r4,19048
     8fc:	000312c0 	call	312c <printf>
		printf("%x \n", rcode);
     900:	e0bfff03 	ldbu	r2,-4(fp)
     904:	100b883a 	mov	r5,r2
     908:	01000074 	movhi	r4,1
     90c:	2112a104 	addi	r4,r4,19076
     910:	000312c0 	call	312c <printf>
     914:	00000906 	br	93c <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
     918:	01000074 	movhi	r4,1
     91c:	2112a304 	addi	r4,r4,19084
     920:	000312c0 	call	312c <printf>
		printf("%x \n", tmpbyte);
     924:	e0bfff43 	ldbu	r2,-3(fp)
     928:	10803fcc 	andi	r2,r2,255
     92c:	100b883a 	mov	r5,r2
     930:	01000074 	movhi	r4,1
     934:	2112a104 	addi	r4,r4,19076
     938:	000312c0 	call	312c <printf>
	}
	printf("Protocol: ");
     93c:	01000074 	movhi	r4,1
     940:	2112a704 	addi	r4,r4,19100
     944:	000312c0 	call	312c <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
     948:	d0a00003 	ldbu	r2,-32768(gp)
     94c:	11003fcc 	andi	r4,r2,255
     950:	d0a6f143 	ldbu	r2,-25659(gp)
     954:	10803fcc 	andi	r2,r2,255
     958:	e0ffff44 	addi	r3,fp,-3
     95c:	d8c00415 	stw	r3,16(sp)
     960:	00c00044 	movi	r3,1
     964:	d8c00315 	stw	r3,12(sp)
     968:	d8800215 	stw	r2,8(sp)
     96c:	d8000115 	stw	zero,4(sp)
     970:	d8000015 	stw	zero,0(sp)
     974:	01c000c4 	movi	r7,3
     978:	01802844 	movi	r6,161
     97c:	000b883a 	mov	r5,zero
     980:	00020880 	call	2088 <XferCtrlReq>
     984:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
     988:	e0bfff03 	ldbu	r2,-4(fp)
     98c:	10000926 	beq	r2,zero,9b4 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
     990:	01000074 	movhi	r4,1
     994:	2112aa04 	addi	r4,r4,19112
     998:	000312c0 	call	312c <printf>
		printf("%x \n", rcode);
     99c:	e0bfff03 	ldbu	r2,-4(fp)
     9a0:	100b883a 	mov	r5,r2
     9a4:	01000074 	movhi	r4,1
     9a8:	2112a104 	addi	r4,r4,19076
     9ac:	000312c0 	call	312c <printf>
     9b0:	00000606 	br	9cc <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
     9b4:	e0bfff43 	ldbu	r2,-3(fp)
     9b8:	10803fcc 	andi	r2,r2,255
     9bc:	100b883a 	mov	r5,r2
     9c0:	01000074 	movhi	r4,1
     9c4:	2112b104 	addi	r4,r4,19140
     9c8:	000312c0 	call	312c <printf>
	}
	return device;
     9cc:	e0bffd43 	ldbu	r2,-11(fp)
}
     9d0:	e037883a 	mov	sp,fp
     9d4:	dfc00117 	ldw	ra,4(sp)
     9d8:	df000017 	ldw	fp,0(sp)
     9dc:	dec00204 	addi	sp,sp,8
     9e0:	f800283a 	ret

000009e4 <setLED>:

void setLED(int LED) {
     9e4:	defffe04 	addi	sp,sp,-8
     9e8:	df000115 	stw	fp,4(sp)
     9ec:	df000104 	addi	fp,sp,4
     9f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
     9f4:	00810034 	movhi	r2,1024
     9f8:	10849404 	addi	r2,r2,4688
     9fc:	10c00037 	ldwio	r3,0(r2)
     a00:	01000044 	movi	r4,1
     a04:	e0bfff17 	ldw	r2,-4(fp)
     a08:	2084983a 	sll	r2,r4,r2
     a0c:	1886b03a 	or	r3,r3,r2
     a10:	00810034 	movhi	r2,1024
     a14:	10849404 	addi	r2,r2,4688
     a18:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
     a1c:	0001883a 	nop
     a20:	e037883a 	mov	sp,fp
     a24:	df000017 	ldw	fp,0(sp)
     a28:	dec00104 	addi	sp,sp,4
     a2c:	f800283a 	ret

00000a30 <clearLED>:

void clearLED(int LED) {
     a30:	defffe04 	addi	sp,sp,-8
     a34:	df000115 	stw	fp,4(sp)
     a38:	df000104 	addi	fp,sp,4
     a3c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
     a40:	00810034 	movhi	r2,1024
     a44:	10849404 	addi	r2,r2,4688
     a48:	10c00037 	ldwio	r3,0(r2)
     a4c:	01000044 	movi	r4,1
     a50:	e0bfff17 	ldw	r2,-4(fp)
     a54:	2084983a 	sll	r2,r4,r2
     a58:	0084303a 	nor	r2,zero,r2
     a5c:	1886703a 	and	r3,r3,r2
     a60:	00810034 	movhi	r2,1024
     a64:	10849404 	addi	r2,r2,4688
     a68:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
     a6c:	0001883a 	nop
     a70:	e037883a 	mov	sp,fp
     a74:	df000017 	ldw	fp,0(sp)
     a78:	dec00104 	addi	sp,sp,4
     a7c:	f800283a 	ret

00000a80 <printSignedHex0>:

void printSignedHex0(signed char value) {
     a80:	defffc04 	addi	sp,sp,-16
     a84:	dfc00315 	stw	ra,12(sp)
     a88:	df000215 	stw	fp,8(sp)
     a8c:	df000204 	addi	fp,sp,8
     a90:	2005883a 	mov	r2,r4
     a94:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
     a98:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
     a9c:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
     aa0:	00810034 	movhi	r2,1024
     aa4:	10848404 	addi	r2,r2,4624
     aa8:	10800037 	ldwio	r2,0(r2)
     aac:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
     ab0:	e0bfff07 	ldb	r2,-4(fp)
     ab4:	1000060e 	bge	r2,zero,ad0 <printSignedHex0+0x50>
		setLED(11);
     ab8:	010002c4 	movi	r4,11
     abc:	00009e40 	call	9e4 <setLED>
		value = -value;
     ac0:	e0bfff03 	ldbu	r2,-4(fp)
     ac4:	0085c83a 	sub	r2,zero,r2
     ac8:	e0bfff05 	stb	r2,-4(fp)
     acc:	00000206 	br	ad8 <printSignedHex0+0x58>
	} else {
		clearLED(11);
     ad0:	010002c4 	movi	r4,11
     ad4:	0000a300 	call	a30 <clearLED>
	}
	//handled hundreds
	if (value / 100)
     ad8:	e0bfff03 	ldbu	r2,-4(fp)
     adc:	108018c4 	addi	r2,r2,99
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	108031f0 	cmpltui	r2,r2,199
     ae8:	1000031e 	bne	r2,zero,af8 <printSignedHex0+0x78>
		setLED(13);
     aec:	01000344 	movi	r4,13
     af0:	00009e40 	call	9e4 <setLED>
     af4:	00000206 	br	b00 <printSignedHex0+0x80>
	else
		clearLED(13);
     af8:	01000344 	movi	r4,13
     afc:	0000a300 	call	a30 <clearLED>

	value = value % 100;
     b00:	e0bfff07 	ldb	r2,-4(fp)
     b04:	01401904 	movi	r5,100
     b08:	1009883a 	mov	r4,r2
     b0c:	0002fa40 	call	2fa4 <__modsi3>
     b10:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
     b14:	e0bfff07 	ldb	r2,-4(fp)
     b18:	01400284 	movi	r5,10
     b1c:	1009883a 	mov	r4,r2
     b20:	0002f200 	call	2f20 <__divsi3>
     b24:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
     b28:	e0bfff07 	ldb	r2,-4(fp)
     b2c:	01400284 	movi	r5,10
     b30:	1009883a 	mov	r4,r2
     b34:	0002fa40 	call	2fa4 <__modsi3>
     b38:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
     b3c:	e0bffe8b 	ldhu	r2,-6(fp)
     b40:	10803fcc 	andi	r2,r2,255
     b44:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
     b48:	e0bffe03 	ldbu	r2,-8(fp)
     b4c:	1004933a 	slli	r2,r2,12
     b50:	1007883a 	mov	r3,r2
     b54:	e0bffe8b 	ldhu	r2,-6(fp)
     b58:	1884b03a 	or	r2,r3,r2
     b5c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
     b60:	e0bffe43 	ldbu	r2,-7(fp)
     b64:	1004923a 	slli	r2,r2,8
     b68:	1007883a 	mov	r3,r2
     b6c:	e0bffe8b 	ldhu	r2,-6(fp)
     b70:	1884b03a 	or	r2,r3,r2
     b74:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
     b78:	e0fffe8b 	ldhu	r3,-6(fp)
     b7c:	00810034 	movhi	r2,1024
     b80:	10848404 	addi	r2,r2,4624
     b84:	10c00035 	stwio	r3,0(r2)
}
     b88:	0001883a 	nop
     b8c:	e037883a 	mov	sp,fp
     b90:	dfc00117 	ldw	ra,4(sp)
     b94:	df000017 	ldw	fp,0(sp)
     b98:	dec00204 	addi	sp,sp,8
     b9c:	f800283a 	ret

00000ba0 <printSignedHex1>:

void printSignedHex1(signed char value) {
     ba0:	defffb04 	addi	sp,sp,-20
     ba4:	dfc00415 	stw	ra,16(sp)
     ba8:	df000315 	stw	fp,12(sp)
     bac:	df000304 	addi	fp,sp,12
     bb0:	2005883a 	mov	r2,r4
     bb4:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
     bb8:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
     bbc:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
     bc0:	00810034 	movhi	r2,1024
     bc4:	10848404 	addi	r2,r2,4624
     bc8:	10800037 	ldwio	r2,0(r2)
     bcc:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
     bd0:	e0bfff07 	ldb	r2,-4(fp)
     bd4:	1000060e 	bge	r2,zero,bf0 <printSignedHex1+0x50>
		setLED(10);
     bd8:	01000284 	movi	r4,10
     bdc:	00009e40 	call	9e4 <setLED>
		value = -value;
     be0:	e0bfff03 	ldbu	r2,-4(fp)
     be4:	0085c83a 	sub	r2,zero,r2
     be8:	e0bfff05 	stb	r2,-4(fp)
     bec:	00000206 	br	bf8 <printSignedHex1+0x58>
	} else {
		clearLED(10);
     bf0:	01000284 	movi	r4,10
     bf4:	0000a300 	call	a30 <clearLED>
	}
	//handled hundreds
	if (value / 100)
     bf8:	e0bfff03 	ldbu	r2,-4(fp)
     bfc:	108018c4 	addi	r2,r2,99
     c00:	10803fcc 	andi	r2,r2,255
     c04:	108031f0 	cmpltui	r2,r2,199
     c08:	1000031e 	bne	r2,zero,c18 <printSignedHex1+0x78>
		setLED(12);
     c0c:	01000304 	movi	r4,12
     c10:	00009e40 	call	9e4 <setLED>
     c14:	00000206 	br	c20 <printSignedHex1+0x80>
	else
		clearLED(12);
     c18:	01000304 	movi	r4,12
     c1c:	0000a300 	call	a30 <clearLED>

	value = value % 100;
     c20:	e0bfff07 	ldb	r2,-4(fp)
     c24:	01401904 	movi	r5,100
     c28:	1009883a 	mov	r4,r2
     c2c:	0002fa40 	call	2fa4 <__modsi3>
     c30:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
     c34:	e0bfff07 	ldb	r2,-4(fp)
     c38:	01400284 	movi	r5,10
     c3c:	1009883a 	mov	r4,r2
     c40:	0002f200 	call	2f20 <__divsi3>
     c44:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
     c48:	e0bfff07 	ldb	r2,-4(fp)
     c4c:	01400284 	movi	r5,10
     c50:	1009883a 	mov	r4,r2
     c54:	0002fa40 	call	2fa4 <__modsi3>
     c58:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
     c5c:	e0bfff07 	ldb	r2,-4(fp)
     c60:	01400284 	movi	r5,10
     c64:	1009883a 	mov	r4,r2
     c68:	0002f200 	call	2f20 <__divsi3>
     c6c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
     c70:	e0bfff07 	ldb	r2,-4(fp)
     c74:	01400284 	movi	r5,10
     c78:	1009883a 	mov	r4,r2
     c7c:	0002fa40 	call	2fa4 <__modsi3>
     c80:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
     c84:	e0bffe17 	ldw	r2,-8(fp)
     c88:	10bfc00c 	andi	r2,r2,65280
     c8c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
     c90:	e0bffd03 	ldbu	r2,-12(fp)
     c94:	1004913a 	slli	r2,r2,4
     c98:	1007883a 	mov	r3,r2
     c9c:	e0bffe17 	ldw	r2,-8(fp)
     ca0:	10c4b03a 	or	r2,r2,r3
     ca4:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
     ca8:	e0bffd43 	ldbu	r2,-11(fp)
     cac:	e0fffe17 	ldw	r3,-8(fp)
     cb0:	1884b03a 	or	r2,r3,r2
     cb4:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
     cb8:	e0fffe17 	ldw	r3,-8(fp)
     cbc:	00810034 	movhi	r2,1024
     cc0:	10848404 	addi	r2,r2,4624
     cc4:	10c00035 	stwio	r3,0(r2)
}
     cc8:	0001883a 	nop
     ccc:	e037883a 	mov	sp,fp
     cd0:	dfc00117 	ldw	ra,4(sp)
     cd4:	df000017 	ldw	fp,0(sp)
     cd8:	dec00204 	addi	sp,sp,8
     cdc:	f800283a 	ret

00000ce0 <setKeycode>:

void setKeycode(WORD keycode)
{
     ce0:	defffe04 	addi	sp,sp,-8
     ce4:	df000115 	stw	fp,4(sp)
     ce8:	df000104 	addi	fp,sp,4
     cec:	2005883a 	mov	r2,r4
     cf0:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
     cf4:	e0ffff0b 	ldhu	r3,-4(fp)
     cf8:	00810034 	movhi	r2,1024
     cfc:	10848004 	addi	r2,r2,4608
     d00:	10c00035 	stwio	r3,0(r2)
}
     d04:	0001883a 	nop
     d08:	e037883a 	mov	sp,fp
     d0c:	df000017 	ldw	fp,0(sp)
     d10:	dec00104 	addi	sp,sp,4
     d14:	f800283a 	ret

00000d18 <main>:
int main() {
     d18:	defff804 	addi	sp,sp,-32
     d1c:	dfc00715 	stw	ra,28(sp)
     d20:	df000615 	stw	fp,24(sp)
     d24:	df000604 	addi	fp,sp,24
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
     d28:	e03ffa05 	stb	zero,-24(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
     d2c:	e03ffa45 	stb	zero,-23(fp)
	BYTE device;
	WORD keycode;

	printf("Initializing SGTL5000...\n");
     d30:	01000074 	movhi	r4,1
     d34:	2112b304 	addi	r4,r4,19148
     d38:	00032280 	call	3228 <puts>
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
     d3c:	01000074 	movhi	r4,1
     d40:	2112ba04 	addi	r4,r4,19176
     d44:	0010de40 	call	10de4 <alt_avalon_i2c_open>
     d48:	e0bffb15 	stw	r2,-20(fp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
     d4c:	e0bffb17 	ldw	r2,-20(fp)
     d50:	1000031e 	bne	r2,zero,d60 <main+0x48>
     d54:	01000074 	movhi	r4,1
     d58:	2112bd04 	addi	r4,r4,19188
     d5c:	00032280 	call	3228 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
     d60:	e13ffb17 	ldw	r4,-20(fp)
     d64:	00006e00 	call	6e0 <SGTL5000init>

	printf("Starting audio...\n");
     d68:	01000074 	movhi	r4,1
     d6c:	2112c504 	addi	r4,r4,19220
     d70:	00032280 	call	3228 <puts>
	SGTL5000audio_on(i2c_dev);
     d74:	e13ffb17 	ldw	r4,-20(fp)
     d78:	00007880 	call	788 <SGTL5000audio_on>
	I2Creg_wr(i2c_dev, ANA_CTRL, MUTE_LO | !MUTE_HP | !MUTE_ADC);
	I2Creg_wr(i2c_dev, ANA_TEST1, TM_SELECT_MIC | TESTMODE);
	I2Creg_wr(i2c_dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | VAG_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP | ADC_POWERUP_ANA);
	I2Creg_wr(i2c_dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
	*/
	printf("ID:          %X\n", I2Creg_rd(i2c_dev, ID));
     d7c:	000b883a 	mov	r5,zero
     d80:	e13ffb17 	ldw	r4,-20(fp)
     d84:	00004a80 	call	4a8 <I2Creg_rd>
     d88:	10bfffcc 	andi	r2,r2,65535
     d8c:	100b883a 	mov	r5,r2
     d90:	01000074 	movhi	r4,1
     d94:	2112ca04 	addi	r4,r4,19240
     d98:	000312c0 	call	312c <printf>
	printf("DIG_POWER:   %X\n", I2Creg_rd(i2c_dev, DIG_POWER));
     d9c:	01400084 	movi	r5,2
     da0:	e13ffb17 	ldw	r4,-20(fp)
     da4:	00004a80 	call	4a8 <I2Creg_rd>
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	100b883a 	mov	r5,r2
     db0:	01000074 	movhi	r4,1
     db4:	2112cf04 	addi	r4,r4,19260
     db8:	000312c0 	call	312c <printf>
	printf("CLK_CTRL:    %X\n", I2Creg_rd(i2c_dev, CLK_CTRL));
     dbc:	01400104 	movi	r5,4
     dc0:	e13ffb17 	ldw	r4,-20(fp)
     dc4:	00004a80 	call	4a8 <I2Creg_rd>
     dc8:	10bfffcc 	andi	r2,r2,65535
     dcc:	100b883a 	mov	r5,r2
     dd0:	01000074 	movhi	r4,1
     dd4:	2112d404 	addi	r4,r4,19280
     dd8:	000312c0 	call	312c <printf>
	printf("I2S_CTRL:    %X\n", I2Creg_rd(i2c_dev, I2S_CTRL));
     ddc:	01400184 	movi	r5,6
     de0:	e13ffb17 	ldw	r4,-20(fp)
     de4:	00004a80 	call	4a8 <I2Creg_rd>
     de8:	10bfffcc 	andi	r2,r2,65535
     dec:	100b883a 	mov	r5,r2
     df0:	01000074 	movhi	r4,1
     df4:	2112d904 	addi	r4,r4,19300
     df8:	000312c0 	call	312c <printf>
	printf("SSS_CTRL:    %X\n", I2Creg_rd(i2c_dev, SSS_CTRL));
     dfc:	01400284 	movi	r5,10
     e00:	e13ffb17 	ldw	r4,-20(fp)
     e04:	00004a80 	call	4a8 <I2Creg_rd>
     e08:	10bfffcc 	andi	r2,r2,65535
     e0c:	100b883a 	mov	r5,r2
     e10:	01000074 	movhi	r4,1
     e14:	2112de04 	addi	r4,r4,19320
     e18:	000312c0 	call	312c <printf>
	printf("ANA_POWER:   %X\n", I2Creg_rd(i2c_dev, ANA_POWER));
     e1c:	01400c04 	movi	r5,48
     e20:	e13ffb17 	ldw	r4,-20(fp)
     e24:	00004a80 	call	4a8 <I2Creg_rd>
     e28:	10bfffcc 	andi	r2,r2,65535
     e2c:	100b883a 	mov	r5,r2
     e30:	01000074 	movhi	r4,1
     e34:	2112e304 	addi	r4,r4,19340
     e38:	000312c0 	call	312c <printf>
	printf("ADCDAC_CTRL: %X\n", I2Creg_rd(i2c_dev, ADCDAC_CTRL));
     e3c:	01400384 	movi	r5,14
     e40:	e13ffb17 	ldw	r4,-20(fp)
     e44:	00004a80 	call	4a8 <I2Creg_rd>
     e48:	10bfffcc 	andi	r2,r2,65535
     e4c:	100b883a 	mov	r5,r2
     e50:	01000074 	movhi	r4,1
     e54:	2112e804 	addi	r4,r4,19360
     e58:	000312c0 	call	312c <printf>
	printf("ANA_CTRL:    %X\n", I2Creg_rd(i2c_dev, ANA_CTRL));
     e5c:	01400904 	movi	r5,36
     e60:	e13ffb17 	ldw	r4,-20(fp)
     e64:	00004a80 	call	4a8 <I2Creg_rd>
     e68:	10bfffcc 	andi	r2,r2,65535
     e6c:	100b883a 	mov	r5,r2
     e70:	01000074 	movhi	r4,1
     e74:	2112ed04 	addi	r4,r4,19380
     e78:	000312c0 	call	312c <printf>
	printf("ANA_TEST1:   %X\n", I2Creg_rd(i2c_dev, ANA_TEST1));
     e7c:	01400e04 	movi	r5,56
     e80:	e13ffb17 	ldw	r4,-20(fp)
     e84:	00004a80 	call	4a8 <I2Creg_rd>
     e88:	10bfffcc 	andi	r2,r2,65535
     e8c:	100b883a 	mov	r5,r2
     e90:	01000074 	movhi	r4,1
     e94:	2112f204 	addi	r4,r4,19400
     e98:	000312c0 	call	312c <printf>
	printf("ANA_ADC_CTRL:   %X\n", I2Creg_rd(i2c_dev, ANA_ADC_CTRL));
     e9c:	01400804 	movi	r5,32
     ea0:	e13ffb17 	ldw	r4,-20(fp)
     ea4:	00004a80 	call	4a8 <I2Creg_rd>
     ea8:	10bfffcc 	andi	r2,r2,65535
     eac:	100b883a 	mov	r5,r2
     eb0:	01000074 	movhi	r4,1
     eb4:	2112f704 	addi	r4,r4,19420
     eb8:	000312c0 	call	312c <printf>
	printf("DAC_VOL:     %X\n", I2Creg_rd(i2c_dev, DAC_VOL));
     ebc:	01400404 	movi	r5,16
     ec0:	e13ffb17 	ldw	r4,-20(fp)
     ec4:	00004a80 	call	4a8 <I2Creg_rd>
     ec8:	10bfffcc 	andi	r2,r2,65535
     ecc:	100b883a 	mov	r5,r2
     ed0:	01000074 	movhi	r4,1
     ed4:	2112fc04 	addi	r4,r4,19440
     ed8:	000312c0 	call	312c <printf>
	printf("ANA_HP_CTRL:   %X\n", I2Creg_rd(i2c_dev, ANA_HP_CTRL));
     edc:	01400884 	movi	r5,34
     ee0:	e13ffb17 	ldw	r4,-20(fp)
     ee4:	00004a80 	call	4a8 <I2Creg_rd>
     ee8:	10bfffcc 	andi	r2,r2,65535
     eec:	100b883a 	mov	r5,r2
     ef0:	01000074 	movhi	r4,1
     ef4:	21130104 	addi	r4,r4,19460
     ef8:	000312c0 	call	312c <printf>
	printf("Audio running\n");
     efc:	01000074 	movhi	r4,1
     f00:	21130604 	addi	r4,r4,19480
     f04:	00032280 	call	3228 <puts>
			errorflag = 0;
			clearLED(9);
		}

	}*/
	return 0;
     f08:	0005883a 	mov	r2,zero
}
     f0c:	e037883a 	mov	sp,fp
     f10:	dfc00117 	ldw	ra,4(sp)
     f14:	df000017 	ldw	fp,0(sp)
     f18:	dec00204 	addi	sp,sp,8
     f1c:	f800283a 	ret

00000f20 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
     f20:	defff204 	addi	sp,sp,-56
     f24:	dfc00d15 	stw	ra,52(sp)
     f28:	df000c15 	stw	fp,48(sp)
     f2c:	df000c04 	addi	fp,sp,48
     f30:	2005883a 	mov	r2,r4
     f34:	e17fff15 	stw	r5,-4(fp)
     f38:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
     f3c:	008000b4 	movhi	r2,2
     f40:	10a1dc04 	addi	r2,r2,-30864
     f44:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
     f48:	008000b4 	movhi	r2,2
     f4c:	10a1dc04 	addi	r2,r2,-30864
     f50:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
     f54:	e0fffe03 	ldbu	r3,-8(fp)
     f58:	008000b4 	movhi	r2,2
     f5c:	10a1dc04 	addi	r2,r2,-30864
     f60:	d8800415 	stw	r2,16(sp)
     f64:	00800244 	movi	r2,9
     f68:	d8800315 	stw	r2,12(sp)
     f6c:	d8000215 	stw	zero,8(sp)
     f70:	00800084 	movi	r2,2
     f74:	d8800115 	stw	r2,4(sp)
     f78:	d8000015 	stw	zero,0(sp)
     f7c:	01c00184 	movi	r7,6
     f80:	01802004 	movi	r6,128
     f84:	000b883a 	mov	r5,zero
     f88:	1809883a 	mov	r4,r3
     f8c:	00020880 	call	2088 <XferCtrlReq>
     f90:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
     f94:	e0bffc03 	ldbu	r2,-16(fp)
     f98:	10000226 	beq	r2,zero,fa4 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
     f9c:	0005883a 	mov	r2,zero
     fa0:	0000dc06 	br	1314 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
     fa4:	e0bffa17 	ldw	r2,-24(fp)
     fa8:	1080008b 	ldhu	r2,2(r2)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	10804070 	cmpltui	r2,r2,257
     fb4:	1000031e 	bne	r2,zero,fc4 <HIDMProbe+0xa4>
		total_length = 256;
     fb8:	00804004 	movi	r2,256
     fbc:	e0bff90d 	sth	r2,-28(fp)
     fc0:	00000306 	br	fd0 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
     fc4:	e0bffa17 	ldw	r2,-24(fp)
     fc8:	1080008b 	ldhu	r2,2(r2)
     fcc:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
     fd0:	e13ffe03 	ldbu	r4,-8(fp)
     fd4:	e0fff90b 	ldhu	r3,-28(fp)
     fd8:	008000b4 	movhi	r2,2
     fdc:	10a1dc04 	addi	r2,r2,-30864
     fe0:	d8800415 	stw	r2,16(sp)
     fe4:	d8c00315 	stw	r3,12(sp)
     fe8:	d8000215 	stw	zero,8(sp)
     fec:	00800084 	movi	r2,2
     ff0:	d8800115 	stw	r2,4(sp)
     ff4:	d8000015 	stw	zero,0(sp)
     ff8:	01c00184 	movi	r7,6
     ffc:	01802004 	movi	r6,128
    1000:	000b883a 	mov	r5,zero
    1004:	00020880 	call	2088 <XferCtrlReq>
    1008:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
    100c:	e0bffc03 	ldbu	r2,-16(fp)
    1010:	10000226 	beq	r2,zero,101c <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
    1014:	0005883a 	mov	r2,zero
    1018:	0000be06 	br	1314 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
    101c:	e0bffa17 	ldw	r2,-24(fp)
    1020:	10800143 	ldbu	r2,5(r2)
    1024:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
    1028:	0000b306 	br	12f8 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
    102c:	e0bffa17 	ldw	r2,-24(fp)
    1030:	10800043 	ldbu	r2,1(r2)
    1034:	10803fcc 	andi	r2,r2,255
    1038:	10800120 	cmpeqi	r2,r2,4
    103c:	1000091e 	bne	r2,zero,1064 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    1040:	e0bffa17 	ldw	r2,-24(fp)
    1044:	10800003 	ldbu	r2,0(r2)
    1048:	10803fcc 	andi	r2,r2,255
    104c:	e0fffb17 	ldw	r3,-20(fp)
    1050:	1885883a 	add	r2,r3,r2
    1054:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
    1058:	e0bffb17 	ldw	r2,-20(fp)
    105c:	e0bffa15 	stw	r2,-24(fp)
    1060:	0000a506 	br	12f8 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
    1064:	e0bffa17 	ldw	r2,-24(fp)
    1068:	10800143 	ldbu	r2,5(r2)
    106c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
    1070:	e0bffa17 	ldw	r2,-24(fp)
    1074:	10800183 	ldbu	r2,6(r2)
    1078:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
    107c:	e0bffa17 	ldw	r2,-24(fp)
    1080:	108001c3 	ldbu	r2,7(r2)
    1084:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    1088:	e0bffc83 	ldbu	r2,-14(fp)
    108c:	108000d8 	cmpnei	r2,r2,3
    1090:	1000971e 	bne	r2,zero,12f0 <HIDMProbe+0x3d0>
    1094:	e0bffcc3 	ldbu	r2,-13(fp)
    1098:	10800058 	cmpnei	r2,r2,1
    109c:	1000941e 	bne	r2,zero,12f0 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
    10a0:	e0bffd03 	ldbu	r2,-12(fp)
    10a4:	10800098 	cmpnei	r2,r2,2
    10a8:	1000911e 	bne	r2,zero,12f0 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
    10ac:	e0fffe03 	ldbu	r3,-8(fp)
    10b0:	008000b4 	movhi	r2,2
    10b4:	10a21c04 	addi	r2,r2,-30608
    10b8:	180690fa 	slli	r3,r3,3
    10bc:	10c5883a 	add	r2,r2,r3
    10c0:	10800104 	addi	r2,r2,4
    10c4:	00c00084 	movi	r3,2
    10c8:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
    10cc:	e0fffe03 	ldbu	r3,-8(fp)
    10d0:	008000b4 	movhi	r2,2
    10d4:	10a21c04 	addi	r2,r2,-30608
    10d8:	180690fa 	slli	r3,r3,3
    10dc:	10c5883a 	add	r2,r2,r3
    10e0:	10800017 	ldw	r2,0(r2)
    10e4:	1080008b 	ldhu	r2,2(r2)
    10e8:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
    10ec:	00017300 	call	1730 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
    10f0:	e0fffe03 	ldbu	r3,-8(fp)
    10f4:	008000b4 	movhi	r2,2
    10f8:	10a21c04 	addi	r2,r2,-30608
    10fc:	180690fa 	slli	r3,r3,3
    1100:	10c7883a 	add	r3,r2,r3
    1104:	008000b4 	movhi	r2,2
    1108:	10a1c804 	addi	r2,r2,-30944
    110c:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
    1110:	e0fffe03 	ldbu	r3,-8(fp)
    1114:	008000b4 	movhi	r2,2
    1118:	10a21c04 	addi	r2,r2,-30608
    111c:	180690fa 	slli	r3,r3,3
    1120:	10c5883a 	add	r2,r2,r3
    1124:	10800017 	ldw	r2,0(r2)
    1128:	e0fffd43 	ldbu	r3,-11(fp)
    112c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
    1130:	e0bffa17 	ldw	r2,-24(fp)
    1134:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
    1138:	d0a6f145 	stb	r2,-25659(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
    113c:	e0bffe03 	ldbu	r2,-8(fp)
    1140:	d0a6f105 	stb	r2,-25660(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    1144:	e0bffa17 	ldw	r2,-24(fp)
    1148:	10800003 	ldbu	r2,0(r2)
    114c:	10803fcc 	andi	r2,r2,255
    1150:	e0fffb17 	ldw	r3,-20(fp)
    1154:	1885883a 	add	r2,r3,r2
    1158:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
    115c:	e0bffb17 	ldw	r2,-20(fp)
    1160:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
    1164:	00005b06 	br	12d4 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
    1168:	e0bffa17 	ldw	r2,-24(fp)
    116c:	10800043 	ldbu	r2,1(r2)
    1170:	10803fcc 	andi	r2,r2,255
    1174:	10800160 	cmpeqi	r2,r2,5
    1178:	1000091e 	bne	r2,zero,11a0 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    117c:	e0bffa17 	ldw	r2,-24(fp)
    1180:	10800003 	ldbu	r2,0(r2)
    1184:	10803fcc 	andi	r2,r2,255
    1188:	e0fffb17 	ldw	r3,-20(fp)
    118c:	1885883a 	add	r2,r3,r2
    1190:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
    1194:	e0bffb17 	ldw	r2,-20(fp)
    1198:	e0bffa15 	stw	r2,-24(fp)
    119c:	00004d06 	br	12d4 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    11a0:	e0fffe03 	ldbu	r3,-8(fp)
    11a4:	008000b4 	movhi	r2,2
    11a8:	10a21c04 	addi	r2,r2,-30608
    11ac:	180690fa 	slli	r3,r3,3
    11b0:	10c5883a 	add	r2,r2,r3
    11b4:	10800017 	ldw	r2,0(r2)
    11b8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
    11bc:	e0fffa17 	ldw	r3,-24(fp)
    11c0:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    11c4:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    11c8:	e0fffe03 	ldbu	r3,-8(fp)
    11cc:	008000b4 	movhi	r2,2
    11d0:	10a21c04 	addi	r2,r2,-30608
    11d4:	180690fa 	slli	r3,r3,3
    11d8:	10c5883a 	add	r2,r2,r3
    11dc:	10800017 	ldw	r2,0(r2)
    11e0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
    11e4:	e0fffa17 	ldw	r3,-24(fp)
    11e8:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    11ec:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    11f0:	e0fffe03 	ldbu	r3,-8(fp)
    11f4:	008000b4 	movhi	r2,2
    11f8:	10a21c04 	addi	r2,r2,-30608
    11fc:	180690fa 	slli	r3,r3,3
    1200:	10c5883a 	add	r2,r2,r3
    1204:	10800017 	ldw	r2,0(r2)
    1208:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
    120c:	e0fffa17 	ldw	r3,-24(fp)
    1210:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    1214:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    1218:	e0fffe03 	ldbu	r3,-8(fp)
    121c:	008000b4 	movhi	r2,2
    1220:	10a21c04 	addi	r2,r2,-30608
    1224:	180690fa 	slli	r3,r3,3
    1228:	10c5883a 	add	r2,r2,r3
    122c:	10800017 	ldw	r2,0(r2)
    1230:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
    1234:	e0fffa17 	ldw	r3,-24(fp)
    1238:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    123c:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
    1240:	e0fffe03 	ldbu	r3,-8(fp)
    1244:	e0bffc43 	ldbu	r2,-15(fp)
    1248:	d8000415 	stw	zero,16(sp)
    124c:	d8000315 	stw	zero,12(sp)
    1250:	d8000215 	stw	zero,8(sp)
    1254:	d8000115 	stw	zero,4(sp)
    1258:	d8800015 	stw	r2,0(sp)
    125c:	01c00244 	movi	r7,9
    1260:	000d883a 	mov	r6,zero
    1264:	000b883a 	mov	r5,zero
    1268:	1809883a 	mov	r4,r3
    126c:	00020880 	call	2088 <XferCtrlReq>
    1270:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
    1274:	e0bffc03 	ldbu	r2,-16(fp)
    1278:	10000226 	beq	r2,zero,1284 <HIDMProbe+0x364>
							return (FALSE);
    127c:	0005883a 	mov	r2,zero
    1280:	00002406 	br	1314 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
    1284:	e0fffe03 	ldbu	r3,-8(fp)
    1288:	d0a6f143 	ldbu	r2,-25659(gp)
    128c:	10803fcc 	andi	r2,r2,255
    1290:	d8000415 	stw	zero,16(sp)
    1294:	d8000315 	stw	zero,12(sp)
    1298:	d8800215 	stw	r2,8(sp)
    129c:	d8000115 	stw	zero,4(sp)
    12a0:	d8000015 	stw	zero,0(sp)
    12a4:	01c002c4 	movi	r7,11
    12a8:	01800844 	movi	r6,33
    12ac:	000b883a 	mov	r5,zero
    12b0:	1809883a 	mov	r4,r3
    12b4:	00020880 	call	2088 <XferCtrlReq>
    12b8:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
    12bc:	e0bffc03 	ldbu	r2,-16(fp)
    12c0:	10000226 	beq	r2,zero,12cc <HIDMProbe+0x3ac>
							return (FALSE);
    12c4:	0005883a 	mov	r2,zero
    12c8:	00001206 	br	1314 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
    12cc:	00800044 	movi	r2,1
    12d0:	00001006 	br	1314 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
    12d4:	e0fff90b 	ldhu	r3,-28(fp)
    12d8:	008000b4 	movhi	r2,2
    12dc:	10a1dc04 	addi	r2,r2,-30864
    12e0:	1885883a 	add	r2,r3,r2
    12e4:	e0fffb17 	ldw	r3,-20(fp)
    12e8:	18bf9f36 	bltu	r3,r2,1168 <__alt_data_end+0xfc001168>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    12ec:	00000206 	br	12f8 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
    12f0:	0005883a 	mov	r2,zero
    12f4:	00000706 	br	1314 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
    12f8:	e0fff90b 	ldhu	r3,-28(fp)
    12fc:	008000b4 	movhi	r2,2
    1300:	10a1dc04 	addi	r2,r2,-30864
    1304:	1885883a 	add	r2,r3,r2
    1308:	e0fffb17 	ldw	r3,-20(fp)
    130c:	18bf4736 	bltu	r3,r2,102c <__alt_data_end+0xfc00102c>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
    1310:	0005883a 	mov	r2,zero
}
    1314:	e037883a 	mov	sp,fp
    1318:	dfc00117 	ldw	ra,4(sp)
    131c:	df000017 	ldw	fp,0(sp)
    1320:	dec00204 	addi	sp,sp,8
    1324:	f800283a 	ret

00001328 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
    1328:	defff204 	addi	sp,sp,-56
    132c:	dfc00d15 	stw	ra,52(sp)
    1330:	df000c15 	stw	fp,48(sp)
    1334:	df000c04 	addi	fp,sp,48
    1338:	2005883a 	mov	r2,r4
    133c:	e17fff15 	stw	r5,-4(fp)
    1340:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
    1344:	008000b4 	movhi	r2,2
    1348:	10a1dc04 	addi	r2,r2,-30864
    134c:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
    1350:	008000b4 	movhi	r2,2
    1354:	10a1dc04 	addi	r2,r2,-30864
    1358:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
    135c:	e0fffe03 	ldbu	r3,-8(fp)
    1360:	008000b4 	movhi	r2,2
    1364:	10a1dc04 	addi	r2,r2,-30864
    1368:	d8800415 	stw	r2,16(sp)
    136c:	00800244 	movi	r2,9
    1370:	d8800315 	stw	r2,12(sp)
    1374:	d8000215 	stw	zero,8(sp)
    1378:	00800084 	movi	r2,2
    137c:	d8800115 	stw	r2,4(sp)
    1380:	d8000015 	stw	zero,0(sp)
    1384:	01c00184 	movi	r7,6
    1388:	01802004 	movi	r6,128
    138c:	000b883a 	mov	r5,zero
    1390:	1809883a 	mov	r4,r3
    1394:	00020880 	call	2088 <XferCtrlReq>
    1398:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
    139c:	e0bffc03 	ldbu	r2,-16(fp)
    13a0:	10000226 	beq	r2,zero,13ac <HIDKProbe+0x84>
		return (FALSE);
    13a4:	0005883a 	mov	r2,zero
    13a8:	0000dc06 	br	171c <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
    13ac:	e0bffa17 	ldw	r2,-24(fp)
    13b0:	1080008b 	ldhu	r2,2(r2)
    13b4:	10bfffcc 	andi	r2,r2,65535
    13b8:	10804070 	cmpltui	r2,r2,257
    13bc:	1000031e 	bne	r2,zero,13cc <HIDKProbe+0xa4>
		total_length = 256;
    13c0:	00804004 	movi	r2,256
    13c4:	e0bff90d 	sth	r2,-28(fp)
    13c8:	00000306 	br	13d8 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
    13cc:	e0bffa17 	ldw	r2,-24(fp)
    13d0:	1080008b 	ldhu	r2,2(r2)
    13d4:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
    13d8:	e13ffe03 	ldbu	r4,-8(fp)
    13dc:	e0fff90b 	ldhu	r3,-28(fp)
    13e0:	008000b4 	movhi	r2,2
    13e4:	10a1dc04 	addi	r2,r2,-30864
    13e8:	d8800415 	stw	r2,16(sp)
    13ec:	d8c00315 	stw	r3,12(sp)
    13f0:	d8000215 	stw	zero,8(sp)
    13f4:	00800084 	movi	r2,2
    13f8:	d8800115 	stw	r2,4(sp)
    13fc:	d8000015 	stw	zero,0(sp)
    1400:	01c00184 	movi	r7,6
    1404:	01802004 	movi	r6,128
    1408:	000b883a 	mov	r5,zero
    140c:	00020880 	call	2088 <XferCtrlReq>
    1410:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
    1414:	e0bffc03 	ldbu	r2,-16(fp)
    1418:	10000226 	beq	r2,zero,1424 <HIDKProbe+0xfc>
		return (FALSE);
    141c:	0005883a 	mov	r2,zero
    1420:	0000be06 	br	171c <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
    1424:	e0bffa17 	ldw	r2,-24(fp)
    1428:	10800143 	ldbu	r2,5(r2)
    142c:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
    1430:	0000b306 	br	1700 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
    1434:	e0bffa17 	ldw	r2,-24(fp)
    1438:	10800043 	ldbu	r2,1(r2)
    143c:	10803fcc 	andi	r2,r2,255
    1440:	10800120 	cmpeqi	r2,r2,4
    1444:	1000091e 	bne	r2,zero,146c <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    1448:	e0bffa17 	ldw	r2,-24(fp)
    144c:	10800003 	ldbu	r2,0(r2)
    1450:	10803fcc 	andi	r2,r2,255
    1454:	e0fffb17 	ldw	r3,-20(fp)
    1458:	1885883a 	add	r2,r3,r2
    145c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
    1460:	e0bffb17 	ldw	r2,-20(fp)
    1464:	e0bffa15 	stw	r2,-24(fp)
    1468:	0000a506 	br	1700 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
    146c:	e0bffa17 	ldw	r2,-24(fp)
    1470:	10800143 	ldbu	r2,5(r2)
    1474:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
    1478:	e0bffa17 	ldw	r2,-24(fp)
    147c:	10800183 	ldbu	r2,6(r2)
    1480:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
    1484:	e0bffa17 	ldw	r2,-24(fp)
    1488:	108001c3 	ldbu	r2,7(r2)
    148c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    1490:	e0bffc83 	ldbu	r2,-14(fp)
    1494:	108000d8 	cmpnei	r2,r2,3
    1498:	1000971e 	bne	r2,zero,16f8 <HIDKProbe+0x3d0>
    149c:	e0bffcc3 	ldbu	r2,-13(fp)
    14a0:	10800058 	cmpnei	r2,r2,1
    14a4:	1000941e 	bne	r2,zero,16f8 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
    14a8:	e0bffd03 	ldbu	r2,-12(fp)
    14ac:	10800058 	cmpnei	r2,r2,1
    14b0:	1000911e 	bne	r2,zero,16f8 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
    14b4:	e0fffe03 	ldbu	r3,-8(fp)
    14b8:	008000b4 	movhi	r2,2
    14bc:	10a21c04 	addi	r2,r2,-30608
    14c0:	180690fa 	slli	r3,r3,3
    14c4:	10c5883a 	add	r2,r2,r3
    14c8:	10800104 	addi	r2,r2,4
    14cc:	00c00044 	movi	r3,1
    14d0:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
    14d4:	e0fffe03 	ldbu	r3,-8(fp)
    14d8:	008000b4 	movhi	r2,2
    14dc:	10a21c04 	addi	r2,r2,-30608
    14e0:	180690fa 	slli	r3,r3,3
    14e4:	10c5883a 	add	r2,r2,r3
    14e8:	10800017 	ldw	r2,0(r2)
    14ec:	1080008b 	ldhu	r2,2(r2)
    14f0:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
    14f4:	00017300 	call	1730 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
    14f8:	e0fffe03 	ldbu	r3,-8(fp)
    14fc:	008000b4 	movhi	r2,2
    1500:	10a21c04 	addi	r2,r2,-30608
    1504:	180690fa 	slli	r3,r3,3
    1508:	10c7883a 	add	r3,r2,r3
    150c:	008000b4 	movhi	r2,2
    1510:	10a1c804 	addi	r2,r2,-30944
    1514:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
    1518:	e0fffe03 	ldbu	r3,-8(fp)
    151c:	008000b4 	movhi	r2,2
    1520:	10a21c04 	addi	r2,r2,-30608
    1524:	180690fa 	slli	r3,r3,3
    1528:	10c5883a 	add	r2,r2,r3
    152c:	10800017 	ldw	r2,0(r2)
    1530:	e0fffd43 	ldbu	r3,-11(fp)
    1534:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
    1538:	e0bffa17 	ldw	r2,-24(fp)
    153c:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
    1540:	d0a6f145 	stb	r2,-25659(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
    1544:	e0bffe03 	ldbu	r2,-8(fp)
    1548:	d0a6f105 	stb	r2,-25660(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
    154c:	e0bffa17 	ldw	r2,-24(fp)
    1550:	10800003 	ldbu	r2,0(r2)
    1554:	10803fcc 	andi	r2,r2,255
    1558:	e0fffb17 	ldw	r3,-20(fp)
    155c:	1885883a 	add	r2,r3,r2
    1560:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
    1564:	e0bffb17 	ldw	r2,-20(fp)
    1568:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
    156c:	00005b06 	br	16dc <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
    1570:	e0bffa17 	ldw	r2,-24(fp)
    1574:	10800043 	ldbu	r2,1(r2)
    1578:	10803fcc 	andi	r2,r2,255
    157c:	10800160 	cmpeqi	r2,r2,5
    1580:	1000091e 	bne	r2,zero,15a8 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
    1584:	e0bffa17 	ldw	r2,-24(fp)
    1588:	10800003 	ldbu	r2,0(r2)
    158c:	10803fcc 	andi	r2,r2,255
    1590:	e0fffb17 	ldw	r3,-20(fp)
    1594:	1885883a 	add	r2,r3,r2
    1598:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
    159c:	e0bffb17 	ldw	r2,-20(fp)
    15a0:	e0bffa15 	stw	r2,-24(fp)
    15a4:	00004d06 	br	16dc <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    15a8:	e0fffe03 	ldbu	r3,-8(fp)
    15ac:	008000b4 	movhi	r2,2
    15b0:	10a21c04 	addi	r2,r2,-30608
    15b4:	180690fa 	slli	r3,r3,3
    15b8:	10c5883a 	add	r2,r2,r3
    15bc:	10800017 	ldw	r2,0(r2)
    15c0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
    15c4:	e0fffa17 	ldw	r3,-24(fp)
    15c8:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
    15cc:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    15d0:	e0fffe03 	ldbu	r3,-8(fp)
    15d4:	008000b4 	movhi	r2,2
    15d8:	10a21c04 	addi	r2,r2,-30608
    15dc:	180690fa 	slli	r3,r3,3
    15e0:	10c5883a 	add	r2,r2,r3
    15e4:	10800017 	ldw	r2,0(r2)
    15e8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
    15ec:	e0fffa17 	ldw	r3,-24(fp)
    15f0:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
    15f4:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    15f8:	e0fffe03 	ldbu	r3,-8(fp)
    15fc:	008000b4 	movhi	r2,2
    1600:	10a21c04 	addi	r2,r2,-30608
    1604:	180690fa 	slli	r3,r3,3
    1608:	10c5883a 	add	r2,r2,r3
    160c:	10800017 	ldw	r2,0(r2)
    1610:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
    1614:	e0fffa17 	ldw	r3,-24(fp)
    1618:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
    161c:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    1620:	e0fffe03 	ldbu	r3,-8(fp)
    1624:	008000b4 	movhi	r2,2
    1628:	10a21c04 	addi	r2,r2,-30608
    162c:	180690fa 	slli	r3,r3,3
    1630:	10c5883a 	add	r2,r2,r3
    1634:	10800017 	ldw	r2,0(r2)
    1638:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
    163c:	e0fffa17 	ldw	r3,-24(fp)
    1640:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
    1644:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
    1648:	e0fffe03 	ldbu	r3,-8(fp)
    164c:	e0bffc43 	ldbu	r2,-15(fp)
    1650:	d8000415 	stw	zero,16(sp)
    1654:	d8000315 	stw	zero,12(sp)
    1658:	d8000215 	stw	zero,8(sp)
    165c:	d8000115 	stw	zero,4(sp)
    1660:	d8800015 	stw	r2,0(sp)
    1664:	01c00244 	movi	r7,9
    1668:	000d883a 	mov	r6,zero
    166c:	000b883a 	mov	r5,zero
    1670:	1809883a 	mov	r4,r3
    1674:	00020880 	call	2088 <XferCtrlReq>
    1678:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
    167c:	e0bffc03 	ldbu	r2,-16(fp)
    1680:	10000226 	beq	r2,zero,168c <HIDKProbe+0x364>
							return (FALSE);
    1684:	0005883a 	mov	r2,zero
    1688:	00002406 	br	171c <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
    168c:	e0fffe03 	ldbu	r3,-8(fp)
    1690:	d0a6f143 	ldbu	r2,-25659(gp)
    1694:	10803fcc 	andi	r2,r2,255
    1698:	d8000415 	stw	zero,16(sp)
    169c:	d8000315 	stw	zero,12(sp)
    16a0:	d8800215 	stw	r2,8(sp)
    16a4:	d8000115 	stw	zero,4(sp)
    16a8:	d8000015 	stw	zero,0(sp)
    16ac:	01c002c4 	movi	r7,11
    16b0:	01800844 	movi	r6,33
    16b4:	000b883a 	mov	r5,zero
    16b8:	1809883a 	mov	r4,r3
    16bc:	00020880 	call	2088 <XferCtrlReq>
    16c0:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
    16c4:	e0bffc03 	ldbu	r2,-16(fp)
    16c8:	10000226 	beq	r2,zero,16d4 <HIDKProbe+0x3ac>
							return (FALSE);
    16cc:	0005883a 	mov	r2,zero
    16d0:	00001206 	br	171c <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
    16d4:	00800044 	movi	r2,1
    16d8:	00001006 	br	171c <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
    16dc:	e0fff90b 	ldhu	r3,-28(fp)
    16e0:	008000b4 	movhi	r2,2
    16e4:	10a1dc04 	addi	r2,r2,-30864
    16e8:	1885883a 	add	r2,r3,r2
    16ec:	e0fffb17 	ldw	r3,-20(fp)
    16f0:	18bf9f36 	bltu	r3,r2,1570 <__alt_data_end+0xfc001570>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
    16f4:	00000206 	br	1700 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
    16f8:	0005883a 	mov	r2,zero
    16fc:	00000706 	br	171c <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
    1700:	e0fff90b 	ldhu	r3,-28(fp)
    1704:	008000b4 	movhi	r2,2
    1708:	10a1dc04 	addi	r2,r2,-30864
    170c:	1885883a 	add	r2,r3,r2
    1710:	e0fffb17 	ldw	r3,-20(fp)
    1714:	18bf4736 	bltu	r3,r2,1434 <__alt_data_end+0xfc001434>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
    1718:	0005883a 	mov	r2,zero
}
    171c:	e037883a 	mov	sp,fp
    1720:	dfc00117 	ldw	ra,4(sp)
    1724:	df000017 	ldw	fp,0(sp)
    1728:	dec00204 	addi	sp,sp,8
    172c:	f800283a 	ret

00001730 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
    1730:	deffff04 	addi	sp,sp,-4
    1734:	df000015 	stw	fp,0(sp)
    1738:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
    173c:	008000b4 	movhi	r2,2
    1740:	10a1c804 	addi	r2,r2,-30944
    1744:	00c01004 	movi	r3,64
    1748:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
    174c:	008000b4 	movhi	r2,2
    1750:	10a1c804 	addi	r2,r2,-30944
    1754:	00c00404 	movi	r3,16
    1758:	10c00385 	stb	r3,14(r2)
}
    175c:	0001883a 	nop
    1760:	e037883a 	mov	sp,fp
    1764:	df000017 	ldw	fp,0(sp)
    1768:	dec00104 	addi	sp,sp,4
    176c:	f800283a 	ret

00001770 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
    1770:	defffb04 	addi	sp,sp,-20
    1774:	dfc00415 	stw	ra,16(sp)
    1778:	df000315 	stw	fp,12(sp)
    177c:	df000304 	addi	fp,sp,12
    1780:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
    1784:	d0a6f103 	ldbu	r2,-25660(gp)
    1788:	10803fcc 	andi	r2,r2,255
    178c:	100b883a 	mov	r5,r2
    1790:	01003804 	movi	r4,224
    1794:	000194c0 	call	194c <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    1798:	d0a6f103 	ldbu	r2,-25660(gp)
    179c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
    17a0:	d0a6f103 	ldbu	r2,-25660(gp)
    17a4:	10c03fcc 	andi	r3,r2,255
    17a8:	008000b4 	movhi	r2,2
    17ac:	10a21c04 	addi	r2,r2,-30608
    17b0:	180690fa 	slli	r3,r3,3
    17b4:	10c5883a 	add	r2,r2,r3
    17b8:	10800017 	ldw	r2,0(r2)
    17bc:	10800204 	addi	r2,r2,8
    17c0:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    17c4:	10803fcc 	andi	r2,r2,255
    17c8:	d8800015 	stw	r2,0(sp)
    17cc:	e1ffff17 	ldw	r7,-4(fp)
    17d0:	01800204 	movi	r6,8
    17d4:	01400044 	movi	r5,1
    17d8:	00024ac0 	call	24ac <XferInTransfer>
    17dc:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
    17e0:	e0bffe03 	ldbu	r2,-8(fp)
}
    17e4:	e037883a 	mov	sp,fp
    17e8:	dfc00117 	ldw	ra,4(sp)
    17ec:	df000017 	ldw	fp,0(sp)
    17f0:	dec00204 	addi	sp,sp,8
    17f4:	f800283a 	ret

000017f8 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
    17f8:	defffb04 	addi	sp,sp,-20
    17fc:	dfc00415 	stw	ra,16(sp)
    1800:	df000315 	stw	fp,12(sp)
    1804:	df000304 	addi	fp,sp,12
    1808:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
    180c:	d0a6f103 	ldbu	r2,-25660(gp)
    1810:	10803fcc 	andi	r2,r2,255
    1814:	100b883a 	mov	r5,r2
    1818:	01003804 	movi	r4,224
    181c:	000194c0 	call	194c <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    1820:	d0a6f103 	ldbu	r2,-25660(gp)
    1824:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
    1828:	d0a6f103 	ldbu	r2,-25660(gp)
    182c:	10c03fcc 	andi	r3,r2,255
    1830:	008000b4 	movhi	r2,2
    1834:	10a21c04 	addi	r2,r2,-30608
    1838:	180690fa 	slli	r3,r3,3
    183c:	10c5883a 	add	r2,r2,r3
    1840:	10800017 	ldw	r2,0(r2)
    1844:	10800204 	addi	r2,r2,8
    1848:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
    184c:	10803fcc 	andi	r2,r2,255
    1850:	d8800015 	stw	r2,0(sp)
    1854:	e1ffff17 	ldw	r7,-4(fp)
    1858:	01800204 	movi	r6,8
    185c:	01400044 	movi	r5,1
    1860:	00024ac0 	call	24ac <XferInTransfer>
    1864:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
    1868:	e0bffe03 	ldbu	r2,-8(fp)
}
    186c:	e037883a 	mov	sp,fp
    1870:	dfc00117 	ldw	ra,4(sp)
    1874:	df000017 	ldw	fp,0(sp)
    1878:	dec00204 	addi	sp,sp,8
    187c:	f800283a 	ret

00001880 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
    1880:	defffb04 	addi	sp,sp,-20
    1884:	df000415 	stw	fp,16(sp)
    1888:	df000404 	addi	fp,sp,16
    188c:	2007883a 	mov	r3,r4
    1890:	2805883a 	mov	r2,r5
    1894:	e1bffe15 	stw	r6,-8(fp)
    1898:	e1ffff15 	stw	r7,-4(fp)
    189c:	e0fffc05 	stb	r3,-16(fp)
    18a0:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
    18a4:	0005883a 	mov	r2,zero
}
    18a8:	e037883a 	mov	sp,fp
    18ac:	df000017 	ldw	fp,0(sp)
    18b0:	dec00104 	addi	sp,sp,4
    18b4:	f800283a 	ret

000018b8 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
    18b8:	defffb04 	addi	sp,sp,-20
    18bc:	df000415 	stw	fp,16(sp)
    18c0:	df000404 	addi	fp,sp,16
    18c4:	2007883a 	mov	r3,r4
    18c8:	2805883a 	mov	r2,r5
    18cc:	e1bffe15 	stw	r6,-8(fp)
    18d0:	e1ffff15 	stw	r7,-4(fp)
    18d4:	e0fffc05 	stb	r3,-16(fp)
    18d8:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
    18dc:	0005883a 	mov	r2,zero
}
    18e0:	e037883a 	mov	sp,fp
    18e4:	df000017 	ldw	fp,0(sp)
    18e8:	dec00104 	addi	sp,sp,4
    18ec:	f800283a 	ret

000018f0 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
    18f0:	defffc04 	addi	sp,sp,-16
    18f4:	df000315 	stw	fp,12(sp)
    18f8:	df000304 	addi	fp,sp,12
    18fc:	2807883a 	mov	r3,r5
    1900:	3005883a 	mov	r2,r6
    1904:	e13ffd05 	stb	r4,-12(fp)
    1908:	e0fffe05 	stb	r3,-8(fp)
    190c:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
    1910:	0001883a 	nop
    1914:	e037883a 	mov	sp,fp
    1918:	df000017 	ldw	fp,0(sp)
    191c:	dec00104 	addi	sp,sp,4
    1920:	f800283a 	ret

00001924 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
    1924:	defffe04 	addi	sp,sp,-8
    1928:	df000115 	stw	fp,4(sp)
    192c:	df000104 	addi	fp,sp,4
    1930:	2005883a 	mov	r2,r4
    1934:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
    1938:	0001883a 	nop
    193c:	e037883a 	mov	sp,fp
    1940:	df000017 	ldw	fp,0(sp)
    1944:	dec00104 	addi	sp,sp,4
    1948:	f800283a 	ret

0000194c <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
    194c:	defff804 	addi	sp,sp,-32
    1950:	dfc00715 	stw	ra,28(sp)
    1954:	df000615 	stw	fp,24(sp)
    1958:	df000604 	addi	fp,sp,24
    195c:	2007883a 	mov	r3,r4
    1960:	2805883a 	mov	r2,r5
    1964:	e0fffe05 	stb	r3,-8(fp)
    1968:	e0bfff05 	stb	r2,-4(fp)
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 write_p[2] = {reg + 2, val};
    196c:	e0bffe03 	ldbu	r2,-8(fp)
    1970:	10800084 	addi	r2,r2,2
    1974:	e0bffd05 	stb	r2,-12(fp)
    1978:	e0bfff03 	ldbu	r2,-4(fp)
    197c:	e0bffd45 	stb	r2,-11(fp)
	if(alt_avalon_spi_command(SPI_0_BASE,0,2,write_p,0,0,0) < 0){
    1980:	d8000215 	stw	zero,8(sp)
    1984:	d8000115 	stw	zero,4(sp)
    1988:	d8000015 	stw	zero,0(sp)
    198c:	e1fffd04 	addi	r7,fp,-12
    1990:	01800084 	movi	r6,2
    1994:	000b883a 	mov	r5,zero
    1998:	01010034 	movhi	r4,1024
    199c:	21044804 	addi	r4,r4,4384
    19a0:	00131280 	call	13128 <alt_avalon_spi_command>
    19a4:	1000040e 	bge	r2,zero,19b8 <MAXreg_wr+0x6c>
		printf("ERROR!");
    19a8:	01000074 	movhi	r4,1
    19ac:	21130a04 	addi	r4,r4,19496
    19b0:	000312c0 	call	312c <printf>
	}
	return;
    19b4:	0001883a 	nop
    19b8:	0001883a 	nop
}
    19bc:	e037883a 	mov	sp,fp
    19c0:	dfc00117 	ldw	ra,4(sp)
    19c4:	df000017 	ldw	fp,0(sp)
    19c8:	dec00204 	addi	sp,sp,8
    19cc:	f800283a 	ret

000019d0 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
    19d0:	defff404 	addi	sp,sp,-48
    19d4:	dfc00b15 	stw	ra,44(sp)
    19d8:	df000a15 	stw	fp,40(sp)
    19dc:	dc000915 	stw	r16,36(sp)
    19e0:	df000a04 	addi	fp,sp,40
    19e4:	201b883a 	mov	r13,r4
    19e8:	2809883a 	mov	r4,r5
    19ec:	e1bffe15 	stw	r6,-8(fp)
    19f0:	e37ffc05 	stb	r13,-16(fp)
    19f4:	e13ffd05 	stb	r4,-12(fp)
    19f8:	d809883a 	mov	r4,sp
    19fc:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 write_p[nbytes+1];
    1a00:	e13ffd03 	ldbu	r4,-12(fp)
    1a04:	21000044 	addi	r4,r4,1
    1a08:	217fffc4 	addi	r5,r4,-1
    1a0c:	e17ffa15 	stw	r5,-24(fp)
    1a10:	200b883a 	mov	r5,r4
    1a14:	2817883a 	mov	r11,r5
    1a18:	0019883a 	mov	r12,zero
    1a1c:	580ad77a 	srli	r5,r11,29
    1a20:	601090fa 	slli	r8,r12,3
    1a24:	2a10b03a 	or	r8,r5,r8
    1a28:	580e90fa 	slli	r7,r11,3
    1a2c:	200b883a 	mov	r5,r4
    1a30:	2813883a 	mov	r9,r5
    1a34:	0015883a 	mov	r10,zero
    1a38:	480ad77a 	srli	r5,r9,29
    1a3c:	500690fa 	slli	r3,r10,3
    1a40:	28c6b03a 	or	r3,r5,r3
    1a44:	480490fa 	slli	r2,r9,3
    1a48:	2005883a 	mov	r2,r4
    1a4c:	108000c4 	addi	r2,r2,3
    1a50:	1004d0ba 	srli	r2,r2,2
    1a54:	1085883a 	add	r2,r2,r2
    1a58:	1085883a 	add	r2,r2,r2
    1a5c:	d8b7c83a 	sub	sp,sp,r2
    1a60:	d8800304 	addi	r2,sp,12
    1a64:	1005883a 	mov	r2,r2
    1a68:	e0bffb15 	stw	r2,-20(fp)
	write_p[0] = reg + 2;
    1a6c:	e0bffc03 	ldbu	r2,-16(fp)
    1a70:	10800084 	addi	r2,r2,2
    1a74:	1007883a 	mov	r3,r2
    1a78:	e0bffb17 	ldw	r2,-20(fp)
    1a7c:	10c00005 	stb	r3,0(r2)
	int i = 0;
    1a80:	e03ff915 	stw	zero,-28(fp)
	for (i = 0;i < nbytes;i++) {
    1a84:	e03ff915 	stw	zero,-28(fp)
    1a88:	00000c06 	br	1abc <MAXbytes_wr+0xec>
		write_p[i+1] = data[i];
    1a8c:	e0bff917 	ldw	r2,-28(fp)
    1a90:	10800044 	addi	r2,r2,1
    1a94:	e0fff917 	ldw	r3,-28(fp)
    1a98:	e13ffe17 	ldw	r4,-8(fp)
    1a9c:	20c7883a 	add	r3,r4,r3
    1aa0:	18c00003 	ldbu	r3,0(r3)
    1aa4:	e13ffb17 	ldw	r4,-20(fp)
    1aa8:	2085883a 	add	r2,r4,r2
    1aac:	10c00005 	stb	r3,0(r2)
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 write_p[nbytes+1];
	write_p[0] = reg + 2;
	int i = 0;
	for (i = 0;i < nbytes;i++) {
    1ab0:	e0bff917 	ldw	r2,-28(fp)
    1ab4:	10800044 	addi	r2,r2,1
    1ab8:	e0bff915 	stw	r2,-28(fp)
    1abc:	e0bffd03 	ldbu	r2,-12(fp)
    1ac0:	e0fff917 	ldw	r3,-28(fp)
    1ac4:	18bff116 	blt	r3,r2,1a8c <__alt_data_end+0xfc001a8c>
		write_p[i+1] = data[i];
	}
	if(alt_avalon_spi_command(SPI_0_BASE,0,nbytes+1,write_p,0,0,0) < 0){
    1ac8:	e0bffd03 	ldbu	r2,-12(fp)
    1acc:	10800044 	addi	r2,r2,1
    1ad0:	1007883a 	mov	r3,r2
    1ad4:	e0bffb17 	ldw	r2,-20(fp)
    1ad8:	d8000215 	stw	zero,8(sp)
    1adc:	d8000115 	stw	zero,4(sp)
    1ae0:	d8000015 	stw	zero,0(sp)
    1ae4:	100f883a 	mov	r7,r2
    1ae8:	180d883a 	mov	r6,r3
    1aec:	000b883a 	mov	r5,zero
    1af0:	01010034 	movhi	r4,1024
    1af4:	21044804 	addi	r4,r4,4384
    1af8:	00131280 	call	13128 <alt_avalon_spi_command>
    1afc:	1000030e 	bge	r2,zero,1b0c <MAXbytes_wr+0x13c>
		printf("ERROR!");
    1b00:	01000074 	movhi	r4,1
    1b04:	21130a04 	addi	r4,r4,19496
    1b08:	000312c0 	call	312c <printf>
	}
	return (data+nbytes);
    1b0c:	e0bffd03 	ldbu	r2,-12(fp)
    1b10:	e0fffe17 	ldw	r3,-8(fp)
    1b14:	1885883a 	add	r2,r3,r2
    1b18:	8037883a 	mov	sp,r16
}
    1b1c:	e6ffff04 	addi	sp,fp,-4
    1b20:	dfc00217 	ldw	ra,8(sp)
    1b24:	df000117 	ldw	fp,4(sp)
    1b28:	dc000017 	ldw	r16,0(sp)
    1b2c:	dec00304 	addi	sp,sp,12
    1b30:	f800283a 	ret

00001b34 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
    1b34:	defff904 	addi	sp,sp,-28
    1b38:	dfc00615 	stw	ra,24(sp)
    1b3c:	df000515 	stw	fp,20(sp)
    1b40:	df000504 	addi	fp,sp,20
    1b44:	2005883a 	mov	r2,r4
    1b48:	e0bfff05 	stb	r2,-4(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	alt_u8 write_p[1] = {reg};
    1b4c:	e0bfff03 	ldbu	r2,-4(fp)
    1b50:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 read_p[1] = {0x00};
    1b54:	e03ffe45 	stb	zero,-7(fp)
	if(alt_avalon_spi_command(SPI_0_BASE,0,1,write_p,1,read_p,0) < 0){
    1b58:	d8000215 	stw	zero,8(sp)
    1b5c:	e0bffe44 	addi	r2,fp,-7
    1b60:	d8800115 	stw	r2,4(sp)
    1b64:	00800044 	movi	r2,1
    1b68:	d8800015 	stw	r2,0(sp)
    1b6c:	e1fffe04 	addi	r7,fp,-8
    1b70:	01800044 	movi	r6,1
    1b74:	000b883a 	mov	r5,zero
    1b78:	01010034 	movhi	r4,1024
    1b7c:	21044804 	addi	r4,r4,4384
    1b80:	00131280 	call	13128 <alt_avalon_spi_command>
    1b84:	1000030e 	bge	r2,zero,1b94 <MAXreg_rd+0x60>
		printf("ERROR!");
    1b88:	01000074 	movhi	r4,1
    1b8c:	21130a04 	addi	r4,r4,19496
    1b90:	000312c0 	call	312c <printf>
	}
	return read_p[0];
    1b94:	e0bffe43 	ldbu	r2,-7(fp)
}
    1b98:	e037883a 	mov	sp,fp
    1b9c:	dfc00117 	ldw	ra,4(sp)
    1ba0:	df000017 	ldw	fp,0(sp)
    1ba4:	dec00204 	addi	sp,sp,8
    1ba8:	f800283a 	ret

00001bac <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
    1bac:	defff704 	addi	sp,sp,-36
    1bb0:	dfc00815 	stw	ra,32(sp)
    1bb4:	df000715 	stw	fp,28(sp)
    1bb8:	df000704 	addi	fp,sp,28
    1bbc:	2007883a 	mov	r3,r4
    1bc0:	2805883a 	mov	r2,r5
    1bc4:	e1bfff15 	stw	r6,-4(fp)
    1bc8:	e0fffd05 	stb	r3,-12(fp)
    1bcc:	e0bffe05 	stb	r2,-8(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 write_p[1] = {reg};
    1bd0:	e0bffd03 	ldbu	r2,-12(fp)
    1bd4:	e0bffc05 	stb	r2,-16(fp)
	if(alt_avalon_spi_command(SPI_0_BASE,0,1,write_p,nbytes,data,0) < 0) {
    1bd8:	e0bffe03 	ldbu	r2,-8(fp)
    1bdc:	d8000215 	stw	zero,8(sp)
    1be0:	e0ffff17 	ldw	r3,-4(fp)
    1be4:	d8c00115 	stw	r3,4(sp)
    1be8:	d8800015 	stw	r2,0(sp)
    1bec:	e1fffc04 	addi	r7,fp,-16
    1bf0:	01800044 	movi	r6,1
    1bf4:	000b883a 	mov	r5,zero
    1bf8:	01010034 	movhi	r4,1024
    1bfc:	21044804 	addi	r4,r4,4384
    1c00:	00131280 	call	13128 <alt_avalon_spi_command>
    1c04:	1000030e 	bge	r2,zero,1c14 <MAXbytes_rd+0x68>
		printf("ERROR!");
    1c08:	01000074 	movhi	r4,1
    1c0c:	21130a04 	addi	r4,r4,19496
    1c10:	000312c0 	call	312c <printf>
	}
	return (data+nbytes);
    1c14:	e0bffe03 	ldbu	r2,-8(fp)
    1c18:	e0ffff17 	ldw	r3,-4(fp)
    1c1c:	1885883a 	add	r2,r3,r2
}
    1c20:	e037883a 	mov	sp,fp
    1c24:	dfc00117 	ldw	ra,4(sp)
    1c28:	df000017 	ldw	fp,0(sp)
    1c2c:	dec00204 	addi	sp,sp,8
    1c30:	f800283a 	ret

00001c34 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
    1c34:	defffd04 	addi	sp,sp,-12
    1c38:	dfc00215 	stw	ra,8(sp)
    1c3c:	df000115 	stw	fp,4(sp)
    1c40:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    1c44:	0007883a 	mov	r3,zero
    1c48:	00810034 	movhi	r2,1024
    1c4c:	10847404 	addi	r2,r2,4560
    1c50:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    1c54:	010003f4 	movhi	r4,15
    1c58:	21109004 	addi	r4,r4,16960
    1c5c:	001085c0 	call	1085c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    1c60:	00c00044 	movi	r3,1
    1c64:	00810034 	movhi	r2,1024
    1c68:	10847404 	addi	r2,r2,4560
    1c6c:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
    1c70:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
    1c74:	01400804 	movi	r5,32
    1c78:	01001e04 	movi	r4,120
    1c7c:	000194c0 	call	194c <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
    1c80:	000b883a 	mov	r5,zero
    1c84:	01001e04 	movi	r4,120
    1c88:	000194c0 	call	194c <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
    1c8c:	00000806 	br	1cb0 <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
    1c90:	e0bfff03 	ldbu	r2,-4(fp)
    1c94:	10800044 	addi	r2,r2,1
    1c98:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
    1c9c:	e0bfff03 	ldbu	r2,-4(fp)
    1ca0:	1000031e 	bne	r2,zero,1cb0 <MAX3421E_reset+0x7c>
			printf("reset timeout!");
    1ca4:	01000074 	movhi	r4,1
    1ca8:	21130c04 	addi	r4,r4,19504
    1cac:	000312c0 	call	312c <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
    1cb0:	01001a04 	movi	r4,104
    1cb4:	0001b340 	call	1b34 <MAXreg_rd>
    1cb8:	10803fcc 	andi	r2,r2,255
    1cbc:	1080004c 	andi	r2,r2,1
    1cc0:	103ff326 	beq	r2,zero,1c90 <__alt_data_end+0xfc001c90>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
    1cc4:	0001883a 	nop
    1cc8:	e037883a 	mov	sp,fp
    1ccc:	dfc00117 	ldw	ra,4(sp)
    1cd0:	df000017 	ldw	fp,0(sp)
    1cd4:	dec00204 	addi	sp,sp,8
    1cd8:	f800283a 	ret

00001cdc <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
    1cdc:	defffe04 	addi	sp,sp,-8
    1ce0:	df000115 	stw	fp,4(sp)
    1ce4:	df000104 	addi	fp,sp,4
    1ce8:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
    1cec:	00800044 	movi	r2,1
}
    1cf0:	e037883a 	mov	sp,fp
    1cf4:	df000017 	ldw	fp,0(sp)
    1cf8:	dec00104 	addi	sp,sp,4
    1cfc:	f800283a 	ret

00001d00 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
    1d00:	defffd04 	addi	sp,sp,-12
    1d04:	dfc00215 	stw	ra,8(sp)
    1d08:	df000115 	stw	fp,4(sp)
    1d0c:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
    1d10:	01003e04 	movi	r4,248
    1d14:	0001b340 	call	1b34 <MAXreg_rd>
    1d18:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
    1d1c:	e0ffff03 	ldbu	r3,-4(fp)
    1d20:	00bff004 	movi	r2,-64
    1d24:	1884703a 	and	r2,r3,r2
    1d28:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
    1d2c:	e0bfff03 	ldbu	r2,-4(fp)
    1d30:	10c01020 	cmpeqi	r3,r2,64
    1d34:	1800221e 	bne	r3,zero,1dc0 <MAX_busprobe+0xc0>
    1d38:	10c01048 	cmpgei	r3,r2,65
    1d3c:	1800021e 	bne	r3,zero,1d48 <MAX_busprobe+0x48>
    1d40:	10003b26 	beq	r2,zero,1e30 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
    1d44:	00004a06 	br	1e70 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
    1d48:	10c02020 	cmpeqi	r3,r2,128
    1d4c:	1800031e 	bne	r3,zero,1d5c <MAX_busprobe+0x5c>
    1d50:	10803020 	cmpeqi	r2,r2,192
    1d54:	1000331e 	bne	r2,zero,1e24 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
    1d58:	00004506 	br	1e70 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
    1d5c:	d0a00303 	ldbu	r2,-32756(gp)
    1d60:	10803fcc 	andi	r2,r2,255
    1d64:	108004e0 	cmpeqi	r2,r2,19
    1d68:	10003e1e 	bne	r2,zero,1e64 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
    1d6c:	01003604 	movi	r4,216
    1d70:	0001b340 	call	1b34 <MAXreg_rd>
    1d74:	10803fcc 	andi	r2,r2,255
    1d78:	1080008c 	andi	r2,r2,2
    1d7c:	1000071e 	bne	r2,zero,1d9c <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
    1d80:	01403244 	movi	r5,201
    1d84:	01003604 	movi	r4,216
    1d88:	000194c0 	call	194c <MAXreg_wr>
				printf("Starting in full speed\n");
    1d8c:	01000074 	movhi	r4,1
    1d90:	21131004 	addi	r4,r4,19520
    1d94:	00032280 	call	3228 <puts>
    1d98:	00000606 	br	1db4 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
    1d9c:	014032c4 	movi	r5,203
    1da0:	01003604 	movi	r4,216
    1da4:	000194c0 	call	194c <MAXreg_wr>
				printf("Starting in low speed\n");
    1da8:	01000074 	movhi	r4,1
    1dac:	21131604 	addi	r4,r4,19544
    1db0:	00032280 	call	3228 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
    1db4:	00800404 	movi	r2,16
    1db8:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
    1dbc:	00002906 	br	1e64 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
    1dc0:	d0a00303 	ldbu	r2,-32756(gp)
    1dc4:	10803fcc 	andi	r2,r2,255
    1dc8:	108004e0 	cmpeqi	r2,r2,19
    1dcc:	1000271e 	bne	r2,zero,1e6c <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
    1dd0:	01003604 	movi	r4,216
    1dd4:	0001b340 	call	1b34 <MAXreg_rd>
    1dd8:	10803fcc 	andi	r2,r2,255
    1ddc:	1080008c 	andi	r2,r2,2
    1de0:	1000071e 	bne	r2,zero,1e00 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
    1de4:	014032c4 	movi	r5,203
    1de8:	01003604 	movi	r4,216
    1dec:	000194c0 	call	194c <MAXreg_wr>
				printf("Starting in low speed\n");
    1df0:	01000074 	movhi	r4,1
    1df4:	21131604 	addi	r4,r4,19544
    1df8:	00032280 	call	3228 <puts>
    1dfc:	00000606 	br	1e18 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
    1e00:	01403244 	movi	r5,201
    1e04:	01003604 	movi	r4,216
    1e08:	000194c0 	call	194c <MAXreg_wr>
				printf("Starting in full speed\n");
    1e0c:	01000074 	movhi	r4,1
    1e10:	21131004 	addi	r4,r4,19520
    1e14:	00032280 	call	3228 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
    1e18:	00800404 	movi	r2,16
    1e1c:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
    1e20:	00001206 	br	1e6c <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
    1e24:	00800104 	movi	r2,4
    1e28:	d0a00305 	stb	r2,-32756(gp)
		break;
    1e2c:	00001006 	br	1e70 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
    1e30:	d0a00303 	ldbu	r2,-32756(gp)
    1e34:	10803fcc 	andi	r2,r2,255
    1e38:	10803c0c 	andi	r2,r2,240
    1e3c:	10000326 	beq	r2,zero,1e4c <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
    1e40:	00800044 	movi	r2,1
    1e44:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
    1e48:	00000906 	br	1e70 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
    1e4c:	01403244 	movi	r5,201
    1e50:	01003604 	movi	r4,216
    1e54:	000194c0 	call	194c <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    1e58:	008000c4 	movi	r2,3
    1e5c:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
    1e60:	00000306 	br	1e70 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
    1e64:	0001883a 	nop
    1e68:	00000106 	br	1e70 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
    1e6c:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
    1e70:	0001883a 	nop
    1e74:	e037883a 	mov	sp,fp
    1e78:	dfc00117 	ldw	ra,4(sp)
    1e7c:	df000017 	ldw	fp,0(sp)
    1e80:	dec00204 	addi	sp,sp,8
    1e84:	f800283a 	ret

00001e88 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
    1e88:	defffe04 	addi	sp,sp,-8
    1e8c:	dfc00115 	stw	ra,4(sp)
    1e90:	df000015 	stw	fp,0(sp)
    1e94:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
    1e98:	01400684 	movi	r5,26
    1e9c:	01002204 	movi	r4,136
    1ea0:	000194c0 	call	194c <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
    1ea4:	0001c340 	call	1c34 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
    1ea8:	0009883a 	mov	r4,zero
    1eac:	0001cdc0 	call	1cdc <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
    1eb0:	01402004 	movi	r5,128
    1eb4:	01002e04 	movi	r4,184
    1eb8:	000194c0 	call	194c <MAXreg_wr>
	Vbus_power( ON);
    1ebc:	01000044 	movi	r4,1
    1ec0:	0001cdc0 	call	1cdc <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
    1ec4:	01403444 	movi	r5,209
    1ec8:	01003604 	movi	r4,216
    1ecc:	000194c0 	call	194c <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
    1ed0:	01400804 	movi	r5,32
    1ed4:	01003404 	movi	r4,208
    1ed8:	000194c0 	call	194c <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
    1edc:	01400104 	movi	r5,4
    1ee0:	01003a04 	movi	r4,232
    1ee4:	000194c0 	call	194c <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
    1ee8:	0001d000 	call	1d00 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
    1eec:	01400804 	movi	r5,32
    1ef0:	01003204 	movi	r4,200
    1ef4:	000194c0 	call	194c <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
    1ef8:	01400044 	movi	r5,1
    1efc:	01002004 	movi	r4,128
    1f00:	000194c0 	call	194c <MAXreg_wr>
}
    1f04:	0001883a 	nop
    1f08:	e037883a 	mov	sp,fp
    1f0c:	dfc00117 	ldw	ra,4(sp)
    1f10:	df000017 	ldw	fp,0(sp)
    1f14:	dec00204 	addi	sp,sp,8
    1f18:	f800283a 	ret

00001f1c <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
    1f1c:	defffe04 	addi	sp,sp,-8
    1f20:	dfc00115 	stw	ra,4(sp)
    1f24:	df000015 	stw	fp,0(sp)
    1f28:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    1f2c:	00810034 	movhi	r2,1024
    1f30:	10847c04 	addi	r2,r2,4592
    1f34:	10800037 	ldwio	r2,0(r2)
    1f38:	1000041e 	bne	r2,zero,1f4c <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
    1f3c:	01000074 	movhi	r4,1
    1f40:	21131c04 	addi	r4,r4,19568
    1f44:	000312c0 	call	312c <printf>
		MaxIntHandler();
    1f48:	0001f880 	call	1f88 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
    1f4c:	00810034 	movhi	r2,1024
    1f50:	10847804 	addi	r2,r2,4576
    1f54:	10800037 	ldwio	r2,0(r2)
    1f58:	10800058 	cmpnei	r2,r2,1
    1f5c:	1000041e 	bne	r2,zero,1f70 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
    1f60:	01000074 	movhi	r4,1
    1f64:	21132004 	addi	r4,r4,19584
    1f68:	000312c0 	call	312c <printf>
		MaxGpxHandler();
    1f6c:	00020540 	call	2054 <MaxGpxHandler>
	}
}
    1f70:	0001883a 	nop
    1f74:	e037883a 	mov	sp,fp
    1f78:	dfc00117 	ldw	ra,4(sp)
    1f7c:	df000017 	ldw	fp,0(sp)
    1f80:	dec00204 	addi	sp,sp,8
    1f84:	f800283a 	ret

00001f88 <MaxIntHandler>:

void MaxIntHandler(void) {
    1f88:	defffd04 	addi	sp,sp,-12
    1f8c:	dfc00215 	stw	ra,8(sp)
    1f90:	df000115 	stw	fp,4(sp)
    1f94:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
    1f98:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
    1f9c:	01003204 	movi	r4,200
    1fa0:	0001b340 	call	1b34 <MAXreg_rd>
    1fa4:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
    1fa8:	e0bfff43 	ldbu	r2,-3(fp)
    1fac:	100b883a 	mov	r5,r2
    1fb0:	01000074 	movhi	r4,1
    1fb4:	21132404 	addi	r4,r4,19600
    1fb8:	000312c0 	call	312c <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
    1fbc:	e0bfff43 	ldbu	r2,-3(fp)
    1fc0:	1080100c 	andi	r2,r2,64
    1fc4:	10000326 	beq	r2,zero,1fd4 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
    1fc8:	e0bfff03 	ldbu	r2,-4(fp)
    1fcc:	10801014 	ori	r2,r2,64
    1fd0:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
    1fd4:	e0bfff43 	ldbu	r2,-3(fp)
    1fd8:	1080080c 	andi	r2,r2,32
    1fdc:	10000426 	beq	r2,zero,1ff0 <MaxIntHandler+0x68>
		MAX_busprobe();
    1fe0:	0001d000 	call	1d00 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
    1fe4:	e0bfff03 	ldbu	r2,-4(fp)
    1fe8:	10800814 	ori	r2,r2,32
    1fec:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
    1ff0:	e0bfff43 	ldbu	r2,-3(fp)
    1ff4:	1080020c 	andi	r2,r2,8
    1ff8:	10000326 	beq	r2,zero,2008 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
    1ffc:	000b883a 	mov	r5,zero
    2000:	01000e04 	movi	r4,56
    2004:	000194c0 	call	194c <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
    2008:	e0bfff43 	ldbu	r2,-3(fp)
    200c:	1080004c 	andi	r2,r2,1
    2010:	10000626 	beq	r2,zero,202c <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
    2014:	d0a00303 	ldbu	r2,-32756(gp)
    2018:	10800044 	addi	r2,r2,1
    201c:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
    2020:	e0bfff03 	ldbu	r2,-4(fp)
    2024:	10800054 	ori	r2,r2,1
    2028:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
    202c:	e0bfff03 	ldbu	r2,-4(fp)
    2030:	100b883a 	mov	r5,r2
    2034:	01003204 	movi	r4,200
    2038:	000194c0 	call	194c <MAXreg_wr>
}
    203c:	0001883a 	nop
    2040:	e037883a 	mov	sp,fp
    2044:	dfc00117 	ldw	ra,4(sp)
    2048:	df000017 	ldw	fp,0(sp)
    204c:	dec00204 	addi	sp,sp,8
    2050:	f800283a 	ret

00002054 <MaxGpxHandler>:

void MaxGpxHandler(void) {
    2054:	defffd04 	addi	sp,sp,-12
    2058:	dfc00215 	stw	ra,8(sp)
    205c:	df000115 	stw	fp,4(sp)
    2060:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
    2064:	01002c04 	movi	r4,176
    2068:	0001b340 	call	1b34 <MAXreg_rd>
    206c:	e0bfff05 	stb	r2,-4(fp)
}
    2070:	0001883a 	nop
    2074:	e037883a 	mov	sp,fp
    2078:	dfc00117 	ldw	ra,4(sp)
    207c:	df000017 	ldw	fp,0(sp)
    2080:	dec00204 	addi	sp,sp,8
    2084:	f800283a 	ret

00002088 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
    2088:	defff104 	addi	sp,sp,-60
    208c:	dfc00e15 	stw	ra,56(sp)
    2090:	df000d15 	stw	fp,52(sp)
    2094:	df000d04 	addi	fp,sp,52
    2098:	2015883a 	mov	r10,r4
    209c:	2813883a 	mov	r9,r5
    20a0:	3011883a 	mov	r8,r6
    20a4:	380d883a 	mov	r6,r7
    20a8:	e1400217 	ldw	r5,8(fp)
    20ac:	e1000317 	ldw	r4,12(fp)
    20b0:	e0c00417 	ldw	r3,16(fp)
    20b4:	e0800517 	ldw	r2,20(fp)
    20b8:	e2bff805 	stb	r10,-32(fp)
    20bc:	e27ff905 	stb	r9,-28(fp)
    20c0:	e23ffa05 	stb	r8,-24(fp)
    20c4:	e1bffb05 	stb	r6,-20(fp)
    20c8:	e17ffc05 	stb	r5,-16(fp)
    20cc:	e13ffd05 	stb	r4,-12(fp)
    20d0:	e0fffe0d 	sth	r3,-8(fp)
    20d4:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
    20d8:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
    20dc:	00800044 	movi	r2,1
    20e0:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
    20e4:	e0800617 	ldw	r2,24(fp)
    20e8:	1000011e 	bne	r2,zero,20f0 <XferCtrlReq+0x68>
        datastage = 0;
    20ec:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
    20f0:	e0bff803 	ldbu	r2,-32(fp)
    20f4:	100b883a 	mov	r5,r2
    20f8:	01003804 	movi	r4,224
    20fc:	000194c0 	call	194c <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
    2100:	e0bffa03 	ldbu	r2,-24(fp)
    2104:	10803fcc 	andi	r2,r2,255
    2108:	1080201c 	xori	r2,r2,128
    210c:	10bfe004 	addi	r2,r2,-128
    2110:	1000020e 	bge	r2,zero,211c <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
    2114:	00800044 	movi	r2,1
    2118:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
    211c:	e0bffa03 	ldbu	r2,-24(fp)
    2120:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
    2124:	e0bffb03 	ldbu	r2,-20(fp)
    2128:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
    212c:	e0bffc03 	ldbu	r2,-16(fp)
    2130:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
    2134:	e0bffd03 	ldbu	r2,-12(fp)
    2138:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
    213c:	e0bffe0b 	ldhu	r2,-8(fp)
    2140:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
    2144:	e0bfff0b 	ldhu	r2,-4(fp)
    2148:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
    214c:	e0bff584 	addi	r2,fp,-42
    2150:	100d883a 	mov	r6,r2
    2154:	01400204 	movi	r5,8
    2158:	01000804 	movi	r4,32
    215c:	00019d00 	call	19d0 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
    2160:	e0bff903 	ldbu	r2,-28(fp)
    2164:	100b883a 	mov	r5,r2
    2168:	01000404 	movi	r4,16
    216c:	00023300 	call	2330 <XferDispatchPkt>
    2170:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
    2174:	e0bff543 	ldbu	r2,-43(fp)
    2178:	10000226 	beq	r2,zero,2184 <XferCtrlReq+0xfc>
        return( rcode );
    217c:	e0bff543 	ldbu	r2,-43(fp)
    2180:	00000f06 	br	21c0 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
    2184:	e0bff503 	ldbu	r2,-44(fp)
    2188:	1085883a 	add	r2,r2,r2
    218c:	1087883a 	add	r3,r2,r2
    2190:	d0a00104 	addi	r2,gp,-32764
    2194:	1885883a 	add	r2,r3,r2
    2198:	10800017 	ldw	r2,0(r2)
    219c:	e13ff803 	ldbu	r4,-32(fp)
    21a0:	e17ff903 	ldbu	r5,-28(fp)
    21a4:	e1bfff0b 	ldhu	r6,-4(fp)
    21a8:	e0fff417 	ldw	r3,-48(fp)
    21ac:	d8c00015 	stw	r3,0(sp)
    21b0:	e1c00617 	ldw	r7,24(fp)
    21b4:	103ee83a 	callr	r2
    21b8:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
    21bc:	e0bff543 	ldbu	r2,-43(fp)
}
    21c0:	e037883a 	mov	sp,fp
    21c4:	dfc00117 	ldw	ra,4(sp)
    21c8:	df000017 	ldw	fp,0(sp)
    21cc:	dec00204 	addi	sp,sp,8
    21d0:	f800283a 	ret

000021d4 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
    21d4:	defff804 	addi	sp,sp,-32
    21d8:	dfc00715 	stw	ra,28(sp)
    21dc:	df000615 	stw	fp,24(sp)
    21e0:	df000604 	addi	fp,sp,24
    21e4:	2807883a 	mov	r3,r5
    21e8:	3005883a 	mov	r2,r6
    21ec:	e1ffff15 	stw	r7,-4(fp)
    21f0:	e13ffc05 	stb	r4,-16(fp)
    21f4:	e0fffd05 	stb	r3,-12(fp)
    21f8:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
    21fc:	e0800217 	ldw	r2,8(fp)
    2200:	10002826 	beq	r2,zero,22a4 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    2204:	e0fffc03 	ldbu	r3,-16(fp)
    2208:	008000b4 	movhi	r2,2
    220c:	10a21c04 	addi	r2,r2,-30608
    2210:	180690fa 	slli	r3,r3,3
    2214:	10c5883a 	add	r2,r2,r3
    2218:	10c00017 	ldw	r3,0(r2)
    221c:	e0bffd03 	ldbu	r2,-12(fp)
    2220:	100490fa 	slli	r2,r2,3
    2224:	1885883a 	add	r2,r3,r2
    2228:	00c00804 	movi	r3,32
    222c:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
    2230:	e13ffc03 	ldbu	r4,-16(fp)
    2234:	e17ffd03 	ldbu	r5,-12(fp)
    2238:	e1bffe0b 	ldhu	r6,-8(fp)
    223c:	e0fffc03 	ldbu	r3,-16(fp)
    2240:	008000b4 	movhi	r2,2
    2244:	10a21c04 	addi	r2,r2,-30608
    2248:	180690fa 	slli	r3,r3,3
    224c:	10c5883a 	add	r2,r2,r3
    2250:	10c00017 	ldw	r3,0(r2)
    2254:	e0bffd03 	ldbu	r2,-12(fp)
    2258:	100490fa 	slli	r2,r2,3
    225c:	1885883a 	add	r2,r3,r2
    2260:	1080008b 	ldhu	r2,2(r2)
    2264:	10803fcc 	andi	r2,r2,255
    2268:	d8800015 	stw	r2,0(sp)
    226c:	e1ffff17 	ldw	r7,-4(fp)
    2270:	00024ac0 	call	24ac <XferInTransfer>
    2274:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
    2278:	e0bffb03 	ldbu	r2,-20(fp)
    227c:	10000226 	beq	r2,zero,2288 <XferCtrlData+0xb4>
        return( rcode );
    2280:	e0bffb03 	ldbu	r2,-20(fp)
    2284:	00000806 	br	22a8 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
    2288:	e0bffd03 	ldbu	r2,-12(fp)
    228c:	100b883a 	mov	r5,r2
    2290:	01002804 	movi	r4,160
    2294:	00023300 	call	2330 <XferDispatchPkt>
    2298:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
    229c:	e0bffb03 	ldbu	r2,-20(fp)
    22a0:	00000106 	br	22a8 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
    22a4:	00bfffc4 	movi	r2,-1
    }
}
    22a8:	e037883a 	mov	sp,fp
    22ac:	dfc00117 	ldw	ra,4(sp)
    22b0:	df000017 	ldw	fp,0(sp)
    22b4:	dec00204 	addi	sp,sp,8
    22b8:	f800283a 	ret

000022bc <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
    22bc:	defff904 	addi	sp,sp,-28
    22c0:	dfc00615 	stw	ra,24(sp)
    22c4:	df000515 	stw	fp,20(sp)
    22c8:	df000504 	addi	fp,sp,20
    22cc:	2807883a 	mov	r3,r5
    22d0:	3005883a 	mov	r2,r6
    22d4:	e1ffff15 	stw	r7,-4(fp)
    22d8:	e13ffc05 	stb	r4,-16(fp)
    22dc:	e0fffd05 	stb	r3,-12(fp)
    22e0:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
    22e4:	e0800217 	ldw	r2,8(fp)
    22e8:	10000626 	beq	r2,zero,2304 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
    22ec:	e0bffd03 	ldbu	r2,-12(fp)
    22f0:	100b883a 	mov	r5,r2
    22f4:	01002804 	movi	r4,160
    22f8:	00023300 	call	2330 <XferDispatchPkt>
    22fc:	e0bffb05 	stb	r2,-20(fp)
    2300:	00000506 	br	2318 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
    2304:	e0bffd03 	ldbu	r2,-12(fp)
    2308:	100b883a 	mov	r5,r2
    230c:	01002004 	movi	r4,128
    2310:	00023300 	call	2330 <XferDispatchPkt>
    2314:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
    2318:	e0bffb03 	ldbu	r2,-20(fp)
}
    231c:	e037883a 	mov	sp,fp
    2320:	dfc00117 	ldw	ra,4(sp)
    2324:	df000017 	ldw	fp,0(sp)
    2328:	dec00204 	addi	sp,sp,8
    232c:	f800283a 	ret

00002330 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
    2330:	defff904 	addi	sp,sp,-28
    2334:	dfc00615 	stw	ra,24(sp)
    2338:	df000515 	stw	fp,20(sp)
    233c:	df000504 	addi	fp,sp,20
    2340:	2007883a 	mov	r3,r4
    2344:	2805883a 	mov	r2,r5
    2348:	e0fffe05 	stb	r3,-8(fp)
    234c:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2350:	d0a70217 	ldw	r2,-25592(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
    2354:	0140fa04 	movi	r5,1000
    2358:	1009883a 	mov	r4,r2
    235c:	00030d40 	call	30d4 <__mulsi3>
    2360:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2364:	d0a70117 	ldw	r2,-25596(gp)
    2368:	100b883a 	mov	r5,r2
    236c:	1809883a 	mov	r4,r3
    2370:	00030180 	call	3018 <__udivsi3>
    2374:	1084e204 	addi	r2,r2,5000
    2378:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
    237c:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
    2380:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
    2384:	e0fffe03 	ldbu	r3,-8(fp)
    2388:	e0bfff03 	ldbu	r2,-4(fp)
    238c:	1884b03a 	or	r2,r3,r2
    2390:	10803fcc 	andi	r2,r2,255
    2394:	100b883a 	mov	r5,r2
    2398:	01003c04 	movi	r4,240
    239c:	000194c0 	call	194c <MAXreg_wr>
        rcode = 0xff;
    23a0:	00bfffc4 	movi	r2,-1
    23a4:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
    23a8:	00000d06 	br	23e0 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
    23ac:	01003204 	movi	r4,200
    23b0:	0001b340 	call	1b34 <MAXreg_rd>
    23b4:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
    23b8:	e0bffd03 	ldbu	r2,-12(fp)
    23bc:	10803fcc 	andi	r2,r2,255
    23c0:	1080201c 	xori	r2,r2,128
    23c4:	10bfe004 	addi	r2,r2,-128
    23c8:	1000050e 	bge	r2,zero,23e0 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
    23cc:	01402004 	movi	r5,128
    23d0:	01003204 	movi	r4,200
    23d4:	000194c0 	call	194c <MAXreg_wr>
                rcode = 0x00;
    23d8:	e03ffb05 	stb	zero,-20(fp)
                break;
    23dc:	00000c06 	br	2410 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    23e0:	d0a70217 	ldw	r2,-25592(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
    23e4:	0140fa04 	movi	r5,1000
    23e8:	1009883a 	mov	r4,r2
    23ec:	00030d40 	call	30d4 <__mulsi3>
    23f0:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    23f4:	d0a70117 	ldw	r2,-25596(gp)
    23f8:	100b883a 	mov	r5,r2
    23fc:	1809883a 	mov	r4,r3
    2400:	00030180 	call	3018 <__udivsi3>
    2404:	1007883a 	mov	r3,r2
    2408:	e0bffc17 	ldw	r2,-16(fp)
    240c:	18bfe736 	bltu	r3,r2,23ac <__alt_data_end+0xfc0023ac>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
    2410:	e0bffb03 	ldbu	r2,-20(fp)
    2414:	10000226 	beq	r2,zero,2420 <XferDispatchPkt+0xf0>
            return( rcode );
    2418:	e0bffb03 	ldbu	r2,-20(fp)
    241c:	00001e06 	br	2498 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
    2420:	01003e04 	movi	r4,248
    2424:	0001b340 	call	1b34 <MAXreg_rd>
    2428:	108003cc 	andi	r2,r2,15
    242c:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
    2430:	e0bffb03 	ldbu	r2,-20(fp)
    2434:	10800118 	cmpnei	r2,r2,4
    2438:	1000071e 	bne	r2,zero,2458 <XferDispatchPkt+0x128>
            nak_count++;
    243c:	e0bffb83 	ldbu	r2,-18(fp)
    2440:	10800044 	addi	r2,r2,1
    2444:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
    2448:	e0bffb83 	ldbu	r2,-18(fp)
    244c:	10803218 	cmpnei	r2,r2,200
    2450:	10000b1e 	bne	r2,zero,2480 <XferDispatchPkt+0x150>
                break;
    2454:	00000f06 	br	2494 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
    2458:	e0bffb03 	ldbu	r2,-20(fp)
    245c:	10800398 	cmpnei	r2,r2,14
    2460:	1000091e 	bne	r2,zero,2488 <XferDispatchPkt+0x158>
            retry_count++;
    2464:	e0bffb43 	ldbu	r2,-19(fp)
    2468:	10800044 	addi	r2,r2,1
    246c:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
    2470:	e0bffb47 	ldb	r2,-19(fp)
    2474:	108000d8 	cmpnei	r2,r2,3
    2478:	10000526 	beq	r2,zero,2490 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
    247c:	00000106 	br	2484 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
    2480:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
    2484:	003fbf06 	br	2384 <__alt_data_end+0xfc002384>
            }
            else {
                continue;
            }
        }
        else break;
    2488:	0001883a 	nop
    248c:	00000106 	br	2494 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
    2490:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
    2494:	e0bffb03 	ldbu	r2,-20(fp)
}
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
    24ac:	defff804 	addi	sp,sp,-32
    24b0:	dfc00715 	stw	ra,28(sp)
    24b4:	df000615 	stw	fp,24(sp)
    24b8:	df000604 	addi	fp,sp,24
    24bc:	2011883a 	mov	r8,r4
    24c0:	2809883a 	mov	r4,r5
    24c4:	3007883a 	mov	r3,r6
    24c8:	e1fffe15 	stw	r7,-8(fp)
    24cc:	e0800217 	ldw	r2,8(fp)
    24d0:	e23ffb05 	stb	r8,-20(fp)
    24d4:	e13ffc05 	stb	r4,-16(fp)
    24d8:	e0fffd0d 	sth	r3,-12(fp)
    24dc:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
    24e0:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    24e4:	e0fffb03 	ldbu	r3,-20(fp)
    24e8:	008000b4 	movhi	r2,2
    24ec:	10a21c04 	addi	r2,r2,-30608
    24f0:	180690fa 	slli	r3,r3,3
    24f4:	10c5883a 	add	r2,r2,r3
    24f8:	10c00017 	ldw	r3,0(r2)
    24fc:	e0bffc03 	ldbu	r2,-16(fp)
    2500:	100490fa 	slli	r2,r2,3
    2504:	1885883a 	add	r2,r3,r2
    2508:	10800183 	ldbu	r2,6(r2)
    250c:	10803fcc 	andi	r2,r2,255
    2510:	100b883a 	mov	r5,r2
    2514:	01003a04 	movi	r4,232
    2518:	000194c0 	call	194c <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
    251c:	e0bffc03 	ldbu	r2,-16(fp)
    2520:	100b883a 	mov	r5,r2
    2524:	0009883a 	mov	r4,zero
    2528:	00023300 	call	2330 <XferDispatchPkt>
    252c:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
    2530:	e0bffa83 	ldbu	r2,-22(fp)
    2534:	10000226 	beq	r2,zero,2540 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
    2538:	e0bffa83 	ldbu	r2,-22(fp)
    253c:	00003a06 	br	2628 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
    2540:	01003204 	movi	r4,200
    2544:	0001b340 	call	1b34 <MAXreg_rd>
    2548:	10803fcc 	andi	r2,r2,255
    254c:	1080010c 	andi	r2,r2,4
    2550:	1000021e 	bne	r2,zero,255c <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
    2554:	00bffc04 	movi	r2,-16
    2558:	00003306 	br	2628 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
    255c:	01000c04 	movi	r4,48
    2560:	0001b340 	call	1b34 <MAXreg_rd>
    2564:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
    2568:	e0bffac3 	ldbu	r2,-21(fp)
    256c:	e1bffe17 	ldw	r6,-8(fp)
    2570:	100b883a 	mov	r5,r2
    2574:	01000204 	movi	r4,8
    2578:	0001bac0 	call	1bac <MAXbytes_rd>
    257c:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
    2580:	01400104 	movi	r5,4
    2584:	01003204 	movi	r4,200
    2588:	000194c0 	call	194c <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
    258c:	e0fffac3 	ldbu	r3,-21(fp)
    2590:	e0bffa0b 	ldhu	r2,-24(fp)
    2594:	1885883a 	add	r2,r3,r2
    2598:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
    259c:	e0fffac3 	ldbu	r3,-21(fp)
    25a0:	e0bfff03 	ldbu	r2,-4(fp)
    25a4:	18800336 	bltu	r3,r2,25b4 <XferInTransfer+0x108>
    25a8:	e0fffa0b 	ldhu	r3,-24(fp)
    25ac:	e0bffd0b 	ldhu	r2,-12(fp)
    25b0:	18bfda36 	bltu	r3,r2,251c <__alt_data_end+0xfc00251c>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
    25b4:	01003e04 	movi	r4,248
    25b8:	0001b340 	call	1b34 <MAXreg_rd>
    25bc:	10803fcc 	andi	r2,r2,255
    25c0:	1080040c 	andi	r2,r2,16
    25c4:	10000c26 	beq	r2,zero,25f8 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
    25c8:	e0fffb03 	ldbu	r3,-20(fp)
    25cc:	008000b4 	movhi	r2,2
    25d0:	10a21c04 	addi	r2,r2,-30608
    25d4:	180690fa 	slli	r3,r3,3
    25d8:	10c5883a 	add	r2,r2,r3
    25dc:	10c00017 	ldw	r3,0(r2)
    25e0:	e0bffc03 	ldbu	r2,-16(fp)
    25e4:	100490fa 	slli	r2,r2,3
    25e8:	1885883a 	add	r2,r3,r2
    25ec:	00c00804 	movi	r3,32
    25f0:	10c00185 	stb	r3,6(r2)
    25f4:	00000b06 	br	2624 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
    25f8:	e0fffb03 	ldbu	r3,-20(fp)
    25fc:	008000b4 	movhi	r2,2
    2600:	10a21c04 	addi	r2,r2,-30608
    2604:	180690fa 	slli	r3,r3,3
    2608:	10c5883a 	add	r2,r2,r3
    260c:	10c00017 	ldw	r3,0(r2)
    2610:	e0bffc03 	ldbu	r2,-16(fp)
    2614:	100490fa 	slli	r2,r2,3
    2618:	1885883a 	add	r2,r3,r2
    261c:	00c00404 	movi	r3,16
    2620:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
    2624:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
    2628:	e037883a 	mov	sp,fp
    262c:	dfc00117 	ldw	ra,4(sp)
    2630:	df000017 	ldw	fp,0(sp)
    2634:	dec00204 	addi	sp,sp,8
    2638:	f800283a 	ret

0000263c <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
    263c:	defffe04 	addi	sp,sp,-8
    2640:	df000115 	stw	fp,4(sp)
    2644:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
    2648:	e03fff05 	stb	zero,-4(fp)
    264c:	00001006 	br	2690 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
    2650:	e0ffff03 	ldbu	r3,-4(fp)
    2654:	008000b4 	movhi	r2,2
    2658:	10a21c04 	addi	r2,r2,-30608
    265c:	180690fa 	slli	r3,r3,3
    2660:	10c5883a 	add	r2,r2,r3
    2664:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
    2668:	e0ffff03 	ldbu	r3,-4(fp)
    266c:	008000b4 	movhi	r2,2
    2670:	10a21c04 	addi	r2,r2,-30608
    2674:	180690fa 	slli	r3,r3,3
    2678:	10c5883a 	add	r2,r2,r3
    267c:	10800104 	addi	r2,r2,4
    2680:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
    2684:	e0bfff03 	ldbu	r2,-4(fp)
    2688:	10800044 	addi	r2,r2,1
    268c:	e0bfff05 	stb	r2,-4(fp)
    2690:	e0bfff03 	ldbu	r2,-4(fp)
    2694:	10800270 	cmpltui	r2,r2,9
    2698:	103fed1e 	bne	r2,zero,2650 <__alt_data_end+0xfc002650>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
    269c:	008000b4 	movhi	r2,2
    26a0:	10a21c04 	addi	r2,r2,-30608
    26a4:	d0e6f204 	addi	r3,gp,-25656
    26a8:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
    26ac:	d026f28d 	sth	zero,-25654(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
    26b0:	00801004 	movi	r2,64
    26b4:	d0a6f345 	stb	r2,-25651(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
    26b8:	00800404 	movi	r2,16
    26bc:	d0a6f385 	stb	r2,-25650(gp)
}
    26c0:	0001883a 	nop
    26c4:	e037883a 	mov	sp,fp
    26c8:	df000017 	ldw	fp,0(sp)
    26cc:	dec00104 	addi	sp,sp,4
    26d0:	f800283a 	ret

000026d4 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
    26d4:	deffb204 	addi	sp,sp,-312
    26d8:	dfc04d15 	stw	ra,308(sp)
    26dc:	df004c15 	stw	fp,304(sp)
    26e0:	dc004b15 	stw	r16,300(sp)
    26e4:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
    26e8:	d0a00303 	ldbu	r2,-32756(gp)
    26ec:	10803fcc 	andi	r2,r2,255
    26f0:	10803c0c 	andi	r2,r2,240
    26f4:	10c00820 	cmpeqi	r3,r2,32
    26f8:	1801121e 	bne	r3,zero,2b44 <USB_Task+0x470>
    26fc:	10c00848 	cmpgei	r3,r2,33
    2700:	1800041e 	bne	r3,zero,2714 <USB_Task+0x40>
    2704:	10000a26 	beq	r2,zero,2730 <USB_Task+0x5c>
    2708:	10800420 	cmpeqi	r2,r2,16
    270c:	10001b1e 	bne	r2,zero,277c <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    2710:	00017a06 	br	2cfc <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
    2714:	10c01020 	cmpeqi	r3,r2,64
    2718:	18016f1e 	bne	r3,zero,2cd8 <USB_Task+0x604>
    271c:	10c03fe0 	cmpeqi	r3,r2,255
    2720:	18016f1e 	bne	r3,zero,2ce0 <USB_Task+0x60c>
    2724:	10800c20 	cmpeqi	r2,r2,48
    2728:	1001441e 	bne	r2,zero,2c3c <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    272c:	00017306 	br	2cfc <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
    2730:	d0a00303 	ldbu	r2,-32756(gp)
    2734:	10803fcc 	andi	r2,r2,255
    2738:	10c000e0 	cmpeqi	r3,r2,3
    273c:	1800091e 	bne	r3,zero,2764 <USB_Task+0x90>
    2740:	10c00120 	cmpeqi	r3,r2,4
    2744:	18000b1e 	bne	r3,zero,2774 <USB_Task+0xa0>
    2748:	10800060 	cmpeqi	r2,r2,1
    274c:	1000011e 	bne	r2,zero,2754 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
    2750:	00016a06 	br	2cfc <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
    2754:	000263c0 	call	263c <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    2758:	008000c4 	movi	r2,3
    275c:	d0a00305 	stb	r2,-32756(gp)
                    break;
    2760:	00000506 	br	2778 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
    2764:	01400104 	movi	r5,4
    2768:	01003a04 	movi	r4,232
    276c:	000194c0 	call	194c <MAXreg_wr>
                    break;
    2770:	00000106 	br	2778 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
    2774:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
    2778:	00016006 	br	2cfc <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
    277c:	d0a00303 	ldbu	r2,-32756(gp)
    2780:	10803fcc 	andi	r2,r2,255
    2784:	10bffc04 	addi	r2,r2,-16
    2788:	10c001a8 	cmpgeui	r3,r2,6
    278c:	1801561e 	bne	r3,zero,2ce8 <USB_Task+0x614>
    2790:	100690ba 	slli	r3,r2,2
    2794:	00800034 	movhi	r2,0
    2798:	1089ea04 	addi	r2,r2,10152
    279c:	1885883a 	add	r2,r3,r2
    27a0:	10800017 	ldw	r2,0(r2)
    27a4:	1000683a 	jmp	r2
    27a8:	000027c0 	call	27c <I2Creg_wr+0x10>
    27ac:	000027f8 	rdprs	zero,zero,159
    27b0:	00002834 	movhi	zero,160
    27b4:	00002858 	cmpnei	zero,zero,161
    27b8:	00002898 	cmpnei	zero,zero,162
    27bc:	000028ac 	andhi	zero,zero,162
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    27c0:	d0a70217 	ldw	r2,-25592(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
    27c4:	0140fa04 	movi	r5,1000
    27c8:	1009883a 	mov	r4,r2
    27cc:	00030d40 	call	30d4 <__mulsi3>
    27d0:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    27d4:	d0a70117 	ldw	r2,-25596(gp)
    27d8:	100b883a 	mov	r5,r2
    27dc:	1809883a 	mov	r4,r3
    27e0:	00030180 	call	3018 <__udivsi3>
    27e4:	10803204 	addi	r2,r2,200
    27e8:	d0a6f515 	stw	r2,-25644(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    27ec:	00800444 	movi	r2,17
    27f0:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
    27f4:	0000d206 	br	2b40 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    27f8:	d0a70217 	ldw	r2,-25592(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
    27fc:	0140fa04 	movi	r5,1000
    2800:	1009883a 	mov	r4,r2
    2804:	00030d40 	call	30d4 <__mulsi3>
    2808:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    280c:	d0a70117 	ldw	r2,-25596(gp)
    2810:	100b883a 	mov	r5,r2
    2814:	1809883a 	mov	r4,r3
    2818:	00030180 	call	3018 <__udivsi3>
    281c:	1007883a 	mov	r3,r2
    2820:	d0a6f517 	ldw	r2,-25644(gp)
    2824:	10c0c32e 	bgeu	r2,r3,2b34 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    2828:	00800484 	movi	r2,18
    282c:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
    2830:	0000c006 	br	2b34 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
    2834:	01400044 	movi	r5,1
    2838:	01003204 	movi	r4,200
    283c:	000194c0 	call	194c <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
    2840:	01400044 	movi	r5,1
    2844:	01003a04 	movi	r4,232
    2848:	000194c0 	call	194c <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    284c:	008004c4 	movi	r2,19
    2850:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
    2854:	0000ba06 	br	2b40 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
    2858:	01003a04 	movi	r4,232
    285c:	0001b340 	call	1b34 <MAXreg_rd>
    2860:	10803fcc 	andi	r2,r2,255
    2864:	1080004c 	andi	r2,r2,1
    2868:	1000b41e 	bne	r2,zero,2b3c <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
    286c:	01003604 	movi	r4,216
    2870:	0001b340 	call	1b34 <MAXreg_rd>
    2874:	10800214 	ori	r2,r2,8
    2878:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
    287c:	e0bfb943 	ldbu	r2,-283(fp)
    2880:	100b883a 	mov	r5,r2
    2884:	01003604 	movi	r4,216
    2888:	000194c0 	call	194c <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    288c:	00800504 	movi	r2,20
    2890:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
    2894:	0000a906 	br	2b3c <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
    2898:	01003204 	movi	r4,200
    289c:	0001b340 	call	1b34 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
    28a0:	00800544 	movi	r2,21
    28a4:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
    28a8:	0000a506 	br	2b40 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
    28ac:	008000b4 	movhi	r2,2
    28b0:	10a21c04 	addi	r2,r2,-30608
    28b4:	10800017 	ldw	r2,0(r2)
    28b8:	00c00204 	movi	r3,8
    28bc:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
    28c0:	e0bfba04 	addi	r2,fp,-280
    28c4:	d8800415 	stw	r2,16(sp)
    28c8:	00800204 	movi	r2,8
    28cc:	d8800315 	stw	r2,12(sp)
    28d0:	d8000215 	stw	zero,8(sp)
    28d4:	00800044 	movi	r2,1
    28d8:	d8800115 	stw	r2,4(sp)
    28dc:	d8000015 	stw	zero,0(sp)
    28e0:	01c00184 	movi	r7,6
    28e4:	01802004 	movi	r6,128
    28e8:	000b883a 	mov	r5,zero
    28ec:	0009883a 	mov	r4,zero
    28f0:	00020880 	call	2088 <XferCtrlReq>
    28f4:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
    28f8:	e0bfb983 	ldbu	r2,-282(fp)
    28fc:	1000861e 	bne	r2,zero,2b18 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
    2900:	008000b4 	movhi	r2,2
    2904:	10a21c04 	addi	r2,r2,-30608
    2908:	10800017 	ldw	r2,0(r2)
    290c:	e0ffbbc3 	ldbu	r3,-273(fp)
    2910:	18c03fcc 	andi	r3,r3,255
    2914:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
    2918:	e0bfba03 	ldbu	r2,-280(fp)
    291c:	10803fcc 	andi	r2,r2,255
    2920:	e0ffba04 	addi	r3,fp,-280
    2924:	d8c00415 	stw	r3,16(sp)
    2928:	d8800315 	stw	r2,12(sp)
    292c:	d8000215 	stw	zero,8(sp)
    2930:	00800044 	movi	r2,1
    2934:	d8800115 	stw	r2,4(sp)
    2938:	d8000015 	stw	zero,0(sp)
    293c:	01c00184 	movi	r7,6
    2940:	01802004 	movi	r6,128
    2944:	000b883a 	mov	r5,zero
    2948:	0009883a 	mov	r4,zero
    294c:	00020880 	call	2088 <XferCtrlReq>
    2950:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
    2954:	e0bfbd83 	ldbu	r2,-266(fp)
    2958:	10803fcc 	andi	r2,r2,255
    295c:	10003426 	beq	r2,zero,2a30 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
    2960:	e0bfbd83 	ldbu	r2,-266(fp)
    2964:	10803fcc 	andi	r2,r2,255
    2968:	e0ffbe84 	addi	r3,fp,-262
    296c:	d8c00415 	stw	r3,16(sp)
    2970:	00c00084 	movi	r3,2
    2974:	d8c00315 	stw	r3,12(sp)
    2978:	00c10244 	movi	r3,1033
    297c:	d8c00215 	stw	r3,8(sp)
    2980:	00c000c4 	movi	r3,3
    2984:	d8c00115 	stw	r3,4(sp)
    2988:	d8800015 	stw	r2,0(sp)
    298c:	01c00184 	movi	r7,6
    2990:	01802004 	movi	r6,128
    2994:	000b883a 	mov	r5,zero
    2998:	0009883a 	mov	r4,zero
    299c:	00020880 	call	2088 <XferCtrlReq>
    29a0:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
    29a4:	e0bfbd83 	ldbu	r2,-266(fp)
    29a8:	10803fcc 	andi	r2,r2,255
    29ac:	e0ffbe83 	ldbu	r3,-262(fp)
    29b0:	18c03fcc 	andi	r3,r3,255
    29b4:	e13fbe84 	addi	r4,fp,-262
    29b8:	d9000415 	stw	r4,16(sp)
    29bc:	d8c00315 	stw	r3,12(sp)
    29c0:	00c10244 	movi	r3,1033
    29c4:	d8c00215 	stw	r3,8(sp)
    29c8:	00c000c4 	movi	r3,3
    29cc:	d8c00115 	stw	r3,4(sp)
    29d0:	d8800015 	stw	r2,0(sp)
    29d4:	01c00184 	movi	r7,6
    29d8:	01802004 	movi	r6,128
    29dc:	000b883a 	mov	r5,zero
    29e0:	0009883a 	mov	r4,zero
    29e4:	00020880 	call	2088 <XferCtrlReq>
    29e8:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
    29ec:	e0bfbd83 	ldbu	r2,-266(fp)
    29f0:	14003fcc 	andi	r16,r2,255
    29f4:	e0bfbe83 	ldbu	r2,-262(fp)
    29f8:	10803fcc 	andi	r2,r2,255
    29fc:	1004d07a 	srli	r2,r2,1
    2a00:	10bfffc4 	addi	r2,r2,-1
    2a04:	10c03fcc 	andi	r3,r2,255
    2a08:	e0bfbe84 	addi	r2,fp,-262
    2a0c:	10800084 	addi	r2,r2,2
    2a10:	180b883a 	mov	r5,r3
    2a14:	1009883a 	mov	r4,r2
    2a18:	0002e9c0 	call	2e9c <ConvUTF8ToStr>
    2a1c:	100d883a 	mov	r6,r2
    2a20:	800b883a 	mov	r5,r16
    2a24:	01000074 	movhi	r4,1
    2a28:	21132704 	addi	r4,r4,19612
    2a2c:	000312c0 	call	312c <printf>
                		}
                		if (buf.iProduct != 0)
    2a30:	e0bfbdc3 	ldbu	r2,-265(fp)
    2a34:	10803fcc 	andi	r2,r2,255
    2a38:	10003426 	beq	r2,zero,2b0c <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
    2a3c:	e0bfbdc3 	ldbu	r2,-265(fp)
    2a40:	10803fcc 	andi	r2,r2,255
    2a44:	e0ffbe84 	addi	r3,fp,-262
    2a48:	d8c00415 	stw	r3,16(sp)
    2a4c:	00c00084 	movi	r3,2
    2a50:	d8c00315 	stw	r3,12(sp)
    2a54:	00c10244 	movi	r3,1033
    2a58:	d8c00215 	stw	r3,8(sp)
    2a5c:	00c000c4 	movi	r3,3
    2a60:	d8c00115 	stw	r3,4(sp)
    2a64:	d8800015 	stw	r2,0(sp)
    2a68:	01c00184 	movi	r7,6
    2a6c:	01802004 	movi	r6,128
    2a70:	000b883a 	mov	r5,zero
    2a74:	0009883a 	mov	r4,zero
    2a78:	00020880 	call	2088 <XferCtrlReq>
    2a7c:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
    2a80:	e0bfbdc3 	ldbu	r2,-265(fp)
    2a84:	10803fcc 	andi	r2,r2,255
    2a88:	e0ffbe83 	ldbu	r3,-262(fp)
    2a8c:	18c03fcc 	andi	r3,r3,255
    2a90:	e13fbe84 	addi	r4,fp,-262
    2a94:	d9000415 	stw	r4,16(sp)
    2a98:	d8c00315 	stw	r3,12(sp)
    2a9c:	00c10244 	movi	r3,1033
    2aa0:	d8c00215 	stw	r3,8(sp)
    2aa4:	00c000c4 	movi	r3,3
    2aa8:	d8c00115 	stw	r3,4(sp)
    2aac:	d8800015 	stw	r2,0(sp)
    2ab0:	01c00184 	movi	r7,6
    2ab4:	01802004 	movi	r6,128
    2ab8:	000b883a 	mov	r5,zero
    2abc:	0009883a 	mov	r4,zero
    2ac0:	00020880 	call	2088 <XferCtrlReq>
    2ac4:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
    2ac8:	e0bfbdc3 	ldbu	r2,-265(fp)
    2acc:	14003fcc 	andi	r16,r2,255
    2ad0:	e0bfbe83 	ldbu	r2,-262(fp)
    2ad4:	10803fcc 	andi	r2,r2,255
    2ad8:	1004d07a 	srli	r2,r2,1
    2adc:	10bfffc4 	addi	r2,r2,-1
    2ae0:	10c03fcc 	andi	r3,r2,255
    2ae4:	e0bfbe84 	addi	r2,fp,-262
    2ae8:	10800084 	addi	r2,r2,2
    2aec:	180b883a 	mov	r5,r3
    2af0:	1009883a 	mov	r4,r2
    2af4:	0002e9c0 	call	2e9c <ConvUTF8ToStr>
    2af8:	100d883a 	mov	r6,r2
    2afc:	800b883a 	mov	r5,r16
    2b00:	01000074 	movhi	r4,1
    2b04:	21132d04 	addi	r4,r4,19636
    2b08:	000312c0 	call	312c <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
    2b0c:	00800804 	movi	r2,32
    2b10:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
    2b14:	00000a06 	br	2b40 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
    2b18:	e0bfb983 	ldbu	r2,-282(fp)
    2b1c:	d0a6f645 	stb	r2,-25639(gp)
                        last_usb_task_state = usb_task_state;
    2b20:	d0a00303 	ldbu	r2,-32756(gp)
    2b24:	d0a6f405 	stb	r2,-25648(gp)
                        usb_task_state = USB_STATE_ERROR;
    2b28:	00bfffc4 	movi	r2,-1
    2b2c:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
    2b30:	00000306 	br	2b40 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
    2b34:	0001883a 	nop
    2b38:	00006b06 	br	2ce8 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
    2b3c:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
    2b40:	00006906 	br	2ce8 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
    2b44:	00800044 	movi	r2,1
    2b48:	e0bfb905 	stb	r2,-284(fp)
    2b4c:	00002d06 	br	2c04 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
    2b50:	e0ffb903 	ldbu	r3,-284(fp)
    2b54:	008000b4 	movhi	r2,2
    2b58:	10a21c04 	addi	r2,r2,-30608
    2b5c:	180690fa 	slli	r3,r3,3
    2b60:	10c5883a 	add	r2,r2,r3
    2b64:	10800017 	ldw	r2,0(r2)
    2b68:	1000231e 	bne	r2,zero,2bf8 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
    2b6c:	e13fb903 	ldbu	r4,-284(fp)
    2b70:	008000b4 	movhi	r2,2
    2b74:	10a21c04 	addi	r2,r2,-30608
    2b78:	10c00017 	ldw	r3,0(r2)
    2b7c:	008000b4 	movhi	r2,2
    2b80:	10a21c04 	addi	r2,r2,-30608
    2b84:	200890fa 	slli	r4,r4,3
    2b88:	1105883a 	add	r2,r2,r4
    2b8c:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
    2b90:	e0bfb903 	ldbu	r2,-284(fp)
    2b94:	d8000415 	stw	zero,16(sp)
    2b98:	d8000315 	stw	zero,12(sp)
    2b9c:	d8000215 	stw	zero,8(sp)
    2ba0:	d8000115 	stw	zero,4(sp)
    2ba4:	d8800015 	stw	r2,0(sp)
    2ba8:	01c00144 	movi	r7,5
    2bac:	000d883a 	mov	r6,zero
    2bb0:	000b883a 	mov	r5,zero
    2bb4:	0009883a 	mov	r4,zero
    2bb8:	00020880 	call	2088 <XferCtrlReq>
    2bbc:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
    2bc0:	e0bfb983 	ldbu	r2,-282(fp)
    2bc4:	1000051e 	bne	r2,zero,2bdc <USB_Task+0x508>
                        tmp_addr = i;
    2bc8:	e0bfb903 	ldbu	r2,-284(fp)
    2bcc:	d0a6f605 	stb	r2,-25640(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
    2bd0:	00800c04 	movi	r2,48
    2bd4:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
    2bd8:	00000d06 	br	2c10 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
    2bdc:	e0bfb983 	ldbu	r2,-282(fp)
    2be0:	d0a6f645 	stb	r2,-25639(gp)
                        last_usb_task_state = usb_task_state;
    2be4:	d0a00303 	ldbu	r2,-32756(gp)
    2be8:	d0a6f405 	stb	r2,-25648(gp)
                        usb_task_state = USB_STATE_ERROR;
    2bec:	00bfffc4 	movi	r2,-1
    2bf0:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
    2bf4:	00000606 	br	2c10 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
    2bf8:	e0bfb903 	ldbu	r2,-284(fp)
    2bfc:	10800044 	addi	r2,r2,1
    2c00:	e0bfb905 	stb	r2,-284(fp)
    2c04:	e0bfb903 	ldbu	r2,-284(fp)
    2c08:	10800230 	cmpltui	r2,r2,8
    2c0c:	103fd01e 	bne	r2,zero,2b50 <__alt_data_end+0xfc002b50>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
    2c10:	d0a00303 	ldbu	r2,-32756(gp)
    2c14:	10803fcc 	andi	r2,r2,255
    2c18:	10800818 	cmpnei	r2,r2,32
    2c1c:	1000341e 	bne	r2,zero,2cf0 <USB_Task+0x61c>
                usb_error = 0xfe;
    2c20:	00bfff84 	movi	r2,-2
    2c24:	d0a6f645 	stb	r2,-25639(gp)
                last_usb_task_state = usb_task_state;
    2c28:	d0a00303 	ldbu	r2,-32756(gp)
    2c2c:	d0a6f405 	stb	r2,-25648(gp)
                usb_task_state = USB_STATE_ERROR;
    2c30:	00bfffc4 	movi	r2,-1
    2c34:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
    2c38:	00002d06 	br	2cf0 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
    2c3c:	e03fb905 	stb	zero,-284(fp)
    2c40:	00001706 	br	2ca0 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
    2c44:	e0bfb903 	ldbu	r2,-284(fp)
    2c48:	04000074 	movhi	r16,1
    2c4c:	8413fe04 	addi	r16,r16,20472
    2c50:	01400304 	movi	r5,12
    2c54:	1009883a 	mov	r4,r2
    2c58:	00030d40 	call	30d4 <__mulsi3>
    2c5c:	8085883a 	add	r2,r16,r2
    2c60:	10800017 	ldw	r2,0(r2)
    2c64:	d0e6f603 	ldbu	r3,-25640(gp)
    2c68:	18c03fcc 	andi	r3,r3,255
    2c6c:	000b883a 	mov	r5,zero
    2c70:	1809883a 	mov	r4,r3
    2c74:	103ee83a 	callr	r2
    2c78:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
    2c7c:	e0bfb983 	ldbu	r2,-282(fp)
    2c80:	10800058 	cmpnei	r2,r2,1
    2c84:	1000031e 	bne	r2,zero,2c94 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
    2c88:	00801004 	movi	r2,64
    2c8c:	d0a00305 	stb	r2,-32756(gp)
                    break;
    2c90:	00000606 	br	2cac <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
    2c94:	e0bfb903 	ldbu	r2,-284(fp)
    2c98:	10800044 	addi	r2,r2,1
    2c9c:	e0bfb905 	stb	r2,-284(fp)
    2ca0:	e0bfb903 	ldbu	r2,-284(fp)
    2ca4:	10800130 	cmpltui	r2,r2,4
    2ca8:	103fe61e 	bne	r2,zero,2c44 <__alt_data_end+0xfc002c44>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
    2cac:	d0a00303 	ldbu	r2,-32756(gp)
    2cb0:	10803fcc 	andi	r2,r2,255
    2cb4:	10800c18 	cmpnei	r2,r2,48
    2cb8:	10000f1e 	bne	r2,zero,2cf8 <USB_Task+0x624>
                usb_error = 0xfd;
    2cbc:	00bfff44 	movi	r2,-3
    2cc0:	d0a6f645 	stb	r2,-25639(gp)
                last_usb_task_state = usb_task_state;
    2cc4:	d0a00303 	ldbu	r2,-32756(gp)
    2cc8:	d0a6f405 	stb	r2,-25648(gp)
                usb_task_state = USB_STATE_ERROR;
    2ccc:	00bfffc4 	movi	r2,-1
    2cd0:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
    2cd4:	00000806 	br	2cf8 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
    2cd8:	0001883a 	nop
    2cdc:	00000706 	br	2cfc <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
    2ce0:	0001883a 	nop
    2ce4:	00000506 	br	2cfc <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
    2ce8:	0001883a 	nop
    2cec:	00000306 	br	2cfc <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
    2cf0:	0001883a 	nop
    2cf4:	00000106 	br	2cfc <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
    2cf8:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
    2cfc:	0001883a 	nop
    2d00:	e6ffff04 	addi	sp,fp,-4
    2d04:	dfc00217 	ldw	ra,8(sp)
    2d08:	df000117 	ldw	fp,4(sp)
    2d0c:	dc000017 	ldw	r16,0(sp)
    2d10:	dec00304 	addi	sp,sp,12
    2d14:	f800283a 	ret

00002d18 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
    2d18:	defffd04 	addi	sp,sp,-12
    2d1c:	df000215 	stw	fp,8(sp)
    2d20:	df000204 	addi	fp,sp,8
    2d24:	2005883a 	mov	r2,r4
    2d28:	e17fff15 	stw	r5,-4(fp)
    2d2c:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
    2d30:	0005883a 	mov	r2,zero
}
    2d34:	e037883a 	mov	sp,fp
    2d38:	df000017 	ldw	fp,0(sp)
    2d3c:	dec00104 	addi	sp,sp,4
    2d40:	f800283a 	ret

00002d44 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    2d44:	defffb04 	addi	sp,sp,-20
    2d48:	df000415 	stw	fp,16(sp)
    2d4c:	df000404 	addi	fp,sp,16
    2d50:	2007883a 	mov	r3,r4
    2d54:	2805883a 	mov	r2,r5
    2d58:	e1bffe15 	stw	r6,-8(fp)
    2d5c:	e1ffff15 	stw	r7,-4(fp)
    2d60:	e0fffc05 	stb	r3,-16(fp)
    2d64:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
    2d68:	0005883a 	mov	r2,zero

}
    2d6c:	e037883a 	mov	sp,fp
    2d70:	df000017 	ldw	fp,0(sp)
    2d74:	dec00104 	addi	sp,sp,4
    2d78:	f800283a 	ret

00002d7c <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
    2d7c:	defffd04 	addi	sp,sp,-12
    2d80:	df000215 	stw	fp,8(sp)
    2d84:	df000204 	addi	fp,sp,8
    2d88:	2005883a 	mov	r2,r4
    2d8c:	e17fff15 	stw	r5,-4(fp)
    2d90:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
    2d94:	0005883a 	mov	r2,zero

}
    2d98:	e037883a 	mov	sp,fp
    2d9c:	df000017 	ldw	fp,0(sp)
    2da0:	dec00104 	addi	sp,sp,4
    2da4:	f800283a 	ret

00002da8 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    2da8:	defffb04 	addi	sp,sp,-20
    2dac:	df000415 	stw	fp,16(sp)
    2db0:	df000404 	addi	fp,sp,16
    2db4:	2007883a 	mov	r3,r4
    2db8:	2805883a 	mov	r2,r5
    2dbc:	e1bffe15 	stw	r6,-8(fp)
    2dc0:	e1ffff15 	stw	r7,-4(fp)
    2dc4:	e0fffc05 	stb	r3,-16(fp)
    2dc8:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
    2dcc:	0005883a 	mov	r2,zero
}
    2dd0:	e037883a 	mov	sp,fp
    2dd4:	df000017 	ldw	fp,0(sp)
    2dd8:	dec00104 	addi	sp,sp,4
    2ddc:	f800283a 	ret

00002de0 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
    2de0:	defffd04 	addi	sp,sp,-12
    2de4:	df000215 	stw	fp,8(sp)
    2de8:	df000204 	addi	fp,sp,8
    2dec:	2005883a 	mov	r2,r4
    2df0:	e17fff15 	stw	r5,-4(fp)
    2df4:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
    2df8:	0005883a 	mov	r2,zero
}
    2dfc:	e037883a 	mov	sp,fp
    2e00:	df000017 	ldw	fp,0(sp)
    2e04:	dec00104 	addi	sp,sp,4
    2e08:	f800283a 	ret

00002e0c <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
    2e0c:	defffb04 	addi	sp,sp,-20
    2e10:	df000415 	stw	fp,16(sp)
    2e14:	df000404 	addi	fp,sp,16
    2e18:	2007883a 	mov	r3,r4
    2e1c:	2805883a 	mov	r2,r5
    2e20:	e1bffe15 	stw	r6,-8(fp)
    2e24:	e1ffff15 	stw	r7,-4(fp)
    2e28:	e0fffc05 	stb	r3,-16(fp)
    2e2c:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
    2e30:	0005883a 	mov	r2,zero
}
    2e34:	e037883a 	mov	sp,fp
    2e38:	df000017 	ldw	fp,0(sp)
    2e3c:	dec00104 	addi	sp,sp,4
    2e40:	f800283a 	ret

00002e44 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
    2e44:	deffff04 	addi	sp,sp,-4
    2e48:	df000015 	stw	fp,0(sp)
    2e4c:	d839883a 	mov	fp,sp
    return( usb_task_state );
    2e50:	d0a00303 	ldbu	r2,-32756(gp)
}
    2e54:	e037883a 	mov	sp,fp
    2e58:	df000017 	ldw	fp,0(sp)
    2e5c:	dec00104 	addi	sp,sp,4
    2e60:	f800283a 	ret

00002e64 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
    2e64:	defffe04 	addi	sp,sp,-8
    2e68:	df000115 	stw	fp,4(sp)
    2e6c:	df000104 	addi	fp,sp,4
    2e70:	2005883a 	mov	r2,r4
    2e74:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
    2e78:	e0bfff03 	ldbu	r2,-4(fp)
    2e7c:	100690fa 	slli	r3,r2,3
    2e80:	008000b4 	movhi	r2,2
    2e84:	10a21c04 	addi	r2,r2,-30608
    2e88:	1885883a 	add	r2,r3,r2
}
    2e8c:	e037883a 	mov	sp,fp
    2e90:	df000017 	ldw	fp,0(sp)
    2e94:	dec00104 	addi	sp,sp,4
    2e98:	f800283a 	ret

00002e9c <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
    2e9c:	defffc04 	addi	sp,sp,-16
    2ea0:	df000315 	stw	fp,12(sp)
    2ea4:	df000304 	addi	fp,sp,12
    2ea8:	e13ffe15 	stw	r4,-8(fp)
    2eac:	2805883a 	mov	r2,r5
    2eb0:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
    2eb4:	e03ffd05 	stb	zero,-12(fp)
    2eb8:	00000d06 	br	2ef0 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
    2ebc:	e0bffd03 	ldbu	r2,-12(fp)
    2ec0:	e0fffe17 	ldw	r3,-8(fp)
    2ec4:	1887883a 	add	r3,r3,r2
    2ec8:	e0bffd03 	ldbu	r2,-12(fp)
    2ecc:	1085883a 	add	r2,r2,r2
    2ed0:	1009883a 	mov	r4,r2
    2ed4:	e0bffe17 	ldw	r2,-8(fp)
    2ed8:	1105883a 	add	r2,r2,r4
    2edc:	10800003 	ldbu	r2,0(r2)
    2ee0:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
    2ee4:	e0bffd03 	ldbu	r2,-12(fp)
    2ee8:	10800044 	addi	r2,r2,1
    2eec:	e0bffd05 	stb	r2,-12(fp)
    2ef0:	e0fffd03 	ldbu	r3,-12(fp)
    2ef4:	e0bfff03 	ldbu	r2,-4(fp)
    2ef8:	18bff036 	bltu	r3,r2,2ebc <__alt_data_end+0xfc002ebc>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
    2efc:	e0bfff03 	ldbu	r2,-4(fp)
    2f00:	e0fffe17 	ldw	r3,-8(fp)
    2f04:	1885883a 	add	r2,r3,r2
    2f08:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
    2f0c:	e0bffe17 	ldw	r2,-8(fp)
}
    2f10:	e037883a 	mov	sp,fp
    2f14:	df000017 	ldw	fp,0(sp)
    2f18:	dec00104 	addi	sp,sp,4
    2f1c:	f800283a 	ret

00002f20 <__divsi3>:
    2f20:	20001b16 	blt	r4,zero,2f90 <__divsi3+0x70>
    2f24:	000f883a 	mov	r7,zero
    2f28:	28001616 	blt	r5,zero,2f84 <__divsi3+0x64>
    2f2c:	200d883a 	mov	r6,r4
    2f30:	29001a2e 	bgeu	r5,r4,2f9c <__divsi3+0x7c>
    2f34:	00800804 	movi	r2,32
    2f38:	00c00044 	movi	r3,1
    2f3c:	00000106 	br	2f44 <__divsi3+0x24>
    2f40:	10000d26 	beq	r2,zero,2f78 <__divsi3+0x58>
    2f44:	294b883a 	add	r5,r5,r5
    2f48:	10bfffc4 	addi	r2,r2,-1
    2f4c:	18c7883a 	add	r3,r3,r3
    2f50:	293ffb36 	bltu	r5,r4,2f40 <__alt_data_end+0xfc002f40>
    2f54:	0005883a 	mov	r2,zero
    2f58:	18000726 	beq	r3,zero,2f78 <__divsi3+0x58>
    2f5c:	0005883a 	mov	r2,zero
    2f60:	31400236 	bltu	r6,r5,2f6c <__divsi3+0x4c>
    2f64:	314dc83a 	sub	r6,r6,r5
    2f68:	10c4b03a 	or	r2,r2,r3
    2f6c:	1806d07a 	srli	r3,r3,1
    2f70:	280ad07a 	srli	r5,r5,1
    2f74:	183ffa1e 	bne	r3,zero,2f60 <__alt_data_end+0xfc002f60>
    2f78:	38000126 	beq	r7,zero,2f80 <__divsi3+0x60>
    2f7c:	0085c83a 	sub	r2,zero,r2
    2f80:	f800283a 	ret
    2f84:	014bc83a 	sub	r5,zero,r5
    2f88:	39c0005c 	xori	r7,r7,1
    2f8c:	003fe706 	br	2f2c <__alt_data_end+0xfc002f2c>
    2f90:	0109c83a 	sub	r4,zero,r4
    2f94:	01c00044 	movi	r7,1
    2f98:	003fe306 	br	2f28 <__alt_data_end+0xfc002f28>
    2f9c:	00c00044 	movi	r3,1
    2fa0:	003fee06 	br	2f5c <__alt_data_end+0xfc002f5c>

00002fa4 <__modsi3>:
    2fa4:	20001716 	blt	r4,zero,3004 <__modsi3+0x60>
    2fa8:	000f883a 	mov	r7,zero
    2fac:	2005883a 	mov	r2,r4
    2fb0:	28001216 	blt	r5,zero,2ffc <__modsi3+0x58>
    2fb4:	2900162e 	bgeu	r5,r4,3010 <__modsi3+0x6c>
    2fb8:	01800804 	movi	r6,32
    2fbc:	00c00044 	movi	r3,1
    2fc0:	00000106 	br	2fc8 <__modsi3+0x24>
    2fc4:	30000a26 	beq	r6,zero,2ff0 <__modsi3+0x4c>
    2fc8:	294b883a 	add	r5,r5,r5
    2fcc:	31bfffc4 	addi	r6,r6,-1
    2fd0:	18c7883a 	add	r3,r3,r3
    2fd4:	293ffb36 	bltu	r5,r4,2fc4 <__alt_data_end+0xfc002fc4>
    2fd8:	18000526 	beq	r3,zero,2ff0 <__modsi3+0x4c>
    2fdc:	1806d07a 	srli	r3,r3,1
    2fe0:	11400136 	bltu	r2,r5,2fe8 <__modsi3+0x44>
    2fe4:	1145c83a 	sub	r2,r2,r5
    2fe8:	280ad07a 	srli	r5,r5,1
    2fec:	183ffb1e 	bne	r3,zero,2fdc <__alt_data_end+0xfc002fdc>
    2ff0:	38000126 	beq	r7,zero,2ff8 <__modsi3+0x54>
    2ff4:	0085c83a 	sub	r2,zero,r2
    2ff8:	f800283a 	ret
    2ffc:	014bc83a 	sub	r5,zero,r5
    3000:	003fec06 	br	2fb4 <__alt_data_end+0xfc002fb4>
    3004:	0109c83a 	sub	r4,zero,r4
    3008:	01c00044 	movi	r7,1
    300c:	003fe706 	br	2fac <__alt_data_end+0xfc002fac>
    3010:	00c00044 	movi	r3,1
    3014:	003ff106 	br	2fdc <__alt_data_end+0xfc002fdc>

00003018 <__udivsi3>:
    3018:	200d883a 	mov	r6,r4
    301c:	2900152e 	bgeu	r5,r4,3074 <__udivsi3+0x5c>
    3020:	28001416 	blt	r5,zero,3074 <__udivsi3+0x5c>
    3024:	00800804 	movi	r2,32
    3028:	00c00044 	movi	r3,1
    302c:	00000206 	br	3038 <__udivsi3+0x20>
    3030:	10000e26 	beq	r2,zero,306c <__udivsi3+0x54>
    3034:	28000516 	blt	r5,zero,304c <__udivsi3+0x34>
    3038:	294b883a 	add	r5,r5,r5
    303c:	10bfffc4 	addi	r2,r2,-1
    3040:	18c7883a 	add	r3,r3,r3
    3044:	293ffa36 	bltu	r5,r4,3030 <__alt_data_end+0xfc003030>
    3048:	18000826 	beq	r3,zero,306c <__udivsi3+0x54>
    304c:	0005883a 	mov	r2,zero
    3050:	31400236 	bltu	r6,r5,305c <__udivsi3+0x44>
    3054:	314dc83a 	sub	r6,r6,r5
    3058:	10c4b03a 	or	r2,r2,r3
    305c:	1806d07a 	srli	r3,r3,1
    3060:	280ad07a 	srli	r5,r5,1
    3064:	183ffa1e 	bne	r3,zero,3050 <__alt_data_end+0xfc003050>
    3068:	f800283a 	ret
    306c:	0005883a 	mov	r2,zero
    3070:	f800283a 	ret
    3074:	00c00044 	movi	r3,1
    3078:	003ff406 	br	304c <__alt_data_end+0xfc00304c>

0000307c <__umodsi3>:
    307c:	2005883a 	mov	r2,r4
    3080:	2900122e 	bgeu	r5,r4,30cc <__umodsi3+0x50>
    3084:	28001116 	blt	r5,zero,30cc <__umodsi3+0x50>
    3088:	01800804 	movi	r6,32
    308c:	00c00044 	movi	r3,1
    3090:	00000206 	br	309c <__umodsi3+0x20>
    3094:	30000c26 	beq	r6,zero,30c8 <__umodsi3+0x4c>
    3098:	28000516 	blt	r5,zero,30b0 <__umodsi3+0x34>
    309c:	294b883a 	add	r5,r5,r5
    30a0:	31bfffc4 	addi	r6,r6,-1
    30a4:	18c7883a 	add	r3,r3,r3
    30a8:	293ffa36 	bltu	r5,r4,3094 <__alt_data_end+0xfc003094>
    30ac:	18000626 	beq	r3,zero,30c8 <__umodsi3+0x4c>
    30b0:	1806d07a 	srli	r3,r3,1
    30b4:	11400136 	bltu	r2,r5,30bc <__umodsi3+0x40>
    30b8:	1145c83a 	sub	r2,r2,r5
    30bc:	280ad07a 	srli	r5,r5,1
    30c0:	183ffb1e 	bne	r3,zero,30b0 <__alt_data_end+0xfc0030b0>
    30c4:	f800283a 	ret
    30c8:	f800283a 	ret
    30cc:	00c00044 	movi	r3,1
    30d0:	003ff706 	br	30b0 <__alt_data_end+0xfc0030b0>

000030d4 <__mulsi3>:
    30d4:	0005883a 	mov	r2,zero
    30d8:	20000726 	beq	r4,zero,30f8 <__mulsi3+0x24>
    30dc:	20c0004c 	andi	r3,r4,1
    30e0:	2008d07a 	srli	r4,r4,1
    30e4:	18000126 	beq	r3,zero,30ec <__mulsi3+0x18>
    30e8:	1145883a 	add	r2,r2,r5
    30ec:	294b883a 	add	r5,r5,r5
    30f0:	203ffa1e 	bne	r4,zero,30dc <__alt_data_end+0xfc0030dc>
    30f4:	f800283a 	ret
    30f8:	f800283a 	ret

000030fc <_printf_r>:
    30fc:	defffd04 	addi	sp,sp,-12
    3100:	2805883a 	mov	r2,r5
    3104:	dfc00015 	stw	ra,0(sp)
    3108:	d9800115 	stw	r6,4(sp)
    310c:	d9c00215 	stw	r7,8(sp)
    3110:	21400217 	ldw	r5,8(r4)
    3114:	d9c00104 	addi	r7,sp,4
    3118:	100d883a 	mov	r6,r2
    311c:	00032d40 	call	32d4 <___vfprintf_internal_r>
    3120:	dfc00017 	ldw	ra,0(sp)
    3124:	dec00304 	addi	sp,sp,12
    3128:	f800283a 	ret

0000312c <printf>:
    312c:	defffc04 	addi	sp,sp,-16
    3130:	dfc00015 	stw	ra,0(sp)
    3134:	d9400115 	stw	r5,4(sp)
    3138:	d9800215 	stw	r6,8(sp)
    313c:	d9c00315 	stw	r7,12(sp)
    3140:	00800074 	movhi	r2,1
    3144:	109ac804 	addi	r2,r2,27424
    3148:	10800017 	ldw	r2,0(r2)
    314c:	200b883a 	mov	r5,r4
    3150:	d9800104 	addi	r6,sp,4
    3154:	11000217 	ldw	r4,8(r2)
    3158:	00055b00 	call	55b0 <__vfprintf_internal>
    315c:	dfc00017 	ldw	ra,0(sp)
    3160:	dec00404 	addi	sp,sp,16
    3164:	f800283a 	ret

00003168 <_puts_r>:
    3168:	defff604 	addi	sp,sp,-40
    316c:	dc000715 	stw	r16,28(sp)
    3170:	2021883a 	mov	r16,r4
    3174:	2809883a 	mov	r4,r5
    3178:	dc400815 	stw	r17,32(sp)
    317c:	dfc00915 	stw	ra,36(sp)
    3180:	2823883a 	mov	r17,r5
    3184:	000323c0 	call	323c <strlen>
    3188:	10c00044 	addi	r3,r2,1
    318c:	d8800115 	stw	r2,4(sp)
    3190:	00800074 	movhi	r2,1
    3194:	10933304 	addi	r2,r2,19660
    3198:	d8800215 	stw	r2,8(sp)
    319c:	00800044 	movi	r2,1
    31a0:	d8800315 	stw	r2,12(sp)
    31a4:	00800084 	movi	r2,2
    31a8:	dc400015 	stw	r17,0(sp)
    31ac:	d8c00615 	stw	r3,24(sp)
    31b0:	dec00415 	stw	sp,16(sp)
    31b4:	d8800515 	stw	r2,20(sp)
    31b8:	80000226 	beq	r16,zero,31c4 <_puts_r+0x5c>
    31bc:	80800e17 	ldw	r2,56(r16)
    31c0:	10001426 	beq	r2,zero,3214 <_puts_r+0xac>
    31c4:	81400217 	ldw	r5,8(r16)
    31c8:	2880030b 	ldhu	r2,12(r5)
    31cc:	10c8000c 	andi	r3,r2,8192
    31d0:	1800061e 	bne	r3,zero,31ec <_puts_r+0x84>
    31d4:	29001917 	ldw	r4,100(r5)
    31d8:	00f7ffc4 	movi	r3,-8193
    31dc:	10880014 	ori	r2,r2,8192
    31e0:	20c6703a 	and	r3,r4,r3
    31e4:	2880030d 	sth	r2,12(r5)
    31e8:	28c01915 	stw	r3,100(r5)
    31ec:	d9800404 	addi	r6,sp,16
    31f0:	8009883a 	mov	r4,r16
    31f4:	0007b180 	call	7b18 <__sfvwrite_r>
    31f8:	1000091e 	bne	r2,zero,3220 <_puts_r+0xb8>
    31fc:	00800284 	movi	r2,10
    3200:	dfc00917 	ldw	ra,36(sp)
    3204:	dc400817 	ldw	r17,32(sp)
    3208:	dc000717 	ldw	r16,28(sp)
    320c:	dec00a04 	addi	sp,sp,40
    3210:	f800283a 	ret
    3214:	8009883a 	mov	r4,r16
    3218:	00076940 	call	7694 <__sinit>
    321c:	003fe906 	br	31c4 <__alt_data_end+0xfc0031c4>
    3220:	00bfffc4 	movi	r2,-1
    3224:	003ff606 	br	3200 <__alt_data_end+0xfc003200>

00003228 <puts>:
    3228:	00800074 	movhi	r2,1
    322c:	109ac804 	addi	r2,r2,27424
    3230:	200b883a 	mov	r5,r4
    3234:	11000017 	ldw	r4,0(r2)
    3238:	00031681 	jmpi	3168 <_puts_r>

0000323c <strlen>:
    323c:	208000cc 	andi	r2,r4,3
    3240:	10002026 	beq	r2,zero,32c4 <strlen+0x88>
    3244:	20800007 	ldb	r2,0(r4)
    3248:	10002026 	beq	r2,zero,32cc <strlen+0x90>
    324c:	2005883a 	mov	r2,r4
    3250:	00000206 	br	325c <strlen+0x20>
    3254:	10c00007 	ldb	r3,0(r2)
    3258:	18001826 	beq	r3,zero,32bc <strlen+0x80>
    325c:	10800044 	addi	r2,r2,1
    3260:	10c000cc 	andi	r3,r2,3
    3264:	183ffb1e 	bne	r3,zero,3254 <__alt_data_end+0xfc003254>
    3268:	10c00017 	ldw	r3,0(r2)
    326c:	01ffbff4 	movhi	r7,65279
    3270:	39ffbfc4 	addi	r7,r7,-257
    3274:	00ca303a 	nor	r5,zero,r3
    3278:	01a02074 	movhi	r6,32897
    327c:	19c7883a 	add	r3,r3,r7
    3280:	31a02004 	addi	r6,r6,-32640
    3284:	1946703a 	and	r3,r3,r5
    3288:	1986703a 	and	r3,r3,r6
    328c:	1800091e 	bne	r3,zero,32b4 <strlen+0x78>
    3290:	10800104 	addi	r2,r2,4
    3294:	10c00017 	ldw	r3,0(r2)
    3298:	19cb883a 	add	r5,r3,r7
    329c:	00c6303a 	nor	r3,zero,r3
    32a0:	28c6703a 	and	r3,r5,r3
    32a4:	1986703a 	and	r3,r3,r6
    32a8:	183ff926 	beq	r3,zero,3290 <__alt_data_end+0xfc003290>
    32ac:	00000106 	br	32b4 <strlen+0x78>
    32b0:	10800044 	addi	r2,r2,1
    32b4:	10c00007 	ldb	r3,0(r2)
    32b8:	183ffd1e 	bne	r3,zero,32b0 <__alt_data_end+0xfc0032b0>
    32bc:	1105c83a 	sub	r2,r2,r4
    32c0:	f800283a 	ret
    32c4:	2005883a 	mov	r2,r4
    32c8:	003fe706 	br	3268 <__alt_data_end+0xfc003268>
    32cc:	0005883a 	mov	r2,zero
    32d0:	f800283a 	ret

000032d4 <___vfprintf_internal_r>:
    32d4:	deffb804 	addi	sp,sp,-288
    32d8:	dfc04715 	stw	ra,284(sp)
    32dc:	ddc04515 	stw	r23,276(sp)
    32e0:	dd404315 	stw	r21,268(sp)
    32e4:	d9002d15 	stw	r4,180(sp)
    32e8:	282f883a 	mov	r23,r5
    32ec:	302b883a 	mov	r21,r6
    32f0:	d9c02e15 	stw	r7,184(sp)
    32f4:	df004615 	stw	fp,280(sp)
    32f8:	dd804415 	stw	r22,272(sp)
    32fc:	dd004215 	stw	r20,264(sp)
    3300:	dcc04115 	stw	r19,260(sp)
    3304:	dc804015 	stw	r18,256(sp)
    3308:	dc403f15 	stw	r17,252(sp)
    330c:	dc003e15 	stw	r16,248(sp)
    3310:	00082140 	call	8214 <_localeconv_r>
    3314:	10800017 	ldw	r2,0(r2)
    3318:	1009883a 	mov	r4,r2
    331c:	d8803415 	stw	r2,208(sp)
    3320:	000323c0 	call	323c <strlen>
    3324:	d8803715 	stw	r2,220(sp)
    3328:	d8802d17 	ldw	r2,180(sp)
    332c:	10000226 	beq	r2,zero,3338 <___vfprintf_internal_r+0x64>
    3330:	10800e17 	ldw	r2,56(r2)
    3334:	1000fb26 	beq	r2,zero,3724 <___vfprintf_internal_r+0x450>
    3338:	b880030b 	ldhu	r2,12(r23)
    333c:	10c8000c 	andi	r3,r2,8192
    3340:	1800061e 	bne	r3,zero,335c <___vfprintf_internal_r+0x88>
    3344:	b9001917 	ldw	r4,100(r23)
    3348:	00f7ffc4 	movi	r3,-8193
    334c:	10880014 	ori	r2,r2,8192
    3350:	20c6703a 	and	r3,r4,r3
    3354:	b880030d 	sth	r2,12(r23)
    3358:	b8c01915 	stw	r3,100(r23)
    335c:	10c0020c 	andi	r3,r2,8
    3360:	1800c326 	beq	r3,zero,3670 <___vfprintf_internal_r+0x39c>
    3364:	b8c00417 	ldw	r3,16(r23)
    3368:	1800c126 	beq	r3,zero,3670 <___vfprintf_internal_r+0x39c>
    336c:	1080068c 	andi	r2,r2,26
    3370:	00c00284 	movi	r3,10
    3374:	10c0c626 	beq	r2,r3,3690 <___vfprintf_internal_r+0x3bc>
    3378:	d8c00404 	addi	r3,sp,16
    337c:	05000074 	movhi	r20,1
    3380:	d9001e04 	addi	r4,sp,120
    3384:	a5134484 	addi	r20,r20,19730
    3388:	d8c01e15 	stw	r3,120(sp)
    338c:	d8002015 	stw	zero,128(sp)
    3390:	d8001f15 	stw	zero,124(sp)
    3394:	d8003315 	stw	zero,204(sp)
    3398:	d8003615 	stw	zero,216(sp)
    339c:	d8003815 	stw	zero,224(sp)
    33a0:	1811883a 	mov	r8,r3
    33a4:	d8003915 	stw	zero,228(sp)
    33a8:	d8003a15 	stw	zero,232(sp)
    33ac:	d8002f15 	stw	zero,188(sp)
    33b0:	d9002815 	stw	r4,160(sp)
    33b4:	a8800007 	ldb	r2,0(r21)
    33b8:	10028b26 	beq	r2,zero,3de8 <___vfprintf_internal_r+0xb14>
    33bc:	00c00944 	movi	r3,37
    33c0:	a823883a 	mov	r17,r21
    33c4:	10c0021e 	bne	r2,r3,33d0 <___vfprintf_internal_r+0xfc>
    33c8:	00001406 	br	341c <___vfprintf_internal_r+0x148>
    33cc:	10c00326 	beq	r2,r3,33dc <___vfprintf_internal_r+0x108>
    33d0:	8c400044 	addi	r17,r17,1
    33d4:	88800007 	ldb	r2,0(r17)
    33d8:	103ffc1e 	bne	r2,zero,33cc <__alt_data_end+0xfc0033cc>
    33dc:	8d61c83a 	sub	r16,r17,r21
    33e0:	80000e26 	beq	r16,zero,341c <___vfprintf_internal_r+0x148>
    33e4:	d8c02017 	ldw	r3,128(sp)
    33e8:	d8801f17 	ldw	r2,124(sp)
    33ec:	45400015 	stw	r21,0(r8)
    33f0:	1c07883a 	add	r3,r3,r16
    33f4:	10800044 	addi	r2,r2,1
    33f8:	d8c02015 	stw	r3,128(sp)
    33fc:	44000115 	stw	r16,4(r8)
    3400:	d8801f15 	stw	r2,124(sp)
    3404:	00c001c4 	movi	r3,7
    3408:	1880a916 	blt	r3,r2,36b0 <___vfprintf_internal_r+0x3dc>
    340c:	42000204 	addi	r8,r8,8
    3410:	d9402f17 	ldw	r5,188(sp)
    3414:	2c0b883a 	add	r5,r5,r16
    3418:	d9402f15 	stw	r5,188(sp)
    341c:	88800007 	ldb	r2,0(r17)
    3420:	1000aa26 	beq	r2,zero,36cc <___vfprintf_internal_r+0x3f8>
    3424:	8d400044 	addi	r21,r17,1
    3428:	8c400047 	ldb	r17,1(r17)
    342c:	0021883a 	mov	r16,zero
    3430:	00bfffc4 	movi	r2,-1
    3434:	0025883a 	mov	r18,zero
    3438:	dc002905 	stb	r16,164(sp)
    343c:	d8002785 	stb	zero,158(sp)
    3440:	d8002b05 	stb	zero,172(sp)
    3444:	d8802a15 	stw	r2,168(sp)
    3448:	d8003115 	stw	zero,196(sp)
    344c:	04c01604 	movi	r19,88
    3450:	05800244 	movi	r22,9
    3454:	9021883a 	mov	r16,r18
    3458:	4039883a 	mov	fp,r8
    345c:	ad400044 	addi	r21,r21,1
    3460:	88bff804 	addi	r2,r17,-32
    3464:	98833236 	bltu	r19,r2,4130 <___vfprintf_internal_r+0xe5c>
    3468:	100490ba 	slli	r2,r2,2
    346c:	00c00034 	movhi	r3,0
    3470:	18cd2004 	addi	r3,r3,13440
    3474:	10c5883a 	add	r2,r2,r3
    3478:	10800017 	ldw	r2,0(r2)
    347c:	1000683a 	jmp	r2
    3480:	00004028 	cmpgeui	zero,zero,256
    3484:	00004130 	cmpltui	zero,zero,260
    3488:	00004130 	cmpltui	zero,zero,260
    348c:	00004048 	cmpgei	zero,zero,257
    3490:	00004130 	cmpltui	zero,zero,260
    3494:	00004130 	cmpltui	zero,zero,260
    3498:	00004130 	cmpltui	zero,zero,260
    349c:	00004130 	cmpltui	zero,zero,260
    34a0:	00004130 	cmpltui	zero,zero,260
    34a4:	00004130 	cmpltui	zero,zero,260
    34a8:	00003730 	cmpltui	zero,zero,220
    34ac:	00003f38 	rdprs	zero,zero,252
    34b0:	00004130 	cmpltui	zero,zero,260
    34b4:	000035f4 	movhi	zero,215
    34b8:	00003754 	movui	zero,221
    34bc:	00004130 	cmpltui	zero,zero,260
    34c0:	000037a4 	muli	zero,zero,222
    34c4:	000037b0 	cmpltui	zero,zero,222
    34c8:	000037b0 	cmpltui	zero,zero,222
    34cc:	000037b0 	cmpltui	zero,zero,222
    34d0:	000037b0 	cmpltui	zero,zero,222
    34d4:	000037b0 	cmpltui	zero,zero,222
    34d8:	000037b0 	cmpltui	zero,zero,222
    34dc:	000037b0 	cmpltui	zero,zero,222
    34e0:	000037b0 	cmpltui	zero,zero,222
    34e4:	000037b0 	cmpltui	zero,zero,222
    34e8:	00004130 	cmpltui	zero,zero,260
    34ec:	00004130 	cmpltui	zero,zero,260
    34f0:	00004130 	cmpltui	zero,zero,260
    34f4:	00004130 	cmpltui	zero,zero,260
    34f8:	00004130 	cmpltui	zero,zero,260
    34fc:	00004130 	cmpltui	zero,zero,260
    3500:	00004130 	cmpltui	zero,zero,260
    3504:	00004130 	cmpltui	zero,zero,260
    3508:	00004130 	cmpltui	zero,zero,260
    350c:	00004130 	cmpltui	zero,zero,260
    3510:	000037ec 	andhi	zero,zero,223
    3514:	000038b4 	movhi	zero,226
    3518:	00004130 	cmpltui	zero,zero,260
    351c:	000038b4 	movhi	zero,226
    3520:	00004130 	cmpltui	zero,zero,260
    3524:	00004130 	cmpltui	zero,zero,260
    3528:	00004130 	cmpltui	zero,zero,260
    352c:	00004130 	cmpltui	zero,zero,260
    3530:	00003960 	cmpeqi	zero,zero,229
    3534:	00004130 	cmpltui	zero,zero,260
    3538:	00004130 	cmpltui	zero,zero,260
    353c:	0000396c 	andhi	zero,zero,229
    3540:	00004130 	cmpltui	zero,zero,260
    3544:	00004130 	cmpltui	zero,zero,260
    3548:	00004130 	cmpltui	zero,zero,260
    354c:	00004130 	cmpltui	zero,zero,260
    3550:	00004130 	cmpltui	zero,zero,260
    3554:	00003df0 	cmpltui	zero,zero,247
    3558:	00004130 	cmpltui	zero,zero,260
    355c:	00004130 	cmpltui	zero,zero,260
    3560:	00003e5c 	xori	zero,zero,249
    3564:	00004130 	cmpltui	zero,zero,260
    3568:	00004130 	cmpltui	zero,zero,260
    356c:	00004130 	cmpltui	zero,zero,260
    3570:	00004130 	cmpltui	zero,zero,260
    3574:	00004130 	cmpltui	zero,zero,260
    3578:	00004130 	cmpltui	zero,zero,260
    357c:	00004130 	cmpltui	zero,zero,260
    3580:	00004130 	cmpltui	zero,zero,260
    3584:	00004130 	cmpltui	zero,zero,260
    3588:	00004130 	cmpltui	zero,zero,260
    358c:	000040d4 	movui	zero,259
    3590:	00004054 	movui	zero,257
    3594:	000038b4 	movhi	zero,226
    3598:	000038b4 	movhi	zero,226
    359c:	000038b4 	movhi	zero,226
    35a0:	00004074 	movhi	zero,257
    35a4:	00004054 	movui	zero,257
    35a8:	00004130 	cmpltui	zero,zero,260
    35ac:	00004130 	cmpltui	zero,zero,260
    35b0:	00004080 	call	408 <I2Cbytes_wr+0x104>
    35b4:	00004130 	cmpltui	zero,zero,260
    35b8:	00004094 	movui	zero,258
    35bc:	00003f18 	cmpnei	zero,zero,252
    35c0:	00003600 	call	360 <I2Cbytes_wr+0x5c>
    35c4:	00003f50 	cmplti	zero,zero,253
    35c8:	00004130 	cmpltui	zero,zero,260
    35cc:	00003f5c 	xori	zero,zero,253
    35d0:	00004130 	cmpltui	zero,zero,260
    35d4:	00003fc0 	call	3fc <I2Cbytes_wr+0xf8>
    35d8:	00004130 	cmpltui	zero,zero,260
    35dc:	00004130 	cmpltui	zero,zero,260
    35e0:	00003fe0 	cmpeqi	zero,zero,255
    35e4:	d8c03117 	ldw	r3,196(sp)
    35e8:	d8802e15 	stw	r2,184(sp)
    35ec:	00c7c83a 	sub	r3,zero,r3
    35f0:	d8c03115 	stw	r3,196(sp)
    35f4:	84000114 	ori	r16,r16,4
    35f8:	ac400007 	ldb	r17,0(r21)
    35fc:	003f9706 	br	345c <__alt_data_end+0xfc00345c>
    3600:	00800c04 	movi	r2,48
    3604:	d8802705 	stb	r2,156(sp)
    3608:	00801e04 	movi	r2,120
    360c:	d8802745 	stb	r2,157(sp)
    3610:	d9002a17 	ldw	r4,168(sp)
    3614:	d8802e17 	ldw	r2,184(sp)
    3618:	d8002785 	stb	zero,158(sp)
    361c:	e011883a 	mov	r8,fp
    3620:	10c00104 	addi	r3,r2,4
    3624:	14c00017 	ldw	r19,0(r2)
    3628:	002d883a 	mov	r22,zero
    362c:	80800094 	ori	r2,r16,2
    3630:	2002ca16 	blt	r4,zero,415c <___vfprintf_internal_r+0xe88>
    3634:	00bfdfc4 	movi	r2,-129
    3638:	80a4703a 	and	r18,r16,r2
    363c:	d8c02e15 	stw	r3,184(sp)
    3640:	94800094 	ori	r18,r18,2
    3644:	9802b41e 	bne	r19,zero,4118 <___vfprintf_internal_r+0xe44>
    3648:	01400074 	movhi	r5,1
    364c:	29533d04 	addi	r5,r5,19700
    3650:	d9403915 	stw	r5,228(sp)
    3654:	04401e04 	movi	r17,120
    3658:	d8802a17 	ldw	r2,168(sp)
    365c:	0039883a 	mov	fp,zero
    3660:	1001fa26 	beq	r2,zero,3e4c <___vfprintf_internal_r+0xb78>
    3664:	0027883a 	mov	r19,zero
    3668:	002d883a 	mov	r22,zero
    366c:	00021906 	br	3ed4 <___vfprintf_internal_r+0xc00>
    3670:	d9002d17 	ldw	r4,180(sp)
    3674:	b80b883a 	mov	r5,r23
    3678:	00056880 	call	5688 <__swsetup_r>
    367c:	1005dc1e 	bne	r2,zero,4df0 <___vfprintf_internal_r+0x1b1c>
    3680:	b880030b 	ldhu	r2,12(r23)
    3684:	00c00284 	movi	r3,10
    3688:	1080068c 	andi	r2,r2,26
    368c:	10ff3a1e 	bne	r2,r3,3378 <__alt_data_end+0xfc003378>
    3690:	b880038f 	ldh	r2,14(r23)
    3694:	103f3816 	blt	r2,zero,3378 <__alt_data_end+0xfc003378>
    3698:	d9c02e17 	ldw	r7,184(sp)
    369c:	d9002d17 	ldw	r4,180(sp)
    36a0:	a80d883a 	mov	r6,r21
    36a4:	b80b883a 	mov	r5,r23
    36a8:	00055cc0 	call	55cc <__sbprintf>
    36ac:	00001106 	br	36f4 <___vfprintf_internal_r+0x420>
    36b0:	d9002d17 	ldw	r4,180(sp)
    36b4:	d9801e04 	addi	r6,sp,120
    36b8:	b80b883a 	mov	r5,r23
    36bc:	000aab40 	call	aab4 <__sprint_r>
    36c0:	1000081e 	bne	r2,zero,36e4 <___vfprintf_internal_r+0x410>
    36c4:	da000404 	addi	r8,sp,16
    36c8:	003f5106 	br	3410 <__alt_data_end+0xfc003410>
    36cc:	d8802017 	ldw	r2,128(sp)
    36d0:	10000426 	beq	r2,zero,36e4 <___vfprintf_internal_r+0x410>
    36d4:	d9002d17 	ldw	r4,180(sp)
    36d8:	d9801e04 	addi	r6,sp,120
    36dc:	b80b883a 	mov	r5,r23
    36e0:	000aab40 	call	aab4 <__sprint_r>
    36e4:	b880030b 	ldhu	r2,12(r23)
    36e8:	1080100c 	andi	r2,r2,64
    36ec:	1005c01e 	bne	r2,zero,4df0 <___vfprintf_internal_r+0x1b1c>
    36f0:	d8802f17 	ldw	r2,188(sp)
    36f4:	dfc04717 	ldw	ra,284(sp)
    36f8:	df004617 	ldw	fp,280(sp)
    36fc:	ddc04517 	ldw	r23,276(sp)
    3700:	dd804417 	ldw	r22,272(sp)
    3704:	dd404317 	ldw	r21,268(sp)
    3708:	dd004217 	ldw	r20,264(sp)
    370c:	dcc04117 	ldw	r19,260(sp)
    3710:	dc804017 	ldw	r18,256(sp)
    3714:	dc403f17 	ldw	r17,252(sp)
    3718:	dc003e17 	ldw	r16,248(sp)
    371c:	dec04804 	addi	sp,sp,288
    3720:	f800283a 	ret
    3724:	d9002d17 	ldw	r4,180(sp)
    3728:	00076940 	call	7694 <__sinit>
    372c:	003f0206 	br	3338 <__alt_data_end+0xfc003338>
    3730:	d9002e17 	ldw	r4,184(sp)
    3734:	d9402e17 	ldw	r5,184(sp)
    3738:	21000017 	ldw	r4,0(r4)
    373c:	28800104 	addi	r2,r5,4
    3740:	d9003115 	stw	r4,196(sp)
    3744:	203fa716 	blt	r4,zero,35e4 <__alt_data_end+0xfc0035e4>
    3748:	d8802e15 	stw	r2,184(sp)
    374c:	ac400007 	ldb	r17,0(r21)
    3750:	003f4206 	br	345c <__alt_data_end+0xfc00345c>
    3754:	ac400007 	ldb	r17,0(r21)
    3758:	01000a84 	movi	r4,42
    375c:	a8c00044 	addi	r3,r21,1
    3760:	89075826 	beq	r17,r4,54c4 <___vfprintf_internal_r+0x21f0>
    3764:	8cbff404 	addi	r18,r17,-48
    3768:	b486ae36 	bltu	r22,r18,5224 <___vfprintf_internal_r+0x1f50>
    376c:	0009883a 	mov	r4,zero
    3770:	1823883a 	mov	r17,r3
    3774:	01400284 	movi	r5,10
    3778:	00030d40 	call	30d4 <__mulsi3>
    377c:	88c00007 	ldb	r3,0(r17)
    3780:	1489883a 	add	r4,r2,r18
    3784:	8d400044 	addi	r21,r17,1
    3788:	1cbff404 	addi	r18,r3,-48
    378c:	a823883a 	mov	r17,r21
    3790:	b4bff82e 	bgeu	r22,r18,3774 <__alt_data_end+0xfc003774>
    3794:	1823883a 	mov	r17,r3
    3798:	2005f616 	blt	r4,zero,4f74 <___vfprintf_internal_r+0x1ca0>
    379c:	d9002a15 	stw	r4,168(sp)
    37a0:	003f2f06 	br	3460 <__alt_data_end+0xfc003460>
    37a4:	84002014 	ori	r16,r16,128
    37a8:	ac400007 	ldb	r17,0(r21)
    37ac:	003f2b06 	br	345c <__alt_data_end+0xfc00345c>
    37b0:	8cbff404 	addi	r18,r17,-48
    37b4:	d8003115 	stw	zero,196(sp)
    37b8:	0009883a 	mov	r4,zero
    37bc:	a823883a 	mov	r17,r21
    37c0:	01400284 	movi	r5,10
    37c4:	00030d40 	call	30d4 <__mulsi3>
    37c8:	88c00007 	ldb	r3,0(r17)
    37cc:	9089883a 	add	r4,r18,r2
    37d0:	ad400044 	addi	r21,r21,1
    37d4:	1cbff404 	addi	r18,r3,-48
    37d8:	a823883a 	mov	r17,r21
    37dc:	b4bff82e 	bgeu	r22,r18,37c0 <__alt_data_end+0xfc0037c0>
    37e0:	1823883a 	mov	r17,r3
    37e4:	d9003115 	stw	r4,196(sp)
    37e8:	003f1d06 	br	3460 <__alt_data_end+0xfc003460>
    37ec:	8025883a 	mov	r18,r16
    37f0:	dc002903 	ldbu	r16,164(sp)
    37f4:	e011883a 	mov	r8,fp
    37f8:	84003fcc 	andi	r16,r16,255
    37fc:	8007531e 	bne	r16,zero,554c <___vfprintf_internal_r+0x2278>
    3800:	94800414 	ori	r18,r18,16
    3804:	9080080c 	andi	r2,r18,32
    3808:	1003a326 	beq	r2,zero,4698 <___vfprintf_internal_r+0x13c4>
    380c:	d9002e17 	ldw	r4,184(sp)
    3810:	20800117 	ldw	r2,4(r4)
    3814:	24c00017 	ldw	r19,0(r4)
    3818:	21000204 	addi	r4,r4,8
    381c:	d9002e15 	stw	r4,184(sp)
    3820:	102d883a 	mov	r22,r2
    3824:	10047316 	blt	r2,zero,49f4 <___vfprintf_internal_r+0x1720>
    3828:	d9002a17 	ldw	r4,168(sp)
    382c:	df002783 	ldbu	fp,158(sp)
    3830:	2003e416 	blt	r4,zero,47c4 <___vfprintf_internal_r+0x14f0>
    3834:	00ffdfc4 	movi	r3,-129
    3838:	9d84b03a 	or	r2,r19,r22
    383c:	90e4703a 	and	r18,r18,r3
    3840:	10018026 	beq	r2,zero,3e44 <___vfprintf_internal_r+0xb70>
    3844:	b003ab26 	beq	r22,zero,46f4 <___vfprintf_internal_r+0x1420>
    3848:	dc402915 	stw	r17,164(sp)
    384c:	dc001e04 	addi	r16,sp,120
    3850:	b023883a 	mov	r17,r22
    3854:	402d883a 	mov	r22,r8
    3858:	9809883a 	mov	r4,r19
    385c:	880b883a 	mov	r5,r17
    3860:	01800284 	movi	r6,10
    3864:	000f883a 	mov	r7,zero
    3868:	000cff80 	call	cff8 <__umoddi3>
    386c:	10800c04 	addi	r2,r2,48
    3870:	843fffc4 	addi	r16,r16,-1
    3874:	9809883a 	mov	r4,r19
    3878:	880b883a 	mov	r5,r17
    387c:	80800005 	stb	r2,0(r16)
    3880:	01800284 	movi	r6,10
    3884:	000f883a 	mov	r7,zero
    3888:	000c9fc0 	call	c9fc <__udivdi3>
    388c:	1027883a 	mov	r19,r2
    3890:	10c4b03a 	or	r2,r2,r3
    3894:	1823883a 	mov	r17,r3
    3898:	103fef1e 	bne	r2,zero,3858 <__alt_data_end+0xfc003858>
    389c:	d8c02817 	ldw	r3,160(sp)
    38a0:	dc402917 	ldw	r17,164(sp)
    38a4:	b011883a 	mov	r8,r22
    38a8:	1c07c83a 	sub	r3,r3,r16
    38ac:	d8c02b15 	stw	r3,172(sp)
    38b0:	00005f06 	br	3a30 <___vfprintf_internal_r+0x75c>
    38b4:	8025883a 	mov	r18,r16
    38b8:	dc002903 	ldbu	r16,164(sp)
    38bc:	e011883a 	mov	r8,fp
    38c0:	84003fcc 	andi	r16,r16,255
    38c4:	80071e1e 	bne	r16,zero,5540 <___vfprintf_internal_r+0x226c>
    38c8:	9080020c 	andi	r2,r18,8
    38cc:	1004af26 	beq	r2,zero,4b8c <___vfprintf_internal_r+0x18b8>
    38d0:	d9002e17 	ldw	r4,184(sp)
    38d4:	d9402e17 	ldw	r5,184(sp)
    38d8:	d8802e17 	ldw	r2,184(sp)
    38dc:	21000017 	ldw	r4,0(r4)
    38e0:	29400117 	ldw	r5,4(r5)
    38e4:	10800204 	addi	r2,r2,8
    38e8:	d9003615 	stw	r4,216(sp)
    38ec:	d9403815 	stw	r5,224(sp)
    38f0:	d8802e15 	stw	r2,184(sp)
    38f4:	d9003617 	ldw	r4,216(sp)
    38f8:	d9403817 	ldw	r5,224(sp)
    38fc:	da003d15 	stw	r8,244(sp)
    3900:	04000044 	movi	r16,1
    3904:	000a6d80 	call	a6d8 <__fpclassifyd>
    3908:	da003d17 	ldw	r8,244(sp)
    390c:	1404441e 	bne	r2,r16,4a20 <___vfprintf_internal_r+0x174c>
    3910:	d9003617 	ldw	r4,216(sp)
    3914:	d9403817 	ldw	r5,224(sp)
    3918:	000d883a 	mov	r6,zero
    391c:	000f883a 	mov	r7,zero
    3920:	000e99c0 	call	e99c <__ledf2>
    3924:	da003d17 	ldw	r8,244(sp)
    3928:	1005e316 	blt	r2,zero,50b8 <___vfprintf_internal_r+0x1de4>
    392c:	df002783 	ldbu	fp,158(sp)
    3930:	008011c4 	movi	r2,71
    3934:	1445580e 	bge	r2,r17,4e98 <___vfprintf_internal_r+0x1bc4>
    3938:	04000074 	movhi	r16,1
    393c:	84133504 	addi	r16,r16,19668
    3940:	00c000c4 	movi	r3,3
    3944:	00bfdfc4 	movi	r2,-129
    3948:	d8c02915 	stw	r3,164(sp)
    394c:	90a4703a 	and	r18,r18,r2
    3950:	d8c02b15 	stw	r3,172(sp)
    3954:	d8002a15 	stw	zero,168(sp)
    3958:	d8003215 	stw	zero,200(sp)
    395c:	00003a06 	br	3a48 <___vfprintf_internal_r+0x774>
    3960:	84000214 	ori	r16,r16,8
    3964:	ac400007 	ldb	r17,0(r21)
    3968:	003ebc06 	br	345c <__alt_data_end+0xfc00345c>
    396c:	8025883a 	mov	r18,r16
    3970:	dc002903 	ldbu	r16,164(sp)
    3974:	e011883a 	mov	r8,fp
    3978:	84003fcc 	andi	r16,r16,255
    397c:	8007001e 	bne	r16,zero,5580 <___vfprintf_internal_r+0x22ac>
    3980:	94800414 	ori	r18,r18,16
    3984:	9080080c 	andi	r2,r18,32
    3988:	1002fa26 	beq	r2,zero,4574 <___vfprintf_internal_r+0x12a0>
    398c:	d9002e17 	ldw	r4,184(sp)
    3990:	d9402a17 	ldw	r5,168(sp)
    3994:	d8002785 	stb	zero,158(sp)
    3998:	20800204 	addi	r2,r4,8
    399c:	24c00017 	ldw	r19,0(r4)
    39a0:	25800117 	ldw	r22,4(r4)
    39a4:	2804b116 	blt	r5,zero,4c6c <___vfprintf_internal_r+0x1998>
    39a8:	013fdfc4 	movi	r4,-129
    39ac:	9d86b03a 	or	r3,r19,r22
    39b0:	d8802e15 	stw	r2,184(sp)
    39b4:	9124703a 	and	r18,r18,r4
    39b8:	1802fb1e 	bne	r3,zero,45a8 <___vfprintf_internal_r+0x12d4>
    39bc:	d8c02a17 	ldw	r3,168(sp)
    39c0:	0039883a 	mov	fp,zero
    39c4:	1805e526 	beq	r3,zero,515c <___vfprintf_internal_r+0x1e88>
    39c8:	0027883a 	mov	r19,zero
    39cc:	002d883a 	mov	r22,zero
    39d0:	dc001e04 	addi	r16,sp,120
    39d4:	9806d0fa 	srli	r3,r19,3
    39d8:	b008977a 	slli	r4,r22,29
    39dc:	b02cd0fa 	srli	r22,r22,3
    39e0:	9cc001cc 	andi	r19,r19,7
    39e4:	98800c04 	addi	r2,r19,48
    39e8:	843fffc4 	addi	r16,r16,-1
    39ec:	20e6b03a 	or	r19,r4,r3
    39f0:	80800005 	stb	r2,0(r16)
    39f4:	9d86b03a 	or	r3,r19,r22
    39f8:	183ff61e 	bne	r3,zero,39d4 <__alt_data_end+0xfc0039d4>
    39fc:	90c0004c 	andi	r3,r18,1
    3a00:	18014126 	beq	r3,zero,3f08 <___vfprintf_internal_r+0xc34>
    3a04:	10803fcc 	andi	r2,r2,255
    3a08:	1080201c 	xori	r2,r2,128
    3a0c:	10bfe004 	addi	r2,r2,-128
    3a10:	00c00c04 	movi	r3,48
    3a14:	10c13c26 	beq	r2,r3,3f08 <___vfprintf_internal_r+0xc34>
    3a18:	80ffffc5 	stb	r3,-1(r16)
    3a1c:	d8c02817 	ldw	r3,160(sp)
    3a20:	80bfffc4 	addi	r2,r16,-1
    3a24:	1021883a 	mov	r16,r2
    3a28:	1887c83a 	sub	r3,r3,r2
    3a2c:	d8c02b15 	stw	r3,172(sp)
    3a30:	d8802b17 	ldw	r2,172(sp)
    3a34:	d9002a17 	ldw	r4,168(sp)
    3a38:	1100010e 	bge	r2,r4,3a40 <___vfprintf_internal_r+0x76c>
    3a3c:	2005883a 	mov	r2,r4
    3a40:	d8802915 	stw	r2,164(sp)
    3a44:	d8003215 	stw	zero,200(sp)
    3a48:	e7003fcc 	andi	fp,fp,255
    3a4c:	e700201c 	xori	fp,fp,128
    3a50:	e73fe004 	addi	fp,fp,-128
    3a54:	e0000326 	beq	fp,zero,3a64 <___vfprintf_internal_r+0x790>
    3a58:	d8c02917 	ldw	r3,164(sp)
    3a5c:	18c00044 	addi	r3,r3,1
    3a60:	d8c02915 	stw	r3,164(sp)
    3a64:	90c0008c 	andi	r3,r18,2
    3a68:	d8c02c15 	stw	r3,176(sp)
    3a6c:	18000326 	beq	r3,zero,3a7c <___vfprintf_internal_r+0x7a8>
    3a70:	d8c02917 	ldw	r3,164(sp)
    3a74:	18c00084 	addi	r3,r3,2
    3a78:	d8c02915 	stw	r3,164(sp)
    3a7c:	90c0210c 	andi	r3,r18,132
    3a80:	d8c03015 	stw	r3,192(sp)
    3a84:	1801c51e 	bne	r3,zero,419c <___vfprintf_internal_r+0xec8>
    3a88:	d9003117 	ldw	r4,196(sp)
    3a8c:	d8c02917 	ldw	r3,164(sp)
    3a90:	20e7c83a 	sub	r19,r4,r3
    3a94:	04c1c10e 	bge	zero,r19,419c <___vfprintf_internal_r+0xec8>
    3a98:	02400404 	movi	r9,16
    3a9c:	d8c02017 	ldw	r3,128(sp)
    3aa0:	d8801f17 	ldw	r2,124(sp)
    3aa4:	4cc52f0e 	bge	r9,r19,4f64 <___vfprintf_internal_r+0x1c90>
    3aa8:	01400074 	movhi	r5,1
    3aac:	29534884 	addi	r5,r5,19746
    3ab0:	dc403b15 	stw	r17,236(sp)
    3ab4:	d9403515 	stw	r5,212(sp)
    3ab8:	9823883a 	mov	r17,r19
    3abc:	482d883a 	mov	r22,r9
    3ac0:	9027883a 	mov	r19,r18
    3ac4:	070001c4 	movi	fp,7
    3ac8:	8025883a 	mov	r18,r16
    3acc:	dc002d17 	ldw	r16,180(sp)
    3ad0:	00000306 	br	3ae0 <___vfprintf_internal_r+0x80c>
    3ad4:	8c7ffc04 	addi	r17,r17,-16
    3ad8:	42000204 	addi	r8,r8,8
    3adc:	b440130e 	bge	r22,r17,3b2c <___vfprintf_internal_r+0x858>
    3ae0:	01000074 	movhi	r4,1
    3ae4:	18c00404 	addi	r3,r3,16
    3ae8:	10800044 	addi	r2,r2,1
    3aec:	21134884 	addi	r4,r4,19746
    3af0:	41000015 	stw	r4,0(r8)
    3af4:	45800115 	stw	r22,4(r8)
    3af8:	d8c02015 	stw	r3,128(sp)
    3afc:	d8801f15 	stw	r2,124(sp)
    3b00:	e0bff40e 	bge	fp,r2,3ad4 <__alt_data_end+0xfc003ad4>
    3b04:	d9801e04 	addi	r6,sp,120
    3b08:	b80b883a 	mov	r5,r23
    3b0c:	8009883a 	mov	r4,r16
    3b10:	000aab40 	call	aab4 <__sprint_r>
    3b14:	103ef31e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    3b18:	8c7ffc04 	addi	r17,r17,-16
    3b1c:	d8c02017 	ldw	r3,128(sp)
    3b20:	d8801f17 	ldw	r2,124(sp)
    3b24:	da000404 	addi	r8,sp,16
    3b28:	b47fed16 	blt	r22,r17,3ae0 <__alt_data_end+0xfc003ae0>
    3b2c:	9021883a 	mov	r16,r18
    3b30:	9825883a 	mov	r18,r19
    3b34:	8827883a 	mov	r19,r17
    3b38:	dc403b17 	ldw	r17,236(sp)
    3b3c:	d9403517 	ldw	r5,212(sp)
    3b40:	98c7883a 	add	r3,r19,r3
    3b44:	10800044 	addi	r2,r2,1
    3b48:	41400015 	stw	r5,0(r8)
    3b4c:	44c00115 	stw	r19,4(r8)
    3b50:	d8c02015 	stw	r3,128(sp)
    3b54:	d8801f15 	stw	r2,124(sp)
    3b58:	010001c4 	movi	r4,7
    3b5c:	2082c516 	blt	r4,r2,4674 <___vfprintf_internal_r+0x13a0>
    3b60:	df002787 	ldb	fp,158(sp)
    3b64:	42000204 	addi	r8,r8,8
    3b68:	e0000c26 	beq	fp,zero,3b9c <___vfprintf_internal_r+0x8c8>
    3b6c:	d8801f17 	ldw	r2,124(sp)
    3b70:	d9002784 	addi	r4,sp,158
    3b74:	18c00044 	addi	r3,r3,1
    3b78:	10800044 	addi	r2,r2,1
    3b7c:	41000015 	stw	r4,0(r8)
    3b80:	01000044 	movi	r4,1
    3b84:	41000115 	stw	r4,4(r8)
    3b88:	d8c02015 	stw	r3,128(sp)
    3b8c:	d8801f15 	stw	r2,124(sp)
    3b90:	010001c4 	movi	r4,7
    3b94:	20825e16 	blt	r4,r2,4510 <___vfprintf_internal_r+0x123c>
    3b98:	42000204 	addi	r8,r8,8
    3b9c:	d8802c17 	ldw	r2,176(sp)
    3ba0:	10000c26 	beq	r2,zero,3bd4 <___vfprintf_internal_r+0x900>
    3ba4:	d8801f17 	ldw	r2,124(sp)
    3ba8:	d9002704 	addi	r4,sp,156
    3bac:	18c00084 	addi	r3,r3,2
    3bb0:	10800044 	addi	r2,r2,1
    3bb4:	41000015 	stw	r4,0(r8)
    3bb8:	01000084 	movi	r4,2
    3bbc:	41000115 	stw	r4,4(r8)
    3bc0:	d8c02015 	stw	r3,128(sp)
    3bc4:	d8801f15 	stw	r2,124(sp)
    3bc8:	010001c4 	movi	r4,7
    3bcc:	20825816 	blt	r4,r2,4530 <___vfprintf_internal_r+0x125c>
    3bd0:	42000204 	addi	r8,r8,8
    3bd4:	d9003017 	ldw	r4,192(sp)
    3bd8:	00802004 	movi	r2,128
    3bdc:	2081bb26 	beq	r4,r2,42cc <___vfprintf_internal_r+0xff8>
    3be0:	d9402a17 	ldw	r5,168(sp)
    3be4:	d8802b17 	ldw	r2,172(sp)
    3be8:	28adc83a 	sub	r22,r5,r2
    3bec:	0580310e 	bge	zero,r22,3cb4 <___vfprintf_internal_r+0x9e0>
    3bf0:	07000404 	movi	fp,16
    3bf4:	d8801f17 	ldw	r2,124(sp)
    3bf8:	e584360e 	bge	fp,r22,4cd4 <___vfprintf_internal_r+0x1a00>
    3bfc:	01400074 	movhi	r5,1
    3c00:	29534484 	addi	r5,r5,19730
    3c04:	dc402a15 	stw	r17,168(sp)
    3c08:	d9402c15 	stw	r5,176(sp)
    3c0c:	b023883a 	mov	r17,r22
    3c10:	04c001c4 	movi	r19,7
    3c14:	a82d883a 	mov	r22,r21
    3c18:	902b883a 	mov	r21,r18
    3c1c:	8025883a 	mov	r18,r16
    3c20:	dc002d17 	ldw	r16,180(sp)
    3c24:	00000306 	br	3c34 <___vfprintf_internal_r+0x960>
    3c28:	8c7ffc04 	addi	r17,r17,-16
    3c2c:	42000204 	addi	r8,r8,8
    3c30:	e440110e 	bge	fp,r17,3c78 <___vfprintf_internal_r+0x9a4>
    3c34:	18c00404 	addi	r3,r3,16
    3c38:	10800044 	addi	r2,r2,1
    3c3c:	45000015 	stw	r20,0(r8)
    3c40:	47000115 	stw	fp,4(r8)
    3c44:	d8c02015 	stw	r3,128(sp)
    3c48:	d8801f15 	stw	r2,124(sp)
    3c4c:	98bff60e 	bge	r19,r2,3c28 <__alt_data_end+0xfc003c28>
    3c50:	d9801e04 	addi	r6,sp,120
    3c54:	b80b883a 	mov	r5,r23
    3c58:	8009883a 	mov	r4,r16
    3c5c:	000aab40 	call	aab4 <__sprint_r>
    3c60:	103ea01e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    3c64:	8c7ffc04 	addi	r17,r17,-16
    3c68:	d8c02017 	ldw	r3,128(sp)
    3c6c:	d8801f17 	ldw	r2,124(sp)
    3c70:	da000404 	addi	r8,sp,16
    3c74:	e47fef16 	blt	fp,r17,3c34 <__alt_data_end+0xfc003c34>
    3c78:	9021883a 	mov	r16,r18
    3c7c:	a825883a 	mov	r18,r21
    3c80:	b02b883a 	mov	r21,r22
    3c84:	882d883a 	mov	r22,r17
    3c88:	dc402a17 	ldw	r17,168(sp)
    3c8c:	d9002c17 	ldw	r4,176(sp)
    3c90:	1d87883a 	add	r3,r3,r22
    3c94:	10800044 	addi	r2,r2,1
    3c98:	41000015 	stw	r4,0(r8)
    3c9c:	45800115 	stw	r22,4(r8)
    3ca0:	d8c02015 	stw	r3,128(sp)
    3ca4:	d8801f15 	stw	r2,124(sp)
    3ca8:	010001c4 	movi	r4,7
    3cac:	20821016 	blt	r4,r2,44f0 <___vfprintf_internal_r+0x121c>
    3cb0:	42000204 	addi	r8,r8,8
    3cb4:	9080400c 	andi	r2,r18,256
    3cb8:	10013a1e 	bne	r2,zero,41a4 <___vfprintf_internal_r+0xed0>
    3cbc:	d9402b17 	ldw	r5,172(sp)
    3cc0:	d8801f17 	ldw	r2,124(sp)
    3cc4:	44000015 	stw	r16,0(r8)
    3cc8:	1947883a 	add	r3,r3,r5
    3ccc:	10800044 	addi	r2,r2,1
    3cd0:	41400115 	stw	r5,4(r8)
    3cd4:	d8c02015 	stw	r3,128(sp)
    3cd8:	d8801f15 	stw	r2,124(sp)
    3cdc:	010001c4 	movi	r4,7
    3ce0:	2081f516 	blt	r4,r2,44b8 <___vfprintf_internal_r+0x11e4>
    3ce4:	42000204 	addi	r8,r8,8
    3ce8:	9480010c 	andi	r18,r18,4
    3cec:	90003226 	beq	r18,zero,3db8 <___vfprintf_internal_r+0xae4>
    3cf0:	d9403117 	ldw	r5,196(sp)
    3cf4:	d8802917 	ldw	r2,164(sp)
    3cf8:	28a1c83a 	sub	r16,r5,r2
    3cfc:	04002e0e 	bge	zero,r16,3db8 <___vfprintf_internal_r+0xae4>
    3d00:	04400404 	movi	r17,16
    3d04:	d8801f17 	ldw	r2,124(sp)
    3d08:	8c04c40e 	bge	r17,r16,501c <___vfprintf_internal_r+0x1d48>
    3d0c:	01400074 	movhi	r5,1
    3d10:	29534884 	addi	r5,r5,19746
    3d14:	d9403515 	stw	r5,212(sp)
    3d18:	048001c4 	movi	r18,7
    3d1c:	dcc02d17 	ldw	r19,180(sp)
    3d20:	00000306 	br	3d30 <___vfprintf_internal_r+0xa5c>
    3d24:	843ffc04 	addi	r16,r16,-16
    3d28:	42000204 	addi	r8,r8,8
    3d2c:	8c00130e 	bge	r17,r16,3d7c <___vfprintf_internal_r+0xaa8>
    3d30:	01000074 	movhi	r4,1
    3d34:	18c00404 	addi	r3,r3,16
    3d38:	10800044 	addi	r2,r2,1
    3d3c:	21134884 	addi	r4,r4,19746
    3d40:	41000015 	stw	r4,0(r8)
    3d44:	44400115 	stw	r17,4(r8)
    3d48:	d8c02015 	stw	r3,128(sp)
    3d4c:	d8801f15 	stw	r2,124(sp)
    3d50:	90bff40e 	bge	r18,r2,3d24 <__alt_data_end+0xfc003d24>
    3d54:	d9801e04 	addi	r6,sp,120
    3d58:	b80b883a 	mov	r5,r23
    3d5c:	9809883a 	mov	r4,r19
    3d60:	000aab40 	call	aab4 <__sprint_r>
    3d64:	103e5f1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    3d68:	843ffc04 	addi	r16,r16,-16
    3d6c:	d8c02017 	ldw	r3,128(sp)
    3d70:	d8801f17 	ldw	r2,124(sp)
    3d74:	da000404 	addi	r8,sp,16
    3d78:	8c3fed16 	blt	r17,r16,3d30 <__alt_data_end+0xfc003d30>
    3d7c:	d9403517 	ldw	r5,212(sp)
    3d80:	1c07883a 	add	r3,r3,r16
    3d84:	10800044 	addi	r2,r2,1
    3d88:	41400015 	stw	r5,0(r8)
    3d8c:	44000115 	stw	r16,4(r8)
    3d90:	d8c02015 	stw	r3,128(sp)
    3d94:	d8801f15 	stw	r2,124(sp)
    3d98:	010001c4 	movi	r4,7
    3d9c:	2080060e 	bge	r4,r2,3db8 <___vfprintf_internal_r+0xae4>
    3da0:	d9002d17 	ldw	r4,180(sp)
    3da4:	d9801e04 	addi	r6,sp,120
    3da8:	b80b883a 	mov	r5,r23
    3dac:	000aab40 	call	aab4 <__sprint_r>
    3db0:	103e4c1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    3db4:	d8c02017 	ldw	r3,128(sp)
    3db8:	d8803117 	ldw	r2,196(sp)
    3dbc:	d9002917 	ldw	r4,164(sp)
    3dc0:	1100010e 	bge	r2,r4,3dc8 <___vfprintf_internal_r+0xaf4>
    3dc4:	2005883a 	mov	r2,r4
    3dc8:	d9402f17 	ldw	r5,188(sp)
    3dcc:	288b883a 	add	r5,r5,r2
    3dd0:	d9402f15 	stw	r5,188(sp)
    3dd4:	1801c01e 	bne	r3,zero,44d8 <___vfprintf_internal_r+0x1204>
    3dd8:	a8800007 	ldb	r2,0(r21)
    3ddc:	d8001f15 	stw	zero,124(sp)
    3de0:	da000404 	addi	r8,sp,16
    3de4:	103d751e 	bne	r2,zero,33bc <__alt_data_end+0xfc0033bc>
    3de8:	a823883a 	mov	r17,r21
    3dec:	003d8b06 	br	341c <__alt_data_end+0xfc00341c>
    3df0:	8025883a 	mov	r18,r16
    3df4:	dc002903 	ldbu	r16,164(sp)
    3df8:	e011883a 	mov	r8,fp
    3dfc:	84003fcc 	andi	r16,r16,255
    3e00:	8005e51e 	bne	r16,zero,5598 <___vfprintf_internal_r+0x22c4>
    3e04:	94800414 	ori	r18,r18,16
    3e08:	9080080c 	andi	r2,r18,32
    3e0c:	10022b26 	beq	r2,zero,46bc <___vfprintf_internal_r+0x13e8>
    3e10:	d9002e17 	ldw	r4,184(sp)
    3e14:	d9402a17 	ldw	r5,168(sp)
    3e18:	d8002785 	stb	zero,158(sp)
    3e1c:	20c00204 	addi	r3,r4,8
    3e20:	24c00017 	ldw	r19,0(r4)
    3e24:	25800117 	ldw	r22,4(r4)
    3e28:	28042e16 	blt	r5,zero,4ee4 <___vfprintf_internal_r+0x1c10>
    3e2c:	013fdfc4 	movi	r4,-129
    3e30:	9d84b03a 	or	r2,r19,r22
    3e34:	d8c02e15 	stw	r3,184(sp)
    3e38:	9124703a 	and	r18,r18,r4
    3e3c:	0039883a 	mov	fp,zero
    3e40:	103e801e 	bne	r2,zero,3844 <__alt_data_end+0xfc003844>
    3e44:	d9002a17 	ldw	r4,168(sp)
    3e48:	2002e01e 	bne	r4,zero,49cc <___vfprintf_internal_r+0x16f8>
    3e4c:	d8002a15 	stw	zero,168(sp)
    3e50:	d8002b15 	stw	zero,172(sp)
    3e54:	dc001e04 	addi	r16,sp,120
    3e58:	003ef506 	br	3a30 <__alt_data_end+0xfc003a30>
    3e5c:	8025883a 	mov	r18,r16
    3e60:	dc002903 	ldbu	r16,164(sp)
    3e64:	e011883a 	mov	r8,fp
    3e68:	84003fcc 	andi	r16,r16,255
    3e6c:	8005ba1e 	bne	r16,zero,5558 <___vfprintf_internal_r+0x2284>
    3e70:	01000074 	movhi	r4,1
    3e74:	21133804 	addi	r4,r4,19680
    3e78:	d9003915 	stw	r4,228(sp)
    3e7c:	9080080c 	andi	r2,r18,32
    3e80:	10006126 	beq	r2,zero,4008 <___vfprintf_internal_r+0xd34>
    3e84:	d9402e17 	ldw	r5,184(sp)
    3e88:	2cc00017 	ldw	r19,0(r5)
    3e8c:	2d800117 	ldw	r22,4(r5)
    3e90:	29400204 	addi	r5,r5,8
    3e94:	d9402e15 	stw	r5,184(sp)
    3e98:	9080004c 	andi	r2,r18,1
    3e9c:	1001ac26 	beq	r2,zero,4550 <___vfprintf_internal_r+0x127c>
    3ea0:	9d84b03a 	or	r2,r19,r22
    3ea4:	10038526 	beq	r2,zero,4cbc <___vfprintf_internal_r+0x19e8>
    3ea8:	d8c02a17 	ldw	r3,168(sp)
    3eac:	00800c04 	movi	r2,48
    3eb0:	d8802705 	stb	r2,156(sp)
    3eb4:	dc402745 	stb	r17,157(sp)
    3eb8:	d8002785 	stb	zero,158(sp)
    3ebc:	90800094 	ori	r2,r18,2
    3ec0:	18047916 	blt	r3,zero,50a8 <___vfprintf_internal_r+0x1dd4>
    3ec4:	00bfdfc4 	movi	r2,-129
    3ec8:	90a4703a 	and	r18,r18,r2
    3ecc:	94800094 	ori	r18,r18,2
    3ed0:	0039883a 	mov	fp,zero
    3ed4:	d9003917 	ldw	r4,228(sp)
    3ed8:	dc001e04 	addi	r16,sp,120
    3edc:	988003cc 	andi	r2,r19,15
    3ee0:	b006973a 	slli	r3,r22,28
    3ee4:	2085883a 	add	r2,r4,r2
    3ee8:	9826d13a 	srli	r19,r19,4
    3eec:	10800003 	ldbu	r2,0(r2)
    3ef0:	b02cd13a 	srli	r22,r22,4
    3ef4:	843fffc4 	addi	r16,r16,-1
    3ef8:	1ce6b03a 	or	r19,r3,r19
    3efc:	80800005 	stb	r2,0(r16)
    3f00:	9d84b03a 	or	r2,r19,r22
    3f04:	103ff51e 	bne	r2,zero,3edc <__alt_data_end+0xfc003edc>
    3f08:	d8c02817 	ldw	r3,160(sp)
    3f0c:	1c07c83a 	sub	r3,r3,r16
    3f10:	d8c02b15 	stw	r3,172(sp)
    3f14:	003ec606 	br	3a30 <__alt_data_end+0xfc003a30>
    3f18:	8025883a 	mov	r18,r16
    3f1c:	dc002903 	ldbu	r16,164(sp)
    3f20:	e011883a 	mov	r8,fp
    3f24:	84003fcc 	andi	r16,r16,255
    3f28:	803e9626 	beq	r16,zero,3984 <__alt_data_end+0xfc003984>
    3f2c:	d8c02b03 	ldbu	r3,172(sp)
    3f30:	d8c02785 	stb	r3,158(sp)
    3f34:	003e9306 	br	3984 <__alt_data_end+0xfc003984>
    3f38:	00c00044 	movi	r3,1
    3f3c:	d8c02905 	stb	r3,164(sp)
    3f40:	00c00ac4 	movi	r3,43
    3f44:	d8c02b05 	stb	r3,172(sp)
    3f48:	ac400007 	ldb	r17,0(r21)
    3f4c:	003d4306 	br	345c <__alt_data_end+0xfc00345c>
    3f50:	84000814 	ori	r16,r16,32
    3f54:	ac400007 	ldb	r17,0(r21)
    3f58:	003d4006 	br	345c <__alt_data_end+0xfc00345c>
    3f5c:	d8802e17 	ldw	r2,184(sp)
    3f60:	8025883a 	mov	r18,r16
    3f64:	d8002785 	stb	zero,158(sp)
    3f68:	14000017 	ldw	r16,0(r2)
    3f6c:	e011883a 	mov	r8,fp
    3f70:	14c00104 	addi	r19,r2,4
    3f74:	80042d26 	beq	r16,zero,502c <___vfprintf_internal_r+0x1d58>
    3f78:	d8c02a17 	ldw	r3,168(sp)
    3f7c:	1803e416 	blt	r3,zero,4f10 <___vfprintf_internal_r+0x1c3c>
    3f80:	180d883a 	mov	r6,r3
    3f84:	000b883a 	mov	r5,zero
    3f88:	8009883a 	mov	r4,r16
    3f8c:	df003d15 	stw	fp,244(sp)
    3f90:	0008c0c0 	call	8c0c <memchr>
    3f94:	da003d17 	ldw	r8,244(sp)
    3f98:	10046826 	beq	r2,zero,513c <___vfprintf_internal_r+0x1e68>
    3f9c:	1405c83a 	sub	r2,r2,r16
    3fa0:	d8802b15 	stw	r2,172(sp)
    3fa4:	1003e016 	blt	r2,zero,4f28 <___vfprintf_internal_r+0x1c54>
    3fa8:	df002783 	ldbu	fp,158(sp)
    3fac:	d8802915 	stw	r2,164(sp)
    3fb0:	dcc02e15 	stw	r19,184(sp)
    3fb4:	d8002a15 	stw	zero,168(sp)
    3fb8:	d8003215 	stw	zero,200(sp)
    3fbc:	003ea206 	br	3a48 <__alt_data_end+0xfc003a48>
    3fc0:	8025883a 	mov	r18,r16
    3fc4:	dc002903 	ldbu	r16,164(sp)
    3fc8:	e011883a 	mov	r8,fp
    3fcc:	84003fcc 	andi	r16,r16,255
    3fd0:	803f8d26 	beq	r16,zero,3e08 <__alt_data_end+0xfc003e08>
    3fd4:	d8c02b03 	ldbu	r3,172(sp)
    3fd8:	d8c02785 	stb	r3,158(sp)
    3fdc:	003f8a06 	br	3e08 <__alt_data_end+0xfc003e08>
    3fe0:	8025883a 	mov	r18,r16
    3fe4:	dc002903 	ldbu	r16,164(sp)
    3fe8:	e011883a 	mov	r8,fp
    3fec:	84003fcc 	andi	r16,r16,255
    3ff0:	8005661e 	bne	r16,zero,558c <___vfprintf_internal_r+0x22b8>
    3ff4:	01000074 	movhi	r4,1
    3ff8:	21133d04 	addi	r4,r4,19700
    3ffc:	d9003915 	stw	r4,228(sp)
    4000:	9080080c 	andi	r2,r18,32
    4004:	103f9f1e 	bne	r2,zero,3e84 <__alt_data_end+0xfc003e84>
    4008:	9080040c 	andi	r2,r18,16
    400c:	1002eb26 	beq	r2,zero,4bbc <___vfprintf_internal_r+0x18e8>
    4010:	d8802e17 	ldw	r2,184(sp)
    4014:	002d883a 	mov	r22,zero
    4018:	14c00017 	ldw	r19,0(r2)
    401c:	10800104 	addi	r2,r2,4
    4020:	d8802e15 	stw	r2,184(sp)
    4024:	003f9c06 	br	3e98 <__alt_data_end+0xfc003e98>
    4028:	d8802b07 	ldb	r2,172(sp)
    402c:	1002e11e 	bne	r2,zero,4bb4 <___vfprintf_internal_r+0x18e0>
    4030:	00c00044 	movi	r3,1
    4034:	d8c02905 	stb	r3,164(sp)
    4038:	00c00804 	movi	r3,32
    403c:	d8c02b05 	stb	r3,172(sp)
    4040:	ac400007 	ldb	r17,0(r21)
    4044:	003d0506 	br	345c <__alt_data_end+0xfc00345c>
    4048:	84000054 	ori	r16,r16,1
    404c:	ac400007 	ldb	r17,0(r21)
    4050:	003d0206 	br	345c <__alt_data_end+0xfc00345c>
    4054:	8025883a 	mov	r18,r16
    4058:	dc002903 	ldbu	r16,164(sp)
    405c:	e011883a 	mov	r8,fp
    4060:	84003fcc 	andi	r16,r16,255
    4064:	803de726 	beq	r16,zero,3804 <__alt_data_end+0xfc003804>
    4068:	d8c02b03 	ldbu	r3,172(sp)
    406c:	d8c02785 	stb	r3,158(sp)
    4070:	003de406 	br	3804 <__alt_data_end+0xfc003804>
    4074:	84001014 	ori	r16,r16,64
    4078:	ac400007 	ldb	r17,0(r21)
    407c:	003cf706 	br	345c <__alt_data_end+0xfc00345c>
    4080:	ac400007 	ldb	r17,0(r21)
    4084:	00801b04 	movi	r2,108
    4088:	88838f26 	beq	r17,r2,4ec8 <___vfprintf_internal_r+0x1bf4>
    408c:	84000414 	ori	r16,r16,16
    4090:	003cf206 	br	345c <__alt_data_end+0xfc00345c>
    4094:	8025883a 	mov	r18,r16
    4098:	dc002903 	ldbu	r16,164(sp)
    409c:	e011883a 	mov	r8,fp
    40a0:	84003fcc 	andi	r16,r16,255
    40a4:	80053f1e 	bne	r16,zero,55a4 <___vfprintf_internal_r+0x22d0>
    40a8:	9080080c 	andi	r2,r18,32
    40ac:	1002d226 	beq	r2,zero,4bf8 <___vfprintf_internal_r+0x1924>
    40b0:	d9002e17 	ldw	r4,184(sp)
    40b4:	d9402f17 	ldw	r5,188(sp)
    40b8:	20800017 	ldw	r2,0(r4)
    40bc:	2807d7fa 	srai	r3,r5,31
    40c0:	21000104 	addi	r4,r4,4
    40c4:	d9002e15 	stw	r4,184(sp)
    40c8:	11400015 	stw	r5,0(r2)
    40cc:	10c00115 	stw	r3,4(r2)
    40d0:	003cb806 	br	33b4 <__alt_data_end+0xfc0033b4>
    40d4:	d8c02e17 	ldw	r3,184(sp)
    40d8:	d9002e17 	ldw	r4,184(sp)
    40dc:	8025883a 	mov	r18,r16
    40e0:	18800017 	ldw	r2,0(r3)
    40e4:	21000104 	addi	r4,r4,4
    40e8:	00c00044 	movi	r3,1
    40ec:	e011883a 	mov	r8,fp
    40f0:	d8c02915 	stw	r3,164(sp)
    40f4:	d8002785 	stb	zero,158(sp)
    40f8:	d8801405 	stb	r2,80(sp)
    40fc:	d9002e15 	stw	r4,184(sp)
    4100:	d8c02b15 	stw	r3,172(sp)
    4104:	d8002a15 	stw	zero,168(sp)
    4108:	d8003215 	stw	zero,200(sp)
    410c:	dc001404 	addi	r16,sp,80
    4110:	0039883a 	mov	fp,zero
    4114:	003e5306 	br	3a64 <__alt_data_end+0xfc003a64>
    4118:	01000074 	movhi	r4,1
    411c:	21133d04 	addi	r4,r4,19700
    4120:	0039883a 	mov	fp,zero
    4124:	d9003915 	stw	r4,228(sp)
    4128:	04401e04 	movi	r17,120
    412c:	003f6906 	br	3ed4 <__alt_data_end+0xfc003ed4>
    4130:	8025883a 	mov	r18,r16
    4134:	dc002903 	ldbu	r16,164(sp)
    4138:	e011883a 	mov	r8,fp
    413c:	84003fcc 	andi	r16,r16,255
    4140:	8005081e 	bne	r16,zero,5564 <___vfprintf_internal_r+0x2290>
    4144:	883d6126 	beq	r17,zero,36cc <__alt_data_end+0xfc0036cc>
    4148:	00c00044 	movi	r3,1
    414c:	d8c02915 	stw	r3,164(sp)
    4150:	dc401405 	stb	r17,80(sp)
    4154:	d8002785 	stb	zero,158(sp)
    4158:	003fe906 	br	4100 <__alt_data_end+0xfc004100>
    415c:	01400074 	movhi	r5,1
    4160:	29533d04 	addi	r5,r5,19700
    4164:	d9403915 	stw	r5,228(sp)
    4168:	d8c02e15 	stw	r3,184(sp)
    416c:	1025883a 	mov	r18,r2
    4170:	04401e04 	movi	r17,120
    4174:	9d84b03a 	or	r2,r19,r22
    4178:	1000fc1e 	bne	r2,zero,456c <___vfprintf_internal_r+0x1298>
    417c:	0039883a 	mov	fp,zero
    4180:	00800084 	movi	r2,2
    4184:	10803fcc 	andi	r2,r2,255
    4188:	00c00044 	movi	r3,1
    418c:	10c20f26 	beq	r2,r3,49cc <___vfprintf_internal_r+0x16f8>
    4190:	00c00084 	movi	r3,2
    4194:	10fd3326 	beq	r2,r3,3664 <__alt_data_end+0xfc003664>
    4198:	003e0b06 	br	39c8 <__alt_data_end+0xfc0039c8>
    419c:	d8c02017 	ldw	r3,128(sp)
    41a0:	003e7106 	br	3b68 <__alt_data_end+0xfc003b68>
    41a4:	00801944 	movi	r2,101
    41a8:	14407e0e 	bge	r2,r17,43a4 <___vfprintf_internal_r+0x10d0>
    41ac:	d9003617 	ldw	r4,216(sp)
    41b0:	d9403817 	ldw	r5,224(sp)
    41b4:	000d883a 	mov	r6,zero
    41b8:	000f883a 	mov	r7,zero
    41bc:	d8c03c15 	stw	r3,240(sp)
    41c0:	da003d15 	stw	r8,244(sp)
    41c4:	000e8380 	call	e838 <__eqdf2>
    41c8:	d8c03c17 	ldw	r3,240(sp)
    41cc:	da003d17 	ldw	r8,244(sp)
    41d0:	1000f71e 	bne	r2,zero,45b0 <___vfprintf_internal_r+0x12dc>
    41d4:	d8801f17 	ldw	r2,124(sp)
    41d8:	01000074 	movhi	r4,1
    41dc:	21134404 	addi	r4,r4,19728
    41e0:	18c00044 	addi	r3,r3,1
    41e4:	10800044 	addi	r2,r2,1
    41e8:	41000015 	stw	r4,0(r8)
    41ec:	01000044 	movi	r4,1
    41f0:	41000115 	stw	r4,4(r8)
    41f4:	d8c02015 	stw	r3,128(sp)
    41f8:	d8801f15 	stw	r2,124(sp)
    41fc:	010001c4 	movi	r4,7
    4200:	2082b816 	blt	r4,r2,4ce4 <___vfprintf_internal_r+0x1a10>
    4204:	42000204 	addi	r8,r8,8
    4208:	d8802617 	ldw	r2,152(sp)
    420c:	d9403317 	ldw	r5,204(sp)
    4210:	11400216 	blt	r2,r5,421c <___vfprintf_internal_r+0xf48>
    4214:	9080004c 	andi	r2,r18,1
    4218:	103eb326 	beq	r2,zero,3ce8 <__alt_data_end+0xfc003ce8>
    421c:	d8803717 	ldw	r2,220(sp)
    4220:	d9003417 	ldw	r4,208(sp)
    4224:	d9403717 	ldw	r5,220(sp)
    4228:	1887883a 	add	r3,r3,r2
    422c:	d8801f17 	ldw	r2,124(sp)
    4230:	41000015 	stw	r4,0(r8)
    4234:	41400115 	stw	r5,4(r8)
    4238:	10800044 	addi	r2,r2,1
    423c:	d8c02015 	stw	r3,128(sp)
    4240:	d8801f15 	stw	r2,124(sp)
    4244:	010001c4 	movi	r4,7
    4248:	20832916 	blt	r4,r2,4ef0 <___vfprintf_internal_r+0x1c1c>
    424c:	42000204 	addi	r8,r8,8
    4250:	d8803317 	ldw	r2,204(sp)
    4254:	143fffc4 	addi	r16,r2,-1
    4258:	043ea30e 	bge	zero,r16,3ce8 <__alt_data_end+0xfc003ce8>
    425c:	04400404 	movi	r17,16
    4260:	d8801f17 	ldw	r2,124(sp)
    4264:	8c00880e 	bge	r17,r16,4488 <___vfprintf_internal_r+0x11b4>
    4268:	01400074 	movhi	r5,1
    426c:	29534484 	addi	r5,r5,19730
    4270:	d9402c15 	stw	r5,176(sp)
    4274:	058001c4 	movi	r22,7
    4278:	dcc02d17 	ldw	r19,180(sp)
    427c:	00000306 	br	428c <___vfprintf_internal_r+0xfb8>
    4280:	42000204 	addi	r8,r8,8
    4284:	843ffc04 	addi	r16,r16,-16
    4288:	8c00820e 	bge	r17,r16,4494 <___vfprintf_internal_r+0x11c0>
    428c:	18c00404 	addi	r3,r3,16
    4290:	10800044 	addi	r2,r2,1
    4294:	45000015 	stw	r20,0(r8)
    4298:	44400115 	stw	r17,4(r8)
    429c:	d8c02015 	stw	r3,128(sp)
    42a0:	d8801f15 	stw	r2,124(sp)
    42a4:	b0bff60e 	bge	r22,r2,4280 <__alt_data_end+0xfc004280>
    42a8:	d9801e04 	addi	r6,sp,120
    42ac:	b80b883a 	mov	r5,r23
    42b0:	9809883a 	mov	r4,r19
    42b4:	000aab40 	call	aab4 <__sprint_r>
    42b8:	103d0a1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    42bc:	d8c02017 	ldw	r3,128(sp)
    42c0:	d8801f17 	ldw	r2,124(sp)
    42c4:	da000404 	addi	r8,sp,16
    42c8:	003fee06 	br	4284 <__alt_data_end+0xfc004284>
    42cc:	d9403117 	ldw	r5,196(sp)
    42d0:	d8802917 	ldw	r2,164(sp)
    42d4:	28adc83a 	sub	r22,r5,r2
    42d8:	05be410e 	bge	zero,r22,3be0 <__alt_data_end+0xfc003be0>
    42dc:	07000404 	movi	fp,16
    42e0:	d8801f17 	ldw	r2,124(sp)
    42e4:	e5838f0e 	bge	fp,r22,5124 <___vfprintf_internal_r+0x1e50>
    42e8:	01400074 	movhi	r5,1
    42ec:	29534484 	addi	r5,r5,19730
    42f0:	dc403015 	stw	r17,192(sp)
    42f4:	d9402c15 	stw	r5,176(sp)
    42f8:	b023883a 	mov	r17,r22
    42fc:	04c001c4 	movi	r19,7
    4300:	a82d883a 	mov	r22,r21
    4304:	902b883a 	mov	r21,r18
    4308:	8025883a 	mov	r18,r16
    430c:	dc002d17 	ldw	r16,180(sp)
    4310:	00000306 	br	4320 <___vfprintf_internal_r+0x104c>
    4314:	8c7ffc04 	addi	r17,r17,-16
    4318:	42000204 	addi	r8,r8,8
    431c:	e440110e 	bge	fp,r17,4364 <___vfprintf_internal_r+0x1090>
    4320:	18c00404 	addi	r3,r3,16
    4324:	10800044 	addi	r2,r2,1
    4328:	45000015 	stw	r20,0(r8)
    432c:	47000115 	stw	fp,4(r8)
    4330:	d8c02015 	stw	r3,128(sp)
    4334:	d8801f15 	stw	r2,124(sp)
    4338:	98bff60e 	bge	r19,r2,4314 <__alt_data_end+0xfc004314>
    433c:	d9801e04 	addi	r6,sp,120
    4340:	b80b883a 	mov	r5,r23
    4344:	8009883a 	mov	r4,r16
    4348:	000aab40 	call	aab4 <__sprint_r>
    434c:	103ce51e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4350:	8c7ffc04 	addi	r17,r17,-16
    4354:	d8c02017 	ldw	r3,128(sp)
    4358:	d8801f17 	ldw	r2,124(sp)
    435c:	da000404 	addi	r8,sp,16
    4360:	e47fef16 	blt	fp,r17,4320 <__alt_data_end+0xfc004320>
    4364:	9021883a 	mov	r16,r18
    4368:	a825883a 	mov	r18,r21
    436c:	b02b883a 	mov	r21,r22
    4370:	882d883a 	mov	r22,r17
    4374:	dc403017 	ldw	r17,192(sp)
    4378:	d9002c17 	ldw	r4,176(sp)
    437c:	1d87883a 	add	r3,r3,r22
    4380:	10800044 	addi	r2,r2,1
    4384:	41000015 	stw	r4,0(r8)
    4388:	45800115 	stw	r22,4(r8)
    438c:	d8c02015 	stw	r3,128(sp)
    4390:	d8801f15 	stw	r2,124(sp)
    4394:	010001c4 	movi	r4,7
    4398:	20818e16 	blt	r4,r2,49d4 <___vfprintf_internal_r+0x1700>
    439c:	42000204 	addi	r8,r8,8
    43a0:	003e0f06 	br	3be0 <__alt_data_end+0xfc003be0>
    43a4:	d9403317 	ldw	r5,204(sp)
    43a8:	00800044 	movi	r2,1
    43ac:	18c00044 	addi	r3,r3,1
    43b0:	1141530e 	bge	r2,r5,4900 <___vfprintf_internal_r+0x162c>
    43b4:	dc401f17 	ldw	r17,124(sp)
    43b8:	00800044 	movi	r2,1
    43bc:	40800115 	stw	r2,4(r8)
    43c0:	8c400044 	addi	r17,r17,1
    43c4:	44000015 	stw	r16,0(r8)
    43c8:	d8c02015 	stw	r3,128(sp)
    43cc:	dc401f15 	stw	r17,124(sp)
    43d0:	008001c4 	movi	r2,7
    43d4:	14416b16 	blt	r2,r17,4984 <___vfprintf_internal_r+0x16b0>
    43d8:	42000204 	addi	r8,r8,8
    43dc:	d8803717 	ldw	r2,220(sp)
    43e0:	d9003417 	ldw	r4,208(sp)
    43e4:	8c400044 	addi	r17,r17,1
    43e8:	10c7883a 	add	r3,r2,r3
    43ec:	40800115 	stw	r2,4(r8)
    43f0:	41000015 	stw	r4,0(r8)
    43f4:	d8c02015 	stw	r3,128(sp)
    43f8:	dc401f15 	stw	r17,124(sp)
    43fc:	008001c4 	movi	r2,7
    4400:	14416916 	blt	r2,r17,49a8 <___vfprintf_internal_r+0x16d4>
    4404:	45800204 	addi	r22,r8,8
    4408:	d9003617 	ldw	r4,216(sp)
    440c:	d9403817 	ldw	r5,224(sp)
    4410:	000d883a 	mov	r6,zero
    4414:	000f883a 	mov	r7,zero
    4418:	d8c03c15 	stw	r3,240(sp)
    441c:	000e8380 	call	e838 <__eqdf2>
    4420:	d8c03c17 	ldw	r3,240(sp)
    4424:	1000bc26 	beq	r2,zero,4718 <___vfprintf_internal_r+0x1444>
    4428:	d9403317 	ldw	r5,204(sp)
    442c:	84000044 	addi	r16,r16,1
    4430:	8c400044 	addi	r17,r17,1
    4434:	28bfffc4 	addi	r2,r5,-1
    4438:	1887883a 	add	r3,r3,r2
    443c:	b0800115 	stw	r2,4(r22)
    4440:	b4000015 	stw	r16,0(r22)
    4444:	d8c02015 	stw	r3,128(sp)
    4448:	dc401f15 	stw	r17,124(sp)
    444c:	008001c4 	movi	r2,7
    4450:	14414316 	blt	r2,r17,4960 <___vfprintf_internal_r+0x168c>
    4454:	b5800204 	addi	r22,r22,8
    4458:	d9003a17 	ldw	r4,232(sp)
    445c:	df0022c4 	addi	fp,sp,139
    4460:	8c400044 	addi	r17,r17,1
    4464:	20c7883a 	add	r3,r4,r3
    4468:	b7000015 	stw	fp,0(r22)
    446c:	b1000115 	stw	r4,4(r22)
    4470:	d8c02015 	stw	r3,128(sp)
    4474:	dc401f15 	stw	r17,124(sp)
    4478:	008001c4 	movi	r2,7
    447c:	14400e16 	blt	r2,r17,44b8 <___vfprintf_internal_r+0x11e4>
    4480:	b2000204 	addi	r8,r22,8
    4484:	003e1806 	br	3ce8 <__alt_data_end+0xfc003ce8>
    4488:	01000074 	movhi	r4,1
    448c:	21134484 	addi	r4,r4,19730
    4490:	d9002c15 	stw	r4,176(sp)
    4494:	d9002c17 	ldw	r4,176(sp)
    4498:	1c07883a 	add	r3,r3,r16
    449c:	44000115 	stw	r16,4(r8)
    44a0:	41000015 	stw	r4,0(r8)
    44a4:	10800044 	addi	r2,r2,1
    44a8:	d8c02015 	stw	r3,128(sp)
    44ac:	d8801f15 	stw	r2,124(sp)
    44b0:	010001c4 	movi	r4,7
    44b4:	20be0b0e 	bge	r4,r2,3ce4 <__alt_data_end+0xfc003ce4>
    44b8:	d9002d17 	ldw	r4,180(sp)
    44bc:	d9801e04 	addi	r6,sp,120
    44c0:	b80b883a 	mov	r5,r23
    44c4:	000aab40 	call	aab4 <__sprint_r>
    44c8:	103c861e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    44cc:	d8c02017 	ldw	r3,128(sp)
    44d0:	da000404 	addi	r8,sp,16
    44d4:	003e0406 	br	3ce8 <__alt_data_end+0xfc003ce8>
    44d8:	d9002d17 	ldw	r4,180(sp)
    44dc:	d9801e04 	addi	r6,sp,120
    44e0:	b80b883a 	mov	r5,r23
    44e4:	000aab40 	call	aab4 <__sprint_r>
    44e8:	103e3b26 	beq	r2,zero,3dd8 <__alt_data_end+0xfc003dd8>
    44ec:	003c7d06 	br	36e4 <__alt_data_end+0xfc0036e4>
    44f0:	d9002d17 	ldw	r4,180(sp)
    44f4:	d9801e04 	addi	r6,sp,120
    44f8:	b80b883a 	mov	r5,r23
    44fc:	000aab40 	call	aab4 <__sprint_r>
    4500:	103c781e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4504:	d8c02017 	ldw	r3,128(sp)
    4508:	da000404 	addi	r8,sp,16
    450c:	003de906 	br	3cb4 <__alt_data_end+0xfc003cb4>
    4510:	d9002d17 	ldw	r4,180(sp)
    4514:	d9801e04 	addi	r6,sp,120
    4518:	b80b883a 	mov	r5,r23
    451c:	000aab40 	call	aab4 <__sprint_r>
    4520:	103c701e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4524:	d8c02017 	ldw	r3,128(sp)
    4528:	da000404 	addi	r8,sp,16
    452c:	003d9b06 	br	3b9c <__alt_data_end+0xfc003b9c>
    4530:	d9002d17 	ldw	r4,180(sp)
    4534:	d9801e04 	addi	r6,sp,120
    4538:	b80b883a 	mov	r5,r23
    453c:	000aab40 	call	aab4 <__sprint_r>
    4540:	103c681e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4544:	d8c02017 	ldw	r3,128(sp)
    4548:	da000404 	addi	r8,sp,16
    454c:	003da106 	br	3bd4 <__alt_data_end+0xfc003bd4>
    4550:	d9402a17 	ldw	r5,168(sp)
    4554:	d8002785 	stb	zero,158(sp)
    4558:	283f0616 	blt	r5,zero,4174 <__alt_data_end+0xfc004174>
    455c:	00ffdfc4 	movi	r3,-129
    4560:	9d84b03a 	or	r2,r19,r22
    4564:	90e4703a 	and	r18,r18,r3
    4568:	103c3b26 	beq	r2,zero,3658 <__alt_data_end+0xfc003658>
    456c:	0039883a 	mov	fp,zero
    4570:	003e5806 	br	3ed4 <__alt_data_end+0xfc003ed4>
    4574:	9080040c 	andi	r2,r18,16
    4578:	1001b326 	beq	r2,zero,4c48 <___vfprintf_internal_r+0x1974>
    457c:	d8c02e17 	ldw	r3,184(sp)
    4580:	d9002a17 	ldw	r4,168(sp)
    4584:	d8002785 	stb	zero,158(sp)
    4588:	18800104 	addi	r2,r3,4
    458c:	1cc00017 	ldw	r19,0(r3)
    4590:	002d883a 	mov	r22,zero
    4594:	2001b516 	blt	r4,zero,4c6c <___vfprintf_internal_r+0x1998>
    4598:	00ffdfc4 	movi	r3,-129
    459c:	d8802e15 	stw	r2,184(sp)
    45a0:	90e4703a 	and	r18,r18,r3
    45a4:	983d0526 	beq	r19,zero,39bc <__alt_data_end+0xfc0039bc>
    45a8:	0039883a 	mov	fp,zero
    45ac:	003d0806 	br	39d0 <__alt_data_end+0xfc0039d0>
    45b0:	dc402617 	ldw	r17,152(sp)
    45b4:	0441d30e 	bge	zero,r17,4d04 <___vfprintf_internal_r+0x1a30>
    45b8:	dc403217 	ldw	r17,200(sp)
    45bc:	d8803317 	ldw	r2,204(sp)
    45c0:	1440010e 	bge	r2,r17,45c8 <___vfprintf_internal_r+0x12f4>
    45c4:	1023883a 	mov	r17,r2
    45c8:	04400a0e 	bge	zero,r17,45f4 <___vfprintf_internal_r+0x1320>
    45cc:	d8801f17 	ldw	r2,124(sp)
    45d0:	1c47883a 	add	r3,r3,r17
    45d4:	44000015 	stw	r16,0(r8)
    45d8:	10800044 	addi	r2,r2,1
    45dc:	44400115 	stw	r17,4(r8)
    45e0:	d8c02015 	stw	r3,128(sp)
    45e4:	d8801f15 	stw	r2,124(sp)
    45e8:	010001c4 	movi	r4,7
    45ec:	20826516 	blt	r4,r2,4f84 <___vfprintf_internal_r+0x1cb0>
    45f0:	42000204 	addi	r8,r8,8
    45f4:	88026116 	blt	r17,zero,4f7c <___vfprintf_internal_r+0x1ca8>
    45f8:	d9003217 	ldw	r4,200(sp)
    45fc:	2463c83a 	sub	r17,r4,r17
    4600:	04407b0e 	bge	zero,r17,47f0 <___vfprintf_internal_r+0x151c>
    4604:	05800404 	movi	r22,16
    4608:	d8801f17 	ldw	r2,124(sp)
    460c:	b4419d0e 	bge	r22,r17,4c84 <___vfprintf_internal_r+0x19b0>
    4610:	01000074 	movhi	r4,1
    4614:	21134484 	addi	r4,r4,19730
    4618:	d9002c15 	stw	r4,176(sp)
    461c:	070001c4 	movi	fp,7
    4620:	dcc02d17 	ldw	r19,180(sp)
    4624:	00000306 	br	4634 <___vfprintf_internal_r+0x1360>
    4628:	42000204 	addi	r8,r8,8
    462c:	8c7ffc04 	addi	r17,r17,-16
    4630:	b441970e 	bge	r22,r17,4c90 <___vfprintf_internal_r+0x19bc>
    4634:	18c00404 	addi	r3,r3,16
    4638:	10800044 	addi	r2,r2,1
    463c:	45000015 	stw	r20,0(r8)
    4640:	45800115 	stw	r22,4(r8)
    4644:	d8c02015 	stw	r3,128(sp)
    4648:	d8801f15 	stw	r2,124(sp)
    464c:	e0bff60e 	bge	fp,r2,4628 <__alt_data_end+0xfc004628>
    4650:	d9801e04 	addi	r6,sp,120
    4654:	b80b883a 	mov	r5,r23
    4658:	9809883a 	mov	r4,r19
    465c:	000aab40 	call	aab4 <__sprint_r>
    4660:	103c201e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4664:	d8c02017 	ldw	r3,128(sp)
    4668:	d8801f17 	ldw	r2,124(sp)
    466c:	da000404 	addi	r8,sp,16
    4670:	003fee06 	br	462c <__alt_data_end+0xfc00462c>
    4674:	d9002d17 	ldw	r4,180(sp)
    4678:	d9801e04 	addi	r6,sp,120
    467c:	b80b883a 	mov	r5,r23
    4680:	000aab40 	call	aab4 <__sprint_r>
    4684:	103c171e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4688:	d8c02017 	ldw	r3,128(sp)
    468c:	df002787 	ldb	fp,158(sp)
    4690:	da000404 	addi	r8,sp,16
    4694:	003d3406 	br	3b68 <__alt_data_end+0xfc003b68>
    4698:	9080040c 	andi	r2,r18,16
    469c:	10016126 	beq	r2,zero,4c24 <___vfprintf_internal_r+0x1950>
    46a0:	d9402e17 	ldw	r5,184(sp)
    46a4:	2cc00017 	ldw	r19,0(r5)
    46a8:	29400104 	addi	r5,r5,4
    46ac:	d9402e15 	stw	r5,184(sp)
    46b0:	982dd7fa 	srai	r22,r19,31
    46b4:	b005883a 	mov	r2,r22
    46b8:	003c5a06 	br	3824 <__alt_data_end+0xfc003824>
    46bc:	9080040c 	andi	r2,r18,16
    46c0:	10003526 	beq	r2,zero,4798 <___vfprintf_internal_r+0x14c4>
    46c4:	d8c02e17 	ldw	r3,184(sp)
    46c8:	d9002a17 	ldw	r4,168(sp)
    46cc:	d8002785 	stb	zero,158(sp)
    46d0:	18800104 	addi	r2,r3,4
    46d4:	1cc00017 	ldw	r19,0(r3)
    46d8:	002d883a 	mov	r22,zero
    46dc:	20003716 	blt	r4,zero,47bc <___vfprintf_internal_r+0x14e8>
    46e0:	00ffdfc4 	movi	r3,-129
    46e4:	d8802e15 	stw	r2,184(sp)
    46e8:	90e4703a 	and	r18,r18,r3
    46ec:	0039883a 	mov	fp,zero
    46f0:	983dd426 	beq	r19,zero,3e44 <__alt_data_end+0xfc003e44>
    46f4:	00800244 	movi	r2,9
    46f8:	14fc5336 	bltu	r2,r19,3848 <__alt_data_end+0xfc003848>
    46fc:	d8c02817 	ldw	r3,160(sp)
    4700:	dc001dc4 	addi	r16,sp,119
    4704:	9cc00c04 	addi	r19,r19,48
    4708:	1c07c83a 	sub	r3,r3,r16
    470c:	dcc01dc5 	stb	r19,119(sp)
    4710:	d8c02b15 	stw	r3,172(sp)
    4714:	003cc606 	br	3a30 <__alt_data_end+0xfc003a30>
    4718:	d8803317 	ldw	r2,204(sp)
    471c:	143fffc4 	addi	r16,r2,-1
    4720:	043f4d0e 	bge	zero,r16,4458 <__alt_data_end+0xfc004458>
    4724:	07000404 	movi	fp,16
    4728:	e400810e 	bge	fp,r16,4930 <___vfprintf_internal_r+0x165c>
    472c:	01400074 	movhi	r5,1
    4730:	29534484 	addi	r5,r5,19730
    4734:	d9402c15 	stw	r5,176(sp)
    4738:	01c001c4 	movi	r7,7
    473c:	dcc02d17 	ldw	r19,180(sp)
    4740:	00000306 	br	4750 <___vfprintf_internal_r+0x147c>
    4744:	b5800204 	addi	r22,r22,8
    4748:	843ffc04 	addi	r16,r16,-16
    474c:	e4007b0e 	bge	fp,r16,493c <___vfprintf_internal_r+0x1668>
    4750:	18c00404 	addi	r3,r3,16
    4754:	8c400044 	addi	r17,r17,1
    4758:	b5000015 	stw	r20,0(r22)
    475c:	b7000115 	stw	fp,4(r22)
    4760:	d8c02015 	stw	r3,128(sp)
    4764:	dc401f15 	stw	r17,124(sp)
    4768:	3c7ff60e 	bge	r7,r17,4744 <__alt_data_end+0xfc004744>
    476c:	d9801e04 	addi	r6,sp,120
    4770:	b80b883a 	mov	r5,r23
    4774:	9809883a 	mov	r4,r19
    4778:	d9c03c15 	stw	r7,240(sp)
    477c:	000aab40 	call	aab4 <__sprint_r>
    4780:	d9c03c17 	ldw	r7,240(sp)
    4784:	103bd71e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4788:	d8c02017 	ldw	r3,128(sp)
    478c:	dc401f17 	ldw	r17,124(sp)
    4790:	dd800404 	addi	r22,sp,16
    4794:	003fec06 	br	4748 <__alt_data_end+0xfc004748>
    4798:	9080100c 	andi	r2,r18,64
    479c:	d8002785 	stb	zero,158(sp)
    47a0:	10010e26 	beq	r2,zero,4bdc <___vfprintf_internal_r+0x1908>
    47a4:	d9402e17 	ldw	r5,184(sp)
    47a8:	d8c02a17 	ldw	r3,168(sp)
    47ac:	002d883a 	mov	r22,zero
    47b0:	28800104 	addi	r2,r5,4
    47b4:	2cc0000b 	ldhu	r19,0(r5)
    47b8:	183fc90e 	bge	r3,zero,46e0 <__alt_data_end+0xfc0046e0>
    47bc:	d8802e15 	stw	r2,184(sp)
    47c0:	0039883a 	mov	fp,zero
    47c4:	9d84b03a 	or	r2,r19,r22
    47c8:	103c1e1e 	bne	r2,zero,3844 <__alt_data_end+0xfc003844>
    47cc:	00800044 	movi	r2,1
    47d0:	003e6c06 	br	4184 <__alt_data_end+0xfc004184>
    47d4:	d9002d17 	ldw	r4,180(sp)
    47d8:	d9801e04 	addi	r6,sp,120
    47dc:	b80b883a 	mov	r5,r23
    47e0:	000aab40 	call	aab4 <__sprint_r>
    47e4:	103bbf1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    47e8:	d8c02017 	ldw	r3,128(sp)
    47ec:	da000404 	addi	r8,sp,16
    47f0:	d9003217 	ldw	r4,200(sp)
    47f4:	d8802617 	ldw	r2,152(sp)
    47f8:	d9403317 	ldw	r5,204(sp)
    47fc:	8123883a 	add	r17,r16,r4
    4800:	11400216 	blt	r2,r5,480c <___vfprintf_internal_r+0x1538>
    4804:	9100004c 	andi	r4,r18,1
    4808:	20000d26 	beq	r4,zero,4840 <___vfprintf_internal_r+0x156c>
    480c:	d9003717 	ldw	r4,220(sp)
    4810:	d9403417 	ldw	r5,208(sp)
    4814:	1907883a 	add	r3,r3,r4
    4818:	d9001f17 	ldw	r4,124(sp)
    481c:	41400015 	stw	r5,0(r8)
    4820:	d9403717 	ldw	r5,220(sp)
    4824:	21000044 	addi	r4,r4,1
    4828:	d8c02015 	stw	r3,128(sp)
    482c:	41400115 	stw	r5,4(r8)
    4830:	d9001f15 	stw	r4,124(sp)
    4834:	014001c4 	movi	r5,7
    4838:	2901e816 	blt	r5,r4,4fdc <___vfprintf_internal_r+0x1d08>
    483c:	42000204 	addi	r8,r8,8
    4840:	d9003317 	ldw	r4,204(sp)
    4844:	8121883a 	add	r16,r16,r4
    4848:	2085c83a 	sub	r2,r4,r2
    484c:	8461c83a 	sub	r16,r16,r17
    4850:	1400010e 	bge	r2,r16,4858 <___vfprintf_internal_r+0x1584>
    4854:	1021883a 	mov	r16,r2
    4858:	04000a0e 	bge	zero,r16,4884 <___vfprintf_internal_r+0x15b0>
    485c:	d9001f17 	ldw	r4,124(sp)
    4860:	1c07883a 	add	r3,r3,r16
    4864:	44400015 	stw	r17,0(r8)
    4868:	21000044 	addi	r4,r4,1
    486c:	44000115 	stw	r16,4(r8)
    4870:	d8c02015 	stw	r3,128(sp)
    4874:	d9001f15 	stw	r4,124(sp)
    4878:	014001c4 	movi	r5,7
    487c:	2901fb16 	blt	r5,r4,506c <___vfprintf_internal_r+0x1d98>
    4880:	42000204 	addi	r8,r8,8
    4884:	8001f716 	blt	r16,zero,5064 <___vfprintf_internal_r+0x1d90>
    4888:	1421c83a 	sub	r16,r2,r16
    488c:	043d160e 	bge	zero,r16,3ce8 <__alt_data_end+0xfc003ce8>
    4890:	04400404 	movi	r17,16
    4894:	d8801f17 	ldw	r2,124(sp)
    4898:	8c3efb0e 	bge	r17,r16,4488 <__alt_data_end+0xfc004488>
    489c:	01400074 	movhi	r5,1
    48a0:	29534484 	addi	r5,r5,19730
    48a4:	d9402c15 	stw	r5,176(sp)
    48a8:	058001c4 	movi	r22,7
    48ac:	dcc02d17 	ldw	r19,180(sp)
    48b0:	00000306 	br	48c0 <___vfprintf_internal_r+0x15ec>
    48b4:	42000204 	addi	r8,r8,8
    48b8:	843ffc04 	addi	r16,r16,-16
    48bc:	8c3ef50e 	bge	r17,r16,4494 <__alt_data_end+0xfc004494>
    48c0:	18c00404 	addi	r3,r3,16
    48c4:	10800044 	addi	r2,r2,1
    48c8:	45000015 	stw	r20,0(r8)
    48cc:	44400115 	stw	r17,4(r8)
    48d0:	d8c02015 	stw	r3,128(sp)
    48d4:	d8801f15 	stw	r2,124(sp)
    48d8:	b0bff60e 	bge	r22,r2,48b4 <__alt_data_end+0xfc0048b4>
    48dc:	d9801e04 	addi	r6,sp,120
    48e0:	b80b883a 	mov	r5,r23
    48e4:	9809883a 	mov	r4,r19
    48e8:	000aab40 	call	aab4 <__sprint_r>
    48ec:	103b7d1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    48f0:	d8c02017 	ldw	r3,128(sp)
    48f4:	d8801f17 	ldw	r2,124(sp)
    48f8:	da000404 	addi	r8,sp,16
    48fc:	003fee06 	br	48b8 <__alt_data_end+0xfc0048b8>
    4900:	9088703a 	and	r4,r18,r2
    4904:	203eab1e 	bne	r4,zero,43b4 <__alt_data_end+0xfc0043b4>
    4908:	dc401f17 	ldw	r17,124(sp)
    490c:	40800115 	stw	r2,4(r8)
    4910:	44000015 	stw	r16,0(r8)
    4914:	8c400044 	addi	r17,r17,1
    4918:	d8c02015 	stw	r3,128(sp)
    491c:	dc401f15 	stw	r17,124(sp)
    4920:	008001c4 	movi	r2,7
    4924:	14400e16 	blt	r2,r17,4960 <___vfprintf_internal_r+0x168c>
    4928:	45800204 	addi	r22,r8,8
    492c:	003eca06 	br	4458 <__alt_data_end+0xfc004458>
    4930:	01000074 	movhi	r4,1
    4934:	21134484 	addi	r4,r4,19730
    4938:	d9002c15 	stw	r4,176(sp)
    493c:	d8802c17 	ldw	r2,176(sp)
    4940:	1c07883a 	add	r3,r3,r16
    4944:	8c400044 	addi	r17,r17,1
    4948:	b0800015 	stw	r2,0(r22)
    494c:	b4000115 	stw	r16,4(r22)
    4950:	d8c02015 	stw	r3,128(sp)
    4954:	dc401f15 	stw	r17,124(sp)
    4958:	008001c4 	movi	r2,7
    495c:	147ebd0e 	bge	r2,r17,4454 <__alt_data_end+0xfc004454>
    4960:	d9002d17 	ldw	r4,180(sp)
    4964:	d9801e04 	addi	r6,sp,120
    4968:	b80b883a 	mov	r5,r23
    496c:	000aab40 	call	aab4 <__sprint_r>
    4970:	103b5c1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4974:	d8c02017 	ldw	r3,128(sp)
    4978:	dc401f17 	ldw	r17,124(sp)
    497c:	dd800404 	addi	r22,sp,16
    4980:	003eb506 	br	4458 <__alt_data_end+0xfc004458>
    4984:	d9002d17 	ldw	r4,180(sp)
    4988:	d9801e04 	addi	r6,sp,120
    498c:	b80b883a 	mov	r5,r23
    4990:	000aab40 	call	aab4 <__sprint_r>
    4994:	103b531e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4998:	d8c02017 	ldw	r3,128(sp)
    499c:	dc401f17 	ldw	r17,124(sp)
    49a0:	da000404 	addi	r8,sp,16
    49a4:	003e8d06 	br	43dc <__alt_data_end+0xfc0043dc>
    49a8:	d9002d17 	ldw	r4,180(sp)
    49ac:	d9801e04 	addi	r6,sp,120
    49b0:	b80b883a 	mov	r5,r23
    49b4:	000aab40 	call	aab4 <__sprint_r>
    49b8:	103b4a1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    49bc:	d8c02017 	ldw	r3,128(sp)
    49c0:	dc401f17 	ldw	r17,124(sp)
    49c4:	dd800404 	addi	r22,sp,16
    49c8:	003e8f06 	br	4408 <__alt_data_end+0xfc004408>
    49cc:	0027883a 	mov	r19,zero
    49d0:	003f4a06 	br	46fc <__alt_data_end+0xfc0046fc>
    49d4:	d9002d17 	ldw	r4,180(sp)
    49d8:	d9801e04 	addi	r6,sp,120
    49dc:	b80b883a 	mov	r5,r23
    49e0:	000aab40 	call	aab4 <__sprint_r>
    49e4:	103b3f1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    49e8:	d8c02017 	ldw	r3,128(sp)
    49ec:	da000404 	addi	r8,sp,16
    49f0:	003c7b06 	br	3be0 <__alt_data_end+0xfc003be0>
    49f4:	d9402a17 	ldw	r5,168(sp)
    49f8:	04e7c83a 	sub	r19,zero,r19
    49fc:	07000b44 	movi	fp,45
    4a00:	9804c03a 	cmpne	r2,r19,zero
    4a04:	05adc83a 	sub	r22,zero,r22
    4a08:	df002785 	stb	fp,158(sp)
    4a0c:	b0adc83a 	sub	r22,r22,r2
    4a10:	28017b16 	blt	r5,zero,5000 <___vfprintf_internal_r+0x1d2c>
    4a14:	00bfdfc4 	movi	r2,-129
    4a18:	90a4703a 	and	r18,r18,r2
    4a1c:	003b8906 	br	3844 <__alt_data_end+0xfc003844>
    4a20:	d9003617 	ldw	r4,216(sp)
    4a24:	d9403817 	ldw	r5,224(sp)
    4a28:	da003d15 	stw	r8,244(sp)
    4a2c:	000a6d80 	call	a6d8 <__fpclassifyd>
    4a30:	da003d17 	ldw	r8,244(sp)
    4a34:	1000f026 	beq	r2,zero,4df8 <___vfprintf_internal_r+0x1b24>
    4a38:	d9002a17 	ldw	r4,168(sp)
    4a3c:	05bff7c4 	movi	r22,-33
    4a40:	00bfffc4 	movi	r2,-1
    4a44:	8dac703a 	and	r22,r17,r22
    4a48:	20820026 	beq	r4,r2,524c <___vfprintf_internal_r+0x1f78>
    4a4c:	008011c4 	movi	r2,71
    4a50:	b081f726 	beq	r22,r2,5230 <___vfprintf_internal_r+0x1f5c>
    4a54:	d9003817 	ldw	r4,224(sp)
    4a58:	90c04014 	ori	r3,r18,256
    4a5c:	d8c02c15 	stw	r3,176(sp)
    4a60:	20021516 	blt	r4,zero,52b8 <___vfprintf_internal_r+0x1fe4>
    4a64:	dcc03817 	ldw	r19,224(sp)
    4a68:	d8002905 	stb	zero,164(sp)
    4a6c:	00801984 	movi	r2,102
    4a70:	8881f926 	beq	r17,r2,5258 <___vfprintf_internal_r+0x1f84>
    4a74:	00801184 	movi	r2,70
    4a78:	88821c26 	beq	r17,r2,52ec <___vfprintf_internal_r+0x2018>
    4a7c:	00801144 	movi	r2,69
    4a80:	b081ef26 	beq	r22,r2,5240 <___vfprintf_internal_r+0x1f6c>
    4a84:	d8c02a17 	ldw	r3,168(sp)
    4a88:	d8802104 	addi	r2,sp,132
    4a8c:	d8800315 	stw	r2,12(sp)
    4a90:	d9403617 	ldw	r5,216(sp)
    4a94:	d8802504 	addi	r2,sp,148
    4a98:	d9002d17 	ldw	r4,180(sp)
    4a9c:	d8800215 	stw	r2,8(sp)
    4aa0:	d8802604 	addi	r2,sp,152
    4aa4:	d8c00015 	stw	r3,0(sp)
    4aa8:	d8800115 	stw	r2,4(sp)
    4aac:	01c00084 	movi	r7,2
    4ab0:	980d883a 	mov	r6,r19
    4ab4:	d8c03c15 	stw	r3,240(sp)
    4ab8:	da003d15 	stw	r8,244(sp)
    4abc:	0005a040 	call	5a04 <_dtoa_r>
    4ac0:	1021883a 	mov	r16,r2
    4ac4:	008019c4 	movi	r2,103
    4ac8:	d8c03c17 	ldw	r3,240(sp)
    4acc:	da003d17 	ldw	r8,244(sp)
    4ad0:	88817126 	beq	r17,r2,5098 <___vfprintf_internal_r+0x1dc4>
    4ad4:	008011c4 	movi	r2,71
    4ad8:	88829126 	beq	r17,r2,5520 <___vfprintf_internal_r+0x224c>
    4adc:	80f9883a 	add	fp,r16,r3
    4ae0:	d9003617 	ldw	r4,216(sp)
    4ae4:	000d883a 	mov	r6,zero
    4ae8:	000f883a 	mov	r7,zero
    4aec:	980b883a 	mov	r5,r19
    4af0:	da003d15 	stw	r8,244(sp)
    4af4:	000e8380 	call	e838 <__eqdf2>
    4af8:	da003d17 	ldw	r8,244(sp)
    4afc:	10018d26 	beq	r2,zero,5134 <___vfprintf_internal_r+0x1e60>
    4b00:	d8802117 	ldw	r2,132(sp)
    4b04:	1700062e 	bgeu	r2,fp,4b20 <___vfprintf_internal_r+0x184c>
    4b08:	01000c04 	movi	r4,48
    4b0c:	10c00044 	addi	r3,r2,1
    4b10:	d8c02115 	stw	r3,132(sp)
    4b14:	11000005 	stb	r4,0(r2)
    4b18:	d8802117 	ldw	r2,132(sp)
    4b1c:	173ffb36 	bltu	r2,fp,4b0c <__alt_data_end+0xfc004b0c>
    4b20:	1405c83a 	sub	r2,r2,r16
    4b24:	d8803315 	stw	r2,204(sp)
    4b28:	008011c4 	movi	r2,71
    4b2c:	b0817626 	beq	r22,r2,5108 <___vfprintf_internal_r+0x1e34>
    4b30:	00801944 	movi	r2,101
    4b34:	1442800e 	bge	r2,r17,5538 <___vfprintf_internal_r+0x2264>
    4b38:	d8c02617 	ldw	r3,152(sp)
    4b3c:	00801984 	movi	r2,102
    4b40:	d8c03215 	stw	r3,200(sp)
    4b44:	8881fe26 	beq	r17,r2,5340 <___vfprintf_internal_r+0x206c>
    4b48:	d8c03217 	ldw	r3,200(sp)
    4b4c:	d9003317 	ldw	r4,204(sp)
    4b50:	1901dd16 	blt	r3,r4,52c8 <___vfprintf_internal_r+0x1ff4>
    4b54:	9480004c 	andi	r18,r18,1
    4b58:	90022b1e 	bne	r18,zero,5408 <___vfprintf_internal_r+0x2134>
    4b5c:	1805883a 	mov	r2,r3
    4b60:	18028316 	blt	r3,zero,5570 <___vfprintf_internal_r+0x229c>
    4b64:	d8c03217 	ldw	r3,200(sp)
    4b68:	044019c4 	movi	r17,103
    4b6c:	d8c02b15 	stw	r3,172(sp)
    4b70:	df002907 	ldb	fp,164(sp)
    4b74:	e001531e 	bne	fp,zero,50c4 <___vfprintf_internal_r+0x1df0>
    4b78:	df002783 	ldbu	fp,158(sp)
    4b7c:	d8802915 	stw	r2,164(sp)
    4b80:	dc802c17 	ldw	r18,176(sp)
    4b84:	d8002a15 	stw	zero,168(sp)
    4b88:	003baf06 	br	3a48 <__alt_data_end+0xfc003a48>
    4b8c:	d8c02e17 	ldw	r3,184(sp)
    4b90:	d9002e17 	ldw	r4,184(sp)
    4b94:	d9402e17 	ldw	r5,184(sp)
    4b98:	18c00017 	ldw	r3,0(r3)
    4b9c:	21000117 	ldw	r4,4(r4)
    4ba0:	29400204 	addi	r5,r5,8
    4ba4:	d8c03615 	stw	r3,216(sp)
    4ba8:	d9003815 	stw	r4,224(sp)
    4bac:	d9402e15 	stw	r5,184(sp)
    4bb0:	003b5006 	br	38f4 <__alt_data_end+0xfc0038f4>
    4bb4:	ac400007 	ldb	r17,0(r21)
    4bb8:	003a2806 	br	345c <__alt_data_end+0xfc00345c>
    4bbc:	9080100c 	andi	r2,r18,64
    4bc0:	1000a826 	beq	r2,zero,4e64 <___vfprintf_internal_r+0x1b90>
    4bc4:	d8c02e17 	ldw	r3,184(sp)
    4bc8:	002d883a 	mov	r22,zero
    4bcc:	1cc0000b 	ldhu	r19,0(r3)
    4bd0:	18c00104 	addi	r3,r3,4
    4bd4:	d8c02e15 	stw	r3,184(sp)
    4bd8:	003caf06 	br	3e98 <__alt_data_end+0xfc003e98>
    4bdc:	d9002e17 	ldw	r4,184(sp)
    4be0:	d9402a17 	ldw	r5,168(sp)
    4be4:	002d883a 	mov	r22,zero
    4be8:	20800104 	addi	r2,r4,4
    4bec:	24c00017 	ldw	r19,0(r4)
    4bf0:	283ebb0e 	bge	r5,zero,46e0 <__alt_data_end+0xfc0046e0>
    4bf4:	003ef106 	br	47bc <__alt_data_end+0xfc0047bc>
    4bf8:	9080040c 	andi	r2,r18,16
    4bfc:	1000921e 	bne	r2,zero,4e48 <___vfprintf_internal_r+0x1b74>
    4c00:	9480100c 	andi	r18,r18,64
    4c04:	90013926 	beq	r18,zero,50ec <___vfprintf_internal_r+0x1e18>
    4c08:	d9402e17 	ldw	r5,184(sp)
    4c0c:	d8c02f17 	ldw	r3,188(sp)
    4c10:	28800017 	ldw	r2,0(r5)
    4c14:	29400104 	addi	r5,r5,4
    4c18:	d9402e15 	stw	r5,184(sp)
    4c1c:	10c0000d 	sth	r3,0(r2)
    4c20:	0039e406 	br	33b4 <__alt_data_end+0xfc0033b4>
    4c24:	9080100c 	andi	r2,r18,64
    4c28:	10008026 	beq	r2,zero,4e2c <___vfprintf_internal_r+0x1b58>
    4c2c:	d8802e17 	ldw	r2,184(sp)
    4c30:	14c0000f 	ldh	r19,0(r2)
    4c34:	10800104 	addi	r2,r2,4
    4c38:	d8802e15 	stw	r2,184(sp)
    4c3c:	982dd7fa 	srai	r22,r19,31
    4c40:	b005883a 	mov	r2,r22
    4c44:	003af706 	br	3824 <__alt_data_end+0xfc003824>
    4c48:	9080100c 	andi	r2,r18,64
    4c4c:	d8002785 	stb	zero,158(sp)
    4c50:	10008a1e 	bne	r2,zero,4e7c <___vfprintf_internal_r+0x1ba8>
    4c54:	d9002e17 	ldw	r4,184(sp)
    4c58:	d9402a17 	ldw	r5,168(sp)
    4c5c:	002d883a 	mov	r22,zero
    4c60:	20800104 	addi	r2,r4,4
    4c64:	24c00017 	ldw	r19,0(r4)
    4c68:	283e4b0e 	bge	r5,zero,4598 <__alt_data_end+0xfc004598>
    4c6c:	9d86b03a 	or	r3,r19,r22
    4c70:	d8802e15 	stw	r2,184(sp)
    4c74:	183e4c1e 	bne	r3,zero,45a8 <__alt_data_end+0xfc0045a8>
    4c78:	0039883a 	mov	fp,zero
    4c7c:	0005883a 	mov	r2,zero
    4c80:	003d4006 	br	4184 <__alt_data_end+0xfc004184>
    4c84:	01400074 	movhi	r5,1
    4c88:	29534484 	addi	r5,r5,19730
    4c8c:	d9402c15 	stw	r5,176(sp)
    4c90:	d9402c17 	ldw	r5,176(sp)
    4c94:	1c47883a 	add	r3,r3,r17
    4c98:	10800044 	addi	r2,r2,1
    4c9c:	41400015 	stw	r5,0(r8)
    4ca0:	44400115 	stw	r17,4(r8)
    4ca4:	d8c02015 	stw	r3,128(sp)
    4ca8:	d8801f15 	stw	r2,124(sp)
    4cac:	010001c4 	movi	r4,7
    4cb0:	20bec816 	blt	r4,r2,47d4 <__alt_data_end+0xfc0047d4>
    4cb4:	42000204 	addi	r8,r8,8
    4cb8:	003ecd06 	br	47f0 <__alt_data_end+0xfc0047f0>
    4cbc:	d9002a17 	ldw	r4,168(sp)
    4cc0:	d8002785 	stb	zero,158(sp)
    4cc4:	203d2d16 	blt	r4,zero,417c <__alt_data_end+0xfc00417c>
    4cc8:	00bfdfc4 	movi	r2,-129
    4ccc:	90a4703a 	and	r18,r18,r2
    4cd0:	003a6106 	br	3658 <__alt_data_end+0xfc003658>
    4cd4:	01000074 	movhi	r4,1
    4cd8:	21134484 	addi	r4,r4,19730
    4cdc:	d9002c15 	stw	r4,176(sp)
    4ce0:	003bea06 	br	3c8c <__alt_data_end+0xfc003c8c>
    4ce4:	d9002d17 	ldw	r4,180(sp)
    4ce8:	d9801e04 	addi	r6,sp,120
    4cec:	b80b883a 	mov	r5,r23
    4cf0:	000aab40 	call	aab4 <__sprint_r>
    4cf4:	103a7b1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4cf8:	d8c02017 	ldw	r3,128(sp)
    4cfc:	da000404 	addi	r8,sp,16
    4d00:	003d4106 	br	4208 <__alt_data_end+0xfc004208>
    4d04:	d8801f17 	ldw	r2,124(sp)
    4d08:	01400074 	movhi	r5,1
    4d0c:	01000044 	movi	r4,1
    4d10:	18c00044 	addi	r3,r3,1
    4d14:	10800044 	addi	r2,r2,1
    4d18:	29534404 	addi	r5,r5,19728
    4d1c:	41000115 	stw	r4,4(r8)
    4d20:	41400015 	stw	r5,0(r8)
    4d24:	d8c02015 	stw	r3,128(sp)
    4d28:	d8801f15 	stw	r2,124(sp)
    4d2c:	010001c4 	movi	r4,7
    4d30:	20805c16 	blt	r4,r2,4ea4 <___vfprintf_internal_r+0x1bd0>
    4d34:	42000204 	addi	r8,r8,8
    4d38:	8800041e 	bne	r17,zero,4d4c <___vfprintf_internal_r+0x1a78>
    4d3c:	d8803317 	ldw	r2,204(sp)
    4d40:	1000021e 	bne	r2,zero,4d4c <___vfprintf_internal_r+0x1a78>
    4d44:	9080004c 	andi	r2,r18,1
    4d48:	103be726 	beq	r2,zero,3ce8 <__alt_data_end+0xfc003ce8>
    4d4c:	d9003717 	ldw	r4,220(sp)
    4d50:	d8801f17 	ldw	r2,124(sp)
    4d54:	d9403417 	ldw	r5,208(sp)
    4d58:	20c7883a 	add	r3,r4,r3
    4d5c:	10800044 	addi	r2,r2,1
    4d60:	41000115 	stw	r4,4(r8)
    4d64:	41400015 	stw	r5,0(r8)
    4d68:	d8c02015 	stw	r3,128(sp)
    4d6c:	d8801f15 	stw	r2,124(sp)
    4d70:	010001c4 	movi	r4,7
    4d74:	20812116 	blt	r4,r2,51fc <___vfprintf_internal_r+0x1f28>
    4d78:	42000204 	addi	r8,r8,8
    4d7c:	0463c83a 	sub	r17,zero,r17
    4d80:	0440730e 	bge	zero,r17,4f50 <___vfprintf_internal_r+0x1c7c>
    4d84:	05800404 	movi	r22,16
    4d88:	b440860e 	bge	r22,r17,4fa4 <___vfprintf_internal_r+0x1cd0>
    4d8c:	01400074 	movhi	r5,1
    4d90:	29534484 	addi	r5,r5,19730
    4d94:	d9402c15 	stw	r5,176(sp)
    4d98:	070001c4 	movi	fp,7
    4d9c:	dcc02d17 	ldw	r19,180(sp)
    4da0:	00000306 	br	4db0 <___vfprintf_internal_r+0x1adc>
    4da4:	42000204 	addi	r8,r8,8
    4da8:	8c7ffc04 	addi	r17,r17,-16
    4dac:	b440800e 	bge	r22,r17,4fb0 <___vfprintf_internal_r+0x1cdc>
    4db0:	18c00404 	addi	r3,r3,16
    4db4:	10800044 	addi	r2,r2,1
    4db8:	45000015 	stw	r20,0(r8)
    4dbc:	45800115 	stw	r22,4(r8)
    4dc0:	d8c02015 	stw	r3,128(sp)
    4dc4:	d8801f15 	stw	r2,124(sp)
    4dc8:	e0bff60e 	bge	fp,r2,4da4 <__alt_data_end+0xfc004da4>
    4dcc:	d9801e04 	addi	r6,sp,120
    4dd0:	b80b883a 	mov	r5,r23
    4dd4:	9809883a 	mov	r4,r19
    4dd8:	000aab40 	call	aab4 <__sprint_r>
    4ddc:	103a411e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4de0:	d8c02017 	ldw	r3,128(sp)
    4de4:	d8801f17 	ldw	r2,124(sp)
    4de8:	da000404 	addi	r8,sp,16
    4dec:	003fee06 	br	4da8 <__alt_data_end+0xfc004da8>
    4df0:	00bfffc4 	movi	r2,-1
    4df4:	003a3f06 	br	36f4 <__alt_data_end+0xfc0036f4>
    4df8:	008011c4 	movi	r2,71
    4dfc:	1440b816 	blt	r2,r17,50e0 <___vfprintf_internal_r+0x1e0c>
    4e00:	04000074 	movhi	r16,1
    4e04:	84133604 	addi	r16,r16,19672
    4e08:	00c000c4 	movi	r3,3
    4e0c:	00bfdfc4 	movi	r2,-129
    4e10:	d8c02915 	stw	r3,164(sp)
    4e14:	90a4703a 	and	r18,r18,r2
    4e18:	df002783 	ldbu	fp,158(sp)
    4e1c:	d8c02b15 	stw	r3,172(sp)
    4e20:	d8002a15 	stw	zero,168(sp)
    4e24:	d8003215 	stw	zero,200(sp)
    4e28:	003b0706 	br	3a48 <__alt_data_end+0xfc003a48>
    4e2c:	d8c02e17 	ldw	r3,184(sp)
    4e30:	1cc00017 	ldw	r19,0(r3)
    4e34:	18c00104 	addi	r3,r3,4
    4e38:	d8c02e15 	stw	r3,184(sp)
    4e3c:	982dd7fa 	srai	r22,r19,31
    4e40:	b005883a 	mov	r2,r22
    4e44:	003a7706 	br	3824 <__alt_data_end+0xfc003824>
    4e48:	d8c02e17 	ldw	r3,184(sp)
    4e4c:	d9002f17 	ldw	r4,188(sp)
    4e50:	18800017 	ldw	r2,0(r3)
    4e54:	18c00104 	addi	r3,r3,4
    4e58:	d8c02e15 	stw	r3,184(sp)
    4e5c:	11000015 	stw	r4,0(r2)
    4e60:	00395406 	br	33b4 <__alt_data_end+0xfc0033b4>
    4e64:	d9002e17 	ldw	r4,184(sp)
    4e68:	002d883a 	mov	r22,zero
    4e6c:	24c00017 	ldw	r19,0(r4)
    4e70:	21000104 	addi	r4,r4,4
    4e74:	d9002e15 	stw	r4,184(sp)
    4e78:	003c0706 	br	3e98 <__alt_data_end+0xfc003e98>
    4e7c:	d9402e17 	ldw	r5,184(sp)
    4e80:	d8c02a17 	ldw	r3,168(sp)
    4e84:	002d883a 	mov	r22,zero
    4e88:	28800104 	addi	r2,r5,4
    4e8c:	2cc0000b 	ldhu	r19,0(r5)
    4e90:	183dc10e 	bge	r3,zero,4598 <__alt_data_end+0xfc004598>
    4e94:	003f7506 	br	4c6c <__alt_data_end+0xfc004c6c>
    4e98:	04000074 	movhi	r16,1
    4e9c:	84133404 	addi	r16,r16,19664
    4ea0:	003aa706 	br	3940 <__alt_data_end+0xfc003940>
    4ea4:	d9002d17 	ldw	r4,180(sp)
    4ea8:	d9801e04 	addi	r6,sp,120
    4eac:	b80b883a 	mov	r5,r23
    4eb0:	000aab40 	call	aab4 <__sprint_r>
    4eb4:	103a0b1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4eb8:	dc402617 	ldw	r17,152(sp)
    4ebc:	d8c02017 	ldw	r3,128(sp)
    4ec0:	da000404 	addi	r8,sp,16
    4ec4:	003f9c06 	br	4d38 <__alt_data_end+0xfc004d38>
    4ec8:	ac400043 	ldbu	r17,1(r21)
    4ecc:	84000814 	ori	r16,r16,32
    4ed0:	ad400044 	addi	r21,r21,1
    4ed4:	8c403fcc 	andi	r17,r17,255
    4ed8:	8c40201c 	xori	r17,r17,128
    4edc:	8c7fe004 	addi	r17,r17,-128
    4ee0:	00395e06 	br	345c <__alt_data_end+0xfc00345c>
    4ee4:	d8c02e15 	stw	r3,184(sp)
    4ee8:	0039883a 	mov	fp,zero
    4eec:	003e3506 	br	47c4 <__alt_data_end+0xfc0047c4>
    4ef0:	d9002d17 	ldw	r4,180(sp)
    4ef4:	d9801e04 	addi	r6,sp,120
    4ef8:	b80b883a 	mov	r5,r23
    4efc:	000aab40 	call	aab4 <__sprint_r>
    4f00:	1039f81e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4f04:	d8c02017 	ldw	r3,128(sp)
    4f08:	da000404 	addi	r8,sp,16
    4f0c:	003cd006 	br	4250 <__alt_data_end+0xfc004250>
    4f10:	8009883a 	mov	r4,r16
    4f14:	df003d15 	stw	fp,244(sp)
    4f18:	000323c0 	call	323c <strlen>
    4f1c:	d8802b15 	stw	r2,172(sp)
    4f20:	da003d17 	ldw	r8,244(sp)
    4f24:	103c200e 	bge	r2,zero,3fa8 <__alt_data_end+0xfc003fa8>
    4f28:	0005883a 	mov	r2,zero
    4f2c:	003c1e06 	br	3fa8 <__alt_data_end+0xfc003fa8>
    4f30:	d9002d17 	ldw	r4,180(sp)
    4f34:	d9801e04 	addi	r6,sp,120
    4f38:	b80b883a 	mov	r5,r23
    4f3c:	000aab40 	call	aab4 <__sprint_r>
    4f40:	1039e81e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4f44:	d8c02017 	ldw	r3,128(sp)
    4f48:	d8801f17 	ldw	r2,124(sp)
    4f4c:	da000404 	addi	r8,sp,16
    4f50:	d9403317 	ldw	r5,204(sp)
    4f54:	10800044 	addi	r2,r2,1
    4f58:	44000015 	stw	r16,0(r8)
    4f5c:	28c7883a 	add	r3,r5,r3
    4f60:	003b5b06 	br	3cd0 <__alt_data_end+0xfc003cd0>
    4f64:	01000074 	movhi	r4,1
    4f68:	21134884 	addi	r4,r4,19746
    4f6c:	d9003515 	stw	r4,212(sp)
    4f70:	003af206 	br	3b3c <__alt_data_end+0xfc003b3c>
    4f74:	013fffc4 	movi	r4,-1
    4f78:	003a0806 	br	379c <__alt_data_end+0xfc00379c>
    4f7c:	0023883a 	mov	r17,zero
    4f80:	003d9d06 	br	45f8 <__alt_data_end+0xfc0045f8>
    4f84:	d9002d17 	ldw	r4,180(sp)
    4f88:	d9801e04 	addi	r6,sp,120
    4f8c:	b80b883a 	mov	r5,r23
    4f90:	000aab40 	call	aab4 <__sprint_r>
    4f94:	1039d31e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4f98:	d8c02017 	ldw	r3,128(sp)
    4f9c:	da000404 	addi	r8,sp,16
    4fa0:	003d9406 	br	45f4 <__alt_data_end+0xfc0045f4>
    4fa4:	01000074 	movhi	r4,1
    4fa8:	21134484 	addi	r4,r4,19730
    4fac:	d9002c15 	stw	r4,176(sp)
    4fb0:	d9002c17 	ldw	r4,176(sp)
    4fb4:	1c47883a 	add	r3,r3,r17
    4fb8:	10800044 	addi	r2,r2,1
    4fbc:	41000015 	stw	r4,0(r8)
    4fc0:	44400115 	stw	r17,4(r8)
    4fc4:	d8c02015 	stw	r3,128(sp)
    4fc8:	d8801f15 	stw	r2,124(sp)
    4fcc:	010001c4 	movi	r4,7
    4fd0:	20bfd716 	blt	r4,r2,4f30 <__alt_data_end+0xfc004f30>
    4fd4:	42000204 	addi	r8,r8,8
    4fd8:	003fdd06 	br	4f50 <__alt_data_end+0xfc004f50>
    4fdc:	d9002d17 	ldw	r4,180(sp)
    4fe0:	d9801e04 	addi	r6,sp,120
    4fe4:	b80b883a 	mov	r5,r23
    4fe8:	000aab40 	call	aab4 <__sprint_r>
    4fec:	1039bd1e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    4ff0:	d8802617 	ldw	r2,152(sp)
    4ff4:	d8c02017 	ldw	r3,128(sp)
    4ff8:	da000404 	addi	r8,sp,16
    4ffc:	003e1006 	br	4840 <__alt_data_end+0xfc004840>
    5000:	00800044 	movi	r2,1
    5004:	10803fcc 	andi	r2,r2,255
    5008:	00c00044 	movi	r3,1
    500c:	10fa0d26 	beq	r2,r3,3844 <__alt_data_end+0xfc003844>
    5010:	00c00084 	movi	r3,2
    5014:	10fbaf26 	beq	r2,r3,3ed4 <__alt_data_end+0xfc003ed4>
    5018:	003a6d06 	br	39d0 <__alt_data_end+0xfc0039d0>
    501c:	01000074 	movhi	r4,1
    5020:	21134884 	addi	r4,r4,19746
    5024:	d9003515 	stw	r4,212(sp)
    5028:	003b5406 	br	3d7c <__alt_data_end+0xfc003d7c>
    502c:	d8802a17 	ldw	r2,168(sp)
    5030:	00c00184 	movi	r3,6
    5034:	1880012e 	bgeu	r3,r2,503c <___vfprintf_internal_r+0x1d68>
    5038:	1805883a 	mov	r2,r3
    503c:	d8802b15 	stw	r2,172(sp)
    5040:	1000ef16 	blt	r2,zero,5400 <___vfprintf_internal_r+0x212c>
    5044:	04000074 	movhi	r16,1
    5048:	d8802915 	stw	r2,164(sp)
    504c:	dcc02e15 	stw	r19,184(sp)
    5050:	d8002a15 	stw	zero,168(sp)
    5054:	d8003215 	stw	zero,200(sp)
    5058:	84134204 	addi	r16,r16,19720
    505c:	0039883a 	mov	fp,zero
    5060:	003a8006 	br	3a64 <__alt_data_end+0xfc003a64>
    5064:	0021883a 	mov	r16,zero
    5068:	003e0706 	br	4888 <__alt_data_end+0xfc004888>
    506c:	d9002d17 	ldw	r4,180(sp)
    5070:	d9801e04 	addi	r6,sp,120
    5074:	b80b883a 	mov	r5,r23
    5078:	000aab40 	call	aab4 <__sprint_r>
    507c:	1039991e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    5080:	d8802617 	ldw	r2,152(sp)
    5084:	d9403317 	ldw	r5,204(sp)
    5088:	d8c02017 	ldw	r3,128(sp)
    508c:	da000404 	addi	r8,sp,16
    5090:	2885c83a 	sub	r2,r5,r2
    5094:	003dfb06 	br	4884 <__alt_data_end+0xfc004884>
    5098:	9080004c 	andi	r2,r18,1
    509c:	103e8f1e 	bne	r2,zero,4adc <__alt_data_end+0xfc004adc>
    50a0:	d8802117 	ldw	r2,132(sp)
    50a4:	003e9e06 	br	4b20 <__alt_data_end+0xfc004b20>
    50a8:	1025883a 	mov	r18,r2
    50ac:	0039883a 	mov	fp,zero
    50b0:	00800084 	movi	r2,2
    50b4:	003fd306 	br	5004 <__alt_data_end+0xfc005004>
    50b8:	07000b44 	movi	fp,45
    50bc:	df002785 	stb	fp,158(sp)
    50c0:	003a1b06 	br	3930 <__alt_data_end+0xfc003930>
    50c4:	00c00b44 	movi	r3,45
    50c8:	d8c02785 	stb	r3,158(sp)
    50cc:	d8802915 	stw	r2,164(sp)
    50d0:	dc802c17 	ldw	r18,176(sp)
    50d4:	d8002a15 	stw	zero,168(sp)
    50d8:	07000b44 	movi	fp,45
    50dc:	003a5e06 	br	3a58 <__alt_data_end+0xfc003a58>
    50e0:	04000074 	movhi	r16,1
    50e4:	84133704 	addi	r16,r16,19676
    50e8:	003f4706 	br	4e08 <__alt_data_end+0xfc004e08>
    50ec:	d9002e17 	ldw	r4,184(sp)
    50f0:	d9402f17 	ldw	r5,188(sp)
    50f4:	20800017 	ldw	r2,0(r4)
    50f8:	21000104 	addi	r4,r4,4
    50fc:	d9002e15 	stw	r4,184(sp)
    5100:	11400015 	stw	r5,0(r2)
    5104:	0038ab06 	br	33b4 <__alt_data_end+0xfc0033b4>
    5108:	dd802617 	ldw	r22,152(sp)
    510c:	00bfff44 	movi	r2,-3
    5110:	b0801c16 	blt	r22,r2,5184 <___vfprintf_internal_r+0x1eb0>
    5114:	d9402a17 	ldw	r5,168(sp)
    5118:	2d801a16 	blt	r5,r22,5184 <___vfprintf_internal_r+0x1eb0>
    511c:	dd803215 	stw	r22,200(sp)
    5120:	003e8906 	br	4b48 <__alt_data_end+0xfc004b48>
    5124:	01000074 	movhi	r4,1
    5128:	21134484 	addi	r4,r4,19730
    512c:	d9002c15 	stw	r4,176(sp)
    5130:	003c9106 	br	4378 <__alt_data_end+0xfc004378>
    5134:	e005883a 	mov	r2,fp
    5138:	003e7906 	br	4b20 <__alt_data_end+0xfc004b20>
    513c:	d9002a17 	ldw	r4,168(sp)
    5140:	df002783 	ldbu	fp,158(sp)
    5144:	dcc02e15 	stw	r19,184(sp)
    5148:	d9002915 	stw	r4,164(sp)
    514c:	d9002b15 	stw	r4,172(sp)
    5150:	d8002a15 	stw	zero,168(sp)
    5154:	d8003215 	stw	zero,200(sp)
    5158:	003a3b06 	br	3a48 <__alt_data_end+0xfc003a48>
    515c:	9080004c 	andi	r2,r18,1
    5160:	0039883a 	mov	fp,zero
    5164:	10000426 	beq	r2,zero,5178 <___vfprintf_internal_r+0x1ea4>
    5168:	00800c04 	movi	r2,48
    516c:	dc001dc4 	addi	r16,sp,119
    5170:	d8801dc5 	stb	r2,119(sp)
    5174:	003b6406 	br	3f08 <__alt_data_end+0xfc003f08>
    5178:	d8002b15 	stw	zero,172(sp)
    517c:	dc001e04 	addi	r16,sp,120
    5180:	003a2b06 	br	3a30 <__alt_data_end+0xfc003a30>
    5184:	8c7fff84 	addi	r17,r17,-2
    5188:	b5bfffc4 	addi	r22,r22,-1
    518c:	dd802615 	stw	r22,152(sp)
    5190:	dc4022c5 	stb	r17,139(sp)
    5194:	b000bf16 	blt	r22,zero,5494 <___vfprintf_internal_r+0x21c0>
    5198:	00800ac4 	movi	r2,43
    519c:	d8802305 	stb	r2,140(sp)
    51a0:	00800244 	movi	r2,9
    51a4:	15807016 	blt	r2,r22,5368 <___vfprintf_internal_r+0x2094>
    51a8:	00800c04 	movi	r2,48
    51ac:	b5800c04 	addi	r22,r22,48
    51b0:	d8802345 	stb	r2,141(sp)
    51b4:	dd802385 	stb	r22,142(sp)
    51b8:	d88023c4 	addi	r2,sp,143
    51bc:	df0022c4 	addi	fp,sp,139
    51c0:	d8c03317 	ldw	r3,204(sp)
    51c4:	1739c83a 	sub	fp,r2,fp
    51c8:	d9003317 	ldw	r4,204(sp)
    51cc:	e0c7883a 	add	r3,fp,r3
    51d0:	df003a15 	stw	fp,232(sp)
    51d4:	d8c02b15 	stw	r3,172(sp)
    51d8:	00800044 	movi	r2,1
    51dc:	1100b30e 	bge	r2,r4,54ac <___vfprintf_internal_r+0x21d8>
    51e0:	d8c02b17 	ldw	r3,172(sp)
    51e4:	18c00044 	addi	r3,r3,1
    51e8:	d8c02b15 	stw	r3,172(sp)
    51ec:	1805883a 	mov	r2,r3
    51f0:	1800ac16 	blt	r3,zero,54a4 <___vfprintf_internal_r+0x21d0>
    51f4:	d8003215 	stw	zero,200(sp)
    51f8:	003e5d06 	br	4b70 <__alt_data_end+0xfc004b70>
    51fc:	d9002d17 	ldw	r4,180(sp)
    5200:	d9801e04 	addi	r6,sp,120
    5204:	b80b883a 	mov	r5,r23
    5208:	000aab40 	call	aab4 <__sprint_r>
    520c:	1039351e 	bne	r2,zero,36e4 <__alt_data_end+0xfc0036e4>
    5210:	dc402617 	ldw	r17,152(sp)
    5214:	d8c02017 	ldw	r3,128(sp)
    5218:	d8801f17 	ldw	r2,124(sp)
    521c:	da000404 	addi	r8,sp,16
    5220:	003ed606 	br	4d7c <__alt_data_end+0xfc004d7c>
    5224:	182b883a 	mov	r21,r3
    5228:	d8002a15 	stw	zero,168(sp)
    522c:	00388c06 	br	3460 <__alt_data_end+0xfc003460>
    5230:	d8802a17 	ldw	r2,168(sp)
    5234:	103e071e 	bne	r2,zero,4a54 <__alt_data_end+0xfc004a54>
    5238:	dc002a15 	stw	r16,168(sp)
    523c:	003e0506 	br	4a54 <__alt_data_end+0xfc004a54>
    5240:	d9002a17 	ldw	r4,168(sp)
    5244:	20c00044 	addi	r3,r4,1
    5248:	003e0f06 	br	4a88 <__alt_data_end+0xfc004a88>
    524c:	01400184 	movi	r5,6
    5250:	d9402a15 	stw	r5,168(sp)
    5254:	003dff06 	br	4a54 <__alt_data_end+0xfc004a54>
    5258:	d8802104 	addi	r2,sp,132
    525c:	d8800315 	stw	r2,12(sp)
    5260:	d8802504 	addi	r2,sp,148
    5264:	d8800215 	stw	r2,8(sp)
    5268:	d8802604 	addi	r2,sp,152
    526c:	d8800115 	stw	r2,4(sp)
    5270:	d8802a17 	ldw	r2,168(sp)
    5274:	d9403617 	ldw	r5,216(sp)
    5278:	d9002d17 	ldw	r4,180(sp)
    527c:	d8800015 	stw	r2,0(sp)
    5280:	01c000c4 	movi	r7,3
    5284:	980d883a 	mov	r6,r19
    5288:	da003d15 	stw	r8,244(sp)
    528c:	0005a040 	call	5a04 <_dtoa_r>
    5290:	d8c02a17 	ldw	r3,168(sp)
    5294:	da003d17 	ldw	r8,244(sp)
    5298:	1021883a 	mov	r16,r2
    529c:	10f9883a 	add	fp,r2,r3
    52a0:	81000007 	ldb	r4,0(r16)
    52a4:	00800c04 	movi	r2,48
    52a8:	20805e26 	beq	r4,r2,5424 <___vfprintf_internal_r+0x2150>
    52ac:	d8c02617 	ldw	r3,152(sp)
    52b0:	e0f9883a 	add	fp,fp,r3
    52b4:	003e0a06 	br	4ae0 <__alt_data_end+0xfc004ae0>
    52b8:	00c00b44 	movi	r3,45
    52bc:	24e0003c 	xorhi	r19,r4,32768
    52c0:	d8c02905 	stb	r3,164(sp)
    52c4:	003de906 	br	4a6c <__alt_data_end+0xfc004a6c>
    52c8:	d8c03217 	ldw	r3,200(sp)
    52cc:	00c07a0e 	bge	zero,r3,54b8 <___vfprintf_internal_r+0x21e4>
    52d0:	00800044 	movi	r2,1
    52d4:	d9003317 	ldw	r4,204(sp)
    52d8:	1105883a 	add	r2,r2,r4
    52dc:	d8802b15 	stw	r2,172(sp)
    52e0:	10004e16 	blt	r2,zero,541c <___vfprintf_internal_r+0x2148>
    52e4:	044019c4 	movi	r17,103
    52e8:	003e2106 	br	4b70 <__alt_data_end+0xfc004b70>
    52ec:	d9002a17 	ldw	r4,168(sp)
    52f0:	d8802104 	addi	r2,sp,132
    52f4:	d8800315 	stw	r2,12(sp)
    52f8:	d9000015 	stw	r4,0(sp)
    52fc:	d8802504 	addi	r2,sp,148
    5300:	d9403617 	ldw	r5,216(sp)
    5304:	d9002d17 	ldw	r4,180(sp)
    5308:	d8800215 	stw	r2,8(sp)
    530c:	d8802604 	addi	r2,sp,152
    5310:	d8800115 	stw	r2,4(sp)
    5314:	01c000c4 	movi	r7,3
    5318:	980d883a 	mov	r6,r19
    531c:	da003d15 	stw	r8,244(sp)
    5320:	0005a040 	call	5a04 <_dtoa_r>
    5324:	d8c02a17 	ldw	r3,168(sp)
    5328:	da003d17 	ldw	r8,244(sp)
    532c:	1021883a 	mov	r16,r2
    5330:	00801184 	movi	r2,70
    5334:	80f9883a 	add	fp,r16,r3
    5338:	88bfd926 	beq	r17,r2,52a0 <__alt_data_end+0xfc0052a0>
    533c:	003de806 	br	4ae0 <__alt_data_end+0xfc004ae0>
    5340:	d9002a17 	ldw	r4,168(sp)
    5344:	00c04d0e 	bge	zero,r3,547c <___vfprintf_internal_r+0x21a8>
    5348:	2000441e 	bne	r4,zero,545c <___vfprintf_internal_r+0x2188>
    534c:	9480004c 	andi	r18,r18,1
    5350:	9000421e 	bne	r18,zero,545c <___vfprintf_internal_r+0x2188>
    5354:	1805883a 	mov	r2,r3
    5358:	18006f16 	blt	r3,zero,5518 <___vfprintf_internal_r+0x2244>
    535c:	d8c03217 	ldw	r3,200(sp)
    5360:	d8c02b15 	stw	r3,172(sp)
    5364:	003e0206 	br	4b70 <__alt_data_end+0xfc004b70>
    5368:	df0022c4 	addi	fp,sp,139
    536c:	dc002a15 	stw	r16,168(sp)
    5370:	4027883a 	mov	r19,r8
    5374:	e021883a 	mov	r16,fp
    5378:	b009883a 	mov	r4,r22
    537c:	01400284 	movi	r5,10
    5380:	0002fa40 	call	2fa4 <__modsi3>
    5384:	10800c04 	addi	r2,r2,48
    5388:	843fffc4 	addi	r16,r16,-1
    538c:	b009883a 	mov	r4,r22
    5390:	01400284 	movi	r5,10
    5394:	80800005 	stb	r2,0(r16)
    5398:	0002f200 	call	2f20 <__divsi3>
    539c:	102d883a 	mov	r22,r2
    53a0:	00800244 	movi	r2,9
    53a4:	15bff416 	blt	r2,r22,5378 <__alt_data_end+0xfc005378>
    53a8:	9811883a 	mov	r8,r19
    53ac:	b0800c04 	addi	r2,r22,48
    53b0:	8027883a 	mov	r19,r16
    53b4:	997fffc4 	addi	r5,r19,-1
    53b8:	98bfffc5 	stb	r2,-1(r19)
    53bc:	dc002a17 	ldw	r16,168(sp)
    53c0:	2f006d2e 	bgeu	r5,fp,5578 <___vfprintf_internal_r+0x22a4>
    53c4:	d9c02384 	addi	r7,sp,142
    53c8:	3ccfc83a 	sub	r7,r7,r19
    53cc:	d9002344 	addi	r4,sp,141
    53d0:	e1cf883a 	add	r7,fp,r7
    53d4:	00000106 	br	53dc <___vfprintf_internal_r+0x2108>
    53d8:	28800003 	ldbu	r2,0(r5)
    53dc:	20800005 	stb	r2,0(r4)
    53e0:	21000044 	addi	r4,r4,1
    53e4:	29400044 	addi	r5,r5,1
    53e8:	393ffb1e 	bne	r7,r4,53d8 <__alt_data_end+0xfc0053d8>
    53ec:	d8802304 	addi	r2,sp,140
    53f0:	14c5c83a 	sub	r2,r2,r19
    53f4:	d8c02344 	addi	r3,sp,141
    53f8:	1885883a 	add	r2,r3,r2
    53fc:	003f7006 	br	51c0 <__alt_data_end+0xfc0051c0>
    5400:	0005883a 	mov	r2,zero
    5404:	003f0f06 	br	5044 <__alt_data_end+0xfc005044>
    5408:	d8c03217 	ldw	r3,200(sp)
    540c:	18c00044 	addi	r3,r3,1
    5410:	d8c02b15 	stw	r3,172(sp)
    5414:	1805883a 	mov	r2,r3
    5418:	183fb20e 	bge	r3,zero,52e4 <__alt_data_end+0xfc0052e4>
    541c:	0005883a 	mov	r2,zero
    5420:	003fb006 	br	52e4 <__alt_data_end+0xfc0052e4>
    5424:	d9003617 	ldw	r4,216(sp)
    5428:	000d883a 	mov	r6,zero
    542c:	000f883a 	mov	r7,zero
    5430:	980b883a 	mov	r5,r19
    5434:	d8c03c15 	stw	r3,240(sp)
    5438:	da003d15 	stw	r8,244(sp)
    543c:	000e8380 	call	e838 <__eqdf2>
    5440:	d8c03c17 	ldw	r3,240(sp)
    5444:	da003d17 	ldw	r8,244(sp)
    5448:	103f9826 	beq	r2,zero,52ac <__alt_data_end+0xfc0052ac>
    544c:	00800044 	movi	r2,1
    5450:	10c7c83a 	sub	r3,r2,r3
    5454:	d8c02615 	stw	r3,152(sp)
    5458:	003f9506 	br	52b0 <__alt_data_end+0xfc0052b0>
    545c:	d9002a17 	ldw	r4,168(sp)
    5460:	d8c03217 	ldw	r3,200(sp)
    5464:	20800044 	addi	r2,r4,1
    5468:	1885883a 	add	r2,r3,r2
    546c:	d8802b15 	stw	r2,172(sp)
    5470:	103dbf0e 	bge	r2,zero,4b70 <__alt_data_end+0xfc004b70>
    5474:	0005883a 	mov	r2,zero
    5478:	003dbd06 	br	4b70 <__alt_data_end+0xfc004b70>
    547c:	2000201e 	bne	r4,zero,5500 <___vfprintf_internal_r+0x222c>
    5480:	9480004c 	andi	r18,r18,1
    5484:	90001e1e 	bne	r18,zero,5500 <___vfprintf_internal_r+0x222c>
    5488:	00800044 	movi	r2,1
    548c:	d8802b15 	stw	r2,172(sp)
    5490:	003db706 	br	4b70 <__alt_data_end+0xfc004b70>
    5494:	00800b44 	movi	r2,45
    5498:	05adc83a 	sub	r22,zero,r22
    549c:	d8802305 	stb	r2,140(sp)
    54a0:	003f3f06 	br	51a0 <__alt_data_end+0xfc0051a0>
    54a4:	0005883a 	mov	r2,zero
    54a8:	003f5206 	br	51f4 <__alt_data_end+0xfc0051f4>
    54ac:	90a4703a 	and	r18,r18,r2
    54b0:	903f4e26 	beq	r18,zero,51ec <__alt_data_end+0xfc0051ec>
    54b4:	003f4a06 	br	51e0 <__alt_data_end+0xfc0051e0>
    54b8:	00800084 	movi	r2,2
    54bc:	10c5c83a 	sub	r2,r2,r3
    54c0:	003f8406 	br	52d4 <__alt_data_end+0xfc0052d4>
    54c4:	d9402e17 	ldw	r5,184(sp)
    54c8:	d9002e17 	ldw	r4,184(sp)
    54cc:	ac400043 	ldbu	r17,1(r21)
    54d0:	29400017 	ldw	r5,0(r5)
    54d4:	20800104 	addi	r2,r4,4
    54d8:	d8802e15 	stw	r2,184(sp)
    54dc:	d9402a15 	stw	r5,168(sp)
    54e0:	182b883a 	mov	r21,r3
    54e4:	283e7b0e 	bge	r5,zero,4ed4 <__alt_data_end+0xfc004ed4>
    54e8:	8c403fcc 	andi	r17,r17,255
    54ec:	017fffc4 	movi	r5,-1
    54f0:	8c40201c 	xori	r17,r17,128
    54f4:	d9402a15 	stw	r5,168(sp)
    54f8:	8c7fe004 	addi	r17,r17,-128
    54fc:	0037d706 	br	345c <__alt_data_end+0xfc00345c>
    5500:	d8c02a17 	ldw	r3,168(sp)
    5504:	18c00084 	addi	r3,r3,2
    5508:	d8c02b15 	stw	r3,172(sp)
    550c:	1805883a 	mov	r2,r3
    5510:	183d970e 	bge	r3,zero,4b70 <__alt_data_end+0xfc004b70>
    5514:	003fd706 	br	5474 <__alt_data_end+0xfc005474>
    5518:	0005883a 	mov	r2,zero
    551c:	003f8f06 	br	535c <__alt_data_end+0xfc00535c>
    5520:	9080004c 	andi	r2,r18,1
    5524:	103f821e 	bne	r2,zero,5330 <__alt_data_end+0xfc005330>
    5528:	d8802117 	ldw	r2,132(sp)
    552c:	1405c83a 	sub	r2,r2,r16
    5530:	d8803315 	stw	r2,204(sp)
    5534:	b47ef426 	beq	r22,r17,5108 <__alt_data_end+0xfc005108>
    5538:	dd802617 	ldw	r22,152(sp)
    553c:	003f1206 	br	5188 <__alt_data_end+0xfc005188>
    5540:	d8c02b03 	ldbu	r3,172(sp)
    5544:	d8c02785 	stb	r3,158(sp)
    5548:	0038df06 	br	38c8 <__alt_data_end+0xfc0038c8>
    554c:	d8c02b03 	ldbu	r3,172(sp)
    5550:	d8c02785 	stb	r3,158(sp)
    5554:	0038aa06 	br	3800 <__alt_data_end+0xfc003800>
    5558:	d8c02b03 	ldbu	r3,172(sp)
    555c:	d8c02785 	stb	r3,158(sp)
    5560:	003a4306 	br	3e70 <__alt_data_end+0xfc003e70>
    5564:	d8c02b03 	ldbu	r3,172(sp)
    5568:	d8c02785 	stb	r3,158(sp)
    556c:	003af506 	br	4144 <__alt_data_end+0xfc004144>
    5570:	0005883a 	mov	r2,zero
    5574:	003d7b06 	br	4b64 <__alt_data_end+0xfc004b64>
    5578:	d8802344 	addi	r2,sp,141
    557c:	003f1006 	br	51c0 <__alt_data_end+0xfc0051c0>
    5580:	d8c02b03 	ldbu	r3,172(sp)
    5584:	d8c02785 	stb	r3,158(sp)
    5588:	0038fd06 	br	3980 <__alt_data_end+0xfc003980>
    558c:	d8c02b03 	ldbu	r3,172(sp)
    5590:	d8c02785 	stb	r3,158(sp)
    5594:	003a9706 	br	3ff4 <__alt_data_end+0xfc003ff4>
    5598:	d8c02b03 	ldbu	r3,172(sp)
    559c:	d8c02785 	stb	r3,158(sp)
    55a0:	003a1806 	br	3e04 <__alt_data_end+0xfc003e04>
    55a4:	d8c02b03 	ldbu	r3,172(sp)
    55a8:	d8c02785 	stb	r3,158(sp)
    55ac:	003abe06 	br	40a8 <__alt_data_end+0xfc0040a8>

000055b0 <__vfprintf_internal>:
    55b0:	00800074 	movhi	r2,1
    55b4:	109ac804 	addi	r2,r2,27424
    55b8:	300f883a 	mov	r7,r6
    55bc:	280d883a 	mov	r6,r5
    55c0:	200b883a 	mov	r5,r4
    55c4:	11000017 	ldw	r4,0(r2)
    55c8:	00032d41 	jmpi	32d4 <___vfprintf_internal_r>

000055cc <__sbprintf>:
    55cc:	2880030b 	ldhu	r2,12(r5)
    55d0:	2ac01917 	ldw	r11,100(r5)
    55d4:	2a80038b 	ldhu	r10,14(r5)
    55d8:	2a400717 	ldw	r9,28(r5)
    55dc:	2a000917 	ldw	r8,36(r5)
    55e0:	defee204 	addi	sp,sp,-1144
    55e4:	00c10004 	movi	r3,1024
    55e8:	dc011a15 	stw	r16,1128(sp)
    55ec:	10bfff4c 	andi	r2,r2,65533
    55f0:	2821883a 	mov	r16,r5
    55f4:	d8cb883a 	add	r5,sp,r3
    55f8:	dc811c15 	stw	r18,1136(sp)
    55fc:	dc411b15 	stw	r17,1132(sp)
    5600:	dfc11d15 	stw	ra,1140(sp)
    5604:	2025883a 	mov	r18,r4
    5608:	d881030d 	sth	r2,1036(sp)
    560c:	dac11915 	stw	r11,1124(sp)
    5610:	da81038d 	sth	r10,1038(sp)
    5614:	da410715 	stw	r9,1052(sp)
    5618:	da010915 	stw	r8,1060(sp)
    561c:	dec10015 	stw	sp,1024(sp)
    5620:	dec10415 	stw	sp,1040(sp)
    5624:	d8c10215 	stw	r3,1032(sp)
    5628:	d8c10515 	stw	r3,1044(sp)
    562c:	d8010615 	stw	zero,1048(sp)
    5630:	00032d40 	call	32d4 <___vfprintf_internal_r>
    5634:	1023883a 	mov	r17,r2
    5638:	10000416 	blt	r2,zero,564c <__sbprintf+0x80>
    563c:	d9410004 	addi	r5,sp,1024
    5640:	9009883a 	mov	r4,r18
    5644:	00072a80 	call	72a8 <_fflush_r>
    5648:	10000d1e 	bne	r2,zero,5680 <__sbprintf+0xb4>
    564c:	d881030b 	ldhu	r2,1036(sp)
    5650:	1080100c 	andi	r2,r2,64
    5654:	10000326 	beq	r2,zero,5664 <__sbprintf+0x98>
    5658:	8080030b 	ldhu	r2,12(r16)
    565c:	10801014 	ori	r2,r2,64
    5660:	8080030d 	sth	r2,12(r16)
    5664:	8805883a 	mov	r2,r17
    5668:	dfc11d17 	ldw	ra,1140(sp)
    566c:	dc811c17 	ldw	r18,1136(sp)
    5670:	dc411b17 	ldw	r17,1132(sp)
    5674:	dc011a17 	ldw	r16,1128(sp)
    5678:	dec11e04 	addi	sp,sp,1144
    567c:	f800283a 	ret
    5680:	047fffc4 	movi	r17,-1
    5684:	003ff106 	br	564c <__alt_data_end+0xfc00564c>

00005688 <__swsetup_r>:
    5688:	00800074 	movhi	r2,1
    568c:	defffd04 	addi	sp,sp,-12
    5690:	109ac804 	addi	r2,r2,27424
    5694:	dc400115 	stw	r17,4(sp)
    5698:	2023883a 	mov	r17,r4
    569c:	11000017 	ldw	r4,0(r2)
    56a0:	dc000015 	stw	r16,0(sp)
    56a4:	dfc00215 	stw	ra,8(sp)
    56a8:	2821883a 	mov	r16,r5
    56ac:	20000226 	beq	r4,zero,56b8 <__swsetup_r+0x30>
    56b0:	20800e17 	ldw	r2,56(r4)
    56b4:	10003126 	beq	r2,zero,577c <__swsetup_r+0xf4>
    56b8:	8080030b 	ldhu	r2,12(r16)
    56bc:	10c0020c 	andi	r3,r2,8
    56c0:	1009883a 	mov	r4,r2
    56c4:	18000f26 	beq	r3,zero,5704 <__swsetup_r+0x7c>
    56c8:	80c00417 	ldw	r3,16(r16)
    56cc:	18001526 	beq	r3,zero,5724 <__swsetup_r+0x9c>
    56d0:	1100004c 	andi	r4,r2,1
    56d4:	20001c1e 	bne	r4,zero,5748 <__swsetup_r+0xc0>
    56d8:	1080008c 	andi	r2,r2,2
    56dc:	1000291e 	bne	r2,zero,5784 <__swsetup_r+0xfc>
    56e0:	80800517 	ldw	r2,20(r16)
    56e4:	80800215 	stw	r2,8(r16)
    56e8:	18001c26 	beq	r3,zero,575c <__swsetup_r+0xd4>
    56ec:	0005883a 	mov	r2,zero
    56f0:	dfc00217 	ldw	ra,8(sp)
    56f4:	dc400117 	ldw	r17,4(sp)
    56f8:	dc000017 	ldw	r16,0(sp)
    56fc:	dec00304 	addi	sp,sp,12
    5700:	f800283a 	ret
    5704:	2080040c 	andi	r2,r4,16
    5708:	10002e26 	beq	r2,zero,57c4 <__swsetup_r+0x13c>
    570c:	2080010c 	andi	r2,r4,4
    5710:	10001e1e 	bne	r2,zero,578c <__swsetup_r+0x104>
    5714:	80c00417 	ldw	r3,16(r16)
    5718:	20800214 	ori	r2,r4,8
    571c:	8080030d 	sth	r2,12(r16)
    5720:	183feb1e 	bne	r3,zero,56d0 <__alt_data_end+0xfc0056d0>
    5724:	1100a00c 	andi	r4,r2,640
    5728:	01408004 	movi	r5,512
    572c:	217fe826 	beq	r4,r5,56d0 <__alt_data_end+0xfc0056d0>
    5730:	800b883a 	mov	r5,r16
    5734:	8809883a 	mov	r4,r17
    5738:	00082440 	call	8244 <__smakebuf_r>
    573c:	8080030b 	ldhu	r2,12(r16)
    5740:	80c00417 	ldw	r3,16(r16)
    5744:	003fe206 	br	56d0 <__alt_data_end+0xfc0056d0>
    5748:	80800517 	ldw	r2,20(r16)
    574c:	80000215 	stw	zero,8(r16)
    5750:	0085c83a 	sub	r2,zero,r2
    5754:	80800615 	stw	r2,24(r16)
    5758:	183fe41e 	bne	r3,zero,56ec <__alt_data_end+0xfc0056ec>
    575c:	80c0030b 	ldhu	r3,12(r16)
    5760:	0005883a 	mov	r2,zero
    5764:	1900200c 	andi	r4,r3,128
    5768:	203fe126 	beq	r4,zero,56f0 <__alt_data_end+0xfc0056f0>
    576c:	18c01014 	ori	r3,r3,64
    5770:	80c0030d 	sth	r3,12(r16)
    5774:	00bfffc4 	movi	r2,-1
    5778:	003fdd06 	br	56f0 <__alt_data_end+0xfc0056f0>
    577c:	00076940 	call	7694 <__sinit>
    5780:	003fcd06 	br	56b8 <__alt_data_end+0xfc0056b8>
    5784:	0005883a 	mov	r2,zero
    5788:	003fd606 	br	56e4 <__alt_data_end+0xfc0056e4>
    578c:	81400c17 	ldw	r5,48(r16)
    5790:	28000626 	beq	r5,zero,57ac <__swsetup_r+0x124>
    5794:	80801004 	addi	r2,r16,64
    5798:	28800326 	beq	r5,r2,57a8 <__swsetup_r+0x120>
    579c:	8809883a 	mov	r4,r17
    57a0:	00078080 	call	7808 <_free_r>
    57a4:	8100030b 	ldhu	r4,12(r16)
    57a8:	80000c15 	stw	zero,48(r16)
    57ac:	80c00417 	ldw	r3,16(r16)
    57b0:	00bff6c4 	movi	r2,-37
    57b4:	1108703a 	and	r4,r2,r4
    57b8:	80000115 	stw	zero,4(r16)
    57bc:	80c00015 	stw	r3,0(r16)
    57c0:	003fd506 	br	5718 <__alt_data_end+0xfc005718>
    57c4:	00800244 	movi	r2,9
    57c8:	88800015 	stw	r2,0(r17)
    57cc:	20801014 	ori	r2,r4,64
    57d0:	8080030d 	sth	r2,12(r16)
    57d4:	00bfffc4 	movi	r2,-1
    57d8:	003fc506 	br	56f0 <__alt_data_end+0xfc0056f0>

000057dc <quorem>:
    57dc:	defff204 	addi	sp,sp,-56
    57e0:	ddc00b15 	stw	r23,44(sp)
    57e4:	20800417 	ldw	r2,16(r4)
    57e8:	2dc00417 	ldw	r23,16(r5)
    57ec:	dfc00d15 	stw	ra,52(sp)
    57f0:	df000c15 	stw	fp,48(sp)
    57f4:	dd800a15 	stw	r22,40(sp)
    57f8:	dd400915 	stw	r21,36(sp)
    57fc:	dd000815 	stw	r20,32(sp)
    5800:	dcc00715 	stw	r19,28(sp)
    5804:	dc800615 	stw	r18,24(sp)
    5808:	dc400515 	stw	r17,20(sp)
    580c:	dc000415 	stw	r16,16(sp)
    5810:	15c07a16 	blt	r2,r23,59fc <quorem+0x220>
    5814:	bdffffc4 	addi	r23,r23,-1
    5818:	bde9883a 	add	r20,r23,r23
    581c:	28c00504 	addi	r3,r5,20
    5820:	a529883a 	add	r20,r20,r20
    5824:	1d39883a 	add	fp,r3,r20
    5828:	24c00504 	addi	r19,r4,20
    582c:	d9400215 	stw	r5,8(sp)
    5830:	9d29883a 	add	r20,r19,r20
    5834:	e1400017 	ldw	r5,0(fp)
    5838:	d9000015 	stw	r4,0(sp)
    583c:	a1000017 	ldw	r4,0(r20)
    5840:	29400044 	addi	r5,r5,1
    5844:	d8c00115 	stw	r3,4(sp)
    5848:	dd000315 	stw	r20,12(sp)
    584c:	00030180 	call	3018 <__udivsi3>
    5850:	1025883a 	mov	r18,r2
    5854:	10003026 	beq	r2,zero,5918 <quorem+0x13c>
    5858:	dc400117 	ldw	r17,4(sp)
    585c:	9829883a 	mov	r20,r19
    5860:	002d883a 	mov	r22,zero
    5864:	0021883a 	mov	r16,zero
    5868:	8d400017 	ldw	r21,0(r17)
    586c:	900b883a 	mov	r5,r18
    5870:	8c400104 	addi	r17,r17,4
    5874:	a93fffcc 	andi	r4,r21,65535
    5878:	00030d40 	call	30d4 <__mulsi3>
    587c:	a808d43a 	srli	r4,r21,16
    5880:	900b883a 	mov	r5,r18
    5884:	15ad883a 	add	r22,r2,r22
    5888:	00030d40 	call	30d4 <__mulsi3>
    588c:	a1000017 	ldw	r4,0(r20)
    5890:	b00cd43a 	srli	r6,r22,16
    5894:	b0ffffcc 	andi	r3,r22,65535
    5898:	217fffcc 	andi	r5,r4,65535
    589c:	2c21883a 	add	r16,r5,r16
    58a0:	80c7c83a 	sub	r3,r16,r3
    58a4:	2008d43a 	srli	r4,r4,16
    58a8:	1185883a 	add	r2,r2,r6
    58ac:	1821d43a 	srai	r16,r3,16
    58b0:	117fffcc 	andi	r5,r2,65535
    58b4:	2149c83a 	sub	r4,r4,r5
    58b8:	2421883a 	add	r16,r4,r16
    58bc:	8008943a 	slli	r4,r16,16
    58c0:	18ffffcc 	andi	r3,r3,65535
    58c4:	102cd43a 	srli	r22,r2,16
    58c8:	20c8b03a 	or	r4,r4,r3
    58cc:	a1000015 	stw	r4,0(r20)
    58d0:	8021d43a 	srai	r16,r16,16
    58d4:	a5000104 	addi	r20,r20,4
    58d8:	e47fe32e 	bgeu	fp,r17,5868 <__alt_data_end+0xfc005868>
    58dc:	d8c00317 	ldw	r3,12(sp)
    58e0:	18800017 	ldw	r2,0(r3)
    58e4:	10000c1e 	bne	r2,zero,5918 <quorem+0x13c>
    58e8:	18bfff04 	addi	r2,r3,-4
    58ec:	9880082e 	bgeu	r19,r2,5910 <quorem+0x134>
    58f0:	18ffff17 	ldw	r3,-4(r3)
    58f4:	18000326 	beq	r3,zero,5904 <quorem+0x128>
    58f8:	00000506 	br	5910 <quorem+0x134>
    58fc:	10c00017 	ldw	r3,0(r2)
    5900:	1800031e 	bne	r3,zero,5910 <quorem+0x134>
    5904:	10bfff04 	addi	r2,r2,-4
    5908:	bdffffc4 	addi	r23,r23,-1
    590c:	98bffb36 	bltu	r19,r2,58fc <__alt_data_end+0xfc0058fc>
    5910:	d8c00017 	ldw	r3,0(sp)
    5914:	1dc00415 	stw	r23,16(r3)
    5918:	d9400217 	ldw	r5,8(sp)
    591c:	d9000017 	ldw	r4,0(sp)
    5920:	0009a400 	call	9a40 <__mcmp>
    5924:	10002816 	blt	r2,zero,59c8 <quorem+0x1ec>
    5928:	dc400117 	ldw	r17,4(sp)
    592c:	94800044 	addi	r18,r18,1
    5930:	980d883a 	mov	r6,r19
    5934:	0007883a 	mov	r3,zero
    5938:	31000017 	ldw	r4,0(r6)
    593c:	89400017 	ldw	r5,0(r17)
    5940:	31800104 	addi	r6,r6,4
    5944:	20bfffcc 	andi	r2,r4,65535
    5948:	10c7883a 	add	r3,r2,r3
    594c:	28bfffcc 	andi	r2,r5,65535
    5950:	1885c83a 	sub	r2,r3,r2
    5954:	280ad43a 	srli	r5,r5,16
    5958:	2008d43a 	srli	r4,r4,16
    595c:	1007d43a 	srai	r3,r2,16
    5960:	10bfffcc 	andi	r2,r2,65535
    5964:	2149c83a 	sub	r4,r4,r5
    5968:	20c9883a 	add	r4,r4,r3
    596c:	200a943a 	slli	r5,r4,16
    5970:	8c400104 	addi	r17,r17,4
    5974:	2007d43a 	srai	r3,r4,16
    5978:	2884b03a 	or	r2,r5,r2
    597c:	30bfff15 	stw	r2,-4(r6)
    5980:	e47fed2e 	bgeu	fp,r17,5938 <__alt_data_end+0xfc005938>
    5984:	bdc5883a 	add	r2,r23,r23
    5988:	1085883a 	add	r2,r2,r2
    598c:	9887883a 	add	r3,r19,r2
    5990:	18800017 	ldw	r2,0(r3)
    5994:	10000c1e 	bne	r2,zero,59c8 <quorem+0x1ec>
    5998:	18bfff04 	addi	r2,r3,-4
    599c:	9880082e 	bgeu	r19,r2,59c0 <quorem+0x1e4>
    59a0:	18ffff17 	ldw	r3,-4(r3)
    59a4:	18000326 	beq	r3,zero,59b4 <quorem+0x1d8>
    59a8:	00000506 	br	59c0 <quorem+0x1e4>
    59ac:	10c00017 	ldw	r3,0(r2)
    59b0:	1800031e 	bne	r3,zero,59c0 <quorem+0x1e4>
    59b4:	10bfff04 	addi	r2,r2,-4
    59b8:	bdffffc4 	addi	r23,r23,-1
    59bc:	98bffb36 	bltu	r19,r2,59ac <__alt_data_end+0xfc0059ac>
    59c0:	d8c00017 	ldw	r3,0(sp)
    59c4:	1dc00415 	stw	r23,16(r3)
    59c8:	9005883a 	mov	r2,r18
    59cc:	dfc00d17 	ldw	ra,52(sp)
    59d0:	df000c17 	ldw	fp,48(sp)
    59d4:	ddc00b17 	ldw	r23,44(sp)
    59d8:	dd800a17 	ldw	r22,40(sp)
    59dc:	dd400917 	ldw	r21,36(sp)
    59e0:	dd000817 	ldw	r20,32(sp)
    59e4:	dcc00717 	ldw	r19,28(sp)
    59e8:	dc800617 	ldw	r18,24(sp)
    59ec:	dc400517 	ldw	r17,20(sp)
    59f0:	dc000417 	ldw	r16,16(sp)
    59f4:	dec00e04 	addi	sp,sp,56
    59f8:	f800283a 	ret
    59fc:	0005883a 	mov	r2,zero
    5a00:	003ff206 	br	59cc <__alt_data_end+0xfc0059cc>

00005a04 <_dtoa_r>:
    5a04:	20801017 	ldw	r2,64(r4)
    5a08:	deffde04 	addi	sp,sp,-136
    5a0c:	df002015 	stw	fp,128(sp)
    5a10:	dcc01b15 	stw	r19,108(sp)
    5a14:	dc801a15 	stw	r18,104(sp)
    5a18:	dc401915 	stw	r17,100(sp)
    5a1c:	dc001815 	stw	r16,96(sp)
    5a20:	dfc02115 	stw	ra,132(sp)
    5a24:	ddc01f15 	stw	r23,124(sp)
    5a28:	dd801e15 	stw	r22,120(sp)
    5a2c:	dd401d15 	stw	r21,116(sp)
    5a30:	dd001c15 	stw	r20,112(sp)
    5a34:	d9c00315 	stw	r7,12(sp)
    5a38:	2039883a 	mov	fp,r4
    5a3c:	3023883a 	mov	r17,r6
    5a40:	2825883a 	mov	r18,r5
    5a44:	dc002417 	ldw	r16,144(sp)
    5a48:	3027883a 	mov	r19,r6
    5a4c:	10000826 	beq	r2,zero,5a70 <_dtoa_r+0x6c>
    5a50:	21801117 	ldw	r6,68(r4)
    5a54:	00c00044 	movi	r3,1
    5a58:	100b883a 	mov	r5,r2
    5a5c:	1986983a 	sll	r3,r3,r6
    5a60:	11800115 	stw	r6,4(r2)
    5a64:	10c00215 	stw	r3,8(r2)
    5a68:	00091640 	call	9164 <_Bfree>
    5a6c:	e0001015 	stw	zero,64(fp)
    5a70:	88002e16 	blt	r17,zero,5b2c <_dtoa_r+0x128>
    5a74:	80000015 	stw	zero,0(r16)
    5a78:	889ffc2c 	andhi	r2,r17,32752
    5a7c:	00dffc34 	movhi	r3,32752
    5a80:	10c01c26 	beq	r2,r3,5af4 <_dtoa_r+0xf0>
    5a84:	000d883a 	mov	r6,zero
    5a88:	000f883a 	mov	r7,zero
    5a8c:	9009883a 	mov	r4,r18
    5a90:	980b883a 	mov	r5,r19
    5a94:	000e8380 	call	e838 <__eqdf2>
    5a98:	10002b1e 	bne	r2,zero,5b48 <_dtoa_r+0x144>
    5a9c:	d9c02317 	ldw	r7,140(sp)
    5aa0:	00800044 	movi	r2,1
    5aa4:	38800015 	stw	r2,0(r7)
    5aa8:	d8802517 	ldw	r2,148(sp)
    5aac:	10019e26 	beq	r2,zero,6128 <_dtoa_r+0x724>
    5ab0:	d8c02517 	ldw	r3,148(sp)
    5ab4:	00800074 	movhi	r2,1
    5ab8:	10934444 	addi	r2,r2,19729
    5abc:	18800015 	stw	r2,0(r3)
    5ac0:	10bfffc4 	addi	r2,r2,-1
    5ac4:	dfc02117 	ldw	ra,132(sp)
    5ac8:	df002017 	ldw	fp,128(sp)
    5acc:	ddc01f17 	ldw	r23,124(sp)
    5ad0:	dd801e17 	ldw	r22,120(sp)
    5ad4:	dd401d17 	ldw	r21,116(sp)
    5ad8:	dd001c17 	ldw	r20,112(sp)
    5adc:	dcc01b17 	ldw	r19,108(sp)
    5ae0:	dc801a17 	ldw	r18,104(sp)
    5ae4:	dc401917 	ldw	r17,100(sp)
    5ae8:	dc001817 	ldw	r16,96(sp)
    5aec:	dec02204 	addi	sp,sp,136
    5af0:	f800283a 	ret
    5af4:	d8c02317 	ldw	r3,140(sp)
    5af8:	0089c3c4 	movi	r2,9999
    5afc:	18800015 	stw	r2,0(r3)
    5b00:	90017726 	beq	r18,zero,60e0 <_dtoa_r+0x6dc>
    5b04:	00800074 	movhi	r2,1
    5b08:	10935004 	addi	r2,r2,19776
    5b0c:	d9002517 	ldw	r4,148(sp)
    5b10:	203fec26 	beq	r4,zero,5ac4 <__alt_data_end+0xfc005ac4>
    5b14:	10c000c7 	ldb	r3,3(r2)
    5b18:	1801781e 	bne	r3,zero,60fc <_dtoa_r+0x6f8>
    5b1c:	10c000c4 	addi	r3,r2,3
    5b20:	d9802517 	ldw	r6,148(sp)
    5b24:	30c00015 	stw	r3,0(r6)
    5b28:	003fe606 	br	5ac4 <__alt_data_end+0xfc005ac4>
    5b2c:	04e00034 	movhi	r19,32768
    5b30:	9cffffc4 	addi	r19,r19,-1
    5b34:	00800044 	movi	r2,1
    5b38:	8ce6703a 	and	r19,r17,r19
    5b3c:	80800015 	stw	r2,0(r16)
    5b40:	9823883a 	mov	r17,r19
    5b44:	003fcc06 	br	5a78 <__alt_data_end+0xfc005a78>
    5b48:	d8800204 	addi	r2,sp,8
    5b4c:	d8800015 	stw	r2,0(sp)
    5b50:	d9c00104 	addi	r7,sp,4
    5b54:	900b883a 	mov	r5,r18
    5b58:	980d883a 	mov	r6,r19
    5b5c:	e009883a 	mov	r4,fp
    5b60:	8820d53a 	srli	r16,r17,20
    5b64:	0009e0c0 	call	9e0c <__d2b>
    5b68:	d8800915 	stw	r2,36(sp)
    5b6c:	8001651e 	bne	r16,zero,6104 <_dtoa_r+0x700>
    5b70:	dd800217 	ldw	r22,8(sp)
    5b74:	dc000117 	ldw	r16,4(sp)
    5b78:	00800804 	movi	r2,32
    5b7c:	b421883a 	add	r16,r22,r16
    5b80:	80c10c84 	addi	r3,r16,1074
    5b84:	10c2d10e 	bge	r2,r3,66cc <_dtoa_r+0xcc8>
    5b88:	00801004 	movi	r2,64
    5b8c:	81010484 	addi	r4,r16,1042
    5b90:	10c7c83a 	sub	r3,r2,r3
    5b94:	9108d83a 	srl	r4,r18,r4
    5b98:	88e2983a 	sll	r17,r17,r3
    5b9c:	2448b03a 	or	r4,r4,r17
    5ba0:	000fd540 	call	fd54 <__floatunsidf>
    5ba4:	017f8434 	movhi	r5,65040
    5ba8:	01800044 	movi	r6,1
    5bac:	1009883a 	mov	r4,r2
    5bb0:	194b883a 	add	r5,r3,r5
    5bb4:	843fffc4 	addi	r16,r16,-1
    5bb8:	d9801115 	stw	r6,68(sp)
    5bbc:	000d883a 	mov	r6,zero
    5bc0:	01cffe34 	movhi	r7,16376
    5bc4:	000f2fc0 	call	f2fc <__subdf3>
    5bc8:	0198dbf4 	movhi	r6,25455
    5bcc:	01cff4f4 	movhi	r7,16339
    5bd0:	3190d844 	addi	r6,r6,17249
    5bd4:	39e1e9c4 	addi	r7,r7,-30809
    5bd8:	1009883a 	mov	r4,r2
    5bdc:	180b883a 	mov	r5,r3
    5be0:	000ea900 	call	ea90 <__muldf3>
    5be4:	01a2d874 	movhi	r6,35681
    5be8:	01cff1f4 	movhi	r7,16327
    5bec:	31b22cc4 	addi	r6,r6,-14157
    5bf0:	39e28a04 	addi	r7,r7,-30168
    5bf4:	180b883a 	mov	r5,r3
    5bf8:	1009883a 	mov	r4,r2
    5bfc:	000d5bc0 	call	d5bc <__adddf3>
    5c00:	8009883a 	mov	r4,r16
    5c04:	1029883a 	mov	r20,r2
    5c08:	1823883a 	mov	r17,r3
    5c0c:	000fc780 	call	fc78 <__floatsidf>
    5c10:	019427f4 	movhi	r6,20639
    5c14:	01cff4f4 	movhi	r7,16339
    5c18:	319e7ec4 	addi	r6,r6,31227
    5c1c:	39d104c4 	addi	r7,r7,17427
    5c20:	1009883a 	mov	r4,r2
    5c24:	180b883a 	mov	r5,r3
    5c28:	000ea900 	call	ea90 <__muldf3>
    5c2c:	100d883a 	mov	r6,r2
    5c30:	180f883a 	mov	r7,r3
    5c34:	a009883a 	mov	r4,r20
    5c38:	880b883a 	mov	r5,r17
    5c3c:	000d5bc0 	call	d5bc <__adddf3>
    5c40:	1009883a 	mov	r4,r2
    5c44:	180b883a 	mov	r5,r3
    5c48:	1029883a 	mov	r20,r2
    5c4c:	1823883a 	mov	r17,r3
    5c50:	000fbf80 	call	fbf8 <__fixdfsi>
    5c54:	000d883a 	mov	r6,zero
    5c58:	000f883a 	mov	r7,zero
    5c5c:	a009883a 	mov	r4,r20
    5c60:	880b883a 	mov	r5,r17
    5c64:	d8800515 	stw	r2,20(sp)
    5c68:	000e99c0 	call	e99c <__ledf2>
    5c6c:	10028716 	blt	r2,zero,668c <_dtoa_r+0xc88>
    5c70:	d8c00517 	ldw	r3,20(sp)
    5c74:	00800584 	movi	r2,22
    5c78:	10c27536 	bltu	r2,r3,6650 <_dtoa_r+0xc4c>
    5c7c:	180490fa 	slli	r2,r3,3
    5c80:	00c00074 	movhi	r3,1
    5c84:	18d36c04 	addi	r3,r3,19888
    5c88:	1885883a 	add	r2,r3,r2
    5c8c:	11000017 	ldw	r4,0(r2)
    5c90:	11400117 	ldw	r5,4(r2)
    5c94:	900d883a 	mov	r6,r18
    5c98:	980f883a 	mov	r7,r19
    5c9c:	000e8c00 	call	e8c0 <__gedf2>
    5ca0:	00828d0e 	bge	zero,r2,66d8 <_dtoa_r+0xcd4>
    5ca4:	d9000517 	ldw	r4,20(sp)
    5ca8:	d8000e15 	stw	zero,56(sp)
    5cac:	213fffc4 	addi	r4,r4,-1
    5cb0:	d9000515 	stw	r4,20(sp)
    5cb4:	b42dc83a 	sub	r22,r22,r16
    5cb8:	b5bfffc4 	addi	r22,r22,-1
    5cbc:	b0026f16 	blt	r22,zero,667c <_dtoa_r+0xc78>
    5cc0:	d8000815 	stw	zero,32(sp)
    5cc4:	d9c00517 	ldw	r7,20(sp)
    5cc8:	38026416 	blt	r7,zero,665c <_dtoa_r+0xc58>
    5ccc:	b1ed883a 	add	r22,r22,r7
    5cd0:	d9c00d15 	stw	r7,52(sp)
    5cd4:	d8000a15 	stw	zero,40(sp)
    5cd8:	d9800317 	ldw	r6,12(sp)
    5cdc:	00800244 	movi	r2,9
    5ce0:	11811436 	bltu	r2,r6,6134 <_dtoa_r+0x730>
    5ce4:	00800144 	movi	r2,5
    5ce8:	1184e10e 	bge	r2,r6,7070 <_dtoa_r+0x166c>
    5cec:	31bfff04 	addi	r6,r6,-4
    5cf0:	d9800315 	stw	r6,12(sp)
    5cf4:	0023883a 	mov	r17,zero
    5cf8:	d9800317 	ldw	r6,12(sp)
    5cfc:	008000c4 	movi	r2,3
    5d00:	30836726 	beq	r6,r2,6aa0 <_dtoa_r+0x109c>
    5d04:	1183410e 	bge	r2,r6,6a0c <_dtoa_r+0x1008>
    5d08:	d9c00317 	ldw	r7,12(sp)
    5d0c:	00800104 	movi	r2,4
    5d10:	38827c26 	beq	r7,r2,6704 <_dtoa_r+0xd00>
    5d14:	00800144 	movi	r2,5
    5d18:	3884c41e 	bne	r7,r2,702c <_dtoa_r+0x1628>
    5d1c:	00800044 	movi	r2,1
    5d20:	d8800b15 	stw	r2,44(sp)
    5d24:	d8c00517 	ldw	r3,20(sp)
    5d28:	d9002217 	ldw	r4,136(sp)
    5d2c:	1907883a 	add	r3,r3,r4
    5d30:	19800044 	addi	r6,r3,1
    5d34:	d8c00c15 	stw	r3,48(sp)
    5d38:	d9800615 	stw	r6,24(sp)
    5d3c:	0183a40e 	bge	zero,r6,6bd0 <_dtoa_r+0x11cc>
    5d40:	d9800617 	ldw	r6,24(sp)
    5d44:	3021883a 	mov	r16,r6
    5d48:	e0001115 	stw	zero,68(fp)
    5d4c:	008005c4 	movi	r2,23
    5d50:	1184c92e 	bgeu	r2,r6,7078 <_dtoa_r+0x1674>
    5d54:	00c00044 	movi	r3,1
    5d58:	00800104 	movi	r2,4
    5d5c:	1085883a 	add	r2,r2,r2
    5d60:	11000504 	addi	r4,r2,20
    5d64:	180b883a 	mov	r5,r3
    5d68:	18c00044 	addi	r3,r3,1
    5d6c:	313ffb2e 	bgeu	r6,r4,5d5c <__alt_data_end+0xfc005d5c>
    5d70:	e1401115 	stw	r5,68(fp)
    5d74:	e009883a 	mov	r4,fp
    5d78:	00090bc0 	call	90bc <_Balloc>
    5d7c:	d8800715 	stw	r2,28(sp)
    5d80:	e0801015 	stw	r2,64(fp)
    5d84:	00800384 	movi	r2,14
    5d88:	1400f736 	bltu	r2,r16,6168 <_dtoa_r+0x764>
    5d8c:	8800f626 	beq	r17,zero,6168 <_dtoa_r+0x764>
    5d90:	d9c00517 	ldw	r7,20(sp)
    5d94:	01c39a0e 	bge	zero,r7,6c00 <_dtoa_r+0x11fc>
    5d98:	388003cc 	andi	r2,r7,15
    5d9c:	100490fa 	slli	r2,r2,3
    5da0:	382bd13a 	srai	r21,r7,4
    5da4:	00c00074 	movhi	r3,1
    5da8:	18d36c04 	addi	r3,r3,19888
    5dac:	1885883a 	add	r2,r3,r2
    5db0:	a8c0040c 	andi	r3,r21,16
    5db4:	12400017 	ldw	r9,0(r2)
    5db8:	12000117 	ldw	r8,4(r2)
    5dbc:	18037926 	beq	r3,zero,6ba4 <_dtoa_r+0x11a0>
    5dc0:	00800074 	movhi	r2,1
    5dc4:	10936204 	addi	r2,r2,19848
    5dc8:	11800817 	ldw	r6,32(r2)
    5dcc:	11c00917 	ldw	r7,36(r2)
    5dd0:	9009883a 	mov	r4,r18
    5dd4:	980b883a 	mov	r5,r19
    5dd8:	da001715 	stw	r8,92(sp)
    5ddc:	da401615 	stw	r9,88(sp)
    5de0:	000de680 	call	de68 <__divdf3>
    5de4:	da001717 	ldw	r8,92(sp)
    5de8:	da401617 	ldw	r9,88(sp)
    5dec:	ad4003cc 	andi	r21,r21,15
    5df0:	040000c4 	movi	r16,3
    5df4:	1023883a 	mov	r17,r2
    5df8:	1829883a 	mov	r20,r3
    5dfc:	a8001126 	beq	r21,zero,5e44 <_dtoa_r+0x440>
    5e00:	05c00074 	movhi	r23,1
    5e04:	bdd36204 	addi	r23,r23,19848
    5e08:	4805883a 	mov	r2,r9
    5e0c:	4007883a 	mov	r3,r8
    5e10:	a980004c 	andi	r6,r21,1
    5e14:	1009883a 	mov	r4,r2
    5e18:	a82bd07a 	srai	r21,r21,1
    5e1c:	180b883a 	mov	r5,r3
    5e20:	30000426 	beq	r6,zero,5e34 <_dtoa_r+0x430>
    5e24:	b9800017 	ldw	r6,0(r23)
    5e28:	b9c00117 	ldw	r7,4(r23)
    5e2c:	84000044 	addi	r16,r16,1
    5e30:	000ea900 	call	ea90 <__muldf3>
    5e34:	bdc00204 	addi	r23,r23,8
    5e38:	a83ff51e 	bne	r21,zero,5e10 <__alt_data_end+0xfc005e10>
    5e3c:	1013883a 	mov	r9,r2
    5e40:	1811883a 	mov	r8,r3
    5e44:	480d883a 	mov	r6,r9
    5e48:	400f883a 	mov	r7,r8
    5e4c:	8809883a 	mov	r4,r17
    5e50:	a00b883a 	mov	r5,r20
    5e54:	000de680 	call	de68 <__divdf3>
    5e58:	d8800f15 	stw	r2,60(sp)
    5e5c:	d8c01015 	stw	r3,64(sp)
    5e60:	d8c00e17 	ldw	r3,56(sp)
    5e64:	18000626 	beq	r3,zero,5e80 <_dtoa_r+0x47c>
    5e68:	d9000f17 	ldw	r4,60(sp)
    5e6c:	d9401017 	ldw	r5,64(sp)
    5e70:	000d883a 	mov	r6,zero
    5e74:	01cffc34 	movhi	r7,16368
    5e78:	000e99c0 	call	e99c <__ledf2>
    5e7c:	10040b16 	blt	r2,zero,6eac <_dtoa_r+0x14a8>
    5e80:	8009883a 	mov	r4,r16
    5e84:	000fc780 	call	fc78 <__floatsidf>
    5e88:	d9800f17 	ldw	r6,60(sp)
    5e8c:	d9c01017 	ldw	r7,64(sp)
    5e90:	1009883a 	mov	r4,r2
    5e94:	180b883a 	mov	r5,r3
    5e98:	000ea900 	call	ea90 <__muldf3>
    5e9c:	000d883a 	mov	r6,zero
    5ea0:	01d00734 	movhi	r7,16412
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	180b883a 	mov	r5,r3
    5eac:	000d5bc0 	call	d5bc <__adddf3>
    5eb0:	1021883a 	mov	r16,r2
    5eb4:	d8800617 	ldw	r2,24(sp)
    5eb8:	047f3034 	movhi	r17,64704
    5ebc:	1c63883a 	add	r17,r3,r17
    5ec0:	10031826 	beq	r2,zero,6b24 <_dtoa_r+0x1120>
    5ec4:	d8c00517 	ldw	r3,20(sp)
    5ec8:	db000617 	ldw	r12,24(sp)
    5ecc:	d8c01315 	stw	r3,76(sp)
    5ed0:	d9000b17 	ldw	r4,44(sp)
    5ed4:	20038f26 	beq	r4,zero,6d14 <_dtoa_r+0x1310>
    5ed8:	60bfffc4 	addi	r2,r12,-1
    5edc:	100490fa 	slli	r2,r2,3
    5ee0:	00c00074 	movhi	r3,1
    5ee4:	18d36c04 	addi	r3,r3,19888
    5ee8:	1885883a 	add	r2,r3,r2
    5eec:	11800017 	ldw	r6,0(r2)
    5ef0:	11c00117 	ldw	r7,4(r2)
    5ef4:	d8800717 	ldw	r2,28(sp)
    5ef8:	0009883a 	mov	r4,zero
    5efc:	014ff834 	movhi	r5,16352
    5f00:	db001615 	stw	r12,88(sp)
    5f04:	15c00044 	addi	r23,r2,1
    5f08:	000de680 	call	de68 <__divdf3>
    5f0c:	800d883a 	mov	r6,r16
    5f10:	880f883a 	mov	r7,r17
    5f14:	1009883a 	mov	r4,r2
    5f18:	180b883a 	mov	r5,r3
    5f1c:	000f2fc0 	call	f2fc <__subdf3>
    5f20:	d9401017 	ldw	r5,64(sp)
    5f24:	d9000f17 	ldw	r4,60(sp)
    5f28:	102b883a 	mov	r21,r2
    5f2c:	d8c01215 	stw	r3,72(sp)
    5f30:	000fbf80 	call	fbf8 <__fixdfsi>
    5f34:	1009883a 	mov	r4,r2
    5f38:	1029883a 	mov	r20,r2
    5f3c:	000fc780 	call	fc78 <__floatsidf>
    5f40:	d9000f17 	ldw	r4,60(sp)
    5f44:	d9401017 	ldw	r5,64(sp)
    5f48:	100d883a 	mov	r6,r2
    5f4c:	180f883a 	mov	r7,r3
    5f50:	000f2fc0 	call	f2fc <__subdf3>
    5f54:	1823883a 	mov	r17,r3
    5f58:	d8c00717 	ldw	r3,28(sp)
    5f5c:	d9401217 	ldw	r5,72(sp)
    5f60:	a2000c04 	addi	r8,r20,48
    5f64:	1021883a 	mov	r16,r2
    5f68:	1a000005 	stb	r8,0(r3)
    5f6c:	800d883a 	mov	r6,r16
    5f70:	880f883a 	mov	r7,r17
    5f74:	a809883a 	mov	r4,r21
    5f78:	4029883a 	mov	r20,r8
    5f7c:	000e8c00 	call	e8c0 <__gedf2>
    5f80:	00841d16 	blt	zero,r2,6ff8 <_dtoa_r+0x15f4>
    5f84:	800d883a 	mov	r6,r16
    5f88:	880f883a 	mov	r7,r17
    5f8c:	0009883a 	mov	r4,zero
    5f90:	014ffc34 	movhi	r5,16368
    5f94:	000f2fc0 	call	f2fc <__subdf3>
    5f98:	d9401217 	ldw	r5,72(sp)
    5f9c:	100d883a 	mov	r6,r2
    5fa0:	180f883a 	mov	r7,r3
    5fa4:	a809883a 	mov	r4,r21
    5fa8:	000e8c00 	call	e8c0 <__gedf2>
    5fac:	db001617 	ldw	r12,88(sp)
    5fb0:	00840e16 	blt	zero,r2,6fec <_dtoa_r+0x15e8>
    5fb4:	00800044 	movi	r2,1
    5fb8:	13006b0e 	bge	r2,r12,6168 <_dtoa_r+0x764>
    5fbc:	d9000717 	ldw	r4,28(sp)
    5fc0:	dd800f15 	stw	r22,60(sp)
    5fc4:	dcc01015 	stw	r19,64(sp)
    5fc8:	2319883a 	add	r12,r4,r12
    5fcc:	dcc01217 	ldw	r19,72(sp)
    5fd0:	602d883a 	mov	r22,r12
    5fd4:	dc801215 	stw	r18,72(sp)
    5fd8:	b825883a 	mov	r18,r23
    5fdc:	00000906 	br	6004 <_dtoa_r+0x600>
    5fe0:	000f2fc0 	call	f2fc <__subdf3>
    5fe4:	a80d883a 	mov	r6,r21
    5fe8:	980f883a 	mov	r7,r19
    5fec:	1009883a 	mov	r4,r2
    5ff0:	180b883a 	mov	r5,r3
    5ff4:	000e99c0 	call	e99c <__ledf2>
    5ff8:	1003e816 	blt	r2,zero,6f9c <_dtoa_r+0x1598>
    5ffc:	b825883a 	mov	r18,r23
    6000:	bd83e926 	beq	r23,r22,6fa8 <_dtoa_r+0x15a4>
    6004:	a809883a 	mov	r4,r21
    6008:	980b883a 	mov	r5,r19
    600c:	000d883a 	mov	r6,zero
    6010:	01d00934 	movhi	r7,16420
    6014:	000ea900 	call	ea90 <__muldf3>
    6018:	000d883a 	mov	r6,zero
    601c:	01d00934 	movhi	r7,16420
    6020:	8009883a 	mov	r4,r16
    6024:	880b883a 	mov	r5,r17
    6028:	102b883a 	mov	r21,r2
    602c:	1827883a 	mov	r19,r3
    6030:	000ea900 	call	ea90 <__muldf3>
    6034:	180b883a 	mov	r5,r3
    6038:	1009883a 	mov	r4,r2
    603c:	1821883a 	mov	r16,r3
    6040:	1023883a 	mov	r17,r2
    6044:	000fbf80 	call	fbf8 <__fixdfsi>
    6048:	1009883a 	mov	r4,r2
    604c:	1029883a 	mov	r20,r2
    6050:	000fc780 	call	fc78 <__floatsidf>
    6054:	8809883a 	mov	r4,r17
    6058:	800b883a 	mov	r5,r16
    605c:	100d883a 	mov	r6,r2
    6060:	180f883a 	mov	r7,r3
    6064:	000f2fc0 	call	f2fc <__subdf3>
    6068:	a5000c04 	addi	r20,r20,48
    606c:	a80d883a 	mov	r6,r21
    6070:	980f883a 	mov	r7,r19
    6074:	1009883a 	mov	r4,r2
    6078:	180b883a 	mov	r5,r3
    607c:	95000005 	stb	r20,0(r18)
    6080:	1021883a 	mov	r16,r2
    6084:	1823883a 	mov	r17,r3
    6088:	000e99c0 	call	e99c <__ledf2>
    608c:	bdc00044 	addi	r23,r23,1
    6090:	800d883a 	mov	r6,r16
    6094:	880f883a 	mov	r7,r17
    6098:	0009883a 	mov	r4,zero
    609c:	014ffc34 	movhi	r5,16368
    60a0:	103fcf0e 	bge	r2,zero,5fe0 <__alt_data_end+0xfc005fe0>
    60a4:	d8c01317 	ldw	r3,76(sp)
    60a8:	d8c00515 	stw	r3,20(sp)
    60ac:	d9400917 	ldw	r5,36(sp)
    60b0:	e009883a 	mov	r4,fp
    60b4:	00091640 	call	9164 <_Bfree>
    60b8:	d9000517 	ldw	r4,20(sp)
    60bc:	d9802317 	ldw	r6,140(sp)
    60c0:	d9c02517 	ldw	r7,148(sp)
    60c4:	b8000005 	stb	zero,0(r23)
    60c8:	20800044 	addi	r2,r4,1
    60cc:	30800015 	stw	r2,0(r6)
    60d0:	3802aa26 	beq	r7,zero,6b7c <_dtoa_r+0x1178>
    60d4:	3dc00015 	stw	r23,0(r7)
    60d8:	d8800717 	ldw	r2,28(sp)
    60dc:	003e7906 	br	5ac4 <__alt_data_end+0xfc005ac4>
    60e0:	00800434 	movhi	r2,16
    60e4:	10bfffc4 	addi	r2,r2,-1
    60e8:	88a2703a 	and	r17,r17,r2
    60ec:	883e851e 	bne	r17,zero,5b04 <__alt_data_end+0xfc005b04>
    60f0:	00800074 	movhi	r2,1
    60f4:	10934d04 	addi	r2,r2,19764
    60f8:	003e8406 	br	5b0c <__alt_data_end+0xfc005b0c>
    60fc:	10c00204 	addi	r3,r2,8
    6100:	003e8706 	br	5b20 <__alt_data_end+0xfc005b20>
    6104:	01400434 	movhi	r5,16
    6108:	297fffc4 	addi	r5,r5,-1
    610c:	994a703a 	and	r5,r19,r5
    6110:	9009883a 	mov	r4,r18
    6114:	843f0044 	addi	r16,r16,-1023
    6118:	294ffc34 	orhi	r5,r5,16368
    611c:	dd800217 	ldw	r22,8(sp)
    6120:	d8001115 	stw	zero,68(sp)
    6124:	003ea506 	br	5bbc <__alt_data_end+0xfc005bbc>
    6128:	00800074 	movhi	r2,1
    612c:	10934404 	addi	r2,r2,19728
    6130:	003e6406 	br	5ac4 <__alt_data_end+0xfc005ac4>
    6134:	e0001115 	stw	zero,68(fp)
    6138:	000b883a 	mov	r5,zero
    613c:	e009883a 	mov	r4,fp
    6140:	00090bc0 	call	90bc <_Balloc>
    6144:	01bfffc4 	movi	r6,-1
    6148:	01c00044 	movi	r7,1
    614c:	d8800715 	stw	r2,28(sp)
    6150:	d9800c15 	stw	r6,48(sp)
    6154:	e0801015 	stw	r2,64(fp)
    6158:	d8000315 	stw	zero,12(sp)
    615c:	d9c00b15 	stw	r7,44(sp)
    6160:	d9800615 	stw	r6,24(sp)
    6164:	d8002215 	stw	zero,136(sp)
    6168:	d8800117 	ldw	r2,4(sp)
    616c:	10008916 	blt	r2,zero,6394 <_dtoa_r+0x990>
    6170:	d9000517 	ldw	r4,20(sp)
    6174:	00c00384 	movi	r3,14
    6178:	19008616 	blt	r3,r4,6394 <_dtoa_r+0x990>
    617c:	200490fa 	slli	r2,r4,3
    6180:	00c00074 	movhi	r3,1
    6184:	d9802217 	ldw	r6,136(sp)
    6188:	18d36c04 	addi	r3,r3,19888
    618c:	1885883a 	add	r2,r3,r2
    6190:	14000017 	ldw	r16,0(r2)
    6194:	14400117 	ldw	r17,4(r2)
    6198:	30016316 	blt	r6,zero,6728 <_dtoa_r+0xd24>
    619c:	800d883a 	mov	r6,r16
    61a0:	880f883a 	mov	r7,r17
    61a4:	9009883a 	mov	r4,r18
    61a8:	980b883a 	mov	r5,r19
    61ac:	000de680 	call	de68 <__divdf3>
    61b0:	180b883a 	mov	r5,r3
    61b4:	1009883a 	mov	r4,r2
    61b8:	000fbf80 	call	fbf8 <__fixdfsi>
    61bc:	1009883a 	mov	r4,r2
    61c0:	102b883a 	mov	r21,r2
    61c4:	000fc780 	call	fc78 <__floatsidf>
    61c8:	800d883a 	mov	r6,r16
    61cc:	880f883a 	mov	r7,r17
    61d0:	1009883a 	mov	r4,r2
    61d4:	180b883a 	mov	r5,r3
    61d8:	000ea900 	call	ea90 <__muldf3>
    61dc:	100d883a 	mov	r6,r2
    61e0:	180f883a 	mov	r7,r3
    61e4:	9009883a 	mov	r4,r18
    61e8:	980b883a 	mov	r5,r19
    61ec:	000f2fc0 	call	f2fc <__subdf3>
    61f0:	d9c00717 	ldw	r7,28(sp)
    61f4:	1009883a 	mov	r4,r2
    61f8:	a8800c04 	addi	r2,r21,48
    61fc:	38800005 	stb	r2,0(r7)
    6200:	3dc00044 	addi	r23,r7,1
    6204:	d9c00617 	ldw	r7,24(sp)
    6208:	01800044 	movi	r6,1
    620c:	180b883a 	mov	r5,r3
    6210:	2005883a 	mov	r2,r4
    6214:	39803826 	beq	r7,r6,62f8 <_dtoa_r+0x8f4>
    6218:	000d883a 	mov	r6,zero
    621c:	01d00934 	movhi	r7,16420
    6220:	000ea900 	call	ea90 <__muldf3>
    6224:	000d883a 	mov	r6,zero
    6228:	000f883a 	mov	r7,zero
    622c:	1009883a 	mov	r4,r2
    6230:	180b883a 	mov	r5,r3
    6234:	1025883a 	mov	r18,r2
    6238:	1827883a 	mov	r19,r3
    623c:	000e8380 	call	e838 <__eqdf2>
    6240:	103f9a26 	beq	r2,zero,60ac <__alt_data_end+0xfc0060ac>
    6244:	d9c00617 	ldw	r7,24(sp)
    6248:	d8c00717 	ldw	r3,28(sp)
    624c:	b829883a 	mov	r20,r23
    6250:	38bfffc4 	addi	r2,r7,-1
    6254:	18ad883a 	add	r22,r3,r2
    6258:	00000a06 	br	6284 <_dtoa_r+0x880>
    625c:	000ea900 	call	ea90 <__muldf3>
    6260:	000d883a 	mov	r6,zero
    6264:	000f883a 	mov	r7,zero
    6268:	1009883a 	mov	r4,r2
    626c:	180b883a 	mov	r5,r3
    6270:	1025883a 	mov	r18,r2
    6274:	1827883a 	mov	r19,r3
    6278:	b829883a 	mov	r20,r23
    627c:	000e8380 	call	e838 <__eqdf2>
    6280:	103f8a26 	beq	r2,zero,60ac <__alt_data_end+0xfc0060ac>
    6284:	800d883a 	mov	r6,r16
    6288:	880f883a 	mov	r7,r17
    628c:	9009883a 	mov	r4,r18
    6290:	980b883a 	mov	r5,r19
    6294:	000de680 	call	de68 <__divdf3>
    6298:	180b883a 	mov	r5,r3
    629c:	1009883a 	mov	r4,r2
    62a0:	000fbf80 	call	fbf8 <__fixdfsi>
    62a4:	1009883a 	mov	r4,r2
    62a8:	102b883a 	mov	r21,r2
    62ac:	000fc780 	call	fc78 <__floatsidf>
    62b0:	800d883a 	mov	r6,r16
    62b4:	880f883a 	mov	r7,r17
    62b8:	1009883a 	mov	r4,r2
    62bc:	180b883a 	mov	r5,r3
    62c0:	000ea900 	call	ea90 <__muldf3>
    62c4:	100d883a 	mov	r6,r2
    62c8:	180f883a 	mov	r7,r3
    62cc:	9009883a 	mov	r4,r18
    62d0:	980b883a 	mov	r5,r19
    62d4:	000f2fc0 	call	f2fc <__subdf3>
    62d8:	aa000c04 	addi	r8,r21,48
    62dc:	a2000005 	stb	r8,0(r20)
    62e0:	000d883a 	mov	r6,zero
    62e4:	01d00934 	movhi	r7,16420
    62e8:	1009883a 	mov	r4,r2
    62ec:	180b883a 	mov	r5,r3
    62f0:	a5c00044 	addi	r23,r20,1
    62f4:	b53fd91e 	bne	r22,r20,625c <__alt_data_end+0xfc00625c>
    62f8:	100d883a 	mov	r6,r2
    62fc:	180f883a 	mov	r7,r3
    6300:	1009883a 	mov	r4,r2
    6304:	180b883a 	mov	r5,r3
    6308:	000d5bc0 	call	d5bc <__adddf3>
    630c:	100d883a 	mov	r6,r2
    6310:	180f883a 	mov	r7,r3
    6314:	8009883a 	mov	r4,r16
    6318:	880b883a 	mov	r5,r17
    631c:	1027883a 	mov	r19,r2
    6320:	1825883a 	mov	r18,r3
    6324:	000e99c0 	call	e99c <__ledf2>
    6328:	10000816 	blt	r2,zero,634c <_dtoa_r+0x948>
    632c:	980d883a 	mov	r6,r19
    6330:	900f883a 	mov	r7,r18
    6334:	8009883a 	mov	r4,r16
    6338:	880b883a 	mov	r5,r17
    633c:	000e8380 	call	e838 <__eqdf2>
    6340:	103f5a1e 	bne	r2,zero,60ac <__alt_data_end+0xfc0060ac>
    6344:	ad40004c 	andi	r21,r21,1
    6348:	a83f5826 	beq	r21,zero,60ac <__alt_data_end+0xfc0060ac>
    634c:	bd3fffc3 	ldbu	r20,-1(r23)
    6350:	b8bfffc4 	addi	r2,r23,-1
    6354:	1007883a 	mov	r3,r2
    6358:	01400e44 	movi	r5,57
    635c:	d9800717 	ldw	r6,28(sp)
    6360:	00000506 	br	6378 <_dtoa_r+0x974>
    6364:	18ffffc4 	addi	r3,r3,-1
    6368:	11824726 	beq	r2,r6,6c88 <_dtoa_r+0x1284>
    636c:	1d000003 	ldbu	r20,0(r3)
    6370:	102f883a 	mov	r23,r2
    6374:	10bfffc4 	addi	r2,r2,-1
    6378:	a1003fcc 	andi	r4,r20,255
    637c:	2100201c 	xori	r4,r4,128
    6380:	213fe004 	addi	r4,r4,-128
    6384:	217ff726 	beq	r4,r5,6364 <__alt_data_end+0xfc006364>
    6388:	a2000044 	addi	r8,r20,1
    638c:	12000005 	stb	r8,0(r2)
    6390:	003f4606 	br	60ac <__alt_data_end+0xfc0060ac>
    6394:	d9000b17 	ldw	r4,44(sp)
    6398:	2000c826 	beq	r4,zero,66bc <_dtoa_r+0xcb8>
    639c:	d9800317 	ldw	r6,12(sp)
    63a0:	00c00044 	movi	r3,1
    63a4:	1980f90e 	bge	r3,r6,678c <_dtoa_r+0xd88>
    63a8:	d8800617 	ldw	r2,24(sp)
    63ac:	d8c00a17 	ldw	r3,40(sp)
    63b0:	157fffc4 	addi	r21,r2,-1
    63b4:	1d41f316 	blt	r3,r21,6b84 <_dtoa_r+0x1180>
    63b8:	1d6bc83a 	sub	r21,r3,r21
    63bc:	d9c00617 	ldw	r7,24(sp)
    63c0:	3802aa16 	blt	r7,zero,6e6c <_dtoa_r+0x1468>
    63c4:	dd000817 	ldw	r20,32(sp)
    63c8:	d8800617 	ldw	r2,24(sp)
    63cc:	d8c00817 	ldw	r3,32(sp)
    63d0:	01400044 	movi	r5,1
    63d4:	e009883a 	mov	r4,fp
    63d8:	1887883a 	add	r3,r3,r2
    63dc:	d8c00815 	stw	r3,32(sp)
    63e0:	b0ad883a 	add	r22,r22,r2
    63e4:	00094f00 	call	94f0 <__i2b>
    63e8:	1023883a 	mov	r17,r2
    63ec:	a0000826 	beq	r20,zero,6410 <_dtoa_r+0xa0c>
    63f0:	0580070e 	bge	zero,r22,6410 <_dtoa_r+0xa0c>
    63f4:	a005883a 	mov	r2,r20
    63f8:	b500b916 	blt	r22,r20,66e0 <_dtoa_r+0xcdc>
    63fc:	d9000817 	ldw	r4,32(sp)
    6400:	a0a9c83a 	sub	r20,r20,r2
    6404:	b0adc83a 	sub	r22,r22,r2
    6408:	2089c83a 	sub	r4,r4,r2
    640c:	d9000815 	stw	r4,32(sp)
    6410:	d9800a17 	ldw	r6,40(sp)
    6414:	0181810e 	bge	zero,r6,6a1c <_dtoa_r+0x1018>
    6418:	d9c00b17 	ldw	r7,44(sp)
    641c:	3800b326 	beq	r7,zero,66ec <_dtoa_r+0xce8>
    6420:	a800b226 	beq	r21,zero,66ec <_dtoa_r+0xce8>
    6424:	880b883a 	mov	r5,r17
    6428:	a80d883a 	mov	r6,r21
    642c:	e009883a 	mov	r4,fp
    6430:	00097b80 	call	97b8 <__pow5mult>
    6434:	d9800917 	ldw	r6,36(sp)
    6438:	100b883a 	mov	r5,r2
    643c:	e009883a 	mov	r4,fp
    6440:	1023883a 	mov	r17,r2
    6444:	000952c0 	call	952c <__multiply>
    6448:	1021883a 	mov	r16,r2
    644c:	d8800a17 	ldw	r2,40(sp)
    6450:	d9400917 	ldw	r5,36(sp)
    6454:	e009883a 	mov	r4,fp
    6458:	1545c83a 	sub	r2,r2,r21
    645c:	d8800a15 	stw	r2,40(sp)
    6460:	00091640 	call	9164 <_Bfree>
    6464:	d8c00a17 	ldw	r3,40(sp)
    6468:	18009f1e 	bne	r3,zero,66e8 <_dtoa_r+0xce4>
    646c:	05c00044 	movi	r23,1
    6470:	e009883a 	mov	r4,fp
    6474:	b80b883a 	mov	r5,r23
    6478:	00094f00 	call	94f0 <__i2b>
    647c:	d9000d17 	ldw	r4,52(sp)
    6480:	102b883a 	mov	r21,r2
    6484:	2000ce26 	beq	r4,zero,67c0 <_dtoa_r+0xdbc>
    6488:	200d883a 	mov	r6,r4
    648c:	100b883a 	mov	r5,r2
    6490:	e009883a 	mov	r4,fp
    6494:	00097b80 	call	97b8 <__pow5mult>
    6498:	d9800317 	ldw	r6,12(sp)
    649c:	102b883a 	mov	r21,r2
    64a0:	b981810e 	bge	r23,r6,6aa8 <_dtoa_r+0x10a4>
    64a4:	0027883a 	mov	r19,zero
    64a8:	a8800417 	ldw	r2,16(r21)
    64ac:	05c00804 	movi	r23,32
    64b0:	10800104 	addi	r2,r2,4
    64b4:	1085883a 	add	r2,r2,r2
    64b8:	1085883a 	add	r2,r2,r2
    64bc:	a885883a 	add	r2,r21,r2
    64c0:	11000017 	ldw	r4,0(r2)
    64c4:	00093d80 	call	93d8 <__hi0bits>
    64c8:	b885c83a 	sub	r2,r23,r2
    64cc:	1585883a 	add	r2,r2,r22
    64d0:	108007cc 	andi	r2,r2,31
    64d4:	1000b326 	beq	r2,zero,67a4 <_dtoa_r+0xda0>
    64d8:	00c00804 	movi	r3,32
    64dc:	1887c83a 	sub	r3,r3,r2
    64e0:	01000104 	movi	r4,4
    64e4:	20c2cd0e 	bge	r4,r3,701c <_dtoa_r+0x1618>
    64e8:	00c00704 	movi	r3,28
    64ec:	1885c83a 	sub	r2,r3,r2
    64f0:	d8c00817 	ldw	r3,32(sp)
    64f4:	a0a9883a 	add	r20,r20,r2
    64f8:	b0ad883a 	add	r22,r22,r2
    64fc:	1887883a 	add	r3,r3,r2
    6500:	d8c00815 	stw	r3,32(sp)
    6504:	d9800817 	ldw	r6,32(sp)
    6508:	0180040e 	bge	zero,r6,651c <_dtoa_r+0xb18>
    650c:	800b883a 	mov	r5,r16
    6510:	e009883a 	mov	r4,fp
    6514:	00098f80 	call	98f8 <__lshift>
    6518:	1021883a 	mov	r16,r2
    651c:	0580050e 	bge	zero,r22,6534 <_dtoa_r+0xb30>
    6520:	a80b883a 	mov	r5,r21
    6524:	b00d883a 	mov	r6,r22
    6528:	e009883a 	mov	r4,fp
    652c:	00098f80 	call	98f8 <__lshift>
    6530:	102b883a 	mov	r21,r2
    6534:	d9c00e17 	ldw	r7,56(sp)
    6538:	3801211e 	bne	r7,zero,69c0 <_dtoa_r+0xfbc>
    653c:	d9800617 	ldw	r6,24(sp)
    6540:	0181380e 	bge	zero,r6,6a24 <_dtoa_r+0x1020>
    6544:	d8c00b17 	ldw	r3,44(sp)
    6548:	1800ab1e 	bne	r3,zero,67f8 <_dtoa_r+0xdf4>
    654c:	dc800717 	ldw	r18,28(sp)
    6550:	dcc00617 	ldw	r19,24(sp)
    6554:	9029883a 	mov	r20,r18
    6558:	00000206 	br	6564 <_dtoa_r+0xb60>
    655c:	000918c0 	call	918c <__multadd>
    6560:	1021883a 	mov	r16,r2
    6564:	a80b883a 	mov	r5,r21
    6568:	8009883a 	mov	r4,r16
    656c:	00057dc0 	call	57dc <quorem>
    6570:	10800c04 	addi	r2,r2,48
    6574:	90800005 	stb	r2,0(r18)
    6578:	94800044 	addi	r18,r18,1
    657c:	9507c83a 	sub	r3,r18,r20
    6580:	000f883a 	mov	r7,zero
    6584:	01800284 	movi	r6,10
    6588:	800b883a 	mov	r5,r16
    658c:	e009883a 	mov	r4,fp
    6590:	1cfff216 	blt	r3,r19,655c <__alt_data_end+0xfc00655c>
    6594:	1011883a 	mov	r8,r2
    6598:	d8800617 	ldw	r2,24(sp)
    659c:	0082370e 	bge	zero,r2,6e7c <_dtoa_r+0x1478>
    65a0:	d9000717 	ldw	r4,28(sp)
    65a4:	0025883a 	mov	r18,zero
    65a8:	20af883a 	add	r23,r4,r2
    65ac:	01800044 	movi	r6,1
    65b0:	800b883a 	mov	r5,r16
    65b4:	e009883a 	mov	r4,fp
    65b8:	da001715 	stw	r8,92(sp)
    65bc:	00098f80 	call	98f8 <__lshift>
    65c0:	a80b883a 	mov	r5,r21
    65c4:	1009883a 	mov	r4,r2
    65c8:	d8800915 	stw	r2,36(sp)
    65cc:	0009a400 	call	9a40 <__mcmp>
    65d0:	da001717 	ldw	r8,92(sp)
    65d4:	0081800e 	bge	zero,r2,6bd8 <_dtoa_r+0x11d4>
    65d8:	b93fffc3 	ldbu	r4,-1(r23)
    65dc:	b8bfffc4 	addi	r2,r23,-1
    65e0:	1007883a 	mov	r3,r2
    65e4:	01800e44 	movi	r6,57
    65e8:	d9c00717 	ldw	r7,28(sp)
    65ec:	00000506 	br	6604 <_dtoa_r+0xc00>
    65f0:	18ffffc4 	addi	r3,r3,-1
    65f4:	11c12326 	beq	r2,r7,6a84 <_dtoa_r+0x1080>
    65f8:	19000003 	ldbu	r4,0(r3)
    65fc:	102f883a 	mov	r23,r2
    6600:	10bfffc4 	addi	r2,r2,-1
    6604:	21403fcc 	andi	r5,r4,255
    6608:	2940201c 	xori	r5,r5,128
    660c:	297fe004 	addi	r5,r5,-128
    6610:	29bff726 	beq	r5,r6,65f0 <__alt_data_end+0xfc0065f0>
    6614:	21000044 	addi	r4,r4,1
    6618:	11000005 	stb	r4,0(r2)
    661c:	a80b883a 	mov	r5,r21
    6620:	e009883a 	mov	r4,fp
    6624:	00091640 	call	9164 <_Bfree>
    6628:	883ea026 	beq	r17,zero,60ac <__alt_data_end+0xfc0060ac>
    662c:	90000426 	beq	r18,zero,6640 <_dtoa_r+0xc3c>
    6630:	94400326 	beq	r18,r17,6640 <_dtoa_r+0xc3c>
    6634:	900b883a 	mov	r5,r18
    6638:	e009883a 	mov	r4,fp
    663c:	00091640 	call	9164 <_Bfree>
    6640:	880b883a 	mov	r5,r17
    6644:	e009883a 	mov	r4,fp
    6648:	00091640 	call	9164 <_Bfree>
    664c:	003e9706 	br	60ac <__alt_data_end+0xfc0060ac>
    6650:	01800044 	movi	r6,1
    6654:	d9800e15 	stw	r6,56(sp)
    6658:	003d9606 	br	5cb4 <__alt_data_end+0xfc005cb4>
    665c:	d8800817 	ldw	r2,32(sp)
    6660:	d8c00517 	ldw	r3,20(sp)
    6664:	d8000d15 	stw	zero,52(sp)
    6668:	10c5c83a 	sub	r2,r2,r3
    666c:	00c9c83a 	sub	r4,zero,r3
    6670:	d8800815 	stw	r2,32(sp)
    6674:	d9000a15 	stw	r4,40(sp)
    6678:	003d9706 	br	5cd8 <__alt_data_end+0xfc005cd8>
    667c:	05adc83a 	sub	r22,zero,r22
    6680:	dd800815 	stw	r22,32(sp)
    6684:	002d883a 	mov	r22,zero
    6688:	003d8e06 	br	5cc4 <__alt_data_end+0xfc005cc4>
    668c:	d9000517 	ldw	r4,20(sp)
    6690:	000fc780 	call	fc78 <__floatsidf>
    6694:	100d883a 	mov	r6,r2
    6698:	180f883a 	mov	r7,r3
    669c:	a009883a 	mov	r4,r20
    66a0:	880b883a 	mov	r5,r17
    66a4:	000e8380 	call	e838 <__eqdf2>
    66a8:	103d7126 	beq	r2,zero,5c70 <__alt_data_end+0xfc005c70>
    66ac:	d9c00517 	ldw	r7,20(sp)
    66b0:	39ffffc4 	addi	r7,r7,-1
    66b4:	d9c00515 	stw	r7,20(sp)
    66b8:	003d6d06 	br	5c70 <__alt_data_end+0xfc005c70>
    66bc:	dd400a17 	ldw	r21,40(sp)
    66c0:	dd000817 	ldw	r20,32(sp)
    66c4:	0023883a 	mov	r17,zero
    66c8:	003f4806 	br	63ec <__alt_data_end+0xfc0063ec>
    66cc:	10e3c83a 	sub	r17,r2,r3
    66d0:	9448983a 	sll	r4,r18,r17
    66d4:	003d3206 	br	5ba0 <__alt_data_end+0xfc005ba0>
    66d8:	d8000e15 	stw	zero,56(sp)
    66dc:	003d7506 	br	5cb4 <__alt_data_end+0xfc005cb4>
    66e0:	b005883a 	mov	r2,r22
    66e4:	003f4506 	br	63fc <__alt_data_end+0xfc0063fc>
    66e8:	dc000915 	stw	r16,36(sp)
    66ec:	d9800a17 	ldw	r6,40(sp)
    66f0:	d9400917 	ldw	r5,36(sp)
    66f4:	e009883a 	mov	r4,fp
    66f8:	00097b80 	call	97b8 <__pow5mult>
    66fc:	1021883a 	mov	r16,r2
    6700:	003f5a06 	br	646c <__alt_data_end+0xfc00646c>
    6704:	01c00044 	movi	r7,1
    6708:	d9c00b15 	stw	r7,44(sp)
    670c:	d8802217 	ldw	r2,136(sp)
    6710:	0081280e 	bge	zero,r2,6bb4 <_dtoa_r+0x11b0>
    6714:	100d883a 	mov	r6,r2
    6718:	1021883a 	mov	r16,r2
    671c:	d8800c15 	stw	r2,48(sp)
    6720:	d8800615 	stw	r2,24(sp)
    6724:	003d8806 	br	5d48 <__alt_data_end+0xfc005d48>
    6728:	d8800617 	ldw	r2,24(sp)
    672c:	00be9b16 	blt	zero,r2,619c <__alt_data_end+0xfc00619c>
    6730:	10010f1e 	bne	r2,zero,6b70 <_dtoa_r+0x116c>
    6734:	880b883a 	mov	r5,r17
    6738:	000d883a 	mov	r6,zero
    673c:	01d00534 	movhi	r7,16404
    6740:	8009883a 	mov	r4,r16
    6744:	000ea900 	call	ea90 <__muldf3>
    6748:	900d883a 	mov	r6,r18
    674c:	980f883a 	mov	r7,r19
    6750:	1009883a 	mov	r4,r2
    6754:	180b883a 	mov	r5,r3
    6758:	000e8c00 	call	e8c0 <__gedf2>
    675c:	002b883a 	mov	r21,zero
    6760:	0023883a 	mov	r17,zero
    6764:	1000bf16 	blt	r2,zero,6a64 <_dtoa_r+0x1060>
    6768:	d9802217 	ldw	r6,136(sp)
    676c:	ddc00717 	ldw	r23,28(sp)
    6770:	018c303a 	nor	r6,zero,r6
    6774:	d9800515 	stw	r6,20(sp)
    6778:	a80b883a 	mov	r5,r21
    677c:	e009883a 	mov	r4,fp
    6780:	00091640 	call	9164 <_Bfree>
    6784:	883e4926 	beq	r17,zero,60ac <__alt_data_end+0xfc0060ac>
    6788:	003fad06 	br	6640 <__alt_data_end+0xfc006640>
    678c:	d9c01117 	ldw	r7,68(sp)
    6790:	3801bc26 	beq	r7,zero,6e84 <_dtoa_r+0x1480>
    6794:	10810cc4 	addi	r2,r2,1075
    6798:	dd400a17 	ldw	r21,40(sp)
    679c:	dd000817 	ldw	r20,32(sp)
    67a0:	003f0a06 	br	63cc <__alt_data_end+0xfc0063cc>
    67a4:	00800704 	movi	r2,28
    67a8:	d9000817 	ldw	r4,32(sp)
    67ac:	a0a9883a 	add	r20,r20,r2
    67b0:	b0ad883a 	add	r22,r22,r2
    67b4:	2089883a 	add	r4,r4,r2
    67b8:	d9000815 	stw	r4,32(sp)
    67bc:	003f5106 	br	6504 <__alt_data_end+0xfc006504>
    67c0:	d8c00317 	ldw	r3,12(sp)
    67c4:	b8c1fc0e 	bge	r23,r3,6fb8 <_dtoa_r+0x15b4>
    67c8:	0027883a 	mov	r19,zero
    67cc:	b805883a 	mov	r2,r23
    67d0:	003f3e06 	br	64cc <__alt_data_end+0xfc0064cc>
    67d4:	880b883a 	mov	r5,r17
    67d8:	e009883a 	mov	r4,fp
    67dc:	000f883a 	mov	r7,zero
    67e0:	01800284 	movi	r6,10
    67e4:	000918c0 	call	918c <__multadd>
    67e8:	d9000c17 	ldw	r4,48(sp)
    67ec:	1023883a 	mov	r17,r2
    67f0:	0102040e 	bge	zero,r4,7004 <_dtoa_r+0x1600>
    67f4:	d9000615 	stw	r4,24(sp)
    67f8:	0500050e 	bge	zero,r20,6810 <_dtoa_r+0xe0c>
    67fc:	880b883a 	mov	r5,r17
    6800:	a00d883a 	mov	r6,r20
    6804:	e009883a 	mov	r4,fp
    6808:	00098f80 	call	98f8 <__lshift>
    680c:	1023883a 	mov	r17,r2
    6810:	9801241e 	bne	r19,zero,6ca4 <_dtoa_r+0x12a0>
    6814:	8829883a 	mov	r20,r17
    6818:	d9000617 	ldw	r4,24(sp)
    681c:	dcc00717 	ldw	r19,28(sp)
    6820:	9480004c 	andi	r18,r18,1
    6824:	20bfffc4 	addi	r2,r4,-1
    6828:	9885883a 	add	r2,r19,r2
    682c:	d8800415 	stw	r2,16(sp)
    6830:	dc800615 	stw	r18,24(sp)
    6834:	a80b883a 	mov	r5,r21
    6838:	8009883a 	mov	r4,r16
    683c:	00057dc0 	call	57dc <quorem>
    6840:	880b883a 	mov	r5,r17
    6844:	8009883a 	mov	r4,r16
    6848:	102f883a 	mov	r23,r2
    684c:	0009a400 	call	9a40 <__mcmp>
    6850:	a80b883a 	mov	r5,r21
    6854:	a00d883a 	mov	r6,r20
    6858:	e009883a 	mov	r4,fp
    685c:	102d883a 	mov	r22,r2
    6860:	0009aa00 	call	9aa0 <__mdiff>
    6864:	1007883a 	mov	r3,r2
    6868:	10800317 	ldw	r2,12(r2)
    686c:	bc800c04 	addi	r18,r23,48
    6870:	180b883a 	mov	r5,r3
    6874:	10004e1e 	bne	r2,zero,69b0 <_dtoa_r+0xfac>
    6878:	8009883a 	mov	r4,r16
    687c:	d8c01615 	stw	r3,88(sp)
    6880:	0009a400 	call	9a40 <__mcmp>
    6884:	d8c01617 	ldw	r3,88(sp)
    6888:	e009883a 	mov	r4,fp
    688c:	d8801615 	stw	r2,88(sp)
    6890:	180b883a 	mov	r5,r3
    6894:	00091640 	call	9164 <_Bfree>
    6898:	d8801617 	ldw	r2,88(sp)
    689c:	1000041e 	bne	r2,zero,68b0 <_dtoa_r+0xeac>
    68a0:	d9800317 	ldw	r6,12(sp)
    68a4:	3000021e 	bne	r6,zero,68b0 <_dtoa_r+0xeac>
    68a8:	d8c00617 	ldw	r3,24(sp)
    68ac:	18003726 	beq	r3,zero,698c <_dtoa_r+0xf88>
    68b0:	b0002016 	blt	r22,zero,6934 <_dtoa_r+0xf30>
    68b4:	b000041e 	bne	r22,zero,68c8 <_dtoa_r+0xec4>
    68b8:	d9000317 	ldw	r4,12(sp)
    68bc:	2000021e 	bne	r4,zero,68c8 <_dtoa_r+0xec4>
    68c0:	d8c00617 	ldw	r3,24(sp)
    68c4:	18001b26 	beq	r3,zero,6934 <_dtoa_r+0xf30>
    68c8:	00810716 	blt	zero,r2,6ce8 <_dtoa_r+0x12e4>
    68cc:	d8c00417 	ldw	r3,16(sp)
    68d0:	9d800044 	addi	r22,r19,1
    68d4:	9c800005 	stb	r18,0(r19)
    68d8:	b02f883a 	mov	r23,r22
    68dc:	98c10626 	beq	r19,r3,6cf8 <_dtoa_r+0x12f4>
    68e0:	800b883a 	mov	r5,r16
    68e4:	000f883a 	mov	r7,zero
    68e8:	01800284 	movi	r6,10
    68ec:	e009883a 	mov	r4,fp
    68f0:	000918c0 	call	918c <__multadd>
    68f4:	1021883a 	mov	r16,r2
    68f8:	000f883a 	mov	r7,zero
    68fc:	01800284 	movi	r6,10
    6900:	880b883a 	mov	r5,r17
    6904:	e009883a 	mov	r4,fp
    6908:	8d002526 	beq	r17,r20,69a0 <_dtoa_r+0xf9c>
    690c:	000918c0 	call	918c <__multadd>
    6910:	a00b883a 	mov	r5,r20
    6914:	000f883a 	mov	r7,zero
    6918:	01800284 	movi	r6,10
    691c:	e009883a 	mov	r4,fp
    6920:	1023883a 	mov	r17,r2
    6924:	000918c0 	call	918c <__multadd>
    6928:	1029883a 	mov	r20,r2
    692c:	b027883a 	mov	r19,r22
    6930:	003fc006 	br	6834 <__alt_data_end+0xfc006834>
    6934:	9011883a 	mov	r8,r18
    6938:	00800e0e 	bge	zero,r2,6974 <_dtoa_r+0xf70>
    693c:	800b883a 	mov	r5,r16
    6940:	01800044 	movi	r6,1
    6944:	e009883a 	mov	r4,fp
    6948:	da001715 	stw	r8,92(sp)
    694c:	00098f80 	call	98f8 <__lshift>
    6950:	a80b883a 	mov	r5,r21
    6954:	1009883a 	mov	r4,r2
    6958:	1021883a 	mov	r16,r2
    695c:	0009a400 	call	9a40 <__mcmp>
    6960:	da001717 	ldw	r8,92(sp)
    6964:	0081960e 	bge	zero,r2,6fc0 <_dtoa_r+0x15bc>
    6968:	00800e44 	movi	r2,57
    696c:	40817026 	beq	r8,r2,6f30 <_dtoa_r+0x152c>
    6970:	ba000c44 	addi	r8,r23,49
    6974:	8825883a 	mov	r18,r17
    6978:	9dc00044 	addi	r23,r19,1
    697c:	9a000005 	stb	r8,0(r19)
    6980:	a023883a 	mov	r17,r20
    6984:	dc000915 	stw	r16,36(sp)
    6988:	003f2406 	br	661c <__alt_data_end+0xfc00661c>
    698c:	00800e44 	movi	r2,57
    6990:	9011883a 	mov	r8,r18
    6994:	90816626 	beq	r18,r2,6f30 <_dtoa_r+0x152c>
    6998:	05bff516 	blt	zero,r22,6970 <__alt_data_end+0xfc006970>
    699c:	003ff506 	br	6974 <__alt_data_end+0xfc006974>
    69a0:	000918c0 	call	918c <__multadd>
    69a4:	1023883a 	mov	r17,r2
    69a8:	1029883a 	mov	r20,r2
    69ac:	003fdf06 	br	692c <__alt_data_end+0xfc00692c>
    69b0:	e009883a 	mov	r4,fp
    69b4:	00091640 	call	9164 <_Bfree>
    69b8:	00800044 	movi	r2,1
    69bc:	003fbc06 	br	68b0 <__alt_data_end+0xfc0068b0>
    69c0:	a80b883a 	mov	r5,r21
    69c4:	8009883a 	mov	r4,r16
    69c8:	0009a400 	call	9a40 <__mcmp>
    69cc:	103edb0e 	bge	r2,zero,653c <__alt_data_end+0xfc00653c>
    69d0:	800b883a 	mov	r5,r16
    69d4:	000f883a 	mov	r7,zero
    69d8:	01800284 	movi	r6,10
    69dc:	e009883a 	mov	r4,fp
    69e0:	000918c0 	call	918c <__multadd>
    69e4:	1021883a 	mov	r16,r2
    69e8:	d8800517 	ldw	r2,20(sp)
    69ec:	d8c00b17 	ldw	r3,44(sp)
    69f0:	10bfffc4 	addi	r2,r2,-1
    69f4:	d8800515 	stw	r2,20(sp)
    69f8:	183f761e 	bne	r3,zero,67d4 <__alt_data_end+0xfc0067d4>
    69fc:	d9000c17 	ldw	r4,48(sp)
    6a00:	0101730e 	bge	zero,r4,6fd0 <_dtoa_r+0x15cc>
    6a04:	d9000615 	stw	r4,24(sp)
    6a08:	003ed006 	br	654c <__alt_data_end+0xfc00654c>
    6a0c:	00800084 	movi	r2,2
    6a10:	3081861e 	bne	r6,r2,702c <_dtoa_r+0x1628>
    6a14:	d8000b15 	stw	zero,44(sp)
    6a18:	003f3c06 	br	670c <__alt_data_end+0xfc00670c>
    6a1c:	dc000917 	ldw	r16,36(sp)
    6a20:	003e9206 	br	646c <__alt_data_end+0xfc00646c>
    6a24:	d9c00317 	ldw	r7,12(sp)
    6a28:	00800084 	movi	r2,2
    6a2c:	11fec50e 	bge	r2,r7,6544 <__alt_data_end+0xfc006544>
    6a30:	d9000617 	ldw	r4,24(sp)
    6a34:	20013c1e 	bne	r4,zero,6f28 <_dtoa_r+0x1524>
    6a38:	a80b883a 	mov	r5,r21
    6a3c:	000f883a 	mov	r7,zero
    6a40:	01800144 	movi	r6,5
    6a44:	e009883a 	mov	r4,fp
    6a48:	000918c0 	call	918c <__multadd>
    6a4c:	100b883a 	mov	r5,r2
    6a50:	8009883a 	mov	r4,r16
    6a54:	102b883a 	mov	r21,r2
    6a58:	0009a400 	call	9a40 <__mcmp>
    6a5c:	dc000915 	stw	r16,36(sp)
    6a60:	00bf410e 	bge	zero,r2,6768 <__alt_data_end+0xfc006768>
    6a64:	d9c00717 	ldw	r7,28(sp)
    6a68:	00800c44 	movi	r2,49
    6a6c:	38800005 	stb	r2,0(r7)
    6a70:	d8800517 	ldw	r2,20(sp)
    6a74:	3dc00044 	addi	r23,r7,1
    6a78:	10800044 	addi	r2,r2,1
    6a7c:	d8800515 	stw	r2,20(sp)
    6a80:	003f3d06 	br	6778 <__alt_data_end+0xfc006778>
    6a84:	d9800517 	ldw	r6,20(sp)
    6a88:	d9c00717 	ldw	r7,28(sp)
    6a8c:	00800c44 	movi	r2,49
    6a90:	31800044 	addi	r6,r6,1
    6a94:	d9800515 	stw	r6,20(sp)
    6a98:	38800005 	stb	r2,0(r7)
    6a9c:	003edf06 	br	661c <__alt_data_end+0xfc00661c>
    6aa0:	d8000b15 	stw	zero,44(sp)
    6aa4:	003c9f06 	br	5d24 <__alt_data_end+0xfc005d24>
    6aa8:	903e7e1e 	bne	r18,zero,64a4 <__alt_data_end+0xfc0064a4>
    6aac:	00800434 	movhi	r2,16
    6ab0:	10bfffc4 	addi	r2,r2,-1
    6ab4:	9884703a 	and	r2,r19,r2
    6ab8:	1000ea1e 	bne	r2,zero,6e64 <_dtoa_r+0x1460>
    6abc:	9cdffc2c 	andhi	r19,r19,32752
    6ac0:	9800e826 	beq	r19,zero,6e64 <_dtoa_r+0x1460>
    6ac4:	d9c00817 	ldw	r7,32(sp)
    6ac8:	b5800044 	addi	r22,r22,1
    6acc:	04c00044 	movi	r19,1
    6ad0:	39c00044 	addi	r7,r7,1
    6ad4:	d9c00815 	stw	r7,32(sp)
    6ad8:	d8800d17 	ldw	r2,52(sp)
    6adc:	103e721e 	bne	r2,zero,64a8 <__alt_data_end+0xfc0064a8>
    6ae0:	00800044 	movi	r2,1
    6ae4:	003e7906 	br	64cc <__alt_data_end+0xfc0064cc>
    6ae8:	8009883a 	mov	r4,r16
    6aec:	000fc780 	call	fc78 <__floatsidf>
    6af0:	d9800f17 	ldw	r6,60(sp)
    6af4:	d9c01017 	ldw	r7,64(sp)
    6af8:	1009883a 	mov	r4,r2
    6afc:	180b883a 	mov	r5,r3
    6b00:	000ea900 	call	ea90 <__muldf3>
    6b04:	000d883a 	mov	r6,zero
    6b08:	01d00734 	movhi	r7,16412
    6b0c:	1009883a 	mov	r4,r2
    6b10:	180b883a 	mov	r5,r3
    6b14:	000d5bc0 	call	d5bc <__adddf3>
    6b18:	047f3034 	movhi	r17,64704
    6b1c:	1021883a 	mov	r16,r2
    6b20:	1c63883a 	add	r17,r3,r17
    6b24:	d9000f17 	ldw	r4,60(sp)
    6b28:	d9401017 	ldw	r5,64(sp)
    6b2c:	000d883a 	mov	r6,zero
    6b30:	01d00534 	movhi	r7,16404
    6b34:	000f2fc0 	call	f2fc <__subdf3>
    6b38:	800d883a 	mov	r6,r16
    6b3c:	880f883a 	mov	r7,r17
    6b40:	1009883a 	mov	r4,r2
    6b44:	180b883a 	mov	r5,r3
    6b48:	102b883a 	mov	r21,r2
    6b4c:	1829883a 	mov	r20,r3
    6b50:	000e8c00 	call	e8c0 <__gedf2>
    6b54:	00806c16 	blt	zero,r2,6d08 <_dtoa_r+0x1304>
    6b58:	89e0003c 	xorhi	r7,r17,32768
    6b5c:	800d883a 	mov	r6,r16
    6b60:	a809883a 	mov	r4,r21
    6b64:	a00b883a 	mov	r5,r20
    6b68:	000e99c0 	call	e99c <__ledf2>
    6b6c:	103d7e0e 	bge	r2,zero,6168 <__alt_data_end+0xfc006168>
    6b70:	002b883a 	mov	r21,zero
    6b74:	0023883a 	mov	r17,zero
    6b78:	003efb06 	br	6768 <__alt_data_end+0xfc006768>
    6b7c:	d8800717 	ldw	r2,28(sp)
    6b80:	003bd006 	br	5ac4 <__alt_data_end+0xfc005ac4>
    6b84:	d9000a17 	ldw	r4,40(sp)
    6b88:	d9800d17 	ldw	r6,52(sp)
    6b8c:	dd400a15 	stw	r21,40(sp)
    6b90:	a905c83a 	sub	r2,r21,r4
    6b94:	308d883a 	add	r6,r6,r2
    6b98:	d9800d15 	stw	r6,52(sp)
    6b9c:	002b883a 	mov	r21,zero
    6ba0:	003e0606 	br	63bc <__alt_data_end+0xfc0063bc>
    6ba4:	9023883a 	mov	r17,r18
    6ba8:	9829883a 	mov	r20,r19
    6bac:	04000084 	movi	r16,2
    6bb0:	003c9206 	br	5dfc <__alt_data_end+0xfc005dfc>
    6bb4:	04000044 	movi	r16,1
    6bb8:	dc000c15 	stw	r16,48(sp)
    6bbc:	dc000615 	stw	r16,24(sp)
    6bc0:	dc002215 	stw	r16,136(sp)
    6bc4:	e0001115 	stw	zero,68(fp)
    6bc8:	000b883a 	mov	r5,zero
    6bcc:	003c6906 	br	5d74 <__alt_data_end+0xfc005d74>
    6bd0:	3021883a 	mov	r16,r6
    6bd4:	003ffb06 	br	6bc4 <__alt_data_end+0xfc006bc4>
    6bd8:	1000021e 	bne	r2,zero,6be4 <_dtoa_r+0x11e0>
    6bdc:	4200004c 	andi	r8,r8,1
    6be0:	403e7d1e 	bne	r8,zero,65d8 <__alt_data_end+0xfc0065d8>
    6be4:	01000c04 	movi	r4,48
    6be8:	00000106 	br	6bf0 <_dtoa_r+0x11ec>
    6bec:	102f883a 	mov	r23,r2
    6bf0:	b8bfffc4 	addi	r2,r23,-1
    6bf4:	10c00007 	ldb	r3,0(r2)
    6bf8:	193ffc26 	beq	r3,r4,6bec <__alt_data_end+0xfc006bec>
    6bfc:	003e8706 	br	661c <__alt_data_end+0xfc00661c>
    6c00:	d8800517 	ldw	r2,20(sp)
    6c04:	00a3c83a 	sub	r17,zero,r2
    6c08:	8800a426 	beq	r17,zero,6e9c <_dtoa_r+0x1498>
    6c0c:	888003cc 	andi	r2,r17,15
    6c10:	100490fa 	slli	r2,r2,3
    6c14:	00c00074 	movhi	r3,1
    6c18:	18d36c04 	addi	r3,r3,19888
    6c1c:	1885883a 	add	r2,r3,r2
    6c20:	11800017 	ldw	r6,0(r2)
    6c24:	11c00117 	ldw	r7,4(r2)
    6c28:	9009883a 	mov	r4,r18
    6c2c:	980b883a 	mov	r5,r19
    6c30:	8823d13a 	srai	r17,r17,4
    6c34:	000ea900 	call	ea90 <__muldf3>
    6c38:	d8800f15 	stw	r2,60(sp)
    6c3c:	d8c01015 	stw	r3,64(sp)
    6c40:	8800e826 	beq	r17,zero,6fe4 <_dtoa_r+0x15e0>
    6c44:	05000074 	movhi	r20,1
    6c48:	a5136204 	addi	r20,r20,19848
    6c4c:	04000084 	movi	r16,2
    6c50:	8980004c 	andi	r6,r17,1
    6c54:	1009883a 	mov	r4,r2
    6c58:	8823d07a 	srai	r17,r17,1
    6c5c:	180b883a 	mov	r5,r3
    6c60:	30000426 	beq	r6,zero,6c74 <_dtoa_r+0x1270>
    6c64:	a1800017 	ldw	r6,0(r20)
    6c68:	a1c00117 	ldw	r7,4(r20)
    6c6c:	84000044 	addi	r16,r16,1
    6c70:	000ea900 	call	ea90 <__muldf3>
    6c74:	a5000204 	addi	r20,r20,8
    6c78:	883ff51e 	bne	r17,zero,6c50 <__alt_data_end+0xfc006c50>
    6c7c:	d8800f15 	stw	r2,60(sp)
    6c80:	d8c01015 	stw	r3,64(sp)
    6c84:	003c7606 	br	5e60 <__alt_data_end+0xfc005e60>
    6c88:	00c00c04 	movi	r3,48
    6c8c:	10c00005 	stb	r3,0(r2)
    6c90:	d8c00517 	ldw	r3,20(sp)
    6c94:	bd3fffc3 	ldbu	r20,-1(r23)
    6c98:	18c00044 	addi	r3,r3,1
    6c9c:	d8c00515 	stw	r3,20(sp)
    6ca0:	003db906 	br	6388 <__alt_data_end+0xfc006388>
    6ca4:	89400117 	ldw	r5,4(r17)
    6ca8:	e009883a 	mov	r4,fp
    6cac:	00090bc0 	call	90bc <_Balloc>
    6cb0:	89800417 	ldw	r6,16(r17)
    6cb4:	89400304 	addi	r5,r17,12
    6cb8:	11000304 	addi	r4,r2,12
    6cbc:	31800084 	addi	r6,r6,2
    6cc0:	318d883a 	add	r6,r6,r6
    6cc4:	318d883a 	add	r6,r6,r6
    6cc8:	1027883a 	mov	r19,r2
    6ccc:	0008cf00 	call	8cf0 <memcpy>
    6cd0:	01800044 	movi	r6,1
    6cd4:	980b883a 	mov	r5,r19
    6cd8:	e009883a 	mov	r4,fp
    6cdc:	00098f80 	call	98f8 <__lshift>
    6ce0:	1029883a 	mov	r20,r2
    6ce4:	003ecc06 	br	6818 <__alt_data_end+0xfc006818>
    6ce8:	00800e44 	movi	r2,57
    6cec:	90809026 	beq	r18,r2,6f30 <_dtoa_r+0x152c>
    6cf0:	92000044 	addi	r8,r18,1
    6cf4:	003f1f06 	br	6974 <__alt_data_end+0xfc006974>
    6cf8:	9011883a 	mov	r8,r18
    6cfc:	8825883a 	mov	r18,r17
    6d00:	a023883a 	mov	r17,r20
    6d04:	003e2906 	br	65ac <__alt_data_end+0xfc0065ac>
    6d08:	002b883a 	mov	r21,zero
    6d0c:	0023883a 	mov	r17,zero
    6d10:	003f5406 	br	6a64 <__alt_data_end+0xfc006a64>
    6d14:	61bfffc4 	addi	r6,r12,-1
    6d18:	300490fa 	slli	r2,r6,3
    6d1c:	00c00074 	movhi	r3,1
    6d20:	18d36c04 	addi	r3,r3,19888
    6d24:	1885883a 	add	r2,r3,r2
    6d28:	11000017 	ldw	r4,0(r2)
    6d2c:	11400117 	ldw	r5,4(r2)
    6d30:	d8800717 	ldw	r2,28(sp)
    6d34:	880f883a 	mov	r7,r17
    6d38:	d9801215 	stw	r6,72(sp)
    6d3c:	800d883a 	mov	r6,r16
    6d40:	db001615 	stw	r12,88(sp)
    6d44:	15c00044 	addi	r23,r2,1
    6d48:	000ea900 	call	ea90 <__muldf3>
    6d4c:	d9401017 	ldw	r5,64(sp)
    6d50:	d9000f17 	ldw	r4,60(sp)
    6d54:	d8c01515 	stw	r3,84(sp)
    6d58:	d8801415 	stw	r2,80(sp)
    6d5c:	000fbf80 	call	fbf8 <__fixdfsi>
    6d60:	1009883a 	mov	r4,r2
    6d64:	1021883a 	mov	r16,r2
    6d68:	000fc780 	call	fc78 <__floatsidf>
    6d6c:	d9000f17 	ldw	r4,60(sp)
    6d70:	d9401017 	ldw	r5,64(sp)
    6d74:	100d883a 	mov	r6,r2
    6d78:	180f883a 	mov	r7,r3
    6d7c:	000f2fc0 	call	f2fc <__subdf3>
    6d80:	1829883a 	mov	r20,r3
    6d84:	d8c00717 	ldw	r3,28(sp)
    6d88:	84000c04 	addi	r16,r16,48
    6d8c:	1023883a 	mov	r17,r2
    6d90:	1c000005 	stb	r16,0(r3)
    6d94:	db001617 	ldw	r12,88(sp)
    6d98:	00800044 	movi	r2,1
    6d9c:	60802226 	beq	r12,r2,6e28 <_dtoa_r+0x1424>
    6da0:	d9c00717 	ldw	r7,28(sp)
    6da4:	8805883a 	mov	r2,r17
    6da8:	b82b883a 	mov	r21,r23
    6dac:	3b19883a 	add	r12,r7,r12
    6db0:	6023883a 	mov	r17,r12
    6db4:	a007883a 	mov	r3,r20
    6db8:	dc800f15 	stw	r18,60(sp)
    6dbc:	000d883a 	mov	r6,zero
    6dc0:	01d00934 	movhi	r7,16420
    6dc4:	1009883a 	mov	r4,r2
    6dc8:	180b883a 	mov	r5,r3
    6dcc:	000ea900 	call	ea90 <__muldf3>
    6dd0:	180b883a 	mov	r5,r3
    6dd4:	1009883a 	mov	r4,r2
    6dd8:	1829883a 	mov	r20,r3
    6ddc:	1025883a 	mov	r18,r2
    6de0:	000fbf80 	call	fbf8 <__fixdfsi>
    6de4:	1009883a 	mov	r4,r2
    6de8:	1021883a 	mov	r16,r2
    6dec:	000fc780 	call	fc78 <__floatsidf>
    6df0:	100d883a 	mov	r6,r2
    6df4:	180f883a 	mov	r7,r3
    6df8:	9009883a 	mov	r4,r18
    6dfc:	a00b883a 	mov	r5,r20
    6e00:	84000c04 	addi	r16,r16,48
    6e04:	000f2fc0 	call	f2fc <__subdf3>
    6e08:	ad400044 	addi	r21,r21,1
    6e0c:	ac3fffc5 	stb	r16,-1(r21)
    6e10:	ac7fea1e 	bne	r21,r17,6dbc <__alt_data_end+0xfc006dbc>
    6e14:	1023883a 	mov	r17,r2
    6e18:	d8801217 	ldw	r2,72(sp)
    6e1c:	dc800f17 	ldw	r18,60(sp)
    6e20:	1829883a 	mov	r20,r3
    6e24:	b8af883a 	add	r23,r23,r2
    6e28:	d9001417 	ldw	r4,80(sp)
    6e2c:	d9401517 	ldw	r5,84(sp)
    6e30:	000d883a 	mov	r6,zero
    6e34:	01cff834 	movhi	r7,16352
    6e38:	000d5bc0 	call	d5bc <__adddf3>
    6e3c:	880d883a 	mov	r6,r17
    6e40:	a00f883a 	mov	r7,r20
    6e44:	1009883a 	mov	r4,r2
    6e48:	180b883a 	mov	r5,r3
    6e4c:	000e99c0 	call	e99c <__ledf2>
    6e50:	10003e0e 	bge	r2,zero,6f4c <_dtoa_r+0x1548>
    6e54:	d9001317 	ldw	r4,76(sp)
    6e58:	bd3fffc3 	ldbu	r20,-1(r23)
    6e5c:	d9000515 	stw	r4,20(sp)
    6e60:	003d3b06 	br	6350 <__alt_data_end+0xfc006350>
    6e64:	0027883a 	mov	r19,zero
    6e68:	003f1b06 	br	6ad8 <__alt_data_end+0xfc006ad8>
    6e6c:	d8800817 	ldw	r2,32(sp)
    6e70:	11e9c83a 	sub	r20,r2,r7
    6e74:	0005883a 	mov	r2,zero
    6e78:	003d5406 	br	63cc <__alt_data_end+0xfc0063cc>
    6e7c:	00800044 	movi	r2,1
    6e80:	003dc706 	br	65a0 <__alt_data_end+0xfc0065a0>
    6e84:	d8c00217 	ldw	r3,8(sp)
    6e88:	00800d84 	movi	r2,54
    6e8c:	dd400a17 	ldw	r21,40(sp)
    6e90:	10c5c83a 	sub	r2,r2,r3
    6e94:	dd000817 	ldw	r20,32(sp)
    6e98:	003d4c06 	br	63cc <__alt_data_end+0xfc0063cc>
    6e9c:	dc800f15 	stw	r18,60(sp)
    6ea0:	dcc01015 	stw	r19,64(sp)
    6ea4:	04000084 	movi	r16,2
    6ea8:	003bed06 	br	5e60 <__alt_data_end+0xfc005e60>
    6eac:	d9000617 	ldw	r4,24(sp)
    6eb0:	203f0d26 	beq	r4,zero,6ae8 <__alt_data_end+0xfc006ae8>
    6eb4:	d9800c17 	ldw	r6,48(sp)
    6eb8:	01bcab0e 	bge	zero,r6,6168 <__alt_data_end+0xfc006168>
    6ebc:	d9401017 	ldw	r5,64(sp)
    6ec0:	d9000f17 	ldw	r4,60(sp)
    6ec4:	000d883a 	mov	r6,zero
    6ec8:	01d00934 	movhi	r7,16420
    6ecc:	000ea900 	call	ea90 <__muldf3>
    6ed0:	81000044 	addi	r4,r16,1
    6ed4:	d8800f15 	stw	r2,60(sp)
    6ed8:	d8c01015 	stw	r3,64(sp)
    6edc:	000fc780 	call	fc78 <__floatsidf>
    6ee0:	d9800f17 	ldw	r6,60(sp)
    6ee4:	d9c01017 	ldw	r7,64(sp)
    6ee8:	1009883a 	mov	r4,r2
    6eec:	180b883a 	mov	r5,r3
    6ef0:	000ea900 	call	ea90 <__muldf3>
    6ef4:	01d00734 	movhi	r7,16412
    6ef8:	000d883a 	mov	r6,zero
    6efc:	1009883a 	mov	r4,r2
    6f00:	180b883a 	mov	r5,r3
    6f04:	000d5bc0 	call	d5bc <__adddf3>
    6f08:	d9c00517 	ldw	r7,20(sp)
    6f0c:	047f3034 	movhi	r17,64704
    6f10:	1021883a 	mov	r16,r2
    6f14:	39ffffc4 	addi	r7,r7,-1
    6f18:	d9c01315 	stw	r7,76(sp)
    6f1c:	1c63883a 	add	r17,r3,r17
    6f20:	db000c17 	ldw	r12,48(sp)
    6f24:	003bea06 	br	5ed0 <__alt_data_end+0xfc005ed0>
    6f28:	dc000915 	stw	r16,36(sp)
    6f2c:	003e0e06 	br	6768 <__alt_data_end+0xfc006768>
    6f30:	01000e44 	movi	r4,57
    6f34:	8825883a 	mov	r18,r17
    6f38:	9dc00044 	addi	r23,r19,1
    6f3c:	99000005 	stb	r4,0(r19)
    6f40:	a023883a 	mov	r17,r20
    6f44:	dc000915 	stw	r16,36(sp)
    6f48:	003da406 	br	65dc <__alt_data_end+0xfc0065dc>
    6f4c:	d9801417 	ldw	r6,80(sp)
    6f50:	d9c01517 	ldw	r7,84(sp)
    6f54:	0009883a 	mov	r4,zero
    6f58:	014ff834 	movhi	r5,16352
    6f5c:	000f2fc0 	call	f2fc <__subdf3>
    6f60:	880d883a 	mov	r6,r17
    6f64:	a00f883a 	mov	r7,r20
    6f68:	1009883a 	mov	r4,r2
    6f6c:	180b883a 	mov	r5,r3
    6f70:	000e8c00 	call	e8c0 <__gedf2>
    6f74:	00bc7c0e 	bge	zero,r2,6168 <__alt_data_end+0xfc006168>
    6f78:	01000c04 	movi	r4,48
    6f7c:	00000106 	br	6f84 <_dtoa_r+0x1580>
    6f80:	102f883a 	mov	r23,r2
    6f84:	b8bfffc4 	addi	r2,r23,-1
    6f88:	10c00007 	ldb	r3,0(r2)
    6f8c:	193ffc26 	beq	r3,r4,6f80 <__alt_data_end+0xfc006f80>
    6f90:	d9801317 	ldw	r6,76(sp)
    6f94:	d9800515 	stw	r6,20(sp)
    6f98:	003c4406 	br	60ac <__alt_data_end+0xfc0060ac>
    6f9c:	d9801317 	ldw	r6,76(sp)
    6fa0:	d9800515 	stw	r6,20(sp)
    6fa4:	003cea06 	br	6350 <__alt_data_end+0xfc006350>
    6fa8:	dd800f17 	ldw	r22,60(sp)
    6fac:	dcc01017 	ldw	r19,64(sp)
    6fb0:	dc801217 	ldw	r18,72(sp)
    6fb4:	003c6c06 	br	6168 <__alt_data_end+0xfc006168>
    6fb8:	903e031e 	bne	r18,zero,67c8 <__alt_data_end+0xfc0067c8>
    6fbc:	003ebb06 	br	6aac <__alt_data_end+0xfc006aac>
    6fc0:	103e6c1e 	bne	r2,zero,6974 <__alt_data_end+0xfc006974>
    6fc4:	4080004c 	andi	r2,r8,1
    6fc8:	103e6a26 	beq	r2,zero,6974 <__alt_data_end+0xfc006974>
    6fcc:	003e6606 	br	6968 <__alt_data_end+0xfc006968>
    6fd0:	d8c00317 	ldw	r3,12(sp)
    6fd4:	00800084 	movi	r2,2
    6fd8:	10c02916 	blt	r2,r3,7080 <_dtoa_r+0x167c>
    6fdc:	d9000c17 	ldw	r4,48(sp)
    6fe0:	003e8806 	br	6a04 <__alt_data_end+0xfc006a04>
    6fe4:	04000084 	movi	r16,2
    6fe8:	003b9d06 	br	5e60 <__alt_data_end+0xfc005e60>
    6fec:	d9001317 	ldw	r4,76(sp)
    6ff0:	d9000515 	stw	r4,20(sp)
    6ff4:	003cd606 	br	6350 <__alt_data_end+0xfc006350>
    6ff8:	d8801317 	ldw	r2,76(sp)
    6ffc:	d8800515 	stw	r2,20(sp)
    7000:	003c2a06 	br	60ac <__alt_data_end+0xfc0060ac>
    7004:	d9800317 	ldw	r6,12(sp)
    7008:	00800084 	movi	r2,2
    700c:	11801516 	blt	r2,r6,7064 <_dtoa_r+0x1660>
    7010:	d9c00c17 	ldw	r7,48(sp)
    7014:	d9c00615 	stw	r7,24(sp)
    7018:	003df706 	br	67f8 <__alt_data_end+0xfc0067f8>
    701c:	193d3926 	beq	r3,r4,6504 <__alt_data_end+0xfc006504>
    7020:	00c00f04 	movi	r3,60
    7024:	1885c83a 	sub	r2,r3,r2
    7028:	003ddf06 	br	67a8 <__alt_data_end+0xfc0067a8>
    702c:	e009883a 	mov	r4,fp
    7030:	e0001115 	stw	zero,68(fp)
    7034:	000b883a 	mov	r5,zero
    7038:	00090bc0 	call	90bc <_Balloc>
    703c:	d8800715 	stw	r2,28(sp)
    7040:	d8c00717 	ldw	r3,28(sp)
    7044:	00bfffc4 	movi	r2,-1
    7048:	01000044 	movi	r4,1
    704c:	d8800c15 	stw	r2,48(sp)
    7050:	e0c01015 	stw	r3,64(fp)
    7054:	d9000b15 	stw	r4,44(sp)
    7058:	d8800615 	stw	r2,24(sp)
    705c:	d8002215 	stw	zero,136(sp)
    7060:	003c4106 	br	6168 <__alt_data_end+0xfc006168>
    7064:	d8c00c17 	ldw	r3,48(sp)
    7068:	d8c00615 	stw	r3,24(sp)
    706c:	003e7006 	br	6a30 <__alt_data_end+0xfc006a30>
    7070:	04400044 	movi	r17,1
    7074:	003b2006 	br	5cf8 <__alt_data_end+0xfc005cf8>
    7078:	000b883a 	mov	r5,zero
    707c:	003b3d06 	br	5d74 <__alt_data_end+0xfc005d74>
    7080:	d8800c17 	ldw	r2,48(sp)
    7084:	d8800615 	stw	r2,24(sp)
    7088:	003e6906 	br	6a30 <__alt_data_end+0xfc006a30>

0000708c <__sflush_r>:
    708c:	2880030b 	ldhu	r2,12(r5)
    7090:	defffb04 	addi	sp,sp,-20
    7094:	dcc00315 	stw	r19,12(sp)
    7098:	dc400115 	stw	r17,4(sp)
    709c:	dfc00415 	stw	ra,16(sp)
    70a0:	dc800215 	stw	r18,8(sp)
    70a4:	dc000015 	stw	r16,0(sp)
    70a8:	10c0020c 	andi	r3,r2,8
    70ac:	2823883a 	mov	r17,r5
    70b0:	2027883a 	mov	r19,r4
    70b4:	1800311e 	bne	r3,zero,717c <__sflush_r+0xf0>
    70b8:	28c00117 	ldw	r3,4(r5)
    70bc:	10820014 	ori	r2,r2,2048
    70c0:	2880030d 	sth	r2,12(r5)
    70c4:	00c04b0e 	bge	zero,r3,71f4 <__sflush_r+0x168>
    70c8:	8a000a17 	ldw	r8,40(r17)
    70cc:	40002326 	beq	r8,zero,715c <__sflush_r+0xd0>
    70d0:	9c000017 	ldw	r16,0(r19)
    70d4:	10c4000c 	andi	r3,r2,4096
    70d8:	98000015 	stw	zero,0(r19)
    70dc:	18004826 	beq	r3,zero,7200 <__sflush_r+0x174>
    70e0:	89801417 	ldw	r6,80(r17)
    70e4:	10c0010c 	andi	r3,r2,4
    70e8:	18000626 	beq	r3,zero,7104 <__sflush_r+0x78>
    70ec:	88c00117 	ldw	r3,4(r17)
    70f0:	88800c17 	ldw	r2,48(r17)
    70f4:	30cdc83a 	sub	r6,r6,r3
    70f8:	10000226 	beq	r2,zero,7104 <__sflush_r+0x78>
    70fc:	88800f17 	ldw	r2,60(r17)
    7100:	308dc83a 	sub	r6,r6,r2
    7104:	89400717 	ldw	r5,28(r17)
    7108:	000f883a 	mov	r7,zero
    710c:	9809883a 	mov	r4,r19
    7110:	403ee83a 	callr	r8
    7114:	00ffffc4 	movi	r3,-1
    7118:	10c04426 	beq	r2,r3,722c <__sflush_r+0x1a0>
    711c:	88c0030b 	ldhu	r3,12(r17)
    7120:	89000417 	ldw	r4,16(r17)
    7124:	88000115 	stw	zero,4(r17)
    7128:	197dffcc 	andi	r5,r3,63487
    712c:	8940030d 	sth	r5,12(r17)
    7130:	89000015 	stw	r4,0(r17)
    7134:	18c4000c 	andi	r3,r3,4096
    7138:	18002c1e 	bne	r3,zero,71ec <__sflush_r+0x160>
    713c:	89400c17 	ldw	r5,48(r17)
    7140:	9c000015 	stw	r16,0(r19)
    7144:	28000526 	beq	r5,zero,715c <__sflush_r+0xd0>
    7148:	88801004 	addi	r2,r17,64
    714c:	28800226 	beq	r5,r2,7158 <__sflush_r+0xcc>
    7150:	9809883a 	mov	r4,r19
    7154:	00078080 	call	7808 <_free_r>
    7158:	88000c15 	stw	zero,48(r17)
    715c:	0005883a 	mov	r2,zero
    7160:	dfc00417 	ldw	ra,16(sp)
    7164:	dcc00317 	ldw	r19,12(sp)
    7168:	dc800217 	ldw	r18,8(sp)
    716c:	dc400117 	ldw	r17,4(sp)
    7170:	dc000017 	ldw	r16,0(sp)
    7174:	dec00504 	addi	sp,sp,20
    7178:	f800283a 	ret
    717c:	2c800417 	ldw	r18,16(r5)
    7180:	903ff626 	beq	r18,zero,715c <__alt_data_end+0xfc00715c>
    7184:	2c000017 	ldw	r16,0(r5)
    7188:	108000cc 	andi	r2,r2,3
    718c:	2c800015 	stw	r18,0(r5)
    7190:	84a1c83a 	sub	r16,r16,r18
    7194:	1000131e 	bne	r2,zero,71e4 <__sflush_r+0x158>
    7198:	28800517 	ldw	r2,20(r5)
    719c:	88800215 	stw	r2,8(r17)
    71a0:	04000316 	blt	zero,r16,71b0 <__sflush_r+0x124>
    71a4:	003fed06 	br	715c <__alt_data_end+0xfc00715c>
    71a8:	90a5883a 	add	r18,r18,r2
    71ac:	043feb0e 	bge	zero,r16,715c <__alt_data_end+0xfc00715c>
    71b0:	88800917 	ldw	r2,36(r17)
    71b4:	89400717 	ldw	r5,28(r17)
    71b8:	800f883a 	mov	r7,r16
    71bc:	900d883a 	mov	r6,r18
    71c0:	9809883a 	mov	r4,r19
    71c4:	103ee83a 	callr	r2
    71c8:	80a1c83a 	sub	r16,r16,r2
    71cc:	00bff616 	blt	zero,r2,71a8 <__alt_data_end+0xfc0071a8>
    71d0:	88c0030b 	ldhu	r3,12(r17)
    71d4:	00bfffc4 	movi	r2,-1
    71d8:	18c01014 	ori	r3,r3,64
    71dc:	88c0030d 	sth	r3,12(r17)
    71e0:	003fdf06 	br	7160 <__alt_data_end+0xfc007160>
    71e4:	0005883a 	mov	r2,zero
    71e8:	003fec06 	br	719c <__alt_data_end+0xfc00719c>
    71ec:	88801415 	stw	r2,80(r17)
    71f0:	003fd206 	br	713c <__alt_data_end+0xfc00713c>
    71f4:	28c00f17 	ldw	r3,60(r5)
    71f8:	00ffb316 	blt	zero,r3,70c8 <__alt_data_end+0xfc0070c8>
    71fc:	003fd706 	br	715c <__alt_data_end+0xfc00715c>
    7200:	89400717 	ldw	r5,28(r17)
    7204:	000d883a 	mov	r6,zero
    7208:	01c00044 	movi	r7,1
    720c:	9809883a 	mov	r4,r19
    7210:	403ee83a 	callr	r8
    7214:	100d883a 	mov	r6,r2
    7218:	00bfffc4 	movi	r2,-1
    721c:	30801426 	beq	r6,r2,7270 <__sflush_r+0x1e4>
    7220:	8880030b 	ldhu	r2,12(r17)
    7224:	8a000a17 	ldw	r8,40(r17)
    7228:	003fae06 	br	70e4 <__alt_data_end+0xfc0070e4>
    722c:	98c00017 	ldw	r3,0(r19)
    7230:	183fba26 	beq	r3,zero,711c <__alt_data_end+0xfc00711c>
    7234:	01000744 	movi	r4,29
    7238:	19000626 	beq	r3,r4,7254 <__sflush_r+0x1c8>
    723c:	01000584 	movi	r4,22
    7240:	19000426 	beq	r3,r4,7254 <__sflush_r+0x1c8>
    7244:	88c0030b 	ldhu	r3,12(r17)
    7248:	18c01014 	ori	r3,r3,64
    724c:	88c0030d 	sth	r3,12(r17)
    7250:	003fc306 	br	7160 <__alt_data_end+0xfc007160>
    7254:	8880030b 	ldhu	r2,12(r17)
    7258:	88c00417 	ldw	r3,16(r17)
    725c:	88000115 	stw	zero,4(r17)
    7260:	10bdffcc 	andi	r2,r2,63487
    7264:	8880030d 	sth	r2,12(r17)
    7268:	88c00015 	stw	r3,0(r17)
    726c:	003fb306 	br	713c <__alt_data_end+0xfc00713c>
    7270:	98800017 	ldw	r2,0(r19)
    7274:	103fea26 	beq	r2,zero,7220 <__alt_data_end+0xfc007220>
    7278:	00c00744 	movi	r3,29
    727c:	10c00226 	beq	r2,r3,7288 <__sflush_r+0x1fc>
    7280:	00c00584 	movi	r3,22
    7284:	10c0031e 	bne	r2,r3,7294 <__sflush_r+0x208>
    7288:	9c000015 	stw	r16,0(r19)
    728c:	0005883a 	mov	r2,zero
    7290:	003fb306 	br	7160 <__alt_data_end+0xfc007160>
    7294:	88c0030b 	ldhu	r3,12(r17)
    7298:	3005883a 	mov	r2,r6
    729c:	18c01014 	ori	r3,r3,64
    72a0:	88c0030d 	sth	r3,12(r17)
    72a4:	003fae06 	br	7160 <__alt_data_end+0xfc007160>

000072a8 <_fflush_r>:
    72a8:	defffd04 	addi	sp,sp,-12
    72ac:	dc000115 	stw	r16,4(sp)
    72b0:	dfc00215 	stw	ra,8(sp)
    72b4:	2021883a 	mov	r16,r4
    72b8:	20000226 	beq	r4,zero,72c4 <_fflush_r+0x1c>
    72bc:	20800e17 	ldw	r2,56(r4)
    72c0:	10000c26 	beq	r2,zero,72f4 <_fflush_r+0x4c>
    72c4:	2880030f 	ldh	r2,12(r5)
    72c8:	1000051e 	bne	r2,zero,72e0 <_fflush_r+0x38>
    72cc:	0005883a 	mov	r2,zero
    72d0:	dfc00217 	ldw	ra,8(sp)
    72d4:	dc000117 	ldw	r16,4(sp)
    72d8:	dec00304 	addi	sp,sp,12
    72dc:	f800283a 	ret
    72e0:	8009883a 	mov	r4,r16
    72e4:	dfc00217 	ldw	ra,8(sp)
    72e8:	dc000117 	ldw	r16,4(sp)
    72ec:	dec00304 	addi	sp,sp,12
    72f0:	000708c1 	jmpi	708c <__sflush_r>
    72f4:	d9400015 	stw	r5,0(sp)
    72f8:	00076940 	call	7694 <__sinit>
    72fc:	d9400017 	ldw	r5,0(sp)
    7300:	003ff006 	br	72c4 <__alt_data_end+0xfc0072c4>

00007304 <fflush>:
    7304:	20000526 	beq	r4,zero,731c <fflush+0x18>
    7308:	00800074 	movhi	r2,1
    730c:	109ac804 	addi	r2,r2,27424
    7310:	200b883a 	mov	r5,r4
    7314:	11000017 	ldw	r4,0(r2)
    7318:	00072a81 	jmpi	72a8 <_fflush_r>
    731c:	00800074 	movhi	r2,1
    7320:	109ac704 	addi	r2,r2,27420
    7324:	11000017 	ldw	r4,0(r2)
    7328:	01400034 	movhi	r5,0
    732c:	295caa04 	addi	r5,r5,29352
    7330:	00080a41 	jmpi	80a4 <_fwalk_reent>

00007334 <__fp_unlock>:
    7334:	0005883a 	mov	r2,zero
    7338:	f800283a 	ret

0000733c <_cleanup_r>:
    733c:	01400074 	movhi	r5,1
    7340:	29709004 	addi	r5,r5,-15808
    7344:	00080a41 	jmpi	80a4 <_fwalk_reent>

00007348 <__sinit.part.1>:
    7348:	defff704 	addi	sp,sp,-36
    734c:	00c00034 	movhi	r3,0
    7350:	dfc00815 	stw	ra,32(sp)
    7354:	ddc00715 	stw	r23,28(sp)
    7358:	dd800615 	stw	r22,24(sp)
    735c:	dd400515 	stw	r21,20(sp)
    7360:	dd000415 	stw	r20,16(sp)
    7364:	dcc00315 	stw	r19,12(sp)
    7368:	dc800215 	stw	r18,8(sp)
    736c:	dc400115 	stw	r17,4(sp)
    7370:	dc000015 	stw	r16,0(sp)
    7374:	18dccf04 	addi	r3,r3,29500
    7378:	24000117 	ldw	r16,4(r4)
    737c:	20c00f15 	stw	r3,60(r4)
    7380:	2080bb04 	addi	r2,r4,748
    7384:	00c000c4 	movi	r3,3
    7388:	20c0b915 	stw	r3,740(r4)
    738c:	2080ba15 	stw	r2,744(r4)
    7390:	2000b815 	stw	zero,736(r4)
    7394:	05c00204 	movi	r23,8
    7398:	00800104 	movi	r2,4
    739c:	2025883a 	mov	r18,r4
    73a0:	b80d883a 	mov	r6,r23
    73a4:	81001704 	addi	r4,r16,92
    73a8:	000b883a 	mov	r5,zero
    73ac:	80000015 	stw	zero,0(r16)
    73b0:	80000115 	stw	zero,4(r16)
    73b4:	80000215 	stw	zero,8(r16)
    73b8:	8080030d 	sth	r2,12(r16)
    73bc:	80001915 	stw	zero,100(r16)
    73c0:	8000038d 	sth	zero,14(r16)
    73c4:	80000415 	stw	zero,16(r16)
    73c8:	80000515 	stw	zero,20(r16)
    73cc:	80000615 	stw	zero,24(r16)
    73d0:	0008f940 	call	8f94 <memset>
    73d4:	05800074 	movhi	r22,1
    73d8:	94400217 	ldw	r17,8(r18)
    73dc:	05400074 	movhi	r21,1
    73e0:	05000074 	movhi	r20,1
    73e4:	04c00074 	movhi	r19,1
    73e8:	b5a9e804 	addi	r22,r22,-22624
    73ec:	ad69ff04 	addi	r21,r21,-22532
    73f0:	a52a1e04 	addi	r20,r20,-22408
    73f4:	9cea3504 	addi	r19,r19,-22316
    73f8:	85800815 	stw	r22,32(r16)
    73fc:	85400915 	stw	r21,36(r16)
    7400:	85000a15 	stw	r20,40(r16)
    7404:	84c00b15 	stw	r19,44(r16)
    7408:	84000715 	stw	r16,28(r16)
    740c:	00800284 	movi	r2,10
    7410:	8880030d 	sth	r2,12(r17)
    7414:	00800044 	movi	r2,1
    7418:	b80d883a 	mov	r6,r23
    741c:	89001704 	addi	r4,r17,92
    7420:	000b883a 	mov	r5,zero
    7424:	88000015 	stw	zero,0(r17)
    7428:	88000115 	stw	zero,4(r17)
    742c:	88000215 	stw	zero,8(r17)
    7430:	88001915 	stw	zero,100(r17)
    7434:	8880038d 	sth	r2,14(r17)
    7438:	88000415 	stw	zero,16(r17)
    743c:	88000515 	stw	zero,20(r17)
    7440:	88000615 	stw	zero,24(r17)
    7444:	0008f940 	call	8f94 <memset>
    7448:	94000317 	ldw	r16,12(r18)
    744c:	00800484 	movi	r2,18
    7450:	8c400715 	stw	r17,28(r17)
    7454:	8d800815 	stw	r22,32(r17)
    7458:	8d400915 	stw	r21,36(r17)
    745c:	8d000a15 	stw	r20,40(r17)
    7460:	8cc00b15 	stw	r19,44(r17)
    7464:	8080030d 	sth	r2,12(r16)
    7468:	00800084 	movi	r2,2
    746c:	80000015 	stw	zero,0(r16)
    7470:	80000115 	stw	zero,4(r16)
    7474:	80000215 	stw	zero,8(r16)
    7478:	80001915 	stw	zero,100(r16)
    747c:	8080038d 	sth	r2,14(r16)
    7480:	80000415 	stw	zero,16(r16)
    7484:	80000515 	stw	zero,20(r16)
    7488:	80000615 	stw	zero,24(r16)
    748c:	b80d883a 	mov	r6,r23
    7490:	000b883a 	mov	r5,zero
    7494:	81001704 	addi	r4,r16,92
    7498:	0008f940 	call	8f94 <memset>
    749c:	00800044 	movi	r2,1
    74a0:	84000715 	stw	r16,28(r16)
    74a4:	85800815 	stw	r22,32(r16)
    74a8:	85400915 	stw	r21,36(r16)
    74ac:	85000a15 	stw	r20,40(r16)
    74b0:	84c00b15 	stw	r19,44(r16)
    74b4:	90800e15 	stw	r2,56(r18)
    74b8:	dfc00817 	ldw	ra,32(sp)
    74bc:	ddc00717 	ldw	r23,28(sp)
    74c0:	dd800617 	ldw	r22,24(sp)
    74c4:	dd400517 	ldw	r21,20(sp)
    74c8:	dd000417 	ldw	r20,16(sp)
    74cc:	dcc00317 	ldw	r19,12(sp)
    74d0:	dc800217 	ldw	r18,8(sp)
    74d4:	dc400117 	ldw	r17,4(sp)
    74d8:	dc000017 	ldw	r16,0(sp)
    74dc:	dec00904 	addi	sp,sp,36
    74e0:	f800283a 	ret

000074e4 <__fp_lock>:
    74e4:	0005883a 	mov	r2,zero
    74e8:	f800283a 	ret

000074ec <__sfmoreglue>:
    74ec:	defffc04 	addi	sp,sp,-16
    74f0:	dc800215 	stw	r18,8(sp)
    74f4:	2825883a 	mov	r18,r5
    74f8:	dc000015 	stw	r16,0(sp)
    74fc:	01401a04 	movi	r5,104
    7500:	2021883a 	mov	r16,r4
    7504:	913fffc4 	addi	r4,r18,-1
    7508:	dfc00315 	stw	ra,12(sp)
    750c:	dc400115 	stw	r17,4(sp)
    7510:	00030d40 	call	30d4 <__mulsi3>
    7514:	8009883a 	mov	r4,r16
    7518:	11401d04 	addi	r5,r2,116
    751c:	1023883a 	mov	r17,r2
    7520:	00084000 	call	8400 <_malloc_r>
    7524:	1021883a 	mov	r16,r2
    7528:	10000726 	beq	r2,zero,7548 <__sfmoreglue+0x5c>
    752c:	11000304 	addi	r4,r2,12
    7530:	10000015 	stw	zero,0(r2)
    7534:	14800115 	stw	r18,4(r2)
    7538:	11000215 	stw	r4,8(r2)
    753c:	89801a04 	addi	r6,r17,104
    7540:	000b883a 	mov	r5,zero
    7544:	0008f940 	call	8f94 <memset>
    7548:	8005883a 	mov	r2,r16
    754c:	dfc00317 	ldw	ra,12(sp)
    7550:	dc800217 	ldw	r18,8(sp)
    7554:	dc400117 	ldw	r17,4(sp)
    7558:	dc000017 	ldw	r16,0(sp)
    755c:	dec00404 	addi	sp,sp,16
    7560:	f800283a 	ret

00007564 <__sfp>:
    7564:	defffb04 	addi	sp,sp,-20
    7568:	dc000015 	stw	r16,0(sp)
    756c:	04000074 	movhi	r16,1
    7570:	841ac704 	addi	r16,r16,27420
    7574:	dcc00315 	stw	r19,12(sp)
    7578:	2027883a 	mov	r19,r4
    757c:	81000017 	ldw	r4,0(r16)
    7580:	dfc00415 	stw	ra,16(sp)
    7584:	dc800215 	stw	r18,8(sp)
    7588:	20800e17 	ldw	r2,56(r4)
    758c:	dc400115 	stw	r17,4(sp)
    7590:	1000021e 	bne	r2,zero,759c <__sfp+0x38>
    7594:	00073480 	call	7348 <__sinit.part.1>
    7598:	81000017 	ldw	r4,0(r16)
    759c:	2480b804 	addi	r18,r4,736
    75a0:	047fffc4 	movi	r17,-1
    75a4:	91000117 	ldw	r4,4(r18)
    75a8:	94000217 	ldw	r16,8(r18)
    75ac:	213fffc4 	addi	r4,r4,-1
    75b0:	20000a16 	blt	r4,zero,75dc <__sfp+0x78>
    75b4:	8080030f 	ldh	r2,12(r16)
    75b8:	10000c26 	beq	r2,zero,75ec <__sfp+0x88>
    75bc:	80c01d04 	addi	r3,r16,116
    75c0:	00000206 	br	75cc <__sfp+0x68>
    75c4:	18bfe60f 	ldh	r2,-104(r3)
    75c8:	10000826 	beq	r2,zero,75ec <__sfp+0x88>
    75cc:	213fffc4 	addi	r4,r4,-1
    75d0:	1c3ffd04 	addi	r16,r3,-12
    75d4:	18c01a04 	addi	r3,r3,104
    75d8:	247ffa1e 	bne	r4,r17,75c4 <__alt_data_end+0xfc0075c4>
    75dc:	90800017 	ldw	r2,0(r18)
    75e0:	10001d26 	beq	r2,zero,7658 <__sfp+0xf4>
    75e4:	1025883a 	mov	r18,r2
    75e8:	003fee06 	br	75a4 <__alt_data_end+0xfc0075a4>
    75ec:	00bfffc4 	movi	r2,-1
    75f0:	8080038d 	sth	r2,14(r16)
    75f4:	00800044 	movi	r2,1
    75f8:	8080030d 	sth	r2,12(r16)
    75fc:	80001915 	stw	zero,100(r16)
    7600:	80000015 	stw	zero,0(r16)
    7604:	80000215 	stw	zero,8(r16)
    7608:	80000115 	stw	zero,4(r16)
    760c:	80000415 	stw	zero,16(r16)
    7610:	80000515 	stw	zero,20(r16)
    7614:	80000615 	stw	zero,24(r16)
    7618:	01800204 	movi	r6,8
    761c:	000b883a 	mov	r5,zero
    7620:	81001704 	addi	r4,r16,92
    7624:	0008f940 	call	8f94 <memset>
    7628:	8005883a 	mov	r2,r16
    762c:	80000c15 	stw	zero,48(r16)
    7630:	80000d15 	stw	zero,52(r16)
    7634:	80001115 	stw	zero,68(r16)
    7638:	80001215 	stw	zero,72(r16)
    763c:	dfc00417 	ldw	ra,16(sp)
    7640:	dcc00317 	ldw	r19,12(sp)
    7644:	dc800217 	ldw	r18,8(sp)
    7648:	dc400117 	ldw	r17,4(sp)
    764c:	dc000017 	ldw	r16,0(sp)
    7650:	dec00504 	addi	sp,sp,20
    7654:	f800283a 	ret
    7658:	01400104 	movi	r5,4
    765c:	9809883a 	mov	r4,r19
    7660:	00074ec0 	call	74ec <__sfmoreglue>
    7664:	90800015 	stw	r2,0(r18)
    7668:	103fde1e 	bne	r2,zero,75e4 <__alt_data_end+0xfc0075e4>
    766c:	00800304 	movi	r2,12
    7670:	98800015 	stw	r2,0(r19)
    7674:	0005883a 	mov	r2,zero
    7678:	003ff006 	br	763c <__alt_data_end+0xfc00763c>

0000767c <_cleanup>:
    767c:	00800074 	movhi	r2,1
    7680:	109ac704 	addi	r2,r2,27420
    7684:	11000017 	ldw	r4,0(r2)
    7688:	01400074 	movhi	r5,1
    768c:	29709004 	addi	r5,r5,-15808
    7690:	00080a41 	jmpi	80a4 <_fwalk_reent>

00007694 <__sinit>:
    7694:	20800e17 	ldw	r2,56(r4)
    7698:	10000126 	beq	r2,zero,76a0 <__sinit+0xc>
    769c:	f800283a 	ret
    76a0:	00073481 	jmpi	7348 <__sinit.part.1>

000076a4 <__sfp_lock_acquire>:
    76a4:	f800283a 	ret

000076a8 <__sfp_lock_release>:
    76a8:	f800283a 	ret

000076ac <__sinit_lock_acquire>:
    76ac:	f800283a 	ret

000076b0 <__sinit_lock_release>:
    76b0:	f800283a 	ret

000076b4 <__fp_lock_all>:
    76b4:	00800074 	movhi	r2,1
    76b8:	109ac804 	addi	r2,r2,27424
    76bc:	11000017 	ldw	r4,0(r2)
    76c0:	01400034 	movhi	r5,0
    76c4:	295d3904 	addi	r5,r5,29924
    76c8:	0007fe01 	jmpi	7fe0 <_fwalk>

000076cc <__fp_unlock_all>:
    76cc:	00800074 	movhi	r2,1
    76d0:	109ac804 	addi	r2,r2,27424
    76d4:	11000017 	ldw	r4,0(r2)
    76d8:	01400034 	movhi	r5,0
    76dc:	295ccd04 	addi	r5,r5,29492
    76e0:	0007fe01 	jmpi	7fe0 <_fwalk>

000076e4 <_malloc_trim_r>:
    76e4:	defffb04 	addi	sp,sp,-20
    76e8:	dcc00315 	stw	r19,12(sp)
    76ec:	04c00074 	movhi	r19,1
    76f0:	dc800215 	stw	r18,8(sp)
    76f4:	dc400115 	stw	r17,4(sp)
    76f8:	dc000015 	stw	r16,0(sp)
    76fc:	dfc00415 	stw	ra,16(sp)
    7700:	2821883a 	mov	r16,r5
    7704:	9cd53104 	addi	r19,r19,21700
    7708:	2025883a 	mov	r18,r4
    770c:	00103fc0 	call	103fc <__malloc_lock>
    7710:	98800217 	ldw	r2,8(r19)
    7714:	14400117 	ldw	r17,4(r2)
    7718:	00bfff04 	movi	r2,-4
    771c:	88a2703a 	and	r17,r17,r2
    7720:	8c21c83a 	sub	r16,r17,r16
    7724:	8403fbc4 	addi	r16,r16,4079
    7728:	8020d33a 	srli	r16,r16,12
    772c:	0083ffc4 	movi	r2,4095
    7730:	843fffc4 	addi	r16,r16,-1
    7734:	8020933a 	slli	r16,r16,12
    7738:	1400060e 	bge	r2,r16,7754 <_malloc_trim_r+0x70>
    773c:	000b883a 	mov	r5,zero
    7740:	9009883a 	mov	r4,r18
    7744:	000a74c0 	call	a74c <_sbrk_r>
    7748:	98c00217 	ldw	r3,8(r19)
    774c:	1c47883a 	add	r3,r3,r17
    7750:	10c00a26 	beq	r2,r3,777c <_malloc_trim_r+0x98>
    7754:	9009883a 	mov	r4,r18
    7758:	00104200 	call	10420 <__malloc_unlock>
    775c:	0005883a 	mov	r2,zero
    7760:	dfc00417 	ldw	ra,16(sp)
    7764:	dcc00317 	ldw	r19,12(sp)
    7768:	dc800217 	ldw	r18,8(sp)
    776c:	dc400117 	ldw	r17,4(sp)
    7770:	dc000017 	ldw	r16,0(sp)
    7774:	dec00504 	addi	sp,sp,20
    7778:	f800283a 	ret
    777c:	040bc83a 	sub	r5,zero,r16
    7780:	9009883a 	mov	r4,r18
    7784:	000a74c0 	call	a74c <_sbrk_r>
    7788:	00ffffc4 	movi	r3,-1
    778c:	10c00d26 	beq	r2,r3,77c4 <_malloc_trim_r+0xe0>
    7790:	00c000b4 	movhi	r3,2
    7794:	18e1d204 	addi	r3,r3,-30904
    7798:	18800017 	ldw	r2,0(r3)
    779c:	99000217 	ldw	r4,8(r19)
    77a0:	8c23c83a 	sub	r17,r17,r16
    77a4:	8c400054 	ori	r17,r17,1
    77a8:	1421c83a 	sub	r16,r2,r16
    77ac:	24400115 	stw	r17,4(r4)
    77b0:	9009883a 	mov	r4,r18
    77b4:	1c000015 	stw	r16,0(r3)
    77b8:	00104200 	call	10420 <__malloc_unlock>
    77bc:	00800044 	movi	r2,1
    77c0:	003fe706 	br	7760 <__alt_data_end+0xfc007760>
    77c4:	000b883a 	mov	r5,zero
    77c8:	9009883a 	mov	r4,r18
    77cc:	000a74c0 	call	a74c <_sbrk_r>
    77d0:	99000217 	ldw	r4,8(r19)
    77d4:	014003c4 	movi	r5,15
    77d8:	1107c83a 	sub	r3,r2,r4
    77dc:	28ffdd0e 	bge	r5,r3,7754 <__alt_data_end+0xfc007754>
    77e0:	01400074 	movhi	r5,1
    77e4:	295aca04 	addi	r5,r5,27432
    77e8:	29400017 	ldw	r5,0(r5)
    77ec:	18c00054 	ori	r3,r3,1
    77f0:	20c00115 	stw	r3,4(r4)
    77f4:	00c000b4 	movhi	r3,2
    77f8:	1145c83a 	sub	r2,r2,r5
    77fc:	18e1d204 	addi	r3,r3,-30904
    7800:	18800015 	stw	r2,0(r3)
    7804:	003fd306 	br	7754 <__alt_data_end+0xfc007754>

00007808 <_free_r>:
    7808:	28004126 	beq	r5,zero,7910 <_free_r+0x108>
    780c:	defffd04 	addi	sp,sp,-12
    7810:	dc400115 	stw	r17,4(sp)
    7814:	dc000015 	stw	r16,0(sp)
    7818:	2023883a 	mov	r17,r4
    781c:	2821883a 	mov	r16,r5
    7820:	dfc00215 	stw	ra,8(sp)
    7824:	00103fc0 	call	103fc <__malloc_lock>
    7828:	81ffff17 	ldw	r7,-4(r16)
    782c:	00bfff84 	movi	r2,-2
    7830:	01000074 	movhi	r4,1
    7834:	81bffe04 	addi	r6,r16,-8
    7838:	3884703a 	and	r2,r7,r2
    783c:	21153104 	addi	r4,r4,21700
    7840:	308b883a 	add	r5,r6,r2
    7844:	2a400117 	ldw	r9,4(r5)
    7848:	22000217 	ldw	r8,8(r4)
    784c:	00ffff04 	movi	r3,-4
    7850:	48c6703a 	and	r3,r9,r3
    7854:	2a005726 	beq	r5,r8,79b4 <_free_r+0x1ac>
    7858:	28c00115 	stw	r3,4(r5)
    785c:	39c0004c 	andi	r7,r7,1
    7860:	3800091e 	bne	r7,zero,7888 <_free_r+0x80>
    7864:	823ffe17 	ldw	r8,-8(r16)
    7868:	22400204 	addi	r9,r4,8
    786c:	320dc83a 	sub	r6,r6,r8
    7870:	31c00217 	ldw	r7,8(r6)
    7874:	1205883a 	add	r2,r2,r8
    7878:	3a406526 	beq	r7,r9,7a10 <_free_r+0x208>
    787c:	32000317 	ldw	r8,12(r6)
    7880:	3a000315 	stw	r8,12(r7)
    7884:	41c00215 	stw	r7,8(r8)
    7888:	28cf883a 	add	r7,r5,r3
    788c:	39c00117 	ldw	r7,4(r7)
    7890:	39c0004c 	andi	r7,r7,1
    7894:	38003a26 	beq	r7,zero,7980 <_free_r+0x178>
    7898:	10c00054 	ori	r3,r2,1
    789c:	30c00115 	stw	r3,4(r6)
    78a0:	3087883a 	add	r3,r6,r2
    78a4:	18800015 	stw	r2,0(r3)
    78a8:	00c07fc4 	movi	r3,511
    78ac:	18801936 	bltu	r3,r2,7914 <_free_r+0x10c>
    78b0:	1004d0fa 	srli	r2,r2,3
    78b4:	01c00044 	movi	r7,1
    78b8:	21400117 	ldw	r5,4(r4)
    78bc:	10c00044 	addi	r3,r2,1
    78c0:	18c7883a 	add	r3,r3,r3
    78c4:	1005d0ba 	srai	r2,r2,2
    78c8:	18c7883a 	add	r3,r3,r3
    78cc:	18c7883a 	add	r3,r3,r3
    78d0:	1907883a 	add	r3,r3,r4
    78d4:	3884983a 	sll	r2,r7,r2
    78d8:	19c00017 	ldw	r7,0(r3)
    78dc:	1a3ffe04 	addi	r8,r3,-8
    78e0:	1144b03a 	or	r2,r2,r5
    78e4:	32000315 	stw	r8,12(r6)
    78e8:	31c00215 	stw	r7,8(r6)
    78ec:	20800115 	stw	r2,4(r4)
    78f0:	19800015 	stw	r6,0(r3)
    78f4:	39800315 	stw	r6,12(r7)
    78f8:	8809883a 	mov	r4,r17
    78fc:	dfc00217 	ldw	ra,8(sp)
    7900:	dc400117 	ldw	r17,4(sp)
    7904:	dc000017 	ldw	r16,0(sp)
    7908:	dec00304 	addi	sp,sp,12
    790c:	00104201 	jmpi	10420 <__malloc_unlock>
    7910:	f800283a 	ret
    7914:	100ad27a 	srli	r5,r2,9
    7918:	00c00104 	movi	r3,4
    791c:	19404a36 	bltu	r3,r5,7a48 <_free_r+0x240>
    7920:	100ad1ba 	srli	r5,r2,6
    7924:	28c00e44 	addi	r3,r5,57
    7928:	18c7883a 	add	r3,r3,r3
    792c:	29400e04 	addi	r5,r5,56
    7930:	18c7883a 	add	r3,r3,r3
    7934:	18c7883a 	add	r3,r3,r3
    7938:	1909883a 	add	r4,r3,r4
    793c:	20c00017 	ldw	r3,0(r4)
    7940:	01c00074 	movhi	r7,1
    7944:	213ffe04 	addi	r4,r4,-8
    7948:	39d53104 	addi	r7,r7,21700
    794c:	20c04426 	beq	r4,r3,7a60 <_free_r+0x258>
    7950:	01ffff04 	movi	r7,-4
    7954:	19400117 	ldw	r5,4(r3)
    7958:	29ca703a 	and	r5,r5,r7
    795c:	1140022e 	bgeu	r2,r5,7968 <_free_r+0x160>
    7960:	18c00217 	ldw	r3,8(r3)
    7964:	20fffb1e 	bne	r4,r3,7954 <__alt_data_end+0xfc007954>
    7968:	19000317 	ldw	r4,12(r3)
    796c:	31000315 	stw	r4,12(r6)
    7970:	30c00215 	stw	r3,8(r6)
    7974:	21800215 	stw	r6,8(r4)
    7978:	19800315 	stw	r6,12(r3)
    797c:	003fde06 	br	78f8 <__alt_data_end+0xfc0078f8>
    7980:	29c00217 	ldw	r7,8(r5)
    7984:	10c5883a 	add	r2,r2,r3
    7988:	00c00074 	movhi	r3,1
    798c:	18d53304 	addi	r3,r3,21708
    7990:	38c03b26 	beq	r7,r3,7a80 <_free_r+0x278>
    7994:	2a000317 	ldw	r8,12(r5)
    7998:	11400054 	ori	r5,r2,1
    799c:	3087883a 	add	r3,r6,r2
    79a0:	3a000315 	stw	r8,12(r7)
    79a4:	41c00215 	stw	r7,8(r8)
    79a8:	31400115 	stw	r5,4(r6)
    79ac:	18800015 	stw	r2,0(r3)
    79b0:	003fbd06 	br	78a8 <__alt_data_end+0xfc0078a8>
    79b4:	39c0004c 	andi	r7,r7,1
    79b8:	10c5883a 	add	r2,r2,r3
    79bc:	3800071e 	bne	r7,zero,79dc <_free_r+0x1d4>
    79c0:	81fffe17 	ldw	r7,-8(r16)
    79c4:	31cdc83a 	sub	r6,r6,r7
    79c8:	30c00317 	ldw	r3,12(r6)
    79cc:	31400217 	ldw	r5,8(r6)
    79d0:	11c5883a 	add	r2,r2,r7
    79d4:	28c00315 	stw	r3,12(r5)
    79d8:	19400215 	stw	r5,8(r3)
    79dc:	10c00054 	ori	r3,r2,1
    79e0:	30c00115 	stw	r3,4(r6)
    79e4:	00c00074 	movhi	r3,1
    79e8:	18dacb04 	addi	r3,r3,27436
    79ec:	18c00017 	ldw	r3,0(r3)
    79f0:	21800215 	stw	r6,8(r4)
    79f4:	10ffc036 	bltu	r2,r3,78f8 <__alt_data_end+0xfc0078f8>
    79f8:	008000b4 	movhi	r2,2
    79fc:	10a1bf04 	addi	r2,r2,-30980
    7a00:	11400017 	ldw	r5,0(r2)
    7a04:	8809883a 	mov	r4,r17
    7a08:	00076e40 	call	76e4 <_malloc_trim_r>
    7a0c:	003fba06 	br	78f8 <__alt_data_end+0xfc0078f8>
    7a10:	28c9883a 	add	r4,r5,r3
    7a14:	21000117 	ldw	r4,4(r4)
    7a18:	2100004c 	andi	r4,r4,1
    7a1c:	2000391e 	bne	r4,zero,7b04 <_free_r+0x2fc>
    7a20:	29c00217 	ldw	r7,8(r5)
    7a24:	29000317 	ldw	r4,12(r5)
    7a28:	1885883a 	add	r2,r3,r2
    7a2c:	10c00054 	ori	r3,r2,1
    7a30:	39000315 	stw	r4,12(r7)
    7a34:	21c00215 	stw	r7,8(r4)
    7a38:	30c00115 	stw	r3,4(r6)
    7a3c:	308d883a 	add	r6,r6,r2
    7a40:	30800015 	stw	r2,0(r6)
    7a44:	003fac06 	br	78f8 <__alt_data_end+0xfc0078f8>
    7a48:	00c00504 	movi	r3,20
    7a4c:	19401536 	bltu	r3,r5,7aa4 <_free_r+0x29c>
    7a50:	28c01704 	addi	r3,r5,92
    7a54:	18c7883a 	add	r3,r3,r3
    7a58:	294016c4 	addi	r5,r5,91
    7a5c:	003fb406 	br	7930 <__alt_data_end+0xfc007930>
    7a60:	280bd0ba 	srai	r5,r5,2
    7a64:	00c00044 	movi	r3,1
    7a68:	38800117 	ldw	r2,4(r7)
    7a6c:	194a983a 	sll	r5,r3,r5
    7a70:	2007883a 	mov	r3,r4
    7a74:	2884b03a 	or	r2,r5,r2
    7a78:	38800115 	stw	r2,4(r7)
    7a7c:	003fbb06 	br	796c <__alt_data_end+0xfc00796c>
    7a80:	21800515 	stw	r6,20(r4)
    7a84:	21800415 	stw	r6,16(r4)
    7a88:	10c00054 	ori	r3,r2,1
    7a8c:	31c00315 	stw	r7,12(r6)
    7a90:	31c00215 	stw	r7,8(r6)
    7a94:	30c00115 	stw	r3,4(r6)
    7a98:	308d883a 	add	r6,r6,r2
    7a9c:	30800015 	stw	r2,0(r6)
    7aa0:	003f9506 	br	78f8 <__alt_data_end+0xfc0078f8>
    7aa4:	00c01504 	movi	r3,84
    7aa8:	19400536 	bltu	r3,r5,7ac0 <_free_r+0x2b8>
    7aac:	100ad33a 	srli	r5,r2,12
    7ab0:	28c01bc4 	addi	r3,r5,111
    7ab4:	18c7883a 	add	r3,r3,r3
    7ab8:	29401b84 	addi	r5,r5,110
    7abc:	003f9c06 	br	7930 <__alt_data_end+0xfc007930>
    7ac0:	00c05504 	movi	r3,340
    7ac4:	19400536 	bltu	r3,r5,7adc <_free_r+0x2d4>
    7ac8:	100ad3fa 	srli	r5,r2,15
    7acc:	28c01e04 	addi	r3,r5,120
    7ad0:	18c7883a 	add	r3,r3,r3
    7ad4:	29401dc4 	addi	r5,r5,119
    7ad8:	003f9506 	br	7930 <__alt_data_end+0xfc007930>
    7adc:	00c15504 	movi	r3,1364
    7ae0:	19400536 	bltu	r3,r5,7af8 <_free_r+0x2f0>
    7ae4:	100ad4ba 	srli	r5,r2,18
    7ae8:	28c01f44 	addi	r3,r5,125
    7aec:	18c7883a 	add	r3,r3,r3
    7af0:	29401f04 	addi	r5,r5,124
    7af4:	003f8e06 	br	7930 <__alt_data_end+0xfc007930>
    7af8:	00c03f84 	movi	r3,254
    7afc:	01401f84 	movi	r5,126
    7b00:	003f8b06 	br	7930 <__alt_data_end+0xfc007930>
    7b04:	10c00054 	ori	r3,r2,1
    7b08:	30c00115 	stw	r3,4(r6)
    7b0c:	308d883a 	add	r6,r6,r2
    7b10:	30800015 	stw	r2,0(r6)
    7b14:	003f7806 	br	78f8 <__alt_data_end+0xfc0078f8>

00007b18 <__sfvwrite_r>:
    7b18:	30800217 	ldw	r2,8(r6)
    7b1c:	10006726 	beq	r2,zero,7cbc <__sfvwrite_r+0x1a4>
    7b20:	28c0030b 	ldhu	r3,12(r5)
    7b24:	defff404 	addi	sp,sp,-48
    7b28:	dd400715 	stw	r21,28(sp)
    7b2c:	dd000615 	stw	r20,24(sp)
    7b30:	dc000215 	stw	r16,8(sp)
    7b34:	dfc00b15 	stw	ra,44(sp)
    7b38:	df000a15 	stw	fp,40(sp)
    7b3c:	ddc00915 	stw	r23,36(sp)
    7b40:	dd800815 	stw	r22,32(sp)
    7b44:	dcc00515 	stw	r19,20(sp)
    7b48:	dc800415 	stw	r18,16(sp)
    7b4c:	dc400315 	stw	r17,12(sp)
    7b50:	1880020c 	andi	r2,r3,8
    7b54:	2821883a 	mov	r16,r5
    7b58:	202b883a 	mov	r21,r4
    7b5c:	3029883a 	mov	r20,r6
    7b60:	10002726 	beq	r2,zero,7c00 <__sfvwrite_r+0xe8>
    7b64:	28800417 	ldw	r2,16(r5)
    7b68:	10002526 	beq	r2,zero,7c00 <__sfvwrite_r+0xe8>
    7b6c:	1880008c 	andi	r2,r3,2
    7b70:	a4400017 	ldw	r17,0(r20)
    7b74:	10002a26 	beq	r2,zero,7c20 <__sfvwrite_r+0x108>
    7b78:	05a00034 	movhi	r22,32768
    7b7c:	0027883a 	mov	r19,zero
    7b80:	0025883a 	mov	r18,zero
    7b84:	b5bf0004 	addi	r22,r22,-1024
    7b88:	980d883a 	mov	r6,r19
    7b8c:	a809883a 	mov	r4,r21
    7b90:	90004626 	beq	r18,zero,7cac <__sfvwrite_r+0x194>
    7b94:	900f883a 	mov	r7,r18
    7b98:	b480022e 	bgeu	r22,r18,7ba4 <__sfvwrite_r+0x8c>
    7b9c:	01e00034 	movhi	r7,32768
    7ba0:	39ff0004 	addi	r7,r7,-1024
    7ba4:	80800917 	ldw	r2,36(r16)
    7ba8:	81400717 	ldw	r5,28(r16)
    7bac:	103ee83a 	callr	r2
    7bb0:	00805a0e 	bge	zero,r2,7d1c <__sfvwrite_r+0x204>
    7bb4:	a0c00217 	ldw	r3,8(r20)
    7bb8:	98a7883a 	add	r19,r19,r2
    7bbc:	90a5c83a 	sub	r18,r18,r2
    7bc0:	1885c83a 	sub	r2,r3,r2
    7bc4:	a0800215 	stw	r2,8(r20)
    7bc8:	103fef1e 	bne	r2,zero,7b88 <__alt_data_end+0xfc007b88>
    7bcc:	0005883a 	mov	r2,zero
    7bd0:	dfc00b17 	ldw	ra,44(sp)
    7bd4:	df000a17 	ldw	fp,40(sp)
    7bd8:	ddc00917 	ldw	r23,36(sp)
    7bdc:	dd800817 	ldw	r22,32(sp)
    7be0:	dd400717 	ldw	r21,28(sp)
    7be4:	dd000617 	ldw	r20,24(sp)
    7be8:	dcc00517 	ldw	r19,20(sp)
    7bec:	dc800417 	ldw	r18,16(sp)
    7bf0:	dc400317 	ldw	r17,12(sp)
    7bf4:	dc000217 	ldw	r16,8(sp)
    7bf8:	dec00c04 	addi	sp,sp,48
    7bfc:	f800283a 	ret
    7c00:	800b883a 	mov	r5,r16
    7c04:	a809883a 	mov	r4,r21
    7c08:	00056880 	call	5688 <__swsetup_r>
    7c0c:	1000ee1e 	bne	r2,zero,7fc8 <__sfvwrite_r+0x4b0>
    7c10:	80c0030b 	ldhu	r3,12(r16)
    7c14:	a4400017 	ldw	r17,0(r20)
    7c18:	1880008c 	andi	r2,r3,2
    7c1c:	103fd61e 	bne	r2,zero,7b78 <__alt_data_end+0xfc007b78>
    7c20:	1880004c 	andi	r2,r3,1
    7c24:	1000421e 	bne	r2,zero,7d30 <__sfvwrite_r+0x218>
    7c28:	0039883a 	mov	fp,zero
    7c2c:	0025883a 	mov	r18,zero
    7c30:	90001a26 	beq	r18,zero,7c9c <__sfvwrite_r+0x184>
    7c34:	1880800c 	andi	r2,r3,512
    7c38:	84c00217 	ldw	r19,8(r16)
    7c3c:	10002126 	beq	r2,zero,7cc4 <__sfvwrite_r+0x1ac>
    7c40:	982f883a 	mov	r23,r19
    7c44:	94c09636 	bltu	r18,r19,7ea0 <__sfvwrite_r+0x388>
    7c48:	1881200c 	andi	r2,r3,1152
    7c4c:	1000a11e 	bne	r2,zero,7ed4 <__sfvwrite_r+0x3bc>
    7c50:	81000017 	ldw	r4,0(r16)
    7c54:	b80d883a 	mov	r6,r23
    7c58:	e00b883a 	mov	r5,fp
    7c5c:	0008e380 	call	8e38 <memmove>
    7c60:	80c00217 	ldw	r3,8(r16)
    7c64:	81000017 	ldw	r4,0(r16)
    7c68:	9005883a 	mov	r2,r18
    7c6c:	1ce7c83a 	sub	r19,r3,r19
    7c70:	25cf883a 	add	r7,r4,r23
    7c74:	84c00215 	stw	r19,8(r16)
    7c78:	81c00015 	stw	r7,0(r16)
    7c7c:	a0c00217 	ldw	r3,8(r20)
    7c80:	e0b9883a 	add	fp,fp,r2
    7c84:	90a5c83a 	sub	r18,r18,r2
    7c88:	18a7c83a 	sub	r19,r3,r2
    7c8c:	a4c00215 	stw	r19,8(r20)
    7c90:	983fce26 	beq	r19,zero,7bcc <__alt_data_end+0xfc007bcc>
    7c94:	80c0030b 	ldhu	r3,12(r16)
    7c98:	903fe61e 	bne	r18,zero,7c34 <__alt_data_end+0xfc007c34>
    7c9c:	8f000017 	ldw	fp,0(r17)
    7ca0:	8c800117 	ldw	r18,4(r17)
    7ca4:	8c400204 	addi	r17,r17,8
    7ca8:	003fe106 	br	7c30 <__alt_data_end+0xfc007c30>
    7cac:	8cc00017 	ldw	r19,0(r17)
    7cb0:	8c800117 	ldw	r18,4(r17)
    7cb4:	8c400204 	addi	r17,r17,8
    7cb8:	003fb306 	br	7b88 <__alt_data_end+0xfc007b88>
    7cbc:	0005883a 	mov	r2,zero
    7cc0:	f800283a 	ret
    7cc4:	81000017 	ldw	r4,0(r16)
    7cc8:	80800417 	ldw	r2,16(r16)
    7ccc:	11005a36 	bltu	r2,r4,7e38 <__sfvwrite_r+0x320>
    7cd0:	85c00517 	ldw	r23,20(r16)
    7cd4:	95c05836 	bltu	r18,r23,7e38 <__sfvwrite_r+0x320>
    7cd8:	00a00034 	movhi	r2,32768
    7cdc:	10bfffc4 	addi	r2,r2,-1
    7ce0:	9009883a 	mov	r4,r18
    7ce4:	1480012e 	bgeu	r2,r18,7cec <__sfvwrite_r+0x1d4>
    7ce8:	1009883a 	mov	r4,r2
    7cec:	b80b883a 	mov	r5,r23
    7cf0:	0002f200 	call	2f20 <__divsi3>
    7cf4:	b80b883a 	mov	r5,r23
    7cf8:	1009883a 	mov	r4,r2
    7cfc:	00030d40 	call	30d4 <__mulsi3>
    7d00:	81400717 	ldw	r5,28(r16)
    7d04:	80c00917 	ldw	r3,36(r16)
    7d08:	100f883a 	mov	r7,r2
    7d0c:	e00d883a 	mov	r6,fp
    7d10:	a809883a 	mov	r4,r21
    7d14:	183ee83a 	callr	r3
    7d18:	00bfd816 	blt	zero,r2,7c7c <__alt_data_end+0xfc007c7c>
    7d1c:	8080030b 	ldhu	r2,12(r16)
    7d20:	10801014 	ori	r2,r2,64
    7d24:	8080030d 	sth	r2,12(r16)
    7d28:	00bfffc4 	movi	r2,-1
    7d2c:	003fa806 	br	7bd0 <__alt_data_end+0xfc007bd0>
    7d30:	0027883a 	mov	r19,zero
    7d34:	0011883a 	mov	r8,zero
    7d38:	0039883a 	mov	fp,zero
    7d3c:	0025883a 	mov	r18,zero
    7d40:	90001f26 	beq	r18,zero,7dc0 <__sfvwrite_r+0x2a8>
    7d44:	40005a26 	beq	r8,zero,7eb0 <__sfvwrite_r+0x398>
    7d48:	982d883a 	mov	r22,r19
    7d4c:	94c0012e 	bgeu	r18,r19,7d54 <__sfvwrite_r+0x23c>
    7d50:	902d883a 	mov	r22,r18
    7d54:	81000017 	ldw	r4,0(r16)
    7d58:	80800417 	ldw	r2,16(r16)
    7d5c:	b02f883a 	mov	r23,r22
    7d60:	81c00517 	ldw	r7,20(r16)
    7d64:	1100032e 	bgeu	r2,r4,7d74 <__sfvwrite_r+0x25c>
    7d68:	80c00217 	ldw	r3,8(r16)
    7d6c:	38c7883a 	add	r3,r7,r3
    7d70:	1d801816 	blt	r3,r22,7dd4 <__sfvwrite_r+0x2bc>
    7d74:	b1c03e16 	blt	r22,r7,7e70 <__sfvwrite_r+0x358>
    7d78:	80800917 	ldw	r2,36(r16)
    7d7c:	81400717 	ldw	r5,28(r16)
    7d80:	e00d883a 	mov	r6,fp
    7d84:	da000115 	stw	r8,4(sp)
    7d88:	a809883a 	mov	r4,r21
    7d8c:	103ee83a 	callr	r2
    7d90:	102f883a 	mov	r23,r2
    7d94:	da000117 	ldw	r8,4(sp)
    7d98:	00bfe00e 	bge	zero,r2,7d1c <__alt_data_end+0xfc007d1c>
    7d9c:	9de7c83a 	sub	r19,r19,r23
    7da0:	98001f26 	beq	r19,zero,7e20 <__sfvwrite_r+0x308>
    7da4:	a0800217 	ldw	r2,8(r20)
    7da8:	e5f9883a 	add	fp,fp,r23
    7dac:	95e5c83a 	sub	r18,r18,r23
    7db0:	15efc83a 	sub	r23,r2,r23
    7db4:	a5c00215 	stw	r23,8(r20)
    7db8:	b83f8426 	beq	r23,zero,7bcc <__alt_data_end+0xfc007bcc>
    7dbc:	903fe11e 	bne	r18,zero,7d44 <__alt_data_end+0xfc007d44>
    7dc0:	8f000017 	ldw	fp,0(r17)
    7dc4:	8c800117 	ldw	r18,4(r17)
    7dc8:	0011883a 	mov	r8,zero
    7dcc:	8c400204 	addi	r17,r17,8
    7dd0:	003fdb06 	br	7d40 <__alt_data_end+0xfc007d40>
    7dd4:	180d883a 	mov	r6,r3
    7dd8:	e00b883a 	mov	r5,fp
    7ddc:	da000115 	stw	r8,4(sp)
    7de0:	d8c00015 	stw	r3,0(sp)
    7de4:	0008e380 	call	8e38 <memmove>
    7de8:	d8c00017 	ldw	r3,0(sp)
    7dec:	80800017 	ldw	r2,0(r16)
    7df0:	800b883a 	mov	r5,r16
    7df4:	a809883a 	mov	r4,r21
    7df8:	10c5883a 	add	r2,r2,r3
    7dfc:	80800015 	stw	r2,0(r16)
    7e00:	d8c00015 	stw	r3,0(sp)
    7e04:	00072a80 	call	72a8 <_fflush_r>
    7e08:	d8c00017 	ldw	r3,0(sp)
    7e0c:	da000117 	ldw	r8,4(sp)
    7e10:	103fc21e 	bne	r2,zero,7d1c <__alt_data_end+0xfc007d1c>
    7e14:	182f883a 	mov	r23,r3
    7e18:	9de7c83a 	sub	r19,r19,r23
    7e1c:	983fe11e 	bne	r19,zero,7da4 <__alt_data_end+0xfc007da4>
    7e20:	800b883a 	mov	r5,r16
    7e24:	a809883a 	mov	r4,r21
    7e28:	00072a80 	call	72a8 <_fflush_r>
    7e2c:	103fbb1e 	bne	r2,zero,7d1c <__alt_data_end+0xfc007d1c>
    7e30:	0011883a 	mov	r8,zero
    7e34:	003fdb06 	br	7da4 <__alt_data_end+0xfc007da4>
    7e38:	94c0012e 	bgeu	r18,r19,7e40 <__sfvwrite_r+0x328>
    7e3c:	9027883a 	mov	r19,r18
    7e40:	980d883a 	mov	r6,r19
    7e44:	e00b883a 	mov	r5,fp
    7e48:	0008e380 	call	8e38 <memmove>
    7e4c:	80800217 	ldw	r2,8(r16)
    7e50:	80c00017 	ldw	r3,0(r16)
    7e54:	14c5c83a 	sub	r2,r2,r19
    7e58:	1cc7883a 	add	r3,r3,r19
    7e5c:	80800215 	stw	r2,8(r16)
    7e60:	80c00015 	stw	r3,0(r16)
    7e64:	10004326 	beq	r2,zero,7f74 <__sfvwrite_r+0x45c>
    7e68:	9805883a 	mov	r2,r19
    7e6c:	003f8306 	br	7c7c <__alt_data_end+0xfc007c7c>
    7e70:	b00d883a 	mov	r6,r22
    7e74:	e00b883a 	mov	r5,fp
    7e78:	da000115 	stw	r8,4(sp)
    7e7c:	0008e380 	call	8e38 <memmove>
    7e80:	80800217 	ldw	r2,8(r16)
    7e84:	80c00017 	ldw	r3,0(r16)
    7e88:	da000117 	ldw	r8,4(sp)
    7e8c:	1585c83a 	sub	r2,r2,r22
    7e90:	1dad883a 	add	r22,r3,r22
    7e94:	80800215 	stw	r2,8(r16)
    7e98:	85800015 	stw	r22,0(r16)
    7e9c:	003fbf06 	br	7d9c <__alt_data_end+0xfc007d9c>
    7ea0:	81000017 	ldw	r4,0(r16)
    7ea4:	9027883a 	mov	r19,r18
    7ea8:	902f883a 	mov	r23,r18
    7eac:	003f6906 	br	7c54 <__alt_data_end+0xfc007c54>
    7eb0:	900d883a 	mov	r6,r18
    7eb4:	01400284 	movi	r5,10
    7eb8:	e009883a 	mov	r4,fp
    7ebc:	0008c0c0 	call	8c0c <memchr>
    7ec0:	10003e26 	beq	r2,zero,7fbc <__sfvwrite_r+0x4a4>
    7ec4:	10800044 	addi	r2,r2,1
    7ec8:	1727c83a 	sub	r19,r2,fp
    7ecc:	02000044 	movi	r8,1
    7ed0:	003f9d06 	br	7d48 <__alt_data_end+0xfc007d48>
    7ed4:	80800517 	ldw	r2,20(r16)
    7ed8:	81400417 	ldw	r5,16(r16)
    7edc:	81c00017 	ldw	r7,0(r16)
    7ee0:	10a7883a 	add	r19,r2,r2
    7ee4:	9885883a 	add	r2,r19,r2
    7ee8:	1026d7fa 	srli	r19,r2,31
    7eec:	396dc83a 	sub	r22,r7,r5
    7ef0:	b1000044 	addi	r4,r22,1
    7ef4:	9885883a 	add	r2,r19,r2
    7ef8:	1027d07a 	srai	r19,r2,1
    7efc:	2485883a 	add	r2,r4,r18
    7f00:	980d883a 	mov	r6,r19
    7f04:	9880022e 	bgeu	r19,r2,7f10 <__sfvwrite_r+0x3f8>
    7f08:	1027883a 	mov	r19,r2
    7f0c:	100d883a 	mov	r6,r2
    7f10:	18c1000c 	andi	r3,r3,1024
    7f14:	18001c26 	beq	r3,zero,7f88 <__sfvwrite_r+0x470>
    7f18:	300b883a 	mov	r5,r6
    7f1c:	a809883a 	mov	r4,r21
    7f20:	00084000 	call	8400 <_malloc_r>
    7f24:	102f883a 	mov	r23,r2
    7f28:	10002926 	beq	r2,zero,7fd0 <__sfvwrite_r+0x4b8>
    7f2c:	81400417 	ldw	r5,16(r16)
    7f30:	b00d883a 	mov	r6,r22
    7f34:	1009883a 	mov	r4,r2
    7f38:	0008cf00 	call	8cf0 <memcpy>
    7f3c:	8080030b 	ldhu	r2,12(r16)
    7f40:	00fedfc4 	movi	r3,-1153
    7f44:	10c4703a 	and	r2,r2,r3
    7f48:	10802014 	ori	r2,r2,128
    7f4c:	8080030d 	sth	r2,12(r16)
    7f50:	bd89883a 	add	r4,r23,r22
    7f54:	9d8fc83a 	sub	r7,r19,r22
    7f58:	85c00415 	stw	r23,16(r16)
    7f5c:	84c00515 	stw	r19,20(r16)
    7f60:	81000015 	stw	r4,0(r16)
    7f64:	9027883a 	mov	r19,r18
    7f68:	81c00215 	stw	r7,8(r16)
    7f6c:	902f883a 	mov	r23,r18
    7f70:	003f3806 	br	7c54 <__alt_data_end+0xfc007c54>
    7f74:	800b883a 	mov	r5,r16
    7f78:	a809883a 	mov	r4,r21
    7f7c:	00072a80 	call	72a8 <_fflush_r>
    7f80:	103fb926 	beq	r2,zero,7e68 <__alt_data_end+0xfc007e68>
    7f84:	003f6506 	br	7d1c <__alt_data_end+0xfc007d1c>
    7f88:	a809883a 	mov	r4,r21
    7f8c:	000a1740 	call	a174 <_realloc_r>
    7f90:	102f883a 	mov	r23,r2
    7f94:	103fee1e 	bne	r2,zero,7f50 <__alt_data_end+0xfc007f50>
    7f98:	81400417 	ldw	r5,16(r16)
    7f9c:	a809883a 	mov	r4,r21
    7fa0:	00078080 	call	7808 <_free_r>
    7fa4:	8080030b 	ldhu	r2,12(r16)
    7fa8:	00ffdfc4 	movi	r3,-129
    7fac:	1884703a 	and	r2,r3,r2
    7fb0:	00c00304 	movi	r3,12
    7fb4:	a8c00015 	stw	r3,0(r21)
    7fb8:	003f5906 	br	7d20 <__alt_data_end+0xfc007d20>
    7fbc:	94c00044 	addi	r19,r18,1
    7fc0:	02000044 	movi	r8,1
    7fc4:	003f6006 	br	7d48 <__alt_data_end+0xfc007d48>
    7fc8:	00bfffc4 	movi	r2,-1
    7fcc:	003f0006 	br	7bd0 <__alt_data_end+0xfc007bd0>
    7fd0:	00800304 	movi	r2,12
    7fd4:	a8800015 	stw	r2,0(r21)
    7fd8:	8080030b 	ldhu	r2,12(r16)
    7fdc:	003f5006 	br	7d20 <__alt_data_end+0xfc007d20>

00007fe0 <_fwalk>:
    7fe0:	defff704 	addi	sp,sp,-36
    7fe4:	dd000415 	stw	r20,16(sp)
    7fe8:	dfc00815 	stw	ra,32(sp)
    7fec:	ddc00715 	stw	r23,28(sp)
    7ff0:	dd800615 	stw	r22,24(sp)
    7ff4:	dd400515 	stw	r21,20(sp)
    7ff8:	dcc00315 	stw	r19,12(sp)
    7ffc:	dc800215 	stw	r18,8(sp)
    8000:	dc400115 	stw	r17,4(sp)
    8004:	dc000015 	stw	r16,0(sp)
    8008:	2500b804 	addi	r20,r4,736
    800c:	a0002326 	beq	r20,zero,809c <_fwalk+0xbc>
    8010:	282b883a 	mov	r21,r5
    8014:	002f883a 	mov	r23,zero
    8018:	05800044 	movi	r22,1
    801c:	04ffffc4 	movi	r19,-1
    8020:	a4400117 	ldw	r17,4(r20)
    8024:	a4800217 	ldw	r18,8(r20)
    8028:	8c7fffc4 	addi	r17,r17,-1
    802c:	88000d16 	blt	r17,zero,8064 <_fwalk+0x84>
    8030:	94000304 	addi	r16,r18,12
    8034:	94800384 	addi	r18,r18,14
    8038:	8080000b 	ldhu	r2,0(r16)
    803c:	8c7fffc4 	addi	r17,r17,-1
    8040:	813ffd04 	addi	r4,r16,-12
    8044:	b080042e 	bgeu	r22,r2,8058 <_fwalk+0x78>
    8048:	9080000f 	ldh	r2,0(r18)
    804c:	14c00226 	beq	r2,r19,8058 <_fwalk+0x78>
    8050:	a83ee83a 	callr	r21
    8054:	b8aeb03a 	or	r23,r23,r2
    8058:	84001a04 	addi	r16,r16,104
    805c:	94801a04 	addi	r18,r18,104
    8060:	8cfff51e 	bne	r17,r19,8038 <__alt_data_end+0xfc008038>
    8064:	a5000017 	ldw	r20,0(r20)
    8068:	a03fed1e 	bne	r20,zero,8020 <__alt_data_end+0xfc008020>
    806c:	b805883a 	mov	r2,r23
    8070:	dfc00817 	ldw	ra,32(sp)
    8074:	ddc00717 	ldw	r23,28(sp)
    8078:	dd800617 	ldw	r22,24(sp)
    807c:	dd400517 	ldw	r21,20(sp)
    8080:	dd000417 	ldw	r20,16(sp)
    8084:	dcc00317 	ldw	r19,12(sp)
    8088:	dc800217 	ldw	r18,8(sp)
    808c:	dc400117 	ldw	r17,4(sp)
    8090:	dc000017 	ldw	r16,0(sp)
    8094:	dec00904 	addi	sp,sp,36
    8098:	f800283a 	ret
    809c:	002f883a 	mov	r23,zero
    80a0:	003ff206 	br	806c <__alt_data_end+0xfc00806c>

000080a4 <_fwalk_reent>:
    80a4:	defff704 	addi	sp,sp,-36
    80a8:	dd000415 	stw	r20,16(sp)
    80ac:	dfc00815 	stw	ra,32(sp)
    80b0:	ddc00715 	stw	r23,28(sp)
    80b4:	dd800615 	stw	r22,24(sp)
    80b8:	dd400515 	stw	r21,20(sp)
    80bc:	dcc00315 	stw	r19,12(sp)
    80c0:	dc800215 	stw	r18,8(sp)
    80c4:	dc400115 	stw	r17,4(sp)
    80c8:	dc000015 	stw	r16,0(sp)
    80cc:	2500b804 	addi	r20,r4,736
    80d0:	a0002326 	beq	r20,zero,8160 <_fwalk_reent+0xbc>
    80d4:	282b883a 	mov	r21,r5
    80d8:	2027883a 	mov	r19,r4
    80dc:	002f883a 	mov	r23,zero
    80e0:	05800044 	movi	r22,1
    80e4:	04bfffc4 	movi	r18,-1
    80e8:	a4400117 	ldw	r17,4(r20)
    80ec:	a4000217 	ldw	r16,8(r20)
    80f0:	8c7fffc4 	addi	r17,r17,-1
    80f4:	88000c16 	blt	r17,zero,8128 <_fwalk_reent+0x84>
    80f8:	84000304 	addi	r16,r16,12
    80fc:	8080000b 	ldhu	r2,0(r16)
    8100:	8c7fffc4 	addi	r17,r17,-1
    8104:	817ffd04 	addi	r5,r16,-12
    8108:	b080052e 	bgeu	r22,r2,8120 <_fwalk_reent+0x7c>
    810c:	8080008f 	ldh	r2,2(r16)
    8110:	9809883a 	mov	r4,r19
    8114:	14800226 	beq	r2,r18,8120 <_fwalk_reent+0x7c>
    8118:	a83ee83a 	callr	r21
    811c:	b8aeb03a 	or	r23,r23,r2
    8120:	84001a04 	addi	r16,r16,104
    8124:	8cbff51e 	bne	r17,r18,80fc <__alt_data_end+0xfc0080fc>
    8128:	a5000017 	ldw	r20,0(r20)
    812c:	a03fee1e 	bne	r20,zero,80e8 <__alt_data_end+0xfc0080e8>
    8130:	b805883a 	mov	r2,r23
    8134:	dfc00817 	ldw	ra,32(sp)
    8138:	ddc00717 	ldw	r23,28(sp)
    813c:	dd800617 	ldw	r22,24(sp)
    8140:	dd400517 	ldw	r21,20(sp)
    8144:	dd000417 	ldw	r20,16(sp)
    8148:	dcc00317 	ldw	r19,12(sp)
    814c:	dc800217 	ldw	r18,8(sp)
    8150:	dc400117 	ldw	r17,4(sp)
    8154:	dc000017 	ldw	r16,0(sp)
    8158:	dec00904 	addi	sp,sp,36
    815c:	f800283a 	ret
    8160:	002f883a 	mov	r23,zero
    8164:	003ff206 	br	8130 <__alt_data_end+0xfc008130>

00008168 <_setlocale_r>:
    8168:	30001b26 	beq	r6,zero,81d8 <_setlocale_r+0x70>
    816c:	01400074 	movhi	r5,1
    8170:	defffe04 	addi	sp,sp,-8
    8174:	29535204 	addi	r5,r5,19784
    8178:	3009883a 	mov	r4,r6
    817c:	dc000015 	stw	r16,0(sp)
    8180:	dfc00115 	stw	ra,4(sp)
    8184:	3021883a 	mov	r16,r6
    8188:	000a8dc0 	call	a8dc <strcmp>
    818c:	1000061e 	bne	r2,zero,81a8 <_setlocale_r+0x40>
    8190:	00800074 	movhi	r2,1
    8194:	10935104 	addi	r2,r2,19780
    8198:	dfc00117 	ldw	ra,4(sp)
    819c:	dc000017 	ldw	r16,0(sp)
    81a0:	dec00204 	addi	sp,sp,8
    81a4:	f800283a 	ret
    81a8:	01400074 	movhi	r5,1
    81ac:	29535104 	addi	r5,r5,19780
    81b0:	8009883a 	mov	r4,r16
    81b4:	000a8dc0 	call	a8dc <strcmp>
    81b8:	103ff526 	beq	r2,zero,8190 <__alt_data_end+0xfc008190>
    81bc:	01400074 	movhi	r5,1
    81c0:	29533c04 	addi	r5,r5,19696
    81c4:	8009883a 	mov	r4,r16
    81c8:	000a8dc0 	call	a8dc <strcmp>
    81cc:	103ff026 	beq	r2,zero,8190 <__alt_data_end+0xfc008190>
    81d0:	0005883a 	mov	r2,zero
    81d4:	003ff006 	br	8198 <__alt_data_end+0xfc008198>
    81d8:	00800074 	movhi	r2,1
    81dc:	10935104 	addi	r2,r2,19780
    81e0:	f800283a 	ret

000081e4 <__locale_charset>:
    81e4:	00800074 	movhi	r2,1
    81e8:	10951b04 	addi	r2,r2,21612
    81ec:	f800283a 	ret

000081f0 <__locale_mb_cur_max>:
    81f0:	00800074 	movhi	r2,1
    81f4:	109ac904 	addi	r2,r2,27428
    81f8:	10800017 	ldw	r2,0(r2)
    81fc:	f800283a 	ret

00008200 <__locale_msgcharset>:
    8200:	00800074 	movhi	r2,1
    8204:	10951304 	addi	r2,r2,21580
    8208:	f800283a 	ret

0000820c <__locale_cjk_lang>:
    820c:	0005883a 	mov	r2,zero
    8210:	f800283a 	ret

00008214 <_localeconv_r>:
    8214:	00800074 	movhi	r2,1
    8218:	10952304 	addi	r2,r2,21644
    821c:	f800283a 	ret

00008220 <setlocale>:
    8220:	00800074 	movhi	r2,1
    8224:	109ac804 	addi	r2,r2,27424
    8228:	280d883a 	mov	r6,r5
    822c:	200b883a 	mov	r5,r4
    8230:	11000017 	ldw	r4,0(r2)
    8234:	00081681 	jmpi	8168 <_setlocale_r>

00008238 <localeconv>:
    8238:	00800074 	movhi	r2,1
    823c:	10952304 	addi	r2,r2,21644
    8240:	f800283a 	ret

00008244 <__smakebuf_r>:
    8244:	2880030b 	ldhu	r2,12(r5)
    8248:	10c0008c 	andi	r3,r2,2
    824c:	1800411e 	bne	r3,zero,8354 <__smakebuf_r+0x110>
    8250:	deffec04 	addi	sp,sp,-80
    8254:	dc000f15 	stw	r16,60(sp)
    8258:	2821883a 	mov	r16,r5
    825c:	2940038f 	ldh	r5,14(r5)
    8260:	dc401015 	stw	r17,64(sp)
    8264:	dfc01315 	stw	ra,76(sp)
    8268:	dcc01215 	stw	r19,72(sp)
    826c:	dc801115 	stw	r18,68(sp)
    8270:	2023883a 	mov	r17,r4
    8274:	28001c16 	blt	r5,zero,82e8 <__smakebuf_r+0xa4>
    8278:	d80d883a 	mov	r6,sp
    827c:	000c54c0 	call	c54c <_fstat_r>
    8280:	10001816 	blt	r2,zero,82e4 <__smakebuf_r+0xa0>
    8284:	d8800117 	ldw	r2,4(sp)
    8288:	00e00014 	movui	r3,32768
    828c:	10bc000c 	andi	r2,r2,61440
    8290:	14c80020 	cmpeqi	r19,r2,8192
    8294:	10c03726 	beq	r2,r3,8374 <__smakebuf_r+0x130>
    8298:	80c0030b 	ldhu	r3,12(r16)
    829c:	18c20014 	ori	r3,r3,2048
    82a0:	80c0030d 	sth	r3,12(r16)
    82a4:	00c80004 	movi	r3,8192
    82a8:	10c0521e 	bne	r2,r3,83f4 <__smakebuf_r+0x1b0>
    82ac:	8140038f 	ldh	r5,14(r16)
    82b0:	8809883a 	mov	r4,r17
    82b4:	000c5a80 	call	c5a8 <_isatty_r>
    82b8:	10004c26 	beq	r2,zero,83ec <__smakebuf_r+0x1a8>
    82bc:	8080030b 	ldhu	r2,12(r16)
    82c0:	80c010c4 	addi	r3,r16,67
    82c4:	80c00015 	stw	r3,0(r16)
    82c8:	10800054 	ori	r2,r2,1
    82cc:	8080030d 	sth	r2,12(r16)
    82d0:	00800044 	movi	r2,1
    82d4:	80c00415 	stw	r3,16(r16)
    82d8:	80800515 	stw	r2,20(r16)
    82dc:	04810004 	movi	r18,1024
    82e0:	00000706 	br	8300 <__smakebuf_r+0xbc>
    82e4:	8080030b 	ldhu	r2,12(r16)
    82e8:	10c0200c 	andi	r3,r2,128
    82ec:	18001f1e 	bne	r3,zero,836c <__smakebuf_r+0x128>
    82f0:	04810004 	movi	r18,1024
    82f4:	10820014 	ori	r2,r2,2048
    82f8:	8080030d 	sth	r2,12(r16)
    82fc:	0027883a 	mov	r19,zero
    8300:	900b883a 	mov	r5,r18
    8304:	8809883a 	mov	r4,r17
    8308:	00084000 	call	8400 <_malloc_r>
    830c:	10002c26 	beq	r2,zero,83c0 <__smakebuf_r+0x17c>
    8310:	80c0030b 	ldhu	r3,12(r16)
    8314:	01000034 	movhi	r4,0
    8318:	211ccf04 	addi	r4,r4,29500
    831c:	89000f15 	stw	r4,60(r17)
    8320:	18c02014 	ori	r3,r3,128
    8324:	80c0030d 	sth	r3,12(r16)
    8328:	80800015 	stw	r2,0(r16)
    832c:	80800415 	stw	r2,16(r16)
    8330:	84800515 	stw	r18,20(r16)
    8334:	98001a1e 	bne	r19,zero,83a0 <__smakebuf_r+0x15c>
    8338:	dfc01317 	ldw	ra,76(sp)
    833c:	dcc01217 	ldw	r19,72(sp)
    8340:	dc801117 	ldw	r18,68(sp)
    8344:	dc401017 	ldw	r17,64(sp)
    8348:	dc000f17 	ldw	r16,60(sp)
    834c:	dec01404 	addi	sp,sp,80
    8350:	f800283a 	ret
    8354:	288010c4 	addi	r2,r5,67
    8358:	28800015 	stw	r2,0(r5)
    835c:	28800415 	stw	r2,16(r5)
    8360:	00800044 	movi	r2,1
    8364:	28800515 	stw	r2,20(r5)
    8368:	f800283a 	ret
    836c:	04801004 	movi	r18,64
    8370:	003fe006 	br	82f4 <__alt_data_end+0xfc0082f4>
    8374:	81000a17 	ldw	r4,40(r16)
    8378:	00c00074 	movhi	r3,1
    837c:	18ea1e04 	addi	r3,r3,-22408
    8380:	20ffc51e 	bne	r4,r3,8298 <__alt_data_end+0xfc008298>
    8384:	8080030b 	ldhu	r2,12(r16)
    8388:	04810004 	movi	r18,1024
    838c:	84801315 	stw	r18,76(r16)
    8390:	1484b03a 	or	r2,r2,r18
    8394:	8080030d 	sth	r2,12(r16)
    8398:	0027883a 	mov	r19,zero
    839c:	003fd806 	br	8300 <__alt_data_end+0xfc008300>
    83a0:	8140038f 	ldh	r5,14(r16)
    83a4:	8809883a 	mov	r4,r17
    83a8:	000c5a80 	call	c5a8 <_isatty_r>
    83ac:	103fe226 	beq	r2,zero,8338 <__alt_data_end+0xfc008338>
    83b0:	8080030b 	ldhu	r2,12(r16)
    83b4:	10800054 	ori	r2,r2,1
    83b8:	8080030d 	sth	r2,12(r16)
    83bc:	003fde06 	br	8338 <__alt_data_end+0xfc008338>
    83c0:	8080030b 	ldhu	r2,12(r16)
    83c4:	10c0800c 	andi	r3,r2,512
    83c8:	183fdb1e 	bne	r3,zero,8338 <__alt_data_end+0xfc008338>
    83cc:	10800094 	ori	r2,r2,2
    83d0:	80c010c4 	addi	r3,r16,67
    83d4:	8080030d 	sth	r2,12(r16)
    83d8:	00800044 	movi	r2,1
    83dc:	80c00015 	stw	r3,0(r16)
    83e0:	80c00415 	stw	r3,16(r16)
    83e4:	80800515 	stw	r2,20(r16)
    83e8:	003fd306 	br	8338 <__alt_data_end+0xfc008338>
    83ec:	04810004 	movi	r18,1024
    83f0:	003fc306 	br	8300 <__alt_data_end+0xfc008300>
    83f4:	0027883a 	mov	r19,zero
    83f8:	04810004 	movi	r18,1024
    83fc:	003fc006 	br	8300 <__alt_data_end+0xfc008300>

00008400 <_malloc_r>:
    8400:	defff504 	addi	sp,sp,-44
    8404:	dc800315 	stw	r18,12(sp)
    8408:	dfc00a15 	stw	ra,40(sp)
    840c:	df000915 	stw	fp,36(sp)
    8410:	ddc00815 	stw	r23,32(sp)
    8414:	dd800715 	stw	r22,28(sp)
    8418:	dd400615 	stw	r21,24(sp)
    841c:	dd000515 	stw	r20,20(sp)
    8420:	dcc00415 	stw	r19,16(sp)
    8424:	dc400215 	stw	r17,8(sp)
    8428:	dc000115 	stw	r16,4(sp)
    842c:	288002c4 	addi	r2,r5,11
    8430:	00c00584 	movi	r3,22
    8434:	2025883a 	mov	r18,r4
    8438:	18807f2e 	bgeu	r3,r2,8638 <_malloc_r+0x238>
    843c:	047ffe04 	movi	r17,-8
    8440:	1462703a 	and	r17,r2,r17
    8444:	8800a316 	blt	r17,zero,86d4 <_malloc_r+0x2d4>
    8448:	8940a236 	bltu	r17,r5,86d4 <_malloc_r+0x2d4>
    844c:	00103fc0 	call	103fc <__malloc_lock>
    8450:	00807dc4 	movi	r2,503
    8454:	1441e92e 	bgeu	r2,r17,8bfc <_malloc_r+0x7fc>
    8458:	8804d27a 	srli	r2,r17,9
    845c:	1000a126 	beq	r2,zero,86e4 <_malloc_r+0x2e4>
    8460:	00c00104 	movi	r3,4
    8464:	18811e36 	bltu	r3,r2,88e0 <_malloc_r+0x4e0>
    8468:	8804d1ba 	srli	r2,r17,6
    846c:	12000e44 	addi	r8,r2,57
    8470:	11c00e04 	addi	r7,r2,56
    8474:	4209883a 	add	r4,r8,r8
    8478:	04c00074 	movhi	r19,1
    847c:	2109883a 	add	r4,r4,r4
    8480:	9cd53104 	addi	r19,r19,21700
    8484:	2109883a 	add	r4,r4,r4
    8488:	9909883a 	add	r4,r19,r4
    848c:	24000117 	ldw	r16,4(r4)
    8490:	213ffe04 	addi	r4,r4,-8
    8494:	24009726 	beq	r4,r16,86f4 <_malloc_r+0x2f4>
    8498:	80800117 	ldw	r2,4(r16)
    849c:	01bfff04 	movi	r6,-4
    84a0:	014003c4 	movi	r5,15
    84a4:	1184703a 	and	r2,r2,r6
    84a8:	1447c83a 	sub	r3,r2,r17
    84ac:	28c00716 	blt	r5,r3,84cc <_malloc_r+0xcc>
    84b0:	1800920e 	bge	r3,zero,86fc <_malloc_r+0x2fc>
    84b4:	84000317 	ldw	r16,12(r16)
    84b8:	24008e26 	beq	r4,r16,86f4 <_malloc_r+0x2f4>
    84bc:	80800117 	ldw	r2,4(r16)
    84c0:	1184703a 	and	r2,r2,r6
    84c4:	1447c83a 	sub	r3,r2,r17
    84c8:	28fff90e 	bge	r5,r3,84b0 <__alt_data_end+0xfc0084b0>
    84cc:	3809883a 	mov	r4,r7
    84d0:	01800074 	movhi	r6,1
    84d4:	9c000417 	ldw	r16,16(r19)
    84d8:	31953104 	addi	r6,r6,21700
    84dc:	32000204 	addi	r8,r6,8
    84e0:	82013426 	beq	r16,r8,89b4 <_malloc_r+0x5b4>
    84e4:	80c00117 	ldw	r3,4(r16)
    84e8:	00bfff04 	movi	r2,-4
    84ec:	188e703a 	and	r7,r3,r2
    84f0:	3c45c83a 	sub	r2,r7,r17
    84f4:	00c003c4 	movi	r3,15
    84f8:	18811f16 	blt	r3,r2,8978 <_malloc_r+0x578>
    84fc:	32000515 	stw	r8,20(r6)
    8500:	32000415 	stw	r8,16(r6)
    8504:	10007f0e 	bge	r2,zero,8704 <_malloc_r+0x304>
    8508:	00807fc4 	movi	r2,511
    850c:	11c0fd36 	bltu	r2,r7,8904 <_malloc_r+0x504>
    8510:	3806d0fa 	srli	r3,r7,3
    8514:	01c00044 	movi	r7,1
    8518:	30800117 	ldw	r2,4(r6)
    851c:	19400044 	addi	r5,r3,1
    8520:	294b883a 	add	r5,r5,r5
    8524:	1807d0ba 	srai	r3,r3,2
    8528:	294b883a 	add	r5,r5,r5
    852c:	294b883a 	add	r5,r5,r5
    8530:	298b883a 	add	r5,r5,r6
    8534:	38c6983a 	sll	r3,r7,r3
    8538:	29c00017 	ldw	r7,0(r5)
    853c:	2a7ffe04 	addi	r9,r5,-8
    8540:	1886b03a 	or	r3,r3,r2
    8544:	82400315 	stw	r9,12(r16)
    8548:	81c00215 	stw	r7,8(r16)
    854c:	30c00115 	stw	r3,4(r6)
    8550:	2c000015 	stw	r16,0(r5)
    8554:	3c000315 	stw	r16,12(r7)
    8558:	2005d0ba 	srai	r2,r4,2
    855c:	01400044 	movi	r5,1
    8560:	288a983a 	sll	r5,r5,r2
    8564:	19406f36 	bltu	r3,r5,8724 <_malloc_r+0x324>
    8568:	28c4703a 	and	r2,r5,r3
    856c:	10000a1e 	bne	r2,zero,8598 <_malloc_r+0x198>
    8570:	00bfff04 	movi	r2,-4
    8574:	294b883a 	add	r5,r5,r5
    8578:	2088703a 	and	r4,r4,r2
    857c:	28c4703a 	and	r2,r5,r3
    8580:	21000104 	addi	r4,r4,4
    8584:	1000041e 	bne	r2,zero,8598 <_malloc_r+0x198>
    8588:	294b883a 	add	r5,r5,r5
    858c:	28c4703a 	and	r2,r5,r3
    8590:	21000104 	addi	r4,r4,4
    8594:	103ffc26 	beq	r2,zero,8588 <__alt_data_end+0xfc008588>
    8598:	02bfff04 	movi	r10,-4
    859c:	024003c4 	movi	r9,15
    85a0:	21800044 	addi	r6,r4,1
    85a4:	318d883a 	add	r6,r6,r6
    85a8:	318d883a 	add	r6,r6,r6
    85ac:	318d883a 	add	r6,r6,r6
    85b0:	998d883a 	add	r6,r19,r6
    85b4:	333ffe04 	addi	r12,r6,-8
    85b8:	2017883a 	mov	r11,r4
    85bc:	31800104 	addi	r6,r6,4
    85c0:	34000017 	ldw	r16,0(r6)
    85c4:	31fffd04 	addi	r7,r6,-12
    85c8:	81c0041e 	bne	r16,r7,85dc <_malloc_r+0x1dc>
    85cc:	0000fb06 	br	89bc <_malloc_r+0x5bc>
    85d0:	1801030e 	bge	r3,zero,89e0 <_malloc_r+0x5e0>
    85d4:	84000317 	ldw	r16,12(r16)
    85d8:	81c0f826 	beq	r16,r7,89bc <_malloc_r+0x5bc>
    85dc:	80800117 	ldw	r2,4(r16)
    85e0:	1284703a 	and	r2,r2,r10
    85e4:	1447c83a 	sub	r3,r2,r17
    85e8:	48fff90e 	bge	r9,r3,85d0 <__alt_data_end+0xfc0085d0>
    85ec:	80800317 	ldw	r2,12(r16)
    85f0:	81000217 	ldw	r4,8(r16)
    85f4:	89400054 	ori	r5,r17,1
    85f8:	81400115 	stw	r5,4(r16)
    85fc:	20800315 	stw	r2,12(r4)
    8600:	11000215 	stw	r4,8(r2)
    8604:	8463883a 	add	r17,r16,r17
    8608:	9c400515 	stw	r17,20(r19)
    860c:	9c400415 	stw	r17,16(r19)
    8610:	18800054 	ori	r2,r3,1
    8614:	88800115 	stw	r2,4(r17)
    8618:	8a000315 	stw	r8,12(r17)
    861c:	8a000215 	stw	r8,8(r17)
    8620:	88e3883a 	add	r17,r17,r3
    8624:	88c00015 	stw	r3,0(r17)
    8628:	9009883a 	mov	r4,r18
    862c:	00104200 	call	10420 <__malloc_unlock>
    8630:	80800204 	addi	r2,r16,8
    8634:	00001b06 	br	86a4 <_malloc_r+0x2a4>
    8638:	04400404 	movi	r17,16
    863c:	89402536 	bltu	r17,r5,86d4 <_malloc_r+0x2d4>
    8640:	00103fc0 	call	103fc <__malloc_lock>
    8644:	00800184 	movi	r2,6
    8648:	01000084 	movi	r4,2
    864c:	04c00074 	movhi	r19,1
    8650:	1085883a 	add	r2,r2,r2
    8654:	9cd53104 	addi	r19,r19,21700
    8658:	1085883a 	add	r2,r2,r2
    865c:	9885883a 	add	r2,r19,r2
    8660:	14000117 	ldw	r16,4(r2)
    8664:	10fffe04 	addi	r3,r2,-8
    8668:	80c0d926 	beq	r16,r3,89d0 <_malloc_r+0x5d0>
    866c:	80c00117 	ldw	r3,4(r16)
    8670:	81000317 	ldw	r4,12(r16)
    8674:	00bfff04 	movi	r2,-4
    8678:	1884703a 	and	r2,r3,r2
    867c:	81400217 	ldw	r5,8(r16)
    8680:	8085883a 	add	r2,r16,r2
    8684:	10c00117 	ldw	r3,4(r2)
    8688:	29000315 	stw	r4,12(r5)
    868c:	21400215 	stw	r5,8(r4)
    8690:	18c00054 	ori	r3,r3,1
    8694:	10c00115 	stw	r3,4(r2)
    8698:	9009883a 	mov	r4,r18
    869c:	00104200 	call	10420 <__malloc_unlock>
    86a0:	80800204 	addi	r2,r16,8
    86a4:	dfc00a17 	ldw	ra,40(sp)
    86a8:	df000917 	ldw	fp,36(sp)
    86ac:	ddc00817 	ldw	r23,32(sp)
    86b0:	dd800717 	ldw	r22,28(sp)
    86b4:	dd400617 	ldw	r21,24(sp)
    86b8:	dd000517 	ldw	r20,20(sp)
    86bc:	dcc00417 	ldw	r19,16(sp)
    86c0:	dc800317 	ldw	r18,12(sp)
    86c4:	dc400217 	ldw	r17,8(sp)
    86c8:	dc000117 	ldw	r16,4(sp)
    86cc:	dec00b04 	addi	sp,sp,44
    86d0:	f800283a 	ret
    86d4:	00800304 	movi	r2,12
    86d8:	90800015 	stw	r2,0(r18)
    86dc:	0005883a 	mov	r2,zero
    86e0:	003ff006 	br	86a4 <__alt_data_end+0xfc0086a4>
    86e4:	01002004 	movi	r4,128
    86e8:	02001004 	movi	r8,64
    86ec:	01c00fc4 	movi	r7,63
    86f0:	003f6106 	br	8478 <__alt_data_end+0xfc008478>
    86f4:	4009883a 	mov	r4,r8
    86f8:	003f7506 	br	84d0 <__alt_data_end+0xfc0084d0>
    86fc:	81000317 	ldw	r4,12(r16)
    8700:	003fde06 	br	867c <__alt_data_end+0xfc00867c>
    8704:	81c5883a 	add	r2,r16,r7
    8708:	11400117 	ldw	r5,4(r2)
    870c:	9009883a 	mov	r4,r18
    8710:	29400054 	ori	r5,r5,1
    8714:	11400115 	stw	r5,4(r2)
    8718:	00104200 	call	10420 <__malloc_unlock>
    871c:	80800204 	addi	r2,r16,8
    8720:	003fe006 	br	86a4 <__alt_data_end+0xfc0086a4>
    8724:	9c000217 	ldw	r16,8(r19)
    8728:	00bfff04 	movi	r2,-4
    872c:	85800117 	ldw	r22,4(r16)
    8730:	b0ac703a 	and	r22,r22,r2
    8734:	b4400336 	bltu	r22,r17,8744 <_malloc_r+0x344>
    8738:	b445c83a 	sub	r2,r22,r17
    873c:	00c003c4 	movi	r3,15
    8740:	18805d16 	blt	r3,r2,88b8 <_malloc_r+0x4b8>
    8744:	05c00074 	movhi	r23,1
    8748:	008000b4 	movhi	r2,2
    874c:	10a1bf04 	addi	r2,r2,-30980
    8750:	bddaca04 	addi	r23,r23,27432
    8754:	15400017 	ldw	r21,0(r2)
    8758:	b8c00017 	ldw	r3,0(r23)
    875c:	00bfffc4 	movi	r2,-1
    8760:	858d883a 	add	r6,r16,r22
    8764:	8d6b883a 	add	r21,r17,r21
    8768:	1880ea26 	beq	r3,r2,8b14 <_malloc_r+0x714>
    876c:	ad4403c4 	addi	r21,r21,4111
    8770:	00bc0004 	movi	r2,-4096
    8774:	a8aa703a 	and	r21,r21,r2
    8778:	a80b883a 	mov	r5,r21
    877c:	9009883a 	mov	r4,r18
    8780:	d9800015 	stw	r6,0(sp)
    8784:	000a74c0 	call	a74c <_sbrk_r>
    8788:	1029883a 	mov	r20,r2
    878c:	00bfffc4 	movi	r2,-1
    8790:	d9800017 	ldw	r6,0(sp)
    8794:	a080e826 	beq	r20,r2,8b38 <_malloc_r+0x738>
    8798:	a180a636 	bltu	r20,r6,8a34 <_malloc_r+0x634>
    879c:	070000b4 	movhi	fp,2
    87a0:	e721d204 	addi	fp,fp,-30904
    87a4:	e0800017 	ldw	r2,0(fp)
    87a8:	a887883a 	add	r3,r21,r2
    87ac:	e0c00015 	stw	r3,0(fp)
    87b0:	3500e626 	beq	r6,r20,8b4c <_malloc_r+0x74c>
    87b4:	b9000017 	ldw	r4,0(r23)
    87b8:	00bfffc4 	movi	r2,-1
    87bc:	2080ee26 	beq	r4,r2,8b78 <_malloc_r+0x778>
    87c0:	a185c83a 	sub	r2,r20,r6
    87c4:	10c5883a 	add	r2,r2,r3
    87c8:	e0800015 	stw	r2,0(fp)
    87cc:	a0c001cc 	andi	r3,r20,7
    87d0:	1800bc26 	beq	r3,zero,8ac4 <_malloc_r+0x6c4>
    87d4:	a0e9c83a 	sub	r20,r20,r3
    87d8:	00840204 	movi	r2,4104
    87dc:	a5000204 	addi	r20,r20,8
    87e0:	10c7c83a 	sub	r3,r2,r3
    87e4:	a545883a 	add	r2,r20,r21
    87e8:	1083ffcc 	andi	r2,r2,4095
    87ec:	18abc83a 	sub	r21,r3,r2
    87f0:	a80b883a 	mov	r5,r21
    87f4:	9009883a 	mov	r4,r18
    87f8:	000a74c0 	call	a74c <_sbrk_r>
    87fc:	00ffffc4 	movi	r3,-1
    8800:	10c0e126 	beq	r2,r3,8b88 <_malloc_r+0x788>
    8804:	1505c83a 	sub	r2,r2,r20
    8808:	1545883a 	add	r2,r2,r21
    880c:	10800054 	ori	r2,r2,1
    8810:	e0c00017 	ldw	r3,0(fp)
    8814:	9d000215 	stw	r20,8(r19)
    8818:	a0800115 	stw	r2,4(r20)
    881c:	a8c7883a 	add	r3,r21,r3
    8820:	e0c00015 	stw	r3,0(fp)
    8824:	84c00e26 	beq	r16,r19,8860 <_malloc_r+0x460>
    8828:	018003c4 	movi	r6,15
    882c:	3580a72e 	bgeu	r6,r22,8acc <_malloc_r+0x6cc>
    8830:	81400117 	ldw	r5,4(r16)
    8834:	013ffe04 	movi	r4,-8
    8838:	b0bffd04 	addi	r2,r22,-12
    883c:	1104703a 	and	r2,r2,r4
    8840:	2900004c 	andi	r4,r5,1
    8844:	2088b03a 	or	r4,r4,r2
    8848:	81000115 	stw	r4,4(r16)
    884c:	01400144 	movi	r5,5
    8850:	8089883a 	add	r4,r16,r2
    8854:	21400115 	stw	r5,4(r4)
    8858:	21400215 	stw	r5,8(r4)
    885c:	3080cd36 	bltu	r6,r2,8b94 <_malloc_r+0x794>
    8860:	008000b4 	movhi	r2,2
    8864:	10a1be04 	addi	r2,r2,-30984
    8868:	11000017 	ldw	r4,0(r2)
    886c:	20c0012e 	bgeu	r4,r3,8874 <_malloc_r+0x474>
    8870:	10c00015 	stw	r3,0(r2)
    8874:	008000b4 	movhi	r2,2
    8878:	10a1bd04 	addi	r2,r2,-30988
    887c:	11000017 	ldw	r4,0(r2)
    8880:	9c000217 	ldw	r16,8(r19)
    8884:	20c0012e 	bgeu	r4,r3,888c <_malloc_r+0x48c>
    8888:	10c00015 	stw	r3,0(r2)
    888c:	80c00117 	ldw	r3,4(r16)
    8890:	00bfff04 	movi	r2,-4
    8894:	1886703a 	and	r3,r3,r2
    8898:	1c45c83a 	sub	r2,r3,r17
    889c:	1c400236 	bltu	r3,r17,88a8 <_malloc_r+0x4a8>
    88a0:	00c003c4 	movi	r3,15
    88a4:	18800416 	blt	r3,r2,88b8 <_malloc_r+0x4b8>
    88a8:	9009883a 	mov	r4,r18
    88ac:	00104200 	call	10420 <__malloc_unlock>
    88b0:	0005883a 	mov	r2,zero
    88b4:	003f7b06 	br	86a4 <__alt_data_end+0xfc0086a4>
    88b8:	88c00054 	ori	r3,r17,1
    88bc:	80c00115 	stw	r3,4(r16)
    88c0:	8463883a 	add	r17,r16,r17
    88c4:	10800054 	ori	r2,r2,1
    88c8:	9c400215 	stw	r17,8(r19)
    88cc:	88800115 	stw	r2,4(r17)
    88d0:	9009883a 	mov	r4,r18
    88d4:	00104200 	call	10420 <__malloc_unlock>
    88d8:	80800204 	addi	r2,r16,8
    88dc:	003f7106 	br	86a4 <__alt_data_end+0xfc0086a4>
    88e0:	00c00504 	movi	r3,20
    88e4:	18804a2e 	bgeu	r3,r2,8a10 <_malloc_r+0x610>
    88e8:	00c01504 	movi	r3,84
    88ec:	18806e36 	bltu	r3,r2,8aa8 <_malloc_r+0x6a8>
    88f0:	8804d33a 	srli	r2,r17,12
    88f4:	12001bc4 	addi	r8,r2,111
    88f8:	11c01b84 	addi	r7,r2,110
    88fc:	4209883a 	add	r4,r8,r8
    8900:	003edd06 	br	8478 <__alt_data_end+0xfc008478>
    8904:	3804d27a 	srli	r2,r7,9
    8908:	00c00104 	movi	r3,4
    890c:	1880442e 	bgeu	r3,r2,8a20 <_malloc_r+0x620>
    8910:	00c00504 	movi	r3,20
    8914:	18808136 	bltu	r3,r2,8b1c <_malloc_r+0x71c>
    8918:	11401704 	addi	r5,r2,92
    891c:	10c016c4 	addi	r3,r2,91
    8920:	294b883a 	add	r5,r5,r5
    8924:	294b883a 	add	r5,r5,r5
    8928:	294b883a 	add	r5,r5,r5
    892c:	994b883a 	add	r5,r19,r5
    8930:	28800017 	ldw	r2,0(r5)
    8934:	01800074 	movhi	r6,1
    8938:	297ffe04 	addi	r5,r5,-8
    893c:	31953104 	addi	r6,r6,21700
    8940:	28806526 	beq	r5,r2,8ad8 <_malloc_r+0x6d8>
    8944:	01bfff04 	movi	r6,-4
    8948:	10c00117 	ldw	r3,4(r2)
    894c:	1986703a 	and	r3,r3,r6
    8950:	38c0022e 	bgeu	r7,r3,895c <_malloc_r+0x55c>
    8954:	10800217 	ldw	r2,8(r2)
    8958:	28bffb1e 	bne	r5,r2,8948 <__alt_data_end+0xfc008948>
    895c:	11400317 	ldw	r5,12(r2)
    8960:	98c00117 	ldw	r3,4(r19)
    8964:	81400315 	stw	r5,12(r16)
    8968:	80800215 	stw	r2,8(r16)
    896c:	2c000215 	stw	r16,8(r5)
    8970:	14000315 	stw	r16,12(r2)
    8974:	003ef806 	br	8558 <__alt_data_end+0xfc008558>
    8978:	88c00054 	ori	r3,r17,1
    897c:	80c00115 	stw	r3,4(r16)
    8980:	8463883a 	add	r17,r16,r17
    8984:	34400515 	stw	r17,20(r6)
    8988:	34400415 	stw	r17,16(r6)
    898c:	10c00054 	ori	r3,r2,1
    8990:	8a000315 	stw	r8,12(r17)
    8994:	8a000215 	stw	r8,8(r17)
    8998:	88c00115 	stw	r3,4(r17)
    899c:	88a3883a 	add	r17,r17,r2
    89a0:	88800015 	stw	r2,0(r17)
    89a4:	9009883a 	mov	r4,r18
    89a8:	00104200 	call	10420 <__malloc_unlock>
    89ac:	80800204 	addi	r2,r16,8
    89b0:	003f3c06 	br	86a4 <__alt_data_end+0xfc0086a4>
    89b4:	30c00117 	ldw	r3,4(r6)
    89b8:	003ee706 	br	8558 <__alt_data_end+0xfc008558>
    89bc:	5ac00044 	addi	r11,r11,1
    89c0:	588000cc 	andi	r2,r11,3
    89c4:	31800204 	addi	r6,r6,8
    89c8:	103efd1e 	bne	r2,zero,85c0 <__alt_data_end+0xfc0085c0>
    89cc:	00002406 	br	8a60 <_malloc_r+0x660>
    89d0:	14000317 	ldw	r16,12(r2)
    89d4:	143f251e 	bne	r2,r16,866c <__alt_data_end+0xfc00866c>
    89d8:	21000084 	addi	r4,r4,2
    89dc:	003ebc06 	br	84d0 <__alt_data_end+0xfc0084d0>
    89e0:	8085883a 	add	r2,r16,r2
    89e4:	10c00117 	ldw	r3,4(r2)
    89e8:	81000317 	ldw	r4,12(r16)
    89ec:	81400217 	ldw	r5,8(r16)
    89f0:	18c00054 	ori	r3,r3,1
    89f4:	10c00115 	stw	r3,4(r2)
    89f8:	29000315 	stw	r4,12(r5)
    89fc:	21400215 	stw	r5,8(r4)
    8a00:	9009883a 	mov	r4,r18
    8a04:	00104200 	call	10420 <__malloc_unlock>
    8a08:	80800204 	addi	r2,r16,8
    8a0c:	003f2506 	br	86a4 <__alt_data_end+0xfc0086a4>
    8a10:	12001704 	addi	r8,r2,92
    8a14:	11c016c4 	addi	r7,r2,91
    8a18:	4209883a 	add	r4,r8,r8
    8a1c:	003e9606 	br	8478 <__alt_data_end+0xfc008478>
    8a20:	3804d1ba 	srli	r2,r7,6
    8a24:	11400e44 	addi	r5,r2,57
    8a28:	10c00e04 	addi	r3,r2,56
    8a2c:	294b883a 	add	r5,r5,r5
    8a30:	003fbc06 	br	8924 <__alt_data_end+0xfc008924>
    8a34:	84ff5926 	beq	r16,r19,879c <__alt_data_end+0xfc00879c>
    8a38:	00800074 	movhi	r2,1
    8a3c:	10953104 	addi	r2,r2,21700
    8a40:	14000217 	ldw	r16,8(r2)
    8a44:	00bfff04 	movi	r2,-4
    8a48:	80c00117 	ldw	r3,4(r16)
    8a4c:	1886703a 	and	r3,r3,r2
    8a50:	003f9106 	br	8898 <__alt_data_end+0xfc008898>
    8a54:	60800217 	ldw	r2,8(r12)
    8a58:	213fffc4 	addi	r4,r4,-1
    8a5c:	1300651e 	bne	r2,r12,8bf4 <_malloc_r+0x7f4>
    8a60:	208000cc 	andi	r2,r4,3
    8a64:	633ffe04 	addi	r12,r12,-8
    8a68:	103ffa1e 	bne	r2,zero,8a54 <__alt_data_end+0xfc008a54>
    8a6c:	98800117 	ldw	r2,4(r19)
    8a70:	0146303a 	nor	r3,zero,r5
    8a74:	1884703a 	and	r2,r3,r2
    8a78:	98800115 	stw	r2,4(r19)
    8a7c:	294b883a 	add	r5,r5,r5
    8a80:	117f2836 	bltu	r2,r5,8724 <__alt_data_end+0xfc008724>
    8a84:	283f2726 	beq	r5,zero,8724 <__alt_data_end+0xfc008724>
    8a88:	2886703a 	and	r3,r5,r2
    8a8c:	5809883a 	mov	r4,r11
    8a90:	183ec31e 	bne	r3,zero,85a0 <__alt_data_end+0xfc0085a0>
    8a94:	294b883a 	add	r5,r5,r5
    8a98:	2886703a 	and	r3,r5,r2
    8a9c:	21000104 	addi	r4,r4,4
    8aa0:	183ffc26 	beq	r3,zero,8a94 <__alt_data_end+0xfc008a94>
    8aa4:	003ebe06 	br	85a0 <__alt_data_end+0xfc0085a0>
    8aa8:	00c05504 	movi	r3,340
    8aac:	18801236 	bltu	r3,r2,8af8 <_malloc_r+0x6f8>
    8ab0:	8804d3fa 	srli	r2,r17,15
    8ab4:	12001e04 	addi	r8,r2,120
    8ab8:	11c01dc4 	addi	r7,r2,119
    8abc:	4209883a 	add	r4,r8,r8
    8ac0:	003e6d06 	br	8478 <__alt_data_end+0xfc008478>
    8ac4:	00c40004 	movi	r3,4096
    8ac8:	003f4606 	br	87e4 <__alt_data_end+0xfc0087e4>
    8acc:	00800044 	movi	r2,1
    8ad0:	a0800115 	stw	r2,4(r20)
    8ad4:	003f7406 	br	88a8 <__alt_data_end+0xfc0088a8>
    8ad8:	1805d0ba 	srai	r2,r3,2
    8adc:	01c00044 	movi	r7,1
    8ae0:	30c00117 	ldw	r3,4(r6)
    8ae4:	388e983a 	sll	r7,r7,r2
    8ae8:	2805883a 	mov	r2,r5
    8aec:	38c6b03a 	or	r3,r7,r3
    8af0:	30c00115 	stw	r3,4(r6)
    8af4:	003f9b06 	br	8964 <__alt_data_end+0xfc008964>
    8af8:	00c15504 	movi	r3,1364
    8afc:	18801a36 	bltu	r3,r2,8b68 <_malloc_r+0x768>
    8b00:	8804d4ba 	srli	r2,r17,18
    8b04:	12001f44 	addi	r8,r2,125
    8b08:	11c01f04 	addi	r7,r2,124
    8b0c:	4209883a 	add	r4,r8,r8
    8b10:	003e5906 	br	8478 <__alt_data_end+0xfc008478>
    8b14:	ad400404 	addi	r21,r21,16
    8b18:	003f1706 	br	8778 <__alt_data_end+0xfc008778>
    8b1c:	00c01504 	movi	r3,84
    8b20:	18802336 	bltu	r3,r2,8bb0 <_malloc_r+0x7b0>
    8b24:	3804d33a 	srli	r2,r7,12
    8b28:	11401bc4 	addi	r5,r2,111
    8b2c:	10c01b84 	addi	r3,r2,110
    8b30:	294b883a 	add	r5,r5,r5
    8b34:	003f7b06 	br	8924 <__alt_data_end+0xfc008924>
    8b38:	9c000217 	ldw	r16,8(r19)
    8b3c:	00bfff04 	movi	r2,-4
    8b40:	80c00117 	ldw	r3,4(r16)
    8b44:	1886703a 	and	r3,r3,r2
    8b48:	003f5306 	br	8898 <__alt_data_end+0xfc008898>
    8b4c:	3083ffcc 	andi	r2,r6,4095
    8b50:	103f181e 	bne	r2,zero,87b4 <__alt_data_end+0xfc0087b4>
    8b54:	99000217 	ldw	r4,8(r19)
    8b58:	b545883a 	add	r2,r22,r21
    8b5c:	10800054 	ori	r2,r2,1
    8b60:	20800115 	stw	r2,4(r4)
    8b64:	003f3e06 	br	8860 <__alt_data_end+0xfc008860>
    8b68:	01003f84 	movi	r4,254
    8b6c:	02001fc4 	movi	r8,127
    8b70:	01c01f84 	movi	r7,126
    8b74:	003e4006 	br	8478 <__alt_data_end+0xfc008478>
    8b78:	00800074 	movhi	r2,1
    8b7c:	109aca04 	addi	r2,r2,27432
    8b80:	15000015 	stw	r20,0(r2)
    8b84:	003f1106 	br	87cc <__alt_data_end+0xfc0087cc>
    8b88:	00800044 	movi	r2,1
    8b8c:	002b883a 	mov	r21,zero
    8b90:	003f1f06 	br	8810 <__alt_data_end+0xfc008810>
    8b94:	81400204 	addi	r5,r16,8
    8b98:	9009883a 	mov	r4,r18
    8b9c:	00078080 	call	7808 <_free_r>
    8ba0:	008000b4 	movhi	r2,2
    8ba4:	10a1d204 	addi	r2,r2,-30904
    8ba8:	10c00017 	ldw	r3,0(r2)
    8bac:	003f2c06 	br	8860 <__alt_data_end+0xfc008860>
    8bb0:	00c05504 	movi	r3,340
    8bb4:	18800536 	bltu	r3,r2,8bcc <_malloc_r+0x7cc>
    8bb8:	3804d3fa 	srli	r2,r7,15
    8bbc:	11401e04 	addi	r5,r2,120
    8bc0:	10c01dc4 	addi	r3,r2,119
    8bc4:	294b883a 	add	r5,r5,r5
    8bc8:	003f5606 	br	8924 <__alt_data_end+0xfc008924>
    8bcc:	00c15504 	movi	r3,1364
    8bd0:	18800536 	bltu	r3,r2,8be8 <_malloc_r+0x7e8>
    8bd4:	3804d4ba 	srli	r2,r7,18
    8bd8:	11401f44 	addi	r5,r2,125
    8bdc:	10c01f04 	addi	r3,r2,124
    8be0:	294b883a 	add	r5,r5,r5
    8be4:	003f4f06 	br	8924 <__alt_data_end+0xfc008924>
    8be8:	01403f84 	movi	r5,254
    8bec:	00c01f84 	movi	r3,126
    8bf0:	003f4c06 	br	8924 <__alt_data_end+0xfc008924>
    8bf4:	98800117 	ldw	r2,4(r19)
    8bf8:	003fa006 	br	8a7c <__alt_data_end+0xfc008a7c>
    8bfc:	8808d0fa 	srli	r4,r17,3
    8c00:	20800044 	addi	r2,r4,1
    8c04:	1085883a 	add	r2,r2,r2
    8c08:	003e9006 	br	864c <__alt_data_end+0xfc00864c>

00008c0c <memchr>:
    8c0c:	208000cc 	andi	r2,r4,3
    8c10:	280f883a 	mov	r7,r5
    8c14:	10003426 	beq	r2,zero,8ce8 <memchr+0xdc>
    8c18:	30bfffc4 	addi	r2,r6,-1
    8c1c:	30001a26 	beq	r6,zero,8c88 <memchr+0x7c>
    8c20:	20c00003 	ldbu	r3,0(r4)
    8c24:	29803fcc 	andi	r6,r5,255
    8c28:	30c0051e 	bne	r6,r3,8c40 <memchr+0x34>
    8c2c:	00001806 	br	8c90 <memchr+0x84>
    8c30:	10001526 	beq	r2,zero,8c88 <memchr+0x7c>
    8c34:	20c00003 	ldbu	r3,0(r4)
    8c38:	10bfffc4 	addi	r2,r2,-1
    8c3c:	30c01426 	beq	r6,r3,8c90 <memchr+0x84>
    8c40:	21000044 	addi	r4,r4,1
    8c44:	20c000cc 	andi	r3,r4,3
    8c48:	183ff91e 	bne	r3,zero,8c30 <__alt_data_end+0xfc008c30>
    8c4c:	020000c4 	movi	r8,3
    8c50:	40801136 	bltu	r8,r2,8c98 <memchr+0x8c>
    8c54:	10000c26 	beq	r2,zero,8c88 <memchr+0x7c>
    8c58:	20c00003 	ldbu	r3,0(r4)
    8c5c:	29403fcc 	andi	r5,r5,255
    8c60:	28c00b26 	beq	r5,r3,8c90 <memchr+0x84>
    8c64:	20c00044 	addi	r3,r4,1
    8c68:	39803fcc 	andi	r6,r7,255
    8c6c:	2089883a 	add	r4,r4,r2
    8c70:	00000306 	br	8c80 <memchr+0x74>
    8c74:	18c00044 	addi	r3,r3,1
    8c78:	197fffc3 	ldbu	r5,-1(r3)
    8c7c:	31400526 	beq	r6,r5,8c94 <memchr+0x88>
    8c80:	1805883a 	mov	r2,r3
    8c84:	20fffb1e 	bne	r4,r3,8c74 <__alt_data_end+0xfc008c74>
    8c88:	0005883a 	mov	r2,zero
    8c8c:	f800283a 	ret
    8c90:	2005883a 	mov	r2,r4
    8c94:	f800283a 	ret
    8c98:	28c03fcc 	andi	r3,r5,255
    8c9c:	1812923a 	slli	r9,r3,8
    8ca0:	02ffbff4 	movhi	r11,65279
    8ca4:	02a02074 	movhi	r10,32897
    8ca8:	48d2b03a 	or	r9,r9,r3
    8cac:	4806943a 	slli	r3,r9,16
    8cb0:	5affbfc4 	addi	r11,r11,-257
    8cb4:	52a02004 	addi	r10,r10,-32640
    8cb8:	48d2b03a 	or	r9,r9,r3
    8cbc:	20c00017 	ldw	r3,0(r4)
    8cc0:	48c6f03a 	xor	r3,r9,r3
    8cc4:	1acd883a 	add	r6,r3,r11
    8cc8:	00c6303a 	nor	r3,zero,r3
    8ccc:	30c6703a 	and	r3,r6,r3
    8cd0:	1a86703a 	and	r3,r3,r10
    8cd4:	183fe01e 	bne	r3,zero,8c58 <__alt_data_end+0xfc008c58>
    8cd8:	10bfff04 	addi	r2,r2,-4
    8cdc:	21000104 	addi	r4,r4,4
    8ce0:	40bff636 	bltu	r8,r2,8cbc <__alt_data_end+0xfc008cbc>
    8ce4:	003fdb06 	br	8c54 <__alt_data_end+0xfc008c54>
    8ce8:	3005883a 	mov	r2,r6
    8cec:	003fd706 	br	8c4c <__alt_data_end+0xfc008c4c>

00008cf0 <memcpy>:
    8cf0:	defffd04 	addi	sp,sp,-12
    8cf4:	dfc00215 	stw	ra,8(sp)
    8cf8:	dc400115 	stw	r17,4(sp)
    8cfc:	dc000015 	stw	r16,0(sp)
    8d00:	00c003c4 	movi	r3,15
    8d04:	2005883a 	mov	r2,r4
    8d08:	1980452e 	bgeu	r3,r6,8e20 <memcpy+0x130>
    8d0c:	2906b03a 	or	r3,r5,r4
    8d10:	18c000cc 	andi	r3,r3,3
    8d14:	1800441e 	bne	r3,zero,8e28 <memcpy+0x138>
    8d18:	347ffc04 	addi	r17,r6,-16
    8d1c:	8822d13a 	srli	r17,r17,4
    8d20:	28c00104 	addi	r3,r5,4
    8d24:	23400104 	addi	r13,r4,4
    8d28:	8820913a 	slli	r16,r17,4
    8d2c:	2b000204 	addi	r12,r5,8
    8d30:	22c00204 	addi	r11,r4,8
    8d34:	84000504 	addi	r16,r16,20
    8d38:	2a800304 	addi	r10,r5,12
    8d3c:	22400304 	addi	r9,r4,12
    8d40:	2c21883a 	add	r16,r5,r16
    8d44:	2811883a 	mov	r8,r5
    8d48:	200f883a 	mov	r7,r4
    8d4c:	41000017 	ldw	r4,0(r8)
    8d50:	1fc00017 	ldw	ra,0(r3)
    8d54:	63c00017 	ldw	r15,0(r12)
    8d58:	39000015 	stw	r4,0(r7)
    8d5c:	53800017 	ldw	r14,0(r10)
    8d60:	6fc00015 	stw	ra,0(r13)
    8d64:	5bc00015 	stw	r15,0(r11)
    8d68:	4b800015 	stw	r14,0(r9)
    8d6c:	18c00404 	addi	r3,r3,16
    8d70:	39c00404 	addi	r7,r7,16
    8d74:	42000404 	addi	r8,r8,16
    8d78:	6b400404 	addi	r13,r13,16
    8d7c:	63000404 	addi	r12,r12,16
    8d80:	5ac00404 	addi	r11,r11,16
    8d84:	52800404 	addi	r10,r10,16
    8d88:	4a400404 	addi	r9,r9,16
    8d8c:	1c3fef1e 	bne	r3,r16,8d4c <__alt_data_end+0xfc008d4c>
    8d90:	89c00044 	addi	r7,r17,1
    8d94:	380e913a 	slli	r7,r7,4
    8d98:	310003cc 	andi	r4,r6,15
    8d9c:	02c000c4 	movi	r11,3
    8da0:	11c7883a 	add	r3,r2,r7
    8da4:	29cb883a 	add	r5,r5,r7
    8da8:	5900212e 	bgeu	r11,r4,8e30 <memcpy+0x140>
    8dac:	1813883a 	mov	r9,r3
    8db0:	2811883a 	mov	r8,r5
    8db4:	200f883a 	mov	r7,r4
    8db8:	42800017 	ldw	r10,0(r8)
    8dbc:	4a400104 	addi	r9,r9,4
    8dc0:	39ffff04 	addi	r7,r7,-4
    8dc4:	4abfff15 	stw	r10,-4(r9)
    8dc8:	42000104 	addi	r8,r8,4
    8dcc:	59fffa36 	bltu	r11,r7,8db8 <__alt_data_end+0xfc008db8>
    8dd0:	213fff04 	addi	r4,r4,-4
    8dd4:	2008d0ba 	srli	r4,r4,2
    8dd8:	318000cc 	andi	r6,r6,3
    8ddc:	21000044 	addi	r4,r4,1
    8de0:	2109883a 	add	r4,r4,r4
    8de4:	2109883a 	add	r4,r4,r4
    8de8:	1907883a 	add	r3,r3,r4
    8dec:	290b883a 	add	r5,r5,r4
    8df0:	30000626 	beq	r6,zero,8e0c <memcpy+0x11c>
    8df4:	198d883a 	add	r6,r3,r6
    8df8:	29c00003 	ldbu	r7,0(r5)
    8dfc:	18c00044 	addi	r3,r3,1
    8e00:	29400044 	addi	r5,r5,1
    8e04:	19ffffc5 	stb	r7,-1(r3)
    8e08:	19bffb1e 	bne	r3,r6,8df8 <__alt_data_end+0xfc008df8>
    8e0c:	dfc00217 	ldw	ra,8(sp)
    8e10:	dc400117 	ldw	r17,4(sp)
    8e14:	dc000017 	ldw	r16,0(sp)
    8e18:	dec00304 	addi	sp,sp,12
    8e1c:	f800283a 	ret
    8e20:	2007883a 	mov	r3,r4
    8e24:	003ff206 	br	8df0 <__alt_data_end+0xfc008df0>
    8e28:	2007883a 	mov	r3,r4
    8e2c:	003ff106 	br	8df4 <__alt_data_end+0xfc008df4>
    8e30:	200d883a 	mov	r6,r4
    8e34:	003fee06 	br	8df0 <__alt_data_end+0xfc008df0>

00008e38 <memmove>:
    8e38:	2005883a 	mov	r2,r4
    8e3c:	29000b2e 	bgeu	r5,r4,8e6c <memmove+0x34>
    8e40:	298f883a 	add	r7,r5,r6
    8e44:	21c0092e 	bgeu	r4,r7,8e6c <memmove+0x34>
    8e48:	2187883a 	add	r3,r4,r6
    8e4c:	198bc83a 	sub	r5,r3,r6
    8e50:	30004826 	beq	r6,zero,8f74 <memmove+0x13c>
    8e54:	39ffffc4 	addi	r7,r7,-1
    8e58:	39000003 	ldbu	r4,0(r7)
    8e5c:	18ffffc4 	addi	r3,r3,-1
    8e60:	19000005 	stb	r4,0(r3)
    8e64:	28fffb1e 	bne	r5,r3,8e54 <__alt_data_end+0xfc008e54>
    8e68:	f800283a 	ret
    8e6c:	00c003c4 	movi	r3,15
    8e70:	1980412e 	bgeu	r3,r6,8f78 <memmove+0x140>
    8e74:	2886b03a 	or	r3,r5,r2
    8e78:	18c000cc 	andi	r3,r3,3
    8e7c:	1800401e 	bne	r3,zero,8f80 <memmove+0x148>
    8e80:	33fffc04 	addi	r15,r6,-16
    8e84:	781ed13a 	srli	r15,r15,4
    8e88:	28c00104 	addi	r3,r5,4
    8e8c:	13400104 	addi	r13,r2,4
    8e90:	781c913a 	slli	r14,r15,4
    8e94:	2b000204 	addi	r12,r5,8
    8e98:	12c00204 	addi	r11,r2,8
    8e9c:	73800504 	addi	r14,r14,20
    8ea0:	2a800304 	addi	r10,r5,12
    8ea4:	12400304 	addi	r9,r2,12
    8ea8:	2b9d883a 	add	r14,r5,r14
    8eac:	2811883a 	mov	r8,r5
    8eb0:	100f883a 	mov	r7,r2
    8eb4:	41000017 	ldw	r4,0(r8)
    8eb8:	39c00404 	addi	r7,r7,16
    8ebc:	18c00404 	addi	r3,r3,16
    8ec0:	393ffc15 	stw	r4,-16(r7)
    8ec4:	193ffc17 	ldw	r4,-16(r3)
    8ec8:	6b400404 	addi	r13,r13,16
    8ecc:	5ac00404 	addi	r11,r11,16
    8ed0:	693ffc15 	stw	r4,-16(r13)
    8ed4:	61000017 	ldw	r4,0(r12)
    8ed8:	4a400404 	addi	r9,r9,16
    8edc:	42000404 	addi	r8,r8,16
    8ee0:	593ffc15 	stw	r4,-16(r11)
    8ee4:	51000017 	ldw	r4,0(r10)
    8ee8:	63000404 	addi	r12,r12,16
    8eec:	52800404 	addi	r10,r10,16
    8ef0:	493ffc15 	stw	r4,-16(r9)
    8ef4:	1bbfef1e 	bne	r3,r14,8eb4 <__alt_data_end+0xfc008eb4>
    8ef8:	79000044 	addi	r4,r15,1
    8efc:	2008913a 	slli	r4,r4,4
    8f00:	328003cc 	andi	r10,r6,15
    8f04:	02c000c4 	movi	r11,3
    8f08:	1107883a 	add	r3,r2,r4
    8f0c:	290b883a 	add	r5,r5,r4
    8f10:	5a801e2e 	bgeu	r11,r10,8f8c <memmove+0x154>
    8f14:	1813883a 	mov	r9,r3
    8f18:	2811883a 	mov	r8,r5
    8f1c:	500f883a 	mov	r7,r10
    8f20:	41000017 	ldw	r4,0(r8)
    8f24:	4a400104 	addi	r9,r9,4
    8f28:	39ffff04 	addi	r7,r7,-4
    8f2c:	493fff15 	stw	r4,-4(r9)
    8f30:	42000104 	addi	r8,r8,4
    8f34:	59fffa36 	bltu	r11,r7,8f20 <__alt_data_end+0xfc008f20>
    8f38:	513fff04 	addi	r4,r10,-4
    8f3c:	2008d0ba 	srli	r4,r4,2
    8f40:	318000cc 	andi	r6,r6,3
    8f44:	21000044 	addi	r4,r4,1
    8f48:	2109883a 	add	r4,r4,r4
    8f4c:	2109883a 	add	r4,r4,r4
    8f50:	1907883a 	add	r3,r3,r4
    8f54:	290b883a 	add	r5,r5,r4
    8f58:	30000b26 	beq	r6,zero,8f88 <memmove+0x150>
    8f5c:	198d883a 	add	r6,r3,r6
    8f60:	29c00003 	ldbu	r7,0(r5)
    8f64:	18c00044 	addi	r3,r3,1
    8f68:	29400044 	addi	r5,r5,1
    8f6c:	19ffffc5 	stb	r7,-1(r3)
    8f70:	19bffb1e 	bne	r3,r6,8f60 <__alt_data_end+0xfc008f60>
    8f74:	f800283a 	ret
    8f78:	1007883a 	mov	r3,r2
    8f7c:	003ff606 	br	8f58 <__alt_data_end+0xfc008f58>
    8f80:	1007883a 	mov	r3,r2
    8f84:	003ff506 	br	8f5c <__alt_data_end+0xfc008f5c>
    8f88:	f800283a 	ret
    8f8c:	500d883a 	mov	r6,r10
    8f90:	003ff106 	br	8f58 <__alt_data_end+0xfc008f58>

00008f94 <memset>:
    8f94:	20c000cc 	andi	r3,r4,3
    8f98:	2005883a 	mov	r2,r4
    8f9c:	18004426 	beq	r3,zero,90b0 <memset+0x11c>
    8fa0:	31ffffc4 	addi	r7,r6,-1
    8fa4:	30004026 	beq	r6,zero,90a8 <memset+0x114>
    8fa8:	2813883a 	mov	r9,r5
    8fac:	200d883a 	mov	r6,r4
    8fb0:	2007883a 	mov	r3,r4
    8fb4:	00000406 	br	8fc8 <memset+0x34>
    8fb8:	3a3fffc4 	addi	r8,r7,-1
    8fbc:	31800044 	addi	r6,r6,1
    8fc0:	38003926 	beq	r7,zero,90a8 <memset+0x114>
    8fc4:	400f883a 	mov	r7,r8
    8fc8:	18c00044 	addi	r3,r3,1
    8fcc:	32400005 	stb	r9,0(r6)
    8fd0:	1a0000cc 	andi	r8,r3,3
    8fd4:	403ff81e 	bne	r8,zero,8fb8 <__alt_data_end+0xfc008fb8>
    8fd8:	010000c4 	movi	r4,3
    8fdc:	21c02d2e 	bgeu	r4,r7,9094 <memset+0x100>
    8fe0:	29003fcc 	andi	r4,r5,255
    8fe4:	200c923a 	slli	r6,r4,8
    8fe8:	3108b03a 	or	r4,r6,r4
    8fec:	200c943a 	slli	r6,r4,16
    8ff0:	218cb03a 	or	r6,r4,r6
    8ff4:	010003c4 	movi	r4,15
    8ff8:	21c0182e 	bgeu	r4,r7,905c <memset+0xc8>
    8ffc:	3b3ffc04 	addi	r12,r7,-16
    9000:	6018d13a 	srli	r12,r12,4
    9004:	1a000104 	addi	r8,r3,4
    9008:	1ac00204 	addi	r11,r3,8
    900c:	6008913a 	slli	r4,r12,4
    9010:	1a800304 	addi	r10,r3,12
    9014:	1813883a 	mov	r9,r3
    9018:	21000504 	addi	r4,r4,20
    901c:	1909883a 	add	r4,r3,r4
    9020:	49800015 	stw	r6,0(r9)
    9024:	41800015 	stw	r6,0(r8)
    9028:	59800015 	stw	r6,0(r11)
    902c:	51800015 	stw	r6,0(r10)
    9030:	42000404 	addi	r8,r8,16
    9034:	4a400404 	addi	r9,r9,16
    9038:	5ac00404 	addi	r11,r11,16
    903c:	52800404 	addi	r10,r10,16
    9040:	413ff71e 	bne	r8,r4,9020 <__alt_data_end+0xfc009020>
    9044:	63000044 	addi	r12,r12,1
    9048:	6018913a 	slli	r12,r12,4
    904c:	39c003cc 	andi	r7,r7,15
    9050:	010000c4 	movi	r4,3
    9054:	1b07883a 	add	r3,r3,r12
    9058:	21c00e2e 	bgeu	r4,r7,9094 <memset+0x100>
    905c:	1813883a 	mov	r9,r3
    9060:	3811883a 	mov	r8,r7
    9064:	010000c4 	movi	r4,3
    9068:	49800015 	stw	r6,0(r9)
    906c:	423fff04 	addi	r8,r8,-4
    9070:	4a400104 	addi	r9,r9,4
    9074:	223ffc36 	bltu	r4,r8,9068 <__alt_data_end+0xfc009068>
    9078:	393fff04 	addi	r4,r7,-4
    907c:	2008d0ba 	srli	r4,r4,2
    9080:	39c000cc 	andi	r7,r7,3
    9084:	21000044 	addi	r4,r4,1
    9088:	2109883a 	add	r4,r4,r4
    908c:	2109883a 	add	r4,r4,r4
    9090:	1907883a 	add	r3,r3,r4
    9094:	38000526 	beq	r7,zero,90ac <memset+0x118>
    9098:	19cf883a 	add	r7,r3,r7
    909c:	19400005 	stb	r5,0(r3)
    90a0:	18c00044 	addi	r3,r3,1
    90a4:	38fffd1e 	bne	r7,r3,909c <__alt_data_end+0xfc00909c>
    90a8:	f800283a 	ret
    90ac:	f800283a 	ret
    90b0:	2007883a 	mov	r3,r4
    90b4:	300f883a 	mov	r7,r6
    90b8:	003fc706 	br	8fd8 <__alt_data_end+0xfc008fd8>

000090bc <_Balloc>:
    90bc:	20801317 	ldw	r2,76(r4)
    90c0:	defffc04 	addi	sp,sp,-16
    90c4:	dc400115 	stw	r17,4(sp)
    90c8:	dc000015 	stw	r16,0(sp)
    90cc:	dfc00315 	stw	ra,12(sp)
    90d0:	dc800215 	stw	r18,8(sp)
    90d4:	2023883a 	mov	r17,r4
    90d8:	2821883a 	mov	r16,r5
    90dc:	10000f26 	beq	r2,zero,911c <_Balloc+0x60>
    90e0:	8407883a 	add	r3,r16,r16
    90e4:	18c7883a 	add	r3,r3,r3
    90e8:	10c7883a 	add	r3,r2,r3
    90ec:	18800017 	ldw	r2,0(r3)
    90f0:	10001126 	beq	r2,zero,9138 <_Balloc+0x7c>
    90f4:	11000017 	ldw	r4,0(r2)
    90f8:	19000015 	stw	r4,0(r3)
    90fc:	10000415 	stw	zero,16(r2)
    9100:	10000315 	stw	zero,12(r2)
    9104:	dfc00317 	ldw	ra,12(sp)
    9108:	dc800217 	ldw	r18,8(sp)
    910c:	dc400117 	ldw	r17,4(sp)
    9110:	dc000017 	ldw	r16,0(sp)
    9114:	dec00404 	addi	sp,sp,16
    9118:	f800283a 	ret
    911c:	01800844 	movi	r6,33
    9120:	01400104 	movi	r5,4
    9124:	000c1640 	call	c164 <_calloc_r>
    9128:	88801315 	stw	r2,76(r17)
    912c:	103fec1e 	bne	r2,zero,90e0 <__alt_data_end+0xfc0090e0>
    9130:	0005883a 	mov	r2,zero
    9134:	003ff306 	br	9104 <__alt_data_end+0xfc009104>
    9138:	01400044 	movi	r5,1
    913c:	2c24983a 	sll	r18,r5,r16
    9140:	8809883a 	mov	r4,r17
    9144:	91800144 	addi	r6,r18,5
    9148:	318d883a 	add	r6,r6,r6
    914c:	318d883a 	add	r6,r6,r6
    9150:	000c1640 	call	c164 <_calloc_r>
    9154:	103ff626 	beq	r2,zero,9130 <__alt_data_end+0xfc009130>
    9158:	14000115 	stw	r16,4(r2)
    915c:	14800215 	stw	r18,8(r2)
    9160:	003fe606 	br	90fc <__alt_data_end+0xfc0090fc>

00009164 <_Bfree>:
    9164:	28000826 	beq	r5,zero,9188 <_Bfree+0x24>
    9168:	28c00117 	ldw	r3,4(r5)
    916c:	20801317 	ldw	r2,76(r4)
    9170:	18c7883a 	add	r3,r3,r3
    9174:	18c7883a 	add	r3,r3,r3
    9178:	10c5883a 	add	r2,r2,r3
    917c:	10c00017 	ldw	r3,0(r2)
    9180:	28c00015 	stw	r3,0(r5)
    9184:	11400015 	stw	r5,0(r2)
    9188:	f800283a 	ret

0000918c <__multadd>:
    918c:	defff704 	addi	sp,sp,-36
    9190:	dc800215 	stw	r18,8(sp)
    9194:	2c800417 	ldw	r18,16(r5)
    9198:	dd800615 	stw	r22,24(sp)
    919c:	dd400515 	stw	r21,20(sp)
    91a0:	dd000415 	stw	r20,16(sp)
    91a4:	dcc00315 	stw	r19,12(sp)
    91a8:	dc400115 	stw	r17,4(sp)
    91ac:	dc000015 	stw	r16,0(sp)
    91b0:	dfc00815 	stw	ra,32(sp)
    91b4:	ddc00715 	stw	r23,28(sp)
    91b8:	2827883a 	mov	r19,r5
    91bc:	2029883a 	mov	r20,r4
    91c0:	3023883a 	mov	r17,r6
    91c4:	3821883a 	mov	r16,r7
    91c8:	2d400504 	addi	r21,r5,20
    91cc:	002d883a 	mov	r22,zero
    91d0:	adc00017 	ldw	r23,0(r21)
    91d4:	880b883a 	mov	r5,r17
    91d8:	ad400104 	addi	r21,r21,4
    91dc:	b93fffcc 	andi	r4,r23,65535
    91e0:	00030d40 	call	30d4 <__mulsi3>
    91e4:	b808d43a 	srli	r4,r23,16
    91e8:	880b883a 	mov	r5,r17
    91ec:	1421883a 	add	r16,r2,r16
    91f0:	00030d40 	call	30d4 <__mulsi3>
    91f4:	800ed43a 	srli	r7,r16,16
    91f8:	80ffffcc 	andi	r3,r16,65535
    91fc:	b5800044 	addi	r22,r22,1
    9200:	11c5883a 	add	r2,r2,r7
    9204:	100e943a 	slli	r7,r2,16
    9208:	1020d43a 	srli	r16,r2,16
    920c:	38c7883a 	add	r3,r7,r3
    9210:	a8ffff15 	stw	r3,-4(r21)
    9214:	b4bfee16 	blt	r22,r18,91d0 <__alt_data_end+0xfc0091d0>
    9218:	80000926 	beq	r16,zero,9240 <__multadd+0xb4>
    921c:	98800217 	ldw	r2,8(r19)
    9220:	9080130e 	bge	r18,r2,9270 <__multadd+0xe4>
    9224:	90800144 	addi	r2,r18,5
    9228:	1085883a 	add	r2,r2,r2
    922c:	1085883a 	add	r2,r2,r2
    9230:	9885883a 	add	r2,r19,r2
    9234:	14000015 	stw	r16,0(r2)
    9238:	94800044 	addi	r18,r18,1
    923c:	9c800415 	stw	r18,16(r19)
    9240:	9805883a 	mov	r2,r19
    9244:	dfc00817 	ldw	ra,32(sp)
    9248:	ddc00717 	ldw	r23,28(sp)
    924c:	dd800617 	ldw	r22,24(sp)
    9250:	dd400517 	ldw	r21,20(sp)
    9254:	dd000417 	ldw	r20,16(sp)
    9258:	dcc00317 	ldw	r19,12(sp)
    925c:	dc800217 	ldw	r18,8(sp)
    9260:	dc400117 	ldw	r17,4(sp)
    9264:	dc000017 	ldw	r16,0(sp)
    9268:	dec00904 	addi	sp,sp,36
    926c:	f800283a 	ret
    9270:	99400117 	ldw	r5,4(r19)
    9274:	a009883a 	mov	r4,r20
    9278:	29400044 	addi	r5,r5,1
    927c:	00090bc0 	call	90bc <_Balloc>
    9280:	99800417 	ldw	r6,16(r19)
    9284:	99400304 	addi	r5,r19,12
    9288:	11000304 	addi	r4,r2,12
    928c:	31800084 	addi	r6,r6,2
    9290:	318d883a 	add	r6,r6,r6
    9294:	318d883a 	add	r6,r6,r6
    9298:	1023883a 	mov	r17,r2
    929c:	0008cf00 	call	8cf0 <memcpy>
    92a0:	98000a26 	beq	r19,zero,92cc <__multadd+0x140>
    92a4:	98c00117 	ldw	r3,4(r19)
    92a8:	a0801317 	ldw	r2,76(r20)
    92ac:	18c7883a 	add	r3,r3,r3
    92b0:	18c7883a 	add	r3,r3,r3
    92b4:	10c5883a 	add	r2,r2,r3
    92b8:	10c00017 	ldw	r3,0(r2)
    92bc:	98c00015 	stw	r3,0(r19)
    92c0:	14c00015 	stw	r19,0(r2)
    92c4:	8827883a 	mov	r19,r17
    92c8:	003fd606 	br	9224 <__alt_data_end+0xfc009224>
    92cc:	8827883a 	mov	r19,r17
    92d0:	003fd406 	br	9224 <__alt_data_end+0xfc009224>

000092d4 <__s2b>:
    92d4:	defff904 	addi	sp,sp,-28
    92d8:	dc400115 	stw	r17,4(sp)
    92dc:	dc000015 	stw	r16,0(sp)
    92e0:	2023883a 	mov	r17,r4
    92e4:	2821883a 	mov	r16,r5
    92e8:	39000204 	addi	r4,r7,8
    92ec:	01400244 	movi	r5,9
    92f0:	dcc00315 	stw	r19,12(sp)
    92f4:	dc800215 	stw	r18,8(sp)
    92f8:	dfc00615 	stw	ra,24(sp)
    92fc:	dd400515 	stw	r21,20(sp)
    9300:	dd000415 	stw	r20,16(sp)
    9304:	3825883a 	mov	r18,r7
    9308:	3027883a 	mov	r19,r6
    930c:	0002f200 	call	2f20 <__divsi3>
    9310:	00c00044 	movi	r3,1
    9314:	000b883a 	mov	r5,zero
    9318:	1880030e 	bge	r3,r2,9328 <__s2b+0x54>
    931c:	18c7883a 	add	r3,r3,r3
    9320:	29400044 	addi	r5,r5,1
    9324:	18bffd16 	blt	r3,r2,931c <__alt_data_end+0xfc00931c>
    9328:	8809883a 	mov	r4,r17
    932c:	00090bc0 	call	90bc <_Balloc>
    9330:	d8c00717 	ldw	r3,28(sp)
    9334:	10c00515 	stw	r3,20(r2)
    9338:	00c00044 	movi	r3,1
    933c:	10c00415 	stw	r3,16(r2)
    9340:	00c00244 	movi	r3,9
    9344:	1cc0210e 	bge	r3,r19,93cc <__s2b+0xf8>
    9348:	80eb883a 	add	r21,r16,r3
    934c:	a829883a 	mov	r20,r21
    9350:	84e1883a 	add	r16,r16,r19
    9354:	a1c00007 	ldb	r7,0(r20)
    9358:	01800284 	movi	r6,10
    935c:	a5000044 	addi	r20,r20,1
    9360:	100b883a 	mov	r5,r2
    9364:	39fff404 	addi	r7,r7,-48
    9368:	8809883a 	mov	r4,r17
    936c:	000918c0 	call	918c <__multadd>
    9370:	a43ff81e 	bne	r20,r16,9354 <__alt_data_end+0xfc009354>
    9374:	ace1883a 	add	r16,r21,r19
    9378:	843ffe04 	addi	r16,r16,-8
    937c:	9c800a0e 	bge	r19,r18,93a8 <__s2b+0xd4>
    9380:	94e5c83a 	sub	r18,r18,r19
    9384:	84a5883a 	add	r18,r16,r18
    9388:	81c00007 	ldb	r7,0(r16)
    938c:	01800284 	movi	r6,10
    9390:	84000044 	addi	r16,r16,1
    9394:	100b883a 	mov	r5,r2
    9398:	39fff404 	addi	r7,r7,-48
    939c:	8809883a 	mov	r4,r17
    93a0:	000918c0 	call	918c <__multadd>
    93a4:	84bff81e 	bne	r16,r18,9388 <__alt_data_end+0xfc009388>
    93a8:	dfc00617 	ldw	ra,24(sp)
    93ac:	dd400517 	ldw	r21,20(sp)
    93b0:	dd000417 	ldw	r20,16(sp)
    93b4:	dcc00317 	ldw	r19,12(sp)
    93b8:	dc800217 	ldw	r18,8(sp)
    93bc:	dc400117 	ldw	r17,4(sp)
    93c0:	dc000017 	ldw	r16,0(sp)
    93c4:	dec00704 	addi	sp,sp,28
    93c8:	f800283a 	ret
    93cc:	84000284 	addi	r16,r16,10
    93d0:	1827883a 	mov	r19,r3
    93d4:	003fe906 	br	937c <__alt_data_end+0xfc00937c>

000093d8 <__hi0bits>:
    93d8:	20bfffec 	andhi	r2,r4,65535
    93dc:	1000141e 	bne	r2,zero,9430 <__hi0bits+0x58>
    93e0:	2008943a 	slli	r4,r4,16
    93e4:	00800404 	movi	r2,16
    93e8:	20ffc02c 	andhi	r3,r4,65280
    93ec:	1800021e 	bne	r3,zero,93f8 <__hi0bits+0x20>
    93f0:	2008923a 	slli	r4,r4,8
    93f4:	10800204 	addi	r2,r2,8
    93f8:	20fc002c 	andhi	r3,r4,61440
    93fc:	1800021e 	bne	r3,zero,9408 <__hi0bits+0x30>
    9400:	2008913a 	slli	r4,r4,4
    9404:	10800104 	addi	r2,r2,4
    9408:	20f0002c 	andhi	r3,r4,49152
    940c:	1800031e 	bne	r3,zero,941c <__hi0bits+0x44>
    9410:	2109883a 	add	r4,r4,r4
    9414:	10800084 	addi	r2,r2,2
    9418:	2109883a 	add	r4,r4,r4
    941c:	20000316 	blt	r4,zero,942c <__hi0bits+0x54>
    9420:	2110002c 	andhi	r4,r4,16384
    9424:	2000041e 	bne	r4,zero,9438 <__hi0bits+0x60>
    9428:	00800804 	movi	r2,32
    942c:	f800283a 	ret
    9430:	0005883a 	mov	r2,zero
    9434:	003fec06 	br	93e8 <__alt_data_end+0xfc0093e8>
    9438:	10800044 	addi	r2,r2,1
    943c:	f800283a 	ret

00009440 <__lo0bits>:
    9440:	20c00017 	ldw	r3,0(r4)
    9444:	188001cc 	andi	r2,r3,7
    9448:	10000826 	beq	r2,zero,946c <__lo0bits+0x2c>
    944c:	1880004c 	andi	r2,r3,1
    9450:	1000211e 	bne	r2,zero,94d8 <__lo0bits+0x98>
    9454:	1880008c 	andi	r2,r3,2
    9458:	1000211e 	bne	r2,zero,94e0 <__lo0bits+0xa0>
    945c:	1806d0ba 	srli	r3,r3,2
    9460:	00800084 	movi	r2,2
    9464:	20c00015 	stw	r3,0(r4)
    9468:	f800283a 	ret
    946c:	18bfffcc 	andi	r2,r3,65535
    9470:	10001326 	beq	r2,zero,94c0 <__lo0bits+0x80>
    9474:	0005883a 	mov	r2,zero
    9478:	19403fcc 	andi	r5,r3,255
    947c:	2800021e 	bne	r5,zero,9488 <__lo0bits+0x48>
    9480:	1806d23a 	srli	r3,r3,8
    9484:	10800204 	addi	r2,r2,8
    9488:	194003cc 	andi	r5,r3,15
    948c:	2800021e 	bne	r5,zero,9498 <__lo0bits+0x58>
    9490:	1806d13a 	srli	r3,r3,4
    9494:	10800104 	addi	r2,r2,4
    9498:	194000cc 	andi	r5,r3,3
    949c:	2800021e 	bne	r5,zero,94a8 <__lo0bits+0x68>
    94a0:	1806d0ba 	srli	r3,r3,2
    94a4:	10800084 	addi	r2,r2,2
    94a8:	1940004c 	andi	r5,r3,1
    94ac:	2800081e 	bne	r5,zero,94d0 <__lo0bits+0x90>
    94b0:	1806d07a 	srli	r3,r3,1
    94b4:	1800051e 	bne	r3,zero,94cc <__lo0bits+0x8c>
    94b8:	00800804 	movi	r2,32
    94bc:	f800283a 	ret
    94c0:	1806d43a 	srli	r3,r3,16
    94c4:	00800404 	movi	r2,16
    94c8:	003feb06 	br	9478 <__alt_data_end+0xfc009478>
    94cc:	10800044 	addi	r2,r2,1
    94d0:	20c00015 	stw	r3,0(r4)
    94d4:	f800283a 	ret
    94d8:	0005883a 	mov	r2,zero
    94dc:	f800283a 	ret
    94e0:	1806d07a 	srli	r3,r3,1
    94e4:	00800044 	movi	r2,1
    94e8:	20c00015 	stw	r3,0(r4)
    94ec:	f800283a 	ret

000094f0 <__i2b>:
    94f0:	defffd04 	addi	sp,sp,-12
    94f4:	dc000015 	stw	r16,0(sp)
    94f8:	04000044 	movi	r16,1
    94fc:	dc400115 	stw	r17,4(sp)
    9500:	2823883a 	mov	r17,r5
    9504:	800b883a 	mov	r5,r16
    9508:	dfc00215 	stw	ra,8(sp)
    950c:	00090bc0 	call	90bc <_Balloc>
    9510:	14400515 	stw	r17,20(r2)
    9514:	14000415 	stw	r16,16(r2)
    9518:	dfc00217 	ldw	ra,8(sp)
    951c:	dc400117 	ldw	r17,4(sp)
    9520:	dc000017 	ldw	r16,0(sp)
    9524:	dec00304 	addi	sp,sp,12
    9528:	f800283a 	ret

0000952c <__multiply>:
    952c:	deffef04 	addi	sp,sp,-68
    9530:	dc400815 	stw	r17,32(sp)
    9534:	dc000715 	stw	r16,28(sp)
    9538:	34400417 	ldw	r17,16(r6)
    953c:	2c000417 	ldw	r16,16(r5)
    9540:	dd800d15 	stw	r22,52(sp)
    9544:	dc800915 	stw	r18,36(sp)
    9548:	dfc01015 	stw	ra,64(sp)
    954c:	df000f15 	stw	fp,60(sp)
    9550:	ddc00e15 	stw	r23,56(sp)
    9554:	dd400c15 	stw	r21,48(sp)
    9558:	dd000b15 	stw	r20,44(sp)
    955c:	dcc00a15 	stw	r19,40(sp)
    9560:	2825883a 	mov	r18,r5
    9564:	302d883a 	mov	r22,r6
    9568:	8440050e 	bge	r16,r17,9580 <__multiply+0x54>
    956c:	8007883a 	mov	r3,r16
    9570:	3025883a 	mov	r18,r6
    9574:	8821883a 	mov	r16,r17
    9578:	282d883a 	mov	r22,r5
    957c:	1823883a 	mov	r17,r3
    9580:	90800217 	ldw	r2,8(r18)
    9584:	8447883a 	add	r3,r16,r17
    9588:	d8c00215 	stw	r3,8(sp)
    958c:	91400117 	ldw	r5,4(r18)
    9590:	10c0010e 	bge	r2,r3,9598 <__multiply+0x6c>
    9594:	29400044 	addi	r5,r5,1
    9598:	00090bc0 	call	90bc <_Balloc>
    959c:	d8c00217 	ldw	r3,8(sp)
    95a0:	d8800615 	stw	r2,24(sp)
    95a4:	18eb883a 	add	r21,r3,r3
    95a8:	ad6b883a 	add	r21,r21,r21
    95ac:	10c00504 	addi	r3,r2,20
    95b0:	1d6b883a 	add	r21,r3,r21
    95b4:	d8c00115 	stw	r3,4(sp)
    95b8:	dd400315 	stw	r21,12(sp)
    95bc:	1805883a 	mov	r2,r3
    95c0:	1d40042e 	bgeu	r3,r21,95d4 <__multiply+0xa8>
    95c4:	d8c00317 	ldw	r3,12(sp)
    95c8:	10000015 	stw	zero,0(r2)
    95cc:	10800104 	addi	r2,r2,4
    95d0:	10fffc36 	bltu	r2,r3,95c4 <__alt_data_end+0xfc0095c4>
    95d4:	8c63883a 	add	r17,r17,r17
    95d8:	b5800504 	addi	r22,r22,20
    95dc:	8c63883a 	add	r17,r17,r17
    95e0:	94800504 	addi	r18,r18,20
    95e4:	8421883a 	add	r16,r16,r16
    95e8:	b463883a 	add	r17,r22,r17
    95ec:	8421883a 	add	r16,r16,r16
    95f0:	dd800015 	stw	r22,0(sp)
    95f4:	dc800415 	stw	r18,16(sp)
    95f8:	dc400515 	stw	r17,20(sp)
    95fc:	9429883a 	add	r20,r18,r16
    9600:	b4404f2e 	bgeu	r22,r17,9740 <__multiply+0x214>
    9604:	d8c00017 	ldw	r3,0(sp)
    9608:	1c800017 	ldw	r18,0(r3)
    960c:	947fffcc 	andi	r17,r18,65535
    9610:	88001e26 	beq	r17,zero,968c <__multiply+0x160>
    9614:	dd800117 	ldw	r22,4(sp)
    9618:	dd400417 	ldw	r21,16(sp)
    961c:	0027883a 	mov	r19,zero
    9620:	ac800017 	ldw	r18,0(r21)
    9624:	b4000017 	ldw	r16,0(r22)
    9628:	880b883a 	mov	r5,r17
    962c:	913fffcc 	andi	r4,r18,65535
    9630:	00030d40 	call	30d4 <__mulsi3>
    9634:	9008d43a 	srli	r4,r18,16
    9638:	84bfffcc 	andi	r18,r16,65535
    963c:	1485883a 	add	r2,r2,r18
    9640:	14e5883a 	add	r18,r2,r19
    9644:	8020d43a 	srli	r16,r16,16
    9648:	9026d43a 	srli	r19,r18,16
    964c:	880b883a 	mov	r5,r17
    9650:	00030d40 	call	30d4 <__mulsi3>
    9654:	1405883a 	add	r2,r2,r16
    9658:	14e1883a 	add	r16,r2,r19
    965c:	90ffffcc 	andi	r3,r18,65535
    9660:	8024943a 	slli	r18,r16,16
    9664:	ad400104 	addi	r21,r21,4
    9668:	b005883a 	mov	r2,r22
    966c:	90c6b03a 	or	r3,r18,r3
    9670:	b0c00015 	stw	r3,0(r22)
    9674:	8026d43a 	srli	r19,r16,16
    9678:	b5800104 	addi	r22,r22,4
    967c:	ad3fe836 	bltu	r21,r20,9620 <__alt_data_end+0xfc009620>
    9680:	d8c00017 	ldw	r3,0(sp)
    9684:	14c00115 	stw	r19,4(r2)
    9688:	1c800017 	ldw	r18,0(r3)
    968c:	9024d43a 	srli	r18,r18,16
    9690:	90002226 	beq	r18,zero,971c <__multiply+0x1f0>
    9694:	d8c00117 	ldw	r3,4(sp)
    9698:	dd800417 	ldw	r22,16(sp)
    969c:	002f883a 	mov	r23,zero
    96a0:	1f000017 	ldw	fp,0(r3)
    96a4:	1823883a 	mov	r17,r3
    96a8:	182b883a 	mov	r21,r3
    96ac:	e021883a 	mov	r16,fp
    96b0:	00000106 	br	96b8 <__multiply+0x18c>
    96b4:	982b883a 	mov	r21,r19
    96b8:	b100000b 	ldhu	r4,0(r22)
    96bc:	8020d43a 	srli	r16,r16,16
    96c0:	900b883a 	mov	r5,r18
    96c4:	00030d40 	call	30d4 <__mulsi3>
    96c8:	1405883a 	add	r2,r2,r16
    96cc:	15ef883a 	add	r23,r2,r23
    96d0:	b804943a 	slli	r2,r23,16
    96d4:	e0ffffcc 	andi	r3,fp,65535
    96d8:	8c400104 	addi	r17,r17,4
    96dc:	10c6b03a 	or	r3,r2,r3
    96e0:	88ffff15 	stw	r3,-4(r17)
    96e4:	b5800104 	addi	r22,r22,4
    96e8:	b13fff17 	ldw	r4,-4(r22)
    96ec:	acc00104 	addi	r19,r21,4
    96f0:	900b883a 	mov	r5,r18
    96f4:	2008d43a 	srli	r4,r4,16
    96f8:	9c000017 	ldw	r16,0(r19)
    96fc:	00030d40 	call	30d4 <__mulsi3>
    9700:	b806d43a 	srli	r3,r23,16
    9704:	813fffcc 	andi	r4,r16,65535
    9708:	1105883a 	add	r2,r2,r4
    970c:	10f9883a 	add	fp,r2,r3
    9710:	e02ed43a 	srli	r23,fp,16
    9714:	b53fe736 	bltu	r22,r20,96b4 <__alt_data_end+0xfc0096b4>
    9718:	af000115 	stw	fp,4(r21)
    971c:	d8c00017 	ldw	r3,0(sp)
    9720:	d9000517 	ldw	r4,20(sp)
    9724:	18c00104 	addi	r3,r3,4
    9728:	d8c00015 	stw	r3,0(sp)
    972c:	d8c00117 	ldw	r3,4(sp)
    9730:	18c00104 	addi	r3,r3,4
    9734:	d8c00115 	stw	r3,4(sp)
    9738:	d8c00017 	ldw	r3,0(sp)
    973c:	193fb136 	bltu	r3,r4,9604 <__alt_data_end+0xfc009604>
    9740:	d8c00217 	ldw	r3,8(sp)
    9744:	00c00c0e 	bge	zero,r3,9778 <__multiply+0x24c>
    9748:	d8c00317 	ldw	r3,12(sp)
    974c:	18bfff17 	ldw	r2,-4(r3)
    9750:	1d7fff04 	addi	r21,r3,-4
    9754:	10000326 	beq	r2,zero,9764 <__multiply+0x238>
    9758:	00000706 	br	9778 <__multiply+0x24c>
    975c:	a8800017 	ldw	r2,0(r21)
    9760:	1000051e 	bne	r2,zero,9778 <__multiply+0x24c>
    9764:	d8c00217 	ldw	r3,8(sp)
    9768:	ad7fff04 	addi	r21,r21,-4
    976c:	18ffffc4 	addi	r3,r3,-1
    9770:	d8c00215 	stw	r3,8(sp)
    9774:	183ff91e 	bne	r3,zero,975c <__alt_data_end+0xfc00975c>
    9778:	d8c00617 	ldw	r3,24(sp)
    977c:	d9000217 	ldw	r4,8(sp)
    9780:	1805883a 	mov	r2,r3
    9784:	19000415 	stw	r4,16(r3)
    9788:	dfc01017 	ldw	ra,64(sp)
    978c:	df000f17 	ldw	fp,60(sp)
    9790:	ddc00e17 	ldw	r23,56(sp)
    9794:	dd800d17 	ldw	r22,52(sp)
    9798:	dd400c17 	ldw	r21,48(sp)
    979c:	dd000b17 	ldw	r20,44(sp)
    97a0:	dcc00a17 	ldw	r19,40(sp)
    97a4:	dc800917 	ldw	r18,36(sp)
    97a8:	dc400817 	ldw	r17,32(sp)
    97ac:	dc000717 	ldw	r16,28(sp)
    97b0:	dec01104 	addi	sp,sp,68
    97b4:	f800283a 	ret

000097b8 <__pow5mult>:
    97b8:	defffa04 	addi	sp,sp,-24
    97bc:	dcc00315 	stw	r19,12(sp)
    97c0:	dc000015 	stw	r16,0(sp)
    97c4:	dfc00515 	stw	ra,20(sp)
    97c8:	dd000415 	stw	r20,16(sp)
    97cc:	dc800215 	stw	r18,8(sp)
    97d0:	dc400115 	stw	r17,4(sp)
    97d4:	308000cc 	andi	r2,r6,3
    97d8:	3021883a 	mov	r16,r6
    97dc:	2027883a 	mov	r19,r4
    97e0:	10002f1e 	bne	r2,zero,98a0 <__pow5mult+0xe8>
    97e4:	2825883a 	mov	r18,r5
    97e8:	8021d0ba 	srai	r16,r16,2
    97ec:	80001a26 	beq	r16,zero,9858 <__pow5mult+0xa0>
    97f0:	9c401217 	ldw	r17,72(r19)
    97f4:	8800061e 	bne	r17,zero,9810 <__pow5mult+0x58>
    97f8:	00003406 	br	98cc <__pow5mult+0x114>
    97fc:	8021d07a 	srai	r16,r16,1
    9800:	80001526 	beq	r16,zero,9858 <__pow5mult+0xa0>
    9804:	88800017 	ldw	r2,0(r17)
    9808:	10001c26 	beq	r2,zero,987c <__pow5mult+0xc4>
    980c:	1023883a 	mov	r17,r2
    9810:	8080004c 	andi	r2,r16,1
    9814:	103ff926 	beq	r2,zero,97fc <__alt_data_end+0xfc0097fc>
    9818:	880d883a 	mov	r6,r17
    981c:	900b883a 	mov	r5,r18
    9820:	9809883a 	mov	r4,r19
    9824:	000952c0 	call	952c <__multiply>
    9828:	90001b26 	beq	r18,zero,9898 <__pow5mult+0xe0>
    982c:	91000117 	ldw	r4,4(r18)
    9830:	98c01317 	ldw	r3,76(r19)
    9834:	8021d07a 	srai	r16,r16,1
    9838:	2109883a 	add	r4,r4,r4
    983c:	2109883a 	add	r4,r4,r4
    9840:	1907883a 	add	r3,r3,r4
    9844:	19000017 	ldw	r4,0(r3)
    9848:	91000015 	stw	r4,0(r18)
    984c:	1c800015 	stw	r18,0(r3)
    9850:	1025883a 	mov	r18,r2
    9854:	803feb1e 	bne	r16,zero,9804 <__alt_data_end+0xfc009804>
    9858:	9005883a 	mov	r2,r18
    985c:	dfc00517 	ldw	ra,20(sp)
    9860:	dd000417 	ldw	r20,16(sp)
    9864:	dcc00317 	ldw	r19,12(sp)
    9868:	dc800217 	ldw	r18,8(sp)
    986c:	dc400117 	ldw	r17,4(sp)
    9870:	dc000017 	ldw	r16,0(sp)
    9874:	dec00604 	addi	sp,sp,24
    9878:	f800283a 	ret
    987c:	880d883a 	mov	r6,r17
    9880:	880b883a 	mov	r5,r17
    9884:	9809883a 	mov	r4,r19
    9888:	000952c0 	call	952c <__multiply>
    988c:	88800015 	stw	r2,0(r17)
    9890:	10000015 	stw	zero,0(r2)
    9894:	003fdd06 	br	980c <__alt_data_end+0xfc00980c>
    9898:	1025883a 	mov	r18,r2
    989c:	003fd706 	br	97fc <__alt_data_end+0xfc0097fc>
    98a0:	10bfffc4 	addi	r2,r2,-1
    98a4:	1085883a 	add	r2,r2,r2
    98a8:	00c00074 	movhi	r3,1
    98ac:	18d35504 	addi	r3,r3,19796
    98b0:	1085883a 	add	r2,r2,r2
    98b4:	1885883a 	add	r2,r3,r2
    98b8:	11800017 	ldw	r6,0(r2)
    98bc:	000f883a 	mov	r7,zero
    98c0:	000918c0 	call	918c <__multadd>
    98c4:	1025883a 	mov	r18,r2
    98c8:	003fc706 	br	97e8 <__alt_data_end+0xfc0097e8>
    98cc:	05000044 	movi	r20,1
    98d0:	a00b883a 	mov	r5,r20
    98d4:	9809883a 	mov	r4,r19
    98d8:	00090bc0 	call	90bc <_Balloc>
    98dc:	1023883a 	mov	r17,r2
    98e0:	00809c44 	movi	r2,625
    98e4:	88800515 	stw	r2,20(r17)
    98e8:	8d000415 	stw	r20,16(r17)
    98ec:	9c401215 	stw	r17,72(r19)
    98f0:	88000015 	stw	zero,0(r17)
    98f4:	003fc606 	br	9810 <__alt_data_end+0xfc009810>

000098f8 <__lshift>:
    98f8:	defff904 	addi	sp,sp,-28
    98fc:	dd400515 	stw	r21,20(sp)
    9900:	dcc00315 	stw	r19,12(sp)
    9904:	302bd17a 	srai	r21,r6,5
    9908:	2cc00417 	ldw	r19,16(r5)
    990c:	28800217 	ldw	r2,8(r5)
    9910:	dd000415 	stw	r20,16(sp)
    9914:	ace7883a 	add	r19,r21,r19
    9918:	dc800215 	stw	r18,8(sp)
    991c:	dc400115 	stw	r17,4(sp)
    9920:	dc000015 	stw	r16,0(sp)
    9924:	dfc00615 	stw	ra,24(sp)
    9928:	9c000044 	addi	r16,r19,1
    992c:	2823883a 	mov	r17,r5
    9930:	3029883a 	mov	r20,r6
    9934:	2025883a 	mov	r18,r4
    9938:	29400117 	ldw	r5,4(r5)
    993c:	1400030e 	bge	r2,r16,994c <__lshift+0x54>
    9940:	1085883a 	add	r2,r2,r2
    9944:	29400044 	addi	r5,r5,1
    9948:	143ffd16 	blt	r2,r16,9940 <__alt_data_end+0xfc009940>
    994c:	9009883a 	mov	r4,r18
    9950:	00090bc0 	call	90bc <_Balloc>
    9954:	10c00504 	addi	r3,r2,20
    9958:	0540070e 	bge	zero,r21,9978 <__lshift+0x80>
    995c:	ad6b883a 	add	r21,r21,r21
    9960:	ad6b883a 	add	r21,r21,r21
    9964:	1809883a 	mov	r4,r3
    9968:	1d47883a 	add	r3,r3,r21
    996c:	20000015 	stw	zero,0(r4)
    9970:	21000104 	addi	r4,r4,4
    9974:	193ffd1e 	bne	r3,r4,996c <__alt_data_end+0xfc00996c>
    9978:	8a000417 	ldw	r8,16(r17)
    997c:	89000504 	addi	r4,r17,20
    9980:	a18007cc 	andi	r6,r20,31
    9984:	4211883a 	add	r8,r8,r8
    9988:	4211883a 	add	r8,r8,r8
    998c:	2211883a 	add	r8,r4,r8
    9990:	30002326 	beq	r6,zero,9a20 <__lshift+0x128>
    9994:	02400804 	movi	r9,32
    9998:	4993c83a 	sub	r9,r9,r6
    999c:	000b883a 	mov	r5,zero
    99a0:	21c00017 	ldw	r7,0(r4)
    99a4:	1815883a 	mov	r10,r3
    99a8:	18c00104 	addi	r3,r3,4
    99ac:	398e983a 	sll	r7,r7,r6
    99b0:	21000104 	addi	r4,r4,4
    99b4:	394ab03a 	or	r5,r7,r5
    99b8:	197fff15 	stw	r5,-4(r3)
    99bc:	217fff17 	ldw	r5,-4(r4)
    99c0:	2a4ad83a 	srl	r5,r5,r9
    99c4:	223ff636 	bltu	r4,r8,99a0 <__alt_data_end+0xfc0099a0>
    99c8:	51400115 	stw	r5,4(r10)
    99cc:	28001a1e 	bne	r5,zero,9a38 <__lshift+0x140>
    99d0:	843fffc4 	addi	r16,r16,-1
    99d4:	14000415 	stw	r16,16(r2)
    99d8:	88000826 	beq	r17,zero,99fc <__lshift+0x104>
    99dc:	89000117 	ldw	r4,4(r17)
    99e0:	90c01317 	ldw	r3,76(r18)
    99e4:	2109883a 	add	r4,r4,r4
    99e8:	2109883a 	add	r4,r4,r4
    99ec:	1907883a 	add	r3,r3,r4
    99f0:	19000017 	ldw	r4,0(r3)
    99f4:	89000015 	stw	r4,0(r17)
    99f8:	1c400015 	stw	r17,0(r3)
    99fc:	dfc00617 	ldw	ra,24(sp)
    9a00:	dd400517 	ldw	r21,20(sp)
    9a04:	dd000417 	ldw	r20,16(sp)
    9a08:	dcc00317 	ldw	r19,12(sp)
    9a0c:	dc800217 	ldw	r18,8(sp)
    9a10:	dc400117 	ldw	r17,4(sp)
    9a14:	dc000017 	ldw	r16,0(sp)
    9a18:	dec00704 	addi	sp,sp,28
    9a1c:	f800283a 	ret
    9a20:	21400017 	ldw	r5,0(r4)
    9a24:	18c00104 	addi	r3,r3,4
    9a28:	21000104 	addi	r4,r4,4
    9a2c:	197fff15 	stw	r5,-4(r3)
    9a30:	223ffb36 	bltu	r4,r8,9a20 <__alt_data_end+0xfc009a20>
    9a34:	003fe606 	br	99d0 <__alt_data_end+0xfc0099d0>
    9a38:	9c000084 	addi	r16,r19,2
    9a3c:	003fe406 	br	99d0 <__alt_data_end+0xfc0099d0>

00009a40 <__mcmp>:
    9a40:	20800417 	ldw	r2,16(r4)
    9a44:	28c00417 	ldw	r3,16(r5)
    9a48:	10c5c83a 	sub	r2,r2,r3
    9a4c:	1000111e 	bne	r2,zero,9a94 <__mcmp+0x54>
    9a50:	18c7883a 	add	r3,r3,r3
    9a54:	18c7883a 	add	r3,r3,r3
    9a58:	21000504 	addi	r4,r4,20
    9a5c:	29400504 	addi	r5,r5,20
    9a60:	20c5883a 	add	r2,r4,r3
    9a64:	28cb883a 	add	r5,r5,r3
    9a68:	00000106 	br	9a70 <__mcmp+0x30>
    9a6c:	20800a2e 	bgeu	r4,r2,9a98 <__mcmp+0x58>
    9a70:	10bfff04 	addi	r2,r2,-4
    9a74:	297fff04 	addi	r5,r5,-4
    9a78:	11800017 	ldw	r6,0(r2)
    9a7c:	28c00017 	ldw	r3,0(r5)
    9a80:	30fffa26 	beq	r6,r3,9a6c <__alt_data_end+0xfc009a6c>
    9a84:	30c00236 	bltu	r6,r3,9a90 <__mcmp+0x50>
    9a88:	00800044 	movi	r2,1
    9a8c:	f800283a 	ret
    9a90:	00bfffc4 	movi	r2,-1
    9a94:	f800283a 	ret
    9a98:	0005883a 	mov	r2,zero
    9a9c:	f800283a 	ret

00009aa0 <__mdiff>:
    9aa0:	28c00417 	ldw	r3,16(r5)
    9aa4:	30800417 	ldw	r2,16(r6)
    9aa8:	defffa04 	addi	sp,sp,-24
    9aac:	dcc00315 	stw	r19,12(sp)
    9ab0:	dc800215 	stw	r18,8(sp)
    9ab4:	dfc00515 	stw	ra,20(sp)
    9ab8:	dd000415 	stw	r20,16(sp)
    9abc:	dc400115 	stw	r17,4(sp)
    9ac0:	dc000015 	stw	r16,0(sp)
    9ac4:	1887c83a 	sub	r3,r3,r2
    9ac8:	2825883a 	mov	r18,r5
    9acc:	3027883a 	mov	r19,r6
    9ad0:	1800141e 	bne	r3,zero,9b24 <__mdiff+0x84>
    9ad4:	1085883a 	add	r2,r2,r2
    9ad8:	1085883a 	add	r2,r2,r2
    9adc:	2a000504 	addi	r8,r5,20
    9ae0:	34000504 	addi	r16,r6,20
    9ae4:	4087883a 	add	r3,r8,r2
    9ae8:	8085883a 	add	r2,r16,r2
    9aec:	00000106 	br	9af4 <__mdiff+0x54>
    9af0:	40c0592e 	bgeu	r8,r3,9c58 <__mdiff+0x1b8>
    9af4:	18ffff04 	addi	r3,r3,-4
    9af8:	10bfff04 	addi	r2,r2,-4
    9afc:	19c00017 	ldw	r7,0(r3)
    9b00:	11400017 	ldw	r5,0(r2)
    9b04:	397ffa26 	beq	r7,r5,9af0 <__alt_data_end+0xfc009af0>
    9b08:	3940592e 	bgeu	r7,r5,9c70 <__mdiff+0x1d0>
    9b0c:	9005883a 	mov	r2,r18
    9b10:	4023883a 	mov	r17,r8
    9b14:	9825883a 	mov	r18,r19
    9b18:	05000044 	movi	r20,1
    9b1c:	1027883a 	mov	r19,r2
    9b20:	00000406 	br	9b34 <__mdiff+0x94>
    9b24:	18005616 	blt	r3,zero,9c80 <__mdiff+0x1e0>
    9b28:	34400504 	addi	r17,r6,20
    9b2c:	2c000504 	addi	r16,r5,20
    9b30:	0029883a 	mov	r20,zero
    9b34:	91400117 	ldw	r5,4(r18)
    9b38:	00090bc0 	call	90bc <_Balloc>
    9b3c:	92400417 	ldw	r9,16(r18)
    9b40:	9b000417 	ldw	r12,16(r19)
    9b44:	12c00504 	addi	r11,r2,20
    9b48:	4a51883a 	add	r8,r9,r9
    9b4c:	6319883a 	add	r12,r12,r12
    9b50:	4211883a 	add	r8,r8,r8
    9b54:	6319883a 	add	r12,r12,r12
    9b58:	15000315 	stw	r20,12(r2)
    9b5c:	8211883a 	add	r8,r16,r8
    9b60:	8b19883a 	add	r12,r17,r12
    9b64:	0007883a 	mov	r3,zero
    9b68:	81400017 	ldw	r5,0(r16)
    9b6c:	89c00017 	ldw	r7,0(r17)
    9b70:	59800104 	addi	r6,r11,4
    9b74:	293fffcc 	andi	r4,r5,65535
    9b78:	20c7883a 	add	r3,r4,r3
    9b7c:	393fffcc 	andi	r4,r7,65535
    9b80:	1909c83a 	sub	r4,r3,r4
    9b84:	280ad43a 	srli	r5,r5,16
    9b88:	380ed43a 	srli	r7,r7,16
    9b8c:	2007d43a 	srai	r3,r4,16
    9b90:	213fffcc 	andi	r4,r4,65535
    9b94:	29cbc83a 	sub	r5,r5,r7
    9b98:	28c7883a 	add	r3,r5,r3
    9b9c:	180a943a 	slli	r5,r3,16
    9ba0:	8c400104 	addi	r17,r17,4
    9ba4:	84000104 	addi	r16,r16,4
    9ba8:	2908b03a 	or	r4,r5,r4
    9bac:	59000015 	stw	r4,0(r11)
    9bb0:	1807d43a 	srai	r3,r3,16
    9bb4:	3015883a 	mov	r10,r6
    9bb8:	3017883a 	mov	r11,r6
    9bbc:	8b3fea36 	bltu	r17,r12,9b68 <__alt_data_end+0xfc009b68>
    9bc0:	8200162e 	bgeu	r16,r8,9c1c <__mdiff+0x17c>
    9bc4:	8017883a 	mov	r11,r16
    9bc8:	59400017 	ldw	r5,0(r11)
    9bcc:	31800104 	addi	r6,r6,4
    9bd0:	5ac00104 	addi	r11,r11,4
    9bd4:	293fffcc 	andi	r4,r5,65535
    9bd8:	20c7883a 	add	r3,r4,r3
    9bdc:	280ed43a 	srli	r7,r5,16
    9be0:	180bd43a 	srai	r5,r3,16
    9be4:	193fffcc 	andi	r4,r3,65535
    9be8:	3947883a 	add	r3,r7,r5
    9bec:	180a943a 	slli	r5,r3,16
    9bf0:	1807d43a 	srai	r3,r3,16
    9bf4:	2908b03a 	or	r4,r5,r4
    9bf8:	313fff15 	stw	r4,-4(r6)
    9bfc:	5a3ff236 	bltu	r11,r8,9bc8 <__alt_data_end+0xfc009bc8>
    9c00:	0406303a 	nor	r3,zero,r16
    9c04:	1a07883a 	add	r3,r3,r8
    9c08:	1806d0ba 	srli	r3,r3,2
    9c0c:	18c00044 	addi	r3,r3,1
    9c10:	18c7883a 	add	r3,r3,r3
    9c14:	18c7883a 	add	r3,r3,r3
    9c18:	50d5883a 	add	r10,r10,r3
    9c1c:	50ffff04 	addi	r3,r10,-4
    9c20:	2000041e 	bne	r4,zero,9c34 <__mdiff+0x194>
    9c24:	18ffff04 	addi	r3,r3,-4
    9c28:	19000017 	ldw	r4,0(r3)
    9c2c:	4a7fffc4 	addi	r9,r9,-1
    9c30:	203ffc26 	beq	r4,zero,9c24 <__alt_data_end+0xfc009c24>
    9c34:	12400415 	stw	r9,16(r2)
    9c38:	dfc00517 	ldw	ra,20(sp)
    9c3c:	dd000417 	ldw	r20,16(sp)
    9c40:	dcc00317 	ldw	r19,12(sp)
    9c44:	dc800217 	ldw	r18,8(sp)
    9c48:	dc400117 	ldw	r17,4(sp)
    9c4c:	dc000017 	ldw	r16,0(sp)
    9c50:	dec00604 	addi	sp,sp,24
    9c54:	f800283a 	ret
    9c58:	000b883a 	mov	r5,zero
    9c5c:	00090bc0 	call	90bc <_Balloc>
    9c60:	00c00044 	movi	r3,1
    9c64:	10c00415 	stw	r3,16(r2)
    9c68:	10000515 	stw	zero,20(r2)
    9c6c:	003ff206 	br	9c38 <__alt_data_end+0xfc009c38>
    9c70:	8023883a 	mov	r17,r16
    9c74:	0029883a 	mov	r20,zero
    9c78:	4021883a 	mov	r16,r8
    9c7c:	003fad06 	br	9b34 <__alt_data_end+0xfc009b34>
    9c80:	9005883a 	mov	r2,r18
    9c84:	94400504 	addi	r17,r18,20
    9c88:	9c000504 	addi	r16,r19,20
    9c8c:	9825883a 	mov	r18,r19
    9c90:	05000044 	movi	r20,1
    9c94:	1027883a 	mov	r19,r2
    9c98:	003fa606 	br	9b34 <__alt_data_end+0xfc009b34>

00009c9c <__ulp>:
    9c9c:	295ffc2c 	andhi	r5,r5,32752
    9ca0:	00bf3034 	movhi	r2,64704
    9ca4:	2887883a 	add	r3,r5,r2
    9ca8:	00c0020e 	bge	zero,r3,9cb4 <__ulp+0x18>
    9cac:	0005883a 	mov	r2,zero
    9cb0:	f800283a 	ret
    9cb4:	00c7c83a 	sub	r3,zero,r3
    9cb8:	1807d53a 	srai	r3,r3,20
    9cbc:	008004c4 	movi	r2,19
    9cc0:	10c00b0e 	bge	r2,r3,9cf0 <__ulp+0x54>
    9cc4:	18bffb04 	addi	r2,r3,-20
    9cc8:	01000784 	movi	r4,30
    9ccc:	0007883a 	mov	r3,zero
    9cd0:	20800516 	blt	r4,r2,9ce8 <__ulp+0x4c>
    9cd4:	010007c4 	movi	r4,31
    9cd8:	2089c83a 	sub	r4,r4,r2
    9cdc:	00800044 	movi	r2,1
    9ce0:	1104983a 	sll	r2,r2,r4
    9ce4:	f800283a 	ret
    9ce8:	00800044 	movi	r2,1
    9cec:	f800283a 	ret
    9cf0:	01400234 	movhi	r5,8
    9cf4:	28c7d83a 	sra	r3,r5,r3
    9cf8:	0005883a 	mov	r2,zero
    9cfc:	f800283a 	ret

00009d00 <__b2d>:
    9d00:	defffa04 	addi	sp,sp,-24
    9d04:	dc000015 	stw	r16,0(sp)
    9d08:	24000417 	ldw	r16,16(r4)
    9d0c:	dc400115 	stw	r17,4(sp)
    9d10:	24400504 	addi	r17,r4,20
    9d14:	8421883a 	add	r16,r16,r16
    9d18:	8421883a 	add	r16,r16,r16
    9d1c:	8c21883a 	add	r16,r17,r16
    9d20:	dc800215 	stw	r18,8(sp)
    9d24:	84bfff17 	ldw	r18,-4(r16)
    9d28:	dd000415 	stw	r20,16(sp)
    9d2c:	dcc00315 	stw	r19,12(sp)
    9d30:	9009883a 	mov	r4,r18
    9d34:	2829883a 	mov	r20,r5
    9d38:	dfc00515 	stw	ra,20(sp)
    9d3c:	00093d80 	call	93d8 <__hi0bits>
    9d40:	00c00804 	movi	r3,32
    9d44:	1889c83a 	sub	r4,r3,r2
    9d48:	a1000015 	stw	r4,0(r20)
    9d4c:	01000284 	movi	r4,10
    9d50:	84ffff04 	addi	r19,r16,-4
    9d54:	20801216 	blt	r4,r2,9da0 <__b2d+0xa0>
    9d58:	018002c4 	movi	r6,11
    9d5c:	308dc83a 	sub	r6,r6,r2
    9d60:	9186d83a 	srl	r3,r18,r6
    9d64:	18cffc34 	orhi	r3,r3,16368
    9d68:	8cc0212e 	bgeu	r17,r19,9df0 <__b2d+0xf0>
    9d6c:	813ffe17 	ldw	r4,-8(r16)
    9d70:	218cd83a 	srl	r6,r4,r6
    9d74:	10800544 	addi	r2,r2,21
    9d78:	9084983a 	sll	r2,r18,r2
    9d7c:	1184b03a 	or	r2,r2,r6
    9d80:	dfc00517 	ldw	ra,20(sp)
    9d84:	dd000417 	ldw	r20,16(sp)
    9d88:	dcc00317 	ldw	r19,12(sp)
    9d8c:	dc800217 	ldw	r18,8(sp)
    9d90:	dc400117 	ldw	r17,4(sp)
    9d94:	dc000017 	ldw	r16,0(sp)
    9d98:	dec00604 	addi	sp,sp,24
    9d9c:	f800283a 	ret
    9da0:	8cc00f2e 	bgeu	r17,r19,9de0 <__b2d+0xe0>
    9da4:	117ffd44 	addi	r5,r2,-11
    9da8:	80bffe17 	ldw	r2,-8(r16)
    9dac:	28000e26 	beq	r5,zero,9de8 <__b2d+0xe8>
    9db0:	1949c83a 	sub	r4,r3,r5
    9db4:	9164983a 	sll	r18,r18,r5
    9db8:	1106d83a 	srl	r3,r2,r4
    9dbc:	81bffe04 	addi	r6,r16,-8
    9dc0:	948ffc34 	orhi	r18,r18,16368
    9dc4:	90c6b03a 	or	r3,r18,r3
    9dc8:	89800e2e 	bgeu	r17,r6,9e04 <__b2d+0x104>
    9dcc:	81bffd17 	ldw	r6,-12(r16)
    9dd0:	1144983a 	sll	r2,r2,r5
    9dd4:	310ad83a 	srl	r5,r6,r4
    9dd8:	2884b03a 	or	r2,r5,r2
    9ddc:	003fe806 	br	9d80 <__alt_data_end+0xfc009d80>
    9de0:	10bffd44 	addi	r2,r2,-11
    9de4:	1000041e 	bne	r2,zero,9df8 <__b2d+0xf8>
    9de8:	90cffc34 	orhi	r3,r18,16368
    9dec:	003fe406 	br	9d80 <__alt_data_end+0xfc009d80>
    9df0:	000d883a 	mov	r6,zero
    9df4:	003fdf06 	br	9d74 <__alt_data_end+0xfc009d74>
    9df8:	90a4983a 	sll	r18,r18,r2
    9dfc:	0005883a 	mov	r2,zero
    9e00:	003ff906 	br	9de8 <__alt_data_end+0xfc009de8>
    9e04:	1144983a 	sll	r2,r2,r5
    9e08:	003fdd06 	br	9d80 <__alt_data_end+0xfc009d80>

00009e0c <__d2b>:
    9e0c:	defff804 	addi	sp,sp,-32
    9e10:	dc000215 	stw	r16,8(sp)
    9e14:	3021883a 	mov	r16,r6
    9e18:	dc400315 	stw	r17,12(sp)
    9e1c:	8022907a 	slli	r17,r16,1
    9e20:	dd000615 	stw	r20,24(sp)
    9e24:	2829883a 	mov	r20,r5
    9e28:	01400044 	movi	r5,1
    9e2c:	dcc00515 	stw	r19,20(sp)
    9e30:	dc800415 	stw	r18,16(sp)
    9e34:	dfc00715 	stw	ra,28(sp)
    9e38:	3825883a 	mov	r18,r7
    9e3c:	8822d57a 	srli	r17,r17,21
    9e40:	00090bc0 	call	90bc <_Balloc>
    9e44:	1027883a 	mov	r19,r2
    9e48:	00800434 	movhi	r2,16
    9e4c:	10bfffc4 	addi	r2,r2,-1
    9e50:	808c703a 	and	r6,r16,r2
    9e54:	88000126 	beq	r17,zero,9e5c <__d2b+0x50>
    9e58:	31800434 	orhi	r6,r6,16
    9e5c:	d9800015 	stw	r6,0(sp)
    9e60:	a0002426 	beq	r20,zero,9ef4 <__d2b+0xe8>
    9e64:	d9000104 	addi	r4,sp,4
    9e68:	dd000115 	stw	r20,4(sp)
    9e6c:	00094400 	call	9440 <__lo0bits>
    9e70:	d8c00017 	ldw	r3,0(sp)
    9e74:	10002f1e 	bne	r2,zero,9f34 <__d2b+0x128>
    9e78:	d9000117 	ldw	r4,4(sp)
    9e7c:	99000515 	stw	r4,20(r19)
    9e80:	1821003a 	cmpeq	r16,r3,zero
    9e84:	01000084 	movi	r4,2
    9e88:	2421c83a 	sub	r16,r4,r16
    9e8c:	98c00615 	stw	r3,24(r19)
    9e90:	9c000415 	stw	r16,16(r19)
    9e94:	88001f1e 	bne	r17,zero,9f14 <__d2b+0x108>
    9e98:	10bef384 	addi	r2,r2,-1074
    9e9c:	90800015 	stw	r2,0(r18)
    9ea0:	00900034 	movhi	r2,16384
    9ea4:	10bfffc4 	addi	r2,r2,-1
    9ea8:	8085883a 	add	r2,r16,r2
    9eac:	1085883a 	add	r2,r2,r2
    9eb0:	1085883a 	add	r2,r2,r2
    9eb4:	9885883a 	add	r2,r19,r2
    9eb8:	11000517 	ldw	r4,20(r2)
    9ebc:	8020917a 	slli	r16,r16,5
    9ec0:	00093d80 	call	93d8 <__hi0bits>
    9ec4:	d8c00817 	ldw	r3,32(sp)
    9ec8:	8085c83a 	sub	r2,r16,r2
    9ecc:	18800015 	stw	r2,0(r3)
    9ed0:	9805883a 	mov	r2,r19
    9ed4:	dfc00717 	ldw	ra,28(sp)
    9ed8:	dd000617 	ldw	r20,24(sp)
    9edc:	dcc00517 	ldw	r19,20(sp)
    9ee0:	dc800417 	ldw	r18,16(sp)
    9ee4:	dc400317 	ldw	r17,12(sp)
    9ee8:	dc000217 	ldw	r16,8(sp)
    9eec:	dec00804 	addi	sp,sp,32
    9ef0:	f800283a 	ret
    9ef4:	d809883a 	mov	r4,sp
    9ef8:	00094400 	call	9440 <__lo0bits>
    9efc:	d8c00017 	ldw	r3,0(sp)
    9f00:	04000044 	movi	r16,1
    9f04:	9c000415 	stw	r16,16(r19)
    9f08:	98c00515 	stw	r3,20(r19)
    9f0c:	10800804 	addi	r2,r2,32
    9f10:	883fe126 	beq	r17,zero,9e98 <__alt_data_end+0xfc009e98>
    9f14:	00c00d44 	movi	r3,53
    9f18:	8c7ef344 	addi	r17,r17,-1075
    9f1c:	88a3883a 	add	r17,r17,r2
    9f20:	1885c83a 	sub	r2,r3,r2
    9f24:	d8c00817 	ldw	r3,32(sp)
    9f28:	94400015 	stw	r17,0(r18)
    9f2c:	18800015 	stw	r2,0(r3)
    9f30:	003fe706 	br	9ed0 <__alt_data_end+0xfc009ed0>
    9f34:	01000804 	movi	r4,32
    9f38:	2089c83a 	sub	r4,r4,r2
    9f3c:	1908983a 	sll	r4,r3,r4
    9f40:	d9400117 	ldw	r5,4(sp)
    9f44:	1886d83a 	srl	r3,r3,r2
    9f48:	2148b03a 	or	r4,r4,r5
    9f4c:	99000515 	stw	r4,20(r19)
    9f50:	d8c00015 	stw	r3,0(sp)
    9f54:	003fca06 	br	9e80 <__alt_data_end+0xfc009e80>

00009f58 <__ratio>:
    9f58:	defff904 	addi	sp,sp,-28
    9f5c:	dc400315 	stw	r17,12(sp)
    9f60:	2823883a 	mov	r17,r5
    9f64:	d9400104 	addi	r5,sp,4
    9f68:	dfc00615 	stw	ra,24(sp)
    9f6c:	dcc00515 	stw	r19,20(sp)
    9f70:	dc800415 	stw	r18,16(sp)
    9f74:	2027883a 	mov	r19,r4
    9f78:	dc000215 	stw	r16,8(sp)
    9f7c:	0009d000 	call	9d00 <__b2d>
    9f80:	d80b883a 	mov	r5,sp
    9f84:	8809883a 	mov	r4,r17
    9f88:	1025883a 	mov	r18,r2
    9f8c:	1821883a 	mov	r16,r3
    9f90:	0009d000 	call	9d00 <__b2d>
    9f94:	8a000417 	ldw	r8,16(r17)
    9f98:	99000417 	ldw	r4,16(r19)
    9f9c:	d9400117 	ldw	r5,4(sp)
    9fa0:	2209c83a 	sub	r4,r4,r8
    9fa4:	2010917a 	slli	r8,r4,5
    9fa8:	d9000017 	ldw	r4,0(sp)
    9fac:	2909c83a 	sub	r4,r5,r4
    9fb0:	4109883a 	add	r4,r8,r4
    9fb4:	01000e0e 	bge	zero,r4,9ff0 <__ratio+0x98>
    9fb8:	2008953a 	slli	r4,r4,20
    9fbc:	2421883a 	add	r16,r4,r16
    9fc0:	100d883a 	mov	r6,r2
    9fc4:	180f883a 	mov	r7,r3
    9fc8:	9009883a 	mov	r4,r18
    9fcc:	800b883a 	mov	r5,r16
    9fd0:	000de680 	call	de68 <__divdf3>
    9fd4:	dfc00617 	ldw	ra,24(sp)
    9fd8:	dcc00517 	ldw	r19,20(sp)
    9fdc:	dc800417 	ldw	r18,16(sp)
    9fe0:	dc400317 	ldw	r17,12(sp)
    9fe4:	dc000217 	ldw	r16,8(sp)
    9fe8:	dec00704 	addi	sp,sp,28
    9fec:	f800283a 	ret
    9ff0:	2008953a 	slli	r4,r4,20
    9ff4:	1907c83a 	sub	r3,r3,r4
    9ff8:	003ff106 	br	9fc0 <__alt_data_end+0xfc009fc0>

00009ffc <_mprec_log10>:
    9ffc:	defffe04 	addi	sp,sp,-8
    a000:	dc000015 	stw	r16,0(sp)
    a004:	dfc00115 	stw	ra,4(sp)
    a008:	008005c4 	movi	r2,23
    a00c:	2021883a 	mov	r16,r4
    a010:	11000d0e 	bge	r2,r4,a048 <_mprec_log10+0x4c>
    a014:	0005883a 	mov	r2,zero
    a018:	00cffc34 	movhi	r3,16368
    a01c:	843fffc4 	addi	r16,r16,-1
    a020:	000d883a 	mov	r6,zero
    a024:	01d00934 	movhi	r7,16420
    a028:	1009883a 	mov	r4,r2
    a02c:	180b883a 	mov	r5,r3
    a030:	000ea900 	call	ea90 <__muldf3>
    a034:	803ff91e 	bne	r16,zero,a01c <__alt_data_end+0xfc00a01c>
    a038:	dfc00117 	ldw	ra,4(sp)
    a03c:	dc000017 	ldw	r16,0(sp)
    a040:	dec00204 	addi	sp,sp,8
    a044:	f800283a 	ret
    a048:	202090fa 	slli	r16,r4,3
    a04c:	00800074 	movhi	r2,1
    a050:	10936c04 	addi	r2,r2,19888
    a054:	1421883a 	add	r16,r2,r16
    a058:	80800017 	ldw	r2,0(r16)
    a05c:	80c00117 	ldw	r3,4(r16)
    a060:	dfc00117 	ldw	ra,4(sp)
    a064:	dc000017 	ldw	r16,0(sp)
    a068:	dec00204 	addi	sp,sp,8
    a06c:	f800283a 	ret

0000a070 <__copybits>:
    a070:	297fffc4 	addi	r5,r5,-1
    a074:	280fd17a 	srai	r7,r5,5
    a078:	30c00417 	ldw	r3,16(r6)
    a07c:	30800504 	addi	r2,r6,20
    a080:	39c00044 	addi	r7,r7,1
    a084:	18c7883a 	add	r3,r3,r3
    a088:	39cf883a 	add	r7,r7,r7
    a08c:	18c7883a 	add	r3,r3,r3
    a090:	39cf883a 	add	r7,r7,r7
    a094:	10c7883a 	add	r3,r2,r3
    a098:	21cf883a 	add	r7,r4,r7
    a09c:	10c00d2e 	bgeu	r2,r3,a0d4 <__copybits+0x64>
    a0a0:	200b883a 	mov	r5,r4
    a0a4:	12000017 	ldw	r8,0(r2)
    a0a8:	29400104 	addi	r5,r5,4
    a0ac:	10800104 	addi	r2,r2,4
    a0b0:	2a3fff15 	stw	r8,-4(r5)
    a0b4:	10fffb36 	bltu	r2,r3,a0a4 <__alt_data_end+0xfc00a0a4>
    a0b8:	1985c83a 	sub	r2,r3,r6
    a0bc:	10bffac4 	addi	r2,r2,-21
    a0c0:	1004d0ba 	srli	r2,r2,2
    a0c4:	10800044 	addi	r2,r2,1
    a0c8:	1085883a 	add	r2,r2,r2
    a0cc:	1085883a 	add	r2,r2,r2
    a0d0:	2089883a 	add	r4,r4,r2
    a0d4:	21c0032e 	bgeu	r4,r7,a0e4 <__copybits+0x74>
    a0d8:	20000015 	stw	zero,0(r4)
    a0dc:	21000104 	addi	r4,r4,4
    a0e0:	21fffd36 	bltu	r4,r7,a0d8 <__alt_data_end+0xfc00a0d8>
    a0e4:	f800283a 	ret

0000a0e8 <__any_on>:
    a0e8:	20c00417 	ldw	r3,16(r4)
    a0ec:	2805d17a 	srai	r2,r5,5
    a0f0:	21000504 	addi	r4,r4,20
    a0f4:	18800d0e 	bge	r3,r2,a12c <__any_on+0x44>
    a0f8:	18c7883a 	add	r3,r3,r3
    a0fc:	18c7883a 	add	r3,r3,r3
    a100:	20c7883a 	add	r3,r4,r3
    a104:	20c0192e 	bgeu	r4,r3,a16c <__any_on+0x84>
    a108:	18bfff17 	ldw	r2,-4(r3)
    a10c:	18ffff04 	addi	r3,r3,-4
    a110:	1000041e 	bne	r2,zero,a124 <__any_on+0x3c>
    a114:	20c0142e 	bgeu	r4,r3,a168 <__any_on+0x80>
    a118:	18ffff04 	addi	r3,r3,-4
    a11c:	19400017 	ldw	r5,0(r3)
    a120:	283ffc26 	beq	r5,zero,a114 <__alt_data_end+0xfc00a114>
    a124:	00800044 	movi	r2,1
    a128:	f800283a 	ret
    a12c:	10c00a0e 	bge	r2,r3,a158 <__any_on+0x70>
    a130:	1085883a 	add	r2,r2,r2
    a134:	1085883a 	add	r2,r2,r2
    a138:	294007cc 	andi	r5,r5,31
    a13c:	2087883a 	add	r3,r4,r2
    a140:	283ff026 	beq	r5,zero,a104 <__alt_data_end+0xfc00a104>
    a144:	19800017 	ldw	r6,0(r3)
    a148:	3144d83a 	srl	r2,r6,r5
    a14c:	114a983a 	sll	r5,r2,r5
    a150:	317ff41e 	bne	r6,r5,a124 <__alt_data_end+0xfc00a124>
    a154:	003feb06 	br	a104 <__alt_data_end+0xfc00a104>
    a158:	1085883a 	add	r2,r2,r2
    a15c:	1085883a 	add	r2,r2,r2
    a160:	2087883a 	add	r3,r4,r2
    a164:	003fe706 	br	a104 <__alt_data_end+0xfc00a104>
    a168:	f800283a 	ret
    a16c:	0005883a 	mov	r2,zero
    a170:	f800283a 	ret

0000a174 <_realloc_r>:
    a174:	defff604 	addi	sp,sp,-40
    a178:	dc800215 	stw	r18,8(sp)
    a17c:	dfc00915 	stw	ra,36(sp)
    a180:	df000815 	stw	fp,32(sp)
    a184:	ddc00715 	stw	r23,28(sp)
    a188:	dd800615 	stw	r22,24(sp)
    a18c:	dd400515 	stw	r21,20(sp)
    a190:	dd000415 	stw	r20,16(sp)
    a194:	dcc00315 	stw	r19,12(sp)
    a198:	dc400115 	stw	r17,4(sp)
    a19c:	dc000015 	stw	r16,0(sp)
    a1a0:	3025883a 	mov	r18,r6
    a1a4:	2800b726 	beq	r5,zero,a484 <_realloc_r+0x310>
    a1a8:	282b883a 	mov	r21,r5
    a1ac:	2029883a 	mov	r20,r4
    a1b0:	00103fc0 	call	103fc <__malloc_lock>
    a1b4:	a8bfff17 	ldw	r2,-4(r21)
    a1b8:	043fff04 	movi	r16,-4
    a1bc:	90c002c4 	addi	r3,r18,11
    a1c0:	01000584 	movi	r4,22
    a1c4:	acfffe04 	addi	r19,r21,-8
    a1c8:	1420703a 	and	r16,r2,r16
    a1cc:	20c0332e 	bgeu	r4,r3,a29c <_realloc_r+0x128>
    a1d0:	047ffe04 	movi	r17,-8
    a1d4:	1c62703a 	and	r17,r3,r17
    a1d8:	8807883a 	mov	r3,r17
    a1dc:	88005816 	blt	r17,zero,a340 <_realloc_r+0x1cc>
    a1e0:	8c805736 	bltu	r17,r18,a340 <_realloc_r+0x1cc>
    a1e4:	80c0300e 	bge	r16,r3,a2a8 <_realloc_r+0x134>
    a1e8:	07000074 	movhi	fp,1
    a1ec:	e7153104 	addi	fp,fp,21700
    a1f0:	e1c00217 	ldw	r7,8(fp)
    a1f4:	9c09883a 	add	r4,r19,r16
    a1f8:	22000117 	ldw	r8,4(r4)
    a1fc:	21c06326 	beq	r4,r7,a38c <_realloc_r+0x218>
    a200:	017fff84 	movi	r5,-2
    a204:	414a703a 	and	r5,r8,r5
    a208:	214b883a 	add	r5,r4,r5
    a20c:	29800117 	ldw	r6,4(r5)
    a210:	3180004c 	andi	r6,r6,1
    a214:	30003f26 	beq	r6,zero,a314 <_realloc_r+0x1a0>
    a218:	1080004c 	andi	r2,r2,1
    a21c:	10008326 	beq	r2,zero,a42c <_realloc_r+0x2b8>
    a220:	900b883a 	mov	r5,r18
    a224:	a009883a 	mov	r4,r20
    a228:	00084000 	call	8400 <_malloc_r>
    a22c:	1025883a 	mov	r18,r2
    a230:	10011e26 	beq	r2,zero,a6ac <_realloc_r+0x538>
    a234:	a93fff17 	ldw	r4,-4(r21)
    a238:	10fffe04 	addi	r3,r2,-8
    a23c:	00bfff84 	movi	r2,-2
    a240:	2084703a 	and	r2,r4,r2
    a244:	9885883a 	add	r2,r19,r2
    a248:	1880ee26 	beq	r3,r2,a604 <_realloc_r+0x490>
    a24c:	81bfff04 	addi	r6,r16,-4
    a250:	00800904 	movi	r2,36
    a254:	1180b836 	bltu	r2,r6,a538 <_realloc_r+0x3c4>
    a258:	00c004c4 	movi	r3,19
    a25c:	19809636 	bltu	r3,r6,a4b8 <_realloc_r+0x344>
    a260:	9005883a 	mov	r2,r18
    a264:	a807883a 	mov	r3,r21
    a268:	19000017 	ldw	r4,0(r3)
    a26c:	11000015 	stw	r4,0(r2)
    a270:	19000117 	ldw	r4,4(r3)
    a274:	11000115 	stw	r4,4(r2)
    a278:	18c00217 	ldw	r3,8(r3)
    a27c:	10c00215 	stw	r3,8(r2)
    a280:	a80b883a 	mov	r5,r21
    a284:	a009883a 	mov	r4,r20
    a288:	00078080 	call	7808 <_free_r>
    a28c:	a009883a 	mov	r4,r20
    a290:	00104200 	call	10420 <__malloc_unlock>
    a294:	9005883a 	mov	r2,r18
    a298:	00001206 	br	a2e4 <_realloc_r+0x170>
    a29c:	00c00404 	movi	r3,16
    a2a0:	1823883a 	mov	r17,r3
    a2a4:	003fce06 	br	a1e0 <__alt_data_end+0xfc00a1e0>
    a2a8:	a825883a 	mov	r18,r21
    a2ac:	8445c83a 	sub	r2,r16,r17
    a2b0:	00c003c4 	movi	r3,15
    a2b4:	18802636 	bltu	r3,r2,a350 <_realloc_r+0x1dc>
    a2b8:	99800117 	ldw	r6,4(r19)
    a2bc:	9c07883a 	add	r3,r19,r16
    a2c0:	3180004c 	andi	r6,r6,1
    a2c4:	3420b03a 	or	r16,r6,r16
    a2c8:	9c000115 	stw	r16,4(r19)
    a2cc:	18800117 	ldw	r2,4(r3)
    a2d0:	10800054 	ori	r2,r2,1
    a2d4:	18800115 	stw	r2,4(r3)
    a2d8:	a009883a 	mov	r4,r20
    a2dc:	00104200 	call	10420 <__malloc_unlock>
    a2e0:	9005883a 	mov	r2,r18
    a2e4:	dfc00917 	ldw	ra,36(sp)
    a2e8:	df000817 	ldw	fp,32(sp)
    a2ec:	ddc00717 	ldw	r23,28(sp)
    a2f0:	dd800617 	ldw	r22,24(sp)
    a2f4:	dd400517 	ldw	r21,20(sp)
    a2f8:	dd000417 	ldw	r20,16(sp)
    a2fc:	dcc00317 	ldw	r19,12(sp)
    a300:	dc800217 	ldw	r18,8(sp)
    a304:	dc400117 	ldw	r17,4(sp)
    a308:	dc000017 	ldw	r16,0(sp)
    a30c:	dec00a04 	addi	sp,sp,40
    a310:	f800283a 	ret
    a314:	017fff04 	movi	r5,-4
    a318:	414a703a 	and	r5,r8,r5
    a31c:	814d883a 	add	r6,r16,r5
    a320:	30c01f16 	blt	r6,r3,a3a0 <_realloc_r+0x22c>
    a324:	20800317 	ldw	r2,12(r4)
    a328:	20c00217 	ldw	r3,8(r4)
    a32c:	a825883a 	mov	r18,r21
    a330:	3021883a 	mov	r16,r6
    a334:	18800315 	stw	r2,12(r3)
    a338:	10c00215 	stw	r3,8(r2)
    a33c:	003fdb06 	br	a2ac <__alt_data_end+0xfc00a2ac>
    a340:	00800304 	movi	r2,12
    a344:	a0800015 	stw	r2,0(r20)
    a348:	0005883a 	mov	r2,zero
    a34c:	003fe506 	br	a2e4 <__alt_data_end+0xfc00a2e4>
    a350:	98c00117 	ldw	r3,4(r19)
    a354:	9c4b883a 	add	r5,r19,r17
    a358:	11000054 	ori	r4,r2,1
    a35c:	18c0004c 	andi	r3,r3,1
    a360:	1c62b03a 	or	r17,r3,r17
    a364:	9c400115 	stw	r17,4(r19)
    a368:	29000115 	stw	r4,4(r5)
    a36c:	2885883a 	add	r2,r5,r2
    a370:	10c00117 	ldw	r3,4(r2)
    a374:	29400204 	addi	r5,r5,8
    a378:	a009883a 	mov	r4,r20
    a37c:	18c00054 	ori	r3,r3,1
    a380:	10c00115 	stw	r3,4(r2)
    a384:	00078080 	call	7808 <_free_r>
    a388:	003fd306 	br	a2d8 <__alt_data_end+0xfc00a2d8>
    a38c:	017fff04 	movi	r5,-4
    a390:	414a703a 	and	r5,r8,r5
    a394:	89800404 	addi	r6,r17,16
    a398:	8151883a 	add	r8,r16,r5
    a39c:	4180590e 	bge	r8,r6,a504 <_realloc_r+0x390>
    a3a0:	1080004c 	andi	r2,r2,1
    a3a4:	103f9e1e 	bne	r2,zero,a220 <__alt_data_end+0xfc00a220>
    a3a8:	adbffe17 	ldw	r22,-8(r21)
    a3ac:	00bfff04 	movi	r2,-4
    a3b0:	9dadc83a 	sub	r22,r19,r22
    a3b4:	b1800117 	ldw	r6,4(r22)
    a3b8:	3084703a 	and	r2,r6,r2
    a3bc:	20002026 	beq	r4,zero,a440 <_realloc_r+0x2cc>
    a3c0:	80af883a 	add	r23,r16,r2
    a3c4:	b96f883a 	add	r23,r23,r5
    a3c8:	21c05f26 	beq	r4,r7,a548 <_realloc_r+0x3d4>
    a3cc:	b8c01c16 	blt	r23,r3,a440 <_realloc_r+0x2cc>
    a3d0:	20800317 	ldw	r2,12(r4)
    a3d4:	20c00217 	ldw	r3,8(r4)
    a3d8:	81bfff04 	addi	r6,r16,-4
    a3dc:	01000904 	movi	r4,36
    a3e0:	18800315 	stw	r2,12(r3)
    a3e4:	10c00215 	stw	r3,8(r2)
    a3e8:	b0c00217 	ldw	r3,8(r22)
    a3ec:	b0800317 	ldw	r2,12(r22)
    a3f0:	b4800204 	addi	r18,r22,8
    a3f4:	18800315 	stw	r2,12(r3)
    a3f8:	10c00215 	stw	r3,8(r2)
    a3fc:	21801b36 	bltu	r4,r6,a46c <_realloc_r+0x2f8>
    a400:	008004c4 	movi	r2,19
    a404:	1180352e 	bgeu	r2,r6,a4dc <_realloc_r+0x368>
    a408:	a8800017 	ldw	r2,0(r21)
    a40c:	b0800215 	stw	r2,8(r22)
    a410:	a8800117 	ldw	r2,4(r21)
    a414:	b0800315 	stw	r2,12(r22)
    a418:	008006c4 	movi	r2,27
    a41c:	11807f36 	bltu	r2,r6,a61c <_realloc_r+0x4a8>
    a420:	b0800404 	addi	r2,r22,16
    a424:	ad400204 	addi	r21,r21,8
    a428:	00002d06 	br	a4e0 <_realloc_r+0x36c>
    a42c:	adbffe17 	ldw	r22,-8(r21)
    a430:	00bfff04 	movi	r2,-4
    a434:	9dadc83a 	sub	r22,r19,r22
    a438:	b1000117 	ldw	r4,4(r22)
    a43c:	2084703a 	and	r2,r4,r2
    a440:	b03f7726 	beq	r22,zero,a220 <__alt_data_end+0xfc00a220>
    a444:	80af883a 	add	r23,r16,r2
    a448:	b8ff7516 	blt	r23,r3,a220 <__alt_data_end+0xfc00a220>
    a44c:	b0800317 	ldw	r2,12(r22)
    a450:	b0c00217 	ldw	r3,8(r22)
    a454:	81bfff04 	addi	r6,r16,-4
    a458:	01000904 	movi	r4,36
    a45c:	18800315 	stw	r2,12(r3)
    a460:	10c00215 	stw	r3,8(r2)
    a464:	b4800204 	addi	r18,r22,8
    a468:	21bfe52e 	bgeu	r4,r6,a400 <__alt_data_end+0xfc00a400>
    a46c:	a80b883a 	mov	r5,r21
    a470:	9009883a 	mov	r4,r18
    a474:	0008e380 	call	8e38 <memmove>
    a478:	b821883a 	mov	r16,r23
    a47c:	b027883a 	mov	r19,r22
    a480:	003f8a06 	br	a2ac <__alt_data_end+0xfc00a2ac>
    a484:	300b883a 	mov	r5,r6
    a488:	dfc00917 	ldw	ra,36(sp)
    a48c:	df000817 	ldw	fp,32(sp)
    a490:	ddc00717 	ldw	r23,28(sp)
    a494:	dd800617 	ldw	r22,24(sp)
    a498:	dd400517 	ldw	r21,20(sp)
    a49c:	dd000417 	ldw	r20,16(sp)
    a4a0:	dcc00317 	ldw	r19,12(sp)
    a4a4:	dc800217 	ldw	r18,8(sp)
    a4a8:	dc400117 	ldw	r17,4(sp)
    a4ac:	dc000017 	ldw	r16,0(sp)
    a4b0:	dec00a04 	addi	sp,sp,40
    a4b4:	00084001 	jmpi	8400 <_malloc_r>
    a4b8:	a8c00017 	ldw	r3,0(r21)
    a4bc:	90c00015 	stw	r3,0(r18)
    a4c0:	a8c00117 	ldw	r3,4(r21)
    a4c4:	90c00115 	stw	r3,4(r18)
    a4c8:	00c006c4 	movi	r3,27
    a4cc:	19804536 	bltu	r3,r6,a5e4 <_realloc_r+0x470>
    a4d0:	90800204 	addi	r2,r18,8
    a4d4:	a8c00204 	addi	r3,r21,8
    a4d8:	003f6306 	br	a268 <__alt_data_end+0xfc00a268>
    a4dc:	9005883a 	mov	r2,r18
    a4e0:	a8c00017 	ldw	r3,0(r21)
    a4e4:	b821883a 	mov	r16,r23
    a4e8:	b027883a 	mov	r19,r22
    a4ec:	10c00015 	stw	r3,0(r2)
    a4f0:	a8c00117 	ldw	r3,4(r21)
    a4f4:	10c00115 	stw	r3,4(r2)
    a4f8:	a8c00217 	ldw	r3,8(r21)
    a4fc:	10c00215 	stw	r3,8(r2)
    a500:	003f6a06 	br	a2ac <__alt_data_end+0xfc00a2ac>
    a504:	9c67883a 	add	r19,r19,r17
    a508:	4445c83a 	sub	r2,r8,r17
    a50c:	e4c00215 	stw	r19,8(fp)
    a510:	10800054 	ori	r2,r2,1
    a514:	98800115 	stw	r2,4(r19)
    a518:	a8bfff17 	ldw	r2,-4(r21)
    a51c:	a009883a 	mov	r4,r20
    a520:	1080004c 	andi	r2,r2,1
    a524:	1462b03a 	or	r17,r2,r17
    a528:	ac7fff15 	stw	r17,-4(r21)
    a52c:	00104200 	call	10420 <__malloc_unlock>
    a530:	a805883a 	mov	r2,r21
    a534:	003f6b06 	br	a2e4 <__alt_data_end+0xfc00a2e4>
    a538:	a80b883a 	mov	r5,r21
    a53c:	9009883a 	mov	r4,r18
    a540:	0008e380 	call	8e38 <memmove>
    a544:	003f4e06 	br	a280 <__alt_data_end+0xfc00a280>
    a548:	89000404 	addi	r4,r17,16
    a54c:	b93fbc16 	blt	r23,r4,a440 <__alt_data_end+0xfc00a440>
    a550:	b0800317 	ldw	r2,12(r22)
    a554:	b0c00217 	ldw	r3,8(r22)
    a558:	81bfff04 	addi	r6,r16,-4
    a55c:	01000904 	movi	r4,36
    a560:	18800315 	stw	r2,12(r3)
    a564:	10c00215 	stw	r3,8(r2)
    a568:	b4800204 	addi	r18,r22,8
    a56c:	21804336 	bltu	r4,r6,a67c <_realloc_r+0x508>
    a570:	008004c4 	movi	r2,19
    a574:	11803f2e 	bgeu	r2,r6,a674 <_realloc_r+0x500>
    a578:	a8800017 	ldw	r2,0(r21)
    a57c:	b0800215 	stw	r2,8(r22)
    a580:	a8800117 	ldw	r2,4(r21)
    a584:	b0800315 	stw	r2,12(r22)
    a588:	008006c4 	movi	r2,27
    a58c:	11803f36 	bltu	r2,r6,a68c <_realloc_r+0x518>
    a590:	b0800404 	addi	r2,r22,16
    a594:	ad400204 	addi	r21,r21,8
    a598:	a8c00017 	ldw	r3,0(r21)
    a59c:	10c00015 	stw	r3,0(r2)
    a5a0:	a8c00117 	ldw	r3,4(r21)
    a5a4:	10c00115 	stw	r3,4(r2)
    a5a8:	a8c00217 	ldw	r3,8(r21)
    a5ac:	10c00215 	stw	r3,8(r2)
    a5b0:	b447883a 	add	r3,r22,r17
    a5b4:	bc45c83a 	sub	r2,r23,r17
    a5b8:	e0c00215 	stw	r3,8(fp)
    a5bc:	10800054 	ori	r2,r2,1
    a5c0:	18800115 	stw	r2,4(r3)
    a5c4:	b0800117 	ldw	r2,4(r22)
    a5c8:	a009883a 	mov	r4,r20
    a5cc:	1080004c 	andi	r2,r2,1
    a5d0:	1462b03a 	or	r17,r2,r17
    a5d4:	b4400115 	stw	r17,4(r22)
    a5d8:	00104200 	call	10420 <__malloc_unlock>
    a5dc:	9005883a 	mov	r2,r18
    a5e0:	003f4006 	br	a2e4 <__alt_data_end+0xfc00a2e4>
    a5e4:	a8c00217 	ldw	r3,8(r21)
    a5e8:	90c00215 	stw	r3,8(r18)
    a5ec:	a8c00317 	ldw	r3,12(r21)
    a5f0:	90c00315 	stw	r3,12(r18)
    a5f4:	30801126 	beq	r6,r2,a63c <_realloc_r+0x4c8>
    a5f8:	90800404 	addi	r2,r18,16
    a5fc:	a8c00404 	addi	r3,r21,16
    a600:	003f1906 	br	a268 <__alt_data_end+0xfc00a268>
    a604:	90ffff17 	ldw	r3,-4(r18)
    a608:	00bfff04 	movi	r2,-4
    a60c:	a825883a 	mov	r18,r21
    a610:	1884703a 	and	r2,r3,r2
    a614:	80a1883a 	add	r16,r16,r2
    a618:	003f2406 	br	a2ac <__alt_data_end+0xfc00a2ac>
    a61c:	a8800217 	ldw	r2,8(r21)
    a620:	b0800415 	stw	r2,16(r22)
    a624:	a8800317 	ldw	r2,12(r21)
    a628:	b0800515 	stw	r2,20(r22)
    a62c:	31000a26 	beq	r6,r4,a658 <_realloc_r+0x4e4>
    a630:	b0800604 	addi	r2,r22,24
    a634:	ad400404 	addi	r21,r21,16
    a638:	003fa906 	br	a4e0 <__alt_data_end+0xfc00a4e0>
    a63c:	a9000417 	ldw	r4,16(r21)
    a640:	90800604 	addi	r2,r18,24
    a644:	a8c00604 	addi	r3,r21,24
    a648:	91000415 	stw	r4,16(r18)
    a64c:	a9000517 	ldw	r4,20(r21)
    a650:	91000515 	stw	r4,20(r18)
    a654:	003f0406 	br	a268 <__alt_data_end+0xfc00a268>
    a658:	a8c00417 	ldw	r3,16(r21)
    a65c:	ad400604 	addi	r21,r21,24
    a660:	b0800804 	addi	r2,r22,32
    a664:	b0c00615 	stw	r3,24(r22)
    a668:	a8ffff17 	ldw	r3,-4(r21)
    a66c:	b0c00715 	stw	r3,28(r22)
    a670:	003f9b06 	br	a4e0 <__alt_data_end+0xfc00a4e0>
    a674:	9005883a 	mov	r2,r18
    a678:	003fc706 	br	a598 <__alt_data_end+0xfc00a598>
    a67c:	a80b883a 	mov	r5,r21
    a680:	9009883a 	mov	r4,r18
    a684:	0008e380 	call	8e38 <memmove>
    a688:	003fc906 	br	a5b0 <__alt_data_end+0xfc00a5b0>
    a68c:	a8800217 	ldw	r2,8(r21)
    a690:	b0800415 	stw	r2,16(r22)
    a694:	a8800317 	ldw	r2,12(r21)
    a698:	b0800515 	stw	r2,20(r22)
    a69c:	31000726 	beq	r6,r4,a6bc <_realloc_r+0x548>
    a6a0:	b0800604 	addi	r2,r22,24
    a6a4:	ad400404 	addi	r21,r21,16
    a6a8:	003fbb06 	br	a598 <__alt_data_end+0xfc00a598>
    a6ac:	a009883a 	mov	r4,r20
    a6b0:	00104200 	call	10420 <__malloc_unlock>
    a6b4:	0005883a 	mov	r2,zero
    a6b8:	003f0a06 	br	a2e4 <__alt_data_end+0xfc00a2e4>
    a6bc:	a8c00417 	ldw	r3,16(r21)
    a6c0:	ad400604 	addi	r21,r21,24
    a6c4:	b0800804 	addi	r2,r22,32
    a6c8:	b0c00615 	stw	r3,24(r22)
    a6cc:	a8ffff17 	ldw	r3,-4(r21)
    a6d0:	b0c00715 	stw	r3,28(r22)
    a6d4:	003fb006 	br	a598 <__alt_data_end+0xfc00a598>

0000a6d8 <__fpclassifyd>:
    a6d8:	00a00034 	movhi	r2,32768
    a6dc:	10bfffc4 	addi	r2,r2,-1
    a6e0:	2884703a 	and	r2,r5,r2
    a6e4:	10000726 	beq	r2,zero,a704 <__fpclassifyd+0x2c>
    a6e8:	00fffc34 	movhi	r3,65520
    a6ec:	019ff834 	movhi	r6,32736
    a6f0:	28c7883a 	add	r3,r5,r3
    a6f4:	31bfffc4 	addi	r6,r6,-1
    a6f8:	30c00536 	bltu	r6,r3,a710 <__fpclassifyd+0x38>
    a6fc:	00800104 	movi	r2,4
    a700:	f800283a 	ret
    a704:	2000021e 	bne	r4,zero,a710 <__fpclassifyd+0x38>
    a708:	00800084 	movi	r2,2
    a70c:	f800283a 	ret
    a710:	00dffc34 	movhi	r3,32752
    a714:	019ff834 	movhi	r6,32736
    a718:	28cb883a 	add	r5,r5,r3
    a71c:	31bfffc4 	addi	r6,r6,-1
    a720:	317ff62e 	bgeu	r6,r5,a6fc <__alt_data_end+0xfc00a6fc>
    a724:	01400434 	movhi	r5,16
    a728:	297fffc4 	addi	r5,r5,-1
    a72c:	28800236 	bltu	r5,r2,a738 <__fpclassifyd+0x60>
    a730:	008000c4 	movi	r2,3
    a734:	f800283a 	ret
    a738:	10c00226 	beq	r2,r3,a744 <__fpclassifyd+0x6c>
    a73c:	0005883a 	mov	r2,zero
    a740:	f800283a 	ret
    a744:	2005003a 	cmpeq	r2,r4,zero
    a748:	f800283a 	ret

0000a74c <_sbrk_r>:
    a74c:	defffd04 	addi	sp,sp,-12
    a750:	dc000015 	stw	r16,0(sp)
    a754:	040000b4 	movhi	r16,2
    a758:	dc400115 	stw	r17,4(sp)
    a75c:	8421c004 	addi	r16,r16,-30976
    a760:	2023883a 	mov	r17,r4
    a764:	2809883a 	mov	r4,r5
    a768:	dfc00215 	stw	ra,8(sp)
    a76c:	80000015 	stw	zero,0(r16)
    a770:	00106080 	call	10608 <sbrk>
    a774:	00ffffc4 	movi	r3,-1
    a778:	10c00526 	beq	r2,r3,a790 <_sbrk_r+0x44>
    a77c:	dfc00217 	ldw	ra,8(sp)
    a780:	dc400117 	ldw	r17,4(sp)
    a784:	dc000017 	ldw	r16,0(sp)
    a788:	dec00304 	addi	sp,sp,12
    a78c:	f800283a 	ret
    a790:	80c00017 	ldw	r3,0(r16)
    a794:	183ff926 	beq	r3,zero,a77c <__alt_data_end+0xfc00a77c>
    a798:	88c00015 	stw	r3,0(r17)
    a79c:	003ff706 	br	a77c <__alt_data_end+0xfc00a77c>

0000a7a0 <__sread>:
    a7a0:	defffe04 	addi	sp,sp,-8
    a7a4:	dc000015 	stw	r16,0(sp)
    a7a8:	2821883a 	mov	r16,r5
    a7ac:	2940038f 	ldh	r5,14(r5)
    a7b0:	dfc00115 	stw	ra,4(sp)
    a7b4:	000c65c0 	call	c65c <_read_r>
    a7b8:	10000716 	blt	r2,zero,a7d8 <__sread+0x38>
    a7bc:	80c01417 	ldw	r3,80(r16)
    a7c0:	1887883a 	add	r3,r3,r2
    a7c4:	80c01415 	stw	r3,80(r16)
    a7c8:	dfc00117 	ldw	ra,4(sp)
    a7cc:	dc000017 	ldw	r16,0(sp)
    a7d0:	dec00204 	addi	sp,sp,8
    a7d4:	f800283a 	ret
    a7d8:	80c0030b 	ldhu	r3,12(r16)
    a7dc:	18fbffcc 	andi	r3,r3,61439
    a7e0:	80c0030d 	sth	r3,12(r16)
    a7e4:	dfc00117 	ldw	ra,4(sp)
    a7e8:	dc000017 	ldw	r16,0(sp)
    a7ec:	dec00204 	addi	sp,sp,8
    a7f0:	f800283a 	ret

0000a7f4 <__seofread>:
    a7f4:	0005883a 	mov	r2,zero
    a7f8:	f800283a 	ret

0000a7fc <__swrite>:
    a7fc:	2880030b 	ldhu	r2,12(r5)
    a800:	defffb04 	addi	sp,sp,-20
    a804:	dcc00315 	stw	r19,12(sp)
    a808:	dc800215 	stw	r18,8(sp)
    a80c:	dc400115 	stw	r17,4(sp)
    a810:	dc000015 	stw	r16,0(sp)
    a814:	dfc00415 	stw	ra,16(sp)
    a818:	10c0400c 	andi	r3,r2,256
    a81c:	2821883a 	mov	r16,r5
    a820:	2023883a 	mov	r17,r4
    a824:	3025883a 	mov	r18,r6
    a828:	3827883a 	mov	r19,r7
    a82c:	18000526 	beq	r3,zero,a844 <__swrite+0x48>
    a830:	2940038f 	ldh	r5,14(r5)
    a834:	01c00084 	movi	r7,2
    a838:	000d883a 	mov	r6,zero
    a83c:	000c5fc0 	call	c5fc <_lseek_r>
    a840:	8080030b 	ldhu	r2,12(r16)
    a844:	8140038f 	ldh	r5,14(r16)
    a848:	10bbffcc 	andi	r2,r2,61439
    a84c:	980f883a 	mov	r7,r19
    a850:	900d883a 	mov	r6,r18
    a854:	8809883a 	mov	r4,r17
    a858:	8080030d 	sth	r2,12(r16)
    a85c:	dfc00417 	ldw	ra,16(sp)
    a860:	dcc00317 	ldw	r19,12(sp)
    a864:	dc800217 	ldw	r18,8(sp)
    a868:	dc400117 	ldw	r17,4(sp)
    a86c:	dc000017 	ldw	r16,0(sp)
    a870:	dec00504 	addi	sp,sp,20
    a874:	000c0b01 	jmpi	c0b0 <_write_r>

0000a878 <__sseek>:
    a878:	defffe04 	addi	sp,sp,-8
    a87c:	dc000015 	stw	r16,0(sp)
    a880:	2821883a 	mov	r16,r5
    a884:	2940038f 	ldh	r5,14(r5)
    a888:	dfc00115 	stw	ra,4(sp)
    a88c:	000c5fc0 	call	c5fc <_lseek_r>
    a890:	00ffffc4 	movi	r3,-1
    a894:	10c00826 	beq	r2,r3,a8b8 <__sseek+0x40>
    a898:	80c0030b 	ldhu	r3,12(r16)
    a89c:	80801415 	stw	r2,80(r16)
    a8a0:	18c40014 	ori	r3,r3,4096
    a8a4:	80c0030d 	sth	r3,12(r16)
    a8a8:	dfc00117 	ldw	ra,4(sp)
    a8ac:	dc000017 	ldw	r16,0(sp)
    a8b0:	dec00204 	addi	sp,sp,8
    a8b4:	f800283a 	ret
    a8b8:	80c0030b 	ldhu	r3,12(r16)
    a8bc:	18fbffcc 	andi	r3,r3,61439
    a8c0:	80c0030d 	sth	r3,12(r16)
    a8c4:	dfc00117 	ldw	ra,4(sp)
    a8c8:	dc000017 	ldw	r16,0(sp)
    a8cc:	dec00204 	addi	sp,sp,8
    a8d0:	f800283a 	ret

0000a8d4 <__sclose>:
    a8d4:	2940038f 	ldh	r5,14(r5)
    a8d8:	000c1101 	jmpi	c110 <_close_r>

0000a8dc <strcmp>:
    a8dc:	2144b03a 	or	r2,r4,r5
    a8e0:	108000cc 	andi	r2,r2,3
    a8e4:	1000171e 	bne	r2,zero,a944 <strcmp+0x68>
    a8e8:	20800017 	ldw	r2,0(r4)
    a8ec:	28c00017 	ldw	r3,0(r5)
    a8f0:	10c0141e 	bne	r2,r3,a944 <strcmp+0x68>
    a8f4:	027fbff4 	movhi	r9,65279
    a8f8:	4a7fbfc4 	addi	r9,r9,-257
    a8fc:	0086303a 	nor	r3,zero,r2
    a900:	02202074 	movhi	r8,32897
    a904:	1245883a 	add	r2,r2,r9
    a908:	42202004 	addi	r8,r8,-32640
    a90c:	10c4703a 	and	r2,r2,r3
    a910:	1204703a 	and	r2,r2,r8
    a914:	10000226 	beq	r2,zero,a920 <strcmp+0x44>
    a918:	00002306 	br	a9a8 <strcmp+0xcc>
    a91c:	1000221e 	bne	r2,zero,a9a8 <strcmp+0xcc>
    a920:	21000104 	addi	r4,r4,4
    a924:	20c00017 	ldw	r3,0(r4)
    a928:	29400104 	addi	r5,r5,4
    a92c:	29800017 	ldw	r6,0(r5)
    a930:	1a4f883a 	add	r7,r3,r9
    a934:	00c4303a 	nor	r2,zero,r3
    a938:	3884703a 	and	r2,r7,r2
    a93c:	1204703a 	and	r2,r2,r8
    a940:	19bff626 	beq	r3,r6,a91c <__alt_data_end+0xfc00a91c>
    a944:	20800003 	ldbu	r2,0(r4)
    a948:	10c03fcc 	andi	r3,r2,255
    a94c:	18c0201c 	xori	r3,r3,128
    a950:	18ffe004 	addi	r3,r3,-128
    a954:	18000c26 	beq	r3,zero,a988 <strcmp+0xac>
    a958:	29800007 	ldb	r6,0(r5)
    a95c:	19800326 	beq	r3,r6,a96c <strcmp+0x90>
    a960:	00001306 	br	a9b0 <strcmp+0xd4>
    a964:	29800007 	ldb	r6,0(r5)
    a968:	11800b1e 	bne	r2,r6,a998 <strcmp+0xbc>
    a96c:	21000044 	addi	r4,r4,1
    a970:	20c00003 	ldbu	r3,0(r4)
    a974:	29400044 	addi	r5,r5,1
    a978:	18803fcc 	andi	r2,r3,255
    a97c:	1080201c 	xori	r2,r2,128
    a980:	10bfe004 	addi	r2,r2,-128
    a984:	103ff71e 	bne	r2,zero,a964 <__alt_data_end+0xfc00a964>
    a988:	0007883a 	mov	r3,zero
    a98c:	28800003 	ldbu	r2,0(r5)
    a990:	1885c83a 	sub	r2,r3,r2
    a994:	f800283a 	ret
    a998:	28800003 	ldbu	r2,0(r5)
    a99c:	18c03fcc 	andi	r3,r3,255
    a9a0:	1885c83a 	sub	r2,r3,r2
    a9a4:	f800283a 	ret
    a9a8:	0005883a 	mov	r2,zero
    a9ac:	f800283a 	ret
    a9b0:	10c03fcc 	andi	r3,r2,255
    a9b4:	003ff506 	br	a98c <__alt_data_end+0xfc00a98c>

0000a9b8 <__sprint_r.part.0>:
    a9b8:	28801917 	ldw	r2,100(r5)
    a9bc:	defff604 	addi	sp,sp,-40
    a9c0:	dd400515 	stw	r21,20(sp)
    a9c4:	dfc00915 	stw	ra,36(sp)
    a9c8:	df000815 	stw	fp,32(sp)
    a9cc:	ddc00715 	stw	r23,28(sp)
    a9d0:	dd800615 	stw	r22,24(sp)
    a9d4:	dd000415 	stw	r20,16(sp)
    a9d8:	dcc00315 	stw	r19,12(sp)
    a9dc:	dc800215 	stw	r18,8(sp)
    a9e0:	dc400115 	stw	r17,4(sp)
    a9e4:	dc000015 	stw	r16,0(sp)
    a9e8:	1088000c 	andi	r2,r2,8192
    a9ec:	302b883a 	mov	r21,r6
    a9f0:	10002e26 	beq	r2,zero,aaac <__sprint_r.part.0+0xf4>
    a9f4:	30800217 	ldw	r2,8(r6)
    a9f8:	35800017 	ldw	r22,0(r6)
    a9fc:	10002926 	beq	r2,zero,aaa4 <__sprint_r.part.0+0xec>
    aa00:	2827883a 	mov	r19,r5
    aa04:	2029883a 	mov	r20,r4
    aa08:	b5c00104 	addi	r23,r22,4
    aa0c:	04bfffc4 	movi	r18,-1
    aa10:	bc400017 	ldw	r17,0(r23)
    aa14:	b4000017 	ldw	r16,0(r22)
    aa18:	0039883a 	mov	fp,zero
    aa1c:	8822d0ba 	srli	r17,r17,2
    aa20:	8800031e 	bne	r17,zero,aa30 <__sprint_r.part.0+0x78>
    aa24:	00001806 	br	aa88 <__sprint_r.part.0+0xd0>
    aa28:	84000104 	addi	r16,r16,4
    aa2c:	8f001526 	beq	r17,fp,aa84 <__sprint_r.part.0+0xcc>
    aa30:	81400017 	ldw	r5,0(r16)
    aa34:	980d883a 	mov	r6,r19
    aa38:	a009883a 	mov	r4,r20
    aa3c:	000c4a80 	call	c4a8 <_fputwc_r>
    aa40:	e7000044 	addi	fp,fp,1
    aa44:	14bff81e 	bne	r2,r18,aa28 <__alt_data_end+0xfc00aa28>
    aa48:	9005883a 	mov	r2,r18
    aa4c:	a8000215 	stw	zero,8(r21)
    aa50:	a8000115 	stw	zero,4(r21)
    aa54:	dfc00917 	ldw	ra,36(sp)
    aa58:	df000817 	ldw	fp,32(sp)
    aa5c:	ddc00717 	ldw	r23,28(sp)
    aa60:	dd800617 	ldw	r22,24(sp)
    aa64:	dd400517 	ldw	r21,20(sp)
    aa68:	dd000417 	ldw	r20,16(sp)
    aa6c:	dcc00317 	ldw	r19,12(sp)
    aa70:	dc800217 	ldw	r18,8(sp)
    aa74:	dc400117 	ldw	r17,4(sp)
    aa78:	dc000017 	ldw	r16,0(sp)
    aa7c:	dec00a04 	addi	sp,sp,40
    aa80:	f800283a 	ret
    aa84:	a8800217 	ldw	r2,8(r21)
    aa88:	8c63883a 	add	r17,r17,r17
    aa8c:	8c63883a 	add	r17,r17,r17
    aa90:	1445c83a 	sub	r2,r2,r17
    aa94:	a8800215 	stw	r2,8(r21)
    aa98:	b5800204 	addi	r22,r22,8
    aa9c:	bdc00204 	addi	r23,r23,8
    aaa0:	103fdb1e 	bne	r2,zero,aa10 <__alt_data_end+0xfc00aa10>
    aaa4:	0005883a 	mov	r2,zero
    aaa8:	003fe806 	br	aa4c <__alt_data_end+0xfc00aa4c>
    aaac:	0007b180 	call	7b18 <__sfvwrite_r>
    aab0:	003fe606 	br	aa4c <__alt_data_end+0xfc00aa4c>

0000aab4 <__sprint_r>:
    aab4:	30c00217 	ldw	r3,8(r6)
    aab8:	18000126 	beq	r3,zero,aac0 <__sprint_r+0xc>
    aabc:	000a9b81 	jmpi	a9b8 <__sprint_r.part.0>
    aac0:	30000115 	stw	zero,4(r6)
    aac4:	0005883a 	mov	r2,zero
    aac8:	f800283a 	ret

0000aacc <___vfiprintf_internal_r>:
    aacc:	deffca04 	addi	sp,sp,-216
    aad0:	dd403115 	stw	r21,196(sp)
    aad4:	dfc03515 	stw	ra,212(sp)
    aad8:	df003415 	stw	fp,208(sp)
    aadc:	ddc03315 	stw	r23,204(sp)
    aae0:	dd803215 	stw	r22,200(sp)
    aae4:	dd003015 	stw	r20,192(sp)
    aae8:	dcc02f15 	stw	r19,188(sp)
    aaec:	dc802e15 	stw	r18,184(sp)
    aaf0:	dc402d15 	stw	r17,180(sp)
    aaf4:	dc002c15 	stw	r16,176(sp)
    aaf8:	d9002115 	stw	r4,132(sp)
    aafc:	d9402015 	stw	r5,128(sp)
    ab00:	d9c02215 	stw	r7,136(sp)
    ab04:	302b883a 	mov	r21,r6
    ab08:	20000226 	beq	r4,zero,ab14 <___vfiprintf_internal_r+0x48>
    ab0c:	20800e17 	ldw	r2,56(r4)
    ab10:	1000cf26 	beq	r2,zero,ae50 <___vfiprintf_internal_r+0x384>
    ab14:	d8c02017 	ldw	r3,128(sp)
    ab18:	1880030b 	ldhu	r2,12(r3)
    ab1c:	10c8000c 	andi	r3,r2,8192
    ab20:	1800071e 	bne	r3,zero,ab40 <___vfiprintf_internal_r+0x74>
    ab24:	d9402017 	ldw	r5,128(sp)
    ab28:	00f7ffc4 	movi	r3,-8193
    ab2c:	10880014 	ori	r2,r2,8192
    ab30:	29001917 	ldw	r4,100(r5)
    ab34:	2880030d 	sth	r2,12(r5)
    ab38:	20c6703a 	and	r3,r4,r3
    ab3c:	28c01915 	stw	r3,100(r5)
    ab40:	10c0020c 	andi	r3,r2,8
    ab44:	1800a526 	beq	r3,zero,addc <___vfiprintf_internal_r+0x310>
    ab48:	d9002017 	ldw	r4,128(sp)
    ab4c:	20c00417 	ldw	r3,16(r4)
    ab50:	1800a226 	beq	r3,zero,addc <___vfiprintf_internal_r+0x310>
    ab54:	1080068c 	andi	r2,r2,26
    ab58:	00c00284 	movi	r3,10
    ab5c:	10c0a826 	beq	r2,r3,ae00 <___vfiprintf_internal_r+0x334>
    ab60:	d9001a04 	addi	r4,sp,104
    ab64:	d94019c4 	addi	r5,sp,103
    ab68:	04800074 	movhi	r18,1
    ab6c:	2145c83a 	sub	r2,r4,r5
    ab70:	94939e04 	addi	r18,r18,20088
    ab74:	d9001e15 	stw	r4,120(sp)
    ab78:	d9401f15 	stw	r5,124(sp)
    ab7c:	dec01a15 	stw	sp,104(sp)
    ab80:	d8001c15 	stw	zero,112(sp)
    ab84:	d8001b15 	stw	zero,108(sp)
    ab88:	d811883a 	mov	r8,sp
    ab8c:	d8002615 	stw	zero,152(sp)
    ab90:	d8002415 	stw	zero,144(sp)
    ab94:	d8802815 	stw	r2,160(sp)
    ab98:	a82d883a 	mov	r22,r21
    ab9c:	b0800007 	ldb	r2,0(r22)
    aba0:	10040d26 	beq	r2,zero,bbd8 <___vfiprintf_internal_r+0x110c>
    aba4:	00c00944 	movi	r3,37
    aba8:	b029883a 	mov	r20,r22
    abac:	10c0021e 	bne	r2,r3,abb8 <___vfiprintf_internal_r+0xec>
    abb0:	00001606 	br	ac0c <___vfiprintf_internal_r+0x140>
    abb4:	10c00326 	beq	r2,r3,abc4 <___vfiprintf_internal_r+0xf8>
    abb8:	a5000044 	addi	r20,r20,1
    abbc:	a0800007 	ldb	r2,0(r20)
    abc0:	103ffc1e 	bne	r2,zero,abb4 <__alt_data_end+0xfc00abb4>
    abc4:	a5a1c83a 	sub	r16,r20,r22
    abc8:	80001026 	beq	r16,zero,ac0c <___vfiprintf_internal_r+0x140>
    abcc:	d8c01c17 	ldw	r3,112(sp)
    abd0:	d8801b17 	ldw	r2,108(sp)
    abd4:	45800015 	stw	r22,0(r8)
    abd8:	80c7883a 	add	r3,r16,r3
    abdc:	10800044 	addi	r2,r2,1
    abe0:	44000115 	stw	r16,4(r8)
    abe4:	d8c01c15 	stw	r3,112(sp)
    abe8:	d8801b15 	stw	r2,108(sp)
    abec:	010001c4 	movi	r4,7
    abf0:	2080750e 	bge	r4,r2,adc8 <___vfiprintf_internal_r+0x2fc>
    abf4:	1803951e 	bne	r3,zero,ba4c <___vfiprintf_internal_r+0xf80>
    abf8:	d8c02417 	ldw	r3,144(sp)
    abfc:	d8001b15 	stw	zero,108(sp)
    ac00:	d811883a 	mov	r8,sp
    ac04:	1c07883a 	add	r3,r3,r16
    ac08:	d8c02415 	stw	r3,144(sp)
    ac0c:	a0800007 	ldb	r2,0(r20)
    ac10:	1002e026 	beq	r2,zero,b794 <___vfiprintf_internal_r+0xcc8>
    ac14:	a5800044 	addi	r22,r20,1
    ac18:	a0c00047 	ldb	r3,1(r20)
    ac1c:	d8001d85 	stb	zero,118(sp)
    ac20:	0027883a 	mov	r19,zero
    ac24:	d8002305 	stb	zero,140(sp)
    ac28:	043fffc4 	movi	r16,-1
    ac2c:	d8002515 	stw	zero,148(sp)
    ac30:	0023883a 	mov	r17,zero
    ac34:	05001604 	movi	r20,88
    ac38:	05400244 	movi	r21,9
    ac3c:	402f883a 	mov	r23,r8
    ac40:	b5800044 	addi	r22,r22,1
    ac44:	18bff804 	addi	r2,r3,-32
    ac48:	a0827736 	bltu	r20,r2,b628 <___vfiprintf_internal_r+0xb5c>
    ac4c:	100490ba 	slli	r2,r2,2
    ac50:	01000074 	movhi	r4,1
    ac54:	212b1904 	addi	r4,r4,-21404
    ac58:	1105883a 	add	r2,r2,r4
    ac5c:	10800017 	ldw	r2,0(r2)
    ac60:	1000683a 	jmp	r2
    ac64:	0000b328 	cmpgeui	zero,zero,716
    ac68:	0000b628 	cmpgeui	zero,zero,728
    ac6c:	0000b628 	cmpgeui	zero,zero,728
    ac70:	0000b344 	movi	zero,717
    ac74:	0000b628 	cmpgeui	zero,zero,728
    ac78:	0000b628 	cmpgeui	zero,zero,728
    ac7c:	0000b628 	cmpgeui	zero,zero,728
    ac80:	0000b628 	cmpgeui	zero,zero,728
    ac84:	0000b628 	cmpgeui	zero,zero,728
    ac88:	0000b628 	cmpgeui	zero,zero,728
    ac8c:	0000b54c 	andi	zero,zero,725
    ac90:	0000b570 	cmpltui	zero,zero,725
    ac94:	0000b628 	cmpgeui	zero,zero,728
    ac98:	0000ae68 	cmpgeui	zero,zero,697
    ac9c:	0000b584 	movi	zero,726
    aca0:	0000b628 	cmpgeui	zero,zero,728
    aca4:	0000b350 	cmplti	zero,zero,717
    aca8:	0000b35c 	xori	zero,zero,717
    acac:	0000b35c 	xori	zero,zero,717
    acb0:	0000b35c 	xori	zero,zero,717
    acb4:	0000b35c 	xori	zero,zero,717
    acb8:	0000b35c 	xori	zero,zero,717
    acbc:	0000b35c 	xori	zero,zero,717
    acc0:	0000b35c 	xori	zero,zero,717
    acc4:	0000b35c 	xori	zero,zero,717
    acc8:	0000b35c 	xori	zero,zero,717
    accc:	0000b628 	cmpgeui	zero,zero,728
    acd0:	0000b628 	cmpgeui	zero,zero,728
    acd4:	0000b628 	cmpgeui	zero,zero,728
    acd8:	0000b628 	cmpgeui	zero,zero,728
    acdc:	0000b628 	cmpgeui	zero,zero,728
    ace0:	0000b628 	cmpgeui	zero,zero,728
    ace4:	0000b628 	cmpgeui	zero,zero,728
    ace8:	0000b628 	cmpgeui	zero,zero,728
    acec:	0000b628 	cmpgeui	zero,zero,728
    acf0:	0000b628 	cmpgeui	zero,zero,728
    acf4:	0000b39c 	xori	zero,zero,718
    acf8:	0000b628 	cmpgeui	zero,zero,728
    acfc:	0000b628 	cmpgeui	zero,zero,728
    ad00:	0000b628 	cmpgeui	zero,zero,728
    ad04:	0000b628 	cmpgeui	zero,zero,728
    ad08:	0000b628 	cmpgeui	zero,zero,728
    ad0c:	0000b628 	cmpgeui	zero,zero,728
    ad10:	0000b628 	cmpgeui	zero,zero,728
    ad14:	0000b628 	cmpgeui	zero,zero,728
    ad18:	0000b628 	cmpgeui	zero,zero,728
    ad1c:	0000b628 	cmpgeui	zero,zero,728
    ad20:	0000b3d8 	cmpnei	zero,zero,719
    ad24:	0000b628 	cmpgeui	zero,zero,728
    ad28:	0000b628 	cmpgeui	zero,zero,728
    ad2c:	0000b628 	cmpgeui	zero,zero,728
    ad30:	0000b628 	cmpgeui	zero,zero,728
    ad34:	0000b628 	cmpgeui	zero,zero,728
    ad38:	0000b434 	movhi	zero,720
    ad3c:	0000b628 	cmpgeui	zero,zero,728
    ad40:	0000b628 	cmpgeui	zero,zero,728
    ad44:	0000b4a8 	cmpgeui	zero,zero,722
    ad48:	0000b628 	cmpgeui	zero,zero,728
    ad4c:	0000b628 	cmpgeui	zero,zero,728
    ad50:	0000b628 	cmpgeui	zero,zero,728
    ad54:	0000b628 	cmpgeui	zero,zero,728
    ad58:	0000b628 	cmpgeui	zero,zero,728
    ad5c:	0000b628 	cmpgeui	zero,zero,728
    ad60:	0000b628 	cmpgeui	zero,zero,728
    ad64:	0000b628 	cmpgeui	zero,zero,728
    ad68:	0000b628 	cmpgeui	zero,zero,728
    ad6c:	0000b628 	cmpgeui	zero,zero,728
    ad70:	0000b250 	cmplti	zero,zero,713
    ad74:	0000b280 	call	b28 <printSignedHex0+0xa8>
    ad78:	0000b628 	cmpgeui	zero,zero,728
    ad7c:	0000b628 	cmpgeui	zero,zero,728
    ad80:	0000b628 	cmpgeui	zero,zero,728
    ad84:	0000b5d0 	cmplti	zero,zero,727
    ad88:	0000b280 	call	b28 <printSignedHex0+0xa8>
    ad8c:	0000b628 	cmpgeui	zero,zero,728
    ad90:	0000b628 	cmpgeui	zero,zero,728
    ad94:	0000b128 	cmpgeui	zero,zero,708
    ad98:	0000b628 	cmpgeui	zero,zero,728
    ad9c:	0000b13c 	xorhi	zero,zero,708
    ada0:	0000b174 	movhi	zero,709
    ada4:	0000ae74 	movhi	zero,697
    ada8:	0000b11c 	xori	zero,zero,708
    adac:	0000b628 	cmpgeui	zero,zero,728
    adb0:	0000b4e8 	cmpgeui	zero,zero,723
    adb4:	0000b628 	cmpgeui	zero,zero,728
    adb8:	0000b534 	movhi	zero,724
    adbc:	0000b628 	cmpgeui	zero,zero,728
    adc0:	0000b628 	cmpgeui	zero,zero,728
    adc4:	0000b1f8 	rdprs	zero,zero,711
    adc8:	42000204 	addi	r8,r8,8
    adcc:	d8c02417 	ldw	r3,144(sp)
    add0:	1c07883a 	add	r3,r3,r16
    add4:	d8c02415 	stw	r3,144(sp)
    add8:	003f8c06 	br	ac0c <__alt_data_end+0xfc00ac0c>
    addc:	d9402017 	ldw	r5,128(sp)
    ade0:	d9002117 	ldw	r4,132(sp)
    ade4:	00056880 	call	5688 <__swsetup_r>
    ade8:	1003c11e 	bne	r2,zero,bcf0 <___vfiprintf_internal_r+0x1224>
    adec:	d9402017 	ldw	r5,128(sp)
    adf0:	00c00284 	movi	r3,10
    adf4:	2880030b 	ldhu	r2,12(r5)
    adf8:	1080068c 	andi	r2,r2,26
    adfc:	10ff581e 	bne	r2,r3,ab60 <__alt_data_end+0xfc00ab60>
    ae00:	d8c02017 	ldw	r3,128(sp)
    ae04:	1880038f 	ldh	r2,14(r3)
    ae08:	103f5516 	blt	r2,zero,ab60 <__alt_data_end+0xfc00ab60>
    ae0c:	d9c02217 	ldw	r7,136(sp)
    ae10:	d9002117 	ldw	r4,132(sp)
    ae14:	a80d883a 	mov	r6,r21
    ae18:	180b883a 	mov	r5,r3
    ae1c:	000bff40 	call	bff4 <__sbprintf>
    ae20:	dfc03517 	ldw	ra,212(sp)
    ae24:	df003417 	ldw	fp,208(sp)
    ae28:	ddc03317 	ldw	r23,204(sp)
    ae2c:	dd803217 	ldw	r22,200(sp)
    ae30:	dd403117 	ldw	r21,196(sp)
    ae34:	dd003017 	ldw	r20,192(sp)
    ae38:	dcc02f17 	ldw	r19,188(sp)
    ae3c:	dc802e17 	ldw	r18,184(sp)
    ae40:	dc402d17 	ldw	r17,180(sp)
    ae44:	dc002c17 	ldw	r16,176(sp)
    ae48:	dec03604 	addi	sp,sp,216
    ae4c:	f800283a 	ret
    ae50:	00076940 	call	7694 <__sinit>
    ae54:	003f2f06 	br	ab14 <__alt_data_end+0xfc00ab14>
    ae58:	d8c02517 	ldw	r3,148(sp)
    ae5c:	d8802215 	stw	r2,136(sp)
    ae60:	00c7c83a 	sub	r3,zero,r3
    ae64:	d8c02515 	stw	r3,148(sp)
    ae68:	8c400114 	ori	r17,r17,4
    ae6c:	b0c00007 	ldb	r3,0(r22)
    ae70:	003f7306 	br	ac40 <__alt_data_end+0xfc00ac40>
    ae74:	00800c04 	movi	r2,48
    ae78:	d9402217 	ldw	r5,136(sp)
    ae7c:	d8801d05 	stb	r2,116(sp)
    ae80:	00801e04 	movi	r2,120
    ae84:	d8801d45 	stb	r2,117(sp)
    ae88:	d8001d85 	stb	zero,118(sp)
    ae8c:	b811883a 	mov	r8,r23
    ae90:	28c00104 	addi	r3,r5,4
    ae94:	2cc00017 	ldw	r19,0(r5)
    ae98:	0029883a 	mov	r20,zero
    ae9c:	88800094 	ori	r2,r17,2
    aea0:	80032516 	blt	r16,zero,bb38 <___vfiprintf_internal_r+0x106c>
    aea4:	00bfdfc4 	movi	r2,-129
    aea8:	88a2703a 	and	r17,r17,r2
    aeac:	d8c02215 	stw	r3,136(sp)
    aeb0:	8c400094 	ori	r17,r17,2
    aeb4:	98032a1e 	bne	r19,zero,bb60 <___vfiprintf_internal_r+0x1094>
    aeb8:	00800074 	movhi	r2,1
    aebc:	10933d04 	addi	r2,r2,19700
    aec0:	d8802615 	stw	r2,152(sp)
    aec4:	002b883a 	mov	r21,zero
    aec8:	8001741e 	bne	r16,zero,b49c <___vfiprintf_internal_r+0x9d0>
    aecc:	0021883a 	mov	r16,zero
    aed0:	0029883a 	mov	r20,zero
    aed4:	ddc01a04 	addi	r23,sp,104
    aed8:	8027883a 	mov	r19,r16
    aedc:	8500010e 	bge	r16,r20,aee4 <___vfiprintf_internal_r+0x418>
    aee0:	a027883a 	mov	r19,r20
    aee4:	ad403fcc 	andi	r21,r21,255
    aee8:	ad40201c 	xori	r21,r21,128
    aeec:	ad7fe004 	addi	r21,r21,-128
    aef0:	a8000126 	beq	r21,zero,aef8 <___vfiprintf_internal_r+0x42c>
    aef4:	9cc00044 	addi	r19,r19,1
    aef8:	89c0008c 	andi	r7,r17,2
    aefc:	38000126 	beq	r7,zero,af04 <___vfiprintf_internal_r+0x438>
    af00:	9cc00084 	addi	r19,r19,2
    af04:	88c0210c 	andi	r3,r17,132
    af08:	1801dd1e 	bne	r3,zero,b680 <___vfiprintf_internal_r+0xbb4>
    af0c:	d9402517 	ldw	r5,148(sp)
    af10:	2cebc83a 	sub	r21,r5,r19
    af14:	0541da0e 	bge	zero,r21,b680 <___vfiprintf_internal_r+0xbb4>
    af18:	07000404 	movi	fp,16
    af1c:	d8801c17 	ldw	r2,112(sp)
    af20:	e543be0e 	bge	fp,r21,be1c <___vfiprintf_internal_r+0x1350>
    af24:	01400074 	movhi	r5,1
    af28:	2953a204 	addi	r5,r5,20104
    af2c:	dc002715 	stw	r16,156(sp)
    af30:	d9801b17 	ldw	r6,108(sp)
    af34:	a821883a 	mov	r16,r21
    af38:	d9402315 	stw	r5,140(sp)
    af3c:	028001c4 	movi	r10,7
    af40:	d9c02915 	stw	r7,164(sp)
    af44:	182b883a 	mov	r21,r3
    af48:	00000506 	br	af60 <___vfiprintf_internal_r+0x494>
    af4c:	31000084 	addi	r4,r6,2
    af50:	42000204 	addi	r8,r8,8
    af54:	180d883a 	mov	r6,r3
    af58:	843ffc04 	addi	r16,r16,-16
    af5c:	e4000f0e 	bge	fp,r16,af9c <___vfiprintf_internal_r+0x4d0>
    af60:	01000074 	movhi	r4,1
    af64:	10800404 	addi	r2,r2,16
    af68:	30c00044 	addi	r3,r6,1
    af6c:	2113a204 	addi	r4,r4,20104
    af70:	41000015 	stw	r4,0(r8)
    af74:	47000115 	stw	fp,4(r8)
    af78:	d8801c15 	stw	r2,112(sp)
    af7c:	d8c01b15 	stw	r3,108(sp)
    af80:	50fff20e 	bge	r10,r3,af4c <__alt_data_end+0xfc00af4c>
    af84:	1001b21e 	bne	r2,zero,b650 <___vfiprintf_internal_r+0xb84>
    af88:	843ffc04 	addi	r16,r16,-16
    af8c:	000d883a 	mov	r6,zero
    af90:	01000044 	movi	r4,1
    af94:	d811883a 	mov	r8,sp
    af98:	e43ff116 	blt	fp,r16,af60 <__alt_data_end+0xfc00af60>
    af9c:	a807883a 	mov	r3,r21
    afa0:	d9c02917 	ldw	r7,164(sp)
    afa4:	802b883a 	mov	r21,r16
    afa8:	dc002717 	ldw	r16,156(sp)
    afac:	d9402317 	ldw	r5,140(sp)
    afb0:	a885883a 	add	r2,r21,r2
    afb4:	45400115 	stw	r21,4(r8)
    afb8:	41400015 	stw	r5,0(r8)
    afbc:	d8801c15 	stw	r2,112(sp)
    afc0:	d9001b15 	stw	r4,108(sp)
    afc4:	014001c4 	movi	r5,7
    afc8:	29026216 	blt	r5,r4,b954 <___vfiprintf_internal_r+0xe88>
    afcc:	d9801d87 	ldb	r6,118(sp)
    afd0:	42000204 	addi	r8,r8,8
    afd4:	21400044 	addi	r5,r4,1
    afd8:	3001ae1e 	bne	r6,zero,b694 <___vfiprintf_internal_r+0xbc8>
    afdc:	3801bb26 	beq	r7,zero,b6cc <___vfiprintf_internal_r+0xc00>
    afe0:	d9001d04 	addi	r4,sp,116
    afe4:	10800084 	addi	r2,r2,2
    afe8:	41000015 	stw	r4,0(r8)
    afec:	01000084 	movi	r4,2
    aff0:	41000115 	stw	r4,4(r8)
    aff4:	d8801c15 	stw	r2,112(sp)
    aff8:	d9401b15 	stw	r5,108(sp)
    affc:	010001c4 	movi	r4,7
    b000:	2142680e 	bge	r4,r5,b9a4 <___vfiprintf_internal_r+0xed8>
    b004:	1002b11e 	bne	r2,zero,bacc <___vfiprintf_internal_r+0x1000>
    b008:	01802004 	movi	r6,128
    b00c:	01400044 	movi	r5,1
    b010:	0009883a 	mov	r4,zero
    b014:	d811883a 	mov	r8,sp
    b018:	1981ae1e 	bne	r3,r6,b6d4 <___vfiprintf_internal_r+0xc08>
    b01c:	d8c02517 	ldw	r3,148(sp)
    b020:	1cf9c83a 	sub	fp,r3,r19
    b024:	0701ab0e 	bge	zero,fp,b6d4 <___vfiprintf_internal_r+0xc08>
    b028:	05400404 	movi	r21,16
    b02c:	af03a90e 	bge	r21,fp,bed4 <___vfiprintf_internal_r+0x1408>
    b030:	01400074 	movhi	r5,1
    b034:	29539e04 	addi	r5,r5,20088
    b038:	d9402315 	stw	r5,140(sp)
    b03c:	01c001c4 	movi	r7,7
    b040:	00000506 	br	b058 <___vfiprintf_internal_r+0x58c>
    b044:	21800084 	addi	r6,r4,2
    b048:	42000204 	addi	r8,r8,8
    b04c:	1809883a 	mov	r4,r3
    b050:	e73ffc04 	addi	fp,fp,-16
    b054:	af000d0e 	bge	r21,fp,b08c <___vfiprintf_internal_r+0x5c0>
    b058:	10800404 	addi	r2,r2,16
    b05c:	20c00044 	addi	r3,r4,1
    b060:	44800015 	stw	r18,0(r8)
    b064:	45400115 	stw	r21,4(r8)
    b068:	d8801c15 	stw	r2,112(sp)
    b06c:	d8c01b15 	stw	r3,108(sp)
    b070:	38fff40e 	bge	r7,r3,b044 <__alt_data_end+0xfc00b044>
    b074:	10022b1e 	bne	r2,zero,b924 <___vfiprintf_internal_r+0xe58>
    b078:	e73ffc04 	addi	fp,fp,-16
    b07c:	01800044 	movi	r6,1
    b080:	0009883a 	mov	r4,zero
    b084:	d811883a 	mov	r8,sp
    b088:	af3ff316 	blt	r21,fp,b058 <__alt_data_end+0xfc00b058>
    b08c:	d8c02317 	ldw	r3,140(sp)
    b090:	1705883a 	add	r2,r2,fp
    b094:	47000115 	stw	fp,4(r8)
    b098:	40c00015 	stw	r3,0(r8)
    b09c:	d8801c15 	stw	r2,112(sp)
    b0a0:	d9801b15 	stw	r6,108(sp)
    b0a4:	00c001c4 	movi	r3,7
    b0a8:	19829416 	blt	r3,r6,bafc <___vfiprintf_internal_r+0x1030>
    b0ac:	8521c83a 	sub	r16,r16,r20
    b0b0:	42000204 	addi	r8,r8,8
    b0b4:	31400044 	addi	r5,r6,1
    b0b8:	3009883a 	mov	r4,r6
    b0bc:	04018716 	blt	zero,r16,b6dc <___vfiprintf_internal_r+0xc10>
    b0c0:	a085883a 	add	r2,r20,r2
    b0c4:	45c00015 	stw	r23,0(r8)
    b0c8:	45000115 	stw	r20,4(r8)
    b0cc:	d8801c15 	stw	r2,112(sp)
    b0d0:	d9401b15 	stw	r5,108(sp)
    b0d4:	00c001c4 	movi	r3,7
    b0d8:	1941c20e 	bge	r3,r5,b7e4 <___vfiprintf_internal_r+0xd18>
    b0dc:	1002531e 	bne	r2,zero,ba2c <___vfiprintf_internal_r+0xf60>
    b0e0:	d8001b15 	stw	zero,108(sp)
    b0e4:	8c40010c 	andi	r17,r17,4
    b0e8:	88023226 	beq	r17,zero,b9b4 <___vfiprintf_internal_r+0xee8>
    b0ec:	d9002517 	ldw	r4,148(sp)
    b0f0:	24e3c83a 	sub	r17,r4,r19
    b0f4:	04432916 	blt	zero,r17,bd9c <___vfiprintf_internal_r+0x12d0>
    b0f8:	d8802517 	ldw	r2,148(sp)
    b0fc:	14c0010e 	bge	r2,r19,b104 <___vfiprintf_internal_r+0x638>
    b100:	9805883a 	mov	r2,r19
    b104:	d8c02417 	ldw	r3,144(sp)
    b108:	1887883a 	add	r3,r3,r2
    b10c:	d8c02415 	stw	r3,144(sp)
    b110:	d8001b15 	stw	zero,108(sp)
    b114:	d811883a 	mov	r8,sp
    b118:	003ea006 	br	ab9c <__alt_data_end+0xfc00ab9c>
    b11c:	8c400814 	ori	r17,r17,32
    b120:	b0c00007 	ldb	r3,0(r22)
    b124:	003ec606 	br	ac40 <__alt_data_end+0xfc00ac40>
    b128:	b0c00007 	ldb	r3,0(r22)
    b12c:	00801b04 	movi	r2,108
    b130:	18832026 	beq	r3,r2,bdb4 <___vfiprintf_internal_r+0x12e8>
    b134:	8c400414 	ori	r17,r17,16
    b138:	003ec106 	br	ac40 <__alt_data_end+0xfc00ac40>
    b13c:	9cc03fcc 	andi	r19,r19,255
    b140:	b811883a 	mov	r8,r23
    b144:	9803981e 	bne	r19,zero,bfa8 <___vfiprintf_internal_r+0x14dc>
    b148:	8880080c 	andi	r2,r17,32
    b14c:	1002be26 	beq	r2,zero,bc48 <___vfiprintf_internal_r+0x117c>
    b150:	d9002217 	ldw	r4,136(sp)
    b154:	d9402417 	ldw	r5,144(sp)
    b158:	20800017 	ldw	r2,0(r4)
    b15c:	2807d7fa 	srai	r3,r5,31
    b160:	21000104 	addi	r4,r4,4
    b164:	d9002215 	stw	r4,136(sp)
    b168:	11400015 	stw	r5,0(r2)
    b16c:	10c00115 	stw	r3,4(r2)
    b170:	003e8a06 	br	ab9c <__alt_data_end+0xfc00ab9c>
    b174:	9cc03fcc 	andi	r19,r19,255
    b178:	b811883a 	mov	r8,r23
    b17c:	9803871e 	bne	r19,zero,bf9c <___vfiprintf_internal_r+0x14d0>
    b180:	8880080c 	andi	r2,r17,32
    b184:	10009a26 	beq	r2,zero,b3f0 <___vfiprintf_internal_r+0x924>
    b188:	d9002217 	ldw	r4,136(sp)
    b18c:	d8001d85 	stb	zero,118(sp)
    b190:	20800204 	addi	r2,r4,8
    b194:	24c00017 	ldw	r19,0(r4)
    b198:	25000117 	ldw	r20,4(r4)
    b19c:	8002a416 	blt	r16,zero,bc30 <___vfiprintf_internal_r+0x1164>
    b1a0:	013fdfc4 	movi	r4,-129
    b1a4:	9d06b03a 	or	r3,r19,r20
    b1a8:	d8802215 	stw	r2,136(sp)
    b1ac:	8922703a 	and	r17,r17,r4
    b1b0:	18009b26 	beq	r3,zero,b420 <___vfiprintf_internal_r+0x954>
    b1b4:	002b883a 	mov	r21,zero
    b1b8:	ddc01a04 	addi	r23,sp,104
    b1bc:	9806d0fa 	srli	r3,r19,3
    b1c0:	a008977a 	slli	r4,r20,29
    b1c4:	a028d0fa 	srli	r20,r20,3
    b1c8:	9cc001cc 	andi	r19,r19,7
    b1cc:	98800c04 	addi	r2,r19,48
    b1d0:	bdffffc4 	addi	r23,r23,-1
    b1d4:	20e6b03a 	or	r19,r4,r3
    b1d8:	b8800005 	stb	r2,0(r23)
    b1dc:	9d06b03a 	or	r3,r19,r20
    b1e0:	183ff61e 	bne	r3,zero,b1bc <__alt_data_end+0xfc00b1bc>
    b1e4:	88c0004c 	andi	r3,r17,1
    b1e8:	18021f1e 	bne	r3,zero,ba68 <___vfiprintf_internal_r+0xf9c>
    b1ec:	d9401e17 	ldw	r5,120(sp)
    b1f0:	2de9c83a 	sub	r20,r5,r23
    b1f4:	003f3806 	br	aed8 <__alt_data_end+0xfc00aed8>
    b1f8:	9cc03fcc 	andi	r19,r19,255
    b1fc:	b811883a 	mov	r8,r23
    b200:	98034f1e 	bne	r19,zero,bf40 <___vfiprintf_internal_r+0x1474>
    b204:	00800074 	movhi	r2,1
    b208:	10933d04 	addi	r2,r2,19700
    b20c:	d8802615 	stw	r2,152(sp)
    b210:	8880080c 	andi	r2,r17,32
    b214:	1000ac26 	beq	r2,zero,b4c8 <___vfiprintf_internal_r+0x9fc>
    b218:	d9002217 	ldw	r4,136(sp)
    b21c:	24c00017 	ldw	r19,0(r4)
    b220:	25000117 	ldw	r20,4(r4)
    b224:	21000204 	addi	r4,r4,8
    b228:	d9002215 	stw	r4,136(sp)
    b22c:	8880004c 	andi	r2,r17,1
    b230:	1001e726 	beq	r2,zero,b9d0 <___vfiprintf_internal_r+0xf04>
    b234:	9d04b03a 	or	r2,r19,r20
    b238:	10025c1e 	bne	r2,zero,bbac <___vfiprintf_internal_r+0x10e0>
    b23c:	d8001d85 	stb	zero,118(sp)
    b240:	80024416 	blt	r16,zero,bb54 <___vfiprintf_internal_r+0x1088>
    b244:	00bfdfc4 	movi	r2,-129
    b248:	88a2703a 	and	r17,r17,r2
    b24c:	003f1d06 	br	aec4 <__alt_data_end+0xfc00aec4>
    b250:	d8c02217 	ldw	r3,136(sp)
    b254:	04c00044 	movi	r19,1
    b258:	b811883a 	mov	r8,r23
    b25c:	18800017 	ldw	r2,0(r3)
    b260:	18c00104 	addi	r3,r3,4
    b264:	d8001d85 	stb	zero,118(sp)
    b268:	d8801005 	stb	r2,64(sp)
    b26c:	d8c02215 	stw	r3,136(sp)
    b270:	9829883a 	mov	r20,r19
    b274:	ddc01004 	addi	r23,sp,64
    b278:	0021883a 	mov	r16,zero
    b27c:	003f1e06 	br	aef8 <__alt_data_end+0xfc00aef8>
    b280:	9cc03fcc 	andi	r19,r19,255
    b284:	b811883a 	mov	r8,r23
    b288:	9803331e 	bne	r19,zero,bf58 <___vfiprintf_internal_r+0x148c>
    b28c:	8880080c 	andi	r2,r17,32
    b290:	10004826 	beq	r2,zero,b3b4 <___vfiprintf_internal_r+0x8e8>
    b294:	d9002217 	ldw	r4,136(sp)
    b298:	20800117 	ldw	r2,4(r4)
    b29c:	24c00017 	ldw	r19,0(r4)
    b2a0:	21000204 	addi	r4,r4,8
    b2a4:	d9002215 	stw	r4,136(sp)
    b2a8:	1029883a 	mov	r20,r2
    b2ac:	10024c16 	blt	r2,zero,bbe0 <___vfiprintf_internal_r+0x1114>
    b2b0:	dd401d83 	ldbu	r21,118(sp)
    b2b4:	80007116 	blt	r16,zero,b47c <___vfiprintf_internal_r+0x9b0>
    b2b8:	00ffdfc4 	movi	r3,-129
    b2bc:	9d04b03a 	or	r2,r19,r20
    b2c0:	88e2703a 	and	r17,r17,r3
    b2c4:	1000d126 	beq	r2,zero,b60c <___vfiprintf_internal_r+0xb40>
    b2c8:	a0023526 	beq	r20,zero,bba0 <___vfiprintf_internal_r+0x10d4>
    b2cc:	ddc01a04 	addi	r23,sp,104
    b2d0:	4039883a 	mov	fp,r8
    b2d4:	9809883a 	mov	r4,r19
    b2d8:	a00b883a 	mov	r5,r20
    b2dc:	01800284 	movi	r6,10
    b2e0:	000f883a 	mov	r7,zero
    b2e4:	000cff80 	call	cff8 <__umoddi3>
    b2e8:	10800c04 	addi	r2,r2,48
    b2ec:	bdffffc4 	addi	r23,r23,-1
    b2f0:	9809883a 	mov	r4,r19
    b2f4:	a00b883a 	mov	r5,r20
    b2f8:	b8800005 	stb	r2,0(r23)
    b2fc:	01800284 	movi	r6,10
    b300:	000f883a 	mov	r7,zero
    b304:	000c9fc0 	call	c9fc <__udivdi3>
    b308:	1027883a 	mov	r19,r2
    b30c:	10c4b03a 	or	r2,r2,r3
    b310:	1829883a 	mov	r20,r3
    b314:	103fef1e 	bne	r2,zero,b2d4 <__alt_data_end+0xfc00b2d4>
    b318:	d9001e17 	ldw	r4,120(sp)
    b31c:	e011883a 	mov	r8,fp
    b320:	25e9c83a 	sub	r20,r4,r23
    b324:	003eec06 	br	aed8 <__alt_data_end+0xfc00aed8>
    b328:	d8802307 	ldb	r2,140(sp)
    b32c:	1002361e 	bne	r2,zero,bc08 <___vfiprintf_internal_r+0x113c>
    b330:	00c00804 	movi	r3,32
    b334:	d8c02305 	stb	r3,140(sp)
    b338:	04c00044 	movi	r19,1
    b33c:	b0c00007 	ldb	r3,0(r22)
    b340:	003e3f06 	br	ac40 <__alt_data_end+0xfc00ac40>
    b344:	8c400054 	ori	r17,r17,1
    b348:	b0c00007 	ldb	r3,0(r22)
    b34c:	003e3c06 	br	ac40 <__alt_data_end+0xfc00ac40>
    b350:	8c402014 	ori	r17,r17,128
    b354:	b0c00007 	ldb	r3,0(r22)
    b358:	003e3906 	br	ac40 <__alt_data_end+0xfc00ac40>
    b35c:	dc002715 	stw	r16,156(sp)
    b360:	d8002515 	stw	zero,148(sp)
    b364:	1f3ff404 	addi	fp,r3,-48
    b368:	0009883a 	mov	r4,zero
    b36c:	b021883a 	mov	r16,r22
    b370:	01400284 	movi	r5,10
    b374:	00030d40 	call	30d4 <__mulsi3>
    b378:	80c00007 	ldb	r3,0(r16)
    b37c:	e089883a 	add	r4,fp,r2
    b380:	b5800044 	addi	r22,r22,1
    b384:	1f3ff404 	addi	fp,r3,-48
    b388:	b021883a 	mov	r16,r22
    b38c:	af3ff82e 	bgeu	r21,fp,b370 <__alt_data_end+0xfc00b370>
    b390:	d9002515 	stw	r4,148(sp)
    b394:	dc002717 	ldw	r16,156(sp)
    b398:	003e2a06 	br	ac44 <__alt_data_end+0xfc00ac44>
    b39c:	9cc03fcc 	andi	r19,r19,255
    b3a0:	b811883a 	mov	r8,r23
    b3a4:	9802e91e 	bne	r19,zero,bf4c <___vfiprintf_internal_r+0x1480>
    b3a8:	8c400414 	ori	r17,r17,16
    b3ac:	8880080c 	andi	r2,r17,32
    b3b0:	103fb81e 	bne	r2,zero,b294 <__alt_data_end+0xfc00b294>
    b3b4:	8880040c 	andi	r2,r17,16
    b3b8:	10022e26 	beq	r2,zero,bc74 <___vfiprintf_internal_r+0x11a8>
    b3bc:	d9402217 	ldw	r5,136(sp)
    b3c0:	2cc00017 	ldw	r19,0(r5)
    b3c4:	29400104 	addi	r5,r5,4
    b3c8:	d9402215 	stw	r5,136(sp)
    b3cc:	9829d7fa 	srai	r20,r19,31
    b3d0:	a005883a 	mov	r2,r20
    b3d4:	003fb506 	br	b2ac <__alt_data_end+0xfc00b2ac>
    b3d8:	9cc03fcc 	andi	r19,r19,255
    b3dc:	b811883a 	mov	r8,r23
    b3e0:	9802fa1e 	bne	r19,zero,bfcc <___vfiprintf_internal_r+0x1500>
    b3e4:	8c400414 	ori	r17,r17,16
    b3e8:	8880080c 	andi	r2,r17,32
    b3ec:	103f661e 	bne	r2,zero,b188 <__alt_data_end+0xfc00b188>
    b3f0:	8880040c 	andi	r2,r17,16
    b3f4:	10020626 	beq	r2,zero,bc10 <___vfiprintf_internal_r+0x1144>
    b3f8:	d9402217 	ldw	r5,136(sp)
    b3fc:	d8001d85 	stb	zero,118(sp)
    b400:	0029883a 	mov	r20,zero
    b404:	28800104 	addi	r2,r5,4
    b408:	2cc00017 	ldw	r19,0(r5)
    b40c:	80020816 	blt	r16,zero,bc30 <___vfiprintf_internal_r+0x1164>
    b410:	00ffdfc4 	movi	r3,-129
    b414:	d8802215 	stw	r2,136(sp)
    b418:	88e2703a 	and	r17,r17,r3
    b41c:	983f651e 	bne	r19,zero,b1b4 <__alt_data_end+0xfc00b1b4>
    b420:	002b883a 	mov	r21,zero
    b424:	8002cf26 	beq	r16,zero,bf64 <___vfiprintf_internal_r+0x1498>
    b428:	0027883a 	mov	r19,zero
    b42c:	0029883a 	mov	r20,zero
    b430:	003f6106 	br	b1b8 <__alt_data_end+0xfc00b1b8>
    b434:	9cc03fcc 	andi	r19,r19,255
    b438:	b811883a 	mov	r8,r23
    b43c:	9802e01e 	bne	r19,zero,bfc0 <___vfiprintf_internal_r+0x14f4>
    b440:	8c400414 	ori	r17,r17,16
    b444:	8880080c 	andi	r2,r17,32
    b448:	1000641e 	bne	r2,zero,b5dc <___vfiprintf_internal_r+0xb10>
    b44c:	8880040c 	andi	r2,r17,16
    b450:	1001c81e 	bne	r2,zero,bb74 <___vfiprintf_internal_r+0x10a8>
    b454:	8880100c 	andi	r2,r17,64
    b458:	d8001d85 	stb	zero,118(sp)
    b45c:	1002281e 	bne	r2,zero,bd00 <___vfiprintf_internal_r+0x1234>
    b460:	d9002217 	ldw	r4,136(sp)
    b464:	0029883a 	mov	r20,zero
    b468:	20800104 	addi	r2,r4,4
    b46c:	24c00017 	ldw	r19,0(r4)
    b470:	8001c60e 	bge	r16,zero,bb8c <___vfiprintf_internal_r+0x10c0>
    b474:	d8802215 	stw	r2,136(sp)
    b478:	002b883a 	mov	r21,zero
    b47c:	9d04b03a 	or	r2,r19,r20
    b480:	103f911e 	bne	r2,zero,b2c8 <__alt_data_end+0xfc00b2c8>
    b484:	00800044 	movi	r2,1
    b488:	10803fcc 	andi	r2,r2,255
    b48c:	00c00044 	movi	r3,1
    b490:	10c05f26 	beq	r2,r3,b610 <___vfiprintf_internal_r+0xb44>
    b494:	00c00084 	movi	r3,2
    b498:	10ffe31e 	bne	r2,r3,b428 <__alt_data_end+0xfc00b428>
    b49c:	0027883a 	mov	r19,zero
    b4a0:	0029883a 	mov	r20,zero
    b4a4:	00015106 	br	b9ec <___vfiprintf_internal_r+0xf20>
    b4a8:	9cc03fcc 	andi	r19,r19,255
    b4ac:	b811883a 	mov	r8,r23
    b4b0:	9802c01e 	bne	r19,zero,bfb4 <___vfiprintf_internal_r+0x14e8>
    b4b4:	01400074 	movhi	r5,1
    b4b8:	29533804 	addi	r5,r5,19680
    b4bc:	d9402615 	stw	r5,152(sp)
    b4c0:	8880080c 	andi	r2,r17,32
    b4c4:	103f541e 	bne	r2,zero,b218 <__alt_data_end+0xfc00b218>
    b4c8:	8880040c 	andi	r2,r17,16
    b4cc:	1001f226 	beq	r2,zero,bc98 <___vfiprintf_internal_r+0x11cc>
    b4d0:	d9402217 	ldw	r5,136(sp)
    b4d4:	0029883a 	mov	r20,zero
    b4d8:	2cc00017 	ldw	r19,0(r5)
    b4dc:	29400104 	addi	r5,r5,4
    b4e0:	d9402215 	stw	r5,136(sp)
    b4e4:	003f5106 	br	b22c <__alt_data_end+0xfc00b22c>
    b4e8:	d8c02217 	ldw	r3,136(sp)
    b4ec:	b811883a 	mov	r8,r23
    b4f0:	d8001d85 	stb	zero,118(sp)
    b4f4:	1dc00017 	ldw	r23,0(r3)
    b4f8:	1f000104 	addi	fp,r3,4
    b4fc:	b8025926 	beq	r23,zero,be64 <___vfiprintf_internal_r+0x1398>
    b500:	80023316 	blt	r16,zero,bdd0 <___vfiprintf_internal_r+0x1304>
    b504:	800d883a 	mov	r6,r16
    b508:	000b883a 	mov	r5,zero
    b50c:	b809883a 	mov	r4,r23
    b510:	da002a15 	stw	r8,168(sp)
    b514:	0008c0c0 	call	8c0c <memchr>
    b518:	da002a17 	ldw	r8,168(sp)
    b51c:	10026826 	beq	r2,zero,bec0 <___vfiprintf_internal_r+0x13f4>
    b520:	15e9c83a 	sub	r20,r2,r23
    b524:	dd401d83 	ldbu	r21,118(sp)
    b528:	df002215 	stw	fp,136(sp)
    b52c:	0021883a 	mov	r16,zero
    b530:	003e6906 	br	aed8 <__alt_data_end+0xfc00aed8>
    b534:	9cc03fcc 	andi	r19,r19,255
    b538:	b811883a 	mov	r8,r23
    b53c:	983fc126 	beq	r19,zero,b444 <__alt_data_end+0xfc00b444>
    b540:	d8c02303 	ldbu	r3,140(sp)
    b544:	d8c01d85 	stb	r3,118(sp)
    b548:	003fbe06 	br	b444 <__alt_data_end+0xfc00b444>
    b54c:	d9002217 	ldw	r4,136(sp)
    b550:	d9402217 	ldw	r5,136(sp)
    b554:	21000017 	ldw	r4,0(r4)
    b558:	28800104 	addi	r2,r5,4
    b55c:	d9002515 	stw	r4,148(sp)
    b560:	203e3d16 	blt	r4,zero,ae58 <__alt_data_end+0xfc00ae58>
    b564:	d8802215 	stw	r2,136(sp)
    b568:	b0c00007 	ldb	r3,0(r22)
    b56c:	003db406 	br	ac40 <__alt_data_end+0xfc00ac40>
    b570:	00c00ac4 	movi	r3,43
    b574:	d8c02305 	stb	r3,140(sp)
    b578:	04c00044 	movi	r19,1
    b57c:	b0c00007 	ldb	r3,0(r22)
    b580:	003daf06 	br	ac40 <__alt_data_end+0xfc00ac40>
    b584:	b0c00007 	ldb	r3,0(r22)
    b588:	01000a84 	movi	r4,42
    b58c:	b4000044 	addi	r16,r22,1
    b590:	19025e26 	beq	r3,r4,bf0c <___vfiprintf_internal_r+0x1440>
    b594:	1f3ff404 	addi	fp,r3,-48
    b598:	0009883a 	mov	r4,zero
    b59c:	af025236 	bltu	r21,fp,bee8 <___vfiprintf_internal_r+0x141c>
    b5a0:	01400284 	movi	r5,10
    b5a4:	00030d40 	call	30d4 <__mulsi3>
    b5a8:	80c00007 	ldb	r3,0(r16)
    b5ac:	1709883a 	add	r4,r2,fp
    b5b0:	85800044 	addi	r22,r16,1
    b5b4:	1f3ff404 	addi	fp,r3,-48
    b5b8:	b021883a 	mov	r16,r22
    b5bc:	af3ff82e 	bgeu	r21,fp,b5a0 <__alt_data_end+0xfc00b5a0>
    b5c0:	2021883a 	mov	r16,r4
    b5c4:	203d9f0e 	bge	r4,zero,ac44 <__alt_data_end+0xfc00ac44>
    b5c8:	043fffc4 	movi	r16,-1
    b5cc:	003d9d06 	br	ac44 <__alt_data_end+0xfc00ac44>
    b5d0:	8c401014 	ori	r17,r17,64
    b5d4:	b0c00007 	ldb	r3,0(r22)
    b5d8:	003d9906 	br	ac40 <__alt_data_end+0xfc00ac40>
    b5dc:	d9002217 	ldw	r4,136(sp)
    b5e0:	d8001d85 	stb	zero,118(sp)
    b5e4:	20c00204 	addi	r3,r4,8
    b5e8:	24c00017 	ldw	r19,0(r4)
    b5ec:	25000117 	ldw	r20,4(r4)
    b5f0:	8001e716 	blt	r16,zero,bd90 <___vfiprintf_internal_r+0x12c4>
    b5f4:	013fdfc4 	movi	r4,-129
    b5f8:	9d04b03a 	or	r2,r19,r20
    b5fc:	d8c02215 	stw	r3,136(sp)
    b600:	8922703a 	and	r17,r17,r4
    b604:	002b883a 	mov	r21,zero
    b608:	103f2f1e 	bne	r2,zero,b2c8 <__alt_data_end+0xfc00b2c8>
    b60c:	803e2f26 	beq	r16,zero,aecc <__alt_data_end+0xfc00aecc>
    b610:	0027883a 	mov	r19,zero
    b614:	9cc00c04 	addi	r19,r19,48
    b618:	dcc019c5 	stb	r19,103(sp)
    b61c:	dd002817 	ldw	r20,160(sp)
    b620:	ddc019c4 	addi	r23,sp,103
    b624:	003e2c06 	br	aed8 <__alt_data_end+0xfc00aed8>
    b628:	9cc03fcc 	andi	r19,r19,255
    b62c:	b811883a 	mov	r8,r23
    b630:	9802571e 	bne	r19,zero,bf90 <___vfiprintf_internal_r+0x14c4>
    b634:	18005726 	beq	r3,zero,b794 <___vfiprintf_internal_r+0xcc8>
    b638:	04c00044 	movi	r19,1
    b63c:	d8c01005 	stb	r3,64(sp)
    b640:	d8001d85 	stb	zero,118(sp)
    b644:	9829883a 	mov	r20,r19
    b648:	ddc01004 	addi	r23,sp,64
    b64c:	003f0a06 	br	b278 <__alt_data_end+0xfc00b278>
    b650:	d9402017 	ldw	r5,128(sp)
    b654:	d9002117 	ldw	r4,132(sp)
    b658:	d9801a04 	addi	r6,sp,104
    b65c:	da802a15 	stw	r10,168(sp)
    b660:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    b664:	da802a17 	ldw	r10,168(sp)
    b668:	1000501e 	bne	r2,zero,b7ac <___vfiprintf_internal_r+0xce0>
    b66c:	d9801b17 	ldw	r6,108(sp)
    b670:	d8801c17 	ldw	r2,112(sp)
    b674:	d811883a 	mov	r8,sp
    b678:	31000044 	addi	r4,r6,1
    b67c:	003e3606 	br	af58 <__alt_data_end+0xfc00af58>
    b680:	d9001b17 	ldw	r4,108(sp)
    b684:	d8801c17 	ldw	r2,112(sp)
    b688:	21400044 	addi	r5,r4,1
    b68c:	d9801d87 	ldb	r6,118(sp)
    b690:	303e5226 	beq	r6,zero,afdc <__alt_data_end+0xfc00afdc>
    b694:	01800044 	movi	r6,1
    b698:	d9001d84 	addi	r4,sp,118
    b69c:	1185883a 	add	r2,r2,r6
    b6a0:	41000015 	stw	r4,0(r8)
    b6a4:	41800115 	stw	r6,4(r8)
    b6a8:	d8801c15 	stw	r2,112(sp)
    b6ac:	d9401b15 	stw	r5,108(sp)
    b6b0:	010001c4 	movi	r4,7
    b6b4:	2140b00e 	bge	r4,r5,b978 <___vfiprintf_internal_r+0xeac>
    b6b8:	1000f61e 	bne	r2,zero,ba94 <___vfiprintf_internal_r+0xfc8>
    b6bc:	3800b31e 	bne	r7,zero,b98c <___vfiprintf_internal_r+0xec0>
    b6c0:	0009883a 	mov	r4,zero
    b6c4:	300b883a 	mov	r5,r6
    b6c8:	d811883a 	mov	r8,sp
    b6cc:	01802004 	movi	r6,128
    b6d0:	19be5226 	beq	r3,r6,b01c <__alt_data_end+0xfc00b01c>
    b6d4:	8521c83a 	sub	r16,r16,r20
    b6d8:	043e790e 	bge	zero,r16,b0c0 <__alt_data_end+0xfc00b0c0>
    b6dc:	05400404 	movi	r21,16
    b6e0:	ac01b00e 	bge	r21,r16,bda4 <___vfiprintf_internal_r+0x12d8>
    b6e4:	01400074 	movhi	r5,1
    b6e8:	29539e04 	addi	r5,r5,20088
    b6ec:	d9402315 	stw	r5,140(sp)
    b6f0:	070001c4 	movi	fp,7
    b6f4:	00000506 	br	b70c <___vfiprintf_internal_r+0xc40>
    b6f8:	21400084 	addi	r5,r4,2
    b6fc:	42000204 	addi	r8,r8,8
    b700:	1809883a 	mov	r4,r3
    b704:	843ffc04 	addi	r16,r16,-16
    b708:	ac000d0e 	bge	r21,r16,b740 <___vfiprintf_internal_r+0xc74>
    b70c:	10800404 	addi	r2,r2,16
    b710:	20c00044 	addi	r3,r4,1
    b714:	44800015 	stw	r18,0(r8)
    b718:	45400115 	stw	r21,4(r8)
    b71c:	d8801c15 	stw	r2,112(sp)
    b720:	d8c01b15 	stw	r3,108(sp)
    b724:	e0fff40e 	bge	fp,r3,b6f8 <__alt_data_end+0xfc00b6f8>
    b728:	1000101e 	bne	r2,zero,b76c <___vfiprintf_internal_r+0xca0>
    b72c:	843ffc04 	addi	r16,r16,-16
    b730:	01400044 	movi	r5,1
    b734:	0009883a 	mov	r4,zero
    b738:	d811883a 	mov	r8,sp
    b73c:	ac3ff316 	blt	r21,r16,b70c <__alt_data_end+0xfc00b70c>
    b740:	d8c02317 	ldw	r3,140(sp)
    b744:	1405883a 	add	r2,r2,r16
    b748:	44000115 	stw	r16,4(r8)
    b74c:	40c00015 	stw	r3,0(r8)
    b750:	d8801c15 	stw	r2,112(sp)
    b754:	d9401b15 	stw	r5,108(sp)
    b758:	00c001c4 	movi	r3,7
    b75c:	19401916 	blt	r3,r5,b7c4 <___vfiprintf_internal_r+0xcf8>
    b760:	42000204 	addi	r8,r8,8
    b764:	29400044 	addi	r5,r5,1
    b768:	003e5506 	br	b0c0 <__alt_data_end+0xfc00b0c0>
    b76c:	d9402017 	ldw	r5,128(sp)
    b770:	d9002117 	ldw	r4,132(sp)
    b774:	d9801a04 	addi	r6,sp,104
    b778:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    b77c:	10000b1e 	bne	r2,zero,b7ac <___vfiprintf_internal_r+0xce0>
    b780:	d9001b17 	ldw	r4,108(sp)
    b784:	d8801c17 	ldw	r2,112(sp)
    b788:	d811883a 	mov	r8,sp
    b78c:	21400044 	addi	r5,r4,1
    b790:	003fdc06 	br	b704 <__alt_data_end+0xfc00b704>
    b794:	d8801c17 	ldw	r2,112(sp)
    b798:	10000426 	beq	r2,zero,b7ac <___vfiprintf_internal_r+0xce0>
    b79c:	d9402017 	ldw	r5,128(sp)
    b7a0:	d9002117 	ldw	r4,132(sp)
    b7a4:	d9801a04 	addi	r6,sp,104
    b7a8:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    b7ac:	d9402017 	ldw	r5,128(sp)
    b7b0:	2880030b 	ldhu	r2,12(r5)
    b7b4:	1080100c 	andi	r2,r2,64
    b7b8:	10014d1e 	bne	r2,zero,bcf0 <___vfiprintf_internal_r+0x1224>
    b7bc:	d8802417 	ldw	r2,144(sp)
    b7c0:	003d9706 	br	ae20 <__alt_data_end+0xfc00ae20>
    b7c4:	1000d21e 	bne	r2,zero,bb10 <___vfiprintf_internal_r+0x1044>
    b7c8:	00c00044 	movi	r3,1
    b7cc:	a005883a 	mov	r2,r20
    b7d0:	ddc00015 	stw	r23,0(sp)
    b7d4:	dd000115 	stw	r20,4(sp)
    b7d8:	dd001c15 	stw	r20,112(sp)
    b7dc:	d8c01b15 	stw	r3,108(sp)
    b7e0:	d811883a 	mov	r8,sp
    b7e4:	42000204 	addi	r8,r8,8
    b7e8:	8c40010c 	andi	r17,r17,4
    b7ec:	88004026 	beq	r17,zero,b8f0 <___vfiprintf_internal_r+0xe24>
    b7f0:	d9002517 	ldw	r4,148(sp)
    b7f4:	24e3c83a 	sub	r17,r4,r19
    b7f8:	04403d0e 	bge	zero,r17,b8f0 <___vfiprintf_internal_r+0xe24>
    b7fc:	04000404 	movi	r16,16
    b800:	8441a90e 	bge	r16,r17,bea8 <___vfiprintf_internal_r+0x13dc>
    b804:	00c00074 	movhi	r3,1
    b808:	18d3a204 	addi	r3,r3,20104
    b80c:	d9001b17 	ldw	r4,108(sp)
    b810:	d8c02315 	stw	r3,140(sp)
    b814:	050001c4 	movi	r20,7
    b818:	dd402117 	ldw	r21,132(sp)
    b81c:	ddc02017 	ldw	r23,128(sp)
    b820:	00000506 	br	b838 <___vfiprintf_internal_r+0xd6c>
    b824:	21400084 	addi	r5,r4,2
    b828:	42000204 	addi	r8,r8,8
    b82c:	1809883a 	mov	r4,r3
    b830:	8c7ffc04 	addi	r17,r17,-16
    b834:	84400f0e 	bge	r16,r17,b874 <___vfiprintf_internal_r+0xda8>
    b838:	01400074 	movhi	r5,1
    b83c:	10800404 	addi	r2,r2,16
    b840:	20c00044 	addi	r3,r4,1
    b844:	2953a204 	addi	r5,r5,20104
    b848:	41400015 	stw	r5,0(r8)
    b84c:	44000115 	stw	r16,4(r8)
    b850:	d8801c15 	stw	r2,112(sp)
    b854:	d8c01b15 	stw	r3,108(sp)
    b858:	a0fff20e 	bge	r20,r3,b824 <__alt_data_end+0xfc00b824>
    b85c:	1000141e 	bne	r2,zero,b8b0 <___vfiprintf_internal_r+0xde4>
    b860:	8c7ffc04 	addi	r17,r17,-16
    b864:	01400044 	movi	r5,1
    b868:	0009883a 	mov	r4,zero
    b86c:	d811883a 	mov	r8,sp
    b870:	847ff116 	blt	r16,r17,b838 <__alt_data_end+0xfc00b838>
    b874:	d8c02317 	ldw	r3,140(sp)
    b878:	1445883a 	add	r2,r2,r17
    b87c:	44400115 	stw	r17,4(r8)
    b880:	40c00015 	stw	r3,0(r8)
    b884:	d8801c15 	stw	r2,112(sp)
    b888:	d9401b15 	stw	r5,108(sp)
    b88c:	00c001c4 	movi	r3,7
    b890:	1940170e 	bge	r3,r5,b8f0 <___vfiprintf_internal_r+0xe24>
    b894:	1000101e 	bne	r2,zero,b8d8 <___vfiprintf_internal_r+0xe0c>
    b898:	d8802517 	ldw	r2,148(sp)
    b89c:	14c11616 	blt	r2,r19,bcf8 <___vfiprintf_internal_r+0x122c>
    b8a0:	d9002417 	ldw	r4,144(sp)
    b8a4:	2089883a 	add	r4,r4,r2
    b8a8:	d9002415 	stw	r4,144(sp)
    b8ac:	003e1806 	br	b110 <__alt_data_end+0xfc00b110>
    b8b0:	d9801a04 	addi	r6,sp,104
    b8b4:	b80b883a 	mov	r5,r23
    b8b8:	a809883a 	mov	r4,r21
    b8bc:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    b8c0:	103fba1e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    b8c4:	d9001b17 	ldw	r4,108(sp)
    b8c8:	d8801c17 	ldw	r2,112(sp)
    b8cc:	d811883a 	mov	r8,sp
    b8d0:	21400044 	addi	r5,r4,1
    b8d4:	003fd606 	br	b830 <__alt_data_end+0xfc00b830>
    b8d8:	d9402017 	ldw	r5,128(sp)
    b8dc:	d9002117 	ldw	r4,132(sp)
    b8e0:	d9801a04 	addi	r6,sp,104
    b8e4:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    b8e8:	103fb01e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    b8ec:	d8801c17 	ldw	r2,112(sp)
    b8f0:	d8c02517 	ldw	r3,148(sp)
    b8f4:	1cc0010e 	bge	r3,r19,b8fc <___vfiprintf_internal_r+0xe30>
    b8f8:	9807883a 	mov	r3,r19
    b8fc:	d9002417 	ldw	r4,144(sp)
    b900:	20c9883a 	add	r4,r4,r3
    b904:	d9002415 	stw	r4,144(sp)
    b908:	103e0126 	beq	r2,zero,b110 <__alt_data_end+0xfc00b110>
    b90c:	d9402017 	ldw	r5,128(sp)
    b910:	d9002117 	ldw	r4,132(sp)
    b914:	d9801a04 	addi	r6,sp,104
    b918:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    b91c:	103dfc26 	beq	r2,zero,b110 <__alt_data_end+0xfc00b110>
    b920:	003fa206 	br	b7ac <__alt_data_end+0xfc00b7ac>
    b924:	d9402017 	ldw	r5,128(sp)
    b928:	d9002117 	ldw	r4,132(sp)
    b92c:	d9801a04 	addi	r6,sp,104
    b930:	d9c02b15 	stw	r7,172(sp)
    b934:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    b938:	d9c02b17 	ldw	r7,172(sp)
    b93c:	103f9b1e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    b940:	d9001b17 	ldw	r4,108(sp)
    b944:	d8801c17 	ldw	r2,112(sp)
    b948:	d811883a 	mov	r8,sp
    b94c:	21800044 	addi	r6,r4,1
    b950:	003dbf06 	br	b050 <__alt_data_end+0xfc00b050>
    b954:	1000d81e 	bne	r2,zero,bcb8 <___vfiprintf_internal_r+0x11ec>
    b958:	d9001d87 	ldb	r4,118(sp)
    b95c:	20000a26 	beq	r4,zero,b988 <___vfiprintf_internal_r+0xebc>
    b960:	00800044 	movi	r2,1
    b964:	d9001d84 	addi	r4,sp,118
    b968:	100b883a 	mov	r5,r2
    b96c:	d9000015 	stw	r4,0(sp)
    b970:	d8800115 	stw	r2,4(sp)
    b974:	d811883a 	mov	r8,sp
    b978:	2809883a 	mov	r4,r5
    b97c:	42000204 	addi	r8,r8,8
    b980:	29400044 	addi	r5,r5,1
    b984:	003d9506 	br	afdc <__alt_data_end+0xfc00afdc>
    b988:	3800fd26 	beq	r7,zero,bd80 <___vfiprintf_internal_r+0x12b4>
    b98c:	00800084 	movi	r2,2
    b990:	d9001d04 	addi	r4,sp,116
    b994:	d9000015 	stw	r4,0(sp)
    b998:	d8800115 	stw	r2,4(sp)
    b99c:	01400044 	movi	r5,1
    b9a0:	d811883a 	mov	r8,sp
    b9a4:	2809883a 	mov	r4,r5
    b9a8:	42000204 	addi	r8,r8,8
    b9ac:	29400044 	addi	r5,r5,1
    b9b0:	003f4606 	br	b6cc <__alt_data_end+0xfc00b6cc>
    b9b4:	d8802517 	ldw	r2,148(sp)
    b9b8:	14c0010e 	bge	r2,r19,b9c0 <___vfiprintf_internal_r+0xef4>
    b9bc:	9805883a 	mov	r2,r19
    b9c0:	d9402417 	ldw	r5,144(sp)
    b9c4:	288b883a 	add	r5,r5,r2
    b9c8:	d9402415 	stw	r5,144(sp)
    b9cc:	003dd006 	br	b110 <__alt_data_end+0xfc00b110>
    b9d0:	d8001d85 	stb	zero,118(sp)
    b9d4:	80005d16 	blt	r16,zero,bb4c <___vfiprintf_internal_r+0x1080>
    b9d8:	00ffdfc4 	movi	r3,-129
    b9dc:	9d04b03a 	or	r2,r19,r20
    b9e0:	88e2703a 	and	r17,r17,r3
    b9e4:	103d3726 	beq	r2,zero,aec4 <__alt_data_end+0xfc00aec4>
    b9e8:	002b883a 	mov	r21,zero
    b9ec:	d9002617 	ldw	r4,152(sp)
    b9f0:	ddc01a04 	addi	r23,sp,104
    b9f4:	988003cc 	andi	r2,r19,15
    b9f8:	a006973a 	slli	r3,r20,28
    b9fc:	2085883a 	add	r2,r4,r2
    ba00:	9826d13a 	srli	r19,r19,4
    ba04:	10800003 	ldbu	r2,0(r2)
    ba08:	a028d13a 	srli	r20,r20,4
    ba0c:	bdffffc4 	addi	r23,r23,-1
    ba10:	1ce6b03a 	or	r19,r3,r19
    ba14:	b8800005 	stb	r2,0(r23)
    ba18:	9d04b03a 	or	r2,r19,r20
    ba1c:	103ff51e 	bne	r2,zero,b9f4 <__alt_data_end+0xfc00b9f4>
    ba20:	d8801e17 	ldw	r2,120(sp)
    ba24:	15e9c83a 	sub	r20,r2,r23
    ba28:	003d2b06 	br	aed8 <__alt_data_end+0xfc00aed8>
    ba2c:	d9402017 	ldw	r5,128(sp)
    ba30:	d9002117 	ldw	r4,132(sp)
    ba34:	d9801a04 	addi	r6,sp,104
    ba38:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    ba3c:	103f5b1e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    ba40:	d8801c17 	ldw	r2,112(sp)
    ba44:	d811883a 	mov	r8,sp
    ba48:	003f6706 	br	b7e8 <__alt_data_end+0xfc00b7e8>
    ba4c:	d9402017 	ldw	r5,128(sp)
    ba50:	d9002117 	ldw	r4,132(sp)
    ba54:	d9801a04 	addi	r6,sp,104
    ba58:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    ba5c:	103f531e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    ba60:	d811883a 	mov	r8,sp
    ba64:	003cd906 	br	adcc <__alt_data_end+0xfc00adcc>
    ba68:	10803fcc 	andi	r2,r2,255
    ba6c:	1080201c 	xori	r2,r2,128
    ba70:	10bfe004 	addi	r2,r2,-128
    ba74:	00c00c04 	movi	r3,48
    ba78:	10ffe926 	beq	r2,r3,ba20 <__alt_data_end+0xfc00ba20>
    ba7c:	b8ffffc5 	stb	r3,-1(r23)
    ba80:	d8c01e17 	ldw	r3,120(sp)
    ba84:	b8bfffc4 	addi	r2,r23,-1
    ba88:	102f883a 	mov	r23,r2
    ba8c:	18a9c83a 	sub	r20,r3,r2
    ba90:	003d1106 	br	aed8 <__alt_data_end+0xfc00aed8>
    ba94:	d9402017 	ldw	r5,128(sp)
    ba98:	d9002117 	ldw	r4,132(sp)
    ba9c:	d9801a04 	addi	r6,sp,104
    baa0:	d8c02a15 	stw	r3,168(sp)
    baa4:	d9c02b15 	stw	r7,172(sp)
    baa8:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    baac:	d8c02a17 	ldw	r3,168(sp)
    bab0:	d9c02b17 	ldw	r7,172(sp)
    bab4:	103f3d1e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    bab8:	d9001b17 	ldw	r4,108(sp)
    babc:	d8801c17 	ldw	r2,112(sp)
    bac0:	d811883a 	mov	r8,sp
    bac4:	21400044 	addi	r5,r4,1
    bac8:	003d4406 	br	afdc <__alt_data_end+0xfc00afdc>
    bacc:	d9402017 	ldw	r5,128(sp)
    bad0:	d9002117 	ldw	r4,132(sp)
    bad4:	d9801a04 	addi	r6,sp,104
    bad8:	d8c02a15 	stw	r3,168(sp)
    badc:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    bae0:	d8c02a17 	ldw	r3,168(sp)
    bae4:	103f311e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    bae8:	d9001b17 	ldw	r4,108(sp)
    baec:	d8801c17 	ldw	r2,112(sp)
    baf0:	d811883a 	mov	r8,sp
    baf4:	21400044 	addi	r5,r4,1
    baf8:	003ef406 	br	b6cc <__alt_data_end+0xfc00b6cc>
    bafc:	1000bd1e 	bne	r2,zero,bdf4 <___vfiprintf_internal_r+0x1328>
    bb00:	01400044 	movi	r5,1
    bb04:	0009883a 	mov	r4,zero
    bb08:	d811883a 	mov	r8,sp
    bb0c:	003ef106 	br	b6d4 <__alt_data_end+0xfc00b6d4>
    bb10:	d9402017 	ldw	r5,128(sp)
    bb14:	d9002117 	ldw	r4,132(sp)
    bb18:	d9801a04 	addi	r6,sp,104
    bb1c:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    bb20:	103f221e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    bb24:	d9401b17 	ldw	r5,108(sp)
    bb28:	d8801c17 	ldw	r2,112(sp)
    bb2c:	d811883a 	mov	r8,sp
    bb30:	29400044 	addi	r5,r5,1
    bb34:	003d6206 	br	b0c0 <__alt_data_end+0xfc00b0c0>
    bb38:	01400074 	movhi	r5,1
    bb3c:	29533d04 	addi	r5,r5,19700
    bb40:	d9402615 	stw	r5,152(sp)
    bb44:	d8c02215 	stw	r3,136(sp)
    bb48:	1023883a 	mov	r17,r2
    bb4c:	9d04b03a 	or	r2,r19,r20
    bb50:	103fa51e 	bne	r2,zero,b9e8 <__alt_data_end+0xfc00b9e8>
    bb54:	002b883a 	mov	r21,zero
    bb58:	00800084 	movi	r2,2
    bb5c:	003e4a06 	br	b488 <__alt_data_end+0xfc00b488>
    bb60:	01400074 	movhi	r5,1
    bb64:	29533d04 	addi	r5,r5,19700
    bb68:	002b883a 	mov	r21,zero
    bb6c:	d9402615 	stw	r5,152(sp)
    bb70:	003f9e06 	br	b9ec <__alt_data_end+0xfc00b9ec>
    bb74:	d9402217 	ldw	r5,136(sp)
    bb78:	d8001d85 	stb	zero,118(sp)
    bb7c:	0029883a 	mov	r20,zero
    bb80:	28800104 	addi	r2,r5,4
    bb84:	2cc00017 	ldw	r19,0(r5)
    bb88:	803e3a16 	blt	r16,zero,b474 <__alt_data_end+0xfc00b474>
    bb8c:	00ffdfc4 	movi	r3,-129
    bb90:	d8802215 	stw	r2,136(sp)
    bb94:	88e2703a 	and	r17,r17,r3
    bb98:	002b883a 	mov	r21,zero
    bb9c:	983e9b26 	beq	r19,zero,b60c <__alt_data_end+0xfc00b60c>
    bba0:	00800244 	movi	r2,9
    bba4:	14fdc936 	bltu	r2,r19,b2cc <__alt_data_end+0xfc00b2cc>
    bba8:	003e9a06 	br	b614 <__alt_data_end+0xfc00b614>
    bbac:	00800c04 	movi	r2,48
    bbb0:	d8c01d45 	stb	r3,117(sp)
    bbb4:	d8801d05 	stb	r2,116(sp)
    bbb8:	d8001d85 	stb	zero,118(sp)
    bbbc:	88c00094 	ori	r3,r17,2
    bbc0:	80009c16 	blt	r16,zero,be34 <___vfiprintf_internal_r+0x1368>
    bbc4:	00bfdfc4 	movi	r2,-129
    bbc8:	88a2703a 	and	r17,r17,r2
    bbcc:	8c400094 	ori	r17,r17,2
    bbd0:	002b883a 	mov	r21,zero
    bbd4:	003f8506 	br	b9ec <__alt_data_end+0xfc00b9ec>
    bbd8:	b029883a 	mov	r20,r22
    bbdc:	003c0b06 	br	ac0c <__alt_data_end+0xfc00ac0c>
    bbe0:	04e7c83a 	sub	r19,zero,r19
    bbe4:	05400b44 	movi	r21,45
    bbe8:	9804c03a 	cmpne	r2,r19,zero
    bbec:	0529c83a 	sub	r20,zero,r20
    bbf0:	dd401d85 	stb	r21,118(sp)
    bbf4:	a0a9c83a 	sub	r20,r20,r2
    bbf8:	80009716 	blt	r16,zero,be58 <___vfiprintf_internal_r+0x138c>
    bbfc:	00bfdfc4 	movi	r2,-129
    bc00:	88a2703a 	and	r17,r17,r2
    bc04:	003db006 	br	b2c8 <__alt_data_end+0xfc00b2c8>
    bc08:	b0c00007 	ldb	r3,0(r22)
    bc0c:	003c0c06 	br	ac40 <__alt_data_end+0xfc00ac40>
    bc10:	8880100c 	andi	r2,r17,64
    bc14:	d8001d85 	stb	zero,118(sp)
    bc18:	1000461e 	bne	r2,zero,bd34 <___vfiprintf_internal_r+0x1268>
    bc1c:	d9002217 	ldw	r4,136(sp)
    bc20:	0029883a 	mov	r20,zero
    bc24:	20800104 	addi	r2,r4,4
    bc28:	24c00017 	ldw	r19,0(r4)
    bc2c:	803df80e 	bge	r16,zero,b410 <__alt_data_end+0xfc00b410>
    bc30:	9d06b03a 	or	r3,r19,r20
    bc34:	d8802215 	stw	r2,136(sp)
    bc38:	183d5e1e 	bne	r3,zero,b1b4 <__alt_data_end+0xfc00b1b4>
    bc3c:	002b883a 	mov	r21,zero
    bc40:	0005883a 	mov	r2,zero
    bc44:	003e1006 	br	b488 <__alt_data_end+0xfc00b488>
    bc48:	8880040c 	andi	r2,r17,16
    bc4c:	1000321e 	bne	r2,zero,bd18 <___vfiprintf_internal_r+0x124c>
    bc50:	8c40100c 	andi	r17,r17,64
    bc54:	88008d26 	beq	r17,zero,be8c <___vfiprintf_internal_r+0x13c0>
    bc58:	d9402217 	ldw	r5,136(sp)
    bc5c:	d8c02417 	ldw	r3,144(sp)
    bc60:	28800017 	ldw	r2,0(r5)
    bc64:	29400104 	addi	r5,r5,4
    bc68:	d9402215 	stw	r5,136(sp)
    bc6c:	10c0000d 	sth	r3,0(r2)
    bc70:	003bca06 	br	ab9c <__alt_data_end+0xfc00ab9c>
    bc74:	8880100c 	andi	r2,r17,64
    bc78:	10003a26 	beq	r2,zero,bd64 <___vfiprintf_internal_r+0x1298>
    bc7c:	d8802217 	ldw	r2,136(sp)
    bc80:	14c0000f 	ldh	r19,0(r2)
    bc84:	10800104 	addi	r2,r2,4
    bc88:	d8802215 	stw	r2,136(sp)
    bc8c:	9829d7fa 	srai	r20,r19,31
    bc90:	a005883a 	mov	r2,r20
    bc94:	003d8506 	br	b2ac <__alt_data_end+0xfc00b2ac>
    bc98:	8880100c 	andi	r2,r17,64
    bc9c:	10002b26 	beq	r2,zero,bd4c <___vfiprintf_internal_r+0x1280>
    bca0:	d8802217 	ldw	r2,136(sp)
    bca4:	0029883a 	mov	r20,zero
    bca8:	14c0000b 	ldhu	r19,0(r2)
    bcac:	10800104 	addi	r2,r2,4
    bcb0:	d8802215 	stw	r2,136(sp)
    bcb4:	003d5d06 	br	b22c <__alt_data_end+0xfc00b22c>
    bcb8:	d9402017 	ldw	r5,128(sp)
    bcbc:	d9002117 	ldw	r4,132(sp)
    bcc0:	d9801a04 	addi	r6,sp,104
    bcc4:	d8c02a15 	stw	r3,168(sp)
    bcc8:	d9c02b15 	stw	r7,172(sp)
    bccc:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    bcd0:	d8c02a17 	ldw	r3,168(sp)
    bcd4:	d9c02b17 	ldw	r7,172(sp)
    bcd8:	103eb41e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    bcdc:	d9001b17 	ldw	r4,108(sp)
    bce0:	d8801c17 	ldw	r2,112(sp)
    bce4:	d811883a 	mov	r8,sp
    bce8:	21400044 	addi	r5,r4,1
    bcec:	003e6706 	br	b68c <__alt_data_end+0xfc00b68c>
    bcf0:	00bfffc4 	movi	r2,-1
    bcf4:	003c4a06 	br	ae20 <__alt_data_end+0xfc00ae20>
    bcf8:	9805883a 	mov	r2,r19
    bcfc:	003ee806 	br	b8a0 <__alt_data_end+0xfc00b8a0>
    bd00:	d8c02217 	ldw	r3,136(sp)
    bd04:	0029883a 	mov	r20,zero
    bd08:	18800104 	addi	r2,r3,4
    bd0c:	1cc0000b 	ldhu	r19,0(r3)
    bd10:	803f9e0e 	bge	r16,zero,bb8c <__alt_data_end+0xfc00bb8c>
    bd14:	003dd706 	br	b474 <__alt_data_end+0xfc00b474>
    bd18:	d8c02217 	ldw	r3,136(sp)
    bd1c:	d9002417 	ldw	r4,144(sp)
    bd20:	18800017 	ldw	r2,0(r3)
    bd24:	18c00104 	addi	r3,r3,4
    bd28:	d8c02215 	stw	r3,136(sp)
    bd2c:	11000015 	stw	r4,0(r2)
    bd30:	003b9a06 	br	ab9c <__alt_data_end+0xfc00ab9c>
    bd34:	d8c02217 	ldw	r3,136(sp)
    bd38:	0029883a 	mov	r20,zero
    bd3c:	18800104 	addi	r2,r3,4
    bd40:	1cc0000b 	ldhu	r19,0(r3)
    bd44:	803db20e 	bge	r16,zero,b410 <__alt_data_end+0xfc00b410>
    bd48:	003fb906 	br	bc30 <__alt_data_end+0xfc00bc30>
    bd4c:	d9002217 	ldw	r4,136(sp)
    bd50:	0029883a 	mov	r20,zero
    bd54:	24c00017 	ldw	r19,0(r4)
    bd58:	21000104 	addi	r4,r4,4
    bd5c:	d9002215 	stw	r4,136(sp)
    bd60:	003d3206 	br	b22c <__alt_data_end+0xfc00b22c>
    bd64:	d8c02217 	ldw	r3,136(sp)
    bd68:	1cc00017 	ldw	r19,0(r3)
    bd6c:	18c00104 	addi	r3,r3,4
    bd70:	d8c02215 	stw	r3,136(sp)
    bd74:	9829d7fa 	srai	r20,r19,31
    bd78:	a005883a 	mov	r2,r20
    bd7c:	003d4b06 	br	b2ac <__alt_data_end+0xfc00b2ac>
    bd80:	0009883a 	mov	r4,zero
    bd84:	01400044 	movi	r5,1
    bd88:	d811883a 	mov	r8,sp
    bd8c:	003e4f06 	br	b6cc <__alt_data_end+0xfc00b6cc>
    bd90:	d8c02215 	stw	r3,136(sp)
    bd94:	002b883a 	mov	r21,zero
    bd98:	003db806 	br	b47c <__alt_data_end+0xfc00b47c>
    bd9c:	d811883a 	mov	r8,sp
    bda0:	003e9606 	br	b7fc <__alt_data_end+0xfc00b7fc>
    bda4:	01000074 	movhi	r4,1
    bda8:	21139e04 	addi	r4,r4,20088
    bdac:	d9002315 	stw	r4,140(sp)
    bdb0:	003e6306 	br	b740 <__alt_data_end+0xfc00b740>
    bdb4:	b0c00043 	ldbu	r3,1(r22)
    bdb8:	8c400814 	ori	r17,r17,32
    bdbc:	b5800044 	addi	r22,r22,1
    bdc0:	18c03fcc 	andi	r3,r3,255
    bdc4:	18c0201c 	xori	r3,r3,128
    bdc8:	18ffe004 	addi	r3,r3,-128
    bdcc:	003b9c06 	br	ac40 <__alt_data_end+0xfc00ac40>
    bdd0:	b809883a 	mov	r4,r23
    bdd4:	da002a15 	stw	r8,168(sp)
    bdd8:	000323c0 	call	323c <strlen>
    bddc:	1029883a 	mov	r20,r2
    bde0:	dd401d83 	ldbu	r21,118(sp)
    bde4:	df002215 	stw	fp,136(sp)
    bde8:	0021883a 	mov	r16,zero
    bdec:	da002a17 	ldw	r8,168(sp)
    bdf0:	003c3906 	br	aed8 <__alt_data_end+0xfc00aed8>
    bdf4:	d9402017 	ldw	r5,128(sp)
    bdf8:	d9002117 	ldw	r4,132(sp)
    bdfc:	d9801a04 	addi	r6,sp,104
    be00:	000a9b80 	call	a9b8 <__sprint_r.part.0>
    be04:	103e691e 	bne	r2,zero,b7ac <__alt_data_end+0xfc00b7ac>
    be08:	d9001b17 	ldw	r4,108(sp)
    be0c:	d8801c17 	ldw	r2,112(sp)
    be10:	d811883a 	mov	r8,sp
    be14:	21400044 	addi	r5,r4,1
    be18:	003e2e06 	br	b6d4 <__alt_data_end+0xfc00b6d4>
    be1c:	01000074 	movhi	r4,1
    be20:	2113a204 	addi	r4,r4,20104
    be24:	d9002315 	stw	r4,140(sp)
    be28:	d9001b17 	ldw	r4,108(sp)
    be2c:	21000044 	addi	r4,r4,1
    be30:	003c5e06 	br	afac <__alt_data_end+0xfc00afac>
    be34:	002b883a 	mov	r21,zero
    be38:	00800084 	movi	r2,2
    be3c:	10803fcc 	andi	r2,r2,255
    be40:	01000044 	movi	r4,1
    be44:	11002b26 	beq	r2,r4,bef4 <___vfiprintf_internal_r+0x1428>
    be48:	01000084 	movi	r4,2
    be4c:	11002b1e 	bne	r2,r4,befc <___vfiprintf_internal_r+0x1430>
    be50:	1823883a 	mov	r17,r3
    be54:	003ee506 	br	b9ec <__alt_data_end+0xfc00b9ec>
    be58:	8807883a 	mov	r3,r17
    be5c:	00800044 	movi	r2,1
    be60:	003ff606 	br	be3c <__alt_data_end+0xfc00be3c>
    be64:	00800184 	movi	r2,6
    be68:	1400012e 	bgeu	r2,r16,be70 <___vfiprintf_internal_r+0x13a4>
    be6c:	1021883a 	mov	r16,r2
    be70:	8029883a 	mov	r20,r16
    be74:	8027883a 	mov	r19,r16
    be78:	80002216 	blt	r16,zero,bf04 <___vfiprintf_internal_r+0x1438>
    be7c:	05c00074 	movhi	r23,1
    be80:	df002215 	stw	fp,136(sp)
    be84:	bdd34204 	addi	r23,r23,19720
    be88:	003cfb06 	br	b278 <__alt_data_end+0xfc00b278>
    be8c:	d9002217 	ldw	r4,136(sp)
    be90:	d9402417 	ldw	r5,144(sp)
    be94:	20800017 	ldw	r2,0(r4)
    be98:	21000104 	addi	r4,r4,4
    be9c:	d9002215 	stw	r4,136(sp)
    bea0:	11400015 	stw	r5,0(r2)
    bea4:	003b3d06 	br	ab9c <__alt_data_end+0xfc00ab9c>
    bea8:	01400074 	movhi	r5,1
    beac:	2953a204 	addi	r5,r5,20104
    beb0:	d9402315 	stw	r5,140(sp)
    beb4:	d9401b17 	ldw	r5,108(sp)
    beb8:	29400044 	addi	r5,r5,1
    bebc:	003e6d06 	br	b874 <__alt_data_end+0xfc00b874>
    bec0:	8029883a 	mov	r20,r16
    bec4:	dd401d83 	ldbu	r21,118(sp)
    bec8:	df002215 	stw	fp,136(sp)
    becc:	0021883a 	mov	r16,zero
    bed0:	003c0106 	br	aed8 <__alt_data_end+0xfc00aed8>
    bed4:	00c00074 	movhi	r3,1
    bed8:	18d39e04 	addi	r3,r3,20088
    bedc:	d8c02315 	stw	r3,140(sp)
    bee0:	280d883a 	mov	r6,r5
    bee4:	003c6906 	br	b08c <__alt_data_end+0xfc00b08c>
    bee8:	802d883a 	mov	r22,r16
    beec:	0021883a 	mov	r16,zero
    bef0:	003b5406 	br	ac44 <__alt_data_end+0xfc00ac44>
    bef4:	1823883a 	mov	r17,r3
    bef8:	003cf306 	br	b2c8 <__alt_data_end+0xfc00b2c8>
    befc:	1823883a 	mov	r17,r3
    bf00:	003cad06 	br	b1b8 <__alt_data_end+0xfc00b1b8>
    bf04:	0027883a 	mov	r19,zero
    bf08:	003fdc06 	br	be7c <__alt_data_end+0xfc00be7c>
    bf0c:	d9402217 	ldw	r5,136(sp)
    bf10:	8005883a 	mov	r2,r16
    bf14:	b0c00043 	ldbu	r3,1(r22)
    bf18:	2c000017 	ldw	r16,0(r5)
    bf1c:	29000104 	addi	r4,r5,4
    bf20:	d9002215 	stw	r4,136(sp)
    bf24:	102d883a 	mov	r22,r2
    bf28:	803fa50e 	bge	r16,zero,bdc0 <__alt_data_end+0xfc00bdc0>
    bf2c:	18c03fcc 	andi	r3,r3,255
    bf30:	18c0201c 	xori	r3,r3,128
    bf34:	043fffc4 	movi	r16,-1
    bf38:	18ffe004 	addi	r3,r3,-128
    bf3c:	003b4006 	br	ac40 <__alt_data_end+0xfc00ac40>
    bf40:	d9402303 	ldbu	r5,140(sp)
    bf44:	d9401d85 	stb	r5,118(sp)
    bf48:	003cae06 	br	b204 <__alt_data_end+0xfc00b204>
    bf4c:	d8c02303 	ldbu	r3,140(sp)
    bf50:	d8c01d85 	stb	r3,118(sp)
    bf54:	003d1406 	br	b3a8 <__alt_data_end+0xfc00b3a8>
    bf58:	d8c02303 	ldbu	r3,140(sp)
    bf5c:	d8c01d85 	stb	r3,118(sp)
    bf60:	003cca06 	br	b28c <__alt_data_end+0xfc00b28c>
    bf64:	8880004c 	andi	r2,r17,1
    bf68:	002b883a 	mov	r21,zero
    bf6c:	10000526 	beq	r2,zero,bf84 <___vfiprintf_internal_r+0x14b8>
    bf70:	00800c04 	movi	r2,48
    bf74:	d88019c5 	stb	r2,103(sp)
    bf78:	dd002817 	ldw	r20,160(sp)
    bf7c:	ddc019c4 	addi	r23,sp,103
    bf80:	003bd506 	br	aed8 <__alt_data_end+0xfc00aed8>
    bf84:	0029883a 	mov	r20,zero
    bf88:	ddc01a04 	addi	r23,sp,104
    bf8c:	003bd206 	br	aed8 <__alt_data_end+0xfc00aed8>
    bf90:	d9002303 	ldbu	r4,140(sp)
    bf94:	d9001d85 	stb	r4,118(sp)
    bf98:	003da606 	br	b634 <__alt_data_end+0xfc00b634>
    bf9c:	d8c02303 	ldbu	r3,140(sp)
    bfa0:	d8c01d85 	stb	r3,118(sp)
    bfa4:	003c7606 	br	b180 <__alt_data_end+0xfc00b180>
    bfa8:	d8c02303 	ldbu	r3,140(sp)
    bfac:	d8c01d85 	stb	r3,118(sp)
    bfb0:	003c6506 	br	b148 <__alt_data_end+0xfc00b148>
    bfb4:	d9002303 	ldbu	r4,140(sp)
    bfb8:	d9001d85 	stb	r4,118(sp)
    bfbc:	003d3d06 	br	b4b4 <__alt_data_end+0xfc00b4b4>
    bfc0:	d8c02303 	ldbu	r3,140(sp)
    bfc4:	d8c01d85 	stb	r3,118(sp)
    bfc8:	003d1d06 	br	b440 <__alt_data_end+0xfc00b440>
    bfcc:	d8c02303 	ldbu	r3,140(sp)
    bfd0:	d8c01d85 	stb	r3,118(sp)
    bfd4:	003d0306 	br	b3e4 <__alt_data_end+0xfc00b3e4>

0000bfd8 <__vfiprintf_internal>:
    bfd8:	00800074 	movhi	r2,1
    bfdc:	109ac804 	addi	r2,r2,27424
    bfe0:	300f883a 	mov	r7,r6
    bfe4:	280d883a 	mov	r6,r5
    bfe8:	200b883a 	mov	r5,r4
    bfec:	11000017 	ldw	r4,0(r2)
    bff0:	000aacc1 	jmpi	aacc <___vfiprintf_internal_r>

0000bff4 <__sbprintf>:
    bff4:	2880030b 	ldhu	r2,12(r5)
    bff8:	2ac01917 	ldw	r11,100(r5)
    bffc:	2a80038b 	ldhu	r10,14(r5)
    c000:	2a400717 	ldw	r9,28(r5)
    c004:	2a000917 	ldw	r8,36(r5)
    c008:	defee204 	addi	sp,sp,-1144
    c00c:	00c10004 	movi	r3,1024
    c010:	dc011a15 	stw	r16,1128(sp)
    c014:	10bfff4c 	andi	r2,r2,65533
    c018:	2821883a 	mov	r16,r5
    c01c:	d8cb883a 	add	r5,sp,r3
    c020:	dc811c15 	stw	r18,1136(sp)
    c024:	dc411b15 	stw	r17,1132(sp)
    c028:	dfc11d15 	stw	ra,1140(sp)
    c02c:	2025883a 	mov	r18,r4
    c030:	d881030d 	sth	r2,1036(sp)
    c034:	dac11915 	stw	r11,1124(sp)
    c038:	da81038d 	sth	r10,1038(sp)
    c03c:	da410715 	stw	r9,1052(sp)
    c040:	da010915 	stw	r8,1060(sp)
    c044:	dec10015 	stw	sp,1024(sp)
    c048:	dec10415 	stw	sp,1040(sp)
    c04c:	d8c10215 	stw	r3,1032(sp)
    c050:	d8c10515 	stw	r3,1044(sp)
    c054:	d8010615 	stw	zero,1048(sp)
    c058:	000aacc0 	call	aacc <___vfiprintf_internal_r>
    c05c:	1023883a 	mov	r17,r2
    c060:	10000416 	blt	r2,zero,c074 <__sbprintf+0x80>
    c064:	d9410004 	addi	r5,sp,1024
    c068:	9009883a 	mov	r4,r18
    c06c:	00072a80 	call	72a8 <_fflush_r>
    c070:	10000d1e 	bne	r2,zero,c0a8 <__sbprintf+0xb4>
    c074:	d881030b 	ldhu	r2,1036(sp)
    c078:	1080100c 	andi	r2,r2,64
    c07c:	10000326 	beq	r2,zero,c08c <__sbprintf+0x98>
    c080:	8080030b 	ldhu	r2,12(r16)
    c084:	10801014 	ori	r2,r2,64
    c088:	8080030d 	sth	r2,12(r16)
    c08c:	8805883a 	mov	r2,r17
    c090:	dfc11d17 	ldw	ra,1140(sp)
    c094:	dc811c17 	ldw	r18,1136(sp)
    c098:	dc411b17 	ldw	r17,1132(sp)
    c09c:	dc011a17 	ldw	r16,1128(sp)
    c0a0:	dec11e04 	addi	sp,sp,1144
    c0a4:	f800283a 	ret
    c0a8:	047fffc4 	movi	r17,-1
    c0ac:	003ff106 	br	c074 <__alt_data_end+0xfc00c074>

0000c0b0 <_write_r>:
    c0b0:	defffd04 	addi	sp,sp,-12
    c0b4:	2805883a 	mov	r2,r5
    c0b8:	dc000015 	stw	r16,0(sp)
    c0bc:	040000b4 	movhi	r16,2
    c0c0:	dc400115 	stw	r17,4(sp)
    c0c4:	300b883a 	mov	r5,r6
    c0c8:	8421c004 	addi	r16,r16,-30976
    c0cc:	2023883a 	mov	r17,r4
    c0d0:	380d883a 	mov	r6,r7
    c0d4:	1009883a 	mov	r4,r2
    c0d8:	dfc00215 	stw	ra,8(sp)
    c0dc:	80000015 	stw	zero,0(r16)
    c0e0:	00108c80 	call	108c8 <write>
    c0e4:	00ffffc4 	movi	r3,-1
    c0e8:	10c00526 	beq	r2,r3,c100 <_write_r+0x50>
    c0ec:	dfc00217 	ldw	ra,8(sp)
    c0f0:	dc400117 	ldw	r17,4(sp)
    c0f4:	dc000017 	ldw	r16,0(sp)
    c0f8:	dec00304 	addi	sp,sp,12
    c0fc:	f800283a 	ret
    c100:	80c00017 	ldw	r3,0(r16)
    c104:	183ff926 	beq	r3,zero,c0ec <__alt_data_end+0xfc00c0ec>
    c108:	88c00015 	stw	r3,0(r17)
    c10c:	003ff706 	br	c0ec <__alt_data_end+0xfc00c0ec>

0000c110 <_close_r>:
    c110:	defffd04 	addi	sp,sp,-12
    c114:	dc000015 	stw	r16,0(sp)
    c118:	040000b4 	movhi	r16,2
    c11c:	dc400115 	stw	r17,4(sp)
    c120:	8421c004 	addi	r16,r16,-30976
    c124:	2023883a 	mov	r17,r4
    c128:	2809883a 	mov	r4,r5
    c12c:	dfc00215 	stw	ra,8(sp)
    c130:	80000015 	stw	zero,0(r16)
    c134:	000fe9c0 	call	fe9c <close>
    c138:	00ffffc4 	movi	r3,-1
    c13c:	10c00526 	beq	r2,r3,c154 <_close_r+0x44>
    c140:	dfc00217 	ldw	ra,8(sp)
    c144:	dc400117 	ldw	r17,4(sp)
    c148:	dc000017 	ldw	r16,0(sp)
    c14c:	dec00304 	addi	sp,sp,12
    c150:	f800283a 	ret
    c154:	80c00017 	ldw	r3,0(r16)
    c158:	183ff926 	beq	r3,zero,c140 <__alt_data_end+0xfc00c140>
    c15c:	88c00015 	stw	r3,0(r17)
    c160:	003ff706 	br	c140 <__alt_data_end+0xfc00c140>

0000c164 <_calloc_r>:
    c164:	defffe04 	addi	sp,sp,-8
    c168:	2805883a 	mov	r2,r5
    c16c:	dc000015 	stw	r16,0(sp)
    c170:	300b883a 	mov	r5,r6
    c174:	2021883a 	mov	r16,r4
    c178:	1009883a 	mov	r4,r2
    c17c:	dfc00115 	stw	ra,4(sp)
    c180:	00030d40 	call	30d4 <__mulsi3>
    c184:	100b883a 	mov	r5,r2
    c188:	8009883a 	mov	r4,r16
    c18c:	00084000 	call	8400 <_malloc_r>
    c190:	10002926 	beq	r2,zero,c238 <_calloc_r+0xd4>
    c194:	11bfff17 	ldw	r6,-4(r2)
    c198:	1021883a 	mov	r16,r2
    c19c:	00bfff04 	movi	r2,-4
    c1a0:	308c703a 	and	r6,r6,r2
    c1a4:	00c00904 	movi	r3,36
    c1a8:	308d883a 	add	r6,r6,r2
    c1ac:	19801636 	bltu	r3,r6,c208 <_calloc_r+0xa4>
    c1b0:	008004c4 	movi	r2,19
    c1b4:	11800b2e 	bgeu	r2,r6,c1e4 <_calloc_r+0x80>
    c1b8:	80000015 	stw	zero,0(r16)
    c1bc:	80000115 	stw	zero,4(r16)
    c1c0:	008006c4 	movi	r2,27
    c1c4:	11801a2e 	bgeu	r2,r6,c230 <_calloc_r+0xcc>
    c1c8:	80000215 	stw	zero,8(r16)
    c1cc:	80000315 	stw	zero,12(r16)
    c1d0:	30c0151e 	bne	r6,r3,c228 <_calloc_r+0xc4>
    c1d4:	80000415 	stw	zero,16(r16)
    c1d8:	80800604 	addi	r2,r16,24
    c1dc:	80000515 	stw	zero,20(r16)
    c1e0:	00000106 	br	c1e8 <_calloc_r+0x84>
    c1e4:	8005883a 	mov	r2,r16
    c1e8:	10000015 	stw	zero,0(r2)
    c1ec:	10000115 	stw	zero,4(r2)
    c1f0:	10000215 	stw	zero,8(r2)
    c1f4:	8005883a 	mov	r2,r16
    c1f8:	dfc00117 	ldw	ra,4(sp)
    c1fc:	dc000017 	ldw	r16,0(sp)
    c200:	dec00204 	addi	sp,sp,8
    c204:	f800283a 	ret
    c208:	000b883a 	mov	r5,zero
    c20c:	8009883a 	mov	r4,r16
    c210:	0008f940 	call	8f94 <memset>
    c214:	8005883a 	mov	r2,r16
    c218:	dfc00117 	ldw	ra,4(sp)
    c21c:	dc000017 	ldw	r16,0(sp)
    c220:	dec00204 	addi	sp,sp,8
    c224:	f800283a 	ret
    c228:	80800404 	addi	r2,r16,16
    c22c:	003fee06 	br	c1e8 <__alt_data_end+0xfc00c1e8>
    c230:	80800204 	addi	r2,r16,8
    c234:	003fec06 	br	c1e8 <__alt_data_end+0xfc00c1e8>
    c238:	0005883a 	mov	r2,zero
    c23c:	003fee06 	br	c1f8 <__alt_data_end+0xfc00c1f8>

0000c240 <_fclose_r>:
    c240:	28003926 	beq	r5,zero,c328 <_fclose_r+0xe8>
    c244:	defffc04 	addi	sp,sp,-16
    c248:	dc400115 	stw	r17,4(sp)
    c24c:	dc000015 	stw	r16,0(sp)
    c250:	dfc00315 	stw	ra,12(sp)
    c254:	dc800215 	stw	r18,8(sp)
    c258:	2023883a 	mov	r17,r4
    c25c:	2821883a 	mov	r16,r5
    c260:	20000226 	beq	r4,zero,c26c <_fclose_r+0x2c>
    c264:	20800e17 	ldw	r2,56(r4)
    c268:	10002726 	beq	r2,zero,c308 <_fclose_r+0xc8>
    c26c:	8080030f 	ldh	r2,12(r16)
    c270:	1000071e 	bne	r2,zero,c290 <_fclose_r+0x50>
    c274:	0005883a 	mov	r2,zero
    c278:	dfc00317 	ldw	ra,12(sp)
    c27c:	dc800217 	ldw	r18,8(sp)
    c280:	dc400117 	ldw	r17,4(sp)
    c284:	dc000017 	ldw	r16,0(sp)
    c288:	dec00404 	addi	sp,sp,16
    c28c:	f800283a 	ret
    c290:	800b883a 	mov	r5,r16
    c294:	8809883a 	mov	r4,r17
    c298:	000708c0 	call	708c <__sflush_r>
    c29c:	1025883a 	mov	r18,r2
    c2a0:	80800b17 	ldw	r2,44(r16)
    c2a4:	10000426 	beq	r2,zero,c2b8 <_fclose_r+0x78>
    c2a8:	81400717 	ldw	r5,28(r16)
    c2ac:	8809883a 	mov	r4,r17
    c2b0:	103ee83a 	callr	r2
    c2b4:	10001616 	blt	r2,zero,c310 <_fclose_r+0xd0>
    c2b8:	8080030b 	ldhu	r2,12(r16)
    c2bc:	1080200c 	andi	r2,r2,128
    c2c0:	1000151e 	bne	r2,zero,c318 <_fclose_r+0xd8>
    c2c4:	81400c17 	ldw	r5,48(r16)
    c2c8:	28000526 	beq	r5,zero,c2e0 <_fclose_r+0xa0>
    c2cc:	80801004 	addi	r2,r16,64
    c2d0:	28800226 	beq	r5,r2,c2dc <_fclose_r+0x9c>
    c2d4:	8809883a 	mov	r4,r17
    c2d8:	00078080 	call	7808 <_free_r>
    c2dc:	80000c15 	stw	zero,48(r16)
    c2e0:	81401117 	ldw	r5,68(r16)
    c2e4:	28000326 	beq	r5,zero,c2f4 <_fclose_r+0xb4>
    c2e8:	8809883a 	mov	r4,r17
    c2ec:	00078080 	call	7808 <_free_r>
    c2f0:	80001115 	stw	zero,68(r16)
    c2f4:	00076a40 	call	76a4 <__sfp_lock_acquire>
    c2f8:	8000030d 	sth	zero,12(r16)
    c2fc:	00076a80 	call	76a8 <__sfp_lock_release>
    c300:	9005883a 	mov	r2,r18
    c304:	003fdc06 	br	c278 <__alt_data_end+0xfc00c278>
    c308:	00076940 	call	7694 <__sinit>
    c30c:	003fd706 	br	c26c <__alt_data_end+0xfc00c26c>
    c310:	04bfffc4 	movi	r18,-1
    c314:	003fe806 	br	c2b8 <__alt_data_end+0xfc00c2b8>
    c318:	81400417 	ldw	r5,16(r16)
    c31c:	8809883a 	mov	r4,r17
    c320:	00078080 	call	7808 <_free_r>
    c324:	003fe706 	br	c2c4 <__alt_data_end+0xfc00c2c4>
    c328:	0005883a 	mov	r2,zero
    c32c:	f800283a 	ret

0000c330 <fclose>:
    c330:	00800074 	movhi	r2,1
    c334:	109ac804 	addi	r2,r2,27424
    c338:	200b883a 	mov	r5,r4
    c33c:	11000017 	ldw	r4,0(r2)
    c340:	000c2401 	jmpi	c240 <_fclose_r>

0000c344 <__fputwc>:
    c344:	defff804 	addi	sp,sp,-32
    c348:	dcc00415 	stw	r19,16(sp)
    c34c:	dc800315 	stw	r18,12(sp)
    c350:	dc000115 	stw	r16,4(sp)
    c354:	dfc00715 	stw	ra,28(sp)
    c358:	dd400615 	stw	r21,24(sp)
    c35c:	dd000515 	stw	r20,20(sp)
    c360:	dc400215 	stw	r17,8(sp)
    c364:	2027883a 	mov	r19,r4
    c368:	2825883a 	mov	r18,r5
    c36c:	3021883a 	mov	r16,r6
    c370:	00081f00 	call	81f0 <__locale_mb_cur_max>
    c374:	00c00044 	movi	r3,1
    c378:	10c03e26 	beq	r2,r3,c474 <__fputwc+0x130>
    c37c:	81c01704 	addi	r7,r16,92
    c380:	900d883a 	mov	r6,r18
    c384:	d80b883a 	mov	r5,sp
    c388:	9809883a 	mov	r4,r19
    c38c:	000c8140 	call	c814 <_wcrtomb_r>
    c390:	1029883a 	mov	r20,r2
    c394:	00bfffc4 	movi	r2,-1
    c398:	a0802026 	beq	r20,r2,c41c <__fputwc+0xd8>
    c39c:	d9400003 	ldbu	r5,0(sp)
    c3a0:	a0001c26 	beq	r20,zero,c414 <__fputwc+0xd0>
    c3a4:	0023883a 	mov	r17,zero
    c3a8:	05400284 	movi	r21,10
    c3ac:	00000906 	br	c3d4 <__fputwc+0x90>
    c3b0:	80800017 	ldw	r2,0(r16)
    c3b4:	11400005 	stb	r5,0(r2)
    c3b8:	80c00017 	ldw	r3,0(r16)
    c3bc:	18c00044 	addi	r3,r3,1
    c3c0:	80c00015 	stw	r3,0(r16)
    c3c4:	8c400044 	addi	r17,r17,1
    c3c8:	dc45883a 	add	r2,sp,r17
    c3cc:	8d00112e 	bgeu	r17,r20,c414 <__fputwc+0xd0>
    c3d0:	11400003 	ldbu	r5,0(r2)
    c3d4:	80c00217 	ldw	r3,8(r16)
    c3d8:	18ffffc4 	addi	r3,r3,-1
    c3dc:	80c00215 	stw	r3,8(r16)
    c3e0:	183ff30e 	bge	r3,zero,c3b0 <__alt_data_end+0xfc00c3b0>
    c3e4:	80800617 	ldw	r2,24(r16)
    c3e8:	18801916 	blt	r3,r2,c450 <__fputwc+0x10c>
    c3ec:	80800017 	ldw	r2,0(r16)
    c3f0:	11400005 	stb	r5,0(r2)
    c3f4:	80800017 	ldw	r2,0(r16)
    c3f8:	10c00003 	ldbu	r3,0(r2)
    c3fc:	10800044 	addi	r2,r2,1
    c400:	1d402326 	beq	r3,r21,c490 <__fputwc+0x14c>
    c404:	80800015 	stw	r2,0(r16)
    c408:	8c400044 	addi	r17,r17,1
    c40c:	dc45883a 	add	r2,sp,r17
    c410:	8d3fef36 	bltu	r17,r20,c3d0 <__alt_data_end+0xfc00c3d0>
    c414:	9005883a 	mov	r2,r18
    c418:	00000406 	br	c42c <__fputwc+0xe8>
    c41c:	80c0030b 	ldhu	r3,12(r16)
    c420:	a005883a 	mov	r2,r20
    c424:	18c01014 	ori	r3,r3,64
    c428:	80c0030d 	sth	r3,12(r16)
    c42c:	dfc00717 	ldw	ra,28(sp)
    c430:	dd400617 	ldw	r21,24(sp)
    c434:	dd000517 	ldw	r20,20(sp)
    c438:	dcc00417 	ldw	r19,16(sp)
    c43c:	dc800317 	ldw	r18,12(sp)
    c440:	dc400217 	ldw	r17,8(sp)
    c444:	dc000117 	ldw	r16,4(sp)
    c448:	dec00804 	addi	sp,sp,32
    c44c:	f800283a 	ret
    c450:	800d883a 	mov	r6,r16
    c454:	29403fcc 	andi	r5,r5,255
    c458:	9809883a 	mov	r4,r19
    c45c:	000c6bc0 	call	c6bc <__swbuf_r>
    c460:	10bfffe0 	cmpeqi	r2,r2,-1
    c464:	10803fcc 	andi	r2,r2,255
    c468:	103fd626 	beq	r2,zero,c3c4 <__alt_data_end+0xfc00c3c4>
    c46c:	00bfffc4 	movi	r2,-1
    c470:	003fee06 	br	c42c <__alt_data_end+0xfc00c42c>
    c474:	90ffffc4 	addi	r3,r18,-1
    c478:	01003f84 	movi	r4,254
    c47c:	20ffbf36 	bltu	r4,r3,c37c <__alt_data_end+0xfc00c37c>
    c480:	900b883a 	mov	r5,r18
    c484:	dc800005 	stb	r18,0(sp)
    c488:	1029883a 	mov	r20,r2
    c48c:	003fc506 	br	c3a4 <__alt_data_end+0xfc00c3a4>
    c490:	800d883a 	mov	r6,r16
    c494:	a80b883a 	mov	r5,r21
    c498:	9809883a 	mov	r4,r19
    c49c:	000c6bc0 	call	c6bc <__swbuf_r>
    c4a0:	10bfffe0 	cmpeqi	r2,r2,-1
    c4a4:	003fef06 	br	c464 <__alt_data_end+0xfc00c464>

0000c4a8 <_fputwc_r>:
    c4a8:	3080030b 	ldhu	r2,12(r6)
    c4ac:	10c8000c 	andi	r3,r2,8192
    c4b0:	1800051e 	bne	r3,zero,c4c8 <_fputwc_r+0x20>
    c4b4:	30c01917 	ldw	r3,100(r6)
    c4b8:	10880014 	ori	r2,r2,8192
    c4bc:	3080030d 	sth	r2,12(r6)
    c4c0:	18880014 	ori	r2,r3,8192
    c4c4:	30801915 	stw	r2,100(r6)
    c4c8:	000c3441 	jmpi	c344 <__fputwc>

0000c4cc <fputwc>:
    c4cc:	00800074 	movhi	r2,1
    c4d0:	defffc04 	addi	sp,sp,-16
    c4d4:	109ac804 	addi	r2,r2,27424
    c4d8:	dc000115 	stw	r16,4(sp)
    c4dc:	14000017 	ldw	r16,0(r2)
    c4e0:	dc400215 	stw	r17,8(sp)
    c4e4:	dfc00315 	stw	ra,12(sp)
    c4e8:	2023883a 	mov	r17,r4
    c4ec:	80000226 	beq	r16,zero,c4f8 <fputwc+0x2c>
    c4f0:	80800e17 	ldw	r2,56(r16)
    c4f4:	10001026 	beq	r2,zero,c538 <fputwc+0x6c>
    c4f8:	2880030b 	ldhu	r2,12(r5)
    c4fc:	10c8000c 	andi	r3,r2,8192
    c500:	1800051e 	bne	r3,zero,c518 <fputwc+0x4c>
    c504:	28c01917 	ldw	r3,100(r5)
    c508:	10880014 	ori	r2,r2,8192
    c50c:	2880030d 	sth	r2,12(r5)
    c510:	18880014 	ori	r2,r3,8192
    c514:	28801915 	stw	r2,100(r5)
    c518:	280d883a 	mov	r6,r5
    c51c:	8009883a 	mov	r4,r16
    c520:	880b883a 	mov	r5,r17
    c524:	dfc00317 	ldw	ra,12(sp)
    c528:	dc400217 	ldw	r17,8(sp)
    c52c:	dc000117 	ldw	r16,4(sp)
    c530:	dec00404 	addi	sp,sp,16
    c534:	000c3441 	jmpi	c344 <__fputwc>
    c538:	8009883a 	mov	r4,r16
    c53c:	d9400015 	stw	r5,0(sp)
    c540:	00076940 	call	7694 <__sinit>
    c544:	d9400017 	ldw	r5,0(sp)
    c548:	003feb06 	br	c4f8 <__alt_data_end+0xfc00c4f8>

0000c54c <_fstat_r>:
    c54c:	defffd04 	addi	sp,sp,-12
    c550:	2805883a 	mov	r2,r5
    c554:	dc000015 	stw	r16,0(sp)
    c558:	040000b4 	movhi	r16,2
    c55c:	dc400115 	stw	r17,4(sp)
    c560:	8421c004 	addi	r16,r16,-30976
    c564:	2023883a 	mov	r17,r4
    c568:	300b883a 	mov	r5,r6
    c56c:	1009883a 	mov	r4,r2
    c570:	dfc00215 	stw	ra,8(sp)
    c574:	80000015 	stw	zero,0(r16)
    c578:	000ffdc0 	call	ffdc <fstat>
    c57c:	00ffffc4 	movi	r3,-1
    c580:	10c00526 	beq	r2,r3,c598 <_fstat_r+0x4c>
    c584:	dfc00217 	ldw	ra,8(sp)
    c588:	dc400117 	ldw	r17,4(sp)
    c58c:	dc000017 	ldw	r16,0(sp)
    c590:	dec00304 	addi	sp,sp,12
    c594:	f800283a 	ret
    c598:	80c00017 	ldw	r3,0(r16)
    c59c:	183ff926 	beq	r3,zero,c584 <__alt_data_end+0xfc00c584>
    c5a0:	88c00015 	stw	r3,0(r17)
    c5a4:	003ff706 	br	c584 <__alt_data_end+0xfc00c584>

0000c5a8 <_isatty_r>:
    c5a8:	defffd04 	addi	sp,sp,-12
    c5ac:	dc000015 	stw	r16,0(sp)
    c5b0:	040000b4 	movhi	r16,2
    c5b4:	dc400115 	stw	r17,4(sp)
    c5b8:	8421c004 	addi	r16,r16,-30976
    c5bc:	2023883a 	mov	r17,r4
    c5c0:	2809883a 	mov	r4,r5
    c5c4:	dfc00215 	stw	ra,8(sp)
    c5c8:	80000015 	stw	zero,0(r16)
    c5cc:	00100d00 	call	100d0 <isatty>
    c5d0:	00ffffc4 	movi	r3,-1
    c5d4:	10c00526 	beq	r2,r3,c5ec <_isatty_r+0x44>
    c5d8:	dfc00217 	ldw	ra,8(sp)
    c5dc:	dc400117 	ldw	r17,4(sp)
    c5e0:	dc000017 	ldw	r16,0(sp)
    c5e4:	dec00304 	addi	sp,sp,12
    c5e8:	f800283a 	ret
    c5ec:	80c00017 	ldw	r3,0(r16)
    c5f0:	183ff926 	beq	r3,zero,c5d8 <__alt_data_end+0xfc00c5d8>
    c5f4:	88c00015 	stw	r3,0(r17)
    c5f8:	003ff706 	br	c5d8 <__alt_data_end+0xfc00c5d8>

0000c5fc <_lseek_r>:
    c5fc:	defffd04 	addi	sp,sp,-12
    c600:	2805883a 	mov	r2,r5
    c604:	dc000015 	stw	r16,0(sp)
    c608:	040000b4 	movhi	r16,2
    c60c:	dc400115 	stw	r17,4(sp)
    c610:	300b883a 	mov	r5,r6
    c614:	8421c004 	addi	r16,r16,-30976
    c618:	2023883a 	mov	r17,r4
    c61c:	380d883a 	mov	r6,r7
    c620:	1009883a 	mov	r4,r2
    c624:	dfc00215 	stw	ra,8(sp)
    c628:	80000015 	stw	zero,0(r16)
    c62c:	00102a40 	call	102a4 <lseek>
    c630:	00ffffc4 	movi	r3,-1
    c634:	10c00526 	beq	r2,r3,c64c <_lseek_r+0x50>
    c638:	dfc00217 	ldw	ra,8(sp)
    c63c:	dc400117 	ldw	r17,4(sp)
    c640:	dc000017 	ldw	r16,0(sp)
    c644:	dec00304 	addi	sp,sp,12
    c648:	f800283a 	ret
    c64c:	80c00017 	ldw	r3,0(r16)
    c650:	183ff926 	beq	r3,zero,c638 <__alt_data_end+0xfc00c638>
    c654:	88c00015 	stw	r3,0(r17)
    c658:	003ff706 	br	c638 <__alt_data_end+0xfc00c638>

0000c65c <_read_r>:
    c65c:	defffd04 	addi	sp,sp,-12
    c660:	2805883a 	mov	r2,r5
    c664:	dc000015 	stw	r16,0(sp)
    c668:	040000b4 	movhi	r16,2
    c66c:	dc400115 	stw	r17,4(sp)
    c670:	300b883a 	mov	r5,r6
    c674:	8421c004 	addi	r16,r16,-30976
    c678:	2023883a 	mov	r17,r4
    c67c:	380d883a 	mov	r6,r7
    c680:	1009883a 	mov	r4,r2
    c684:	dfc00215 	stw	ra,8(sp)
    c688:	80000015 	stw	zero,0(r16)
    c68c:	00104800 	call	10480 <read>
    c690:	00ffffc4 	movi	r3,-1
    c694:	10c00526 	beq	r2,r3,c6ac <_read_r+0x50>
    c698:	dfc00217 	ldw	ra,8(sp)
    c69c:	dc400117 	ldw	r17,4(sp)
    c6a0:	dc000017 	ldw	r16,0(sp)
    c6a4:	dec00304 	addi	sp,sp,12
    c6a8:	f800283a 	ret
    c6ac:	80c00017 	ldw	r3,0(r16)
    c6b0:	183ff926 	beq	r3,zero,c698 <__alt_data_end+0xfc00c698>
    c6b4:	88c00015 	stw	r3,0(r17)
    c6b8:	003ff706 	br	c698 <__alt_data_end+0xfc00c698>

0000c6bc <__swbuf_r>:
    c6bc:	defffb04 	addi	sp,sp,-20
    c6c0:	dcc00315 	stw	r19,12(sp)
    c6c4:	dc800215 	stw	r18,8(sp)
    c6c8:	dc000015 	stw	r16,0(sp)
    c6cc:	dfc00415 	stw	ra,16(sp)
    c6d0:	dc400115 	stw	r17,4(sp)
    c6d4:	2025883a 	mov	r18,r4
    c6d8:	2827883a 	mov	r19,r5
    c6dc:	3021883a 	mov	r16,r6
    c6e0:	20000226 	beq	r4,zero,c6ec <__swbuf_r+0x30>
    c6e4:	20800e17 	ldw	r2,56(r4)
    c6e8:	10004226 	beq	r2,zero,c7f4 <__swbuf_r+0x138>
    c6ec:	80800617 	ldw	r2,24(r16)
    c6f0:	8100030b 	ldhu	r4,12(r16)
    c6f4:	80800215 	stw	r2,8(r16)
    c6f8:	2080020c 	andi	r2,r4,8
    c6fc:	10003626 	beq	r2,zero,c7d8 <__swbuf_r+0x11c>
    c700:	80c00417 	ldw	r3,16(r16)
    c704:	18003426 	beq	r3,zero,c7d8 <__swbuf_r+0x11c>
    c708:	2088000c 	andi	r2,r4,8192
    c70c:	9c403fcc 	andi	r17,r19,255
    c710:	10001a26 	beq	r2,zero,c77c <__swbuf_r+0xc0>
    c714:	80800017 	ldw	r2,0(r16)
    c718:	81000517 	ldw	r4,20(r16)
    c71c:	10c7c83a 	sub	r3,r2,r3
    c720:	1900200e 	bge	r3,r4,c7a4 <__swbuf_r+0xe8>
    c724:	18c00044 	addi	r3,r3,1
    c728:	81000217 	ldw	r4,8(r16)
    c72c:	11400044 	addi	r5,r2,1
    c730:	81400015 	stw	r5,0(r16)
    c734:	213fffc4 	addi	r4,r4,-1
    c738:	81000215 	stw	r4,8(r16)
    c73c:	14c00005 	stb	r19,0(r2)
    c740:	80800517 	ldw	r2,20(r16)
    c744:	10c01e26 	beq	r2,r3,c7c0 <__swbuf_r+0x104>
    c748:	8080030b 	ldhu	r2,12(r16)
    c74c:	1080004c 	andi	r2,r2,1
    c750:	10000226 	beq	r2,zero,c75c <__swbuf_r+0xa0>
    c754:	00800284 	movi	r2,10
    c758:	88801926 	beq	r17,r2,c7c0 <__swbuf_r+0x104>
    c75c:	8805883a 	mov	r2,r17
    c760:	dfc00417 	ldw	ra,16(sp)
    c764:	dcc00317 	ldw	r19,12(sp)
    c768:	dc800217 	ldw	r18,8(sp)
    c76c:	dc400117 	ldw	r17,4(sp)
    c770:	dc000017 	ldw	r16,0(sp)
    c774:	dec00504 	addi	sp,sp,20
    c778:	f800283a 	ret
    c77c:	81401917 	ldw	r5,100(r16)
    c780:	00b7ffc4 	movi	r2,-8193
    c784:	21080014 	ori	r4,r4,8192
    c788:	2884703a 	and	r2,r5,r2
    c78c:	80801915 	stw	r2,100(r16)
    c790:	80800017 	ldw	r2,0(r16)
    c794:	8100030d 	sth	r4,12(r16)
    c798:	81000517 	ldw	r4,20(r16)
    c79c:	10c7c83a 	sub	r3,r2,r3
    c7a0:	193fe016 	blt	r3,r4,c724 <__alt_data_end+0xfc00c724>
    c7a4:	800b883a 	mov	r5,r16
    c7a8:	9009883a 	mov	r4,r18
    c7ac:	00072a80 	call	72a8 <_fflush_r>
    c7b0:	1000071e 	bne	r2,zero,c7d0 <__swbuf_r+0x114>
    c7b4:	80800017 	ldw	r2,0(r16)
    c7b8:	00c00044 	movi	r3,1
    c7bc:	003fda06 	br	c728 <__alt_data_end+0xfc00c728>
    c7c0:	800b883a 	mov	r5,r16
    c7c4:	9009883a 	mov	r4,r18
    c7c8:	00072a80 	call	72a8 <_fflush_r>
    c7cc:	103fe326 	beq	r2,zero,c75c <__alt_data_end+0xfc00c75c>
    c7d0:	00bfffc4 	movi	r2,-1
    c7d4:	003fe206 	br	c760 <__alt_data_end+0xfc00c760>
    c7d8:	800b883a 	mov	r5,r16
    c7dc:	9009883a 	mov	r4,r18
    c7e0:	00056880 	call	5688 <__swsetup_r>
    c7e4:	103ffa1e 	bne	r2,zero,c7d0 <__alt_data_end+0xfc00c7d0>
    c7e8:	8100030b 	ldhu	r4,12(r16)
    c7ec:	80c00417 	ldw	r3,16(r16)
    c7f0:	003fc506 	br	c708 <__alt_data_end+0xfc00c708>
    c7f4:	00076940 	call	7694 <__sinit>
    c7f8:	003fbc06 	br	c6ec <__alt_data_end+0xfc00c6ec>

0000c7fc <__swbuf>:
    c7fc:	00800074 	movhi	r2,1
    c800:	109ac804 	addi	r2,r2,27424
    c804:	280d883a 	mov	r6,r5
    c808:	200b883a 	mov	r5,r4
    c80c:	11000017 	ldw	r4,0(r2)
    c810:	000c6bc1 	jmpi	c6bc <__swbuf_r>

0000c814 <_wcrtomb_r>:
    c814:	defff604 	addi	sp,sp,-40
    c818:	00800074 	movhi	r2,1
    c81c:	dc800815 	stw	r18,32(sp)
    c820:	dc400715 	stw	r17,28(sp)
    c824:	dc000615 	stw	r16,24(sp)
    c828:	109acc04 	addi	r2,r2,27440
    c82c:	dfc00915 	stw	ra,36(sp)
    c830:	2021883a 	mov	r16,r4
    c834:	3823883a 	mov	r17,r7
    c838:	14800017 	ldw	r18,0(r2)
    c83c:	28001426 	beq	r5,zero,c890 <_wcrtomb_r+0x7c>
    c840:	d9400415 	stw	r5,16(sp)
    c844:	d9800515 	stw	r6,20(sp)
    c848:	00081e40 	call	81e4 <__locale_charset>
    c84c:	d9800517 	ldw	r6,20(sp)
    c850:	d9400417 	ldw	r5,16(sp)
    c854:	100f883a 	mov	r7,r2
    c858:	dc400015 	stw	r17,0(sp)
    c85c:	8009883a 	mov	r4,r16
    c860:	903ee83a 	callr	r18
    c864:	00ffffc4 	movi	r3,-1
    c868:	10c0031e 	bne	r2,r3,c878 <_wcrtomb_r+0x64>
    c86c:	88000015 	stw	zero,0(r17)
    c870:	00c02284 	movi	r3,138
    c874:	80c00015 	stw	r3,0(r16)
    c878:	dfc00917 	ldw	ra,36(sp)
    c87c:	dc800817 	ldw	r18,32(sp)
    c880:	dc400717 	ldw	r17,28(sp)
    c884:	dc000617 	ldw	r16,24(sp)
    c888:	dec00a04 	addi	sp,sp,40
    c88c:	f800283a 	ret
    c890:	00081e40 	call	81e4 <__locale_charset>
    c894:	100f883a 	mov	r7,r2
    c898:	dc400015 	stw	r17,0(sp)
    c89c:	000d883a 	mov	r6,zero
    c8a0:	d9400104 	addi	r5,sp,4
    c8a4:	8009883a 	mov	r4,r16
    c8a8:	903ee83a 	callr	r18
    c8ac:	003fed06 	br	c864 <__alt_data_end+0xfc00c864>

0000c8b0 <wcrtomb>:
    c8b0:	defff604 	addi	sp,sp,-40
    c8b4:	00800074 	movhi	r2,1
    c8b8:	dc800615 	stw	r18,24(sp)
    c8bc:	dc400515 	stw	r17,20(sp)
    c8c0:	109ac804 	addi	r2,r2,27424
    c8c4:	dfc00915 	stw	ra,36(sp)
    c8c8:	dd000815 	stw	r20,32(sp)
    c8cc:	dcc00715 	stw	r19,28(sp)
    c8d0:	dc000415 	stw	r16,16(sp)
    c8d4:	3025883a 	mov	r18,r6
    c8d8:	14400017 	ldw	r17,0(r2)
    c8dc:	20001926 	beq	r4,zero,c944 <wcrtomb+0x94>
    c8e0:	00800074 	movhi	r2,1
    c8e4:	109acc04 	addi	r2,r2,27440
    c8e8:	15000017 	ldw	r20,0(r2)
    c8ec:	2021883a 	mov	r16,r4
    c8f0:	2827883a 	mov	r19,r5
    c8f4:	00081e40 	call	81e4 <__locale_charset>
    c8f8:	100f883a 	mov	r7,r2
    c8fc:	dc800015 	stw	r18,0(sp)
    c900:	980d883a 	mov	r6,r19
    c904:	800b883a 	mov	r5,r16
    c908:	8809883a 	mov	r4,r17
    c90c:	a03ee83a 	callr	r20
    c910:	00ffffc4 	movi	r3,-1
    c914:	10c0031e 	bne	r2,r3,c924 <wcrtomb+0x74>
    c918:	90000015 	stw	zero,0(r18)
    c91c:	00c02284 	movi	r3,138
    c920:	88c00015 	stw	r3,0(r17)
    c924:	dfc00917 	ldw	ra,36(sp)
    c928:	dd000817 	ldw	r20,32(sp)
    c92c:	dcc00717 	ldw	r19,28(sp)
    c930:	dc800617 	ldw	r18,24(sp)
    c934:	dc400517 	ldw	r17,20(sp)
    c938:	dc000417 	ldw	r16,16(sp)
    c93c:	dec00a04 	addi	sp,sp,40
    c940:	f800283a 	ret
    c944:	00800074 	movhi	r2,1
    c948:	109acc04 	addi	r2,r2,27440
    c94c:	14000017 	ldw	r16,0(r2)
    c950:	00081e40 	call	81e4 <__locale_charset>
    c954:	100f883a 	mov	r7,r2
    c958:	dc800015 	stw	r18,0(sp)
    c95c:	000d883a 	mov	r6,zero
    c960:	d9400104 	addi	r5,sp,4
    c964:	8809883a 	mov	r4,r17
    c968:	803ee83a 	callr	r16
    c96c:	003fe806 	br	c910 <__alt_data_end+0xfc00c910>

0000c970 <__ascii_wctomb>:
    c970:	28000526 	beq	r5,zero,c988 <__ascii_wctomb+0x18>
    c974:	00803fc4 	movi	r2,255
    c978:	11800536 	bltu	r2,r6,c990 <__ascii_wctomb+0x20>
    c97c:	29800005 	stb	r6,0(r5)
    c980:	00800044 	movi	r2,1
    c984:	f800283a 	ret
    c988:	0005883a 	mov	r2,zero
    c98c:	f800283a 	ret
    c990:	00802284 	movi	r2,138
    c994:	20800015 	stw	r2,0(r4)
    c998:	00bfffc4 	movi	r2,-1
    c99c:	f800283a 	ret

0000c9a0 <_wctomb_r>:
    c9a0:	00800074 	movhi	r2,1
    c9a4:	defff904 	addi	sp,sp,-28
    c9a8:	109acc04 	addi	r2,r2,27440
    c9ac:	dfc00615 	stw	ra,24(sp)
    c9b0:	dc400515 	stw	r17,20(sp)
    c9b4:	dc000415 	stw	r16,16(sp)
    c9b8:	3823883a 	mov	r17,r7
    c9bc:	14000017 	ldw	r16,0(r2)
    c9c0:	d9000115 	stw	r4,4(sp)
    c9c4:	d9400215 	stw	r5,8(sp)
    c9c8:	d9800315 	stw	r6,12(sp)
    c9cc:	00081e40 	call	81e4 <__locale_charset>
    c9d0:	d9800317 	ldw	r6,12(sp)
    c9d4:	d9400217 	ldw	r5,8(sp)
    c9d8:	d9000117 	ldw	r4,4(sp)
    c9dc:	100f883a 	mov	r7,r2
    c9e0:	dc400015 	stw	r17,0(sp)
    c9e4:	803ee83a 	callr	r16
    c9e8:	dfc00617 	ldw	ra,24(sp)
    c9ec:	dc400517 	ldw	r17,20(sp)
    c9f0:	dc000417 	ldw	r16,16(sp)
    c9f4:	dec00704 	addi	sp,sp,28
    c9f8:	f800283a 	ret

0000c9fc <__udivdi3>:
    c9fc:	defff404 	addi	sp,sp,-48
    ca00:	dcc00515 	stw	r19,20(sp)
    ca04:	dc000215 	stw	r16,8(sp)
    ca08:	dfc00b15 	stw	ra,44(sp)
    ca0c:	df000a15 	stw	fp,40(sp)
    ca10:	ddc00915 	stw	r23,36(sp)
    ca14:	dd800815 	stw	r22,32(sp)
    ca18:	dd400715 	stw	r21,28(sp)
    ca1c:	dd000615 	stw	r20,24(sp)
    ca20:	dc800415 	stw	r18,16(sp)
    ca24:	dc400315 	stw	r17,12(sp)
    ca28:	2027883a 	mov	r19,r4
    ca2c:	2821883a 	mov	r16,r5
    ca30:	3800461e 	bne	r7,zero,cb4c <__udivdi3+0x150>
    ca34:	3023883a 	mov	r17,r6
    ca38:	2025883a 	mov	r18,r4
    ca3c:	2980572e 	bgeu	r5,r6,cb9c <__udivdi3+0x1a0>
    ca40:	00bfffd4 	movui	r2,65535
    ca44:	282d883a 	mov	r22,r5
    ca48:	1180b236 	bltu	r2,r6,cd14 <__udivdi3+0x318>
    ca4c:	00803fc4 	movi	r2,255
    ca50:	1185803a 	cmpltu	r2,r2,r6
    ca54:	100490fa 	slli	r2,r2,3
    ca58:	3086d83a 	srl	r3,r6,r2
    ca5c:	01000074 	movhi	r4,1
    ca60:	2113a604 	addi	r4,r4,20120
    ca64:	20c7883a 	add	r3,r4,r3
    ca68:	18c00003 	ldbu	r3,0(r3)
    ca6c:	1885883a 	add	r2,r3,r2
    ca70:	00c00804 	movi	r3,32
    ca74:	1887c83a 	sub	r3,r3,r2
    ca78:	18000526 	beq	r3,zero,ca90 <__udivdi3+0x94>
    ca7c:	80e0983a 	sll	r16,r16,r3
    ca80:	9884d83a 	srl	r2,r19,r2
    ca84:	30e2983a 	sll	r17,r6,r3
    ca88:	98e4983a 	sll	r18,r19,r3
    ca8c:	142cb03a 	or	r22,r2,r16
    ca90:	882ad43a 	srli	r21,r17,16
    ca94:	b009883a 	mov	r4,r22
    ca98:	8d3fffcc 	andi	r20,r17,65535
    ca9c:	a80b883a 	mov	r5,r21
    caa0:	000307c0 	call	307c <__umodsi3>
    caa4:	b009883a 	mov	r4,r22
    caa8:	a80b883a 	mov	r5,r21
    caac:	1027883a 	mov	r19,r2
    cab0:	00030180 	call	3018 <__udivsi3>
    cab4:	100b883a 	mov	r5,r2
    cab8:	a009883a 	mov	r4,r20
    cabc:	102d883a 	mov	r22,r2
    cac0:	00030d40 	call	30d4 <__mulsi3>
    cac4:	9826943a 	slli	r19,r19,16
    cac8:	9006d43a 	srli	r3,r18,16
    cacc:	1cc6b03a 	or	r3,r3,r19
    cad0:	1880052e 	bgeu	r3,r2,cae8 <__udivdi3+0xec>
    cad4:	1c47883a 	add	r3,r3,r17
    cad8:	b13fffc4 	addi	r4,r22,-1
    cadc:	1c400136 	bltu	r3,r17,cae4 <__udivdi3+0xe8>
    cae0:	18814236 	bltu	r3,r2,cfec <__udivdi3+0x5f0>
    cae4:	202d883a 	mov	r22,r4
    cae8:	18a1c83a 	sub	r16,r3,r2
    caec:	8009883a 	mov	r4,r16
    caf0:	a80b883a 	mov	r5,r21
    caf4:	000307c0 	call	307c <__umodsi3>
    caf8:	1027883a 	mov	r19,r2
    cafc:	8009883a 	mov	r4,r16
    cb00:	a80b883a 	mov	r5,r21
    cb04:	9826943a 	slli	r19,r19,16
    cb08:	00030180 	call	3018 <__udivsi3>
    cb0c:	100b883a 	mov	r5,r2
    cb10:	a009883a 	mov	r4,r20
    cb14:	94bfffcc 	andi	r18,r18,65535
    cb18:	1021883a 	mov	r16,r2
    cb1c:	94e4b03a 	or	r18,r18,r19
    cb20:	00030d40 	call	30d4 <__mulsi3>
    cb24:	9080052e 	bgeu	r18,r2,cb3c <__udivdi3+0x140>
    cb28:	8ca5883a 	add	r18,r17,r18
    cb2c:	80ffffc4 	addi	r3,r16,-1
    cb30:	94410c36 	bltu	r18,r17,cf64 <__udivdi3+0x568>
    cb34:	90810b2e 	bgeu	r18,r2,cf64 <__udivdi3+0x568>
    cb38:	843fff84 	addi	r16,r16,-2
    cb3c:	b004943a 	slli	r2,r22,16
    cb40:	0007883a 	mov	r3,zero
    cb44:	1404b03a 	or	r2,r2,r16
    cb48:	00005e06 	br	ccc4 <__udivdi3+0x2c8>
    cb4c:	29c05b36 	bltu	r5,r7,ccbc <__udivdi3+0x2c0>
    cb50:	00bfffd4 	movui	r2,65535
    cb54:	11c0672e 	bgeu	r2,r7,ccf4 <__udivdi3+0x2f8>
    cb58:	00804034 	movhi	r2,256
    cb5c:	10bfffc4 	addi	r2,r2,-1
    cb60:	11c10a36 	bltu	r2,r7,cf8c <__udivdi3+0x590>
    cb64:	00800404 	movi	r2,16
    cb68:	3886d83a 	srl	r3,r7,r2
    cb6c:	01000074 	movhi	r4,1
    cb70:	2113a604 	addi	r4,r4,20120
    cb74:	20c7883a 	add	r3,r4,r3
    cb78:	18c00003 	ldbu	r3,0(r3)
    cb7c:	05c00804 	movi	r23,32
    cb80:	1885883a 	add	r2,r3,r2
    cb84:	b8afc83a 	sub	r23,r23,r2
    cb88:	b800671e 	bne	r23,zero,cd28 <__udivdi3+0x32c>
    cb8c:	3c010536 	bltu	r7,r16,cfa4 <__udivdi3+0x5a8>
    cb90:	9985403a 	cmpgeu	r2,r19,r6
    cb94:	0007883a 	mov	r3,zero
    cb98:	00004a06 	br	ccc4 <__udivdi3+0x2c8>
    cb9c:	3000041e 	bne	r6,zero,cbb0 <__udivdi3+0x1b4>
    cba0:	000b883a 	mov	r5,zero
    cba4:	01000044 	movi	r4,1
    cba8:	00030180 	call	3018 <__udivsi3>
    cbac:	1023883a 	mov	r17,r2
    cbb0:	00bfffd4 	movui	r2,65535
    cbb4:	1440532e 	bgeu	r2,r17,cd04 <__udivdi3+0x308>
    cbb8:	00804034 	movhi	r2,256
    cbbc:	10bfffc4 	addi	r2,r2,-1
    cbc0:	1440f436 	bltu	r2,r17,cf94 <__udivdi3+0x598>
    cbc4:	00800404 	movi	r2,16
    cbc8:	8886d83a 	srl	r3,r17,r2
    cbcc:	01000074 	movhi	r4,1
    cbd0:	2113a604 	addi	r4,r4,20120
    cbd4:	20c7883a 	add	r3,r4,r3
    cbd8:	18c00003 	ldbu	r3,0(r3)
    cbdc:	1885883a 	add	r2,r3,r2
    cbe0:	00c00804 	movi	r3,32
    cbe4:	1887c83a 	sub	r3,r3,r2
    cbe8:	1800a51e 	bne	r3,zero,ce80 <__udivdi3+0x484>
    cbec:	882ad43a 	srli	r21,r17,16
    cbf0:	8461c83a 	sub	r16,r16,r17
    cbf4:	8d3fffcc 	andi	r20,r17,65535
    cbf8:	00c00044 	movi	r3,1
    cbfc:	a80b883a 	mov	r5,r21
    cc00:	8009883a 	mov	r4,r16
    cc04:	d8c00115 	stw	r3,4(sp)
    cc08:	000307c0 	call	307c <__umodsi3>
    cc0c:	a80b883a 	mov	r5,r21
    cc10:	8009883a 	mov	r4,r16
    cc14:	1027883a 	mov	r19,r2
    cc18:	00030180 	call	3018 <__udivsi3>
    cc1c:	a00b883a 	mov	r5,r20
    cc20:	1009883a 	mov	r4,r2
    cc24:	102d883a 	mov	r22,r2
    cc28:	00030d40 	call	30d4 <__mulsi3>
    cc2c:	9826943a 	slli	r19,r19,16
    cc30:	900ed43a 	srli	r7,r18,16
    cc34:	d8c00117 	ldw	r3,4(sp)
    cc38:	3cceb03a 	or	r7,r7,r19
    cc3c:	3880052e 	bgeu	r7,r2,cc54 <__udivdi3+0x258>
    cc40:	3c4f883a 	add	r7,r7,r17
    cc44:	b13fffc4 	addi	r4,r22,-1
    cc48:	3c400136 	bltu	r7,r17,cc50 <__udivdi3+0x254>
    cc4c:	3880e436 	bltu	r7,r2,cfe0 <__udivdi3+0x5e4>
    cc50:	202d883a 	mov	r22,r4
    cc54:	38a1c83a 	sub	r16,r7,r2
    cc58:	8009883a 	mov	r4,r16
    cc5c:	a80b883a 	mov	r5,r21
    cc60:	d8c00115 	stw	r3,4(sp)
    cc64:	000307c0 	call	307c <__umodsi3>
    cc68:	1027883a 	mov	r19,r2
    cc6c:	8009883a 	mov	r4,r16
    cc70:	a80b883a 	mov	r5,r21
    cc74:	9826943a 	slli	r19,r19,16
    cc78:	00030180 	call	3018 <__udivsi3>
    cc7c:	a00b883a 	mov	r5,r20
    cc80:	1009883a 	mov	r4,r2
    cc84:	94bfffcc 	andi	r18,r18,65535
    cc88:	1021883a 	mov	r16,r2
    cc8c:	94e4b03a 	or	r18,r18,r19
    cc90:	00030d40 	call	30d4 <__mulsi3>
    cc94:	d8c00117 	ldw	r3,4(sp)
    cc98:	9080052e 	bgeu	r18,r2,ccb0 <__udivdi3+0x2b4>
    cc9c:	8ca5883a 	add	r18,r17,r18
    cca0:	813fffc4 	addi	r4,r16,-1
    cca4:	9440ad36 	bltu	r18,r17,cf5c <__udivdi3+0x560>
    cca8:	9080ac2e 	bgeu	r18,r2,cf5c <__udivdi3+0x560>
    ccac:	843fff84 	addi	r16,r16,-2
    ccb0:	b004943a 	slli	r2,r22,16
    ccb4:	1404b03a 	or	r2,r2,r16
    ccb8:	00000206 	br	ccc4 <__udivdi3+0x2c8>
    ccbc:	0007883a 	mov	r3,zero
    ccc0:	0005883a 	mov	r2,zero
    ccc4:	dfc00b17 	ldw	ra,44(sp)
    ccc8:	df000a17 	ldw	fp,40(sp)
    cccc:	ddc00917 	ldw	r23,36(sp)
    ccd0:	dd800817 	ldw	r22,32(sp)
    ccd4:	dd400717 	ldw	r21,28(sp)
    ccd8:	dd000617 	ldw	r20,24(sp)
    ccdc:	dcc00517 	ldw	r19,20(sp)
    cce0:	dc800417 	ldw	r18,16(sp)
    cce4:	dc400317 	ldw	r17,12(sp)
    cce8:	dc000217 	ldw	r16,8(sp)
    ccec:	dec00c04 	addi	sp,sp,48
    ccf0:	f800283a 	ret
    ccf4:	00803fc4 	movi	r2,255
    ccf8:	11c5803a 	cmpltu	r2,r2,r7
    ccfc:	100490fa 	slli	r2,r2,3
    cd00:	003f9906 	br	cb68 <__alt_data_end+0xfc00cb68>
    cd04:	00803fc4 	movi	r2,255
    cd08:	1445803a 	cmpltu	r2,r2,r17
    cd0c:	100490fa 	slli	r2,r2,3
    cd10:	003fad06 	br	cbc8 <__alt_data_end+0xfc00cbc8>
    cd14:	00804034 	movhi	r2,256
    cd18:	10bfffc4 	addi	r2,r2,-1
    cd1c:	11809f36 	bltu	r2,r6,cf9c <__udivdi3+0x5a0>
    cd20:	00800404 	movi	r2,16
    cd24:	003f4c06 	br	ca58 <__alt_data_end+0xfc00ca58>
    cd28:	3dce983a 	sll	r7,r7,r23
    cd2c:	30b8d83a 	srl	fp,r6,r2
    cd30:	80a2d83a 	srl	r17,r16,r2
    cd34:	35cc983a 	sll	r6,r6,r23
    cd38:	3f38b03a 	or	fp,r7,fp
    cd3c:	e024d43a 	srli	r18,fp,16
    cd40:	9884d83a 	srl	r2,r19,r2
    cd44:	85e0983a 	sll	r16,r16,r23
    cd48:	8809883a 	mov	r4,r17
    cd4c:	900b883a 	mov	r5,r18
    cd50:	d9800015 	stw	r6,0(sp)
    cd54:	1420b03a 	or	r16,r2,r16
    cd58:	000307c0 	call	307c <__umodsi3>
    cd5c:	900b883a 	mov	r5,r18
    cd60:	8809883a 	mov	r4,r17
    cd64:	1029883a 	mov	r20,r2
    cd68:	e5bfffcc 	andi	r22,fp,65535
    cd6c:	00030180 	call	3018 <__udivsi3>
    cd70:	100b883a 	mov	r5,r2
    cd74:	b009883a 	mov	r4,r22
    cd78:	102b883a 	mov	r21,r2
    cd7c:	00030d40 	call	30d4 <__mulsi3>
    cd80:	a028943a 	slli	r20,r20,16
    cd84:	8006d43a 	srli	r3,r16,16
    cd88:	1d06b03a 	or	r3,r3,r20
    cd8c:	1880042e 	bgeu	r3,r2,cda0 <__udivdi3+0x3a4>
    cd90:	1f07883a 	add	r3,r3,fp
    cd94:	a93fffc4 	addi	r4,r21,-1
    cd98:	1f00892e 	bgeu	r3,fp,cfc0 <__udivdi3+0x5c4>
    cd9c:	202b883a 	mov	r21,r4
    cda0:	18a3c83a 	sub	r17,r3,r2
    cda4:	8809883a 	mov	r4,r17
    cda8:	900b883a 	mov	r5,r18
    cdac:	000307c0 	call	307c <__umodsi3>
    cdb0:	1029883a 	mov	r20,r2
    cdb4:	8809883a 	mov	r4,r17
    cdb8:	900b883a 	mov	r5,r18
    cdbc:	a028943a 	slli	r20,r20,16
    cdc0:	00030180 	call	3018 <__udivsi3>
    cdc4:	100b883a 	mov	r5,r2
    cdc8:	b009883a 	mov	r4,r22
    cdcc:	843fffcc 	andi	r16,r16,65535
    cdd0:	1023883a 	mov	r17,r2
    cdd4:	8520b03a 	or	r16,r16,r20
    cdd8:	00030d40 	call	30d4 <__mulsi3>
    cddc:	8080042e 	bgeu	r16,r2,cdf0 <__udivdi3+0x3f4>
    cde0:	8721883a 	add	r16,r16,fp
    cde4:	88ffffc4 	addi	r3,r17,-1
    cde8:	8700712e 	bgeu	r16,fp,cfb0 <__udivdi3+0x5b4>
    cdec:	1823883a 	mov	r17,r3
    cdf0:	a80e943a 	slli	r7,r21,16
    cdf4:	d8c00017 	ldw	r3,0(sp)
    cdf8:	80a1c83a 	sub	r16,r16,r2
    cdfc:	3c64b03a 	or	r18,r7,r17
    ce00:	1d3fffcc 	andi	r20,r3,65535
    ce04:	9022d43a 	srli	r17,r18,16
    ce08:	95bfffcc 	andi	r22,r18,65535
    ce0c:	a00b883a 	mov	r5,r20
    ce10:	b009883a 	mov	r4,r22
    ce14:	182ad43a 	srli	r21,r3,16
    ce18:	00030d40 	call	30d4 <__mulsi3>
    ce1c:	a00b883a 	mov	r5,r20
    ce20:	8809883a 	mov	r4,r17
    ce24:	1039883a 	mov	fp,r2
    ce28:	00030d40 	call	30d4 <__mulsi3>
    ce2c:	8809883a 	mov	r4,r17
    ce30:	a80b883a 	mov	r5,r21
    ce34:	1029883a 	mov	r20,r2
    ce38:	00030d40 	call	30d4 <__mulsi3>
    ce3c:	a80b883a 	mov	r5,r21
    ce40:	b009883a 	mov	r4,r22
    ce44:	1023883a 	mov	r17,r2
    ce48:	00030d40 	call	30d4 <__mulsi3>
    ce4c:	e006d43a 	srli	r3,fp,16
    ce50:	1505883a 	add	r2,r2,r20
    ce54:	1887883a 	add	r3,r3,r2
    ce58:	1d00022e 	bgeu	r3,r20,ce64 <__udivdi3+0x468>
    ce5c:	00800074 	movhi	r2,1
    ce60:	88a3883a 	add	r17,r17,r2
    ce64:	1804d43a 	srli	r2,r3,16
    ce68:	1463883a 	add	r17,r2,r17
    ce6c:	84404436 	bltu	r16,r17,cf80 <__udivdi3+0x584>
    ce70:	84403e26 	beq	r16,r17,cf6c <__udivdi3+0x570>
    ce74:	9005883a 	mov	r2,r18
    ce78:	0007883a 	mov	r3,zero
    ce7c:	003f9106 	br	ccc4 <__alt_data_end+0xfc00ccc4>
    ce80:	88e2983a 	sll	r17,r17,r3
    ce84:	80aed83a 	srl	r23,r16,r2
    ce88:	80e0983a 	sll	r16,r16,r3
    ce8c:	882ad43a 	srli	r21,r17,16
    ce90:	9884d83a 	srl	r2,r19,r2
    ce94:	b809883a 	mov	r4,r23
    ce98:	a80b883a 	mov	r5,r21
    ce9c:	98e4983a 	sll	r18,r19,r3
    cea0:	142cb03a 	or	r22,r2,r16
    cea4:	000307c0 	call	307c <__umodsi3>
    cea8:	b809883a 	mov	r4,r23
    ceac:	a80b883a 	mov	r5,r21
    ceb0:	1027883a 	mov	r19,r2
    ceb4:	8d3fffcc 	andi	r20,r17,65535
    ceb8:	00030180 	call	3018 <__udivsi3>
    cebc:	a009883a 	mov	r4,r20
    cec0:	100b883a 	mov	r5,r2
    cec4:	102f883a 	mov	r23,r2
    cec8:	00030d40 	call	30d4 <__mulsi3>
    cecc:	9826943a 	slli	r19,r19,16
    ced0:	b008d43a 	srli	r4,r22,16
    ced4:	24c8b03a 	or	r4,r4,r19
    ced8:	2080062e 	bgeu	r4,r2,cef4 <__udivdi3+0x4f8>
    cedc:	2449883a 	add	r4,r4,r17
    cee0:	b8ffffc4 	addi	r3,r23,-1
    cee4:	24403c36 	bltu	r4,r17,cfd8 <__udivdi3+0x5dc>
    cee8:	20803b2e 	bgeu	r4,r2,cfd8 <__udivdi3+0x5dc>
    ceec:	bdffff84 	addi	r23,r23,-2
    cef0:	2449883a 	add	r4,r4,r17
    cef4:	20a1c83a 	sub	r16,r4,r2
    cef8:	a80b883a 	mov	r5,r21
    cefc:	8009883a 	mov	r4,r16
    cf00:	000307c0 	call	307c <__umodsi3>
    cf04:	a80b883a 	mov	r5,r21
    cf08:	8009883a 	mov	r4,r16
    cf0c:	1027883a 	mov	r19,r2
    cf10:	00030180 	call	3018 <__udivsi3>
    cf14:	a009883a 	mov	r4,r20
    cf18:	100b883a 	mov	r5,r2
    cf1c:	9826943a 	slli	r19,r19,16
    cf20:	1039883a 	mov	fp,r2
    cf24:	00030d40 	call	30d4 <__mulsi3>
    cf28:	b13fffcc 	andi	r4,r22,65535
    cf2c:	24c8b03a 	or	r4,r4,r19
    cf30:	2080062e 	bgeu	r4,r2,cf4c <__udivdi3+0x550>
    cf34:	2449883a 	add	r4,r4,r17
    cf38:	e0ffffc4 	addi	r3,fp,-1
    cf3c:	24402436 	bltu	r4,r17,cfd0 <__udivdi3+0x5d4>
    cf40:	2080232e 	bgeu	r4,r2,cfd0 <__udivdi3+0x5d4>
    cf44:	e73fff84 	addi	fp,fp,-2
    cf48:	2449883a 	add	r4,r4,r17
    cf4c:	b82e943a 	slli	r23,r23,16
    cf50:	20a1c83a 	sub	r16,r4,r2
    cf54:	bf06b03a 	or	r3,r23,fp
    cf58:	003f2806 	br	cbfc <__alt_data_end+0xfc00cbfc>
    cf5c:	2021883a 	mov	r16,r4
    cf60:	003f5306 	br	ccb0 <__alt_data_end+0xfc00ccb0>
    cf64:	1821883a 	mov	r16,r3
    cf68:	003ef406 	br	cb3c <__alt_data_end+0xfc00cb3c>
    cf6c:	1806943a 	slli	r3,r3,16
    cf70:	9de6983a 	sll	r19,r19,r23
    cf74:	e73fffcc 	andi	fp,fp,65535
    cf78:	1f07883a 	add	r3,r3,fp
    cf7c:	98ffbd2e 	bgeu	r19,r3,ce74 <__alt_data_end+0xfc00ce74>
    cf80:	90bfffc4 	addi	r2,r18,-1
    cf84:	0007883a 	mov	r3,zero
    cf88:	003f4e06 	br	ccc4 <__alt_data_end+0xfc00ccc4>
    cf8c:	00800604 	movi	r2,24
    cf90:	003ef506 	br	cb68 <__alt_data_end+0xfc00cb68>
    cf94:	00800604 	movi	r2,24
    cf98:	003f0b06 	br	cbc8 <__alt_data_end+0xfc00cbc8>
    cf9c:	00800604 	movi	r2,24
    cfa0:	003ead06 	br	ca58 <__alt_data_end+0xfc00ca58>
    cfa4:	0007883a 	mov	r3,zero
    cfa8:	00800044 	movi	r2,1
    cfac:	003f4506 	br	ccc4 <__alt_data_end+0xfc00ccc4>
    cfb0:	80bf8e2e 	bgeu	r16,r2,cdec <__alt_data_end+0xfc00cdec>
    cfb4:	8c7fff84 	addi	r17,r17,-2
    cfb8:	8721883a 	add	r16,r16,fp
    cfbc:	003f8c06 	br	cdf0 <__alt_data_end+0xfc00cdf0>
    cfc0:	18bf762e 	bgeu	r3,r2,cd9c <__alt_data_end+0xfc00cd9c>
    cfc4:	ad7fff84 	addi	r21,r21,-2
    cfc8:	1f07883a 	add	r3,r3,fp
    cfcc:	003f7406 	br	cda0 <__alt_data_end+0xfc00cda0>
    cfd0:	1839883a 	mov	fp,r3
    cfd4:	003fdd06 	br	cf4c <__alt_data_end+0xfc00cf4c>
    cfd8:	182f883a 	mov	r23,r3
    cfdc:	003fc506 	br	cef4 <__alt_data_end+0xfc00cef4>
    cfe0:	b5bfff84 	addi	r22,r22,-2
    cfe4:	3c4f883a 	add	r7,r7,r17
    cfe8:	003f1a06 	br	cc54 <__alt_data_end+0xfc00cc54>
    cfec:	b5bfff84 	addi	r22,r22,-2
    cff0:	1c47883a 	add	r3,r3,r17
    cff4:	003ebc06 	br	cae8 <__alt_data_end+0xfc00cae8>

0000cff8 <__umoddi3>:
    cff8:	defff304 	addi	sp,sp,-52
    cffc:	df000b15 	stw	fp,44(sp)
    d000:	dc400415 	stw	r17,16(sp)
    d004:	dc000315 	stw	r16,12(sp)
    d008:	dfc00c15 	stw	ra,48(sp)
    d00c:	ddc00a15 	stw	r23,40(sp)
    d010:	dd800915 	stw	r22,36(sp)
    d014:	dd400815 	stw	r21,32(sp)
    d018:	dd000715 	stw	r20,28(sp)
    d01c:	dcc00615 	stw	r19,24(sp)
    d020:	dc800515 	stw	r18,20(sp)
    d024:	2021883a 	mov	r16,r4
    d028:	2823883a 	mov	r17,r5
    d02c:	2839883a 	mov	fp,r5
    d030:	3800401e 	bne	r7,zero,d134 <__umoddi3+0x13c>
    d034:	3027883a 	mov	r19,r6
    d038:	2029883a 	mov	r20,r4
    d03c:	2980552e 	bgeu	r5,r6,d194 <__umoddi3+0x19c>
    d040:	00bfffd4 	movui	r2,65535
    d044:	1180a236 	bltu	r2,r6,d2d0 <__umoddi3+0x2d8>
    d048:	01003fc4 	movi	r4,255
    d04c:	2189803a 	cmpltu	r4,r4,r6
    d050:	200890fa 	slli	r4,r4,3
    d054:	3104d83a 	srl	r2,r6,r4
    d058:	00c00074 	movhi	r3,1
    d05c:	18d3a604 	addi	r3,r3,20120
    d060:	1885883a 	add	r2,r3,r2
    d064:	10c00003 	ldbu	r3,0(r2)
    d068:	00800804 	movi	r2,32
    d06c:	1909883a 	add	r4,r3,r4
    d070:	1125c83a 	sub	r18,r2,r4
    d074:	90000526 	beq	r18,zero,d08c <__umoddi3+0x94>
    d078:	8ca2983a 	sll	r17,r17,r18
    d07c:	8108d83a 	srl	r4,r16,r4
    d080:	34a6983a 	sll	r19,r6,r18
    d084:	84a8983a 	sll	r20,r16,r18
    d088:	2478b03a 	or	fp,r4,r17
    d08c:	982cd43a 	srli	r22,r19,16
    d090:	e009883a 	mov	r4,fp
    d094:	9dffffcc 	andi	r23,r19,65535
    d098:	b00b883a 	mov	r5,r22
    d09c:	000307c0 	call	307c <__umodsi3>
    d0a0:	b00b883a 	mov	r5,r22
    d0a4:	e009883a 	mov	r4,fp
    d0a8:	102b883a 	mov	r21,r2
    d0ac:	00030180 	call	3018 <__udivsi3>
    d0b0:	100b883a 	mov	r5,r2
    d0b4:	b809883a 	mov	r4,r23
    d0b8:	00030d40 	call	30d4 <__mulsi3>
    d0bc:	a82a943a 	slli	r21,r21,16
    d0c0:	a006d43a 	srli	r3,r20,16
    d0c4:	1d46b03a 	or	r3,r3,r21
    d0c8:	1880032e 	bgeu	r3,r2,d0d8 <__umoddi3+0xe0>
    d0cc:	1cc7883a 	add	r3,r3,r19
    d0d0:	1cc00136 	bltu	r3,r19,d0d8 <__umoddi3+0xe0>
    d0d4:	18813136 	bltu	r3,r2,d59c <__umoddi3+0x5a4>
    d0d8:	18a1c83a 	sub	r16,r3,r2
    d0dc:	b00b883a 	mov	r5,r22
    d0e0:	8009883a 	mov	r4,r16
    d0e4:	000307c0 	call	307c <__umodsi3>
    d0e8:	b00b883a 	mov	r5,r22
    d0ec:	8009883a 	mov	r4,r16
    d0f0:	1023883a 	mov	r17,r2
    d0f4:	00030180 	call	3018 <__udivsi3>
    d0f8:	100b883a 	mov	r5,r2
    d0fc:	b809883a 	mov	r4,r23
    d100:	8822943a 	slli	r17,r17,16
    d104:	00030d40 	call	30d4 <__mulsi3>
    d108:	a0ffffcc 	andi	r3,r20,65535
    d10c:	1c46b03a 	or	r3,r3,r17
    d110:	1880042e 	bgeu	r3,r2,d124 <__umoddi3+0x12c>
    d114:	1cc7883a 	add	r3,r3,r19
    d118:	1cc00236 	bltu	r3,r19,d124 <__umoddi3+0x12c>
    d11c:	1880012e 	bgeu	r3,r2,d124 <__umoddi3+0x12c>
    d120:	1cc7883a 	add	r3,r3,r19
    d124:	1885c83a 	sub	r2,r3,r2
    d128:	1484d83a 	srl	r2,r2,r18
    d12c:	0007883a 	mov	r3,zero
    d130:	00005306 	br	d280 <__umoddi3+0x288>
    d134:	29c05036 	bltu	r5,r7,d278 <__umoddi3+0x280>
    d138:	00bfffd4 	movui	r2,65535
    d13c:	11c05c2e 	bgeu	r2,r7,d2b0 <__umoddi3+0x2b8>
    d140:	00804034 	movhi	r2,256
    d144:	10bfffc4 	addi	r2,r2,-1
    d148:	11c10636 	bltu	r2,r7,d564 <__umoddi3+0x56c>
    d14c:	01000404 	movi	r4,16
    d150:	3904d83a 	srl	r2,r7,r4
    d154:	00c00074 	movhi	r3,1
    d158:	18d3a604 	addi	r3,r3,20120
    d15c:	1885883a 	add	r2,r3,r2
    d160:	14c00003 	ldbu	r19,0(r2)
    d164:	00c00804 	movi	r3,32
    d168:	9927883a 	add	r19,r19,r4
    d16c:	1ce9c83a 	sub	r20,r3,r19
    d170:	a0005c1e 	bne	r20,zero,d2e4 <__umoddi3+0x2ec>
    d174:	3c400136 	bltu	r7,r17,d17c <__umoddi3+0x184>
    d178:	81810a36 	bltu	r16,r6,d5a4 <__umoddi3+0x5ac>
    d17c:	8185c83a 	sub	r2,r16,r6
    d180:	89e3c83a 	sub	r17,r17,r7
    d184:	8089803a 	cmpltu	r4,r16,r2
    d188:	8939c83a 	sub	fp,r17,r4
    d18c:	e007883a 	mov	r3,fp
    d190:	00003b06 	br	d280 <__umoddi3+0x288>
    d194:	3000041e 	bne	r6,zero,d1a8 <__umoddi3+0x1b0>
    d198:	000b883a 	mov	r5,zero
    d19c:	01000044 	movi	r4,1
    d1a0:	00030180 	call	3018 <__udivsi3>
    d1a4:	1027883a 	mov	r19,r2
    d1a8:	00bfffd4 	movui	r2,65535
    d1ac:	14c0442e 	bgeu	r2,r19,d2c0 <__umoddi3+0x2c8>
    d1b0:	00804034 	movhi	r2,256
    d1b4:	10bfffc4 	addi	r2,r2,-1
    d1b8:	14c0ec36 	bltu	r2,r19,d56c <__umoddi3+0x574>
    d1bc:	00800404 	movi	r2,16
    d1c0:	9886d83a 	srl	r3,r19,r2
    d1c4:	01000074 	movhi	r4,1
    d1c8:	2113a604 	addi	r4,r4,20120
    d1cc:	20c7883a 	add	r3,r4,r3
    d1d0:	18c00003 	ldbu	r3,0(r3)
    d1d4:	1887883a 	add	r3,r3,r2
    d1d8:	00800804 	movi	r2,32
    d1dc:	10e5c83a 	sub	r18,r2,r3
    d1e0:	9000ab1e 	bne	r18,zero,d490 <__umoddi3+0x498>
    d1e4:	982cd43a 	srli	r22,r19,16
    d1e8:	8ce3c83a 	sub	r17,r17,r19
    d1ec:	9dffffcc 	andi	r23,r19,65535
    d1f0:	b00b883a 	mov	r5,r22
    d1f4:	8809883a 	mov	r4,r17
    d1f8:	000307c0 	call	307c <__umodsi3>
    d1fc:	b00b883a 	mov	r5,r22
    d200:	8809883a 	mov	r4,r17
    d204:	102b883a 	mov	r21,r2
    d208:	00030180 	call	3018 <__udivsi3>
    d20c:	b80b883a 	mov	r5,r23
    d210:	1009883a 	mov	r4,r2
    d214:	00030d40 	call	30d4 <__mulsi3>
    d218:	a82a943a 	slli	r21,r21,16
    d21c:	a006d43a 	srli	r3,r20,16
    d220:	1d46b03a 	or	r3,r3,r21
    d224:	1880042e 	bgeu	r3,r2,d238 <__umoddi3+0x240>
    d228:	1cc7883a 	add	r3,r3,r19
    d22c:	1cc00236 	bltu	r3,r19,d238 <__umoddi3+0x240>
    d230:	1880012e 	bgeu	r3,r2,d238 <__umoddi3+0x240>
    d234:	1cc7883a 	add	r3,r3,r19
    d238:	18a1c83a 	sub	r16,r3,r2
    d23c:	b00b883a 	mov	r5,r22
    d240:	8009883a 	mov	r4,r16
    d244:	000307c0 	call	307c <__umodsi3>
    d248:	1023883a 	mov	r17,r2
    d24c:	b00b883a 	mov	r5,r22
    d250:	8009883a 	mov	r4,r16
    d254:	00030180 	call	3018 <__udivsi3>
    d258:	8822943a 	slli	r17,r17,16
    d25c:	b80b883a 	mov	r5,r23
    d260:	1009883a 	mov	r4,r2
    d264:	00030d40 	call	30d4 <__mulsi3>
    d268:	a53fffcc 	andi	r20,r20,65535
    d26c:	a446b03a 	or	r3,r20,r17
    d270:	18bfac2e 	bgeu	r3,r2,d124 <__alt_data_end+0xfc00d124>
    d274:	003fa706 	br	d114 <__alt_data_end+0xfc00d114>
    d278:	2005883a 	mov	r2,r4
    d27c:	2807883a 	mov	r3,r5
    d280:	dfc00c17 	ldw	ra,48(sp)
    d284:	df000b17 	ldw	fp,44(sp)
    d288:	ddc00a17 	ldw	r23,40(sp)
    d28c:	dd800917 	ldw	r22,36(sp)
    d290:	dd400817 	ldw	r21,32(sp)
    d294:	dd000717 	ldw	r20,28(sp)
    d298:	dcc00617 	ldw	r19,24(sp)
    d29c:	dc800517 	ldw	r18,20(sp)
    d2a0:	dc400417 	ldw	r17,16(sp)
    d2a4:	dc000317 	ldw	r16,12(sp)
    d2a8:	dec00d04 	addi	sp,sp,52
    d2ac:	f800283a 	ret
    d2b0:	04c03fc4 	movi	r19,255
    d2b4:	99c9803a 	cmpltu	r4,r19,r7
    d2b8:	200890fa 	slli	r4,r4,3
    d2bc:	003fa406 	br	d150 <__alt_data_end+0xfc00d150>
    d2c0:	00803fc4 	movi	r2,255
    d2c4:	14c5803a 	cmpltu	r2,r2,r19
    d2c8:	100490fa 	slli	r2,r2,3
    d2cc:	003fbc06 	br	d1c0 <__alt_data_end+0xfc00d1c0>
    d2d0:	00804034 	movhi	r2,256
    d2d4:	10bfffc4 	addi	r2,r2,-1
    d2d8:	1180a636 	bltu	r2,r6,d574 <__umoddi3+0x57c>
    d2dc:	01000404 	movi	r4,16
    d2e0:	003f5c06 	br	d054 <__alt_data_end+0xfc00d054>
    d2e4:	3d0e983a 	sll	r7,r7,r20
    d2e8:	34ead83a 	srl	r21,r6,r19
    d2ec:	8cc6d83a 	srl	r3,r17,r19
    d2f0:	8d10983a 	sll	r8,r17,r20
    d2f4:	3d6ab03a 	or	r21,r7,r21
    d2f8:	a82cd43a 	srli	r22,r21,16
    d2fc:	84e2d83a 	srl	r17,r16,r19
    d300:	1809883a 	mov	r4,r3
    d304:	b00b883a 	mov	r5,r22
    d308:	8a22b03a 	or	r17,r17,r8
    d30c:	3524983a 	sll	r18,r6,r20
    d310:	dc400015 	stw	r17,0(sp)
    d314:	d8c00115 	stw	r3,4(sp)
    d318:	000307c0 	call	307c <__umodsi3>
    d31c:	d8c00117 	ldw	r3,4(sp)
    d320:	b00b883a 	mov	r5,r22
    d324:	1039883a 	mov	fp,r2
    d328:	1809883a 	mov	r4,r3
    d32c:	00030180 	call	3018 <__udivsi3>
    d330:	adffffcc 	andi	r23,r21,65535
    d334:	100b883a 	mov	r5,r2
    d338:	b809883a 	mov	r4,r23
    d33c:	1023883a 	mov	r17,r2
    d340:	00030d40 	call	30d4 <__mulsi3>
    d344:	d9400017 	ldw	r5,0(sp)
    d348:	e008943a 	slli	r4,fp,16
    d34c:	8520983a 	sll	r16,r16,r20
    d350:	2806d43a 	srli	r3,r5,16
    d354:	1906b03a 	or	r3,r3,r4
    d358:	1880042e 	bgeu	r3,r2,d36c <__umoddi3+0x374>
    d35c:	1d47883a 	add	r3,r3,r21
    d360:	893fffc4 	addi	r4,r17,-1
    d364:	1d40892e 	bgeu	r3,r21,d58c <__umoddi3+0x594>
    d368:	2023883a 	mov	r17,r4
    d36c:	18b9c83a 	sub	fp,r3,r2
    d370:	b00b883a 	mov	r5,r22
    d374:	e009883a 	mov	r4,fp
    d378:	000307c0 	call	307c <__umodsi3>
    d37c:	b00b883a 	mov	r5,r22
    d380:	e009883a 	mov	r4,fp
    d384:	d8800215 	stw	r2,8(sp)
    d388:	00030180 	call	3018 <__udivsi3>
    d38c:	100b883a 	mov	r5,r2
    d390:	b809883a 	mov	r4,r23
    d394:	102d883a 	mov	r22,r2
    d398:	00030d40 	call	30d4 <__mulsi3>
    d39c:	d9800217 	ldw	r6,8(sp)
    d3a0:	d8c00017 	ldw	r3,0(sp)
    d3a4:	300c943a 	slli	r6,r6,16
    d3a8:	1a3fffcc 	andi	r8,r3,65535
    d3ac:	4190b03a 	or	r8,r8,r6
    d3b0:	4080042e 	bgeu	r8,r2,d3c4 <__umoddi3+0x3cc>
    d3b4:	4551883a 	add	r8,r8,r21
    d3b8:	b0ffffc4 	addi	r3,r22,-1
    d3bc:	45406f2e 	bgeu	r8,r21,d57c <__umoddi3+0x584>
    d3c0:	182d883a 	mov	r22,r3
    d3c4:	880e943a 	slli	r7,r17,16
    d3c8:	9006d43a 	srli	r3,r18,16
    d3cc:	91bfffcc 	andi	r6,r18,65535
    d3d0:	3dacb03a 	or	r22,r7,r22
    d3d4:	b02ed43a 	srli	r23,r22,16
    d3d8:	b5bfffcc 	andi	r22,r22,65535
    d3dc:	300b883a 	mov	r5,r6
    d3e0:	b009883a 	mov	r4,r22
    d3e4:	40a3c83a 	sub	r17,r8,r2
    d3e8:	d8c00115 	stw	r3,4(sp)
    d3ec:	d9800215 	stw	r6,8(sp)
    d3f0:	00030d40 	call	30d4 <__mulsi3>
    d3f4:	d9800217 	ldw	r6,8(sp)
    d3f8:	b809883a 	mov	r4,r23
    d3fc:	1039883a 	mov	fp,r2
    d400:	300b883a 	mov	r5,r6
    d404:	00030d40 	call	30d4 <__mulsi3>
    d408:	d8c00117 	ldw	r3,4(sp)
    d40c:	b809883a 	mov	r4,r23
    d410:	d8800215 	stw	r2,8(sp)
    d414:	180b883a 	mov	r5,r3
    d418:	00030d40 	call	30d4 <__mulsi3>
    d41c:	d8c00117 	ldw	r3,4(sp)
    d420:	b009883a 	mov	r4,r22
    d424:	102f883a 	mov	r23,r2
    d428:	180b883a 	mov	r5,r3
    d42c:	00030d40 	call	30d4 <__mulsi3>
    d430:	d9800217 	ldw	r6,8(sp)
    d434:	e006d43a 	srli	r3,fp,16
    d438:	1185883a 	add	r2,r2,r6
    d43c:	1885883a 	add	r2,r3,r2
    d440:	1180022e 	bgeu	r2,r6,d44c <__umoddi3+0x454>
    d444:	00c00074 	movhi	r3,1
    d448:	b8ef883a 	add	r23,r23,r3
    d44c:	1006d43a 	srli	r3,r2,16
    d450:	1004943a 	slli	r2,r2,16
    d454:	e73fffcc 	andi	fp,fp,65535
    d458:	1dc7883a 	add	r3,r3,r23
    d45c:	1739883a 	add	fp,r2,fp
    d460:	88c03a36 	bltu	r17,r3,d54c <__umoddi3+0x554>
    d464:	88c05126 	beq	r17,r3,d5ac <__umoddi3+0x5b4>
    d468:	88c9c83a 	sub	r4,r17,r3
    d46c:	e00f883a 	mov	r7,fp
    d470:	81cfc83a 	sub	r7,r16,r7
    d474:	81c7803a 	cmpltu	r3,r16,r7
    d478:	20c7c83a 	sub	r3,r4,r3
    d47c:	1cc4983a 	sll	r2,r3,r19
    d480:	3d0ed83a 	srl	r7,r7,r20
    d484:	1d06d83a 	srl	r3,r3,r20
    d488:	11c4b03a 	or	r2,r2,r7
    d48c:	003f7c06 	br	d280 <__alt_data_end+0xfc00d280>
    d490:	9ca6983a 	sll	r19,r19,r18
    d494:	88f8d83a 	srl	fp,r17,r3
    d498:	80c4d83a 	srl	r2,r16,r3
    d49c:	982cd43a 	srli	r22,r19,16
    d4a0:	8ca2983a 	sll	r17,r17,r18
    d4a4:	e009883a 	mov	r4,fp
    d4a8:	b00b883a 	mov	r5,r22
    d4ac:	146ab03a 	or	r21,r2,r17
    d4b0:	000307c0 	call	307c <__umodsi3>
    d4b4:	b00b883a 	mov	r5,r22
    d4b8:	e009883a 	mov	r4,fp
    d4bc:	1029883a 	mov	r20,r2
    d4c0:	9dffffcc 	andi	r23,r19,65535
    d4c4:	00030180 	call	3018 <__udivsi3>
    d4c8:	b809883a 	mov	r4,r23
    d4cc:	100b883a 	mov	r5,r2
    d4d0:	00030d40 	call	30d4 <__mulsi3>
    d4d4:	a008943a 	slli	r4,r20,16
    d4d8:	a806d43a 	srli	r3,r21,16
    d4dc:	84a8983a 	sll	r20,r16,r18
    d4e0:	1906b03a 	or	r3,r3,r4
    d4e4:	1880042e 	bgeu	r3,r2,d4f8 <__umoddi3+0x500>
    d4e8:	1cc7883a 	add	r3,r3,r19
    d4ec:	1cc00236 	bltu	r3,r19,d4f8 <__umoddi3+0x500>
    d4f0:	1880012e 	bgeu	r3,r2,d4f8 <__umoddi3+0x500>
    d4f4:	1cc7883a 	add	r3,r3,r19
    d4f8:	18a3c83a 	sub	r17,r3,r2
    d4fc:	b00b883a 	mov	r5,r22
    d500:	8809883a 	mov	r4,r17
    d504:	000307c0 	call	307c <__umodsi3>
    d508:	b00b883a 	mov	r5,r22
    d50c:	8809883a 	mov	r4,r17
    d510:	1021883a 	mov	r16,r2
    d514:	00030180 	call	3018 <__udivsi3>
    d518:	100b883a 	mov	r5,r2
    d51c:	b809883a 	mov	r4,r23
    d520:	8020943a 	slli	r16,r16,16
    d524:	00030d40 	call	30d4 <__mulsi3>
    d528:	a8ffffcc 	andi	r3,r21,65535
    d52c:	1c06b03a 	or	r3,r3,r16
    d530:	1880042e 	bgeu	r3,r2,d544 <__umoddi3+0x54c>
    d534:	1cc7883a 	add	r3,r3,r19
    d538:	1cc00236 	bltu	r3,r19,d544 <__umoddi3+0x54c>
    d53c:	1880012e 	bgeu	r3,r2,d544 <__umoddi3+0x54c>
    d540:	1cc7883a 	add	r3,r3,r19
    d544:	18a3c83a 	sub	r17,r3,r2
    d548:	003f2906 	br	d1f0 <__alt_data_end+0xfc00d1f0>
    d54c:	e48fc83a 	sub	r7,fp,r18
    d550:	1d49c83a 	sub	r4,r3,r21
    d554:	e1f9803a 	cmpltu	fp,fp,r7
    d558:	2739c83a 	sub	fp,r4,fp
    d55c:	8f09c83a 	sub	r4,r17,fp
    d560:	003fc306 	br	d470 <__alt_data_end+0xfc00d470>
    d564:	01000604 	movi	r4,24
    d568:	003ef906 	br	d150 <__alt_data_end+0xfc00d150>
    d56c:	00800604 	movi	r2,24
    d570:	003f1306 	br	d1c0 <__alt_data_end+0xfc00d1c0>
    d574:	01000604 	movi	r4,24
    d578:	003eb606 	br	d054 <__alt_data_end+0xfc00d054>
    d57c:	40bf902e 	bgeu	r8,r2,d3c0 <__alt_data_end+0xfc00d3c0>
    d580:	b5bfff84 	addi	r22,r22,-2
    d584:	4551883a 	add	r8,r8,r21
    d588:	003f8e06 	br	d3c4 <__alt_data_end+0xfc00d3c4>
    d58c:	18bf762e 	bgeu	r3,r2,d368 <__alt_data_end+0xfc00d368>
    d590:	8c7fff84 	addi	r17,r17,-2
    d594:	1d47883a 	add	r3,r3,r21
    d598:	003f7406 	br	d36c <__alt_data_end+0xfc00d36c>
    d59c:	1cc7883a 	add	r3,r3,r19
    d5a0:	003ecd06 	br	d0d8 <__alt_data_end+0xfc00d0d8>
    d5a4:	8005883a 	mov	r2,r16
    d5a8:	003ef806 	br	d18c <__alt_data_end+0xfc00d18c>
    d5ac:	873fe736 	bltu	r16,fp,d54c <__alt_data_end+0xfc00d54c>
    d5b0:	e00f883a 	mov	r7,fp
    d5b4:	0009883a 	mov	r4,zero
    d5b8:	003fad06 	br	d470 <__alt_data_end+0xfc00d470>

0000d5bc <__adddf3>:
    d5bc:	02c00434 	movhi	r11,16
    d5c0:	5affffc4 	addi	r11,r11,-1
    d5c4:	2806d7fa 	srli	r3,r5,31
    d5c8:	2ad4703a 	and	r10,r5,r11
    d5cc:	3ad2703a 	and	r9,r7,r11
    d5d0:	3804d53a 	srli	r2,r7,20
    d5d4:	3018d77a 	srli	r12,r6,29
    d5d8:	280ad53a 	srli	r5,r5,20
    d5dc:	501490fa 	slli	r10,r10,3
    d5e0:	2010d77a 	srli	r8,r4,29
    d5e4:	481290fa 	slli	r9,r9,3
    d5e8:	380ed7fa 	srli	r7,r7,31
    d5ec:	defffb04 	addi	sp,sp,-20
    d5f0:	dc800215 	stw	r18,8(sp)
    d5f4:	dc400115 	stw	r17,4(sp)
    d5f8:	dc000015 	stw	r16,0(sp)
    d5fc:	dfc00415 	stw	ra,16(sp)
    d600:	dcc00315 	stw	r19,12(sp)
    d604:	1c803fcc 	andi	r18,r3,255
    d608:	2c01ffcc 	andi	r16,r5,2047
    d60c:	5210b03a 	or	r8,r10,r8
    d610:	202290fa 	slli	r17,r4,3
    d614:	1081ffcc 	andi	r2,r2,2047
    d618:	4b12b03a 	or	r9,r9,r12
    d61c:	300c90fa 	slli	r6,r6,3
    d620:	91c07526 	beq	r18,r7,d7f8 <__adddf3+0x23c>
    d624:	8087c83a 	sub	r3,r16,r2
    d628:	00c0ab0e 	bge	zero,r3,d8d8 <__adddf3+0x31c>
    d62c:	10002a1e 	bne	r2,zero,d6d8 <__adddf3+0x11c>
    d630:	4984b03a 	or	r2,r9,r6
    d634:	1000961e 	bne	r2,zero,d890 <__adddf3+0x2d4>
    d638:	888001cc 	andi	r2,r17,7
    d63c:	10000726 	beq	r2,zero,d65c <__adddf3+0xa0>
    d640:	888003cc 	andi	r2,r17,15
    d644:	00c00104 	movi	r3,4
    d648:	10c00426 	beq	r2,r3,d65c <__adddf3+0xa0>
    d64c:	88c7883a 	add	r3,r17,r3
    d650:	1c63803a 	cmpltu	r17,r3,r17
    d654:	4451883a 	add	r8,r8,r17
    d658:	1823883a 	mov	r17,r3
    d65c:	4080202c 	andhi	r2,r8,128
    d660:	10005926 	beq	r2,zero,d7c8 <__adddf3+0x20c>
    d664:	84000044 	addi	r16,r16,1
    d668:	0081ffc4 	movi	r2,2047
    d66c:	8080ba26 	beq	r16,r2,d958 <__adddf3+0x39c>
    d670:	00bfe034 	movhi	r2,65408
    d674:	10bfffc4 	addi	r2,r2,-1
    d678:	4090703a 	and	r8,r8,r2
    d67c:	4004977a 	slli	r2,r8,29
    d680:	4010927a 	slli	r8,r8,9
    d684:	8822d0fa 	srli	r17,r17,3
    d688:	8401ffcc 	andi	r16,r16,2047
    d68c:	4010d33a 	srli	r8,r8,12
    d690:	9007883a 	mov	r3,r18
    d694:	1444b03a 	or	r2,r2,r17
    d698:	8401ffcc 	andi	r16,r16,2047
    d69c:	8020953a 	slli	r16,r16,20
    d6a0:	18c03fcc 	andi	r3,r3,255
    d6a4:	01000434 	movhi	r4,16
    d6a8:	213fffc4 	addi	r4,r4,-1
    d6ac:	180697fa 	slli	r3,r3,31
    d6b0:	4110703a 	and	r8,r8,r4
    d6b4:	4410b03a 	or	r8,r8,r16
    d6b8:	40c6b03a 	or	r3,r8,r3
    d6bc:	dfc00417 	ldw	ra,16(sp)
    d6c0:	dcc00317 	ldw	r19,12(sp)
    d6c4:	dc800217 	ldw	r18,8(sp)
    d6c8:	dc400117 	ldw	r17,4(sp)
    d6cc:	dc000017 	ldw	r16,0(sp)
    d6d0:	dec00504 	addi	sp,sp,20
    d6d4:	f800283a 	ret
    d6d8:	0081ffc4 	movi	r2,2047
    d6dc:	80bfd626 	beq	r16,r2,d638 <__alt_data_end+0xfc00d638>
    d6e0:	4a402034 	orhi	r9,r9,128
    d6e4:	00800e04 	movi	r2,56
    d6e8:	10c09f16 	blt	r2,r3,d968 <__adddf3+0x3ac>
    d6ec:	008007c4 	movi	r2,31
    d6f0:	10c0c216 	blt	r2,r3,d9fc <__adddf3+0x440>
    d6f4:	00800804 	movi	r2,32
    d6f8:	10c5c83a 	sub	r2,r2,r3
    d6fc:	488a983a 	sll	r5,r9,r2
    d700:	30c8d83a 	srl	r4,r6,r3
    d704:	3084983a 	sll	r2,r6,r2
    d708:	48c6d83a 	srl	r3,r9,r3
    d70c:	290cb03a 	or	r6,r5,r4
    d710:	1004c03a 	cmpne	r2,r2,zero
    d714:	308cb03a 	or	r6,r6,r2
    d718:	898dc83a 	sub	r6,r17,r6
    d71c:	89a3803a 	cmpltu	r17,r17,r6
    d720:	40d1c83a 	sub	r8,r8,r3
    d724:	4451c83a 	sub	r8,r8,r17
    d728:	3023883a 	mov	r17,r6
    d72c:	4080202c 	andhi	r2,r8,128
    d730:	10002326 	beq	r2,zero,d7c0 <__adddf3+0x204>
    d734:	04c02034 	movhi	r19,128
    d738:	9cffffc4 	addi	r19,r19,-1
    d73c:	44e6703a 	and	r19,r8,r19
    d740:	98007626 	beq	r19,zero,d91c <__adddf3+0x360>
    d744:	9809883a 	mov	r4,r19
    d748:	000fdfc0 	call	fdfc <__clzsi2>
    d74c:	10fffe04 	addi	r3,r2,-8
    d750:	010007c4 	movi	r4,31
    d754:	20c07716 	blt	r4,r3,d934 <__adddf3+0x378>
    d758:	00800804 	movi	r2,32
    d75c:	10c5c83a 	sub	r2,r2,r3
    d760:	8884d83a 	srl	r2,r17,r2
    d764:	98d0983a 	sll	r8,r19,r3
    d768:	88e2983a 	sll	r17,r17,r3
    d76c:	1204b03a 	or	r2,r2,r8
    d770:	1c007416 	blt	r3,r16,d944 <__adddf3+0x388>
    d774:	1c21c83a 	sub	r16,r3,r16
    d778:	82000044 	addi	r8,r16,1
    d77c:	00c007c4 	movi	r3,31
    d780:	1a009116 	blt	r3,r8,d9c8 <__adddf3+0x40c>
    d784:	00c00804 	movi	r3,32
    d788:	1a07c83a 	sub	r3,r3,r8
    d78c:	8a08d83a 	srl	r4,r17,r8
    d790:	88e2983a 	sll	r17,r17,r3
    d794:	10c6983a 	sll	r3,r2,r3
    d798:	1210d83a 	srl	r8,r2,r8
    d79c:	8804c03a 	cmpne	r2,r17,zero
    d7a0:	1906b03a 	or	r3,r3,r4
    d7a4:	18a2b03a 	or	r17,r3,r2
    d7a8:	0021883a 	mov	r16,zero
    d7ac:	003fa206 	br	d638 <__alt_data_end+0xfc00d638>
    d7b0:	1890b03a 	or	r8,r3,r2
    d7b4:	40017d26 	beq	r8,zero,ddac <__adddf3+0x7f0>
    d7b8:	1011883a 	mov	r8,r2
    d7bc:	1823883a 	mov	r17,r3
    d7c0:	888001cc 	andi	r2,r17,7
    d7c4:	103f9e1e 	bne	r2,zero,d640 <__alt_data_end+0xfc00d640>
    d7c8:	4004977a 	slli	r2,r8,29
    d7cc:	8822d0fa 	srli	r17,r17,3
    d7d0:	4010d0fa 	srli	r8,r8,3
    d7d4:	9007883a 	mov	r3,r18
    d7d8:	1444b03a 	or	r2,r2,r17
    d7dc:	0101ffc4 	movi	r4,2047
    d7e0:	81002426 	beq	r16,r4,d874 <__adddf3+0x2b8>
    d7e4:	8120703a 	and	r16,r16,r4
    d7e8:	01000434 	movhi	r4,16
    d7ec:	213fffc4 	addi	r4,r4,-1
    d7f0:	4110703a 	and	r8,r8,r4
    d7f4:	003fa806 	br	d698 <__alt_data_end+0xfc00d698>
    d7f8:	8089c83a 	sub	r4,r16,r2
    d7fc:	01005e0e 	bge	zero,r4,d978 <__adddf3+0x3bc>
    d800:	10002b26 	beq	r2,zero,d8b0 <__adddf3+0x2f4>
    d804:	0081ffc4 	movi	r2,2047
    d808:	80bf8b26 	beq	r16,r2,d638 <__alt_data_end+0xfc00d638>
    d80c:	4a402034 	orhi	r9,r9,128
    d810:	00800e04 	movi	r2,56
    d814:	1100a40e 	bge	r2,r4,daa8 <__adddf3+0x4ec>
    d818:	498cb03a 	or	r6,r9,r6
    d81c:	300ac03a 	cmpne	r5,r6,zero
    d820:	0013883a 	mov	r9,zero
    d824:	2c4b883a 	add	r5,r5,r17
    d828:	2c63803a 	cmpltu	r17,r5,r17
    d82c:	4a11883a 	add	r8,r9,r8
    d830:	8a11883a 	add	r8,r17,r8
    d834:	2823883a 	mov	r17,r5
    d838:	4080202c 	andhi	r2,r8,128
    d83c:	103fe026 	beq	r2,zero,d7c0 <__alt_data_end+0xfc00d7c0>
    d840:	84000044 	addi	r16,r16,1
    d844:	0081ffc4 	movi	r2,2047
    d848:	8080d226 	beq	r16,r2,db94 <__adddf3+0x5d8>
    d84c:	00bfe034 	movhi	r2,65408
    d850:	10bfffc4 	addi	r2,r2,-1
    d854:	4090703a 	and	r8,r8,r2
    d858:	880ad07a 	srli	r5,r17,1
    d85c:	400897fa 	slli	r4,r8,31
    d860:	88c0004c 	andi	r3,r17,1
    d864:	28e2b03a 	or	r17,r5,r3
    d868:	4010d07a 	srli	r8,r8,1
    d86c:	2462b03a 	or	r17,r4,r17
    d870:	003f7106 	br	d638 <__alt_data_end+0xfc00d638>
    d874:	4088b03a 	or	r4,r8,r2
    d878:	20014526 	beq	r4,zero,dd90 <__adddf3+0x7d4>
    d87c:	01000434 	movhi	r4,16
    d880:	42000234 	orhi	r8,r8,8
    d884:	213fffc4 	addi	r4,r4,-1
    d888:	4110703a 	and	r8,r8,r4
    d88c:	003f8206 	br	d698 <__alt_data_end+0xfc00d698>
    d890:	18ffffc4 	addi	r3,r3,-1
    d894:	1800491e 	bne	r3,zero,d9bc <__adddf3+0x400>
    d898:	898bc83a 	sub	r5,r17,r6
    d89c:	8963803a 	cmpltu	r17,r17,r5
    d8a0:	4251c83a 	sub	r8,r8,r9
    d8a4:	4451c83a 	sub	r8,r8,r17
    d8a8:	2823883a 	mov	r17,r5
    d8ac:	003f9f06 	br	d72c <__alt_data_end+0xfc00d72c>
    d8b0:	4984b03a 	or	r2,r9,r6
    d8b4:	103f6026 	beq	r2,zero,d638 <__alt_data_end+0xfc00d638>
    d8b8:	213fffc4 	addi	r4,r4,-1
    d8bc:	2000931e 	bne	r4,zero,db0c <__adddf3+0x550>
    d8c0:	898d883a 	add	r6,r17,r6
    d8c4:	3463803a 	cmpltu	r17,r6,r17
    d8c8:	4251883a 	add	r8,r8,r9
    d8cc:	8a11883a 	add	r8,r17,r8
    d8d0:	3023883a 	mov	r17,r6
    d8d4:	003fd806 	br	d838 <__alt_data_end+0xfc00d838>
    d8d8:	1800541e 	bne	r3,zero,da2c <__adddf3+0x470>
    d8dc:	80800044 	addi	r2,r16,1
    d8e0:	1081ffcc 	andi	r2,r2,2047
    d8e4:	00c00044 	movi	r3,1
    d8e8:	1880a00e 	bge	r3,r2,db6c <__adddf3+0x5b0>
    d8ec:	8989c83a 	sub	r4,r17,r6
    d8f0:	8905803a 	cmpltu	r2,r17,r4
    d8f4:	4267c83a 	sub	r19,r8,r9
    d8f8:	98a7c83a 	sub	r19,r19,r2
    d8fc:	9880202c 	andhi	r2,r19,128
    d900:	10006326 	beq	r2,zero,da90 <__adddf3+0x4d4>
    d904:	3463c83a 	sub	r17,r6,r17
    d908:	4a07c83a 	sub	r3,r9,r8
    d90c:	344d803a 	cmpltu	r6,r6,r17
    d910:	19a7c83a 	sub	r19,r3,r6
    d914:	3825883a 	mov	r18,r7
    d918:	983f8a1e 	bne	r19,zero,d744 <__alt_data_end+0xfc00d744>
    d91c:	8809883a 	mov	r4,r17
    d920:	000fdfc0 	call	fdfc <__clzsi2>
    d924:	10800804 	addi	r2,r2,32
    d928:	10fffe04 	addi	r3,r2,-8
    d92c:	010007c4 	movi	r4,31
    d930:	20ff890e 	bge	r4,r3,d758 <__alt_data_end+0xfc00d758>
    d934:	10bff604 	addi	r2,r2,-40
    d938:	8884983a 	sll	r2,r17,r2
    d93c:	0023883a 	mov	r17,zero
    d940:	1c3f8c0e 	bge	r3,r16,d774 <__alt_data_end+0xfc00d774>
    d944:	023fe034 	movhi	r8,65408
    d948:	423fffc4 	addi	r8,r8,-1
    d94c:	80e1c83a 	sub	r16,r16,r3
    d950:	1210703a 	and	r8,r2,r8
    d954:	003f3806 	br	d638 <__alt_data_end+0xfc00d638>
    d958:	9007883a 	mov	r3,r18
    d95c:	0011883a 	mov	r8,zero
    d960:	0005883a 	mov	r2,zero
    d964:	003f4c06 	br	d698 <__alt_data_end+0xfc00d698>
    d968:	498cb03a 	or	r6,r9,r6
    d96c:	300cc03a 	cmpne	r6,r6,zero
    d970:	0007883a 	mov	r3,zero
    d974:	003f6806 	br	d718 <__alt_data_end+0xfc00d718>
    d978:	20009c1e 	bne	r4,zero,dbec <__adddf3+0x630>
    d97c:	80800044 	addi	r2,r16,1
    d980:	1141ffcc 	andi	r5,r2,2047
    d984:	01000044 	movi	r4,1
    d988:	2140670e 	bge	r4,r5,db28 <__adddf3+0x56c>
    d98c:	0101ffc4 	movi	r4,2047
    d990:	11007f26 	beq	r2,r4,db90 <__adddf3+0x5d4>
    d994:	898d883a 	add	r6,r17,r6
    d998:	4247883a 	add	r3,r8,r9
    d99c:	3451803a 	cmpltu	r8,r6,r17
    d9a0:	40d1883a 	add	r8,r8,r3
    d9a4:	402297fa 	slli	r17,r8,31
    d9a8:	300cd07a 	srli	r6,r6,1
    d9ac:	4010d07a 	srli	r8,r8,1
    d9b0:	1021883a 	mov	r16,r2
    d9b4:	89a2b03a 	or	r17,r17,r6
    d9b8:	003f1f06 	br	d638 <__alt_data_end+0xfc00d638>
    d9bc:	0081ffc4 	movi	r2,2047
    d9c0:	80bf481e 	bne	r16,r2,d6e4 <__alt_data_end+0xfc00d6e4>
    d9c4:	003f1c06 	br	d638 <__alt_data_end+0xfc00d638>
    d9c8:	843ff844 	addi	r16,r16,-31
    d9cc:	01000804 	movi	r4,32
    d9d0:	1406d83a 	srl	r3,r2,r16
    d9d4:	41005026 	beq	r8,r4,db18 <__adddf3+0x55c>
    d9d8:	01001004 	movi	r4,64
    d9dc:	2211c83a 	sub	r8,r4,r8
    d9e0:	1204983a 	sll	r2,r2,r8
    d9e4:	88a2b03a 	or	r17,r17,r2
    d9e8:	8822c03a 	cmpne	r17,r17,zero
    d9ec:	1c62b03a 	or	r17,r3,r17
    d9f0:	0011883a 	mov	r8,zero
    d9f4:	0021883a 	mov	r16,zero
    d9f8:	003f7106 	br	d7c0 <__alt_data_end+0xfc00d7c0>
    d9fc:	193ff804 	addi	r4,r3,-32
    da00:	00800804 	movi	r2,32
    da04:	4908d83a 	srl	r4,r9,r4
    da08:	18804526 	beq	r3,r2,db20 <__adddf3+0x564>
    da0c:	00801004 	movi	r2,64
    da10:	10c5c83a 	sub	r2,r2,r3
    da14:	4886983a 	sll	r3,r9,r2
    da18:	198cb03a 	or	r6,r3,r6
    da1c:	300cc03a 	cmpne	r6,r6,zero
    da20:	218cb03a 	or	r6,r4,r6
    da24:	0007883a 	mov	r3,zero
    da28:	003f3b06 	br	d718 <__alt_data_end+0xfc00d718>
    da2c:	80002a26 	beq	r16,zero,dad8 <__adddf3+0x51c>
    da30:	0101ffc4 	movi	r4,2047
    da34:	11006826 	beq	r2,r4,dbd8 <__adddf3+0x61c>
    da38:	00c7c83a 	sub	r3,zero,r3
    da3c:	42002034 	orhi	r8,r8,128
    da40:	01000e04 	movi	r4,56
    da44:	20c07c16 	blt	r4,r3,dc38 <__adddf3+0x67c>
    da48:	010007c4 	movi	r4,31
    da4c:	20c0da16 	blt	r4,r3,ddb8 <__adddf3+0x7fc>
    da50:	01000804 	movi	r4,32
    da54:	20c9c83a 	sub	r4,r4,r3
    da58:	4114983a 	sll	r10,r8,r4
    da5c:	88cad83a 	srl	r5,r17,r3
    da60:	8908983a 	sll	r4,r17,r4
    da64:	40c6d83a 	srl	r3,r8,r3
    da68:	5162b03a 	or	r17,r10,r5
    da6c:	2008c03a 	cmpne	r4,r4,zero
    da70:	8922b03a 	or	r17,r17,r4
    da74:	3463c83a 	sub	r17,r6,r17
    da78:	48c7c83a 	sub	r3,r9,r3
    da7c:	344d803a 	cmpltu	r6,r6,r17
    da80:	1991c83a 	sub	r8,r3,r6
    da84:	1021883a 	mov	r16,r2
    da88:	3825883a 	mov	r18,r7
    da8c:	003f2706 	br	d72c <__alt_data_end+0xfc00d72c>
    da90:	24d0b03a 	or	r8,r4,r19
    da94:	40001b1e 	bne	r8,zero,db04 <__adddf3+0x548>
    da98:	0005883a 	mov	r2,zero
    da9c:	0007883a 	mov	r3,zero
    daa0:	0021883a 	mov	r16,zero
    daa4:	003f4d06 	br	d7dc <__alt_data_end+0xfc00d7dc>
    daa8:	008007c4 	movi	r2,31
    daac:	11003c16 	blt	r2,r4,dba0 <__adddf3+0x5e4>
    dab0:	00800804 	movi	r2,32
    dab4:	1105c83a 	sub	r2,r2,r4
    dab8:	488e983a 	sll	r7,r9,r2
    dabc:	310ad83a 	srl	r5,r6,r4
    dac0:	3084983a 	sll	r2,r6,r2
    dac4:	4912d83a 	srl	r9,r9,r4
    dac8:	394ab03a 	or	r5,r7,r5
    dacc:	1004c03a 	cmpne	r2,r2,zero
    dad0:	288ab03a 	or	r5,r5,r2
    dad4:	003f5306 	br	d824 <__alt_data_end+0xfc00d824>
    dad8:	4448b03a 	or	r4,r8,r17
    dadc:	20003e26 	beq	r4,zero,dbd8 <__adddf3+0x61c>
    dae0:	00c6303a 	nor	r3,zero,r3
    dae4:	18003a1e 	bne	r3,zero,dbd0 <__adddf3+0x614>
    dae8:	3463c83a 	sub	r17,r6,r17
    daec:	4a07c83a 	sub	r3,r9,r8
    daf0:	344d803a 	cmpltu	r6,r6,r17
    daf4:	1991c83a 	sub	r8,r3,r6
    daf8:	1021883a 	mov	r16,r2
    dafc:	3825883a 	mov	r18,r7
    db00:	003f0a06 	br	d72c <__alt_data_end+0xfc00d72c>
    db04:	2023883a 	mov	r17,r4
    db08:	003f0d06 	br	d740 <__alt_data_end+0xfc00d740>
    db0c:	0081ffc4 	movi	r2,2047
    db10:	80bf3f1e 	bne	r16,r2,d810 <__alt_data_end+0xfc00d810>
    db14:	003ec806 	br	d638 <__alt_data_end+0xfc00d638>
    db18:	0005883a 	mov	r2,zero
    db1c:	003fb106 	br	d9e4 <__alt_data_end+0xfc00d9e4>
    db20:	0007883a 	mov	r3,zero
    db24:	003fbc06 	br	da18 <__alt_data_end+0xfc00da18>
    db28:	4444b03a 	or	r2,r8,r17
    db2c:	8000871e 	bne	r16,zero,dd4c <__adddf3+0x790>
    db30:	1000ba26 	beq	r2,zero,de1c <__adddf3+0x860>
    db34:	4984b03a 	or	r2,r9,r6
    db38:	103ebf26 	beq	r2,zero,d638 <__alt_data_end+0xfc00d638>
    db3c:	8985883a 	add	r2,r17,r6
    db40:	4247883a 	add	r3,r8,r9
    db44:	1451803a 	cmpltu	r8,r2,r17
    db48:	40d1883a 	add	r8,r8,r3
    db4c:	40c0202c 	andhi	r3,r8,128
    db50:	1023883a 	mov	r17,r2
    db54:	183f1a26 	beq	r3,zero,d7c0 <__alt_data_end+0xfc00d7c0>
    db58:	00bfe034 	movhi	r2,65408
    db5c:	10bfffc4 	addi	r2,r2,-1
    db60:	2021883a 	mov	r16,r4
    db64:	4090703a 	and	r8,r8,r2
    db68:	003eb306 	br	d638 <__alt_data_end+0xfc00d638>
    db6c:	4444b03a 	or	r2,r8,r17
    db70:	8000291e 	bne	r16,zero,dc18 <__adddf3+0x65c>
    db74:	10004b1e 	bne	r2,zero,dca4 <__adddf3+0x6e8>
    db78:	4990b03a 	or	r8,r9,r6
    db7c:	40008b26 	beq	r8,zero,ddac <__adddf3+0x7f0>
    db80:	4811883a 	mov	r8,r9
    db84:	3023883a 	mov	r17,r6
    db88:	3825883a 	mov	r18,r7
    db8c:	003eaa06 	br	d638 <__alt_data_end+0xfc00d638>
    db90:	1021883a 	mov	r16,r2
    db94:	0011883a 	mov	r8,zero
    db98:	0005883a 	mov	r2,zero
    db9c:	003f0f06 	br	d7dc <__alt_data_end+0xfc00d7dc>
    dba0:	217ff804 	addi	r5,r4,-32
    dba4:	00800804 	movi	r2,32
    dba8:	494ad83a 	srl	r5,r9,r5
    dbac:	20807d26 	beq	r4,r2,dda4 <__adddf3+0x7e8>
    dbb0:	00801004 	movi	r2,64
    dbb4:	1109c83a 	sub	r4,r2,r4
    dbb8:	4912983a 	sll	r9,r9,r4
    dbbc:	498cb03a 	or	r6,r9,r6
    dbc0:	300cc03a 	cmpne	r6,r6,zero
    dbc4:	298ab03a 	or	r5,r5,r6
    dbc8:	0013883a 	mov	r9,zero
    dbcc:	003f1506 	br	d824 <__alt_data_end+0xfc00d824>
    dbd0:	0101ffc4 	movi	r4,2047
    dbd4:	113f9a1e 	bne	r2,r4,da40 <__alt_data_end+0xfc00da40>
    dbd8:	4811883a 	mov	r8,r9
    dbdc:	3023883a 	mov	r17,r6
    dbe0:	1021883a 	mov	r16,r2
    dbe4:	3825883a 	mov	r18,r7
    dbe8:	003e9306 	br	d638 <__alt_data_end+0xfc00d638>
    dbec:	8000161e 	bne	r16,zero,dc48 <__adddf3+0x68c>
    dbf0:	444ab03a 	or	r5,r8,r17
    dbf4:	28005126 	beq	r5,zero,dd3c <__adddf3+0x780>
    dbf8:	0108303a 	nor	r4,zero,r4
    dbfc:	20004d1e 	bne	r4,zero,dd34 <__adddf3+0x778>
    dc00:	89a3883a 	add	r17,r17,r6
    dc04:	4253883a 	add	r9,r8,r9
    dc08:	898d803a 	cmpltu	r6,r17,r6
    dc0c:	3251883a 	add	r8,r6,r9
    dc10:	1021883a 	mov	r16,r2
    dc14:	003f0806 	br	d838 <__alt_data_end+0xfc00d838>
    dc18:	1000301e 	bne	r2,zero,dcdc <__adddf3+0x720>
    dc1c:	4984b03a 	or	r2,r9,r6
    dc20:	10007126 	beq	r2,zero,dde8 <__adddf3+0x82c>
    dc24:	4811883a 	mov	r8,r9
    dc28:	3023883a 	mov	r17,r6
    dc2c:	3825883a 	mov	r18,r7
    dc30:	0401ffc4 	movi	r16,2047
    dc34:	003e8006 	br	d638 <__alt_data_end+0xfc00d638>
    dc38:	4462b03a 	or	r17,r8,r17
    dc3c:	8822c03a 	cmpne	r17,r17,zero
    dc40:	0007883a 	mov	r3,zero
    dc44:	003f8b06 	br	da74 <__alt_data_end+0xfc00da74>
    dc48:	0141ffc4 	movi	r5,2047
    dc4c:	11403b26 	beq	r2,r5,dd3c <__adddf3+0x780>
    dc50:	0109c83a 	sub	r4,zero,r4
    dc54:	42002034 	orhi	r8,r8,128
    dc58:	01400e04 	movi	r5,56
    dc5c:	29006716 	blt	r5,r4,ddfc <__adddf3+0x840>
    dc60:	014007c4 	movi	r5,31
    dc64:	29007016 	blt	r5,r4,de28 <__adddf3+0x86c>
    dc68:	01400804 	movi	r5,32
    dc6c:	290bc83a 	sub	r5,r5,r4
    dc70:	4154983a 	sll	r10,r8,r5
    dc74:	890ed83a 	srl	r7,r17,r4
    dc78:	894a983a 	sll	r5,r17,r5
    dc7c:	4108d83a 	srl	r4,r8,r4
    dc80:	51e2b03a 	or	r17,r10,r7
    dc84:	280ac03a 	cmpne	r5,r5,zero
    dc88:	8962b03a 	or	r17,r17,r5
    dc8c:	89a3883a 	add	r17,r17,r6
    dc90:	2253883a 	add	r9,r4,r9
    dc94:	898d803a 	cmpltu	r6,r17,r6
    dc98:	3251883a 	add	r8,r6,r9
    dc9c:	1021883a 	mov	r16,r2
    dca0:	003ee506 	br	d838 <__alt_data_end+0xfc00d838>
    dca4:	4984b03a 	or	r2,r9,r6
    dca8:	103e6326 	beq	r2,zero,d638 <__alt_data_end+0xfc00d638>
    dcac:	8987c83a 	sub	r3,r17,r6
    dcb0:	88c9803a 	cmpltu	r4,r17,r3
    dcb4:	4245c83a 	sub	r2,r8,r9
    dcb8:	1105c83a 	sub	r2,r2,r4
    dcbc:	1100202c 	andhi	r4,r2,128
    dcc0:	203ebb26 	beq	r4,zero,d7b0 <__alt_data_end+0xfc00d7b0>
    dcc4:	3463c83a 	sub	r17,r6,r17
    dcc8:	4a07c83a 	sub	r3,r9,r8
    dccc:	344d803a 	cmpltu	r6,r6,r17
    dcd0:	1991c83a 	sub	r8,r3,r6
    dcd4:	3825883a 	mov	r18,r7
    dcd8:	003e5706 	br	d638 <__alt_data_end+0xfc00d638>
    dcdc:	4984b03a 	or	r2,r9,r6
    dce0:	10002e26 	beq	r2,zero,dd9c <__adddf3+0x7e0>
    dce4:	4004d0fa 	srli	r2,r8,3
    dce8:	8822d0fa 	srli	r17,r17,3
    dcec:	4010977a 	slli	r8,r8,29
    dcf0:	10c0022c 	andhi	r3,r2,8
    dcf4:	4462b03a 	or	r17,r8,r17
    dcf8:	18000826 	beq	r3,zero,dd1c <__adddf3+0x760>
    dcfc:	4808d0fa 	srli	r4,r9,3
    dd00:	20c0022c 	andhi	r3,r4,8
    dd04:	1800051e 	bne	r3,zero,dd1c <__adddf3+0x760>
    dd08:	300cd0fa 	srli	r6,r6,3
    dd0c:	4806977a 	slli	r3,r9,29
    dd10:	2005883a 	mov	r2,r4
    dd14:	3825883a 	mov	r18,r7
    dd18:	19a2b03a 	or	r17,r3,r6
    dd1c:	8810d77a 	srli	r8,r17,29
    dd20:	100490fa 	slli	r2,r2,3
    dd24:	882290fa 	slli	r17,r17,3
    dd28:	0401ffc4 	movi	r16,2047
    dd2c:	4090b03a 	or	r8,r8,r2
    dd30:	003e4106 	br	d638 <__alt_data_end+0xfc00d638>
    dd34:	0141ffc4 	movi	r5,2047
    dd38:	117fc71e 	bne	r2,r5,dc58 <__alt_data_end+0xfc00dc58>
    dd3c:	4811883a 	mov	r8,r9
    dd40:	3023883a 	mov	r17,r6
    dd44:	1021883a 	mov	r16,r2
    dd48:	003e3b06 	br	d638 <__alt_data_end+0xfc00d638>
    dd4c:	10002f26 	beq	r2,zero,de0c <__adddf3+0x850>
    dd50:	4984b03a 	or	r2,r9,r6
    dd54:	10001126 	beq	r2,zero,dd9c <__adddf3+0x7e0>
    dd58:	4004d0fa 	srli	r2,r8,3
    dd5c:	8822d0fa 	srli	r17,r17,3
    dd60:	4010977a 	slli	r8,r8,29
    dd64:	10c0022c 	andhi	r3,r2,8
    dd68:	4462b03a 	or	r17,r8,r17
    dd6c:	183feb26 	beq	r3,zero,dd1c <__alt_data_end+0xfc00dd1c>
    dd70:	4808d0fa 	srli	r4,r9,3
    dd74:	20c0022c 	andhi	r3,r4,8
    dd78:	183fe81e 	bne	r3,zero,dd1c <__alt_data_end+0xfc00dd1c>
    dd7c:	300cd0fa 	srli	r6,r6,3
    dd80:	4806977a 	slli	r3,r9,29
    dd84:	2005883a 	mov	r2,r4
    dd88:	19a2b03a 	or	r17,r3,r6
    dd8c:	003fe306 	br	dd1c <__alt_data_end+0xfc00dd1c>
    dd90:	0011883a 	mov	r8,zero
    dd94:	0005883a 	mov	r2,zero
    dd98:	003e3f06 	br	d698 <__alt_data_end+0xfc00d698>
    dd9c:	0401ffc4 	movi	r16,2047
    dda0:	003e2506 	br	d638 <__alt_data_end+0xfc00d638>
    dda4:	0013883a 	mov	r9,zero
    dda8:	003f8406 	br	dbbc <__alt_data_end+0xfc00dbbc>
    ddac:	0005883a 	mov	r2,zero
    ddb0:	0007883a 	mov	r3,zero
    ddb4:	003e8906 	br	d7dc <__alt_data_end+0xfc00d7dc>
    ddb8:	197ff804 	addi	r5,r3,-32
    ddbc:	01000804 	movi	r4,32
    ddc0:	414ad83a 	srl	r5,r8,r5
    ddc4:	19002426 	beq	r3,r4,de58 <__adddf3+0x89c>
    ddc8:	01001004 	movi	r4,64
    ddcc:	20c7c83a 	sub	r3,r4,r3
    ddd0:	40c6983a 	sll	r3,r8,r3
    ddd4:	1c46b03a 	or	r3,r3,r17
    ddd8:	1806c03a 	cmpne	r3,r3,zero
    dddc:	28e2b03a 	or	r17,r5,r3
    dde0:	0007883a 	mov	r3,zero
    dde4:	003f2306 	br	da74 <__alt_data_end+0xfc00da74>
    dde8:	0007883a 	mov	r3,zero
    ddec:	5811883a 	mov	r8,r11
    ddf0:	00bfffc4 	movi	r2,-1
    ddf4:	0401ffc4 	movi	r16,2047
    ddf8:	003e7806 	br	d7dc <__alt_data_end+0xfc00d7dc>
    ddfc:	4462b03a 	or	r17,r8,r17
    de00:	8822c03a 	cmpne	r17,r17,zero
    de04:	0009883a 	mov	r4,zero
    de08:	003fa006 	br	dc8c <__alt_data_end+0xfc00dc8c>
    de0c:	4811883a 	mov	r8,r9
    de10:	3023883a 	mov	r17,r6
    de14:	0401ffc4 	movi	r16,2047
    de18:	003e0706 	br	d638 <__alt_data_end+0xfc00d638>
    de1c:	4811883a 	mov	r8,r9
    de20:	3023883a 	mov	r17,r6
    de24:	003e0406 	br	d638 <__alt_data_end+0xfc00d638>
    de28:	21fff804 	addi	r7,r4,-32
    de2c:	01400804 	movi	r5,32
    de30:	41ced83a 	srl	r7,r8,r7
    de34:	21400a26 	beq	r4,r5,de60 <__adddf3+0x8a4>
    de38:	01401004 	movi	r5,64
    de3c:	2909c83a 	sub	r4,r5,r4
    de40:	4108983a 	sll	r4,r8,r4
    de44:	2448b03a 	or	r4,r4,r17
    de48:	2008c03a 	cmpne	r4,r4,zero
    de4c:	3922b03a 	or	r17,r7,r4
    de50:	0009883a 	mov	r4,zero
    de54:	003f8d06 	br	dc8c <__alt_data_end+0xfc00dc8c>
    de58:	0007883a 	mov	r3,zero
    de5c:	003fdd06 	br	ddd4 <__alt_data_end+0xfc00ddd4>
    de60:	0009883a 	mov	r4,zero
    de64:	003ff706 	br	de44 <__alt_data_end+0xfc00de44>

0000de68 <__divdf3>:
    de68:	defff004 	addi	sp,sp,-64
    de6c:	dc800815 	stw	r18,32(sp)
    de70:	2824d53a 	srli	r18,r5,20
    de74:	dd800c15 	stw	r22,48(sp)
    de78:	282cd7fa 	srli	r22,r5,31
    de7c:	dc000615 	stw	r16,24(sp)
    de80:	04000434 	movhi	r16,16
    de84:	843fffc4 	addi	r16,r16,-1
    de88:	dfc00f15 	stw	ra,60(sp)
    de8c:	df000e15 	stw	fp,56(sp)
    de90:	ddc00d15 	stw	r23,52(sp)
    de94:	dd400b15 	stw	r21,44(sp)
    de98:	dd000a15 	stw	r20,40(sp)
    de9c:	dcc00915 	stw	r19,36(sp)
    dea0:	dc400715 	stw	r17,28(sp)
    dea4:	9481ffcc 	andi	r18,r18,2047
    dea8:	2c20703a 	and	r16,r5,r16
    deac:	b2003fcc 	andi	r8,r22,255
    deb0:	90006126 	beq	r18,zero,e038 <__divdf3+0x1d0>
    deb4:	0081ffc4 	movi	r2,2047
    deb8:	202b883a 	mov	r21,r4
    debc:	90803726 	beq	r18,r2,df9c <__divdf3+0x134>
    dec0:	80800434 	orhi	r2,r16,16
    dec4:	100490fa 	slli	r2,r2,3
    dec8:	2020d77a 	srli	r16,r4,29
    decc:	202a90fa 	slli	r21,r4,3
    ded0:	94bf0044 	addi	r18,r18,-1023
    ded4:	80a0b03a 	or	r16,r16,r2
    ded8:	0013883a 	mov	r9,zero
    dedc:	000b883a 	mov	r5,zero
    dee0:	3806d53a 	srli	r3,r7,20
    dee4:	382ed7fa 	srli	r23,r7,31
    dee8:	04400434 	movhi	r17,16
    deec:	8c7fffc4 	addi	r17,r17,-1
    def0:	18c1ffcc 	andi	r3,r3,2047
    def4:	3029883a 	mov	r20,r6
    def8:	3c62703a 	and	r17,r7,r17
    defc:	bf003fcc 	andi	fp,r23,255
    df00:	18006e26 	beq	r3,zero,e0bc <__divdf3+0x254>
    df04:	0081ffc4 	movi	r2,2047
    df08:	18806626 	beq	r3,r2,e0a4 <__divdf3+0x23c>
    df0c:	88800434 	orhi	r2,r17,16
    df10:	100490fa 	slli	r2,r2,3
    df14:	3022d77a 	srli	r17,r6,29
    df18:	302890fa 	slli	r20,r6,3
    df1c:	18ff0044 	addi	r3,r3,-1023
    df20:	88a2b03a 	or	r17,r17,r2
    df24:	000f883a 	mov	r7,zero
    df28:	b5e6f03a 	xor	r19,r22,r23
    df2c:	3a4cb03a 	or	r6,r7,r9
    df30:	008003c4 	movi	r2,15
    df34:	9809883a 	mov	r4,r19
    df38:	90c7c83a 	sub	r3,r18,r3
    df3c:	9cc03fcc 	andi	r19,r19,255
    df40:	11809636 	bltu	r2,r6,e19c <__divdf3+0x334>
    df44:	300c90ba 	slli	r6,r6,2
    df48:	00800074 	movhi	r2,1
    df4c:	10b7d704 	addi	r2,r2,-8356
    df50:	308d883a 	add	r6,r6,r2
    df54:	30800017 	ldw	r2,0(r6)
    df58:	1000683a 	jmp	r2
    df5c:	0000e19c 	xori	zero,zero,902
    df60:	0000dfd4 	movui	zero,895
    df64:	0000e18c 	andi	zero,zero,902
    df68:	0000dfc8 	cmpgei	zero,zero,895
    df6c:	0000e18c 	andi	zero,zero,902
    df70:	0000e160 	cmpeqi	zero,zero,901
    df74:	0000e18c 	andi	zero,zero,902
    df78:	0000dfc8 	cmpgei	zero,zero,895
    df7c:	0000dfd4 	movui	zero,895
    df80:	0000dfd4 	movui	zero,895
    df84:	0000e160 	cmpeqi	zero,zero,901
    df88:	0000dfc8 	cmpgei	zero,zero,895
    df8c:	0000dfb8 	rdprs	zero,zero,894
    df90:	0000dfb8 	rdprs	zero,zero,894
    df94:	0000dfb8 	rdprs	zero,zero,894
    df98:	0000e524 	muli	zero,zero,916
    df9c:	2404b03a 	or	r2,r4,r16
    dfa0:	10006c1e 	bne	r2,zero,e154 <__divdf3+0x2ec>
    dfa4:	02400204 	movi	r9,8
    dfa8:	0021883a 	mov	r16,zero
    dfac:	002b883a 	mov	r21,zero
    dfb0:	01400084 	movi	r5,2
    dfb4:	003fca06 	br	dee0 <__alt_data_end+0xfc00dee0>
    dfb8:	8023883a 	mov	r17,r16
    dfbc:	a829883a 	mov	r20,r21
    dfc0:	4039883a 	mov	fp,r8
    dfc4:	280f883a 	mov	r7,r5
    dfc8:	00800084 	movi	r2,2
    dfcc:	3881601e 	bne	r7,r2,e550 <__divdf3+0x6e8>
    dfd0:	e027883a 	mov	r19,fp
    dfd4:	9900004c 	andi	r4,r19,1
    dfd8:	0081ffc4 	movi	r2,2047
    dfdc:	0021883a 	mov	r16,zero
    dfe0:	002b883a 	mov	r21,zero
    dfe4:	1004953a 	slli	r2,r2,20
    dfe8:	20c03fcc 	andi	r3,r4,255
    dfec:	01400434 	movhi	r5,16
    dff0:	297fffc4 	addi	r5,r5,-1
    dff4:	180697fa 	slli	r3,r3,31
    dff8:	8160703a 	and	r16,r16,r5
    dffc:	80a0b03a 	or	r16,r16,r2
    e000:	80c6b03a 	or	r3,r16,r3
    e004:	a805883a 	mov	r2,r21
    e008:	dfc00f17 	ldw	ra,60(sp)
    e00c:	df000e17 	ldw	fp,56(sp)
    e010:	ddc00d17 	ldw	r23,52(sp)
    e014:	dd800c17 	ldw	r22,48(sp)
    e018:	dd400b17 	ldw	r21,44(sp)
    e01c:	dd000a17 	ldw	r20,40(sp)
    e020:	dcc00917 	ldw	r19,36(sp)
    e024:	dc800817 	ldw	r18,32(sp)
    e028:	dc400717 	ldw	r17,28(sp)
    e02c:	dc000617 	ldw	r16,24(sp)
    e030:	dec01004 	addi	sp,sp,64
    e034:	f800283a 	ret
    e038:	2404b03a 	or	r2,r4,r16
    e03c:	2023883a 	mov	r17,r4
    e040:	10003f26 	beq	r2,zero,e140 <__divdf3+0x2d8>
    e044:	80015e26 	beq	r16,zero,e5c0 <__divdf3+0x758>
    e048:	8009883a 	mov	r4,r16
    e04c:	d9800215 	stw	r6,8(sp)
    e050:	d9c00515 	stw	r7,20(sp)
    e054:	da000415 	stw	r8,16(sp)
    e058:	000fdfc0 	call	fdfc <__clzsi2>
    e05c:	d9800217 	ldw	r6,8(sp)
    e060:	d9c00517 	ldw	r7,20(sp)
    e064:	da000417 	ldw	r8,16(sp)
    e068:	113ffd44 	addi	r4,r2,-11
    e06c:	00c00704 	movi	r3,28
    e070:	19014f16 	blt	r3,r4,e5b0 <__divdf3+0x748>
    e074:	00c00744 	movi	r3,29
    e078:	157ffe04 	addi	r21,r2,-8
    e07c:	1907c83a 	sub	r3,r3,r4
    e080:	8560983a 	sll	r16,r16,r21
    e084:	88c6d83a 	srl	r3,r17,r3
    e088:	8d6a983a 	sll	r21,r17,r21
    e08c:	1c20b03a 	or	r16,r3,r16
    e090:	1080fcc4 	addi	r2,r2,1011
    e094:	00a5c83a 	sub	r18,zero,r2
    e098:	0013883a 	mov	r9,zero
    e09c:	000b883a 	mov	r5,zero
    e0a0:	003f8f06 	br	dee0 <__alt_data_end+0xfc00dee0>
    e0a4:	3444b03a 	or	r2,r6,r17
    e0a8:	1000231e 	bne	r2,zero,e138 <__divdf3+0x2d0>
    e0ac:	0023883a 	mov	r17,zero
    e0b0:	0029883a 	mov	r20,zero
    e0b4:	01c00084 	movi	r7,2
    e0b8:	003f9b06 	br	df28 <__alt_data_end+0xfc00df28>
    e0bc:	3444b03a 	or	r2,r6,r17
    e0c0:	10001926 	beq	r2,zero,e128 <__divdf3+0x2c0>
    e0c4:	88014b26 	beq	r17,zero,e5f4 <__divdf3+0x78c>
    e0c8:	8809883a 	mov	r4,r17
    e0cc:	d9400115 	stw	r5,4(sp)
    e0d0:	d9800215 	stw	r6,8(sp)
    e0d4:	da000415 	stw	r8,16(sp)
    e0d8:	da400315 	stw	r9,12(sp)
    e0dc:	000fdfc0 	call	fdfc <__clzsi2>
    e0e0:	d9400117 	ldw	r5,4(sp)
    e0e4:	d9800217 	ldw	r6,8(sp)
    e0e8:	da000417 	ldw	r8,16(sp)
    e0ec:	da400317 	ldw	r9,12(sp)
    e0f0:	113ffd44 	addi	r4,r2,-11
    e0f4:	00c00704 	movi	r3,28
    e0f8:	19013a16 	blt	r3,r4,e5e4 <__divdf3+0x77c>
    e0fc:	00c00744 	movi	r3,29
    e100:	153ffe04 	addi	r20,r2,-8
    e104:	1907c83a 	sub	r3,r3,r4
    e108:	8d22983a 	sll	r17,r17,r20
    e10c:	30c6d83a 	srl	r3,r6,r3
    e110:	3528983a 	sll	r20,r6,r20
    e114:	1c62b03a 	or	r17,r3,r17
    e118:	1080fcc4 	addi	r2,r2,1011
    e11c:	0087c83a 	sub	r3,zero,r2
    e120:	000f883a 	mov	r7,zero
    e124:	003f8006 	br	df28 <__alt_data_end+0xfc00df28>
    e128:	0023883a 	mov	r17,zero
    e12c:	0029883a 	mov	r20,zero
    e130:	01c00044 	movi	r7,1
    e134:	003f7c06 	br	df28 <__alt_data_end+0xfc00df28>
    e138:	01c000c4 	movi	r7,3
    e13c:	003f7a06 	br	df28 <__alt_data_end+0xfc00df28>
    e140:	02400104 	movi	r9,4
    e144:	0021883a 	mov	r16,zero
    e148:	002b883a 	mov	r21,zero
    e14c:	01400044 	movi	r5,1
    e150:	003f6306 	br	dee0 <__alt_data_end+0xfc00dee0>
    e154:	02400304 	movi	r9,12
    e158:	014000c4 	movi	r5,3
    e15c:	003f6006 	br	dee0 <__alt_data_end+0xfc00dee0>
    e160:	04000434 	movhi	r16,16
    e164:	0009883a 	mov	r4,zero
    e168:	843fffc4 	addi	r16,r16,-1
    e16c:	057fffc4 	movi	r21,-1
    e170:	0081ffc4 	movi	r2,2047
    e174:	003f9b06 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    e178:	00c00044 	movi	r3,1
    e17c:	1887c83a 	sub	r3,r3,r2
    e180:	01000e04 	movi	r4,56
    e184:	20c1530e 	bge	r4,r3,e6d4 <__divdf3+0x86c>
    e188:	9900004c 	andi	r4,r19,1
    e18c:	0005883a 	mov	r2,zero
    e190:	0021883a 	mov	r16,zero
    e194:	002b883a 	mov	r21,zero
    e198:	003f9206 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    e19c:	8c012e36 	bltu	r17,r16,e658 <__divdf3+0x7f0>
    e1a0:	84412c26 	beq	r16,r17,e654 <__divdf3+0x7ec>
    e1a4:	a82f883a 	mov	r23,r21
    e1a8:	18ffffc4 	addi	r3,r3,-1
    e1ac:	002b883a 	mov	r21,zero
    e1b0:	a004d63a 	srli	r2,r20,24
    e1b4:	8822923a 	slli	r17,r17,8
    e1b8:	a028923a 	slli	r20,r20,8
    e1bc:	8009883a 	mov	r4,r16
    e1c0:	88acb03a 	or	r22,r17,r2
    e1c4:	dd000015 	stw	r20,0(sp)
    e1c8:	b028d43a 	srli	r20,r22,16
    e1cc:	d8c00215 	stw	r3,8(sp)
    e1d0:	b4bfffcc 	andi	r18,r22,65535
    e1d4:	a00b883a 	mov	r5,r20
    e1d8:	00030180 	call	3018 <__udivsi3>
    e1dc:	100b883a 	mov	r5,r2
    e1e0:	9009883a 	mov	r4,r18
    e1e4:	1023883a 	mov	r17,r2
    e1e8:	00030d40 	call	30d4 <__mulsi3>
    e1ec:	8009883a 	mov	r4,r16
    e1f0:	a00b883a 	mov	r5,r20
    e1f4:	1039883a 	mov	fp,r2
    e1f8:	000307c0 	call	307c <__umodsi3>
    e1fc:	1004943a 	slli	r2,r2,16
    e200:	b808d43a 	srli	r4,r23,16
    e204:	d8c00217 	ldw	r3,8(sp)
    e208:	2084b03a 	or	r2,r4,r2
    e20c:	1700062e 	bgeu	r2,fp,e228 <__divdf3+0x3c0>
    e210:	1585883a 	add	r2,r2,r22
    e214:	893fffc4 	addi	r4,r17,-1
    e218:	15811d36 	bltu	r2,r22,e690 <__divdf3+0x828>
    e21c:	17011c2e 	bgeu	r2,fp,e690 <__divdf3+0x828>
    e220:	8c7fff84 	addi	r17,r17,-2
    e224:	1585883a 	add	r2,r2,r22
    e228:	1739c83a 	sub	fp,r2,fp
    e22c:	a00b883a 	mov	r5,r20
    e230:	e009883a 	mov	r4,fp
    e234:	d8c00215 	stw	r3,8(sp)
    e238:	00030180 	call	3018 <__udivsi3>
    e23c:	100b883a 	mov	r5,r2
    e240:	9009883a 	mov	r4,r18
    e244:	1021883a 	mov	r16,r2
    e248:	00030d40 	call	30d4 <__mulsi3>
    e24c:	a00b883a 	mov	r5,r20
    e250:	e009883a 	mov	r4,fp
    e254:	d8800415 	stw	r2,16(sp)
    e258:	000307c0 	call	307c <__umodsi3>
    e25c:	1004943a 	slli	r2,r2,16
    e260:	da000417 	ldw	r8,16(sp)
    e264:	bdffffcc 	andi	r23,r23,65535
    e268:	b884b03a 	or	r2,r23,r2
    e26c:	d8c00217 	ldw	r3,8(sp)
    e270:	1200062e 	bgeu	r2,r8,e28c <__divdf3+0x424>
    e274:	1585883a 	add	r2,r2,r22
    e278:	813fffc4 	addi	r4,r16,-1
    e27c:	15810236 	bltu	r2,r22,e688 <__divdf3+0x820>
    e280:	1201012e 	bgeu	r2,r8,e688 <__divdf3+0x820>
    e284:	843fff84 	addi	r16,r16,-2
    e288:	1585883a 	add	r2,r2,r22
    e28c:	8822943a 	slli	r17,r17,16
    e290:	d9800017 	ldw	r6,0(sp)
    e294:	1211c83a 	sub	r8,r2,r8
    e298:	8c22b03a 	or	r17,r17,r16
    e29c:	373fffcc 	andi	fp,r6,65535
    e2a0:	8abfffcc 	andi	r10,r17,65535
    e2a4:	8820d43a 	srli	r16,r17,16
    e2a8:	5009883a 	mov	r4,r10
    e2ac:	e00b883a 	mov	r5,fp
    e2b0:	302ed43a 	srli	r23,r6,16
    e2b4:	d8c00215 	stw	r3,8(sp)
    e2b8:	da000415 	stw	r8,16(sp)
    e2bc:	da800115 	stw	r10,4(sp)
    e2c0:	00030d40 	call	30d4 <__mulsi3>
    e2c4:	800b883a 	mov	r5,r16
    e2c8:	e009883a 	mov	r4,fp
    e2cc:	d8800515 	stw	r2,20(sp)
    e2d0:	00030d40 	call	30d4 <__mulsi3>
    e2d4:	8009883a 	mov	r4,r16
    e2d8:	b80b883a 	mov	r5,r23
    e2dc:	d8800315 	stw	r2,12(sp)
    e2e0:	00030d40 	call	30d4 <__mulsi3>
    e2e4:	da800117 	ldw	r10,4(sp)
    e2e8:	b80b883a 	mov	r5,r23
    e2ec:	1021883a 	mov	r16,r2
    e2f0:	5009883a 	mov	r4,r10
    e2f4:	00030d40 	call	30d4 <__mulsi3>
    e2f8:	d9c00517 	ldw	r7,20(sp)
    e2fc:	da400317 	ldw	r9,12(sp)
    e300:	d8c00217 	ldw	r3,8(sp)
    e304:	3808d43a 	srli	r4,r7,16
    e308:	1245883a 	add	r2,r2,r9
    e30c:	da000417 	ldw	r8,16(sp)
    e310:	2085883a 	add	r2,r4,r2
    e314:	1240022e 	bgeu	r2,r9,e320 <__divdf3+0x4b8>
    e318:	01000074 	movhi	r4,1
    e31c:	8121883a 	add	r16,r16,r4
    e320:	1008d43a 	srli	r4,r2,16
    e324:	1004943a 	slli	r2,r2,16
    e328:	39ffffcc 	andi	r7,r7,65535
    e32c:	2409883a 	add	r4,r4,r16
    e330:	11c5883a 	add	r2,r2,r7
    e334:	4100bb36 	bltu	r8,r4,e624 <__divdf3+0x7bc>
    e338:	4100d726 	beq	r8,r4,e698 <__divdf3+0x830>
    e33c:	4109c83a 	sub	r4,r8,r4
    e340:	a8a1c83a 	sub	r16,r21,r2
    e344:	ac2b803a 	cmpltu	r21,r21,r16
    e348:	256bc83a 	sub	r21,r4,r21
    e34c:	b540d926 	beq	r22,r21,e6b4 <__divdf3+0x84c>
    e350:	a00b883a 	mov	r5,r20
    e354:	a809883a 	mov	r4,r21
    e358:	d8c00215 	stw	r3,8(sp)
    e35c:	00030180 	call	3018 <__udivsi3>
    e360:	100b883a 	mov	r5,r2
    e364:	9009883a 	mov	r4,r18
    e368:	d8800515 	stw	r2,20(sp)
    e36c:	00030d40 	call	30d4 <__mulsi3>
    e370:	a809883a 	mov	r4,r21
    e374:	a00b883a 	mov	r5,r20
    e378:	d8800415 	stw	r2,16(sp)
    e37c:	000307c0 	call	307c <__umodsi3>
    e380:	1004943a 	slli	r2,r2,16
    e384:	8008d43a 	srli	r4,r16,16
    e388:	da000417 	ldw	r8,16(sp)
    e38c:	d8c00217 	ldw	r3,8(sp)
    e390:	2084b03a 	or	r2,r4,r2
    e394:	d9c00517 	ldw	r7,20(sp)
    e398:	1200062e 	bgeu	r2,r8,e3b4 <__divdf3+0x54c>
    e39c:	1585883a 	add	r2,r2,r22
    e3a0:	393fffc4 	addi	r4,r7,-1
    e3a4:	1580c536 	bltu	r2,r22,e6bc <__divdf3+0x854>
    e3a8:	1200c42e 	bgeu	r2,r8,e6bc <__divdf3+0x854>
    e3ac:	39ffff84 	addi	r7,r7,-2
    e3b0:	1585883a 	add	r2,r2,r22
    e3b4:	122bc83a 	sub	r21,r2,r8
    e3b8:	a00b883a 	mov	r5,r20
    e3bc:	a809883a 	mov	r4,r21
    e3c0:	d8c00215 	stw	r3,8(sp)
    e3c4:	d9c00515 	stw	r7,20(sp)
    e3c8:	00030180 	call	3018 <__udivsi3>
    e3cc:	9009883a 	mov	r4,r18
    e3d0:	100b883a 	mov	r5,r2
    e3d4:	d8800415 	stw	r2,16(sp)
    e3d8:	00030d40 	call	30d4 <__mulsi3>
    e3dc:	a809883a 	mov	r4,r21
    e3e0:	a00b883a 	mov	r5,r20
    e3e4:	1025883a 	mov	r18,r2
    e3e8:	000307c0 	call	307c <__umodsi3>
    e3ec:	1004943a 	slli	r2,r2,16
    e3f0:	813fffcc 	andi	r4,r16,65535
    e3f4:	d8c00217 	ldw	r3,8(sp)
    e3f8:	20a0b03a 	or	r16,r4,r2
    e3fc:	d9c00517 	ldw	r7,20(sp)
    e400:	da000417 	ldw	r8,16(sp)
    e404:	8480062e 	bgeu	r16,r18,e420 <__divdf3+0x5b8>
    e408:	85a1883a 	add	r16,r16,r22
    e40c:	40bfffc4 	addi	r2,r8,-1
    e410:	8580ac36 	bltu	r16,r22,e6c4 <__divdf3+0x85c>
    e414:	8480ab2e 	bgeu	r16,r18,e6c4 <__divdf3+0x85c>
    e418:	423fff84 	addi	r8,r8,-2
    e41c:	85a1883a 	add	r16,r16,r22
    e420:	3804943a 	slli	r2,r7,16
    e424:	84a1c83a 	sub	r16,r16,r18
    e428:	e009883a 	mov	r4,fp
    e42c:	1228b03a 	or	r20,r2,r8
    e430:	a1ffffcc 	andi	r7,r20,65535
    e434:	a024d43a 	srli	r18,r20,16
    e438:	380b883a 	mov	r5,r7
    e43c:	d8c00215 	stw	r3,8(sp)
    e440:	d9c00515 	stw	r7,20(sp)
    e444:	00030d40 	call	30d4 <__mulsi3>
    e448:	900b883a 	mov	r5,r18
    e44c:	e009883a 	mov	r4,fp
    e450:	102b883a 	mov	r21,r2
    e454:	00030d40 	call	30d4 <__mulsi3>
    e458:	900b883a 	mov	r5,r18
    e45c:	b809883a 	mov	r4,r23
    e460:	1039883a 	mov	fp,r2
    e464:	00030d40 	call	30d4 <__mulsi3>
    e468:	d9c00517 	ldw	r7,20(sp)
    e46c:	b80b883a 	mov	r5,r23
    e470:	1025883a 	mov	r18,r2
    e474:	3809883a 	mov	r4,r7
    e478:	00030d40 	call	30d4 <__mulsi3>
    e47c:	a808d43a 	srli	r4,r21,16
    e480:	1705883a 	add	r2,r2,fp
    e484:	d8c00217 	ldw	r3,8(sp)
    e488:	2085883a 	add	r2,r4,r2
    e48c:	1700022e 	bgeu	r2,fp,e498 <__divdf3+0x630>
    e490:	01000074 	movhi	r4,1
    e494:	9125883a 	add	r18,r18,r4
    e498:	1008d43a 	srli	r4,r2,16
    e49c:	1004943a 	slli	r2,r2,16
    e4a0:	ad7fffcc 	andi	r21,r21,65535
    e4a4:	2489883a 	add	r4,r4,r18
    e4a8:	1545883a 	add	r2,r2,r21
    e4ac:	81003836 	bltu	r16,r4,e590 <__divdf3+0x728>
    e4b0:	81003626 	beq	r16,r4,e58c <__divdf3+0x724>
    e4b4:	a5000054 	ori	r20,r20,1
    e4b8:	1880ffc4 	addi	r2,r3,1023
    e4bc:	00bf2e0e 	bge	zero,r2,e178 <__alt_data_end+0xfc00e178>
    e4c0:	a10001cc 	andi	r4,r20,7
    e4c4:	20000726 	beq	r4,zero,e4e4 <__divdf3+0x67c>
    e4c8:	a10003cc 	andi	r4,r20,15
    e4cc:	01400104 	movi	r5,4
    e4d0:	21400426 	beq	r4,r5,e4e4 <__divdf3+0x67c>
    e4d4:	a149883a 	add	r4,r20,r5
    e4d8:	2529803a 	cmpltu	r20,r4,r20
    e4dc:	8d23883a 	add	r17,r17,r20
    e4e0:	2029883a 	mov	r20,r4
    e4e4:	8900402c 	andhi	r4,r17,256
    e4e8:	20000426 	beq	r4,zero,e4fc <__divdf3+0x694>
    e4ec:	18810004 	addi	r2,r3,1024
    e4f0:	00ffc034 	movhi	r3,65280
    e4f4:	18ffffc4 	addi	r3,r3,-1
    e4f8:	88e2703a 	and	r17,r17,r3
    e4fc:	00c1ff84 	movi	r3,2046
    e500:	18beb416 	blt	r3,r2,dfd4 <__alt_data_end+0xfc00dfd4>
    e504:	a028d0fa 	srli	r20,r20,3
    e508:	882a977a 	slli	r21,r17,29
    e50c:	8820927a 	slli	r16,r17,9
    e510:	1081ffcc 	andi	r2,r2,2047
    e514:	ad2ab03a 	or	r21,r21,r20
    e518:	8020d33a 	srli	r16,r16,12
    e51c:	9900004c 	andi	r4,r19,1
    e520:	003eb006 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    e524:	8080022c 	andhi	r2,r16,8
    e528:	10001226 	beq	r2,zero,e574 <__divdf3+0x70c>
    e52c:	8880022c 	andhi	r2,r17,8
    e530:	1000101e 	bne	r2,zero,e574 <__divdf3+0x70c>
    e534:	00800434 	movhi	r2,16
    e538:	8c000234 	orhi	r16,r17,8
    e53c:	10bfffc4 	addi	r2,r2,-1
    e540:	b809883a 	mov	r4,r23
    e544:	80a0703a 	and	r16,r16,r2
    e548:	a02b883a 	mov	r21,r20
    e54c:	003f0806 	br	e170 <__alt_data_end+0xfc00e170>
    e550:	008000c4 	movi	r2,3
    e554:	3880b126 	beq	r7,r2,e81c <__divdf3+0x9b4>
    e558:	00800044 	movi	r2,1
    e55c:	38805b1e 	bne	r7,r2,e6cc <__divdf3+0x864>
    e560:	e009883a 	mov	r4,fp
    e564:	0005883a 	mov	r2,zero
    e568:	0021883a 	mov	r16,zero
    e56c:	002b883a 	mov	r21,zero
    e570:	003e9c06 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    e574:	00800434 	movhi	r2,16
    e578:	84000234 	orhi	r16,r16,8
    e57c:	10bfffc4 	addi	r2,r2,-1
    e580:	b009883a 	mov	r4,r22
    e584:	80a0703a 	and	r16,r16,r2
    e588:	003ef906 	br	e170 <__alt_data_end+0xfc00e170>
    e58c:	103fca26 	beq	r2,zero,e4b8 <__alt_data_end+0xfc00e4b8>
    e590:	b421883a 	add	r16,r22,r16
    e594:	a17fffc4 	addi	r5,r20,-1
    e598:	8580422e 	bgeu	r16,r22,e6a4 <__divdf3+0x83c>
    e59c:	2829883a 	mov	r20,r5
    e5a0:	813fc41e 	bne	r16,r4,e4b4 <__alt_data_end+0xfc00e4b4>
    e5a4:	d9800017 	ldw	r6,0(sp)
    e5a8:	30bfc21e 	bne	r6,r2,e4b4 <__alt_data_end+0xfc00e4b4>
    e5ac:	003fc206 	br	e4b8 <__alt_data_end+0xfc00e4b8>
    e5b0:	143ff604 	addi	r16,r2,-40
    e5b4:	8c20983a 	sll	r16,r17,r16
    e5b8:	002b883a 	mov	r21,zero
    e5bc:	003eb406 	br	e090 <__alt_data_end+0xfc00e090>
    e5c0:	d9800215 	stw	r6,8(sp)
    e5c4:	d9c00515 	stw	r7,20(sp)
    e5c8:	da000415 	stw	r8,16(sp)
    e5cc:	000fdfc0 	call	fdfc <__clzsi2>
    e5d0:	10800804 	addi	r2,r2,32
    e5d4:	da000417 	ldw	r8,16(sp)
    e5d8:	d9c00517 	ldw	r7,20(sp)
    e5dc:	d9800217 	ldw	r6,8(sp)
    e5e0:	003ea106 	br	e068 <__alt_data_end+0xfc00e068>
    e5e4:	147ff604 	addi	r17,r2,-40
    e5e8:	3462983a 	sll	r17,r6,r17
    e5ec:	0029883a 	mov	r20,zero
    e5f0:	003ec906 	br	e118 <__alt_data_end+0xfc00e118>
    e5f4:	3009883a 	mov	r4,r6
    e5f8:	d9400115 	stw	r5,4(sp)
    e5fc:	d9800215 	stw	r6,8(sp)
    e600:	da000415 	stw	r8,16(sp)
    e604:	da400315 	stw	r9,12(sp)
    e608:	000fdfc0 	call	fdfc <__clzsi2>
    e60c:	10800804 	addi	r2,r2,32
    e610:	da400317 	ldw	r9,12(sp)
    e614:	da000417 	ldw	r8,16(sp)
    e618:	d9800217 	ldw	r6,8(sp)
    e61c:	d9400117 	ldw	r5,4(sp)
    e620:	003eb306 	br	e0f0 <__alt_data_end+0xfc00e0f0>
    e624:	d9800017 	ldw	r6,0(sp)
    e628:	a9ab883a 	add	r21,r21,r6
    e62c:	a98b803a 	cmpltu	r5,r21,r6
    e630:	2d8b883a 	add	r5,r5,r22
    e634:	2a11883a 	add	r8,r5,r8
    e638:	897fffc4 	addi	r5,r17,-1
    e63c:	b2000c2e 	bgeu	r22,r8,e670 <__divdf3+0x808>
    e640:	41003f36 	bltu	r8,r4,e740 <__divdf3+0x8d8>
    e644:	22006c26 	beq	r4,r8,e7f8 <__divdf3+0x990>
    e648:	4109c83a 	sub	r4,r8,r4
    e64c:	2823883a 	mov	r17,r5
    e650:	003f3b06 	br	e340 <__alt_data_end+0xfc00e340>
    e654:	ad3ed336 	bltu	r21,r20,e1a4 <__alt_data_end+0xfc00e1a4>
    e658:	a804d07a 	srli	r2,r21,1
    e65c:	802e97fa 	slli	r23,r16,31
    e660:	a82a97fa 	slli	r21,r21,31
    e664:	8020d07a 	srli	r16,r16,1
    e668:	b8aeb03a 	or	r23,r23,r2
    e66c:	003ed006 	br	e1b0 <__alt_data_end+0xfc00e1b0>
    e670:	b23ff51e 	bne	r22,r8,e648 <__alt_data_end+0xfc00e648>
    e674:	d9800017 	ldw	r6,0(sp)
    e678:	a9bff12e 	bgeu	r21,r6,e640 <__alt_data_end+0xfc00e640>
    e67c:	b109c83a 	sub	r4,r22,r4
    e680:	2823883a 	mov	r17,r5
    e684:	003f2e06 	br	e340 <__alt_data_end+0xfc00e340>
    e688:	2021883a 	mov	r16,r4
    e68c:	003eff06 	br	e28c <__alt_data_end+0xfc00e28c>
    e690:	2023883a 	mov	r17,r4
    e694:	003ee406 	br	e228 <__alt_data_end+0xfc00e228>
    e698:	a8bfe236 	bltu	r21,r2,e624 <__alt_data_end+0xfc00e624>
    e69c:	0009883a 	mov	r4,zero
    e6a0:	003f2706 	br	e340 <__alt_data_end+0xfc00e340>
    e6a4:	81002d36 	bltu	r16,r4,e75c <__divdf3+0x8f4>
    e6a8:	24005626 	beq	r4,r16,e804 <__divdf3+0x99c>
    e6ac:	2829883a 	mov	r20,r5
    e6b0:	003f8006 	br	e4b4 <__alt_data_end+0xfc00e4b4>
    e6b4:	053fffc4 	movi	r20,-1
    e6b8:	003f7f06 	br	e4b8 <__alt_data_end+0xfc00e4b8>
    e6bc:	200f883a 	mov	r7,r4
    e6c0:	003f3c06 	br	e3b4 <__alt_data_end+0xfc00e3b4>
    e6c4:	1011883a 	mov	r8,r2
    e6c8:	003f5506 	br	e420 <__alt_data_end+0xfc00e420>
    e6cc:	e027883a 	mov	r19,fp
    e6d0:	003f7906 	br	e4b8 <__alt_data_end+0xfc00e4b8>
    e6d4:	010007c4 	movi	r4,31
    e6d8:	20c02816 	blt	r4,r3,e77c <__divdf3+0x914>
    e6dc:	00800804 	movi	r2,32
    e6e0:	10c5c83a 	sub	r2,r2,r3
    e6e4:	888a983a 	sll	r5,r17,r2
    e6e8:	a0c8d83a 	srl	r4,r20,r3
    e6ec:	a084983a 	sll	r2,r20,r2
    e6f0:	88e2d83a 	srl	r17,r17,r3
    e6f4:	2906b03a 	or	r3,r5,r4
    e6f8:	1004c03a 	cmpne	r2,r2,zero
    e6fc:	1886b03a 	or	r3,r3,r2
    e700:	188001cc 	andi	r2,r3,7
    e704:	10000726 	beq	r2,zero,e724 <__divdf3+0x8bc>
    e708:	188003cc 	andi	r2,r3,15
    e70c:	01000104 	movi	r4,4
    e710:	11000426 	beq	r2,r4,e724 <__divdf3+0x8bc>
    e714:	1805883a 	mov	r2,r3
    e718:	10c00104 	addi	r3,r2,4
    e71c:	1885803a 	cmpltu	r2,r3,r2
    e720:	88a3883a 	add	r17,r17,r2
    e724:	8880202c 	andhi	r2,r17,128
    e728:	10002926 	beq	r2,zero,e7d0 <__divdf3+0x968>
    e72c:	9900004c 	andi	r4,r19,1
    e730:	00800044 	movi	r2,1
    e734:	0021883a 	mov	r16,zero
    e738:	002b883a 	mov	r21,zero
    e73c:	003e2906 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    e740:	d9800017 	ldw	r6,0(sp)
    e744:	8c7fff84 	addi	r17,r17,-2
    e748:	a9ab883a 	add	r21,r21,r6
    e74c:	a98b803a 	cmpltu	r5,r21,r6
    e750:	2d8b883a 	add	r5,r5,r22
    e754:	2a11883a 	add	r8,r5,r8
    e758:	003ef806 	br	e33c <__alt_data_end+0xfc00e33c>
    e75c:	d9800017 	ldw	r6,0(sp)
    e760:	318f883a 	add	r7,r6,r6
    e764:	398b803a 	cmpltu	r5,r7,r6
    e768:	2d8d883a 	add	r6,r5,r22
    e76c:	81a1883a 	add	r16,r16,r6
    e770:	a17fff84 	addi	r5,r20,-2
    e774:	d9c00015 	stw	r7,0(sp)
    e778:	003f8806 	br	e59c <__alt_data_end+0xfc00e59c>
    e77c:	013ff844 	movi	r4,-31
    e780:	2085c83a 	sub	r2,r4,r2
    e784:	8888d83a 	srl	r4,r17,r2
    e788:	00800804 	movi	r2,32
    e78c:	18802126 	beq	r3,r2,e814 <__divdf3+0x9ac>
    e790:	04001004 	movi	r16,64
    e794:	80c7c83a 	sub	r3,r16,r3
    e798:	88e0983a 	sll	r16,r17,r3
    e79c:	8504b03a 	or	r2,r16,r20
    e7a0:	1004c03a 	cmpne	r2,r2,zero
    e7a4:	2084b03a 	or	r2,r4,r2
    e7a8:	144001cc 	andi	r17,r2,7
    e7ac:	88000d1e 	bne	r17,zero,e7e4 <__divdf3+0x97c>
    e7b0:	0021883a 	mov	r16,zero
    e7b4:	102ad0fa 	srli	r21,r2,3
    e7b8:	9900004c 	andi	r4,r19,1
    e7bc:	0005883a 	mov	r2,zero
    e7c0:	ac6ab03a 	or	r21,r21,r17
    e7c4:	003e0706 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    e7c8:	1007883a 	mov	r3,r2
    e7cc:	0023883a 	mov	r17,zero
    e7d0:	8820927a 	slli	r16,r17,9
    e7d4:	1805883a 	mov	r2,r3
    e7d8:	8822977a 	slli	r17,r17,29
    e7dc:	8020d33a 	srli	r16,r16,12
    e7e0:	003ff406 	br	e7b4 <__alt_data_end+0xfc00e7b4>
    e7e4:	10c003cc 	andi	r3,r2,15
    e7e8:	01000104 	movi	r4,4
    e7ec:	193ff626 	beq	r3,r4,e7c8 <__alt_data_end+0xfc00e7c8>
    e7f0:	0023883a 	mov	r17,zero
    e7f4:	003fc806 	br	e718 <__alt_data_end+0xfc00e718>
    e7f8:	a8bfd136 	bltu	r21,r2,e740 <__alt_data_end+0xfc00e740>
    e7fc:	2823883a 	mov	r17,r5
    e800:	003fa606 	br	e69c <__alt_data_end+0xfc00e69c>
    e804:	d9800017 	ldw	r6,0(sp)
    e808:	30bfd436 	bltu	r6,r2,e75c <__alt_data_end+0xfc00e75c>
    e80c:	2829883a 	mov	r20,r5
    e810:	003f6406 	br	e5a4 <__alt_data_end+0xfc00e5a4>
    e814:	0021883a 	mov	r16,zero
    e818:	003fe006 	br	e79c <__alt_data_end+0xfc00e79c>
    e81c:	00800434 	movhi	r2,16
    e820:	8c000234 	orhi	r16,r17,8
    e824:	10bfffc4 	addi	r2,r2,-1
    e828:	e009883a 	mov	r4,fp
    e82c:	80a0703a 	and	r16,r16,r2
    e830:	a02b883a 	mov	r21,r20
    e834:	003e4e06 	br	e170 <__alt_data_end+0xfc00e170>

0000e838 <__eqdf2>:
    e838:	2804d53a 	srli	r2,r5,20
    e83c:	3806d53a 	srli	r3,r7,20
    e840:	02000434 	movhi	r8,16
    e844:	423fffc4 	addi	r8,r8,-1
    e848:	1081ffcc 	andi	r2,r2,2047
    e84c:	0281ffc4 	movi	r10,2047
    e850:	2a12703a 	and	r9,r5,r8
    e854:	18c1ffcc 	andi	r3,r3,2047
    e858:	3a10703a 	and	r8,r7,r8
    e85c:	280ad7fa 	srli	r5,r5,31
    e860:	380ed7fa 	srli	r7,r7,31
    e864:	12801026 	beq	r2,r10,e8a8 <__eqdf2+0x70>
    e868:	0281ffc4 	movi	r10,2047
    e86c:	1a800a26 	beq	r3,r10,e898 <__eqdf2+0x60>
    e870:	10c00226 	beq	r2,r3,e87c <__eqdf2+0x44>
    e874:	00800044 	movi	r2,1
    e878:	f800283a 	ret
    e87c:	4a3ffd1e 	bne	r9,r8,e874 <__alt_data_end+0xfc00e874>
    e880:	21bffc1e 	bne	r4,r6,e874 <__alt_data_end+0xfc00e874>
    e884:	29c00c26 	beq	r5,r7,e8b8 <__eqdf2+0x80>
    e888:	103ffa1e 	bne	r2,zero,e874 <__alt_data_end+0xfc00e874>
    e88c:	2244b03a 	or	r2,r4,r9
    e890:	1004c03a 	cmpne	r2,r2,zero
    e894:	f800283a 	ret
    e898:	3214b03a 	or	r10,r6,r8
    e89c:	503ff426 	beq	r10,zero,e870 <__alt_data_end+0xfc00e870>
    e8a0:	00800044 	movi	r2,1
    e8a4:	f800283a 	ret
    e8a8:	2254b03a 	or	r10,r4,r9
    e8ac:	503fee26 	beq	r10,zero,e868 <__alt_data_end+0xfc00e868>
    e8b0:	00800044 	movi	r2,1
    e8b4:	f800283a 	ret
    e8b8:	0005883a 	mov	r2,zero
    e8bc:	f800283a 	ret

0000e8c0 <__gedf2>:
    e8c0:	2804d53a 	srli	r2,r5,20
    e8c4:	3806d53a 	srli	r3,r7,20
    e8c8:	02000434 	movhi	r8,16
    e8cc:	423fffc4 	addi	r8,r8,-1
    e8d0:	1081ffcc 	andi	r2,r2,2047
    e8d4:	0241ffc4 	movi	r9,2047
    e8d8:	2a14703a 	and	r10,r5,r8
    e8dc:	18c1ffcc 	andi	r3,r3,2047
    e8e0:	3a10703a 	and	r8,r7,r8
    e8e4:	280ad7fa 	srli	r5,r5,31
    e8e8:	380ed7fa 	srli	r7,r7,31
    e8ec:	12401d26 	beq	r2,r9,e964 <__gedf2+0xa4>
    e8f0:	0241ffc4 	movi	r9,2047
    e8f4:	1a401226 	beq	r3,r9,e940 <__gedf2+0x80>
    e8f8:	1000081e 	bne	r2,zero,e91c <__gedf2+0x5c>
    e8fc:	2296b03a 	or	r11,r4,r10
    e900:	5813003a 	cmpeq	r9,r11,zero
    e904:	1800091e 	bne	r3,zero,e92c <__gedf2+0x6c>
    e908:	3218b03a 	or	r12,r6,r8
    e90c:	6000071e 	bne	r12,zero,e92c <__gedf2+0x6c>
    e910:	0005883a 	mov	r2,zero
    e914:	5800101e 	bne	r11,zero,e958 <__gedf2+0x98>
    e918:	f800283a 	ret
    e91c:	18000c1e 	bne	r3,zero,e950 <__gedf2+0x90>
    e920:	3212b03a 	or	r9,r6,r8
    e924:	48000c26 	beq	r9,zero,e958 <__gedf2+0x98>
    e928:	0013883a 	mov	r9,zero
    e92c:	39c03fcc 	andi	r7,r7,255
    e930:	48000826 	beq	r9,zero,e954 <__gedf2+0x94>
    e934:	38000926 	beq	r7,zero,e95c <__gedf2+0x9c>
    e938:	00800044 	movi	r2,1
    e93c:	f800283a 	ret
    e940:	3212b03a 	or	r9,r6,r8
    e944:	483fec26 	beq	r9,zero,e8f8 <__alt_data_end+0xfc00e8f8>
    e948:	00bfff84 	movi	r2,-2
    e94c:	f800283a 	ret
    e950:	39c03fcc 	andi	r7,r7,255
    e954:	29c00626 	beq	r5,r7,e970 <__gedf2+0xb0>
    e958:	283ff726 	beq	r5,zero,e938 <__alt_data_end+0xfc00e938>
    e95c:	00bfffc4 	movi	r2,-1
    e960:	f800283a 	ret
    e964:	2292b03a 	or	r9,r4,r10
    e968:	483fe126 	beq	r9,zero,e8f0 <__alt_data_end+0xfc00e8f0>
    e96c:	003ff606 	br	e948 <__alt_data_end+0xfc00e948>
    e970:	18bff916 	blt	r3,r2,e958 <__alt_data_end+0xfc00e958>
    e974:	10c00316 	blt	r2,r3,e984 <__gedf2+0xc4>
    e978:	42bff736 	bltu	r8,r10,e958 <__alt_data_end+0xfc00e958>
    e97c:	52000326 	beq	r10,r8,e98c <__gedf2+0xcc>
    e980:	5200042e 	bgeu	r10,r8,e994 <__gedf2+0xd4>
    e984:	283fec1e 	bne	r5,zero,e938 <__alt_data_end+0xfc00e938>
    e988:	003ff406 	br	e95c <__alt_data_end+0xfc00e95c>
    e98c:	313ff236 	bltu	r6,r4,e958 <__alt_data_end+0xfc00e958>
    e990:	21bffc36 	bltu	r4,r6,e984 <__alt_data_end+0xfc00e984>
    e994:	0005883a 	mov	r2,zero
    e998:	f800283a 	ret

0000e99c <__ledf2>:
    e99c:	2804d53a 	srli	r2,r5,20
    e9a0:	3810d53a 	srli	r8,r7,20
    e9a4:	00c00434 	movhi	r3,16
    e9a8:	18ffffc4 	addi	r3,r3,-1
    e9ac:	1081ffcc 	andi	r2,r2,2047
    e9b0:	0241ffc4 	movi	r9,2047
    e9b4:	28d4703a 	and	r10,r5,r3
    e9b8:	4201ffcc 	andi	r8,r8,2047
    e9bc:	38c6703a 	and	r3,r7,r3
    e9c0:	280ad7fa 	srli	r5,r5,31
    e9c4:	380ed7fa 	srli	r7,r7,31
    e9c8:	12401f26 	beq	r2,r9,ea48 <__ledf2+0xac>
    e9cc:	0241ffc4 	movi	r9,2047
    e9d0:	42401426 	beq	r8,r9,ea24 <__ledf2+0x88>
    e9d4:	1000091e 	bne	r2,zero,e9fc <__ledf2+0x60>
    e9d8:	2296b03a 	or	r11,r4,r10
    e9dc:	5813003a 	cmpeq	r9,r11,zero
    e9e0:	29403fcc 	andi	r5,r5,255
    e9e4:	40000a1e 	bne	r8,zero,ea10 <__ledf2+0x74>
    e9e8:	30d8b03a 	or	r12,r6,r3
    e9ec:	6000081e 	bne	r12,zero,ea10 <__ledf2+0x74>
    e9f0:	0005883a 	mov	r2,zero
    e9f4:	5800111e 	bne	r11,zero,ea3c <__ledf2+0xa0>
    e9f8:	f800283a 	ret
    e9fc:	29403fcc 	andi	r5,r5,255
    ea00:	40000c1e 	bne	r8,zero,ea34 <__ledf2+0x98>
    ea04:	30d2b03a 	or	r9,r6,r3
    ea08:	48000c26 	beq	r9,zero,ea3c <__ledf2+0xa0>
    ea0c:	0013883a 	mov	r9,zero
    ea10:	39c03fcc 	andi	r7,r7,255
    ea14:	48000826 	beq	r9,zero,ea38 <__ledf2+0x9c>
    ea18:	38001126 	beq	r7,zero,ea60 <__ledf2+0xc4>
    ea1c:	00800044 	movi	r2,1
    ea20:	f800283a 	ret
    ea24:	30d2b03a 	or	r9,r6,r3
    ea28:	483fea26 	beq	r9,zero,e9d4 <__alt_data_end+0xfc00e9d4>
    ea2c:	00800084 	movi	r2,2
    ea30:	f800283a 	ret
    ea34:	39c03fcc 	andi	r7,r7,255
    ea38:	39400726 	beq	r7,r5,ea58 <__ledf2+0xbc>
    ea3c:	2800081e 	bne	r5,zero,ea60 <__ledf2+0xc4>
    ea40:	00800044 	movi	r2,1
    ea44:	f800283a 	ret
    ea48:	2292b03a 	or	r9,r4,r10
    ea4c:	483fdf26 	beq	r9,zero,e9cc <__alt_data_end+0xfc00e9cc>
    ea50:	00800084 	movi	r2,2
    ea54:	f800283a 	ret
    ea58:	4080030e 	bge	r8,r2,ea68 <__ledf2+0xcc>
    ea5c:	383fef26 	beq	r7,zero,ea1c <__alt_data_end+0xfc00ea1c>
    ea60:	00bfffc4 	movi	r2,-1
    ea64:	f800283a 	ret
    ea68:	123feb16 	blt	r2,r8,ea18 <__alt_data_end+0xfc00ea18>
    ea6c:	1abff336 	bltu	r3,r10,ea3c <__alt_data_end+0xfc00ea3c>
    ea70:	50c00326 	beq	r10,r3,ea80 <__ledf2+0xe4>
    ea74:	50c0042e 	bgeu	r10,r3,ea88 <__ledf2+0xec>
    ea78:	283fe81e 	bne	r5,zero,ea1c <__alt_data_end+0xfc00ea1c>
    ea7c:	003ff806 	br	ea60 <__alt_data_end+0xfc00ea60>
    ea80:	313fee36 	bltu	r6,r4,ea3c <__alt_data_end+0xfc00ea3c>
    ea84:	21bffc36 	bltu	r4,r6,ea78 <__alt_data_end+0xfc00ea78>
    ea88:	0005883a 	mov	r2,zero
    ea8c:	f800283a 	ret

0000ea90 <__muldf3>:
    ea90:	deffee04 	addi	sp,sp,-72
    ea94:	dd000c15 	stw	r20,48(sp)
    ea98:	2828d53a 	srli	r20,r5,20
    ea9c:	ddc00f15 	stw	r23,60(sp)
    eaa0:	282ed7fa 	srli	r23,r5,31
    eaa4:	dc000815 	stw	r16,32(sp)
    eaa8:	04000434 	movhi	r16,16
    eaac:	dcc00b15 	stw	r19,44(sp)
    eab0:	843fffc4 	addi	r16,r16,-1
    eab4:	dfc01115 	stw	ra,68(sp)
    eab8:	df001015 	stw	fp,64(sp)
    eabc:	dd800e15 	stw	r22,56(sp)
    eac0:	dd400d15 	stw	r21,52(sp)
    eac4:	dc800a15 	stw	r18,40(sp)
    eac8:	dc400915 	stw	r17,36(sp)
    eacc:	a501ffcc 	andi	r20,r20,2047
    ead0:	2c20703a 	and	r16,r5,r16
    ead4:	b827883a 	mov	r19,r23
    ead8:	ba403fcc 	andi	r9,r23,255
    eadc:	a0006026 	beq	r20,zero,ec60 <__muldf3+0x1d0>
    eae0:	0081ffc4 	movi	r2,2047
    eae4:	202d883a 	mov	r22,r4
    eae8:	a0803626 	beq	r20,r2,ebc4 <__muldf3+0x134>
    eaec:	84000434 	orhi	r16,r16,16
    eaf0:	200ad77a 	srli	r5,r4,29
    eaf4:	800490fa 	slli	r2,r16,3
    eaf8:	202c90fa 	slli	r22,r4,3
    eafc:	a53f0044 	addi	r20,r20,-1023
    eb00:	28a0b03a 	or	r16,r5,r2
    eb04:	002b883a 	mov	r21,zero
    eb08:	000b883a 	mov	r5,zero
    eb0c:	3804d53a 	srli	r2,r7,20
    eb10:	3838d7fa 	srli	fp,r7,31
    eb14:	04400434 	movhi	r17,16
    eb18:	8c7fffc4 	addi	r17,r17,-1
    eb1c:	1081ffcc 	andi	r2,r2,2047
    eb20:	3025883a 	mov	r18,r6
    eb24:	3c62703a 	and	r17,r7,r17
    eb28:	e2803fcc 	andi	r10,fp,255
    eb2c:	10006d26 	beq	r2,zero,ece4 <__muldf3+0x254>
    eb30:	00c1ffc4 	movi	r3,2047
    eb34:	10c06526 	beq	r2,r3,eccc <__muldf3+0x23c>
    eb38:	8c400434 	orhi	r17,r17,16
    eb3c:	300ed77a 	srli	r7,r6,29
    eb40:	880690fa 	slli	r3,r17,3
    eb44:	302490fa 	slli	r18,r6,3
    eb48:	10bf0044 	addi	r2,r2,-1023
    eb4c:	38e2b03a 	or	r17,r7,r3
    eb50:	000f883a 	mov	r7,zero
    eb54:	a087883a 	add	r3,r20,r2
    eb58:	010003c4 	movi	r4,15
    eb5c:	3d44b03a 	or	r2,r7,r21
    eb60:	e5ccf03a 	xor	r6,fp,r23
    eb64:	1a000044 	addi	r8,r3,1
    eb68:	20809b36 	bltu	r4,r2,edd8 <__muldf3+0x348>
    eb6c:	100490ba 	slli	r2,r2,2
    eb70:	01000074 	movhi	r4,1
    eb74:	213ae104 	addi	r4,r4,-5244
    eb78:	1105883a 	add	r2,r2,r4
    eb7c:	10800017 	ldw	r2,0(r2)
    eb80:	1000683a 	jmp	r2
    eb84:	0000edd8 	cmpnei	zero,zero,951
    eb88:	0000ebe4 	muli	zero,zero,943
    eb8c:	0000ebe4 	muli	zero,zero,943
    eb90:	0000ebe0 	cmpeqi	zero,zero,943
    eb94:	0000edb4 	movhi	zero,950
    eb98:	0000edb4 	movhi	zero,950
    eb9c:	0000ed9c 	xori	zero,zero,950
    eba0:	0000ebe0 	cmpeqi	zero,zero,943
    eba4:	0000edb4 	movhi	zero,950
    eba8:	0000ed9c 	xori	zero,zero,950
    ebac:	0000edb4 	movhi	zero,950
    ebb0:	0000ebe0 	cmpeqi	zero,zero,943
    ebb4:	0000edc4 	movi	zero,951
    ebb8:	0000edc4 	movi	zero,951
    ebbc:	0000edc4 	movi	zero,951
    ebc0:	0000f124 	muli	zero,zero,964
    ebc4:	2404b03a 	or	r2,r4,r16
    ebc8:	1000711e 	bne	r2,zero,ed90 <__muldf3+0x300>
    ebcc:	05400204 	movi	r21,8
    ebd0:	0021883a 	mov	r16,zero
    ebd4:	002d883a 	mov	r22,zero
    ebd8:	01400084 	movi	r5,2
    ebdc:	003fcb06 	br	eb0c <__alt_data_end+0xfc00eb0c>
    ebe0:	500d883a 	mov	r6,r10
    ebe4:	00800084 	movi	r2,2
    ebe8:	38805926 	beq	r7,r2,ed50 <__muldf3+0x2c0>
    ebec:	008000c4 	movi	r2,3
    ebf0:	3881bb26 	beq	r7,r2,f2e0 <__muldf3+0x850>
    ebf4:	00800044 	movi	r2,1
    ebf8:	3881961e 	bne	r7,r2,f254 <__muldf3+0x7c4>
    ebfc:	3027883a 	mov	r19,r6
    ec00:	0005883a 	mov	r2,zero
    ec04:	0021883a 	mov	r16,zero
    ec08:	002d883a 	mov	r22,zero
    ec0c:	1004953a 	slli	r2,r2,20
    ec10:	98c03fcc 	andi	r3,r19,255
    ec14:	04400434 	movhi	r17,16
    ec18:	8c7fffc4 	addi	r17,r17,-1
    ec1c:	180697fa 	slli	r3,r3,31
    ec20:	8460703a 	and	r16,r16,r17
    ec24:	80a0b03a 	or	r16,r16,r2
    ec28:	80c6b03a 	or	r3,r16,r3
    ec2c:	b005883a 	mov	r2,r22
    ec30:	dfc01117 	ldw	ra,68(sp)
    ec34:	df001017 	ldw	fp,64(sp)
    ec38:	ddc00f17 	ldw	r23,60(sp)
    ec3c:	dd800e17 	ldw	r22,56(sp)
    ec40:	dd400d17 	ldw	r21,52(sp)
    ec44:	dd000c17 	ldw	r20,48(sp)
    ec48:	dcc00b17 	ldw	r19,44(sp)
    ec4c:	dc800a17 	ldw	r18,40(sp)
    ec50:	dc400917 	ldw	r17,36(sp)
    ec54:	dc000817 	ldw	r16,32(sp)
    ec58:	dec01204 	addi	sp,sp,72
    ec5c:	f800283a 	ret
    ec60:	2404b03a 	or	r2,r4,r16
    ec64:	202b883a 	mov	r21,r4
    ec68:	10004426 	beq	r2,zero,ed7c <__muldf3+0x2ec>
    ec6c:	80015126 	beq	r16,zero,f1b4 <__muldf3+0x724>
    ec70:	8009883a 	mov	r4,r16
    ec74:	d9800715 	stw	r6,28(sp)
    ec78:	d9c00215 	stw	r7,8(sp)
    ec7c:	da400415 	stw	r9,16(sp)
    ec80:	000fdfc0 	call	fdfc <__clzsi2>
    ec84:	d9800717 	ldw	r6,28(sp)
    ec88:	d9c00217 	ldw	r7,8(sp)
    ec8c:	da400417 	ldw	r9,16(sp)
    ec90:	113ffd44 	addi	r4,r2,-11
    ec94:	00c00704 	movi	r3,28
    ec98:	19014216 	blt	r3,r4,f1a4 <__muldf3+0x714>
    ec9c:	00c00744 	movi	r3,29
    eca0:	15bffe04 	addi	r22,r2,-8
    eca4:	1907c83a 	sub	r3,r3,r4
    eca8:	85a0983a 	sll	r16,r16,r22
    ecac:	a8c6d83a 	srl	r3,r21,r3
    ecb0:	adac983a 	sll	r22,r21,r22
    ecb4:	1c20b03a 	or	r16,r3,r16
    ecb8:	1080fcc4 	addi	r2,r2,1011
    ecbc:	00a9c83a 	sub	r20,zero,r2
    ecc0:	002b883a 	mov	r21,zero
    ecc4:	000b883a 	mov	r5,zero
    ecc8:	003f9006 	br	eb0c <__alt_data_end+0xfc00eb0c>
    eccc:	3446b03a 	or	r3,r6,r17
    ecd0:	1800281e 	bne	r3,zero,ed74 <__muldf3+0x2e4>
    ecd4:	0023883a 	mov	r17,zero
    ecd8:	0025883a 	mov	r18,zero
    ecdc:	01c00084 	movi	r7,2
    ece0:	003f9c06 	br	eb54 <__alt_data_end+0xfc00eb54>
    ece4:	3446b03a 	or	r3,r6,r17
    ece8:	18001e26 	beq	r3,zero,ed64 <__muldf3+0x2d4>
    ecec:	88012126 	beq	r17,zero,f174 <__muldf3+0x6e4>
    ecf0:	8809883a 	mov	r4,r17
    ecf4:	d9400215 	stw	r5,8(sp)
    ecf8:	d9800715 	stw	r6,28(sp)
    ecfc:	da400415 	stw	r9,16(sp)
    ed00:	da800315 	stw	r10,12(sp)
    ed04:	000fdfc0 	call	fdfc <__clzsi2>
    ed08:	d9400217 	ldw	r5,8(sp)
    ed0c:	d9800717 	ldw	r6,28(sp)
    ed10:	da400417 	ldw	r9,16(sp)
    ed14:	da800317 	ldw	r10,12(sp)
    ed18:	113ffd44 	addi	r4,r2,-11
    ed1c:	00c00704 	movi	r3,28
    ed20:	19011016 	blt	r3,r4,f164 <__muldf3+0x6d4>
    ed24:	00c00744 	movi	r3,29
    ed28:	14bffe04 	addi	r18,r2,-8
    ed2c:	1907c83a 	sub	r3,r3,r4
    ed30:	8ca2983a 	sll	r17,r17,r18
    ed34:	30c6d83a 	srl	r3,r6,r3
    ed38:	34a4983a 	sll	r18,r6,r18
    ed3c:	1c62b03a 	or	r17,r3,r17
    ed40:	1080fcc4 	addi	r2,r2,1011
    ed44:	0085c83a 	sub	r2,zero,r2
    ed48:	000f883a 	mov	r7,zero
    ed4c:	003f8106 	br	eb54 <__alt_data_end+0xfc00eb54>
    ed50:	3027883a 	mov	r19,r6
    ed54:	0081ffc4 	movi	r2,2047
    ed58:	0021883a 	mov	r16,zero
    ed5c:	002d883a 	mov	r22,zero
    ed60:	003faa06 	br	ec0c <__alt_data_end+0xfc00ec0c>
    ed64:	0023883a 	mov	r17,zero
    ed68:	0025883a 	mov	r18,zero
    ed6c:	01c00044 	movi	r7,1
    ed70:	003f7806 	br	eb54 <__alt_data_end+0xfc00eb54>
    ed74:	01c000c4 	movi	r7,3
    ed78:	003f7606 	br	eb54 <__alt_data_end+0xfc00eb54>
    ed7c:	05400104 	movi	r21,4
    ed80:	0021883a 	mov	r16,zero
    ed84:	002d883a 	mov	r22,zero
    ed88:	01400044 	movi	r5,1
    ed8c:	003f5f06 	br	eb0c <__alt_data_end+0xfc00eb0c>
    ed90:	05400304 	movi	r21,12
    ed94:	014000c4 	movi	r5,3
    ed98:	003f5c06 	br	eb0c <__alt_data_end+0xfc00eb0c>
    ed9c:	04000434 	movhi	r16,16
    eda0:	0027883a 	mov	r19,zero
    eda4:	843fffc4 	addi	r16,r16,-1
    eda8:	05bfffc4 	movi	r22,-1
    edac:	0081ffc4 	movi	r2,2047
    edb0:	003f9606 	br	ec0c <__alt_data_end+0xfc00ec0c>
    edb4:	8023883a 	mov	r17,r16
    edb8:	b025883a 	mov	r18,r22
    edbc:	280f883a 	mov	r7,r5
    edc0:	003f8806 	br	ebe4 <__alt_data_end+0xfc00ebe4>
    edc4:	8023883a 	mov	r17,r16
    edc8:	b025883a 	mov	r18,r22
    edcc:	480d883a 	mov	r6,r9
    edd0:	280f883a 	mov	r7,r5
    edd4:	003f8306 	br	ebe4 <__alt_data_end+0xfc00ebe4>
    edd8:	b026d43a 	srli	r19,r22,16
    eddc:	902ed43a 	srli	r23,r18,16
    ede0:	b5bfffcc 	andi	r22,r22,65535
    ede4:	94bfffcc 	andi	r18,r18,65535
    ede8:	b00b883a 	mov	r5,r22
    edec:	9009883a 	mov	r4,r18
    edf0:	d8c00515 	stw	r3,20(sp)
    edf4:	d9800715 	stw	r6,28(sp)
    edf8:	da000615 	stw	r8,24(sp)
    edfc:	00030d40 	call	30d4 <__mulsi3>
    ee00:	980b883a 	mov	r5,r19
    ee04:	9009883a 	mov	r4,r18
    ee08:	1029883a 	mov	r20,r2
    ee0c:	00030d40 	call	30d4 <__mulsi3>
    ee10:	b80b883a 	mov	r5,r23
    ee14:	9809883a 	mov	r4,r19
    ee18:	102b883a 	mov	r21,r2
    ee1c:	00030d40 	call	30d4 <__mulsi3>
    ee20:	b809883a 	mov	r4,r23
    ee24:	b00b883a 	mov	r5,r22
    ee28:	1039883a 	mov	fp,r2
    ee2c:	00030d40 	call	30d4 <__mulsi3>
    ee30:	a008d43a 	srli	r4,r20,16
    ee34:	1545883a 	add	r2,r2,r21
    ee38:	d8c00517 	ldw	r3,20(sp)
    ee3c:	2085883a 	add	r2,r4,r2
    ee40:	d9800717 	ldw	r6,28(sp)
    ee44:	da000617 	ldw	r8,24(sp)
    ee48:	1540022e 	bgeu	r2,r21,ee54 <__muldf3+0x3c4>
    ee4c:	01000074 	movhi	r4,1
    ee50:	e139883a 	add	fp,fp,r4
    ee54:	100e943a 	slli	r7,r2,16
    ee58:	1004d43a 	srli	r2,r2,16
    ee5c:	882ad43a 	srli	r21,r17,16
    ee60:	a53fffcc 	andi	r20,r20,65535
    ee64:	8c7fffcc 	andi	r17,r17,65535
    ee68:	3d29883a 	add	r20,r7,r20
    ee6c:	b00b883a 	mov	r5,r22
    ee70:	8809883a 	mov	r4,r17
    ee74:	d8c00515 	stw	r3,20(sp)
    ee78:	d9800715 	stw	r6,28(sp)
    ee7c:	da000615 	stw	r8,24(sp)
    ee80:	dd000115 	stw	r20,4(sp)
    ee84:	d8800015 	stw	r2,0(sp)
    ee88:	00030d40 	call	30d4 <__mulsi3>
    ee8c:	980b883a 	mov	r5,r19
    ee90:	8809883a 	mov	r4,r17
    ee94:	d8800215 	stw	r2,8(sp)
    ee98:	00030d40 	call	30d4 <__mulsi3>
    ee9c:	9809883a 	mov	r4,r19
    eea0:	a80b883a 	mov	r5,r21
    eea4:	1029883a 	mov	r20,r2
    eea8:	00030d40 	call	30d4 <__mulsi3>
    eeac:	b00b883a 	mov	r5,r22
    eeb0:	a809883a 	mov	r4,r21
    eeb4:	d8800415 	stw	r2,16(sp)
    eeb8:	00030d40 	call	30d4 <__mulsi3>
    eebc:	d9c00217 	ldw	r7,8(sp)
    eec0:	1505883a 	add	r2,r2,r20
    eec4:	d8c00517 	ldw	r3,20(sp)
    eec8:	3826d43a 	srli	r19,r7,16
    eecc:	d9800717 	ldw	r6,28(sp)
    eed0:	da000617 	ldw	r8,24(sp)
    eed4:	9885883a 	add	r2,r19,r2
    eed8:	da400417 	ldw	r9,16(sp)
    eedc:	1500022e 	bgeu	r2,r20,eee8 <__muldf3+0x458>
    eee0:	01000074 	movhi	r4,1
    eee4:	4913883a 	add	r9,r9,r4
    eee8:	1028d43a 	srli	r20,r2,16
    eeec:	1004943a 	slli	r2,r2,16
    eef0:	802cd43a 	srli	r22,r16,16
    eef4:	843fffcc 	andi	r16,r16,65535
    eef8:	3cffffcc 	andi	r19,r7,65535
    eefc:	9009883a 	mov	r4,r18
    ef00:	800b883a 	mov	r5,r16
    ef04:	a269883a 	add	r20,r20,r9
    ef08:	d8c00515 	stw	r3,20(sp)
    ef0c:	d9800715 	stw	r6,28(sp)
    ef10:	da000615 	stw	r8,24(sp)
    ef14:	14e7883a 	add	r19,r2,r19
    ef18:	00030d40 	call	30d4 <__mulsi3>
    ef1c:	9009883a 	mov	r4,r18
    ef20:	b00b883a 	mov	r5,r22
    ef24:	d8800315 	stw	r2,12(sp)
    ef28:	00030d40 	call	30d4 <__mulsi3>
    ef2c:	b809883a 	mov	r4,r23
    ef30:	b00b883a 	mov	r5,r22
    ef34:	d8800215 	stw	r2,8(sp)
    ef38:	00030d40 	call	30d4 <__mulsi3>
    ef3c:	b80b883a 	mov	r5,r23
    ef40:	8009883a 	mov	r4,r16
    ef44:	d8800415 	stw	r2,16(sp)
    ef48:	00030d40 	call	30d4 <__mulsi3>
    ef4c:	da800317 	ldw	r10,12(sp)
    ef50:	d9c00217 	ldw	r7,8(sp)
    ef54:	d9000017 	ldw	r4,0(sp)
    ef58:	502ed43a 	srli	r23,r10,16
    ef5c:	11c5883a 	add	r2,r2,r7
    ef60:	24e5883a 	add	r18,r4,r19
    ef64:	b885883a 	add	r2,r23,r2
    ef68:	d8c00517 	ldw	r3,20(sp)
    ef6c:	d9800717 	ldw	r6,28(sp)
    ef70:	da000617 	ldw	r8,24(sp)
    ef74:	da400417 	ldw	r9,16(sp)
    ef78:	11c0022e 	bgeu	r2,r7,ef84 <__muldf3+0x4f4>
    ef7c:	01000074 	movhi	r4,1
    ef80:	4913883a 	add	r9,r9,r4
    ef84:	100ed43a 	srli	r7,r2,16
    ef88:	1004943a 	slli	r2,r2,16
    ef8c:	55ffffcc 	andi	r23,r10,65535
    ef90:	3a53883a 	add	r9,r7,r9
    ef94:	8809883a 	mov	r4,r17
    ef98:	800b883a 	mov	r5,r16
    ef9c:	d8c00515 	stw	r3,20(sp)
    efa0:	d9800715 	stw	r6,28(sp)
    efa4:	da000615 	stw	r8,24(sp)
    efa8:	da400415 	stw	r9,16(sp)
    efac:	15ef883a 	add	r23,r2,r23
    efb0:	00030d40 	call	30d4 <__mulsi3>
    efb4:	8809883a 	mov	r4,r17
    efb8:	b00b883a 	mov	r5,r22
    efbc:	d8800215 	stw	r2,8(sp)
    efc0:	00030d40 	call	30d4 <__mulsi3>
    efc4:	b00b883a 	mov	r5,r22
    efc8:	a809883a 	mov	r4,r21
    efcc:	d8800315 	stw	r2,12(sp)
    efd0:	00030d40 	call	30d4 <__mulsi3>
    efd4:	8009883a 	mov	r4,r16
    efd8:	a80b883a 	mov	r5,r21
    efdc:	1023883a 	mov	r17,r2
    efe0:	00030d40 	call	30d4 <__mulsi3>
    efe4:	d9c00217 	ldw	r7,8(sp)
    efe8:	da800317 	ldw	r10,12(sp)
    efec:	d8c00517 	ldw	r3,20(sp)
    eff0:	3808d43a 	srli	r4,r7,16
    eff4:	1285883a 	add	r2,r2,r10
    eff8:	d9800717 	ldw	r6,28(sp)
    effc:	2085883a 	add	r2,r4,r2
    f000:	da000617 	ldw	r8,24(sp)
    f004:	da400417 	ldw	r9,16(sp)
    f008:	1280022e 	bgeu	r2,r10,f014 <__muldf3+0x584>
    f00c:	01000074 	movhi	r4,1
    f010:	8923883a 	add	r17,r17,r4
    f014:	1008943a 	slli	r4,r2,16
    f018:	39ffffcc 	andi	r7,r7,65535
    f01c:	e4b9883a 	add	fp,fp,r18
    f020:	21cf883a 	add	r7,r4,r7
    f024:	e4e7803a 	cmpltu	r19,fp,r19
    f028:	3d0f883a 	add	r7,r7,r20
    f02c:	bf39883a 	add	fp,r23,fp
    f030:	99c9883a 	add	r4,r19,r7
    f034:	e5ef803a 	cmpltu	r23,fp,r23
    f038:	490b883a 	add	r5,r9,r4
    f03c:	1004d43a 	srli	r2,r2,16
    f040:	b965883a 	add	r18,r23,r5
    f044:	24c9803a 	cmpltu	r4,r4,r19
    f048:	3d29803a 	cmpltu	r20,r7,r20
    f04c:	a128b03a 	or	r20,r20,r4
    f050:	95ef803a 	cmpltu	r23,r18,r23
    f054:	2a53803a 	cmpltu	r9,r5,r9
    f058:	a0a9883a 	add	r20,r20,r2
    f05c:	4deeb03a 	or	r23,r9,r23
    f060:	a5ef883a 	add	r23,r20,r23
    f064:	bc63883a 	add	r17,r23,r17
    f068:	e004927a 	slli	r2,fp,9
    f06c:	d9000117 	ldw	r4,4(sp)
    f070:	882e927a 	slli	r23,r17,9
    f074:	9022d5fa 	srli	r17,r18,23
    f078:	e038d5fa 	srli	fp,fp,23
    f07c:	1104b03a 	or	r2,r2,r4
    f080:	9024927a 	slli	r18,r18,9
    f084:	1004c03a 	cmpne	r2,r2,zero
    f088:	bc62b03a 	or	r17,r23,r17
    f08c:	1738b03a 	or	fp,r2,fp
    f090:	8880402c 	andhi	r2,r17,256
    f094:	e4a4b03a 	or	r18,fp,r18
    f098:	10000726 	beq	r2,zero,f0b8 <__muldf3+0x628>
    f09c:	9006d07a 	srli	r3,r18,1
    f0a0:	880497fa 	slli	r2,r17,31
    f0a4:	9480004c 	andi	r18,r18,1
    f0a8:	8822d07a 	srli	r17,r17,1
    f0ac:	1ca4b03a 	or	r18,r3,r18
    f0b0:	14a4b03a 	or	r18,r2,r18
    f0b4:	4007883a 	mov	r3,r8
    f0b8:	1880ffc4 	addi	r2,r3,1023
    f0bc:	0080460e 	bge	zero,r2,f1d8 <__muldf3+0x748>
    f0c0:	910001cc 	andi	r4,r18,7
    f0c4:	20000726 	beq	r4,zero,f0e4 <__muldf3+0x654>
    f0c8:	910003cc 	andi	r4,r18,15
    f0cc:	01400104 	movi	r5,4
    f0d0:	21400426 	beq	r4,r5,f0e4 <__muldf3+0x654>
    f0d4:	9149883a 	add	r4,r18,r5
    f0d8:	24a5803a 	cmpltu	r18,r4,r18
    f0dc:	8ca3883a 	add	r17,r17,r18
    f0e0:	2025883a 	mov	r18,r4
    f0e4:	8900402c 	andhi	r4,r17,256
    f0e8:	20000426 	beq	r4,zero,f0fc <__muldf3+0x66c>
    f0ec:	18810004 	addi	r2,r3,1024
    f0f0:	00ffc034 	movhi	r3,65280
    f0f4:	18ffffc4 	addi	r3,r3,-1
    f0f8:	88e2703a 	and	r17,r17,r3
    f0fc:	00c1ff84 	movi	r3,2046
    f100:	18bf1316 	blt	r3,r2,ed50 <__alt_data_end+0xfc00ed50>
    f104:	882c977a 	slli	r22,r17,29
    f108:	9024d0fa 	srli	r18,r18,3
    f10c:	8822927a 	slli	r17,r17,9
    f110:	1081ffcc 	andi	r2,r2,2047
    f114:	b4acb03a 	or	r22,r22,r18
    f118:	8820d33a 	srli	r16,r17,12
    f11c:	3027883a 	mov	r19,r6
    f120:	003eba06 	br	ec0c <__alt_data_end+0xfc00ec0c>
    f124:	8080022c 	andhi	r2,r16,8
    f128:	10000926 	beq	r2,zero,f150 <__muldf3+0x6c0>
    f12c:	8880022c 	andhi	r2,r17,8
    f130:	1000071e 	bne	r2,zero,f150 <__muldf3+0x6c0>
    f134:	00800434 	movhi	r2,16
    f138:	8c000234 	orhi	r16,r17,8
    f13c:	10bfffc4 	addi	r2,r2,-1
    f140:	e027883a 	mov	r19,fp
    f144:	80a0703a 	and	r16,r16,r2
    f148:	902d883a 	mov	r22,r18
    f14c:	003f1706 	br	edac <__alt_data_end+0xfc00edac>
    f150:	00800434 	movhi	r2,16
    f154:	84000234 	orhi	r16,r16,8
    f158:	10bfffc4 	addi	r2,r2,-1
    f15c:	80a0703a 	and	r16,r16,r2
    f160:	003f1206 	br	edac <__alt_data_end+0xfc00edac>
    f164:	147ff604 	addi	r17,r2,-40
    f168:	3462983a 	sll	r17,r6,r17
    f16c:	0025883a 	mov	r18,zero
    f170:	003ef306 	br	ed40 <__alt_data_end+0xfc00ed40>
    f174:	3009883a 	mov	r4,r6
    f178:	d9400215 	stw	r5,8(sp)
    f17c:	d9800715 	stw	r6,28(sp)
    f180:	da400415 	stw	r9,16(sp)
    f184:	da800315 	stw	r10,12(sp)
    f188:	000fdfc0 	call	fdfc <__clzsi2>
    f18c:	10800804 	addi	r2,r2,32
    f190:	da800317 	ldw	r10,12(sp)
    f194:	da400417 	ldw	r9,16(sp)
    f198:	d9800717 	ldw	r6,28(sp)
    f19c:	d9400217 	ldw	r5,8(sp)
    f1a0:	003edd06 	br	ed18 <__alt_data_end+0xfc00ed18>
    f1a4:	143ff604 	addi	r16,r2,-40
    f1a8:	ac20983a 	sll	r16,r21,r16
    f1ac:	002d883a 	mov	r22,zero
    f1b0:	003ec106 	br	ecb8 <__alt_data_end+0xfc00ecb8>
    f1b4:	d9800715 	stw	r6,28(sp)
    f1b8:	d9c00215 	stw	r7,8(sp)
    f1bc:	da400415 	stw	r9,16(sp)
    f1c0:	000fdfc0 	call	fdfc <__clzsi2>
    f1c4:	10800804 	addi	r2,r2,32
    f1c8:	da400417 	ldw	r9,16(sp)
    f1cc:	d9c00217 	ldw	r7,8(sp)
    f1d0:	d9800717 	ldw	r6,28(sp)
    f1d4:	003eae06 	br	ec90 <__alt_data_end+0xfc00ec90>
    f1d8:	00c00044 	movi	r3,1
    f1dc:	1887c83a 	sub	r3,r3,r2
    f1e0:	01000e04 	movi	r4,56
    f1e4:	20fe8516 	blt	r4,r3,ebfc <__alt_data_end+0xfc00ebfc>
    f1e8:	010007c4 	movi	r4,31
    f1ec:	20c01b16 	blt	r4,r3,f25c <__muldf3+0x7cc>
    f1f0:	00800804 	movi	r2,32
    f1f4:	10c5c83a 	sub	r2,r2,r3
    f1f8:	888a983a 	sll	r5,r17,r2
    f1fc:	90c8d83a 	srl	r4,r18,r3
    f200:	9084983a 	sll	r2,r18,r2
    f204:	88e2d83a 	srl	r17,r17,r3
    f208:	2906b03a 	or	r3,r5,r4
    f20c:	1004c03a 	cmpne	r2,r2,zero
    f210:	1886b03a 	or	r3,r3,r2
    f214:	188001cc 	andi	r2,r3,7
    f218:	10000726 	beq	r2,zero,f238 <__muldf3+0x7a8>
    f21c:	188003cc 	andi	r2,r3,15
    f220:	01000104 	movi	r4,4
    f224:	11000426 	beq	r2,r4,f238 <__muldf3+0x7a8>
    f228:	1805883a 	mov	r2,r3
    f22c:	10c00104 	addi	r3,r2,4
    f230:	1885803a 	cmpltu	r2,r3,r2
    f234:	88a3883a 	add	r17,r17,r2
    f238:	8880202c 	andhi	r2,r17,128
    f23c:	10001c26 	beq	r2,zero,f2b0 <__muldf3+0x820>
    f240:	3027883a 	mov	r19,r6
    f244:	00800044 	movi	r2,1
    f248:	0021883a 	mov	r16,zero
    f24c:	002d883a 	mov	r22,zero
    f250:	003e6e06 	br	ec0c <__alt_data_end+0xfc00ec0c>
    f254:	4007883a 	mov	r3,r8
    f258:	003f9706 	br	f0b8 <__alt_data_end+0xfc00f0b8>
    f25c:	017ff844 	movi	r5,-31
    f260:	2885c83a 	sub	r2,r5,r2
    f264:	888ad83a 	srl	r5,r17,r2
    f268:	00800804 	movi	r2,32
    f26c:	18801a26 	beq	r3,r2,f2d8 <__muldf3+0x848>
    f270:	01001004 	movi	r4,64
    f274:	20c7c83a 	sub	r3,r4,r3
    f278:	88e2983a 	sll	r17,r17,r3
    f27c:	8ca4b03a 	or	r18,r17,r18
    f280:	9004c03a 	cmpne	r2,r18,zero
    f284:	2884b03a 	or	r2,r5,r2
    f288:	144001cc 	andi	r17,r2,7
    f28c:	88000d1e 	bne	r17,zero,f2c4 <__muldf3+0x834>
    f290:	0021883a 	mov	r16,zero
    f294:	102cd0fa 	srli	r22,r2,3
    f298:	3027883a 	mov	r19,r6
    f29c:	0005883a 	mov	r2,zero
    f2a0:	b46cb03a 	or	r22,r22,r17
    f2a4:	003e5906 	br	ec0c <__alt_data_end+0xfc00ec0c>
    f2a8:	1007883a 	mov	r3,r2
    f2ac:	0023883a 	mov	r17,zero
    f2b0:	8820927a 	slli	r16,r17,9
    f2b4:	1805883a 	mov	r2,r3
    f2b8:	8822977a 	slli	r17,r17,29
    f2bc:	8020d33a 	srli	r16,r16,12
    f2c0:	003ff406 	br	f294 <__alt_data_end+0xfc00f294>
    f2c4:	10c003cc 	andi	r3,r2,15
    f2c8:	01000104 	movi	r4,4
    f2cc:	193ff626 	beq	r3,r4,f2a8 <__alt_data_end+0xfc00f2a8>
    f2d0:	0023883a 	mov	r17,zero
    f2d4:	003fd506 	br	f22c <__alt_data_end+0xfc00f22c>
    f2d8:	0023883a 	mov	r17,zero
    f2dc:	003fe706 	br	f27c <__alt_data_end+0xfc00f27c>
    f2e0:	00800434 	movhi	r2,16
    f2e4:	8c000234 	orhi	r16,r17,8
    f2e8:	10bfffc4 	addi	r2,r2,-1
    f2ec:	3027883a 	mov	r19,r6
    f2f0:	80a0703a 	and	r16,r16,r2
    f2f4:	902d883a 	mov	r22,r18
    f2f8:	003eac06 	br	edac <__alt_data_end+0xfc00edac>

0000f2fc <__subdf3>:
    f2fc:	02000434 	movhi	r8,16
    f300:	423fffc4 	addi	r8,r8,-1
    f304:	defffb04 	addi	sp,sp,-20
    f308:	2a14703a 	and	r10,r5,r8
    f30c:	3812d53a 	srli	r9,r7,20
    f310:	3a10703a 	and	r8,r7,r8
    f314:	2006d77a 	srli	r3,r4,29
    f318:	3004d77a 	srli	r2,r6,29
    f31c:	dc000015 	stw	r16,0(sp)
    f320:	501490fa 	slli	r10,r10,3
    f324:	2820d53a 	srli	r16,r5,20
    f328:	401090fa 	slli	r8,r8,3
    f32c:	dc800215 	stw	r18,8(sp)
    f330:	dc400115 	stw	r17,4(sp)
    f334:	dfc00415 	stw	ra,16(sp)
    f338:	202290fa 	slli	r17,r4,3
    f33c:	dcc00315 	stw	r19,12(sp)
    f340:	4a41ffcc 	andi	r9,r9,2047
    f344:	0101ffc4 	movi	r4,2047
    f348:	2824d7fa 	srli	r18,r5,31
    f34c:	8401ffcc 	andi	r16,r16,2047
    f350:	50c6b03a 	or	r3,r10,r3
    f354:	380ed7fa 	srli	r7,r7,31
    f358:	408ab03a 	or	r5,r8,r2
    f35c:	300c90fa 	slli	r6,r6,3
    f360:	49009626 	beq	r9,r4,f5bc <__subdf3+0x2c0>
    f364:	39c0005c 	xori	r7,r7,1
    f368:	8245c83a 	sub	r2,r16,r9
    f36c:	3c807426 	beq	r7,r18,f540 <__subdf3+0x244>
    f370:	0080af0e 	bge	zero,r2,f630 <__subdf3+0x334>
    f374:	48002a1e 	bne	r9,zero,f420 <__subdf3+0x124>
    f378:	2988b03a 	or	r4,r5,r6
    f37c:	20009a1e 	bne	r4,zero,f5e8 <__subdf3+0x2ec>
    f380:	888001cc 	andi	r2,r17,7
    f384:	10000726 	beq	r2,zero,f3a4 <__subdf3+0xa8>
    f388:	888003cc 	andi	r2,r17,15
    f38c:	01000104 	movi	r4,4
    f390:	11000426 	beq	r2,r4,f3a4 <__subdf3+0xa8>
    f394:	890b883a 	add	r5,r17,r4
    f398:	2c63803a 	cmpltu	r17,r5,r17
    f39c:	1c47883a 	add	r3,r3,r17
    f3a0:	2823883a 	mov	r17,r5
    f3a4:	1880202c 	andhi	r2,r3,128
    f3a8:	10005926 	beq	r2,zero,f510 <__subdf3+0x214>
    f3ac:	84000044 	addi	r16,r16,1
    f3b0:	0081ffc4 	movi	r2,2047
    f3b4:	8080be26 	beq	r16,r2,f6b0 <__subdf3+0x3b4>
    f3b8:	017fe034 	movhi	r5,65408
    f3bc:	297fffc4 	addi	r5,r5,-1
    f3c0:	1946703a 	and	r3,r3,r5
    f3c4:	1804977a 	slli	r2,r3,29
    f3c8:	1806927a 	slli	r3,r3,9
    f3cc:	8822d0fa 	srli	r17,r17,3
    f3d0:	8401ffcc 	andi	r16,r16,2047
    f3d4:	180ad33a 	srli	r5,r3,12
    f3d8:	9100004c 	andi	r4,r18,1
    f3dc:	1444b03a 	or	r2,r2,r17
    f3e0:	80c1ffcc 	andi	r3,r16,2047
    f3e4:	1820953a 	slli	r16,r3,20
    f3e8:	20c03fcc 	andi	r3,r4,255
    f3ec:	180897fa 	slli	r4,r3,31
    f3f0:	00c00434 	movhi	r3,16
    f3f4:	18ffffc4 	addi	r3,r3,-1
    f3f8:	28c6703a 	and	r3,r5,r3
    f3fc:	1c06b03a 	or	r3,r3,r16
    f400:	1906b03a 	or	r3,r3,r4
    f404:	dfc00417 	ldw	ra,16(sp)
    f408:	dcc00317 	ldw	r19,12(sp)
    f40c:	dc800217 	ldw	r18,8(sp)
    f410:	dc400117 	ldw	r17,4(sp)
    f414:	dc000017 	ldw	r16,0(sp)
    f418:	dec00504 	addi	sp,sp,20
    f41c:	f800283a 	ret
    f420:	0101ffc4 	movi	r4,2047
    f424:	813fd626 	beq	r16,r4,f380 <__alt_data_end+0xfc00f380>
    f428:	29402034 	orhi	r5,r5,128
    f42c:	01000e04 	movi	r4,56
    f430:	2080a316 	blt	r4,r2,f6c0 <__subdf3+0x3c4>
    f434:	010007c4 	movi	r4,31
    f438:	2080c616 	blt	r4,r2,f754 <__subdf3+0x458>
    f43c:	01000804 	movi	r4,32
    f440:	2089c83a 	sub	r4,r4,r2
    f444:	2910983a 	sll	r8,r5,r4
    f448:	308ed83a 	srl	r7,r6,r2
    f44c:	3108983a 	sll	r4,r6,r4
    f450:	2884d83a 	srl	r2,r5,r2
    f454:	41ccb03a 	or	r6,r8,r7
    f458:	2008c03a 	cmpne	r4,r4,zero
    f45c:	310cb03a 	or	r6,r6,r4
    f460:	898dc83a 	sub	r6,r17,r6
    f464:	89a3803a 	cmpltu	r17,r17,r6
    f468:	1887c83a 	sub	r3,r3,r2
    f46c:	1c47c83a 	sub	r3,r3,r17
    f470:	3023883a 	mov	r17,r6
    f474:	1880202c 	andhi	r2,r3,128
    f478:	10002326 	beq	r2,zero,f508 <__subdf3+0x20c>
    f47c:	04c02034 	movhi	r19,128
    f480:	9cffffc4 	addi	r19,r19,-1
    f484:	1ce6703a 	and	r19,r3,r19
    f488:	98007a26 	beq	r19,zero,f674 <__subdf3+0x378>
    f48c:	9809883a 	mov	r4,r19
    f490:	000fdfc0 	call	fdfc <__clzsi2>
    f494:	113ffe04 	addi	r4,r2,-8
    f498:	00c007c4 	movi	r3,31
    f49c:	19007b16 	blt	r3,r4,f68c <__subdf3+0x390>
    f4a0:	00800804 	movi	r2,32
    f4a4:	1105c83a 	sub	r2,r2,r4
    f4a8:	8884d83a 	srl	r2,r17,r2
    f4ac:	9906983a 	sll	r3,r19,r4
    f4b0:	8922983a 	sll	r17,r17,r4
    f4b4:	10c4b03a 	or	r2,r2,r3
    f4b8:	24007816 	blt	r4,r16,f69c <__subdf3+0x3a0>
    f4bc:	2421c83a 	sub	r16,r4,r16
    f4c0:	80c00044 	addi	r3,r16,1
    f4c4:	010007c4 	movi	r4,31
    f4c8:	20c09516 	blt	r4,r3,f720 <__subdf3+0x424>
    f4cc:	01400804 	movi	r5,32
    f4d0:	28cbc83a 	sub	r5,r5,r3
    f4d4:	88c8d83a 	srl	r4,r17,r3
    f4d8:	8962983a 	sll	r17,r17,r5
    f4dc:	114a983a 	sll	r5,r2,r5
    f4e0:	10c6d83a 	srl	r3,r2,r3
    f4e4:	8804c03a 	cmpne	r2,r17,zero
    f4e8:	290ab03a 	or	r5,r5,r4
    f4ec:	28a2b03a 	or	r17,r5,r2
    f4f0:	0021883a 	mov	r16,zero
    f4f4:	003fa206 	br	f380 <__alt_data_end+0xfc00f380>
    f4f8:	2090b03a 	or	r8,r4,r2
    f4fc:	40018e26 	beq	r8,zero,fb38 <__subdf3+0x83c>
    f500:	1007883a 	mov	r3,r2
    f504:	2023883a 	mov	r17,r4
    f508:	888001cc 	andi	r2,r17,7
    f50c:	103f9e1e 	bne	r2,zero,f388 <__alt_data_end+0xfc00f388>
    f510:	1804977a 	slli	r2,r3,29
    f514:	8822d0fa 	srli	r17,r17,3
    f518:	1810d0fa 	srli	r8,r3,3
    f51c:	9100004c 	andi	r4,r18,1
    f520:	1444b03a 	or	r2,r2,r17
    f524:	00c1ffc4 	movi	r3,2047
    f528:	80c02826 	beq	r16,r3,f5cc <__subdf3+0x2d0>
    f52c:	01400434 	movhi	r5,16
    f530:	297fffc4 	addi	r5,r5,-1
    f534:	80e0703a 	and	r16,r16,r3
    f538:	414a703a 	and	r5,r8,r5
    f53c:	003fa806 	br	f3e0 <__alt_data_end+0xfc00f3e0>
    f540:	0080630e 	bge	zero,r2,f6d0 <__subdf3+0x3d4>
    f544:	48003026 	beq	r9,zero,f608 <__subdf3+0x30c>
    f548:	0101ffc4 	movi	r4,2047
    f54c:	813f8c26 	beq	r16,r4,f380 <__alt_data_end+0xfc00f380>
    f550:	29402034 	orhi	r5,r5,128
    f554:	01000e04 	movi	r4,56
    f558:	2080a90e 	bge	r4,r2,f800 <__subdf3+0x504>
    f55c:	298cb03a 	or	r6,r5,r6
    f560:	3012c03a 	cmpne	r9,r6,zero
    f564:	0005883a 	mov	r2,zero
    f568:	4c53883a 	add	r9,r9,r17
    f56c:	4c63803a 	cmpltu	r17,r9,r17
    f570:	10c7883a 	add	r3,r2,r3
    f574:	88c7883a 	add	r3,r17,r3
    f578:	4823883a 	mov	r17,r9
    f57c:	1880202c 	andhi	r2,r3,128
    f580:	1000d026 	beq	r2,zero,f8c4 <__subdf3+0x5c8>
    f584:	84000044 	addi	r16,r16,1
    f588:	0081ffc4 	movi	r2,2047
    f58c:	8080fe26 	beq	r16,r2,f988 <__subdf3+0x68c>
    f590:	00bfe034 	movhi	r2,65408
    f594:	10bfffc4 	addi	r2,r2,-1
    f598:	1886703a 	and	r3,r3,r2
    f59c:	880ad07a 	srli	r5,r17,1
    f5a0:	180497fa 	slli	r2,r3,31
    f5a4:	8900004c 	andi	r4,r17,1
    f5a8:	2922b03a 	or	r17,r5,r4
    f5ac:	1806d07a 	srli	r3,r3,1
    f5b0:	1462b03a 	or	r17,r2,r17
    f5b4:	3825883a 	mov	r18,r7
    f5b8:	003f7106 	br	f380 <__alt_data_end+0xfc00f380>
    f5bc:	2984b03a 	or	r2,r5,r6
    f5c0:	103f6826 	beq	r2,zero,f364 <__alt_data_end+0xfc00f364>
    f5c4:	39c03fcc 	andi	r7,r7,255
    f5c8:	003f6706 	br	f368 <__alt_data_end+0xfc00f368>
    f5cc:	4086b03a 	or	r3,r8,r2
    f5d0:	18015226 	beq	r3,zero,fb1c <__subdf3+0x820>
    f5d4:	00c00434 	movhi	r3,16
    f5d8:	41400234 	orhi	r5,r8,8
    f5dc:	18ffffc4 	addi	r3,r3,-1
    f5e0:	28ca703a 	and	r5,r5,r3
    f5e4:	003f7e06 	br	f3e0 <__alt_data_end+0xfc00f3e0>
    f5e8:	10bfffc4 	addi	r2,r2,-1
    f5ec:	1000491e 	bne	r2,zero,f714 <__subdf3+0x418>
    f5f0:	898fc83a 	sub	r7,r17,r6
    f5f4:	89e3803a 	cmpltu	r17,r17,r7
    f5f8:	1947c83a 	sub	r3,r3,r5
    f5fc:	1c47c83a 	sub	r3,r3,r17
    f600:	3823883a 	mov	r17,r7
    f604:	003f9b06 	br	f474 <__alt_data_end+0xfc00f474>
    f608:	2988b03a 	or	r4,r5,r6
    f60c:	203f5c26 	beq	r4,zero,f380 <__alt_data_end+0xfc00f380>
    f610:	10bfffc4 	addi	r2,r2,-1
    f614:	1000931e 	bne	r2,zero,f864 <__subdf3+0x568>
    f618:	898d883a 	add	r6,r17,r6
    f61c:	3463803a 	cmpltu	r17,r6,r17
    f620:	1947883a 	add	r3,r3,r5
    f624:	88c7883a 	add	r3,r17,r3
    f628:	3023883a 	mov	r17,r6
    f62c:	003fd306 	br	f57c <__alt_data_end+0xfc00f57c>
    f630:	1000541e 	bne	r2,zero,f784 <__subdf3+0x488>
    f634:	80800044 	addi	r2,r16,1
    f638:	1081ffcc 	andi	r2,r2,2047
    f63c:	01000044 	movi	r4,1
    f640:	2080a20e 	bge	r4,r2,f8cc <__subdf3+0x5d0>
    f644:	8989c83a 	sub	r4,r17,r6
    f648:	8905803a 	cmpltu	r2,r17,r4
    f64c:	1967c83a 	sub	r19,r3,r5
    f650:	98a7c83a 	sub	r19,r19,r2
    f654:	9880202c 	andhi	r2,r19,128
    f658:	10006326 	beq	r2,zero,f7e8 <__subdf3+0x4ec>
    f65c:	3463c83a 	sub	r17,r6,r17
    f660:	28c7c83a 	sub	r3,r5,r3
    f664:	344d803a 	cmpltu	r6,r6,r17
    f668:	19a7c83a 	sub	r19,r3,r6
    f66c:	3825883a 	mov	r18,r7
    f670:	983f861e 	bne	r19,zero,f48c <__alt_data_end+0xfc00f48c>
    f674:	8809883a 	mov	r4,r17
    f678:	000fdfc0 	call	fdfc <__clzsi2>
    f67c:	10800804 	addi	r2,r2,32
    f680:	113ffe04 	addi	r4,r2,-8
    f684:	00c007c4 	movi	r3,31
    f688:	193f850e 	bge	r3,r4,f4a0 <__alt_data_end+0xfc00f4a0>
    f68c:	10bff604 	addi	r2,r2,-40
    f690:	8884983a 	sll	r2,r17,r2
    f694:	0023883a 	mov	r17,zero
    f698:	243f880e 	bge	r4,r16,f4bc <__alt_data_end+0xfc00f4bc>
    f69c:	00ffe034 	movhi	r3,65408
    f6a0:	18ffffc4 	addi	r3,r3,-1
    f6a4:	8121c83a 	sub	r16,r16,r4
    f6a8:	10c6703a 	and	r3,r2,r3
    f6ac:	003f3406 	br	f380 <__alt_data_end+0xfc00f380>
    f6b0:	9100004c 	andi	r4,r18,1
    f6b4:	000b883a 	mov	r5,zero
    f6b8:	0005883a 	mov	r2,zero
    f6bc:	003f4806 	br	f3e0 <__alt_data_end+0xfc00f3e0>
    f6c0:	298cb03a 	or	r6,r5,r6
    f6c4:	300cc03a 	cmpne	r6,r6,zero
    f6c8:	0005883a 	mov	r2,zero
    f6cc:	003f6406 	br	f460 <__alt_data_end+0xfc00f460>
    f6d0:	10009a1e 	bne	r2,zero,f93c <__subdf3+0x640>
    f6d4:	82400044 	addi	r9,r16,1
    f6d8:	4881ffcc 	andi	r2,r9,2047
    f6dc:	02800044 	movi	r10,1
    f6e0:	5080670e 	bge	r10,r2,f880 <__subdf3+0x584>
    f6e4:	0081ffc4 	movi	r2,2047
    f6e8:	4880af26 	beq	r9,r2,f9a8 <__subdf3+0x6ac>
    f6ec:	898d883a 	add	r6,r17,r6
    f6f0:	1945883a 	add	r2,r3,r5
    f6f4:	3447803a 	cmpltu	r3,r6,r17
    f6f8:	1887883a 	add	r3,r3,r2
    f6fc:	182297fa 	slli	r17,r3,31
    f700:	300cd07a 	srli	r6,r6,1
    f704:	1806d07a 	srli	r3,r3,1
    f708:	4821883a 	mov	r16,r9
    f70c:	89a2b03a 	or	r17,r17,r6
    f710:	003f1b06 	br	f380 <__alt_data_end+0xfc00f380>
    f714:	0101ffc4 	movi	r4,2047
    f718:	813f441e 	bne	r16,r4,f42c <__alt_data_end+0xfc00f42c>
    f71c:	003f1806 	br	f380 <__alt_data_end+0xfc00f380>
    f720:	843ff844 	addi	r16,r16,-31
    f724:	01400804 	movi	r5,32
    f728:	1408d83a 	srl	r4,r2,r16
    f72c:	19405026 	beq	r3,r5,f870 <__subdf3+0x574>
    f730:	01401004 	movi	r5,64
    f734:	28c7c83a 	sub	r3,r5,r3
    f738:	10c4983a 	sll	r2,r2,r3
    f73c:	88a2b03a 	or	r17,r17,r2
    f740:	8822c03a 	cmpne	r17,r17,zero
    f744:	2462b03a 	or	r17,r4,r17
    f748:	0007883a 	mov	r3,zero
    f74c:	0021883a 	mov	r16,zero
    f750:	003f6d06 	br	f508 <__alt_data_end+0xfc00f508>
    f754:	11fff804 	addi	r7,r2,-32
    f758:	01000804 	movi	r4,32
    f75c:	29ced83a 	srl	r7,r5,r7
    f760:	11004526 	beq	r2,r4,f878 <__subdf3+0x57c>
    f764:	01001004 	movi	r4,64
    f768:	2089c83a 	sub	r4,r4,r2
    f76c:	2904983a 	sll	r2,r5,r4
    f770:	118cb03a 	or	r6,r2,r6
    f774:	300cc03a 	cmpne	r6,r6,zero
    f778:	398cb03a 	or	r6,r7,r6
    f77c:	0005883a 	mov	r2,zero
    f780:	003f3706 	br	f460 <__alt_data_end+0xfc00f460>
    f784:	80002a26 	beq	r16,zero,f830 <__subdf3+0x534>
    f788:	0101ffc4 	movi	r4,2047
    f78c:	49006626 	beq	r9,r4,f928 <__subdf3+0x62c>
    f790:	0085c83a 	sub	r2,zero,r2
    f794:	18c02034 	orhi	r3,r3,128
    f798:	01000e04 	movi	r4,56
    f79c:	20807e16 	blt	r4,r2,f998 <__subdf3+0x69c>
    f7a0:	010007c4 	movi	r4,31
    f7a4:	2080e716 	blt	r4,r2,fb44 <__subdf3+0x848>
    f7a8:	01000804 	movi	r4,32
    f7ac:	2089c83a 	sub	r4,r4,r2
    f7b0:	1914983a 	sll	r10,r3,r4
    f7b4:	8890d83a 	srl	r8,r17,r2
    f7b8:	8908983a 	sll	r4,r17,r4
    f7bc:	1884d83a 	srl	r2,r3,r2
    f7c0:	5222b03a 	or	r17,r10,r8
    f7c4:	2006c03a 	cmpne	r3,r4,zero
    f7c8:	88e2b03a 	or	r17,r17,r3
    f7cc:	3463c83a 	sub	r17,r6,r17
    f7d0:	2885c83a 	sub	r2,r5,r2
    f7d4:	344d803a 	cmpltu	r6,r6,r17
    f7d8:	1187c83a 	sub	r3,r2,r6
    f7dc:	4821883a 	mov	r16,r9
    f7e0:	3825883a 	mov	r18,r7
    f7e4:	003f2306 	br	f474 <__alt_data_end+0xfc00f474>
    f7e8:	24d0b03a 	or	r8,r4,r19
    f7ec:	40001b1e 	bne	r8,zero,f85c <__subdf3+0x560>
    f7f0:	0005883a 	mov	r2,zero
    f7f4:	0009883a 	mov	r4,zero
    f7f8:	0021883a 	mov	r16,zero
    f7fc:	003f4906 	br	f524 <__alt_data_end+0xfc00f524>
    f800:	010007c4 	movi	r4,31
    f804:	20803a16 	blt	r4,r2,f8f0 <__subdf3+0x5f4>
    f808:	01000804 	movi	r4,32
    f80c:	2089c83a 	sub	r4,r4,r2
    f810:	2912983a 	sll	r9,r5,r4
    f814:	3090d83a 	srl	r8,r6,r2
    f818:	3108983a 	sll	r4,r6,r4
    f81c:	2884d83a 	srl	r2,r5,r2
    f820:	4a12b03a 	or	r9,r9,r8
    f824:	2008c03a 	cmpne	r4,r4,zero
    f828:	4912b03a 	or	r9,r9,r4
    f82c:	003f4e06 	br	f568 <__alt_data_end+0xfc00f568>
    f830:	1c48b03a 	or	r4,r3,r17
    f834:	20003c26 	beq	r4,zero,f928 <__subdf3+0x62c>
    f838:	0084303a 	nor	r2,zero,r2
    f83c:	1000381e 	bne	r2,zero,f920 <__subdf3+0x624>
    f840:	3463c83a 	sub	r17,r6,r17
    f844:	28c5c83a 	sub	r2,r5,r3
    f848:	344d803a 	cmpltu	r6,r6,r17
    f84c:	1187c83a 	sub	r3,r2,r6
    f850:	4821883a 	mov	r16,r9
    f854:	3825883a 	mov	r18,r7
    f858:	003f0606 	br	f474 <__alt_data_end+0xfc00f474>
    f85c:	2023883a 	mov	r17,r4
    f860:	003f0906 	br	f488 <__alt_data_end+0xfc00f488>
    f864:	0101ffc4 	movi	r4,2047
    f868:	813f3a1e 	bne	r16,r4,f554 <__alt_data_end+0xfc00f554>
    f86c:	003ec406 	br	f380 <__alt_data_end+0xfc00f380>
    f870:	0005883a 	mov	r2,zero
    f874:	003fb106 	br	f73c <__alt_data_end+0xfc00f73c>
    f878:	0005883a 	mov	r2,zero
    f87c:	003fbc06 	br	f770 <__alt_data_end+0xfc00f770>
    f880:	1c44b03a 	or	r2,r3,r17
    f884:	80008e1e 	bne	r16,zero,fac0 <__subdf3+0x7c4>
    f888:	1000c826 	beq	r2,zero,fbac <__subdf3+0x8b0>
    f88c:	2984b03a 	or	r2,r5,r6
    f890:	103ebb26 	beq	r2,zero,f380 <__alt_data_end+0xfc00f380>
    f894:	8989883a 	add	r4,r17,r6
    f898:	1945883a 	add	r2,r3,r5
    f89c:	2447803a 	cmpltu	r3,r4,r17
    f8a0:	1887883a 	add	r3,r3,r2
    f8a4:	1880202c 	andhi	r2,r3,128
    f8a8:	2023883a 	mov	r17,r4
    f8ac:	103f1626 	beq	r2,zero,f508 <__alt_data_end+0xfc00f508>
    f8b0:	00bfe034 	movhi	r2,65408
    f8b4:	10bfffc4 	addi	r2,r2,-1
    f8b8:	5021883a 	mov	r16,r10
    f8bc:	1886703a 	and	r3,r3,r2
    f8c0:	003eaf06 	br	f380 <__alt_data_end+0xfc00f380>
    f8c4:	3825883a 	mov	r18,r7
    f8c8:	003f0f06 	br	f508 <__alt_data_end+0xfc00f508>
    f8cc:	1c44b03a 	or	r2,r3,r17
    f8d0:	8000251e 	bne	r16,zero,f968 <__subdf3+0x66c>
    f8d4:	1000661e 	bne	r2,zero,fa70 <__subdf3+0x774>
    f8d8:	2990b03a 	or	r8,r5,r6
    f8dc:	40009626 	beq	r8,zero,fb38 <__subdf3+0x83c>
    f8e0:	2807883a 	mov	r3,r5
    f8e4:	3023883a 	mov	r17,r6
    f8e8:	3825883a 	mov	r18,r7
    f8ec:	003ea406 	br	f380 <__alt_data_end+0xfc00f380>
    f8f0:	127ff804 	addi	r9,r2,-32
    f8f4:	01000804 	movi	r4,32
    f8f8:	2a52d83a 	srl	r9,r5,r9
    f8fc:	11008c26 	beq	r2,r4,fb30 <__subdf3+0x834>
    f900:	01001004 	movi	r4,64
    f904:	2085c83a 	sub	r2,r4,r2
    f908:	2884983a 	sll	r2,r5,r2
    f90c:	118cb03a 	or	r6,r2,r6
    f910:	300cc03a 	cmpne	r6,r6,zero
    f914:	4992b03a 	or	r9,r9,r6
    f918:	0005883a 	mov	r2,zero
    f91c:	003f1206 	br	f568 <__alt_data_end+0xfc00f568>
    f920:	0101ffc4 	movi	r4,2047
    f924:	493f9c1e 	bne	r9,r4,f798 <__alt_data_end+0xfc00f798>
    f928:	2807883a 	mov	r3,r5
    f92c:	3023883a 	mov	r17,r6
    f930:	4821883a 	mov	r16,r9
    f934:	3825883a 	mov	r18,r7
    f938:	003e9106 	br	f380 <__alt_data_end+0xfc00f380>
    f93c:	80001f1e 	bne	r16,zero,f9bc <__subdf3+0x6c0>
    f940:	1c48b03a 	or	r4,r3,r17
    f944:	20005a26 	beq	r4,zero,fab0 <__subdf3+0x7b4>
    f948:	0084303a 	nor	r2,zero,r2
    f94c:	1000561e 	bne	r2,zero,faa8 <__subdf3+0x7ac>
    f950:	89a3883a 	add	r17,r17,r6
    f954:	1945883a 	add	r2,r3,r5
    f958:	898d803a 	cmpltu	r6,r17,r6
    f95c:	3087883a 	add	r3,r6,r2
    f960:	4821883a 	mov	r16,r9
    f964:	003f0506 	br	f57c <__alt_data_end+0xfc00f57c>
    f968:	10002b1e 	bne	r2,zero,fa18 <__subdf3+0x71c>
    f96c:	2984b03a 	or	r2,r5,r6
    f970:	10008026 	beq	r2,zero,fb74 <__subdf3+0x878>
    f974:	2807883a 	mov	r3,r5
    f978:	3023883a 	mov	r17,r6
    f97c:	3825883a 	mov	r18,r7
    f980:	0401ffc4 	movi	r16,2047
    f984:	003e7e06 	br	f380 <__alt_data_end+0xfc00f380>
    f988:	3809883a 	mov	r4,r7
    f98c:	0011883a 	mov	r8,zero
    f990:	0005883a 	mov	r2,zero
    f994:	003ee306 	br	f524 <__alt_data_end+0xfc00f524>
    f998:	1c62b03a 	or	r17,r3,r17
    f99c:	8822c03a 	cmpne	r17,r17,zero
    f9a0:	0005883a 	mov	r2,zero
    f9a4:	003f8906 	br	f7cc <__alt_data_end+0xfc00f7cc>
    f9a8:	3809883a 	mov	r4,r7
    f9ac:	4821883a 	mov	r16,r9
    f9b0:	0011883a 	mov	r8,zero
    f9b4:	0005883a 	mov	r2,zero
    f9b8:	003eda06 	br	f524 <__alt_data_end+0xfc00f524>
    f9bc:	0101ffc4 	movi	r4,2047
    f9c0:	49003b26 	beq	r9,r4,fab0 <__subdf3+0x7b4>
    f9c4:	0085c83a 	sub	r2,zero,r2
    f9c8:	18c02034 	orhi	r3,r3,128
    f9cc:	01000e04 	movi	r4,56
    f9d0:	20806e16 	blt	r4,r2,fb8c <__subdf3+0x890>
    f9d4:	010007c4 	movi	r4,31
    f9d8:	20807716 	blt	r4,r2,fbb8 <__subdf3+0x8bc>
    f9dc:	01000804 	movi	r4,32
    f9e0:	2089c83a 	sub	r4,r4,r2
    f9e4:	1914983a 	sll	r10,r3,r4
    f9e8:	8890d83a 	srl	r8,r17,r2
    f9ec:	8908983a 	sll	r4,r17,r4
    f9f0:	1884d83a 	srl	r2,r3,r2
    f9f4:	5222b03a 	or	r17,r10,r8
    f9f8:	2006c03a 	cmpne	r3,r4,zero
    f9fc:	88e2b03a 	or	r17,r17,r3
    fa00:	89a3883a 	add	r17,r17,r6
    fa04:	1145883a 	add	r2,r2,r5
    fa08:	898d803a 	cmpltu	r6,r17,r6
    fa0c:	3087883a 	add	r3,r6,r2
    fa10:	4821883a 	mov	r16,r9
    fa14:	003ed906 	br	f57c <__alt_data_end+0xfc00f57c>
    fa18:	2984b03a 	or	r2,r5,r6
    fa1c:	10004226 	beq	r2,zero,fb28 <__subdf3+0x82c>
    fa20:	1808d0fa 	srli	r4,r3,3
    fa24:	8822d0fa 	srli	r17,r17,3
    fa28:	1806977a 	slli	r3,r3,29
    fa2c:	2080022c 	andhi	r2,r4,8
    fa30:	1c62b03a 	or	r17,r3,r17
    fa34:	10000826 	beq	r2,zero,fa58 <__subdf3+0x75c>
    fa38:	2812d0fa 	srli	r9,r5,3
    fa3c:	4880022c 	andhi	r2,r9,8
    fa40:	1000051e 	bne	r2,zero,fa58 <__subdf3+0x75c>
    fa44:	300cd0fa 	srli	r6,r6,3
    fa48:	2804977a 	slli	r2,r5,29
    fa4c:	4809883a 	mov	r4,r9
    fa50:	3825883a 	mov	r18,r7
    fa54:	11a2b03a 	or	r17,r2,r6
    fa58:	8806d77a 	srli	r3,r17,29
    fa5c:	200890fa 	slli	r4,r4,3
    fa60:	882290fa 	slli	r17,r17,3
    fa64:	0401ffc4 	movi	r16,2047
    fa68:	1906b03a 	or	r3,r3,r4
    fa6c:	003e4406 	br	f380 <__alt_data_end+0xfc00f380>
    fa70:	2984b03a 	or	r2,r5,r6
    fa74:	103e4226 	beq	r2,zero,f380 <__alt_data_end+0xfc00f380>
    fa78:	8989c83a 	sub	r4,r17,r6
    fa7c:	8911803a 	cmpltu	r8,r17,r4
    fa80:	1945c83a 	sub	r2,r3,r5
    fa84:	1205c83a 	sub	r2,r2,r8
    fa88:	1200202c 	andhi	r8,r2,128
    fa8c:	403e9a26 	beq	r8,zero,f4f8 <__alt_data_end+0xfc00f4f8>
    fa90:	3463c83a 	sub	r17,r6,r17
    fa94:	28c5c83a 	sub	r2,r5,r3
    fa98:	344d803a 	cmpltu	r6,r6,r17
    fa9c:	1187c83a 	sub	r3,r2,r6
    faa0:	3825883a 	mov	r18,r7
    faa4:	003e3606 	br	f380 <__alt_data_end+0xfc00f380>
    faa8:	0101ffc4 	movi	r4,2047
    faac:	493fc71e 	bne	r9,r4,f9cc <__alt_data_end+0xfc00f9cc>
    fab0:	2807883a 	mov	r3,r5
    fab4:	3023883a 	mov	r17,r6
    fab8:	4821883a 	mov	r16,r9
    fabc:	003e3006 	br	f380 <__alt_data_end+0xfc00f380>
    fac0:	10003626 	beq	r2,zero,fb9c <__subdf3+0x8a0>
    fac4:	2984b03a 	or	r2,r5,r6
    fac8:	10001726 	beq	r2,zero,fb28 <__subdf3+0x82c>
    facc:	1808d0fa 	srli	r4,r3,3
    fad0:	8822d0fa 	srli	r17,r17,3
    fad4:	1806977a 	slli	r3,r3,29
    fad8:	2080022c 	andhi	r2,r4,8
    fadc:	1c62b03a 	or	r17,r3,r17
    fae0:	10000726 	beq	r2,zero,fb00 <__subdf3+0x804>
    fae4:	2812d0fa 	srli	r9,r5,3
    fae8:	4880022c 	andhi	r2,r9,8
    faec:	1000041e 	bne	r2,zero,fb00 <__subdf3+0x804>
    faf0:	300cd0fa 	srli	r6,r6,3
    faf4:	2804977a 	slli	r2,r5,29
    faf8:	4809883a 	mov	r4,r9
    fafc:	11a2b03a 	or	r17,r2,r6
    fb00:	8806d77a 	srli	r3,r17,29
    fb04:	200890fa 	slli	r4,r4,3
    fb08:	882290fa 	slli	r17,r17,3
    fb0c:	3825883a 	mov	r18,r7
    fb10:	1906b03a 	or	r3,r3,r4
    fb14:	0401ffc4 	movi	r16,2047
    fb18:	003e1906 	br	f380 <__alt_data_end+0xfc00f380>
    fb1c:	000b883a 	mov	r5,zero
    fb20:	0005883a 	mov	r2,zero
    fb24:	003e2e06 	br	f3e0 <__alt_data_end+0xfc00f3e0>
    fb28:	0401ffc4 	movi	r16,2047
    fb2c:	003e1406 	br	f380 <__alt_data_end+0xfc00f380>
    fb30:	0005883a 	mov	r2,zero
    fb34:	003f7506 	br	f90c <__alt_data_end+0xfc00f90c>
    fb38:	0005883a 	mov	r2,zero
    fb3c:	0009883a 	mov	r4,zero
    fb40:	003e7806 	br	f524 <__alt_data_end+0xfc00f524>
    fb44:	123ff804 	addi	r8,r2,-32
    fb48:	01000804 	movi	r4,32
    fb4c:	1a10d83a 	srl	r8,r3,r8
    fb50:	11002526 	beq	r2,r4,fbe8 <__subdf3+0x8ec>
    fb54:	01001004 	movi	r4,64
    fb58:	2085c83a 	sub	r2,r4,r2
    fb5c:	1884983a 	sll	r2,r3,r2
    fb60:	1444b03a 	or	r2,r2,r17
    fb64:	1004c03a 	cmpne	r2,r2,zero
    fb68:	40a2b03a 	or	r17,r8,r2
    fb6c:	0005883a 	mov	r2,zero
    fb70:	003f1606 	br	f7cc <__alt_data_end+0xfc00f7cc>
    fb74:	02000434 	movhi	r8,16
    fb78:	0009883a 	mov	r4,zero
    fb7c:	423fffc4 	addi	r8,r8,-1
    fb80:	00bfffc4 	movi	r2,-1
    fb84:	0401ffc4 	movi	r16,2047
    fb88:	003e6606 	br	f524 <__alt_data_end+0xfc00f524>
    fb8c:	1c62b03a 	or	r17,r3,r17
    fb90:	8822c03a 	cmpne	r17,r17,zero
    fb94:	0005883a 	mov	r2,zero
    fb98:	003f9906 	br	fa00 <__alt_data_end+0xfc00fa00>
    fb9c:	2807883a 	mov	r3,r5
    fba0:	3023883a 	mov	r17,r6
    fba4:	0401ffc4 	movi	r16,2047
    fba8:	003df506 	br	f380 <__alt_data_end+0xfc00f380>
    fbac:	2807883a 	mov	r3,r5
    fbb0:	3023883a 	mov	r17,r6
    fbb4:	003df206 	br	f380 <__alt_data_end+0xfc00f380>
    fbb8:	123ff804 	addi	r8,r2,-32
    fbbc:	01000804 	movi	r4,32
    fbc0:	1a10d83a 	srl	r8,r3,r8
    fbc4:	11000a26 	beq	r2,r4,fbf0 <__subdf3+0x8f4>
    fbc8:	01001004 	movi	r4,64
    fbcc:	2085c83a 	sub	r2,r4,r2
    fbd0:	1884983a 	sll	r2,r3,r2
    fbd4:	1444b03a 	or	r2,r2,r17
    fbd8:	1004c03a 	cmpne	r2,r2,zero
    fbdc:	40a2b03a 	or	r17,r8,r2
    fbe0:	0005883a 	mov	r2,zero
    fbe4:	003f8606 	br	fa00 <__alt_data_end+0xfc00fa00>
    fbe8:	0005883a 	mov	r2,zero
    fbec:	003fdc06 	br	fb60 <__alt_data_end+0xfc00fb60>
    fbf0:	0005883a 	mov	r2,zero
    fbf4:	003ff706 	br	fbd4 <__alt_data_end+0xfc00fbd4>

0000fbf8 <__fixdfsi>:
    fbf8:	280cd53a 	srli	r6,r5,20
    fbfc:	00c00434 	movhi	r3,16
    fc00:	18ffffc4 	addi	r3,r3,-1
    fc04:	3181ffcc 	andi	r6,r6,2047
    fc08:	01c0ff84 	movi	r7,1022
    fc0c:	28c6703a 	and	r3,r5,r3
    fc10:	280ad7fa 	srli	r5,r5,31
    fc14:	3980120e 	bge	r7,r6,fc60 <__fixdfsi+0x68>
    fc18:	00810744 	movi	r2,1053
    fc1c:	11800c16 	blt	r2,r6,fc50 <__fixdfsi+0x58>
    fc20:	00810cc4 	movi	r2,1075
    fc24:	1185c83a 	sub	r2,r2,r6
    fc28:	01c007c4 	movi	r7,31
    fc2c:	18c00434 	orhi	r3,r3,16
    fc30:	38800d16 	blt	r7,r2,fc68 <__fixdfsi+0x70>
    fc34:	31befb44 	addi	r6,r6,-1043
    fc38:	2084d83a 	srl	r2,r4,r2
    fc3c:	1986983a 	sll	r3,r3,r6
    fc40:	1884b03a 	or	r2,r3,r2
    fc44:	28000726 	beq	r5,zero,fc64 <__fixdfsi+0x6c>
    fc48:	0085c83a 	sub	r2,zero,r2
    fc4c:	f800283a 	ret
    fc50:	00a00034 	movhi	r2,32768
    fc54:	10bfffc4 	addi	r2,r2,-1
    fc58:	2885883a 	add	r2,r5,r2
    fc5c:	f800283a 	ret
    fc60:	0005883a 	mov	r2,zero
    fc64:	f800283a 	ret
    fc68:	008104c4 	movi	r2,1043
    fc6c:	1185c83a 	sub	r2,r2,r6
    fc70:	1884d83a 	srl	r2,r3,r2
    fc74:	003ff306 	br	fc44 <__alt_data_end+0xfc00fc44>

0000fc78 <__floatsidf>:
    fc78:	defffd04 	addi	sp,sp,-12
    fc7c:	dfc00215 	stw	ra,8(sp)
    fc80:	dc400115 	stw	r17,4(sp)
    fc84:	dc000015 	stw	r16,0(sp)
    fc88:	20002b26 	beq	r4,zero,fd38 <__floatsidf+0xc0>
    fc8c:	2023883a 	mov	r17,r4
    fc90:	2020d7fa 	srli	r16,r4,31
    fc94:	20002d16 	blt	r4,zero,fd4c <__floatsidf+0xd4>
    fc98:	8809883a 	mov	r4,r17
    fc9c:	000fdfc0 	call	fdfc <__clzsi2>
    fca0:	01410784 	movi	r5,1054
    fca4:	288bc83a 	sub	r5,r5,r2
    fca8:	01010cc4 	movi	r4,1075
    fcac:	2149c83a 	sub	r4,r4,r5
    fcb0:	00c007c4 	movi	r3,31
    fcb4:	1900160e 	bge	r3,r4,fd10 <__floatsidf+0x98>
    fcb8:	00c104c4 	movi	r3,1043
    fcbc:	1947c83a 	sub	r3,r3,r5
    fcc0:	88c6983a 	sll	r3,r17,r3
    fcc4:	00800434 	movhi	r2,16
    fcc8:	10bfffc4 	addi	r2,r2,-1
    fccc:	1886703a 	and	r3,r3,r2
    fcd0:	2941ffcc 	andi	r5,r5,2047
    fcd4:	800d883a 	mov	r6,r16
    fcd8:	0005883a 	mov	r2,zero
    fcdc:	280a953a 	slli	r5,r5,20
    fce0:	31803fcc 	andi	r6,r6,255
    fce4:	01000434 	movhi	r4,16
    fce8:	300c97fa 	slli	r6,r6,31
    fcec:	213fffc4 	addi	r4,r4,-1
    fcf0:	1906703a 	and	r3,r3,r4
    fcf4:	1946b03a 	or	r3,r3,r5
    fcf8:	1986b03a 	or	r3,r3,r6
    fcfc:	dfc00217 	ldw	ra,8(sp)
    fd00:	dc400117 	ldw	r17,4(sp)
    fd04:	dc000017 	ldw	r16,0(sp)
    fd08:	dec00304 	addi	sp,sp,12
    fd0c:	f800283a 	ret
    fd10:	00c002c4 	movi	r3,11
    fd14:	1887c83a 	sub	r3,r3,r2
    fd18:	88c6d83a 	srl	r3,r17,r3
    fd1c:	8904983a 	sll	r2,r17,r4
    fd20:	01000434 	movhi	r4,16
    fd24:	213fffc4 	addi	r4,r4,-1
    fd28:	2941ffcc 	andi	r5,r5,2047
    fd2c:	1906703a 	and	r3,r3,r4
    fd30:	800d883a 	mov	r6,r16
    fd34:	003fe906 	br	fcdc <__alt_data_end+0xfc00fcdc>
    fd38:	000d883a 	mov	r6,zero
    fd3c:	000b883a 	mov	r5,zero
    fd40:	0007883a 	mov	r3,zero
    fd44:	0005883a 	mov	r2,zero
    fd48:	003fe406 	br	fcdc <__alt_data_end+0xfc00fcdc>
    fd4c:	0123c83a 	sub	r17,zero,r4
    fd50:	003fd106 	br	fc98 <__alt_data_end+0xfc00fc98>

0000fd54 <__floatunsidf>:
    fd54:	defffe04 	addi	sp,sp,-8
    fd58:	dc000015 	stw	r16,0(sp)
    fd5c:	dfc00115 	stw	ra,4(sp)
    fd60:	2021883a 	mov	r16,r4
    fd64:	20002226 	beq	r4,zero,fdf0 <__floatunsidf+0x9c>
    fd68:	000fdfc0 	call	fdfc <__clzsi2>
    fd6c:	01010784 	movi	r4,1054
    fd70:	2089c83a 	sub	r4,r4,r2
    fd74:	01810cc4 	movi	r6,1075
    fd78:	310dc83a 	sub	r6,r6,r4
    fd7c:	00c007c4 	movi	r3,31
    fd80:	1980120e 	bge	r3,r6,fdcc <__floatunsidf+0x78>
    fd84:	00c104c4 	movi	r3,1043
    fd88:	1907c83a 	sub	r3,r3,r4
    fd8c:	80ca983a 	sll	r5,r16,r3
    fd90:	00800434 	movhi	r2,16
    fd94:	10bfffc4 	addi	r2,r2,-1
    fd98:	2101ffcc 	andi	r4,r4,2047
    fd9c:	0021883a 	mov	r16,zero
    fda0:	288a703a 	and	r5,r5,r2
    fda4:	2008953a 	slli	r4,r4,20
    fda8:	00c00434 	movhi	r3,16
    fdac:	18ffffc4 	addi	r3,r3,-1
    fdb0:	28c6703a 	and	r3,r5,r3
    fdb4:	8005883a 	mov	r2,r16
    fdb8:	1906b03a 	or	r3,r3,r4
    fdbc:	dfc00117 	ldw	ra,4(sp)
    fdc0:	dc000017 	ldw	r16,0(sp)
    fdc4:	dec00204 	addi	sp,sp,8
    fdc8:	f800283a 	ret
    fdcc:	00c002c4 	movi	r3,11
    fdd0:	188bc83a 	sub	r5,r3,r2
    fdd4:	814ad83a 	srl	r5,r16,r5
    fdd8:	00c00434 	movhi	r3,16
    fddc:	18ffffc4 	addi	r3,r3,-1
    fde0:	81a0983a 	sll	r16,r16,r6
    fde4:	2101ffcc 	andi	r4,r4,2047
    fde8:	28ca703a 	and	r5,r5,r3
    fdec:	003fed06 	br	fda4 <__alt_data_end+0xfc00fda4>
    fdf0:	0009883a 	mov	r4,zero
    fdf4:	000b883a 	mov	r5,zero
    fdf8:	003fea06 	br	fda4 <__alt_data_end+0xfc00fda4>

0000fdfc <__clzsi2>:
    fdfc:	00bfffd4 	movui	r2,65535
    fe00:	11000536 	bltu	r2,r4,fe18 <__clzsi2+0x1c>
    fe04:	00803fc4 	movi	r2,255
    fe08:	11000f36 	bltu	r2,r4,fe48 <__clzsi2+0x4c>
    fe0c:	00800804 	movi	r2,32
    fe10:	0007883a 	mov	r3,zero
    fe14:	00000506 	br	fe2c <__clzsi2+0x30>
    fe18:	00804034 	movhi	r2,256
    fe1c:	10bfffc4 	addi	r2,r2,-1
    fe20:	11000c2e 	bgeu	r2,r4,fe54 <__clzsi2+0x58>
    fe24:	00800204 	movi	r2,8
    fe28:	00c00604 	movi	r3,24
    fe2c:	20c8d83a 	srl	r4,r4,r3
    fe30:	00c00074 	movhi	r3,1
    fe34:	18d3a604 	addi	r3,r3,20120
    fe38:	1909883a 	add	r4,r3,r4
    fe3c:	20c00003 	ldbu	r3,0(r4)
    fe40:	10c5c83a 	sub	r2,r2,r3
    fe44:	f800283a 	ret
    fe48:	00800604 	movi	r2,24
    fe4c:	00c00204 	movi	r3,8
    fe50:	003ff606 	br	fe2c <__alt_data_end+0xfc00fe2c>
    fe54:	00800404 	movi	r2,16
    fe58:	1007883a 	mov	r3,r2
    fe5c:	003ff306 	br	fe2c <__alt_data_end+0xfc00fe2c>

0000fe60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe60:	defffe04 	addi	sp,sp,-8
    fe64:	dfc00115 	stw	ra,4(sp)
    fe68:	df000015 	stw	fp,0(sp)
    fe6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe70:	d0a00f17 	ldw	r2,-32708(gp)
    fe74:	10000326 	beq	r2,zero,fe84 <alt_get_errno+0x24>
    fe78:	d0a00f17 	ldw	r2,-32708(gp)
    fe7c:	103ee83a 	callr	r2
    fe80:	00000106 	br	fe88 <alt_get_errno+0x28>
    fe84:	d0a6fd04 	addi	r2,gp,-25612
}
    fe88:	e037883a 	mov	sp,fp
    fe8c:	dfc00117 	ldw	ra,4(sp)
    fe90:	df000017 	ldw	fp,0(sp)
    fe94:	dec00204 	addi	sp,sp,8
    fe98:	f800283a 	ret

0000fe9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    fe9c:	defffb04 	addi	sp,sp,-20
    fea0:	dfc00415 	stw	ra,16(sp)
    fea4:	df000315 	stw	fp,12(sp)
    fea8:	df000304 	addi	fp,sp,12
    feac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    feb0:	e0bfff17 	ldw	r2,-4(fp)
    feb4:	10000816 	blt	r2,zero,fed8 <close+0x3c>
    feb8:	01400304 	movi	r5,12
    febc:	e13fff17 	ldw	r4,-4(fp)
    fec0:	00030d40 	call	30d4 <__mulsi3>
    fec4:	1007883a 	mov	r3,r2
    fec8:	00800074 	movhi	r2,1
    fecc:	10963d04 	addi	r2,r2,22772
    fed0:	1885883a 	add	r2,r3,r2
    fed4:	00000106 	br	fedc <close+0x40>
    fed8:	0005883a 	mov	r2,zero
    fedc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    fee0:	e0bffd17 	ldw	r2,-12(fp)
    fee4:	10001926 	beq	r2,zero,ff4c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    fee8:	e0bffd17 	ldw	r2,-12(fp)
    feec:	10800017 	ldw	r2,0(r2)
    fef0:	10800417 	ldw	r2,16(r2)
    fef4:	10000626 	beq	r2,zero,ff10 <close+0x74>
    fef8:	e0bffd17 	ldw	r2,-12(fp)
    fefc:	10800017 	ldw	r2,0(r2)
    ff00:	10800417 	ldw	r2,16(r2)
    ff04:	e13ffd17 	ldw	r4,-12(fp)
    ff08:	103ee83a 	callr	r2
    ff0c:	00000106 	br	ff14 <close+0x78>
    ff10:	0005883a 	mov	r2,zero
    ff14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ff18:	e13fff17 	ldw	r4,-4(fp)
    ff1c:	00105840 	call	10584 <alt_release_fd>
    if (rval < 0)
    ff20:	e0bffe17 	ldw	r2,-8(fp)
    ff24:	1000070e 	bge	r2,zero,ff44 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    ff28:	000fe600 	call	fe60 <alt_get_errno>
    ff2c:	1007883a 	mov	r3,r2
    ff30:	e0bffe17 	ldw	r2,-8(fp)
    ff34:	0085c83a 	sub	r2,zero,r2
    ff38:	18800015 	stw	r2,0(r3)
      return -1;
    ff3c:	00bfffc4 	movi	r2,-1
    ff40:	00000706 	br	ff60 <close+0xc4>
    }
    return 0;
    ff44:	0005883a 	mov	r2,zero
    ff48:	00000506 	br	ff60 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ff4c:	000fe600 	call	fe60 <alt_get_errno>
    ff50:	1007883a 	mov	r3,r2
    ff54:	00801444 	movi	r2,81
    ff58:	18800015 	stw	r2,0(r3)
    return -1;
    ff5c:	00bfffc4 	movi	r2,-1
  }
}
    ff60:	e037883a 	mov	sp,fp
    ff64:	dfc00117 	ldw	ra,4(sp)
    ff68:	df000017 	ldw	fp,0(sp)
    ff6c:	dec00204 	addi	sp,sp,8
    ff70:	f800283a 	ret

0000ff74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ff74:	defffc04 	addi	sp,sp,-16
    ff78:	df000315 	stw	fp,12(sp)
    ff7c:	df000304 	addi	fp,sp,12
    ff80:	e13ffd15 	stw	r4,-12(fp)
    ff84:	e17ffe15 	stw	r5,-8(fp)
    ff88:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ff8c:	e0bfff17 	ldw	r2,-4(fp)
}
    ff90:	e037883a 	mov	sp,fp
    ff94:	df000017 	ldw	fp,0(sp)
    ff98:	dec00104 	addi	sp,sp,4
    ff9c:	f800283a 	ret

0000ffa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ffa0:	defffe04 	addi	sp,sp,-8
    ffa4:	dfc00115 	stw	ra,4(sp)
    ffa8:	df000015 	stw	fp,0(sp)
    ffac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ffb0:	d0a00f17 	ldw	r2,-32708(gp)
    ffb4:	10000326 	beq	r2,zero,ffc4 <alt_get_errno+0x24>
    ffb8:	d0a00f17 	ldw	r2,-32708(gp)
    ffbc:	103ee83a 	callr	r2
    ffc0:	00000106 	br	ffc8 <alt_get_errno+0x28>
    ffc4:	d0a6fd04 	addi	r2,gp,-25612
}
    ffc8:	e037883a 	mov	sp,fp
    ffcc:	dfc00117 	ldw	ra,4(sp)
    ffd0:	df000017 	ldw	fp,0(sp)
    ffd4:	dec00204 	addi	sp,sp,8
    ffd8:	f800283a 	ret

0000ffdc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ffdc:	defffb04 	addi	sp,sp,-20
    ffe0:	dfc00415 	stw	ra,16(sp)
    ffe4:	df000315 	stw	fp,12(sp)
    ffe8:	df000304 	addi	fp,sp,12
    ffec:	e13ffe15 	stw	r4,-8(fp)
    fff0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fff4:	e0bffe17 	ldw	r2,-8(fp)
    fff8:	10000816 	blt	r2,zero,1001c <fstat+0x40>
    fffc:	01400304 	movi	r5,12
   10000:	e13ffe17 	ldw	r4,-8(fp)
   10004:	00030d40 	call	30d4 <__mulsi3>
   10008:	1007883a 	mov	r3,r2
   1000c:	00800074 	movhi	r2,1
   10010:	10963d04 	addi	r2,r2,22772
   10014:	1885883a 	add	r2,r3,r2
   10018:	00000106 	br	10020 <fstat+0x44>
   1001c:	0005883a 	mov	r2,zero
   10020:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10024:	e0bffd17 	ldw	r2,-12(fp)
   10028:	10001026 	beq	r2,zero,1006c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1002c:	e0bffd17 	ldw	r2,-12(fp)
   10030:	10800017 	ldw	r2,0(r2)
   10034:	10800817 	ldw	r2,32(r2)
   10038:	10000726 	beq	r2,zero,10058 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1003c:	e0bffd17 	ldw	r2,-12(fp)
   10040:	10800017 	ldw	r2,0(r2)
   10044:	10800817 	ldw	r2,32(r2)
   10048:	e17fff17 	ldw	r5,-4(fp)
   1004c:	e13ffd17 	ldw	r4,-12(fp)
   10050:	103ee83a 	callr	r2
   10054:	00000a06 	br	10080 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10058:	e0bfff17 	ldw	r2,-4(fp)
   1005c:	00c80004 	movi	r3,8192
   10060:	10c00115 	stw	r3,4(r2)
      return 0;
   10064:	0005883a 	mov	r2,zero
   10068:	00000506 	br	10080 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1006c:	000ffa00 	call	ffa0 <alt_get_errno>
   10070:	1007883a 	mov	r3,r2
   10074:	00801444 	movi	r2,81
   10078:	18800015 	stw	r2,0(r3)
    return -1;
   1007c:	00bfffc4 	movi	r2,-1
  }
}
   10080:	e037883a 	mov	sp,fp
   10084:	dfc00117 	ldw	ra,4(sp)
   10088:	df000017 	ldw	fp,0(sp)
   1008c:	dec00204 	addi	sp,sp,8
   10090:	f800283a 	ret

00010094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10094:	defffe04 	addi	sp,sp,-8
   10098:	dfc00115 	stw	ra,4(sp)
   1009c:	df000015 	stw	fp,0(sp)
   100a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   100a4:	d0a00f17 	ldw	r2,-32708(gp)
   100a8:	10000326 	beq	r2,zero,100b8 <alt_get_errno+0x24>
   100ac:	d0a00f17 	ldw	r2,-32708(gp)
   100b0:	103ee83a 	callr	r2
   100b4:	00000106 	br	100bc <alt_get_errno+0x28>
   100b8:	d0a6fd04 	addi	r2,gp,-25612
}
   100bc:	e037883a 	mov	sp,fp
   100c0:	dfc00117 	ldw	ra,4(sp)
   100c4:	df000017 	ldw	fp,0(sp)
   100c8:	dec00204 	addi	sp,sp,8
   100cc:	f800283a 	ret

000100d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   100d0:	deffed04 	addi	sp,sp,-76
   100d4:	dfc01215 	stw	ra,72(sp)
   100d8:	df001115 	stw	fp,68(sp)
   100dc:	df001104 	addi	fp,sp,68
   100e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   100e4:	e0bfff17 	ldw	r2,-4(fp)
   100e8:	10000816 	blt	r2,zero,1010c <isatty+0x3c>
   100ec:	01400304 	movi	r5,12
   100f0:	e13fff17 	ldw	r4,-4(fp)
   100f4:	00030d40 	call	30d4 <__mulsi3>
   100f8:	1007883a 	mov	r3,r2
   100fc:	00800074 	movhi	r2,1
   10100:	10963d04 	addi	r2,r2,22772
   10104:	1885883a 	add	r2,r3,r2
   10108:	00000106 	br	10110 <isatty+0x40>
   1010c:	0005883a 	mov	r2,zero
   10110:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10114:	e0bfef17 	ldw	r2,-68(fp)
   10118:	10000e26 	beq	r2,zero,10154 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1011c:	e0bfef17 	ldw	r2,-68(fp)
   10120:	10800017 	ldw	r2,0(r2)
   10124:	10800817 	ldw	r2,32(r2)
   10128:	1000021e 	bne	r2,zero,10134 <isatty+0x64>
    {
      return 1;
   1012c:	00800044 	movi	r2,1
   10130:	00000d06 	br	10168 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10134:	e0bff004 	addi	r2,fp,-64
   10138:	100b883a 	mov	r5,r2
   1013c:	e13fff17 	ldw	r4,-4(fp)
   10140:	000ffdc0 	call	ffdc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10144:	e0bff117 	ldw	r2,-60(fp)
   10148:	10880020 	cmpeqi	r2,r2,8192
   1014c:	10803fcc 	andi	r2,r2,255
   10150:	00000506 	br	10168 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10154:	00100940 	call	10094 <alt_get_errno>
   10158:	1007883a 	mov	r3,r2
   1015c:	00801444 	movi	r2,81
   10160:	18800015 	stw	r2,0(r3)
    return 0;
   10164:	0005883a 	mov	r2,zero
  }
}
   10168:	e037883a 	mov	sp,fp
   1016c:	dfc00117 	ldw	ra,4(sp)
   10170:	df000017 	ldw	fp,0(sp)
   10174:	dec00204 	addi	sp,sp,8
   10178:	f800283a 	ret

0001017c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1017c:	defffc04 	addi	sp,sp,-16
   10180:	df000315 	stw	fp,12(sp)
   10184:	df000304 	addi	fp,sp,12
   10188:	e13ffd15 	stw	r4,-12(fp)
   1018c:	e17ffe15 	stw	r5,-8(fp)
   10190:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10194:	e0fffe17 	ldw	r3,-8(fp)
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	18800c26 	beq	r3,r2,101d0 <alt_load_section+0x54>
  {
    while( to != end )
   101a0:	00000806 	br	101c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   101a4:	e0bffe17 	ldw	r2,-8(fp)
   101a8:	10c00104 	addi	r3,r2,4
   101ac:	e0fffe15 	stw	r3,-8(fp)
   101b0:	e0fffd17 	ldw	r3,-12(fp)
   101b4:	19000104 	addi	r4,r3,4
   101b8:	e13ffd15 	stw	r4,-12(fp)
   101bc:	18c00017 	ldw	r3,0(r3)
   101c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   101c4:	e0fffe17 	ldw	r3,-8(fp)
   101c8:	e0bfff17 	ldw	r2,-4(fp)
   101cc:	18bff51e 	bne	r3,r2,101a4 <__alt_data_end+0xfc0101a4>
    {
      *to++ = *from++;
    }
  }
}
   101d0:	0001883a 	nop
   101d4:	e037883a 	mov	sp,fp
   101d8:	df000017 	ldw	fp,0(sp)
   101dc:	dec00104 	addi	sp,sp,4
   101e0:	f800283a 	ret

000101e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   101e4:	defffe04 	addi	sp,sp,-8
   101e8:	dfc00115 	stw	ra,4(sp)
   101ec:	df000015 	stw	fp,0(sp)
   101f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   101f4:	01800074 	movhi	r6,1
   101f8:	319ad904 	addi	r6,r6,27492
   101fc:	01400074 	movhi	r5,1
   10200:	2953fe04 	addi	r5,r5,20472
   10204:	01000074 	movhi	r4,1
   10208:	211ad904 	addi	r4,r4,27492
   1020c:	001017c0 	call	1017c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10210:	01800034 	movhi	r6,0
   10214:	31808c04 	addi	r6,r6,560
   10218:	01400034 	movhi	r5,0
   1021c:	29400804 	addi	r5,r5,32
   10220:	01000034 	movhi	r4,0
   10224:	21000804 	addi	r4,r4,32
   10228:	001017c0 	call	1017c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1022c:	01800074 	movhi	r6,1
   10230:	3193fe04 	addi	r6,r6,20472
   10234:	01400074 	movhi	r5,1
   10238:	29526004 	addi	r5,r5,18816
   1023c:	01000074 	movhi	r4,1
   10240:	21126004 	addi	r4,r4,18816
   10244:	001017c0 	call	1017c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10248:	001369c0 	call	1369c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1024c:	00138ec0 	call	138ec <alt_icache_flush_all>
}
   10250:	0001883a 	nop
   10254:	e037883a 	mov	sp,fp
   10258:	dfc00117 	ldw	ra,4(sp)
   1025c:	df000017 	ldw	fp,0(sp)
   10260:	dec00204 	addi	sp,sp,8
   10264:	f800283a 	ret

00010268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10268:	defffe04 	addi	sp,sp,-8
   1026c:	dfc00115 	stw	ra,4(sp)
   10270:	df000015 	stw	fp,0(sp)
   10274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10278:	d0a00f17 	ldw	r2,-32708(gp)
   1027c:	10000326 	beq	r2,zero,1028c <alt_get_errno+0x24>
   10280:	d0a00f17 	ldw	r2,-32708(gp)
   10284:	103ee83a 	callr	r2
   10288:	00000106 	br	10290 <alt_get_errno+0x28>
   1028c:	d0a6fd04 	addi	r2,gp,-25612
}
   10290:	e037883a 	mov	sp,fp
   10294:	dfc00117 	ldw	ra,4(sp)
   10298:	df000017 	ldw	fp,0(sp)
   1029c:	dec00204 	addi	sp,sp,8
   102a0:	f800283a 	ret

000102a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   102a4:	defff904 	addi	sp,sp,-28
   102a8:	dfc00615 	stw	ra,24(sp)
   102ac:	df000515 	stw	fp,20(sp)
   102b0:	df000504 	addi	fp,sp,20
   102b4:	e13ffd15 	stw	r4,-12(fp)
   102b8:	e17ffe15 	stw	r5,-8(fp)
   102bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   102c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	10000816 	blt	r2,zero,102ec <lseek+0x48>
   102cc:	01400304 	movi	r5,12
   102d0:	e13ffd17 	ldw	r4,-12(fp)
   102d4:	00030d40 	call	30d4 <__mulsi3>
   102d8:	1007883a 	mov	r3,r2
   102dc:	00800074 	movhi	r2,1
   102e0:	10963d04 	addi	r2,r2,22772
   102e4:	1885883a 	add	r2,r3,r2
   102e8:	00000106 	br	102f0 <lseek+0x4c>
   102ec:	0005883a 	mov	r2,zero
   102f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   102f4:	e0bffc17 	ldw	r2,-16(fp)
   102f8:	10001026 	beq	r2,zero,1033c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   102fc:	e0bffc17 	ldw	r2,-16(fp)
   10300:	10800017 	ldw	r2,0(r2)
   10304:	10800717 	ldw	r2,28(r2)
   10308:	10000926 	beq	r2,zero,10330 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1030c:	e0bffc17 	ldw	r2,-16(fp)
   10310:	10800017 	ldw	r2,0(r2)
   10314:	10800717 	ldw	r2,28(r2)
   10318:	e1bfff17 	ldw	r6,-4(fp)
   1031c:	e17ffe17 	ldw	r5,-8(fp)
   10320:	e13ffc17 	ldw	r4,-16(fp)
   10324:	103ee83a 	callr	r2
   10328:	e0bffb15 	stw	r2,-20(fp)
   1032c:	00000506 	br	10344 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10330:	00bfde84 	movi	r2,-134
   10334:	e0bffb15 	stw	r2,-20(fp)
   10338:	00000206 	br	10344 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1033c:	00bfebc4 	movi	r2,-81
   10340:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10344:	e0bffb17 	ldw	r2,-20(fp)
   10348:	1000070e 	bge	r2,zero,10368 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1034c:	00102680 	call	10268 <alt_get_errno>
   10350:	1007883a 	mov	r3,r2
   10354:	e0bffb17 	ldw	r2,-20(fp)
   10358:	0085c83a 	sub	r2,zero,r2
   1035c:	18800015 	stw	r2,0(r3)
    rc = -1;
   10360:	00bfffc4 	movi	r2,-1
   10364:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10368:	e0bffb17 	ldw	r2,-20(fp)
}
   1036c:	e037883a 	mov	sp,fp
   10370:	dfc00117 	ldw	ra,4(sp)
   10374:	df000017 	ldw	fp,0(sp)
   10378:	dec00204 	addi	sp,sp,8
   1037c:	f800283a 	ret

00010380 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10380:	defffd04 	addi	sp,sp,-12
   10384:	dfc00215 	stw	ra,8(sp)
   10388:	df000115 	stw	fp,4(sp)
   1038c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10390:	0009883a 	mov	r4,zero
   10394:	00109fc0 	call	109fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10398:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1039c:	0010a340 	call	10a34 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   103a0:	01800074 	movhi	r6,1
   103a4:	3193e904 	addi	r6,r6,20388
   103a8:	01400074 	movhi	r5,1
   103ac:	2953e904 	addi	r5,r5,20388
   103b0:	01000074 	movhi	r4,1
   103b4:	2113e904 	addi	r4,r4,20388
   103b8:	0013c900 	call	13c90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   103bc:	001379c0 	call	1379c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   103c0:	01000074 	movhi	r4,1
   103c4:	210dff04 	addi	r4,r4,14332
   103c8:	00144840 	call	14484 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   103cc:	d0a6fe17 	ldw	r2,-25608(gp)
   103d0:	d0e6ff17 	ldw	r3,-25604(gp)
   103d4:	d1270017 	ldw	r4,-25600(gp)
   103d8:	200d883a 	mov	r6,r4
   103dc:	180b883a 	mov	r5,r3
   103e0:	1009883a 	mov	r4,r2
   103e4:	0000d180 	call	d18 <main>
   103e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   103ec:	01000044 	movi	r4,1
   103f0:	000fe9c0 	call	fe9c <close>
  exit (result);
   103f4:	e13fff17 	ldw	r4,-4(fp)
   103f8:	00144980 	call	14498 <exit>

000103fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   103fc:	defffe04 	addi	sp,sp,-8
   10400:	df000115 	stw	fp,4(sp)
   10404:	df000104 	addi	fp,sp,4
   10408:	e13fff15 	stw	r4,-4(fp)
}
   1040c:	0001883a 	nop
   10410:	e037883a 	mov	sp,fp
   10414:	df000017 	ldw	fp,0(sp)
   10418:	dec00104 	addi	sp,sp,4
   1041c:	f800283a 	ret

00010420 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10420:	defffe04 	addi	sp,sp,-8
   10424:	df000115 	stw	fp,4(sp)
   10428:	df000104 	addi	fp,sp,4
   1042c:	e13fff15 	stw	r4,-4(fp)
}
   10430:	0001883a 	nop
   10434:	e037883a 	mov	sp,fp
   10438:	df000017 	ldw	fp,0(sp)
   1043c:	dec00104 	addi	sp,sp,4
   10440:	f800283a 	ret

00010444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10444:	defffe04 	addi	sp,sp,-8
   10448:	dfc00115 	stw	ra,4(sp)
   1044c:	df000015 	stw	fp,0(sp)
   10450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10454:	d0a00f17 	ldw	r2,-32708(gp)
   10458:	10000326 	beq	r2,zero,10468 <alt_get_errno+0x24>
   1045c:	d0a00f17 	ldw	r2,-32708(gp)
   10460:	103ee83a 	callr	r2
   10464:	00000106 	br	1046c <alt_get_errno+0x28>
   10468:	d0a6fd04 	addi	r2,gp,-25612
}
   1046c:	e037883a 	mov	sp,fp
   10470:	dfc00117 	ldw	ra,4(sp)
   10474:	df000017 	ldw	fp,0(sp)
   10478:	dec00204 	addi	sp,sp,8
   1047c:	f800283a 	ret

00010480 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10480:	defff904 	addi	sp,sp,-28
   10484:	dfc00615 	stw	ra,24(sp)
   10488:	df000515 	stw	fp,20(sp)
   1048c:	df000504 	addi	fp,sp,20
   10490:	e13ffd15 	stw	r4,-12(fp)
   10494:	e17ffe15 	stw	r5,-8(fp)
   10498:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1049c:	e0bffd17 	ldw	r2,-12(fp)
   104a0:	10000816 	blt	r2,zero,104c4 <read+0x44>
   104a4:	01400304 	movi	r5,12
   104a8:	e13ffd17 	ldw	r4,-12(fp)
   104ac:	00030d40 	call	30d4 <__mulsi3>
   104b0:	1007883a 	mov	r3,r2
   104b4:	00800074 	movhi	r2,1
   104b8:	10963d04 	addi	r2,r2,22772
   104bc:	1885883a 	add	r2,r3,r2
   104c0:	00000106 	br	104c8 <read+0x48>
   104c4:	0005883a 	mov	r2,zero
   104c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   104cc:	e0bffb17 	ldw	r2,-20(fp)
   104d0:	10002226 	beq	r2,zero,1055c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   104d4:	e0bffb17 	ldw	r2,-20(fp)
   104d8:	10800217 	ldw	r2,8(r2)
   104dc:	108000cc 	andi	r2,r2,3
   104e0:	10800060 	cmpeqi	r2,r2,1
   104e4:	1000181e 	bne	r2,zero,10548 <read+0xc8>
        (fd->dev->read))
   104e8:	e0bffb17 	ldw	r2,-20(fp)
   104ec:	10800017 	ldw	r2,0(r2)
   104f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   104f4:	10001426 	beq	r2,zero,10548 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   104f8:	e0bffb17 	ldw	r2,-20(fp)
   104fc:	10800017 	ldw	r2,0(r2)
   10500:	10800517 	ldw	r2,20(r2)
   10504:	e0ffff17 	ldw	r3,-4(fp)
   10508:	180d883a 	mov	r6,r3
   1050c:	e17ffe17 	ldw	r5,-8(fp)
   10510:	e13ffb17 	ldw	r4,-20(fp)
   10514:	103ee83a 	callr	r2
   10518:	e0bffc15 	stw	r2,-16(fp)
   1051c:	e0bffc17 	ldw	r2,-16(fp)
   10520:	1000070e 	bge	r2,zero,10540 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   10524:	00104440 	call	10444 <alt_get_errno>
   10528:	1007883a 	mov	r3,r2
   1052c:	e0bffc17 	ldw	r2,-16(fp)
   10530:	0085c83a 	sub	r2,zero,r2
   10534:	18800015 	stw	r2,0(r3)
          return -1;
   10538:	00bfffc4 	movi	r2,-1
   1053c:	00000c06 	br	10570 <read+0xf0>
        }
        return rval;
   10540:	e0bffc17 	ldw	r2,-16(fp)
   10544:	00000a06 	br	10570 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10548:	00104440 	call	10444 <alt_get_errno>
   1054c:	1007883a 	mov	r3,r2
   10550:	00800344 	movi	r2,13
   10554:	18800015 	stw	r2,0(r3)
   10558:	00000406 	br	1056c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1055c:	00104440 	call	10444 <alt_get_errno>
   10560:	1007883a 	mov	r3,r2
   10564:	00801444 	movi	r2,81
   10568:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1056c:	00bfffc4 	movi	r2,-1
}
   10570:	e037883a 	mov	sp,fp
   10574:	dfc00117 	ldw	ra,4(sp)
   10578:	df000017 	ldw	fp,0(sp)
   1057c:	dec00204 	addi	sp,sp,8
   10580:	f800283a 	ret

00010584 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10584:	defffc04 	addi	sp,sp,-16
   10588:	dfc00315 	stw	ra,12(sp)
   1058c:	df000215 	stw	fp,8(sp)
   10590:	dc000115 	stw	r16,4(sp)
   10594:	df000204 	addi	fp,sp,8
   10598:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1059c:	e0bffe17 	ldw	r2,-8(fp)
   105a0:	108000d0 	cmplti	r2,r2,3
   105a4:	1000111e 	bne	r2,zero,105ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   105a8:	04000074 	movhi	r16,1
   105ac:	84163d04 	addi	r16,r16,22772
   105b0:	e0bffe17 	ldw	r2,-8(fp)
   105b4:	01400304 	movi	r5,12
   105b8:	1009883a 	mov	r4,r2
   105bc:	00030d40 	call	30d4 <__mulsi3>
   105c0:	8085883a 	add	r2,r16,r2
   105c4:	10800204 	addi	r2,r2,8
   105c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   105cc:	04000074 	movhi	r16,1
   105d0:	84163d04 	addi	r16,r16,22772
   105d4:	e0bffe17 	ldw	r2,-8(fp)
   105d8:	01400304 	movi	r5,12
   105dc:	1009883a 	mov	r4,r2
   105e0:	00030d40 	call	30d4 <__mulsi3>
   105e4:	8085883a 	add	r2,r16,r2
   105e8:	10000015 	stw	zero,0(r2)
  }
}
   105ec:	0001883a 	nop
   105f0:	e6ffff04 	addi	sp,fp,-4
   105f4:	dfc00217 	ldw	ra,8(sp)
   105f8:	df000117 	ldw	fp,4(sp)
   105fc:	dc000017 	ldw	r16,0(sp)
   10600:	dec00304 	addi	sp,sp,12
   10604:	f800283a 	ret

00010608 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10608:	defff904 	addi	sp,sp,-28
   1060c:	df000615 	stw	fp,24(sp)
   10610:	df000604 	addi	fp,sp,24
   10614:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10618:	0005303a 	rdctl	r2,status
   1061c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10620:	e0fffe17 	ldw	r3,-8(fp)
   10624:	00bfff84 	movi	r2,-2
   10628:	1884703a 	and	r2,r3,r2
   1062c:	1001703a 	wrctl	status,r2
  
  return context;
   10630:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10634:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10638:	d0a01017 	ldw	r2,-32704(gp)
   1063c:	10c000c4 	addi	r3,r2,3
   10640:	00bfff04 	movi	r2,-4
   10644:	1884703a 	and	r2,r3,r2
   10648:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1064c:	d0e01017 	ldw	r3,-32704(gp)
   10650:	e0bfff17 	ldw	r2,-4(fp)
   10654:	1887883a 	add	r3,r3,r2
   10658:	00810034 	movhi	r2,1024
   1065c:	10800004 	addi	r2,r2,0
   10660:	10c0062e 	bgeu	r2,r3,1067c <sbrk+0x74>
   10664:	e0bffb17 	ldw	r2,-20(fp)
   10668:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1066c:	e0bffa17 	ldw	r2,-24(fp)
   10670:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10674:	00bfffc4 	movi	r2,-1
   10678:	00000b06 	br	106a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1067c:	d0a01017 	ldw	r2,-32704(gp)
   10680:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   10684:	d0e01017 	ldw	r3,-32704(gp)
   10688:	e0bfff17 	ldw	r2,-4(fp)
   1068c:	1885883a 	add	r2,r3,r2
   10690:	d0a01015 	stw	r2,-32704(gp)
   10694:	e0bffb17 	ldw	r2,-20(fp)
   10698:	e0bffc15 	stw	r2,-16(fp)
   1069c:	e0bffc17 	ldw	r2,-16(fp)
   106a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   106a4:	e0bffd17 	ldw	r2,-12(fp)
} 
   106a8:	e037883a 	mov	sp,fp
   106ac:	df000017 	ldw	fp,0(sp)
   106b0:	dec00104 	addi	sp,sp,4
   106b4:	f800283a 	ret

000106b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   106b8:	defffa04 	addi	sp,sp,-24
   106bc:	df000515 	stw	fp,20(sp)
   106c0:	df000504 	addi	fp,sp,20
   106c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106c8:	0005303a 	rdctl	r2,status
   106cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106d0:	e0fffc17 	ldw	r3,-16(fp)
   106d4:	00bfff84 	movi	r2,-2
   106d8:	1884703a 	and	r2,r3,r2
   106dc:	1001703a 	wrctl	status,r2
  
  return context;
   106e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   106e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   106e8:	e0bfff17 	ldw	r2,-4(fp)
   106ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   106f0:	e0bffd17 	ldw	r2,-12(fp)
   106f4:	10800017 	ldw	r2,0(r2)
   106f8:	e0fffd17 	ldw	r3,-12(fp)
   106fc:	18c00117 	ldw	r3,4(r3)
   10700:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10704:	e0bffd17 	ldw	r2,-12(fp)
   10708:	10800117 	ldw	r2,4(r2)
   1070c:	e0fffd17 	ldw	r3,-12(fp)
   10710:	18c00017 	ldw	r3,0(r3)
   10714:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10718:	e0bffd17 	ldw	r2,-12(fp)
   1071c:	e0fffd17 	ldw	r3,-12(fp)
   10720:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10724:	e0bffd17 	ldw	r2,-12(fp)
   10728:	e0fffd17 	ldw	r3,-12(fp)
   1072c:	10c00015 	stw	r3,0(r2)
   10730:	e0bffb17 	ldw	r2,-20(fp)
   10734:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10738:	e0bffe17 	ldw	r2,-8(fp)
   1073c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10740:	0001883a 	nop
   10744:	e037883a 	mov	sp,fp
   10748:	df000017 	ldw	fp,0(sp)
   1074c:	dec00104 	addi	sp,sp,4
   10750:	f800283a 	ret

00010754 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10754:	defffb04 	addi	sp,sp,-20
   10758:	dfc00415 	stw	ra,16(sp)
   1075c:	df000315 	stw	fp,12(sp)
   10760:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10764:	d0a01117 	ldw	r2,-32700(gp)
   10768:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1076c:	d0a70217 	ldw	r2,-25592(gp)
   10770:	10800044 	addi	r2,r2,1
   10774:	d0a70215 	stw	r2,-25592(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10778:	00002e06 	br	10834 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1077c:	e0bffd17 	ldw	r2,-12(fp)
   10780:	10800017 	ldw	r2,0(r2)
   10784:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	10800403 	ldbu	r2,16(r2)
   10790:	10803fcc 	andi	r2,r2,255
   10794:	10000426 	beq	r2,zero,107a8 <alt_tick+0x54>
   10798:	d0a70217 	ldw	r2,-25592(gp)
   1079c:	1000021e 	bne	r2,zero,107a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   107a8:	e0bffd17 	ldw	r2,-12(fp)
   107ac:	10800217 	ldw	r2,8(r2)
   107b0:	d0e70217 	ldw	r3,-25592(gp)
   107b4:	18801d36 	bltu	r3,r2,1082c <alt_tick+0xd8>
   107b8:	e0bffd17 	ldw	r2,-12(fp)
   107bc:	10800403 	ldbu	r2,16(r2)
   107c0:	10803fcc 	andi	r2,r2,255
   107c4:	1000191e 	bne	r2,zero,1082c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	10800317 	ldw	r2,12(r2)
   107d0:	e0fffd17 	ldw	r3,-12(fp)
   107d4:	18c00517 	ldw	r3,20(r3)
   107d8:	1809883a 	mov	r4,r3
   107dc:	103ee83a 	callr	r2
   107e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   107e4:	e0bfff17 	ldw	r2,-4(fp)
   107e8:	1000031e 	bne	r2,zero,107f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   107ec:	e13ffd17 	ldw	r4,-12(fp)
   107f0:	00106b80 	call	106b8 <alt_alarm_stop>
   107f4:	00000d06 	br	1082c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   107f8:	e0bffd17 	ldw	r2,-12(fp)
   107fc:	10c00217 	ldw	r3,8(r2)
   10800:	e0bfff17 	ldw	r2,-4(fp)
   10804:	1887883a 	add	r3,r3,r2
   10808:	e0bffd17 	ldw	r2,-12(fp)
   1080c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10810:	e0bffd17 	ldw	r2,-12(fp)
   10814:	10c00217 	ldw	r3,8(r2)
   10818:	d0a70217 	ldw	r2,-25592(gp)
   1081c:	1880032e 	bgeu	r3,r2,1082c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10820:	e0bffd17 	ldw	r2,-12(fp)
   10824:	00c00044 	movi	r3,1
   10828:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1082c:	e0bffe17 	ldw	r2,-8(fp)
   10830:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10834:	e0fffd17 	ldw	r3,-12(fp)
   10838:	d0a01104 	addi	r2,gp,-32700
   1083c:	18bfcf1e 	bne	r3,r2,1077c <__alt_data_end+0xfc01077c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10840:	0001883a 	nop
}
   10844:	0001883a 	nop
   10848:	e037883a 	mov	sp,fp
   1084c:	dfc00117 	ldw	ra,4(sp)
   10850:	df000017 	ldw	fp,0(sp)
   10854:	dec00204 	addi	sp,sp,8
   10858:	f800283a 	ret

0001085c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1085c:	defffd04 	addi	sp,sp,-12
   10860:	dfc00215 	stw	ra,8(sp)
   10864:	df000115 	stw	fp,4(sp)
   10868:	df000104 	addi	fp,sp,4
   1086c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10870:	e13fff17 	ldw	r4,-4(fp)
   10874:	00135440 	call	13544 <alt_busy_sleep>
}
   10878:	e037883a 	mov	sp,fp
   1087c:	dfc00117 	ldw	ra,4(sp)
   10880:	df000017 	ldw	fp,0(sp)
   10884:	dec00204 	addi	sp,sp,8
   10888:	f800283a 	ret

0001088c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1088c:	defffe04 	addi	sp,sp,-8
   10890:	dfc00115 	stw	ra,4(sp)
   10894:	df000015 	stw	fp,0(sp)
   10898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1089c:	d0a00f17 	ldw	r2,-32708(gp)
   108a0:	10000326 	beq	r2,zero,108b0 <alt_get_errno+0x24>
   108a4:	d0a00f17 	ldw	r2,-32708(gp)
   108a8:	103ee83a 	callr	r2
   108ac:	00000106 	br	108b4 <alt_get_errno+0x28>
   108b0:	d0a6fd04 	addi	r2,gp,-25612
}
   108b4:	e037883a 	mov	sp,fp
   108b8:	dfc00117 	ldw	ra,4(sp)
   108bc:	df000017 	ldw	fp,0(sp)
   108c0:	dec00204 	addi	sp,sp,8
   108c4:	f800283a 	ret

000108c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   108c8:	defff904 	addi	sp,sp,-28
   108cc:	dfc00615 	stw	ra,24(sp)
   108d0:	df000515 	stw	fp,20(sp)
   108d4:	df000504 	addi	fp,sp,20
   108d8:	e13ffd15 	stw	r4,-12(fp)
   108dc:	e17ffe15 	stw	r5,-8(fp)
   108e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   108e4:	e0bffd17 	ldw	r2,-12(fp)
   108e8:	10000816 	blt	r2,zero,1090c <write+0x44>
   108ec:	01400304 	movi	r5,12
   108f0:	e13ffd17 	ldw	r4,-12(fp)
   108f4:	00030d40 	call	30d4 <__mulsi3>
   108f8:	1007883a 	mov	r3,r2
   108fc:	00800074 	movhi	r2,1
   10900:	10963d04 	addi	r2,r2,22772
   10904:	1885883a 	add	r2,r3,r2
   10908:	00000106 	br	10910 <write+0x48>
   1090c:	0005883a 	mov	r2,zero
   10910:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10914:	e0bffb17 	ldw	r2,-20(fp)
   10918:	10002126 	beq	r2,zero,109a0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1091c:	e0bffb17 	ldw	r2,-20(fp)
   10920:	10800217 	ldw	r2,8(r2)
   10924:	108000cc 	andi	r2,r2,3
   10928:	10001826 	beq	r2,zero,1098c <write+0xc4>
   1092c:	e0bffb17 	ldw	r2,-20(fp)
   10930:	10800017 	ldw	r2,0(r2)
   10934:	10800617 	ldw	r2,24(r2)
   10938:	10001426 	beq	r2,zero,1098c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1093c:	e0bffb17 	ldw	r2,-20(fp)
   10940:	10800017 	ldw	r2,0(r2)
   10944:	10800617 	ldw	r2,24(r2)
   10948:	e0ffff17 	ldw	r3,-4(fp)
   1094c:	180d883a 	mov	r6,r3
   10950:	e17ffe17 	ldw	r5,-8(fp)
   10954:	e13ffb17 	ldw	r4,-20(fp)
   10958:	103ee83a 	callr	r2
   1095c:	e0bffc15 	stw	r2,-16(fp)
   10960:	e0bffc17 	ldw	r2,-16(fp)
   10964:	1000070e 	bge	r2,zero,10984 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10968:	001088c0 	call	1088c <alt_get_errno>
   1096c:	1007883a 	mov	r3,r2
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	0085c83a 	sub	r2,zero,r2
   10978:	18800015 	stw	r2,0(r3)
        return -1;
   1097c:	00bfffc4 	movi	r2,-1
   10980:	00000c06 	br	109b4 <write+0xec>
      }
      return rval;
   10984:	e0bffc17 	ldw	r2,-16(fp)
   10988:	00000a06 	br	109b4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1098c:	001088c0 	call	1088c <alt_get_errno>
   10990:	1007883a 	mov	r3,r2
   10994:	00800344 	movi	r2,13
   10998:	18800015 	stw	r2,0(r3)
   1099c:	00000406 	br	109b0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   109a0:	001088c0 	call	1088c <alt_get_errno>
   109a4:	1007883a 	mov	r3,r2
   109a8:	00801444 	movi	r2,81
   109ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   109b0:	00bfffc4 	movi	r2,-1
}
   109b4:	e037883a 	mov	sp,fp
   109b8:	dfc00117 	ldw	ra,4(sp)
   109bc:	df000017 	ldw	fp,0(sp)
   109c0:	dec00204 	addi	sp,sp,8
   109c4:	f800283a 	ret

000109c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   109c8:	defffd04 	addi	sp,sp,-12
   109cc:	dfc00215 	stw	ra,8(sp)
   109d0:	df000115 	stw	fp,4(sp)
   109d4:	df000104 	addi	fp,sp,4
   109d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   109dc:	d1600c04 	addi	r5,gp,-32720
   109e0:	e13fff17 	ldw	r4,-4(fp)
   109e4:	00136f80 	call	136f8 <alt_dev_llist_insert>
}
   109e8:	e037883a 	mov	sp,fp
   109ec:	dfc00117 	ldw	ra,4(sp)
   109f0:	df000017 	ldw	fp,0(sp)
   109f4:	dec00204 	addi	sp,sp,8
   109f8:	f800283a 	ret

000109fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   109fc:	defffd04 	addi	sp,sp,-12
   10a00:	dfc00215 	stw	ra,8(sp)
   10a04:	df000115 	stw	fp,4(sp)
   10a08:	df000104 	addi	fp,sp,4
   10a0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   10a10:	00141f80 	call	141f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10a14:	00800044 	movi	r2,1
   10a18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10a1c:	0001883a 	nop
   10a20:	e037883a 	mov	sp,fp
   10a24:	dfc00117 	ldw	ra,4(sp)
   10a28:	df000017 	ldw	fp,0(sp)
   10a2c:	dec00204 	addi	sp,sp,8
   10a30:	f800283a 	ret

00010a34 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10a34:	defffe04 	addi	sp,sp,-8
   10a38:	dfc00115 	stw	ra,4(sp)
   10a3c:	df000015 	stw	fp,0(sp)
   10a40:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10a44:	01c0fa04 	movi	r7,1000
   10a48:	01800084 	movi	r6,2
   10a4c:	000b883a 	mov	r5,zero
   10a50:	01010034 	movhi	r4,1024
   10a54:	21043004 	addi	r4,r4,4288
   10a58:	001339c0 	call	1339c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   10a5c:	01000074 	movhi	r4,1
   10a60:	21169d04 	addi	r4,r4,23156
   10a64:	0010cf80 	call	10cf8 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10a68:	01800044 	movi	r6,1
   10a6c:	000b883a 	mov	r5,zero
   10a70:	01000074 	movhi	r4,1
   10a74:	2116b504 	addi	r4,r4,23252
   10a78:	00128240 	call	12824 <altera_avalon_jtag_uart_init>
   10a7c:	01000074 	movhi	r4,1
   10a80:	2116ab04 	addi	r4,r4,23212
   10a84:	00109c80 	call	109c8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   10a88:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10a8c:	0001883a 	nop
}
   10a90:	0001883a 	nop
   10a94:	e037883a 	mov	sp,fp
   10a98:	dfc00117 	ldw	ra,4(sp)
   10a9c:	df000017 	ldw	fp,0(sp)
   10aa0:	dec00204 	addi	sp,sp,8
   10aa4:	f800283a 	ret

00010aa8 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   10aa8:	defff904 	addi	sp,sp,-28
   10aac:	dfc00615 	stw	ra,24(sp)
   10ab0:	df000515 	stw	fp,20(sp)
   10ab4:	df000504 	addi	fp,sp,20
   10ab8:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   10abc:	008000b4 	movhi	r2,2
   10ac0:	10a1a804 	addi	r2,r2,-31072
   10ac4:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   10ac8:	e0bfff17 	ldw	r2,-4(fp)
   10acc:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   10ad0:	e0bffc17 	ldw	r2,-16(fp)
   10ad4:	10800717 	ldw	r2,28(r2)
   10ad8:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   10adc:	e0bffd17 	ldw	r2,-12(fp)
   10ae0:	10800217 	ldw	r2,8(r2)
   10ae4:	10800098 	cmpnei	r2,r2,2
   10ae8:	1000251e 	bne	r2,zero,10b80 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   10aec:	e0bffd17 	ldw	r2,-12(fp)
   10af0:	10c00017 	ldw	r3,0(r2)
   10af4:	e0bffd17 	ldw	r2,-12(fp)
   10af8:	10800117 	ldw	r2,4(r2)
   10afc:	e13ffe04 	addi	r4,fp,-8
   10b00:	200f883a 	mov	r7,r4
   10b04:	100d883a 	mov	r6,r2
   10b08:	180b883a 	mov	r5,r3
   10b0c:	e13ffc17 	ldw	r4,-16(fp)
   10b10:	00112580 	call	11258 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   10b14:	e0bffd17 	ldw	r2,-12(fp)
   10b18:	10c00117 	ldw	r3,4(r2)
   10b1c:	e0bffe17 	ldw	r2,-8(fp)
   10b20:	1887c83a 	sub	r3,r3,r2
   10b24:	e0bffd17 	ldw	r2,-12(fp)
   10b28:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   10b2c:	e0bffd17 	ldw	r2,-12(fp)
   10b30:	10c00017 	ldw	r3,0(r2)
   10b34:	e0bffe17 	ldw	r2,-8(fp)
   10b38:	1887883a 	add	r3,r3,r2
   10b3c:	e0bffd17 	ldw	r2,-12(fp)
   10b40:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   10b44:	e0bffd17 	ldw	r2,-12(fp)
   10b48:	10800117 	ldw	r2,4(r2)
   10b4c:	10000c26 	beq	r2,zero,10b80 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   10b50:	01400704 	movi	r5,28
   10b54:	e13ffc17 	ldw	r4,-16(fp)
   10b58:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   10b5c:	01400084 	movi	r5,2
   10b60:	e13ffc17 	ldw	r4,-16(fp)
   10b64:	00124b40 	call	124b4 <alt_avalon_i2c_int_enable>
   10b68:	00000e06 	br	10ba4 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   10b6c:	e0bffb17 	ldw	r2,-20(fp)
   10b70:	10bfffc4 	addi	r2,r2,-1
   10b74:	e0bffb15 	stw	r2,-20(fp)
   10b78:	e0bffb17 	ldw	r2,-20(fp)
   10b7c:	10000426 	beq	r2,zero,10b90 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   10b80:	e13ffc17 	ldw	r4,-16(fp)
   10b84:	00112140 	call	11214 <alt_avalon_i2c_is_busy>
   10b88:	103ff81e 	bne	r2,zero,10b6c <__alt_data_end+0xfc010b6c>
   10b8c:	00000106 	br	10b94 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   10b90:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   10b94:	e13ffc17 	ldw	r4,-16(fp)
   10b98:	0010ebc0 	call	10ebc <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   10b9c:	e0bffd17 	ldw	r2,-12(fp)
   10ba0:	10000215 	stw	zero,8(r2)
}
   10ba4:	e037883a 	mov	sp,fp
   10ba8:	dfc00117 	ldw	ra,4(sp)
   10bac:	df000017 	ldw	fp,0(sp)
   10bb0:	dec00204 	addi	sp,sp,8
   10bb4:	f800283a 	ret

00010bb8 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   10bb8:	defffc04 	addi	sp,sp,-16
   10bbc:	dfc00315 	stw	ra,12(sp)
   10bc0:	df000215 	stw	fp,8(sp)
   10bc4:	df000204 	addi	fp,sp,8
   10bc8:	e13ffe15 	stw	r4,-8(fp)
   10bcc:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   10bd0:	e0bfff17 	ldw	r2,-4(fp)
   10bd4:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   10bd8:	e1ffff17 	ldw	r7,-4(fp)
   10bdc:	000d883a 	mov	r6,zero
   10be0:	01400074 	movhi	r5,1
   10be4:	2942aa04 	addi	r5,r5,2728
   10be8:	e13ffe17 	ldw	r4,-8(fp)
   10bec:	0010ca40 	call	10ca4 <alt_avalon_i2c_register_callback>
}
   10bf0:	0001883a 	nop
   10bf4:	e037883a 	mov	sp,fp
   10bf8:	dfc00117 	ldw	ra,4(sp)
   10bfc:	df000017 	ldw	fp,0(sp)
   10c00:	dec00204 	addi	sp,sp,8
   10c04:	f800283a 	ret

00010c08 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   10c08:	defff904 	addi	sp,sp,-28
   10c0c:	dfc00615 	stw	ra,24(sp)
   10c10:	df000515 	stw	fp,20(sp)
   10c14:	df000504 	addi	fp,sp,20
   10c18:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   10c1c:	e0bfff17 	ldw	r2,-4(fp)
   10c20:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   10c24:	014007c4 	movi	r5,31
   10c28:	e13ffb17 	ldw	r4,-20(fp)
   10c2c:	001244c0 	call	1244c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   10c30:	01400704 	movi	r5,28
   10c34:	e13ffb17 	ldw	r4,-20(fp)
   10c38:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   10c3c:	e0bffb17 	ldw	r2,-20(fp)
   10c40:	10800617 	ldw	r2,24(r2)
   10c44:	10001126 	beq	r2,zero,10c8c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c48:	0005303a 	rdctl	r2,status
   10c4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c50:	e0fffd17 	ldw	r3,-12(fp)
   10c54:	00bfff84 	movi	r2,-2
   10c58:	1884703a 	and	r2,r3,r2
   10c5c:	1001703a 	wrctl	status,r2
  
  return context;
   10c60:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   10c64:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   10c68:	e0bffb17 	ldw	r2,-20(fp)
   10c6c:	10800617 	ldw	r2,24(r2)
   10c70:	e13ffb17 	ldw	r4,-20(fp)
   10c74:	103ee83a 	callr	r2
   10c78:	e0bffc17 	ldw	r2,-16(fp)
   10c7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c80:	e0bffe17 	ldw	r2,-8(fp)
   10c84:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   10c88:	0001883a 	nop
   10c8c:	0001883a 	nop
}
   10c90:	e037883a 	mov	sp,fp
   10c94:	dfc00117 	ldw	ra,4(sp)
   10c98:	df000017 	ldw	fp,0(sp)
   10c9c:	dec00204 	addi	sp,sp,8
   10ca0:	f800283a 	ret

00010ca4 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   10ca4:	defffb04 	addi	sp,sp,-20
   10ca8:	df000415 	stw	fp,16(sp)
   10cac:	df000404 	addi	fp,sp,16
   10cb0:	e13ffc15 	stw	r4,-16(fp)
   10cb4:	e17ffd15 	stw	r5,-12(fp)
   10cb8:	e1bffe15 	stw	r6,-8(fp)
   10cbc:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   10cc0:	e0bffc17 	ldw	r2,-16(fp)
   10cc4:	e0fffd17 	ldw	r3,-12(fp)
   10cc8:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   10ccc:	e0bffc17 	ldw	r2,-16(fp)
   10cd0:	e0ffff17 	ldw	r3,-4(fp)
   10cd4:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   10cd8:	e0bffc17 	ldw	r2,-16(fp)
   10cdc:	e0fffe17 	ldw	r3,-8(fp)
   10ce0:	10c00815 	stw	r3,32(r2)

    return ;
   10ce4:	0001883a 	nop
}
   10ce8:	e037883a 	mov	sp,fp
   10cec:	df000017 	ldw	fp,0(sp)
   10cf0:	dec00104 	addi	sp,sp,4
   10cf4:	f800283a 	ret

00010cf8 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   10cf8:	defff704 	addi	sp,sp,-36
   10cfc:	dfc00815 	stw	ra,32(sp)
   10d00:	df000715 	stw	fp,28(sp)
   10d04:	df000704 	addi	fp,sp,28
   10d08:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   10d0c:	e13fff17 	ldw	r4,-4(fp)
   10d10:	0010ebc0 	call	10ebc <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   10d14:	014007c4 	movi	r5,31
   10d18:	e13fff17 	ldw	r4,-4(fp)
   10d1c:	001244c0 	call	1244c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   10d20:	01400704 	movi	r5,28
   10d24:	e13fff17 	ldw	r4,-4(fp)
   10d28:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   10d2c:	014000c4 	movi	r5,3
   10d30:	e13fff17 	ldw	r4,-4(fp)
   10d34:	00126580 	call	12658 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   10d38:	014000c4 	movi	r5,3
   10d3c:	e13fff17 	ldw	r4,-4(fp)
   10d40:	00125a80 	call	125a8 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   10d44:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   10d48:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   10d4c:	e0bffb04 	addi	r2,fp,-20
   10d50:	018000b4 	movhi	r6,2
   10d54:	31a1a804 	addi	r6,r6,-31072
   10d58:	100b883a 	mov	r5,r2
   10d5c:	e13fff17 	ldw	r4,-4(fp)
   10d60:	00111180 	call	11118 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   10d64:	e0bffb04 	addi	r2,fp,-20
   10d68:	100b883a 	mov	r5,r2
   10d6c:	e13fff17 	ldw	r4,-4(fp)
   10d70:	0010fb80 	call	10fb8 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   10d74:	d1601304 	addi	r5,gp,-32692
   10d78:	e13fff17 	ldw	r4,-4(fp)
   10d7c:	00136f80 	call	136f8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   10d80:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   10d84:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   10d88:	e0bffa17 	ldw	r2,-24(fp)
   10d8c:	10000c1e 	bne	r2,zero,10dc0 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   10d90:	e0bfff17 	ldw	r2,-4(fp)
   10d94:	10c00417 	ldw	r3,16(r2)
   10d98:	e0bfff17 	ldw	r2,-4(fp)
   10d9c:	10800517 	ldw	r2,20(r2)
   10da0:	d8000015 	stw	zero,0(sp)
   10da4:	e1ffff17 	ldw	r7,-4(fp)
   10da8:	01800074 	movhi	r6,1
   10dac:	31830204 	addi	r6,r6,3080
   10db0:	100b883a 	mov	r5,r2
   10db4:	1809883a 	mov	r4,r3
   10db8:	001390c0 	call	1390c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   10dbc:	00000406 	br	10dd0 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   10dc0:	01000074 	movhi	r4,1
   10dc4:	2113f604 	addi	r4,r4,20440
   10dc8:	0013f900 	call	13f90 <alt_printf>
    }

    return;
   10dcc:	0001883a 	nop

}
   10dd0:	e037883a 	mov	sp,fp
   10dd4:	dfc00117 	ldw	ra,4(sp)
   10dd8:	df000017 	ldw	fp,0(sp)
   10ddc:	dec00204 	addi	sp,sp,8
   10de0:	f800283a 	ret

00010de4 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   10de4:	defffc04 	addi	sp,sp,-16
   10de8:	dfc00315 	stw	ra,12(sp)
   10dec:	df000215 	stw	fp,8(sp)
   10df0:	df000204 	addi	fp,sp,8
   10df4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   10df8:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   10dfc:	d1601304 	addi	r5,gp,-32692
   10e00:	e13fff17 	ldw	r4,-4(fp)
   10e04:	001385c0 	call	1385c <alt_find_dev>
   10e08:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   10e0c:	e0bffe17 	ldw	r2,-8(fp)
}
   10e10:	e037883a 	mov	sp,fp
   10e14:	dfc00117 	ldw	ra,4(sp)
   10e18:	df000017 	ldw	fp,0(sp)
   10e1c:	dec00204 	addi	sp,sp,8
   10e20:	f800283a 	ret

00010e24 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   10e24:	defffc04 	addi	sp,sp,-16
   10e28:	df000315 	stw	fp,12(sp)
   10e2c:	df000304 	addi	fp,sp,12
   10e30:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   10e34:	e0bfff17 	ldw	r2,-4(fp)
   10e38:	10800717 	ldw	r2,28(r2)
   10e3c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   10e40:	e0bfff17 	ldw	r2,-4(fp)
   10e44:	10800317 	ldw	r2,12(r2)
   10e48:	10800204 	addi	r2,r2,8
   10e4c:	10800037 	ldwio	r2,0(r2)
   10e50:	1080004c 	andi	r2,r2,1
   10e54:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   10e58:	e0bffe17 	ldw	r2,-8(fp)
   10e5c:	10000226 	beq	r2,zero,10e68 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   10e60:	00bffe44 	movi	r2,-7
   10e64:	00001106 	br	10eac <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   10e68:	e0bfff17 	ldw	r2,-4(fp)
   10e6c:	10c00617 	ldw	r3,24(r2)
   10e70:	00800074 	movhi	r2,1
   10e74:	1082aa04 	addi	r2,r2,2728
   10e78:	1880021e 	bne	r3,r2,10e84 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   10e7c:	e0bffd17 	ldw	r2,-12(fp)
   10e80:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   10e84:	e0bfff17 	ldw	r2,-4(fp)
   10e88:	10800317 	ldw	r2,12(r2)
   10e8c:	10800204 	addi	r2,r2,8
   10e90:	e0ffff17 	ldw	r3,-4(fp)
   10e94:	18c00317 	ldw	r3,12(r3)
   10e98:	18c00204 	addi	r3,r3,8
   10e9c:	18c00037 	ldwio	r3,0(r3)
   10ea0:	18c00054 	ori	r3,r3,1
   10ea4:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   10ea8:	0005883a 	mov	r2,zero
}
   10eac:	e037883a 	mov	sp,fp
   10eb0:	df000017 	ldw	fp,0(sp)
   10eb4:	dec00104 	addi	sp,sp,4
   10eb8:	f800283a 	ret

00010ebc <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   10ebc:	defffe04 	addi	sp,sp,-8
   10ec0:	df000115 	stw	fp,4(sp)
   10ec4:	df000104 	addi	fp,sp,4
   10ec8:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   10ecc:	e0bfff17 	ldw	r2,-4(fp)
   10ed0:	10800317 	ldw	r2,12(r2)
   10ed4:	10800204 	addi	r2,r2,8
   10ed8:	e0ffff17 	ldw	r3,-4(fp)
   10edc:	18c00317 	ldw	r3,12(r3)
   10ee0:	18c00204 	addi	r3,r3,8
   10ee4:	19000037 	ldwio	r4,0(r3)
   10ee8:	00ffff84 	movi	r3,-2
   10eec:	20c6703a 	and	r3,r4,r3
   10ef0:	10c00035 	stwio	r3,0(r2)

}
   10ef4:	0001883a 	nop
   10ef8:	e037883a 	mov	sp,fp
   10efc:	df000017 	ldw	fp,0(sp)
   10f00:	dec00104 	addi	sp,sp,4
   10f04:	f800283a 	ret

00010f08 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   10f08:	defffd04 	addi	sp,sp,-12
   10f0c:	df000215 	stw	fp,8(sp)
   10f10:	df000204 	addi	fp,sp,8
   10f14:	e13ffe15 	stw	r4,-8(fp)
   10f18:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   10f1c:	e0bffe17 	ldw	r2,-8(fp)
   10f20:	10c00d17 	ldw	r3,52(r2)
   10f24:	e0bfff17 	ldw	r2,-4(fp)
   10f28:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   10f2c:	e0bffe17 	ldw	r2,-8(fp)
   10f30:	10800317 	ldw	r2,12(r2)
   10f34:	10800204 	addi	r2,r2,8
   10f38:	10800037 	ldwio	r2,0(r2)
   10f3c:	1080008c 	andi	r2,r2,2
   10f40:	1005d07a 	srai	r2,r2,1
   10f44:	1007883a 	mov	r3,r2
   10f48:	e0bfff17 	ldw	r2,-4(fp)
   10f4c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   10f50:	e0bffe17 	ldw	r2,-8(fp)
   10f54:	10800317 	ldw	r2,12(r2)
   10f58:	10800904 	addi	r2,r2,36
   10f5c:	10800037 	ldwio	r2,0(r2)
   10f60:	1007883a 	mov	r3,r2
   10f64:	e0bfff17 	ldw	r2,-4(fp)
   10f68:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   10f6c:	e0bffe17 	ldw	r2,-8(fp)
   10f70:	10800317 	ldw	r2,12(r2)
   10f74:	10800804 	addi	r2,r2,32
   10f78:	10800037 	ldwio	r2,0(r2)
   10f7c:	1007883a 	mov	r3,r2
   10f80:	e0bfff17 	ldw	r2,-4(fp)
   10f84:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   10f88:	e0bffe17 	ldw	r2,-8(fp)
   10f8c:	10800317 	ldw	r2,12(r2)
   10f90:	10800a04 	addi	r2,r2,40
   10f94:	10800037 	ldwio	r2,0(r2)
   10f98:	1007883a 	mov	r3,r2
   10f9c:	e0bfff17 	ldw	r2,-4(fp)
   10fa0:	10c0030d 	sth	r3,12(r2)
}
   10fa4:	0001883a 	nop
   10fa8:	e037883a 	mov	sp,fp
   10fac:	df000017 	ldw	fp,0(sp)
   10fb0:	dec00104 	addi	sp,sp,4
   10fb4:	f800283a 	ret

00010fb8 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   10fb8:	defffd04 	addi	sp,sp,-12
   10fbc:	df000215 	stw	fp,8(sp)
   10fc0:	df000204 	addi	fp,sp,8
   10fc4:	e13ffe15 	stw	r4,-8(fp)
   10fc8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   10fcc:	e0bfff17 	ldw	r2,-4(fp)
   10fd0:	10c00017 	ldw	r3,0(r2)
   10fd4:	e0bffe17 	ldw	r2,-8(fp)
   10fd8:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   10fdc:	e0bffe17 	ldw	r2,-8(fp)
   10fe0:	10800317 	ldw	r2,12(r2)
   10fe4:	10c00204 	addi	r3,r2,8
   10fe8:	e0bffe17 	ldw	r2,-8(fp)
   10fec:	10800317 	ldw	r2,12(r2)
   10ff0:	10800204 	addi	r2,r2,8
   10ff4:	10800037 	ldwio	r2,0(r2)
   10ff8:	1009883a 	mov	r4,r2
   10ffc:	00bfff44 	movi	r2,-3
   11000:	2088703a 	and	r4,r4,r2
   11004:	e0bfff17 	ldw	r2,-4(fp)
   11008:	10800117 	ldw	r2,4(r2)
   1100c:	1085883a 	add	r2,r2,r2
   11010:	1080008c 	andi	r2,r2,2
   11014:	2084b03a 	or	r2,r4,r2
   11018:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   1101c:	e0bffe17 	ldw	r2,-8(fp)
   11020:	10800317 	ldw	r2,12(r2)
   11024:	10800904 	addi	r2,r2,36
   11028:	e0ffff17 	ldw	r3,-4(fp)
   1102c:	18c0020b 	ldhu	r3,8(r3)
   11030:	18ffffcc 	andi	r3,r3,65535
   11034:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   11038:	e0bffe17 	ldw	r2,-8(fp)
   1103c:	10800317 	ldw	r2,12(r2)
   11040:	10800804 	addi	r2,r2,32
   11044:	e0ffff17 	ldw	r3,-4(fp)
   11048:	18c0028b 	ldhu	r3,10(r3)
   1104c:	18ffffcc 	andi	r3,r3,65535
   11050:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   11054:	e0bffe17 	ldw	r2,-8(fp)
   11058:	10800317 	ldw	r2,12(r2)
   1105c:	10800a04 	addi	r2,r2,40
   11060:	e0ffff17 	ldw	r3,-4(fp)
   11064:	18c0030b 	ldhu	r3,12(r3)
   11068:	18ffffcc 	andi	r3,r3,65535
   1106c:	10c00035 	stwio	r3,0(r2)
}
   11070:	0001883a 	nop
   11074:	e037883a 	mov	sp,fp
   11078:	df000017 	ldw	fp,0(sp)
   1107c:	dec00104 	addi	sp,sp,4
   11080:	f800283a 	ret

00011084 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   11084:	defffb04 	addi	sp,sp,-20
   11088:	dfc00415 	stw	ra,16(sp)
   1108c:	df000315 	stw	fp,12(sp)
   11090:	df000304 	addi	fp,sp,12
   11094:	e13ffd15 	stw	r4,-12(fp)
   11098:	e17ffe15 	stw	r5,-8(fp)
   1109c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   110a0:	e0bffe17 	ldw	r2,-8(fp)
   110a4:	1080028b 	ldhu	r2,10(r2)
   110a8:	10bfffcc 	andi	r2,r2,65535
   110ac:	10000426 	beq	r2,zero,110c0 <alt_avalon_i2c_master_config_speed_get+0x3c>
   110b0:	e0bffe17 	ldw	r2,-8(fp)
   110b4:	1080020b 	ldhu	r2,8(r2)
   110b8:	10bfffcc 	andi	r2,r2,65535
   110bc:	1000021e 	bne	r2,zero,110c8 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   110c0:	00bfff44 	movi	r2,-3
   110c4:	00000f06 	br	11104 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   110c8:	e0bffd17 	ldw	r2,-12(fp)
   110cc:	11000c17 	ldw	r4,48(r2)
   110d0:	e0bffe17 	ldw	r2,-8(fp)
   110d4:	1080028b 	ldhu	r2,10(r2)
   110d8:	10ffffcc 	andi	r3,r2,65535
   110dc:	e0bffe17 	ldw	r2,-8(fp)
   110e0:	1080020b 	ldhu	r2,8(r2)
   110e4:	10bfffcc 	andi	r2,r2,65535
   110e8:	1885883a 	add	r2,r3,r2
   110ec:	100b883a 	mov	r5,r2
   110f0:	00030180 	call	3018 <__udivsi3>
   110f4:	1007883a 	mov	r3,r2
   110f8:	e0bfff17 	ldw	r2,-4(fp)
   110fc:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   11100:	0005883a 	mov	r2,zero
}
   11104:	e037883a 	mov	sp,fp
   11108:	dfc00117 	ldw	ra,4(sp)
   1110c:	df000017 	ldw	fp,0(sp)
   11110:	dec00204 	addi	sp,sp,8
   11114:	f800283a 	ret

00011118 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   11118:	defff904 	addi	sp,sp,-28
   1111c:	dfc00615 	stw	ra,24(sp)
   11120:	df000515 	stw	fp,20(sp)
   11124:	df000504 	addi	fp,sp,20
   11128:	e13ffd15 	stw	r4,-12(fp)
   1112c:	e17ffe15 	stw	r5,-8(fp)
   11130:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   11134:	e0ffff17 	ldw	r3,-4(fp)
   11138:	008001b4 	movhi	r2,6
   1113c:	1086a004 	addi	r2,r2,6784
   11140:	10c00436 	bltu	r2,r3,11154 <alt_avalon_i2c_master_config_speed_set+0x3c>
   11144:	e0bfff17 	ldw	r2,-4(fp)
   11148:	10000226 	beq	r2,zero,11154 <alt_avalon_i2c_master_config_speed_set+0x3c>
   1114c:	e0bfff17 	ldw	r2,-4(fp)
   11150:	1000021e 	bne	r2,zero,1115c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   11154:	00bfff04 	movi	r2,-4
   11158:	00002906 	br	11200 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   1115c:	e0bffd17 	ldw	r2,-12(fp)
   11160:	10c00c17 	ldw	r3,48(r2)
   11164:	e0bfff17 	ldw	r2,-4(fp)
   11168:	1085883a 	add	r2,r2,r2
   1116c:	100b883a 	mov	r5,r2
   11170:	1809883a 	mov	r4,r3
   11174:	00030180 	call	3018 <__udivsi3>
   11178:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   1117c:	e0bffb17 	ldw	r2,-20(fp)
   11180:	10800f04 	addi	r2,r2,60
   11184:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   11188:	e0bffb17 	ldw	r2,-20(fp)
   1118c:	10bff104 	addi	r2,r2,-60
   11190:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   11194:	e0ffff17 	ldw	r3,-4(fp)
   11198:	008000b4 	movhi	r2,2
   1119c:	10a1a804 	addi	r2,r2,-31072
   111a0:	10c0042e 	bgeu	r2,r3,111b4 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   111a4:	e0bffe17 	ldw	r2,-8(fp)
   111a8:	00c00044 	movi	r3,1
   111ac:	10c00115 	stw	r3,4(r2)
   111b0:	00000206 	br	111bc <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   111b4:	e0bffe17 	ldw	r2,-8(fp)
   111b8:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   111bc:	e0bffb17 	ldw	r2,-20(fp)
   111c0:	1007883a 	mov	r3,r2
   111c4:	e0bffe17 	ldw	r2,-8(fp)
   111c8:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   111cc:	e0bffc17 	ldw	r2,-16(fp)
   111d0:	1007883a 	mov	r3,r2
   111d4:	e0bffe17 	ldw	r2,-8(fp)
   111d8:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   111dc:	e0bffb17 	ldw	r2,-20(fp)
   111e0:	1007883a 	mov	r3,r2
   111e4:	e0bffb17 	ldw	r2,-20(fp)
   111e8:	1004d07a 	srli	r2,r2,1
   111ec:	1885c83a 	sub	r2,r3,r2
   111f0:	1007883a 	mov	r3,r2
   111f4:	e0bffe17 	ldw	r2,-8(fp)
   111f8:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   111fc:	0005883a 	mov	r2,zero

}
   11200:	e037883a 	mov	sp,fp
   11204:	dfc00117 	ldw	ra,4(sp)
   11208:	df000017 	ldw	fp,0(sp)
   1120c:	dec00204 	addi	sp,sp,8
   11210:	f800283a 	ret

00011214 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11214:	defffe04 	addi	sp,sp,-8
   11218:	df000115 	stw	fp,4(sp)
   1121c:	df000104 	addi	fp,sp,4
   11220:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   11224:	e0bfff17 	ldw	r2,-4(fp)
   11228:	10800317 	ldw	r2,12(r2)
   1122c:	10800504 	addi	r2,r2,20
   11230:	10800037 	ldwio	r2,0(r2)
   11234:	1080004c 	andi	r2,r2,1
   11238:	10000226 	beq	r2,zero,11244 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   1123c:	00800044 	movi	r2,1
   11240:	00000106 	br	11248 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   11244:	0005883a 	mov	r2,zero
}
   11248:	e037883a 	mov	sp,fp
   1124c:	df000017 	ldw	fp,0(sp)
   11250:	dec00104 	addi	sp,sp,4
   11254:	f800283a 	ret

00011258 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   11258:	defffb04 	addi	sp,sp,-20
   1125c:	df000415 	stw	fp,16(sp)
   11260:	df000404 	addi	fp,sp,16
   11264:	e13ffc15 	stw	r4,-16(fp)
   11268:	e17ffd15 	stw	r5,-12(fp)
   1126c:	e1bffe15 	stw	r6,-8(fp)
   11270:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   11274:	e0bfff17 	ldw	r2,-4(fp)
   11278:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1127c:	00001406 	br	112d0 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11280:	e0bfff17 	ldw	r2,-4(fp)
   11284:	10800017 	ldw	r2,0(r2)
   11288:	e0fffd17 	ldw	r3,-12(fp)
   1128c:	1885883a 	add	r2,r3,r2
   11290:	e0fffc17 	ldw	r3,-16(fp)
   11294:	18c00317 	ldw	r3,12(r3)
   11298:	18c00104 	addi	r3,r3,4
   1129c:	18c00037 	ldwio	r3,0(r3)
   112a0:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   112a4:	e0bfff17 	ldw	r2,-4(fp)
   112a8:	10800017 	ldw	r2,0(r2)
   112ac:	10c00044 	addi	r3,r2,1
   112b0:	e0bfff17 	ldw	r2,-4(fp)
   112b4:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   112b8:	e0bfff17 	ldw	r2,-4(fp)
   112bc:	10c00017 	ldw	r3,0(r2)
   112c0:	e0bffe17 	ldw	r2,-8(fp)
   112c4:	1880021e 	bne	r3,r2,112d0 <alt_avalon_i2c_rx_read_available+0x78>
   112c8:	e0bffe17 	ldw	r2,-8(fp)
   112cc:	1000061e 	bne	r2,zero,112e8 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   112d0:	e0bffc17 	ldw	r2,-16(fp)
   112d4:	10800317 	ldw	r2,12(r2)
   112d8:	10800704 	addi	r2,r2,28
   112dc:	10800037 	ldwio	r2,0(r2)
   112e0:	103fe71e 	bne	r2,zero,11280 <__alt_data_end+0xfc011280>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   112e4:	00000106 	br	112ec <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   112e8:	0001883a 	nop
    }
}
   112ec:	0001883a 	nop
   112f0:	e037883a 	mov	sp,fp
   112f4:	df000017 	ldw	fp,0(sp)
   112f8:	dec00104 	addi	sp,sp,4
   112fc:	f800283a 	ret

00011300 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   11300:	defffa04 	addi	sp,sp,-24
   11304:	dfc00515 	stw	ra,20(sp)
   11308:	df000415 	stw	fp,16(sp)
   1130c:	df000404 	addi	fp,sp,16
   11310:	e13ffe15 	stw	r4,-8(fp)
   11314:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   11318:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   1131c:	008000b4 	movhi	r2,2
   11320:	10a1a804 	addi	r2,r2,-31072
   11324:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11328:	00000d06 	br	11360 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   1132c:	e0bffd17 	ldw	r2,-12(fp)
   11330:	108002a8 	cmpgeui	r2,r2,10
   11334:	1000021e 	bne	r2,zero,11340 <alt_avalon_i2c_rx_read+0x40>
   11338:	0109c404 	movi	r4,10000
   1133c:	00135440 	call	13544 <alt_busy_sleep>
      if (--timeout == 0)
   11340:	e0bffd17 	ldw	r2,-12(fp)
   11344:	10bfffc4 	addi	r2,r2,-1
   11348:	e0bffd15 	stw	r2,-12(fp)
   1134c:	e0bffd17 	ldw	r2,-12(fp)
   11350:	1000031e 	bne	r2,zero,11360 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   11354:	00bfff84 	movi	r2,-2
   11358:	e0bffc15 	stw	r2,-16(fp)
        break;
   1135c:	00000506 	br	11374 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11360:	e0bffe17 	ldw	r2,-8(fp)
   11364:	10800317 	ldw	r2,12(r2)
   11368:	10800704 	addi	r2,r2,28
   1136c:	10800037 	ldwio	r2,0(r2)
   11370:	103fee26 	beq	r2,zero,1132c <__alt_data_end+0xfc01132c>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11374:	e0bffe17 	ldw	r2,-8(fp)
   11378:	10800317 	ldw	r2,12(r2)
   1137c:	10800104 	addi	r2,r2,4
   11380:	10800037 	ldwio	r2,0(r2)
   11384:	1007883a 	mov	r3,r2
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	10c00005 	stb	r3,0(r2)
        
    return status;
   11390:	e0bffc17 	ldw	r2,-16(fp)
}
   11394:	e037883a 	mov	sp,fp
   11398:	dfc00117 	ldw	ra,4(sp)
   1139c:	df000017 	ldw	fp,0(sp)
   113a0:	dec00204 	addi	sp,sp,8
   113a4:	f800283a 	ret

000113a8 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   113a8:	defff804 	addi	sp,sp,-32
   113ac:	dfc00715 	stw	ra,28(sp)
   113b0:	df000615 	stw	fp,24(sp)
   113b4:	df000604 	addi	fp,sp,24
   113b8:	e13ffc15 	stw	r4,-16(fp)
   113bc:	2809883a 	mov	r4,r5
   113c0:	3007883a 	mov	r3,r6
   113c4:	3805883a 	mov	r2,r7
   113c8:	e13ffd05 	stb	r4,-12(fp)
   113cc:	e0fffe05 	stb	r3,-8(fp)
   113d0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   113d4:	0089c404 	movi	r2,10000
   113d8:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   113dc:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   113e0:	00000c06 	br	11414 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   113e4:	e0bffa17 	ldw	r2,-24(fp)
   113e8:	108002a8 	cmpgeui	r2,r2,10
   113ec:	1000021e 	bne	r2,zero,113f8 <alt_avalon_i2c_cmd_write+0x50>
   113f0:	0109c404 	movi	r4,10000
   113f4:	00135440 	call	13544 <alt_busy_sleep>
      if (--timeout == 0)
   113f8:	e0bffa17 	ldw	r2,-24(fp)
   113fc:	10bfffc4 	addi	r2,r2,-1
   11400:	e0bffa15 	stw	r2,-24(fp)
   11404:	e0bffa17 	ldw	r2,-24(fp)
   11408:	1000021e 	bne	r2,zero,11414 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   1140c:	00bfff84 	movi	r2,-2
   11410:	00001906 	br	11478 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   11414:	e0bffc17 	ldw	r2,-16(fp)
   11418:	10800317 	ldw	r2,12(r2)
   1141c:	10800404 	addi	r2,r2,16
   11420:	10800037 	ldwio	r2,0(r2)
   11424:	1080004c 	andi	r2,r2,1
   11428:	103fee26 	beq	r2,zero,113e4 <__alt_data_end+0xfc0113e4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   1142c:	e0bffc17 	ldw	r2,-16(fp)
   11430:	10800317 	ldw	r2,12(r2)
   11434:	e13ffd03 	ldbu	r4,-12(fp)
   11438:	e0fffe03 	ldbu	r3,-8(fp)
   1143c:	1806927a 	slli	r3,r3,9
   11440:	20c8b03a 	or	r4,r4,r3
   11444:	e0ffff03 	ldbu	r3,-4(fp)
   11448:	1806923a 	slli	r3,r3,8
   1144c:	20c6b03a 	or	r3,r4,r3
   11450:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   11454:	e0bffb04 	addi	r2,fp,-20
   11458:	100b883a 	mov	r5,r2
   1145c:	e13ffc17 	ldw	r4,-16(fp)
   11460:	00115e80 	call	115e8 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   11464:	e0bffb04 	addi	r2,fp,-20
   11468:	100b883a 	mov	r5,r2
   1146c:	e13ffc17 	ldw	r4,-16(fp)
   11470:	00116340 	call	11634 <alt_avalon_i2c_check_arblost>
    
    return status;
   11474:	e0bffb17 	ldw	r2,-20(fp)
}
   11478:	e037883a 	mov	sp,fp
   1147c:	dfc00117 	ldw	ra,4(sp)
   11480:	df000017 	ldw	fp,0(sp)
   11484:	dec00204 	addi	sp,sp,8
   11488:	f800283a 	ret

0001148c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   1148c:	defffa04 	addi	sp,sp,-24
   11490:	dfc00515 	stw	ra,20(sp)
   11494:	df000415 	stw	fp,16(sp)
   11498:	df000404 	addi	fp,sp,16
   1149c:	e13ffd15 	stw	r4,-12(fp)
   114a0:	e17ffe15 	stw	r5,-8(fp)
   114a4:	3005883a 	mov	r2,r6
   114a8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   114ac:	e0bffd17 	ldw	r2,-12(fp)
   114b0:	10800d17 	ldw	r2,52(r2)
   114b4:	10800058 	cmpnei	r2,r2,1
   114b8:	10001c1e 	bne	r2,zero,1152c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   114bc:	e0bffd17 	ldw	r2,-12(fp)
   114c0:	10800917 	ldw	r2,36(r2)
   114c4:	109e0014 	ori	r2,r2,30720
   114c8:	1004d1fa 	srli	r2,r2,7
   114cc:	1007883a 	mov	r3,r2
   114d0:	00bfff84 	movi	r2,-2
   114d4:	1884703a 	and	r2,r3,r2
   114d8:	1007883a 	mov	r3,r2
   114dc:	e0bffe17 	ldw	r2,-8(fp)
   114e0:	1884b03a 	or	r2,r3,r2
   114e4:	10803fcc 	andi	r2,r2,255
   114e8:	e0ffff03 	ldbu	r3,-4(fp)
   114ec:	000f883a 	mov	r7,zero
   114f0:	180d883a 	mov	r6,r3
   114f4:	100b883a 	mov	r5,r2
   114f8:	e13ffd17 	ldw	r4,-12(fp)
   114fc:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   11500:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   11504:	e0bffd17 	ldw	r2,-12(fp)
   11508:	10800917 	ldw	r2,36(r2)
   1150c:	10803fcc 	andi	r2,r2,255
   11510:	000f883a 	mov	r7,zero
   11514:	000d883a 	mov	r6,zero
   11518:	100b883a 	mov	r5,r2
   1151c:	e13ffd17 	ldw	r4,-12(fp)
   11520:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   11524:	e0bffc15 	stw	r2,-16(fp)
   11528:	00000e06 	br	11564 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   1152c:	e0bffd17 	ldw	r2,-12(fp)
   11530:	10800917 	ldw	r2,36(r2)
   11534:	1085883a 	add	r2,r2,r2
   11538:	1007883a 	mov	r3,r2
   1153c:	e0bffe17 	ldw	r2,-8(fp)
   11540:	1884b03a 	or	r2,r3,r2
   11544:	10803fcc 	andi	r2,r2,255
   11548:	e0ffff03 	ldbu	r3,-4(fp)
   1154c:	000f883a 	mov	r7,zero
   11550:	180d883a 	mov	r6,r3
   11554:	100b883a 	mov	r5,r2
   11558:	e13ffd17 	ldw	r4,-12(fp)
   1155c:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   11560:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   11564:	e0bffc17 	ldw	r2,-16(fp)
}
   11568:	e037883a 	mov	sp,fp
   1156c:	dfc00117 	ldw	ra,4(sp)
   11570:	df000017 	ldw	fp,0(sp)
   11574:	dec00204 	addi	sp,sp,8
   11578:	f800283a 	ret

0001157c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   1157c:	defffd04 	addi	sp,sp,-12
   11580:	df000215 	stw	fp,8(sp)
   11584:	df000204 	addi	fp,sp,8
   11588:	e13ffe15 	stw	r4,-8(fp)
   1158c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   11590:	e0bffe17 	ldw	r2,-8(fp)
   11594:	10c00917 	ldw	r3,36(r2)
   11598:	e0bfff17 	ldw	r2,-4(fp)
   1159c:	10c00015 	stw	r3,0(r2)
}
   115a0:	0001883a 	nop
   115a4:	e037883a 	mov	sp,fp
   115a8:	df000017 	ldw	fp,0(sp)
   115ac:	dec00104 	addi	sp,sp,4
   115b0:	f800283a 	ret

000115b4 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   115b4:	defffd04 	addi	sp,sp,-12
   115b8:	df000215 	stw	fp,8(sp)
   115bc:	df000204 	addi	fp,sp,8
   115c0:	e13ffe15 	stw	r4,-8(fp)
   115c4:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   115c8:	e0bffe17 	ldw	r2,-8(fp)
   115cc:	e0ffff17 	ldw	r3,-4(fp)
   115d0:	10c00915 	stw	r3,36(r2)
}
   115d4:	0001883a 	nop
   115d8:	e037883a 	mov	sp,fp
   115dc:	df000017 	ldw	fp,0(sp)
   115e0:	dec00104 	addi	sp,sp,4
   115e4:	f800283a 	ret

000115e8 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   115e8:	defffd04 	addi	sp,sp,-12
   115ec:	df000215 	stw	fp,8(sp)
   115f0:	df000204 	addi	fp,sp,8
   115f4:	e13ffe15 	stw	r4,-8(fp)
   115f8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   115fc:	e0bffe17 	ldw	r2,-8(fp)
   11600:	10800317 	ldw	r2,12(r2)
   11604:	10800404 	addi	r2,r2,16
   11608:	10800037 	ldwio	r2,0(r2)
   1160c:	1080010c 	andi	r2,r2,4
   11610:	10000326 	beq	r2,zero,11620 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   11614:	e0bfff17 	ldw	r2,-4(fp)
   11618:	00fffec4 	movi	r3,-5
   1161c:	10c00015 	stw	r3,0(r2)
    }
}
   11620:	0001883a 	nop
   11624:	e037883a 	mov	sp,fp
   11628:	df000017 	ldw	fp,0(sp)
   1162c:	dec00104 	addi	sp,sp,4
   11630:	f800283a 	ret

00011634 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   11634:	defffd04 	addi	sp,sp,-12
   11638:	df000215 	stw	fp,8(sp)
   1163c:	df000204 	addi	fp,sp,8
   11640:	e13ffe15 	stw	r4,-8(fp)
   11644:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   11648:	e0bffe17 	ldw	r2,-8(fp)
   1164c:	10800317 	ldw	r2,12(r2)
   11650:	10800404 	addi	r2,r2,16
   11654:	10800037 	ldwio	r2,0(r2)
   11658:	1080020c 	andi	r2,r2,8
   1165c:	10000326 	beq	r2,zero,1166c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   11660:	e0bfff17 	ldw	r2,-4(fp)
   11664:	00fffe84 	movi	r3,-6
   11668:	10c00015 	stw	r3,0(r2)
    }
}
   1166c:	0001883a 	nop
   11670:	e037883a 	mov	sp,fp
   11674:	df000017 	ldw	fp,0(sp)
   11678:	dec00104 	addi	sp,sp,4
   1167c:	f800283a 	ret

00011680 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11680:	defff804 	addi	sp,sp,-32
   11684:	dfc00715 	stw	ra,28(sp)
   11688:	df000615 	stw	fp,24(sp)
   1168c:	df000604 	addi	fp,sp,24
   11690:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11694:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   11698:	e0bfff17 	ldw	r2,-4(fp)
   1169c:	10800717 	ldw	r2,28(r2)
   116a0:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   116a4:	e0bffb17 	ldw	r2,-20(fp)
   116a8:	10800117 	ldw	r2,4(r2)
   116ac:	10800044 	addi	r2,r2,1
   116b0:	0149c404 	movi	r5,10000
   116b4:	1009883a 	mov	r4,r2
   116b8:	00030d40 	call	30d4 <__mulsi3>
   116bc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   116c0:	e0bffd04 	addi	r2,fp,-12
   116c4:	100b883a 	mov	r5,r2
   116c8:	e13fff17 	ldw	r4,-4(fp)
   116cc:	00125180 	call	12518 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   116d0:	e0bffd17 	ldw	r2,-12(fp)
   116d4:	100b883a 	mov	r5,r2
   116d8:	e13fff17 	ldw	r4,-4(fp)
   116dc:	001244c0 	call	1244c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   116e0:	e0bffc04 	addi	r2,fp,-16
   116e4:	100b883a 	mov	r5,r2
   116e8:	e13fff17 	ldw	r4,-4(fp)
   116ec:	00115e80 	call	115e8 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   116f0:	e0bffc17 	ldw	r2,-16(fp)
   116f4:	10002226 	beq	r2,zero,11780 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   116f8:	e0bffb17 	ldw	r2,-20(fp)
   116fc:	10800217 	ldw	r2,8(r2)
   11700:	10001d26 	beq	r2,zero,11778 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11704:	00000d06 	br	1173c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   11708:	e0bffa17 	ldw	r2,-24(fp)
   1170c:	108002a8 	cmpgeui	r2,r2,10
   11710:	1000021e 	bne	r2,zero,1171c <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   11714:	0109c404 	movi	r4,10000
   11718:	00135440 	call	13544 <alt_busy_sleep>
              if (--timeout == 0)
   1171c:	e0bffa17 	ldw	r2,-24(fp)
   11720:	10bfffc4 	addi	r2,r2,-1
   11724:	e0bffa15 	stw	r2,-24(fp)
   11728:	e0bffa17 	ldw	r2,-24(fp)
   1172c:	1000031e 	bne	r2,zero,1173c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   11730:	00bfff84 	movi	r2,-2
   11734:	e0bffc15 	stw	r2,-16(fp)
                 break;
   11738:	00000306 	br	11748 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   1173c:	e13fff17 	ldw	r4,-4(fp)
   11740:	00112140 	call	11214 <alt_avalon_i2c_is_busy>
   11744:	103ff01e 	bne	r2,zero,11708 <__alt_data_end+0xfc011708>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   11748:	e0bffb17 	ldw	r2,-20(fp)
   1174c:	10800017 	ldw	r2,0(r2)
   11750:	e0fffe04 	addi	r3,fp,-8
   11754:	180f883a 	mov	r7,r3
   11758:	000d883a 	mov	r6,zero
   1175c:	100b883a 	mov	r5,r2
   11760:	e13fff17 	ldw	r4,-4(fp)
   11764:	00112580 	call	11258 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   11768:	e13fff17 	ldw	r4,-4(fp)
   1176c:	0010ebc0 	call	10ebc <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   11770:	e0bffb17 	ldw	r2,-20(fp)
   11774:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   11778:	e0bffc17 	ldw	r2,-16(fp)
   1177c:	00000a06 	br	117a8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   11780:	e0bffb17 	ldw	r2,-20(fp)
   11784:	10800217 	ldw	r2,8(r2)
   11788:	10000626 	beq	r2,zero,117a4 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   1178c:	e0bffd17 	ldw	r2,-12(fp)
   11790:	100b883a 	mov	r5,r2
   11794:	e13fff17 	ldw	r4,-4(fp)
   11798:	00124b40 	call	124b4 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   1179c:	00bffe44 	movi	r2,-7
   117a0:	00000106 	br	117a8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   117a4:	0005883a 	mov	r2,zero
}
   117a8:	e037883a 	mov	sp,fp
   117ac:	dfc00117 	ldw	ra,4(sp)
   117b0:	df000017 	ldw	fp,0(sp)
   117b4:	dec00204 	addi	sp,sp,8
   117b8:	f800283a 	ret

000117bc <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   117bc:	defff704 	addi	sp,sp,-36
   117c0:	dfc00815 	stw	ra,32(sp)
   117c4:	df000715 	stw	fp,28(sp)
   117c8:	df000704 	addi	fp,sp,28
   117cc:	e13ffc15 	stw	r4,-16(fp)
   117d0:	e17ffd15 	stw	r5,-12(fp)
   117d4:	e1bffe15 	stw	r6,-8(fp)
   117d8:	3805883a 	mov	r2,r7
   117dc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   117e0:	0089c404 	movi	r2,10000
   117e4:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   117e8:	00002206 	br	11874 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   117ec:	e0bffb17 	ldw	r2,-20(fp)
   117f0:	108002a8 	cmpgeui	r2,r2,10
   117f4:	1000021e 	bne	r2,zero,11800 <alt_avalon_i2c_master_tx+0x44>
   117f8:	0109c404 	movi	r4,10000
   117fc:	00135440 	call	13544 <alt_busy_sleep>
      if (use_interrupts)
   11800:	e0bfff03 	ldbu	r2,-4(fp)
   11804:	10000926 	beq	r2,zero,1182c <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   11808:	00800044 	movi	r2,1
   1180c:	d8800015 	stw	r2,0(sp)
   11810:	000f883a 	mov	r7,zero
   11814:	e1bffe17 	ldw	r6,-8(fp)
   11818:	e17ffd17 	ldw	r5,-12(fp)
   1181c:	e13ffc17 	ldw	r4,-16(fp)
   11820:	0011d680 	call	11d68 <alt_avalon_i2c_master_transmit_using_interrupts>
   11824:	e0bffa15 	stw	r2,-24(fp)
   11828:	00000806 	br	1184c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   1182c:	00800044 	movi	r2,1
   11830:	d8800015 	stw	r2,0(sp)
   11834:	000f883a 	mov	r7,zero
   11838:	e1bffe17 	ldw	r6,-8(fp)
   1183c:	e17ffd17 	ldw	r5,-12(fp)
   11840:	e13ffc17 	ldw	r4,-16(fp)
   11844:	0011ba80 	call	11ba8 <alt_avalon_i2c_master_transmit>
   11848:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1184c:	e0bffa17 	ldw	r2,-24(fp)
   11850:	10bffea0 	cmpeqi	r2,r2,-6
   11854:	1000061e 	bne	r2,zero,11870 <alt_avalon_i2c_master_tx+0xb4>
   11858:	e0bffa17 	ldw	r2,-24(fp)
   1185c:	10bffee0 	cmpeqi	r2,r2,-5
   11860:	1000031e 	bne	r2,zero,11870 <alt_avalon_i2c_master_tx+0xb4>
   11864:	e0bffa17 	ldw	r2,-24(fp)
   11868:	10bffe58 	cmpnei	r2,r2,-7
   1186c:	1000061e 	bne	r2,zero,11888 <alt_avalon_i2c_master_tx+0xcc>
   11870:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   11874:	e0bffb17 	ldw	r2,-20(fp)
   11878:	10ffffc4 	addi	r3,r2,-1
   1187c:	e0fffb15 	stw	r3,-20(fp)
   11880:	103fda1e 	bne	r2,zero,117ec <__alt_data_end+0xfc0117ec>
   11884:	00000106 	br	1188c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   11888:	0001883a 	nop
    }

    return status;
   1188c:	e0bffa17 	ldw	r2,-24(fp)
}        
   11890:	e037883a 	mov	sp,fp
   11894:	dfc00117 	ldw	ra,4(sp)
   11898:	df000017 	ldw	fp,0(sp)
   1189c:	dec00204 	addi	sp,sp,8
   118a0:	f800283a 	ret

000118a4 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   118a4:	defff704 	addi	sp,sp,-36
   118a8:	dfc00815 	stw	ra,32(sp)
   118ac:	df000715 	stw	fp,28(sp)
   118b0:	df000704 	addi	fp,sp,28
   118b4:	e13ffc15 	stw	r4,-16(fp)
   118b8:	e17ffd15 	stw	r5,-12(fp)
   118bc:	e1bffe15 	stw	r6,-8(fp)
   118c0:	3805883a 	mov	r2,r7
   118c4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   118c8:	0089c404 	movi	r2,10000
   118cc:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   118d0:	e0bfff03 	ldbu	r2,-4(fp)
   118d4:	10003426 	beq	r2,zero,119a8 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   118d8:	00001706 	br	11938 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   118dc:	e0bffb17 	ldw	r2,-20(fp)
   118e0:	108002a8 	cmpgeui	r2,r2,10
   118e4:	1000021e 	bne	r2,zero,118f0 <alt_avalon_i2c_master_rx+0x4c>
   118e8:	0109c404 	movi	r4,10000
   118ec:	00135440 	call	13544 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   118f0:	00800044 	movi	r2,1
   118f4:	d8800015 	stw	r2,0(sp)
   118f8:	000f883a 	mov	r7,zero
   118fc:	e1bffe17 	ldw	r6,-8(fp)
   11900:	e17ffd17 	ldw	r5,-12(fp)
   11904:	e13ffc17 	ldw	r4,-16(fp)
   11908:	00121840 	call	12184 <alt_avalon_i2c_master_receive_using_interrupts>
   1190c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11910:	e0bffa17 	ldw	r2,-24(fp)
   11914:	10bffea0 	cmpeqi	r2,r2,-6
   11918:	1000061e 	bne	r2,zero,11934 <alt_avalon_i2c_master_rx+0x90>
   1191c:	e0bffa17 	ldw	r2,-24(fp)
   11920:	10bffee0 	cmpeqi	r2,r2,-5
   11924:	1000031e 	bne	r2,zero,11934 <alt_avalon_i2c_master_rx+0x90>
   11928:	e0bffa17 	ldw	r2,-24(fp)
   1192c:	10bffe58 	cmpnei	r2,r2,-7
   11930:	1000221e 	bne	r2,zero,119bc <alt_avalon_i2c_master_rx+0x118>
   11934:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   11938:	e0bffb17 	ldw	r2,-20(fp)
   1193c:	10ffffc4 	addi	r3,r2,-1
   11940:	e0fffb15 	stw	r3,-20(fp)
   11944:	103fe51e 	bne	r2,zero,118dc <__alt_data_end+0xfc0118dc>
   11948:	00001f06 	br	119c8 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   1194c:	e0bffb17 	ldw	r2,-20(fp)
   11950:	108002a8 	cmpgeui	r2,r2,10
   11954:	1000021e 	bne	r2,zero,11960 <alt_avalon_i2c_master_rx+0xbc>
   11958:	0109c404 	movi	r4,10000
   1195c:	00135440 	call	13544 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   11960:	00800044 	movi	r2,1
   11964:	d8800015 	stw	r2,0(sp)
   11968:	000f883a 	mov	r7,zero
   1196c:	e1bffe17 	ldw	r6,-8(fp)
   11970:	e17ffd17 	ldw	r5,-12(fp)
   11974:	e13ffc17 	ldw	r4,-16(fp)
   11978:	0011f740 	call	11f74 <alt_avalon_i2c_master_receive>
   1197c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11980:	e0bffa17 	ldw	r2,-24(fp)
   11984:	10bffea0 	cmpeqi	r2,r2,-6
   11988:	1000061e 	bne	r2,zero,119a4 <alt_avalon_i2c_master_rx+0x100>
   1198c:	e0bffa17 	ldw	r2,-24(fp)
   11990:	10bffee0 	cmpeqi	r2,r2,-5
   11994:	1000031e 	bne	r2,zero,119a4 <alt_avalon_i2c_master_rx+0x100>
   11998:	e0bffa17 	ldw	r2,-24(fp)
   1199c:	10bffe58 	cmpnei	r2,r2,-7
   119a0:	1000081e 	bne	r2,zero,119c4 <alt_avalon_i2c_master_rx+0x120>
   119a4:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   119a8:	e0bffb17 	ldw	r2,-20(fp)
   119ac:	10ffffc4 	addi	r3,r2,-1
   119b0:	e0fffb15 	stw	r3,-20(fp)
   119b4:	103fe51e 	bne	r2,zero,1194c <__alt_data_end+0xfc01194c>
   119b8:	00000306 	br	119c8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   119bc:	0001883a 	nop
   119c0:	00000106 	br	119c8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   119c4:	0001883a 	nop
      }
    }
    
    return status;
   119c8:	e0bffa17 	ldw	r2,-24(fp)
}        
   119cc:	e037883a 	mov	sp,fp
   119d0:	dfc00117 	ldw	ra,4(sp)
   119d4:	df000017 	ldw	fp,0(sp)
   119d8:	dec00204 	addi	sp,sp,8
   119dc:	f800283a 	ret

000119e0 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   119e0:	defff604 	addi	sp,sp,-40
   119e4:	dfc00915 	stw	ra,36(sp)
   119e8:	df000815 	stw	fp,32(sp)
   119ec:	df000804 	addi	fp,sp,32
   119f0:	e13ffb15 	stw	r4,-20(fp)
   119f4:	e17ffc15 	stw	r5,-16(fp)
   119f8:	e1bffd15 	stw	r6,-12(fp)
   119fc:	e1fffe15 	stw	r7,-8(fp)
   11a00:	e0800317 	ldw	r2,12(fp)
   11a04:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   11a08:	0089c404 	movi	r2,10000
   11a0c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   11a10:	e0bfff03 	ldbu	r2,-4(fp)
   11a14:	10005626 	beq	r2,zero,11b70 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   11a18:	00002806 	br	11abc <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   11a1c:	e0bffa17 	ldw	r2,-24(fp)
   11a20:	108002a8 	cmpgeui	r2,r2,10
   11a24:	1000021e 	bne	r2,zero,11a30 <alt_avalon_i2c_master_tx_rx+0x50>
   11a28:	0109c404 	movi	r4,10000
   11a2c:	00135440 	call	13544 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   11a30:	d8000015 	stw	zero,0(sp)
   11a34:	000f883a 	mov	r7,zero
   11a38:	e1bffd17 	ldw	r6,-12(fp)
   11a3c:	e17ffc17 	ldw	r5,-16(fp)
   11a40:	e13ffb17 	ldw	r4,-20(fp)
   11a44:	0011d680 	call	11d68 <alt_avalon_i2c_master_transmit_using_interrupts>
   11a48:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11a4c:	e0bff917 	ldw	r2,-28(fp)
   11a50:	10bffea0 	cmpeqi	r2,r2,-6
   11a54:	1000191e 	bne	r2,zero,11abc <alt_avalon_i2c_master_tx_rx+0xdc>
   11a58:	e0bff917 	ldw	r2,-28(fp)
   11a5c:	10bffee0 	cmpeqi	r2,r2,-5
   11a60:	1000161e 	bne	r2,zero,11abc <alt_avalon_i2c_master_tx_rx+0xdc>
   11a64:	e0bff917 	ldw	r2,-28(fp)
   11a68:	10bffe58 	cmpnei	r2,r2,-7
   11a6c:	1000011e 	bne	r2,zero,11a74 <alt_avalon_i2c_master_tx_rx+0x94>
   11a70:	00001206 	br	11abc <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11a74:	00800044 	movi	r2,1
   11a78:	d8800015 	stw	r2,0(sp)
   11a7c:	01c00044 	movi	r7,1
   11a80:	e1800217 	ldw	r6,8(fp)
   11a84:	e17ffe17 	ldw	r5,-8(fp)
   11a88:	e13ffb17 	ldw	r4,-20(fp)
   11a8c:	00121840 	call	12184 <alt_avalon_i2c_master_receive_using_interrupts>
   11a90:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11a94:	e0bff917 	ldw	r2,-28(fp)
   11a98:	10bffea0 	cmpeqi	r2,r2,-6
   11a9c:	1000061e 	bne	r2,zero,11ab8 <alt_avalon_i2c_master_tx_rx+0xd8>
   11aa0:	e0bff917 	ldw	r2,-28(fp)
   11aa4:	10bffee0 	cmpeqi	r2,r2,-5
   11aa8:	1000031e 	bne	r2,zero,11ab8 <alt_avalon_i2c_master_tx_rx+0xd8>
   11aac:	e0bff917 	ldw	r2,-28(fp)
   11ab0:	10bffe58 	cmpnei	r2,r2,-7
   11ab4:	1000331e 	bne	r2,zero,11b84 <alt_avalon_i2c_master_tx_rx+0x1a4>
   11ab8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   11abc:	e0bffa17 	ldw	r2,-24(fp)
   11ac0:	10ffffc4 	addi	r3,r2,-1
   11ac4:	e0fffa15 	stw	r3,-24(fp)
   11ac8:	103fd41e 	bne	r2,zero,11a1c <__alt_data_end+0xfc011a1c>
   11acc:	00003006 	br	11b90 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   11ad0:	e0bffa17 	ldw	r2,-24(fp)
   11ad4:	108002a8 	cmpgeui	r2,r2,10
   11ad8:	1000021e 	bne	r2,zero,11ae4 <alt_avalon_i2c_master_tx_rx+0x104>
   11adc:	0109c404 	movi	r4,10000
   11ae0:	00135440 	call	13544 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   11ae4:	d8000015 	stw	zero,0(sp)
   11ae8:	000f883a 	mov	r7,zero
   11aec:	e1bffd17 	ldw	r6,-12(fp)
   11af0:	e17ffc17 	ldw	r5,-16(fp)
   11af4:	e13ffb17 	ldw	r4,-20(fp)
   11af8:	0011ba80 	call	11ba8 <alt_avalon_i2c_master_transmit>
   11afc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11b00:	e0bff917 	ldw	r2,-28(fp)
   11b04:	10bffea0 	cmpeqi	r2,r2,-6
   11b08:	1000191e 	bne	r2,zero,11b70 <alt_avalon_i2c_master_tx_rx+0x190>
   11b0c:	e0bff917 	ldw	r2,-28(fp)
   11b10:	10bffee0 	cmpeqi	r2,r2,-5
   11b14:	1000161e 	bne	r2,zero,11b70 <alt_avalon_i2c_master_tx_rx+0x190>
   11b18:	e0bff917 	ldw	r2,-28(fp)
   11b1c:	10bffe58 	cmpnei	r2,r2,-7
   11b20:	1000011e 	bne	r2,zero,11b28 <alt_avalon_i2c_master_tx_rx+0x148>
   11b24:	00001206 	br	11b70 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11b28:	00800044 	movi	r2,1
   11b2c:	d8800015 	stw	r2,0(sp)
   11b30:	01c00044 	movi	r7,1
   11b34:	e1800217 	ldw	r6,8(fp)
   11b38:	e17ffe17 	ldw	r5,-8(fp)
   11b3c:	e13ffb17 	ldw	r4,-20(fp)
   11b40:	0011f740 	call	11f74 <alt_avalon_i2c_master_receive>
   11b44:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11b48:	e0bff917 	ldw	r2,-28(fp)
   11b4c:	10bffea0 	cmpeqi	r2,r2,-6
   11b50:	1000061e 	bne	r2,zero,11b6c <alt_avalon_i2c_master_tx_rx+0x18c>
   11b54:	e0bff917 	ldw	r2,-28(fp)
   11b58:	10bffee0 	cmpeqi	r2,r2,-5
   11b5c:	1000031e 	bne	r2,zero,11b6c <alt_avalon_i2c_master_tx_rx+0x18c>
   11b60:	e0bff917 	ldw	r2,-28(fp)
   11b64:	10bffe58 	cmpnei	r2,r2,-7
   11b68:	1000081e 	bne	r2,zero,11b8c <alt_avalon_i2c_master_tx_rx+0x1ac>
   11b6c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   11b70:	e0bffa17 	ldw	r2,-24(fp)
   11b74:	10ffffc4 	addi	r3,r2,-1
   11b78:	e0fffa15 	stw	r3,-24(fp)
   11b7c:	103fd41e 	bne	r2,zero,11ad0 <__alt_data_end+0xfc011ad0>
   11b80:	00000306 	br	11b90 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   11b84:	0001883a 	nop
   11b88:	00000106 	br	11b90 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   11b8c:	0001883a 	nop
      }
    }
    
    return status;
   11b90:	e0bff917 	ldw	r2,-28(fp)
}                                       
   11b94:	e037883a 	mov	sp,fp
   11b98:	dfc00117 	ldw	ra,4(sp)
   11b9c:	df000017 	ldw	fp,0(sp)
   11ba0:	dec00204 	addi	sp,sp,8
   11ba4:	f800283a 	ret

00011ba8 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   11ba8:	defff704 	addi	sp,sp,-36
   11bac:	dfc00815 	stw	ra,32(sp)
   11bb0:	df000715 	stw	fp,28(sp)
   11bb4:	df000704 	addi	fp,sp,28
   11bb8:	e13ffb15 	stw	r4,-20(fp)
   11bbc:	e17ffc15 	stw	r5,-16(fp)
   11bc0:	e1bffd15 	stw	r6,-12(fp)
   11bc4:	3807883a 	mov	r3,r7
   11bc8:	e0800217 	ldw	r2,8(fp)
   11bcc:	e0fffe05 	stb	r3,-8(fp)
   11bd0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11bd4:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   11bd8:	0149c404 	movi	r5,10000
   11bdc:	e13ffd17 	ldw	r4,-12(fp)
   11be0:	00030d40 	call	30d4 <__mulsi3>
   11be4:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   11be8:	e0bffd17 	ldw	r2,-12(fp)
   11bec:	1000021e 	bne	r2,zero,11bf8 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   11bf0:	0005883a 	mov	r2,zero
   11bf4:	00005706 	br	11d54 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11bf8:	e0bffe03 	ldbu	r2,-8(fp)
   11bfc:	10000a1e 	bne	r2,zero,11c28 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11c00:	e13ffb17 	ldw	r4,-20(fp)
   11c04:	0010e240 	call	10e24 <alt_avalon_i2c_enable>
   11c08:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   11c0c:	e0bffa17 	ldw	r2,-24(fp)
   11c10:	10000226 	beq	r2,zero,11c1c <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   11c14:	e0bffa17 	ldw	r2,-24(fp)
   11c18:	00004e06 	br	11d54 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11c1c:	01400704 	movi	r5,28
   11c20:	e13ffb17 	ldw	r4,-20(fp)
   11c24:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   11c28:	e0bffe03 	ldbu	r2,-8(fp)
   11c2c:	100d883a 	mov	r6,r2
   11c30:	000b883a 	mov	r5,zero
   11c34:	e13ffb17 	ldw	r4,-20(fp)
   11c38:	001148c0 	call	1148c <alt_avalon_i2c_send_address>
   11c3c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   11c40:	e0bffa17 	ldw	r2,-24(fp)
   11c44:	1000271e 	bne	r2,zero,11ce4 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   11c48:	00000f06 	br	11c88 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   11c4c:	e0bffc17 	ldw	r2,-16(fp)
   11c50:	10800003 	ldbu	r2,0(r2)
   11c54:	10803fcc 	andi	r2,r2,255
   11c58:	000f883a 	mov	r7,zero
   11c5c:	000d883a 	mov	r6,zero
   11c60:	100b883a 	mov	r5,r2
   11c64:	e13ffb17 	ldw	r4,-20(fp)
   11c68:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   11c6c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   11c70:	e0bffc17 	ldw	r2,-16(fp)
   11c74:	10800044 	addi	r2,r2,1
   11c78:	e0bffc15 	stw	r2,-16(fp)
            --size;
   11c7c:	e0bffd17 	ldw	r2,-12(fp)
   11c80:	10bfffc4 	addi	r2,r2,-1
   11c84:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   11c88:	e0bffd17 	ldw	r2,-12(fp)
   11c8c:	108000b0 	cmpltui	r2,r2,2
   11c90:	1000021e 	bne	r2,zero,11c9c <alt_avalon_i2c_master_transmit+0xf4>
   11c94:	e0bffa17 	ldw	r2,-24(fp)
   11c98:	103fec26 	beq	r2,zero,11c4c <__alt_data_end+0xfc011c4c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11c9c:	e0bffa17 	ldw	r2,-24(fp)
   11ca0:	1000101e 	bne	r2,zero,11ce4 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11ca4:	e0bffc17 	ldw	r2,-16(fp)
   11ca8:	10800003 	ldbu	r2,0(r2)
   11cac:	10803fcc 	andi	r2,r2,255
   11cb0:	e0ffff03 	ldbu	r3,-4(fp)
   11cb4:	180f883a 	mov	r7,r3
   11cb8:	000d883a 	mov	r6,zero
   11cbc:	100b883a 	mov	r5,r2
   11cc0:	e13ffb17 	ldw	r4,-20(fp)
   11cc4:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   11cc8:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   11ccc:	e0bffc17 	ldw	r2,-16(fp)
   11cd0:	10800044 	addi	r2,r2,1
   11cd4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   11cd8:	e0bffd17 	ldw	r2,-12(fp)
   11cdc:	10bfffc4 	addi	r2,r2,-1
   11ce0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   11ce4:	e0bfff03 	ldbu	r2,-4(fp)
   11ce8:	1000101e 	bne	r2,zero,11d2c <alt_avalon_i2c_master_transmit+0x184>
   11cec:	e0bffa17 	ldw	r2,-24(fp)
   11cf0:	10001726 	beq	r2,zero,11d50 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11cf4:	00000d06 	br	11d2c <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   11cf8:	e0bff917 	ldw	r2,-28(fp)
   11cfc:	108002a8 	cmpgeui	r2,r2,10
   11d00:	1000021e 	bne	r2,zero,11d0c <alt_avalon_i2c_master_transmit+0x164>
   11d04:	0109c404 	movi	r4,10000
   11d08:	00135440 	call	13544 <alt_busy_sleep>
            if (--timeout == 0)
   11d0c:	e0bff917 	ldw	r2,-28(fp)
   11d10:	10bfffc4 	addi	r2,r2,-1
   11d14:	e0bff915 	stw	r2,-28(fp)
   11d18:	e0bff917 	ldw	r2,-28(fp)
   11d1c:	1000031e 	bne	r2,zero,11d2c <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   11d20:	00bfff84 	movi	r2,-2
   11d24:	e0bffa15 	stw	r2,-24(fp)
               break;
   11d28:	00000306 	br	11d38 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11d2c:	e13ffb17 	ldw	r4,-20(fp)
   11d30:	00112140 	call	11214 <alt_avalon_i2c_is_busy>
   11d34:	103ff01e 	bne	r2,zero,11cf8 <__alt_data_end+0xfc011cf8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   11d38:	e0bffa04 	addi	r2,fp,-24
   11d3c:	100b883a 	mov	r5,r2
   11d40:	e13ffb17 	ldw	r4,-20(fp)
   11d44:	00115e80 	call	115e8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11d48:	e13ffb17 	ldw	r4,-20(fp)
   11d4c:	0010ebc0 	call	10ebc <alt_avalon_i2c_disable>
    }


    return status;
   11d50:	e0bffa17 	ldw	r2,-24(fp)
}
   11d54:	e037883a 	mov	sp,fp
   11d58:	dfc00117 	ldw	ra,4(sp)
   11d5c:	df000017 	ldw	fp,0(sp)
   11d60:	dec00204 	addi	sp,sp,8
   11d64:	f800283a 	ret

00011d68 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   11d68:	defff604 	addi	sp,sp,-40
   11d6c:	dfc00915 	stw	ra,36(sp)
   11d70:	df000815 	stw	fp,32(sp)
   11d74:	df000804 	addi	fp,sp,32
   11d78:	e13ffb15 	stw	r4,-20(fp)
   11d7c:	e17ffc15 	stw	r5,-16(fp)
   11d80:	e1bffd15 	stw	r6,-12(fp)
   11d84:	3807883a 	mov	r3,r7
   11d88:	e0800217 	ldw	r2,8(fp)
   11d8c:	e0fffe05 	stb	r3,-8(fp)
   11d90:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11d94:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   11d98:	0149c404 	movi	r5,10000
   11d9c:	e13ffd17 	ldw	r4,-12(fp)
   11da0:	00030d40 	call	30d4 <__mulsi3>
   11da4:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   11da8:	e0bffb17 	ldw	r2,-20(fp)
   11dac:	10800717 	ldw	r2,28(r2)
   11db0:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   11db4:	e0bffd17 	ldw	r2,-12(fp)
   11db8:	1000021e 	bne	r2,zero,11dc4 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   11dbc:	0005883a 	mov	r2,zero
   11dc0:	00006706 	br	11f60 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   11dc4:	e0bffb17 	ldw	r2,-20(fp)
   11dc8:	10c00617 	ldw	r3,24(r2)
   11dcc:	00800074 	movhi	r2,1
   11dd0:	1082aa04 	addi	r2,r2,2728
   11dd4:	18800226 	beq	r3,r2,11de0 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   11dd8:	00bfff44 	movi	r2,-3
   11ddc:	00006006 	br	11f60 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11de0:	e0bffe03 	ldbu	r2,-8(fp)
   11de4:	10000a1e 	bne	r2,zero,11e10 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11de8:	e13ffb17 	ldw	r4,-20(fp)
   11dec:	0010e240 	call	10e24 <alt_avalon_i2c_enable>
   11df0:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   11df4:	e0bff817 	ldw	r2,-32(fp)
   11df8:	10000226 	beq	r2,zero,11e04 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   11dfc:	e0bff817 	ldw	r2,-32(fp)
   11e00:	00005706 	br	11f60 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11e04:	01400704 	movi	r5,28
   11e08:	e13ffb17 	ldw	r4,-20(fp)
   11e0c:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   11e10:	e0bffe03 	ldbu	r2,-8(fp)
   11e14:	100d883a 	mov	r6,r2
   11e18:	000b883a 	mov	r5,zero
   11e1c:	e13ffb17 	ldw	r4,-20(fp)
   11e20:	001148c0 	call	1148c <alt_avalon_i2c_send_address>
   11e24:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   11e28:	e0bff817 	ldw	r2,-32(fp)
   11e2c:	1000271e 	bne	r2,zero,11ecc <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   11e30:	00000f06 	br	11e70 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   11e34:	e0bffc17 	ldw	r2,-16(fp)
   11e38:	10800003 	ldbu	r2,0(r2)
   11e3c:	10803fcc 	andi	r2,r2,255
   11e40:	000f883a 	mov	r7,zero
   11e44:	000d883a 	mov	r6,zero
   11e48:	100b883a 	mov	r5,r2
   11e4c:	e13ffb17 	ldw	r4,-20(fp)
   11e50:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   11e54:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   11e58:	e0bffc17 	ldw	r2,-16(fp)
   11e5c:	10800044 	addi	r2,r2,1
   11e60:	e0bffc15 	stw	r2,-16(fp)
            --size;
   11e64:	e0bffd17 	ldw	r2,-12(fp)
   11e68:	10bfffc4 	addi	r2,r2,-1
   11e6c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   11e70:	e0bffd17 	ldw	r2,-12(fp)
   11e74:	108000b0 	cmpltui	r2,r2,2
   11e78:	1000021e 	bne	r2,zero,11e84 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   11e7c:	e0bff817 	ldw	r2,-32(fp)
   11e80:	103fec26 	beq	r2,zero,11e34 <__alt_data_end+0xfc011e34>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11e84:	e0bff817 	ldw	r2,-32(fp)
   11e88:	1000101e 	bne	r2,zero,11ecc <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11e8c:	e0bffc17 	ldw	r2,-16(fp)
   11e90:	10800003 	ldbu	r2,0(r2)
   11e94:	10803fcc 	andi	r2,r2,255
   11e98:	e0ffff03 	ldbu	r3,-4(fp)
   11e9c:	180f883a 	mov	r7,r3
   11ea0:	000d883a 	mov	r6,zero
   11ea4:	100b883a 	mov	r5,r2
   11ea8:	e13ffb17 	ldw	r4,-20(fp)
   11eac:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   11eb0:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   11eb4:	e0bffc17 	ldw	r2,-16(fp)
   11eb8:	10800044 	addi	r2,r2,1
   11ebc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   11ec0:	e0bffd17 	ldw	r2,-12(fp)
   11ec4:	10bfffc4 	addi	r2,r2,-1
   11ec8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   11ecc:	e0bff817 	ldw	r2,-32(fp)
   11ed0:	10001426 	beq	r2,zero,11f24 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11ed4:	00000d06 	br	11f0c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   11ed8:	e0bff917 	ldw	r2,-28(fp)
   11edc:	108002a8 	cmpgeui	r2,r2,10
   11ee0:	1000021e 	bne	r2,zero,11eec <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   11ee4:	0109c404 	movi	r4,10000
   11ee8:	00135440 	call	13544 <alt_busy_sleep>
            if (--timeout == 0)
   11eec:	e0bff917 	ldw	r2,-28(fp)
   11ef0:	10bfffc4 	addi	r2,r2,-1
   11ef4:	e0bff915 	stw	r2,-28(fp)
   11ef8:	e0bff917 	ldw	r2,-28(fp)
   11efc:	1000031e 	bne	r2,zero,11f0c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   11f00:	00bfff84 	movi	r2,-2
   11f04:	e0bff815 	stw	r2,-32(fp)
               break;
   11f08:	00000306 	br	11f18 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11f0c:	e13ffb17 	ldw	r4,-20(fp)
   11f10:	00112140 	call	11214 <alt_avalon_i2c_is_busy>
   11f14:	103ff01e 	bne	r2,zero,11ed8 <__alt_data_end+0xfc011ed8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11f18:	e13ffb17 	ldw	r4,-20(fp)
   11f1c:	0010ebc0 	call	10ebc <alt_avalon_i2c_disable>
   11f20:	00000e06 	br	11f5c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   11f24:	e0bfff03 	ldbu	r2,-4(fp)
   11f28:	10000c26 	beq	r2,zero,11f5c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11f2c:	01400704 	movi	r5,28
   11f30:	e13ffb17 	ldw	r4,-20(fp)
   11f34:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   11f38:	000b883a 	mov	r5,zero
   11f3c:	e13ffb17 	ldw	r4,-20(fp)
   11f40:	00126580 	call	12658 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   11f44:	e0bffa17 	ldw	r2,-24(fp)
   11f48:	00c00044 	movi	r3,1
   11f4c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   11f50:	01400044 	movi	r5,1
   11f54:	e13ffb17 	ldw	r4,-20(fp)
   11f58:	00124b40 	call	124b4 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   11f5c:	e0bff817 	ldw	r2,-32(fp)
}
   11f60:	e037883a 	mov	sp,fp
   11f64:	dfc00117 	ldw	ra,4(sp)
   11f68:	df000017 	ldw	fp,0(sp)
   11f6c:	dec00204 	addi	sp,sp,8
   11f70:	f800283a 	ret

00011f74 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   11f74:	defff404 	addi	sp,sp,-48
   11f78:	dfc00b15 	stw	ra,44(sp)
   11f7c:	df000a15 	stw	fp,40(sp)
   11f80:	df000a04 	addi	fp,sp,40
   11f84:	e13ffb15 	stw	r4,-20(fp)
   11f88:	e17ffc15 	stw	r5,-16(fp)
   11f8c:	e1bffd15 	stw	r6,-12(fp)
   11f90:	3807883a 	mov	r3,r7
   11f94:	e0800217 	ldw	r2,8(fp)
   11f98:	e0fffe05 	stb	r3,-8(fp)
   11f9c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11fa0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   11fa4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   11fa8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   11fac:	e0bffd17 	ldw	r2,-12(fp)
   11fb0:	1000021e 	bne	r2,zero,11fbc <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   11fb4:	0005883a 	mov	r2,zero
   11fb8:	00006d06 	br	12170 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11fbc:	e0bffe03 	ldbu	r2,-8(fp)
   11fc0:	10000a1e 	bne	r2,zero,11fec <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11fc4:	e13ffb17 	ldw	r4,-20(fp)
   11fc8:	0010e240 	call	10e24 <alt_avalon_i2c_enable>
   11fcc:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   11fd0:	e0bff917 	ldw	r2,-28(fp)
   11fd4:	10000226 	beq	r2,zero,11fe0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   11fd8:	e0bff917 	ldw	r2,-28(fp)
   11fdc:	00006406 	br	12170 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   11fe0:	01400704 	movi	r5,28
   11fe4:	e13ffb17 	ldw	r4,-20(fp)
   11fe8:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   11fec:	e0bffe03 	ldbu	r2,-8(fp)
   11ff0:	100d883a 	mov	r6,r2
   11ff4:	01400044 	movi	r5,1
   11ff8:	e13ffb17 	ldw	r4,-20(fp)
   11ffc:	001148c0 	call	1148c <alt_avalon_i2c_send_address>
   12000:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   12004:	e0bff917 	ldw	r2,-28(fp)
   12008:	1000341e 	bne	r2,zero,120dc <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   1200c:	00001906 	br	12074 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   12010:	000f883a 	mov	r7,zero
   12014:	000d883a 	mov	r6,zero
   12018:	000b883a 	mov	r5,zero
   1201c:	e13ffb17 	ldw	r4,-20(fp)
   12020:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   12024:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   12028:	e0bff817 	ldw	r2,-32(fp)
   1202c:	10800044 	addi	r2,r2,1
   12030:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   12034:	e0bff917 	ldw	r2,-28(fp)
   12038:	10000e1e 	bne	r2,zero,12074 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   1203c:	e0bffa04 	addi	r2,fp,-24
   12040:	100f883a 	mov	r7,r2
   12044:	000d883a 	mov	r6,zero
   12048:	e17ffc17 	ldw	r5,-16(fp)
   1204c:	e13ffb17 	ldw	r4,-20(fp)
   12050:	00112580 	call	11258 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   12054:	e0bffa17 	ldw	r2,-24(fp)
   12058:	e0fffc17 	ldw	r3,-16(fp)
   1205c:	1885883a 	add	r2,r3,r2
   12060:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   12064:	e0bffa17 	ldw	r2,-24(fp)
   12068:	e0fff717 	ldw	r3,-36(fp)
   1206c:	1885883a 	add	r2,r3,r2
   12070:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12074:	e0bffd17 	ldw	r2,-12(fp)
   12078:	10bfffc4 	addi	r2,r2,-1
   1207c:	e0fff817 	ldw	r3,-32(fp)
   12080:	1880022e 	bgeu	r3,r2,1208c <alt_avalon_i2c_master_receive+0x118>
   12084:	e0bff917 	ldw	r2,-28(fp)
   12088:	103fe126 	beq	r2,zero,12010 <__alt_data_end+0xfc012010>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1208c:	e0bff917 	ldw	r2,-28(fp)
   12090:	1000121e 	bne	r2,zero,120dc <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   12094:	e0bfff03 	ldbu	r2,-4(fp)
   12098:	100f883a 	mov	r7,r2
   1209c:	000d883a 	mov	r6,zero
   120a0:	000b883a 	mov	r5,zero
   120a4:	e13ffb17 	ldw	r4,-20(fp)
   120a8:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   120ac:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   120b0:	00000a06 	br	120dc <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   120b4:	e17ffc17 	ldw	r5,-16(fp)
   120b8:	e13ffb17 	ldw	r4,-20(fp)
   120bc:	00113000 	call	11300 <alt_avalon_i2c_rx_read>
   120c0:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   120c4:	e0bffc17 	ldw	r2,-16(fp)
   120c8:	10800044 	addi	r2,r2,1
   120cc:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   120d0:	e0bff717 	ldw	r2,-36(fp)
   120d4:	10800044 	addi	r2,r2,1
   120d8:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   120dc:	e0fff717 	ldw	r3,-36(fp)
   120e0:	e0bffd17 	ldw	r2,-12(fp)
   120e4:	1880022e 	bgeu	r3,r2,120f0 <alt_avalon_i2c_master_receive+0x17c>
   120e8:	e0bff917 	ldw	r2,-28(fp)
   120ec:	103ff126 	beq	r2,zero,120b4 <__alt_data_end+0xfc0120b4>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   120f0:	e0bfff03 	ldbu	r2,-4(fp)
   120f4:	1000021e 	bne	r2,zero,12100 <alt_avalon_i2c_master_receive+0x18c>
   120f8:	e0bff917 	ldw	r2,-28(fp)
   120fc:	10001b26 	beq	r2,zero,1216c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   12100:	0149c404 	movi	r5,10000
   12104:	e13ffd17 	ldw	r4,-12(fp)
   12108:	00030d40 	call	30d4 <__mulsi3>
   1210c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   12110:	00000d06 	br	12148 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   12114:	e0bff617 	ldw	r2,-40(fp)
   12118:	108002a8 	cmpgeui	r2,r2,10
   1211c:	1000021e 	bne	r2,zero,12128 <alt_avalon_i2c_master_receive+0x1b4>
   12120:	0109c404 	movi	r4,10000
   12124:	00135440 	call	13544 <alt_busy_sleep>
            if (--timeout == 0)
   12128:	e0bff617 	ldw	r2,-40(fp)
   1212c:	10bfffc4 	addi	r2,r2,-1
   12130:	e0bff615 	stw	r2,-40(fp)
   12134:	e0bff617 	ldw	r2,-40(fp)
   12138:	1000031e 	bne	r2,zero,12148 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1213c:	00bfff84 	movi	r2,-2
   12140:	e0bff915 	stw	r2,-28(fp)
               break;
   12144:	00000306 	br	12154 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   12148:	e13ffb17 	ldw	r4,-20(fp)
   1214c:	00112140 	call	11214 <alt_avalon_i2c_is_busy>
   12150:	103ff01e 	bne	r2,zero,12114 <__alt_data_end+0xfc012114>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   12154:	e0bff904 	addi	r2,fp,-28
   12158:	100b883a 	mov	r5,r2
   1215c:	e13ffb17 	ldw	r4,-20(fp)
   12160:	00115e80 	call	115e8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   12164:	e13ffb17 	ldw	r4,-20(fp)
   12168:	0010ebc0 	call	10ebc <alt_avalon_i2c_disable>
    }

    return status;
   1216c:	e0bff917 	ldw	r2,-28(fp)
}
   12170:	e037883a 	mov	sp,fp
   12174:	dfc00117 	ldw	ra,4(sp)
   12178:	df000017 	ldw	fp,0(sp)
   1217c:	dec00204 	addi	sp,sp,8
   12180:	f800283a 	ret

00012184 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   12184:	defff504 	addi	sp,sp,-44
   12188:	dfc00a15 	stw	ra,40(sp)
   1218c:	df000915 	stw	fp,36(sp)
   12190:	df000904 	addi	fp,sp,36
   12194:	e13ffb15 	stw	r4,-20(fp)
   12198:	e17ffc15 	stw	r5,-16(fp)
   1219c:	e1bffd15 	stw	r6,-12(fp)
   121a0:	3807883a 	mov	r3,r7
   121a4:	e0800217 	ldw	r2,8(fp)
   121a8:	e0fffe05 	stb	r3,-8(fp)
   121ac:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   121b0:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   121b4:	e0bffb17 	ldw	r2,-20(fp)
   121b8:	10800717 	ldw	r2,28(r2)
   121bc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   121c0:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   121c4:	e0bffd17 	ldw	r2,-12(fp)
   121c8:	1000021e 	bne	r2,zero,121d4 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   121cc:	0005883a 	mov	r2,zero
   121d0:	00006306 	br	12360 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   121d4:	e0bffb17 	ldw	r2,-20(fp)
   121d8:	10c00617 	ldw	r3,24(r2)
   121dc:	00800074 	movhi	r2,1
   121e0:	1082aa04 	addi	r2,r2,2728
   121e4:	18800226 	beq	r3,r2,121f0 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   121e8:	00bfff44 	movi	r2,-3
   121ec:	00005c06 	br	12360 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   121f0:	e0bffe03 	ldbu	r2,-8(fp)
   121f4:	10000a1e 	bne	r2,zero,12220 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   121f8:	e13ffb17 	ldw	r4,-20(fp)
   121fc:	0010e240 	call	10e24 <alt_avalon_i2c_enable>
   12200:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   12204:	e0bff717 	ldw	r2,-36(fp)
   12208:	10000226 	beq	r2,zero,12214 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   1220c:	e0bff717 	ldw	r2,-36(fp)
   12210:	00005306 	br	12360 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   12214:	01400704 	movi	r5,28
   12218:	e13ffb17 	ldw	r4,-20(fp)
   1221c:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   12220:	e0bffe03 	ldbu	r2,-8(fp)
   12224:	100d883a 	mov	r6,r2
   12228:	01400044 	movi	r5,1
   1222c:	e13ffb17 	ldw	r4,-20(fp)
   12230:	001148c0 	call	1148c <alt_avalon_i2c_send_address>
   12234:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   12238:	e0bff717 	ldw	r2,-36(fp)
   1223c:	1000191e 	bne	r2,zero,122a4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12240:	00000906 	br	12268 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   12244:	000f883a 	mov	r7,zero
   12248:	000d883a 	mov	r6,zero
   1224c:	000b883a 	mov	r5,zero
   12250:	e13ffb17 	ldw	r4,-20(fp)
   12254:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   12258:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   1225c:	e0bff917 	ldw	r2,-28(fp)
   12260:	10800044 	addi	r2,r2,1
   12264:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12268:	e0bffd17 	ldw	r2,-12(fp)
   1226c:	10bfffc4 	addi	r2,r2,-1
   12270:	e0fff917 	ldw	r3,-28(fp)
   12274:	1880022e 	bgeu	r3,r2,12280 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   12278:	e0bff717 	ldw	r2,-36(fp)
   1227c:	103ff126 	beq	r2,zero,12244 <__alt_data_end+0xfc012244>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   12280:	e0bff717 	ldw	r2,-36(fp)
   12284:	1000071e 	bne	r2,zero,122a4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   12288:	e0bfff03 	ldbu	r2,-4(fp)
   1228c:	100f883a 	mov	r7,r2
   12290:	000d883a 	mov	r6,zero
   12294:	000b883a 	mov	r5,zero
   12298:	e13ffb17 	ldw	r4,-20(fp)
   1229c:	00113a80 	call	113a8 <alt_avalon_i2c_cmd_write>
   122a0:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   122a4:	e0bff717 	ldw	r2,-36(fp)
   122a8:	10001826 	beq	r2,zero,1230c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   122ac:	0149c404 	movi	r5,10000
   122b0:	e13ffd17 	ldw	r4,-12(fp)
   122b4:	00030d40 	call	30d4 <__mulsi3>
   122b8:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   122bc:	00000d06 	br	122f4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   122c0:	e0bff817 	ldw	r2,-32(fp)
   122c4:	108002a8 	cmpgeui	r2,r2,10
   122c8:	1000021e 	bne	r2,zero,122d4 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   122cc:	0109c404 	movi	r4,10000
   122d0:	00135440 	call	13544 <alt_busy_sleep>
            if (--timeout == 0)
   122d4:	e0bff817 	ldw	r2,-32(fp)
   122d8:	10bfffc4 	addi	r2,r2,-1
   122dc:	e0bff815 	stw	r2,-32(fp)
   122e0:	e0bff817 	ldw	r2,-32(fp)
   122e4:	1000031e 	bne	r2,zero,122f4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   122e8:	00bfff84 	movi	r2,-2
   122ec:	e0bff715 	stw	r2,-36(fp)
               break;
   122f0:	00000306 	br	12300 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   122f4:	e13ffb17 	ldw	r4,-20(fp)
   122f8:	00112140 	call	11214 <alt_avalon_i2c_is_busy>
   122fc:	103ff01e 	bne	r2,zero,122c0 <__alt_data_end+0xfc0122c0>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   12300:	e13ffb17 	ldw	r4,-20(fp)
   12304:	0010ebc0 	call	10ebc <alt_avalon_i2c_disable>
   12308:	00001406 	br	1235c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   1230c:	e0bfff03 	ldbu	r2,-4(fp)
   12310:	10001226 	beq	r2,zero,1235c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   12314:	01400704 	movi	r5,28
   12318:	e13ffb17 	ldw	r4,-20(fp)
   1231c:	00124100 	call	12410 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   12320:	000b883a 	mov	r5,zero
   12324:	e13ffb17 	ldw	r4,-20(fp)
   12328:	00125a80 	call	125a8 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   1232c:	e0bffa17 	ldw	r2,-24(fp)
   12330:	00c00084 	movi	r3,2
   12334:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   12338:	e0bffa17 	ldw	r2,-24(fp)
   1233c:	e0fffc17 	ldw	r3,-16(fp)
   12340:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   12344:	e0bffa17 	ldw	r2,-24(fp)
   12348:	e0fffd17 	ldw	r3,-12(fp)
   1234c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   12350:	01400084 	movi	r5,2
   12354:	e13ffb17 	ldw	r4,-20(fp)
   12358:	00124b40 	call	124b4 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   1235c:	e0bff717 	ldw	r2,-36(fp)
}
   12360:	e037883a 	mov	sp,fp
   12364:	dfc00117 	ldw	ra,4(sp)
   12368:	df000017 	ldw	fp,0(sp)
   1236c:	dec00204 	addi	sp,sp,8
   12370:	f800283a 	ret

00012374 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   12374:	defffd04 	addi	sp,sp,-12
   12378:	df000215 	stw	fp,8(sp)
   1237c:	df000204 	addi	fp,sp,8
   12380:	e13ffe15 	stw	r4,-8(fp)
   12384:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   12388:	e0bffe17 	ldw	r2,-8(fp)
   1238c:	10800317 	ldw	r2,12(r2)
   12390:	10800404 	addi	r2,r2,16
   12394:	10c00037 	ldwio	r3,0(r2)
   12398:	e0bffe17 	ldw	r2,-8(fp)
   1239c:	10800317 	ldw	r2,12(r2)
   123a0:	10800304 	addi	r2,r2,12
   123a4:	10800037 	ldwio	r2,0(r2)
   123a8:	1884703a 	and	r2,r3,r2
   123ac:	1007883a 	mov	r3,r2
   123b0:	e0bfff17 	ldw	r2,-4(fp)
   123b4:	10c00015 	stw	r3,0(r2)
}
   123b8:	0001883a 	nop
   123bc:	e037883a 	mov	sp,fp
   123c0:	df000017 	ldw	fp,0(sp)
   123c4:	dec00104 	addi	sp,sp,4
   123c8:	f800283a 	ret

000123cc <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   123cc:	defffd04 	addi	sp,sp,-12
   123d0:	df000215 	stw	fp,8(sp)
   123d4:	df000204 	addi	fp,sp,8
   123d8:	e13ffe15 	stw	r4,-8(fp)
   123dc:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   123e0:	e0bffe17 	ldw	r2,-8(fp)
   123e4:	10800317 	ldw	r2,12(r2)
   123e8:	10800404 	addi	r2,r2,16
   123ec:	10800037 	ldwio	r2,0(r2)
   123f0:	1007883a 	mov	r3,r2
   123f4:	e0bfff17 	ldw	r2,-4(fp)
   123f8:	10c00015 	stw	r3,0(r2)
}
   123fc:	0001883a 	nop
   12400:	e037883a 	mov	sp,fp
   12404:	df000017 	ldw	fp,0(sp)
   12408:	dec00104 	addi	sp,sp,4
   1240c:	f800283a 	ret

00012410 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   12410:	defffd04 	addi	sp,sp,-12
   12414:	df000215 	stw	fp,8(sp)
   12418:	df000204 	addi	fp,sp,8
   1241c:	e13ffe15 	stw	r4,-8(fp)
   12420:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   12424:	e0bffe17 	ldw	r2,-8(fp)
   12428:	10800317 	ldw	r2,12(r2)
   1242c:	10800404 	addi	r2,r2,16
   12430:	e0ffff17 	ldw	r3,-4(fp)
   12434:	10c00035 	stwio	r3,0(r2)
}
   12438:	0001883a 	nop
   1243c:	e037883a 	mov	sp,fp
   12440:	df000017 	ldw	fp,0(sp)
   12444:	dec00104 	addi	sp,sp,4
   12448:	f800283a 	ret

0001244c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   1244c:	defffb04 	addi	sp,sp,-20
   12450:	dfc00415 	stw	ra,16(sp)
   12454:	df000315 	stw	fp,12(sp)
   12458:	df000304 	addi	fp,sp,12
   1245c:	e13ffe15 	stw	r4,-8(fp)
   12460:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   12464:	e17ffd04 	addi	r5,fp,-12
   12468:	e13ffe17 	ldw	r4,-8(fp)
   1246c:	00125180 	call	12518 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   12470:	e0bfff17 	ldw	r2,-4(fp)
   12474:	0086303a 	nor	r3,zero,r2
   12478:	e0bffd17 	ldw	r2,-12(fp)
   1247c:	1884703a 	and	r2,r3,r2
   12480:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   12484:	e0bffe17 	ldw	r2,-8(fp)
   12488:	10800317 	ldw	r2,12(r2)
   1248c:	10800304 	addi	r2,r2,12
   12490:	e0fffd17 	ldw	r3,-12(fp)
   12494:	18c007cc 	andi	r3,r3,31
   12498:	10c00035 	stwio	r3,0(r2)
}
   1249c:	0001883a 	nop
   124a0:	e037883a 	mov	sp,fp
   124a4:	dfc00117 	ldw	ra,4(sp)
   124a8:	df000017 	ldw	fp,0(sp)
   124ac:	dec00204 	addi	sp,sp,8
   124b0:	f800283a 	ret

000124b4 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   124b4:	defffb04 	addi	sp,sp,-20
   124b8:	dfc00415 	stw	ra,16(sp)
   124bc:	df000315 	stw	fp,12(sp)
   124c0:	df000304 	addi	fp,sp,12
   124c4:	e13ffe15 	stw	r4,-8(fp)
   124c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   124cc:	e17ffd04 	addi	r5,fp,-12
   124d0:	e13ffe17 	ldw	r4,-8(fp)
   124d4:	00125180 	call	12518 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   124d8:	e0fffd17 	ldw	r3,-12(fp)
   124dc:	e0bfff17 	ldw	r2,-4(fp)
   124e0:	1884b03a 	or	r2,r3,r2
   124e4:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   124e8:	e0bffe17 	ldw	r2,-8(fp)
   124ec:	10800317 	ldw	r2,12(r2)
   124f0:	10800304 	addi	r2,r2,12
   124f4:	e0fffd17 	ldw	r3,-12(fp)
   124f8:	18c007cc 	andi	r3,r3,31
   124fc:	10c00035 	stwio	r3,0(r2)
}
   12500:	0001883a 	nop
   12504:	e037883a 	mov	sp,fp
   12508:	dfc00117 	ldw	ra,4(sp)
   1250c:	df000017 	ldw	fp,0(sp)
   12510:	dec00204 	addi	sp,sp,8
   12514:	f800283a 	ret

00012518 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   12518:	defffd04 	addi	sp,sp,-12
   1251c:	df000215 	stw	fp,8(sp)
   12520:	df000204 	addi	fp,sp,8
   12524:	e13ffe15 	stw	r4,-8(fp)
   12528:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   1252c:	e0bffe17 	ldw	r2,-8(fp)
   12530:	10800317 	ldw	r2,12(r2)
   12534:	10800304 	addi	r2,r2,12
   12538:	10800037 	ldwio	r2,0(r2)
   1253c:	10c007cc 	andi	r3,r2,31
   12540:	e0bfff17 	ldw	r2,-4(fp)
   12544:	10c00015 	stw	r3,0(r2)
}
   12548:	0001883a 	nop
   1254c:	e037883a 	mov	sp,fp
   12550:	df000017 	ldw	fp,0(sp)
   12554:	dec00104 	addi	sp,sp,4
   12558:	f800283a 	ret

0001255c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   1255c:	defffd04 	addi	sp,sp,-12
   12560:	df000215 	stw	fp,8(sp)
   12564:	df000204 	addi	fp,sp,8
   12568:	e13ffe15 	stw	r4,-8(fp)
   1256c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   12570:	e0bffe17 	ldw	r2,-8(fp)
   12574:	10800317 	ldw	r2,12(r2)
   12578:	10800204 	addi	r2,r2,8
   1257c:	10800037 	ldwio	r2,0(r2)
   12580:	10800c0c 	andi	r2,r2,48
   12584:	1005d13a 	srai	r2,r2,4
   12588:	1007883a 	mov	r3,r2
   1258c:	e0bfff17 	ldw	r2,-4(fp)
   12590:	10c00015 	stw	r3,0(r2)
}
   12594:	0001883a 	nop
   12598:	e037883a 	mov	sp,fp
   1259c:	df000017 	ldw	fp,0(sp)
   125a0:	dec00104 	addi	sp,sp,4
   125a4:	f800283a 	ret

000125a8 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   125a8:	defffd04 	addi	sp,sp,-12
   125ac:	df000215 	stw	fp,8(sp)
   125b0:	df000204 	addi	fp,sp,8
   125b4:	e13ffe15 	stw	r4,-8(fp)
   125b8:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   125bc:	e0bffe17 	ldw	r2,-8(fp)
   125c0:	10800317 	ldw	r2,12(r2)
   125c4:	10800204 	addi	r2,r2,8
   125c8:	e0fffe17 	ldw	r3,-8(fp)
   125cc:	18c00317 	ldw	r3,12(r3)
   125d0:	18c00204 	addi	r3,r3,8
   125d4:	18c00037 	ldwio	r3,0(r3)
   125d8:	1809883a 	mov	r4,r3
   125dc:	00fff3c4 	movi	r3,-49
   125e0:	20c8703a 	and	r4,r4,r3
   125e4:	e0ffff17 	ldw	r3,-4(fp)
   125e8:	1806913a 	slli	r3,r3,4
   125ec:	18c00c0c 	andi	r3,r3,48
   125f0:	20c6b03a 	or	r3,r4,r3
   125f4:	10c00035 	stwio	r3,0(r2)
}
   125f8:	0001883a 	nop
   125fc:	e037883a 	mov	sp,fp
   12600:	df000017 	ldw	fp,0(sp)
   12604:	dec00104 	addi	sp,sp,4
   12608:	f800283a 	ret

0001260c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   1260c:	defffd04 	addi	sp,sp,-12
   12610:	df000215 	stw	fp,8(sp)
   12614:	df000204 	addi	fp,sp,8
   12618:	e13ffe15 	stw	r4,-8(fp)
   1261c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   12620:	e0bffe17 	ldw	r2,-8(fp)
   12624:	10800317 	ldw	r2,12(r2)
   12628:	10800204 	addi	r2,r2,8
   1262c:	10800037 	ldwio	r2,0(r2)
   12630:	1080030c 	andi	r2,r2,12
   12634:	1005d0ba 	srai	r2,r2,2
   12638:	1007883a 	mov	r3,r2
   1263c:	e0bfff17 	ldw	r2,-4(fp)
   12640:	10c00015 	stw	r3,0(r2)
}
   12644:	0001883a 	nop
   12648:	e037883a 	mov	sp,fp
   1264c:	df000017 	ldw	fp,0(sp)
   12650:	dec00104 	addi	sp,sp,4
   12654:	f800283a 	ret

00012658 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   12658:	defffd04 	addi	sp,sp,-12
   1265c:	df000215 	stw	fp,8(sp)
   12660:	df000204 	addi	fp,sp,8
   12664:	e13ffe15 	stw	r4,-8(fp)
   12668:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   1266c:	e0bffe17 	ldw	r2,-8(fp)
   12670:	10800317 	ldw	r2,12(r2)
   12674:	10c00204 	addi	r3,r2,8
   12678:	e0bffe17 	ldw	r2,-8(fp)
   1267c:	10800317 	ldw	r2,12(r2)
   12680:	10800204 	addi	r2,r2,8
   12684:	10800037 	ldwio	r2,0(r2)
   12688:	1009883a 	mov	r4,r2
   1268c:	00bffcc4 	movi	r2,-13
   12690:	2088703a 	and	r4,r4,r2
   12694:	e0bfff17 	ldw	r2,-4(fp)
   12698:	1085883a 	add	r2,r2,r2
   1269c:	1085883a 	add	r2,r2,r2
   126a0:	1080030c 	andi	r2,r2,12
   126a4:	2084b03a 	or	r2,r4,r2
   126a8:	18800035 	stwio	r2,0(r3)
}
   126ac:	0001883a 	nop
   126b0:	e037883a 	mov	sp,fp
   126b4:	df000017 	ldw	fp,0(sp)
   126b8:	dec00104 	addi	sp,sp,4
   126bc:	f800283a 	ret

000126c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   126c0:	defffa04 	addi	sp,sp,-24
   126c4:	dfc00515 	stw	ra,20(sp)
   126c8:	df000415 	stw	fp,16(sp)
   126cc:	df000404 	addi	fp,sp,16
   126d0:	e13ffd15 	stw	r4,-12(fp)
   126d4:	e17ffe15 	stw	r5,-8(fp)
   126d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   126dc:	e0bffd17 	ldw	r2,-12(fp)
   126e0:	10800017 	ldw	r2,0(r2)
   126e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   126e8:	e0bffc17 	ldw	r2,-16(fp)
   126ec:	10c00a04 	addi	r3,r2,40
   126f0:	e0bffd17 	ldw	r2,-12(fp)
   126f4:	10800217 	ldw	r2,8(r2)
   126f8:	100f883a 	mov	r7,r2
   126fc:	e1bfff17 	ldw	r6,-4(fp)
   12700:	e17ffe17 	ldw	r5,-8(fp)
   12704:	1809883a 	mov	r4,r3
   12708:	0012ce80 	call	12ce8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1270c:	e037883a 	mov	sp,fp
   12710:	dfc00117 	ldw	ra,4(sp)
   12714:	df000017 	ldw	fp,0(sp)
   12718:	dec00204 	addi	sp,sp,8
   1271c:	f800283a 	ret

00012720 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12720:	defffa04 	addi	sp,sp,-24
   12724:	dfc00515 	stw	ra,20(sp)
   12728:	df000415 	stw	fp,16(sp)
   1272c:	df000404 	addi	fp,sp,16
   12730:	e13ffd15 	stw	r4,-12(fp)
   12734:	e17ffe15 	stw	r5,-8(fp)
   12738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1273c:	e0bffd17 	ldw	r2,-12(fp)
   12740:	10800017 	ldw	r2,0(r2)
   12744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12748:	e0bffc17 	ldw	r2,-16(fp)
   1274c:	10c00a04 	addi	r3,r2,40
   12750:	e0bffd17 	ldw	r2,-12(fp)
   12754:	10800217 	ldw	r2,8(r2)
   12758:	100f883a 	mov	r7,r2
   1275c:	e1bfff17 	ldw	r6,-4(fp)
   12760:	e17ffe17 	ldw	r5,-8(fp)
   12764:	1809883a 	mov	r4,r3
   12768:	0012f040 	call	12f04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1276c:	e037883a 	mov	sp,fp
   12770:	dfc00117 	ldw	ra,4(sp)
   12774:	df000017 	ldw	fp,0(sp)
   12778:	dec00204 	addi	sp,sp,8
   1277c:	f800283a 	ret

00012780 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12780:	defffc04 	addi	sp,sp,-16
   12784:	dfc00315 	stw	ra,12(sp)
   12788:	df000215 	stw	fp,8(sp)
   1278c:	df000204 	addi	fp,sp,8
   12790:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12794:	e0bfff17 	ldw	r2,-4(fp)
   12798:	10800017 	ldw	r2,0(r2)
   1279c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   127a0:	e0bffe17 	ldw	r2,-8(fp)
   127a4:	10c00a04 	addi	r3,r2,40
   127a8:	e0bfff17 	ldw	r2,-4(fp)
   127ac:	10800217 	ldw	r2,8(r2)
   127b0:	100b883a 	mov	r5,r2
   127b4:	1809883a 	mov	r4,r3
   127b8:	0012b900 	call	12b90 <altera_avalon_jtag_uart_close>
}
   127bc:	e037883a 	mov	sp,fp
   127c0:	dfc00117 	ldw	ra,4(sp)
   127c4:	df000017 	ldw	fp,0(sp)
   127c8:	dec00204 	addi	sp,sp,8
   127cc:	f800283a 	ret

000127d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   127d0:	defffa04 	addi	sp,sp,-24
   127d4:	dfc00515 	stw	ra,20(sp)
   127d8:	df000415 	stw	fp,16(sp)
   127dc:	df000404 	addi	fp,sp,16
   127e0:	e13ffd15 	stw	r4,-12(fp)
   127e4:	e17ffe15 	stw	r5,-8(fp)
   127e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   127ec:	e0bffd17 	ldw	r2,-12(fp)
   127f0:	10800017 	ldw	r2,0(r2)
   127f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   127f8:	e0bffc17 	ldw	r2,-16(fp)
   127fc:	10800a04 	addi	r2,r2,40
   12800:	e1bfff17 	ldw	r6,-4(fp)
   12804:	e17ffe17 	ldw	r5,-8(fp)
   12808:	1009883a 	mov	r4,r2
   1280c:	0012bf80 	call	12bf8 <altera_avalon_jtag_uart_ioctl>
}
   12810:	e037883a 	mov	sp,fp
   12814:	dfc00117 	ldw	ra,4(sp)
   12818:	df000017 	ldw	fp,0(sp)
   1281c:	dec00204 	addi	sp,sp,8
   12820:	f800283a 	ret

00012824 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12824:	defffa04 	addi	sp,sp,-24
   12828:	dfc00515 	stw	ra,20(sp)
   1282c:	df000415 	stw	fp,16(sp)
   12830:	df000404 	addi	fp,sp,16
   12834:	e13ffd15 	stw	r4,-12(fp)
   12838:	e17ffe15 	stw	r5,-8(fp)
   1283c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12840:	e0bffd17 	ldw	r2,-12(fp)
   12844:	00c00044 	movi	r3,1
   12848:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1284c:	e0bffd17 	ldw	r2,-12(fp)
   12850:	10800017 	ldw	r2,0(r2)
   12854:	10800104 	addi	r2,r2,4
   12858:	1007883a 	mov	r3,r2
   1285c:	e0bffd17 	ldw	r2,-12(fp)
   12860:	10800817 	ldw	r2,32(r2)
   12864:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12868:	e0bffe17 	ldw	r2,-8(fp)
   1286c:	e0ffff17 	ldw	r3,-4(fp)
   12870:	d8000015 	stw	zero,0(sp)
   12874:	e1fffd17 	ldw	r7,-12(fp)
   12878:	01800074 	movhi	r6,1
   1287c:	318a3904 	addi	r6,r6,10468
   12880:	180b883a 	mov	r5,r3
   12884:	1009883a 	mov	r4,r2
   12888:	001390c0 	call	1390c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1288c:	e0bffd17 	ldw	r2,-12(fp)
   12890:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12894:	e0bffd17 	ldw	r2,-12(fp)
   12898:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1289c:	d0e70117 	ldw	r3,-25596(gp)
   128a0:	e1fffd17 	ldw	r7,-12(fp)
   128a4:	01800074 	movhi	r6,1
   128a8:	318abc04 	addi	r6,r6,10992
   128ac:	180b883a 	mov	r5,r3
   128b0:	1009883a 	mov	r4,r2
   128b4:	00134180 	call	13418 <alt_alarm_start>
   128b8:	1000040e 	bge	r2,zero,128cc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   128bc:	e0fffd17 	ldw	r3,-12(fp)
   128c0:	00a00034 	movhi	r2,32768
   128c4:	10bfffc4 	addi	r2,r2,-1
   128c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   128cc:	0001883a 	nop
   128d0:	e037883a 	mov	sp,fp
   128d4:	dfc00117 	ldw	ra,4(sp)
   128d8:	df000017 	ldw	fp,0(sp)
   128dc:	dec00204 	addi	sp,sp,8
   128e0:	f800283a 	ret

000128e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   128e4:	defff804 	addi	sp,sp,-32
   128e8:	df000715 	stw	fp,28(sp)
   128ec:	df000704 	addi	fp,sp,28
   128f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   128f4:	e0bfff17 	ldw	r2,-4(fp)
   128f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   128fc:	e0bffb17 	ldw	r2,-20(fp)
   12900:	10800017 	ldw	r2,0(r2)
   12904:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12908:	e0bffc17 	ldw	r2,-16(fp)
   1290c:	10800104 	addi	r2,r2,4
   12910:	10800037 	ldwio	r2,0(r2)
   12914:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12918:	e0bffd17 	ldw	r2,-12(fp)
   1291c:	1080c00c 	andi	r2,r2,768
   12920:	10006d26 	beq	r2,zero,12ad8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12924:	e0bffd17 	ldw	r2,-12(fp)
   12928:	1080400c 	andi	r2,r2,256
   1292c:	10003526 	beq	r2,zero,12a04 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   12930:	00800074 	movhi	r2,1
   12934:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12938:	e0bffb17 	ldw	r2,-20(fp)
   1293c:	10800a17 	ldw	r2,40(r2)
   12940:	10800044 	addi	r2,r2,1
   12944:	1081ffcc 	andi	r2,r2,2047
   12948:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1294c:	e0bffb17 	ldw	r2,-20(fp)
   12950:	10c00b17 	ldw	r3,44(r2)
   12954:	e0bffe17 	ldw	r2,-8(fp)
   12958:	18801526 	beq	r3,r2,129b0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1295c:	e0bffc17 	ldw	r2,-16(fp)
   12960:	10800037 	ldwio	r2,0(r2)
   12964:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12968:	e0bff917 	ldw	r2,-28(fp)
   1296c:	10a0000c 	andi	r2,r2,32768
   12970:	10001126 	beq	r2,zero,129b8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12974:	e0bffb17 	ldw	r2,-20(fp)
   12978:	10800a17 	ldw	r2,40(r2)
   1297c:	e0fff917 	ldw	r3,-28(fp)
   12980:	1809883a 	mov	r4,r3
   12984:	e0fffb17 	ldw	r3,-20(fp)
   12988:	1885883a 	add	r2,r3,r2
   1298c:	10800e04 	addi	r2,r2,56
   12990:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12994:	e0bffb17 	ldw	r2,-20(fp)
   12998:	10800a17 	ldw	r2,40(r2)
   1299c:	10800044 	addi	r2,r2,1
   129a0:	10c1ffcc 	andi	r3,r2,2047
   129a4:	e0bffb17 	ldw	r2,-20(fp)
   129a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   129ac:	003fe206 	br	12938 <__alt_data_end+0xfc012938>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   129b0:	0001883a 	nop
   129b4:	00000106 	br	129bc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   129b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   129bc:	e0bff917 	ldw	r2,-28(fp)
   129c0:	10bfffec 	andhi	r2,r2,65535
   129c4:	10000f26 	beq	r2,zero,12a04 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   129c8:	e0bffb17 	ldw	r2,-20(fp)
   129cc:	10c00817 	ldw	r3,32(r2)
   129d0:	00bfff84 	movi	r2,-2
   129d4:	1886703a 	and	r3,r3,r2
   129d8:	e0bffb17 	ldw	r2,-20(fp)
   129dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   129e0:	e0bffc17 	ldw	r2,-16(fp)
   129e4:	10800104 	addi	r2,r2,4
   129e8:	1007883a 	mov	r3,r2
   129ec:	e0bffb17 	ldw	r2,-20(fp)
   129f0:	10800817 	ldw	r2,32(r2)
   129f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   129f8:	e0bffc17 	ldw	r2,-16(fp)
   129fc:	10800104 	addi	r2,r2,4
   12a00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12a04:	e0bffd17 	ldw	r2,-12(fp)
   12a08:	1080800c 	andi	r2,r2,512
   12a0c:	103fbe26 	beq	r2,zero,12908 <__alt_data_end+0xfc012908>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12a10:	e0bffd17 	ldw	r2,-12(fp)
   12a14:	1004d43a 	srli	r2,r2,16
   12a18:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12a1c:	00001406 	br	12a70 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12a20:	e0bffc17 	ldw	r2,-16(fp)
   12a24:	e0fffb17 	ldw	r3,-20(fp)
   12a28:	18c00d17 	ldw	r3,52(r3)
   12a2c:	e13ffb17 	ldw	r4,-20(fp)
   12a30:	20c7883a 	add	r3,r4,r3
   12a34:	18c20e04 	addi	r3,r3,2104
   12a38:	18c00003 	ldbu	r3,0(r3)
   12a3c:	18c03fcc 	andi	r3,r3,255
   12a40:	18c0201c 	xori	r3,r3,128
   12a44:	18ffe004 	addi	r3,r3,-128
   12a48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12a4c:	e0bffb17 	ldw	r2,-20(fp)
   12a50:	10800d17 	ldw	r2,52(r2)
   12a54:	10800044 	addi	r2,r2,1
   12a58:	10c1ffcc 	andi	r3,r2,2047
   12a5c:	e0bffb17 	ldw	r2,-20(fp)
   12a60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12a64:	e0bffa17 	ldw	r2,-24(fp)
   12a68:	10bfffc4 	addi	r2,r2,-1
   12a6c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12a70:	e0bffa17 	ldw	r2,-24(fp)
   12a74:	10000526 	beq	r2,zero,12a8c <altera_avalon_jtag_uart_irq+0x1a8>
   12a78:	e0bffb17 	ldw	r2,-20(fp)
   12a7c:	10c00d17 	ldw	r3,52(r2)
   12a80:	e0bffb17 	ldw	r2,-20(fp)
   12a84:	10800c17 	ldw	r2,48(r2)
   12a88:	18bfe51e 	bne	r3,r2,12a20 <__alt_data_end+0xfc012a20>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12a8c:	e0bffa17 	ldw	r2,-24(fp)
   12a90:	103f9d26 	beq	r2,zero,12908 <__alt_data_end+0xfc012908>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12a94:	e0bffb17 	ldw	r2,-20(fp)
   12a98:	10c00817 	ldw	r3,32(r2)
   12a9c:	00bfff44 	movi	r2,-3
   12aa0:	1886703a 	and	r3,r3,r2
   12aa4:	e0bffb17 	ldw	r2,-20(fp)
   12aa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12aac:	e0bffb17 	ldw	r2,-20(fp)
   12ab0:	10800017 	ldw	r2,0(r2)
   12ab4:	10800104 	addi	r2,r2,4
   12ab8:	1007883a 	mov	r3,r2
   12abc:	e0bffb17 	ldw	r2,-20(fp)
   12ac0:	10800817 	ldw	r2,32(r2)
   12ac4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12ac8:	e0bffc17 	ldw	r2,-16(fp)
   12acc:	10800104 	addi	r2,r2,4
   12ad0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   12ad4:	003f8c06 	br	12908 <__alt_data_end+0xfc012908>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   12ad8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   12adc:	0001883a 	nop
   12ae0:	e037883a 	mov	sp,fp
   12ae4:	df000017 	ldw	fp,0(sp)
   12ae8:	dec00104 	addi	sp,sp,4
   12aec:	f800283a 	ret

00012af0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12af0:	defff804 	addi	sp,sp,-32
   12af4:	df000715 	stw	fp,28(sp)
   12af8:	df000704 	addi	fp,sp,28
   12afc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12b00:	e0bffb17 	ldw	r2,-20(fp)
   12b04:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12b08:	e0bff917 	ldw	r2,-28(fp)
   12b0c:	10800017 	ldw	r2,0(r2)
   12b10:	10800104 	addi	r2,r2,4
   12b14:	10800037 	ldwio	r2,0(r2)
   12b18:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12b1c:	e0bffa17 	ldw	r2,-24(fp)
   12b20:	1081000c 	andi	r2,r2,1024
   12b24:	10000b26 	beq	r2,zero,12b54 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12b28:	e0bff917 	ldw	r2,-28(fp)
   12b2c:	10800017 	ldw	r2,0(r2)
   12b30:	10800104 	addi	r2,r2,4
   12b34:	1007883a 	mov	r3,r2
   12b38:	e0bff917 	ldw	r2,-28(fp)
   12b3c:	10800817 	ldw	r2,32(r2)
   12b40:	10810014 	ori	r2,r2,1024
   12b44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   12b48:	e0bff917 	ldw	r2,-28(fp)
   12b4c:	10000915 	stw	zero,36(r2)
   12b50:	00000a06 	br	12b7c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   12b54:	e0bff917 	ldw	r2,-28(fp)
   12b58:	10c00917 	ldw	r3,36(r2)
   12b5c:	00a00034 	movhi	r2,32768
   12b60:	10bfff04 	addi	r2,r2,-4
   12b64:	10c00536 	bltu	r2,r3,12b7c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   12b68:	e0bff917 	ldw	r2,-28(fp)
   12b6c:	10800917 	ldw	r2,36(r2)
   12b70:	10c00044 	addi	r3,r2,1
   12b74:	e0bff917 	ldw	r2,-28(fp)
   12b78:	10c00915 	stw	r3,36(r2)
   12b7c:	d0a70117 	ldw	r2,-25596(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12b80:	e037883a 	mov	sp,fp
   12b84:	df000017 	ldw	fp,0(sp)
   12b88:	dec00104 	addi	sp,sp,4
   12b8c:	f800283a 	ret

00012b90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12b90:	defffd04 	addi	sp,sp,-12
   12b94:	df000215 	stw	fp,8(sp)
   12b98:	df000204 	addi	fp,sp,8
   12b9c:	e13ffe15 	stw	r4,-8(fp)
   12ba0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12ba4:	00000506 	br	12bbc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   12ba8:	e0bfff17 	ldw	r2,-4(fp)
   12bac:	1090000c 	andi	r2,r2,16384
   12bb0:	10000226 	beq	r2,zero,12bbc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   12bb4:	00bffd44 	movi	r2,-11
   12bb8:	00000b06 	br	12be8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12bbc:	e0bffe17 	ldw	r2,-8(fp)
   12bc0:	10c00d17 	ldw	r3,52(r2)
   12bc4:	e0bffe17 	ldw	r2,-8(fp)
   12bc8:	10800c17 	ldw	r2,48(r2)
   12bcc:	18800526 	beq	r3,r2,12be4 <altera_avalon_jtag_uart_close+0x54>
   12bd0:	e0bffe17 	ldw	r2,-8(fp)
   12bd4:	10c00917 	ldw	r3,36(r2)
   12bd8:	e0bffe17 	ldw	r2,-8(fp)
   12bdc:	10800117 	ldw	r2,4(r2)
   12be0:	18bff136 	bltu	r3,r2,12ba8 <__alt_data_end+0xfc012ba8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   12be4:	0005883a 	mov	r2,zero
}
   12be8:	e037883a 	mov	sp,fp
   12bec:	df000017 	ldw	fp,0(sp)
   12bf0:	dec00104 	addi	sp,sp,4
   12bf4:	f800283a 	ret

00012bf8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12bf8:	defffa04 	addi	sp,sp,-24
   12bfc:	df000515 	stw	fp,20(sp)
   12c00:	df000504 	addi	fp,sp,20
   12c04:	e13ffd15 	stw	r4,-12(fp)
   12c08:	e17ffe15 	stw	r5,-8(fp)
   12c0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   12c10:	00bff9c4 	movi	r2,-25
   12c14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   12c18:	e0bffe17 	ldw	r2,-8(fp)
   12c1c:	10da8060 	cmpeqi	r3,r2,27137
   12c20:	1800031e 	bne	r3,zero,12c30 <altera_avalon_jtag_uart_ioctl+0x38>
   12c24:	109a80a0 	cmpeqi	r2,r2,27138
   12c28:	1000181e 	bne	r2,zero,12c8c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   12c2c:	00002906 	br	12cd4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   12c30:	e0bffd17 	ldw	r2,-12(fp)
   12c34:	10c00117 	ldw	r3,4(r2)
   12c38:	00a00034 	movhi	r2,32768
   12c3c:	10bfffc4 	addi	r2,r2,-1
   12c40:	18802126 	beq	r3,r2,12cc8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   12c44:	e0bfff17 	ldw	r2,-4(fp)
   12c48:	10800017 	ldw	r2,0(r2)
   12c4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12c50:	e0bffc17 	ldw	r2,-16(fp)
   12c54:	10800090 	cmplti	r2,r2,2
   12c58:	1000061e 	bne	r2,zero,12c74 <altera_avalon_jtag_uart_ioctl+0x7c>
   12c5c:	e0fffc17 	ldw	r3,-16(fp)
   12c60:	00a00034 	movhi	r2,32768
   12c64:	10bfffc4 	addi	r2,r2,-1
   12c68:	18800226 	beq	r3,r2,12c74 <altera_avalon_jtag_uart_ioctl+0x7c>
   12c6c:	e0bffc17 	ldw	r2,-16(fp)
   12c70:	00000206 	br	12c7c <altera_avalon_jtag_uart_ioctl+0x84>
   12c74:	00a00034 	movhi	r2,32768
   12c78:	10bfff84 	addi	r2,r2,-2
   12c7c:	e0fffd17 	ldw	r3,-12(fp)
   12c80:	18800115 	stw	r2,4(r3)
      rc = 0;
   12c84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12c88:	00000f06 	br	12cc8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12c8c:	e0bffd17 	ldw	r2,-12(fp)
   12c90:	10c00117 	ldw	r3,4(r2)
   12c94:	00a00034 	movhi	r2,32768
   12c98:	10bfffc4 	addi	r2,r2,-1
   12c9c:	18800c26 	beq	r3,r2,12cd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12ca0:	e0bffd17 	ldw	r2,-12(fp)
   12ca4:	10c00917 	ldw	r3,36(r2)
   12ca8:	e0bffd17 	ldw	r2,-12(fp)
   12cac:	10800117 	ldw	r2,4(r2)
   12cb0:	1885803a 	cmpltu	r2,r3,r2
   12cb4:	10c03fcc 	andi	r3,r2,255
   12cb8:	e0bfff17 	ldw	r2,-4(fp)
   12cbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   12cc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12cc4:	00000206 	br	12cd0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   12cc8:	0001883a 	nop
   12ccc:	00000106 	br	12cd4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   12cd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   12cd4:	e0bffb17 	ldw	r2,-20(fp)
}
   12cd8:	e037883a 	mov	sp,fp
   12cdc:	df000017 	ldw	fp,0(sp)
   12ce0:	dec00104 	addi	sp,sp,4
   12ce4:	f800283a 	ret

00012ce8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   12ce8:	defff304 	addi	sp,sp,-52
   12cec:	dfc00c15 	stw	ra,48(sp)
   12cf0:	df000b15 	stw	fp,44(sp)
   12cf4:	df000b04 	addi	fp,sp,44
   12cf8:	e13ffc15 	stw	r4,-16(fp)
   12cfc:	e17ffd15 	stw	r5,-12(fp)
   12d00:	e1bffe15 	stw	r6,-8(fp)
   12d04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   12d08:	e0bffd17 	ldw	r2,-12(fp)
   12d0c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12d10:	00004706 	br	12e30 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   12d14:	e0bffc17 	ldw	r2,-16(fp)
   12d18:	10800a17 	ldw	r2,40(r2)
   12d1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   12d20:	e0bffc17 	ldw	r2,-16(fp)
   12d24:	10800b17 	ldw	r2,44(r2)
   12d28:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   12d2c:	e0fff717 	ldw	r3,-36(fp)
   12d30:	e0bff817 	ldw	r2,-32(fp)
   12d34:	18800536 	bltu	r3,r2,12d4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12d38:	e0fff717 	ldw	r3,-36(fp)
   12d3c:	e0bff817 	ldw	r2,-32(fp)
   12d40:	1885c83a 	sub	r2,r3,r2
   12d44:	e0bff615 	stw	r2,-40(fp)
   12d48:	00000406 	br	12d5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12d4c:	00c20004 	movi	r3,2048
   12d50:	e0bff817 	ldw	r2,-32(fp)
   12d54:	1885c83a 	sub	r2,r3,r2
   12d58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12d5c:	e0bff617 	ldw	r2,-40(fp)
   12d60:	10001e26 	beq	r2,zero,12ddc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   12d64:	e0fffe17 	ldw	r3,-8(fp)
   12d68:	e0bff617 	ldw	r2,-40(fp)
   12d6c:	1880022e 	bgeu	r3,r2,12d78 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12d70:	e0bffe17 	ldw	r2,-8(fp)
   12d74:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12d78:	e0bffc17 	ldw	r2,-16(fp)
   12d7c:	10c00e04 	addi	r3,r2,56
   12d80:	e0bff817 	ldw	r2,-32(fp)
   12d84:	1885883a 	add	r2,r3,r2
   12d88:	e1bff617 	ldw	r6,-40(fp)
   12d8c:	100b883a 	mov	r5,r2
   12d90:	e13ff517 	ldw	r4,-44(fp)
   12d94:	0008cf00 	call	8cf0 <memcpy>
      ptr   += n;
   12d98:	e0fff517 	ldw	r3,-44(fp)
   12d9c:	e0bff617 	ldw	r2,-40(fp)
   12da0:	1885883a 	add	r2,r3,r2
   12da4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   12da8:	e0fffe17 	ldw	r3,-8(fp)
   12dac:	e0bff617 	ldw	r2,-40(fp)
   12db0:	1885c83a 	sub	r2,r3,r2
   12db4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12db8:	e0fff817 	ldw	r3,-32(fp)
   12dbc:	e0bff617 	ldw	r2,-40(fp)
   12dc0:	1885883a 	add	r2,r3,r2
   12dc4:	10c1ffcc 	andi	r3,r2,2047
   12dc8:	e0bffc17 	ldw	r2,-16(fp)
   12dcc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12dd0:	e0bffe17 	ldw	r2,-8(fp)
   12dd4:	00bfcf16 	blt	zero,r2,12d14 <__alt_data_end+0xfc012d14>
   12dd8:	00000106 	br	12de0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   12ddc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   12de0:	e0fff517 	ldw	r3,-44(fp)
   12de4:	e0bffd17 	ldw	r2,-12(fp)
   12de8:	1880141e 	bne	r3,r2,12e3c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12dec:	e0bfff17 	ldw	r2,-4(fp)
   12df0:	1090000c 	andi	r2,r2,16384
   12df4:	1000131e 	bne	r2,zero,12e44 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12df8:	0001883a 	nop
   12dfc:	e0bffc17 	ldw	r2,-16(fp)
   12e00:	10c00a17 	ldw	r3,40(r2)
   12e04:	e0bff717 	ldw	r2,-36(fp)
   12e08:	1880051e 	bne	r3,r2,12e20 <altera_avalon_jtag_uart_read+0x138>
   12e0c:	e0bffc17 	ldw	r2,-16(fp)
   12e10:	10c00917 	ldw	r3,36(r2)
   12e14:	e0bffc17 	ldw	r2,-16(fp)
   12e18:	10800117 	ldw	r2,4(r2)
   12e1c:	18bff736 	bltu	r3,r2,12dfc <__alt_data_end+0xfc012dfc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12e20:	e0bffc17 	ldw	r2,-16(fp)
   12e24:	10c00a17 	ldw	r3,40(r2)
   12e28:	e0bff717 	ldw	r2,-36(fp)
   12e2c:	18800726 	beq	r3,r2,12e4c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12e30:	e0bffe17 	ldw	r2,-8(fp)
   12e34:	00bfb716 	blt	zero,r2,12d14 <__alt_data_end+0xfc012d14>
   12e38:	00000506 	br	12e50 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   12e3c:	0001883a 	nop
   12e40:	00000306 	br	12e50 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   12e44:	0001883a 	nop
   12e48:	00000106 	br	12e50 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   12e4c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12e50:	e0fff517 	ldw	r3,-44(fp)
   12e54:	e0bffd17 	ldw	r2,-12(fp)
   12e58:	18801826 	beq	r3,r2,12ebc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e5c:	0005303a 	rdctl	r2,status
   12e60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e64:	e0fffb17 	ldw	r3,-20(fp)
   12e68:	00bfff84 	movi	r2,-2
   12e6c:	1884703a 	and	r2,r3,r2
   12e70:	1001703a 	wrctl	status,r2
  
  return context;
   12e74:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12e78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12e7c:	e0bffc17 	ldw	r2,-16(fp)
   12e80:	10800817 	ldw	r2,32(r2)
   12e84:	10c00054 	ori	r3,r2,1
   12e88:	e0bffc17 	ldw	r2,-16(fp)
   12e8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12e90:	e0bffc17 	ldw	r2,-16(fp)
   12e94:	10800017 	ldw	r2,0(r2)
   12e98:	10800104 	addi	r2,r2,4
   12e9c:	1007883a 	mov	r3,r2
   12ea0:	e0bffc17 	ldw	r2,-16(fp)
   12ea4:	10800817 	ldw	r2,32(r2)
   12ea8:	18800035 	stwio	r2,0(r3)
   12eac:	e0bffa17 	ldw	r2,-24(fp)
   12eb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12eb4:	e0bff917 	ldw	r2,-28(fp)
   12eb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12ebc:	e0fff517 	ldw	r3,-44(fp)
   12ec0:	e0bffd17 	ldw	r2,-12(fp)
   12ec4:	18800426 	beq	r3,r2,12ed8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   12ec8:	e0fff517 	ldw	r3,-44(fp)
   12ecc:	e0bffd17 	ldw	r2,-12(fp)
   12ed0:	1885c83a 	sub	r2,r3,r2
   12ed4:	00000606 	br	12ef0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   12ed8:	e0bfff17 	ldw	r2,-4(fp)
   12edc:	1090000c 	andi	r2,r2,16384
   12ee0:	10000226 	beq	r2,zero,12eec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   12ee4:	00bffd44 	movi	r2,-11
   12ee8:	00000106 	br	12ef0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   12eec:	00bffec4 	movi	r2,-5
}
   12ef0:	e037883a 	mov	sp,fp
   12ef4:	dfc00117 	ldw	ra,4(sp)
   12ef8:	df000017 	ldw	fp,0(sp)
   12efc:	dec00204 	addi	sp,sp,8
   12f00:	f800283a 	ret

00012f04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12f04:	defff304 	addi	sp,sp,-52
   12f08:	dfc00c15 	stw	ra,48(sp)
   12f0c:	df000b15 	stw	fp,44(sp)
   12f10:	df000b04 	addi	fp,sp,44
   12f14:	e13ffc15 	stw	r4,-16(fp)
   12f18:	e17ffd15 	stw	r5,-12(fp)
   12f1c:	e1bffe15 	stw	r6,-8(fp)
   12f20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12f24:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12f28:	e0bffd17 	ldw	r2,-12(fp)
   12f2c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12f30:	00003706 	br	13010 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12f34:	e0bffc17 	ldw	r2,-16(fp)
   12f38:	10800c17 	ldw	r2,48(r2)
   12f3c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   12f40:	e0bffc17 	ldw	r2,-16(fp)
   12f44:	10800d17 	ldw	r2,52(r2)
   12f48:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   12f4c:	e0fff917 	ldw	r3,-28(fp)
   12f50:	e0bff517 	ldw	r2,-44(fp)
   12f54:	1880062e 	bgeu	r3,r2,12f70 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12f58:	e0fff517 	ldw	r3,-44(fp)
   12f5c:	e0bff917 	ldw	r2,-28(fp)
   12f60:	1885c83a 	sub	r2,r3,r2
   12f64:	10bfffc4 	addi	r2,r2,-1
   12f68:	e0bff615 	stw	r2,-40(fp)
   12f6c:	00000b06 	br	12f9c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12f70:	e0bff517 	ldw	r2,-44(fp)
   12f74:	10000526 	beq	r2,zero,12f8c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12f78:	00c20004 	movi	r3,2048
   12f7c:	e0bff917 	ldw	r2,-28(fp)
   12f80:	1885c83a 	sub	r2,r3,r2
   12f84:	e0bff615 	stw	r2,-40(fp)
   12f88:	00000406 	br	12f9c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12f8c:	00c1ffc4 	movi	r3,2047
   12f90:	e0bff917 	ldw	r2,-28(fp)
   12f94:	1885c83a 	sub	r2,r3,r2
   12f98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12f9c:	e0bff617 	ldw	r2,-40(fp)
   12fa0:	10001e26 	beq	r2,zero,1301c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   12fa4:	e0fffe17 	ldw	r3,-8(fp)
   12fa8:	e0bff617 	ldw	r2,-40(fp)
   12fac:	1880022e 	bgeu	r3,r2,12fb8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   12fb0:	e0bffe17 	ldw	r2,-8(fp)
   12fb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12fb8:	e0bffc17 	ldw	r2,-16(fp)
   12fbc:	10c20e04 	addi	r3,r2,2104
   12fc0:	e0bff917 	ldw	r2,-28(fp)
   12fc4:	1885883a 	add	r2,r3,r2
   12fc8:	e1bff617 	ldw	r6,-40(fp)
   12fcc:	e17ffd17 	ldw	r5,-12(fp)
   12fd0:	1009883a 	mov	r4,r2
   12fd4:	0008cf00 	call	8cf0 <memcpy>
      ptr   += n;
   12fd8:	e0fffd17 	ldw	r3,-12(fp)
   12fdc:	e0bff617 	ldw	r2,-40(fp)
   12fe0:	1885883a 	add	r2,r3,r2
   12fe4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   12fe8:	e0fffe17 	ldw	r3,-8(fp)
   12fec:	e0bff617 	ldw	r2,-40(fp)
   12ff0:	1885c83a 	sub	r2,r3,r2
   12ff4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12ff8:	e0fff917 	ldw	r3,-28(fp)
   12ffc:	e0bff617 	ldw	r2,-40(fp)
   13000:	1885883a 	add	r2,r3,r2
   13004:	10c1ffcc 	andi	r3,r2,2047
   13008:	e0bffc17 	ldw	r2,-16(fp)
   1300c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13010:	e0bffe17 	ldw	r2,-8(fp)
   13014:	00bfc716 	blt	zero,r2,12f34 <__alt_data_end+0xfc012f34>
   13018:	00000106 	br	13020 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1301c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13020:	0005303a 	rdctl	r2,status
   13024:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13028:	e0fffb17 	ldw	r3,-20(fp)
   1302c:	00bfff84 	movi	r2,-2
   13030:	1884703a 	and	r2,r3,r2
   13034:	1001703a 	wrctl	status,r2
  
  return context;
   13038:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1303c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13040:	e0bffc17 	ldw	r2,-16(fp)
   13044:	10800817 	ldw	r2,32(r2)
   13048:	10c00094 	ori	r3,r2,2
   1304c:	e0bffc17 	ldw	r2,-16(fp)
   13050:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13054:	e0bffc17 	ldw	r2,-16(fp)
   13058:	10800017 	ldw	r2,0(r2)
   1305c:	10800104 	addi	r2,r2,4
   13060:	1007883a 	mov	r3,r2
   13064:	e0bffc17 	ldw	r2,-16(fp)
   13068:	10800817 	ldw	r2,32(r2)
   1306c:	18800035 	stwio	r2,0(r3)
   13070:	e0bffa17 	ldw	r2,-24(fp)
   13074:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13078:	e0bff817 	ldw	r2,-32(fp)
   1307c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   13080:	e0bffe17 	ldw	r2,-8(fp)
   13084:	0080100e 	bge	zero,r2,130c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   13088:	e0bfff17 	ldw	r2,-4(fp)
   1308c:	1090000c 	andi	r2,r2,16384
   13090:	1000101e 	bne	r2,zero,130d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   13094:	0001883a 	nop
   13098:	e0bffc17 	ldw	r2,-16(fp)
   1309c:	10c00d17 	ldw	r3,52(r2)
   130a0:	e0bff517 	ldw	r2,-44(fp)
   130a4:	1880051e 	bne	r3,r2,130bc <altera_avalon_jtag_uart_write+0x1b8>
   130a8:	e0bffc17 	ldw	r2,-16(fp)
   130ac:	10c00917 	ldw	r3,36(r2)
   130b0:	e0bffc17 	ldw	r2,-16(fp)
   130b4:	10800117 	ldw	r2,4(r2)
   130b8:	18bff736 	bltu	r3,r2,13098 <__alt_data_end+0xfc013098>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   130bc:	e0bffc17 	ldw	r2,-16(fp)
   130c0:	10800917 	ldw	r2,36(r2)
   130c4:	1000051e 	bne	r2,zero,130dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   130c8:	e0bffe17 	ldw	r2,-8(fp)
   130cc:	00bfd016 	blt	zero,r2,13010 <__alt_data_end+0xfc013010>
   130d0:	00000306 	br	130e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   130d4:	0001883a 	nop
   130d8:	00000106 	br	130e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   130dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   130e0:	e0fffd17 	ldw	r3,-12(fp)
   130e4:	e0bff717 	ldw	r2,-36(fp)
   130e8:	18800426 	beq	r3,r2,130fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   130ec:	e0fffd17 	ldw	r3,-12(fp)
   130f0:	e0bff717 	ldw	r2,-36(fp)
   130f4:	1885c83a 	sub	r2,r3,r2
   130f8:	00000606 	br	13114 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   130fc:	e0bfff17 	ldw	r2,-4(fp)
   13100:	1090000c 	andi	r2,r2,16384
   13104:	10000226 	beq	r2,zero,13110 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   13108:	00bffd44 	movi	r2,-11
   1310c:	00000106 	br	13114 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   13110:	00bffec4 	movi	r2,-5
}
   13114:	e037883a 	mov	sp,fp
   13118:	dfc00117 	ldw	ra,4(sp)
   1311c:	df000017 	ldw	fp,0(sp)
   13120:	dec00204 	addi	sp,sp,8
   13124:	f800283a 	ret

00013128 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   13128:	defff404 	addi	sp,sp,-48
   1312c:	df000b15 	stw	fp,44(sp)
   13130:	df000b04 	addi	fp,sp,44
   13134:	e13ffc15 	stw	r4,-16(fp)
   13138:	e17ffd15 	stw	r5,-12(fp)
   1313c:	e1bffe15 	stw	r6,-8(fp)
   13140:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   13144:	e0ffff17 	ldw	r3,-4(fp)
   13148:	e0bffe17 	ldw	r2,-8(fp)
   1314c:	1885883a 	add	r2,r3,r2
   13150:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   13154:	e0c00217 	ldw	r3,8(fp)
   13158:	e0800117 	ldw	r2,4(fp)
   1315c:	1885883a 	add	r2,r3,r2
   13160:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   13164:	e0800117 	ldw	r2,4(fp)
   13168:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   1316c:	e0bffe17 	ldw	r2,-8(fp)
   13170:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   13174:	00800044 	movi	r2,1
   13178:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   1317c:	e0bffc17 	ldw	r2,-16(fp)
   13180:	10800504 	addi	r2,r2,20
   13184:	1009883a 	mov	r4,r2
   13188:	00c00044 	movi	r3,1
   1318c:	e0bffd17 	ldw	r2,-12(fp)
   13190:	1884983a 	sll	r2,r3,r2
   13194:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   13198:	e0800317 	ldw	r2,12(fp)
   1319c:	1080008c 	andi	r2,r2,2
   131a0:	1000051e 	bne	r2,zero,131b8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   131a4:	e0bffc17 	ldw	r2,-16(fp)
   131a8:	10800304 	addi	r2,r2,12
   131ac:	1007883a 	mov	r3,r2
   131b0:	00810004 	movi	r2,1024
   131b4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   131b8:	e0bffc17 	ldw	r2,-16(fp)
   131bc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   131c0:	e0bffc17 	ldw	r2,-16(fp)
   131c4:	10800204 	addi	r2,r2,8
   131c8:	10800037 	ldwio	r2,0(r2)
   131cc:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   131d0:	e0bffa17 	ldw	r2,-24(fp)
   131d4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   131d8:	10000226 	beq	r2,zero,131e4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   131dc:	e0bff717 	ldw	r2,-36(fp)
   131e0:	1000031e 	bne	r2,zero,131f0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   131e4:	e0bffa17 	ldw	r2,-24(fp)
   131e8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   131ec:	103ff426 	beq	r2,zero,131c0 <__alt_data_end+0xfc0131c0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   131f0:	e0bffa17 	ldw	r2,-24(fp)
   131f4:	1080100c 	andi	r2,r2,64
   131f8:	10001e26 	beq	r2,zero,13274 <alt_avalon_spi_command+0x14c>
   131fc:	e0bff717 	ldw	r2,-36(fp)
   13200:	00801c0e 	bge	zero,r2,13274 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   13204:	e0bff717 	ldw	r2,-36(fp)
   13208:	10bfffc4 	addi	r2,r2,-1
   1320c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   13210:	e0ffff17 	ldw	r3,-4(fp)
   13214:	e0bff817 	ldw	r2,-32(fp)
   13218:	18800a2e 	bgeu	r3,r2,13244 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   1321c:	e0bffc17 	ldw	r2,-16(fp)
   13220:	10800104 	addi	r2,r2,4
   13224:	1009883a 	mov	r4,r2
   13228:	e0bfff17 	ldw	r2,-4(fp)
   1322c:	10c00044 	addi	r3,r2,1
   13230:	e0ffff15 	stw	r3,-4(fp)
   13234:	10800003 	ldbu	r2,0(r2)
   13238:	10803fcc 	andi	r2,r2,255
   1323c:	20800035 	stwio	r2,0(r4)
   13240:	00000c06 	br	13274 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   13244:	e0bff517 	ldw	r2,-44(fp)
   13248:	10000826 	beq	r2,zero,1326c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   1324c:	e0bff517 	ldw	r2,-44(fp)
   13250:	10bfffc4 	addi	r2,r2,-1
   13254:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   13258:	e0bffc17 	ldw	r2,-16(fp)
   1325c:	10800104 	addi	r2,r2,4
   13260:	0007883a 	mov	r3,zero
   13264:	10c00035 	stwio	r3,0(r2)
   13268:	00000206 	br	13274 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   1326c:	00bf0004 	movi	r2,-1024
   13270:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   13274:	e0bffa17 	ldw	r2,-24(fp)
   13278:	1080200c 	andi	r2,r2,128
   1327c:	103fd026 	beq	r2,zero,131c0 <__alt_data_end+0xfc0131c0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   13280:	e0bffc17 	ldw	r2,-16(fp)
   13284:	10800037 	ldwio	r2,0(r2)
   13288:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   1328c:	e0bff617 	ldw	r2,-40(fp)
   13290:	10000426 	beq	r2,zero,132a4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   13294:	e0bff617 	ldw	r2,-40(fp)
   13298:	10bfffc4 	addi	r2,r2,-1
   1329c:	e0bff615 	stw	r2,-40(fp)
   132a0:	00000506 	br	132b8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   132a4:	e0800217 	ldw	r2,8(fp)
   132a8:	10c00044 	addi	r3,r2,1
   132ac:	e0c00215 	stw	r3,8(fp)
   132b0:	e0fffb17 	ldw	r3,-20(fp)
   132b4:	10c00005 	stb	r3,0(r2)
      credits++;
   132b8:	e0bff717 	ldw	r2,-36(fp)
   132bc:	10800044 	addi	r2,r2,1
   132c0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   132c4:	e0bff617 	ldw	r2,-40(fp)
   132c8:	103fbd1e 	bne	r2,zero,131c0 <__alt_data_end+0xfc0131c0>
   132cc:	e0c00217 	ldw	r3,8(fp)
   132d0:	e0bff917 	ldw	r2,-28(fp)
   132d4:	18bfba1e 	bne	r3,r2,131c0 <__alt_data_end+0xfc0131c0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   132d8:	e0bffc17 	ldw	r2,-16(fp)
   132dc:	10800204 	addi	r2,r2,8
   132e0:	10800037 	ldwio	r2,0(r2)
   132e4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   132e8:	e0bffa17 	ldw	r2,-24(fp)
   132ec:	1080080c 	andi	r2,r2,32
   132f0:	103ff926 	beq	r2,zero,132d8 <__alt_data_end+0xfc0132d8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   132f4:	e0800317 	ldw	r2,12(fp)
   132f8:	1080004c 	andi	r2,r2,1
   132fc:	1000041e 	bne	r2,zero,13310 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   13300:	e0bffc17 	ldw	r2,-16(fp)
   13304:	10800304 	addi	r2,r2,12
   13308:	0007883a 	mov	r3,zero
   1330c:	10c00035 	stwio	r3,0(r2)

  return read_length;
   13310:	e0800117 	ldw	r2,4(fp)
}
   13314:	e037883a 	mov	sp,fp
   13318:	df000017 	ldw	fp,0(sp)
   1331c:	dec00104 	addi	sp,sp,4
   13320:	f800283a 	ret

00013324 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13324:	defffa04 	addi	sp,sp,-24
   13328:	dfc00515 	stw	ra,20(sp)
   1332c:	df000415 	stw	fp,16(sp)
   13330:	df000404 	addi	fp,sp,16
   13334:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   13338:	0007883a 	mov	r3,zero
   1333c:	e0bfff17 	ldw	r2,-4(fp)
   13340:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13344:	e0bfff17 	ldw	r2,-4(fp)
   13348:	10800104 	addi	r2,r2,4
   1334c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13350:	0005303a 	rdctl	r2,status
   13354:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13358:	e0fffd17 	ldw	r3,-12(fp)
   1335c:	00bfff84 	movi	r2,-2
   13360:	1884703a 	and	r2,r3,r2
   13364:	1001703a 	wrctl	status,r2
  
  return context;
   13368:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1336c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   13370:	00107540 	call	10754 <alt_tick>
   13374:	e0bffc17 	ldw	r2,-16(fp)
   13378:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1337c:	e0bffe17 	ldw	r2,-8(fp)
   13380:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13384:	0001883a 	nop
   13388:	e037883a 	mov	sp,fp
   1338c:	dfc00117 	ldw	ra,4(sp)
   13390:	df000017 	ldw	fp,0(sp)
   13394:	dec00204 	addi	sp,sp,8
   13398:	f800283a 	ret

0001339c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1339c:	defff804 	addi	sp,sp,-32
   133a0:	dfc00715 	stw	ra,28(sp)
   133a4:	df000615 	stw	fp,24(sp)
   133a8:	df000604 	addi	fp,sp,24
   133ac:	e13ffc15 	stw	r4,-16(fp)
   133b0:	e17ffd15 	stw	r5,-12(fp)
   133b4:	e1bffe15 	stw	r6,-8(fp)
   133b8:	e1ffff15 	stw	r7,-4(fp)
   133bc:	e0bfff17 	ldw	r2,-4(fp)
   133c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   133c4:	d0a70117 	ldw	r2,-25596(gp)
   133c8:	1000021e 	bne	r2,zero,133d4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   133cc:	e0bffb17 	ldw	r2,-20(fp)
   133d0:	d0a70115 	stw	r2,-25596(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   133d4:	e0bffc17 	ldw	r2,-16(fp)
   133d8:	10800104 	addi	r2,r2,4
   133dc:	00c001c4 	movi	r3,7
   133e0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   133e4:	d8000015 	stw	zero,0(sp)
   133e8:	e1fffc17 	ldw	r7,-16(fp)
   133ec:	01800074 	movhi	r6,1
   133f0:	318cc904 	addi	r6,r6,13092
   133f4:	e17ffe17 	ldw	r5,-8(fp)
   133f8:	e13ffd17 	ldw	r4,-12(fp)
   133fc:	001390c0 	call	1390c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   13400:	0001883a 	nop
   13404:	e037883a 	mov	sp,fp
   13408:	dfc00117 	ldw	ra,4(sp)
   1340c:	df000017 	ldw	fp,0(sp)
   13410:	dec00204 	addi	sp,sp,8
   13414:	f800283a 	ret

00013418 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   13418:	defff504 	addi	sp,sp,-44
   1341c:	df000a15 	stw	fp,40(sp)
   13420:	df000a04 	addi	fp,sp,40
   13424:	e13ffc15 	stw	r4,-16(fp)
   13428:	e17ffd15 	stw	r5,-12(fp)
   1342c:	e1bffe15 	stw	r6,-8(fp)
   13430:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   13434:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13438:	d0a70117 	ldw	r2,-25596(gp)
  
  if (alt_ticks_per_second ())
   1343c:	10003c26 	beq	r2,zero,13530 <alt_alarm_start+0x118>
  {
    if (alarm)
   13440:	e0bffc17 	ldw	r2,-16(fp)
   13444:	10003826 	beq	r2,zero,13528 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   13448:	e0bffc17 	ldw	r2,-16(fp)
   1344c:	e0fffe17 	ldw	r3,-8(fp)
   13450:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   13454:	e0bffc17 	ldw	r2,-16(fp)
   13458:	e0ffff17 	ldw	r3,-4(fp)
   1345c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13460:	0005303a 	rdctl	r2,status
   13464:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13468:	e0fff917 	ldw	r3,-28(fp)
   1346c:	00bfff84 	movi	r2,-2
   13470:	1884703a 	and	r2,r3,r2
   13474:	1001703a 	wrctl	status,r2
  
  return context;
   13478:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1347c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13480:	d0a70217 	ldw	r2,-25592(gp)
      
      current_nticks = alt_nticks();
   13484:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   13488:	e0fffd17 	ldw	r3,-12(fp)
   1348c:	e0bff617 	ldw	r2,-40(fp)
   13490:	1885883a 	add	r2,r3,r2
   13494:	10c00044 	addi	r3,r2,1
   13498:	e0bffc17 	ldw	r2,-16(fp)
   1349c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   134a0:	e0bffc17 	ldw	r2,-16(fp)
   134a4:	10c00217 	ldw	r3,8(r2)
   134a8:	e0bff617 	ldw	r2,-40(fp)
   134ac:	1880042e 	bgeu	r3,r2,134c0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   134b0:	e0bffc17 	ldw	r2,-16(fp)
   134b4:	00c00044 	movi	r3,1
   134b8:	10c00405 	stb	r3,16(r2)
   134bc:	00000206 	br	134c8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   134c0:	e0bffc17 	ldw	r2,-16(fp)
   134c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   134c8:	e0bffc17 	ldw	r2,-16(fp)
   134cc:	d0e01104 	addi	r3,gp,-32700
   134d0:	e0fffa15 	stw	r3,-24(fp)
   134d4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   134d8:	e0bffb17 	ldw	r2,-20(fp)
   134dc:	e0fffa17 	ldw	r3,-24(fp)
   134e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   134e4:	e0bffa17 	ldw	r2,-24(fp)
   134e8:	10c00017 	ldw	r3,0(r2)
   134ec:	e0bffb17 	ldw	r2,-20(fp)
   134f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   134f4:	e0bffa17 	ldw	r2,-24(fp)
   134f8:	10800017 	ldw	r2,0(r2)
   134fc:	e0fffb17 	ldw	r3,-20(fp)
   13500:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13504:	e0bffa17 	ldw	r2,-24(fp)
   13508:	e0fffb17 	ldw	r3,-20(fp)
   1350c:	10c00015 	stw	r3,0(r2)
   13510:	e0bff817 	ldw	r2,-32(fp)
   13514:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13518:	e0bff717 	ldw	r2,-36(fp)
   1351c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   13520:	0005883a 	mov	r2,zero
   13524:	00000306 	br	13534 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   13528:	00bffa84 	movi	r2,-22
   1352c:	00000106 	br	13534 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   13530:	00bfde84 	movi	r2,-134
  }
}
   13534:	e037883a 	mov	sp,fp
   13538:	df000017 	ldw	fp,0(sp)
   1353c:	dec00104 	addi	sp,sp,4
   13540:	f800283a 	ret

00013544 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   13544:	defffa04 	addi	sp,sp,-24
   13548:	dfc00515 	stw	ra,20(sp)
   1354c:	df000415 	stw	fp,16(sp)
   13550:	df000404 	addi	fp,sp,16
   13554:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   13558:	00800244 	movi	r2,9
   1355c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   13560:	014003f4 	movhi	r5,15
   13564:	29509004 	addi	r5,r5,16960
   13568:	e13ffd17 	ldw	r4,-12(fp)
   1356c:	00030d40 	call	30d4 <__mulsi3>
   13570:	100b883a 	mov	r5,r2
   13574:	01017db4 	movhi	r4,1526
   13578:	21384004 	addi	r4,r4,-7936
   1357c:	00030180 	call	3018 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   13580:	100b883a 	mov	r5,r2
   13584:	01200034 	movhi	r4,32768
   13588:	213fffc4 	addi	r4,r4,-1
   1358c:	00030180 	call	3018 <__udivsi3>
   13590:	100b883a 	mov	r5,r2
   13594:	e13fff17 	ldw	r4,-4(fp)
   13598:	00030180 	call	3018 <__udivsi3>
   1359c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   135a0:	e0bffe17 	ldw	r2,-8(fp)
   135a4:	10002a26 	beq	r2,zero,13650 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   135a8:	e03ffc15 	stw	zero,-16(fp)
   135ac:	00001706 	br	1360c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   135b0:	00a00034 	movhi	r2,32768
   135b4:	10bfffc4 	addi	r2,r2,-1
   135b8:	10bfffc4 	addi	r2,r2,-1
   135bc:	103ffe1e 	bne	r2,zero,135b8 <__alt_data_end+0xfc0135b8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   135c0:	014003f4 	movhi	r5,15
   135c4:	29509004 	addi	r5,r5,16960
   135c8:	e13ffd17 	ldw	r4,-12(fp)
   135cc:	00030d40 	call	30d4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   135d0:	100b883a 	mov	r5,r2
   135d4:	01017db4 	movhi	r4,1526
   135d8:	21384004 	addi	r4,r4,-7936
   135dc:	00030180 	call	3018 <__udivsi3>
   135e0:	100b883a 	mov	r5,r2
   135e4:	01200034 	movhi	r4,32768
   135e8:	213fffc4 	addi	r4,r4,-1
   135ec:	00030180 	call	3018 <__udivsi3>
   135f0:	1007883a 	mov	r3,r2
   135f4:	e0bfff17 	ldw	r2,-4(fp)
   135f8:	10c5c83a 	sub	r2,r2,r3
   135fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   13600:	e0bffc17 	ldw	r2,-16(fp)
   13604:	10800044 	addi	r2,r2,1
   13608:	e0bffc15 	stw	r2,-16(fp)
   1360c:	e0fffc17 	ldw	r3,-16(fp)
   13610:	e0bffe17 	ldw	r2,-8(fp)
   13614:	18bfe616 	blt	r3,r2,135b0 <__alt_data_end+0xfc0135b0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13618:	014003f4 	movhi	r5,15
   1361c:	29509004 	addi	r5,r5,16960
   13620:	e13ffd17 	ldw	r4,-12(fp)
   13624:	00030d40 	call	30d4 <__mulsi3>
   13628:	100b883a 	mov	r5,r2
   1362c:	01017db4 	movhi	r4,1526
   13630:	21384004 	addi	r4,r4,-7936
   13634:	00030180 	call	3018 <__udivsi3>
   13638:	e17fff17 	ldw	r5,-4(fp)
   1363c:	1009883a 	mov	r4,r2
   13640:	00030d40 	call	30d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13644:	10bfffc4 	addi	r2,r2,-1
   13648:	103ffe1e 	bne	r2,zero,13644 <__alt_data_end+0xfc013644>
   1364c:	00000d06 	br	13684 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   13650:	014003f4 	movhi	r5,15
   13654:	29509004 	addi	r5,r5,16960
   13658:	e13ffd17 	ldw	r4,-12(fp)
   1365c:	00030d40 	call	30d4 <__mulsi3>
   13660:	100b883a 	mov	r5,r2
   13664:	01017db4 	movhi	r4,1526
   13668:	21384004 	addi	r4,r4,-7936
   1366c:	00030180 	call	3018 <__udivsi3>
   13670:	e17fff17 	ldw	r5,-4(fp)
   13674:	1009883a 	mov	r4,r2
   13678:	00030d40 	call	30d4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1367c:	10bfffc4 	addi	r2,r2,-1
   13680:	00bffe16 	blt	zero,r2,1367c <__alt_data_end+0xfc01367c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   13684:	0005883a 	mov	r2,zero
}
   13688:	e037883a 	mov	sp,fp
   1368c:	dfc00117 	ldw	ra,4(sp)
   13690:	df000017 	ldw	fp,0(sp)
   13694:	dec00204 	addi	sp,sp,8
   13698:	f800283a 	ret

0001369c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1369c:	deffff04 	addi	sp,sp,-4
   136a0:	df000015 	stw	fp,0(sp)
   136a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   136a8:	0001883a 	nop
   136ac:	e037883a 	mov	sp,fp
   136b0:	df000017 	ldw	fp,0(sp)
   136b4:	dec00104 	addi	sp,sp,4
   136b8:	f800283a 	ret

000136bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   136bc:	defffe04 	addi	sp,sp,-8
   136c0:	dfc00115 	stw	ra,4(sp)
   136c4:	df000015 	stw	fp,0(sp)
   136c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   136cc:	d0a00f17 	ldw	r2,-32708(gp)
   136d0:	10000326 	beq	r2,zero,136e0 <alt_get_errno+0x24>
   136d4:	d0a00f17 	ldw	r2,-32708(gp)
   136d8:	103ee83a 	callr	r2
   136dc:	00000106 	br	136e4 <alt_get_errno+0x28>
   136e0:	d0a6fd04 	addi	r2,gp,-25612
}
   136e4:	e037883a 	mov	sp,fp
   136e8:	dfc00117 	ldw	ra,4(sp)
   136ec:	df000017 	ldw	fp,0(sp)
   136f0:	dec00204 	addi	sp,sp,8
   136f4:	f800283a 	ret

000136f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   136f8:	defffa04 	addi	sp,sp,-24
   136fc:	dfc00515 	stw	ra,20(sp)
   13700:	df000415 	stw	fp,16(sp)
   13704:	df000404 	addi	fp,sp,16
   13708:	e13ffe15 	stw	r4,-8(fp)
   1370c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13710:	e0bffe17 	ldw	r2,-8(fp)
   13714:	10000326 	beq	r2,zero,13724 <alt_dev_llist_insert+0x2c>
   13718:	e0bffe17 	ldw	r2,-8(fp)
   1371c:	10800217 	ldw	r2,8(r2)
   13720:	1000061e 	bne	r2,zero,1373c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13724:	00136bc0 	call	136bc <alt_get_errno>
   13728:	1007883a 	mov	r3,r2
   1372c:	00800584 	movi	r2,22
   13730:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13734:	00bffa84 	movi	r2,-22
   13738:	00001306 	br	13788 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1373c:	e0bffe17 	ldw	r2,-8(fp)
   13740:	e0ffff17 	ldw	r3,-4(fp)
   13744:	e0fffc15 	stw	r3,-16(fp)
   13748:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1374c:	e0bffd17 	ldw	r2,-12(fp)
   13750:	e0fffc17 	ldw	r3,-16(fp)
   13754:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13758:	e0bffc17 	ldw	r2,-16(fp)
   1375c:	10c00017 	ldw	r3,0(r2)
   13760:	e0bffd17 	ldw	r2,-12(fp)
   13764:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13768:	e0bffc17 	ldw	r2,-16(fp)
   1376c:	10800017 	ldw	r2,0(r2)
   13770:	e0fffd17 	ldw	r3,-12(fp)
   13774:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13778:	e0bffc17 	ldw	r2,-16(fp)
   1377c:	e0fffd17 	ldw	r3,-12(fp)
   13780:	10c00015 	stw	r3,0(r2)

  return 0;  
   13784:	0005883a 	mov	r2,zero
}
   13788:	e037883a 	mov	sp,fp
   1378c:	dfc00117 	ldw	ra,4(sp)
   13790:	df000017 	ldw	fp,0(sp)
   13794:	dec00204 	addi	sp,sp,8
   13798:	f800283a 	ret

0001379c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1379c:	defffd04 	addi	sp,sp,-12
   137a0:	dfc00215 	stw	ra,8(sp)
   137a4:	df000115 	stw	fp,4(sp)
   137a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   137ac:	00800074 	movhi	r2,1
   137b0:	10925f04 	addi	r2,r2,18812
   137b4:	e0bfff15 	stw	r2,-4(fp)
   137b8:	00000606 	br	137d4 <_do_ctors+0x38>
        (*ctor) (); 
   137bc:	e0bfff17 	ldw	r2,-4(fp)
   137c0:	10800017 	ldw	r2,0(r2)
   137c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   137c8:	e0bfff17 	ldw	r2,-4(fp)
   137cc:	10bfff04 	addi	r2,r2,-4
   137d0:	e0bfff15 	stw	r2,-4(fp)
   137d4:	e0ffff17 	ldw	r3,-4(fp)
   137d8:	00800074 	movhi	r2,1
   137dc:	10926004 	addi	r2,r2,18816
   137e0:	18bff62e 	bgeu	r3,r2,137bc <__alt_data_end+0xfc0137bc>
        (*ctor) (); 
}
   137e4:	0001883a 	nop
   137e8:	e037883a 	mov	sp,fp
   137ec:	dfc00117 	ldw	ra,4(sp)
   137f0:	df000017 	ldw	fp,0(sp)
   137f4:	dec00204 	addi	sp,sp,8
   137f8:	f800283a 	ret

000137fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   137fc:	defffd04 	addi	sp,sp,-12
   13800:	dfc00215 	stw	ra,8(sp)
   13804:	df000115 	stw	fp,4(sp)
   13808:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1380c:	00800074 	movhi	r2,1
   13810:	10925f04 	addi	r2,r2,18812
   13814:	e0bfff15 	stw	r2,-4(fp)
   13818:	00000606 	br	13834 <_do_dtors+0x38>
        (*dtor) (); 
   1381c:	e0bfff17 	ldw	r2,-4(fp)
   13820:	10800017 	ldw	r2,0(r2)
   13824:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13828:	e0bfff17 	ldw	r2,-4(fp)
   1382c:	10bfff04 	addi	r2,r2,-4
   13830:	e0bfff15 	stw	r2,-4(fp)
   13834:	e0ffff17 	ldw	r3,-4(fp)
   13838:	00800074 	movhi	r2,1
   1383c:	10926004 	addi	r2,r2,18816
   13840:	18bff62e 	bgeu	r3,r2,1381c <__alt_data_end+0xfc01381c>
        (*dtor) (); 
}
   13844:	0001883a 	nop
   13848:	e037883a 	mov	sp,fp
   1384c:	dfc00117 	ldw	ra,4(sp)
   13850:	df000017 	ldw	fp,0(sp)
   13854:	dec00204 	addi	sp,sp,8
   13858:	f800283a 	ret

0001385c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1385c:	defffa04 	addi	sp,sp,-24
   13860:	dfc00515 	stw	ra,20(sp)
   13864:	df000415 	stw	fp,16(sp)
   13868:	df000404 	addi	fp,sp,16
   1386c:	e13ffe15 	stw	r4,-8(fp)
   13870:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13874:	e0bfff17 	ldw	r2,-4(fp)
   13878:	10800017 	ldw	r2,0(r2)
   1387c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13880:	e13ffe17 	ldw	r4,-8(fp)
   13884:	000323c0 	call	323c <strlen>
   13888:	10800044 	addi	r2,r2,1
   1388c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13890:	00000d06 	br	138c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13894:	e0bffc17 	ldw	r2,-16(fp)
   13898:	10800217 	ldw	r2,8(r2)
   1389c:	e0fffd17 	ldw	r3,-12(fp)
   138a0:	180d883a 	mov	r6,r3
   138a4:	e17ffe17 	ldw	r5,-8(fp)
   138a8:	1009883a 	mov	r4,r2
   138ac:	00144d00 	call	144d0 <memcmp>
   138b0:	1000021e 	bne	r2,zero,138bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   138b4:	e0bffc17 	ldw	r2,-16(fp)
   138b8:	00000706 	br	138d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   138bc:	e0bffc17 	ldw	r2,-16(fp)
   138c0:	10800017 	ldw	r2,0(r2)
   138c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   138c8:	e0fffc17 	ldw	r3,-16(fp)
   138cc:	e0bfff17 	ldw	r2,-4(fp)
   138d0:	18bff01e 	bne	r3,r2,13894 <__alt_data_end+0xfc013894>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   138d4:	0005883a 	mov	r2,zero
}
   138d8:	e037883a 	mov	sp,fp
   138dc:	dfc00117 	ldw	ra,4(sp)
   138e0:	df000017 	ldw	fp,0(sp)
   138e4:	dec00204 	addi	sp,sp,8
   138e8:	f800283a 	ret

000138ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   138ec:	deffff04 	addi	sp,sp,-4
   138f0:	df000015 	stw	fp,0(sp)
   138f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   138f8:	0001883a 	nop
   138fc:	e037883a 	mov	sp,fp
   13900:	df000017 	ldw	fp,0(sp)
   13904:	dec00104 	addi	sp,sp,4
   13908:	f800283a 	ret

0001390c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1390c:	defff904 	addi	sp,sp,-28
   13910:	dfc00615 	stw	ra,24(sp)
   13914:	df000515 	stw	fp,20(sp)
   13918:	df000504 	addi	fp,sp,20
   1391c:	e13ffc15 	stw	r4,-16(fp)
   13920:	e17ffd15 	stw	r5,-12(fp)
   13924:	e1bffe15 	stw	r6,-8(fp)
   13928:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1392c:	e0800217 	ldw	r2,8(fp)
   13930:	d8800015 	stw	r2,0(sp)
   13934:	e1ffff17 	ldw	r7,-4(fp)
   13938:	e1bffe17 	ldw	r6,-8(fp)
   1393c:	e17ffd17 	ldw	r5,-12(fp)
   13940:	e13ffc17 	ldw	r4,-16(fp)
   13944:	0013abc0 	call	13abc <alt_iic_isr_register>
}  
   13948:	e037883a 	mov	sp,fp
   1394c:	dfc00117 	ldw	ra,4(sp)
   13950:	df000017 	ldw	fp,0(sp)
   13954:	dec00204 	addi	sp,sp,8
   13958:	f800283a 	ret

0001395c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1395c:	defff904 	addi	sp,sp,-28
   13960:	df000615 	stw	fp,24(sp)
   13964:	df000604 	addi	fp,sp,24
   13968:	e13ffe15 	stw	r4,-8(fp)
   1396c:	e17fff15 	stw	r5,-4(fp)
   13970:	e0bfff17 	ldw	r2,-4(fp)
   13974:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13978:	0005303a 	rdctl	r2,status
   1397c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13980:	e0fffb17 	ldw	r3,-20(fp)
   13984:	00bfff84 	movi	r2,-2
   13988:	1884703a 	and	r2,r3,r2
   1398c:	1001703a 	wrctl	status,r2
  
  return context;
   13990:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13994:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   13998:	00c00044 	movi	r3,1
   1399c:	e0bffa17 	ldw	r2,-24(fp)
   139a0:	1884983a 	sll	r2,r3,r2
   139a4:	1007883a 	mov	r3,r2
   139a8:	d0a70317 	ldw	r2,-25588(gp)
   139ac:	1884b03a 	or	r2,r3,r2
   139b0:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   139b4:	d0a70317 	ldw	r2,-25588(gp)
   139b8:	100170fa 	wrctl	ienable,r2
   139bc:	e0bffc17 	ldw	r2,-16(fp)
   139c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139c4:	e0bffd17 	ldw	r2,-12(fp)
   139c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   139cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   139d0:	0001883a 	nop
}
   139d4:	e037883a 	mov	sp,fp
   139d8:	df000017 	ldw	fp,0(sp)
   139dc:	dec00104 	addi	sp,sp,4
   139e0:	f800283a 	ret

000139e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   139e4:	defff904 	addi	sp,sp,-28
   139e8:	df000615 	stw	fp,24(sp)
   139ec:	df000604 	addi	fp,sp,24
   139f0:	e13ffe15 	stw	r4,-8(fp)
   139f4:	e17fff15 	stw	r5,-4(fp)
   139f8:	e0bfff17 	ldw	r2,-4(fp)
   139fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a00:	0005303a 	rdctl	r2,status
   13a04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a08:	e0fffb17 	ldw	r3,-20(fp)
   13a0c:	00bfff84 	movi	r2,-2
   13a10:	1884703a 	and	r2,r3,r2
   13a14:	1001703a 	wrctl	status,r2
  
  return context;
   13a18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13a1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13a20:	00c00044 	movi	r3,1
   13a24:	e0bffa17 	ldw	r2,-24(fp)
   13a28:	1884983a 	sll	r2,r3,r2
   13a2c:	0084303a 	nor	r2,zero,r2
   13a30:	1007883a 	mov	r3,r2
   13a34:	d0a70317 	ldw	r2,-25588(gp)
   13a38:	1884703a 	and	r2,r3,r2
   13a3c:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13a40:	d0a70317 	ldw	r2,-25588(gp)
   13a44:	100170fa 	wrctl	ienable,r2
   13a48:	e0bffc17 	ldw	r2,-16(fp)
   13a4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a50:	e0bffd17 	ldw	r2,-12(fp)
   13a54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13a58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   13a5c:	0001883a 	nop
}
   13a60:	e037883a 	mov	sp,fp
   13a64:	df000017 	ldw	fp,0(sp)
   13a68:	dec00104 	addi	sp,sp,4
   13a6c:	f800283a 	ret

00013a70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13a70:	defffc04 	addi	sp,sp,-16
   13a74:	df000315 	stw	fp,12(sp)
   13a78:	df000304 	addi	fp,sp,12
   13a7c:	e13ffe15 	stw	r4,-8(fp)
   13a80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13a84:	000530fa 	rdctl	r2,ienable
   13a88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13a8c:	00c00044 	movi	r3,1
   13a90:	e0bfff17 	ldw	r2,-4(fp)
   13a94:	1884983a 	sll	r2,r3,r2
   13a98:	1007883a 	mov	r3,r2
   13a9c:	e0bffd17 	ldw	r2,-12(fp)
   13aa0:	1884703a 	and	r2,r3,r2
   13aa4:	1004c03a 	cmpne	r2,r2,zero
   13aa8:	10803fcc 	andi	r2,r2,255
}
   13aac:	e037883a 	mov	sp,fp
   13ab0:	df000017 	ldw	fp,0(sp)
   13ab4:	dec00104 	addi	sp,sp,4
   13ab8:	f800283a 	ret

00013abc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13abc:	defff504 	addi	sp,sp,-44
   13ac0:	dfc00a15 	stw	ra,40(sp)
   13ac4:	df000915 	stw	fp,36(sp)
   13ac8:	df000904 	addi	fp,sp,36
   13acc:	e13ffc15 	stw	r4,-16(fp)
   13ad0:	e17ffd15 	stw	r5,-12(fp)
   13ad4:	e1bffe15 	stw	r6,-8(fp)
   13ad8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13adc:	00bffa84 	movi	r2,-22
   13ae0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13ae4:	e0bffd17 	ldw	r2,-12(fp)
   13ae8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13aec:	e0bff817 	ldw	r2,-32(fp)
   13af0:	10800808 	cmpgei	r2,r2,32
   13af4:	1000271e 	bne	r2,zero,13b94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13af8:	0005303a 	rdctl	r2,status
   13afc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b00:	e0fffb17 	ldw	r3,-20(fp)
   13b04:	00bfff84 	movi	r2,-2
   13b08:	1884703a 	and	r2,r3,r2
   13b0c:	1001703a 	wrctl	status,r2
  
  return context;
   13b10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13b14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   13b18:	008000b4 	movhi	r2,2
   13b1c:	10a22e04 	addi	r2,r2,-30536
   13b20:	e0fff817 	ldw	r3,-32(fp)
   13b24:	180690fa 	slli	r3,r3,3
   13b28:	10c5883a 	add	r2,r2,r3
   13b2c:	e0fffe17 	ldw	r3,-8(fp)
   13b30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   13b34:	008000b4 	movhi	r2,2
   13b38:	10a22e04 	addi	r2,r2,-30536
   13b3c:	e0fff817 	ldw	r3,-32(fp)
   13b40:	180690fa 	slli	r3,r3,3
   13b44:	10c5883a 	add	r2,r2,r3
   13b48:	10800104 	addi	r2,r2,4
   13b4c:	e0ffff17 	ldw	r3,-4(fp)
   13b50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13b54:	e0bffe17 	ldw	r2,-8(fp)
   13b58:	10000526 	beq	r2,zero,13b70 <alt_iic_isr_register+0xb4>
   13b5c:	e0bff817 	ldw	r2,-32(fp)
   13b60:	100b883a 	mov	r5,r2
   13b64:	e13ffc17 	ldw	r4,-16(fp)
   13b68:	001395c0 	call	1395c <alt_ic_irq_enable>
   13b6c:	00000406 	br	13b80 <alt_iic_isr_register+0xc4>
   13b70:	e0bff817 	ldw	r2,-32(fp)
   13b74:	100b883a 	mov	r5,r2
   13b78:	e13ffc17 	ldw	r4,-16(fp)
   13b7c:	00139e40 	call	139e4 <alt_ic_irq_disable>
   13b80:	e0bff715 	stw	r2,-36(fp)
   13b84:	e0bffa17 	ldw	r2,-24(fp)
   13b88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b8c:	e0bff917 	ldw	r2,-28(fp)
   13b90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13b94:	e0bff717 	ldw	r2,-36(fp)
}
   13b98:	e037883a 	mov	sp,fp
   13b9c:	dfc00117 	ldw	ra,4(sp)
   13ba0:	df000017 	ldw	fp,0(sp)
   13ba4:	dec00204 	addi	sp,sp,8
   13ba8:	f800283a 	ret

00013bac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13bac:	defff804 	addi	sp,sp,-32
   13bb0:	dfc00715 	stw	ra,28(sp)
   13bb4:	df000615 	stw	fp,24(sp)
   13bb8:	dc000515 	stw	r16,20(sp)
   13bbc:	df000604 	addi	fp,sp,24
   13bc0:	e13ffb15 	stw	r4,-20(fp)
   13bc4:	e17ffc15 	stw	r5,-16(fp)
   13bc8:	e1bffd15 	stw	r6,-12(fp)
   13bcc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   13bd0:	e1bffe17 	ldw	r6,-8(fp)
   13bd4:	e17ffd17 	ldw	r5,-12(fp)
   13bd8:	e13ffc17 	ldw	r4,-16(fp)
   13bdc:	0013e340 	call	13e34 <open>
   13be0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   13be4:	e0bffa17 	ldw	r2,-24(fp)
   13be8:	10002216 	blt	r2,zero,13c74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   13bec:	04000074 	movhi	r16,1
   13bf0:	84163d04 	addi	r16,r16,22772
   13bf4:	e0bffa17 	ldw	r2,-24(fp)
   13bf8:	01400304 	movi	r5,12
   13bfc:	1009883a 	mov	r4,r2
   13c00:	00030d40 	call	30d4 <__mulsi3>
   13c04:	8085883a 	add	r2,r16,r2
   13c08:	10c00017 	ldw	r3,0(r2)
   13c0c:	e0bffb17 	ldw	r2,-20(fp)
   13c10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13c14:	04000074 	movhi	r16,1
   13c18:	84163d04 	addi	r16,r16,22772
   13c1c:	e0bffa17 	ldw	r2,-24(fp)
   13c20:	01400304 	movi	r5,12
   13c24:	1009883a 	mov	r4,r2
   13c28:	00030d40 	call	30d4 <__mulsi3>
   13c2c:	8085883a 	add	r2,r16,r2
   13c30:	10800104 	addi	r2,r2,4
   13c34:	10c00017 	ldw	r3,0(r2)
   13c38:	e0bffb17 	ldw	r2,-20(fp)
   13c3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13c40:	04000074 	movhi	r16,1
   13c44:	84163d04 	addi	r16,r16,22772
   13c48:	e0bffa17 	ldw	r2,-24(fp)
   13c4c:	01400304 	movi	r5,12
   13c50:	1009883a 	mov	r4,r2
   13c54:	00030d40 	call	30d4 <__mulsi3>
   13c58:	8085883a 	add	r2,r16,r2
   13c5c:	10800204 	addi	r2,r2,8
   13c60:	10c00017 	ldw	r3,0(r2)
   13c64:	e0bffb17 	ldw	r2,-20(fp)
   13c68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13c6c:	e13ffa17 	ldw	r4,-24(fp)
   13c70:	00105840 	call	10584 <alt_release_fd>
  }
} 
   13c74:	0001883a 	nop
   13c78:	e6ffff04 	addi	sp,fp,-4
   13c7c:	dfc00217 	ldw	ra,8(sp)
   13c80:	df000117 	ldw	fp,4(sp)
   13c84:	dc000017 	ldw	r16,0(sp)
   13c88:	dec00304 	addi	sp,sp,12
   13c8c:	f800283a 	ret

00013c90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13c90:	defffb04 	addi	sp,sp,-20
   13c94:	dfc00415 	stw	ra,16(sp)
   13c98:	df000315 	stw	fp,12(sp)
   13c9c:	df000304 	addi	fp,sp,12
   13ca0:	e13ffd15 	stw	r4,-12(fp)
   13ca4:	e17ffe15 	stw	r5,-8(fp)
   13ca8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13cac:	01c07fc4 	movi	r7,511
   13cb0:	01800044 	movi	r6,1
   13cb4:	e17ffd17 	ldw	r5,-12(fp)
   13cb8:	01000074 	movhi	r4,1
   13cbc:	21164004 	addi	r4,r4,22784
   13cc0:	0013bac0 	call	13bac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13cc4:	01c07fc4 	movi	r7,511
   13cc8:	000d883a 	mov	r6,zero
   13ccc:	e17ffe17 	ldw	r5,-8(fp)
   13cd0:	01000074 	movhi	r4,1
   13cd4:	21163d04 	addi	r4,r4,22772
   13cd8:	0013bac0 	call	13bac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13cdc:	01c07fc4 	movi	r7,511
   13ce0:	01800044 	movi	r6,1
   13ce4:	e17fff17 	ldw	r5,-4(fp)
   13ce8:	01000074 	movhi	r4,1
   13cec:	21164304 	addi	r4,r4,22796
   13cf0:	0013bac0 	call	13bac <alt_open_fd>
}  
   13cf4:	0001883a 	nop
   13cf8:	e037883a 	mov	sp,fp
   13cfc:	dfc00117 	ldw	ra,4(sp)
   13d00:	df000017 	ldw	fp,0(sp)
   13d04:	dec00204 	addi	sp,sp,8
   13d08:	f800283a 	ret

00013d0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d0c:	defffe04 	addi	sp,sp,-8
   13d10:	dfc00115 	stw	ra,4(sp)
   13d14:	df000015 	stw	fp,0(sp)
   13d18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13d1c:	d0a00f17 	ldw	r2,-32708(gp)
   13d20:	10000326 	beq	r2,zero,13d30 <alt_get_errno+0x24>
   13d24:	d0a00f17 	ldw	r2,-32708(gp)
   13d28:	103ee83a 	callr	r2
   13d2c:	00000106 	br	13d34 <alt_get_errno+0x28>
   13d30:	d0a6fd04 	addi	r2,gp,-25612
}
   13d34:	e037883a 	mov	sp,fp
   13d38:	dfc00117 	ldw	ra,4(sp)
   13d3c:	df000017 	ldw	fp,0(sp)
   13d40:	dec00204 	addi	sp,sp,8
   13d44:	f800283a 	ret

00013d48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13d48:	defffb04 	addi	sp,sp,-20
   13d4c:	dfc00415 	stw	ra,16(sp)
   13d50:	df000315 	stw	fp,12(sp)
   13d54:	dc000215 	stw	r16,8(sp)
   13d58:	df000304 	addi	fp,sp,12
   13d5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13d60:	e0bffe17 	ldw	r2,-8(fp)
   13d64:	10800217 	ldw	r2,8(r2)
   13d68:	10d00034 	orhi	r3,r2,16384
   13d6c:	e0bffe17 	ldw	r2,-8(fp)
   13d70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13d74:	e03ffd15 	stw	zero,-12(fp)
   13d78:	00002306 	br	13e08 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13d7c:	04000074 	movhi	r16,1
   13d80:	84163d04 	addi	r16,r16,22772
   13d84:	e0bffd17 	ldw	r2,-12(fp)
   13d88:	01400304 	movi	r5,12
   13d8c:	1009883a 	mov	r4,r2
   13d90:	00030d40 	call	30d4 <__mulsi3>
   13d94:	8085883a 	add	r2,r16,r2
   13d98:	10c00017 	ldw	r3,0(r2)
   13d9c:	e0bffe17 	ldw	r2,-8(fp)
   13da0:	10800017 	ldw	r2,0(r2)
   13da4:	1880151e 	bne	r3,r2,13dfc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13da8:	04000074 	movhi	r16,1
   13dac:	84163d04 	addi	r16,r16,22772
   13db0:	e0bffd17 	ldw	r2,-12(fp)
   13db4:	01400304 	movi	r5,12
   13db8:	1009883a 	mov	r4,r2
   13dbc:	00030d40 	call	30d4 <__mulsi3>
   13dc0:	8085883a 	add	r2,r16,r2
   13dc4:	10800204 	addi	r2,r2,8
   13dc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13dcc:	10000b0e 	bge	r2,zero,13dfc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13dd0:	01400304 	movi	r5,12
   13dd4:	e13ffd17 	ldw	r4,-12(fp)
   13dd8:	00030d40 	call	30d4 <__mulsi3>
   13ddc:	1007883a 	mov	r3,r2
   13de0:	00800074 	movhi	r2,1
   13de4:	10963d04 	addi	r2,r2,22772
   13de8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13dec:	e0bffe17 	ldw	r2,-8(fp)
   13df0:	18800226 	beq	r3,r2,13dfc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13df4:	00bffcc4 	movi	r2,-13
   13df8:	00000806 	br	13e1c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13dfc:	e0bffd17 	ldw	r2,-12(fp)
   13e00:	10800044 	addi	r2,r2,1
   13e04:	e0bffd15 	stw	r2,-12(fp)
   13e08:	d0a00e17 	ldw	r2,-32712(gp)
   13e0c:	1007883a 	mov	r3,r2
   13e10:	e0bffd17 	ldw	r2,-12(fp)
   13e14:	18bfd92e 	bgeu	r3,r2,13d7c <__alt_data_end+0xfc013d7c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13e18:	0005883a 	mov	r2,zero
}
   13e1c:	e6ffff04 	addi	sp,fp,-4
   13e20:	dfc00217 	ldw	ra,8(sp)
   13e24:	df000117 	ldw	fp,4(sp)
   13e28:	dc000017 	ldw	r16,0(sp)
   13e2c:	dec00304 	addi	sp,sp,12
   13e30:	f800283a 	ret

00013e34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13e34:	defff604 	addi	sp,sp,-40
   13e38:	dfc00915 	stw	ra,36(sp)
   13e3c:	df000815 	stw	fp,32(sp)
   13e40:	df000804 	addi	fp,sp,32
   13e44:	e13ffd15 	stw	r4,-12(fp)
   13e48:	e17ffe15 	stw	r5,-8(fp)
   13e4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13e50:	00bfffc4 	movi	r2,-1
   13e54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13e58:	00bffb44 	movi	r2,-19
   13e5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13e60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13e64:	d1600c04 	addi	r5,gp,-32720
   13e68:	e13ffd17 	ldw	r4,-12(fp)
   13e6c:	001385c0 	call	1385c <alt_find_dev>
   13e70:	e0bff815 	stw	r2,-32(fp)
   13e74:	e0bff817 	ldw	r2,-32(fp)
   13e78:	1000051e 	bne	r2,zero,13e90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13e7c:	e13ffd17 	ldw	r4,-12(fp)
   13e80:	001421c0 	call	1421c <alt_find_file>
   13e84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13e88:	00800044 	movi	r2,1
   13e8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13e90:	e0bff817 	ldw	r2,-32(fp)
   13e94:	10002b26 	beq	r2,zero,13f44 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13e98:	e13ff817 	ldw	r4,-32(fp)
   13e9c:	00143240 	call	14324 <alt_get_fd>
   13ea0:	e0bff915 	stw	r2,-28(fp)
   13ea4:	e0bff917 	ldw	r2,-28(fp)
   13ea8:	1000030e 	bge	r2,zero,13eb8 <open+0x84>
    {
      status = index;
   13eac:	e0bff917 	ldw	r2,-28(fp)
   13eb0:	e0bffa15 	stw	r2,-24(fp)
   13eb4:	00002506 	br	13f4c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   13eb8:	01400304 	movi	r5,12
   13ebc:	e13ff917 	ldw	r4,-28(fp)
   13ec0:	00030d40 	call	30d4 <__mulsi3>
   13ec4:	1007883a 	mov	r3,r2
   13ec8:	00800074 	movhi	r2,1
   13ecc:	10963d04 	addi	r2,r2,22772
   13ed0:	1885883a 	add	r2,r3,r2
   13ed4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13ed8:	e0fffe17 	ldw	r3,-8(fp)
   13edc:	00900034 	movhi	r2,16384
   13ee0:	10bfffc4 	addi	r2,r2,-1
   13ee4:	1886703a 	and	r3,r3,r2
   13ee8:	e0bffc17 	ldw	r2,-16(fp)
   13eec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13ef0:	e0bffb17 	ldw	r2,-20(fp)
   13ef4:	1000051e 	bne	r2,zero,13f0c <open+0xd8>
   13ef8:	e13ffc17 	ldw	r4,-16(fp)
   13efc:	0013d480 	call	13d48 <alt_file_locked>
   13f00:	e0bffa15 	stw	r2,-24(fp)
   13f04:	e0bffa17 	ldw	r2,-24(fp)
   13f08:	10001016 	blt	r2,zero,13f4c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13f0c:	e0bff817 	ldw	r2,-32(fp)
   13f10:	10800317 	ldw	r2,12(r2)
   13f14:	10000826 	beq	r2,zero,13f38 <open+0x104>
   13f18:	e0bff817 	ldw	r2,-32(fp)
   13f1c:	10800317 	ldw	r2,12(r2)
   13f20:	e1ffff17 	ldw	r7,-4(fp)
   13f24:	e1bffe17 	ldw	r6,-8(fp)
   13f28:	e17ffd17 	ldw	r5,-12(fp)
   13f2c:	e13ffc17 	ldw	r4,-16(fp)
   13f30:	103ee83a 	callr	r2
   13f34:	00000106 	br	13f3c <open+0x108>
   13f38:	0005883a 	mov	r2,zero
   13f3c:	e0bffa15 	stw	r2,-24(fp)
   13f40:	00000206 	br	13f4c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13f44:	00bffb44 	movi	r2,-19
   13f48:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13f4c:	e0bffa17 	ldw	r2,-24(fp)
   13f50:	1000090e 	bge	r2,zero,13f78 <open+0x144>
  {
    alt_release_fd (index);  
   13f54:	e13ff917 	ldw	r4,-28(fp)
   13f58:	00105840 	call	10584 <alt_release_fd>
    ALT_ERRNO = -status;
   13f5c:	0013d0c0 	call	13d0c <alt_get_errno>
   13f60:	1007883a 	mov	r3,r2
   13f64:	e0bffa17 	ldw	r2,-24(fp)
   13f68:	0085c83a 	sub	r2,zero,r2
   13f6c:	18800015 	stw	r2,0(r3)
    return -1;
   13f70:	00bfffc4 	movi	r2,-1
   13f74:	00000106 	br	13f7c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   13f78:	e0bff917 	ldw	r2,-28(fp)
}
   13f7c:	e037883a 	mov	sp,fp
   13f80:	dfc00117 	ldw	ra,4(sp)
   13f84:	df000017 	ldw	fp,0(sp)
   13f88:	dec00204 	addi	sp,sp,8
   13f8c:	f800283a 	ret

00013f90 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   13f90:	defff204 	addi	sp,sp,-56
   13f94:	dfc00a15 	stw	ra,40(sp)
   13f98:	df000915 	stw	fp,36(sp)
   13f9c:	df000904 	addi	fp,sp,36
   13fa0:	e13fff15 	stw	r4,-4(fp)
   13fa4:	e1400215 	stw	r5,8(fp)
   13fa8:	e1800315 	stw	r6,12(fp)
   13fac:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   13fb0:	e0800204 	addi	r2,fp,8
   13fb4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   13fb8:	e0bfff17 	ldw	r2,-4(fp)
   13fbc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   13fc0:	00006f06 	br	14180 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   13fc4:	e0bff807 	ldb	r2,-32(fp)
   13fc8:	10800960 	cmpeqi	r2,r2,37
   13fcc:	1000041e 	bne	r2,zero,13fe0 <alt_printf+0x50>
        {
            alt_putchar(c);
   13fd0:	e0bff807 	ldb	r2,-32(fp)
   13fd4:	1009883a 	mov	r4,r2
   13fd8:	00141bc0 	call	141bc <alt_putchar>
   13fdc:	00006806 	br	14180 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   13fe0:	e0bff717 	ldw	r2,-36(fp)
   13fe4:	10c00044 	addi	r3,r2,1
   13fe8:	e0fff715 	stw	r3,-36(fp)
   13fec:	10800003 	ldbu	r2,0(r2)
   13ff0:	e0bff805 	stb	r2,-32(fp)
   13ff4:	e0bff807 	ldb	r2,-32(fp)
   13ff8:	10006926 	beq	r2,zero,141a0 <alt_printf+0x210>
            {
                if (c == '%')
   13ffc:	e0bff807 	ldb	r2,-32(fp)
   14000:	10800958 	cmpnei	r2,r2,37
   14004:	1000041e 	bne	r2,zero,14018 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   14008:	e0bff807 	ldb	r2,-32(fp)
   1400c:	1009883a 	mov	r4,r2
   14010:	00141bc0 	call	141bc <alt_putchar>
   14014:	00005a06 	br	14180 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   14018:	e0bff807 	ldb	r2,-32(fp)
   1401c:	108018d8 	cmpnei	r2,r2,99
   14020:	1000081e 	bne	r2,zero,14044 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   14024:	e0bffe17 	ldw	r2,-8(fp)
   14028:	10c00104 	addi	r3,r2,4
   1402c:	e0fffe15 	stw	r3,-8(fp)
   14030:	10800017 	ldw	r2,0(r2)
   14034:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   14038:	e13ffd17 	ldw	r4,-12(fp)
   1403c:	00141bc0 	call	141bc <alt_putchar>
   14040:	00004f06 	br	14180 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   14044:	e0bff807 	ldb	r2,-32(fp)
   14048:	10801e18 	cmpnei	r2,r2,120
   1404c:	1000341e 	bne	r2,zero,14120 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   14050:	e0bffe17 	ldw	r2,-8(fp)
   14054:	10c00104 	addi	r3,r2,4
   14058:	e0fffe15 	stw	r3,-8(fp)
   1405c:	10800017 	ldw	r2,0(r2)
   14060:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   14064:	e0bffb17 	ldw	r2,-20(fp)
   14068:	1000031e 	bne	r2,zero,14078 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   1406c:	01000c04 	movi	r4,48
   14070:	00141bc0 	call	141bc <alt_putchar>
                        continue;
   14074:	00004206 	br	14180 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   14078:	00800704 	movi	r2,28
   1407c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   14080:	00000306 	br	14090 <alt_printf+0x100>
                        digit_shift -= 4;
   14084:	e0bff917 	ldw	r2,-28(fp)
   14088:	10bfff04 	addi	r2,r2,-4
   1408c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   14090:	00c003c4 	movi	r3,15
   14094:	e0bff917 	ldw	r2,-28(fp)
   14098:	1884983a 	sll	r2,r3,r2
   1409c:	1007883a 	mov	r3,r2
   140a0:	e0bffb17 	ldw	r2,-20(fp)
   140a4:	1884703a 	and	r2,r3,r2
   140a8:	103ff626 	beq	r2,zero,14084 <__alt_data_end+0xfc014084>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   140ac:	00001906 	br	14114 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   140b0:	00c003c4 	movi	r3,15
   140b4:	e0bff917 	ldw	r2,-28(fp)
   140b8:	1884983a 	sll	r2,r3,r2
   140bc:	1007883a 	mov	r3,r2
   140c0:	e0bffb17 	ldw	r2,-20(fp)
   140c4:	1886703a 	and	r3,r3,r2
   140c8:	e0bff917 	ldw	r2,-28(fp)
   140cc:	1884d83a 	srl	r2,r3,r2
   140d0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   140d4:	e0bffc17 	ldw	r2,-16(fp)
   140d8:	108002a8 	cmpgeui	r2,r2,10
   140dc:	1000041e 	bne	r2,zero,140f0 <alt_printf+0x160>
                            c = '0' + digit;
   140e0:	e0bffc17 	ldw	r2,-16(fp)
   140e4:	10800c04 	addi	r2,r2,48
   140e8:	e0bff805 	stb	r2,-32(fp)
   140ec:	00000306 	br	140fc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   140f0:	e0bffc17 	ldw	r2,-16(fp)
   140f4:	108015c4 	addi	r2,r2,87
   140f8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   140fc:	e0bff807 	ldb	r2,-32(fp)
   14100:	1009883a 	mov	r4,r2
   14104:	00141bc0 	call	141bc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   14108:	e0bff917 	ldw	r2,-28(fp)
   1410c:	10bfff04 	addi	r2,r2,-4
   14110:	e0bff915 	stw	r2,-28(fp)
   14114:	e0bff917 	ldw	r2,-28(fp)
   14118:	103fe50e 	bge	r2,zero,140b0 <__alt_data_end+0xfc0140b0>
   1411c:	00001806 	br	14180 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   14120:	e0bff807 	ldb	r2,-32(fp)
   14124:	10801cd8 	cmpnei	r2,r2,115
   14128:	1000151e 	bne	r2,zero,14180 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1412c:	e0bffe17 	ldw	r2,-8(fp)
   14130:	10c00104 	addi	r3,r2,4
   14134:	e0fffe15 	stw	r3,-8(fp)
   14138:	10800017 	ldw	r2,0(r2)
   1413c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   14140:	00000906 	br	14168 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   14144:	e0bffa17 	ldw	r2,-24(fp)
   14148:	10c00044 	addi	r3,r2,1
   1414c:	e0fffa15 	stw	r3,-24(fp)
   14150:	10800003 	ldbu	r2,0(r2)
   14154:	10803fcc 	andi	r2,r2,255
   14158:	1080201c 	xori	r2,r2,128
   1415c:	10bfe004 	addi	r2,r2,-128
   14160:	1009883a 	mov	r4,r2
   14164:	00141bc0 	call	141bc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   14168:	e0bffa17 	ldw	r2,-24(fp)
   1416c:	10800003 	ldbu	r2,0(r2)
   14170:	10803fcc 	andi	r2,r2,255
   14174:	1080201c 	xori	r2,r2,128
   14178:	10bfe004 	addi	r2,r2,-128
   1417c:	103ff11e 	bne	r2,zero,14144 <__alt_data_end+0xfc014144>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   14180:	e0bff717 	ldw	r2,-36(fp)
   14184:	10c00044 	addi	r3,r2,1
   14188:	e0fff715 	stw	r3,-36(fp)
   1418c:	10800003 	ldbu	r2,0(r2)
   14190:	e0bff805 	stb	r2,-32(fp)
   14194:	e0bff807 	ldb	r2,-32(fp)
   14198:	103f8a1e 	bne	r2,zero,13fc4 <__alt_data_end+0xfc013fc4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1419c:	00000106 	br	141a4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   141a0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   141a4:	0001883a 	nop
   141a8:	e037883a 	mov	sp,fp
   141ac:	dfc00117 	ldw	ra,4(sp)
   141b0:	df000017 	ldw	fp,0(sp)
   141b4:	dec00504 	addi	sp,sp,20
   141b8:	f800283a 	ret

000141bc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   141bc:	defffd04 	addi	sp,sp,-12
   141c0:	dfc00215 	stw	ra,8(sp)
   141c4:	df000115 	stw	fp,4(sp)
   141c8:	df000104 	addi	fp,sp,4
   141cc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   141d0:	d0a00517 	ldw	r2,-32748(gp)
   141d4:	10800217 	ldw	r2,8(r2)
   141d8:	100b883a 	mov	r5,r2
   141dc:	e13fff17 	ldw	r4,-4(fp)
   141e0:	00145ec0 	call	145ec <putc>
#endif
#endif
}
   141e4:	e037883a 	mov	sp,fp
   141e8:	dfc00117 	ldw	ra,4(sp)
   141ec:	df000017 	ldw	fp,0(sp)
   141f0:	dec00204 	addi	sp,sp,8
   141f4:	f800283a 	ret

000141f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   141f8:	deffff04 	addi	sp,sp,-4
   141fc:	df000015 	stw	fp,0(sp)
   14200:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14204:	000170fa 	wrctl	ienable,zero
}
   14208:	0001883a 	nop
   1420c:	e037883a 	mov	sp,fp
   14210:	df000017 	ldw	fp,0(sp)
   14214:	dec00104 	addi	sp,sp,4
   14218:	f800283a 	ret

0001421c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1421c:	defffb04 	addi	sp,sp,-20
   14220:	dfc00415 	stw	ra,16(sp)
   14224:	df000315 	stw	fp,12(sp)
   14228:	df000304 	addi	fp,sp,12
   1422c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14230:	d0a00a17 	ldw	r2,-32728(gp)
   14234:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14238:	00003106 	br	14300 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1423c:	e0bffd17 	ldw	r2,-12(fp)
   14240:	10800217 	ldw	r2,8(r2)
   14244:	1009883a 	mov	r4,r2
   14248:	000323c0 	call	323c <strlen>
   1424c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14250:	e0bffd17 	ldw	r2,-12(fp)
   14254:	10c00217 	ldw	r3,8(r2)
   14258:	e0bffe17 	ldw	r2,-8(fp)
   1425c:	10bfffc4 	addi	r2,r2,-1
   14260:	1885883a 	add	r2,r3,r2
   14264:	10800003 	ldbu	r2,0(r2)
   14268:	10803fcc 	andi	r2,r2,255
   1426c:	1080201c 	xori	r2,r2,128
   14270:	10bfe004 	addi	r2,r2,-128
   14274:	10800bd8 	cmpnei	r2,r2,47
   14278:	1000031e 	bne	r2,zero,14288 <alt_find_file+0x6c>
    {
      len -= 1;
   1427c:	e0bffe17 	ldw	r2,-8(fp)
   14280:	10bfffc4 	addi	r2,r2,-1
   14284:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14288:	e0bffe17 	ldw	r2,-8(fp)
   1428c:	e0ffff17 	ldw	r3,-4(fp)
   14290:	1885883a 	add	r2,r3,r2
   14294:	10800003 	ldbu	r2,0(r2)
   14298:	10803fcc 	andi	r2,r2,255
   1429c:	1080201c 	xori	r2,r2,128
   142a0:	10bfe004 	addi	r2,r2,-128
   142a4:	10800be0 	cmpeqi	r2,r2,47
   142a8:	1000081e 	bne	r2,zero,142cc <alt_find_file+0xb0>
   142ac:	e0bffe17 	ldw	r2,-8(fp)
   142b0:	e0ffff17 	ldw	r3,-4(fp)
   142b4:	1885883a 	add	r2,r3,r2
   142b8:	10800003 	ldbu	r2,0(r2)
   142bc:	10803fcc 	andi	r2,r2,255
   142c0:	1080201c 	xori	r2,r2,128
   142c4:	10bfe004 	addi	r2,r2,-128
   142c8:	10000a1e 	bne	r2,zero,142f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   142cc:	e0bffd17 	ldw	r2,-12(fp)
   142d0:	10800217 	ldw	r2,8(r2)
   142d4:	e0fffe17 	ldw	r3,-8(fp)
   142d8:	180d883a 	mov	r6,r3
   142dc:	e17fff17 	ldw	r5,-4(fp)
   142e0:	1009883a 	mov	r4,r2
   142e4:	00144d00 	call	144d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   142e8:	1000021e 	bne	r2,zero,142f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   142ec:	e0bffd17 	ldw	r2,-12(fp)
   142f0:	00000706 	br	14310 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   142f4:	e0bffd17 	ldw	r2,-12(fp)
   142f8:	10800017 	ldw	r2,0(r2)
   142fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14300:	e0fffd17 	ldw	r3,-12(fp)
   14304:	d0a00a04 	addi	r2,gp,-32728
   14308:	18bfcc1e 	bne	r3,r2,1423c <__alt_data_end+0xfc01423c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1430c:	0005883a 	mov	r2,zero
}
   14310:	e037883a 	mov	sp,fp
   14314:	dfc00117 	ldw	ra,4(sp)
   14318:	df000017 	ldw	fp,0(sp)
   1431c:	dec00204 	addi	sp,sp,8
   14320:	f800283a 	ret

00014324 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   14324:	defffa04 	addi	sp,sp,-24
   14328:	dfc00515 	stw	ra,20(sp)
   1432c:	df000415 	stw	fp,16(sp)
   14330:	dc000315 	stw	r16,12(sp)
   14334:	df000404 	addi	fp,sp,16
   14338:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1433c:	00bffa04 	movi	r2,-24
   14340:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14344:	e03ffc15 	stw	zero,-16(fp)
   14348:	00001d06 	br	143c0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1434c:	04000074 	movhi	r16,1
   14350:	84163d04 	addi	r16,r16,22772
   14354:	e0bffc17 	ldw	r2,-16(fp)
   14358:	01400304 	movi	r5,12
   1435c:	1009883a 	mov	r4,r2
   14360:	00030d40 	call	30d4 <__mulsi3>
   14364:	8085883a 	add	r2,r16,r2
   14368:	10800017 	ldw	r2,0(r2)
   1436c:	1000111e 	bne	r2,zero,143b4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   14370:	04000074 	movhi	r16,1
   14374:	84163d04 	addi	r16,r16,22772
   14378:	e0bffc17 	ldw	r2,-16(fp)
   1437c:	01400304 	movi	r5,12
   14380:	1009883a 	mov	r4,r2
   14384:	00030d40 	call	30d4 <__mulsi3>
   14388:	8085883a 	add	r2,r16,r2
   1438c:	e0fffe17 	ldw	r3,-8(fp)
   14390:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   14394:	d0e00e17 	ldw	r3,-32712(gp)
   14398:	e0bffc17 	ldw	r2,-16(fp)
   1439c:	1880020e 	bge	r3,r2,143a8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   143a0:	e0bffc17 	ldw	r2,-16(fp)
   143a4:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   143a8:	e0bffc17 	ldw	r2,-16(fp)
   143ac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   143b0:	00000606 	br	143cc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   143b4:	e0bffc17 	ldw	r2,-16(fp)
   143b8:	10800044 	addi	r2,r2,1
   143bc:	e0bffc15 	stw	r2,-16(fp)
   143c0:	e0bffc17 	ldw	r2,-16(fp)
   143c4:	10800810 	cmplti	r2,r2,32
   143c8:	103fe01e 	bne	r2,zero,1434c <__alt_data_end+0xfc01434c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   143cc:	e0bffd17 	ldw	r2,-12(fp)
}
   143d0:	e6ffff04 	addi	sp,fp,-4
   143d4:	dfc00217 	ldw	ra,8(sp)
   143d8:	df000117 	ldw	fp,4(sp)
   143dc:	dc000017 	ldw	r16,0(sp)
   143e0:	dec00304 	addi	sp,sp,12
   143e4:	f800283a 	ret

000143e8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   143e8:	defffe04 	addi	sp,sp,-8
   143ec:	df000115 	stw	fp,4(sp)
   143f0:	df000104 	addi	fp,sp,4
   143f4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   143f8:	e0bfff17 	ldw	r2,-4(fp)
   143fc:	10bffe84 	addi	r2,r2,-6
   14400:	10c00428 	cmpgeui	r3,r2,16
   14404:	18001a1e 	bne	r3,zero,14470 <alt_exception_cause_generated_bad_addr+0x88>
   14408:	100690ba 	slli	r3,r2,2
   1440c:	00800074 	movhi	r2,1
   14410:	10910804 	addi	r2,r2,17440
   14414:	1885883a 	add	r2,r3,r2
   14418:	10800017 	ldw	r2,0(r2)
   1441c:	1000683a 	jmp	r2
   14420:	00014460 	cmpeqi	zero,zero,1297
   14424:	00014460 	cmpeqi	zero,zero,1297
   14428:	00014470 	cmpltui	zero,zero,1297
   1442c:	00014470 	cmpltui	zero,zero,1297
   14430:	00014470 	cmpltui	zero,zero,1297
   14434:	00014460 	cmpeqi	zero,zero,1297
   14438:	00014468 	cmpgeui	zero,zero,1297
   1443c:	00014470 	cmpltui	zero,zero,1297
   14440:	00014460 	cmpeqi	zero,zero,1297
   14444:	00014460 	cmpeqi	zero,zero,1297
   14448:	00014470 	cmpltui	zero,zero,1297
   1444c:	00014460 	cmpeqi	zero,zero,1297
   14450:	00014468 	cmpgeui	zero,zero,1297
   14454:	00014470 	cmpltui	zero,zero,1297
   14458:	00014470 	cmpltui	zero,zero,1297
   1445c:	00014460 	cmpeqi	zero,zero,1297
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   14460:	00800044 	movi	r2,1
   14464:	00000306 	br	14474 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   14468:	0005883a 	mov	r2,zero
   1446c:	00000106 	br	14474 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   14470:	0005883a 	mov	r2,zero
  }
}
   14474:	e037883a 	mov	sp,fp
   14478:	df000017 	ldw	fp,0(sp)
   1447c:	dec00104 	addi	sp,sp,4
   14480:	f800283a 	ret

00014484 <atexit>:
   14484:	200b883a 	mov	r5,r4
   14488:	000f883a 	mov	r7,zero
   1448c:	000d883a 	mov	r6,zero
   14490:	0009883a 	mov	r4,zero
   14494:	00146b41 	jmpi	146b4 <__register_exitproc>

00014498 <exit>:
   14498:	defffe04 	addi	sp,sp,-8
   1449c:	000b883a 	mov	r5,zero
   144a0:	dc000015 	stw	r16,0(sp)
   144a4:	dfc00115 	stw	ra,4(sp)
   144a8:	2021883a 	mov	r16,r4
   144ac:	00147cc0 	call	147cc <__call_exitprocs>
   144b0:	00800074 	movhi	r2,1
   144b4:	109ac704 	addi	r2,r2,27420
   144b8:	11000017 	ldw	r4,0(r2)
   144bc:	20800f17 	ldw	r2,60(r4)
   144c0:	10000126 	beq	r2,zero,144c8 <exit+0x30>
   144c4:	103ee83a 	callr	r2
   144c8:	8009883a 	mov	r4,r16
   144cc:	001494c0 	call	1494c <_exit>

000144d0 <memcmp>:
   144d0:	01c000c4 	movi	r7,3
   144d4:	3980192e 	bgeu	r7,r6,1453c <memcmp+0x6c>
   144d8:	2144b03a 	or	r2,r4,r5
   144dc:	11c4703a 	and	r2,r2,r7
   144e0:	10000f26 	beq	r2,zero,14520 <memcmp+0x50>
   144e4:	20800003 	ldbu	r2,0(r4)
   144e8:	28c00003 	ldbu	r3,0(r5)
   144ec:	10c0151e 	bne	r2,r3,14544 <memcmp+0x74>
   144f0:	31bfff84 	addi	r6,r6,-2
   144f4:	01ffffc4 	movi	r7,-1
   144f8:	00000406 	br	1450c <memcmp+0x3c>
   144fc:	20800003 	ldbu	r2,0(r4)
   14500:	28c00003 	ldbu	r3,0(r5)
   14504:	31bfffc4 	addi	r6,r6,-1
   14508:	10c00e1e 	bne	r2,r3,14544 <memcmp+0x74>
   1450c:	21000044 	addi	r4,r4,1
   14510:	29400044 	addi	r5,r5,1
   14514:	31fff91e 	bne	r6,r7,144fc <__alt_data_end+0xfc0144fc>
   14518:	0005883a 	mov	r2,zero
   1451c:	f800283a 	ret
   14520:	20c00017 	ldw	r3,0(r4)
   14524:	28800017 	ldw	r2,0(r5)
   14528:	18bfee1e 	bne	r3,r2,144e4 <__alt_data_end+0xfc0144e4>
   1452c:	31bfff04 	addi	r6,r6,-4
   14530:	21000104 	addi	r4,r4,4
   14534:	29400104 	addi	r5,r5,4
   14538:	39bff936 	bltu	r7,r6,14520 <__alt_data_end+0xfc014520>
   1453c:	303fe91e 	bne	r6,zero,144e4 <__alt_data_end+0xfc0144e4>
   14540:	003ff506 	br	14518 <__alt_data_end+0xfc014518>
   14544:	10c5c83a 	sub	r2,r2,r3
   14548:	f800283a 	ret

0001454c <_putc_r>:
   1454c:	defffc04 	addi	sp,sp,-16
   14550:	dc000215 	stw	r16,8(sp)
   14554:	dfc00315 	stw	ra,12(sp)
   14558:	2021883a 	mov	r16,r4
   1455c:	20000226 	beq	r4,zero,14568 <_putc_r+0x1c>
   14560:	20800e17 	ldw	r2,56(r4)
   14564:	10001b26 	beq	r2,zero,145d4 <_putc_r+0x88>
   14568:	30800217 	ldw	r2,8(r6)
   1456c:	10bfffc4 	addi	r2,r2,-1
   14570:	30800215 	stw	r2,8(r6)
   14574:	10000a16 	blt	r2,zero,145a0 <_putc_r+0x54>
   14578:	30800017 	ldw	r2,0(r6)
   1457c:	11400005 	stb	r5,0(r2)
   14580:	30800017 	ldw	r2,0(r6)
   14584:	10c00044 	addi	r3,r2,1
   14588:	30c00015 	stw	r3,0(r6)
   1458c:	10800003 	ldbu	r2,0(r2)
   14590:	dfc00317 	ldw	ra,12(sp)
   14594:	dc000217 	ldw	r16,8(sp)
   14598:	dec00404 	addi	sp,sp,16
   1459c:	f800283a 	ret
   145a0:	30c00617 	ldw	r3,24(r6)
   145a4:	10c00616 	blt	r2,r3,145c0 <_putc_r+0x74>
   145a8:	30800017 	ldw	r2,0(r6)
   145ac:	00c00284 	movi	r3,10
   145b0:	11400005 	stb	r5,0(r2)
   145b4:	30800017 	ldw	r2,0(r6)
   145b8:	11400003 	ldbu	r5,0(r2)
   145bc:	28fff11e 	bne	r5,r3,14584 <__alt_data_end+0xfc014584>
   145c0:	8009883a 	mov	r4,r16
   145c4:	dfc00317 	ldw	ra,12(sp)
   145c8:	dc000217 	ldw	r16,8(sp)
   145cc:	dec00404 	addi	sp,sp,16
   145d0:	000c6bc1 	jmpi	c6bc <__swbuf_r>
   145d4:	d9400015 	stw	r5,0(sp)
   145d8:	d9800115 	stw	r6,4(sp)
   145dc:	00076940 	call	7694 <__sinit>
   145e0:	d9800117 	ldw	r6,4(sp)
   145e4:	d9400017 	ldw	r5,0(sp)
   145e8:	003fdf06 	br	14568 <__alt_data_end+0xfc014568>

000145ec <putc>:
   145ec:	00800074 	movhi	r2,1
   145f0:	defffc04 	addi	sp,sp,-16
   145f4:	109ac804 	addi	r2,r2,27424
   145f8:	dc000115 	stw	r16,4(sp)
   145fc:	14000017 	ldw	r16,0(r2)
   14600:	dc400215 	stw	r17,8(sp)
   14604:	dfc00315 	stw	ra,12(sp)
   14608:	2023883a 	mov	r17,r4
   1460c:	80000226 	beq	r16,zero,14618 <putc+0x2c>
   14610:	80800e17 	ldw	r2,56(r16)
   14614:	10001a26 	beq	r2,zero,14680 <putc+0x94>
   14618:	28800217 	ldw	r2,8(r5)
   1461c:	10bfffc4 	addi	r2,r2,-1
   14620:	28800215 	stw	r2,8(r5)
   14624:	10000b16 	blt	r2,zero,14654 <putc+0x68>
   14628:	28800017 	ldw	r2,0(r5)
   1462c:	14400005 	stb	r17,0(r2)
   14630:	28800017 	ldw	r2,0(r5)
   14634:	10c00044 	addi	r3,r2,1
   14638:	28c00015 	stw	r3,0(r5)
   1463c:	10800003 	ldbu	r2,0(r2)
   14640:	dfc00317 	ldw	ra,12(sp)
   14644:	dc400217 	ldw	r17,8(sp)
   14648:	dc000117 	ldw	r16,4(sp)
   1464c:	dec00404 	addi	sp,sp,16
   14650:	f800283a 	ret
   14654:	28c00617 	ldw	r3,24(r5)
   14658:	10c00e16 	blt	r2,r3,14694 <putc+0xa8>
   1465c:	28800017 	ldw	r2,0(r5)
   14660:	01000284 	movi	r4,10
   14664:	14400005 	stb	r17,0(r2)
   14668:	28800017 	ldw	r2,0(r5)
   1466c:	10c00003 	ldbu	r3,0(r2)
   14670:	193ff01e 	bne	r3,r4,14634 <__alt_data_end+0xfc014634>
   14674:	280d883a 	mov	r6,r5
   14678:	180b883a 	mov	r5,r3
   1467c:	00000706 	br	1469c <putc+0xb0>
   14680:	8009883a 	mov	r4,r16
   14684:	d9400015 	stw	r5,0(sp)
   14688:	00076940 	call	7694 <__sinit>
   1468c:	d9400017 	ldw	r5,0(sp)
   14690:	003fe106 	br	14618 <__alt_data_end+0xfc014618>
   14694:	280d883a 	mov	r6,r5
   14698:	880b883a 	mov	r5,r17
   1469c:	8009883a 	mov	r4,r16
   146a0:	dfc00317 	ldw	ra,12(sp)
   146a4:	dc400217 	ldw	r17,8(sp)
   146a8:	dc000117 	ldw	r16,4(sp)
   146ac:	dec00404 	addi	sp,sp,16
   146b0:	000c6bc1 	jmpi	c6bc <__swbuf_r>

000146b4 <__register_exitproc>:
   146b4:	defffa04 	addi	sp,sp,-24
   146b8:	dc000315 	stw	r16,12(sp)
   146bc:	04000074 	movhi	r16,1
   146c0:	841ac704 	addi	r16,r16,27420
   146c4:	80c00017 	ldw	r3,0(r16)
   146c8:	dc400415 	stw	r17,16(sp)
   146cc:	dfc00515 	stw	ra,20(sp)
   146d0:	18805217 	ldw	r2,328(r3)
   146d4:	2023883a 	mov	r17,r4
   146d8:	10003726 	beq	r2,zero,147b8 <__register_exitproc+0x104>
   146dc:	10c00117 	ldw	r3,4(r2)
   146e0:	010007c4 	movi	r4,31
   146e4:	20c00e16 	blt	r4,r3,14720 <__register_exitproc+0x6c>
   146e8:	1a000044 	addi	r8,r3,1
   146ec:	8800221e 	bne	r17,zero,14778 <__register_exitproc+0xc4>
   146f0:	18c00084 	addi	r3,r3,2
   146f4:	18c7883a 	add	r3,r3,r3
   146f8:	18c7883a 	add	r3,r3,r3
   146fc:	12000115 	stw	r8,4(r2)
   14700:	10c7883a 	add	r3,r2,r3
   14704:	19400015 	stw	r5,0(r3)
   14708:	0005883a 	mov	r2,zero
   1470c:	dfc00517 	ldw	ra,20(sp)
   14710:	dc400417 	ldw	r17,16(sp)
   14714:	dc000317 	ldw	r16,12(sp)
   14718:	dec00604 	addi	sp,sp,24
   1471c:	f800283a 	ret
   14720:	00800034 	movhi	r2,0
   14724:	10800004 	addi	r2,r2,0
   14728:	10002626 	beq	r2,zero,147c4 <__register_exitproc+0x110>
   1472c:	01006404 	movi	r4,400
   14730:	d9400015 	stw	r5,0(sp)
   14734:	d9800115 	stw	r6,4(sp)
   14738:	d9c00215 	stw	r7,8(sp)
   1473c:	00000000 	call	0 <__alt_mem_sdram>
   14740:	d9400017 	ldw	r5,0(sp)
   14744:	d9800117 	ldw	r6,4(sp)
   14748:	d9c00217 	ldw	r7,8(sp)
   1474c:	10001d26 	beq	r2,zero,147c4 <__register_exitproc+0x110>
   14750:	81000017 	ldw	r4,0(r16)
   14754:	10000115 	stw	zero,4(r2)
   14758:	02000044 	movi	r8,1
   1475c:	22405217 	ldw	r9,328(r4)
   14760:	0007883a 	mov	r3,zero
   14764:	12400015 	stw	r9,0(r2)
   14768:	20805215 	stw	r2,328(r4)
   1476c:	10006215 	stw	zero,392(r2)
   14770:	10006315 	stw	zero,396(r2)
   14774:	883fde26 	beq	r17,zero,146f0 <__alt_data_end+0xfc0146f0>
   14778:	18c9883a 	add	r4,r3,r3
   1477c:	2109883a 	add	r4,r4,r4
   14780:	1109883a 	add	r4,r2,r4
   14784:	21802215 	stw	r6,136(r4)
   14788:	01800044 	movi	r6,1
   1478c:	12406217 	ldw	r9,392(r2)
   14790:	30cc983a 	sll	r6,r6,r3
   14794:	4992b03a 	or	r9,r9,r6
   14798:	12406215 	stw	r9,392(r2)
   1479c:	21c04215 	stw	r7,264(r4)
   147a0:	01000084 	movi	r4,2
   147a4:	893fd21e 	bne	r17,r4,146f0 <__alt_data_end+0xfc0146f0>
   147a8:	11006317 	ldw	r4,396(r2)
   147ac:	218cb03a 	or	r6,r4,r6
   147b0:	11806315 	stw	r6,396(r2)
   147b4:	003fce06 	br	146f0 <__alt_data_end+0xfc0146f0>
   147b8:	18805304 	addi	r2,r3,332
   147bc:	18805215 	stw	r2,328(r3)
   147c0:	003fc606 	br	146dc <__alt_data_end+0xfc0146dc>
   147c4:	00bfffc4 	movi	r2,-1
   147c8:	003fd006 	br	1470c <__alt_data_end+0xfc01470c>

000147cc <__call_exitprocs>:
   147cc:	defff504 	addi	sp,sp,-44
   147d0:	df000915 	stw	fp,36(sp)
   147d4:	dd400615 	stw	r21,24(sp)
   147d8:	dc800315 	stw	r18,12(sp)
   147dc:	dfc00a15 	stw	ra,40(sp)
   147e0:	ddc00815 	stw	r23,32(sp)
   147e4:	dd800715 	stw	r22,28(sp)
   147e8:	dd000515 	stw	r20,20(sp)
   147ec:	dcc00415 	stw	r19,16(sp)
   147f0:	dc400215 	stw	r17,8(sp)
   147f4:	dc000115 	stw	r16,4(sp)
   147f8:	d9000015 	stw	r4,0(sp)
   147fc:	2839883a 	mov	fp,r5
   14800:	04800044 	movi	r18,1
   14804:	057fffc4 	movi	r21,-1
   14808:	00800074 	movhi	r2,1
   1480c:	109ac704 	addi	r2,r2,27420
   14810:	12000017 	ldw	r8,0(r2)
   14814:	45005217 	ldw	r20,328(r8)
   14818:	44c05204 	addi	r19,r8,328
   1481c:	a0001c26 	beq	r20,zero,14890 <__call_exitprocs+0xc4>
   14820:	a0800117 	ldw	r2,4(r20)
   14824:	15ffffc4 	addi	r23,r2,-1
   14828:	b8000d16 	blt	r23,zero,14860 <__call_exitprocs+0x94>
   1482c:	14000044 	addi	r16,r2,1
   14830:	8421883a 	add	r16,r16,r16
   14834:	8421883a 	add	r16,r16,r16
   14838:	84402004 	addi	r17,r16,128
   1483c:	a463883a 	add	r17,r20,r17
   14840:	a421883a 	add	r16,r20,r16
   14844:	e0001e26 	beq	fp,zero,148c0 <__call_exitprocs+0xf4>
   14848:	80804017 	ldw	r2,256(r16)
   1484c:	e0801c26 	beq	fp,r2,148c0 <__call_exitprocs+0xf4>
   14850:	bdffffc4 	addi	r23,r23,-1
   14854:	843fff04 	addi	r16,r16,-4
   14858:	8c7fff04 	addi	r17,r17,-4
   1485c:	bd7ff91e 	bne	r23,r21,14844 <__alt_data_end+0xfc014844>
   14860:	00800034 	movhi	r2,0
   14864:	10800004 	addi	r2,r2,0
   14868:	10000926 	beq	r2,zero,14890 <__call_exitprocs+0xc4>
   1486c:	a0800117 	ldw	r2,4(r20)
   14870:	1000301e 	bne	r2,zero,14934 <__call_exitprocs+0x168>
   14874:	a0800017 	ldw	r2,0(r20)
   14878:	10003226 	beq	r2,zero,14944 <__call_exitprocs+0x178>
   1487c:	a009883a 	mov	r4,r20
   14880:	98800015 	stw	r2,0(r19)
   14884:	00000000 	call	0 <__alt_mem_sdram>
   14888:	9d000017 	ldw	r20,0(r19)
   1488c:	a03fe41e 	bne	r20,zero,14820 <__alt_data_end+0xfc014820>
   14890:	dfc00a17 	ldw	ra,40(sp)
   14894:	df000917 	ldw	fp,36(sp)
   14898:	ddc00817 	ldw	r23,32(sp)
   1489c:	dd800717 	ldw	r22,28(sp)
   148a0:	dd400617 	ldw	r21,24(sp)
   148a4:	dd000517 	ldw	r20,20(sp)
   148a8:	dcc00417 	ldw	r19,16(sp)
   148ac:	dc800317 	ldw	r18,12(sp)
   148b0:	dc400217 	ldw	r17,8(sp)
   148b4:	dc000117 	ldw	r16,4(sp)
   148b8:	dec00b04 	addi	sp,sp,44
   148bc:	f800283a 	ret
   148c0:	a0800117 	ldw	r2,4(r20)
   148c4:	80c00017 	ldw	r3,0(r16)
   148c8:	10bfffc4 	addi	r2,r2,-1
   148cc:	15c01426 	beq	r2,r23,14920 <__call_exitprocs+0x154>
   148d0:	80000015 	stw	zero,0(r16)
   148d4:	183fde26 	beq	r3,zero,14850 <__alt_data_end+0xfc014850>
   148d8:	95c8983a 	sll	r4,r18,r23
   148dc:	a0806217 	ldw	r2,392(r20)
   148e0:	a5800117 	ldw	r22,4(r20)
   148e4:	2084703a 	and	r2,r4,r2
   148e8:	10000b26 	beq	r2,zero,14918 <__call_exitprocs+0x14c>
   148ec:	a0806317 	ldw	r2,396(r20)
   148f0:	2088703a 	and	r4,r4,r2
   148f4:	20000c1e 	bne	r4,zero,14928 <__call_exitprocs+0x15c>
   148f8:	89400017 	ldw	r5,0(r17)
   148fc:	d9000017 	ldw	r4,0(sp)
   14900:	183ee83a 	callr	r3
   14904:	a0800117 	ldw	r2,4(r20)
   14908:	15bfbf1e 	bne	r2,r22,14808 <__alt_data_end+0xfc014808>
   1490c:	98800017 	ldw	r2,0(r19)
   14910:	153fcf26 	beq	r2,r20,14850 <__alt_data_end+0xfc014850>
   14914:	003fbc06 	br	14808 <__alt_data_end+0xfc014808>
   14918:	183ee83a 	callr	r3
   1491c:	003ff906 	br	14904 <__alt_data_end+0xfc014904>
   14920:	a5c00115 	stw	r23,4(r20)
   14924:	003feb06 	br	148d4 <__alt_data_end+0xfc0148d4>
   14928:	89000017 	ldw	r4,0(r17)
   1492c:	183ee83a 	callr	r3
   14930:	003ff406 	br	14904 <__alt_data_end+0xfc014904>
   14934:	a0800017 	ldw	r2,0(r20)
   14938:	a027883a 	mov	r19,r20
   1493c:	1029883a 	mov	r20,r2
   14940:	003fb606 	br	1481c <__alt_data_end+0xfc01481c>
   14944:	0005883a 	mov	r2,zero
   14948:	003ffb06 	br	14938 <__alt_data_end+0xfc014938>

0001494c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1494c:	defffd04 	addi	sp,sp,-12
   14950:	df000215 	stw	fp,8(sp)
   14954:	df000204 	addi	fp,sp,8
   14958:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1495c:	0001883a 	nop
   14960:	e0bfff17 	ldw	r2,-4(fp)
   14964:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14968:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1496c:	10000226 	beq	r2,zero,14978 <_exit+0x2c>
    ALT_SIM_FAIL();
   14970:	002af070 	cmpltui	zero,zero,43969
   14974:	00000106 	br	1497c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14978:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1497c:	003fff06 	br	1497c <__alt_data_end+0xfc01497c>
