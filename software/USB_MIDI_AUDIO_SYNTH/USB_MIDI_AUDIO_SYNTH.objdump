
USB_MIDI_AUDIO_SYNTH.elf:     file format elf32-littlenios2
USB_MIDI_AUDIO_SYNTH.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002ab64 memsz 0x0002ab64 flags r-x
    LOAD off    0x0002bb84 vaddr 0x0002ab84 paddr 0x0002dd70 align 2**12
         filesz 0x000031ec memsz 0x000031ec flags rw-
    LOAD off    0x0002ef5c vaddr 0x00030f5c paddr 0x00030f5c align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000237dc  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007178  00023a0c  00023a0c  00024a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031ec  0002ab84  0002dd70  0002bb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00030f5c  00030f5c  0002ef5c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00031208  00031208  0002ed70  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002ed70  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001a98  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00053462  00000000  00000000  00030830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010da0  00000000  00000000  00083c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000156e1  00000000  00000000  00094a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005a2c  00000000  00000000  000aa114  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ff3d  00000000  00000000  000afb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000243a9  00000000  00000000  000bfa7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000e3e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c10  00000000  00000000  000e3e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000ff53a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000ff53d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000ff542  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000ff543  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000ff544  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000ff548  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000ff54c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000ff550  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000ff55b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000ff566  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  000ff571  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000ff585  2**0
                  CONTENTS, READONLY
 29 .jdi          00005487  00000000  00000000  000ff5b0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00094ca6  00000000  00000000  00104a37  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00023a0c l    d  .rodata	00000000 .rodata
0002ab84 l    d  .rwdata	00000000 .rwdata
00030f5c l    d  .bss	00000000 .bss
00031208 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../USB_MIDI_AUDIO_SYNTH_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
0002c668 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c669 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c66a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c66b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0002c66c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c66d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c66e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c66f l     O .rwdata	00000001 _ZL9SPI_MODE3
00030f5c l     O .bss	00000001 _ZL9usb_error
00030f5d l     O .bss	00000001 _ZL14usb_task_state
00030f60 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
0002c678 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c679 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c67a l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c67b l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c67c l     O .rwdata	00000006 _ZL9XBOX_LEDS
00023bf2 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
000039dc l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 audio_synth.cpp
0002c69c l     O .rwdata	00000004 _ZL4keys
0002c6a0 l     O .rwdata	00000004 _ZL4adsr
00000000 l    df *ABS*	00000000 hidboot.cpp
0002c6a4 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002c6a5 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002c6a6 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002c6a7 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002c6a8 l     O .rwdata	00000002 _ZL9pstrSpace
0002c6ac l     O .rwdata	00000003 _ZL8pstrCRLF
0002c6b0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002c6b4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002c6b8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002c6bc l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00023e74 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00023e88 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00023e94 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00023ea0 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00023eac l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00023eb8 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
00023ec8 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002c6c4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002c6cc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002c6d4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002c6dc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00023ed4 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00023ee0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002c6e0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002c6e4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00023eec l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00023efc l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002c6ec l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002c6f4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00023f0c l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002c6fc l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00023f1c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002c704 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00023f34 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002c708 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
00023f40 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00023f4c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002c710 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002c718 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00023f58 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00023f64 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002c720 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002c728 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
00023f70 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
00023f80 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002c730 l     O .rwdata	00000002 _ZL10pstrUsageX
0002c734 l     O .rwdata	00000002 _ZL10pstrUsageY
0002c738 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002c73c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002c740 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002c744 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002c748 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002c750 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002c758 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00023f94 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00023fa0 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00023fac l     O .rodata	0000000b _ZL18pstrUsageByteCount
00023fb8 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002c760 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002c768 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002c76c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002c770 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002c774 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002c778 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002c780 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002c788 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002c790 l     O .rwdata	00000004 _ZL12pstrUsageVno
00023fc8 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
00023fd8 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00023fe4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00023ff0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00024000 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0002400c l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
00024018 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0002402c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0002403c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0002404c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0002405c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0002406c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0002407c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0002408c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0002409c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
000240a8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
000240b8 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000240cc l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000240e0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000240ec l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000240f8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00024104 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00024110 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0002411c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00024128 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00024134 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
00024140 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0002414c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00024158 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00024164 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00024174 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
00024180 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
00024190 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
000241a0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
000241b0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
000241c0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000241d0 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000241e8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00024200 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
00024218 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00024228 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00024238 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00024248 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00024258 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00024268 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00024278 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00024288 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00024298 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
000242a8 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
000242b8 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000242d0 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000242e0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000242f4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00024304 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00024310 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0002431c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00024328 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002c794 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00024334 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00024344 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00024358 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0002436c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0002437c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0002438c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00024398 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
000243ac l     O .rodata	00000009 _ZL17pstrUsageElevator
000243b8 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002c79c l     O .rwdata	00000007 _ZL15pstrUsageRudder
000243c8 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000243d4 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000243e0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000243f0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00024400 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002c7a4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0002440c l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
00024418 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00024424 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002c7ac l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002c7b4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002c7bc l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002c7c4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00024430 l     O .rodata	00000009 _ZL17pstrUsageSteering
0002443c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00024448 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00024454 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002c7cc l     O .rwdata	00000008 _ZL16pstrUsageBallast
00024460 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
00024470 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0002447c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00024488 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002c7d4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
00024494 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002c7dc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002c7e4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
000244a0 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
000244ac l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
000244b8 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000244c4 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002c7ec l     O .rwdata	00000005 _ZL13pstrUsageVest
000244d0 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000244dc l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000244e8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000244f8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00024508 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00024514 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00024520 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002c7f4 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002c7f8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002c800 l     O .rwdata	00000005 _ZL13pstrUsageRate
0002452c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00024538 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00024548 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00024558 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00024568 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00024574 l     O .rodata	0000000b _ZL18pstrUsageStickType
00024580 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002c808 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002c810 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002c818 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002c820 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002c828 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002c830 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002c838 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002c840 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002c848 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002c850 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002c858 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002c860 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0002458c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00024598 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
000245a4 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002c868 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002c870 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002c878 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002c880 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002c888 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
000245b0 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
000245c0 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002c890 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002c898 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000245cc l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000245dc l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000245ec l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000245fc l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
0002460c l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
0002461c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
0002462c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
0002463c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0002464c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002c89c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0002465c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002c8a4 l     O .rwdata	00000005 _ZL13pstrUsageBump
0002466c l     O .rodata	00000009 _ZL16pstrUsageNewGame
00024678 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002c8ac l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00024684 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00024690 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002c8b4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
0002469c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
000246ac l     O .rodata	0000000a _ZL17pstrUsageGunBurst
000246b8 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
000246c4 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
000246d0 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
000246e4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
000246f4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00024704 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00024710 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
0002471c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00024734 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00024748 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00024760 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00024774 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00024780 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
0002478c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002c8bc l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002c8c4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002c8cc l     O .rwdata	00000004 _ZL14pstrUsagePower
0002c8d0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002c8d8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002c8dc l     O .rwdata	00000005 _ZL13pstrUsageMute
00024798 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
000247a4 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
000247b4 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002c8e4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
000247c4 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
000247d4 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002c8ec l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002c8f4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
000247e0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
000247f4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002c8fc l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002c900 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00024800 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00024814 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002c904 l     O .rwdata	00000005 _ZL13pstrUsageRing
00024820 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
0002482c l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002c90c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002c914 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002c91c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002c924 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00024838 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002c92c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002c934 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00024844 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00024850 l     O .rodata	0000000b _ZL18pstrUsageNightMode
0002485c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00024868 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002c938 l     O .rwdata	00000005 _ZL19pstrUsageConference
00024874 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002c940 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002c948 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002c950 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00024880 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002c958 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002c960 l     O .rwdata	00000006 _ZL14pstrUsageReady
0002488c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00024898 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002c968 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002c970 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002c974 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002c978 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002c980 l     O .rwdata	00000007 _ZL15pstrUsageRewind
000248a4 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002c988 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002c990 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002c998 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002c99c l     O .rwdata	00000006 _ZL14pstrUsageError
000248b0 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
000248c0 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
000248d4 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002c9a4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
000248ec l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
000248f8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00024908 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002c9ac l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00024918 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00024928 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
0002493c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00024950 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00024964 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00024978 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002c9b4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00024988 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00024994 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002c9bc l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
000249a0 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
000249ac l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002c9c4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
000249bc l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
000249c8 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002c9cc l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002c9d4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
000249d4 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
000249e0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002c9dc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002c9e4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002c9ec l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002c9f4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
000249ec l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002c9fc l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002ca04 l     O .rwdata	00000005 _ZL13pstrUsagePark
000249f8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00024a04 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002ca0c l     O .rwdata	00000005 _ZL13pstrUsageLine
00024a10 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00024a1c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00024a28 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00024a34 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00024a40 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002ca14 l     O .rwdata	00000005 _ZL13pstrUsageSend
00024a4c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00024a58 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00024a64 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00024a70 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00024a7c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00024a88 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002ca1c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00024a98 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00024aa8 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00024abc l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00024ad0 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00024ae4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00024af8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00024b08 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00024b18 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00024b2c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00024b3c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00024b4c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00024b5c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00024b68 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00024b74 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00024b80 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002ca20 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002ca28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002ca2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002ca30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002ca34 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002ca38 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002ca3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002ca40 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002ca44 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002ca48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002ca4c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002ca50 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002ca54 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002ca58 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002ca5c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002ca60 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002ca64 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00024b94 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00024ba4 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00024bb0 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00024bbc l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002ca68 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002ca6c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002ca74 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002ca7c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002ca84 l     O .rwdata	00000006 _ZL14pstrUsageSleep
00024bc8 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00024bd4 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002ca8c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00024be0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002ca94 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00024bec l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002ca9c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00024bf8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00024c04 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00024c10 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00024c1c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00024c28 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00024c38 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00024c48 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00024c54 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
00024c60 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002caa4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
00024c70 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
00024c80 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002caac l     O .rwdata	00000006 _ZL14pstrUsageStill
0002cab4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
00024c8c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00024c98 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00024ca4 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00024cb0 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00024cc0 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002cab8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002cac0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00024ccc l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00024cdc l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
00024ce8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00024cf4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00024d00 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00024d0c l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
00024d18 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00024d24 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00024d34 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
00024d40 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00024d4c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00024d58 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002cac8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002cad0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00024d68 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00024d78 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00024d84 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
00024d90 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00024da0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00024db0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002cad8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002cae0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00024dc0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002cae8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002caf0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002caf8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002cb00 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002cb08 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00024dcc l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
00024dd8 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002cb10 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002cb18 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00024de4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00024df0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00024dfc l     O .rodata	00000009 _ZL17pstrUsageTracking
00024e08 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00024e14 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002cb20 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00024e20 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002cb28 l     O .rwdata	00000005 _ZL13pstrUsageMark
00024e2c l     O .rodata	00000009 _ZL18pstrUsageClearMark
00024e38 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00024e44 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
00024e50 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
00024e60 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00024e74 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00024e84 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00024e94 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00024ea0 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00024eac l     O .rodata	0000000b _ZL18pstrUsageStopEject
00024eb8 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00024ec4 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002cb30 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002cb34 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002cb3c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002cb44 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00024ed0 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00024edc l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002cb4c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002cb54 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002cb58 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002cb60 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002cb68 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
00024ee8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00024ef4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00024f00 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00024f0c l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002cb70 l     O .rwdata	00000005 _ZL13pstrUsageSlow
00024f18 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00024f24 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00024f30 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00024f3c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00024f4c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00024f5c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00024f68 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00024f74 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
00024f80 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002cb78 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002cb80 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00024f8c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00024f98 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002cb88 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00024fa4 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00024fb4 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00024fc4 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00024fd0 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00024fdc l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
00024fe8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002cb90 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002cb98 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00024ff4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00025000 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0002500c l     O .rodata	00000009 _ZL21pstrUsageChannelFront
00025018 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002cba0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00025028 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00025034 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002cba8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002cbb0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002cbb8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00025044 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
00025050 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0002505c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00025068 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00025074 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00025084 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00025098 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
000250a4 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
000250b8 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000250c8 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000250d4 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000250e4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000250f4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00025104 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00025110 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00025120 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0002512c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0002513c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0002514c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0002515c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0002516c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
00025180 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002cbc0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
00025190 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
000251a4 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
000251b8 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000251c8 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000251d8 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000251e8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000251f4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00025200 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0002520c l     O .rodata	00000009 _ZL16pstrUsageALLogon
00025218 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00025224 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00025234 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0002524c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00025258 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00025264 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
00025270 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0002527c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00025288 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00025294 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
000252a8 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002cbc8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
000252b4 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002cbd0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
000252c0 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000252cc l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000252dc l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000252e8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000252f8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
00025308 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
00025318 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00025324 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00025330 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0002533c l     O .rodata	00000009 _ZL16pstrUsageALClock
00025348 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00025358 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00025364 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
00025370 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0002537c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00025388 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0002539c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
000253ac l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
000253b8 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000253cc l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000253d8 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000253e8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000253fc l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00025410 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00025424 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00025434 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0002544c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
00025460 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
00025470 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
00025480 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002cbd8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002cbe0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00025494 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002cbe8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002cbf0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002cbf8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002cc00 l     O .rwdata	00000008 _ZL15pstrUsageACSave
000254a0 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002cc08 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002cc10 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002cc18 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002cc20 l     O .rwdata	00000007 _ZL14pstrUsageACCut
000254ac l     O .rodata	00000009 _ZL16pstrUsageACPaste
000254b8 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002cc28 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000254c4 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000254d4 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002cc30 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002cc38 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002cc40 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002cc48 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002cc50 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000254e0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000254ec l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000254fc l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0002550c l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002cc58 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00025518 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00025524 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00025530 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002cc60 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0002553c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00025548 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00025558 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00025564 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00025574 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00025584 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00025590 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0002559c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002cc68 l     O .rwdata	00000007 _ZL14pstrUsageACPan
000255ac l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
000255b8 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000255c8 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002cc70 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002cc78 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002cc80 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002cc88 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000255d8 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000255e4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002cc90 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000255f0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000255fc l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00025608 l     O .rodata	0000000a _ZL17pstrUsageACRotate
00025614 l     O .rodata	0000000a _ZL17pstrUsageACResize
00025620 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0002562c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00025638 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00025644 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00025650 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0002565c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00025668 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00025674 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00025684 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00025694 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
000256a4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
000256b4 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
000256c0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
000256d0 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
000256dc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
000256ec l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
000256fc l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0002570c l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00025718 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00025724 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00025730 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0002573c l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002cc98 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002cca0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00025748 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002cca8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002ccb0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00025754 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002ccb8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00025760 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00025770 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0002577c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0002578c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0002579c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
000257ac l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002ccc0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002ccc8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
000257b8 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002ccd0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
000257c4 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
000257d0 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
000257e0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
000257ec l     O .rodata	0000000d _ZL22pstrUsageACViewComment
000257fc l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00025808 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00025814 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00025820 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0002582c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00025838 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00025844 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002ccd8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002cce0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00025850 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0002585c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002cce8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0002586c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00025878 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00025884 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00025894 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
000258a4 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
000258b0 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
000258bc l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
000258c8 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002ccf0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
000258d4 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
000258e0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
000258ec l     O .rodata	00000009 _ZL16pstrUsageACReply
000258f8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00025908 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002ccf8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00025914 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002cd00 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002cd08 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00025920 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0002592c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00025938 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00025944 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00025950 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0002595c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00025968 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00025974 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00025980 l     O .rodata	0000000a _ZL17pstrUsageACRename
0002598c l     O .rodata	00000009 _ZL16pstrUsageACMerge
00025998 l     O .rodata	00000009 _ZL16pstrUsageACSplit
000259a4 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
000259b0 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
000259bc l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002cd10 l     O .rwdata	00000004 _ZL12pstrUsagePen
000259c8 l     O .rodata	0000000a _ZL17pstrUsageLightPen
000259d4 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
000259e0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
000259ec l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
000259f8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002cd14 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00025a08 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002cd1c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00025a14 l     O .rodata	00000009 _ZL17pstrUsageArmature
00025a20 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00025a34 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002cd24 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002cd2c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002cd34 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00025a44 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00025a50 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00025a5c l     O .rodata	00000009 _ZL16pstrUsageInRange
0002cd3c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002cd44 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002cd4c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002cd50 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00025a68 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00025a74 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00025a84 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00025a94 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002cd58 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002cd60 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002cd68 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002cd70 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00025aa4 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002cd78 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002cd80 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00025ab0 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002cd88 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002cd90 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00025abc l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00025ac8 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00025ad8 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00025ae4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00025af4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00025b00 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00025b10 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00025b1c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00025b2c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00025b38 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00025b48 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00025b58 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00025b64 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00025b70 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00025b7c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00025b88 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00025b94 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00025ba0 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00025bac l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00025bbc l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00025bcc l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002cd98 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002cd9c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002cda0 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002cda8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00025bd8 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00025be4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00025bf0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00025bfc l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002cdb0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00025c08 l     O .rodata	00000009 _ZL17pstrUsageFontData
00025c14 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00025c20 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00025c2c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00025c3c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00025c4c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00025c5c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00025c68 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00025c74 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
00025c80 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00025c8c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00025c98 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00025ca4 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
00025cb0 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00025cbc l     O .rodata	0000000a _ZL22pstrUsageAttributeData
00025cc8 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
00025cd8 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
00025ce8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
00025cf8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
00025d04 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
00025d10 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
00025d20 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002cdb8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00025d2c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00025d3c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00025d4c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00025d58 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00025d64 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00025d74 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00025d84 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00025d94 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00025da4 l     O .rodata	0000000a _ZL17pstrUsageBlitData
00025db0 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00025dbc l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
00025dc8 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
00025dd8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
00025de8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
00025df8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
00025e08 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002cdc0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002cdc8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
00025e18 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002cdd0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002cdd8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002cde0 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002cde8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00025e24 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002cdf0 l     O .rwdata	00000005 _ZL13pstrUsageCine
00025e30 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002cdf8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002ce00 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00025e3c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00025e4c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00025e5c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00025e6c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00025e78 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00025e84 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00025e98 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00025eac l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
00025ec0 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
00025ed4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
00025ee4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
00025ef4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
00025f00 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
00025f0c l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
00025f1c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0002ce14 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ce15 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ce16 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ce17 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
0002ce1c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ce1d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ce1e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ce1f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 sgtl5000.cpp
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0002ce20 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ce21 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ce22 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ce23 l     O .rwdata	00000001 _ZL9SPI_MODE3
00026176 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
00026186 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
00008b60 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
0002ce2c l     O .rwdata	00000001 _ZL9SPI_MODE0
0002ce2d l     O .rwdata	00000001 _ZL9SPI_MODE1
0002ce2e l     O .rwdata	00000001 _ZL9SPI_MODE2
0002ce2f l     O .rwdata	00000001 _ZL9SPI_MODE3
0002ce30 l     O .rwdata	00000002 _ZL9pstrSpace
0002ce34 l     O .rwdata	00000003 _ZL8pstrCRLF
0002ce38 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002ce3c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002ce40 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002ce44 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
00026250 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
00026264 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
00026270 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
0002627c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00026288 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
00026294 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
000262a4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002ce4c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002ce54 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002ce5c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002ce64 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
000262b0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
000262bc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002ce68 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002ce6c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
000262c8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
000262d8 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002ce74 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002ce7c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
000262e8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002ce84 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
000262f8 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002ce8c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00026310 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002ce90 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0002631c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
00026328 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002ce98 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002cea0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
00026334 l     O .rodata	00000009 _ZL17pstrUsageJoystick
00026340 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002cea8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002ceb0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0002634c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0002635c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002ceb8 l     O .rwdata	00000002 _ZL10pstrUsageX
0002cebc l     O .rwdata	00000002 _ZL10pstrUsageY
0002cec0 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002cec4 l     O .rwdata	00000003 _ZL11pstrUsageRx
0002cec8 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002cecc l     O .rwdata	00000003 _ZL11pstrUsageRz
0002ced0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002ced8 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002cee0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
00026370 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
0002637c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00026388 l     O .rodata	0000000b _ZL18pstrUsageByteCount
00026394 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002cee8 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002cef0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002cef4 l     O .rwdata	00000003 _ZL11pstrUsageVx
0002cef8 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002cefc l     O .rwdata	00000003 _ZL11pstrUsageVz
0002cf00 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002cf08 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002cf10 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002cf18 l     O .rwdata	00000004 _ZL12pstrUsageVno
000263a4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
000263b4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
000263c0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
000263cc l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
000263dc l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
000263e8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
000263f4 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00026408 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
00026418 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
00026428 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
00026438 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
00026448 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
00026458 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
00026468 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00026478 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
00026484 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
00026494 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
000264a8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
000264bc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
000264c8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
000264d4 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
000264e0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
000264ec l     O .rodata	00000009 _ZL19pstrUsageSystemDock
000264f8 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
00026504 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00026510 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0002651c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
00026528 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
00026534 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
00026540 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
00026550 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0002655c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0002656c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0002657c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0002658c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0002659c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
000265ac l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
000265c4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
000265dc l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
000265f4 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
00026604 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
00026614 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
00026624 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
00026634 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
00026644 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
00026654 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
00026664 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
00026674 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
00026684 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
00026694 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
000266ac l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
000266bc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
000266d0 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
000266e0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
000266ec l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
000266f8 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
00026704 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002cf1c l     O .rwdata	00000008 _ZL16pstrUsageAileron
00026710 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
00026720 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
00026734 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
00026748 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
00026758 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
00026768 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
00026774 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00026788 l     O .rodata	00000009 _ZL17pstrUsageElevator
00026794 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002cf24 l     O .rwdata	00000007 _ZL15pstrUsageRudder
000267a4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
000267b0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
000267bc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
000267cc l     O .rodata	0000000d _ZL20pstrUsageLandingGear
000267dc l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002cf2c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
000267e8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
000267f4 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00026800 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002cf34 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002cf3c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002cf44 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002cf4c l     O .rwdata	00000008 _ZL16pstrUsageShifter
0002680c l     O .rodata	00000009 _ZL17pstrUsageSteering
00026818 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
00026824 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
00026830 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002cf54 l     O .rwdata	00000008 _ZL16pstrUsageBallast
0002683c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0002684c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
00026858 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
00026864 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002cf5c l     O .rwdata	00000005 _ZL13pstrUsageBelt
00026870 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002cf64 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002cf6c l     O .rwdata	00000006 _ZL14pstrUsageGlove
0002687c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00026888 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00026894 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
000268a0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002cf74 l     O .rwdata	00000005 _ZL13pstrUsageVest
000268ac l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
000268b8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
000268c4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
000268d4 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
000268e4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
000268f0 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
000268fc l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002cf7c l     O .rwdata	00000004 _ZL12pstrUsageOar
0002cf80 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002cf88 l     O .rwdata	00000005 _ZL13pstrUsageRate
00026908 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00026914 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00026924 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00026934 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00026944 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00026950 l     O .rodata	0000000b _ZL18pstrUsageStickType
0002695c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002cf90 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002cf98 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002cfa0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002cfa8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002cfb0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002cfb8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002cfc0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002cfc8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002cfd0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002cfd8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002cfe0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002cfe8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00026968 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00026974 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00026980 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002cff0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002cff8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d000 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d008 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d010 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0002698c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0002699c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d018 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d020 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
000269a8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
000269b8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
000269c8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
000269d8 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
000269e8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
000269f8 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00026a08 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00026a18 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00026a28 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d024 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00026a38 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d02c l     O .rwdata	00000005 _ZL13pstrUsageBump
00026a48 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00026a54 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d034 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00026a60 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00026a6c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d03c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00026a78 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00026a88 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00026a94 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00026aa0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00026aac l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00026ac0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00026ad0 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00026ae0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00026aec l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00026af8 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00026b10 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00026b24 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00026b3c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00026b50 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00026b5c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00026b68 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d044 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d04c l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d054 l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d058 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d060 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d064 l     O .rwdata	00000005 _ZL13pstrUsageMute
00026b74 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00026b80 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00026b90 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d06c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00026ba0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00026bb0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d074 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d07c l     O .rwdata	00000007 _ZL15pstrUsageStereo
00026bbc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00026bd0 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d084 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d088 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00026bdc l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00026bf0 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d08c l     O .rwdata	00000005 _ZL13pstrUsageRing
00026bfc l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00026c08 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d094 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d09c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d0a4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d0ac l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00026c14 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d0b4 l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d0bc l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00026c20 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00026c2c l     O .rodata	0000000b _ZL18pstrUsageNightMode
00026c38 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00026c44 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d0c0 l     O .rwdata	00000005 _ZL19pstrUsageConference
00026c50 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d0c8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d0d0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d0d8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00026c5c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d0e0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d0e8 l     O .rwdata	00000006 _ZL14pstrUsageReady
00026c68 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00026c74 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d0f0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d0f8 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d0fc l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d100 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d108 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00026c80 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d110 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d118 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d120 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d124 l     O .rwdata	00000006 _ZL14pstrUsageError
00026c8c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00026c9c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00026cb0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d12c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00026cc8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00026cd4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00026ce4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d134 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00026cf4 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00026d04 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00026d18 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00026d2c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00026d40 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00026d54 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d13c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00026d64 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00026d70 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d144 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00026d7c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00026d88 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d14c l     O .rwdata	00000006 _ZL14pstrUsagePhone
00026d98 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00026da4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d154 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d15c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00026db0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00026dbc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d164 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d16c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d174 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d17c l     O .rwdata	00000007 _ZL15pstrUsageRedial
00026dc8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d184 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d18c l     O .rwdata	00000005 _ZL13pstrUsagePark
00026dd4 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00026de0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d194 l     O .rwdata	00000005 _ZL13pstrUsageLine
00026dec l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00026df8 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00026e04 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00026e10 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00026e1c l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d19c l     O .rwdata	00000005 _ZL13pstrUsageSend
00026e28 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00026e34 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00026e40 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00026e4c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00026e58 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00026e64 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d1a4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
00026e74 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
00026e84 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00026e98 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00026eac l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00026ec0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
00026ed4 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
00026ee4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
00026ef4 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00026f08 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
00026f18 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
00026f28 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
00026f38 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
00026f44 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
00026f50 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
00026f5c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d1a8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d1b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d1b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d1b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d1bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d1c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d1c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d1c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d1cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d1d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d1d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d1d8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d1dc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d1e0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d1e4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d1e8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d1ec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
00026f70 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00026f80 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00026f8c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00026f98 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d1f0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d1f4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d1fc l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d204 l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d20c l     O .rwdata	00000006 _ZL14pstrUsageSleep
00026fa4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00026fb0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d214 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00026fbc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d21c l     O .rwdata	00000005 _ZL13pstrUsageMenu
00026fc8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d224 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
00026fd4 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00026fe0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00026fec l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00026ff8 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
00027004 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
00027014 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
00027024 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
00027030 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0002703c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d22c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0002704c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0002705c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d234 l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d23c l     O .rwdata	00000004 _ZL18pstrUsageSelection
00027068 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
00027074 l     O .rodata	0000000a _ZL17pstrUsageModeStep
00027080 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0002708c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0002709c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d240 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d248 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
000270a8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
000270b8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
000270c4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
000270d0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
000270dc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
000270e8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
000270f4 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00027100 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00027110 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0002711c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
00027128 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
00027134 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d250 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d258 l     O .rwdata	00000005 _ZL13pstrUsageHelp
00027144 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
00027154 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
00027160 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0002716c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0002717c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0002718c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d260 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d268 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0002719c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d270 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d278 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d280 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d288 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d290 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
000271a8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
000271b4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002d298 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002d2a0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
000271c0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
000271cc l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
000271d8 l     O .rodata	00000009 _ZL17pstrUsageTracking
000271e4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
000271f0 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002d2a8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
000271fc l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002d2b0 l     O .rwdata	00000005 _ZL13pstrUsageMark
00027208 l     O .rodata	00000009 _ZL18pstrUsageClearMark
00027214 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
00027220 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0002722c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0002723c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
00027250 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
00027260 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
00027270 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0002727c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00027288 l     O .rodata	0000000b _ZL18pstrUsageStopEject
00027294 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
000272a0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002d2b8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002d2bc l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002d2c4 l     O .rwdata	00000005 _ZL13pstrUsageBass
0002d2cc l     O .rwdata	00000007 _ZL15pstrUsageTreble
000272ac l     O .rodata	0000000b _ZL18pstrUsageBassBoost
000272b8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002d2d4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002d2dc l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002d2e0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002d2e8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002d2f0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
000272c4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
000272d0 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
000272dc l     O .rodata	0000000a _ZL17pstrUsageLongPlay
000272e8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002d2f8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
000272f4 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00027300 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0002730c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
00027318 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
00027328 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
00027338 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
00027344 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
00027350 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0002735c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002d300 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002d308 l     O .rwdata	00000007 _ZL15pstrUsageMotion
00027368 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
00027374 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002d310 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00027380 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00027390 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
000273a0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
000273ac l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
000273b8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
000273c4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002d318 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002d320 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
000273d0 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
000273dc l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
000273e8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
000273f4 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002d328 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
00027404 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00027410 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002d330 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002d338 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002d340 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
00027420 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0002742c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
00027438 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
00027444 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
00027450 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
00027460 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
00027474 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00027480 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
00027494 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
000274a4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
000274b0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
000274c0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
000274d0 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
000274e0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
000274ec l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
000274fc l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00027508 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
00027518 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
00027528 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
00027538 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
00027548 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0002755c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002d348 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0002756c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00027580 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
00027594 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
000275a4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
000275b4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
000275c4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
000275d0 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
000275dc l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
000275e8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
000275f4 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00027600 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00027610 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
00027628 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
00027634 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
00027640 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0002764c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
00027658 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
00027664 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
00027670 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
00027684 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002d350 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00027690 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002d358 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0002769c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
000276a8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
000276b8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
000276c4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
000276d4 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
000276e4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
000276f4 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00027700 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0002770c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
00027718 l     O .rodata	00000009 _ZL16pstrUsageALClock
00027724 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
00027734 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
00027740 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0002774c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
00027758 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
00027764 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00027778 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00027788 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
00027794 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
000277a8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
000277b4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
000277c4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
000277d8 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
000277ec l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00027800 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00027810 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
00027828 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0002783c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0002784c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0002785c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002d360 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002d368 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
00027870 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002d370 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002d378 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002d380 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002d388 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0002787c l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002d390 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002d398 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002d3a0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002d3a8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00027888 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00027894 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002d3b0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
000278a0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
000278b0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002d3b8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002d3c0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002d3c8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002d3d0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002d3d8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
000278bc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
000278c8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
000278d8 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
000278e8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002d3e0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
000278f4 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00027900 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0002790c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002d3e8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00027918 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00027924 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00027934 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00027940 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00027950 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00027960 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0002796c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00027978 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002d3f0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00027988 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00027994 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
000279a4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002d3f8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002d400 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002d408 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002d410 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
000279b4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
000279c0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002d418 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
000279cc l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
000279d8 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
000279e4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
000279f0 l     O .rodata	0000000a _ZL17pstrUsageACResize
000279fc l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00027a08 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00027a14 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00027a20 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00027a2c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00027a38 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00027a44 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00027a50 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00027a60 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00027a70 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00027a80 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00027a90 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00027a9c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00027aac l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00027ab8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00027ac8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00027ad8 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00027ae8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00027af4 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00027b00 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00027b0c l     O .rodata	0000000b _ZL18pstrUsageACPromote
00027b18 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002d420 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002d428 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00027b24 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002d430 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002d438 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00027b30 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002d440 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00027b3c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00027b4c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00027b58 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00027b68 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00027b78 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00027b88 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002d448 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002d450 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00027b94 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002d458 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00027ba0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00027bac l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00027bbc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00027bc8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00027bd8 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00027be4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00027bf0 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00027bfc l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00027c08 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00027c14 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00027c20 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002d460 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002d468 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00027c2c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00027c38 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002d470 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00027c48 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00027c54 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00027c60 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00027c70 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00027c80 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00027c8c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00027c98 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00027ca4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002d478 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00027cb0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00027cbc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00027cc8 l     O .rodata	00000009 _ZL16pstrUsageACReply
00027cd4 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00027ce4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002d480 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00027cf0 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002d488 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002d490 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00027cfc l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00027d08 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00027d14 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00027d20 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00027d2c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00027d38 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00027d44 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00027d50 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00027d5c l     O .rodata	0000000a _ZL17pstrUsageACRename
00027d68 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00027d74 l     O .rodata	00000009 _ZL16pstrUsageACSplit
00027d80 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00027d8c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00027d98 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002d498 l     O .rwdata	00000004 _ZL12pstrUsagePen
00027da4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
00027db0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00027dbc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00027dc8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00027dd4 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002d49c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00027de4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002d4a4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00027df0 l     O .rodata	00000009 _ZL17pstrUsageArmature
00027dfc l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00027e10 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002d4ac l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002d4b4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002d4bc l     O .rwdata	00000007 _ZL15pstrUsageFinger
00027e20 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00027e2c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00027e38 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002d4c4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002d4cc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002d4d4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0002d4d8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00027e44 l     O .rodata	0000000b _ZL18pstrUsageDataValid
00027e50 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00027e60 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00027e70 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002d4e0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002d4e8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002d4f0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002d4f8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
00027e80 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002d500 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002d508 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
00027e8c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002d510 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002d518 l     O .rwdata	00000007 _ZL15pstrUsageEraser
00027e98 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
00027ea4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
00027eb4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
00027ec0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
00027ed0 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
00027edc l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
00027eec l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
00027ef8 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
00027f08 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
00027f14 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
00027f24 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
00027f34 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
00027f40 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
00027f4c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
00027f58 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
00027f64 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
00027f70 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
00027f7c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
00027f88 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
00027f98 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
00027fa8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002d520 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002d524 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002d528 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002d530 l     O .rwdata	00000005 _ZL16pstrUsageColumns
00027fb4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
00027fc0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
00027fcc l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
00027fd8 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002d538 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
00027fe4 l     O .rodata	00000009 _ZL17pstrUsageFontData
00027ff0 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
00027ffc l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
00028008 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
00028018 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
00028028 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
00028038 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
00028044 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
00028050 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002805c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
00028068 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
00028074 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
00028080 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002808c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
00028098 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
000280a4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
000280b4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
000280c4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
000280d4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
000280e0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
000280ec l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
000280fc l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002d540 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
00028108 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
00028118 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
00028128 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
00028134 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
00028140 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
00028150 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
00028160 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
00028170 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
00028180 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002818c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
00028198 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
000281a4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
000281b4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
000281c4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
000281d4 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
000281e4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002d548 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002d550 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
000281f4 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002d558 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002d560 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002d568 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002d570 l     O .rwdata	00000006 _ZL14pstrUsagePrint
00028200 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002d578 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002820c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002d580 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002d588 l     O .rwdata	00000006 _ZL14pstrUsageDepth
00028218 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
00028228 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
00028238 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
00028248 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
00028254 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
00028260 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
00028274 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
00028288 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002829c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
000282b0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
000282c0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
000282d0 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
000282dc l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
000282e8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
000282f8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0002d58e l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d58f l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d590 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d591 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0002d594 l     O .rwdata	00000001 _ZL9SPI_MODE0
0002d595 l     O .rwdata	00000001 _ZL9SPI_MODE1
0002d596 l     O .rwdata	00000001 _ZL9SPI_MODE2
0002d597 l     O .rwdata	00000001 _ZL9SPI_MODE3
0002d598 l     O .rwdata	00000002 _ZL9pstrSpace
0002d59c l     O .rwdata	00000003 _ZL8pstrCRLF
0002d5a0 l     O .rwdata	00000002 _ZL13pstrSingleTab
0002d5a4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0002d5a8 l     O .rwdata	00000004 _ZL13pstrTripleTab
0002d5ac l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
000283d8 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
000283ec l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
000283f8 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
00028404 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
00028410 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0002841c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0002842c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0002d5b4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0002d5bc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0002d5c4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0002d5cc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
00028438 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
00028444 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0002d5d0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0002d5d4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
00028450 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
00028460 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0002d5dc l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0002d5e4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
00028470 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0002d5ec l     O .rwdata	00000006 _ZL18pstrUsagePageScale
00028480 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0002d5f4 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
00028498 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0002d5f8 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
000284a4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
000284b0 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0002d600 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0002d608 l     O .rwdata	00000006 _ZL14pstrUsageMouse
000284bc l     O .rodata	00000009 _ZL17pstrUsageJoystick
000284c8 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0002d610 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0002d618 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
000284d4 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
000284e4 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0002d620 l     O .rwdata	00000002 _ZL10pstrUsageX
0002d624 l     O .rwdata	00000002 _ZL10pstrUsageY
0002d628 l     O .rwdata	00000002 _ZL10pstrUsageZ
0002d62c l     O .rwdata	00000003 _ZL11pstrUsageRx
0002d630 l     O .rwdata	00000003 _ZL11pstrUsageRy
0002d634 l     O .rwdata	00000003 _ZL11pstrUsageRz
0002d638 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0002d640 l     O .rwdata	00000005 _ZL13pstrUsageDial
0002d648 l     O .rwdata	00000006 _ZL14pstrUsageWheel
000284f8 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
00028504 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
00028510 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0002851c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0002d650 l     O .rwdata	00000006 _ZL14pstrUsageStart
0002d658 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0002d65c l     O .rwdata	00000003 _ZL11pstrUsageVx
0002d660 l     O .rwdata	00000003 _ZL11pstrUsageVy
0002d664 l     O .rwdata	00000003 _ZL11pstrUsageVz
0002d668 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0002d670 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0002d678 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0002d680 l     O .rwdata	00000004 _ZL12pstrUsageVno
0002852c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0002853c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
00028548 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
00028554 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
00028564 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
00028570 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
0002857c l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
00028590 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
000285a0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
000285b0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
000285c0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
000285d0 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
000285e0 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
000285f0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
00028600 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0002860c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0002861c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
00028630 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
00028644 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
00028650 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
0002865c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
00028668 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
00028674 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
00028680 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
0002868c l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
00028698 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
000286a4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
000286b0 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
000286bc l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
000286c8 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
000286d8 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
000286e4 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
000286f4 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
00028704 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
00028714 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
00028724 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
00028734 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
0002874c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
00028764 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
0002877c l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
0002878c l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
0002879c l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
000287ac l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
000287bc l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
000287cc l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
000287dc l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
000287ec l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
000287fc l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0002880c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0002881c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
00028834 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
00028844 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
00028858 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
00028868 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
00028874 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
00028880 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
0002888c l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0002d684 l     O .rwdata	00000008 _ZL16pstrUsageAileron
00028898 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
000288a8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
000288bc l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
000288d0 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
000288e0 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
000288f0 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
000288fc l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
00028910 l     O .rodata	00000009 _ZL17pstrUsageElevator
0002891c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0002d68c l     O .rwdata	00000007 _ZL15pstrUsageRudder
0002892c l     O .rodata	00000009 _ZL17pstrUsageThrottle
00028938 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
00028944 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
00028954 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
00028964 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0002d694 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
00028970 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
0002897c l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
00028988 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0002d69c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0002d6a4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0002d6ac l     O .rwdata	00000007 _ZL15pstrUsageClutch
0002d6b4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
00028994 l     O .rodata	00000009 _ZL17pstrUsageSteering
000289a0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
000289ac l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
000289b8 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0002d6bc l     O .rwdata	00000008 _ZL16pstrUsageBallast
000289c4 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
000289d4 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
000289e0 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
000289ec l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0002d6c4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
000289f8 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0002d6cc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0002d6d4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
00028a04 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
00028a10 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
00028a1c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
00028a28 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0002d6dc l     O .rwdata	00000005 _ZL13pstrUsageVest
00028a34 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
00028a40 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
00028a4c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
00028a5c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
00028a6c l     O .rodata	0000000a _ZL17pstrUsageGolfClub
00028a78 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
00028a84 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0002d6e4 l     O .rwdata	00000004 _ZL12pstrUsageOar
0002d6e8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0002d6f0 l     O .rwdata	00000005 _ZL13pstrUsageRate
00028a90 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
00028a9c l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
00028aac l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
00028abc l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
00028acc l     O .rodata	0000000c _ZL19pstrUsageStickTempo
00028ad8 l     O .rodata	0000000b _ZL18pstrUsageStickType
00028ae4 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0002d6f8 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0002d700 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0002d708 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0002d710 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0002d718 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0002d720 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0002d728 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0002d730 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0002d738 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0002d740 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0002d748 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0002d750 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
00028af0 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
00028afc l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
00028b08 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0002d758 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0002d760 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0002d768 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0002d770 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0002d778 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
00028b14 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
00028b24 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0002d780 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0002d788 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
00028b30 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
00028b40 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
00028b50 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
00028b60 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
00028b70 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
00028b80 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
00028b90 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
00028ba0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
00028bb0 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0002d78c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
00028bc0 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0002d794 l     O .rwdata	00000005 _ZL13pstrUsageBump
00028bd0 l     O .rodata	00000009 _ZL16pstrUsageNewGame
00028bdc l     O .rodata	0000000b _ZL18pstrUsageShootBall
0002d79c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
00028be8 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
00028bf4 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0002d7a4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
00028c00 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
00028c10 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
00028c1c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
00028c28 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
00028c34 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
00028c48 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
00028c58 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
00028c68 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
00028c74 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
00028c80 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
00028c98 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
00028cac l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
00028cc4 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
00028cd8 l     O .rodata	00000009 _ZL16pstrUsageNumLock
00028ce4 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
00028cf0 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0002d7ac l     O .rwdata	00000008 _ZL16pstrUsageCompose
0002d7b4 l     O .rwdata	00000005 _ZL13pstrUsageKana
0002d7bc l     O .rwdata	00000004 _ZL14pstrUsagePower
0002d7c0 l     O .rwdata	00000006 _ZL14pstrUsageShift
0002d7c8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0002d7cc l     O .rwdata	00000005 _ZL13pstrUsageMute
00028cfc l     O .rodata	0000000a _ZL19pstrUsageToneEnable
00028d08 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
00028d18 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0002d7d4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
00028d28 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
00028d38 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0002d7dc l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0002d7e4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
00028d44 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
00028d58 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0002d7ec l     O .rwdata	00000004 _ZL12pstrUsageCAV
0002d7f0 l     O .rwdata	00000004 _ZL12pstrUsageCLV
00028d64 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
00028d78 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0002d7f4 l     O .rwdata	00000005 _ZL13pstrUsageRing
00028d84 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
00028d90 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0002d7fc l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0002d804 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0002d80c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0002d814 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
00028d9c l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0002d81c l     O .rwdata	00000005 _ZL13pstrUsageHold
0002d824 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
00028da8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
00028db4 l     O .rodata	0000000b _ZL18pstrUsageNightMode
00028dc0 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
00028dcc l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0002d828 l     O .rwdata	00000005 _ZL19pstrUsageConference
00028dd8 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0002d830 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0002d838 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0002d840 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
00028de4 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0002d848 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0002d850 l     O .rwdata	00000006 _ZL14pstrUsageReady
00028df0 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
00028dfc l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0002d858 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0002d860 l     O .rwdata	00000004 _ZL16pstrUsageForward
0002d864 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0002d868 l     O .rwdata	00000005 _ZL13pstrUsageStop
0002d870 l     O .rwdata	00000007 _ZL15pstrUsageRewind
00028e08 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0002d878 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0002d880 l     O .rwdata	00000006 _ZL14pstrUsagePause
0002d888 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0002d88c l     O .rwdata	00000006 _ZL14pstrUsageError
00028e14 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
00028e24 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
00028e38 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0002d894 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
00028e50 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
00028e5c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
00028e6c l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0002d89c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
00028e7c l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
00028e8c l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
00028ea0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
00028eb4 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
00028ec8 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
00028edc l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0002d8a4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
00028eec l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
00028ef8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0002d8ac l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
00028f04 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
00028f10 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0002d8b4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
00028f20 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
00028f2c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0002d8bc l     O .rwdata	00000008 _ZL16pstrUsageHandset
0002d8c4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
00028f38 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
00028f44 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0002d8cc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0002d8d4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0002d8dc l     O .rwdata	00000008 _ZL16pstrUsageFeature
0002d8e4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
00028f50 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0002d8ec l     O .rwdata	00000005 _ZL13pstrUsageDrop
0002d8f4 l     O .rwdata	00000005 _ZL13pstrUsagePark
00028f5c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
00028f68 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0002d8fc l     O .rwdata	00000005 _ZL13pstrUsageLine
00028f74 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
00028f80 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
00028f8c l     O .rodata	00000009 _ZL19pstrUsageRingSelect
00028f98 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
00028fa4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0002d904 l     O .rwdata	00000005 _ZL13pstrUsageSend
00028fb0 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
00028fbc l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
00028fc8 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
00028fd4 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
00028fe0 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
00028fec l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0002d90c l     O .rwdata	00000004 _ZL16pstrUsageMessage
00028ffc l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0002900c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
00029020 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
00029034 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
00029048 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0002905c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0002906c l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0002907c l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
00029090 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
000290a0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
000290b0 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
000290c0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
000290cc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
000290d8 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
000290e4 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0002d910 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0002d918 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0002d91c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0002d920 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0002d924 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0002d928 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0002d92c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0002d930 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0002d934 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0002d938 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0002d93c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0002d940 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0002d944 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0002d948 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0002d94c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0002d950 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0002d954 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
000290f8 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
00029108 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
00029114 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
00029120 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0002d958 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0002d95c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0002d964 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0002d96c l     O .rwdata	00000006 _ZL14pstrUsageReset
0002d974 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0002912c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
00029138 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0002d97c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
00029144 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0002d984 l     O .rwdata	00000005 _ZL13pstrUsageMenu
00029150 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0002d98c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0002915c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
00029168 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
00029174 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
00029180 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0002918c l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0002919c l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
000291ac l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
000291b8 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
000291c4 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0002d994 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
000291d4 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
000291e4 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0002d99c l     O .rwdata	00000006 _ZL14pstrUsageStill
0002d9a4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
000291f0 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
000291fc l     O .rodata	0000000a _ZL17pstrUsageModeStep
00029208 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
00029214 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
00029224 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0002d9a8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0002d9b0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
00029230 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
00029240 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0002924c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
00029258 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
00029264 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
00029270 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0002927c l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
00029288 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
00029298 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
000292a4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
000292b0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
000292bc l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0002d9b8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0002d9c0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
000292cc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
000292dc l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
000292e8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
000292f4 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
00029304 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
00029314 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0002d9c8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0002d9d0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
00029324 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0002d9d8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0002d9e0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0002d9e8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0002d9f0 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0002d9f8 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
00029330 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0002933c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0002da00 l     O .rwdata	00000006 _ZL14pstrUsageEject
0002da08 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
00029348 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
00029354 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
00029360 l     O .rodata	00000009 _ZL17pstrUsageTracking
0002936c l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
00029378 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0002da10 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
00029384 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0002da18 l     O .rwdata	00000005 _ZL13pstrUsageMark
00029390 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0002939c l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
000293a8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
000293b4 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
000293c4 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
000293d8 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
000293e8 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
000293f8 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
00029404 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
00029410 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0002941c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
00029428 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0002da20 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0002da24 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0002da2c l     O .rwdata	00000005 _ZL13pstrUsageBass
0002da34 l     O .rwdata	00000007 _ZL15pstrUsageTreble
00029434 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
00029440 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0002da3c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0002da44 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0002da48 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0002da50 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0002da58 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0002944c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
00029458 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
00029464 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
00029470 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0002da60 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0002947c l     O .rodata	00000009 _ZL18pstrUsageFanEnable
00029488 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
00029494 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
000294a0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
000294b0 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
000294c0 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
000294cc l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
000294d8 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
000294e4 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0002da68 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0002da70 l     O .rwdata	00000007 _ZL15pstrUsageMotion
000294f0 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
000294fc l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0002da78 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
00029508 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
00029518 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
00029528 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
00029534 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
00029540 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0002954c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0002da80 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0002da88 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
00029558 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
00029564 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
00029570 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0002957c l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0002da90 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0002958c l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
00029598 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0002da98 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0002daa0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0002daa8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
000295a8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
000295b4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
000295c0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
000295cc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
000295d8 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
000295e8 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
000295fc l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
00029608 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0002961c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0002962c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
00029638 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
00029648 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
00029658 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
00029668 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
00029674 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
00029684 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
00029690 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
000296a0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
000296b0 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
000296c0 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
000296d0 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
000296e4 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0002dab0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
000296f4 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
00029708 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0002971c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0002972c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0002973c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0002974c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
00029758 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
00029764 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
00029770 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0002977c l     O .rodata	0000000a _ZL17pstrUsageALLogoff
00029788 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
00029798 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
000297b0 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
000297bc l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
000297c8 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
000297d4 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
000297e0 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
000297ec l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
000297f8 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0002980c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0002dab8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
00029818 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0002dac0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
00029824 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
00029830 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
00029840 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0002984c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0002985c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0002986c l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0002987c l     O .rodata	0000000b _ZL21pstrUsageALEncryption
00029888 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
00029894 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
000298a0 l     O .rodata	00000009 _ZL16pstrUsageALClock
000298ac l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
000298bc l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
000298c8 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
000298d4 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
000298e0 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
000298ec l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
00029900 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
00029910 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0002991c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
00029930 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0002993c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0002994c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
00029960 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
00029974 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
00029988 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
00029998 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
000299b0 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
000299c4 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
000299d4 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
000299e4 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0002dac8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0002dad0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
000299f8 l     O .rodata	00000009 _ZL16pstrUsageACClose
0002dad8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0002dae0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0002dae8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0002daf0 l     O .rwdata	00000008 _ZL15pstrUsageACSave
00029a04 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0002daf8 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0002db00 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0002db08 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0002db10 l     O .rwdata	00000007 _ZL14pstrUsageACCut
00029a10 l     O .rodata	00000009 _ZL16pstrUsageACPaste
00029a1c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0002db18 l     O .rwdata	00000008 _ZL15pstrUsageACFind
00029a28 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
00029a38 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0002db20 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0002db28 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0002db30 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0002db38 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0002db40 l     O .rwdata	00000008 _ZL15pstrUsageACStop
00029a44 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
00029a50 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
00029a60 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
00029a70 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0002db48 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
00029a7c l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
00029a88 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
00029a94 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0002db50 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
00029aa0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
00029aac l     O .rodata	0000000d _ZL21pstrUsageACNormalView
00029abc l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
00029ac8 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
00029ad8 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
00029ae8 l     O .rodata	0000000a _ZL17pstrUsageACScroll
00029af4 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
00029b00 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0002db58 l     O .rwdata	00000007 _ZL14pstrUsageACPan
00029b10 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
00029b1c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
00029b2c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0002db60 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0002db68 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0002db70 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0002db78 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
00029b3c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
00029b48 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0002db80 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
00029b54 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
00029b60 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
00029b6c l     O .rodata	0000000a _ZL17pstrUsageACRotate
00029b78 l     O .rodata	0000000a _ZL17pstrUsageACResize
00029b84 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
00029b90 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
00029b9c l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
00029ba8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
00029bb4 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
00029bc0 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
00029bcc l     O .rodata	0000000c _ZL19pstrUsageACFontSize
00029bd8 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
00029be8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
00029bf8 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
00029c08 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
00029c18 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
00029c24 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
00029c34 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
00029c40 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
00029c50 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
00029c60 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
00029c70 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
00029c7c l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
00029c88 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
00029c94 l     O .rodata	0000000b _ZL18pstrUsageACPromote
00029ca0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0002db88 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0002db90 l     O .rwdata	00000006 _ZL13pstrUsageACNo
00029cac l     O .rodata	0000000a _ZL17pstrUsageACCancel
0002db98 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0002dba0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
00029cb8 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0002dba8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
00029cc4 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
00029cd4 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
00029ce0 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
00029cf0 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
00029d00 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
00029d10 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0002dbb0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0002dbb8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
00029d1c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0002dbc0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
00029d28 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
00029d34 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
00029d44 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
00029d50 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
00029d60 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
00029d6c l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
00029d78 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
00029d84 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
00029d90 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
00029d9c l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
00029da8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0002dbc8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0002dbd0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
00029db4 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
00029dc0 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0002dbd8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
00029dd0 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
00029ddc l     O .rodata	0000000c _ZL20pstrUsageACViewClock
00029de8 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
00029df8 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
00029e08 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
00029e14 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
00029e20 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
00029e2c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0002dbe0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
00029e38 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
00029e44 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
00029e50 l     O .rodata	00000009 _ZL16pstrUsageACReply
00029e5c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
00029e6c l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0002dbe8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
00029e78 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0002dbf0 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0002dbf8 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
00029e84 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
00029e90 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
00029e9c l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
00029ea8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
00029eb4 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
00029ec0 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
00029ecc l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
00029ed8 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
00029ee4 l     O .rodata	0000000a _ZL17pstrUsageACRename
00029ef0 l     O .rodata	00000009 _ZL16pstrUsageACMerge
00029efc l     O .rodata	00000009 _ZL16pstrUsageACSplit
00029f08 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
00029f14 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
00029f20 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0002dc00 l     O .rwdata	00000004 _ZL12pstrUsagePen
00029f2c l     O .rodata	0000000a _ZL17pstrUsageLightPen
00029f38 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
00029f44 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
00029f50 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
00029f5c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0002dc04 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
00029f6c l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0002dc0c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
00029f78 l     O .rodata	00000009 _ZL17pstrUsageArmature
00029f84 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
00029f98 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0002dc14 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0002dc1c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0002dc24 l     O .rwdata	00000007 _ZL15pstrUsageFinger
00029fa8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
00029fb4 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
00029fc0 l     O .rodata	00000009 _ZL16pstrUsageInRange
0002dc2c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0002dc34 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0002dc3c l     O .rwdata	00000004 _ZL12pstrUsageTap
0002dc40 l     O .rwdata	00000005 _ZL16pstrUsageQuality
00029fcc l     O .rodata	0000000b _ZL18pstrUsageDataValid
00029fd8 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
00029fe8 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
00029ff8 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0002dc48 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0002dc50 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0002dc58 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0002dc60 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0002a008 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0002dc68 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0002dc70 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0002a014 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0002dc78 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0002dc80 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0002a020 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0002a02c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0002a03c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0002a048 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0002a058 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0002a064 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0002a074 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0002a080 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0002a090 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0002a09c l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0002a0ac l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0002a0bc l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0002a0c8 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0002a0d4 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0002a0e0 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0002a0ec l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0002a0f8 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0002a104 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0002a110 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0002a120 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0002a130 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0002dc88 l     O .rwdata	00000004 _ZL12pstrUsageRow
0002dc8c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0002dc90 l     O .rwdata	00000005 _ZL13pstrUsageRows
0002dc98 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0002a13c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0002a148 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0002a154 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0002a160 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0002dca0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0002a16c l     O .rodata	00000009 _ZL17pstrUsageFontData
0002a178 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0002a184 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0002a190 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0002a1a0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0002a1b0 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0002a1c0 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0002a1cc l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0002a1d8 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0002a1e4 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0002a1f0 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0002a1fc l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0002a208 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0002a214 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0002a220 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0002a22c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0002a23c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0002a24c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0002a25c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0002a268 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0002a274 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0002a284 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0002dca8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0002a290 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0002a2a0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0002a2b0 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0002a2bc l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0002a2c8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0002a2d8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0002a2e8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0002a2f8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0002a308 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0002a314 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0002a320 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0002a32c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0002a33c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0002a34c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0002a35c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0002a36c l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0002dcb0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0002dcb8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0002a37c l     O .rodata	0000000b _ZL18pstrUsageClipStore
0002dcc0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0002dcc8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0002dcd0 l     O .rwdata	00000005 _ZL13pstrUsageSave
0002dcd8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0002a388 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0002dce0 l     O .rwdata	00000005 _ZL13pstrUsageCine
0002a394 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0002dce8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0002dcf0 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0002a3a0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0002a3b0 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0002a3c0 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0002a3d0 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0002a3dc l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0002a3e8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0002a3fc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0002a410 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0002a424 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0002a438 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0002a448 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0002a458 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0002a464 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0002a470 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0002a480 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
0002a48e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
0002a49e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0002dcf8 l     O .rwdata	00000004 _ZL4keys
0002dcfc l     O .rwdata	00000004 _ZL4adsr
0000a254 l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
0000a2bc l     F .text	00000030 _GLOBAL__sub_I_Usb
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000b4f0 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000b594 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0000b7a0 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000b7f4 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0000b880 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000b9b4 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000ba3c l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0000bc68 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0000c540 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000c828 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
000310d0 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0000c8e0 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000ca90 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00030f6c l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000dd40 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00030f74 l     O .bss	00000004 fc_static
0000de58 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000df18 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0002ab84 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a962 l     O .rodata	00000010 zeroes.4389
0002a972 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a982 l     O .rodata	00000010 zeroes.4404
00013a78 l     F .text	000000bc __sbprintf
0002a992 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00013c88 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000157e0 l     F .text	00000008 __fp_unlock
000157f4 l     F .text	0000019c __sinit.part.1
00015990 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002b3d0 l     O .rwdata	00000020 lc_ctype_charset
0002b3b0 l     O .rwdata	00000020 lc_message_charset
0002b3f0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002a9c0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002aae4 l     O .rodata	00000010 zeroes.4333
0002aaf4 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
00019990 l     F .text	000000fc __sprint_r.part.0
0002ab04 l     O .rodata	00000010 zeroes.4349
0001afcc l     F .text	000000bc __sbprintf
0002ab14 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001edd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001eee8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001ef48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001f05c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001f144 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001f2b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001f39c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001f578 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002dd58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0001f7ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001f8d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001fa0c l     F .text	00000034 alt_dev_reg
0002b5d0 l     O .rwdata	00000038 i2c_0
0002b608 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0001faec l     F .text	00000110 optional_irq_callback
0001fc4c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021928 l     F .text	0000020c altera_avalon_jtag_uart_irq
00021b34 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00022368 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022700 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022bf0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022d50 l     F .text	0000003c alt_get_errno
00022d8c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00030fac g     O .bss	00000004 alt_instruction_exception_handler
0000c9e8 g     F .text	00000028 __cxa_free_exception
00023c58  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0000ee40 g     F .text	00000018 putchar
0000b044 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00017a2c g     F .text	00000074 _mprec_log10
00004518  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0000b490 g     F .text	00000018 _ZSt10unexpectedv
00017b18 g     F .text	0000008c __any_on
0001b6d8 g     F .text	00000054 _isatty_r
0002a9cc g     O .rodata	00000028 __mprec_tinytens
0001f4b4 g     F .text	0000007c alt_main
00006940 g     F .text	000001ac _Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt
0000ee58 g     F .text	000000c0 _puts_r
00000704 g     F .text	00000058 _ZN3USBC1Ev
00031108 g     O .bss	00000100 alt_irq
0000cb84 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0000936c g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
0001b72c g     F .text	00000060 _lseek_r
0000dfd4 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002dd70 g       *ABS*	00000000 __flash_rwdata_start
000062e0 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0001d810 g     F .text	00000088 .hidden __eqdf2
00004518  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
000025a4 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0000c614 g     F .text	00000084 __cxa_rethrow
0000df60 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0000b4cc g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00006b84 g     F .text	0000006c _Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s
0000dfc4 g     F .text	00000010 .hidden _Unwind_GetIP
00031208 g       *ABS*	00000000 __alt_heap_start
00008cac  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0000f224 g     F .text	0000005c _kill_r
00006ef0 g     F .text	00000180 _ZN9USBH_MIDIC2EP3USB
0000edfc g     F .text	0000003c printf
00023c7c  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0001b7ec g     F .text	0000009c _wcrtomb_r
0000efec g     F .text	00000084 _signal_r
00006068  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
000183bc g     F .text	0000005c __sseek
00015b40 g     F .text	00000010 __sinit
0001b088 g     F .text	00000140 __swbuf_r
000099e0 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0000ca64 g     F .text	0000002c __cxa_free_dependent_exception
0000a398 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
000044b8  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
00016614 g     F .text	0000007c _setlocale_r
0002a5a8  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00015998 g     F .text	00000078 __sfmoreglue
00020344 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001f554 g     F .text	00000024 __malloc_unlock
0000528c g     F .text	00000080 _Z8set_notehh
0000cb84 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
000085fc g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0000adcc g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008d94  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
0000203c g     F .text	000003a8 _ZN3USB11ConfiguringEhhb
0000c808 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000cdd0 g     F .text	00000440 .hidden __divsf3
0002155c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00001dac g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
00009db4 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0000b0c0 g     F .text	00000020 __cxa_deleted_virtual
000200c8 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00002a14  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
00008e58 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
000097f0 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
00016990 g     F .text	0000015c memmove
00005d84  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0000cb5c g     F .text	00000004 _ZNSt9exceptionD2Ev
00015b28 g     F .text	00000018 _cleanup
0000a050 g     F .text	00000088 _Z7controlv
00020dac g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00016aec g     F .text	000000a8 _Balloc
0000dbe0 g     F .text	00000070 .hidden __fixsfsi
00003b18 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0001d898 g     F .text	000000dc .hidden __gtdf2
00003bdc g     F .text	000000f8 _ZN7XBOXONE4PollEv
0002a7dc  w    O .rodata	00000014 _ZTVSt13bad_exception
000233e0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
0001f828 g     F .text	00000078 times
00008d14  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0000e010 g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002c684  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008580 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
00000390 g     F .text	0000003c _ZN6SPI_SS3SetEh
000049e4  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0001b67c g     F .text	0000005c _fstat_r
000094bc g     F .text	0000008c _ZN8MAX3421e5regWrEhh
00000a10 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
00030f84 g     O .bss	00000004 errno
00005ac4 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
00018338 g     F .text	00000008 __seofread
00009068 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
000185f0 g     F .text	000013a0 ___svfiprintf_internal_r
0000e1ec g     F .text	00000074 .hidden _Unwind_Backtrace
00030f98 g     O .bss	00000004 alt_argv
000031a4 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
00034668 g       *ABS*	00000000 _gp
0001f8a0 g     F .text	00000030 usleep
000215a0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000d6fc g     F .text	000004e4 .hidden __subsf3
00007f0c g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0002ce24  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0001f03c g     F .text	00000020 getpid
0000c310 g     F .text	00000230 __cxa_call_unexpected
0000c698 g     F .text	00000008 __cxa_get_exception_ptr
00020258 g     F .text	00000044 alt_avalon_i2c_is_busy
0002b450 g     O .rwdata	00000180 alt_fd_list
00009218 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
00023bc8  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
00006ef0 g     F .text	00000180 _ZN9USBH_MIDIC1EP3USB
00000684 g     F .text	00000058 _Z5delaym
000042f0 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0000ee38 g     F .text	00000008 _putchar_r
0000e100 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0001fffc g     F .text	000000cc alt_avalon_i2c_master_config_set
00001c4c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0000df90 g     F .text	00000018 .hidden _Unwind_GetCFA
0000b4a8 g     F .text	00000014 _ZSt13set_terminatePFvvE
000228a0 g     F .text	00000090 alt_find_dev
00023bbc  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
00011778 g     F .text	00000008 _times_r
0000eb5c g     F .text	00000148 memcpy
00000788 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
00005e4c  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
000003cc g     F .text	0000003c _ZN6SPI_SS5ClearEh
0000ca10 g     F .text	00000054 __cxa_allocate_dependent_exception
000157e8 g     F .text	0000000c _cleanup_r
0000b158 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0001ec50 g     F .text	000000dc .hidden __floatsidf
00023c70  w    O .rodata	0000000c _ZTV13USBReadParser
00022cd4 g     F .text	0000007c alt_io_redirect
0001d974 g     F .text	000000f4 .hidden __ltdf2
00004838  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
000007ac g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
00023a0c g       *ABS*	00000000 __DTOR_END__
0000b170 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00020bec g     F .text	000001c0 alt_avalon_i2c_master_transmit
0000ef18 g     F .text	00000014 puts
0002a630  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
000235d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007f94 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
000092a0 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00018270 g     F .text	00000074 __fpclassifyd
00009f3c g     F .text	00000114 _Z9MIDI_pollv
00017988 g     F .text	000000a4 __ratio
0001afb0 g     F .text	0000001c __vfiprintf_internal
00007a10 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
00021d2c g     F .text	0000021c altera_avalon_jtag_uart_read
0000e328 g     F .text	00000014 malloc
0000edcc g     F .text	00000030 _printf_r
0000ccec g     F .text	00000064 .hidden __udivsi3
0001f098 g     F .text	000000ac isatty
0000f070 g     F .text	000000bc _raise_r
0000945c g     F .text	0000003c _ZN8MAX3421eC2Ev
0002aa1c g     O .rodata	000000c8 __mprec_tens
00006bf0 g     F .text	000001ac _Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s
00016690 g     F .text	0000000c __locale_charset
00000704 g     F .text	00000058 _ZN3USBC2Ev
000047f0  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0001fe68 g     F .text	00000098 alt_avalon_i2c_enable
00030f80 g     O .bss	00000004 __malloc_top_pad
0000f280 g     F .text	00000004 _getpid_r
00021490 g     F .text	00000068 alt_avalon_i2c_int_disable
00030f64 g     O .bss	00000001 usb_task_state
0002dd38 g     O .rwdata	00000004 __mb_cur_max
000166c0 g     F .text	0000000c _localeconv_r
0000a65c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
00003b48 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
00007070 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
00016f20 g     F .text	0000003c __i2b
00015fc4 g     F .text	000004c8 __sfvwrite_r
0000b2f0 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000f12c g     F .text	000000a8 __sigtramp_r
000082c8 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
00002acc  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0000ef2c g     F .text	00000054 _sbrk_r
0002a678  w    O .rodata	00000020 _ZTVSt9type_info
000048e8  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
00009100 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0001b78c g     F .text	00000060 _read_r
0000cb64 g     F .text	0000000c _ZNKSt9exception4whatEv
0000530c g     F .text	00000048 _Z8set_adsrhm
0002dd50 g     O .rwdata	00000004 alt_max_fd
00006138 g     F .text	00000050 _Z9E_Notifycci
00008408 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0001b370 g     F .text	000000f0 _fclose_r
000157b0 g     F .text	00000030 fflush
00009e4c g     F .text	00000078 _Z6onInitv
00030f7c g     O .bss	00000004 __malloc_max_sbrked_mem
00009768 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
00020fb8 g     F .text	00000210 alt_avalon_i2c_master_receive
0002620c  w    O .rodata	0000000b _ZTS9USBH_MIDI
0001c594 g     F .text	000008ac .hidden __adddf3
0002a5dc  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00004914  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
00008b60 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00017730 g     F .text	0000010c __b2d
0001bfd0 g     F .text	000005c4 .hidden __umoddi3
0001f3d8 g     F .text	000000dc lseek
00005e74  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0000b1b4 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00006290 g     F .text	00000028 _Z8E_Notifyhi
0000b09c g     F .text	00000004 _ZdlPv
000214f8 g     F .text	00000064 alt_avalon_i2c_int_enable
0002dd28 g     O .rwdata	00000004 _global_impure_ptr
0000a66c g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
00017d0c g     F .text	00000564 _realloc_r
00031208 g       *ABS*	00000000 __bss_end
00022b00 g     F .text	000000f0 alt_iic_isr_register
000232d8 g     F .text	00000108 alt_tick
0000035c g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0000df48 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0001b9d4 g     F .text	000005fc .hidden __udivdi3
000213b8 g     F .text	00000058 alt_avalon_i2c_int_status_get
0001b5d8 g     F .text	00000024 _fputwc_r
0002a9f4 g     O .rodata	00000028 __mprec_bigtens
00016d04 g     F .text	00000104 __s2b
0000e2c4 g     F .text	00000018 abort
0001ed2c g     F .text	000000a8 .hidden __floatunsidf
00025fd0  w    O .rodata	00000014 _ZTS17MouseReportParser
00017470 g     F .text	00000060 __mcmp
000006dc g     F .text	00000028 _Z6millisv
00008dd0  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
00003388 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0000c754 g     F .text	000000b4 __cxa_end_catch
00009194 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
00015b60 g     F .text	00000018 __fp_lock_all
00023cb4  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
00022ab4 g     F .text	0000004c alt_ic_irq_enabled
0000cb60 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00002d98  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
00005e24  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
0002323c g     F .text	0000009c alt_alarm_stop
00000320 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
00026198  w    O .rodata	0000003c _ZTV9USBH_MIDI
000007e0 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0001fce8 g     F .text	00000054 alt_avalon_i2c_register_callback
00030fa0 g     O .bss	00000004 alt_irq_active
0001fd3c g     F .text	000000ec alt_avalon_i2c_init
0000b468 g     F .text	00000018 _ZSt9terminatev
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002b428 g     O .rwdata	00000028 alt_dev_null
0000a6a0 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000609c  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0000cb8c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00004b94  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
00002f44  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
0000286c g     F .text	00000084 _ZN3USB7setConfEhhh
00008ca4 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0002a6d4  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000008f4 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
000226e0 g     F .text	00000020 alt_dcache_flush_all
00016e08 g     F .text	00000068 __hi0bits
00026218  w    O .rodata	0000000c _ZTI14MidiDescParser
000099b8 g     F .text	00000028 _Z10Vbus_powerb
0002dd10  w    O .rwdata	00000008 _ZTISt9exception
0001ebd0 g     F .text	00000080 .hidden __fixdfsi
00025fe4  w    O .rodata	00000012 _ZTS15HIDReportParser
0000a2ec  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
00001240 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0002dd70 g       *ABS*	00000000 __ram_rwdata_end
0000b040 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002dd48 g     O .rwdata	00000008 alt_dev_list
0000cb8c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001f90c g     F .text	00000100 write
00017ba4 g     F .text	000000a0 _putc_r
00009e28 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
00020678 g     F .text	0000004c alt_avalon_i2c_check_arblost
0000b054 g     F .text	00000004 _ZNSt9type_infoD0Ev
00004a0c  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0000d210 g     F .text	000000bc .hidden __gtsf2
00021454 g     F .text	0000003c alt_avalon_i2c_int_clear
00008e2c  w    F .text	0000002c _Z10D_PrintHexItEvT_i
00023ba8  w    O .rodata	00000014 _ZTV11AddressPool
0002ab84 g       *ABS*	00000000 __ram_rodata_end
0001ef84 g     F .text	000000b8 fstat
00002948  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0001f180 g     F .text	00000130 kill
00006114  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0001d974 g     F .text	000000f4 .hidden __ledf2
00023cdc  w    O .rodata	00000020 _ZTI7XBOXONE
0002dd5c g     O .rwdata	00000008 alt_avalon_i2c_list
00004778  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
00025f2a g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
000171e8 g     F .text	00000140 __pow5mult
00004d60  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
00019aa4 g     F .text	0000150c ___vfiprintf_internal_r
00030f90 g     O .bss	00000004 __nlocale_changed
0000cd50 g     F .text	00000058 .hidden __umodsi3
0000b04c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00004554  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
00009ec4 g     F .text	00000078 _Z10MIDI_setupv
000023e4 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0000b4bc g     F .text	00000010 _ZSt13get_terminatev
00031208 g       *ABS*	00000000 end
00023c64  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
00004b60  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
0000967c g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
00006034  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0000e1d4 g     F .text	00000018 .hidden _Unwind_DeleteException
00021868 g     F .text	000000c0 altera_avalon_jtag_uart_init
00005dfc  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001fe28 g     F .text	00000040 alt_avalon_i2c_open
00025f40 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0000b220 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0000a65c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0002ce18 g     O .rwdata	00000004 UsbDEBUGlvl
00023a04 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00020800 g     F .text	000000e8 alt_avalon_i2c_master_tx
000223e0 g     F .text	0000007c alt_avalon_timer_sc_init
0000e260 g     F .text	00000064 .hidden __clzsi2
0000b0e0 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00021f48 g     F .text	00000224 altera_avalon_jtag_uart_write
00015b50 g     F .text	00000004 __sfp_lock_acquire
0002a764  w    O .rodata	00000012 _ZTSSt13bad_exception
000168ac g     F .text	000000e4 memchr
00011780 g     F .text	000022dc ___vfprintf_internal_r
0000f284 g     F .text	00000058 _sprintf_r
000044b8  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
00015cb4 g     F .text	00000310 _free_r
00022fd4 g     F .text	0000022c alt_printf
0001669c g     F .text	00000010 __locale_mb_cur_max
0002384c g     F .text	00000180 __call_exitprocs
00000408 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
00030f8c g     O .bss	00000004 __mlocale_changed
0001fbfc g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002dd30 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00003b20 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
00030fa4 g     O .bss	00000004 _alt_tick_rate
0002a668  w    O .rodata	0000000d _ZTSSt9type_info
000211c8 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0000b0a0 g     F .text	00000020 __cxa_pure_virtual
00023b94  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
00023d1c  w    O .rodata	00000010 _ZTS13USBReadParser
000215ec g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00017328 g     F .text	00000148 __lshift
0002216c g     F .text	000001fc alt_avalon_spi_command
00030fa8 g     O .bss	00000004 _alt_nticks
0000f1e8 g     F .text	00000018 signal
0001f5b4 g     F .text	00000104 read
000055ec g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0001fa78 g     F .text	00000074 alt_sys_init
00023c18  w    O .rodata	00000040 _ZTV7XBOXONE
00018420 g     F .text	000001d0 __ssprint_r
000012f0 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
0000052c g     F .text	00000158 _Z14alt_busy_sleepj
00023734 g     F .text	00000118 __register_exitproc
000027d8 g     F .text	00000094 _ZN3USB7setAddrEhhh
00006188 g     F .text	00000084 _Z8E_NotifyPKci
000261d4  w    O .rodata	0000000c _ZTV14MidiDescParser
00008d3c  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
00002fd8  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
0000a3dc g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00006000  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
000049a4  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00020a24 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00016f5c g     F .text	0000028c __multiply
00002730 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0002ce06 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
00021bd4 g     F .text	00000068 altera_avalon_jtag_uart_close
00002948  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0000cda8 g     F .text	00000028 .hidden __mulsi3
0002ab84 g       *ABS*	00000000 __ram_rwdata_start
0000e030 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00023a0c g       *ABS*	00000000 __ram_rodata_start
000310e0 g     O .bss	00000028 __malloc_current_mallinfo
00004bfc  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0000e144 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
0001783c g     F .text	0000014c __d2b
0002a804  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0000b040 g     F .text	00000004 _ZNSt9type_infoD2Ev
00008cec  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
00004610  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
0002c670  w    O .rwdata	00000008 _ZTI11AddressPool
0000cb90 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0000a5d8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00026224  w    O .rodata	00000011 _ZTS14MidiDescParser
0002a608  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
00021704 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002350c g     F .text	000000c4 alt_get_fd
00005808 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
00022588 g     F .text	00000158 alt_busy_sleep
000066e0 g     F .text	000001b8 _Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt
0002dd20  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001b240 g     F .text	00000054 _close_r
000236b8 g     F .text	0000007c memcmp
0002029c g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000217c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007ae4 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
00031208 g       *ABS*	00000000 __alt_stack_base
00021814 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005354 g     F .text	00000298 _Z9calc_adsrtttf
0000a398 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00007d4c g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
00004250 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
00013b34 g     F .text	00000154 __swsetup_r
0000e188 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00030f68 g     O .bss	00000004 i2c_dev
0001ce40 g     F .text	000009d0 .hidden __divdf3
0000a33c  w    F .text	00000028 _ZN9USBH_MIDI9idProductEv
00015a10 g     F .text	00000118 __sfp
00017aa0 g     F .text	00000078 __copybits
0000b044 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0002afa8 g     O .rwdata	00000408 __malloc_av_
000045d4  w    F .text	0000003c _ZN11ByteSkipperC1Ev
00000444 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
00015b5c g     F .text	00000004 __sinit_lock_release
0001da68 g     F .text	0000086c .hidden __muldf3
000182e4 g     F .text	00000054 __sread
00004bc8  w    F .text	00000034 _ZN13USBReadParserC2Ev
0002a7c8  w    O .rodata	00000014 _ZTVSt9exception
0000cb88 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00002914  w    F .text	00000034 _ZN11AddressPoolC2Ev
00023404 g     F .text	00000108 alt_find_file
000048bc  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
0002273c g     F .text	000000a4 alt_dev_llist_insert
0001f530 g     F .text	00000024 __malloc_lock
0001f73c g     F .text	000000b0 sbrk
0000f4bc g     F .text	000022bc ___svfprintf_internal_r
000206c4 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0002062c g     F .text	0000004c alt_avalon_i2c_check_nack
0002a704  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000c584 g     F .text	00000090 __cxa_throw
00015754 g     F .text	0000005c _fflush_r
0000dff4 g     F .text	00000010 .hidden _Unwind_SetIP
00006aec g     F .text	00000098 _Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s
00000b9c g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0001b294 g     F .text	000000dc _calloc_r
00023d08  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
000062b8 g     F .text	00000028 _Z8E_Notifydi
00007908 g     F .text	00000108 _ZN9USBH_MIDI19setupDeviceSpecificEv
00030f5c g       *ABS*	00000000 __bss_start
0002c694  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0000eca4 g     F .text	00000128 memset
00008408 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
00004ddc  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
0000a0d8 g     F .text	0000017c main
000096f0 g     F .text	00000078 _ZN8MAX3421e5regRdEh
000098ec g     F .text	000000cc _ZN8MAX3421e5resetEv
000205f8 g     F .text	00000034 alt_avalon_i2c_master_target_set
00030f9c g     O .bss	00000004 alt_envp
00023d2c  w    O .rodata	00000012 _ZTS15USBDeviceConfig
00030f78 g     O .bss	00000004 __malloc_max_total_mem
00021764 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00030f65 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
0001b1c8 g     F .text	00000018 __swbuf
0000cb44 g     F .text	0000000c __cxa_get_globals_fast
00021410 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00006d9c g     F .text	000000d4 _Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s
0000945c g     F .text	0000003c _ZN8MAX3421eC1Ev
00004b94  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
000028f0  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
00018418 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001b460 g     F .text	00000014 fclose
0000a364  w    F .text	00000034 _ZN9USBH_MIDI12attachOnInitEPFvvE
00004124 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
0000620c g     F .text	00000084 _Z11E_NotifyStrPKci
00000480 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
00013eb0 g     F .text	00001688 _dtoa_r
0000e350 g     F .text	0000080c _malloc_r
0001b948 g     F .text	00000030 __ascii_wctomb
0000cb70 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002dd54 g     O .rwdata	00000004 alt_errno
00025fc4  w    O .rodata	0000000c _ZTI17MouseReportParser
0000f200 g     F .text	00000010 _init_signal
00002638 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
00006898 g     F .text	000000a8 _Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh
0002a6f8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00004394 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
0001648c g     F .text	000000c4 _fwalk
00009498 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
00002edc  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0000cb60 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00017c44 g     F .text	000000c8 putc
0000cbf4 g     F .text	00000084 .hidden __divsi3
00026238  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
00015b90 g     F .text	00000124 _malloc_trim_r
00023a0c g       *ABS*	00000000 __CTOR_END__
0000d2cc g     F .text	00000430 .hidden __mulsf3
000047b4  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
00008df8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
00025f78  w    O .rodata	00000028 _ZTV17MouseReportParser
0000f348 g     F .text	000000dc strcmp
000031a4 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
00023a0c g       *ABS*	00000000 __flash_rodata_start
0002a7f0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0000a314  w    F .text	00000028 _ZN9USBH_MIDI8idVendorEv
00023a0c g       *ABS*	00000000 __DTOR_LIST__
000261e0  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
0001d810 g     F .text	00000088 .hidden __nedf2
0001fa40 g     F .text	00000038 alt_irq_init
0001f6b8 g     F .text	00000084 alt_release_fd
0000a3a8 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00023cfc  w    O .rodata	00000009 _ZTS7XBOXONE
0000f2dc g     F .text	0000006c sprintf
0002a818 g     O .rodata	00000100 .hidden __clz_tab
00030f88 g     O .bss	00000004 _PathLocale
0002366c g     F .text	00000014 atexit
0000d210 g     F .text	000000bc .hidden __gesf2
0001b1e0 g     F .text	00000060 _write_r
0000251c g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
00002aa0  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
000166cc g     F .text	00000018 setlocale
000004f8 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
00025f4c  w    O .rodata	0000002c _ZTV20KeyboardReportParser
00009870 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0000e028 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002a63c  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0000caec g     F .text	00000058 __cxa_call_terminate
0002dd2c g     O .rwdata	00000004 _impure_ptr
0002dd18  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00023be4  w    O .rodata	0000000e _ZTS11AddressPool
00030f94 g     O .bss	00000004 alt_argc
000030dc  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
00015538 g     F .text	0000021c __sflush_r
00008df8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
00002d2c  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
00022840 g     F .text	00000060 _do_dtors
0003106c g     O .bss	00000064 Midi
000166b8 g     F .text	00000008 __locale_cjk_lang
000205c0 g     F .text	00000038 alt_avalon_i2c_master_target_get
000204d0 g     F .text	000000f0 alt_avalon_i2c_send_address
0000b4e0 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00002914  w    F .text	00000034 _ZN11AddressPoolC1Ev
0000075c g     F .text	0000002c _ZN3USB4initEv
000176cc g     F .text	00000064 __ulp
0000e018 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00015b78 g     F .text	00000018 __fp_unlock_all
00004bfc  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
00004214 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
0000485c  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0002dd40 g     O .rwdata	00000008 alt_fs_list
0002a7a4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00025fac  w    O .rodata	00000017 _ZTS20KeyboardReportParser
00004bc8  w    F .text	00000034 _ZN13USBReadParserC1Ev
0000e004 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00004888  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0000c6a0 g     F .text	000000b4 __cxa_begin_catch
0000440c g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0000b170 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000b480 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00005dd4  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
00000020 g       *ABS*	00000000 __ram_exceptions_start
000166e4 g     F .text	0000000c localeconv
00009bdc g     F .text	00000174 _ZN8MAX3421e8busprobeEv
0000026c g     F .text	0000003c _ZN6SPI_SS5WriteEh
00004a34  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0000cb80 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0002169c g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0002dd0c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00006e70 g     F .text	00000080 _Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s
000004bc g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
00008ef8 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
00022950 g     F .text	00000050 alt_ic_isr_register
0001ff00 g     F .text	0000004c alt_avalon_i2c_disable
0000c988 g     F .text	00000060 __cxa_allocate_exception
0002a5d0  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002dd70 g       *ABS*	00000000 _edata
00004b60  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
00031208 g       *ABS*	00000000 _end
0000a7c8 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0000bd10 g     F .text	00000600 __gxx_personality_sj0
0001b474 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000181c g     F .text	00000430 _ZN3USB4TaskEv
00021c3c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000002a8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0002c68c  w    O .rwdata	00000008 _ZTI13USBReadParser
0001ff4c g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000cb5c g     F .text	00000004 _ZNSt9exceptionD1Ev
00022a28 g     F .text	0000008c alt_ic_irq_disable
00005d5c  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
00018340 g     F .text	0000007c __swrite
0002dd34 g     O .rwdata	00000004 __malloc_trim_threshold
000166ac g     F .text	0000000c __locale_msgcharset
00023680 g     F .text	00000038 exit
0000dfa8 g     F .text	0000001c .hidden _Unwind_SetGR
00005dac  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
00016550 g     F .text	000000c4 _fwalk_reent
0000a53c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0000dc50 g     F .text	000000f0 .hidden __floatunsisf
000174d0 g     F .text	000001fc __mdiff
0000b3a8 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000cc78 g     F .text	00000074 .hidden __modsi3
00000f94 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00015b54 g     F .text	00000004 __sfp_lock_release
0002a778  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000060c4  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
00003cd4 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0002015c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00009ac4 g     F .text	00000118 _ZN8MAX3421e4InitEi
0000169c g     F .text	00000180 _ZN3USB11dispatchPktEhht
000203ec g     F .text	000000e4 alt_avalon_i2c_cmd_write
000261ec  w    O .rodata	00000020 _ZTI9USBH_MIDI
0000409c g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0000cb94 g     F .text	00000060 .hidden __fixunssfsi
00007890 g     F .text	00000078 _ZN9USBH_MIDI7ReleaseEv
0001ef14 g     F .text	00000034 _exit
0002245c g     F .text	0000012c alt_alarm_start
00025fa0  w    O .rodata	0000000c _ZTI20KeyboardReportParser
00007ea8 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0000df74 g     F .text	0000001c .hidden _Unwind_GetGR
0000cb50 g     F .text	0000000c __cxa_get_globals
000063e8 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
000166f0 g     F .text	000001bc __smakebuf_r
0002dd08 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00004814  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0000f424 g     F .text	00000098 strlen
0000ef80 g     F .text	0000006c _init_signal_r
0002dd00  w    O .rwdata	00000008 _ZTISt9type_info
00022e78 g     F .text	0000015c open
0001d898 g     F .text	000000dc .hidden __gedf2
00023200 g     F .text	0000003c alt_putchar
0002a754  w    O .rodata	0000000d _ZTSSt9exception
0000e2dc g     F .text	0000004c clock
000060ec  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
00009d50 g     F .text	00000064 _ZN8MAX3421e4TaskEv
00025f34 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
00009548 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0002dd3c g     O .rwdata	00000004 __wctomb
0000cb7c g     F .text	00000004 _ZNSt9exceptionD0Ev
00019a8c g     F .text	00000018 __sprint_r
00022930 g     F .text	00000020 alt_icache_flush_all
0000e020 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00030fb0 g     O .bss	000000bc Usb
0002dd64 g     O .rwdata	00000004 alt_priority_mask
000045d4  w    F .text	0000003c _ZN11ByteSkipperC2Ev
000229a0 g     F .text	00000088 alt_ic_irq_enable
00013a5c g     F .text	0000001c __vfprintf_internal
000002ec g     F .text	00000034 _ZN6SPI_SS4ReadEv
0001b978 g     F .text	0000005c _wctomb_r
0001e2d4 g     F .text	000008fc .hidden __subdf3
00000eac g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
000039dc g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
00016e70 g     F .text	000000b0 __lo0bits
0002dd68 g     O .rwdata	00000008 alt_alarm_list
000227e0 g     F .text	00000060 _do_ctors
00023ca8  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0000f210 g     F .text	00000014 __sigtramp
00008fb0 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
0001b888 g     F .text	000000c0 wcrtomb
0001ee10 g     F .text	000000d8 close
00021650 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002a784  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001f318 g     F .text	00000084 alt_load
000208e8 g     F .text	0000013c alt_avalon_i2c_master_rx
0000b058 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
00004678  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
0001b5fc g     F .text	00000080 fputwc
0000f1d4 g     F .text	00000014 raise
0002ce0c  w    O .rwdata	00000008 _ZTI15HIDReportParser
0000e33c g     F .text	00000014 free
00015b58 g     F .text	00000004 __sinit_lock_acquire
00016bbc g     F .text	00000148 __multadd
0000b180 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00016b94 g     F .text	00000028 _Bfree
0000663c g     F .text	000000a4 _Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10844204 	addi	r2,r2,4360
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10844204 	addi	r2,r2,4360
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0b25117 	ldw	r2,-14012(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0b25117 	ldw	r2,-14012(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     23c:	d6919a14 	ori	gp,gp,18024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     244:	1083d714 	ori	r2,r2,3932

    movhi r3, %hi(__bss_end)
     248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     24c:	18c48214 	ori	r3,r3,4616

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001f3180 	call	1f318 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001f4b40 	call	1f4b4 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfc000268>

0000026c <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
     26c:	defffd04 	addi	sp,sp,-12
     270:	dfc00215 	stw	ra,8(sp)
     274:	df000115 	stw	fp,4(sp)
     278:	df000104 	addi	fp,sp,4
     27c:	2005883a 	mov	r2,r4
     280:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
     284:	010000b4 	movhi	r4,2
     288:	210e8304 	addi	r4,r4,14860
     28c:	000ef180 	call	ef18 <puts>
}
     290:	0001883a 	nop
     294:	e037883a 	mov	sp,fp
     298:	dfc00117 	ldw	ra,4(sp)
     29c:	df000017 	ldw	fp,0(sp)
     2a0:	dec00204 	addi	sp,sp,8
     2a4:	f800283a 	ret

000002a8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
     2a8:	defffc04 	addi	sp,sp,-16
     2ac:	dfc00315 	stw	ra,12(sp)
     2b0:	df000215 	stw	fp,8(sp)
     2b4:	df000204 	addi	fp,sp,8
     2b8:	2007883a 	mov	r3,r4
     2bc:	2805883a 	mov	r2,r5
     2c0:	e0fffe05 	stb	r3,-8(fp)
     2c4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
     2c8:	010000b4 	movhi	r4,2
     2cc:	210e8604 	addi	r4,r4,14872
     2d0:	000ef180 	call	ef18 <puts>
}
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
     2ec:	defffe04 	addi	sp,sp,-8
     2f0:	dfc00115 	stw	ra,4(sp)
     2f4:	df000015 	stw	fp,0(sp)
     2f8:	d839883a 	mov	fp,sp
	printf("Port Read\n");
     2fc:	010000b4 	movhi	r4,2
     300:	210e8b04 	addi	r4,r4,14892
     304:	000ef180 	call	ef18 <puts>
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
     320:	defffd04 	addi	sp,sp,-12
     324:	dfc00215 	stw	ra,8(sp)
     328:	df000115 	stw	fp,4(sp)
     32c:	df000104 	addi	fp,sp,4
     330:	2005883a 	mov	r2,r4
     334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
     338:	010000b4 	movhi	r4,2
     33c:	210e8e04 	addi	r4,r4,14904
     340:	000ef180 	call	ef18 <puts>
}
     344:	0001883a 	nop
     348:	e037883a 	mov	sp,fp
     34c:	dfc00117 	ldw	ra,4(sp)
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00204 	addi	sp,sp,8
     358:	f800283a 	ret

0000035c <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
     35c:	defffe04 	addi	sp,sp,-8
     360:	dfc00115 	stw	ra,4(sp)
     364:	df000015 	stw	fp,0(sp)
     368:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
     36c:	010000b4 	movhi	r4,2
     370:	210e9204 	addi	r4,r4,14920
     374:	000ef180 	call	ef18 <puts>
}
     378:	0001883a 	nop
     37c:	e037883a 	mov	sp,fp
     380:	dfc00117 	ldw	ra,4(sp)
     384:	df000017 	ldw	fp,0(sp)
     388:	dec00204 	addi	sp,sp,8
     38c:	f800283a 	ret

00000390 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
     390:	defffd04 	addi	sp,sp,-12
     394:	dfc00215 	stw	ra,8(sp)
     398:	df000115 	stw	fp,4(sp)
     39c:	df000104 	addi	fp,sp,4
     3a0:	2005883a 	mov	r2,r4
     3a4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
     3a8:	010000b4 	movhi	r4,2
     3ac:	210e9604 	addi	r4,r4,14936
     3b0:	000ef180 	call	ef18 <puts>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
     3cc:	defffd04 	addi	sp,sp,-12
     3d0:	dfc00215 	stw	ra,8(sp)
     3d4:	df000115 	stw	fp,4(sp)
     3d8:	df000104 	addi	fp,sp,4
     3dc:	2005883a 	mov	r2,r4
     3e0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
     3e4:	010000b4 	movhi	r4,2
     3e8:	210e9904 	addi	r4,r4,14948
     3ec:	000ef180 	call	ef18 <puts>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
     408:	defffd04 	addi	sp,sp,-12
     40c:	dfc00215 	stw	ra,8(sp)
     410:	df000115 	stw	fp,4(sp)
     414:	df000104 	addi	fp,sp,4
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
     420:	010000b4 	movhi	r4,2
     424:	210e9c04 	addi	r4,r4,14960
     428:	000ef180 	call	ef18 <puts>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
     444:	defffd04 	addi	sp,sp,-12
     448:	dfc00215 	stw	ra,8(sp)
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	2005883a 	mov	r2,r4
     458:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
     45c:	010000b4 	movhi	r4,2
     460:	210e9f04 	addi	r4,r4,14972
     464:	000ef180 	call	ef18 <puts>
}
     468:	0001883a 	nop
     46c:	e037883a 	mov	sp,fp
     470:	dfc00117 	ldw	ra,4(sp)
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00204 	addi	sp,sp,8
     47c:	f800283a 	ret

00000480 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
     480:	defffd04 	addi	sp,sp,-12
     484:	dfc00215 	stw	ra,8(sp)
     488:	df000115 	stw	fp,4(sp)
     48c:	df000104 	addi	fp,sp,4
     490:	2005883a 	mov	r2,r4
     494:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
     498:	010000b4 	movhi	r4,2
     49c:	210ea204 	addi	r4,r4,14984
     4a0:	000ef180 	call	ef18 <puts>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
     4bc:	defffd04 	addi	sp,sp,-12
     4c0:	dfc00215 	stw	ra,8(sp)
     4c4:	df000115 	stw	fp,4(sp)
     4c8:	df000104 	addi	fp,sp,4
     4cc:	2005883a 	mov	r2,r4
     4d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
     4d4:	010000b4 	movhi	r4,2
     4d8:	210ea604 	addi	r4,r4,15000
     4dc:	000ef180 	call	ef18 <puts>
}
     4e0:	0001883a 	nop
     4e4:	e037883a 	mov	sp,fp
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
     4f4:	f800283a 	ret

000004f8 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	dfc00115 	stw	ra,4(sp)
     500:	df000015 	stw	fp,0(sp)
     504:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
     508:	010000b4 	movhi	r4,2
     50c:	210eaa04 	addi	r4,r4,15016
     510:	000ef180 	call	ef18 <puts>
}
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
     52c:	defffa04 	addi	sp,sp,-24
     530:	dfc00515 	stw	ra,20(sp)
     534:	df000415 	stw	fp,16(sp)
     538:	df000404 	addi	fp,sp,16
     53c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
     540:	00800244 	movi	r2,9
     544:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     548:	014003f4 	movhi	r5,15
     54c:	29509004 	addi	r5,r5,16960
     550:	e13ffd17 	ldw	r4,-12(fp)
     554:	000cda80 	call	cda8 <__mulsi3>
     558:	100b883a 	mov	r5,r2
     55c:	01017db4 	movhi	r4,1526
     560:	21384004 	addi	r4,r4,-7936
     564:	000ccec0 	call	ccec <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
     568:	100b883a 	mov	r5,r2
     56c:	01200034 	movhi	r4,32768
     570:	213fffc4 	addi	r4,r4,-1
     574:	000ccec0 	call	ccec <__udivsi3>
     578:	100b883a 	mov	r5,r2
     57c:	e13fff17 	ldw	r4,-4(fp)
     580:	000ccec0 	call	ccec <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
     584:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	10002a26 	beq	r2,zero,638 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
     590:	e03ffc15 	stw	zero,-16(fp)
     594:	e0fffc17 	ldw	r3,-16(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	1880180e 	bge	r3,r2,600 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
     5a0:	00a00034 	movhi	r2,32768
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	10bfffc4 	addi	r2,r2,-1
     5ac:	103ffe1e 	bne	r2,zero,5a8 <__alt_data_end+0xfc0005a8>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
     5b0:	014003f4 	movhi	r5,15
     5b4:	29509004 	addi	r5,r5,16960
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	000cda80 	call	cda8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
     5c0:	100b883a 	mov	r5,r2
     5c4:	01017db4 	movhi	r4,1526
     5c8:	21384004 	addi	r4,r4,-7936
     5cc:	000ccec0 	call	ccec <__udivsi3>
     5d0:	100b883a 	mov	r5,r2
     5d4:	01200034 	movhi	r4,32768
     5d8:	213fffc4 	addi	r4,r4,-1
     5dc:	000ccec0 	call	ccec <__udivsi3>
     5e0:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c5c83a 	sub	r2,r2,r3
     5ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	e0bffc15 	stw	r2,-16(fp)
     5fc:	003fe506 	br	594 <__alt_data_end+0xfc000594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     600:	014003f4 	movhi	r5,15
     604:	29509004 	addi	r5,r5,16960
     608:	e13ffd17 	ldw	r4,-12(fp)
     60c:	000cda80 	call	cda8 <__mulsi3>
     610:	100b883a 	mov	r5,r2
     614:	01017db4 	movhi	r4,1526
     618:	21384004 	addi	r4,r4,-7936
     61c:	000ccec0 	call	ccec <__udivsi3>
     620:	e17fff17 	ldw	r5,-4(fp)
     624:	1009883a 	mov	r4,r2
     628:	000cda80 	call	cda8 <__mulsi3>
     62c:	10bfffc4 	addi	r2,r2,-1
     630:	103ffe1e 	bne	r2,zero,62c <__alt_data_end+0xfc00062c>
     634:	00000d06 	br	66c <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
     638:	014003f4 	movhi	r5,15
     63c:	29509004 	addi	r5,r5,16960
     640:	e13ffd17 	ldw	r4,-12(fp)
     644:	000cda80 	call	cda8 <__mulsi3>
     648:	100b883a 	mov	r5,r2
     64c:	01017db4 	movhi	r4,1526
     650:	21384004 	addi	r4,r4,-7936
     654:	000ccec0 	call	ccec <__udivsi3>
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	1009883a 	mov	r4,r2
     660:	000cda80 	call	cda8 <__mulsi3>
     664:	10bfffc4 	addi	r2,r2,-1
     668:	00bffe16 	blt	zero,r2,664 <__alt_data_end+0xfc000664>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <_Z5delaym>:

void delay(uint32_t a) {
     684:	defffc04 	addi	sp,sp,-16
     688:	dfc00315 	stw	ra,12(sp)
     68c:	df000215 	stw	fp,8(sp)
     690:	df000204 	addi	fp,sp,8
     694:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
     698:	000e2dc0 	call	e2dc <clock>
     69c:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
     6a0:	000e2dc0 	call	e2dc <clock>
     6a4:	1007883a 	mov	r3,r2
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	1887c83a 	sub	r3,r3,r2
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	1885803a 	cmpltu	r2,r3,r2
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	10000126 	beq	r2,zero,6c4 <_Z5delaym+0x40>
     6c0:	003ff706 	br	6a0 <__alt_data_end+0xfc0006a0>
}
     6c4:	0001883a 	nop
     6c8:	e037883a 	mov	sp,fp
     6cc:	dfc00117 	ldw	ra,4(sp)
     6d0:	df000017 	ldw	fp,0(sp)
     6d4:	dec00204 	addi	sp,sp,8
     6d8:	f800283a 	ret

000006dc <_Z6millisv>:
uint32_t millis() {
     6dc:	defffe04 	addi	sp,sp,-8
     6e0:	dfc00115 	stw	ra,4(sp)
     6e4:	df000015 	stw	fp,0(sp)
     6e8:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
     6ec:	000e2dc0 	call	e2dc <clock>
}
     6f0:	e037883a 	mov	sp,fp
     6f4:	dfc00117 	ldw	ra,4(sp)
     6f8:	df000017 	ldw	fp,0(sp)
     6fc:	dec00204 	addi	sp,sp,8
     700:	f800283a 	ret

00000704 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
     704:	defffd04 	addi	sp,sp,-12
     708:	dfc00215 	stw	ra,8(sp)
     70c:	df000115 	stw	fp,4(sp)
     710:	df000104 	addi	fp,sp,4
     714:	e13fff15 	stw	r4,-4(fp)
     718:	e13fff17 	ldw	r4,-4(fp)
     71c:	000945c0 	call	945c <_ZN8MAX3421eC1Ev>
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	1009883a 	mov	r4,r2
     728:	00029480 	call	2948 <_ZN15AddressPoolImplILh16EEC1Ev>
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
     734:	00800444 	movi	r2,17
     738:	d0b23d45 	stb	r2,-14091(gp)
        init();
     73c:	e13fff17 	ldw	r4,-4(fp)
     740:	000075c0 	call	75c <_ZN3USB4initEv>
}
     744:	0001883a 	nop
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
     75c:	defffe04 	addi	sp,sp,-8
     760:	df000115 	stw	fp,4(sp)
     764:	df000104 	addi	fp,sp,4
     768:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10002e05 	stb	zero,184(r2)
}
     774:	0001883a 	nop
     778:	e037883a 	mov	sp,fp
     77c:	df000017 	ldw	fp,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
     788:	defffe04 	addi	sp,sp,-8
     78c:	df000115 	stw	fp,4(sp)
     790:	df000104 	addi	fp,sp,4
     794:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
     798:	d0b23d43 	ldbu	r2,-14091(gp)
}
     79c:	e037883a 	mov	sp,fp
     7a0:	df000017 	ldw	fp,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	df000215 	stw	fp,8(sp)
     7b4:	df000204 	addi	fp,sp,8
     7b8:	e13ffe15 	stw	r4,-8(fp)
     7bc:	2805883a 	mov	r2,r5
     7c0:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
     7c4:	e0bfff03 	ldbu	r2,-4(fp)
     7c8:	d0b23d45 	stb	r2,-14091(gp)
}
     7cc:	0001883a 	nop
     7d0:	e037883a 	mov	sp,fp
     7d4:	df000017 	ldw	fp,0(sp)
     7d8:	dec00104 	addi	sp,sp,4
     7dc:	f800283a 	ret

000007e0 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
     7e0:	defff804 	addi	sp,sp,-32
     7e4:	dfc00715 	stw	ra,28(sp)
     7e8:	df000615 	stw	fp,24(sp)
     7ec:	df000604 	addi	fp,sp,24
     7f0:	e13ffd15 	stw	r4,-12(fp)
     7f4:	2807883a 	mov	r3,r5
     7f8:	3005883a 	mov	r2,r6
     7fc:	e0fffe05 	stb	r3,-8(fp)
     800:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     804:	e0bffd17 	ldw	r2,-12(fp)
     808:	e0fffe03 	ldbu	r3,-8(fp)
     80c:	180b883a 	mov	r5,r3
     810:	1009883a 	mov	r4,r2
     814:	0002a140 	call	2a14 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     818:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10000c26 	beq	r2,zero,854 <_ZN3USB14getEpInfoEntryEhh+0x74>
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10c00003 	ldbu	r3,0(r2)
     82c:	11000043 	ldbu	r4,1(r2)
     830:	2008923a 	slli	r4,r4,8
     834:	20c6b03a 	or	r3,r4,r3
     838:	11000083 	ldbu	r4,2(r2)
     83c:	2008943a 	slli	r4,r4,16
     840:	20c6b03a 	or	r3,r4,r3
     844:	108000c3 	ldbu	r2,3(r2)
     848:	1004963a 	slli	r2,r2,24
     84c:	10c4b03a 	or	r2,r2,r3
     850:	1000021e 	bne	r2,zero,85c <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
     854:	0005883a 	mov	r2,zero
     858:	00002106 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
     85c:	e0bffc17 	ldw	r2,-16(fp)
     860:	10c00003 	ldbu	r3,0(r2)
     864:	11000043 	ldbu	r4,1(r2)
     868:	2008923a 	slli	r4,r4,8
     86c:	20c6b03a 	or	r3,r4,r3
     870:	11000083 	ldbu	r4,2(r2)
     874:	2008943a 	slli	r4,r4,16
     878:	20c6b03a 	or	r3,r4,r3
     87c:	108000c3 	ldbu	r2,3(r2)
     880:	1004963a 	slli	r2,r2,24
     884:	10c4b03a 	or	r2,r2,r3
     888:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
     88c:	e03ffb05 	stb	zero,-20(fp)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800143 	ldbu	r2,5(r2)
     898:	10803fcc 	andi	r2,r2,255
     89c:	e0fffb03 	ldbu	r3,-20(fp)
     8a0:	18800e2e 	bgeu	r3,r2,8dc <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10800003 	ldbu	r2,0(r2)
     8ac:	10c03fcc 	andi	r3,r2,255
     8b0:	e0bfff03 	ldbu	r2,-4(fp)
     8b4:	1880021e 	bne	r3,r2,8c0 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	00000806 	br	8e0 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
     8c0:	e0bffa17 	ldw	r2,-24(fp)
     8c4:	108000c4 	addi	r2,r2,3
     8c8:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
     8cc:	e0bffb03 	ldbu	r2,-20(fp)
     8d0:	10800044 	addi	r2,r2,1
     8d4:	e0bffb05 	stb	r2,-20(fp)
     8d8:	003fed06 	br	890 <__alt_data_end+0xfc000890>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
     8dc:	0005883a 	mov	r2,zero
}
     8e0:	e037883a 	mov	sp,fp
     8e4:	dfc00117 	ldw	ra,4(sp)
     8e8:	df000017 	ldw	fp,0(sp)
     8ec:	dec00204 	addi	sp,sp,8
     8f0:	f800283a 	ret

000008f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
     8f4:	defff904 	addi	sp,sp,-28
     8f8:	dfc00615 	stw	ra,24(sp)
     8fc:	df000515 	stw	fp,20(sp)
     900:	df000504 	addi	fp,sp,20
     904:	e13ffc15 	stw	r4,-16(fp)
     908:	2807883a 	mov	r3,r5
     90c:	3005883a 	mov	r2,r6
     910:	e1ffff15 	stw	r7,-4(fp)
     914:	e0fffd05 	stb	r3,-12(fp)
     918:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1000021e 	bne	r2,zero,92c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
     924:	00bff604 	movi	r2,-40
     928:	00003406 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     92c:	e0bffc17 	ldw	r2,-16(fp)
     930:	e0fffd03 	ldbu	r3,-12(fp)
     934:	180b883a 	mov	r5,r3
     938:	1009883a 	mov	r4,r2
     93c:	0002a140 	call	2a14 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     940:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
     944:	e0bffb17 	ldw	r2,-20(fp)
     948:	1000021e 	bne	r2,zero,954 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     94c:	00bff584 	movi	r2,-42
     950:	00002a06 	br	9fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
     954:	e0bffb17 	ldw	r2,-20(fp)
     958:	e0fffd03 	ldbu	r3,-12(fp)
     95c:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
     960:	e0bffb17 	ldw	r2,-20(fp)
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	19403fcc 	andi	r5,r3,255
     96c:	10c00003 	ldbu	r3,0(r2)
     970:	1806703a 	and	r3,r3,zero
     974:	1809883a 	mov	r4,r3
     978:	2807883a 	mov	r3,r5
     97c:	20c6b03a 	or	r3,r4,r3
     980:	10c00005 	stb	r3,0(r2)
     984:	e0ffff17 	ldw	r3,-4(fp)
     988:	1806d23a 	srli	r3,r3,8
     98c:	19403fcc 	andi	r5,r3,255
     990:	10c00043 	ldbu	r3,1(r2)
     994:	1806703a 	and	r3,r3,zero
     998:	1809883a 	mov	r4,r3
     99c:	2807883a 	mov	r3,r5
     9a0:	20c6b03a 	or	r3,r4,r3
     9a4:	10c00045 	stb	r3,1(r2)
     9a8:	e0ffff17 	ldw	r3,-4(fp)
     9ac:	1806d43a 	srli	r3,r3,16
     9b0:	19403fcc 	andi	r5,r3,255
     9b4:	10c00083 	ldbu	r3,2(r2)
     9b8:	1806703a 	and	r3,r3,zero
     9bc:	1809883a 	mov	r4,r3
     9c0:	2807883a 	mov	r3,r5
     9c4:	20c6b03a 	or	r3,r4,r3
     9c8:	10c00085 	stb	r3,2(r2)
     9cc:	e0ffff17 	ldw	r3,-4(fp)
     9d0:	180ad63a 	srli	r5,r3,24
     9d4:	10c000c3 	ldbu	r3,3(r2)
     9d8:	1806703a 	and	r3,r3,zero
     9dc:	1809883a 	mov	r4,r3
     9e0:	2807883a 	mov	r3,r5
     9e4:	20c6b03a 	or	r3,r4,r3
     9e8:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
     9ec:	e0bffb17 	ldw	r2,-20(fp)
     9f0:	e0fffe03 	ldbu	r3,-8(fp)
     9f4:	10c00145 	stb	r3,5(r2)

        return 0;
     9f8:	0005883a 	mov	r2,zero
}
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
     a10:	defff804 	addi	sp,sp,-32
     a14:	dfc00715 	stw	ra,28(sp)
     a18:	df000615 	stw	fp,24(sp)
     a1c:	df000604 	addi	fp,sp,24
     a20:	e13ffc15 	stw	r4,-16(fp)
     a24:	2807883a 	mov	r3,r5
     a28:	3005883a 	mov	r2,r6
     a2c:	e1ffff15 	stw	r7,-4(fp)
     a30:	e0fffd05 	stb	r3,-12(fp)
     a34:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
     a38:	e0bffc17 	ldw	r2,-16(fp)
     a3c:	e0fffd03 	ldbu	r3,-12(fp)
     a40:	180b883a 	mov	r5,r3
     a44:	1009883a 	mov	r4,r2
     a48:	0002a140 	call	2a14 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
     a4c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
     a50:	e0bffa17 	ldw	r2,-24(fp)
     a54:	1000021e 	bne	r2,zero,a60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
     a58:	00bff584 	movi	r2,-42
     a5c:	00004a06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
     a60:	e0bffa17 	ldw	r2,-24(fp)
     a64:	10c00003 	ldbu	r3,0(r2)
     a68:	11000043 	ldbu	r4,1(r2)
     a6c:	2008923a 	slli	r4,r4,8
     a70:	20c6b03a 	or	r3,r4,r3
     a74:	11000083 	ldbu	r4,2(r2)
     a78:	2008943a 	slli	r4,r4,16
     a7c:	20c6b03a 	or	r3,r4,r3
     a80:	108000c3 	ldbu	r2,3(r2)
     a84:	1004963a 	slli	r2,r2,24
     a88:	10c4b03a 	or	r2,r2,r3
     a8c:	1000021e 	bne	r2,zero,a98 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
     a90:	00bff5c4 	movi	r2,-41
     a94:	00003c06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
     a98:	e0bffd03 	ldbu	r2,-12(fp)
     a9c:	e0fffe03 	ldbu	r3,-8(fp)
     aa0:	180d883a 	mov	r6,r3
     aa4:	100b883a 	mov	r5,r2
     aa8:	e13ffc17 	ldw	r4,-16(fp)
     aac:	00007e00 	call	7e0 <_ZN3USB14getEpInfoEntryEhh>
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
     abc:	e0bfff17 	ldw	r2,-4(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1000021e 	bne	r2,zero,ad0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
     ac8:	00bff6c4 	movi	r2,-37
     acc:	00002e06 	br	b88 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10800083 	ldbu	r2,2(r2)
     adc:	1004d0ba 	srli	r2,r2,2
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	10c00410 	cmplti	r3,r2,16
     ae8:	1800011e 	bne	r3,zero,af0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
     aec:	008003c4 	movi	r2,15
     af0:	00c00044 	movi	r3,1
     af4:	1884983a 	sll	r2,r3,r2
     af8:	1007883a 	mov	r3,r2
     afc:	e0800217 	ldw	r2,8(fp)
     b00:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
     b04:	e0800217 	ldw	r2,8(fp)
     b08:	1080000b 	ldhu	r2,0(r2)
     b0c:	10bfffc4 	addi	r2,r2,-1
     b10:	1007883a 	mov	r3,r2
     b14:	e0800217 	ldw	r2,8(fp)
     b18:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
     b1c:	e0bffd03 	ldbu	r2,-12(fp)
     b20:	100d883a 	mov	r6,r2
     b24:	01403804 	movi	r5,224
     b28:	e13ffc17 	ldw	r4,-16(fp)
     b2c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
     b30:	01403604 	movi	r5,216
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
     b3c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10800183 	ldbu	r2,6(r2)
     b48:	10803fcc 	andi	r2,r2,255
     b4c:	10000726 	beq	r2,zero,b6c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	10c02e03 	ldbu	r3,184(r2)
     b58:	e0bffb03 	ldbu	r2,-20(fp)
     b5c:	1884b03a 	or	r2,r3,r2
     b60:	10800094 	ori	r2,r2,2
     b64:	10803fcc 	andi	r2,r2,255
     b68:	00000206 	br	b74 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
     b6c:	e0bffb03 	ldbu	r2,-20(fp)
     b70:	10803e4c 	andi	r2,r2,249
     b74:	100d883a 	mov	r6,r2
     b78:	01403604 	movi	r5,216
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

        return 0;
     b84:	0005883a 	mov	r2,zero
}
     b88:	e037883a 	mov	sp,fp
     b8c:	dfc00117 	ldw	ra,4(sp)
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00204 	addi	sp,sp,8
     b98:	f800283a 	ret

00000b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
     b9c:	deffeb04 	addi	sp,sp,-84
     ba0:	dfc01415 	stw	ra,80(sp)
     ba4:	df001315 	stw	fp,76(sp)
     ba8:	dc001215 	stw	r16,72(sp)
     bac:	df001304 	addi	fp,sp,76
     bb0:	e13ff515 	stw	r4,-44(fp)
     bb4:	2815883a 	mov	r10,r5
     bb8:	3013883a 	mov	r9,r6
     bbc:	3811883a 	mov	r8,r7
     bc0:	e1c00217 	ldw	r7,8(fp)
     bc4:	e1800317 	ldw	r6,12(fp)
     bc8:	e1400417 	ldw	r5,16(fp)
     bcc:	e1000517 	ldw	r4,20(fp)
     bd0:	e0c00617 	ldw	r3,24(fp)
     bd4:	e0800717 	ldw	r2,28(fp)
     bd8:	e2bff605 	stb	r10,-40(fp)
     bdc:	e27ff705 	stb	r9,-36(fp)
     be0:	e23ff805 	stb	r8,-32(fp)
     be4:	e1fff905 	stb	r7,-28(fp)
     be8:	e1bffa05 	stb	r6,-24(fp)
     bec:	e17ffb05 	stb	r5,-20(fp)
     bf0:	e13ffc0d 	sth	r4,-16(fp)
     bf4:	e0fffd0d 	sth	r3,-12(fp)
     bf8:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
     bfc:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
     c00:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
     c04:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
     c08:	e0fff603 	ldbu	r3,-40(fp)
     c0c:	e13ff703 	ldbu	r4,-36(fp)
     c10:	e17ff304 	addi	r5,fp,-52
     c14:	e0bff404 	addi	r2,fp,-48
     c18:	d8800015 	stw	r2,0(sp)
     c1c:	280f883a 	mov	r7,r5
     c20:	200d883a 	mov	r6,r4
     c24:	180b883a 	mov	r5,r3
     c28:	e13ff517 	ldw	r4,-44(fp)
     c2c:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     c30:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
     c34:	e0bfef03 	ldbu	r2,-68(fp)
     c38:	10000226 	beq	r2,zero,c44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
     c3c:	e0bfef03 	ldbu	r2,-68(fp)
     c40:	00009406 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
     c44:	e0bff803 	ldbu	r2,-32(fp)
     c48:	1080200c 	andi	r2,r2,128
     c4c:	0084803a 	cmplt	r2,zero,r2
     c50:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
     c54:	e0bff803 	ldbu	r2,-32(fp)
     c58:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
     c5c:	e0bff903 	ldbu	r2,-28(fp)
     c60:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
     c64:	e0bffa03 	ldbu	r2,-24(fp)
     c68:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
     c6c:	e0bffb03 	ldbu	r2,-20(fp)
     c70:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
     c74:	e0bffc0b 	ldhu	r2,-16(fp)
     c78:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
     c7c:	e0bffd0b 	ldhu	r2,-12(fp)
     c80:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
     c84:	e0bff104 	addi	r2,fp,-60
     c88:	100f883a 	mov	r7,r2
     c8c:	01800204 	movi	r6,8
     c90:	01400804 	movi	r5,32
     c94:	e13ff517 	ldw	r4,-44(fp)
     c98:	00095480 	call	9548 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
     c9c:	e0bff703 	ldbu	r2,-36(fp)
     ca0:	e0fff40b 	ldhu	r3,-48(fp)
     ca4:	18ffffcc 	andi	r3,r3,65535
     ca8:	180f883a 	mov	r7,r3
     cac:	100d883a 	mov	r6,r2
     cb0:	01400404 	movi	r5,16
     cb4:	e13ff517 	ldw	r4,-44(fp)
     cb8:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
     cbc:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
     cc0:	e0bfef03 	ldbu	r2,-68(fp)
     cc4:	10000226 	beq	r2,zero,cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
     cc8:	e0bfef03 	ldbu	r2,-68(fp)
     ccc:	00007106 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
     cd0:	e0800817 	ldw	r2,32(fp)
     cd4:	10006226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
     cd8:	e0bff003 	ldbu	r2,-64(fp)
     cdc:	10004a26 	beq	r2,zero,e08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
     ce0:	e0bffd0b 	ldhu	r2,-12(fp)
     ce4:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
     ce8:	e0bff317 	ldw	r2,-52(fp)
     cec:	10c00083 	ldbu	r3,2(r2)
     cf0:	18c00094 	ori	r3,r3,2
     cf4:	10c00085 	stb	r3,2(r2)

                        while(left) {
     cf8:	e0bfef8b 	ldhu	r2,-66(fp)
     cfc:	10005426 	beq	r2,zero,e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
     d00:	e0bffe0b 	ldhu	r2,-8(fp)
     d04:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
     d08:	e0fff317 	ldw	r3,-52(fp)
     d0c:	e0bff40b 	ldhu	r2,-48(fp)
     d10:	113fffcc 	andi	r4,r2,65535
     d14:	e17ff484 	addi	r5,fp,-46
     d18:	d8000115 	stw	zero,4(sp)
     d1c:	e0800817 	ldw	r2,32(fp)
     d20:	d8800015 	stw	r2,0(sp)
     d24:	280f883a 	mov	r7,r5
     d28:	200d883a 	mov	r6,r4
     d2c:	180b883a 	mov	r5,r3
     d30:	e13ff517 	ldw	r4,-44(fp)
     d34:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
     d38:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
     d3c:	e0bfef03 	ldbu	r2,-68(fp)
     d40:	10800198 	cmpnei	r2,r2,6
     d44:	1000111e 	bne	r2,zero,d8c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
     d48:	e43ff317 	ldw	r16,-52(fp)
     d4c:	01403e04 	movi	r5,248
     d50:	e13ff517 	ldw	r4,-44(fp)
     d54:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
     d58:	10803fcc 	andi	r2,r2,255
     d5c:	1080080c 	andi	r2,r2,32
     d60:	1005003a 	cmpeq	r2,r2,zero
     d64:	1080004c 	andi	r2,r2,1
     d68:	1089883a 	add	r4,r2,r2
     d6c:	80c00083 	ldbu	r3,2(r16)
     d70:	00bfff44 	movi	r2,-3
     d74:	1884703a 	and	r2,r3,r2
     d78:	1007883a 	mov	r3,r2
     d7c:	2005883a 	mov	r2,r4
     d80:	1884b03a 	or	r2,r3,r2
     d84:	80800085 	stb	r2,2(r16)
     d88:	003fdb06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                        continue;
                                }

                                if(rcode)
     d8c:	e0bfef03 	ldbu	r2,-68(fp)
     d90:	10000226 	beq	r2,zero,d9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
     d94:	e0bfef03 	ldbu	r2,-68(fp)
     d98:	00003e06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
     d9c:	e0bfef03 	ldbu	r2,-68(fp)
     da0:	1000101e 	bne	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
     da4:	e0800917 	ldw	r2,36(fp)
     da8:	10000e26 	beq	r2,zero,de4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
     dac:	e0800917 	ldw	r2,36(fp)
     db0:	10800017 	ldw	r2,0(r2)
     db4:	10800017 	ldw	r2,0(r2)
     db8:	e0fff48b 	ldhu	r3,-46(fp)
     dbc:	197fffcc 	andi	r5,r3,65535
     dc0:	e13ffd0b 	ldhu	r4,-12(fp)
     dc4:	e0ffef8b 	ldhu	r3,-66(fp)
     dc8:	20c7c83a 	sub	r3,r4,r3
     dcc:	e0fff08d 	sth	r3,-62(fp)
     dd0:	e0fff084 	addi	r3,fp,-62
     dd4:	180f883a 	mov	r7,r3
     dd8:	e1800817 	ldw	r6,32(fp)
     ddc:	e1000917 	ldw	r4,36(fp)
     de0:	103ee83a 	callr	r2

                                left -= read;
     de4:	e0bff48b 	ldhu	r2,-46(fp)
     de8:	e0ffef8b 	ldhu	r3,-66(fp)
     dec:	1885c83a 	sub	r2,r3,r2
     df0:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
     df4:	e0bff48b 	ldhu	r2,-46(fp)
     df8:	10ffffcc 	andi	r3,r2,65535
     dfc:	e0bffe0b 	ldhu	r2,-8(fp)
     e00:	18801236 	bltu	r3,r2,e4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
     e04:	003fbc06 	br	cf8 <__alt_data_end+0xfc000cf8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
     e08:	e0bff317 	ldw	r2,-52(fp)
     e0c:	10c00083 	ldbu	r3,2(r2)
     e10:	18c00054 	ori	r3,r3,1
     e14:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
     e18:	e0fff317 	ldw	r3,-52(fp)
     e1c:	e0bff40b 	ldhu	r2,-48(fp)
     e20:	113fffcc 	andi	r4,r2,65535
     e24:	e17ffe0b 	ldhu	r5,-8(fp)
     e28:	e0800817 	ldw	r2,32(fp)
     e2c:	d8800015 	stw	r2,0(sp)
     e30:	280f883a 	mov	r7,r5
     e34:	200d883a 	mov	r6,r4
     e38:	180b883a 	mov	r5,r3
     e3c:	e13ff517 	ldw	r4,-44(fp)
     e40:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
     e44:	e0bfef05 	stb	r2,-68(fp)
     e48:	00000106 	br	e50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
     e4c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
     e50:	e0bfef03 	ldbu	r2,-68(fp)
     e54:	10000226 	beq	r2,zero,e60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
     e58:	e0bfef03 	ldbu	r2,-68(fp)
     e5c:	00000d06 	br	e94 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
     e60:	e0bff003 	ldbu	r2,-64(fp)
     e64:	10000226 	beq	r2,zero,e70 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
     e68:	00802804 	movi	r2,160
     e6c:	00000106 	br	e74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
     e70:	00802004 	movi	r2,128
     e74:	e0fff703 	ldbu	r3,-36(fp)
     e78:	e13ff40b 	ldhu	r4,-48(fp)
     e7c:	213fffcc 	andi	r4,r4,65535
     e80:	200f883a 	mov	r7,r4
     e84:	180d883a 	mov	r6,r3
     e88:	100b883a 	mov	r5,r2
     e8c:	e13ff517 	ldw	r4,-44(fp)
     e90:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
}
     e94:	e6ffff04 	addi	sp,fp,-4
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	df000117 	ldw	fp,4(sp)
     ea0:	dc000017 	ldw	r16,0(sp)
     ea4:	dec00304 	addi	sp,sp,12
     ea8:	f800283a 	ret

00000eac <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     eac:	defff404 	addi	sp,sp,-48
     eb0:	dfc00b15 	stw	ra,44(sp)
     eb4:	df000a15 	stw	fp,40(sp)
     eb8:	df000a04 	addi	fp,sp,40
     ebc:	e13ffb15 	stw	r4,-20(fp)
     ec0:	2809883a 	mov	r4,r5
     ec4:	3007883a 	mov	r3,r6
     ec8:	e1fffe15 	stw	r7,-8(fp)
     ecc:	e0800317 	ldw	r2,12(fp)
     ed0:	e13ffc05 	stb	r4,-16(fp)
     ed4:	e0fffd05 	stb	r3,-12(fp)
     ed8:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
     edc:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
     ee0:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
     ee4:	e0fffc03 	ldbu	r3,-16(fp)
     ee8:	e13ffd03 	ldbu	r4,-12(fp)
     eec:	e17ff904 	addi	r5,fp,-28
     ef0:	e0bffa04 	addi	r2,fp,-24
     ef4:	d8800015 	stw	r2,0(sp)
     ef8:	280f883a 	mov	r7,r5
     efc:	200d883a 	mov	r6,r4
     f00:	180b883a 	mov	r5,r3
     f04:	e13ffb17 	ldw	r4,-20(fp)
     f08:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
     f0c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
     f10:	e0bff803 	ldbu	r2,-32(fp)
     f14:	10000e26 	beq	r2,zero,f50 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
     f18:	e0bff803 	ldbu	r2,-32(fp)
     f1c:	01402044 	movi	r5,129
     f20:	1009883a 	mov	r4,r2
     f24:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
     f28:	e0bffc03 	ldbu	r2,-16(fp)
     f2c:	01402044 	movi	r5,129
     f30:	1009883a 	mov	r4,r2
     f34:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
     f38:	e0bffd03 	ldbu	r2,-12(fp)
     f3c:	01402044 	movi	r5,129
     f40:	1009883a 	mov	r4,r2
     f44:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                return rcode;
     f48:	e0bff803 	ldbu	r2,-32(fp)
     f4c:	00000c06 	br	f80 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
     f50:	e0fff917 	ldw	r3,-28(fp)
     f54:	e0bffa0b 	ldhu	r2,-24(fp)
     f58:	113fffcc 	andi	r4,r2,65535
     f5c:	e0bfff03 	ldbu	r2,-4(fp)
     f60:	d8800115 	stw	r2,4(sp)
     f64:	e0800217 	ldw	r2,8(fp)
     f68:	d8800015 	stw	r2,0(sp)
     f6c:	e1fffe17 	ldw	r7,-8(fp)
     f70:	200d883a 	mov	r6,r4
     f74:	180b883a 	mov	r5,r3
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	0000f940 	call	f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
     f80:	e037883a 	mov	sp,fp
     f84:	dfc00117 	ldw	ra,4(sp)
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00204 	addi	sp,sp,8
     f90:	f800283a 	ret

00000f94 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
     f94:	defff704 	addi	sp,sp,-36
     f98:	dfc00815 	stw	ra,32(sp)
     f9c:	df000715 	stw	fp,28(sp)
     fa0:	df000704 	addi	fp,sp,28
     fa4:	e13ffb15 	stw	r4,-20(fp)
     fa8:	e17ffc15 	stw	r5,-16(fp)
     fac:	3007883a 	mov	r3,r6
     fb0:	e1fffe15 	stw	r7,-8(fp)
     fb4:	e0800317 	ldw	r2,12(fp)
     fb8:	e0fffd0d 	sth	r3,-12(fp)
     fbc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
     fc0:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
     fc4:	e0bffe17 	ldw	r2,-8(fp)
     fc8:	1080000b 	ldhu	r2,0(r2)
     fcc:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800043 	ldbu	r2,1(r2)
     fd8:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
     fe4:	e0bffc17 	ldw	r2,-16(fp)
     fe8:	10800083 	ldbu	r2,2(r2)
     fec:	1080008c 	andi	r2,r2,2
     ff0:	10803fcc 	andi	r2,r2,255
     ff4:	10000226 	beq	r2,zero,1000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
     ff8:	00800804 	movi	r2,32
     ffc:	00000106 	br	1004 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
    1000:	00800404 	movi	r2,16
    1004:	100d883a 	mov	r6,r2
    1008:	01403a04 	movi	r5,232
    100c:	e13ffb17 	ldw	r4,-20(fp)
    1010:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
    1014:	e0bffc17 	ldw	r2,-16(fp)
    1018:	10800003 	ldbu	r2,0(r2)
    101c:	10803fcc 	andi	r2,r2,255
    1020:	e0fffd0b 	ldhu	r3,-12(fp)
    1024:	180f883a 	mov	r7,r3
    1028:	100d883a 	mov	r6,r2
    102c:	000b883a 	mov	r5,zero
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	000169c0 	call	169c <_ZN3USB11dispatchPktEhht>
    1038:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
    103c:	e0bff903 	ldbu	r2,-28(fp)
    1040:	10800198 	cmpnei	r2,r2,6
    1044:	10001e1e 	bne	r2,zero,10c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
    1048:	01403e04 	movi	r5,248
    104c:	e13ffb17 	ldw	r4,-20(fp)
    1050:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1054:	10803fcc 	andi	r2,r2,255
    1058:	1080040c 	andi	r2,r2,16
    105c:	1005003a 	cmpeq	r2,r2,zero
    1060:	1007883a 	mov	r3,r2
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	18c0004c 	andi	r3,r3,1
    106c:	18cb883a 	add	r5,r3,r3
    1070:	11000083 	ldbu	r4,2(r2)
    1074:	00ffff44 	movi	r3,-3
    1078:	20c6703a 	and	r3,r4,r3
    107c:	1809883a 	mov	r4,r3
    1080:	2807883a 	mov	r3,r5
    1084:	20c6b03a 	or	r3,r4,r3
    1088:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
    108c:	e0bffc17 	ldw	r2,-16(fp)
    1090:	10800083 	ldbu	r2,2(r2)
    1094:	1080008c 	andi	r2,r2,2
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10000226 	beq	r2,zero,10a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
    10a0:	00800804 	movi	r2,32
    10a4:	00000106 	br	10ac <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
    10a8:	00800404 	movi	r2,16
    10ac:	100d883a 	mov	r6,r2
    10b0:	01403a04 	movi	r5,232
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        continue;
    10bc:	00005806 	br	1220 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
    10c0:	e0bff903 	ldbu	r2,-28(fp)
    10c4:	1000571e 	bne	r2,zero,1224 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
    10c8:	01403204 	movi	r5,200
    10cc:	e13ffb17 	ldw	r4,-20(fp)
    10d0:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080010c 	andi	r2,r2,4
    10dc:	1005003a 	cmpeq	r2,r2,zero
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	10000326 	beq	r2,zero,10f4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
    10e8:	00bffc04 	movi	r2,-16
    10ec:	e0bff905 	stb	r2,-28(fp)
                        break;
    10f0:	00004d06 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
    10f4:	01400c04 	movi	r5,48
    10f8:	e13ffb17 	ldw	r4,-20(fp)
    10fc:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1100:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
    1104:	e0bff943 	ldbu	r2,-27(fp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	e0fffa0b 	ldhu	r3,-24(fp)
    1110:	1880022e 	bgeu	r3,r2,111c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
    1114:	e0bffa0b 	ldhu	r2,-24(fp)
    1118:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	1080000b 	ldhu	r2,0(r2)
    1124:	1007883a 	mov	r3,r2
    1128:	e0bffa0b 	ldhu	r2,-24(fp)
    112c:	10c5c83a 	sub	r2,r2,r3
    1130:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
    1134:	e0bff98f 	ldh	r2,-26(fp)
    1138:	1000010e 	bge	r2,zero,1140 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
    113c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
    1140:	e0bff943 	ldbu	r2,-27(fp)
    1144:	e0fff98f 	ldh	r3,-26(fp)
    1148:	1880010e 	bge	r3,r2,1150 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
    114c:	1805883a 	mov	r2,r3
    1150:	10803fcc 	andi	r2,r2,255
    1154:	e1c00217 	ldw	r7,8(fp)
    1158:	100d883a 	mov	r6,r2
    115c:	01400204 	movi	r5,8
    1160:	e13ffb17 	ldw	r4,-20(fp)
    1164:	00097680 	call	9768 <_ZN8MAX3421e7bytesRdEhhPh>
    1168:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
    116c:	01800104 	movi	r6,4
    1170:	01403204 	movi	r5,200
    1174:	e13ffb17 	ldw	r4,-20(fp)
    1178:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
    117c:	e0bffe17 	ldw	r2,-8(fp)
    1180:	10c0000b 	ldhu	r3,0(r2)
    1184:	e0bff943 	ldbu	r2,-27(fp)
    1188:	1885883a 	add	r2,r3,r2
    118c:	1007883a 	mov	r3,r2
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
    1198:	e0fff943 	ldbu	r3,-27(fp)
    119c:	e0bffa83 	ldbu	r2,-22(fp)
    11a0:	18800536 	bltu	r3,r2,11b8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	1080000b 	ldhu	r2,0(r2)
    11ac:	10ffffcc 	andi	r3,r2,65535
    11b0:	e0bffa0b 	ldhu	r2,-24(fp)
    11b4:	18801536 	bltu	r3,r2,120c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
    11b8:	01403e04 	movi	r5,248
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    11c4:	10803fcc 	andi	r2,r2,255
    11c8:	1080040c 	andi	r2,r2,16
    11cc:	10000226 	beq	r2,zero,11d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
    11d0:	00c00044 	movi	r3,1
    11d4:	00000106 	br	11dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
    11d8:	0007883a 	mov	r3,zero
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	18c0004c 	andi	r3,r3,1
    11e4:	18cb883a 	add	r5,r3,r3
    11e8:	11000083 	ldbu	r4,2(r2)
    11ec:	00ffff44 	movi	r3,-3
    11f0:	20c6703a 	and	r3,r4,r3
    11f4:	1809883a 	mov	r4,r3
    11f8:	2807883a 	mov	r3,r5
    11fc:	20c6b03a 	or	r3,r4,r3
    1200:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
    1204:	e03ff905 	stb	zero,-28(fp)
                        break;
    1208:	00000706 	br	1228 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
    120c:	e0bfff03 	ldbu	r2,-4(fp)
    1210:	103f8026 	beq	r2,zero,1014 <__alt_data_end+0xfc001014>
                        delay(bInterval); // Delay according to polling interval
    1214:	e0bfff03 	ldbu	r2,-4(fp)
    1218:	1009883a 	mov	r4,r2
    121c:	00006840 	call	684 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
    1220:	003f7c06 	br	1014 <__alt_data_end+0xfc001014>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
    1224:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
    1228:	e0bff903 	ldbu	r2,-28(fp)
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
    1240:	defff604 	addi	sp,sp,-40
    1244:	dfc00915 	stw	ra,36(sp)
    1248:	df000815 	stw	fp,32(sp)
    124c:	df000804 	addi	fp,sp,32
    1250:	e13ffc15 	stw	r4,-16(fp)
    1254:	2809883a 	mov	r4,r5
    1258:	3007883a 	mov	r3,r6
    125c:	3805883a 	mov	r2,r7
    1260:	e13ffd05 	stb	r4,-12(fp)
    1264:	e0fffe05 	stb	r3,-8(fp)
    1268:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
    126c:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
    1270:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
    1274:	e0fffd03 	ldbu	r3,-12(fp)
    1278:	e13ffe03 	ldbu	r4,-8(fp)
    127c:	e17ffa04 	addi	r5,fp,-24
    1280:	e0bffb04 	addi	r2,fp,-20
    1284:	d8800015 	stw	r2,0(sp)
    1288:	280f883a 	mov	r7,r5
    128c:	200d883a 	mov	r6,r4
    1290:	180b883a 	mov	r5,r3
    1294:	e13ffc17 	ldw	r4,-16(fp)
    1298:	0000a100 	call	a10 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
    129c:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
    12a0:	e0bff903 	ldbu	r2,-28(fp)
    12a4:	10000226 	beq	r2,zero,12b0 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
    12a8:	e0bff903 	ldbu	r2,-28(fp)
    12ac:	00000b06 	br	12dc <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
    12b0:	e0fffa17 	ldw	r3,-24(fp)
    12b4:	e0bffb0b 	ldhu	r2,-20(fp)
    12b8:	113fffcc 	andi	r4,r2,65535
    12bc:	e17fff0b 	ldhu	r5,-4(fp)
    12c0:	e0800217 	ldw	r2,8(fp)
    12c4:	d8800015 	stw	r2,0(sp)
    12c8:	280f883a 	mov	r7,r5
    12cc:	200d883a 	mov	r6,r4
    12d0:	180b883a 	mov	r5,r3
    12d4:	e13ffc17 	ldw	r4,-16(fp)
    12d8:	00012f00 	call	12f0 <_ZN3USB11OutTransferEP6EpInfottPh>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00117 	ldw	ra,4(sp)
    12e4:	df000017 	ldw	fp,0(sp)
    12e8:	dec00204 	addi	sp,sp,8
    12ec:	f800283a 	ret

000012f0 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
    12f0:	defff404 	addi	sp,sp,-48
    12f4:	dfc00b15 	stw	ra,44(sp)
    12f8:	df000a15 	stw	fp,40(sp)
    12fc:	df000a04 	addi	fp,sp,40
    1300:	e13ffc15 	stw	r4,-16(fp)
    1304:	e17ffd15 	stw	r5,-12(fp)
    1308:	3007883a 	mov	r3,r6
    130c:	3805883a 	mov	r2,r7
    1310:	e0fffe0d 	sth	r3,-8(fp)
    1314:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
    1318:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
    131c:	e0800217 	ldw	r2,8(fp)
    1320:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
    1324:	e0bfff0b 	ldhu	r2,-4(fp)
    1328:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
    132c:	e0bffd17 	ldw	r2,-12(fp)
    1330:	10800043 	ldbu	r2,1(r2)
    1334:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
    1338:	e0bff903 	ldbu	r2,-28(fp)
    133c:	10000326 	beq	r2,zero,134c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
    1340:	e0bff903 	ldbu	r2,-28(fp)
    1344:	10801070 	cmpltui	r2,r2,65
    1348:	1000021e 	bne	r2,zero,1354 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
    134c:	00bff684 	movi	r2,-38
    1350:	0000cd06 	br	1688 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    1354:	00006dc0 	call	6dc <_Z6millisv>
    1358:	1084e204 	addi	r2,r2,5000
    135c:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1360:	e0bffd17 	ldw	r2,-12(fp)
    1364:	10800083 	ldbu	r2,2(r2)
    1368:	1080004c 	andi	r2,r2,1
    136c:	10803fcc 	andi	r2,r2,255
    1370:	10000226 	beq	r2,zero,137c <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
    1374:	00802004 	movi	r2,128
    1378:	00000106 	br	1380 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
    137c:	00801004 	movi	r2,64
    1380:	100d883a 	mov	r6,r2
    1384:	01403a04 	movi	r5,232
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
    1390:	e0bff88b 	ldhu	r2,-30(fp)
    1394:	1000a926 	beq	r2,zero,163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
    1398:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
    139c:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
    13a0:	e0bff903 	ldbu	r2,-28(fp)
    13a4:	e17ff88b 	ldhu	r5,-30(fp)
    13a8:	10ffffcc 	andi	r3,r2,65535
    13ac:	293fffcc 	andi	r4,r5,65535
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
    13b4:	2805883a 	mov	r2,r5
    13b8:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
    13bc:	e0bffb0b 	ldhu	r2,-20(fp)
    13c0:	10803fcc 	andi	r2,r2,255
    13c4:	e1fff717 	ldw	r7,-36(fp)
    13c8:	100d883a 	mov	r6,r2
    13cc:	01400404 	movi	r5,16
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	00095480 	call	9548 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
    13d8:	e0bffb0b 	ldhu	r2,-20(fp)
    13dc:	10803fcc 	andi	r2,r2,255
    13e0:	100d883a 	mov	r6,r2
    13e4:	01400e04 	movi	r5,56
    13e8:	e13ffc17 	ldw	r4,-16(fp)
    13ec:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800003 	ldbu	r2,0(r2)
    13f8:	10800814 	ori	r2,r2,32
    13fc:	10803fcc 	andi	r2,r2,255
    1400:	100d883a 	mov	r6,r2
    1404:	01403c04 	movi	r5,240
    1408:	e13ffc17 	ldw	r4,-16(fp)
    140c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    1410:	01403204 	movi	r5,200
    1414:	e13ffc17 	ldw	r4,-16(fp)
    1418:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    141c:	0084303a 	nor	r2,zero,r2
    1420:	10803fcc 	andi	r2,r2,255
    1424:	1004d1fa 	srli	r2,r2,7
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000126 	beq	r2,zero,1434 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
    1430:	003ff706 	br	1410 <__alt_data_end+0xfc001410>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    1434:	01802004 	movi	r6,128
    1438:	01403204 	movi	r5,200
    143c:	e13ffc17 	ldw	r4,-16(fp)
    1440:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
    1444:	01403e04 	movi	r5,248
    1448:	e13ffc17 	ldw	r4,-16(fp)
    144c:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1450:	108003cc 	andi	r2,r2,15
    1454:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1458:	e0bff603 	ldbu	r2,-40(fp)
    145c:	10000726 	beq	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1460:	00006dc0 	call	6dc <_Z6millisv>
    1464:	1007883a 	mov	r3,r2
    1468:	e0bffa17 	ldw	r2,-24(fp)
    146c:	1885c83a 	sub	r2,r3,r2
    1470:	1000020e 	bge	r2,zero,147c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
    1474:	00800044 	movi	r2,1
    1478:	00000106 	br	1480 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
    147c:	0005883a 	mov	r2,zero
    1480:	10803fcc 	andi	r2,r2,255
    1484:	10006426 	beq	r2,zero,1618 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
    1488:	e0bff603 	ldbu	r2,-40(fp)
    148c:	10c001a0 	cmpeqi	r3,r2,6
    1490:	1800151e 	bne	r3,zero,14e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
    1494:	10c003a0 	cmpeqi	r3,r2,14
    1498:	18000c1e 	bne	r3,zero,14cc <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
    149c:	10800120 	cmpeqi	r2,r2,4
    14a0:	1000011e 	bne	r2,zero,14a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
    14a4:	00006506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
    14a8:	e0bff80b 	ldhu	r2,-32(fp)
    14ac:	10800044 	addi	r2,r2,1
    14b0:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
    14b4:	e0bffe0b 	ldhu	r2,-8(fp)
    14b8:	10002826 	beq	r2,zero,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
    14bc:	e0fff80b 	ldhu	r3,-32(fp)
    14c0:	e0bffe0b 	ldhu	r2,-8(fp)
    14c4:	1880251e 	bne	r3,r2,155c <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
    14c8:	00005c06 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
    14cc:	e0bff643 	ldbu	r2,-39(fp)
    14d0:	10800044 	addi	r2,r2,1
    14d4:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
    14d8:	e0bff643 	ldbu	r2,-39(fp)
    14dc:	108000d8 	cmpnei	r2,r2,3
    14e0:	1000201e 	bne	r2,zero,1564 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
    14e4:	00005506 	br	163c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
    14e8:	01403e04 	movi	r5,248
    14ec:	e13ffc17 	ldw	r4,-16(fp)
    14f0:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    14f4:	10803fcc 	andi	r2,r2,255
    14f8:	1080080c 	andi	r2,r2,32
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1007883a 	mov	r3,r2
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	1940004c 	andi	r5,r3,1
    150c:	11000083 	ldbu	r4,2(r2)
    1510:	00ffff84 	movi	r3,-2
    1514:	20c6703a 	and	r3,r4,r3
    1518:	1809883a 	mov	r4,r3
    151c:	2807883a 	mov	r3,r5
    1520:	20c6b03a 	or	r3,r4,r3
    1524:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10800083 	ldbu	r2,2(r2)
    1530:	1080004c 	andi	r2,r2,1
    1534:	10803fcc 	andi	r2,r2,255
    1538:	10000226 	beq	r2,zero,1544 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
    153c:	00802004 	movi	r2,128
    1540:	00000106 	br	1548 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
    1544:	00801004 	movi	r2,64
    1548:	100d883a 	mov	r6,r2
    154c:	01403a04 	movi	r5,232
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                                        break;
    1558:	00000306 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    155c:	0001883a 	nop
    1560:	00000106 	br	1568 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
    1564:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
    1568:	000d883a 	mov	r6,zero
    156c:	01400e04 	movi	r5,56
    1570:	e13ffc17 	ldw	r4,-16(fp)
    1574:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
    1578:	e0bff717 	ldw	r2,-36(fp)
    157c:	10800003 	ldbu	r2,0(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	100d883a 	mov	r6,r2
    1588:	01400404 	movi	r5,16
    158c:	e13ffc17 	ldw	r4,-16(fp)
    1590:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
    1594:	e0bffb0b 	ldhu	r2,-20(fp)
    1598:	10803fcc 	andi	r2,r2,255
    159c:	100d883a 	mov	r6,r2
    15a0:	01400e04 	movi	r5,56
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
    15ac:	e0bffd17 	ldw	r2,-12(fp)
    15b0:	10800003 	ldbu	r2,0(r2)
    15b4:	10800814 	ori	r2,r2,32
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	100d883a 	mov	r6,r2
    15c0:	01403c04 	movi	r5,240
    15c4:	e13ffc17 	ldw	r4,-16(fp)
    15c8:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
    15cc:	01403204 	movi	r5,200
    15d0:	e13ffc17 	ldw	r4,-16(fp)
    15d4:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    15d8:	0084303a 	nor	r2,zero,r2
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	1004d1fa 	srli	r2,r2,7
    15e4:	10803fcc 	andi	r2,r2,255
    15e8:	10000126 	beq	r2,zero,15f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
    15ec:	003ff706 	br	15cc <__alt_data_end+0xfc0015cc>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
    15f0:	01802004 	movi	r6,128
    15f4:	01403204 	movi	r5,200
    15f8:	e13ffc17 	ldw	r4,-16(fp)
    15fc:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
    1600:	01403e04 	movi	r5,248
    1604:	e13ffc17 	ldw	r4,-16(fp)
    1608:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    160c:	108003cc 	andi	r2,r2,15
    1610:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
    1614:	003f9006 	br	1458 <__alt_data_end+0xfc001458>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
    1618:	e0fff88b 	ldhu	r3,-30(fp)
    161c:	e0bffb0b 	ldhu	r2,-20(fp)
    1620:	1885c83a 	sub	r2,r3,r2
    1624:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
    1628:	e0bffb0b 	ldhu	r2,-20(fp)
    162c:	e0fff717 	ldw	r3,-36(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
    1638:	003f5506 	br	1390 <__alt_data_end+0xfc001390>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
    163c:	01403e04 	movi	r5,248
    1640:	e13ffc17 	ldw	r4,-16(fp)
    1644:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080080c 	andi	r2,r2,32
    1650:	10000226 	beq	r2,zero,165c <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
    1654:	00c00044 	movi	r3,1
    1658:	00000106 	br	1660 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
    165c:	0007883a 	mov	r3,zero
    1660:	e0bffd17 	ldw	r2,-12(fp)
    1664:	1940004c 	andi	r5,r3,1
    1668:	11000083 	ldbu	r4,2(r2)
    166c:	00ffff84 	movi	r3,-2
    1670:	20c6703a 	and	r3,r4,r3
    1674:	1809883a 	mov	r4,r3
    1678:	2807883a 	mov	r3,r5
    167c:	20c6b03a 	or	r3,r4,r3
    1680:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
    1684:	e0bff603 	ldbu	r2,-40(fp)
}
    1688:	e037883a 	mov	sp,fp
    168c:	dfc00117 	ldw	ra,4(sp)
    1690:	df000017 	ldw	fp,0(sp)
    1694:	dec00204 	addi	sp,sp,8
    1698:	f800283a 	ret

0000169c <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
    169c:	defff704 	addi	sp,sp,-36
    16a0:	dfc00815 	stw	ra,32(sp)
    16a4:	df000715 	stw	fp,28(sp)
    16a8:	df000704 	addi	fp,sp,28
    16ac:	e13ffc15 	stw	r4,-16(fp)
    16b0:	2809883a 	mov	r4,r5
    16b4:	3007883a 	mov	r3,r6
    16b8:	3805883a 	mov	r2,r7
    16bc:	e13ffd05 	stb	r4,-12(fp)
    16c0:	e0fffe05 	stb	r3,-8(fp)
    16c4:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
    16c8:	00006dc0 	call	6dc <_Z6millisv>
    16cc:	1084e204 	addi	r2,r2,5000
    16d0:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
    16d4:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
    16d8:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
    16dc:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    16e0:	00006dc0 	call	6dc <_Z6millisv>
    16e4:	1007883a 	mov	r3,r2
    16e8:	e0bffa17 	ldw	r2,-24(fp)
    16ec:	1885c83a 	sub	r2,r3,r2
    16f0:	1004d7fa 	srli	r2,r2,31
    16f4:	10803fcc 	andi	r2,r2,255
    16f8:	10004226 	beq	r2,zero,1804 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
    16fc:	e0fffd03 	ldbu	r3,-12(fp)
    1700:	e0bffe03 	ldbu	r2,-8(fp)
    1704:	1884b03a 	or	r2,r3,r2
    1708:	10803fcc 	andi	r2,r2,255
    170c:	100d883a 	mov	r6,r2
    1710:	01403c04 	movi	r5,240
    1714:	e13ffc17 	ldw	r4,-16(fp)
    1718:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
    171c:	00bfffc4 	movi	r2,-1
    1720:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
    1724:	00006dc0 	call	6dc <_Z6millisv>
    1728:	1007883a 	mov	r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	1885c83a 	sub	r2,r3,r2
    1734:	1004d7fa 	srli	r2,r2,31
    1738:	10803fcc 	andi	r2,r2,255
    173c:	10000e26 	beq	r2,zero,1778 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
    1740:	01403204 	movi	r5,200
    1744:	e13ffc17 	ldw	r4,-16(fp)
    1748:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    174c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
    1750:	e0bffb03 	ldbu	r2,-20(fp)
    1754:	10803fcc 	andi	r2,r2,255
    1758:	1080201c 	xori	r2,r2,128
    175c:	10bfe004 	addi	r2,r2,-128
    1760:	103ff00e 	bge	r2,zero,1724 <__alt_data_end+0xfc001724>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
    1764:	01802004 	movi	r6,128
    1768:	01403204 	movi	r5,200
    176c:	e13ffc17 	ldw	r4,-16(fp)
    1770:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
    1774:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
    1778:	01403e04 	movi	r5,248
    177c:	e13ffc17 	ldw	r4,-16(fp)
    1780:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1784:	108003cc 	andi	r2,r2,15
    1788:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
    178c:	e0bff903 	ldbu	r2,-28(fp)
    1790:	10c00120 	cmpeqi	r3,r2,4
    1794:	1800031e 	bne	r3,zero,17a4 <_ZN3USB11dispatchPktEhht+0x108>
    1798:	108003a0 	cmpeqi	r2,r2,14
    179c:	10000b1e 	bne	r2,zero,17cc <_ZN3USB11dispatchPktEhht+0x130>
    17a0:	00001206 	br	17ec <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
    17a4:	e0bff98b 	ldhu	r2,-26(fp)
    17a8:	10800044 	addi	r2,r2,1
    17ac:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
    17b0:	e0bfff0b 	ldhu	r2,-4(fp)
    17b4:	10000f26 	beq	r2,zero,17f4 <_ZN3USB11dispatchPktEhht+0x158>
    17b8:	e0fff98b 	ldhu	r3,-26(fp)
    17bc:	e0bfff0b 	ldhu	r2,-4(fp)
    17c0:	18800c1e 	bne	r3,r2,17f4 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
    17c4:	e0bff903 	ldbu	r2,-28(fp)
    17c8:	00000f06 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
    17cc:	e0bff943 	ldbu	r2,-27(fp)
    17d0:	10800044 	addi	r2,r2,1
    17d4:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
    17d8:	e0bff943 	ldbu	r2,-27(fp)
    17dc:	108000d8 	cmpnei	r2,r2,3
    17e0:	1000061e 	bne	r2,zero,17fc <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
    17e4:	e0bff903 	ldbu	r2,-28(fp)
    17e8:	00000706 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
    17ec:	e0bff903 	ldbu	r2,-28(fp)
    17f0:	00000506 	br	1808 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
    17f4:	0001883a 	nop
    17f8:	003fb906 	br	16e0 <__alt_data_end+0xfc0016e0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
    17fc:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
    1800:	003fb706 	br	16e0 <__alt_data_end+0xfc0016e0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
    1804:	e0bff903 	ldbu	r2,-28(fp)
}
    1808:	e037883a 	mov	sp,fp
    180c:	dfc00117 	ldw	ra,4(sp)
    1810:	df000017 	ldw	fp,0(sp)
    1814:	dec00204 	addi	sp,sp,8
    1818:	f800283a 	ret

0000181c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
    181c:	defffa04 	addi	sp,sp,-24
    1820:	dfc00515 	stw	ra,20(sp)
    1824:	df000415 	stw	fp,16(sp)
    1828:	df000404 	addi	fp,sp,16
    182c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
    1830:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
    1834:	e13ffe17 	ldw	r4,-8(fp)
    1838:	0009d500 	call	9d50 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
    183c:	e13ffe17 	ldw	r4,-8(fp)
    1840:	00094980 	call	9498 <_ZN8MAX3421e12getVbusStateEv>
    1844:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
    1848:	e0bffcc3 	ldbu	r2,-13(fp)
    184c:	10c00060 	cmpeqi	r3,r2,1
    1850:	1800091e 	bne	r3,zero,1878 <_ZN3USB4TaskEv+0x5c>
    1854:	10c00088 	cmpgei	r3,r2,2
    1858:	1800021e 	bne	r3,zero,1864 <_ZN3USB4TaskEv+0x48>
    185c:	10000a26 	beq	r2,zero,1888 <_ZN3USB4TaskEv+0x6c>
    1860:	00001f06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
    1864:	10c000a0 	cmpeqi	r3,r2,2
    1868:	1800121e 	bne	r3,zero,18b4 <_ZN3USB4TaskEv+0x98>
    186c:	108000e0 	cmpeqi	r2,r2,3
    1870:	10000e1e 	bne	r2,zero,18ac <_ZN3USB4TaskEv+0x90>
    1874:	00001a06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
    1878:	008004c4 	movi	r2,19
    187c:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
    1880:	e03ffc05 	stb	zero,-16(fp)
                        break;
    1884:	00001606 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
    1888:	d0b23d43 	ldbu	r2,-14091(gp)
    188c:	10803fcc 	andi	r2,r2,255
    1890:	10803c0c 	andi	r2,r2,240
    1894:	10800420 	cmpeqi	r2,r2,16
    1898:	1000021e 	bne	r2,zero,18a4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
    189c:	00800444 	movi	r2,17
    18a0:	d0b23d45 	stb	r2,-14091(gp)
                        lowspeed = false;
    18a4:	e03ffc05 	stb	zero,-16(fp)
                        break;
    18a8:	00000d06 	br	18e0 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
    18ac:	00800044 	movi	r2,1
    18b0:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
    18b4:	d0b23d43 	ldbu	r2,-14091(gp)
    18b8:	10803fcc 	andi	r2,r2,255
    18bc:	10803c0c 	andi	r2,r2,240
    18c0:	10800418 	cmpnei	r2,r2,16
    18c4:	1000051e 	bne	r2,zero,18dc <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
    18c8:	00006dc0 	call	6dc <_Z6millisv>
    18cc:	10803204 	addi	r2,r2,200
    18d0:	d0b23e15 	stw	r2,-14088(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
    18d4:	00800804 	movi	r2,32
    18d8:	d0b23d45 	stb	r2,-14091(gp)
                        }
                        break;
    18dc:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    18e0:	e03ffc45 	stb	zero,-15(fp)
    18e4:	e0bffc43 	ldbu	r2,-15(fp)
    18e8:	10800428 	cmpgeui	r2,r2,16
    18ec:	1000201e 	bne	r2,zero,1970 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
    18f0:	e0bffc43 	ldbu	r2,-15(fp)
    18f4:	e0fffe17 	ldw	r3,-8(fp)
    18f8:	10800784 	addi	r2,r2,30
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1885883a 	add	r2,r3,r2
    1908:	10800017 	ldw	r2,0(r2)
    190c:	10001426 	beq	r2,zero,1960 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
    1910:	e0bffc43 	ldbu	r2,-15(fp)
    1914:	e0fffe17 	ldw	r3,-8(fp)
    1918:	10800784 	addi	r2,r2,30
    191c:	1085883a 	add	r2,r2,r2
    1920:	1085883a 	add	r2,r2,r2
    1924:	1885883a 	add	r2,r3,r2
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10800017 	ldw	r2,0(r2)
    1930:	10800304 	addi	r2,r2,12
    1934:	10c00017 	ldw	r3,0(r2)
    1938:	e0bffc43 	ldbu	r2,-15(fp)
    193c:	e13ffe17 	ldw	r4,-8(fp)
    1940:	10800784 	addi	r2,r2,30
    1944:	1085883a 	add	r2,r2,r2
    1948:	1085883a 	add	r2,r2,r2
    194c:	2085883a 	add	r2,r4,r2
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	183ee83a 	callr	r3
    195c:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1960:	e0bffc43 	ldbu	r2,-15(fp)
    1964:	10800044 	addi	r2,r2,1
    1968:	e0bffc45 	stb	r2,-15(fp)
    196c:	003fdd06 	br	18e4 <__alt_data_end+0xfc0018e4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    1970:	d0b23d43 	ldbu	r2,-14091(gp)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	10c01020 	cmpeqi	r3,r2,64
    197c:	1800511e 	bne	r3,zero,1ac4 <_ZN3USB4TaskEv+0x2a8>
    1980:	10c01048 	cmpgei	r3,r2,65
    1984:	18000c1e 	bne	r3,zero,19b8 <_ZN3USB4TaskEv+0x19c>
    1988:	10c004e0 	cmpeqi	r3,r2,19
    198c:	1800a01e 	bne	r3,zero,1c10 <_ZN3USB4TaskEv+0x3f4>
    1990:	10c00508 	cmpgei	r3,r2,20
    1994:	1800031e 	bne	r3,zero,19a4 <_ZN3USB4TaskEv+0x188>
    1998:	10800460 	cmpeqi	r2,r2,17
    199c:	10000f1e 	bne	r2,zero,19dc <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
    19a0:	0000a406 	br	1c34 <_ZN3USB4TaskEv+0x418>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19a4:	10c00820 	cmpeqi	r3,r2,32
    19a8:	1800351e 	bne	r3,zero,1a80 <_ZN3USB4TaskEv+0x264>
    19ac:	10800c20 	cmpeqi	r2,r2,48
    19b0:	10003d1e 	bne	r2,zero,1aa8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19b4:	00009f06 	br	1c34 <_ZN3USB4TaskEv+0x418>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
    19b8:	10c02020 	cmpeqi	r3,r2,128
    19bc:	1800741e 	bne	r3,zero,1b90 <_ZN3USB4TaskEv+0x374>
    19c0:	10c02048 	cmpgei	r3,r2,129
    19c4:	18009b1e 	bne	r3,zero,1c34 <_ZN3USB4TaskEv+0x418>
    19c8:	10c01420 	cmpeqi	r3,r2,80
    19cc:	1800521e 	bne	r3,zero,1b18 <_ZN3USB4TaskEv+0x2fc>
    19d0:	10801460 	cmpeqi	r2,r2,81
    19d4:	10005e1e 	bne	r2,zero,1b50 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    19d8:	00009606 	br	1c34 <_ZN3USB4TaskEv+0x418>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
    19dc:	e13ffe17 	ldw	r4,-8(fp)
    19e0:	000075c0 	call	75c <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    19e4:	e03ffc85 	stb	zero,-14(fp)
    19e8:	e0bffc83 	ldbu	r2,-14(fp)
    19ec:	10800428 	cmpgeui	r2,r2,16
    19f0:	1000201e 	bne	r2,zero,1a74 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
    19f4:	e0bffc83 	ldbu	r2,-14(fp)
    19f8:	e0fffe17 	ldw	r3,-8(fp)
    19fc:	10800784 	addi	r2,r2,30
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	1885883a 	add	r2,r3,r2
    1a0c:	10800017 	ldw	r2,0(r2)
    1a10:	10001426 	beq	r2,zero,1a64 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
    1a14:	e0bffc83 	ldbu	r2,-14(fp)
    1a18:	e0fffe17 	ldw	r3,-8(fp)
    1a1c:	10800784 	addi	r2,r2,30
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	1085883a 	add	r2,r2,r2
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	10800017 	ldw	r2,0(r2)
    1a34:	10800204 	addi	r2,r2,8
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bffc83 	ldbu	r2,-14(fp)
    1a40:	e13ffe17 	ldw	r4,-8(fp)
    1a44:	10800784 	addi	r2,r2,30
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1085883a 	add	r2,r2,r2
    1a50:	2085883a 	add	r2,r4,r2
    1a54:	10800017 	ldw	r2,0(r2)
    1a58:	1009883a 	mov	r4,r2
    1a5c:	183ee83a 	callr	r3
    1a60:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
    1a64:	e0bffc83 	ldbu	r2,-14(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffc85 	stb	r2,-14(fp)
    1a70:	003fdd06 	br	19e8 <__alt_data_end+0xfc0019e8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
    1a74:	00800484 	movi	r2,18
    1a78:	d0b23d45 	stb	r2,-14091(gp)
                        break;
    1a7c:	00006d06 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
    1a80:	00006dc0 	call	6dc <_Z6millisv>
    1a84:	1007883a 	mov	r3,r2
    1a88:	d0b23e17 	ldw	r2,-14088(gp)
    1a8c:	1885c83a 	sub	r2,r3,r2
    1a90:	0084303a 	nor	r2,zero,r2
    1a94:	1004d7fa 	srli	r2,r2,31
    1a98:	10803fcc 	andi	r2,r2,255
    1a9c:	10005e26 	beq	r2,zero,1c18 <_ZN3USB4TaskEv+0x3fc>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
    1aa0:	00800c04 	movi	r2,48
    1aa4:	d0b23d45 	stb	r2,-14091(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1aa8:	01800044 	movi	r6,1
    1aac:	01403a04 	movi	r5,232
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
    1ab8:	00801004 	movi	r2,64
    1abc:	d0b23d45 	stb	r2,-14091(gp)
                        break;
    1ac0:	00005c06 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
    1ac4:	01403a04 	movi	r5,232
    1ac8:	e13ffe17 	ldw	r4,-8(fp)
    1acc:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1ad0:	10803fcc 	andi	r2,r2,255
    1ad4:	1080004c 	andi	r2,r2,1
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10004f26 	beq	r2,zero,1c20 <_ZN3USB4TaskEv+0x404>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
    1ae4:	01403604 	movi	r5,216
    1ae8:	e13ffe17 	ldw	r4,-8(fp)
    1aec:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1af0:	10800214 	ori	r2,r2,8
    1af4:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
    1af8:	e0bffcc3 	ldbu	r2,-13(fp)
    1afc:	100d883a 	mov	r6,r2
    1b00:	01403604 	movi	r5,216
    1b04:	e13ffe17 	ldw	r4,-8(fp)
    1b08:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
    1b0c:	00801404 	movi	r2,80
    1b10:	d0b23d45 	stb	r2,-14091(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1b14:	00004206 	br	1c20 <_ZN3USB4TaskEv+0x404>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
    1b18:	01403204 	movi	r5,200
    1b1c:	e13ffe17 	ldw	r4,-8(fp)
    1b20:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1080100c 	andi	r2,r2,64
    1b2c:	1004c03a 	cmpne	r2,r2,zero
    1b30:	10803fcc 	andi	r2,r2,255
    1b34:	10003c26 	beq	r2,zero,1c28 <_ZN3USB4TaskEv+0x40c>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
    1b38:	00801444 	movi	r2,81
    1b3c:	d0b23d45 	stb	r2,-14091(gp)
                                delay = (uint32_t)millis() + 20;
    1b40:	00006dc0 	call	6dc <_Z6millisv>
    1b44:	10800504 	addi	r2,r2,20
    1b48:	d0b23e15 	stw	r2,-14088(gp)
                        }
                        break;
    1b4c:	00003606 	br	1c28 <_ZN3USB4TaskEv+0x40c>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
    1b50:	00006dc0 	call	6dc <_Z6millisv>
    1b54:	1007883a 	mov	r3,r2
    1b58:	d0b23e17 	ldw	r2,-14088(gp)
    1b5c:	1885c83a 	sub	r2,r3,r2
    1b60:	0084303a 	nor	r2,zero,r2
    1b64:	1004d7fa 	srli	r2,r2,31
    1b68:	10803fcc 	andi	r2,r2,255
    1b6c:	10003026 	beq	r2,zero,1c30 <_ZN3USB4TaskEv+0x414>
    1b70:	00bfe004 	movi	r2,-128
    1b74:	d0b23d45 	stb	r2,-14091(gp)
                        else break; // don't fall through
                        printf("IN: %X\n", usb_task_state);
    1b78:	d0b23d43 	ldbu	r2,-14091(gp)
    1b7c:	10803fcc 	andi	r2,r2,255
    1b80:	100b883a 	mov	r5,r2
    1b84:	010000b4 	movhi	r4,2
    1b88:	210eae04 	addi	r4,r4,15032
    1b8c:	000edfc0 	call	edfc <printf>
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);
                	printf("CONFIGURING\n");
    1b90:	010000b4 	movhi	r4,2
    1b94:	210eb004 	addi	r4,r4,15040
    1b98:	000ef180 	call	ef18 <puts>

                        rcode = Configuring(0, 0, lowspeed);
    1b9c:	e0bffc03 	ldbu	r2,-16(fp)
    1ba0:	100f883a 	mov	r7,r2
    1ba4:	000d883a 	mov	r6,zero
    1ba8:	000b883a 	mov	r5,zero
    1bac:	e13ffe17 	ldw	r4,-8(fp)
    1bb0:	000203c0 	call	203c <_ZN3USB11ConfiguringEhhb>
    1bb4:	e0bffd05 	stb	r2,-12(fp)
                        printf("RCODING\n");
    1bb8:	010000b4 	movhi	r4,2
    1bbc:	210eb304 	addi	r4,r4,15052
    1bc0:	000ef180 	call	ef18 <puts>

                        if(rcode) {
    1bc4:	e0bffd03 	ldbu	r2,-12(fp)
    1bc8:	10000b26 	beq	r2,zero,1bf8 <_ZN3USB4TaskEv+0x3dc>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
    1bcc:	e0bffd03 	ldbu	r2,-12(fp)
    1bd0:	108034a0 	cmpeqi	r2,r2,210
    1bd4:	10000a1e 	bne	r2,zero,1c00 <_ZN3USB4TaskEv+0x3e4>
                                        usb_error = rcode;
    1bd8:	e0bffd03 	ldbu	r2,-12(fp)
    1bdc:	d0b23d05 	stb	r2,-14092(gp)
                                        usb_task_state = USB_STATE_ERROR;
    1be0:	00bfe804 	movi	r2,-96
    1be4:	d0b23d45 	stb	r2,-14091(gp)
                                        printf("ERROR\n");
    1be8:	010000b4 	movhi	r4,2
    1bec:	210eb504 	addi	r4,r4,15060
    1bf0:	000ef180 	call	ef18 <puts>
    1bf4:	00000206 	br	1c00 <_ZN3USB4TaskEv+0x3e4>
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
    1bf8:	00bfe404 	movi	r2,-112
    1bfc:	d0b23d45 	stb	r2,-14091(gp)
                        printf("CONFIG\n");
    1c00:	010000b4 	movhi	r4,2
    1c04:	210eb704 	addi	r4,r4,15068
    1c08:	000ef180 	call	ef18 <puts>
                        break;
    1c0c:	00000906 	br	1c34 <_ZN3USB4TaskEv+0x418>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
    1c10:	0001883a 	nop
    1c14:	00000706 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
    1c18:	0001883a 	nop
    1c1c:	00000506 	br	1c34 <_ZN3USB4TaskEv+0x418>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
    1c20:	0001883a 	nop
    1c24:	00000306 	br	1c34 <_ZN3USB4TaskEv+0x418>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
    1c28:	0001883a 	nop
    1c2c:	00000106 	br	1c34 <_ZN3USB4TaskEv+0x418>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
    1c30:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
    1c34:	0001883a 	nop
    1c38:	e037883a 	mov	sp,fp
    1c3c:	dfc00117 	ldw	ra,4(sp)
    1c40:	df000017 	ldw	fp,0(sp)
    1c44:	dec00204 	addi	sp,sp,8
    1c48:	f800283a 	ret

00001c4c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
    1c4c:	defff704 	addi	sp,sp,-36
    1c50:	dfc00815 	stw	ra,32(sp)
    1c54:	df000715 	stw	fp,28(sp)
    1c58:	df000704 	addi	fp,sp,28
    1c5c:	e13ffc15 	stw	r4,-16(fp)
    1c60:	2809883a 	mov	r4,r5
    1c64:	3007883a 	mov	r3,r6
    1c68:	3805883a 	mov	r2,r7
    1c6c:	e13ffd05 	stb	r4,-12(fp)
    1c70:	e0fffe05 	stb	r3,-8(fp)
    1c74:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
    1c78:	e03ff915 	stw	zero,-28(fp)
    1c7c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
    1c80:	e0bffc17 	ldw	r2,-16(fp)
    1c84:	000b883a 	mov	r5,zero
    1c88:	1009883a 	mov	r4,r2
    1c8c:	0002a140 	call	2a14 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1c90:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
    1c94:	e0bff917 	ldw	r2,-28(fp)
    1c98:	1000021e 	bne	r2,zero,1ca4 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1c9c:	00bff584 	movi	r2,-42
    1ca0:	00003d06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
    1ca4:	e0bff917 	ldw	r2,-28(fp)
    1ca8:	10c00003 	ldbu	r3,0(r2)
    1cac:	11000043 	ldbu	r4,1(r2)
    1cb0:	2008923a 	slli	r4,r4,8
    1cb4:	20c6b03a 	or	r3,r4,r3
    1cb8:	11000083 	ldbu	r4,2(r2)
    1cbc:	2008943a 	slli	r4,r4,16
    1cc0:	20c6b03a 	or	r3,r4,r3
    1cc4:	108000c3 	ldbu	r2,3(r2)
    1cc8:	1004963a 	slli	r2,r2,24
    1ccc:	10c4b03a 	or	r2,r2,r3
    1cd0:	1000021e 	bne	r2,zero,1cdc <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
    1cd4:	00bff5c4 	movi	r2,-41
    1cd8:	00002f06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
    1cdc:	e0bff917 	ldw	r2,-28(fp)
    1ce0:	e0ffff03 	ldbu	r3,-4(fp)
    1ce4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
    1ce8:	e0bffc17 	ldw	r2,-16(fp)
    1cec:	e0fffd03 	ldbu	r3,-12(fp)
    1cf0:	e13ffe03 	ldbu	r4,-8(fp)
    1cf4:	200f883a 	mov	r7,r4
    1cf8:	000d883a 	mov	r6,zero
    1cfc:	180b883a 	mov	r5,r3
    1d00:	1009883a 	mov	r4,r2
    1d04:	0002acc0 	call	2acc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    1d08:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
    1d0c:	e0bffb03 	ldbu	r2,-20(fp)
    1d10:	1000021e 	bne	r2,zero,1d1c <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    1d14:	00bff504 	movi	r2,-44
    1d18:	00001f06 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
    1d1c:	e0bffc17 	ldw	r2,-16(fp)
    1d20:	e0fffb03 	ldbu	r3,-20(fp)
    1d24:	180b883a 	mov	r5,r3
    1d28:	1009883a 	mov	r4,r2
    1d2c:	0002a140 	call	2a14 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    1d30:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
    1d34:	e0bffa17 	ldw	r2,-24(fp)
    1d38:	1000021e 	bne	r2,zero,1d44 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    1d3c:	00bff584 	movi	r2,-42
    1d40:	00001506 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
    1d44:	e0bffa17 	ldw	r2,-24(fp)
    1d48:	e0ffff03 	ldbu	r3,-4(fp)
    1d4c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
    1d50:	e0bffb03 	ldbu	r2,-20(fp)
    1d54:	100f883a 	mov	r7,r2
    1d58:	000d883a 	mov	r6,zero
    1d5c:	000b883a 	mov	r5,zero
    1d60:	e13ffc17 	ldw	r4,-16(fp)
    1d64:	00027d80 	call	27d8 <_ZN3USB7setAddrEhhh>
    1d68:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
    1d6c:	e0bffb43 	ldbu	r2,-19(fp)
    1d70:	10000826 	beq	r2,zero,1d94 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
    1d74:	e0bffc17 	ldw	r2,-16(fp)
    1d78:	e0fffb03 	ldbu	r3,-20(fp)
    1d7c:	180b883a 	mov	r5,r3
    1d80:	1009883a 	mov	r4,r2
    1d84:	0002d2c0 	call	2d2c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
    1d88:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
    1d8c:	e0bffb43 	ldbu	r2,-19(fp)
    1d90:	00000106 	br	1d98 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
    1d94:	0005883a 	mov	r2,zero
};
    1d98:	e037883a 	mov	sp,fp
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret

00001dac <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
    1dac:	defff804 	addi	sp,sp,-32
    1db0:	dfc00715 	stw	ra,28(sp)
    1db4:	df000615 	stw	fp,24(sp)
    1db8:	df000604 	addi	fp,sp,24
    1dbc:	e13ffb15 	stw	r4,-20(fp)
    1dc0:	3009883a 	mov	r4,r6
    1dc4:	3807883a 	mov	r3,r7
    1dc8:	e0800217 	ldw	r2,8(fp)
    1dcc:	e17ffc05 	stb	r5,-16(fp)
    1dd0:	e13ffd05 	stb	r4,-12(fp)
    1dd4:	e0fffe05 	stb	r3,-8(fp)
    1dd8:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
    1ddc:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
    1de0:	e0bffc03 	ldbu	r2,-16(fp)
    1de4:	e0fffb17 	ldw	r3,-20(fp)
    1de8:	10800784 	addi	r2,r2,30
    1dec:	1085883a 	add	r2,r2,r2
    1df0:	1085883a 	add	r2,r2,r2
    1df4:	1885883a 	add	r2,r3,r2
    1df8:	10800017 	ldw	r2,0(r2)
    1dfc:	10800017 	ldw	r2,0(r2)
    1e00:	10800104 	addi	r2,r2,4
    1e04:	10c00017 	ldw	r3,0(r2)
    1e08:	e0bffc03 	ldbu	r2,-16(fp)
    1e0c:	e13ffb17 	ldw	r4,-20(fp)
    1e10:	10800784 	addi	r2,r2,30
    1e14:	1085883a 	add	r2,r2,r2
    1e18:	1085883a 	add	r2,r2,r2
    1e1c:	2085883a 	add	r2,r4,r2
    1e20:	10800017 	ldw	r2,0(r2)
    1e24:	e13ffd03 	ldbu	r4,-12(fp)
    1e28:	e17ffe03 	ldbu	r5,-8(fp)
    1e2c:	e1bfff03 	ldbu	r6,-4(fp)
    1e30:	300f883a 	mov	r7,r6
    1e34:	280d883a 	mov	r6,r5
    1e38:	200b883a 	mov	r5,r4
    1e3c:	1009883a 	mov	r4,r2
    1e40:	183ee83a 	callr	r3
    1e44:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
    1e48:	e0bffa43 	ldbu	r2,-23(fp)
    1e4c:	10803818 	cmpnei	r2,r2,224
    1e50:	10001f1e 	bne	r2,zero,1ed0 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
    1e54:	e0bffd03 	ldbu	r2,-12(fp)
    1e58:	1000071e 	bne	r2,zero,1e78 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1e5c:	01800044 	movi	r6,1
    1e60:	01403a04 	movi	r5,232
    1e64:	e13ffb17 	ldw	r4,-20(fp)
    1e68:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1e6c:	01001984 	movi	r4,102
    1e70:	00006840 	call	684 <_Z5delaym>
    1e74:	00002606 	br	1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1e78:	e0bffd03 	ldbu	r2,-12(fp)
    1e7c:	e0fffb17 	ldw	r3,-20(fp)
    1e80:	10800784 	addi	r2,r2,30
    1e84:	1085883a 	add	r2,r2,r2
    1e88:	1085883a 	add	r2,r2,r2
    1e8c:	1885883a 	add	r2,r3,r2
    1e90:	10800017 	ldw	r2,0(r2)
    1e94:	10800017 	ldw	r2,0(r2)
    1e98:	10800504 	addi	r2,r2,20
    1e9c:	10c00017 	ldw	r3,0(r2)
    1ea0:	e0bffd03 	ldbu	r2,-12(fp)
    1ea4:	e13ffb17 	ldw	r4,-20(fp)
    1ea8:	10800784 	addi	r2,r2,30
    1eac:	1085883a 	add	r2,r2,r2
    1eb0:	1085883a 	add	r2,r2,r2
    1eb4:	2085883a 	add	r2,r4,r2
    1eb8:	10800017 	ldw	r2,0(r2)
    1ebc:	e13ffe03 	ldbu	r4,-8(fp)
    1ec0:	200b883a 	mov	r5,r4
    1ec4:	1009883a 	mov	r4,r2
    1ec8:	183ee83a 	callr	r3
    1ecc:	00001006 	br	1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1ed0:	e0bffa43 	ldbu	r2,-23(fp)
    1ed4:	10800358 	cmpnei	r2,r2,13
    1ed8:	1000091e 	bne	r2,zero,1f00 <_ZN3USB13AttemptConfigEhhhb+0x154>
    1edc:	e0bffa03 	ldbu	r2,-24(fp)
    1ee0:	108000e8 	cmpgeui	r2,r2,3
    1ee4:	1000061e 	bne	r2,zero,1f00 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
    1ee8:	01001904 	movi	r4,100
    1eec:	00006840 	call	684 <_Z5delaym>
                retries++;
    1ef0:	e0bffa03 	ldbu	r2,-24(fp)
    1ef4:	10800044 	addi	r2,r2,1
    1ef8:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1efc:	003fb806 	br	1de0 <__alt_data_end+0xfc001de0>
        } else if(rcode)
    1f00:	e0bffa43 	ldbu	r2,-23(fp)
    1f04:	10000226 	beq	r2,zero,1f10 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
    1f08:	e0bffa43 	ldbu	r2,-23(fp)
    1f0c:	00004606 	br	2028 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
    1f10:	e0bffc03 	ldbu	r2,-16(fp)
    1f14:	e0fffb17 	ldw	r3,-20(fp)
    1f18:	10800784 	addi	r2,r2,30
    1f1c:	1085883a 	add	r2,r2,r2
    1f20:	1085883a 	add	r2,r2,r2
    1f24:	1885883a 	add	r2,r3,r2
    1f28:	10800017 	ldw	r2,0(r2)
    1f2c:	10800017 	ldw	r2,0(r2)
    1f30:	10c00017 	ldw	r3,0(r2)
    1f34:	e0bffc03 	ldbu	r2,-16(fp)
    1f38:	e13ffb17 	ldw	r4,-20(fp)
    1f3c:	10800784 	addi	r2,r2,30
    1f40:	1085883a 	add	r2,r2,r2
    1f44:	1085883a 	add	r2,r2,r2
    1f48:	2085883a 	add	r2,r4,r2
    1f4c:	10800017 	ldw	r2,0(r2)
    1f50:	e13ffd03 	ldbu	r4,-12(fp)
    1f54:	e17ffe03 	ldbu	r5,-8(fp)
    1f58:	e1bfff03 	ldbu	r6,-4(fp)
    1f5c:	300f883a 	mov	r7,r6
    1f60:	280d883a 	mov	r6,r5
    1f64:	200b883a 	mov	r5,r4
    1f68:	1009883a 	mov	r4,r2
    1f6c:	183ee83a 	callr	r3
    1f70:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
    1f74:	e0bffa43 	ldbu	r2,-23(fp)
    1f78:	10800358 	cmpnei	r2,r2,13
    1f7c:	1000091e 	bne	r2,zero,1fa4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
    1f80:	e0bffa03 	ldbu	r2,-24(fp)
    1f84:	108000e8 	cmpgeui	r2,r2,3
    1f88:	1000061e 	bne	r2,zero,1fa4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
    1f8c:	01001904 	movi	r4,100
    1f90:	00006840 	call	684 <_Z5delaym>
                retries++;
    1f94:	e0bffa03 	ldbu	r2,-24(fp)
    1f98:	10800044 	addi	r2,r2,1
    1f9c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
    1fa0:	003f8f06 	br	1de0 <__alt_data_end+0xfc001de0>
        }
        if(rcode) {
    1fa4:	e0bffa43 	ldbu	r2,-23(fp)
    1fa8:	10001e26 	beq	r2,zero,2024 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
    1fac:	e0bffd03 	ldbu	r2,-12(fp)
    1fb0:	1000071e 	bne	r2,zero,1fd0 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
    1fb4:	01800044 	movi	r6,1
    1fb8:	01403a04 	movi	r5,232
    1fbc:	e13ffb17 	ldw	r4,-20(fp)
    1fc0:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
    1fc4:	01001984 	movi	r4,102
    1fc8:	00006840 	call	684 <_Z5delaym>
    1fcc:	00001506 	br	2024 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
    1fd0:	e0bffd03 	ldbu	r2,-12(fp)
    1fd4:	e0fffb17 	ldw	r3,-20(fp)
    1fd8:	10800784 	addi	r2,r2,30
    1fdc:	1085883a 	add	r2,r2,r2
    1fe0:	1085883a 	add	r2,r2,r2
    1fe4:	1885883a 	add	r2,r3,r2
    1fe8:	10800017 	ldw	r2,0(r2)
    1fec:	10800017 	ldw	r2,0(r2)
    1ff0:	10800504 	addi	r2,r2,20
    1ff4:	10c00017 	ldw	r3,0(r2)
    1ff8:	e0bffd03 	ldbu	r2,-12(fp)
    1ffc:	e13ffb17 	ldw	r4,-20(fp)
    2000:	10800784 	addi	r2,r2,30
    2004:	1085883a 	add	r2,r2,r2
    2008:	1085883a 	add	r2,r2,r2
    200c:	2085883a 	add	r2,r4,r2
    2010:	10800017 	ldw	r2,0(r2)
    2014:	e13ffe03 	ldbu	r4,-8(fp)
    2018:	200b883a 	mov	r5,r4
    201c:	1009883a 	mov	r4,r2
    2020:	183ee83a 	callr	r3
                }
        }
        return rcode;
    2024:	e0bffa43 	ldbu	r2,-23(fp)
}
    2028:	e037883a 	mov	sp,fp
    202c:	dfc00117 	ldw	ra,4(sp)
    2030:	df000017 	ldw	fp,0(sp)
    2034:	dec00204 	addi	sp,sp,8
    2038:	f800283a 	ret

0000203c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
    203c:	deffed04 	addi	sp,sp,-76
    2040:	dfc01215 	stw	ra,72(sp)
    2044:	df001115 	stw	fp,68(sp)
    2048:	df001104 	addi	fp,sp,68
    204c:	e13ffc15 	stw	r4,-16(fp)
    2050:	2809883a 	mov	r4,r5
    2054:	3007883a 	mov	r3,r6
    2058:	3805883a 	mov	r2,r7
    205c:	e13ffd05 	stb	r4,-12(fp)
    2060:	e0fffe05 	stb	r3,-8(fp)
    2064:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        printf("Configuring: parent = %i, port = %i\r\n", parent, port);
    2068:	e0bffd03 	ldbu	r2,-12(fp)
    206c:	e0fffe03 	ldbu	r3,-8(fp)
    2070:	180d883a 	mov	r6,r3
    2074:	100b883a 	mov	r5,r2
    2078:	010000b4 	movhi	r4,2
    207c:	210eb904 	addi	r4,r4,15076
    2080:	000edfc0 	call	edfc <printf>
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
    2084:	e03ff005 	stb	zero,-64(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
    2088:	e0bff684 	addi	r2,fp,-38
    208c:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
    2090:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
    2094:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
    2098:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
    209c:	00800204 	movi	r2,8
    20a0:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
    20a4:	e0fffb83 	ldbu	r3,-18(fp)
    20a8:	00bfff84 	movi	r2,-2
    20ac:	1884703a 	and	r2,r3,r2
    20b0:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
    20b4:	e0fffb83 	ldbu	r3,-18(fp)
    20b8:	00bfff44 	movi	r2,-3
    20bc:	1884703a 	and	r2,r3,r2
    20c0:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
    20c4:	e0bffb83 	ldbu	r2,-18(fp)
    20c8:	108000cc 	andi	r2,r2,3
    20cc:	10800f14 	ori	r2,r2,60
    20d0:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
    20d4:	e13ffc17 	ldw	r4,-16(fp)
    20d8:	00028f00 	call	28f0 <_ZN3USB14GetAddressPoolEv>
    20dc:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    20e0:	e0bff417 	ldw	r2,-48(fp)
    20e4:	10800017 	ldw	r2,0(r2)
    20e8:	10800017 	ldw	r2,0(r2)
    20ec:	000b883a 	mov	r5,zero
    20f0:	e13ff417 	ldw	r4,-48(fp)
    20f4:	103ee83a 	callr	r2
    20f8:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
    20fc:	e0bff217 	ldw	r2,-56(fp)
    2100:	1000051e 	bne	r2,zero,2118 <_ZN3USB11ConfiguringEhhb+0xdc>
                printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
    2104:	010000b4 	movhi	r4,2
    2108:	210ec304 	addi	r4,r4,15116
    210c:	000ef180 	call	ef18 <puts>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    2110:	00bff584 	movi	r2,-42
    2114:	0000ae06 	br	23d0 <_ZN3USB11ConfiguringEhhb+0x394>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    2118:	e0bff217 	ldw	r2,-56(fp)
    211c:	10c00003 	ldbu	r3,0(r2)
    2120:	11000043 	ldbu	r4,1(r2)
    2124:	2008923a 	slli	r4,r4,8
    2128:	20c6b03a 	or	r3,r4,r3
    212c:	11000083 	ldbu	r4,2(r2)
    2130:	2008943a 	slli	r4,r4,16
    2134:	20c6b03a 	or	r3,r4,r3
    2138:	108000c3 	ldbu	r2,3(r2)
    213c:	1004963a 	slli	r2,r2,24
    2140:	10c4b03a 	or	r2,r2,r3
    2144:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
    2148:	e0bff217 	ldw	r2,-56(fp)
    214c:	e0fffb04 	addi	r3,fp,-20
    2150:	19803fcc 	andi	r6,r3,255
    2154:	11000003 	ldbu	r4,0(r2)
    2158:	2008703a 	and	r4,r4,zero
    215c:	200b883a 	mov	r5,r4
    2160:	3009883a 	mov	r4,r6
    2164:	2908b03a 	or	r4,r5,r4
    2168:	11000005 	stb	r4,0(r2)
    216c:	1808d23a 	srli	r4,r3,8
    2170:	21803fcc 	andi	r6,r4,255
    2174:	11000043 	ldbu	r4,1(r2)
    2178:	2008703a 	and	r4,r4,zero
    217c:	200b883a 	mov	r5,r4
    2180:	3009883a 	mov	r4,r6
    2184:	2908b03a 	or	r4,r5,r4
    2188:	11000045 	stb	r4,1(r2)
    218c:	1808d43a 	srli	r4,r3,16
    2190:	21803fcc 	andi	r6,r4,255
    2194:	11000083 	ldbu	r4,2(r2)
    2198:	2008703a 	and	r4,r4,zero
    219c:	200b883a 	mov	r5,r4
    21a0:	3009883a 	mov	r4,r6
    21a4:	2908b03a 	or	r4,r5,r4
    21a8:	11000085 	stb	r4,2(r2)
    21ac:	180ad63a 	srli	r5,r3,24
    21b0:	10c000c3 	ldbu	r3,3(r2)
    21b4:	1806703a 	and	r3,r3,zero
    21b8:	1809883a 	mov	r4,r3
    21bc:	2807883a 	mov	r3,r5
    21c0:	20c6b03a 	or	r3,r4,r3
    21c4:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    21c8:	e0bff217 	ldw	r2,-56(fp)
    21cc:	e0ffff03 	ldbu	r3,-4(fp)
    21d0:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
    21d4:	00800484 	movi	r2,18
    21d8:	10ffffcc 	andi	r3,r2,65535
    21dc:	e0bff684 	addi	r2,fp,-38
    21e0:	d8800015 	stw	r2,0(sp)
    21e4:	180f883a 	mov	r7,r3
    21e8:	000d883a 	mov	r6,zero
    21ec:	000b883a 	mov	r5,zero
    21f0:	e13ffc17 	ldw	r4,-16(fp)
    21f4:	000251c0 	call	251c <_ZN3USB11getDevDescrEhhtPh>
    21f8:	e0bff005 	stb	r2,-64(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    21fc:	e0bff217 	ldw	r2,-56(fp)
    2200:	e0fff317 	ldw	r3,-52(fp)
    2204:	19403fcc 	andi	r5,r3,255
    2208:	10c00003 	ldbu	r3,0(r2)
    220c:	1806703a 	and	r3,r3,zero
    2210:	1809883a 	mov	r4,r3
    2214:	2807883a 	mov	r3,r5
    2218:	20c6b03a 	or	r3,r4,r3
    221c:	10c00005 	stb	r3,0(r2)
    2220:	e0fff317 	ldw	r3,-52(fp)
    2224:	1806d23a 	srli	r3,r3,8
    2228:	19403fcc 	andi	r5,r3,255
    222c:	10c00043 	ldbu	r3,1(r2)
    2230:	1806703a 	and	r3,r3,zero
    2234:	1809883a 	mov	r4,r3
    2238:	2807883a 	mov	r3,r5
    223c:	20c6b03a 	or	r3,r4,r3
    2240:	10c00045 	stb	r3,1(r2)
    2244:	e0fff317 	ldw	r3,-52(fp)
    2248:	1806d43a 	srli	r3,r3,16
    224c:	19403fcc 	andi	r5,r3,255
    2250:	10c00083 	ldbu	r3,2(r2)
    2254:	1806703a 	and	r3,r3,zero
    2258:	1809883a 	mov	r4,r3
    225c:	2807883a 	mov	r3,r5
    2260:	20c6b03a 	or	r3,r4,r3
    2264:	10c00085 	stb	r3,2(r2)
    2268:	e0fff317 	ldw	r3,-52(fp)
    226c:	180ad63a 	srli	r5,r3,24
    2270:	10c000c3 	ldbu	r3,3(r2)
    2274:	1806703a 	and	r3,r3,zero
    2278:	1809883a 	mov	r4,r3
    227c:	2807883a 	mov	r3,r5
    2280:	20c6b03a 	or	r3,r4,r3
    2284:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
    2288:	e0bff003 	ldbu	r2,-64(fp)
    228c:	10000526 	beq	r2,zero,22a4 <_ZN3USB11ConfiguringEhhb+0x268>
                printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
    2290:	010000b4 	movhi	r4,2
    2294:	210ed104 	addi	r4,r4,15172
    2298:	000ef180 	call	ef18 <puts>
                return rcode;
    229c:	e0bff003 	ldbu	r2,-64(fp)
    22a0:	00004b06 	br	23d0 <_ZN3USB11ConfiguringEhhb+0x394>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
    22a4:	e0bff117 	ldw	r2,-60(fp)
    22a8:	10c00203 	ldbu	r3,8(r2)
    22ac:	10800243 	ldbu	r2,9(r2)
    22b0:	1004923a 	slli	r2,r2,8
    22b4:	10c4b03a 	or	r2,r2,r3
    22b8:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
    22bc:	e0bff117 	ldw	r2,-60(fp)
    22c0:	10c00283 	ldbu	r3,10(r2)
    22c4:	108002c3 	ldbu	r2,11(r2)
    22c8:	1004923a 	slli	r2,r2,8
    22cc:	10c4b03a 	or	r2,r2,r3
    22d0:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
    22d4:	e0bff117 	ldw	r2,-60(fp)
    22d8:	10800103 	ldbu	r2,4(r2)
    22dc:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
    22e0:	e0bff117 	ldw	r2,-60(fp)
    22e4:	10800143 	ldbu	r2,5(r2)
    22e8:	e0bff645 	stb	r2,-39(fp)

        if(devConfigIndex < USB_NUMDEVICES) {
                return rcode;
        }*/

        printf("VID: %X\n", vid);
    22ec:	e0bff50b 	ldhu	r2,-44(fp)
    22f0:	100b883a 	mov	r5,r2
    22f4:	010000b4 	movhi	r4,2
    22f8:	210ede04 	addi	r4,r4,15224
    22fc:	000edfc0 	call	edfc <printf>
        printf("PID: %X\n", pid);
    2300:	e0bff58b 	ldhu	r2,-42(fp)
    2304:	100b883a 	mov	r5,r2
    2308:	010000b4 	movhi	r4,2
    230c:	210ee104 	addi	r4,r4,15236
    2310:	000edfc0 	call	edfc <printf>
        printf("%X\n", devConfig[0]);
    2314:	e0bffc17 	ldw	r2,-16(fp)
    2318:	10801e17 	ldw	r2,120(r2)
    231c:	100b883a 	mov	r5,r2
    2320:	010000b4 	movhi	r4,2
    2324:	210ee404 	addi	r4,r4,15248
    2328:	000edfc0 	call	edfc <printf>
        printf("%X\n", devConfig[0]->GetAddress());
    232c:	e0bffc17 	ldw	r2,-16(fp)
    2330:	10801e17 	ldw	r2,120(r2)
    2334:	10800017 	ldw	r2,0(r2)
    2338:	10800404 	addi	r2,r2,16
    233c:	10800017 	ldw	r2,0(r2)
    2340:	e0fffc17 	ldw	r3,-16(fp)
    2344:	18c01e17 	ldw	r3,120(r3)
    2348:	1809883a 	mov	r4,r3
    234c:	103ee83a 	callr	r2
    2350:	10803fcc 	andi	r2,r2,255
    2354:	100b883a 	mov	r5,r2
    2358:	010000b4 	movhi	r4,2
    235c:	210ee404 	addi	r4,r4,15248
    2360:	000edfc0 	call	edfc <printf>
        printf("%X\n", devConfig[0]->DEVSUBCLASSOK(subklass));
    2364:	e0bffc17 	ldw	r2,-16(fp)
    2368:	10801e17 	ldw	r2,120(r2)
    236c:	10800017 	ldw	r2,0(r2)
    2370:	10800804 	addi	r2,r2,32
    2374:	10800017 	ldw	r2,0(r2)
    2378:	e0fffc17 	ldw	r3,-16(fp)
    237c:	18c01e17 	ldw	r3,120(r3)
    2380:	e13ff643 	ldbu	r4,-39(fp)
    2384:	200b883a 	mov	r5,r4
    2388:	1809883a 	mov	r4,r3
    238c:	103ee83a 	callr	r2
    2390:	10803fcc 	andi	r2,r2,255
    2394:	100b883a 	mov	r5,r2
    2398:	010000b4 	movhi	r4,2
    239c:	210ee404 	addi	r4,r4,15248
    23a0:	000edfc0 	call	edfc <printf>
        //printf("%X\n", devConfig[0]->VIDPIDOK(vid, pid));
        //printf("%X\n", devConfig[0]->DEVCLASSOK(klass));
        rcode = AttemptConfig(0, parent, port, lowspeed);
    23a4:	e0fffd03 	ldbu	r3,-12(fp)
    23a8:	e13ffe03 	ldbu	r4,-8(fp)
    23ac:	e0bfff03 	ldbu	r2,-4(fp)
    23b0:	d8800015 	stw	r2,0(sp)
    23b4:	200f883a 	mov	r7,r4
    23b8:	180d883a 	mov	r6,r3
    23bc:	000b883a 	mov	r5,zero
    23c0:	e13ffc17 	ldw	r4,-16(fp)
    23c4:	0001dac0 	call	1dac <_ZN3USB13AttemptConfigEhhhb>
    23c8:	e0bff005 	stb	r2,-64(fp)
        return rcode;
    23cc:	e0bff003 	ldbu	r2,-64(fp)
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);

        return rcode;
}
    23d0:	e037883a 	mov	sp,fp
    23d4:	dfc00117 	ldw	ra,4(sp)
    23d8:	df000017 	ldw	fp,0(sp)
    23dc:	dec00204 	addi	sp,sp,8
    23e0:	f800283a 	ret

000023e4 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
    23e4:	defffb04 	addi	sp,sp,-20
    23e8:	dfc00415 	stw	ra,16(sp)
    23ec:	df000315 	stw	fp,12(sp)
    23f0:	df000304 	addi	fp,sp,12
    23f4:	e13ffe15 	stw	r4,-8(fp)
    23f8:	2805883a 	mov	r2,r5
    23fc:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
    2400:	e0bfff03 	ldbu	r2,-4(fp)
    2404:	1000021e 	bne	r2,zero,2410 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
    2408:	0005883a 	mov	r2,zero
    240c:	00003e06 	br	2508 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    2410:	e03ffd05 	stb	zero,-12(fp)
    2414:	e0bffd03 	ldbu	r2,-12(fp)
    2418:	10800428 	cmpgeui	r2,r2,16
    241c:	1000391e 	bne	r2,zero,2504 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
    2420:	e0bffd03 	ldbu	r2,-12(fp)
    2424:	e0fffe17 	ldw	r3,-8(fp)
    2428:	10800784 	addi	r2,r2,30
    242c:	1085883a 	add	r2,r2,r2
    2430:	1085883a 	add	r2,r2,r2
    2434:	1885883a 	add	r2,r3,r2
    2438:	10800017 	ldw	r2,0(r2)
    243c:	10002c26 	beq	r2,zero,24f0 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
    2440:	e0bffd03 	ldbu	r2,-12(fp)
    2444:	e0fffe17 	ldw	r3,-8(fp)
    2448:	10800784 	addi	r2,r2,30
    244c:	1085883a 	add	r2,r2,r2
    2450:	1085883a 	add	r2,r2,r2
    2454:	1885883a 	add	r2,r3,r2
    2458:	10800017 	ldw	r2,0(r2)
    245c:	10800017 	ldw	r2,0(r2)
    2460:	10800404 	addi	r2,r2,16
    2464:	10c00017 	ldw	r3,0(r2)
    2468:	e0bffd03 	ldbu	r2,-12(fp)
    246c:	e13ffe17 	ldw	r4,-8(fp)
    2470:	10800784 	addi	r2,r2,30
    2474:	1085883a 	add	r2,r2,r2
    2478:	1085883a 	add	r2,r2,r2
    247c:	2085883a 	add	r2,r4,r2
    2480:	10800017 	ldw	r2,0(r2)
    2484:	1009883a 	mov	r4,r2
    2488:	183ee83a 	callr	r3
    248c:	10c03fcc 	andi	r3,r2,255
    2490:	e0bfff03 	ldbu	r2,-4(fp)
    2494:	1885003a 	cmpeq	r2,r3,r2
    2498:	10803fcc 	andi	r2,r2,255
    249c:	10001526 	beq	r2,zero,24f4 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
    24a0:	e0bffd03 	ldbu	r2,-12(fp)
    24a4:	e0fffe17 	ldw	r3,-8(fp)
    24a8:	10800784 	addi	r2,r2,30
    24ac:	1085883a 	add	r2,r2,r2
    24b0:	1085883a 	add	r2,r2,r2
    24b4:	1885883a 	add	r2,r3,r2
    24b8:	10800017 	ldw	r2,0(r2)
    24bc:	10800017 	ldw	r2,0(r2)
    24c0:	10800204 	addi	r2,r2,8
    24c4:	10c00017 	ldw	r3,0(r2)
    24c8:	e0bffd03 	ldbu	r2,-12(fp)
    24cc:	e13ffe17 	ldw	r4,-8(fp)
    24d0:	10800784 	addi	r2,r2,30
    24d4:	1085883a 	add	r2,r2,r2
    24d8:	1085883a 	add	r2,r2,r2
    24dc:	2085883a 	add	r2,r4,r2
    24e0:	10800017 	ldw	r2,0(r2)
    24e4:	1009883a 	mov	r4,r2
    24e8:	183ee83a 	callr	r3
    24ec:	00000606 	br	2508 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
    24f0:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    24f4:	e0bffd03 	ldbu	r2,-12(fp)
    24f8:	10800044 	addi	r2,r2,1
    24fc:	e0bffd05 	stb	r2,-12(fp)
    2500:	003fc406 	br	2414 <__alt_data_end+0xfc002414>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
    2504:	0005883a 	mov	r2,zero
        printf("END\n");
}
    2508:	e037883a 	mov	sp,fp
    250c:	dfc00117 	ldw	ra,4(sp)
    2510:	df000017 	ldw	fp,0(sp)
    2514:	dec00204 	addi	sp,sp,8
    2518:	f800283a 	ret

0000251c <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
    251c:	defff204 	addi	sp,sp,-56
    2520:	dfc00d15 	stw	ra,52(sp)
    2524:	df000c15 	stw	fp,48(sp)
    2528:	df000c04 	addi	fp,sp,48
    252c:	e13ffc15 	stw	r4,-16(fp)
    2530:	2809883a 	mov	r4,r5
    2534:	3007883a 	mov	r3,r6
    2538:	3805883a 	mov	r2,r7
    253c:	e13ffd05 	stb	r4,-12(fp)
    2540:	e0fffe05 	stb	r3,-8(fp)
    2544:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
    2548:	e17ffd03 	ldbu	r5,-12(fp)
    254c:	e1bffe03 	ldbu	r6,-8(fp)
    2550:	e0bfff0b 	ldhu	r2,-4(fp)
    2554:	e0ffff0b 	ldhu	r3,-4(fp)
    2558:	d8000715 	stw	zero,28(sp)
    255c:	e1000217 	ldw	r4,8(fp)
    2560:	d9000615 	stw	r4,24(sp)
    2564:	d8c00515 	stw	r3,20(sp)
    2568:	d8800415 	stw	r2,16(sp)
    256c:	d8000315 	stw	zero,12(sp)
    2570:	00800044 	movi	r2,1
    2574:	d8800215 	stw	r2,8(sp)
    2578:	d8000115 	stw	zero,4(sp)
    257c:	00800184 	movi	r2,6
    2580:	d8800015 	stw	r2,0(sp)
    2584:	01c02004 	movi	r7,128
    2588:	e13ffc17 	ldw	r4,-16(fp)
    258c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2590:	e037883a 	mov	sp,fp
    2594:	dfc00117 	ldw	ra,4(sp)
    2598:	df000017 	ldw	fp,0(sp)
    259c:	dec00204 	addi	sp,sp,8
    25a0:	f800283a 	ret

000025a4 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
    25a4:	defff104 	addi	sp,sp,-60
    25a8:	dfc00e15 	stw	ra,56(sp)
    25ac:	df000d15 	stw	fp,52(sp)
    25b0:	df000d04 	addi	fp,sp,52
    25b4:	e13ffb15 	stw	r4,-20(fp)
    25b8:	3009883a 	mov	r4,r6
    25bc:	3807883a 	mov	r3,r7
    25c0:	e0800217 	ldw	r2,8(fp)
    25c4:	e17ffc05 	stb	r5,-16(fp)
    25c8:	e13ffd05 	stb	r4,-12(fp)
    25cc:	e0fffe0d 	sth	r3,-8(fp)
    25d0:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
    25d4:	e23ffc03 	ldbu	r8,-16(fp)
    25d8:	e1bffd03 	ldbu	r6,-12(fp)
    25dc:	e0bfff03 	ldbu	r2,-4(fp)
    25e0:	e0fffe0b 	ldhu	r3,-8(fp)
    25e4:	e13ffe0b 	ldhu	r4,-8(fp)
    25e8:	d8000715 	stw	zero,28(sp)
    25ec:	e1400317 	ldw	r5,12(fp)
    25f0:	d9400615 	stw	r5,24(sp)
    25f4:	d9000515 	stw	r4,20(sp)
    25f8:	d8c00415 	stw	r3,16(sp)
    25fc:	d8000315 	stw	zero,12(sp)
    2600:	00c00084 	movi	r3,2
    2604:	d8c00215 	stw	r3,8(sp)
    2608:	d8800115 	stw	r2,4(sp)
    260c:	00800184 	movi	r2,6
    2610:	d8800015 	stw	r2,0(sp)
    2614:	01c02004 	movi	r7,128
    2618:	400b883a 	mov	r5,r8
    261c:	e13ffb17 	ldw	r4,-20(fp)
    2620:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    2624:	e037883a 	mov	sp,fp
    2628:	dfc00117 	ldw	ra,4(sp)
    262c:	df000017 	ldw	fp,0(sp)
    2630:	dec00204 	addi	sp,sp,8
    2634:	f800283a 	ret

00002638 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
    2638:	deffdf04 	addi	sp,sp,-132
    263c:	dfc02015 	stw	ra,128(sp)
    2640:	df001f15 	stw	fp,124(sp)
    2644:	df001f04 	addi	fp,sp,124
    2648:	e13ffc15 	stw	r4,-16(fp)
    264c:	2809883a 	mov	r4,r5
    2650:	3007883a 	mov	r3,r6
    2654:	3805883a 	mov	r2,r7
    2658:	e13ffd05 	stb	r4,-12(fp)
    265c:	e0fffe05 	stb	r3,-8(fp)
    2660:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
    2664:	00801004 	movi	r2,64
    2668:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
    266c:	e0bfec04 	addi	r2,fp,-80
    2670:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
    2674:	e13ffd03 	ldbu	r4,-12(fp)
    2678:	e17ffe03 	ldbu	r5,-8(fp)
    267c:	e0bfff03 	ldbu	r2,-4(fp)
    2680:	e0ffec04 	addi	r3,fp,-80
    2684:	d8c00115 	stw	r3,4(sp)
    2688:	d8800015 	stw	r2,0(sp)
    268c:	01c00244 	movi	r7,9
    2690:	280d883a 	mov	r6,r5
    2694:	200b883a 	mov	r5,r4
    2698:	e13ffc17 	ldw	r4,-16(fp)
    269c:	00025a40 	call	25a4 <_ZN3USB12getConfDescrEhhthPh>
    26a0:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
    26a4:	e0bfeb03 	ldbu	r2,-84(fp)
    26a8:	10000226 	beq	r2,zero,26b4 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
    26ac:	e0bfeb03 	ldbu	r2,-84(fp)
    26b0:	00001a06 	br	271c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
    26b4:	e0bfea17 	ldw	r2,-88(fp)
    26b8:	10c00083 	ldbu	r3,2(r2)
    26bc:	108000c3 	ldbu	r2,3(r2)
    26c0:	1004923a 	slli	r2,r2,8
    26c4:	10c4b03a 	or	r2,r2,r3
    26c8:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
    26cc:	e17ffd03 	ldbu	r5,-12(fp)
    26d0:	e1bffe03 	ldbu	r6,-8(fp)
    26d4:	e0bfff03 	ldbu	r2,-4(fp)
    26d8:	e0ffeb8b 	ldhu	r3,-82(fp)
    26dc:	e1000217 	ldw	r4,8(fp)
    26e0:	d9000715 	stw	r4,28(sp)
    26e4:	e13fec04 	addi	r4,fp,-80
    26e8:	d9000615 	stw	r4,24(sp)
    26ec:	01001004 	movi	r4,64
    26f0:	d9000515 	stw	r4,20(sp)
    26f4:	d8c00415 	stw	r3,16(sp)
    26f8:	d8000315 	stw	zero,12(sp)
    26fc:	00c00084 	movi	r3,2
    2700:	d8c00215 	stw	r3,8(sp)
    2704:	d8800115 	stw	r2,4(sp)
    2708:	00800184 	movi	r2,6
    270c:	d8800015 	stw	r2,0(sp)
    2710:	01c02004 	movi	r7,128
    2714:	e13ffc17 	ldw	r4,-16(fp)
    2718:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    271c:	e037883a 	mov	sp,fp
    2720:	dfc00117 	ldw	ra,4(sp)
    2724:	df000017 	ldw	fp,0(sp)
    2728:	dec00204 	addi	sp,sp,8
    272c:	f800283a 	ret

00002730 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
    2730:	defff004 	addi	sp,sp,-64
    2734:	dfc00f15 	stw	ra,60(sp)
    2738:	df000e15 	stw	fp,56(sp)
    273c:	df000e04 	addi	fp,sp,56
    2740:	e13ffa15 	stw	r4,-24(fp)
    2744:	2811883a 	mov	r8,r5
    2748:	300b883a 	mov	r5,r6
    274c:	3809883a 	mov	r4,r7
    2750:	e0c00217 	ldw	r3,8(fp)
    2754:	e0800317 	ldw	r2,12(fp)
    2758:	e23ffb05 	stb	r8,-20(fp)
    275c:	e17ffc05 	stb	r5,-16(fp)
    2760:	e13ffd0d 	sth	r4,-12(fp)
    2764:	e0fffe05 	stb	r3,-8(fp)
    2768:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
    276c:	e23ffb03 	ldbu	r8,-20(fp)
    2770:	e27ffc03 	ldbu	r9,-16(fp)
    2774:	e0bffe03 	ldbu	r2,-8(fp)
    2778:	e0ffff0b 	ldhu	r3,-4(fp)
    277c:	e13ffd0b 	ldhu	r4,-12(fp)
    2780:	e17ffd0b 	ldhu	r5,-12(fp)
    2784:	d8000715 	stw	zero,28(sp)
    2788:	e1800417 	ldw	r6,16(fp)
    278c:	d9800615 	stw	r6,24(sp)
    2790:	d9400515 	stw	r5,20(sp)
    2794:	d9000415 	stw	r4,16(sp)
    2798:	d8c00315 	stw	r3,12(sp)
    279c:	00c000c4 	movi	r3,3
    27a0:	d8c00215 	stw	r3,8(sp)
    27a4:	d8800115 	stw	r2,4(sp)
    27a8:	00800184 	movi	r2,6
    27ac:	d8800015 	stw	r2,0(sp)
    27b0:	01c02004 	movi	r7,128
    27b4:	480d883a 	mov	r6,r9
    27b8:	400b883a 	mov	r5,r8
    27bc:	e13ffa17 	ldw	r4,-24(fp)
    27c0:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    27c4:	e037883a 	mov	sp,fp
    27c8:	dfc00117 	ldw	ra,4(sp)
    27cc:	df000017 	ldw	fp,0(sp)
    27d0:	dec00204 	addi	sp,sp,8
    27d4:	f800283a 	ret

000027d8 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
    27d8:	defff104 	addi	sp,sp,-60
    27dc:	dfc00e15 	stw	ra,56(sp)
    27e0:	df000d15 	stw	fp,52(sp)
    27e4:	df000d04 	addi	fp,sp,52
    27e8:	e13ffc15 	stw	r4,-16(fp)
    27ec:	2809883a 	mov	r4,r5
    27f0:	3007883a 	mov	r3,r6
    27f4:	3805883a 	mov	r2,r7
    27f8:	e13ffd05 	stb	r4,-12(fp)
    27fc:	e0fffe05 	stb	r3,-8(fp)
    2800:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
    2804:	e0fffd03 	ldbu	r3,-12(fp)
    2808:	e13ffe03 	ldbu	r4,-8(fp)
    280c:	e0bfff03 	ldbu	r2,-4(fp)
    2810:	d8000715 	stw	zero,28(sp)
    2814:	d8000615 	stw	zero,24(sp)
    2818:	d8000515 	stw	zero,20(sp)
    281c:	d8000415 	stw	zero,16(sp)
    2820:	d8000315 	stw	zero,12(sp)
    2824:	d8000215 	stw	zero,8(sp)
    2828:	d8800115 	stw	r2,4(sp)
    282c:	00800144 	movi	r2,5
    2830:	d8800015 	stw	r2,0(sp)
    2834:	000f883a 	mov	r7,zero
    2838:	200d883a 	mov	r6,r4
    283c:	180b883a 	mov	r5,r3
    2840:	e13ffc17 	ldw	r4,-16(fp)
    2844:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    2848:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
    284c:	01004b04 	movi	r4,300
    2850:	00006840 	call	684 <_Z5delaym>
        return rcode;
    2854:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
    2858:	e037883a 	mov	sp,fp
    285c:	dfc00117 	ldw	ra,4(sp)
    2860:	df000017 	ldw	fp,0(sp)
    2864:	dec00204 	addi	sp,sp,8
    2868:	f800283a 	ret

0000286c <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
    286c:	defff204 	addi	sp,sp,-56
    2870:	dfc00d15 	stw	ra,52(sp)
    2874:	df000c15 	stw	fp,48(sp)
    2878:	df000c04 	addi	fp,sp,48
    287c:	e13ffc15 	stw	r4,-16(fp)
    2880:	2809883a 	mov	r4,r5
    2884:	3007883a 	mov	r3,r6
    2888:	3805883a 	mov	r2,r7
    288c:	e13ffd05 	stb	r4,-12(fp)
    2890:	e0fffe05 	stb	r3,-8(fp)
    2894:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
    2898:	e0fffd03 	ldbu	r3,-12(fp)
    289c:	e13ffe03 	ldbu	r4,-8(fp)
    28a0:	e0bfff03 	ldbu	r2,-4(fp)
    28a4:	d8000715 	stw	zero,28(sp)
    28a8:	d8000615 	stw	zero,24(sp)
    28ac:	d8000515 	stw	zero,20(sp)
    28b0:	d8000415 	stw	zero,16(sp)
    28b4:	d8000315 	stw	zero,12(sp)
    28b8:	d8000215 	stw	zero,8(sp)
    28bc:	d8800115 	stw	r2,4(sp)
    28c0:	00800244 	movi	r2,9
    28c4:	d8800015 	stw	r2,0(sp)
    28c8:	000f883a 	mov	r7,zero
    28cc:	200d883a 	mov	r6,r4
    28d0:	180b883a 	mov	r5,r3
    28d4:	e13ffc17 	ldw	r4,-16(fp)
    28d8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    28dc:	e037883a 	mov	sp,fp
    28e0:	dfc00117 	ldw	ra,4(sp)
    28e4:	df000017 	ldw	fp,0(sp)
    28e8:	dec00204 	addi	sp,sp,8
    28ec:	f800283a 	ret

000028f0 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
    28f0:	defffe04 	addi	sp,sp,-8
    28f4:	df000115 	stw	fp,4(sp)
    28f8:	df000104 	addi	fp,sp,4
    28fc:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
    2900:	e0bfff17 	ldw	r2,-4(fp)
        };
    2904:	e037883a 	mov	sp,fp
    2908:	df000017 	ldw	fp,0(sp)
    290c:	dec00104 	addi	sp,sp,4
    2910:	f800283a 	ret

00002914 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
    2914:	defffe04 	addi	sp,sp,-8
    2918:	df000115 	stw	fp,4(sp)
    291c:	df000104 	addi	fp,sp,4
    2920:	e13fff15 	stw	r4,-4(fp)
    2924:	008000b4 	movhi	r2,2
    2928:	108eec04 	addi	r2,r2,15280
    292c:	e0ffff17 	ldw	r3,-4(fp)
    2930:	18800015 	stw	r2,0(r3)
    2934:	0001883a 	nop
    2938:	e037883a 	mov	sp,fp
    293c:	df000017 	ldw	fp,0(sp)
    2940:	dec00104 	addi	sp,sp,4
    2944:	f800283a 	ret

00002948 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
    2948:	defffd04 	addi	sp,sp,-12
    294c:	dfc00215 	stw	ra,8(sp)
    2950:	df000115 	stw	fp,4(sp)
    2954:	df000104 	addi	fp,sp,4
    2958:	e13fff15 	stw	r4,-4(fp)
    295c:	e0bfff17 	ldw	r2,-4(fp)
    2960:	1009883a 	mov	r4,r2
    2964:	00029140 	call	2914 <_ZN11AddressPoolC1Ev>
    2968:	008000b4 	movhi	r2,2
    296c:	108ee704 	addi	r2,r2,15260
    2970:	e0ffff17 	ldw	r3,-4(fp)
    2974:	18800015 	stw	r2,0(r3)
    2978:	e0bfff17 	ldw	r2,-4(fp)
    297c:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
    2980:	000b883a 	mov	r5,zero
    2984:	e13fff17 	ldw	r4,-4(fp)
    2988:	0002d980 	call	2d98 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
    298c:	e0bfff17 	ldw	r2,-4(fp)
    2990:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
    2994:	e0bfff17 	ldw	r2,-4(fp)
    2998:	10c00104 	addi	r3,r2,4
    299c:	e0bfff17 	ldw	r2,-4(fp)
    29a0:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
    29a4:	e0bfff17 	ldw	r2,-4(fp)
    29a8:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
    29ac:	e0bfff17 	ldw	r2,-4(fp)
    29b0:	00c00204 	movi	r3,8
    29b4:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
    29b8:	e0bfff17 	ldw	r2,-4(fp)
    29bc:	11000183 	ldbu	r4,6(r2)
    29c0:	00ffff84 	movi	r3,-2
    29c4:	20c6703a 	and	r3,r4,r3
    29c8:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
    29cc:	e0bfff17 	ldw	r2,-4(fp)
    29d0:	11000183 	ldbu	r4,6(r2)
    29d4:	00ffff44 	movi	r3,-3
    29d8:	20c6703a 	and	r3,r4,r3
    29dc:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
    29e0:	e0bfff17 	ldw	r2,-4(fp)
    29e4:	10c00183 	ldbu	r3,6(r2)
    29e8:	18c000cc 	andi	r3,r3,3
    29ec:	18c00f14 	ori	r3,r3,60
    29f0:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
    29f4:	e13fff17 	ldw	r4,-4(fp)
    29f8:	0002edc0 	call	2edc <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
    29fc:	0001883a 	nop
    2a00:	e037883a 	mov	sp,fp
    2a04:	dfc00117 	ldw	ra,4(sp)
    2a08:	df000017 	ldw	fp,0(sp)
    2a0c:	dec00204 	addi	sp,sp,8
    2a10:	f800283a 	ret

00002a14 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
    2a14:	defffa04 	addi	sp,sp,-24
    2a18:	dfc00515 	stw	ra,20(sp)
    2a1c:	df000415 	stw	fp,16(sp)
    2a20:	dc000315 	stw	r16,12(sp)
    2a24:	df000404 	addi	fp,sp,16
    2a28:	e13ffd15 	stw	r4,-12(fp)
    2a2c:	2805883a 	mov	r2,r5
    2a30:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
    2a34:	e0bffe03 	ldbu	r2,-8(fp)
    2a38:	1000031e 	bne	r2,zero,2a48 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
    2a3c:	e0bffd17 	ldw	r2,-12(fp)
    2a40:	10800204 	addi	r2,r2,8
    2a44:	00001006 	br	2a88 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
    2a48:	e0bffe03 	ldbu	r2,-8(fp)
    2a4c:	100b883a 	mov	r5,r2
    2a50:	e13ffd17 	ldw	r4,-12(fp)
    2a54:	0002f440 	call	2f44 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2a58:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
    2a5c:	e0bffc03 	ldbu	r2,-16(fp)
    2a60:	10000826 	beq	r2,zero,2a84 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
    2a64:	e0bffd17 	ldw	r2,-12(fp)
    2a68:	14000204 	addi	r16,r2,8
    2a6c:	e0bffc03 	ldbu	r2,-16(fp)
    2a70:	014001c4 	movi	r5,7
    2a74:	1009883a 	mov	r4,r2
    2a78:	000cda80 	call	cda8 <__mulsi3>
    2a7c:	8085883a 	add	r2,r16,r2
    2a80:	00000106 	br	2a88 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
    2a84:	0005883a 	mov	r2,zero
        };
    2a88:	e6ffff04 	addi	sp,fp,-4
    2a8c:	dfc00217 	ldw	ra,8(sp)
    2a90:	df000117 	ldw	fp,4(sp)
    2a94:	dc000017 	ldw	r16,0(sp)
    2a98:	dec00304 	addi	sp,sp,12
    2a9c:	f800283a 	ret

00002aa0 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    2aa0:	defffd04 	addi	sp,sp,-12
    2aa4:	df000215 	stw	fp,8(sp)
    2aa8:	df000204 	addi	fp,sp,8
    2aac:	2005883a 	mov	r2,r4
    2ab0:	e17fff15 	stw	r5,-4(fp)
    2ab4:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    2ab8:	0001883a 	nop
    2abc:	e037883a 	mov	sp,fp
    2ac0:	df000017 	ldw	fp,0(sp)
    2ac4:	dec00104 	addi	sp,sp,4
    2ac8:	f800283a 	ret

00002acc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
    2acc:	defff804 	addi	sp,sp,-32
    2ad0:	dfc00715 	stw	ra,28(sp)
    2ad4:	df000615 	stw	fp,24(sp)
    2ad8:	dc000515 	stw	r16,20(sp)
    2adc:	df000604 	addi	fp,sp,24
    2ae0:	e13ffb15 	stw	r4,-20(fp)
    2ae4:	2809883a 	mov	r4,r5
    2ae8:	3007883a 	mov	r3,r6
    2aec:	3805883a 	mov	r2,r7
    2af0:	e13ffc05 	stb	r4,-16(fp)
    2af4:	e0fffd05 	stb	r3,-12(fp)
    2af8:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
    2afc:	e0bffc03 	ldbu	r2,-16(fp)
    2b00:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
    2b04:	e0fffa43 	ldbu	r3,-23(fp)
    2b08:	00bfe004 	movi	r2,-128
    2b0c:	1884703a 	and	r2,r3,r2
    2b10:	10803fcc 	andi	r2,r2,255
    2b14:	1000031e 	bne	r2,zero,2b24 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
    2b18:	e0bffe03 	ldbu	r2,-8(fp)
    2b1c:	10800230 	cmpltui	r2,r2,8
    2b20:	1000021e 	bne	r2,zero,2b2c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
    2b24:	0005883a 	mov	r2,zero
    2b28:	00007a06 	br	2d14 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
    2b2c:	e0bffd03 	ldbu	r2,-12(fp)
    2b30:	10000726 	beq	r2,zero,2b50 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
    2b34:	e0bffb17 	ldw	r2,-20(fp)
    2b38:	108001c3 	ldbu	r2,7(r2)
    2b3c:	10803fcc 	andi	r2,r2,255
    2b40:	108001d8 	cmpnei	r2,r2,7
    2b44:	1000021e 	bne	r2,zero,2b50 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
    2b48:	0005883a 	mov	r2,zero
    2b4c:	00007106 	br	2d14 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
    2b50:	000b883a 	mov	r5,zero
    2b54:	e13ffb17 	ldw	r4,-20(fp)
    2b58:	0002f440 	call	2f44 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2b5c:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
    2b60:	e0bffa03 	ldbu	r2,-24(fp)
    2b64:	1000021e 	bne	r2,zero,2b70 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
    2b68:	0005883a 	mov	r2,zero
    2b6c:	00006906 	br	2d14 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
    2b70:	e0bffa43 	ldbu	r2,-23(fp)
    2b74:	10803fcc 	andi	r2,r2,255
    2b78:	1000241e 	bne	r2,zero,2c0c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
    2b7c:	e0bffd03 	ldbu	r2,-12(fp)
    2b80:	10001026 	beq	r2,zero,2bc4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
    2b84:	e0bffa03 	ldbu	r2,-24(fp)
    2b88:	e43ffb17 	ldw	r16,-20(fp)
    2b8c:	014001c4 	movi	r5,7
    2b90:	1009883a 	mov	r4,r2
    2b94:	000cda80 	call	cda8 <__mulsi3>
    2b98:	8085883a 	add	r2,r16,r2
    2b9c:	10800304 	addi	r2,r2,12
    2ba0:	00c01044 	movi	r3,65
    2ba4:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
    2ba8:	e0bffb17 	ldw	r2,-20(fp)
    2bac:	108001c3 	ldbu	r2,7(r2)
    2bb0:	10800044 	addi	r2,r2,1
    2bb4:	1007883a 	mov	r3,r2
    2bb8:	e0bffb17 	ldw	r2,-20(fp)
    2bbc:	10c001c5 	stb	r3,7(r2)
    2bc0:	00000906 	br	2be8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
    2bc4:	e0bffa03 	ldbu	r2,-24(fp)
    2bc8:	e43ffb17 	ldw	r16,-20(fp)
    2bcc:	014001c4 	movi	r5,7
    2bd0:	1009883a 	mov	r4,r2
    2bd4:	000cda80 	call	cda8 <__mulsi3>
    2bd8:	8085883a 	add	r2,r16,r2
    2bdc:	10800304 	addi	r2,r2,12
    2be0:	00c00044 	movi	r3,1
    2be4:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
    2be8:	e0bffa03 	ldbu	r2,-24(fp)
    2bec:	e43ffb17 	ldw	r16,-20(fp)
    2bf0:	014001c4 	movi	r5,7
    2bf4:	1009883a 	mov	r4,r2
    2bf8:	000cda80 	call	cda8 <__mulsi3>
    2bfc:	8085883a 	add	r2,r16,r2
    2c00:	10800304 	addi	r2,r2,12
    2c04:	10800003 	ldbu	r2,0(r2)
    2c08:	00004206 	br	2d14 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
    2c0c:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
    2c10:	e0bffa43 	ldbu	r2,-23(fp)
    2c14:	108001cc 	andi	r2,r2,7
    2c18:	108001cc 	andi	r2,r2,7
    2c1c:	100890fa 	slli	r4,r2,3
    2c20:	e0fffa83 	ldbu	r3,-22(fp)
    2c24:	00bff1c4 	movi	r2,-57
    2c28:	1884703a 	and	r2,r3,r2
    2c2c:	1007883a 	mov	r3,r2
    2c30:	2005883a 	mov	r2,r4
    2c34:	1884b03a 	or	r2,r3,r2
    2c38:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
    2c3c:	e0bffd03 	ldbu	r2,-12(fp)
    2c40:	10001526 	beq	r2,zero,2c98 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
    2c44:	e0bffa83 	ldbu	r2,-22(fp)
    2c48:	10801014 	ori	r2,r2,64
    2c4c:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
    2c50:	e0bffb17 	ldw	r2,-20(fp)
    2c54:	108001c3 	ldbu	r2,7(r2)
    2c58:	10800044 	addi	r2,r2,1
    2c5c:	1007883a 	mov	r3,r2
    2c60:	e0bffb17 	ldw	r2,-20(fp)
    2c64:	10c001c5 	stb	r3,7(r2)
    2c68:	e0bffb17 	ldw	r2,-20(fp)
    2c6c:	108001c3 	ldbu	r2,7(r2)
    2c70:	108001cc 	andi	r2,r2,7
    2c74:	110001cc 	andi	r4,r2,7
    2c78:	e0fffa83 	ldbu	r3,-22(fp)
    2c7c:	00bffe04 	movi	r2,-8
    2c80:	1884703a 	and	r2,r3,r2
    2c84:	1007883a 	mov	r3,r2
    2c88:	2005883a 	mov	r2,r4
    2c8c:	1884b03a 	or	r2,r3,r2
    2c90:	e0bffa85 	stb	r2,-22(fp)
    2c94:	00000e06 	br	2cd0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
    2c98:	e0fffa83 	ldbu	r3,-22(fp)
    2c9c:	00bfefc4 	movi	r2,-65
    2ca0:	1884703a 	and	r2,r3,r2
    2ca4:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
    2ca8:	e0bffe03 	ldbu	r2,-8(fp)
    2cac:	108001cc 	andi	r2,r2,7
    2cb0:	110001cc 	andi	r4,r2,7
    2cb4:	e0fffa83 	ldbu	r3,-22(fp)
    2cb8:	00bffe04 	movi	r2,-8
    2cbc:	1884703a 	and	r2,r3,r2
    2cc0:	1007883a 	mov	r3,r2
    2cc4:	2005883a 	mov	r2,r4
    2cc8:	1884b03a 	or	r2,r3,r2
    2ccc:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
    2cd0:	e0bffa03 	ldbu	r2,-24(fp)
    2cd4:	e43ffb17 	ldw	r16,-20(fp)
    2cd8:	014001c4 	movi	r5,7
    2cdc:	1009883a 	mov	r4,r2
    2ce0:	000cda80 	call	cda8 <__mulsi3>
    2ce4:	8085883a 	add	r2,r16,r2
    2ce8:	10800304 	addi	r2,r2,12
    2cec:	e0fffa83 	ldbu	r3,-22(fp)
    2cf0:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
    2cf4:	e0bffa03 	ldbu	r2,-24(fp)
    2cf8:	e43ffb17 	ldw	r16,-20(fp)
    2cfc:	014001c4 	movi	r5,7
    2d00:	1009883a 	mov	r4,r2
    2d04:	000cda80 	call	cda8 <__mulsi3>
    2d08:	8085883a 	add	r2,r16,r2
    2d0c:	10800304 	addi	r2,r2,12
    2d10:	10800003 	ldbu	r2,0(r2)
        };
    2d14:	e6ffff04 	addi	sp,fp,-4
    2d18:	dfc00217 	ldw	ra,8(sp)
    2d1c:	df000117 	ldw	fp,4(sp)
    2d20:	dc000017 	ldw	r16,0(sp)
    2d24:	dec00304 	addi	sp,sp,12
    2d28:	f800283a 	ret

00002d2c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
    2d2c:	defffb04 	addi	sp,sp,-20
    2d30:	dfc00415 	stw	ra,16(sp)
    2d34:	df000315 	stw	fp,12(sp)
    2d38:	df000304 	addi	fp,sp,12
    2d3c:	e13ffe15 	stw	r4,-8(fp)
    2d40:	2805883a 	mov	r2,r5
    2d44:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
    2d48:	e0bfff03 	ldbu	r2,-4(fp)
    2d4c:	10801058 	cmpnei	r2,r2,65
    2d50:	1000031e 	bne	r2,zero,2d60 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
    2d54:	e13ffe17 	ldw	r4,-8(fp)
    2d58:	0002edc0 	call	2edc <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
    2d5c:	00000906 	br	2d84 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
    2d60:	e0bfff03 	ldbu	r2,-4(fp)
    2d64:	100b883a 	mov	r5,r2
    2d68:	e13ffe17 	ldw	r4,-8(fp)
    2d6c:	0002f440 	call	2f44 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    2d70:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
    2d74:	e0bffd03 	ldbu	r2,-12(fp)
    2d78:	100b883a 	mov	r5,r2
    2d7c:	e13ffe17 	ldw	r4,-8(fp)
    2d80:	0002fd80 	call	2fd8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
    2d84:	e037883a 	mov	sp,fp
    2d88:	dfc00117 	ldw	ra,4(sp)
    2d8c:	df000017 	ldw	fp,0(sp)
    2d90:	dec00204 	addi	sp,sp,8
    2d94:	f800283a 	ret

00002d98 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
    2d98:	defffa04 	addi	sp,sp,-24
    2d9c:	dfc00515 	stw	ra,20(sp)
    2da0:	df000415 	stw	fp,16(sp)
    2da4:	dc400315 	stw	r17,12(sp)
    2da8:	dc000215 	stw	r16,8(sp)
    2dac:	df000404 	addi	fp,sp,16
    2db0:	e13ffc15 	stw	r4,-16(fp)
    2db4:	2805883a 	mov	r2,r5
    2db8:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
    2dbc:	e0bffd03 	ldbu	r2,-12(fp)
    2dc0:	e43ffc17 	ldw	r16,-16(fp)
    2dc4:	014001c4 	movi	r5,7
    2dc8:	1009883a 	mov	r4,r2
    2dcc:	000cda80 	call	cda8 <__mulsi3>
    2dd0:	8085883a 	add	r2,r16,r2
    2dd4:	10800304 	addi	r2,r2,12
    2dd8:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
    2ddc:	e0bffd03 	ldbu	r2,-12(fp)
    2de0:	e43ffc17 	ldw	r16,-16(fp)
    2de4:	014001c4 	movi	r5,7
    2de8:	1009883a 	mov	r4,r2
    2dec:	000cda80 	call	cda8 <__mulsi3>
    2df0:	8085883a 	add	r2,r16,r2
    2df4:	10800344 	addi	r2,r2,13
    2df8:	00c00044 	movi	r3,1
    2dfc:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
    2e00:	e0bffd03 	ldbu	r2,-12(fp)
    2e04:	e43ffc17 	ldw	r16,-16(fp)
    2e08:	014001c4 	movi	r5,7
    2e0c:	1009883a 	mov	r4,r2
    2e10:	000cda80 	call	cda8 <__mulsi3>
    2e14:	8085883a 	add	r2,r16,r2
    2e18:	10800384 	addi	r2,r2,14
    2e1c:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
    2e20:	e0fffd03 	ldbu	r3,-12(fp)
    2e24:	e0bffc17 	ldw	r2,-16(fp)
    2e28:	14000104 	addi	r16,r2,4
    2e2c:	e47ffc17 	ldw	r17,-16(fp)
    2e30:	014001c4 	movi	r5,7
    2e34:	1809883a 	mov	r4,r3
    2e38:	000cda80 	call	cda8 <__mulsi3>
    2e3c:	8885883a 	add	r2,r17,r2
    2e40:	10800204 	addi	r2,r2,8
    2e44:	81403fcc 	andi	r5,r16,255
    2e48:	10c00003 	ldbu	r3,0(r2)
    2e4c:	1806703a 	and	r3,r3,zero
    2e50:	1809883a 	mov	r4,r3
    2e54:	2807883a 	mov	r3,r5
    2e58:	20c6b03a 	or	r3,r4,r3
    2e5c:	10c00005 	stb	r3,0(r2)
    2e60:	8006d23a 	srli	r3,r16,8
    2e64:	19403fcc 	andi	r5,r3,255
    2e68:	10c00043 	ldbu	r3,1(r2)
    2e6c:	1806703a 	and	r3,r3,zero
    2e70:	1809883a 	mov	r4,r3
    2e74:	2807883a 	mov	r3,r5
    2e78:	20c6b03a 	or	r3,r4,r3
    2e7c:	10c00045 	stb	r3,1(r2)
    2e80:	8006d43a 	srli	r3,r16,16
    2e84:	19403fcc 	andi	r5,r3,255
    2e88:	10c00083 	ldbu	r3,2(r2)
    2e8c:	1806703a 	and	r3,r3,zero
    2e90:	1809883a 	mov	r4,r3
    2e94:	2807883a 	mov	r3,r5
    2e98:	20c6b03a 	or	r3,r4,r3
    2e9c:	10c00085 	stb	r3,2(r2)
    2ea0:	800ad63a 	srli	r5,r16,24
    2ea4:	10c000c3 	ldbu	r3,3(r2)
    2ea8:	1806703a 	and	r3,r3,zero
    2eac:	1809883a 	mov	r4,r3
    2eb0:	2807883a 	mov	r3,r5
    2eb4:	20c6b03a 	or	r3,r4,r3
    2eb8:	10c000c5 	stb	r3,3(r2)
        };
    2ebc:	0001883a 	nop
    2ec0:	e6fffe04 	addi	sp,fp,-8
    2ec4:	dfc00317 	ldw	ra,12(sp)
    2ec8:	df000217 	ldw	fp,8(sp)
    2ecc:	dc400117 	ldw	r17,4(sp)
    2ed0:	dc000017 	ldw	r16,0(sp)
    2ed4:	dec00404 	addi	sp,sp,16
    2ed8:	f800283a 	ret

00002edc <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
    2edc:	defffc04 	addi	sp,sp,-16
    2ee0:	dfc00315 	stw	ra,12(sp)
    2ee4:	df000215 	stw	fp,8(sp)
    2ee8:	df000204 	addi	fp,sp,8
    2eec:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2ef0:	00800044 	movi	r2,1
    2ef4:	e0bffe05 	stb	r2,-8(fp)
    2ef8:	e0bffe03 	ldbu	r2,-8(fp)
    2efc:	10800428 	cmpgeui	r2,r2,16
    2f00:	1000081e 	bne	r2,zero,2f24 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
    2f04:	e0bffe03 	ldbu	r2,-8(fp)
    2f08:	100b883a 	mov	r5,r2
    2f0c:	e13fff17 	ldw	r4,-4(fp)
    2f10:	0002d980 	call	2d98 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
    2f14:	e0bffe03 	ldbu	r2,-8(fp)
    2f18:	10800044 	addi	r2,r2,1
    2f1c:	e0bffe05 	stb	r2,-8(fp)
    2f20:	003ff506 	br	2ef8 <__alt_data_end+0xfc002ef8>
                        InitEntry(i);

                hubCounter = 0;
    2f24:	e0bfff17 	ldw	r2,-4(fp)
    2f28:	100001c5 	stb	zero,7(r2)
        };
    2f2c:	0001883a 	nop
    2f30:	e037883a 	mov	sp,fp
    2f34:	dfc00117 	ldw	ra,4(sp)
    2f38:	df000017 	ldw	fp,0(sp)
    2f3c:	dec00204 	addi	sp,sp,8
    2f40:	f800283a 	ret

00002f44 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
    2f44:	defffa04 	addi	sp,sp,-24
    2f48:	dfc00515 	stw	ra,20(sp)
    2f4c:	df000415 	stw	fp,16(sp)
    2f50:	dc000315 	stw	r16,12(sp)
    2f54:	df000404 	addi	fp,sp,16
    2f58:	e13ffd15 	stw	r4,-12(fp)
    2f5c:	2805883a 	mov	r2,r5
    2f60:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2f64:	00800044 	movi	r2,1
    2f68:	e0bffc05 	stb	r2,-16(fp)
    2f6c:	e0bffc03 	ldbu	r2,-16(fp)
    2f70:	10800428 	cmpgeui	r2,r2,16
    2f74:	1000111e 	bne	r2,zero,2fbc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
    2f78:	e0bffc03 	ldbu	r2,-16(fp)
    2f7c:	e43ffd17 	ldw	r16,-12(fp)
    2f80:	014001c4 	movi	r5,7
    2f84:	1009883a 	mov	r4,r2
    2f88:	000cda80 	call	cda8 <__mulsi3>
    2f8c:	8085883a 	add	r2,r16,r2
    2f90:	10800304 	addi	r2,r2,12
    2f94:	10800003 	ldbu	r2,0(r2)
    2f98:	10c03fcc 	andi	r3,r2,255
    2f9c:	e0bffe03 	ldbu	r2,-8(fp)
    2fa0:	1880021e 	bne	r3,r2,2fac <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
    2fa4:	e0bffc03 	ldbu	r2,-16(fp)
    2fa8:	00000506 	br	2fc0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
    2fac:	e0bffc03 	ldbu	r2,-16(fp)
    2fb0:	10800044 	addi	r2,r2,1
    2fb4:	e0bffc05 	stb	r2,-16(fp)
    2fb8:	003fec06 	br	2f6c <__alt_data_end+0xfc002f6c>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
    2fbc:	0005883a 	mov	r2,zero
        };
    2fc0:	e6ffff04 	addi	sp,fp,-4
    2fc4:	dfc00217 	ldw	ra,8(sp)
    2fc8:	df000117 	ldw	fp,4(sp)
    2fcc:	dc000017 	ldw	r16,0(sp)
    2fd0:	dec00304 	addi	sp,sp,12
    2fd4:	f800283a 	ret

00002fd8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
    2fd8:	defffa04 	addi	sp,sp,-24
    2fdc:	dfc00515 	stw	ra,20(sp)
    2fe0:	df000415 	stw	fp,16(sp)
    2fe4:	dc000315 	stw	r16,12(sp)
    2fe8:	df000404 	addi	fp,sp,16
    2fec:	e13ffd15 	stw	r4,-12(fp)
    2ff0:	2805883a 	mov	r2,r5
    2ff4:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
    2ff8:	e0bffe03 	ldbu	r2,-8(fp)
    2ffc:	10003026 	beq	r2,zero,30c0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
    3000:	e0bffe03 	ldbu	r2,-8(fp)
    3004:	e43ffd17 	ldw	r16,-12(fp)
    3008:	014001c4 	movi	r5,7
    300c:	1009883a 	mov	r4,r2
    3010:	000cda80 	call	cda8 <__mulsi3>
    3014:	8085883a 	add	r2,r16,r2
    3018:	10800304 	addi	r2,r2,12
    301c:	10800003 	ldbu	r2,0(r2)
    3020:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
    3024:	e0bffc43 	ldbu	r2,-15(fp)
    3028:	1080100c 	andi	r2,r2,64
    302c:	10803fcc 	andi	r2,r2,255
    3030:	10001e26 	beq	r2,zero,30ac <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    3034:	00800044 	movi	r2,1
    3038:	e0bffc05 	stb	r2,-16(fp)
    303c:	e0bffc03 	ldbu	r2,-16(fp)
    3040:	100d883a 	mov	r6,r2
    3044:	e17ffc43 	ldbu	r5,-15(fp)
    3048:	e13ffd17 	ldw	r4,-12(fp)
    304c:	00030dc0 	call	30dc <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
    3050:	e0bffc05 	stb	r2,-16(fp)
    3054:	e0bffc03 	ldbu	r2,-16(fp)
    3058:	1004c03a 	cmpne	r2,r2,zero
    305c:	10803fcc 	andi	r2,r2,255
    3060:	10000526 	beq	r2,zero,3078 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
    3064:	e0bffc03 	ldbu	r2,-16(fp)
    3068:	100b883a 	mov	r5,r2
    306c:	e13ffd17 	ldw	r4,-12(fp)
    3070:	0002fd80 	call	2fd8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
    3074:	003ff106 	br	303c <__alt_data_end+0xfc00303c>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
    3078:	e0bffd17 	ldw	r2,-12(fp)
    307c:	10c001c3 	ldbu	r3,7(r2)
    3080:	e0bffc43 	ldbu	r2,-15(fp)
    3084:	108001cc 	andi	r2,r2,7
    3088:	18c03fcc 	andi	r3,r3,255
    308c:	10803fcc 	andi	r2,r2,255
    3090:	1880061e 	bne	r3,r2,30ac <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
    3094:	e0bffd17 	ldw	r2,-12(fp)
    3098:	108001c3 	ldbu	r2,7(r2)
    309c:	10bfffc4 	addi	r2,r2,-1
    30a0:	1007883a 	mov	r3,r2
    30a4:	e0bffd17 	ldw	r2,-12(fp)
    30a8:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
    30ac:	e0bffe03 	ldbu	r2,-8(fp)
    30b0:	100b883a 	mov	r5,r2
    30b4:	e13ffd17 	ldw	r4,-12(fp)
    30b8:	0002d980 	call	2d98 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
    30bc:	00000106 	br	30c4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
    30c0:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
    30c4:	e6ffff04 	addi	sp,fp,-4
    30c8:	dfc00217 	ldw	ra,8(sp)
    30cc:	df000117 	ldw	fp,4(sp)
    30d0:	dc000017 	ldw	r16,0(sp)
    30d4:	dec00304 	addi	sp,sp,12
    30d8:	f800283a 	ret

000030dc <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
    30dc:	defff904 	addi	sp,sp,-28
    30e0:	dfc00615 	stw	ra,24(sp)
    30e4:	df000515 	stw	fp,20(sp)
    30e8:	dc000415 	stw	r16,16(sp)
    30ec:	df000504 	addi	fp,sp,20
    30f0:	e13ffc15 	stw	r4,-16(fp)
    30f4:	e17ffd05 	stb	r5,-12(fp)
    30f8:	3005883a 	mov	r2,r6
    30fc:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3100:	e0bffe03 	ldbu	r2,-8(fp)
    3104:	10000526 	beq	r2,zero,311c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3108:	e0bffe03 	ldbu	r2,-8(fp)
    310c:	10800428 	cmpgeui	r2,r2,16
    3110:	1000021e 	bne	r2,zero,311c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
    3114:	e0bffe03 	ldbu	r2,-8(fp)
    3118:	00000106 	br	3120 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
    311c:	00800044 	movi	r2,1
    3120:	e0bffb05 	stb	r2,-20(fp)
    3124:	e0bffb03 	ldbu	r2,-20(fp)
    3128:	10800428 	cmpgeui	r2,r2,16
    312c:	1000161e 	bne	r2,zero,3188 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
    3130:	e0bffb03 	ldbu	r2,-20(fp)
    3134:	e43ffc17 	ldw	r16,-16(fp)
    3138:	014001c4 	movi	r5,7
    313c:	1009883a 	mov	r4,r2
    3140:	000cda80 	call	cda8 <__mulsi3>
    3144:	8085883a 	add	r2,r16,r2
    3148:	10800304 	addi	r2,r2,12
    314c:	10800003 	ldbu	r2,0(r2)
    3150:	1004d0fa 	srli	r2,r2,3
    3154:	108001cc 	andi	r2,r2,7
    3158:	1007883a 	mov	r3,r2
    315c:	e0bffd03 	ldbu	r2,-12(fp)
    3160:	108001cc 	andi	r2,r2,7
    3164:	18c03fcc 	andi	r3,r3,255
    3168:	10803fcc 	andi	r2,r2,255
    316c:	1880021e 	bne	r3,r2,3178 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
    3170:	e0bffb03 	ldbu	r2,-20(fp)
    3174:	00000506 	br	318c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
    3178:	e0bffb03 	ldbu	r2,-20(fp)
    317c:	10800044 	addi	r2,r2,1
    3180:	e0bffb05 	stb	r2,-20(fp)
    3184:	003fe706 	br	3124 <__alt_data_end+0xfc003124>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
    3188:	0005883a 	mov	r2,zero
        };
    318c:	e6ffff04 	addi	sp,fp,-4
    3190:	dfc00217 	ldw	ra,8(sp)
    3194:	df000117 	ldw	fp,4(sp)
    3198:	dc000017 	ldw	r16,0(sp)
    319c:	dec00304 	addi	sp,sp,12
    31a0:	f800283a 	ret

000031a4 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
    31a4:	defffb04 	addi	sp,sp,-20
    31a8:	dfc00415 	stw	ra,16(sp)
    31ac:	df000315 	stw	fp,12(sp)
    31b0:	df000304 	addi	fp,sp,12
    31b4:	e13ffe15 	stw	r4,-8(fp)
    31b8:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
    31bc:	e0bffe17 	ldw	r2,-8(fp)
    31c0:	1009883a 	mov	r4,r2
    31c4:	0004b600 	call	4b60 <_ZN15USBDeviceConfigC1Ev>
    31c8:	e0bffe17 	ldw	r2,-8(fp)
    31cc:	10800104 	addi	r2,r2,4
    31d0:	1009883a 	mov	r4,r2
    31d4:	0004b940 	call	4b94 <_ZN17UsbConfigXtracterC1Ev>
    31d8:	008000b4 	movhi	r2,2
    31dc:	108f0804 	addi	r2,r2,15392
    31e0:	e0fffe17 	ldw	r3,-8(fp)
    31e4:	18800015 	stw	r2,0(r3)
    31e8:	008000b4 	movhi	r2,2
    31ec:	108f1504 	addi	r2,r2,15444
    31f0:	e0fffe17 	ldw	r3,-8(fp)
    31f4:	18800115 	stw	r2,4(r3)
    31f8:	e0bffe17 	ldw	r2,-8(fp)
    31fc:	e0ffff17 	ldw	r3,-4(fp)
    3200:	10c00315 	stw	r3,12(r2)
    3204:	e0bffe17 	ldw	r2,-8(fp)
    3208:	10000405 	stb	zero,16(r2)
    320c:	e0bffe17 	ldw	r2,-8(fp)
    3210:	00c00044 	movi	r3,1
    3214:	10c006c5 	stb	r3,27(r2)
    3218:	e0bffe17 	ldw	r2,-8(fp)
    321c:	10000715 	stw	zero,28(r2)
    3220:	e0bffe17 	ldw	r2,-8(fp)
    3224:	10000905 	stb	zero,36(r2)
    3228:	e0bffe17 	ldw	r2,-8(fp)
    322c:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    3230:	e03ffd05 	stb	zero,-12(fp)
    3234:	e0bffd03 	ldbu	r2,-12(fp)
    3238:	108000e8 	cmpgeui	r2,r2,3
    323c:	1000431e 	bne	r2,zero,334c <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
    3240:	e0fffd03 	ldbu	r3,-12(fp)
    3244:	e13ffe17 	ldw	r4,-8(fp)
    3248:	1805883a 	mov	r2,r3
    324c:	1085883a 	add	r2,r2,r2
    3250:	10c5883a 	add	r2,r2,r3
    3254:	2085883a 	add	r2,r4,r2
    3258:	10800444 	addi	r2,r2,17
    325c:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
    3260:	e13ffd03 	ldbu	r4,-12(fp)
    3264:	e0bffd03 	ldbu	r2,-12(fp)
    3268:	10000226 	beq	r2,zero,3274 <_ZN7XBOXONEC1EP3USB+0xd0>
    326c:	0007883a 	mov	r3,zero
    3270:	00000106 	br	3278 <_ZN7XBOXONEC1EP3USB+0xd4>
    3274:	00c00204 	movi	r3,8
    3278:	e17ffe17 	ldw	r5,-8(fp)
    327c:	2005883a 	mov	r2,r4
    3280:	1085883a 	add	r2,r2,r2
    3284:	1105883a 	add	r2,r2,r4
    3288:	2885883a 	add	r2,r5,r2
    328c:	10800484 	addi	r2,r2,18
    3290:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
    3294:	e0fffd03 	ldbu	r3,-12(fp)
    3298:	e13ffe17 	ldw	r4,-8(fp)
    329c:	1805883a 	mov	r2,r3
    32a0:	1085883a 	add	r2,r2,r2
    32a4:	10c5883a 	add	r2,r2,r3
    32a8:	2085883a 	add	r2,r4,r2
    32ac:	10800404 	addi	r2,r2,16
    32b0:	110000c3 	ldbu	r4,3(r2)
    32b4:	00ffff84 	movi	r3,-2
    32b8:	20c6703a 	and	r3,r4,r3
    32bc:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
    32c0:	e0fffd03 	ldbu	r3,-12(fp)
    32c4:	e13ffe17 	ldw	r4,-8(fp)
    32c8:	1805883a 	mov	r2,r3
    32cc:	1085883a 	add	r2,r2,r2
    32d0:	10c5883a 	add	r2,r2,r3
    32d4:	2085883a 	add	r2,r4,r2
    32d8:	10800404 	addi	r2,r2,16
    32dc:	110000c3 	ldbu	r4,3(r2)
    32e0:	00ffff44 	movi	r3,-3
    32e4:	20c6703a 	and	r3,r4,r3
    32e8:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    32ec:	e13ffd03 	ldbu	r4,-12(fp)
    32f0:	e0bffd03 	ldbu	r2,-12(fp)
    32f4:	10000226 	beq	r2,zero,3300 <_ZN7XBOXONEC1EP3USB+0x15c>
    32f8:	00c00044 	movi	r3,1
    32fc:	00000106 	br	3304 <_ZN7XBOXONEC1EP3USB+0x160>
    3300:	00c003c4 	movi	r3,15
    3304:	e17ffe17 	ldw	r5,-8(fp)
    3308:	2005883a 	mov	r2,r4
    330c:	1085883a 	add	r2,r2,r2
    3310:	1105883a 	add	r2,r2,r4
    3314:	2885883a 	add	r2,r5,r2
    3318:	10800404 	addi	r2,r2,16
    331c:	18c7883a 	add	r3,r3,r3
    3320:	18cb883a 	add	r5,r3,r3
    3324:	10c000c3 	ldbu	r3,3(r2)
    3328:	18c000cc 	andi	r3,r3,3
    332c:	1809883a 	mov	r4,r3
    3330:	2807883a 	mov	r3,r5
    3334:	20c6b03a 	or	r3,r4,r3
    3338:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
    333c:	e0bffd03 	ldbu	r2,-12(fp)
    3340:	10800044 	addi	r2,r2,1
    3344:	e0bffd05 	stb	r2,-12(fp)
    3348:	003fba06 	br	3234 <__alt_data_end+0xfc003234>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
    334c:	e0bffe17 	ldw	r2,-8(fp)
    3350:	10800317 	ldw	r2,12(r2)
    3354:	10000626 	beq	r2,zero,3370 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
    3358:	e0bffe17 	ldw	r2,-8(fp)
    335c:	10800317 	ldw	r2,12(r2)
    3360:	e0fffe17 	ldw	r3,-8(fp)
    3364:	180b883a 	mov	r5,r3
    3368:	1009883a 	mov	r4,r2
    336c:	00049140 	call	4914 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
    3370:	0001883a 	nop
    3374:	e037883a 	mov	sp,fp
    3378:	dfc00117 	ldw	ra,4(sp)
    337c:	df000017 	ldw	fp,0(sp)
    3380:	dec00204 	addi	sp,sp,8
    3384:	f800283a 	ret

00003388 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
    3388:	deffde04 	addi	sp,sp,-136
    338c:	dfc02115 	stw	ra,132(sp)
    3390:	df002015 	stw	fp,128(sp)
    3394:	df002004 	addi	fp,sp,128
    3398:	e13ffc15 	stw	r4,-16(fp)
    339c:	2809883a 	mov	r4,r5
    33a0:	3007883a 	mov	r3,r6
    33a4:	3805883a 	mov	r2,r7
    33a8:	e13ffd05 	stb	r4,-12(fp)
    33ac:	e0fffe05 	stb	r3,-8(fp)
    33b0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    33b4:	e0bfe744 	addi	r2,fp,-99
    33b8:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
    33bc:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
    33c0:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    33c4:	e0bffc17 	ldw	r2,-16(fp)
    33c8:	10800317 	ldw	r2,12(r2)
    33cc:	1009883a 	mov	r4,r2
    33d0:	00028f00 	call	28f0 <_ZN3USB14GetAddressPoolEv>
    33d4:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
    33d8:	e0bffc17 	ldw	r2,-16(fp)
    33dc:	10800403 	ldbu	r2,16(r2)
    33e0:	10803fcc 	andi	r2,r2,255
    33e4:	10000226 	beq	r2,zero,33f0 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    33e8:	00bff644 	movi	r2,-39
    33ec:	00017606 	br	39c8 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
    33f0:	e0bfe517 	ldw	r2,-108(fp)
    33f4:	10800017 	ldw	r2,0(r2)
    33f8:	10800017 	ldw	r2,0(r2)
    33fc:	000b883a 	mov	r5,zero
    3400:	e13fe517 	ldw	r4,-108(fp)
    3404:	103ee83a 	callr	r2
    3408:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
    340c:	e0bfe317 	ldw	r2,-116(fp)
    3410:	1000021e 	bne	r2,zero,341c <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3414:	00bff584 	movi	r2,-42
    3418:	00016b06 	br	39c8 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
    341c:	e0bfe317 	ldw	r2,-116(fp)
    3420:	10c00003 	ldbu	r3,0(r2)
    3424:	11000043 	ldbu	r4,1(r2)
    3428:	2008923a 	slli	r4,r4,8
    342c:	20c6b03a 	or	r3,r4,r3
    3430:	11000083 	ldbu	r4,2(r2)
    3434:	2008943a 	slli	r4,r4,16
    3438:	20c6b03a 	or	r3,r4,r3
    343c:	108000c3 	ldbu	r2,3(r2)
    3440:	1004963a 	slli	r2,r2,24
    3444:	10c4b03a 	or	r2,r2,r3
    3448:	1000021e 	bne	r2,zero,3454 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
    344c:	00bff5c4 	movi	r2,-41
    3450:	00015d06 	br	39c8 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    3454:	e0bfe317 	ldw	r2,-116(fp)
    3458:	10c00003 	ldbu	r3,0(r2)
    345c:	11000043 	ldbu	r4,1(r2)
    3460:	2008923a 	slli	r4,r4,8
    3464:	20c6b03a 	or	r3,r4,r3
    3468:	11000083 	ldbu	r4,2(r2)
    346c:	2008943a 	slli	r4,r4,16
    3470:	20c6b03a 	or	r3,r4,r3
    3474:	108000c3 	ldbu	r2,3(r2)
    3478:	1004963a 	slli	r2,r2,24
    347c:	10c4b03a 	or	r2,r2,r3
    3480:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    3484:	e0bffc17 	ldw	r2,-16(fp)
    3488:	10c00444 	addi	r3,r2,17
    348c:	e0bfe317 	ldw	r2,-116(fp)
    3490:	19803fcc 	andi	r6,r3,255
    3494:	11000003 	ldbu	r4,0(r2)
    3498:	2008703a 	and	r4,r4,zero
    349c:	200b883a 	mov	r5,r4
    34a0:	3009883a 	mov	r4,r6
    34a4:	2908b03a 	or	r4,r5,r4
    34a8:	11000005 	stb	r4,0(r2)
    34ac:	1808d23a 	srli	r4,r3,8
    34b0:	21803fcc 	andi	r6,r4,255
    34b4:	11000043 	ldbu	r4,1(r2)
    34b8:	2008703a 	and	r4,r4,zero
    34bc:	200b883a 	mov	r5,r4
    34c0:	3009883a 	mov	r4,r6
    34c4:	2908b03a 	or	r4,r5,r4
    34c8:	11000045 	stb	r4,1(r2)
    34cc:	1808d43a 	srli	r4,r3,16
    34d0:	21803fcc 	andi	r6,r4,255
    34d4:	11000083 	ldbu	r4,2(r2)
    34d8:	2008703a 	and	r4,r4,zero
    34dc:	200b883a 	mov	r5,r4
    34e0:	3009883a 	mov	r4,r6
    34e4:	2908b03a 	or	r4,r5,r4
    34e8:	11000085 	stb	r4,2(r2)
    34ec:	180ad63a 	srli	r5,r3,24
    34f0:	10c000c3 	ldbu	r3,3(r2)
    34f4:	1806703a 	and	r3,r3,zero
    34f8:	1809883a 	mov	r4,r3
    34fc:	2807883a 	mov	r3,r5
    3500:	20c6b03a 	or	r3,r4,r3
    3504:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
    3508:	e0bfe317 	ldw	r2,-116(fp)
    350c:	e0ffff03 	ldbu	r3,-4(fp)
    3510:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
    3514:	e0bffc17 	ldw	r2,-16(fp)
    3518:	10c00317 	ldw	r3,12(r2)
    351c:	00800484 	movi	r2,18
    3520:	113fffcc 	andi	r4,r2,65535
    3524:	e0bfe744 	addi	r2,fp,-99
    3528:	d8800015 	stw	r2,0(sp)
    352c:	200f883a 	mov	r7,r4
    3530:	000d883a 	mov	r6,zero
    3534:	000b883a 	mov	r5,zero
    3538:	1809883a 	mov	r4,r3
    353c:	000251c0 	call	251c <_ZN3USB11getDevDescrEhhtPh>
    3540:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    3544:	e0bfe317 	ldw	r2,-116(fp)
    3548:	e0ffe417 	ldw	r3,-112(fp)
    354c:	19403fcc 	andi	r5,r3,255
    3550:	10c00003 	ldbu	r3,0(r2)
    3554:	1806703a 	and	r3,r3,zero
    3558:	1809883a 	mov	r4,r3
    355c:	2807883a 	mov	r3,r5
    3560:	20c6b03a 	or	r3,r4,r3
    3564:	10c00005 	stb	r3,0(r2)
    3568:	e0ffe417 	ldw	r3,-112(fp)
    356c:	1806d23a 	srli	r3,r3,8
    3570:	19403fcc 	andi	r5,r3,255
    3574:	10c00043 	ldbu	r3,1(r2)
    3578:	1806703a 	and	r3,r3,zero
    357c:	1809883a 	mov	r4,r3
    3580:	2807883a 	mov	r3,r5
    3584:	20c6b03a 	or	r3,r4,r3
    3588:	10c00045 	stb	r3,1(r2)
    358c:	e0ffe417 	ldw	r3,-112(fp)
    3590:	1806d43a 	srli	r3,r3,16
    3594:	19403fcc 	andi	r5,r3,255
    3598:	10c00083 	ldbu	r3,2(r2)
    359c:	1806703a 	and	r3,r3,zero
    35a0:	1809883a 	mov	r4,r3
    35a4:	2807883a 	mov	r3,r5
    35a8:	20c6b03a 	or	r3,r4,r3
    35ac:	10c00085 	stb	r3,2(r2)
    35b0:	e0ffe417 	ldw	r3,-112(fp)
    35b4:	180ad63a 	srli	r5,r3,24
    35b8:	10c000c3 	ldbu	r3,3(r2)
    35bc:	1806703a 	and	r3,r3,zero
    35c0:	1809883a 	mov	r4,r3
    35c4:	2807883a 	mov	r3,r5
    35c8:	20c6b03a 	or	r3,r4,r3
    35cc:	10c000c5 	stb	r3,3(r2)

        if(rcode)
    35d0:	e0bfe103 	ldbu	r2,-124(fp)
    35d4:	1000e61e 	bne	r2,zero,3970 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
    35d8:	e0bfe217 	ldw	r2,-120(fp)
    35dc:	10c00203 	ldbu	r3,8(r2)
    35e0:	10800243 	ldbu	r2,9(r2)
    35e4:	1004923a 	slli	r2,r2,8
    35e8:	10c4b03a 	or	r2,r2,r3
    35ec:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
    35f0:	e0bfe217 	ldw	r2,-120(fp)
    35f4:	10c00283 	ldbu	r3,10(r2)
    35f8:	108002c3 	ldbu	r2,11(r2)
    35fc:	1004923a 	slli	r2,r2,8
    3600:	10c4b03a 	or	r2,r2,r3
    3604:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
    3608:	e0bffc17 	ldw	r2,-16(fp)
    360c:	10800017 	ldw	r2,0(r2)
    3610:	10800604 	addi	r2,r2,24
    3614:	10800017 	ldw	r2,0(r2)
    3618:	e0ffe60b 	ldhu	r3,-104(fp)
    361c:	e13fe68b 	ldhu	r4,-102(fp)
    3620:	200d883a 	mov	r6,r4
    3624:	180b883a 	mov	r5,r3
    3628:	e13ffc17 	ldw	r4,-16(fp)
    362c:	103ee83a 	callr	r2
    3630:	1080005c 	xori	r2,r2,1
    3634:	10803fcc 	andi	r2,r2,255
    3638:	1000d51e 	bne	r2,zero,3990 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    363c:	e0bfe517 	ldw	r2,-108(fp)
    3640:	10800017 	ldw	r2,0(r2)
    3644:	10800104 	addi	r2,r2,4
    3648:	10800017 	ldw	r2,0(r2)
    364c:	e0fffd03 	ldbu	r3,-12(fp)
    3650:	e13ffe03 	ldbu	r4,-8(fp)
    3654:	200f883a 	mov	r7,r4
    3658:	000d883a 	mov	r6,zero
    365c:	180b883a 	mov	r5,r3
    3660:	e13fe517 	ldw	r4,-108(fp)
    3664:	103ee83a 	callr	r2
    3668:	1007883a 	mov	r3,r2
    366c:	e0bffc17 	ldw	r2,-16(fp)
    3670:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
    3674:	e0bffc17 	ldw	r2,-16(fp)
    3678:	10800403 	ldbu	r2,16(r2)
    367c:	10803fcc 	andi	r2,r2,255
    3680:	1000021e 	bne	r2,zero,368c <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    3684:	00bff504 	movi	r2,-44
    3688:	0000cf06 	br	39c8 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    368c:	e0bfe217 	ldw	r2,-120(fp)
    3690:	10c001c3 	ldbu	r3,7(r2)
    3694:	e0bffc17 	ldw	r2,-16(fp)
    3698:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
    369c:	e0bffc17 	ldw	r2,-16(fp)
    36a0:	10c00317 	ldw	r3,12(r2)
    36a4:	e0bffc17 	ldw	r2,-16(fp)
    36a8:	10800403 	ldbu	r2,16(r2)
    36ac:	10803fcc 	andi	r2,r2,255
    36b0:	100f883a 	mov	r7,r2
    36b4:	000d883a 	mov	r6,zero
    36b8:	000b883a 	mov	r5,zero
    36bc:	1809883a 	mov	r4,r3
    36c0:	00027d80 	call	27d8 <_ZN3USB7setAddrEhhh>
    36c4:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
    36c8:	e0bfe103 	ldbu	r2,-124(fp)
    36cc:	10001026 	beq	r2,zero,3710 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
    36d0:	e0bfe317 	ldw	r2,-116(fp)
    36d4:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    36d8:	e0bfe517 	ldw	r2,-108(fp)
    36dc:	10800017 	ldw	r2,0(r2)
    36e0:	10800204 	addi	r2,r2,8
    36e4:	10800017 	ldw	r2,0(r2)
    36e8:	e0fffc17 	ldw	r3,-16(fp)
    36ec:	18c00403 	ldbu	r3,16(r3)
    36f0:	18c03fcc 	andi	r3,r3,255
    36f4:	180b883a 	mov	r5,r3
    36f8:	e13fe517 	ldw	r4,-108(fp)
    36fc:	103ee83a 	callr	r2
                bAddress = 0;
    3700:	e0bffc17 	ldw	r2,-16(fp)
    3704:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
    3708:	e0bfe103 	ldbu	r2,-124(fp)
    370c:	0000ae06 	br	39c8 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
    3710:	e0bfe317 	ldw	r2,-116(fp)
    3714:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    3718:	e0bfe517 	ldw	r2,-108(fp)
    371c:	10800017 	ldw	r2,0(r2)
    3720:	10800017 	ldw	r2,0(r2)
    3724:	e0fffc17 	ldw	r3,-16(fp)
    3728:	18c00403 	ldbu	r3,16(r3)
    372c:	18c03fcc 	andi	r3,r3,255
    3730:	180b883a 	mov	r5,r3
    3734:	e13fe517 	ldw	r4,-108(fp)
    3738:	103ee83a 	callr	r2
    373c:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
    3740:	e0bfe317 	ldw	r2,-116(fp)
    3744:	1000021e 	bne	r2,zero,3750 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    3748:	00bff584 	movi	r2,-42
    374c:	00009e06 	br	39c8 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
    3750:	e0bfe317 	ldw	r2,-116(fp)
    3754:	e0ffff03 	ldbu	r3,-4(fp)
    3758:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    375c:	e0bffc17 	ldw	r2,-16(fp)
    3760:	10c00317 	ldw	r3,12(r2)
    3764:	e0bffc17 	ldw	r2,-16(fp)
    3768:	10800403 	ldbu	r2,16(r2)
    376c:	11003fcc 	andi	r4,r2,255
    3770:	e0bffc17 	ldw	r2,-16(fp)
    3774:	10800444 	addi	r2,r2,17
    3778:	100f883a 	mov	r7,r2
    377c:	01800044 	movi	r6,1
    3780:	200b883a 	mov	r5,r4
    3784:	1809883a 	mov	r4,r3
    3788:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    378c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    3790:	e0bfe103 	ldbu	r2,-124(fp)
    3794:	1000781e 	bne	r2,zero,3978 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
    3798:	e0bfe217 	ldw	r2,-120(fp)
    379c:	10800443 	ldbu	r2,17(r2)
    37a0:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
    37a4:	e0bfe703 	ldbu	r2,-100(fp)
    37a8:	01402004 	movi	r5,128
    37ac:	1009883a 	mov	r4,r2
    37b0:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    37b4:	e03fe145 	stb	zero,-123(fp)
    37b8:	e0ffe143 	ldbu	r3,-123(fp)
    37bc:	e0bfe703 	ldbu	r2,-100(fp)
    37c0:	1880222e 	bgeu	r3,r2,384c <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
    37c4:	e0bffc17 	ldw	r2,-16(fp)
    37c8:	10c00104 	addi	r3,r2,4
    37cc:	e0bfed04 	addi	r2,fp,-76
    37d0:	180b883a 	mov	r5,r3
    37d4:	1009883a 	mov	r4,r2
    37d8:	0004bfc0 	call	4bfc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
    37dc:	e0bffc17 	ldw	r2,-16(fp)
    37e0:	10c00317 	ldw	r3,12(r2)
    37e4:	e0bffc17 	ldw	r2,-16(fp)
    37e8:	10800403 	ldbu	r2,16(r2)
    37ec:	11003fcc 	andi	r4,r2,255
    37f0:	e17fe143 	ldbu	r5,-123(fp)
    37f4:	e0bfed04 	addi	r2,fp,-76
    37f8:	d8800015 	stw	r2,0(sp)
    37fc:	280f883a 	mov	r7,r5
    3800:	000d883a 	mov	r6,zero
    3804:	200b883a 	mov	r5,r4
    3808:	1809883a 	mov	r4,r3
    380c:	00026380 	call	2638 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    3810:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
    3814:	e0bfe103 	ldbu	r2,-124(fp)
    3818:	10000226 	beq	r2,zero,3824 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
    381c:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    3820:	00006206 	br	39ac <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
    3824:	e0bffc17 	ldw	r2,-16(fp)
    3828:	108006c3 	ldbu	r2,27(r2)
    382c:	10803fcc 	andi	r2,r2,255
    3830:	108000f0 	cmpltui	r2,r2,3
    3834:	10000426 	beq	r2,zero,3848 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
    3838:	e0bfe143 	ldbu	r2,-123(fp)
    383c:	10800044 	addi	r2,r2,1
    3840:	e0bfe145 	stb	r2,-123(fp)
    3844:	003fdc06 	br	37b8 <__alt_data_end+0xfc0037b8>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
    3848:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
    384c:	e0bffc17 	ldw	r2,-16(fp)
    3850:	108006c3 	ldbu	r2,27(r2)
    3854:	10803fcc 	andi	r2,r2,255
    3858:	108000e8 	cmpgeui	r2,r2,3
    385c:	10004e26 	beq	r2,zero,3998 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
    3860:	e0bffc17 	ldw	r2,-16(fp)
    3864:	10c00317 	ldw	r3,12(r2)
    3868:	e0bffc17 	ldw	r2,-16(fp)
    386c:	10800403 	ldbu	r2,16(r2)
    3870:	11003fcc 	andi	r4,r2,255
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	108006c3 	ldbu	r2,27(r2)
    387c:	11403fcc 	andi	r5,r2,255
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	10800444 	addi	r2,r2,17
    3888:	100f883a 	mov	r7,r2
    388c:	280d883a 	mov	r6,r5
    3890:	200b883a 	mov	r5,r4
    3894:	1809883a 	mov	r4,r3
    3898:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    389c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    38a0:	e0bfe103 	ldbu	r2,-124(fp)
    38a4:	1000361e 	bne	r2,zero,3980 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
    38a8:	01003204 	movi	r4,200
    38ac:	00006840 	call	684 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
    38b0:	e0bffc17 	ldw	r2,-16(fp)
    38b4:	10c00317 	ldw	r3,12(r2)
    38b8:	e0bffc17 	ldw	r2,-16(fp)
    38bc:	10800403 	ldbu	r2,16(r2)
    38c0:	11003fcc 	andi	r4,r2,255
    38c4:	e0bffc17 	ldw	r2,-16(fp)
    38c8:	10800443 	ldbu	r2,17(r2)
    38cc:	11403fcc 	andi	r5,r2,255
    38d0:	e0bffc17 	ldw	r2,-16(fp)
    38d4:	10800683 	ldbu	r2,26(r2)
    38d8:	10803fcc 	andi	r2,r2,255
    38dc:	100f883a 	mov	r7,r2
    38e0:	280d883a 	mov	r6,r5
    38e4:	200b883a 	mov	r5,r4
    38e8:	1809883a 	mov	r4,r3
    38ec:	000286c0 	call	286c <_ZN3USB7setConfEhhh>
    38f0:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
    38f4:	e0bfe103 	ldbu	r2,-124(fp)
    38f8:	1000231e 	bne	r2,zero,3988 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
    38fc:	01003204 	movi	r4,200
    3900:	00006840 	call	684 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
    3904:	e0bffc17 	ldw	r2,-16(fp)
    3908:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
    390c:	00800144 	movi	r2,5
    3910:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
    3914:	00800804 	movi	r2,32
    3918:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
    391c:	00800044 	movi	r2,1
    3920:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
    3924:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
    3928:	e0bfebc4 	addi	r2,fp,-81
    392c:	01800144 	movi	r6,5
    3930:	100b883a 	mov	r5,r2
    3934:	e13ffc17 	ldw	r4,-16(fp)
    3938:	00042500 	call	4250 <_ZN7XBOXONE11XboxCommandEPht>
    393c:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
    3940:	e0bfe103 	ldbu	r2,-124(fp)
    3944:	1000181e 	bne	r2,zero,39a8 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
    3948:	e13ffc17 	ldw	r4,-16(fp)
    394c:	00042f00 	call	42f0 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
    3950:	e0bffc17 	ldw	r2,-16(fp)
    3954:	00c00044 	movi	r3,1
    3958:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
    395c:	e0bffc17 	ldw	r2,-16(fp)
    3960:	00c00044 	movi	r3,1
    3964:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
    3968:	0005883a 	mov	r2,zero
    396c:	00001606 	br	39c8 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
    3970:	0001883a 	nop
    3974:	00000d06 	br	39ac <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3978:	0001883a 	nop
    397c:	00000b06 	br	39ac <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
    3980:	0001883a 	nop
    3984:	00000906 	br	39ac <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
    3988:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
    398c:	00000706 	br	39ac <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
    3990:	0001883a 	nop
    3994:	00000106 	br	399c <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
    3998:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
    399c:	00bff444 	movi	r2,-47
    39a0:	e0bfe105 	stb	r2,-124(fp)
    39a4:	00000106 	br	39ac <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
    39a8:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
    39ac:	e0bffc17 	ldw	r2,-16(fp)
    39b0:	10800017 	ldw	r2,0(r2)
    39b4:	10800204 	addi	r2,r2,8
    39b8:	10800017 	ldw	r2,0(r2)
    39bc:	e13ffc17 	ldw	r4,-16(fp)
    39c0:	103ee83a 	callr	r2
        return rcode;
    39c4:	e0bfe103 	ldbu	r2,-124(fp)
}
    39c8:	e037883a 	mov	sp,fp
    39cc:	dfc00117 	ldw	ra,4(sp)
    39d0:	df000017 	ldw	fp,0(sp)
    39d4:	dec00204 	addi	sp,sp,8
    39d8:	f800283a 	ret

000039dc <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    39dc:	defff904 	addi	sp,sp,-28
    39e0:	df000615 	stw	fp,24(sp)
    39e4:	df000604 	addi	fp,sp,24
    39e8:	e13ffb15 	stw	r4,-20(fp)
    39ec:	3009883a 	mov	r4,r6
    39f0:	3807883a 	mov	r3,r7
    39f4:	e0800117 	ldw	r2,4(fp)
    39f8:	e17ffc05 	stb	r5,-16(fp)
    39fc:	e13ffd05 	stb	r4,-12(fp)
    3a00:	e0fffe05 	stb	r3,-8(fp)
    3a04:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
    3a08:	e0bffb17 	ldw	r2,-20(fp)
    3a0c:	e0fffc03 	ldbu	r3,-16(fp)
    3a10:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
    3a14:	e0800217 	ldw	r2,8(fp)
    3a18:	108000c3 	ldbu	r2,3(r2)
    3a1c:	10803fcc 	andi	r2,r2,255
    3a20:	108000cc 	andi	r2,r2,3
    3a24:	108000d8 	cmpnei	r2,r2,3
    3a28:	1000361e 	bne	r2,zero,3b04 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
    3a2c:	e0800217 	ldw	r2,8(fp)
    3a30:	10800083 	ldbu	r2,2(r2)
    3a34:	10803fcc 	andi	r2,r2,255
    3a38:	1080201c 	xori	r2,r2,128
    3a3c:	10bfe004 	addi	r2,r2,-128
    3a40:	1000020e 	bge	r2,zero,3a4c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    3a44:	00800084 	movi	r2,2
    3a48:	00000106 	br	3a50 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
    3a4c:	00800044 	movi	r2,1
    3a50:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    3a54:	e0fffa03 	ldbu	r3,-24(fp)
    3a58:	e0800217 	ldw	r2,8(fp)
    3a5c:	10800083 	ldbu	r2,2(r2)
    3a60:	108003cc 	andi	r2,r2,15
    3a64:	100b883a 	mov	r5,r2
    3a68:	e13ffb17 	ldw	r4,-20(fp)
    3a6c:	1805883a 	mov	r2,r3
    3a70:	1085883a 	add	r2,r2,r2
    3a74:	10c5883a 	add	r2,r2,r3
    3a78:	2085883a 	add	r2,r4,r2
    3a7c:	10800444 	addi	r2,r2,17
    3a80:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    3a84:	e0fffa03 	ldbu	r3,-24(fp)
    3a88:	e0800217 	ldw	r2,8(fp)
    3a8c:	11000103 	ldbu	r4,4(r2)
    3a90:	10800143 	ldbu	r2,5(r2)
    3a94:	1004923a 	slli	r2,r2,8
    3a98:	1104b03a 	or	r2,r2,r4
    3a9c:	100b883a 	mov	r5,r2
    3aa0:	e13ffb17 	ldw	r4,-20(fp)
    3aa4:	1805883a 	mov	r2,r3
    3aa8:	1085883a 	add	r2,r2,r2
    3aac:	10c5883a 	add	r2,r2,r3
    3ab0:	2085883a 	add	r2,r4,r2
    3ab4:	10800484 	addi	r2,r2,18
    3ab8:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
    3abc:	e0bffb17 	ldw	r2,-20(fp)
    3ac0:	10c00903 	ldbu	r3,36(r2)
    3ac4:	e0800217 	ldw	r2,8(fp)
    3ac8:	10800183 	ldbu	r2,6(r2)
    3acc:	18c03fcc 	andi	r3,r3,255
    3ad0:	10803fcc 	andi	r2,r2,255
    3ad4:	1880042e 	bgeu	r3,r2,3ae8 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
    3ad8:	e0800217 	ldw	r2,8(fp)
    3adc:	10c00183 	ldbu	r3,6(r2)
    3ae0:	e0bffb17 	ldw	r2,-20(fp)
    3ae4:	10c00905 	stb	r3,36(r2)
        bNumEP++;
    3ae8:	e0bffb17 	ldw	r2,-20(fp)
    3aec:	108006c3 	ldbu	r2,27(r2)
    3af0:	10800044 	addi	r2,r2,1
    3af4:	1007883a 	mov	r3,r2
    3af8:	e0bffb17 	ldw	r2,-20(fp)
    3afc:	10c006c5 	stb	r3,27(r2)
    3b00:	00000106 	br	3b08 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
    3b04:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
    3b08:	e037883a 	mov	sp,fp
    3b0c:	df000017 	ldw	fp,0(sp)
    3b10:	dec00104 	addi	sp,sp,4
    3b14:	f800283a 	ret

00003b18 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    3b18:	213fff04 	addi	r4,r4,-4
    3b1c:	00039dc1 	jmpi	39dc <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00003b20 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
    3b20:	defffd04 	addi	sp,sp,-12
    3b24:	df000215 	stw	fp,8(sp)
    3b28:	df000204 	addi	fp,sp,8
    3b2c:	e13ffe15 	stw	r4,-8(fp)
    3b30:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
    3b34:	0001883a 	nop
    3b38:	e037883a 	mov	sp,fp
    3b3c:	df000017 	ldw	fp,0(sp)
    3b40:	dec00104 	addi	sp,sp,4
    3b44:	f800283a 	ret

00003b48 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
    3b48:	defffd04 	addi	sp,sp,-12
    3b4c:	dfc00215 	stw	ra,8(sp)
    3b50:	df000115 	stw	fp,4(sp)
    3b54:	df000104 	addi	fp,sp,4
    3b58:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
    3b5c:	e0bfff17 	ldw	r2,-4(fp)
    3b60:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    3b64:	e0bfff17 	ldw	r2,-4(fp)
    3b68:	10800317 	ldw	r2,12(r2)
    3b6c:	1009883a 	mov	r4,r2
    3b70:	00028f00 	call	28f0 <_ZN3USB14GetAddressPoolEv>
    3b74:	1009883a 	mov	r4,r2
    3b78:	20800017 	ldw	r2,0(r4)
    3b7c:	10800204 	addi	r2,r2,8
    3b80:	10800017 	ldw	r2,0(r2)
    3b84:	e0ffff17 	ldw	r3,-4(fp)
    3b88:	18c00403 	ldbu	r3,16(r3)
    3b8c:	18c03fcc 	andi	r3,r3,255
    3b90:	180b883a 	mov	r5,r3
    3b94:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
    3b98:	e0bfff17 	ldw	r2,-4(fp)
    3b9c:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
    3ba0:	e0bfff17 	ldw	r2,-4(fp)
    3ba4:	00c00044 	movi	r3,1
    3ba8:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
    3bac:	e0bfff17 	ldw	r2,-4(fp)
    3bb0:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
    3bb4:	e0bfff17 	ldw	r2,-4(fp)
    3bb8:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
    3bc4:	0005883a 	mov	r2,zero
}
    3bc8:	e037883a 	mov	sp,fp
    3bcc:	dfc00117 	ldw	ra,4(sp)
    3bd0:	df000017 	ldw	fp,0(sp)
    3bd4:	dec00204 	addi	sp,sp,8
    3bd8:	f800283a 	ret

00003bdc <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
    3bdc:	defffa04 	addi	sp,sp,-24
    3be0:	dfc00515 	stw	ra,20(sp)
    3be4:	df000415 	stw	fp,16(sp)
    3be8:	df000404 	addi	fp,sp,16
    3bec:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
    3bf0:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
    3bf4:	e0bfff17 	ldw	r2,-4(fp)
    3bf8:	10800943 	ldbu	r2,37(r2)
    3bfc:	1080005c 	xori	r2,r2,1
    3c00:	10803fcc 	andi	r2,r2,255
    3c04:	10000226 	beq	r2,zero,3c10 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
    3c08:	0005883a 	mov	r2,zero
    3c0c:	00002c06 	br	3cc0 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
    3c10:	00006dc0 	call	6dc <_Z6millisv>
    3c14:	1007883a 	mov	r3,r2
    3c18:	e0bfff17 	ldw	r2,-4(fp)
    3c1c:	10800717 	ldw	r2,28(r2)
    3c20:	1885c83a 	sub	r2,r3,r2
    3c24:	0084303a 	nor	r2,zero,r2
    3c28:	1004d7fa 	srli	r2,r2,31
    3c2c:	10803fcc 	andi	r2,r2,255
    3c30:	10002226 	beq	r2,zero,3cbc <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
    3c34:	00006dc0 	call	6dc <_Z6millisv>
    3c38:	1007883a 	mov	r3,r2
    3c3c:	e0bfff17 	ldw	r2,-4(fp)
    3c40:	10800903 	ldbu	r2,36(r2)
    3c44:	10803fcc 	andi	r2,r2,255
    3c48:	1887883a 	add	r3,r3,r2
    3c4c:	e0bfff17 	ldw	r2,-4(fp)
    3c50:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
    3c54:	e0bfff17 	ldw	r2,-4(fp)
    3c58:	10800603 	ldbu	r2,24(r2)
    3c5c:	10803fcc 	andi	r2,r2,255
    3c60:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
    3c64:	e0bfff17 	ldw	r2,-4(fp)
    3c68:	11000317 	ldw	r4,12(r2)
    3c6c:	e0bfff17 	ldw	r2,-4(fp)
    3c70:	10800403 	ldbu	r2,16(r2)
    3c74:	11403fcc 	andi	r5,r2,255
    3c78:	e0bfff17 	ldw	r2,-4(fp)
    3c7c:	108005c3 	ldbu	r2,23(r2)
    3c80:	11803fcc 	andi	r6,r2,255
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10800f84 	addi	r2,r2,62
    3c8c:	e0ffff17 	ldw	r3,-4(fp)
    3c90:	18c00903 	ldbu	r3,36(r3)
    3c94:	18c03fcc 	andi	r3,r3,255
    3c98:	e1fffe84 	addi	r7,fp,-6
    3c9c:	d8c00115 	stw	r3,4(sp)
    3ca0:	d8800015 	stw	r2,0(sp)
    3ca4:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    3ca8:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
    3cac:	e0bffe43 	ldbu	r2,-7(fp)
    3cb0:	1000021e 	bne	r2,zero,3cbc <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
    3cb4:	e13fff17 	ldw	r4,-4(fp)
    3cb8:	0003cd40 	call	3cd4 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
    3cbc:	e0bffe03 	ldbu	r2,-8(fp)
}
    3cc0:	e037883a 	mov	sp,fp
    3cc4:	dfc00117 	ldw	ra,4(sp)
    3cc8:	df000017 	ldw	fp,0(sp)
    3ccc:	dec00204 	addi	sp,sp,8
    3cd0:	f800283a 	ret

00003cd4 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
    3cd4:	defffd04 	addi	sp,sp,-12
    3cd8:	df000215 	stw	fp,8(sp)
    3cdc:	df000204 	addi	fp,sp,8
    3ce0:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
    3ce4:	e0bfff17 	ldw	r2,-4(fp)
    3ce8:	10800f83 	ldbu	r2,62(r2)
    3cec:	10803fcc 	andi	r2,r2,255
    3cf0:	108001d8 	cmpnei	r2,r2,7
    3cf4:	10002f1e 	bne	r2,zero,3db4 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
    3cf8:	e0bfff17 	ldw	r2,-4(fp)
    3cfc:	10801083 	ldbu	r2,66(r2)
    3d00:	10803fcc 	andi	r2,r2,255
    3d04:	10800058 	cmpnei	r2,r2,1
    3d08:	10000a1e 	bne	r2,zero,3d34 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3d0c:	e0bfff17 	ldw	r2,-4(fp)
    3d10:	10c0098b 	ldhu	r3,38(r2)
    3d14:	008000b4 	movhi	r2,2
    3d18:	108f0484 	addi	r2,r2,15378
    3d1c:	1080000b 	ldhu	r2,0(r2)
    3d20:	1884b03a 	or	r2,r3,r2
    3d24:	1007883a 	mov	r3,r2
    3d28:	e0bfff17 	ldw	r2,-4(fp)
    3d2c:	10c0098d 	sth	r3,38(r2)
    3d30:	00000b06 	br	3d60 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
    3d34:	e0bfff17 	ldw	r2,-4(fp)
    3d38:	1080098b 	ldhu	r2,38(r2)
    3d3c:	1007883a 	mov	r3,r2
    3d40:	008000b4 	movhi	r2,2
    3d44:	108f0484 	addi	r2,r2,15378
    3d48:	1080000b 	ldhu	r2,0(r2)
    3d4c:	0084303a 	nor	r2,zero,r2
    3d50:	1884703a 	and	r2,r3,r2
    3d54:	1007883a 	mov	r3,r2
    3d58:	e0bfff17 	ldw	r2,-4(fp)
    3d5c:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
    3d60:	e0bfff17 	ldw	r2,-4(fp)
    3d64:	10c0098b 	ldhu	r3,38(r2)
    3d68:	e0bfff17 	ldw	r2,-4(fp)
    3d6c:	10800a0b 	ldhu	r2,40(r2)
    3d70:	18ffffcc 	andi	r3,r3,65535
    3d74:	10bfffcc 	andi	r2,r2,65535
    3d78:	18800e26 	beq	r3,r2,3db4 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3d7c:	e0bfff17 	ldw	r2,-4(fp)
    3d80:	1080098b 	ldhu	r2,38(r2)
    3d84:	1007883a 	mov	r3,r2
    3d88:	e0bfff17 	ldw	r2,-4(fp)
    3d8c:	10800a0b 	ldhu	r2,40(r2)
    3d90:	0084303a 	nor	r2,zero,r2
    3d94:	1884703a 	and	r2,r3,r2
    3d98:	1007883a 	mov	r3,r2
    3d9c:	e0bfff17 	ldw	r2,-4(fp)
    3da0:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
    3da4:	e0bfff17 	ldw	r2,-4(fp)
    3da8:	10c0098b 	ldhu	r3,38(r2)
    3dac:	e0bfff17 	ldw	r2,-4(fp)
    3db0:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
    3db4:	e0bfff17 	ldw	r2,-4(fp)
    3db8:	10800f83 	ldbu	r2,62(r2)
    3dbc:	10803fcc 	andi	r2,r2,255
    3dc0:	10800820 	cmpeqi	r2,r2,32
    3dc4:	1000b026 	beq	r2,zero,4088 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
    3dc8:	e0bfff17 	ldw	r2,-4(fp)
    3dcc:	10c0098b 	ldhu	r3,38(r2)
    3dd0:	008000b4 	movhi	r2,2
    3dd4:	108f0484 	addi	r2,r2,15378
    3dd8:	1080000b 	ldhu	r2,0(r2)
    3ddc:	1884703a 	and	r2,r3,r2
    3de0:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
    3de4:	e0bfff17 	ldw	r2,-4(fp)
    3de8:	108010c3 	ldbu	r2,67(r2)
    3dec:	10803fcc 	andi	r2,r2,255
    3df0:	108003cc 	andi	r2,r2,15
    3df4:	1004923a 	slli	r2,r2,8
    3df8:	1007883a 	mov	r3,r2
    3dfc:	e0bffe0b 	ldhu	r2,-8(fp)
    3e00:	1884b03a 	or	r2,r3,r2
    3e04:	1007883a 	mov	r3,r2
    3e08:	e0bfff17 	ldw	r2,-4(fp)
    3e0c:	10801083 	ldbu	r2,66(r2)
    3e10:	10803fcc 	andi	r2,r2,255
    3e14:	10803c0c 	andi	r2,r2,240
    3e18:	1884b03a 	or	r2,r3,r2
    3e1c:	1007883a 	mov	r3,r2
    3e20:	e0bfff17 	ldw	r2,-4(fp)
    3e24:	10801083 	ldbu	r2,66(r2)
    3e28:	10803fcc 	andi	r2,r2,255
    3e2c:	1080030c 	andi	r2,r2,12
    3e30:	100492ba 	slli	r2,r2,10
    3e34:	1884b03a 	or	r2,r3,r2
    3e38:	1007883a 	mov	r3,r2
    3e3c:	e0bfff17 	ldw	r2,-4(fp)
    3e40:	10801083 	ldbu	r2,66(r2)
    3e44:	10803fcc 	andi	r2,r2,255
    3e48:	1080004c 	andi	r2,r2,1
    3e4c:	100490fa 	slli	r2,r2,3
    3e50:	1884b03a 	or	r2,r3,r2
    3e54:	1007883a 	mov	r3,r2
    3e58:	e0bfff17 	ldw	r2,-4(fp)
    3e5c:	108010c3 	ldbu	r2,67(r2)
    3e60:	10803fcc 	andi	r2,r2,255
    3e64:	1080300c 	andi	r2,r2,192
    3e68:	1004923a 	slli	r2,r2,8
    3e6c:	1884b03a 	or	r2,r3,r2
    3e70:	1007883a 	mov	r3,r2
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	108010c3 	ldbu	r2,67(r2)
    3e7c:	10803fcc 	andi	r2,r2,255
    3e80:	10800c0c 	andi	r2,r2,48
    3e84:	1005d13a 	srai	r2,r2,4
    3e88:	1884b03a 	or	r2,r3,r2
    3e8c:	1007883a 	mov	r3,r2
    3e90:	e0bfff17 	ldw	r2,-4(fp)
    3e94:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
    3e98:	e0bfff17 	ldw	r2,-4(fp)
    3e9c:	10801143 	ldbu	r2,69(r2)
    3ea0:	10803fcc 	andi	r2,r2,255
    3ea4:	1004923a 	slli	r2,r2,8
    3ea8:	1007883a 	mov	r3,r2
    3eac:	e0bfff17 	ldw	r2,-4(fp)
    3eb0:	10801103 	ldbu	r2,68(r2)
    3eb4:	10803fcc 	andi	r2,r2,255
    3eb8:	1884b03a 	or	r2,r3,r2
    3ebc:	1007883a 	mov	r3,r2
    3ec0:	e0bfff17 	ldw	r2,-4(fp)
    3ec4:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	108011c3 	ldbu	r2,71(r2)
    3ed0:	10803fcc 	andi	r2,r2,255
    3ed4:	1004923a 	slli	r2,r2,8
    3ed8:	1007883a 	mov	r3,r2
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10801183 	ldbu	r2,70(r2)
    3ee4:	10803fcc 	andi	r2,r2,255
    3ee8:	1884b03a 	or	r2,r3,r2
    3eec:	1007883a 	mov	r3,r2
    3ef0:	e0bfff17 	ldw	r2,-4(fp)
    3ef4:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	10801243 	ldbu	r2,73(r2)
    3f00:	10803fcc 	andi	r2,r2,255
    3f04:	1004923a 	slli	r2,r2,8
    3f08:	1007883a 	mov	r3,r2
    3f0c:	e0bfff17 	ldw	r2,-4(fp)
    3f10:	10801203 	ldbu	r2,72(r2)
    3f14:	10803fcc 	andi	r2,r2,255
    3f18:	1884b03a 	or	r2,r3,r2
    3f1c:	1007883a 	mov	r3,r2
    3f20:	e0bfff17 	ldw	r2,-4(fp)
    3f24:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	108012c3 	ldbu	r2,75(r2)
    3f30:	10803fcc 	andi	r2,r2,255
    3f34:	1004923a 	slli	r2,r2,8
    3f38:	1007883a 	mov	r3,r2
    3f3c:	e0bfff17 	ldw	r2,-4(fp)
    3f40:	10801283 	ldbu	r2,74(r2)
    3f44:	10803fcc 	andi	r2,r2,255
    3f48:	1884b03a 	or	r2,r3,r2
    3f4c:	1007883a 	mov	r3,r2
    3f50:	e0bfff17 	ldw	r2,-4(fp)
    3f54:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
    3f58:	e0bfff17 	ldw	r2,-4(fp)
    3f5c:	10801343 	ldbu	r2,77(r2)
    3f60:	10803fcc 	andi	r2,r2,255
    3f64:	1004923a 	slli	r2,r2,8
    3f68:	1007883a 	mov	r3,r2
    3f6c:	e0bfff17 	ldw	r2,-4(fp)
    3f70:	10801303 	ldbu	r2,76(r2)
    3f74:	10803fcc 	andi	r2,r2,255
    3f78:	1884b03a 	or	r2,r3,r2
    3f7c:	1007883a 	mov	r3,r2
    3f80:	e0bfff17 	ldw	r2,-4(fp)
    3f84:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
    3f88:	e0bfff17 	ldw	r2,-4(fp)
    3f8c:	108013c3 	ldbu	r2,79(r2)
    3f90:	10803fcc 	andi	r2,r2,255
    3f94:	1004923a 	slli	r2,r2,8
    3f98:	1007883a 	mov	r3,r2
    3f9c:	e0bfff17 	ldw	r2,-4(fp)
    3fa0:	10801383 	ldbu	r2,78(r2)
    3fa4:	10803fcc 	andi	r2,r2,255
    3fa8:	1884b03a 	or	r2,r3,r2
    3fac:	1007883a 	mov	r3,r2
    3fb0:	e0bfff17 	ldw	r2,-4(fp)
    3fb4:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
    3fb8:	e0bfff17 	ldw	r2,-4(fp)
    3fbc:	10c0098b 	ldhu	r3,38(r2)
    3fc0:	e0bfff17 	ldw	r2,-4(fp)
    3fc4:	10800a0b 	ldhu	r2,40(r2)
    3fc8:	18ffffcc 	andi	r3,r3,65535
    3fcc:	10bfffcc 	andi	r2,r2,65535
    3fd0:	18800e26 	beq	r3,r2,400c <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
    3fd4:	e0bfff17 	ldw	r2,-4(fp)
    3fd8:	1080098b 	ldhu	r2,38(r2)
    3fdc:	1007883a 	mov	r3,r2
    3fe0:	e0bfff17 	ldw	r2,-4(fp)
    3fe4:	10800a0b 	ldhu	r2,40(r2)
    3fe8:	0084303a 	nor	r2,zero,r2
    3fec:	1884703a 	and	r2,r3,r2
    3ff0:	1007883a 	mov	r3,r2
    3ff4:	e0bfff17 	ldw	r2,-4(fp)
    3ff8:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
    3ffc:	e0bfff17 	ldw	r2,-4(fp)
    4000:	10c0098b 	ldhu	r3,38(r2)
    4004:	e0bfff17 	ldw	r2,-4(fp)
    4008:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10800d0b 	ldhu	r2,52(r2)
    4014:	10bfffcc 	andi	r2,r2,65535
    4018:	10000726 	beq	r2,zero,4038 <_ZN7XBOXONE10readReportEv+0x364>
    401c:	e0bfff17 	ldw	r2,-4(fp)
    4020:	10800e0b 	ldhu	r2,56(r2)
    4024:	10bfffcc 	andi	r2,r2,65535
    4028:	1000031e 	bne	r2,zero,4038 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
    402c:	e0bfff17 	ldw	r2,-4(fp)
    4030:	00c00044 	movi	r3,1
    4034:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
    4038:	e0bfff17 	ldw	r2,-4(fp)
    403c:	10c00d0b 	ldhu	r3,52(r2)
    4040:	e0bfff17 	ldw	r2,-4(fp)
    4044:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
    4048:	e0bfff17 	ldw	r2,-4(fp)
    404c:	10800d8b 	ldhu	r2,54(r2)
    4050:	10bfffcc 	andi	r2,r2,65535
    4054:	10000726 	beq	r2,zero,4074 <_ZN7XBOXONE10readReportEv+0x3a0>
    4058:	e0bfff17 	ldw	r2,-4(fp)
    405c:	10800e8b 	ldhu	r2,58(r2)
    4060:	10bfffcc 	andi	r2,r2,65535
    4064:	1000031e 	bne	r2,zero,4074 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
    4068:	e0bfff17 	ldw	r2,-4(fp)
    406c:	00c00044 	movi	r3,1
    4070:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
    4074:	e0bfff17 	ldw	r2,-4(fp)
    4078:	10c00d8b 	ldhu	r3,54(r2)
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	10c00e8d 	sth	r3,58(r2)
    4084:	00000106 	br	408c <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
    4088:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
    408c:	e037883a 	mov	sp,fp
    4090:	df000017 	ldw	fp,0(sp)
    4094:	dec00104 	addi	sp,sp,4
    4098:	f800283a 	ret

0000409c <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
    409c:	defffd04 	addi	sp,sp,-12
    40a0:	df000215 	stw	fp,8(sp)
    40a4:	df000204 	addi	fp,sp,8
    40a8:	e13ffe15 	stw	r4,-8(fp)
    40ac:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	10800218 	cmpnei	r2,r2,8
    40b8:	1000031e 	bne	r2,zero,40c8 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
    40bc:	e0bffe17 	ldw	r2,-8(fp)
    40c0:	10800d0b 	ldhu	r2,52(r2)
    40c4:	00001306 	br	4114 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
    40c8:	e0bfff17 	ldw	r2,-4(fp)
    40cc:	10800258 	cmpnei	r2,r2,9
    40d0:	1000031e 	bne	r2,zero,40e0 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
    40d4:	e0bffe17 	ldw	r2,-8(fp)
    40d8:	10800d8b 	ldhu	r2,54(r2)
    40dc:	00000d06 	br	4114 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
    40e0:	e0bffe17 	ldw	r2,-8(fp)
    40e4:	10c0098b 	ldhu	r3,38(r2)
    40e8:	e0bfff17 	ldw	r2,-4(fp)
    40ec:	10803fcc 	andi	r2,r2,255
    40f0:	1089883a 	add	r4,r2,r2
    40f4:	008000b4 	movhi	r2,2
    40f8:	108efc84 	addi	r2,r2,15346
    40fc:	2085883a 	add	r2,r4,r2
    4100:	1080000b 	ldhu	r2,0(r2)
    4104:	1884703a 	and	r2,r3,r2
    4108:	10bfffcc 	andi	r2,r2,65535
    410c:	1004c03a 	cmpne	r2,r2,zero
    4110:	10803fcc 	andi	r2,r2,255
}
    4114:	e037883a 	mov	sp,fp
    4118:	df000017 	ldw	fp,0(sp)
    411c:	dec00104 	addi	sp,sp,4
    4120:	f800283a 	ret

00004124 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
    4124:	defffc04 	addi	sp,sp,-16
    4128:	df000315 	stw	fp,12(sp)
    412c:	df000304 	addi	fp,sp,12
    4130:	e13ffe15 	stw	r4,-8(fp)
    4134:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
    4138:	e0bfff17 	ldw	r2,-4(fp)
    413c:	10800218 	cmpnei	r2,r2,8
    4140:	10000a1e 	bne	r2,zero,416c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
    4144:	e0bffe17 	ldw	r2,-8(fp)
    4148:	10800f03 	ldbu	r2,60(r2)
    414c:	10803fcc 	andi	r2,r2,255
    4150:	10000426 	beq	r2,zero,4164 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
    4154:	e0bffe17 	ldw	r2,-8(fp)
    4158:	10000f05 	stb	zero,60(r2)
                        return true;
    415c:	00800044 	movi	r2,1
    4160:	00002806 	br	4204 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4164:	0005883a 	mov	r2,zero
    4168:	00002606 	br	4204 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
    416c:	e0bfff17 	ldw	r2,-4(fp)
    4170:	10800258 	cmpnei	r2,r2,9
    4174:	10000a1e 	bne	r2,zero,41a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
    4178:	e0bffe17 	ldw	r2,-8(fp)
    417c:	10800f43 	ldbu	r2,61(r2)
    4180:	10803fcc 	andi	r2,r2,255
    4184:	10000426 	beq	r2,zero,4198 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
    4188:	e0bffe17 	ldw	r2,-8(fp)
    418c:	10000f45 	stb	zero,61(r2)
                        return true;
    4190:	00800044 	movi	r2,1
    4194:	00001b06 	br	4204 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
    4198:	0005883a 	mov	r2,zero
    419c:	00001906 	br	4204 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
    41a0:	e0bfff17 	ldw	r2,-4(fp)
    41a4:	10803fcc 	andi	r2,r2,255
    41a8:	1087883a 	add	r3,r2,r2
    41ac:	008000b4 	movhi	r2,2
    41b0:	108efc84 	addi	r2,r2,15346
    41b4:	1885883a 	add	r2,r3,r2
    41b8:	1080000b 	ldhu	r2,0(r2)
    41bc:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
    41c0:	e0bffe17 	ldw	r2,-8(fp)
    41c4:	10c00a8b 	ldhu	r3,42(r2)
    41c8:	e0bffd0b 	ldhu	r2,-12(fp)
    41cc:	1884703a 	and	r2,r3,r2
    41d0:	10bfffcc 	andi	r2,r2,65535
    41d4:	1004c03a 	cmpne	r2,r2,zero
    41d8:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	10800a8b 	ldhu	r2,42(r2)
    41e4:	1007883a 	mov	r3,r2
    41e8:	e0bffd0b 	ldhu	r2,-12(fp)
    41ec:	0084303a 	nor	r2,zero,r2
    41f0:	1884703a 	and	r2,r3,r2
    41f4:	1007883a 	mov	r3,r2
    41f8:	e0bffe17 	ldw	r2,-8(fp)
    41fc:	10c00a8d 	sth	r3,42(r2)
        return click;
    4200:	e0bffd83 	ldbu	r2,-10(fp)
}
    4204:	e037883a 	mov	sp,fp
    4208:	df000017 	ldw	fp,0(sp)
    420c:	dec00104 	addi	sp,sp,4
    4210:	f800283a 	ret

00004214 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
    4214:	defffd04 	addi	sp,sp,-12
    4218:	df000215 	stw	fp,8(sp)
    421c:	df000204 	addi	fp,sp,8
    4220:	e13ffe15 	stw	r4,-8(fp)
    4224:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
    4228:	e0bfff17 	ldw	r2,-4(fp)
    422c:	e0fffe17 	ldw	r3,-8(fp)
    4230:	10800584 	addi	r2,r2,22
    4234:	1085883a 	add	r2,r2,r2
    4238:	1885883a 	add	r2,r3,r2
    423c:	1080000b 	ldhu	r2,0(r2)
}
    4240:	e037883a 	mov	sp,fp
    4244:	df000017 	ldw	fp,0(sp)
    4248:	dec00104 	addi	sp,sp,4
    424c:	f800283a 	ret

00004250 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
    4250:	defff904 	addi	sp,sp,-28
    4254:	dfc00615 	stw	ra,24(sp)
    4258:	df000515 	stw	fp,20(sp)
    425c:	df000504 	addi	fp,sp,20
    4260:	e13ffd15 	stw	r4,-12(fp)
    4264:	e17ffe15 	stw	r5,-8(fp)
    4268:	3005883a 	mov	r2,r6
    426c:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
    4270:	e0bffe17 	ldw	r2,-8(fp)
    4274:	10c00084 	addi	r3,r2,2
    4278:	e0bffd17 	ldw	r2,-12(fp)
    427c:	10801f83 	ldbu	r2,126(r2)
    4280:	11000044 	addi	r4,r2,1
    4284:	200b883a 	mov	r5,r4
    4288:	e13ffd17 	ldw	r4,-12(fp)
    428c:	21401f85 	stb	r5,126(r4)
    4290:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
    4294:	e0bffd17 	ldw	r2,-12(fp)
    4298:	10c00317 	ldw	r3,12(r2)
    429c:	e0bffd17 	ldw	r2,-12(fp)
    42a0:	10800403 	ldbu	r2,16(r2)
    42a4:	11003fcc 	andi	r4,r2,255
    42a8:	e0bffd17 	ldw	r2,-12(fp)
    42ac:	10800503 	ldbu	r2,20(r2)
    42b0:	11403fcc 	andi	r5,r2,255
    42b4:	e1bfff0b 	ldhu	r6,-4(fp)
    42b8:	e0bffe17 	ldw	r2,-8(fp)
    42bc:	d8800015 	stw	r2,0(sp)
    42c0:	300f883a 	mov	r7,r6
    42c4:	280d883a 	mov	r6,r5
    42c8:	200b883a 	mov	r5,r4
    42cc:	1809883a 	mov	r4,r3
    42d0:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    42d4:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
    42d8:	e0bffc03 	ldbu	r2,-16(fp)
}
    42dc:	e037883a 	mov	sp,fp
    42e0:	dfc00117 	ldw	ra,4(sp)
    42e4:	df000017 	ldw	fp,0(sp)
    42e8:	dec00204 	addi	sp,sp,8
    42ec:	f800283a 	ret

000042f0 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
    42f0:	defff904 	addi	sp,sp,-28
    42f4:	dfc00615 	stw	ra,24(sp)
    42f8:	df000515 	stw	fp,20(sp)
    42fc:	df000504 	addi	fp,sp,20
    4300:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    4304:	00800244 	movi	r2,9
    4308:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    430c:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4310:	00800244 	movi	r2,9
    4314:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    4318:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    431c:	008003c4 	movi	r2,15
    4320:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
    4324:	00800104 	movi	r2,4
    4328:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
    432c:	00800104 	movi	r2,4
    4330:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
    4334:	00800804 	movi	r2,32
    4338:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
    433c:	00800804 	movi	r2,32
    4340:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
    4344:	00bfe004 	movi	r2,-128
    4348:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
    434c:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    4350:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    4354:	01800344 	movi	r6,13
    4358:	e17ffb04 	addi	r5,fp,-20
    435c:	e13fff17 	ldw	r4,-4(fp)
    4360:	00042500 	call	4250 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
    4364:	e0bfff17 	ldw	r2,-4(fp)
    4368:	10800817 	ldw	r2,32(r2)
    436c:	10000326 	beq	r2,zero,437c <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
    4370:	e0bfff17 	ldw	r2,-4(fp)
    4374:	10800817 	ldw	r2,32(r2)
    4378:	103ee83a 	callr	r2
}
    437c:	0001883a 	nop
    4380:	e037883a 	mov	sp,fp
    4384:	dfc00117 	ldw	ra,4(sp)
    4388:	df000017 	ldw	fp,0(sp)
    438c:	dec00204 	addi	sp,sp,8
    4390:	f800283a 	ret

00004394 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
    4394:	defff904 	addi	sp,sp,-28
    4398:	dfc00615 	stw	ra,24(sp)
    439c:	df000515 	stw	fp,20(sp)
    43a0:	df000504 	addi	fp,sp,20
    43a4:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    43a8:	00800244 	movi	r2,9
    43ac:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
    43b0:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    43b4:	00800244 	movi	r2,9
    43b8:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
    43bc:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    43c0:	008003c4 	movi	r2,15
    43c4:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
    43c8:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
    43cc:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
    43d0:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
    43d4:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
    43d8:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
    43dc:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
    43e0:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
    43e4:	01800344 	movi	r6,13
    43e8:	e17ffb04 	addi	r5,fp,-20
    43ec:	e13fff17 	ldw	r4,-4(fp)
    43f0:	00042500 	call	4250 <_ZN7XBOXONE11XboxCommandEPht>
}
    43f4:	0001883a 	nop
    43f8:	e037883a 	mov	sp,fp
    43fc:	dfc00117 	ldw	ra,4(sp)
    4400:	df000017 	ldw	fp,0(sp)
    4404:	dec00204 	addi	sp,sp,8
    4408:	f800283a 	ret

0000440c <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
    440c:	defff504 	addi	sp,sp,-44
    4410:	dfc00a15 	stw	ra,40(sp)
    4414:	df000915 	stw	fp,36(sp)
    4418:	df000904 	addi	fp,sp,36
    441c:	e13ffb15 	stw	r4,-20(fp)
    4420:	3009883a 	mov	r4,r6
    4424:	3807883a 	mov	r3,r7
    4428:	e0800217 	ldw	r2,8(fp)
    442c:	e17ffc05 	stb	r5,-16(fp)
    4430:	e13ffd05 	stb	r4,-12(fp)
    4434:	e0fffe05 	stb	r3,-8(fp)
    4438:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
    443c:	00800244 	movi	r2,9
    4440:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
    4444:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
    4448:	00800244 	movi	r2,9
    444c:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
    4450:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
    4454:	008003c4 	movi	r2,15
    4458:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
    445c:	e0bffc03 	ldbu	r2,-16(fp)
    4460:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
    4464:	e0bffd03 	ldbu	r2,-12(fp)
    4468:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
    446c:	e0bffe03 	ldbu	r2,-8(fp)
    4470:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
    4474:	e0bfff03 	ldbu	r2,-4(fp)
    4478:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
    447c:	00bfffc4 	movi	r2,-1
    4480:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
    4484:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
    4488:	00bfffc4 	movi	r2,-1
    448c:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
    4490:	01800344 	movi	r6,13
    4494:	e17ff704 	addi	r5,fp,-36
    4498:	e13ffb17 	ldw	r4,-20(fp)
    449c:	00042500 	call	4250 <_ZN7XBOXONE11XboxCommandEPht>
}
    44a0:	0001883a 	nop
    44a4:	e037883a 	mov	sp,fp
    44a8:	dfc00117 	ldw	ra,4(sp)
    44ac:	df000017 	ldw	fp,0(sp)
    44b0:	dec00204 	addi	sp,sp,8
    44b4:	f800283a 	ret

000044b8 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
    44b8:	defffe04 	addi	sp,sp,-8
    44bc:	df000115 	stw	fp,4(sp)
    44c0:	df000104 	addi	fp,sp,4
    44c4:	e13fff15 	stw	r4,-4(fp)
    44c8:	e0bfff17 	ldw	r2,-4(fp)
    44cc:	10000005 	stb	zero,0(r2)
    44d0:	e0bfff17 	ldw	r2,-4(fp)
    44d4:	10c00043 	ldbu	r3,1(r2)
    44d8:	1806703a 	and	r3,r3,zero
    44dc:	10c00045 	stb	r3,1(r2)
    44e0:	10c00083 	ldbu	r3,2(r2)
    44e4:	1806703a 	and	r3,r3,zero
    44e8:	10c00085 	stb	r3,2(r2)
    44ec:	10c000c3 	ldbu	r3,3(r2)
    44f0:	1806703a 	and	r3,r3,zero
    44f4:	10c000c5 	stb	r3,3(r2)
    44f8:	10c00103 	ldbu	r3,4(r2)
    44fc:	1806703a 	and	r3,r3,zero
    4500:	10c00105 	stb	r3,4(r2)
        };
    4504:	0001883a 	nop
    4508:	e037883a 	mov	sp,fp
    450c:	df000017 	ldw	fp,0(sp)
    4510:	dec00104 	addi	sp,sp,4
    4514:	f800283a 	ret

00004518 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
    4518:	defffe04 	addi	sp,sp,-8
    451c:	df000115 	stw	fp,4(sp)
    4520:	df000104 	addi	fp,sp,4
    4524:	e13fff15 	stw	r4,-4(fp)
    4528:	e0bfff17 	ldw	r2,-4(fp)
    452c:	10000015 	stw	zero,0(r2)
    4530:	e0bfff17 	ldw	r2,-4(fp)
    4534:	10000105 	stb	zero,4(r2)
    4538:	e0bfff17 	ldw	r2,-4(fp)
    453c:	10000145 	stb	zero,5(r2)
        };
    4540:	0001883a 	nop
    4544:	e037883a 	mov	sp,fp
    4548:	df000017 	ldw	fp,0(sp)
    454c:	dec00104 	addi	sp,sp,4
    4550:	f800283a 	ret

00004554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
    4554:	defffd04 	addi	sp,sp,-12
    4558:	df000215 	stw	fp,8(sp)
    455c:	df000204 	addi	fp,sp,8
    4560:	e13ffe15 	stw	r4,-8(fp)
    4564:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4568:	e0bfff17 	ldw	r2,-4(fp)
    456c:	10c00043 	ldbu	r3,1(r2)
    4570:	11000083 	ldbu	r4,2(r2)
    4574:	2008923a 	slli	r4,r4,8
    4578:	20c6b03a 	or	r3,r4,r3
    457c:	110000c3 	ldbu	r4,3(r2)
    4580:	2008943a 	slli	r4,r4,16
    4584:	20c6b03a 	or	r3,r4,r3
    4588:	10800103 	ldbu	r2,4(r2)
    458c:	1004963a 	slli	r2,r2,24
    4590:	10c4b03a 	or	r2,r2,r3
    4594:	1007883a 	mov	r3,r2
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
    45a0:	e0bfff17 	ldw	r2,-4(fp)
    45a4:	10c00003 	ldbu	r3,0(r2)
    45a8:	e0bffe17 	ldw	r2,-8(fp)
    45ac:	10c00145 	stb	r3,5(r2)
    45b0:	e0bffe17 	ldw	r2,-8(fp)
    45b4:	10c00143 	ldbu	r3,5(r2)
    45b8:	e0bffe17 	ldw	r2,-8(fp)
    45bc:	10c00105 	stb	r3,4(r2)
        };
    45c0:	0001883a 	nop
    45c4:	e037883a 	mov	sp,fp
    45c8:	df000017 	ldw	fp,0(sp)
    45cc:	dec00104 	addi	sp,sp,4
    45d0:	f800283a 	ret

000045d4 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
    45d4:	defffe04 	addi	sp,sp,-8
    45d8:	df000115 	stw	fp,4(sp)
    45dc:	df000104 	addi	fp,sp,4
    45e0:	e13fff15 	stw	r4,-4(fp)
    45e4:	e0bfff17 	ldw	r2,-4(fp)
    45e8:	10000015 	stw	zero,0(r2)
    45ec:	e0bfff17 	ldw	r2,-4(fp)
    45f0:	10000105 	stb	zero,4(r2)
    45f4:	e0bfff17 	ldw	r2,-4(fp)
    45f8:	1000018d 	sth	zero,6(r2)
        };
    45fc:	0001883a 	nop
    4600:	e037883a 	mov	sp,fp
    4604:	df000017 	ldw	fp,0(sp)
    4608:	dec00104 	addi	sp,sp,4
    460c:	f800283a 	ret

00004610 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
    4610:	defffd04 	addi	sp,sp,-12
    4614:	df000215 	stw	fp,8(sp)
    4618:	df000204 	addi	fp,sp,8
    461c:	e13ffe15 	stw	r4,-8(fp)
    4620:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
    4624:	e0bfff17 	ldw	r2,-4(fp)
    4628:	10c00043 	ldbu	r3,1(r2)
    462c:	11000083 	ldbu	r4,2(r2)
    4630:	2008923a 	slli	r4,r4,8
    4634:	20c6b03a 	or	r3,r4,r3
    4638:	110000c3 	ldbu	r4,3(r2)
    463c:	2008943a 	slli	r4,r4,16
    4640:	20c6b03a 	or	r3,r4,r3
    4644:	10800103 	ldbu	r2,4(r2)
    4648:	1004963a 	slli	r2,r2,24
    464c:	10c4b03a 	or	r2,r2,r3
    4650:	1007883a 	mov	r3,r2
    4654:	e0bffe17 	ldw	r2,-8(fp)
    4658:	10c00015 	stw	r3,0(r2)
                countDown = 0;
    465c:	e0bffe17 	ldw	r2,-8(fp)
    4660:	1000018d 	sth	zero,6(r2)
        };
    4664:	0001883a 	nop
    4668:	e037883a 	mov	sp,fp
    466c:	df000017 	ldw	fp,0(sp)
    4670:	dec00104 	addi	sp,sp,4
    4674:	f800283a 	ret

00004678 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
    4678:	defffb04 	addi	sp,sp,-20
    467c:	df000415 	stw	fp,16(sp)
    4680:	df000404 	addi	fp,sp,16
    4684:	e13ffc15 	stw	r4,-16(fp)
    4688:	e17ffd15 	stw	r5,-12(fp)
    468c:	e1bffe15 	stw	r6,-8(fp)
    4690:	3805883a 	mov	r2,r7
    4694:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
    4698:	e0bffc17 	ldw	r2,-16(fp)
    469c:	10800103 	ldbu	r2,4(r2)
    46a0:	10803fcc 	andi	r2,r2,255
    46a4:	10000326 	beq	r2,zero,46b4 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
    46a8:	10800060 	cmpeqi	r2,r2,1
    46ac:	10000a1e 	bne	r2,zero,46d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
    46b0:	00002906 	br	4758 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
    46b4:	e0bffc17 	ldw	r2,-16(fp)
    46b8:	e0ffff0b 	ldhu	r3,-4(fp)
    46bc:	10c0018d 	sth	r3,6(r2)
                                nStage++;
    46c0:	e0bffc17 	ldw	r2,-16(fp)
    46c4:	10800103 	ldbu	r2,4(r2)
    46c8:	10800044 	addi	r2,r2,1
    46cc:	1007883a 	mov	r3,r2
    46d0:	e0bffc17 	ldw	r2,-16(fp)
    46d4:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
    46d8:	e0bffc17 	ldw	r2,-16(fp)
    46dc:	1080018b 	ldhu	r2,6(r2)
    46e0:	10bfffcc 	andi	r2,r2,65535
    46e4:	10001626 	beq	r2,zero,4740 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    46e8:	e0bffe17 	ldw	r2,-8(fp)
    46ec:	1080000b 	ldhu	r2,0(r2)
    46f0:	10bfffcc 	andi	r2,r2,65535
    46f4:	10001226 	beq	r2,zero,4740 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
    46f8:	e0bffc17 	ldw	r2,-16(fp)
    46fc:	1080018b 	ldhu	r2,6(r2)
    4700:	10bfffc4 	addi	r2,r2,-1
    4704:	1007883a 	mov	r3,r2
    4708:	e0bffc17 	ldw	r2,-16(fp)
    470c:	10c0018d 	sth	r3,6(r2)
    4710:	e0bffd17 	ldw	r2,-12(fp)
    4714:	10800017 	ldw	r2,0(r2)
    4718:	10c00044 	addi	r3,r2,1
    471c:	e0bffd17 	ldw	r2,-12(fp)
    4720:	10c00015 	stw	r3,0(r2)
    4724:	e0bffe17 	ldw	r2,-8(fp)
    4728:	1080000b 	ldhu	r2,0(r2)
    472c:	10bfffc4 	addi	r2,r2,-1
    4730:	1007883a 	mov	r3,r2
    4734:	e0bffe17 	ldw	r2,-8(fp)
    4738:	10c0000d 	sth	r3,0(r2)
    473c:	003fe606 	br	46d8 <__alt_data_end+0xfc0046d8>

                                if(!countDown)
    4740:	e0bffc17 	ldw	r2,-16(fp)
    4744:	1080018b 	ldhu	r2,6(r2)
    4748:	10bfffcc 	andi	r2,r2,65535
    474c:	1000021e 	bne	r2,zero,4758 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
    4750:	e0bffc17 	ldw	r2,-16(fp)
    4754:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
    4758:	e0bffc17 	ldw	r2,-16(fp)
    475c:	1080018b 	ldhu	r2,6(r2)
    4760:	10bfffcc 	andi	r2,r2,65535
    4764:	1005003a 	cmpeq	r2,r2,zero
        };
    4768:	e037883a 	mov	sp,fp
    476c:	df000017 	ldw	fp,0(sp)
    4770:	dec00104 	addi	sp,sp,4
    4774:	f800283a 	ret

00004778 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    4778:	defffb04 	addi	sp,sp,-20
    477c:	df000415 	stw	fp,16(sp)
    4780:	df000404 	addi	fp,sp,16
    4784:	e13ffc15 	stw	r4,-16(fp)
    4788:	2809883a 	mov	r4,r5
    478c:	3007883a 	mov	r3,r6
    4790:	3805883a 	mov	r2,r7
    4794:	e13ffd05 	stb	r4,-12(fp)
    4798:	e0fffe05 	stb	r3,-8(fp)
    479c:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    47a0:	0005883a 	mov	r2,zero
        }
    47a4:	e037883a 	mov	sp,fp
    47a8:	df000017 	ldw	fp,0(sp)
    47ac:	dec00104 	addi	sp,sp,4
    47b0:	f800283a 	ret

000047b4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
    47b4:	defffb04 	addi	sp,sp,-20
    47b8:	df000415 	stw	fp,16(sp)
    47bc:	df000404 	addi	fp,sp,16
    47c0:	e13ffc15 	stw	r4,-16(fp)
    47c4:	2809883a 	mov	r4,r5
    47c8:	3007883a 	mov	r3,r6
    47cc:	3805883a 	mov	r2,r7
    47d0:	e13ffd05 	stb	r4,-12(fp)
    47d4:	e0fffe05 	stb	r3,-8(fp)
    47d8:	e0bfff05 	stb	r2,-4(fp)
                return 0;
    47dc:	0005883a 	mov	r2,zero
        }
    47e0:	e037883a 	mov	sp,fp
    47e4:	df000017 	ldw	fp,0(sp)
    47e8:	dec00104 	addi	sp,sp,4
    47ec:	f800283a 	ret

000047f0 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
    47f0:	defffe04 	addi	sp,sp,-8
    47f4:	df000115 	stw	fp,4(sp)
    47f8:	df000104 	addi	fp,sp,4
    47fc:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4800:	0005883a 	mov	r2,zero
        }
    4804:	e037883a 	mov	sp,fp
    4808:	df000017 	ldw	fp,0(sp)
    480c:	dec00104 	addi	sp,sp,4
    4810:	f800283a 	ret

00004814 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
    4814:	defffe04 	addi	sp,sp,-8
    4818:	df000115 	stw	fp,4(sp)
    481c:	df000104 	addi	fp,sp,4
    4820:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4824:	0005883a 	mov	r2,zero
        }
    4828:	e037883a 	mov	sp,fp
    482c:	df000017 	ldw	fp,0(sp)
    4830:	dec00104 	addi	sp,sp,4
    4834:	f800283a 	ret

00004838 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
    4838:	defffe04 	addi	sp,sp,-8
    483c:	df000115 	stw	fp,4(sp)
    4840:	df000104 	addi	fp,sp,4
    4844:	e13fff15 	stw	r4,-4(fp)
                return 0;
    4848:	0005883a 	mov	r2,zero
        }
    484c:	e037883a 	mov	sp,fp
    4850:	df000017 	ldw	fp,0(sp)
    4854:	dec00104 	addi	sp,sp,4
    4858:	f800283a 	ret

0000485c <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
    485c:	defffd04 	addi	sp,sp,-12
    4860:	df000215 	stw	fp,8(sp)
    4864:	df000204 	addi	fp,sp,8
    4868:	e13ffe15 	stw	r4,-8(fp)
    486c:	2805883a 	mov	r2,r5
    4870:	e0bfff05 	stb	r2,-4(fp)
                return;
    4874:	0001883a 	nop
        } // Note used for hubs only!
    4878:	e037883a 	mov	sp,fp
    487c:	df000017 	ldw	fp,0(sp)
    4880:	dec00104 	addi	sp,sp,4
    4884:	f800283a 	ret

00004888 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
    4888:	defffc04 	addi	sp,sp,-16
    488c:	df000315 	stw	fp,12(sp)
    4890:	df000304 	addi	fp,sp,12
    4894:	e13ffd15 	stw	r4,-12(fp)
    4898:	2807883a 	mov	r3,r5
    489c:	3005883a 	mov	r2,r6
    48a0:	e0fffe0d 	sth	r3,-8(fp)
    48a4:	e0bfff0d 	sth	r2,-4(fp)
                return false;
    48a8:	0005883a 	mov	r2,zero
        }
    48ac:	e037883a 	mov	sp,fp
    48b0:	df000017 	ldw	fp,0(sp)
    48b4:	dec00104 	addi	sp,sp,4
    48b8:	f800283a 	ret

000048bc <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
    48bc:	defffd04 	addi	sp,sp,-12
    48c0:	df000215 	stw	fp,8(sp)
    48c4:	df000204 	addi	fp,sp,8
    48c8:	e13ffe15 	stw	r4,-8(fp)
    48cc:	2805883a 	mov	r2,r5
    48d0:	e0bfff05 	stb	r2,-4(fp)
                return false;
    48d4:	0005883a 	mov	r2,zero
        }
    48d8:	e037883a 	mov	sp,fp
    48dc:	df000017 	ldw	fp,0(sp)
    48e0:	dec00104 	addi	sp,sp,4
    48e4:	f800283a 	ret

000048e8 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
    48e8:	defffd04 	addi	sp,sp,-12
    48ec:	df000215 	stw	fp,8(sp)
    48f0:	df000204 	addi	fp,sp,8
    48f4:	e13ffe15 	stw	r4,-8(fp)
    48f8:	2805883a 	mov	r2,r5
    48fc:	e0bfff05 	stb	r2,-4(fp)
                return true;
    4900:	00800044 	movi	r2,1
        }
    4904:	e037883a 	mov	sp,fp
    4908:	df000017 	ldw	fp,0(sp)
    490c:	dec00104 	addi	sp,sp,4
    4910:	f800283a 	ret

00004914 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
    4914:	defffc04 	addi	sp,sp,-16
    4918:	df000315 	stw	fp,12(sp)
    491c:	df000304 	addi	fp,sp,12
    4920:	e13ffe15 	stw	r4,-8(fp)
    4924:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4928:	e03ffd05 	stb	zero,-12(fp)
    492c:	e0bffd03 	ldbu	r2,-12(fp)
    4930:	10800428 	cmpgeui	r2,r2,16
    4934:	1000161e 	bne	r2,zero,4990 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
    4938:	e0bffd03 	ldbu	r2,-12(fp)
    493c:	e0fffe17 	ldw	r3,-8(fp)
    4940:	10800784 	addi	r2,r2,30
    4944:	1085883a 	add	r2,r2,r2
    4948:	1085883a 	add	r2,r2,r2
    494c:	1885883a 	add	r2,r3,r2
    4950:	10800017 	ldw	r2,0(r2)
    4954:	10000a1e 	bne	r2,zero,4980 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
    4958:	e0bffd03 	ldbu	r2,-12(fp)
    495c:	e0fffe17 	ldw	r3,-8(fp)
    4960:	10800784 	addi	r2,r2,30
    4964:	1085883a 	add	r2,r2,r2
    4968:	1085883a 	add	r2,r2,r2
    496c:	1885883a 	add	r2,r3,r2
    4970:	e0ffff17 	ldw	r3,-4(fp)
    4974:	10c00015 	stw	r3,0(r2)
                                return 0;
    4978:	0005883a 	mov	r2,zero
    497c:	00000506 	br	4994 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
    4980:	e0bffd03 	ldbu	r2,-12(fp)
    4984:	10800044 	addi	r2,r2,1
    4988:	e0bffd05 	stb	r2,-12(fp)
    498c:	003fe706 	br	492c <__alt_data_end+0xfc00492c>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
    4990:	00bff4c4 	movi	r2,-45
        };
    4994:	e037883a 	mov	sp,fp
    4998:	df000017 	ldw	fp,0(sp)
    499c:	dec00104 	addi	sp,sp,4
    49a0:	f800283a 	ret

000049a4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    49a4:	defffa04 	addi	sp,sp,-24
    49a8:	df000515 	stw	fp,20(sp)
    49ac:	df000504 	addi	fp,sp,20
    49b0:	e13ffb15 	stw	r4,-20(fp)
    49b4:	3009883a 	mov	r4,r6
    49b8:	3807883a 	mov	r3,r7
    49bc:	e0800117 	ldw	r2,4(fp)
    49c0:	e17ffc05 	stb	r5,-16(fp)
    49c4:	e13ffd05 	stb	r4,-12(fp)
    49c8:	e0fffe05 	stb	r3,-8(fp)
    49cc:	e0bfff05 	stb	r2,-4(fp)
        };
    49d0:	0001883a 	nop
    49d4:	e037883a 	mov	sp,fp
    49d8:	df000017 	ldw	fp,0(sp)
    49dc:	dec00104 	addi	sp,sp,4
    49e0:	f800283a 	ret

000049e4 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
    49e4:	defffe04 	addi	sp,sp,-8
    49e8:	df000115 	stw	fp,4(sp)
    49ec:	df000104 	addi	fp,sp,4
    49f0:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
    49f4:	e0bfff17 	ldw	r2,-4(fp)
    49f8:	10800403 	ldbu	r2,16(r2)
        };
    49fc:	e037883a 	mov	sp,fp
    4a00:	df000017 	ldw	fp,0(sp)
    4a04:	dec00104 	addi	sp,sp,4
    4a08:	f800283a 	ret

00004a0c <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
    4a0c:	defffe04 	addi	sp,sp,-8
    4a10:	df000115 	stw	fp,4(sp)
    4a14:	df000104 	addi	fp,sp,4
    4a18:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
    4a1c:	e0bfff17 	ldw	r2,-4(fp)
    4a20:	10800943 	ldbu	r2,37(r2)
        };
    4a24:	e037883a 	mov	sp,fp
    4a28:	df000017 	ldw	fp,0(sp)
    4a2c:	dec00104 	addi	sp,sp,4
    4a30:	f800283a 	ret

00004a34 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
    4a34:	defffc04 	addi	sp,sp,-16
    4a38:	df000315 	stw	fp,12(sp)
    4a3c:	df000304 	addi	fp,sp,12
    4a40:	e13ffd15 	stw	r4,-12(fp)
    4a44:	2807883a 	mov	r3,r5
    4a48:	3005883a 	mov	r2,r6
    4a4c:	e0fffe0d 	sth	r3,-8(fp)
    4a50:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4a54:	e0bffe0b 	ldhu	r2,-8(fp)
    4a58:	108117a0 	cmpeqi	r2,r2,1118
    4a5c:	10000f1e 	bne	r2,zero,4a9c <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4a60:	e0bffe0b 	ldhu	r2,-8(fp)
    4a64:	1081ce20 	cmpeqi	r2,r2,1848
    4a68:	10000c1e 	bne	r2,zero,4a9c <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4a6c:	e0bffe0b 	ldhu	r2,-8(fp)
    4a70:	10839be0 	cmpeqi	r2,r2,3695
    4a74:	1000091e 	bne	r2,zero,4a9c <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4a78:	e0bffe0b 	ldhu	r2,-8(fp)
    4a7c:	1083c360 	cmpeqi	r2,r2,3853
    4a80:	1000061e 	bne	r2,zero,4a9c <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4a84:	e0bffe0b 	ldhu	r2,-8(fp)
    4a88:	10854ca0 	cmpeqi	r2,r2,5426
    4a8c:	1000031e 	bne	r2,zero,4a9c <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
    4a90:	e0bffe0b 	ldhu	r2,-8(fp)
    4a94:	10893198 	cmpnei	r2,r2,9414
    4a98:	10002c1e 	bne	r2,zero,4b4c <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
    4a9c:	e0bfff0b 	ldhu	r2,-4(fp)
    4aa0:	1080b460 	cmpeqi	r2,r2,721
    4aa4:	1000271e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
    4aa8:	e0bfff0b 	ldhu	r2,-4(fp)
    4aac:	1080b760 	cmpeqi	r2,r2,733
    4ab0:	1000241e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ab4:	e0bfff0b 	ldhu	r2,-4(fp)
    4ab8:	1080b8e0 	cmpeqi	r2,r2,739
    4abc:	1000211e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ac0:	e0bfff0b 	ldhu	r2,-4(fp)
    4ac4:	1080baa0 	cmpeqi	r2,r2,746
    4ac8:	10001e1e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4acc:	e0bfff0b 	ldhu	r2,-4(fp)
    4ad0:	10928060 	cmpeqi	r2,r2,18945
    4ad4:	10001b1e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
    4ad8:	e0bfff0b 	ldhu	r2,-4(fp)
    4adc:	10804e60 	cmpeqi	r2,r2,313
    4ae0:	1000181e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4ae4:	e0bfff0b 	ldhu	r2,-4(fp)
    4ae8:	108051a0 	cmpeqi	r2,r2,326
    4aec:	1000151e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4af0:	e0bfff0b 	ldhu	r2,-4(fp)
    4af4:	108019e0 	cmpeqi	r2,r2,103
    4af8:	1000121e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4afc:	e0bfff0b 	ldhu	r2,-4(fp)
    4b00:	108280e0 	cmpeqi	r2,r2,2563
    4b04:	10000f1e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
    4b08:	e0bfff0b 	ldhu	r2,-4(fp)
    4b0c:	109506a0 	cmpeqi	r2,r2,21530
    4b10:	10000c1e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4b14:	e0bfff0b 	ldhu	r2,-4(fp)
    4b18:	10950aa0 	cmpeqi	r2,r2,21546
    4b1c:	1000091e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4b20:	e0bfff0b 	ldhu	r2,-4(fp)
    4b24:	10950ea0 	cmpeqi	r2,r2,21562
    4b28:	1000061e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
    4b2c:	e0bfff0b 	ldhu	r2,-4(fp)
    4b30:	1082c2a0 	cmpeqi	r2,r2,2826
    4b34:	1000031e 	bne	r2,zero,4b44 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
    4b38:	e0bfff0b 	ldhu	r2,-4(fp)
    4b3c:	1082c498 	cmpnei	r2,r2,2834
    4b40:	1000021e 	bne	r2,zero,4b4c <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
    4b44:	00800044 	movi	r2,1
    4b48:	00000106 	br	4b50 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
    4b4c:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
    4b50:	e037883a 	mov	sp,fp
    4b54:	df000017 	ldw	fp,0(sp)
    4b58:	dec00104 	addi	sp,sp,4
    4b5c:	f800283a 	ret

00004b60 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
    4b60:	defffe04 	addi	sp,sp,-8
    4b64:	df000115 	stw	fp,4(sp)
    4b68:	df000104 	addi	fp,sp,4
    4b6c:	e13fff15 	stw	r4,-4(fp)
    4b70:	008000b4 	movhi	r2,2
    4b74:	108f2104 	addi	r2,r2,15492
    4b78:	e0ffff17 	ldw	r3,-4(fp)
    4b7c:	18800015 	stw	r2,0(r3)
    4b80:	0001883a 	nop
    4b84:	e037883a 	mov	sp,fp
    4b88:	df000017 	ldw	fp,0(sp)
    4b8c:	dec00104 	addi	sp,sp,4
    4b90:	f800283a 	ret

00004b94 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
    4b94:	defffe04 	addi	sp,sp,-8
    4b98:	df000115 	stw	fp,4(sp)
    4b9c:	df000104 	addi	fp,sp,4
    4ba0:	e13fff15 	stw	r4,-4(fp)
    4ba4:	008000b4 	movhi	r2,2
    4ba8:	108f1b04 	addi	r2,r2,15468
    4bac:	e0ffff17 	ldw	r3,-4(fp)
    4bb0:	18800015 	stw	r2,0(r3)
    4bb4:	0001883a 	nop
    4bb8:	e037883a 	mov	sp,fp
    4bbc:	df000017 	ldw	fp,0(sp)
    4bc0:	dec00104 	addi	sp,sp,4
    4bc4:	f800283a 	ret

00004bc8 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
    4bc8:	defffe04 	addi	sp,sp,-8
    4bcc:	df000115 	stw	fp,4(sp)
    4bd0:	df000104 	addi	fp,sp,4
    4bd4:	e13fff15 	stw	r4,-4(fp)
    4bd8:	008000b4 	movhi	r2,2
    4bdc:	108f1e04 	addi	r2,r2,15480
    4be0:	e0ffff17 	ldw	r3,-4(fp)
    4be4:	18800015 	stw	r2,0(r3)
    4be8:	0001883a 	nop
    4bec:	e037883a 	mov	sp,fp
    4bf0:	df000017 	ldw	fp,0(sp)
    4bf4:	dec00104 	addi	sp,sp,4
    4bf8:	f800283a 	ret

00004bfc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
    4bfc:	defffc04 	addi	sp,sp,-16
    4c00:	dfc00315 	stw	ra,12(sp)
    4c04:	df000215 	stw	fp,8(sp)
    4c08:	df000204 	addi	fp,sp,8
    4c0c:	e13ffe15 	stw	r4,-8(fp)
    4c10:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
    4c14:	e0bffe17 	ldw	r2,-8(fp)
    4c18:	1009883a 	mov	r4,r2
    4c1c:	0004bc80 	call	4bc8 <_ZN13USBReadParserC1Ev>
    4c20:	008000b4 	movhi	r2,2
    4c24:	108f1804 	addi	r2,r2,15456
    4c28:	e0fffe17 	ldw	r3,-8(fp)
    4c2c:	18800015 	stw	r2,0(r3)
    4c30:	e0bffe17 	ldw	r2,-8(fp)
    4c34:	e0ffff17 	ldw	r3,-4(fp)
    4c38:	10c00115 	stw	r3,4(r2)
    4c3c:	e0bffe17 	ldw	r2,-8(fp)
    4c40:	10800204 	addi	r2,r2,8
    4c44:	1009883a 	mov	r4,r2
    4c48:	00044b80 	call	44b8 <_ZN16MultiValueBufferC1Ev>
    4c4c:	e0bffe17 	ldw	r2,-8(fp)
    4c50:	10800404 	addi	r2,r2,16
    4c54:	1009883a 	mov	r4,r2
    4c58:	00045180 	call	4518 <_ZN20MultiByteValueParserC1Ev>
    4c5c:	e0bffe17 	ldw	r2,-8(fp)
    4c60:	10800604 	addi	r2,r2,24
    4c64:	1009883a 	mov	r4,r2
    4c68:	00045d40 	call	45d4 <_ZN11ByteSkipperC1Ev>
    4c6c:	e0bffe17 	ldw	r2,-8(fp)
    4c70:	10000c05 	stb	zero,48(r2)
    4c74:	e0bffe17 	ldw	r2,-8(fp)
    4c78:	10000c45 	stb	zero,49(r2)
    4c7c:	e0bffe17 	ldw	r2,-8(fp)
    4c80:	10000c85 	stb	zero,50(r2)
    4c84:	e0bffe17 	ldw	r2,-8(fp)
    4c88:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
    4c8c:	e0bffe17 	ldw	r2,-8(fp)
    4c90:	10c00804 	addi	r3,r2,32
    4c94:	e0bffe17 	ldw	r2,-8(fp)
    4c98:	19803fcc 	andi	r6,r3,255
    4c9c:	11000243 	ldbu	r4,9(r2)
    4ca0:	2008703a 	and	r4,r4,zero
    4ca4:	200b883a 	mov	r5,r4
    4ca8:	3009883a 	mov	r4,r6
    4cac:	2908b03a 	or	r4,r5,r4
    4cb0:	11000245 	stb	r4,9(r2)
    4cb4:	1808d23a 	srli	r4,r3,8
    4cb8:	21803fcc 	andi	r6,r4,255
    4cbc:	11000283 	ldbu	r4,10(r2)
    4cc0:	2008703a 	and	r4,r4,zero
    4cc4:	200b883a 	mov	r5,r4
    4cc8:	3009883a 	mov	r4,r6
    4ccc:	2908b03a 	or	r4,r5,r4
    4cd0:	11000285 	stb	r4,10(r2)
    4cd4:	1808d43a 	srli	r4,r3,16
    4cd8:	21803fcc 	andi	r6,r4,255
    4cdc:	110002c3 	ldbu	r4,11(r2)
    4ce0:	2008703a 	and	r4,r4,zero
    4ce4:	200b883a 	mov	r5,r4
    4ce8:	3009883a 	mov	r4,r6
    4cec:	2908b03a 	or	r4,r5,r4
    4cf0:	110002c5 	stb	r4,11(r2)
    4cf4:	180ad63a 	srli	r5,r3,24
    4cf8:	10c00303 	ldbu	r3,12(r2)
    4cfc:	1806703a 	and	r3,r3,zero
    4d00:	1809883a 	mov	r4,r3
    4d04:	2807883a 	mov	r3,r5
    4d08:	20c6b03a 	or	r3,r4,r3
    4d0c:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    4d10:	e0bffe17 	ldw	r2,-8(fp)
    4d14:	10c00404 	addi	r3,r2,16
    4d18:	e0bffe17 	ldw	r2,-8(fp)
    4d1c:	10800204 	addi	r2,r2,8
    4d20:	100b883a 	mov	r5,r2
    4d24:	1809883a 	mov	r4,r3
    4d28:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    4d2c:	e0bffe17 	ldw	r2,-8(fp)
    4d30:	10c00604 	addi	r3,r2,24
    4d34:	e0bffe17 	ldw	r2,-8(fp)
    4d38:	10800204 	addi	r2,r2,8
    4d3c:	100b883a 	mov	r5,r2
    4d40:	1809883a 	mov	r4,r3
    4d44:	00046100 	call	4610 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
    4d48:	0001883a 	nop
    4d4c:	e037883a 	mov	sp,fp
    4d50:	dfc00117 	ldw	ra,4(sp)
    4d54:	df000017 	ldw	fp,0(sp)
    4d58:	dec00204 	addi	sp,sp,8
    4d5c:	f800283a 	ret

00004d60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    4d60:	defff804 	addi	sp,sp,-32
    4d64:	dfc00715 	stw	ra,28(sp)
    4d68:	df000615 	stw	fp,24(sp)
    4d6c:	df000604 	addi	fp,sp,24
    4d70:	e13ffc15 	stw	r4,-16(fp)
    4d74:	2805883a 	mov	r2,r5
    4d78:	e1bffe15 	stw	r6,-8(fp)
    4d7c:	e1ffff15 	stw	r7,-4(fp)
    4d80:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    4d84:	e0bffd0b 	ldhu	r2,-12(fp)
    4d88:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    4d8c:	e0bffe17 	ldw	r2,-8(fp)
    4d90:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    4d94:	e0bffa0b 	ldhu	r2,-24(fp)
    4d98:	10bfffcc 	andi	r2,r2,65535
    4d9c:	10000a26 	beq	r2,zero,4dc8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    4da0:	e0bffb04 	addi	r2,fp,-20
    4da4:	e1bffa04 	addi	r6,fp,-24
    4da8:	100b883a 	mov	r5,r2
    4dac:	e13ffc17 	ldw	r4,-16(fp)
    4db0:	0004ddc0 	call	4ddc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
    4db4:	1080005c 	xori	r2,r2,1
    4db8:	10803fcc 	andi	r2,r2,255
    4dbc:	1000011e 	bne	r2,zero,4dc4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    4dc0:	003ff406 	br	4d94 <__alt_data_end+0xfc004d94>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    4dc4:	0001883a 	nop
}
    4dc8:	e037883a 	mov	sp,fp
    4dcc:	dfc00117 	ldw	ra,4(sp)
    4dd0:	df000017 	ldw	fp,0(sp)
    4dd4:	dec00204 	addi	sp,sp,8
    4dd8:	f800283a 	ret

00004ddc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    4ddc:	defff604 	addi	sp,sp,-40
    4de0:	dfc00915 	stw	ra,36(sp)
    4de4:	df000815 	stw	fp,32(sp)
    4de8:	df000804 	addi	fp,sp,32
    4dec:	e13ffc15 	stw	r4,-16(fp)
    4df0:	e17ffd15 	stw	r5,-12(fp)
    4df4:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    4df8:	e0bffc17 	ldw	r2,-16(fp)
    4dfc:	10800804 	addi	r2,r2,32
    4e00:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    4e04:	e0bffc17 	ldw	r2,-16(fp)
    4e08:	10800804 	addi	r2,r2,32
    4e0c:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    4e10:	e0bffc17 	ldw	r2,-16(fp)
    4e14:	10800c03 	ldbu	r2,48(r2)
    4e18:	10803fcc 	andi	r2,r2,255
    4e1c:	10c00168 	cmpgeui	r3,r2,5
    4e20:	1801141e 	bne	r3,zero,5274 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
    4e24:	100690ba 	slli	r3,r2,2
    4e28:	00800034 	movhi	r2,0
    4e2c:	10938f04 	addi	r2,r2,20028
    4e30:	1885883a 	add	r2,r3,r2
    4e34:	10800017 	ldw	r2,0(r2)
    4e38:	1000683a 	jmp	r2
    4e3c:	00004e50 	cmplti	zero,zero,313
    4e40:	00004e84 	movi	zero,314
    4e44:	00004f0c 	andi	zero,zero,316
    4e48:	00004fa0 	cmpeqi	zero,zero,318
    4e4c:	0000500c 	andi	zero,zero,320
                case 0:
                        theBuffer.valueSize = 2;
    4e50:	e0bffc17 	ldw	r2,-16(fp)
    4e54:	00c00084 	movi	r3,2
    4e58:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4e5c:	e0bffc17 	ldw	r2,-16(fp)
    4e60:	10c00404 	addi	r3,r2,16
    4e64:	e0bffc17 	ldw	r2,-16(fp)
    4e68:	10800204 	addi	r2,r2,8
    4e6c:	100b883a 	mov	r5,r2
    4e70:	1809883a 	mov	r4,r3
    4e74:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    4e78:	e0bffc17 	ldw	r2,-16(fp)
    4e7c:	00c00044 	movi	r3,1
    4e80:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    4e84:	e0bffc17 	ldw	r2,-16(fp)
    4e88:	10800404 	addi	r2,r2,16
    4e8c:	e1bffe17 	ldw	r6,-8(fp)
    4e90:	e17ffd17 	ldw	r5,-12(fp)
    4e94:	1009883a 	mov	r4,r2
    4e98:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    4e9c:	1080005c 	xori	r2,r2,1
    4ea0:	10803fcc 	andi	r2,r2,255
    4ea4:	10000226 	beq	r2,zero,4eb0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
    4ea8:	0005883a 	mov	r2,zero
    4eac:	0000f206 	br	5278 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    4eb0:	e0bffc17 	ldw	r2,-16(fp)
    4eb4:	10c00217 	ldw	r3,8(r2)
    4eb8:	1806d23a 	srli	r3,r3,8
    4ebc:	10800317 	ldw	r2,12(r2)
    4ec0:	10803fcc 	andi	r2,r2,255
    4ec4:	1004963a 	slli	r2,r2,24
    4ec8:	10c4b03a 	or	r2,r2,r3
    4ecc:	10c00003 	ldbu	r3,0(r2)
    4ed0:	e0bffc17 	ldw	r2,-16(fp)
    4ed4:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    4ed8:	e0bffc17 	ldw	r2,-16(fp)
    4edc:	10c00217 	ldw	r3,8(r2)
    4ee0:	1806d23a 	srli	r3,r3,8
    4ee4:	10800317 	ldw	r2,12(r2)
    4ee8:	10803fcc 	andi	r2,r2,255
    4eec:	1004963a 	slli	r2,r2,24
    4ef0:	10c4b03a 	or	r2,r2,r3
    4ef4:	10c00043 	ldbu	r3,1(r2)
    4ef8:	e0bffc17 	ldw	r2,-16(fp)
    4efc:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    4f00:	e0bffc17 	ldw	r2,-16(fp)
    4f04:	00c00084 	movi	r3,2
    4f08:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    4f0c:	e0bffc17 	ldw	r2,-16(fp)
    4f10:	10800804 	addi	r2,r2,32
    4f14:	10c00084 	addi	r3,r2,2
    4f18:	e0bffc17 	ldw	r2,-16(fp)
    4f1c:	19803fcc 	andi	r6,r3,255
    4f20:	11000243 	ldbu	r4,9(r2)
    4f24:	2008703a 	and	r4,r4,zero
    4f28:	200b883a 	mov	r5,r4
    4f2c:	3009883a 	mov	r4,r6
    4f30:	2908b03a 	or	r4,r5,r4
    4f34:	11000245 	stb	r4,9(r2)
    4f38:	1808d23a 	srli	r4,r3,8
    4f3c:	21803fcc 	andi	r6,r4,255
    4f40:	11000283 	ldbu	r4,10(r2)
    4f44:	2008703a 	and	r4,r4,zero
    4f48:	200b883a 	mov	r5,r4
    4f4c:	3009883a 	mov	r4,r6
    4f50:	2908b03a 	or	r4,r5,r4
    4f54:	11000285 	stb	r4,10(r2)
    4f58:	1808d43a 	srli	r4,r3,16
    4f5c:	21803fcc 	andi	r6,r4,255
    4f60:	110002c3 	ldbu	r4,11(r2)
    4f64:	2008703a 	and	r4,r4,zero
    4f68:	200b883a 	mov	r5,r4
    4f6c:	3009883a 	mov	r4,r6
    4f70:	2908b03a 	or	r4,r5,r4
    4f74:	110002c5 	stb	r4,11(r2)
    4f78:	180ad63a 	srli	r5,r3,24
    4f7c:	10c00303 	ldbu	r3,12(r2)
    4f80:	1806703a 	and	r3,r3,zero
    4f84:	1809883a 	mov	r4,r3
    4f88:	2807883a 	mov	r3,r5
    4f8c:	20c6b03a 	or	r3,r4,r3
    4f90:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    4f94:	e0bffc17 	ldw	r2,-16(fp)
    4f98:	00c000c4 	movi	r3,3
    4f9c:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
    4fa0:	e0bffc17 	ldw	r2,-16(fp)
    4fa4:	10800c83 	ldbu	r2,50(r2)
    4fa8:	10803fcc 	andi	r2,r2,255
    4fac:	10c00120 	cmpeqi	r3,r2,4
    4fb0:	1800021e 	bne	r3,zero,4fbc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
    4fb4:	10800148 	cmpgei	r2,r2,5
    4fb8:	00000306 	br	4fc8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    4fbc:	e0bffc17 	ldw	r2,-16(fp)
    4fc0:	10000cc5 	stb	zero,51(r2)
                                        break;
    4fc4:	00000106 	br	4fcc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    4fc8:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    4fcc:	e0bffc17 	ldw	r2,-16(fp)
    4fd0:	10800c43 	ldbu	r2,49(r2)
    4fd4:	10bfff84 	addi	r2,r2,-2
    4fd8:	1007883a 	mov	r3,r2
    4fdc:	e0bffc17 	ldw	r2,-16(fp)
    4fe0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    4fe4:	e0bffc17 	ldw	r2,-16(fp)
    4fe8:	10c00404 	addi	r3,r2,16
    4fec:	e0bffc17 	ldw	r2,-16(fp)
    4ff0:	10800204 	addi	r2,r2,8
    4ff4:	100b883a 	mov	r5,r2
    4ff8:	1809883a 	mov	r4,r3
    4ffc:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    5000:	e0bffc17 	ldw	r2,-16(fp)
    5004:	00c00104 	movi	r3,4
    5008:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
    500c:	e0bffc17 	ldw	r2,-16(fp)
    5010:	10800c83 	ldbu	r2,50(r2)
    5014:	10803fcc 	andi	r2,r2,255
    5018:	10c00120 	cmpeqi	r3,r2,4
    501c:	1800141e 	bne	r3,zero,5070 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
    5020:	10c00160 	cmpeqi	r3,r2,5
    5024:	1800311e 	bne	r3,zero,50ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
    5028:	108000a0 	cmpeqi	r2,r2,2
    502c:	10005a26 	beq	r2,zero,5198 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    5030:	e0bffc17 	ldw	r2,-16(fp)
    5034:	10800404 	addi	r2,r2,16
    5038:	e1bffe17 	ldw	r6,-8(fp)
    503c:	e17ffd17 	ldw	r5,-12(fp)
    5040:	1009883a 	mov	r4,r2
    5044:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5048:	1080005c 	xori	r2,r2,1
    504c:	10803fcc 	andi	r2,r2,255
    5050:	10000226 	beq	r2,zero,505c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
    5054:	0005883a 	mov	r2,zero
    5058:	00008706 	br	5278 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
    505c:	e0bffa17 	ldw	r2,-24(fp)
    5060:	10c00143 	ldbu	r3,5(r2)
    5064:	e0bffc17 	ldw	r2,-16(fp)
    5068:	10c00d05 	stb	r3,52(r2)
                                        break;
    506c:	00005e06 	br	51e8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    5070:	e0bffc17 	ldw	r2,-16(fp)
    5074:	10800404 	addi	r2,r2,16
    5078:	e1bffe17 	ldw	r6,-8(fp)
    507c:	e17ffd17 	ldw	r5,-12(fp)
    5080:	1009883a 	mov	r4,r2
    5084:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5088:	1080005c 	xori	r2,r2,1
    508c:	10803fcc 	andi	r2,r2,255
    5090:	10000226 	beq	r2,zero,509c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    5094:	0005883a 	mov	r2,zero
    5098:	00007706 	br	5278 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
    509c:	e0bffc17 	ldw	r2,-16(fp)
    50a0:	10800e03 	ldbu	r2,56(r2)
    50a4:	10803fcc 	andi	r2,r2,255
    50a8:	10004c1e 	bne	r2,zero,51dc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
    50ac:	e0bffc17 	ldw	r2,-16(fp)
    50b0:	00c00044 	movi	r3,1
    50b4:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
    50b8:	e0bffb17 	ldw	r2,-20(fp)
    50bc:	10c00083 	ldbu	r3,2(r2)
    50c0:	e0bffc17 	ldw	r2,-16(fp)
    50c4:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
    50c8:	e0bffb17 	ldw	r2,-20(fp)
    50cc:	10c000c3 	ldbu	r3,3(r2)
    50d0:	e0bffc17 	ldw	r2,-16(fp)
    50d4:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
    50d8:	e0bffb17 	ldw	r2,-20(fp)
    50dc:	10c001c3 	ldbu	r3,7(r2)
    50e0:	e0bffc17 	ldw	r2,-16(fp)
    50e4:	10c00d45 	stb	r3,53(r2)
                                        break;
    50e8:	00003f06 	br	51e8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    50ec:	e0bffc17 	ldw	r2,-16(fp)
    50f0:	10800404 	addi	r2,r2,16
    50f4:	e1bffe17 	ldw	r6,-8(fp)
    50f8:	e17ffd17 	ldw	r5,-12(fp)
    50fc:	1009883a 	mov	r4,r2
    5100:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    5104:	1080005c 	xori	r2,r2,1
    5108:	10803fcc 	andi	r2,r2,255
    510c:	10000226 	beq	r2,zero,5118 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
    5110:	0005883a 	mov	r2,zero
    5114:	00005806 	br	5278 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
    5118:	e0bffc17 	ldw	r2,-16(fp)
    511c:	10800cc3 	ldbu	r2,51(r2)
    5120:	10803fcc 	andi	r2,r2,255
    5124:	10002f26 	beq	r2,zero,51e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
    5128:	e0bffc17 	ldw	r2,-16(fp)
    512c:	10800117 	ldw	r2,4(r2)
    5130:	10002c26 	beq	r2,zero,51e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
    5134:	e0bffc17 	ldw	r2,-16(fp)
    5138:	10800117 	ldw	r2,4(r2)
    513c:	10800017 	ldw	r2,0(r2)
    5140:	10800017 	ldw	r2,0(r2)
    5144:	e0fffc17 	ldw	r3,-16(fp)
    5148:	1a000117 	ldw	r8,4(r3)
    514c:	e0fffc17 	ldw	r3,-16(fp)
    5150:	18c00d03 	ldbu	r3,52(r3)
    5154:	19403fcc 	andi	r5,r3,255
    5158:	e0fffc17 	ldw	r3,-16(fp)
    515c:	18c00d83 	ldbu	r3,54(r3)
    5160:	19803fcc 	andi	r6,r3,255
    5164:	e0fffc17 	ldw	r3,-16(fp)
    5168:	18c00dc3 	ldbu	r3,55(r3)
    516c:	19c03fcc 	andi	r7,r3,255
    5170:	e0fffc17 	ldw	r3,-16(fp)
    5174:	18c00d43 	ldbu	r3,53(r3)
    5178:	18c03fcc 	andi	r3,r3,255
    517c:	e13ffc17 	ldw	r4,-16(fp)
    5180:	21000804 	addi	r4,r4,32
    5184:	d9000115 	stw	r4,4(sp)
    5188:	d8c00015 	stw	r3,0(sp)
    518c:	4009883a 	mov	r4,r8
    5190:	103ee83a 	callr	r2
                                        break;
    5194:	00001306 	br	51e4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    5198:	e0bffc17 	ldw	r2,-16(fp)
    519c:	10c00604 	addi	r3,r2,24
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	10800c43 	ldbu	r2,49(r2)
    51a8:	10803fcc 	andi	r2,r2,255
    51ac:	10bfff84 	addi	r2,r2,-2
    51b0:	10bfffcc 	andi	r2,r2,65535
    51b4:	100f883a 	mov	r7,r2
    51b8:	e1bffe17 	ldw	r6,-8(fp)
    51bc:	e17ffd17 	ldw	r5,-12(fp)
    51c0:	1809883a 	mov	r4,r3
    51c4:	00046780 	call	4678 <_ZN11ByteSkipper4SkipEPPhPtt>
    51c8:	1080005c 	xori	r2,r2,1
    51cc:	10803fcc 	andi	r2,r2,255
    51d0:	10000526 	beq	r2,zero,51e8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
    51d4:	0005883a 	mov	r2,zero
    51d8:	00002706 	br	5278 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
    51dc:	0001883a 	nop
    51e0:	00000106 	br	51e8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
    51e4:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    51e8:	e0bffc17 	ldw	r2,-16(fp)
    51ec:	10c00804 	addi	r3,r2,32
    51f0:	e0bffc17 	ldw	r2,-16(fp)
    51f4:	19803fcc 	andi	r6,r3,255
    51f8:	11000243 	ldbu	r4,9(r2)
    51fc:	2008703a 	and	r4,r4,zero
    5200:	200b883a 	mov	r5,r4
    5204:	3009883a 	mov	r4,r6
    5208:	2908b03a 	or	r4,r5,r4
    520c:	11000245 	stb	r4,9(r2)
    5210:	1808d23a 	srli	r4,r3,8
    5214:	21803fcc 	andi	r6,r4,255
    5218:	11000283 	ldbu	r4,10(r2)
    521c:	2008703a 	and	r4,r4,zero
    5220:	200b883a 	mov	r5,r4
    5224:	3009883a 	mov	r4,r6
    5228:	2908b03a 	or	r4,r5,r4
    522c:	11000285 	stb	r4,10(r2)
    5230:	1808d43a 	srli	r4,r3,16
    5234:	21803fcc 	andi	r6,r4,255
    5238:	110002c3 	ldbu	r4,11(r2)
    523c:	2008703a 	and	r4,r4,zero
    5240:	200b883a 	mov	r5,r4
    5244:	3009883a 	mov	r4,r6
    5248:	2908b03a 	or	r4,r5,r4
    524c:	110002c5 	stb	r4,11(r2)
    5250:	180ad63a 	srli	r5,r3,24
    5254:	10c00303 	ldbu	r3,12(r2)
    5258:	1806703a 	and	r3,r3,zero
    525c:	1809883a 	mov	r4,r3
    5260:	2807883a 	mov	r3,r5
    5264:	20c6b03a 	or	r3,r4,r3
    5268:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    526c:	e0bffc17 	ldw	r2,-16(fp)
    5270:	10000c05 	stb	zero,48(r2)
        }
        return true;
    5274:	00800044 	movi	r2,1
}
    5278:	e037883a 	mov	sp,fp
    527c:	dfc00117 	ldw	ra,4(sp)
    5280:	df000017 	ldw	fp,0(sp)
    5284:	dec00204 	addi	sp,sp,8
    5288:	f800283a 	ret

0000528c <_Z8set_notehh>:
#include "system.h"
#include <stdio.h>
#include "audio_synth.h"

void set_note(alt_u8 note, alt_u8 vel) {
    528c:	defffc04 	addi	sp,sp,-16
    5290:	df000315 	stw	fp,12(sp)
    5294:	df000304 	addi	fp,sp,12
    5298:	2007883a 	mov	r3,r4
    529c:	2805883a 	mov	r2,r5
    52a0:	e0fffe05 	stb	r3,-8(fp)
    52a4:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 set_val;

	if(vel == 0) {
    52a8:	e0bfff03 	ldbu	r2,-4(fp)
    52ac:	1000081e 	bne	r2,zero,52d0 <_Z8set_notehh+0x44>
		set_val = keys->NOTE[note];
    52b0:	d0e00d17 	ldw	r3,-32716(gp)
    52b4:	e0bffe03 	ldbu	r2,-8(fp)
    52b8:	1085883a 	add	r2,r2,r2
    52bc:	1085883a 	add	r2,r2,r2
    52c0:	1885883a 	add	r2,r3,r2
    52c4:	10800017 	ldw	r2,0(r2)
    52c8:	e0bffd15 	stw	r2,-12(fp)
    52cc:	00000306 	br	52dc <_Z8set_notehh+0x50>
	}
	else {
		set_val = 0x80 + vel;
    52d0:	e0bfff03 	ldbu	r2,-4(fp)
    52d4:	10802004 	addi	r2,r2,128
    52d8:	e0bffd15 	stw	r2,-12(fp)
	}

	keys->NOTE[note] = set_val;
    52dc:	d0e00d17 	ldw	r3,-32716(gp)
    52e0:	e0bffe03 	ldbu	r2,-8(fp)
    52e4:	1085883a 	add	r2,r2,r2
    52e8:	1085883a 	add	r2,r2,r2
    52ec:	1885883a 	add	r2,r3,r2
    52f0:	e0fffd17 	ldw	r3,-12(fp)
    52f4:	10c00015 	stw	r3,0(r2)
}
    52f8:	0001883a 	nop
    52fc:	e037883a 	mov	sp,fp
    5300:	df000017 	ldw	fp,0(sp)
    5304:	dec00104 	addi	sp,sp,4
    5308:	f800283a 	ret

0000530c <_Z8set_adsrhm>:

void set_adsr(alt_u8 par, alt_u32 val) {
    530c:	defffd04 	addi	sp,sp,-12
    5310:	df000215 	stw	fp,8(sp)
    5314:	df000204 	addi	fp,sp,8
    5318:	2005883a 	mov	r2,r4
    531c:	e17fff15 	stw	r5,-4(fp)
    5320:	e0bffe05 	stb	r2,-8(fp)
	adsr->VAL[par] = val;
    5324:	d0e00e17 	ldw	r3,-32712(gp)
    5328:	e0bffe03 	ldbu	r2,-8(fp)
    532c:	1085883a 	add	r2,r2,r2
    5330:	1085883a 	add	r2,r2,r2
    5334:	1885883a 	add	r2,r3,r2
    5338:	e0ffff17 	ldw	r3,-4(fp)
    533c:	10c00015 	stw	r3,0(r2)
}
    5340:	0001883a 	nop
    5344:	e037883a 	mov	sp,fp
    5348:	df000017 	ldw	fp,0(sp)
    534c:	dec00104 	addi	sp,sp,4
    5350:	f800283a 	ret

00005354 <_Z9calc_adsrtttf>:

void calc_adsr(alt_u16 att_m_seconds, alt_u16 dec_m_seconds, alt_u16 rel_m_seconds, float peak_amp) {
    5354:	defff204 	addi	sp,sp,-56
    5358:	dfc00d15 	stw	ra,52(sp)
    535c:	df000c15 	stw	fp,48(sp)
    5360:	dc000b15 	stw	r16,44(sp)
    5364:	df000c04 	addi	fp,sp,48
    5368:	2807883a 	mov	r3,r5
    536c:	3005883a 	mov	r2,r6
    5370:	e1fffe15 	stw	r7,-8(fp)
    5374:	e13ffb0d 	sth	r4,-20(fp)
    5378:	e0fffc0d 	sth	r3,-16(fp)
    537c:	e0bffd0d 	sth	r2,-12(fp)

	alt_u32 ATT_LEN, ATT_STEP, PEAK_ATT, DEC_LEN, DEC_STEP, REL_LEN, REL_STEP;

	if (att_m_seconds > 5000) {
    5380:	e0bffb0b 	ldhu	r2,-20(fp)
    5384:	1084e270 	cmpltui	r2,r2,5001
    5388:	1000041e 	bne	r2,zero,539c <_Z9calc_adsrtttf+0x48>
		printf("ERRROR: Requested attack length is too long.\n");
    538c:	010000b4 	movhi	r4,2
    5390:	210f5004 	addi	r4,r4,15680
    5394:	000ef180 	call	ef18 <puts>
		return;
    5398:	00008e06 	br	55d4 <_Z9calc_adsrtttf+0x280>
	}
	if (dec_m_seconds > 5000) {
    539c:	e0bffc0b 	ldhu	r2,-16(fp)
    53a0:	1084e270 	cmpltui	r2,r2,5001
    53a4:	1000041e 	bne	r2,zero,53b8 <_Z9calc_adsrtttf+0x64>
		printf("ERRROR: Requested decay length is too long.\n");
    53a8:	010000b4 	movhi	r4,2
    53ac:	210f5c04 	addi	r4,r4,15728
    53b0:	000ef180 	call	ef18 <puts>
		return;
    53b4:	00008706 	br	55d4 <_Z9calc_adsrtttf+0x280>
	}
	if (rel_m_seconds > 10000) {
    53b8:	e0bffd0b 	ldhu	r2,-12(fp)
    53bc:	1089c470 	cmpltui	r2,r2,10001
    53c0:	1000041e 	bne	r2,zero,53d4 <_Z9calc_adsrtttf+0x80>
		printf("ERRROR: Requested release length is too long.\n");
    53c4:	010000b4 	movhi	r4,2
    53c8:	210f6704 	addi	r4,r4,15772
    53cc:	000ef180 	call	ef18 <puts>
		return;
    53d0:	00008006 	br	55d4 <_Z9calc_adsrtttf+0x280>
	}
	if (peak_amp > (float) 1.9) {
    53d4:	014ffcf4 	movhi	r5,16371
    53d8:	294cccc4 	addi	r5,r5,13107
    53dc:	e13ffe17 	ldw	r4,-8(fp)
    53e0:	000d2100 	call	d210 <__gesf2>
    53e4:	0080040e 	bge	zero,r2,53f8 <_Z9calc_adsrtttf+0xa4>
		printf("ERROR: Requested peak attack amplitude is too large.\n");
    53e8:	010000b4 	movhi	r4,2
    53ec:	210f7304 	addi	r4,r4,15820
    53f0:	000ef180 	call	ef18 <puts>
		return;
    53f4:	00007706 	br	55d4 <_Z9calc_adsrtttf+0x280>
	}

	ATT_LEN = (att_m_seconds * F_S) / 1000;
    53f8:	e0bffb0b 	ldhu	r2,-20(fp)
    53fc:	016b1114 	movui	r5,44100
    5400:	1009883a 	mov	r4,r2
    5404:	000cda80 	call	cda8 <__mulsi3>
    5408:	0140fa04 	movi	r5,1000
    540c:	1009883a 	mov	r4,r2
    5410:	000cbf40 	call	cbf4 <__divsi3>
    5414:	e0bff415 	stw	r2,-48(fp)
	ATT_STEP = (peak_amp * (alt_u32) 0x80000) / ATT_LEN;
    5418:	01524034 	movhi	r5,18688
    541c:	e13ffe17 	ldw	r4,-8(fp)
    5420:	000d2cc0 	call	d2cc <__mulsf3>
    5424:	1007883a 	mov	r3,r2
    5428:	1821883a 	mov	r16,r3
    542c:	e13ff417 	ldw	r4,-48(fp)
    5430:	000dc500 	call	dc50 <__floatunsisf>
    5434:	1007883a 	mov	r3,r2
    5438:	180b883a 	mov	r5,r3
    543c:	8009883a 	mov	r4,r16
    5440:	000cdd00 	call	cdd0 <__divsf3>
    5444:	1007883a 	mov	r3,r2
    5448:	1805883a 	mov	r2,r3
    544c:	1009883a 	mov	r4,r2
    5450:	000cb940 	call	cb94 <__fixunssfsi>
    5454:	e0bff515 	stw	r2,-44(fp)
	PEAK_ATT = ATT_LEN * ATT_STEP;
    5458:	e17ff517 	ldw	r5,-44(fp)
    545c:	e13ff417 	ldw	r4,-48(fp)
    5460:	000cda80 	call	cda8 <__mulsi3>
    5464:	e0bff615 	stw	r2,-40(fp)
	DEC_LEN = (dec_m_seconds * F_S) / 1000;
    5468:	e0bffc0b 	ldhu	r2,-16(fp)
    546c:	016b1114 	movui	r5,44100
    5470:	1009883a 	mov	r4,r2
    5474:	000cda80 	call	cda8 <__mulsi3>
    5478:	0140fa04 	movi	r5,1000
    547c:	1009883a 	mov	r4,r2
    5480:	000cbf40 	call	cbf4 <__divsi3>
    5484:	e0bff715 	stw	r2,-36(fp)
	DEC_STEP = ((peak_amp - 1) * (alt_u32) 0x80000) / DEC_LEN;
    5488:	014fe034 	movhi	r5,16256
    548c:	e13ffe17 	ldw	r4,-8(fp)
    5490:	000d6fc0 	call	d6fc <__subsf3>
    5494:	1007883a 	mov	r3,r2
    5498:	1805883a 	mov	r2,r3
    549c:	01524034 	movhi	r5,18688
    54a0:	1009883a 	mov	r4,r2
    54a4:	000d2cc0 	call	d2cc <__mulsf3>
    54a8:	1007883a 	mov	r3,r2
    54ac:	1821883a 	mov	r16,r3
    54b0:	e13ff717 	ldw	r4,-36(fp)
    54b4:	000dc500 	call	dc50 <__floatunsisf>
    54b8:	1007883a 	mov	r3,r2
    54bc:	180b883a 	mov	r5,r3
    54c0:	8009883a 	mov	r4,r16
    54c4:	000cdd00 	call	cdd0 <__divsf3>
    54c8:	1007883a 	mov	r3,r2
    54cc:	1805883a 	mov	r2,r3
    54d0:	1009883a 	mov	r4,r2
    54d4:	000cb940 	call	cb94 <__fixunssfsi>
    54d8:	e0bff815 	stw	r2,-32(fp)
	REL_LEN = (rel_m_seconds * 44100) / 1000;
    54dc:	e0bffd0b 	ldhu	r2,-12(fp)
    54e0:	016b1114 	movui	r5,44100
    54e4:	1009883a 	mov	r4,r2
    54e8:	000cda80 	call	cda8 <__mulsi3>
    54ec:	0140fa04 	movi	r5,1000
    54f0:	1009883a 	mov	r4,r2
    54f4:	000cbf40 	call	cbf4 <__divsi3>
    54f8:	e0bff915 	stw	r2,-28(fp)
	REL_STEP = ((alt_u32) 0x80000) / REL_LEN;
    54fc:	e17ff917 	ldw	r5,-28(fp)
    5500:	01000234 	movhi	r4,8
    5504:	000ccec0 	call	ccec <__udivsi3>
    5508:	e0bffa15 	stw	r2,-24(fp)

	printf("ATT_LEN:  %X\n", ATT_LEN);
    550c:	e17ff417 	ldw	r5,-48(fp)
    5510:	010000b4 	movhi	r4,2
    5514:	210f8104 	addi	r4,r4,15876
    5518:	000edfc0 	call	edfc <printf>
	printf("ATT_STEP: %X\n", ATT_STEP);
    551c:	e17ff517 	ldw	r5,-44(fp)
    5520:	010000b4 	movhi	r4,2
    5524:	210f8504 	addi	r4,r4,15892
    5528:	000edfc0 	call	edfc <printf>
	printf("PEAK_ATT: %X\n", PEAK_ATT);
    552c:	e17ff617 	ldw	r5,-40(fp)
    5530:	010000b4 	movhi	r4,2
    5534:	210f8904 	addi	r4,r4,15908
    5538:	000edfc0 	call	edfc <printf>
	printf("DEC_LEN:  %X\n", DEC_LEN);
    553c:	e17ff717 	ldw	r5,-36(fp)
    5540:	010000b4 	movhi	r4,2
    5544:	210f8d04 	addi	r4,r4,15924
    5548:	000edfc0 	call	edfc <printf>
	printf("DEC_STEP: %X\n", DEC_STEP);
    554c:	e17ff817 	ldw	r5,-32(fp)
    5550:	010000b4 	movhi	r4,2
    5554:	210f9104 	addi	r4,r4,15940
    5558:	000edfc0 	call	edfc <printf>
	printf("REL_LEN:  %X\n", REL_LEN);
    555c:	e17ff917 	ldw	r5,-28(fp)
    5560:	010000b4 	movhi	r4,2
    5564:	210f9504 	addi	r4,r4,15956
    5568:	000edfc0 	call	edfc <printf>
	printf("REL_STEP: %X\n", REL_STEP);
    556c:	e17ffa17 	ldw	r5,-24(fp)
    5570:	010000b4 	movhi	r4,2
    5574:	210f9904 	addi	r4,r4,15972
    5578:	000edfc0 	call	edfc <printf>

	set_adsr(ATT_L, ATT_LEN);
    557c:	e17ff417 	ldw	r5,-48(fp)
    5580:	01000044 	movi	r4,1
    5584:	000530c0 	call	530c <_Z8set_adsrhm>
	set_adsr(ATT_S, ATT_STEP);
    5588:	e17ff517 	ldw	r5,-44(fp)
    558c:	01000084 	movi	r4,2
    5590:	000530c0 	call	530c <_Z8set_adsrhm>
	set_adsr(PEAK_A, PEAK_ATT);
    5594:	e17ff617 	ldw	r5,-40(fp)
    5598:	0009883a 	mov	r4,zero
    559c:	000530c0 	call	530c <_Z8set_adsrhm>
	set_adsr(DEC_L, DEC_LEN);
    55a0:	e17ff717 	ldw	r5,-36(fp)
    55a4:	010000c4 	movi	r4,3
    55a8:	000530c0 	call	530c <_Z8set_adsrhm>
	set_adsr(DEC_S, DEC_STEP);
    55ac:	e17ff817 	ldw	r5,-32(fp)
    55b0:	01000104 	movi	r4,4
    55b4:	000530c0 	call	530c <_Z8set_adsrhm>
	set_adsr(REL_L, REL_LEN);
    55b8:	e17ff917 	ldw	r5,-28(fp)
    55bc:	01000144 	movi	r4,5
    55c0:	000530c0 	call	530c <_Z8set_adsrhm>
	set_adsr(REL_S, REL_STEP);
    55c4:	e17ffa17 	ldw	r5,-24(fp)
    55c8:	01000184 	movi	r4,6
    55cc:	000530c0 	call	530c <_Z8set_adsrhm>

	return;
    55d0:	0001883a 	nop
}
    55d4:	e6ffff04 	addi	sp,fp,-4
    55d8:	dfc00217 	ldw	ra,8(sp)
    55dc:	df000117 	ldw	fp,4(sp)
    55e0:	dc000017 	ldw	r16,0(sp)
    55e4:	dec00304 	addi	sp,sp,12
    55e8:	f800283a 	ret

000055ec <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    55ec:	defff904 	addi	sp,sp,-28
    55f0:	dfc00615 	stw	ra,24(sp)
    55f4:	df000515 	stw	fp,20(sp)
    55f8:	df000504 	addi	fp,sp,20
    55fc:	e13ffc15 	stw	r4,-16(fp)
    5600:	e17ffd15 	stw	r5,-12(fp)
    5604:	3007883a 	mov	r3,r6
    5608:	3805883a 	mov	r2,r7
    560c:	e0fffe05 	stb	r3,-8(fp)
    5610:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
    5614:	e0800217 	ldw	r2,8(fp)
    5618:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
    561c:	e0bffc17 	ldw	r2,-16(fp)
    5620:	10800117 	ldw	r2,4(r2)
    5624:	1080004c 	andi	r2,r2,1
    5628:	1007883a 	mov	r3,r2
    562c:	e0bffb17 	ldw	r2,-20(fp)
    5630:	10800003 	ldbu	r2,0(r2)
    5634:	1080004c 	andi	r2,r2,1
    5638:	18c03fcc 	andi	r3,r3,255
    563c:	10803fcc 	andi	r2,r2,255
    5640:	18801426 	beq	r3,r2,5694 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
    5644:	e0bffb17 	ldw	r2,-20(fp)
    5648:	10800003 	ldbu	r2,0(r2)
    564c:	1080004c 	andi	r2,r2,1
    5650:	10803fcc 	andi	r2,r2,255
    5654:	10000826 	beq	r2,zero,5678 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
    5658:	e0bffc17 	ldw	r2,-16(fp)
    565c:	10800017 	ldw	r2,0(r2)
    5660:	10800304 	addi	r2,r2,12
    5664:	10800017 	ldw	r2,0(r2)
    5668:	e17ffb17 	ldw	r5,-20(fp)
    566c:	e13ffc17 	ldw	r4,-16(fp)
    5670:	103ee83a 	callr	r2
    5674:	00000706 	br	5694 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
    5678:	e0bffc17 	ldw	r2,-16(fp)
    567c:	10800017 	ldw	r2,0(r2)
    5680:	10800204 	addi	r2,r2,8
    5684:	10800017 	ldw	r2,0(r2)
    5688:	e17ffb17 	ldw	r5,-20(fp)
    568c:	e13ffc17 	ldw	r4,-16(fp)
    5690:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
    5694:	e0bffc17 	ldw	r2,-16(fp)
    5698:	10800117 	ldw	r2,4(r2)
    569c:	1004d07a 	srli	r2,r2,1
    56a0:	1080004c 	andi	r2,r2,1
    56a4:	1007883a 	mov	r3,r2
    56a8:	e0bffb17 	ldw	r2,-20(fp)
    56ac:	10800003 	ldbu	r2,0(r2)
    56b0:	1004d07a 	srli	r2,r2,1
    56b4:	1080004c 	andi	r2,r2,1
    56b8:	18c03fcc 	andi	r3,r3,255
    56bc:	10803fcc 	andi	r2,r2,255
    56c0:	18801426 	beq	r3,r2,5714 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
    56c4:	e0bffb17 	ldw	r2,-20(fp)
    56c8:	10800003 	ldbu	r2,0(r2)
    56cc:	1080008c 	andi	r2,r2,2
    56d0:	10803fcc 	andi	r2,r2,255
    56d4:	10000826 	beq	r2,zero,56f8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
    56d8:	e0bffc17 	ldw	r2,-16(fp)
    56dc:	10800017 	ldw	r2,0(r2)
    56e0:	10800504 	addi	r2,r2,20
    56e4:	10800017 	ldw	r2,0(r2)
    56e8:	e17ffb17 	ldw	r5,-20(fp)
    56ec:	e13ffc17 	ldw	r4,-16(fp)
    56f0:	103ee83a 	callr	r2
    56f4:	00000706 	br	5714 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
    56f8:	e0bffc17 	ldw	r2,-16(fp)
    56fc:	10800017 	ldw	r2,0(r2)
    5700:	10800404 	addi	r2,r2,16
    5704:	10800017 	ldw	r2,0(r2)
    5708:	e17ffb17 	ldw	r5,-20(fp)
    570c:	e13ffc17 	ldw	r4,-16(fp)
    5710:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
    5714:	e0bffc17 	ldw	r2,-16(fp)
    5718:	10800117 	ldw	r2,4(r2)
    571c:	1004d0ba 	srli	r2,r2,2
    5720:	1080004c 	andi	r2,r2,1
    5724:	1007883a 	mov	r3,r2
    5728:	e0bffb17 	ldw	r2,-20(fp)
    572c:	10800003 	ldbu	r2,0(r2)
    5730:	1004d0ba 	srli	r2,r2,2
    5734:	1080004c 	andi	r2,r2,1
    5738:	18c03fcc 	andi	r3,r3,255
    573c:	10803fcc 	andi	r2,r2,255
    5740:	18801426 	beq	r3,r2,5794 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
    5744:	e0bffb17 	ldw	r2,-20(fp)
    5748:	10800003 	ldbu	r2,0(r2)
    574c:	1080010c 	andi	r2,r2,4
    5750:	10803fcc 	andi	r2,r2,255
    5754:	10000826 	beq	r2,zero,5778 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
    5758:	e0bffc17 	ldw	r2,-16(fp)
    575c:	10800017 	ldw	r2,0(r2)
    5760:	10800704 	addi	r2,r2,28
    5764:	10800017 	ldw	r2,0(r2)
    5768:	e17ffb17 	ldw	r5,-20(fp)
    576c:	e13ffc17 	ldw	r4,-16(fp)
    5770:	103ee83a 	callr	r2
    5774:	00000706 	br	5794 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
    5778:	e0bffc17 	ldw	r2,-16(fp)
    577c:	10800017 	ldw	r2,0(r2)
    5780:	10800604 	addi	r2,r2,24
    5784:	10800017 	ldw	r2,0(r2)
    5788:	e17ffb17 	ldw	r5,-20(fp)
    578c:	e13ffc17 	ldw	r4,-16(fp)
    5790:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
    5794:	e0bffb17 	ldw	r2,-20(fp)
    5798:	10800043 	ldbu	r2,1(r2)
    579c:	10803fcc 	andi	r2,r2,255
    57a0:	1080201c 	xori	r2,r2,128
    57a4:	10bfe004 	addi	r2,r2,-128
    57a8:	1000061e 	bne	r2,zero,57c4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
    57ac:	e0bffb17 	ldw	r2,-20(fp)
    57b0:	10800083 	ldbu	r2,2(r2)
    57b4:	10803fcc 	andi	r2,r2,255
    57b8:	1080201c 	xori	r2,r2,128
    57bc:	10bfe004 	addi	r2,r2,-128
    57c0:	10000726 	beq	r2,zero,57e0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
    57c4:	e0bffc17 	ldw	r2,-16(fp)
    57c8:	10800017 	ldw	r2,0(r2)
    57cc:	10800104 	addi	r2,r2,4
    57d0:	10800017 	ldw	r2,0(r2)
    57d4:	e17ffb17 	ldw	r5,-20(fp)
    57d8:	e13ffc17 	ldw	r4,-16(fp)
    57dc:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
    57e0:	e0800217 	ldw	r2,8(fp)
    57e4:	10c00003 	ldbu	r3,0(r2)
    57e8:	e0bffc17 	ldw	r2,-16(fp)
    57ec:	10c00105 	stb	r3,4(r2)
#endif

};
    57f0:	0001883a 	nop
    57f4:	e037883a 	mov	sp,fp
    57f8:	dfc00117 	ldw	ra,4(sp)
    57fc:	df000017 	ldw	fp,0(sp)
    5800:	dec00204 	addi	sp,sp,8
    5804:	f800283a 	ret

00005808 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
    5808:	defff804 	addi	sp,sp,-32
    580c:	dfc00715 	stw	ra,28(sp)
    5810:	df000615 	stw	fp,24(sp)
    5814:	df000604 	addi	fp,sp,24
    5818:	e13ffc15 	stw	r4,-16(fp)
    581c:	e17ffd15 	stw	r5,-12(fp)
    5820:	3007883a 	mov	r3,r6
    5824:	3805883a 	mov	r2,r7
    5828:	e0fffe05 	stb	r3,-8(fp)
    582c:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
    5830:	e0800217 	ldw	r2,8(fp)
    5834:	10800084 	addi	r2,r2,2
    5838:	10800003 	ldbu	r2,0(r2)
    583c:	10803fcc 	andi	r2,r2,255
    5840:	10800058 	cmpnei	r2,r2,1
    5844:	10009926 	beq	r2,zero,5aac <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
    5848:	e0bffc17 	ldw	r2,-16(fp)
    584c:	10c00103 	ldbu	r3,4(r2)
    5850:	e0800217 	ldw	r2,8(fp)
    5854:	10800003 	ldbu	r2,0(r2)
    5858:	18c03fcc 	andi	r3,r3,255
    585c:	10803fcc 	andi	r2,r2,255
    5860:	18800e26 	beq	r3,r2,589c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
    5864:	e0bffc17 	ldw	r2,-16(fp)
    5868:	10800017 	ldw	r2,0(r2)
    586c:	10800204 	addi	r2,r2,8
    5870:	10800017 	ldw	r2,0(r2)
    5874:	e0fffc17 	ldw	r3,-16(fp)
    5878:	18c00103 	ldbu	r3,4(r3)
    587c:	19003fcc 	andi	r4,r3,255
    5880:	e0c00217 	ldw	r3,8(fp)
    5884:	18c00003 	ldbu	r3,0(r3)
    5888:	18c03fcc 	andi	r3,r3,255
    588c:	180d883a 	mov	r6,r3
    5890:	200b883a 	mov	r5,r4
    5894:	e13ffc17 	ldw	r4,-16(fp)
    5898:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
    589c:	00800084 	movi	r2,2
    58a0:	e0bffa05 	stb	r2,-24(fp)
    58a4:	e0bffa03 	ldbu	r2,-24(fp)
    58a8:	10800228 	cmpgeui	r2,r2,8
    58ac:	10006e1e 	bne	r2,zero,5a68 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
    58b0:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
    58b4:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
    58b8:	00800084 	movi	r2,2
    58bc:	e0bffac5 	stb	r2,-21(fp)
    58c0:	e0bffac3 	ldbu	r2,-21(fp)
    58c4:	10800228 	cmpgeui	r2,r2,8
    58c8:	10002f1e 	bne	r2,zero,5988 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
    58cc:	e0bffa03 	ldbu	r2,-24(fp)
    58d0:	e0c00217 	ldw	r3,8(fp)
    58d4:	1885883a 	add	r2,r3,r2
    58d8:	11000003 	ldbu	r4,0(r2)
    58dc:	e0bffac3 	ldbu	r2,-21(fp)
    58e0:	e0fffc17 	ldw	r3,-16(fp)
    58e4:	1885883a 	add	r2,r3,r2
    58e8:	10800104 	addi	r2,r2,4
    58ec:	10800003 	ldbu	r2,0(r2)
    58f0:	20c03fcc 	andi	r3,r4,255
    58f4:	10803fcc 	andi	r2,r2,255
    58f8:	1880091e 	bne	r3,r2,5920 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
    58fc:	e0bffa03 	ldbu	r2,-24(fp)
    5900:	e0c00217 	ldw	r3,8(fp)
    5904:	1885883a 	add	r2,r3,r2
    5908:	10800003 	ldbu	r2,0(r2)
    590c:	10803fcc 	andi	r2,r2,255
    5910:	10800060 	cmpeqi	r2,r2,1
    5914:	1000021e 	bne	r2,zero,5920 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
    5918:	00800044 	movi	r2,1
    591c:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
    5920:	e0bffac3 	ldbu	r2,-21(fp)
    5924:	e0c00217 	ldw	r3,8(fp)
    5928:	1885883a 	add	r2,r3,r2
    592c:	11000003 	ldbu	r4,0(r2)
    5930:	e0bffa03 	ldbu	r2,-24(fp)
    5934:	e0fffc17 	ldw	r3,-16(fp)
    5938:	1885883a 	add	r2,r3,r2
    593c:	10800104 	addi	r2,r2,4
    5940:	10800003 	ldbu	r2,0(r2)
    5944:	20c03fcc 	andi	r3,r4,255
    5948:	10803fcc 	andi	r2,r2,255
    594c:	18800a1e 	bne	r3,r2,5978 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
    5950:	e0bffa03 	ldbu	r2,-24(fp)
    5954:	e0fffc17 	ldw	r3,-16(fp)
    5958:	1885883a 	add	r2,r3,r2
    595c:	10800104 	addi	r2,r2,4
    5960:	10800003 	ldbu	r2,0(r2)
    5964:	10803fcc 	andi	r2,r2,255
    5968:	10800060 	cmpeqi	r2,r2,1
    596c:	1000021e 	bne	r2,zero,5978 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
    5970:	00800044 	movi	r2,1
    5974:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
    5978:	e0bffac3 	ldbu	r2,-21(fp)
    597c:	10800044 	addi	r2,r2,1
    5980:	e0bffac5 	stb	r2,-21(fp)
    5984:	003fce06 	br	58c0 <__alt_data_end+0xfc0058c0>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
    5988:	e0bffa43 	ldbu	r2,-23(fp)
    598c:	1080005c 	xori	r2,r2,1
    5990:	10803fcc 	andi	r2,r2,255
    5994:	10001c26 	beq	r2,zero,5a08 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
    5998:	e0bffc17 	ldw	r2,-16(fp)
    599c:	10800017 	ldw	r2,0(r2)
    59a0:	10800104 	addi	r2,r2,4
    59a4:	10800017 	ldw	r2,0(r2)
    59a8:	e0fffa03 	ldbu	r3,-24(fp)
    59ac:	e1000217 	ldw	r4,8(fp)
    59b0:	20c7883a 	add	r3,r4,r3
    59b4:	18c00003 	ldbu	r3,0(r3)
    59b8:	18c03fcc 	andi	r3,r3,255
    59bc:	180d883a 	mov	r6,r3
    59c0:	e17ffd17 	ldw	r5,-12(fp)
    59c4:	e13ffc17 	ldw	r4,-16(fp)
    59c8:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
    59cc:	e0bffc17 	ldw	r2,-16(fp)
    59d0:	10800017 	ldw	r2,0(r2)
    59d4:	10800304 	addi	r2,r2,12
    59d8:	10800017 	ldw	r2,0(r2)
    59dc:	e0c00217 	ldw	r3,8(fp)
    59e0:	18c00003 	ldbu	r3,0(r3)
    59e4:	19403fcc 	andi	r5,r3,255
    59e8:	e0fffa03 	ldbu	r3,-24(fp)
    59ec:	e1000217 	ldw	r4,8(fp)
    59f0:	20c7883a 	add	r3,r4,r3
    59f4:	18c00003 	ldbu	r3,0(r3)
    59f8:	18c03fcc 	andi	r3,r3,255
    59fc:	180d883a 	mov	r6,r3
    5a00:	e13ffc17 	ldw	r4,-16(fp)
    5a04:	103ee83a 	callr	r2
                }
                if (!up)
    5a08:	e0bffa83 	ldbu	r2,-22(fp)
    5a0c:	1080005c 	xori	r2,r2,1
    5a10:	10803fcc 	andi	r2,r2,255
    5a14:	10001026 	beq	r2,zero,5a58 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
    5a18:	e0bffc17 	ldw	r2,-16(fp)
    5a1c:	10800017 	ldw	r2,0(r2)
    5a20:	10800404 	addi	r2,r2,16
    5a24:	10800017 	ldw	r2,0(r2)
    5a28:	e0fffc17 	ldw	r3,-16(fp)
    5a2c:	18c00103 	ldbu	r3,4(r3)
    5a30:	19403fcc 	andi	r5,r3,255
    5a34:	e0fffa03 	ldbu	r3,-24(fp)
    5a38:	e13ffc17 	ldw	r4,-16(fp)
    5a3c:	20c7883a 	add	r3,r4,r3
    5a40:	18c00104 	addi	r3,r3,4
    5a44:	18c00003 	ldbu	r3,0(r3)
    5a48:	18c03fcc 	andi	r3,r3,255
    5a4c:	180d883a 	mov	r6,r3
    5a50:	e13ffc17 	ldw	r4,-16(fp)
    5a54:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
    5a58:	e0bffa03 	ldbu	r2,-24(fp)
    5a5c:	10800044 	addi	r2,r2,1
    5a60:	e0bffa05 	stb	r2,-24(fp)
    5a64:	003f8f06 	br	58a4 <__alt_data_end+0xfc0058a4>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a68:	e03ffb05 	stb	zero,-20(fp)
    5a6c:	e0bffb03 	ldbu	r2,-20(fp)
    5a70:	10800228 	cmpgeui	r2,r2,8
    5a74:	10000e1e 	bne	r2,zero,5ab0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
    5a78:	e0bffb03 	ldbu	r2,-20(fp)
    5a7c:	e0fffb03 	ldbu	r3,-20(fp)
    5a80:	e1000217 	ldw	r4,8(fp)
    5a84:	20c7883a 	add	r3,r4,r3
    5a88:	18c00003 	ldbu	r3,0(r3)
    5a8c:	e13ffc17 	ldw	r4,-16(fp)
    5a90:	2085883a 	add	r2,r4,r2
    5a94:	10800104 	addi	r2,r2,4
    5a98:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
    5a9c:	e0bffb03 	ldbu	r2,-20(fp)
    5aa0:	10800044 	addi	r2,r2,1
    5aa4:	e0bffb05 	stb	r2,-20(fp)
    5aa8:	003ff006 	br	5a6c <__alt_data_end+0xfc005a6c>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
    5aac:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
    5ab0:	e037883a 	mov	sp,fp
    5ab4:	dfc00117 	ldw	ra,4(sp)
    5ab8:	df000017 	ldw	fp,0(sp)
    5abc:	dec00204 	addi	sp,sp,8
    5ac0:	f800283a 	ret

00005ac4 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
    5ac4:	defffa04 	addi	sp,sp,-24
    5ac8:	dfc00515 	stw	ra,20(sp)
    5acc:	df000415 	stw	fp,16(sp)
    5ad0:	df000404 	addi	fp,sp,16
    5ad4:	e13ffd15 	stw	r4,-12(fp)
    5ad8:	2807883a 	mov	r3,r5
    5adc:	3005883a 	mov	r2,r6
    5ae0:	e0fffe05 	stb	r3,-8(fp)
    5ae4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
    5ae8:	e0bffe03 	ldbu	r2,-8(fp)
    5aec:	1080088c 	andi	r2,r2,34
    5af0:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
    5af4:	e0bfff03 	ldbu	r2,-4(fp)
    5af8:	10800130 	cmpltui	r2,r2,4
    5afc:	1000151e 	bne	r2,zero,5b54 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
    5b00:	e0bfff03 	ldbu	r2,-4(fp)
    5b04:	108007a8 	cmpgeui	r2,r2,30
    5b08:	1000121e 	bne	r2,zero,5b54 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5b0c:	e0bffd17 	ldw	r2,-12(fp)
    5b10:	10800317 	ldw	r2,12(r2)
    5b14:	1080008c 	andi	r2,r2,2
    5b18:	1000021e 	bne	r2,zero,5b24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
    5b1c:	e0bffc03 	ldbu	r2,-16(fp)
    5b20:	1000061e 	bne	r2,zero,5b3c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5b24:	e0bffd17 	ldw	r2,-12(fp)
    5b28:	10800317 	ldw	r2,12(r2)
    5b2c:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
    5b30:	10000526 	beq	r2,zero,5b48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
    5b34:	e0bffc03 	ldbu	r2,-16(fp)
    5b38:	1000031e 	bne	r2,zero,5b48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
    5b3c:	e0bfff03 	ldbu	r2,-4(fp)
    5b40:	10800f44 	addi	r2,r2,61
    5b44:	00008006 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
    5b48:	e0bfff03 	ldbu	r2,-4(fp)
    5b4c:	10801744 	addi	r2,r2,93
    5b50:	00007d06 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
    5b54:	e0bfff03 	ldbu	r2,-4(fp)
    5b58:	108007b0 	cmpltui	r2,r2,30
    5b5c:	1000191e 	bne	r2,zero,5bc4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
    5b60:	e0bfff03 	ldbu	r2,-4(fp)
    5b64:	10800a28 	cmpgeui	r2,r2,40
    5b68:	1000161e 	bne	r2,zero,5bc4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
    5b6c:	e0bffc03 	ldbu	r2,-16(fp)
    5b70:	10000c26 	beq	r2,zero,5ba4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
    5b74:	e0bffd17 	ldw	r2,-12(fp)
    5b78:	10800017 	ldw	r2,0(r2)
    5b7c:	10800504 	addi	r2,r2,20
    5b80:	10800017 	ldw	r2,0(r2)
    5b84:	e13ffd17 	ldw	r4,-12(fp)
    5b88:	103ee83a 	callr	r2
    5b8c:	1007883a 	mov	r3,r2
    5b90:	e0bfff03 	ldbu	r2,-4(fp)
    5b94:	10bff884 	addi	r2,r2,-30
    5b98:	1885883a 	add	r2,r3,r2
    5b9c:	10800003 	ldbu	r2,0(r2)
    5ba0:	00006906 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
    5ba4:	e0bfff03 	ldbu	r2,-4(fp)
    5ba8:	108009e0 	cmpeqi	r2,r2,39
    5bac:	1000031e 	bne	r2,zero,5bbc <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
    5bb0:	e0bfff03 	ldbu	r2,-4(fp)
    5bb4:	108004c4 	addi	r2,r2,19
    5bb8:	00006306 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5bbc:	00800c04 	movi	r2,48
    5bc0:	00006106 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
    5bc4:	e0bfff03 	ldbu	r2,-4(fp)
    5bc8:	10801670 	cmpltui	r2,r2,89
    5bcc:	10000a1e 	bne	r2,zero,5bf8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
    5bd0:	e0bfff03 	ldbu	r2,-4(fp)
    5bd4:	108018a8 	cmpgeui	r2,r2,98
    5bd8:	1000071e 	bne	r2,zero,5bf8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
    5bdc:	e0bffd17 	ldw	r2,-12(fp)
    5be0:	10800317 	ldw	r2,12(r2)
    5be4:	1080004c 	andi	r2,r2,1
    5be8:	10005626 	beq	r2,zero,5d44 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
    5bec:	e0bfff03 	ldbu	r2,-4(fp)
    5bf0:	10bff604 	addi	r2,r2,-40
    5bf4:	00005406 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
    5bf8:	e0bfff03 	ldbu	r2,-4(fp)
    5bfc:	10800b70 	cmpltui	r2,r2,45
    5c00:	10001d1e 	bne	r2,zero,5c78 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
    5c04:	e0bfff03 	ldbu	r2,-4(fp)
    5c08:	10800e68 	cmpgeui	r2,r2,57
    5c0c:	10001a1e 	bne	r2,zero,5c78 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
    5c10:	e0bffc03 	ldbu	r2,-16(fp)
    5c14:	10000c26 	beq	r2,zero,5c48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
    5c18:	e0bffd17 	ldw	r2,-12(fp)
    5c1c:	10800017 	ldw	r2,0(r2)
    5c20:	10800604 	addi	r2,r2,24
    5c24:	10800017 	ldw	r2,0(r2)
    5c28:	e13ffd17 	ldw	r4,-12(fp)
    5c2c:	103ee83a 	callr	r2
    5c30:	1007883a 	mov	r3,r2
    5c34:	e0bfff03 	ldbu	r2,-4(fp)
    5c38:	10bff4c4 	addi	r2,r2,-45
    5c3c:	1885883a 	add	r2,r3,r2
    5c40:	10800003 	ldbu	r2,0(r2)
    5c44:	00004006 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5c48:	e0bffd17 	ldw	r2,-12(fp)
    5c4c:	10800017 	ldw	r2,0(r2)
    5c50:	10800704 	addi	r2,r2,28
    5c54:	10800017 	ldw	r2,0(r2)
    5c58:	e13ffd17 	ldw	r4,-12(fp)
    5c5c:	103ee83a 	callr	r2
    5c60:	1007883a 	mov	r3,r2
    5c64:	e0bfff03 	ldbu	r2,-4(fp)
    5c68:	10bff4c4 	addi	r2,r2,-45
    5c6c:	1885883a 	add	r2,r3,r2
    5c70:	10800003 	ldbu	r2,0(r2)
    5c74:	00003406 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
    5c78:	e0bfff03 	ldbu	r2,-4(fp)
    5c7c:	10801530 	cmpltui	r2,r2,84
    5c80:	10000f1e 	bne	r2,zero,5cc0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
    5c84:	e0bfff03 	ldbu	r2,-4(fp)
    5c88:	10801668 	cmpgeui	r2,r2,89
    5c8c:	10000c1e 	bne	r2,zero,5cc0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
    5c90:	e0bffd17 	ldw	r2,-12(fp)
    5c94:	10800017 	ldw	r2,0(r2)
    5c98:	10800804 	addi	r2,r2,32
    5c9c:	10800017 	ldw	r2,0(r2)
    5ca0:	e13ffd17 	ldw	r4,-12(fp)
    5ca4:	103ee83a 	callr	r2
    5ca8:	1007883a 	mov	r3,r2
    5cac:	e0bfff03 	ldbu	r2,-4(fp)
    5cb0:	10bfeb04 	addi	r2,r2,-84
    5cb4:	1885883a 	add	r2,r3,r2
    5cb8:	10800003 	ldbu	r2,0(r2)
    5cbc:	00002206 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
    5cc0:	e0bfff03 	ldbu	r2,-4(fp)
    5cc4:	10c00b20 	cmpeqi	r3,r2,44
    5cc8:	18000a1e 	bne	r3,zero,5cf4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
    5ccc:	10c00b48 	cmpgei	r3,r2,45
    5cd0:	1800031e 	bne	r3,zero,5ce0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
    5cd4:	10800a20 	cmpeqi	r2,r2,40
    5cd8:	1000081e 	bne	r2,zero,5cfc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
    5cdc:	00001906 	br	5d44 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
    5ce0:	10c018a0 	cmpeqi	r3,r2,98
    5ce4:	1800071e 	bne	r3,zero,5d04 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
    5ce8:	108018e0 	cmpeqi	r2,r2,99
    5cec:	10000d1e 	bne	r2,zero,5d24 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
    5cf0:	00001406 	br	5d44 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
    5cf4:	00800804 	movi	r2,32
    5cf8:	00001306 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
    5cfc:	00800344 	movi	r2,13
    5d00:	00001106 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
    5d04:	e0bffd17 	ldw	r2,-12(fp)
    5d08:	10800317 	ldw	r2,12(r2)
    5d0c:	1080004c 	andi	r2,r2,1
    5d10:	10000226 	beq	r2,zero,5d1c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
    5d14:	00800c04 	movi	r2,48
    5d18:	00000b06 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5d1c:	0005883a 	mov	r2,zero
    5d20:	00000906 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
    5d24:	e0bffd17 	ldw	r2,-12(fp)
    5d28:	10800317 	ldw	r2,12(r2)
    5d2c:	1080004c 	andi	r2,r2,1
    5d30:	10000226 	beq	r2,zero,5d3c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
    5d34:	00800b84 	movi	r2,46
    5d38:	00000306 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
    5d3c:	0005883a 	mov	r2,zero
    5d40:	00000106 	br	5d48 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
    5d44:	0005883a 	mov	r2,zero
}
    5d48:	e037883a 	mov	sp,fp
    5d4c:	dfc00117 	ldw	ra,4(sp)
    5d50:	df000017 	ldw	fp,0(sp)
    5d54:	dec00204 	addi	sp,sp,8
    5d58:	f800283a 	ret

00005d5c <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
    5d5c:	defffd04 	addi	sp,sp,-12
    5d60:	df000215 	stw	fp,8(sp)
    5d64:	df000204 	addi	fp,sp,8
    5d68:	e13ffe15 	stw	r4,-8(fp)
    5d6c:	e17fff15 	stw	r5,-4(fp)
        };
    5d70:	0001883a 	nop
    5d74:	e037883a 	mov	sp,fp
    5d78:	df000017 	ldw	fp,0(sp)
    5d7c:	dec00104 	addi	sp,sp,4
    5d80:	f800283a 	ret

00005d84 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5d84:	defffd04 	addi	sp,sp,-12
    5d88:	df000215 	stw	fp,8(sp)
    5d8c:	df000204 	addi	fp,sp,8
    5d90:	e13ffe15 	stw	r4,-8(fp)
    5d94:	e17fff15 	stw	r5,-4(fp)
        };
    5d98:	0001883a 	nop
    5d9c:	e037883a 	mov	sp,fp
    5da0:	df000017 	ldw	fp,0(sp)
    5da4:	dec00104 	addi	sp,sp,4
    5da8:	f800283a 	ret

00005dac <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5dac:	defffd04 	addi	sp,sp,-12
    5db0:	df000215 	stw	fp,8(sp)
    5db4:	df000204 	addi	fp,sp,8
    5db8:	e13ffe15 	stw	r4,-8(fp)
    5dbc:	e17fff15 	stw	r5,-4(fp)
        };
    5dc0:	0001883a 	nop
    5dc4:	e037883a 	mov	sp,fp
    5dc8:	df000017 	ldw	fp,0(sp)
    5dcc:	dec00104 	addi	sp,sp,4
    5dd0:	f800283a 	ret

00005dd4 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5dd4:	defffd04 	addi	sp,sp,-12
    5dd8:	df000215 	stw	fp,8(sp)
    5ddc:	df000204 	addi	fp,sp,8
    5de0:	e13ffe15 	stw	r4,-8(fp)
    5de4:	e17fff15 	stw	r5,-4(fp)
        };
    5de8:	0001883a 	nop
    5dec:	e037883a 	mov	sp,fp
    5df0:	df000017 	ldw	fp,0(sp)
    5df4:	dec00104 	addi	sp,sp,4
    5df8:	f800283a 	ret

00005dfc <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5dfc:	defffd04 	addi	sp,sp,-12
    5e00:	df000215 	stw	fp,8(sp)
    5e04:	df000204 	addi	fp,sp,8
    5e08:	e13ffe15 	stw	r4,-8(fp)
    5e0c:	e17fff15 	stw	r5,-4(fp)
        };
    5e10:	0001883a 	nop
    5e14:	e037883a 	mov	sp,fp
    5e18:	df000017 	ldw	fp,0(sp)
    5e1c:	dec00104 	addi	sp,sp,4
    5e20:	f800283a 	ret

00005e24 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
    5e24:	defffd04 	addi	sp,sp,-12
    5e28:	df000215 	stw	fp,8(sp)
    5e2c:	df000204 	addi	fp,sp,8
    5e30:	e13ffe15 	stw	r4,-8(fp)
    5e34:	e17fff15 	stw	r5,-4(fp)
        };
    5e38:	0001883a 	nop
    5e3c:	e037883a 	mov	sp,fp
    5e40:	df000017 	ldw	fp,0(sp)
    5e44:	dec00104 	addi	sp,sp,4
    5e48:	f800283a 	ret

00005e4c <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
    5e4c:	defffd04 	addi	sp,sp,-12
    5e50:	df000215 	stw	fp,8(sp)
    5e54:	df000204 	addi	fp,sp,8
    5e58:	e13ffe15 	stw	r4,-8(fp)
    5e5c:	e17fff15 	stw	r5,-4(fp)
        };
    5e60:	0001883a 	nop
    5e64:	e037883a 	mov	sp,fp
    5e68:	df000017 	ldw	fp,0(sp)
    5e6c:	dec00104 	addi	sp,sp,4
    5e70:	f800283a 	ret

00005e74 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
    5e74:	defff704 	addi	sp,sp,-36
    5e78:	dfc00815 	stw	ra,32(sp)
    5e7c:	df000715 	stw	fp,28(sp)
    5e80:	df000704 	addi	fp,sp,28
    5e84:	e13ffd15 	stw	r4,-12(fp)
    5e88:	e17ffe15 	stw	r5,-8(fp)
    5e8c:	3005883a 	mov	r2,r6
    5e90:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
    5e94:	e0bffd17 	ldw	r2,-12(fp)
    5e98:	10800303 	ldbu	r2,12(r2)
    5e9c:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
    5ea0:	e0bfff03 	ldbu	r2,-4(fp)
    5ea4:	10c011e0 	cmpeqi	r3,r2,71
    5ea8:	1800271e 	bne	r3,zero,5f48 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
    5eac:	10c014e0 	cmpeqi	r3,r2,83
    5eb0:	1800031e 	bne	r3,zero,5ec0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
    5eb4:	10800e60 	cmpeqi	r2,r2,57
    5eb8:	1000111e 	bne	r2,zero,5f00 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
    5ebc:	00003506 	br	5f94 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
    5ec0:	e0bffd17 	ldw	r2,-12(fp)
    5ec4:	10800317 	ldw	r2,12(r2)
    5ec8:	1080004c 	andi	r2,r2,1
    5ecc:	0084303a 	nor	r2,zero,r2
    5ed0:	1080004c 	andi	r2,r2,1
    5ed4:	1007883a 	mov	r3,r2
    5ed8:	e0bffd17 	ldw	r2,-12(fp)
    5edc:	1940004c 	andi	r5,r3,1
    5ee0:	11000303 	ldbu	r4,12(r2)
    5ee4:	00ffff84 	movi	r3,-2
    5ee8:	20c6703a 	and	r3,r4,r3
    5eec:	1809883a 	mov	r4,r3
    5ef0:	2807883a 	mov	r3,r5
    5ef4:	20c6b03a 	or	r3,r4,r3
    5ef8:	10c00305 	stb	r3,12(r2)
                                break;
    5efc:	00002506 	br	5f94 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
    5f00:	e0bffd17 	ldw	r2,-12(fp)
    5f04:	10800317 	ldw	r2,12(r2)
    5f08:	1004d07a 	srli	r2,r2,1
    5f0c:	1080004c 	andi	r2,r2,1
    5f10:	0084303a 	nor	r2,zero,r2
    5f14:	1080004c 	andi	r2,r2,1
    5f18:	1007883a 	mov	r3,r2
    5f1c:	e0bffd17 	ldw	r2,-12(fp)
    5f20:	18c0004c 	andi	r3,r3,1
    5f24:	18cb883a 	add	r5,r3,r3
    5f28:	11000303 	ldbu	r4,12(r2)
    5f2c:	00ffff44 	movi	r3,-3
    5f30:	20c6703a 	and	r3,r4,r3
    5f34:	1809883a 	mov	r4,r3
    5f38:	2807883a 	mov	r3,r5
    5f3c:	20c6b03a 	or	r3,r4,r3
    5f40:	10c00305 	stb	r3,12(r2)
                                break;
    5f44:	00001306 	br	5f94 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
    5f48:	e0bffd17 	ldw	r2,-12(fp)
    5f4c:	10800317 	ldw	r2,12(r2)
    5f50:	1004d0ba 	srli	r2,r2,2
    5f54:	1080004c 	andi	r2,r2,1
    5f58:	0084303a 	nor	r2,zero,r2
    5f5c:	1080004c 	andi	r2,r2,1
    5f60:	1007883a 	mov	r3,r2
    5f64:	e0bffd17 	ldw	r2,-12(fp)
    5f68:	18c0004c 	andi	r3,r3,1
    5f6c:	18c7883a 	add	r3,r3,r3
    5f70:	18cb883a 	add	r5,r3,r3
    5f74:	11000303 	ldbu	r4,12(r2)
    5f78:	00fffec4 	movi	r3,-5
    5f7c:	20c6703a 	and	r3,r4,r3
    5f80:	1809883a 	mov	r4,r3
    5f84:	2807883a 	mov	r3,r5
    5f88:	20c6b03a 	or	r3,r4,r3
    5f8c:	10c00305 	stb	r3,12(r2)
                                break;
    5f90:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
    5f94:	e0bffd17 	ldw	r2,-12(fp)
    5f98:	10800303 	ldbu	r2,12(r2)
    5f9c:	10c03fcc 	andi	r3,r2,255
    5fa0:	e0bffc03 	ldbu	r2,-16(fp)
    5fa4:	18801026 	beq	r3,r2,5fe8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
    5fa8:	e0bffe17 	ldw	r2,-8(fp)
    5fac:	10000e26 	beq	r2,zero,5fe8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
    5fb0:	e0bffd17 	ldw	r2,-12(fp)
    5fb4:	10800303 	ldbu	r2,12(r2)
    5fb8:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
    5fbc:	e0bffc44 	addi	r2,fp,-15
    5fc0:	d8800215 	stw	r2,8(sp)
    5fc4:	00800044 	movi	r2,1
    5fc8:	d8800115 	stw	r2,4(sp)
    5fcc:	d8000015 	stw	zero,0(sp)
    5fd0:	01c00084 	movi	r7,2
    5fd4:	000d883a 	mov	r6,zero
    5fd8:	000b883a 	mov	r5,zero
    5fdc:	e13ffe17 	ldw	r4,-8(fp)
    5fe0:	0008ef80 	call	8ef8 <_ZN6USBHID9SetReportEhhhhtPh>
    5fe4:	00000106 	br	5fec <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
    5fe8:	0005883a 	mov	r2,zero
        };
    5fec:	e037883a 	mov	sp,fp
    5ff0:	dfc00117 	ldw	ra,4(sp)
    5ff4:	df000017 	ldw	fp,0(sp)
    5ff8:	dec00204 	addi	sp,sp,8
    5ffc:	f800283a 	ret

00006000 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
    6000:	defffc04 	addi	sp,sp,-16
    6004:	df000315 	stw	fp,12(sp)
    6008:	df000304 	addi	fp,sp,12
    600c:	e13ffd15 	stw	r4,-12(fp)
    6010:	2807883a 	mov	r3,r5
    6014:	3005883a 	mov	r2,r6
    6018:	e0fffe05 	stb	r3,-8(fp)
    601c:	e0bfff05 	stb	r2,-4(fp)
        };
    6020:	0001883a 	nop
    6024:	e037883a 	mov	sp,fp
    6028:	df000017 	ldw	fp,0(sp)
    602c:	dec00104 	addi	sp,sp,4
    6030:	f800283a 	ret

00006034 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6034:	defffc04 	addi	sp,sp,-16
    6038:	df000315 	stw	fp,12(sp)
    603c:	df000304 	addi	fp,sp,12
    6040:	e13ffd15 	stw	r4,-12(fp)
    6044:	2807883a 	mov	r3,r5
    6048:	3005883a 	mov	r2,r6
    604c:	e0fffe05 	stb	r3,-8(fp)
    6050:	e0bfff05 	stb	r2,-4(fp)
        };
    6054:	0001883a 	nop
    6058:	e037883a 	mov	sp,fp
    605c:	df000017 	ldw	fp,0(sp)
    6060:	dec00104 	addi	sp,sp,4
    6064:	f800283a 	ret

00006068 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
    6068:	defffc04 	addi	sp,sp,-16
    606c:	df000315 	stw	fp,12(sp)
    6070:	df000304 	addi	fp,sp,12
    6074:	e13ffd15 	stw	r4,-12(fp)
    6078:	2807883a 	mov	r3,r5
    607c:	3005883a 	mov	r2,r6
    6080:	e0fffe05 	stb	r3,-8(fp)
    6084:	e0bfff05 	stb	r2,-4(fp)
        };
    6088:	0001883a 	nop
    608c:	e037883a 	mov	sp,fp
    6090:	df000017 	ldw	fp,0(sp)
    6094:	dec00104 	addi	sp,sp,4
    6098:	f800283a 	ret

0000609c <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
    609c:	defffe04 	addi	sp,sp,-8
    60a0:	df000115 	stw	fp,4(sp)
    60a4:	df000104 	addi	fp,sp,4
    60a8:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
    60ac:	008000b4 	movhi	r2,2
    60b0:	1097ca84 	addi	r2,r2,24362
        };
    60b4:	e037883a 	mov	sp,fp
    60b8:	df000017 	ldw	fp,0(sp)
    60bc:	dec00104 	addi	sp,sp,4
    60c0:	f800283a 	ret

000060c4 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
    60c4:	defffe04 	addi	sp,sp,-8
    60c8:	df000115 	stw	fp,4(sp)
    60cc:	df000104 	addi	fp,sp,4
    60d0:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
    60d4:	008000b4 	movhi	r2,2
    60d8:	1097cd04 	addi	r2,r2,24372
        };
    60dc:	e037883a 	mov	sp,fp
    60e0:	df000017 	ldw	fp,0(sp)
    60e4:	dec00104 	addi	sp,sp,4
    60e8:	f800283a 	ret

000060ec <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
    60ec:	defffe04 	addi	sp,sp,-8
    60f0:	df000115 	stw	fp,4(sp)
    60f4:	df000104 	addi	fp,sp,4
    60f8:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
    60fc:	008000b4 	movhi	r2,2
    6100:	1097d004 	addi	r2,r2,24384
        };
    6104:	e037883a 	mov	sp,fp
    6108:	df000017 	ldw	fp,0(sp)
    610c:	dec00104 	addi	sp,sp,4
    6110:	f800283a 	ret

00006114 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
    6114:	defffe04 	addi	sp,sp,-8
    6118:	df000115 	stw	fp,4(sp)
    611c:	df000104 	addi	fp,sp,4
    6120:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
    6124:	d0a1e784 	addi	r2,gp,-30818
        };
    6128:	e037883a 	mov	sp,fp
    612c:	df000017 	ldw	fp,0(sp)
    6130:	dec00104 	addi	sp,sp,4
    6134:	f800283a 	ret

00006138 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
    6138:	defffc04 	addi	sp,sp,-16
    613c:	dfc00315 	stw	ra,12(sp)
    6140:	df000215 	stw	fp,8(sp)
    6144:	df000204 	addi	fp,sp,8
    6148:	2005883a 	mov	r2,r4
    614c:	e17fff15 	stw	r5,-4(fp)
    6150:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
    6154:	d0e1ec17 	ldw	r3,-30800(gp)
    6158:	e0bfff17 	ldw	r2,-4(fp)
    615c:	18800416 	blt	r3,r2,6170 <_Z9E_Notifycci+0x38>
        printf("%c", c);
    6160:	e0bffe07 	ldb	r2,-8(fp)
    6164:	1009883a 	mov	r4,r2
    6168:	000ee400 	call	ee40 <putchar>
    616c:	00000106 	br	6174 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6170:	0001883a 	nop
        printf("%c", c);
}
    6174:	e037883a 	mov	sp,fp
    6178:	dfc00117 	ldw	ra,4(sp)
    617c:	df000017 	ldw	fp,0(sp)
    6180:	dec00204 	addi	sp,sp,8
    6184:	f800283a 	ret

00006188 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
    6188:	defffb04 	addi	sp,sp,-20
    618c:	dfc00415 	stw	ra,16(sp)
    6190:	df000315 	stw	fp,12(sp)
    6194:	df000304 	addi	fp,sp,12
    6198:	e13ffe15 	stw	r4,-8(fp)
    619c:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    61a0:	d0e1ec17 	ldw	r3,-30800(gp)
    61a4:	e0bfff17 	ldw	r2,-4(fp)
    61a8:	18801016 	blt	r3,r2,61ec <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
    61ac:	e0bffe17 	ldw	r2,-8(fp)
    61b0:	10001026 	beq	r2,zero,61f4 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
    61b4:	e0bffe17 	ldw	r2,-8(fp)
    61b8:	10c00044 	addi	r3,r2,1
    61bc:	e0fffe15 	stw	r3,-8(fp)
    61c0:	10800003 	ldbu	r2,0(r2)
    61c4:	e0bffd05 	stb	r2,-12(fp)
    61c8:	e0bffd07 	ldb	r2,-12(fp)
    61cc:	1004c03a 	cmpne	r2,r2,zero
    61d0:	10803fcc 	andi	r2,r2,255
    61d4:	10000826 	beq	r2,zero,61f8 <_Z8E_NotifyPKci+0x70>
    61d8:	e0bffd07 	ldb	r2,-12(fp)
    61dc:	e17fff17 	ldw	r5,-4(fp)
    61e0:	1009883a 	mov	r4,r2
    61e4:	00061380 	call	6138 <_Z9E_Notifycci>
    61e8:	003ff206 	br	61b4 <__alt_data_end+0xfc0061b4>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    61ec:	0001883a 	nop
    61f0:	00000106 	br	61f8 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
    61f4:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
    61f8:	e037883a 	mov	sp,fp
    61fc:	dfc00117 	ldw	ra,4(sp)
    6200:	df000017 	ldw	fp,0(sp)
    6204:	dec00204 	addi	sp,sp,8
    6208:	f800283a 	ret

0000620c <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
    620c:	defffb04 	addi	sp,sp,-20
    6210:	dfc00415 	stw	ra,16(sp)
    6214:	df000315 	stw	fp,12(sp)
    6218:	df000304 	addi	fp,sp,12
    621c:	e13ffe15 	stw	r4,-8(fp)
    6220:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
    6224:	d0e1ec17 	ldw	r3,-30800(gp)
    6228:	e0bfff17 	ldw	r2,-4(fp)
    622c:	18801016 	blt	r3,r2,6270 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
    6230:	e0bffe17 	ldw	r2,-8(fp)
    6234:	10001026 	beq	r2,zero,6278 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
    6238:	e0bffe17 	ldw	r2,-8(fp)
    623c:	10c00044 	addi	r3,r2,1
    6240:	e0fffe15 	stw	r3,-8(fp)
    6244:	10800003 	ldbu	r2,0(r2)
    6248:	e0bffd05 	stb	r2,-12(fp)
    624c:	e0bffd07 	ldb	r2,-12(fp)
    6250:	1004c03a 	cmpne	r2,r2,zero
    6254:	10803fcc 	andi	r2,r2,255
    6258:	10000826 	beq	r2,zero,627c <_Z11E_NotifyStrPKci+0x70>
    625c:	e0bffd07 	ldb	r2,-12(fp)
    6260:	e17fff17 	ldw	r5,-4(fp)
    6264:	1009883a 	mov	r4,r2
    6268:	00061380 	call	6138 <_Z9E_Notifycci>
    626c:	003ff206 	br	6238 <__alt_data_end+0xfc006238>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
    6270:	0001883a 	nop
    6274:	00000106 	br	627c <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
    6278:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
    627c:	e037883a 	mov	sp,fp
    6280:	dfc00117 	ldw	ra,4(sp)
    6284:	df000017 	ldw	fp,0(sp)
    6288:	dec00204 	addi	sp,sp,8
    628c:	f800283a 	ret

00006290 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
    6290:	defffd04 	addi	sp,sp,-12
    6294:	df000215 	stw	fp,8(sp)
    6298:	df000204 	addi	fp,sp,8
    629c:	2005883a 	mov	r2,r4
    62a0:	e17fff15 	stw	r5,-4(fp)
    62a4:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
    62a8:	e037883a 	mov	sp,fp
    62ac:	df000017 	ldw	fp,0(sp)
    62b0:	dec00104 	addi	sp,sp,4
    62b4:	f800283a 	ret

000062b8 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
    62b8:	defffc04 	addi	sp,sp,-16
    62bc:	df000315 	stw	fp,12(sp)
    62c0:	df000304 	addi	fp,sp,12
    62c4:	e13ffd15 	stw	r4,-12(fp)
    62c8:	e17ffe15 	stw	r5,-8(fp)
    62cc:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
    62d0:	e037883a 	mov	sp,fp
    62d4:	df000017 	ldw	fp,0(sp)
    62d8:	dec00104 	addi	sp,sp,4
    62dc:	f800283a 	ret

000062e0 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
    62e0:	defffc04 	addi	sp,sp,-16
    62e4:	df000315 	stw	fp,12(sp)
    62e8:	df000304 	addi	fp,sp,12
    62ec:	e13ffd15 	stw	r4,-12(fp)
    62f0:	e17ffe15 	stw	r5,-8(fp)
    62f4:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
    62f8:	e0bffd17 	ldw	r2,-12(fp)
    62fc:	10800017 	ldw	r2,0(r2)
    6300:	1000021e 	bne	r2,zero,630c <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
    6304:	0005883a 	mov	r2,zero
    6308:	00003306 	br	63d8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    630c:	e0bffd17 	ldw	r2,-12(fp)
    6310:	10800103 	ldbu	r2,4(r2)
    6314:	10803fcc 	andi	r2,r2,255
    6318:	10002426 	beq	r2,zero,63ac <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
    631c:	e0bfff17 	ldw	r2,-4(fp)
    6320:	1080000b 	ldhu	r2,0(r2)
    6324:	10bfffcc 	andi	r2,r2,65535
    6328:	10002026 	beq	r2,zero,63ac <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
    632c:	e0bffd17 	ldw	r2,-12(fp)
    6330:	10800017 	ldw	r2,0(r2)
    6334:	e0fffd17 	ldw	r3,-12(fp)
    6338:	18c00143 	ldbu	r3,5(r3)
    633c:	19003fcc 	andi	r4,r3,255
    6340:	e0fffd17 	ldw	r3,-12(fp)
    6344:	18c00103 	ldbu	r3,4(r3)
    6348:	18c03fcc 	andi	r3,r3,255
    634c:	20c7c83a 	sub	r3,r4,r3
    6350:	10c5883a 	add	r2,r2,r3
    6354:	e0fffe17 	ldw	r3,-8(fp)
    6358:	18c00017 	ldw	r3,0(r3)
    635c:	18c00003 	ldbu	r3,0(r3)
    6360:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
    6364:	e0bffd17 	ldw	r2,-12(fp)
    6368:	10800103 	ldbu	r2,4(r2)
    636c:	10bfffc4 	addi	r2,r2,-1
    6370:	1007883a 	mov	r3,r2
    6374:	e0bffd17 	ldw	r2,-12(fp)
    6378:	10c00105 	stb	r3,4(r2)
    637c:	e0bfff17 	ldw	r2,-4(fp)
    6380:	1080000b 	ldhu	r2,0(r2)
    6384:	10bfffc4 	addi	r2,r2,-1
    6388:	1007883a 	mov	r3,r2
    638c:	e0bfff17 	ldw	r2,-4(fp)
    6390:	10c0000d 	sth	r3,0(r2)
    6394:	e0bffe17 	ldw	r2,-8(fp)
    6398:	10800017 	ldw	r2,0(r2)
    639c:	10c00044 	addi	r3,r2,1
    63a0:	e0bffe17 	ldw	r2,-8(fp)
    63a4:	10c00015 	stw	r3,0(r2)
    63a8:	003fd806 	br	630c <__alt_data_end+0xfc00630c>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
    63ac:	e0bffd17 	ldw	r2,-12(fp)
    63b0:	10800103 	ldbu	r2,4(r2)
    63b4:	10803fcc 	andi	r2,r2,255
    63b8:	10000226 	beq	r2,zero,63c4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
    63bc:	0005883a 	mov	r2,zero
    63c0:	00000506 	br	63d8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
    63c4:	e0bffd17 	ldw	r2,-12(fp)
    63c8:	10c00143 	ldbu	r3,5(r2)
    63cc:	e0bffd17 	ldw	r2,-12(fp)
    63d0:	10c00105 	stb	r3,4(r2)
        return true;
    63d4:	00800044 	movi	r2,1
}
    63d8:	e037883a 	mov	sp,fp
    63dc:	df000017 	ldw	fp,0(sp)
    63e0:	dec00104 	addi	sp,sp,4
    63e4:	f800283a 	ret

000063e8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
    63e8:	defffa04 	addi	sp,sp,-24
    63ec:	dfc00515 	stw	ra,20(sp)
    63f0:	df000415 	stw	fp,16(sp)
    63f4:	df000404 	addi	fp,sp,16
    63f8:	e13ffc15 	stw	r4,-16(fp)
    63fc:	e17ffd15 	stw	r5,-12(fp)
    6400:	e1bffe15 	stw	r6,-8(fp)
    6404:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
    6408:	e0bffc17 	ldw	r2,-16(fp)
    640c:	10800003 	ldbu	r2,0(r2)
    6410:	10803fcc 	andi	r2,r2,255
    6414:	10c00060 	cmpeqi	r3,r2,1
    6418:	1800181e 	bne	r3,zero,647c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
    641c:	10c00088 	cmpgei	r3,r2,2
    6420:	1800021e 	bne	r3,zero,642c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
    6424:	10000626 	beq	r2,zero,6440 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
    6428:	00007e06 	br	6624 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
    642c:	10c000a0 	cmpeqi	r3,r2,2
    6430:	18004a1e 	bne	r3,zero,655c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
    6434:	108000e0 	cmpeqi	r2,r2,3
    6438:	1000571e 	bne	r2,zero,6598 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
    643c:	00007906 	br	6624 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
    6440:	e0bffc17 	ldw	r2,-16(fp)
    6444:	10800417 	ldw	r2,16(r2)
    6448:	e0fffc17 	ldw	r3,-16(fp)
    644c:	18c00303 	ldbu	r3,12(r3)
    6450:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6454:	e0bffc17 	ldw	r2,-16(fp)
    6458:	10c00504 	addi	r3,r2,20
    645c:	e0bffc17 	ldw	r2,-16(fp)
    6460:	10800417 	ldw	r2,16(r2)
    6464:	100b883a 	mov	r5,r2
    6468:	1809883a 	mov	r4,r3
    646c:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
    6470:	e0bffc17 	ldw	r2,-16(fp)
    6474:	00c00044 	movi	r3,1
    6478:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
    647c:	e0bffc17 	ldw	r2,-16(fp)
    6480:	10800504 	addi	r2,r2,20
    6484:	e1bffe17 	ldw	r6,-8(fp)
    6488:	e17ffd17 	ldw	r5,-12(fp)
    648c:	1009883a 	mov	r4,r2
    6490:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    6494:	1080005c 	xori	r2,r2,1
    6498:	10803fcc 	andi	r2,r2,255
    649c:	10000226 	beq	r2,zero,64a8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
    64a0:	0005883a 	mov	r2,zero
    64a4:	00006006 	br	6628 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
    64a8:	e0bffc17 	ldw	r2,-16(fp)
    64ac:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
    64b0:	e0bffc17 	ldw	r2,-16(fp)
    64b4:	10800417 	ldw	r2,16(r2)
    64b8:	10800003 	ldbu	r2,0(r2)
    64bc:	10803fcc 	andi	r2,r2,255
    64c0:	10800130 	cmpltui	r2,r2,4
    64c4:	10000e1e 	bne	r2,zero,6500 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
    64c8:	e0bffc17 	ldw	r2,-16(fp)
    64cc:	10800417 	ldw	r2,16(r2)
    64d0:	10c00043 	ldbu	r3,1(r2)
    64d4:	11000083 	ldbu	r4,2(r2)
    64d8:	2008923a 	slli	r4,r4,8
    64dc:	20c6b03a 	or	r3,r4,r3
    64e0:	110000c3 	ldbu	r4,3(r2)
    64e4:	2008943a 	slli	r4,r4,16
    64e8:	20c6b03a 	or	r3,r4,r3
    64ec:	10800103 	ldbu	r2,4(r2)
    64f0:	1004963a 	slli	r2,r2,24
    64f4:	10c4b03a 	or	r2,r2,r3
    64f8:	10800017 	ldw	r2,0(r2)
    64fc:	00000e06 	br	6538 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
    6500:	e0bffc17 	ldw	r2,-16(fp)
    6504:	10800417 	ldw	r2,16(r2)
    6508:	10c00043 	ldbu	r3,1(r2)
    650c:	11000083 	ldbu	r4,2(r2)
    6510:	2008923a 	slli	r4,r4,8
    6514:	20c6b03a 	or	r3,r4,r3
    6518:	110000c3 	ldbu	r4,3(r2)
    651c:	2008943a 	slli	r4,r4,16
    6520:	20c6b03a 	or	r3,r4,r3
    6524:	10800103 	ldbu	r2,4(r2)
    6528:	1004963a 	slli	r2,r2,24
    652c:	10c4b03a 	or	r2,r2,r3
    6530:	1080000b 	ldhu	r2,0(r2)
    6534:	10bfffcc 	andi	r2,r2,65535
    6538:	e0fffc17 	ldw	r3,-16(fp)
    653c:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
    6540:	e0bffc17 	ldw	r2,-16(fp)
    6544:	10c00117 	ldw	r3,4(r2)
    6548:	e0bffc17 	ldw	r2,-16(fp)
    654c:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
    6550:	e0bffc17 	ldw	r2,-16(fp)
    6554:	00c00084 	movi	r3,2
    6558:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
    655c:	e0bffc17 	ldw	r2,-16(fp)
    6560:	10800417 	ldw	r2,16(r2)
    6564:	e0fffc17 	ldw	r3,-16(fp)
    6568:	18c00343 	ldbu	r3,13(r3)
    656c:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
    6570:	e0bffc17 	ldw	r2,-16(fp)
    6574:	10c00504 	addi	r3,r2,20
    6578:	e0bffc17 	ldw	r2,-16(fp)
    657c:	10800417 	ldw	r2,16(r2)
    6580:	100b883a 	mov	r5,r2
    6584:	1809883a 	mov	r4,r3
    6588:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
    658c:	e0bffc17 	ldw	r2,-16(fp)
    6590:	00c000c4 	movi	r3,3
    6594:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6598:	e0bffc17 	ldw	r2,-16(fp)
    659c:	10800217 	ldw	r2,8(r2)
    65a0:	10001e26 	beq	r2,zero,661c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
    65a4:	e0bffc17 	ldw	r2,-16(fp)
    65a8:	10800504 	addi	r2,r2,20
    65ac:	e1bffe17 	ldw	r6,-8(fp)
    65b0:	e17ffd17 	ldw	r5,-12(fp)
    65b4:	1009883a 	mov	r4,r2
    65b8:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    65bc:	1080005c 	xori	r2,r2,1
    65c0:	10803fcc 	andi	r2,r2,255
    65c4:	10000226 	beq	r2,zero,65d0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
    65c8:	0005883a 	mov	r2,zero
    65cc:	00001606 	br	6628 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
    65d0:	e0bfff17 	ldw	r2,-4(fp)
    65d4:	10000b26 	beq	r2,zero,6604 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
    65d8:	e0bffc17 	ldw	r2,-16(fp)
    65dc:	11000417 	ldw	r4,16(r2)
    65e0:	e0bffc17 	ldw	r2,-16(fp)
    65e4:	10c00117 	ldw	r3,4(r2)
    65e8:	e0bffc17 	ldw	r2,-16(fp)
    65ec:	10800217 	ldw	r2,8(r2)
    65f0:	1887c83a 	sub	r3,r3,r2
    65f4:	e0bfff17 	ldw	r2,-4(fp)
    65f8:	e1800217 	ldw	r6,8(fp)
    65fc:	180b883a 	mov	r5,r3
    6600:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
    6604:	e0bffc17 	ldw	r2,-16(fp)
    6608:	10800217 	ldw	r2,8(r2)
    660c:	10ffffc4 	addi	r3,r2,-1
    6610:	e0bffc17 	ldw	r2,-16(fp)
    6614:	10c00215 	stw	r3,8(r2)
    6618:	003fdf06 	br	6598 <__alt_data_end+0xfc006598>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
    661c:	e0bffc17 	ldw	r2,-16(fp)
    6620:	10000005 	stb	zero,0(r2)
        }
        return true;
    6624:	00800044 	movi	r2,1
}
    6628:	e037883a 	mov	sp,fp
    662c:	dfc00117 	ldw	ra,4(sp)
    6630:	df000017 	ldw	fp,0(sp)
    6634:	dec00204 	addi	sp,sp,8
    6638:	f800283a 	ret

0000663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>:
#include "sgtl5000.h"

// Writes to I2C register
// The SGTL5000 only uses first byte to define register addresses
// so function only takes 1 byte of register data
void I2Creg_wr(ALT_AVALON_I2C_DEV_t *dev, alt_u8 reg, alt_u16 val) {
    663c:	defff904 	addi	sp,sp,-28
    6640:	dfc00615 	stw	ra,24(sp)
    6644:	df000515 	stw	fp,20(sp)
    6648:	df000504 	addi	fp,sp,20
    664c:	e13ffd15 	stw	r4,-12(fp)
    6650:	2807883a 	mov	r3,r5
    6654:	3005883a 	mov	r2,r6
    6658:	e0fffe05 	stb	r3,-8(fp)
    665c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 val1, val2;
	val1 = val >> 8;
    6660:	e0bfff0b 	ldhu	r2,-4(fp)
    6664:	1005d23a 	srai	r2,r2,8
    6668:	e0bffb05 	stb	r2,-20(fp)
	val2 = val;
    666c:	e0bfff0b 	ldhu	r2,-4(fp)
    6670:	e0bffb45 	stb	r2,-19(fp)
	alt_u8 txbuffer[4] = {0x00, reg, val1, val2};
    6674:	e03ffb8d 	sth	zero,-18(fp)
    6678:	e03ffc0d 	sth	zero,-16(fp)
    667c:	e0bffe03 	ldbu	r2,-8(fp)
    6680:	e0bffbc5 	stb	r2,-17(fp)
    6684:	e0bffb03 	ldbu	r2,-20(fp)
    6688:	e0bffc05 	stb	r2,-16(fp)
    668c:	e0bffb43 	ldbu	r2,-19(fp)
    6690:	e0bffc45 	stb	r2,-15(fp)
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 4, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    6694:	e0bffb84 	addi	r2,fp,-18
    6698:	000f883a 	mov	r7,zero
    669c:	01800104 	movi	r6,4
    66a0:	100b883a 	mov	r5,r2
    66a4:	e13ffd17 	ldw	r4,-12(fp)
    66a8:	00208000 	call	20800 <alt_avalon_i2c_master_tx>
    66ac:	1004c03a 	cmpne	r2,r2,zero
    66b0:	10803fcc 	andi	r2,r2,255
    66b4:	10000426 	beq	r2,zero,66c8 <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht+0x8c>
		printf("I2C Register Write Error");
    66b8:	010000b4 	movhi	r4,2
    66bc:	2117fe04 	addi	r4,r4,24568
    66c0:	000edfc0 	call	edfc <printf>
	}
	return;
    66c4:	0001883a 	nop
    66c8:	0001883a 	nop
}
    66cc:	e037883a 	mov	sp,fp
    66d0:	dfc00117 	ldw	ra,4(sp)
    66d4:	df000017 	ldw	fp,0(sp)
    66d8:	dec00204 	addi	sp,sp,8
    66dc:	f800283a 	ret

000066e0 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    66e0:	defff604 	addi	sp,sp,-40
    66e4:	dfc00915 	stw	ra,36(sp)
    66e8:	df000815 	stw	fp,32(sp)
    66ec:	dc000715 	stw	r16,28(sp)
    66f0:	df000804 	addi	fp,sp,32
    66f4:	e13ffb15 	stw	r4,-20(fp)
    66f8:	3009883a 	mov	r4,r6
    66fc:	e1fffe15 	stw	r7,-8(fp)
    6700:	e17ffc05 	stb	r5,-16(fp)
    6704:	e13ffd05 	stb	r4,-12(fp)
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
		printf("I2C Bytes Write Error");
	}
	return (data+nwords);
    6708:	d809883a 	mov	r4,sp
    670c:	2021883a 	mov	r16,r4
	}
	return;
}

alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
    6710:	e13ffd03 	ldbu	r4,-12(fp)
    6714:	21000044 	addi	r4,r4,1
    6718:	2109883a 	add	r4,r4,r4
    671c:	213fffc4 	addi	r4,r4,-1
    6720:	e13ff915 	stw	r4,-28(fp)
    6724:	200b883a 	mov	r5,r4
    6728:	29400044 	addi	r5,r5,1
    672c:	2819883a 	mov	r12,r5
    6730:	001b883a 	mov	r13,zero
    6734:	600ad77a 	srli	r5,r12,29
    6738:	681290fa 	slli	r9,r13,3
    673c:	2a52b03a 	or	r9,r5,r9
    6740:	601090fa 	slli	r8,r12,3
    6744:	200b883a 	mov	r5,r4
    6748:	29400044 	addi	r5,r5,1
    674c:	2815883a 	mov	r10,r5
    6750:	0017883a 	mov	r11,zero
    6754:	500ad77a 	srli	r5,r10,29
    6758:	580690fa 	slli	r3,r11,3
    675c:	28c6b03a 	or	r3,r5,r3
    6760:	500490fa 	slli	r2,r10,3
    6764:	2005883a 	mov	r2,r4
    6768:	10800044 	addi	r2,r2,1
    676c:	108000c4 	addi	r2,r2,3
    6770:	1004d0ba 	srli	r2,r2,2
    6774:	1085883a 	add	r2,r2,r2
    6778:	1085883a 	add	r2,r2,r2
    677c:	d8b7c83a 	sub	sp,sp,r2
    6780:	d805883a 	mov	r2,sp
    6784:	1005883a 	mov	r2,r2
    6788:	e0bffa15 	stw	r2,-24(fp)
	txbuffer[0] = 0;
    678c:	e0bffa17 	ldw	r2,-24(fp)
    6790:	10000005 	stb	zero,0(r2)
	txbuffer[1] = reg;
    6794:	e0bffa17 	ldw	r2,-24(fp)
    6798:	e0fffc03 	ldbu	r3,-16(fp)
    679c:	10c00045 	stb	r3,1(r2)
	int i = 0;
    67a0:	e03ff815 	stw	zero,-32(fp)
	for (i = 0;i < nwords;i++) {
    67a4:	e03ff815 	stw	zero,-32(fp)
    67a8:	e0bffd03 	ldbu	r2,-12(fp)
    67ac:	e0fff817 	ldw	r3,-32(fp)
    67b0:	18801e0e 	bge	r3,r2,682c <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x14c>
		txbuffer[i+2] = data[i] >> 8;
    67b4:	e0bff817 	ldw	r2,-32(fp)
    67b8:	10c00084 	addi	r3,r2,2
    67bc:	e0bff817 	ldw	r2,-32(fp)
    67c0:	1085883a 	add	r2,r2,r2
    67c4:	1009883a 	mov	r4,r2
    67c8:	e0bffe17 	ldw	r2,-8(fp)
    67cc:	1105883a 	add	r2,r2,r4
    67d0:	1080000b 	ldhu	r2,0(r2)
    67d4:	10bfffcc 	andi	r2,r2,65535
    67d8:	1005d23a 	srai	r2,r2,8
    67dc:	1009883a 	mov	r4,r2
    67e0:	e0bffa17 	ldw	r2,-24(fp)
    67e4:	10c5883a 	add	r2,r2,r3
    67e8:	11000005 	stb	r4,0(r2)
		txbuffer[i+3] = data[i];
    67ec:	e0bff817 	ldw	r2,-32(fp)
    67f0:	10c000c4 	addi	r3,r2,3
    67f4:	e0bff817 	ldw	r2,-32(fp)
    67f8:	1085883a 	add	r2,r2,r2
    67fc:	1009883a 	mov	r4,r2
    6800:	e0bffe17 	ldw	r2,-8(fp)
    6804:	1105883a 	add	r2,r2,r4
    6808:	1080000b 	ldhu	r2,0(r2)
    680c:	1009883a 	mov	r4,r2
    6810:	e0bffa17 	ldw	r2,-24(fp)
    6814:	10c5883a 	add	r2,r2,r3
    6818:	11000005 	stb	r4,0(r2)
alt_u16* I2Cbytes_wr(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2*nwords+2];
	txbuffer[0] = 0;
	txbuffer[1] = reg;
	int i = 0;
	for (i = 0;i < nwords;i++) {
    681c:	e0bff817 	ldw	r2,-32(fp)
    6820:	10800044 	addi	r2,r2,1
    6824:	e0bff815 	stw	r2,-32(fp)
    6828:	003fdf06 	br	67a8 <__alt_data_end+0xfc0067a8>
		txbuffer[i+2] = data[i] >> 8;
		txbuffer[i+3] = data[i];
	}
	if(alt_avalon_i2c_master_tx(dev, txbuffer, 2*nwords+2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    682c:	e0fffa17 	ldw	r3,-24(fp)
    6830:	e0bffd03 	ldbu	r2,-12(fp)
    6834:	10800044 	addi	r2,r2,1
    6838:	1085883a 	add	r2,r2,r2
    683c:	000f883a 	mov	r7,zero
    6840:	100d883a 	mov	r6,r2
    6844:	180b883a 	mov	r5,r3
    6848:	e13ffb17 	ldw	r4,-20(fp)
    684c:	00208000 	call	20800 <alt_avalon_i2c_master_tx>
    6850:	1004c03a 	cmpne	r2,r2,zero
    6854:	10803fcc 	andi	r2,r2,255
    6858:	10000326 	beq	r2,zero,6868 <_Z11I2Cbytes_wrP20ALT_AVALON_I2C_DEV_shhPt+0x188>
		printf("I2C Bytes Write Error");
    685c:	010000b4 	movhi	r4,2
    6860:	21180504 	addi	r4,r4,24596
    6864:	000edfc0 	call	edfc <printf>
	}
	return (data+nwords);
    6868:	e0bffd03 	ldbu	r2,-12(fp)
    686c:	1085883a 	add	r2,r2,r2
    6870:	1007883a 	mov	r3,r2
    6874:	e0bffe17 	ldw	r2,-8(fp)
    6878:	10c5883a 	add	r2,r2,r3
    687c:	8037883a 	mov	sp,r16
}
    6880:	e6ffff04 	addi	sp,fp,-4
    6884:	dfc00217 	ldw	ra,8(sp)
    6888:	df000117 	ldw	fp,4(sp)
    688c:	dc000017 	ldw	r16,0(sp)
    6890:	dec00304 	addi	sp,sp,12
    6894:	f800283a 	ret

00006898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>:

alt_u16 I2Creg_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg) {
    6898:	defff804 	addi	sp,sp,-32
    689c:	dfc00715 	stw	ra,28(sp)
    68a0:	df000615 	stw	fp,24(sp)
    68a4:	df000604 	addi	fp,sp,24
    68a8:	e13ffe15 	stw	r4,-8(fp)
    68ac:	2805883a 	mov	r2,r5
    68b0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 txbuffer[2] = {0x00, reg};
    68b4:	e03ffc8d 	sth	zero,-14(fp)
    68b8:	e0bfff03 	ldbu	r2,-4(fp)
    68bc:	e0bffcc5 	stb	r2,-13(fp)
	alt_u8 rxbuffer[2] = {0x00, 0x00};
    68c0:	e03ffd05 	stb	zero,-12(fp)
    68c4:	e03ffd45 	stb	zero,-11(fp)
	alt_u16 rx;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS){
    68c8:	e13ffd04 	addi	r4,fp,-12
    68cc:	e0fffc84 	addi	r3,fp,-14
    68d0:	d8000115 	stw	zero,4(sp)
    68d4:	00800084 	movi	r2,2
    68d8:	d8800015 	stw	r2,0(sp)
    68dc:	200f883a 	mov	r7,r4
    68e0:	01800084 	movi	r6,2
    68e4:	180b883a 	mov	r5,r3
    68e8:	e13ffe17 	ldw	r4,-8(fp)
    68ec:	0020a240 	call	20a24 <alt_avalon_i2c_master_tx_rx>
    68f0:	1004c03a 	cmpne	r2,r2,zero
    68f4:	10803fcc 	andi	r2,r2,255
    68f8:	10000326 	beq	r2,zero,6908 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh+0x70>
		printf("I2C Register Read Error");
    68fc:	010000b4 	movhi	r4,2
    6900:	21180b04 	addi	r4,r4,24620
    6904:	000edfc0 	call	edfc <printf>
	}
	rx = rxbuffer[0] << 8 | rxbuffer[1];
    6908:	e0bffd03 	ldbu	r2,-12(fp)
    690c:	10803fcc 	andi	r2,r2,255
    6910:	1004923a 	slli	r2,r2,8
    6914:	1007883a 	mov	r3,r2
    6918:	e0bffd43 	ldbu	r2,-11(fp)
    691c:	10803fcc 	andi	r2,r2,255
    6920:	1884b03a 	or	r2,r3,r2
    6924:	e0bffc0d 	sth	r2,-16(fp)
	return rx;
    6928:	e0bffc0b 	ldhu	r2,-16(fp)
}
    692c:	e037883a 	mov	sp,fp
    6930:	dfc00117 	ldw	ra,4(sp)
    6934:	df000017 	ldw	fp,0(sp)
    6938:	dec00204 	addi	sp,sp,8
    693c:	f800283a 	ret

00006940 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt>:

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
    6940:	defff304 	addi	sp,sp,-52
    6944:	dfc00c15 	stw	ra,48(sp)
    6948:	df000b15 	stw	fp,44(sp)
    694c:	dc000a15 	stw	r16,40(sp)
    6950:	df000b04 	addi	fp,sp,44
    6954:	e13ffb15 	stw	r4,-20(fp)
    6958:	3009883a 	mov	r4,r6
    695c:	e1fffe15 	stw	r7,-8(fp)
    6960:	e17ffc05 	stb	r5,-16(fp)
    6964:	e13ffd05 	stb	r4,-12(fp)
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6968:	d809883a 	mov	r4,sp
    696c:	2021883a 	mov	r16,r4
	rx = rxbuffer[0] << 8 | rxbuffer[1];
	return rx;
}

alt_u16* I2Cbytes_rd(ALT_AVALON_I2C_DEV_t* dev, alt_u8 reg, alt_u8 nwords, alt_u16* data) {
	alt_u8 txbuffer[2] = {0x00, reg};
    6970:	e03ffa0d 	sth	zero,-24(fp)
    6974:	e13ffc03 	ldbu	r4,-16(fp)
    6978:	e13ffa45 	stb	r4,-23(fp)
	alt_u8 rxbuffer[nwords*2];
    697c:	e13ffd03 	ldbu	r4,-12(fp)
    6980:	2109883a 	add	r4,r4,r4
    6984:	213fffc4 	addi	r4,r4,-1
    6988:	e13ff815 	stw	r4,-32(fp)
    698c:	200b883a 	mov	r5,r4
    6990:	29400044 	addi	r5,r5,1
    6994:	2819883a 	mov	r12,r5
    6998:	001b883a 	mov	r13,zero
    699c:	600ad77a 	srli	r5,r12,29
    69a0:	681290fa 	slli	r9,r13,3
    69a4:	2a52b03a 	or	r9,r5,r9
    69a8:	601090fa 	slli	r8,r12,3
    69ac:	200b883a 	mov	r5,r4
    69b0:	29400044 	addi	r5,r5,1
    69b4:	2815883a 	mov	r10,r5
    69b8:	0017883a 	mov	r11,zero
    69bc:	500ad77a 	srli	r5,r10,29
    69c0:	580690fa 	slli	r3,r11,3
    69c4:	28c6b03a 	or	r3,r5,r3
    69c8:	500490fa 	slli	r2,r10,3
    69cc:	2005883a 	mov	r2,r4
    69d0:	10800044 	addi	r2,r2,1
    69d4:	108000c4 	addi	r2,r2,3
    69d8:	1004d0ba 	srli	r2,r2,2
    69dc:	1085883a 	add	r2,r2,r2
    69e0:	1085883a 	add	r2,r2,r2
    69e4:	d8b7c83a 	sub	sp,sp,r2
    69e8:	d8800204 	addi	r2,sp,8
    69ec:	1005883a 	mov	r2,r2
    69f0:	e0bff915 	stw	r2,-28(fp)
	int i = 0;
    69f4:	e03ff715 	stw	zero,-36(fp)
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
    69f8:	e0fff917 	ldw	r3,-28(fp)
    69fc:	e0bffd03 	ldbu	r2,-12(fp)
    6a00:	1085883a 	add	r2,r2,r2
    6a04:	1009883a 	mov	r4,r2
    6a08:	e0bffa04 	addi	r2,fp,-24
    6a0c:	d8000115 	stw	zero,4(sp)
    6a10:	d9000015 	stw	r4,0(sp)
    6a14:	180f883a 	mov	r7,r3
    6a18:	01800084 	movi	r6,2
    6a1c:	100b883a 	mov	r5,r2
    6a20:	e13ffb17 	ldw	r4,-20(fp)
    6a24:	0020a240 	call	20a24 <alt_avalon_i2c_master_tx_rx>
    6a28:	1004c03a 	cmpne	r2,r2,zero
    6a2c:	10803fcc 	andi	r2,r2,255
    6a30:	10000326 	beq	r2,zero,6a40 <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x100>
		printf("I2C Bytes Read Error");
    6a34:	010000b4 	movhi	r4,2
    6a38:	21181104 	addi	r4,r4,24644
    6a3c:	000edfc0 	call	edfc <printf>
	}
	for(i = 0; i < nwords; i++) {
    6a40:	e03ff715 	stw	zero,-36(fp)
    6a44:	e0bffd03 	ldbu	r2,-12(fp)
    6a48:	e0fff717 	ldw	r3,-36(fp)
    6a4c:	18801b0e 	bge	r3,r2,6abc <_Z11I2Cbytes_rdP20ALT_AVALON_I2C_DEV_shhPt+0x17c>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
    6a50:	e0bff717 	ldw	r2,-36(fp)
    6a54:	1085883a 	add	r2,r2,r2
    6a58:	1007883a 	mov	r3,r2
    6a5c:	e0bffe17 	ldw	r2,-8(fp)
    6a60:	10c7883a 	add	r3,r2,r3
    6a64:	e0bff717 	ldw	r2,-36(fp)
    6a68:	1085883a 	add	r2,r2,r2
    6a6c:	1009883a 	mov	r4,r2
    6a70:	e0bff917 	ldw	r2,-28(fp)
    6a74:	1105883a 	add	r2,r2,r4
    6a78:	10800003 	ldbu	r2,0(r2)
    6a7c:	10803fcc 	andi	r2,r2,255
    6a80:	1004923a 	slli	r2,r2,8
    6a84:	100b883a 	mov	r5,r2
    6a88:	e0bff717 	ldw	r2,-36(fp)
    6a8c:	1085883a 	add	r2,r2,r2
    6a90:	10800044 	addi	r2,r2,1
    6a94:	e13ff917 	ldw	r4,-28(fp)
    6a98:	2085883a 	add	r2,r4,r2
    6a9c:	10800003 	ldbu	r2,0(r2)
    6aa0:	10803fcc 	andi	r2,r2,255
    6aa4:	2884b03a 	or	r2,r5,r2
    6aa8:	1880000d 	sth	r2,0(r3)
	alt_u8 rxbuffer[nwords*2];
	int i = 0;
	if(alt_avalon_i2c_master_tx_rx(dev, txbuffer, 2, rxbuffer, 2*nwords, ALT_AVALON_I2C_NO_INTERRUPTS) != ALT_AVALON_I2C_SUCCESS) {
		printf("I2C Bytes Read Error");
	}
	for(i = 0; i < nwords; i++) {
    6aac:	e0bff717 	ldw	r2,-36(fp)
    6ab0:	10800044 	addi	r2,r2,1
    6ab4:	e0bff715 	stw	r2,-36(fp)
    6ab8:	003fe206 	br	6a44 <__alt_data_end+0xfc006a44>
		data[i] = rxbuffer[2*i] << 8 | rxbuffer[2*i + 1];
	}
	return (data+nwords);
    6abc:	e0bffd03 	ldbu	r2,-12(fp)
    6ac0:	1085883a 	add	r2,r2,r2
    6ac4:	1007883a 	mov	r3,r2
    6ac8:	e0bffe17 	ldw	r2,-8(fp)
    6acc:	10c5883a 	add	r2,r2,r3
    6ad0:	8037883a 	mov	sp,r16
}
    6ad4:	e6ffff04 	addi	sp,fp,-4
    6ad8:	dfc00217 	ldw	ra,8(sp)
    6adc:	df000117 	ldw	fp,4(sp)
    6ae0:	dc000017 	ldw	r16,0(sp)
    6ae4:	dec00304 	addi	sp,sp,12
    6ae8:	f800283a 	ret

00006aec <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000init(ALT_AVALON_I2C_DEV_t* dev) {
    6aec:	defffd04 	addi	sp,sp,-12
    6af0:	dfc00215 	stw	ra,8(sp)
    6af4:	df000115 	stw	fp,4(sp)
    6af8:	df000104 	addi	fp,sp,4
    6afc:	e13fff15 	stw	r4,-4(fp)

	//Sets address of SGTL5000 which is 0x0A
	alt_avalon_i2c_master_target_set(dev, SGTL5000_ADDR);
    6b00:	01400284 	movi	r5,10
    6b04:	e13fff17 	ldw	r4,-4(fp)
    6b08:	00205f80 	call	205f8 <alt_avalon_i2c_master_target_set>
			DAC_MONO |	// Name in doc is mono, but enables stereo mode
			VAG_POWERUP |
			REFTOP_POWERUP |
			HEADPHONE_POWERUP |
			DAC_POWERUP_ANA |
			CAPLESS_HEADPHONE_POWERUP);
    6b0c:	01902f04 	movi	r6,16572
    6b10:	01400c04 	movi	r5,48
    6b14:	e13fff17 	ldw	r4,-4(fp)
    6b18:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, REF_CTRL, VAG_VAL_9);
    6b1c:	01801384 	movi	r6,78
    6b20:	01400a04 	movi	r5,40
    6b24:	e13fff17 	ldw	r4,-4(fp)
    6b28:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DIG_POWER,
			DAC_POWERUP_DIG |
			I2S_IN_POWERUP);
    6b2c:	01800844 	movi	r6,33
    6b30:	01400084 	movi	r5,2
    6b34:	e13fff17 	ldw	r4,-4(fp)
    6b38:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, CLK_CTRL, SYS_FS_441);
    6b3c:	01800104 	movi	r6,4
    6b40:	01400104 	movi	r5,4
    6b44:	e13fff17 	ldw	r4,-4(fp)
    6b48:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, I2S_CTRL, DLEN_32);
    6b4c:	000d883a 	mov	r6,zero
    6b50:	01400184 	movi	r5,6
    6b54:	e13fff17 	ldw	r4,-4(fp)
    6b58:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, SSS_CTRL, DAC_SELECT_I2S_IN);
    6b5c:	01800404 	movi	r6,16
    6b60:	01400284 	movi	r5,10
    6b64:	e13fff17 	ldw	r4,-4(fp)
    6b68:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6b6c:	0001883a 	nop
    6b70:	e037883a 	mov	sp,fp
    6b74:	dfc00117 	ldw	ra,4(sp)
    6b78:	df000017 	ldw	fp,0(sp)
    6b7c:	dec00204 	addi	sp,sp,8
    6b80:	f800283a 	ret

00006b84 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000audio_on(ALT_AVALON_I2C_DEV_t* dev) {
    6b84:	defffd04 	addi	sp,sp,-12
    6b88:	dfc00215 	stw	ra,8(sp)
    6b8c:	df000115 	stw	fp,4(sp)
    6b90:	df000104 	addi	fp,sp,4
    6b94:	e13fff15 	stw	r4,-4(fp)

	//Unmute audio
	I2Creg_wr(dev, ANA_HP_CTRL, (HP_VOL_INIT << 8) | HP_VOL_INIT);
    6b98:	01901004 	movi	r6,16448
    6b9c:	01400884 	movi	r5,34
    6ba0:	e13fff17 	ldw	r4,-4(fp)
    6ba4:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, DAC_VOL, (DAC_VOL_INIT << 8) | DAC_VOL_INIT);
    6ba8:	019c1c04 	movi	r6,28784
    6bac:	01400404 	movi	r5,16
    6bb0:	e13fff17 	ldw	r4,-4(fp)
    6bb4:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ADCDAC_CTRL,
			VOL_RAMP_EN |
			!DAC_MUTE_RIGHT |
			!DAC_MUTE_LEFT);
    6bb8:	01808004 	movi	r6,512
    6bbc:	01400384 	movi	r5,14
    6bc0:	e13fff17 	ldw	r4,-4(fp)
    6bc4:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
	I2Creg_wr(dev, ANA_CTRL,
			MUTE_LO |
			!MUTE_HP |
			MUTE_ADC);
    6bc8:	01804044 	movi	r6,257
    6bcc:	01400904 	movi	r5,36
    6bd0:	e13fff17 	ldw	r4,-4(fp)
    6bd4:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>

}
    6bd8:	0001883a 	nop
    6bdc:	e037883a 	mov	sp,fp
    6be0:	dfc00117 	ldw	ra,4(sp)
    6be4:	df000017 	ldw	fp,0(sp)
    6be8:	dec00204 	addi	sp,sp,8
    6bec:	f800283a 	ret

00006bf0 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000status(ALT_AVALON_I2C_DEV_t* dev) {
    6bf0:	defffd04 	addi	sp,sp,-12
    6bf4:	dfc00215 	stw	ra,8(sp)
    6bf8:	df000115 	stw	fp,4(sp)
    6bfc:	df000104 	addi	fp,sp,4
    6c00:	e13fff15 	stw	r4,-4(fp)
	printf("ID:		%X\n", I2Creg_rd(dev, ID));
    6c04:	000b883a 	mov	r5,zero
    6c08:	e13fff17 	ldw	r4,-4(fp)
    6c0c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c10:	10bfffcc 	andi	r2,r2,65535
    6c14:	100b883a 	mov	r5,r2
    6c18:	010000b4 	movhi	r4,2
    6c1c:	21181704 	addi	r4,r4,24668
    6c20:	000edfc0 	call	edfc <printf>
	printf("DIG_POWER:  	%X\n", I2Creg_rd(dev, DIG_POWER));
    6c24:	01400084 	movi	r5,2
    6c28:	e13fff17 	ldw	r4,-4(fp)
    6c2c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c30:	10bfffcc 	andi	r2,r2,65535
    6c34:	100b883a 	mov	r5,r2
    6c38:	010000b4 	movhi	r4,2
    6c3c:	21181a04 	addi	r4,r4,24680
    6c40:	000edfc0 	call	edfc <printf>
	printf("CLK_CTRL:   	%X\n", I2Creg_rd(dev, CLK_CTRL));
    6c44:	01400104 	movi	r5,4
    6c48:	e13fff17 	ldw	r4,-4(fp)
    6c4c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c50:	10bfffcc 	andi	r2,r2,65535
    6c54:	100b883a 	mov	r5,r2
    6c58:	010000b4 	movhi	r4,2
    6c5c:	21181f04 	addi	r4,r4,24700
    6c60:	000edfc0 	call	edfc <printf>
	printf("I2S_CTRL:   	%X\n", I2Creg_rd(dev, I2S_CTRL));
    6c64:	01400184 	movi	r5,6
    6c68:	e13fff17 	ldw	r4,-4(fp)
    6c6c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c70:	10bfffcc 	andi	r2,r2,65535
    6c74:	100b883a 	mov	r5,r2
    6c78:	010000b4 	movhi	r4,2
    6c7c:	21182404 	addi	r4,r4,24720
    6c80:	000edfc0 	call	edfc <printf>
	printf("SSS_CTRL:   	%X\n", I2Creg_rd(dev, SSS_CTRL));
    6c84:	01400284 	movi	r5,10
    6c88:	e13fff17 	ldw	r4,-4(fp)
    6c8c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6c90:	10bfffcc 	andi	r2,r2,65535
    6c94:	100b883a 	mov	r5,r2
    6c98:	010000b4 	movhi	r4,2
    6c9c:	21182904 	addi	r4,r4,24740
    6ca0:	000edfc0 	call	edfc <printf>
	printf("ANA_POWER:  	%X\n", I2Creg_rd(dev, ANA_POWER));
    6ca4:	01400c04 	movi	r5,48
    6ca8:	e13fff17 	ldw	r4,-4(fp)
    6cac:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cb0:	10bfffcc 	andi	r2,r2,65535
    6cb4:	100b883a 	mov	r5,r2
    6cb8:	010000b4 	movhi	r4,2
    6cbc:	21182e04 	addi	r4,r4,24760
    6cc0:	000edfc0 	call	edfc <printf>
	printf("ADCDAC_CTRL:	%X\n", I2Creg_rd(dev, ADCDAC_CTRL));
    6cc4:	01400384 	movi	r5,14
    6cc8:	e13fff17 	ldw	r4,-4(fp)
    6ccc:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cd0:	10bfffcc 	andi	r2,r2,65535
    6cd4:	100b883a 	mov	r5,r2
    6cd8:	010000b4 	movhi	r4,2
    6cdc:	21183304 	addi	r4,r4,24780
    6ce0:	000edfc0 	call	edfc <printf>
	printf("ANA_CTRL:   	%X\n", I2Creg_rd(dev, ANA_CTRL));
    6ce4:	01400904 	movi	r5,36
    6ce8:	e13fff17 	ldw	r4,-4(fp)
    6cec:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6cf0:	10bfffcc 	andi	r2,r2,65535
    6cf4:	100b883a 	mov	r5,r2
    6cf8:	010000b4 	movhi	r4,2
    6cfc:	21183804 	addi	r4,r4,24800
    6d00:	000edfc0 	call	edfc <printf>
	printf("ANA_TEST1:  	%X\n", I2Creg_rd(dev, ANA_TEST1));
    6d04:	01400e04 	movi	r5,56
    6d08:	e13fff17 	ldw	r4,-4(fp)
    6d0c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d10:	10bfffcc 	andi	r2,r2,65535
    6d14:	100b883a 	mov	r5,r2
    6d18:	010000b4 	movhi	r4,2
    6d1c:	21183d04 	addi	r4,r4,24820
    6d20:	000edfc0 	call	edfc <printf>
	printf("ANA_ADC_CTRL:	%X\n", I2Creg_rd(dev, ANA_ADC_CTRL));
    6d24:	01400804 	movi	r5,32
    6d28:	e13fff17 	ldw	r4,-4(fp)
    6d2c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d30:	10bfffcc 	andi	r2,r2,65535
    6d34:	100b883a 	mov	r5,r2
    6d38:	010000b4 	movhi	r4,2
    6d3c:	21184204 	addi	r4,r4,24840
    6d40:	000edfc0 	call	edfc <printf>
	printf("DAC_VOL:    	%X\n", I2Creg_rd(dev, DAC_VOL));
    6d44:	01400404 	movi	r5,16
    6d48:	e13fff17 	ldw	r4,-4(fp)
    6d4c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d50:	10bfffcc 	andi	r2,r2,65535
    6d54:	100b883a 	mov	r5,r2
    6d58:	010000b4 	movhi	r4,2
    6d5c:	21184704 	addi	r4,r4,24860
    6d60:	000edfc0 	call	edfc <printf>
	printf("ANA_HP_CTRL:	%X\n", I2Creg_rd(dev, ANA_HP_CTRL));
    6d64:	01400884 	movi	r5,34
    6d68:	e13fff17 	ldw	r4,-4(fp)
    6d6c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6d70:	10bfffcc 	andi	r2,r2,65535
    6d74:	100b883a 	mov	r5,r2
    6d78:	010000b4 	movhi	r4,2
    6d7c:	21184c04 	addi	r4,r4,24880
    6d80:	000edfc0 	call	edfc <printf>
}
    6d84:	0001883a 	nop
    6d88:	e037883a 	mov	sp,fp
    6d8c:	dfc00117 	ldw	ra,4(sp)
    6d90:	df000017 	ldw	fp,0(sp)
    6d94:	dec00204 	addi	sp,sp,8
    6d98:	f800283a 	ret

00006d9c <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>:

void SGTL5000vol_up(ALT_AVALON_I2C_DEV_t* dev) {
    6d9c:	defffc04 	addi	sp,sp,-16
    6da0:	dfc00315 	stw	ra,12(sp)
    6da4:	df000215 	stw	fp,8(sp)
    6da8:	df000204 	addi	fp,sp,8
    6dac:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6db0:	01400404 	movi	r5,16
    6db4:	e13fff17 	ldw	r4,-4(fp)
    6db8:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6dbc:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6dc0:	e03ffe0d 	sth	zero,-8(fp)
	printf("Current:	%X\n", current_vol);
    6dc4:	e0bffe8b 	ldhu	r2,-6(fp)
    6dc8:	100b883a 	mov	r5,r2
    6dcc:	010000b4 	movhi	r4,2
    6dd0:	21185104 	addi	r4,r4,24900
    6dd4:	000edfc0 	call	edfc <printf>
	printf("Sum:		%X\n", (current_vol >> 8) + DAC_VOL_STEP);
    6dd8:	e0bffe8b 	ldhu	r2,-6(fp)
    6ddc:	1005d23a 	srai	r2,r2,8
    6de0:	10800084 	addi	r2,r2,2
    6de4:	100b883a 	mov	r5,r2
    6de8:	010000b4 	movhi	r4,2
    6dec:	21185504 	addi	r4,r4,24916
    6df0:	000edfc0 	call	edfc <printf>
	printf("Max:		%X\n", DAC_MAX_VOL);
    6df4:	01400f04 	movi	r5,60
    6df8:	010000b4 	movhi	r4,2
    6dfc:	21185804 	addi	r4,r4,24928
    6e00:	000edfc0 	call	edfc <printf>
	if (DAC_MAX_VOL >= ((current_vol >> 8) - DAC_VOL_STEP)) new_vol = (DAC_MAX_VOL << 8) | DAC_MAX_VOL;
    6e04:	e0bffe8b 	ldhu	r2,-6(fp)
    6e08:	1005d23a 	srai	r2,r2,8
    6e0c:	10bfff84 	addi	r2,r2,-2
    6e10:	10800f48 	cmpgei	r2,r2,61
    6e14:	1000031e 	bne	r2,zero,6e24 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x88>
    6e18:	008f0f04 	movi	r2,15420
    6e1c:	e0bffe0d 	sth	r2,-8(fp)
    6e20:	00000306 	br	6e30 <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s+0x94>
	else new_vol = current_vol - ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6e24:	e0bffe8b 	ldhu	r2,-6(fp)
    6e28:	10bf7f84 	addi	r2,r2,-514
    6e2c:	e0bffe0d 	sth	r2,-8(fp)
	printf("New:		%X\n", new_vol);
    6e30:	e0bffe0b 	ldhu	r2,-8(fp)
    6e34:	100b883a 	mov	r5,r2
    6e38:	010000b4 	movhi	r4,2
    6e3c:	21185b04 	addi	r4,r4,24940
    6e40:	000edfc0 	call	edfc <printf>
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6e44:	e0bffe0b 	ldhu	r2,-8(fp)
    6e48:	100d883a 	mov	r6,r2
    6e4c:	01400404 	movi	r5,16
    6e50:	e13fff17 	ldw	r4,-4(fp)
    6e54:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6e58:	0001883a 	nop
    6e5c:	e037883a 	mov	sp,fp
    6e60:	dfc00117 	ldw	ra,4(sp)
    6e64:	df000017 	ldw	fp,0(sp)
    6e68:	dec00204 	addi	sp,sp,8
    6e6c:	f800283a 	ret

00006e70 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>:


void SGTL5000vol_down(ALT_AVALON_I2C_DEV_t* dev) {
    6e70:	defffc04 	addi	sp,sp,-16
    6e74:	dfc00315 	stw	ra,12(sp)
    6e78:	df000215 	stw	fp,8(sp)
    6e7c:	df000204 	addi	fp,sp,8
    6e80:	e13fff15 	stw	r4,-4(fp)
	alt_u16 current_vol = I2Creg_rd(dev, DAC_VOL);
    6e84:	01400404 	movi	r5,16
    6e88:	e13fff17 	ldw	r4,-4(fp)
    6e8c:	00068980 	call	6898 <_Z9I2Creg_rdP20ALT_AVALON_I2C_DEV_sh>
    6e90:	e0bffe8d 	sth	r2,-6(fp)
	alt_u16 new_vol = 0;
    6e94:	e03ffe0d 	sth	zero,-8(fp)
	if (DAC_MIN_VOL <= ((current_vol >> 8) + DAC_VOL_STEP)) new_vol = (DAC_MIN_VOL << 8) | DAC_MIN_VOL;
    6e98:	e0bffe8b 	ldhu	r2,-6(fp)
    6e9c:	1005d23a 	srai	r2,r2,8
    6ea0:	10800084 	addi	r2,r2,2
    6ea4:	10803c10 	cmplti	r2,r2,240
    6ea8:	1000031e 	bne	r2,zero,6eb8 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x48>
    6eac:	00bc3c04 	movi	r2,-3856
    6eb0:	e0bffe0d 	sth	r2,-8(fp)
    6eb4:	00000306 	br	6ec4 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s+0x54>
	else new_vol = current_vol + ((DAC_VOL_STEP << 8) | DAC_VOL_STEP);
    6eb8:	e0bffe8b 	ldhu	r2,-6(fp)
    6ebc:	10808084 	addi	r2,r2,514
    6ec0:	e0bffe0d 	sth	r2,-8(fp)
	I2Creg_wr(dev, DAC_VOL, new_vol);
    6ec4:	e0bffe0b 	ldhu	r2,-8(fp)
    6ec8:	100d883a 	mov	r6,r2
    6ecc:	01400404 	movi	r5,16
    6ed0:	e13fff17 	ldw	r4,-4(fp)
    6ed4:	000663c0 	call	663c <_Z9I2Creg_wrP20ALT_AVALON_I2C_DEV_sht>
}
    6ed8:	0001883a 	nop
    6edc:	e037883a 	mov	sp,fp
    6ee0:	dfc00117 	ldw	ra,4(sp)
    6ee4:	df000017 	ldw	fp,0(sp)
    6ee8:	dec00204 	addi	sp,sp,8
    6eec:	f800283a 	ret

00006ef0 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
    6ef0:	defffb04 	addi	sp,sp,-20
    6ef4:	dfc00415 	stw	ra,16(sp)
    6ef8:	df000315 	stw	fp,12(sp)
    6efc:	df000304 	addi	fp,sp,12
    6f00:	e13ffe15 	stw	r4,-8(fp)
    6f04:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
    6f08:	e0bffe17 	ldw	r2,-8(fp)
    6f0c:	1009883a 	mov	r4,r2
    6f10:	0004b600 	call	4b60 <_ZN15USBDeviceConfigC1Ev>
    6f14:	e0bffe17 	ldw	r2,-8(fp)
    6f18:	10800104 	addi	r2,r2,4
    6f1c:	1009883a 	mov	r4,r2
    6f20:	0008df80 	call	8df8 <_ZN21UsbMidiConfigXtracterC1Ev>
    6f24:	008000b4 	movhi	r2,2
    6f28:	10986804 	addi	r2,r2,24992
    6f2c:	e0fffe17 	ldw	r3,-8(fp)
    6f30:	18800015 	stw	r2,0(r3)
    6f34:	008000b4 	movhi	r2,2
    6f38:	10987404 	addi	r2,r2,25040
    6f3c:	e0fffe17 	ldw	r3,-8(fp)
    6f40:	18800115 	stw	r2,4(r3)
    6f44:	e0bffe17 	ldw	r2,-8(fp)
    6f48:	e0ffff17 	ldw	r3,-4(fp)
    6f4c:	10c00215 	stw	r3,8(r2)
    6f50:	e0bffe17 	ldw	r2,-8(fp)
    6f54:	10000305 	stb	zero,12(r2)
    6f58:	e0bffe17 	ldw	r2,-8(fp)
    6f5c:	10000345 	stb	zero,13(r2)
    6f60:	e0bffe17 	ldw	r2,-8(fp)
    6f64:	10001705 	stb	zero,92(r2)
    6f68:	e0bffe17 	ldw	r2,-8(fp)
    6f6c:	10001815 	stw	zero,96(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    6f70:	e03ffd05 	stb	zero,-12(fp)
    6f74:	e0bffd03 	ldbu	r2,-12(fp)
    6f78:	108000e8 	cmpgeui	r2,r2,3
    6f7c:	10002d1e 	bne	r2,zero,7034 <_ZN9USBH_MIDIC1EP3USB+0x144>
                epInfo[i].epAddr      = 0;
    6f80:	e0fffd03 	ldbu	r3,-12(fp)
    6f84:	e13ffe17 	ldw	r4,-8(fp)
    6f88:	1805883a 	mov	r2,r3
    6f8c:	1085883a 	add	r2,r2,r2
    6f90:	10c5883a 	add	r2,r2,r3
    6f94:	2085883a 	add	r2,r4,r2
    6f98:	108004c4 	addi	r2,r2,19
    6f9c:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
    6fa0:	e13ffd03 	ldbu	r4,-12(fp)
    6fa4:	e0bffd03 	ldbu	r2,-12(fp)
    6fa8:	10000226 	beq	r2,zero,6fb4 <_ZN9USBH_MIDIC1EP3USB+0xc4>
    6fac:	0007883a 	mov	r3,zero
    6fb0:	00000106 	br	6fb8 <_ZN9USBH_MIDIC1EP3USB+0xc8>
    6fb4:	00c00204 	movi	r3,8
    6fb8:	e17ffe17 	ldw	r5,-8(fp)
    6fbc:	2005883a 	mov	r2,r4
    6fc0:	1085883a 	add	r2,r2,r2
    6fc4:	1105883a 	add	r2,r2,r4
    6fc8:	2885883a 	add	r2,r5,r2
    6fcc:	10800504 	addi	r2,r2,20
    6fd0:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
    6fd4:	e13ffd03 	ldbu	r4,-12(fp)
    6fd8:	e0bffd03 	ldbu	r2,-12(fp)
    6fdc:	10000226 	beq	r2,zero,6fe8 <_ZN9USBH_MIDIC1EP3USB+0xf8>
    6fe0:	00c00044 	movi	r3,1
    6fe4:	00000106 	br	6fec <_ZN9USBH_MIDIC1EP3USB+0xfc>
    6fe8:	00c003c4 	movi	r3,15
    6fec:	e17ffe17 	ldw	r5,-8(fp)
    6ff0:	2005883a 	mov	r2,r4
    6ff4:	1085883a 	add	r2,r2,r2
    6ff8:	1105883a 	add	r2,r2,r4
    6ffc:	2885883a 	add	r2,r5,r2
    7000:	10800404 	addi	r2,r2,16
    7004:	18c7883a 	add	r3,r3,r3
    7008:	18cb883a 	add	r5,r3,r3
    700c:	10c00143 	ldbu	r3,5(r2)
    7010:	18c000cc 	andi	r3,r3,3
    7014:	1809883a 	mov	r4,r3
    7018:	2807883a 	mov	r3,r5
    701c:	20c6b03a 	or	r3,r4,r3
    7020:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
    7024:	e0bffd03 	ldbu	r2,-12(fp)
    7028:	10800044 	addi	r2,r2,1
    702c:	e0bffd05 	stb	r2,-12(fp)
    7030:	003fd006 	br	6f74 <__alt_data_end+0xfc006f74>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
    7034:	e0bffe17 	ldw	r2,-8(fp)
    7038:	10800217 	ldw	r2,8(r2)
    703c:	10000626 	beq	r2,zero,7058 <_ZN9USBH_MIDIC1EP3USB+0x168>
                pUsb->RegisterDeviceClass(this);
    7040:	e0bffe17 	ldw	r2,-8(fp)
    7044:	10800217 	ldw	r2,8(r2)
    7048:	e0fffe17 	ldw	r3,-8(fp)
    704c:	180b883a 	mov	r5,r3
    7050:	1009883a 	mov	r4,r2
    7054:	00049140 	call	4914 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
    7058:	0001883a 	nop
    705c:	e037883a 	mov	sp,fp
    7060:	dfc00117 	ldw	ra,4(sp)
    7064:	df000017 	ldw	fp,0(sp)
    7068:	dec00204 	addi	sp,sp,8
    706c:	f800283a 	ret

00007070 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
    7070:	deffe004 	addi	sp,sp,-128
    7074:	dfc01f15 	stw	ra,124(sp)
    7078:	df001e15 	stw	fp,120(sp)
    707c:	df001e04 	addi	fp,sp,120
    7080:	e13ffc15 	stw	r4,-16(fp)
    7084:	2809883a 	mov	r4,r5
    7088:	3007883a 	mov	r3,r6
    708c:	3805883a 	mov	r2,r7
    7090:	e13ffd05 	stb	r4,-12(fp)
    7094:	e0fffe05 	stb	r3,-8(fp)
    7098:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
    709c:	e0bfe944 	addi	r2,fp,-91
    70a0:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
    70a4:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
    70a8:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
    70ac:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
    70b0:	00800044 	movi	r2,1
    70b4:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    70b8:	00800044 	movi	r2,1
    70bc:	e0bfe3c5 	stb	r2,-113(fp)
    70c0:	e0bfe3c3 	ldbu	r2,-113(fp)
    70c4:	108000e8 	cmpgeui	r2,r2,3
    70c8:	10001a1e 	bne	r2,zero,7134 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
    70cc:	e0ffe3c3 	ldbu	r3,-113(fp)
    70d0:	e13ffc17 	ldw	r4,-16(fp)
    70d4:	1805883a 	mov	r2,r3
    70d8:	1085883a 	add	r2,r2,r2
    70dc:	10c5883a 	add	r2,r2,r3
    70e0:	2085883a 	add	r2,r4,r2
    70e4:	10800404 	addi	r2,r2,16
    70e8:	11000143 	ldbu	r4,5(r2)
    70ec:	00ffff84 	movi	r3,-2
    70f0:	20c6703a 	and	r3,r4,r3
    70f4:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
    70f8:	e0ffe3c3 	ldbu	r3,-113(fp)
    70fc:	e13ffc17 	ldw	r4,-16(fp)
    7100:	1805883a 	mov	r2,r3
    7104:	1085883a 	add	r2,r2,r2
    7108:	10c5883a 	add	r2,r2,r3
    710c:	2085883a 	add	r2,r4,r2
    7110:	10800404 	addi	r2,r2,16
    7114:	11000143 	ldbu	r4,5(r2)
    7118:	00ffff44 	movi	r3,-3
    711c:	20c6703a 	and	r3,r4,r3
    7120:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
    7124:	e0bfe3c3 	ldbu	r2,-113(fp)
    7128:	10800044 	addi	r2,r2,1
    712c:	e0bfe3c5 	stb	r2,-113(fp)
    7130:	003fe306 	br	70c0 <__alt_data_end+0xfc0070c0>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
    7134:	e0bffc17 	ldw	r2,-16(fp)
    7138:	10800217 	ldw	r2,8(r2)
    713c:	1009883a 	mov	r4,r2
    7140:	00028f00 	call	28f0 <_ZN3USB14GetAddressPoolEv>
    7144:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
    7148:	e0bffc17 	ldw	r2,-16(fp)
    714c:	10800303 	ldbu	r2,12(r2)
    7150:	10803fcc 	andi	r2,r2,255
    7154:	10000226 	beq	r2,zero,7160 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
    7158:	00bff644 	movi	r2,-39
    715c:	0001c706 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
    7160:	e0bfe817 	ldw	r2,-96(fp)
    7164:	10800017 	ldw	r2,0(r2)
    7168:	10800017 	ldw	r2,0(r2)
    716c:	e0fffc17 	ldw	r3,-16(fp)
    7170:	18c00303 	ldbu	r3,12(r3)
    7174:	18c03fcc 	andi	r3,r3,255
    7178:	180b883a 	mov	r5,r3
    717c:	e13fe817 	ldw	r4,-96(fp)
    7180:	103ee83a 	callr	r2
    7184:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7188:	e0bfe617 	ldw	r2,-104(fp)
    718c:	1000021e 	bne	r2,zero,7198 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7190:	00bff584 	movi	r2,-42
    7194:	0001b906 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
    7198:	e0bfe617 	ldw	r2,-104(fp)
    719c:	10c00003 	ldbu	r3,0(r2)
    71a0:	11000043 	ldbu	r4,1(r2)
    71a4:	2008923a 	slli	r4,r4,8
    71a8:	20c6b03a 	or	r3,r4,r3
    71ac:	11000083 	ldbu	r4,2(r2)
    71b0:	2008943a 	slli	r4,r4,16
    71b4:	20c6b03a 	or	r3,r4,r3
    71b8:	108000c3 	ldbu	r2,3(r2)
    71bc:	1004963a 	slli	r2,r2,24
    71c0:	10c4b03a 	or	r2,r2,r3
    71c4:	1000021e 	bne	r2,zero,71d0 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
    71c8:	00bff5c4 	movi	r2,-41
    71cc:	0001ab06 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
    71d0:	e0bfe617 	ldw	r2,-104(fp)
    71d4:	10c00003 	ldbu	r3,0(r2)
    71d8:	11000043 	ldbu	r4,1(r2)
    71dc:	2008923a 	slli	r4,r4,8
    71e0:	20c6b03a 	or	r3,r4,r3
    71e4:	11000083 	ldbu	r4,2(r2)
    71e8:	2008943a 	slli	r4,r4,16
    71ec:	20c6b03a 	or	r3,r4,r3
    71f0:	108000c3 	ldbu	r2,3(r2)
    71f4:	1004963a 	slli	r2,r2,24
    71f8:	10c4b03a 	or	r2,r2,r3
    71fc:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
    7200:	e0bffc17 	ldw	r2,-16(fp)
    7204:	10c004c4 	addi	r3,r2,19
    7208:	e0bfe617 	ldw	r2,-104(fp)
    720c:	19803fcc 	andi	r6,r3,255
    7210:	11000003 	ldbu	r4,0(r2)
    7214:	2008703a 	and	r4,r4,zero
    7218:	200b883a 	mov	r5,r4
    721c:	3009883a 	mov	r4,r6
    7220:	2908b03a 	or	r4,r5,r4
    7224:	11000005 	stb	r4,0(r2)
    7228:	1808d23a 	srli	r4,r3,8
    722c:	21803fcc 	andi	r6,r4,255
    7230:	11000043 	ldbu	r4,1(r2)
    7234:	2008703a 	and	r4,r4,zero
    7238:	200b883a 	mov	r5,r4
    723c:	3009883a 	mov	r4,r6
    7240:	2908b03a 	or	r4,r5,r4
    7244:	11000045 	stb	r4,1(r2)
    7248:	1808d43a 	srli	r4,r3,16
    724c:	21803fcc 	andi	r6,r4,255
    7250:	11000083 	ldbu	r4,2(r2)
    7254:	2008703a 	and	r4,r4,zero
    7258:	200b883a 	mov	r5,r4
    725c:	3009883a 	mov	r4,r6
    7260:	2908b03a 	or	r4,r5,r4
    7264:	11000085 	stb	r4,2(r2)
    7268:	180ad63a 	srli	r5,r3,24
    726c:	10c000c3 	ldbu	r3,3(r2)
    7270:	1806703a 	and	r3,r3,zero
    7274:	1809883a 	mov	r4,r3
    7278:	2807883a 	mov	r3,r5
    727c:	20c6b03a 	or	r3,r4,r3
    7280:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
    7284:	e0bfe617 	ldw	r2,-104(fp)
    7288:	e0ffff03 	ldbu	r3,-4(fp)
    728c:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
    7290:	e0bffc17 	ldw	r2,-16(fp)
    7294:	10c00217 	ldw	r3,8(r2)
    7298:	e0bfe944 	addi	r2,fp,-91
    729c:	d8800015 	stw	r2,0(sp)
    72a0:	01c00204 	movi	r7,8
    72a4:	000d883a 	mov	r6,zero
    72a8:	000b883a 	mov	r5,zero
    72ac:	1809883a 	mov	r4,r3
    72b0:	000251c0 	call	251c <_ZN3USB11getDevDescrEhhtPh>
    72b4:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
    72b8:	e0bfe617 	ldw	r2,-104(fp)
    72bc:	e0ffe717 	ldw	r3,-100(fp)
    72c0:	19403fcc 	andi	r5,r3,255
    72c4:	10c00003 	ldbu	r3,0(r2)
    72c8:	1806703a 	and	r3,r3,zero
    72cc:	1809883a 	mov	r4,r3
    72d0:	2807883a 	mov	r3,r5
    72d4:	20c6b03a 	or	r3,r4,r3
    72d8:	10c00005 	stb	r3,0(r2)
    72dc:	e0ffe717 	ldw	r3,-100(fp)
    72e0:	1806d23a 	srli	r3,r3,8
    72e4:	19403fcc 	andi	r5,r3,255
    72e8:	10c00043 	ldbu	r3,1(r2)
    72ec:	1806703a 	and	r3,r3,zero
    72f0:	1809883a 	mov	r4,r3
    72f4:	2807883a 	mov	r3,r5
    72f8:	20c6b03a 	or	r3,r4,r3
    72fc:	10c00045 	stb	r3,1(r2)
    7300:	e0ffe717 	ldw	r3,-100(fp)
    7304:	1806d43a 	srli	r3,r3,16
    7308:	19403fcc 	andi	r5,r3,255
    730c:	10c00083 	ldbu	r3,2(r2)
    7310:	1806703a 	and	r3,r3,zero
    7314:	1809883a 	mov	r4,r3
    7318:	2807883a 	mov	r3,r5
    731c:	20c6b03a 	or	r3,r4,r3
    7320:	10c00085 	stb	r3,2(r2)
    7324:	e0ffe717 	ldw	r3,-100(fp)
    7328:	180ad63a 	srli	r5,r3,24
    732c:	10c000c3 	ldbu	r3,3(r2)
    7330:	1806703a 	and	r3,r3,zero
    7334:	1809883a 	mov	r4,r3
    7338:	2807883a 	mov	r3,r5
    733c:	20c6b03a 	or	r3,r4,r3
    7340:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
    7344:	e0bfe303 	ldbu	r2,-116(fp)
    7348:	10013a1e 	bne	r2,zero,7834 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
    734c:	e0bfe817 	ldw	r2,-96(fp)
    7350:	10800017 	ldw	r2,0(r2)
    7354:	10800104 	addi	r2,r2,4
    7358:	10800017 	ldw	r2,0(r2)
    735c:	e0fffd03 	ldbu	r3,-12(fp)
    7360:	e13ffe03 	ldbu	r4,-8(fp)
    7364:	200f883a 	mov	r7,r4
    7368:	000d883a 	mov	r6,zero
    736c:	180b883a 	mov	r5,r3
    7370:	e13fe817 	ldw	r4,-96(fp)
    7374:	103ee83a 	callr	r2
    7378:	1007883a 	mov	r3,r2
    737c:	e0bffc17 	ldw	r2,-16(fp)
    7380:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
    7384:	e0bffc17 	ldw	r2,-16(fp)
    7388:	10800303 	ldbu	r2,12(r2)
    738c:	10803fcc 	andi	r2,r2,255
    7390:	1000021e 	bne	r2,zero,739c <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
    7394:	00bff504 	movi	r2,-44
    7398:	00013806 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
    739c:	e0bfe517 	ldw	r2,-108(fp)
    73a0:	10c001c3 	ldbu	r3,7(r2)
    73a4:	e0bffc17 	ldw	r2,-16(fp)
    73a8:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
    73ac:	e0bffc17 	ldw	r2,-16(fp)
    73b0:	10c00217 	ldw	r3,8(r2)
    73b4:	e0bffc17 	ldw	r2,-16(fp)
    73b8:	10800303 	ldbu	r2,12(r2)
    73bc:	10803fcc 	andi	r2,r2,255
    73c0:	100f883a 	mov	r7,r2
    73c4:	000d883a 	mov	r6,zero
    73c8:	000b883a 	mov	r5,zero
    73cc:	1809883a 	mov	r4,r3
    73d0:	00027d80 	call	27d8 <_ZN3USB7setAddrEhhh>
    73d4:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    73d8:	e0bfe303 	ldbu	r2,-116(fp)
    73dc:	10001026 	beq	r2,zero,7420 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
    73e0:	e0bfe617 	ldw	r2,-104(fp)
    73e4:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
    73e8:	e0bfe817 	ldw	r2,-96(fp)
    73ec:	10800017 	ldw	r2,0(r2)
    73f0:	10800204 	addi	r2,r2,8
    73f4:	10800017 	ldw	r2,0(r2)
    73f8:	e0fffc17 	ldw	r3,-16(fp)
    73fc:	18c00303 	ldbu	r3,12(r3)
    7400:	18c03fcc 	andi	r3,r3,255
    7404:	180b883a 	mov	r5,r3
    7408:	e13fe817 	ldw	r4,-96(fp)
    740c:	103ee83a 	callr	r2
                bAddress = 0;
    7410:	e0bffc17 	ldw	r2,-16(fp)
    7414:	10000305 	stb	zero,12(r2)
                return rcode;
    7418:	e0bfe303 	ldbu	r2,-116(fp)
    741c:	00011706 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
    7420:	e0bffc17 	ldw	r2,-16(fp)
    7424:	10800303 	ldbu	r2,12(r2)
    7428:	10803fcc 	andi	r2,r2,255
    742c:	01402004 	movi	r5,128
    7430:	1009883a 	mov	r4,r2
    7434:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
    7438:	e0bfe617 	ldw	r2,-104(fp)
    743c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
    7440:	e0bfe817 	ldw	r2,-96(fp)
    7444:	10800017 	ldw	r2,0(r2)
    7448:	10800017 	ldw	r2,0(r2)
    744c:	e0fffc17 	ldw	r3,-16(fp)
    7450:	18c00303 	ldbu	r3,12(r3)
    7454:	18c03fcc 	andi	r3,r3,255
    7458:	180b883a 	mov	r5,r3
    745c:	e13fe817 	ldw	r4,-96(fp)
    7460:	103ee83a 	callr	r2
    7464:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
    7468:	e0bfe617 	ldw	r2,-104(fp)
    746c:	1000021e 	bne	r2,zero,7478 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
    7470:	00bff584 	movi	r2,-42
    7474:	00010106 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
    7478:	e0bfe617 	ldw	r2,-104(fp)
    747c:	e0ffff03 	ldbu	r3,-4(fp)
    7480:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
    7484:	e0bffc17 	ldw	r2,-16(fp)
    7488:	10c00217 	ldw	r3,8(r2)
    748c:	e0bffc17 	ldw	r2,-16(fp)
    7490:	10800303 	ldbu	r2,12(r2)
    7494:	11003fcc 	andi	r4,r2,255
    7498:	00800484 	movi	r2,18
    749c:	117fffcc 	andi	r5,r2,65535
    74a0:	e0bfe944 	addi	r2,fp,-91
    74a4:	d8800015 	stw	r2,0(sp)
    74a8:	280f883a 	mov	r7,r5
    74ac:	000d883a 	mov	r6,zero
    74b0:	200b883a 	mov	r5,r4
    74b4:	1809883a 	mov	r4,r3
    74b8:	000251c0 	call	251c <_ZN3USB11getDevDescrEhhtPh>
    74bc:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
    74c0:	e0bfe303 	ldbu	r2,-116(fp)
    74c4:	1000dd1e 	bne	r2,zero,783c <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
    74c8:	e0bfe517 	ldw	r2,-108(fp)
    74cc:	10c00203 	ldbu	r3,8(r2)
    74d0:	10800243 	ldbu	r2,9(r2)
    74d4:	1004923a 	slli	r2,r2,8
    74d8:	10c4b03a 	or	r2,r2,r3
    74dc:	1007883a 	mov	r3,r2
    74e0:	e0bffc17 	ldw	r2,-16(fp)
    74e4:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
    74e8:	e0bfe517 	ldw	r2,-108(fp)
    74ec:	10c00283 	ldbu	r3,10(r2)
    74f0:	108002c3 	ldbu	r2,11(r2)
    74f4:	1004923a 	slli	r2,r2,8
    74f8:	10c4b03a 	or	r2,r2,r3
    74fc:	1007883a 	mov	r3,r2
    7500:	e0bffc17 	ldw	r2,-16(fp)
    7504:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
    7508:	e0bfe517 	ldw	r2,-108(fp)
    750c:	10800443 	ldbu	r2,17(r2)
    7510:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
    7514:	e0bffc17 	ldw	r2,-16(fp)
    7518:	10c00217 	ldw	r3,8(r2)
    751c:	e0bffc17 	ldw	r2,-16(fp)
    7520:	10800303 	ldbu	r2,12(r2)
    7524:	11003fcc 	andi	r4,r2,255
    7528:	e0bffc17 	ldw	r2,-16(fp)
    752c:	108004c4 	addi	r2,r2,19
    7530:	100f883a 	mov	r7,r2
    7534:	01800044 	movi	r6,1
    7538:	200b883a 	mov	r5,r4
    753c:	1809883a 	mov	r4,r3
    7540:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7544:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
    7548:	e0bfe303 	ldbu	r2,-116(fp)
    754c:	1000bd1e 	bne	r2,zero,7844 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
    7550:	e0bffc17 	ldw	r2,-16(fp)
    7554:	1080040b 	ldhu	r2,16(r2)
    7558:	10bfffcc 	andi	r2,r2,65535
    755c:	01402004 	movi	r5,128
    7560:	1009883a 	mov	r4,r2
    7564:	0008e2c0 	call	8e2c <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
    7568:	e0bffc17 	ldw	r2,-16(fp)
    756c:	1080038b 	ldhu	r2,14(r2)
    7570:	10bfffcc 	andi	r2,r2,65535
    7574:	01402004 	movi	r5,128
    7578:	1009883a 	mov	r4,r2
    757c:	0008e2c0 	call	8e2c <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
    7580:	e0bfe903 	ldbu	r2,-92(fp)
    7584:	01402004 	movi	r5,128
    7588:	1009883a 	mov	r4,r2
    758c:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
    7590:	e0bffc17 	ldw	r2,-16(fp)
    7594:	00c000c4 	movi	r3,3
    7598:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
    759c:	e13ffc17 	ldw	r4,-16(fp)
    75a0:	00079080 	call	7908 <_ZN9USBH_MIDI19setupDeviceSpecificEv>

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    75a4:	e03fe405 	stb	zero,-112(fp)
    75a8:	e0ffe403 	ldbu	r3,-112(fp)
    75ac:	e0bfe903 	ldbu	r2,-92(fp)
    75b0:	18802a2e 	bgeu	r3,r2,765c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
    75b4:	e0bffc17 	ldw	r2,-16(fp)
    75b8:	10c00104 	addi	r3,r2,4
    75bc:	e0bfee04 	addi	r2,fp,-72
    75c0:	01800044 	movi	r6,1
    75c4:	180b883a 	mov	r5,r3
    75c8:	1009883a 	mov	r4,r2
    75cc:	00084080 	call	8408 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    75d0:	e0bffc17 	ldw	r2,-16(fp)
    75d4:	10c00217 	ldw	r3,8(r2)
    75d8:	e0bffc17 	ldw	r2,-16(fp)
    75dc:	10800303 	ldbu	r2,12(r2)
    75e0:	11003fcc 	andi	r4,r2,255
    75e4:	e17fe403 	ldbu	r5,-112(fp)
    75e8:	e0bfee04 	addi	r2,fp,-72
    75ec:	d8800015 	stw	r2,0(sp)
    75f0:	280f883a 	mov	r7,r5
    75f4:	000d883a 	mov	r6,zero
    75f8:	200b883a 	mov	r5,r4
    75fc:	1809883a 	mov	r4,r3
    7600:	00026380 	call	2638 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    7604:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
    7608:	e0bfe303 	ldbu	r2,-116(fp)
    760c:	10008f1e 	bne	r2,zero,784c <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
    7610:	e0bfee04 	addi	r2,fp,-72
    7614:	1009883a 	mov	r4,r2
    7618:	0008d140 	call	8d14 <_ZN14MidiDescParser9getNumEPsEv>
    761c:	1007883a 	mov	r3,r2
    7620:	e0bfe383 	ldbu	r2,-114(fp)
    7624:	10c5883a 	add	r2,r2,r3
    7628:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
    762c:	e0bfe383 	ldbu	r2,-114(fp)
    7630:	108000b0 	cmpltui	r2,r2,2
    7634:	1000051e 	bne	r2,zero,764c <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
    7638:	e0bfee04 	addi	r2,fp,-72
    763c:	1009883a 	mov	r4,r2
    7640:	0008cec0 	call	8cec <_ZN14MidiDescParser12getConfValueEv>
    7644:	e0bfe345 	stb	r2,-115(fp)
    7648:	00000406 	br	765c <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();

        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
    764c:	e0bfe403 	ldbu	r2,-112(fp)
    7650:	10800044 	addi	r2,r2,1
    7654:	e0bfe405 	stb	r2,-112(fp)
    7658:	003fd306 	br	75a8 <__alt_data_end+0xfc0075a8>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
    765c:	e0bfe383 	ldbu	r2,-114(fp)
    7660:	01402004 	movi	r5,128
    7664:	1009883a 	mov	r4,r2
    7668:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
    766c:	e0bfe383 	ldbu	r2,-114(fp)
    7670:	10800058 	cmpnei	r2,r2,1
    7674:	1000321e 	bne	r2,zero,7740 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7678:	e03fe445 	stb	zero,-111(fp)
    767c:	e0ffe443 	ldbu	r3,-111(fp)
    7680:	e0bfe903 	ldbu	r2,-92(fp)
    7684:	18802a2e 	bgeu	r3,r2,7730 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
    7688:	e0bffc17 	ldw	r2,-16(fp)
    768c:	10c00104 	addi	r3,r2,4
    7690:	e0bfee04 	addi	r2,fp,-72
    7694:	000d883a 	mov	r6,zero
    7698:	180b883a 	mov	r5,r3
    769c:	1009883a 	mov	r4,r2
    76a0:	00084080 	call	8408 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
    76a4:	e0bffc17 	ldw	r2,-16(fp)
    76a8:	10c00217 	ldw	r3,8(r2)
    76ac:	e0bffc17 	ldw	r2,-16(fp)
    76b0:	10800303 	ldbu	r2,12(r2)
    76b4:	11003fcc 	andi	r4,r2,255
    76b8:	e17fe443 	ldbu	r5,-111(fp)
    76bc:	e0bfee04 	addi	r2,fp,-72
    76c0:	d8800015 	stw	r2,0(sp)
    76c4:	280f883a 	mov	r7,r5
    76c8:	000d883a 	mov	r6,zero
    76cc:	200b883a 	mov	r5,r4
    76d0:	1809883a 	mov	r4,r3
    76d4:	00026380 	call	2638 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
    76d8:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
    76dc:	e0bfe303 	ldbu	r2,-116(fp)
    76e0:	10005c1e 	bne	r2,zero,7854 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
    76e4:	e0bfee04 	addi	r2,fp,-72
    76e8:	1009883a 	mov	r4,r2
    76ec:	0008d140 	call	8d14 <_ZN14MidiDescParser9getNumEPsEv>
    76f0:	1007883a 	mov	r3,r2
    76f4:	e0bfe383 	ldbu	r2,-114(fp)
    76f8:	10c5883a 	add	r2,r2,r3
    76fc:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
    7700:	e0bfe383 	ldbu	r2,-114(fp)
    7704:	108000b0 	cmpltui	r2,r2,2
    7708:	1000051e 	bne	r2,zero,7720 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
    770c:	e0bfee04 	addi	r2,fp,-72
    7710:	1009883a 	mov	r4,r2
    7714:	0008cec0 	call	8cec <_ZN14MidiDescParser12getConfValueEv>
    7718:	e0bfe345 	stb	r2,-115(fp)
    771c:	00000406 	br	7730 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
    7720:	e0bfe443 	ldbu	r2,-111(fp)
    7724:	10800044 	addi	r2,r2,1
    7728:	e0bfe445 	stb	r2,-111(fp)
    772c:	003fd306 	br	767c <__alt_data_end+0xfc00767c>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
    7730:	e0bfe383 	ldbu	r2,-114(fp)
    7734:	01402004 	movi	r5,128
    7738:	1009883a 	mov	r4,r2
    773c:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
    7740:	e0bfe383 	ldbu	r2,-114(fp)
    7744:	108000a8 	cmpgeui	r2,r2,2
    7748:	1000031e 	bne	r2,zero,7758 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
    774c:	00bfffc4 	movi	r2,-1
    7750:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
    7754:	00004206 	br	7860 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
    7758:	e0bffc17 	ldw	r2,-16(fp)
    775c:	10c00217 	ldw	r3,8(r2)
    7760:	e0bffc17 	ldw	r2,-16(fp)
    7764:	10800303 	ldbu	r2,12(r2)
    7768:	11003fcc 	andi	r4,r2,255
    776c:	e0bffc17 	ldw	r2,-16(fp)
    7770:	108004c4 	addi	r2,r2,19
    7774:	100f883a 	mov	r7,r2
    7778:	018000c4 	movi	r6,3
    777c:	200b883a 	mov	r5,r4
    7780:	1809883a 	mov	r4,r3
    7784:	00008f40 	call	8f4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    7788:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
    778c:	e0bfe343 	ldbu	r2,-115(fp)
    7790:	01402004 	movi	r5,128
    7794:	1009883a 	mov	r4,r2
    7798:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
    779c:	e0bffc17 	ldw	r2,-16(fp)
    77a0:	10800583 	ldbu	r2,22(r2)
    77a4:	10bfe004 	addi	r2,r2,-128
    77a8:	10803fcc 	andi	r2,r2,255
    77ac:	01402004 	movi	r5,128
    77b0:	1009883a 	mov	r4,r2
    77b4:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
    77b8:	e0bffc17 	ldw	r2,-16(fp)
    77bc:	10800643 	ldbu	r2,25(r2)
    77c0:	10803fcc 	andi	r2,r2,255
    77c4:	01402004 	movi	r5,128
    77c8:	1009883a 	mov	r4,r2
    77cc:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
    77d0:	e0bffc17 	ldw	r2,-16(fp)
    77d4:	10c00217 	ldw	r3,8(r2)
    77d8:	e0bffc17 	ldw	r2,-16(fp)
    77dc:	10800303 	ldbu	r2,12(r2)
    77e0:	10803fcc 	andi	r2,r2,255
    77e4:	e13fe343 	ldbu	r4,-115(fp)
    77e8:	200f883a 	mov	r7,r4
    77ec:	000d883a 	mov	r6,zero
    77f0:	100b883a 	mov	r5,r2
    77f4:	1809883a 	mov	r4,r3
    77f8:	000286c0 	call	286c <_ZN3USB7setConfEhhh>
    77fc:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
    7800:	e0bfe303 	ldbu	r2,-116(fp)
    7804:	1000151e 	bne	r2,zero,785c <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        if(pFuncOnInit)
    7808:	e0bffc17 	ldw	r2,-16(fp)
    780c:	10801817 	ldw	r2,96(r2)
    7810:	10000326 	beq	r2,zero,7820 <_ZN9USBH_MIDI4InitEhhb+0x7b0>
                pFuncOnInit(); // Call the user function
    7814:	e0bffc17 	ldw	r2,-16(fp)
    7818:	10801817 	ldw	r2,96(r2)
    781c:	103ee83a 	callr	r2

        bPollEnable = true;
    7820:	e0bffc17 	ldw	r2,-16(fp)
    7824:	00c00044 	movi	r3,1
    7828:	10c00345 	stb	r3,13(r2)
        USBTRACE("Init done.\r\n");
        return 0;
    782c:	0005883a 	mov	r2,zero
    7830:	00001206 	br	787c <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
    7834:	0001883a 	nop
    7838:	00000906 	br	7860 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
    783c:	0001883a 	nop
    7840:	00000706 	br	7860 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
    7844:	0001883a 	nop
    7848:	00000506 	br	7860 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
    784c:	0001883a 	nop
    7850:	00000306 	br	7860 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
    7854:	0001883a 	nop
    7858:	00000106 	br	7860 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
    785c:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
    7860:	e0bffc17 	ldw	r2,-16(fp)
    7864:	10800017 	ldw	r2,0(r2)
    7868:	10800204 	addi	r2,r2,8
    786c:	10800017 	ldw	r2,0(r2)
    7870:	e13ffc17 	ldw	r4,-16(fp)
    7874:	103ee83a 	callr	r2
        return rcode;
    7878:	e0bfe303 	ldbu	r2,-116(fp)
}
    787c:	e037883a 	mov	sp,fp
    7880:	dfc00117 	ldw	ra,4(sp)
    7884:	df000017 	ldw	fp,0(sp)
    7888:	dec00204 	addi	sp,sp,8
    788c:	f800283a 	ret

00007890 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
    7890:	defffd04 	addi	sp,sp,-12
    7894:	dfc00215 	stw	ra,8(sp)
    7898:	df000115 	stw	fp,4(sp)
    789c:	df000104 	addi	fp,sp,4
    78a0:	e13fff15 	stw	r4,-4(fp)
        pUsb->GetAddressPool().FreeAddress(bAddress);
    78a4:	e0bfff17 	ldw	r2,-4(fp)
    78a8:	10800217 	ldw	r2,8(r2)
    78ac:	1009883a 	mov	r4,r2
    78b0:	00028f00 	call	28f0 <_ZN3USB14GetAddressPoolEv>
    78b4:	1009883a 	mov	r4,r2
    78b8:	20800017 	ldw	r2,0(r4)
    78bc:	10800204 	addi	r2,r2,8
    78c0:	10800017 	ldw	r2,0(r2)
    78c4:	e0ffff17 	ldw	r3,-4(fp)
    78c8:	18c00303 	ldbu	r3,12(r3)
    78cc:	18c03fcc 	andi	r3,r3,255
    78d0:	180b883a 	mov	r5,r3
    78d4:	103ee83a 	callr	r2
        bAddress     = 0;
    78d8:	e0bfff17 	ldw	r2,-4(fp)
    78dc:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
    78e0:	e0bfff17 	ldw	r2,-4(fp)
    78e4:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
    78e8:	e0bfff17 	ldw	r2,-4(fp)
    78ec:	10001705 	stb	zero,92(r2)
        return 0;
    78f0:	0005883a 	mov	r2,zero
}
    78f4:	e037883a 	mov	sp,fp
    78f8:	dfc00117 	ldw	ra,4(sp)
    78fc:	df000017 	ldw	fp,0(sp)
    7900:	dec00204 	addi	sp,sp,8
    7904:	f800283a 	ret

00007908 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
    7908:	defffe04 	addi	sp,sp,-8
    790c:	df000115 	stw	fp,4(sp)
    7910:	df000104 	addi	fp,sp,4
    7914:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
    7918:	e0bfff17 	ldw	r2,-4(fp)
    791c:	1080040b 	ldhu	r2,16(r2)
    7920:	10bfffcc 	andi	r2,r2,65535
    7924:	10848d58 	cmpnei	r2,r2,4661
    7928:	1000351e 	bne	r2,zero,7a00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                // LaunchPad and LaunchKey endpoint attribute is interrupt
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
    792c:	e0bfff17 	ldw	r2,-4(fp)
    7930:	1080038b 	ldhu	r2,14(r2)
    7934:	10bfffcc 	andi	r2,r2,65535
    7938:	10800820 	cmpeqi	r2,r2,32
    793c:	10000f1e 	bne	r2,zero,797c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7940:	e0bfff17 	ldw	r2,-4(fp)
    7944:	1080038b 	ldhu	r2,14(r2)
    7948:	10bfffcc 	andi	r2,r2,65535
    794c:	10800da0 	cmpeqi	r2,r2,54
    7950:	10000a1e 	bne	r2,zero,797c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7954:	e0bfff17 	ldw	r2,-4(fp)
    7958:	1080038b 	ldhu	r2,14(r2)
    795c:	10bfffcc 	andi	r2,r2,65535
    7960:	10801460 	cmpeqi	r2,r2,81
    7964:	1000051e 	bne	r2,zero,797c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
    7968:	e0bfff17 	ldw	r2,-4(fp)
    796c:	1080038b 	ldhu	r2,14(r2)
    7970:	10bfffcc 	andi	r2,r2,65535
    7974:	10801a58 	cmpnei	r2,r2,105
    7978:	1000041e 	bne	r2,zero,798c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
    797c:	e0bfff17 	ldw	r2,-4(fp)
    7980:	00c00084 	movi	r3,2
    7984:	10c00485 	stb	r3,18(r2)
                        return;
    7988:	00001d06 	br	7a00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2
                if( ( 0x30 <= pid && pid <= 0x32) || pid == 0x35 || ( 0x7B <= pid && pid <= 0x7D) ) {
    798c:	e0bfff17 	ldw	r2,-4(fp)
    7990:	1080038b 	ldhu	r2,14(r2)
    7994:	10bfffcc 	andi	r2,r2,65535
    7998:	10800c30 	cmpltui	r2,r2,48
    799c:	1000051e 	bne	r2,zero,79b4 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
    79a0:	e0bfff17 	ldw	r2,-4(fp)
    79a4:	1080038b 	ldhu	r2,14(r2)
    79a8:	10bfffcc 	andi	r2,r2,65535
    79ac:	10800cf0 	cmpltui	r2,r2,51
    79b0:	10000f1e 	bne	r2,zero,79f0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    79b4:	e0bfff17 	ldw	r2,-4(fp)
    79b8:	1080038b 	ldhu	r2,14(r2)
    79bc:	10bfffcc 	andi	r2,r2,65535
    79c0:	10800d60 	cmpeqi	r2,r2,53
    79c4:	10000a1e 	bne	r2,zero,79f0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
    79c8:	e0bfff17 	ldw	r2,-4(fp)
    79cc:	1080038b 	ldhu	r2,14(r2)
    79d0:	10bfffcc 	andi	r2,r2,65535
    79d4:	10801ef0 	cmpltui	r2,r2,123
    79d8:	1000091e 	bne	r2,zero,7a00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
    79dc:	e0bfff17 	ldw	r2,-4(fp)
    79e0:	1080038b 	ldhu	r2,14(r2)
    79e4:	10bfffcc 	andi	r2,r2,65535
    79e8:	10801fa8 	cmpgeui	r2,r2,126
    79ec:	1000041e 	bne	r2,zero,7a00 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xf8>
                        bTransferTypeMask = 2;
    79f0:	e0bfff17 	ldw	r2,-4(fp)
    79f4:	00c00084 	movi	r3,2
    79f8:	10c00485 	stb	r3,18(r2)
                        return;
    79fc:	0001883a 	nop
                }
        }
}
    7a00:	e037883a 	mov	sp,fp
    7a04:	df000017 	ldw	fp,0(sp)
    7a08:	dec00104 	addi	sp,sp,4
    7a0c:	f800283a 	ret

00007a10 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
    7a10:	defff804 	addi	sp,sp,-32
    7a14:	dfc00715 	stw	ra,28(sp)
    7a18:	df000615 	stw	fp,24(sp)
    7a1c:	df000604 	addi	fp,sp,24
    7a20:	e13ffd15 	stw	r4,-12(fp)
    7a24:	e17ffe15 	stw	r5,-8(fp)
    7a28:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
    7a2c:	e0bffd17 	ldw	r2,-12(fp)
    7a30:	108005c3 	ldbu	r2,23(r2)
    7a34:	10c03fcc 	andi	r3,r2,255
    7a38:	e0bffe17 	ldw	r2,-8(fp)
    7a3c:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
    7a40:	e0bffd17 	ldw	r2,-12(fp)
    7a44:	10c00217 	ldw	r3,8(r2)
    7a48:	e0bffd17 	ldw	r2,-12(fp)
    7a4c:	10800303 	ldbu	r2,12(r2)
    7a50:	11003fcc 	andi	r4,r2,255
    7a54:	e0bffd17 	ldw	r2,-12(fp)
    7a58:	10800583 	ldbu	r2,22(r2)
    7a5c:	11403fcc 	andi	r5,r2,255
    7a60:	d8000115 	stw	zero,4(sp)
    7a64:	e0bfff17 	ldw	r2,-4(fp)
    7a68:	d8800015 	stw	r2,0(sp)
    7a6c:	e1fffe17 	ldw	r7,-8(fp)
    7a70:	280d883a 	mov	r6,r5
    7a74:	200b883a 	mov	r5,r4
    7a78:	1809883a 	mov	r4,r3
    7a7c:	0000eac0 	call	eac <_ZN3USB10inTransferEhhPtPhh>
    7a80:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
    7a84:	e0bffe17 	ldw	r2,-8(fp)
    7a88:	1080000b 	ldhu	r2,0(r2)
    7a8c:	10bfffcc 	andi	r2,r2,65535
    7a90:	10800f28 	cmpgeui	r2,r2,60
    7a94:	10000d1e 	bne	r2,zero,7acc <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
    7a98:	e0bffe17 	ldw	r2,-8(fp)
    7a9c:	1080000b 	ldhu	r2,0(r2)
    7aa0:	10bfffcc 	andi	r2,r2,65535
    7aa4:	e0ffff17 	ldw	r3,-4(fp)
    7aa8:	1885883a 	add	r2,r3,r2
    7aac:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
    7ab0:	e0bffe17 	ldw	r2,-8(fp)
    7ab4:	1080000b 	ldhu	r2,0(r2)
    7ab8:	10bfffcc 	andi	r2,r2,65535
    7abc:	10800044 	addi	r2,r2,1
    7ac0:	e0ffff17 	ldw	r3,-4(fp)
    7ac4:	1885883a 	add	r2,r3,r2
    7ac8:	10000005 	stb	zero,0(r2)
        }
        return r;
    7acc:	e0bffc03 	ldbu	r2,-16(fp)
}
    7ad0:	e037883a 	mov	sp,fp
    7ad4:	dfc00117 	ldw	ra,4(sp)
    7ad8:	df000017 	ldw	fp,0(sp)
    7adc:	dec00204 	addi	sp,sp,8
    7ae0:	f800283a 	ret

00007ae4 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
    7ae4:	defff904 	addi	sp,sp,-28
    7ae8:	dfc00615 	stw	ra,24(sp)
    7aec:	df000515 	stw	fp,20(sp)
    7af0:	df000504 	addi	fp,sp,20
    7af4:	e13ffd15 	stw	r4,-12(fp)
    7af8:	e17ffe15 	stw	r5,-8(fp)
    7afc:	3005883a 	mov	r2,r6
    7b00:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
    7b04:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
    7b08:	e0bffd17 	ldw	r2,-12(fp)
    7b0c:	10800343 	ldbu	r2,13(r2)
    7b10:	1080005c 	xori	r2,r2,1
    7b14:	10803fcc 	andi	r2,r2,255
    7b18:	10000226 	beq	r2,zero,7b24 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
    7b1c:	0005883a 	mov	r2,zero
    7b20:	00008506 	br	7d38 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
    7b24:	e0bffd17 	ldw	r2,-12(fp)
    7b28:	10801703 	ldbu	r2,92(r2)
    7b2c:	10803fcc 	andi	r2,r2,255
    7b30:	10001826 	beq	r2,zero,7b94 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
    7b34:	e0bffd17 	ldw	r2,-12(fp)
    7b38:	10801703 	ldbu	r2,92(r2)
    7b3c:	10803fcc 	andi	r2,r2,255
    7b40:	10801028 	cmpgeui	r2,r2,64
    7b44:	1000131e 	bne	r2,zero,7b94 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
    7b48:	e0bffd17 	ldw	r2,-12(fp)
    7b4c:	10801703 	ldbu	r2,92(r2)
    7b50:	10803fcc 	andi	r2,r2,255
    7b54:	e0fffd17 	ldw	r3,-12(fp)
    7b58:	1885883a 	add	r2,r3,r2
    7b5c:	10800704 	addi	r2,r2,28
    7b60:	10800003 	ldbu	r2,0(r2)
    7b64:	10803fcc 	andi	r2,r2,255
    7b68:	10002a1e 	bne	r2,zero,7c14 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7b6c:	e0bffd17 	ldw	r2,-12(fp)
    7b70:	10801703 	ldbu	r2,92(r2)
    7b74:	10803fcc 	andi	r2,r2,255
    7b78:	10800044 	addi	r2,r2,1
    7b7c:	e0fffd17 	ldw	r3,-12(fp)
    7b80:	1885883a 	add	r2,r3,r2
    7b84:	10800704 	addi	r2,r2,28
    7b88:	10800003 	ldbu	r2,0(r2)
    7b8c:	10803fcc 	andi	r2,r2,255
    7b90:	1000201e 	bne	r2,zero,7c14 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
    7b94:	e0bffd17 	ldw	r2,-12(fp)
    7b98:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
    7b9c:	e0bffd17 	ldw	r2,-12(fp)
    7ba0:	10c00704 	addi	r3,r2,28
    7ba4:	e0bffc04 	addi	r2,fp,-16
    7ba8:	180d883a 	mov	r6,r3
    7bac:	100b883a 	mov	r5,r2
    7bb0:	e13ffd17 	ldw	r4,-12(fp)
    7bb4:	0007a100 	call	7a10 <_ZN9USBH_MIDI8RecvDataEPtPh>
    7bb8:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
    7bbc:	e0bffb03 	ldbu	r2,-20(fp)
    7bc0:	10000226 	beq	r2,zero,7bcc <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
    7bc4:	0005883a 	mov	r2,zero
    7bc8:	00005b06 	br	7d38 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
    7bcc:	e0bffd17 	ldw	r2,-12(fp)
    7bd0:	10800703 	ldbu	r2,28(r2)
    7bd4:	10803fcc 	andi	r2,r2,255
    7bd8:	10000e1e 	bne	r2,zero,7c14 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bdc:	e0bffd17 	ldw	r2,-12(fp)
    7be0:	10800743 	ldbu	r2,29(r2)
    7be4:	10803fcc 	andi	r2,r2,255
    7be8:	10000a1e 	bne	r2,zero,7c14 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bec:	e0bffd17 	ldw	r2,-12(fp)
    7bf0:	10800783 	ldbu	r2,30(r2)
    7bf4:	10803fcc 	andi	r2,r2,255
    7bf8:	1000061e 	bne	r2,zero,7c14 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
    7bfc:	e0bffd17 	ldw	r2,-12(fp)
    7c00:	108007c3 	ldbu	r2,31(r2)
    7c04:	10803fcc 	andi	r2,r2,255
    7c08:	1000021e 	bne	r2,zero,7c14 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
    7c0c:	0005883a 	mov	r2,zero
    7c10:	00004906 	br	7d38 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
    7c14:	e0bffd17 	ldw	r2,-12(fp)
    7c18:	10801703 	ldbu	r2,92(r2)
    7c1c:	10803fcc 	andi	r2,r2,255
    7c20:	e0fffd17 	ldw	r3,-12(fp)
    7c24:	1885883a 	add	r2,r3,r2
    7c28:	10800704 	addi	r2,r2,28
    7c2c:	10800003 	ldbu	r2,0(r2)
    7c30:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
    7c34:	e0bfff03 	ldbu	r2,-4(fp)
    7c38:	10000526 	beq	r2,zero,7c50 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
    7c3c:	e0bffe17 	ldw	r2,-8(fp)
    7c40:	10c00044 	addi	r3,r2,1
    7c44:	e0fffe15 	stw	r3,-8(fp)
    7c48:	e0fffb43 	ldbu	r3,-19(fp)
    7c4c:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
    7c50:	e0bffd17 	ldw	r2,-12(fp)
    7c54:	10801703 	ldbu	r2,92(r2)
    7c58:	10800044 	addi	r2,r2,1
    7c5c:	1007883a 	mov	r3,r2
    7c60:	e0bffd17 	ldw	r2,-12(fp)
    7c64:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
    7c68:	e0bffe17 	ldw	r2,-8(fp)
    7c6c:	10c00044 	addi	r3,r2,1
    7c70:	e0fffe15 	stw	r3,-8(fp)
    7c74:	e0fffd17 	ldw	r3,-12(fp)
    7c78:	18c01703 	ldbu	r3,92(r3)
    7c7c:	19000044 	addi	r4,r3,1
    7c80:	200b883a 	mov	r5,r4
    7c84:	e13ffd17 	ldw	r4,-12(fp)
    7c88:	21401705 	stb	r5,92(r4)
    7c8c:	18c03fcc 	andi	r3,r3,255
    7c90:	e13ffd17 	ldw	r4,-12(fp)
    7c94:	20c7883a 	add	r3,r4,r3
    7c98:	18c00704 	addi	r3,r3,28
    7c9c:	18c00003 	ldbu	r3,0(r3)
    7ca0:	e0fffb85 	stb	r3,-18(fp)
    7ca4:	e0fffb83 	ldbu	r3,-18(fp)
    7ca8:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7cac:	e0bffe17 	ldw	r2,-8(fp)
    7cb0:	10c00044 	addi	r3,r2,1
    7cb4:	e0fffe15 	stw	r3,-8(fp)
    7cb8:	e0fffd17 	ldw	r3,-12(fp)
    7cbc:	18c01703 	ldbu	r3,92(r3)
    7cc0:	19000044 	addi	r4,r3,1
    7cc4:	200b883a 	mov	r5,r4
    7cc8:	e13ffd17 	ldw	r4,-12(fp)
    7ccc:	21401705 	stb	r5,92(r4)
    7cd0:	18c03fcc 	andi	r3,r3,255
    7cd4:	e13ffd17 	ldw	r4,-12(fp)
    7cd8:	20c7883a 	add	r3,r4,r3
    7cdc:	18c00704 	addi	r3,r3,28
    7ce0:	18c00003 	ldbu	r3,0(r3)
    7ce4:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
    7ce8:	e0bffe17 	ldw	r2,-8(fp)
    7cec:	10c00044 	addi	r3,r2,1
    7cf0:	e0fffe15 	stw	r3,-8(fp)
    7cf4:	e0fffd17 	ldw	r3,-12(fp)
    7cf8:	18c01703 	ldbu	r3,92(r3)
    7cfc:	19000044 	addi	r4,r3,1
    7d00:	200b883a 	mov	r5,r4
    7d04:	e13ffd17 	ldw	r4,-12(fp)
    7d08:	21401705 	stb	r5,92(r4)
    7d0c:	18c03fcc 	andi	r3,r3,255
    7d10:	e13ffd17 	ldw	r4,-12(fp)
    7d14:	20c7883a 	add	r3,r4,r3
    7d18:	18c00704 	addi	r3,r3,28
    7d1c:	18c00003 	ldbu	r3,0(r3)
    7d20:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
    7d24:	e0bffb43 	ldbu	r2,-19(fp)
    7d28:	108003cc 	andi	r2,r2,15
    7d2c:	100b883a 	mov	r5,r2
    7d30:	e13ffd17 	ldw	r4,-12(fp)
    7d34:	0008d940 	call	8d94 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7d38:	e037883a 	mov	sp,fp
    7d3c:	dfc00117 	ldw	ra,4(sp)
    7d40:	df000017 	ldw	fp,0(sp)
    7d44:	dec00204 	addi	sp,sp,8
    7d48:	f800283a 	ret

00007d4c <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
    7d4c:	defff804 	addi	sp,sp,-32
    7d50:	dfc00715 	stw	ra,28(sp)
    7d54:	df000615 	stw	fp,24(sp)
    7d58:	df000604 	addi	fp,sp,24
    7d5c:	e13ffd15 	stw	r4,-12(fp)
    7d60:	e17ffe15 	stw	r5,-8(fp)
    7d64:	3005883a 	mov	r2,r6
    7d68:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
    7d6c:	e0bffe17 	ldw	r2,-8(fp)
    7d70:	10800003 	ldbu	r2,0(r2)
    7d74:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
    7d78:	e0bffb03 	ldbu	r2,-20(fp)
    7d7c:	100b883a 	mov	r5,r2
    7d80:	e13ffd17 	ldw	r4,-12(fp)
    7d84:	0008d3c0 	call	8d3c <_ZN9USBH_MIDI17convertStatus2CinEh>
    7d88:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
    7d8c:	e0bffb03 	ldbu	r2,-20(fp)
    7d90:	10803c18 	cmpnei	r2,r2,240
    7d94:	10000b1e 	bne	r2,zero,7dc4 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
    7d98:	e17ffe17 	ldw	r5,-8(fp)
    7d9c:	e13ffd17 	ldw	r4,-12(fp)
    7da0:	0007f0c0 	call	7f0c <_ZN9USBH_MIDI18countSysExDataSizeEPh>
    7da4:	10bfffcc 	andi	r2,r2,65535
    7da8:	e0ffff03 	ldbu	r3,-4(fp)
    7dac:	180f883a 	mov	r7,r3
    7db0:	100d883a 	mov	r6,r2
    7db4:	e17ffe17 	ldw	r5,-8(fp)
    7db8:	e13ffd17 	ldw	r4,-12(fp)
    7dbc:	0007f940 	call	7f94 <_ZN9USBH_MIDI9SendSysExEPhth>
    7dc0:	00003406 	br	7e94 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
    7dc4:	e0bfff03 	ldbu	r2,-4(fp)
    7dc8:	1004913a 	slli	r2,r2,4
    7dcc:	1007883a 	mov	r3,r2
    7dd0:	e0bffb43 	ldbu	r2,-19(fp)
    7dd4:	1884b03a 	or	r2,r3,r2
    7dd8:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
    7ddc:	e0bffe17 	ldw	r2,-8(fp)
    7de0:	10800003 	ldbu	r2,0(r2)
    7de4:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
    7de8:	e0bffb43 	ldbu	r2,-19(fp)
    7dec:	100b883a 	mov	r5,r2
    7df0:	e13ffd17 	ldw	r4,-12(fp)
    7df4:	0008d940 	call	8d94 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
    7df8:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
    7dfc:	e0bffb83 	ldbu	r2,-18(fp)
    7e00:	10c000a0 	cmpeqi	r3,r2,2
    7e04:	18000c1e 	bne	r3,zero,7e38 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
    7e08:	10c000e0 	cmpeqi	r3,r2,3
    7e0c:	1800031e 	bne	r3,zero,7e1c <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
    7e10:	10800060 	cmpeqi	r2,r2,1
    7e14:	10000d1e 	bne	r2,zero,7e4c <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
    7e18:	00000f06 	br	7e58 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
    7e1c:	e0bffe17 	ldw	r2,-8(fp)
    7e20:	10800043 	ldbu	r2,1(r2)
    7e24:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
    7e28:	e0bffe17 	ldw	r2,-8(fp)
    7e2c:	10800083 	ldbu	r2,2(r2)
    7e30:	e0bffc85 	stb	r2,-14(fp)
                break;
    7e34:	00000806 	br	7e58 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
    7e38:	e0bffe17 	ldw	r2,-8(fp)
    7e3c:	10800043 	ldbu	r2,1(r2)
    7e40:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
    7e44:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e48:	00000306 	br	7e58 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
    7e4c:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
    7e50:	e03ffc85 	stb	zero,-14(fp)
                break;
    7e54:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
    7e58:	e0bffd17 	ldw	r2,-12(fp)
    7e5c:	10c00217 	ldw	r3,8(r2)
    7e60:	e0bffd17 	ldw	r2,-12(fp)
    7e64:	10800303 	ldbu	r2,12(r2)
    7e68:	11003fcc 	andi	r4,r2,255
    7e6c:	e0bffd17 	ldw	r2,-12(fp)
    7e70:	10800643 	ldbu	r2,25(r2)
    7e74:	11403fcc 	andi	r5,r2,255
    7e78:	e0bffbc4 	addi	r2,fp,-17
    7e7c:	d8800015 	stw	r2,0(sp)
    7e80:	01c00104 	movi	r7,4
    7e84:	280d883a 	mov	r6,r5
    7e88:	200b883a 	mov	r5,r4
    7e8c:	1809883a 	mov	r4,r3
    7e90:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
}
    7e94:	e037883a 	mov	sp,fp
    7e98:	dfc00117 	ldw	ra,4(sp)
    7e9c:	df000017 	ldw	fp,0(sp)
    7ea0:	dec00204 	addi	sp,sp,8
    7ea4:	f800283a 	ret

00007ea8 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
    7ea8:	defffb04 	addi	sp,sp,-20
    7eac:	dfc00415 	stw	ra,16(sp)
    7eb0:	df000315 	stw	fp,12(sp)
    7eb4:	df000304 	addi	fp,sp,12
    7eb8:	e13ffd15 	stw	r4,-12(fp)
    7ebc:	2807883a 	mov	r3,r5
    7ec0:	3005883a 	mov	r2,r6
    7ec4:	e0fffe05 	stb	r3,-8(fp)
    7ec8:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
    7ecc:	e0bfff03 	ldbu	r2,-4(fp)
    7ed0:	1000051e 	bne	r2,zero,7ee8 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
    7ed4:	e0bffe03 	ldbu	r2,-8(fp)
    7ed8:	100b883a 	mov	r5,r2
    7edc:	e13ffd17 	ldw	r4,-12(fp)
    7ee0:	0008d3c0 	call	8d3c <_ZN9USBH_MIDI17convertStatus2CinEh>
    7ee4:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
    7ee8:	e0bfff03 	ldbu	r2,-4(fp)
    7eec:	100b883a 	mov	r5,r2
    7ef0:	e13ffd17 	ldw	r4,-12(fp)
    7ef4:	0008d940 	call	8d94 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
    7ef8:	e037883a 	mov	sp,fp
    7efc:	dfc00117 	ldw	ra,4(sp)
    7f00:	df000017 	ldw	fp,0(sp)
    7f04:	dec00204 	addi	sp,sp,8
    7f08:	f800283a 	ret

00007f0c <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
    7f0c:	defffc04 	addi	sp,sp,-16
    7f10:	df000315 	stw	fp,12(sp)
    7f14:	df000304 	addi	fp,sp,12
    7f18:	e13ffe15 	stw	r4,-8(fp)
    7f1c:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
    7f20:	00800044 	movi	r2,1
    7f24:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
    7f28:	e0bfff17 	ldw	r2,-4(fp)
    7f2c:	10800003 	ldbu	r2,0(r2)
    7f30:	10803fcc 	andi	r2,r2,255
    7f34:	10803c20 	cmpeqi	r2,r2,240
    7f38:	1000021e 	bne	r2,zero,7f44 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
    7f3c:	0005883a 	mov	r2,zero
    7f40:	00001006 	br	7f84 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
    7f44:	e0bfff17 	ldw	r2,-4(fp)
    7f48:	10800003 	ldbu	r2,0(r2)
    7f4c:	10803fcc 	andi	r2,r2,255
    7f50:	10803de0 	cmpeqi	r2,r2,247
    7f54:	10000a1e 	bne	r2,zero,7f80 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
    7f58:	e0bfff17 	ldw	r2,-4(fp)
    7f5c:	10800044 	addi	r2,r2,1
    7f60:	e0bfff15 	stw	r2,-4(fp)
                c++;
    7f64:	e0bffd0b 	ldhu	r2,-12(fp)
    7f68:	10800044 	addi	r2,r2,1
    7f6c:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
    7f70:	e0bffd0b 	ldhu	r2,-12(fp)
    7f74:	10804070 	cmpltui	r2,r2,257
    7f78:	103ff21e 	bne	r2,zero,7f44 <__alt_data_end+0xfc007f44>
                        c = 0;
    7f7c:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
    7f80:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7f84:	e037883a 	mov	sp,fp
    7f88:	df000017 	ldw	fp,0(sp)
    7f8c:	dec00104 	addi	sp,sp,4
    7f90:	f800283a 	ret

00007f94 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
    7f94:	deffe704 	addi	sp,sp,-100
    7f98:	dfc01815 	stw	ra,96(sp)
    7f9c:	df001715 	stw	fp,92(sp)
    7fa0:	df001704 	addi	fp,sp,92
    7fa4:	e13ffc15 	stw	r4,-16(fp)
    7fa8:	e17ffd15 	stw	r5,-12(fp)
    7fac:	3007883a 	mov	r3,r6
    7fb0:	3805883a 	mov	r2,r7
    7fb4:	e0fffe0d 	sth	r3,-8(fp)
    7fb8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
    7fbc:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
    7fc0:	e0bffe0b 	ldhu	r2,-8(fp)
    7fc4:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
    7fc8:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
    7fcc:	e0bffc17 	ldw	r2,-16(fp)
    7fd0:	108005c3 	ldbu	r2,23(r2)
    7fd4:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
    7fd8:	e0bffe0b 	ldhu	r2,-8(fp)
    7fdc:	01402004 	movi	r5,128
    7fe0:	1009883a 	mov	r4,r2
    7fe4:	0008e2c0 	call	8e2c <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    7fe8:	e0bfea8b 	ldhu	r2,-86(fp)
    7fec:	1000b026 	beq	r2,zero,82b0 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
    7ff0:	e0bfeb03 	ldbu	r2,-84(fp)
    7ff4:	e0ffff03 	ldbu	r3,-4(fp)
    7ff8:	1806913a 	slli	r3,r3,4
    7ffc:	18c00114 	ori	r3,r3,4
    8000:	1809883a 	mov	r4,r3
    8004:	e0ffeb84 	addi	r3,fp,-82
    8008:	1885883a 	add	r2,r3,r2
    800c:	11000005 	stb	r4,0(r2)

                switch ( n ) {
    8010:	e0bfea8b 	ldhu	r2,-86(fp)
    8014:	10c000a0 	cmpeqi	r3,r2,2
    8018:	18002a1e 	bne	r3,zero,80c4 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
    801c:	10c000e0 	cmpeqi	r3,r2,3
    8020:	1800521e 	bne	r3,zero,816c <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
    8024:	10800060 	cmpeqi	r2,r2,1
    8028:	10005826 	beq	r2,zero,818c <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
    802c:	e0bfeb03 	ldbu	r2,-84(fp)
    8030:	10c00044 	addi	r3,r2,1
    8034:	e0ffeb05 	stb	r3,-84(fp)
    8038:	10803fcc 	andi	r2,r2,255
    803c:	e0ffff03 	ldbu	r3,-4(fp)
    8040:	1806913a 	slli	r3,r3,4
    8044:	18c00154 	ori	r3,r3,5
    8048:	1809883a 	mov	r4,r3
    804c:	e0ffeb84 	addi	r3,fp,-82
    8050:	1885883a 	add	r2,r3,r2
    8054:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    8058:	e0bfeb03 	ldbu	r2,-84(fp)
    805c:	10c00044 	addi	r3,r2,1
    8060:	e0ffeb05 	stb	r3,-84(fp)
    8064:	11003fcc 	andi	r4,r2,255
    8068:	e0bffd17 	ldw	r2,-12(fp)
    806c:	10c00044 	addi	r3,r2,1
    8070:	e0fffd15 	stw	r3,-12(fp)
    8074:	10c00003 	ldbu	r3,0(r2)
    8078:	e0bfeb84 	addi	r2,fp,-82
    807c:	1105883a 	add	r2,r2,r4
    8080:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8084:	e0bfeb03 	ldbu	r2,-84(fp)
    8088:	10c00044 	addi	r3,r2,1
    808c:	e0ffeb05 	stb	r3,-84(fp)
    8090:	10803fcc 	andi	r2,r2,255
    8094:	e0ffeb84 	addi	r3,fp,-82
    8098:	1885883a 	add	r2,r3,r2
    809c:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
    80a0:	e0bfeb03 	ldbu	r2,-84(fp)
    80a4:	10c00044 	addi	r3,r2,1
    80a8:	e0ffeb05 	stb	r3,-84(fp)
    80ac:	10803fcc 	andi	r2,r2,255
    80b0:	e0ffeb84 	addi	r3,fp,-82
    80b4:	1885883a 	add	r2,r3,r2
    80b8:	10000005 	stb	zero,0(r2)
                        n = 0;
    80bc:	e03fea8d 	sth	zero,-86(fp)
                        break;
    80c0:	00005a06 	br	822c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
    80c4:	e0bfeb03 	ldbu	r2,-84(fp)
    80c8:	10c00044 	addi	r3,r2,1
    80cc:	e0ffeb05 	stb	r3,-84(fp)
    80d0:	10803fcc 	andi	r2,r2,255
    80d4:	e0ffff03 	ldbu	r3,-4(fp)
    80d8:	1806913a 	slli	r3,r3,4
    80dc:	18c00194 	ori	r3,r3,6
    80e0:	1809883a 	mov	r4,r3
    80e4:	e0ffeb84 	addi	r3,fp,-82
    80e8:	1885883a 	add	r2,r3,r2
    80ec:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
    80f0:	e0bfeb03 	ldbu	r2,-84(fp)
    80f4:	10c00044 	addi	r3,r2,1
    80f8:	e0ffeb05 	stb	r3,-84(fp)
    80fc:	11003fcc 	andi	r4,r2,255
    8100:	e0bffd17 	ldw	r2,-12(fp)
    8104:	10c00044 	addi	r3,r2,1
    8108:	e0fffd15 	stw	r3,-12(fp)
    810c:	10c00003 	ldbu	r3,0(r2)
    8110:	e0bfeb84 	addi	r2,fp,-82
    8114:	1105883a 	add	r2,r2,r4
    8118:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    811c:	e0bfeb03 	ldbu	r2,-84(fp)
    8120:	10c00044 	addi	r3,r2,1
    8124:	e0ffeb05 	stb	r3,-84(fp)
    8128:	11003fcc 	andi	r4,r2,255
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	10c00044 	addi	r3,r2,1
    8134:	e0fffd15 	stw	r3,-12(fp)
    8138:	10c00003 	ldbu	r3,0(r2)
    813c:	e0bfeb84 	addi	r2,fp,-82
    8140:	1105883a 	add	r2,r2,r4
    8144:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
    8148:	e0bfeb03 	ldbu	r2,-84(fp)
    814c:	10c00044 	addi	r3,r2,1
    8150:	e0ffeb05 	stb	r3,-84(fp)
    8154:	10803fcc 	andi	r2,r2,255
    8158:	e0ffeb84 	addi	r3,fp,-82
    815c:	1885883a 	add	r2,r3,r2
    8160:	10000005 	stb	zero,0(r2)
                        n = 0;
    8164:	e03fea8d 	sth	zero,-86(fp)
                        break;
    8168:	00003006 	br	822c <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
    816c:	e0bfeb03 	ldbu	r2,-84(fp)
    8170:	e0ffff03 	ldbu	r3,-4(fp)
    8174:	1806913a 	slli	r3,r3,4
    8178:	18c001d4 	ori	r3,r3,7
    817c:	1809883a 	mov	r4,r3
    8180:	e0ffeb84 	addi	r3,fp,-82
    8184:	1885883a 	add	r2,r3,r2
    8188:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
    818c:	e0bfeb03 	ldbu	r2,-84(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
    8198:	e0bfeb03 	ldbu	r2,-84(fp)
    819c:	10c00044 	addi	r3,r2,1
    81a0:	e0ffeb05 	stb	r3,-84(fp)
    81a4:	11003fcc 	andi	r4,r2,255
    81a8:	e0bffd17 	ldw	r2,-12(fp)
    81ac:	10c00044 	addi	r3,r2,1
    81b0:	e0fffd15 	stw	r3,-12(fp)
    81b4:	10c00003 	ldbu	r3,0(r2)
    81b8:	e0bfeb84 	addi	r2,fp,-82
    81bc:	1105883a 	add	r2,r2,r4
    81c0:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    81c4:	e0bfeb03 	ldbu	r2,-84(fp)
    81c8:	10c00044 	addi	r3,r2,1
    81cc:	e0ffeb05 	stb	r3,-84(fp)
    81d0:	11003fcc 	andi	r4,r2,255
    81d4:	e0bffd17 	ldw	r2,-12(fp)
    81d8:	10c00044 	addi	r3,r2,1
    81dc:	e0fffd15 	stw	r3,-12(fp)
    81e0:	10c00003 	ldbu	r3,0(r2)
    81e4:	e0bfeb84 	addi	r2,fp,-82
    81e8:	1105883a 	add	r2,r2,r4
    81ec:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
    81f0:	e0bfeb03 	ldbu	r2,-84(fp)
    81f4:	10c00044 	addi	r3,r2,1
    81f8:	e0ffeb05 	stb	r3,-84(fp)
    81fc:	11003fcc 	andi	r4,r2,255
    8200:	e0bffd17 	ldw	r2,-12(fp)
    8204:	10c00044 	addi	r3,r2,1
    8208:	e0fffd15 	stw	r3,-12(fp)
    820c:	10c00003 	ldbu	r3,0(r2)
    8210:	e0bfeb84 	addi	r2,fp,-82
    8214:	1105883a 	add	r2,r2,r4
    8218:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
    821c:	e0bfea8b 	ldhu	r2,-86(fp)
    8220:	10bfff44 	addi	r2,r2,-3
    8224:	e0bfea8d 	sth	r2,-86(fp)
                        break;
    8228:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
    822c:	e0ffeb03 	ldbu	r3,-84(fp)
    8230:	e0bfeb43 	ldbu	r2,-83(fp)
    8234:	1880022e 	bgeu	r3,r2,8240 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
    8238:	e0bfea8b 	ldhu	r2,-86(fp)
    823c:	103f6a1e 	bne	r2,zero,7fe8 <__alt_data_end+0xfc007fe8>
                        USBTRACE2(" wptr:\t", wptr);
    8240:	e0bfeb03 	ldbu	r2,-84(fp)
    8244:	01402004 	movi	r5,128
    8248:	1009883a 	mov	r4,r2
    824c:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
    8250:	e0bffc17 	ldw	r2,-16(fp)
    8254:	10c00217 	ldw	r3,8(r2)
    8258:	e0bffc17 	ldw	r2,-16(fp)
    825c:	10800303 	ldbu	r2,12(r2)
    8260:	11003fcc 	andi	r4,r2,255
    8264:	e0bffc17 	ldw	r2,-16(fp)
    8268:	10800643 	ldbu	r2,25(r2)
    826c:	11403fcc 	andi	r5,r2,255
    8270:	e1bfeb03 	ldbu	r6,-84(fp)
    8274:	e0bfeb84 	addi	r2,fp,-82
    8278:	d8800015 	stw	r2,0(sp)
    827c:	300f883a 	mov	r7,r6
    8280:	280d883a 	mov	r6,r5
    8284:	200b883a 	mov	r5,r4
    8288:	1809883a 	mov	r4,r3
    828c:	00012400 	call	1240 <_ZN3USB11outTransferEhhtPh>
    8290:	e0bfea05 	stb	r2,-88(fp)
    8294:	e0bfea03 	ldbu	r2,-88(fp)
    8298:	1004c03a 	cmpne	r2,r2,zero
    829c:	10803fcc 	andi	r2,r2,255
    82a0:	1000021e 	bne	r2,zero,82ac <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
    82a4:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
    82a8:	003f4f06 	br	7fe8 <__alt_data_end+0xfc007fe8>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
    82ac:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
    82b0:	e0bfea03 	ldbu	r2,-88(fp)
}
    82b4:	e037883a 	mov	sp,fp
    82b8:	dfc00117 	ldw	ra,4(sp)
    82bc:	df000017 	ldw	fp,0(sp)
    82c0:	dec00204 	addi	sp,sp,8
    82c4:	f800283a 	ret

000082c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
    82c8:	defffb04 	addi	sp,sp,-20
    82cc:	df000415 	stw	fp,16(sp)
    82d0:	df000404 	addi	fp,sp,16
    82d4:	e13ffd15 	stw	r4,-12(fp)
    82d8:	e17ffe15 	stw	r5,-8(fp)
    82dc:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
    82e0:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
    82e4:	e0bffe17 	ldw	r2,-8(fp)
    82e8:	10800003 	ldbu	r2,0(r2)
    82ec:	108003cc 	andi	r2,r2,15
    82f0:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
    82f4:	e0bffc43 	ldbu	r2,-15(fp)
    82f8:	1080030c 	andi	r2,r2,12
    82fc:	10800120 	cmpeqi	r2,r2,4
    8300:	1000021e 	bne	r2,zero,830c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
    8304:	e0bffc03 	ldbu	r2,-16(fp)
    8308:	00003b06 	br	83f8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
    830c:	e0bffc43 	ldbu	r2,-15(fp)
    8310:	10c00160 	cmpeqi	r3,r2,5
    8314:	18002e1e 	bne	r3,zero,83d0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
    8318:	10c00188 	cmpgei	r3,r2,6
    831c:	1800031e 	bne	r3,zero,832c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
    8320:	10800120 	cmpeqi	r2,r2,4
    8324:	1000061e 	bne	r2,zero,8340 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    8328:	00003206 	br	83f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
    832c:	10c001a0 	cmpeqi	r3,r2,6
    8330:	1800181e 	bne	r3,zero,8394 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
    8334:	108001e0 	cmpeqi	r2,r2,7
    8338:	1000011e 	bne	r2,zero,8340 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
    833c:	00002d06 	br	83f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
    8340:	e0bfff17 	ldw	r2,-4(fp)
    8344:	10c00044 	addi	r3,r2,1
    8348:	e0ffff15 	stw	r3,-4(fp)
    834c:	e0fffe17 	ldw	r3,-8(fp)
    8350:	18c00043 	ldbu	r3,1(r3)
    8354:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    8358:	e0bfff17 	ldw	r2,-4(fp)
    835c:	10c00044 	addi	r3,r2,1
    8360:	e0ffff15 	stw	r3,-4(fp)
    8364:	e0fffe17 	ldw	r3,-8(fp)
    8368:	18c00083 	ldbu	r3,2(r3)
    836c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
    8370:	e0bfff17 	ldw	r2,-4(fp)
    8374:	10c00044 	addi	r3,r2,1
    8378:	e0ffff15 	stw	r3,-4(fp)
    837c:	e0fffe17 	ldw	r3,-8(fp)
    8380:	18c000c3 	ldbu	r3,3(r3)
    8384:	10c00005 	stb	r3,0(r2)
                rc = 3;
    8388:	008000c4 	movi	r2,3
    838c:	e0bffc05 	stb	r2,-16(fp)
                break;
    8390:	00001806 	br	83f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
    8394:	e0bfff17 	ldw	r2,-4(fp)
    8398:	10c00044 	addi	r3,r2,1
    839c:	e0ffff15 	stw	r3,-4(fp)
    83a0:	e0fffe17 	ldw	r3,-8(fp)
    83a4:	18c00043 	ldbu	r3,1(r3)
    83a8:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
    83ac:	e0bfff17 	ldw	r2,-4(fp)
    83b0:	10c00044 	addi	r3,r2,1
    83b4:	e0ffff15 	stw	r3,-4(fp)
    83b8:	e0fffe17 	ldw	r3,-8(fp)
    83bc:	18c00083 	ldbu	r3,2(r3)
    83c0:	10c00005 	stb	r3,0(r2)
                rc = 2;
    83c4:	00800084 	movi	r2,2
    83c8:	e0bffc05 	stb	r2,-16(fp)
                break;
    83cc:	00000906 	br	83f4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
    83d0:	e0bfff17 	ldw	r2,-4(fp)
    83d4:	10c00044 	addi	r3,r2,1
    83d8:	e0ffff15 	stw	r3,-4(fp)
    83dc:	e0fffe17 	ldw	r3,-8(fp)
    83e0:	18c00043 	ldbu	r3,1(r3)
    83e4:	10c00005 	stb	r3,0(r2)
                rc = 1;
    83e8:	00800044 	movi	r2,1
    83ec:	e0bffc05 	stb	r2,-16(fp)
                break;
    83f0:	0001883a 	nop
            default:
                break;
        }
        return(rc);
    83f4:	e0bffc03 	ldbu	r2,-16(fp)
}
    83f8:	e037883a 	mov	sp,fp
    83fc:	df000017 	ldw	fp,0(sp)
    8400:	dec00104 	addi	sp,sp,4
    8404:	f800283a 	ret

00008408 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
    8408:	defffb04 	addi	sp,sp,-20
    840c:	dfc00415 	stw	ra,16(sp)
    8410:	df000315 	stw	fp,12(sp)
    8414:	df000304 	addi	fp,sp,12
    8418:	e13ffd15 	stw	r4,-12(fp)
    841c:	e17ffe15 	stw	r5,-8(fp)
    8420:	3005883a 	mov	r2,r6
    8424:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	1009883a 	mov	r4,r2
    8430:	0004bc80 	call	4bc8 <_ZN13USBReadParserC1Ev>
    8434:	008000b4 	movhi	r2,2
    8438:	10987704 	addi	r2,r2,25052
    843c:	e0fffd17 	ldw	r3,-12(fp)
    8440:	18800015 	stw	r2,0(r3)
    8444:	e0bffd17 	ldw	r2,-12(fp)
    8448:	e0fffe17 	ldw	r3,-8(fp)
    844c:	10c00115 	stw	r3,4(r2)
    8450:	e0bffd17 	ldw	r2,-12(fp)
    8454:	10800204 	addi	r2,r2,8
    8458:	1009883a 	mov	r4,r2
    845c:	00044b80 	call	44b8 <_ZN16MultiValueBufferC1Ev>
    8460:	e0bffd17 	ldw	r2,-12(fp)
    8464:	10800404 	addi	r2,r2,16
    8468:	1009883a 	mov	r4,r2
    846c:	00045180 	call	4518 <_ZN20MultiByteValueParserC1Ev>
    8470:	e0bffd17 	ldw	r2,-12(fp)
    8474:	10800604 	addi	r2,r2,24
    8478:	1009883a 	mov	r4,r2
    847c:	00045d40 	call	45d4 <_ZN11ByteSkipperC1Ev>
    8480:	e0bffd17 	ldw	r2,-12(fp)
    8484:	10000c05 	stb	zero,48(r2)
    8488:	e0bffd17 	ldw	r2,-12(fp)
    848c:	10000c45 	stb	zero,49(r2)
    8490:	e0bffd17 	ldw	r2,-12(fp)
    8494:	10000c85 	stb	zero,50(r2)
    8498:	e0bffd17 	ldw	r2,-12(fp)
    849c:	10000cc5 	stb	zero,51(r2)
    84a0:	e0bffd17 	ldw	r2,-12(fp)
    84a4:	e0ffff03 	ldbu	r3,-4(fp)
    84a8:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
    84ac:	e0bffd17 	ldw	r2,-12(fp)
    84b0:	10c00804 	addi	r3,r2,32
    84b4:	e0bffd17 	ldw	r2,-12(fp)
    84b8:	19803fcc 	andi	r6,r3,255
    84bc:	11000243 	ldbu	r4,9(r2)
    84c0:	2008703a 	and	r4,r4,zero
    84c4:	200b883a 	mov	r5,r4
    84c8:	3009883a 	mov	r4,r6
    84cc:	2908b03a 	or	r4,r5,r4
    84d0:	11000245 	stb	r4,9(r2)
    84d4:	1808d23a 	srli	r4,r3,8
    84d8:	21803fcc 	andi	r6,r4,255
    84dc:	11000283 	ldbu	r4,10(r2)
    84e0:	2008703a 	and	r4,r4,zero
    84e4:	200b883a 	mov	r5,r4
    84e8:	3009883a 	mov	r4,r6
    84ec:	2908b03a 	or	r4,r5,r4
    84f0:	11000285 	stb	r4,10(r2)
    84f4:	1808d43a 	srli	r4,r3,16
    84f8:	21803fcc 	andi	r6,r4,255
    84fc:	110002c3 	ldbu	r4,11(r2)
    8500:	2008703a 	and	r4,r4,zero
    8504:	200b883a 	mov	r5,r4
    8508:	3009883a 	mov	r4,r6
    850c:	2908b03a 	or	r4,r5,r4
    8510:	110002c5 	stb	r4,11(r2)
    8514:	180ad63a 	srli	r5,r3,24
    8518:	10c00303 	ldbu	r3,12(r2)
    851c:	1806703a 	and	r3,r3,zero
    8520:	1809883a 	mov	r4,r3
    8524:	2807883a 	mov	r3,r5
    8528:	20c6b03a 	or	r3,r4,r3
    852c:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
    8530:	e0bffd17 	ldw	r2,-12(fp)
    8534:	10c00404 	addi	r3,r2,16
    8538:	e0bffd17 	ldw	r2,-12(fp)
    853c:	10800204 	addi	r2,r2,8
    8540:	100b883a 	mov	r5,r2
    8544:	1809883a 	mov	r4,r3
    8548:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
    854c:	e0bffd17 	ldw	r2,-12(fp)
    8550:	10c00604 	addi	r3,r2,24
    8554:	e0bffd17 	ldw	r2,-12(fp)
    8558:	10800204 	addi	r2,r2,8
    855c:	100b883a 	mov	r5,r2
    8560:	1809883a 	mov	r4,r3
    8564:	00046100 	call	4610 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
    8568:	0001883a 	nop
    856c:	e037883a 	mov	sp,fp
    8570:	dfc00117 	ldw	ra,4(sp)
    8574:	df000017 	ldw	fp,0(sp)
    8578:	dec00204 	addi	sp,sp,8
    857c:	f800283a 	ret

00008580 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
    8580:	defff804 	addi	sp,sp,-32
    8584:	dfc00715 	stw	ra,28(sp)
    8588:	df000615 	stw	fp,24(sp)
    858c:	df000604 	addi	fp,sp,24
    8590:	e13ffc15 	stw	r4,-16(fp)
    8594:	2805883a 	mov	r2,r5
    8598:	e1bffe15 	stw	r6,-8(fp)
    859c:	e1ffff15 	stw	r7,-4(fp)
    85a0:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
    85a4:	e0bffd0b 	ldhu	r2,-12(fp)
    85a8:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
    85ac:	e0bffe17 	ldw	r2,-8(fp)
    85b0:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
    85b4:	e0bffa0b 	ldhu	r2,-24(fp)
    85b8:	10bfffcc 	andi	r2,r2,65535
    85bc:	10000a26 	beq	r2,zero,85e8 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
    85c0:	e0bffb04 	addi	r2,fp,-20
    85c4:	e1bffa04 	addi	r6,fp,-24
    85c8:	100b883a 	mov	r5,r2
    85cc:	e13ffc17 	ldw	r4,-16(fp)
    85d0:	00085fc0 	call	85fc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
    85d4:	1080005c 	xori	r2,r2,1
    85d8:	10803fcc 	andi	r2,r2,255
    85dc:	1000011e 	bne	r2,zero,85e4 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
    85e0:	003ff406 	br	85b4 <__alt_data_end+0xfc0085b4>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
    85e4:	0001883a 	nop
}
    85e8:	e037883a 	mov	sp,fp
    85ec:	dfc00117 	ldw	ra,4(sp)
    85f0:	df000017 	ldw	fp,0(sp)
    85f4:	dec00204 	addi	sp,sp,8
    85f8:	f800283a 	ret

000085fc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
    85fc:	defff604 	addi	sp,sp,-40
    8600:	dfc00915 	stw	ra,36(sp)
    8604:	df000815 	stw	fp,32(sp)
    8608:	df000804 	addi	fp,sp,32
    860c:	e13ffc15 	stw	r4,-16(fp)
    8610:	e17ffd15 	stw	r5,-12(fp)
    8614:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
    8618:	e0bffc17 	ldw	r2,-16(fp)
    861c:	10800804 	addi	r2,r2,32
    8620:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
    8624:	e0bffc17 	ldw	r2,-16(fp)
    8628:	10800804 	addi	r2,r2,32
    862c:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
    8630:	e0bffc17 	ldw	r2,-16(fp)
    8634:	10800c03 	ldbu	r2,48(r2)
    8638:	10803fcc 	andi	r2,r2,255
    863c:	10c00168 	cmpgeui	r3,r2,5
    8640:	1801411e 	bne	r3,zero,8b48 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
    8644:	100690ba 	slli	r3,r2,2
    8648:	00800074 	movhi	r2,1
    864c:	10a19704 	addi	r2,r2,-31140
    8650:	1885883a 	add	r2,r3,r2
    8654:	10800017 	ldw	r2,0(r2)
    8658:	1000683a 	jmp	r2
    865c:	00008670 	cmpltui	zero,zero,537
    8660:	000086a4 	muli	zero,zero,538
    8664:	0000872c 	andhi	zero,zero,540
    8668:	000087c0 	call	87c <_ZN3USB14getEpInfoEntryEhh+0x9c>
    866c:	0000882c 	andhi	zero,zero,544
                case 0:
                        theBuffer.valueSize = 2;
    8670:	e0bffc17 	ldw	r2,-16(fp)
    8674:	00c00084 	movi	r3,2
    8678:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    867c:	e0bffc17 	ldw	r2,-16(fp)
    8680:	10c00404 	addi	r3,r2,16
    8684:	e0bffc17 	ldw	r2,-16(fp)
    8688:	10800204 	addi	r2,r2,8
    868c:	100b883a 	mov	r5,r2
    8690:	1809883a 	mov	r4,r3
    8694:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
    8698:	e0bffc17 	ldw	r2,-16(fp)
    869c:	00c00044 	movi	r3,1
    86a0:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
    86a4:	e0bffc17 	ldw	r2,-16(fp)
    86a8:	10800404 	addi	r2,r2,16
    86ac:	e1bffe17 	ldw	r6,-8(fp)
    86b0:	e17ffd17 	ldw	r5,-12(fp)
    86b4:	1009883a 	mov	r4,r2
    86b8:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    86bc:	1080005c 	xori	r2,r2,1
    86c0:	10803fcc 	andi	r2,r2,255
    86c4:	10000226 	beq	r2,zero,86d0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
    86c8:	0005883a 	mov	r2,zero
    86cc:	00011f06 	br	8b4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
    86d0:	e0bffc17 	ldw	r2,-16(fp)
    86d4:	10c00217 	ldw	r3,8(r2)
    86d8:	1806d23a 	srli	r3,r3,8
    86dc:	10800317 	ldw	r2,12(r2)
    86e0:	10803fcc 	andi	r2,r2,255
    86e4:	1004963a 	slli	r2,r2,24
    86e8:	10c4b03a 	or	r2,r2,r3
    86ec:	10c00003 	ldbu	r3,0(r2)
    86f0:	e0bffc17 	ldw	r2,-16(fp)
    86f4:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
    86f8:	e0bffc17 	ldw	r2,-16(fp)
    86fc:	10c00217 	ldw	r3,8(r2)
    8700:	1806d23a 	srli	r3,r3,8
    8704:	10800317 	ldw	r2,12(r2)
    8708:	10803fcc 	andi	r2,r2,255
    870c:	1004963a 	slli	r2,r2,24
    8710:	10c4b03a 	or	r2,r2,r3
    8714:	10c00043 	ldbu	r3,1(r2)
    8718:	e0bffc17 	ldw	r2,-16(fp)
    871c:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
    8720:	e0bffc17 	ldw	r2,-16(fp)
    8724:	00c00084 	movi	r3,2
    8728:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
    872c:	e0bffc17 	ldw	r2,-16(fp)
    8730:	10800804 	addi	r2,r2,32
    8734:	10c00084 	addi	r3,r2,2
    8738:	e0bffc17 	ldw	r2,-16(fp)
    873c:	19803fcc 	andi	r6,r3,255
    8740:	11000243 	ldbu	r4,9(r2)
    8744:	2008703a 	and	r4,r4,zero
    8748:	200b883a 	mov	r5,r4
    874c:	3009883a 	mov	r4,r6
    8750:	2908b03a 	or	r4,r5,r4
    8754:	11000245 	stb	r4,9(r2)
    8758:	1808d23a 	srli	r4,r3,8
    875c:	21803fcc 	andi	r6,r4,255
    8760:	11000283 	ldbu	r4,10(r2)
    8764:	2008703a 	and	r4,r4,zero
    8768:	200b883a 	mov	r5,r4
    876c:	3009883a 	mov	r4,r6
    8770:	2908b03a 	or	r4,r5,r4
    8774:	11000285 	stb	r4,10(r2)
    8778:	1808d43a 	srli	r4,r3,16
    877c:	21803fcc 	andi	r6,r4,255
    8780:	110002c3 	ldbu	r4,11(r2)
    8784:	2008703a 	and	r4,r4,zero
    8788:	200b883a 	mov	r5,r4
    878c:	3009883a 	mov	r4,r6
    8790:	2908b03a 	or	r4,r5,r4
    8794:	110002c5 	stb	r4,11(r2)
    8798:	180ad63a 	srli	r5,r3,24
    879c:	10c00303 	ldbu	r3,12(r2)
    87a0:	1806703a 	and	r3,r3,zero
    87a4:	1809883a 	mov	r4,r3
    87a8:	2807883a 	mov	r3,r5
    87ac:	20c6b03a 	or	r3,r4,r3
    87b0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
    87b4:	e0bffc17 	ldw	r2,-16(fp)
    87b8:	00c000c4 	movi	r3,3
    87bc:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
    87c0:	e0bffc17 	ldw	r2,-16(fp)
    87c4:	10800c83 	ldbu	r2,50(r2)
    87c8:	10803fcc 	andi	r2,r2,255
    87cc:	10c00120 	cmpeqi	r3,r2,4
    87d0:	1800021e 	bne	r3,zero,87dc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
    87d4:	10800148 	cmpgei	r2,r2,5
    87d8:	00000306 	br	87e8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
    87dc:	e0bffc17 	ldw	r2,-16(fp)
    87e0:	10000d45 	stb	zero,53(r2)
                                        break;
    87e4:	00000106 	br	87ec <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
    87e8:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
    87ec:	e0bffc17 	ldw	r2,-16(fp)
    87f0:	10800c43 	ldbu	r2,49(r2)
    87f4:	10bfff84 	addi	r2,r2,-2
    87f8:	1007883a 	mov	r3,r2
    87fc:	e0bffc17 	ldw	r2,-16(fp)
    8800:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
    8804:	e0bffc17 	ldw	r2,-16(fp)
    8808:	10c00404 	addi	r3,r2,16
    880c:	e0bffc17 	ldw	r2,-16(fp)
    8810:	10800204 	addi	r2,r2,8
    8814:	100b883a 	mov	r5,r2
    8818:	1809883a 	mov	r4,r3
    881c:	00045540 	call	4554 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
    8820:	e0bffc17 	ldw	r2,-16(fp)
    8824:	00c00104 	movi	r3,4
    8828:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
    882c:	e0bffc17 	ldw	r2,-16(fp)
    8830:	10800c83 	ldbu	r2,50(r2)
    8834:	10803fcc 	andi	r2,r2,255
    8838:	10c00120 	cmpeqi	r3,r2,4
    883c:	1800141e 	bne	r3,zero,8890 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
    8840:	10c00160 	cmpeqi	r3,r2,5
    8844:	18005a1e 	bne	r3,zero,89b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
    8848:	108000a0 	cmpeqi	r2,r2,2
    884c:	10008526 	beq	r2,zero,8a64 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
    8850:	e0bffc17 	ldw	r2,-16(fp)
    8854:	10800404 	addi	r2,r2,16
    8858:	e1bffe17 	ldw	r6,-8(fp)
    885c:	e17ffd17 	ldw	r5,-12(fp)
    8860:	1009883a 	mov	r4,r2
    8864:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    8868:	1080005c 	xori	r2,r2,1
    886c:	10803fcc 	andi	r2,r2,255
    8870:	10000226 	beq	r2,zero,887c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
    8874:	0005883a 	mov	r2,zero
    8878:	0000b406 	br	8b4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
    887c:	e0bffa17 	ldw	r2,-24(fp)
    8880:	10c00143 	ldbu	r3,5(r2)
    8884:	e0bffc17 	ldw	r2,-16(fp)
    8888:	10c00d85 	stb	r3,54(r2)
                                        break;
    888c:	00008b06 	br	8abc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
    8890:	e0bffc17 	ldw	r2,-16(fp)
    8894:	10800404 	addi	r2,r2,16
    8898:	e1bffe17 	ldw	r6,-8(fp)
    889c:	e17ffd17 	ldw	r5,-12(fp)
    88a0:	1009883a 	mov	r4,r2
    88a4:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    88a8:	1080005c 	xori	r2,r2,1
    88ac:	10803fcc 	andi	r2,r2,255
    88b0:	10000226 	beq	r2,zero,88bc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
    88b4:	0005883a 	mov	r2,zero
    88b8:	0000a406 	br	8b4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
    88bc:	e0bffb17 	ldw	r2,-20(fp)
    88c0:	10800083 	ldbu	r2,2(r2)
    88c4:	10803fcc 	andi	r2,r2,255
    88c8:	01402004 	movi	r5,128
    88cc:	1009883a 	mov	r4,r2
    88d0:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
    88d4:	e0bffb17 	ldw	r2,-20(fp)
    88d8:	108000c3 	ldbu	r2,3(r2)
    88dc:	10803fcc 	andi	r2,r2,255
    88e0:	01402004 	movi	r5,128
    88e4:	1009883a 	mov	r4,r2
    88e8:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
    88ec:	e0bffb17 	ldw	r2,-20(fp)
    88f0:	10800103 	ldbu	r2,4(r2)
    88f4:	10803fcc 	andi	r2,r2,255
    88f8:	01402004 	movi	r5,128
    88fc:	1009883a 	mov	r4,r2
    8900:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
    8904:	e0bffb17 	ldw	r2,-20(fp)
    8908:	10800143 	ldbu	r2,5(r2)
    890c:	10803fcc 	andi	r2,r2,255
    8910:	01402004 	movi	r5,128
    8914:	1009883a 	mov	r4,r2
    8918:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
    891c:	e0bffb17 	ldw	r2,-20(fp)
    8920:	10800183 	ldbu	r2,6(r2)
    8924:	10803fcc 	andi	r2,r2,255
    8928:	01402004 	movi	r5,128
    892c:	1009883a 	mov	r4,r2
    8930:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
    8934:	e0bffb17 	ldw	r2,-20(fp)
    8938:	108001c3 	ldbu	r2,7(r2)
    893c:	10803fcc 	andi	r2,r2,255
    8940:	01402004 	movi	r5,128
    8944:	1009883a 	mov	r4,r2
    8948:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
    894c:	e0bffc17 	ldw	r2,-16(fp)
    8950:	10800d03 	ldbu	r2,52(r2)
    8954:	10803fcc 	andi	r2,r2,255
    8958:	10000a26 	beq	r2,zero,8984 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
    895c:	e0bffb17 	ldw	r2,-20(fp)
    8960:	10800143 	ldbu	r2,5(r2)
    8964:	10803fcc 	andi	r2,r2,255
    8968:	10800058 	cmpnei	r2,r2,1
    896c:	10004e1e 	bne	r2,zero,8aa8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
    8970:	e0bffb17 	ldw	r2,-20(fp)
    8974:	10800183 	ldbu	r2,6(r2)
    8978:	10803fcc 	andi	r2,r2,255
    897c:	108000d8 	cmpnei	r2,r2,3
    8980:	1000491e 	bne	r2,zero,8aa8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
    8984:	e0bffc17 	ldw	r2,-16(fp)
    8988:	00c00044 	movi	r3,1
    898c:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
    8990:	e0bffc17 	ldw	r2,-16(fp)
    8994:	10800cc3 	ldbu	r2,51(r2)
    8998:	10803fcc 	andi	r2,r2,255
    899c:	108000a8 	cmpgeui	r2,r2,2
    89a0:	1000431e 	bne	r2,zero,8ab0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
    89a4:	e0bffc17 	ldw	r2,-16(fp)
    89a8:	10000cc5 	stb	zero,51(r2)
                                        break;
    89ac:	00004006 	br	8ab0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
    89b0:	e0bffc17 	ldw	r2,-16(fp)
    89b4:	10800404 	addi	r2,r2,16
    89b8:	e1bffe17 	ldw	r6,-8(fp)
    89bc:	e17ffd17 	ldw	r5,-12(fp)
    89c0:	1009883a 	mov	r4,r2
    89c4:	00062e00 	call	62e0 <_ZN20MultiByteValueParser5ParseEPPhPt>
    89c8:	1080005c 	xori	r2,r2,1
    89cc:	10803fcc 	andi	r2,r2,255
    89d0:	10000226 	beq	r2,zero,89dc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
    89d4:	0005883a 	mov	r2,zero
    89d8:	00005c06 	br	8b4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
    89dc:	e0bffc17 	ldw	r2,-16(fp)
    89e0:	10800d43 	ldbu	r2,53(r2)
    89e4:	10803fcc 	andi	r2,r2,255
    89e8:	10003326 	beq	r2,zero,8ab8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
    89ec:	e0bffc17 	ldw	r2,-16(fp)
    89f0:	10800cc3 	ldbu	r2,51(r2)
    89f4:	10803fcc 	andi	r2,r2,255
    89f8:	108000a8 	cmpgeui	r2,r2,2
    89fc:	10002e1e 	bne	r2,zero,8ab8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
    8a00:	e0bffc17 	ldw	r2,-16(fp)
    8a04:	10800117 	ldw	r2,4(r2)
    8a08:	10800017 	ldw	r2,0(r2)
    8a0c:	10800017 	ldw	r2,0(r2)
    8a10:	e0fffc17 	ldw	r3,-16(fp)
    8a14:	19000117 	ldw	r4,4(r3)
    8a18:	e0fffc17 	ldw	r3,-16(fp)
    8a1c:	18c00d83 	ldbu	r3,54(r3)
    8a20:	19403fcc 	andi	r5,r3,255
    8a24:	e0fffc17 	ldw	r3,-16(fp)
    8a28:	18c00804 	addi	r3,r3,32
    8a2c:	d8c00115 	stw	r3,4(sp)
    8a30:	d8000015 	stw	zero,0(sp)
    8a34:	000f883a 	mov	r7,zero
    8a38:	000d883a 	mov	r6,zero
    8a3c:	103ee83a 	callr	r2
    8a40:	10803fcc 	andi	r2,r2,255
    8a44:	10001c26 	beq	r2,zero,8ab8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
    8a48:	e0bffc17 	ldw	r2,-16(fp)
    8a4c:	10800cc3 	ldbu	r2,51(r2)
    8a50:	10800044 	addi	r2,r2,1
    8a54:	1007883a 	mov	r3,r2
    8a58:	e0bffc17 	ldw	r2,-16(fp)
    8a5c:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
    8a60:	00001506 	br	8ab8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
    8a64:	e0bffc17 	ldw	r2,-16(fp)
    8a68:	10c00604 	addi	r3,r2,24
    8a6c:	e0bffc17 	ldw	r2,-16(fp)
    8a70:	10800c43 	ldbu	r2,49(r2)
    8a74:	10803fcc 	andi	r2,r2,255
    8a78:	10bfff84 	addi	r2,r2,-2
    8a7c:	10bfffcc 	andi	r2,r2,65535
    8a80:	100f883a 	mov	r7,r2
    8a84:	e1bffe17 	ldw	r6,-8(fp)
    8a88:	e17ffd17 	ldw	r5,-12(fp)
    8a8c:	1809883a 	mov	r4,r3
    8a90:	00046780 	call	4678 <_ZN11ByteSkipper4SkipEPPhPtt>
    8a94:	1080005c 	xori	r2,r2,1
    8a98:	10803fcc 	andi	r2,r2,255
    8a9c:	10000726 	beq	r2,zero,8abc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
    8aa0:	0005883a 	mov	r2,zero
    8aa4:	00002906 	br	8b4c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
    8aa8:	0001883a 	nop
    8aac:	00000306 	br	8abc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
    8ab0:	0001883a 	nop
    8ab4:	00000106 	br	8abc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) )
                                                        nEPs++;
                                        }
                                        break;
    8ab8:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
    8abc:	e0bffc17 	ldw	r2,-16(fp)
    8ac0:	10c00804 	addi	r3,r2,32
    8ac4:	e0bffc17 	ldw	r2,-16(fp)
    8ac8:	19803fcc 	andi	r6,r3,255
    8acc:	11000243 	ldbu	r4,9(r2)
    8ad0:	2008703a 	and	r4,r4,zero
    8ad4:	200b883a 	mov	r5,r4
    8ad8:	3009883a 	mov	r4,r6
    8adc:	2908b03a 	or	r4,r5,r4
    8ae0:	11000245 	stb	r4,9(r2)
    8ae4:	1808d23a 	srli	r4,r3,8
    8ae8:	21803fcc 	andi	r6,r4,255
    8aec:	11000283 	ldbu	r4,10(r2)
    8af0:	2008703a 	and	r4,r4,zero
    8af4:	200b883a 	mov	r5,r4
    8af8:	3009883a 	mov	r4,r6
    8afc:	2908b03a 	or	r4,r5,r4
    8b00:	11000285 	stb	r4,10(r2)
    8b04:	1808d43a 	srli	r4,r3,16
    8b08:	21803fcc 	andi	r6,r4,255
    8b0c:	110002c3 	ldbu	r4,11(r2)
    8b10:	2008703a 	and	r4,r4,zero
    8b14:	200b883a 	mov	r5,r4
    8b18:	3009883a 	mov	r4,r6
    8b1c:	2908b03a 	or	r4,r5,r4
    8b20:	110002c5 	stb	r4,11(r2)
    8b24:	180ad63a 	srli	r5,r3,24
    8b28:	10c00303 	ldbu	r3,12(r2)
    8b2c:	1806703a 	and	r3,r3,zero
    8b30:	1809883a 	mov	r4,r3
    8b34:	2807883a 	mov	r3,r5
    8b38:	20c6b03a 	or	r3,r4,r3
    8b3c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
    8b40:	e0bffc17 	ldw	r2,-16(fp)
    8b44:	10000c05 	stb	zero,48(r2)
        }
        return true;
    8b48:	00800044 	movi	r2,1
}
    8b4c:	e037883a 	mov	sp,fp
    8b50:	dfc00117 	ldw	ra,4(sp)
    8b54:	df000017 	ldw	fp,0(sp)
    8b58:	dec00204 	addi	sp,sp,8
    8b5c:	f800283a 	ret

00008b60 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
    8b60:	defff904 	addi	sp,sp,-28
    8b64:	df000615 	stw	fp,24(sp)
    8b68:	df000604 	addi	fp,sp,24
    8b6c:	e13ffb15 	stw	r4,-20(fp)
    8b70:	3009883a 	mov	r4,r6
    8b74:	3807883a 	mov	r3,r7
    8b78:	e0800117 	ldw	r2,4(fp)
    8b7c:	e17ffc05 	stb	r5,-16(fp)
    8b80:	e13ffd05 	stb	r4,-12(fp)
    8b84:	e0fffe05 	stb	r3,-8(fp)
    8b88:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
    8b8c:	e0800217 	ldw	r2,8(fp)
    8b90:	10c000c3 	ldbu	r3,3(r2)
    8b94:	e0bffb17 	ldw	r2,-20(fp)
    8b98:	10800483 	ldbu	r2,18(r2)
    8b9c:	1884703a 	and	r2,r3,r2
    8ba0:	10803fcc 	andi	r2,r2,255
    8ba4:	10800098 	cmpnei	r2,r2,2
    8ba8:	10001f1e 	bne	r2,zero,8c28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
    8bac:	e0800217 	ldw	r2,8(fp)
    8bb0:	10800083 	ldbu	r2,2(r2)
    8bb4:	10803fcc 	andi	r2,r2,255
    8bb8:	1080201c 	xori	r2,r2,128
    8bbc:	10bfe004 	addi	r2,r2,-128
    8bc0:	1000020e 	bge	r2,zero,8bcc <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
    8bc4:	00800044 	movi	r2,1
    8bc8:	00000106 	br	8bd0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
    8bcc:	00800084 	movi	r2,2
    8bd0:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        }

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
    8bd4:	e0fffa03 	ldbu	r3,-24(fp)
    8bd8:	e0800217 	ldw	r2,8(fp)
    8bdc:	10800083 	ldbu	r2,2(r2)
    8be0:	108003cc 	andi	r2,r2,15
    8be4:	100b883a 	mov	r5,r2
    8be8:	e13ffb17 	ldw	r4,-20(fp)
    8bec:	1805883a 	mov	r2,r3
    8bf0:	1085883a 	add	r2,r2,r2
    8bf4:	10c5883a 	add	r2,r2,r3
    8bf8:	2085883a 	add	r2,r4,r2
    8bfc:	108004c4 	addi	r2,r2,19
    8c00:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
    8c04:	e0800217 	ldw	r2,8(fp)
    8c08:	10c00103 	ldbu	r3,4(r2)
    8c0c:	10800143 	ldbu	r2,5(r2)
    8c10:	1004923a 	slli	r2,r2,8
    8c14:	10c4b03a 	or	r2,r2,r3
    8c18:	10bfffcc 	andi	r2,r2,65535
    8c1c:	10801070 	cmpltui	r2,r2,65
    8c20:	10000d1e 	bne	r2,zero,8c58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
    8c24:	00000206 	br	8c30 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
    8c28:	0005883a 	mov	r2,zero
    8c2c:	00001906 	br	8c94 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
    8c30:	e0fffa03 	ldbu	r3,-24(fp)
    8c34:	e13ffb17 	ldw	r4,-20(fp)
    8c38:	1805883a 	mov	r2,r3
    8c3c:	1085883a 	add	r2,r2,r2
    8c40:	10c5883a 	add	r2,r2,r3
    8c44:	2085883a 	add	r2,r4,r2
    8c48:	10800504 	addi	r2,r2,20
    8c4c:	00c01004 	movi	r3,64
    8c50:	10c00005 	stb	r3,0(r2)
    8c54:	00000e06 	br	8c90 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
    8c58:	e0fffa03 	ldbu	r3,-24(fp)
    8c5c:	e0800217 	ldw	r2,8(fp)
    8c60:	11000103 	ldbu	r4,4(r2)
    8c64:	10800143 	ldbu	r2,5(r2)
    8c68:	1004923a 	slli	r2,r2,8
    8c6c:	1104b03a 	or	r2,r2,r4
    8c70:	100b883a 	mov	r5,r2
    8c74:	e13ffb17 	ldw	r4,-20(fp)
    8c78:	1805883a 	mov	r2,r3
    8c7c:	1085883a 	add	r2,r2,r2
    8c80:	10c5883a 	add	r2,r2,r3
    8c84:	2085883a 	add	r2,r4,r2
    8c88:	10800504 	addi	r2,r2,20
    8c8c:	11400005 	stb	r5,0(r2)
        }

        return true;
    8c90:	00800044 	movi	r2,1
}
    8c94:	e037883a 	mov	sp,fp
    8c98:	df000017 	ldw	fp,0(sp)
    8c9c:	dec00104 	addi	sp,sp,4
    8ca0:	f800283a 	ret

00008ca4 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
    8ca4:	213fff04 	addi	r4,r4,-4
    8ca8:	0008b601 	jmpi	8b60 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

00008cac <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
    8cac:	defffa04 	addi	sp,sp,-24
    8cb0:	df000515 	stw	fp,20(sp)
    8cb4:	df000504 	addi	fp,sp,20
    8cb8:	e13ffb15 	stw	r4,-20(fp)
    8cbc:	3009883a 	mov	r4,r6
    8cc0:	3807883a 	mov	r3,r7
    8cc4:	e0800117 	ldw	r2,4(fp)
    8cc8:	e17ffc05 	stb	r5,-16(fp)
    8ccc:	e13ffd05 	stb	r4,-12(fp)
    8cd0:	e0fffe05 	stb	r3,-8(fp)
    8cd4:	e0bfff05 	stb	r2,-4(fp)
                return true;
    8cd8:	00800044 	movi	r2,1
        };
    8cdc:	e037883a 	mov	sp,fp
    8ce0:	df000017 	ldw	fp,0(sp)
    8ce4:	dec00104 	addi	sp,sp,4
    8ce8:	f800283a 	ret

00008cec <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
    8cec:	defffe04 	addi	sp,sp,-8
    8cf0:	df000115 	stw	fp,4(sp)
    8cf4:	df000104 	addi	fp,sp,4
    8cf8:	e13fff15 	stw	r4,-4(fp)
    8cfc:	e0bfff17 	ldw	r2,-4(fp)
    8d00:	10800d83 	ldbu	r2,54(r2)
    8d04:	e037883a 	mov	sp,fp
    8d08:	df000017 	ldw	fp,0(sp)
    8d0c:	dec00104 	addi	sp,sp,4
    8d10:	f800283a 	ret

00008d14 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
    8d14:	defffe04 	addi	sp,sp,-8
    8d18:	df000115 	stw	fp,4(sp)
    8d1c:	df000104 	addi	fp,sp,4
    8d20:	e13fff15 	stw	r4,-4(fp)
    8d24:	e0bfff17 	ldw	r2,-4(fp)
    8d28:	10800cc3 	ldbu	r2,51(r2)
    8d2c:	e037883a 	mov	sp,fp
    8d30:	df000017 	ldw	fp,0(sp)
    8d34:	dec00104 	addi	sp,sp,4
    8d38:	f800283a 	ret

00008d3c <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
    8d3c:	defffd04 	addi	sp,sp,-12
    8d40:	df000215 	stw	fp,8(sp)
    8d44:	df000204 	addi	fp,sp,8
    8d48:	e13ffe15 	stw	r4,-8(fp)
    8d4c:	2805883a 	mov	r2,r5
    8d50:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
    8d54:	e0bfff03 	ldbu	r2,-4(fp)
    8d58:	10803c28 	cmpgeui	r2,r2,240
    8d5c:	1000031e 	bne	r2,zero,8d6c <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
    8d60:	e0bfff03 	ldbu	r2,-4(fp)
    8d64:	1004d13a 	srli	r2,r2,4
    8d68:	00000606 	br	8d84 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
    8d6c:	e0bfff03 	ldbu	r2,-4(fp)
    8d70:	10c003cc 	andi	r3,r2,15
    8d74:	008000b4 	movhi	r2,2
    8d78:	10986184 	addi	r2,r2,24966
    8d7c:	1885883a 	add	r2,r3,r2
    8d80:	10800003 	ldbu	r2,0(r2)
        };
    8d84:	e037883a 	mov	sp,fp
    8d88:	df000017 	ldw	fp,0(sp)
    8d8c:	dec00104 	addi	sp,sp,4
    8d90:	f800283a 	ret

00008d94 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
    8d94:	defffd04 	addi	sp,sp,-12
    8d98:	df000215 	stw	fp,8(sp)
    8d9c:	df000204 	addi	fp,sp,8
    8da0:	e13ffe15 	stw	r4,-8(fp)
    8da4:	2805883a 	mov	r2,r5
    8da8:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
    8dac:	e0ffff03 	ldbu	r3,-4(fp)
    8db0:	008000b4 	movhi	r2,2
    8db4:	10985d84 	addi	r2,r2,24950
    8db8:	1885883a 	add	r2,r3,r2
    8dbc:	10800003 	ldbu	r2,0(r2)
        };
    8dc0:	e037883a 	mov	sp,fp
    8dc4:	df000017 	ldw	fp,0(sp)
    8dc8:	dec00104 	addi	sp,sp,4
    8dcc:	f800283a 	ret

00008dd0 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
    8dd0:	defffe04 	addi	sp,sp,-8
    8dd4:	df000115 	stw	fp,4(sp)
    8dd8:	df000104 	addi	fp,sp,4
    8ddc:	e13fff15 	stw	r4,-4(fp)
    8de0:	e0bfff17 	ldw	r2,-4(fp)
    8de4:	10800303 	ldbu	r2,12(r2)
    8de8:	e037883a 	mov	sp,fp
    8dec:	df000017 	ldw	fp,0(sp)
    8df0:	dec00104 	addi	sp,sp,4
    8df4:	f800283a 	ret

00008df8 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
    8df8:	defffe04 	addi	sp,sp,-8
    8dfc:	df000115 	stw	fp,4(sp)
    8e00:	df000104 	addi	fp,sp,4
    8e04:	e13fff15 	stw	r4,-4(fp)
    8e08:	008000b4 	movhi	r2,2
    8e0c:	10987a04 	addi	r2,r2,25064
    8e10:	e0ffff17 	ldw	r3,-4(fp)
    8e14:	18800015 	stw	r2,0(r3)
    8e18:	0001883a 	nop
    8e1c:	e037883a 	mov	sp,fp
    8e20:	df000017 	ldw	fp,0(sp)
    8e24:	dec00104 	addi	sp,sp,4
    8e28:	f800283a 	ret

00008e2c <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
    8e2c:	defffd04 	addi	sp,sp,-12
    8e30:	df000215 	stw	fp,8(sp)
    8e34:	df000204 	addi	fp,sp,8
    8e38:	2005883a 	mov	r2,r4
    8e3c:	e17fff15 	stw	r5,-4(fp)
    8e40:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
    8e44:	0001883a 	nop
    8e48:	e037883a 	mov	sp,fp
    8e4c:	df000017 	ldw	fp,0(sp)
    8e50:	dec00104 	addi	sp,sp,4
    8e54:	f800283a 	ret

00008e58 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
    8e58:	deffe204 	addi	sp,sp,-120
    8e5c:	dfc01d15 	stw	ra,116(sp)
    8e60:	df001c15 	stw	fp,112(sp)
    8e64:	df001c04 	addi	fp,sp,112
    8e68:	e13ffd15 	stw	r4,-12(fp)
    8e6c:	2805883a 	mov	r2,r5
    8e70:	e1bfff15 	stw	r6,-4(fp)
    8e74:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
    8e78:	00801004 	movi	r2,64
    8e7c:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
    8e80:	e0bffd17 	ldw	r2,-12(fp)
    8e84:	11000217 	ldw	r4,8(r2)
    8e88:	e0bffd17 	ldw	r2,-12(fp)
    8e8c:	10800303 	ldbu	r2,12(r2)
    8e90:	11403fcc 	andi	r5,r2,255
    8e94:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
    8e98:	e0ffff17 	ldw	r3,-4(fp)
    8e9c:	d8c00715 	stw	r3,28(sp)
    8ea0:	e0ffec84 	addi	r3,fp,-78
    8ea4:	d8c00615 	stw	r3,24(sp)
    8ea8:	00c01004 	movi	r3,64
    8eac:	d8c00515 	stw	r3,20(sp)
    8eb0:	00c02004 	movi	r3,128
    8eb4:	d8c00415 	stw	r3,16(sp)
    8eb8:	d8800315 	stw	r2,12(sp)
    8ebc:	00800884 	movi	r2,34
    8ec0:	d8800215 	stw	r2,8(sp)
    8ec4:	d8000115 	stw	zero,4(sp)
    8ec8:	00800184 	movi	r2,6
    8ecc:	d8800015 	stw	r2,0(sp)
    8ed0:	01c02044 	movi	r7,129
    8ed4:	000d883a 	mov	r6,zero
    8ed8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
    8edc:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
    8ee0:	e0bfec43 	ldbu	r2,-79(fp)
}
    8ee4:	e037883a 	mov	sp,fp
    8ee8:	dfc00117 	ldw	ra,4(sp)
    8eec:	df000017 	ldw	fp,0(sp)
    8ef0:	dec00204 	addi	sp,sp,8
    8ef4:	f800283a 	ret

00008ef8 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8ef8:	defff004 	addi	sp,sp,-64
    8efc:	dfc00f15 	stw	ra,60(sp)
    8f00:	df000e15 	stw	fp,56(sp)
    8f04:	df000e04 	addi	fp,sp,56
    8f08:	e13ffa15 	stw	r4,-24(fp)
    8f0c:	2811883a 	mov	r8,r5
    8f10:	300b883a 	mov	r5,r6
    8f14:	3809883a 	mov	r4,r7
    8f18:	e0c00217 	ldw	r3,8(fp)
    8f1c:	e0800317 	ldw	r2,12(fp)
    8f20:	e23ffb05 	stb	r8,-20(fp)
    8f24:	e17ffc05 	stb	r5,-16(fp)
    8f28:	e13ffd05 	stb	r4,-12(fp)
    8f2c:	e0fffe05 	stb	r3,-8(fp)
    8f30:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8f34:	e0bffa17 	ldw	r2,-24(fp)
    8f38:	12000217 	ldw	r8,8(r2)
    8f3c:	e0bffa17 	ldw	r2,-24(fp)
    8f40:	10800303 	ldbu	r2,12(r2)
    8f44:	12403fcc 	andi	r9,r2,255
    8f48:	e2bffb03 	ldbu	r10,-20(fp)
    8f4c:	e0bffe03 	ldbu	r2,-8(fp)
    8f50:	e0fffd03 	ldbu	r3,-12(fp)
    8f54:	e13ffc03 	ldbu	r4,-16(fp)
    8f58:	e17fff0b 	ldhu	r5,-4(fp)
    8f5c:	e1bfff0b 	ldhu	r6,-4(fp)
    8f60:	d8000715 	stw	zero,28(sp)
    8f64:	e1c00417 	ldw	r7,16(fp)
    8f68:	d9c00615 	stw	r7,24(sp)
    8f6c:	d9800515 	stw	r6,20(sp)
    8f70:	d9400415 	stw	r5,16(sp)
    8f74:	d9000315 	stw	r4,12(sp)
    8f78:	d8c00215 	stw	r3,8(sp)
    8f7c:	d8800115 	stw	r2,4(sp)
    8f80:	00800244 	movi	r2,9
    8f84:	d8800015 	stw	r2,0(sp)
    8f88:	01c00844 	movi	r7,33
    8f8c:	500d883a 	mov	r6,r10
    8f90:	480b883a 	mov	r5,r9
    8f94:	4009883a 	mov	r4,r8
    8f98:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    8f9c:	e037883a 	mov	sp,fp
    8fa0:	dfc00117 	ldw	ra,4(sp)
    8fa4:	df000017 	ldw	fp,0(sp)
    8fa8:	dec00204 	addi	sp,sp,8
    8fac:	f800283a 	ret

00008fb0 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
    8fb0:	defff004 	addi	sp,sp,-64
    8fb4:	dfc00f15 	stw	ra,60(sp)
    8fb8:	df000e15 	stw	fp,56(sp)
    8fbc:	df000e04 	addi	fp,sp,56
    8fc0:	e13ffa15 	stw	r4,-24(fp)
    8fc4:	2811883a 	mov	r8,r5
    8fc8:	300b883a 	mov	r5,r6
    8fcc:	3809883a 	mov	r4,r7
    8fd0:	e0c00217 	ldw	r3,8(fp)
    8fd4:	e0800317 	ldw	r2,12(fp)
    8fd8:	e23ffb05 	stb	r8,-20(fp)
    8fdc:	e17ffc05 	stb	r5,-16(fp)
    8fe0:	e13ffd05 	stb	r4,-12(fp)
    8fe4:	e0fffe05 	stb	r3,-8(fp)
    8fe8:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
    8fec:	e0bffa17 	ldw	r2,-24(fp)
    8ff0:	12000217 	ldw	r8,8(r2)
    8ff4:	e0bffa17 	ldw	r2,-24(fp)
    8ff8:	10800303 	ldbu	r2,12(r2)
    8ffc:	12403fcc 	andi	r9,r2,255
    9000:	e2bffb03 	ldbu	r10,-20(fp)
    9004:	e0bffe03 	ldbu	r2,-8(fp)
    9008:	e0fffd03 	ldbu	r3,-12(fp)
    900c:	e13ffc03 	ldbu	r4,-16(fp)
    9010:	e17fff0b 	ldhu	r5,-4(fp)
    9014:	e1bfff0b 	ldhu	r6,-4(fp)
    9018:	d8000715 	stw	zero,28(sp)
    901c:	e1c00417 	ldw	r7,16(fp)
    9020:	d9c00615 	stw	r7,24(sp)
    9024:	d9800515 	stw	r6,20(sp)
    9028:	d9400415 	stw	r5,16(sp)
    902c:	d9000315 	stw	r4,12(sp)
    9030:	d8c00215 	stw	r3,8(sp)
    9034:	d8800115 	stw	r2,4(sp)
    9038:	00800044 	movi	r2,1
    903c:	d8800015 	stw	r2,0(sp)
    9040:	01c02844 	movi	r7,161
    9044:	500d883a 	mov	r6,r10
    9048:	480b883a 	mov	r5,r9
    904c:	4009883a 	mov	r4,r8
    9050:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9054:	e037883a 	mov	sp,fp
    9058:	dfc00117 	ldw	ra,4(sp)
    905c:	df000017 	ldw	fp,0(sp)
    9060:	dec00204 	addi	sp,sp,8
    9064:	f800283a 	ret

00009068 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
    9068:	defff204 	addi	sp,sp,-56
    906c:	dfc00d15 	stw	ra,52(sp)
    9070:	df000c15 	stw	fp,48(sp)
    9074:	df000c04 	addi	fp,sp,48
    9078:	e13ffc15 	stw	r4,-16(fp)
    907c:	2807883a 	mov	r3,r5
    9080:	3005883a 	mov	r2,r6
    9084:	e1ffff15 	stw	r7,-4(fp)
    9088:	e0fffd05 	stb	r3,-12(fp)
    908c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
    9090:	e0bffc17 	ldw	r2,-16(fp)
    9094:	12000217 	ldw	r8,8(r2)
    9098:	e0bffc17 	ldw	r2,-16(fp)
    909c:	10800303 	ldbu	r2,12(r2)
    90a0:	11403fcc 	andi	r5,r2,255
    90a4:	e0bffe03 	ldbu	r2,-8(fp)
    90a8:	e0fffd03 	ldbu	r3,-12(fp)
    90ac:	d8000715 	stw	zero,28(sp)
    90b0:	e13fff17 	ldw	r4,-4(fp)
    90b4:	d9000615 	stw	r4,24(sp)
    90b8:	01000044 	movi	r4,1
    90bc:	d9000515 	stw	r4,20(sp)
    90c0:	01000044 	movi	r4,1
    90c4:	d9000415 	stw	r4,16(sp)
    90c8:	d8c00315 	stw	r3,12(sp)
    90cc:	d8000215 	stw	zero,8(sp)
    90d0:	d8800115 	stw	r2,4(sp)
    90d4:	00800084 	movi	r2,2
    90d8:	d8800015 	stw	r2,0(sp)
    90dc:	01c02844 	movi	r7,161
    90e0:	000d883a 	mov	r6,zero
    90e4:	4009883a 	mov	r4,r8
    90e8:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    90ec:	e037883a 	mov	sp,fp
    90f0:	dfc00117 	ldw	ra,4(sp)
    90f4:	df000017 	ldw	fp,0(sp)
    90f8:	dec00204 	addi	sp,sp,8
    90fc:	f800283a 	ret

00009100 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
    9100:	defff204 	addi	sp,sp,-56
    9104:	dfc00d15 	stw	ra,52(sp)
    9108:	df000c15 	stw	fp,48(sp)
    910c:	df000c04 	addi	fp,sp,48
    9110:	e13ffc15 	stw	r4,-16(fp)
    9114:	2809883a 	mov	r4,r5
    9118:	3007883a 	mov	r3,r6
    911c:	3805883a 	mov	r2,r7
    9120:	e13ffd05 	stb	r4,-12(fp)
    9124:	e0fffe05 	stb	r3,-8(fp)
    9128:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
    912c:	e0bffc17 	ldw	r2,-16(fp)
    9130:	12000217 	ldw	r8,8(r2)
    9134:	e0bffc17 	ldw	r2,-16(fp)
    9138:	10800303 	ldbu	r2,12(r2)
    913c:	11403fcc 	andi	r5,r2,255
    9140:	e0bffe03 	ldbu	r2,-8(fp)
    9144:	e0ffff03 	ldbu	r3,-4(fp)
    9148:	e13ffd03 	ldbu	r4,-12(fp)
    914c:	d8000715 	stw	zero,28(sp)
    9150:	d8000615 	stw	zero,24(sp)
    9154:	d8000515 	stw	zero,20(sp)
    9158:	d8000415 	stw	zero,16(sp)
    915c:	d9000315 	stw	r4,12(sp)
    9160:	d8c00215 	stw	r3,8(sp)
    9164:	d8800115 	stw	r2,4(sp)
    9168:	00800284 	movi	r2,10
    916c:	d8800015 	stw	r2,0(sp)
    9170:	01c00844 	movi	r7,33
    9174:	000d883a 	mov	r6,zero
    9178:	4009883a 	mov	r4,r8
    917c:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9180:	e037883a 	mov	sp,fp
    9184:	dfc00117 	ldw	ra,4(sp)
    9188:	df000017 	ldw	fp,0(sp)
    918c:	dec00204 	addi	sp,sp,8
    9190:	f800283a 	ret

00009194 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
    9194:	defff304 	addi	sp,sp,-52
    9198:	dfc00c15 	stw	ra,48(sp)
    919c:	df000b15 	stw	fp,44(sp)
    91a0:	df000b04 	addi	fp,sp,44
    91a4:	e13ffd15 	stw	r4,-12(fp)
    91a8:	2807883a 	mov	r3,r5
    91ac:	3005883a 	mov	r2,r6
    91b0:	e0fffe05 	stb	r3,-8(fp)
    91b4:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
    91b8:	e0bffd17 	ldw	r2,-12(fp)
    91bc:	11000217 	ldw	r4,8(r2)
    91c0:	e0bffd17 	ldw	r2,-12(fp)
    91c4:	10800303 	ldbu	r2,12(r2)
    91c8:	11403fcc 	andi	r5,r2,255
    91cc:	e0bfff03 	ldbu	r2,-4(fp)
    91d0:	e0fffe03 	ldbu	r3,-8(fp)
    91d4:	d8000715 	stw	zero,28(sp)
    91d8:	d8000615 	stw	zero,24(sp)
    91dc:	d8000515 	stw	zero,20(sp)
    91e0:	d8000415 	stw	zero,16(sp)
    91e4:	d8c00315 	stw	r3,12(sp)
    91e8:	d8000215 	stw	zero,8(sp)
    91ec:	d8800115 	stw	r2,4(sp)
    91f0:	008002c4 	movi	r2,11
    91f4:	d8800015 	stw	r2,0(sp)
    91f8:	01c00844 	movi	r7,33
    91fc:	000d883a 	mov	r6,zero
    9200:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    9204:	e037883a 	mov	sp,fp
    9208:	dfc00117 	ldw	ra,4(sp)
    920c:	df000017 	ldw	fp,0(sp)
    9210:	dec00204 	addi	sp,sp,8
    9214:	f800283a 	ret

00009218 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
    9218:	defff304 	addi	sp,sp,-52
    921c:	dfc00c15 	stw	ra,48(sp)
    9220:	df000b15 	stw	fp,44(sp)
    9224:	df000b04 	addi	fp,sp,44
    9228:	e13ffd15 	stw	r4,-12(fp)
    922c:	2805883a 	mov	r2,r5
    9230:	e1bfff15 	stw	r6,-4(fp)
    9234:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
    9238:	e0bffd17 	ldw	r2,-12(fp)
    923c:	11000217 	ldw	r4,8(r2)
    9240:	e0bffd17 	ldw	r2,-12(fp)
    9244:	10800303 	ldbu	r2,12(r2)
    9248:	11403fcc 	andi	r5,r2,255
    924c:	e0bffe03 	ldbu	r2,-8(fp)
    9250:	d8000715 	stw	zero,28(sp)
    9254:	e0ffff17 	ldw	r3,-4(fp)
    9258:	d8c00615 	stw	r3,24(sp)
    925c:	00c00044 	movi	r3,1
    9260:	d8c00515 	stw	r3,20(sp)
    9264:	00c00044 	movi	r3,1
    9268:	d8c00415 	stw	r3,16(sp)
    926c:	d8800315 	stw	r2,12(sp)
    9270:	d8000215 	stw	zero,8(sp)
    9274:	d8000115 	stw	zero,4(sp)
    9278:	008000c4 	movi	r2,3
    927c:	d8800015 	stw	r2,0(sp)
    9280:	01c02844 	movi	r7,161
    9284:	000d883a 	mov	r6,zero
    9288:	0000b9c0 	call	b9c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
    928c:	e037883a 	mov	sp,fp
    9290:	dfc00117 	ldw	ra,4(sp)
    9294:	df000017 	ldw	fp,0(sp)
    9298:	dec00204 	addi	sp,sp,8
    929c:	f800283a 	ret

000092a0 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
    92a0:	defffc04 	addi	sp,sp,-16
    92a4:	dfc00315 	stw	ra,12(sp)
    92a8:	df000215 	stw	fp,8(sp)
    92ac:	df000204 	addi	fp,sp,8
    92b0:	e13ffe15 	stw	r4,-8(fp)
    92b4:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
    92b8:	e0bfff17 	ldw	r2,-4(fp)
    92bc:	10800003 	ldbu	r2,0(r2)
    92c0:	10803fcc 	andi	r2,r2,255
    92c4:	01402004 	movi	r5,128
    92c8:	1009883a 	mov	r4,r2
    92cc:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
    92d0:	e0bfff17 	ldw	r2,-4(fp)
    92d4:	10800043 	ldbu	r2,1(r2)
    92d8:	10803fcc 	andi	r2,r2,255
    92dc:	01402004 	movi	r5,128
    92e0:	1009883a 	mov	r4,r2
    92e4:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
    92e8:	e0bfff17 	ldw	r2,-4(fp)
    92ec:	10800083 	ldbu	r2,2(r2)
    92f0:	10803fcc 	andi	r2,r2,255
    92f4:	01402004 	movi	r5,128
    92f8:	1009883a 	mov	r4,r2
    92fc:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
    9300:	e0bfff17 	ldw	r2,-4(fp)
    9304:	108000c3 	ldbu	r2,3(r2)
    9308:	10803fcc 	andi	r2,r2,255
    930c:	01402004 	movi	r5,128
    9310:	1009883a 	mov	r4,r2
    9314:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
    9318:	e0bfff17 	ldw	r2,-4(fp)
    931c:	10c00103 	ldbu	r3,4(r2)
    9320:	10800143 	ldbu	r2,5(r2)
    9324:	1004923a 	slli	r2,r2,8
    9328:	10c4b03a 	or	r2,r2,r3
    932c:	10bfffcc 	andi	r2,r2,65535
    9330:	01402004 	movi	r5,128
    9334:	1009883a 	mov	r4,r2
    9338:	0008e2c0 	call	8e2c <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
    933c:	e0bfff17 	ldw	r2,-4(fp)
    9340:	10800183 	ldbu	r2,6(r2)
    9344:	10803fcc 	andi	r2,r2,255
    9348:	01402004 	movi	r5,128
    934c:	1009883a 	mov	r4,r2
    9350:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>
}
    9354:	0001883a 	nop
    9358:	e037883a 	mov	sp,fp
    935c:	dfc00117 	ldw	ra,4(sp)
    9360:	df000017 	ldw	fp,0(sp)
    9364:	dec00204 	addi	sp,sp,8
    9368:	f800283a 	ret

0000936c <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
    936c:	defffc04 	addi	sp,sp,-16
    9370:	dfc00315 	stw	ra,12(sp)
    9374:	df000215 	stw	fp,8(sp)
    9378:	df000204 	addi	fp,sp,8
    937c:	e13ffe15 	stw	r4,-8(fp)
    9380:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
    9384:	e0bfff17 	ldw	r2,-4(fp)
    9388:	10800003 	ldbu	r2,0(r2)
    938c:	10803fcc 	andi	r2,r2,255
    9390:	01402004 	movi	r5,128
    9394:	1009883a 	mov	r4,r2
    9398:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
    939c:	e0bfff17 	ldw	r2,-4(fp)
    93a0:	10800043 	ldbu	r2,1(r2)
    93a4:	10803fcc 	andi	r2,r2,255
    93a8:	01402004 	movi	r5,128
    93ac:	1009883a 	mov	r4,r2
    93b0:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
    93b4:	e0bfff17 	ldw	r2,-4(fp)
    93b8:	10c00083 	ldbu	r3,2(r2)
    93bc:	108000c3 	ldbu	r2,3(r2)
    93c0:	1004923a 	slli	r2,r2,8
    93c4:	10c4b03a 	or	r2,r2,r3
    93c8:	10bfffcc 	andi	r2,r2,65535
    93cc:	01402004 	movi	r5,128
    93d0:	1009883a 	mov	r4,r2
    93d4:	0008e2c0 	call	8e2c <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
    93d8:	e0bfff17 	ldw	r2,-4(fp)
    93dc:	10800103 	ldbu	r2,4(r2)
    93e0:	10803fcc 	andi	r2,r2,255
    93e4:	01402004 	movi	r5,128
    93e8:	1009883a 	mov	r4,r2
    93ec:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
    93f0:	e0bfff17 	ldw	r2,-4(fp)
    93f4:	10800143 	ldbu	r2,5(r2)
    93f8:	10803fcc 	andi	r2,r2,255
    93fc:	01402004 	movi	r5,128
    9400:	1009883a 	mov	r4,r2
    9404:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
    9408:	e0bfff17 	ldw	r2,-4(fp)
    940c:	10800183 	ldbu	r2,6(r2)
    9410:	10803fcc 	andi	r2,r2,255
    9414:	01402004 	movi	r5,128
    9418:	1009883a 	mov	r4,r2
    941c:	0002aa00 	call	2aa0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
    9420:	e0bfff17 	ldw	r2,-4(fp)
    9424:	10c001c3 	ldbu	r3,7(r2)
    9428:	10800203 	ldbu	r2,8(r2)
    942c:	1004923a 	slli	r2,r2,8
    9430:	10c4b03a 	or	r2,r2,r3
    9434:	10bfffcc 	andi	r2,r2,65535
    9438:	01402004 	movi	r5,128
    943c:	1009883a 	mov	r4,r2
    9440:	0008e2c0 	call	8e2c <_Z10D_PrintHexItEvT_i>
}
    9444:	0001883a 	nop
    9448:	e037883a 	mov	sp,fp
    944c:	dfc00117 	ldw	ra,4(sp)
    9450:	df000017 	ldw	fp,0(sp)
    9454:	dec00204 	addi	sp,sp,8
    9458:	f800283a 	ret

0000945c <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
    945c:	defffd04 	addi	sp,sp,-12
    9460:	dfc00215 	stw	ra,8(sp)
    9464:	df000115 	stw	fp,4(sp)
    9468:	df000104 	addi	fp,sp,4
    946c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
    9470:	010000f4 	movhi	r4,3
    9474:	2120c204 	addi	r4,r4,-31992
    9478:	000ef180 	call	ef18 <puts>
	vbusState = 0;
    947c:	d0323f45 	stb	zero,-14083(gp)
};
    9480:	0001883a 	nop
    9484:	e037883a 	mov	sp,fp
    9488:	dfc00117 	ldw	ra,4(sp)
    948c:	df000017 	ldw	fp,0(sp)
    9490:	dec00204 	addi	sp,sp,8
    9494:	f800283a 	ret

00009498 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
    9498:	defffe04 	addi	sp,sp,-8
    949c:	df000115 	stw	fp,4(sp)
    94a0:	df000104 	addi	fp,sp,4
    94a4:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
    94a8:	d0b23f43 	ldbu	r2,-14083(gp)
};
    94ac:	e037883a 	mov	sp,fp
    94b0:	df000017 	ldw	fp,0(sp)
    94b4:	dec00104 	addi	sp,sp,4
    94b8:	f800283a 	ret

000094bc <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
    94bc:	defff704 	addi	sp,sp,-36
    94c0:	dfc00815 	stw	ra,32(sp)
    94c4:	df000715 	stw	fp,28(sp)
    94c8:	df000704 	addi	fp,sp,28
    94cc:	e13ffd15 	stw	r4,-12(fp)
    94d0:	2807883a 	mov	r3,r5
    94d4:	3005883a 	mov	r2,r6
    94d8:	e0fffe05 	stb	r3,-8(fp)
    94dc:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
    94e0:	e03ffc45 	stb	zero,-15(fp)
    94e4:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
    94e8:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    94ec:	e0bffe03 	ldbu	r2,-8(fp)
    94f0:	10800084 	addi	r2,r2,2
    94f4:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
    94f8:	e0bfff03 	ldbu	r2,-4(fp)
    94fc:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
    9500:	e0fffc44 	addi	r3,fp,-15
    9504:	d8000215 	stw	zero,8(sp)
    9508:	e0bffcc4 	addi	r2,fp,-13
    950c:	d8800115 	stw	r2,4(sp)
    9510:	d8000015 	stw	zero,0(sp)
    9514:	180f883a 	mov	r7,r3
    9518:	01800084 	movi	r6,2
    951c:	000b883a 	mov	r5,zero
    9520:	01010034 	movhi	r4,1024
    9524:	21044804 	addi	r4,r4,4384
    9528:	002216c0 	call	2216c <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
    952c:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
    9530:	0001883a 	nop
    9534:	e037883a 	mov	sp,fp
    9538:	dfc00117 	ldw	ra,4(sp)
    953c:	df000017 	ldw	fp,0(sp)
    9540:	dec00204 	addi	sp,sp,8
    9544:	f800283a 	ret

00009548 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9548:	defff304 	addi	sp,sp,-52
    954c:	dfc00c15 	stw	ra,48(sp)
    9550:	df000b15 	stw	fp,44(sp)
    9554:	dc000a15 	stw	r16,40(sp)
    9558:	df000b04 	addi	fp,sp,44
    955c:	e13ffb15 	stw	r4,-20(fp)
    9560:	3009883a 	mov	r4,r6
    9564:	e1fffe15 	stw	r7,-8(fp)
    9568:	e17ffc05 	stb	r5,-16(fp)
    956c:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9570:	d809883a 	mov	r4,sp
    9574:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
    9578:	e13ffd03 	ldbu	r4,-12(fp)
    957c:	e13ff815 	stw	r4,-32(fp)
    9580:	200b883a 	mov	r5,r4
    9584:	29400044 	addi	r5,r5,1
    9588:	2819883a 	mov	r12,r5
    958c:	001b883a 	mov	r13,zero
    9590:	600ad77a 	srli	r5,r12,29
    9594:	681290fa 	slli	r9,r13,3
    9598:	2a52b03a 	or	r9,r5,r9
    959c:	601090fa 	slli	r8,r12,3
    95a0:	200b883a 	mov	r5,r4
    95a4:	29400044 	addi	r5,r5,1
    95a8:	2815883a 	mov	r10,r5
    95ac:	0017883a 	mov	r11,zero
    95b0:	500ad77a 	srli	r5,r10,29
    95b4:	580690fa 	slli	r3,r11,3
    95b8:	28c6b03a 	or	r3,r5,r3
    95bc:	500490fa 	slli	r2,r10,3
    95c0:	2005883a 	mov	r2,r4
    95c4:	10800044 	addi	r2,r2,1
    95c8:	108000c4 	addi	r2,r2,3
    95cc:	1004d0ba 	srli	r2,r2,2
    95d0:	1085883a 	add	r2,r2,r2
    95d4:	1085883a 	add	r2,r2,r2
    95d8:	d8b7c83a 	sub	sp,sp,r2
    95dc:	d8800304 	addi	r2,sp,12
    95e0:	1005883a 	mov	r2,r2
    95e4:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
    95e8:	e0bffc03 	ldbu	r2,-16(fp)
    95ec:	10800084 	addi	r2,r2,2
    95f0:	1007883a 	mov	r3,r2
    95f4:	e0bff917 	ldw	r2,-28(fp)
    95f8:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
    95fc:	e0bff917 	ldw	r2,-28(fp)
    9600:	10800044 	addi	r2,r2,1
    9604:	e0fffd03 	ldbu	r3,-12(fp)
    9608:	180d883a 	mov	r6,r3
    960c:	e17ffe17 	ldw	r5,-8(fp)
    9610:	1009883a 	mov	r4,r2
    9614:	000eb5c0 	call	eb5c <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
    9618:	e0bffd03 	ldbu	r2,-12(fp)
    961c:	10800044 	addi	r2,r2,1
    9620:	1009883a 	mov	r4,r2
    9624:	e0fff917 	ldw	r3,-28(fp)
    9628:	d8000215 	stw	zero,8(sp)
    962c:	e0bffa44 	addi	r2,fp,-23
    9630:	d8800115 	stw	r2,4(sp)
    9634:	d8000015 	stw	zero,0(sp)
    9638:	180f883a 	mov	r7,r3
    963c:	200d883a 	mov	r6,r4
    9640:	000b883a 	mov	r5,zero
    9644:	01010034 	movhi	r4,1024
    9648:	21044804 	addi	r4,r4,4384
    964c:	002216c0 	call	2216c <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
    9650:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
    9654:	e0bffd03 	ldbu	r2,-12(fp)
    9658:	e0fffe17 	ldw	r3,-8(fp)
    965c:	1885883a 	add	r2,r3,r2
    9660:	8037883a 	mov	sp,r16
}
    9664:	e6ffff04 	addi	sp,fp,-4
    9668:	dfc00217 	ldw	ra,8(sp)
    966c:	df000117 	ldw	fp,4(sp)
    9670:	dc000017 	ldw	r16,0(sp)
    9674:	dec00304 	addi	sp,sp,12
    9678:	f800283a 	ret

0000967c <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
    967c:	defffc04 	addi	sp,sp,-16
    9680:	dfc00315 	stw	ra,12(sp)
    9684:	df000215 	stw	fp,8(sp)
    9688:	df000204 	addi	fp,sp,8
    968c:	e13ffe15 	stw	r4,-8(fp)
    9690:	2805883a 	mov	r2,r5
    9694:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
    9698:	010000f4 	movhi	r4,3
    969c:	2120c804 	addi	r4,r4,-31968
    96a0:	000ef180 	call	ef18 <puts>
	regWr(rIOPINS1, data);
    96a4:	e0bfff03 	ldbu	r2,-4(fp)
    96a8:	100d883a 	mov	r6,r2
    96ac:	01402804 	movi	r5,160
    96b0:	e13ffe17 	ldw	r4,-8(fp)
    96b4:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
    96b8:	e0bfff03 	ldbu	r2,-4(fp)
    96bc:	1005d13a 	srai	r2,r2,4
    96c0:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
    96c4:	e0bfff03 	ldbu	r2,-4(fp)
    96c8:	100d883a 	mov	r6,r2
    96cc:	01402a04 	movi	r5,168
    96d0:	e13ffe17 	ldw	r4,-8(fp)
    96d4:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	return;
    96d8:	0001883a 	nop
}
    96dc:	e037883a 	mov	sp,fp
    96e0:	dfc00117 	ldw	ra,4(sp)
    96e4:	df000017 	ldw	fp,0(sp)
    96e8:	dec00204 	addi	sp,sp,8
    96ec:	f800283a 	ret

000096f0 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
    96f0:	defff804 	addi	sp,sp,-32
    96f4:	dfc00715 	stw	ra,28(sp)
    96f8:	df000615 	stw	fp,24(sp)
    96fc:	df000604 	addi	fp,sp,24
    9700:	e13ffe15 	stw	r4,-8(fp)
    9704:	2805883a 	mov	r2,r5
    9708:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    970c:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
    9710:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9714:	e0bfff03 	ldbu	r2,-4(fp)
    9718:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    971c:	e0fffd44 	addi	r3,fp,-11
    9720:	d8000215 	stw	zero,8(sp)
    9724:	e0bffd84 	addi	r2,fp,-10
    9728:	d8800115 	stw	r2,4(sp)
    972c:	00800044 	movi	r2,1
    9730:	d8800015 	stw	r2,0(sp)
    9734:	180f883a 	mov	r7,r3
    9738:	01800044 	movi	r6,1
    973c:	000b883a 	mov	r5,zero
    9740:	01010034 	movhi	r4,1024
    9744:	21044804 	addi	r4,r4,4384
    9748:	002216c0 	call	2216c <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
    974c:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
    9750:	e0bffd83 	ldbu	r2,-10(fp)
}
    9754:	e037883a 	mov	sp,fp
    9758:	dfc00117 	ldw	ra,4(sp)
    975c:	df000017 	ldw	fp,0(sp)
    9760:	dec00204 	addi	sp,sp,8
    9764:	f800283a 	ret

00009768 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
    9768:	defff604 	addi	sp,sp,-40
    976c:	dfc00915 	stw	ra,36(sp)
    9770:	df000815 	stw	fp,32(sp)
    9774:	df000804 	addi	fp,sp,32
    9778:	e13ffc15 	stw	r4,-16(fp)
    977c:	2807883a 	mov	r3,r5
    9780:	3005883a 	mov	r2,r6
    9784:	e1ffff15 	stw	r7,-4(fp)
    9788:	e0fffd05 	stb	r3,-12(fp)
    978c:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
    9790:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
    9794:	e0bffd03 	ldbu	r2,-12(fp)
    9798:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
    979c:	e0bffe03 	ldbu	r2,-8(fp)
    97a0:	e13ffb44 	addi	r4,fp,-19
    97a4:	d8000215 	stw	zero,8(sp)
    97a8:	e0ffff17 	ldw	r3,-4(fp)
    97ac:	d8c00115 	stw	r3,4(sp)
    97b0:	d8800015 	stw	r2,0(sp)
    97b4:	200f883a 	mov	r7,r4
    97b8:	01800044 	movi	r6,1
    97bc:	000b883a 	mov	r5,zero
    97c0:	01010034 	movhi	r4,1024
    97c4:	21044804 	addi	r4,r4,4384
    97c8:	002216c0 	call	2216c <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
    97cc:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
    97d0:	e0bffe03 	ldbu	r2,-8(fp)
    97d4:	e0ffff17 	ldw	r3,-4(fp)
    97d8:	1885883a 	add	r2,r3,r2
}
    97dc:	e037883a 	mov	sp,fp
    97e0:	dfc00117 	ldw	ra,4(sp)
    97e4:	df000017 	ldw	fp,0(sp)
    97e8:	dec00204 	addi	sp,sp,8
    97ec:	f800283a 	ret

000097f0 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
    97f0:	defffc04 	addi	sp,sp,-16
    97f4:	dfc00315 	stw	ra,12(sp)
    97f8:	df000215 	stw	fp,8(sp)
    97fc:	df000204 	addi	fp,sp,8
    9800:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
    9804:	010000f4 	movhi	r4,3
    9808:	2120cc04 	addi	r4,r4,-31952
    980c:	000ef180 	call	ef18 <puts>
	uint8_t gpin = 0;
    9810:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
    9814:	01402a04 	movi	r5,168
    9818:	e13fff17 	ldw	r4,-4(fp)
    981c:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9820:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
    9824:	e0fffe03 	ldbu	r3,-8(fp)
    9828:	00bffc04 	movi	r2,-16
    982c:	1884703a 	and	r2,r3,r2
    9830:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
    9834:	01402804 	movi	r5,160
    9838:	e13fff17 	ldw	r4,-4(fp)
    983c:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9840:	10803fcc 	andi	r2,r2,255
    9844:	1005d13a 	srai	r2,r2,4
    9848:	1007883a 	mov	r3,r2
    984c:	e0bffe03 	ldbu	r2,-8(fp)
    9850:	1884b03a 	or	r2,r3,r2
    9854:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
    9858:	e0bffe03 	ldbu	r2,-8(fp)
}
    985c:	e037883a 	mov	sp,fp
    9860:	dfc00117 	ldw	ra,4(sp)
    9864:	df000017 	ldw	fp,0(sp)
    9868:	dec00204 	addi	sp,sp,8
    986c:	f800283a 	ret

00009870 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
    9870:	defffc04 	addi	sp,sp,-16
    9874:	dfc00315 	stw	ra,12(sp)
    9878:	df000215 	stw	fp,8(sp)
    987c:	df000204 	addi	fp,sp,8
    9880:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
    9884:	010000f4 	movhi	r4,3
    9888:	2120d004 	addi	r4,r4,-31936
    988c:	000ef180 	call	ef18 <puts>
	uint8_t gpout = 0;
    9890:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
    9894:	01402804 	movi	r5,160
    9898:	e13fff17 	ldw	r4,-4(fp)
    989c:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    98a0:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
    98a4:	e0bffe03 	ldbu	r2,-8(fp)
    98a8:	108003cc 	andi	r2,r2,15
    98ac:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
    98b0:	01402a04 	movi	r5,168
    98b4:	e13fff17 	ldw	r4,-4(fp)
    98b8:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    98bc:	10803fcc 	andi	r2,r2,255
    98c0:	1004913a 	slli	r2,r2,4
    98c4:	1007883a 	mov	r3,r2
    98c8:	e0bffe03 	ldbu	r2,-8(fp)
    98cc:	1884b03a 	or	r2,r3,r2
    98d0:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
    98d4:	e0bffe03 	ldbu	r2,-8(fp)
}
    98d8:	e037883a 	mov	sp,fp
    98dc:	dfc00117 	ldw	ra,4(sp)
    98e0:	df000017 	ldw	fp,0(sp)
    98e4:	dec00204 	addi	sp,sp,8
    98e8:	f800283a 	ret

000098ec <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
    98ec:	defffc04 	addi	sp,sp,-16
    98f0:	dfc00315 	stw	ra,12(sp)
    98f4:	df000215 	stw	fp,8(sp)
    98f8:	df000204 	addi	fp,sp,8
    98fc:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
    9900:	010000f4 	movhi	r4,3
    9904:	2120d604 	addi	r4,r4,-31912
    9908:	000ef180 	call	ef18 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
    990c:	0007883a 	mov	r3,zero
    9910:	00810034 	movhi	r2,1024
    9914:	10847404 	addi	r2,r2,4560
    9918:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
    991c:	010003f4 	movhi	r4,15
    9920:	21109004 	addi	r4,r4,16960
    9924:	001f8a00 	call	1f8a0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
    9928:	00c00044 	movi	r3,1
    992c:	00810034 	movhi	r2,1024
    9930:	10847404 	addi	r2,r2,4560
    9934:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
    9938:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
    993c:	01800804 	movi	r6,32
    9940:	01401e04 	movi	r5,120
    9944:	e13fff17 	ldw	r4,-4(fp)
    9948:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
    994c:	000d883a 	mov	r6,zero
    9950:	01401e04 	movi	r5,120
    9954:	e13fff17 	ldw	r4,-4(fp)
    9958:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	while(++i) {
    995c:	e0bffe0b 	ldhu	r2,-8(fp)
    9960:	10800044 	addi	r2,r2,1
    9964:	e0bffe0d 	sth	r2,-8(fp)
    9968:	e0bffe0b 	ldhu	r2,-8(fp)
    996c:	1004c03a 	cmpne	r2,r2,zero
    9970:	10803fcc 	andi	r2,r2,255
    9974:	10000a26 	beq	r2,zero,99a0 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    9978:	01401a04 	movi	r5,104
    997c:	e13fff17 	ldw	r4,-4(fp)
    9980:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9984:	10803fcc 	andi	r2,r2,255
    9988:	1080004c 	andi	r2,r2,1
    998c:	1004c03a 	cmpne	r2,r2,zero
    9990:	10803fcc 	andi	r2,r2,255
    9994:	1000011e 	bne	r2,zero,999c <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
    9998:	003ff006 	br	995c <__alt_data_end+0xfc00995c>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
    999c:	0001883a 	nop
		}
	}
	return ( i);
    99a0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    99a4:	e037883a 	mov	sp,fp
    99a8:	dfc00117 	ldw	ra,4(sp)
    99ac:	df000017 	ldw	fp,0(sp)
    99b0:	dec00204 	addi	sp,sp,8
    99b4:	f800283a 	ret

000099b8 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
    99b8:	defffe04 	addi	sp,sp,-8
    99bc:	df000115 	stw	fp,4(sp)
    99c0:	df000104 	addi	fp,sp,4
    99c4:	2005883a 	mov	r2,r4
    99c8:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
    99cc:	00800044 	movi	r2,1
}
    99d0:	e037883a 	mov	sp,fp
    99d4:	df000017 	ldw	fp,0(sp)
    99d8:	dec00104 	addi	sp,sp,4
    99dc:	f800283a 	ret

000099e0 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
    99e0:	defffd04 	addi	sp,sp,-12
    99e4:	dfc00215 	stw	ra,8(sp)
    99e8:	df000115 	stw	fp,4(sp)
    99ec:	df000104 	addi	fp,sp,4
    99f0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
    99f4:	010000f4 	movhi	r4,3
    99f8:	2120da04 	addi	r4,r4,-31896
    99fc:	000ef180 	call	ef18 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9a00:	01800604 	movi	r6,24
    9a04:	01402204 	movi	r5,136
    9a08:	e13fff17 	ldw	r4,-4(fp)
    9a0c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9a10:	e13fff17 	ldw	r4,-4(fp)
    9a14:	00098ec0 	call	98ec <_ZN8MAX3421e5resetEv>
    9a18:	10bfffcc 	andi	r2,r2,65535
    9a1c:	1005003a 	cmpeq	r2,r2,zero
    9a20:	10803fcc 	andi	r2,r2,255
    9a24:	10000226 	beq	r2,zero,9a30 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
    9a28:	00bfffc4 	movi	r2,-1
    9a2c:	00002006 	br	9ab0 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9a30:	01803044 	movi	r6,193
    9a34:	01403604 	movi	r5,216
    9a38:	e13fff17 	ldw	r4,-4(fp)
    9a3c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9a40:	01801804 	movi	r6,96
    9a44:	01403404 	movi	r5,208
    9a48:	e13fff17 	ldw	r4,-4(fp)
    9a4c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9a50:	01800104 	movi	r6,4
    9a54:	01403a04 	movi	r5,232
    9a58:	e13fff17 	ldw	r4,-4(fp)
    9a5c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9a60:	01403a04 	movi	r5,232
    9a64:	e13fff17 	ldw	r4,-4(fp)
    9a68:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9a6c:	10803fcc 	andi	r2,r2,255
    9a70:	1080010c 	andi	r2,r2,4
    9a74:	1005003a 	cmpeq	r2,r2,zero
    9a78:	10803fcc 	andi	r2,r2,255
    9a7c:	10000126 	beq	r2,zero,9a84 <_ZN8MAX3421e4InitEv+0xa4>
    9a80:	003ff706 	br	9a60 <__alt_data_end+0xfc009a60>

	busprobe(); //check if anything is connected
    9a84:	e13fff17 	ldw	r4,-4(fp)
    9a88:	0009bdc0 	call	9bdc <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9a8c:	01800804 	movi	r6,32
    9a90:	01403204 	movi	r5,200
    9a94:	e13fff17 	ldw	r4,-4(fp)
    9a98:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9a9c:	01800044 	movi	r6,1
    9aa0:	01402004 	movi	r5,128
    9aa4:	e13fff17 	ldw	r4,-4(fp)
    9aa8:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
    9aac:	0005883a 	mov	r2,zero
}
    9ab0:	e037883a 	mov	sp,fp
    9ab4:	dfc00117 	ldw	ra,4(sp)
    9ab8:	df000017 	ldw	fp,0(sp)
    9abc:	dec00204 	addi	sp,sp,8
    9ac0:	f800283a 	ret

00009ac4 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
    9ac4:	defffc04 	addi	sp,sp,-16
    9ac8:	dfc00315 	stw	ra,12(sp)
    9acc:	df000215 	stw	fp,8(sp)
    9ad0:	df000204 	addi	fp,sp,8
    9ad4:	e13ffe15 	stw	r4,-8(fp)
    9ad8:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
    9adc:	010000f4 	movhi	r4,3
    9ae0:	2120de04 	addi	r4,r4,-31880
    9ae4:	000ef180 	call	ef18 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
    9ae8:	01800644 	movi	r6,25
    9aec:	01402204 	movi	r5,136
    9af0:	e13ffe17 	ldw	r4,-8(fp)
    9af4:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    9af8:	e13ffe17 	ldw	r4,-8(fp)
    9afc:	00098ec0 	call	98ec <_ZN8MAX3421e5resetEv>
    9b00:	10bfffcc 	andi	r2,r2,65535
    9b04:	1005003a 	cmpeq	r2,r2,zero
    9b08:	10803fcc 	andi	r2,r2,255
    9b0c:	10000226 	beq	r2,zero,9b18 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
    9b10:	00bfffc4 	movi	r2,-1
    9b14:	00002c06 	br	9bc8 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
    9b18:	e0bfff17 	ldw	r2,-4(fp)
    9b1c:	1080fa08 	cmpgei	r2,r2,1000
    9b20:	1000021e 	bne	r2,zero,9b2c <_ZN8MAX3421e4InitEi+0x68>
    9b24:	0080fa04 	movi	r2,1000
    9b28:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
    9b2c:	e0bfff17 	ldw	r2,-4(fp)
    9b30:	1009883a 	mov	r4,r2
    9b34:	00006840 	call	684 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    9b38:	01803044 	movi	r6,193
    9b3c:	01403604 	movi	r5,216
    9b40:	e13ffe17 	ldw	r4,-8(fp)
    9b44:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    9b48:	01801804 	movi	r6,96
    9b4c:	01403404 	movi	r5,208
    9b50:	e13ffe17 	ldw	r4,-8(fp)
    9b54:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    9b58:	01800104 	movi	r6,4
    9b5c:	01403a04 	movi	r5,232
    9b60:	e13ffe17 	ldw	r4,-8(fp)
    9b64:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    9b68:	01403a04 	movi	r5,232
    9b6c:	e13ffe17 	ldw	r4,-8(fp)
    9b70:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9b74:	10803fcc 	andi	r2,r2,255
    9b78:	1080010c 	andi	r2,r2,4
    9b7c:	1005003a 	cmpeq	r2,r2,zero
    9b80:	10803fcc 	andi	r2,r2,255
    9b84:	10000126 	beq	r2,zero,9b8c <_ZN8MAX3421e4InitEi+0xc8>
    9b88:	003ff706 	br	9b68 <__alt_data_end+0xfc009b68>

	busprobe(); //check if anything is connected
    9b8c:	e13ffe17 	ldw	r4,-8(fp)
    9b90:	0009bdc0 	call	9bdc <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    9b94:	01800804 	movi	r6,32
    9b98:	01403204 	movi	r5,200
    9b9c:	e13ffe17 	ldw	r4,-8(fp)
    9ba0:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
    9ba4:	01800044 	movi	r6,1
    9ba8:	01402004 	movi	r5,128
    9bac:	e13ffe17 	ldw	r4,-8(fp)
    9bb0:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    9bb4:	01800604 	movi	r6,24
    9bb8:	01402204 	movi	r5,136
    9bbc:	e13ffe17 	ldw	r4,-8(fp)
    9bc0:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>

	return ( 0);
    9bc4:	0005883a 	mov	r2,zero
}
    9bc8:	e037883a 	mov	sp,fp
    9bcc:	dfc00117 	ldw	ra,4(sp)
    9bd0:	df000017 	ldw	fp,0(sp)
    9bd4:	dec00204 	addi	sp,sp,8
    9bd8:	f800283a 	ret

00009bdc <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
    9bdc:	defffc04 	addi	sp,sp,-16
    9be0:	dfc00315 	stw	ra,12(sp)
    9be4:	df000215 	stw	fp,8(sp)
    9be8:	df000204 	addi	fp,sp,8
    9bec:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
    9bf0:	010000f4 	movhi	r4,3
    9bf4:	2120e404 	addi	r4,r4,-31856
    9bf8:	000ef180 	call	ef18 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
    9bfc:	01403e04 	movi	r5,248
    9c00:	e13fff17 	ldw	r4,-4(fp)
    9c04:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9c08:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    9c0c:	e0fffe03 	ldbu	r3,-8(fp)
    9c10:	00bff004 	movi	r2,-64
    9c14:	1884703a 	and	r2,r3,r2
    9c18:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
    9c1c:	e0bffe03 	ldbu	r2,-8(fp)
    9c20:	10c01020 	cmpeqi	r3,r2,64
    9c24:	1800251e 	bne	r3,zero,9cbc <_ZN8MAX3421e8busprobeEv+0xe0>
    9c28:	10c01048 	cmpgei	r3,r2,65
    9c2c:	1800021e 	bne	r3,zero,9c38 <_ZN8MAX3421e8busprobeEv+0x5c>
    9c30:	10003b26 	beq	r2,zero,9d20 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9c34:	00004006 	br	9d38 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
    9c38:	10c02020 	cmpeqi	r3,r2,128
    9c3c:	1800031e 	bne	r3,zero,9c4c <_ZN8MAX3421e8busprobeEv+0x70>
    9c40:	10803020 	cmpeqi	r2,r2,192
    9c44:	1000331e 	bne	r2,zero,9d14 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
    9c48:	00003b06 	br	9d38 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9c4c:	01403604 	movi	r5,216
    9c50:	e13fff17 	ldw	r4,-4(fp)
    9c54:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9c58:	10803fcc 	andi	r2,r2,255
    9c5c:	1080008c 	andi	r2,r2,2
    9c60:	1005003a 	cmpeq	r2,r2,zero
    9c64:	10803fcc 	andi	r2,r2,255
    9c68:	10000a26 	beq	r2,zero,9c94 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
    9c6c:	010000f4 	movhi	r4,3
    9c70:	2120e904 	addi	r4,r4,-31836
    9c74:	000ef180 	call	ef18 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9c78:	01803244 	movi	r6,201
    9c7c:	01403604 	movi	r5,216
    9c80:	e13fff17 	ldw	r4,-4(fp)
    9c84:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9c88:	00800084 	movi	r2,2
    9c8c:	d0b23f45 	stb	r2,-14083(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
    9c90:	00002906 	br	9d38 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
    9c94:	010000f4 	movhi	r4,3
    9c98:	2120f004 	addi	r4,r4,-31808
    9c9c:	000ef180 	call	ef18 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9ca0:	018032c4 	movi	r6,203
    9ca4:	01403604 	movi	r5,216
    9ca8:	e13fff17 	ldw	r4,-4(fp)
    9cac:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9cb0:	008000c4 	movi	r2,3
    9cb4:	d0b23f45 	stb	r2,-14083(gp)
			}
			break;
    9cb8:	00001f06 	br	9d38 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
    9cbc:	01403604 	movi	r5,216
    9cc0:	e13fff17 	ldw	r4,-4(fp)
    9cc4:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9cc8:	10803fcc 	andi	r2,r2,255
    9ccc:	1080008c 	andi	r2,r2,2
    9cd0:	1005003a 	cmpeq	r2,r2,zero
    9cd4:	10803fcc 	andi	r2,r2,255
    9cd8:	10000726 	beq	r2,zero,9cf8 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
    9cdc:	018032c4 	movi	r6,203
    9ce0:	01403604 	movi	r5,216
    9ce4:	e13fff17 	ldw	r4,-4(fp)
    9ce8:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
    9cec:	008000c4 	movi	r2,3
    9cf0:	d0b23f45 	stb	r2,-14083(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
    9cf4:	00001006 	br	9d38 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
    9cf8:	01803244 	movi	r6,201
    9cfc:	01403604 	movi	r5,216
    9d00:	e13fff17 	ldw	r4,-4(fp)
    9d04:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
    9d08:	00800084 	movi	r2,2
    9d0c:	d0b23f45 	stb	r2,-14083(gp)
			}
			break;
    9d10:	00000906 	br	9d38 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
    9d14:	00800044 	movi	r2,1
    9d18:	d0b23f45 	stb	r2,-14083(gp)
			break;
    9d1c:	00000606 	br	9d38 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    9d20:	01803444 	movi	r6,209
    9d24:	01403604 	movi	r5,216
    9d28:	e13fff17 	ldw	r4,-4(fp)
    9d2c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
    9d30:	d0323f45 	stb	zero,-14083(gp)
			break;
    9d34:	0001883a 	nop
	}//end switch( bus_sample )
}
    9d38:	0001883a 	nop
    9d3c:	e037883a 	mov	sp,fp
    9d40:	dfc00117 	ldw	ra,4(sp)
    9d44:	df000017 	ldw	fp,0(sp)
    9d48:	dec00204 	addi	sp,sp,8
    9d4c:	f800283a 	ret

00009d50 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
    9d50:	defffc04 	addi	sp,sp,-16
    9d54:	dfc00315 	stw	ra,12(sp)
    9d58:	df000215 	stw	fp,8(sp)
    9d5c:	df000204 	addi	fp,sp,8
    9d60:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
    9d64:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
    9d68:	00810034 	movhi	r2,1024
    9d6c:	10847c04 	addi	r2,r2,4592
    9d70:	10800003 	ldbu	r2,0(r2)
    9d74:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
    9d78:	00810034 	movhi	r2,1024
    9d7c:	10847c04 	addi	r2,r2,4592
    9d80:	10800037 	ldwio	r2,0(r2)
    9d84:	1005003a 	cmpeq	r2,r2,zero
    9d88:	10803fcc 	andi	r2,r2,255
    9d8c:	10000326 	beq	r2,zero,9d9c <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
    9d90:	e13fff17 	ldw	r4,-4(fp)
    9d94:	0009db40 	call	9db4 <_ZN8MAX3421e10IntHandlerEv>
    9d98:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
    9d9c:	e0bffe03 	ldbu	r2,-8(fp)
}
    9da0:	e037883a 	mov	sp,fp
    9da4:	dfc00117 	ldw	ra,4(sp)
    9da8:	df000017 	ldw	fp,0(sp)
    9dac:	dec00204 	addi	sp,sp,8
    9db0:	f800283a 	ret

00009db4 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
    9db4:	defffc04 	addi	sp,sp,-16
    9db8:	dfc00315 	stw	ra,12(sp)
    9dbc:	df000215 	stw	fp,8(sp)
    9dc0:	df000204 	addi	fp,sp,8
    9dc4:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
    9dc8:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
    9dcc:	01403204 	movi	r5,200
    9dd0:	e13fff17 	ldw	r4,-4(fp)
    9dd4:	00096f00 	call	96f0 <_ZN8MAX3421e5regRdEh>
    9dd8:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
    9ddc:	e0bffe43 	ldbu	r2,-7(fp)
    9de0:	1080080c 	andi	r2,r2,32
    9de4:	10000526 	beq	r2,zero,9dfc <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
    9de8:	e13fff17 	ldw	r4,-4(fp)
    9dec:	0009bdc0 	call	9bdc <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
    9df0:	e0bffe03 	ldbu	r2,-8(fp)
    9df4:	10800814 	ori	r2,r2,32
    9df8:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
    9dfc:	e0bffe03 	ldbu	r2,-8(fp)
    9e00:	100d883a 	mov	r6,r2
    9e04:	01403204 	movi	r5,200
    9e08:	e13fff17 	ldw	r4,-4(fp)
    9e0c:	00094bc0 	call	94bc <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
    9e10:	e0bffe03 	ldbu	r2,-8(fp)
}
    9e14:	e037883a 	mov	sp,fp
    9e18:	dfc00117 	ldw	ra,4(sp)
    9e1c:	df000017 	ldw	fp,0(sp)
    9e20:	dec00204 	addi	sp,sp,8
    9e24:	f800283a 	ret

00009e28 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
    9e28:	defffe04 	addi	sp,sp,-8
    9e2c:	df000115 	stw	fp,4(sp)
    9e30:	df000104 	addi	fp,sp,4
    9e34:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
    9e38:	0005883a 	mov	r2,zero
}
    9e3c:	e037883a 	mov	sp,fp
    9e40:	df000017 	ldw	fp,0(sp)
    9e44:	dec00104 	addi	sp,sp,4
    9e48:	f800283a 	ret

00009e4c <_Z6onInitv>:
ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure

void MIDI_poll();

void onInit()
{
    9e4c:	defff804 	addi	sp,sp,-32
    9e50:	dfc00715 	stw	ra,28(sp)
    9e54:	df000615 	stw	fp,24(sp)
    9e58:	df000604 	addi	fp,sp,24
  char buf[20];
  uint16_t vid = Midi.idVendor();
    9e5c:	010000f4 	movhi	r4,3
    9e60:	21041b04 	addi	r4,r4,4204
    9e64:	000a3140 	call	a314 <_ZN9USBH_MIDI8idVendorEv>
    9e68:	e0bffa0d 	sth	r2,-24(fp)
  uint16_t pid = Midi.idProduct();
    9e6c:	010000f4 	movhi	r4,3
    9e70:	21041b04 	addi	r4,r4,4204
    9e74:	000a33c0 	call	a33c <_ZN9USBH_MIDI9idProductEv>
    9e78:	e0bffa8d 	sth	r2,-22(fp)
  sprintf(buf, "VID:%04X, PID:%04X", vid, pid);
    9e7c:	e0fffa0b 	ldhu	r3,-24(fp)
    9e80:	e13ffa8b 	ldhu	r4,-22(fp)
    9e84:	e0bffb04 	addi	r2,fp,-20
    9e88:	200f883a 	mov	r7,r4
    9e8c:	180d883a 	mov	r6,r3
    9e90:	014000f4 	movhi	r5,3
    9e94:	29692c04 	addi	r5,r5,-23376
    9e98:	1009883a 	mov	r4,r2
    9e9c:	000f2dc0 	call	f2dc <sprintf>
  printf("%s\n", buf);
    9ea0:	e0bffb04 	addi	r2,fp,-20
    9ea4:	1009883a 	mov	r4,r2
    9ea8:	000ef180 	call	ef18 <puts>
}
    9eac:	0001883a 	nop
    9eb0:	e037883a 	mov	sp,fp
    9eb4:	dfc00117 	ldw	ra,4(sp)
    9eb8:	df000017 	ldw	fp,0(sp)
    9ebc:	dec00204 	addi	sp,sp,8
    9ec0:	f800283a 	ret

00009ec4 <_Z10MIDI_setupv>:

void MIDI_setup()
{
    9ec4:	defffe04 	addi	sp,sp,-8
    9ec8:	dfc00115 	stw	ra,4(sp)
    9ecc:	df000015 	stw	fp,0(sp)
    9ed0:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
    9ed4:	010000f4 	movhi	r4,3
    9ed8:	2103ec04 	addi	r4,r4,4016
    9edc:	00099e00 	call	99e0 <_ZN8MAX3421e4InitEv>
    9ee0:	10803fcc 	andi	r2,r2,255
    9ee4:	1080201c 	xori	r2,r2,128
    9ee8:	10bfe004 	addi	r2,r2,-128
    9eec:	10bfffe0 	cmpeqi	r2,r2,-1
    9ef0:	10803fcc 	andi	r2,r2,255
    9ef4:	10000326 	beq	r2,zero,9f04 <_Z10MIDI_setupv+0x40>
		printf ("Error\n\r");
    9ef8:	010000f4 	movhi	r4,3
    9efc:	21293104 	addi	r4,r4,-23356
    9f00:	000edfc0 	call	edfc <printf>
	printf ("USB Started\n\r");
    9f04:	010000f4 	movhi	r4,3
    9f08:	21293304 	addi	r4,r4,-23348
    9f0c:	000edfc0 	call	edfc <printf>

	// Register onInit() function
	Midi.attachOnInit(onInit);
    9f10:	01400074 	movhi	r5,1
    9f14:	29679304 	addi	r5,r5,-25012
    9f18:	010000f4 	movhi	r4,3
    9f1c:	21041b04 	addi	r4,r4,4204
    9f20:	000a3640 	call	a364 <_ZN9USBH_MIDI12attachOnInitEPFvvE>
}
    9f24:	0001883a 	nop
    9f28:	e037883a 	mov	sp,fp
    9f2c:	dfc00117 	ldw	ra,4(sp)
    9f30:	df000017 	ldw	fp,0(sp)
    9f34:	dec00204 	addi	sp,sp,8
    9f38:	f800283a 	ret

00009f3c <_Z9MIDI_pollv>:

// Poll USB MIDI Controller and send to serial MIDI
void MIDI_poll()
{
    9f3c:	deffec04 	addi	sp,sp,-80
    9f40:	dfc01315 	stw	ra,76(sp)
    9f44:	df001215 	stw	fp,72(sp)
    9f48:	df001204 	addi	fp,sp,72
  uint8_t note, vel;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    9f4c:	e0ffef84 	addi	r3,fp,-66
    9f50:	e0bfff84 	addi	r2,fp,-2
    9f54:	180d883a 	mov	r6,r3
    9f58:	100b883a 	mov	r5,r2
    9f5c:	010000f4 	movhi	r4,3
    9f60:	21041b04 	addi	r4,r4,4204
    9f64:	0007a100 	call	7a10 <_ZN9USBH_MIDI8RecvDataEPtPh>
    9f68:	10803fcc 	andi	r2,r2,255
    9f6c:	1005003a 	cmpeq	r2,r2,zero
    9f70:	10803fcc 	andi	r2,r2,255
    9f74:	10003026 	beq	r2,zero,a038 <_Z9MIDI_pollv+0xfc>
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    9f78:	e03fee15 	stw	zero,-72(fp)
    9f7c:	e0bfee17 	ldw	r2,-72(fp)
    9f80:	10801008 	cmpgei	r2,r2,64
    9f84:	10002c1e 	bne	r2,zero,a038 <_Z9MIDI_pollv+0xfc>
    	if (bufMidi[i] == 0x90) {
    9f88:	e0ffef84 	addi	r3,fp,-66
    9f8c:	e0bfee17 	ldw	r2,-72(fp)
    9f90:	1885883a 	add	r2,r3,r2
    9f94:	10800003 	ldbu	r2,0(r2)
    9f98:	10803fcc 	andi	r2,r2,255
    9f9c:	10802418 	cmpnei	r2,r2,144
    9fa0:	1000211e 	bne	r2,zero,a028 <_Z9MIDI_pollv+0xec>
    		note = bufMidi[i+1];
    9fa4:	e0bfee17 	ldw	r2,-72(fp)
    9fa8:	10800044 	addi	r2,r2,1
    9fac:	e0ffef84 	addi	r3,fp,-66
    9fb0:	1885883a 	add	r2,r3,r2
    9fb4:	10800003 	ldbu	r2,0(r2)
    9fb8:	e0bfef05 	stb	r2,-68(fp)
    		vel = bufMidi[i+2];
    9fbc:	e0bfee17 	ldw	r2,-72(fp)
    9fc0:	10800084 	addi	r2,r2,2
    9fc4:	e0ffef84 	addi	r3,fp,-66
    9fc8:	1885883a 	add	r2,r3,r2
    9fcc:	10800003 	ldbu	r2,0(r2)
    9fd0:	e0bfef45 	stb	r2,-67(fp)
    		i += 2;
    9fd4:	e0bfee17 	ldw	r2,-72(fp)
    9fd8:	10800084 	addi	r2,r2,2
    9fdc:	e0bfee15 	stw	r2,-72(fp)

    		set_note(note, vel);
    9fe0:	e0bfef03 	ldbu	r2,-68(fp)
    9fe4:	e0ffef43 	ldbu	r3,-67(fp)
    9fe8:	180b883a 	mov	r5,r3
    9fec:	1009883a 	mov	r4,r2
    9ff0:	000528c0 	call	528c <_Z8set_notehh>

        	if(vel == 0) {
    9ff4:	e0bfef43 	ldbu	r2,-67(fp)
    9ff8:	1000061e 	bne	r2,zero,a014 <_Z9MIDI_pollv+0xd8>
        		printf("Note Off:	%d\n", note);
    9ffc:	e0bfef03 	ldbu	r2,-68(fp)
    a000:	100b883a 	mov	r5,r2
    a004:	010000f4 	movhi	r4,3
    a008:	21293704 	addi	r4,r4,-23332
    a00c:	000edfc0 	call	edfc <printf>
    a010:	00000506 	br	a028 <_Z9MIDI_pollv+0xec>
        	}
        	else {
        		printf("Note On:	%d\n", note);
    a014:	e0bfef03 	ldbu	r2,-68(fp)
    a018:	100b883a 	mov	r5,r2
    a01c:	010000f4 	movhi	r4,3
    a020:	21293b04 	addi	r4,r4,-23316
    a024:	000edfc0 	call	edfc <printf>
  uint8_t note, vel;
  uint8_t bufMidi[MIDI_EVENT_PACKET_SIZE];
  uint16_t  rcvd;

  if (Midi.RecvData( &rcvd,  bufMidi) == 0 ) {
    for (int i = 0; i < MIDI_EVENT_PACKET_SIZE; i++) {\
    a028:	e0bfee17 	ldw	r2,-72(fp)
    a02c:	10800044 	addi	r2,r2,1
    a030:	e0bfee15 	stw	r2,-72(fp)
    a034:	003fd106 	br	9f7c <__alt_data_end+0xfc009f7c>
        	}

    	}
    }
  }
}
    a038:	0001883a 	nop
    a03c:	e037883a 	mov	sp,fp
    a040:	dfc00117 	ldw	ra,4(sp)
    a044:	df000017 	ldw	fp,0(sp)
    a048:	dec00204 	addi	sp,sp,8
    a04c:	f800283a 	ret

0000a050 <_Z7controlv>:

void control() {
    a050:	defffd04 	addi	sp,sp,-12
    a054:	dfc00215 	stw	ra,8(sp)
    a058:	df000115 	stw	fp,4(sp)
    a05c:	df000104 	addi	fp,sp,4
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
    a060:	00810034 	movhi	r2,1024
    a064:	10848804 	addi	r2,r2,4640
    a068:	10800037 	ldwio	r2,0(r2)
    a06c:	e0bfff05 	stb	r2,-4(fp)
	if ((~con & 0x1) && (~con & 0x2)) {
    a070:	e0bfff03 	ldbu	r2,-4(fp)
    a074:	1080004c 	andi	r2,r2,1
    a078:	1000031e 	bne	r2,zero,a088 <_Z7controlv+0x38>
    a07c:	e0bfff03 	ldbu	r2,-4(fp)
    a080:	1080008c 	andi	r2,r2,2
    a084:	10000e26 	beq	r2,zero,a0c0 <_Z7controlv+0x70>
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
    a088:	e0bfff03 	ldbu	r2,-4(fp)
    a08c:	1080004c 	andi	r2,r2,1
    a090:	1000041e 	bne	r2,zero,a0a4 <_Z7controlv+0x54>
    a094:	d0b24017 	ldw	r2,-14080(gp)
    a098:	1009883a 	mov	r4,r2
    a09c:	0006d9c0 	call	6d9c <_Z14SGTL5000vol_upP20ALT_AVALON_I2C_DEV_s>
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
}
    a0a0:	00000706 	br	a0c0 <_Z7controlv+0x70>
	uint8_t con;
	con = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
	if ((~con & 0x1) && (~con & 0x2)) {
	}
	else if (~con & 0x1) SGTL5000vol_up(i2c_dev);
	else if (~con & 0x2) SGTL5000vol_down(i2c_dev);
    a0a4:	e0bfff03 	ldbu	r2,-4(fp)
    a0a8:	1080008c 	andi	r2,r2,2
    a0ac:	1000041e 	bne	r2,zero,a0c0 <_Z7controlv+0x70>
    a0b0:	d0b24017 	ldw	r2,-14080(gp)
    a0b4:	1009883a 	mov	r4,r2
    a0b8:	0006e700 	call	6e70 <_Z16SGTL5000vol_downP20ALT_AVALON_I2C_DEV_s>
}
    a0bc:	00000006 	br	a0c0 <_Z7controlv+0x70>
    a0c0:	0001883a 	nop
    a0c4:	e037883a 	mov	sp,fp
    a0c8:	dfc00117 	ldw	ra,4(sp)
    a0cc:	df000017 	ldw	fp,0(sp)
    a0d0:	dec00204 	addi	sp,sp,8
    a0d4:	f800283a 	ret

0000a0d8 <main>:

int main() {
    a0d8:	defffb04 	addi	sp,sp,-20
    a0dc:	dfc00415 	stw	ra,16(sp)
    a0e0:	df000315 	stw	fp,12(sp)
    a0e4:	df000304 	addi	fp,sp,12

	uint8_t timer;
	alt_u16 att_m_seconds = 4000;
    a0e8:	0083e804 	movi	r2,4000
    a0ec:	e0bffd8d 	sth	r2,-10(fp)
	alt_u16 dec_m_seconds = 4000;
    a0f0:	0083e804 	movi	r2,4000
    a0f4:	e0bffe0d 	sth	r2,-8(fp)
	alt_u16 rel_m_seconds = 4000;
    a0f8:	0083e804 	movi	r2,4000
    a0fc:	e0bffe8d 	sth	r2,-6(fp)
	float peak_amp = 1.8;
    a100:	008ff9b4 	movhi	r2,16358
    a104:	10999984 	addi	r2,r2,26214
    a108:	e0bfff15 	stw	r2,-4(fp)

	printf("Initializing SGTL5000...\n");
    a10c:	010000f4 	movhi	r4,3
    a110:	21293f04 	addi	r4,r4,-23300
    a114:	000ef180 	call	ef18 <puts>

	//get a pointer to the avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
    a118:	010000f4 	movhi	r4,3
    a11c:	21294604 	addi	r4,r4,-23272
    a120:	001fe280 	call	1fe28 <alt_avalon_i2c_open>
    a124:	d0b24015 	stw	r2,-14080(gp)
	if (NULL==i2c_dev) printf("Error: Cannot find /dev/i2c_0\n");
    a128:	d0b24017 	ldw	r2,-14080(gp)
    a12c:	1000031e 	bne	r2,zero,a13c <main+0x64>
    a130:	010000f4 	movhi	r4,3
    a134:	21294904 	addi	r4,r4,-23260
    a138:	000ef180 	call	ef18 <puts>

	//set up registers
	SGTL5000init(i2c_dev);
    a13c:	d0b24017 	ldw	r2,-14080(gp)
    a140:	1009883a 	mov	r4,r2
    a144:	0006aec0 	call	6aec <_Z12SGTL5000initP20ALT_AVALON_I2C_DEV_s>

	printf("Starting audio...\n");
    a148:	010000f4 	movhi	r4,3
    a14c:	21295104 	addi	r4,r4,-23228
    a150:	000ef180 	call	ef18 <puts>
	SGTL5000audio_on(i2c_dev);
    a154:	d0b24017 	ldw	r2,-14080(gp)
    a158:	1009883a 	mov	r4,r2
    a15c:	0006b840 	call	6b84 <_Z16SGTL5000audio_onP20ALT_AVALON_I2C_DEV_s>
	I2Creg_wr(i2c_dev, ANA_TEST1, TM_SELECT_MIC | TESTMODE);
	I2Creg_wr(i2c_dev, ANA_POWER, DAC_MONO | LINREG_SIMPLE_POWERUP | STARTUP_POWERUP | VDDC_CHRGPMP_POWERUP | LINREG_D_POWERUP | ADC_MONO | REFTOP_POWERUP | HEADPHONE_POWERUP | VAG_POWERUP | DAC_POWERUP_ANA | CAPLESS_HEADPHONE_POWERUP | ADC_POWERUP_ANA);
	I2Creg_wr(i2c_dev, ADCDAC_CTRL, VOL_RAMP_EN | !DAC_MUTE_RIGHT | !DAC_MUTE_LEFT);
	*/

	SGTL5000status(i2c_dev);
    a160:	d0b24017 	ldw	r2,-14080(gp)
    a164:	1009883a 	mov	r4,r2
    a168:	0006bf00 	call	6bf0 <_Z14SGTL5000statusP20ALT_AVALON_I2C_DEV_s>

	printf("Audio running\n");
    a16c:	010000f4 	movhi	r4,3
    a170:	21295604 	addi	r4,r4,-23208
    a174:	000ef180 	call	ef18 <puts>

	printf("Initializing ADSR...\n");
    a178:	010000f4 	movhi	r4,3
    a17c:	21295a04 	addi	r4,r4,-23192
    a180:	000ef180 	call	ef18 <puts>

	calc_adsr(att_m_seconds, dec_m_seconds, rel_m_seconds, peak_amp);
    a184:	e0bffd8b 	ldhu	r2,-10(fp)
    a188:	e0fffe0b 	ldhu	r3,-8(fp)
    a18c:	e13ffe8b 	ldhu	r4,-6(fp)
    a190:	e1ffff17 	ldw	r7,-4(fp)
    a194:	200d883a 	mov	r6,r4
    a198:	180b883a 	mov	r5,r3
    a19c:	1009883a 	mov	r4,r2
    a1a0:	00053540 	call	5354 <_Z9calc_adsrtttf>

	printf("ADSR set\n");
    a1a4:	010000f4 	movhi	r4,3
    a1a8:	21296004 	addi	r4,r4,-23168
    a1ac:	000ef180 	call	ef18 <puts>

	MIDI_setup();
    a1b0:	0009ec40 	call	9ec4 <_Z10MIDI_setupv>

	printf("MIDI set\n");
    a1b4:	010000f4 	movhi	r4,3
    a1b8:	21296304 	addi	r4,r4,-23156
    a1bc:	000ef180 	call	ef18 <puts>

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a1c0:	010000f4 	movhi	r4,3
    a1c4:	2103ec04 	addi	r4,r4,4016
    a1c8:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a1cc:	10803fcc 	andi	r2,r2,255
    a1d0:	10802418 	cmpnei	r2,r2,144
    a1d4:	10803fcc 	andi	r2,r2,255
    a1d8:	10000c26 	beq	r2,zero,a20c <main+0x134>
		Usb.Task();
    a1dc:	010000f4 	movhi	r4,3
    a1e0:	2103ec04 	addi	r4,r4,4016
    a1e4:	000181c0 	call	181c <_ZN3USB4TaskEv>
        printf("%X\n", Usb.getUsbTaskState());
    a1e8:	010000f4 	movhi	r4,3
    a1ec:	2103ec04 	addi	r4,r4,4016
    a1f0:	00007880 	call	788 <_ZN3USB15getUsbTaskStateEv>
    a1f4:	10803fcc 	andi	r2,r2,255
    a1f8:	100b883a 	mov	r5,r2
    a1fc:	010000f4 	movhi	r4,3
    a200:	21296604 	addi	r4,r4,-23144
    a204:	000edfc0 	call	edfc <printf>

	MIDI_setup();

	printf("MIDI set\n");

	while (Usb.getUsbTaskState() != USB_STATE_RUNNING) {
    a208:	003fed06 	br	a1c0 <__alt_data_end+0xfc00a1c0>
		Usb.Task();
        printf("%X\n", Usb.getUsbTaskState());
	}

	printf("USB running\n");
    a20c:	010000f4 	movhi	r4,3
    a210:	21296704 	addi	r4,r4,-23140
    a214:	000ef180 	call	ef18 <puts>

	while(1) {
		if ( Midi ) {
    a218:	010000f4 	movhi	r4,3
    a21c:	21041b04 	addi	r4,r4,4204
    a220:	000a2ec0 	call	a2ec <_ZN9USBH_MIDIcvbEv>
    a224:	10803fcc 	andi	r2,r2,255
    a228:	10000126 	beq	r2,zero,a230 <main+0x158>
			MIDI_poll();
    a22c:	0009f3c0 	call	9f3c <_Z9MIDI_pollv>
		}
		timer ++;
    a230:	e0bffd03 	ldbu	r2,-12(fp)
    a234:	10800044 	addi	r2,r2,1
    a238:	e0bffd05 	stb	r2,-12(fp)
		if (timer & 0x70) {
    a23c:	e0bffd03 	ldbu	r2,-12(fp)
    a240:	10801c0c 	andi	r2,r2,112
    a244:	103ff426 	beq	r2,zero,a218 <__alt_data_end+0xfc00a218>
			control();
    a248:	000a0500 	call	a050 <_Z7controlv>
			timer = 0;
    a24c:	e03ffd05 	stb	zero,-12(fp)
        printf("%X\n", Usb.getUsbTaskState());
	}

	printf("USB running\n");

	while(1) {
    a250:	003ff106 	br	a218 <__alt_data_end+0xfc00a218>

0000a254 <_Z41__static_initialization_and_destruction_0ii>:
			timer = 0;
		}
	}

	printf("Ended");
}
    a254:	defffc04 	addi	sp,sp,-16
    a258:	dfc00315 	stw	ra,12(sp)
    a25c:	df000215 	stw	fp,8(sp)
    a260:	df000204 	addi	fp,sp,8
    a264:	e13ffe15 	stw	r4,-8(fp)
    a268:	e17fff15 	stw	r5,-4(fp)
    a26c:	e0bffe17 	ldw	r2,-8(fp)
    a270:	10800058 	cmpnei	r2,r2,1
    a274:	10000b1e 	bne	r2,zero,a2a4 <_Z41__static_initialization_and_destruction_0ii+0x50>
    a278:	e0ffff17 	ldw	r3,-4(fp)
    a27c:	00bfffd4 	movui	r2,65535
    a280:	1880081e 	bne	r3,r2,a2a4 <_Z41__static_initialization_and_destruction_0ii+0x50>
 * This is sample program. Do not expect perfect behavior.
 *******************************************************************************
 */


USB Usb;
    a284:	010000f4 	movhi	r4,3
    a288:	2103ec04 	addi	r4,r4,4016
    a28c:	00007040 	call	704 <_ZN3USBC1Ev>
//USBHub Hub(&Usb);
USBH_MIDI  Midi(&Usb);
    a290:	014000f4 	movhi	r5,3
    a294:	2943ec04 	addi	r5,r5,4016
    a298:	010000f4 	movhi	r4,3
    a29c:	21041b04 	addi	r4,r4,4204
    a2a0:	0006ef00 	call	6ef0 <_ZN9USBH_MIDIC1EP3USB>
			timer = 0;
		}
	}

	printf("Ended");
}
    a2a4:	0001883a 	nop
    a2a8:	e037883a 	mov	sp,fp
    a2ac:	dfc00117 	ldw	ra,4(sp)
    a2b0:	df000017 	ldw	fp,0(sp)
    a2b4:	dec00204 	addi	sp,sp,8
    a2b8:	f800283a 	ret

0000a2bc <_GLOBAL__sub_I_Usb>:
    a2bc:	defffe04 	addi	sp,sp,-8
    a2c0:	dfc00115 	stw	ra,4(sp)
    a2c4:	df000015 	stw	fp,0(sp)
    a2c8:	d839883a 	mov	fp,sp
    a2cc:	017fffd4 	movui	r5,65535
    a2d0:	01000044 	movi	r4,1
    a2d4:	000a2540 	call	a254 <_Z41__static_initialization_and_destruction_0ii>
    a2d8:	e037883a 	mov	sp,fp
    a2dc:	dfc00117 	ldw	ra,4(sp)
    a2e0:	df000017 	ldw	fp,0(sp)
    a2e4:	dec00204 	addi	sp,sp,8
    a2e8:	f800283a 	ret

0000a2ec <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
    a2ec:	defffe04 	addi	sp,sp,-8
    a2f0:	df000115 	stw	fp,4(sp)
    a2f4:	df000104 	addi	fp,sp,4
    a2f8:	e13fff15 	stw	r4,-4(fp)
    a2fc:	e0bfff17 	ldw	r2,-4(fp)
    a300:	10800343 	ldbu	r2,13(r2)
    a304:	e037883a 	mov	sp,fp
    a308:	df000017 	ldw	fp,0(sp)
    a30c:	dec00104 	addi	sp,sp,4
    a310:	f800283a 	ret

0000a314 <_ZN9USBH_MIDI8idVendorEv>:
        uint16_t idVendor() { return vid; }
    a314:	defffe04 	addi	sp,sp,-8
    a318:	df000115 	stw	fp,4(sp)
    a31c:	df000104 	addi	fp,sp,4
    a320:	e13fff15 	stw	r4,-4(fp)
    a324:	e0bfff17 	ldw	r2,-4(fp)
    a328:	1080040b 	ldhu	r2,16(r2)
    a32c:	e037883a 	mov	sp,fp
    a330:	df000017 	ldw	fp,0(sp)
    a334:	dec00104 	addi	sp,sp,4
    a338:	f800283a 	ret

0000a33c <_ZN9USBH_MIDI9idProductEv>:
        uint16_t idProduct() { return pid; }
    a33c:	defffe04 	addi	sp,sp,-8
    a340:	df000115 	stw	fp,4(sp)
    a344:	df000104 	addi	fp,sp,4
    a348:	e13fff15 	stw	r4,-4(fp)
    a34c:	e0bfff17 	ldw	r2,-4(fp)
    a350:	1080038b 	ldhu	r2,14(r2)
    a354:	e037883a 	mov	sp,fp
    a358:	df000017 	ldw	fp,0(sp)
    a35c:	dec00104 	addi	sp,sp,4
    a360:	f800283a 	ret

0000a364 <_ZN9USBH_MIDI12attachOnInitEPFvvE>:
        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };

        void attachOnInit(void (*funcOnInit)(void)) {
    a364:	defffd04 	addi	sp,sp,-12
    a368:	df000215 	stw	fp,8(sp)
    a36c:	df000204 	addi	fp,sp,8
    a370:	e13ffe15 	stw	r4,-8(fp)
    a374:	e17fff15 	stw	r5,-4(fp)
                pFuncOnInit = funcOnInit;
    a378:	e0bffe17 	ldw	r2,-8(fp)
    a37c:	e0ffff17 	ldw	r3,-4(fp)
    a380:	10c01815 	stw	r3,96(r2)
        };
    a384:	0001883a 	nop
    a388:	e037883a 	mov	sp,fp
    a38c:	df000017 	ldw	fp,0(sp)
    a390:	dec00104 	addi	sp,sp,4
    a394:	f800283a 	ret

0000a398 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    a398:	008000f4 	movhi	r2,3
    a39c:	10a97904 	addi	r2,r2,-23068
    a3a0:	20800015 	stw	r2,0(r4)
    a3a4:	000b1701 	jmpi	b170 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a3a8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    a3a8:	defffe04 	addi	sp,sp,-8
    a3ac:	008000f4 	movhi	r2,3
    a3b0:	dc000015 	stw	r16,0(sp)
    a3b4:	dfc00115 	stw	ra,4(sp)
    a3b8:	10a97904 	addi	r2,r2,-23068
    a3bc:	20800015 	stw	r2,0(r4)
    a3c0:	2021883a 	mov	r16,r4
    a3c4:	000b1700 	call	b170 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a3c8:	8009883a 	mov	r4,r16
    a3cc:	dfc00117 	ldw	ra,4(sp)
    a3d0:	dc000017 	ldw	r16,0(sp)
    a3d4:	dec00204 	addi	sp,sp,8
    a3d8:	000b09c1 	jmpi	b09c <_ZdlPv>

0000a3dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a3dc:	defff504 	addi	sp,sp,-44
    a3e0:	dc000115 	stw	r16,4(sp)
    a3e4:	38800117 	ldw	r2,4(r7)
    a3e8:	24000117 	ldw	r16,4(r4)
    a3ec:	df000915 	stw	fp,36(sp)
    a3f0:	ddc00815 	stw	r23,32(sp)
    a3f4:	dd800715 	stw	r22,28(sp)
    a3f8:	dcc00415 	stw	r19,16(sp)
    a3fc:	dc800315 	stw	r18,12(sp)
    a400:	dc400215 	stw	r17,8(sp)
    a404:	dfc00a15 	stw	ra,40(sp)
    a408:	dd400615 	stw	r21,24(sp)
    a40c:	dd000515 	stw	r20,20(sp)
    a410:	2823883a 	mov	r17,r5
    a414:	3039883a 	mov	fp,r6
    a418:	dcc00b17 	ldw	r19,44(sp)
    a41c:	ddc00c17 	ldw	r23,48(sp)
    a420:	dd800d17 	ldw	r22,52(sp)
    a424:	dc800e17 	ldw	r18,56(sp)
    a428:	80800b26 	beq	r16,r2,a458 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    a42c:	80c00007 	ldb	r3,0(r16)
    a430:	2029883a 	mov	r20,r4
    a434:	01000a84 	movi	r4,42
    a438:	382b883a 	mov	r21,r7
    a43c:	19001a26 	beq	r3,r4,a4a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a440:	100b883a 	mov	r5,r2
    a444:	8009883a 	mov	r4,r16
    a448:	d8c00015 	stw	r3,0(sp)
    a44c:	000f3480 	call	f348 <strcmp>
    a450:	d8c00017 	ldw	r3,0(sp)
    a454:	1000141e 	bne	r2,zero,a4a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    a458:	94c00015 	stw	r19,0(r18)
    a45c:	97000115 	stw	fp,4(r18)
    a460:	88002816 	blt	r17,zero,a504 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    a464:	9c63883a 	add	r17,r19,r17
    a468:	b4403226 	beq	r22,r17,a534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    a46c:	00800044 	movi	r2,1
    a470:	90800315 	stw	r2,12(r18)
    a474:	0005883a 	mov	r2,zero
    a478:	dfc00a17 	ldw	ra,40(sp)
    a47c:	df000917 	ldw	fp,36(sp)
    a480:	ddc00817 	ldw	r23,32(sp)
    a484:	dd800717 	ldw	r22,28(sp)
    a488:	dd400617 	ldw	r21,24(sp)
    a48c:	dd000517 	ldw	r20,20(sp)
    a490:	dcc00417 	ldw	r19,16(sp)
    a494:	dc800317 	ldw	r18,12(sp)
    a498:	dc400217 	ldw	r17,8(sp)
    a49c:	dc000117 	ldw	r16,4(sp)
    a4a0:	dec00b04 	addi	sp,sp,44
    a4a4:	f800283a 	ret
    a4a8:	9d801926 	beq	r19,r22,a510 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    a4ac:	a1000217 	ldw	r4,8(r20)
    a4b0:	a80f883a 	mov	r7,r21
    a4b4:	e00d883a 	mov	r6,fp
    a4b8:	20800017 	ldw	r2,0(r4)
    a4bc:	dc800e15 	stw	r18,56(sp)
    a4c0:	dd800d15 	stw	r22,52(sp)
    a4c4:	ddc00c15 	stw	r23,48(sp)
    a4c8:	dcc00b15 	stw	r19,44(sp)
    a4cc:	10800717 	ldw	r2,28(r2)
    a4d0:	880b883a 	mov	r5,r17
    a4d4:	dfc00a17 	ldw	ra,40(sp)
    a4d8:	df000917 	ldw	fp,36(sp)
    a4dc:	ddc00817 	ldw	r23,32(sp)
    a4e0:	dd800717 	ldw	r22,28(sp)
    a4e4:	dd400617 	ldw	r21,24(sp)
    a4e8:	dd000517 	ldw	r20,20(sp)
    a4ec:	dcc00417 	ldw	r19,16(sp)
    a4f0:	dc800317 	ldw	r18,12(sp)
    a4f4:	dc400217 	ldw	r17,8(sp)
    a4f8:	dc000117 	ldw	r16,4(sp)
    a4fc:	dec00b04 	addi	sp,sp,44
    a500:	1000683a 	jmp	r2
    a504:	00bfff84 	movi	r2,-2
    a508:	88bfda1e 	bne	r17,r2,a474 <__alt_data_end+0xfc00a474>
    a50c:	003fd706 	br	a46c <__alt_data_end+0xfc00a46c>
    a510:	b9400117 	ldw	r5,4(r23)
    a514:	81400526 	beq	r16,r5,a52c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    a518:	00800a84 	movi	r2,42
    a51c:	18bfe326 	beq	r3,r2,a4ac <__alt_data_end+0xfc00a4ac>
    a520:	8009883a 	mov	r4,r16
    a524:	000f3480 	call	f348 <strcmp>
    a528:	103fe01e 	bne	r2,zero,a4ac <__alt_data_end+0xfc00a4ac>
    a52c:	97000215 	stw	fp,8(r18)
    a530:	003fd006 	br	a474 <__alt_data_end+0xfc00a474>
    a534:	00800184 	movi	r2,6
    a538:	003fcd06 	br	a470 <__alt_data_end+0xfc00a470>

0000a53c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a53c:	defffa04 	addi	sp,sp,-24
    a540:	dc000215 	stw	r16,8(sp)
    a544:	dc000617 	ldw	r16,24(sp)
    a548:	dc800415 	stw	r18,16(sp)
    a54c:	dc400315 	stw	r17,12(sp)
    a550:	dfc00515 	stw	ra,20(sp)
    a554:	2023883a 	mov	r17,r4
    a558:	2825883a 	mov	r18,r5
    a55c:	81800b26 	beq	r16,r6,a58c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    a560:	89000217 	ldw	r4,8(r17)
    a564:	900b883a 	mov	r5,r18
    a568:	20800017 	ldw	r2,0(r4)
    a56c:	dc000615 	stw	r16,24(sp)
    a570:	10800817 	ldw	r2,32(r2)
    a574:	dfc00517 	ldw	ra,20(sp)
    a578:	dc800417 	ldw	r18,16(sp)
    a57c:	dc400317 	ldw	r17,12(sp)
    a580:	dc000217 	ldw	r16,8(sp)
    a584:	dec00604 	addi	sp,sp,24
    a588:	1000683a 	jmp	r2
    a58c:	21000117 	ldw	r4,4(r4)
    a590:	39400117 	ldw	r5,4(r7)
    a594:	21400926 	beq	r4,r5,a5bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    a598:	20c00007 	ldb	r3,0(r4)
    a59c:	00800a84 	movi	r2,42
    a5a0:	18bfef26 	beq	r3,r2,a560 <__alt_data_end+0xfc00a560>
    a5a4:	d9800015 	stw	r6,0(sp)
    a5a8:	d9c00115 	stw	r7,4(sp)
    a5ac:	000f3480 	call	f348 <strcmp>
    a5b0:	d9800017 	ldw	r6,0(sp)
    a5b4:	d9c00117 	ldw	r7,4(sp)
    a5b8:	103fe91e 	bne	r2,zero,a560 <__alt_data_end+0xfc00a560>
    a5bc:	00800184 	movi	r2,6
    a5c0:	dfc00517 	ldw	ra,20(sp)
    a5c4:	dc800417 	ldw	r18,16(sp)
    a5c8:	dc400317 	ldw	r17,12(sp)
    a5cc:	dc000217 	ldw	r16,8(sp)
    a5d0:	dec00604 	addi	sp,sp,24
    a5d4:	f800283a 	ret

0000a5d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    a5d8:	defffb04 	addi	sp,sp,-20
    a5dc:	dcc00315 	stw	r19,12(sp)
    a5e0:	dc800215 	stw	r18,8(sp)
    a5e4:	dc400115 	stw	r17,4(sp)
    a5e8:	dc000015 	stw	r16,0(sp)
    a5ec:	dfc00415 	stw	ra,16(sp)
    a5f0:	2027883a 	mov	r19,r4
    a5f4:	2821883a 	mov	r16,r5
    a5f8:	3023883a 	mov	r17,r6
    a5fc:	3825883a 	mov	r18,r7
    a600:	000b1b40 	call	b1b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    a604:	10c03fcc 	andi	r3,r2,255
    a608:	18000726 	beq	r3,zero,a628 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    a60c:	dfc00417 	ldw	ra,16(sp)
    a610:	dcc00317 	ldw	r19,12(sp)
    a614:	dc800217 	ldw	r18,8(sp)
    a618:	dc400117 	ldw	r17,4(sp)
    a61c:	dc000017 	ldw	r16,0(sp)
    a620:	dec00504 	addi	sp,sp,20
    a624:	f800283a 	ret
    a628:	99000217 	ldw	r4,8(r19)
    a62c:	900f883a 	mov	r7,r18
    a630:	880d883a 	mov	r6,r17
    a634:	20800017 	ldw	r2,0(r4)
    a638:	800b883a 	mov	r5,r16
    a63c:	10800617 	ldw	r2,24(r2)
    a640:	dfc00417 	ldw	ra,16(sp)
    a644:	dcc00317 	ldw	r19,12(sp)
    a648:	dc800217 	ldw	r18,8(sp)
    a64c:	dc400117 	ldw	r17,4(sp)
    a650:	dc000017 	ldw	r16,0(sp)
    a654:	dec00504 	addi	sp,sp,20
    a658:	1000683a 	jmp	r2

0000a65c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
    a65c:	008000f4 	movhi	r2,3
    a660:	10a99104 	addi	r2,r2,-22972
    a664:	20800015 	stw	r2,0(r4)
    a668:	000b1701 	jmpi	b170 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000a66c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
    a66c:	defffe04 	addi	sp,sp,-8
    a670:	008000f4 	movhi	r2,3
    a674:	dc000015 	stw	r16,0(sp)
    a678:	dfc00115 	stw	ra,4(sp)
    a67c:	10a99104 	addi	r2,r2,-22972
    a680:	20800015 	stw	r2,0(r4)
    a684:	2021883a 	mov	r16,r4
    a688:	000b1700 	call	b170 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    a68c:	8009883a 	mov	r4,r16
    a690:	dfc00117 	ldw	ra,4(sp)
    a694:	dc000017 	ldw	r16,0(sp)
    a698:	dec00204 	addi	sp,sp,8
    a69c:	000b09c1 	jmpi	b09c <_ZdlPv>

0000a6a0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    a6a0:	defff504 	addi	sp,sp,-44
    a6a4:	dc400215 	stw	r17,8(sp)
    a6a8:	dc400b17 	ldw	r17,44(sp)
    a6ac:	df000915 	stw	fp,36(sp)
    a6b0:	ddc00815 	stw	r23,32(sp)
    a6b4:	dd800715 	stw	r22,28(sp)
    a6b8:	dc000115 	stw	r16,4(sp)
    a6bc:	dfc00a15 	stw	ra,40(sp)
    a6c0:	dd400615 	stw	r21,24(sp)
    a6c4:	dd000515 	stw	r20,20(sp)
    a6c8:	dcc00415 	stw	r19,16(sp)
    a6cc:	dc800315 	stw	r18,12(sp)
    a6d0:	3039883a 	mov	fp,r6
    a6d4:	2021883a 	mov	r16,r4
    a6d8:	282d883a 	mov	r22,r5
    a6dc:	382f883a 	mov	r23,r7
    a6e0:	34402c26 	beq	r6,r17,a794 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
    a6e4:	85000317 	ldw	r20,12(r16)
    a6e8:	048000c4 	movi	r18,3
    a6ec:	04ffff44 	movi	r19,-3
    a6f0:	a484983a 	sll	r2,r20,r18
    a6f4:	b80f883a 	mov	r7,r23
    a6f8:	b00b883a 	mov	r5,r22
    a6fc:	10800304 	addi	r2,r2,12
    a700:	80a1883a 	add	r16,r16,r2
    a704:	a0001626 	beq	r20,zero,a760 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
    a708:	81800017 	ldw	r6,0(r16)
    a70c:	a53fffc4 	addi	r20,r20,-1
    a710:	3080008c 	andi	r2,r6,2
    a714:	3540004c 	andi	r21,r6,1
    a718:	10000d26 	beq	r2,zero,a750 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a71c:	300dd23a 	srai	r6,r6,8
    a720:	a8000426 	beq	r21,zero,a734 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
    a724:	b4c00a26 	beq	r22,r19,a750 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
    a728:	e0800017 	ldw	r2,0(fp)
    a72c:	118d883a 	add	r6,r2,r6
    a730:	31800017 	ldw	r6,0(r6)
    a734:	813fff17 	ldw	r4,-4(r16)
    a738:	e18d883a 	add	r6,fp,r6
    a73c:	20800017 	ldw	r2,0(r4)
    a740:	dc400015 	stw	r17,0(sp)
    a744:	10800817 	ldw	r2,32(r2)
    a748:	103ee83a 	callr	r2
    a74c:	90801b16 	blt	r18,r2,a7bc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
    a750:	843ffe04 	addi	r16,r16,-8
    a754:	b80f883a 	mov	r7,r23
    a758:	b00b883a 	mov	r5,r22
    a75c:	a03fea1e 	bne	r20,zero,a708 <__alt_data_end+0xfc00a708>
    a760:	00800044 	movi	r2,1
    a764:	dfc00a17 	ldw	ra,40(sp)
    a768:	df000917 	ldw	fp,36(sp)
    a76c:	ddc00817 	ldw	r23,32(sp)
    a770:	dd800717 	ldw	r22,28(sp)
    a774:	dd400617 	ldw	r21,24(sp)
    a778:	dd000517 	ldw	r20,20(sp)
    a77c:	dcc00417 	ldw	r19,16(sp)
    a780:	dc800317 	ldw	r18,12(sp)
    a784:	dc400217 	ldw	r17,8(sp)
    a788:	dc000117 	ldw	r16,4(sp)
    a78c:	dec00b04 	addi	sp,sp,44
    a790:	f800283a 	ret
    a794:	21000117 	ldw	r4,4(r4)
    a798:	39400117 	ldw	r5,4(r7)
    a79c:	21400526 	beq	r4,r5,a7b4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
    a7a0:	20c00007 	ldb	r3,0(r4)
    a7a4:	00800a84 	movi	r2,42
    a7a8:	18bfce26 	beq	r3,r2,a6e4 <__alt_data_end+0xfc00a6e4>
    a7ac:	000f3480 	call	f348 <strcmp>
    a7b0:	103fcc1e 	bne	r2,zero,a6e4 <__alt_data_end+0xfc00a6e4>
    a7b4:	00800184 	movi	r2,6
    a7b8:	003fea06 	br	a764 <__alt_data_end+0xfc00a764>
    a7bc:	a83fe926 	beq	r21,zero,a764 <__alt_data_end+0xfc00a764>
    a7c0:	10800054 	ori	r2,r2,1
    a7c4:	003fe706 	br	a764 <__alt_data_end+0xfc00a764>

0000a7c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    a7c8:	deffe804 	addi	sp,sp,-96
    a7cc:	df001615 	stw	fp,88(sp)
    a7d0:	df001b17 	ldw	fp,108(sp)
    a7d4:	ddc01515 	stw	r23,84(sp)
    a7d8:	dd001215 	stw	r20,72(sp)
    a7dc:	e0800417 	ldw	r2,16(fp)
    a7e0:	dcc01115 	stw	r19,68(sp)
    a7e4:	dfc01715 	stw	ra,92(sp)
    a7e8:	dd801415 	stw	r22,80(sp)
    a7ec:	dd401315 	stw	r21,76(sp)
    a7f0:	dc801015 	stw	r18,64(sp)
    a7f4:	dc400f15 	stw	r17,60(sp)
    a7f8:	dc000e15 	stw	r16,56(sp)
    a7fc:	d9000b15 	stw	r4,44(sp)
    a800:	d9c00915 	stw	r7,36(sp)
    a804:	1080040c 	andi	r2,r2,16
    a808:	282f883a 	mov	r23,r5
    a80c:	3027883a 	mov	r19,r6
    a810:	dd001817 	ldw	r20,96(sp)
    a814:	10000226 	beq	r2,zero,a820 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    a818:	20800217 	ldw	r2,8(r4)
    a81c:	e0800415 	stw	r2,16(fp)
    a820:	d8c01a17 	ldw	r3,104(sp)
    a824:	a0c0cb26 	beq	r20,r3,ab54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
    a828:	d8c00b17 	ldw	r3,44(sp)
    a82c:	1c000117 	ldw	r16,4(r3)
    a830:	d8c00917 	ldw	r3,36(sp)
    a834:	19400117 	ldw	r5,4(r3)
    a838:	2c000626 	beq	r5,r16,a854 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    a83c:	80c00007 	ldb	r3,0(r16)
    a840:	00800a84 	movi	r2,42
    a844:	18801b26 	beq	r3,r2,a8b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a848:	8009883a 	mov	r4,r16
    a84c:	000f3480 	call	f348 <strcmp>
    a850:	1000181e 	bne	r2,zero,a8b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
    a854:	e5000015 	stw	r20,0(fp)
    a858:	e4c00115 	stw	r19,4(fp)
    a85c:	b8010916 	blt	r23,zero,ac84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
    a860:	d8c01a17 	ldw	r3,104(sp)
    a864:	a5d9883a 	add	r12,r20,r23
    a868:	1b014126 	beq	r3,r12,ad70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
    a86c:	00800044 	movi	r2,1
    a870:	e0800315 	stw	r2,12(fp)
    a874:	0005883a 	mov	r2,zero
    a878:	dfc01717 	ldw	ra,92(sp)
    a87c:	df001617 	ldw	fp,88(sp)
    a880:	ddc01517 	ldw	r23,84(sp)
    a884:	dd801417 	ldw	r22,80(sp)
    a888:	dd401317 	ldw	r21,76(sp)
    a88c:	dd001217 	ldw	r20,72(sp)
    a890:	dcc01117 	ldw	r19,68(sp)
    a894:	dc801017 	ldw	r18,64(sp)
    a898:	dc400f17 	ldw	r17,60(sp)
    a89c:	dc000e17 	ldw	r16,56(sp)
    a8a0:	dec01804 	addi	sp,sp,96
    a8a4:	f800283a 	ret
    a8a8:	d8c00917 	ldw	r3,36(sp)
    a8ac:	18800117 	ldw	r2,4(r3)
    a8b0:	80bfe826 	beq	r16,r2,a854 <__alt_data_end+0xfc00a854>
    a8b4:	b800ef16 	blt	r23,zero,ac74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
    a8b8:	d8c01a17 	ldw	r3,104(sp)
    a8bc:	1dedc83a 	sub	r22,r3,r23
    a8c0:	e005883a 	mov	r2,fp
    a8c4:	00c00044 	movi	r3,1
    a8c8:	b039883a 	mov	fp,r22
    a8cc:	0021883a 	mov	r16,zero
    a8d0:	a02d883a 	mov	r22,r20
    a8d4:	d8000a45 	stb	zero,41(sp)
    a8d8:	d8c00a05 	stb	r3,40(sp)
    a8dc:	048000c4 	movi	r18,3
    a8e0:	1029883a 	mov	r20,r2
    a8e4:	d8c00b17 	ldw	r3,44(sp)
    a8e8:	b805883a 	mov	r2,r23
    a8ec:	1ac00317 	ldw	r11,12(r3)
    a8f0:	581490fa 	slli	r10,r11,3
    a8f4:	52800304 	addi	r10,r10,12
    a8f8:	1aab883a 	add	r21,r3,r10
    a8fc:	b007883a 	mov	r3,r22
    a900:	582d883a 	mov	r22,r11
    a904:	a82f883a 	mov	r23,r21
    a908:	1823883a 	mov	r17,r3
    a90c:	102b883a 	mov	r21,r2
    a910:	b0005526 	beq	r22,zero,aa68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
    a914:	b8800017 	ldw	r2,0(r23)
    a918:	a1400417 	ldw	r5,16(r20)
    a91c:	d8000415 	stw	zero,16(sp)
    a920:	d8000515 	stw	zero,20(sp)
    a924:	d8000615 	stw	zero,24(sp)
    a928:	d8000715 	stw	zero,28(sp)
    a92c:	d9400815 	stw	r5,32(sp)
    a930:	1100004c 	andi	r4,r2,1
    a934:	1007d23a 	srai	r3,r2,8
    a938:	20007526 	beq	r4,zero,ab10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
    a93c:	89000017 	ldw	r4,0(r17)
    a940:	99800054 	ori	r6,r19,1
    a944:	20c7883a 	add	r3,r4,r3
    a948:	18c00017 	ldw	r3,0(r3)
    a94c:	88c7883a 	add	r3,r17,r3
    a950:	e0000326 	beq	fp,zero,a960 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
    a954:	d9c00a03 	ldbu	r7,40(sp)
    a958:	e0c9803a 	cmpltu	r4,fp,r3
    a95c:	21c07226 	beq	r4,r7,ab28 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
    a960:	1080008c 	andi	r2,r2,2
    a964:	1000041e 	bne	r2,zero,a978 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
    a968:	013fff84 	movi	r4,-2
    a96c:	a9007126 	beq	r21,r4,ab34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
    a970:	00bfff44 	movi	r2,-3
    a974:	308c703a 	and	r6,r6,r2
    a978:	b93fff17 	ldw	r4,-4(r23)
    a97c:	d9400404 	addi	r5,sp,16
    a980:	d9c00917 	ldw	r7,36(sp)
    a984:	20800017 	ldw	r2,0(r4)
    a988:	d9400315 	stw	r5,12(sp)
    a98c:	d9401a17 	ldw	r5,104(sp)
    a990:	d8c00015 	stw	r3,0(sp)
    a994:	d9400215 	stw	r5,8(sp)
    a998:	d9401917 	ldw	r5,100(sp)
    a99c:	d9400115 	stw	r5,4(sp)
    a9a0:	10800717 	ldw	r2,28(r2)
    a9a4:	a80b883a 	mov	r5,r21
    a9a8:	103ee83a 	callr	r2
    a9ac:	a1400217 	ldw	r5,8(r20)
    a9b0:	d9000617 	ldw	r4,24(sp)
    a9b4:	d8c00717 	ldw	r3,28(sp)
    a9b8:	2908b03a 	or	r4,r5,r4
    a9bc:	a1000215 	stw	r4,8(r20)
    a9c0:	01400184 	movi	r5,6
    a9c4:	1940a426 	beq	r3,r5,ac58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a9c8:	01400084 	movi	r5,2
    a9cc:	1940a226 	beq	r3,r5,ac58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
    a9d0:	81403fcc 	andi	r5,r16,255
    a9d4:	a1800017 	ldw	r6,0(r20)
    a9d8:	28004f1e 	bne	r5,zero,ab18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
    a9dc:	30007926 	beq	r6,zero,abc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
    a9e0:	d9400417 	ldw	r5,16(sp)
    a9e4:	29806926 	beq	r5,r6,ab8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
    a9e8:	28006d26 	beq	r5,zero,aba0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
    a9ec:	a2800317 	ldw	r10,12(r20)
    a9f0:	9100250e 	bge	r18,r4,aa88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    a9f4:	2100004c 	andi	r4,r4,1
    a9f8:	20000326 	beq	r4,zero,aa08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
    a9fc:	a0800417 	ldw	r2,16(r20)
    aa00:	1080008c 	andi	r2,r2,2
    aa04:	1000201e 	bne	r2,zero,aa88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
    aa08:	50004d1e 	bne	r10,zero,ab40 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
    aa0c:	18002626 	beq	r3,zero,aaa8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
    aa10:	02800044 	movi	r10,1
    aa14:	181b883a 	mov	r13,r3
    aa18:	1a84f03a 	xor	r2,r3,r10
    aa1c:	501f883a 	mov	r15,r10
    aa20:	90801f0e 	bge	r18,r2,aaa0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
    aa24:	90c0880e 	bge	r18,r3,ac48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
    aa28:	d9400417 	ldw	r5,16(sp)
    aa2c:	1880008c 	andi	r2,r3,2
    aa30:	d9000517 	ldw	r4,20(sp)
    aa34:	a1400015 	stw	r5,0(r20)
    aa38:	0021883a 	mov	r16,zero
    aa3c:	a1000115 	stw	r4,4(r20)
    aa40:	a0c00315 	stw	r3,12(r20)
    aa44:	10004f1e 	bne	r2,zero,ab84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    aa48:	6b40004c 	andi	r13,r13,1
    aa4c:	68004d26 	beq	r13,zero,ab84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
    aa50:	a1000217 	ldw	r4,8(r20)
    aa54:	01400104 	movi	r5,4
    aa58:	21408826 	beq	r4,r5,ac7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aa5c:	b5bfffc4 	addi	r22,r22,-1
    aa60:	bdfffe04 	addi	r23,r23,-8
    aa64:	b03fab1e 	bne	r22,zero,a914 <__alt_data_end+0xfc00a914>
    aa68:	d8800a43 	ldbu	r2,41(sp)
    aa6c:	a82f883a 	mov	r23,r21
    aa70:	882d883a 	mov	r22,r17
    aa74:	10008126 	beq	r2,zero,ac7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aa78:	dd400a03 	ldbu	r21,40(sp)
    aa7c:	a8007f26 	beq	r21,zero,ac7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
    aa80:	d8000a05 	stb	zero,40(sp)
    aa84:	003f9706 	br	a8e4 <__alt_data_end+0xfc00a8e4>
    aa88:	501f883a 	mov	r15,r10
    aa8c:	181b883a 	mov	r13,r3
    aa90:	02800b0e 	bge	zero,r10,aac0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
    aa94:	00c0570e 	bge	zero,r3,abf4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
    aa98:	1a84f03a 	xor	r2,r3,r10
    aa9c:	90bfe116 	blt	r18,r2,aa24 <__alt_data_end+0xfc00aa24>
    aaa0:	1bc6703a 	and	r3,r3,r15
    aaa4:	90c09916 	blt	r18,r3,ad0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
    aaa8:	01000044 	movi	r4,1
    aaac:	a1000315 	stw	r4,12(r20)
    aab0:	a0000015 	stw	zero,0(r20)
    aab4:	a1000217 	ldw	r4,8(r20)
    aab8:	04000044 	movi	r16,1
    aabc:	003fe506 	br	aa54 <__alt_data_end+0xfc00aa54>
    aac0:	90c00a0e 	bge	r18,r3,aaec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aac4:	1880004c 	andi	r2,r3,1
    aac8:	10000426 	beq	r2,zero,aadc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
    aacc:	d9000b17 	ldw	r4,44(sp)
    aad0:	20800217 	ldw	r2,8(r4)
    aad4:	1080008c 	andi	r2,r2,2
    aad8:	1000041e 	bne	r2,zero,aaec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
    aadc:	1880005c 	xori	r2,r3,1
    aae0:	90bfd216 	blt	r18,r2,aa2c <__alt_data_end+0xfc00aa2c>
    aae4:	03c00044 	movi	r15,1
    aae8:	003fed06 	br	aaa0 <__alt_data_end+0xfc00aaa0>
    aaec:	a8006e16 	blt	r21,zero,aca8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
    aaf0:	d8801a17 	ldw	r2,104(sp)
    aaf4:	354d883a 	add	r6,r6,r21
    aaf8:	11805026 	beq	r2,r6,ac3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
    aafc:	00c0a50e 	bge	zero,r3,ad94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
    ab00:	03c00044 	movi	r15,1
    ab04:	1bc4f03a 	xor	r2,r3,r15
    ab08:	7815883a 	mov	r10,r15
    ab0c:	003fc406 	br	aa20 <__alt_data_end+0xfc00aa20>
    ab10:	980d883a 	mov	r6,r19
    ab14:	003f8d06 	br	a94c <__alt_data_end+0xfc00a94c>
    ab18:	303fb11e 	bne	r6,zero,a9e0 <__alt_data_end+0xfc00a9e0>
    ab1c:	d9400417 	ldw	r5,16(sp)
    ab20:	283fb21e 	bne	r5,zero,a9ec <__alt_data_end+0xfc00a9ec>
    ab24:	003fcb06 	br	aa54 <__alt_data_end+0xfc00aa54>
    ab28:	00c00044 	movi	r3,1
    ab2c:	d8c00a45 	stb	r3,41(sp)
    ab30:	003fca06 	br	aa5c <__alt_data_end+0xfc00aa5c>
    ab34:	294000cc 	andi	r5,r5,3
    ab38:	283fc826 	beq	r5,zero,aa5c <__alt_data_end+0xfc00aa5c>
    ab3c:	003f8c06 	br	a970 <__alt_data_end+0xfc00a970>
    ab40:	18001a26 	beq	r3,zero,abac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
    ab44:	181b883a 	mov	r13,r3
    ab48:	501f883a 	mov	r15,r10
    ab4c:	50c4f03a 	xor	r2,r10,r3
    ab50:	003fb306 	br	aa20 <__alt_data_end+0xfc00aa20>
    ab54:	d8c00b17 	ldw	r3,44(sp)
    ab58:	1c000117 	ldw	r16,4(r3)
    ab5c:	d8c01917 	ldw	r3,100(sp)
    ab60:	19400117 	ldw	r5,4(r3)
    ab64:	81400626 	beq	r16,r5,ab80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
    ab68:	80c00007 	ldb	r3,0(r16)
    ab6c:	00800a84 	movi	r2,42
    ab70:	18bf4d26 	beq	r3,r2,a8a8 <__alt_data_end+0xfc00a8a8>
    ab74:	8009883a 	mov	r4,r16
    ab78:	000f3480 	call	f348 <strcmp>
    ab7c:	10005c1e 	bne	r2,zero,acf0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
    ab80:	e4c00215 	stw	r19,8(fp)
    ab84:	0005883a 	mov	r2,zero
    ab88:	003f3b06 	br	a878 <__alt_data_end+0xfc00a878>
    ab8c:	a0c00117 	ldw	r3,4(r20)
    ab90:	d8800517 	ldw	r2,20(sp)
    ab94:	1884b03a 	or	r2,r3,r2
    ab98:	a0800115 	stw	r2,4(r20)
    ab9c:	003fad06 	br	aa54 <__alt_data_end+0xfc00aa54>
    aba0:	10803fcc 	andi	r2,r2,255
    aba4:	103f911e 	bne	r2,zero,a9ec <__alt_data_end+0xfc00a9ec>
    aba8:	003faa06 	br	aa54 <__alt_data_end+0xfc00aa54>
    abac:	501b883a 	mov	r13,r10
    abb0:	5080005c 	xori	r2,r10,1
    abb4:	5007883a 	mov	r3,r10
    abb8:	90bfbb0e 	bge	r18,r2,aaa8 <__alt_data_end+0xfc00aaa8>
    abbc:	6880008c 	andi	r2,r13,2
    abc0:	003f9f06 	br	aa40 <__alt_data_end+0xfc00aa40>
    abc4:	d8c00417 	ldw	r3,16(sp)
    abc8:	d9400517 	ldw	r5,20(sp)
    abcc:	a0c00015 	stw	r3,0(r20)
    abd0:	a1400115 	stw	r5,4(r20)
    abd4:	18000526 	beq	r3,zero,abec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
    abd8:	20001626 	beq	r4,zero,ac34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
    abdc:	d9400b17 	ldw	r5,44(sp)
    abe0:	28c00217 	ldw	r3,8(r5)
    abe4:	18c0004c 	andi	r3,r3,1
    abe8:	183f2326 	beq	r3,zero,a878 <__alt_data_end+0xfc00a878>
    abec:	1021883a 	mov	r16,r2
    abf0:	003f9806 	br	aa54 <__alt_data_end+0xfc00aa54>
    abf4:	9280060e 	bge	r18,r10,ac10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
    abf8:	5080004c 	andi	r2,r10,1
    abfc:	10002426 	beq	r2,zero,ac90 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
    ac00:	d8c00b17 	ldw	r3,44(sp)
    ac04:	18800217 	ldw	r2,8(r3)
    ac08:	1080008c 	andi	r2,r2,2
    ac0c:	10003c26 	beq	r2,zero,ad00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
    ac10:	d9400417 	ldw	r5,16(sp)
    ac14:	a8004216 	blt	r21,zero,ad20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
    ac18:	d8c01a17 	ldw	r3,104(sp)
    ac1c:	2d45883a 	add	r2,r5,r21
    ac20:	18805726 	beq	r3,r2,ad80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
    ac24:	7880005c 	xori	r2,r15,1
    ac28:	781b883a 	mov	r13,r15
    ac2c:	5007883a 	mov	r3,r10
    ac30:	003fe106 	br	abb8 <__alt_data_end+0xfc00abb8>
    ac34:	1021883a 	mov	r16,r2
    ac38:	003f8806 	br	aa5c <__alt_data_end+0xfc00aa5c>
    ac3c:	03c00184 	movi	r15,6
    ac40:	00ffb016 	blt	zero,r3,ab04 <__alt_data_end+0xfc00ab04>
    ac44:	7815883a 	mov	r10,r15
    ac48:	7880008c 	andi	r2,r15,2
    ac4c:	781b883a 	mov	r13,r15
    ac50:	5007883a 	mov	r3,r10
    ac54:	003f7a06 	br	aa40 <__alt_data_end+0xfc00aa40>
    ac58:	a039883a 	mov	fp,r20
    ac5c:	e0c00315 	stw	r3,12(fp)
    ac60:	d8c00417 	ldw	r3,16(sp)
    ac64:	a0c00015 	stw	r3,0(r20)
    ac68:	d8c00517 	ldw	r3,20(sp)
    ac6c:	a0c00115 	stw	r3,4(r20)
    ac70:	003f0106 	br	a878 <__alt_data_end+0xfc00a878>
    ac74:	002d883a 	mov	r22,zero
    ac78:	003f1106 	br	a8c0 <__alt_data_end+0xfc00a8c0>
    ac7c:	8005883a 	mov	r2,r16
    ac80:	003efd06 	br	a878 <__alt_data_end+0xfc00a878>
    ac84:	00bfff84 	movi	r2,-2
    ac88:	b8bfbe1e 	bne	r23,r2,ab84 <__alt_data_end+0xfc00ab84>
    ac8c:	003ef706 	br	a86c <__alt_data_end+0xfc00a86c>
    ac90:	5080005c 	xori	r2,r10,1
    ac94:	90bf840e 	bge	r18,r2,aaa8 <__alt_data_end+0xfc00aaa8>
    ac98:	501b883a 	mov	r13,r10
    ac9c:	5080008c 	andi	r2,r10,2
    aca0:	5007883a 	mov	r3,r10
    aca4:	003f6606 	br	aa40 <__alt_data_end+0xfc00aa40>
    aca8:	013fff84 	movi	r4,-2
    acac:	a9003226 	beq	r21,r4,ad78 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
    acb0:	d9400917 	ldw	r5,36(sp)
    acb4:	d9001a17 	ldw	r4,104(sp)
    acb8:	d9c01917 	ldw	r7,100(sp)
    acbc:	28800017 	ldw	r2,0(r5)
    acc0:	d9000015 	stw	r4,0(sp)
    acc4:	d9000917 	ldw	r4,36(sp)
    acc8:	10800817 	ldw	r2,32(r2)
    accc:	a80b883a 	mov	r5,r21
    acd0:	d8c00d15 	stw	r3,52(sp)
    acd4:	db400c15 	stw	r13,48(sp)
    acd8:	103ee83a 	callr	r2
    acdc:	1015883a 	mov	r10,r2
    ace0:	101f883a 	mov	r15,r2
    ace4:	db400c17 	ldw	r13,48(sp)
    ace8:	d8c00d17 	ldw	r3,52(sp)
    acec:	003f6906 	br	aa94 <__alt_data_end+0xfc00aa94>
    acf0:	d8c00917 	ldw	r3,36(sp)
    acf4:	19400117 	ldw	r5,4(r3)
    acf8:	817ed31e 	bne	r16,r5,a848 <__alt_data_end+0xfc00a848>
    acfc:	003ed506 	br	a854 <__alt_data_end+0xfc00a854>
    ad00:	5080005c 	xori	r2,r10,1
    ad04:	90bfe416 	blt	r18,r2,ac98 <__alt_data_end+0xfc00ac98>
    ad08:	003f6706 	br	aaa8 <__alt_data_end+0xfc00aaa8>
    ad0c:	00800084 	movi	r2,2
    ad10:	a0800315 	stw	r2,12(r20)
    ad14:	a0000015 	stw	zero,0(r20)
    ad18:	00800044 	movi	r2,1
    ad1c:	003ed606 	br	a878 <__alt_data_end+0xfc00a878>
    ad20:	013fff84 	movi	r4,-2
    ad24:	a9002526 	beq	r21,r4,adbc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
    ad28:	d8c00917 	ldw	r3,36(sp)
    ad2c:	d9c01917 	ldw	r7,100(sp)
    ad30:	d9000917 	ldw	r4,36(sp)
    ad34:	18800017 	ldw	r2,0(r3)
    ad38:	d8c01a17 	ldw	r3,104(sp)
    ad3c:	280d883a 	mov	r6,r5
    ad40:	a80b883a 	mov	r5,r21
    ad44:	d8c00015 	stw	r3,0(sp)
    ad48:	10800817 	ldw	r2,32(r2)
    ad4c:	da800c15 	stw	r10,48(sp)
    ad50:	dbc00d15 	stw	r15,52(sp)
    ad54:	103ee83a 	callr	r2
    ad58:	da800c17 	ldw	r10,48(sp)
    ad5c:	1007883a 	mov	r3,r2
    ad60:	101b883a 	mov	r13,r2
    ad64:	dbc00d17 	ldw	r15,52(sp)
    ad68:	1284f03a 	xor	r2,r2,r10
    ad6c:	003f2c06 	br	aa20 <__alt_data_end+0xfc00aa20>
    ad70:	00800184 	movi	r2,6
    ad74:	003ebe06 	br	a870 <__alt_data_end+0xfc00a870>
    ad78:	00ff4b0e 	bge	zero,r3,aaa8 <__alt_data_end+0xfc00aaa8>
    ad7c:	003f6006 	br	ab00 <__alt_data_end+0xfc00ab00>
    ad80:	5080019c 	xori	r2,r10,6
    ad84:	90800916 	blt	r18,r2,adac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    ad88:	50c0018c 	andi	r3,r10,6
    ad8c:	90ff460e 	bge	r18,r3,aaa8 <__alt_data_end+0xfc00aaa8>
    ad90:	003fde06 	br	ad0c <__alt_data_end+0xfc00ad0c>
    ad94:	d8c01a17 	ldw	r3,104(sp)
    ad98:	2d45883a 	add	r2,r5,r21
    ad9c:	18800326 	beq	r3,r2,adac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
    ada0:	02800044 	movi	r10,1
    ada4:	501f883a 	mov	r15,r10
    ada8:	003f9e06 	br	ac24 <__alt_data_end+0xfc00ac24>
    adac:	03400184 	movi	r13,6
    adb0:	00800084 	movi	r2,2
    adb4:	6807883a 	mov	r3,r13
    adb8:	003f1d06 	br	aa30 <__alt_data_end+0xfc00aa30>
    adbc:	501b883a 	mov	r13,r10
    adc0:	5080005c 	xori	r2,r10,1
    adc4:	5007883a 	mov	r3,r10
    adc8:	003f7b06 	br	abb8 <__alt_data_end+0xfc00abb8>

0000adcc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    adcc:	deffef04 	addi	sp,sp,-68
    add0:	ddc00e15 	stw	r23,56(sp)
    add4:	dd000b15 	stw	r20,44(sp)
    add8:	dc400815 	stw	r17,32(sp)
    addc:	3029883a 	mov	r20,r6
    ade0:	dfc01015 	stw	ra,64(sp)
    ade4:	df000f15 	stw	fp,60(sp)
    ade8:	dd800d15 	stw	r22,52(sp)
    adec:	dd400c15 	stw	r21,48(sp)
    adf0:	dcc00a15 	stw	r19,40(sp)
    adf4:	dc800915 	stw	r18,36(sp)
    adf8:	dc000715 	stw	r16,28(sp)
    adfc:	d9000515 	stw	r4,20(sp)
    ae00:	2823883a 	mov	r17,r5
    ae04:	382f883a 	mov	r23,r7
    ae08:	000b1b40 	call	b1b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    ae0c:	100d883a 	mov	r6,r2
    ae10:	10803fcc 	andi	r2,r2,255
    ae14:	1000441e 	bne	r2,zero,af28 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
    ae18:	bc000217 	ldw	r16,8(r23)
    ae1c:	8080040c 	andi	r2,r16,16
    ae20:	10000226 	beq	r2,zero,ae2c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
    ae24:	d8c00517 	ldw	r3,20(sp)
    ae28:	1c000217 	ldw	r16,8(r3)
    ae2c:	d8c00517 	ldw	r3,20(sp)
    ae30:	d8800517 	ldw	r2,20(sp)
    ae34:	1f000317 	ldw	fp,12(r3)
    ae38:	e01090fa 	slli	r8,fp,3
    ae3c:	40c00304 	addi	r3,r8,12
    ae40:	10ed883a 	add	r22,r2,r3
    ae44:	80c0004c 	andi	r3,r16,1
    ae48:	42000204 	addi	r8,r8,8
    ae4c:	d8c00415 	stw	r3,16(sp)
    ae50:	122b883a 	add	r21,r2,r8
    ae54:	e0003226 	beq	fp,zero,af20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
    ae58:	b1800017 	ldw	r6,0(r22)
    ae5c:	d8000015 	stw	zero,0(sp)
    ae60:	d8000115 	stw	zero,4(sp)
    ae64:	dc000215 	stw	r16,8(sp)
    ae68:	d8000315 	stw	zero,12(sp)
    ae6c:	34c0008c 	andi	r19,r6,2
    ae70:	3480004c 	andi	r18,r6,1
    ae74:	9800021e 	bne	r19,zero,ae80 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
    ae78:	d8c00417 	ldw	r3,16(sp)
    ae7c:	18002426 	beq	r3,zero,af10 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    ae80:	a0003626 	beq	r20,zero,af5c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
    ae84:	300dd23a 	srai	r6,r6,8
    ae88:	90000326 	beq	r18,zero,ae98 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
    ae8c:	a0800017 	ldw	r2,0(r20)
    ae90:	118d883a 	add	r6,r2,r6
    ae94:	31800017 	ldw	r6,0(r6)
    ae98:	a18d883a 	add	r6,r20,r6
    ae9c:	a9000017 	ldw	r4,0(r21)
    aea0:	d80f883a 	mov	r7,sp
    aea4:	880b883a 	mov	r5,r17
    aea8:	20800017 	ldw	r2,0(r4)
    aeac:	10800617 	ldw	r2,24(r2)
    aeb0:	103ee83a 	callr	r2
    aeb4:	100d883a 	mov	r6,r2
    aeb8:	10803fcc 	andi	r2,r2,255
    aebc:	10001426 	beq	r2,zero,af10 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
    aec0:	d8800317 	ldw	r2,12(sp)
    aec4:	00c00204 	movi	r3,8
    aec8:	10c02626 	beq	r2,r3,af64 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
    aecc:	d8800117 	ldw	r2,4(sp)
    aed0:	00c000c4 	movi	r3,3
    aed4:	1880040e 	bge	r3,r2,aee8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    aed8:	9800031e 	bne	r19,zero,aee8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
    aedc:	00ffff44 	movi	r3,-3
    aee0:	10c4703a 	and	r2,r2,r3
    aee4:	d8800115 	stw	r2,4(sp)
    aee8:	b9400317 	ldw	r5,12(r23)
    aeec:	28002126 	beq	r5,zero,af74 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
    aef0:	b8800017 	ldw	r2,0(r23)
    aef4:	d9000017 	ldw	r4,0(sp)
    aef8:	11004d1e 	bne	r2,r4,b030 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
    aefc:	10003126 	beq	r2,zero,afc4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
    af00:	b9000117 	ldw	r4,4(r23)
    af04:	d8800117 	ldw	r2,4(sp)
    af08:	2084b03a 	or	r2,r4,r2
    af0c:	b8800115 	stw	r2,4(r23)
    af10:	e73fffc4 	addi	fp,fp,-1
    af14:	b5bffe04 	addi	r22,r22,-8
    af18:	ad7ffe04 	addi	r21,r21,-8
    af1c:	e03fce1e 	bne	fp,zero,ae58 <__alt_data_end+0xfc00ae58>
    af20:	b9800117 	ldw	r6,4(r23)
    af24:	300cc03a 	cmpne	r6,r6,zero
    af28:	3005883a 	mov	r2,r6
    af2c:	dfc01017 	ldw	ra,64(sp)
    af30:	df000f17 	ldw	fp,60(sp)
    af34:	ddc00e17 	ldw	r23,56(sp)
    af38:	dd800d17 	ldw	r22,52(sp)
    af3c:	dd400c17 	ldw	r21,48(sp)
    af40:	dd000b17 	ldw	r20,44(sp)
    af44:	dcc00a17 	ldw	r19,40(sp)
    af48:	dc800917 	ldw	r18,36(sp)
    af4c:	dc400817 	ldw	r17,32(sp)
    af50:	dc000717 	ldw	r16,28(sp)
    af54:	dec01104 	addi	sp,sp,68
    af58:	f800283a 	ret
    af5c:	000d883a 	mov	r6,zero
    af60:	003fce06 	br	ae9c <__alt_data_end+0xfc00ae9c>
    af64:	903fd926 	beq	r18,zero,aecc <__alt_data_end+0xfc00aecc>
    af68:	a8800017 	ldw	r2,0(r21)
    af6c:	d8800315 	stw	r2,12(sp)
    af70:	003fd606 	br	aecc <__alt_data_end+0xfc00aecc>
    af74:	d9000017 	ldw	r4,0(sp)
    af78:	d8800117 	ldw	r2,4(sp)
    af7c:	00c000c4 	movi	r3,3
    af80:	b9000015 	stw	r4,0(r23)
    af84:	d9000217 	ldw	r4,8(sp)
    af88:	b8800115 	stw	r2,4(r23)
    af8c:	b9000215 	stw	r4,8(r23)
    af90:	d9000317 	ldw	r4,12(sp)
    af94:	b9000315 	stw	r4,12(r23)
    af98:	18bfe30e 	bge	r3,r2,af28 <__alt_data_end+0xfc00af28>
    af9c:	1100008c 	andi	r4,r2,2
    afa0:	20001926 	beq	r4,zero,b008 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
    afa4:	d8c00517 	ldw	r3,20(sp)
    afa8:	18800217 	ldw	r2,8(r3)
    afac:	1080004c 	andi	r2,r2,1
    afb0:	103fdd26 	beq	r2,zero,af28 <__alt_data_end+0xfc00af28>
    afb4:	e73fffc4 	addi	fp,fp,-1
    afb8:	b5bffe04 	addi	r22,r22,-8
    afbc:	ad7ffe04 	addi	r21,r21,-8
    afc0:	003fd606 	br	af1c <__alt_data_end+0xfc00af1c>
    afc4:	d8800317 	ldw	r2,12(sp)
    afc8:	00c00204 	movi	r3,8
    afcc:	10c00b26 	beq	r2,r3,affc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    afd0:	28c00a26 	beq	r5,r3,affc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    afd4:	11000117 	ldw	r4,4(r2)
    afd8:	29400117 	ldw	r5,4(r5)
    afdc:	217fc826 	beq	r4,r5,af00 <__alt_data_end+0xfc00af00>
    afe0:	20800007 	ldb	r2,0(r4)
    afe4:	00c00a84 	movi	r3,42
    afe8:	10c00426 	beq	r2,r3,affc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
    afec:	d9800615 	stw	r6,24(sp)
    aff0:	000f3480 	call	f348 <strcmp>
    aff4:	d9800617 	ldw	r6,24(sp)
    aff8:	103fc126 	beq	r2,zero,af00 <__alt_data_end+0xfc00af00>
    affc:	00800084 	movi	r2,2
    b000:	b8800115 	stw	r2,4(r23)
    b004:	003fc806 	br	af28 <__alt_data_end+0xfc00af28>
    b008:	1080004c 	andi	r2,r2,1
    b00c:	103fc626 	beq	r2,zero,af28 <__alt_data_end+0xfc00af28>
    b010:	d8c00517 	ldw	r3,20(sp)
    b014:	18800217 	ldw	r2,8(r3)
    b018:	1080008c 	andi	r2,r2,2
    b01c:	103fc226 	beq	r2,zero,af28 <__alt_data_end+0xfc00af28>
    b020:	e73fffc4 	addi	fp,fp,-1
    b024:	b5bffe04 	addi	r22,r22,-8
    b028:	ad7ffe04 	addi	r21,r21,-8
    b02c:	003fbb06 	br	af1c <__alt_data_end+0xfc00af1c>
    b030:	00800084 	movi	r2,2
    b034:	b8000015 	stw	zero,0(r23)
    b038:	b8800115 	stw	r2,4(r23)
    b03c:	003fba06 	br	af28 <__alt_data_end+0xfc00af28>

0000b040 <_ZNSt9type_infoD1Ev>:
    b040:	f800283a 	ret

0000b044 <_ZNKSt9type_info14__is_pointer_pEv>:
    b044:	0005883a 	mov	r2,zero
    b048:	f800283a 	ret

0000b04c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    b04c:	0005883a 	mov	r2,zero
    b050:	f800283a 	ret

0000b054 <_ZNSt9type_infoD0Ev>:
    b054:	000b09c1 	jmpi	b09c <_ZdlPv>

0000b058 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    b058:	21000117 	ldw	r4,4(r4)
    b05c:	29400117 	ldw	r5,4(r5)
    b060:	21400c26 	beq	r4,r5,b094 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    b064:	20c00007 	ldb	r3,0(r4)
    b068:	00800a84 	movi	r2,42
    b06c:	18800726 	beq	r3,r2,b08c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    b070:	deffff04 	addi	sp,sp,-4
    b074:	dfc00015 	stw	ra,0(sp)
    b078:	000f3480 	call	f348 <strcmp>
    b07c:	1005003a 	cmpeq	r2,r2,zero
    b080:	dfc00017 	ldw	ra,0(sp)
    b084:	dec00104 	addi	sp,sp,4
    b088:	f800283a 	ret
    b08c:	0005883a 	mov	r2,zero
    b090:	f800283a 	ret
    b094:	00800044 	movi	r2,1
    b098:	f800283a 	ret

0000b09c <_ZdlPv>:
    b09c:	000e33c1 	jmpi	e33c <free>

0000b0a0 <__cxa_pure_virtual>:
    b0a0:	014000f4 	movhi	r5,3
    b0a4:	deffff04 	addi	sp,sp,-4
    b0a8:	2969a604 	addi	r5,r5,-22888
    b0ac:	018006c4 	movi	r6,27
    b0b0:	01000084 	movi	r4,2
    b0b4:	dfc00015 	stw	ra,0(sp)
    b0b8:	001f90c0 	call	1f90c <write>
    b0bc:	000b4680 	call	b468 <_ZSt9terminatev>

0000b0c0 <__cxa_deleted_virtual>:
    b0c0:	014000f4 	movhi	r5,3
    b0c4:	deffff04 	addi	sp,sp,-4
    b0c8:	2969ad04 	addi	r5,r5,-22860
    b0cc:	01800784 	movi	r6,30
    b0d0:	01000084 	movi	r4,2
    b0d4:	dfc00015 	stw	ra,0(sp)
    b0d8:	001f90c0 	call	1f90c <write>
    b0dc:	000b4680 	call	b468 <_ZSt9terminatev>

0000b0e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    b0e0:	20800017 	ldw	r2,0(r4)
    b0e4:	defffa04 	addi	sp,sp,-24
    b0e8:	dc000415 	stw	r16,16(sp)
    b0ec:	10800617 	ldw	r2,24(r2)
    b0f0:	3021883a 	mov	r16,r6
    b0f4:	31800017 	ldw	r6,0(r6)
    b0f8:	00c00404 	movi	r3,16
    b0fc:	d8c00215 	stw	r3,8(sp)
    b100:	dfc00515 	stw	ra,20(sp)
    b104:	d8000015 	stw	zero,0(sp)
    b108:	d8000115 	stw	zero,4(sp)
    b10c:	d8000315 	stw	zero,12(sp)
    b110:	d80f883a 	mov	r7,sp
    b114:	103ee83a 	callr	r2
    b118:	d8800117 	ldw	r2,4(sp)
    b11c:	00c00184 	movi	r3,6
    b120:	1080018c 	andi	r2,r2,6
    b124:	10c00526 	beq	r2,r3,b13c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    b128:	0005883a 	mov	r2,zero
    b12c:	dfc00517 	ldw	ra,20(sp)
    b130:	dc000417 	ldw	r16,16(sp)
    b134:	dec00604 	addi	sp,sp,24
    b138:	f800283a 	ret
    b13c:	d8c00017 	ldw	r3,0(sp)
    b140:	00800044 	movi	r2,1
    b144:	80c00015 	stw	r3,0(r16)
    b148:	dfc00517 	ldw	ra,20(sp)
    b14c:	dc000417 	ldw	r16,16(sp)
    b150:	dec00604 	addi	sp,sp,24
    b154:	f800283a 	ret

0000b158 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    b158:	d8800017 	ldw	r2,0(sp)
    b15c:	11800226 	beq	r2,r6,b168 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    b160:	00800044 	movi	r2,1
    b164:	f800283a 	ret
    b168:	00800184 	movi	r2,6
    b16c:	f800283a 	ret

0000b170 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    b170:	008000f4 	movhi	r2,3
    b174:	10a9c304 	addi	r2,r2,-22772
    b178:	20800015 	stw	r2,0(r4)
    b17c:	000b0401 	jmpi	b040 <_ZNSt9type_infoD1Ev>

0000b180 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    b180:	defffe04 	addi	sp,sp,-8
    b184:	008000f4 	movhi	r2,3
    b188:	dc000015 	stw	r16,0(sp)
    b18c:	dfc00115 	stw	ra,4(sp)
    b190:	10a9c304 	addi	r2,r2,-22772
    b194:	20800015 	stw	r2,0(r4)
    b198:	2021883a 	mov	r16,r4
    b19c:	000b0400 	call	b040 <_ZNSt9type_infoD1Ev>
    b1a0:	8009883a 	mov	r4,r16
    b1a4:	dfc00117 	ldw	ra,4(sp)
    b1a8:	dc000017 	ldw	r16,0(sp)
    b1ac:	dec00204 	addi	sp,sp,8
    b1b0:	000b09c1 	jmpi	b09c <_ZdlPv>

0000b1b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    b1b4:	21000117 	ldw	r4,4(r4)
    b1b8:	29400117 	ldw	r5,4(r5)
    b1bc:	defffd04 	addi	sp,sp,-12
    b1c0:	dc400115 	stw	r17,4(sp)
    b1c4:	dc000015 	stw	r16,0(sp)
    b1c8:	dfc00215 	stw	ra,8(sp)
    b1cc:	3023883a 	mov	r17,r6
    b1d0:	3821883a 	mov	r16,r7
    b1d4:	21400526 	beq	r4,r5,b1ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    b1d8:	20c00007 	ldb	r3,0(r4)
    b1dc:	00800a84 	movi	r2,42
    b1e0:	18800d26 	beq	r3,r2,b218 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b1e4:	000f3480 	call	f348 <strcmp>
    b1e8:	10000b1e 	bne	r2,zero,b218 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    b1ec:	00800204 	movi	r2,8
    b1f0:	80800315 	stw	r2,12(r16)
    b1f4:	00800184 	movi	r2,6
    b1f8:	80800115 	stw	r2,4(r16)
    b1fc:	84400015 	stw	r17,0(r16)
    b200:	00800044 	movi	r2,1
    b204:	dfc00217 	ldw	ra,8(sp)
    b208:	dc400117 	ldw	r17,4(sp)
    b20c:	dc000017 	ldw	r16,0(sp)
    b210:	dec00304 	addi	sp,sp,12
    b214:	f800283a 	ret
    b218:	0005883a 	mov	r2,zero
    b21c:	003ff906 	br	b204 <__alt_data_end+0xfc00b204>

0000b220 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    b220:	defffa04 	addi	sp,sp,-24
    b224:	dc800415 	stw	r18,16(sp)
    b228:	d8800817 	ldw	r2,32(sp)
    b22c:	dc800617 	ldw	r18,24(sp)
    b230:	dc400315 	stw	r17,12(sp)
    b234:	dc000215 	stw	r16,8(sp)
    b238:	dfc00515 	stw	ra,20(sp)
    b23c:	dc400917 	ldw	r17,36(sp)
    b240:	24000117 	ldw	r16,4(r4)
    b244:	90801526 	beq	r18,r2,b29c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    b248:	39400117 	ldw	r5,4(r7)
    b24c:	2c000826 	beq	r5,r16,b270 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    b250:	80c00007 	ldb	r3,0(r16)
    b254:	00800a84 	movi	r2,42
    b258:	18800926 	beq	r3,r2,b280 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b25c:	8009883a 	mov	r4,r16
    b260:	d9800115 	stw	r6,4(sp)
    b264:	000f3480 	call	f348 <strcmp>
    b268:	d9800117 	ldw	r6,4(sp)
    b26c:	1000041e 	bne	r2,zero,b280 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    b270:	00800044 	movi	r2,1
    b274:	8c800015 	stw	r18,0(r17)
    b278:	89800115 	stw	r6,4(r17)
    b27c:	88800315 	stw	r2,12(r17)
    b280:	0005883a 	mov	r2,zero
    b284:	dfc00517 	ldw	ra,20(sp)
    b288:	dc800417 	ldw	r18,16(sp)
    b28c:	dc400317 	ldw	r17,12(sp)
    b290:	dc000217 	ldw	r16,8(sp)
    b294:	dec00604 	addi	sp,sp,24
    b298:	f800283a 	ret
    b29c:	d8800717 	ldw	r2,28(sp)
    b2a0:	11400117 	ldw	r5,4(r2)
    b2a4:	81400a26 	beq	r16,r5,b2d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    b2a8:	80c00007 	ldb	r3,0(r16)
    b2ac:	00800a84 	movi	r2,42
    b2b0:	18800c26 	beq	r3,r2,b2e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    b2b4:	8009883a 	mov	r4,r16
    b2b8:	d9800115 	stw	r6,4(sp)
    b2bc:	d9c00015 	stw	r7,0(sp)
    b2c0:	000f3480 	call	f348 <strcmp>
    b2c4:	d9800117 	ldw	r6,4(sp)
    b2c8:	d9c00017 	ldw	r7,0(sp)
    b2cc:	1000021e 	bne	r2,zero,b2d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    b2d0:	89800215 	stw	r6,8(r17)
    b2d4:	003fea06 	br	b280 <__alt_data_end+0xfc00b280>
    b2d8:	39400117 	ldw	r5,4(r7)
    b2dc:	817fdf1e 	bne	r16,r5,b25c <__alt_data_end+0xfc00b25c>
    b2e0:	003fe306 	br	b270 <__alt_data_end+0xfc00b270>
    b2e4:	38800117 	ldw	r2,4(r7)
    b2e8:	80bfe51e 	bne	r16,r2,b280 <__alt_data_end+0xfc00b280>
    b2ec:	003fe006 	br	b270 <__alt_data_end+0xfc00b270>

0000b2f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    b2f0:	20800117 	ldw	r2,4(r4)
    b2f4:	28c00117 	ldw	r3,4(r5)
    b2f8:	10c02926 	beq	r2,r3,b3a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    b2fc:	defffb04 	addi	sp,sp,-20
    b300:	dcc00315 	stw	r19,12(sp)
    b304:	dc800215 	stw	r18,8(sp)
    b308:	dc400115 	stw	r17,4(sp)
    b30c:	dc000015 	stw	r16,0(sp)
    b310:	dfc00415 	stw	ra,16(sp)
    b314:	2821883a 	mov	r16,r5
    b318:	11400007 	ldb	r5,0(r2)
    b31c:	2025883a 	mov	r18,r4
    b320:	01000a84 	movi	r4,42
    b324:	3823883a 	mov	r17,r7
    b328:	3027883a 	mov	r19,r6
    b32c:	29000626 	beq	r5,r4,b348 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b330:	180b883a 	mov	r5,r3
    b334:	1009883a 	mov	r4,r2
    b338:	000f3480 	call	f348 <strcmp>
    b33c:	1000021e 	bne	r2,zero,b348 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    b340:	00800044 	movi	r2,1
    b344:	00000306 	br	b354 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    b348:	008000c4 	movi	r2,3
    b34c:	1440082e 	bgeu	r2,r17,b370 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    b350:	0005883a 	mov	r2,zero
    b354:	dfc00417 	ldw	ra,16(sp)
    b358:	dcc00317 	ldw	r19,12(sp)
    b35c:	dc800217 	ldw	r18,8(sp)
    b360:	dc400117 	ldw	r17,4(sp)
    b364:	dc000017 	ldw	r16,0(sp)
    b368:	dec00504 	addi	sp,sp,20
    b36c:	f800283a 	ret
    b370:	80800017 	ldw	r2,0(r16)
    b374:	980d883a 	mov	r6,r19
    b378:	900b883a 	mov	r5,r18
    b37c:	10800517 	ldw	r2,20(r2)
    b380:	8009883a 	mov	r4,r16
    b384:	dfc00417 	ldw	ra,16(sp)
    b388:	dcc00317 	ldw	r19,12(sp)
    b38c:	dc800217 	ldw	r18,8(sp)
    b390:	dc400117 	ldw	r17,4(sp)
    b394:	dc000017 	ldw	r16,0(sp)
    b398:	dec00504 	addi	sp,sp,20
    b39c:	1000683a 	jmp	r2
    b3a0:	00800044 	movi	r2,1
    b3a4:	f800283a 	ret

0000b3a8 <_ZN10__cxxabiv111__terminateEPFvvE>:
    b3a8:	00800074 	movhi	r2,1
    b3ac:	deffef04 	addi	sp,sp,-68
    b3b0:	10af4404 	addi	r2,r2,-17136
    b3b4:	d8800615 	stw	r2,24(sp)
    b3b8:	008000b4 	movhi	r2,2
    b3bc:	108e7304 	addi	r2,r2,14796
    b3c0:	d8800715 	stw	r2,28(sp)
    b3c4:	00800074 	movhi	r2,1
    b3c8:	10ad0004 	addi	r2,r2,-19456
    b3cc:	d9000d15 	stw	r4,52(sp)
    b3d0:	d809883a 	mov	r4,sp
    b3d4:	d8800915 	stw	r2,36(sp)
    b3d8:	dfc01015 	stw	ra,64(sp)
    b3dc:	df000f15 	stw	fp,60(sp)
    b3e0:	dec00815 	stw	sp,32(sp)
    b3e4:	dec00a15 	stw	sp,40(sp)
    b3e8:	000df480 	call	df48 <_Unwind_SjLj_Register>
    b3ec:	00800044 	movi	r2,1
    b3f0:	d8800115 	stw	r2,4(sp)
    b3f4:	d8800d17 	ldw	r2,52(sp)
    b3f8:	103ee83a 	callr	r2
    b3fc:	000e2c40 	call	e2c4 <abort>
    b400:	d8c00217 	ldw	r3,8(sp)
    b404:	d8800117 	ldw	r2,4(sp)
    b408:	d8c00d15 	stw	r3,52(sp)
    b40c:	d8c00317 	ldw	r3,12(sp)
    b410:	d8c00e15 	stw	r3,56(sp)
    b414:	10000b26 	beq	r2,zero,b444 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    b418:	10bfffc4 	addi	r2,r2,-1
    b41c:	10000126 	beq	r2,zero,b424 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    b420:	003b68fa 	trap	3
    b424:	d8000115 	stw	zero,4(sp)
    b428:	000c7540 	call	c754 <__cxa_end_catch>
    b42c:	d8c00e17 	ldw	r3,56(sp)
    b430:	00bfffc4 	movi	r2,-1
    b434:	18800826 	beq	r3,r2,b458 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    b438:	d9000d17 	ldw	r4,52(sp)
    b43c:	d8800115 	stw	r2,4(sp)
    b440:	000e1440 	call	e144 <_Unwind_SjLj_Resume>
    b444:	d9000d17 	ldw	r4,52(sp)
    b448:	000c6a00 	call	c6a0 <__cxa_begin_catch>
    b44c:	00800084 	movi	r2,2
    b450:	d8800115 	stw	r2,4(sp)
    b454:	000e2c40 	call	e2c4 <abort>
    b458:	d8800e17 	ldw	r2,56(sp)
    b45c:	d9000d17 	ldw	r4,52(sp)
    b460:	d8800115 	stw	r2,4(sp)
    b464:	000c3100 	call	c310 <__cxa_call_unexpected>

0000b468 <_ZSt9terminatev>:
    b468:	008000f4 	movhi	r2,3
    b46c:	10b74304 	addi	r2,r2,-8948
    b470:	11000017 	ldw	r4,0(r2)
    b474:	deffff04 	addi	sp,sp,-4
    b478:	dfc00015 	stw	ra,0(sp)
    b47c:	000b3a80 	call	b3a8 <_ZN10__cxxabiv111__terminateEPFvvE>

0000b480 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    b480:	deffff04 	addi	sp,sp,-4
    b484:	dfc00015 	stw	ra,0(sp)
    b488:	203ee83a 	callr	r4
    b48c:	000b4680 	call	b468 <_ZSt9terminatev>

0000b490 <_ZSt10unexpectedv>:
    b490:	008000f4 	movhi	r2,3
    b494:	10b74204 	addi	r2,r2,-8952
    b498:	11000017 	ldw	r4,0(r2)
    b49c:	deffff04 	addi	sp,sp,-4
    b4a0:	dfc00015 	stw	ra,0(sp)
    b4a4:	000b4800 	call	b480 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000b4a8 <_ZSt13set_terminatePFvvE>:
    b4a8:	00c000f4 	movhi	r3,3
    b4ac:	18f74304 	addi	r3,r3,-8948
    b4b0:	18800017 	ldw	r2,0(r3)
    b4b4:	19000015 	stw	r4,0(r3)
    b4b8:	f800283a 	ret

0000b4bc <_ZSt13get_terminatev>:
    b4bc:	008000f4 	movhi	r2,3
    b4c0:	10b74304 	addi	r2,r2,-8948
    b4c4:	10800017 	ldw	r2,0(r2)
    b4c8:	f800283a 	ret

0000b4cc <_ZSt14set_unexpectedPFvvE>:
    b4cc:	00c000f4 	movhi	r3,3
    b4d0:	18f74204 	addi	r3,r3,-8952
    b4d4:	18800017 	ldw	r2,0(r3)
    b4d8:	19000015 	stw	r4,0(r3)
    b4dc:	f800283a 	ret

0000b4e0 <_ZSt14get_unexpectedv>:
    b4e0:	008000f4 	movhi	r2,3
    b4e4:	10b74204 	addi	r2,r2,-8952
    b4e8:	10800017 	ldw	r2,0(r2)
    b4ec:	f800283a 	ret

0000b4f0 <_ZL21size_of_encoded_valueh>:
    b4f0:	deffff04 	addi	sp,sp,-4
    b4f4:	dfc00015 	stw	ra,0(sp)
    b4f8:	20c03fcc 	andi	r3,r4,255
    b4fc:	00803fc4 	movi	r2,255
    b500:	18802026 	beq	r3,r2,b584 <_ZL21size_of_encoded_valueh+0x94>
    b504:	210001cc 	andi	r4,r4,7
    b508:	00800144 	movi	r2,5
    b50c:	11001c36 	bltu	r2,r4,b580 <_ZL21size_of_encoded_valueh+0x90>
    b510:	200890ba 	slli	r4,r4,2
    b514:	00800074 	movhi	r2,1
    b518:	10ad4a04 	addi	r2,r2,-19160
    b51c:	2089883a 	add	r4,r4,r2
    b520:	20800017 	ldw	r2,0(r4)
    b524:	1000683a 	jmp	r2
    b528:	0000b540 	call	b54 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x144>
    b52c:	0000b580 	call	b58 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x148>
    b530:	0000b550 	cmplti	zero,zero,725
    b534:	0000b540 	call	b54 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x144>
    b538:	0000b570 	cmpltui	zero,zero,725
    b53c:	0000b560 	cmpeqi	zero,zero,725
    b540:	00800104 	movi	r2,4
    b544:	dfc00017 	ldw	ra,0(sp)
    b548:	dec00104 	addi	sp,sp,4
    b54c:	f800283a 	ret
    b550:	00800084 	movi	r2,2
    b554:	dfc00017 	ldw	ra,0(sp)
    b558:	dec00104 	addi	sp,sp,4
    b55c:	f800283a 	ret
    b560:	00800044 	movi	r2,1
    b564:	dfc00017 	ldw	ra,0(sp)
    b568:	dec00104 	addi	sp,sp,4
    b56c:	f800283a 	ret
    b570:	00800204 	movi	r2,8
    b574:	dfc00017 	ldw	ra,0(sp)
    b578:	dec00104 	addi	sp,sp,4
    b57c:	f800283a 	ret
    b580:	000e2c40 	call	e2c4 <abort>
    b584:	0005883a 	mov	r2,zero
    b588:	dfc00017 	ldw	ra,0(sp)
    b58c:	dec00104 	addi	sp,sp,4
    b590:	f800283a 	ret

0000b594 <_ZL28read_encoded_value_with_basehjPKhPj>:
    b594:	deffff04 	addi	sp,sp,-4
    b598:	dfc00015 	stw	ra,0(sp)
    b59c:	20c03fcc 	andi	r3,r4,255
    b5a0:	00801404 	movi	r2,80
    b5a4:	18807326 	beq	r3,r2,b774 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    b5a8:	20c003cc 	andi	r3,r4,15
    b5ac:	00800304 	movi	r2,12
    b5b0:	10c06f36 	bltu	r2,r3,b770 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    b5b4:	180690ba 	slli	r3,r3,2
    b5b8:	02000074 	movhi	r8,1
    b5bc:	422d7304 	addi	r8,r8,-18996
    b5c0:	1a07883a 	add	r3,r3,r8
    b5c4:	18800017 	ldw	r2,0(r3)
    b5c8:	1000683a 	jmp	r2
    b5cc:	0000b600 	call	b60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x150>
    b5d0:	0000b71c 	xori	zero,zero,732
    b5d4:	0000b758 	cmpnei	zero,zero,733
    b5d8:	0000b600 	call	b60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x150>
    b5dc:	0000b664 	muli	zero,zero,729
    b5e0:	0000b6b8 	rdprs	zero,zero,730
    b5e4:	0000b770 	cmpltui	zero,zero,733
    b5e8:	0000b770 	cmpltui	zero,zero,733
    b5ec:	0000b770 	cmpltui	zero,zero,733
    b5f0:	0000b6c4 	movi	zero,731
    b5f4:	0000b694 	movui	zero,730
    b5f8:	0000b600 	call	b60 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x150>
    b5fc:	0000b664 	muli	zero,zero,729
    b600:	30800043 	ldbu	r2,1(r6)
    b604:	30c00083 	ldbu	r3,2(r6)
    b608:	324000c3 	ldbu	r9,3(r6)
    b60c:	32000003 	ldbu	r8,0(r6)
    b610:	1004923a 	slli	r2,r2,8
    b614:	1806943a 	slli	r3,r3,16
    b618:	4812963a 	slli	r9,r9,24
    b61c:	1204b03a 	or	r2,r2,r8
    b620:	1884b03a 	or	r2,r3,r2
    b624:	4886b03a 	or	r3,r9,r2
    b628:	30800104 	addi	r2,r6,4
    b62c:	18000926 	beq	r3,zero,b654 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b630:	22001c0c 	andi	r8,r4,112
    b634:	02400404 	movi	r9,16
    b638:	42405726 	beq	r8,r9,b798 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    b63c:	21003fcc 	andi	r4,r4,255
    b640:	2100201c 	xori	r4,r4,128
    b644:	213fe004 	addi	r4,r4,-128
    b648:	1947883a 	add	r3,r3,r5
    b64c:	2000010e 	bge	r4,zero,b654 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    b650:	18c00017 	ldw	r3,0(r3)
    b654:	38c00015 	stw	r3,0(r7)
    b658:	dfc00017 	ldw	ra,0(sp)
    b65c:	dec00104 	addi	sp,sp,4
    b660:	f800283a 	ret
    b664:	30800043 	ldbu	r2,1(r6)
    b668:	30c00083 	ldbu	r3,2(r6)
    b66c:	324000c3 	ldbu	r9,3(r6)
    b670:	32000003 	ldbu	r8,0(r6)
    b674:	1004923a 	slli	r2,r2,8
    b678:	1806943a 	slli	r3,r3,16
    b67c:	4812963a 	slli	r9,r9,24
    b680:	1204b03a 	or	r2,r2,r8
    b684:	1884b03a 	or	r2,r3,r2
    b688:	4886b03a 	or	r3,r9,r2
    b68c:	30800204 	addi	r2,r6,8
    b690:	003fe606 	br	b62c <__alt_data_end+0xfc00b62c>
    b694:	30c00043 	ldbu	r3,1(r6)
    b698:	32000003 	ldbu	r8,0(r6)
    b69c:	30800084 	addi	r2,r6,2
    b6a0:	1806923a 	slli	r3,r3,8
    b6a4:	1a06b03a 	or	r3,r3,r8
    b6a8:	18ffffcc 	andi	r3,r3,65535
    b6ac:	18e0001c 	xori	r3,r3,32768
    b6b0:	18e00004 	addi	r3,r3,-32768
    b6b4:	003fdd06 	br	b62c <__alt_data_end+0xfc00b62c>
    b6b8:	30c00003 	ldbu	r3,0(r6)
    b6bc:	30800044 	addi	r2,r6,1
    b6c0:	003fda06 	br	b62c <__alt_data_end+0xfc00b62c>
    b6c4:	3017883a 	mov	r11,r6
    b6c8:	0007883a 	mov	r3,zero
    b6cc:	0013883a 	mov	r9,zero
    b6d0:	5a800003 	ldbu	r10,0(r11)
    b6d4:	58800044 	addi	r2,r11,1
    b6d8:	1017883a 	mov	r11,r2
    b6dc:	52001fcc 	andi	r8,r10,127
    b6e0:	4250983a 	sll	r8,r8,r9
    b6e4:	53003fcc 	andi	r12,r10,255
    b6e8:	6300201c 	xori	r12,r12,128
    b6ec:	633fe004 	addi	r12,r12,-128
    b6f0:	1a06b03a 	or	r3,r3,r8
    b6f4:	4a4001c4 	addi	r9,r9,7
    b6f8:	603ff516 	blt	r12,zero,b6d0 <__alt_data_end+0xfc00b6d0>
    b6fc:	020007c4 	movi	r8,31
    b700:	427fca36 	bltu	r8,r9,b62c <__alt_data_end+0xfc00b62c>
    b704:	5280100c 	andi	r10,r10,64
    b708:	503fc826 	beq	r10,zero,b62c <__alt_data_end+0xfc00b62c>
    b70c:	023fffc4 	movi	r8,-1
    b710:	4252983a 	sll	r9,r8,r9
    b714:	1a46b03a 	or	r3,r3,r9
    b718:	003fc506 	br	b630 <__alt_data_end+0xfc00b630>
    b71c:	3017883a 	mov	r11,r6
    b720:	0007883a 	mov	r3,zero
    b724:	0015883a 	mov	r10,zero
    b728:	5a000003 	ldbu	r8,0(r11)
    b72c:	58800044 	addi	r2,r11,1
    b730:	1017883a 	mov	r11,r2
    b734:	42401fcc 	andi	r9,r8,127
    b738:	4a92983a 	sll	r9,r9,r10
    b73c:	42003fcc 	andi	r8,r8,255
    b740:	4200201c 	xori	r8,r8,128
    b744:	423fe004 	addi	r8,r8,-128
    b748:	1a46b03a 	or	r3,r3,r9
    b74c:	528001c4 	addi	r10,r10,7
    b750:	403ff516 	blt	r8,zero,b728 <__alt_data_end+0xfc00b728>
    b754:	003fb506 	br	b62c <__alt_data_end+0xfc00b62c>
    b758:	30c00043 	ldbu	r3,1(r6)
    b75c:	32000003 	ldbu	r8,0(r6)
    b760:	30800084 	addi	r2,r6,2
    b764:	1806923a 	slli	r3,r3,8
    b768:	1a06b03a 	or	r3,r3,r8
    b76c:	003faf06 	br	b62c <__alt_data_end+0xfc00b62c>
    b770:	000e2c40 	call	e2c4 <abort>
    b774:	308000c4 	addi	r2,r6,3
    b778:	00ffff04 	movi	r3,-4
    b77c:	10c4703a 	and	r2,r2,r3
    b780:	10c00017 	ldw	r3,0(r2)
    b784:	10800104 	addi	r2,r2,4
    b788:	38c00015 	stw	r3,0(r7)
    b78c:	dfc00017 	ldw	ra,0(sp)
    b790:	dec00104 	addi	sp,sp,4
    b794:	f800283a 	ret
    b798:	300b883a 	mov	r5,r6
    b79c:	003fa706 	br	b63c <__alt_data_end+0xfc00b63c>

0000b7a0 <_ZL15get_ttype_entryP16lsda_header_infom>:
    b7a0:	defffc04 	addi	sp,sp,-16
    b7a4:	dfc00315 	stw	ra,12(sp)
    b7a8:	dc000215 	stw	r16,8(sp)
    b7ac:	2021883a 	mov	r16,r4
    b7b0:	21000503 	ldbu	r4,20(r4)
    b7b4:	d9400115 	stw	r5,4(sp)
    b7b8:	000b4f00 	call	b4f0 <_ZL21size_of_encoded_valueh>
    b7bc:	d9400117 	ldw	r5,4(sp)
    b7c0:	1009883a 	mov	r4,r2
    b7c4:	000cda80 	call	cda8 <__mulsi3>
    b7c8:	81800317 	ldw	r6,12(r16)
    b7cc:	81400217 	ldw	r5,8(r16)
    b7d0:	81000503 	ldbu	r4,20(r16)
    b7d4:	d80f883a 	mov	r7,sp
    b7d8:	308dc83a 	sub	r6,r6,r2
    b7dc:	000b5940 	call	b594 <_ZL28read_encoded_value_with_basehjPKhPj>
    b7e0:	d8800017 	ldw	r2,0(sp)
    b7e4:	dfc00317 	ldw	ra,12(sp)
    b7e8:	dc000217 	ldw	r16,8(sp)
    b7ec:	dec00404 	addi	sp,sp,16
    b7f0:	f800283a 	ret

0000b7f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    b7f4:	deffff04 	addi	sp,sp,-4
    b7f8:	dfc00015 	stw	ra,0(sp)
    b7fc:	20c03fcc 	andi	r3,r4,255
    b800:	00803fc4 	movi	r2,255
    b804:	18800e26 	beq	r3,r2,b840 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b808:	20801c0c 	andi	r2,r4,112
    b80c:	00c00804 	movi	r3,32
    b810:	10c01726 	beq	r2,r3,b870 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    b814:	18800e2e 	bgeu	r3,r2,b850 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    b818:	00c01004 	movi	r3,64
    b81c:	10c01026 	beq	r2,r3,b860 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    b820:	00c01404 	movi	r3,80
    b824:	10c00626 	beq	r2,r3,b840 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    b828:	00c00c04 	movi	r3,48
    b82c:	10c00b1e 	bne	r2,r3,b85c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    b830:	2809883a 	mov	r4,r5
    b834:	dfc00017 	ldw	ra,0(sp)
    b838:	dec00104 	addi	sp,sp,4
    b83c:	000e0201 	jmpi	e020 <_Unwind_GetDataRelBase>
    b840:	0005883a 	mov	r2,zero
    b844:	dfc00017 	ldw	ra,0(sp)
    b848:	dec00104 	addi	sp,sp,4
    b84c:	f800283a 	ret
    b850:	103ffb26 	beq	r2,zero,b840 <__alt_data_end+0xfc00b840>
    b854:	00c00404 	movi	r3,16
    b858:	10fff926 	beq	r2,r3,b840 <__alt_data_end+0xfc00b840>
    b85c:	000e2c40 	call	e2c4 <abort>
    b860:	2809883a 	mov	r4,r5
    b864:	dfc00017 	ldw	ra,0(sp)
    b868:	dec00104 	addi	sp,sp,4
    b86c:	000e0101 	jmpi	e010 <_Unwind_GetRegionStart>
    b870:	2809883a 	mov	r4,r5
    b874:	dfc00017 	ldw	ra,0(sp)
    b878:	dec00104 	addi	sp,sp,4
    b87c:	000e0281 	jmpi	e028 <_Unwind_GetTextRelBase>

0000b880 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    b880:	defffb04 	addi	sp,sp,-20
    b884:	dcc00315 	stw	r19,12(sp)
    b888:	dc400115 	stw	r17,4(sp)
    b88c:	dc000015 	stw	r16,0(sp)
    b890:	dfc00415 	stw	ra,16(sp)
    b894:	dc800215 	stw	r18,8(sp)
    b898:	2027883a 	mov	r19,r4
    b89c:	2821883a 	mov	r16,r5
    b8a0:	3023883a 	mov	r17,r6
    b8a4:	20003f26 	beq	r4,zero,b9a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    b8a8:	000e0100 	call	e010 <_Unwind_GetRegionStart>
    b8ac:	88800015 	stw	r2,0(r17)
    b8b0:	84800003 	ldbu	r18,0(r16)
    b8b4:	00c03fc4 	movi	r3,255
    b8b8:	84000044 	addi	r16,r16,1
    b8bc:	90c03726 	beq	r18,r3,b99c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    b8c0:	980b883a 	mov	r5,r19
    b8c4:	9009883a 	mov	r4,r18
    b8c8:	000b7f40 	call	b7f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    b8cc:	800d883a 	mov	r6,r16
    b8d0:	89c00104 	addi	r7,r17,4
    b8d4:	100b883a 	mov	r5,r2
    b8d8:	9009883a 	mov	r4,r18
    b8dc:	000b5940 	call	b594 <_ZL28read_encoded_value_with_basehjPKhPj>
    b8e0:	1021883a 	mov	r16,r2
    b8e4:	80c00003 	ldbu	r3,0(r16)
    b8e8:	01003fc4 	movi	r4,255
    b8ec:	80800044 	addi	r2,r16,1
    b8f0:	88c00505 	stb	r3,20(r17)
    b8f4:	18c03fcc 	andi	r3,r3,255
    b8f8:	19002c26 	beq	r3,r4,b9ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    b8fc:	100f883a 	mov	r7,r2
    b900:	000d883a 	mov	r6,zero
    b904:	000b883a 	mov	r5,zero
    b908:	38c00003 	ldbu	r3,0(r7)
    b90c:	10800044 	addi	r2,r2,1
    b910:	100f883a 	mov	r7,r2
    b914:	19001fcc 	andi	r4,r3,127
    b918:	2148983a 	sll	r4,r4,r5
    b91c:	18c03fcc 	andi	r3,r3,255
    b920:	18c0201c 	xori	r3,r3,128
    b924:	18ffe004 	addi	r3,r3,-128
    b928:	310cb03a 	or	r6,r6,r4
    b92c:	294001c4 	addi	r5,r5,7
    b930:	183ff516 	blt	r3,zero,b908 <__alt_data_end+0xfc00b908>
    b934:	118d883a 	add	r6,r2,r6
    b938:	89800315 	stw	r6,12(r17)
    b93c:	10c00003 	ldbu	r3,0(r2)
    b940:	000d883a 	mov	r6,zero
    b944:	10800044 	addi	r2,r2,1
    b948:	88c00545 	stb	r3,21(r17)
    b94c:	000b883a 	mov	r5,zero
    b950:	10c00003 	ldbu	r3,0(r2)
    b954:	10800044 	addi	r2,r2,1
    b958:	19001fcc 	andi	r4,r3,127
    b95c:	2148983a 	sll	r4,r4,r5
    b960:	18c03fcc 	andi	r3,r3,255
    b964:	18c0201c 	xori	r3,r3,128
    b968:	18ffe004 	addi	r3,r3,-128
    b96c:	310cb03a 	or	r6,r6,r4
    b970:	294001c4 	addi	r5,r5,7
    b974:	183ff616 	blt	r3,zero,b950 <__alt_data_end+0xfc00b950>
    b978:	118d883a 	add	r6,r2,r6
    b97c:	89800415 	stw	r6,16(r17)
    b980:	dfc00417 	ldw	ra,16(sp)
    b984:	dcc00317 	ldw	r19,12(sp)
    b988:	dc800217 	ldw	r18,8(sp)
    b98c:	dc400117 	ldw	r17,4(sp)
    b990:	dc000017 	ldw	r16,0(sp)
    b994:	dec00504 	addi	sp,sp,20
    b998:	f800283a 	ret
    b99c:	88800115 	stw	r2,4(r17)
    b9a0:	003fd006 	br	b8e4 <__alt_data_end+0xfc00b8e4>
    b9a4:	0005883a 	mov	r2,zero
    b9a8:	003fc006 	br	b8ac <__alt_data_end+0xfc00b8ac>
    b9ac:	88000315 	stw	zero,12(r17)
    b9b0:	003fe206 	br	b93c <__alt_data_end+0xfc00b93c>

0000b9b4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    b9b4:	28800017 	ldw	r2,0(r5)
    b9b8:	30c00017 	ldw	r3,0(r6)
    b9bc:	defffb04 	addi	sp,sp,-20
    b9c0:	10800217 	ldw	r2,8(r2)
    b9c4:	dc400315 	stw	r17,12(sp)
    b9c8:	dc000215 	stw	r16,8(sp)
    b9cc:	d9400115 	stw	r5,4(sp)
    b9d0:	dfc00415 	stw	ra,16(sp)
    b9d4:	2021883a 	mov	r16,r4
    b9d8:	d8c00015 	stw	r3,0(sp)
    b9dc:	2809883a 	mov	r4,r5
    b9e0:	3023883a 	mov	r17,r6
    b9e4:	103ee83a 	callr	r2
    b9e8:	10803fcc 	andi	r2,r2,255
    b9ec:	d9400117 	ldw	r5,4(sp)
    b9f0:	10000326 	beq	r2,zero,ba00 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    b9f4:	d8800017 	ldw	r2,0(sp)
    b9f8:	10800017 	ldw	r2,0(r2)
    b9fc:	d8800015 	stw	r2,0(sp)
    ba00:	80800017 	ldw	r2,0(r16)
    ba04:	01c00044 	movi	r7,1
    ba08:	d80d883a 	mov	r6,sp
    ba0c:	10800417 	ldw	r2,16(r2)
    ba10:	8009883a 	mov	r4,r16
    ba14:	103ee83a 	callr	r2
    ba18:	10c03fcc 	andi	r3,r2,255
    ba1c:	18000226 	beq	r3,zero,ba28 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    ba20:	d8c00017 	ldw	r3,0(sp)
    ba24:	88c00015 	stw	r3,0(r17)
    ba28:	dfc00417 	ldw	ra,16(sp)
    ba2c:	dc400317 	ldw	r17,12(sp)
    ba30:	dc000217 	ldw	r16,8(sp)
    ba34:	dec00504 	addi	sp,sp,20
    ba38:	f800283a 	ret

0000ba3c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    ba3c:	defff304 	addi	sp,sp,-52
    ba40:	dc800615 	stw	r18,24(sp)
    ba44:	3825d23a 	srai	r18,r7,8
    ba48:	dd000815 	stw	r20,32(sp)
    ba4c:	dcc00715 	stw	r19,28(sp)
    ba50:	dfc00c15 	stw	ra,48(sp)
    ba54:	ddc00b15 	stw	r23,44(sp)
    ba58:	dd800a15 	stw	r22,40(sp)
    ba5c:	dd400915 	stw	r21,36(sp)
    ba60:	dc400515 	stw	r17,20(sp)
    ba64:	dc000415 	stw	r16,16(sp)
    ba68:	d9400215 	stw	r5,8(sp)
    ba6c:	3827883a 	mov	r19,r7
    ba70:	2029883a 	mov	r20,r4
    ba74:	9000010e 	bge	r18,zero,ba7c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
    ba78:	04a5c83a 	sub	r18,zero,r18
    ba7c:	000b883a 	mov	r5,zero
    ba80:	01000144 	movi	r4,5
    ba84:	d9800315 	stw	r6,12(sp)
    ba88:	000b7f40 	call	b7f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    ba8c:	d9800317 	ldw	r6,12(sp)
    ba90:	d9c00104 	addi	r7,sp,4
    ba94:	100b883a 	mov	r5,r2
    ba98:	01000144 	movi	r4,5
    ba9c:	000b5940 	call	b594 <_ZL28read_encoded_value_with_basehjPKhPj>
    baa0:	017ffe44 	movi	r5,-7
    baa4:	1009883a 	mov	r4,r2
    baa8:	1021883a 	mov	r16,r2
    baac:	000cda80 	call	cda8 <__mulsi3>
    bab0:	102d883a 	mov	r22,r2
    bab4:	0023883a 	mov	r17,zero
    bab8:	85400003 	ldbu	r21,0(r16)
    babc:	8009883a 	mov	r4,r16
    bac0:	014001c4 	movi	r5,7
    bac4:	000cda80 	call	cda8 <__mulsi3>
    bac8:	a8c01fcc 	andi	r3,r21,127
    bacc:	1585883a 	add	r2,r2,r22
    bad0:	1886983a 	sll	r3,r3,r2
    bad4:	ad403fcc 	andi	r21,r21,255
    bad8:	ad40201c 	xori	r21,r21,128
    badc:	ad7fe004 	addi	r21,r21,-128
    bae0:	84000044 	addi	r16,r16,1
    bae4:	88e2b03a 	or	r17,r17,r3
    bae8:	a83ff316 	blt	r21,zero,bab8 <__alt_data_end+0xfc00bab8>
    baec:	8461883a 	add	r16,r16,r17
    baf0:	017ffe44 	movi	r5,-7
    baf4:	8009883a 	mov	r4,r16
    baf8:	000cda80 	call	cda8 <__mulsi3>
    bafc:	102d883a 	mov	r22,r2
    bb00:	002b883a 	mov	r21,zero
    bb04:	84400003 	ldbu	r17,0(r16)
    bb08:	8009883a 	mov	r4,r16
    bb0c:	014001c4 	movi	r5,7
    bb10:	000cda80 	call	cda8 <__mulsi3>
    bb14:	88c01fcc 	andi	r3,r17,127
    bb18:	1585883a 	add	r2,r2,r22
    bb1c:	1886983a 	sll	r3,r3,r2
    bb20:	8c403fcc 	andi	r17,r17,255
    bb24:	8c40201c 	xori	r17,r17,128
    bb28:	8c7fe004 	addi	r17,r17,-128
    bb2c:	84000044 	addi	r16,r16,1
    bb30:	a8eab03a 	or	r21,r21,r3
    bb34:	883ff316 	blt	r17,zero,bb04 <__alt_data_end+0xfc00bb04>
    bb38:	94403fcc 	andi	r17,r18,255
    bb3c:	8c7fffc4 	addi	r17,r17,-1
    bb40:	8463883a 	add	r17,r16,r17
    bb44:	ad4000c4 	addi	r21,r21,3
    bb48:	00bfff04 	movi	r2,-4
    bb4c:	ac21883a 	add	r16,r21,r16
    bb50:	017ffe44 	movi	r5,-7
    bb54:	8809883a 	mov	r4,r17
    bb58:	80a0703a 	and	r16,r16,r2
    bb5c:	000cda80 	call	cda8 <__mulsi3>
    bb60:	0025883a 	mov	r18,zero
    bb64:	102f883a 	mov	r23,r2
    bb68:	8d800003 	ldbu	r22,0(r17)
    bb6c:	8809883a 	mov	r4,r17
    bb70:	014001c4 	movi	r5,7
    bb74:	000cda80 	call	cda8 <__mulsi3>
    bb78:	b0c01fcc 	andi	r3,r22,127
    bb7c:	15c5883a 	add	r2,r2,r23
    bb80:	1886983a 	sll	r3,r3,r2
    bb84:	b5803fcc 	andi	r22,r22,255
    bb88:	b580201c 	xori	r22,r22,128
    bb8c:	8d400044 	addi	r21,r17,1
    bb90:	b5bfe004 	addi	r22,r22,-128
    bb94:	90e4b03a 	or	r18,r18,r3
    bb98:	a823883a 	mov	r17,r21
    bb9c:	b03ff216 	blt	r22,zero,bb68 <__alt_data_end+0xfc00bb68>
    bba0:	9cc03fcc 	andi	r19,r19,255
    bba4:	90002426 	beq	r18,zero,bc38 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
    bba8:	9809883a 	mov	r4,r19
    bbac:	000b4f00 	call	b4f0 <_ZL21size_of_encoded_valueh>
    bbb0:	100b883a 	mov	r5,r2
    bbb4:	913fffc4 	addi	r4,r18,-1
    bbb8:	000cda80 	call	cda8 <__mulsi3>
    bbbc:	d9400d17 	ldw	r5,52(sp)
    bbc0:	d80f883a 	mov	r7,sp
    bbc4:	9809883a 	mov	r4,r19
    bbc8:	140d883a 	add	r6,r2,r16
    bbcc:	000b5940 	call	b594 <_ZL28read_encoded_value_with_basehjPKhPj>
    bbd0:	d9000017 	ldw	r4,0(sp)
    bbd4:	d9800204 	addi	r6,sp,8
    bbd8:	a00b883a 	mov	r5,r20
    bbdc:	000b9b40 	call	b9b4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bbe0:	10c03fcc 	andi	r3,r2,255
    bbe4:	1800151e 	bne	r3,zero,bc3c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
    bbe8:	a809883a 	mov	r4,r21
    bbec:	017ffe44 	movi	r5,-7
    bbf0:	000cda80 	call	cda8 <__mulsi3>
    bbf4:	102d883a 	mov	r22,r2
    bbf8:	a809883a 	mov	r4,r21
    bbfc:	0025883a 	mov	r18,zero
    bc00:	24400003 	ldbu	r17,0(r4)
    bc04:	014001c4 	movi	r5,7
    bc08:	000cda80 	call	cda8 <__mulsi3>
    bc0c:	88c01fcc 	andi	r3,r17,127
    bc10:	1585883a 	add	r2,r2,r22
    bc14:	1886983a 	sll	r3,r3,r2
    bc18:	8c403fcc 	andi	r17,r17,255
    bc1c:	8c40201c 	xori	r17,r17,128
    bc20:	ad400044 	addi	r21,r21,1
    bc24:	8c7fe004 	addi	r17,r17,-128
    bc28:	90e4b03a 	or	r18,r18,r3
    bc2c:	a809883a 	mov	r4,r21
    bc30:	883ff316 	blt	r17,zero,bc00 <__alt_data_end+0xfc00bc00>
    bc34:	003fdb06 	br	bba4 <__alt_data_end+0xfc00bba4>
    bc38:	0005883a 	mov	r2,zero
    bc3c:	dfc00c17 	ldw	ra,48(sp)
    bc40:	ddc00b17 	ldw	r23,44(sp)
    bc44:	dd800a17 	ldw	r22,40(sp)
    bc48:	dd400917 	ldw	r21,36(sp)
    bc4c:	dd000817 	ldw	r20,32(sp)
    bc50:	dcc00717 	ldw	r19,28(sp)
    bc54:	dc800617 	ldw	r18,24(sp)
    bc58:	dc400517 	ldw	r17,20(sp)
    bc5c:	dc000417 	ldw	r16,16(sp)
    bc60:	dec00d04 	addi	sp,sp,52
    bc64:	f800283a 	ret

0000bc68 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    bc68:	defffb04 	addi	sp,sp,-20
    bc6c:	dc000115 	stw	r16,4(sp)
    bc70:	24000317 	ldw	r16,12(r4)
    bc74:	01ce303a 	nor	r7,zero,r7
    bc78:	dc800315 	stw	r18,12(sp)
    bc7c:	dc400215 	stw	r17,8(sp)
    bc80:	dfc00415 	stw	ra,16(sp)
    bc84:	2023883a 	mov	r17,r4
    bc88:	2825883a 	mov	r18,r5
    bc8c:	d9800015 	stw	r6,0(sp)
    bc90:	81e1883a 	add	r16,r16,r7
    bc94:	800d883a 	mov	r6,r16
    bc98:	000b883a 	mov	r5,zero
    bc9c:	0009883a 	mov	r4,zero
    bca0:	30800003 	ldbu	r2,0(r6)
    bca4:	84000044 	addi	r16,r16,1
    bca8:	800d883a 	mov	r6,r16
    bcac:	10c01fcc 	andi	r3,r2,127
    bcb0:	1906983a 	sll	r3,r3,r4
    bcb4:	10803fcc 	andi	r2,r2,255
    bcb8:	1080201c 	xori	r2,r2,128
    bcbc:	10bfe004 	addi	r2,r2,-128
    bcc0:	28cab03a 	or	r5,r5,r3
    bcc4:	210001c4 	addi	r4,r4,7
    bcc8:	103ff516 	blt	r2,zero,bca0 <__alt_data_end+0xfc00bca0>
    bccc:	28000e26 	beq	r5,zero,bd08 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    bcd0:	8809883a 	mov	r4,r17
    bcd4:	000b7a00 	call	b7a0 <_ZL15get_ttype_entryP16lsda_header_infom>
    bcd8:	d80d883a 	mov	r6,sp
    bcdc:	900b883a 	mov	r5,r18
    bce0:	1009883a 	mov	r4,r2
    bce4:	000b9b40 	call	b9b4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    bce8:	10c03fcc 	andi	r3,r2,255
    bcec:	183fe926 	beq	r3,zero,bc94 <__alt_data_end+0xfc00bc94>
    bcf0:	dfc00417 	ldw	ra,16(sp)
    bcf4:	dc800317 	ldw	r18,12(sp)
    bcf8:	dc400217 	ldw	r17,8(sp)
    bcfc:	dc000117 	ldw	r16,4(sp)
    bd00:	dec00504 	addi	sp,sp,20
    bd04:	f800283a 	ret
    bd08:	0005883a 	mov	r2,zero
    bd0c:	003ff806 	br	bcf0 <__alt_data_end+0xfc00bcf0>

0000bd10 <__gxx_personality_sj0>:
    bd10:	00800074 	movhi	r2,1
    bd14:	deffdd04 	addi	sp,sp,-140
    bd18:	10af4404 	addi	r2,r2,-17136
    bd1c:	d8800e15 	stw	r2,56(sp)
    bd20:	008000b4 	movhi	r2,2
    bd24:	108e7904 	addi	r2,r2,14820
    bd28:	d8800f15 	stw	r2,60(sp)
    bd2c:	00800074 	movhi	r2,1
    bd30:	10b0ba04 	addi	r2,r2,-15640
    bd34:	d9001515 	stw	r4,84(sp)
    bd38:	d9000804 	addi	r4,sp,32
    bd3c:	d8801115 	stw	r2,68(sp)
    bd40:	dfc02215 	stw	ra,136(sp)
    bd44:	df002115 	stw	fp,132(sp)
    bd48:	dec01015 	stw	sp,64(sp)
    bd4c:	dec01215 	stw	sp,72(sp)
    bd50:	d9401915 	stw	r5,100(sp)
    bd54:	d9801615 	stw	r6,88(sp)
    bd58:	d9c01715 	stw	r7,92(sp)
    bd5c:	000df480 	call	df48 <_Unwind_SjLj_Register>
    bd60:	d8c01517 	ldw	r3,84(sp)
    bd64:	d8000715 	stw	zero,28(sp)
    bd68:	d8000615 	stw	zero,24(sp)
    bd6c:	00800044 	movi	r2,1
    bd70:	18800926 	beq	r3,r2,bd98 <__gxx_personality_sj0+0x88>
    bd74:	01c000c4 	movi	r7,3
    bd78:	d9c01515 	stw	r7,84(sp)
    bd7c:	d9000804 	addi	r4,sp,32
    bd80:	000df600 	call	df60 <_Unwind_SjLj_Unregister>
    bd84:	d8801517 	ldw	r2,84(sp)
    bd88:	dfc02217 	ldw	ra,136(sp)
    bd8c:	df002117 	ldw	fp,132(sp)
    bd90:	dec02304 	addi	sp,sp,140
    bd94:	f800283a 	ret
    bd98:	d9001617 	ldw	r4,88(sp)
    bd9c:	00af3574 	movhi	r2,48341
    bda0:	d9c01717 	ldw	r7,92(sp)
    bda4:	10b54004 	addi	r2,r2,-11008
    bda8:	00ee2cb4 	movhi	r3,47282
    bdac:	2085883a 	add	r2,r4,r2
    bdb0:	18eaaf04 	addi	r3,r3,-21828
    bdb4:	d8801b15 	stw	r2,108(sp)
    bdb8:	38c7883a 	add	r3,r7,r3
    bdbc:	1105803a 	cmpltu	r2,r2,r4
    bdc0:	10c7883a 	add	r3,r2,r3
    bdc4:	d8c01c15 	stw	r3,112(sp)
    bdc8:	d8c01917 	ldw	r3,100(sp)
    bdcc:	00800184 	movi	r2,6
    bdd0:	18805426 	beq	r3,r2,bf24 <__gxx_personality_sj0+0x214>
    bdd4:	d9002417 	ldw	r4,144(sp)
    bdd8:	00bfffc4 	movi	r2,-1
    bddc:	d8800915 	stw	r2,36(sp)
    bde0:	000e0040 	call	e004 <_Unwind_GetLanguageSpecificData>
    bde4:	d8801a15 	stw	r2,104(sp)
    bde8:	1000c926 	beq	r2,zero,c110 <__gxx_personality_sj0+0x400>
    bdec:	d9002417 	ldw	r4,144(sp)
    bdf0:	d80d883a 	mov	r6,sp
    bdf4:	100b883a 	mov	r5,r2
    bdf8:	000b8800 	call	b880 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bdfc:	d9402417 	ldw	r5,144(sp)
    be00:	d9000503 	ldbu	r4,20(sp)
    be04:	d8801515 	stw	r2,84(sp)
    be08:	000b7f40 	call	b7f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    be0c:	d9002417 	ldw	r4,144(sp)
    be10:	d9400604 	addi	r5,sp,24
    be14:	d8800215 	stw	r2,8(sp)
    be18:	000dfd40 	call	dfd4 <_Unwind_GetIPInfo>
    be1c:	d8c00617 	ldw	r3,24(sp)
    be20:	18006126 	beq	r3,zero,bfa8 <__gxx_personality_sj0+0x298>
    be24:	1000ba16 	blt	r2,zero,c110 <__gxx_personality_sj0+0x400>
    be28:	10002f1e 	bne	r2,zero,bee8 <__gxx_personality_sj0+0x1d8>
    be2c:	d8001515 	stw	zero,84(sp)
    be30:	d8001f15 	stw	zero,124(sp)
    be34:	d8001815 	stw	zero,96(sp)
    be38:	00c00044 	movi	r3,1
    be3c:	d9001917 	ldw	r4,100(sp)
    be40:	2080004c 	andi	r2,r4,1
    be44:	1000b51e 	bne	r2,zero,c11c <__gxx_personality_sj0+0x40c>
    be48:	d9001917 	ldw	r4,100(sp)
    be4c:	2080020c 	andi	r2,r4,8
    be50:	1000b71e 	bne	r2,zero,c130 <__gxx_personality_sj0+0x420>
    be54:	d9c01c17 	ldw	r7,112(sp)
    be58:	3800b826 	beq	r7,zero,c13c <__gxx_personality_sj0+0x42c>
    be5c:	00800044 	movi	r2,1
    be60:	1880b526 	beq	r3,r2,c138 <__gxx_personality_sj0+0x428>
    be64:	d9c01517 	ldw	r7,84(sp)
    be68:	3800f516 	blt	r7,zero,c240 <__gxx_personality_sj0+0x530>
    be6c:	d9002417 	ldw	r4,144(sp)
    be70:	d9802317 	ldw	r6,140(sp)
    be74:	00bfffc4 	movi	r2,-1
    be78:	000b883a 	mov	r5,zero
    be7c:	d8800915 	stw	r2,36(sp)
    be80:	000dfa80 	call	dfa8 <_Unwind_SetGR>
    be84:	d9801517 	ldw	r6,84(sp)
    be88:	d9002417 	ldw	r4,144(sp)
    be8c:	01400044 	movi	r5,1
    be90:	000dfa80 	call	dfa8 <_Unwind_SetGR>
    be94:	d9002417 	ldw	r4,144(sp)
    be98:	d9401f17 	ldw	r5,124(sp)
    be9c:	000dff40 	call	dff4 <_Unwind_SetIP>
    bea0:	010001c4 	movi	r4,7
    bea4:	d9001515 	stw	r4,84(sp)
    bea8:	003fb406 	br	bd7c <__alt_data_end+0xfc00bd7c>
    beac:	000f883a 	mov	r7,zero
    beb0:	000d883a 	mov	r6,zero
    beb4:	19000003 	ldbu	r4,0(r3)
    beb8:	18c00044 	addi	r3,r3,1
    bebc:	d8c01515 	stw	r3,84(sp)
    bec0:	21401fcc 	andi	r5,r4,127
    bec4:	298a983a 	sll	r5,r5,r6
    bec8:	21003fcc 	andi	r4,r4,255
    becc:	2100201c 	xori	r4,r4,128
    bed0:	213fe004 	addi	r4,r4,-128
    bed4:	394eb03a 	or	r7,r7,r5
    bed8:	318001c4 	addi	r6,r6,7
    bedc:	203ff516 	blt	r4,zero,beb4 <__alt_data_end+0xfc00beb4>
    bee0:	10bfffc4 	addi	r2,r2,-1
    bee4:	10003226 	beq	r2,zero,bfb0 <__gxx_personality_sj0+0x2a0>
    bee8:	d9c01517 	ldw	r7,84(sp)
    beec:	0011883a 	mov	r8,zero
    bef0:	000d883a 	mov	r6,zero
    bef4:	39000003 	ldbu	r4,0(r7)
    bef8:	38c00044 	addi	r3,r7,1
    befc:	180f883a 	mov	r7,r3
    bf00:	21401fcc 	andi	r5,r4,127
    bf04:	298a983a 	sll	r5,r5,r6
    bf08:	21003fcc 	andi	r4,r4,255
    bf0c:	2100201c 	xori	r4,r4,128
    bf10:	213fe004 	addi	r4,r4,-128
    bf14:	4150b03a 	or	r8,r8,r5
    bf18:	318001c4 	addi	r6,r6,7
    bf1c:	203ff516 	blt	r4,zero,bef4 <__alt_data_end+0xfc00bef4>
    bf20:	003fe206 	br	beac <__alt_data_end+0xfc00beac>
    bf24:	d9001c17 	ldw	r4,112(sp)
    bf28:	203faa1e 	bne	r4,zero,bdd4 <__alt_data_end+0xfc00bdd4>
    bf2c:	d9c01517 	ldw	r7,84(sp)
    bf30:	d8801b17 	ldw	r2,108(sp)
    bf34:	38bfa736 	bltu	r7,r2,bdd4 <__alt_data_end+0xfc00bdd4>
    bf38:	d8c02317 	ldw	r3,140(sp)
    bf3c:	18fffe17 	ldw	r3,-8(r3)
    bf40:	d8c01f15 	stw	r3,124(sp)
    bf44:	18008226 	beq	r3,zero,c150 <__gxx_personality_sj0+0x440>
    bf48:	d9002317 	ldw	r4,140(sp)
    bf4c:	d9c02317 	ldw	r7,140(sp)
    bf50:	213ffb17 	ldw	r4,-20(r4)
    bf54:	39fffd17 	ldw	r7,-12(r7)
    bf58:	d9001515 	stw	r4,84(sp)
    bf5c:	d9c01a15 	stw	r7,104(sp)
    bf60:	d8801517 	ldw	r2,84(sp)
    bf64:	103fc10e 	bge	r2,zero,be6c <__alt_data_end+0xfc00be6c>
    bf68:	d9002417 	ldw	r4,144(sp)
    bf6c:	d9401a17 	ldw	r5,104(sp)
    bf70:	d80d883a 	mov	r6,sp
    bf74:	00bfffc4 	movi	r2,-1
    bf78:	d8800915 	stw	r2,36(sp)
    bf7c:	000b8800 	call	b880 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    bf80:	d9402417 	ldw	r5,144(sp)
    bf84:	d9000503 	ldbu	r4,20(sp)
    bf88:	000b7f40 	call	b7f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bf8c:	d9000503 	ldbu	r4,20(sp)
    bf90:	d9402417 	ldw	r5,144(sp)
    bf94:	d8800215 	stw	r2,8(sp)
    bf98:	000b7f40 	call	b7f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    bf9c:	d8c02317 	ldw	r3,140(sp)
    bfa0:	18bffe15 	stw	r2,-8(r3)
    bfa4:	003fb106 	br	be6c <__alt_data_end+0xfc00be6c>
    bfa8:	10bfffc4 	addi	r2,r2,-1
    bfac:	003f9d06 	br	be24 <__alt_data_end+0xfc00be24>
    bfb0:	42000044 	addi	r8,r8,1
    bfb4:	da001f15 	stw	r8,124(sp)
    bfb8:	38005326 	beq	r7,zero,c108 <__gxx_personality_sj0+0x3f8>
    bfbc:	d8800417 	ldw	r2,16(sp)
    bfc0:	39ffffc4 	addi	r7,r7,-1
    bfc4:	11c5883a 	add	r2,r2,r7
    bfc8:	d8801815 	stw	r2,96(sp)
    bfcc:	40005026 	beq	r8,zero,c110 <__gxx_personality_sj0+0x400>
    bfd0:	10007426 	beq	r2,zero,c1a4 <__gxx_personality_sj0+0x494>
    bfd4:	d8801917 	ldw	r2,100(sp)
    bfd8:	1080020c 	andi	r2,r2,8
    bfdc:	d8802015 	stw	r2,128(sp)
    bfe0:	1000a21e 	bne	r2,zero,c26c <__gxx_personality_sj0+0x55c>
    bfe4:	d8c01c17 	ldw	r3,112(sp)
    bfe8:	1800b026 	beq	r3,zero,c2ac <__gxx_personality_sj0+0x59c>
    bfec:	01c000f4 	movhi	r7,3
    bff0:	39f74804 	addi	r7,r7,-8928
    bff4:	d9c01e15 	stw	r7,120(sp)
    bff8:	d8001d05 	stb	zero,116(sp)
    bffc:	d8c01817 	ldw	r3,96(sp)
    c000:	d8001515 	stw	zero,84(sp)
    c004:	0009883a 	mov	r4,zero
    c008:	19400003 	ldbu	r5,0(r3)
    c00c:	18800044 	addi	r2,r3,1
    c010:	d9c01517 	ldw	r7,84(sp)
    c014:	28c01fcc 	andi	r3,r5,127
    c018:	1906983a 	sll	r3,r3,r4
    c01c:	29803fcc 	andi	r6,r5,255
    c020:	3180201c 	xori	r6,r6,128
    c024:	38ceb03a 	or	r7,r7,r3
    c028:	d8801715 	stw	r2,92(sp)
    c02c:	31bfe004 	addi	r6,r6,-128
    c030:	d9c01515 	stw	r7,84(sp)
    c034:	210001c4 	addi	r4,r4,7
    c038:	1007883a 	mov	r3,r2
    c03c:	303ff216 	blt	r6,zero,c008 <__alt_data_end+0xfc00c008>
    c040:	00c007c4 	movi	r3,31
    c044:	19000836 	bltu	r3,r4,c068 <__gxx_personality_sj0+0x358>
    c048:	2940100c 	andi	r5,r5,64
    c04c:	28000626 	beq	r5,zero,c068 <__gxx_personality_sj0+0x358>
    c050:	01c00044 	movi	r7,1
    c054:	3908983a 	sll	r4,r7,r4
    c058:	d8c01517 	ldw	r3,84(sp)
    c05c:	0109c83a 	sub	r4,zero,r4
    c060:	1906b03a 	or	r3,r3,r4
    c064:	d8c01515 	stw	r3,84(sp)
    c068:	d8001615 	stw	zero,88(sp)
    c06c:	0009883a 	mov	r4,zero
    c070:	11400003 	ldbu	r5,0(r2)
    c074:	d9c01617 	ldw	r7,88(sp)
    c078:	10800044 	addi	r2,r2,1
    c07c:	28c01fcc 	andi	r3,r5,127
    c080:	1906983a 	sll	r3,r3,r4
    c084:	29803fcc 	andi	r6,r5,255
    c088:	3180201c 	xori	r6,r6,128
    c08c:	38ceb03a 	or	r7,r7,r3
    c090:	31bfe004 	addi	r6,r6,-128
    c094:	d9c01615 	stw	r7,88(sp)
    c098:	210001c4 	addi	r4,r4,7
    c09c:	303ff416 	blt	r6,zero,c070 <__alt_data_end+0xfc00c070>
    c0a0:	008007c4 	movi	r2,31
    c0a4:	11000736 	bltu	r2,r4,c0c4 <__gxx_personality_sj0+0x3b4>
    c0a8:	2940100c 	andi	r5,r5,64
    c0ac:	28000526 	beq	r5,zero,c0c4 <__gxx_personality_sj0+0x3b4>
    c0b0:	00c00044 	movi	r3,1
    c0b4:	1908983a 	sll	r4,r3,r4
    c0b8:	0109c83a 	sub	r4,zero,r4
    c0bc:	390eb03a 	or	r7,r7,r4
    c0c0:	d9c01615 	stw	r7,88(sp)
    c0c4:	d9001517 	ldw	r4,84(sp)
    c0c8:	20003c26 	beq	r4,zero,c1bc <__gxx_personality_sj0+0x4ac>
    c0cc:	01003e0e 	bge	zero,r4,c1c8 <__gxx_personality_sj0+0x4b8>
    c0d0:	01ffffc4 	movi	r7,-1
    c0d4:	200b883a 	mov	r5,r4
    c0d8:	d809883a 	mov	r4,sp
    c0dc:	d9c00915 	stw	r7,36(sp)
    c0e0:	000b7a00 	call	b7a0 <_ZL15get_ttype_entryP16lsda_header_infom>
    c0e4:	10005f26 	beq	r2,zero,c264 <__gxx_personality_sj0+0x554>
    c0e8:	d8c01e17 	ldw	r3,120(sp)
    c0ec:	1800571e 	bne	r3,zero,c24c <__gxx_personality_sj0+0x53c>
    c0f0:	d9001617 	ldw	r4,88(sp)
    c0f4:	20002926 	beq	r4,zero,c19c <__gxx_personality_sj0+0x48c>
    c0f8:	d9c01717 	ldw	r7,92(sp)
    c0fc:	390f883a 	add	r7,r7,r4
    c100:	d9c01815 	stw	r7,96(sp)
    c104:	003fbd06 	br	bffc <__alt_data_end+0xfc00bffc>
    c108:	d8c01f17 	ldw	r3,124(sp)
    c10c:	1800251e 	bne	r3,zero,c1a4 <__gxx_personality_sj0+0x494>
    c110:	01000204 	movi	r4,8
    c114:	d9001515 	stw	r4,84(sp)
    c118:	003f1806 	br	bd7c <__alt_data_end+0xfc00bd7c>
    c11c:	d8801c17 	ldw	r2,112(sp)
    c120:	10000d26 	beq	r2,zero,c158 <__gxx_personality_sj0+0x448>
    c124:	00800184 	movi	r2,6
    c128:	d8801515 	stw	r2,84(sp)
    c12c:	003f1306 	br	bd7c <__alt_data_end+0xfc00bd7c>
    c130:	00800044 	movi	r2,1
    c134:	18bf4d1e 	bne	r3,r2,be6c <__alt_data_end+0xfc00be6c>
    c138:	000b4680 	call	b468 <_ZSt9terminatev>
    c13c:	d9001b17 	ldw	r4,108(sp)
    c140:	00800044 	movi	r2,1
    c144:	113f4536 	bltu	r2,r4,be5c <__alt_data_end+0xfc00be5c>
    c148:	00800044 	movi	r2,1
    c14c:	18bf841e 	bne	r3,r2,bf60 <__alt_data_end+0xfc00bf60>
    c150:	d9002317 	ldw	r4,140(sp)
    c154:	000caec0 	call	caec <__cxa_call_terminate>
    c158:	d8c01b17 	ldw	r3,108(sp)
    c15c:	00800044 	movi	r2,1
    c160:	10fff036 	bltu	r2,r3,c124 <__alt_data_end+0xfc00c124>
    c164:	d9002317 	ldw	r4,140(sp)
    c168:	d8801817 	ldw	r2,96(sp)
    c16c:	d9c01517 	ldw	r7,84(sp)
    c170:	d8c01a17 	ldw	r3,104(sp)
    c174:	20bffc15 	stw	r2,-16(r4)
    c178:	d8800717 	ldw	r2,28(sp)
    c17c:	21fffb15 	stw	r7,-20(r4)
    c180:	d9c01f17 	ldw	r7,124(sp)
    c184:	20bfff15 	stw	r2,-4(r4)
    c188:	00800184 	movi	r2,6
    c18c:	20fffd15 	stw	r3,-12(r4)
    c190:	21fffe15 	stw	r7,-8(r4)
    c194:	d8801515 	stw	r2,84(sp)
    c198:	003ef806 	br	bd7c <__alt_data_end+0xfc00bd7c>
    c19c:	d8801d03 	ldbu	r2,116(sp)
    c1a0:	103fdb26 	beq	r2,zero,c110 <__alt_data_end+0xfc00c110>
    c1a4:	d8c01917 	ldw	r3,100(sp)
    c1a8:	1880004c 	andi	r2,r3,1
    c1ac:	103fd81e 	bne	r2,zero,c110 <__alt_data_end+0xfc00c110>
    c1b0:	d8001515 	stw	zero,84(sp)
    c1b4:	00c00084 	movi	r3,2
    c1b8:	003f2306 	br	be48 <__alt_data_end+0xfc00be48>
    c1bc:	00c00044 	movi	r3,1
    c1c0:	d8c01d05 	stb	r3,116(sp)
    c1c4:	003fca06 	br	c0f0 <__alt_data_end+0xfc00c0f0>
    c1c8:	d9001e17 	ldw	r4,120(sp)
    c1cc:	20000426 	beq	r4,zero,c1e0 <__gxx_personality_sj0+0x4d0>
    c1d0:	d9c02017 	ldw	r7,128(sp)
    c1d4:	3800021e 	bne	r7,zero,c1e0 <__gxx_personality_sj0+0x4d0>
    c1d8:	d8801c17 	ldw	r2,112(sp)
    c1dc:	10002726 	beq	r2,zero,c27c <__gxx_personality_sj0+0x56c>
    c1e0:	d8801517 	ldw	r2,84(sp)
    c1e4:	000d883a 	mov	r6,zero
    c1e8:	000b883a 	mov	r5,zero
    c1ec:	0088303a 	nor	r4,zero,r2
    c1f0:	d8800317 	ldw	r2,12(sp)
    c1f4:	1109883a 	add	r4,r2,r4
    c1f8:	20800003 	ldbu	r2,0(r4)
    c1fc:	21000044 	addi	r4,r4,1
    c200:	10c01fcc 	andi	r3,r2,127
    c204:	1946983a 	sll	r3,r3,r5
    c208:	10803fcc 	andi	r2,r2,255
    c20c:	1080201c 	xori	r2,r2,128
    c210:	10bfe004 	addi	r2,r2,-128
    c214:	30ccb03a 	or	r6,r6,r3
    c218:	294001c4 	addi	r5,r5,7
    c21c:	103ff616 	blt	r2,zero,c1f8 <__alt_data_end+0xfc00c1f8>
    c220:	3005003a 	cmpeq	r2,r6,zero
    c224:	10803fcc 	andi	r2,r2,255
    c228:	103fb126 	beq	r2,zero,c0f0 <__alt_data_end+0xfc00c0f0>
    c22c:	d9c01917 	ldw	r7,100(sp)
    c230:	3880004c 	andi	r2,r7,1
    c234:	103fb91e 	bne	r2,zero,c11c <__alt_data_end+0xfc00c11c>
    c238:	d8802017 	ldw	r2,128(sp)
    c23c:	10002d26 	beq	r2,zero,c2f4 <__gxx_personality_sj0+0x5e4>
    c240:	00800044 	movi	r2,1
    c244:	d8800915 	stw	r2,36(sp)
    c248:	000b4900 	call	b490 <_ZSt10unexpectedv>
    c24c:	d9800704 	addi	r6,sp,28
    c250:	180b883a 	mov	r5,r3
    c254:	1009883a 	mov	r4,r2
    c258:	000b9b40 	call	b9b4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    c25c:	10803fcc 	andi	r2,r2,255
    c260:	103fa326 	beq	r2,zero,c0f0 <__alt_data_end+0xfc00c0f0>
    c264:	00c000c4 	movi	r3,3
    c268:	003ef406 	br	be3c <__alt_data_end+0xfc00be3c>
    c26c:	010000f4 	movhi	r4,3
    c270:	21374604 	addi	r4,r4,-8936
    c274:	d9001e15 	stw	r4,120(sp)
    c278:	003f5f06 	br	bff8 <__alt_data_end+0xfc00bff8>
    c27c:	d9001b17 	ldw	r4,108(sp)
    c280:	00c00044 	movi	r3,1
    c284:	193fd636 	bltu	r3,r4,c1e0 <__alt_data_end+0xfc00c1e0>
    c288:	01ffffc4 	movi	r7,-1
    c28c:	d9c00915 	stw	r7,36(sp)
    c290:	d9800717 	ldw	r6,28(sp)
    c294:	d9c01517 	ldw	r7,84(sp)
    c298:	d9401e17 	ldw	r5,120(sp)
    c29c:	d809883a 	mov	r4,sp
    c2a0:	000bc680 	call	bc68 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c2a4:	1080005c 	xori	r2,r2,1
    c2a8:	003fde06 	br	c224 <__alt_data_end+0xfc00c224>
    c2ac:	d9001b17 	ldw	r4,108(sp)
    c2b0:	00800044 	movi	r2,1
    c2b4:	113f4d36 	bltu	r2,r4,bfec <__alt_data_end+0xfc00bfec>
    c2b8:	d9c02317 	ldw	r7,140(sp)
    c2bc:	38800017 	ldw	r2,0(r7)
    c2c0:	1080004c 	andi	r2,r2,1
    c2c4:	1000061e 	bne	r2,zero,c2e0 <__gxx_personality_sj0+0x5d0>
    c2c8:	d8c02317 	ldw	r3,140(sp)
    c2cc:	18800504 	addi	r2,r3,20
    c2d0:	d8800715 	stw	r2,28(sp)
    c2d4:	10bff017 	ldw	r2,-64(r2)
    c2d8:	d8801e15 	stw	r2,120(sp)
    c2dc:	003f4606 	br	bff8 <__alt_data_end+0xfc00bff8>
    c2e0:	38bff517 	ldw	r2,-44(r7)
    c2e4:	003ffa06 	br	c2d0 <__alt_data_end+0xfc00c2d0>
    c2e8:	d9000a17 	ldw	r4,40(sp)
    c2ec:	000c6a00 	call	c6a0 <__cxa_begin_catch>
    c2f0:	003f9106 	br	c138 <__alt_data_end+0xfc00c138>
    c2f4:	d9c01c17 	ldw	r7,112(sp)
    c2f8:	383eda1e 	bne	r7,zero,be64 <__alt_data_end+0xfc00be64>
    c2fc:	d8c01b17 	ldw	r3,108(sp)
    c300:	00800044 	movi	r2,1
    c304:	10fed736 	bltu	r2,r3,be64 <__alt_data_end+0xfc00be64>
    c308:	00c000c4 	movi	r3,3
    c30c:	003f8e06 	br	c148 <__alt_data_end+0xfc00c148>

0000c310 <__cxa_call_unexpected>:
    c310:	00800074 	movhi	r2,1
    c314:	deffe604 	addi	sp,sp,-104
    c318:	10af4404 	addi	r2,r2,-17136
    c31c:	d8800d15 	stw	r2,52(sp)
    c320:	008000b4 	movhi	r2,2
    c324:	108e7d04 	addi	r2,r2,14836
    c328:	d8800e15 	stw	r2,56(sp)
    c32c:	d8800104 	addi	r2,sp,4
    c330:	d8800f15 	stw	r2,60(sp)
    c334:	00800074 	movhi	r2,1
    c338:	10b0e704 	addi	r2,r2,-15460
    c33c:	d9001415 	stw	r4,80(sp)
    c340:	d9000704 	addi	r4,sp,28
    c344:	dfc01915 	stw	ra,100(sp)
    c348:	d8801015 	stw	r2,64(sp)
    c34c:	df001815 	stw	fp,96(sp)
    c350:	dec01115 	stw	sp,68(sp)
    c354:	000df480 	call	df48 <_Unwind_SjLj_Register>
    c358:	d9001417 	ldw	r4,80(sp)
    c35c:	000c6a00 	call	c6a0 <__cxa_begin_catch>
    c360:	d8c01417 	ldw	r3,80(sp)
    c364:	18bffe17 	ldw	r2,-8(r3)
    c368:	193ff717 	ldw	r4,-36(r3)
    c36c:	18fffd17 	ldw	r3,-12(r3)
    c370:	d8800315 	stw	r2,12(sp)
    c374:	d8c01615 	stw	r3,88(sp)
    c378:	d8c01417 	ldw	r3,80(sp)
    c37c:	18fffb17 	ldw	r3,-20(r3)
    c380:	d8c01515 	stw	r3,84(sp)
    c384:	d8c01417 	ldw	r3,80(sp)
    c388:	18fff817 	ldw	r3,-32(r3)
    c38c:	d8c01415 	stw	r3,80(sp)
    c390:	00c00044 	movi	r3,1
    c394:	d8c00815 	stw	r3,32(sp)
    c398:	000b4800 	call	b480 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    c39c:	d8c00917 	ldw	r3,36(sp)
    c3a0:	d8800817 	ldw	r2,32(sp)
    c3a4:	d8c01715 	stw	r3,92(sp)
    c3a8:	10000a26 	beq	r2,zero,c3d4 <__cxa_call_unexpected+0xc4>
    c3ac:	10bfffc4 	addi	r2,r2,-1
    c3b0:	10000126 	beq	r2,zero,c3b8 <__cxa_call_unexpected+0xa8>
    c3b4:	003b68fa 	trap	3
    c3b8:	d8000815 	stw	zero,32(sp)
    c3bc:	000c7540 	call	c754 <__cxa_end_catch>
    c3c0:	000c7540 	call	c754 <__cxa_end_catch>
    c3c4:	d9001717 	ldw	r4,92(sp)
    c3c8:	00bfffc4 	movi	r2,-1
    c3cc:	d8800815 	stw	r2,32(sp)
    c3d0:	000e1440 	call	e144 <_Unwind_SjLj_Resume>
    c3d4:	d9001717 	ldw	r4,92(sp)
    c3d8:	000c6a00 	call	c6a0 <__cxa_begin_catch>
    c3dc:	000cb440 	call	cb44 <__cxa_get_globals_fast>
    c3e0:	10800017 	ldw	r2,0(r2)
    c3e4:	10c00b17 	ldw	r3,44(r2)
    c3e8:	18c0004c 	andi	r3,r3,1
    c3ec:	18001e26 	beq	r3,zero,c468 <__cxa_call_unexpected+0x158>
    c3f0:	10800017 	ldw	r2,0(r2)
    c3f4:	d8801715 	stw	r2,92(sp)
    c3f8:	d8801517 	ldw	r2,84(sp)
    c3fc:	00802b0e 	bge	zero,r2,c4ac <__cxa_call_unexpected+0x19c>
    c400:	d8c01717 	ldw	r3,92(sp)
    c404:	d8800317 	ldw	r2,12(sp)
    c408:	d9c01517 	ldw	r7,84(sp)
    c40c:	193ff017 	ldw	r4,-64(r3)
    c410:	d9801617 	ldw	r6,88(sp)
    c414:	d8800015 	stw	r2,0(sp)
    c418:	180b883a 	mov	r5,r3
    c41c:	00800084 	movi	r2,2
    c420:	d8800815 	stw	r2,32(sp)
    c424:	000ba3c0 	call	ba3c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c428:	10803fcc 	andi	r2,r2,255
    c42c:	10001e1e 	bne	r2,zero,c4a8 <__cxa_call_unexpected+0x198>
    c430:	d8800317 	ldw	r2,12(sp)
    c434:	d9c01517 	ldw	r7,84(sp)
    c438:	d9801617 	ldw	r6,88(sp)
    c43c:	010000f4 	movhi	r4,3
    c440:	d8800015 	stw	r2,0(sp)
    c444:	2129de04 	addi	r4,r4,-22664
    c448:	00800084 	movi	r2,2
    c44c:	000b883a 	mov	r5,zero
    c450:	d8800815 	stw	r2,32(sp)
    c454:	000ba3c0 	call	ba3c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    c458:	10803fcc 	andi	r2,r2,255
    c45c:	1000051e 	bne	r2,zero,c474 <__cxa_call_unexpected+0x164>
    c460:	d9001417 	ldw	r4,80(sp)
    c464:	000b3a80 	call	b3a8 <_ZN10__cxxabiv111__terminateEPFvvE>
    c468:	10801004 	addi	r2,r2,64
    c46c:	d8801715 	stw	r2,92(sp)
    c470:	003fe106 	br	c3f8 <__alt_data_end+0xfc00c3f8>
    c474:	01000104 	movi	r4,4
    c478:	000c9880 	call	c988 <__cxa_allocate_exception>
    c47c:	00c000f4 	movhi	r3,3
    c480:	18e9f904 	addi	r3,r3,-22556
    c484:	01800074 	movhi	r6,1
    c488:	014000f4 	movhi	r5,3
    c48c:	10c00015 	stw	r3,0(r2)
    c490:	31b2d804 	addi	r6,r6,-13472
    c494:	00c00084 	movi	r3,2
    c498:	2969de04 	addi	r5,r5,-22664
    c49c:	1009883a 	mov	r4,r2
    c4a0:	d8c00815 	stw	r3,32(sp)
    c4a4:	000c5840 	call	c584 <__cxa_throw>
    c4a8:	000c6140 	call	c614 <__cxa_rethrow>
    c4ac:	d9401617 	ldw	r5,88(sp)
    c4b0:	00800084 	movi	r2,2
    c4b4:	d9800104 	addi	r6,sp,4
    c4b8:	0009883a 	mov	r4,zero
    c4bc:	d8800815 	stw	r2,32(sp)
    c4c0:	000b8800 	call	b880 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    c4c4:	d9801717 	ldw	r6,92(sp)
    c4c8:	d9c01517 	ldw	r7,84(sp)
    c4cc:	d9000104 	addi	r4,sp,4
    c4d0:	317ff017 	ldw	r5,-64(r6)
    c4d4:	000bc680 	call	bc68 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c4d8:	10803fcc 	andi	r2,r2,255
    c4dc:	1000171e 	bne	r2,zero,c53c <__cxa_call_unexpected+0x22c>
    c4e0:	d9c01517 	ldw	r7,84(sp)
    c4e4:	014000f4 	movhi	r5,3
    c4e8:	00800084 	movi	r2,2
    c4ec:	2969de04 	addi	r5,r5,-22664
    c4f0:	000d883a 	mov	r6,zero
    c4f4:	d9000104 	addi	r4,sp,4
    c4f8:	d8800815 	stw	r2,32(sp)
    c4fc:	000bc680 	call	bc68 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    c500:	10803fcc 	andi	r2,r2,255
    c504:	103fd626 	beq	r2,zero,c460 <__alt_data_end+0xfc00c460>
    c508:	01000104 	movi	r4,4
    c50c:	000c9880 	call	c988 <__cxa_allocate_exception>
    c510:	00c000f4 	movhi	r3,3
    c514:	18e9f904 	addi	r3,r3,-22556
    c518:	01800074 	movhi	r6,1
    c51c:	014000f4 	movhi	r5,3
    c520:	10c00015 	stw	r3,0(r2)
    c524:	31b2d804 	addi	r6,r6,-13472
    c528:	00c00084 	movi	r3,2
    c52c:	2969de04 	addi	r5,r5,-22664
    c530:	1009883a 	mov	r4,r2
    c534:	d8c00815 	stw	r3,32(sp)
    c538:	000c5840 	call	c584 <__cxa_throw>
    c53c:	000c6140 	call	c614 <__cxa_rethrow>

0000c540 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    c540:	defffe04 	addi	sp,sp,-8
    c544:	dfc00115 	stw	ra,4(sp)
    c548:	dc000015 	stw	r16,0(sp)
    c54c:	00800044 	movi	r2,1
    c550:	11000a36 	bltu	r2,r4,c57c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    c554:	28bff617 	ldw	r2,-40(r5)
    c558:	2c000504 	addi	r16,r5,20
    c55c:	10000226 	beq	r2,zero,c568 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    c560:	8009883a 	mov	r4,r16
    c564:	103ee83a 	callr	r2
    c568:	8009883a 	mov	r4,r16
    c56c:	dfc00117 	ldw	ra,4(sp)
    c570:	dc000017 	ldw	r16,0(sp)
    c574:	dec00204 	addi	sp,sp,8
    c578:	000c9e81 	jmpi	c9e8 <__cxa_free_exception>
    c57c:	293ff817 	ldw	r4,-32(r5)
    c580:	000b3a80 	call	b3a8 <_ZN10__cxxabiv111__terminateEPFvvE>

0000c584 <__cxa_throw>:
    c584:	defffb04 	addi	sp,sp,-20
    c588:	dfc00415 	stw	ra,16(sp)
    c58c:	dcc00315 	stw	r19,12(sp)
    c590:	dc800215 	stw	r18,8(sp)
    c594:	2827883a 	mov	r19,r5
    c598:	3025883a 	mov	r18,r6
    c59c:	dc400115 	stw	r17,4(sp)
    c5a0:	dc000015 	stw	r16,0(sp)
    c5a4:	2021883a 	mov	r16,r4
    c5a8:	000cb500 	call	cb50 <__cxa_get_globals>
    c5ac:	10c00117 	ldw	r3,4(r2)
    c5b0:	847ffb04 	addi	r17,r16,-20
    c5b4:	18c00044 	addi	r3,r3,1
    c5b8:	10c00115 	stw	r3,4(r2)
    c5bc:	00800044 	movi	r2,1
    c5c0:	80bfef15 	stw	r2,-68(r16)
    c5c4:	84fff015 	stw	r19,-64(r16)
    c5c8:	84bff115 	stw	r18,-60(r16)
    c5cc:	000b4e00 	call	b4e0 <_ZSt14get_unexpectedv>
    c5d0:	80bff215 	stw	r2,-56(r16)
    c5d4:	000b4bc0 	call	b4bc <_ZSt13get_terminatev>
    c5d8:	80bff315 	stw	r2,-52(r16)
    c5dc:	0090caf4 	movhi	r2,17195
    c5e0:	108ac004 	addi	r2,r2,11008
    c5e4:	80bffb15 	stw	r2,-20(r16)
    c5e8:	0091d3b4 	movhi	r2,18254
    c5ec:	109550c4 	addi	r2,r2,21827
    c5f0:	80bffc15 	stw	r2,-16(r16)
    c5f4:	00800074 	movhi	r2,1
    c5f8:	10b15004 	addi	r2,r2,-15040
    c5fc:	8809883a 	mov	r4,r17
    c600:	80bffd15 	stw	r2,-12(r16)
    c604:	000e0300 	call	e030 <_Unwind_SjLj_RaiseException>
    c608:	8809883a 	mov	r4,r17
    c60c:	000c6a00 	call	c6a0 <__cxa_begin_catch>
    c610:	000b4680 	call	b468 <_ZSt9terminatev>

0000c614 <__cxa_rethrow>:
    c614:	defffe04 	addi	sp,sp,-8
    c618:	dfc00115 	stw	ra,4(sp)
    c61c:	dc000015 	stw	r16,0(sp)
    c620:	000cb500 	call	cb50 <__cxa_get_globals>
    c624:	10c00117 	ldw	r3,4(r2)
    c628:	11000017 	ldw	r4,0(r2)
    c62c:	18c00044 	addi	r3,r3,1
    c630:	10c00115 	stw	r3,4(r2)
    c634:	20001126 	beq	r4,zero,c67c <__cxa_rethrow+0x68>
    c638:	21400b17 	ldw	r5,44(r4)
    c63c:	01ef3574 	movhi	r7,48341
    c640:	39f54004 	addi	r7,r7,-11008
    c644:	29cf883a 	add	r7,r5,r7
    c648:	20c00c17 	ldw	r3,48(r4)
    c64c:	394d803a 	cmpltu	r6,r7,r5
    c650:	016e2cb4 	movhi	r5,47282
    c654:	296aaf04 	addi	r5,r5,-21828
    c658:	1947883a 	add	r3,r3,r5
    c65c:	30c7883a 	add	r3,r6,r3
    c660:	18000726 	beq	r3,zero,c680 <__cxa_rethrow+0x6c>
    c664:	10000015 	stw	zero,0(r2)
    c668:	24000b04 	addi	r16,r4,44
    c66c:	8009883a 	mov	r4,r16
    c670:	000e1880 	call	e188 <_Unwind_SjLj_Resume_or_Rethrow>
    c674:	8009883a 	mov	r4,r16
    c678:	000c6a00 	call	c6a0 <__cxa_begin_catch>
    c67c:	000b4680 	call	b468 <_ZSt9terminatev>
    c680:	00c00044 	movi	r3,1
    c684:	19fff736 	bltu	r3,r7,c664 <__alt_data_end+0xfc00c664>
    c688:	20800517 	ldw	r2,20(r4)
    c68c:	0085c83a 	sub	r2,zero,r2
    c690:	20800515 	stw	r2,20(r4)
    c694:	003ff406 	br	c668 <__alt_data_end+0xfc00c668>

0000c698 <__cxa_get_exception_ptr>:
    c698:	20bfff17 	ldw	r2,-4(r4)
    c69c:	f800283a 	ret

0000c6a0 <__cxa_begin_catch>:
    c6a0:	defffe04 	addi	sp,sp,-8
    c6a4:	dc000015 	stw	r16,0(sp)
    c6a8:	dfc00115 	stw	ra,4(sp)
    c6ac:	2021883a 	mov	r16,r4
    c6b0:	000cb500 	call	cb50 <__cxa_get_globals>
    c6b4:	81000017 	ldw	r4,0(r16)
    c6b8:	80c00117 	ldw	r3,4(r16)
    c6bc:	01af3574 	movhi	r6,48341
    c6c0:	31b54004 	addi	r6,r6,-11008
    c6c4:	016e2cb4 	movhi	r5,47282
    c6c8:	296aaf04 	addi	r5,r5,-21828
    c6cc:	218d883a 	add	r6,r4,r6
    c6d0:	3109803a 	cmpltu	r4,r6,r4
    c6d4:	1947883a 	add	r3,r3,r5
    c6d8:	20c7883a 	add	r3,r4,r3
    c6dc:	817ff504 	addi	r5,r16,-44
    c6e0:	11000017 	ldw	r4,0(r2)
    c6e4:	18000726 	beq	r3,zero,c704 <__cxa_begin_catch+0x64>
    c6e8:	2000191e 	bne	r4,zero,c750 <__cxa_begin_catch+0xb0>
    c6ec:	11400015 	stw	r5,0(r2)
    c6f0:	0005883a 	mov	r2,zero
    c6f4:	dfc00117 	ldw	ra,4(sp)
    c6f8:	dc000017 	ldw	r16,0(sp)
    c6fc:	dec00204 	addi	sp,sp,8
    c700:	f800283a 	ret
    c704:	01c00044 	movi	r7,1
    c708:	39bff736 	bltu	r7,r6,c6e8 <__alt_data_end+0xfc00c6e8>
    c70c:	80fffa17 	ldw	r3,-24(r16)
    c710:	18000d16 	blt	r3,zero,c748 <__cxa_begin_catch+0xa8>
    c714:	18c00044 	addi	r3,r3,1
    c718:	11800117 	ldw	r6,4(r2)
    c71c:	80fffa15 	stw	r3,-24(r16)
    c720:	30ffffc4 	addi	r3,r6,-1
    c724:	10c00115 	stw	r3,4(r2)
    c728:	21400226 	beq	r4,r5,c734 <__cxa_begin_catch+0x94>
    c72c:	813ff915 	stw	r4,-28(r16)
    c730:	11400015 	stw	r5,0(r2)
    c734:	80bfff17 	ldw	r2,-4(r16)
    c738:	dfc00117 	ldw	ra,4(sp)
    c73c:	dc000017 	ldw	r16,0(sp)
    c740:	dec00204 	addi	sp,sp,8
    c744:	f800283a 	ret
    c748:	38c7c83a 	sub	r3,r7,r3
    c74c:	003ff206 	br	c718 <__alt_data_end+0xfc00c718>
    c750:	000b4680 	call	b468 <_ZSt9terminatev>

0000c754 <__cxa_end_catch>:
    c754:	deffff04 	addi	sp,sp,-4
    c758:	dfc00015 	stw	ra,0(sp)
    c75c:	000cb440 	call	cb44 <__cxa_get_globals_fast>
    c760:	11000017 	ldw	r4,0(r2)
    c764:	20001426 	beq	r4,zero,c7b8 <__cxa_end_catch+0x64>
    c768:	21400b17 	ldw	r5,44(r4)
    c76c:	01ef3574 	movhi	r7,48341
    c770:	39f54004 	addi	r7,r7,-11008
    c774:	29cf883a 	add	r7,r5,r7
    c778:	20c00c17 	ldw	r3,48(r4)
    c77c:	394d803a 	cmpltu	r6,r7,r5
    c780:	016e2cb4 	movhi	r5,47282
    c784:	296aaf04 	addi	r5,r5,-21828
    c788:	1947883a 	add	r3,r3,r5
    c78c:	30c7883a 	add	r3,r6,r3
    c790:	18000c1e 	bne	r3,zero,c7c4 <__cxa_end_catch+0x70>
    c794:	00c00044 	movi	r3,1
    c798:	19c00a36 	bltu	r3,r7,c7c4 <__cxa_end_catch+0x70>
    c79c:	20c00517 	ldw	r3,20(r4)
    c7a0:	18000d16 	blt	r3,zero,c7d8 <__cxa_end_catch+0x84>
    c7a4:	18ffffc4 	addi	r3,r3,-1
    c7a8:	18001026 	beq	r3,zero,c7ec <__cxa_end_catch+0x98>
    c7ac:	00bfffc4 	movi	r2,-1
    c7b0:	18801426 	beq	r3,r2,c804 <__cxa_end_catch+0xb0>
    c7b4:	20c00515 	stw	r3,20(r4)
    c7b8:	dfc00017 	ldw	ra,0(sp)
    c7bc:	dec00104 	addi	sp,sp,4
    c7c0:	f800283a 	ret
    c7c4:	21000b04 	addi	r4,r4,44
    c7c8:	10000015 	stw	zero,0(r2)
    c7cc:	dfc00017 	ldw	ra,0(sp)
    c7d0:	dec00104 	addi	sp,sp,4
    c7d4:	000e1d41 	jmpi	e1d4 <_Unwind_DeleteException>
    c7d8:	18c00044 	addi	r3,r3,1
    c7dc:	183ff51e 	bne	r3,zero,c7b4 <__alt_data_end+0xfc00c7b4>
    c7e0:	21400417 	ldw	r5,16(r4)
    c7e4:	11400015 	stw	r5,0(r2)
    c7e8:	003ff206 	br	c7b4 <__alt_data_end+0xfc00c7b4>
    c7ec:	20c00417 	ldw	r3,16(r4)
    c7f0:	21000b04 	addi	r4,r4,44
    c7f4:	10c00015 	stw	r3,0(r2)
    c7f8:	dfc00017 	ldw	ra,0(sp)
    c7fc:	dec00104 	addi	sp,sp,4
    c800:	000e1d41 	jmpi	e1d4 <_Unwind_DeleteException>
    c804:	000b4680 	call	b468 <_ZSt9terminatev>

0000c808 <_ZSt18uncaught_exceptionv>:
    c808:	deffff04 	addi	sp,sp,-4
    c80c:	dfc00015 	stw	ra,0(sp)
    c810:	000cb500 	call	cb50 <__cxa_get_globals>
    c814:	10800117 	ldw	r2,4(r2)
    c818:	1004c03a 	cmpne	r2,r2,zero
    c81c:	dfc00017 	ldw	ra,0(sp)
    c820:	dec00104 	addi	sp,sp,4
    c824:	f800283a 	ret

0000c828 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    c828:	018000f4 	movhi	r6,3
    c82c:	31843404 	addi	r6,r6,4304
    c830:	31400117 	ldw	r5,4(r6)
    c834:	223fff04 	addi	r8,r4,-4
    c838:	227fff17 	ldw	r9,-4(r4)
    c83c:	28001326 	beq	r5,zero,c88c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    c840:	424f883a 	add	r7,r8,r9
    c844:	29c01426 	beq	r5,r7,c898 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    c848:	28c00117 	ldw	r3,4(r5)
    c84c:	18001c26 	beq	r3,zero,c8c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    c850:	38c00336 	bltu	r7,r3,c860 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    c854:	00001e06 	br	c8d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    c858:	3880052e 	bgeu	r7,r2,c870 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    c85c:	1007883a 	mov	r3,r2
    c860:	18800117 	ldw	r2,4(r3)
    c864:	29800104 	addi	r6,r5,4
    c868:	180b883a 	mov	r5,r3
    c86c:	103ffa1e 	bne	r2,zero,c858 <__alt_data_end+0xfc00c858>
    c870:	19400017 	ldw	r5,0(r3)
    c874:	194f883a 	add	r7,r3,r5
    c878:	41c00e26 	beq	r8,r7,c8b4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    c87c:	20800015 	stw	r2,0(r4)
    c880:	30800017 	ldw	r2,0(r6)
    c884:	12000115 	stw	r8,4(r2)
    c888:	f800283a 	ret
    c88c:	20000015 	stw	zero,0(r4)
    c890:	32000115 	stw	r8,4(r6)
    c894:	f800283a 	ret
    c898:	28c00017 	ldw	r3,0(r5)
    c89c:	28800117 	ldw	r2,4(r5)
    c8a0:	1a53883a 	add	r9,r3,r9
    c8a4:	227fff15 	stw	r9,-4(r4)
    c8a8:	20800015 	stw	r2,0(r4)
    c8ac:	32000115 	stw	r8,4(r6)
    c8b0:	f800283a 	ret
    c8b4:	494b883a 	add	r5,r9,r5
    c8b8:	19400015 	stw	r5,0(r3)
    c8bc:	f800283a 	ret
    c8c0:	0005883a 	mov	r2,zero
    c8c4:	2807883a 	mov	r3,r5
    c8c8:	31800104 	addi	r6,r6,4
    c8cc:	003fe806 	br	c870 <__alt_data_end+0xfc00c870>
    c8d0:	1805883a 	mov	r2,r3
    c8d4:	31800104 	addi	r6,r6,4
    c8d8:	2807883a 	mov	r3,r5
    c8dc:	003fe406 	br	c870 <__alt_data_end+0xfc00c870>

0000c8e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    c8e0:	20800104 	addi	r2,r4,4
    c8e4:	00c001c4 	movi	r3,7
    c8e8:	1880112e 	bgeu	r3,r2,c930 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    c8ec:	20c9883a 	add	r4,r4,r3
    c8f0:	00bfff04 	movi	r2,-4
    c8f4:	208a703a 	and	r5,r4,r2
    c8f8:	018000f4 	movhi	r6,3
    c8fc:	31843404 	addi	r6,r6,4304
    c900:	30c00117 	ldw	r3,4(r6)
    c904:	18000826 	beq	r3,zero,c928 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    c908:	19000017 	ldw	r4,0(r3)
    c90c:	21400436 	bltu	r4,r5,c920 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    c910:	00001a06 	br	c97c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    c914:	11000017 	ldw	r4,0(r2)
    c918:	2140072e 	bgeu	r4,r5,c938 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    c91c:	1007883a 	mov	r3,r2
    c920:	18800117 	ldw	r2,4(r3)
    c924:	103ffb1e 	bne	r2,zero,c914 <__alt_data_end+0xfc00c914>
    c928:	0005883a 	mov	r2,zero
    c92c:	f800283a 	ret
    c930:	01400204 	movi	r5,8
    c934:	003ff006 	br	c8f8 <__alt_data_end+0xfc00c8f8>
    c938:	18c00104 	addi	r3,r3,4
    c93c:	2149c83a 	sub	r4,r4,r5
    c940:	018001c4 	movi	r6,7
    c944:	3100092e 	bgeu	r6,r4,c96c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    c948:	11c00117 	ldw	r7,4(r2)
    c94c:	114d883a 	add	r6,r2,r5
    c950:	31000015 	stw	r4,0(r6)
    c954:	31c00115 	stw	r7,4(r6)
    c958:	18800017 	ldw	r2,0(r3)
    c95c:	11400015 	stw	r5,0(r2)
    c960:	19800015 	stw	r6,0(r3)
    c964:	10800104 	addi	r2,r2,4
    c968:	f800283a 	ret
    c96c:	11000117 	ldw	r4,4(r2)
    c970:	10800104 	addi	r2,r2,4
    c974:	19000015 	stw	r4,0(r3)
    c978:	f800283a 	ret
    c97c:	1805883a 	mov	r2,r3
    c980:	30c00104 	addi	r3,r6,4
    c984:	003fed06 	br	c93c <__alt_data_end+0xfc00c93c>

0000c988 <__cxa_allocate_exception>:
    c988:	defffd04 	addi	sp,sp,-12
    c98c:	dc400115 	stw	r17,4(sp)
    c990:	24401104 	addi	r17,r4,68
    c994:	8809883a 	mov	r4,r17
    c998:	dc000015 	stw	r16,0(sp)
    c99c:	dfc00215 	stw	ra,8(sp)
    c9a0:	000e3280 	call	e328 <malloc>
    c9a4:	1021883a 	mov	r16,r2
    c9a8:	10000a26 	beq	r2,zero,c9d4 <__cxa_allocate_exception+0x4c>
    c9ac:	01801104 	movi	r6,68
    c9b0:	000b883a 	mov	r5,zero
    c9b4:	8009883a 	mov	r4,r16
    c9b8:	000eca40 	call	eca4 <memset>
    c9bc:	80801104 	addi	r2,r16,68
    c9c0:	dfc00217 	ldw	ra,8(sp)
    c9c4:	dc400117 	ldw	r17,4(sp)
    c9c8:	dc000017 	ldw	r16,0(sp)
    c9cc:	dec00304 	addi	sp,sp,12
    c9d0:	f800283a 	ret
    c9d4:	8809883a 	mov	r4,r17
    c9d8:	000c8e00 	call	c8e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    c9dc:	1021883a 	mov	r16,r2
    c9e0:	103ff21e 	bne	r2,zero,c9ac <__alt_data_end+0xfc00c9ac>
    c9e4:	000b4680 	call	b468 <_ZSt9terminatev>

0000c9e8 <__cxa_free_exception>:
    c9e8:	00c000f4 	movhi	r3,3
    c9ec:	18c43404 	addi	r3,r3,4304
    c9f0:	18800217 	ldw	r2,8(r3)
    c9f4:	213fef04 	addi	r4,r4,-68
    c9f8:	1100042e 	bgeu	r2,r4,ca0c <__cxa_free_exception+0x24>
    c9fc:	18c00317 	ldw	r3,12(r3)
    ca00:	10c5883a 	add	r2,r2,r3
    ca04:	2080012e 	bgeu	r4,r2,ca0c <__cxa_free_exception+0x24>
    ca08:	000c8281 	jmpi	c828 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    ca0c:	000e33c1 	jmpi	e33c <free>

0000ca10 <__cxa_allocate_dependent_exception>:
    ca10:	defffe04 	addi	sp,sp,-8
    ca14:	01001004 	movi	r4,64
    ca18:	dc000015 	stw	r16,0(sp)
    ca1c:	dfc00115 	stw	ra,4(sp)
    ca20:	000e3280 	call	e328 <malloc>
    ca24:	1021883a 	mov	r16,r2
    ca28:	10000926 	beq	r2,zero,ca50 <__cxa_allocate_dependent_exception+0x40>
    ca2c:	01801004 	movi	r6,64
    ca30:	000b883a 	mov	r5,zero
    ca34:	8009883a 	mov	r4,r16
    ca38:	000eca40 	call	eca4 <memset>
    ca3c:	8005883a 	mov	r2,r16
    ca40:	dfc00117 	ldw	ra,4(sp)
    ca44:	dc000017 	ldw	r16,0(sp)
    ca48:	dec00204 	addi	sp,sp,8
    ca4c:	f800283a 	ret
    ca50:	01001004 	movi	r4,64
    ca54:	000c8e00 	call	c8e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    ca58:	1021883a 	mov	r16,r2
    ca5c:	103ff31e 	bne	r2,zero,ca2c <__alt_data_end+0xfc00ca2c>
    ca60:	000b4680 	call	b468 <_ZSt9terminatev>

0000ca64 <__cxa_free_dependent_exception>:
    ca64:	014000f4 	movhi	r5,3
    ca68:	29443404 	addi	r5,r5,4304
    ca6c:	28c00217 	ldw	r3,8(r5)
    ca70:	2005883a 	mov	r2,r4
    ca74:	1900042e 	bgeu	r3,r4,ca88 <__cxa_free_dependent_exception+0x24>
    ca78:	29400317 	ldw	r5,12(r5)
    ca7c:	1947883a 	add	r3,r3,r5
    ca80:	20c0012e 	bgeu	r4,r3,ca88 <__cxa_free_dependent_exception+0x24>
    ca84:	000c8281 	jmpi	c828 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    ca88:	1009883a 	mov	r4,r2
    ca8c:	000e33c1 	jmpi	e33c <free>

0000ca90 <_GLOBAL__sub_I___cxa_allocate_exception>:
    ca90:	defffd04 	addi	sp,sp,-12
    ca94:	dc400115 	stw	r17,4(sp)
    ca98:	dc000015 	stw	r16,0(sp)
    ca9c:	04424004 	movi	r17,2304
    caa0:	040000f4 	movhi	r16,3
    caa4:	84043404 	addi	r16,r16,4304
    caa8:	8809883a 	mov	r4,r17
    caac:	dfc00215 	stw	ra,8(sp)
    cab0:	84400315 	stw	r17,12(r16)
    cab4:	000e3280 	call	e328 <malloc>
    cab8:	80800215 	stw	r2,8(r16)
    cabc:	10000826 	beq	r2,zero,cae0 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    cac0:	80800115 	stw	r2,4(r16)
    cac4:	14400015 	stw	r17,0(r2)
    cac8:	10000115 	stw	zero,4(r2)
    cacc:	dfc00217 	ldw	ra,8(sp)
    cad0:	dc400117 	ldw	r17,4(sp)
    cad4:	dc000017 	ldw	r16,0(sp)
    cad8:	dec00304 	addi	sp,sp,12
    cadc:	f800283a 	ret
    cae0:	80000315 	stw	zero,12(r16)
    cae4:	80000115 	stw	zero,4(r16)
    cae8:	003ff806 	br	cacc <__alt_data_end+0xfc00cacc>

0000caec <__cxa_call_terminate>:
    caec:	defffe04 	addi	sp,sp,-8
    caf0:	dfc00115 	stw	ra,4(sp)
    caf4:	dc000015 	stw	r16,0(sp)
    caf8:	20000d26 	beq	r4,zero,cb30 <__cxa_call_terminate+0x44>
    cafc:	2021883a 	mov	r16,r4
    cb00:	000c6a00 	call	c6a0 <__cxa_begin_catch>
    cb04:	80c00017 	ldw	r3,0(r16)
    cb08:	016f3574 	movhi	r5,48341
    cb0c:	29754004 	addi	r5,r5,-11008
    cb10:	194b883a 	add	r5,r3,r5
    cb14:	80800117 	ldw	r2,4(r16)
    cb18:	28c9803a 	cmpltu	r4,r5,r3
    cb1c:	00ee2cb4 	movhi	r3,47282
    cb20:	18eaaf04 	addi	r3,r3,-21828
    cb24:	10c5883a 	add	r2,r2,r3
    cb28:	2085883a 	add	r2,r4,r2
    cb2c:	10000126 	beq	r2,zero,cb34 <__cxa_call_terminate+0x48>
    cb30:	000b4680 	call	b468 <_ZSt9terminatev>
    cb34:	00800044 	movi	r2,1
    cb38:	117ffd36 	bltu	r2,r5,cb30 <__alt_data_end+0xfc00cb30>
    cb3c:	813ff817 	ldw	r4,-32(r16)
    cb40:	000b3a80 	call	b3a8 <_ZN10__cxxabiv111__terminateEPFvvE>

0000cb44 <__cxa_get_globals_fast>:
    cb44:	008000f4 	movhi	r2,3
    cb48:	1083db04 	addi	r2,r2,3948
    cb4c:	f800283a 	ret

0000cb50 <__cxa_get_globals>:
    cb50:	008000f4 	movhi	r2,3
    cb54:	1083db04 	addi	r2,r2,3948
    cb58:	f800283a 	ret

0000cb5c <_ZNSt9exceptionD1Ev>:
    cb5c:	f800283a 	ret

0000cb60 <_ZNSt13bad_exceptionD1Ev>:
    cb60:	f800283a 	ret

0000cb64 <_ZNKSt9exception4whatEv>:
    cb64:	008000f4 	movhi	r2,3
    cb68:	10a9cc04 	addi	r2,r2,-22736
    cb6c:	f800283a 	ret

0000cb70 <_ZNKSt13bad_exception4whatEv>:
    cb70:	008000f4 	movhi	r2,3
    cb74:	10a9d004 	addi	r2,r2,-22720
    cb78:	f800283a 	ret

0000cb7c <_ZNSt9exceptionD0Ev>:
    cb7c:	000b09c1 	jmpi	b09c <_ZdlPv>

0000cb80 <_ZNSt13bad_exceptionD0Ev>:
    cb80:	000b09c1 	jmpi	b09c <_ZdlPv>

0000cb84 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    cb84:	f800283a 	ret

0000cb88 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    cb88:	000b09c1 	jmpi	b09c <_ZdlPv>

0000cb8c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    cb8c:	f800283a 	ret

0000cb90 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    cb90:	000b09c1 	jmpi	b09c <_ZdlPv>

0000cb94 <__fixunssfsi>:
    cb94:	defffd04 	addi	sp,sp,-12
    cb98:	dc000015 	stw	r16,0(sp)
    cb9c:	0413c034 	movhi	r16,20224
    cba0:	800b883a 	mov	r5,r16
    cba4:	dc400115 	stw	r17,4(sp)
    cba8:	dfc00215 	stw	ra,8(sp)
    cbac:	2023883a 	mov	r17,r4
    cbb0:	000d2100 	call	d210 <__gesf2>
    cbb4:	1000070e 	bge	r2,zero,cbd4 <__fixunssfsi+0x40>
    cbb8:	8809883a 	mov	r4,r17
    cbbc:	000dbe00 	call	dbe0 <__fixsfsi>
    cbc0:	dfc00217 	ldw	ra,8(sp)
    cbc4:	dc400117 	ldw	r17,4(sp)
    cbc8:	dc000017 	ldw	r16,0(sp)
    cbcc:	dec00304 	addi	sp,sp,12
    cbd0:	f800283a 	ret
    cbd4:	800b883a 	mov	r5,r16
    cbd8:	8809883a 	mov	r4,r17
    cbdc:	000d6fc0 	call	d6fc <__subsf3>
    cbe0:	1009883a 	mov	r4,r2
    cbe4:	000dbe00 	call	dbe0 <__fixsfsi>
    cbe8:	00e00034 	movhi	r3,32768
    cbec:	10c5883a 	add	r2,r2,r3
    cbf0:	003ff306 	br	cbc0 <__alt_data_end+0xfc00cbc0>

0000cbf4 <__divsi3>:
    cbf4:	20001b16 	blt	r4,zero,cc64 <__divsi3+0x70>
    cbf8:	000f883a 	mov	r7,zero
    cbfc:	28001616 	blt	r5,zero,cc58 <__divsi3+0x64>
    cc00:	200d883a 	mov	r6,r4
    cc04:	29001a2e 	bgeu	r5,r4,cc70 <__divsi3+0x7c>
    cc08:	00800804 	movi	r2,32
    cc0c:	00c00044 	movi	r3,1
    cc10:	00000106 	br	cc18 <__divsi3+0x24>
    cc14:	10000d26 	beq	r2,zero,cc4c <__divsi3+0x58>
    cc18:	294b883a 	add	r5,r5,r5
    cc1c:	10bfffc4 	addi	r2,r2,-1
    cc20:	18c7883a 	add	r3,r3,r3
    cc24:	293ffb36 	bltu	r5,r4,cc14 <__alt_data_end+0xfc00cc14>
    cc28:	0005883a 	mov	r2,zero
    cc2c:	18000726 	beq	r3,zero,cc4c <__divsi3+0x58>
    cc30:	0005883a 	mov	r2,zero
    cc34:	31400236 	bltu	r6,r5,cc40 <__divsi3+0x4c>
    cc38:	314dc83a 	sub	r6,r6,r5
    cc3c:	10c4b03a 	or	r2,r2,r3
    cc40:	1806d07a 	srli	r3,r3,1
    cc44:	280ad07a 	srli	r5,r5,1
    cc48:	183ffa1e 	bne	r3,zero,cc34 <__alt_data_end+0xfc00cc34>
    cc4c:	38000126 	beq	r7,zero,cc54 <__divsi3+0x60>
    cc50:	0085c83a 	sub	r2,zero,r2
    cc54:	f800283a 	ret
    cc58:	014bc83a 	sub	r5,zero,r5
    cc5c:	39c0005c 	xori	r7,r7,1
    cc60:	003fe706 	br	cc00 <__alt_data_end+0xfc00cc00>
    cc64:	0109c83a 	sub	r4,zero,r4
    cc68:	01c00044 	movi	r7,1
    cc6c:	003fe306 	br	cbfc <__alt_data_end+0xfc00cbfc>
    cc70:	00c00044 	movi	r3,1
    cc74:	003fee06 	br	cc30 <__alt_data_end+0xfc00cc30>

0000cc78 <__modsi3>:
    cc78:	20001716 	blt	r4,zero,ccd8 <__modsi3+0x60>
    cc7c:	000f883a 	mov	r7,zero
    cc80:	2005883a 	mov	r2,r4
    cc84:	28001216 	blt	r5,zero,ccd0 <__modsi3+0x58>
    cc88:	2900162e 	bgeu	r5,r4,cce4 <__modsi3+0x6c>
    cc8c:	01800804 	movi	r6,32
    cc90:	00c00044 	movi	r3,1
    cc94:	00000106 	br	cc9c <__modsi3+0x24>
    cc98:	30000a26 	beq	r6,zero,ccc4 <__modsi3+0x4c>
    cc9c:	294b883a 	add	r5,r5,r5
    cca0:	31bfffc4 	addi	r6,r6,-1
    cca4:	18c7883a 	add	r3,r3,r3
    cca8:	293ffb36 	bltu	r5,r4,cc98 <__alt_data_end+0xfc00cc98>
    ccac:	18000526 	beq	r3,zero,ccc4 <__modsi3+0x4c>
    ccb0:	1806d07a 	srli	r3,r3,1
    ccb4:	11400136 	bltu	r2,r5,ccbc <__modsi3+0x44>
    ccb8:	1145c83a 	sub	r2,r2,r5
    ccbc:	280ad07a 	srli	r5,r5,1
    ccc0:	183ffb1e 	bne	r3,zero,ccb0 <__alt_data_end+0xfc00ccb0>
    ccc4:	38000126 	beq	r7,zero,cccc <__modsi3+0x54>
    ccc8:	0085c83a 	sub	r2,zero,r2
    cccc:	f800283a 	ret
    ccd0:	014bc83a 	sub	r5,zero,r5
    ccd4:	003fec06 	br	cc88 <__alt_data_end+0xfc00cc88>
    ccd8:	0109c83a 	sub	r4,zero,r4
    ccdc:	01c00044 	movi	r7,1
    cce0:	003fe706 	br	cc80 <__alt_data_end+0xfc00cc80>
    cce4:	00c00044 	movi	r3,1
    cce8:	003ff106 	br	ccb0 <__alt_data_end+0xfc00ccb0>

0000ccec <__udivsi3>:
    ccec:	200d883a 	mov	r6,r4
    ccf0:	2900152e 	bgeu	r5,r4,cd48 <__udivsi3+0x5c>
    ccf4:	28001416 	blt	r5,zero,cd48 <__udivsi3+0x5c>
    ccf8:	00800804 	movi	r2,32
    ccfc:	00c00044 	movi	r3,1
    cd00:	00000206 	br	cd0c <__udivsi3+0x20>
    cd04:	10000e26 	beq	r2,zero,cd40 <__udivsi3+0x54>
    cd08:	28000516 	blt	r5,zero,cd20 <__udivsi3+0x34>
    cd0c:	294b883a 	add	r5,r5,r5
    cd10:	10bfffc4 	addi	r2,r2,-1
    cd14:	18c7883a 	add	r3,r3,r3
    cd18:	293ffa36 	bltu	r5,r4,cd04 <__alt_data_end+0xfc00cd04>
    cd1c:	18000826 	beq	r3,zero,cd40 <__udivsi3+0x54>
    cd20:	0005883a 	mov	r2,zero
    cd24:	31400236 	bltu	r6,r5,cd30 <__udivsi3+0x44>
    cd28:	314dc83a 	sub	r6,r6,r5
    cd2c:	10c4b03a 	or	r2,r2,r3
    cd30:	1806d07a 	srli	r3,r3,1
    cd34:	280ad07a 	srli	r5,r5,1
    cd38:	183ffa1e 	bne	r3,zero,cd24 <__alt_data_end+0xfc00cd24>
    cd3c:	f800283a 	ret
    cd40:	0005883a 	mov	r2,zero
    cd44:	f800283a 	ret
    cd48:	00c00044 	movi	r3,1
    cd4c:	003ff406 	br	cd20 <__alt_data_end+0xfc00cd20>

0000cd50 <__umodsi3>:
    cd50:	2005883a 	mov	r2,r4
    cd54:	2900122e 	bgeu	r5,r4,cda0 <__umodsi3+0x50>
    cd58:	28001116 	blt	r5,zero,cda0 <__umodsi3+0x50>
    cd5c:	01800804 	movi	r6,32
    cd60:	00c00044 	movi	r3,1
    cd64:	00000206 	br	cd70 <__umodsi3+0x20>
    cd68:	30000c26 	beq	r6,zero,cd9c <__umodsi3+0x4c>
    cd6c:	28000516 	blt	r5,zero,cd84 <__umodsi3+0x34>
    cd70:	294b883a 	add	r5,r5,r5
    cd74:	31bfffc4 	addi	r6,r6,-1
    cd78:	18c7883a 	add	r3,r3,r3
    cd7c:	293ffa36 	bltu	r5,r4,cd68 <__alt_data_end+0xfc00cd68>
    cd80:	18000626 	beq	r3,zero,cd9c <__umodsi3+0x4c>
    cd84:	1806d07a 	srli	r3,r3,1
    cd88:	11400136 	bltu	r2,r5,cd90 <__umodsi3+0x40>
    cd8c:	1145c83a 	sub	r2,r2,r5
    cd90:	280ad07a 	srli	r5,r5,1
    cd94:	183ffb1e 	bne	r3,zero,cd84 <__alt_data_end+0xfc00cd84>
    cd98:	f800283a 	ret
    cd9c:	f800283a 	ret
    cda0:	00c00044 	movi	r3,1
    cda4:	003ff706 	br	cd84 <__alt_data_end+0xfc00cd84>

0000cda8 <__mulsi3>:
    cda8:	0005883a 	mov	r2,zero
    cdac:	20000726 	beq	r4,zero,cdcc <__mulsi3+0x24>
    cdb0:	20c0004c 	andi	r3,r4,1
    cdb4:	2008d07a 	srli	r4,r4,1
    cdb8:	18000126 	beq	r3,zero,cdc0 <__mulsi3+0x18>
    cdbc:	1145883a 	add	r2,r2,r5
    cdc0:	294b883a 	add	r5,r5,r5
    cdc4:	203ffa1e 	bne	r4,zero,cdb0 <__alt_data_end+0xfc00cdb0>
    cdc8:	f800283a 	ret
    cdcc:	f800283a 	ret

0000cdd0 <__divsf3>:
    cdd0:	defff504 	addi	sp,sp,-44
    cdd4:	200cd5fa 	srli	r6,r4,23
    cdd8:	dcc00415 	stw	r19,16(sp)
    cddc:	2026d7fa 	srli	r19,r4,31
    cde0:	00c02034 	movhi	r3,128
    cde4:	dd800715 	stw	r22,28(sp)
    cde8:	dd000515 	stw	r20,20(sp)
    cdec:	dc800315 	stw	r18,12(sp)
    cdf0:	18ffffc4 	addi	r3,r3,-1
    cdf4:	dfc00a15 	stw	ra,40(sp)
    cdf8:	df000915 	stw	fp,36(sp)
    cdfc:	ddc00815 	stw	r23,32(sp)
    ce00:	dd400615 	stw	r21,24(sp)
    ce04:	dc400215 	stw	r17,8(sp)
    ce08:	dc000115 	stw	r16,4(sp)
    ce0c:	35003fcc 	andi	r20,r6,255
    ce10:	1924703a 	and	r18,r3,r4
    ce14:	9d803fcc 	andi	r22,r19,255
    ce18:	a0005226 	beq	r20,zero,cf64 <__divsf3+0x194>
    ce1c:	00803fc4 	movi	r2,255
    ce20:	a0802e26 	beq	r20,r2,cedc <__divsf3+0x10c>
    ce24:	91002034 	orhi	r4,r18,128
    ce28:	202490fa 	slli	r18,r4,3
    ce2c:	a53fe044 	addi	r20,r20,-127
    ce30:	0021883a 	mov	r16,zero
    ce34:	002f883a 	mov	r23,zero
    ce38:	280cd5fa 	srli	r6,r5,23
    ce3c:	282ad7fa 	srli	r21,r5,31
    ce40:	00c02034 	movhi	r3,128
    ce44:	18ffffc4 	addi	r3,r3,-1
    ce48:	31803fcc 	andi	r6,r6,255
    ce4c:	1962703a 	and	r17,r3,r5
    ce50:	af003fcc 	andi	fp,r21,255
    ce54:	30004a26 	beq	r6,zero,cf80 <__divsf3+0x1b0>
    ce58:	00803fc4 	movi	r2,255
    ce5c:	30804526 	beq	r6,r2,cf74 <__divsf3+0x1a4>
    ce60:	89402034 	orhi	r5,r17,128
    ce64:	282290fa 	slli	r17,r5,3
    ce68:	31bfe044 	addi	r6,r6,-127
    ce6c:	000b883a 	mov	r5,zero
    ce70:	2c20b03a 	or	r16,r5,r16
    ce74:	802090ba 	slli	r16,r16,2
    ce78:	00800074 	movhi	r2,1
    ce7c:	10b3a704 	addi	r2,r2,-12644
    ce80:	80a1883a 	add	r16,r16,r2
    ce84:	81000017 	ldw	r4,0(r16)
    ce88:	9d46f03a 	xor	r3,r19,r21
    ce8c:	180f883a 	mov	r7,r3
    ce90:	18803fcc 	andi	r2,r3,255
    ce94:	a18dc83a 	sub	r6,r20,r6
    ce98:	2000683a 	jmp	r4
    ce9c:	0000d080 	call	d08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x16c>
    cea0:	0000cf04 	movi	zero,828
    cea4:	0000d074 	movhi	zero,833
    cea8:	0000cef0 	cmpltui	zero,zero,827
    ceac:	0000d074 	movhi	zero,833
    ceb0:	0000d04c 	andi	zero,zero,833
    ceb4:	0000d074 	movhi	zero,833
    ceb8:	0000cef0 	cmpltui	zero,zero,827
    cebc:	0000cf04 	movi	zero,828
    cec0:	0000cf04 	movi	zero,828
    cec4:	0000d04c 	andi	zero,zero,833
    cec8:	0000cef0 	cmpltui	zero,zero,827
    cecc:	0000d160 	cmpeqi	zero,zero,837
    ced0:	0000d160 	cmpeqi	zero,zero,837
    ced4:	0000d160 	cmpeqi	zero,zero,837
    ced8:	0000d114 	movui	zero,836
    cedc:	9000581e 	bne	r18,zero,d040 <__divsf3+0x270>
    cee0:	04000204 	movi	r16,8
    cee4:	05c00084 	movi	r23,2
    cee8:	003fd306 	br	ce38 <__alt_data_end+0xfc00ce38>
    ceec:	0023883a 	mov	r17,zero
    cef0:	e02d883a 	mov	r22,fp
    cef4:	282f883a 	mov	r23,r5
    cef8:	00800084 	movi	r2,2
    cefc:	b8808f1e 	bne	r23,r2,d13c <__divsf3+0x36c>
    cf00:	b005883a 	mov	r2,r22
    cf04:	11c0004c 	andi	r7,r2,1
    cf08:	013fffc4 	movi	r4,-1
    cf0c:	000d883a 	mov	r6,zero
    cf10:	21003fcc 	andi	r4,r4,255
    cf14:	200895fa 	slli	r4,r4,23
    cf18:	38803fcc 	andi	r2,r7,255
    cf1c:	00c02034 	movhi	r3,128
    cf20:	100497fa 	slli	r2,r2,31
    cf24:	18ffffc4 	addi	r3,r3,-1
    cf28:	30c6703a 	and	r3,r6,r3
    cf2c:	1906b03a 	or	r3,r3,r4
    cf30:	1884b03a 	or	r2,r3,r2
    cf34:	dfc00a17 	ldw	ra,40(sp)
    cf38:	df000917 	ldw	fp,36(sp)
    cf3c:	ddc00817 	ldw	r23,32(sp)
    cf40:	dd800717 	ldw	r22,28(sp)
    cf44:	dd400617 	ldw	r21,24(sp)
    cf48:	dd000517 	ldw	r20,20(sp)
    cf4c:	dcc00417 	ldw	r19,16(sp)
    cf50:	dc800317 	ldw	r18,12(sp)
    cf54:	dc400217 	ldw	r17,8(sp)
    cf58:	dc000117 	ldw	r16,4(sp)
    cf5c:	dec00b04 	addi	sp,sp,44
    cf60:	f800283a 	ret
    cf64:	90002b1e 	bne	r18,zero,d014 <__divsf3+0x244>
    cf68:	04000104 	movi	r16,4
    cf6c:	05c00044 	movi	r23,1
    cf70:	003fb106 	br	ce38 <__alt_data_end+0xfc00ce38>
    cf74:	8800251e 	bne	r17,zero,d00c <__divsf3+0x23c>
    cf78:	01400084 	movi	r5,2
    cf7c:	00000206 	br	cf88 <__divsf3+0x1b8>
    cf80:	88001a1e 	bne	r17,zero,cfec <__divsf3+0x21c>
    cf84:	01400044 	movi	r5,1
    cf88:	8160b03a 	or	r16,r16,r5
    cf8c:	802090ba 	slli	r16,r16,2
    cf90:	00c00074 	movhi	r3,1
    cf94:	18f3eb04 	addi	r3,r3,-12372
    cf98:	80e1883a 	add	r16,r16,r3
    cf9c:	80c00017 	ldw	r3,0(r16)
    cfa0:	9d44f03a 	xor	r2,r19,r21
    cfa4:	a18dc83a 	sub	r6,r20,r6
    cfa8:	1800683a 	jmp	r3
    cfac:	0000cf04 	movi	zero,828
    cfb0:	0000cf04 	movi	zero,828
    cfb4:	0000d150 	cmplti	zero,zero,837
    cfb8:	0000ceec 	andhi	zero,zero,827
    cfbc:	0000d150 	cmplti	zero,zero,837
    cfc0:	0000d04c 	andi	zero,zero,833
    cfc4:	0000d150 	cmplti	zero,zero,837
    cfc8:	0000ceec 	andhi	zero,zero,827
    cfcc:	0000cf04 	movi	zero,828
    cfd0:	0000cf04 	movi	zero,828
    cfd4:	0000d04c 	andi	zero,zero,833
    cfd8:	0000ceec 	andhi	zero,zero,827
    cfdc:	0000d160 	cmpeqi	zero,zero,837
    cfe0:	0000d160 	cmpeqi	zero,zero,837
    cfe4:	0000d160 	cmpeqi	zero,zero,837
    cfe8:	0000d178 	rdprs	zero,zero,837
    cfec:	8809883a 	mov	r4,r17
    cff0:	000e2600 	call	e260 <__clzsi2>
    cff4:	10fffec4 	addi	r3,r2,-5
    cff8:	10801d84 	addi	r2,r2,118
    cffc:	88e2983a 	sll	r17,r17,r3
    d000:	008dc83a 	sub	r6,zero,r2
    d004:	000b883a 	mov	r5,zero
    d008:	003f9906 	br	ce70 <__alt_data_end+0xfc00ce70>
    d00c:	014000c4 	movi	r5,3
    d010:	003f9706 	br	ce70 <__alt_data_end+0xfc00ce70>
    d014:	9009883a 	mov	r4,r18
    d018:	d9400015 	stw	r5,0(sp)
    d01c:	000e2600 	call	e260 <__clzsi2>
    d020:	10fffec4 	addi	r3,r2,-5
    d024:	11801d84 	addi	r6,r2,118
    d028:	90e4983a 	sll	r18,r18,r3
    d02c:	01a9c83a 	sub	r20,zero,r6
    d030:	0021883a 	mov	r16,zero
    d034:	002f883a 	mov	r23,zero
    d038:	d9400017 	ldw	r5,0(sp)
    d03c:	003f7e06 	br	ce38 <__alt_data_end+0xfc00ce38>
    d040:	04000304 	movi	r16,12
    d044:	05c000c4 	movi	r23,3
    d048:	003f7b06 	br	ce38 <__alt_data_end+0xfc00ce38>
    d04c:	01802034 	movhi	r6,128
    d050:	000f883a 	mov	r7,zero
    d054:	31bfffc4 	addi	r6,r6,-1
    d058:	013fffc4 	movi	r4,-1
    d05c:	003fac06 	br	cf10 <__alt_data_end+0xfc00cf10>
    d060:	01400044 	movi	r5,1
    d064:	2909c83a 	sub	r4,r5,r4
    d068:	00c006c4 	movi	r3,27
    d06c:	19004b0e 	bge	r3,r4,d19c <__divsf3+0x3cc>
    d070:	114e703a 	and	r7,r2,r5
    d074:	0009883a 	mov	r4,zero
    d078:	000d883a 	mov	r6,zero
    d07c:	003fa406 	br	cf10 <__alt_data_end+0xfc00cf10>
    d080:	9006917a 	slli	r3,r18,5
    d084:	8822917a 	slli	r17,r17,5
    d088:	1c40372e 	bgeu	r3,r17,d168 <__divsf3+0x398>
    d08c:	31bfffc4 	addi	r6,r6,-1
    d090:	010006c4 	movi	r4,27
    d094:	000b883a 	mov	r5,zero
    d098:	180f883a 	mov	r7,r3
    d09c:	294b883a 	add	r5,r5,r5
    d0a0:	18c7883a 	add	r3,r3,r3
    d0a4:	38000116 	blt	r7,zero,d0ac <__divsf3+0x2dc>
    d0a8:	1c400236 	bltu	r3,r17,d0b4 <__divsf3+0x2e4>
    d0ac:	1c47c83a 	sub	r3,r3,r17
    d0b0:	29400054 	ori	r5,r5,1
    d0b4:	213fffc4 	addi	r4,r4,-1
    d0b8:	203ff71e 	bne	r4,zero,d098 <__alt_data_end+0xfc00d098>
    d0bc:	1806c03a 	cmpne	r3,r3,zero
    d0c0:	1962b03a 	or	r17,r3,r5
    d0c4:	31001fc4 	addi	r4,r6,127
    d0c8:	013fe50e 	bge	zero,r4,d060 <__alt_data_end+0xfc00d060>
    d0cc:	88c001cc 	andi	r3,r17,7
    d0d0:	18000426 	beq	r3,zero,d0e4 <__divsf3+0x314>
    d0d4:	88c003cc 	andi	r3,r17,15
    d0d8:	01400104 	movi	r5,4
    d0dc:	19400126 	beq	r3,r5,d0e4 <__divsf3+0x314>
    d0e0:	8963883a 	add	r17,r17,r5
    d0e4:	88c2002c 	andhi	r3,r17,2048
    d0e8:	18000426 	beq	r3,zero,d0fc <__divsf3+0x32c>
    d0ec:	00fe0034 	movhi	r3,63488
    d0f0:	18ffffc4 	addi	r3,r3,-1
    d0f4:	31002004 	addi	r4,r6,128
    d0f8:	88e2703a 	and	r17,r17,r3
    d0fc:	00c03f84 	movi	r3,254
    d100:	193f8016 	blt	r3,r4,cf04 <__alt_data_end+0xfc00cf04>
    d104:	880c91ba 	slli	r6,r17,6
    d108:	11c0004c 	andi	r7,r2,1
    d10c:	300cd27a 	srli	r6,r6,9
    d110:	003f7f06 	br	cf10 <__alt_data_end+0xfc00cf10>
    d114:	9080102c 	andhi	r2,r18,64
    d118:	10000226 	beq	r2,zero,d124 <__divsf3+0x354>
    d11c:	8880102c 	andhi	r2,r17,64
    d120:	10001826 	beq	r2,zero,d184 <__divsf3+0x3b4>
    d124:	00802034 	movhi	r2,128
    d128:	91801034 	orhi	r6,r18,64
    d12c:	10bfffc4 	addi	r2,r2,-1
    d130:	980f883a 	mov	r7,r19
    d134:	308c703a 	and	r6,r6,r2
    d138:	003fc706 	br	d058 <__alt_data_end+0xfc00d058>
    d13c:	008000c4 	movi	r2,3
    d140:	b8802d26 	beq	r23,r2,d1f8 <__divsf3+0x428>
    d144:	00c00044 	movi	r3,1
    d148:	b005883a 	mov	r2,r22
    d14c:	b8ffdd1e 	bne	r23,r3,d0c4 <__alt_data_end+0xfc00d0c4>
    d150:	11c0004c 	andi	r7,r2,1
    d154:	0009883a 	mov	r4,zero
    d158:	000d883a 	mov	r6,zero
    d15c:	003f6c06 	br	cf10 <__alt_data_end+0xfc00cf10>
    d160:	9023883a 	mov	r17,r18
    d164:	003f6406 	br	cef8 <__alt_data_end+0xfc00cef8>
    d168:	1c47c83a 	sub	r3,r3,r17
    d16c:	01000684 	movi	r4,26
    d170:	01400044 	movi	r5,1
    d174:	003fc806 	br	d098 <__alt_data_end+0xfc00d098>
    d178:	9080102c 	andhi	r2,r18,64
    d17c:	103fe926 	beq	r2,zero,d124 <__alt_data_end+0xfc00d124>
    d180:	0023883a 	mov	r17,zero
    d184:	00802034 	movhi	r2,128
    d188:	89801034 	orhi	r6,r17,64
    d18c:	10bfffc4 	addi	r2,r2,-1
    d190:	a80f883a 	mov	r7,r21
    d194:	308c703a 	and	r6,r6,r2
    d198:	003faf06 	br	d058 <__alt_data_end+0xfc00d058>
    d19c:	01c00804 	movi	r7,32
    d1a0:	390fc83a 	sub	r7,r7,r4
    d1a4:	89ce983a 	sll	r7,r17,r7
    d1a8:	890ad83a 	srl	r5,r17,r4
    d1ac:	380ec03a 	cmpne	r7,r7,zero
    d1b0:	29cab03a 	or	r5,r5,r7
    d1b4:	28c001cc 	andi	r3,r5,7
    d1b8:	18000426 	beq	r3,zero,d1cc <__divsf3+0x3fc>
    d1bc:	28c003cc 	andi	r3,r5,15
    d1c0:	01000104 	movi	r4,4
    d1c4:	19000126 	beq	r3,r4,d1cc <__divsf3+0x3fc>
    d1c8:	290b883a 	add	r5,r5,r4
    d1cc:	28c1002c 	andhi	r3,r5,1024
    d1d0:	18000426 	beq	r3,zero,d1e4 <__divsf3+0x414>
    d1d4:	11c0004c 	andi	r7,r2,1
    d1d8:	01000044 	movi	r4,1
    d1dc:	000d883a 	mov	r6,zero
    d1e0:	003f4b06 	br	cf10 <__alt_data_end+0xfc00cf10>
    d1e4:	280a91ba 	slli	r5,r5,6
    d1e8:	11c0004c 	andi	r7,r2,1
    d1ec:	0009883a 	mov	r4,zero
    d1f0:	280cd27a 	srli	r6,r5,9
    d1f4:	003f4606 	br	cf10 <__alt_data_end+0xfc00cf10>
    d1f8:	00802034 	movhi	r2,128
    d1fc:	89801034 	orhi	r6,r17,64
    d200:	10bfffc4 	addi	r2,r2,-1
    d204:	b00f883a 	mov	r7,r22
    d208:	308c703a 	and	r6,r6,r2
    d20c:	003f9206 	br	d058 <__alt_data_end+0xfc00d058>

0000d210 <__gesf2>:
    d210:	2004d5fa 	srli	r2,r4,23
    d214:	2806d5fa 	srli	r3,r5,23
    d218:	01802034 	movhi	r6,128
    d21c:	31bfffc4 	addi	r6,r6,-1
    d220:	10803fcc 	andi	r2,r2,255
    d224:	01c03fc4 	movi	r7,255
    d228:	3110703a 	and	r8,r6,r4
    d22c:	18c03fcc 	andi	r3,r3,255
    d230:	314c703a 	and	r6,r6,r5
    d234:	2008d7fa 	srli	r4,r4,31
    d238:	280ad7fa 	srli	r5,r5,31
    d23c:	11c01926 	beq	r2,r7,d2a4 <__gesf2+0x94>
    d240:	01c03fc4 	movi	r7,255
    d244:	19c00f26 	beq	r3,r7,d284 <__gesf2+0x74>
    d248:	1000061e 	bne	r2,zero,d264 <__gesf2+0x54>
    d24c:	400f003a 	cmpeq	r7,r8,zero
    d250:	1800071e 	bne	r3,zero,d270 <__gesf2+0x60>
    d254:	3000061e 	bne	r6,zero,d270 <__gesf2+0x60>
    d258:	0005883a 	mov	r2,zero
    d25c:	40000e1e 	bne	r8,zero,d298 <__gesf2+0x88>
    d260:	f800283a 	ret
    d264:	18000a1e 	bne	r3,zero,d290 <__gesf2+0x80>
    d268:	30000b26 	beq	r6,zero,d298 <__gesf2+0x88>
    d26c:	000f883a 	mov	r7,zero
    d270:	29403fcc 	andi	r5,r5,255
    d274:	38000726 	beq	r7,zero,d294 <__gesf2+0x84>
    d278:	28000826 	beq	r5,zero,d29c <__gesf2+0x8c>
    d27c:	00800044 	movi	r2,1
    d280:	f800283a 	ret
    d284:	303ff026 	beq	r6,zero,d248 <__alt_data_end+0xfc00d248>
    d288:	00bfff84 	movi	r2,-2
    d28c:	f800283a 	ret
    d290:	29403fcc 	andi	r5,r5,255
    d294:	21400526 	beq	r4,r5,d2ac <__gesf2+0x9c>
    d298:	203ff826 	beq	r4,zero,d27c <__alt_data_end+0xfc00d27c>
    d29c:	00bfffc4 	movi	r2,-1
    d2a0:	f800283a 	ret
    d2a4:	403fe626 	beq	r8,zero,d240 <__alt_data_end+0xfc00d240>
    d2a8:	003ff706 	br	d288 <__alt_data_end+0xfc00d288>
    d2ac:	18bffa16 	blt	r3,r2,d298 <__alt_data_end+0xfc00d298>
    d2b0:	10c00216 	blt	r2,r3,d2bc <__gesf2+0xac>
    d2b4:	323ff836 	bltu	r6,r8,d298 <__alt_data_end+0xfc00d298>
    d2b8:	4180022e 	bgeu	r8,r6,d2c4 <__gesf2+0xb4>
    d2bc:	203fef1e 	bne	r4,zero,d27c <__alt_data_end+0xfc00d27c>
    d2c0:	003ff606 	br	d29c <__alt_data_end+0xfc00d29c>
    d2c4:	0005883a 	mov	r2,zero
    d2c8:	f800283a 	ret

0000d2cc <__mulsf3>:
    d2cc:	defff504 	addi	sp,sp,-44
    d2d0:	dc000115 	stw	r16,4(sp)
    d2d4:	2020d5fa 	srli	r16,r4,23
    d2d8:	dd400615 	stw	r21,24(sp)
    d2dc:	202ad7fa 	srli	r21,r4,31
    d2e0:	dc800315 	stw	r18,12(sp)
    d2e4:	04802034 	movhi	r18,128
    d2e8:	df000915 	stw	fp,36(sp)
    d2ec:	dd000515 	stw	r20,20(sp)
    d2f0:	94bfffc4 	addi	r18,r18,-1
    d2f4:	dfc00a15 	stw	ra,40(sp)
    d2f8:	ddc00815 	stw	r23,32(sp)
    d2fc:	dd800715 	stw	r22,28(sp)
    d300:	dcc00415 	stw	r19,16(sp)
    d304:	dc400215 	stw	r17,8(sp)
    d308:	84003fcc 	andi	r16,r16,255
    d30c:	9124703a 	and	r18,r18,r4
    d310:	a829883a 	mov	r20,r21
    d314:	af003fcc 	andi	fp,r21,255
    d318:	80005426 	beq	r16,zero,d46c <__mulsf3+0x1a0>
    d31c:	00803fc4 	movi	r2,255
    d320:	80802f26 	beq	r16,r2,d3e0 <__mulsf3+0x114>
    d324:	91002034 	orhi	r4,r18,128
    d328:	202490fa 	slli	r18,r4,3
    d32c:	843fe044 	addi	r16,r16,-127
    d330:	0023883a 	mov	r17,zero
    d334:	002f883a 	mov	r23,zero
    d338:	2804d5fa 	srli	r2,r5,23
    d33c:	282cd7fa 	srli	r22,r5,31
    d340:	01002034 	movhi	r4,128
    d344:	213fffc4 	addi	r4,r4,-1
    d348:	10803fcc 	andi	r2,r2,255
    d34c:	2166703a 	and	r19,r4,r5
    d350:	b1803fcc 	andi	r6,r22,255
    d354:	10004c26 	beq	r2,zero,d488 <__mulsf3+0x1bc>
    d358:	00c03fc4 	movi	r3,255
    d35c:	10c04726 	beq	r2,r3,d47c <__mulsf3+0x1b0>
    d360:	99002034 	orhi	r4,r19,128
    d364:	202690fa 	slli	r19,r4,3
    d368:	10bfe044 	addi	r2,r2,-127
    d36c:	0007883a 	mov	r3,zero
    d370:	80a1883a 	add	r16,r16,r2
    d374:	010003c4 	movi	r4,15
    d378:	1c44b03a 	or	r2,r3,r17
    d37c:	b56af03a 	xor	r21,r22,r21
    d380:	81c00044 	addi	r7,r16,1
    d384:	20806b36 	bltu	r4,r2,d534 <__mulsf3+0x268>
    d388:	100490ba 	slli	r2,r2,2
    d38c:	01000074 	movhi	r4,1
    d390:	2134e804 	addi	r4,r4,-11360
    d394:	1105883a 	add	r2,r2,r4
    d398:	10800017 	ldw	r2,0(r2)
    d39c:	1000683a 	jmp	r2
    d3a0:	0000d534 	movhi	zero,852
    d3a4:	0000d3f4 	movhi	zero,847
    d3a8:	0000d3f4 	movhi	zero,847
    d3ac:	0000d3f0 	cmpltui	zero,zero,847
    d3b0:	0000d518 	cmpnei	zero,zero,852
    d3b4:	0000d518 	cmpnei	zero,zero,852
    d3b8:	0000d504 	movi	zero,852
    d3bc:	0000d3f0 	cmpltui	zero,zero,847
    d3c0:	0000d518 	cmpnei	zero,zero,852
    d3c4:	0000d504 	movi	zero,852
    d3c8:	0000d518 	cmpnei	zero,zero,852
    d3cc:	0000d3f0 	cmpltui	zero,zero,847
    d3d0:	0000d524 	muli	zero,zero,852
    d3d4:	0000d524 	muli	zero,zero,852
    d3d8:	0000d524 	muli	zero,zero,852
    d3dc:	0000d634 	movhi	zero,856
    d3e0:	90003b1e 	bne	r18,zero,d4d0 <__mulsf3+0x204>
    d3e4:	04400204 	movi	r17,8
    d3e8:	05c00084 	movi	r23,2
    d3ec:	003fd206 	br	d338 <__alt_data_end+0xfc00d338>
    d3f0:	302b883a 	mov	r21,r6
    d3f4:	00800084 	movi	r2,2
    d3f8:	18802626 	beq	r3,r2,d494 <__mulsf3+0x1c8>
    d3fc:	008000c4 	movi	r2,3
    d400:	1880b826 	beq	r3,r2,d6e4 <__mulsf3+0x418>
    d404:	00800044 	movi	r2,1
    d408:	1880af1e 	bne	r3,r2,d6c8 <__mulsf3+0x3fc>
    d40c:	a829883a 	mov	r20,r21
    d410:	0007883a 	mov	r3,zero
    d414:	0009883a 	mov	r4,zero
    d418:	18803fcc 	andi	r2,r3,255
    d41c:	100695fa 	slli	r3,r2,23
    d420:	a0803fcc 	andi	r2,r20,255
    d424:	100a97fa 	slli	r5,r2,31
    d428:	00802034 	movhi	r2,128
    d42c:	10bfffc4 	addi	r2,r2,-1
    d430:	2084703a 	and	r2,r4,r2
    d434:	10c4b03a 	or	r2,r2,r3
    d438:	1144b03a 	or	r2,r2,r5
    d43c:	dfc00a17 	ldw	ra,40(sp)
    d440:	df000917 	ldw	fp,36(sp)
    d444:	ddc00817 	ldw	r23,32(sp)
    d448:	dd800717 	ldw	r22,28(sp)
    d44c:	dd400617 	ldw	r21,24(sp)
    d450:	dd000517 	ldw	r20,20(sp)
    d454:	dcc00417 	ldw	r19,16(sp)
    d458:	dc800317 	ldw	r18,12(sp)
    d45c:	dc400217 	ldw	r17,8(sp)
    d460:	dc000117 	ldw	r16,4(sp)
    d464:	dec00b04 	addi	sp,sp,44
    d468:	f800283a 	ret
    d46c:	90000d1e 	bne	r18,zero,d4a4 <__mulsf3+0x1d8>
    d470:	04400104 	movi	r17,4
    d474:	05c00044 	movi	r23,1
    d478:	003faf06 	br	d338 <__alt_data_end+0xfc00d338>
    d47c:	9806c03a 	cmpne	r3,r19,zero
    d480:	18c00084 	addi	r3,r3,2
    d484:	003fba06 	br	d370 <__alt_data_end+0xfc00d370>
    d488:	9800141e 	bne	r19,zero,d4dc <__mulsf3+0x210>
    d48c:	00c00044 	movi	r3,1
    d490:	003fb706 	br	d370 <__alt_data_end+0xfc00d370>
    d494:	a829883a 	mov	r20,r21
    d498:	00ffffc4 	movi	r3,-1
    d49c:	0009883a 	mov	r4,zero
    d4a0:	003fdd06 	br	d418 <__alt_data_end+0xfc00d418>
    d4a4:	9009883a 	mov	r4,r18
    d4a8:	d9400015 	stw	r5,0(sp)
    d4ac:	000e2600 	call	e260 <__clzsi2>
    d4b0:	10fffec4 	addi	r3,r2,-5
    d4b4:	10801d84 	addi	r2,r2,118
    d4b8:	90e4983a 	sll	r18,r18,r3
    d4bc:	00a1c83a 	sub	r16,zero,r2
    d4c0:	0023883a 	mov	r17,zero
    d4c4:	002f883a 	mov	r23,zero
    d4c8:	d9400017 	ldw	r5,0(sp)
    d4cc:	003f9a06 	br	d338 <__alt_data_end+0xfc00d338>
    d4d0:	04400304 	movi	r17,12
    d4d4:	05c000c4 	movi	r23,3
    d4d8:	003f9706 	br	d338 <__alt_data_end+0xfc00d338>
    d4dc:	9809883a 	mov	r4,r19
    d4e0:	d9800015 	stw	r6,0(sp)
    d4e4:	000e2600 	call	e260 <__clzsi2>
    d4e8:	10fffec4 	addi	r3,r2,-5
    d4ec:	10801d84 	addi	r2,r2,118
    d4f0:	98e6983a 	sll	r19,r19,r3
    d4f4:	0085c83a 	sub	r2,zero,r2
    d4f8:	0007883a 	mov	r3,zero
    d4fc:	d9800017 	ldw	r6,0(sp)
    d500:	003f9b06 	br	d370 <__alt_data_end+0xfc00d370>
    d504:	01002034 	movhi	r4,128
    d508:	0029883a 	mov	r20,zero
    d50c:	213fffc4 	addi	r4,r4,-1
    d510:	00ffffc4 	movi	r3,-1
    d514:	003fc006 	br	d418 <__alt_data_end+0xfc00d418>
    d518:	9027883a 	mov	r19,r18
    d51c:	b807883a 	mov	r3,r23
    d520:	003fb406 	br	d3f4 <__alt_data_end+0xfc00d3f4>
    d524:	9027883a 	mov	r19,r18
    d528:	e02b883a 	mov	r21,fp
    d52c:	b807883a 	mov	r3,r23
    d530:	003fb006 	br	d3f4 <__alt_data_end+0xfc00d3f4>
    d534:	9028d43a 	srli	r20,r18,16
    d538:	982cd43a 	srli	r22,r19,16
    d53c:	94bfffcc 	andi	r18,r18,65535
    d540:	9cffffcc 	andi	r19,r19,65535
    d544:	980b883a 	mov	r5,r19
    d548:	9009883a 	mov	r4,r18
    d54c:	d9c00015 	stw	r7,0(sp)
    d550:	000cda80 	call	cda8 <__mulsi3>
    d554:	a00b883a 	mov	r5,r20
    d558:	9809883a 	mov	r4,r19
    d55c:	1023883a 	mov	r17,r2
    d560:	000cda80 	call	cda8 <__mulsi3>
    d564:	a009883a 	mov	r4,r20
    d568:	b00b883a 	mov	r5,r22
    d56c:	1027883a 	mov	r19,r2
    d570:	000cda80 	call	cda8 <__mulsi3>
    d574:	b00b883a 	mov	r5,r22
    d578:	9009883a 	mov	r4,r18
    d57c:	1029883a 	mov	r20,r2
    d580:	000cda80 	call	cda8 <__mulsi3>
    d584:	8806d43a 	srli	r3,r17,16
    d588:	14c5883a 	add	r2,r2,r19
    d58c:	d9c00017 	ldw	r7,0(sp)
    d590:	1885883a 	add	r2,r3,r2
    d594:	14c0022e 	bgeu	r2,r19,d5a0 <__mulsf3+0x2d4>
    d598:	00c00074 	movhi	r3,1
    d59c:	a0e9883a 	add	r20,r20,r3
    d5a0:	1026943a 	slli	r19,r2,16
    d5a4:	8c7fffcc 	andi	r17,r17,65535
    d5a8:	1004d43a 	srli	r2,r2,16
    d5ac:	9c63883a 	add	r17,r19,r17
    d5b0:	882691ba 	slli	r19,r17,6
    d5b4:	1505883a 	add	r2,r2,r20
    d5b8:	8822d6ba 	srli	r17,r17,26
    d5bc:	100891ba 	slli	r4,r2,6
    d5c0:	9826c03a 	cmpne	r19,r19,zero
    d5c4:	9c62b03a 	or	r17,r19,r17
    d5c8:	8926b03a 	or	r19,r17,r4
    d5cc:	9882002c 	andhi	r2,r19,2048
    d5d0:	10000426 	beq	r2,zero,d5e4 <__mulsf3+0x318>
    d5d4:	9804d07a 	srli	r2,r19,1
    d5d8:	9900004c 	andi	r4,r19,1
    d5dc:	3821883a 	mov	r16,r7
    d5e0:	1126b03a 	or	r19,r2,r4
    d5e4:	80c01fc4 	addi	r3,r16,127
    d5e8:	00c0210e 	bge	zero,r3,d670 <__mulsf3+0x3a4>
    d5ec:	988001cc 	andi	r2,r19,7
    d5f0:	10000426 	beq	r2,zero,d604 <__mulsf3+0x338>
    d5f4:	988003cc 	andi	r2,r19,15
    d5f8:	01000104 	movi	r4,4
    d5fc:	11000126 	beq	r2,r4,d604 <__mulsf3+0x338>
    d600:	9927883a 	add	r19,r19,r4
    d604:	9882002c 	andhi	r2,r19,2048
    d608:	10000426 	beq	r2,zero,d61c <__mulsf3+0x350>
    d60c:	00be0034 	movhi	r2,63488
    d610:	10bfffc4 	addi	r2,r2,-1
    d614:	80c02004 	addi	r3,r16,128
    d618:	98a6703a 	and	r19,r19,r2
    d61c:	00803f84 	movi	r2,254
    d620:	10ff9c16 	blt	r2,r3,d494 <__alt_data_end+0xfc00d494>
    d624:	980891ba 	slli	r4,r19,6
    d628:	a829883a 	mov	r20,r21
    d62c:	2008d27a 	srli	r4,r4,9
    d630:	003f7906 	br	d418 <__alt_data_end+0xfc00d418>
    d634:	9080102c 	andhi	r2,r18,64
    d638:	10000826 	beq	r2,zero,d65c <__mulsf3+0x390>
    d63c:	9880102c 	andhi	r2,r19,64
    d640:	1000061e 	bne	r2,zero,d65c <__mulsf3+0x390>
    d644:	00802034 	movhi	r2,128
    d648:	99001034 	orhi	r4,r19,64
    d64c:	10bfffc4 	addi	r2,r2,-1
    d650:	b029883a 	mov	r20,r22
    d654:	2088703a 	and	r4,r4,r2
    d658:	003fad06 	br	d510 <__alt_data_end+0xfc00d510>
    d65c:	00802034 	movhi	r2,128
    d660:	91001034 	orhi	r4,r18,64
    d664:	10bfffc4 	addi	r2,r2,-1
    d668:	2088703a 	and	r4,r4,r2
    d66c:	003fa806 	br	d510 <__alt_data_end+0xfc00d510>
    d670:	00800044 	movi	r2,1
    d674:	10c7c83a 	sub	r3,r2,r3
    d678:	008006c4 	movi	r2,27
    d67c:	10ff6316 	blt	r2,r3,d40c <__alt_data_end+0xfc00d40c>
    d680:	00800804 	movi	r2,32
    d684:	10c5c83a 	sub	r2,r2,r3
    d688:	9884983a 	sll	r2,r19,r2
    d68c:	98c6d83a 	srl	r3,r19,r3
    d690:	1004c03a 	cmpne	r2,r2,zero
    d694:	1884b03a 	or	r2,r3,r2
    d698:	10c001cc 	andi	r3,r2,7
    d69c:	18000426 	beq	r3,zero,d6b0 <__mulsf3+0x3e4>
    d6a0:	10c003cc 	andi	r3,r2,15
    d6a4:	01000104 	movi	r4,4
    d6a8:	19000126 	beq	r3,r4,d6b0 <__mulsf3+0x3e4>
    d6ac:	1105883a 	add	r2,r2,r4
    d6b0:	10c1002c 	andhi	r3,r2,1024
    d6b4:	18000626 	beq	r3,zero,d6d0 <__mulsf3+0x404>
    d6b8:	a829883a 	mov	r20,r21
    d6bc:	00c00044 	movi	r3,1
    d6c0:	0009883a 	mov	r4,zero
    d6c4:	003f5406 	br	d418 <__alt_data_end+0xfc00d418>
    d6c8:	3821883a 	mov	r16,r7
    d6cc:	003fc506 	br	d5e4 <__alt_data_end+0xfc00d5e4>
    d6d0:	100491ba 	slli	r2,r2,6
    d6d4:	a829883a 	mov	r20,r21
    d6d8:	0007883a 	mov	r3,zero
    d6dc:	1008d27a 	srli	r4,r2,9
    d6e0:	003f4d06 	br	d418 <__alt_data_end+0xfc00d418>
    d6e4:	00802034 	movhi	r2,128
    d6e8:	99001034 	orhi	r4,r19,64
    d6ec:	10bfffc4 	addi	r2,r2,-1
    d6f0:	a829883a 	mov	r20,r21
    d6f4:	2088703a 	and	r4,r4,r2
    d6f8:	003f8506 	br	d510 <__alt_data_end+0xfc00d510>

0000d6fc <__subsf3>:
    d6fc:	defffc04 	addi	sp,sp,-16
    d700:	280cd5fa 	srli	r6,r5,23
    d704:	dc000015 	stw	r16,0(sp)
    d708:	01c02034 	movhi	r7,128
    d70c:	2020d5fa 	srli	r16,r4,23
    d710:	39ffffc4 	addi	r7,r7,-1
    d714:	3906703a 	and	r3,r7,r4
    d718:	dc400115 	stw	r17,4(sp)
    d71c:	394e703a 	and	r7,r7,r5
    d720:	2022d7fa 	srli	r17,r4,31
    d724:	dfc00315 	stw	ra,12(sp)
    d728:	dc800215 	stw	r18,8(sp)
    d72c:	31803fcc 	andi	r6,r6,255
    d730:	01003fc4 	movi	r4,255
    d734:	84003fcc 	andi	r16,r16,255
    d738:	180690fa 	slli	r3,r3,3
    d73c:	2804d7fa 	srli	r2,r5,31
    d740:	380e90fa 	slli	r7,r7,3
    d744:	31006d26 	beq	r6,r4,d8fc <__subsf3+0x200>
    d748:	1080005c 	xori	r2,r2,1
    d74c:	8189c83a 	sub	r4,r16,r6
    d750:	14404f26 	beq	r2,r17,d890 <__subsf3+0x194>
    d754:	0100770e 	bge	zero,r4,d934 <__subsf3+0x238>
    d758:	30001e1e 	bne	r6,zero,d7d4 <__subsf3+0xd8>
    d75c:	38006a1e 	bne	r7,zero,d908 <__subsf3+0x20c>
    d760:	188001cc 	andi	r2,r3,7
    d764:	10000426 	beq	r2,zero,d778 <__subsf3+0x7c>
    d768:	188003cc 	andi	r2,r3,15
    d76c:	01000104 	movi	r4,4
    d770:	11000126 	beq	r2,r4,d778 <__subsf3+0x7c>
    d774:	1907883a 	add	r3,r3,r4
    d778:	1881002c 	andhi	r2,r3,1024
    d77c:	10003926 	beq	r2,zero,d864 <__subsf3+0x168>
    d780:	84000044 	addi	r16,r16,1
    d784:	00803fc4 	movi	r2,255
    d788:	80807526 	beq	r16,r2,d960 <__subsf3+0x264>
    d78c:	180691ba 	slli	r3,r3,6
    d790:	8880004c 	andi	r2,r17,1
    d794:	180ad27a 	srli	r5,r3,9
    d798:	84003fcc 	andi	r16,r16,255
    d79c:	800695fa 	slli	r3,r16,23
    d7a0:	10803fcc 	andi	r2,r2,255
    d7a4:	01002034 	movhi	r4,128
    d7a8:	213fffc4 	addi	r4,r4,-1
    d7ac:	100497fa 	slli	r2,r2,31
    d7b0:	2920703a 	and	r16,r5,r4
    d7b4:	80e0b03a 	or	r16,r16,r3
    d7b8:	8084b03a 	or	r2,r16,r2
    d7bc:	dfc00317 	ldw	ra,12(sp)
    d7c0:	dc800217 	ldw	r18,8(sp)
    d7c4:	dc400117 	ldw	r17,4(sp)
    d7c8:	dc000017 	ldw	r16,0(sp)
    d7cc:	dec00404 	addi	sp,sp,16
    d7d0:	f800283a 	ret
    d7d4:	00803fc4 	movi	r2,255
    d7d8:	80bfe126 	beq	r16,r2,d760 <__alt_data_end+0xfc00d760>
    d7dc:	39c10034 	orhi	r7,r7,1024
    d7e0:	008006c4 	movi	r2,27
    d7e4:	11007416 	blt	r2,r4,d9b8 <__subsf3+0x2bc>
    d7e8:	00800804 	movi	r2,32
    d7ec:	1105c83a 	sub	r2,r2,r4
    d7f0:	3884983a 	sll	r2,r7,r2
    d7f4:	390ed83a 	srl	r7,r7,r4
    d7f8:	1008c03a 	cmpne	r4,r2,zero
    d7fc:	390eb03a 	or	r7,r7,r4
    d800:	19c7c83a 	sub	r3,r3,r7
    d804:	1881002c 	andhi	r2,r3,1024
    d808:	10001426 	beq	r2,zero,d85c <__subsf3+0x160>
    d80c:	04810034 	movhi	r18,1024
    d810:	94bfffc4 	addi	r18,r18,-1
    d814:	1ca4703a 	and	r18,r3,r18
    d818:	9009883a 	mov	r4,r18
    d81c:	000e2600 	call	e260 <__clzsi2>
    d820:	10bffec4 	addi	r2,r2,-5
    d824:	90a4983a 	sll	r18,r18,r2
    d828:	14005116 	blt	r2,r16,d970 <__subsf3+0x274>
    d82c:	1405c83a 	sub	r2,r2,r16
    d830:	10c00044 	addi	r3,r2,1
    d834:	00800804 	movi	r2,32
    d838:	10c5c83a 	sub	r2,r2,r3
    d83c:	9084983a 	sll	r2,r18,r2
    d840:	90e4d83a 	srl	r18,r18,r3
    d844:	0021883a 	mov	r16,zero
    d848:	1006c03a 	cmpne	r3,r2,zero
    d84c:	90c6b03a 	or	r3,r18,r3
    d850:	003fc306 	br	d760 <__alt_data_end+0xfc00d760>
    d854:	2000e026 	beq	r4,zero,dbd8 <__subsf3+0x4dc>
    d858:	2007883a 	mov	r3,r4
    d85c:	188001cc 	andi	r2,r3,7
    d860:	103fc11e 	bne	r2,zero,d768 <__alt_data_end+0xfc00d768>
    d864:	180ad0fa 	srli	r5,r3,3
    d868:	00c03fc4 	movi	r3,255
    d86c:	8880004c 	andi	r2,r17,1
    d870:	80c0031e 	bne	r16,r3,d880 <__subsf3+0x184>
    d874:	28006d26 	beq	r5,zero,da2c <__subsf3+0x330>
    d878:	29401034 	orhi	r5,r5,64
    d87c:	043fffc4 	movi	r16,-1
    d880:	00c02034 	movhi	r3,128
    d884:	18ffffc4 	addi	r3,r3,-1
    d888:	28ca703a 	and	r5,r5,r3
    d88c:	003fc206 	br	d798 <__alt_data_end+0xfc00d798>
    d890:	01003c0e 	bge	zero,r4,d984 <__subsf3+0x288>
    d894:	30002126 	beq	r6,zero,d91c <__subsf3+0x220>
    d898:	01403fc4 	movi	r5,255
    d89c:	817fb026 	beq	r16,r5,d760 <__alt_data_end+0xfc00d760>
    d8a0:	39c10034 	orhi	r7,r7,1024
    d8a4:	014006c4 	movi	r5,27
    d8a8:	29007416 	blt	r5,r4,da7c <__subsf3+0x380>
    d8ac:	01400804 	movi	r5,32
    d8b0:	290bc83a 	sub	r5,r5,r4
    d8b4:	394a983a 	sll	r5,r7,r5
    d8b8:	390ed83a 	srl	r7,r7,r4
    d8bc:	2808c03a 	cmpne	r4,r5,zero
    d8c0:	390eb03a 	or	r7,r7,r4
    d8c4:	19c7883a 	add	r3,r3,r7
    d8c8:	1901002c 	andhi	r4,r3,1024
    d8cc:	20003826 	beq	r4,zero,d9b0 <__subsf3+0x2b4>
    d8d0:	84000044 	addi	r16,r16,1
    d8d4:	01003fc4 	movi	r4,255
    d8d8:	81005426 	beq	r16,r4,da2c <__subsf3+0x330>
    d8dc:	1023883a 	mov	r17,r2
    d8e0:	00bf0034 	movhi	r2,64512
    d8e4:	10bfffc4 	addi	r2,r2,-1
    d8e8:	1900004c 	andi	r4,r3,1
    d8ec:	1886703a 	and	r3,r3,r2
    d8f0:	1806d07a 	srli	r3,r3,1
    d8f4:	1906b03a 	or	r3,r3,r4
    d8f8:	003f9906 	br	d760 <__alt_data_end+0xfc00d760>
    d8fc:	383f9226 	beq	r7,zero,d748 <__alt_data_end+0xfc00d748>
    d900:	10803fcc 	andi	r2,r2,255
    d904:	003f9106 	br	d74c <__alt_data_end+0xfc00d74c>
    d908:	213fffc4 	addi	r4,r4,-1
    d90c:	203fbc26 	beq	r4,zero,d800 <__alt_data_end+0xfc00d800>
    d910:	00803fc4 	movi	r2,255
    d914:	80bfb21e 	bne	r16,r2,d7e0 <__alt_data_end+0xfc00d7e0>
    d918:	003f9106 	br	d760 <__alt_data_end+0xfc00d760>
    d91c:	383f9026 	beq	r7,zero,d760 <__alt_data_end+0xfc00d760>
    d920:	213fffc4 	addi	r4,r4,-1
    d924:	203fe726 	beq	r4,zero,d8c4 <__alt_data_end+0xfc00d8c4>
    d928:	01403fc4 	movi	r5,255
    d92c:	817fdd1e 	bne	r16,r5,d8a4 <__alt_data_end+0xfc00d8a4>
    d930:	003f8b06 	br	d760 <__alt_data_end+0xfc00d760>
    d934:	2000221e 	bne	r4,zero,d9c0 <__subsf3+0x2c4>
    d938:	81000044 	addi	r4,r16,1
    d93c:	21003fcc 	andi	r4,r4,255
    d940:	01400044 	movi	r5,1
    d944:	2900470e 	bge	r5,r4,da64 <__subsf3+0x368>
    d948:	19e5c83a 	sub	r18,r3,r7
    d94c:	9141002c 	andhi	r5,r18,1024
    d950:	28002d26 	beq	r5,zero,da08 <__subsf3+0x30c>
    d954:	38e5c83a 	sub	r18,r7,r3
    d958:	1023883a 	mov	r17,r2
    d95c:	003fae06 	br	d818 <__alt_data_end+0xfc00d818>
    d960:	8880004c 	andi	r2,r17,1
    d964:	043fffc4 	movi	r16,-1
    d968:	000b883a 	mov	r5,zero
    d96c:	003f8a06 	br	d798 <__alt_data_end+0xfc00d798>
    d970:	00ff0034 	movhi	r3,64512
    d974:	18ffffc4 	addi	r3,r3,-1
    d978:	80a1c83a 	sub	r16,r16,r2
    d97c:	90c6703a 	and	r3,r18,r3
    d980:	003f7706 	br	d760 <__alt_data_end+0xfc00d760>
    d984:	2000431e 	bne	r4,zero,da94 <__subsf3+0x398>
    d988:	81000044 	addi	r4,r16,1
    d98c:	21803fcc 	andi	r6,r4,255
    d990:	01400044 	movi	r5,1
    d994:	2980280e 	bge	r5,r6,da38 <__subsf3+0x33c>
    d998:	01403fc4 	movi	r5,255
    d99c:	21402326 	beq	r4,r5,da2c <__subsf3+0x330>
    d9a0:	19c7883a 	add	r3,r3,r7
    d9a4:	1806d07a 	srli	r3,r3,1
    d9a8:	2021883a 	mov	r16,r4
    d9ac:	003f6c06 	br	d760 <__alt_data_end+0xfc00d760>
    d9b0:	1023883a 	mov	r17,r2
    d9b4:	003fa906 	br	d85c <__alt_data_end+0xfc00d85c>
    d9b8:	01c00044 	movi	r7,1
    d9bc:	003f9006 	br	d800 <__alt_data_end+0xfc00d800>
    d9c0:	8000151e 	bne	r16,zero,da18 <__subsf3+0x31c>
    d9c4:	18002f26 	beq	r3,zero,da84 <__subsf3+0x388>
    d9c8:	0108303a 	nor	r4,zero,r4
    d9cc:	20000a26 	beq	r4,zero,d9f8 <__subsf3+0x2fc>
    d9d0:	01403fc4 	movi	r5,255
    d9d4:	31402b26 	beq	r6,r5,da84 <__subsf3+0x388>
    d9d8:	014006c4 	movi	r5,27
    d9dc:	29006e16 	blt	r5,r4,db98 <__subsf3+0x49c>
    d9e0:	01400804 	movi	r5,32
    d9e4:	290bc83a 	sub	r5,r5,r4
    d9e8:	194a983a 	sll	r5,r3,r5
    d9ec:	1908d83a 	srl	r4,r3,r4
    d9f0:	2806c03a 	cmpne	r3,r5,zero
    d9f4:	20c6b03a 	or	r3,r4,r3
    d9f8:	38c7c83a 	sub	r3,r7,r3
    d9fc:	3021883a 	mov	r16,r6
    da00:	1023883a 	mov	r17,r2
    da04:	003f7f06 	br	d804 <__alt_data_end+0xfc00d804>
    da08:	903f831e 	bne	r18,zero,d818 <__alt_data_end+0xfc00d818>
    da0c:	0005883a 	mov	r2,zero
    da10:	0021883a 	mov	r16,zero
    da14:	003f9a06 	br	d880 <__alt_data_end+0xfc00d880>
    da18:	01403fc4 	movi	r5,255
    da1c:	31401926 	beq	r6,r5,da84 <__subsf3+0x388>
    da20:	0109c83a 	sub	r4,zero,r4
    da24:	18c10034 	orhi	r3,r3,1024
    da28:	003feb06 	br	d9d8 <__alt_data_end+0xfc00d9d8>
    da2c:	043fffc4 	movi	r16,-1
    da30:	000b883a 	mov	r5,zero
    da34:	003f5806 	br	d798 <__alt_data_end+0xfc00d798>
    da38:	8000481e 	bne	r16,zero,db5c <__subsf3+0x460>
    da3c:	18006226 	beq	r3,zero,dbc8 <__subsf3+0x4cc>
    da40:	383f4726 	beq	r7,zero,d760 <__alt_data_end+0xfc00d760>
    da44:	19c7883a 	add	r3,r3,r7
    da48:	1881002c 	andhi	r2,r3,1024
    da4c:	103f8326 	beq	r2,zero,d85c <__alt_data_end+0xfc00d85c>
    da50:	00bf0034 	movhi	r2,64512
    da54:	10bfffc4 	addi	r2,r2,-1
    da58:	2821883a 	mov	r16,r5
    da5c:	1886703a 	and	r3,r3,r2
    da60:	003f3f06 	br	d760 <__alt_data_end+0xfc00d760>
    da64:	80001c1e 	bne	r16,zero,dad8 <__subsf3+0x3dc>
    da68:	1800261e 	bne	r3,zero,db04 <__subsf3+0x408>
    da6c:	38004c26 	beq	r7,zero,dba0 <__subsf3+0x4a4>
    da70:	3807883a 	mov	r3,r7
    da74:	1023883a 	mov	r17,r2
    da78:	003f3906 	br	d760 <__alt_data_end+0xfc00d760>
    da7c:	01c00044 	movi	r7,1
    da80:	003f9006 	br	d8c4 <__alt_data_end+0xfc00d8c4>
    da84:	3807883a 	mov	r3,r7
    da88:	3021883a 	mov	r16,r6
    da8c:	1023883a 	mov	r17,r2
    da90:	003f3306 	br	d760 <__alt_data_end+0xfc00d760>
    da94:	8000161e 	bne	r16,zero,daf0 <__subsf3+0x3f4>
    da98:	18002d26 	beq	r3,zero,db50 <__subsf3+0x454>
    da9c:	0108303a 	nor	r4,zero,r4
    daa0:	20000a26 	beq	r4,zero,dacc <__subsf3+0x3d0>
    daa4:	01403fc4 	movi	r5,255
    daa8:	31402926 	beq	r6,r5,db50 <__subsf3+0x454>
    daac:	014006c4 	movi	r5,27
    dab0:	29004716 	blt	r5,r4,dbd0 <__subsf3+0x4d4>
    dab4:	01400804 	movi	r5,32
    dab8:	290bc83a 	sub	r5,r5,r4
    dabc:	194a983a 	sll	r5,r3,r5
    dac0:	1908d83a 	srl	r4,r3,r4
    dac4:	2806c03a 	cmpne	r3,r5,zero
    dac8:	20c6b03a 	or	r3,r4,r3
    dacc:	19c7883a 	add	r3,r3,r7
    dad0:	3021883a 	mov	r16,r6
    dad4:	003f7c06 	br	d8c8 <__alt_data_end+0xfc00d8c8>
    dad8:	1800111e 	bne	r3,zero,db20 <__subsf3+0x424>
    dadc:	38003326 	beq	r7,zero,dbac <__subsf3+0x4b0>
    dae0:	3807883a 	mov	r3,r7
    dae4:	1023883a 	mov	r17,r2
    dae8:	04003fc4 	movi	r16,255
    daec:	003f1c06 	br	d760 <__alt_data_end+0xfc00d760>
    daf0:	01403fc4 	movi	r5,255
    daf4:	31401626 	beq	r6,r5,db50 <__subsf3+0x454>
    daf8:	0109c83a 	sub	r4,zero,r4
    dafc:	18c10034 	orhi	r3,r3,1024
    db00:	003fea06 	br	daac <__alt_data_end+0xfc00daac>
    db04:	383f1626 	beq	r7,zero,d760 <__alt_data_end+0xfc00d760>
    db08:	19c9c83a 	sub	r4,r3,r7
    db0c:	2141002c 	andhi	r5,r4,1024
    db10:	283f5026 	beq	r5,zero,d854 <__alt_data_end+0xfc00d854>
    db14:	38c7c83a 	sub	r3,r7,r3
    db18:	1023883a 	mov	r17,r2
    db1c:	003f1006 	br	d760 <__alt_data_end+0xfc00d760>
    db20:	38001b26 	beq	r7,zero,db90 <__subsf3+0x494>
    db24:	1806d0fa 	srli	r3,r3,3
    db28:	1900102c 	andhi	r4,r3,64
    db2c:	20000526 	beq	r4,zero,db44 <__subsf3+0x448>
    db30:	380ed0fa 	srli	r7,r7,3
    db34:	3900102c 	andhi	r4,r7,64
    db38:	2000021e 	bne	r4,zero,db44 <__subsf3+0x448>
    db3c:	3807883a 	mov	r3,r7
    db40:	1023883a 	mov	r17,r2
    db44:	180690fa 	slli	r3,r3,3
    db48:	04003fc4 	movi	r16,255
    db4c:	003f0406 	br	d760 <__alt_data_end+0xfc00d760>
    db50:	3807883a 	mov	r3,r7
    db54:	3021883a 	mov	r16,r6
    db58:	003f0106 	br	d760 <__alt_data_end+0xfc00d760>
    db5c:	18001726 	beq	r3,zero,dbbc <__subsf3+0x4c0>
    db60:	38000b26 	beq	r7,zero,db90 <__subsf3+0x494>
    db64:	1806d0fa 	srli	r3,r3,3
    db68:	1900102c 	andhi	r4,r3,64
    db6c:	20000426 	beq	r4,zero,db80 <__subsf3+0x484>
    db70:	380ed0fa 	srli	r7,r7,3
    db74:	3900102c 	andhi	r4,r7,64
    db78:	2000011e 	bne	r4,zero,db80 <__subsf3+0x484>
    db7c:	3807883a 	mov	r3,r7
    db80:	180690fa 	slli	r3,r3,3
    db84:	1023883a 	mov	r17,r2
    db88:	04003fc4 	movi	r16,255
    db8c:	003ef406 	br	d760 <__alt_data_end+0xfc00d760>
    db90:	04003fc4 	movi	r16,255
    db94:	003ef206 	br	d760 <__alt_data_end+0xfc00d760>
    db98:	00c00044 	movi	r3,1
    db9c:	003f9606 	br	d9f8 <__alt_data_end+0xfc00d9f8>
    dba0:	000b883a 	mov	r5,zero
    dba4:	0005883a 	mov	r2,zero
    dba8:	003f3506 	br	d880 <__alt_data_end+0xfc00d880>
    dbac:	01402034 	movhi	r5,128
    dbb0:	297fffc4 	addi	r5,r5,-1
    dbb4:	0005883a 	mov	r2,zero
    dbb8:	003f2f06 	br	d878 <__alt_data_end+0xfc00d878>
    dbbc:	3807883a 	mov	r3,r7
    dbc0:	04003fc4 	movi	r16,255
    dbc4:	003ee606 	br	d760 <__alt_data_end+0xfc00d760>
    dbc8:	3807883a 	mov	r3,r7
    dbcc:	003ee406 	br	d760 <__alt_data_end+0xfc00d760>
    dbd0:	00c00044 	movi	r3,1
    dbd4:	003fbd06 	br	dacc <__alt_data_end+0xfc00dacc>
    dbd8:	0005883a 	mov	r2,zero
    dbdc:	003f2806 	br	d880 <__alt_data_end+0xfc00d880>

0000dbe0 <__fixsfsi>:
    dbe0:	200ad5fa 	srli	r5,r4,23
    dbe4:	00c02034 	movhi	r3,128
    dbe8:	18ffffc4 	addi	r3,r3,-1
    dbec:	29403fcc 	andi	r5,r5,255
    dbf0:	00801f84 	movi	r2,126
    dbf4:	1906703a 	and	r3,r3,r4
    dbf8:	2008d7fa 	srli	r4,r4,31
    dbfc:	11400e0e 	bge	r2,r5,dc38 <__fixsfsi+0x58>
    dc00:	00802744 	movi	r2,157
    dc04:	11400816 	blt	r2,r5,dc28 <__fixsfsi+0x48>
    dc08:	00802544 	movi	r2,149
    dc0c:	18c02034 	orhi	r3,r3,128
    dc10:	11400b0e 	bge	r2,r5,dc40 <__fixsfsi+0x60>
    dc14:	28bfda84 	addi	r2,r5,-150
    dc18:	1884983a 	sll	r2,r3,r2
    dc1c:	20000726 	beq	r4,zero,dc3c <__fixsfsi+0x5c>
    dc20:	0085c83a 	sub	r2,zero,r2
    dc24:	f800283a 	ret
    dc28:	00a00034 	movhi	r2,32768
    dc2c:	10bfffc4 	addi	r2,r2,-1
    dc30:	2085883a 	add	r2,r4,r2
    dc34:	f800283a 	ret
    dc38:	0005883a 	mov	r2,zero
    dc3c:	f800283a 	ret
    dc40:	00802584 	movi	r2,150
    dc44:	1145c83a 	sub	r2,r2,r5
    dc48:	1884d83a 	srl	r2,r3,r2
    dc4c:	003ff306 	br	dc1c <__alt_data_end+0xfc00dc1c>

0000dc50 <__floatunsisf>:
    dc50:	defffe04 	addi	sp,sp,-8
    dc54:	dfc00115 	stw	ra,4(sp)
    dc58:	dc000015 	stw	r16,0(sp)
    dc5c:	20002c26 	beq	r4,zero,dd10 <__floatunsisf+0xc0>
    dc60:	2021883a 	mov	r16,r4
    dc64:	000e2600 	call	e260 <__clzsi2>
    dc68:	00c02784 	movi	r3,158
    dc6c:	1887c83a 	sub	r3,r3,r2
    dc70:	01002584 	movi	r4,150
    dc74:	20c00f16 	blt	r4,r3,dcb4 <__floatunsisf+0x64>
    dc78:	20c9c83a 	sub	r4,r4,r3
    dc7c:	8108983a 	sll	r4,r16,r4
    dc80:	00802034 	movhi	r2,128
    dc84:	10bfffc4 	addi	r2,r2,-1
    dc88:	2088703a 	and	r4,r4,r2
    dc8c:	18803fcc 	andi	r2,r3,255
    dc90:	100695fa 	slli	r3,r2,23
    dc94:	00802034 	movhi	r2,128
    dc98:	10bfffc4 	addi	r2,r2,-1
    dc9c:	2084703a 	and	r2,r4,r2
    dca0:	10c4b03a 	or	r2,r2,r3
    dca4:	dfc00117 	ldw	ra,4(sp)
    dca8:	dc000017 	ldw	r16,0(sp)
    dcac:	dec00204 	addi	sp,sp,8
    dcb0:	f800283a 	ret
    dcb4:	01002644 	movi	r4,153
    dcb8:	20c01816 	blt	r4,r3,dd1c <__floatunsisf+0xcc>
    dcbc:	20c9c83a 	sub	r4,r4,r3
    dcc0:	8108983a 	sll	r4,r16,r4
    dcc4:	017f0034 	movhi	r5,64512
    dcc8:	297fffc4 	addi	r5,r5,-1
    dccc:	218001cc 	andi	r6,r4,7
    dcd0:	214a703a 	and	r5,r4,r5
    dcd4:	30000426 	beq	r6,zero,dce8 <__floatunsisf+0x98>
    dcd8:	210003cc 	andi	r4,r4,15
    dcdc:	01800104 	movi	r6,4
    dce0:	21800126 	beq	r4,r6,dce8 <__floatunsisf+0x98>
    dce4:	298b883a 	add	r5,r5,r6
    dce8:	2901002c 	andhi	r4,r5,1024
    dcec:	20000526 	beq	r4,zero,dd04 <__floatunsisf+0xb4>
    dcf0:	00c027c4 	movi	r3,159
    dcf4:	1887c83a 	sub	r3,r3,r2
    dcf8:	00bf0034 	movhi	r2,64512
    dcfc:	10bfffc4 	addi	r2,r2,-1
    dd00:	288a703a 	and	r5,r5,r2
    dd04:	280891ba 	slli	r4,r5,6
    dd08:	2008d27a 	srli	r4,r4,9
    dd0c:	003fdf06 	br	dc8c <__alt_data_end+0xfc00dc8c>
    dd10:	0007883a 	mov	r3,zero
    dd14:	0009883a 	mov	r4,zero
    dd18:	003fdc06 	br	dc8c <__alt_data_end+0xfc00dc8c>
    dd1c:	01402e44 	movi	r5,185
    dd20:	28cbc83a 	sub	r5,r5,r3
    dd24:	01000144 	movi	r4,5
    dd28:	2089c83a 	sub	r4,r4,r2
    dd2c:	814a983a 	sll	r5,r16,r5
    dd30:	8108d83a 	srl	r4,r16,r4
    dd34:	2820c03a 	cmpne	r16,r5,zero
    dd38:	2408b03a 	or	r4,r4,r16
    dd3c:	003fe106 	br	dcc4 <__alt_data_end+0xfc00dcc4>

0000dd40 <_Unwind_ForcedUnwind_Phase2>:
    dd40:	defff404 	addi	sp,sp,-48
    dd44:	dd800915 	stw	r22,36(sp)
    dd48:	058000f4 	movhi	r22,3
    dd4c:	ddc00a15 	stw	r23,40(sp)
    dd50:	dd400815 	stw	r21,32(sp)
    dd54:	dd000715 	stw	r20,28(sp)
    dd58:	dcc00615 	stw	r19,24(sp)
    dd5c:	dc400415 	stw	r17,16(sp)
    dd60:	dc000315 	stw	r16,12(sp)
    dd64:	dfc00b15 	stw	ra,44(sp)
    dd68:	dc800515 	stw	r18,20(sp)
    dd6c:	2021883a 	mov	r16,r4
    dd70:	2823883a 	mov	r17,r5
    dd74:	24c00317 	ldw	r19,12(r4)
    dd78:	25000417 	ldw	r20,16(r4)
    dd7c:	28c00017 	ldw	r3,0(r5)
    dd80:	b583dd04 	addi	r22,r22,3956
    dd84:	054001c4 	movi	r21,7
    dd88:	05c00204 	movi	r23,8
    dd8c:	00001606 	br	dde8 <_Unwind_ForcedUnwind_Phase2+0xa8>
    dd90:	81800017 	ldw	r6,0(r16)
    dd94:	81c00117 	ldw	r7,4(r16)
    dd98:	1c800617 	ldw	r18,24(r3)
    dd9c:	dd000215 	stw	r20,8(sp)
    dda0:	dc400115 	stw	r17,4(sp)
    dda4:	dc000015 	stw	r16,0(sp)
    dda8:	983ee83a 	callr	r19
    ddac:	01400284 	movi	r5,10
    ddb0:	01000044 	movi	r4,1
    ddb4:	1000241e 	bne	r2,zero,de48 <_Unwind_ForcedUnwind_Phase2+0x108>
    ddb8:	90000726 	beq	r18,zero,ddd8 <_Unwind_ForcedUnwind_Phase2+0x98>
    ddbc:	81800017 	ldw	r6,0(r16)
    ddc0:	81c00117 	ldw	r7,4(r16)
    ddc4:	dc400115 	stw	r17,4(sp)
    ddc8:	dc000015 	stw	r16,0(sp)
    ddcc:	903ee83a 	callr	r18
    ddd0:	15401f26 	beq	r2,r21,de50 <_Unwind_ForcedUnwind_Phase2+0x110>
    ddd4:	15c01c1e 	bne	r2,r23,de48 <_Unwind_ForcedUnwind_Phase2+0x108>
    ddd8:	88800017 	ldw	r2,0(r17)
    dddc:	10c00017 	ldw	r3,0(r2)
    dde0:	b0c00015 	stw	r3,0(r22)
    dde4:	88c00015 	stw	r3,0(r17)
    dde8:	01400284 	movi	r5,10
    ddec:	01000044 	movi	r4,1
    ddf0:	183fe71e 	bne	r3,zero,dd90 <__alt_data_end+0xfc00dd90>
    ddf4:	81800017 	ldw	r6,0(r16)
    ddf8:	81c00117 	ldw	r7,4(r16)
    ddfc:	01400684 	movi	r5,26
    de00:	dd000215 	stw	r20,8(sp)
    de04:	dc400115 	stw	r17,4(sp)
    de08:	dc000015 	stw	r16,0(sp)
    de0c:	01000044 	movi	r4,1
    de10:	983ee83a 	callr	r19
    de14:	10000c1e 	bne	r2,zero,de48 <_Unwind_ForcedUnwind_Phase2+0x108>
    de18:	00800144 	movi	r2,5
    de1c:	dfc00b17 	ldw	ra,44(sp)
    de20:	ddc00a17 	ldw	r23,40(sp)
    de24:	dd800917 	ldw	r22,36(sp)
    de28:	dd400817 	ldw	r21,32(sp)
    de2c:	dd000717 	ldw	r20,28(sp)
    de30:	dcc00617 	ldw	r19,24(sp)
    de34:	dc800517 	ldw	r18,20(sp)
    de38:	dc400417 	ldw	r17,16(sp)
    de3c:	dc000317 	ldw	r16,12(sp)
    de40:	dec00c04 	addi	sp,sp,48
    de44:	f800283a 	ret
    de48:	00800084 	movi	r2,2
    de4c:	003ff306 	br	de1c <__alt_data_end+0xfc00de1c>
    de50:	a805883a 	mov	r2,r21
    de54:	003ff106 	br	de1c <__alt_data_end+0xfc00de1c>

0000de58 <_Unwind_RaiseException_Phase2>:
    de58:	28c00017 	ldw	r3,0(r5)
    de5c:	defff804 	addi	sp,sp,-32
    de60:	dcc00515 	stw	r19,20(sp)
    de64:	dc800415 	stw	r18,16(sp)
    de68:	dc400315 	stw	r17,12(sp)
    de6c:	dc000215 	stw	r16,8(sp)
    de70:	dfc00715 	stw	ra,28(sp)
    de74:	dd000615 	stw	r20,24(sp)
    de78:	2823883a 	mov	r17,r5
    de7c:	2021883a 	mov	r16,r4
    de80:	048001c4 	movi	r18,7
    de84:	04c00204 	movi	r19,8
    de88:	18001326 	beq	r3,zero,ded8 <_Unwind_RaiseException_Phase2+0x80>
    de8c:	81000417 	ldw	r4,16(r16)
    de90:	1a000617 	ldw	r8,24(r3)
    de94:	19001926 	beq	r3,r4,defc <_Unwind_RaiseException_Phase2+0xa4>
    de98:	40000c26 	beq	r8,zero,decc <_Unwind_RaiseException_Phase2+0x74>
    de9c:	01400084 	movi	r5,2
    dea0:	0029883a 	mov	r20,zero
    dea4:	81800017 	ldw	r6,0(r16)
    dea8:	81c00117 	ldw	r7,4(r16)
    deac:	01000044 	movi	r4,1
    deb0:	dc400115 	stw	r17,4(sp)
    deb4:	dc000015 	stw	r16,0(sp)
    deb8:	403ee83a 	callr	r8
    debc:	14801326 	beq	r2,r18,df0c <_Unwind_RaiseException_Phase2+0xb4>
    dec0:	14c0051e 	bne	r2,r19,ded8 <_Unwind_RaiseException_Phase2+0x80>
    dec4:	a000131e 	bne	r20,zero,df14 <_Unwind_RaiseException_Phase2+0xbc>
    dec8:	88c00017 	ldw	r3,0(r17)
    decc:	18c00017 	ldw	r3,0(r3)
    ded0:	88c00015 	stw	r3,0(r17)
    ded4:	183fed1e 	bne	r3,zero,de8c <__alt_data_end+0xfc00de8c>
    ded8:	00800084 	movi	r2,2
    dedc:	dfc00717 	ldw	ra,28(sp)
    dee0:	dd000617 	ldw	r20,24(sp)
    dee4:	dcc00517 	ldw	r19,20(sp)
    dee8:	dc800417 	ldw	r18,16(sp)
    deec:	dc400317 	ldw	r17,12(sp)
    def0:	dc000217 	ldw	r16,8(sp)
    def4:	dec00804 	addi	sp,sp,32
    def8:	f800283a 	ret
    defc:	40000526 	beq	r8,zero,df14 <_Unwind_RaiseException_Phase2+0xbc>
    df00:	01400184 	movi	r5,6
    df04:	05000104 	movi	r20,4
    df08:	003fe606 	br	dea4 <__alt_data_end+0xfc00dea4>
    df0c:	9005883a 	mov	r2,r18
    df10:	003ff206 	br	dedc <__alt_data_end+0xfc00dedc>
    df14:	000e2c40 	call	e2c4 <abort>

0000df18 <uw_install_context.isra.1>:
    df18:	20c00017 	ldw	r3,0(r4)
    df1c:	deffff04 	addi	sp,sp,-4
    df20:	014000f4 	movhi	r5,3
    df24:	19000917 	ldw	r4,36(r3)
    df28:	df000015 	stw	fp,0(sp)
    df2c:	18800804 	addi	r2,r3,32
    df30:	d839883a 	mov	fp,sp
    df34:	2943dd04 	addi	r5,r5,3956
    df38:	28c00015 	stw	r3,0(r5)
    df3c:	17000017 	ldw	fp,0(r2)
    df40:	1ec00a17 	ldw	sp,40(r3)
    df44:	2000683a 	jmp	r4

0000df48 <_Unwind_SjLj_Register>:
    df48:	008000f4 	movhi	r2,3
    df4c:	1083dd04 	addi	r2,r2,3956
    df50:	10c00017 	ldw	r3,0(r2)
    df54:	11000015 	stw	r4,0(r2)
    df58:	20c00015 	stw	r3,0(r4)
    df5c:	f800283a 	ret

0000df60 <_Unwind_SjLj_Unregister>:
    df60:	20c00017 	ldw	r3,0(r4)
    df64:	008000f4 	movhi	r2,3
    df68:	1083dd04 	addi	r2,r2,3956
    df6c:	10c00015 	stw	r3,0(r2)
    df70:	f800283a 	ret

0000df74 <_Unwind_GetGR>:
    df74:	20800017 	ldw	r2,0(r4)
    df78:	29400084 	addi	r5,r5,2
    df7c:	294b883a 	add	r5,r5,r5
    df80:	294b883a 	add	r5,r5,r5
    df84:	114b883a 	add	r5,r2,r5
    df88:	28800017 	ldw	r2,0(r5)
    df8c:	f800283a 	ret

0000df90 <_Unwind_GetCFA>:
    df90:	20800017 	ldw	r2,0(r4)
    df94:	10000226 	beq	r2,zero,dfa0 <_Unwind_GetCFA+0x10>
    df98:	10800a17 	ldw	r2,40(r2)
    df9c:	f800283a 	ret
    dfa0:	0005883a 	mov	r2,zero
    dfa4:	f800283a 	ret

0000dfa8 <_Unwind_SetGR>:
    dfa8:	20800017 	ldw	r2,0(r4)
    dfac:	29400084 	addi	r5,r5,2
    dfb0:	294b883a 	add	r5,r5,r5
    dfb4:	294b883a 	add	r5,r5,r5
    dfb8:	114b883a 	add	r5,r2,r5
    dfbc:	29800015 	stw	r6,0(r5)
    dfc0:	f800283a 	ret

0000dfc4 <_Unwind_GetIP>:
    dfc4:	20800017 	ldw	r2,0(r4)
    dfc8:	10800117 	ldw	r2,4(r2)
    dfcc:	10800044 	addi	r2,r2,1
    dfd0:	f800283a 	ret

0000dfd4 <_Unwind_GetIPInfo>:
    dfd4:	20800017 	ldw	r2,0(r4)
    dfd8:	28000015 	stw	zero,0(r5)
    dfdc:	10000326 	beq	r2,zero,dfec <_Unwind_GetIPInfo+0x18>
    dfe0:	10800117 	ldw	r2,4(r2)
    dfe4:	10800044 	addi	r2,r2,1
    dfe8:	f800283a 	ret
    dfec:	0005883a 	mov	r2,zero
    dff0:	f800283a 	ret

0000dff4 <_Unwind_SetIP>:
    dff4:	20800017 	ldw	r2,0(r4)
    dff8:	297fffc4 	addi	r5,r5,-1
    dffc:	11400115 	stw	r5,4(r2)
    e000:	f800283a 	ret

0000e004 <_Unwind_GetLanguageSpecificData>:
    e004:	20800017 	ldw	r2,0(r4)
    e008:	10800717 	ldw	r2,28(r2)
    e00c:	f800283a 	ret

0000e010 <_Unwind_GetRegionStart>:
    e010:	0005883a 	mov	r2,zero
    e014:	f800283a 	ret

0000e018 <_Unwind_FindEnclosingFunction>:
    e018:	0005883a 	mov	r2,zero
    e01c:	f800283a 	ret

0000e020 <_Unwind_GetDataRelBase>:
    e020:	0005883a 	mov	r2,zero
    e024:	f800283a 	ret

0000e028 <_Unwind_GetTextRelBase>:
    e028:	0005883a 	mov	r2,zero
    e02c:	f800283a 	ret

0000e030 <_Unwind_SjLj_RaiseException>:
    e030:	008000f4 	movhi	r2,3
    e034:	defff804 	addi	sp,sp,-32
    e038:	1083dd04 	addi	r2,r2,3956
    e03c:	dc800515 	stw	r18,20(sp)
    e040:	14800017 	ldw	r18,0(r2)
    e044:	dfc00715 	stw	ra,28(sp)
    e048:	dcc00615 	stw	r19,24(sp)
    e04c:	dc400415 	stw	r17,16(sp)
    e050:	dc000315 	stw	r16,12(sp)
    e054:	dc800215 	stw	r18,8(sp)
    e058:	90001426 	beq	r18,zero,e0ac <_Unwind_SjLj_RaiseException+0x7c>
    e05c:	2021883a 	mov	r16,r4
    e060:	9005883a 	mov	r2,r18
    e064:	04400184 	movi	r17,6
    e068:	04c00204 	movi	r19,8
    e06c:	10800617 	ldw	r2,24(r2)
    e070:	10000a26 	beq	r2,zero,e09c <_Unwind_SjLj_RaiseException+0x6c>
    e074:	81800017 	ldw	r6,0(r16)
    e078:	81c00117 	ldw	r7,4(r16)
    e07c:	01400044 	movi	r5,1
    e080:	d8c00204 	addi	r3,sp,8
    e084:	d8c00115 	stw	r3,4(sp)
    e088:	dc000015 	stw	r16,0(sp)
    e08c:	2809883a 	mov	r4,r5
    e090:	103ee83a 	callr	r2
    e094:	14400d26 	beq	r2,r17,e0cc <_Unwind_SjLj_RaiseException+0x9c>
    e098:	14c0171e 	bne	r2,r19,e0f8 <_Unwind_SjLj_RaiseException+0xc8>
    e09c:	d8800217 	ldw	r2,8(sp)
    e0a0:	10800017 	ldw	r2,0(r2)
    e0a4:	d8800215 	stw	r2,8(sp)
    e0a8:	103ff01e 	bne	r2,zero,e06c <__alt_data_end+0xfc00e06c>
    e0ac:	00800144 	movi	r2,5
    e0b0:	dfc00717 	ldw	ra,28(sp)
    e0b4:	dcc00617 	ldw	r19,24(sp)
    e0b8:	dc800517 	ldw	r18,20(sp)
    e0bc:	dc400417 	ldw	r17,16(sp)
    e0c0:	dc000317 	ldw	r16,12(sp)
    e0c4:	dec00804 	addi	sp,sp,32
    e0c8:	f800283a 	ret
    e0cc:	d8800217 	ldw	r2,8(sp)
    e0d0:	80000315 	stw	zero,12(r16)
    e0d4:	d9400204 	addi	r5,sp,8
    e0d8:	80800415 	stw	r2,16(r16)
    e0dc:	8009883a 	mov	r4,r16
    e0e0:	dc800215 	stw	r18,8(sp)
    e0e4:	000de580 	call	de58 <_Unwind_RaiseException_Phase2>
    e0e8:	00c001c4 	movi	r3,7
    e0ec:	10fff01e 	bne	r2,r3,e0b0 <__alt_data_end+0xfc00e0b0>
    e0f0:	d9000204 	addi	r4,sp,8
    e0f4:	000df180 	call	df18 <uw_install_context.isra.1>
    e0f8:	008000c4 	movi	r2,3
    e0fc:	003fec06 	br	e0b0 <__alt_data_end+0xfc00e0b0>

0000e100 <_Unwind_SjLj_ForcedUnwind>:
    e100:	00c000f4 	movhi	r3,3
    e104:	18c3dd04 	addi	r3,r3,3956
    e108:	defffe04 	addi	sp,sp,-8
    e10c:	18c00017 	ldw	r3,0(r3)
    e110:	dfc00115 	stw	ra,4(sp)
    e114:	21400315 	stw	r5,12(r4)
    e118:	21800415 	stw	r6,16(r4)
    e11c:	d80b883a 	mov	r5,sp
    e120:	d8c00015 	stw	r3,0(sp)
    e124:	000dd400 	call	dd40 <_Unwind_ForcedUnwind_Phase2>
    e128:	00c001c4 	movi	r3,7
    e12c:	10c00326 	beq	r2,r3,e13c <_Unwind_SjLj_ForcedUnwind+0x3c>
    e130:	dfc00117 	ldw	ra,4(sp)
    e134:	dec00204 	addi	sp,sp,8
    e138:	f800283a 	ret
    e13c:	d809883a 	mov	r4,sp
    e140:	000df180 	call	df18 <uw_install_context.isra.1>

0000e144 <_Unwind_SjLj_Resume>:
    e144:	00c000f4 	movhi	r3,3
    e148:	18c3dd04 	addi	r3,r3,3956
    e14c:	18c00017 	ldw	r3,0(r3)
    e150:	20800317 	ldw	r2,12(r4)
    e154:	defffe04 	addi	sp,sp,-8
    e158:	dfc00115 	stw	ra,4(sp)
    e15c:	d8c00015 	stw	r3,0(sp)
    e160:	d80b883a 	mov	r5,sp
    e164:	1000041e 	bne	r2,zero,e178 <_Unwind_SjLj_Resume+0x34>
    e168:	000de580 	call	de58 <_Unwind_RaiseException_Phase2>
    e16c:	00c001c4 	movi	r3,7
    e170:	10c00326 	beq	r2,r3,e180 <_Unwind_SjLj_Resume+0x3c>
    e174:	000e2c40 	call	e2c4 <abort>
    e178:	000dd400 	call	dd40 <_Unwind_ForcedUnwind_Phase2>
    e17c:	003ffb06 	br	e16c <__alt_data_end+0xfc00e16c>
    e180:	d809883a 	mov	r4,sp
    e184:	000df180 	call	df18 <uw_install_context.isra.1>

0000e188 <_Unwind_SjLj_Resume_or_Rethrow>:
    e188:	20800317 	ldw	r2,12(r4)
    e18c:	defffe04 	addi	sp,sp,-8
    e190:	dfc00115 	stw	ra,4(sp)
    e194:	1000041e 	bne	r2,zero,e1a8 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    e198:	000e0300 	call	e030 <_Unwind_SjLj_RaiseException>
    e19c:	dfc00117 	ldw	ra,4(sp)
    e1a0:	dec00204 	addi	sp,sp,8
    e1a4:	f800283a 	ret
    e1a8:	008000f4 	movhi	r2,3
    e1ac:	1083dd04 	addi	r2,r2,3956
    e1b0:	10800017 	ldw	r2,0(r2)
    e1b4:	d80b883a 	mov	r5,sp
    e1b8:	d8800015 	stw	r2,0(sp)
    e1bc:	000dd400 	call	dd40 <_Unwind_ForcedUnwind_Phase2>
    e1c0:	00c001c4 	movi	r3,7
    e1c4:	10c00126 	beq	r2,r3,e1cc <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    e1c8:	000e2c40 	call	e2c4 <abort>
    e1cc:	d809883a 	mov	r4,sp
    e1d0:	000df180 	call	df18 <uw_install_context.isra.1>

0000e1d4 <_Unwind_DeleteException>:
    e1d4:	20800217 	ldw	r2,8(r4)
    e1d8:	10000326 	beq	r2,zero,e1e8 <_Unwind_DeleteException+0x14>
    e1dc:	200b883a 	mov	r5,r4
    e1e0:	01000044 	movi	r4,1
    e1e4:	1000683a 	jmp	r2
    e1e8:	f800283a 	ret

0000e1ec <_Unwind_Backtrace>:
    e1ec:	008000f4 	movhi	r2,3
    e1f0:	1083dd04 	addi	r2,r2,3956
    e1f4:	10800017 	ldw	r2,0(r2)
    e1f8:	defffc04 	addi	sp,sp,-16
    e1fc:	dc400215 	stw	r17,8(sp)
    e200:	dc000115 	stw	r16,4(sp)
    e204:	dfc00315 	stw	ra,12(sp)
    e208:	2023883a 	mov	r17,r4
    e20c:	2821883a 	mov	r16,r5
    e210:	d8800015 	stw	r2,0(sp)
    e214:	00000506 	br	e22c <_Unwind_Backtrace+0x40>
    e218:	883ee83a 	callr	r17
    e21c:	10000e1e 	bne	r2,zero,e258 <_Unwind_Backtrace+0x6c>
    e220:	d8800017 	ldw	r2,0(sp)
    e224:	10800017 	ldw	r2,0(r2)
    e228:	d8800015 	stw	r2,0(sp)
    e22c:	800b883a 	mov	r5,r16
    e230:	d809883a 	mov	r4,sp
    e234:	103ff81e 	bne	r2,zero,e218 <__alt_data_end+0xfc00e218>
    e238:	883ee83a 	callr	r17
    e23c:	1000061e 	bne	r2,zero,e258 <_Unwind_Backtrace+0x6c>
    e240:	00800144 	movi	r2,5
    e244:	dfc00317 	ldw	ra,12(sp)
    e248:	dc400217 	ldw	r17,8(sp)
    e24c:	dc000117 	ldw	r16,4(sp)
    e250:	dec00404 	addi	sp,sp,16
    e254:	f800283a 	ret
    e258:	008000c4 	movi	r2,3
    e25c:	003ff906 	br	e244 <__alt_data_end+0xfc00e244>

0000e260 <__clzsi2>:
    e260:	00bfffd4 	movui	r2,65535
    e264:	11000536 	bltu	r2,r4,e27c <__clzsi2+0x1c>
    e268:	00803fc4 	movi	r2,255
    e26c:	11000f36 	bltu	r2,r4,e2ac <__clzsi2+0x4c>
    e270:	00800804 	movi	r2,32
    e274:	0007883a 	mov	r3,zero
    e278:	00000506 	br	e290 <__clzsi2+0x30>
    e27c:	00804034 	movhi	r2,256
    e280:	10bfffc4 	addi	r2,r2,-1
    e284:	11000c2e 	bgeu	r2,r4,e2b8 <__clzsi2+0x58>
    e288:	00800204 	movi	r2,8
    e28c:	00c00604 	movi	r3,24
    e290:	20c8d83a 	srl	r4,r4,r3
    e294:	00c000f4 	movhi	r3,3
    e298:	18ea0604 	addi	r3,r3,-22504
    e29c:	1909883a 	add	r4,r3,r4
    e2a0:	20c00003 	ldbu	r3,0(r4)
    e2a4:	10c5c83a 	sub	r2,r2,r3
    e2a8:	f800283a 	ret
    e2ac:	00800604 	movi	r2,24
    e2b0:	00c00204 	movi	r3,8
    e2b4:	003ff606 	br	e290 <__alt_data_end+0xfc00e290>
    e2b8:	00800404 	movi	r2,16
    e2bc:	1007883a 	mov	r3,r2
    e2c0:	003ff306 	br	e290 <__alt_data_end+0xfc00e290>

0000e2c4 <abort>:
    e2c4:	deffff04 	addi	sp,sp,-4
    e2c8:	01000184 	movi	r4,6
    e2cc:	dfc00015 	stw	ra,0(sp)
    e2d0:	000f1d40 	call	f1d4 <raise>
    e2d4:	01000044 	movi	r4,1
    e2d8:	001ef140 	call	1ef14 <_exit>

0000e2dc <clock>:
    e2dc:	008000f4 	movhi	r2,3
    e2e0:	10b74b04 	addi	r2,r2,-8916
    e2e4:	11000017 	ldw	r4,0(r2)
    e2e8:	defffb04 	addi	sp,sp,-20
    e2ec:	d80b883a 	mov	r5,sp
    e2f0:	dfc00415 	stw	ra,16(sp)
    e2f4:	00117780 	call	11778 <_times_r>
    e2f8:	00ffffc4 	movi	r3,-1
    e2fc:	10c00726 	beq	r2,r3,e31c <clock+0x40>
    e300:	d8c00017 	ldw	r3,0(sp)
    e304:	d8800117 	ldw	r2,4(sp)
    e308:	1885883a 	add	r2,r3,r2
    e30c:	d8c00217 	ldw	r3,8(sp)
    e310:	10c7883a 	add	r3,r2,r3
    e314:	d8800317 	ldw	r2,12(sp)
    e318:	1885883a 	add	r2,r3,r2
    e31c:	dfc00417 	ldw	ra,16(sp)
    e320:	dec00504 	addi	sp,sp,20
    e324:	f800283a 	ret

0000e328 <malloc>:
    e328:	008000f4 	movhi	r2,3
    e32c:	10b74b04 	addi	r2,r2,-8916
    e330:	200b883a 	mov	r5,r4
    e334:	11000017 	ldw	r4,0(r2)
    e338:	000e3501 	jmpi	e350 <_malloc_r>

0000e33c <free>:
    e33c:	008000f4 	movhi	r2,3
    e340:	10b74b04 	addi	r2,r2,-8916
    e344:	200b883a 	mov	r5,r4
    e348:	11000017 	ldw	r4,0(r2)
    e34c:	0015cb41 	jmpi	15cb4 <_free_r>

0000e350 <_malloc_r>:
    e350:	defff504 	addi	sp,sp,-44
    e354:	dc800315 	stw	r18,12(sp)
    e358:	dfc00a15 	stw	ra,40(sp)
    e35c:	df000915 	stw	fp,36(sp)
    e360:	ddc00815 	stw	r23,32(sp)
    e364:	dd800715 	stw	r22,28(sp)
    e368:	dd400615 	stw	r21,24(sp)
    e36c:	dd000515 	stw	r20,20(sp)
    e370:	dcc00415 	stw	r19,16(sp)
    e374:	dc400215 	stw	r17,8(sp)
    e378:	dc000115 	stw	r16,4(sp)
    e37c:	288002c4 	addi	r2,r5,11
    e380:	00c00584 	movi	r3,22
    e384:	2025883a 	mov	r18,r4
    e388:	18807f2e 	bgeu	r3,r2,e588 <_malloc_r+0x238>
    e38c:	047ffe04 	movi	r17,-8
    e390:	1462703a 	and	r17,r2,r17
    e394:	8800a316 	blt	r17,zero,e624 <_malloc_r+0x2d4>
    e398:	8940a236 	bltu	r17,r5,e624 <_malloc_r+0x2d4>
    e39c:	001f5300 	call	1f530 <__malloc_lock>
    e3a0:	00807dc4 	movi	r2,503
    e3a4:	1441e92e 	bgeu	r2,r17,eb4c <_malloc_r+0x7fc>
    e3a8:	8804d27a 	srli	r2,r17,9
    e3ac:	1000a126 	beq	r2,zero,e634 <_malloc_r+0x2e4>
    e3b0:	00c00104 	movi	r3,4
    e3b4:	18811e36 	bltu	r3,r2,e830 <_malloc_r+0x4e0>
    e3b8:	8804d1ba 	srli	r2,r17,6
    e3bc:	12000e44 	addi	r8,r2,57
    e3c0:	11c00e04 	addi	r7,r2,56
    e3c4:	4209883a 	add	r4,r8,r8
    e3c8:	04c000f4 	movhi	r19,3
    e3cc:	2109883a 	add	r4,r4,r4
    e3d0:	9cebea04 	addi	r19,r19,-20568
    e3d4:	2109883a 	add	r4,r4,r4
    e3d8:	9909883a 	add	r4,r19,r4
    e3dc:	24000117 	ldw	r16,4(r4)
    e3e0:	213ffe04 	addi	r4,r4,-8
    e3e4:	24009726 	beq	r4,r16,e644 <_malloc_r+0x2f4>
    e3e8:	80800117 	ldw	r2,4(r16)
    e3ec:	01bfff04 	movi	r6,-4
    e3f0:	014003c4 	movi	r5,15
    e3f4:	1184703a 	and	r2,r2,r6
    e3f8:	1447c83a 	sub	r3,r2,r17
    e3fc:	28c00716 	blt	r5,r3,e41c <_malloc_r+0xcc>
    e400:	1800920e 	bge	r3,zero,e64c <_malloc_r+0x2fc>
    e404:	84000317 	ldw	r16,12(r16)
    e408:	24008e26 	beq	r4,r16,e644 <_malloc_r+0x2f4>
    e40c:	80800117 	ldw	r2,4(r16)
    e410:	1184703a 	and	r2,r2,r6
    e414:	1447c83a 	sub	r3,r2,r17
    e418:	28fff90e 	bge	r5,r3,e400 <__alt_data_end+0xfc00e400>
    e41c:	3809883a 	mov	r4,r7
    e420:	018000f4 	movhi	r6,3
    e424:	9c000417 	ldw	r16,16(r19)
    e428:	31abea04 	addi	r6,r6,-20568
    e42c:	32000204 	addi	r8,r6,8
    e430:	82013426 	beq	r16,r8,e904 <_malloc_r+0x5b4>
    e434:	80c00117 	ldw	r3,4(r16)
    e438:	00bfff04 	movi	r2,-4
    e43c:	188e703a 	and	r7,r3,r2
    e440:	3c45c83a 	sub	r2,r7,r17
    e444:	00c003c4 	movi	r3,15
    e448:	18811f16 	blt	r3,r2,e8c8 <_malloc_r+0x578>
    e44c:	32000515 	stw	r8,20(r6)
    e450:	32000415 	stw	r8,16(r6)
    e454:	10007f0e 	bge	r2,zero,e654 <_malloc_r+0x304>
    e458:	00807fc4 	movi	r2,511
    e45c:	11c0fd36 	bltu	r2,r7,e854 <_malloc_r+0x504>
    e460:	3806d0fa 	srli	r3,r7,3
    e464:	01c00044 	movi	r7,1
    e468:	30800117 	ldw	r2,4(r6)
    e46c:	19400044 	addi	r5,r3,1
    e470:	294b883a 	add	r5,r5,r5
    e474:	1807d0ba 	srai	r3,r3,2
    e478:	294b883a 	add	r5,r5,r5
    e47c:	294b883a 	add	r5,r5,r5
    e480:	298b883a 	add	r5,r5,r6
    e484:	38c6983a 	sll	r3,r7,r3
    e488:	29c00017 	ldw	r7,0(r5)
    e48c:	2a7ffe04 	addi	r9,r5,-8
    e490:	1886b03a 	or	r3,r3,r2
    e494:	82400315 	stw	r9,12(r16)
    e498:	81c00215 	stw	r7,8(r16)
    e49c:	30c00115 	stw	r3,4(r6)
    e4a0:	2c000015 	stw	r16,0(r5)
    e4a4:	3c000315 	stw	r16,12(r7)
    e4a8:	2005d0ba 	srai	r2,r4,2
    e4ac:	01400044 	movi	r5,1
    e4b0:	288a983a 	sll	r5,r5,r2
    e4b4:	19406f36 	bltu	r3,r5,e674 <_malloc_r+0x324>
    e4b8:	28c4703a 	and	r2,r5,r3
    e4bc:	10000a1e 	bne	r2,zero,e4e8 <_malloc_r+0x198>
    e4c0:	00bfff04 	movi	r2,-4
    e4c4:	294b883a 	add	r5,r5,r5
    e4c8:	2088703a 	and	r4,r4,r2
    e4cc:	28c4703a 	and	r2,r5,r3
    e4d0:	21000104 	addi	r4,r4,4
    e4d4:	1000041e 	bne	r2,zero,e4e8 <_malloc_r+0x198>
    e4d8:	294b883a 	add	r5,r5,r5
    e4dc:	28c4703a 	and	r2,r5,r3
    e4e0:	21000104 	addi	r4,r4,4
    e4e4:	103ffc26 	beq	r2,zero,e4d8 <__alt_data_end+0xfc00e4d8>
    e4e8:	02bfff04 	movi	r10,-4
    e4ec:	024003c4 	movi	r9,15
    e4f0:	21800044 	addi	r6,r4,1
    e4f4:	318d883a 	add	r6,r6,r6
    e4f8:	318d883a 	add	r6,r6,r6
    e4fc:	318d883a 	add	r6,r6,r6
    e500:	998d883a 	add	r6,r19,r6
    e504:	333ffe04 	addi	r12,r6,-8
    e508:	2017883a 	mov	r11,r4
    e50c:	31800104 	addi	r6,r6,4
    e510:	34000017 	ldw	r16,0(r6)
    e514:	31fffd04 	addi	r7,r6,-12
    e518:	81c0041e 	bne	r16,r7,e52c <_malloc_r+0x1dc>
    e51c:	0000fb06 	br	e90c <_malloc_r+0x5bc>
    e520:	1801030e 	bge	r3,zero,e930 <_malloc_r+0x5e0>
    e524:	84000317 	ldw	r16,12(r16)
    e528:	81c0f826 	beq	r16,r7,e90c <_malloc_r+0x5bc>
    e52c:	80800117 	ldw	r2,4(r16)
    e530:	1284703a 	and	r2,r2,r10
    e534:	1447c83a 	sub	r3,r2,r17
    e538:	48fff90e 	bge	r9,r3,e520 <__alt_data_end+0xfc00e520>
    e53c:	80800317 	ldw	r2,12(r16)
    e540:	81000217 	ldw	r4,8(r16)
    e544:	89400054 	ori	r5,r17,1
    e548:	81400115 	stw	r5,4(r16)
    e54c:	20800315 	stw	r2,12(r4)
    e550:	11000215 	stw	r4,8(r2)
    e554:	8463883a 	add	r17,r16,r17
    e558:	9c400515 	stw	r17,20(r19)
    e55c:	9c400415 	stw	r17,16(r19)
    e560:	18800054 	ori	r2,r3,1
    e564:	88800115 	stw	r2,4(r17)
    e568:	8a000315 	stw	r8,12(r17)
    e56c:	8a000215 	stw	r8,8(r17)
    e570:	88e3883a 	add	r17,r17,r3
    e574:	88c00015 	stw	r3,0(r17)
    e578:	9009883a 	mov	r4,r18
    e57c:	001f5540 	call	1f554 <__malloc_unlock>
    e580:	80800204 	addi	r2,r16,8
    e584:	00001b06 	br	e5f4 <_malloc_r+0x2a4>
    e588:	04400404 	movi	r17,16
    e58c:	89402536 	bltu	r17,r5,e624 <_malloc_r+0x2d4>
    e590:	001f5300 	call	1f530 <__malloc_lock>
    e594:	00800184 	movi	r2,6
    e598:	01000084 	movi	r4,2
    e59c:	04c000f4 	movhi	r19,3
    e5a0:	1085883a 	add	r2,r2,r2
    e5a4:	9cebea04 	addi	r19,r19,-20568
    e5a8:	1085883a 	add	r2,r2,r2
    e5ac:	9885883a 	add	r2,r19,r2
    e5b0:	14000117 	ldw	r16,4(r2)
    e5b4:	10fffe04 	addi	r3,r2,-8
    e5b8:	80c0d926 	beq	r16,r3,e920 <_malloc_r+0x5d0>
    e5bc:	80c00117 	ldw	r3,4(r16)
    e5c0:	81000317 	ldw	r4,12(r16)
    e5c4:	00bfff04 	movi	r2,-4
    e5c8:	1884703a 	and	r2,r3,r2
    e5cc:	81400217 	ldw	r5,8(r16)
    e5d0:	8085883a 	add	r2,r16,r2
    e5d4:	10c00117 	ldw	r3,4(r2)
    e5d8:	29000315 	stw	r4,12(r5)
    e5dc:	21400215 	stw	r5,8(r4)
    e5e0:	18c00054 	ori	r3,r3,1
    e5e4:	10c00115 	stw	r3,4(r2)
    e5e8:	9009883a 	mov	r4,r18
    e5ec:	001f5540 	call	1f554 <__malloc_unlock>
    e5f0:	80800204 	addi	r2,r16,8
    e5f4:	dfc00a17 	ldw	ra,40(sp)
    e5f8:	df000917 	ldw	fp,36(sp)
    e5fc:	ddc00817 	ldw	r23,32(sp)
    e600:	dd800717 	ldw	r22,28(sp)
    e604:	dd400617 	ldw	r21,24(sp)
    e608:	dd000517 	ldw	r20,20(sp)
    e60c:	dcc00417 	ldw	r19,16(sp)
    e610:	dc800317 	ldw	r18,12(sp)
    e614:	dc400217 	ldw	r17,8(sp)
    e618:	dc000117 	ldw	r16,4(sp)
    e61c:	dec00b04 	addi	sp,sp,44
    e620:	f800283a 	ret
    e624:	00800304 	movi	r2,12
    e628:	90800015 	stw	r2,0(r18)
    e62c:	0005883a 	mov	r2,zero
    e630:	003ff006 	br	e5f4 <__alt_data_end+0xfc00e5f4>
    e634:	01002004 	movi	r4,128
    e638:	02001004 	movi	r8,64
    e63c:	01c00fc4 	movi	r7,63
    e640:	003f6106 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    e644:	4009883a 	mov	r4,r8
    e648:	003f7506 	br	e420 <__alt_data_end+0xfc00e420>
    e64c:	81000317 	ldw	r4,12(r16)
    e650:	003fde06 	br	e5cc <__alt_data_end+0xfc00e5cc>
    e654:	81c5883a 	add	r2,r16,r7
    e658:	11400117 	ldw	r5,4(r2)
    e65c:	9009883a 	mov	r4,r18
    e660:	29400054 	ori	r5,r5,1
    e664:	11400115 	stw	r5,4(r2)
    e668:	001f5540 	call	1f554 <__malloc_unlock>
    e66c:	80800204 	addi	r2,r16,8
    e670:	003fe006 	br	e5f4 <__alt_data_end+0xfc00e5f4>
    e674:	9c000217 	ldw	r16,8(r19)
    e678:	00bfff04 	movi	r2,-4
    e67c:	85800117 	ldw	r22,4(r16)
    e680:	b0ac703a 	and	r22,r22,r2
    e684:	b4400336 	bltu	r22,r17,e694 <_malloc_r+0x344>
    e688:	b445c83a 	sub	r2,r22,r17
    e68c:	00c003c4 	movi	r3,15
    e690:	18805d16 	blt	r3,r2,e808 <_malloc_r+0x4b8>
    e694:	05c000f4 	movhi	r23,3
    e698:	008000f4 	movhi	r2,3
    e69c:	1083e004 	addi	r2,r2,3968
    e6a0:	bdf74c04 	addi	r23,r23,-8912
    e6a4:	15400017 	ldw	r21,0(r2)
    e6a8:	b8c00017 	ldw	r3,0(r23)
    e6ac:	00bfffc4 	movi	r2,-1
    e6b0:	858d883a 	add	r6,r16,r22
    e6b4:	8d6b883a 	add	r21,r17,r21
    e6b8:	1880ea26 	beq	r3,r2,ea64 <_malloc_r+0x714>
    e6bc:	ad4403c4 	addi	r21,r21,4111
    e6c0:	00bc0004 	movi	r2,-4096
    e6c4:	a8aa703a 	and	r21,r21,r2
    e6c8:	a80b883a 	mov	r5,r21
    e6cc:	9009883a 	mov	r4,r18
    e6d0:	d9800015 	stw	r6,0(sp)
    e6d4:	000ef2c0 	call	ef2c <_sbrk_r>
    e6d8:	1029883a 	mov	r20,r2
    e6dc:	00bfffc4 	movi	r2,-1
    e6e0:	d9800017 	ldw	r6,0(sp)
    e6e4:	a080e826 	beq	r20,r2,ea88 <_malloc_r+0x738>
    e6e8:	a180a636 	bltu	r20,r6,e984 <_malloc_r+0x634>
    e6ec:	070000f4 	movhi	fp,3
    e6f0:	e7043804 	addi	fp,fp,4320
    e6f4:	e0800017 	ldw	r2,0(fp)
    e6f8:	a887883a 	add	r3,r21,r2
    e6fc:	e0c00015 	stw	r3,0(fp)
    e700:	3500e626 	beq	r6,r20,ea9c <_malloc_r+0x74c>
    e704:	b9000017 	ldw	r4,0(r23)
    e708:	00bfffc4 	movi	r2,-1
    e70c:	2080ee26 	beq	r4,r2,eac8 <_malloc_r+0x778>
    e710:	a185c83a 	sub	r2,r20,r6
    e714:	10c5883a 	add	r2,r2,r3
    e718:	e0800015 	stw	r2,0(fp)
    e71c:	a0c001cc 	andi	r3,r20,7
    e720:	1800bc26 	beq	r3,zero,ea14 <_malloc_r+0x6c4>
    e724:	a0e9c83a 	sub	r20,r20,r3
    e728:	00840204 	movi	r2,4104
    e72c:	a5000204 	addi	r20,r20,8
    e730:	10c7c83a 	sub	r3,r2,r3
    e734:	a545883a 	add	r2,r20,r21
    e738:	1083ffcc 	andi	r2,r2,4095
    e73c:	18abc83a 	sub	r21,r3,r2
    e740:	a80b883a 	mov	r5,r21
    e744:	9009883a 	mov	r4,r18
    e748:	000ef2c0 	call	ef2c <_sbrk_r>
    e74c:	00ffffc4 	movi	r3,-1
    e750:	10c0e126 	beq	r2,r3,ead8 <_malloc_r+0x788>
    e754:	1505c83a 	sub	r2,r2,r20
    e758:	1545883a 	add	r2,r2,r21
    e75c:	10800054 	ori	r2,r2,1
    e760:	e0c00017 	ldw	r3,0(fp)
    e764:	9d000215 	stw	r20,8(r19)
    e768:	a0800115 	stw	r2,4(r20)
    e76c:	a8c7883a 	add	r3,r21,r3
    e770:	e0c00015 	stw	r3,0(fp)
    e774:	84c00e26 	beq	r16,r19,e7b0 <_malloc_r+0x460>
    e778:	018003c4 	movi	r6,15
    e77c:	3580a72e 	bgeu	r6,r22,ea1c <_malloc_r+0x6cc>
    e780:	81400117 	ldw	r5,4(r16)
    e784:	013ffe04 	movi	r4,-8
    e788:	b0bffd04 	addi	r2,r22,-12
    e78c:	1104703a 	and	r2,r2,r4
    e790:	2900004c 	andi	r4,r5,1
    e794:	2088b03a 	or	r4,r4,r2
    e798:	81000115 	stw	r4,4(r16)
    e79c:	01400144 	movi	r5,5
    e7a0:	8089883a 	add	r4,r16,r2
    e7a4:	21400115 	stw	r5,4(r4)
    e7a8:	21400215 	stw	r5,8(r4)
    e7ac:	3080cd36 	bltu	r6,r2,eae4 <_malloc_r+0x794>
    e7b0:	008000f4 	movhi	r2,3
    e7b4:	1083df04 	addi	r2,r2,3964
    e7b8:	11000017 	ldw	r4,0(r2)
    e7bc:	20c0012e 	bgeu	r4,r3,e7c4 <_malloc_r+0x474>
    e7c0:	10c00015 	stw	r3,0(r2)
    e7c4:	008000f4 	movhi	r2,3
    e7c8:	1083de04 	addi	r2,r2,3960
    e7cc:	11000017 	ldw	r4,0(r2)
    e7d0:	9c000217 	ldw	r16,8(r19)
    e7d4:	20c0012e 	bgeu	r4,r3,e7dc <_malloc_r+0x48c>
    e7d8:	10c00015 	stw	r3,0(r2)
    e7dc:	80c00117 	ldw	r3,4(r16)
    e7e0:	00bfff04 	movi	r2,-4
    e7e4:	1886703a 	and	r3,r3,r2
    e7e8:	1c45c83a 	sub	r2,r3,r17
    e7ec:	1c400236 	bltu	r3,r17,e7f8 <_malloc_r+0x4a8>
    e7f0:	00c003c4 	movi	r3,15
    e7f4:	18800416 	blt	r3,r2,e808 <_malloc_r+0x4b8>
    e7f8:	9009883a 	mov	r4,r18
    e7fc:	001f5540 	call	1f554 <__malloc_unlock>
    e800:	0005883a 	mov	r2,zero
    e804:	003f7b06 	br	e5f4 <__alt_data_end+0xfc00e5f4>
    e808:	88c00054 	ori	r3,r17,1
    e80c:	80c00115 	stw	r3,4(r16)
    e810:	8463883a 	add	r17,r16,r17
    e814:	10800054 	ori	r2,r2,1
    e818:	9c400215 	stw	r17,8(r19)
    e81c:	88800115 	stw	r2,4(r17)
    e820:	9009883a 	mov	r4,r18
    e824:	001f5540 	call	1f554 <__malloc_unlock>
    e828:	80800204 	addi	r2,r16,8
    e82c:	003f7106 	br	e5f4 <__alt_data_end+0xfc00e5f4>
    e830:	00c00504 	movi	r3,20
    e834:	18804a2e 	bgeu	r3,r2,e960 <_malloc_r+0x610>
    e838:	00c01504 	movi	r3,84
    e83c:	18806e36 	bltu	r3,r2,e9f8 <_malloc_r+0x6a8>
    e840:	8804d33a 	srli	r2,r17,12
    e844:	12001bc4 	addi	r8,r2,111
    e848:	11c01b84 	addi	r7,r2,110
    e84c:	4209883a 	add	r4,r8,r8
    e850:	003edd06 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    e854:	3804d27a 	srli	r2,r7,9
    e858:	00c00104 	movi	r3,4
    e85c:	1880442e 	bgeu	r3,r2,e970 <_malloc_r+0x620>
    e860:	00c00504 	movi	r3,20
    e864:	18808136 	bltu	r3,r2,ea6c <_malloc_r+0x71c>
    e868:	11401704 	addi	r5,r2,92
    e86c:	10c016c4 	addi	r3,r2,91
    e870:	294b883a 	add	r5,r5,r5
    e874:	294b883a 	add	r5,r5,r5
    e878:	294b883a 	add	r5,r5,r5
    e87c:	994b883a 	add	r5,r19,r5
    e880:	28800017 	ldw	r2,0(r5)
    e884:	018000f4 	movhi	r6,3
    e888:	297ffe04 	addi	r5,r5,-8
    e88c:	31abea04 	addi	r6,r6,-20568
    e890:	28806526 	beq	r5,r2,ea28 <_malloc_r+0x6d8>
    e894:	01bfff04 	movi	r6,-4
    e898:	10c00117 	ldw	r3,4(r2)
    e89c:	1986703a 	and	r3,r3,r6
    e8a0:	38c0022e 	bgeu	r7,r3,e8ac <_malloc_r+0x55c>
    e8a4:	10800217 	ldw	r2,8(r2)
    e8a8:	28bffb1e 	bne	r5,r2,e898 <__alt_data_end+0xfc00e898>
    e8ac:	11400317 	ldw	r5,12(r2)
    e8b0:	98c00117 	ldw	r3,4(r19)
    e8b4:	81400315 	stw	r5,12(r16)
    e8b8:	80800215 	stw	r2,8(r16)
    e8bc:	2c000215 	stw	r16,8(r5)
    e8c0:	14000315 	stw	r16,12(r2)
    e8c4:	003ef806 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    e8c8:	88c00054 	ori	r3,r17,1
    e8cc:	80c00115 	stw	r3,4(r16)
    e8d0:	8463883a 	add	r17,r16,r17
    e8d4:	34400515 	stw	r17,20(r6)
    e8d8:	34400415 	stw	r17,16(r6)
    e8dc:	10c00054 	ori	r3,r2,1
    e8e0:	8a000315 	stw	r8,12(r17)
    e8e4:	8a000215 	stw	r8,8(r17)
    e8e8:	88c00115 	stw	r3,4(r17)
    e8ec:	88a3883a 	add	r17,r17,r2
    e8f0:	88800015 	stw	r2,0(r17)
    e8f4:	9009883a 	mov	r4,r18
    e8f8:	001f5540 	call	1f554 <__malloc_unlock>
    e8fc:	80800204 	addi	r2,r16,8
    e900:	003f3c06 	br	e5f4 <__alt_data_end+0xfc00e5f4>
    e904:	30c00117 	ldw	r3,4(r6)
    e908:	003ee706 	br	e4a8 <__alt_data_end+0xfc00e4a8>
    e90c:	5ac00044 	addi	r11,r11,1
    e910:	588000cc 	andi	r2,r11,3
    e914:	31800204 	addi	r6,r6,8
    e918:	103efd1e 	bne	r2,zero,e510 <__alt_data_end+0xfc00e510>
    e91c:	00002406 	br	e9b0 <_malloc_r+0x660>
    e920:	14000317 	ldw	r16,12(r2)
    e924:	143f251e 	bne	r2,r16,e5bc <__alt_data_end+0xfc00e5bc>
    e928:	21000084 	addi	r4,r4,2
    e92c:	003ebc06 	br	e420 <__alt_data_end+0xfc00e420>
    e930:	8085883a 	add	r2,r16,r2
    e934:	10c00117 	ldw	r3,4(r2)
    e938:	81000317 	ldw	r4,12(r16)
    e93c:	81400217 	ldw	r5,8(r16)
    e940:	18c00054 	ori	r3,r3,1
    e944:	10c00115 	stw	r3,4(r2)
    e948:	29000315 	stw	r4,12(r5)
    e94c:	21400215 	stw	r5,8(r4)
    e950:	9009883a 	mov	r4,r18
    e954:	001f5540 	call	1f554 <__malloc_unlock>
    e958:	80800204 	addi	r2,r16,8
    e95c:	003f2506 	br	e5f4 <__alt_data_end+0xfc00e5f4>
    e960:	12001704 	addi	r8,r2,92
    e964:	11c016c4 	addi	r7,r2,91
    e968:	4209883a 	add	r4,r8,r8
    e96c:	003e9606 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    e970:	3804d1ba 	srli	r2,r7,6
    e974:	11400e44 	addi	r5,r2,57
    e978:	10c00e04 	addi	r3,r2,56
    e97c:	294b883a 	add	r5,r5,r5
    e980:	003fbc06 	br	e874 <__alt_data_end+0xfc00e874>
    e984:	84ff5926 	beq	r16,r19,e6ec <__alt_data_end+0xfc00e6ec>
    e988:	008000f4 	movhi	r2,3
    e98c:	10abea04 	addi	r2,r2,-20568
    e990:	14000217 	ldw	r16,8(r2)
    e994:	00bfff04 	movi	r2,-4
    e998:	80c00117 	ldw	r3,4(r16)
    e99c:	1886703a 	and	r3,r3,r2
    e9a0:	003f9106 	br	e7e8 <__alt_data_end+0xfc00e7e8>
    e9a4:	60800217 	ldw	r2,8(r12)
    e9a8:	213fffc4 	addi	r4,r4,-1
    e9ac:	1300651e 	bne	r2,r12,eb44 <_malloc_r+0x7f4>
    e9b0:	208000cc 	andi	r2,r4,3
    e9b4:	633ffe04 	addi	r12,r12,-8
    e9b8:	103ffa1e 	bne	r2,zero,e9a4 <__alt_data_end+0xfc00e9a4>
    e9bc:	98800117 	ldw	r2,4(r19)
    e9c0:	0146303a 	nor	r3,zero,r5
    e9c4:	1884703a 	and	r2,r3,r2
    e9c8:	98800115 	stw	r2,4(r19)
    e9cc:	294b883a 	add	r5,r5,r5
    e9d0:	117f2836 	bltu	r2,r5,e674 <__alt_data_end+0xfc00e674>
    e9d4:	283f2726 	beq	r5,zero,e674 <__alt_data_end+0xfc00e674>
    e9d8:	2886703a 	and	r3,r5,r2
    e9dc:	5809883a 	mov	r4,r11
    e9e0:	183ec31e 	bne	r3,zero,e4f0 <__alt_data_end+0xfc00e4f0>
    e9e4:	294b883a 	add	r5,r5,r5
    e9e8:	2886703a 	and	r3,r5,r2
    e9ec:	21000104 	addi	r4,r4,4
    e9f0:	183ffc26 	beq	r3,zero,e9e4 <__alt_data_end+0xfc00e9e4>
    e9f4:	003ebe06 	br	e4f0 <__alt_data_end+0xfc00e4f0>
    e9f8:	00c05504 	movi	r3,340
    e9fc:	18801236 	bltu	r3,r2,ea48 <_malloc_r+0x6f8>
    ea00:	8804d3fa 	srli	r2,r17,15
    ea04:	12001e04 	addi	r8,r2,120
    ea08:	11c01dc4 	addi	r7,r2,119
    ea0c:	4209883a 	add	r4,r8,r8
    ea10:	003e6d06 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    ea14:	00c40004 	movi	r3,4096
    ea18:	003f4606 	br	e734 <__alt_data_end+0xfc00e734>
    ea1c:	00800044 	movi	r2,1
    ea20:	a0800115 	stw	r2,4(r20)
    ea24:	003f7406 	br	e7f8 <__alt_data_end+0xfc00e7f8>
    ea28:	1805d0ba 	srai	r2,r3,2
    ea2c:	01c00044 	movi	r7,1
    ea30:	30c00117 	ldw	r3,4(r6)
    ea34:	388e983a 	sll	r7,r7,r2
    ea38:	2805883a 	mov	r2,r5
    ea3c:	38c6b03a 	or	r3,r7,r3
    ea40:	30c00115 	stw	r3,4(r6)
    ea44:	003f9b06 	br	e8b4 <__alt_data_end+0xfc00e8b4>
    ea48:	00c15504 	movi	r3,1364
    ea4c:	18801a36 	bltu	r3,r2,eab8 <_malloc_r+0x768>
    ea50:	8804d4ba 	srli	r2,r17,18
    ea54:	12001f44 	addi	r8,r2,125
    ea58:	11c01f04 	addi	r7,r2,124
    ea5c:	4209883a 	add	r4,r8,r8
    ea60:	003e5906 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    ea64:	ad400404 	addi	r21,r21,16
    ea68:	003f1706 	br	e6c8 <__alt_data_end+0xfc00e6c8>
    ea6c:	00c01504 	movi	r3,84
    ea70:	18802336 	bltu	r3,r2,eb00 <_malloc_r+0x7b0>
    ea74:	3804d33a 	srli	r2,r7,12
    ea78:	11401bc4 	addi	r5,r2,111
    ea7c:	10c01b84 	addi	r3,r2,110
    ea80:	294b883a 	add	r5,r5,r5
    ea84:	003f7b06 	br	e874 <__alt_data_end+0xfc00e874>
    ea88:	9c000217 	ldw	r16,8(r19)
    ea8c:	00bfff04 	movi	r2,-4
    ea90:	80c00117 	ldw	r3,4(r16)
    ea94:	1886703a 	and	r3,r3,r2
    ea98:	003f5306 	br	e7e8 <__alt_data_end+0xfc00e7e8>
    ea9c:	3083ffcc 	andi	r2,r6,4095
    eaa0:	103f181e 	bne	r2,zero,e704 <__alt_data_end+0xfc00e704>
    eaa4:	99000217 	ldw	r4,8(r19)
    eaa8:	b545883a 	add	r2,r22,r21
    eaac:	10800054 	ori	r2,r2,1
    eab0:	20800115 	stw	r2,4(r4)
    eab4:	003f3e06 	br	e7b0 <__alt_data_end+0xfc00e7b0>
    eab8:	01003f84 	movi	r4,254
    eabc:	02001fc4 	movi	r8,127
    eac0:	01c01f84 	movi	r7,126
    eac4:	003e4006 	br	e3c8 <__alt_data_end+0xfc00e3c8>
    eac8:	008000f4 	movhi	r2,3
    eacc:	10b74c04 	addi	r2,r2,-8912
    ead0:	15000015 	stw	r20,0(r2)
    ead4:	003f1106 	br	e71c <__alt_data_end+0xfc00e71c>
    ead8:	00800044 	movi	r2,1
    eadc:	002b883a 	mov	r21,zero
    eae0:	003f1f06 	br	e760 <__alt_data_end+0xfc00e760>
    eae4:	81400204 	addi	r5,r16,8
    eae8:	9009883a 	mov	r4,r18
    eaec:	0015cb40 	call	15cb4 <_free_r>
    eaf0:	008000f4 	movhi	r2,3
    eaf4:	10843804 	addi	r2,r2,4320
    eaf8:	10c00017 	ldw	r3,0(r2)
    eafc:	003f2c06 	br	e7b0 <__alt_data_end+0xfc00e7b0>
    eb00:	00c05504 	movi	r3,340
    eb04:	18800536 	bltu	r3,r2,eb1c <_malloc_r+0x7cc>
    eb08:	3804d3fa 	srli	r2,r7,15
    eb0c:	11401e04 	addi	r5,r2,120
    eb10:	10c01dc4 	addi	r3,r2,119
    eb14:	294b883a 	add	r5,r5,r5
    eb18:	003f5606 	br	e874 <__alt_data_end+0xfc00e874>
    eb1c:	00c15504 	movi	r3,1364
    eb20:	18800536 	bltu	r3,r2,eb38 <_malloc_r+0x7e8>
    eb24:	3804d4ba 	srli	r2,r7,18
    eb28:	11401f44 	addi	r5,r2,125
    eb2c:	10c01f04 	addi	r3,r2,124
    eb30:	294b883a 	add	r5,r5,r5
    eb34:	003f4f06 	br	e874 <__alt_data_end+0xfc00e874>
    eb38:	01403f84 	movi	r5,254
    eb3c:	00c01f84 	movi	r3,126
    eb40:	003f4c06 	br	e874 <__alt_data_end+0xfc00e874>
    eb44:	98800117 	ldw	r2,4(r19)
    eb48:	003fa006 	br	e9cc <__alt_data_end+0xfc00e9cc>
    eb4c:	8808d0fa 	srli	r4,r17,3
    eb50:	20800044 	addi	r2,r4,1
    eb54:	1085883a 	add	r2,r2,r2
    eb58:	003e9006 	br	e59c <__alt_data_end+0xfc00e59c>

0000eb5c <memcpy>:
    eb5c:	defffd04 	addi	sp,sp,-12
    eb60:	dfc00215 	stw	ra,8(sp)
    eb64:	dc400115 	stw	r17,4(sp)
    eb68:	dc000015 	stw	r16,0(sp)
    eb6c:	00c003c4 	movi	r3,15
    eb70:	2005883a 	mov	r2,r4
    eb74:	1980452e 	bgeu	r3,r6,ec8c <memcpy+0x130>
    eb78:	2906b03a 	or	r3,r5,r4
    eb7c:	18c000cc 	andi	r3,r3,3
    eb80:	1800441e 	bne	r3,zero,ec94 <memcpy+0x138>
    eb84:	347ffc04 	addi	r17,r6,-16
    eb88:	8822d13a 	srli	r17,r17,4
    eb8c:	28c00104 	addi	r3,r5,4
    eb90:	23400104 	addi	r13,r4,4
    eb94:	8820913a 	slli	r16,r17,4
    eb98:	2b000204 	addi	r12,r5,8
    eb9c:	22c00204 	addi	r11,r4,8
    eba0:	84000504 	addi	r16,r16,20
    eba4:	2a800304 	addi	r10,r5,12
    eba8:	22400304 	addi	r9,r4,12
    ebac:	2c21883a 	add	r16,r5,r16
    ebb0:	2811883a 	mov	r8,r5
    ebb4:	200f883a 	mov	r7,r4
    ebb8:	41000017 	ldw	r4,0(r8)
    ebbc:	1fc00017 	ldw	ra,0(r3)
    ebc0:	63c00017 	ldw	r15,0(r12)
    ebc4:	39000015 	stw	r4,0(r7)
    ebc8:	53800017 	ldw	r14,0(r10)
    ebcc:	6fc00015 	stw	ra,0(r13)
    ebd0:	5bc00015 	stw	r15,0(r11)
    ebd4:	4b800015 	stw	r14,0(r9)
    ebd8:	18c00404 	addi	r3,r3,16
    ebdc:	39c00404 	addi	r7,r7,16
    ebe0:	42000404 	addi	r8,r8,16
    ebe4:	6b400404 	addi	r13,r13,16
    ebe8:	63000404 	addi	r12,r12,16
    ebec:	5ac00404 	addi	r11,r11,16
    ebf0:	52800404 	addi	r10,r10,16
    ebf4:	4a400404 	addi	r9,r9,16
    ebf8:	1c3fef1e 	bne	r3,r16,ebb8 <__alt_data_end+0xfc00ebb8>
    ebfc:	89c00044 	addi	r7,r17,1
    ec00:	380e913a 	slli	r7,r7,4
    ec04:	310003cc 	andi	r4,r6,15
    ec08:	02c000c4 	movi	r11,3
    ec0c:	11c7883a 	add	r3,r2,r7
    ec10:	29cb883a 	add	r5,r5,r7
    ec14:	5900212e 	bgeu	r11,r4,ec9c <memcpy+0x140>
    ec18:	1813883a 	mov	r9,r3
    ec1c:	2811883a 	mov	r8,r5
    ec20:	200f883a 	mov	r7,r4
    ec24:	42800017 	ldw	r10,0(r8)
    ec28:	4a400104 	addi	r9,r9,4
    ec2c:	39ffff04 	addi	r7,r7,-4
    ec30:	4abfff15 	stw	r10,-4(r9)
    ec34:	42000104 	addi	r8,r8,4
    ec38:	59fffa36 	bltu	r11,r7,ec24 <__alt_data_end+0xfc00ec24>
    ec3c:	213fff04 	addi	r4,r4,-4
    ec40:	2008d0ba 	srli	r4,r4,2
    ec44:	318000cc 	andi	r6,r6,3
    ec48:	21000044 	addi	r4,r4,1
    ec4c:	2109883a 	add	r4,r4,r4
    ec50:	2109883a 	add	r4,r4,r4
    ec54:	1907883a 	add	r3,r3,r4
    ec58:	290b883a 	add	r5,r5,r4
    ec5c:	30000626 	beq	r6,zero,ec78 <memcpy+0x11c>
    ec60:	198d883a 	add	r6,r3,r6
    ec64:	29c00003 	ldbu	r7,0(r5)
    ec68:	18c00044 	addi	r3,r3,1
    ec6c:	29400044 	addi	r5,r5,1
    ec70:	19ffffc5 	stb	r7,-1(r3)
    ec74:	19bffb1e 	bne	r3,r6,ec64 <__alt_data_end+0xfc00ec64>
    ec78:	dfc00217 	ldw	ra,8(sp)
    ec7c:	dc400117 	ldw	r17,4(sp)
    ec80:	dc000017 	ldw	r16,0(sp)
    ec84:	dec00304 	addi	sp,sp,12
    ec88:	f800283a 	ret
    ec8c:	2007883a 	mov	r3,r4
    ec90:	003ff206 	br	ec5c <__alt_data_end+0xfc00ec5c>
    ec94:	2007883a 	mov	r3,r4
    ec98:	003ff106 	br	ec60 <__alt_data_end+0xfc00ec60>
    ec9c:	200d883a 	mov	r6,r4
    eca0:	003fee06 	br	ec5c <__alt_data_end+0xfc00ec5c>

0000eca4 <memset>:
    eca4:	20c000cc 	andi	r3,r4,3
    eca8:	2005883a 	mov	r2,r4
    ecac:	18004426 	beq	r3,zero,edc0 <memset+0x11c>
    ecb0:	31ffffc4 	addi	r7,r6,-1
    ecb4:	30004026 	beq	r6,zero,edb8 <memset+0x114>
    ecb8:	2813883a 	mov	r9,r5
    ecbc:	200d883a 	mov	r6,r4
    ecc0:	2007883a 	mov	r3,r4
    ecc4:	00000406 	br	ecd8 <memset+0x34>
    ecc8:	3a3fffc4 	addi	r8,r7,-1
    eccc:	31800044 	addi	r6,r6,1
    ecd0:	38003926 	beq	r7,zero,edb8 <memset+0x114>
    ecd4:	400f883a 	mov	r7,r8
    ecd8:	18c00044 	addi	r3,r3,1
    ecdc:	32400005 	stb	r9,0(r6)
    ece0:	1a0000cc 	andi	r8,r3,3
    ece4:	403ff81e 	bne	r8,zero,ecc8 <__alt_data_end+0xfc00ecc8>
    ece8:	010000c4 	movi	r4,3
    ecec:	21c02d2e 	bgeu	r4,r7,eda4 <memset+0x100>
    ecf0:	29003fcc 	andi	r4,r5,255
    ecf4:	200c923a 	slli	r6,r4,8
    ecf8:	3108b03a 	or	r4,r6,r4
    ecfc:	200c943a 	slli	r6,r4,16
    ed00:	218cb03a 	or	r6,r4,r6
    ed04:	010003c4 	movi	r4,15
    ed08:	21c0182e 	bgeu	r4,r7,ed6c <memset+0xc8>
    ed0c:	3b3ffc04 	addi	r12,r7,-16
    ed10:	6018d13a 	srli	r12,r12,4
    ed14:	1a000104 	addi	r8,r3,4
    ed18:	1ac00204 	addi	r11,r3,8
    ed1c:	6008913a 	slli	r4,r12,4
    ed20:	1a800304 	addi	r10,r3,12
    ed24:	1813883a 	mov	r9,r3
    ed28:	21000504 	addi	r4,r4,20
    ed2c:	1909883a 	add	r4,r3,r4
    ed30:	49800015 	stw	r6,0(r9)
    ed34:	41800015 	stw	r6,0(r8)
    ed38:	59800015 	stw	r6,0(r11)
    ed3c:	51800015 	stw	r6,0(r10)
    ed40:	42000404 	addi	r8,r8,16
    ed44:	4a400404 	addi	r9,r9,16
    ed48:	5ac00404 	addi	r11,r11,16
    ed4c:	52800404 	addi	r10,r10,16
    ed50:	413ff71e 	bne	r8,r4,ed30 <__alt_data_end+0xfc00ed30>
    ed54:	63000044 	addi	r12,r12,1
    ed58:	6018913a 	slli	r12,r12,4
    ed5c:	39c003cc 	andi	r7,r7,15
    ed60:	010000c4 	movi	r4,3
    ed64:	1b07883a 	add	r3,r3,r12
    ed68:	21c00e2e 	bgeu	r4,r7,eda4 <memset+0x100>
    ed6c:	1813883a 	mov	r9,r3
    ed70:	3811883a 	mov	r8,r7
    ed74:	010000c4 	movi	r4,3
    ed78:	49800015 	stw	r6,0(r9)
    ed7c:	423fff04 	addi	r8,r8,-4
    ed80:	4a400104 	addi	r9,r9,4
    ed84:	223ffc36 	bltu	r4,r8,ed78 <__alt_data_end+0xfc00ed78>
    ed88:	393fff04 	addi	r4,r7,-4
    ed8c:	2008d0ba 	srli	r4,r4,2
    ed90:	39c000cc 	andi	r7,r7,3
    ed94:	21000044 	addi	r4,r4,1
    ed98:	2109883a 	add	r4,r4,r4
    ed9c:	2109883a 	add	r4,r4,r4
    eda0:	1907883a 	add	r3,r3,r4
    eda4:	38000526 	beq	r7,zero,edbc <memset+0x118>
    eda8:	19cf883a 	add	r7,r3,r7
    edac:	19400005 	stb	r5,0(r3)
    edb0:	18c00044 	addi	r3,r3,1
    edb4:	38fffd1e 	bne	r7,r3,edac <__alt_data_end+0xfc00edac>
    edb8:	f800283a 	ret
    edbc:	f800283a 	ret
    edc0:	2007883a 	mov	r3,r4
    edc4:	300f883a 	mov	r7,r6
    edc8:	003fc706 	br	ece8 <__alt_data_end+0xfc00ece8>

0000edcc <_printf_r>:
    edcc:	defffd04 	addi	sp,sp,-12
    edd0:	2805883a 	mov	r2,r5
    edd4:	dfc00015 	stw	ra,0(sp)
    edd8:	d9800115 	stw	r6,4(sp)
    eddc:	d9c00215 	stw	r7,8(sp)
    ede0:	21400217 	ldw	r5,8(r4)
    ede4:	d9c00104 	addi	r7,sp,4
    ede8:	100d883a 	mov	r6,r2
    edec:	00117800 	call	11780 <___vfprintf_internal_r>
    edf0:	dfc00017 	ldw	ra,0(sp)
    edf4:	dec00304 	addi	sp,sp,12
    edf8:	f800283a 	ret

0000edfc <printf>:
    edfc:	defffc04 	addi	sp,sp,-16
    ee00:	dfc00015 	stw	ra,0(sp)
    ee04:	d9400115 	stw	r5,4(sp)
    ee08:	d9800215 	stw	r6,8(sp)
    ee0c:	d9c00315 	stw	r7,12(sp)
    ee10:	008000f4 	movhi	r2,3
    ee14:	10b74b04 	addi	r2,r2,-8916
    ee18:	10800017 	ldw	r2,0(r2)
    ee1c:	200b883a 	mov	r5,r4
    ee20:	d9800104 	addi	r6,sp,4
    ee24:	11000217 	ldw	r4,8(r2)
    ee28:	0013a5c0 	call	13a5c <__vfprintf_internal>
    ee2c:	dfc00017 	ldw	ra,0(sp)
    ee30:	dec00404 	addi	sp,sp,16
    ee34:	f800283a 	ret

0000ee38 <_putchar_r>:
    ee38:	21800217 	ldw	r6,8(r4)
    ee3c:	0017ba41 	jmpi	17ba4 <_putc_r>

0000ee40 <putchar>:
    ee40:	008000f4 	movhi	r2,3
    ee44:	10b74b04 	addi	r2,r2,-8916
    ee48:	200b883a 	mov	r5,r4
    ee4c:	11000017 	ldw	r4,0(r2)
    ee50:	21800217 	ldw	r6,8(r4)
    ee54:	0017ba41 	jmpi	17ba4 <_putc_r>

0000ee58 <_puts_r>:
    ee58:	defff604 	addi	sp,sp,-40
    ee5c:	dc000715 	stw	r16,28(sp)
    ee60:	2021883a 	mov	r16,r4
    ee64:	2809883a 	mov	r4,r5
    ee68:	dc400815 	stw	r17,32(sp)
    ee6c:	dfc00915 	stw	ra,36(sp)
    ee70:	2823883a 	mov	r17,r5
    ee74:	000f4240 	call	f424 <strlen>
    ee78:	10c00044 	addi	r3,r2,1
    ee7c:	d8800115 	stw	r2,4(sp)
    ee80:	008000f4 	movhi	r2,3
    ee84:	10aa4704 	addi	r2,r2,-22244
    ee88:	d8800215 	stw	r2,8(sp)
    ee8c:	00800044 	movi	r2,1
    ee90:	d8800315 	stw	r2,12(sp)
    ee94:	00800084 	movi	r2,2
    ee98:	dc400015 	stw	r17,0(sp)
    ee9c:	d8c00615 	stw	r3,24(sp)
    eea0:	dec00415 	stw	sp,16(sp)
    eea4:	d8800515 	stw	r2,20(sp)
    eea8:	80000226 	beq	r16,zero,eeb4 <_puts_r+0x5c>
    eeac:	80800e17 	ldw	r2,56(r16)
    eeb0:	10001426 	beq	r2,zero,ef04 <_puts_r+0xac>
    eeb4:	81400217 	ldw	r5,8(r16)
    eeb8:	2880030b 	ldhu	r2,12(r5)
    eebc:	10c8000c 	andi	r3,r2,8192
    eec0:	1800061e 	bne	r3,zero,eedc <_puts_r+0x84>
    eec4:	29001917 	ldw	r4,100(r5)
    eec8:	00f7ffc4 	movi	r3,-8193
    eecc:	10880014 	ori	r2,r2,8192
    eed0:	20c6703a 	and	r3,r4,r3
    eed4:	2880030d 	sth	r2,12(r5)
    eed8:	28c01915 	stw	r3,100(r5)
    eedc:	d9800404 	addi	r6,sp,16
    eee0:	8009883a 	mov	r4,r16
    eee4:	0015fc40 	call	15fc4 <__sfvwrite_r>
    eee8:	1000091e 	bne	r2,zero,ef10 <_puts_r+0xb8>
    eeec:	00800284 	movi	r2,10
    eef0:	dfc00917 	ldw	ra,36(sp)
    eef4:	dc400817 	ldw	r17,32(sp)
    eef8:	dc000717 	ldw	r16,28(sp)
    eefc:	dec00a04 	addi	sp,sp,40
    ef00:	f800283a 	ret
    ef04:	8009883a 	mov	r4,r16
    ef08:	0015b400 	call	15b40 <__sinit>
    ef0c:	003fe906 	br	eeb4 <__alt_data_end+0xfc00eeb4>
    ef10:	00bfffc4 	movi	r2,-1
    ef14:	003ff606 	br	eef0 <__alt_data_end+0xfc00eef0>

0000ef18 <puts>:
    ef18:	008000f4 	movhi	r2,3
    ef1c:	10b74b04 	addi	r2,r2,-8916
    ef20:	200b883a 	mov	r5,r4
    ef24:	11000017 	ldw	r4,0(r2)
    ef28:	000ee581 	jmpi	ee58 <_puts_r>

0000ef2c <_sbrk_r>:
    ef2c:	defffd04 	addi	sp,sp,-12
    ef30:	dc000015 	stw	r16,0(sp)
    ef34:	040000f4 	movhi	r16,3
    ef38:	dc400115 	stw	r17,4(sp)
    ef3c:	8403e104 	addi	r16,r16,3972
    ef40:	2023883a 	mov	r17,r4
    ef44:	2809883a 	mov	r4,r5
    ef48:	dfc00215 	stw	ra,8(sp)
    ef4c:	80000015 	stw	zero,0(r16)
    ef50:	001f73c0 	call	1f73c <sbrk>
    ef54:	00ffffc4 	movi	r3,-1
    ef58:	10c00526 	beq	r2,r3,ef70 <_sbrk_r+0x44>
    ef5c:	dfc00217 	ldw	ra,8(sp)
    ef60:	dc400117 	ldw	r17,4(sp)
    ef64:	dc000017 	ldw	r16,0(sp)
    ef68:	dec00304 	addi	sp,sp,12
    ef6c:	f800283a 	ret
    ef70:	80c00017 	ldw	r3,0(r16)
    ef74:	183ff926 	beq	r3,zero,ef5c <__alt_data_end+0xfc00ef5c>
    ef78:	88c00015 	stw	r3,0(r17)
    ef7c:	003ff706 	br	ef5c <__alt_data_end+0xfc00ef5c>

0000ef80 <_init_signal_r>:
    ef80:	2080b717 	ldw	r2,732(r4)
    ef84:	10000226 	beq	r2,zero,ef90 <_init_signal_r+0x10>
    ef88:	0005883a 	mov	r2,zero
    ef8c:	f800283a 	ret
    ef90:	defffe04 	addi	sp,sp,-8
    ef94:	01402004 	movi	r5,128
    ef98:	dc000015 	stw	r16,0(sp)
    ef9c:	dfc00115 	stw	ra,4(sp)
    efa0:	2021883a 	mov	r16,r4
    efa4:	000e3500 	call	e350 <_malloc_r>
    efa8:	8080b715 	stw	r2,732(r16)
    efac:	10000d26 	beq	r2,zero,efe4 <_init_signal_r+0x64>
    efb0:	0007883a 	mov	r3,zero
    efb4:	01002004 	movi	r4,128
    efb8:	00000106 	br	efc0 <_init_signal_r+0x40>
    efbc:	8080b717 	ldw	r2,732(r16)
    efc0:	10c5883a 	add	r2,r2,r3
    efc4:	10000015 	stw	zero,0(r2)
    efc8:	18c00104 	addi	r3,r3,4
    efcc:	193ffb1e 	bne	r3,r4,efbc <__alt_data_end+0xfc00efbc>
    efd0:	0005883a 	mov	r2,zero
    efd4:	dfc00117 	ldw	ra,4(sp)
    efd8:	dc000017 	ldw	r16,0(sp)
    efdc:	dec00204 	addi	sp,sp,8
    efe0:	f800283a 	ret
    efe4:	00bfffc4 	movi	r2,-1
    efe8:	003ffa06 	br	efd4 <__alt_data_end+0xfc00efd4>

0000efec <_signal_r>:
    efec:	00c007c4 	movi	r3,31
    eff0:	19401536 	bltu	r3,r5,f048 <_signal_r+0x5c>
    eff4:	2080b717 	ldw	r2,732(r4)
    eff8:	defffc04 	addi	sp,sp,-16
    effc:	dc800215 	stw	r18,8(sp)
    f000:	dc400115 	stw	r17,4(sp)
    f004:	dc000015 	stw	r16,0(sp)
    f008:	dfc00315 	stw	ra,12(sp)
    f00c:	3023883a 	mov	r17,r6
    f010:	2021883a 	mov	r16,r4
    f014:	2825883a 	mov	r18,r5
    f018:	10000f26 	beq	r2,zero,f058 <_signal_r+0x6c>
    f01c:	948b883a 	add	r5,r18,r18
    f020:	294b883a 	add	r5,r5,r5
    f024:	114b883a 	add	r5,r2,r5
    f028:	28800017 	ldw	r2,0(r5)
    f02c:	2c400015 	stw	r17,0(r5)
    f030:	dfc00317 	ldw	ra,12(sp)
    f034:	dc800217 	ldw	r18,8(sp)
    f038:	dc400117 	ldw	r17,4(sp)
    f03c:	dc000017 	ldw	r16,0(sp)
    f040:	dec00404 	addi	sp,sp,16
    f044:	f800283a 	ret
    f048:	00c00584 	movi	r3,22
    f04c:	20c00015 	stw	r3,0(r4)
    f050:	00bfffc4 	movi	r2,-1
    f054:	f800283a 	ret
    f058:	000ef800 	call	ef80 <_init_signal_r>
    f05c:	1000021e 	bne	r2,zero,f068 <_signal_r+0x7c>
    f060:	8080b717 	ldw	r2,732(r16)
    f064:	003fed06 	br	f01c <__alt_data_end+0xfc00f01c>
    f068:	00bfffc4 	movi	r2,-1
    f06c:	003ff006 	br	f030 <__alt_data_end+0xfc00f030>

0000f070 <_raise_r>:
    f070:	008007c4 	movi	r2,31
    f074:	11402936 	bltu	r2,r5,f11c <_raise_r+0xac>
    f078:	20c0b717 	ldw	r3,732(r4)
    f07c:	defffd04 	addi	sp,sp,-12
    f080:	dc400115 	stw	r17,4(sp)
    f084:	dc000015 	stw	r16,0(sp)
    f088:	dfc00215 	stw	ra,8(sp)
    f08c:	2021883a 	mov	r16,r4
    f090:	2823883a 	mov	r17,r5
    f094:	18001726 	beq	r3,zero,f0f4 <_raise_r+0x84>
    f098:	2945883a 	add	r2,r5,r5
    f09c:	1085883a 	add	r2,r2,r2
    f0a0:	1887883a 	add	r3,r3,r2
    f0a4:	19800017 	ldw	r6,0(r3)
    f0a8:	30001226 	beq	r6,zero,f0f4 <_raise_r+0x84>
    f0ac:	00800044 	movi	r2,1
    f0b0:	30800e26 	beq	r6,r2,f0ec <_raise_r+0x7c>
    f0b4:	013fffc4 	movi	r4,-1
    f0b8:	31000926 	beq	r6,r4,f0e0 <_raise_r+0x70>
    f0bc:	18000015 	stw	zero,0(r3)
    f0c0:	2809883a 	mov	r4,r5
    f0c4:	303ee83a 	callr	r6
    f0c8:	0005883a 	mov	r2,zero
    f0cc:	dfc00217 	ldw	ra,8(sp)
    f0d0:	dc400117 	ldw	r17,4(sp)
    f0d4:	dc000017 	ldw	r16,0(sp)
    f0d8:	dec00304 	addi	sp,sp,12
    f0dc:	f800283a 	ret
    f0e0:	00c00584 	movi	r3,22
    f0e4:	80c00015 	stw	r3,0(r16)
    f0e8:	003ff806 	br	f0cc <__alt_data_end+0xfc00f0cc>
    f0ec:	0005883a 	mov	r2,zero
    f0f0:	003ff606 	br	f0cc <__alt_data_end+0xfc00f0cc>
    f0f4:	8009883a 	mov	r4,r16
    f0f8:	000f2800 	call	f280 <_getpid_r>
    f0fc:	880d883a 	mov	r6,r17
    f100:	100b883a 	mov	r5,r2
    f104:	8009883a 	mov	r4,r16
    f108:	dfc00217 	ldw	ra,8(sp)
    f10c:	dc400117 	ldw	r17,4(sp)
    f110:	dc000017 	ldw	r16,0(sp)
    f114:	dec00304 	addi	sp,sp,12
    f118:	000f2241 	jmpi	f224 <_kill_r>
    f11c:	00800584 	movi	r2,22
    f120:	20800015 	stw	r2,0(r4)
    f124:	00bfffc4 	movi	r2,-1
    f128:	f800283a 	ret

0000f12c <__sigtramp_r>:
    f12c:	008007c4 	movi	r2,31
    f130:	11402436 	bltu	r2,r5,f1c4 <__sigtramp_r+0x98>
    f134:	20c0b717 	ldw	r3,732(r4)
    f138:	defffd04 	addi	sp,sp,-12
    f13c:	dc400115 	stw	r17,4(sp)
    f140:	dc000015 	stw	r16,0(sp)
    f144:	dfc00215 	stw	ra,8(sp)
    f148:	2021883a 	mov	r16,r4
    f14c:	2823883a 	mov	r17,r5
    f150:	18001826 	beq	r3,zero,f1b4 <__sigtramp_r+0x88>
    f154:	8c45883a 	add	r2,r17,r17
    f158:	1085883a 	add	r2,r2,r2
    f15c:	1885883a 	add	r2,r3,r2
    f160:	10c00017 	ldw	r3,0(r2)
    f164:	18001126 	beq	r3,zero,f1ac <__sigtramp_r+0x80>
    f168:	013fffc4 	movi	r4,-1
    f16c:	19000d26 	beq	r3,r4,f1a4 <__sigtramp_r+0x78>
    f170:	01000044 	movi	r4,1
    f174:	19000926 	beq	r3,r4,f19c <__sigtramp_r+0x70>
    f178:	10000015 	stw	zero,0(r2)
    f17c:	8809883a 	mov	r4,r17
    f180:	183ee83a 	callr	r3
    f184:	0005883a 	mov	r2,zero
    f188:	dfc00217 	ldw	ra,8(sp)
    f18c:	dc400117 	ldw	r17,4(sp)
    f190:	dc000017 	ldw	r16,0(sp)
    f194:	dec00304 	addi	sp,sp,12
    f198:	f800283a 	ret
    f19c:	008000c4 	movi	r2,3
    f1a0:	003ff906 	br	f188 <__alt_data_end+0xfc00f188>
    f1a4:	00800084 	movi	r2,2
    f1a8:	003ff706 	br	f188 <__alt_data_end+0xfc00f188>
    f1ac:	00800044 	movi	r2,1
    f1b0:	003ff506 	br	f188 <__alt_data_end+0xfc00f188>
    f1b4:	000ef800 	call	ef80 <_init_signal_r>
    f1b8:	1000041e 	bne	r2,zero,f1cc <__sigtramp_r+0xa0>
    f1bc:	80c0b717 	ldw	r3,732(r16)
    f1c0:	003fe406 	br	f154 <__alt_data_end+0xfc00f154>
    f1c4:	00bfffc4 	movi	r2,-1
    f1c8:	f800283a 	ret
    f1cc:	00bfffc4 	movi	r2,-1
    f1d0:	003fed06 	br	f188 <__alt_data_end+0xfc00f188>

0000f1d4 <raise>:
    f1d4:	008000f4 	movhi	r2,3
    f1d8:	10b74b04 	addi	r2,r2,-8916
    f1dc:	200b883a 	mov	r5,r4
    f1e0:	11000017 	ldw	r4,0(r2)
    f1e4:	000f0701 	jmpi	f070 <_raise_r>

0000f1e8 <signal>:
    f1e8:	008000f4 	movhi	r2,3
    f1ec:	10b74b04 	addi	r2,r2,-8916
    f1f0:	280d883a 	mov	r6,r5
    f1f4:	200b883a 	mov	r5,r4
    f1f8:	11000017 	ldw	r4,0(r2)
    f1fc:	000efec1 	jmpi	efec <_signal_r>

0000f200 <_init_signal>:
    f200:	008000f4 	movhi	r2,3
    f204:	10b74b04 	addi	r2,r2,-8916
    f208:	11000017 	ldw	r4,0(r2)
    f20c:	000ef801 	jmpi	ef80 <_init_signal_r>

0000f210 <__sigtramp>:
    f210:	008000f4 	movhi	r2,3
    f214:	10b74b04 	addi	r2,r2,-8916
    f218:	200b883a 	mov	r5,r4
    f21c:	11000017 	ldw	r4,0(r2)
    f220:	000f12c1 	jmpi	f12c <__sigtramp_r>

0000f224 <_kill_r>:
    f224:	defffd04 	addi	sp,sp,-12
    f228:	2805883a 	mov	r2,r5
    f22c:	dc000015 	stw	r16,0(sp)
    f230:	040000f4 	movhi	r16,3
    f234:	dc400115 	stw	r17,4(sp)
    f238:	8403e104 	addi	r16,r16,3972
    f23c:	2023883a 	mov	r17,r4
    f240:	300b883a 	mov	r5,r6
    f244:	1009883a 	mov	r4,r2
    f248:	dfc00215 	stw	ra,8(sp)
    f24c:	80000015 	stw	zero,0(r16)
    f250:	001f1800 	call	1f180 <kill>
    f254:	00ffffc4 	movi	r3,-1
    f258:	10c00526 	beq	r2,r3,f270 <_kill_r+0x4c>
    f25c:	dfc00217 	ldw	ra,8(sp)
    f260:	dc400117 	ldw	r17,4(sp)
    f264:	dc000017 	ldw	r16,0(sp)
    f268:	dec00304 	addi	sp,sp,12
    f26c:	f800283a 	ret
    f270:	80c00017 	ldw	r3,0(r16)
    f274:	183ff926 	beq	r3,zero,f25c <__alt_data_end+0xfc00f25c>
    f278:	88c00015 	stw	r3,0(r17)
    f27c:	003ff706 	br	f25c <__alt_data_end+0xfc00f25c>

0000f280 <_getpid_r>:
    f280:	001f03c1 	jmpi	1f03c <getpid>

0000f284 <_sprintf_r>:
    f284:	deffe404 	addi	sp,sp,-112
    f288:	2807883a 	mov	r3,r5
    f28c:	dfc01a15 	stw	ra,104(sp)
    f290:	d9c01b15 	stw	r7,108(sp)
    f294:	00a00034 	movhi	r2,32768
    f298:	10bfffc4 	addi	r2,r2,-1
    f29c:	02008204 	movi	r8,520
    f2a0:	d8800215 	stw	r2,8(sp)
    f2a4:	d8800515 	stw	r2,20(sp)
    f2a8:	d9c01b04 	addi	r7,sp,108
    f2ac:	d80b883a 	mov	r5,sp
    f2b0:	00bfffc4 	movi	r2,-1
    f2b4:	d8c00015 	stw	r3,0(sp)
    f2b8:	d8c00415 	stw	r3,16(sp)
    f2bc:	da00030d 	sth	r8,12(sp)
    f2c0:	d880038d 	sth	r2,14(sp)
    f2c4:	000f4bc0 	call	f4bc <___svfprintf_internal_r>
    f2c8:	d8c00017 	ldw	r3,0(sp)
    f2cc:	18000005 	stb	zero,0(r3)
    f2d0:	dfc01a17 	ldw	ra,104(sp)
    f2d4:	dec01c04 	addi	sp,sp,112
    f2d8:	f800283a 	ret

0000f2dc <sprintf>:
    f2dc:	deffe304 	addi	sp,sp,-116
    f2e0:	2007883a 	mov	r3,r4
    f2e4:	dfc01a15 	stw	ra,104(sp)
    f2e8:	d9801b15 	stw	r6,108(sp)
    f2ec:	d9c01c15 	stw	r7,112(sp)
    f2f0:	010000f4 	movhi	r4,3
    f2f4:	21374b04 	addi	r4,r4,-8916
    f2f8:	21000017 	ldw	r4,0(r4)
    f2fc:	00a00034 	movhi	r2,32768
    f300:	10bfffc4 	addi	r2,r2,-1
    f304:	280d883a 	mov	r6,r5
    f308:	02008204 	movi	r8,520
    f30c:	d8800215 	stw	r2,8(sp)
    f310:	d8800515 	stw	r2,20(sp)
    f314:	d9c01b04 	addi	r7,sp,108
    f318:	d80b883a 	mov	r5,sp
    f31c:	00bfffc4 	movi	r2,-1
    f320:	d8c00015 	stw	r3,0(sp)
    f324:	d8c00415 	stw	r3,16(sp)
    f328:	da00030d 	sth	r8,12(sp)
    f32c:	d880038d 	sth	r2,14(sp)
    f330:	000f4bc0 	call	f4bc <___svfprintf_internal_r>
    f334:	d8c00017 	ldw	r3,0(sp)
    f338:	18000005 	stb	zero,0(r3)
    f33c:	dfc01a17 	ldw	ra,104(sp)
    f340:	dec01d04 	addi	sp,sp,116
    f344:	f800283a 	ret

0000f348 <strcmp>:
    f348:	2144b03a 	or	r2,r4,r5
    f34c:	108000cc 	andi	r2,r2,3
    f350:	1000171e 	bne	r2,zero,f3b0 <strcmp+0x68>
    f354:	20800017 	ldw	r2,0(r4)
    f358:	28c00017 	ldw	r3,0(r5)
    f35c:	10c0141e 	bne	r2,r3,f3b0 <strcmp+0x68>
    f360:	027fbff4 	movhi	r9,65279
    f364:	4a7fbfc4 	addi	r9,r9,-257
    f368:	0086303a 	nor	r3,zero,r2
    f36c:	02202074 	movhi	r8,32897
    f370:	1245883a 	add	r2,r2,r9
    f374:	42202004 	addi	r8,r8,-32640
    f378:	10c4703a 	and	r2,r2,r3
    f37c:	1204703a 	and	r2,r2,r8
    f380:	10000226 	beq	r2,zero,f38c <strcmp+0x44>
    f384:	00002306 	br	f414 <strcmp+0xcc>
    f388:	1000221e 	bne	r2,zero,f414 <strcmp+0xcc>
    f38c:	21000104 	addi	r4,r4,4
    f390:	20c00017 	ldw	r3,0(r4)
    f394:	29400104 	addi	r5,r5,4
    f398:	29800017 	ldw	r6,0(r5)
    f39c:	1a4f883a 	add	r7,r3,r9
    f3a0:	00c4303a 	nor	r2,zero,r3
    f3a4:	3884703a 	and	r2,r7,r2
    f3a8:	1204703a 	and	r2,r2,r8
    f3ac:	19bff626 	beq	r3,r6,f388 <__alt_data_end+0xfc00f388>
    f3b0:	20800003 	ldbu	r2,0(r4)
    f3b4:	10c03fcc 	andi	r3,r2,255
    f3b8:	18c0201c 	xori	r3,r3,128
    f3bc:	18ffe004 	addi	r3,r3,-128
    f3c0:	18000c26 	beq	r3,zero,f3f4 <strcmp+0xac>
    f3c4:	29800007 	ldb	r6,0(r5)
    f3c8:	19800326 	beq	r3,r6,f3d8 <strcmp+0x90>
    f3cc:	00001306 	br	f41c <strcmp+0xd4>
    f3d0:	29800007 	ldb	r6,0(r5)
    f3d4:	11800b1e 	bne	r2,r6,f404 <strcmp+0xbc>
    f3d8:	21000044 	addi	r4,r4,1
    f3dc:	20c00003 	ldbu	r3,0(r4)
    f3e0:	29400044 	addi	r5,r5,1
    f3e4:	18803fcc 	andi	r2,r3,255
    f3e8:	1080201c 	xori	r2,r2,128
    f3ec:	10bfe004 	addi	r2,r2,-128
    f3f0:	103ff71e 	bne	r2,zero,f3d0 <__alt_data_end+0xfc00f3d0>
    f3f4:	0007883a 	mov	r3,zero
    f3f8:	28800003 	ldbu	r2,0(r5)
    f3fc:	1885c83a 	sub	r2,r3,r2
    f400:	f800283a 	ret
    f404:	28800003 	ldbu	r2,0(r5)
    f408:	18c03fcc 	andi	r3,r3,255
    f40c:	1885c83a 	sub	r2,r3,r2
    f410:	f800283a 	ret
    f414:	0005883a 	mov	r2,zero
    f418:	f800283a 	ret
    f41c:	10c03fcc 	andi	r3,r2,255
    f420:	003ff506 	br	f3f8 <__alt_data_end+0xfc00f3f8>

0000f424 <strlen>:
    f424:	208000cc 	andi	r2,r4,3
    f428:	10002026 	beq	r2,zero,f4ac <strlen+0x88>
    f42c:	20800007 	ldb	r2,0(r4)
    f430:	10002026 	beq	r2,zero,f4b4 <strlen+0x90>
    f434:	2005883a 	mov	r2,r4
    f438:	00000206 	br	f444 <strlen+0x20>
    f43c:	10c00007 	ldb	r3,0(r2)
    f440:	18001826 	beq	r3,zero,f4a4 <strlen+0x80>
    f444:	10800044 	addi	r2,r2,1
    f448:	10c000cc 	andi	r3,r2,3
    f44c:	183ffb1e 	bne	r3,zero,f43c <__alt_data_end+0xfc00f43c>
    f450:	10c00017 	ldw	r3,0(r2)
    f454:	01ffbff4 	movhi	r7,65279
    f458:	39ffbfc4 	addi	r7,r7,-257
    f45c:	00ca303a 	nor	r5,zero,r3
    f460:	01a02074 	movhi	r6,32897
    f464:	19c7883a 	add	r3,r3,r7
    f468:	31a02004 	addi	r6,r6,-32640
    f46c:	1946703a 	and	r3,r3,r5
    f470:	1986703a 	and	r3,r3,r6
    f474:	1800091e 	bne	r3,zero,f49c <strlen+0x78>
    f478:	10800104 	addi	r2,r2,4
    f47c:	10c00017 	ldw	r3,0(r2)
    f480:	19cb883a 	add	r5,r3,r7
    f484:	00c6303a 	nor	r3,zero,r3
    f488:	28c6703a 	and	r3,r5,r3
    f48c:	1986703a 	and	r3,r3,r6
    f490:	183ff926 	beq	r3,zero,f478 <__alt_data_end+0xfc00f478>
    f494:	00000106 	br	f49c <strlen+0x78>
    f498:	10800044 	addi	r2,r2,1
    f49c:	10c00007 	ldb	r3,0(r2)
    f4a0:	183ffd1e 	bne	r3,zero,f498 <__alt_data_end+0xfc00f498>
    f4a4:	1105c83a 	sub	r2,r2,r4
    f4a8:	f800283a 	ret
    f4ac:	2005883a 	mov	r2,r4
    f4b0:	003fe706 	br	f450 <__alt_data_end+0xfc00f450>
    f4b4:	0005883a 	mov	r2,zero
    f4b8:	f800283a 	ret

0000f4bc <___svfprintf_internal_r>:
    f4bc:	deffb704 	addi	sp,sp,-292
    f4c0:	dfc04815 	stw	ra,288(sp)
    f4c4:	ddc04615 	stw	r23,280(sp)
    f4c8:	d9402d15 	stw	r5,180(sp)
    f4cc:	d9003915 	stw	r4,228(sp)
    f4d0:	302f883a 	mov	r23,r6
    f4d4:	d9c02e15 	stw	r7,184(sp)
    f4d8:	df004715 	stw	fp,284(sp)
    f4dc:	dd804515 	stw	r22,276(sp)
    f4e0:	dd404415 	stw	r21,272(sp)
    f4e4:	dd004315 	stw	r20,268(sp)
    f4e8:	dcc04215 	stw	r19,264(sp)
    f4ec:	dc804115 	stw	r18,260(sp)
    f4f0:	dc404015 	stw	r17,256(sp)
    f4f4:	dc003f15 	stw	r16,252(sp)
    f4f8:	00166c00 	call	166c0 <_localeconv_r>
    f4fc:	10800017 	ldw	r2,0(r2)
    f500:	1009883a 	mov	r4,r2
    f504:	d8803415 	stw	r2,208(sp)
    f508:	000f4240 	call	f424 <strlen>
    f50c:	d8c02d17 	ldw	r3,180(sp)
    f510:	d8803815 	stw	r2,224(sp)
    f514:	1880030b 	ldhu	r2,12(r3)
    f518:	1080200c 	andi	r2,r2,128
    f51c:	10000226 	beq	r2,zero,f528 <___svfprintf_internal_r+0x6c>
    f520:	18800417 	ldw	r2,16(r3)
    f524:	1006b126 	beq	r2,zero,10fec <___svfprintf_internal_r+0x1b30>
    f528:	dcc03917 	ldw	r19,228(sp)
    f52c:	d8c00404 	addi	r3,sp,16
    f530:	054000f4 	movhi	r21,3
    f534:	d9001e04 	addi	r4,sp,120
    f538:	ad6a5884 	addi	r21,r21,-22174
    f53c:	d8c01e15 	stw	r3,120(sp)
    f540:	d8002015 	stw	zero,128(sp)
    f544:	d8001f15 	stw	zero,124(sp)
    f548:	d8003315 	stw	zero,204(sp)
    f54c:	d8003615 	stw	zero,216(sp)
    f550:	d8003715 	stw	zero,220(sp)
    f554:	1811883a 	mov	r8,r3
    f558:	d8003a15 	stw	zero,232(sp)
    f55c:	d8003b15 	stw	zero,236(sp)
    f560:	d8002f15 	stw	zero,188(sp)
    f564:	d9002815 	stw	r4,160(sp)
    f568:	b8800007 	ldb	r2,0(r23)
    f56c:	10027726 	beq	r2,zero,ff4c <___svfprintf_internal_r+0xa90>
    f570:	00c00944 	movi	r3,37
    f574:	b823883a 	mov	r17,r23
    f578:	10c0021e 	bne	r2,r3,f584 <___svfprintf_internal_r+0xc8>
    f57c:	00001406 	br	f5d0 <___svfprintf_internal_r+0x114>
    f580:	10c00326 	beq	r2,r3,f590 <___svfprintf_internal_r+0xd4>
    f584:	8c400044 	addi	r17,r17,1
    f588:	88800007 	ldb	r2,0(r17)
    f58c:	103ffc1e 	bne	r2,zero,f580 <__alt_data_end+0xfc00f580>
    f590:	8de1c83a 	sub	r16,r17,r23
    f594:	80000e26 	beq	r16,zero,f5d0 <___svfprintf_internal_r+0x114>
    f598:	d8c02017 	ldw	r3,128(sp)
    f59c:	d8801f17 	ldw	r2,124(sp)
    f5a0:	45c00015 	stw	r23,0(r8)
    f5a4:	1c07883a 	add	r3,r3,r16
    f5a8:	10800044 	addi	r2,r2,1
    f5ac:	d8c02015 	stw	r3,128(sp)
    f5b0:	44000115 	stw	r16,4(r8)
    f5b4:	d8801f15 	stw	r2,124(sp)
    f5b8:	00c001c4 	movi	r3,7
    f5bc:	18809916 	blt	r3,r2,f824 <___svfprintf_internal_r+0x368>
    f5c0:	42000204 	addi	r8,r8,8
    f5c4:	d9402f17 	ldw	r5,188(sp)
    f5c8:	2c0b883a 	add	r5,r5,r16
    f5cc:	d9402f15 	stw	r5,188(sp)
    f5d0:	88800007 	ldb	r2,0(r17)
    f5d4:	10009a26 	beq	r2,zero,f840 <___svfprintf_internal_r+0x384>
    f5d8:	8dc00044 	addi	r23,r17,1
    f5dc:	8c400047 	ldb	r17,1(r17)
    f5e0:	0021883a 	mov	r16,zero
    f5e4:	00bfffc4 	movi	r2,-1
    f5e8:	0025883a 	mov	r18,zero
    f5ec:	dc002905 	stb	r16,164(sp)
    f5f0:	d8002785 	stb	zero,158(sp)
    f5f4:	d8002b05 	stb	zero,172(sp)
    f5f8:	d8802a15 	stw	r2,168(sp)
    f5fc:	d8003115 	stw	zero,196(sp)
    f600:	05001604 	movi	r20,88
    f604:	05800244 	movi	r22,9
    f608:	4039883a 	mov	fp,r8
    f60c:	9021883a 	mov	r16,r18
    f610:	bdc00044 	addi	r23,r23,1
    f614:	88bff804 	addi	r2,r17,-32
    f618:	a0831e36 	bltu	r20,r2,10294 <___svfprintf_internal_r+0xdd8>
    f61c:	100490ba 	slli	r2,r2,2
    f620:	00c00074 	movhi	r3,1
    f624:	18fd8d04 	addi	r3,r3,-2508
    f628:	10c5883a 	add	r2,r2,r3
    f62c:	10800017 	ldw	r2,0(r2)
    f630:	1000683a 	jmp	r2
    f634:	000101dc 	xori	zero,zero,1031
    f638:	00010294 	movui	zero,1034
    f63c:	00010294 	movui	zero,1034
    f640:	000101d0 	cmplti	zero,zero,1031
    f644:	00010294 	movui	zero,1034
    f648:	00010294 	movui	zero,1034
    f64c:	00010294 	movui	zero,1034
    f650:	00010294 	movui	zero,1034
    f654:	00010294 	movui	zero,1034
    f658:	00010294 	movui	zero,1034
    f65c:	0000f89c 	xori	zero,zero,994
    f660:	000100e0 	cmpeqi	zero,zero,1027
    f664:	00010294 	movui	zero,1034
    f668:	0000f7a8 	cmpgeui	zero,zero,990
    f66c:	0000f8c0 	call	f8c <_ZN3USB10inTransferEhhPtPhh+0xe0>
    f670:	00010294 	movui	zero,1034
    f674:	0000f94c 	andi	zero,zero,997
    f678:	0000f910 	cmplti	zero,zero,996
    f67c:	0000f910 	cmplti	zero,zero,996
    f680:	0000f910 	cmplti	zero,zero,996
    f684:	0000f910 	cmplti	zero,zero,996
    f688:	0000f910 	cmplti	zero,zero,996
    f68c:	0000f910 	cmplti	zero,zero,996
    f690:	0000f910 	cmplti	zero,zero,996
    f694:	0000f910 	cmplti	zero,zero,996
    f698:	0000f910 	cmplti	zero,zero,996
    f69c:	00010294 	movui	zero,1034
    f6a0:	00010294 	movui	zero,1034
    f6a4:	00010294 	movui	zero,1034
    f6a8:	00010294 	movui	zero,1034
    f6ac:	00010294 	movui	zero,1034
    f6b0:	00010294 	movui	zero,1034
    f6b4:	00010294 	movui	zero,1034
    f6b8:	00010294 	movui	zero,1034
    f6bc:	00010294 	movui	zero,1034
    f6c0:	00010294 	movui	zero,1034
    f6c4:	0000fa10 	cmplti	zero,zero,1000
    f6c8:	0000f958 	cmpnei	zero,zero,997
    f6cc:	00010294 	movui	zero,1034
    f6d0:	0000f958 	cmpnei	zero,zero,997
    f6d4:	00010294 	movui	zero,1034
    f6d8:	00010294 	movui	zero,1034
    f6dc:	00010294 	movui	zero,1034
    f6e0:	00010294 	movui	zero,1034
    f6e4:	0000fa04 	movi	zero,1000
    f6e8:	00010294 	movui	zero,1034
    f6ec:	00010294 	movui	zero,1034
    f6f0:	0000fad8 	cmpnei	zero,zero,1003
    f6f4:	00010294 	movui	zero,1034
    f6f8:	00010294 	movui	zero,1034
    f6fc:	00010294 	movui	zero,1034
    f700:	00010294 	movui	zero,1034
    f704:	00010294 	movui	zero,1034
    f708:	0000ff54 	movui	zero,1021
    f70c:	00010294 	movui	zero,1034
    f710:	00010294 	movui	zero,1034
    f714:	0000ffc0 	call	ffc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x68>
    f718:	00010294 	movui	zero,1034
    f71c:	00010294 	movui	zero,1034
    f720:	00010294 	movui	zero,1034
    f724:	00010294 	movui	zero,1034
    f728:	00010294 	movui	zero,1034
    f72c:	00010294 	movui	zero,1034
    f730:	00010294 	movui	zero,1034
    f734:	00010294 	movui	zero,1034
    f738:	00010294 	movui	zero,1034
    f73c:	00010294 	movui	zero,1034
    f740:	0001007c 	xorhi	zero,zero,1025
    f744:	000101fc 	xorhi	zero,zero,1031
    f748:	0000f958 	cmpnei	zero,zero,997
    f74c:	0000f958 	cmpnei	zero,zero,997
    f750:	0000f958 	cmpnei	zero,zero,997
    f754:	00010270 	cmpltui	zero,zero,1033
    f758:	000101fc 	xorhi	zero,zero,1031
    f75c:	00010294 	movui	zero,1034
    f760:	00010294 	movui	zero,1034
    f764:	0001021c 	xori	zero,zero,1032
    f768:	00010294 	movui	zero,1034
    f76c:	00010230 	cmpltui	zero,zero,1032
    f770:	000100c0 	call	100c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x78>
    f774:	0000f7b4 	movhi	zero,990
    f778:	000100f8 	rdprs	zero,zero,1027
    f77c:	00010294 	movui	zero,1034
    f780:	00010104 	movi	zero,1028
    f784:	00010294 	movui	zero,1034
    f788:	00010168 	cmpgeui	zero,zero,1029
    f78c:	00010294 	movui	zero,1034
    f790:	00010294 	movui	zero,1034
    f794:	00010188 	cmpgei	zero,zero,1030
    f798:	d8c03117 	ldw	r3,196(sp)
    f79c:	d8802e15 	stw	r2,184(sp)
    f7a0:	00c7c83a 	sub	r3,zero,r3
    f7a4:	d8c03115 	stw	r3,196(sp)
    f7a8:	84000114 	ori	r16,r16,4
    f7ac:	bc400007 	ldb	r17,0(r23)
    f7b0:	003f9706 	br	f610 <__alt_data_end+0xfc00f610>
    f7b4:	00800c04 	movi	r2,48
    f7b8:	d8802705 	stb	r2,156(sp)
    f7bc:	00801e04 	movi	r2,120
    f7c0:	d8802745 	stb	r2,157(sp)
    f7c4:	d9002a17 	ldw	r4,168(sp)
    f7c8:	d8802e17 	ldw	r2,184(sp)
    f7cc:	d8002785 	stb	zero,158(sp)
    f7d0:	e011883a 	mov	r8,fp
    f7d4:	10c00104 	addi	r3,r2,4
    f7d8:	15000017 	ldw	r20,0(r2)
    f7dc:	002d883a 	mov	r22,zero
    f7e0:	80800094 	ori	r2,r16,2
    f7e4:	2002b616 	blt	r4,zero,102c0 <___svfprintf_internal_r+0xe04>
    f7e8:	00bfdfc4 	movi	r2,-129
    f7ec:	80a4703a 	and	r18,r16,r2
    f7f0:	d8c02e15 	stw	r3,184(sp)
    f7f4:	94800094 	ori	r18,r18,2
    f7f8:	a002a01e 	bne	r20,zero,1027c <___svfprintf_internal_r+0xdc0>
    f7fc:	014000f4 	movhi	r5,3
    f800:	296a5104 	addi	r5,r5,-22204
    f804:	d9403a15 	stw	r5,232(sp)
    f808:	04401e04 	movi	r17,120
    f80c:	d8c02a17 	ldw	r3,168(sp)
    f810:	0039883a 	mov	fp,zero
    f814:	1801e626 	beq	r3,zero,ffb0 <___svfprintf_internal_r+0xaf4>
    f818:	0029883a 	mov	r20,zero
    f81c:	002d883a 	mov	r22,zero
    f820:	00020506 	br	10038 <___svfprintf_internal_r+0xb7c>
    f824:	d9402d17 	ldw	r5,180(sp)
    f828:	d9801e04 	addi	r6,sp,120
    f82c:	9809883a 	mov	r4,r19
    f830:	00184200 	call	18420 <__ssprint_r>
    f834:	1000081e 	bne	r2,zero,f858 <___svfprintf_internal_r+0x39c>
    f838:	da000404 	addi	r8,sp,16
    f83c:	003f6106 	br	f5c4 <__alt_data_end+0xfc00f5c4>
    f840:	d8802017 	ldw	r2,128(sp)
    f844:	10000426 	beq	r2,zero,f858 <___svfprintf_internal_r+0x39c>
    f848:	d9402d17 	ldw	r5,180(sp)
    f84c:	d9003917 	ldw	r4,228(sp)
    f850:	d9801e04 	addi	r6,sp,120
    f854:	00184200 	call	18420 <__ssprint_r>
    f858:	d8802d17 	ldw	r2,180(sp)
    f85c:	10c0030b 	ldhu	r3,12(r2)
    f860:	d8802f17 	ldw	r2,188(sp)
    f864:	18c0100c 	andi	r3,r3,64
    f868:	1806251e 	bne	r3,zero,11100 <___svfprintf_internal_r+0x1c44>
    f86c:	dfc04817 	ldw	ra,288(sp)
    f870:	df004717 	ldw	fp,284(sp)
    f874:	ddc04617 	ldw	r23,280(sp)
    f878:	dd804517 	ldw	r22,276(sp)
    f87c:	dd404417 	ldw	r21,272(sp)
    f880:	dd004317 	ldw	r20,268(sp)
    f884:	dcc04217 	ldw	r19,264(sp)
    f888:	dc804117 	ldw	r18,260(sp)
    f88c:	dc404017 	ldw	r17,256(sp)
    f890:	dc003f17 	ldw	r16,252(sp)
    f894:	dec04904 	addi	sp,sp,292
    f898:	f800283a 	ret
    f89c:	d9002e17 	ldw	r4,184(sp)
    f8a0:	d9402e17 	ldw	r5,184(sp)
    f8a4:	21000017 	ldw	r4,0(r4)
    f8a8:	28800104 	addi	r2,r5,4
    f8ac:	d9003115 	stw	r4,196(sp)
    f8b0:	203fb916 	blt	r4,zero,f798 <__alt_data_end+0xfc00f798>
    f8b4:	d8802e15 	stw	r2,184(sp)
    f8b8:	bc400007 	ldb	r17,0(r23)
    f8bc:	003f5406 	br	f610 <__alt_data_end+0xfc00f610>
    f8c0:	bc400007 	ldb	r17,0(r23)
    f8c4:	01000a84 	movi	r4,42
    f8c8:	b8c00044 	addi	r3,r23,1
    f8cc:	89076926 	beq	r17,r4,11674 <___svfprintf_internal_r+0x21b8>
    f8d0:	8cbff404 	addi	r18,r17,-48
    f8d4:	b486b936 	bltu	r22,r18,113bc <___svfprintf_internal_r+0x1f00>
    f8d8:	0009883a 	mov	r4,zero
    f8dc:	1823883a 	mov	r17,r3
    f8e0:	01400284 	movi	r5,10
    f8e4:	000cda80 	call	cda8 <__mulsi3>
    f8e8:	88c00007 	ldb	r3,0(r17)
    f8ec:	1489883a 	add	r4,r2,r18
    f8f0:	8dc00044 	addi	r23,r17,1
    f8f4:	1cbff404 	addi	r18,r3,-48
    f8f8:	b823883a 	mov	r17,r23
    f8fc:	b4bff82e 	bgeu	r22,r18,f8e0 <__alt_data_end+0xfc00f8e0>
    f900:	1823883a 	mov	r17,r3
    f904:	20060416 	blt	r4,zero,11118 <___svfprintf_internal_r+0x1c5c>
    f908:	d9002a15 	stw	r4,168(sp)
    f90c:	003f4106 	br	f614 <__alt_data_end+0xfc00f614>
    f910:	8cbff404 	addi	r18,r17,-48
    f914:	d8003115 	stw	zero,196(sp)
    f918:	0009883a 	mov	r4,zero
    f91c:	b823883a 	mov	r17,r23
    f920:	01400284 	movi	r5,10
    f924:	000cda80 	call	cda8 <__mulsi3>
    f928:	88c00007 	ldb	r3,0(r17)
    f92c:	9089883a 	add	r4,r18,r2
    f930:	bdc00044 	addi	r23,r23,1
    f934:	1cbff404 	addi	r18,r3,-48
    f938:	b823883a 	mov	r17,r23
    f93c:	b4bff82e 	bgeu	r22,r18,f920 <__alt_data_end+0xfc00f920>
    f940:	1823883a 	mov	r17,r3
    f944:	d9003115 	stw	r4,196(sp)
    f948:	003f3206 	br	f614 <__alt_data_end+0xfc00f614>
    f94c:	84002014 	ori	r16,r16,128
    f950:	bc400007 	ldb	r17,0(r23)
    f954:	003f2e06 	br	f610 <__alt_data_end+0xfc00f610>
    f958:	8025883a 	mov	r18,r16
    f95c:	dc002903 	ldbu	r16,164(sp)
    f960:	e011883a 	mov	r8,fp
    f964:	84003fcc 	andi	r16,r16,255
    f968:	8007721e 	bne	r16,zero,11734 <___svfprintf_internal_r+0x2278>
    f96c:	9080020c 	andi	r2,r18,8
    f970:	1004a526 	beq	r2,zero,10c08 <___svfprintf_internal_r+0x174c>
    f974:	d9002e17 	ldw	r4,184(sp)
    f978:	d9402e17 	ldw	r5,184(sp)
    f97c:	d8802e17 	ldw	r2,184(sp)
    f980:	21000017 	ldw	r4,0(r4)
    f984:	29400117 	ldw	r5,4(r5)
    f988:	10800204 	addi	r2,r2,8
    f98c:	d9003615 	stw	r4,216(sp)
    f990:	d9403715 	stw	r5,220(sp)
    f994:	d8802e15 	stw	r2,184(sp)
    f998:	d9003617 	ldw	r4,216(sp)
    f99c:	d9403717 	ldw	r5,220(sp)
    f9a0:	da003e15 	stw	r8,248(sp)
    f9a4:	04000044 	movi	r16,1
    f9a8:	00182700 	call	18270 <__fpclassifyd>
    f9ac:	da003e17 	ldw	r8,248(sp)
    f9b0:	1404731e 	bne	r2,r16,10b80 <___svfprintf_internal_r+0x16c4>
    f9b4:	d9003617 	ldw	r4,216(sp)
    f9b8:	d9403717 	ldw	r5,220(sp)
    f9bc:	000d883a 	mov	r6,zero
    f9c0:	000f883a 	mov	r7,zero
    f9c4:	001d9740 	call	1d974 <__ledf2>
    f9c8:	da003e17 	ldw	r8,248(sp)
    f9cc:	10061b16 	blt	r2,zero,1123c <___svfprintf_internal_r+0x1d80>
    f9d0:	df002783 	ldbu	fp,158(sp)
    f9d4:	008011c4 	movi	r2,71
    f9d8:	1445810e 	bge	r2,r17,10fe0 <___svfprintf_internal_r+0x1b24>
    f9dc:	040000f4 	movhi	r16,3
    f9e0:	842a4904 	addi	r16,r16,-22236
    f9e4:	00c000c4 	movi	r3,3
    f9e8:	00bfdfc4 	movi	r2,-129
    f9ec:	d8c02915 	stw	r3,164(sp)
    f9f0:	90a4703a 	and	r18,r18,r2
    f9f4:	d8c02b15 	stw	r3,172(sp)
    f9f8:	d8002a15 	stw	zero,168(sp)
    f9fc:	d8003215 	stw	zero,200(sp)
    fa00:	00006c06 	br	fbb4 <___svfprintf_internal_r+0x6f8>
    fa04:	84000214 	ori	r16,r16,8
    fa08:	bc400007 	ldb	r17,0(r23)
    fa0c:	003f0006 	br	f610 <__alt_data_end+0xfc00f610>
    fa10:	8025883a 	mov	r18,r16
    fa14:	dc002903 	ldbu	r16,164(sp)
    fa18:	e011883a 	mov	r8,fp
    fa1c:	84003fcc 	andi	r16,r16,255
    fa20:	80073f1e 	bne	r16,zero,11720 <___svfprintf_internal_r+0x2264>
    fa24:	94800414 	ori	r18,r18,16
    fa28:	9080080c 	andi	r2,r18,32
    fa2c:	1003bb26 	beq	r2,zero,1091c <___svfprintf_internal_r+0x1460>
    fa30:	d9002e17 	ldw	r4,184(sp)
    fa34:	20800117 	ldw	r2,4(r4)
    fa38:	25000017 	ldw	r20,0(r4)
    fa3c:	21000204 	addi	r4,r4,8
    fa40:	d9002e15 	stw	r4,184(sp)
    fa44:	102d883a 	mov	r22,r2
    fa48:	1003bd16 	blt	r2,zero,10940 <___svfprintf_internal_r+0x1484>
    fa4c:	d9002a17 	ldw	r4,168(sp)
    fa50:	df002783 	ldbu	fp,158(sp)
    fa54:	2003d016 	blt	r4,zero,10998 <___svfprintf_internal_r+0x14dc>
    fa58:	00ffdfc4 	movi	r3,-129
    fa5c:	a584b03a 	or	r2,r20,r22
    fa60:	90e4703a 	and	r18,r18,r3
    fa64:	10015026 	beq	r2,zero,ffa8 <___svfprintf_internal_r+0xaec>
    fa68:	b0037026 	beq	r22,zero,1082c <___svfprintf_internal_r+0x1370>
    fa6c:	dc402915 	stw	r17,164(sp)
    fa70:	dc001e04 	addi	r16,sp,120
    fa74:	b023883a 	mov	r17,r22
    fa78:	402d883a 	mov	r22,r8
    fa7c:	a009883a 	mov	r4,r20
    fa80:	880b883a 	mov	r5,r17
    fa84:	01800284 	movi	r6,10
    fa88:	000f883a 	mov	r7,zero
    fa8c:	001bfd00 	call	1bfd0 <__umoddi3>
    fa90:	10800c04 	addi	r2,r2,48
    fa94:	843fffc4 	addi	r16,r16,-1
    fa98:	a009883a 	mov	r4,r20
    fa9c:	880b883a 	mov	r5,r17
    faa0:	80800005 	stb	r2,0(r16)
    faa4:	01800284 	movi	r6,10
    faa8:	000f883a 	mov	r7,zero
    faac:	001b9d40 	call	1b9d4 <__udivdi3>
    fab0:	1029883a 	mov	r20,r2
    fab4:	10c4b03a 	or	r2,r2,r3
    fab8:	1823883a 	mov	r17,r3
    fabc:	103fef1e 	bne	r2,zero,fa7c <__alt_data_end+0xfc00fa7c>
    fac0:	d8c02817 	ldw	r3,160(sp)
    fac4:	dc402917 	ldw	r17,164(sp)
    fac8:	b011883a 	mov	r8,r22
    facc:	1c07c83a 	sub	r3,r3,r16
    fad0:	d8c02b15 	stw	r3,172(sp)
    fad4:	00003106 	br	fb9c <___svfprintf_internal_r+0x6e0>
    fad8:	8025883a 	mov	r18,r16
    fadc:	dc002903 	ldbu	r16,164(sp)
    fae0:	e011883a 	mov	r8,fp
    fae4:	84003fcc 	andi	r16,r16,255
    fae8:	80070a1e 	bne	r16,zero,11714 <___svfprintf_internal_r+0x2258>
    faec:	94800414 	ori	r18,r18,16
    faf0:	9080080c 	andi	r2,r18,32
    faf4:	1002f626 	beq	r2,zero,106d0 <___svfprintf_internal_r+0x1214>
    faf8:	d9002e17 	ldw	r4,184(sp)
    fafc:	d9402a17 	ldw	r5,168(sp)
    fb00:	d8002785 	stb	zero,158(sp)
    fb04:	20800204 	addi	r2,r4,8
    fb08:	25000017 	ldw	r20,0(r4)
    fb0c:	25800117 	ldw	r22,4(r4)
    fb10:	28043716 	blt	r5,zero,10bf0 <___svfprintf_internal_r+0x1734>
    fb14:	013fdfc4 	movi	r4,-129
    fb18:	a586b03a 	or	r3,r20,r22
    fb1c:	d8802e15 	stw	r2,184(sp)
    fb20:	9124703a 	and	r18,r18,r4
    fb24:	1802f71e 	bne	r3,zero,10704 <___svfprintf_internal_r+0x1248>
    fb28:	d9402a17 	ldw	r5,168(sp)
    fb2c:	0039883a 	mov	fp,zero
    fb30:	2806df26 	beq	r5,zero,116b0 <___svfprintf_internal_r+0x21f4>
    fb34:	0029883a 	mov	r20,zero
    fb38:	002d883a 	mov	r22,zero
    fb3c:	dc001e04 	addi	r16,sp,120
    fb40:	a006d0fa 	srli	r3,r20,3
    fb44:	b008977a 	slli	r4,r22,29
    fb48:	b02cd0fa 	srli	r22,r22,3
    fb4c:	a50001cc 	andi	r20,r20,7
    fb50:	a0800c04 	addi	r2,r20,48
    fb54:	843fffc4 	addi	r16,r16,-1
    fb58:	20e8b03a 	or	r20,r4,r3
    fb5c:	80800005 	stb	r2,0(r16)
    fb60:	a586b03a 	or	r3,r20,r22
    fb64:	183ff61e 	bne	r3,zero,fb40 <__alt_data_end+0xfc00fb40>
    fb68:	90c0004c 	andi	r3,r18,1
    fb6c:	18013f26 	beq	r3,zero,1006c <___svfprintf_internal_r+0xbb0>
    fb70:	10803fcc 	andi	r2,r2,255
    fb74:	1080201c 	xori	r2,r2,128
    fb78:	10bfe004 	addi	r2,r2,-128
    fb7c:	00c00c04 	movi	r3,48
    fb80:	10c13a26 	beq	r2,r3,1006c <___svfprintf_internal_r+0xbb0>
    fb84:	80ffffc5 	stb	r3,-1(r16)
    fb88:	d8c02817 	ldw	r3,160(sp)
    fb8c:	80bfffc4 	addi	r2,r16,-1
    fb90:	1021883a 	mov	r16,r2
    fb94:	1887c83a 	sub	r3,r3,r2
    fb98:	d8c02b15 	stw	r3,172(sp)
    fb9c:	d8802b17 	ldw	r2,172(sp)
    fba0:	d9002a17 	ldw	r4,168(sp)
    fba4:	1100010e 	bge	r2,r4,fbac <___svfprintf_internal_r+0x6f0>
    fba8:	2005883a 	mov	r2,r4
    fbac:	d8802915 	stw	r2,164(sp)
    fbb0:	d8003215 	stw	zero,200(sp)
    fbb4:	e7003fcc 	andi	fp,fp,255
    fbb8:	e700201c 	xori	fp,fp,128
    fbbc:	e73fe004 	addi	fp,fp,-128
    fbc0:	e0000326 	beq	fp,zero,fbd0 <___svfprintf_internal_r+0x714>
    fbc4:	d8c02917 	ldw	r3,164(sp)
    fbc8:	18c00044 	addi	r3,r3,1
    fbcc:	d8c02915 	stw	r3,164(sp)
    fbd0:	90c0008c 	andi	r3,r18,2
    fbd4:	d8c02c15 	stw	r3,176(sp)
    fbd8:	18000326 	beq	r3,zero,fbe8 <___svfprintf_internal_r+0x72c>
    fbdc:	d8c02917 	ldw	r3,164(sp)
    fbe0:	18c00084 	addi	r3,r3,2
    fbe4:	d8c02915 	stw	r3,164(sp)
    fbe8:	90c0210c 	andi	r3,r18,132
    fbec:	d8c03015 	stw	r3,192(sp)
    fbf0:	1801c31e 	bne	r3,zero,10300 <___svfprintf_internal_r+0xe44>
    fbf4:	d9003117 	ldw	r4,196(sp)
    fbf8:	d8c02917 	ldw	r3,164(sp)
    fbfc:	20e9c83a 	sub	r20,r4,r3
    fc00:	0501bf0e 	bge	zero,r20,10300 <___svfprintf_internal_r+0xe44>
    fc04:	02400404 	movi	r9,16
    fc08:	d8c02017 	ldw	r3,128(sp)
    fc0c:	d8801f17 	ldw	r2,124(sp)
    fc10:	4d053d0e 	bge	r9,r20,11108 <___svfprintf_internal_r+0x1c4c>
    fc14:	014000f4 	movhi	r5,3
    fc18:	296a5c84 	addi	r5,r5,-22158
    fc1c:	dc403c15 	stw	r17,240(sp)
    fc20:	d9403515 	stw	r5,212(sp)
    fc24:	a023883a 	mov	r17,r20
    fc28:	482d883a 	mov	r22,r9
    fc2c:	9029883a 	mov	r20,r18
    fc30:	070001c4 	movi	fp,7
    fc34:	8025883a 	mov	r18,r16
    fc38:	dc002d17 	ldw	r16,180(sp)
    fc3c:	00000306 	br	fc4c <___svfprintf_internal_r+0x790>
    fc40:	8c7ffc04 	addi	r17,r17,-16
    fc44:	42000204 	addi	r8,r8,8
    fc48:	b440130e 	bge	r22,r17,fc98 <___svfprintf_internal_r+0x7dc>
    fc4c:	010000f4 	movhi	r4,3
    fc50:	18c00404 	addi	r3,r3,16
    fc54:	10800044 	addi	r2,r2,1
    fc58:	212a5c84 	addi	r4,r4,-22158
    fc5c:	41000015 	stw	r4,0(r8)
    fc60:	45800115 	stw	r22,4(r8)
    fc64:	d8c02015 	stw	r3,128(sp)
    fc68:	d8801f15 	stw	r2,124(sp)
    fc6c:	e0bff40e 	bge	fp,r2,fc40 <__alt_data_end+0xfc00fc40>
    fc70:	d9801e04 	addi	r6,sp,120
    fc74:	800b883a 	mov	r5,r16
    fc78:	9809883a 	mov	r4,r19
    fc7c:	00184200 	call	18420 <__ssprint_r>
    fc80:	103ef51e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
    fc84:	8c7ffc04 	addi	r17,r17,-16
    fc88:	d8c02017 	ldw	r3,128(sp)
    fc8c:	d8801f17 	ldw	r2,124(sp)
    fc90:	da000404 	addi	r8,sp,16
    fc94:	b47fed16 	blt	r22,r17,fc4c <__alt_data_end+0xfc00fc4c>
    fc98:	9021883a 	mov	r16,r18
    fc9c:	a025883a 	mov	r18,r20
    fca0:	8829883a 	mov	r20,r17
    fca4:	dc403c17 	ldw	r17,240(sp)
    fca8:	d9403517 	ldw	r5,212(sp)
    fcac:	a0c7883a 	add	r3,r20,r3
    fcb0:	10800044 	addi	r2,r2,1
    fcb4:	41400015 	stw	r5,0(r8)
    fcb8:	45000115 	stw	r20,4(r8)
    fcbc:	d8c02015 	stw	r3,128(sp)
    fcc0:	d8801f15 	stw	r2,124(sp)
    fcc4:	010001c4 	movi	r4,7
    fcc8:	2082c116 	blt	r4,r2,107d0 <___svfprintf_internal_r+0x1314>
    fccc:	df002787 	ldb	fp,158(sp)
    fcd0:	42000204 	addi	r8,r8,8
    fcd4:	e0000c26 	beq	fp,zero,fd08 <___svfprintf_internal_r+0x84c>
    fcd8:	d8801f17 	ldw	r2,124(sp)
    fcdc:	d9002784 	addi	r4,sp,158
    fce0:	18c00044 	addi	r3,r3,1
    fce4:	10800044 	addi	r2,r2,1
    fce8:	41000015 	stw	r4,0(r8)
    fcec:	01000044 	movi	r4,1
    fcf0:	41000115 	stw	r4,4(r8)
    fcf4:	d8c02015 	stw	r3,128(sp)
    fcf8:	d8801f15 	stw	r2,124(sp)
    fcfc:	010001c4 	movi	r4,7
    fd00:	20825a16 	blt	r4,r2,1066c <___svfprintf_internal_r+0x11b0>
    fd04:	42000204 	addi	r8,r8,8
    fd08:	d8802c17 	ldw	r2,176(sp)
    fd0c:	10000c26 	beq	r2,zero,fd40 <___svfprintf_internal_r+0x884>
    fd10:	d8801f17 	ldw	r2,124(sp)
    fd14:	d9002704 	addi	r4,sp,156
    fd18:	18c00084 	addi	r3,r3,2
    fd1c:	10800044 	addi	r2,r2,1
    fd20:	41000015 	stw	r4,0(r8)
    fd24:	01000084 	movi	r4,2
    fd28:	41000115 	stw	r4,4(r8)
    fd2c:	d8c02015 	stw	r3,128(sp)
    fd30:	d8801f15 	stw	r2,124(sp)
    fd34:	010001c4 	movi	r4,7
    fd38:	20825416 	blt	r4,r2,1068c <___svfprintf_internal_r+0x11d0>
    fd3c:	42000204 	addi	r8,r8,8
    fd40:	d9003017 	ldw	r4,192(sp)
    fd44:	00802004 	movi	r2,128
    fd48:	2081b926 	beq	r4,r2,10430 <___svfprintf_internal_r+0xf74>
    fd4c:	d9402a17 	ldw	r5,168(sp)
    fd50:	d8802b17 	ldw	r2,172(sp)
    fd54:	28adc83a 	sub	r22,r5,r2
    fd58:	05802f0e 	bge	zero,r22,fe18 <___svfprintf_internal_r+0x95c>
    fd5c:	07000404 	movi	fp,16
    fd60:	d8801f17 	ldw	r2,124(sp)
    fd64:	e583e20e 	bge	fp,r22,10cf0 <___svfprintf_internal_r+0x1834>
    fd68:	014000f4 	movhi	r5,3
    fd6c:	296a5884 	addi	r5,r5,-22174
    fd70:	dc402a15 	stw	r17,168(sp)
    fd74:	d9402c15 	stw	r5,176(sp)
    fd78:	b023883a 	mov	r17,r22
    fd7c:	050001c4 	movi	r20,7
    fd80:	902d883a 	mov	r22,r18
    fd84:	8025883a 	mov	r18,r16
    fd88:	dc002d17 	ldw	r16,180(sp)
    fd8c:	00000306 	br	fd9c <___svfprintf_internal_r+0x8e0>
    fd90:	8c7ffc04 	addi	r17,r17,-16
    fd94:	42000204 	addi	r8,r8,8
    fd98:	e440110e 	bge	fp,r17,fde0 <___svfprintf_internal_r+0x924>
    fd9c:	18c00404 	addi	r3,r3,16
    fda0:	10800044 	addi	r2,r2,1
    fda4:	45400015 	stw	r21,0(r8)
    fda8:	47000115 	stw	fp,4(r8)
    fdac:	d8c02015 	stw	r3,128(sp)
    fdb0:	d8801f15 	stw	r2,124(sp)
    fdb4:	a0bff60e 	bge	r20,r2,fd90 <__alt_data_end+0xfc00fd90>
    fdb8:	d9801e04 	addi	r6,sp,120
    fdbc:	800b883a 	mov	r5,r16
    fdc0:	9809883a 	mov	r4,r19
    fdc4:	00184200 	call	18420 <__ssprint_r>
    fdc8:	103ea31e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
    fdcc:	8c7ffc04 	addi	r17,r17,-16
    fdd0:	d8c02017 	ldw	r3,128(sp)
    fdd4:	d8801f17 	ldw	r2,124(sp)
    fdd8:	da000404 	addi	r8,sp,16
    fddc:	e47fef16 	blt	fp,r17,fd9c <__alt_data_end+0xfc00fd9c>
    fde0:	9021883a 	mov	r16,r18
    fde4:	b025883a 	mov	r18,r22
    fde8:	882d883a 	mov	r22,r17
    fdec:	dc402a17 	ldw	r17,168(sp)
    fdf0:	d9002c17 	ldw	r4,176(sp)
    fdf4:	1d87883a 	add	r3,r3,r22
    fdf8:	10800044 	addi	r2,r2,1
    fdfc:	41000015 	stw	r4,0(r8)
    fe00:	45800115 	stw	r22,4(r8)
    fe04:	d8c02015 	stw	r3,128(sp)
    fe08:	d8801f15 	stw	r2,124(sp)
    fe0c:	010001c4 	movi	r4,7
    fe10:	20820e16 	blt	r4,r2,1064c <___svfprintf_internal_r+0x1190>
    fe14:	42000204 	addi	r8,r8,8
    fe18:	9080400c 	andi	r2,r18,256
    fe1c:	10013a1e 	bne	r2,zero,10308 <___svfprintf_internal_r+0xe4c>
    fe20:	d9402b17 	ldw	r5,172(sp)
    fe24:	d8801f17 	ldw	r2,124(sp)
    fe28:	44000015 	stw	r16,0(r8)
    fe2c:	1947883a 	add	r3,r3,r5
    fe30:	10800044 	addi	r2,r2,1
    fe34:	41400115 	stw	r5,4(r8)
    fe38:	d8c02015 	stw	r3,128(sp)
    fe3c:	d8801f15 	stw	r2,124(sp)
    fe40:	010001c4 	movi	r4,7
    fe44:	2081f316 	blt	r4,r2,10614 <___svfprintf_internal_r+0x1158>
    fe48:	42000204 	addi	r8,r8,8
    fe4c:	9480010c 	andi	r18,r18,4
    fe50:	90003226 	beq	r18,zero,ff1c <___svfprintf_internal_r+0xa60>
    fe54:	d9403117 	ldw	r5,196(sp)
    fe58:	d8802917 	ldw	r2,164(sp)
    fe5c:	28a1c83a 	sub	r16,r5,r2
    fe60:	04002e0e 	bge	zero,r16,ff1c <___svfprintf_internal_r+0xa60>
    fe64:	04400404 	movi	r17,16
    fe68:	d8801f17 	ldw	r2,124(sp)
    fe6c:	8c04db0e 	bge	r17,r16,111dc <___svfprintf_internal_r+0x1d20>
    fe70:	014000f4 	movhi	r5,3
    fe74:	296a5c84 	addi	r5,r5,-22158
    fe78:	d9403515 	stw	r5,212(sp)
    fe7c:	048001c4 	movi	r18,7
    fe80:	dd002d17 	ldw	r20,180(sp)
    fe84:	00000306 	br	fe94 <___svfprintf_internal_r+0x9d8>
    fe88:	843ffc04 	addi	r16,r16,-16
    fe8c:	42000204 	addi	r8,r8,8
    fe90:	8c00130e 	bge	r17,r16,fee0 <___svfprintf_internal_r+0xa24>
    fe94:	010000f4 	movhi	r4,3
    fe98:	18c00404 	addi	r3,r3,16
    fe9c:	10800044 	addi	r2,r2,1
    fea0:	212a5c84 	addi	r4,r4,-22158
    fea4:	41000015 	stw	r4,0(r8)
    fea8:	44400115 	stw	r17,4(r8)
    feac:	d8c02015 	stw	r3,128(sp)
    feb0:	d8801f15 	stw	r2,124(sp)
    feb4:	90bff40e 	bge	r18,r2,fe88 <__alt_data_end+0xfc00fe88>
    feb8:	d9801e04 	addi	r6,sp,120
    febc:	a00b883a 	mov	r5,r20
    fec0:	9809883a 	mov	r4,r19
    fec4:	00184200 	call	18420 <__ssprint_r>
    fec8:	103e631e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
    fecc:	843ffc04 	addi	r16,r16,-16
    fed0:	d8c02017 	ldw	r3,128(sp)
    fed4:	d8801f17 	ldw	r2,124(sp)
    fed8:	da000404 	addi	r8,sp,16
    fedc:	8c3fed16 	blt	r17,r16,fe94 <__alt_data_end+0xfc00fe94>
    fee0:	d9403517 	ldw	r5,212(sp)
    fee4:	1c07883a 	add	r3,r3,r16
    fee8:	10800044 	addi	r2,r2,1
    feec:	41400015 	stw	r5,0(r8)
    fef0:	44000115 	stw	r16,4(r8)
    fef4:	d8c02015 	stw	r3,128(sp)
    fef8:	d8801f15 	stw	r2,124(sp)
    fefc:	010001c4 	movi	r4,7
    ff00:	2080060e 	bge	r4,r2,ff1c <___svfprintf_internal_r+0xa60>
    ff04:	d9402d17 	ldw	r5,180(sp)
    ff08:	d9801e04 	addi	r6,sp,120
    ff0c:	9809883a 	mov	r4,r19
    ff10:	00184200 	call	18420 <__ssprint_r>
    ff14:	103e501e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
    ff18:	d8c02017 	ldw	r3,128(sp)
    ff1c:	d8803117 	ldw	r2,196(sp)
    ff20:	d9002917 	ldw	r4,164(sp)
    ff24:	1100010e 	bge	r2,r4,ff2c <___svfprintf_internal_r+0xa70>
    ff28:	2005883a 	mov	r2,r4
    ff2c:	d9402f17 	ldw	r5,188(sp)
    ff30:	288b883a 	add	r5,r5,r2
    ff34:	d9402f15 	stw	r5,188(sp)
    ff38:	1801be1e 	bne	r3,zero,10634 <___svfprintf_internal_r+0x1178>
    ff3c:	b8800007 	ldb	r2,0(r23)
    ff40:	d8001f15 	stw	zero,124(sp)
    ff44:	da000404 	addi	r8,sp,16
    ff48:	103d891e 	bne	r2,zero,f570 <__alt_data_end+0xfc00f570>
    ff4c:	b823883a 	mov	r17,r23
    ff50:	003d9f06 	br	f5d0 <__alt_data_end+0xfc00f5d0>
    ff54:	8025883a 	mov	r18,r16
    ff58:	dc002903 	ldbu	r16,164(sp)
    ff5c:	e011883a 	mov	r8,fp
    ff60:	84003fcc 	andi	r16,r16,255
    ff64:	8005e61e 	bne	r16,zero,11700 <___svfprintf_internal_r+0x2244>
    ff68:	94800414 	ori	r18,r18,16
    ff6c:	9080080c 	andi	r2,r18,32
    ff70:	10022026 	beq	r2,zero,107f4 <___svfprintf_internal_r+0x1338>
    ff74:	d9002e17 	ldw	r4,184(sp)
    ff78:	d9402a17 	ldw	r5,168(sp)
    ff7c:	d8002785 	stb	zero,158(sp)
    ff80:	20c00204 	addi	r3,r4,8
    ff84:	25000017 	ldw	r20,0(r4)
    ff88:	25800117 	ldw	r22,4(r4)
    ff8c:	2803ad16 	blt	r5,zero,10e44 <___svfprintf_internal_r+0x1988>
    ff90:	013fdfc4 	movi	r4,-129
    ff94:	a584b03a 	or	r2,r20,r22
    ff98:	d8c02e15 	stw	r3,184(sp)
    ff9c:	9124703a 	and	r18,r18,r4
    ffa0:	0039883a 	mov	fp,zero
    ffa4:	103eb01e 	bne	r2,zero,fa68 <__alt_data_end+0xfc00fa68>
    ffa8:	d8802a17 	ldw	r2,168(sp)
    ffac:	1002e71e 	bne	r2,zero,10b4c <___svfprintf_internal_r+0x1690>
    ffb0:	d8002a15 	stw	zero,168(sp)
    ffb4:	d8002b15 	stw	zero,172(sp)
    ffb8:	dc001e04 	addi	r16,sp,120
    ffbc:	003ef706 	br	fb9c <__alt_data_end+0xfc00fb9c>
    ffc0:	8025883a 	mov	r18,r16
    ffc4:	dc002903 	ldbu	r16,164(sp)
    ffc8:	e011883a 	mov	r8,fp
    ffcc:	84003fcc 	andi	r16,r16,255
    ffd0:	8005c81e 	bne	r16,zero,116f4 <___svfprintf_internal_r+0x2238>
    ffd4:	010000f4 	movhi	r4,3
    ffd8:	212a4c04 	addi	r4,r4,-22224
    ffdc:	d9003a15 	stw	r4,232(sp)
    ffe0:	9080080c 	andi	r2,r18,32
    ffe4:	10007226 	beq	r2,zero,101b0 <___svfprintf_internal_r+0xcf4>
    ffe8:	d9402e17 	ldw	r5,184(sp)
    ffec:	2d000017 	ldw	r20,0(r5)
    fff0:	2d800117 	ldw	r22,4(r5)
    fff4:	29400204 	addi	r5,r5,8
    fff8:	d9402e15 	stw	r5,184(sp)
    fffc:	9080004c 	andi	r2,r18,1
   10000:	1001aa26 	beq	r2,zero,106ac <___svfprintf_internal_r+0x11f0>
   10004:	a584b03a 	or	r2,r20,r22
   10008:	10032526 	beq	r2,zero,10ca0 <___svfprintf_internal_r+0x17e4>
   1000c:	d8c02a17 	ldw	r3,168(sp)
   10010:	00800c04 	movi	r2,48
   10014:	d8802705 	stb	r2,156(sp)
   10018:	dc402745 	stb	r17,157(sp)
   1001c:	d8002785 	stb	zero,158(sp)
   10020:	90800094 	ori	r2,r18,2
   10024:	1804a316 	blt	r3,zero,112b4 <___svfprintf_internal_r+0x1df8>
   10028:	00bfdfc4 	movi	r2,-129
   1002c:	90a4703a 	and	r18,r18,r2
   10030:	94800094 	ori	r18,r18,2
   10034:	0039883a 	mov	fp,zero
   10038:	d9003a17 	ldw	r4,232(sp)
   1003c:	dc001e04 	addi	r16,sp,120
   10040:	a08003cc 	andi	r2,r20,15
   10044:	b006973a 	slli	r3,r22,28
   10048:	2085883a 	add	r2,r4,r2
   1004c:	a028d13a 	srli	r20,r20,4
   10050:	10800003 	ldbu	r2,0(r2)
   10054:	b02cd13a 	srli	r22,r22,4
   10058:	843fffc4 	addi	r16,r16,-1
   1005c:	1d28b03a 	or	r20,r3,r20
   10060:	80800005 	stb	r2,0(r16)
   10064:	a584b03a 	or	r2,r20,r22
   10068:	103ff51e 	bne	r2,zero,10040 <__alt_data_end+0xfc010040>
   1006c:	d8c02817 	ldw	r3,160(sp)
   10070:	1c07c83a 	sub	r3,r3,r16
   10074:	d8c02b15 	stw	r3,172(sp)
   10078:	003ec806 	br	fb9c <__alt_data_end+0xfc00fb9c>
   1007c:	d8c02e17 	ldw	r3,184(sp)
   10080:	d9002e17 	ldw	r4,184(sp)
   10084:	8025883a 	mov	r18,r16
   10088:	18800017 	ldw	r2,0(r3)
   1008c:	21000104 	addi	r4,r4,4
   10090:	00c00044 	movi	r3,1
   10094:	e011883a 	mov	r8,fp
   10098:	d8c02915 	stw	r3,164(sp)
   1009c:	d8002785 	stb	zero,158(sp)
   100a0:	d8801405 	stb	r2,80(sp)
   100a4:	d9002e15 	stw	r4,184(sp)
   100a8:	d8c02b15 	stw	r3,172(sp)
   100ac:	d8002a15 	stw	zero,168(sp)
   100b0:	d8003215 	stw	zero,200(sp)
   100b4:	dc001404 	addi	r16,sp,80
   100b8:	0039883a 	mov	fp,zero
   100bc:	003ec406 	br	fbd0 <__alt_data_end+0xfc00fbd0>
   100c0:	8025883a 	mov	r18,r16
   100c4:	dc002903 	ldbu	r16,164(sp)
   100c8:	e011883a 	mov	r8,fp
   100cc:	84003fcc 	andi	r16,r16,255
   100d0:	803e8726 	beq	r16,zero,faf0 <__alt_data_end+0xfc00faf0>
   100d4:	d8c02b03 	ldbu	r3,172(sp)
   100d8:	d8c02785 	stb	r3,158(sp)
   100dc:	003e8406 	br	faf0 <__alt_data_end+0xfc00faf0>
   100e0:	00c00044 	movi	r3,1
   100e4:	d8c02905 	stb	r3,164(sp)
   100e8:	00c00ac4 	movi	r3,43
   100ec:	d8c02b05 	stb	r3,172(sp)
   100f0:	bc400007 	ldb	r17,0(r23)
   100f4:	003d4606 	br	f610 <__alt_data_end+0xfc00f610>
   100f8:	84000814 	ori	r16,r16,32
   100fc:	bc400007 	ldb	r17,0(r23)
   10100:	003d4306 	br	f610 <__alt_data_end+0xfc00f610>
   10104:	d8802e17 	ldw	r2,184(sp)
   10108:	8025883a 	mov	r18,r16
   1010c:	d8002785 	stb	zero,158(sp)
   10110:	14000017 	ldw	r16,0(r2)
   10114:	e011883a 	mov	r8,fp
   10118:	15000104 	addi	r20,r2,4
   1011c:	80042126 	beq	r16,zero,111a4 <___svfprintf_internal_r+0x1ce8>
   10120:	d8c02a17 	ldw	r3,168(sp)
   10124:	1803ee16 	blt	r3,zero,110e0 <___svfprintf_internal_r+0x1c24>
   10128:	180d883a 	mov	r6,r3
   1012c:	000b883a 	mov	r5,zero
   10130:	8009883a 	mov	r4,r16
   10134:	df003e15 	stw	fp,248(sp)
   10138:	00168ac0 	call	168ac <memchr>
   1013c:	da003e17 	ldw	r8,248(sp)
   10140:	10046a26 	beq	r2,zero,112ec <___svfprintf_internal_r+0x1e30>
   10144:	1405c83a 	sub	r2,r2,r16
   10148:	d8802b15 	stw	r2,172(sp)
   1014c:	1003ea16 	blt	r2,zero,110f8 <___svfprintf_internal_r+0x1c3c>
   10150:	df002783 	ldbu	fp,158(sp)
   10154:	d8802915 	stw	r2,164(sp)
   10158:	dd002e15 	stw	r20,184(sp)
   1015c:	d8002a15 	stw	zero,168(sp)
   10160:	d8003215 	stw	zero,200(sp)
   10164:	003e9306 	br	fbb4 <__alt_data_end+0xfc00fbb4>
   10168:	8025883a 	mov	r18,r16
   1016c:	dc002903 	ldbu	r16,164(sp)
   10170:	e011883a 	mov	r8,fp
   10174:	84003fcc 	andi	r16,r16,255
   10178:	803f7c26 	beq	r16,zero,ff6c <__alt_data_end+0xfc00ff6c>
   1017c:	d8c02b03 	ldbu	r3,172(sp)
   10180:	d8c02785 	stb	r3,158(sp)
   10184:	003f7906 	br	ff6c <__alt_data_end+0xfc00ff6c>
   10188:	8025883a 	mov	r18,r16
   1018c:	dc002903 	ldbu	r16,164(sp)
   10190:	e011883a 	mov	r8,fp
   10194:	84003fcc 	andi	r16,r16,255
   10198:	8005741e 	bne	r16,zero,1176c <___svfprintf_internal_r+0x22b0>
   1019c:	010000f4 	movhi	r4,3
   101a0:	212a5104 	addi	r4,r4,-22204
   101a4:	d9003a15 	stw	r4,232(sp)
   101a8:	9080080c 	andi	r2,r18,32
   101ac:	103f8e1e 	bne	r2,zero,ffe8 <__alt_data_end+0xfc00ffe8>
   101b0:	9080040c 	andi	r2,r18,16
   101b4:	1002a726 	beq	r2,zero,10c54 <___svfprintf_internal_r+0x1798>
   101b8:	d8802e17 	ldw	r2,184(sp)
   101bc:	002d883a 	mov	r22,zero
   101c0:	15000017 	ldw	r20,0(r2)
   101c4:	10800104 	addi	r2,r2,4
   101c8:	d8802e15 	stw	r2,184(sp)
   101cc:	003f8b06 	br	fffc <__alt_data_end+0xfc00fffc>
   101d0:	84000054 	ori	r16,r16,1
   101d4:	bc400007 	ldb	r17,0(r23)
   101d8:	003d0d06 	br	f610 <__alt_data_end+0xfc00f610>
   101dc:	d8802b07 	ldb	r2,172(sp)
   101e0:	1002a41e 	bne	r2,zero,10c74 <___svfprintf_internal_r+0x17b8>
   101e4:	00c00044 	movi	r3,1
   101e8:	d8c02905 	stb	r3,164(sp)
   101ec:	00c00804 	movi	r3,32
   101f0:	d8c02b05 	stb	r3,172(sp)
   101f4:	bc400007 	ldb	r17,0(r23)
   101f8:	003d0506 	br	f610 <__alt_data_end+0xfc00f610>
   101fc:	8025883a 	mov	r18,r16
   10200:	dc002903 	ldbu	r16,164(sp)
   10204:	e011883a 	mov	r8,fp
   10208:	84003fcc 	andi	r16,r16,255
   1020c:	803e0626 	beq	r16,zero,fa28 <__alt_data_end+0xfc00fa28>
   10210:	d8c02b03 	ldbu	r3,172(sp)
   10214:	d8c02785 	stb	r3,158(sp)
   10218:	003e0306 	br	fa28 <__alt_data_end+0xfc00fa28>
   1021c:	bc400007 	ldb	r17,0(r23)
   10220:	00801b04 	movi	r2,108
   10224:	88830a26 	beq	r17,r2,10e50 <___svfprintf_internal_r+0x1994>
   10228:	84000414 	ori	r16,r16,16
   1022c:	003cf806 	br	f610 <__alt_data_end+0xfc00f610>
   10230:	8025883a 	mov	r18,r16
   10234:	dc002903 	ldbu	r16,164(sp)
   10238:	e011883a 	mov	r8,fp
   1023c:	84003fcc 	andi	r16,r16,255
   10240:	8005471e 	bne	r16,zero,11760 <___svfprintf_internal_r+0x22a4>
   10244:	9080080c 	andi	r2,r18,32
   10248:	10028c26 	beq	r2,zero,10c7c <___svfprintf_internal_r+0x17c0>
   1024c:	d9002e17 	ldw	r4,184(sp)
   10250:	d9402f17 	ldw	r5,188(sp)
   10254:	20800017 	ldw	r2,0(r4)
   10258:	2807d7fa 	srai	r3,r5,31
   1025c:	21000104 	addi	r4,r4,4
   10260:	d9002e15 	stw	r4,184(sp)
   10264:	11400015 	stw	r5,0(r2)
   10268:	10c00115 	stw	r3,4(r2)
   1026c:	003cbe06 	br	f568 <__alt_data_end+0xfc00f568>
   10270:	84001014 	ori	r16,r16,64
   10274:	bc400007 	ldb	r17,0(r23)
   10278:	003ce506 	br	f610 <__alt_data_end+0xfc00f610>
   1027c:	010000f4 	movhi	r4,3
   10280:	212a5104 	addi	r4,r4,-22204
   10284:	0039883a 	mov	fp,zero
   10288:	d9003a15 	stw	r4,232(sp)
   1028c:	04401e04 	movi	r17,120
   10290:	003f6906 	br	10038 <__alt_data_end+0xfc010038>
   10294:	8025883a 	mov	r18,r16
   10298:	dc002903 	ldbu	r16,164(sp)
   1029c:	e011883a 	mov	r8,fp
   102a0:	84003fcc 	andi	r16,r16,255
   102a4:	8005261e 	bne	r16,zero,11740 <___svfprintf_internal_r+0x2284>
   102a8:	883d6526 	beq	r17,zero,f840 <__alt_data_end+0xfc00f840>
   102ac:	00c00044 	movi	r3,1
   102b0:	d8c02915 	stw	r3,164(sp)
   102b4:	dc401405 	stb	r17,80(sp)
   102b8:	d8002785 	stb	zero,158(sp)
   102bc:	003f7a06 	br	100a8 <__alt_data_end+0xfc0100a8>
   102c0:	010000f4 	movhi	r4,3
   102c4:	212a5104 	addi	r4,r4,-22204
   102c8:	d9003a15 	stw	r4,232(sp)
   102cc:	d8c02e15 	stw	r3,184(sp)
   102d0:	1025883a 	mov	r18,r2
   102d4:	04401e04 	movi	r17,120
   102d8:	a584b03a 	or	r2,r20,r22
   102dc:	1000fa1e 	bne	r2,zero,106c8 <___svfprintf_internal_r+0x120c>
   102e0:	0039883a 	mov	fp,zero
   102e4:	00800084 	movi	r2,2
   102e8:	10803fcc 	andi	r2,r2,255
   102ec:	00c00044 	movi	r3,1
   102f0:	10c21626 	beq	r2,r3,10b4c <___svfprintf_internal_r+0x1690>
   102f4:	00c00084 	movi	r3,2
   102f8:	10fe0e1e 	bne	r2,r3,fb34 <__alt_data_end+0xfc00fb34>
   102fc:	003d4606 	br	f818 <__alt_data_end+0xfc00f818>
   10300:	d8c02017 	ldw	r3,128(sp)
   10304:	003e7306 	br	fcd4 <__alt_data_end+0xfc00fcd4>
   10308:	00801944 	movi	r2,101
   1030c:	14407c0e 	bge	r2,r17,10500 <___svfprintf_internal_r+0x1044>
   10310:	d9003617 	ldw	r4,216(sp)
   10314:	d9403717 	ldw	r5,220(sp)
   10318:	000d883a 	mov	r6,zero
   1031c:	000f883a 	mov	r7,zero
   10320:	d8c03d15 	stw	r3,244(sp)
   10324:	da003e15 	stw	r8,248(sp)
   10328:	001d8100 	call	1d810 <__eqdf2>
   1032c:	d8c03d17 	ldw	r3,244(sp)
   10330:	da003e17 	ldw	r8,248(sp)
   10334:	1000f51e 	bne	r2,zero,1070c <___svfprintf_internal_r+0x1250>
   10338:	d8801f17 	ldw	r2,124(sp)
   1033c:	010000f4 	movhi	r4,3
   10340:	212a5804 	addi	r4,r4,-22176
   10344:	18c00044 	addi	r3,r3,1
   10348:	10800044 	addi	r2,r2,1
   1034c:	41000015 	stw	r4,0(r8)
   10350:	01000044 	movi	r4,1
   10354:	41000115 	stw	r4,4(r8)
   10358:	d8c02015 	stw	r3,128(sp)
   1035c:	d8801f15 	stw	r2,124(sp)
   10360:	010001c4 	movi	r4,7
   10364:	20826616 	blt	r4,r2,10d00 <___svfprintf_internal_r+0x1844>
   10368:	42000204 	addi	r8,r8,8
   1036c:	d8802617 	ldw	r2,152(sp)
   10370:	d9403317 	ldw	r5,204(sp)
   10374:	11400216 	blt	r2,r5,10380 <___svfprintf_internal_r+0xec4>
   10378:	9080004c 	andi	r2,r18,1
   1037c:	103eb326 	beq	r2,zero,fe4c <__alt_data_end+0xfc00fe4c>
   10380:	d8803817 	ldw	r2,224(sp)
   10384:	d9003417 	ldw	r4,208(sp)
   10388:	d9403817 	ldw	r5,224(sp)
   1038c:	1887883a 	add	r3,r3,r2
   10390:	d8801f17 	ldw	r2,124(sp)
   10394:	41000015 	stw	r4,0(r8)
   10398:	41400115 	stw	r5,4(r8)
   1039c:	10800044 	addi	r2,r2,1
   103a0:	d8c02015 	stw	r3,128(sp)
   103a4:	d8801f15 	stw	r2,124(sp)
   103a8:	010001c4 	movi	r4,7
   103ac:	2082af16 	blt	r4,r2,10e6c <___svfprintf_internal_r+0x19b0>
   103b0:	42000204 	addi	r8,r8,8
   103b4:	d8803317 	ldw	r2,204(sp)
   103b8:	143fffc4 	addi	r16,r2,-1
   103bc:	043ea30e 	bge	zero,r16,fe4c <__alt_data_end+0xfc00fe4c>
   103c0:	04400404 	movi	r17,16
   103c4:	d8801f17 	ldw	r2,124(sp)
   103c8:	8c00860e 	bge	r17,r16,105e4 <___svfprintf_internal_r+0x1128>
   103cc:	014000f4 	movhi	r5,3
   103d0:	296a5884 	addi	r5,r5,-22174
   103d4:	d9402c15 	stw	r5,176(sp)
   103d8:	058001c4 	movi	r22,7
   103dc:	dd002d17 	ldw	r20,180(sp)
   103e0:	00000306 	br	103f0 <___svfprintf_internal_r+0xf34>
   103e4:	42000204 	addi	r8,r8,8
   103e8:	843ffc04 	addi	r16,r16,-16
   103ec:	8c00800e 	bge	r17,r16,105f0 <___svfprintf_internal_r+0x1134>
   103f0:	18c00404 	addi	r3,r3,16
   103f4:	10800044 	addi	r2,r2,1
   103f8:	45400015 	stw	r21,0(r8)
   103fc:	44400115 	stw	r17,4(r8)
   10400:	d8c02015 	stw	r3,128(sp)
   10404:	d8801f15 	stw	r2,124(sp)
   10408:	b0bff60e 	bge	r22,r2,103e4 <__alt_data_end+0xfc0103e4>
   1040c:	d9801e04 	addi	r6,sp,120
   10410:	a00b883a 	mov	r5,r20
   10414:	9809883a 	mov	r4,r19
   10418:	00184200 	call	18420 <__ssprint_r>
   1041c:	103d0e1e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10420:	d8c02017 	ldw	r3,128(sp)
   10424:	d8801f17 	ldw	r2,124(sp)
   10428:	da000404 	addi	r8,sp,16
   1042c:	003fee06 	br	103e8 <__alt_data_end+0xfc0103e8>
   10430:	d9403117 	ldw	r5,196(sp)
   10434:	d8802917 	ldw	r2,164(sp)
   10438:	28adc83a 	sub	r22,r5,r2
   1043c:	05be430e 	bge	zero,r22,fd4c <__alt_data_end+0xfc00fd4c>
   10440:	07000404 	movi	fp,16
   10444:	d8801f17 	ldw	r2,124(sp)
   10448:	e583a20e 	bge	fp,r22,112d4 <___svfprintf_internal_r+0x1e18>
   1044c:	014000f4 	movhi	r5,3
   10450:	296a5884 	addi	r5,r5,-22174
   10454:	dc403015 	stw	r17,192(sp)
   10458:	d9402c15 	stw	r5,176(sp)
   1045c:	b023883a 	mov	r17,r22
   10460:	050001c4 	movi	r20,7
   10464:	902d883a 	mov	r22,r18
   10468:	8025883a 	mov	r18,r16
   1046c:	dc002d17 	ldw	r16,180(sp)
   10470:	00000306 	br	10480 <___svfprintf_internal_r+0xfc4>
   10474:	8c7ffc04 	addi	r17,r17,-16
   10478:	42000204 	addi	r8,r8,8
   1047c:	e440110e 	bge	fp,r17,104c4 <___svfprintf_internal_r+0x1008>
   10480:	18c00404 	addi	r3,r3,16
   10484:	10800044 	addi	r2,r2,1
   10488:	45400015 	stw	r21,0(r8)
   1048c:	47000115 	stw	fp,4(r8)
   10490:	d8c02015 	stw	r3,128(sp)
   10494:	d8801f15 	stw	r2,124(sp)
   10498:	a0bff60e 	bge	r20,r2,10474 <__alt_data_end+0xfc010474>
   1049c:	d9801e04 	addi	r6,sp,120
   104a0:	800b883a 	mov	r5,r16
   104a4:	9809883a 	mov	r4,r19
   104a8:	00184200 	call	18420 <__ssprint_r>
   104ac:	103cea1e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   104b0:	8c7ffc04 	addi	r17,r17,-16
   104b4:	d8c02017 	ldw	r3,128(sp)
   104b8:	d8801f17 	ldw	r2,124(sp)
   104bc:	da000404 	addi	r8,sp,16
   104c0:	e47fef16 	blt	fp,r17,10480 <__alt_data_end+0xfc010480>
   104c4:	9021883a 	mov	r16,r18
   104c8:	b025883a 	mov	r18,r22
   104cc:	882d883a 	mov	r22,r17
   104d0:	dc403017 	ldw	r17,192(sp)
   104d4:	d9002c17 	ldw	r4,176(sp)
   104d8:	1d87883a 	add	r3,r3,r22
   104dc:	10800044 	addi	r2,r2,1
   104e0:	41000015 	stw	r4,0(r8)
   104e4:	45800115 	stw	r22,4(r8)
   104e8:	d8c02015 	stw	r3,128(sp)
   104ec:	d8801f15 	stw	r2,124(sp)
   104f0:	010001c4 	movi	r4,7
   104f4:	20819a16 	blt	r4,r2,10b60 <___svfprintf_internal_r+0x16a4>
   104f8:	42000204 	addi	r8,r8,8
   104fc:	003e1306 	br	fd4c <__alt_data_end+0xfc00fd4c>
   10500:	d9403317 	ldw	r5,204(sp)
   10504:	00800044 	movi	r2,1
   10508:	18c00044 	addi	r3,r3,1
   1050c:	1141710e 	bge	r2,r5,10ad4 <___svfprintf_internal_r+0x1618>
   10510:	dc401f17 	ldw	r17,124(sp)
   10514:	00800044 	movi	r2,1
   10518:	40800115 	stw	r2,4(r8)
   1051c:	8c400044 	addi	r17,r17,1
   10520:	44000015 	stw	r16,0(r8)
   10524:	d8c02015 	stw	r3,128(sp)
   10528:	dc401f15 	stw	r17,124(sp)
   1052c:	008001c4 	movi	r2,7
   10530:	14417416 	blt	r2,r17,10b04 <___svfprintf_internal_r+0x1648>
   10534:	42000204 	addi	r8,r8,8
   10538:	d8803817 	ldw	r2,224(sp)
   1053c:	d9003417 	ldw	r4,208(sp)
   10540:	8c400044 	addi	r17,r17,1
   10544:	10c7883a 	add	r3,r2,r3
   10548:	40800115 	stw	r2,4(r8)
   1054c:	41000015 	stw	r4,0(r8)
   10550:	d8c02015 	stw	r3,128(sp)
   10554:	dc401f15 	stw	r17,124(sp)
   10558:	008001c4 	movi	r2,7
   1055c:	14417216 	blt	r2,r17,10b28 <___svfprintf_internal_r+0x166c>
   10560:	45800204 	addi	r22,r8,8
   10564:	d9003617 	ldw	r4,216(sp)
   10568:	d9403717 	ldw	r5,220(sp)
   1056c:	000d883a 	mov	r6,zero
   10570:	000f883a 	mov	r7,zero
   10574:	d8c03d15 	stw	r3,244(sp)
   10578:	001d8100 	call	1d810 <__eqdf2>
   1057c:	d8c03d17 	ldw	r3,244(sp)
   10580:	1000b326 	beq	r2,zero,10850 <___svfprintf_internal_r+0x1394>
   10584:	d9403317 	ldw	r5,204(sp)
   10588:	84000044 	addi	r16,r16,1
   1058c:	8c400044 	addi	r17,r17,1
   10590:	28bfffc4 	addi	r2,r5,-1
   10594:	1887883a 	add	r3,r3,r2
   10598:	b0800115 	stw	r2,4(r22)
   1059c:	b4000015 	stw	r16,0(r22)
   105a0:	d8c02015 	stw	r3,128(sp)
   105a4:	dc401f15 	stw	r17,124(sp)
   105a8:	008001c4 	movi	r2,7
   105ac:	1440d216 	blt	r2,r17,108f8 <___svfprintf_internal_r+0x143c>
   105b0:	b5800204 	addi	r22,r22,8
   105b4:	d9003b17 	ldw	r4,236(sp)
   105b8:	df0022c4 	addi	fp,sp,139
   105bc:	8c400044 	addi	r17,r17,1
   105c0:	20c7883a 	add	r3,r4,r3
   105c4:	b7000015 	stw	fp,0(r22)
   105c8:	b1000115 	stw	r4,4(r22)
   105cc:	d8c02015 	stw	r3,128(sp)
   105d0:	dc401f15 	stw	r17,124(sp)
   105d4:	008001c4 	movi	r2,7
   105d8:	14400e16 	blt	r2,r17,10614 <___svfprintf_internal_r+0x1158>
   105dc:	b2000204 	addi	r8,r22,8
   105e0:	003e1a06 	br	fe4c <__alt_data_end+0xfc00fe4c>
   105e4:	010000f4 	movhi	r4,3
   105e8:	212a5884 	addi	r4,r4,-22174
   105ec:	d9002c15 	stw	r4,176(sp)
   105f0:	d9002c17 	ldw	r4,176(sp)
   105f4:	1c07883a 	add	r3,r3,r16
   105f8:	44000115 	stw	r16,4(r8)
   105fc:	41000015 	stw	r4,0(r8)
   10600:	10800044 	addi	r2,r2,1
   10604:	d8c02015 	stw	r3,128(sp)
   10608:	d8801f15 	stw	r2,124(sp)
   1060c:	010001c4 	movi	r4,7
   10610:	20be0d0e 	bge	r4,r2,fe48 <__alt_data_end+0xfc00fe48>
   10614:	d9402d17 	ldw	r5,180(sp)
   10618:	d9801e04 	addi	r6,sp,120
   1061c:	9809883a 	mov	r4,r19
   10620:	00184200 	call	18420 <__ssprint_r>
   10624:	103c8c1e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10628:	d8c02017 	ldw	r3,128(sp)
   1062c:	da000404 	addi	r8,sp,16
   10630:	003e0606 	br	fe4c <__alt_data_end+0xfc00fe4c>
   10634:	d9402d17 	ldw	r5,180(sp)
   10638:	d9801e04 	addi	r6,sp,120
   1063c:	9809883a 	mov	r4,r19
   10640:	00184200 	call	18420 <__ssprint_r>
   10644:	103e3d26 	beq	r2,zero,ff3c <__alt_data_end+0xfc00ff3c>
   10648:	003c8306 	br	f858 <__alt_data_end+0xfc00f858>
   1064c:	d9402d17 	ldw	r5,180(sp)
   10650:	d9801e04 	addi	r6,sp,120
   10654:	9809883a 	mov	r4,r19
   10658:	00184200 	call	18420 <__ssprint_r>
   1065c:	103c7e1e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10660:	d8c02017 	ldw	r3,128(sp)
   10664:	da000404 	addi	r8,sp,16
   10668:	003deb06 	br	fe18 <__alt_data_end+0xfc00fe18>
   1066c:	d9402d17 	ldw	r5,180(sp)
   10670:	d9801e04 	addi	r6,sp,120
   10674:	9809883a 	mov	r4,r19
   10678:	00184200 	call	18420 <__ssprint_r>
   1067c:	103c761e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10680:	d8c02017 	ldw	r3,128(sp)
   10684:	da000404 	addi	r8,sp,16
   10688:	003d9f06 	br	fd08 <__alt_data_end+0xfc00fd08>
   1068c:	d9402d17 	ldw	r5,180(sp)
   10690:	d9801e04 	addi	r6,sp,120
   10694:	9809883a 	mov	r4,r19
   10698:	00184200 	call	18420 <__ssprint_r>
   1069c:	103c6e1e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   106a0:	d8c02017 	ldw	r3,128(sp)
   106a4:	da000404 	addi	r8,sp,16
   106a8:	003da506 	br	fd40 <__alt_data_end+0xfc00fd40>
   106ac:	d9402a17 	ldw	r5,168(sp)
   106b0:	d8002785 	stb	zero,158(sp)
   106b4:	283f0816 	blt	r5,zero,102d8 <__alt_data_end+0xfc0102d8>
   106b8:	00ffdfc4 	movi	r3,-129
   106bc:	a584b03a 	or	r2,r20,r22
   106c0:	90e4703a 	and	r18,r18,r3
   106c4:	103c5126 	beq	r2,zero,f80c <__alt_data_end+0xfc00f80c>
   106c8:	0039883a 	mov	fp,zero
   106cc:	003e5a06 	br	10038 <__alt_data_end+0xfc010038>
   106d0:	9080040c 	andi	r2,r18,16
   106d4:	10013d26 	beq	r2,zero,10bcc <___svfprintf_internal_r+0x1710>
   106d8:	d8c02e17 	ldw	r3,184(sp)
   106dc:	d9002a17 	ldw	r4,168(sp)
   106e0:	d8002785 	stb	zero,158(sp)
   106e4:	18800104 	addi	r2,r3,4
   106e8:	1d000017 	ldw	r20,0(r3)
   106ec:	002d883a 	mov	r22,zero
   106f0:	20013f16 	blt	r4,zero,10bf0 <___svfprintf_internal_r+0x1734>
   106f4:	00ffdfc4 	movi	r3,-129
   106f8:	d8802e15 	stw	r2,184(sp)
   106fc:	90e4703a 	and	r18,r18,r3
   10700:	a03d0926 	beq	r20,zero,fb28 <__alt_data_end+0xfc00fb28>
   10704:	0039883a 	mov	fp,zero
   10708:	003d0c06 	br	fb3c <__alt_data_end+0xfc00fb3c>
   1070c:	dc402617 	ldw	r17,152(sp)
   10710:	0441830e 	bge	zero,r17,10d20 <___svfprintf_internal_r+0x1864>
   10714:	dc403217 	ldw	r17,200(sp)
   10718:	d8803317 	ldw	r2,204(sp)
   1071c:	1440010e 	bge	r2,r17,10724 <___svfprintf_internal_r+0x1268>
   10720:	1023883a 	mov	r17,r2
   10724:	04400a0e 	bge	zero,r17,10750 <___svfprintf_internal_r+0x1294>
   10728:	d8801f17 	ldw	r2,124(sp)
   1072c:	1c47883a 	add	r3,r3,r17
   10730:	44000015 	stw	r16,0(r8)
   10734:	10800044 	addi	r2,r2,1
   10738:	44400115 	stw	r17,4(r8)
   1073c:	d8c02015 	stw	r3,128(sp)
   10740:	d8801f15 	stw	r2,124(sp)
   10744:	010001c4 	movi	r4,7
   10748:	20827516 	blt	r4,r2,11120 <___svfprintf_internal_r+0x1c64>
   1074c:	42000204 	addi	r8,r8,8
   10750:	88027b16 	blt	r17,zero,11140 <___svfprintf_internal_r+0x1c84>
   10754:	d9003217 	ldw	r4,200(sp)
   10758:	2463c83a 	sub	r17,r4,r17
   1075c:	0440990e 	bge	zero,r17,109c4 <___svfprintf_internal_r+0x1508>
   10760:	05800404 	movi	r22,16
   10764:	d8801f17 	ldw	r2,124(sp)
   10768:	b441530e 	bge	r22,r17,10cb8 <___svfprintf_internal_r+0x17fc>
   1076c:	010000f4 	movhi	r4,3
   10770:	212a5884 	addi	r4,r4,-22174
   10774:	d9002c15 	stw	r4,176(sp)
   10778:	070001c4 	movi	fp,7
   1077c:	dd002d17 	ldw	r20,180(sp)
   10780:	00000306 	br	10790 <___svfprintf_internal_r+0x12d4>
   10784:	42000204 	addi	r8,r8,8
   10788:	8c7ffc04 	addi	r17,r17,-16
   1078c:	b4414d0e 	bge	r22,r17,10cc4 <___svfprintf_internal_r+0x1808>
   10790:	18c00404 	addi	r3,r3,16
   10794:	10800044 	addi	r2,r2,1
   10798:	45400015 	stw	r21,0(r8)
   1079c:	45800115 	stw	r22,4(r8)
   107a0:	d8c02015 	stw	r3,128(sp)
   107a4:	d8801f15 	stw	r2,124(sp)
   107a8:	e0bff60e 	bge	fp,r2,10784 <__alt_data_end+0xfc010784>
   107ac:	d9801e04 	addi	r6,sp,120
   107b0:	a00b883a 	mov	r5,r20
   107b4:	9809883a 	mov	r4,r19
   107b8:	00184200 	call	18420 <__ssprint_r>
   107bc:	103c261e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   107c0:	d8c02017 	ldw	r3,128(sp)
   107c4:	d8801f17 	ldw	r2,124(sp)
   107c8:	da000404 	addi	r8,sp,16
   107cc:	003fee06 	br	10788 <__alt_data_end+0xfc010788>
   107d0:	d9402d17 	ldw	r5,180(sp)
   107d4:	d9801e04 	addi	r6,sp,120
   107d8:	9809883a 	mov	r4,r19
   107dc:	00184200 	call	18420 <__ssprint_r>
   107e0:	103c1d1e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   107e4:	d8c02017 	ldw	r3,128(sp)
   107e8:	df002787 	ldb	fp,158(sp)
   107ec:	da000404 	addi	r8,sp,16
   107f0:	003d3806 	br	fcd4 <__alt_data_end+0xfc00fcd4>
   107f4:	9080040c 	andi	r2,r18,16
   107f8:	10005c26 	beq	r2,zero,1096c <___svfprintf_internal_r+0x14b0>
   107fc:	d8c02e17 	ldw	r3,184(sp)
   10800:	d9002a17 	ldw	r4,168(sp)
   10804:	d8002785 	stb	zero,158(sp)
   10808:	18800104 	addi	r2,r3,4
   1080c:	1d000017 	ldw	r20,0(r3)
   10810:	002d883a 	mov	r22,zero
   10814:	20005e16 	blt	r4,zero,10990 <___svfprintf_internal_r+0x14d4>
   10818:	00ffdfc4 	movi	r3,-129
   1081c:	d8802e15 	stw	r2,184(sp)
   10820:	90e4703a 	and	r18,r18,r3
   10824:	0039883a 	mov	fp,zero
   10828:	a03ddf26 	beq	r20,zero,ffa8 <__alt_data_end+0xfc00ffa8>
   1082c:	00800244 	movi	r2,9
   10830:	153c8e36 	bltu	r2,r20,fa6c <__alt_data_end+0xfc00fa6c>
   10834:	a5000c04 	addi	r20,r20,48
   10838:	dc001dc4 	addi	r16,sp,119
   1083c:	dd001dc5 	stb	r20,119(sp)
   10840:	d8c02817 	ldw	r3,160(sp)
   10844:	1c07c83a 	sub	r3,r3,r16
   10848:	d8c02b15 	stw	r3,172(sp)
   1084c:	003cd306 	br	fb9c <__alt_data_end+0xfc00fb9c>
   10850:	d8803317 	ldw	r2,204(sp)
   10854:	143fffc4 	addi	r16,r2,-1
   10858:	043f560e 	bge	zero,r16,105b4 <__alt_data_end+0xfc0105b4>
   1085c:	07000404 	movi	fp,16
   10860:	e403530e 	bge	fp,r16,115b0 <___svfprintf_internal_r+0x20f4>
   10864:	014000f4 	movhi	r5,3
   10868:	296a5884 	addi	r5,r5,-22174
   1086c:	d9402c15 	stw	r5,176(sp)
   10870:	01c001c4 	movi	r7,7
   10874:	dd002d17 	ldw	r20,180(sp)
   10878:	00000306 	br	10888 <___svfprintf_internal_r+0x13cc>
   1087c:	843ffc04 	addi	r16,r16,-16
   10880:	b5800204 	addi	r22,r22,8
   10884:	e400130e 	bge	fp,r16,108d4 <___svfprintf_internal_r+0x1418>
   10888:	18c00404 	addi	r3,r3,16
   1088c:	8c400044 	addi	r17,r17,1
   10890:	b5400015 	stw	r21,0(r22)
   10894:	b7000115 	stw	fp,4(r22)
   10898:	d8c02015 	stw	r3,128(sp)
   1089c:	dc401f15 	stw	r17,124(sp)
   108a0:	3c7ff60e 	bge	r7,r17,1087c <__alt_data_end+0xfc01087c>
   108a4:	d9801e04 	addi	r6,sp,120
   108a8:	a00b883a 	mov	r5,r20
   108ac:	9809883a 	mov	r4,r19
   108b0:	d9c03d15 	stw	r7,244(sp)
   108b4:	00184200 	call	18420 <__ssprint_r>
   108b8:	d9c03d17 	ldw	r7,244(sp)
   108bc:	103be61e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   108c0:	843ffc04 	addi	r16,r16,-16
   108c4:	d8c02017 	ldw	r3,128(sp)
   108c8:	dc401f17 	ldw	r17,124(sp)
   108cc:	dd800404 	addi	r22,sp,16
   108d0:	e43fed16 	blt	fp,r16,10888 <__alt_data_end+0xfc010888>
   108d4:	d8802c17 	ldw	r2,176(sp)
   108d8:	1c07883a 	add	r3,r3,r16
   108dc:	8c400044 	addi	r17,r17,1
   108e0:	b0800015 	stw	r2,0(r22)
   108e4:	b4000115 	stw	r16,4(r22)
   108e8:	d8c02015 	stw	r3,128(sp)
   108ec:	dc401f15 	stw	r17,124(sp)
   108f0:	008001c4 	movi	r2,7
   108f4:	147f2e0e 	bge	r2,r17,105b0 <__alt_data_end+0xfc0105b0>
   108f8:	d9402d17 	ldw	r5,180(sp)
   108fc:	d9801e04 	addi	r6,sp,120
   10900:	9809883a 	mov	r4,r19
   10904:	00184200 	call	18420 <__ssprint_r>
   10908:	103bd31e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   1090c:	d8c02017 	ldw	r3,128(sp)
   10910:	dc401f17 	ldw	r17,124(sp)
   10914:	dd800404 	addi	r22,sp,16
   10918:	003f2606 	br	105b4 <__alt_data_end+0xfc0105b4>
   1091c:	9080040c 	andi	r2,r18,16
   10920:	1000c326 	beq	r2,zero,10c30 <___svfprintf_internal_r+0x1774>
   10924:	d9402e17 	ldw	r5,184(sp)
   10928:	2d000017 	ldw	r20,0(r5)
   1092c:	29400104 	addi	r5,r5,4
   10930:	d9402e15 	stw	r5,184(sp)
   10934:	a02dd7fa 	srai	r22,r20,31
   10938:	b005883a 	mov	r2,r22
   1093c:	103c430e 	bge	r2,zero,fa4c <__alt_data_end+0xfc00fa4c>
   10940:	d9402a17 	ldw	r5,168(sp)
   10944:	0529c83a 	sub	r20,zero,r20
   10948:	07000b44 	movi	fp,45
   1094c:	a004c03a 	cmpne	r2,r20,zero
   10950:	05adc83a 	sub	r22,zero,r22
   10954:	df002785 	stb	fp,158(sp)
   10958:	b0adc83a 	sub	r22,r22,r2
   1095c:	28022e16 	blt	r5,zero,11218 <___svfprintf_internal_r+0x1d5c>
   10960:	00bfdfc4 	movi	r2,-129
   10964:	90a4703a 	and	r18,r18,r2
   10968:	003c3f06 	br	fa68 <__alt_data_end+0xfc00fa68>
   1096c:	9080100c 	andi	r2,r18,64
   10970:	d8002785 	stb	zero,158(sp)
   10974:	10012526 	beq	r2,zero,10e0c <___svfprintf_internal_r+0x1950>
   10978:	d9402e17 	ldw	r5,184(sp)
   1097c:	d8c02a17 	ldw	r3,168(sp)
   10980:	002d883a 	mov	r22,zero
   10984:	28800104 	addi	r2,r5,4
   10988:	2d00000b 	ldhu	r20,0(r5)
   1098c:	183fa20e 	bge	r3,zero,10818 <__alt_data_end+0xfc010818>
   10990:	d8802e15 	stw	r2,184(sp)
   10994:	0039883a 	mov	fp,zero
   10998:	a584b03a 	or	r2,r20,r22
   1099c:	103c321e 	bne	r2,zero,fa68 <__alt_data_end+0xfc00fa68>
   109a0:	00800044 	movi	r2,1
   109a4:	003e5006 	br	102e8 <__alt_data_end+0xfc0102e8>
   109a8:	d9402d17 	ldw	r5,180(sp)
   109ac:	d9801e04 	addi	r6,sp,120
   109b0:	9809883a 	mov	r4,r19
   109b4:	00184200 	call	18420 <__ssprint_r>
   109b8:	103ba71e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   109bc:	d8c02017 	ldw	r3,128(sp)
   109c0:	da000404 	addi	r8,sp,16
   109c4:	d9003217 	ldw	r4,200(sp)
   109c8:	d8802617 	ldw	r2,152(sp)
   109cc:	d9403317 	ldw	r5,204(sp)
   109d0:	8123883a 	add	r17,r16,r4
   109d4:	11400216 	blt	r2,r5,109e0 <___svfprintf_internal_r+0x1524>
   109d8:	9100004c 	andi	r4,r18,1
   109dc:	20000d26 	beq	r4,zero,10a14 <___svfprintf_internal_r+0x1558>
   109e0:	d9003817 	ldw	r4,224(sp)
   109e4:	d9403417 	ldw	r5,208(sp)
   109e8:	1907883a 	add	r3,r3,r4
   109ec:	d9001f17 	ldw	r4,124(sp)
   109f0:	41400015 	stw	r5,0(r8)
   109f4:	d9403817 	ldw	r5,224(sp)
   109f8:	21000044 	addi	r4,r4,1
   109fc:	d8c02015 	stw	r3,128(sp)
   10a00:	41400115 	stw	r5,4(r8)
   10a04:	d9001f15 	stw	r4,124(sp)
   10a08:	014001c4 	movi	r5,7
   10a0c:	2901dc16 	blt	r5,r4,11180 <___svfprintf_internal_r+0x1cc4>
   10a10:	42000204 	addi	r8,r8,8
   10a14:	d9003317 	ldw	r4,204(sp)
   10a18:	8121883a 	add	r16,r16,r4
   10a1c:	2085c83a 	sub	r2,r4,r2
   10a20:	8461c83a 	sub	r16,r16,r17
   10a24:	1400010e 	bge	r2,r16,10a2c <___svfprintf_internal_r+0x1570>
   10a28:	1021883a 	mov	r16,r2
   10a2c:	04000a0e 	bge	zero,r16,10a58 <___svfprintf_internal_r+0x159c>
   10a30:	d9001f17 	ldw	r4,124(sp)
   10a34:	1c07883a 	add	r3,r3,r16
   10a38:	44400015 	stw	r17,0(r8)
   10a3c:	21000044 	addi	r4,r4,1
   10a40:	44000115 	stw	r16,4(r8)
   10a44:	d8c02015 	stw	r3,128(sp)
   10a48:	d9001f15 	stw	r4,124(sp)
   10a4c:	014001c4 	movi	r5,7
   10a50:	2901e616 	blt	r5,r4,111ec <___svfprintf_internal_r+0x1d30>
   10a54:	42000204 	addi	r8,r8,8
   10a58:	8001f616 	blt	r16,zero,11234 <___svfprintf_internal_r+0x1d78>
   10a5c:	1421c83a 	sub	r16,r2,r16
   10a60:	043cfa0e 	bge	zero,r16,fe4c <__alt_data_end+0xfc00fe4c>
   10a64:	04400404 	movi	r17,16
   10a68:	d8801f17 	ldw	r2,124(sp)
   10a6c:	8c3edd0e 	bge	r17,r16,105e4 <__alt_data_end+0xfc0105e4>
   10a70:	014000f4 	movhi	r5,3
   10a74:	296a5884 	addi	r5,r5,-22174
   10a78:	d9402c15 	stw	r5,176(sp)
   10a7c:	058001c4 	movi	r22,7
   10a80:	dd002d17 	ldw	r20,180(sp)
   10a84:	00000306 	br	10a94 <___svfprintf_internal_r+0x15d8>
   10a88:	42000204 	addi	r8,r8,8
   10a8c:	843ffc04 	addi	r16,r16,-16
   10a90:	8c3ed70e 	bge	r17,r16,105f0 <__alt_data_end+0xfc0105f0>
   10a94:	18c00404 	addi	r3,r3,16
   10a98:	10800044 	addi	r2,r2,1
   10a9c:	45400015 	stw	r21,0(r8)
   10aa0:	44400115 	stw	r17,4(r8)
   10aa4:	d8c02015 	stw	r3,128(sp)
   10aa8:	d8801f15 	stw	r2,124(sp)
   10aac:	b0bff60e 	bge	r22,r2,10a88 <__alt_data_end+0xfc010a88>
   10ab0:	d9801e04 	addi	r6,sp,120
   10ab4:	a00b883a 	mov	r5,r20
   10ab8:	9809883a 	mov	r4,r19
   10abc:	00184200 	call	18420 <__ssprint_r>
   10ac0:	103b651e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10ac4:	d8c02017 	ldw	r3,128(sp)
   10ac8:	d8801f17 	ldw	r2,124(sp)
   10acc:	da000404 	addi	r8,sp,16
   10ad0:	003fee06 	br	10a8c <__alt_data_end+0xfc010a8c>
   10ad4:	9088703a 	and	r4,r18,r2
   10ad8:	203e8d1e 	bne	r4,zero,10510 <__alt_data_end+0xfc010510>
   10adc:	dc401f17 	ldw	r17,124(sp)
   10ae0:	40800115 	stw	r2,4(r8)
   10ae4:	44000015 	stw	r16,0(r8)
   10ae8:	8c400044 	addi	r17,r17,1
   10aec:	d8c02015 	stw	r3,128(sp)
   10af0:	dc401f15 	stw	r17,124(sp)
   10af4:	008001c4 	movi	r2,7
   10af8:	147f7f16 	blt	r2,r17,108f8 <__alt_data_end+0xfc0108f8>
   10afc:	45800204 	addi	r22,r8,8
   10b00:	003eac06 	br	105b4 <__alt_data_end+0xfc0105b4>
   10b04:	d9402d17 	ldw	r5,180(sp)
   10b08:	d9801e04 	addi	r6,sp,120
   10b0c:	9809883a 	mov	r4,r19
   10b10:	00184200 	call	18420 <__ssprint_r>
   10b14:	103b501e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10b18:	d8c02017 	ldw	r3,128(sp)
   10b1c:	dc401f17 	ldw	r17,124(sp)
   10b20:	da000404 	addi	r8,sp,16
   10b24:	003e8406 	br	10538 <__alt_data_end+0xfc010538>
   10b28:	d9402d17 	ldw	r5,180(sp)
   10b2c:	d9801e04 	addi	r6,sp,120
   10b30:	9809883a 	mov	r4,r19
   10b34:	00184200 	call	18420 <__ssprint_r>
   10b38:	103b471e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10b3c:	d8c02017 	ldw	r3,128(sp)
   10b40:	dc401f17 	ldw	r17,124(sp)
   10b44:	dd800404 	addi	r22,sp,16
   10b48:	003e8606 	br	10564 <__alt_data_end+0xfc010564>
   10b4c:	0029883a 	mov	r20,zero
   10b50:	a5000c04 	addi	r20,r20,48
   10b54:	dc001dc4 	addi	r16,sp,119
   10b58:	dd001dc5 	stb	r20,119(sp)
   10b5c:	003f3806 	br	10840 <__alt_data_end+0xfc010840>
   10b60:	d9402d17 	ldw	r5,180(sp)
   10b64:	d9801e04 	addi	r6,sp,120
   10b68:	9809883a 	mov	r4,r19
   10b6c:	00184200 	call	18420 <__ssprint_r>
   10b70:	103b391e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10b74:	d8c02017 	ldw	r3,128(sp)
   10b78:	da000404 	addi	r8,sp,16
   10b7c:	003c7306 	br	fd4c <__alt_data_end+0xfc00fd4c>
   10b80:	d9003617 	ldw	r4,216(sp)
   10b84:	d9403717 	ldw	r5,220(sp)
   10b88:	da003e15 	stw	r8,248(sp)
   10b8c:	00182700 	call	18270 <__fpclassifyd>
   10b90:	da003e17 	ldw	r8,248(sp)
   10b94:	1000bd1e 	bne	r2,zero,10e8c <___svfprintf_internal_r+0x19d0>
   10b98:	008011c4 	movi	r2,71
   10b9c:	14411e0e 	bge	r2,r17,11018 <___svfprintf_internal_r+0x1b5c>
   10ba0:	040000f4 	movhi	r16,3
   10ba4:	842a4b04 	addi	r16,r16,-22228
   10ba8:	00c000c4 	movi	r3,3
   10bac:	00bfdfc4 	movi	r2,-129
   10bb0:	d8c02915 	stw	r3,164(sp)
   10bb4:	90a4703a 	and	r18,r18,r2
   10bb8:	df002783 	ldbu	fp,158(sp)
   10bbc:	d8c02b15 	stw	r3,172(sp)
   10bc0:	d8002a15 	stw	zero,168(sp)
   10bc4:	d8003215 	stw	zero,200(sp)
   10bc8:	003bfa06 	br	fbb4 <__alt_data_end+0xfc00fbb4>
   10bcc:	9080100c 	andi	r2,r18,64
   10bd0:	d8002785 	stb	zero,158(sp)
   10bd4:	10009426 	beq	r2,zero,10e28 <___svfprintf_internal_r+0x196c>
   10bd8:	d9402e17 	ldw	r5,184(sp)
   10bdc:	d8c02a17 	ldw	r3,168(sp)
   10be0:	002d883a 	mov	r22,zero
   10be4:	28800104 	addi	r2,r5,4
   10be8:	2d00000b 	ldhu	r20,0(r5)
   10bec:	183ec10e 	bge	r3,zero,106f4 <__alt_data_end+0xfc0106f4>
   10bf0:	a586b03a 	or	r3,r20,r22
   10bf4:	d8802e15 	stw	r2,184(sp)
   10bf8:	183ec21e 	bne	r3,zero,10704 <__alt_data_end+0xfc010704>
   10bfc:	0039883a 	mov	fp,zero
   10c00:	0005883a 	mov	r2,zero
   10c04:	003db806 	br	102e8 <__alt_data_end+0xfc0102e8>
   10c08:	d8c02e17 	ldw	r3,184(sp)
   10c0c:	d9002e17 	ldw	r4,184(sp)
   10c10:	d9402e17 	ldw	r5,184(sp)
   10c14:	18c00017 	ldw	r3,0(r3)
   10c18:	21000117 	ldw	r4,4(r4)
   10c1c:	29400204 	addi	r5,r5,8
   10c20:	d8c03615 	stw	r3,216(sp)
   10c24:	d9003715 	stw	r4,220(sp)
   10c28:	d9402e15 	stw	r5,184(sp)
   10c2c:	003b5a06 	br	f998 <__alt_data_end+0xfc00f998>
   10c30:	9080100c 	andi	r2,r18,64
   10c34:	10010726 	beq	r2,zero,11054 <___svfprintf_internal_r+0x1b98>
   10c38:	d8802e17 	ldw	r2,184(sp)
   10c3c:	1500000f 	ldh	r20,0(r2)
   10c40:	10800104 	addi	r2,r2,4
   10c44:	d8802e15 	stw	r2,184(sp)
   10c48:	a02dd7fa 	srai	r22,r20,31
   10c4c:	b005883a 	mov	r2,r22
   10c50:	003b7d06 	br	fa48 <__alt_data_end+0xfc00fa48>
   10c54:	9080100c 	andi	r2,r18,64
   10c58:	10010526 	beq	r2,zero,11070 <___svfprintf_internal_r+0x1bb4>
   10c5c:	d8c02e17 	ldw	r3,184(sp)
   10c60:	002d883a 	mov	r22,zero
   10c64:	1d00000b 	ldhu	r20,0(r3)
   10c68:	18c00104 	addi	r3,r3,4
   10c6c:	d8c02e15 	stw	r3,184(sp)
   10c70:	003ce206 	br	fffc <__alt_data_end+0xfc00fffc>
   10c74:	bc400007 	ldb	r17,0(r23)
   10c78:	003a6506 	br	f610 <__alt_data_end+0xfc00f610>
   10c7c:	9080040c 	andi	r2,r18,16
   10c80:	10010126 	beq	r2,zero,11088 <___svfprintf_internal_r+0x1bcc>
   10c84:	d8c02e17 	ldw	r3,184(sp)
   10c88:	d9002f17 	ldw	r4,188(sp)
   10c8c:	18800017 	ldw	r2,0(r3)
   10c90:	18c00104 	addi	r3,r3,4
   10c94:	d8c02e15 	stw	r3,184(sp)
   10c98:	11000015 	stw	r4,0(r2)
   10c9c:	003a3206 	br	f568 <__alt_data_end+0xfc00f568>
   10ca0:	d9002a17 	ldw	r4,168(sp)
   10ca4:	d8002785 	stb	zero,158(sp)
   10ca8:	203d8d16 	blt	r4,zero,102e0 <__alt_data_end+0xfc0102e0>
   10cac:	00bfdfc4 	movi	r2,-129
   10cb0:	90a4703a 	and	r18,r18,r2
   10cb4:	003ad506 	br	f80c <__alt_data_end+0xfc00f80c>
   10cb8:	014000f4 	movhi	r5,3
   10cbc:	296a5884 	addi	r5,r5,-22174
   10cc0:	d9402c15 	stw	r5,176(sp)
   10cc4:	d9402c17 	ldw	r5,176(sp)
   10cc8:	1c47883a 	add	r3,r3,r17
   10ccc:	10800044 	addi	r2,r2,1
   10cd0:	41400015 	stw	r5,0(r8)
   10cd4:	44400115 	stw	r17,4(r8)
   10cd8:	d8c02015 	stw	r3,128(sp)
   10cdc:	d8801f15 	stw	r2,124(sp)
   10ce0:	010001c4 	movi	r4,7
   10ce4:	20bf3016 	blt	r4,r2,109a8 <__alt_data_end+0xfc0109a8>
   10ce8:	42000204 	addi	r8,r8,8
   10cec:	003f3506 	br	109c4 <__alt_data_end+0xfc0109c4>
   10cf0:	010000f4 	movhi	r4,3
   10cf4:	212a5884 	addi	r4,r4,-22174
   10cf8:	d9002c15 	stw	r4,176(sp)
   10cfc:	003c3c06 	br	fdf0 <__alt_data_end+0xfc00fdf0>
   10d00:	d9402d17 	ldw	r5,180(sp)
   10d04:	d9801e04 	addi	r6,sp,120
   10d08:	9809883a 	mov	r4,r19
   10d0c:	00184200 	call	18420 <__ssprint_r>
   10d10:	103ad11e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10d14:	d8c02017 	ldw	r3,128(sp)
   10d18:	da000404 	addi	r8,sp,16
   10d1c:	003d9306 	br	1036c <__alt_data_end+0xfc01036c>
   10d20:	d8801f17 	ldw	r2,124(sp)
   10d24:	014000f4 	movhi	r5,3
   10d28:	01000044 	movi	r4,1
   10d2c:	18c00044 	addi	r3,r3,1
   10d30:	10800044 	addi	r2,r2,1
   10d34:	296a5804 	addi	r5,r5,-22176
   10d38:	41000115 	stw	r4,4(r8)
   10d3c:	41400015 	stw	r5,0(r8)
   10d40:	d8c02015 	stw	r3,128(sp)
   10d44:	d8801f15 	stw	r2,124(sp)
   10d48:	010001c4 	movi	r4,7
   10d4c:	2080b516 	blt	r4,r2,11024 <___svfprintf_internal_r+0x1b68>
   10d50:	42000204 	addi	r8,r8,8
   10d54:	8800041e 	bne	r17,zero,10d68 <___svfprintf_internal_r+0x18ac>
   10d58:	d8803317 	ldw	r2,204(sp)
   10d5c:	1000021e 	bne	r2,zero,10d68 <___svfprintf_internal_r+0x18ac>
   10d60:	9080004c 	andi	r2,r18,1
   10d64:	103c3926 	beq	r2,zero,fe4c <__alt_data_end+0xfc00fe4c>
   10d68:	d9003817 	ldw	r4,224(sp)
   10d6c:	d8801f17 	ldw	r2,124(sp)
   10d70:	d9403417 	ldw	r5,208(sp)
   10d74:	20c7883a 	add	r3,r4,r3
   10d78:	10800044 	addi	r2,r2,1
   10d7c:	41000115 	stw	r4,4(r8)
   10d80:	41400015 	stw	r5,0(r8)
   10d84:	d8c02015 	stw	r3,128(sp)
   10d88:	d8801f15 	stw	r2,124(sp)
   10d8c:	010001c4 	movi	r4,7
   10d90:	20818016 	blt	r4,r2,11394 <___svfprintf_internal_r+0x1ed8>
   10d94:	42000204 	addi	r8,r8,8
   10d98:	0463c83a 	sub	r17,zero,r17
   10d9c:	0440cb0e 	bge	zero,r17,110cc <___svfprintf_internal_r+0x1c10>
   10da0:	05800404 	movi	r22,16
   10da4:	b440e80e 	bge	r22,r17,11148 <___svfprintf_internal_r+0x1c8c>
   10da8:	014000f4 	movhi	r5,3
   10dac:	296a5884 	addi	r5,r5,-22174
   10db0:	d9402c15 	stw	r5,176(sp)
   10db4:	070001c4 	movi	fp,7
   10db8:	dd002d17 	ldw	r20,180(sp)
   10dbc:	00000306 	br	10dcc <___svfprintf_internal_r+0x1910>
   10dc0:	42000204 	addi	r8,r8,8
   10dc4:	8c7ffc04 	addi	r17,r17,-16
   10dc8:	b440e20e 	bge	r22,r17,11154 <___svfprintf_internal_r+0x1c98>
   10dcc:	18c00404 	addi	r3,r3,16
   10dd0:	10800044 	addi	r2,r2,1
   10dd4:	45400015 	stw	r21,0(r8)
   10dd8:	45800115 	stw	r22,4(r8)
   10ddc:	d8c02015 	stw	r3,128(sp)
   10de0:	d8801f15 	stw	r2,124(sp)
   10de4:	e0bff60e 	bge	fp,r2,10dc0 <__alt_data_end+0xfc010dc0>
   10de8:	d9801e04 	addi	r6,sp,120
   10dec:	a00b883a 	mov	r5,r20
   10df0:	9809883a 	mov	r4,r19
   10df4:	00184200 	call	18420 <__ssprint_r>
   10df8:	103a971e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10dfc:	d8c02017 	ldw	r3,128(sp)
   10e00:	d8801f17 	ldw	r2,124(sp)
   10e04:	da000404 	addi	r8,sp,16
   10e08:	003fee06 	br	10dc4 <__alt_data_end+0xfc010dc4>
   10e0c:	d9002e17 	ldw	r4,184(sp)
   10e10:	d9402a17 	ldw	r5,168(sp)
   10e14:	002d883a 	mov	r22,zero
   10e18:	20800104 	addi	r2,r4,4
   10e1c:	25000017 	ldw	r20,0(r4)
   10e20:	283e7d0e 	bge	r5,zero,10818 <__alt_data_end+0xfc010818>
   10e24:	003eda06 	br	10990 <__alt_data_end+0xfc010990>
   10e28:	d9002e17 	ldw	r4,184(sp)
   10e2c:	d9402a17 	ldw	r5,168(sp)
   10e30:	002d883a 	mov	r22,zero
   10e34:	20800104 	addi	r2,r4,4
   10e38:	25000017 	ldw	r20,0(r4)
   10e3c:	283e2d0e 	bge	r5,zero,106f4 <__alt_data_end+0xfc0106f4>
   10e40:	003f6b06 	br	10bf0 <__alt_data_end+0xfc010bf0>
   10e44:	d8c02e15 	stw	r3,184(sp)
   10e48:	0039883a 	mov	fp,zero
   10e4c:	003ed206 	br	10998 <__alt_data_end+0xfc010998>
   10e50:	bc400043 	ldbu	r17,1(r23)
   10e54:	84000814 	ori	r16,r16,32
   10e58:	bdc00044 	addi	r23,r23,1
   10e5c:	8c403fcc 	andi	r17,r17,255
   10e60:	8c40201c 	xori	r17,r17,128
   10e64:	8c7fe004 	addi	r17,r17,-128
   10e68:	0039e906 	br	f610 <__alt_data_end+0xfc00f610>
   10e6c:	d9402d17 	ldw	r5,180(sp)
   10e70:	d9801e04 	addi	r6,sp,120
   10e74:	9809883a 	mov	r4,r19
   10e78:	00184200 	call	18420 <__ssprint_r>
   10e7c:	103a761e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   10e80:	d8c02017 	ldw	r3,128(sp)
   10e84:	da000404 	addi	r8,sp,16
   10e88:	003d4a06 	br	103b4 <__alt_data_end+0xfc0103b4>
   10e8c:	d9002a17 	ldw	r4,168(sp)
   10e90:	05bff7c4 	movi	r22,-33
   10e94:	00bfffc4 	movi	r2,-1
   10e98:	8dac703a 	and	r22,r17,r22
   10e9c:	20806a26 	beq	r4,r2,11048 <___svfprintf_internal_r+0x1b8c>
   10ea0:	008011c4 	movi	r2,71
   10ea4:	b0813726 	beq	r22,r2,11384 <___svfprintf_internal_r+0x1ec8>
   10ea8:	d9003717 	ldw	r4,220(sp)
   10eac:	90c04014 	ori	r3,r18,256
   10eb0:	d8c02c15 	stw	r3,176(sp)
   10eb4:	20015d16 	blt	r4,zero,1142c <___svfprintf_internal_r+0x1f70>
   10eb8:	dd003717 	ldw	r20,220(sp)
   10ebc:	d8002905 	stb	zero,164(sp)
   10ec0:	00801984 	movi	r2,102
   10ec4:	88814026 	beq	r17,r2,113c8 <___svfprintf_internal_r+0x1f0c>
   10ec8:	00801184 	movi	r2,70
   10ecc:	88817126 	beq	r17,r2,11494 <___svfprintf_internal_r+0x1fd8>
   10ed0:	00801144 	movi	r2,69
   10ed4:	b0816226 	beq	r22,r2,11460 <___svfprintf_internal_r+0x1fa4>
   10ed8:	d8c02a17 	ldw	r3,168(sp)
   10edc:	d8802104 	addi	r2,sp,132
   10ee0:	d8800315 	stw	r2,12(sp)
   10ee4:	d9403617 	ldw	r5,216(sp)
   10ee8:	d8802504 	addi	r2,sp,148
   10eec:	d8800215 	stw	r2,8(sp)
   10ef0:	d8802604 	addi	r2,sp,152
   10ef4:	d8c00015 	stw	r3,0(sp)
   10ef8:	d8800115 	stw	r2,4(sp)
   10efc:	01c00084 	movi	r7,2
   10f00:	a00d883a 	mov	r6,r20
   10f04:	9809883a 	mov	r4,r19
   10f08:	d8c03d15 	stw	r3,244(sp)
   10f0c:	da003e15 	stw	r8,248(sp)
   10f10:	0013eb00 	call	13eb0 <_dtoa_r>
   10f14:	1021883a 	mov	r16,r2
   10f18:	008019c4 	movi	r2,103
   10f1c:	d8c03d17 	ldw	r3,244(sp)
   10f20:	da003e17 	ldw	r8,248(sp)
   10f24:	8880e726 	beq	r17,r2,112c4 <___svfprintf_internal_r+0x1e08>
   10f28:	008011c4 	movi	r2,71
   10f2c:	8880d426 	beq	r17,r2,11280 <___svfprintf_internal_r+0x1dc4>
   10f30:	80f9883a 	add	fp,r16,r3
   10f34:	d9003617 	ldw	r4,216(sp)
   10f38:	000d883a 	mov	r6,zero
   10f3c:	000f883a 	mov	r7,zero
   10f40:	a00b883a 	mov	r5,r20
   10f44:	da003e15 	stw	r8,248(sp)
   10f48:	001d8100 	call	1d810 <__eqdf2>
   10f4c:	da003e17 	ldw	r8,248(sp)
   10f50:	1000e426 	beq	r2,zero,112e4 <___svfprintf_internal_r+0x1e28>
   10f54:	d8802117 	ldw	r2,132(sp)
   10f58:	1700062e 	bgeu	r2,fp,10f74 <___svfprintf_internal_r+0x1ab8>
   10f5c:	01000c04 	movi	r4,48
   10f60:	10c00044 	addi	r3,r2,1
   10f64:	d8c02115 	stw	r3,132(sp)
   10f68:	11000005 	stb	r4,0(r2)
   10f6c:	d8802117 	ldw	r2,132(sp)
   10f70:	173ffb36 	bltu	r2,fp,10f60 <__alt_data_end+0xfc010f60>
   10f74:	1405c83a 	sub	r2,r2,r16
   10f78:	d8803315 	stw	r2,204(sp)
   10f7c:	008011c4 	movi	r2,71
   10f80:	b080c526 	beq	r22,r2,11298 <___svfprintf_internal_r+0x1ddc>
   10f84:	00801944 	movi	r2,101
   10f88:	1441d80e 	bge	r2,r17,116ec <___svfprintf_internal_r+0x2230>
   10f8c:	d8c02617 	ldw	r3,152(sp)
   10f90:	00801984 	movi	r2,102
   10f94:	d8c03215 	stw	r3,200(sp)
   10f98:	88813426 	beq	r17,r2,1146c <___svfprintf_internal_r+0x1fb0>
   10f9c:	d8c03217 	ldw	r3,200(sp)
   10fa0:	d9003317 	ldw	r4,204(sp)
   10fa4:	19012516 	blt	r3,r4,1143c <___svfprintf_internal_r+0x1f80>
   10fa8:	9480004c 	andi	r18,r18,1
   10fac:	9001841e 	bne	r18,zero,115c0 <___svfprintf_internal_r+0x2104>
   10fb0:	1805883a 	mov	r2,r3
   10fb4:	1801cb16 	blt	r3,zero,116e4 <___svfprintf_internal_r+0x2228>
   10fb8:	d8c03217 	ldw	r3,200(sp)
   10fbc:	044019c4 	movi	r17,103
   10fc0:	d8c02b15 	stw	r3,172(sp)
   10fc4:	df002907 	ldb	fp,164(sp)
   10fc8:	e000a61e 	bne	fp,zero,11264 <___svfprintf_internal_r+0x1da8>
   10fcc:	df002783 	ldbu	fp,158(sp)
   10fd0:	d8802915 	stw	r2,164(sp)
   10fd4:	dc802c17 	ldw	r18,176(sp)
   10fd8:	d8002a15 	stw	zero,168(sp)
   10fdc:	003af506 	br	fbb4 <__alt_data_end+0xfc00fbb4>
   10fe0:	040000f4 	movhi	r16,3
   10fe4:	842a4804 	addi	r16,r16,-22240
   10fe8:	003a7e06 	br	f9e4 <__alt_data_end+0xfc00f9e4>
   10fec:	d9003917 	ldw	r4,228(sp)
   10ff0:	04001004 	movi	r16,64
   10ff4:	800b883a 	mov	r5,r16
   10ff8:	000e3500 	call	e350 <_malloc_r>
   10ffc:	d9002d17 	ldw	r4,180(sp)
   11000:	20800015 	stw	r2,0(r4)
   11004:	20800415 	stw	r2,16(r4)
   11008:	1001d026 	beq	r2,zero,1174c <___svfprintf_internal_r+0x2290>
   1100c:	d8802d17 	ldw	r2,180(sp)
   11010:	14000515 	stw	r16,20(r2)
   11014:	00394406 	br	f528 <__alt_data_end+0xfc00f528>
   11018:	040000f4 	movhi	r16,3
   1101c:	842a4a04 	addi	r16,r16,-22232
   11020:	003ee106 	br	10ba8 <__alt_data_end+0xfc010ba8>
   11024:	d9402d17 	ldw	r5,180(sp)
   11028:	d9801e04 	addi	r6,sp,120
   1102c:	9809883a 	mov	r4,r19
   11030:	00184200 	call	18420 <__ssprint_r>
   11034:	103a081e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   11038:	dc402617 	ldw	r17,152(sp)
   1103c:	d8c02017 	ldw	r3,128(sp)
   11040:	da000404 	addi	r8,sp,16
   11044:	003f4306 	br	10d54 <__alt_data_end+0xfc010d54>
   11048:	01400184 	movi	r5,6
   1104c:	d9402a15 	stw	r5,168(sp)
   11050:	003f9506 	br	10ea8 <__alt_data_end+0xfc010ea8>
   11054:	d8c02e17 	ldw	r3,184(sp)
   11058:	1d000017 	ldw	r20,0(r3)
   1105c:	18c00104 	addi	r3,r3,4
   11060:	d8c02e15 	stw	r3,184(sp)
   11064:	a02dd7fa 	srai	r22,r20,31
   11068:	b005883a 	mov	r2,r22
   1106c:	003a7606 	br	fa48 <__alt_data_end+0xfc00fa48>
   11070:	d9002e17 	ldw	r4,184(sp)
   11074:	002d883a 	mov	r22,zero
   11078:	25000017 	ldw	r20,0(r4)
   1107c:	21000104 	addi	r4,r4,4
   11080:	d9002e15 	stw	r4,184(sp)
   11084:	003bdd06 	br	fffc <__alt_data_end+0xfc00fffc>
   11088:	9480100c 	andi	r18,r18,64
   1108c:	90006e26 	beq	r18,zero,11248 <___svfprintf_internal_r+0x1d8c>
   11090:	d9402e17 	ldw	r5,184(sp)
   11094:	d8c02f17 	ldw	r3,188(sp)
   11098:	28800017 	ldw	r2,0(r5)
   1109c:	29400104 	addi	r5,r5,4
   110a0:	d9402e15 	stw	r5,184(sp)
   110a4:	10c0000d 	sth	r3,0(r2)
   110a8:	00392f06 	br	f568 <__alt_data_end+0xfc00f568>
   110ac:	d9402d17 	ldw	r5,180(sp)
   110b0:	d9801e04 	addi	r6,sp,120
   110b4:	9809883a 	mov	r4,r19
   110b8:	00184200 	call	18420 <__ssprint_r>
   110bc:	1039e61e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   110c0:	d8c02017 	ldw	r3,128(sp)
   110c4:	d8801f17 	ldw	r2,124(sp)
   110c8:	da000404 	addi	r8,sp,16
   110cc:	d9403317 	ldw	r5,204(sp)
   110d0:	10800044 	addi	r2,r2,1
   110d4:	44000015 	stw	r16,0(r8)
   110d8:	28c7883a 	add	r3,r5,r3
   110dc:	003b5506 	br	fe34 <__alt_data_end+0xfc00fe34>
   110e0:	8009883a 	mov	r4,r16
   110e4:	df003e15 	stw	fp,248(sp)
   110e8:	000f4240 	call	f424 <strlen>
   110ec:	d8802b15 	stw	r2,172(sp)
   110f0:	da003e17 	ldw	r8,248(sp)
   110f4:	103c160e 	bge	r2,zero,10150 <__alt_data_end+0xfc010150>
   110f8:	0005883a 	mov	r2,zero
   110fc:	003c1406 	br	10150 <__alt_data_end+0xfc010150>
   11100:	00bfffc4 	movi	r2,-1
   11104:	0039d906 	br	f86c <__alt_data_end+0xfc00f86c>
   11108:	010000f4 	movhi	r4,3
   1110c:	212a5c84 	addi	r4,r4,-22158
   11110:	d9003515 	stw	r4,212(sp)
   11114:	003ae406 	br	fca8 <__alt_data_end+0xfc00fca8>
   11118:	013fffc4 	movi	r4,-1
   1111c:	0039fa06 	br	f908 <__alt_data_end+0xfc00f908>
   11120:	d9402d17 	ldw	r5,180(sp)
   11124:	d9801e04 	addi	r6,sp,120
   11128:	9809883a 	mov	r4,r19
   1112c:	00184200 	call	18420 <__ssprint_r>
   11130:	1039c91e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   11134:	d8c02017 	ldw	r3,128(sp)
   11138:	da000404 	addi	r8,sp,16
   1113c:	003d8406 	br	10750 <__alt_data_end+0xfc010750>
   11140:	0023883a 	mov	r17,zero
   11144:	003d8306 	br	10754 <__alt_data_end+0xfc010754>
   11148:	010000f4 	movhi	r4,3
   1114c:	212a5884 	addi	r4,r4,-22174
   11150:	d9002c15 	stw	r4,176(sp)
   11154:	d9002c17 	ldw	r4,176(sp)
   11158:	1c47883a 	add	r3,r3,r17
   1115c:	10800044 	addi	r2,r2,1
   11160:	41000015 	stw	r4,0(r8)
   11164:	44400115 	stw	r17,4(r8)
   11168:	d8c02015 	stw	r3,128(sp)
   1116c:	d8801f15 	stw	r2,124(sp)
   11170:	010001c4 	movi	r4,7
   11174:	20bfcd16 	blt	r4,r2,110ac <__alt_data_end+0xfc0110ac>
   11178:	42000204 	addi	r8,r8,8
   1117c:	003fd306 	br	110cc <__alt_data_end+0xfc0110cc>
   11180:	d9402d17 	ldw	r5,180(sp)
   11184:	d9801e04 	addi	r6,sp,120
   11188:	9809883a 	mov	r4,r19
   1118c:	00184200 	call	18420 <__ssprint_r>
   11190:	1039b11e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   11194:	d8802617 	ldw	r2,152(sp)
   11198:	d8c02017 	ldw	r3,128(sp)
   1119c:	da000404 	addi	r8,sp,16
   111a0:	003e1c06 	br	10a14 <__alt_data_end+0xfc010a14>
   111a4:	d8802a17 	ldw	r2,168(sp)
   111a8:	00c00184 	movi	r3,6
   111ac:	1880012e 	bgeu	r3,r2,111b4 <___svfprintf_internal_r+0x1cf8>
   111b0:	1805883a 	mov	r2,r3
   111b4:	d8802b15 	stw	r2,172(sp)
   111b8:	1000f316 	blt	r2,zero,11588 <___svfprintf_internal_r+0x20cc>
   111bc:	040000f4 	movhi	r16,3
   111c0:	d8802915 	stw	r2,164(sp)
   111c4:	dd002e15 	stw	r20,184(sp)
   111c8:	d8002a15 	stw	zero,168(sp)
   111cc:	d8003215 	stw	zero,200(sp)
   111d0:	842a5604 	addi	r16,r16,-22184
   111d4:	0039883a 	mov	fp,zero
   111d8:	003a7d06 	br	fbd0 <__alt_data_end+0xfc00fbd0>
   111dc:	010000f4 	movhi	r4,3
   111e0:	212a5c84 	addi	r4,r4,-22158
   111e4:	d9003515 	stw	r4,212(sp)
   111e8:	003b3d06 	br	fee0 <__alt_data_end+0xfc00fee0>
   111ec:	d9402d17 	ldw	r5,180(sp)
   111f0:	d9801e04 	addi	r6,sp,120
   111f4:	9809883a 	mov	r4,r19
   111f8:	00184200 	call	18420 <__ssprint_r>
   111fc:	1039961e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   11200:	d8802617 	ldw	r2,152(sp)
   11204:	d9403317 	ldw	r5,204(sp)
   11208:	d8c02017 	ldw	r3,128(sp)
   1120c:	da000404 	addi	r8,sp,16
   11210:	2885c83a 	sub	r2,r5,r2
   11214:	003e1006 	br	10a58 <__alt_data_end+0xfc010a58>
   11218:	00800044 	movi	r2,1
   1121c:	10803fcc 	andi	r2,r2,255
   11220:	00c00044 	movi	r3,1
   11224:	10fa1026 	beq	r2,r3,fa68 <__alt_data_end+0xfc00fa68>
   11228:	00c00084 	movi	r3,2
   1122c:	10fb8226 	beq	r2,r3,10038 <__alt_data_end+0xfc010038>
   11230:	003a4206 	br	fb3c <__alt_data_end+0xfc00fb3c>
   11234:	0021883a 	mov	r16,zero
   11238:	003e0806 	br	10a5c <__alt_data_end+0xfc010a5c>
   1123c:	07000b44 	movi	fp,45
   11240:	df002785 	stb	fp,158(sp)
   11244:	0039e306 	br	f9d4 <__alt_data_end+0xfc00f9d4>
   11248:	d9002e17 	ldw	r4,184(sp)
   1124c:	d9402f17 	ldw	r5,188(sp)
   11250:	20800017 	ldw	r2,0(r4)
   11254:	21000104 	addi	r4,r4,4
   11258:	d9002e15 	stw	r4,184(sp)
   1125c:	11400015 	stw	r5,0(r2)
   11260:	0038c106 	br	f568 <__alt_data_end+0xfc00f568>
   11264:	00c00b44 	movi	r3,45
   11268:	d8c02785 	stb	r3,158(sp)
   1126c:	d8802915 	stw	r2,164(sp)
   11270:	dc802c17 	ldw	r18,176(sp)
   11274:	d8002a15 	stw	zero,168(sp)
   11278:	07000b44 	movi	fp,45
   1127c:	003a5106 	br	fbc4 <__alt_data_end+0xfc00fbc4>
   11280:	9080004c 	andi	r2,r18,1
   11284:	1000941e 	bne	r2,zero,114d8 <___svfprintf_internal_r+0x201c>
   11288:	d8802117 	ldw	r2,132(sp)
   1128c:	1405c83a 	sub	r2,r2,r16
   11290:	d8803315 	stw	r2,204(sp)
   11294:	b441151e 	bne	r22,r17,116ec <___svfprintf_internal_r+0x2230>
   11298:	dd802617 	ldw	r22,152(sp)
   1129c:	00bfff44 	movi	r2,-3
   112a0:	b0801a16 	blt	r22,r2,1130c <___svfprintf_internal_r+0x1e50>
   112a4:	d9402a17 	ldw	r5,168(sp)
   112a8:	2d801816 	blt	r5,r22,1130c <___svfprintf_internal_r+0x1e50>
   112ac:	dd803215 	stw	r22,200(sp)
   112b0:	003f3a06 	br	10f9c <__alt_data_end+0xfc010f9c>
   112b4:	1025883a 	mov	r18,r2
   112b8:	0039883a 	mov	fp,zero
   112bc:	00800084 	movi	r2,2
   112c0:	003fd606 	br	1121c <__alt_data_end+0xfc01121c>
   112c4:	9080004c 	andi	r2,r18,1
   112c8:	103f191e 	bne	r2,zero,10f30 <__alt_data_end+0xfc010f30>
   112cc:	d8802117 	ldw	r2,132(sp)
   112d0:	003f2806 	br	10f74 <__alt_data_end+0xfc010f74>
   112d4:	010000f4 	movhi	r4,3
   112d8:	212a5884 	addi	r4,r4,-22174
   112dc:	d9002c15 	stw	r4,176(sp)
   112e0:	003c7c06 	br	104d4 <__alt_data_end+0xfc0104d4>
   112e4:	e005883a 	mov	r2,fp
   112e8:	003f2206 	br	10f74 <__alt_data_end+0xfc010f74>
   112ec:	d9002a17 	ldw	r4,168(sp)
   112f0:	df002783 	ldbu	fp,158(sp)
   112f4:	dd002e15 	stw	r20,184(sp)
   112f8:	d9002915 	stw	r4,164(sp)
   112fc:	d9002b15 	stw	r4,172(sp)
   11300:	d8002a15 	stw	zero,168(sp)
   11304:	d8003215 	stw	zero,200(sp)
   11308:	003a2a06 	br	fbb4 <__alt_data_end+0xfc00fbb4>
   1130c:	8c7fff84 	addi	r17,r17,-2
   11310:	b5bfffc4 	addi	r22,r22,-1
   11314:	dd802615 	stw	r22,152(sp)
   11318:	dc4022c5 	stb	r17,139(sp)
   1131c:	b000c316 	blt	r22,zero,1162c <___svfprintf_internal_r+0x2170>
   11320:	00800ac4 	movi	r2,43
   11324:	d8802305 	stb	r2,140(sp)
   11328:	00800244 	movi	r2,9
   1132c:	15806e16 	blt	r2,r22,114e8 <___svfprintf_internal_r+0x202c>
   11330:	00800c04 	movi	r2,48
   11334:	b5800c04 	addi	r22,r22,48
   11338:	d8802345 	stb	r2,141(sp)
   1133c:	dd802385 	stb	r22,142(sp)
   11340:	d88023c4 	addi	r2,sp,143
   11344:	df0022c4 	addi	fp,sp,139
   11348:	d8c03317 	ldw	r3,204(sp)
   1134c:	1739c83a 	sub	fp,r2,fp
   11350:	d9003317 	ldw	r4,204(sp)
   11354:	e0c7883a 	add	r3,fp,r3
   11358:	df003b15 	stw	fp,236(sp)
   1135c:	d8c02b15 	stw	r3,172(sp)
   11360:	00800044 	movi	r2,1
   11364:	1100b70e 	bge	r2,r4,11644 <___svfprintf_internal_r+0x2188>
   11368:	d8c02b17 	ldw	r3,172(sp)
   1136c:	18c00044 	addi	r3,r3,1
   11370:	d8c02b15 	stw	r3,172(sp)
   11374:	1805883a 	mov	r2,r3
   11378:	1800b016 	blt	r3,zero,1163c <___svfprintf_internal_r+0x2180>
   1137c:	d8003215 	stw	zero,200(sp)
   11380:	003f1006 	br	10fc4 <__alt_data_end+0xfc010fc4>
   11384:	d8802a17 	ldw	r2,168(sp)
   11388:	103ec71e 	bne	r2,zero,10ea8 <__alt_data_end+0xfc010ea8>
   1138c:	dc002a15 	stw	r16,168(sp)
   11390:	003ec506 	br	10ea8 <__alt_data_end+0xfc010ea8>
   11394:	d9402d17 	ldw	r5,180(sp)
   11398:	d9801e04 	addi	r6,sp,120
   1139c:	9809883a 	mov	r4,r19
   113a0:	00184200 	call	18420 <__ssprint_r>
   113a4:	10392c1e 	bne	r2,zero,f858 <__alt_data_end+0xfc00f858>
   113a8:	dc402617 	ldw	r17,152(sp)
   113ac:	d8c02017 	ldw	r3,128(sp)
   113b0:	d8801f17 	ldw	r2,124(sp)
   113b4:	da000404 	addi	r8,sp,16
   113b8:	003e7706 	br	10d98 <__alt_data_end+0xfc010d98>
   113bc:	182f883a 	mov	r23,r3
   113c0:	d8002a15 	stw	zero,168(sp)
   113c4:	00389306 	br	f614 <__alt_data_end+0xfc00f614>
   113c8:	d8c02a17 	ldw	r3,168(sp)
   113cc:	d8802104 	addi	r2,sp,132
   113d0:	d8800315 	stw	r2,12(sp)
   113d4:	d9403617 	ldw	r5,216(sp)
   113d8:	d8802504 	addi	r2,sp,148
   113dc:	d8800215 	stw	r2,8(sp)
   113e0:	d8802604 	addi	r2,sp,152
   113e4:	d8c00015 	stw	r3,0(sp)
   113e8:	9809883a 	mov	r4,r19
   113ec:	d8800115 	stw	r2,4(sp)
   113f0:	01c000c4 	movi	r7,3
   113f4:	a00d883a 	mov	r6,r20
   113f8:	da003e15 	stw	r8,248(sp)
   113fc:	0013eb00 	call	13eb0 <_dtoa_r>
   11400:	d9002a17 	ldw	r4,168(sp)
   11404:	da003e17 	ldw	r8,248(sp)
   11408:	1021883a 	mov	r16,r2
   1140c:	1139883a 	add	fp,r2,r4
   11410:	2007883a 	mov	r3,r4
   11414:	81000007 	ldb	r4,0(r16)
   11418:	00800c04 	movi	r2,48
   1141c:	20806f26 	beq	r4,r2,115dc <___svfprintf_internal_r+0x2120>
   11420:	d8c02617 	ldw	r3,152(sp)
   11424:	e0f9883a 	add	fp,fp,r3
   11428:	003ec206 	br	10f34 <__alt_data_end+0xfc010f34>
   1142c:	00c00b44 	movi	r3,45
   11430:	2520003c 	xorhi	r20,r4,32768
   11434:	d8c02905 	stb	r3,164(sp)
   11438:	003ea106 	br	10ec0 <__alt_data_end+0xfc010ec0>
   1143c:	d8c03217 	ldw	r3,200(sp)
   11440:	00c0890e 	bge	zero,r3,11668 <___svfprintf_internal_r+0x21ac>
   11444:	00800044 	movi	r2,1
   11448:	d9003317 	ldw	r4,204(sp)
   1144c:	1105883a 	add	r2,r2,r4
   11450:	d8802b15 	stw	r2,172(sp)
   11454:	10005f16 	blt	r2,zero,115d4 <___svfprintf_internal_r+0x2118>
   11458:	044019c4 	movi	r17,103
   1145c:	003ed906 	br	10fc4 <__alt_data_end+0xfc010fc4>
   11460:	d9002a17 	ldw	r4,168(sp)
   11464:	20c00044 	addi	r3,r4,1
   11468:	003e9c06 	br	10edc <__alt_data_end+0xfc010edc>
   1146c:	d9002a17 	ldw	r4,168(sp)
   11470:	00c0680e 	bge	zero,r3,11614 <___svfprintf_internal_r+0x2158>
   11474:	2000461e 	bne	r4,zero,11590 <___svfprintf_internal_r+0x20d4>
   11478:	9480004c 	andi	r18,r18,1
   1147c:	9000441e 	bne	r18,zero,11590 <___svfprintf_internal_r+0x20d4>
   11480:	1805883a 	mov	r2,r3
   11484:	1800a116 	blt	r3,zero,1170c <___svfprintf_internal_r+0x2250>
   11488:	d8c03217 	ldw	r3,200(sp)
   1148c:	d8c02b15 	stw	r3,172(sp)
   11490:	003ecc06 	br	10fc4 <__alt_data_end+0xfc010fc4>
   11494:	d9402a17 	ldw	r5,168(sp)
   11498:	d8802104 	addi	r2,sp,132
   1149c:	d8800315 	stw	r2,12(sp)
   114a0:	d9400015 	stw	r5,0(sp)
   114a4:	d8802504 	addi	r2,sp,148
   114a8:	d9403617 	ldw	r5,216(sp)
   114ac:	d8800215 	stw	r2,8(sp)
   114b0:	d8802604 	addi	r2,sp,152
   114b4:	d8800115 	stw	r2,4(sp)
   114b8:	01c000c4 	movi	r7,3
   114bc:	a00d883a 	mov	r6,r20
   114c0:	9809883a 	mov	r4,r19
   114c4:	da003e15 	stw	r8,248(sp)
   114c8:	0013eb00 	call	13eb0 <_dtoa_r>
   114cc:	d8c02a17 	ldw	r3,168(sp)
   114d0:	da003e17 	ldw	r8,248(sp)
   114d4:	1021883a 	mov	r16,r2
   114d8:	00801184 	movi	r2,70
   114dc:	80f9883a 	add	fp,r16,r3
   114e0:	88bfcc26 	beq	r17,r2,11414 <__alt_data_end+0xfc011414>
   114e4:	003e9306 	br	10f34 <__alt_data_end+0xfc010f34>
   114e8:	df0022c4 	addi	fp,sp,139
   114ec:	dc002a15 	stw	r16,168(sp)
   114f0:	9829883a 	mov	r20,r19
   114f4:	e021883a 	mov	r16,fp
   114f8:	4027883a 	mov	r19,r8
   114fc:	b009883a 	mov	r4,r22
   11500:	01400284 	movi	r5,10
   11504:	000cc780 	call	cc78 <__modsi3>
   11508:	10800c04 	addi	r2,r2,48
   1150c:	843fffc4 	addi	r16,r16,-1
   11510:	b009883a 	mov	r4,r22
   11514:	01400284 	movi	r5,10
   11518:	80800005 	stb	r2,0(r16)
   1151c:	000cbf40 	call	cbf4 <__divsi3>
   11520:	102d883a 	mov	r22,r2
   11524:	00800244 	movi	r2,9
   11528:	15bff416 	blt	r2,r22,114fc <__alt_data_end+0xfc0114fc>
   1152c:	9811883a 	mov	r8,r19
   11530:	b0800c04 	addi	r2,r22,48
   11534:	a027883a 	mov	r19,r20
   11538:	8029883a 	mov	r20,r16
   1153c:	a17fffc4 	addi	r5,r20,-1
   11540:	a0bfffc5 	stb	r2,-1(r20)
   11544:	dc002a17 	ldw	r16,168(sp)
   11548:	2f00782e 	bgeu	r5,fp,1172c <___svfprintf_internal_r+0x2270>
   1154c:	d9c02384 	addi	r7,sp,142
   11550:	3d0fc83a 	sub	r7,r7,r20
   11554:	d9002344 	addi	r4,sp,141
   11558:	e1cf883a 	add	r7,fp,r7
   1155c:	00000106 	br	11564 <___svfprintf_internal_r+0x20a8>
   11560:	28800003 	ldbu	r2,0(r5)
   11564:	20800005 	stb	r2,0(r4)
   11568:	21000044 	addi	r4,r4,1
   1156c:	29400044 	addi	r5,r5,1
   11570:	21fffb1e 	bne	r4,r7,11560 <__alt_data_end+0xfc011560>
   11574:	d8802304 	addi	r2,sp,140
   11578:	1505c83a 	sub	r2,r2,r20
   1157c:	d8c02344 	addi	r3,sp,141
   11580:	1885883a 	add	r2,r3,r2
   11584:	003f7006 	br	11348 <__alt_data_end+0xfc011348>
   11588:	0005883a 	mov	r2,zero
   1158c:	003f0b06 	br	111bc <__alt_data_end+0xfc0111bc>
   11590:	d9002a17 	ldw	r4,168(sp)
   11594:	d8c03217 	ldw	r3,200(sp)
   11598:	20800044 	addi	r2,r4,1
   1159c:	1885883a 	add	r2,r3,r2
   115a0:	d8802b15 	stw	r2,172(sp)
   115a4:	103e870e 	bge	r2,zero,10fc4 <__alt_data_end+0xfc010fc4>
   115a8:	0005883a 	mov	r2,zero
   115ac:	003e8506 	br	10fc4 <__alt_data_end+0xfc010fc4>
   115b0:	010000f4 	movhi	r4,3
   115b4:	212a5884 	addi	r4,r4,-22174
   115b8:	d9002c15 	stw	r4,176(sp)
   115bc:	003cc506 	br	108d4 <__alt_data_end+0xfc0108d4>
   115c0:	d8c03217 	ldw	r3,200(sp)
   115c4:	18c00044 	addi	r3,r3,1
   115c8:	d8c02b15 	stw	r3,172(sp)
   115cc:	1805883a 	mov	r2,r3
   115d0:	183fa10e 	bge	r3,zero,11458 <__alt_data_end+0xfc011458>
   115d4:	0005883a 	mov	r2,zero
   115d8:	003f9f06 	br	11458 <__alt_data_end+0xfc011458>
   115dc:	d9003617 	ldw	r4,216(sp)
   115e0:	000d883a 	mov	r6,zero
   115e4:	000f883a 	mov	r7,zero
   115e8:	a00b883a 	mov	r5,r20
   115ec:	d8c03d15 	stw	r3,244(sp)
   115f0:	da003e15 	stw	r8,248(sp)
   115f4:	001d8100 	call	1d810 <__eqdf2>
   115f8:	d8c03d17 	ldw	r3,244(sp)
   115fc:	da003e17 	ldw	r8,248(sp)
   11600:	103f8726 	beq	r2,zero,11420 <__alt_data_end+0xfc011420>
   11604:	00800044 	movi	r2,1
   11608:	10c7c83a 	sub	r3,r2,r3
   1160c:	d8c02615 	stw	r3,152(sp)
   11610:	003f8406 	br	11424 <__alt_data_end+0xfc011424>
   11614:	20000e1e 	bne	r4,zero,11650 <___svfprintf_internal_r+0x2194>
   11618:	9480004c 	andi	r18,r18,1
   1161c:	90000c1e 	bne	r18,zero,11650 <___svfprintf_internal_r+0x2194>
   11620:	00800044 	movi	r2,1
   11624:	d8802b15 	stw	r2,172(sp)
   11628:	003e6606 	br	10fc4 <__alt_data_end+0xfc010fc4>
   1162c:	00800b44 	movi	r2,45
   11630:	05adc83a 	sub	r22,zero,r22
   11634:	d8802305 	stb	r2,140(sp)
   11638:	003f3b06 	br	11328 <__alt_data_end+0xfc011328>
   1163c:	0005883a 	mov	r2,zero
   11640:	003f4e06 	br	1137c <__alt_data_end+0xfc01137c>
   11644:	90a4703a 	and	r18,r18,r2
   11648:	903f4a26 	beq	r18,zero,11374 <__alt_data_end+0xfc011374>
   1164c:	003f4606 	br	11368 <__alt_data_end+0xfc011368>
   11650:	d8c02a17 	ldw	r3,168(sp)
   11654:	18c00084 	addi	r3,r3,2
   11658:	d8c02b15 	stw	r3,172(sp)
   1165c:	1805883a 	mov	r2,r3
   11660:	183e580e 	bge	r3,zero,10fc4 <__alt_data_end+0xfc010fc4>
   11664:	003fd006 	br	115a8 <__alt_data_end+0xfc0115a8>
   11668:	00800084 	movi	r2,2
   1166c:	10c5c83a 	sub	r2,r2,r3
   11670:	003f7506 	br	11448 <__alt_data_end+0xfc011448>
   11674:	d9402e17 	ldw	r5,184(sp)
   11678:	d9002e17 	ldw	r4,184(sp)
   1167c:	bc400043 	ldbu	r17,1(r23)
   11680:	29400017 	ldw	r5,0(r5)
   11684:	20800104 	addi	r2,r4,4
   11688:	d8802e15 	stw	r2,184(sp)
   1168c:	d9402a15 	stw	r5,168(sp)
   11690:	182f883a 	mov	r23,r3
   11694:	283df10e 	bge	r5,zero,10e5c <__alt_data_end+0xfc010e5c>
   11698:	8c403fcc 	andi	r17,r17,255
   1169c:	017fffc4 	movi	r5,-1
   116a0:	8c40201c 	xori	r17,r17,128
   116a4:	d9402a15 	stw	r5,168(sp)
   116a8:	8c7fe004 	addi	r17,r17,-128
   116ac:	0037d806 	br	f610 <__alt_data_end+0xfc00f610>
   116b0:	9080004c 	andi	r2,r18,1
   116b4:	0039883a 	mov	fp,zero
   116b8:	10000726 	beq	r2,zero,116d8 <___svfprintf_internal_r+0x221c>
   116bc:	d8c02817 	ldw	r3,160(sp)
   116c0:	dc001dc4 	addi	r16,sp,119
   116c4:	00800c04 	movi	r2,48
   116c8:	1c07c83a 	sub	r3,r3,r16
   116cc:	d8801dc5 	stb	r2,119(sp)
   116d0:	d8c02b15 	stw	r3,172(sp)
   116d4:	00393106 	br	fb9c <__alt_data_end+0xfc00fb9c>
   116d8:	d8002b15 	stw	zero,172(sp)
   116dc:	dc001e04 	addi	r16,sp,120
   116e0:	00392e06 	br	fb9c <__alt_data_end+0xfc00fb9c>
   116e4:	0005883a 	mov	r2,zero
   116e8:	003e3306 	br	10fb8 <__alt_data_end+0xfc010fb8>
   116ec:	dd802617 	ldw	r22,152(sp)
   116f0:	003f0706 	br	11310 <__alt_data_end+0xfc011310>
   116f4:	d8c02b03 	ldbu	r3,172(sp)
   116f8:	d8c02785 	stb	r3,158(sp)
   116fc:	003a3506 	br	ffd4 <__alt_data_end+0xfc00ffd4>
   11700:	d8c02b03 	ldbu	r3,172(sp)
   11704:	d8c02785 	stb	r3,158(sp)
   11708:	003a1706 	br	ff68 <__alt_data_end+0xfc00ff68>
   1170c:	0005883a 	mov	r2,zero
   11710:	003f5d06 	br	11488 <__alt_data_end+0xfc011488>
   11714:	d8c02b03 	ldbu	r3,172(sp)
   11718:	d8c02785 	stb	r3,158(sp)
   1171c:	0038f306 	br	faec <__alt_data_end+0xfc00faec>
   11720:	d8c02b03 	ldbu	r3,172(sp)
   11724:	d8c02785 	stb	r3,158(sp)
   11728:	0038be06 	br	fa24 <__alt_data_end+0xfc00fa24>
   1172c:	d8802344 	addi	r2,sp,141
   11730:	003f0506 	br	11348 <__alt_data_end+0xfc011348>
   11734:	d8c02b03 	ldbu	r3,172(sp)
   11738:	d8c02785 	stb	r3,158(sp)
   1173c:	00388b06 	br	f96c <__alt_data_end+0xfc00f96c>
   11740:	d8c02b03 	ldbu	r3,172(sp)
   11744:	d8c02785 	stb	r3,158(sp)
   11748:	003ad706 	br	102a8 <__alt_data_end+0xfc0102a8>
   1174c:	d9403917 	ldw	r5,228(sp)
   11750:	00800304 	movi	r2,12
   11754:	28800015 	stw	r2,0(r5)
   11758:	00bfffc4 	movi	r2,-1
   1175c:	00384306 	br	f86c <__alt_data_end+0xfc00f86c>
   11760:	d8c02b03 	ldbu	r3,172(sp)
   11764:	d8c02785 	stb	r3,158(sp)
   11768:	003ab606 	br	10244 <__alt_data_end+0xfc010244>
   1176c:	d8c02b03 	ldbu	r3,172(sp)
   11770:	d8c02785 	stb	r3,158(sp)
   11774:	003a8906 	br	1019c <__alt_data_end+0xfc01019c>

00011778 <_times_r>:
   11778:	2809883a 	mov	r4,r5
   1177c:	001f8281 	jmpi	1f828 <times>

00011780 <___vfprintf_internal_r>:
   11780:	deffb804 	addi	sp,sp,-288
   11784:	dfc04715 	stw	ra,284(sp)
   11788:	ddc04515 	stw	r23,276(sp)
   1178c:	dd404315 	stw	r21,268(sp)
   11790:	d9002d15 	stw	r4,180(sp)
   11794:	282f883a 	mov	r23,r5
   11798:	302b883a 	mov	r21,r6
   1179c:	d9c02e15 	stw	r7,184(sp)
   117a0:	df004615 	stw	fp,280(sp)
   117a4:	dd804415 	stw	r22,272(sp)
   117a8:	dd004215 	stw	r20,264(sp)
   117ac:	dcc04115 	stw	r19,260(sp)
   117b0:	dc804015 	stw	r18,256(sp)
   117b4:	dc403f15 	stw	r17,252(sp)
   117b8:	dc003e15 	stw	r16,248(sp)
   117bc:	00166c00 	call	166c0 <_localeconv_r>
   117c0:	10800017 	ldw	r2,0(r2)
   117c4:	1009883a 	mov	r4,r2
   117c8:	d8803415 	stw	r2,208(sp)
   117cc:	000f4240 	call	f424 <strlen>
   117d0:	d8803715 	stw	r2,220(sp)
   117d4:	d8802d17 	ldw	r2,180(sp)
   117d8:	10000226 	beq	r2,zero,117e4 <___vfprintf_internal_r+0x64>
   117dc:	10800e17 	ldw	r2,56(r2)
   117e0:	1000fb26 	beq	r2,zero,11bd0 <___vfprintf_internal_r+0x450>
   117e4:	b880030b 	ldhu	r2,12(r23)
   117e8:	10c8000c 	andi	r3,r2,8192
   117ec:	1800061e 	bne	r3,zero,11808 <___vfprintf_internal_r+0x88>
   117f0:	b9001917 	ldw	r4,100(r23)
   117f4:	00f7ffc4 	movi	r3,-8193
   117f8:	10880014 	ori	r2,r2,8192
   117fc:	20c6703a 	and	r3,r4,r3
   11800:	b880030d 	sth	r2,12(r23)
   11804:	b8c01915 	stw	r3,100(r23)
   11808:	10c0020c 	andi	r3,r2,8
   1180c:	1800c326 	beq	r3,zero,11b1c <___vfprintf_internal_r+0x39c>
   11810:	b8c00417 	ldw	r3,16(r23)
   11814:	1800c126 	beq	r3,zero,11b1c <___vfprintf_internal_r+0x39c>
   11818:	1080068c 	andi	r2,r2,26
   1181c:	00c00284 	movi	r3,10
   11820:	10c0c626 	beq	r2,r3,11b3c <___vfprintf_internal_r+0x3bc>
   11824:	d8c00404 	addi	r3,sp,16
   11828:	050000f4 	movhi	r20,3
   1182c:	d9001e04 	addi	r4,sp,120
   11830:	a52a6084 	addi	r20,r20,-22142
   11834:	d8c01e15 	stw	r3,120(sp)
   11838:	d8002015 	stw	zero,128(sp)
   1183c:	d8001f15 	stw	zero,124(sp)
   11840:	d8003315 	stw	zero,204(sp)
   11844:	d8003615 	stw	zero,216(sp)
   11848:	d8003815 	stw	zero,224(sp)
   1184c:	1811883a 	mov	r8,r3
   11850:	d8003915 	stw	zero,228(sp)
   11854:	d8003a15 	stw	zero,232(sp)
   11858:	d8002f15 	stw	zero,188(sp)
   1185c:	d9002815 	stw	r4,160(sp)
   11860:	a8800007 	ldb	r2,0(r21)
   11864:	10028b26 	beq	r2,zero,12294 <___vfprintf_internal_r+0xb14>
   11868:	00c00944 	movi	r3,37
   1186c:	a823883a 	mov	r17,r21
   11870:	10c0021e 	bne	r2,r3,1187c <___vfprintf_internal_r+0xfc>
   11874:	00001406 	br	118c8 <___vfprintf_internal_r+0x148>
   11878:	10c00326 	beq	r2,r3,11888 <___vfprintf_internal_r+0x108>
   1187c:	8c400044 	addi	r17,r17,1
   11880:	88800007 	ldb	r2,0(r17)
   11884:	103ffc1e 	bne	r2,zero,11878 <__alt_data_end+0xfc011878>
   11888:	8d61c83a 	sub	r16,r17,r21
   1188c:	80000e26 	beq	r16,zero,118c8 <___vfprintf_internal_r+0x148>
   11890:	d8c02017 	ldw	r3,128(sp)
   11894:	d8801f17 	ldw	r2,124(sp)
   11898:	45400015 	stw	r21,0(r8)
   1189c:	1c07883a 	add	r3,r3,r16
   118a0:	10800044 	addi	r2,r2,1
   118a4:	d8c02015 	stw	r3,128(sp)
   118a8:	44000115 	stw	r16,4(r8)
   118ac:	d8801f15 	stw	r2,124(sp)
   118b0:	00c001c4 	movi	r3,7
   118b4:	1880a916 	blt	r3,r2,11b5c <___vfprintf_internal_r+0x3dc>
   118b8:	42000204 	addi	r8,r8,8
   118bc:	d9402f17 	ldw	r5,188(sp)
   118c0:	2c0b883a 	add	r5,r5,r16
   118c4:	d9402f15 	stw	r5,188(sp)
   118c8:	88800007 	ldb	r2,0(r17)
   118cc:	1000aa26 	beq	r2,zero,11b78 <___vfprintf_internal_r+0x3f8>
   118d0:	8d400044 	addi	r21,r17,1
   118d4:	8c400047 	ldb	r17,1(r17)
   118d8:	0021883a 	mov	r16,zero
   118dc:	00bfffc4 	movi	r2,-1
   118e0:	0025883a 	mov	r18,zero
   118e4:	dc002905 	stb	r16,164(sp)
   118e8:	d8002785 	stb	zero,158(sp)
   118ec:	d8002b05 	stb	zero,172(sp)
   118f0:	d8802a15 	stw	r2,168(sp)
   118f4:	d8003115 	stw	zero,196(sp)
   118f8:	04c01604 	movi	r19,88
   118fc:	05800244 	movi	r22,9
   11900:	9021883a 	mov	r16,r18
   11904:	4039883a 	mov	fp,r8
   11908:	ad400044 	addi	r21,r21,1
   1190c:	88bff804 	addi	r2,r17,-32
   11910:	98833236 	bltu	r19,r2,125dc <___vfprintf_internal_r+0xe5c>
   11914:	100490ba 	slli	r2,r2,2
   11918:	00c00074 	movhi	r3,1
   1191c:	18c64b04 	addi	r3,r3,6444
   11920:	10c5883a 	add	r2,r2,r3
   11924:	10800017 	ldw	r2,0(r2)
   11928:	1000683a 	jmp	r2
   1192c:	000124d4 	movui	zero,1171
   11930:	000125dc 	xori	zero,zero,1175
   11934:	000125dc 	xori	zero,zero,1175
   11938:	000124f4 	movhi	zero,1171
   1193c:	000125dc 	xori	zero,zero,1175
   11940:	000125dc 	xori	zero,zero,1175
   11944:	000125dc 	xori	zero,zero,1175
   11948:	000125dc 	xori	zero,zero,1175
   1194c:	000125dc 	xori	zero,zero,1175
   11950:	000125dc 	xori	zero,zero,1175
   11954:	00011bdc 	xori	zero,zero,1135
   11958:	000123e4 	muli	zero,zero,1167
   1195c:	000125dc 	xori	zero,zero,1175
   11960:	00011aa0 	cmpeqi	zero,zero,1130
   11964:	00011c00 	call	11c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x22c>
   11968:	000125dc 	xori	zero,zero,1175
   1196c:	00011c50 	cmplti	zero,zero,1137
   11970:	00011c5c 	xori	zero,zero,1137
   11974:	00011c5c 	xori	zero,zero,1137
   11978:	00011c5c 	xori	zero,zero,1137
   1197c:	00011c5c 	xori	zero,zero,1137
   11980:	00011c5c 	xori	zero,zero,1137
   11984:	00011c5c 	xori	zero,zero,1137
   11988:	00011c5c 	xori	zero,zero,1137
   1198c:	00011c5c 	xori	zero,zero,1137
   11990:	00011c5c 	xori	zero,zero,1137
   11994:	000125dc 	xori	zero,zero,1175
   11998:	000125dc 	xori	zero,zero,1175
   1199c:	000125dc 	xori	zero,zero,1175
   119a0:	000125dc 	xori	zero,zero,1175
   119a4:	000125dc 	xori	zero,zero,1175
   119a8:	000125dc 	xori	zero,zero,1175
   119ac:	000125dc 	xori	zero,zero,1175
   119b0:	000125dc 	xori	zero,zero,1175
   119b4:	000125dc 	xori	zero,zero,1175
   119b8:	000125dc 	xori	zero,zero,1175
   119bc:	00011c98 	cmpnei	zero,zero,1138
   119c0:	00011d60 	cmpeqi	zero,zero,1141
   119c4:	000125dc 	xori	zero,zero,1175
   119c8:	00011d60 	cmpeqi	zero,zero,1141
   119cc:	000125dc 	xori	zero,zero,1175
   119d0:	000125dc 	xori	zero,zero,1175
   119d4:	000125dc 	xori	zero,zero,1175
   119d8:	000125dc 	xori	zero,zero,1175
   119dc:	00011e0c 	andi	zero,zero,1144
   119e0:	000125dc 	xori	zero,zero,1175
   119e4:	000125dc 	xori	zero,zero,1175
   119e8:	00011e18 	cmpnei	zero,zero,1144
   119ec:	000125dc 	xori	zero,zero,1175
   119f0:	000125dc 	xori	zero,zero,1175
   119f4:	000125dc 	xori	zero,zero,1175
   119f8:	000125dc 	xori	zero,zero,1175
   119fc:	000125dc 	xori	zero,zero,1175
   11a00:	0001229c 	xori	zero,zero,1162
   11a04:	000125dc 	xori	zero,zero,1175
   11a08:	000125dc 	xori	zero,zero,1175
   11a0c:	00012308 	cmpgei	zero,zero,1164
   11a10:	000125dc 	xori	zero,zero,1175
   11a14:	000125dc 	xori	zero,zero,1175
   11a18:	000125dc 	xori	zero,zero,1175
   11a1c:	000125dc 	xori	zero,zero,1175
   11a20:	000125dc 	xori	zero,zero,1175
   11a24:	000125dc 	xori	zero,zero,1175
   11a28:	000125dc 	xori	zero,zero,1175
   11a2c:	000125dc 	xori	zero,zero,1175
   11a30:	000125dc 	xori	zero,zero,1175
   11a34:	000125dc 	xori	zero,zero,1175
   11a38:	00012580 	call	1258 <_ZN3USB11outTransferEhhtPh+0x18>
   11a3c:	00012500 	call	1250 <_ZN3USB11outTransferEhhtPh+0x10>
   11a40:	00011d60 	cmpeqi	zero,zero,1141
   11a44:	00011d60 	cmpeqi	zero,zero,1141
   11a48:	00011d60 	cmpeqi	zero,zero,1141
   11a4c:	00012520 	cmpeqi	zero,zero,1172
   11a50:	00012500 	call	1250 <_ZN3USB11outTransferEhhtPh+0x10>
   11a54:	000125dc 	xori	zero,zero,1175
   11a58:	000125dc 	xori	zero,zero,1175
   11a5c:	0001252c 	andhi	zero,zero,1172
   11a60:	000125dc 	xori	zero,zero,1175
   11a64:	00012540 	call	1254 <_ZN3USB11outTransferEhhtPh+0x14>
   11a68:	000123c4 	movi	zero,1167
   11a6c:	00011aac 	andhi	zero,zero,1130
   11a70:	000123fc 	xorhi	zero,zero,1167
   11a74:	000125dc 	xori	zero,zero,1175
   11a78:	00012408 	cmpgei	zero,zero,1168
   11a7c:	000125dc 	xori	zero,zero,1175
   11a80:	0001246c 	andhi	zero,zero,1169
   11a84:	000125dc 	xori	zero,zero,1175
   11a88:	000125dc 	xori	zero,zero,1175
   11a8c:	0001248c 	andi	zero,zero,1170
   11a90:	d8c03117 	ldw	r3,196(sp)
   11a94:	d8802e15 	stw	r2,184(sp)
   11a98:	00c7c83a 	sub	r3,zero,r3
   11a9c:	d8c03115 	stw	r3,196(sp)
   11aa0:	84000114 	ori	r16,r16,4
   11aa4:	ac400007 	ldb	r17,0(r21)
   11aa8:	003f9706 	br	11908 <__alt_data_end+0xfc011908>
   11aac:	00800c04 	movi	r2,48
   11ab0:	d8802705 	stb	r2,156(sp)
   11ab4:	00801e04 	movi	r2,120
   11ab8:	d8802745 	stb	r2,157(sp)
   11abc:	d9002a17 	ldw	r4,168(sp)
   11ac0:	d8802e17 	ldw	r2,184(sp)
   11ac4:	d8002785 	stb	zero,158(sp)
   11ac8:	e011883a 	mov	r8,fp
   11acc:	10c00104 	addi	r3,r2,4
   11ad0:	14c00017 	ldw	r19,0(r2)
   11ad4:	002d883a 	mov	r22,zero
   11ad8:	80800094 	ori	r2,r16,2
   11adc:	2002ca16 	blt	r4,zero,12608 <___vfprintf_internal_r+0xe88>
   11ae0:	00bfdfc4 	movi	r2,-129
   11ae4:	80a4703a 	and	r18,r16,r2
   11ae8:	d8c02e15 	stw	r3,184(sp)
   11aec:	94800094 	ori	r18,r18,2
   11af0:	9802b41e 	bne	r19,zero,125c4 <___vfprintf_internal_r+0xe44>
   11af4:	014000f4 	movhi	r5,3
   11af8:	296a5104 	addi	r5,r5,-22204
   11afc:	d9403915 	stw	r5,228(sp)
   11b00:	04401e04 	movi	r17,120
   11b04:	d8802a17 	ldw	r2,168(sp)
   11b08:	0039883a 	mov	fp,zero
   11b0c:	1001fa26 	beq	r2,zero,122f8 <___vfprintf_internal_r+0xb78>
   11b10:	0027883a 	mov	r19,zero
   11b14:	002d883a 	mov	r22,zero
   11b18:	00021906 	br	12380 <___vfprintf_internal_r+0xc00>
   11b1c:	d9002d17 	ldw	r4,180(sp)
   11b20:	b80b883a 	mov	r5,r23
   11b24:	0013b340 	call	13b34 <__swsetup_r>
   11b28:	1005dc1e 	bne	r2,zero,1329c <___vfprintf_internal_r+0x1b1c>
   11b2c:	b880030b 	ldhu	r2,12(r23)
   11b30:	00c00284 	movi	r3,10
   11b34:	1080068c 	andi	r2,r2,26
   11b38:	10ff3a1e 	bne	r2,r3,11824 <__alt_data_end+0xfc011824>
   11b3c:	b880038f 	ldh	r2,14(r23)
   11b40:	103f3816 	blt	r2,zero,11824 <__alt_data_end+0xfc011824>
   11b44:	d9c02e17 	ldw	r7,184(sp)
   11b48:	d9002d17 	ldw	r4,180(sp)
   11b4c:	a80d883a 	mov	r6,r21
   11b50:	b80b883a 	mov	r5,r23
   11b54:	0013a780 	call	13a78 <__sbprintf>
   11b58:	00001106 	br	11ba0 <___vfprintf_internal_r+0x420>
   11b5c:	d9002d17 	ldw	r4,180(sp)
   11b60:	d9801e04 	addi	r6,sp,120
   11b64:	b80b883a 	mov	r5,r23
   11b68:	0019a8c0 	call	19a8c <__sprint_r>
   11b6c:	1000081e 	bne	r2,zero,11b90 <___vfprintf_internal_r+0x410>
   11b70:	da000404 	addi	r8,sp,16
   11b74:	003f5106 	br	118bc <__alt_data_end+0xfc0118bc>
   11b78:	d8802017 	ldw	r2,128(sp)
   11b7c:	10000426 	beq	r2,zero,11b90 <___vfprintf_internal_r+0x410>
   11b80:	d9002d17 	ldw	r4,180(sp)
   11b84:	d9801e04 	addi	r6,sp,120
   11b88:	b80b883a 	mov	r5,r23
   11b8c:	0019a8c0 	call	19a8c <__sprint_r>
   11b90:	b880030b 	ldhu	r2,12(r23)
   11b94:	1080100c 	andi	r2,r2,64
   11b98:	1005c01e 	bne	r2,zero,1329c <___vfprintf_internal_r+0x1b1c>
   11b9c:	d8802f17 	ldw	r2,188(sp)
   11ba0:	dfc04717 	ldw	ra,284(sp)
   11ba4:	df004617 	ldw	fp,280(sp)
   11ba8:	ddc04517 	ldw	r23,276(sp)
   11bac:	dd804417 	ldw	r22,272(sp)
   11bb0:	dd404317 	ldw	r21,268(sp)
   11bb4:	dd004217 	ldw	r20,264(sp)
   11bb8:	dcc04117 	ldw	r19,260(sp)
   11bbc:	dc804017 	ldw	r18,256(sp)
   11bc0:	dc403f17 	ldw	r17,252(sp)
   11bc4:	dc003e17 	ldw	r16,248(sp)
   11bc8:	dec04804 	addi	sp,sp,288
   11bcc:	f800283a 	ret
   11bd0:	d9002d17 	ldw	r4,180(sp)
   11bd4:	0015b400 	call	15b40 <__sinit>
   11bd8:	003f0206 	br	117e4 <__alt_data_end+0xfc0117e4>
   11bdc:	d9002e17 	ldw	r4,184(sp)
   11be0:	d9402e17 	ldw	r5,184(sp)
   11be4:	21000017 	ldw	r4,0(r4)
   11be8:	28800104 	addi	r2,r5,4
   11bec:	d9003115 	stw	r4,196(sp)
   11bf0:	203fa716 	blt	r4,zero,11a90 <__alt_data_end+0xfc011a90>
   11bf4:	d8802e15 	stw	r2,184(sp)
   11bf8:	ac400007 	ldb	r17,0(r21)
   11bfc:	003f4206 	br	11908 <__alt_data_end+0xfc011908>
   11c00:	ac400007 	ldb	r17,0(r21)
   11c04:	01000a84 	movi	r4,42
   11c08:	a8c00044 	addi	r3,r21,1
   11c0c:	89075826 	beq	r17,r4,13970 <___vfprintf_internal_r+0x21f0>
   11c10:	8cbff404 	addi	r18,r17,-48
   11c14:	b486ae36 	bltu	r22,r18,136d0 <___vfprintf_internal_r+0x1f50>
   11c18:	0009883a 	mov	r4,zero
   11c1c:	1823883a 	mov	r17,r3
   11c20:	01400284 	movi	r5,10
   11c24:	000cda80 	call	cda8 <__mulsi3>
   11c28:	88c00007 	ldb	r3,0(r17)
   11c2c:	1489883a 	add	r4,r2,r18
   11c30:	8d400044 	addi	r21,r17,1
   11c34:	1cbff404 	addi	r18,r3,-48
   11c38:	a823883a 	mov	r17,r21
   11c3c:	b4bff82e 	bgeu	r22,r18,11c20 <__alt_data_end+0xfc011c20>
   11c40:	1823883a 	mov	r17,r3
   11c44:	2005f616 	blt	r4,zero,13420 <___vfprintf_internal_r+0x1ca0>
   11c48:	d9002a15 	stw	r4,168(sp)
   11c4c:	003f2f06 	br	1190c <__alt_data_end+0xfc01190c>
   11c50:	84002014 	ori	r16,r16,128
   11c54:	ac400007 	ldb	r17,0(r21)
   11c58:	003f2b06 	br	11908 <__alt_data_end+0xfc011908>
   11c5c:	8cbff404 	addi	r18,r17,-48
   11c60:	d8003115 	stw	zero,196(sp)
   11c64:	0009883a 	mov	r4,zero
   11c68:	a823883a 	mov	r17,r21
   11c6c:	01400284 	movi	r5,10
   11c70:	000cda80 	call	cda8 <__mulsi3>
   11c74:	88c00007 	ldb	r3,0(r17)
   11c78:	9089883a 	add	r4,r18,r2
   11c7c:	ad400044 	addi	r21,r21,1
   11c80:	1cbff404 	addi	r18,r3,-48
   11c84:	a823883a 	mov	r17,r21
   11c88:	b4bff82e 	bgeu	r22,r18,11c6c <__alt_data_end+0xfc011c6c>
   11c8c:	1823883a 	mov	r17,r3
   11c90:	d9003115 	stw	r4,196(sp)
   11c94:	003f1d06 	br	1190c <__alt_data_end+0xfc01190c>
   11c98:	8025883a 	mov	r18,r16
   11c9c:	dc002903 	ldbu	r16,164(sp)
   11ca0:	e011883a 	mov	r8,fp
   11ca4:	84003fcc 	andi	r16,r16,255
   11ca8:	8007531e 	bne	r16,zero,139f8 <___vfprintf_internal_r+0x2278>
   11cac:	94800414 	ori	r18,r18,16
   11cb0:	9080080c 	andi	r2,r18,32
   11cb4:	1003a326 	beq	r2,zero,12b44 <___vfprintf_internal_r+0x13c4>
   11cb8:	d9002e17 	ldw	r4,184(sp)
   11cbc:	20800117 	ldw	r2,4(r4)
   11cc0:	24c00017 	ldw	r19,0(r4)
   11cc4:	21000204 	addi	r4,r4,8
   11cc8:	d9002e15 	stw	r4,184(sp)
   11ccc:	102d883a 	mov	r22,r2
   11cd0:	10047316 	blt	r2,zero,12ea0 <___vfprintf_internal_r+0x1720>
   11cd4:	d9002a17 	ldw	r4,168(sp)
   11cd8:	df002783 	ldbu	fp,158(sp)
   11cdc:	2003e416 	blt	r4,zero,12c70 <___vfprintf_internal_r+0x14f0>
   11ce0:	00ffdfc4 	movi	r3,-129
   11ce4:	9d84b03a 	or	r2,r19,r22
   11ce8:	90e4703a 	and	r18,r18,r3
   11cec:	10018026 	beq	r2,zero,122f0 <___vfprintf_internal_r+0xb70>
   11cf0:	b003ab26 	beq	r22,zero,12ba0 <___vfprintf_internal_r+0x1420>
   11cf4:	dc402915 	stw	r17,164(sp)
   11cf8:	dc001e04 	addi	r16,sp,120
   11cfc:	b023883a 	mov	r17,r22
   11d00:	402d883a 	mov	r22,r8
   11d04:	9809883a 	mov	r4,r19
   11d08:	880b883a 	mov	r5,r17
   11d0c:	01800284 	movi	r6,10
   11d10:	000f883a 	mov	r7,zero
   11d14:	001bfd00 	call	1bfd0 <__umoddi3>
   11d18:	10800c04 	addi	r2,r2,48
   11d1c:	843fffc4 	addi	r16,r16,-1
   11d20:	9809883a 	mov	r4,r19
   11d24:	880b883a 	mov	r5,r17
   11d28:	80800005 	stb	r2,0(r16)
   11d2c:	01800284 	movi	r6,10
   11d30:	000f883a 	mov	r7,zero
   11d34:	001b9d40 	call	1b9d4 <__udivdi3>
   11d38:	1027883a 	mov	r19,r2
   11d3c:	10c4b03a 	or	r2,r2,r3
   11d40:	1823883a 	mov	r17,r3
   11d44:	103fef1e 	bne	r2,zero,11d04 <__alt_data_end+0xfc011d04>
   11d48:	d8c02817 	ldw	r3,160(sp)
   11d4c:	dc402917 	ldw	r17,164(sp)
   11d50:	b011883a 	mov	r8,r22
   11d54:	1c07c83a 	sub	r3,r3,r16
   11d58:	d8c02b15 	stw	r3,172(sp)
   11d5c:	00005f06 	br	11edc <___vfprintf_internal_r+0x75c>
   11d60:	8025883a 	mov	r18,r16
   11d64:	dc002903 	ldbu	r16,164(sp)
   11d68:	e011883a 	mov	r8,fp
   11d6c:	84003fcc 	andi	r16,r16,255
   11d70:	80071e1e 	bne	r16,zero,139ec <___vfprintf_internal_r+0x226c>
   11d74:	9080020c 	andi	r2,r18,8
   11d78:	1004af26 	beq	r2,zero,13038 <___vfprintf_internal_r+0x18b8>
   11d7c:	d9002e17 	ldw	r4,184(sp)
   11d80:	d9402e17 	ldw	r5,184(sp)
   11d84:	d8802e17 	ldw	r2,184(sp)
   11d88:	21000017 	ldw	r4,0(r4)
   11d8c:	29400117 	ldw	r5,4(r5)
   11d90:	10800204 	addi	r2,r2,8
   11d94:	d9003615 	stw	r4,216(sp)
   11d98:	d9403815 	stw	r5,224(sp)
   11d9c:	d8802e15 	stw	r2,184(sp)
   11da0:	d9003617 	ldw	r4,216(sp)
   11da4:	d9403817 	ldw	r5,224(sp)
   11da8:	da003d15 	stw	r8,244(sp)
   11dac:	04000044 	movi	r16,1
   11db0:	00182700 	call	18270 <__fpclassifyd>
   11db4:	da003d17 	ldw	r8,244(sp)
   11db8:	1404441e 	bne	r2,r16,12ecc <___vfprintf_internal_r+0x174c>
   11dbc:	d9003617 	ldw	r4,216(sp)
   11dc0:	d9403817 	ldw	r5,224(sp)
   11dc4:	000d883a 	mov	r6,zero
   11dc8:	000f883a 	mov	r7,zero
   11dcc:	001d9740 	call	1d974 <__ledf2>
   11dd0:	da003d17 	ldw	r8,244(sp)
   11dd4:	1005e316 	blt	r2,zero,13564 <___vfprintf_internal_r+0x1de4>
   11dd8:	df002783 	ldbu	fp,158(sp)
   11ddc:	008011c4 	movi	r2,71
   11de0:	1445580e 	bge	r2,r17,13344 <___vfprintf_internal_r+0x1bc4>
   11de4:	040000f4 	movhi	r16,3
   11de8:	842a4904 	addi	r16,r16,-22236
   11dec:	00c000c4 	movi	r3,3
   11df0:	00bfdfc4 	movi	r2,-129
   11df4:	d8c02915 	stw	r3,164(sp)
   11df8:	90a4703a 	and	r18,r18,r2
   11dfc:	d8c02b15 	stw	r3,172(sp)
   11e00:	d8002a15 	stw	zero,168(sp)
   11e04:	d8003215 	stw	zero,200(sp)
   11e08:	00003a06 	br	11ef4 <___vfprintf_internal_r+0x774>
   11e0c:	84000214 	ori	r16,r16,8
   11e10:	ac400007 	ldb	r17,0(r21)
   11e14:	003ebc06 	br	11908 <__alt_data_end+0xfc011908>
   11e18:	8025883a 	mov	r18,r16
   11e1c:	dc002903 	ldbu	r16,164(sp)
   11e20:	e011883a 	mov	r8,fp
   11e24:	84003fcc 	andi	r16,r16,255
   11e28:	8007001e 	bne	r16,zero,13a2c <___vfprintf_internal_r+0x22ac>
   11e2c:	94800414 	ori	r18,r18,16
   11e30:	9080080c 	andi	r2,r18,32
   11e34:	1002fa26 	beq	r2,zero,12a20 <___vfprintf_internal_r+0x12a0>
   11e38:	d9002e17 	ldw	r4,184(sp)
   11e3c:	d9402a17 	ldw	r5,168(sp)
   11e40:	d8002785 	stb	zero,158(sp)
   11e44:	20800204 	addi	r2,r4,8
   11e48:	24c00017 	ldw	r19,0(r4)
   11e4c:	25800117 	ldw	r22,4(r4)
   11e50:	2804b116 	blt	r5,zero,13118 <___vfprintf_internal_r+0x1998>
   11e54:	013fdfc4 	movi	r4,-129
   11e58:	9d86b03a 	or	r3,r19,r22
   11e5c:	d8802e15 	stw	r2,184(sp)
   11e60:	9124703a 	and	r18,r18,r4
   11e64:	1802fb1e 	bne	r3,zero,12a54 <___vfprintf_internal_r+0x12d4>
   11e68:	d8c02a17 	ldw	r3,168(sp)
   11e6c:	0039883a 	mov	fp,zero
   11e70:	1805e526 	beq	r3,zero,13608 <___vfprintf_internal_r+0x1e88>
   11e74:	0027883a 	mov	r19,zero
   11e78:	002d883a 	mov	r22,zero
   11e7c:	dc001e04 	addi	r16,sp,120
   11e80:	9806d0fa 	srli	r3,r19,3
   11e84:	b008977a 	slli	r4,r22,29
   11e88:	b02cd0fa 	srli	r22,r22,3
   11e8c:	9cc001cc 	andi	r19,r19,7
   11e90:	98800c04 	addi	r2,r19,48
   11e94:	843fffc4 	addi	r16,r16,-1
   11e98:	20e6b03a 	or	r19,r4,r3
   11e9c:	80800005 	stb	r2,0(r16)
   11ea0:	9d86b03a 	or	r3,r19,r22
   11ea4:	183ff61e 	bne	r3,zero,11e80 <__alt_data_end+0xfc011e80>
   11ea8:	90c0004c 	andi	r3,r18,1
   11eac:	18014126 	beq	r3,zero,123b4 <___vfprintf_internal_r+0xc34>
   11eb0:	10803fcc 	andi	r2,r2,255
   11eb4:	1080201c 	xori	r2,r2,128
   11eb8:	10bfe004 	addi	r2,r2,-128
   11ebc:	00c00c04 	movi	r3,48
   11ec0:	10c13c26 	beq	r2,r3,123b4 <___vfprintf_internal_r+0xc34>
   11ec4:	80ffffc5 	stb	r3,-1(r16)
   11ec8:	d8c02817 	ldw	r3,160(sp)
   11ecc:	80bfffc4 	addi	r2,r16,-1
   11ed0:	1021883a 	mov	r16,r2
   11ed4:	1887c83a 	sub	r3,r3,r2
   11ed8:	d8c02b15 	stw	r3,172(sp)
   11edc:	d8802b17 	ldw	r2,172(sp)
   11ee0:	d9002a17 	ldw	r4,168(sp)
   11ee4:	1100010e 	bge	r2,r4,11eec <___vfprintf_internal_r+0x76c>
   11ee8:	2005883a 	mov	r2,r4
   11eec:	d8802915 	stw	r2,164(sp)
   11ef0:	d8003215 	stw	zero,200(sp)
   11ef4:	e7003fcc 	andi	fp,fp,255
   11ef8:	e700201c 	xori	fp,fp,128
   11efc:	e73fe004 	addi	fp,fp,-128
   11f00:	e0000326 	beq	fp,zero,11f10 <___vfprintf_internal_r+0x790>
   11f04:	d8c02917 	ldw	r3,164(sp)
   11f08:	18c00044 	addi	r3,r3,1
   11f0c:	d8c02915 	stw	r3,164(sp)
   11f10:	90c0008c 	andi	r3,r18,2
   11f14:	d8c02c15 	stw	r3,176(sp)
   11f18:	18000326 	beq	r3,zero,11f28 <___vfprintf_internal_r+0x7a8>
   11f1c:	d8c02917 	ldw	r3,164(sp)
   11f20:	18c00084 	addi	r3,r3,2
   11f24:	d8c02915 	stw	r3,164(sp)
   11f28:	90c0210c 	andi	r3,r18,132
   11f2c:	d8c03015 	stw	r3,192(sp)
   11f30:	1801c51e 	bne	r3,zero,12648 <___vfprintf_internal_r+0xec8>
   11f34:	d9003117 	ldw	r4,196(sp)
   11f38:	d8c02917 	ldw	r3,164(sp)
   11f3c:	20e7c83a 	sub	r19,r4,r3
   11f40:	04c1c10e 	bge	zero,r19,12648 <___vfprintf_internal_r+0xec8>
   11f44:	02400404 	movi	r9,16
   11f48:	d8c02017 	ldw	r3,128(sp)
   11f4c:	d8801f17 	ldw	r2,124(sp)
   11f50:	4cc52f0e 	bge	r9,r19,13410 <___vfprintf_internal_r+0x1c90>
   11f54:	014000f4 	movhi	r5,3
   11f58:	296a6484 	addi	r5,r5,-22126
   11f5c:	dc403b15 	stw	r17,236(sp)
   11f60:	d9403515 	stw	r5,212(sp)
   11f64:	9823883a 	mov	r17,r19
   11f68:	482d883a 	mov	r22,r9
   11f6c:	9027883a 	mov	r19,r18
   11f70:	070001c4 	movi	fp,7
   11f74:	8025883a 	mov	r18,r16
   11f78:	dc002d17 	ldw	r16,180(sp)
   11f7c:	00000306 	br	11f8c <___vfprintf_internal_r+0x80c>
   11f80:	8c7ffc04 	addi	r17,r17,-16
   11f84:	42000204 	addi	r8,r8,8
   11f88:	b440130e 	bge	r22,r17,11fd8 <___vfprintf_internal_r+0x858>
   11f8c:	010000f4 	movhi	r4,3
   11f90:	18c00404 	addi	r3,r3,16
   11f94:	10800044 	addi	r2,r2,1
   11f98:	212a6484 	addi	r4,r4,-22126
   11f9c:	41000015 	stw	r4,0(r8)
   11fa0:	45800115 	stw	r22,4(r8)
   11fa4:	d8c02015 	stw	r3,128(sp)
   11fa8:	d8801f15 	stw	r2,124(sp)
   11fac:	e0bff40e 	bge	fp,r2,11f80 <__alt_data_end+0xfc011f80>
   11fb0:	d9801e04 	addi	r6,sp,120
   11fb4:	b80b883a 	mov	r5,r23
   11fb8:	8009883a 	mov	r4,r16
   11fbc:	0019a8c0 	call	19a8c <__sprint_r>
   11fc0:	103ef31e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   11fc4:	8c7ffc04 	addi	r17,r17,-16
   11fc8:	d8c02017 	ldw	r3,128(sp)
   11fcc:	d8801f17 	ldw	r2,124(sp)
   11fd0:	da000404 	addi	r8,sp,16
   11fd4:	b47fed16 	blt	r22,r17,11f8c <__alt_data_end+0xfc011f8c>
   11fd8:	9021883a 	mov	r16,r18
   11fdc:	9825883a 	mov	r18,r19
   11fe0:	8827883a 	mov	r19,r17
   11fe4:	dc403b17 	ldw	r17,236(sp)
   11fe8:	d9403517 	ldw	r5,212(sp)
   11fec:	98c7883a 	add	r3,r19,r3
   11ff0:	10800044 	addi	r2,r2,1
   11ff4:	41400015 	stw	r5,0(r8)
   11ff8:	44c00115 	stw	r19,4(r8)
   11ffc:	d8c02015 	stw	r3,128(sp)
   12000:	d8801f15 	stw	r2,124(sp)
   12004:	010001c4 	movi	r4,7
   12008:	2082c516 	blt	r4,r2,12b20 <___vfprintf_internal_r+0x13a0>
   1200c:	df002787 	ldb	fp,158(sp)
   12010:	42000204 	addi	r8,r8,8
   12014:	e0000c26 	beq	fp,zero,12048 <___vfprintf_internal_r+0x8c8>
   12018:	d8801f17 	ldw	r2,124(sp)
   1201c:	d9002784 	addi	r4,sp,158
   12020:	18c00044 	addi	r3,r3,1
   12024:	10800044 	addi	r2,r2,1
   12028:	41000015 	stw	r4,0(r8)
   1202c:	01000044 	movi	r4,1
   12030:	41000115 	stw	r4,4(r8)
   12034:	d8c02015 	stw	r3,128(sp)
   12038:	d8801f15 	stw	r2,124(sp)
   1203c:	010001c4 	movi	r4,7
   12040:	20825e16 	blt	r4,r2,129bc <___vfprintf_internal_r+0x123c>
   12044:	42000204 	addi	r8,r8,8
   12048:	d8802c17 	ldw	r2,176(sp)
   1204c:	10000c26 	beq	r2,zero,12080 <___vfprintf_internal_r+0x900>
   12050:	d8801f17 	ldw	r2,124(sp)
   12054:	d9002704 	addi	r4,sp,156
   12058:	18c00084 	addi	r3,r3,2
   1205c:	10800044 	addi	r2,r2,1
   12060:	41000015 	stw	r4,0(r8)
   12064:	01000084 	movi	r4,2
   12068:	41000115 	stw	r4,4(r8)
   1206c:	d8c02015 	stw	r3,128(sp)
   12070:	d8801f15 	stw	r2,124(sp)
   12074:	010001c4 	movi	r4,7
   12078:	20825816 	blt	r4,r2,129dc <___vfprintf_internal_r+0x125c>
   1207c:	42000204 	addi	r8,r8,8
   12080:	d9003017 	ldw	r4,192(sp)
   12084:	00802004 	movi	r2,128
   12088:	2081bb26 	beq	r4,r2,12778 <___vfprintf_internal_r+0xff8>
   1208c:	d9402a17 	ldw	r5,168(sp)
   12090:	d8802b17 	ldw	r2,172(sp)
   12094:	28adc83a 	sub	r22,r5,r2
   12098:	0580310e 	bge	zero,r22,12160 <___vfprintf_internal_r+0x9e0>
   1209c:	07000404 	movi	fp,16
   120a0:	d8801f17 	ldw	r2,124(sp)
   120a4:	e584360e 	bge	fp,r22,13180 <___vfprintf_internal_r+0x1a00>
   120a8:	014000f4 	movhi	r5,3
   120ac:	296a6084 	addi	r5,r5,-22142
   120b0:	dc402a15 	stw	r17,168(sp)
   120b4:	d9402c15 	stw	r5,176(sp)
   120b8:	b023883a 	mov	r17,r22
   120bc:	04c001c4 	movi	r19,7
   120c0:	a82d883a 	mov	r22,r21
   120c4:	902b883a 	mov	r21,r18
   120c8:	8025883a 	mov	r18,r16
   120cc:	dc002d17 	ldw	r16,180(sp)
   120d0:	00000306 	br	120e0 <___vfprintf_internal_r+0x960>
   120d4:	8c7ffc04 	addi	r17,r17,-16
   120d8:	42000204 	addi	r8,r8,8
   120dc:	e440110e 	bge	fp,r17,12124 <___vfprintf_internal_r+0x9a4>
   120e0:	18c00404 	addi	r3,r3,16
   120e4:	10800044 	addi	r2,r2,1
   120e8:	45000015 	stw	r20,0(r8)
   120ec:	47000115 	stw	fp,4(r8)
   120f0:	d8c02015 	stw	r3,128(sp)
   120f4:	d8801f15 	stw	r2,124(sp)
   120f8:	98bff60e 	bge	r19,r2,120d4 <__alt_data_end+0xfc0120d4>
   120fc:	d9801e04 	addi	r6,sp,120
   12100:	b80b883a 	mov	r5,r23
   12104:	8009883a 	mov	r4,r16
   12108:	0019a8c0 	call	19a8c <__sprint_r>
   1210c:	103ea01e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12110:	8c7ffc04 	addi	r17,r17,-16
   12114:	d8c02017 	ldw	r3,128(sp)
   12118:	d8801f17 	ldw	r2,124(sp)
   1211c:	da000404 	addi	r8,sp,16
   12120:	e47fef16 	blt	fp,r17,120e0 <__alt_data_end+0xfc0120e0>
   12124:	9021883a 	mov	r16,r18
   12128:	a825883a 	mov	r18,r21
   1212c:	b02b883a 	mov	r21,r22
   12130:	882d883a 	mov	r22,r17
   12134:	dc402a17 	ldw	r17,168(sp)
   12138:	d9002c17 	ldw	r4,176(sp)
   1213c:	1d87883a 	add	r3,r3,r22
   12140:	10800044 	addi	r2,r2,1
   12144:	41000015 	stw	r4,0(r8)
   12148:	45800115 	stw	r22,4(r8)
   1214c:	d8c02015 	stw	r3,128(sp)
   12150:	d8801f15 	stw	r2,124(sp)
   12154:	010001c4 	movi	r4,7
   12158:	20821016 	blt	r4,r2,1299c <___vfprintf_internal_r+0x121c>
   1215c:	42000204 	addi	r8,r8,8
   12160:	9080400c 	andi	r2,r18,256
   12164:	10013a1e 	bne	r2,zero,12650 <___vfprintf_internal_r+0xed0>
   12168:	d9402b17 	ldw	r5,172(sp)
   1216c:	d8801f17 	ldw	r2,124(sp)
   12170:	44000015 	stw	r16,0(r8)
   12174:	1947883a 	add	r3,r3,r5
   12178:	10800044 	addi	r2,r2,1
   1217c:	41400115 	stw	r5,4(r8)
   12180:	d8c02015 	stw	r3,128(sp)
   12184:	d8801f15 	stw	r2,124(sp)
   12188:	010001c4 	movi	r4,7
   1218c:	2081f516 	blt	r4,r2,12964 <___vfprintf_internal_r+0x11e4>
   12190:	42000204 	addi	r8,r8,8
   12194:	9480010c 	andi	r18,r18,4
   12198:	90003226 	beq	r18,zero,12264 <___vfprintf_internal_r+0xae4>
   1219c:	d9403117 	ldw	r5,196(sp)
   121a0:	d8802917 	ldw	r2,164(sp)
   121a4:	28a1c83a 	sub	r16,r5,r2
   121a8:	04002e0e 	bge	zero,r16,12264 <___vfprintf_internal_r+0xae4>
   121ac:	04400404 	movi	r17,16
   121b0:	d8801f17 	ldw	r2,124(sp)
   121b4:	8c04c40e 	bge	r17,r16,134c8 <___vfprintf_internal_r+0x1d48>
   121b8:	014000f4 	movhi	r5,3
   121bc:	296a6484 	addi	r5,r5,-22126
   121c0:	d9403515 	stw	r5,212(sp)
   121c4:	048001c4 	movi	r18,7
   121c8:	dcc02d17 	ldw	r19,180(sp)
   121cc:	00000306 	br	121dc <___vfprintf_internal_r+0xa5c>
   121d0:	843ffc04 	addi	r16,r16,-16
   121d4:	42000204 	addi	r8,r8,8
   121d8:	8c00130e 	bge	r17,r16,12228 <___vfprintf_internal_r+0xaa8>
   121dc:	010000f4 	movhi	r4,3
   121e0:	18c00404 	addi	r3,r3,16
   121e4:	10800044 	addi	r2,r2,1
   121e8:	212a6484 	addi	r4,r4,-22126
   121ec:	41000015 	stw	r4,0(r8)
   121f0:	44400115 	stw	r17,4(r8)
   121f4:	d8c02015 	stw	r3,128(sp)
   121f8:	d8801f15 	stw	r2,124(sp)
   121fc:	90bff40e 	bge	r18,r2,121d0 <__alt_data_end+0xfc0121d0>
   12200:	d9801e04 	addi	r6,sp,120
   12204:	b80b883a 	mov	r5,r23
   12208:	9809883a 	mov	r4,r19
   1220c:	0019a8c0 	call	19a8c <__sprint_r>
   12210:	103e5f1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12214:	843ffc04 	addi	r16,r16,-16
   12218:	d8c02017 	ldw	r3,128(sp)
   1221c:	d8801f17 	ldw	r2,124(sp)
   12220:	da000404 	addi	r8,sp,16
   12224:	8c3fed16 	blt	r17,r16,121dc <__alt_data_end+0xfc0121dc>
   12228:	d9403517 	ldw	r5,212(sp)
   1222c:	1c07883a 	add	r3,r3,r16
   12230:	10800044 	addi	r2,r2,1
   12234:	41400015 	stw	r5,0(r8)
   12238:	44000115 	stw	r16,4(r8)
   1223c:	d8c02015 	stw	r3,128(sp)
   12240:	d8801f15 	stw	r2,124(sp)
   12244:	010001c4 	movi	r4,7
   12248:	2080060e 	bge	r4,r2,12264 <___vfprintf_internal_r+0xae4>
   1224c:	d9002d17 	ldw	r4,180(sp)
   12250:	d9801e04 	addi	r6,sp,120
   12254:	b80b883a 	mov	r5,r23
   12258:	0019a8c0 	call	19a8c <__sprint_r>
   1225c:	103e4c1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12260:	d8c02017 	ldw	r3,128(sp)
   12264:	d8803117 	ldw	r2,196(sp)
   12268:	d9002917 	ldw	r4,164(sp)
   1226c:	1100010e 	bge	r2,r4,12274 <___vfprintf_internal_r+0xaf4>
   12270:	2005883a 	mov	r2,r4
   12274:	d9402f17 	ldw	r5,188(sp)
   12278:	288b883a 	add	r5,r5,r2
   1227c:	d9402f15 	stw	r5,188(sp)
   12280:	1801c01e 	bne	r3,zero,12984 <___vfprintf_internal_r+0x1204>
   12284:	a8800007 	ldb	r2,0(r21)
   12288:	d8001f15 	stw	zero,124(sp)
   1228c:	da000404 	addi	r8,sp,16
   12290:	103d751e 	bne	r2,zero,11868 <__alt_data_end+0xfc011868>
   12294:	a823883a 	mov	r17,r21
   12298:	003d8b06 	br	118c8 <__alt_data_end+0xfc0118c8>
   1229c:	8025883a 	mov	r18,r16
   122a0:	dc002903 	ldbu	r16,164(sp)
   122a4:	e011883a 	mov	r8,fp
   122a8:	84003fcc 	andi	r16,r16,255
   122ac:	8005e51e 	bne	r16,zero,13a44 <___vfprintf_internal_r+0x22c4>
   122b0:	94800414 	ori	r18,r18,16
   122b4:	9080080c 	andi	r2,r18,32
   122b8:	10022b26 	beq	r2,zero,12b68 <___vfprintf_internal_r+0x13e8>
   122bc:	d9002e17 	ldw	r4,184(sp)
   122c0:	d9402a17 	ldw	r5,168(sp)
   122c4:	d8002785 	stb	zero,158(sp)
   122c8:	20c00204 	addi	r3,r4,8
   122cc:	24c00017 	ldw	r19,0(r4)
   122d0:	25800117 	ldw	r22,4(r4)
   122d4:	28042e16 	blt	r5,zero,13390 <___vfprintf_internal_r+0x1c10>
   122d8:	013fdfc4 	movi	r4,-129
   122dc:	9d84b03a 	or	r2,r19,r22
   122e0:	d8c02e15 	stw	r3,184(sp)
   122e4:	9124703a 	and	r18,r18,r4
   122e8:	0039883a 	mov	fp,zero
   122ec:	103e801e 	bne	r2,zero,11cf0 <__alt_data_end+0xfc011cf0>
   122f0:	d9002a17 	ldw	r4,168(sp)
   122f4:	2002e01e 	bne	r4,zero,12e78 <___vfprintf_internal_r+0x16f8>
   122f8:	d8002a15 	stw	zero,168(sp)
   122fc:	d8002b15 	stw	zero,172(sp)
   12300:	dc001e04 	addi	r16,sp,120
   12304:	003ef506 	br	11edc <__alt_data_end+0xfc011edc>
   12308:	8025883a 	mov	r18,r16
   1230c:	dc002903 	ldbu	r16,164(sp)
   12310:	e011883a 	mov	r8,fp
   12314:	84003fcc 	andi	r16,r16,255
   12318:	8005ba1e 	bne	r16,zero,13a04 <___vfprintf_internal_r+0x2284>
   1231c:	010000f4 	movhi	r4,3
   12320:	212a4c04 	addi	r4,r4,-22224
   12324:	d9003915 	stw	r4,228(sp)
   12328:	9080080c 	andi	r2,r18,32
   1232c:	10006126 	beq	r2,zero,124b4 <___vfprintf_internal_r+0xd34>
   12330:	d9402e17 	ldw	r5,184(sp)
   12334:	2cc00017 	ldw	r19,0(r5)
   12338:	2d800117 	ldw	r22,4(r5)
   1233c:	29400204 	addi	r5,r5,8
   12340:	d9402e15 	stw	r5,184(sp)
   12344:	9080004c 	andi	r2,r18,1
   12348:	1001ac26 	beq	r2,zero,129fc <___vfprintf_internal_r+0x127c>
   1234c:	9d84b03a 	or	r2,r19,r22
   12350:	10038526 	beq	r2,zero,13168 <___vfprintf_internal_r+0x19e8>
   12354:	d8c02a17 	ldw	r3,168(sp)
   12358:	00800c04 	movi	r2,48
   1235c:	d8802705 	stb	r2,156(sp)
   12360:	dc402745 	stb	r17,157(sp)
   12364:	d8002785 	stb	zero,158(sp)
   12368:	90800094 	ori	r2,r18,2
   1236c:	18047916 	blt	r3,zero,13554 <___vfprintf_internal_r+0x1dd4>
   12370:	00bfdfc4 	movi	r2,-129
   12374:	90a4703a 	and	r18,r18,r2
   12378:	94800094 	ori	r18,r18,2
   1237c:	0039883a 	mov	fp,zero
   12380:	d9003917 	ldw	r4,228(sp)
   12384:	dc001e04 	addi	r16,sp,120
   12388:	988003cc 	andi	r2,r19,15
   1238c:	b006973a 	slli	r3,r22,28
   12390:	2085883a 	add	r2,r4,r2
   12394:	9826d13a 	srli	r19,r19,4
   12398:	10800003 	ldbu	r2,0(r2)
   1239c:	b02cd13a 	srli	r22,r22,4
   123a0:	843fffc4 	addi	r16,r16,-1
   123a4:	1ce6b03a 	or	r19,r3,r19
   123a8:	80800005 	stb	r2,0(r16)
   123ac:	9d84b03a 	or	r2,r19,r22
   123b0:	103ff51e 	bne	r2,zero,12388 <__alt_data_end+0xfc012388>
   123b4:	d8c02817 	ldw	r3,160(sp)
   123b8:	1c07c83a 	sub	r3,r3,r16
   123bc:	d8c02b15 	stw	r3,172(sp)
   123c0:	003ec606 	br	11edc <__alt_data_end+0xfc011edc>
   123c4:	8025883a 	mov	r18,r16
   123c8:	dc002903 	ldbu	r16,164(sp)
   123cc:	e011883a 	mov	r8,fp
   123d0:	84003fcc 	andi	r16,r16,255
   123d4:	803e9626 	beq	r16,zero,11e30 <__alt_data_end+0xfc011e30>
   123d8:	d8c02b03 	ldbu	r3,172(sp)
   123dc:	d8c02785 	stb	r3,158(sp)
   123e0:	003e9306 	br	11e30 <__alt_data_end+0xfc011e30>
   123e4:	00c00044 	movi	r3,1
   123e8:	d8c02905 	stb	r3,164(sp)
   123ec:	00c00ac4 	movi	r3,43
   123f0:	d8c02b05 	stb	r3,172(sp)
   123f4:	ac400007 	ldb	r17,0(r21)
   123f8:	003d4306 	br	11908 <__alt_data_end+0xfc011908>
   123fc:	84000814 	ori	r16,r16,32
   12400:	ac400007 	ldb	r17,0(r21)
   12404:	003d4006 	br	11908 <__alt_data_end+0xfc011908>
   12408:	d8802e17 	ldw	r2,184(sp)
   1240c:	8025883a 	mov	r18,r16
   12410:	d8002785 	stb	zero,158(sp)
   12414:	14000017 	ldw	r16,0(r2)
   12418:	e011883a 	mov	r8,fp
   1241c:	14c00104 	addi	r19,r2,4
   12420:	80042d26 	beq	r16,zero,134d8 <___vfprintf_internal_r+0x1d58>
   12424:	d8c02a17 	ldw	r3,168(sp)
   12428:	1803e416 	blt	r3,zero,133bc <___vfprintf_internal_r+0x1c3c>
   1242c:	180d883a 	mov	r6,r3
   12430:	000b883a 	mov	r5,zero
   12434:	8009883a 	mov	r4,r16
   12438:	df003d15 	stw	fp,244(sp)
   1243c:	00168ac0 	call	168ac <memchr>
   12440:	da003d17 	ldw	r8,244(sp)
   12444:	10046826 	beq	r2,zero,135e8 <___vfprintf_internal_r+0x1e68>
   12448:	1405c83a 	sub	r2,r2,r16
   1244c:	d8802b15 	stw	r2,172(sp)
   12450:	1003e016 	blt	r2,zero,133d4 <___vfprintf_internal_r+0x1c54>
   12454:	df002783 	ldbu	fp,158(sp)
   12458:	d8802915 	stw	r2,164(sp)
   1245c:	dcc02e15 	stw	r19,184(sp)
   12460:	d8002a15 	stw	zero,168(sp)
   12464:	d8003215 	stw	zero,200(sp)
   12468:	003ea206 	br	11ef4 <__alt_data_end+0xfc011ef4>
   1246c:	8025883a 	mov	r18,r16
   12470:	dc002903 	ldbu	r16,164(sp)
   12474:	e011883a 	mov	r8,fp
   12478:	84003fcc 	andi	r16,r16,255
   1247c:	803f8d26 	beq	r16,zero,122b4 <__alt_data_end+0xfc0122b4>
   12480:	d8c02b03 	ldbu	r3,172(sp)
   12484:	d8c02785 	stb	r3,158(sp)
   12488:	003f8a06 	br	122b4 <__alt_data_end+0xfc0122b4>
   1248c:	8025883a 	mov	r18,r16
   12490:	dc002903 	ldbu	r16,164(sp)
   12494:	e011883a 	mov	r8,fp
   12498:	84003fcc 	andi	r16,r16,255
   1249c:	8005661e 	bne	r16,zero,13a38 <___vfprintf_internal_r+0x22b8>
   124a0:	010000f4 	movhi	r4,3
   124a4:	212a5104 	addi	r4,r4,-22204
   124a8:	d9003915 	stw	r4,228(sp)
   124ac:	9080080c 	andi	r2,r18,32
   124b0:	103f9f1e 	bne	r2,zero,12330 <__alt_data_end+0xfc012330>
   124b4:	9080040c 	andi	r2,r18,16
   124b8:	1002eb26 	beq	r2,zero,13068 <___vfprintf_internal_r+0x18e8>
   124bc:	d8802e17 	ldw	r2,184(sp)
   124c0:	002d883a 	mov	r22,zero
   124c4:	14c00017 	ldw	r19,0(r2)
   124c8:	10800104 	addi	r2,r2,4
   124cc:	d8802e15 	stw	r2,184(sp)
   124d0:	003f9c06 	br	12344 <__alt_data_end+0xfc012344>
   124d4:	d8802b07 	ldb	r2,172(sp)
   124d8:	1002e11e 	bne	r2,zero,13060 <___vfprintf_internal_r+0x18e0>
   124dc:	00c00044 	movi	r3,1
   124e0:	d8c02905 	stb	r3,164(sp)
   124e4:	00c00804 	movi	r3,32
   124e8:	d8c02b05 	stb	r3,172(sp)
   124ec:	ac400007 	ldb	r17,0(r21)
   124f0:	003d0506 	br	11908 <__alt_data_end+0xfc011908>
   124f4:	84000054 	ori	r16,r16,1
   124f8:	ac400007 	ldb	r17,0(r21)
   124fc:	003d0206 	br	11908 <__alt_data_end+0xfc011908>
   12500:	8025883a 	mov	r18,r16
   12504:	dc002903 	ldbu	r16,164(sp)
   12508:	e011883a 	mov	r8,fp
   1250c:	84003fcc 	andi	r16,r16,255
   12510:	803de726 	beq	r16,zero,11cb0 <__alt_data_end+0xfc011cb0>
   12514:	d8c02b03 	ldbu	r3,172(sp)
   12518:	d8c02785 	stb	r3,158(sp)
   1251c:	003de406 	br	11cb0 <__alt_data_end+0xfc011cb0>
   12520:	84001014 	ori	r16,r16,64
   12524:	ac400007 	ldb	r17,0(r21)
   12528:	003cf706 	br	11908 <__alt_data_end+0xfc011908>
   1252c:	ac400007 	ldb	r17,0(r21)
   12530:	00801b04 	movi	r2,108
   12534:	88838f26 	beq	r17,r2,13374 <___vfprintf_internal_r+0x1bf4>
   12538:	84000414 	ori	r16,r16,16
   1253c:	003cf206 	br	11908 <__alt_data_end+0xfc011908>
   12540:	8025883a 	mov	r18,r16
   12544:	dc002903 	ldbu	r16,164(sp)
   12548:	e011883a 	mov	r8,fp
   1254c:	84003fcc 	andi	r16,r16,255
   12550:	80053f1e 	bne	r16,zero,13a50 <___vfprintf_internal_r+0x22d0>
   12554:	9080080c 	andi	r2,r18,32
   12558:	1002d226 	beq	r2,zero,130a4 <___vfprintf_internal_r+0x1924>
   1255c:	d9002e17 	ldw	r4,184(sp)
   12560:	d9402f17 	ldw	r5,188(sp)
   12564:	20800017 	ldw	r2,0(r4)
   12568:	2807d7fa 	srai	r3,r5,31
   1256c:	21000104 	addi	r4,r4,4
   12570:	d9002e15 	stw	r4,184(sp)
   12574:	11400015 	stw	r5,0(r2)
   12578:	10c00115 	stw	r3,4(r2)
   1257c:	003cb806 	br	11860 <__alt_data_end+0xfc011860>
   12580:	d8c02e17 	ldw	r3,184(sp)
   12584:	d9002e17 	ldw	r4,184(sp)
   12588:	8025883a 	mov	r18,r16
   1258c:	18800017 	ldw	r2,0(r3)
   12590:	21000104 	addi	r4,r4,4
   12594:	00c00044 	movi	r3,1
   12598:	e011883a 	mov	r8,fp
   1259c:	d8c02915 	stw	r3,164(sp)
   125a0:	d8002785 	stb	zero,158(sp)
   125a4:	d8801405 	stb	r2,80(sp)
   125a8:	d9002e15 	stw	r4,184(sp)
   125ac:	d8c02b15 	stw	r3,172(sp)
   125b0:	d8002a15 	stw	zero,168(sp)
   125b4:	d8003215 	stw	zero,200(sp)
   125b8:	dc001404 	addi	r16,sp,80
   125bc:	0039883a 	mov	fp,zero
   125c0:	003e5306 	br	11f10 <__alt_data_end+0xfc011f10>
   125c4:	010000f4 	movhi	r4,3
   125c8:	212a5104 	addi	r4,r4,-22204
   125cc:	0039883a 	mov	fp,zero
   125d0:	d9003915 	stw	r4,228(sp)
   125d4:	04401e04 	movi	r17,120
   125d8:	003f6906 	br	12380 <__alt_data_end+0xfc012380>
   125dc:	8025883a 	mov	r18,r16
   125e0:	dc002903 	ldbu	r16,164(sp)
   125e4:	e011883a 	mov	r8,fp
   125e8:	84003fcc 	andi	r16,r16,255
   125ec:	8005081e 	bne	r16,zero,13a10 <___vfprintf_internal_r+0x2290>
   125f0:	883d6126 	beq	r17,zero,11b78 <__alt_data_end+0xfc011b78>
   125f4:	00c00044 	movi	r3,1
   125f8:	d8c02915 	stw	r3,164(sp)
   125fc:	dc401405 	stb	r17,80(sp)
   12600:	d8002785 	stb	zero,158(sp)
   12604:	003fe906 	br	125ac <__alt_data_end+0xfc0125ac>
   12608:	014000f4 	movhi	r5,3
   1260c:	296a5104 	addi	r5,r5,-22204
   12610:	d9403915 	stw	r5,228(sp)
   12614:	d8c02e15 	stw	r3,184(sp)
   12618:	1025883a 	mov	r18,r2
   1261c:	04401e04 	movi	r17,120
   12620:	9d84b03a 	or	r2,r19,r22
   12624:	1000fc1e 	bne	r2,zero,12a18 <___vfprintf_internal_r+0x1298>
   12628:	0039883a 	mov	fp,zero
   1262c:	00800084 	movi	r2,2
   12630:	10803fcc 	andi	r2,r2,255
   12634:	00c00044 	movi	r3,1
   12638:	10c20f26 	beq	r2,r3,12e78 <___vfprintf_internal_r+0x16f8>
   1263c:	00c00084 	movi	r3,2
   12640:	10fd3326 	beq	r2,r3,11b10 <__alt_data_end+0xfc011b10>
   12644:	003e0b06 	br	11e74 <__alt_data_end+0xfc011e74>
   12648:	d8c02017 	ldw	r3,128(sp)
   1264c:	003e7106 	br	12014 <__alt_data_end+0xfc012014>
   12650:	00801944 	movi	r2,101
   12654:	14407e0e 	bge	r2,r17,12850 <___vfprintf_internal_r+0x10d0>
   12658:	d9003617 	ldw	r4,216(sp)
   1265c:	d9403817 	ldw	r5,224(sp)
   12660:	000d883a 	mov	r6,zero
   12664:	000f883a 	mov	r7,zero
   12668:	d8c03c15 	stw	r3,240(sp)
   1266c:	da003d15 	stw	r8,244(sp)
   12670:	001d8100 	call	1d810 <__eqdf2>
   12674:	d8c03c17 	ldw	r3,240(sp)
   12678:	da003d17 	ldw	r8,244(sp)
   1267c:	1000f71e 	bne	r2,zero,12a5c <___vfprintf_internal_r+0x12dc>
   12680:	d8801f17 	ldw	r2,124(sp)
   12684:	010000f4 	movhi	r4,3
   12688:	212a5804 	addi	r4,r4,-22176
   1268c:	18c00044 	addi	r3,r3,1
   12690:	10800044 	addi	r2,r2,1
   12694:	41000015 	stw	r4,0(r8)
   12698:	01000044 	movi	r4,1
   1269c:	41000115 	stw	r4,4(r8)
   126a0:	d8c02015 	stw	r3,128(sp)
   126a4:	d8801f15 	stw	r2,124(sp)
   126a8:	010001c4 	movi	r4,7
   126ac:	2082b816 	blt	r4,r2,13190 <___vfprintf_internal_r+0x1a10>
   126b0:	42000204 	addi	r8,r8,8
   126b4:	d8802617 	ldw	r2,152(sp)
   126b8:	d9403317 	ldw	r5,204(sp)
   126bc:	11400216 	blt	r2,r5,126c8 <___vfprintf_internal_r+0xf48>
   126c0:	9080004c 	andi	r2,r18,1
   126c4:	103eb326 	beq	r2,zero,12194 <__alt_data_end+0xfc012194>
   126c8:	d8803717 	ldw	r2,220(sp)
   126cc:	d9003417 	ldw	r4,208(sp)
   126d0:	d9403717 	ldw	r5,220(sp)
   126d4:	1887883a 	add	r3,r3,r2
   126d8:	d8801f17 	ldw	r2,124(sp)
   126dc:	41000015 	stw	r4,0(r8)
   126e0:	41400115 	stw	r5,4(r8)
   126e4:	10800044 	addi	r2,r2,1
   126e8:	d8c02015 	stw	r3,128(sp)
   126ec:	d8801f15 	stw	r2,124(sp)
   126f0:	010001c4 	movi	r4,7
   126f4:	20832916 	blt	r4,r2,1339c <___vfprintf_internal_r+0x1c1c>
   126f8:	42000204 	addi	r8,r8,8
   126fc:	d8803317 	ldw	r2,204(sp)
   12700:	143fffc4 	addi	r16,r2,-1
   12704:	043ea30e 	bge	zero,r16,12194 <__alt_data_end+0xfc012194>
   12708:	04400404 	movi	r17,16
   1270c:	d8801f17 	ldw	r2,124(sp)
   12710:	8c00880e 	bge	r17,r16,12934 <___vfprintf_internal_r+0x11b4>
   12714:	014000f4 	movhi	r5,3
   12718:	296a6084 	addi	r5,r5,-22142
   1271c:	d9402c15 	stw	r5,176(sp)
   12720:	058001c4 	movi	r22,7
   12724:	dcc02d17 	ldw	r19,180(sp)
   12728:	00000306 	br	12738 <___vfprintf_internal_r+0xfb8>
   1272c:	42000204 	addi	r8,r8,8
   12730:	843ffc04 	addi	r16,r16,-16
   12734:	8c00820e 	bge	r17,r16,12940 <___vfprintf_internal_r+0x11c0>
   12738:	18c00404 	addi	r3,r3,16
   1273c:	10800044 	addi	r2,r2,1
   12740:	45000015 	stw	r20,0(r8)
   12744:	44400115 	stw	r17,4(r8)
   12748:	d8c02015 	stw	r3,128(sp)
   1274c:	d8801f15 	stw	r2,124(sp)
   12750:	b0bff60e 	bge	r22,r2,1272c <__alt_data_end+0xfc01272c>
   12754:	d9801e04 	addi	r6,sp,120
   12758:	b80b883a 	mov	r5,r23
   1275c:	9809883a 	mov	r4,r19
   12760:	0019a8c0 	call	19a8c <__sprint_r>
   12764:	103d0a1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12768:	d8c02017 	ldw	r3,128(sp)
   1276c:	d8801f17 	ldw	r2,124(sp)
   12770:	da000404 	addi	r8,sp,16
   12774:	003fee06 	br	12730 <__alt_data_end+0xfc012730>
   12778:	d9403117 	ldw	r5,196(sp)
   1277c:	d8802917 	ldw	r2,164(sp)
   12780:	28adc83a 	sub	r22,r5,r2
   12784:	05be410e 	bge	zero,r22,1208c <__alt_data_end+0xfc01208c>
   12788:	07000404 	movi	fp,16
   1278c:	d8801f17 	ldw	r2,124(sp)
   12790:	e5838f0e 	bge	fp,r22,135d0 <___vfprintf_internal_r+0x1e50>
   12794:	014000f4 	movhi	r5,3
   12798:	296a6084 	addi	r5,r5,-22142
   1279c:	dc403015 	stw	r17,192(sp)
   127a0:	d9402c15 	stw	r5,176(sp)
   127a4:	b023883a 	mov	r17,r22
   127a8:	04c001c4 	movi	r19,7
   127ac:	a82d883a 	mov	r22,r21
   127b0:	902b883a 	mov	r21,r18
   127b4:	8025883a 	mov	r18,r16
   127b8:	dc002d17 	ldw	r16,180(sp)
   127bc:	00000306 	br	127cc <___vfprintf_internal_r+0x104c>
   127c0:	8c7ffc04 	addi	r17,r17,-16
   127c4:	42000204 	addi	r8,r8,8
   127c8:	e440110e 	bge	fp,r17,12810 <___vfprintf_internal_r+0x1090>
   127cc:	18c00404 	addi	r3,r3,16
   127d0:	10800044 	addi	r2,r2,1
   127d4:	45000015 	stw	r20,0(r8)
   127d8:	47000115 	stw	fp,4(r8)
   127dc:	d8c02015 	stw	r3,128(sp)
   127e0:	d8801f15 	stw	r2,124(sp)
   127e4:	98bff60e 	bge	r19,r2,127c0 <__alt_data_end+0xfc0127c0>
   127e8:	d9801e04 	addi	r6,sp,120
   127ec:	b80b883a 	mov	r5,r23
   127f0:	8009883a 	mov	r4,r16
   127f4:	0019a8c0 	call	19a8c <__sprint_r>
   127f8:	103ce51e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   127fc:	8c7ffc04 	addi	r17,r17,-16
   12800:	d8c02017 	ldw	r3,128(sp)
   12804:	d8801f17 	ldw	r2,124(sp)
   12808:	da000404 	addi	r8,sp,16
   1280c:	e47fef16 	blt	fp,r17,127cc <__alt_data_end+0xfc0127cc>
   12810:	9021883a 	mov	r16,r18
   12814:	a825883a 	mov	r18,r21
   12818:	b02b883a 	mov	r21,r22
   1281c:	882d883a 	mov	r22,r17
   12820:	dc403017 	ldw	r17,192(sp)
   12824:	d9002c17 	ldw	r4,176(sp)
   12828:	1d87883a 	add	r3,r3,r22
   1282c:	10800044 	addi	r2,r2,1
   12830:	41000015 	stw	r4,0(r8)
   12834:	45800115 	stw	r22,4(r8)
   12838:	d8c02015 	stw	r3,128(sp)
   1283c:	d8801f15 	stw	r2,124(sp)
   12840:	010001c4 	movi	r4,7
   12844:	20818e16 	blt	r4,r2,12e80 <___vfprintf_internal_r+0x1700>
   12848:	42000204 	addi	r8,r8,8
   1284c:	003e0f06 	br	1208c <__alt_data_end+0xfc01208c>
   12850:	d9403317 	ldw	r5,204(sp)
   12854:	00800044 	movi	r2,1
   12858:	18c00044 	addi	r3,r3,1
   1285c:	1141530e 	bge	r2,r5,12dac <___vfprintf_internal_r+0x162c>
   12860:	dc401f17 	ldw	r17,124(sp)
   12864:	00800044 	movi	r2,1
   12868:	40800115 	stw	r2,4(r8)
   1286c:	8c400044 	addi	r17,r17,1
   12870:	44000015 	stw	r16,0(r8)
   12874:	d8c02015 	stw	r3,128(sp)
   12878:	dc401f15 	stw	r17,124(sp)
   1287c:	008001c4 	movi	r2,7
   12880:	14416b16 	blt	r2,r17,12e30 <___vfprintf_internal_r+0x16b0>
   12884:	42000204 	addi	r8,r8,8
   12888:	d8803717 	ldw	r2,220(sp)
   1288c:	d9003417 	ldw	r4,208(sp)
   12890:	8c400044 	addi	r17,r17,1
   12894:	10c7883a 	add	r3,r2,r3
   12898:	40800115 	stw	r2,4(r8)
   1289c:	41000015 	stw	r4,0(r8)
   128a0:	d8c02015 	stw	r3,128(sp)
   128a4:	dc401f15 	stw	r17,124(sp)
   128a8:	008001c4 	movi	r2,7
   128ac:	14416916 	blt	r2,r17,12e54 <___vfprintf_internal_r+0x16d4>
   128b0:	45800204 	addi	r22,r8,8
   128b4:	d9003617 	ldw	r4,216(sp)
   128b8:	d9403817 	ldw	r5,224(sp)
   128bc:	000d883a 	mov	r6,zero
   128c0:	000f883a 	mov	r7,zero
   128c4:	d8c03c15 	stw	r3,240(sp)
   128c8:	001d8100 	call	1d810 <__eqdf2>
   128cc:	d8c03c17 	ldw	r3,240(sp)
   128d0:	1000bc26 	beq	r2,zero,12bc4 <___vfprintf_internal_r+0x1444>
   128d4:	d9403317 	ldw	r5,204(sp)
   128d8:	84000044 	addi	r16,r16,1
   128dc:	8c400044 	addi	r17,r17,1
   128e0:	28bfffc4 	addi	r2,r5,-1
   128e4:	1887883a 	add	r3,r3,r2
   128e8:	b0800115 	stw	r2,4(r22)
   128ec:	b4000015 	stw	r16,0(r22)
   128f0:	d8c02015 	stw	r3,128(sp)
   128f4:	dc401f15 	stw	r17,124(sp)
   128f8:	008001c4 	movi	r2,7
   128fc:	14414316 	blt	r2,r17,12e0c <___vfprintf_internal_r+0x168c>
   12900:	b5800204 	addi	r22,r22,8
   12904:	d9003a17 	ldw	r4,232(sp)
   12908:	df0022c4 	addi	fp,sp,139
   1290c:	8c400044 	addi	r17,r17,1
   12910:	20c7883a 	add	r3,r4,r3
   12914:	b7000015 	stw	fp,0(r22)
   12918:	b1000115 	stw	r4,4(r22)
   1291c:	d8c02015 	stw	r3,128(sp)
   12920:	dc401f15 	stw	r17,124(sp)
   12924:	008001c4 	movi	r2,7
   12928:	14400e16 	blt	r2,r17,12964 <___vfprintf_internal_r+0x11e4>
   1292c:	b2000204 	addi	r8,r22,8
   12930:	003e1806 	br	12194 <__alt_data_end+0xfc012194>
   12934:	010000f4 	movhi	r4,3
   12938:	212a6084 	addi	r4,r4,-22142
   1293c:	d9002c15 	stw	r4,176(sp)
   12940:	d9002c17 	ldw	r4,176(sp)
   12944:	1c07883a 	add	r3,r3,r16
   12948:	44000115 	stw	r16,4(r8)
   1294c:	41000015 	stw	r4,0(r8)
   12950:	10800044 	addi	r2,r2,1
   12954:	d8c02015 	stw	r3,128(sp)
   12958:	d8801f15 	stw	r2,124(sp)
   1295c:	010001c4 	movi	r4,7
   12960:	20be0b0e 	bge	r4,r2,12190 <__alt_data_end+0xfc012190>
   12964:	d9002d17 	ldw	r4,180(sp)
   12968:	d9801e04 	addi	r6,sp,120
   1296c:	b80b883a 	mov	r5,r23
   12970:	0019a8c0 	call	19a8c <__sprint_r>
   12974:	103c861e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12978:	d8c02017 	ldw	r3,128(sp)
   1297c:	da000404 	addi	r8,sp,16
   12980:	003e0406 	br	12194 <__alt_data_end+0xfc012194>
   12984:	d9002d17 	ldw	r4,180(sp)
   12988:	d9801e04 	addi	r6,sp,120
   1298c:	b80b883a 	mov	r5,r23
   12990:	0019a8c0 	call	19a8c <__sprint_r>
   12994:	103e3b26 	beq	r2,zero,12284 <__alt_data_end+0xfc012284>
   12998:	003c7d06 	br	11b90 <__alt_data_end+0xfc011b90>
   1299c:	d9002d17 	ldw	r4,180(sp)
   129a0:	d9801e04 	addi	r6,sp,120
   129a4:	b80b883a 	mov	r5,r23
   129a8:	0019a8c0 	call	19a8c <__sprint_r>
   129ac:	103c781e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   129b0:	d8c02017 	ldw	r3,128(sp)
   129b4:	da000404 	addi	r8,sp,16
   129b8:	003de906 	br	12160 <__alt_data_end+0xfc012160>
   129bc:	d9002d17 	ldw	r4,180(sp)
   129c0:	d9801e04 	addi	r6,sp,120
   129c4:	b80b883a 	mov	r5,r23
   129c8:	0019a8c0 	call	19a8c <__sprint_r>
   129cc:	103c701e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   129d0:	d8c02017 	ldw	r3,128(sp)
   129d4:	da000404 	addi	r8,sp,16
   129d8:	003d9b06 	br	12048 <__alt_data_end+0xfc012048>
   129dc:	d9002d17 	ldw	r4,180(sp)
   129e0:	d9801e04 	addi	r6,sp,120
   129e4:	b80b883a 	mov	r5,r23
   129e8:	0019a8c0 	call	19a8c <__sprint_r>
   129ec:	103c681e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   129f0:	d8c02017 	ldw	r3,128(sp)
   129f4:	da000404 	addi	r8,sp,16
   129f8:	003da106 	br	12080 <__alt_data_end+0xfc012080>
   129fc:	d9402a17 	ldw	r5,168(sp)
   12a00:	d8002785 	stb	zero,158(sp)
   12a04:	283f0616 	blt	r5,zero,12620 <__alt_data_end+0xfc012620>
   12a08:	00ffdfc4 	movi	r3,-129
   12a0c:	9d84b03a 	or	r2,r19,r22
   12a10:	90e4703a 	and	r18,r18,r3
   12a14:	103c3b26 	beq	r2,zero,11b04 <__alt_data_end+0xfc011b04>
   12a18:	0039883a 	mov	fp,zero
   12a1c:	003e5806 	br	12380 <__alt_data_end+0xfc012380>
   12a20:	9080040c 	andi	r2,r18,16
   12a24:	1001b326 	beq	r2,zero,130f4 <___vfprintf_internal_r+0x1974>
   12a28:	d8c02e17 	ldw	r3,184(sp)
   12a2c:	d9002a17 	ldw	r4,168(sp)
   12a30:	d8002785 	stb	zero,158(sp)
   12a34:	18800104 	addi	r2,r3,4
   12a38:	1cc00017 	ldw	r19,0(r3)
   12a3c:	002d883a 	mov	r22,zero
   12a40:	2001b516 	blt	r4,zero,13118 <___vfprintf_internal_r+0x1998>
   12a44:	00ffdfc4 	movi	r3,-129
   12a48:	d8802e15 	stw	r2,184(sp)
   12a4c:	90e4703a 	and	r18,r18,r3
   12a50:	983d0526 	beq	r19,zero,11e68 <__alt_data_end+0xfc011e68>
   12a54:	0039883a 	mov	fp,zero
   12a58:	003d0806 	br	11e7c <__alt_data_end+0xfc011e7c>
   12a5c:	dc402617 	ldw	r17,152(sp)
   12a60:	0441d30e 	bge	zero,r17,131b0 <___vfprintf_internal_r+0x1a30>
   12a64:	dc403217 	ldw	r17,200(sp)
   12a68:	d8803317 	ldw	r2,204(sp)
   12a6c:	1440010e 	bge	r2,r17,12a74 <___vfprintf_internal_r+0x12f4>
   12a70:	1023883a 	mov	r17,r2
   12a74:	04400a0e 	bge	zero,r17,12aa0 <___vfprintf_internal_r+0x1320>
   12a78:	d8801f17 	ldw	r2,124(sp)
   12a7c:	1c47883a 	add	r3,r3,r17
   12a80:	44000015 	stw	r16,0(r8)
   12a84:	10800044 	addi	r2,r2,1
   12a88:	44400115 	stw	r17,4(r8)
   12a8c:	d8c02015 	stw	r3,128(sp)
   12a90:	d8801f15 	stw	r2,124(sp)
   12a94:	010001c4 	movi	r4,7
   12a98:	20826516 	blt	r4,r2,13430 <___vfprintf_internal_r+0x1cb0>
   12a9c:	42000204 	addi	r8,r8,8
   12aa0:	88026116 	blt	r17,zero,13428 <___vfprintf_internal_r+0x1ca8>
   12aa4:	d9003217 	ldw	r4,200(sp)
   12aa8:	2463c83a 	sub	r17,r4,r17
   12aac:	04407b0e 	bge	zero,r17,12c9c <___vfprintf_internal_r+0x151c>
   12ab0:	05800404 	movi	r22,16
   12ab4:	d8801f17 	ldw	r2,124(sp)
   12ab8:	b4419d0e 	bge	r22,r17,13130 <___vfprintf_internal_r+0x19b0>
   12abc:	010000f4 	movhi	r4,3
   12ac0:	212a6084 	addi	r4,r4,-22142
   12ac4:	d9002c15 	stw	r4,176(sp)
   12ac8:	070001c4 	movi	fp,7
   12acc:	dcc02d17 	ldw	r19,180(sp)
   12ad0:	00000306 	br	12ae0 <___vfprintf_internal_r+0x1360>
   12ad4:	42000204 	addi	r8,r8,8
   12ad8:	8c7ffc04 	addi	r17,r17,-16
   12adc:	b441970e 	bge	r22,r17,1313c <___vfprintf_internal_r+0x19bc>
   12ae0:	18c00404 	addi	r3,r3,16
   12ae4:	10800044 	addi	r2,r2,1
   12ae8:	45000015 	stw	r20,0(r8)
   12aec:	45800115 	stw	r22,4(r8)
   12af0:	d8c02015 	stw	r3,128(sp)
   12af4:	d8801f15 	stw	r2,124(sp)
   12af8:	e0bff60e 	bge	fp,r2,12ad4 <__alt_data_end+0xfc012ad4>
   12afc:	d9801e04 	addi	r6,sp,120
   12b00:	b80b883a 	mov	r5,r23
   12b04:	9809883a 	mov	r4,r19
   12b08:	0019a8c0 	call	19a8c <__sprint_r>
   12b0c:	103c201e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12b10:	d8c02017 	ldw	r3,128(sp)
   12b14:	d8801f17 	ldw	r2,124(sp)
   12b18:	da000404 	addi	r8,sp,16
   12b1c:	003fee06 	br	12ad8 <__alt_data_end+0xfc012ad8>
   12b20:	d9002d17 	ldw	r4,180(sp)
   12b24:	d9801e04 	addi	r6,sp,120
   12b28:	b80b883a 	mov	r5,r23
   12b2c:	0019a8c0 	call	19a8c <__sprint_r>
   12b30:	103c171e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12b34:	d8c02017 	ldw	r3,128(sp)
   12b38:	df002787 	ldb	fp,158(sp)
   12b3c:	da000404 	addi	r8,sp,16
   12b40:	003d3406 	br	12014 <__alt_data_end+0xfc012014>
   12b44:	9080040c 	andi	r2,r18,16
   12b48:	10016126 	beq	r2,zero,130d0 <___vfprintf_internal_r+0x1950>
   12b4c:	d9402e17 	ldw	r5,184(sp)
   12b50:	2cc00017 	ldw	r19,0(r5)
   12b54:	29400104 	addi	r5,r5,4
   12b58:	d9402e15 	stw	r5,184(sp)
   12b5c:	982dd7fa 	srai	r22,r19,31
   12b60:	b005883a 	mov	r2,r22
   12b64:	003c5a06 	br	11cd0 <__alt_data_end+0xfc011cd0>
   12b68:	9080040c 	andi	r2,r18,16
   12b6c:	10003526 	beq	r2,zero,12c44 <___vfprintf_internal_r+0x14c4>
   12b70:	d8c02e17 	ldw	r3,184(sp)
   12b74:	d9002a17 	ldw	r4,168(sp)
   12b78:	d8002785 	stb	zero,158(sp)
   12b7c:	18800104 	addi	r2,r3,4
   12b80:	1cc00017 	ldw	r19,0(r3)
   12b84:	002d883a 	mov	r22,zero
   12b88:	20003716 	blt	r4,zero,12c68 <___vfprintf_internal_r+0x14e8>
   12b8c:	00ffdfc4 	movi	r3,-129
   12b90:	d8802e15 	stw	r2,184(sp)
   12b94:	90e4703a 	and	r18,r18,r3
   12b98:	0039883a 	mov	fp,zero
   12b9c:	983dd426 	beq	r19,zero,122f0 <__alt_data_end+0xfc0122f0>
   12ba0:	00800244 	movi	r2,9
   12ba4:	14fc5336 	bltu	r2,r19,11cf4 <__alt_data_end+0xfc011cf4>
   12ba8:	d8c02817 	ldw	r3,160(sp)
   12bac:	dc001dc4 	addi	r16,sp,119
   12bb0:	9cc00c04 	addi	r19,r19,48
   12bb4:	1c07c83a 	sub	r3,r3,r16
   12bb8:	dcc01dc5 	stb	r19,119(sp)
   12bbc:	d8c02b15 	stw	r3,172(sp)
   12bc0:	003cc606 	br	11edc <__alt_data_end+0xfc011edc>
   12bc4:	d8803317 	ldw	r2,204(sp)
   12bc8:	143fffc4 	addi	r16,r2,-1
   12bcc:	043f4d0e 	bge	zero,r16,12904 <__alt_data_end+0xfc012904>
   12bd0:	07000404 	movi	fp,16
   12bd4:	e400810e 	bge	fp,r16,12ddc <___vfprintf_internal_r+0x165c>
   12bd8:	014000f4 	movhi	r5,3
   12bdc:	296a6084 	addi	r5,r5,-22142
   12be0:	d9402c15 	stw	r5,176(sp)
   12be4:	01c001c4 	movi	r7,7
   12be8:	dcc02d17 	ldw	r19,180(sp)
   12bec:	00000306 	br	12bfc <___vfprintf_internal_r+0x147c>
   12bf0:	b5800204 	addi	r22,r22,8
   12bf4:	843ffc04 	addi	r16,r16,-16
   12bf8:	e4007b0e 	bge	fp,r16,12de8 <___vfprintf_internal_r+0x1668>
   12bfc:	18c00404 	addi	r3,r3,16
   12c00:	8c400044 	addi	r17,r17,1
   12c04:	b5000015 	stw	r20,0(r22)
   12c08:	b7000115 	stw	fp,4(r22)
   12c0c:	d8c02015 	stw	r3,128(sp)
   12c10:	dc401f15 	stw	r17,124(sp)
   12c14:	3c7ff60e 	bge	r7,r17,12bf0 <__alt_data_end+0xfc012bf0>
   12c18:	d9801e04 	addi	r6,sp,120
   12c1c:	b80b883a 	mov	r5,r23
   12c20:	9809883a 	mov	r4,r19
   12c24:	d9c03c15 	stw	r7,240(sp)
   12c28:	0019a8c0 	call	19a8c <__sprint_r>
   12c2c:	d9c03c17 	ldw	r7,240(sp)
   12c30:	103bd71e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12c34:	d8c02017 	ldw	r3,128(sp)
   12c38:	dc401f17 	ldw	r17,124(sp)
   12c3c:	dd800404 	addi	r22,sp,16
   12c40:	003fec06 	br	12bf4 <__alt_data_end+0xfc012bf4>
   12c44:	9080100c 	andi	r2,r18,64
   12c48:	d8002785 	stb	zero,158(sp)
   12c4c:	10010e26 	beq	r2,zero,13088 <___vfprintf_internal_r+0x1908>
   12c50:	d9402e17 	ldw	r5,184(sp)
   12c54:	d8c02a17 	ldw	r3,168(sp)
   12c58:	002d883a 	mov	r22,zero
   12c5c:	28800104 	addi	r2,r5,4
   12c60:	2cc0000b 	ldhu	r19,0(r5)
   12c64:	183fc90e 	bge	r3,zero,12b8c <__alt_data_end+0xfc012b8c>
   12c68:	d8802e15 	stw	r2,184(sp)
   12c6c:	0039883a 	mov	fp,zero
   12c70:	9d84b03a 	or	r2,r19,r22
   12c74:	103c1e1e 	bne	r2,zero,11cf0 <__alt_data_end+0xfc011cf0>
   12c78:	00800044 	movi	r2,1
   12c7c:	003e6c06 	br	12630 <__alt_data_end+0xfc012630>
   12c80:	d9002d17 	ldw	r4,180(sp)
   12c84:	d9801e04 	addi	r6,sp,120
   12c88:	b80b883a 	mov	r5,r23
   12c8c:	0019a8c0 	call	19a8c <__sprint_r>
   12c90:	103bbf1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12c94:	d8c02017 	ldw	r3,128(sp)
   12c98:	da000404 	addi	r8,sp,16
   12c9c:	d9003217 	ldw	r4,200(sp)
   12ca0:	d8802617 	ldw	r2,152(sp)
   12ca4:	d9403317 	ldw	r5,204(sp)
   12ca8:	8123883a 	add	r17,r16,r4
   12cac:	11400216 	blt	r2,r5,12cb8 <___vfprintf_internal_r+0x1538>
   12cb0:	9100004c 	andi	r4,r18,1
   12cb4:	20000d26 	beq	r4,zero,12cec <___vfprintf_internal_r+0x156c>
   12cb8:	d9003717 	ldw	r4,220(sp)
   12cbc:	d9403417 	ldw	r5,208(sp)
   12cc0:	1907883a 	add	r3,r3,r4
   12cc4:	d9001f17 	ldw	r4,124(sp)
   12cc8:	41400015 	stw	r5,0(r8)
   12ccc:	d9403717 	ldw	r5,220(sp)
   12cd0:	21000044 	addi	r4,r4,1
   12cd4:	d8c02015 	stw	r3,128(sp)
   12cd8:	41400115 	stw	r5,4(r8)
   12cdc:	d9001f15 	stw	r4,124(sp)
   12ce0:	014001c4 	movi	r5,7
   12ce4:	2901e816 	blt	r5,r4,13488 <___vfprintf_internal_r+0x1d08>
   12ce8:	42000204 	addi	r8,r8,8
   12cec:	d9003317 	ldw	r4,204(sp)
   12cf0:	8121883a 	add	r16,r16,r4
   12cf4:	2085c83a 	sub	r2,r4,r2
   12cf8:	8461c83a 	sub	r16,r16,r17
   12cfc:	1400010e 	bge	r2,r16,12d04 <___vfprintf_internal_r+0x1584>
   12d00:	1021883a 	mov	r16,r2
   12d04:	04000a0e 	bge	zero,r16,12d30 <___vfprintf_internal_r+0x15b0>
   12d08:	d9001f17 	ldw	r4,124(sp)
   12d0c:	1c07883a 	add	r3,r3,r16
   12d10:	44400015 	stw	r17,0(r8)
   12d14:	21000044 	addi	r4,r4,1
   12d18:	44000115 	stw	r16,4(r8)
   12d1c:	d8c02015 	stw	r3,128(sp)
   12d20:	d9001f15 	stw	r4,124(sp)
   12d24:	014001c4 	movi	r5,7
   12d28:	2901fb16 	blt	r5,r4,13518 <___vfprintf_internal_r+0x1d98>
   12d2c:	42000204 	addi	r8,r8,8
   12d30:	8001f716 	blt	r16,zero,13510 <___vfprintf_internal_r+0x1d90>
   12d34:	1421c83a 	sub	r16,r2,r16
   12d38:	043d160e 	bge	zero,r16,12194 <__alt_data_end+0xfc012194>
   12d3c:	04400404 	movi	r17,16
   12d40:	d8801f17 	ldw	r2,124(sp)
   12d44:	8c3efb0e 	bge	r17,r16,12934 <__alt_data_end+0xfc012934>
   12d48:	014000f4 	movhi	r5,3
   12d4c:	296a6084 	addi	r5,r5,-22142
   12d50:	d9402c15 	stw	r5,176(sp)
   12d54:	058001c4 	movi	r22,7
   12d58:	dcc02d17 	ldw	r19,180(sp)
   12d5c:	00000306 	br	12d6c <___vfprintf_internal_r+0x15ec>
   12d60:	42000204 	addi	r8,r8,8
   12d64:	843ffc04 	addi	r16,r16,-16
   12d68:	8c3ef50e 	bge	r17,r16,12940 <__alt_data_end+0xfc012940>
   12d6c:	18c00404 	addi	r3,r3,16
   12d70:	10800044 	addi	r2,r2,1
   12d74:	45000015 	stw	r20,0(r8)
   12d78:	44400115 	stw	r17,4(r8)
   12d7c:	d8c02015 	stw	r3,128(sp)
   12d80:	d8801f15 	stw	r2,124(sp)
   12d84:	b0bff60e 	bge	r22,r2,12d60 <__alt_data_end+0xfc012d60>
   12d88:	d9801e04 	addi	r6,sp,120
   12d8c:	b80b883a 	mov	r5,r23
   12d90:	9809883a 	mov	r4,r19
   12d94:	0019a8c0 	call	19a8c <__sprint_r>
   12d98:	103b7d1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12d9c:	d8c02017 	ldw	r3,128(sp)
   12da0:	d8801f17 	ldw	r2,124(sp)
   12da4:	da000404 	addi	r8,sp,16
   12da8:	003fee06 	br	12d64 <__alt_data_end+0xfc012d64>
   12dac:	9088703a 	and	r4,r18,r2
   12db0:	203eab1e 	bne	r4,zero,12860 <__alt_data_end+0xfc012860>
   12db4:	dc401f17 	ldw	r17,124(sp)
   12db8:	40800115 	stw	r2,4(r8)
   12dbc:	44000015 	stw	r16,0(r8)
   12dc0:	8c400044 	addi	r17,r17,1
   12dc4:	d8c02015 	stw	r3,128(sp)
   12dc8:	dc401f15 	stw	r17,124(sp)
   12dcc:	008001c4 	movi	r2,7
   12dd0:	14400e16 	blt	r2,r17,12e0c <___vfprintf_internal_r+0x168c>
   12dd4:	45800204 	addi	r22,r8,8
   12dd8:	003eca06 	br	12904 <__alt_data_end+0xfc012904>
   12ddc:	010000f4 	movhi	r4,3
   12de0:	212a6084 	addi	r4,r4,-22142
   12de4:	d9002c15 	stw	r4,176(sp)
   12de8:	d8802c17 	ldw	r2,176(sp)
   12dec:	1c07883a 	add	r3,r3,r16
   12df0:	8c400044 	addi	r17,r17,1
   12df4:	b0800015 	stw	r2,0(r22)
   12df8:	b4000115 	stw	r16,4(r22)
   12dfc:	d8c02015 	stw	r3,128(sp)
   12e00:	dc401f15 	stw	r17,124(sp)
   12e04:	008001c4 	movi	r2,7
   12e08:	147ebd0e 	bge	r2,r17,12900 <__alt_data_end+0xfc012900>
   12e0c:	d9002d17 	ldw	r4,180(sp)
   12e10:	d9801e04 	addi	r6,sp,120
   12e14:	b80b883a 	mov	r5,r23
   12e18:	0019a8c0 	call	19a8c <__sprint_r>
   12e1c:	103b5c1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12e20:	d8c02017 	ldw	r3,128(sp)
   12e24:	dc401f17 	ldw	r17,124(sp)
   12e28:	dd800404 	addi	r22,sp,16
   12e2c:	003eb506 	br	12904 <__alt_data_end+0xfc012904>
   12e30:	d9002d17 	ldw	r4,180(sp)
   12e34:	d9801e04 	addi	r6,sp,120
   12e38:	b80b883a 	mov	r5,r23
   12e3c:	0019a8c0 	call	19a8c <__sprint_r>
   12e40:	103b531e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12e44:	d8c02017 	ldw	r3,128(sp)
   12e48:	dc401f17 	ldw	r17,124(sp)
   12e4c:	da000404 	addi	r8,sp,16
   12e50:	003e8d06 	br	12888 <__alt_data_end+0xfc012888>
   12e54:	d9002d17 	ldw	r4,180(sp)
   12e58:	d9801e04 	addi	r6,sp,120
   12e5c:	b80b883a 	mov	r5,r23
   12e60:	0019a8c0 	call	19a8c <__sprint_r>
   12e64:	103b4a1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12e68:	d8c02017 	ldw	r3,128(sp)
   12e6c:	dc401f17 	ldw	r17,124(sp)
   12e70:	dd800404 	addi	r22,sp,16
   12e74:	003e8f06 	br	128b4 <__alt_data_end+0xfc0128b4>
   12e78:	0027883a 	mov	r19,zero
   12e7c:	003f4a06 	br	12ba8 <__alt_data_end+0xfc012ba8>
   12e80:	d9002d17 	ldw	r4,180(sp)
   12e84:	d9801e04 	addi	r6,sp,120
   12e88:	b80b883a 	mov	r5,r23
   12e8c:	0019a8c0 	call	19a8c <__sprint_r>
   12e90:	103b3f1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   12e94:	d8c02017 	ldw	r3,128(sp)
   12e98:	da000404 	addi	r8,sp,16
   12e9c:	003c7b06 	br	1208c <__alt_data_end+0xfc01208c>
   12ea0:	d9402a17 	ldw	r5,168(sp)
   12ea4:	04e7c83a 	sub	r19,zero,r19
   12ea8:	07000b44 	movi	fp,45
   12eac:	9804c03a 	cmpne	r2,r19,zero
   12eb0:	05adc83a 	sub	r22,zero,r22
   12eb4:	df002785 	stb	fp,158(sp)
   12eb8:	b0adc83a 	sub	r22,r22,r2
   12ebc:	28017b16 	blt	r5,zero,134ac <___vfprintf_internal_r+0x1d2c>
   12ec0:	00bfdfc4 	movi	r2,-129
   12ec4:	90a4703a 	and	r18,r18,r2
   12ec8:	003b8906 	br	11cf0 <__alt_data_end+0xfc011cf0>
   12ecc:	d9003617 	ldw	r4,216(sp)
   12ed0:	d9403817 	ldw	r5,224(sp)
   12ed4:	da003d15 	stw	r8,244(sp)
   12ed8:	00182700 	call	18270 <__fpclassifyd>
   12edc:	da003d17 	ldw	r8,244(sp)
   12ee0:	1000f026 	beq	r2,zero,132a4 <___vfprintf_internal_r+0x1b24>
   12ee4:	d9002a17 	ldw	r4,168(sp)
   12ee8:	05bff7c4 	movi	r22,-33
   12eec:	00bfffc4 	movi	r2,-1
   12ef0:	8dac703a 	and	r22,r17,r22
   12ef4:	20820026 	beq	r4,r2,136f8 <___vfprintf_internal_r+0x1f78>
   12ef8:	008011c4 	movi	r2,71
   12efc:	b081f726 	beq	r22,r2,136dc <___vfprintf_internal_r+0x1f5c>
   12f00:	d9003817 	ldw	r4,224(sp)
   12f04:	90c04014 	ori	r3,r18,256
   12f08:	d8c02c15 	stw	r3,176(sp)
   12f0c:	20021516 	blt	r4,zero,13764 <___vfprintf_internal_r+0x1fe4>
   12f10:	dcc03817 	ldw	r19,224(sp)
   12f14:	d8002905 	stb	zero,164(sp)
   12f18:	00801984 	movi	r2,102
   12f1c:	8881f926 	beq	r17,r2,13704 <___vfprintf_internal_r+0x1f84>
   12f20:	00801184 	movi	r2,70
   12f24:	88821c26 	beq	r17,r2,13798 <___vfprintf_internal_r+0x2018>
   12f28:	00801144 	movi	r2,69
   12f2c:	b081ef26 	beq	r22,r2,136ec <___vfprintf_internal_r+0x1f6c>
   12f30:	d8c02a17 	ldw	r3,168(sp)
   12f34:	d8802104 	addi	r2,sp,132
   12f38:	d8800315 	stw	r2,12(sp)
   12f3c:	d9403617 	ldw	r5,216(sp)
   12f40:	d8802504 	addi	r2,sp,148
   12f44:	d9002d17 	ldw	r4,180(sp)
   12f48:	d8800215 	stw	r2,8(sp)
   12f4c:	d8802604 	addi	r2,sp,152
   12f50:	d8c00015 	stw	r3,0(sp)
   12f54:	d8800115 	stw	r2,4(sp)
   12f58:	01c00084 	movi	r7,2
   12f5c:	980d883a 	mov	r6,r19
   12f60:	d8c03c15 	stw	r3,240(sp)
   12f64:	da003d15 	stw	r8,244(sp)
   12f68:	0013eb00 	call	13eb0 <_dtoa_r>
   12f6c:	1021883a 	mov	r16,r2
   12f70:	008019c4 	movi	r2,103
   12f74:	d8c03c17 	ldw	r3,240(sp)
   12f78:	da003d17 	ldw	r8,244(sp)
   12f7c:	88817126 	beq	r17,r2,13544 <___vfprintf_internal_r+0x1dc4>
   12f80:	008011c4 	movi	r2,71
   12f84:	88829126 	beq	r17,r2,139cc <___vfprintf_internal_r+0x224c>
   12f88:	80f9883a 	add	fp,r16,r3
   12f8c:	d9003617 	ldw	r4,216(sp)
   12f90:	000d883a 	mov	r6,zero
   12f94:	000f883a 	mov	r7,zero
   12f98:	980b883a 	mov	r5,r19
   12f9c:	da003d15 	stw	r8,244(sp)
   12fa0:	001d8100 	call	1d810 <__eqdf2>
   12fa4:	da003d17 	ldw	r8,244(sp)
   12fa8:	10018d26 	beq	r2,zero,135e0 <___vfprintf_internal_r+0x1e60>
   12fac:	d8802117 	ldw	r2,132(sp)
   12fb0:	1700062e 	bgeu	r2,fp,12fcc <___vfprintf_internal_r+0x184c>
   12fb4:	01000c04 	movi	r4,48
   12fb8:	10c00044 	addi	r3,r2,1
   12fbc:	d8c02115 	stw	r3,132(sp)
   12fc0:	11000005 	stb	r4,0(r2)
   12fc4:	d8802117 	ldw	r2,132(sp)
   12fc8:	173ffb36 	bltu	r2,fp,12fb8 <__alt_data_end+0xfc012fb8>
   12fcc:	1405c83a 	sub	r2,r2,r16
   12fd0:	d8803315 	stw	r2,204(sp)
   12fd4:	008011c4 	movi	r2,71
   12fd8:	b0817626 	beq	r22,r2,135b4 <___vfprintf_internal_r+0x1e34>
   12fdc:	00801944 	movi	r2,101
   12fe0:	1442800e 	bge	r2,r17,139e4 <___vfprintf_internal_r+0x2264>
   12fe4:	d8c02617 	ldw	r3,152(sp)
   12fe8:	00801984 	movi	r2,102
   12fec:	d8c03215 	stw	r3,200(sp)
   12ff0:	8881fe26 	beq	r17,r2,137ec <___vfprintf_internal_r+0x206c>
   12ff4:	d8c03217 	ldw	r3,200(sp)
   12ff8:	d9003317 	ldw	r4,204(sp)
   12ffc:	1901dd16 	blt	r3,r4,13774 <___vfprintf_internal_r+0x1ff4>
   13000:	9480004c 	andi	r18,r18,1
   13004:	90022b1e 	bne	r18,zero,138b4 <___vfprintf_internal_r+0x2134>
   13008:	1805883a 	mov	r2,r3
   1300c:	18028316 	blt	r3,zero,13a1c <___vfprintf_internal_r+0x229c>
   13010:	d8c03217 	ldw	r3,200(sp)
   13014:	044019c4 	movi	r17,103
   13018:	d8c02b15 	stw	r3,172(sp)
   1301c:	df002907 	ldb	fp,164(sp)
   13020:	e001531e 	bne	fp,zero,13570 <___vfprintf_internal_r+0x1df0>
   13024:	df002783 	ldbu	fp,158(sp)
   13028:	d8802915 	stw	r2,164(sp)
   1302c:	dc802c17 	ldw	r18,176(sp)
   13030:	d8002a15 	stw	zero,168(sp)
   13034:	003baf06 	br	11ef4 <__alt_data_end+0xfc011ef4>
   13038:	d8c02e17 	ldw	r3,184(sp)
   1303c:	d9002e17 	ldw	r4,184(sp)
   13040:	d9402e17 	ldw	r5,184(sp)
   13044:	18c00017 	ldw	r3,0(r3)
   13048:	21000117 	ldw	r4,4(r4)
   1304c:	29400204 	addi	r5,r5,8
   13050:	d8c03615 	stw	r3,216(sp)
   13054:	d9003815 	stw	r4,224(sp)
   13058:	d9402e15 	stw	r5,184(sp)
   1305c:	003b5006 	br	11da0 <__alt_data_end+0xfc011da0>
   13060:	ac400007 	ldb	r17,0(r21)
   13064:	003a2806 	br	11908 <__alt_data_end+0xfc011908>
   13068:	9080100c 	andi	r2,r18,64
   1306c:	1000a826 	beq	r2,zero,13310 <___vfprintf_internal_r+0x1b90>
   13070:	d8c02e17 	ldw	r3,184(sp)
   13074:	002d883a 	mov	r22,zero
   13078:	1cc0000b 	ldhu	r19,0(r3)
   1307c:	18c00104 	addi	r3,r3,4
   13080:	d8c02e15 	stw	r3,184(sp)
   13084:	003caf06 	br	12344 <__alt_data_end+0xfc012344>
   13088:	d9002e17 	ldw	r4,184(sp)
   1308c:	d9402a17 	ldw	r5,168(sp)
   13090:	002d883a 	mov	r22,zero
   13094:	20800104 	addi	r2,r4,4
   13098:	24c00017 	ldw	r19,0(r4)
   1309c:	283ebb0e 	bge	r5,zero,12b8c <__alt_data_end+0xfc012b8c>
   130a0:	003ef106 	br	12c68 <__alt_data_end+0xfc012c68>
   130a4:	9080040c 	andi	r2,r18,16
   130a8:	1000921e 	bne	r2,zero,132f4 <___vfprintf_internal_r+0x1b74>
   130ac:	9480100c 	andi	r18,r18,64
   130b0:	90013926 	beq	r18,zero,13598 <___vfprintf_internal_r+0x1e18>
   130b4:	d9402e17 	ldw	r5,184(sp)
   130b8:	d8c02f17 	ldw	r3,188(sp)
   130bc:	28800017 	ldw	r2,0(r5)
   130c0:	29400104 	addi	r5,r5,4
   130c4:	d9402e15 	stw	r5,184(sp)
   130c8:	10c0000d 	sth	r3,0(r2)
   130cc:	0039e406 	br	11860 <__alt_data_end+0xfc011860>
   130d0:	9080100c 	andi	r2,r18,64
   130d4:	10008026 	beq	r2,zero,132d8 <___vfprintf_internal_r+0x1b58>
   130d8:	d8802e17 	ldw	r2,184(sp)
   130dc:	14c0000f 	ldh	r19,0(r2)
   130e0:	10800104 	addi	r2,r2,4
   130e4:	d8802e15 	stw	r2,184(sp)
   130e8:	982dd7fa 	srai	r22,r19,31
   130ec:	b005883a 	mov	r2,r22
   130f0:	003af706 	br	11cd0 <__alt_data_end+0xfc011cd0>
   130f4:	9080100c 	andi	r2,r18,64
   130f8:	d8002785 	stb	zero,158(sp)
   130fc:	10008a1e 	bne	r2,zero,13328 <___vfprintf_internal_r+0x1ba8>
   13100:	d9002e17 	ldw	r4,184(sp)
   13104:	d9402a17 	ldw	r5,168(sp)
   13108:	002d883a 	mov	r22,zero
   1310c:	20800104 	addi	r2,r4,4
   13110:	24c00017 	ldw	r19,0(r4)
   13114:	283e4b0e 	bge	r5,zero,12a44 <__alt_data_end+0xfc012a44>
   13118:	9d86b03a 	or	r3,r19,r22
   1311c:	d8802e15 	stw	r2,184(sp)
   13120:	183e4c1e 	bne	r3,zero,12a54 <__alt_data_end+0xfc012a54>
   13124:	0039883a 	mov	fp,zero
   13128:	0005883a 	mov	r2,zero
   1312c:	003d4006 	br	12630 <__alt_data_end+0xfc012630>
   13130:	014000f4 	movhi	r5,3
   13134:	296a6084 	addi	r5,r5,-22142
   13138:	d9402c15 	stw	r5,176(sp)
   1313c:	d9402c17 	ldw	r5,176(sp)
   13140:	1c47883a 	add	r3,r3,r17
   13144:	10800044 	addi	r2,r2,1
   13148:	41400015 	stw	r5,0(r8)
   1314c:	44400115 	stw	r17,4(r8)
   13150:	d8c02015 	stw	r3,128(sp)
   13154:	d8801f15 	stw	r2,124(sp)
   13158:	010001c4 	movi	r4,7
   1315c:	20bec816 	blt	r4,r2,12c80 <__alt_data_end+0xfc012c80>
   13160:	42000204 	addi	r8,r8,8
   13164:	003ecd06 	br	12c9c <__alt_data_end+0xfc012c9c>
   13168:	d9002a17 	ldw	r4,168(sp)
   1316c:	d8002785 	stb	zero,158(sp)
   13170:	203d2d16 	blt	r4,zero,12628 <__alt_data_end+0xfc012628>
   13174:	00bfdfc4 	movi	r2,-129
   13178:	90a4703a 	and	r18,r18,r2
   1317c:	003a6106 	br	11b04 <__alt_data_end+0xfc011b04>
   13180:	010000f4 	movhi	r4,3
   13184:	212a6084 	addi	r4,r4,-22142
   13188:	d9002c15 	stw	r4,176(sp)
   1318c:	003bea06 	br	12138 <__alt_data_end+0xfc012138>
   13190:	d9002d17 	ldw	r4,180(sp)
   13194:	d9801e04 	addi	r6,sp,120
   13198:	b80b883a 	mov	r5,r23
   1319c:	0019a8c0 	call	19a8c <__sprint_r>
   131a0:	103a7b1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   131a4:	d8c02017 	ldw	r3,128(sp)
   131a8:	da000404 	addi	r8,sp,16
   131ac:	003d4106 	br	126b4 <__alt_data_end+0xfc0126b4>
   131b0:	d8801f17 	ldw	r2,124(sp)
   131b4:	014000f4 	movhi	r5,3
   131b8:	01000044 	movi	r4,1
   131bc:	18c00044 	addi	r3,r3,1
   131c0:	10800044 	addi	r2,r2,1
   131c4:	296a5804 	addi	r5,r5,-22176
   131c8:	41000115 	stw	r4,4(r8)
   131cc:	41400015 	stw	r5,0(r8)
   131d0:	d8c02015 	stw	r3,128(sp)
   131d4:	d8801f15 	stw	r2,124(sp)
   131d8:	010001c4 	movi	r4,7
   131dc:	20805c16 	blt	r4,r2,13350 <___vfprintf_internal_r+0x1bd0>
   131e0:	42000204 	addi	r8,r8,8
   131e4:	8800041e 	bne	r17,zero,131f8 <___vfprintf_internal_r+0x1a78>
   131e8:	d8803317 	ldw	r2,204(sp)
   131ec:	1000021e 	bne	r2,zero,131f8 <___vfprintf_internal_r+0x1a78>
   131f0:	9080004c 	andi	r2,r18,1
   131f4:	103be726 	beq	r2,zero,12194 <__alt_data_end+0xfc012194>
   131f8:	d9003717 	ldw	r4,220(sp)
   131fc:	d8801f17 	ldw	r2,124(sp)
   13200:	d9403417 	ldw	r5,208(sp)
   13204:	20c7883a 	add	r3,r4,r3
   13208:	10800044 	addi	r2,r2,1
   1320c:	41000115 	stw	r4,4(r8)
   13210:	41400015 	stw	r5,0(r8)
   13214:	d8c02015 	stw	r3,128(sp)
   13218:	d8801f15 	stw	r2,124(sp)
   1321c:	010001c4 	movi	r4,7
   13220:	20812116 	blt	r4,r2,136a8 <___vfprintf_internal_r+0x1f28>
   13224:	42000204 	addi	r8,r8,8
   13228:	0463c83a 	sub	r17,zero,r17
   1322c:	0440730e 	bge	zero,r17,133fc <___vfprintf_internal_r+0x1c7c>
   13230:	05800404 	movi	r22,16
   13234:	b440860e 	bge	r22,r17,13450 <___vfprintf_internal_r+0x1cd0>
   13238:	014000f4 	movhi	r5,3
   1323c:	296a6084 	addi	r5,r5,-22142
   13240:	d9402c15 	stw	r5,176(sp)
   13244:	070001c4 	movi	fp,7
   13248:	dcc02d17 	ldw	r19,180(sp)
   1324c:	00000306 	br	1325c <___vfprintf_internal_r+0x1adc>
   13250:	42000204 	addi	r8,r8,8
   13254:	8c7ffc04 	addi	r17,r17,-16
   13258:	b440800e 	bge	r22,r17,1345c <___vfprintf_internal_r+0x1cdc>
   1325c:	18c00404 	addi	r3,r3,16
   13260:	10800044 	addi	r2,r2,1
   13264:	45000015 	stw	r20,0(r8)
   13268:	45800115 	stw	r22,4(r8)
   1326c:	d8c02015 	stw	r3,128(sp)
   13270:	d8801f15 	stw	r2,124(sp)
   13274:	e0bff60e 	bge	fp,r2,13250 <__alt_data_end+0xfc013250>
   13278:	d9801e04 	addi	r6,sp,120
   1327c:	b80b883a 	mov	r5,r23
   13280:	9809883a 	mov	r4,r19
   13284:	0019a8c0 	call	19a8c <__sprint_r>
   13288:	103a411e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   1328c:	d8c02017 	ldw	r3,128(sp)
   13290:	d8801f17 	ldw	r2,124(sp)
   13294:	da000404 	addi	r8,sp,16
   13298:	003fee06 	br	13254 <__alt_data_end+0xfc013254>
   1329c:	00bfffc4 	movi	r2,-1
   132a0:	003a3f06 	br	11ba0 <__alt_data_end+0xfc011ba0>
   132a4:	008011c4 	movi	r2,71
   132a8:	1440b816 	blt	r2,r17,1358c <___vfprintf_internal_r+0x1e0c>
   132ac:	040000f4 	movhi	r16,3
   132b0:	842a4a04 	addi	r16,r16,-22232
   132b4:	00c000c4 	movi	r3,3
   132b8:	00bfdfc4 	movi	r2,-129
   132bc:	d8c02915 	stw	r3,164(sp)
   132c0:	90a4703a 	and	r18,r18,r2
   132c4:	df002783 	ldbu	fp,158(sp)
   132c8:	d8c02b15 	stw	r3,172(sp)
   132cc:	d8002a15 	stw	zero,168(sp)
   132d0:	d8003215 	stw	zero,200(sp)
   132d4:	003b0706 	br	11ef4 <__alt_data_end+0xfc011ef4>
   132d8:	d8c02e17 	ldw	r3,184(sp)
   132dc:	1cc00017 	ldw	r19,0(r3)
   132e0:	18c00104 	addi	r3,r3,4
   132e4:	d8c02e15 	stw	r3,184(sp)
   132e8:	982dd7fa 	srai	r22,r19,31
   132ec:	b005883a 	mov	r2,r22
   132f0:	003a7706 	br	11cd0 <__alt_data_end+0xfc011cd0>
   132f4:	d8c02e17 	ldw	r3,184(sp)
   132f8:	d9002f17 	ldw	r4,188(sp)
   132fc:	18800017 	ldw	r2,0(r3)
   13300:	18c00104 	addi	r3,r3,4
   13304:	d8c02e15 	stw	r3,184(sp)
   13308:	11000015 	stw	r4,0(r2)
   1330c:	00395406 	br	11860 <__alt_data_end+0xfc011860>
   13310:	d9002e17 	ldw	r4,184(sp)
   13314:	002d883a 	mov	r22,zero
   13318:	24c00017 	ldw	r19,0(r4)
   1331c:	21000104 	addi	r4,r4,4
   13320:	d9002e15 	stw	r4,184(sp)
   13324:	003c0706 	br	12344 <__alt_data_end+0xfc012344>
   13328:	d9402e17 	ldw	r5,184(sp)
   1332c:	d8c02a17 	ldw	r3,168(sp)
   13330:	002d883a 	mov	r22,zero
   13334:	28800104 	addi	r2,r5,4
   13338:	2cc0000b 	ldhu	r19,0(r5)
   1333c:	183dc10e 	bge	r3,zero,12a44 <__alt_data_end+0xfc012a44>
   13340:	003f7506 	br	13118 <__alt_data_end+0xfc013118>
   13344:	040000f4 	movhi	r16,3
   13348:	842a4804 	addi	r16,r16,-22240
   1334c:	003aa706 	br	11dec <__alt_data_end+0xfc011dec>
   13350:	d9002d17 	ldw	r4,180(sp)
   13354:	d9801e04 	addi	r6,sp,120
   13358:	b80b883a 	mov	r5,r23
   1335c:	0019a8c0 	call	19a8c <__sprint_r>
   13360:	103a0b1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   13364:	dc402617 	ldw	r17,152(sp)
   13368:	d8c02017 	ldw	r3,128(sp)
   1336c:	da000404 	addi	r8,sp,16
   13370:	003f9c06 	br	131e4 <__alt_data_end+0xfc0131e4>
   13374:	ac400043 	ldbu	r17,1(r21)
   13378:	84000814 	ori	r16,r16,32
   1337c:	ad400044 	addi	r21,r21,1
   13380:	8c403fcc 	andi	r17,r17,255
   13384:	8c40201c 	xori	r17,r17,128
   13388:	8c7fe004 	addi	r17,r17,-128
   1338c:	00395e06 	br	11908 <__alt_data_end+0xfc011908>
   13390:	d8c02e15 	stw	r3,184(sp)
   13394:	0039883a 	mov	fp,zero
   13398:	003e3506 	br	12c70 <__alt_data_end+0xfc012c70>
   1339c:	d9002d17 	ldw	r4,180(sp)
   133a0:	d9801e04 	addi	r6,sp,120
   133a4:	b80b883a 	mov	r5,r23
   133a8:	0019a8c0 	call	19a8c <__sprint_r>
   133ac:	1039f81e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   133b0:	d8c02017 	ldw	r3,128(sp)
   133b4:	da000404 	addi	r8,sp,16
   133b8:	003cd006 	br	126fc <__alt_data_end+0xfc0126fc>
   133bc:	8009883a 	mov	r4,r16
   133c0:	df003d15 	stw	fp,244(sp)
   133c4:	000f4240 	call	f424 <strlen>
   133c8:	d8802b15 	stw	r2,172(sp)
   133cc:	da003d17 	ldw	r8,244(sp)
   133d0:	103c200e 	bge	r2,zero,12454 <__alt_data_end+0xfc012454>
   133d4:	0005883a 	mov	r2,zero
   133d8:	003c1e06 	br	12454 <__alt_data_end+0xfc012454>
   133dc:	d9002d17 	ldw	r4,180(sp)
   133e0:	d9801e04 	addi	r6,sp,120
   133e4:	b80b883a 	mov	r5,r23
   133e8:	0019a8c0 	call	19a8c <__sprint_r>
   133ec:	1039e81e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   133f0:	d8c02017 	ldw	r3,128(sp)
   133f4:	d8801f17 	ldw	r2,124(sp)
   133f8:	da000404 	addi	r8,sp,16
   133fc:	d9403317 	ldw	r5,204(sp)
   13400:	10800044 	addi	r2,r2,1
   13404:	44000015 	stw	r16,0(r8)
   13408:	28c7883a 	add	r3,r5,r3
   1340c:	003b5b06 	br	1217c <__alt_data_end+0xfc01217c>
   13410:	010000f4 	movhi	r4,3
   13414:	212a6484 	addi	r4,r4,-22126
   13418:	d9003515 	stw	r4,212(sp)
   1341c:	003af206 	br	11fe8 <__alt_data_end+0xfc011fe8>
   13420:	013fffc4 	movi	r4,-1
   13424:	003a0806 	br	11c48 <__alt_data_end+0xfc011c48>
   13428:	0023883a 	mov	r17,zero
   1342c:	003d9d06 	br	12aa4 <__alt_data_end+0xfc012aa4>
   13430:	d9002d17 	ldw	r4,180(sp)
   13434:	d9801e04 	addi	r6,sp,120
   13438:	b80b883a 	mov	r5,r23
   1343c:	0019a8c0 	call	19a8c <__sprint_r>
   13440:	1039d31e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   13444:	d8c02017 	ldw	r3,128(sp)
   13448:	da000404 	addi	r8,sp,16
   1344c:	003d9406 	br	12aa0 <__alt_data_end+0xfc012aa0>
   13450:	010000f4 	movhi	r4,3
   13454:	212a6084 	addi	r4,r4,-22142
   13458:	d9002c15 	stw	r4,176(sp)
   1345c:	d9002c17 	ldw	r4,176(sp)
   13460:	1c47883a 	add	r3,r3,r17
   13464:	10800044 	addi	r2,r2,1
   13468:	41000015 	stw	r4,0(r8)
   1346c:	44400115 	stw	r17,4(r8)
   13470:	d8c02015 	stw	r3,128(sp)
   13474:	d8801f15 	stw	r2,124(sp)
   13478:	010001c4 	movi	r4,7
   1347c:	20bfd716 	blt	r4,r2,133dc <__alt_data_end+0xfc0133dc>
   13480:	42000204 	addi	r8,r8,8
   13484:	003fdd06 	br	133fc <__alt_data_end+0xfc0133fc>
   13488:	d9002d17 	ldw	r4,180(sp)
   1348c:	d9801e04 	addi	r6,sp,120
   13490:	b80b883a 	mov	r5,r23
   13494:	0019a8c0 	call	19a8c <__sprint_r>
   13498:	1039bd1e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   1349c:	d8802617 	ldw	r2,152(sp)
   134a0:	d8c02017 	ldw	r3,128(sp)
   134a4:	da000404 	addi	r8,sp,16
   134a8:	003e1006 	br	12cec <__alt_data_end+0xfc012cec>
   134ac:	00800044 	movi	r2,1
   134b0:	10803fcc 	andi	r2,r2,255
   134b4:	00c00044 	movi	r3,1
   134b8:	10fa0d26 	beq	r2,r3,11cf0 <__alt_data_end+0xfc011cf0>
   134bc:	00c00084 	movi	r3,2
   134c0:	10fbaf26 	beq	r2,r3,12380 <__alt_data_end+0xfc012380>
   134c4:	003a6d06 	br	11e7c <__alt_data_end+0xfc011e7c>
   134c8:	010000f4 	movhi	r4,3
   134cc:	212a6484 	addi	r4,r4,-22126
   134d0:	d9003515 	stw	r4,212(sp)
   134d4:	003b5406 	br	12228 <__alt_data_end+0xfc012228>
   134d8:	d8802a17 	ldw	r2,168(sp)
   134dc:	00c00184 	movi	r3,6
   134e0:	1880012e 	bgeu	r3,r2,134e8 <___vfprintf_internal_r+0x1d68>
   134e4:	1805883a 	mov	r2,r3
   134e8:	d8802b15 	stw	r2,172(sp)
   134ec:	1000ef16 	blt	r2,zero,138ac <___vfprintf_internal_r+0x212c>
   134f0:	040000f4 	movhi	r16,3
   134f4:	d8802915 	stw	r2,164(sp)
   134f8:	dcc02e15 	stw	r19,184(sp)
   134fc:	d8002a15 	stw	zero,168(sp)
   13500:	d8003215 	stw	zero,200(sp)
   13504:	842a5604 	addi	r16,r16,-22184
   13508:	0039883a 	mov	fp,zero
   1350c:	003a8006 	br	11f10 <__alt_data_end+0xfc011f10>
   13510:	0021883a 	mov	r16,zero
   13514:	003e0706 	br	12d34 <__alt_data_end+0xfc012d34>
   13518:	d9002d17 	ldw	r4,180(sp)
   1351c:	d9801e04 	addi	r6,sp,120
   13520:	b80b883a 	mov	r5,r23
   13524:	0019a8c0 	call	19a8c <__sprint_r>
   13528:	1039991e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   1352c:	d8802617 	ldw	r2,152(sp)
   13530:	d9403317 	ldw	r5,204(sp)
   13534:	d8c02017 	ldw	r3,128(sp)
   13538:	da000404 	addi	r8,sp,16
   1353c:	2885c83a 	sub	r2,r5,r2
   13540:	003dfb06 	br	12d30 <__alt_data_end+0xfc012d30>
   13544:	9080004c 	andi	r2,r18,1
   13548:	103e8f1e 	bne	r2,zero,12f88 <__alt_data_end+0xfc012f88>
   1354c:	d8802117 	ldw	r2,132(sp)
   13550:	003e9e06 	br	12fcc <__alt_data_end+0xfc012fcc>
   13554:	1025883a 	mov	r18,r2
   13558:	0039883a 	mov	fp,zero
   1355c:	00800084 	movi	r2,2
   13560:	003fd306 	br	134b0 <__alt_data_end+0xfc0134b0>
   13564:	07000b44 	movi	fp,45
   13568:	df002785 	stb	fp,158(sp)
   1356c:	003a1b06 	br	11ddc <__alt_data_end+0xfc011ddc>
   13570:	00c00b44 	movi	r3,45
   13574:	d8c02785 	stb	r3,158(sp)
   13578:	d8802915 	stw	r2,164(sp)
   1357c:	dc802c17 	ldw	r18,176(sp)
   13580:	d8002a15 	stw	zero,168(sp)
   13584:	07000b44 	movi	fp,45
   13588:	003a5e06 	br	11f04 <__alt_data_end+0xfc011f04>
   1358c:	040000f4 	movhi	r16,3
   13590:	842a4b04 	addi	r16,r16,-22228
   13594:	003f4706 	br	132b4 <__alt_data_end+0xfc0132b4>
   13598:	d9002e17 	ldw	r4,184(sp)
   1359c:	d9402f17 	ldw	r5,188(sp)
   135a0:	20800017 	ldw	r2,0(r4)
   135a4:	21000104 	addi	r4,r4,4
   135a8:	d9002e15 	stw	r4,184(sp)
   135ac:	11400015 	stw	r5,0(r2)
   135b0:	0038ab06 	br	11860 <__alt_data_end+0xfc011860>
   135b4:	dd802617 	ldw	r22,152(sp)
   135b8:	00bfff44 	movi	r2,-3
   135bc:	b0801c16 	blt	r22,r2,13630 <___vfprintf_internal_r+0x1eb0>
   135c0:	d9402a17 	ldw	r5,168(sp)
   135c4:	2d801a16 	blt	r5,r22,13630 <___vfprintf_internal_r+0x1eb0>
   135c8:	dd803215 	stw	r22,200(sp)
   135cc:	003e8906 	br	12ff4 <__alt_data_end+0xfc012ff4>
   135d0:	010000f4 	movhi	r4,3
   135d4:	212a6084 	addi	r4,r4,-22142
   135d8:	d9002c15 	stw	r4,176(sp)
   135dc:	003c9106 	br	12824 <__alt_data_end+0xfc012824>
   135e0:	e005883a 	mov	r2,fp
   135e4:	003e7906 	br	12fcc <__alt_data_end+0xfc012fcc>
   135e8:	d9002a17 	ldw	r4,168(sp)
   135ec:	df002783 	ldbu	fp,158(sp)
   135f0:	dcc02e15 	stw	r19,184(sp)
   135f4:	d9002915 	stw	r4,164(sp)
   135f8:	d9002b15 	stw	r4,172(sp)
   135fc:	d8002a15 	stw	zero,168(sp)
   13600:	d8003215 	stw	zero,200(sp)
   13604:	003a3b06 	br	11ef4 <__alt_data_end+0xfc011ef4>
   13608:	9080004c 	andi	r2,r18,1
   1360c:	0039883a 	mov	fp,zero
   13610:	10000426 	beq	r2,zero,13624 <___vfprintf_internal_r+0x1ea4>
   13614:	00800c04 	movi	r2,48
   13618:	dc001dc4 	addi	r16,sp,119
   1361c:	d8801dc5 	stb	r2,119(sp)
   13620:	003b6406 	br	123b4 <__alt_data_end+0xfc0123b4>
   13624:	d8002b15 	stw	zero,172(sp)
   13628:	dc001e04 	addi	r16,sp,120
   1362c:	003a2b06 	br	11edc <__alt_data_end+0xfc011edc>
   13630:	8c7fff84 	addi	r17,r17,-2
   13634:	b5bfffc4 	addi	r22,r22,-1
   13638:	dd802615 	stw	r22,152(sp)
   1363c:	dc4022c5 	stb	r17,139(sp)
   13640:	b000bf16 	blt	r22,zero,13940 <___vfprintf_internal_r+0x21c0>
   13644:	00800ac4 	movi	r2,43
   13648:	d8802305 	stb	r2,140(sp)
   1364c:	00800244 	movi	r2,9
   13650:	15807016 	blt	r2,r22,13814 <___vfprintf_internal_r+0x2094>
   13654:	00800c04 	movi	r2,48
   13658:	b5800c04 	addi	r22,r22,48
   1365c:	d8802345 	stb	r2,141(sp)
   13660:	dd802385 	stb	r22,142(sp)
   13664:	d88023c4 	addi	r2,sp,143
   13668:	df0022c4 	addi	fp,sp,139
   1366c:	d8c03317 	ldw	r3,204(sp)
   13670:	1739c83a 	sub	fp,r2,fp
   13674:	d9003317 	ldw	r4,204(sp)
   13678:	e0c7883a 	add	r3,fp,r3
   1367c:	df003a15 	stw	fp,232(sp)
   13680:	d8c02b15 	stw	r3,172(sp)
   13684:	00800044 	movi	r2,1
   13688:	1100b30e 	bge	r2,r4,13958 <___vfprintf_internal_r+0x21d8>
   1368c:	d8c02b17 	ldw	r3,172(sp)
   13690:	18c00044 	addi	r3,r3,1
   13694:	d8c02b15 	stw	r3,172(sp)
   13698:	1805883a 	mov	r2,r3
   1369c:	1800ac16 	blt	r3,zero,13950 <___vfprintf_internal_r+0x21d0>
   136a0:	d8003215 	stw	zero,200(sp)
   136a4:	003e5d06 	br	1301c <__alt_data_end+0xfc01301c>
   136a8:	d9002d17 	ldw	r4,180(sp)
   136ac:	d9801e04 	addi	r6,sp,120
   136b0:	b80b883a 	mov	r5,r23
   136b4:	0019a8c0 	call	19a8c <__sprint_r>
   136b8:	1039351e 	bne	r2,zero,11b90 <__alt_data_end+0xfc011b90>
   136bc:	dc402617 	ldw	r17,152(sp)
   136c0:	d8c02017 	ldw	r3,128(sp)
   136c4:	d8801f17 	ldw	r2,124(sp)
   136c8:	da000404 	addi	r8,sp,16
   136cc:	003ed606 	br	13228 <__alt_data_end+0xfc013228>
   136d0:	182b883a 	mov	r21,r3
   136d4:	d8002a15 	stw	zero,168(sp)
   136d8:	00388c06 	br	1190c <__alt_data_end+0xfc01190c>
   136dc:	d8802a17 	ldw	r2,168(sp)
   136e0:	103e071e 	bne	r2,zero,12f00 <__alt_data_end+0xfc012f00>
   136e4:	dc002a15 	stw	r16,168(sp)
   136e8:	003e0506 	br	12f00 <__alt_data_end+0xfc012f00>
   136ec:	d9002a17 	ldw	r4,168(sp)
   136f0:	20c00044 	addi	r3,r4,1
   136f4:	003e0f06 	br	12f34 <__alt_data_end+0xfc012f34>
   136f8:	01400184 	movi	r5,6
   136fc:	d9402a15 	stw	r5,168(sp)
   13700:	003dff06 	br	12f00 <__alt_data_end+0xfc012f00>
   13704:	d8802104 	addi	r2,sp,132
   13708:	d8800315 	stw	r2,12(sp)
   1370c:	d8802504 	addi	r2,sp,148
   13710:	d8800215 	stw	r2,8(sp)
   13714:	d8802604 	addi	r2,sp,152
   13718:	d8800115 	stw	r2,4(sp)
   1371c:	d8802a17 	ldw	r2,168(sp)
   13720:	d9403617 	ldw	r5,216(sp)
   13724:	d9002d17 	ldw	r4,180(sp)
   13728:	d8800015 	stw	r2,0(sp)
   1372c:	01c000c4 	movi	r7,3
   13730:	980d883a 	mov	r6,r19
   13734:	da003d15 	stw	r8,244(sp)
   13738:	0013eb00 	call	13eb0 <_dtoa_r>
   1373c:	d8c02a17 	ldw	r3,168(sp)
   13740:	da003d17 	ldw	r8,244(sp)
   13744:	1021883a 	mov	r16,r2
   13748:	10f9883a 	add	fp,r2,r3
   1374c:	81000007 	ldb	r4,0(r16)
   13750:	00800c04 	movi	r2,48
   13754:	20805e26 	beq	r4,r2,138d0 <___vfprintf_internal_r+0x2150>
   13758:	d8c02617 	ldw	r3,152(sp)
   1375c:	e0f9883a 	add	fp,fp,r3
   13760:	003e0a06 	br	12f8c <__alt_data_end+0xfc012f8c>
   13764:	00c00b44 	movi	r3,45
   13768:	24e0003c 	xorhi	r19,r4,32768
   1376c:	d8c02905 	stb	r3,164(sp)
   13770:	003de906 	br	12f18 <__alt_data_end+0xfc012f18>
   13774:	d8c03217 	ldw	r3,200(sp)
   13778:	00c07a0e 	bge	zero,r3,13964 <___vfprintf_internal_r+0x21e4>
   1377c:	00800044 	movi	r2,1
   13780:	d9003317 	ldw	r4,204(sp)
   13784:	1105883a 	add	r2,r2,r4
   13788:	d8802b15 	stw	r2,172(sp)
   1378c:	10004e16 	blt	r2,zero,138c8 <___vfprintf_internal_r+0x2148>
   13790:	044019c4 	movi	r17,103
   13794:	003e2106 	br	1301c <__alt_data_end+0xfc01301c>
   13798:	d9002a17 	ldw	r4,168(sp)
   1379c:	d8802104 	addi	r2,sp,132
   137a0:	d8800315 	stw	r2,12(sp)
   137a4:	d9000015 	stw	r4,0(sp)
   137a8:	d8802504 	addi	r2,sp,148
   137ac:	d9403617 	ldw	r5,216(sp)
   137b0:	d9002d17 	ldw	r4,180(sp)
   137b4:	d8800215 	stw	r2,8(sp)
   137b8:	d8802604 	addi	r2,sp,152
   137bc:	d8800115 	stw	r2,4(sp)
   137c0:	01c000c4 	movi	r7,3
   137c4:	980d883a 	mov	r6,r19
   137c8:	da003d15 	stw	r8,244(sp)
   137cc:	0013eb00 	call	13eb0 <_dtoa_r>
   137d0:	d8c02a17 	ldw	r3,168(sp)
   137d4:	da003d17 	ldw	r8,244(sp)
   137d8:	1021883a 	mov	r16,r2
   137dc:	00801184 	movi	r2,70
   137e0:	80f9883a 	add	fp,r16,r3
   137e4:	88bfd926 	beq	r17,r2,1374c <__alt_data_end+0xfc01374c>
   137e8:	003de806 	br	12f8c <__alt_data_end+0xfc012f8c>
   137ec:	d9002a17 	ldw	r4,168(sp)
   137f0:	00c04d0e 	bge	zero,r3,13928 <___vfprintf_internal_r+0x21a8>
   137f4:	2000441e 	bne	r4,zero,13908 <___vfprintf_internal_r+0x2188>
   137f8:	9480004c 	andi	r18,r18,1
   137fc:	9000421e 	bne	r18,zero,13908 <___vfprintf_internal_r+0x2188>
   13800:	1805883a 	mov	r2,r3
   13804:	18006f16 	blt	r3,zero,139c4 <___vfprintf_internal_r+0x2244>
   13808:	d8c03217 	ldw	r3,200(sp)
   1380c:	d8c02b15 	stw	r3,172(sp)
   13810:	003e0206 	br	1301c <__alt_data_end+0xfc01301c>
   13814:	df0022c4 	addi	fp,sp,139
   13818:	dc002a15 	stw	r16,168(sp)
   1381c:	4027883a 	mov	r19,r8
   13820:	e021883a 	mov	r16,fp
   13824:	b009883a 	mov	r4,r22
   13828:	01400284 	movi	r5,10
   1382c:	000cc780 	call	cc78 <__modsi3>
   13830:	10800c04 	addi	r2,r2,48
   13834:	843fffc4 	addi	r16,r16,-1
   13838:	b009883a 	mov	r4,r22
   1383c:	01400284 	movi	r5,10
   13840:	80800005 	stb	r2,0(r16)
   13844:	000cbf40 	call	cbf4 <__divsi3>
   13848:	102d883a 	mov	r22,r2
   1384c:	00800244 	movi	r2,9
   13850:	15bff416 	blt	r2,r22,13824 <__alt_data_end+0xfc013824>
   13854:	9811883a 	mov	r8,r19
   13858:	b0800c04 	addi	r2,r22,48
   1385c:	8027883a 	mov	r19,r16
   13860:	997fffc4 	addi	r5,r19,-1
   13864:	98bfffc5 	stb	r2,-1(r19)
   13868:	dc002a17 	ldw	r16,168(sp)
   1386c:	2f006d2e 	bgeu	r5,fp,13a24 <___vfprintf_internal_r+0x22a4>
   13870:	d9c02384 	addi	r7,sp,142
   13874:	3ccfc83a 	sub	r7,r7,r19
   13878:	d9002344 	addi	r4,sp,141
   1387c:	e1cf883a 	add	r7,fp,r7
   13880:	00000106 	br	13888 <___vfprintf_internal_r+0x2108>
   13884:	28800003 	ldbu	r2,0(r5)
   13888:	20800005 	stb	r2,0(r4)
   1388c:	21000044 	addi	r4,r4,1
   13890:	29400044 	addi	r5,r5,1
   13894:	393ffb1e 	bne	r7,r4,13884 <__alt_data_end+0xfc013884>
   13898:	d8802304 	addi	r2,sp,140
   1389c:	14c5c83a 	sub	r2,r2,r19
   138a0:	d8c02344 	addi	r3,sp,141
   138a4:	1885883a 	add	r2,r3,r2
   138a8:	003f7006 	br	1366c <__alt_data_end+0xfc01366c>
   138ac:	0005883a 	mov	r2,zero
   138b0:	003f0f06 	br	134f0 <__alt_data_end+0xfc0134f0>
   138b4:	d8c03217 	ldw	r3,200(sp)
   138b8:	18c00044 	addi	r3,r3,1
   138bc:	d8c02b15 	stw	r3,172(sp)
   138c0:	1805883a 	mov	r2,r3
   138c4:	183fb20e 	bge	r3,zero,13790 <__alt_data_end+0xfc013790>
   138c8:	0005883a 	mov	r2,zero
   138cc:	003fb006 	br	13790 <__alt_data_end+0xfc013790>
   138d0:	d9003617 	ldw	r4,216(sp)
   138d4:	000d883a 	mov	r6,zero
   138d8:	000f883a 	mov	r7,zero
   138dc:	980b883a 	mov	r5,r19
   138e0:	d8c03c15 	stw	r3,240(sp)
   138e4:	da003d15 	stw	r8,244(sp)
   138e8:	001d8100 	call	1d810 <__eqdf2>
   138ec:	d8c03c17 	ldw	r3,240(sp)
   138f0:	da003d17 	ldw	r8,244(sp)
   138f4:	103f9826 	beq	r2,zero,13758 <__alt_data_end+0xfc013758>
   138f8:	00800044 	movi	r2,1
   138fc:	10c7c83a 	sub	r3,r2,r3
   13900:	d8c02615 	stw	r3,152(sp)
   13904:	003f9506 	br	1375c <__alt_data_end+0xfc01375c>
   13908:	d9002a17 	ldw	r4,168(sp)
   1390c:	d8c03217 	ldw	r3,200(sp)
   13910:	20800044 	addi	r2,r4,1
   13914:	1885883a 	add	r2,r3,r2
   13918:	d8802b15 	stw	r2,172(sp)
   1391c:	103dbf0e 	bge	r2,zero,1301c <__alt_data_end+0xfc01301c>
   13920:	0005883a 	mov	r2,zero
   13924:	003dbd06 	br	1301c <__alt_data_end+0xfc01301c>
   13928:	2000201e 	bne	r4,zero,139ac <___vfprintf_internal_r+0x222c>
   1392c:	9480004c 	andi	r18,r18,1
   13930:	90001e1e 	bne	r18,zero,139ac <___vfprintf_internal_r+0x222c>
   13934:	00800044 	movi	r2,1
   13938:	d8802b15 	stw	r2,172(sp)
   1393c:	003db706 	br	1301c <__alt_data_end+0xfc01301c>
   13940:	00800b44 	movi	r2,45
   13944:	05adc83a 	sub	r22,zero,r22
   13948:	d8802305 	stb	r2,140(sp)
   1394c:	003f3f06 	br	1364c <__alt_data_end+0xfc01364c>
   13950:	0005883a 	mov	r2,zero
   13954:	003f5206 	br	136a0 <__alt_data_end+0xfc0136a0>
   13958:	90a4703a 	and	r18,r18,r2
   1395c:	903f4e26 	beq	r18,zero,13698 <__alt_data_end+0xfc013698>
   13960:	003f4a06 	br	1368c <__alt_data_end+0xfc01368c>
   13964:	00800084 	movi	r2,2
   13968:	10c5c83a 	sub	r2,r2,r3
   1396c:	003f8406 	br	13780 <__alt_data_end+0xfc013780>
   13970:	d9402e17 	ldw	r5,184(sp)
   13974:	d9002e17 	ldw	r4,184(sp)
   13978:	ac400043 	ldbu	r17,1(r21)
   1397c:	29400017 	ldw	r5,0(r5)
   13980:	20800104 	addi	r2,r4,4
   13984:	d8802e15 	stw	r2,184(sp)
   13988:	d9402a15 	stw	r5,168(sp)
   1398c:	182b883a 	mov	r21,r3
   13990:	283e7b0e 	bge	r5,zero,13380 <__alt_data_end+0xfc013380>
   13994:	8c403fcc 	andi	r17,r17,255
   13998:	017fffc4 	movi	r5,-1
   1399c:	8c40201c 	xori	r17,r17,128
   139a0:	d9402a15 	stw	r5,168(sp)
   139a4:	8c7fe004 	addi	r17,r17,-128
   139a8:	0037d706 	br	11908 <__alt_data_end+0xfc011908>
   139ac:	d8c02a17 	ldw	r3,168(sp)
   139b0:	18c00084 	addi	r3,r3,2
   139b4:	d8c02b15 	stw	r3,172(sp)
   139b8:	1805883a 	mov	r2,r3
   139bc:	183d970e 	bge	r3,zero,1301c <__alt_data_end+0xfc01301c>
   139c0:	003fd706 	br	13920 <__alt_data_end+0xfc013920>
   139c4:	0005883a 	mov	r2,zero
   139c8:	003f8f06 	br	13808 <__alt_data_end+0xfc013808>
   139cc:	9080004c 	andi	r2,r18,1
   139d0:	103f821e 	bne	r2,zero,137dc <__alt_data_end+0xfc0137dc>
   139d4:	d8802117 	ldw	r2,132(sp)
   139d8:	1405c83a 	sub	r2,r2,r16
   139dc:	d8803315 	stw	r2,204(sp)
   139e0:	b47ef426 	beq	r22,r17,135b4 <__alt_data_end+0xfc0135b4>
   139e4:	dd802617 	ldw	r22,152(sp)
   139e8:	003f1206 	br	13634 <__alt_data_end+0xfc013634>
   139ec:	d8c02b03 	ldbu	r3,172(sp)
   139f0:	d8c02785 	stb	r3,158(sp)
   139f4:	0038df06 	br	11d74 <__alt_data_end+0xfc011d74>
   139f8:	d8c02b03 	ldbu	r3,172(sp)
   139fc:	d8c02785 	stb	r3,158(sp)
   13a00:	0038aa06 	br	11cac <__alt_data_end+0xfc011cac>
   13a04:	d8c02b03 	ldbu	r3,172(sp)
   13a08:	d8c02785 	stb	r3,158(sp)
   13a0c:	003a4306 	br	1231c <__alt_data_end+0xfc01231c>
   13a10:	d8c02b03 	ldbu	r3,172(sp)
   13a14:	d8c02785 	stb	r3,158(sp)
   13a18:	003af506 	br	125f0 <__alt_data_end+0xfc0125f0>
   13a1c:	0005883a 	mov	r2,zero
   13a20:	003d7b06 	br	13010 <__alt_data_end+0xfc013010>
   13a24:	d8802344 	addi	r2,sp,141
   13a28:	003f1006 	br	1366c <__alt_data_end+0xfc01366c>
   13a2c:	d8c02b03 	ldbu	r3,172(sp)
   13a30:	d8c02785 	stb	r3,158(sp)
   13a34:	0038fd06 	br	11e2c <__alt_data_end+0xfc011e2c>
   13a38:	d8c02b03 	ldbu	r3,172(sp)
   13a3c:	d8c02785 	stb	r3,158(sp)
   13a40:	003a9706 	br	124a0 <__alt_data_end+0xfc0124a0>
   13a44:	d8c02b03 	ldbu	r3,172(sp)
   13a48:	d8c02785 	stb	r3,158(sp)
   13a4c:	003a1806 	br	122b0 <__alt_data_end+0xfc0122b0>
   13a50:	d8c02b03 	ldbu	r3,172(sp)
   13a54:	d8c02785 	stb	r3,158(sp)
   13a58:	003abe06 	br	12554 <__alt_data_end+0xfc012554>

00013a5c <__vfprintf_internal>:
   13a5c:	008000f4 	movhi	r2,3
   13a60:	10b74b04 	addi	r2,r2,-8916
   13a64:	300f883a 	mov	r7,r6
   13a68:	280d883a 	mov	r6,r5
   13a6c:	200b883a 	mov	r5,r4
   13a70:	11000017 	ldw	r4,0(r2)
   13a74:	00117801 	jmpi	11780 <___vfprintf_internal_r>

00013a78 <__sbprintf>:
   13a78:	2880030b 	ldhu	r2,12(r5)
   13a7c:	2ac01917 	ldw	r11,100(r5)
   13a80:	2a80038b 	ldhu	r10,14(r5)
   13a84:	2a400717 	ldw	r9,28(r5)
   13a88:	2a000917 	ldw	r8,36(r5)
   13a8c:	defee204 	addi	sp,sp,-1144
   13a90:	00c10004 	movi	r3,1024
   13a94:	dc011a15 	stw	r16,1128(sp)
   13a98:	10bfff4c 	andi	r2,r2,65533
   13a9c:	2821883a 	mov	r16,r5
   13aa0:	d8cb883a 	add	r5,sp,r3
   13aa4:	dc811c15 	stw	r18,1136(sp)
   13aa8:	dc411b15 	stw	r17,1132(sp)
   13aac:	dfc11d15 	stw	ra,1140(sp)
   13ab0:	2025883a 	mov	r18,r4
   13ab4:	d881030d 	sth	r2,1036(sp)
   13ab8:	dac11915 	stw	r11,1124(sp)
   13abc:	da81038d 	sth	r10,1038(sp)
   13ac0:	da410715 	stw	r9,1052(sp)
   13ac4:	da010915 	stw	r8,1060(sp)
   13ac8:	dec10015 	stw	sp,1024(sp)
   13acc:	dec10415 	stw	sp,1040(sp)
   13ad0:	d8c10215 	stw	r3,1032(sp)
   13ad4:	d8c10515 	stw	r3,1044(sp)
   13ad8:	d8010615 	stw	zero,1048(sp)
   13adc:	00117800 	call	11780 <___vfprintf_internal_r>
   13ae0:	1023883a 	mov	r17,r2
   13ae4:	10000416 	blt	r2,zero,13af8 <__sbprintf+0x80>
   13ae8:	d9410004 	addi	r5,sp,1024
   13aec:	9009883a 	mov	r4,r18
   13af0:	00157540 	call	15754 <_fflush_r>
   13af4:	10000d1e 	bne	r2,zero,13b2c <__sbprintf+0xb4>
   13af8:	d881030b 	ldhu	r2,1036(sp)
   13afc:	1080100c 	andi	r2,r2,64
   13b00:	10000326 	beq	r2,zero,13b10 <__sbprintf+0x98>
   13b04:	8080030b 	ldhu	r2,12(r16)
   13b08:	10801014 	ori	r2,r2,64
   13b0c:	8080030d 	sth	r2,12(r16)
   13b10:	8805883a 	mov	r2,r17
   13b14:	dfc11d17 	ldw	ra,1140(sp)
   13b18:	dc811c17 	ldw	r18,1136(sp)
   13b1c:	dc411b17 	ldw	r17,1132(sp)
   13b20:	dc011a17 	ldw	r16,1128(sp)
   13b24:	dec11e04 	addi	sp,sp,1144
   13b28:	f800283a 	ret
   13b2c:	047fffc4 	movi	r17,-1
   13b30:	003ff106 	br	13af8 <__alt_data_end+0xfc013af8>

00013b34 <__swsetup_r>:
   13b34:	008000f4 	movhi	r2,3
   13b38:	defffd04 	addi	sp,sp,-12
   13b3c:	10b74b04 	addi	r2,r2,-8916
   13b40:	dc400115 	stw	r17,4(sp)
   13b44:	2023883a 	mov	r17,r4
   13b48:	11000017 	ldw	r4,0(r2)
   13b4c:	dc000015 	stw	r16,0(sp)
   13b50:	dfc00215 	stw	ra,8(sp)
   13b54:	2821883a 	mov	r16,r5
   13b58:	20000226 	beq	r4,zero,13b64 <__swsetup_r+0x30>
   13b5c:	20800e17 	ldw	r2,56(r4)
   13b60:	10003126 	beq	r2,zero,13c28 <__swsetup_r+0xf4>
   13b64:	8080030b 	ldhu	r2,12(r16)
   13b68:	10c0020c 	andi	r3,r2,8
   13b6c:	1009883a 	mov	r4,r2
   13b70:	18000f26 	beq	r3,zero,13bb0 <__swsetup_r+0x7c>
   13b74:	80c00417 	ldw	r3,16(r16)
   13b78:	18001526 	beq	r3,zero,13bd0 <__swsetup_r+0x9c>
   13b7c:	1100004c 	andi	r4,r2,1
   13b80:	20001c1e 	bne	r4,zero,13bf4 <__swsetup_r+0xc0>
   13b84:	1080008c 	andi	r2,r2,2
   13b88:	1000291e 	bne	r2,zero,13c30 <__swsetup_r+0xfc>
   13b8c:	80800517 	ldw	r2,20(r16)
   13b90:	80800215 	stw	r2,8(r16)
   13b94:	18001c26 	beq	r3,zero,13c08 <__swsetup_r+0xd4>
   13b98:	0005883a 	mov	r2,zero
   13b9c:	dfc00217 	ldw	ra,8(sp)
   13ba0:	dc400117 	ldw	r17,4(sp)
   13ba4:	dc000017 	ldw	r16,0(sp)
   13ba8:	dec00304 	addi	sp,sp,12
   13bac:	f800283a 	ret
   13bb0:	2080040c 	andi	r2,r4,16
   13bb4:	10002e26 	beq	r2,zero,13c70 <__swsetup_r+0x13c>
   13bb8:	2080010c 	andi	r2,r4,4
   13bbc:	10001e1e 	bne	r2,zero,13c38 <__swsetup_r+0x104>
   13bc0:	80c00417 	ldw	r3,16(r16)
   13bc4:	20800214 	ori	r2,r4,8
   13bc8:	8080030d 	sth	r2,12(r16)
   13bcc:	183feb1e 	bne	r3,zero,13b7c <__alt_data_end+0xfc013b7c>
   13bd0:	1100a00c 	andi	r4,r2,640
   13bd4:	01408004 	movi	r5,512
   13bd8:	217fe826 	beq	r4,r5,13b7c <__alt_data_end+0xfc013b7c>
   13bdc:	800b883a 	mov	r5,r16
   13be0:	8809883a 	mov	r4,r17
   13be4:	00166f00 	call	166f0 <__smakebuf_r>
   13be8:	8080030b 	ldhu	r2,12(r16)
   13bec:	80c00417 	ldw	r3,16(r16)
   13bf0:	003fe206 	br	13b7c <__alt_data_end+0xfc013b7c>
   13bf4:	80800517 	ldw	r2,20(r16)
   13bf8:	80000215 	stw	zero,8(r16)
   13bfc:	0085c83a 	sub	r2,zero,r2
   13c00:	80800615 	stw	r2,24(r16)
   13c04:	183fe41e 	bne	r3,zero,13b98 <__alt_data_end+0xfc013b98>
   13c08:	80c0030b 	ldhu	r3,12(r16)
   13c0c:	0005883a 	mov	r2,zero
   13c10:	1900200c 	andi	r4,r3,128
   13c14:	203fe126 	beq	r4,zero,13b9c <__alt_data_end+0xfc013b9c>
   13c18:	18c01014 	ori	r3,r3,64
   13c1c:	80c0030d 	sth	r3,12(r16)
   13c20:	00bfffc4 	movi	r2,-1
   13c24:	003fdd06 	br	13b9c <__alt_data_end+0xfc013b9c>
   13c28:	0015b400 	call	15b40 <__sinit>
   13c2c:	003fcd06 	br	13b64 <__alt_data_end+0xfc013b64>
   13c30:	0005883a 	mov	r2,zero
   13c34:	003fd606 	br	13b90 <__alt_data_end+0xfc013b90>
   13c38:	81400c17 	ldw	r5,48(r16)
   13c3c:	28000626 	beq	r5,zero,13c58 <__swsetup_r+0x124>
   13c40:	80801004 	addi	r2,r16,64
   13c44:	28800326 	beq	r5,r2,13c54 <__swsetup_r+0x120>
   13c48:	8809883a 	mov	r4,r17
   13c4c:	0015cb40 	call	15cb4 <_free_r>
   13c50:	8100030b 	ldhu	r4,12(r16)
   13c54:	80000c15 	stw	zero,48(r16)
   13c58:	80c00417 	ldw	r3,16(r16)
   13c5c:	00bff6c4 	movi	r2,-37
   13c60:	1108703a 	and	r4,r2,r4
   13c64:	80000115 	stw	zero,4(r16)
   13c68:	80c00015 	stw	r3,0(r16)
   13c6c:	003fd506 	br	13bc4 <__alt_data_end+0xfc013bc4>
   13c70:	00800244 	movi	r2,9
   13c74:	88800015 	stw	r2,0(r17)
   13c78:	20801014 	ori	r2,r4,64
   13c7c:	8080030d 	sth	r2,12(r16)
   13c80:	00bfffc4 	movi	r2,-1
   13c84:	003fc506 	br	13b9c <__alt_data_end+0xfc013b9c>

00013c88 <quorem>:
   13c88:	defff204 	addi	sp,sp,-56
   13c8c:	ddc00b15 	stw	r23,44(sp)
   13c90:	20800417 	ldw	r2,16(r4)
   13c94:	2dc00417 	ldw	r23,16(r5)
   13c98:	dfc00d15 	stw	ra,52(sp)
   13c9c:	df000c15 	stw	fp,48(sp)
   13ca0:	dd800a15 	stw	r22,40(sp)
   13ca4:	dd400915 	stw	r21,36(sp)
   13ca8:	dd000815 	stw	r20,32(sp)
   13cac:	dcc00715 	stw	r19,28(sp)
   13cb0:	dc800615 	stw	r18,24(sp)
   13cb4:	dc400515 	stw	r17,20(sp)
   13cb8:	dc000415 	stw	r16,16(sp)
   13cbc:	15c07a16 	blt	r2,r23,13ea8 <quorem+0x220>
   13cc0:	bdffffc4 	addi	r23,r23,-1
   13cc4:	bde9883a 	add	r20,r23,r23
   13cc8:	28c00504 	addi	r3,r5,20
   13ccc:	a529883a 	add	r20,r20,r20
   13cd0:	1d39883a 	add	fp,r3,r20
   13cd4:	24c00504 	addi	r19,r4,20
   13cd8:	d9400215 	stw	r5,8(sp)
   13cdc:	9d29883a 	add	r20,r19,r20
   13ce0:	e1400017 	ldw	r5,0(fp)
   13ce4:	d9000015 	stw	r4,0(sp)
   13ce8:	a1000017 	ldw	r4,0(r20)
   13cec:	29400044 	addi	r5,r5,1
   13cf0:	d8c00115 	stw	r3,4(sp)
   13cf4:	dd000315 	stw	r20,12(sp)
   13cf8:	000ccec0 	call	ccec <__udivsi3>
   13cfc:	1025883a 	mov	r18,r2
   13d00:	10003026 	beq	r2,zero,13dc4 <quorem+0x13c>
   13d04:	dc400117 	ldw	r17,4(sp)
   13d08:	9829883a 	mov	r20,r19
   13d0c:	002d883a 	mov	r22,zero
   13d10:	0021883a 	mov	r16,zero
   13d14:	8d400017 	ldw	r21,0(r17)
   13d18:	900b883a 	mov	r5,r18
   13d1c:	8c400104 	addi	r17,r17,4
   13d20:	a93fffcc 	andi	r4,r21,65535
   13d24:	000cda80 	call	cda8 <__mulsi3>
   13d28:	a808d43a 	srli	r4,r21,16
   13d2c:	900b883a 	mov	r5,r18
   13d30:	15ad883a 	add	r22,r2,r22
   13d34:	000cda80 	call	cda8 <__mulsi3>
   13d38:	a1000017 	ldw	r4,0(r20)
   13d3c:	b00cd43a 	srli	r6,r22,16
   13d40:	b0ffffcc 	andi	r3,r22,65535
   13d44:	217fffcc 	andi	r5,r4,65535
   13d48:	2c21883a 	add	r16,r5,r16
   13d4c:	80c7c83a 	sub	r3,r16,r3
   13d50:	2008d43a 	srli	r4,r4,16
   13d54:	1185883a 	add	r2,r2,r6
   13d58:	1821d43a 	srai	r16,r3,16
   13d5c:	117fffcc 	andi	r5,r2,65535
   13d60:	2149c83a 	sub	r4,r4,r5
   13d64:	2421883a 	add	r16,r4,r16
   13d68:	8008943a 	slli	r4,r16,16
   13d6c:	18ffffcc 	andi	r3,r3,65535
   13d70:	102cd43a 	srli	r22,r2,16
   13d74:	20c8b03a 	or	r4,r4,r3
   13d78:	a1000015 	stw	r4,0(r20)
   13d7c:	8021d43a 	srai	r16,r16,16
   13d80:	a5000104 	addi	r20,r20,4
   13d84:	e47fe32e 	bgeu	fp,r17,13d14 <__alt_data_end+0xfc013d14>
   13d88:	d8c00317 	ldw	r3,12(sp)
   13d8c:	18800017 	ldw	r2,0(r3)
   13d90:	10000c1e 	bne	r2,zero,13dc4 <quorem+0x13c>
   13d94:	18bfff04 	addi	r2,r3,-4
   13d98:	9880082e 	bgeu	r19,r2,13dbc <quorem+0x134>
   13d9c:	18ffff17 	ldw	r3,-4(r3)
   13da0:	18000326 	beq	r3,zero,13db0 <quorem+0x128>
   13da4:	00000506 	br	13dbc <quorem+0x134>
   13da8:	10c00017 	ldw	r3,0(r2)
   13dac:	1800031e 	bne	r3,zero,13dbc <quorem+0x134>
   13db0:	10bfff04 	addi	r2,r2,-4
   13db4:	bdffffc4 	addi	r23,r23,-1
   13db8:	98bffb36 	bltu	r19,r2,13da8 <__alt_data_end+0xfc013da8>
   13dbc:	d8c00017 	ldw	r3,0(sp)
   13dc0:	1dc00415 	stw	r23,16(r3)
   13dc4:	d9400217 	ldw	r5,8(sp)
   13dc8:	d9000017 	ldw	r4,0(sp)
   13dcc:	00174700 	call	17470 <__mcmp>
   13dd0:	10002816 	blt	r2,zero,13e74 <quorem+0x1ec>
   13dd4:	dc400117 	ldw	r17,4(sp)
   13dd8:	94800044 	addi	r18,r18,1
   13ddc:	980d883a 	mov	r6,r19
   13de0:	0007883a 	mov	r3,zero
   13de4:	31000017 	ldw	r4,0(r6)
   13de8:	89400017 	ldw	r5,0(r17)
   13dec:	31800104 	addi	r6,r6,4
   13df0:	20bfffcc 	andi	r2,r4,65535
   13df4:	10c7883a 	add	r3,r2,r3
   13df8:	28bfffcc 	andi	r2,r5,65535
   13dfc:	1885c83a 	sub	r2,r3,r2
   13e00:	280ad43a 	srli	r5,r5,16
   13e04:	2008d43a 	srli	r4,r4,16
   13e08:	1007d43a 	srai	r3,r2,16
   13e0c:	10bfffcc 	andi	r2,r2,65535
   13e10:	2149c83a 	sub	r4,r4,r5
   13e14:	20c9883a 	add	r4,r4,r3
   13e18:	200a943a 	slli	r5,r4,16
   13e1c:	8c400104 	addi	r17,r17,4
   13e20:	2007d43a 	srai	r3,r4,16
   13e24:	2884b03a 	or	r2,r5,r2
   13e28:	30bfff15 	stw	r2,-4(r6)
   13e2c:	e47fed2e 	bgeu	fp,r17,13de4 <__alt_data_end+0xfc013de4>
   13e30:	bdc5883a 	add	r2,r23,r23
   13e34:	1085883a 	add	r2,r2,r2
   13e38:	9887883a 	add	r3,r19,r2
   13e3c:	18800017 	ldw	r2,0(r3)
   13e40:	10000c1e 	bne	r2,zero,13e74 <quorem+0x1ec>
   13e44:	18bfff04 	addi	r2,r3,-4
   13e48:	9880082e 	bgeu	r19,r2,13e6c <quorem+0x1e4>
   13e4c:	18ffff17 	ldw	r3,-4(r3)
   13e50:	18000326 	beq	r3,zero,13e60 <quorem+0x1d8>
   13e54:	00000506 	br	13e6c <quorem+0x1e4>
   13e58:	10c00017 	ldw	r3,0(r2)
   13e5c:	1800031e 	bne	r3,zero,13e6c <quorem+0x1e4>
   13e60:	10bfff04 	addi	r2,r2,-4
   13e64:	bdffffc4 	addi	r23,r23,-1
   13e68:	98bffb36 	bltu	r19,r2,13e58 <__alt_data_end+0xfc013e58>
   13e6c:	d8c00017 	ldw	r3,0(sp)
   13e70:	1dc00415 	stw	r23,16(r3)
   13e74:	9005883a 	mov	r2,r18
   13e78:	dfc00d17 	ldw	ra,52(sp)
   13e7c:	df000c17 	ldw	fp,48(sp)
   13e80:	ddc00b17 	ldw	r23,44(sp)
   13e84:	dd800a17 	ldw	r22,40(sp)
   13e88:	dd400917 	ldw	r21,36(sp)
   13e8c:	dd000817 	ldw	r20,32(sp)
   13e90:	dcc00717 	ldw	r19,28(sp)
   13e94:	dc800617 	ldw	r18,24(sp)
   13e98:	dc400517 	ldw	r17,20(sp)
   13e9c:	dc000417 	ldw	r16,16(sp)
   13ea0:	dec00e04 	addi	sp,sp,56
   13ea4:	f800283a 	ret
   13ea8:	0005883a 	mov	r2,zero
   13eac:	003ff206 	br	13e78 <__alt_data_end+0xfc013e78>

00013eb0 <_dtoa_r>:
   13eb0:	20801017 	ldw	r2,64(r4)
   13eb4:	deffde04 	addi	sp,sp,-136
   13eb8:	df002015 	stw	fp,128(sp)
   13ebc:	dcc01b15 	stw	r19,108(sp)
   13ec0:	dc801a15 	stw	r18,104(sp)
   13ec4:	dc401915 	stw	r17,100(sp)
   13ec8:	dc001815 	stw	r16,96(sp)
   13ecc:	dfc02115 	stw	ra,132(sp)
   13ed0:	ddc01f15 	stw	r23,124(sp)
   13ed4:	dd801e15 	stw	r22,120(sp)
   13ed8:	dd401d15 	stw	r21,116(sp)
   13edc:	dd001c15 	stw	r20,112(sp)
   13ee0:	d9c00315 	stw	r7,12(sp)
   13ee4:	2039883a 	mov	fp,r4
   13ee8:	3023883a 	mov	r17,r6
   13eec:	2825883a 	mov	r18,r5
   13ef0:	dc002417 	ldw	r16,144(sp)
   13ef4:	3027883a 	mov	r19,r6
   13ef8:	10000826 	beq	r2,zero,13f1c <_dtoa_r+0x6c>
   13efc:	21801117 	ldw	r6,68(r4)
   13f00:	00c00044 	movi	r3,1
   13f04:	100b883a 	mov	r5,r2
   13f08:	1986983a 	sll	r3,r3,r6
   13f0c:	11800115 	stw	r6,4(r2)
   13f10:	10c00215 	stw	r3,8(r2)
   13f14:	0016b940 	call	16b94 <_Bfree>
   13f18:	e0001015 	stw	zero,64(fp)
   13f1c:	88002e16 	blt	r17,zero,13fd8 <_dtoa_r+0x128>
   13f20:	80000015 	stw	zero,0(r16)
   13f24:	889ffc2c 	andhi	r2,r17,32752
   13f28:	00dffc34 	movhi	r3,32752
   13f2c:	10c01c26 	beq	r2,r3,13fa0 <_dtoa_r+0xf0>
   13f30:	000d883a 	mov	r6,zero
   13f34:	000f883a 	mov	r7,zero
   13f38:	9009883a 	mov	r4,r18
   13f3c:	980b883a 	mov	r5,r19
   13f40:	001d8100 	call	1d810 <__eqdf2>
   13f44:	10002b1e 	bne	r2,zero,13ff4 <_dtoa_r+0x144>
   13f48:	d9c02317 	ldw	r7,140(sp)
   13f4c:	00800044 	movi	r2,1
   13f50:	38800015 	stw	r2,0(r7)
   13f54:	d8802517 	ldw	r2,148(sp)
   13f58:	10019e26 	beq	r2,zero,145d4 <_dtoa_r+0x724>
   13f5c:	d8c02517 	ldw	r3,148(sp)
   13f60:	008000f4 	movhi	r2,3
   13f64:	10aa5844 	addi	r2,r2,-22175
   13f68:	18800015 	stw	r2,0(r3)
   13f6c:	10bfffc4 	addi	r2,r2,-1
   13f70:	dfc02117 	ldw	ra,132(sp)
   13f74:	df002017 	ldw	fp,128(sp)
   13f78:	ddc01f17 	ldw	r23,124(sp)
   13f7c:	dd801e17 	ldw	r22,120(sp)
   13f80:	dd401d17 	ldw	r21,116(sp)
   13f84:	dd001c17 	ldw	r20,112(sp)
   13f88:	dcc01b17 	ldw	r19,108(sp)
   13f8c:	dc801a17 	ldw	r18,104(sp)
   13f90:	dc401917 	ldw	r17,100(sp)
   13f94:	dc001817 	ldw	r16,96(sp)
   13f98:	dec02204 	addi	sp,sp,136
   13f9c:	f800283a 	ret
   13fa0:	d8c02317 	ldw	r3,140(sp)
   13fa4:	0089c3c4 	movi	r2,9999
   13fa8:	18800015 	stw	r2,0(r3)
   13fac:	90017726 	beq	r18,zero,1458c <_dtoa_r+0x6dc>
   13fb0:	008000f4 	movhi	r2,3
   13fb4:	10aa6c04 	addi	r2,r2,-22096
   13fb8:	d9002517 	ldw	r4,148(sp)
   13fbc:	203fec26 	beq	r4,zero,13f70 <__alt_data_end+0xfc013f70>
   13fc0:	10c000c7 	ldb	r3,3(r2)
   13fc4:	1801781e 	bne	r3,zero,145a8 <_dtoa_r+0x6f8>
   13fc8:	10c000c4 	addi	r3,r2,3
   13fcc:	d9802517 	ldw	r6,148(sp)
   13fd0:	30c00015 	stw	r3,0(r6)
   13fd4:	003fe606 	br	13f70 <__alt_data_end+0xfc013f70>
   13fd8:	04e00034 	movhi	r19,32768
   13fdc:	9cffffc4 	addi	r19,r19,-1
   13fe0:	00800044 	movi	r2,1
   13fe4:	8ce6703a 	and	r19,r17,r19
   13fe8:	80800015 	stw	r2,0(r16)
   13fec:	9823883a 	mov	r17,r19
   13ff0:	003fcc06 	br	13f24 <__alt_data_end+0xfc013f24>
   13ff4:	d8800204 	addi	r2,sp,8
   13ff8:	d8800015 	stw	r2,0(sp)
   13ffc:	d9c00104 	addi	r7,sp,4
   14000:	900b883a 	mov	r5,r18
   14004:	980d883a 	mov	r6,r19
   14008:	e009883a 	mov	r4,fp
   1400c:	8820d53a 	srli	r16,r17,20
   14010:	001783c0 	call	1783c <__d2b>
   14014:	d8800915 	stw	r2,36(sp)
   14018:	8001651e 	bne	r16,zero,145b0 <_dtoa_r+0x700>
   1401c:	dd800217 	ldw	r22,8(sp)
   14020:	dc000117 	ldw	r16,4(sp)
   14024:	00800804 	movi	r2,32
   14028:	b421883a 	add	r16,r22,r16
   1402c:	80c10c84 	addi	r3,r16,1074
   14030:	10c2d10e 	bge	r2,r3,14b78 <_dtoa_r+0xcc8>
   14034:	00801004 	movi	r2,64
   14038:	81010484 	addi	r4,r16,1042
   1403c:	10c7c83a 	sub	r3,r2,r3
   14040:	9108d83a 	srl	r4,r18,r4
   14044:	88e2983a 	sll	r17,r17,r3
   14048:	2448b03a 	or	r4,r4,r17
   1404c:	001ed2c0 	call	1ed2c <__floatunsidf>
   14050:	017f8434 	movhi	r5,65040
   14054:	01800044 	movi	r6,1
   14058:	1009883a 	mov	r4,r2
   1405c:	194b883a 	add	r5,r3,r5
   14060:	843fffc4 	addi	r16,r16,-1
   14064:	d9801115 	stw	r6,68(sp)
   14068:	000d883a 	mov	r6,zero
   1406c:	01cffe34 	movhi	r7,16376
   14070:	001e2d40 	call	1e2d4 <__subdf3>
   14074:	0198dbf4 	movhi	r6,25455
   14078:	01cff4f4 	movhi	r7,16339
   1407c:	3190d844 	addi	r6,r6,17249
   14080:	39e1e9c4 	addi	r7,r7,-30809
   14084:	1009883a 	mov	r4,r2
   14088:	180b883a 	mov	r5,r3
   1408c:	001da680 	call	1da68 <__muldf3>
   14090:	01a2d874 	movhi	r6,35681
   14094:	01cff1f4 	movhi	r7,16327
   14098:	31b22cc4 	addi	r6,r6,-14157
   1409c:	39e28a04 	addi	r7,r7,-30168
   140a0:	180b883a 	mov	r5,r3
   140a4:	1009883a 	mov	r4,r2
   140a8:	001c5940 	call	1c594 <__adddf3>
   140ac:	8009883a 	mov	r4,r16
   140b0:	1029883a 	mov	r20,r2
   140b4:	1823883a 	mov	r17,r3
   140b8:	001ec500 	call	1ec50 <__floatsidf>
   140bc:	019427f4 	movhi	r6,20639
   140c0:	01cff4f4 	movhi	r7,16339
   140c4:	319e7ec4 	addi	r6,r6,31227
   140c8:	39d104c4 	addi	r7,r7,17427
   140cc:	1009883a 	mov	r4,r2
   140d0:	180b883a 	mov	r5,r3
   140d4:	001da680 	call	1da68 <__muldf3>
   140d8:	100d883a 	mov	r6,r2
   140dc:	180f883a 	mov	r7,r3
   140e0:	a009883a 	mov	r4,r20
   140e4:	880b883a 	mov	r5,r17
   140e8:	001c5940 	call	1c594 <__adddf3>
   140ec:	1009883a 	mov	r4,r2
   140f0:	180b883a 	mov	r5,r3
   140f4:	1029883a 	mov	r20,r2
   140f8:	1823883a 	mov	r17,r3
   140fc:	001ebd00 	call	1ebd0 <__fixdfsi>
   14100:	000d883a 	mov	r6,zero
   14104:	000f883a 	mov	r7,zero
   14108:	a009883a 	mov	r4,r20
   1410c:	880b883a 	mov	r5,r17
   14110:	d8800515 	stw	r2,20(sp)
   14114:	001d9740 	call	1d974 <__ledf2>
   14118:	10028716 	blt	r2,zero,14b38 <_dtoa_r+0xc88>
   1411c:	d8c00517 	ldw	r3,20(sp)
   14120:	00800584 	movi	r2,22
   14124:	10c27536 	bltu	r2,r3,14afc <_dtoa_r+0xc4c>
   14128:	180490fa 	slli	r2,r3,3
   1412c:	00c000f4 	movhi	r3,3
   14130:	18ea8704 	addi	r3,r3,-21988
   14134:	1885883a 	add	r2,r3,r2
   14138:	11000017 	ldw	r4,0(r2)
   1413c:	11400117 	ldw	r5,4(r2)
   14140:	900d883a 	mov	r6,r18
   14144:	980f883a 	mov	r7,r19
   14148:	001d8980 	call	1d898 <__gedf2>
   1414c:	00828d0e 	bge	zero,r2,14b84 <_dtoa_r+0xcd4>
   14150:	d9000517 	ldw	r4,20(sp)
   14154:	d8000e15 	stw	zero,56(sp)
   14158:	213fffc4 	addi	r4,r4,-1
   1415c:	d9000515 	stw	r4,20(sp)
   14160:	b42dc83a 	sub	r22,r22,r16
   14164:	b5bfffc4 	addi	r22,r22,-1
   14168:	b0026f16 	blt	r22,zero,14b28 <_dtoa_r+0xc78>
   1416c:	d8000815 	stw	zero,32(sp)
   14170:	d9c00517 	ldw	r7,20(sp)
   14174:	38026416 	blt	r7,zero,14b08 <_dtoa_r+0xc58>
   14178:	b1ed883a 	add	r22,r22,r7
   1417c:	d9c00d15 	stw	r7,52(sp)
   14180:	d8000a15 	stw	zero,40(sp)
   14184:	d9800317 	ldw	r6,12(sp)
   14188:	00800244 	movi	r2,9
   1418c:	11811436 	bltu	r2,r6,145e0 <_dtoa_r+0x730>
   14190:	00800144 	movi	r2,5
   14194:	1184e10e 	bge	r2,r6,1551c <_dtoa_r+0x166c>
   14198:	31bfff04 	addi	r6,r6,-4
   1419c:	d9800315 	stw	r6,12(sp)
   141a0:	0023883a 	mov	r17,zero
   141a4:	d9800317 	ldw	r6,12(sp)
   141a8:	008000c4 	movi	r2,3
   141ac:	30836726 	beq	r6,r2,14f4c <_dtoa_r+0x109c>
   141b0:	1183410e 	bge	r2,r6,14eb8 <_dtoa_r+0x1008>
   141b4:	d9c00317 	ldw	r7,12(sp)
   141b8:	00800104 	movi	r2,4
   141bc:	38827c26 	beq	r7,r2,14bb0 <_dtoa_r+0xd00>
   141c0:	00800144 	movi	r2,5
   141c4:	3884c41e 	bne	r7,r2,154d8 <_dtoa_r+0x1628>
   141c8:	00800044 	movi	r2,1
   141cc:	d8800b15 	stw	r2,44(sp)
   141d0:	d8c00517 	ldw	r3,20(sp)
   141d4:	d9002217 	ldw	r4,136(sp)
   141d8:	1907883a 	add	r3,r3,r4
   141dc:	19800044 	addi	r6,r3,1
   141e0:	d8c00c15 	stw	r3,48(sp)
   141e4:	d9800615 	stw	r6,24(sp)
   141e8:	0183a40e 	bge	zero,r6,1507c <_dtoa_r+0x11cc>
   141ec:	d9800617 	ldw	r6,24(sp)
   141f0:	3021883a 	mov	r16,r6
   141f4:	e0001115 	stw	zero,68(fp)
   141f8:	008005c4 	movi	r2,23
   141fc:	1184c92e 	bgeu	r2,r6,15524 <_dtoa_r+0x1674>
   14200:	00c00044 	movi	r3,1
   14204:	00800104 	movi	r2,4
   14208:	1085883a 	add	r2,r2,r2
   1420c:	11000504 	addi	r4,r2,20
   14210:	180b883a 	mov	r5,r3
   14214:	18c00044 	addi	r3,r3,1
   14218:	313ffb2e 	bgeu	r6,r4,14208 <__alt_data_end+0xfc014208>
   1421c:	e1401115 	stw	r5,68(fp)
   14220:	e009883a 	mov	r4,fp
   14224:	0016aec0 	call	16aec <_Balloc>
   14228:	d8800715 	stw	r2,28(sp)
   1422c:	e0801015 	stw	r2,64(fp)
   14230:	00800384 	movi	r2,14
   14234:	1400f736 	bltu	r2,r16,14614 <_dtoa_r+0x764>
   14238:	8800f626 	beq	r17,zero,14614 <_dtoa_r+0x764>
   1423c:	d9c00517 	ldw	r7,20(sp)
   14240:	01c39a0e 	bge	zero,r7,150ac <_dtoa_r+0x11fc>
   14244:	388003cc 	andi	r2,r7,15
   14248:	100490fa 	slli	r2,r2,3
   1424c:	382bd13a 	srai	r21,r7,4
   14250:	00c000f4 	movhi	r3,3
   14254:	18ea8704 	addi	r3,r3,-21988
   14258:	1885883a 	add	r2,r3,r2
   1425c:	a8c0040c 	andi	r3,r21,16
   14260:	12400017 	ldw	r9,0(r2)
   14264:	12000117 	ldw	r8,4(r2)
   14268:	18037926 	beq	r3,zero,15050 <_dtoa_r+0x11a0>
   1426c:	008000f4 	movhi	r2,3
   14270:	10aa7d04 	addi	r2,r2,-22028
   14274:	11800817 	ldw	r6,32(r2)
   14278:	11c00917 	ldw	r7,36(r2)
   1427c:	9009883a 	mov	r4,r18
   14280:	980b883a 	mov	r5,r19
   14284:	da001715 	stw	r8,92(sp)
   14288:	da401615 	stw	r9,88(sp)
   1428c:	001ce400 	call	1ce40 <__divdf3>
   14290:	da001717 	ldw	r8,92(sp)
   14294:	da401617 	ldw	r9,88(sp)
   14298:	ad4003cc 	andi	r21,r21,15
   1429c:	040000c4 	movi	r16,3
   142a0:	1023883a 	mov	r17,r2
   142a4:	1829883a 	mov	r20,r3
   142a8:	a8001126 	beq	r21,zero,142f0 <_dtoa_r+0x440>
   142ac:	05c000f4 	movhi	r23,3
   142b0:	bdea7d04 	addi	r23,r23,-22028
   142b4:	4805883a 	mov	r2,r9
   142b8:	4007883a 	mov	r3,r8
   142bc:	a980004c 	andi	r6,r21,1
   142c0:	1009883a 	mov	r4,r2
   142c4:	a82bd07a 	srai	r21,r21,1
   142c8:	180b883a 	mov	r5,r3
   142cc:	30000426 	beq	r6,zero,142e0 <_dtoa_r+0x430>
   142d0:	b9800017 	ldw	r6,0(r23)
   142d4:	b9c00117 	ldw	r7,4(r23)
   142d8:	84000044 	addi	r16,r16,1
   142dc:	001da680 	call	1da68 <__muldf3>
   142e0:	bdc00204 	addi	r23,r23,8
   142e4:	a83ff51e 	bne	r21,zero,142bc <__alt_data_end+0xfc0142bc>
   142e8:	1013883a 	mov	r9,r2
   142ec:	1811883a 	mov	r8,r3
   142f0:	480d883a 	mov	r6,r9
   142f4:	400f883a 	mov	r7,r8
   142f8:	8809883a 	mov	r4,r17
   142fc:	a00b883a 	mov	r5,r20
   14300:	001ce400 	call	1ce40 <__divdf3>
   14304:	d8800f15 	stw	r2,60(sp)
   14308:	d8c01015 	stw	r3,64(sp)
   1430c:	d8c00e17 	ldw	r3,56(sp)
   14310:	18000626 	beq	r3,zero,1432c <_dtoa_r+0x47c>
   14314:	d9000f17 	ldw	r4,60(sp)
   14318:	d9401017 	ldw	r5,64(sp)
   1431c:	000d883a 	mov	r6,zero
   14320:	01cffc34 	movhi	r7,16368
   14324:	001d9740 	call	1d974 <__ledf2>
   14328:	10040b16 	blt	r2,zero,15358 <_dtoa_r+0x14a8>
   1432c:	8009883a 	mov	r4,r16
   14330:	001ec500 	call	1ec50 <__floatsidf>
   14334:	d9800f17 	ldw	r6,60(sp)
   14338:	d9c01017 	ldw	r7,64(sp)
   1433c:	1009883a 	mov	r4,r2
   14340:	180b883a 	mov	r5,r3
   14344:	001da680 	call	1da68 <__muldf3>
   14348:	000d883a 	mov	r6,zero
   1434c:	01d00734 	movhi	r7,16412
   14350:	1009883a 	mov	r4,r2
   14354:	180b883a 	mov	r5,r3
   14358:	001c5940 	call	1c594 <__adddf3>
   1435c:	1021883a 	mov	r16,r2
   14360:	d8800617 	ldw	r2,24(sp)
   14364:	047f3034 	movhi	r17,64704
   14368:	1c63883a 	add	r17,r3,r17
   1436c:	10031826 	beq	r2,zero,14fd0 <_dtoa_r+0x1120>
   14370:	d8c00517 	ldw	r3,20(sp)
   14374:	db000617 	ldw	r12,24(sp)
   14378:	d8c01315 	stw	r3,76(sp)
   1437c:	d9000b17 	ldw	r4,44(sp)
   14380:	20038f26 	beq	r4,zero,151c0 <_dtoa_r+0x1310>
   14384:	60bfffc4 	addi	r2,r12,-1
   14388:	100490fa 	slli	r2,r2,3
   1438c:	00c000f4 	movhi	r3,3
   14390:	18ea8704 	addi	r3,r3,-21988
   14394:	1885883a 	add	r2,r3,r2
   14398:	11800017 	ldw	r6,0(r2)
   1439c:	11c00117 	ldw	r7,4(r2)
   143a0:	d8800717 	ldw	r2,28(sp)
   143a4:	0009883a 	mov	r4,zero
   143a8:	014ff834 	movhi	r5,16352
   143ac:	db001615 	stw	r12,88(sp)
   143b0:	15c00044 	addi	r23,r2,1
   143b4:	001ce400 	call	1ce40 <__divdf3>
   143b8:	800d883a 	mov	r6,r16
   143bc:	880f883a 	mov	r7,r17
   143c0:	1009883a 	mov	r4,r2
   143c4:	180b883a 	mov	r5,r3
   143c8:	001e2d40 	call	1e2d4 <__subdf3>
   143cc:	d9401017 	ldw	r5,64(sp)
   143d0:	d9000f17 	ldw	r4,60(sp)
   143d4:	102b883a 	mov	r21,r2
   143d8:	d8c01215 	stw	r3,72(sp)
   143dc:	001ebd00 	call	1ebd0 <__fixdfsi>
   143e0:	1009883a 	mov	r4,r2
   143e4:	1029883a 	mov	r20,r2
   143e8:	001ec500 	call	1ec50 <__floatsidf>
   143ec:	d9000f17 	ldw	r4,60(sp)
   143f0:	d9401017 	ldw	r5,64(sp)
   143f4:	100d883a 	mov	r6,r2
   143f8:	180f883a 	mov	r7,r3
   143fc:	001e2d40 	call	1e2d4 <__subdf3>
   14400:	1823883a 	mov	r17,r3
   14404:	d8c00717 	ldw	r3,28(sp)
   14408:	d9401217 	ldw	r5,72(sp)
   1440c:	a2000c04 	addi	r8,r20,48
   14410:	1021883a 	mov	r16,r2
   14414:	1a000005 	stb	r8,0(r3)
   14418:	800d883a 	mov	r6,r16
   1441c:	880f883a 	mov	r7,r17
   14420:	a809883a 	mov	r4,r21
   14424:	4029883a 	mov	r20,r8
   14428:	001d8980 	call	1d898 <__gedf2>
   1442c:	00841d16 	blt	zero,r2,154a4 <_dtoa_r+0x15f4>
   14430:	800d883a 	mov	r6,r16
   14434:	880f883a 	mov	r7,r17
   14438:	0009883a 	mov	r4,zero
   1443c:	014ffc34 	movhi	r5,16368
   14440:	001e2d40 	call	1e2d4 <__subdf3>
   14444:	d9401217 	ldw	r5,72(sp)
   14448:	100d883a 	mov	r6,r2
   1444c:	180f883a 	mov	r7,r3
   14450:	a809883a 	mov	r4,r21
   14454:	001d8980 	call	1d898 <__gedf2>
   14458:	db001617 	ldw	r12,88(sp)
   1445c:	00840e16 	blt	zero,r2,15498 <_dtoa_r+0x15e8>
   14460:	00800044 	movi	r2,1
   14464:	13006b0e 	bge	r2,r12,14614 <_dtoa_r+0x764>
   14468:	d9000717 	ldw	r4,28(sp)
   1446c:	dd800f15 	stw	r22,60(sp)
   14470:	dcc01015 	stw	r19,64(sp)
   14474:	2319883a 	add	r12,r4,r12
   14478:	dcc01217 	ldw	r19,72(sp)
   1447c:	602d883a 	mov	r22,r12
   14480:	dc801215 	stw	r18,72(sp)
   14484:	b825883a 	mov	r18,r23
   14488:	00000906 	br	144b0 <_dtoa_r+0x600>
   1448c:	001e2d40 	call	1e2d4 <__subdf3>
   14490:	a80d883a 	mov	r6,r21
   14494:	980f883a 	mov	r7,r19
   14498:	1009883a 	mov	r4,r2
   1449c:	180b883a 	mov	r5,r3
   144a0:	001d9740 	call	1d974 <__ledf2>
   144a4:	1003e816 	blt	r2,zero,15448 <_dtoa_r+0x1598>
   144a8:	b825883a 	mov	r18,r23
   144ac:	bd83e926 	beq	r23,r22,15454 <_dtoa_r+0x15a4>
   144b0:	a809883a 	mov	r4,r21
   144b4:	980b883a 	mov	r5,r19
   144b8:	000d883a 	mov	r6,zero
   144bc:	01d00934 	movhi	r7,16420
   144c0:	001da680 	call	1da68 <__muldf3>
   144c4:	000d883a 	mov	r6,zero
   144c8:	01d00934 	movhi	r7,16420
   144cc:	8009883a 	mov	r4,r16
   144d0:	880b883a 	mov	r5,r17
   144d4:	102b883a 	mov	r21,r2
   144d8:	1827883a 	mov	r19,r3
   144dc:	001da680 	call	1da68 <__muldf3>
   144e0:	180b883a 	mov	r5,r3
   144e4:	1009883a 	mov	r4,r2
   144e8:	1821883a 	mov	r16,r3
   144ec:	1023883a 	mov	r17,r2
   144f0:	001ebd00 	call	1ebd0 <__fixdfsi>
   144f4:	1009883a 	mov	r4,r2
   144f8:	1029883a 	mov	r20,r2
   144fc:	001ec500 	call	1ec50 <__floatsidf>
   14500:	8809883a 	mov	r4,r17
   14504:	800b883a 	mov	r5,r16
   14508:	100d883a 	mov	r6,r2
   1450c:	180f883a 	mov	r7,r3
   14510:	001e2d40 	call	1e2d4 <__subdf3>
   14514:	a5000c04 	addi	r20,r20,48
   14518:	a80d883a 	mov	r6,r21
   1451c:	980f883a 	mov	r7,r19
   14520:	1009883a 	mov	r4,r2
   14524:	180b883a 	mov	r5,r3
   14528:	95000005 	stb	r20,0(r18)
   1452c:	1021883a 	mov	r16,r2
   14530:	1823883a 	mov	r17,r3
   14534:	001d9740 	call	1d974 <__ledf2>
   14538:	bdc00044 	addi	r23,r23,1
   1453c:	800d883a 	mov	r6,r16
   14540:	880f883a 	mov	r7,r17
   14544:	0009883a 	mov	r4,zero
   14548:	014ffc34 	movhi	r5,16368
   1454c:	103fcf0e 	bge	r2,zero,1448c <__alt_data_end+0xfc01448c>
   14550:	d8c01317 	ldw	r3,76(sp)
   14554:	d8c00515 	stw	r3,20(sp)
   14558:	d9400917 	ldw	r5,36(sp)
   1455c:	e009883a 	mov	r4,fp
   14560:	0016b940 	call	16b94 <_Bfree>
   14564:	d9000517 	ldw	r4,20(sp)
   14568:	d9802317 	ldw	r6,140(sp)
   1456c:	d9c02517 	ldw	r7,148(sp)
   14570:	b8000005 	stb	zero,0(r23)
   14574:	20800044 	addi	r2,r4,1
   14578:	30800015 	stw	r2,0(r6)
   1457c:	3802aa26 	beq	r7,zero,15028 <_dtoa_r+0x1178>
   14580:	3dc00015 	stw	r23,0(r7)
   14584:	d8800717 	ldw	r2,28(sp)
   14588:	003e7906 	br	13f70 <__alt_data_end+0xfc013f70>
   1458c:	00800434 	movhi	r2,16
   14590:	10bfffc4 	addi	r2,r2,-1
   14594:	88a2703a 	and	r17,r17,r2
   14598:	883e851e 	bne	r17,zero,13fb0 <__alt_data_end+0xfc013fb0>
   1459c:	008000f4 	movhi	r2,3
   145a0:	10aa6904 	addi	r2,r2,-22108
   145a4:	003e8406 	br	13fb8 <__alt_data_end+0xfc013fb8>
   145a8:	10c00204 	addi	r3,r2,8
   145ac:	003e8706 	br	13fcc <__alt_data_end+0xfc013fcc>
   145b0:	01400434 	movhi	r5,16
   145b4:	297fffc4 	addi	r5,r5,-1
   145b8:	994a703a 	and	r5,r19,r5
   145bc:	9009883a 	mov	r4,r18
   145c0:	843f0044 	addi	r16,r16,-1023
   145c4:	294ffc34 	orhi	r5,r5,16368
   145c8:	dd800217 	ldw	r22,8(sp)
   145cc:	d8001115 	stw	zero,68(sp)
   145d0:	003ea506 	br	14068 <__alt_data_end+0xfc014068>
   145d4:	008000f4 	movhi	r2,3
   145d8:	10aa5804 	addi	r2,r2,-22176
   145dc:	003e6406 	br	13f70 <__alt_data_end+0xfc013f70>
   145e0:	e0001115 	stw	zero,68(fp)
   145e4:	000b883a 	mov	r5,zero
   145e8:	e009883a 	mov	r4,fp
   145ec:	0016aec0 	call	16aec <_Balloc>
   145f0:	01bfffc4 	movi	r6,-1
   145f4:	01c00044 	movi	r7,1
   145f8:	d8800715 	stw	r2,28(sp)
   145fc:	d9800c15 	stw	r6,48(sp)
   14600:	e0801015 	stw	r2,64(fp)
   14604:	d8000315 	stw	zero,12(sp)
   14608:	d9c00b15 	stw	r7,44(sp)
   1460c:	d9800615 	stw	r6,24(sp)
   14610:	d8002215 	stw	zero,136(sp)
   14614:	d8800117 	ldw	r2,4(sp)
   14618:	10008916 	blt	r2,zero,14840 <_dtoa_r+0x990>
   1461c:	d9000517 	ldw	r4,20(sp)
   14620:	00c00384 	movi	r3,14
   14624:	19008616 	blt	r3,r4,14840 <_dtoa_r+0x990>
   14628:	200490fa 	slli	r2,r4,3
   1462c:	00c000f4 	movhi	r3,3
   14630:	d9802217 	ldw	r6,136(sp)
   14634:	18ea8704 	addi	r3,r3,-21988
   14638:	1885883a 	add	r2,r3,r2
   1463c:	14000017 	ldw	r16,0(r2)
   14640:	14400117 	ldw	r17,4(r2)
   14644:	30016316 	blt	r6,zero,14bd4 <_dtoa_r+0xd24>
   14648:	800d883a 	mov	r6,r16
   1464c:	880f883a 	mov	r7,r17
   14650:	9009883a 	mov	r4,r18
   14654:	980b883a 	mov	r5,r19
   14658:	001ce400 	call	1ce40 <__divdf3>
   1465c:	180b883a 	mov	r5,r3
   14660:	1009883a 	mov	r4,r2
   14664:	001ebd00 	call	1ebd0 <__fixdfsi>
   14668:	1009883a 	mov	r4,r2
   1466c:	102b883a 	mov	r21,r2
   14670:	001ec500 	call	1ec50 <__floatsidf>
   14674:	800d883a 	mov	r6,r16
   14678:	880f883a 	mov	r7,r17
   1467c:	1009883a 	mov	r4,r2
   14680:	180b883a 	mov	r5,r3
   14684:	001da680 	call	1da68 <__muldf3>
   14688:	100d883a 	mov	r6,r2
   1468c:	180f883a 	mov	r7,r3
   14690:	9009883a 	mov	r4,r18
   14694:	980b883a 	mov	r5,r19
   14698:	001e2d40 	call	1e2d4 <__subdf3>
   1469c:	d9c00717 	ldw	r7,28(sp)
   146a0:	1009883a 	mov	r4,r2
   146a4:	a8800c04 	addi	r2,r21,48
   146a8:	38800005 	stb	r2,0(r7)
   146ac:	3dc00044 	addi	r23,r7,1
   146b0:	d9c00617 	ldw	r7,24(sp)
   146b4:	01800044 	movi	r6,1
   146b8:	180b883a 	mov	r5,r3
   146bc:	2005883a 	mov	r2,r4
   146c0:	39803826 	beq	r7,r6,147a4 <_dtoa_r+0x8f4>
   146c4:	000d883a 	mov	r6,zero
   146c8:	01d00934 	movhi	r7,16420
   146cc:	001da680 	call	1da68 <__muldf3>
   146d0:	000d883a 	mov	r6,zero
   146d4:	000f883a 	mov	r7,zero
   146d8:	1009883a 	mov	r4,r2
   146dc:	180b883a 	mov	r5,r3
   146e0:	1025883a 	mov	r18,r2
   146e4:	1827883a 	mov	r19,r3
   146e8:	001d8100 	call	1d810 <__eqdf2>
   146ec:	103f9a26 	beq	r2,zero,14558 <__alt_data_end+0xfc014558>
   146f0:	d9c00617 	ldw	r7,24(sp)
   146f4:	d8c00717 	ldw	r3,28(sp)
   146f8:	b829883a 	mov	r20,r23
   146fc:	38bfffc4 	addi	r2,r7,-1
   14700:	18ad883a 	add	r22,r3,r2
   14704:	00000a06 	br	14730 <_dtoa_r+0x880>
   14708:	001da680 	call	1da68 <__muldf3>
   1470c:	000d883a 	mov	r6,zero
   14710:	000f883a 	mov	r7,zero
   14714:	1009883a 	mov	r4,r2
   14718:	180b883a 	mov	r5,r3
   1471c:	1025883a 	mov	r18,r2
   14720:	1827883a 	mov	r19,r3
   14724:	b829883a 	mov	r20,r23
   14728:	001d8100 	call	1d810 <__eqdf2>
   1472c:	103f8a26 	beq	r2,zero,14558 <__alt_data_end+0xfc014558>
   14730:	800d883a 	mov	r6,r16
   14734:	880f883a 	mov	r7,r17
   14738:	9009883a 	mov	r4,r18
   1473c:	980b883a 	mov	r5,r19
   14740:	001ce400 	call	1ce40 <__divdf3>
   14744:	180b883a 	mov	r5,r3
   14748:	1009883a 	mov	r4,r2
   1474c:	001ebd00 	call	1ebd0 <__fixdfsi>
   14750:	1009883a 	mov	r4,r2
   14754:	102b883a 	mov	r21,r2
   14758:	001ec500 	call	1ec50 <__floatsidf>
   1475c:	800d883a 	mov	r6,r16
   14760:	880f883a 	mov	r7,r17
   14764:	1009883a 	mov	r4,r2
   14768:	180b883a 	mov	r5,r3
   1476c:	001da680 	call	1da68 <__muldf3>
   14770:	100d883a 	mov	r6,r2
   14774:	180f883a 	mov	r7,r3
   14778:	9009883a 	mov	r4,r18
   1477c:	980b883a 	mov	r5,r19
   14780:	001e2d40 	call	1e2d4 <__subdf3>
   14784:	aa000c04 	addi	r8,r21,48
   14788:	a2000005 	stb	r8,0(r20)
   1478c:	000d883a 	mov	r6,zero
   14790:	01d00934 	movhi	r7,16420
   14794:	1009883a 	mov	r4,r2
   14798:	180b883a 	mov	r5,r3
   1479c:	a5c00044 	addi	r23,r20,1
   147a0:	b53fd91e 	bne	r22,r20,14708 <__alt_data_end+0xfc014708>
   147a4:	100d883a 	mov	r6,r2
   147a8:	180f883a 	mov	r7,r3
   147ac:	1009883a 	mov	r4,r2
   147b0:	180b883a 	mov	r5,r3
   147b4:	001c5940 	call	1c594 <__adddf3>
   147b8:	100d883a 	mov	r6,r2
   147bc:	180f883a 	mov	r7,r3
   147c0:	8009883a 	mov	r4,r16
   147c4:	880b883a 	mov	r5,r17
   147c8:	1027883a 	mov	r19,r2
   147cc:	1825883a 	mov	r18,r3
   147d0:	001d9740 	call	1d974 <__ledf2>
   147d4:	10000816 	blt	r2,zero,147f8 <_dtoa_r+0x948>
   147d8:	980d883a 	mov	r6,r19
   147dc:	900f883a 	mov	r7,r18
   147e0:	8009883a 	mov	r4,r16
   147e4:	880b883a 	mov	r5,r17
   147e8:	001d8100 	call	1d810 <__eqdf2>
   147ec:	103f5a1e 	bne	r2,zero,14558 <__alt_data_end+0xfc014558>
   147f0:	ad40004c 	andi	r21,r21,1
   147f4:	a83f5826 	beq	r21,zero,14558 <__alt_data_end+0xfc014558>
   147f8:	bd3fffc3 	ldbu	r20,-1(r23)
   147fc:	b8bfffc4 	addi	r2,r23,-1
   14800:	1007883a 	mov	r3,r2
   14804:	01400e44 	movi	r5,57
   14808:	d9800717 	ldw	r6,28(sp)
   1480c:	00000506 	br	14824 <_dtoa_r+0x974>
   14810:	18ffffc4 	addi	r3,r3,-1
   14814:	11824726 	beq	r2,r6,15134 <_dtoa_r+0x1284>
   14818:	1d000003 	ldbu	r20,0(r3)
   1481c:	102f883a 	mov	r23,r2
   14820:	10bfffc4 	addi	r2,r2,-1
   14824:	a1003fcc 	andi	r4,r20,255
   14828:	2100201c 	xori	r4,r4,128
   1482c:	213fe004 	addi	r4,r4,-128
   14830:	217ff726 	beq	r4,r5,14810 <__alt_data_end+0xfc014810>
   14834:	a2000044 	addi	r8,r20,1
   14838:	12000005 	stb	r8,0(r2)
   1483c:	003f4606 	br	14558 <__alt_data_end+0xfc014558>
   14840:	d9000b17 	ldw	r4,44(sp)
   14844:	2000c826 	beq	r4,zero,14b68 <_dtoa_r+0xcb8>
   14848:	d9800317 	ldw	r6,12(sp)
   1484c:	00c00044 	movi	r3,1
   14850:	1980f90e 	bge	r3,r6,14c38 <_dtoa_r+0xd88>
   14854:	d8800617 	ldw	r2,24(sp)
   14858:	d8c00a17 	ldw	r3,40(sp)
   1485c:	157fffc4 	addi	r21,r2,-1
   14860:	1d41f316 	blt	r3,r21,15030 <_dtoa_r+0x1180>
   14864:	1d6bc83a 	sub	r21,r3,r21
   14868:	d9c00617 	ldw	r7,24(sp)
   1486c:	3802aa16 	blt	r7,zero,15318 <_dtoa_r+0x1468>
   14870:	dd000817 	ldw	r20,32(sp)
   14874:	d8800617 	ldw	r2,24(sp)
   14878:	d8c00817 	ldw	r3,32(sp)
   1487c:	01400044 	movi	r5,1
   14880:	e009883a 	mov	r4,fp
   14884:	1887883a 	add	r3,r3,r2
   14888:	d8c00815 	stw	r3,32(sp)
   1488c:	b0ad883a 	add	r22,r22,r2
   14890:	0016f200 	call	16f20 <__i2b>
   14894:	1023883a 	mov	r17,r2
   14898:	a0000826 	beq	r20,zero,148bc <_dtoa_r+0xa0c>
   1489c:	0580070e 	bge	zero,r22,148bc <_dtoa_r+0xa0c>
   148a0:	a005883a 	mov	r2,r20
   148a4:	b500b916 	blt	r22,r20,14b8c <_dtoa_r+0xcdc>
   148a8:	d9000817 	ldw	r4,32(sp)
   148ac:	a0a9c83a 	sub	r20,r20,r2
   148b0:	b0adc83a 	sub	r22,r22,r2
   148b4:	2089c83a 	sub	r4,r4,r2
   148b8:	d9000815 	stw	r4,32(sp)
   148bc:	d9800a17 	ldw	r6,40(sp)
   148c0:	0181810e 	bge	zero,r6,14ec8 <_dtoa_r+0x1018>
   148c4:	d9c00b17 	ldw	r7,44(sp)
   148c8:	3800b326 	beq	r7,zero,14b98 <_dtoa_r+0xce8>
   148cc:	a800b226 	beq	r21,zero,14b98 <_dtoa_r+0xce8>
   148d0:	880b883a 	mov	r5,r17
   148d4:	a80d883a 	mov	r6,r21
   148d8:	e009883a 	mov	r4,fp
   148dc:	00171e80 	call	171e8 <__pow5mult>
   148e0:	d9800917 	ldw	r6,36(sp)
   148e4:	100b883a 	mov	r5,r2
   148e8:	e009883a 	mov	r4,fp
   148ec:	1023883a 	mov	r17,r2
   148f0:	0016f5c0 	call	16f5c <__multiply>
   148f4:	1021883a 	mov	r16,r2
   148f8:	d8800a17 	ldw	r2,40(sp)
   148fc:	d9400917 	ldw	r5,36(sp)
   14900:	e009883a 	mov	r4,fp
   14904:	1545c83a 	sub	r2,r2,r21
   14908:	d8800a15 	stw	r2,40(sp)
   1490c:	0016b940 	call	16b94 <_Bfree>
   14910:	d8c00a17 	ldw	r3,40(sp)
   14914:	18009f1e 	bne	r3,zero,14b94 <_dtoa_r+0xce4>
   14918:	05c00044 	movi	r23,1
   1491c:	e009883a 	mov	r4,fp
   14920:	b80b883a 	mov	r5,r23
   14924:	0016f200 	call	16f20 <__i2b>
   14928:	d9000d17 	ldw	r4,52(sp)
   1492c:	102b883a 	mov	r21,r2
   14930:	2000ce26 	beq	r4,zero,14c6c <_dtoa_r+0xdbc>
   14934:	200d883a 	mov	r6,r4
   14938:	100b883a 	mov	r5,r2
   1493c:	e009883a 	mov	r4,fp
   14940:	00171e80 	call	171e8 <__pow5mult>
   14944:	d9800317 	ldw	r6,12(sp)
   14948:	102b883a 	mov	r21,r2
   1494c:	b981810e 	bge	r23,r6,14f54 <_dtoa_r+0x10a4>
   14950:	0027883a 	mov	r19,zero
   14954:	a8800417 	ldw	r2,16(r21)
   14958:	05c00804 	movi	r23,32
   1495c:	10800104 	addi	r2,r2,4
   14960:	1085883a 	add	r2,r2,r2
   14964:	1085883a 	add	r2,r2,r2
   14968:	a885883a 	add	r2,r21,r2
   1496c:	11000017 	ldw	r4,0(r2)
   14970:	0016e080 	call	16e08 <__hi0bits>
   14974:	b885c83a 	sub	r2,r23,r2
   14978:	1585883a 	add	r2,r2,r22
   1497c:	108007cc 	andi	r2,r2,31
   14980:	1000b326 	beq	r2,zero,14c50 <_dtoa_r+0xda0>
   14984:	00c00804 	movi	r3,32
   14988:	1887c83a 	sub	r3,r3,r2
   1498c:	01000104 	movi	r4,4
   14990:	20c2cd0e 	bge	r4,r3,154c8 <_dtoa_r+0x1618>
   14994:	00c00704 	movi	r3,28
   14998:	1885c83a 	sub	r2,r3,r2
   1499c:	d8c00817 	ldw	r3,32(sp)
   149a0:	a0a9883a 	add	r20,r20,r2
   149a4:	b0ad883a 	add	r22,r22,r2
   149a8:	1887883a 	add	r3,r3,r2
   149ac:	d8c00815 	stw	r3,32(sp)
   149b0:	d9800817 	ldw	r6,32(sp)
   149b4:	0180040e 	bge	zero,r6,149c8 <_dtoa_r+0xb18>
   149b8:	800b883a 	mov	r5,r16
   149bc:	e009883a 	mov	r4,fp
   149c0:	00173280 	call	17328 <__lshift>
   149c4:	1021883a 	mov	r16,r2
   149c8:	0580050e 	bge	zero,r22,149e0 <_dtoa_r+0xb30>
   149cc:	a80b883a 	mov	r5,r21
   149d0:	b00d883a 	mov	r6,r22
   149d4:	e009883a 	mov	r4,fp
   149d8:	00173280 	call	17328 <__lshift>
   149dc:	102b883a 	mov	r21,r2
   149e0:	d9c00e17 	ldw	r7,56(sp)
   149e4:	3801211e 	bne	r7,zero,14e6c <_dtoa_r+0xfbc>
   149e8:	d9800617 	ldw	r6,24(sp)
   149ec:	0181380e 	bge	zero,r6,14ed0 <_dtoa_r+0x1020>
   149f0:	d8c00b17 	ldw	r3,44(sp)
   149f4:	1800ab1e 	bne	r3,zero,14ca4 <_dtoa_r+0xdf4>
   149f8:	dc800717 	ldw	r18,28(sp)
   149fc:	dcc00617 	ldw	r19,24(sp)
   14a00:	9029883a 	mov	r20,r18
   14a04:	00000206 	br	14a10 <_dtoa_r+0xb60>
   14a08:	0016bbc0 	call	16bbc <__multadd>
   14a0c:	1021883a 	mov	r16,r2
   14a10:	a80b883a 	mov	r5,r21
   14a14:	8009883a 	mov	r4,r16
   14a18:	0013c880 	call	13c88 <quorem>
   14a1c:	10800c04 	addi	r2,r2,48
   14a20:	90800005 	stb	r2,0(r18)
   14a24:	94800044 	addi	r18,r18,1
   14a28:	9507c83a 	sub	r3,r18,r20
   14a2c:	000f883a 	mov	r7,zero
   14a30:	01800284 	movi	r6,10
   14a34:	800b883a 	mov	r5,r16
   14a38:	e009883a 	mov	r4,fp
   14a3c:	1cfff216 	blt	r3,r19,14a08 <__alt_data_end+0xfc014a08>
   14a40:	1011883a 	mov	r8,r2
   14a44:	d8800617 	ldw	r2,24(sp)
   14a48:	0082370e 	bge	zero,r2,15328 <_dtoa_r+0x1478>
   14a4c:	d9000717 	ldw	r4,28(sp)
   14a50:	0025883a 	mov	r18,zero
   14a54:	20af883a 	add	r23,r4,r2
   14a58:	01800044 	movi	r6,1
   14a5c:	800b883a 	mov	r5,r16
   14a60:	e009883a 	mov	r4,fp
   14a64:	da001715 	stw	r8,92(sp)
   14a68:	00173280 	call	17328 <__lshift>
   14a6c:	a80b883a 	mov	r5,r21
   14a70:	1009883a 	mov	r4,r2
   14a74:	d8800915 	stw	r2,36(sp)
   14a78:	00174700 	call	17470 <__mcmp>
   14a7c:	da001717 	ldw	r8,92(sp)
   14a80:	0081800e 	bge	zero,r2,15084 <_dtoa_r+0x11d4>
   14a84:	b93fffc3 	ldbu	r4,-1(r23)
   14a88:	b8bfffc4 	addi	r2,r23,-1
   14a8c:	1007883a 	mov	r3,r2
   14a90:	01800e44 	movi	r6,57
   14a94:	d9c00717 	ldw	r7,28(sp)
   14a98:	00000506 	br	14ab0 <_dtoa_r+0xc00>
   14a9c:	18ffffc4 	addi	r3,r3,-1
   14aa0:	11c12326 	beq	r2,r7,14f30 <_dtoa_r+0x1080>
   14aa4:	19000003 	ldbu	r4,0(r3)
   14aa8:	102f883a 	mov	r23,r2
   14aac:	10bfffc4 	addi	r2,r2,-1
   14ab0:	21403fcc 	andi	r5,r4,255
   14ab4:	2940201c 	xori	r5,r5,128
   14ab8:	297fe004 	addi	r5,r5,-128
   14abc:	29bff726 	beq	r5,r6,14a9c <__alt_data_end+0xfc014a9c>
   14ac0:	21000044 	addi	r4,r4,1
   14ac4:	11000005 	stb	r4,0(r2)
   14ac8:	a80b883a 	mov	r5,r21
   14acc:	e009883a 	mov	r4,fp
   14ad0:	0016b940 	call	16b94 <_Bfree>
   14ad4:	883ea026 	beq	r17,zero,14558 <__alt_data_end+0xfc014558>
   14ad8:	90000426 	beq	r18,zero,14aec <_dtoa_r+0xc3c>
   14adc:	94400326 	beq	r18,r17,14aec <_dtoa_r+0xc3c>
   14ae0:	900b883a 	mov	r5,r18
   14ae4:	e009883a 	mov	r4,fp
   14ae8:	0016b940 	call	16b94 <_Bfree>
   14aec:	880b883a 	mov	r5,r17
   14af0:	e009883a 	mov	r4,fp
   14af4:	0016b940 	call	16b94 <_Bfree>
   14af8:	003e9706 	br	14558 <__alt_data_end+0xfc014558>
   14afc:	01800044 	movi	r6,1
   14b00:	d9800e15 	stw	r6,56(sp)
   14b04:	003d9606 	br	14160 <__alt_data_end+0xfc014160>
   14b08:	d8800817 	ldw	r2,32(sp)
   14b0c:	d8c00517 	ldw	r3,20(sp)
   14b10:	d8000d15 	stw	zero,52(sp)
   14b14:	10c5c83a 	sub	r2,r2,r3
   14b18:	00c9c83a 	sub	r4,zero,r3
   14b1c:	d8800815 	stw	r2,32(sp)
   14b20:	d9000a15 	stw	r4,40(sp)
   14b24:	003d9706 	br	14184 <__alt_data_end+0xfc014184>
   14b28:	05adc83a 	sub	r22,zero,r22
   14b2c:	dd800815 	stw	r22,32(sp)
   14b30:	002d883a 	mov	r22,zero
   14b34:	003d8e06 	br	14170 <__alt_data_end+0xfc014170>
   14b38:	d9000517 	ldw	r4,20(sp)
   14b3c:	001ec500 	call	1ec50 <__floatsidf>
   14b40:	100d883a 	mov	r6,r2
   14b44:	180f883a 	mov	r7,r3
   14b48:	a009883a 	mov	r4,r20
   14b4c:	880b883a 	mov	r5,r17
   14b50:	001d8100 	call	1d810 <__eqdf2>
   14b54:	103d7126 	beq	r2,zero,1411c <__alt_data_end+0xfc01411c>
   14b58:	d9c00517 	ldw	r7,20(sp)
   14b5c:	39ffffc4 	addi	r7,r7,-1
   14b60:	d9c00515 	stw	r7,20(sp)
   14b64:	003d6d06 	br	1411c <__alt_data_end+0xfc01411c>
   14b68:	dd400a17 	ldw	r21,40(sp)
   14b6c:	dd000817 	ldw	r20,32(sp)
   14b70:	0023883a 	mov	r17,zero
   14b74:	003f4806 	br	14898 <__alt_data_end+0xfc014898>
   14b78:	10e3c83a 	sub	r17,r2,r3
   14b7c:	9448983a 	sll	r4,r18,r17
   14b80:	003d3206 	br	1404c <__alt_data_end+0xfc01404c>
   14b84:	d8000e15 	stw	zero,56(sp)
   14b88:	003d7506 	br	14160 <__alt_data_end+0xfc014160>
   14b8c:	b005883a 	mov	r2,r22
   14b90:	003f4506 	br	148a8 <__alt_data_end+0xfc0148a8>
   14b94:	dc000915 	stw	r16,36(sp)
   14b98:	d9800a17 	ldw	r6,40(sp)
   14b9c:	d9400917 	ldw	r5,36(sp)
   14ba0:	e009883a 	mov	r4,fp
   14ba4:	00171e80 	call	171e8 <__pow5mult>
   14ba8:	1021883a 	mov	r16,r2
   14bac:	003f5a06 	br	14918 <__alt_data_end+0xfc014918>
   14bb0:	01c00044 	movi	r7,1
   14bb4:	d9c00b15 	stw	r7,44(sp)
   14bb8:	d8802217 	ldw	r2,136(sp)
   14bbc:	0081280e 	bge	zero,r2,15060 <_dtoa_r+0x11b0>
   14bc0:	100d883a 	mov	r6,r2
   14bc4:	1021883a 	mov	r16,r2
   14bc8:	d8800c15 	stw	r2,48(sp)
   14bcc:	d8800615 	stw	r2,24(sp)
   14bd0:	003d8806 	br	141f4 <__alt_data_end+0xfc0141f4>
   14bd4:	d8800617 	ldw	r2,24(sp)
   14bd8:	00be9b16 	blt	zero,r2,14648 <__alt_data_end+0xfc014648>
   14bdc:	10010f1e 	bne	r2,zero,1501c <_dtoa_r+0x116c>
   14be0:	880b883a 	mov	r5,r17
   14be4:	000d883a 	mov	r6,zero
   14be8:	01d00534 	movhi	r7,16404
   14bec:	8009883a 	mov	r4,r16
   14bf0:	001da680 	call	1da68 <__muldf3>
   14bf4:	900d883a 	mov	r6,r18
   14bf8:	980f883a 	mov	r7,r19
   14bfc:	1009883a 	mov	r4,r2
   14c00:	180b883a 	mov	r5,r3
   14c04:	001d8980 	call	1d898 <__gedf2>
   14c08:	002b883a 	mov	r21,zero
   14c0c:	0023883a 	mov	r17,zero
   14c10:	1000bf16 	blt	r2,zero,14f10 <_dtoa_r+0x1060>
   14c14:	d9802217 	ldw	r6,136(sp)
   14c18:	ddc00717 	ldw	r23,28(sp)
   14c1c:	018c303a 	nor	r6,zero,r6
   14c20:	d9800515 	stw	r6,20(sp)
   14c24:	a80b883a 	mov	r5,r21
   14c28:	e009883a 	mov	r4,fp
   14c2c:	0016b940 	call	16b94 <_Bfree>
   14c30:	883e4926 	beq	r17,zero,14558 <__alt_data_end+0xfc014558>
   14c34:	003fad06 	br	14aec <__alt_data_end+0xfc014aec>
   14c38:	d9c01117 	ldw	r7,68(sp)
   14c3c:	3801bc26 	beq	r7,zero,15330 <_dtoa_r+0x1480>
   14c40:	10810cc4 	addi	r2,r2,1075
   14c44:	dd400a17 	ldw	r21,40(sp)
   14c48:	dd000817 	ldw	r20,32(sp)
   14c4c:	003f0a06 	br	14878 <__alt_data_end+0xfc014878>
   14c50:	00800704 	movi	r2,28
   14c54:	d9000817 	ldw	r4,32(sp)
   14c58:	a0a9883a 	add	r20,r20,r2
   14c5c:	b0ad883a 	add	r22,r22,r2
   14c60:	2089883a 	add	r4,r4,r2
   14c64:	d9000815 	stw	r4,32(sp)
   14c68:	003f5106 	br	149b0 <__alt_data_end+0xfc0149b0>
   14c6c:	d8c00317 	ldw	r3,12(sp)
   14c70:	b8c1fc0e 	bge	r23,r3,15464 <_dtoa_r+0x15b4>
   14c74:	0027883a 	mov	r19,zero
   14c78:	b805883a 	mov	r2,r23
   14c7c:	003f3e06 	br	14978 <__alt_data_end+0xfc014978>
   14c80:	880b883a 	mov	r5,r17
   14c84:	e009883a 	mov	r4,fp
   14c88:	000f883a 	mov	r7,zero
   14c8c:	01800284 	movi	r6,10
   14c90:	0016bbc0 	call	16bbc <__multadd>
   14c94:	d9000c17 	ldw	r4,48(sp)
   14c98:	1023883a 	mov	r17,r2
   14c9c:	0102040e 	bge	zero,r4,154b0 <_dtoa_r+0x1600>
   14ca0:	d9000615 	stw	r4,24(sp)
   14ca4:	0500050e 	bge	zero,r20,14cbc <_dtoa_r+0xe0c>
   14ca8:	880b883a 	mov	r5,r17
   14cac:	a00d883a 	mov	r6,r20
   14cb0:	e009883a 	mov	r4,fp
   14cb4:	00173280 	call	17328 <__lshift>
   14cb8:	1023883a 	mov	r17,r2
   14cbc:	9801241e 	bne	r19,zero,15150 <_dtoa_r+0x12a0>
   14cc0:	8829883a 	mov	r20,r17
   14cc4:	d9000617 	ldw	r4,24(sp)
   14cc8:	dcc00717 	ldw	r19,28(sp)
   14ccc:	9480004c 	andi	r18,r18,1
   14cd0:	20bfffc4 	addi	r2,r4,-1
   14cd4:	9885883a 	add	r2,r19,r2
   14cd8:	d8800415 	stw	r2,16(sp)
   14cdc:	dc800615 	stw	r18,24(sp)
   14ce0:	a80b883a 	mov	r5,r21
   14ce4:	8009883a 	mov	r4,r16
   14ce8:	0013c880 	call	13c88 <quorem>
   14cec:	880b883a 	mov	r5,r17
   14cf0:	8009883a 	mov	r4,r16
   14cf4:	102f883a 	mov	r23,r2
   14cf8:	00174700 	call	17470 <__mcmp>
   14cfc:	a80b883a 	mov	r5,r21
   14d00:	a00d883a 	mov	r6,r20
   14d04:	e009883a 	mov	r4,fp
   14d08:	102d883a 	mov	r22,r2
   14d0c:	00174d00 	call	174d0 <__mdiff>
   14d10:	1007883a 	mov	r3,r2
   14d14:	10800317 	ldw	r2,12(r2)
   14d18:	bc800c04 	addi	r18,r23,48
   14d1c:	180b883a 	mov	r5,r3
   14d20:	10004e1e 	bne	r2,zero,14e5c <_dtoa_r+0xfac>
   14d24:	8009883a 	mov	r4,r16
   14d28:	d8c01615 	stw	r3,88(sp)
   14d2c:	00174700 	call	17470 <__mcmp>
   14d30:	d8c01617 	ldw	r3,88(sp)
   14d34:	e009883a 	mov	r4,fp
   14d38:	d8801615 	stw	r2,88(sp)
   14d3c:	180b883a 	mov	r5,r3
   14d40:	0016b940 	call	16b94 <_Bfree>
   14d44:	d8801617 	ldw	r2,88(sp)
   14d48:	1000041e 	bne	r2,zero,14d5c <_dtoa_r+0xeac>
   14d4c:	d9800317 	ldw	r6,12(sp)
   14d50:	3000021e 	bne	r6,zero,14d5c <_dtoa_r+0xeac>
   14d54:	d8c00617 	ldw	r3,24(sp)
   14d58:	18003726 	beq	r3,zero,14e38 <_dtoa_r+0xf88>
   14d5c:	b0002016 	blt	r22,zero,14de0 <_dtoa_r+0xf30>
   14d60:	b000041e 	bne	r22,zero,14d74 <_dtoa_r+0xec4>
   14d64:	d9000317 	ldw	r4,12(sp)
   14d68:	2000021e 	bne	r4,zero,14d74 <_dtoa_r+0xec4>
   14d6c:	d8c00617 	ldw	r3,24(sp)
   14d70:	18001b26 	beq	r3,zero,14de0 <_dtoa_r+0xf30>
   14d74:	00810716 	blt	zero,r2,15194 <_dtoa_r+0x12e4>
   14d78:	d8c00417 	ldw	r3,16(sp)
   14d7c:	9d800044 	addi	r22,r19,1
   14d80:	9c800005 	stb	r18,0(r19)
   14d84:	b02f883a 	mov	r23,r22
   14d88:	98c10626 	beq	r19,r3,151a4 <_dtoa_r+0x12f4>
   14d8c:	800b883a 	mov	r5,r16
   14d90:	000f883a 	mov	r7,zero
   14d94:	01800284 	movi	r6,10
   14d98:	e009883a 	mov	r4,fp
   14d9c:	0016bbc0 	call	16bbc <__multadd>
   14da0:	1021883a 	mov	r16,r2
   14da4:	000f883a 	mov	r7,zero
   14da8:	01800284 	movi	r6,10
   14dac:	880b883a 	mov	r5,r17
   14db0:	e009883a 	mov	r4,fp
   14db4:	8d002526 	beq	r17,r20,14e4c <_dtoa_r+0xf9c>
   14db8:	0016bbc0 	call	16bbc <__multadd>
   14dbc:	a00b883a 	mov	r5,r20
   14dc0:	000f883a 	mov	r7,zero
   14dc4:	01800284 	movi	r6,10
   14dc8:	e009883a 	mov	r4,fp
   14dcc:	1023883a 	mov	r17,r2
   14dd0:	0016bbc0 	call	16bbc <__multadd>
   14dd4:	1029883a 	mov	r20,r2
   14dd8:	b027883a 	mov	r19,r22
   14ddc:	003fc006 	br	14ce0 <__alt_data_end+0xfc014ce0>
   14de0:	9011883a 	mov	r8,r18
   14de4:	00800e0e 	bge	zero,r2,14e20 <_dtoa_r+0xf70>
   14de8:	800b883a 	mov	r5,r16
   14dec:	01800044 	movi	r6,1
   14df0:	e009883a 	mov	r4,fp
   14df4:	da001715 	stw	r8,92(sp)
   14df8:	00173280 	call	17328 <__lshift>
   14dfc:	a80b883a 	mov	r5,r21
   14e00:	1009883a 	mov	r4,r2
   14e04:	1021883a 	mov	r16,r2
   14e08:	00174700 	call	17470 <__mcmp>
   14e0c:	da001717 	ldw	r8,92(sp)
   14e10:	0081960e 	bge	zero,r2,1546c <_dtoa_r+0x15bc>
   14e14:	00800e44 	movi	r2,57
   14e18:	40817026 	beq	r8,r2,153dc <_dtoa_r+0x152c>
   14e1c:	ba000c44 	addi	r8,r23,49
   14e20:	8825883a 	mov	r18,r17
   14e24:	9dc00044 	addi	r23,r19,1
   14e28:	9a000005 	stb	r8,0(r19)
   14e2c:	a023883a 	mov	r17,r20
   14e30:	dc000915 	stw	r16,36(sp)
   14e34:	003f2406 	br	14ac8 <__alt_data_end+0xfc014ac8>
   14e38:	00800e44 	movi	r2,57
   14e3c:	9011883a 	mov	r8,r18
   14e40:	90816626 	beq	r18,r2,153dc <_dtoa_r+0x152c>
   14e44:	05bff516 	blt	zero,r22,14e1c <__alt_data_end+0xfc014e1c>
   14e48:	003ff506 	br	14e20 <__alt_data_end+0xfc014e20>
   14e4c:	0016bbc0 	call	16bbc <__multadd>
   14e50:	1023883a 	mov	r17,r2
   14e54:	1029883a 	mov	r20,r2
   14e58:	003fdf06 	br	14dd8 <__alt_data_end+0xfc014dd8>
   14e5c:	e009883a 	mov	r4,fp
   14e60:	0016b940 	call	16b94 <_Bfree>
   14e64:	00800044 	movi	r2,1
   14e68:	003fbc06 	br	14d5c <__alt_data_end+0xfc014d5c>
   14e6c:	a80b883a 	mov	r5,r21
   14e70:	8009883a 	mov	r4,r16
   14e74:	00174700 	call	17470 <__mcmp>
   14e78:	103edb0e 	bge	r2,zero,149e8 <__alt_data_end+0xfc0149e8>
   14e7c:	800b883a 	mov	r5,r16
   14e80:	000f883a 	mov	r7,zero
   14e84:	01800284 	movi	r6,10
   14e88:	e009883a 	mov	r4,fp
   14e8c:	0016bbc0 	call	16bbc <__multadd>
   14e90:	1021883a 	mov	r16,r2
   14e94:	d8800517 	ldw	r2,20(sp)
   14e98:	d8c00b17 	ldw	r3,44(sp)
   14e9c:	10bfffc4 	addi	r2,r2,-1
   14ea0:	d8800515 	stw	r2,20(sp)
   14ea4:	183f761e 	bne	r3,zero,14c80 <__alt_data_end+0xfc014c80>
   14ea8:	d9000c17 	ldw	r4,48(sp)
   14eac:	0101730e 	bge	zero,r4,1547c <_dtoa_r+0x15cc>
   14eb0:	d9000615 	stw	r4,24(sp)
   14eb4:	003ed006 	br	149f8 <__alt_data_end+0xfc0149f8>
   14eb8:	00800084 	movi	r2,2
   14ebc:	3081861e 	bne	r6,r2,154d8 <_dtoa_r+0x1628>
   14ec0:	d8000b15 	stw	zero,44(sp)
   14ec4:	003f3c06 	br	14bb8 <__alt_data_end+0xfc014bb8>
   14ec8:	dc000917 	ldw	r16,36(sp)
   14ecc:	003e9206 	br	14918 <__alt_data_end+0xfc014918>
   14ed0:	d9c00317 	ldw	r7,12(sp)
   14ed4:	00800084 	movi	r2,2
   14ed8:	11fec50e 	bge	r2,r7,149f0 <__alt_data_end+0xfc0149f0>
   14edc:	d9000617 	ldw	r4,24(sp)
   14ee0:	20013c1e 	bne	r4,zero,153d4 <_dtoa_r+0x1524>
   14ee4:	a80b883a 	mov	r5,r21
   14ee8:	000f883a 	mov	r7,zero
   14eec:	01800144 	movi	r6,5
   14ef0:	e009883a 	mov	r4,fp
   14ef4:	0016bbc0 	call	16bbc <__multadd>
   14ef8:	100b883a 	mov	r5,r2
   14efc:	8009883a 	mov	r4,r16
   14f00:	102b883a 	mov	r21,r2
   14f04:	00174700 	call	17470 <__mcmp>
   14f08:	dc000915 	stw	r16,36(sp)
   14f0c:	00bf410e 	bge	zero,r2,14c14 <__alt_data_end+0xfc014c14>
   14f10:	d9c00717 	ldw	r7,28(sp)
   14f14:	00800c44 	movi	r2,49
   14f18:	38800005 	stb	r2,0(r7)
   14f1c:	d8800517 	ldw	r2,20(sp)
   14f20:	3dc00044 	addi	r23,r7,1
   14f24:	10800044 	addi	r2,r2,1
   14f28:	d8800515 	stw	r2,20(sp)
   14f2c:	003f3d06 	br	14c24 <__alt_data_end+0xfc014c24>
   14f30:	d9800517 	ldw	r6,20(sp)
   14f34:	d9c00717 	ldw	r7,28(sp)
   14f38:	00800c44 	movi	r2,49
   14f3c:	31800044 	addi	r6,r6,1
   14f40:	d9800515 	stw	r6,20(sp)
   14f44:	38800005 	stb	r2,0(r7)
   14f48:	003edf06 	br	14ac8 <__alt_data_end+0xfc014ac8>
   14f4c:	d8000b15 	stw	zero,44(sp)
   14f50:	003c9f06 	br	141d0 <__alt_data_end+0xfc0141d0>
   14f54:	903e7e1e 	bne	r18,zero,14950 <__alt_data_end+0xfc014950>
   14f58:	00800434 	movhi	r2,16
   14f5c:	10bfffc4 	addi	r2,r2,-1
   14f60:	9884703a 	and	r2,r19,r2
   14f64:	1000ea1e 	bne	r2,zero,15310 <_dtoa_r+0x1460>
   14f68:	9cdffc2c 	andhi	r19,r19,32752
   14f6c:	9800e826 	beq	r19,zero,15310 <_dtoa_r+0x1460>
   14f70:	d9c00817 	ldw	r7,32(sp)
   14f74:	b5800044 	addi	r22,r22,1
   14f78:	04c00044 	movi	r19,1
   14f7c:	39c00044 	addi	r7,r7,1
   14f80:	d9c00815 	stw	r7,32(sp)
   14f84:	d8800d17 	ldw	r2,52(sp)
   14f88:	103e721e 	bne	r2,zero,14954 <__alt_data_end+0xfc014954>
   14f8c:	00800044 	movi	r2,1
   14f90:	003e7906 	br	14978 <__alt_data_end+0xfc014978>
   14f94:	8009883a 	mov	r4,r16
   14f98:	001ec500 	call	1ec50 <__floatsidf>
   14f9c:	d9800f17 	ldw	r6,60(sp)
   14fa0:	d9c01017 	ldw	r7,64(sp)
   14fa4:	1009883a 	mov	r4,r2
   14fa8:	180b883a 	mov	r5,r3
   14fac:	001da680 	call	1da68 <__muldf3>
   14fb0:	000d883a 	mov	r6,zero
   14fb4:	01d00734 	movhi	r7,16412
   14fb8:	1009883a 	mov	r4,r2
   14fbc:	180b883a 	mov	r5,r3
   14fc0:	001c5940 	call	1c594 <__adddf3>
   14fc4:	047f3034 	movhi	r17,64704
   14fc8:	1021883a 	mov	r16,r2
   14fcc:	1c63883a 	add	r17,r3,r17
   14fd0:	d9000f17 	ldw	r4,60(sp)
   14fd4:	d9401017 	ldw	r5,64(sp)
   14fd8:	000d883a 	mov	r6,zero
   14fdc:	01d00534 	movhi	r7,16404
   14fe0:	001e2d40 	call	1e2d4 <__subdf3>
   14fe4:	800d883a 	mov	r6,r16
   14fe8:	880f883a 	mov	r7,r17
   14fec:	1009883a 	mov	r4,r2
   14ff0:	180b883a 	mov	r5,r3
   14ff4:	102b883a 	mov	r21,r2
   14ff8:	1829883a 	mov	r20,r3
   14ffc:	001d8980 	call	1d898 <__gedf2>
   15000:	00806c16 	blt	zero,r2,151b4 <_dtoa_r+0x1304>
   15004:	89e0003c 	xorhi	r7,r17,32768
   15008:	800d883a 	mov	r6,r16
   1500c:	a809883a 	mov	r4,r21
   15010:	a00b883a 	mov	r5,r20
   15014:	001d9740 	call	1d974 <__ledf2>
   15018:	103d7e0e 	bge	r2,zero,14614 <__alt_data_end+0xfc014614>
   1501c:	002b883a 	mov	r21,zero
   15020:	0023883a 	mov	r17,zero
   15024:	003efb06 	br	14c14 <__alt_data_end+0xfc014c14>
   15028:	d8800717 	ldw	r2,28(sp)
   1502c:	003bd006 	br	13f70 <__alt_data_end+0xfc013f70>
   15030:	d9000a17 	ldw	r4,40(sp)
   15034:	d9800d17 	ldw	r6,52(sp)
   15038:	dd400a15 	stw	r21,40(sp)
   1503c:	a905c83a 	sub	r2,r21,r4
   15040:	308d883a 	add	r6,r6,r2
   15044:	d9800d15 	stw	r6,52(sp)
   15048:	002b883a 	mov	r21,zero
   1504c:	003e0606 	br	14868 <__alt_data_end+0xfc014868>
   15050:	9023883a 	mov	r17,r18
   15054:	9829883a 	mov	r20,r19
   15058:	04000084 	movi	r16,2
   1505c:	003c9206 	br	142a8 <__alt_data_end+0xfc0142a8>
   15060:	04000044 	movi	r16,1
   15064:	dc000c15 	stw	r16,48(sp)
   15068:	dc000615 	stw	r16,24(sp)
   1506c:	dc002215 	stw	r16,136(sp)
   15070:	e0001115 	stw	zero,68(fp)
   15074:	000b883a 	mov	r5,zero
   15078:	003c6906 	br	14220 <__alt_data_end+0xfc014220>
   1507c:	3021883a 	mov	r16,r6
   15080:	003ffb06 	br	15070 <__alt_data_end+0xfc015070>
   15084:	1000021e 	bne	r2,zero,15090 <_dtoa_r+0x11e0>
   15088:	4200004c 	andi	r8,r8,1
   1508c:	403e7d1e 	bne	r8,zero,14a84 <__alt_data_end+0xfc014a84>
   15090:	01000c04 	movi	r4,48
   15094:	00000106 	br	1509c <_dtoa_r+0x11ec>
   15098:	102f883a 	mov	r23,r2
   1509c:	b8bfffc4 	addi	r2,r23,-1
   150a0:	10c00007 	ldb	r3,0(r2)
   150a4:	193ffc26 	beq	r3,r4,15098 <__alt_data_end+0xfc015098>
   150a8:	003e8706 	br	14ac8 <__alt_data_end+0xfc014ac8>
   150ac:	d8800517 	ldw	r2,20(sp)
   150b0:	00a3c83a 	sub	r17,zero,r2
   150b4:	8800a426 	beq	r17,zero,15348 <_dtoa_r+0x1498>
   150b8:	888003cc 	andi	r2,r17,15
   150bc:	100490fa 	slli	r2,r2,3
   150c0:	00c000f4 	movhi	r3,3
   150c4:	18ea8704 	addi	r3,r3,-21988
   150c8:	1885883a 	add	r2,r3,r2
   150cc:	11800017 	ldw	r6,0(r2)
   150d0:	11c00117 	ldw	r7,4(r2)
   150d4:	9009883a 	mov	r4,r18
   150d8:	980b883a 	mov	r5,r19
   150dc:	8823d13a 	srai	r17,r17,4
   150e0:	001da680 	call	1da68 <__muldf3>
   150e4:	d8800f15 	stw	r2,60(sp)
   150e8:	d8c01015 	stw	r3,64(sp)
   150ec:	8800e826 	beq	r17,zero,15490 <_dtoa_r+0x15e0>
   150f0:	050000f4 	movhi	r20,3
   150f4:	a52a7d04 	addi	r20,r20,-22028
   150f8:	04000084 	movi	r16,2
   150fc:	8980004c 	andi	r6,r17,1
   15100:	1009883a 	mov	r4,r2
   15104:	8823d07a 	srai	r17,r17,1
   15108:	180b883a 	mov	r5,r3
   1510c:	30000426 	beq	r6,zero,15120 <_dtoa_r+0x1270>
   15110:	a1800017 	ldw	r6,0(r20)
   15114:	a1c00117 	ldw	r7,4(r20)
   15118:	84000044 	addi	r16,r16,1
   1511c:	001da680 	call	1da68 <__muldf3>
   15120:	a5000204 	addi	r20,r20,8
   15124:	883ff51e 	bne	r17,zero,150fc <__alt_data_end+0xfc0150fc>
   15128:	d8800f15 	stw	r2,60(sp)
   1512c:	d8c01015 	stw	r3,64(sp)
   15130:	003c7606 	br	1430c <__alt_data_end+0xfc01430c>
   15134:	00c00c04 	movi	r3,48
   15138:	10c00005 	stb	r3,0(r2)
   1513c:	d8c00517 	ldw	r3,20(sp)
   15140:	bd3fffc3 	ldbu	r20,-1(r23)
   15144:	18c00044 	addi	r3,r3,1
   15148:	d8c00515 	stw	r3,20(sp)
   1514c:	003db906 	br	14834 <__alt_data_end+0xfc014834>
   15150:	89400117 	ldw	r5,4(r17)
   15154:	e009883a 	mov	r4,fp
   15158:	0016aec0 	call	16aec <_Balloc>
   1515c:	89800417 	ldw	r6,16(r17)
   15160:	89400304 	addi	r5,r17,12
   15164:	11000304 	addi	r4,r2,12
   15168:	31800084 	addi	r6,r6,2
   1516c:	318d883a 	add	r6,r6,r6
   15170:	318d883a 	add	r6,r6,r6
   15174:	1027883a 	mov	r19,r2
   15178:	000eb5c0 	call	eb5c <memcpy>
   1517c:	01800044 	movi	r6,1
   15180:	980b883a 	mov	r5,r19
   15184:	e009883a 	mov	r4,fp
   15188:	00173280 	call	17328 <__lshift>
   1518c:	1029883a 	mov	r20,r2
   15190:	003ecc06 	br	14cc4 <__alt_data_end+0xfc014cc4>
   15194:	00800e44 	movi	r2,57
   15198:	90809026 	beq	r18,r2,153dc <_dtoa_r+0x152c>
   1519c:	92000044 	addi	r8,r18,1
   151a0:	003f1f06 	br	14e20 <__alt_data_end+0xfc014e20>
   151a4:	9011883a 	mov	r8,r18
   151a8:	8825883a 	mov	r18,r17
   151ac:	a023883a 	mov	r17,r20
   151b0:	003e2906 	br	14a58 <__alt_data_end+0xfc014a58>
   151b4:	002b883a 	mov	r21,zero
   151b8:	0023883a 	mov	r17,zero
   151bc:	003f5406 	br	14f10 <__alt_data_end+0xfc014f10>
   151c0:	61bfffc4 	addi	r6,r12,-1
   151c4:	300490fa 	slli	r2,r6,3
   151c8:	00c000f4 	movhi	r3,3
   151cc:	18ea8704 	addi	r3,r3,-21988
   151d0:	1885883a 	add	r2,r3,r2
   151d4:	11000017 	ldw	r4,0(r2)
   151d8:	11400117 	ldw	r5,4(r2)
   151dc:	d8800717 	ldw	r2,28(sp)
   151e0:	880f883a 	mov	r7,r17
   151e4:	d9801215 	stw	r6,72(sp)
   151e8:	800d883a 	mov	r6,r16
   151ec:	db001615 	stw	r12,88(sp)
   151f0:	15c00044 	addi	r23,r2,1
   151f4:	001da680 	call	1da68 <__muldf3>
   151f8:	d9401017 	ldw	r5,64(sp)
   151fc:	d9000f17 	ldw	r4,60(sp)
   15200:	d8c01515 	stw	r3,84(sp)
   15204:	d8801415 	stw	r2,80(sp)
   15208:	001ebd00 	call	1ebd0 <__fixdfsi>
   1520c:	1009883a 	mov	r4,r2
   15210:	1021883a 	mov	r16,r2
   15214:	001ec500 	call	1ec50 <__floatsidf>
   15218:	d9000f17 	ldw	r4,60(sp)
   1521c:	d9401017 	ldw	r5,64(sp)
   15220:	100d883a 	mov	r6,r2
   15224:	180f883a 	mov	r7,r3
   15228:	001e2d40 	call	1e2d4 <__subdf3>
   1522c:	1829883a 	mov	r20,r3
   15230:	d8c00717 	ldw	r3,28(sp)
   15234:	84000c04 	addi	r16,r16,48
   15238:	1023883a 	mov	r17,r2
   1523c:	1c000005 	stb	r16,0(r3)
   15240:	db001617 	ldw	r12,88(sp)
   15244:	00800044 	movi	r2,1
   15248:	60802226 	beq	r12,r2,152d4 <_dtoa_r+0x1424>
   1524c:	d9c00717 	ldw	r7,28(sp)
   15250:	8805883a 	mov	r2,r17
   15254:	b82b883a 	mov	r21,r23
   15258:	3b19883a 	add	r12,r7,r12
   1525c:	6023883a 	mov	r17,r12
   15260:	a007883a 	mov	r3,r20
   15264:	dc800f15 	stw	r18,60(sp)
   15268:	000d883a 	mov	r6,zero
   1526c:	01d00934 	movhi	r7,16420
   15270:	1009883a 	mov	r4,r2
   15274:	180b883a 	mov	r5,r3
   15278:	001da680 	call	1da68 <__muldf3>
   1527c:	180b883a 	mov	r5,r3
   15280:	1009883a 	mov	r4,r2
   15284:	1829883a 	mov	r20,r3
   15288:	1025883a 	mov	r18,r2
   1528c:	001ebd00 	call	1ebd0 <__fixdfsi>
   15290:	1009883a 	mov	r4,r2
   15294:	1021883a 	mov	r16,r2
   15298:	001ec500 	call	1ec50 <__floatsidf>
   1529c:	100d883a 	mov	r6,r2
   152a0:	180f883a 	mov	r7,r3
   152a4:	9009883a 	mov	r4,r18
   152a8:	a00b883a 	mov	r5,r20
   152ac:	84000c04 	addi	r16,r16,48
   152b0:	001e2d40 	call	1e2d4 <__subdf3>
   152b4:	ad400044 	addi	r21,r21,1
   152b8:	ac3fffc5 	stb	r16,-1(r21)
   152bc:	ac7fea1e 	bne	r21,r17,15268 <__alt_data_end+0xfc015268>
   152c0:	1023883a 	mov	r17,r2
   152c4:	d8801217 	ldw	r2,72(sp)
   152c8:	dc800f17 	ldw	r18,60(sp)
   152cc:	1829883a 	mov	r20,r3
   152d0:	b8af883a 	add	r23,r23,r2
   152d4:	d9001417 	ldw	r4,80(sp)
   152d8:	d9401517 	ldw	r5,84(sp)
   152dc:	000d883a 	mov	r6,zero
   152e0:	01cff834 	movhi	r7,16352
   152e4:	001c5940 	call	1c594 <__adddf3>
   152e8:	880d883a 	mov	r6,r17
   152ec:	a00f883a 	mov	r7,r20
   152f0:	1009883a 	mov	r4,r2
   152f4:	180b883a 	mov	r5,r3
   152f8:	001d9740 	call	1d974 <__ledf2>
   152fc:	10003e0e 	bge	r2,zero,153f8 <_dtoa_r+0x1548>
   15300:	d9001317 	ldw	r4,76(sp)
   15304:	bd3fffc3 	ldbu	r20,-1(r23)
   15308:	d9000515 	stw	r4,20(sp)
   1530c:	003d3b06 	br	147fc <__alt_data_end+0xfc0147fc>
   15310:	0027883a 	mov	r19,zero
   15314:	003f1b06 	br	14f84 <__alt_data_end+0xfc014f84>
   15318:	d8800817 	ldw	r2,32(sp)
   1531c:	11e9c83a 	sub	r20,r2,r7
   15320:	0005883a 	mov	r2,zero
   15324:	003d5406 	br	14878 <__alt_data_end+0xfc014878>
   15328:	00800044 	movi	r2,1
   1532c:	003dc706 	br	14a4c <__alt_data_end+0xfc014a4c>
   15330:	d8c00217 	ldw	r3,8(sp)
   15334:	00800d84 	movi	r2,54
   15338:	dd400a17 	ldw	r21,40(sp)
   1533c:	10c5c83a 	sub	r2,r2,r3
   15340:	dd000817 	ldw	r20,32(sp)
   15344:	003d4c06 	br	14878 <__alt_data_end+0xfc014878>
   15348:	dc800f15 	stw	r18,60(sp)
   1534c:	dcc01015 	stw	r19,64(sp)
   15350:	04000084 	movi	r16,2
   15354:	003bed06 	br	1430c <__alt_data_end+0xfc01430c>
   15358:	d9000617 	ldw	r4,24(sp)
   1535c:	203f0d26 	beq	r4,zero,14f94 <__alt_data_end+0xfc014f94>
   15360:	d9800c17 	ldw	r6,48(sp)
   15364:	01bcab0e 	bge	zero,r6,14614 <__alt_data_end+0xfc014614>
   15368:	d9401017 	ldw	r5,64(sp)
   1536c:	d9000f17 	ldw	r4,60(sp)
   15370:	000d883a 	mov	r6,zero
   15374:	01d00934 	movhi	r7,16420
   15378:	001da680 	call	1da68 <__muldf3>
   1537c:	81000044 	addi	r4,r16,1
   15380:	d8800f15 	stw	r2,60(sp)
   15384:	d8c01015 	stw	r3,64(sp)
   15388:	001ec500 	call	1ec50 <__floatsidf>
   1538c:	d9800f17 	ldw	r6,60(sp)
   15390:	d9c01017 	ldw	r7,64(sp)
   15394:	1009883a 	mov	r4,r2
   15398:	180b883a 	mov	r5,r3
   1539c:	001da680 	call	1da68 <__muldf3>
   153a0:	01d00734 	movhi	r7,16412
   153a4:	000d883a 	mov	r6,zero
   153a8:	1009883a 	mov	r4,r2
   153ac:	180b883a 	mov	r5,r3
   153b0:	001c5940 	call	1c594 <__adddf3>
   153b4:	d9c00517 	ldw	r7,20(sp)
   153b8:	047f3034 	movhi	r17,64704
   153bc:	1021883a 	mov	r16,r2
   153c0:	39ffffc4 	addi	r7,r7,-1
   153c4:	d9c01315 	stw	r7,76(sp)
   153c8:	1c63883a 	add	r17,r3,r17
   153cc:	db000c17 	ldw	r12,48(sp)
   153d0:	003bea06 	br	1437c <__alt_data_end+0xfc01437c>
   153d4:	dc000915 	stw	r16,36(sp)
   153d8:	003e0e06 	br	14c14 <__alt_data_end+0xfc014c14>
   153dc:	01000e44 	movi	r4,57
   153e0:	8825883a 	mov	r18,r17
   153e4:	9dc00044 	addi	r23,r19,1
   153e8:	99000005 	stb	r4,0(r19)
   153ec:	a023883a 	mov	r17,r20
   153f0:	dc000915 	stw	r16,36(sp)
   153f4:	003da406 	br	14a88 <__alt_data_end+0xfc014a88>
   153f8:	d9801417 	ldw	r6,80(sp)
   153fc:	d9c01517 	ldw	r7,84(sp)
   15400:	0009883a 	mov	r4,zero
   15404:	014ff834 	movhi	r5,16352
   15408:	001e2d40 	call	1e2d4 <__subdf3>
   1540c:	880d883a 	mov	r6,r17
   15410:	a00f883a 	mov	r7,r20
   15414:	1009883a 	mov	r4,r2
   15418:	180b883a 	mov	r5,r3
   1541c:	001d8980 	call	1d898 <__gedf2>
   15420:	00bc7c0e 	bge	zero,r2,14614 <__alt_data_end+0xfc014614>
   15424:	01000c04 	movi	r4,48
   15428:	00000106 	br	15430 <_dtoa_r+0x1580>
   1542c:	102f883a 	mov	r23,r2
   15430:	b8bfffc4 	addi	r2,r23,-1
   15434:	10c00007 	ldb	r3,0(r2)
   15438:	193ffc26 	beq	r3,r4,1542c <__alt_data_end+0xfc01542c>
   1543c:	d9801317 	ldw	r6,76(sp)
   15440:	d9800515 	stw	r6,20(sp)
   15444:	003c4406 	br	14558 <__alt_data_end+0xfc014558>
   15448:	d9801317 	ldw	r6,76(sp)
   1544c:	d9800515 	stw	r6,20(sp)
   15450:	003cea06 	br	147fc <__alt_data_end+0xfc0147fc>
   15454:	dd800f17 	ldw	r22,60(sp)
   15458:	dcc01017 	ldw	r19,64(sp)
   1545c:	dc801217 	ldw	r18,72(sp)
   15460:	003c6c06 	br	14614 <__alt_data_end+0xfc014614>
   15464:	903e031e 	bne	r18,zero,14c74 <__alt_data_end+0xfc014c74>
   15468:	003ebb06 	br	14f58 <__alt_data_end+0xfc014f58>
   1546c:	103e6c1e 	bne	r2,zero,14e20 <__alt_data_end+0xfc014e20>
   15470:	4080004c 	andi	r2,r8,1
   15474:	103e6a26 	beq	r2,zero,14e20 <__alt_data_end+0xfc014e20>
   15478:	003e6606 	br	14e14 <__alt_data_end+0xfc014e14>
   1547c:	d8c00317 	ldw	r3,12(sp)
   15480:	00800084 	movi	r2,2
   15484:	10c02916 	blt	r2,r3,1552c <_dtoa_r+0x167c>
   15488:	d9000c17 	ldw	r4,48(sp)
   1548c:	003e8806 	br	14eb0 <__alt_data_end+0xfc014eb0>
   15490:	04000084 	movi	r16,2
   15494:	003b9d06 	br	1430c <__alt_data_end+0xfc01430c>
   15498:	d9001317 	ldw	r4,76(sp)
   1549c:	d9000515 	stw	r4,20(sp)
   154a0:	003cd606 	br	147fc <__alt_data_end+0xfc0147fc>
   154a4:	d8801317 	ldw	r2,76(sp)
   154a8:	d8800515 	stw	r2,20(sp)
   154ac:	003c2a06 	br	14558 <__alt_data_end+0xfc014558>
   154b0:	d9800317 	ldw	r6,12(sp)
   154b4:	00800084 	movi	r2,2
   154b8:	11801516 	blt	r2,r6,15510 <_dtoa_r+0x1660>
   154bc:	d9c00c17 	ldw	r7,48(sp)
   154c0:	d9c00615 	stw	r7,24(sp)
   154c4:	003df706 	br	14ca4 <__alt_data_end+0xfc014ca4>
   154c8:	193d3926 	beq	r3,r4,149b0 <__alt_data_end+0xfc0149b0>
   154cc:	00c00f04 	movi	r3,60
   154d0:	1885c83a 	sub	r2,r3,r2
   154d4:	003ddf06 	br	14c54 <__alt_data_end+0xfc014c54>
   154d8:	e009883a 	mov	r4,fp
   154dc:	e0001115 	stw	zero,68(fp)
   154e0:	000b883a 	mov	r5,zero
   154e4:	0016aec0 	call	16aec <_Balloc>
   154e8:	d8800715 	stw	r2,28(sp)
   154ec:	d8c00717 	ldw	r3,28(sp)
   154f0:	00bfffc4 	movi	r2,-1
   154f4:	01000044 	movi	r4,1
   154f8:	d8800c15 	stw	r2,48(sp)
   154fc:	e0c01015 	stw	r3,64(fp)
   15500:	d9000b15 	stw	r4,44(sp)
   15504:	d8800615 	stw	r2,24(sp)
   15508:	d8002215 	stw	zero,136(sp)
   1550c:	003c4106 	br	14614 <__alt_data_end+0xfc014614>
   15510:	d8c00c17 	ldw	r3,48(sp)
   15514:	d8c00615 	stw	r3,24(sp)
   15518:	003e7006 	br	14edc <__alt_data_end+0xfc014edc>
   1551c:	04400044 	movi	r17,1
   15520:	003b2006 	br	141a4 <__alt_data_end+0xfc0141a4>
   15524:	000b883a 	mov	r5,zero
   15528:	003b3d06 	br	14220 <__alt_data_end+0xfc014220>
   1552c:	d8800c17 	ldw	r2,48(sp)
   15530:	d8800615 	stw	r2,24(sp)
   15534:	003e6906 	br	14edc <__alt_data_end+0xfc014edc>

00015538 <__sflush_r>:
   15538:	2880030b 	ldhu	r2,12(r5)
   1553c:	defffb04 	addi	sp,sp,-20
   15540:	dcc00315 	stw	r19,12(sp)
   15544:	dc400115 	stw	r17,4(sp)
   15548:	dfc00415 	stw	ra,16(sp)
   1554c:	dc800215 	stw	r18,8(sp)
   15550:	dc000015 	stw	r16,0(sp)
   15554:	10c0020c 	andi	r3,r2,8
   15558:	2823883a 	mov	r17,r5
   1555c:	2027883a 	mov	r19,r4
   15560:	1800311e 	bne	r3,zero,15628 <__sflush_r+0xf0>
   15564:	28c00117 	ldw	r3,4(r5)
   15568:	10820014 	ori	r2,r2,2048
   1556c:	2880030d 	sth	r2,12(r5)
   15570:	00c04b0e 	bge	zero,r3,156a0 <__sflush_r+0x168>
   15574:	8a000a17 	ldw	r8,40(r17)
   15578:	40002326 	beq	r8,zero,15608 <__sflush_r+0xd0>
   1557c:	9c000017 	ldw	r16,0(r19)
   15580:	10c4000c 	andi	r3,r2,4096
   15584:	98000015 	stw	zero,0(r19)
   15588:	18004826 	beq	r3,zero,156ac <__sflush_r+0x174>
   1558c:	89801417 	ldw	r6,80(r17)
   15590:	10c0010c 	andi	r3,r2,4
   15594:	18000626 	beq	r3,zero,155b0 <__sflush_r+0x78>
   15598:	88c00117 	ldw	r3,4(r17)
   1559c:	88800c17 	ldw	r2,48(r17)
   155a0:	30cdc83a 	sub	r6,r6,r3
   155a4:	10000226 	beq	r2,zero,155b0 <__sflush_r+0x78>
   155a8:	88800f17 	ldw	r2,60(r17)
   155ac:	308dc83a 	sub	r6,r6,r2
   155b0:	89400717 	ldw	r5,28(r17)
   155b4:	000f883a 	mov	r7,zero
   155b8:	9809883a 	mov	r4,r19
   155bc:	403ee83a 	callr	r8
   155c0:	00ffffc4 	movi	r3,-1
   155c4:	10c04426 	beq	r2,r3,156d8 <__sflush_r+0x1a0>
   155c8:	88c0030b 	ldhu	r3,12(r17)
   155cc:	89000417 	ldw	r4,16(r17)
   155d0:	88000115 	stw	zero,4(r17)
   155d4:	197dffcc 	andi	r5,r3,63487
   155d8:	8940030d 	sth	r5,12(r17)
   155dc:	89000015 	stw	r4,0(r17)
   155e0:	18c4000c 	andi	r3,r3,4096
   155e4:	18002c1e 	bne	r3,zero,15698 <__sflush_r+0x160>
   155e8:	89400c17 	ldw	r5,48(r17)
   155ec:	9c000015 	stw	r16,0(r19)
   155f0:	28000526 	beq	r5,zero,15608 <__sflush_r+0xd0>
   155f4:	88801004 	addi	r2,r17,64
   155f8:	28800226 	beq	r5,r2,15604 <__sflush_r+0xcc>
   155fc:	9809883a 	mov	r4,r19
   15600:	0015cb40 	call	15cb4 <_free_r>
   15604:	88000c15 	stw	zero,48(r17)
   15608:	0005883a 	mov	r2,zero
   1560c:	dfc00417 	ldw	ra,16(sp)
   15610:	dcc00317 	ldw	r19,12(sp)
   15614:	dc800217 	ldw	r18,8(sp)
   15618:	dc400117 	ldw	r17,4(sp)
   1561c:	dc000017 	ldw	r16,0(sp)
   15620:	dec00504 	addi	sp,sp,20
   15624:	f800283a 	ret
   15628:	2c800417 	ldw	r18,16(r5)
   1562c:	903ff626 	beq	r18,zero,15608 <__alt_data_end+0xfc015608>
   15630:	2c000017 	ldw	r16,0(r5)
   15634:	108000cc 	andi	r2,r2,3
   15638:	2c800015 	stw	r18,0(r5)
   1563c:	84a1c83a 	sub	r16,r16,r18
   15640:	1000131e 	bne	r2,zero,15690 <__sflush_r+0x158>
   15644:	28800517 	ldw	r2,20(r5)
   15648:	88800215 	stw	r2,8(r17)
   1564c:	04000316 	blt	zero,r16,1565c <__sflush_r+0x124>
   15650:	003fed06 	br	15608 <__alt_data_end+0xfc015608>
   15654:	90a5883a 	add	r18,r18,r2
   15658:	043feb0e 	bge	zero,r16,15608 <__alt_data_end+0xfc015608>
   1565c:	88800917 	ldw	r2,36(r17)
   15660:	89400717 	ldw	r5,28(r17)
   15664:	800f883a 	mov	r7,r16
   15668:	900d883a 	mov	r6,r18
   1566c:	9809883a 	mov	r4,r19
   15670:	103ee83a 	callr	r2
   15674:	80a1c83a 	sub	r16,r16,r2
   15678:	00bff616 	blt	zero,r2,15654 <__alt_data_end+0xfc015654>
   1567c:	88c0030b 	ldhu	r3,12(r17)
   15680:	00bfffc4 	movi	r2,-1
   15684:	18c01014 	ori	r3,r3,64
   15688:	88c0030d 	sth	r3,12(r17)
   1568c:	003fdf06 	br	1560c <__alt_data_end+0xfc01560c>
   15690:	0005883a 	mov	r2,zero
   15694:	003fec06 	br	15648 <__alt_data_end+0xfc015648>
   15698:	88801415 	stw	r2,80(r17)
   1569c:	003fd206 	br	155e8 <__alt_data_end+0xfc0155e8>
   156a0:	28c00f17 	ldw	r3,60(r5)
   156a4:	00ffb316 	blt	zero,r3,15574 <__alt_data_end+0xfc015574>
   156a8:	003fd706 	br	15608 <__alt_data_end+0xfc015608>
   156ac:	89400717 	ldw	r5,28(r17)
   156b0:	000d883a 	mov	r6,zero
   156b4:	01c00044 	movi	r7,1
   156b8:	9809883a 	mov	r4,r19
   156bc:	403ee83a 	callr	r8
   156c0:	100d883a 	mov	r6,r2
   156c4:	00bfffc4 	movi	r2,-1
   156c8:	30801426 	beq	r6,r2,1571c <__sflush_r+0x1e4>
   156cc:	8880030b 	ldhu	r2,12(r17)
   156d0:	8a000a17 	ldw	r8,40(r17)
   156d4:	003fae06 	br	15590 <__alt_data_end+0xfc015590>
   156d8:	98c00017 	ldw	r3,0(r19)
   156dc:	183fba26 	beq	r3,zero,155c8 <__alt_data_end+0xfc0155c8>
   156e0:	01000744 	movi	r4,29
   156e4:	19000626 	beq	r3,r4,15700 <__sflush_r+0x1c8>
   156e8:	01000584 	movi	r4,22
   156ec:	19000426 	beq	r3,r4,15700 <__sflush_r+0x1c8>
   156f0:	88c0030b 	ldhu	r3,12(r17)
   156f4:	18c01014 	ori	r3,r3,64
   156f8:	88c0030d 	sth	r3,12(r17)
   156fc:	003fc306 	br	1560c <__alt_data_end+0xfc01560c>
   15700:	8880030b 	ldhu	r2,12(r17)
   15704:	88c00417 	ldw	r3,16(r17)
   15708:	88000115 	stw	zero,4(r17)
   1570c:	10bdffcc 	andi	r2,r2,63487
   15710:	8880030d 	sth	r2,12(r17)
   15714:	88c00015 	stw	r3,0(r17)
   15718:	003fb306 	br	155e8 <__alt_data_end+0xfc0155e8>
   1571c:	98800017 	ldw	r2,0(r19)
   15720:	103fea26 	beq	r2,zero,156cc <__alt_data_end+0xfc0156cc>
   15724:	00c00744 	movi	r3,29
   15728:	10c00226 	beq	r2,r3,15734 <__sflush_r+0x1fc>
   1572c:	00c00584 	movi	r3,22
   15730:	10c0031e 	bne	r2,r3,15740 <__sflush_r+0x208>
   15734:	9c000015 	stw	r16,0(r19)
   15738:	0005883a 	mov	r2,zero
   1573c:	003fb306 	br	1560c <__alt_data_end+0xfc01560c>
   15740:	88c0030b 	ldhu	r3,12(r17)
   15744:	3005883a 	mov	r2,r6
   15748:	18c01014 	ori	r3,r3,64
   1574c:	88c0030d 	sth	r3,12(r17)
   15750:	003fae06 	br	1560c <__alt_data_end+0xfc01560c>

00015754 <_fflush_r>:
   15754:	defffd04 	addi	sp,sp,-12
   15758:	dc000115 	stw	r16,4(sp)
   1575c:	dfc00215 	stw	ra,8(sp)
   15760:	2021883a 	mov	r16,r4
   15764:	20000226 	beq	r4,zero,15770 <_fflush_r+0x1c>
   15768:	20800e17 	ldw	r2,56(r4)
   1576c:	10000c26 	beq	r2,zero,157a0 <_fflush_r+0x4c>
   15770:	2880030f 	ldh	r2,12(r5)
   15774:	1000051e 	bne	r2,zero,1578c <_fflush_r+0x38>
   15778:	0005883a 	mov	r2,zero
   1577c:	dfc00217 	ldw	ra,8(sp)
   15780:	dc000117 	ldw	r16,4(sp)
   15784:	dec00304 	addi	sp,sp,12
   15788:	f800283a 	ret
   1578c:	8009883a 	mov	r4,r16
   15790:	dfc00217 	ldw	ra,8(sp)
   15794:	dc000117 	ldw	r16,4(sp)
   15798:	dec00304 	addi	sp,sp,12
   1579c:	00155381 	jmpi	15538 <__sflush_r>
   157a0:	d9400015 	stw	r5,0(sp)
   157a4:	0015b400 	call	15b40 <__sinit>
   157a8:	d9400017 	ldw	r5,0(sp)
   157ac:	003ff006 	br	15770 <__alt_data_end+0xfc015770>

000157b0 <fflush>:
   157b0:	20000526 	beq	r4,zero,157c8 <fflush+0x18>
   157b4:	008000f4 	movhi	r2,3
   157b8:	10b74b04 	addi	r2,r2,-8916
   157bc:	200b883a 	mov	r5,r4
   157c0:	11000017 	ldw	r4,0(r2)
   157c4:	00157541 	jmpi	15754 <_fflush_r>
   157c8:	008000f4 	movhi	r2,3
   157cc:	10b74a04 	addi	r2,r2,-8920
   157d0:	11000017 	ldw	r4,0(r2)
   157d4:	01400074 	movhi	r5,1
   157d8:	2955d504 	addi	r5,r5,22356
   157dc:	00165501 	jmpi	16550 <_fwalk_reent>

000157e0 <__fp_unlock>:
   157e0:	0005883a 	mov	r2,zero
   157e4:	f800283a 	ret

000157e8 <_cleanup_r>:
   157e8:	014000b4 	movhi	r5,2
   157ec:	296cdc04 	addi	r5,r5,-19600
   157f0:	00165501 	jmpi	16550 <_fwalk_reent>

000157f4 <__sinit.part.1>:
   157f4:	defff704 	addi	sp,sp,-36
   157f8:	00c00074 	movhi	r3,1
   157fc:	dfc00815 	stw	ra,32(sp)
   15800:	ddc00715 	stw	r23,28(sp)
   15804:	dd800615 	stw	r22,24(sp)
   15808:	dd400515 	stw	r21,20(sp)
   1580c:	dd000415 	stw	r20,16(sp)
   15810:	dcc00315 	stw	r19,12(sp)
   15814:	dc800215 	stw	r18,8(sp)
   15818:	dc400115 	stw	r17,4(sp)
   1581c:	dc000015 	stw	r16,0(sp)
   15820:	18d5fa04 	addi	r3,r3,22504
   15824:	24000117 	ldw	r16,4(r4)
   15828:	20c00f15 	stw	r3,60(r4)
   1582c:	2080bb04 	addi	r2,r4,748
   15830:	00c000c4 	movi	r3,3
   15834:	20c0b915 	stw	r3,740(r4)
   15838:	2080ba15 	stw	r2,744(r4)
   1583c:	2000b815 	stw	zero,736(r4)
   15840:	05c00204 	movi	r23,8
   15844:	00800104 	movi	r2,4
   15848:	2025883a 	mov	r18,r4
   1584c:	b80d883a 	mov	r6,r23
   15850:	81001704 	addi	r4,r16,92
   15854:	000b883a 	mov	r5,zero
   15858:	80000015 	stw	zero,0(r16)
   1585c:	80000115 	stw	zero,4(r16)
   15860:	80000215 	stw	zero,8(r16)
   15864:	8080030d 	sth	r2,12(r16)
   15868:	80001915 	stw	zero,100(r16)
   1586c:	8000038d 	sth	zero,14(r16)
   15870:	80000415 	stw	zero,16(r16)
   15874:	80000515 	stw	zero,20(r16)
   15878:	80000615 	stw	zero,24(r16)
   1587c:	000eca40 	call	eca4 <memset>
   15880:	058000b4 	movhi	r22,2
   15884:	94400217 	ldw	r17,8(r18)
   15888:	054000b4 	movhi	r21,2
   1588c:	050000b4 	movhi	r20,2
   15890:	04c000b4 	movhi	r19,2
   15894:	b5a0b904 	addi	r22,r22,-32028
   15898:	ad60d004 	addi	r21,r21,-31936
   1589c:	a520ef04 	addi	r20,r20,-31812
   158a0:	9ce10604 	addi	r19,r19,-31720
   158a4:	85800815 	stw	r22,32(r16)
   158a8:	85400915 	stw	r21,36(r16)
   158ac:	85000a15 	stw	r20,40(r16)
   158b0:	84c00b15 	stw	r19,44(r16)
   158b4:	84000715 	stw	r16,28(r16)
   158b8:	00800284 	movi	r2,10
   158bc:	8880030d 	sth	r2,12(r17)
   158c0:	00800044 	movi	r2,1
   158c4:	b80d883a 	mov	r6,r23
   158c8:	89001704 	addi	r4,r17,92
   158cc:	000b883a 	mov	r5,zero
   158d0:	88000015 	stw	zero,0(r17)
   158d4:	88000115 	stw	zero,4(r17)
   158d8:	88000215 	stw	zero,8(r17)
   158dc:	88001915 	stw	zero,100(r17)
   158e0:	8880038d 	sth	r2,14(r17)
   158e4:	88000415 	stw	zero,16(r17)
   158e8:	88000515 	stw	zero,20(r17)
   158ec:	88000615 	stw	zero,24(r17)
   158f0:	000eca40 	call	eca4 <memset>
   158f4:	94000317 	ldw	r16,12(r18)
   158f8:	00800484 	movi	r2,18
   158fc:	8c400715 	stw	r17,28(r17)
   15900:	8d800815 	stw	r22,32(r17)
   15904:	8d400915 	stw	r21,36(r17)
   15908:	8d000a15 	stw	r20,40(r17)
   1590c:	8cc00b15 	stw	r19,44(r17)
   15910:	8080030d 	sth	r2,12(r16)
   15914:	00800084 	movi	r2,2
   15918:	80000015 	stw	zero,0(r16)
   1591c:	80000115 	stw	zero,4(r16)
   15920:	80000215 	stw	zero,8(r16)
   15924:	80001915 	stw	zero,100(r16)
   15928:	8080038d 	sth	r2,14(r16)
   1592c:	80000415 	stw	zero,16(r16)
   15930:	80000515 	stw	zero,20(r16)
   15934:	80000615 	stw	zero,24(r16)
   15938:	b80d883a 	mov	r6,r23
   1593c:	000b883a 	mov	r5,zero
   15940:	81001704 	addi	r4,r16,92
   15944:	000eca40 	call	eca4 <memset>
   15948:	00800044 	movi	r2,1
   1594c:	84000715 	stw	r16,28(r16)
   15950:	85800815 	stw	r22,32(r16)
   15954:	85400915 	stw	r21,36(r16)
   15958:	85000a15 	stw	r20,40(r16)
   1595c:	84c00b15 	stw	r19,44(r16)
   15960:	90800e15 	stw	r2,56(r18)
   15964:	dfc00817 	ldw	ra,32(sp)
   15968:	ddc00717 	ldw	r23,28(sp)
   1596c:	dd800617 	ldw	r22,24(sp)
   15970:	dd400517 	ldw	r21,20(sp)
   15974:	dd000417 	ldw	r20,16(sp)
   15978:	dcc00317 	ldw	r19,12(sp)
   1597c:	dc800217 	ldw	r18,8(sp)
   15980:	dc400117 	ldw	r17,4(sp)
   15984:	dc000017 	ldw	r16,0(sp)
   15988:	dec00904 	addi	sp,sp,36
   1598c:	f800283a 	ret

00015990 <__fp_lock>:
   15990:	0005883a 	mov	r2,zero
   15994:	f800283a 	ret

00015998 <__sfmoreglue>:
   15998:	defffc04 	addi	sp,sp,-16
   1599c:	dc800215 	stw	r18,8(sp)
   159a0:	2825883a 	mov	r18,r5
   159a4:	dc000015 	stw	r16,0(sp)
   159a8:	01401a04 	movi	r5,104
   159ac:	2021883a 	mov	r16,r4
   159b0:	913fffc4 	addi	r4,r18,-1
   159b4:	dfc00315 	stw	ra,12(sp)
   159b8:	dc400115 	stw	r17,4(sp)
   159bc:	000cda80 	call	cda8 <__mulsi3>
   159c0:	8009883a 	mov	r4,r16
   159c4:	11401d04 	addi	r5,r2,116
   159c8:	1023883a 	mov	r17,r2
   159cc:	000e3500 	call	e350 <_malloc_r>
   159d0:	1021883a 	mov	r16,r2
   159d4:	10000726 	beq	r2,zero,159f4 <__sfmoreglue+0x5c>
   159d8:	11000304 	addi	r4,r2,12
   159dc:	10000015 	stw	zero,0(r2)
   159e0:	14800115 	stw	r18,4(r2)
   159e4:	11000215 	stw	r4,8(r2)
   159e8:	89801a04 	addi	r6,r17,104
   159ec:	000b883a 	mov	r5,zero
   159f0:	000eca40 	call	eca4 <memset>
   159f4:	8005883a 	mov	r2,r16
   159f8:	dfc00317 	ldw	ra,12(sp)
   159fc:	dc800217 	ldw	r18,8(sp)
   15a00:	dc400117 	ldw	r17,4(sp)
   15a04:	dc000017 	ldw	r16,0(sp)
   15a08:	dec00404 	addi	sp,sp,16
   15a0c:	f800283a 	ret

00015a10 <__sfp>:
   15a10:	defffb04 	addi	sp,sp,-20
   15a14:	dc000015 	stw	r16,0(sp)
   15a18:	040000f4 	movhi	r16,3
   15a1c:	84374a04 	addi	r16,r16,-8920
   15a20:	dcc00315 	stw	r19,12(sp)
   15a24:	2027883a 	mov	r19,r4
   15a28:	81000017 	ldw	r4,0(r16)
   15a2c:	dfc00415 	stw	ra,16(sp)
   15a30:	dc800215 	stw	r18,8(sp)
   15a34:	20800e17 	ldw	r2,56(r4)
   15a38:	dc400115 	stw	r17,4(sp)
   15a3c:	1000021e 	bne	r2,zero,15a48 <__sfp+0x38>
   15a40:	00157f40 	call	157f4 <__sinit.part.1>
   15a44:	81000017 	ldw	r4,0(r16)
   15a48:	2480b804 	addi	r18,r4,736
   15a4c:	047fffc4 	movi	r17,-1
   15a50:	91000117 	ldw	r4,4(r18)
   15a54:	94000217 	ldw	r16,8(r18)
   15a58:	213fffc4 	addi	r4,r4,-1
   15a5c:	20000a16 	blt	r4,zero,15a88 <__sfp+0x78>
   15a60:	8080030f 	ldh	r2,12(r16)
   15a64:	10000c26 	beq	r2,zero,15a98 <__sfp+0x88>
   15a68:	80c01d04 	addi	r3,r16,116
   15a6c:	00000206 	br	15a78 <__sfp+0x68>
   15a70:	18bfe60f 	ldh	r2,-104(r3)
   15a74:	10000826 	beq	r2,zero,15a98 <__sfp+0x88>
   15a78:	213fffc4 	addi	r4,r4,-1
   15a7c:	1c3ffd04 	addi	r16,r3,-12
   15a80:	18c01a04 	addi	r3,r3,104
   15a84:	247ffa1e 	bne	r4,r17,15a70 <__alt_data_end+0xfc015a70>
   15a88:	90800017 	ldw	r2,0(r18)
   15a8c:	10001d26 	beq	r2,zero,15b04 <__sfp+0xf4>
   15a90:	1025883a 	mov	r18,r2
   15a94:	003fee06 	br	15a50 <__alt_data_end+0xfc015a50>
   15a98:	00bfffc4 	movi	r2,-1
   15a9c:	8080038d 	sth	r2,14(r16)
   15aa0:	00800044 	movi	r2,1
   15aa4:	8080030d 	sth	r2,12(r16)
   15aa8:	80001915 	stw	zero,100(r16)
   15aac:	80000015 	stw	zero,0(r16)
   15ab0:	80000215 	stw	zero,8(r16)
   15ab4:	80000115 	stw	zero,4(r16)
   15ab8:	80000415 	stw	zero,16(r16)
   15abc:	80000515 	stw	zero,20(r16)
   15ac0:	80000615 	stw	zero,24(r16)
   15ac4:	01800204 	movi	r6,8
   15ac8:	000b883a 	mov	r5,zero
   15acc:	81001704 	addi	r4,r16,92
   15ad0:	000eca40 	call	eca4 <memset>
   15ad4:	8005883a 	mov	r2,r16
   15ad8:	80000c15 	stw	zero,48(r16)
   15adc:	80000d15 	stw	zero,52(r16)
   15ae0:	80001115 	stw	zero,68(r16)
   15ae4:	80001215 	stw	zero,72(r16)
   15ae8:	dfc00417 	ldw	ra,16(sp)
   15aec:	dcc00317 	ldw	r19,12(sp)
   15af0:	dc800217 	ldw	r18,8(sp)
   15af4:	dc400117 	ldw	r17,4(sp)
   15af8:	dc000017 	ldw	r16,0(sp)
   15afc:	dec00504 	addi	sp,sp,20
   15b00:	f800283a 	ret
   15b04:	01400104 	movi	r5,4
   15b08:	9809883a 	mov	r4,r19
   15b0c:	00159980 	call	15998 <__sfmoreglue>
   15b10:	90800015 	stw	r2,0(r18)
   15b14:	103fde1e 	bne	r2,zero,15a90 <__alt_data_end+0xfc015a90>
   15b18:	00800304 	movi	r2,12
   15b1c:	98800015 	stw	r2,0(r19)
   15b20:	0005883a 	mov	r2,zero
   15b24:	003ff006 	br	15ae8 <__alt_data_end+0xfc015ae8>

00015b28 <_cleanup>:
   15b28:	008000f4 	movhi	r2,3
   15b2c:	10b74a04 	addi	r2,r2,-8920
   15b30:	11000017 	ldw	r4,0(r2)
   15b34:	014000b4 	movhi	r5,2
   15b38:	296cdc04 	addi	r5,r5,-19600
   15b3c:	00165501 	jmpi	16550 <_fwalk_reent>

00015b40 <__sinit>:
   15b40:	20800e17 	ldw	r2,56(r4)
   15b44:	10000126 	beq	r2,zero,15b4c <__sinit+0xc>
   15b48:	f800283a 	ret
   15b4c:	00157f41 	jmpi	157f4 <__sinit.part.1>

00015b50 <__sfp_lock_acquire>:
   15b50:	f800283a 	ret

00015b54 <__sfp_lock_release>:
   15b54:	f800283a 	ret

00015b58 <__sinit_lock_acquire>:
   15b58:	f800283a 	ret

00015b5c <__sinit_lock_release>:
   15b5c:	f800283a 	ret

00015b60 <__fp_lock_all>:
   15b60:	008000f4 	movhi	r2,3
   15b64:	10b74b04 	addi	r2,r2,-8916
   15b68:	11000017 	ldw	r4,0(r2)
   15b6c:	01400074 	movhi	r5,1
   15b70:	29566404 	addi	r5,r5,22928
   15b74:	001648c1 	jmpi	1648c <_fwalk>

00015b78 <__fp_unlock_all>:
   15b78:	008000f4 	movhi	r2,3
   15b7c:	10b74b04 	addi	r2,r2,-8916
   15b80:	11000017 	ldw	r4,0(r2)
   15b84:	01400074 	movhi	r5,1
   15b88:	2955f804 	addi	r5,r5,22496
   15b8c:	001648c1 	jmpi	1648c <_fwalk>

00015b90 <_malloc_trim_r>:
   15b90:	defffb04 	addi	sp,sp,-20
   15b94:	dcc00315 	stw	r19,12(sp)
   15b98:	04c000f4 	movhi	r19,3
   15b9c:	dc800215 	stw	r18,8(sp)
   15ba0:	dc400115 	stw	r17,4(sp)
   15ba4:	dc000015 	stw	r16,0(sp)
   15ba8:	dfc00415 	stw	ra,16(sp)
   15bac:	2821883a 	mov	r16,r5
   15bb0:	9cebea04 	addi	r19,r19,-20568
   15bb4:	2025883a 	mov	r18,r4
   15bb8:	001f5300 	call	1f530 <__malloc_lock>
   15bbc:	98800217 	ldw	r2,8(r19)
   15bc0:	14400117 	ldw	r17,4(r2)
   15bc4:	00bfff04 	movi	r2,-4
   15bc8:	88a2703a 	and	r17,r17,r2
   15bcc:	8c21c83a 	sub	r16,r17,r16
   15bd0:	8403fbc4 	addi	r16,r16,4079
   15bd4:	8020d33a 	srli	r16,r16,12
   15bd8:	0083ffc4 	movi	r2,4095
   15bdc:	843fffc4 	addi	r16,r16,-1
   15be0:	8020933a 	slli	r16,r16,12
   15be4:	1400060e 	bge	r2,r16,15c00 <_malloc_trim_r+0x70>
   15be8:	000b883a 	mov	r5,zero
   15bec:	9009883a 	mov	r4,r18
   15bf0:	000ef2c0 	call	ef2c <_sbrk_r>
   15bf4:	98c00217 	ldw	r3,8(r19)
   15bf8:	1c47883a 	add	r3,r3,r17
   15bfc:	10c00a26 	beq	r2,r3,15c28 <_malloc_trim_r+0x98>
   15c00:	9009883a 	mov	r4,r18
   15c04:	001f5540 	call	1f554 <__malloc_unlock>
   15c08:	0005883a 	mov	r2,zero
   15c0c:	dfc00417 	ldw	ra,16(sp)
   15c10:	dcc00317 	ldw	r19,12(sp)
   15c14:	dc800217 	ldw	r18,8(sp)
   15c18:	dc400117 	ldw	r17,4(sp)
   15c1c:	dc000017 	ldw	r16,0(sp)
   15c20:	dec00504 	addi	sp,sp,20
   15c24:	f800283a 	ret
   15c28:	040bc83a 	sub	r5,zero,r16
   15c2c:	9009883a 	mov	r4,r18
   15c30:	000ef2c0 	call	ef2c <_sbrk_r>
   15c34:	00ffffc4 	movi	r3,-1
   15c38:	10c00d26 	beq	r2,r3,15c70 <_malloc_trim_r+0xe0>
   15c3c:	00c000f4 	movhi	r3,3
   15c40:	18c43804 	addi	r3,r3,4320
   15c44:	18800017 	ldw	r2,0(r3)
   15c48:	99000217 	ldw	r4,8(r19)
   15c4c:	8c23c83a 	sub	r17,r17,r16
   15c50:	8c400054 	ori	r17,r17,1
   15c54:	1421c83a 	sub	r16,r2,r16
   15c58:	24400115 	stw	r17,4(r4)
   15c5c:	9009883a 	mov	r4,r18
   15c60:	1c000015 	stw	r16,0(r3)
   15c64:	001f5540 	call	1f554 <__malloc_unlock>
   15c68:	00800044 	movi	r2,1
   15c6c:	003fe706 	br	15c0c <__alt_data_end+0xfc015c0c>
   15c70:	000b883a 	mov	r5,zero
   15c74:	9009883a 	mov	r4,r18
   15c78:	000ef2c0 	call	ef2c <_sbrk_r>
   15c7c:	99000217 	ldw	r4,8(r19)
   15c80:	014003c4 	movi	r5,15
   15c84:	1107c83a 	sub	r3,r2,r4
   15c88:	28ffdd0e 	bge	r5,r3,15c00 <__alt_data_end+0xfc015c00>
   15c8c:	014000f4 	movhi	r5,3
   15c90:	29774c04 	addi	r5,r5,-8912
   15c94:	29400017 	ldw	r5,0(r5)
   15c98:	18c00054 	ori	r3,r3,1
   15c9c:	20c00115 	stw	r3,4(r4)
   15ca0:	00c000f4 	movhi	r3,3
   15ca4:	1145c83a 	sub	r2,r2,r5
   15ca8:	18c43804 	addi	r3,r3,4320
   15cac:	18800015 	stw	r2,0(r3)
   15cb0:	003fd306 	br	15c00 <__alt_data_end+0xfc015c00>

00015cb4 <_free_r>:
   15cb4:	28004126 	beq	r5,zero,15dbc <_free_r+0x108>
   15cb8:	defffd04 	addi	sp,sp,-12
   15cbc:	dc400115 	stw	r17,4(sp)
   15cc0:	dc000015 	stw	r16,0(sp)
   15cc4:	2023883a 	mov	r17,r4
   15cc8:	2821883a 	mov	r16,r5
   15ccc:	dfc00215 	stw	ra,8(sp)
   15cd0:	001f5300 	call	1f530 <__malloc_lock>
   15cd4:	81ffff17 	ldw	r7,-4(r16)
   15cd8:	00bfff84 	movi	r2,-2
   15cdc:	010000f4 	movhi	r4,3
   15ce0:	81bffe04 	addi	r6,r16,-8
   15ce4:	3884703a 	and	r2,r7,r2
   15ce8:	212bea04 	addi	r4,r4,-20568
   15cec:	308b883a 	add	r5,r6,r2
   15cf0:	2a400117 	ldw	r9,4(r5)
   15cf4:	22000217 	ldw	r8,8(r4)
   15cf8:	00ffff04 	movi	r3,-4
   15cfc:	48c6703a 	and	r3,r9,r3
   15d00:	2a005726 	beq	r5,r8,15e60 <_free_r+0x1ac>
   15d04:	28c00115 	stw	r3,4(r5)
   15d08:	39c0004c 	andi	r7,r7,1
   15d0c:	3800091e 	bne	r7,zero,15d34 <_free_r+0x80>
   15d10:	823ffe17 	ldw	r8,-8(r16)
   15d14:	22400204 	addi	r9,r4,8
   15d18:	320dc83a 	sub	r6,r6,r8
   15d1c:	31c00217 	ldw	r7,8(r6)
   15d20:	1205883a 	add	r2,r2,r8
   15d24:	3a406526 	beq	r7,r9,15ebc <_free_r+0x208>
   15d28:	32000317 	ldw	r8,12(r6)
   15d2c:	3a000315 	stw	r8,12(r7)
   15d30:	41c00215 	stw	r7,8(r8)
   15d34:	28cf883a 	add	r7,r5,r3
   15d38:	39c00117 	ldw	r7,4(r7)
   15d3c:	39c0004c 	andi	r7,r7,1
   15d40:	38003a26 	beq	r7,zero,15e2c <_free_r+0x178>
   15d44:	10c00054 	ori	r3,r2,1
   15d48:	30c00115 	stw	r3,4(r6)
   15d4c:	3087883a 	add	r3,r6,r2
   15d50:	18800015 	stw	r2,0(r3)
   15d54:	00c07fc4 	movi	r3,511
   15d58:	18801936 	bltu	r3,r2,15dc0 <_free_r+0x10c>
   15d5c:	1004d0fa 	srli	r2,r2,3
   15d60:	01c00044 	movi	r7,1
   15d64:	21400117 	ldw	r5,4(r4)
   15d68:	10c00044 	addi	r3,r2,1
   15d6c:	18c7883a 	add	r3,r3,r3
   15d70:	1005d0ba 	srai	r2,r2,2
   15d74:	18c7883a 	add	r3,r3,r3
   15d78:	18c7883a 	add	r3,r3,r3
   15d7c:	1907883a 	add	r3,r3,r4
   15d80:	3884983a 	sll	r2,r7,r2
   15d84:	19c00017 	ldw	r7,0(r3)
   15d88:	1a3ffe04 	addi	r8,r3,-8
   15d8c:	1144b03a 	or	r2,r2,r5
   15d90:	32000315 	stw	r8,12(r6)
   15d94:	31c00215 	stw	r7,8(r6)
   15d98:	20800115 	stw	r2,4(r4)
   15d9c:	19800015 	stw	r6,0(r3)
   15da0:	39800315 	stw	r6,12(r7)
   15da4:	8809883a 	mov	r4,r17
   15da8:	dfc00217 	ldw	ra,8(sp)
   15dac:	dc400117 	ldw	r17,4(sp)
   15db0:	dc000017 	ldw	r16,0(sp)
   15db4:	dec00304 	addi	sp,sp,12
   15db8:	001f5541 	jmpi	1f554 <__malloc_unlock>
   15dbc:	f800283a 	ret
   15dc0:	100ad27a 	srli	r5,r2,9
   15dc4:	00c00104 	movi	r3,4
   15dc8:	19404a36 	bltu	r3,r5,15ef4 <_free_r+0x240>
   15dcc:	100ad1ba 	srli	r5,r2,6
   15dd0:	28c00e44 	addi	r3,r5,57
   15dd4:	18c7883a 	add	r3,r3,r3
   15dd8:	29400e04 	addi	r5,r5,56
   15ddc:	18c7883a 	add	r3,r3,r3
   15de0:	18c7883a 	add	r3,r3,r3
   15de4:	1909883a 	add	r4,r3,r4
   15de8:	20c00017 	ldw	r3,0(r4)
   15dec:	01c000f4 	movhi	r7,3
   15df0:	213ffe04 	addi	r4,r4,-8
   15df4:	39ebea04 	addi	r7,r7,-20568
   15df8:	20c04426 	beq	r4,r3,15f0c <_free_r+0x258>
   15dfc:	01ffff04 	movi	r7,-4
   15e00:	19400117 	ldw	r5,4(r3)
   15e04:	29ca703a 	and	r5,r5,r7
   15e08:	1140022e 	bgeu	r2,r5,15e14 <_free_r+0x160>
   15e0c:	18c00217 	ldw	r3,8(r3)
   15e10:	20fffb1e 	bne	r4,r3,15e00 <__alt_data_end+0xfc015e00>
   15e14:	19000317 	ldw	r4,12(r3)
   15e18:	31000315 	stw	r4,12(r6)
   15e1c:	30c00215 	stw	r3,8(r6)
   15e20:	21800215 	stw	r6,8(r4)
   15e24:	19800315 	stw	r6,12(r3)
   15e28:	003fde06 	br	15da4 <__alt_data_end+0xfc015da4>
   15e2c:	29c00217 	ldw	r7,8(r5)
   15e30:	10c5883a 	add	r2,r2,r3
   15e34:	00c000f4 	movhi	r3,3
   15e38:	18ebec04 	addi	r3,r3,-20560
   15e3c:	38c03b26 	beq	r7,r3,15f2c <_free_r+0x278>
   15e40:	2a000317 	ldw	r8,12(r5)
   15e44:	11400054 	ori	r5,r2,1
   15e48:	3087883a 	add	r3,r6,r2
   15e4c:	3a000315 	stw	r8,12(r7)
   15e50:	41c00215 	stw	r7,8(r8)
   15e54:	31400115 	stw	r5,4(r6)
   15e58:	18800015 	stw	r2,0(r3)
   15e5c:	003fbd06 	br	15d54 <__alt_data_end+0xfc015d54>
   15e60:	39c0004c 	andi	r7,r7,1
   15e64:	10c5883a 	add	r2,r2,r3
   15e68:	3800071e 	bne	r7,zero,15e88 <_free_r+0x1d4>
   15e6c:	81fffe17 	ldw	r7,-8(r16)
   15e70:	31cdc83a 	sub	r6,r6,r7
   15e74:	30c00317 	ldw	r3,12(r6)
   15e78:	31400217 	ldw	r5,8(r6)
   15e7c:	11c5883a 	add	r2,r2,r7
   15e80:	28c00315 	stw	r3,12(r5)
   15e84:	19400215 	stw	r5,8(r3)
   15e88:	10c00054 	ori	r3,r2,1
   15e8c:	30c00115 	stw	r3,4(r6)
   15e90:	00c000f4 	movhi	r3,3
   15e94:	18f74d04 	addi	r3,r3,-8908
   15e98:	18c00017 	ldw	r3,0(r3)
   15e9c:	21800215 	stw	r6,8(r4)
   15ea0:	10ffc036 	bltu	r2,r3,15da4 <__alt_data_end+0xfc015da4>
   15ea4:	008000f4 	movhi	r2,3
   15ea8:	1083e004 	addi	r2,r2,3968
   15eac:	11400017 	ldw	r5,0(r2)
   15eb0:	8809883a 	mov	r4,r17
   15eb4:	0015b900 	call	15b90 <_malloc_trim_r>
   15eb8:	003fba06 	br	15da4 <__alt_data_end+0xfc015da4>
   15ebc:	28c9883a 	add	r4,r5,r3
   15ec0:	21000117 	ldw	r4,4(r4)
   15ec4:	2100004c 	andi	r4,r4,1
   15ec8:	2000391e 	bne	r4,zero,15fb0 <_free_r+0x2fc>
   15ecc:	29c00217 	ldw	r7,8(r5)
   15ed0:	29000317 	ldw	r4,12(r5)
   15ed4:	1885883a 	add	r2,r3,r2
   15ed8:	10c00054 	ori	r3,r2,1
   15edc:	39000315 	stw	r4,12(r7)
   15ee0:	21c00215 	stw	r7,8(r4)
   15ee4:	30c00115 	stw	r3,4(r6)
   15ee8:	308d883a 	add	r6,r6,r2
   15eec:	30800015 	stw	r2,0(r6)
   15ef0:	003fac06 	br	15da4 <__alt_data_end+0xfc015da4>
   15ef4:	00c00504 	movi	r3,20
   15ef8:	19401536 	bltu	r3,r5,15f50 <_free_r+0x29c>
   15efc:	28c01704 	addi	r3,r5,92
   15f00:	18c7883a 	add	r3,r3,r3
   15f04:	294016c4 	addi	r5,r5,91
   15f08:	003fb406 	br	15ddc <__alt_data_end+0xfc015ddc>
   15f0c:	280bd0ba 	srai	r5,r5,2
   15f10:	00c00044 	movi	r3,1
   15f14:	38800117 	ldw	r2,4(r7)
   15f18:	194a983a 	sll	r5,r3,r5
   15f1c:	2007883a 	mov	r3,r4
   15f20:	2884b03a 	or	r2,r5,r2
   15f24:	38800115 	stw	r2,4(r7)
   15f28:	003fbb06 	br	15e18 <__alt_data_end+0xfc015e18>
   15f2c:	21800515 	stw	r6,20(r4)
   15f30:	21800415 	stw	r6,16(r4)
   15f34:	10c00054 	ori	r3,r2,1
   15f38:	31c00315 	stw	r7,12(r6)
   15f3c:	31c00215 	stw	r7,8(r6)
   15f40:	30c00115 	stw	r3,4(r6)
   15f44:	308d883a 	add	r6,r6,r2
   15f48:	30800015 	stw	r2,0(r6)
   15f4c:	003f9506 	br	15da4 <__alt_data_end+0xfc015da4>
   15f50:	00c01504 	movi	r3,84
   15f54:	19400536 	bltu	r3,r5,15f6c <_free_r+0x2b8>
   15f58:	100ad33a 	srli	r5,r2,12
   15f5c:	28c01bc4 	addi	r3,r5,111
   15f60:	18c7883a 	add	r3,r3,r3
   15f64:	29401b84 	addi	r5,r5,110
   15f68:	003f9c06 	br	15ddc <__alt_data_end+0xfc015ddc>
   15f6c:	00c05504 	movi	r3,340
   15f70:	19400536 	bltu	r3,r5,15f88 <_free_r+0x2d4>
   15f74:	100ad3fa 	srli	r5,r2,15
   15f78:	28c01e04 	addi	r3,r5,120
   15f7c:	18c7883a 	add	r3,r3,r3
   15f80:	29401dc4 	addi	r5,r5,119
   15f84:	003f9506 	br	15ddc <__alt_data_end+0xfc015ddc>
   15f88:	00c15504 	movi	r3,1364
   15f8c:	19400536 	bltu	r3,r5,15fa4 <_free_r+0x2f0>
   15f90:	100ad4ba 	srli	r5,r2,18
   15f94:	28c01f44 	addi	r3,r5,125
   15f98:	18c7883a 	add	r3,r3,r3
   15f9c:	29401f04 	addi	r5,r5,124
   15fa0:	003f8e06 	br	15ddc <__alt_data_end+0xfc015ddc>
   15fa4:	00c03f84 	movi	r3,254
   15fa8:	01401f84 	movi	r5,126
   15fac:	003f8b06 	br	15ddc <__alt_data_end+0xfc015ddc>
   15fb0:	10c00054 	ori	r3,r2,1
   15fb4:	30c00115 	stw	r3,4(r6)
   15fb8:	308d883a 	add	r6,r6,r2
   15fbc:	30800015 	stw	r2,0(r6)
   15fc0:	003f7806 	br	15da4 <__alt_data_end+0xfc015da4>

00015fc4 <__sfvwrite_r>:
   15fc4:	30800217 	ldw	r2,8(r6)
   15fc8:	10006726 	beq	r2,zero,16168 <__sfvwrite_r+0x1a4>
   15fcc:	28c0030b 	ldhu	r3,12(r5)
   15fd0:	defff404 	addi	sp,sp,-48
   15fd4:	dd400715 	stw	r21,28(sp)
   15fd8:	dd000615 	stw	r20,24(sp)
   15fdc:	dc000215 	stw	r16,8(sp)
   15fe0:	dfc00b15 	stw	ra,44(sp)
   15fe4:	df000a15 	stw	fp,40(sp)
   15fe8:	ddc00915 	stw	r23,36(sp)
   15fec:	dd800815 	stw	r22,32(sp)
   15ff0:	dcc00515 	stw	r19,20(sp)
   15ff4:	dc800415 	stw	r18,16(sp)
   15ff8:	dc400315 	stw	r17,12(sp)
   15ffc:	1880020c 	andi	r2,r3,8
   16000:	2821883a 	mov	r16,r5
   16004:	202b883a 	mov	r21,r4
   16008:	3029883a 	mov	r20,r6
   1600c:	10002726 	beq	r2,zero,160ac <__sfvwrite_r+0xe8>
   16010:	28800417 	ldw	r2,16(r5)
   16014:	10002526 	beq	r2,zero,160ac <__sfvwrite_r+0xe8>
   16018:	1880008c 	andi	r2,r3,2
   1601c:	a4400017 	ldw	r17,0(r20)
   16020:	10002a26 	beq	r2,zero,160cc <__sfvwrite_r+0x108>
   16024:	05a00034 	movhi	r22,32768
   16028:	0027883a 	mov	r19,zero
   1602c:	0025883a 	mov	r18,zero
   16030:	b5bf0004 	addi	r22,r22,-1024
   16034:	980d883a 	mov	r6,r19
   16038:	a809883a 	mov	r4,r21
   1603c:	90004626 	beq	r18,zero,16158 <__sfvwrite_r+0x194>
   16040:	900f883a 	mov	r7,r18
   16044:	b480022e 	bgeu	r22,r18,16050 <__sfvwrite_r+0x8c>
   16048:	01e00034 	movhi	r7,32768
   1604c:	39ff0004 	addi	r7,r7,-1024
   16050:	80800917 	ldw	r2,36(r16)
   16054:	81400717 	ldw	r5,28(r16)
   16058:	103ee83a 	callr	r2
   1605c:	00805a0e 	bge	zero,r2,161c8 <__sfvwrite_r+0x204>
   16060:	a0c00217 	ldw	r3,8(r20)
   16064:	98a7883a 	add	r19,r19,r2
   16068:	90a5c83a 	sub	r18,r18,r2
   1606c:	1885c83a 	sub	r2,r3,r2
   16070:	a0800215 	stw	r2,8(r20)
   16074:	103fef1e 	bne	r2,zero,16034 <__alt_data_end+0xfc016034>
   16078:	0005883a 	mov	r2,zero
   1607c:	dfc00b17 	ldw	ra,44(sp)
   16080:	df000a17 	ldw	fp,40(sp)
   16084:	ddc00917 	ldw	r23,36(sp)
   16088:	dd800817 	ldw	r22,32(sp)
   1608c:	dd400717 	ldw	r21,28(sp)
   16090:	dd000617 	ldw	r20,24(sp)
   16094:	dcc00517 	ldw	r19,20(sp)
   16098:	dc800417 	ldw	r18,16(sp)
   1609c:	dc400317 	ldw	r17,12(sp)
   160a0:	dc000217 	ldw	r16,8(sp)
   160a4:	dec00c04 	addi	sp,sp,48
   160a8:	f800283a 	ret
   160ac:	800b883a 	mov	r5,r16
   160b0:	a809883a 	mov	r4,r21
   160b4:	0013b340 	call	13b34 <__swsetup_r>
   160b8:	1000ee1e 	bne	r2,zero,16474 <__sfvwrite_r+0x4b0>
   160bc:	80c0030b 	ldhu	r3,12(r16)
   160c0:	a4400017 	ldw	r17,0(r20)
   160c4:	1880008c 	andi	r2,r3,2
   160c8:	103fd61e 	bne	r2,zero,16024 <__alt_data_end+0xfc016024>
   160cc:	1880004c 	andi	r2,r3,1
   160d0:	1000421e 	bne	r2,zero,161dc <__sfvwrite_r+0x218>
   160d4:	0039883a 	mov	fp,zero
   160d8:	0025883a 	mov	r18,zero
   160dc:	90001a26 	beq	r18,zero,16148 <__sfvwrite_r+0x184>
   160e0:	1880800c 	andi	r2,r3,512
   160e4:	84c00217 	ldw	r19,8(r16)
   160e8:	10002126 	beq	r2,zero,16170 <__sfvwrite_r+0x1ac>
   160ec:	982f883a 	mov	r23,r19
   160f0:	94c09636 	bltu	r18,r19,1634c <__sfvwrite_r+0x388>
   160f4:	1881200c 	andi	r2,r3,1152
   160f8:	1000a11e 	bne	r2,zero,16380 <__sfvwrite_r+0x3bc>
   160fc:	81000017 	ldw	r4,0(r16)
   16100:	b80d883a 	mov	r6,r23
   16104:	e00b883a 	mov	r5,fp
   16108:	00169900 	call	16990 <memmove>
   1610c:	80c00217 	ldw	r3,8(r16)
   16110:	81000017 	ldw	r4,0(r16)
   16114:	9005883a 	mov	r2,r18
   16118:	1ce7c83a 	sub	r19,r3,r19
   1611c:	25cf883a 	add	r7,r4,r23
   16120:	84c00215 	stw	r19,8(r16)
   16124:	81c00015 	stw	r7,0(r16)
   16128:	a0c00217 	ldw	r3,8(r20)
   1612c:	e0b9883a 	add	fp,fp,r2
   16130:	90a5c83a 	sub	r18,r18,r2
   16134:	18a7c83a 	sub	r19,r3,r2
   16138:	a4c00215 	stw	r19,8(r20)
   1613c:	983fce26 	beq	r19,zero,16078 <__alt_data_end+0xfc016078>
   16140:	80c0030b 	ldhu	r3,12(r16)
   16144:	903fe61e 	bne	r18,zero,160e0 <__alt_data_end+0xfc0160e0>
   16148:	8f000017 	ldw	fp,0(r17)
   1614c:	8c800117 	ldw	r18,4(r17)
   16150:	8c400204 	addi	r17,r17,8
   16154:	003fe106 	br	160dc <__alt_data_end+0xfc0160dc>
   16158:	8cc00017 	ldw	r19,0(r17)
   1615c:	8c800117 	ldw	r18,4(r17)
   16160:	8c400204 	addi	r17,r17,8
   16164:	003fb306 	br	16034 <__alt_data_end+0xfc016034>
   16168:	0005883a 	mov	r2,zero
   1616c:	f800283a 	ret
   16170:	81000017 	ldw	r4,0(r16)
   16174:	80800417 	ldw	r2,16(r16)
   16178:	11005a36 	bltu	r2,r4,162e4 <__sfvwrite_r+0x320>
   1617c:	85c00517 	ldw	r23,20(r16)
   16180:	95c05836 	bltu	r18,r23,162e4 <__sfvwrite_r+0x320>
   16184:	00a00034 	movhi	r2,32768
   16188:	10bfffc4 	addi	r2,r2,-1
   1618c:	9009883a 	mov	r4,r18
   16190:	1480012e 	bgeu	r2,r18,16198 <__sfvwrite_r+0x1d4>
   16194:	1009883a 	mov	r4,r2
   16198:	b80b883a 	mov	r5,r23
   1619c:	000cbf40 	call	cbf4 <__divsi3>
   161a0:	b80b883a 	mov	r5,r23
   161a4:	1009883a 	mov	r4,r2
   161a8:	000cda80 	call	cda8 <__mulsi3>
   161ac:	81400717 	ldw	r5,28(r16)
   161b0:	80c00917 	ldw	r3,36(r16)
   161b4:	100f883a 	mov	r7,r2
   161b8:	e00d883a 	mov	r6,fp
   161bc:	a809883a 	mov	r4,r21
   161c0:	183ee83a 	callr	r3
   161c4:	00bfd816 	blt	zero,r2,16128 <__alt_data_end+0xfc016128>
   161c8:	8080030b 	ldhu	r2,12(r16)
   161cc:	10801014 	ori	r2,r2,64
   161d0:	8080030d 	sth	r2,12(r16)
   161d4:	00bfffc4 	movi	r2,-1
   161d8:	003fa806 	br	1607c <__alt_data_end+0xfc01607c>
   161dc:	0027883a 	mov	r19,zero
   161e0:	0011883a 	mov	r8,zero
   161e4:	0039883a 	mov	fp,zero
   161e8:	0025883a 	mov	r18,zero
   161ec:	90001f26 	beq	r18,zero,1626c <__sfvwrite_r+0x2a8>
   161f0:	40005a26 	beq	r8,zero,1635c <__sfvwrite_r+0x398>
   161f4:	982d883a 	mov	r22,r19
   161f8:	94c0012e 	bgeu	r18,r19,16200 <__sfvwrite_r+0x23c>
   161fc:	902d883a 	mov	r22,r18
   16200:	81000017 	ldw	r4,0(r16)
   16204:	80800417 	ldw	r2,16(r16)
   16208:	b02f883a 	mov	r23,r22
   1620c:	81c00517 	ldw	r7,20(r16)
   16210:	1100032e 	bgeu	r2,r4,16220 <__sfvwrite_r+0x25c>
   16214:	80c00217 	ldw	r3,8(r16)
   16218:	38c7883a 	add	r3,r7,r3
   1621c:	1d801816 	blt	r3,r22,16280 <__sfvwrite_r+0x2bc>
   16220:	b1c03e16 	blt	r22,r7,1631c <__sfvwrite_r+0x358>
   16224:	80800917 	ldw	r2,36(r16)
   16228:	81400717 	ldw	r5,28(r16)
   1622c:	e00d883a 	mov	r6,fp
   16230:	da000115 	stw	r8,4(sp)
   16234:	a809883a 	mov	r4,r21
   16238:	103ee83a 	callr	r2
   1623c:	102f883a 	mov	r23,r2
   16240:	da000117 	ldw	r8,4(sp)
   16244:	00bfe00e 	bge	zero,r2,161c8 <__alt_data_end+0xfc0161c8>
   16248:	9de7c83a 	sub	r19,r19,r23
   1624c:	98001f26 	beq	r19,zero,162cc <__sfvwrite_r+0x308>
   16250:	a0800217 	ldw	r2,8(r20)
   16254:	e5f9883a 	add	fp,fp,r23
   16258:	95e5c83a 	sub	r18,r18,r23
   1625c:	15efc83a 	sub	r23,r2,r23
   16260:	a5c00215 	stw	r23,8(r20)
   16264:	b83f8426 	beq	r23,zero,16078 <__alt_data_end+0xfc016078>
   16268:	903fe11e 	bne	r18,zero,161f0 <__alt_data_end+0xfc0161f0>
   1626c:	8f000017 	ldw	fp,0(r17)
   16270:	8c800117 	ldw	r18,4(r17)
   16274:	0011883a 	mov	r8,zero
   16278:	8c400204 	addi	r17,r17,8
   1627c:	003fdb06 	br	161ec <__alt_data_end+0xfc0161ec>
   16280:	180d883a 	mov	r6,r3
   16284:	e00b883a 	mov	r5,fp
   16288:	da000115 	stw	r8,4(sp)
   1628c:	d8c00015 	stw	r3,0(sp)
   16290:	00169900 	call	16990 <memmove>
   16294:	d8c00017 	ldw	r3,0(sp)
   16298:	80800017 	ldw	r2,0(r16)
   1629c:	800b883a 	mov	r5,r16
   162a0:	a809883a 	mov	r4,r21
   162a4:	10c5883a 	add	r2,r2,r3
   162a8:	80800015 	stw	r2,0(r16)
   162ac:	d8c00015 	stw	r3,0(sp)
   162b0:	00157540 	call	15754 <_fflush_r>
   162b4:	d8c00017 	ldw	r3,0(sp)
   162b8:	da000117 	ldw	r8,4(sp)
   162bc:	103fc21e 	bne	r2,zero,161c8 <__alt_data_end+0xfc0161c8>
   162c0:	182f883a 	mov	r23,r3
   162c4:	9de7c83a 	sub	r19,r19,r23
   162c8:	983fe11e 	bne	r19,zero,16250 <__alt_data_end+0xfc016250>
   162cc:	800b883a 	mov	r5,r16
   162d0:	a809883a 	mov	r4,r21
   162d4:	00157540 	call	15754 <_fflush_r>
   162d8:	103fbb1e 	bne	r2,zero,161c8 <__alt_data_end+0xfc0161c8>
   162dc:	0011883a 	mov	r8,zero
   162e0:	003fdb06 	br	16250 <__alt_data_end+0xfc016250>
   162e4:	94c0012e 	bgeu	r18,r19,162ec <__sfvwrite_r+0x328>
   162e8:	9027883a 	mov	r19,r18
   162ec:	980d883a 	mov	r6,r19
   162f0:	e00b883a 	mov	r5,fp
   162f4:	00169900 	call	16990 <memmove>
   162f8:	80800217 	ldw	r2,8(r16)
   162fc:	80c00017 	ldw	r3,0(r16)
   16300:	14c5c83a 	sub	r2,r2,r19
   16304:	1cc7883a 	add	r3,r3,r19
   16308:	80800215 	stw	r2,8(r16)
   1630c:	80c00015 	stw	r3,0(r16)
   16310:	10004326 	beq	r2,zero,16420 <__sfvwrite_r+0x45c>
   16314:	9805883a 	mov	r2,r19
   16318:	003f8306 	br	16128 <__alt_data_end+0xfc016128>
   1631c:	b00d883a 	mov	r6,r22
   16320:	e00b883a 	mov	r5,fp
   16324:	da000115 	stw	r8,4(sp)
   16328:	00169900 	call	16990 <memmove>
   1632c:	80800217 	ldw	r2,8(r16)
   16330:	80c00017 	ldw	r3,0(r16)
   16334:	da000117 	ldw	r8,4(sp)
   16338:	1585c83a 	sub	r2,r2,r22
   1633c:	1dad883a 	add	r22,r3,r22
   16340:	80800215 	stw	r2,8(r16)
   16344:	85800015 	stw	r22,0(r16)
   16348:	003fbf06 	br	16248 <__alt_data_end+0xfc016248>
   1634c:	81000017 	ldw	r4,0(r16)
   16350:	9027883a 	mov	r19,r18
   16354:	902f883a 	mov	r23,r18
   16358:	003f6906 	br	16100 <__alt_data_end+0xfc016100>
   1635c:	900d883a 	mov	r6,r18
   16360:	01400284 	movi	r5,10
   16364:	e009883a 	mov	r4,fp
   16368:	00168ac0 	call	168ac <memchr>
   1636c:	10003e26 	beq	r2,zero,16468 <__sfvwrite_r+0x4a4>
   16370:	10800044 	addi	r2,r2,1
   16374:	1727c83a 	sub	r19,r2,fp
   16378:	02000044 	movi	r8,1
   1637c:	003f9d06 	br	161f4 <__alt_data_end+0xfc0161f4>
   16380:	80800517 	ldw	r2,20(r16)
   16384:	81400417 	ldw	r5,16(r16)
   16388:	81c00017 	ldw	r7,0(r16)
   1638c:	10a7883a 	add	r19,r2,r2
   16390:	9885883a 	add	r2,r19,r2
   16394:	1026d7fa 	srli	r19,r2,31
   16398:	396dc83a 	sub	r22,r7,r5
   1639c:	b1000044 	addi	r4,r22,1
   163a0:	9885883a 	add	r2,r19,r2
   163a4:	1027d07a 	srai	r19,r2,1
   163a8:	2485883a 	add	r2,r4,r18
   163ac:	980d883a 	mov	r6,r19
   163b0:	9880022e 	bgeu	r19,r2,163bc <__sfvwrite_r+0x3f8>
   163b4:	1027883a 	mov	r19,r2
   163b8:	100d883a 	mov	r6,r2
   163bc:	18c1000c 	andi	r3,r3,1024
   163c0:	18001c26 	beq	r3,zero,16434 <__sfvwrite_r+0x470>
   163c4:	300b883a 	mov	r5,r6
   163c8:	a809883a 	mov	r4,r21
   163cc:	000e3500 	call	e350 <_malloc_r>
   163d0:	102f883a 	mov	r23,r2
   163d4:	10002926 	beq	r2,zero,1647c <__sfvwrite_r+0x4b8>
   163d8:	81400417 	ldw	r5,16(r16)
   163dc:	b00d883a 	mov	r6,r22
   163e0:	1009883a 	mov	r4,r2
   163e4:	000eb5c0 	call	eb5c <memcpy>
   163e8:	8080030b 	ldhu	r2,12(r16)
   163ec:	00fedfc4 	movi	r3,-1153
   163f0:	10c4703a 	and	r2,r2,r3
   163f4:	10802014 	ori	r2,r2,128
   163f8:	8080030d 	sth	r2,12(r16)
   163fc:	bd89883a 	add	r4,r23,r22
   16400:	9d8fc83a 	sub	r7,r19,r22
   16404:	85c00415 	stw	r23,16(r16)
   16408:	84c00515 	stw	r19,20(r16)
   1640c:	81000015 	stw	r4,0(r16)
   16410:	9027883a 	mov	r19,r18
   16414:	81c00215 	stw	r7,8(r16)
   16418:	902f883a 	mov	r23,r18
   1641c:	003f3806 	br	16100 <__alt_data_end+0xfc016100>
   16420:	800b883a 	mov	r5,r16
   16424:	a809883a 	mov	r4,r21
   16428:	00157540 	call	15754 <_fflush_r>
   1642c:	103fb926 	beq	r2,zero,16314 <__alt_data_end+0xfc016314>
   16430:	003f6506 	br	161c8 <__alt_data_end+0xfc0161c8>
   16434:	a809883a 	mov	r4,r21
   16438:	0017d0c0 	call	17d0c <_realloc_r>
   1643c:	102f883a 	mov	r23,r2
   16440:	103fee1e 	bne	r2,zero,163fc <__alt_data_end+0xfc0163fc>
   16444:	81400417 	ldw	r5,16(r16)
   16448:	a809883a 	mov	r4,r21
   1644c:	0015cb40 	call	15cb4 <_free_r>
   16450:	8080030b 	ldhu	r2,12(r16)
   16454:	00ffdfc4 	movi	r3,-129
   16458:	1884703a 	and	r2,r3,r2
   1645c:	00c00304 	movi	r3,12
   16460:	a8c00015 	stw	r3,0(r21)
   16464:	003f5906 	br	161cc <__alt_data_end+0xfc0161cc>
   16468:	94c00044 	addi	r19,r18,1
   1646c:	02000044 	movi	r8,1
   16470:	003f6006 	br	161f4 <__alt_data_end+0xfc0161f4>
   16474:	00bfffc4 	movi	r2,-1
   16478:	003f0006 	br	1607c <__alt_data_end+0xfc01607c>
   1647c:	00800304 	movi	r2,12
   16480:	a8800015 	stw	r2,0(r21)
   16484:	8080030b 	ldhu	r2,12(r16)
   16488:	003f5006 	br	161cc <__alt_data_end+0xfc0161cc>

0001648c <_fwalk>:
   1648c:	defff704 	addi	sp,sp,-36
   16490:	dd000415 	stw	r20,16(sp)
   16494:	dfc00815 	stw	ra,32(sp)
   16498:	ddc00715 	stw	r23,28(sp)
   1649c:	dd800615 	stw	r22,24(sp)
   164a0:	dd400515 	stw	r21,20(sp)
   164a4:	dcc00315 	stw	r19,12(sp)
   164a8:	dc800215 	stw	r18,8(sp)
   164ac:	dc400115 	stw	r17,4(sp)
   164b0:	dc000015 	stw	r16,0(sp)
   164b4:	2500b804 	addi	r20,r4,736
   164b8:	a0002326 	beq	r20,zero,16548 <_fwalk+0xbc>
   164bc:	282b883a 	mov	r21,r5
   164c0:	002f883a 	mov	r23,zero
   164c4:	05800044 	movi	r22,1
   164c8:	04ffffc4 	movi	r19,-1
   164cc:	a4400117 	ldw	r17,4(r20)
   164d0:	a4800217 	ldw	r18,8(r20)
   164d4:	8c7fffc4 	addi	r17,r17,-1
   164d8:	88000d16 	blt	r17,zero,16510 <_fwalk+0x84>
   164dc:	94000304 	addi	r16,r18,12
   164e0:	94800384 	addi	r18,r18,14
   164e4:	8080000b 	ldhu	r2,0(r16)
   164e8:	8c7fffc4 	addi	r17,r17,-1
   164ec:	813ffd04 	addi	r4,r16,-12
   164f0:	b080042e 	bgeu	r22,r2,16504 <_fwalk+0x78>
   164f4:	9080000f 	ldh	r2,0(r18)
   164f8:	14c00226 	beq	r2,r19,16504 <_fwalk+0x78>
   164fc:	a83ee83a 	callr	r21
   16500:	b8aeb03a 	or	r23,r23,r2
   16504:	84001a04 	addi	r16,r16,104
   16508:	94801a04 	addi	r18,r18,104
   1650c:	8cfff51e 	bne	r17,r19,164e4 <__alt_data_end+0xfc0164e4>
   16510:	a5000017 	ldw	r20,0(r20)
   16514:	a03fed1e 	bne	r20,zero,164cc <__alt_data_end+0xfc0164cc>
   16518:	b805883a 	mov	r2,r23
   1651c:	dfc00817 	ldw	ra,32(sp)
   16520:	ddc00717 	ldw	r23,28(sp)
   16524:	dd800617 	ldw	r22,24(sp)
   16528:	dd400517 	ldw	r21,20(sp)
   1652c:	dd000417 	ldw	r20,16(sp)
   16530:	dcc00317 	ldw	r19,12(sp)
   16534:	dc800217 	ldw	r18,8(sp)
   16538:	dc400117 	ldw	r17,4(sp)
   1653c:	dc000017 	ldw	r16,0(sp)
   16540:	dec00904 	addi	sp,sp,36
   16544:	f800283a 	ret
   16548:	002f883a 	mov	r23,zero
   1654c:	003ff206 	br	16518 <__alt_data_end+0xfc016518>

00016550 <_fwalk_reent>:
   16550:	defff704 	addi	sp,sp,-36
   16554:	dd000415 	stw	r20,16(sp)
   16558:	dfc00815 	stw	ra,32(sp)
   1655c:	ddc00715 	stw	r23,28(sp)
   16560:	dd800615 	stw	r22,24(sp)
   16564:	dd400515 	stw	r21,20(sp)
   16568:	dcc00315 	stw	r19,12(sp)
   1656c:	dc800215 	stw	r18,8(sp)
   16570:	dc400115 	stw	r17,4(sp)
   16574:	dc000015 	stw	r16,0(sp)
   16578:	2500b804 	addi	r20,r4,736
   1657c:	a0002326 	beq	r20,zero,1660c <_fwalk_reent+0xbc>
   16580:	282b883a 	mov	r21,r5
   16584:	2027883a 	mov	r19,r4
   16588:	002f883a 	mov	r23,zero
   1658c:	05800044 	movi	r22,1
   16590:	04bfffc4 	movi	r18,-1
   16594:	a4400117 	ldw	r17,4(r20)
   16598:	a4000217 	ldw	r16,8(r20)
   1659c:	8c7fffc4 	addi	r17,r17,-1
   165a0:	88000c16 	blt	r17,zero,165d4 <_fwalk_reent+0x84>
   165a4:	84000304 	addi	r16,r16,12
   165a8:	8080000b 	ldhu	r2,0(r16)
   165ac:	8c7fffc4 	addi	r17,r17,-1
   165b0:	817ffd04 	addi	r5,r16,-12
   165b4:	b080052e 	bgeu	r22,r2,165cc <_fwalk_reent+0x7c>
   165b8:	8080008f 	ldh	r2,2(r16)
   165bc:	9809883a 	mov	r4,r19
   165c0:	14800226 	beq	r2,r18,165cc <_fwalk_reent+0x7c>
   165c4:	a83ee83a 	callr	r21
   165c8:	b8aeb03a 	or	r23,r23,r2
   165cc:	84001a04 	addi	r16,r16,104
   165d0:	8cbff51e 	bne	r17,r18,165a8 <__alt_data_end+0xfc0165a8>
   165d4:	a5000017 	ldw	r20,0(r20)
   165d8:	a03fee1e 	bne	r20,zero,16594 <__alt_data_end+0xfc016594>
   165dc:	b805883a 	mov	r2,r23
   165e0:	dfc00817 	ldw	ra,32(sp)
   165e4:	ddc00717 	ldw	r23,28(sp)
   165e8:	dd800617 	ldw	r22,24(sp)
   165ec:	dd400517 	ldw	r21,20(sp)
   165f0:	dd000417 	ldw	r20,16(sp)
   165f4:	dcc00317 	ldw	r19,12(sp)
   165f8:	dc800217 	ldw	r18,8(sp)
   165fc:	dc400117 	ldw	r17,4(sp)
   16600:	dc000017 	ldw	r16,0(sp)
   16604:	dec00904 	addi	sp,sp,36
   16608:	f800283a 	ret
   1660c:	002f883a 	mov	r23,zero
   16610:	003ff206 	br	165dc <__alt_data_end+0xfc0165dc>

00016614 <_setlocale_r>:
   16614:	30001b26 	beq	r6,zero,16684 <_setlocale_r+0x70>
   16618:	014000f4 	movhi	r5,3
   1661c:	defffe04 	addi	sp,sp,-8
   16620:	296a6d04 	addi	r5,r5,-22092
   16624:	3009883a 	mov	r4,r6
   16628:	dc000015 	stw	r16,0(sp)
   1662c:	dfc00115 	stw	ra,4(sp)
   16630:	3021883a 	mov	r16,r6
   16634:	000f3480 	call	f348 <strcmp>
   16638:	1000061e 	bne	r2,zero,16654 <_setlocale_r+0x40>
   1663c:	008000f4 	movhi	r2,3
   16640:	10aa4604 	addi	r2,r2,-22248
   16644:	dfc00117 	ldw	ra,4(sp)
   16648:	dc000017 	ldw	r16,0(sp)
   1664c:	dec00204 	addi	sp,sp,8
   16650:	f800283a 	ret
   16654:	014000f4 	movhi	r5,3
   16658:	296a4604 	addi	r5,r5,-22248
   1665c:	8009883a 	mov	r4,r16
   16660:	000f3480 	call	f348 <strcmp>
   16664:	103ff526 	beq	r2,zero,1663c <__alt_data_end+0xfc01663c>
   16668:	014000f4 	movhi	r5,3
   1666c:	296a5004 	addi	r5,r5,-22208
   16670:	8009883a 	mov	r4,r16
   16674:	000f3480 	call	f348 <strcmp>
   16678:	103ff026 	beq	r2,zero,1663c <__alt_data_end+0xfc01663c>
   1667c:	0005883a 	mov	r2,zero
   16680:	003ff006 	br	16644 <__alt_data_end+0xfc016644>
   16684:	008000f4 	movhi	r2,3
   16688:	10aa4604 	addi	r2,r2,-22248
   1668c:	f800283a 	ret

00016690 <__locale_charset>:
   16690:	008000f4 	movhi	r2,3
   16694:	10acf404 	addi	r2,r2,-19504
   16698:	f800283a 	ret

0001669c <__locale_mb_cur_max>:
   1669c:	008000f4 	movhi	r2,3
   166a0:	10b74e04 	addi	r2,r2,-8904
   166a4:	10800017 	ldw	r2,0(r2)
   166a8:	f800283a 	ret

000166ac <__locale_msgcharset>:
   166ac:	008000f4 	movhi	r2,3
   166b0:	10acec04 	addi	r2,r2,-19536
   166b4:	f800283a 	ret

000166b8 <__locale_cjk_lang>:
   166b8:	0005883a 	mov	r2,zero
   166bc:	f800283a 	ret

000166c0 <_localeconv_r>:
   166c0:	008000f4 	movhi	r2,3
   166c4:	10acfc04 	addi	r2,r2,-19472
   166c8:	f800283a 	ret

000166cc <setlocale>:
   166cc:	008000f4 	movhi	r2,3
   166d0:	10b74b04 	addi	r2,r2,-8916
   166d4:	280d883a 	mov	r6,r5
   166d8:	200b883a 	mov	r5,r4
   166dc:	11000017 	ldw	r4,0(r2)
   166e0:	00166141 	jmpi	16614 <_setlocale_r>

000166e4 <localeconv>:
   166e4:	008000f4 	movhi	r2,3
   166e8:	10acfc04 	addi	r2,r2,-19472
   166ec:	f800283a 	ret

000166f0 <__smakebuf_r>:
   166f0:	2880030b 	ldhu	r2,12(r5)
   166f4:	10c0008c 	andi	r3,r2,2
   166f8:	1800411e 	bne	r3,zero,16800 <__smakebuf_r+0x110>
   166fc:	deffec04 	addi	sp,sp,-80
   16700:	dc000f15 	stw	r16,60(sp)
   16704:	2821883a 	mov	r16,r5
   16708:	2940038f 	ldh	r5,14(r5)
   1670c:	dc401015 	stw	r17,64(sp)
   16710:	dfc01315 	stw	ra,76(sp)
   16714:	dcc01215 	stw	r19,72(sp)
   16718:	dc801115 	stw	r18,68(sp)
   1671c:	2023883a 	mov	r17,r4
   16720:	28001c16 	blt	r5,zero,16794 <__smakebuf_r+0xa4>
   16724:	d80d883a 	mov	r6,sp
   16728:	001b67c0 	call	1b67c <_fstat_r>
   1672c:	10001816 	blt	r2,zero,16790 <__smakebuf_r+0xa0>
   16730:	d8800117 	ldw	r2,4(sp)
   16734:	00e00014 	movui	r3,32768
   16738:	10bc000c 	andi	r2,r2,61440
   1673c:	14c80020 	cmpeqi	r19,r2,8192
   16740:	10c03726 	beq	r2,r3,16820 <__smakebuf_r+0x130>
   16744:	80c0030b 	ldhu	r3,12(r16)
   16748:	18c20014 	ori	r3,r3,2048
   1674c:	80c0030d 	sth	r3,12(r16)
   16750:	00c80004 	movi	r3,8192
   16754:	10c0521e 	bne	r2,r3,168a0 <__smakebuf_r+0x1b0>
   16758:	8140038f 	ldh	r5,14(r16)
   1675c:	8809883a 	mov	r4,r17
   16760:	001b6d80 	call	1b6d8 <_isatty_r>
   16764:	10004c26 	beq	r2,zero,16898 <__smakebuf_r+0x1a8>
   16768:	8080030b 	ldhu	r2,12(r16)
   1676c:	80c010c4 	addi	r3,r16,67
   16770:	80c00015 	stw	r3,0(r16)
   16774:	10800054 	ori	r2,r2,1
   16778:	8080030d 	sth	r2,12(r16)
   1677c:	00800044 	movi	r2,1
   16780:	80c00415 	stw	r3,16(r16)
   16784:	80800515 	stw	r2,20(r16)
   16788:	04810004 	movi	r18,1024
   1678c:	00000706 	br	167ac <__smakebuf_r+0xbc>
   16790:	8080030b 	ldhu	r2,12(r16)
   16794:	10c0200c 	andi	r3,r2,128
   16798:	18001f1e 	bne	r3,zero,16818 <__smakebuf_r+0x128>
   1679c:	04810004 	movi	r18,1024
   167a0:	10820014 	ori	r2,r2,2048
   167a4:	8080030d 	sth	r2,12(r16)
   167a8:	0027883a 	mov	r19,zero
   167ac:	900b883a 	mov	r5,r18
   167b0:	8809883a 	mov	r4,r17
   167b4:	000e3500 	call	e350 <_malloc_r>
   167b8:	10002c26 	beq	r2,zero,1686c <__smakebuf_r+0x17c>
   167bc:	80c0030b 	ldhu	r3,12(r16)
   167c0:	01000074 	movhi	r4,1
   167c4:	2115fa04 	addi	r4,r4,22504
   167c8:	89000f15 	stw	r4,60(r17)
   167cc:	18c02014 	ori	r3,r3,128
   167d0:	80c0030d 	sth	r3,12(r16)
   167d4:	80800015 	stw	r2,0(r16)
   167d8:	80800415 	stw	r2,16(r16)
   167dc:	84800515 	stw	r18,20(r16)
   167e0:	98001a1e 	bne	r19,zero,1684c <__smakebuf_r+0x15c>
   167e4:	dfc01317 	ldw	ra,76(sp)
   167e8:	dcc01217 	ldw	r19,72(sp)
   167ec:	dc801117 	ldw	r18,68(sp)
   167f0:	dc401017 	ldw	r17,64(sp)
   167f4:	dc000f17 	ldw	r16,60(sp)
   167f8:	dec01404 	addi	sp,sp,80
   167fc:	f800283a 	ret
   16800:	288010c4 	addi	r2,r5,67
   16804:	28800015 	stw	r2,0(r5)
   16808:	28800415 	stw	r2,16(r5)
   1680c:	00800044 	movi	r2,1
   16810:	28800515 	stw	r2,20(r5)
   16814:	f800283a 	ret
   16818:	04801004 	movi	r18,64
   1681c:	003fe006 	br	167a0 <__alt_data_end+0xfc0167a0>
   16820:	81000a17 	ldw	r4,40(r16)
   16824:	00c000b4 	movhi	r3,2
   16828:	18e0ef04 	addi	r3,r3,-31812
   1682c:	20ffc51e 	bne	r4,r3,16744 <__alt_data_end+0xfc016744>
   16830:	8080030b 	ldhu	r2,12(r16)
   16834:	04810004 	movi	r18,1024
   16838:	84801315 	stw	r18,76(r16)
   1683c:	1484b03a 	or	r2,r2,r18
   16840:	8080030d 	sth	r2,12(r16)
   16844:	0027883a 	mov	r19,zero
   16848:	003fd806 	br	167ac <__alt_data_end+0xfc0167ac>
   1684c:	8140038f 	ldh	r5,14(r16)
   16850:	8809883a 	mov	r4,r17
   16854:	001b6d80 	call	1b6d8 <_isatty_r>
   16858:	103fe226 	beq	r2,zero,167e4 <__alt_data_end+0xfc0167e4>
   1685c:	8080030b 	ldhu	r2,12(r16)
   16860:	10800054 	ori	r2,r2,1
   16864:	8080030d 	sth	r2,12(r16)
   16868:	003fde06 	br	167e4 <__alt_data_end+0xfc0167e4>
   1686c:	8080030b 	ldhu	r2,12(r16)
   16870:	10c0800c 	andi	r3,r2,512
   16874:	183fdb1e 	bne	r3,zero,167e4 <__alt_data_end+0xfc0167e4>
   16878:	10800094 	ori	r2,r2,2
   1687c:	80c010c4 	addi	r3,r16,67
   16880:	8080030d 	sth	r2,12(r16)
   16884:	00800044 	movi	r2,1
   16888:	80c00015 	stw	r3,0(r16)
   1688c:	80c00415 	stw	r3,16(r16)
   16890:	80800515 	stw	r2,20(r16)
   16894:	003fd306 	br	167e4 <__alt_data_end+0xfc0167e4>
   16898:	04810004 	movi	r18,1024
   1689c:	003fc306 	br	167ac <__alt_data_end+0xfc0167ac>
   168a0:	0027883a 	mov	r19,zero
   168a4:	04810004 	movi	r18,1024
   168a8:	003fc006 	br	167ac <__alt_data_end+0xfc0167ac>

000168ac <memchr>:
   168ac:	208000cc 	andi	r2,r4,3
   168b0:	280f883a 	mov	r7,r5
   168b4:	10003426 	beq	r2,zero,16988 <memchr+0xdc>
   168b8:	30bfffc4 	addi	r2,r6,-1
   168bc:	30001a26 	beq	r6,zero,16928 <memchr+0x7c>
   168c0:	20c00003 	ldbu	r3,0(r4)
   168c4:	29803fcc 	andi	r6,r5,255
   168c8:	30c0051e 	bne	r6,r3,168e0 <memchr+0x34>
   168cc:	00001806 	br	16930 <memchr+0x84>
   168d0:	10001526 	beq	r2,zero,16928 <memchr+0x7c>
   168d4:	20c00003 	ldbu	r3,0(r4)
   168d8:	10bfffc4 	addi	r2,r2,-1
   168dc:	30c01426 	beq	r6,r3,16930 <memchr+0x84>
   168e0:	21000044 	addi	r4,r4,1
   168e4:	20c000cc 	andi	r3,r4,3
   168e8:	183ff91e 	bne	r3,zero,168d0 <__alt_data_end+0xfc0168d0>
   168ec:	020000c4 	movi	r8,3
   168f0:	40801136 	bltu	r8,r2,16938 <memchr+0x8c>
   168f4:	10000c26 	beq	r2,zero,16928 <memchr+0x7c>
   168f8:	20c00003 	ldbu	r3,0(r4)
   168fc:	29403fcc 	andi	r5,r5,255
   16900:	28c00b26 	beq	r5,r3,16930 <memchr+0x84>
   16904:	20c00044 	addi	r3,r4,1
   16908:	39803fcc 	andi	r6,r7,255
   1690c:	2089883a 	add	r4,r4,r2
   16910:	00000306 	br	16920 <memchr+0x74>
   16914:	18c00044 	addi	r3,r3,1
   16918:	197fffc3 	ldbu	r5,-1(r3)
   1691c:	31400526 	beq	r6,r5,16934 <memchr+0x88>
   16920:	1805883a 	mov	r2,r3
   16924:	20fffb1e 	bne	r4,r3,16914 <__alt_data_end+0xfc016914>
   16928:	0005883a 	mov	r2,zero
   1692c:	f800283a 	ret
   16930:	2005883a 	mov	r2,r4
   16934:	f800283a 	ret
   16938:	28c03fcc 	andi	r3,r5,255
   1693c:	1812923a 	slli	r9,r3,8
   16940:	02ffbff4 	movhi	r11,65279
   16944:	02a02074 	movhi	r10,32897
   16948:	48d2b03a 	or	r9,r9,r3
   1694c:	4806943a 	slli	r3,r9,16
   16950:	5affbfc4 	addi	r11,r11,-257
   16954:	52a02004 	addi	r10,r10,-32640
   16958:	48d2b03a 	or	r9,r9,r3
   1695c:	20c00017 	ldw	r3,0(r4)
   16960:	48c6f03a 	xor	r3,r9,r3
   16964:	1acd883a 	add	r6,r3,r11
   16968:	00c6303a 	nor	r3,zero,r3
   1696c:	30c6703a 	and	r3,r6,r3
   16970:	1a86703a 	and	r3,r3,r10
   16974:	183fe01e 	bne	r3,zero,168f8 <__alt_data_end+0xfc0168f8>
   16978:	10bfff04 	addi	r2,r2,-4
   1697c:	21000104 	addi	r4,r4,4
   16980:	40bff636 	bltu	r8,r2,1695c <__alt_data_end+0xfc01695c>
   16984:	003fdb06 	br	168f4 <__alt_data_end+0xfc0168f4>
   16988:	3005883a 	mov	r2,r6
   1698c:	003fd706 	br	168ec <__alt_data_end+0xfc0168ec>

00016990 <memmove>:
   16990:	2005883a 	mov	r2,r4
   16994:	29000b2e 	bgeu	r5,r4,169c4 <memmove+0x34>
   16998:	298f883a 	add	r7,r5,r6
   1699c:	21c0092e 	bgeu	r4,r7,169c4 <memmove+0x34>
   169a0:	2187883a 	add	r3,r4,r6
   169a4:	198bc83a 	sub	r5,r3,r6
   169a8:	30004826 	beq	r6,zero,16acc <memmove+0x13c>
   169ac:	39ffffc4 	addi	r7,r7,-1
   169b0:	39000003 	ldbu	r4,0(r7)
   169b4:	18ffffc4 	addi	r3,r3,-1
   169b8:	19000005 	stb	r4,0(r3)
   169bc:	28fffb1e 	bne	r5,r3,169ac <__alt_data_end+0xfc0169ac>
   169c0:	f800283a 	ret
   169c4:	00c003c4 	movi	r3,15
   169c8:	1980412e 	bgeu	r3,r6,16ad0 <memmove+0x140>
   169cc:	2886b03a 	or	r3,r5,r2
   169d0:	18c000cc 	andi	r3,r3,3
   169d4:	1800401e 	bne	r3,zero,16ad8 <memmove+0x148>
   169d8:	33fffc04 	addi	r15,r6,-16
   169dc:	781ed13a 	srli	r15,r15,4
   169e0:	28c00104 	addi	r3,r5,4
   169e4:	13400104 	addi	r13,r2,4
   169e8:	781c913a 	slli	r14,r15,4
   169ec:	2b000204 	addi	r12,r5,8
   169f0:	12c00204 	addi	r11,r2,8
   169f4:	73800504 	addi	r14,r14,20
   169f8:	2a800304 	addi	r10,r5,12
   169fc:	12400304 	addi	r9,r2,12
   16a00:	2b9d883a 	add	r14,r5,r14
   16a04:	2811883a 	mov	r8,r5
   16a08:	100f883a 	mov	r7,r2
   16a0c:	41000017 	ldw	r4,0(r8)
   16a10:	39c00404 	addi	r7,r7,16
   16a14:	18c00404 	addi	r3,r3,16
   16a18:	393ffc15 	stw	r4,-16(r7)
   16a1c:	193ffc17 	ldw	r4,-16(r3)
   16a20:	6b400404 	addi	r13,r13,16
   16a24:	5ac00404 	addi	r11,r11,16
   16a28:	693ffc15 	stw	r4,-16(r13)
   16a2c:	61000017 	ldw	r4,0(r12)
   16a30:	4a400404 	addi	r9,r9,16
   16a34:	42000404 	addi	r8,r8,16
   16a38:	593ffc15 	stw	r4,-16(r11)
   16a3c:	51000017 	ldw	r4,0(r10)
   16a40:	63000404 	addi	r12,r12,16
   16a44:	52800404 	addi	r10,r10,16
   16a48:	493ffc15 	stw	r4,-16(r9)
   16a4c:	1bbfef1e 	bne	r3,r14,16a0c <__alt_data_end+0xfc016a0c>
   16a50:	79000044 	addi	r4,r15,1
   16a54:	2008913a 	slli	r4,r4,4
   16a58:	328003cc 	andi	r10,r6,15
   16a5c:	02c000c4 	movi	r11,3
   16a60:	1107883a 	add	r3,r2,r4
   16a64:	290b883a 	add	r5,r5,r4
   16a68:	5a801e2e 	bgeu	r11,r10,16ae4 <memmove+0x154>
   16a6c:	1813883a 	mov	r9,r3
   16a70:	2811883a 	mov	r8,r5
   16a74:	500f883a 	mov	r7,r10
   16a78:	41000017 	ldw	r4,0(r8)
   16a7c:	4a400104 	addi	r9,r9,4
   16a80:	39ffff04 	addi	r7,r7,-4
   16a84:	493fff15 	stw	r4,-4(r9)
   16a88:	42000104 	addi	r8,r8,4
   16a8c:	59fffa36 	bltu	r11,r7,16a78 <__alt_data_end+0xfc016a78>
   16a90:	513fff04 	addi	r4,r10,-4
   16a94:	2008d0ba 	srli	r4,r4,2
   16a98:	318000cc 	andi	r6,r6,3
   16a9c:	21000044 	addi	r4,r4,1
   16aa0:	2109883a 	add	r4,r4,r4
   16aa4:	2109883a 	add	r4,r4,r4
   16aa8:	1907883a 	add	r3,r3,r4
   16aac:	290b883a 	add	r5,r5,r4
   16ab0:	30000b26 	beq	r6,zero,16ae0 <memmove+0x150>
   16ab4:	198d883a 	add	r6,r3,r6
   16ab8:	29c00003 	ldbu	r7,0(r5)
   16abc:	18c00044 	addi	r3,r3,1
   16ac0:	29400044 	addi	r5,r5,1
   16ac4:	19ffffc5 	stb	r7,-1(r3)
   16ac8:	19bffb1e 	bne	r3,r6,16ab8 <__alt_data_end+0xfc016ab8>
   16acc:	f800283a 	ret
   16ad0:	1007883a 	mov	r3,r2
   16ad4:	003ff606 	br	16ab0 <__alt_data_end+0xfc016ab0>
   16ad8:	1007883a 	mov	r3,r2
   16adc:	003ff506 	br	16ab4 <__alt_data_end+0xfc016ab4>
   16ae0:	f800283a 	ret
   16ae4:	500d883a 	mov	r6,r10
   16ae8:	003ff106 	br	16ab0 <__alt_data_end+0xfc016ab0>

00016aec <_Balloc>:
   16aec:	20801317 	ldw	r2,76(r4)
   16af0:	defffc04 	addi	sp,sp,-16
   16af4:	dc400115 	stw	r17,4(sp)
   16af8:	dc000015 	stw	r16,0(sp)
   16afc:	dfc00315 	stw	ra,12(sp)
   16b00:	dc800215 	stw	r18,8(sp)
   16b04:	2023883a 	mov	r17,r4
   16b08:	2821883a 	mov	r16,r5
   16b0c:	10000f26 	beq	r2,zero,16b4c <_Balloc+0x60>
   16b10:	8407883a 	add	r3,r16,r16
   16b14:	18c7883a 	add	r3,r3,r3
   16b18:	10c7883a 	add	r3,r2,r3
   16b1c:	18800017 	ldw	r2,0(r3)
   16b20:	10001126 	beq	r2,zero,16b68 <_Balloc+0x7c>
   16b24:	11000017 	ldw	r4,0(r2)
   16b28:	19000015 	stw	r4,0(r3)
   16b2c:	10000415 	stw	zero,16(r2)
   16b30:	10000315 	stw	zero,12(r2)
   16b34:	dfc00317 	ldw	ra,12(sp)
   16b38:	dc800217 	ldw	r18,8(sp)
   16b3c:	dc400117 	ldw	r17,4(sp)
   16b40:	dc000017 	ldw	r16,0(sp)
   16b44:	dec00404 	addi	sp,sp,16
   16b48:	f800283a 	ret
   16b4c:	01800844 	movi	r6,33
   16b50:	01400104 	movi	r5,4
   16b54:	001b2940 	call	1b294 <_calloc_r>
   16b58:	88801315 	stw	r2,76(r17)
   16b5c:	103fec1e 	bne	r2,zero,16b10 <__alt_data_end+0xfc016b10>
   16b60:	0005883a 	mov	r2,zero
   16b64:	003ff306 	br	16b34 <__alt_data_end+0xfc016b34>
   16b68:	01400044 	movi	r5,1
   16b6c:	2c24983a 	sll	r18,r5,r16
   16b70:	8809883a 	mov	r4,r17
   16b74:	91800144 	addi	r6,r18,5
   16b78:	318d883a 	add	r6,r6,r6
   16b7c:	318d883a 	add	r6,r6,r6
   16b80:	001b2940 	call	1b294 <_calloc_r>
   16b84:	103ff626 	beq	r2,zero,16b60 <__alt_data_end+0xfc016b60>
   16b88:	14000115 	stw	r16,4(r2)
   16b8c:	14800215 	stw	r18,8(r2)
   16b90:	003fe606 	br	16b2c <__alt_data_end+0xfc016b2c>

00016b94 <_Bfree>:
   16b94:	28000826 	beq	r5,zero,16bb8 <_Bfree+0x24>
   16b98:	28c00117 	ldw	r3,4(r5)
   16b9c:	20801317 	ldw	r2,76(r4)
   16ba0:	18c7883a 	add	r3,r3,r3
   16ba4:	18c7883a 	add	r3,r3,r3
   16ba8:	10c5883a 	add	r2,r2,r3
   16bac:	10c00017 	ldw	r3,0(r2)
   16bb0:	28c00015 	stw	r3,0(r5)
   16bb4:	11400015 	stw	r5,0(r2)
   16bb8:	f800283a 	ret

00016bbc <__multadd>:
   16bbc:	defff704 	addi	sp,sp,-36
   16bc0:	dc800215 	stw	r18,8(sp)
   16bc4:	2c800417 	ldw	r18,16(r5)
   16bc8:	dd800615 	stw	r22,24(sp)
   16bcc:	dd400515 	stw	r21,20(sp)
   16bd0:	dd000415 	stw	r20,16(sp)
   16bd4:	dcc00315 	stw	r19,12(sp)
   16bd8:	dc400115 	stw	r17,4(sp)
   16bdc:	dc000015 	stw	r16,0(sp)
   16be0:	dfc00815 	stw	ra,32(sp)
   16be4:	ddc00715 	stw	r23,28(sp)
   16be8:	2827883a 	mov	r19,r5
   16bec:	2029883a 	mov	r20,r4
   16bf0:	3023883a 	mov	r17,r6
   16bf4:	3821883a 	mov	r16,r7
   16bf8:	2d400504 	addi	r21,r5,20
   16bfc:	002d883a 	mov	r22,zero
   16c00:	adc00017 	ldw	r23,0(r21)
   16c04:	880b883a 	mov	r5,r17
   16c08:	ad400104 	addi	r21,r21,4
   16c0c:	b93fffcc 	andi	r4,r23,65535
   16c10:	000cda80 	call	cda8 <__mulsi3>
   16c14:	b808d43a 	srli	r4,r23,16
   16c18:	880b883a 	mov	r5,r17
   16c1c:	1421883a 	add	r16,r2,r16
   16c20:	000cda80 	call	cda8 <__mulsi3>
   16c24:	800ed43a 	srli	r7,r16,16
   16c28:	80ffffcc 	andi	r3,r16,65535
   16c2c:	b5800044 	addi	r22,r22,1
   16c30:	11c5883a 	add	r2,r2,r7
   16c34:	100e943a 	slli	r7,r2,16
   16c38:	1020d43a 	srli	r16,r2,16
   16c3c:	38c7883a 	add	r3,r7,r3
   16c40:	a8ffff15 	stw	r3,-4(r21)
   16c44:	b4bfee16 	blt	r22,r18,16c00 <__alt_data_end+0xfc016c00>
   16c48:	80000926 	beq	r16,zero,16c70 <__multadd+0xb4>
   16c4c:	98800217 	ldw	r2,8(r19)
   16c50:	9080130e 	bge	r18,r2,16ca0 <__multadd+0xe4>
   16c54:	90800144 	addi	r2,r18,5
   16c58:	1085883a 	add	r2,r2,r2
   16c5c:	1085883a 	add	r2,r2,r2
   16c60:	9885883a 	add	r2,r19,r2
   16c64:	14000015 	stw	r16,0(r2)
   16c68:	94800044 	addi	r18,r18,1
   16c6c:	9c800415 	stw	r18,16(r19)
   16c70:	9805883a 	mov	r2,r19
   16c74:	dfc00817 	ldw	ra,32(sp)
   16c78:	ddc00717 	ldw	r23,28(sp)
   16c7c:	dd800617 	ldw	r22,24(sp)
   16c80:	dd400517 	ldw	r21,20(sp)
   16c84:	dd000417 	ldw	r20,16(sp)
   16c88:	dcc00317 	ldw	r19,12(sp)
   16c8c:	dc800217 	ldw	r18,8(sp)
   16c90:	dc400117 	ldw	r17,4(sp)
   16c94:	dc000017 	ldw	r16,0(sp)
   16c98:	dec00904 	addi	sp,sp,36
   16c9c:	f800283a 	ret
   16ca0:	99400117 	ldw	r5,4(r19)
   16ca4:	a009883a 	mov	r4,r20
   16ca8:	29400044 	addi	r5,r5,1
   16cac:	0016aec0 	call	16aec <_Balloc>
   16cb0:	99800417 	ldw	r6,16(r19)
   16cb4:	99400304 	addi	r5,r19,12
   16cb8:	11000304 	addi	r4,r2,12
   16cbc:	31800084 	addi	r6,r6,2
   16cc0:	318d883a 	add	r6,r6,r6
   16cc4:	318d883a 	add	r6,r6,r6
   16cc8:	1023883a 	mov	r17,r2
   16ccc:	000eb5c0 	call	eb5c <memcpy>
   16cd0:	98000a26 	beq	r19,zero,16cfc <__multadd+0x140>
   16cd4:	98c00117 	ldw	r3,4(r19)
   16cd8:	a0801317 	ldw	r2,76(r20)
   16cdc:	18c7883a 	add	r3,r3,r3
   16ce0:	18c7883a 	add	r3,r3,r3
   16ce4:	10c5883a 	add	r2,r2,r3
   16ce8:	10c00017 	ldw	r3,0(r2)
   16cec:	98c00015 	stw	r3,0(r19)
   16cf0:	14c00015 	stw	r19,0(r2)
   16cf4:	8827883a 	mov	r19,r17
   16cf8:	003fd606 	br	16c54 <__alt_data_end+0xfc016c54>
   16cfc:	8827883a 	mov	r19,r17
   16d00:	003fd406 	br	16c54 <__alt_data_end+0xfc016c54>

00016d04 <__s2b>:
   16d04:	defff904 	addi	sp,sp,-28
   16d08:	dc400115 	stw	r17,4(sp)
   16d0c:	dc000015 	stw	r16,0(sp)
   16d10:	2023883a 	mov	r17,r4
   16d14:	2821883a 	mov	r16,r5
   16d18:	39000204 	addi	r4,r7,8
   16d1c:	01400244 	movi	r5,9
   16d20:	dcc00315 	stw	r19,12(sp)
   16d24:	dc800215 	stw	r18,8(sp)
   16d28:	dfc00615 	stw	ra,24(sp)
   16d2c:	dd400515 	stw	r21,20(sp)
   16d30:	dd000415 	stw	r20,16(sp)
   16d34:	3825883a 	mov	r18,r7
   16d38:	3027883a 	mov	r19,r6
   16d3c:	000cbf40 	call	cbf4 <__divsi3>
   16d40:	00c00044 	movi	r3,1
   16d44:	000b883a 	mov	r5,zero
   16d48:	1880030e 	bge	r3,r2,16d58 <__s2b+0x54>
   16d4c:	18c7883a 	add	r3,r3,r3
   16d50:	29400044 	addi	r5,r5,1
   16d54:	18bffd16 	blt	r3,r2,16d4c <__alt_data_end+0xfc016d4c>
   16d58:	8809883a 	mov	r4,r17
   16d5c:	0016aec0 	call	16aec <_Balloc>
   16d60:	d8c00717 	ldw	r3,28(sp)
   16d64:	10c00515 	stw	r3,20(r2)
   16d68:	00c00044 	movi	r3,1
   16d6c:	10c00415 	stw	r3,16(r2)
   16d70:	00c00244 	movi	r3,9
   16d74:	1cc0210e 	bge	r3,r19,16dfc <__s2b+0xf8>
   16d78:	80eb883a 	add	r21,r16,r3
   16d7c:	a829883a 	mov	r20,r21
   16d80:	84e1883a 	add	r16,r16,r19
   16d84:	a1c00007 	ldb	r7,0(r20)
   16d88:	01800284 	movi	r6,10
   16d8c:	a5000044 	addi	r20,r20,1
   16d90:	100b883a 	mov	r5,r2
   16d94:	39fff404 	addi	r7,r7,-48
   16d98:	8809883a 	mov	r4,r17
   16d9c:	0016bbc0 	call	16bbc <__multadd>
   16da0:	a43ff81e 	bne	r20,r16,16d84 <__alt_data_end+0xfc016d84>
   16da4:	ace1883a 	add	r16,r21,r19
   16da8:	843ffe04 	addi	r16,r16,-8
   16dac:	9c800a0e 	bge	r19,r18,16dd8 <__s2b+0xd4>
   16db0:	94e5c83a 	sub	r18,r18,r19
   16db4:	84a5883a 	add	r18,r16,r18
   16db8:	81c00007 	ldb	r7,0(r16)
   16dbc:	01800284 	movi	r6,10
   16dc0:	84000044 	addi	r16,r16,1
   16dc4:	100b883a 	mov	r5,r2
   16dc8:	39fff404 	addi	r7,r7,-48
   16dcc:	8809883a 	mov	r4,r17
   16dd0:	0016bbc0 	call	16bbc <__multadd>
   16dd4:	84bff81e 	bne	r16,r18,16db8 <__alt_data_end+0xfc016db8>
   16dd8:	dfc00617 	ldw	ra,24(sp)
   16ddc:	dd400517 	ldw	r21,20(sp)
   16de0:	dd000417 	ldw	r20,16(sp)
   16de4:	dcc00317 	ldw	r19,12(sp)
   16de8:	dc800217 	ldw	r18,8(sp)
   16dec:	dc400117 	ldw	r17,4(sp)
   16df0:	dc000017 	ldw	r16,0(sp)
   16df4:	dec00704 	addi	sp,sp,28
   16df8:	f800283a 	ret
   16dfc:	84000284 	addi	r16,r16,10
   16e00:	1827883a 	mov	r19,r3
   16e04:	003fe906 	br	16dac <__alt_data_end+0xfc016dac>

00016e08 <__hi0bits>:
   16e08:	20bfffec 	andhi	r2,r4,65535
   16e0c:	1000141e 	bne	r2,zero,16e60 <__hi0bits+0x58>
   16e10:	2008943a 	slli	r4,r4,16
   16e14:	00800404 	movi	r2,16
   16e18:	20ffc02c 	andhi	r3,r4,65280
   16e1c:	1800021e 	bne	r3,zero,16e28 <__hi0bits+0x20>
   16e20:	2008923a 	slli	r4,r4,8
   16e24:	10800204 	addi	r2,r2,8
   16e28:	20fc002c 	andhi	r3,r4,61440
   16e2c:	1800021e 	bne	r3,zero,16e38 <__hi0bits+0x30>
   16e30:	2008913a 	slli	r4,r4,4
   16e34:	10800104 	addi	r2,r2,4
   16e38:	20f0002c 	andhi	r3,r4,49152
   16e3c:	1800031e 	bne	r3,zero,16e4c <__hi0bits+0x44>
   16e40:	2109883a 	add	r4,r4,r4
   16e44:	10800084 	addi	r2,r2,2
   16e48:	2109883a 	add	r4,r4,r4
   16e4c:	20000316 	blt	r4,zero,16e5c <__hi0bits+0x54>
   16e50:	2110002c 	andhi	r4,r4,16384
   16e54:	2000041e 	bne	r4,zero,16e68 <__hi0bits+0x60>
   16e58:	00800804 	movi	r2,32
   16e5c:	f800283a 	ret
   16e60:	0005883a 	mov	r2,zero
   16e64:	003fec06 	br	16e18 <__alt_data_end+0xfc016e18>
   16e68:	10800044 	addi	r2,r2,1
   16e6c:	f800283a 	ret

00016e70 <__lo0bits>:
   16e70:	20c00017 	ldw	r3,0(r4)
   16e74:	188001cc 	andi	r2,r3,7
   16e78:	10000826 	beq	r2,zero,16e9c <__lo0bits+0x2c>
   16e7c:	1880004c 	andi	r2,r3,1
   16e80:	1000211e 	bne	r2,zero,16f08 <__lo0bits+0x98>
   16e84:	1880008c 	andi	r2,r3,2
   16e88:	1000211e 	bne	r2,zero,16f10 <__lo0bits+0xa0>
   16e8c:	1806d0ba 	srli	r3,r3,2
   16e90:	00800084 	movi	r2,2
   16e94:	20c00015 	stw	r3,0(r4)
   16e98:	f800283a 	ret
   16e9c:	18bfffcc 	andi	r2,r3,65535
   16ea0:	10001326 	beq	r2,zero,16ef0 <__lo0bits+0x80>
   16ea4:	0005883a 	mov	r2,zero
   16ea8:	19403fcc 	andi	r5,r3,255
   16eac:	2800021e 	bne	r5,zero,16eb8 <__lo0bits+0x48>
   16eb0:	1806d23a 	srli	r3,r3,8
   16eb4:	10800204 	addi	r2,r2,8
   16eb8:	194003cc 	andi	r5,r3,15
   16ebc:	2800021e 	bne	r5,zero,16ec8 <__lo0bits+0x58>
   16ec0:	1806d13a 	srli	r3,r3,4
   16ec4:	10800104 	addi	r2,r2,4
   16ec8:	194000cc 	andi	r5,r3,3
   16ecc:	2800021e 	bne	r5,zero,16ed8 <__lo0bits+0x68>
   16ed0:	1806d0ba 	srli	r3,r3,2
   16ed4:	10800084 	addi	r2,r2,2
   16ed8:	1940004c 	andi	r5,r3,1
   16edc:	2800081e 	bne	r5,zero,16f00 <__lo0bits+0x90>
   16ee0:	1806d07a 	srli	r3,r3,1
   16ee4:	1800051e 	bne	r3,zero,16efc <__lo0bits+0x8c>
   16ee8:	00800804 	movi	r2,32
   16eec:	f800283a 	ret
   16ef0:	1806d43a 	srli	r3,r3,16
   16ef4:	00800404 	movi	r2,16
   16ef8:	003feb06 	br	16ea8 <__alt_data_end+0xfc016ea8>
   16efc:	10800044 	addi	r2,r2,1
   16f00:	20c00015 	stw	r3,0(r4)
   16f04:	f800283a 	ret
   16f08:	0005883a 	mov	r2,zero
   16f0c:	f800283a 	ret
   16f10:	1806d07a 	srli	r3,r3,1
   16f14:	00800044 	movi	r2,1
   16f18:	20c00015 	stw	r3,0(r4)
   16f1c:	f800283a 	ret

00016f20 <__i2b>:
   16f20:	defffd04 	addi	sp,sp,-12
   16f24:	dc000015 	stw	r16,0(sp)
   16f28:	04000044 	movi	r16,1
   16f2c:	dc400115 	stw	r17,4(sp)
   16f30:	2823883a 	mov	r17,r5
   16f34:	800b883a 	mov	r5,r16
   16f38:	dfc00215 	stw	ra,8(sp)
   16f3c:	0016aec0 	call	16aec <_Balloc>
   16f40:	14400515 	stw	r17,20(r2)
   16f44:	14000415 	stw	r16,16(r2)
   16f48:	dfc00217 	ldw	ra,8(sp)
   16f4c:	dc400117 	ldw	r17,4(sp)
   16f50:	dc000017 	ldw	r16,0(sp)
   16f54:	dec00304 	addi	sp,sp,12
   16f58:	f800283a 	ret

00016f5c <__multiply>:
   16f5c:	deffef04 	addi	sp,sp,-68
   16f60:	dc400815 	stw	r17,32(sp)
   16f64:	dc000715 	stw	r16,28(sp)
   16f68:	34400417 	ldw	r17,16(r6)
   16f6c:	2c000417 	ldw	r16,16(r5)
   16f70:	dd800d15 	stw	r22,52(sp)
   16f74:	dc800915 	stw	r18,36(sp)
   16f78:	dfc01015 	stw	ra,64(sp)
   16f7c:	df000f15 	stw	fp,60(sp)
   16f80:	ddc00e15 	stw	r23,56(sp)
   16f84:	dd400c15 	stw	r21,48(sp)
   16f88:	dd000b15 	stw	r20,44(sp)
   16f8c:	dcc00a15 	stw	r19,40(sp)
   16f90:	2825883a 	mov	r18,r5
   16f94:	302d883a 	mov	r22,r6
   16f98:	8440050e 	bge	r16,r17,16fb0 <__multiply+0x54>
   16f9c:	8007883a 	mov	r3,r16
   16fa0:	3025883a 	mov	r18,r6
   16fa4:	8821883a 	mov	r16,r17
   16fa8:	282d883a 	mov	r22,r5
   16fac:	1823883a 	mov	r17,r3
   16fb0:	90800217 	ldw	r2,8(r18)
   16fb4:	8447883a 	add	r3,r16,r17
   16fb8:	d8c00215 	stw	r3,8(sp)
   16fbc:	91400117 	ldw	r5,4(r18)
   16fc0:	10c0010e 	bge	r2,r3,16fc8 <__multiply+0x6c>
   16fc4:	29400044 	addi	r5,r5,1
   16fc8:	0016aec0 	call	16aec <_Balloc>
   16fcc:	d8c00217 	ldw	r3,8(sp)
   16fd0:	d8800615 	stw	r2,24(sp)
   16fd4:	18eb883a 	add	r21,r3,r3
   16fd8:	ad6b883a 	add	r21,r21,r21
   16fdc:	10c00504 	addi	r3,r2,20
   16fe0:	1d6b883a 	add	r21,r3,r21
   16fe4:	d8c00115 	stw	r3,4(sp)
   16fe8:	dd400315 	stw	r21,12(sp)
   16fec:	1805883a 	mov	r2,r3
   16ff0:	1d40042e 	bgeu	r3,r21,17004 <__multiply+0xa8>
   16ff4:	d8c00317 	ldw	r3,12(sp)
   16ff8:	10000015 	stw	zero,0(r2)
   16ffc:	10800104 	addi	r2,r2,4
   17000:	10fffc36 	bltu	r2,r3,16ff4 <__alt_data_end+0xfc016ff4>
   17004:	8c63883a 	add	r17,r17,r17
   17008:	b5800504 	addi	r22,r22,20
   1700c:	8c63883a 	add	r17,r17,r17
   17010:	94800504 	addi	r18,r18,20
   17014:	8421883a 	add	r16,r16,r16
   17018:	b463883a 	add	r17,r22,r17
   1701c:	8421883a 	add	r16,r16,r16
   17020:	dd800015 	stw	r22,0(sp)
   17024:	dc800415 	stw	r18,16(sp)
   17028:	dc400515 	stw	r17,20(sp)
   1702c:	9429883a 	add	r20,r18,r16
   17030:	b4404f2e 	bgeu	r22,r17,17170 <__multiply+0x214>
   17034:	d8c00017 	ldw	r3,0(sp)
   17038:	1c800017 	ldw	r18,0(r3)
   1703c:	947fffcc 	andi	r17,r18,65535
   17040:	88001e26 	beq	r17,zero,170bc <__multiply+0x160>
   17044:	dd800117 	ldw	r22,4(sp)
   17048:	dd400417 	ldw	r21,16(sp)
   1704c:	0027883a 	mov	r19,zero
   17050:	ac800017 	ldw	r18,0(r21)
   17054:	b4000017 	ldw	r16,0(r22)
   17058:	880b883a 	mov	r5,r17
   1705c:	913fffcc 	andi	r4,r18,65535
   17060:	000cda80 	call	cda8 <__mulsi3>
   17064:	9008d43a 	srli	r4,r18,16
   17068:	84bfffcc 	andi	r18,r16,65535
   1706c:	1485883a 	add	r2,r2,r18
   17070:	14e5883a 	add	r18,r2,r19
   17074:	8020d43a 	srli	r16,r16,16
   17078:	9026d43a 	srli	r19,r18,16
   1707c:	880b883a 	mov	r5,r17
   17080:	000cda80 	call	cda8 <__mulsi3>
   17084:	1405883a 	add	r2,r2,r16
   17088:	14e1883a 	add	r16,r2,r19
   1708c:	90ffffcc 	andi	r3,r18,65535
   17090:	8024943a 	slli	r18,r16,16
   17094:	ad400104 	addi	r21,r21,4
   17098:	b005883a 	mov	r2,r22
   1709c:	90c6b03a 	or	r3,r18,r3
   170a0:	b0c00015 	stw	r3,0(r22)
   170a4:	8026d43a 	srli	r19,r16,16
   170a8:	b5800104 	addi	r22,r22,4
   170ac:	ad3fe836 	bltu	r21,r20,17050 <__alt_data_end+0xfc017050>
   170b0:	d8c00017 	ldw	r3,0(sp)
   170b4:	14c00115 	stw	r19,4(r2)
   170b8:	1c800017 	ldw	r18,0(r3)
   170bc:	9024d43a 	srli	r18,r18,16
   170c0:	90002226 	beq	r18,zero,1714c <__multiply+0x1f0>
   170c4:	d8c00117 	ldw	r3,4(sp)
   170c8:	dd800417 	ldw	r22,16(sp)
   170cc:	002f883a 	mov	r23,zero
   170d0:	1f000017 	ldw	fp,0(r3)
   170d4:	1823883a 	mov	r17,r3
   170d8:	182b883a 	mov	r21,r3
   170dc:	e021883a 	mov	r16,fp
   170e0:	00000106 	br	170e8 <__multiply+0x18c>
   170e4:	982b883a 	mov	r21,r19
   170e8:	b100000b 	ldhu	r4,0(r22)
   170ec:	8020d43a 	srli	r16,r16,16
   170f0:	900b883a 	mov	r5,r18
   170f4:	000cda80 	call	cda8 <__mulsi3>
   170f8:	1405883a 	add	r2,r2,r16
   170fc:	15ef883a 	add	r23,r2,r23
   17100:	b804943a 	slli	r2,r23,16
   17104:	e0ffffcc 	andi	r3,fp,65535
   17108:	8c400104 	addi	r17,r17,4
   1710c:	10c6b03a 	or	r3,r2,r3
   17110:	88ffff15 	stw	r3,-4(r17)
   17114:	b5800104 	addi	r22,r22,4
   17118:	b13fff17 	ldw	r4,-4(r22)
   1711c:	acc00104 	addi	r19,r21,4
   17120:	900b883a 	mov	r5,r18
   17124:	2008d43a 	srli	r4,r4,16
   17128:	9c000017 	ldw	r16,0(r19)
   1712c:	000cda80 	call	cda8 <__mulsi3>
   17130:	b806d43a 	srli	r3,r23,16
   17134:	813fffcc 	andi	r4,r16,65535
   17138:	1105883a 	add	r2,r2,r4
   1713c:	10f9883a 	add	fp,r2,r3
   17140:	e02ed43a 	srli	r23,fp,16
   17144:	b53fe736 	bltu	r22,r20,170e4 <__alt_data_end+0xfc0170e4>
   17148:	af000115 	stw	fp,4(r21)
   1714c:	d8c00017 	ldw	r3,0(sp)
   17150:	d9000517 	ldw	r4,20(sp)
   17154:	18c00104 	addi	r3,r3,4
   17158:	d8c00015 	stw	r3,0(sp)
   1715c:	d8c00117 	ldw	r3,4(sp)
   17160:	18c00104 	addi	r3,r3,4
   17164:	d8c00115 	stw	r3,4(sp)
   17168:	d8c00017 	ldw	r3,0(sp)
   1716c:	193fb136 	bltu	r3,r4,17034 <__alt_data_end+0xfc017034>
   17170:	d8c00217 	ldw	r3,8(sp)
   17174:	00c00c0e 	bge	zero,r3,171a8 <__multiply+0x24c>
   17178:	d8c00317 	ldw	r3,12(sp)
   1717c:	18bfff17 	ldw	r2,-4(r3)
   17180:	1d7fff04 	addi	r21,r3,-4
   17184:	10000326 	beq	r2,zero,17194 <__multiply+0x238>
   17188:	00000706 	br	171a8 <__multiply+0x24c>
   1718c:	a8800017 	ldw	r2,0(r21)
   17190:	1000051e 	bne	r2,zero,171a8 <__multiply+0x24c>
   17194:	d8c00217 	ldw	r3,8(sp)
   17198:	ad7fff04 	addi	r21,r21,-4
   1719c:	18ffffc4 	addi	r3,r3,-1
   171a0:	d8c00215 	stw	r3,8(sp)
   171a4:	183ff91e 	bne	r3,zero,1718c <__alt_data_end+0xfc01718c>
   171a8:	d8c00617 	ldw	r3,24(sp)
   171ac:	d9000217 	ldw	r4,8(sp)
   171b0:	1805883a 	mov	r2,r3
   171b4:	19000415 	stw	r4,16(r3)
   171b8:	dfc01017 	ldw	ra,64(sp)
   171bc:	df000f17 	ldw	fp,60(sp)
   171c0:	ddc00e17 	ldw	r23,56(sp)
   171c4:	dd800d17 	ldw	r22,52(sp)
   171c8:	dd400c17 	ldw	r21,48(sp)
   171cc:	dd000b17 	ldw	r20,44(sp)
   171d0:	dcc00a17 	ldw	r19,40(sp)
   171d4:	dc800917 	ldw	r18,36(sp)
   171d8:	dc400817 	ldw	r17,32(sp)
   171dc:	dc000717 	ldw	r16,28(sp)
   171e0:	dec01104 	addi	sp,sp,68
   171e4:	f800283a 	ret

000171e8 <__pow5mult>:
   171e8:	defffa04 	addi	sp,sp,-24
   171ec:	dcc00315 	stw	r19,12(sp)
   171f0:	dc000015 	stw	r16,0(sp)
   171f4:	dfc00515 	stw	ra,20(sp)
   171f8:	dd000415 	stw	r20,16(sp)
   171fc:	dc800215 	stw	r18,8(sp)
   17200:	dc400115 	stw	r17,4(sp)
   17204:	308000cc 	andi	r2,r6,3
   17208:	3021883a 	mov	r16,r6
   1720c:	2027883a 	mov	r19,r4
   17210:	10002f1e 	bne	r2,zero,172d0 <__pow5mult+0xe8>
   17214:	2825883a 	mov	r18,r5
   17218:	8021d0ba 	srai	r16,r16,2
   1721c:	80001a26 	beq	r16,zero,17288 <__pow5mult+0xa0>
   17220:	9c401217 	ldw	r17,72(r19)
   17224:	8800061e 	bne	r17,zero,17240 <__pow5mult+0x58>
   17228:	00003406 	br	172fc <__pow5mult+0x114>
   1722c:	8021d07a 	srai	r16,r16,1
   17230:	80001526 	beq	r16,zero,17288 <__pow5mult+0xa0>
   17234:	88800017 	ldw	r2,0(r17)
   17238:	10001c26 	beq	r2,zero,172ac <__pow5mult+0xc4>
   1723c:	1023883a 	mov	r17,r2
   17240:	8080004c 	andi	r2,r16,1
   17244:	103ff926 	beq	r2,zero,1722c <__alt_data_end+0xfc01722c>
   17248:	880d883a 	mov	r6,r17
   1724c:	900b883a 	mov	r5,r18
   17250:	9809883a 	mov	r4,r19
   17254:	0016f5c0 	call	16f5c <__multiply>
   17258:	90001b26 	beq	r18,zero,172c8 <__pow5mult+0xe0>
   1725c:	91000117 	ldw	r4,4(r18)
   17260:	98c01317 	ldw	r3,76(r19)
   17264:	8021d07a 	srai	r16,r16,1
   17268:	2109883a 	add	r4,r4,r4
   1726c:	2109883a 	add	r4,r4,r4
   17270:	1907883a 	add	r3,r3,r4
   17274:	19000017 	ldw	r4,0(r3)
   17278:	91000015 	stw	r4,0(r18)
   1727c:	1c800015 	stw	r18,0(r3)
   17280:	1025883a 	mov	r18,r2
   17284:	803feb1e 	bne	r16,zero,17234 <__alt_data_end+0xfc017234>
   17288:	9005883a 	mov	r2,r18
   1728c:	dfc00517 	ldw	ra,20(sp)
   17290:	dd000417 	ldw	r20,16(sp)
   17294:	dcc00317 	ldw	r19,12(sp)
   17298:	dc800217 	ldw	r18,8(sp)
   1729c:	dc400117 	ldw	r17,4(sp)
   172a0:	dc000017 	ldw	r16,0(sp)
   172a4:	dec00604 	addi	sp,sp,24
   172a8:	f800283a 	ret
   172ac:	880d883a 	mov	r6,r17
   172b0:	880b883a 	mov	r5,r17
   172b4:	9809883a 	mov	r4,r19
   172b8:	0016f5c0 	call	16f5c <__multiply>
   172bc:	88800015 	stw	r2,0(r17)
   172c0:	10000015 	stw	zero,0(r2)
   172c4:	003fdd06 	br	1723c <__alt_data_end+0xfc01723c>
   172c8:	1025883a 	mov	r18,r2
   172cc:	003fd706 	br	1722c <__alt_data_end+0xfc01722c>
   172d0:	10bfffc4 	addi	r2,r2,-1
   172d4:	1085883a 	add	r2,r2,r2
   172d8:	00c000f4 	movhi	r3,3
   172dc:	18ea7004 	addi	r3,r3,-22080
   172e0:	1085883a 	add	r2,r2,r2
   172e4:	1885883a 	add	r2,r3,r2
   172e8:	11800017 	ldw	r6,0(r2)
   172ec:	000f883a 	mov	r7,zero
   172f0:	0016bbc0 	call	16bbc <__multadd>
   172f4:	1025883a 	mov	r18,r2
   172f8:	003fc706 	br	17218 <__alt_data_end+0xfc017218>
   172fc:	05000044 	movi	r20,1
   17300:	a00b883a 	mov	r5,r20
   17304:	9809883a 	mov	r4,r19
   17308:	0016aec0 	call	16aec <_Balloc>
   1730c:	1023883a 	mov	r17,r2
   17310:	00809c44 	movi	r2,625
   17314:	88800515 	stw	r2,20(r17)
   17318:	8d000415 	stw	r20,16(r17)
   1731c:	9c401215 	stw	r17,72(r19)
   17320:	88000015 	stw	zero,0(r17)
   17324:	003fc606 	br	17240 <__alt_data_end+0xfc017240>

00017328 <__lshift>:
   17328:	defff904 	addi	sp,sp,-28
   1732c:	dd400515 	stw	r21,20(sp)
   17330:	dcc00315 	stw	r19,12(sp)
   17334:	302bd17a 	srai	r21,r6,5
   17338:	2cc00417 	ldw	r19,16(r5)
   1733c:	28800217 	ldw	r2,8(r5)
   17340:	dd000415 	stw	r20,16(sp)
   17344:	ace7883a 	add	r19,r21,r19
   17348:	dc800215 	stw	r18,8(sp)
   1734c:	dc400115 	stw	r17,4(sp)
   17350:	dc000015 	stw	r16,0(sp)
   17354:	dfc00615 	stw	ra,24(sp)
   17358:	9c000044 	addi	r16,r19,1
   1735c:	2823883a 	mov	r17,r5
   17360:	3029883a 	mov	r20,r6
   17364:	2025883a 	mov	r18,r4
   17368:	29400117 	ldw	r5,4(r5)
   1736c:	1400030e 	bge	r2,r16,1737c <__lshift+0x54>
   17370:	1085883a 	add	r2,r2,r2
   17374:	29400044 	addi	r5,r5,1
   17378:	143ffd16 	blt	r2,r16,17370 <__alt_data_end+0xfc017370>
   1737c:	9009883a 	mov	r4,r18
   17380:	0016aec0 	call	16aec <_Balloc>
   17384:	10c00504 	addi	r3,r2,20
   17388:	0540070e 	bge	zero,r21,173a8 <__lshift+0x80>
   1738c:	ad6b883a 	add	r21,r21,r21
   17390:	ad6b883a 	add	r21,r21,r21
   17394:	1809883a 	mov	r4,r3
   17398:	1d47883a 	add	r3,r3,r21
   1739c:	20000015 	stw	zero,0(r4)
   173a0:	21000104 	addi	r4,r4,4
   173a4:	193ffd1e 	bne	r3,r4,1739c <__alt_data_end+0xfc01739c>
   173a8:	8a000417 	ldw	r8,16(r17)
   173ac:	89000504 	addi	r4,r17,20
   173b0:	a18007cc 	andi	r6,r20,31
   173b4:	4211883a 	add	r8,r8,r8
   173b8:	4211883a 	add	r8,r8,r8
   173bc:	2211883a 	add	r8,r4,r8
   173c0:	30002326 	beq	r6,zero,17450 <__lshift+0x128>
   173c4:	02400804 	movi	r9,32
   173c8:	4993c83a 	sub	r9,r9,r6
   173cc:	000b883a 	mov	r5,zero
   173d0:	21c00017 	ldw	r7,0(r4)
   173d4:	1815883a 	mov	r10,r3
   173d8:	18c00104 	addi	r3,r3,4
   173dc:	398e983a 	sll	r7,r7,r6
   173e0:	21000104 	addi	r4,r4,4
   173e4:	394ab03a 	or	r5,r7,r5
   173e8:	197fff15 	stw	r5,-4(r3)
   173ec:	217fff17 	ldw	r5,-4(r4)
   173f0:	2a4ad83a 	srl	r5,r5,r9
   173f4:	223ff636 	bltu	r4,r8,173d0 <__alt_data_end+0xfc0173d0>
   173f8:	51400115 	stw	r5,4(r10)
   173fc:	28001a1e 	bne	r5,zero,17468 <__lshift+0x140>
   17400:	843fffc4 	addi	r16,r16,-1
   17404:	14000415 	stw	r16,16(r2)
   17408:	88000826 	beq	r17,zero,1742c <__lshift+0x104>
   1740c:	89000117 	ldw	r4,4(r17)
   17410:	90c01317 	ldw	r3,76(r18)
   17414:	2109883a 	add	r4,r4,r4
   17418:	2109883a 	add	r4,r4,r4
   1741c:	1907883a 	add	r3,r3,r4
   17420:	19000017 	ldw	r4,0(r3)
   17424:	89000015 	stw	r4,0(r17)
   17428:	1c400015 	stw	r17,0(r3)
   1742c:	dfc00617 	ldw	ra,24(sp)
   17430:	dd400517 	ldw	r21,20(sp)
   17434:	dd000417 	ldw	r20,16(sp)
   17438:	dcc00317 	ldw	r19,12(sp)
   1743c:	dc800217 	ldw	r18,8(sp)
   17440:	dc400117 	ldw	r17,4(sp)
   17444:	dc000017 	ldw	r16,0(sp)
   17448:	dec00704 	addi	sp,sp,28
   1744c:	f800283a 	ret
   17450:	21400017 	ldw	r5,0(r4)
   17454:	18c00104 	addi	r3,r3,4
   17458:	21000104 	addi	r4,r4,4
   1745c:	197fff15 	stw	r5,-4(r3)
   17460:	223ffb36 	bltu	r4,r8,17450 <__alt_data_end+0xfc017450>
   17464:	003fe606 	br	17400 <__alt_data_end+0xfc017400>
   17468:	9c000084 	addi	r16,r19,2
   1746c:	003fe406 	br	17400 <__alt_data_end+0xfc017400>

00017470 <__mcmp>:
   17470:	20800417 	ldw	r2,16(r4)
   17474:	28c00417 	ldw	r3,16(r5)
   17478:	10c5c83a 	sub	r2,r2,r3
   1747c:	1000111e 	bne	r2,zero,174c4 <__mcmp+0x54>
   17480:	18c7883a 	add	r3,r3,r3
   17484:	18c7883a 	add	r3,r3,r3
   17488:	21000504 	addi	r4,r4,20
   1748c:	29400504 	addi	r5,r5,20
   17490:	20c5883a 	add	r2,r4,r3
   17494:	28cb883a 	add	r5,r5,r3
   17498:	00000106 	br	174a0 <__mcmp+0x30>
   1749c:	20800a2e 	bgeu	r4,r2,174c8 <__mcmp+0x58>
   174a0:	10bfff04 	addi	r2,r2,-4
   174a4:	297fff04 	addi	r5,r5,-4
   174a8:	11800017 	ldw	r6,0(r2)
   174ac:	28c00017 	ldw	r3,0(r5)
   174b0:	30fffa26 	beq	r6,r3,1749c <__alt_data_end+0xfc01749c>
   174b4:	30c00236 	bltu	r6,r3,174c0 <__mcmp+0x50>
   174b8:	00800044 	movi	r2,1
   174bc:	f800283a 	ret
   174c0:	00bfffc4 	movi	r2,-1
   174c4:	f800283a 	ret
   174c8:	0005883a 	mov	r2,zero
   174cc:	f800283a 	ret

000174d0 <__mdiff>:
   174d0:	28c00417 	ldw	r3,16(r5)
   174d4:	30800417 	ldw	r2,16(r6)
   174d8:	defffa04 	addi	sp,sp,-24
   174dc:	dcc00315 	stw	r19,12(sp)
   174e0:	dc800215 	stw	r18,8(sp)
   174e4:	dfc00515 	stw	ra,20(sp)
   174e8:	dd000415 	stw	r20,16(sp)
   174ec:	dc400115 	stw	r17,4(sp)
   174f0:	dc000015 	stw	r16,0(sp)
   174f4:	1887c83a 	sub	r3,r3,r2
   174f8:	2825883a 	mov	r18,r5
   174fc:	3027883a 	mov	r19,r6
   17500:	1800141e 	bne	r3,zero,17554 <__mdiff+0x84>
   17504:	1085883a 	add	r2,r2,r2
   17508:	1085883a 	add	r2,r2,r2
   1750c:	2a000504 	addi	r8,r5,20
   17510:	34000504 	addi	r16,r6,20
   17514:	4087883a 	add	r3,r8,r2
   17518:	8085883a 	add	r2,r16,r2
   1751c:	00000106 	br	17524 <__mdiff+0x54>
   17520:	40c0592e 	bgeu	r8,r3,17688 <__mdiff+0x1b8>
   17524:	18ffff04 	addi	r3,r3,-4
   17528:	10bfff04 	addi	r2,r2,-4
   1752c:	19c00017 	ldw	r7,0(r3)
   17530:	11400017 	ldw	r5,0(r2)
   17534:	397ffa26 	beq	r7,r5,17520 <__alt_data_end+0xfc017520>
   17538:	3940592e 	bgeu	r7,r5,176a0 <__mdiff+0x1d0>
   1753c:	9005883a 	mov	r2,r18
   17540:	4023883a 	mov	r17,r8
   17544:	9825883a 	mov	r18,r19
   17548:	05000044 	movi	r20,1
   1754c:	1027883a 	mov	r19,r2
   17550:	00000406 	br	17564 <__mdiff+0x94>
   17554:	18005616 	blt	r3,zero,176b0 <__mdiff+0x1e0>
   17558:	34400504 	addi	r17,r6,20
   1755c:	2c000504 	addi	r16,r5,20
   17560:	0029883a 	mov	r20,zero
   17564:	91400117 	ldw	r5,4(r18)
   17568:	0016aec0 	call	16aec <_Balloc>
   1756c:	92400417 	ldw	r9,16(r18)
   17570:	9b000417 	ldw	r12,16(r19)
   17574:	12c00504 	addi	r11,r2,20
   17578:	4a51883a 	add	r8,r9,r9
   1757c:	6319883a 	add	r12,r12,r12
   17580:	4211883a 	add	r8,r8,r8
   17584:	6319883a 	add	r12,r12,r12
   17588:	15000315 	stw	r20,12(r2)
   1758c:	8211883a 	add	r8,r16,r8
   17590:	8b19883a 	add	r12,r17,r12
   17594:	0007883a 	mov	r3,zero
   17598:	81400017 	ldw	r5,0(r16)
   1759c:	89c00017 	ldw	r7,0(r17)
   175a0:	59800104 	addi	r6,r11,4
   175a4:	293fffcc 	andi	r4,r5,65535
   175a8:	20c7883a 	add	r3,r4,r3
   175ac:	393fffcc 	andi	r4,r7,65535
   175b0:	1909c83a 	sub	r4,r3,r4
   175b4:	280ad43a 	srli	r5,r5,16
   175b8:	380ed43a 	srli	r7,r7,16
   175bc:	2007d43a 	srai	r3,r4,16
   175c0:	213fffcc 	andi	r4,r4,65535
   175c4:	29cbc83a 	sub	r5,r5,r7
   175c8:	28c7883a 	add	r3,r5,r3
   175cc:	180a943a 	slli	r5,r3,16
   175d0:	8c400104 	addi	r17,r17,4
   175d4:	84000104 	addi	r16,r16,4
   175d8:	2908b03a 	or	r4,r5,r4
   175dc:	59000015 	stw	r4,0(r11)
   175e0:	1807d43a 	srai	r3,r3,16
   175e4:	3015883a 	mov	r10,r6
   175e8:	3017883a 	mov	r11,r6
   175ec:	8b3fea36 	bltu	r17,r12,17598 <__alt_data_end+0xfc017598>
   175f0:	8200162e 	bgeu	r16,r8,1764c <__mdiff+0x17c>
   175f4:	8017883a 	mov	r11,r16
   175f8:	59400017 	ldw	r5,0(r11)
   175fc:	31800104 	addi	r6,r6,4
   17600:	5ac00104 	addi	r11,r11,4
   17604:	293fffcc 	andi	r4,r5,65535
   17608:	20c7883a 	add	r3,r4,r3
   1760c:	280ed43a 	srli	r7,r5,16
   17610:	180bd43a 	srai	r5,r3,16
   17614:	193fffcc 	andi	r4,r3,65535
   17618:	3947883a 	add	r3,r7,r5
   1761c:	180a943a 	slli	r5,r3,16
   17620:	1807d43a 	srai	r3,r3,16
   17624:	2908b03a 	or	r4,r5,r4
   17628:	313fff15 	stw	r4,-4(r6)
   1762c:	5a3ff236 	bltu	r11,r8,175f8 <__alt_data_end+0xfc0175f8>
   17630:	0406303a 	nor	r3,zero,r16
   17634:	1a07883a 	add	r3,r3,r8
   17638:	1806d0ba 	srli	r3,r3,2
   1763c:	18c00044 	addi	r3,r3,1
   17640:	18c7883a 	add	r3,r3,r3
   17644:	18c7883a 	add	r3,r3,r3
   17648:	50d5883a 	add	r10,r10,r3
   1764c:	50ffff04 	addi	r3,r10,-4
   17650:	2000041e 	bne	r4,zero,17664 <__mdiff+0x194>
   17654:	18ffff04 	addi	r3,r3,-4
   17658:	19000017 	ldw	r4,0(r3)
   1765c:	4a7fffc4 	addi	r9,r9,-1
   17660:	203ffc26 	beq	r4,zero,17654 <__alt_data_end+0xfc017654>
   17664:	12400415 	stw	r9,16(r2)
   17668:	dfc00517 	ldw	ra,20(sp)
   1766c:	dd000417 	ldw	r20,16(sp)
   17670:	dcc00317 	ldw	r19,12(sp)
   17674:	dc800217 	ldw	r18,8(sp)
   17678:	dc400117 	ldw	r17,4(sp)
   1767c:	dc000017 	ldw	r16,0(sp)
   17680:	dec00604 	addi	sp,sp,24
   17684:	f800283a 	ret
   17688:	000b883a 	mov	r5,zero
   1768c:	0016aec0 	call	16aec <_Balloc>
   17690:	00c00044 	movi	r3,1
   17694:	10c00415 	stw	r3,16(r2)
   17698:	10000515 	stw	zero,20(r2)
   1769c:	003ff206 	br	17668 <__alt_data_end+0xfc017668>
   176a0:	8023883a 	mov	r17,r16
   176a4:	0029883a 	mov	r20,zero
   176a8:	4021883a 	mov	r16,r8
   176ac:	003fad06 	br	17564 <__alt_data_end+0xfc017564>
   176b0:	9005883a 	mov	r2,r18
   176b4:	94400504 	addi	r17,r18,20
   176b8:	9c000504 	addi	r16,r19,20
   176bc:	9825883a 	mov	r18,r19
   176c0:	05000044 	movi	r20,1
   176c4:	1027883a 	mov	r19,r2
   176c8:	003fa606 	br	17564 <__alt_data_end+0xfc017564>

000176cc <__ulp>:
   176cc:	295ffc2c 	andhi	r5,r5,32752
   176d0:	00bf3034 	movhi	r2,64704
   176d4:	2887883a 	add	r3,r5,r2
   176d8:	00c0020e 	bge	zero,r3,176e4 <__ulp+0x18>
   176dc:	0005883a 	mov	r2,zero
   176e0:	f800283a 	ret
   176e4:	00c7c83a 	sub	r3,zero,r3
   176e8:	1807d53a 	srai	r3,r3,20
   176ec:	008004c4 	movi	r2,19
   176f0:	10c00b0e 	bge	r2,r3,17720 <__ulp+0x54>
   176f4:	18bffb04 	addi	r2,r3,-20
   176f8:	01000784 	movi	r4,30
   176fc:	0007883a 	mov	r3,zero
   17700:	20800516 	blt	r4,r2,17718 <__ulp+0x4c>
   17704:	010007c4 	movi	r4,31
   17708:	2089c83a 	sub	r4,r4,r2
   1770c:	00800044 	movi	r2,1
   17710:	1104983a 	sll	r2,r2,r4
   17714:	f800283a 	ret
   17718:	00800044 	movi	r2,1
   1771c:	f800283a 	ret
   17720:	01400234 	movhi	r5,8
   17724:	28c7d83a 	sra	r3,r5,r3
   17728:	0005883a 	mov	r2,zero
   1772c:	f800283a 	ret

00017730 <__b2d>:
   17730:	defffa04 	addi	sp,sp,-24
   17734:	dc000015 	stw	r16,0(sp)
   17738:	24000417 	ldw	r16,16(r4)
   1773c:	dc400115 	stw	r17,4(sp)
   17740:	24400504 	addi	r17,r4,20
   17744:	8421883a 	add	r16,r16,r16
   17748:	8421883a 	add	r16,r16,r16
   1774c:	8c21883a 	add	r16,r17,r16
   17750:	dc800215 	stw	r18,8(sp)
   17754:	84bfff17 	ldw	r18,-4(r16)
   17758:	dd000415 	stw	r20,16(sp)
   1775c:	dcc00315 	stw	r19,12(sp)
   17760:	9009883a 	mov	r4,r18
   17764:	2829883a 	mov	r20,r5
   17768:	dfc00515 	stw	ra,20(sp)
   1776c:	0016e080 	call	16e08 <__hi0bits>
   17770:	00c00804 	movi	r3,32
   17774:	1889c83a 	sub	r4,r3,r2
   17778:	a1000015 	stw	r4,0(r20)
   1777c:	01000284 	movi	r4,10
   17780:	84ffff04 	addi	r19,r16,-4
   17784:	20801216 	blt	r4,r2,177d0 <__b2d+0xa0>
   17788:	018002c4 	movi	r6,11
   1778c:	308dc83a 	sub	r6,r6,r2
   17790:	9186d83a 	srl	r3,r18,r6
   17794:	18cffc34 	orhi	r3,r3,16368
   17798:	8cc0212e 	bgeu	r17,r19,17820 <__b2d+0xf0>
   1779c:	813ffe17 	ldw	r4,-8(r16)
   177a0:	218cd83a 	srl	r6,r4,r6
   177a4:	10800544 	addi	r2,r2,21
   177a8:	9084983a 	sll	r2,r18,r2
   177ac:	1184b03a 	or	r2,r2,r6
   177b0:	dfc00517 	ldw	ra,20(sp)
   177b4:	dd000417 	ldw	r20,16(sp)
   177b8:	dcc00317 	ldw	r19,12(sp)
   177bc:	dc800217 	ldw	r18,8(sp)
   177c0:	dc400117 	ldw	r17,4(sp)
   177c4:	dc000017 	ldw	r16,0(sp)
   177c8:	dec00604 	addi	sp,sp,24
   177cc:	f800283a 	ret
   177d0:	8cc00f2e 	bgeu	r17,r19,17810 <__b2d+0xe0>
   177d4:	117ffd44 	addi	r5,r2,-11
   177d8:	80bffe17 	ldw	r2,-8(r16)
   177dc:	28000e26 	beq	r5,zero,17818 <__b2d+0xe8>
   177e0:	1949c83a 	sub	r4,r3,r5
   177e4:	9164983a 	sll	r18,r18,r5
   177e8:	1106d83a 	srl	r3,r2,r4
   177ec:	81bffe04 	addi	r6,r16,-8
   177f0:	948ffc34 	orhi	r18,r18,16368
   177f4:	90c6b03a 	or	r3,r18,r3
   177f8:	89800e2e 	bgeu	r17,r6,17834 <__b2d+0x104>
   177fc:	81bffd17 	ldw	r6,-12(r16)
   17800:	1144983a 	sll	r2,r2,r5
   17804:	310ad83a 	srl	r5,r6,r4
   17808:	2884b03a 	or	r2,r5,r2
   1780c:	003fe806 	br	177b0 <__alt_data_end+0xfc0177b0>
   17810:	10bffd44 	addi	r2,r2,-11
   17814:	1000041e 	bne	r2,zero,17828 <__b2d+0xf8>
   17818:	90cffc34 	orhi	r3,r18,16368
   1781c:	003fe406 	br	177b0 <__alt_data_end+0xfc0177b0>
   17820:	000d883a 	mov	r6,zero
   17824:	003fdf06 	br	177a4 <__alt_data_end+0xfc0177a4>
   17828:	90a4983a 	sll	r18,r18,r2
   1782c:	0005883a 	mov	r2,zero
   17830:	003ff906 	br	17818 <__alt_data_end+0xfc017818>
   17834:	1144983a 	sll	r2,r2,r5
   17838:	003fdd06 	br	177b0 <__alt_data_end+0xfc0177b0>

0001783c <__d2b>:
   1783c:	defff804 	addi	sp,sp,-32
   17840:	dc000215 	stw	r16,8(sp)
   17844:	3021883a 	mov	r16,r6
   17848:	dc400315 	stw	r17,12(sp)
   1784c:	8022907a 	slli	r17,r16,1
   17850:	dd000615 	stw	r20,24(sp)
   17854:	2829883a 	mov	r20,r5
   17858:	01400044 	movi	r5,1
   1785c:	dcc00515 	stw	r19,20(sp)
   17860:	dc800415 	stw	r18,16(sp)
   17864:	dfc00715 	stw	ra,28(sp)
   17868:	3825883a 	mov	r18,r7
   1786c:	8822d57a 	srli	r17,r17,21
   17870:	0016aec0 	call	16aec <_Balloc>
   17874:	1027883a 	mov	r19,r2
   17878:	00800434 	movhi	r2,16
   1787c:	10bfffc4 	addi	r2,r2,-1
   17880:	808c703a 	and	r6,r16,r2
   17884:	88000126 	beq	r17,zero,1788c <__d2b+0x50>
   17888:	31800434 	orhi	r6,r6,16
   1788c:	d9800015 	stw	r6,0(sp)
   17890:	a0002426 	beq	r20,zero,17924 <__d2b+0xe8>
   17894:	d9000104 	addi	r4,sp,4
   17898:	dd000115 	stw	r20,4(sp)
   1789c:	0016e700 	call	16e70 <__lo0bits>
   178a0:	d8c00017 	ldw	r3,0(sp)
   178a4:	10002f1e 	bne	r2,zero,17964 <__d2b+0x128>
   178a8:	d9000117 	ldw	r4,4(sp)
   178ac:	99000515 	stw	r4,20(r19)
   178b0:	1821003a 	cmpeq	r16,r3,zero
   178b4:	01000084 	movi	r4,2
   178b8:	2421c83a 	sub	r16,r4,r16
   178bc:	98c00615 	stw	r3,24(r19)
   178c0:	9c000415 	stw	r16,16(r19)
   178c4:	88001f1e 	bne	r17,zero,17944 <__d2b+0x108>
   178c8:	10bef384 	addi	r2,r2,-1074
   178cc:	90800015 	stw	r2,0(r18)
   178d0:	00900034 	movhi	r2,16384
   178d4:	10bfffc4 	addi	r2,r2,-1
   178d8:	8085883a 	add	r2,r16,r2
   178dc:	1085883a 	add	r2,r2,r2
   178e0:	1085883a 	add	r2,r2,r2
   178e4:	9885883a 	add	r2,r19,r2
   178e8:	11000517 	ldw	r4,20(r2)
   178ec:	8020917a 	slli	r16,r16,5
   178f0:	0016e080 	call	16e08 <__hi0bits>
   178f4:	d8c00817 	ldw	r3,32(sp)
   178f8:	8085c83a 	sub	r2,r16,r2
   178fc:	18800015 	stw	r2,0(r3)
   17900:	9805883a 	mov	r2,r19
   17904:	dfc00717 	ldw	ra,28(sp)
   17908:	dd000617 	ldw	r20,24(sp)
   1790c:	dcc00517 	ldw	r19,20(sp)
   17910:	dc800417 	ldw	r18,16(sp)
   17914:	dc400317 	ldw	r17,12(sp)
   17918:	dc000217 	ldw	r16,8(sp)
   1791c:	dec00804 	addi	sp,sp,32
   17920:	f800283a 	ret
   17924:	d809883a 	mov	r4,sp
   17928:	0016e700 	call	16e70 <__lo0bits>
   1792c:	d8c00017 	ldw	r3,0(sp)
   17930:	04000044 	movi	r16,1
   17934:	9c000415 	stw	r16,16(r19)
   17938:	98c00515 	stw	r3,20(r19)
   1793c:	10800804 	addi	r2,r2,32
   17940:	883fe126 	beq	r17,zero,178c8 <__alt_data_end+0xfc0178c8>
   17944:	00c00d44 	movi	r3,53
   17948:	8c7ef344 	addi	r17,r17,-1075
   1794c:	88a3883a 	add	r17,r17,r2
   17950:	1885c83a 	sub	r2,r3,r2
   17954:	d8c00817 	ldw	r3,32(sp)
   17958:	94400015 	stw	r17,0(r18)
   1795c:	18800015 	stw	r2,0(r3)
   17960:	003fe706 	br	17900 <__alt_data_end+0xfc017900>
   17964:	01000804 	movi	r4,32
   17968:	2089c83a 	sub	r4,r4,r2
   1796c:	1908983a 	sll	r4,r3,r4
   17970:	d9400117 	ldw	r5,4(sp)
   17974:	1886d83a 	srl	r3,r3,r2
   17978:	2148b03a 	or	r4,r4,r5
   1797c:	99000515 	stw	r4,20(r19)
   17980:	d8c00015 	stw	r3,0(sp)
   17984:	003fca06 	br	178b0 <__alt_data_end+0xfc0178b0>

00017988 <__ratio>:
   17988:	defff904 	addi	sp,sp,-28
   1798c:	dc400315 	stw	r17,12(sp)
   17990:	2823883a 	mov	r17,r5
   17994:	d9400104 	addi	r5,sp,4
   17998:	dfc00615 	stw	ra,24(sp)
   1799c:	dcc00515 	stw	r19,20(sp)
   179a0:	dc800415 	stw	r18,16(sp)
   179a4:	2027883a 	mov	r19,r4
   179a8:	dc000215 	stw	r16,8(sp)
   179ac:	00177300 	call	17730 <__b2d>
   179b0:	d80b883a 	mov	r5,sp
   179b4:	8809883a 	mov	r4,r17
   179b8:	1025883a 	mov	r18,r2
   179bc:	1821883a 	mov	r16,r3
   179c0:	00177300 	call	17730 <__b2d>
   179c4:	8a000417 	ldw	r8,16(r17)
   179c8:	99000417 	ldw	r4,16(r19)
   179cc:	d9400117 	ldw	r5,4(sp)
   179d0:	2209c83a 	sub	r4,r4,r8
   179d4:	2010917a 	slli	r8,r4,5
   179d8:	d9000017 	ldw	r4,0(sp)
   179dc:	2909c83a 	sub	r4,r5,r4
   179e0:	4109883a 	add	r4,r8,r4
   179e4:	01000e0e 	bge	zero,r4,17a20 <__ratio+0x98>
   179e8:	2008953a 	slli	r4,r4,20
   179ec:	2421883a 	add	r16,r4,r16
   179f0:	100d883a 	mov	r6,r2
   179f4:	180f883a 	mov	r7,r3
   179f8:	9009883a 	mov	r4,r18
   179fc:	800b883a 	mov	r5,r16
   17a00:	001ce400 	call	1ce40 <__divdf3>
   17a04:	dfc00617 	ldw	ra,24(sp)
   17a08:	dcc00517 	ldw	r19,20(sp)
   17a0c:	dc800417 	ldw	r18,16(sp)
   17a10:	dc400317 	ldw	r17,12(sp)
   17a14:	dc000217 	ldw	r16,8(sp)
   17a18:	dec00704 	addi	sp,sp,28
   17a1c:	f800283a 	ret
   17a20:	2008953a 	slli	r4,r4,20
   17a24:	1907c83a 	sub	r3,r3,r4
   17a28:	003ff106 	br	179f0 <__alt_data_end+0xfc0179f0>

00017a2c <_mprec_log10>:
   17a2c:	defffe04 	addi	sp,sp,-8
   17a30:	dc000015 	stw	r16,0(sp)
   17a34:	dfc00115 	stw	ra,4(sp)
   17a38:	008005c4 	movi	r2,23
   17a3c:	2021883a 	mov	r16,r4
   17a40:	11000d0e 	bge	r2,r4,17a78 <_mprec_log10+0x4c>
   17a44:	0005883a 	mov	r2,zero
   17a48:	00cffc34 	movhi	r3,16368
   17a4c:	843fffc4 	addi	r16,r16,-1
   17a50:	000d883a 	mov	r6,zero
   17a54:	01d00934 	movhi	r7,16420
   17a58:	1009883a 	mov	r4,r2
   17a5c:	180b883a 	mov	r5,r3
   17a60:	001da680 	call	1da68 <__muldf3>
   17a64:	803ff91e 	bne	r16,zero,17a4c <__alt_data_end+0xfc017a4c>
   17a68:	dfc00117 	ldw	ra,4(sp)
   17a6c:	dc000017 	ldw	r16,0(sp)
   17a70:	dec00204 	addi	sp,sp,8
   17a74:	f800283a 	ret
   17a78:	202090fa 	slli	r16,r4,3
   17a7c:	008000f4 	movhi	r2,3
   17a80:	10aa8704 	addi	r2,r2,-21988
   17a84:	1421883a 	add	r16,r2,r16
   17a88:	80800017 	ldw	r2,0(r16)
   17a8c:	80c00117 	ldw	r3,4(r16)
   17a90:	dfc00117 	ldw	ra,4(sp)
   17a94:	dc000017 	ldw	r16,0(sp)
   17a98:	dec00204 	addi	sp,sp,8
   17a9c:	f800283a 	ret

00017aa0 <__copybits>:
   17aa0:	297fffc4 	addi	r5,r5,-1
   17aa4:	280fd17a 	srai	r7,r5,5
   17aa8:	30c00417 	ldw	r3,16(r6)
   17aac:	30800504 	addi	r2,r6,20
   17ab0:	39c00044 	addi	r7,r7,1
   17ab4:	18c7883a 	add	r3,r3,r3
   17ab8:	39cf883a 	add	r7,r7,r7
   17abc:	18c7883a 	add	r3,r3,r3
   17ac0:	39cf883a 	add	r7,r7,r7
   17ac4:	10c7883a 	add	r3,r2,r3
   17ac8:	21cf883a 	add	r7,r4,r7
   17acc:	10c00d2e 	bgeu	r2,r3,17b04 <__copybits+0x64>
   17ad0:	200b883a 	mov	r5,r4
   17ad4:	12000017 	ldw	r8,0(r2)
   17ad8:	29400104 	addi	r5,r5,4
   17adc:	10800104 	addi	r2,r2,4
   17ae0:	2a3fff15 	stw	r8,-4(r5)
   17ae4:	10fffb36 	bltu	r2,r3,17ad4 <__alt_data_end+0xfc017ad4>
   17ae8:	1985c83a 	sub	r2,r3,r6
   17aec:	10bffac4 	addi	r2,r2,-21
   17af0:	1004d0ba 	srli	r2,r2,2
   17af4:	10800044 	addi	r2,r2,1
   17af8:	1085883a 	add	r2,r2,r2
   17afc:	1085883a 	add	r2,r2,r2
   17b00:	2089883a 	add	r4,r4,r2
   17b04:	21c0032e 	bgeu	r4,r7,17b14 <__copybits+0x74>
   17b08:	20000015 	stw	zero,0(r4)
   17b0c:	21000104 	addi	r4,r4,4
   17b10:	21fffd36 	bltu	r4,r7,17b08 <__alt_data_end+0xfc017b08>
   17b14:	f800283a 	ret

00017b18 <__any_on>:
   17b18:	20c00417 	ldw	r3,16(r4)
   17b1c:	2805d17a 	srai	r2,r5,5
   17b20:	21000504 	addi	r4,r4,20
   17b24:	18800d0e 	bge	r3,r2,17b5c <__any_on+0x44>
   17b28:	18c7883a 	add	r3,r3,r3
   17b2c:	18c7883a 	add	r3,r3,r3
   17b30:	20c7883a 	add	r3,r4,r3
   17b34:	20c0192e 	bgeu	r4,r3,17b9c <__any_on+0x84>
   17b38:	18bfff17 	ldw	r2,-4(r3)
   17b3c:	18ffff04 	addi	r3,r3,-4
   17b40:	1000041e 	bne	r2,zero,17b54 <__any_on+0x3c>
   17b44:	20c0142e 	bgeu	r4,r3,17b98 <__any_on+0x80>
   17b48:	18ffff04 	addi	r3,r3,-4
   17b4c:	19400017 	ldw	r5,0(r3)
   17b50:	283ffc26 	beq	r5,zero,17b44 <__alt_data_end+0xfc017b44>
   17b54:	00800044 	movi	r2,1
   17b58:	f800283a 	ret
   17b5c:	10c00a0e 	bge	r2,r3,17b88 <__any_on+0x70>
   17b60:	1085883a 	add	r2,r2,r2
   17b64:	1085883a 	add	r2,r2,r2
   17b68:	294007cc 	andi	r5,r5,31
   17b6c:	2087883a 	add	r3,r4,r2
   17b70:	283ff026 	beq	r5,zero,17b34 <__alt_data_end+0xfc017b34>
   17b74:	19800017 	ldw	r6,0(r3)
   17b78:	3144d83a 	srl	r2,r6,r5
   17b7c:	114a983a 	sll	r5,r2,r5
   17b80:	317ff41e 	bne	r6,r5,17b54 <__alt_data_end+0xfc017b54>
   17b84:	003feb06 	br	17b34 <__alt_data_end+0xfc017b34>
   17b88:	1085883a 	add	r2,r2,r2
   17b8c:	1085883a 	add	r2,r2,r2
   17b90:	2087883a 	add	r3,r4,r2
   17b94:	003fe706 	br	17b34 <__alt_data_end+0xfc017b34>
   17b98:	f800283a 	ret
   17b9c:	0005883a 	mov	r2,zero
   17ba0:	f800283a 	ret

00017ba4 <_putc_r>:
   17ba4:	defffc04 	addi	sp,sp,-16
   17ba8:	dc000215 	stw	r16,8(sp)
   17bac:	dfc00315 	stw	ra,12(sp)
   17bb0:	2021883a 	mov	r16,r4
   17bb4:	20000226 	beq	r4,zero,17bc0 <_putc_r+0x1c>
   17bb8:	20800e17 	ldw	r2,56(r4)
   17bbc:	10001b26 	beq	r2,zero,17c2c <_putc_r+0x88>
   17bc0:	30800217 	ldw	r2,8(r6)
   17bc4:	10bfffc4 	addi	r2,r2,-1
   17bc8:	30800215 	stw	r2,8(r6)
   17bcc:	10000a16 	blt	r2,zero,17bf8 <_putc_r+0x54>
   17bd0:	30800017 	ldw	r2,0(r6)
   17bd4:	11400005 	stb	r5,0(r2)
   17bd8:	30800017 	ldw	r2,0(r6)
   17bdc:	10c00044 	addi	r3,r2,1
   17be0:	30c00015 	stw	r3,0(r6)
   17be4:	10800003 	ldbu	r2,0(r2)
   17be8:	dfc00317 	ldw	ra,12(sp)
   17bec:	dc000217 	ldw	r16,8(sp)
   17bf0:	dec00404 	addi	sp,sp,16
   17bf4:	f800283a 	ret
   17bf8:	30c00617 	ldw	r3,24(r6)
   17bfc:	10c00616 	blt	r2,r3,17c18 <_putc_r+0x74>
   17c00:	30800017 	ldw	r2,0(r6)
   17c04:	00c00284 	movi	r3,10
   17c08:	11400005 	stb	r5,0(r2)
   17c0c:	30800017 	ldw	r2,0(r6)
   17c10:	11400003 	ldbu	r5,0(r2)
   17c14:	28fff11e 	bne	r5,r3,17bdc <__alt_data_end+0xfc017bdc>
   17c18:	8009883a 	mov	r4,r16
   17c1c:	dfc00317 	ldw	ra,12(sp)
   17c20:	dc000217 	ldw	r16,8(sp)
   17c24:	dec00404 	addi	sp,sp,16
   17c28:	001b0881 	jmpi	1b088 <__swbuf_r>
   17c2c:	d9400015 	stw	r5,0(sp)
   17c30:	d9800115 	stw	r6,4(sp)
   17c34:	0015b400 	call	15b40 <__sinit>
   17c38:	d9800117 	ldw	r6,4(sp)
   17c3c:	d9400017 	ldw	r5,0(sp)
   17c40:	003fdf06 	br	17bc0 <__alt_data_end+0xfc017bc0>

00017c44 <putc>:
   17c44:	008000f4 	movhi	r2,3
   17c48:	defffc04 	addi	sp,sp,-16
   17c4c:	10b74b04 	addi	r2,r2,-8916
   17c50:	dc000115 	stw	r16,4(sp)
   17c54:	14000017 	ldw	r16,0(r2)
   17c58:	dc400215 	stw	r17,8(sp)
   17c5c:	dfc00315 	stw	ra,12(sp)
   17c60:	2023883a 	mov	r17,r4
   17c64:	80000226 	beq	r16,zero,17c70 <putc+0x2c>
   17c68:	80800e17 	ldw	r2,56(r16)
   17c6c:	10001a26 	beq	r2,zero,17cd8 <putc+0x94>
   17c70:	28800217 	ldw	r2,8(r5)
   17c74:	10bfffc4 	addi	r2,r2,-1
   17c78:	28800215 	stw	r2,8(r5)
   17c7c:	10000b16 	blt	r2,zero,17cac <putc+0x68>
   17c80:	28800017 	ldw	r2,0(r5)
   17c84:	14400005 	stb	r17,0(r2)
   17c88:	28800017 	ldw	r2,0(r5)
   17c8c:	10c00044 	addi	r3,r2,1
   17c90:	28c00015 	stw	r3,0(r5)
   17c94:	10800003 	ldbu	r2,0(r2)
   17c98:	dfc00317 	ldw	ra,12(sp)
   17c9c:	dc400217 	ldw	r17,8(sp)
   17ca0:	dc000117 	ldw	r16,4(sp)
   17ca4:	dec00404 	addi	sp,sp,16
   17ca8:	f800283a 	ret
   17cac:	28c00617 	ldw	r3,24(r5)
   17cb0:	10c00e16 	blt	r2,r3,17cec <putc+0xa8>
   17cb4:	28800017 	ldw	r2,0(r5)
   17cb8:	01000284 	movi	r4,10
   17cbc:	14400005 	stb	r17,0(r2)
   17cc0:	28800017 	ldw	r2,0(r5)
   17cc4:	10c00003 	ldbu	r3,0(r2)
   17cc8:	193ff01e 	bne	r3,r4,17c8c <__alt_data_end+0xfc017c8c>
   17ccc:	280d883a 	mov	r6,r5
   17cd0:	180b883a 	mov	r5,r3
   17cd4:	00000706 	br	17cf4 <putc+0xb0>
   17cd8:	8009883a 	mov	r4,r16
   17cdc:	d9400015 	stw	r5,0(sp)
   17ce0:	0015b400 	call	15b40 <__sinit>
   17ce4:	d9400017 	ldw	r5,0(sp)
   17ce8:	003fe106 	br	17c70 <__alt_data_end+0xfc017c70>
   17cec:	280d883a 	mov	r6,r5
   17cf0:	880b883a 	mov	r5,r17
   17cf4:	8009883a 	mov	r4,r16
   17cf8:	dfc00317 	ldw	ra,12(sp)
   17cfc:	dc400217 	ldw	r17,8(sp)
   17d00:	dc000117 	ldw	r16,4(sp)
   17d04:	dec00404 	addi	sp,sp,16
   17d08:	001b0881 	jmpi	1b088 <__swbuf_r>

00017d0c <_realloc_r>:
   17d0c:	defff604 	addi	sp,sp,-40
   17d10:	dc800215 	stw	r18,8(sp)
   17d14:	dfc00915 	stw	ra,36(sp)
   17d18:	df000815 	stw	fp,32(sp)
   17d1c:	ddc00715 	stw	r23,28(sp)
   17d20:	dd800615 	stw	r22,24(sp)
   17d24:	dd400515 	stw	r21,20(sp)
   17d28:	dd000415 	stw	r20,16(sp)
   17d2c:	dcc00315 	stw	r19,12(sp)
   17d30:	dc400115 	stw	r17,4(sp)
   17d34:	dc000015 	stw	r16,0(sp)
   17d38:	3025883a 	mov	r18,r6
   17d3c:	2800b726 	beq	r5,zero,1801c <_realloc_r+0x310>
   17d40:	282b883a 	mov	r21,r5
   17d44:	2029883a 	mov	r20,r4
   17d48:	001f5300 	call	1f530 <__malloc_lock>
   17d4c:	a8bfff17 	ldw	r2,-4(r21)
   17d50:	043fff04 	movi	r16,-4
   17d54:	90c002c4 	addi	r3,r18,11
   17d58:	01000584 	movi	r4,22
   17d5c:	acfffe04 	addi	r19,r21,-8
   17d60:	1420703a 	and	r16,r2,r16
   17d64:	20c0332e 	bgeu	r4,r3,17e34 <_realloc_r+0x128>
   17d68:	047ffe04 	movi	r17,-8
   17d6c:	1c62703a 	and	r17,r3,r17
   17d70:	8807883a 	mov	r3,r17
   17d74:	88005816 	blt	r17,zero,17ed8 <_realloc_r+0x1cc>
   17d78:	8c805736 	bltu	r17,r18,17ed8 <_realloc_r+0x1cc>
   17d7c:	80c0300e 	bge	r16,r3,17e40 <_realloc_r+0x134>
   17d80:	070000f4 	movhi	fp,3
   17d84:	e72bea04 	addi	fp,fp,-20568
   17d88:	e1c00217 	ldw	r7,8(fp)
   17d8c:	9c09883a 	add	r4,r19,r16
   17d90:	22000117 	ldw	r8,4(r4)
   17d94:	21c06326 	beq	r4,r7,17f24 <_realloc_r+0x218>
   17d98:	017fff84 	movi	r5,-2
   17d9c:	414a703a 	and	r5,r8,r5
   17da0:	214b883a 	add	r5,r4,r5
   17da4:	29800117 	ldw	r6,4(r5)
   17da8:	3180004c 	andi	r6,r6,1
   17dac:	30003f26 	beq	r6,zero,17eac <_realloc_r+0x1a0>
   17db0:	1080004c 	andi	r2,r2,1
   17db4:	10008326 	beq	r2,zero,17fc4 <_realloc_r+0x2b8>
   17db8:	900b883a 	mov	r5,r18
   17dbc:	a009883a 	mov	r4,r20
   17dc0:	000e3500 	call	e350 <_malloc_r>
   17dc4:	1025883a 	mov	r18,r2
   17dc8:	10011e26 	beq	r2,zero,18244 <_realloc_r+0x538>
   17dcc:	a93fff17 	ldw	r4,-4(r21)
   17dd0:	10fffe04 	addi	r3,r2,-8
   17dd4:	00bfff84 	movi	r2,-2
   17dd8:	2084703a 	and	r2,r4,r2
   17ddc:	9885883a 	add	r2,r19,r2
   17de0:	1880ee26 	beq	r3,r2,1819c <_realloc_r+0x490>
   17de4:	81bfff04 	addi	r6,r16,-4
   17de8:	00800904 	movi	r2,36
   17dec:	1180b836 	bltu	r2,r6,180d0 <_realloc_r+0x3c4>
   17df0:	00c004c4 	movi	r3,19
   17df4:	19809636 	bltu	r3,r6,18050 <_realloc_r+0x344>
   17df8:	9005883a 	mov	r2,r18
   17dfc:	a807883a 	mov	r3,r21
   17e00:	19000017 	ldw	r4,0(r3)
   17e04:	11000015 	stw	r4,0(r2)
   17e08:	19000117 	ldw	r4,4(r3)
   17e0c:	11000115 	stw	r4,4(r2)
   17e10:	18c00217 	ldw	r3,8(r3)
   17e14:	10c00215 	stw	r3,8(r2)
   17e18:	a80b883a 	mov	r5,r21
   17e1c:	a009883a 	mov	r4,r20
   17e20:	0015cb40 	call	15cb4 <_free_r>
   17e24:	a009883a 	mov	r4,r20
   17e28:	001f5540 	call	1f554 <__malloc_unlock>
   17e2c:	9005883a 	mov	r2,r18
   17e30:	00001206 	br	17e7c <_realloc_r+0x170>
   17e34:	00c00404 	movi	r3,16
   17e38:	1823883a 	mov	r17,r3
   17e3c:	003fce06 	br	17d78 <__alt_data_end+0xfc017d78>
   17e40:	a825883a 	mov	r18,r21
   17e44:	8445c83a 	sub	r2,r16,r17
   17e48:	00c003c4 	movi	r3,15
   17e4c:	18802636 	bltu	r3,r2,17ee8 <_realloc_r+0x1dc>
   17e50:	99800117 	ldw	r6,4(r19)
   17e54:	9c07883a 	add	r3,r19,r16
   17e58:	3180004c 	andi	r6,r6,1
   17e5c:	3420b03a 	or	r16,r6,r16
   17e60:	9c000115 	stw	r16,4(r19)
   17e64:	18800117 	ldw	r2,4(r3)
   17e68:	10800054 	ori	r2,r2,1
   17e6c:	18800115 	stw	r2,4(r3)
   17e70:	a009883a 	mov	r4,r20
   17e74:	001f5540 	call	1f554 <__malloc_unlock>
   17e78:	9005883a 	mov	r2,r18
   17e7c:	dfc00917 	ldw	ra,36(sp)
   17e80:	df000817 	ldw	fp,32(sp)
   17e84:	ddc00717 	ldw	r23,28(sp)
   17e88:	dd800617 	ldw	r22,24(sp)
   17e8c:	dd400517 	ldw	r21,20(sp)
   17e90:	dd000417 	ldw	r20,16(sp)
   17e94:	dcc00317 	ldw	r19,12(sp)
   17e98:	dc800217 	ldw	r18,8(sp)
   17e9c:	dc400117 	ldw	r17,4(sp)
   17ea0:	dc000017 	ldw	r16,0(sp)
   17ea4:	dec00a04 	addi	sp,sp,40
   17ea8:	f800283a 	ret
   17eac:	017fff04 	movi	r5,-4
   17eb0:	414a703a 	and	r5,r8,r5
   17eb4:	814d883a 	add	r6,r16,r5
   17eb8:	30c01f16 	blt	r6,r3,17f38 <_realloc_r+0x22c>
   17ebc:	20800317 	ldw	r2,12(r4)
   17ec0:	20c00217 	ldw	r3,8(r4)
   17ec4:	a825883a 	mov	r18,r21
   17ec8:	3021883a 	mov	r16,r6
   17ecc:	18800315 	stw	r2,12(r3)
   17ed0:	10c00215 	stw	r3,8(r2)
   17ed4:	003fdb06 	br	17e44 <__alt_data_end+0xfc017e44>
   17ed8:	00800304 	movi	r2,12
   17edc:	a0800015 	stw	r2,0(r20)
   17ee0:	0005883a 	mov	r2,zero
   17ee4:	003fe506 	br	17e7c <__alt_data_end+0xfc017e7c>
   17ee8:	98c00117 	ldw	r3,4(r19)
   17eec:	9c4b883a 	add	r5,r19,r17
   17ef0:	11000054 	ori	r4,r2,1
   17ef4:	18c0004c 	andi	r3,r3,1
   17ef8:	1c62b03a 	or	r17,r3,r17
   17efc:	9c400115 	stw	r17,4(r19)
   17f00:	29000115 	stw	r4,4(r5)
   17f04:	2885883a 	add	r2,r5,r2
   17f08:	10c00117 	ldw	r3,4(r2)
   17f0c:	29400204 	addi	r5,r5,8
   17f10:	a009883a 	mov	r4,r20
   17f14:	18c00054 	ori	r3,r3,1
   17f18:	10c00115 	stw	r3,4(r2)
   17f1c:	0015cb40 	call	15cb4 <_free_r>
   17f20:	003fd306 	br	17e70 <__alt_data_end+0xfc017e70>
   17f24:	017fff04 	movi	r5,-4
   17f28:	414a703a 	and	r5,r8,r5
   17f2c:	89800404 	addi	r6,r17,16
   17f30:	8151883a 	add	r8,r16,r5
   17f34:	4180590e 	bge	r8,r6,1809c <_realloc_r+0x390>
   17f38:	1080004c 	andi	r2,r2,1
   17f3c:	103f9e1e 	bne	r2,zero,17db8 <__alt_data_end+0xfc017db8>
   17f40:	adbffe17 	ldw	r22,-8(r21)
   17f44:	00bfff04 	movi	r2,-4
   17f48:	9dadc83a 	sub	r22,r19,r22
   17f4c:	b1800117 	ldw	r6,4(r22)
   17f50:	3084703a 	and	r2,r6,r2
   17f54:	20002026 	beq	r4,zero,17fd8 <_realloc_r+0x2cc>
   17f58:	80af883a 	add	r23,r16,r2
   17f5c:	b96f883a 	add	r23,r23,r5
   17f60:	21c05f26 	beq	r4,r7,180e0 <_realloc_r+0x3d4>
   17f64:	b8c01c16 	blt	r23,r3,17fd8 <_realloc_r+0x2cc>
   17f68:	20800317 	ldw	r2,12(r4)
   17f6c:	20c00217 	ldw	r3,8(r4)
   17f70:	81bfff04 	addi	r6,r16,-4
   17f74:	01000904 	movi	r4,36
   17f78:	18800315 	stw	r2,12(r3)
   17f7c:	10c00215 	stw	r3,8(r2)
   17f80:	b0c00217 	ldw	r3,8(r22)
   17f84:	b0800317 	ldw	r2,12(r22)
   17f88:	b4800204 	addi	r18,r22,8
   17f8c:	18800315 	stw	r2,12(r3)
   17f90:	10c00215 	stw	r3,8(r2)
   17f94:	21801b36 	bltu	r4,r6,18004 <_realloc_r+0x2f8>
   17f98:	008004c4 	movi	r2,19
   17f9c:	1180352e 	bgeu	r2,r6,18074 <_realloc_r+0x368>
   17fa0:	a8800017 	ldw	r2,0(r21)
   17fa4:	b0800215 	stw	r2,8(r22)
   17fa8:	a8800117 	ldw	r2,4(r21)
   17fac:	b0800315 	stw	r2,12(r22)
   17fb0:	008006c4 	movi	r2,27
   17fb4:	11807f36 	bltu	r2,r6,181b4 <_realloc_r+0x4a8>
   17fb8:	b0800404 	addi	r2,r22,16
   17fbc:	ad400204 	addi	r21,r21,8
   17fc0:	00002d06 	br	18078 <_realloc_r+0x36c>
   17fc4:	adbffe17 	ldw	r22,-8(r21)
   17fc8:	00bfff04 	movi	r2,-4
   17fcc:	9dadc83a 	sub	r22,r19,r22
   17fd0:	b1000117 	ldw	r4,4(r22)
   17fd4:	2084703a 	and	r2,r4,r2
   17fd8:	b03f7726 	beq	r22,zero,17db8 <__alt_data_end+0xfc017db8>
   17fdc:	80af883a 	add	r23,r16,r2
   17fe0:	b8ff7516 	blt	r23,r3,17db8 <__alt_data_end+0xfc017db8>
   17fe4:	b0800317 	ldw	r2,12(r22)
   17fe8:	b0c00217 	ldw	r3,8(r22)
   17fec:	81bfff04 	addi	r6,r16,-4
   17ff0:	01000904 	movi	r4,36
   17ff4:	18800315 	stw	r2,12(r3)
   17ff8:	10c00215 	stw	r3,8(r2)
   17ffc:	b4800204 	addi	r18,r22,8
   18000:	21bfe52e 	bgeu	r4,r6,17f98 <__alt_data_end+0xfc017f98>
   18004:	a80b883a 	mov	r5,r21
   18008:	9009883a 	mov	r4,r18
   1800c:	00169900 	call	16990 <memmove>
   18010:	b821883a 	mov	r16,r23
   18014:	b027883a 	mov	r19,r22
   18018:	003f8a06 	br	17e44 <__alt_data_end+0xfc017e44>
   1801c:	300b883a 	mov	r5,r6
   18020:	dfc00917 	ldw	ra,36(sp)
   18024:	df000817 	ldw	fp,32(sp)
   18028:	ddc00717 	ldw	r23,28(sp)
   1802c:	dd800617 	ldw	r22,24(sp)
   18030:	dd400517 	ldw	r21,20(sp)
   18034:	dd000417 	ldw	r20,16(sp)
   18038:	dcc00317 	ldw	r19,12(sp)
   1803c:	dc800217 	ldw	r18,8(sp)
   18040:	dc400117 	ldw	r17,4(sp)
   18044:	dc000017 	ldw	r16,0(sp)
   18048:	dec00a04 	addi	sp,sp,40
   1804c:	000e3501 	jmpi	e350 <_malloc_r>
   18050:	a8c00017 	ldw	r3,0(r21)
   18054:	90c00015 	stw	r3,0(r18)
   18058:	a8c00117 	ldw	r3,4(r21)
   1805c:	90c00115 	stw	r3,4(r18)
   18060:	00c006c4 	movi	r3,27
   18064:	19804536 	bltu	r3,r6,1817c <_realloc_r+0x470>
   18068:	90800204 	addi	r2,r18,8
   1806c:	a8c00204 	addi	r3,r21,8
   18070:	003f6306 	br	17e00 <__alt_data_end+0xfc017e00>
   18074:	9005883a 	mov	r2,r18
   18078:	a8c00017 	ldw	r3,0(r21)
   1807c:	b821883a 	mov	r16,r23
   18080:	b027883a 	mov	r19,r22
   18084:	10c00015 	stw	r3,0(r2)
   18088:	a8c00117 	ldw	r3,4(r21)
   1808c:	10c00115 	stw	r3,4(r2)
   18090:	a8c00217 	ldw	r3,8(r21)
   18094:	10c00215 	stw	r3,8(r2)
   18098:	003f6a06 	br	17e44 <__alt_data_end+0xfc017e44>
   1809c:	9c67883a 	add	r19,r19,r17
   180a0:	4445c83a 	sub	r2,r8,r17
   180a4:	e4c00215 	stw	r19,8(fp)
   180a8:	10800054 	ori	r2,r2,1
   180ac:	98800115 	stw	r2,4(r19)
   180b0:	a8bfff17 	ldw	r2,-4(r21)
   180b4:	a009883a 	mov	r4,r20
   180b8:	1080004c 	andi	r2,r2,1
   180bc:	1462b03a 	or	r17,r2,r17
   180c0:	ac7fff15 	stw	r17,-4(r21)
   180c4:	001f5540 	call	1f554 <__malloc_unlock>
   180c8:	a805883a 	mov	r2,r21
   180cc:	003f6b06 	br	17e7c <__alt_data_end+0xfc017e7c>
   180d0:	a80b883a 	mov	r5,r21
   180d4:	9009883a 	mov	r4,r18
   180d8:	00169900 	call	16990 <memmove>
   180dc:	003f4e06 	br	17e18 <__alt_data_end+0xfc017e18>
   180e0:	89000404 	addi	r4,r17,16
   180e4:	b93fbc16 	blt	r23,r4,17fd8 <__alt_data_end+0xfc017fd8>
   180e8:	b0800317 	ldw	r2,12(r22)
   180ec:	b0c00217 	ldw	r3,8(r22)
   180f0:	81bfff04 	addi	r6,r16,-4
   180f4:	01000904 	movi	r4,36
   180f8:	18800315 	stw	r2,12(r3)
   180fc:	10c00215 	stw	r3,8(r2)
   18100:	b4800204 	addi	r18,r22,8
   18104:	21804336 	bltu	r4,r6,18214 <_realloc_r+0x508>
   18108:	008004c4 	movi	r2,19
   1810c:	11803f2e 	bgeu	r2,r6,1820c <_realloc_r+0x500>
   18110:	a8800017 	ldw	r2,0(r21)
   18114:	b0800215 	stw	r2,8(r22)
   18118:	a8800117 	ldw	r2,4(r21)
   1811c:	b0800315 	stw	r2,12(r22)
   18120:	008006c4 	movi	r2,27
   18124:	11803f36 	bltu	r2,r6,18224 <_realloc_r+0x518>
   18128:	b0800404 	addi	r2,r22,16
   1812c:	ad400204 	addi	r21,r21,8
   18130:	a8c00017 	ldw	r3,0(r21)
   18134:	10c00015 	stw	r3,0(r2)
   18138:	a8c00117 	ldw	r3,4(r21)
   1813c:	10c00115 	stw	r3,4(r2)
   18140:	a8c00217 	ldw	r3,8(r21)
   18144:	10c00215 	stw	r3,8(r2)
   18148:	b447883a 	add	r3,r22,r17
   1814c:	bc45c83a 	sub	r2,r23,r17
   18150:	e0c00215 	stw	r3,8(fp)
   18154:	10800054 	ori	r2,r2,1
   18158:	18800115 	stw	r2,4(r3)
   1815c:	b0800117 	ldw	r2,4(r22)
   18160:	a009883a 	mov	r4,r20
   18164:	1080004c 	andi	r2,r2,1
   18168:	1462b03a 	or	r17,r2,r17
   1816c:	b4400115 	stw	r17,4(r22)
   18170:	001f5540 	call	1f554 <__malloc_unlock>
   18174:	9005883a 	mov	r2,r18
   18178:	003f4006 	br	17e7c <__alt_data_end+0xfc017e7c>
   1817c:	a8c00217 	ldw	r3,8(r21)
   18180:	90c00215 	stw	r3,8(r18)
   18184:	a8c00317 	ldw	r3,12(r21)
   18188:	90c00315 	stw	r3,12(r18)
   1818c:	30801126 	beq	r6,r2,181d4 <_realloc_r+0x4c8>
   18190:	90800404 	addi	r2,r18,16
   18194:	a8c00404 	addi	r3,r21,16
   18198:	003f1906 	br	17e00 <__alt_data_end+0xfc017e00>
   1819c:	90ffff17 	ldw	r3,-4(r18)
   181a0:	00bfff04 	movi	r2,-4
   181a4:	a825883a 	mov	r18,r21
   181a8:	1884703a 	and	r2,r3,r2
   181ac:	80a1883a 	add	r16,r16,r2
   181b0:	003f2406 	br	17e44 <__alt_data_end+0xfc017e44>
   181b4:	a8800217 	ldw	r2,8(r21)
   181b8:	b0800415 	stw	r2,16(r22)
   181bc:	a8800317 	ldw	r2,12(r21)
   181c0:	b0800515 	stw	r2,20(r22)
   181c4:	31000a26 	beq	r6,r4,181f0 <_realloc_r+0x4e4>
   181c8:	b0800604 	addi	r2,r22,24
   181cc:	ad400404 	addi	r21,r21,16
   181d0:	003fa906 	br	18078 <__alt_data_end+0xfc018078>
   181d4:	a9000417 	ldw	r4,16(r21)
   181d8:	90800604 	addi	r2,r18,24
   181dc:	a8c00604 	addi	r3,r21,24
   181e0:	91000415 	stw	r4,16(r18)
   181e4:	a9000517 	ldw	r4,20(r21)
   181e8:	91000515 	stw	r4,20(r18)
   181ec:	003f0406 	br	17e00 <__alt_data_end+0xfc017e00>
   181f0:	a8c00417 	ldw	r3,16(r21)
   181f4:	ad400604 	addi	r21,r21,24
   181f8:	b0800804 	addi	r2,r22,32
   181fc:	b0c00615 	stw	r3,24(r22)
   18200:	a8ffff17 	ldw	r3,-4(r21)
   18204:	b0c00715 	stw	r3,28(r22)
   18208:	003f9b06 	br	18078 <__alt_data_end+0xfc018078>
   1820c:	9005883a 	mov	r2,r18
   18210:	003fc706 	br	18130 <__alt_data_end+0xfc018130>
   18214:	a80b883a 	mov	r5,r21
   18218:	9009883a 	mov	r4,r18
   1821c:	00169900 	call	16990 <memmove>
   18220:	003fc906 	br	18148 <__alt_data_end+0xfc018148>
   18224:	a8800217 	ldw	r2,8(r21)
   18228:	b0800415 	stw	r2,16(r22)
   1822c:	a8800317 	ldw	r2,12(r21)
   18230:	b0800515 	stw	r2,20(r22)
   18234:	31000726 	beq	r6,r4,18254 <_realloc_r+0x548>
   18238:	b0800604 	addi	r2,r22,24
   1823c:	ad400404 	addi	r21,r21,16
   18240:	003fbb06 	br	18130 <__alt_data_end+0xfc018130>
   18244:	a009883a 	mov	r4,r20
   18248:	001f5540 	call	1f554 <__malloc_unlock>
   1824c:	0005883a 	mov	r2,zero
   18250:	003f0a06 	br	17e7c <__alt_data_end+0xfc017e7c>
   18254:	a8c00417 	ldw	r3,16(r21)
   18258:	ad400604 	addi	r21,r21,24
   1825c:	b0800804 	addi	r2,r22,32
   18260:	b0c00615 	stw	r3,24(r22)
   18264:	a8ffff17 	ldw	r3,-4(r21)
   18268:	b0c00715 	stw	r3,28(r22)
   1826c:	003fb006 	br	18130 <__alt_data_end+0xfc018130>

00018270 <__fpclassifyd>:
   18270:	00a00034 	movhi	r2,32768
   18274:	10bfffc4 	addi	r2,r2,-1
   18278:	2884703a 	and	r2,r5,r2
   1827c:	10000726 	beq	r2,zero,1829c <__fpclassifyd+0x2c>
   18280:	00fffc34 	movhi	r3,65520
   18284:	019ff834 	movhi	r6,32736
   18288:	28c7883a 	add	r3,r5,r3
   1828c:	31bfffc4 	addi	r6,r6,-1
   18290:	30c00536 	bltu	r6,r3,182a8 <__fpclassifyd+0x38>
   18294:	00800104 	movi	r2,4
   18298:	f800283a 	ret
   1829c:	2000021e 	bne	r4,zero,182a8 <__fpclassifyd+0x38>
   182a0:	00800084 	movi	r2,2
   182a4:	f800283a 	ret
   182a8:	00dffc34 	movhi	r3,32752
   182ac:	019ff834 	movhi	r6,32736
   182b0:	28cb883a 	add	r5,r5,r3
   182b4:	31bfffc4 	addi	r6,r6,-1
   182b8:	317ff62e 	bgeu	r6,r5,18294 <__alt_data_end+0xfc018294>
   182bc:	01400434 	movhi	r5,16
   182c0:	297fffc4 	addi	r5,r5,-1
   182c4:	28800236 	bltu	r5,r2,182d0 <__fpclassifyd+0x60>
   182c8:	008000c4 	movi	r2,3
   182cc:	f800283a 	ret
   182d0:	10c00226 	beq	r2,r3,182dc <__fpclassifyd+0x6c>
   182d4:	0005883a 	mov	r2,zero
   182d8:	f800283a 	ret
   182dc:	2005003a 	cmpeq	r2,r4,zero
   182e0:	f800283a 	ret

000182e4 <__sread>:
   182e4:	defffe04 	addi	sp,sp,-8
   182e8:	dc000015 	stw	r16,0(sp)
   182ec:	2821883a 	mov	r16,r5
   182f0:	2940038f 	ldh	r5,14(r5)
   182f4:	dfc00115 	stw	ra,4(sp)
   182f8:	001b78c0 	call	1b78c <_read_r>
   182fc:	10000716 	blt	r2,zero,1831c <__sread+0x38>
   18300:	80c01417 	ldw	r3,80(r16)
   18304:	1887883a 	add	r3,r3,r2
   18308:	80c01415 	stw	r3,80(r16)
   1830c:	dfc00117 	ldw	ra,4(sp)
   18310:	dc000017 	ldw	r16,0(sp)
   18314:	dec00204 	addi	sp,sp,8
   18318:	f800283a 	ret
   1831c:	80c0030b 	ldhu	r3,12(r16)
   18320:	18fbffcc 	andi	r3,r3,61439
   18324:	80c0030d 	sth	r3,12(r16)
   18328:	dfc00117 	ldw	ra,4(sp)
   1832c:	dc000017 	ldw	r16,0(sp)
   18330:	dec00204 	addi	sp,sp,8
   18334:	f800283a 	ret

00018338 <__seofread>:
   18338:	0005883a 	mov	r2,zero
   1833c:	f800283a 	ret

00018340 <__swrite>:
   18340:	2880030b 	ldhu	r2,12(r5)
   18344:	defffb04 	addi	sp,sp,-20
   18348:	dcc00315 	stw	r19,12(sp)
   1834c:	dc800215 	stw	r18,8(sp)
   18350:	dc400115 	stw	r17,4(sp)
   18354:	dc000015 	stw	r16,0(sp)
   18358:	dfc00415 	stw	ra,16(sp)
   1835c:	10c0400c 	andi	r3,r2,256
   18360:	2821883a 	mov	r16,r5
   18364:	2023883a 	mov	r17,r4
   18368:	3025883a 	mov	r18,r6
   1836c:	3827883a 	mov	r19,r7
   18370:	18000526 	beq	r3,zero,18388 <__swrite+0x48>
   18374:	2940038f 	ldh	r5,14(r5)
   18378:	01c00084 	movi	r7,2
   1837c:	000d883a 	mov	r6,zero
   18380:	001b72c0 	call	1b72c <_lseek_r>
   18384:	8080030b 	ldhu	r2,12(r16)
   18388:	8140038f 	ldh	r5,14(r16)
   1838c:	10bbffcc 	andi	r2,r2,61439
   18390:	980f883a 	mov	r7,r19
   18394:	900d883a 	mov	r6,r18
   18398:	8809883a 	mov	r4,r17
   1839c:	8080030d 	sth	r2,12(r16)
   183a0:	dfc00417 	ldw	ra,16(sp)
   183a4:	dcc00317 	ldw	r19,12(sp)
   183a8:	dc800217 	ldw	r18,8(sp)
   183ac:	dc400117 	ldw	r17,4(sp)
   183b0:	dc000017 	ldw	r16,0(sp)
   183b4:	dec00504 	addi	sp,sp,20
   183b8:	001b1e01 	jmpi	1b1e0 <_write_r>

000183bc <__sseek>:
   183bc:	defffe04 	addi	sp,sp,-8
   183c0:	dc000015 	stw	r16,0(sp)
   183c4:	2821883a 	mov	r16,r5
   183c8:	2940038f 	ldh	r5,14(r5)
   183cc:	dfc00115 	stw	ra,4(sp)
   183d0:	001b72c0 	call	1b72c <_lseek_r>
   183d4:	00ffffc4 	movi	r3,-1
   183d8:	10c00826 	beq	r2,r3,183fc <__sseek+0x40>
   183dc:	80c0030b 	ldhu	r3,12(r16)
   183e0:	80801415 	stw	r2,80(r16)
   183e4:	18c40014 	ori	r3,r3,4096
   183e8:	80c0030d 	sth	r3,12(r16)
   183ec:	dfc00117 	ldw	ra,4(sp)
   183f0:	dc000017 	ldw	r16,0(sp)
   183f4:	dec00204 	addi	sp,sp,8
   183f8:	f800283a 	ret
   183fc:	80c0030b 	ldhu	r3,12(r16)
   18400:	18fbffcc 	andi	r3,r3,61439
   18404:	80c0030d 	sth	r3,12(r16)
   18408:	dfc00117 	ldw	ra,4(sp)
   1840c:	dc000017 	ldw	r16,0(sp)
   18410:	dec00204 	addi	sp,sp,8
   18414:	f800283a 	ret

00018418 <__sclose>:
   18418:	2940038f 	ldh	r5,14(r5)
   1841c:	001b2401 	jmpi	1b240 <_close_r>

00018420 <__ssprint_r>:
   18420:	30800217 	ldw	r2,8(r6)
   18424:	defff604 	addi	sp,sp,-40
   18428:	dc800215 	stw	r18,8(sp)
   1842c:	dfc00915 	stw	ra,36(sp)
   18430:	df000815 	stw	fp,32(sp)
   18434:	ddc00715 	stw	r23,28(sp)
   18438:	dd800615 	stw	r22,24(sp)
   1843c:	dd400515 	stw	r21,20(sp)
   18440:	dd000415 	stw	r20,16(sp)
   18444:	dcc00315 	stw	r19,12(sp)
   18448:	dc400115 	stw	r17,4(sp)
   1844c:	dc000015 	stw	r16,0(sp)
   18450:	3025883a 	mov	r18,r6
   18454:	10005826 	beq	r2,zero,185b8 <__ssprint_r+0x198>
   18458:	2027883a 	mov	r19,r4
   1845c:	35c00017 	ldw	r23,0(r6)
   18460:	29000017 	ldw	r4,0(r5)
   18464:	28800217 	ldw	r2,8(r5)
   18468:	2823883a 	mov	r17,r5
   1846c:	0039883a 	mov	fp,zero
   18470:	0021883a 	mov	r16,zero
   18474:	80003926 	beq	r16,zero,1855c <__ssprint_r+0x13c>
   18478:	102b883a 	mov	r21,r2
   1847c:	102d883a 	mov	r22,r2
   18480:	80803a36 	bltu	r16,r2,1856c <__ssprint_r+0x14c>
   18484:	88c0030b 	ldhu	r3,12(r17)
   18488:	1881200c 	andi	r2,r3,1152
   1848c:	10002626 	beq	r2,zero,18528 <__ssprint_r+0x108>
   18490:	88800517 	ldw	r2,20(r17)
   18494:	89400417 	ldw	r5,16(r17)
   18498:	81800044 	addi	r6,r16,1
   1849c:	108f883a 	add	r7,r2,r2
   184a0:	3885883a 	add	r2,r7,r2
   184a4:	100ed7fa 	srli	r7,r2,31
   184a8:	216dc83a 	sub	r22,r4,r5
   184ac:	3589883a 	add	r4,r6,r22
   184b0:	3885883a 	add	r2,r7,r2
   184b4:	102bd07a 	srai	r21,r2,1
   184b8:	a80d883a 	mov	r6,r21
   184bc:	a900022e 	bgeu	r21,r4,184c8 <__ssprint_r+0xa8>
   184c0:	202b883a 	mov	r21,r4
   184c4:	200d883a 	mov	r6,r4
   184c8:	18c1000c 	andi	r3,r3,1024
   184cc:	18002a26 	beq	r3,zero,18578 <__ssprint_r+0x158>
   184d0:	300b883a 	mov	r5,r6
   184d4:	9809883a 	mov	r4,r19
   184d8:	000e3500 	call	e350 <_malloc_r>
   184dc:	1029883a 	mov	r20,r2
   184e0:	10002c26 	beq	r2,zero,18594 <__ssprint_r+0x174>
   184e4:	89400417 	ldw	r5,16(r17)
   184e8:	b00d883a 	mov	r6,r22
   184ec:	1009883a 	mov	r4,r2
   184f0:	000eb5c0 	call	eb5c <memcpy>
   184f4:	8880030b 	ldhu	r2,12(r17)
   184f8:	00fedfc4 	movi	r3,-1153
   184fc:	10c4703a 	and	r2,r2,r3
   18500:	10802014 	ori	r2,r2,128
   18504:	8880030d 	sth	r2,12(r17)
   18508:	a589883a 	add	r4,r20,r22
   1850c:	adadc83a 	sub	r22,r21,r22
   18510:	8d400515 	stw	r21,20(r17)
   18514:	8d800215 	stw	r22,8(r17)
   18518:	8d000415 	stw	r20,16(r17)
   1851c:	89000015 	stw	r4,0(r17)
   18520:	802b883a 	mov	r21,r16
   18524:	802d883a 	mov	r22,r16
   18528:	b00d883a 	mov	r6,r22
   1852c:	e00b883a 	mov	r5,fp
   18530:	00169900 	call	16990 <memmove>
   18534:	88800217 	ldw	r2,8(r17)
   18538:	89000017 	ldw	r4,0(r17)
   1853c:	90c00217 	ldw	r3,8(r18)
   18540:	1545c83a 	sub	r2,r2,r21
   18544:	2589883a 	add	r4,r4,r22
   18548:	88800215 	stw	r2,8(r17)
   1854c:	89000015 	stw	r4,0(r17)
   18550:	1c21c83a 	sub	r16,r3,r16
   18554:	94000215 	stw	r16,8(r18)
   18558:	80001726 	beq	r16,zero,185b8 <__ssprint_r+0x198>
   1855c:	bf000017 	ldw	fp,0(r23)
   18560:	bc000117 	ldw	r16,4(r23)
   18564:	bdc00204 	addi	r23,r23,8
   18568:	003fc206 	br	18474 <__alt_data_end+0xfc018474>
   1856c:	802b883a 	mov	r21,r16
   18570:	802d883a 	mov	r22,r16
   18574:	003fec06 	br	18528 <__alt_data_end+0xfc018528>
   18578:	9809883a 	mov	r4,r19
   1857c:	0017d0c0 	call	17d0c <_realloc_r>
   18580:	1029883a 	mov	r20,r2
   18584:	103fe01e 	bne	r2,zero,18508 <__alt_data_end+0xfc018508>
   18588:	89400417 	ldw	r5,16(r17)
   1858c:	9809883a 	mov	r4,r19
   18590:	0015cb40 	call	15cb4 <_free_r>
   18594:	88c0030b 	ldhu	r3,12(r17)
   18598:	00800304 	movi	r2,12
   1859c:	98800015 	stw	r2,0(r19)
   185a0:	18c01014 	ori	r3,r3,64
   185a4:	88c0030d 	sth	r3,12(r17)
   185a8:	00bfffc4 	movi	r2,-1
   185ac:	90000215 	stw	zero,8(r18)
   185b0:	90000115 	stw	zero,4(r18)
   185b4:	00000206 	br	185c0 <__ssprint_r+0x1a0>
   185b8:	90000115 	stw	zero,4(r18)
   185bc:	0005883a 	mov	r2,zero
   185c0:	dfc00917 	ldw	ra,36(sp)
   185c4:	df000817 	ldw	fp,32(sp)
   185c8:	ddc00717 	ldw	r23,28(sp)
   185cc:	dd800617 	ldw	r22,24(sp)
   185d0:	dd400517 	ldw	r21,20(sp)
   185d4:	dd000417 	ldw	r20,16(sp)
   185d8:	dcc00317 	ldw	r19,12(sp)
   185dc:	dc800217 	ldw	r18,8(sp)
   185e0:	dc400117 	ldw	r17,4(sp)
   185e4:	dc000017 	ldw	r16,0(sp)
   185e8:	dec00a04 	addi	sp,sp,40
   185ec:	f800283a 	ret

000185f0 <___svfiprintf_internal_r>:
   185f0:	2880030b 	ldhu	r2,12(r5)
   185f4:	deffc804 	addi	sp,sp,-224
   185f8:	dcc03115 	stw	r19,196(sp)
   185fc:	dfc03715 	stw	ra,220(sp)
   18600:	df003615 	stw	fp,216(sp)
   18604:	ddc03515 	stw	r23,212(sp)
   18608:	dd803415 	stw	r22,208(sp)
   1860c:	dd403315 	stw	r21,204(sp)
   18610:	dd003215 	stw	r20,200(sp)
   18614:	dc803015 	stw	r18,192(sp)
   18618:	dc402f15 	stw	r17,188(sp)
   1861c:	dc002e15 	stw	r16,184(sp)
   18620:	d9402315 	stw	r5,140(sp)
   18624:	d9002715 	stw	r4,156(sp)
   18628:	1080200c 	andi	r2,r2,128
   1862c:	d9c02415 	stw	r7,144(sp)
   18630:	3027883a 	mov	r19,r6
   18634:	10000226 	beq	r2,zero,18640 <___svfiprintf_internal_r+0x50>
   18638:	28800417 	ldw	r2,16(r5)
   1863c:	10046d26 	beq	r2,zero,197f4 <___svfiprintf_internal_r+0x1204>
   18640:	d8801a04 	addi	r2,sp,104
   18644:	d8c019c4 	addi	r3,sp,103
   18648:	058000f4 	movhi	r22,3
   1864c:	10c9c83a 	sub	r4,r2,r3
   18650:	b5aab904 	addi	r22,r22,-21788
   18654:	d8801e15 	stw	r2,120(sp)
   18658:	d8c01f15 	stw	r3,124(sp)
   1865c:	dec01a15 	stw	sp,104(sp)
   18660:	d8001c15 	stw	zero,112(sp)
   18664:	d8001b15 	stw	zero,108(sp)
   18668:	d811883a 	mov	r8,sp
   1866c:	d8002915 	stw	zero,164(sp)
   18670:	d8002615 	stw	zero,152(sp)
   18674:	d9002c15 	stw	r4,176(sp)
   18678:	98800007 	ldb	r2,0(r19)
   1867c:	10031426 	beq	r2,zero,192d0 <___svfiprintf_internal_r+0xce0>
   18680:	00c00944 	movi	r3,37
   18684:	9825883a 	mov	r18,r19
   18688:	10c0021e 	bne	r2,r3,18694 <___svfiprintf_internal_r+0xa4>
   1868c:	00001406 	br	186e0 <___svfiprintf_internal_r+0xf0>
   18690:	10c00326 	beq	r2,r3,186a0 <___svfiprintf_internal_r+0xb0>
   18694:	94800044 	addi	r18,r18,1
   18698:	90800007 	ldb	r2,0(r18)
   1869c:	103ffc1e 	bne	r2,zero,18690 <__alt_data_end+0xfc018690>
   186a0:	94e1c83a 	sub	r16,r18,r19
   186a4:	80000e26 	beq	r16,zero,186e0 <___svfiprintf_internal_r+0xf0>
   186a8:	d8c01c17 	ldw	r3,112(sp)
   186ac:	d8801b17 	ldw	r2,108(sp)
   186b0:	44c00015 	stw	r19,0(r8)
   186b4:	1c07883a 	add	r3,r3,r16
   186b8:	10800044 	addi	r2,r2,1
   186bc:	d8c01c15 	stw	r3,112(sp)
   186c0:	44000115 	stw	r16,4(r8)
   186c4:	d8801b15 	stw	r2,108(sp)
   186c8:	00c001c4 	movi	r3,7
   186cc:	18835c16 	blt	r3,r2,19440 <___svfiprintf_internal_r+0xe50>
   186d0:	42000204 	addi	r8,r8,8
   186d4:	d9402617 	ldw	r5,152(sp)
   186d8:	2c0b883a 	add	r5,r5,r16
   186dc:	d9402615 	stw	r5,152(sp)
   186e0:	90800007 	ldb	r2,0(r18)
   186e4:	1002fc26 	beq	r2,zero,192d8 <___svfiprintf_internal_r+0xce8>
   186e8:	0023883a 	mov	r17,zero
   186ec:	00bfffc4 	movi	r2,-1
   186f0:	0021883a 	mov	r16,zero
   186f4:	94c00044 	addi	r19,r18,1
   186f8:	90c00047 	ldb	r3,1(r18)
   186fc:	dc402105 	stb	r17,132(sp)
   18700:	d8001d85 	stb	zero,118(sp)
   18704:	002b883a 	mov	r21,zero
   18708:	d8802015 	stw	r2,128(sp)
   1870c:	d8002515 	stw	zero,148(sp)
   18710:	04801604 	movi	r18,88
   18714:	05000244 	movi	r20,9
   18718:	402f883a 	mov	r23,r8
   1871c:	8023883a 	mov	r17,r16
   18720:	9cc00044 	addi	r19,r19,1
   18724:	18bff804 	addi	r2,r3,-32
   18728:	9081fb36 	bltu	r18,r2,18f18 <___svfiprintf_internal_r+0x928>
   1872c:	100490ba 	slli	r2,r2,2
   18730:	010000b4 	movhi	r4,2
   18734:	2121d104 	addi	r4,r4,-30908
   18738:	1105883a 	add	r2,r2,r4
   1873c:	10800017 	ldw	r2,0(r2)
   18740:	1000683a 	jmp	r2
   18744:	00018944 	movi	zero,1573
   18748:	00018f18 	cmpnei	zero,zero,1596
   1874c:	00018f18 	cmpnei	zero,zero,1596
   18750:	00018938 	rdprs	zero,zero,1572
   18754:	00018f18 	cmpnei	zero,zero,1596
   18758:	00018f18 	cmpnei	zero,zero,1596
   1875c:	00018f18 	cmpnei	zero,zero,1596
   18760:	00018f18 	cmpnei	zero,zero,1596
   18764:	00018f18 	cmpnei	zero,zero,1596
   18768:	00018f18 	cmpnei	zero,zero,1596
   1876c:	000188a8 	cmpgeui	zero,zero,1570
   18770:	00018aa4 	muli	zero,zero,1578
   18774:	00018f18 	cmpnei	zero,zero,1596
   18778:	000188d0 	cmplti	zero,zero,1571
   1877c:	00018f54 	movui	zero,1597
   18780:	00018f18 	cmpnei	zero,zero,1596
   18784:	00018f48 	cmpgei	zero,zero,1597
   18788:	00018edc 	xori	zero,zero,1595
   1878c:	00018edc 	xori	zero,zero,1595
   18790:	00018edc 	xori	zero,zero,1595
   18794:	00018edc 	xori	zero,zero,1595
   18798:	00018edc 	xori	zero,zero,1595
   1879c:	00018edc 	xori	zero,zero,1595
   187a0:	00018edc 	xori	zero,zero,1595
   187a4:	00018edc 	xori	zero,zero,1595
   187a8:	00018edc 	xori	zero,zero,1595
   187ac:	00018f18 	cmpnei	zero,zero,1596
   187b0:	00018f18 	cmpnei	zero,zero,1596
   187b4:	00018f18 	cmpnei	zero,zero,1596
   187b8:	00018f18 	cmpnei	zero,zero,1596
   187bc:	00018f18 	cmpnei	zero,zero,1596
   187c0:	00018f18 	cmpnei	zero,zero,1596
   187c4:	00018f18 	cmpnei	zero,zero,1596
   187c8:	00018f18 	cmpnei	zero,zero,1596
   187cc:	00018f18 	cmpnei	zero,zero,1596
   187d0:	00018f18 	cmpnei	zero,zero,1596
   187d4:	00018e60 	cmpeqi	zero,zero,1593
   187d8:	00018f18 	cmpnei	zero,zero,1596
   187dc:	00018f18 	cmpnei	zero,zero,1596
   187e0:	00018f18 	cmpnei	zero,zero,1596
   187e4:	00018f18 	cmpnei	zero,zero,1596
   187e8:	00018f18 	cmpnei	zero,zero,1596
   187ec:	00018f18 	cmpnei	zero,zero,1596
   187f0:	00018f18 	cmpnei	zero,zero,1596
   187f4:	00018f18 	cmpnei	zero,zero,1596
   187f8:	00018f18 	cmpnei	zero,zero,1596
   187fc:	00018f18 	cmpnei	zero,zero,1596
   18800:	00019010 	cmplti	zero,zero,1600
   18804:	00018f18 	cmpnei	zero,zero,1596
   18808:	00018f18 	cmpnei	zero,zero,1596
   1880c:	00018f18 	cmpnei	zero,zero,1596
   18810:	00018f18 	cmpnei	zero,zero,1596
   18814:	00018f18 	cmpnei	zero,zero,1596
   18818:	00018f9c 	xori	zero,zero,1598
   1881c:	00018f18 	cmpnei	zero,zero,1596
   18820:	00018f18 	cmpnei	zero,zero,1596
   18824:	00018c9c 	xori	zero,zero,1586
   18828:	00018f18 	cmpnei	zero,zero,1596
   1882c:	00018f18 	cmpnei	zero,zero,1596
   18830:	00018f18 	cmpnei	zero,zero,1596
   18834:	00018f18 	cmpnei	zero,zero,1596
   18838:	00018f18 	cmpnei	zero,zero,1596
   1883c:	00018f18 	cmpnei	zero,zero,1596
   18840:	00018f18 	cmpnei	zero,zero,1596
   18844:	00018f18 	cmpnei	zero,zero,1596
   18848:	00018f18 	cmpnei	zero,zero,1596
   1884c:	00018f18 	cmpnei	zero,zero,1596
   18850:	00018b68 	cmpgeui	zero,zero,1581
   18854:	00018d4c 	andi	zero,zero,1589
   18858:	00018f18 	cmpnei	zero,zero,1596
   1885c:	00018f18 	cmpnei	zero,zero,1596
   18860:	00018f18 	cmpnei	zero,zero,1596
   18864:	00018d40 	call	18d4 <_ZN3USB4TaskEv+0xb8>
   18868:	00018d4c 	andi	zero,zero,1589
   1886c:	00018f18 	cmpnei	zero,zero,1596
   18870:	00018f18 	cmpnei	zero,zero,1596
   18874:	00018d2c 	andhi	zero,zero,1588
   18878:	00018f18 	cmpnei	zero,zero,1596
   1887c:	00018cec 	andhi	zero,zero,1587
   18880:	00018ab8 	rdprs	zero,zero,1578
   18884:	000188dc 	xori	zero,zero,1571
   18888:	00018e54 	movui	zero,1593
   1888c:	00018f18 	cmpnei	zero,zero,1596
   18890:	00018e00 	call	18e0 <_ZN3USB4TaskEv+0xc4>
   18894:	00018f18 	cmpnei	zero,zero,1596
   18898:	00018a1c 	xori	zero,zero,1576
   1889c:	00018f18 	cmpnei	zero,zero,1596
   188a0:	00018f18 	cmpnei	zero,zero,1596
   188a4:	00018968 	cmpgeui	zero,zero,1573
   188a8:	d9002417 	ldw	r4,144(sp)
   188ac:	d9402417 	ldw	r5,144(sp)
   188b0:	21000017 	ldw	r4,0(r4)
   188b4:	28800104 	addi	r2,r5,4
   188b8:	d9002515 	stw	r4,148(sp)
   188bc:	20032b0e 	bge	r4,zero,1956c <___svfiprintf_internal_r+0xf7c>
   188c0:	d8c02517 	ldw	r3,148(sp)
   188c4:	d8802415 	stw	r2,144(sp)
   188c8:	00c7c83a 	sub	r3,zero,r3
   188cc:	d8c02515 	stw	r3,148(sp)
   188d0:	8c400114 	ori	r17,r17,4
   188d4:	98c00007 	ldb	r3,0(r19)
   188d8:	003f9106 	br	18720 <__alt_data_end+0xfc018720>
   188dc:	00800c04 	movi	r2,48
   188e0:	d9402417 	ldw	r5,144(sp)
   188e4:	d9002017 	ldw	r4,128(sp)
   188e8:	d8801d05 	stb	r2,116(sp)
   188ec:	00801e04 	movi	r2,120
   188f0:	d8801d45 	stb	r2,117(sp)
   188f4:	d8001d85 	stb	zero,118(sp)
   188f8:	b811883a 	mov	r8,r23
   188fc:	28c00104 	addi	r3,r5,4
   18900:	2c800017 	ldw	r18,0(r5)
   18904:	0029883a 	mov	r20,zero
   18908:	88800094 	ori	r2,r17,2
   1890c:	20036316 	blt	r4,zero,1969c <___svfiprintf_internal_r+0x10ac>
   18910:	00bfdfc4 	movi	r2,-129
   18914:	88a0703a 	and	r16,r17,r2
   18918:	d8c02415 	stw	r3,144(sp)
   1891c:	84000094 	ori	r16,r16,2
   18920:	90031c26 	beq	r18,zero,19594 <___svfiprintf_internal_r+0xfa4>
   18924:	014000f4 	movhi	r5,3
   18928:	296a5104 	addi	r5,r5,-22204
   1892c:	002b883a 	mov	r21,zero
   18930:	d9402915 	stw	r5,164(sp)
   18934:	00002906 	br	189dc <___svfiprintf_internal_r+0x3ec>
   18938:	8c400054 	ori	r17,r17,1
   1893c:	98c00007 	ldb	r3,0(r19)
   18940:	003f7706 	br	18720 <__alt_data_end+0xfc018720>
   18944:	a8803fcc 	andi	r2,r21,255
   18948:	1080201c 	xori	r2,r2,128
   1894c:	10bfe004 	addi	r2,r2,-128
   18950:	10032a1e 	bne	r2,zero,195fc <___svfiprintf_internal_r+0x100c>
   18954:	00c00044 	movi	r3,1
   18958:	d8c02105 	stb	r3,132(sp)
   1895c:	05400804 	movi	r21,32
   18960:	98c00007 	ldb	r3,0(r19)
   18964:	003f6e06 	br	18720 <__alt_data_end+0xfc018720>
   18968:	8821883a 	mov	r16,r17
   1896c:	dc402103 	ldbu	r17,132(sp)
   18970:	b811883a 	mov	r8,r23
   18974:	8c403fcc 	andi	r17,r17,255
   18978:	8803f01e 	bne	r17,zero,1993c <___svfiprintf_internal_r+0x134c>
   1897c:	008000f4 	movhi	r2,3
   18980:	10aa5104 	addi	r2,r2,-22204
   18984:	d8802915 	stw	r2,164(sp)
   18988:	8080080c 	andi	r2,r16,32
   1898c:	1000cd26 	beq	r2,zero,18cc4 <___svfiprintf_internal_r+0x6d4>
   18990:	d9002417 	ldw	r4,144(sp)
   18994:	24800017 	ldw	r18,0(r4)
   18998:	25000117 	ldw	r20,4(r4)
   1899c:	21000204 	addi	r4,r4,8
   189a0:	d9002415 	stw	r4,144(sp)
   189a4:	8080004c 	andi	r2,r16,1
   189a8:	1002c726 	beq	r2,zero,194c8 <___svfiprintf_internal_r+0xed8>
   189ac:	9504b03a 	or	r2,r18,r20
   189b0:	1003061e 	bne	r2,zero,195cc <___svfiprintf_internal_r+0xfdc>
   189b4:	d9002017 	ldw	r4,128(sp)
   189b8:	d8001d85 	stb	zero,118(sp)
   189bc:	20033e16 	blt	r4,zero,196b8 <___svfiprintf_internal_r+0x10c8>
   189c0:	00bfdfc4 	movi	r2,-129
   189c4:	80a0703a 	and	r16,r16,r2
   189c8:	d9402017 	ldw	r5,128(sp)
   189cc:	002b883a 	mov	r21,zero
   189d0:	28002826 	beq	r5,zero,18a74 <___svfiprintf_internal_r+0x484>
   189d4:	0025883a 	mov	r18,zero
   189d8:	0029883a 	mov	r20,zero
   189dc:	d9002917 	ldw	r4,164(sp)
   189e0:	dc401a04 	addi	r17,sp,104
   189e4:	908003cc 	andi	r2,r18,15
   189e8:	a006973a 	slli	r3,r20,28
   189ec:	2085883a 	add	r2,r4,r2
   189f0:	9024d13a 	srli	r18,r18,4
   189f4:	10800003 	ldbu	r2,0(r2)
   189f8:	a028d13a 	srli	r20,r20,4
   189fc:	8c7fffc4 	addi	r17,r17,-1
   18a00:	1ca4b03a 	or	r18,r3,r18
   18a04:	88800005 	stb	r2,0(r17)
   18a08:	9504b03a 	or	r2,r18,r20
   18a0c:	103ff51e 	bne	r2,zero,189e4 <__alt_data_end+0xfc0189e4>
   18a10:	d8801e17 	ldw	r2,120(sp)
   18a14:	1469c83a 	sub	r20,r2,r17
   18a18:	00001906 	br	18a80 <___svfiprintf_internal_r+0x490>
   18a1c:	8821883a 	mov	r16,r17
   18a20:	dc402103 	ldbu	r17,132(sp)
   18a24:	b811883a 	mov	r8,r23
   18a28:	8c403fcc 	andi	r17,r17,255
   18a2c:	8803d01e 	bne	r17,zero,19970 <___svfiprintf_internal_r+0x1380>
   18a30:	8080080c 	andi	r2,r16,32
   18a34:	10016126 	beq	r2,zero,18fbc <___svfiprintf_internal_r+0x9cc>
   18a38:	d9002417 	ldw	r4,144(sp)
   18a3c:	d9402017 	ldw	r5,128(sp)
   18a40:	d8001d85 	stb	zero,118(sp)
   18a44:	20c00204 	addi	r3,r4,8
   18a48:	24800017 	ldw	r18,0(r4)
   18a4c:	25000117 	ldw	r20,4(r4)
   18a50:	28030f16 	blt	r5,zero,19690 <___svfiprintf_internal_r+0x10a0>
   18a54:	013fdfc4 	movi	r4,-129
   18a58:	9504b03a 	or	r2,r18,r20
   18a5c:	d8c02415 	stw	r3,144(sp)
   18a60:	8120703a 	and	r16,r16,r4
   18a64:	002b883a 	mov	r21,zero
   18a68:	1000cd1e 	bne	r2,zero,18da0 <___svfiprintf_internal_r+0x7b0>
   18a6c:	d8c02017 	ldw	r3,128(sp)
   18a70:	1803141e 	bne	r3,zero,196c4 <___svfiprintf_internal_r+0x10d4>
   18a74:	d8002015 	stw	zero,128(sp)
   18a78:	0029883a 	mov	r20,zero
   18a7c:	dc401a04 	addi	r17,sp,104
   18a80:	dc802017 	ldw	r18,128(sp)
   18a84:	9500010e 	bge	r18,r20,18a8c <___svfiprintf_internal_r+0x49c>
   18a88:	a025883a 	mov	r18,r20
   18a8c:	ad403fcc 	andi	r21,r21,255
   18a90:	ad40201c 	xori	r21,r21,128
   18a94:	ad7fe004 	addi	r21,r21,-128
   18a98:	a8003f26 	beq	r21,zero,18b98 <___svfiprintf_internal_r+0x5a8>
   18a9c:	94800044 	addi	r18,r18,1
   18aa0:	00003d06 	br	18b98 <___svfiprintf_internal_r+0x5a8>
   18aa4:	00c00044 	movi	r3,1
   18aa8:	d8c02105 	stb	r3,132(sp)
   18aac:	05400ac4 	movi	r21,43
   18ab0:	98c00007 	ldb	r3,0(r19)
   18ab4:	003f1a06 	br	18720 <__alt_data_end+0xfc018720>
   18ab8:	8821883a 	mov	r16,r17
   18abc:	dc402103 	ldbu	r17,132(sp)
   18ac0:	b811883a 	mov	r8,r23
   18ac4:	8c403fcc 	andi	r17,r17,255
   18ac8:	8803a71e 	bne	r17,zero,19968 <___svfiprintf_internal_r+0x1378>
   18acc:	8080080c 	andi	r2,r16,32
   18ad0:	10015726 	beq	r2,zero,19030 <___svfiprintf_internal_r+0xa40>
   18ad4:	d8c02417 	ldw	r3,144(sp)
   18ad8:	d9002017 	ldw	r4,128(sp)
   18adc:	d8001d85 	stb	zero,118(sp)
   18ae0:	18800204 	addi	r2,r3,8
   18ae4:	1c800017 	ldw	r18,0(r3)
   18ae8:	1d000117 	ldw	r20,4(r3)
   18aec:	2002db16 	blt	r4,zero,1965c <___svfiprintf_internal_r+0x106c>
   18af0:	013fdfc4 	movi	r4,-129
   18af4:	9506b03a 	or	r3,r18,r20
   18af8:	d8802415 	stw	r2,144(sp)
   18afc:	8120703a 	and	r16,r16,r4
   18b00:	18015826 	beq	r3,zero,19064 <___svfiprintf_internal_r+0xa74>
   18b04:	002b883a 	mov	r21,zero
   18b08:	dc401a04 	addi	r17,sp,104
   18b0c:	9006d0fa 	srli	r3,r18,3
   18b10:	a008977a 	slli	r4,r20,29
   18b14:	a028d0fa 	srli	r20,r20,3
   18b18:	948001cc 	andi	r18,r18,7
   18b1c:	90800c04 	addi	r2,r18,48
   18b20:	8c7fffc4 	addi	r17,r17,-1
   18b24:	20e4b03a 	or	r18,r4,r3
   18b28:	88800005 	stb	r2,0(r17)
   18b2c:	9506b03a 	or	r3,r18,r20
   18b30:	183ff61e 	bne	r3,zero,18b0c <__alt_data_end+0xfc018b0c>
   18b34:	80c0004c 	andi	r3,r16,1
   18b38:	18028926 	beq	r3,zero,19560 <___svfiprintf_internal_r+0xf70>
   18b3c:	10803fcc 	andi	r2,r2,255
   18b40:	1080201c 	xori	r2,r2,128
   18b44:	10bfe004 	addi	r2,r2,-128
   18b48:	00c00c04 	movi	r3,48
   18b4c:	10ffb026 	beq	r2,r3,18a10 <__alt_data_end+0xfc018a10>
   18b50:	88ffffc5 	stb	r3,-1(r17)
   18b54:	d8c01e17 	ldw	r3,120(sp)
   18b58:	88bfffc4 	addi	r2,r17,-1
   18b5c:	1023883a 	mov	r17,r2
   18b60:	18a9c83a 	sub	r20,r3,r2
   18b64:	003fc606 	br	18a80 <__alt_data_end+0xfc018a80>
   18b68:	d8c02417 	ldw	r3,144(sp)
   18b6c:	04800044 	movi	r18,1
   18b70:	8821883a 	mov	r16,r17
   18b74:	18800017 	ldw	r2,0(r3)
   18b78:	18c00104 	addi	r3,r3,4
   18b7c:	b811883a 	mov	r8,r23
   18b80:	d8001d85 	stb	zero,118(sp)
   18b84:	d8801005 	stb	r2,64(sp)
   18b88:	d8c02415 	stw	r3,144(sp)
   18b8c:	9029883a 	mov	r20,r18
   18b90:	dc401004 	addi	r17,sp,64
   18b94:	d8002015 	stw	zero,128(sp)
   18b98:	80c0008c 	andi	r3,r16,2
   18b9c:	d8c02115 	stw	r3,132(sp)
   18ba0:	18000126 	beq	r3,zero,18ba8 <___svfiprintf_internal_r+0x5b8>
   18ba4:	94800084 	addi	r18,r18,2
   18ba8:	80c0210c 	andi	r3,r16,132
   18bac:	d8c02215 	stw	r3,136(sp)
   18bb0:	1801321e 	bne	r3,zero,1907c <___svfiprintf_internal_r+0xa8c>
   18bb4:	d9002517 	ldw	r4,148(sp)
   18bb8:	24b9c83a 	sub	fp,r4,r18
   18bbc:	07012f0e 	bge	zero,fp,1907c <___svfiprintf_internal_r+0xa8c>
   18bc0:	02400404 	movi	r9,16
   18bc4:	d8c01c17 	ldw	r3,112(sp)
   18bc8:	d8801b17 	ldw	r2,108(sp)
   18bcc:	4f03250e 	bge	r9,fp,19864 <___svfiprintf_internal_r+0x1274>
   18bd0:	010000f4 	movhi	r4,3
   18bd4:	212abd04 	addi	r4,r4,-21772
   18bd8:	dc002a15 	stw	r16,168(sp)
   18bdc:	dc402b15 	stw	r17,172(sp)
   18be0:	d9002815 	stw	r4,160(sp)
   18be4:	e023883a 	mov	r17,fp
   18be8:	482f883a 	mov	r23,r9
   18bec:	9839883a 	mov	fp,r19
   18bf0:	054001c4 	movi	r21,7
   18bf4:	9027883a 	mov	r19,r18
   18bf8:	dc002717 	ldw	r16,156(sp)
   18bfc:	dc802317 	ldw	r18,140(sp)
   18c00:	00000306 	br	18c10 <___svfiprintf_internal_r+0x620>
   18c04:	8c7ffc04 	addi	r17,r17,-16
   18c08:	42000204 	addi	r8,r8,8
   18c0c:	bc40130e 	bge	r23,r17,18c5c <___svfiprintf_internal_r+0x66c>
   18c10:	014000f4 	movhi	r5,3
   18c14:	18c00404 	addi	r3,r3,16
   18c18:	10800044 	addi	r2,r2,1
   18c1c:	296abd04 	addi	r5,r5,-21772
   18c20:	41400015 	stw	r5,0(r8)
   18c24:	45c00115 	stw	r23,4(r8)
   18c28:	d8c01c15 	stw	r3,112(sp)
   18c2c:	d8801b15 	stw	r2,108(sp)
   18c30:	a8bff40e 	bge	r21,r2,18c04 <__alt_data_end+0xfc018c04>
   18c34:	d9801a04 	addi	r6,sp,104
   18c38:	900b883a 	mov	r5,r18
   18c3c:	8009883a 	mov	r4,r16
   18c40:	00184200 	call	18420 <__ssprint_r>
   18c44:	1001aa1e 	bne	r2,zero,192f0 <___svfiprintf_internal_r+0xd00>
   18c48:	8c7ffc04 	addi	r17,r17,-16
   18c4c:	d8c01c17 	ldw	r3,112(sp)
   18c50:	d8801b17 	ldw	r2,108(sp)
   18c54:	d811883a 	mov	r8,sp
   18c58:	bc7fed16 	blt	r23,r17,18c10 <__alt_data_end+0xfc018c10>
   18c5c:	9825883a 	mov	r18,r19
   18c60:	dc002a17 	ldw	r16,168(sp)
   18c64:	e027883a 	mov	r19,fp
   18c68:	8839883a 	mov	fp,r17
   18c6c:	dc402b17 	ldw	r17,172(sp)
   18c70:	d9002817 	ldw	r4,160(sp)
   18c74:	e0c7883a 	add	r3,fp,r3
   18c78:	10800044 	addi	r2,r2,1
   18c7c:	41000015 	stw	r4,0(r8)
   18c80:	47000115 	stw	fp,4(r8)
   18c84:	d8c01c15 	stw	r3,112(sp)
   18c88:	d8801b15 	stw	r2,108(sp)
   18c8c:	010001c4 	movi	r4,7
   18c90:	20821616 	blt	r4,r2,194ec <___svfiprintf_internal_r+0xefc>
   18c94:	42000204 	addi	r8,r8,8
   18c98:	0000fa06 	br	19084 <___svfiprintf_internal_r+0xa94>
   18c9c:	8821883a 	mov	r16,r17
   18ca0:	dc402103 	ldbu	r17,132(sp)
   18ca4:	b811883a 	mov	r8,r23
   18ca8:	8c403fcc 	andi	r17,r17,255
   18cac:	8803361e 	bne	r17,zero,19988 <___svfiprintf_internal_r+0x1398>
   18cb0:	014000f4 	movhi	r5,3
   18cb4:	296a4c04 	addi	r5,r5,-22224
   18cb8:	d9402915 	stw	r5,164(sp)
   18cbc:	8080080c 	andi	r2,r16,32
   18cc0:	103f331e 	bne	r2,zero,18990 <__alt_data_end+0xfc018990>
   18cc4:	8080040c 	andi	r2,r16,16
   18cc8:	1002551e 	bne	r2,zero,19620 <___svfiprintf_internal_r+0x1030>
   18ccc:	8080100c 	andi	r2,r16,64
   18cd0:	1002a626 	beq	r2,zero,1976c <___svfiprintf_internal_r+0x117c>
   18cd4:	d8802417 	ldw	r2,144(sp)
   18cd8:	0029883a 	mov	r20,zero
   18cdc:	1480000b 	ldhu	r18,0(r2)
   18ce0:	10800104 	addi	r2,r2,4
   18ce4:	d8802415 	stw	r2,144(sp)
   18ce8:	003f2e06 	br	189a4 <__alt_data_end+0xfc0189a4>
   18cec:	8821883a 	mov	r16,r17
   18cf0:	dc402103 	ldbu	r17,132(sp)
   18cf4:	b811883a 	mov	r8,r23
   18cf8:	8c403fcc 	andi	r17,r17,255
   18cfc:	88030b1e 	bne	r17,zero,1992c <___svfiprintf_internal_r+0x133c>
   18d00:	8080080c 	andi	r2,r16,32
   18d04:	1002271e 	bne	r2,zero,195a4 <___svfiprintf_internal_r+0xfb4>
   18d08:	8080040c 	andi	r2,r16,16
   18d0c:	10028e26 	beq	r2,zero,19748 <___svfiprintf_internal_r+0x1158>
   18d10:	d8c02417 	ldw	r3,144(sp)
   18d14:	d9002617 	ldw	r4,152(sp)
   18d18:	18800017 	ldw	r2,0(r3)
   18d1c:	18c00104 	addi	r3,r3,4
   18d20:	d8c02415 	stw	r3,144(sp)
   18d24:	11000015 	stw	r4,0(r2)
   18d28:	003e5306 	br	18678 <__alt_data_end+0xfc018678>
   18d2c:	98c00007 	ldb	r3,0(r19)
   18d30:	01401b04 	movi	r5,108
   18d34:	19424f26 	beq	r3,r5,19674 <___svfiprintf_internal_r+0x1084>
   18d38:	8c400414 	ori	r17,r17,16
   18d3c:	003e7806 	br	18720 <__alt_data_end+0xfc018720>
   18d40:	8c401014 	ori	r17,r17,64
   18d44:	98c00007 	ldb	r3,0(r19)
   18d48:	003e7506 	br	18720 <__alt_data_end+0xfc018720>
   18d4c:	8821883a 	mov	r16,r17
   18d50:	dc402103 	ldbu	r17,132(sp)
   18d54:	b811883a 	mov	r8,r23
   18d58:	8c403fcc 	andi	r17,r17,255
   18d5c:	8802fe1e 	bne	r17,zero,19958 <___svfiprintf_internal_r+0x1368>
   18d60:	8080080c 	andi	r2,r16,32
   18d64:	10004626 	beq	r2,zero,18e80 <___svfiprintf_internal_r+0x890>
   18d68:	d9002417 	ldw	r4,144(sp)
   18d6c:	20800117 	ldw	r2,4(r4)
   18d70:	24800017 	ldw	r18,0(r4)
   18d74:	21000204 	addi	r4,r4,8
   18d78:	d9002415 	stw	r4,144(sp)
   18d7c:	1029883a 	mov	r20,r2
   18d80:	10004a16 	blt	r2,zero,18eac <___svfiprintf_internal_r+0x8bc>
   18d84:	d9002017 	ldw	r4,128(sp)
   18d88:	dd401d83 	ldbu	r21,118(sp)
   18d8c:	2001eb16 	blt	r4,zero,1953c <___svfiprintf_internal_r+0xf4c>
   18d90:	00ffdfc4 	movi	r3,-129
   18d94:	9504b03a 	or	r2,r18,r20
   18d98:	80e0703a 	and	r16,r16,r3
   18d9c:	103f3326 	beq	r2,zero,18a6c <__alt_data_end+0xfc018a6c>
   18da0:	a0009426 	beq	r20,zero,18ff4 <___svfiprintf_internal_r+0xa04>
   18da4:	dc401a04 	addi	r17,sp,104
   18da8:	402f883a 	mov	r23,r8
   18dac:	9009883a 	mov	r4,r18
   18db0:	a00b883a 	mov	r5,r20
   18db4:	01800284 	movi	r6,10
   18db8:	000f883a 	mov	r7,zero
   18dbc:	001bfd00 	call	1bfd0 <__umoddi3>
   18dc0:	10800c04 	addi	r2,r2,48
   18dc4:	8c7fffc4 	addi	r17,r17,-1
   18dc8:	9009883a 	mov	r4,r18
   18dcc:	a00b883a 	mov	r5,r20
   18dd0:	88800005 	stb	r2,0(r17)
   18dd4:	01800284 	movi	r6,10
   18dd8:	000f883a 	mov	r7,zero
   18ddc:	001b9d40 	call	1b9d4 <__udivdi3>
   18de0:	1025883a 	mov	r18,r2
   18de4:	10c4b03a 	or	r2,r2,r3
   18de8:	1829883a 	mov	r20,r3
   18dec:	103fef1e 	bne	r2,zero,18dac <__alt_data_end+0xfc018dac>
   18df0:	d9001e17 	ldw	r4,120(sp)
   18df4:	b811883a 	mov	r8,r23
   18df8:	2469c83a 	sub	r20,r4,r17
   18dfc:	003f2006 	br	18a80 <__alt_data_end+0xfc018a80>
   18e00:	d8802417 	ldw	r2,144(sp)
   18e04:	8821883a 	mov	r16,r17
   18e08:	d8001d85 	stb	zero,118(sp)
   18e0c:	14400017 	ldw	r17,0(r2)
   18e10:	b811883a 	mov	r8,r23
   18e14:	15c00104 	addi	r23,r2,4
   18e18:	88026c26 	beq	r17,zero,197cc <___svfiprintf_internal_r+0x11dc>
   18e1c:	d8c02017 	ldw	r3,128(sp)
   18e20:	18025f16 	blt	r3,zero,197a0 <___svfiprintf_internal_r+0x11b0>
   18e24:	180d883a 	mov	r6,r3
   18e28:	000b883a 	mov	r5,zero
   18e2c:	8809883a 	mov	r4,r17
   18e30:	da002d15 	stw	r8,180(sp)
   18e34:	00168ac0 	call	168ac <memchr>
   18e38:	da002d17 	ldw	r8,180(sp)
   18e3c:	1002a526 	beq	r2,zero,198d4 <___svfiprintf_internal_r+0x12e4>
   18e40:	1469c83a 	sub	r20,r2,r17
   18e44:	dd401d83 	ldbu	r21,118(sp)
   18e48:	ddc02415 	stw	r23,144(sp)
   18e4c:	d8002015 	stw	zero,128(sp)
   18e50:	003f0b06 	br	18a80 <__alt_data_end+0xfc018a80>
   18e54:	8c400814 	ori	r17,r17,32
   18e58:	98c00007 	ldb	r3,0(r19)
   18e5c:	003e3006 	br	18720 <__alt_data_end+0xfc018720>
   18e60:	8821883a 	mov	r16,r17
   18e64:	dc402103 	ldbu	r17,132(sp)
   18e68:	b811883a 	mov	r8,r23
   18e6c:	8c403fcc 	andi	r17,r17,255
   18e70:	8802b01e 	bne	r17,zero,19934 <___svfiprintf_internal_r+0x1344>
   18e74:	84000414 	ori	r16,r16,16
   18e78:	8080080c 	andi	r2,r16,32
   18e7c:	103fba1e 	bne	r2,zero,18d68 <__alt_data_end+0xfc018d68>
   18e80:	8080040c 	andi	r2,r16,16
   18e84:	1001df1e 	bne	r2,zero,19604 <___svfiprintf_internal_r+0x1014>
   18e88:	8080100c 	andi	r2,r16,64
   18e8c:	10023d26 	beq	r2,zero,19784 <___svfiprintf_internal_r+0x1194>
   18e90:	d8802417 	ldw	r2,144(sp)
   18e94:	1480000f 	ldh	r18,0(r2)
   18e98:	10800104 	addi	r2,r2,4
   18e9c:	d8802415 	stw	r2,144(sp)
   18ea0:	9029d7fa 	srai	r20,r18,31
   18ea4:	a005883a 	mov	r2,r20
   18ea8:	103fb60e 	bge	r2,zero,18d84 <__alt_data_end+0xfc018d84>
   18eac:	d9402017 	ldw	r5,128(sp)
   18eb0:	04a5c83a 	sub	r18,zero,r18
   18eb4:	05400b44 	movi	r21,45
   18eb8:	9004c03a 	cmpne	r2,r18,zero
   18ebc:	0529c83a 	sub	r20,zero,r20
   18ec0:	dd401d85 	stb	r21,118(sp)
   18ec4:	a0a9c83a 	sub	r20,r20,r2
   18ec8:	28026c16 	blt	r5,zero,1987c <___svfiprintf_internal_r+0x128c>
   18ecc:	00bfdfc4 	movi	r2,-129
   18ed0:	80a0703a 	and	r16,r16,r2
   18ed4:	a03fb31e 	bne	r20,zero,18da4 <__alt_data_end+0xfc018da4>
   18ed8:	00004606 	br	18ff4 <___svfiprintf_internal_r+0xa04>
   18edc:	9839883a 	mov	fp,r19
   18ee0:	d8002515 	stw	zero,148(sp)
   18ee4:	1c3ff404 	addi	r16,r3,-48
   18ee8:	0009883a 	mov	r4,zero
   18eec:	01400284 	movi	r5,10
   18ef0:	000cda80 	call	cda8 <__mulsi3>
   18ef4:	e0c00007 	ldb	r3,0(fp)
   18ef8:	8089883a 	add	r4,r16,r2
   18efc:	9cc00044 	addi	r19,r19,1
   18f00:	1c3ff404 	addi	r16,r3,-48
   18f04:	9839883a 	mov	fp,r19
   18f08:	a43ff82e 	bgeu	r20,r16,18eec <__alt_data_end+0xfc018eec>
   18f0c:	d9002515 	stw	r4,148(sp)
   18f10:	18bff804 	addi	r2,r3,-32
   18f14:	90be052e 	bgeu	r18,r2,1872c <__alt_data_end+0xfc01872c>
   18f18:	8821883a 	mov	r16,r17
   18f1c:	dc402103 	ldbu	r17,132(sp)
   18f20:	b811883a 	mov	r8,r23
   18f24:	8c403fcc 	andi	r17,r17,255
   18f28:	88028d1e 	bne	r17,zero,19960 <___svfiprintf_internal_r+0x1370>
   18f2c:	1800ea26 	beq	r3,zero,192d8 <___svfiprintf_internal_r+0xce8>
   18f30:	04800044 	movi	r18,1
   18f34:	d8c01005 	stb	r3,64(sp)
   18f38:	d8001d85 	stb	zero,118(sp)
   18f3c:	9029883a 	mov	r20,r18
   18f40:	dc401004 	addi	r17,sp,64
   18f44:	003f1306 	br	18b94 <__alt_data_end+0xfc018b94>
   18f48:	8c402014 	ori	r17,r17,128
   18f4c:	98c00007 	ldb	r3,0(r19)
   18f50:	003df306 	br	18720 <__alt_data_end+0xfc018720>
   18f54:	98c00007 	ldb	r3,0(r19)
   18f58:	01000a84 	movi	r4,42
   18f5c:	9f000044 	addi	fp,r19,1
   18f60:	19026326 	beq	r3,r4,198f0 <___svfiprintf_internal_r+0x1300>
   18f64:	1c3ff404 	addi	r16,r3,-48
   18f68:	0009883a 	mov	r4,zero
   18f6c:	a4025636 	bltu	r20,r16,198c8 <___svfiprintf_internal_r+0x12d8>
   18f70:	01400284 	movi	r5,10
   18f74:	000cda80 	call	cda8 <__mulsi3>
   18f78:	e0c00007 	ldb	r3,0(fp)
   18f7c:	1409883a 	add	r4,r2,r16
   18f80:	e4c00044 	addi	r19,fp,1
   18f84:	1c3ff404 	addi	r16,r3,-48
   18f88:	9839883a 	mov	fp,r19
   18f8c:	a43ff82e 	bgeu	r20,r16,18f70 <__alt_data_end+0xfc018f70>
   18f90:	20020c16 	blt	r4,zero,197c4 <___svfiprintf_internal_r+0x11d4>
   18f94:	d9002015 	stw	r4,128(sp)
   18f98:	003de206 	br	18724 <__alt_data_end+0xfc018724>
   18f9c:	8821883a 	mov	r16,r17
   18fa0:	dc402103 	ldbu	r17,132(sp)
   18fa4:	b811883a 	mov	r8,r23
   18fa8:	8c403fcc 	andi	r17,r17,255
   18fac:	8802721e 	bne	r17,zero,19978 <___svfiprintf_internal_r+0x1388>
   18fb0:	84000414 	ori	r16,r16,16
   18fb4:	8080080c 	andi	r2,r16,32
   18fb8:	103e9f1e 	bne	r2,zero,18a38 <__alt_data_end+0xfc018a38>
   18fbc:	8080040c 	andi	r2,r16,16
   18fc0:	10015326 	beq	r2,zero,19510 <___svfiprintf_internal_r+0xf20>
   18fc4:	d8c02417 	ldw	r3,144(sp)
   18fc8:	d9002017 	ldw	r4,128(sp)
   18fcc:	d8001d85 	stb	zero,118(sp)
   18fd0:	18800104 	addi	r2,r3,4
   18fd4:	1c800017 	ldw	r18,0(r3)
   18fd8:	0029883a 	mov	r20,zero
   18fdc:	20015516 	blt	r4,zero,19534 <___svfiprintf_internal_r+0xf44>
   18fe0:	00ffdfc4 	movi	r3,-129
   18fe4:	d8802415 	stw	r2,144(sp)
   18fe8:	80e0703a 	and	r16,r16,r3
   18fec:	002b883a 	mov	r21,zero
   18ff0:	903e9e26 	beq	r18,zero,18a6c <__alt_data_end+0xfc018a6c>
   18ff4:	00800244 	movi	r2,9
   18ff8:	14bf6a36 	bltu	r2,r18,18da4 <__alt_data_end+0xfc018da4>
   18ffc:	94800c04 	addi	r18,r18,48
   19000:	dc8019c5 	stb	r18,103(sp)
   19004:	dd002c17 	ldw	r20,176(sp)
   19008:	dc4019c4 	addi	r17,sp,103
   1900c:	003e9c06 	br	18a80 <__alt_data_end+0xfc018a80>
   19010:	8821883a 	mov	r16,r17
   19014:	dc402103 	ldbu	r17,132(sp)
   19018:	b811883a 	mov	r8,r23
   1901c:	8c403fcc 	andi	r17,r17,255
   19020:	8802571e 	bne	r17,zero,19980 <___svfiprintf_internal_r+0x1390>
   19024:	84000414 	ori	r16,r16,16
   19028:	8080080c 	andi	r2,r16,32
   1902c:	103ea91e 	bne	r2,zero,18ad4 <__alt_data_end+0xfc018ad4>
   19030:	8080040c 	andi	r2,r16,16
   19034:	10018026 	beq	r2,zero,19638 <___svfiprintf_internal_r+0x1048>
   19038:	d9402417 	ldw	r5,144(sp)
   1903c:	d8c02017 	ldw	r3,128(sp)
   19040:	d8001d85 	stb	zero,118(sp)
   19044:	28800104 	addi	r2,r5,4
   19048:	2c800017 	ldw	r18,0(r5)
   1904c:	0029883a 	mov	r20,zero
   19050:	18018216 	blt	r3,zero,1965c <___svfiprintf_internal_r+0x106c>
   19054:	00ffdfc4 	movi	r3,-129
   19058:	d8802415 	stw	r2,144(sp)
   1905c:	80e0703a 	and	r16,r16,r3
   19060:	903ea81e 	bne	r18,zero,18b04 <__alt_data_end+0xfc018b04>
   19064:	d8802017 	ldw	r2,128(sp)
   19068:	002b883a 	mov	r21,zero
   1906c:	1001f226 	beq	r2,zero,19838 <___svfiprintf_internal_r+0x1248>
   19070:	0025883a 	mov	r18,zero
   19074:	0029883a 	mov	r20,zero
   19078:	003ea306 	br	18b08 <__alt_data_end+0xfc018b08>
   1907c:	d8c01c17 	ldw	r3,112(sp)
   19080:	d8801b17 	ldw	r2,108(sp)
   19084:	d9001d87 	ldb	r4,118(sp)
   19088:	20000b26 	beq	r4,zero,190b8 <___svfiprintf_internal_r+0xac8>
   1908c:	d9001d84 	addi	r4,sp,118
   19090:	18c00044 	addi	r3,r3,1
   19094:	10800044 	addi	r2,r2,1
   19098:	41000015 	stw	r4,0(r8)
   1909c:	01000044 	movi	r4,1
   190a0:	41000115 	stw	r4,4(r8)
   190a4:	d8c01c15 	stw	r3,112(sp)
   190a8:	d8801b15 	stw	r2,108(sp)
   190ac:	010001c4 	movi	r4,7
   190b0:	2080f316 	blt	r4,r2,19480 <___svfiprintf_internal_r+0xe90>
   190b4:	42000204 	addi	r8,r8,8
   190b8:	d9402117 	ldw	r5,132(sp)
   190bc:	28000b26 	beq	r5,zero,190ec <___svfiprintf_internal_r+0xafc>
   190c0:	d9001d04 	addi	r4,sp,116
   190c4:	18c00084 	addi	r3,r3,2
   190c8:	10800044 	addi	r2,r2,1
   190cc:	41000015 	stw	r4,0(r8)
   190d0:	01000084 	movi	r4,2
   190d4:	41000115 	stw	r4,4(r8)
   190d8:	d8c01c15 	stw	r3,112(sp)
   190dc:	d8801b15 	stw	r2,108(sp)
   190e0:	010001c4 	movi	r4,7
   190e4:	2080ef16 	blt	r4,r2,194a4 <___svfiprintf_internal_r+0xeb4>
   190e8:	42000204 	addi	r8,r8,8
   190ec:	d9402217 	ldw	r5,136(sp)
   190f0:	01002004 	movi	r4,128
   190f4:	29008f26 	beq	r5,r4,19334 <___svfiprintf_internal_r+0xd44>
   190f8:	d9002017 	ldw	r4,128(sp)
   190fc:	252fc83a 	sub	r23,r4,r20
   19100:	05c0310e 	bge	zero,r23,191c8 <___svfiprintf_internal_r+0xbd8>
   19104:	07000404 	movi	fp,16
   19108:	e5c17d0e 	bge	fp,r23,19700 <___svfiprintf_internal_r+0x1110>
   1910c:	010000f4 	movhi	r4,3
   19110:	212ab904 	addi	r4,r4,-21788
   19114:	dc002015 	stw	r16,128(sp)
   19118:	dc402215 	stw	r17,136(sp)
   1911c:	d9002115 	stw	r4,132(sp)
   19120:	b823883a 	mov	r17,r23
   19124:	054001c4 	movi	r21,7
   19128:	982f883a 	mov	r23,r19
   1912c:	dc002717 	ldw	r16,156(sp)
   19130:	9027883a 	mov	r19,r18
   19134:	dc802317 	ldw	r18,140(sp)
   19138:	00000306 	br	19148 <___svfiprintf_internal_r+0xb58>
   1913c:	8c7ffc04 	addi	r17,r17,-16
   19140:	42000204 	addi	r8,r8,8
   19144:	e440110e 	bge	fp,r17,1918c <___svfiprintf_internal_r+0xb9c>
   19148:	18c00404 	addi	r3,r3,16
   1914c:	10800044 	addi	r2,r2,1
   19150:	45800015 	stw	r22,0(r8)
   19154:	47000115 	stw	fp,4(r8)
   19158:	d8c01c15 	stw	r3,112(sp)
   1915c:	d8801b15 	stw	r2,108(sp)
   19160:	a8bff60e 	bge	r21,r2,1913c <__alt_data_end+0xfc01913c>
   19164:	d9801a04 	addi	r6,sp,104
   19168:	900b883a 	mov	r5,r18
   1916c:	8009883a 	mov	r4,r16
   19170:	00184200 	call	18420 <__ssprint_r>
   19174:	10005e1e 	bne	r2,zero,192f0 <___svfiprintf_internal_r+0xd00>
   19178:	8c7ffc04 	addi	r17,r17,-16
   1917c:	d8c01c17 	ldw	r3,112(sp)
   19180:	d8801b17 	ldw	r2,108(sp)
   19184:	d811883a 	mov	r8,sp
   19188:	e47fef16 	blt	fp,r17,19148 <__alt_data_end+0xfc019148>
   1918c:	9825883a 	mov	r18,r19
   19190:	dc002017 	ldw	r16,128(sp)
   19194:	b827883a 	mov	r19,r23
   19198:	882f883a 	mov	r23,r17
   1919c:	dc402217 	ldw	r17,136(sp)
   191a0:	d9402117 	ldw	r5,132(sp)
   191a4:	1dc7883a 	add	r3,r3,r23
   191a8:	10800044 	addi	r2,r2,1
   191ac:	41400015 	stw	r5,0(r8)
   191b0:	45c00115 	stw	r23,4(r8)
   191b4:	d8c01c15 	stw	r3,112(sp)
   191b8:	d8801b15 	stw	r2,108(sp)
   191bc:	010001c4 	movi	r4,7
   191c0:	2080a616 	blt	r4,r2,1945c <___svfiprintf_internal_r+0xe6c>
   191c4:	42000204 	addi	r8,r8,8
   191c8:	a0c7883a 	add	r3,r20,r3
   191cc:	10800044 	addi	r2,r2,1
   191d0:	44400015 	stw	r17,0(r8)
   191d4:	45000115 	stw	r20,4(r8)
   191d8:	d8c01c15 	stw	r3,112(sp)
   191dc:	d8801b15 	stw	r2,108(sp)
   191e0:	010001c4 	movi	r4,7
   191e4:	20808816 	blt	r4,r2,19408 <___svfiprintf_internal_r+0xe18>
   191e8:	42000204 	addi	r8,r8,8
   191ec:	8400010c 	andi	r16,r16,4
   191f0:	80002c26 	beq	r16,zero,192a4 <___svfiprintf_internal_r+0xcb4>
   191f4:	d8802517 	ldw	r2,148(sp)
   191f8:	14a1c83a 	sub	r16,r2,r18
   191fc:	0400290e 	bge	zero,r16,192a4 <___svfiprintf_internal_r+0xcb4>
   19200:	04400404 	movi	r17,16
   19204:	d8801b17 	ldw	r2,108(sp)
   19208:	8c01a70e 	bge	r17,r16,198a8 <___svfiprintf_internal_r+0x12b8>
   1920c:	014000f4 	movhi	r5,3
   19210:	296abd04 	addi	r5,r5,-21772
   19214:	d9402815 	stw	r5,160(sp)
   19218:	050001c4 	movi	r20,7
   1921c:	dd402717 	ldw	r21,156(sp)
   19220:	ddc02317 	ldw	r23,140(sp)
   19224:	00000306 	br	19234 <___svfiprintf_internal_r+0xc44>
   19228:	843ffc04 	addi	r16,r16,-16
   1922c:	42000204 	addi	r8,r8,8
   19230:	8c00130e 	bge	r17,r16,19280 <___svfiprintf_internal_r+0xc90>
   19234:	010000f4 	movhi	r4,3
   19238:	18c00404 	addi	r3,r3,16
   1923c:	10800044 	addi	r2,r2,1
   19240:	212abd04 	addi	r4,r4,-21772
   19244:	41000015 	stw	r4,0(r8)
   19248:	44400115 	stw	r17,4(r8)
   1924c:	d8c01c15 	stw	r3,112(sp)
   19250:	d8801b15 	stw	r2,108(sp)
   19254:	a0bff40e 	bge	r20,r2,19228 <__alt_data_end+0xfc019228>
   19258:	d9801a04 	addi	r6,sp,104
   1925c:	b80b883a 	mov	r5,r23
   19260:	a809883a 	mov	r4,r21
   19264:	00184200 	call	18420 <__ssprint_r>
   19268:	1000211e 	bne	r2,zero,192f0 <___svfiprintf_internal_r+0xd00>
   1926c:	843ffc04 	addi	r16,r16,-16
   19270:	d8c01c17 	ldw	r3,112(sp)
   19274:	d8801b17 	ldw	r2,108(sp)
   19278:	d811883a 	mov	r8,sp
   1927c:	8c3fed16 	blt	r17,r16,19234 <__alt_data_end+0xfc019234>
   19280:	d9402817 	ldw	r5,160(sp)
   19284:	1c07883a 	add	r3,r3,r16
   19288:	10800044 	addi	r2,r2,1
   1928c:	41400015 	stw	r5,0(r8)
   19290:	44000115 	stw	r16,4(r8)
   19294:	d8c01c15 	stw	r3,112(sp)
   19298:	d8801b15 	stw	r2,108(sp)
   1929c:	010001c4 	movi	r4,7
   192a0:	2080b516 	blt	r4,r2,19578 <___svfiprintf_internal_r+0xf88>
   192a4:	d8802517 	ldw	r2,148(sp)
   192a8:	1480010e 	bge	r2,r18,192b0 <___svfiprintf_internal_r+0xcc0>
   192ac:	9005883a 	mov	r2,r18
   192b0:	d9002617 	ldw	r4,152(sp)
   192b4:	2089883a 	add	r4,r4,r2
   192b8:	d9002615 	stw	r4,152(sp)
   192bc:	18005a1e 	bne	r3,zero,19428 <___svfiprintf_internal_r+0xe38>
   192c0:	98800007 	ldb	r2,0(r19)
   192c4:	d8001b15 	stw	zero,108(sp)
   192c8:	d811883a 	mov	r8,sp
   192cc:	103cec1e 	bne	r2,zero,18680 <__alt_data_end+0xfc018680>
   192d0:	9825883a 	mov	r18,r19
   192d4:	003d0206 	br	186e0 <__alt_data_end+0xfc0186e0>
   192d8:	d8801c17 	ldw	r2,112(sp)
   192dc:	10000426 	beq	r2,zero,192f0 <___svfiprintf_internal_r+0xd00>
   192e0:	d9402317 	ldw	r5,140(sp)
   192e4:	d9002717 	ldw	r4,156(sp)
   192e8:	d9801a04 	addi	r6,sp,104
   192ec:	00184200 	call	18420 <__ssprint_r>
   192f0:	d9402317 	ldw	r5,140(sp)
   192f4:	d8802617 	ldw	r2,152(sp)
   192f8:	28c0030b 	ldhu	r3,12(r5)
   192fc:	18c0100c 	andi	r3,r3,64
   19300:	18015c1e 	bne	r3,zero,19874 <___svfiprintf_internal_r+0x1284>
   19304:	dfc03717 	ldw	ra,220(sp)
   19308:	df003617 	ldw	fp,216(sp)
   1930c:	ddc03517 	ldw	r23,212(sp)
   19310:	dd803417 	ldw	r22,208(sp)
   19314:	dd403317 	ldw	r21,204(sp)
   19318:	dd003217 	ldw	r20,200(sp)
   1931c:	dcc03117 	ldw	r19,196(sp)
   19320:	dc803017 	ldw	r18,192(sp)
   19324:	dc402f17 	ldw	r17,188(sp)
   19328:	dc002e17 	ldw	r16,184(sp)
   1932c:	dec03804 	addi	sp,sp,224
   19330:	f800283a 	ret
   19334:	d9002517 	ldw	r4,148(sp)
   19338:	24afc83a 	sub	r23,r4,r18
   1933c:	05ff6e0e 	bge	zero,r23,190f8 <__alt_data_end+0xfc0190f8>
   19340:	07000404 	movi	fp,16
   19344:	e5c15c0e 	bge	fp,r23,198b8 <___svfiprintf_internal_r+0x12c8>
   19348:	010000f4 	movhi	r4,3
   1934c:	212ab904 	addi	r4,r4,-21788
   19350:	dc002215 	stw	r16,136(sp)
   19354:	dc402815 	stw	r17,160(sp)
   19358:	d9002115 	stw	r4,132(sp)
   1935c:	b823883a 	mov	r17,r23
   19360:	054001c4 	movi	r21,7
   19364:	982f883a 	mov	r23,r19
   19368:	dc002717 	ldw	r16,156(sp)
   1936c:	9027883a 	mov	r19,r18
   19370:	dc802317 	ldw	r18,140(sp)
   19374:	00000306 	br	19384 <___svfiprintf_internal_r+0xd94>
   19378:	8c7ffc04 	addi	r17,r17,-16
   1937c:	42000204 	addi	r8,r8,8
   19380:	e440110e 	bge	fp,r17,193c8 <___svfiprintf_internal_r+0xdd8>
   19384:	18c00404 	addi	r3,r3,16
   19388:	10800044 	addi	r2,r2,1
   1938c:	45800015 	stw	r22,0(r8)
   19390:	47000115 	stw	fp,4(r8)
   19394:	d8c01c15 	stw	r3,112(sp)
   19398:	d8801b15 	stw	r2,108(sp)
   1939c:	a8bff60e 	bge	r21,r2,19378 <__alt_data_end+0xfc019378>
   193a0:	d9801a04 	addi	r6,sp,104
   193a4:	900b883a 	mov	r5,r18
   193a8:	8009883a 	mov	r4,r16
   193ac:	00184200 	call	18420 <__ssprint_r>
   193b0:	103fcf1e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   193b4:	8c7ffc04 	addi	r17,r17,-16
   193b8:	d8c01c17 	ldw	r3,112(sp)
   193bc:	d8801b17 	ldw	r2,108(sp)
   193c0:	d811883a 	mov	r8,sp
   193c4:	e47fef16 	blt	fp,r17,19384 <__alt_data_end+0xfc019384>
   193c8:	9825883a 	mov	r18,r19
   193cc:	dc002217 	ldw	r16,136(sp)
   193d0:	b827883a 	mov	r19,r23
   193d4:	882f883a 	mov	r23,r17
   193d8:	dc402817 	ldw	r17,160(sp)
   193dc:	d9402117 	ldw	r5,132(sp)
   193e0:	1dc7883a 	add	r3,r3,r23
   193e4:	10800044 	addi	r2,r2,1
   193e8:	41400015 	stw	r5,0(r8)
   193ec:	45c00115 	stw	r23,4(r8)
   193f0:	d8c01c15 	stw	r3,112(sp)
   193f4:	d8801b15 	stw	r2,108(sp)
   193f8:	010001c4 	movi	r4,7
   193fc:	2080b716 	blt	r4,r2,196dc <___svfiprintf_internal_r+0x10ec>
   19400:	42000204 	addi	r8,r8,8
   19404:	003f3c06 	br	190f8 <__alt_data_end+0xfc0190f8>
   19408:	d9402317 	ldw	r5,140(sp)
   1940c:	d9002717 	ldw	r4,156(sp)
   19410:	d9801a04 	addi	r6,sp,104
   19414:	00184200 	call	18420 <__ssprint_r>
   19418:	103fb51e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   1941c:	d8c01c17 	ldw	r3,112(sp)
   19420:	d811883a 	mov	r8,sp
   19424:	003f7106 	br	191ec <__alt_data_end+0xfc0191ec>
   19428:	d9402317 	ldw	r5,140(sp)
   1942c:	d9002717 	ldw	r4,156(sp)
   19430:	d9801a04 	addi	r6,sp,104
   19434:	00184200 	call	18420 <__ssprint_r>
   19438:	103fa126 	beq	r2,zero,192c0 <__alt_data_end+0xfc0192c0>
   1943c:	003fac06 	br	192f0 <__alt_data_end+0xfc0192f0>
   19440:	d9402317 	ldw	r5,140(sp)
   19444:	d9002717 	ldw	r4,156(sp)
   19448:	d9801a04 	addi	r6,sp,104
   1944c:	00184200 	call	18420 <__ssprint_r>
   19450:	103fa71e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   19454:	d811883a 	mov	r8,sp
   19458:	003c9e06 	br	186d4 <__alt_data_end+0xfc0186d4>
   1945c:	d9402317 	ldw	r5,140(sp)
   19460:	d9002717 	ldw	r4,156(sp)
   19464:	d9801a04 	addi	r6,sp,104
   19468:	00184200 	call	18420 <__ssprint_r>
   1946c:	103fa01e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   19470:	d8c01c17 	ldw	r3,112(sp)
   19474:	d8801b17 	ldw	r2,108(sp)
   19478:	d811883a 	mov	r8,sp
   1947c:	003f5206 	br	191c8 <__alt_data_end+0xfc0191c8>
   19480:	d9402317 	ldw	r5,140(sp)
   19484:	d9002717 	ldw	r4,156(sp)
   19488:	d9801a04 	addi	r6,sp,104
   1948c:	00184200 	call	18420 <__ssprint_r>
   19490:	103f971e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   19494:	d8c01c17 	ldw	r3,112(sp)
   19498:	d8801b17 	ldw	r2,108(sp)
   1949c:	d811883a 	mov	r8,sp
   194a0:	003f0506 	br	190b8 <__alt_data_end+0xfc0190b8>
   194a4:	d9402317 	ldw	r5,140(sp)
   194a8:	d9002717 	ldw	r4,156(sp)
   194ac:	d9801a04 	addi	r6,sp,104
   194b0:	00184200 	call	18420 <__ssprint_r>
   194b4:	103f8e1e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   194b8:	d8c01c17 	ldw	r3,112(sp)
   194bc:	d8801b17 	ldw	r2,108(sp)
   194c0:	d811883a 	mov	r8,sp
   194c4:	003f0906 	br	190ec <__alt_data_end+0xfc0190ec>
   194c8:	d9402017 	ldw	r5,128(sp)
   194cc:	d8001d85 	stb	zero,118(sp)
   194d0:	28007716 	blt	r5,zero,196b0 <___svfiprintf_internal_r+0x10c0>
   194d4:	00ffdfc4 	movi	r3,-129
   194d8:	9504b03a 	or	r2,r18,r20
   194dc:	80e0703a 	and	r16,r16,r3
   194e0:	103d3926 	beq	r2,zero,189c8 <__alt_data_end+0xfc0189c8>
   194e4:	002b883a 	mov	r21,zero
   194e8:	003d3c06 	br	189dc <__alt_data_end+0xfc0189dc>
   194ec:	d9402317 	ldw	r5,140(sp)
   194f0:	d9002717 	ldw	r4,156(sp)
   194f4:	d9801a04 	addi	r6,sp,104
   194f8:	00184200 	call	18420 <__ssprint_r>
   194fc:	103f7c1e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   19500:	d8c01c17 	ldw	r3,112(sp)
   19504:	d8801b17 	ldw	r2,108(sp)
   19508:	d811883a 	mov	r8,sp
   1950c:	003edd06 	br	19084 <__alt_data_end+0xfc019084>
   19510:	8080100c 	andi	r2,r16,64
   19514:	d8001d85 	stb	zero,118(sp)
   19518:	10008426 	beq	r2,zero,1972c <___svfiprintf_internal_r+0x113c>
   1951c:	d9402417 	ldw	r5,144(sp)
   19520:	d8c02017 	ldw	r3,128(sp)
   19524:	0029883a 	mov	r20,zero
   19528:	28800104 	addi	r2,r5,4
   1952c:	2c80000b 	ldhu	r18,0(r5)
   19530:	183eab0e 	bge	r3,zero,18fe0 <__alt_data_end+0xfc018fe0>
   19534:	d8802415 	stw	r2,144(sp)
   19538:	002b883a 	mov	r21,zero
   1953c:	9504b03a 	or	r2,r18,r20
   19540:	103e171e 	bne	r2,zero,18da0 <__alt_data_end+0xfc018da0>
   19544:	00800044 	movi	r2,1
   19548:	10803fcc 	andi	r2,r2,255
   1954c:	00c00044 	movi	r3,1
   19550:	10c05c26 	beq	r2,r3,196c4 <___svfiprintf_internal_r+0x10d4>
   19554:	00c00084 	movi	r3,2
   19558:	10fd1e26 	beq	r2,r3,189d4 <__alt_data_end+0xfc0189d4>
   1955c:	003ec406 	br	19070 <__alt_data_end+0xfc019070>
   19560:	d9401e17 	ldw	r5,120(sp)
   19564:	2c69c83a 	sub	r20,r5,r17
   19568:	003d4506 	br	18a80 <__alt_data_end+0xfc018a80>
   1956c:	d8802415 	stw	r2,144(sp)
   19570:	98c00007 	ldb	r3,0(r19)
   19574:	003c6a06 	br	18720 <__alt_data_end+0xfc018720>
   19578:	d9402317 	ldw	r5,140(sp)
   1957c:	d9002717 	ldw	r4,156(sp)
   19580:	d9801a04 	addi	r6,sp,104
   19584:	00184200 	call	18420 <__ssprint_r>
   19588:	103f591e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   1958c:	d8c01c17 	ldw	r3,112(sp)
   19590:	003f4406 	br	192a4 <__alt_data_end+0xfc0192a4>
   19594:	014000f4 	movhi	r5,3
   19598:	296a5104 	addi	r5,r5,-22204
   1959c:	d9402915 	stw	r5,164(sp)
   195a0:	003d0906 	br	189c8 <__alt_data_end+0xfc0189c8>
   195a4:	d8c02417 	ldw	r3,144(sp)
   195a8:	d9002617 	ldw	r4,152(sp)
   195ac:	d9402417 	ldw	r5,144(sp)
   195b0:	18800017 	ldw	r2,0(r3)
   195b4:	2007d7fa 	srai	r3,r4,31
   195b8:	29400104 	addi	r5,r5,4
   195bc:	d9402415 	stw	r5,144(sp)
   195c0:	11000015 	stw	r4,0(r2)
   195c4:	10c00115 	stw	r3,4(r2)
   195c8:	003c2b06 	br	18678 <__alt_data_end+0xfc018678>
   195cc:	d8c01d45 	stb	r3,117(sp)
   195d0:	d8c02017 	ldw	r3,128(sp)
   195d4:	00800c04 	movi	r2,48
   195d8:	d8801d05 	stb	r2,116(sp)
   195dc:	d8001d85 	stb	zero,118(sp)
   195e0:	80800094 	ori	r2,r16,2
   195e4:	1800ac16 	blt	r3,zero,19898 <___svfiprintf_internal_r+0x12a8>
   195e8:	00bfdfc4 	movi	r2,-129
   195ec:	80a0703a 	and	r16,r16,r2
   195f0:	84000094 	ori	r16,r16,2
   195f4:	002b883a 	mov	r21,zero
   195f8:	003cf806 	br	189dc <__alt_data_end+0xfc0189dc>
   195fc:	98c00007 	ldb	r3,0(r19)
   19600:	003c4706 	br	18720 <__alt_data_end+0xfc018720>
   19604:	d9402417 	ldw	r5,144(sp)
   19608:	2c800017 	ldw	r18,0(r5)
   1960c:	29400104 	addi	r5,r5,4
   19610:	d9402415 	stw	r5,144(sp)
   19614:	9029d7fa 	srai	r20,r18,31
   19618:	a005883a 	mov	r2,r20
   1961c:	003dd806 	br	18d80 <__alt_data_end+0xfc018d80>
   19620:	d9402417 	ldw	r5,144(sp)
   19624:	0029883a 	mov	r20,zero
   19628:	2c800017 	ldw	r18,0(r5)
   1962c:	29400104 	addi	r5,r5,4
   19630:	d9402415 	stw	r5,144(sp)
   19634:	003cdb06 	br	189a4 <__alt_data_end+0xfc0189a4>
   19638:	8080100c 	andi	r2,r16,64
   1963c:	d8001d85 	stb	zero,118(sp)
   19640:	10003326 	beq	r2,zero,19710 <___svfiprintf_internal_r+0x1120>
   19644:	d9002417 	ldw	r4,144(sp)
   19648:	d9402017 	ldw	r5,128(sp)
   1964c:	0029883a 	mov	r20,zero
   19650:	20800104 	addi	r2,r4,4
   19654:	2480000b 	ldhu	r18,0(r4)
   19658:	283e7e0e 	bge	r5,zero,19054 <__alt_data_end+0xfc019054>
   1965c:	9506b03a 	or	r3,r18,r20
   19660:	d8802415 	stw	r2,144(sp)
   19664:	183d271e 	bne	r3,zero,18b04 <__alt_data_end+0xfc018b04>
   19668:	002b883a 	mov	r21,zero
   1966c:	0005883a 	mov	r2,zero
   19670:	003fb506 	br	19548 <__alt_data_end+0xfc019548>
   19674:	98c00043 	ldbu	r3,1(r19)
   19678:	8c400814 	ori	r17,r17,32
   1967c:	9cc00044 	addi	r19,r19,1
   19680:	18c03fcc 	andi	r3,r3,255
   19684:	18c0201c 	xori	r3,r3,128
   19688:	18ffe004 	addi	r3,r3,-128
   1968c:	003c2406 	br	18720 <__alt_data_end+0xfc018720>
   19690:	d8c02415 	stw	r3,144(sp)
   19694:	002b883a 	mov	r21,zero
   19698:	003fa806 	br	1953c <__alt_data_end+0xfc01953c>
   1969c:	010000f4 	movhi	r4,3
   196a0:	212a5104 	addi	r4,r4,-22204
   196a4:	d9002915 	stw	r4,164(sp)
   196a8:	d8c02415 	stw	r3,144(sp)
   196ac:	1021883a 	mov	r16,r2
   196b0:	9504b03a 	or	r2,r18,r20
   196b4:	103f8b1e 	bne	r2,zero,194e4 <__alt_data_end+0xfc0194e4>
   196b8:	002b883a 	mov	r21,zero
   196bc:	00800084 	movi	r2,2
   196c0:	003fa106 	br	19548 <__alt_data_end+0xfc019548>
   196c4:	0025883a 	mov	r18,zero
   196c8:	94800c04 	addi	r18,r18,48
   196cc:	dc8019c5 	stb	r18,103(sp)
   196d0:	dd002c17 	ldw	r20,176(sp)
   196d4:	dc4019c4 	addi	r17,sp,103
   196d8:	003ce906 	br	18a80 <__alt_data_end+0xfc018a80>
   196dc:	d9402317 	ldw	r5,140(sp)
   196e0:	d9002717 	ldw	r4,156(sp)
   196e4:	d9801a04 	addi	r6,sp,104
   196e8:	00184200 	call	18420 <__ssprint_r>
   196ec:	103f001e 	bne	r2,zero,192f0 <__alt_data_end+0xfc0192f0>
   196f0:	d8c01c17 	ldw	r3,112(sp)
   196f4:	d8801b17 	ldw	r2,108(sp)
   196f8:	d811883a 	mov	r8,sp
   196fc:	003e7e06 	br	190f8 <__alt_data_end+0xfc0190f8>
   19700:	014000f4 	movhi	r5,3
   19704:	296ab904 	addi	r5,r5,-21788
   19708:	d9402115 	stw	r5,132(sp)
   1970c:	003ea406 	br	191a0 <__alt_data_end+0xfc0191a0>
   19710:	d8c02417 	ldw	r3,144(sp)
   19714:	d9002017 	ldw	r4,128(sp)
   19718:	0029883a 	mov	r20,zero
   1971c:	18800104 	addi	r2,r3,4
   19720:	1c800017 	ldw	r18,0(r3)
   19724:	203e4b0e 	bge	r4,zero,19054 <__alt_data_end+0xfc019054>
   19728:	003fcc06 	br	1965c <__alt_data_end+0xfc01965c>
   1972c:	d9002417 	ldw	r4,144(sp)
   19730:	d9402017 	ldw	r5,128(sp)
   19734:	0029883a 	mov	r20,zero
   19738:	20800104 	addi	r2,r4,4
   1973c:	24800017 	ldw	r18,0(r4)
   19740:	283e270e 	bge	r5,zero,18fe0 <__alt_data_end+0xfc018fe0>
   19744:	003f7b06 	br	19534 <__alt_data_end+0xfc019534>
   19748:	8400100c 	andi	r16,r16,64
   1974c:	80003326 	beq	r16,zero,1981c <___svfiprintf_internal_r+0x122c>
   19750:	d9402417 	ldw	r5,144(sp)
   19754:	d8c02617 	ldw	r3,152(sp)
   19758:	28800017 	ldw	r2,0(r5)
   1975c:	29400104 	addi	r5,r5,4
   19760:	d9402415 	stw	r5,144(sp)
   19764:	10c0000d 	sth	r3,0(r2)
   19768:	003bc306 	br	18678 <__alt_data_end+0xfc018678>
   1976c:	d9002417 	ldw	r4,144(sp)
   19770:	0029883a 	mov	r20,zero
   19774:	24800017 	ldw	r18,0(r4)
   19778:	21000104 	addi	r4,r4,4
   1977c:	d9002415 	stw	r4,144(sp)
   19780:	003c8806 	br	189a4 <__alt_data_end+0xfc0189a4>
   19784:	d8c02417 	ldw	r3,144(sp)
   19788:	1c800017 	ldw	r18,0(r3)
   1978c:	18c00104 	addi	r3,r3,4
   19790:	d8c02415 	stw	r3,144(sp)
   19794:	9029d7fa 	srai	r20,r18,31
   19798:	a005883a 	mov	r2,r20
   1979c:	003d7806 	br	18d80 <__alt_data_end+0xfc018d80>
   197a0:	8809883a 	mov	r4,r17
   197a4:	da002d15 	stw	r8,180(sp)
   197a8:	000f4240 	call	f424 <strlen>
   197ac:	1029883a 	mov	r20,r2
   197b0:	dd401d83 	ldbu	r21,118(sp)
   197b4:	ddc02415 	stw	r23,144(sp)
   197b8:	d8002015 	stw	zero,128(sp)
   197bc:	da002d17 	ldw	r8,180(sp)
   197c0:	003caf06 	br	18a80 <__alt_data_end+0xfc018a80>
   197c4:	013fffc4 	movi	r4,-1
   197c8:	003df206 	br	18f94 <__alt_data_end+0xfc018f94>
   197cc:	dd002017 	ldw	r20,128(sp)
   197d0:	00800184 	movi	r2,6
   197d4:	1500012e 	bgeu	r2,r20,197dc <___svfiprintf_internal_r+0x11ec>
   197d8:	1029883a 	mov	r20,r2
   197dc:	a025883a 	mov	r18,r20
   197e0:	a0004116 	blt	r20,zero,198e8 <___svfiprintf_internal_r+0x12f8>
   197e4:	044000f4 	movhi	r17,3
   197e8:	ddc02415 	stw	r23,144(sp)
   197ec:	8c6a5604 	addi	r17,r17,-22184
   197f0:	003ce806 	br	18b94 <__alt_data_end+0xfc018b94>
   197f4:	04001004 	movi	r16,64
   197f8:	800b883a 	mov	r5,r16
   197fc:	000e3500 	call	e350 <_malloc_r>
   19800:	d8c02317 	ldw	r3,140(sp)
   19804:	18800015 	stw	r2,0(r3)
   19808:	18800415 	stw	r2,16(r3)
   1980c:	10004d26 	beq	r2,zero,19944 <___svfiprintf_internal_r+0x1354>
   19810:	d9402317 	ldw	r5,140(sp)
   19814:	2c000515 	stw	r16,20(r5)
   19818:	003b8906 	br	18640 <__alt_data_end+0xfc018640>
   1981c:	d9002417 	ldw	r4,144(sp)
   19820:	d9402617 	ldw	r5,152(sp)
   19824:	20800017 	ldw	r2,0(r4)
   19828:	21000104 	addi	r4,r4,4
   1982c:	d9002415 	stw	r4,144(sp)
   19830:	11400015 	stw	r5,0(r2)
   19834:	003b9006 	br	18678 <__alt_data_end+0xfc018678>
   19838:	8080004c 	andi	r2,r16,1
   1983c:	002b883a 	mov	r21,zero
   19840:	10000526 	beq	r2,zero,19858 <___svfiprintf_internal_r+0x1268>
   19844:	00800c04 	movi	r2,48
   19848:	d88019c5 	stb	r2,103(sp)
   1984c:	dd002c17 	ldw	r20,176(sp)
   19850:	dc4019c4 	addi	r17,sp,103
   19854:	003c8a06 	br	18a80 <__alt_data_end+0xfc018a80>
   19858:	0029883a 	mov	r20,zero
   1985c:	dc401a04 	addi	r17,sp,104
   19860:	003c8706 	br	18a80 <__alt_data_end+0xfc018a80>
   19864:	014000f4 	movhi	r5,3
   19868:	296abd04 	addi	r5,r5,-21772
   1986c:	d9402815 	stw	r5,160(sp)
   19870:	003cff06 	br	18c70 <__alt_data_end+0xfc018c70>
   19874:	00bfffc4 	movi	r2,-1
   19878:	003ea206 	br	19304 <__alt_data_end+0xfc019304>
   1987c:	00800044 	movi	r2,1
   19880:	10803fcc 	andi	r2,r2,255
   19884:	00c00044 	movi	r3,1
   19888:	10fd4526 	beq	r2,r3,18da0 <__alt_data_end+0xfc018da0>
   1988c:	00c00084 	movi	r3,2
   19890:	10fc5226 	beq	r2,r3,189dc <__alt_data_end+0xfc0189dc>
   19894:	003c9c06 	br	18b08 <__alt_data_end+0xfc018b08>
   19898:	1021883a 	mov	r16,r2
   1989c:	002b883a 	mov	r21,zero
   198a0:	00800084 	movi	r2,2
   198a4:	003ff606 	br	19880 <__alt_data_end+0xfc019880>
   198a8:	010000f4 	movhi	r4,3
   198ac:	212abd04 	addi	r4,r4,-21772
   198b0:	d9002815 	stw	r4,160(sp)
   198b4:	003e7206 	br	19280 <__alt_data_end+0xfc019280>
   198b8:	014000f4 	movhi	r5,3
   198bc:	296ab904 	addi	r5,r5,-21788
   198c0:	d9402115 	stw	r5,132(sp)
   198c4:	003ec506 	br	193dc <__alt_data_end+0xfc0193dc>
   198c8:	e027883a 	mov	r19,fp
   198cc:	d8002015 	stw	zero,128(sp)
   198d0:	003b9406 	br	18724 <__alt_data_end+0xfc018724>
   198d4:	dd002017 	ldw	r20,128(sp)
   198d8:	dd401d83 	ldbu	r21,118(sp)
   198dc:	ddc02415 	stw	r23,144(sp)
   198e0:	d8002015 	stw	zero,128(sp)
   198e4:	003c6606 	br	18a80 <__alt_data_end+0xfc018a80>
   198e8:	0025883a 	mov	r18,zero
   198ec:	003fbd06 	br	197e4 <__alt_data_end+0xfc0197e4>
   198f0:	d9402417 	ldw	r5,144(sp)
   198f4:	d8c02417 	ldw	r3,144(sp)
   198f8:	29400017 	ldw	r5,0(r5)
   198fc:	19000104 	addi	r4,r3,4
   19900:	d9002415 	stw	r4,144(sp)
   19904:	d9402015 	stw	r5,128(sp)
   19908:	98c00043 	ldbu	r3,1(r19)
   1990c:	e027883a 	mov	r19,fp
   19910:	283f5b0e 	bge	r5,zero,19680 <__alt_data_end+0xfc019680>
   19914:	18c03fcc 	andi	r3,r3,255
   19918:	013fffc4 	movi	r4,-1
   1991c:	18c0201c 	xori	r3,r3,128
   19920:	d9002015 	stw	r4,128(sp)
   19924:	18ffe004 	addi	r3,r3,-128
   19928:	003b7d06 	br	18720 <__alt_data_end+0xfc018720>
   1992c:	dd401d85 	stb	r21,118(sp)
   19930:	003cf306 	br	18d00 <__alt_data_end+0xfc018d00>
   19934:	dd401d85 	stb	r21,118(sp)
   19938:	003d4e06 	br	18e74 <__alt_data_end+0xfc018e74>
   1993c:	dd401d85 	stb	r21,118(sp)
   19940:	003c0e06 	br	1897c <__alt_data_end+0xfc01897c>
   19944:	d9002717 	ldw	r4,156(sp)
   19948:	00800304 	movi	r2,12
   1994c:	20800015 	stw	r2,0(r4)
   19950:	00bfffc4 	movi	r2,-1
   19954:	003e6b06 	br	19304 <__alt_data_end+0xfc019304>
   19958:	dd401d85 	stb	r21,118(sp)
   1995c:	003d0006 	br	18d60 <__alt_data_end+0xfc018d60>
   19960:	dd401d85 	stb	r21,118(sp)
   19964:	003d7106 	br	18f2c <__alt_data_end+0xfc018f2c>
   19968:	dd401d85 	stb	r21,118(sp)
   1996c:	003c5706 	br	18acc <__alt_data_end+0xfc018acc>
   19970:	dd401d85 	stb	r21,118(sp)
   19974:	003c2e06 	br	18a30 <__alt_data_end+0xfc018a30>
   19978:	dd401d85 	stb	r21,118(sp)
   1997c:	003d8c06 	br	18fb0 <__alt_data_end+0xfc018fb0>
   19980:	dd401d85 	stb	r21,118(sp)
   19984:	003da706 	br	19024 <__alt_data_end+0xfc019024>
   19988:	dd401d85 	stb	r21,118(sp)
   1998c:	003cc806 	br	18cb0 <__alt_data_end+0xfc018cb0>

00019990 <__sprint_r.part.0>:
   19990:	28801917 	ldw	r2,100(r5)
   19994:	defff604 	addi	sp,sp,-40
   19998:	dd400515 	stw	r21,20(sp)
   1999c:	dfc00915 	stw	ra,36(sp)
   199a0:	df000815 	stw	fp,32(sp)
   199a4:	ddc00715 	stw	r23,28(sp)
   199a8:	dd800615 	stw	r22,24(sp)
   199ac:	dd000415 	stw	r20,16(sp)
   199b0:	dcc00315 	stw	r19,12(sp)
   199b4:	dc800215 	stw	r18,8(sp)
   199b8:	dc400115 	stw	r17,4(sp)
   199bc:	dc000015 	stw	r16,0(sp)
   199c0:	1088000c 	andi	r2,r2,8192
   199c4:	302b883a 	mov	r21,r6
   199c8:	10002e26 	beq	r2,zero,19a84 <__sprint_r.part.0+0xf4>
   199cc:	30800217 	ldw	r2,8(r6)
   199d0:	35800017 	ldw	r22,0(r6)
   199d4:	10002926 	beq	r2,zero,19a7c <__sprint_r.part.0+0xec>
   199d8:	2827883a 	mov	r19,r5
   199dc:	2029883a 	mov	r20,r4
   199e0:	b5c00104 	addi	r23,r22,4
   199e4:	04bfffc4 	movi	r18,-1
   199e8:	bc400017 	ldw	r17,0(r23)
   199ec:	b4000017 	ldw	r16,0(r22)
   199f0:	0039883a 	mov	fp,zero
   199f4:	8822d0ba 	srli	r17,r17,2
   199f8:	8800031e 	bne	r17,zero,19a08 <__sprint_r.part.0+0x78>
   199fc:	00001806 	br	19a60 <__sprint_r.part.0+0xd0>
   19a00:	84000104 	addi	r16,r16,4
   19a04:	8f001526 	beq	r17,fp,19a5c <__sprint_r.part.0+0xcc>
   19a08:	81400017 	ldw	r5,0(r16)
   19a0c:	980d883a 	mov	r6,r19
   19a10:	a009883a 	mov	r4,r20
   19a14:	001b5d80 	call	1b5d8 <_fputwc_r>
   19a18:	e7000044 	addi	fp,fp,1
   19a1c:	14bff81e 	bne	r2,r18,19a00 <__alt_data_end+0xfc019a00>
   19a20:	9005883a 	mov	r2,r18
   19a24:	a8000215 	stw	zero,8(r21)
   19a28:	a8000115 	stw	zero,4(r21)
   19a2c:	dfc00917 	ldw	ra,36(sp)
   19a30:	df000817 	ldw	fp,32(sp)
   19a34:	ddc00717 	ldw	r23,28(sp)
   19a38:	dd800617 	ldw	r22,24(sp)
   19a3c:	dd400517 	ldw	r21,20(sp)
   19a40:	dd000417 	ldw	r20,16(sp)
   19a44:	dcc00317 	ldw	r19,12(sp)
   19a48:	dc800217 	ldw	r18,8(sp)
   19a4c:	dc400117 	ldw	r17,4(sp)
   19a50:	dc000017 	ldw	r16,0(sp)
   19a54:	dec00a04 	addi	sp,sp,40
   19a58:	f800283a 	ret
   19a5c:	a8800217 	ldw	r2,8(r21)
   19a60:	8c63883a 	add	r17,r17,r17
   19a64:	8c63883a 	add	r17,r17,r17
   19a68:	1445c83a 	sub	r2,r2,r17
   19a6c:	a8800215 	stw	r2,8(r21)
   19a70:	b5800204 	addi	r22,r22,8
   19a74:	bdc00204 	addi	r23,r23,8
   19a78:	103fdb1e 	bne	r2,zero,199e8 <__alt_data_end+0xfc0199e8>
   19a7c:	0005883a 	mov	r2,zero
   19a80:	003fe806 	br	19a24 <__alt_data_end+0xfc019a24>
   19a84:	0015fc40 	call	15fc4 <__sfvwrite_r>
   19a88:	003fe606 	br	19a24 <__alt_data_end+0xfc019a24>

00019a8c <__sprint_r>:
   19a8c:	30c00217 	ldw	r3,8(r6)
   19a90:	18000126 	beq	r3,zero,19a98 <__sprint_r+0xc>
   19a94:	00199901 	jmpi	19990 <__sprint_r.part.0>
   19a98:	30000115 	stw	zero,4(r6)
   19a9c:	0005883a 	mov	r2,zero
   19aa0:	f800283a 	ret

00019aa4 <___vfiprintf_internal_r>:
   19aa4:	deffca04 	addi	sp,sp,-216
   19aa8:	dd403115 	stw	r21,196(sp)
   19aac:	dfc03515 	stw	ra,212(sp)
   19ab0:	df003415 	stw	fp,208(sp)
   19ab4:	ddc03315 	stw	r23,204(sp)
   19ab8:	dd803215 	stw	r22,200(sp)
   19abc:	dd003015 	stw	r20,192(sp)
   19ac0:	dcc02f15 	stw	r19,188(sp)
   19ac4:	dc802e15 	stw	r18,184(sp)
   19ac8:	dc402d15 	stw	r17,180(sp)
   19acc:	dc002c15 	stw	r16,176(sp)
   19ad0:	d9002115 	stw	r4,132(sp)
   19ad4:	d9402015 	stw	r5,128(sp)
   19ad8:	d9c02215 	stw	r7,136(sp)
   19adc:	302b883a 	mov	r21,r6
   19ae0:	20000226 	beq	r4,zero,19aec <___vfiprintf_internal_r+0x48>
   19ae4:	20800e17 	ldw	r2,56(r4)
   19ae8:	1000cf26 	beq	r2,zero,19e28 <___vfiprintf_internal_r+0x384>
   19aec:	d8c02017 	ldw	r3,128(sp)
   19af0:	1880030b 	ldhu	r2,12(r3)
   19af4:	10c8000c 	andi	r3,r2,8192
   19af8:	1800071e 	bne	r3,zero,19b18 <___vfiprintf_internal_r+0x74>
   19afc:	d9402017 	ldw	r5,128(sp)
   19b00:	00f7ffc4 	movi	r3,-8193
   19b04:	10880014 	ori	r2,r2,8192
   19b08:	29001917 	ldw	r4,100(r5)
   19b0c:	2880030d 	sth	r2,12(r5)
   19b10:	20c6703a 	and	r3,r4,r3
   19b14:	28c01915 	stw	r3,100(r5)
   19b18:	10c0020c 	andi	r3,r2,8
   19b1c:	1800a526 	beq	r3,zero,19db4 <___vfiprintf_internal_r+0x310>
   19b20:	d9002017 	ldw	r4,128(sp)
   19b24:	20c00417 	ldw	r3,16(r4)
   19b28:	1800a226 	beq	r3,zero,19db4 <___vfiprintf_internal_r+0x310>
   19b2c:	1080068c 	andi	r2,r2,26
   19b30:	00c00284 	movi	r3,10
   19b34:	10c0a826 	beq	r2,r3,19dd8 <___vfiprintf_internal_r+0x334>
   19b38:	d9001a04 	addi	r4,sp,104
   19b3c:	d94019c4 	addi	r5,sp,103
   19b40:	048000f4 	movhi	r18,3
   19b44:	2145c83a 	sub	r2,r4,r5
   19b48:	94aac104 	addi	r18,r18,-21756
   19b4c:	d9001e15 	stw	r4,120(sp)
   19b50:	d9401f15 	stw	r5,124(sp)
   19b54:	dec01a15 	stw	sp,104(sp)
   19b58:	d8001c15 	stw	zero,112(sp)
   19b5c:	d8001b15 	stw	zero,108(sp)
   19b60:	d811883a 	mov	r8,sp
   19b64:	d8002615 	stw	zero,152(sp)
   19b68:	d8002415 	stw	zero,144(sp)
   19b6c:	d8802815 	stw	r2,160(sp)
   19b70:	a82d883a 	mov	r22,r21
   19b74:	b0800007 	ldb	r2,0(r22)
   19b78:	10040d26 	beq	r2,zero,1abb0 <___vfiprintf_internal_r+0x110c>
   19b7c:	00c00944 	movi	r3,37
   19b80:	b029883a 	mov	r20,r22
   19b84:	10c0021e 	bne	r2,r3,19b90 <___vfiprintf_internal_r+0xec>
   19b88:	00001606 	br	19be4 <___vfiprintf_internal_r+0x140>
   19b8c:	10c00326 	beq	r2,r3,19b9c <___vfiprintf_internal_r+0xf8>
   19b90:	a5000044 	addi	r20,r20,1
   19b94:	a0800007 	ldb	r2,0(r20)
   19b98:	103ffc1e 	bne	r2,zero,19b8c <__alt_data_end+0xfc019b8c>
   19b9c:	a5a1c83a 	sub	r16,r20,r22
   19ba0:	80001026 	beq	r16,zero,19be4 <___vfiprintf_internal_r+0x140>
   19ba4:	d8c01c17 	ldw	r3,112(sp)
   19ba8:	d8801b17 	ldw	r2,108(sp)
   19bac:	45800015 	stw	r22,0(r8)
   19bb0:	80c7883a 	add	r3,r16,r3
   19bb4:	10800044 	addi	r2,r2,1
   19bb8:	44000115 	stw	r16,4(r8)
   19bbc:	d8c01c15 	stw	r3,112(sp)
   19bc0:	d8801b15 	stw	r2,108(sp)
   19bc4:	010001c4 	movi	r4,7
   19bc8:	2080750e 	bge	r4,r2,19da0 <___vfiprintf_internal_r+0x2fc>
   19bcc:	1803951e 	bne	r3,zero,1aa24 <___vfiprintf_internal_r+0xf80>
   19bd0:	d8c02417 	ldw	r3,144(sp)
   19bd4:	d8001b15 	stw	zero,108(sp)
   19bd8:	d811883a 	mov	r8,sp
   19bdc:	1c07883a 	add	r3,r3,r16
   19be0:	d8c02415 	stw	r3,144(sp)
   19be4:	a0800007 	ldb	r2,0(r20)
   19be8:	1002e026 	beq	r2,zero,1a76c <___vfiprintf_internal_r+0xcc8>
   19bec:	a5800044 	addi	r22,r20,1
   19bf0:	a0c00047 	ldb	r3,1(r20)
   19bf4:	d8001d85 	stb	zero,118(sp)
   19bf8:	0027883a 	mov	r19,zero
   19bfc:	d8002305 	stb	zero,140(sp)
   19c00:	043fffc4 	movi	r16,-1
   19c04:	d8002515 	stw	zero,148(sp)
   19c08:	0023883a 	mov	r17,zero
   19c0c:	05001604 	movi	r20,88
   19c10:	05400244 	movi	r21,9
   19c14:	402f883a 	mov	r23,r8
   19c18:	b5800044 	addi	r22,r22,1
   19c1c:	18bff804 	addi	r2,r3,-32
   19c20:	a0827736 	bltu	r20,r2,1a600 <___vfiprintf_internal_r+0xb5c>
   19c24:	100490ba 	slli	r2,r2,2
   19c28:	010000b4 	movhi	r4,2
   19c2c:	21270f04 	addi	r4,r4,-25540
   19c30:	1105883a 	add	r2,r2,r4
   19c34:	10800017 	ldw	r2,0(r2)
   19c38:	1000683a 	jmp	r2
   19c3c:	0001a300 	call	1a30 <_ZN3USB4TaskEv+0x214>
   19c40:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c44:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c48:	0001a31c 	xori	zero,zero,1676
   19c4c:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c50:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c54:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c58:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c5c:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c60:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c64:	0001a524 	muli	zero,zero,1684
   19c68:	0001a548 	cmpgei	zero,zero,1685
   19c6c:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c70:	00019e40 	call	19e4 <_ZN3USB4TaskEv+0x1c8>
   19c74:	0001a55c 	xori	zero,zero,1685
   19c78:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19c7c:	0001a328 	cmpgeui	zero,zero,1676
   19c80:	0001a334 	movhi	zero,1676
   19c84:	0001a334 	movhi	zero,1676
   19c88:	0001a334 	movhi	zero,1676
   19c8c:	0001a334 	movhi	zero,1676
   19c90:	0001a334 	movhi	zero,1676
   19c94:	0001a334 	movhi	zero,1676
   19c98:	0001a334 	movhi	zero,1676
   19c9c:	0001a334 	movhi	zero,1676
   19ca0:	0001a334 	movhi	zero,1676
   19ca4:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19ca8:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cac:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cb0:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cb4:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cb8:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cbc:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cc0:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cc4:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cc8:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19ccc:	0001a374 	movhi	zero,1677
   19cd0:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cd4:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cd8:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cdc:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19ce0:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19ce4:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19ce8:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cec:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cf0:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cf4:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19cf8:	0001a3b0 	cmpltui	zero,zero,1678
   19cfc:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d00:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d04:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d08:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d0c:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d10:	0001a40c 	andi	zero,zero,1680
   19d14:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d18:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d1c:	0001a480 	call	1a48 <_ZN3USB4TaskEv+0x22c>
   19d20:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d24:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d28:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d2c:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d30:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d34:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d38:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d3c:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d40:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d44:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d48:	0001a228 	cmpgeui	zero,zero,1672
   19d4c:	0001a258 	cmpnei	zero,zero,1673
   19d50:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d54:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d58:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d5c:	0001a5a8 	cmpgeui	zero,zero,1686
   19d60:	0001a258 	cmpnei	zero,zero,1673
   19d64:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d68:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d6c:	0001a100 	call	1a10 <_ZN3USB4TaskEv+0x1f4>
   19d70:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d74:	0001a114 	movui	zero,1668
   19d78:	0001a14c 	andi	zero,zero,1669
   19d7c:	00019e4c 	andi	zero,zero,1657
   19d80:	0001a0f4 	movhi	zero,1667
   19d84:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d88:	0001a4c0 	call	1a4c <_ZN3USB4TaskEv+0x230>
   19d8c:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d90:	0001a50c 	andi	zero,zero,1684
   19d94:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d98:	0001a600 	call	1a60 <_ZN3USB4TaskEv+0x244>
   19d9c:	0001a1d0 	cmplti	zero,zero,1671
   19da0:	42000204 	addi	r8,r8,8
   19da4:	d8c02417 	ldw	r3,144(sp)
   19da8:	1c07883a 	add	r3,r3,r16
   19dac:	d8c02415 	stw	r3,144(sp)
   19db0:	003f8c06 	br	19be4 <__alt_data_end+0xfc019be4>
   19db4:	d9402017 	ldw	r5,128(sp)
   19db8:	d9002117 	ldw	r4,132(sp)
   19dbc:	0013b340 	call	13b34 <__swsetup_r>
   19dc0:	1003c11e 	bne	r2,zero,1acc8 <___vfiprintf_internal_r+0x1224>
   19dc4:	d9402017 	ldw	r5,128(sp)
   19dc8:	00c00284 	movi	r3,10
   19dcc:	2880030b 	ldhu	r2,12(r5)
   19dd0:	1080068c 	andi	r2,r2,26
   19dd4:	10ff581e 	bne	r2,r3,19b38 <__alt_data_end+0xfc019b38>
   19dd8:	d8c02017 	ldw	r3,128(sp)
   19ddc:	1880038f 	ldh	r2,14(r3)
   19de0:	103f5516 	blt	r2,zero,19b38 <__alt_data_end+0xfc019b38>
   19de4:	d9c02217 	ldw	r7,136(sp)
   19de8:	d9002117 	ldw	r4,132(sp)
   19dec:	a80d883a 	mov	r6,r21
   19df0:	180b883a 	mov	r5,r3
   19df4:	001afcc0 	call	1afcc <__sbprintf>
   19df8:	dfc03517 	ldw	ra,212(sp)
   19dfc:	df003417 	ldw	fp,208(sp)
   19e00:	ddc03317 	ldw	r23,204(sp)
   19e04:	dd803217 	ldw	r22,200(sp)
   19e08:	dd403117 	ldw	r21,196(sp)
   19e0c:	dd003017 	ldw	r20,192(sp)
   19e10:	dcc02f17 	ldw	r19,188(sp)
   19e14:	dc802e17 	ldw	r18,184(sp)
   19e18:	dc402d17 	ldw	r17,180(sp)
   19e1c:	dc002c17 	ldw	r16,176(sp)
   19e20:	dec03604 	addi	sp,sp,216
   19e24:	f800283a 	ret
   19e28:	0015b400 	call	15b40 <__sinit>
   19e2c:	003f2f06 	br	19aec <__alt_data_end+0xfc019aec>
   19e30:	d8c02517 	ldw	r3,148(sp)
   19e34:	d8802215 	stw	r2,136(sp)
   19e38:	00c7c83a 	sub	r3,zero,r3
   19e3c:	d8c02515 	stw	r3,148(sp)
   19e40:	8c400114 	ori	r17,r17,4
   19e44:	b0c00007 	ldb	r3,0(r22)
   19e48:	003f7306 	br	19c18 <__alt_data_end+0xfc019c18>
   19e4c:	00800c04 	movi	r2,48
   19e50:	d9402217 	ldw	r5,136(sp)
   19e54:	d8801d05 	stb	r2,116(sp)
   19e58:	00801e04 	movi	r2,120
   19e5c:	d8801d45 	stb	r2,117(sp)
   19e60:	d8001d85 	stb	zero,118(sp)
   19e64:	b811883a 	mov	r8,r23
   19e68:	28c00104 	addi	r3,r5,4
   19e6c:	2cc00017 	ldw	r19,0(r5)
   19e70:	0029883a 	mov	r20,zero
   19e74:	88800094 	ori	r2,r17,2
   19e78:	80032516 	blt	r16,zero,1ab10 <___vfiprintf_internal_r+0x106c>
   19e7c:	00bfdfc4 	movi	r2,-129
   19e80:	88a2703a 	and	r17,r17,r2
   19e84:	d8c02215 	stw	r3,136(sp)
   19e88:	8c400094 	ori	r17,r17,2
   19e8c:	98032a1e 	bne	r19,zero,1ab38 <___vfiprintf_internal_r+0x1094>
   19e90:	008000f4 	movhi	r2,3
   19e94:	10aa5104 	addi	r2,r2,-22204
   19e98:	d8802615 	stw	r2,152(sp)
   19e9c:	002b883a 	mov	r21,zero
   19ea0:	8001741e 	bne	r16,zero,1a474 <___vfiprintf_internal_r+0x9d0>
   19ea4:	0021883a 	mov	r16,zero
   19ea8:	0029883a 	mov	r20,zero
   19eac:	ddc01a04 	addi	r23,sp,104
   19eb0:	8027883a 	mov	r19,r16
   19eb4:	8500010e 	bge	r16,r20,19ebc <___vfiprintf_internal_r+0x418>
   19eb8:	a027883a 	mov	r19,r20
   19ebc:	ad403fcc 	andi	r21,r21,255
   19ec0:	ad40201c 	xori	r21,r21,128
   19ec4:	ad7fe004 	addi	r21,r21,-128
   19ec8:	a8000126 	beq	r21,zero,19ed0 <___vfiprintf_internal_r+0x42c>
   19ecc:	9cc00044 	addi	r19,r19,1
   19ed0:	89c0008c 	andi	r7,r17,2
   19ed4:	38000126 	beq	r7,zero,19edc <___vfiprintf_internal_r+0x438>
   19ed8:	9cc00084 	addi	r19,r19,2
   19edc:	88c0210c 	andi	r3,r17,132
   19ee0:	1801dd1e 	bne	r3,zero,1a658 <___vfiprintf_internal_r+0xbb4>
   19ee4:	d9402517 	ldw	r5,148(sp)
   19ee8:	2cebc83a 	sub	r21,r5,r19
   19eec:	0541da0e 	bge	zero,r21,1a658 <___vfiprintf_internal_r+0xbb4>
   19ef0:	07000404 	movi	fp,16
   19ef4:	d8801c17 	ldw	r2,112(sp)
   19ef8:	e543be0e 	bge	fp,r21,1adf4 <___vfiprintf_internal_r+0x1350>
   19efc:	014000f4 	movhi	r5,3
   19f00:	296ac504 	addi	r5,r5,-21740
   19f04:	dc002715 	stw	r16,156(sp)
   19f08:	d9801b17 	ldw	r6,108(sp)
   19f0c:	a821883a 	mov	r16,r21
   19f10:	d9402315 	stw	r5,140(sp)
   19f14:	028001c4 	movi	r10,7
   19f18:	d9c02915 	stw	r7,164(sp)
   19f1c:	182b883a 	mov	r21,r3
   19f20:	00000506 	br	19f38 <___vfiprintf_internal_r+0x494>
   19f24:	31000084 	addi	r4,r6,2
   19f28:	42000204 	addi	r8,r8,8
   19f2c:	180d883a 	mov	r6,r3
   19f30:	843ffc04 	addi	r16,r16,-16
   19f34:	e4000f0e 	bge	fp,r16,19f74 <___vfiprintf_internal_r+0x4d0>
   19f38:	010000f4 	movhi	r4,3
   19f3c:	10800404 	addi	r2,r2,16
   19f40:	30c00044 	addi	r3,r6,1
   19f44:	212ac504 	addi	r4,r4,-21740
   19f48:	41000015 	stw	r4,0(r8)
   19f4c:	47000115 	stw	fp,4(r8)
   19f50:	d8801c15 	stw	r2,112(sp)
   19f54:	d8c01b15 	stw	r3,108(sp)
   19f58:	50fff20e 	bge	r10,r3,19f24 <__alt_data_end+0xfc019f24>
   19f5c:	1001b21e 	bne	r2,zero,1a628 <___vfiprintf_internal_r+0xb84>
   19f60:	843ffc04 	addi	r16,r16,-16
   19f64:	000d883a 	mov	r6,zero
   19f68:	01000044 	movi	r4,1
   19f6c:	d811883a 	mov	r8,sp
   19f70:	e43ff116 	blt	fp,r16,19f38 <__alt_data_end+0xfc019f38>
   19f74:	a807883a 	mov	r3,r21
   19f78:	d9c02917 	ldw	r7,164(sp)
   19f7c:	802b883a 	mov	r21,r16
   19f80:	dc002717 	ldw	r16,156(sp)
   19f84:	d9402317 	ldw	r5,140(sp)
   19f88:	a885883a 	add	r2,r21,r2
   19f8c:	45400115 	stw	r21,4(r8)
   19f90:	41400015 	stw	r5,0(r8)
   19f94:	d8801c15 	stw	r2,112(sp)
   19f98:	d9001b15 	stw	r4,108(sp)
   19f9c:	014001c4 	movi	r5,7
   19fa0:	29026216 	blt	r5,r4,1a92c <___vfiprintf_internal_r+0xe88>
   19fa4:	d9801d87 	ldb	r6,118(sp)
   19fa8:	42000204 	addi	r8,r8,8
   19fac:	21400044 	addi	r5,r4,1
   19fb0:	3001ae1e 	bne	r6,zero,1a66c <___vfiprintf_internal_r+0xbc8>
   19fb4:	3801bb26 	beq	r7,zero,1a6a4 <___vfiprintf_internal_r+0xc00>
   19fb8:	d9001d04 	addi	r4,sp,116
   19fbc:	10800084 	addi	r2,r2,2
   19fc0:	41000015 	stw	r4,0(r8)
   19fc4:	01000084 	movi	r4,2
   19fc8:	41000115 	stw	r4,4(r8)
   19fcc:	d8801c15 	stw	r2,112(sp)
   19fd0:	d9401b15 	stw	r5,108(sp)
   19fd4:	010001c4 	movi	r4,7
   19fd8:	2142680e 	bge	r4,r5,1a97c <___vfiprintf_internal_r+0xed8>
   19fdc:	1002b11e 	bne	r2,zero,1aaa4 <___vfiprintf_internal_r+0x1000>
   19fe0:	01802004 	movi	r6,128
   19fe4:	01400044 	movi	r5,1
   19fe8:	0009883a 	mov	r4,zero
   19fec:	d811883a 	mov	r8,sp
   19ff0:	1981ae1e 	bne	r3,r6,1a6ac <___vfiprintf_internal_r+0xc08>
   19ff4:	d8c02517 	ldw	r3,148(sp)
   19ff8:	1cf9c83a 	sub	fp,r3,r19
   19ffc:	0701ab0e 	bge	zero,fp,1a6ac <___vfiprintf_internal_r+0xc08>
   1a000:	05400404 	movi	r21,16
   1a004:	af03a90e 	bge	r21,fp,1aeac <___vfiprintf_internal_r+0x1408>
   1a008:	014000f4 	movhi	r5,3
   1a00c:	296ac104 	addi	r5,r5,-21756
   1a010:	d9402315 	stw	r5,140(sp)
   1a014:	01c001c4 	movi	r7,7
   1a018:	00000506 	br	1a030 <___vfiprintf_internal_r+0x58c>
   1a01c:	21800084 	addi	r6,r4,2
   1a020:	42000204 	addi	r8,r8,8
   1a024:	1809883a 	mov	r4,r3
   1a028:	e73ffc04 	addi	fp,fp,-16
   1a02c:	af000d0e 	bge	r21,fp,1a064 <___vfiprintf_internal_r+0x5c0>
   1a030:	10800404 	addi	r2,r2,16
   1a034:	20c00044 	addi	r3,r4,1
   1a038:	44800015 	stw	r18,0(r8)
   1a03c:	45400115 	stw	r21,4(r8)
   1a040:	d8801c15 	stw	r2,112(sp)
   1a044:	d8c01b15 	stw	r3,108(sp)
   1a048:	38fff40e 	bge	r7,r3,1a01c <__alt_data_end+0xfc01a01c>
   1a04c:	10022b1e 	bne	r2,zero,1a8fc <___vfiprintf_internal_r+0xe58>
   1a050:	e73ffc04 	addi	fp,fp,-16
   1a054:	01800044 	movi	r6,1
   1a058:	0009883a 	mov	r4,zero
   1a05c:	d811883a 	mov	r8,sp
   1a060:	af3ff316 	blt	r21,fp,1a030 <__alt_data_end+0xfc01a030>
   1a064:	d8c02317 	ldw	r3,140(sp)
   1a068:	1705883a 	add	r2,r2,fp
   1a06c:	47000115 	stw	fp,4(r8)
   1a070:	40c00015 	stw	r3,0(r8)
   1a074:	d8801c15 	stw	r2,112(sp)
   1a078:	d9801b15 	stw	r6,108(sp)
   1a07c:	00c001c4 	movi	r3,7
   1a080:	19829416 	blt	r3,r6,1aad4 <___vfiprintf_internal_r+0x1030>
   1a084:	8521c83a 	sub	r16,r16,r20
   1a088:	42000204 	addi	r8,r8,8
   1a08c:	31400044 	addi	r5,r6,1
   1a090:	3009883a 	mov	r4,r6
   1a094:	04018716 	blt	zero,r16,1a6b4 <___vfiprintf_internal_r+0xc10>
   1a098:	a085883a 	add	r2,r20,r2
   1a09c:	45c00015 	stw	r23,0(r8)
   1a0a0:	45000115 	stw	r20,4(r8)
   1a0a4:	d8801c15 	stw	r2,112(sp)
   1a0a8:	d9401b15 	stw	r5,108(sp)
   1a0ac:	00c001c4 	movi	r3,7
   1a0b0:	1941c20e 	bge	r3,r5,1a7bc <___vfiprintf_internal_r+0xd18>
   1a0b4:	1002531e 	bne	r2,zero,1aa04 <___vfiprintf_internal_r+0xf60>
   1a0b8:	d8001b15 	stw	zero,108(sp)
   1a0bc:	8c40010c 	andi	r17,r17,4
   1a0c0:	88023226 	beq	r17,zero,1a98c <___vfiprintf_internal_r+0xee8>
   1a0c4:	d9002517 	ldw	r4,148(sp)
   1a0c8:	24e3c83a 	sub	r17,r4,r19
   1a0cc:	04432916 	blt	zero,r17,1ad74 <___vfiprintf_internal_r+0x12d0>
   1a0d0:	d8802517 	ldw	r2,148(sp)
   1a0d4:	14c0010e 	bge	r2,r19,1a0dc <___vfiprintf_internal_r+0x638>
   1a0d8:	9805883a 	mov	r2,r19
   1a0dc:	d8c02417 	ldw	r3,144(sp)
   1a0e0:	1887883a 	add	r3,r3,r2
   1a0e4:	d8c02415 	stw	r3,144(sp)
   1a0e8:	d8001b15 	stw	zero,108(sp)
   1a0ec:	d811883a 	mov	r8,sp
   1a0f0:	003ea006 	br	19b74 <__alt_data_end+0xfc019b74>
   1a0f4:	8c400814 	ori	r17,r17,32
   1a0f8:	b0c00007 	ldb	r3,0(r22)
   1a0fc:	003ec606 	br	19c18 <__alt_data_end+0xfc019c18>
   1a100:	b0c00007 	ldb	r3,0(r22)
   1a104:	00801b04 	movi	r2,108
   1a108:	18832026 	beq	r3,r2,1ad8c <___vfiprintf_internal_r+0x12e8>
   1a10c:	8c400414 	ori	r17,r17,16
   1a110:	003ec106 	br	19c18 <__alt_data_end+0xfc019c18>
   1a114:	9cc03fcc 	andi	r19,r19,255
   1a118:	b811883a 	mov	r8,r23
   1a11c:	9803981e 	bne	r19,zero,1af80 <___vfiprintf_internal_r+0x14dc>
   1a120:	8880080c 	andi	r2,r17,32
   1a124:	1002be26 	beq	r2,zero,1ac20 <___vfiprintf_internal_r+0x117c>
   1a128:	d9002217 	ldw	r4,136(sp)
   1a12c:	d9402417 	ldw	r5,144(sp)
   1a130:	20800017 	ldw	r2,0(r4)
   1a134:	2807d7fa 	srai	r3,r5,31
   1a138:	21000104 	addi	r4,r4,4
   1a13c:	d9002215 	stw	r4,136(sp)
   1a140:	11400015 	stw	r5,0(r2)
   1a144:	10c00115 	stw	r3,4(r2)
   1a148:	003e8a06 	br	19b74 <__alt_data_end+0xfc019b74>
   1a14c:	9cc03fcc 	andi	r19,r19,255
   1a150:	b811883a 	mov	r8,r23
   1a154:	9803871e 	bne	r19,zero,1af74 <___vfiprintf_internal_r+0x14d0>
   1a158:	8880080c 	andi	r2,r17,32
   1a15c:	10009a26 	beq	r2,zero,1a3c8 <___vfiprintf_internal_r+0x924>
   1a160:	d9002217 	ldw	r4,136(sp)
   1a164:	d8001d85 	stb	zero,118(sp)
   1a168:	20800204 	addi	r2,r4,8
   1a16c:	24c00017 	ldw	r19,0(r4)
   1a170:	25000117 	ldw	r20,4(r4)
   1a174:	8002a416 	blt	r16,zero,1ac08 <___vfiprintf_internal_r+0x1164>
   1a178:	013fdfc4 	movi	r4,-129
   1a17c:	9d06b03a 	or	r3,r19,r20
   1a180:	d8802215 	stw	r2,136(sp)
   1a184:	8922703a 	and	r17,r17,r4
   1a188:	18009b26 	beq	r3,zero,1a3f8 <___vfiprintf_internal_r+0x954>
   1a18c:	002b883a 	mov	r21,zero
   1a190:	ddc01a04 	addi	r23,sp,104
   1a194:	9806d0fa 	srli	r3,r19,3
   1a198:	a008977a 	slli	r4,r20,29
   1a19c:	a028d0fa 	srli	r20,r20,3
   1a1a0:	9cc001cc 	andi	r19,r19,7
   1a1a4:	98800c04 	addi	r2,r19,48
   1a1a8:	bdffffc4 	addi	r23,r23,-1
   1a1ac:	20e6b03a 	or	r19,r4,r3
   1a1b0:	b8800005 	stb	r2,0(r23)
   1a1b4:	9d06b03a 	or	r3,r19,r20
   1a1b8:	183ff61e 	bne	r3,zero,1a194 <__alt_data_end+0xfc01a194>
   1a1bc:	88c0004c 	andi	r3,r17,1
   1a1c0:	18021f1e 	bne	r3,zero,1aa40 <___vfiprintf_internal_r+0xf9c>
   1a1c4:	d9401e17 	ldw	r5,120(sp)
   1a1c8:	2de9c83a 	sub	r20,r5,r23
   1a1cc:	003f3806 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1a1d0:	9cc03fcc 	andi	r19,r19,255
   1a1d4:	b811883a 	mov	r8,r23
   1a1d8:	98034f1e 	bne	r19,zero,1af18 <___vfiprintf_internal_r+0x1474>
   1a1dc:	008000f4 	movhi	r2,3
   1a1e0:	10aa5104 	addi	r2,r2,-22204
   1a1e4:	d8802615 	stw	r2,152(sp)
   1a1e8:	8880080c 	andi	r2,r17,32
   1a1ec:	1000ac26 	beq	r2,zero,1a4a0 <___vfiprintf_internal_r+0x9fc>
   1a1f0:	d9002217 	ldw	r4,136(sp)
   1a1f4:	24c00017 	ldw	r19,0(r4)
   1a1f8:	25000117 	ldw	r20,4(r4)
   1a1fc:	21000204 	addi	r4,r4,8
   1a200:	d9002215 	stw	r4,136(sp)
   1a204:	8880004c 	andi	r2,r17,1
   1a208:	1001e726 	beq	r2,zero,1a9a8 <___vfiprintf_internal_r+0xf04>
   1a20c:	9d04b03a 	or	r2,r19,r20
   1a210:	10025c1e 	bne	r2,zero,1ab84 <___vfiprintf_internal_r+0x10e0>
   1a214:	d8001d85 	stb	zero,118(sp)
   1a218:	80024416 	blt	r16,zero,1ab2c <___vfiprintf_internal_r+0x1088>
   1a21c:	00bfdfc4 	movi	r2,-129
   1a220:	88a2703a 	and	r17,r17,r2
   1a224:	003f1d06 	br	19e9c <__alt_data_end+0xfc019e9c>
   1a228:	d8c02217 	ldw	r3,136(sp)
   1a22c:	04c00044 	movi	r19,1
   1a230:	b811883a 	mov	r8,r23
   1a234:	18800017 	ldw	r2,0(r3)
   1a238:	18c00104 	addi	r3,r3,4
   1a23c:	d8001d85 	stb	zero,118(sp)
   1a240:	d8801005 	stb	r2,64(sp)
   1a244:	d8c02215 	stw	r3,136(sp)
   1a248:	9829883a 	mov	r20,r19
   1a24c:	ddc01004 	addi	r23,sp,64
   1a250:	0021883a 	mov	r16,zero
   1a254:	003f1e06 	br	19ed0 <__alt_data_end+0xfc019ed0>
   1a258:	9cc03fcc 	andi	r19,r19,255
   1a25c:	b811883a 	mov	r8,r23
   1a260:	9803331e 	bne	r19,zero,1af30 <___vfiprintf_internal_r+0x148c>
   1a264:	8880080c 	andi	r2,r17,32
   1a268:	10004826 	beq	r2,zero,1a38c <___vfiprintf_internal_r+0x8e8>
   1a26c:	d9002217 	ldw	r4,136(sp)
   1a270:	20800117 	ldw	r2,4(r4)
   1a274:	24c00017 	ldw	r19,0(r4)
   1a278:	21000204 	addi	r4,r4,8
   1a27c:	d9002215 	stw	r4,136(sp)
   1a280:	1029883a 	mov	r20,r2
   1a284:	10024c16 	blt	r2,zero,1abb8 <___vfiprintf_internal_r+0x1114>
   1a288:	dd401d83 	ldbu	r21,118(sp)
   1a28c:	80007116 	blt	r16,zero,1a454 <___vfiprintf_internal_r+0x9b0>
   1a290:	00ffdfc4 	movi	r3,-129
   1a294:	9d04b03a 	or	r2,r19,r20
   1a298:	88e2703a 	and	r17,r17,r3
   1a29c:	1000d126 	beq	r2,zero,1a5e4 <___vfiprintf_internal_r+0xb40>
   1a2a0:	a0023526 	beq	r20,zero,1ab78 <___vfiprintf_internal_r+0x10d4>
   1a2a4:	ddc01a04 	addi	r23,sp,104
   1a2a8:	4039883a 	mov	fp,r8
   1a2ac:	9809883a 	mov	r4,r19
   1a2b0:	a00b883a 	mov	r5,r20
   1a2b4:	01800284 	movi	r6,10
   1a2b8:	000f883a 	mov	r7,zero
   1a2bc:	001bfd00 	call	1bfd0 <__umoddi3>
   1a2c0:	10800c04 	addi	r2,r2,48
   1a2c4:	bdffffc4 	addi	r23,r23,-1
   1a2c8:	9809883a 	mov	r4,r19
   1a2cc:	a00b883a 	mov	r5,r20
   1a2d0:	b8800005 	stb	r2,0(r23)
   1a2d4:	01800284 	movi	r6,10
   1a2d8:	000f883a 	mov	r7,zero
   1a2dc:	001b9d40 	call	1b9d4 <__udivdi3>
   1a2e0:	1027883a 	mov	r19,r2
   1a2e4:	10c4b03a 	or	r2,r2,r3
   1a2e8:	1829883a 	mov	r20,r3
   1a2ec:	103fef1e 	bne	r2,zero,1a2ac <__alt_data_end+0xfc01a2ac>
   1a2f0:	d9001e17 	ldw	r4,120(sp)
   1a2f4:	e011883a 	mov	r8,fp
   1a2f8:	25e9c83a 	sub	r20,r4,r23
   1a2fc:	003eec06 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1a300:	d8802307 	ldb	r2,140(sp)
   1a304:	1002361e 	bne	r2,zero,1abe0 <___vfiprintf_internal_r+0x113c>
   1a308:	00c00804 	movi	r3,32
   1a30c:	d8c02305 	stb	r3,140(sp)
   1a310:	04c00044 	movi	r19,1
   1a314:	b0c00007 	ldb	r3,0(r22)
   1a318:	003e3f06 	br	19c18 <__alt_data_end+0xfc019c18>
   1a31c:	8c400054 	ori	r17,r17,1
   1a320:	b0c00007 	ldb	r3,0(r22)
   1a324:	003e3c06 	br	19c18 <__alt_data_end+0xfc019c18>
   1a328:	8c402014 	ori	r17,r17,128
   1a32c:	b0c00007 	ldb	r3,0(r22)
   1a330:	003e3906 	br	19c18 <__alt_data_end+0xfc019c18>
   1a334:	dc002715 	stw	r16,156(sp)
   1a338:	d8002515 	stw	zero,148(sp)
   1a33c:	1f3ff404 	addi	fp,r3,-48
   1a340:	0009883a 	mov	r4,zero
   1a344:	b021883a 	mov	r16,r22
   1a348:	01400284 	movi	r5,10
   1a34c:	000cda80 	call	cda8 <__mulsi3>
   1a350:	80c00007 	ldb	r3,0(r16)
   1a354:	e089883a 	add	r4,fp,r2
   1a358:	b5800044 	addi	r22,r22,1
   1a35c:	1f3ff404 	addi	fp,r3,-48
   1a360:	b021883a 	mov	r16,r22
   1a364:	af3ff82e 	bgeu	r21,fp,1a348 <__alt_data_end+0xfc01a348>
   1a368:	d9002515 	stw	r4,148(sp)
   1a36c:	dc002717 	ldw	r16,156(sp)
   1a370:	003e2a06 	br	19c1c <__alt_data_end+0xfc019c1c>
   1a374:	9cc03fcc 	andi	r19,r19,255
   1a378:	b811883a 	mov	r8,r23
   1a37c:	9802e91e 	bne	r19,zero,1af24 <___vfiprintf_internal_r+0x1480>
   1a380:	8c400414 	ori	r17,r17,16
   1a384:	8880080c 	andi	r2,r17,32
   1a388:	103fb81e 	bne	r2,zero,1a26c <__alt_data_end+0xfc01a26c>
   1a38c:	8880040c 	andi	r2,r17,16
   1a390:	10022e26 	beq	r2,zero,1ac4c <___vfiprintf_internal_r+0x11a8>
   1a394:	d9402217 	ldw	r5,136(sp)
   1a398:	2cc00017 	ldw	r19,0(r5)
   1a39c:	29400104 	addi	r5,r5,4
   1a3a0:	d9402215 	stw	r5,136(sp)
   1a3a4:	9829d7fa 	srai	r20,r19,31
   1a3a8:	a005883a 	mov	r2,r20
   1a3ac:	003fb506 	br	1a284 <__alt_data_end+0xfc01a284>
   1a3b0:	9cc03fcc 	andi	r19,r19,255
   1a3b4:	b811883a 	mov	r8,r23
   1a3b8:	9802fa1e 	bne	r19,zero,1afa4 <___vfiprintf_internal_r+0x1500>
   1a3bc:	8c400414 	ori	r17,r17,16
   1a3c0:	8880080c 	andi	r2,r17,32
   1a3c4:	103f661e 	bne	r2,zero,1a160 <__alt_data_end+0xfc01a160>
   1a3c8:	8880040c 	andi	r2,r17,16
   1a3cc:	10020626 	beq	r2,zero,1abe8 <___vfiprintf_internal_r+0x1144>
   1a3d0:	d9402217 	ldw	r5,136(sp)
   1a3d4:	d8001d85 	stb	zero,118(sp)
   1a3d8:	0029883a 	mov	r20,zero
   1a3dc:	28800104 	addi	r2,r5,4
   1a3e0:	2cc00017 	ldw	r19,0(r5)
   1a3e4:	80020816 	blt	r16,zero,1ac08 <___vfiprintf_internal_r+0x1164>
   1a3e8:	00ffdfc4 	movi	r3,-129
   1a3ec:	d8802215 	stw	r2,136(sp)
   1a3f0:	88e2703a 	and	r17,r17,r3
   1a3f4:	983f651e 	bne	r19,zero,1a18c <__alt_data_end+0xfc01a18c>
   1a3f8:	002b883a 	mov	r21,zero
   1a3fc:	8002cf26 	beq	r16,zero,1af3c <___vfiprintf_internal_r+0x1498>
   1a400:	0027883a 	mov	r19,zero
   1a404:	0029883a 	mov	r20,zero
   1a408:	003f6106 	br	1a190 <__alt_data_end+0xfc01a190>
   1a40c:	9cc03fcc 	andi	r19,r19,255
   1a410:	b811883a 	mov	r8,r23
   1a414:	9802e01e 	bne	r19,zero,1af98 <___vfiprintf_internal_r+0x14f4>
   1a418:	8c400414 	ori	r17,r17,16
   1a41c:	8880080c 	andi	r2,r17,32
   1a420:	1000641e 	bne	r2,zero,1a5b4 <___vfiprintf_internal_r+0xb10>
   1a424:	8880040c 	andi	r2,r17,16
   1a428:	1001c81e 	bne	r2,zero,1ab4c <___vfiprintf_internal_r+0x10a8>
   1a42c:	8880100c 	andi	r2,r17,64
   1a430:	d8001d85 	stb	zero,118(sp)
   1a434:	1002281e 	bne	r2,zero,1acd8 <___vfiprintf_internal_r+0x1234>
   1a438:	d9002217 	ldw	r4,136(sp)
   1a43c:	0029883a 	mov	r20,zero
   1a440:	20800104 	addi	r2,r4,4
   1a444:	24c00017 	ldw	r19,0(r4)
   1a448:	8001c60e 	bge	r16,zero,1ab64 <___vfiprintf_internal_r+0x10c0>
   1a44c:	d8802215 	stw	r2,136(sp)
   1a450:	002b883a 	mov	r21,zero
   1a454:	9d04b03a 	or	r2,r19,r20
   1a458:	103f911e 	bne	r2,zero,1a2a0 <__alt_data_end+0xfc01a2a0>
   1a45c:	00800044 	movi	r2,1
   1a460:	10803fcc 	andi	r2,r2,255
   1a464:	00c00044 	movi	r3,1
   1a468:	10c05f26 	beq	r2,r3,1a5e8 <___vfiprintf_internal_r+0xb44>
   1a46c:	00c00084 	movi	r3,2
   1a470:	10ffe31e 	bne	r2,r3,1a400 <__alt_data_end+0xfc01a400>
   1a474:	0027883a 	mov	r19,zero
   1a478:	0029883a 	mov	r20,zero
   1a47c:	00015106 	br	1a9c4 <___vfiprintf_internal_r+0xf20>
   1a480:	9cc03fcc 	andi	r19,r19,255
   1a484:	b811883a 	mov	r8,r23
   1a488:	9802c01e 	bne	r19,zero,1af8c <___vfiprintf_internal_r+0x14e8>
   1a48c:	014000f4 	movhi	r5,3
   1a490:	296a4c04 	addi	r5,r5,-22224
   1a494:	d9402615 	stw	r5,152(sp)
   1a498:	8880080c 	andi	r2,r17,32
   1a49c:	103f541e 	bne	r2,zero,1a1f0 <__alt_data_end+0xfc01a1f0>
   1a4a0:	8880040c 	andi	r2,r17,16
   1a4a4:	1001f226 	beq	r2,zero,1ac70 <___vfiprintf_internal_r+0x11cc>
   1a4a8:	d9402217 	ldw	r5,136(sp)
   1a4ac:	0029883a 	mov	r20,zero
   1a4b0:	2cc00017 	ldw	r19,0(r5)
   1a4b4:	29400104 	addi	r5,r5,4
   1a4b8:	d9402215 	stw	r5,136(sp)
   1a4bc:	003f5106 	br	1a204 <__alt_data_end+0xfc01a204>
   1a4c0:	d8c02217 	ldw	r3,136(sp)
   1a4c4:	b811883a 	mov	r8,r23
   1a4c8:	d8001d85 	stb	zero,118(sp)
   1a4cc:	1dc00017 	ldw	r23,0(r3)
   1a4d0:	1f000104 	addi	fp,r3,4
   1a4d4:	b8025926 	beq	r23,zero,1ae3c <___vfiprintf_internal_r+0x1398>
   1a4d8:	80023316 	blt	r16,zero,1ada8 <___vfiprintf_internal_r+0x1304>
   1a4dc:	800d883a 	mov	r6,r16
   1a4e0:	000b883a 	mov	r5,zero
   1a4e4:	b809883a 	mov	r4,r23
   1a4e8:	da002a15 	stw	r8,168(sp)
   1a4ec:	00168ac0 	call	168ac <memchr>
   1a4f0:	da002a17 	ldw	r8,168(sp)
   1a4f4:	10026826 	beq	r2,zero,1ae98 <___vfiprintf_internal_r+0x13f4>
   1a4f8:	15e9c83a 	sub	r20,r2,r23
   1a4fc:	dd401d83 	ldbu	r21,118(sp)
   1a500:	df002215 	stw	fp,136(sp)
   1a504:	0021883a 	mov	r16,zero
   1a508:	003e6906 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1a50c:	9cc03fcc 	andi	r19,r19,255
   1a510:	b811883a 	mov	r8,r23
   1a514:	983fc126 	beq	r19,zero,1a41c <__alt_data_end+0xfc01a41c>
   1a518:	d8c02303 	ldbu	r3,140(sp)
   1a51c:	d8c01d85 	stb	r3,118(sp)
   1a520:	003fbe06 	br	1a41c <__alt_data_end+0xfc01a41c>
   1a524:	d9002217 	ldw	r4,136(sp)
   1a528:	d9402217 	ldw	r5,136(sp)
   1a52c:	21000017 	ldw	r4,0(r4)
   1a530:	28800104 	addi	r2,r5,4
   1a534:	d9002515 	stw	r4,148(sp)
   1a538:	203e3d16 	blt	r4,zero,19e30 <__alt_data_end+0xfc019e30>
   1a53c:	d8802215 	stw	r2,136(sp)
   1a540:	b0c00007 	ldb	r3,0(r22)
   1a544:	003db406 	br	19c18 <__alt_data_end+0xfc019c18>
   1a548:	00c00ac4 	movi	r3,43
   1a54c:	d8c02305 	stb	r3,140(sp)
   1a550:	04c00044 	movi	r19,1
   1a554:	b0c00007 	ldb	r3,0(r22)
   1a558:	003daf06 	br	19c18 <__alt_data_end+0xfc019c18>
   1a55c:	b0c00007 	ldb	r3,0(r22)
   1a560:	01000a84 	movi	r4,42
   1a564:	b4000044 	addi	r16,r22,1
   1a568:	19025e26 	beq	r3,r4,1aee4 <___vfiprintf_internal_r+0x1440>
   1a56c:	1f3ff404 	addi	fp,r3,-48
   1a570:	0009883a 	mov	r4,zero
   1a574:	af025236 	bltu	r21,fp,1aec0 <___vfiprintf_internal_r+0x141c>
   1a578:	01400284 	movi	r5,10
   1a57c:	000cda80 	call	cda8 <__mulsi3>
   1a580:	80c00007 	ldb	r3,0(r16)
   1a584:	1709883a 	add	r4,r2,fp
   1a588:	85800044 	addi	r22,r16,1
   1a58c:	1f3ff404 	addi	fp,r3,-48
   1a590:	b021883a 	mov	r16,r22
   1a594:	af3ff82e 	bgeu	r21,fp,1a578 <__alt_data_end+0xfc01a578>
   1a598:	2021883a 	mov	r16,r4
   1a59c:	203d9f0e 	bge	r4,zero,19c1c <__alt_data_end+0xfc019c1c>
   1a5a0:	043fffc4 	movi	r16,-1
   1a5a4:	003d9d06 	br	19c1c <__alt_data_end+0xfc019c1c>
   1a5a8:	8c401014 	ori	r17,r17,64
   1a5ac:	b0c00007 	ldb	r3,0(r22)
   1a5b0:	003d9906 	br	19c18 <__alt_data_end+0xfc019c18>
   1a5b4:	d9002217 	ldw	r4,136(sp)
   1a5b8:	d8001d85 	stb	zero,118(sp)
   1a5bc:	20c00204 	addi	r3,r4,8
   1a5c0:	24c00017 	ldw	r19,0(r4)
   1a5c4:	25000117 	ldw	r20,4(r4)
   1a5c8:	8001e716 	blt	r16,zero,1ad68 <___vfiprintf_internal_r+0x12c4>
   1a5cc:	013fdfc4 	movi	r4,-129
   1a5d0:	9d04b03a 	or	r2,r19,r20
   1a5d4:	d8c02215 	stw	r3,136(sp)
   1a5d8:	8922703a 	and	r17,r17,r4
   1a5dc:	002b883a 	mov	r21,zero
   1a5e0:	103f2f1e 	bne	r2,zero,1a2a0 <__alt_data_end+0xfc01a2a0>
   1a5e4:	803e2f26 	beq	r16,zero,19ea4 <__alt_data_end+0xfc019ea4>
   1a5e8:	0027883a 	mov	r19,zero
   1a5ec:	9cc00c04 	addi	r19,r19,48
   1a5f0:	dcc019c5 	stb	r19,103(sp)
   1a5f4:	dd002817 	ldw	r20,160(sp)
   1a5f8:	ddc019c4 	addi	r23,sp,103
   1a5fc:	003e2c06 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1a600:	9cc03fcc 	andi	r19,r19,255
   1a604:	b811883a 	mov	r8,r23
   1a608:	9802571e 	bne	r19,zero,1af68 <___vfiprintf_internal_r+0x14c4>
   1a60c:	18005726 	beq	r3,zero,1a76c <___vfiprintf_internal_r+0xcc8>
   1a610:	04c00044 	movi	r19,1
   1a614:	d8c01005 	stb	r3,64(sp)
   1a618:	d8001d85 	stb	zero,118(sp)
   1a61c:	9829883a 	mov	r20,r19
   1a620:	ddc01004 	addi	r23,sp,64
   1a624:	003f0a06 	br	1a250 <__alt_data_end+0xfc01a250>
   1a628:	d9402017 	ldw	r5,128(sp)
   1a62c:	d9002117 	ldw	r4,132(sp)
   1a630:	d9801a04 	addi	r6,sp,104
   1a634:	da802a15 	stw	r10,168(sp)
   1a638:	00199900 	call	19990 <__sprint_r.part.0>
   1a63c:	da802a17 	ldw	r10,168(sp)
   1a640:	1000501e 	bne	r2,zero,1a784 <___vfiprintf_internal_r+0xce0>
   1a644:	d9801b17 	ldw	r6,108(sp)
   1a648:	d8801c17 	ldw	r2,112(sp)
   1a64c:	d811883a 	mov	r8,sp
   1a650:	31000044 	addi	r4,r6,1
   1a654:	003e3606 	br	19f30 <__alt_data_end+0xfc019f30>
   1a658:	d9001b17 	ldw	r4,108(sp)
   1a65c:	d8801c17 	ldw	r2,112(sp)
   1a660:	21400044 	addi	r5,r4,1
   1a664:	d9801d87 	ldb	r6,118(sp)
   1a668:	303e5226 	beq	r6,zero,19fb4 <__alt_data_end+0xfc019fb4>
   1a66c:	01800044 	movi	r6,1
   1a670:	d9001d84 	addi	r4,sp,118
   1a674:	1185883a 	add	r2,r2,r6
   1a678:	41000015 	stw	r4,0(r8)
   1a67c:	41800115 	stw	r6,4(r8)
   1a680:	d8801c15 	stw	r2,112(sp)
   1a684:	d9401b15 	stw	r5,108(sp)
   1a688:	010001c4 	movi	r4,7
   1a68c:	2140b00e 	bge	r4,r5,1a950 <___vfiprintf_internal_r+0xeac>
   1a690:	1000f61e 	bne	r2,zero,1aa6c <___vfiprintf_internal_r+0xfc8>
   1a694:	3800b31e 	bne	r7,zero,1a964 <___vfiprintf_internal_r+0xec0>
   1a698:	0009883a 	mov	r4,zero
   1a69c:	300b883a 	mov	r5,r6
   1a6a0:	d811883a 	mov	r8,sp
   1a6a4:	01802004 	movi	r6,128
   1a6a8:	19be5226 	beq	r3,r6,19ff4 <__alt_data_end+0xfc019ff4>
   1a6ac:	8521c83a 	sub	r16,r16,r20
   1a6b0:	043e790e 	bge	zero,r16,1a098 <__alt_data_end+0xfc01a098>
   1a6b4:	05400404 	movi	r21,16
   1a6b8:	ac01b00e 	bge	r21,r16,1ad7c <___vfiprintf_internal_r+0x12d8>
   1a6bc:	014000f4 	movhi	r5,3
   1a6c0:	296ac104 	addi	r5,r5,-21756
   1a6c4:	d9402315 	stw	r5,140(sp)
   1a6c8:	070001c4 	movi	fp,7
   1a6cc:	00000506 	br	1a6e4 <___vfiprintf_internal_r+0xc40>
   1a6d0:	21400084 	addi	r5,r4,2
   1a6d4:	42000204 	addi	r8,r8,8
   1a6d8:	1809883a 	mov	r4,r3
   1a6dc:	843ffc04 	addi	r16,r16,-16
   1a6e0:	ac000d0e 	bge	r21,r16,1a718 <___vfiprintf_internal_r+0xc74>
   1a6e4:	10800404 	addi	r2,r2,16
   1a6e8:	20c00044 	addi	r3,r4,1
   1a6ec:	44800015 	stw	r18,0(r8)
   1a6f0:	45400115 	stw	r21,4(r8)
   1a6f4:	d8801c15 	stw	r2,112(sp)
   1a6f8:	d8c01b15 	stw	r3,108(sp)
   1a6fc:	e0fff40e 	bge	fp,r3,1a6d0 <__alt_data_end+0xfc01a6d0>
   1a700:	1000101e 	bne	r2,zero,1a744 <___vfiprintf_internal_r+0xca0>
   1a704:	843ffc04 	addi	r16,r16,-16
   1a708:	01400044 	movi	r5,1
   1a70c:	0009883a 	mov	r4,zero
   1a710:	d811883a 	mov	r8,sp
   1a714:	ac3ff316 	blt	r21,r16,1a6e4 <__alt_data_end+0xfc01a6e4>
   1a718:	d8c02317 	ldw	r3,140(sp)
   1a71c:	1405883a 	add	r2,r2,r16
   1a720:	44000115 	stw	r16,4(r8)
   1a724:	40c00015 	stw	r3,0(r8)
   1a728:	d8801c15 	stw	r2,112(sp)
   1a72c:	d9401b15 	stw	r5,108(sp)
   1a730:	00c001c4 	movi	r3,7
   1a734:	19401916 	blt	r3,r5,1a79c <___vfiprintf_internal_r+0xcf8>
   1a738:	42000204 	addi	r8,r8,8
   1a73c:	29400044 	addi	r5,r5,1
   1a740:	003e5506 	br	1a098 <__alt_data_end+0xfc01a098>
   1a744:	d9402017 	ldw	r5,128(sp)
   1a748:	d9002117 	ldw	r4,132(sp)
   1a74c:	d9801a04 	addi	r6,sp,104
   1a750:	00199900 	call	19990 <__sprint_r.part.0>
   1a754:	10000b1e 	bne	r2,zero,1a784 <___vfiprintf_internal_r+0xce0>
   1a758:	d9001b17 	ldw	r4,108(sp)
   1a75c:	d8801c17 	ldw	r2,112(sp)
   1a760:	d811883a 	mov	r8,sp
   1a764:	21400044 	addi	r5,r4,1
   1a768:	003fdc06 	br	1a6dc <__alt_data_end+0xfc01a6dc>
   1a76c:	d8801c17 	ldw	r2,112(sp)
   1a770:	10000426 	beq	r2,zero,1a784 <___vfiprintf_internal_r+0xce0>
   1a774:	d9402017 	ldw	r5,128(sp)
   1a778:	d9002117 	ldw	r4,132(sp)
   1a77c:	d9801a04 	addi	r6,sp,104
   1a780:	00199900 	call	19990 <__sprint_r.part.0>
   1a784:	d9402017 	ldw	r5,128(sp)
   1a788:	2880030b 	ldhu	r2,12(r5)
   1a78c:	1080100c 	andi	r2,r2,64
   1a790:	10014d1e 	bne	r2,zero,1acc8 <___vfiprintf_internal_r+0x1224>
   1a794:	d8802417 	ldw	r2,144(sp)
   1a798:	003d9706 	br	19df8 <__alt_data_end+0xfc019df8>
   1a79c:	1000d21e 	bne	r2,zero,1aae8 <___vfiprintf_internal_r+0x1044>
   1a7a0:	00c00044 	movi	r3,1
   1a7a4:	a005883a 	mov	r2,r20
   1a7a8:	ddc00015 	stw	r23,0(sp)
   1a7ac:	dd000115 	stw	r20,4(sp)
   1a7b0:	dd001c15 	stw	r20,112(sp)
   1a7b4:	d8c01b15 	stw	r3,108(sp)
   1a7b8:	d811883a 	mov	r8,sp
   1a7bc:	42000204 	addi	r8,r8,8
   1a7c0:	8c40010c 	andi	r17,r17,4
   1a7c4:	88004026 	beq	r17,zero,1a8c8 <___vfiprintf_internal_r+0xe24>
   1a7c8:	d9002517 	ldw	r4,148(sp)
   1a7cc:	24e3c83a 	sub	r17,r4,r19
   1a7d0:	04403d0e 	bge	zero,r17,1a8c8 <___vfiprintf_internal_r+0xe24>
   1a7d4:	04000404 	movi	r16,16
   1a7d8:	8441a90e 	bge	r16,r17,1ae80 <___vfiprintf_internal_r+0x13dc>
   1a7dc:	00c000f4 	movhi	r3,3
   1a7e0:	18eac504 	addi	r3,r3,-21740
   1a7e4:	d9001b17 	ldw	r4,108(sp)
   1a7e8:	d8c02315 	stw	r3,140(sp)
   1a7ec:	050001c4 	movi	r20,7
   1a7f0:	dd402117 	ldw	r21,132(sp)
   1a7f4:	ddc02017 	ldw	r23,128(sp)
   1a7f8:	00000506 	br	1a810 <___vfiprintf_internal_r+0xd6c>
   1a7fc:	21400084 	addi	r5,r4,2
   1a800:	42000204 	addi	r8,r8,8
   1a804:	1809883a 	mov	r4,r3
   1a808:	8c7ffc04 	addi	r17,r17,-16
   1a80c:	84400f0e 	bge	r16,r17,1a84c <___vfiprintf_internal_r+0xda8>
   1a810:	014000f4 	movhi	r5,3
   1a814:	10800404 	addi	r2,r2,16
   1a818:	20c00044 	addi	r3,r4,1
   1a81c:	296ac504 	addi	r5,r5,-21740
   1a820:	41400015 	stw	r5,0(r8)
   1a824:	44000115 	stw	r16,4(r8)
   1a828:	d8801c15 	stw	r2,112(sp)
   1a82c:	d8c01b15 	stw	r3,108(sp)
   1a830:	a0fff20e 	bge	r20,r3,1a7fc <__alt_data_end+0xfc01a7fc>
   1a834:	1000141e 	bne	r2,zero,1a888 <___vfiprintf_internal_r+0xde4>
   1a838:	8c7ffc04 	addi	r17,r17,-16
   1a83c:	01400044 	movi	r5,1
   1a840:	0009883a 	mov	r4,zero
   1a844:	d811883a 	mov	r8,sp
   1a848:	847ff116 	blt	r16,r17,1a810 <__alt_data_end+0xfc01a810>
   1a84c:	d8c02317 	ldw	r3,140(sp)
   1a850:	1445883a 	add	r2,r2,r17
   1a854:	44400115 	stw	r17,4(r8)
   1a858:	40c00015 	stw	r3,0(r8)
   1a85c:	d8801c15 	stw	r2,112(sp)
   1a860:	d9401b15 	stw	r5,108(sp)
   1a864:	00c001c4 	movi	r3,7
   1a868:	1940170e 	bge	r3,r5,1a8c8 <___vfiprintf_internal_r+0xe24>
   1a86c:	1000101e 	bne	r2,zero,1a8b0 <___vfiprintf_internal_r+0xe0c>
   1a870:	d8802517 	ldw	r2,148(sp)
   1a874:	14c11616 	blt	r2,r19,1acd0 <___vfiprintf_internal_r+0x122c>
   1a878:	d9002417 	ldw	r4,144(sp)
   1a87c:	2089883a 	add	r4,r4,r2
   1a880:	d9002415 	stw	r4,144(sp)
   1a884:	003e1806 	br	1a0e8 <__alt_data_end+0xfc01a0e8>
   1a888:	d9801a04 	addi	r6,sp,104
   1a88c:	b80b883a 	mov	r5,r23
   1a890:	a809883a 	mov	r4,r21
   1a894:	00199900 	call	19990 <__sprint_r.part.0>
   1a898:	103fba1e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1a89c:	d9001b17 	ldw	r4,108(sp)
   1a8a0:	d8801c17 	ldw	r2,112(sp)
   1a8a4:	d811883a 	mov	r8,sp
   1a8a8:	21400044 	addi	r5,r4,1
   1a8ac:	003fd606 	br	1a808 <__alt_data_end+0xfc01a808>
   1a8b0:	d9402017 	ldw	r5,128(sp)
   1a8b4:	d9002117 	ldw	r4,132(sp)
   1a8b8:	d9801a04 	addi	r6,sp,104
   1a8bc:	00199900 	call	19990 <__sprint_r.part.0>
   1a8c0:	103fb01e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1a8c4:	d8801c17 	ldw	r2,112(sp)
   1a8c8:	d8c02517 	ldw	r3,148(sp)
   1a8cc:	1cc0010e 	bge	r3,r19,1a8d4 <___vfiprintf_internal_r+0xe30>
   1a8d0:	9807883a 	mov	r3,r19
   1a8d4:	d9002417 	ldw	r4,144(sp)
   1a8d8:	20c9883a 	add	r4,r4,r3
   1a8dc:	d9002415 	stw	r4,144(sp)
   1a8e0:	103e0126 	beq	r2,zero,1a0e8 <__alt_data_end+0xfc01a0e8>
   1a8e4:	d9402017 	ldw	r5,128(sp)
   1a8e8:	d9002117 	ldw	r4,132(sp)
   1a8ec:	d9801a04 	addi	r6,sp,104
   1a8f0:	00199900 	call	19990 <__sprint_r.part.0>
   1a8f4:	103dfc26 	beq	r2,zero,1a0e8 <__alt_data_end+0xfc01a0e8>
   1a8f8:	003fa206 	br	1a784 <__alt_data_end+0xfc01a784>
   1a8fc:	d9402017 	ldw	r5,128(sp)
   1a900:	d9002117 	ldw	r4,132(sp)
   1a904:	d9801a04 	addi	r6,sp,104
   1a908:	d9c02b15 	stw	r7,172(sp)
   1a90c:	00199900 	call	19990 <__sprint_r.part.0>
   1a910:	d9c02b17 	ldw	r7,172(sp)
   1a914:	103f9b1e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1a918:	d9001b17 	ldw	r4,108(sp)
   1a91c:	d8801c17 	ldw	r2,112(sp)
   1a920:	d811883a 	mov	r8,sp
   1a924:	21800044 	addi	r6,r4,1
   1a928:	003dbf06 	br	1a028 <__alt_data_end+0xfc01a028>
   1a92c:	1000d81e 	bne	r2,zero,1ac90 <___vfiprintf_internal_r+0x11ec>
   1a930:	d9001d87 	ldb	r4,118(sp)
   1a934:	20000a26 	beq	r4,zero,1a960 <___vfiprintf_internal_r+0xebc>
   1a938:	00800044 	movi	r2,1
   1a93c:	d9001d84 	addi	r4,sp,118
   1a940:	100b883a 	mov	r5,r2
   1a944:	d9000015 	stw	r4,0(sp)
   1a948:	d8800115 	stw	r2,4(sp)
   1a94c:	d811883a 	mov	r8,sp
   1a950:	2809883a 	mov	r4,r5
   1a954:	42000204 	addi	r8,r8,8
   1a958:	29400044 	addi	r5,r5,1
   1a95c:	003d9506 	br	19fb4 <__alt_data_end+0xfc019fb4>
   1a960:	3800fd26 	beq	r7,zero,1ad58 <___vfiprintf_internal_r+0x12b4>
   1a964:	00800084 	movi	r2,2
   1a968:	d9001d04 	addi	r4,sp,116
   1a96c:	d9000015 	stw	r4,0(sp)
   1a970:	d8800115 	stw	r2,4(sp)
   1a974:	01400044 	movi	r5,1
   1a978:	d811883a 	mov	r8,sp
   1a97c:	2809883a 	mov	r4,r5
   1a980:	42000204 	addi	r8,r8,8
   1a984:	29400044 	addi	r5,r5,1
   1a988:	003f4606 	br	1a6a4 <__alt_data_end+0xfc01a6a4>
   1a98c:	d8802517 	ldw	r2,148(sp)
   1a990:	14c0010e 	bge	r2,r19,1a998 <___vfiprintf_internal_r+0xef4>
   1a994:	9805883a 	mov	r2,r19
   1a998:	d9402417 	ldw	r5,144(sp)
   1a99c:	288b883a 	add	r5,r5,r2
   1a9a0:	d9402415 	stw	r5,144(sp)
   1a9a4:	003dd006 	br	1a0e8 <__alt_data_end+0xfc01a0e8>
   1a9a8:	d8001d85 	stb	zero,118(sp)
   1a9ac:	80005d16 	blt	r16,zero,1ab24 <___vfiprintf_internal_r+0x1080>
   1a9b0:	00ffdfc4 	movi	r3,-129
   1a9b4:	9d04b03a 	or	r2,r19,r20
   1a9b8:	88e2703a 	and	r17,r17,r3
   1a9bc:	103d3726 	beq	r2,zero,19e9c <__alt_data_end+0xfc019e9c>
   1a9c0:	002b883a 	mov	r21,zero
   1a9c4:	d9002617 	ldw	r4,152(sp)
   1a9c8:	ddc01a04 	addi	r23,sp,104
   1a9cc:	988003cc 	andi	r2,r19,15
   1a9d0:	a006973a 	slli	r3,r20,28
   1a9d4:	2085883a 	add	r2,r4,r2
   1a9d8:	9826d13a 	srli	r19,r19,4
   1a9dc:	10800003 	ldbu	r2,0(r2)
   1a9e0:	a028d13a 	srli	r20,r20,4
   1a9e4:	bdffffc4 	addi	r23,r23,-1
   1a9e8:	1ce6b03a 	or	r19,r3,r19
   1a9ec:	b8800005 	stb	r2,0(r23)
   1a9f0:	9d04b03a 	or	r2,r19,r20
   1a9f4:	103ff51e 	bne	r2,zero,1a9cc <__alt_data_end+0xfc01a9cc>
   1a9f8:	d8801e17 	ldw	r2,120(sp)
   1a9fc:	15e9c83a 	sub	r20,r2,r23
   1aa00:	003d2b06 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1aa04:	d9402017 	ldw	r5,128(sp)
   1aa08:	d9002117 	ldw	r4,132(sp)
   1aa0c:	d9801a04 	addi	r6,sp,104
   1aa10:	00199900 	call	19990 <__sprint_r.part.0>
   1aa14:	103f5b1e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1aa18:	d8801c17 	ldw	r2,112(sp)
   1aa1c:	d811883a 	mov	r8,sp
   1aa20:	003f6706 	br	1a7c0 <__alt_data_end+0xfc01a7c0>
   1aa24:	d9402017 	ldw	r5,128(sp)
   1aa28:	d9002117 	ldw	r4,132(sp)
   1aa2c:	d9801a04 	addi	r6,sp,104
   1aa30:	00199900 	call	19990 <__sprint_r.part.0>
   1aa34:	103f531e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1aa38:	d811883a 	mov	r8,sp
   1aa3c:	003cd906 	br	19da4 <__alt_data_end+0xfc019da4>
   1aa40:	10803fcc 	andi	r2,r2,255
   1aa44:	1080201c 	xori	r2,r2,128
   1aa48:	10bfe004 	addi	r2,r2,-128
   1aa4c:	00c00c04 	movi	r3,48
   1aa50:	10ffe926 	beq	r2,r3,1a9f8 <__alt_data_end+0xfc01a9f8>
   1aa54:	b8ffffc5 	stb	r3,-1(r23)
   1aa58:	d8c01e17 	ldw	r3,120(sp)
   1aa5c:	b8bfffc4 	addi	r2,r23,-1
   1aa60:	102f883a 	mov	r23,r2
   1aa64:	18a9c83a 	sub	r20,r3,r2
   1aa68:	003d1106 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1aa6c:	d9402017 	ldw	r5,128(sp)
   1aa70:	d9002117 	ldw	r4,132(sp)
   1aa74:	d9801a04 	addi	r6,sp,104
   1aa78:	d8c02a15 	stw	r3,168(sp)
   1aa7c:	d9c02b15 	stw	r7,172(sp)
   1aa80:	00199900 	call	19990 <__sprint_r.part.0>
   1aa84:	d8c02a17 	ldw	r3,168(sp)
   1aa88:	d9c02b17 	ldw	r7,172(sp)
   1aa8c:	103f3d1e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1aa90:	d9001b17 	ldw	r4,108(sp)
   1aa94:	d8801c17 	ldw	r2,112(sp)
   1aa98:	d811883a 	mov	r8,sp
   1aa9c:	21400044 	addi	r5,r4,1
   1aaa0:	003d4406 	br	19fb4 <__alt_data_end+0xfc019fb4>
   1aaa4:	d9402017 	ldw	r5,128(sp)
   1aaa8:	d9002117 	ldw	r4,132(sp)
   1aaac:	d9801a04 	addi	r6,sp,104
   1aab0:	d8c02a15 	stw	r3,168(sp)
   1aab4:	00199900 	call	19990 <__sprint_r.part.0>
   1aab8:	d8c02a17 	ldw	r3,168(sp)
   1aabc:	103f311e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1aac0:	d9001b17 	ldw	r4,108(sp)
   1aac4:	d8801c17 	ldw	r2,112(sp)
   1aac8:	d811883a 	mov	r8,sp
   1aacc:	21400044 	addi	r5,r4,1
   1aad0:	003ef406 	br	1a6a4 <__alt_data_end+0xfc01a6a4>
   1aad4:	1000bd1e 	bne	r2,zero,1adcc <___vfiprintf_internal_r+0x1328>
   1aad8:	01400044 	movi	r5,1
   1aadc:	0009883a 	mov	r4,zero
   1aae0:	d811883a 	mov	r8,sp
   1aae4:	003ef106 	br	1a6ac <__alt_data_end+0xfc01a6ac>
   1aae8:	d9402017 	ldw	r5,128(sp)
   1aaec:	d9002117 	ldw	r4,132(sp)
   1aaf0:	d9801a04 	addi	r6,sp,104
   1aaf4:	00199900 	call	19990 <__sprint_r.part.0>
   1aaf8:	103f221e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1aafc:	d9401b17 	ldw	r5,108(sp)
   1ab00:	d8801c17 	ldw	r2,112(sp)
   1ab04:	d811883a 	mov	r8,sp
   1ab08:	29400044 	addi	r5,r5,1
   1ab0c:	003d6206 	br	1a098 <__alt_data_end+0xfc01a098>
   1ab10:	014000f4 	movhi	r5,3
   1ab14:	296a5104 	addi	r5,r5,-22204
   1ab18:	d9402615 	stw	r5,152(sp)
   1ab1c:	d8c02215 	stw	r3,136(sp)
   1ab20:	1023883a 	mov	r17,r2
   1ab24:	9d04b03a 	or	r2,r19,r20
   1ab28:	103fa51e 	bne	r2,zero,1a9c0 <__alt_data_end+0xfc01a9c0>
   1ab2c:	002b883a 	mov	r21,zero
   1ab30:	00800084 	movi	r2,2
   1ab34:	003e4a06 	br	1a460 <__alt_data_end+0xfc01a460>
   1ab38:	014000f4 	movhi	r5,3
   1ab3c:	296a5104 	addi	r5,r5,-22204
   1ab40:	002b883a 	mov	r21,zero
   1ab44:	d9402615 	stw	r5,152(sp)
   1ab48:	003f9e06 	br	1a9c4 <__alt_data_end+0xfc01a9c4>
   1ab4c:	d9402217 	ldw	r5,136(sp)
   1ab50:	d8001d85 	stb	zero,118(sp)
   1ab54:	0029883a 	mov	r20,zero
   1ab58:	28800104 	addi	r2,r5,4
   1ab5c:	2cc00017 	ldw	r19,0(r5)
   1ab60:	803e3a16 	blt	r16,zero,1a44c <__alt_data_end+0xfc01a44c>
   1ab64:	00ffdfc4 	movi	r3,-129
   1ab68:	d8802215 	stw	r2,136(sp)
   1ab6c:	88e2703a 	and	r17,r17,r3
   1ab70:	002b883a 	mov	r21,zero
   1ab74:	983e9b26 	beq	r19,zero,1a5e4 <__alt_data_end+0xfc01a5e4>
   1ab78:	00800244 	movi	r2,9
   1ab7c:	14fdc936 	bltu	r2,r19,1a2a4 <__alt_data_end+0xfc01a2a4>
   1ab80:	003e9a06 	br	1a5ec <__alt_data_end+0xfc01a5ec>
   1ab84:	00800c04 	movi	r2,48
   1ab88:	d8c01d45 	stb	r3,117(sp)
   1ab8c:	d8801d05 	stb	r2,116(sp)
   1ab90:	d8001d85 	stb	zero,118(sp)
   1ab94:	88c00094 	ori	r3,r17,2
   1ab98:	80009c16 	blt	r16,zero,1ae0c <___vfiprintf_internal_r+0x1368>
   1ab9c:	00bfdfc4 	movi	r2,-129
   1aba0:	88a2703a 	and	r17,r17,r2
   1aba4:	8c400094 	ori	r17,r17,2
   1aba8:	002b883a 	mov	r21,zero
   1abac:	003f8506 	br	1a9c4 <__alt_data_end+0xfc01a9c4>
   1abb0:	b029883a 	mov	r20,r22
   1abb4:	003c0b06 	br	19be4 <__alt_data_end+0xfc019be4>
   1abb8:	04e7c83a 	sub	r19,zero,r19
   1abbc:	05400b44 	movi	r21,45
   1abc0:	9804c03a 	cmpne	r2,r19,zero
   1abc4:	0529c83a 	sub	r20,zero,r20
   1abc8:	dd401d85 	stb	r21,118(sp)
   1abcc:	a0a9c83a 	sub	r20,r20,r2
   1abd0:	80009716 	blt	r16,zero,1ae30 <___vfiprintf_internal_r+0x138c>
   1abd4:	00bfdfc4 	movi	r2,-129
   1abd8:	88a2703a 	and	r17,r17,r2
   1abdc:	003db006 	br	1a2a0 <__alt_data_end+0xfc01a2a0>
   1abe0:	b0c00007 	ldb	r3,0(r22)
   1abe4:	003c0c06 	br	19c18 <__alt_data_end+0xfc019c18>
   1abe8:	8880100c 	andi	r2,r17,64
   1abec:	d8001d85 	stb	zero,118(sp)
   1abf0:	1000461e 	bne	r2,zero,1ad0c <___vfiprintf_internal_r+0x1268>
   1abf4:	d9002217 	ldw	r4,136(sp)
   1abf8:	0029883a 	mov	r20,zero
   1abfc:	20800104 	addi	r2,r4,4
   1ac00:	24c00017 	ldw	r19,0(r4)
   1ac04:	803df80e 	bge	r16,zero,1a3e8 <__alt_data_end+0xfc01a3e8>
   1ac08:	9d06b03a 	or	r3,r19,r20
   1ac0c:	d8802215 	stw	r2,136(sp)
   1ac10:	183d5e1e 	bne	r3,zero,1a18c <__alt_data_end+0xfc01a18c>
   1ac14:	002b883a 	mov	r21,zero
   1ac18:	0005883a 	mov	r2,zero
   1ac1c:	003e1006 	br	1a460 <__alt_data_end+0xfc01a460>
   1ac20:	8880040c 	andi	r2,r17,16
   1ac24:	1000321e 	bne	r2,zero,1acf0 <___vfiprintf_internal_r+0x124c>
   1ac28:	8c40100c 	andi	r17,r17,64
   1ac2c:	88008d26 	beq	r17,zero,1ae64 <___vfiprintf_internal_r+0x13c0>
   1ac30:	d9402217 	ldw	r5,136(sp)
   1ac34:	d8c02417 	ldw	r3,144(sp)
   1ac38:	28800017 	ldw	r2,0(r5)
   1ac3c:	29400104 	addi	r5,r5,4
   1ac40:	d9402215 	stw	r5,136(sp)
   1ac44:	10c0000d 	sth	r3,0(r2)
   1ac48:	003bca06 	br	19b74 <__alt_data_end+0xfc019b74>
   1ac4c:	8880100c 	andi	r2,r17,64
   1ac50:	10003a26 	beq	r2,zero,1ad3c <___vfiprintf_internal_r+0x1298>
   1ac54:	d8802217 	ldw	r2,136(sp)
   1ac58:	14c0000f 	ldh	r19,0(r2)
   1ac5c:	10800104 	addi	r2,r2,4
   1ac60:	d8802215 	stw	r2,136(sp)
   1ac64:	9829d7fa 	srai	r20,r19,31
   1ac68:	a005883a 	mov	r2,r20
   1ac6c:	003d8506 	br	1a284 <__alt_data_end+0xfc01a284>
   1ac70:	8880100c 	andi	r2,r17,64
   1ac74:	10002b26 	beq	r2,zero,1ad24 <___vfiprintf_internal_r+0x1280>
   1ac78:	d8802217 	ldw	r2,136(sp)
   1ac7c:	0029883a 	mov	r20,zero
   1ac80:	14c0000b 	ldhu	r19,0(r2)
   1ac84:	10800104 	addi	r2,r2,4
   1ac88:	d8802215 	stw	r2,136(sp)
   1ac8c:	003d5d06 	br	1a204 <__alt_data_end+0xfc01a204>
   1ac90:	d9402017 	ldw	r5,128(sp)
   1ac94:	d9002117 	ldw	r4,132(sp)
   1ac98:	d9801a04 	addi	r6,sp,104
   1ac9c:	d8c02a15 	stw	r3,168(sp)
   1aca0:	d9c02b15 	stw	r7,172(sp)
   1aca4:	00199900 	call	19990 <__sprint_r.part.0>
   1aca8:	d8c02a17 	ldw	r3,168(sp)
   1acac:	d9c02b17 	ldw	r7,172(sp)
   1acb0:	103eb41e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1acb4:	d9001b17 	ldw	r4,108(sp)
   1acb8:	d8801c17 	ldw	r2,112(sp)
   1acbc:	d811883a 	mov	r8,sp
   1acc0:	21400044 	addi	r5,r4,1
   1acc4:	003e6706 	br	1a664 <__alt_data_end+0xfc01a664>
   1acc8:	00bfffc4 	movi	r2,-1
   1accc:	003c4a06 	br	19df8 <__alt_data_end+0xfc019df8>
   1acd0:	9805883a 	mov	r2,r19
   1acd4:	003ee806 	br	1a878 <__alt_data_end+0xfc01a878>
   1acd8:	d8c02217 	ldw	r3,136(sp)
   1acdc:	0029883a 	mov	r20,zero
   1ace0:	18800104 	addi	r2,r3,4
   1ace4:	1cc0000b 	ldhu	r19,0(r3)
   1ace8:	803f9e0e 	bge	r16,zero,1ab64 <__alt_data_end+0xfc01ab64>
   1acec:	003dd706 	br	1a44c <__alt_data_end+0xfc01a44c>
   1acf0:	d8c02217 	ldw	r3,136(sp)
   1acf4:	d9002417 	ldw	r4,144(sp)
   1acf8:	18800017 	ldw	r2,0(r3)
   1acfc:	18c00104 	addi	r3,r3,4
   1ad00:	d8c02215 	stw	r3,136(sp)
   1ad04:	11000015 	stw	r4,0(r2)
   1ad08:	003b9a06 	br	19b74 <__alt_data_end+0xfc019b74>
   1ad0c:	d8c02217 	ldw	r3,136(sp)
   1ad10:	0029883a 	mov	r20,zero
   1ad14:	18800104 	addi	r2,r3,4
   1ad18:	1cc0000b 	ldhu	r19,0(r3)
   1ad1c:	803db20e 	bge	r16,zero,1a3e8 <__alt_data_end+0xfc01a3e8>
   1ad20:	003fb906 	br	1ac08 <__alt_data_end+0xfc01ac08>
   1ad24:	d9002217 	ldw	r4,136(sp)
   1ad28:	0029883a 	mov	r20,zero
   1ad2c:	24c00017 	ldw	r19,0(r4)
   1ad30:	21000104 	addi	r4,r4,4
   1ad34:	d9002215 	stw	r4,136(sp)
   1ad38:	003d3206 	br	1a204 <__alt_data_end+0xfc01a204>
   1ad3c:	d8c02217 	ldw	r3,136(sp)
   1ad40:	1cc00017 	ldw	r19,0(r3)
   1ad44:	18c00104 	addi	r3,r3,4
   1ad48:	d8c02215 	stw	r3,136(sp)
   1ad4c:	9829d7fa 	srai	r20,r19,31
   1ad50:	a005883a 	mov	r2,r20
   1ad54:	003d4b06 	br	1a284 <__alt_data_end+0xfc01a284>
   1ad58:	0009883a 	mov	r4,zero
   1ad5c:	01400044 	movi	r5,1
   1ad60:	d811883a 	mov	r8,sp
   1ad64:	003e4f06 	br	1a6a4 <__alt_data_end+0xfc01a6a4>
   1ad68:	d8c02215 	stw	r3,136(sp)
   1ad6c:	002b883a 	mov	r21,zero
   1ad70:	003db806 	br	1a454 <__alt_data_end+0xfc01a454>
   1ad74:	d811883a 	mov	r8,sp
   1ad78:	003e9606 	br	1a7d4 <__alt_data_end+0xfc01a7d4>
   1ad7c:	010000f4 	movhi	r4,3
   1ad80:	212ac104 	addi	r4,r4,-21756
   1ad84:	d9002315 	stw	r4,140(sp)
   1ad88:	003e6306 	br	1a718 <__alt_data_end+0xfc01a718>
   1ad8c:	b0c00043 	ldbu	r3,1(r22)
   1ad90:	8c400814 	ori	r17,r17,32
   1ad94:	b5800044 	addi	r22,r22,1
   1ad98:	18c03fcc 	andi	r3,r3,255
   1ad9c:	18c0201c 	xori	r3,r3,128
   1ada0:	18ffe004 	addi	r3,r3,-128
   1ada4:	003b9c06 	br	19c18 <__alt_data_end+0xfc019c18>
   1ada8:	b809883a 	mov	r4,r23
   1adac:	da002a15 	stw	r8,168(sp)
   1adb0:	000f4240 	call	f424 <strlen>
   1adb4:	1029883a 	mov	r20,r2
   1adb8:	dd401d83 	ldbu	r21,118(sp)
   1adbc:	df002215 	stw	fp,136(sp)
   1adc0:	0021883a 	mov	r16,zero
   1adc4:	da002a17 	ldw	r8,168(sp)
   1adc8:	003c3906 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1adcc:	d9402017 	ldw	r5,128(sp)
   1add0:	d9002117 	ldw	r4,132(sp)
   1add4:	d9801a04 	addi	r6,sp,104
   1add8:	00199900 	call	19990 <__sprint_r.part.0>
   1addc:	103e691e 	bne	r2,zero,1a784 <__alt_data_end+0xfc01a784>
   1ade0:	d9001b17 	ldw	r4,108(sp)
   1ade4:	d8801c17 	ldw	r2,112(sp)
   1ade8:	d811883a 	mov	r8,sp
   1adec:	21400044 	addi	r5,r4,1
   1adf0:	003e2e06 	br	1a6ac <__alt_data_end+0xfc01a6ac>
   1adf4:	010000f4 	movhi	r4,3
   1adf8:	212ac504 	addi	r4,r4,-21740
   1adfc:	d9002315 	stw	r4,140(sp)
   1ae00:	d9001b17 	ldw	r4,108(sp)
   1ae04:	21000044 	addi	r4,r4,1
   1ae08:	003c5e06 	br	19f84 <__alt_data_end+0xfc019f84>
   1ae0c:	002b883a 	mov	r21,zero
   1ae10:	00800084 	movi	r2,2
   1ae14:	10803fcc 	andi	r2,r2,255
   1ae18:	01000044 	movi	r4,1
   1ae1c:	11002b26 	beq	r2,r4,1aecc <___vfiprintf_internal_r+0x1428>
   1ae20:	01000084 	movi	r4,2
   1ae24:	11002b1e 	bne	r2,r4,1aed4 <___vfiprintf_internal_r+0x1430>
   1ae28:	1823883a 	mov	r17,r3
   1ae2c:	003ee506 	br	1a9c4 <__alt_data_end+0xfc01a9c4>
   1ae30:	8807883a 	mov	r3,r17
   1ae34:	00800044 	movi	r2,1
   1ae38:	003ff606 	br	1ae14 <__alt_data_end+0xfc01ae14>
   1ae3c:	00800184 	movi	r2,6
   1ae40:	1400012e 	bgeu	r2,r16,1ae48 <___vfiprintf_internal_r+0x13a4>
   1ae44:	1021883a 	mov	r16,r2
   1ae48:	8029883a 	mov	r20,r16
   1ae4c:	8027883a 	mov	r19,r16
   1ae50:	80002216 	blt	r16,zero,1aedc <___vfiprintf_internal_r+0x1438>
   1ae54:	05c000f4 	movhi	r23,3
   1ae58:	df002215 	stw	fp,136(sp)
   1ae5c:	bdea5604 	addi	r23,r23,-22184
   1ae60:	003cfb06 	br	1a250 <__alt_data_end+0xfc01a250>
   1ae64:	d9002217 	ldw	r4,136(sp)
   1ae68:	d9402417 	ldw	r5,144(sp)
   1ae6c:	20800017 	ldw	r2,0(r4)
   1ae70:	21000104 	addi	r4,r4,4
   1ae74:	d9002215 	stw	r4,136(sp)
   1ae78:	11400015 	stw	r5,0(r2)
   1ae7c:	003b3d06 	br	19b74 <__alt_data_end+0xfc019b74>
   1ae80:	014000f4 	movhi	r5,3
   1ae84:	296ac504 	addi	r5,r5,-21740
   1ae88:	d9402315 	stw	r5,140(sp)
   1ae8c:	d9401b17 	ldw	r5,108(sp)
   1ae90:	29400044 	addi	r5,r5,1
   1ae94:	003e6d06 	br	1a84c <__alt_data_end+0xfc01a84c>
   1ae98:	8029883a 	mov	r20,r16
   1ae9c:	dd401d83 	ldbu	r21,118(sp)
   1aea0:	df002215 	stw	fp,136(sp)
   1aea4:	0021883a 	mov	r16,zero
   1aea8:	003c0106 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1aeac:	00c000f4 	movhi	r3,3
   1aeb0:	18eac104 	addi	r3,r3,-21756
   1aeb4:	d8c02315 	stw	r3,140(sp)
   1aeb8:	280d883a 	mov	r6,r5
   1aebc:	003c6906 	br	1a064 <__alt_data_end+0xfc01a064>
   1aec0:	802d883a 	mov	r22,r16
   1aec4:	0021883a 	mov	r16,zero
   1aec8:	003b5406 	br	19c1c <__alt_data_end+0xfc019c1c>
   1aecc:	1823883a 	mov	r17,r3
   1aed0:	003cf306 	br	1a2a0 <__alt_data_end+0xfc01a2a0>
   1aed4:	1823883a 	mov	r17,r3
   1aed8:	003cad06 	br	1a190 <__alt_data_end+0xfc01a190>
   1aedc:	0027883a 	mov	r19,zero
   1aee0:	003fdc06 	br	1ae54 <__alt_data_end+0xfc01ae54>
   1aee4:	d9402217 	ldw	r5,136(sp)
   1aee8:	8005883a 	mov	r2,r16
   1aeec:	b0c00043 	ldbu	r3,1(r22)
   1aef0:	2c000017 	ldw	r16,0(r5)
   1aef4:	29000104 	addi	r4,r5,4
   1aef8:	d9002215 	stw	r4,136(sp)
   1aefc:	102d883a 	mov	r22,r2
   1af00:	803fa50e 	bge	r16,zero,1ad98 <__alt_data_end+0xfc01ad98>
   1af04:	18c03fcc 	andi	r3,r3,255
   1af08:	18c0201c 	xori	r3,r3,128
   1af0c:	043fffc4 	movi	r16,-1
   1af10:	18ffe004 	addi	r3,r3,-128
   1af14:	003b4006 	br	19c18 <__alt_data_end+0xfc019c18>
   1af18:	d9402303 	ldbu	r5,140(sp)
   1af1c:	d9401d85 	stb	r5,118(sp)
   1af20:	003cae06 	br	1a1dc <__alt_data_end+0xfc01a1dc>
   1af24:	d8c02303 	ldbu	r3,140(sp)
   1af28:	d8c01d85 	stb	r3,118(sp)
   1af2c:	003d1406 	br	1a380 <__alt_data_end+0xfc01a380>
   1af30:	d8c02303 	ldbu	r3,140(sp)
   1af34:	d8c01d85 	stb	r3,118(sp)
   1af38:	003cca06 	br	1a264 <__alt_data_end+0xfc01a264>
   1af3c:	8880004c 	andi	r2,r17,1
   1af40:	002b883a 	mov	r21,zero
   1af44:	10000526 	beq	r2,zero,1af5c <___vfiprintf_internal_r+0x14b8>
   1af48:	00800c04 	movi	r2,48
   1af4c:	d88019c5 	stb	r2,103(sp)
   1af50:	dd002817 	ldw	r20,160(sp)
   1af54:	ddc019c4 	addi	r23,sp,103
   1af58:	003bd506 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1af5c:	0029883a 	mov	r20,zero
   1af60:	ddc01a04 	addi	r23,sp,104
   1af64:	003bd206 	br	19eb0 <__alt_data_end+0xfc019eb0>
   1af68:	d9002303 	ldbu	r4,140(sp)
   1af6c:	d9001d85 	stb	r4,118(sp)
   1af70:	003da606 	br	1a60c <__alt_data_end+0xfc01a60c>
   1af74:	d8c02303 	ldbu	r3,140(sp)
   1af78:	d8c01d85 	stb	r3,118(sp)
   1af7c:	003c7606 	br	1a158 <__alt_data_end+0xfc01a158>
   1af80:	d8c02303 	ldbu	r3,140(sp)
   1af84:	d8c01d85 	stb	r3,118(sp)
   1af88:	003c6506 	br	1a120 <__alt_data_end+0xfc01a120>
   1af8c:	d9002303 	ldbu	r4,140(sp)
   1af90:	d9001d85 	stb	r4,118(sp)
   1af94:	003d3d06 	br	1a48c <__alt_data_end+0xfc01a48c>
   1af98:	d8c02303 	ldbu	r3,140(sp)
   1af9c:	d8c01d85 	stb	r3,118(sp)
   1afa0:	003d1d06 	br	1a418 <__alt_data_end+0xfc01a418>
   1afa4:	d8c02303 	ldbu	r3,140(sp)
   1afa8:	d8c01d85 	stb	r3,118(sp)
   1afac:	003d0306 	br	1a3bc <__alt_data_end+0xfc01a3bc>

0001afb0 <__vfiprintf_internal>:
   1afb0:	008000f4 	movhi	r2,3
   1afb4:	10b74b04 	addi	r2,r2,-8916
   1afb8:	300f883a 	mov	r7,r6
   1afbc:	280d883a 	mov	r6,r5
   1afc0:	200b883a 	mov	r5,r4
   1afc4:	11000017 	ldw	r4,0(r2)
   1afc8:	0019aa41 	jmpi	19aa4 <___vfiprintf_internal_r>

0001afcc <__sbprintf>:
   1afcc:	2880030b 	ldhu	r2,12(r5)
   1afd0:	2ac01917 	ldw	r11,100(r5)
   1afd4:	2a80038b 	ldhu	r10,14(r5)
   1afd8:	2a400717 	ldw	r9,28(r5)
   1afdc:	2a000917 	ldw	r8,36(r5)
   1afe0:	defee204 	addi	sp,sp,-1144
   1afe4:	00c10004 	movi	r3,1024
   1afe8:	dc011a15 	stw	r16,1128(sp)
   1afec:	10bfff4c 	andi	r2,r2,65533
   1aff0:	2821883a 	mov	r16,r5
   1aff4:	d8cb883a 	add	r5,sp,r3
   1aff8:	dc811c15 	stw	r18,1136(sp)
   1affc:	dc411b15 	stw	r17,1132(sp)
   1b000:	dfc11d15 	stw	ra,1140(sp)
   1b004:	2025883a 	mov	r18,r4
   1b008:	d881030d 	sth	r2,1036(sp)
   1b00c:	dac11915 	stw	r11,1124(sp)
   1b010:	da81038d 	sth	r10,1038(sp)
   1b014:	da410715 	stw	r9,1052(sp)
   1b018:	da010915 	stw	r8,1060(sp)
   1b01c:	dec10015 	stw	sp,1024(sp)
   1b020:	dec10415 	stw	sp,1040(sp)
   1b024:	d8c10215 	stw	r3,1032(sp)
   1b028:	d8c10515 	stw	r3,1044(sp)
   1b02c:	d8010615 	stw	zero,1048(sp)
   1b030:	0019aa40 	call	19aa4 <___vfiprintf_internal_r>
   1b034:	1023883a 	mov	r17,r2
   1b038:	10000416 	blt	r2,zero,1b04c <__sbprintf+0x80>
   1b03c:	d9410004 	addi	r5,sp,1024
   1b040:	9009883a 	mov	r4,r18
   1b044:	00157540 	call	15754 <_fflush_r>
   1b048:	10000d1e 	bne	r2,zero,1b080 <__sbprintf+0xb4>
   1b04c:	d881030b 	ldhu	r2,1036(sp)
   1b050:	1080100c 	andi	r2,r2,64
   1b054:	10000326 	beq	r2,zero,1b064 <__sbprintf+0x98>
   1b058:	8080030b 	ldhu	r2,12(r16)
   1b05c:	10801014 	ori	r2,r2,64
   1b060:	8080030d 	sth	r2,12(r16)
   1b064:	8805883a 	mov	r2,r17
   1b068:	dfc11d17 	ldw	ra,1140(sp)
   1b06c:	dc811c17 	ldw	r18,1136(sp)
   1b070:	dc411b17 	ldw	r17,1132(sp)
   1b074:	dc011a17 	ldw	r16,1128(sp)
   1b078:	dec11e04 	addi	sp,sp,1144
   1b07c:	f800283a 	ret
   1b080:	047fffc4 	movi	r17,-1
   1b084:	003ff106 	br	1b04c <__alt_data_end+0xfc01b04c>

0001b088 <__swbuf_r>:
   1b088:	defffb04 	addi	sp,sp,-20
   1b08c:	dcc00315 	stw	r19,12(sp)
   1b090:	dc800215 	stw	r18,8(sp)
   1b094:	dc000015 	stw	r16,0(sp)
   1b098:	dfc00415 	stw	ra,16(sp)
   1b09c:	dc400115 	stw	r17,4(sp)
   1b0a0:	2025883a 	mov	r18,r4
   1b0a4:	2827883a 	mov	r19,r5
   1b0a8:	3021883a 	mov	r16,r6
   1b0ac:	20000226 	beq	r4,zero,1b0b8 <__swbuf_r+0x30>
   1b0b0:	20800e17 	ldw	r2,56(r4)
   1b0b4:	10004226 	beq	r2,zero,1b1c0 <__swbuf_r+0x138>
   1b0b8:	80800617 	ldw	r2,24(r16)
   1b0bc:	8100030b 	ldhu	r4,12(r16)
   1b0c0:	80800215 	stw	r2,8(r16)
   1b0c4:	2080020c 	andi	r2,r4,8
   1b0c8:	10003626 	beq	r2,zero,1b1a4 <__swbuf_r+0x11c>
   1b0cc:	80c00417 	ldw	r3,16(r16)
   1b0d0:	18003426 	beq	r3,zero,1b1a4 <__swbuf_r+0x11c>
   1b0d4:	2088000c 	andi	r2,r4,8192
   1b0d8:	9c403fcc 	andi	r17,r19,255
   1b0dc:	10001a26 	beq	r2,zero,1b148 <__swbuf_r+0xc0>
   1b0e0:	80800017 	ldw	r2,0(r16)
   1b0e4:	81000517 	ldw	r4,20(r16)
   1b0e8:	10c7c83a 	sub	r3,r2,r3
   1b0ec:	1900200e 	bge	r3,r4,1b170 <__swbuf_r+0xe8>
   1b0f0:	18c00044 	addi	r3,r3,1
   1b0f4:	81000217 	ldw	r4,8(r16)
   1b0f8:	11400044 	addi	r5,r2,1
   1b0fc:	81400015 	stw	r5,0(r16)
   1b100:	213fffc4 	addi	r4,r4,-1
   1b104:	81000215 	stw	r4,8(r16)
   1b108:	14c00005 	stb	r19,0(r2)
   1b10c:	80800517 	ldw	r2,20(r16)
   1b110:	10c01e26 	beq	r2,r3,1b18c <__swbuf_r+0x104>
   1b114:	8080030b 	ldhu	r2,12(r16)
   1b118:	1080004c 	andi	r2,r2,1
   1b11c:	10000226 	beq	r2,zero,1b128 <__swbuf_r+0xa0>
   1b120:	00800284 	movi	r2,10
   1b124:	88801926 	beq	r17,r2,1b18c <__swbuf_r+0x104>
   1b128:	8805883a 	mov	r2,r17
   1b12c:	dfc00417 	ldw	ra,16(sp)
   1b130:	dcc00317 	ldw	r19,12(sp)
   1b134:	dc800217 	ldw	r18,8(sp)
   1b138:	dc400117 	ldw	r17,4(sp)
   1b13c:	dc000017 	ldw	r16,0(sp)
   1b140:	dec00504 	addi	sp,sp,20
   1b144:	f800283a 	ret
   1b148:	81401917 	ldw	r5,100(r16)
   1b14c:	00b7ffc4 	movi	r2,-8193
   1b150:	21080014 	ori	r4,r4,8192
   1b154:	2884703a 	and	r2,r5,r2
   1b158:	80801915 	stw	r2,100(r16)
   1b15c:	80800017 	ldw	r2,0(r16)
   1b160:	8100030d 	sth	r4,12(r16)
   1b164:	81000517 	ldw	r4,20(r16)
   1b168:	10c7c83a 	sub	r3,r2,r3
   1b16c:	193fe016 	blt	r3,r4,1b0f0 <__alt_data_end+0xfc01b0f0>
   1b170:	800b883a 	mov	r5,r16
   1b174:	9009883a 	mov	r4,r18
   1b178:	00157540 	call	15754 <_fflush_r>
   1b17c:	1000071e 	bne	r2,zero,1b19c <__swbuf_r+0x114>
   1b180:	80800017 	ldw	r2,0(r16)
   1b184:	00c00044 	movi	r3,1
   1b188:	003fda06 	br	1b0f4 <__alt_data_end+0xfc01b0f4>
   1b18c:	800b883a 	mov	r5,r16
   1b190:	9009883a 	mov	r4,r18
   1b194:	00157540 	call	15754 <_fflush_r>
   1b198:	103fe326 	beq	r2,zero,1b128 <__alt_data_end+0xfc01b128>
   1b19c:	00bfffc4 	movi	r2,-1
   1b1a0:	003fe206 	br	1b12c <__alt_data_end+0xfc01b12c>
   1b1a4:	800b883a 	mov	r5,r16
   1b1a8:	9009883a 	mov	r4,r18
   1b1ac:	0013b340 	call	13b34 <__swsetup_r>
   1b1b0:	103ffa1e 	bne	r2,zero,1b19c <__alt_data_end+0xfc01b19c>
   1b1b4:	8100030b 	ldhu	r4,12(r16)
   1b1b8:	80c00417 	ldw	r3,16(r16)
   1b1bc:	003fc506 	br	1b0d4 <__alt_data_end+0xfc01b0d4>
   1b1c0:	0015b400 	call	15b40 <__sinit>
   1b1c4:	003fbc06 	br	1b0b8 <__alt_data_end+0xfc01b0b8>

0001b1c8 <__swbuf>:
   1b1c8:	008000f4 	movhi	r2,3
   1b1cc:	10b74b04 	addi	r2,r2,-8916
   1b1d0:	280d883a 	mov	r6,r5
   1b1d4:	200b883a 	mov	r5,r4
   1b1d8:	11000017 	ldw	r4,0(r2)
   1b1dc:	001b0881 	jmpi	1b088 <__swbuf_r>

0001b1e0 <_write_r>:
   1b1e0:	defffd04 	addi	sp,sp,-12
   1b1e4:	2805883a 	mov	r2,r5
   1b1e8:	dc000015 	stw	r16,0(sp)
   1b1ec:	040000f4 	movhi	r16,3
   1b1f0:	dc400115 	stw	r17,4(sp)
   1b1f4:	300b883a 	mov	r5,r6
   1b1f8:	8403e104 	addi	r16,r16,3972
   1b1fc:	2023883a 	mov	r17,r4
   1b200:	380d883a 	mov	r6,r7
   1b204:	1009883a 	mov	r4,r2
   1b208:	dfc00215 	stw	ra,8(sp)
   1b20c:	80000015 	stw	zero,0(r16)
   1b210:	001f90c0 	call	1f90c <write>
   1b214:	00ffffc4 	movi	r3,-1
   1b218:	10c00526 	beq	r2,r3,1b230 <_write_r+0x50>
   1b21c:	dfc00217 	ldw	ra,8(sp)
   1b220:	dc400117 	ldw	r17,4(sp)
   1b224:	dc000017 	ldw	r16,0(sp)
   1b228:	dec00304 	addi	sp,sp,12
   1b22c:	f800283a 	ret
   1b230:	80c00017 	ldw	r3,0(r16)
   1b234:	183ff926 	beq	r3,zero,1b21c <__alt_data_end+0xfc01b21c>
   1b238:	88c00015 	stw	r3,0(r17)
   1b23c:	003ff706 	br	1b21c <__alt_data_end+0xfc01b21c>

0001b240 <_close_r>:
   1b240:	defffd04 	addi	sp,sp,-12
   1b244:	dc000015 	stw	r16,0(sp)
   1b248:	040000f4 	movhi	r16,3
   1b24c:	dc400115 	stw	r17,4(sp)
   1b250:	8403e104 	addi	r16,r16,3972
   1b254:	2023883a 	mov	r17,r4
   1b258:	2809883a 	mov	r4,r5
   1b25c:	dfc00215 	stw	ra,8(sp)
   1b260:	80000015 	stw	zero,0(r16)
   1b264:	001ee100 	call	1ee10 <close>
   1b268:	00ffffc4 	movi	r3,-1
   1b26c:	10c00526 	beq	r2,r3,1b284 <_close_r+0x44>
   1b270:	dfc00217 	ldw	ra,8(sp)
   1b274:	dc400117 	ldw	r17,4(sp)
   1b278:	dc000017 	ldw	r16,0(sp)
   1b27c:	dec00304 	addi	sp,sp,12
   1b280:	f800283a 	ret
   1b284:	80c00017 	ldw	r3,0(r16)
   1b288:	183ff926 	beq	r3,zero,1b270 <__alt_data_end+0xfc01b270>
   1b28c:	88c00015 	stw	r3,0(r17)
   1b290:	003ff706 	br	1b270 <__alt_data_end+0xfc01b270>

0001b294 <_calloc_r>:
   1b294:	defffe04 	addi	sp,sp,-8
   1b298:	2805883a 	mov	r2,r5
   1b29c:	dc000015 	stw	r16,0(sp)
   1b2a0:	300b883a 	mov	r5,r6
   1b2a4:	2021883a 	mov	r16,r4
   1b2a8:	1009883a 	mov	r4,r2
   1b2ac:	dfc00115 	stw	ra,4(sp)
   1b2b0:	000cda80 	call	cda8 <__mulsi3>
   1b2b4:	100b883a 	mov	r5,r2
   1b2b8:	8009883a 	mov	r4,r16
   1b2bc:	000e3500 	call	e350 <_malloc_r>
   1b2c0:	10002926 	beq	r2,zero,1b368 <_calloc_r+0xd4>
   1b2c4:	11bfff17 	ldw	r6,-4(r2)
   1b2c8:	1021883a 	mov	r16,r2
   1b2cc:	00bfff04 	movi	r2,-4
   1b2d0:	308c703a 	and	r6,r6,r2
   1b2d4:	00c00904 	movi	r3,36
   1b2d8:	308d883a 	add	r6,r6,r2
   1b2dc:	19801636 	bltu	r3,r6,1b338 <_calloc_r+0xa4>
   1b2e0:	008004c4 	movi	r2,19
   1b2e4:	11800b2e 	bgeu	r2,r6,1b314 <_calloc_r+0x80>
   1b2e8:	80000015 	stw	zero,0(r16)
   1b2ec:	80000115 	stw	zero,4(r16)
   1b2f0:	008006c4 	movi	r2,27
   1b2f4:	11801a2e 	bgeu	r2,r6,1b360 <_calloc_r+0xcc>
   1b2f8:	80000215 	stw	zero,8(r16)
   1b2fc:	80000315 	stw	zero,12(r16)
   1b300:	30c0151e 	bne	r6,r3,1b358 <_calloc_r+0xc4>
   1b304:	80000415 	stw	zero,16(r16)
   1b308:	80800604 	addi	r2,r16,24
   1b30c:	80000515 	stw	zero,20(r16)
   1b310:	00000106 	br	1b318 <_calloc_r+0x84>
   1b314:	8005883a 	mov	r2,r16
   1b318:	10000015 	stw	zero,0(r2)
   1b31c:	10000115 	stw	zero,4(r2)
   1b320:	10000215 	stw	zero,8(r2)
   1b324:	8005883a 	mov	r2,r16
   1b328:	dfc00117 	ldw	ra,4(sp)
   1b32c:	dc000017 	ldw	r16,0(sp)
   1b330:	dec00204 	addi	sp,sp,8
   1b334:	f800283a 	ret
   1b338:	000b883a 	mov	r5,zero
   1b33c:	8009883a 	mov	r4,r16
   1b340:	000eca40 	call	eca4 <memset>
   1b344:	8005883a 	mov	r2,r16
   1b348:	dfc00117 	ldw	ra,4(sp)
   1b34c:	dc000017 	ldw	r16,0(sp)
   1b350:	dec00204 	addi	sp,sp,8
   1b354:	f800283a 	ret
   1b358:	80800404 	addi	r2,r16,16
   1b35c:	003fee06 	br	1b318 <__alt_data_end+0xfc01b318>
   1b360:	80800204 	addi	r2,r16,8
   1b364:	003fec06 	br	1b318 <__alt_data_end+0xfc01b318>
   1b368:	0005883a 	mov	r2,zero
   1b36c:	003fee06 	br	1b328 <__alt_data_end+0xfc01b328>

0001b370 <_fclose_r>:
   1b370:	28003926 	beq	r5,zero,1b458 <_fclose_r+0xe8>
   1b374:	defffc04 	addi	sp,sp,-16
   1b378:	dc400115 	stw	r17,4(sp)
   1b37c:	dc000015 	stw	r16,0(sp)
   1b380:	dfc00315 	stw	ra,12(sp)
   1b384:	dc800215 	stw	r18,8(sp)
   1b388:	2023883a 	mov	r17,r4
   1b38c:	2821883a 	mov	r16,r5
   1b390:	20000226 	beq	r4,zero,1b39c <_fclose_r+0x2c>
   1b394:	20800e17 	ldw	r2,56(r4)
   1b398:	10002726 	beq	r2,zero,1b438 <_fclose_r+0xc8>
   1b39c:	8080030f 	ldh	r2,12(r16)
   1b3a0:	1000071e 	bne	r2,zero,1b3c0 <_fclose_r+0x50>
   1b3a4:	0005883a 	mov	r2,zero
   1b3a8:	dfc00317 	ldw	ra,12(sp)
   1b3ac:	dc800217 	ldw	r18,8(sp)
   1b3b0:	dc400117 	ldw	r17,4(sp)
   1b3b4:	dc000017 	ldw	r16,0(sp)
   1b3b8:	dec00404 	addi	sp,sp,16
   1b3bc:	f800283a 	ret
   1b3c0:	800b883a 	mov	r5,r16
   1b3c4:	8809883a 	mov	r4,r17
   1b3c8:	00155380 	call	15538 <__sflush_r>
   1b3cc:	1025883a 	mov	r18,r2
   1b3d0:	80800b17 	ldw	r2,44(r16)
   1b3d4:	10000426 	beq	r2,zero,1b3e8 <_fclose_r+0x78>
   1b3d8:	81400717 	ldw	r5,28(r16)
   1b3dc:	8809883a 	mov	r4,r17
   1b3e0:	103ee83a 	callr	r2
   1b3e4:	10001616 	blt	r2,zero,1b440 <_fclose_r+0xd0>
   1b3e8:	8080030b 	ldhu	r2,12(r16)
   1b3ec:	1080200c 	andi	r2,r2,128
   1b3f0:	1000151e 	bne	r2,zero,1b448 <_fclose_r+0xd8>
   1b3f4:	81400c17 	ldw	r5,48(r16)
   1b3f8:	28000526 	beq	r5,zero,1b410 <_fclose_r+0xa0>
   1b3fc:	80801004 	addi	r2,r16,64
   1b400:	28800226 	beq	r5,r2,1b40c <_fclose_r+0x9c>
   1b404:	8809883a 	mov	r4,r17
   1b408:	0015cb40 	call	15cb4 <_free_r>
   1b40c:	80000c15 	stw	zero,48(r16)
   1b410:	81401117 	ldw	r5,68(r16)
   1b414:	28000326 	beq	r5,zero,1b424 <_fclose_r+0xb4>
   1b418:	8809883a 	mov	r4,r17
   1b41c:	0015cb40 	call	15cb4 <_free_r>
   1b420:	80001115 	stw	zero,68(r16)
   1b424:	0015b500 	call	15b50 <__sfp_lock_acquire>
   1b428:	8000030d 	sth	zero,12(r16)
   1b42c:	0015b540 	call	15b54 <__sfp_lock_release>
   1b430:	9005883a 	mov	r2,r18
   1b434:	003fdc06 	br	1b3a8 <__alt_data_end+0xfc01b3a8>
   1b438:	0015b400 	call	15b40 <__sinit>
   1b43c:	003fd706 	br	1b39c <__alt_data_end+0xfc01b39c>
   1b440:	04bfffc4 	movi	r18,-1
   1b444:	003fe806 	br	1b3e8 <__alt_data_end+0xfc01b3e8>
   1b448:	81400417 	ldw	r5,16(r16)
   1b44c:	8809883a 	mov	r4,r17
   1b450:	0015cb40 	call	15cb4 <_free_r>
   1b454:	003fe706 	br	1b3f4 <__alt_data_end+0xfc01b3f4>
   1b458:	0005883a 	mov	r2,zero
   1b45c:	f800283a 	ret

0001b460 <fclose>:
   1b460:	008000f4 	movhi	r2,3
   1b464:	10b74b04 	addi	r2,r2,-8916
   1b468:	200b883a 	mov	r5,r4
   1b46c:	11000017 	ldw	r4,0(r2)
   1b470:	001b3701 	jmpi	1b370 <_fclose_r>

0001b474 <__fputwc>:
   1b474:	defff804 	addi	sp,sp,-32
   1b478:	dcc00415 	stw	r19,16(sp)
   1b47c:	dc800315 	stw	r18,12(sp)
   1b480:	dc000115 	stw	r16,4(sp)
   1b484:	dfc00715 	stw	ra,28(sp)
   1b488:	dd400615 	stw	r21,24(sp)
   1b48c:	dd000515 	stw	r20,20(sp)
   1b490:	dc400215 	stw	r17,8(sp)
   1b494:	2027883a 	mov	r19,r4
   1b498:	2825883a 	mov	r18,r5
   1b49c:	3021883a 	mov	r16,r6
   1b4a0:	001669c0 	call	1669c <__locale_mb_cur_max>
   1b4a4:	00c00044 	movi	r3,1
   1b4a8:	10c03e26 	beq	r2,r3,1b5a4 <__fputwc+0x130>
   1b4ac:	81c01704 	addi	r7,r16,92
   1b4b0:	900d883a 	mov	r6,r18
   1b4b4:	d80b883a 	mov	r5,sp
   1b4b8:	9809883a 	mov	r4,r19
   1b4bc:	001b7ec0 	call	1b7ec <_wcrtomb_r>
   1b4c0:	1029883a 	mov	r20,r2
   1b4c4:	00bfffc4 	movi	r2,-1
   1b4c8:	a0802026 	beq	r20,r2,1b54c <__fputwc+0xd8>
   1b4cc:	d9400003 	ldbu	r5,0(sp)
   1b4d0:	a0001c26 	beq	r20,zero,1b544 <__fputwc+0xd0>
   1b4d4:	0023883a 	mov	r17,zero
   1b4d8:	05400284 	movi	r21,10
   1b4dc:	00000906 	br	1b504 <__fputwc+0x90>
   1b4e0:	80800017 	ldw	r2,0(r16)
   1b4e4:	11400005 	stb	r5,0(r2)
   1b4e8:	80c00017 	ldw	r3,0(r16)
   1b4ec:	18c00044 	addi	r3,r3,1
   1b4f0:	80c00015 	stw	r3,0(r16)
   1b4f4:	8c400044 	addi	r17,r17,1
   1b4f8:	dc45883a 	add	r2,sp,r17
   1b4fc:	8d00112e 	bgeu	r17,r20,1b544 <__fputwc+0xd0>
   1b500:	11400003 	ldbu	r5,0(r2)
   1b504:	80c00217 	ldw	r3,8(r16)
   1b508:	18ffffc4 	addi	r3,r3,-1
   1b50c:	80c00215 	stw	r3,8(r16)
   1b510:	183ff30e 	bge	r3,zero,1b4e0 <__alt_data_end+0xfc01b4e0>
   1b514:	80800617 	ldw	r2,24(r16)
   1b518:	18801916 	blt	r3,r2,1b580 <__fputwc+0x10c>
   1b51c:	80800017 	ldw	r2,0(r16)
   1b520:	11400005 	stb	r5,0(r2)
   1b524:	80800017 	ldw	r2,0(r16)
   1b528:	10c00003 	ldbu	r3,0(r2)
   1b52c:	10800044 	addi	r2,r2,1
   1b530:	1d402326 	beq	r3,r21,1b5c0 <__fputwc+0x14c>
   1b534:	80800015 	stw	r2,0(r16)
   1b538:	8c400044 	addi	r17,r17,1
   1b53c:	dc45883a 	add	r2,sp,r17
   1b540:	8d3fef36 	bltu	r17,r20,1b500 <__alt_data_end+0xfc01b500>
   1b544:	9005883a 	mov	r2,r18
   1b548:	00000406 	br	1b55c <__fputwc+0xe8>
   1b54c:	80c0030b 	ldhu	r3,12(r16)
   1b550:	a005883a 	mov	r2,r20
   1b554:	18c01014 	ori	r3,r3,64
   1b558:	80c0030d 	sth	r3,12(r16)
   1b55c:	dfc00717 	ldw	ra,28(sp)
   1b560:	dd400617 	ldw	r21,24(sp)
   1b564:	dd000517 	ldw	r20,20(sp)
   1b568:	dcc00417 	ldw	r19,16(sp)
   1b56c:	dc800317 	ldw	r18,12(sp)
   1b570:	dc400217 	ldw	r17,8(sp)
   1b574:	dc000117 	ldw	r16,4(sp)
   1b578:	dec00804 	addi	sp,sp,32
   1b57c:	f800283a 	ret
   1b580:	800d883a 	mov	r6,r16
   1b584:	29403fcc 	andi	r5,r5,255
   1b588:	9809883a 	mov	r4,r19
   1b58c:	001b0880 	call	1b088 <__swbuf_r>
   1b590:	10bfffe0 	cmpeqi	r2,r2,-1
   1b594:	10803fcc 	andi	r2,r2,255
   1b598:	103fd626 	beq	r2,zero,1b4f4 <__alt_data_end+0xfc01b4f4>
   1b59c:	00bfffc4 	movi	r2,-1
   1b5a0:	003fee06 	br	1b55c <__alt_data_end+0xfc01b55c>
   1b5a4:	90ffffc4 	addi	r3,r18,-1
   1b5a8:	01003f84 	movi	r4,254
   1b5ac:	20ffbf36 	bltu	r4,r3,1b4ac <__alt_data_end+0xfc01b4ac>
   1b5b0:	900b883a 	mov	r5,r18
   1b5b4:	dc800005 	stb	r18,0(sp)
   1b5b8:	1029883a 	mov	r20,r2
   1b5bc:	003fc506 	br	1b4d4 <__alt_data_end+0xfc01b4d4>
   1b5c0:	800d883a 	mov	r6,r16
   1b5c4:	a80b883a 	mov	r5,r21
   1b5c8:	9809883a 	mov	r4,r19
   1b5cc:	001b0880 	call	1b088 <__swbuf_r>
   1b5d0:	10bfffe0 	cmpeqi	r2,r2,-1
   1b5d4:	003fef06 	br	1b594 <__alt_data_end+0xfc01b594>

0001b5d8 <_fputwc_r>:
   1b5d8:	3080030b 	ldhu	r2,12(r6)
   1b5dc:	10c8000c 	andi	r3,r2,8192
   1b5e0:	1800051e 	bne	r3,zero,1b5f8 <_fputwc_r+0x20>
   1b5e4:	30c01917 	ldw	r3,100(r6)
   1b5e8:	10880014 	ori	r2,r2,8192
   1b5ec:	3080030d 	sth	r2,12(r6)
   1b5f0:	18880014 	ori	r2,r3,8192
   1b5f4:	30801915 	stw	r2,100(r6)
   1b5f8:	001b4741 	jmpi	1b474 <__fputwc>

0001b5fc <fputwc>:
   1b5fc:	008000f4 	movhi	r2,3
   1b600:	defffc04 	addi	sp,sp,-16
   1b604:	10b74b04 	addi	r2,r2,-8916
   1b608:	dc000115 	stw	r16,4(sp)
   1b60c:	14000017 	ldw	r16,0(r2)
   1b610:	dc400215 	stw	r17,8(sp)
   1b614:	dfc00315 	stw	ra,12(sp)
   1b618:	2023883a 	mov	r17,r4
   1b61c:	80000226 	beq	r16,zero,1b628 <fputwc+0x2c>
   1b620:	80800e17 	ldw	r2,56(r16)
   1b624:	10001026 	beq	r2,zero,1b668 <fputwc+0x6c>
   1b628:	2880030b 	ldhu	r2,12(r5)
   1b62c:	10c8000c 	andi	r3,r2,8192
   1b630:	1800051e 	bne	r3,zero,1b648 <fputwc+0x4c>
   1b634:	28c01917 	ldw	r3,100(r5)
   1b638:	10880014 	ori	r2,r2,8192
   1b63c:	2880030d 	sth	r2,12(r5)
   1b640:	18880014 	ori	r2,r3,8192
   1b644:	28801915 	stw	r2,100(r5)
   1b648:	280d883a 	mov	r6,r5
   1b64c:	8009883a 	mov	r4,r16
   1b650:	880b883a 	mov	r5,r17
   1b654:	dfc00317 	ldw	ra,12(sp)
   1b658:	dc400217 	ldw	r17,8(sp)
   1b65c:	dc000117 	ldw	r16,4(sp)
   1b660:	dec00404 	addi	sp,sp,16
   1b664:	001b4741 	jmpi	1b474 <__fputwc>
   1b668:	8009883a 	mov	r4,r16
   1b66c:	d9400015 	stw	r5,0(sp)
   1b670:	0015b400 	call	15b40 <__sinit>
   1b674:	d9400017 	ldw	r5,0(sp)
   1b678:	003feb06 	br	1b628 <__alt_data_end+0xfc01b628>

0001b67c <_fstat_r>:
   1b67c:	defffd04 	addi	sp,sp,-12
   1b680:	2805883a 	mov	r2,r5
   1b684:	dc000015 	stw	r16,0(sp)
   1b688:	040000f4 	movhi	r16,3
   1b68c:	dc400115 	stw	r17,4(sp)
   1b690:	8403e104 	addi	r16,r16,3972
   1b694:	2023883a 	mov	r17,r4
   1b698:	300b883a 	mov	r5,r6
   1b69c:	1009883a 	mov	r4,r2
   1b6a0:	dfc00215 	stw	ra,8(sp)
   1b6a4:	80000015 	stw	zero,0(r16)
   1b6a8:	001ef840 	call	1ef84 <fstat>
   1b6ac:	00ffffc4 	movi	r3,-1
   1b6b0:	10c00526 	beq	r2,r3,1b6c8 <_fstat_r+0x4c>
   1b6b4:	dfc00217 	ldw	ra,8(sp)
   1b6b8:	dc400117 	ldw	r17,4(sp)
   1b6bc:	dc000017 	ldw	r16,0(sp)
   1b6c0:	dec00304 	addi	sp,sp,12
   1b6c4:	f800283a 	ret
   1b6c8:	80c00017 	ldw	r3,0(r16)
   1b6cc:	183ff926 	beq	r3,zero,1b6b4 <__alt_data_end+0xfc01b6b4>
   1b6d0:	88c00015 	stw	r3,0(r17)
   1b6d4:	003ff706 	br	1b6b4 <__alt_data_end+0xfc01b6b4>

0001b6d8 <_isatty_r>:
   1b6d8:	defffd04 	addi	sp,sp,-12
   1b6dc:	dc000015 	stw	r16,0(sp)
   1b6e0:	040000f4 	movhi	r16,3
   1b6e4:	dc400115 	stw	r17,4(sp)
   1b6e8:	8403e104 	addi	r16,r16,3972
   1b6ec:	2023883a 	mov	r17,r4
   1b6f0:	2809883a 	mov	r4,r5
   1b6f4:	dfc00215 	stw	ra,8(sp)
   1b6f8:	80000015 	stw	zero,0(r16)
   1b6fc:	001f0980 	call	1f098 <isatty>
   1b700:	00ffffc4 	movi	r3,-1
   1b704:	10c00526 	beq	r2,r3,1b71c <_isatty_r+0x44>
   1b708:	dfc00217 	ldw	ra,8(sp)
   1b70c:	dc400117 	ldw	r17,4(sp)
   1b710:	dc000017 	ldw	r16,0(sp)
   1b714:	dec00304 	addi	sp,sp,12
   1b718:	f800283a 	ret
   1b71c:	80c00017 	ldw	r3,0(r16)
   1b720:	183ff926 	beq	r3,zero,1b708 <__alt_data_end+0xfc01b708>
   1b724:	88c00015 	stw	r3,0(r17)
   1b728:	003ff706 	br	1b708 <__alt_data_end+0xfc01b708>

0001b72c <_lseek_r>:
   1b72c:	defffd04 	addi	sp,sp,-12
   1b730:	2805883a 	mov	r2,r5
   1b734:	dc000015 	stw	r16,0(sp)
   1b738:	040000f4 	movhi	r16,3
   1b73c:	dc400115 	stw	r17,4(sp)
   1b740:	300b883a 	mov	r5,r6
   1b744:	8403e104 	addi	r16,r16,3972
   1b748:	2023883a 	mov	r17,r4
   1b74c:	380d883a 	mov	r6,r7
   1b750:	1009883a 	mov	r4,r2
   1b754:	dfc00215 	stw	ra,8(sp)
   1b758:	80000015 	stw	zero,0(r16)
   1b75c:	001f3d80 	call	1f3d8 <lseek>
   1b760:	00ffffc4 	movi	r3,-1
   1b764:	10c00526 	beq	r2,r3,1b77c <_lseek_r+0x50>
   1b768:	dfc00217 	ldw	ra,8(sp)
   1b76c:	dc400117 	ldw	r17,4(sp)
   1b770:	dc000017 	ldw	r16,0(sp)
   1b774:	dec00304 	addi	sp,sp,12
   1b778:	f800283a 	ret
   1b77c:	80c00017 	ldw	r3,0(r16)
   1b780:	183ff926 	beq	r3,zero,1b768 <__alt_data_end+0xfc01b768>
   1b784:	88c00015 	stw	r3,0(r17)
   1b788:	003ff706 	br	1b768 <__alt_data_end+0xfc01b768>

0001b78c <_read_r>:
   1b78c:	defffd04 	addi	sp,sp,-12
   1b790:	2805883a 	mov	r2,r5
   1b794:	dc000015 	stw	r16,0(sp)
   1b798:	040000f4 	movhi	r16,3
   1b79c:	dc400115 	stw	r17,4(sp)
   1b7a0:	300b883a 	mov	r5,r6
   1b7a4:	8403e104 	addi	r16,r16,3972
   1b7a8:	2023883a 	mov	r17,r4
   1b7ac:	380d883a 	mov	r6,r7
   1b7b0:	1009883a 	mov	r4,r2
   1b7b4:	dfc00215 	stw	ra,8(sp)
   1b7b8:	80000015 	stw	zero,0(r16)
   1b7bc:	001f5b40 	call	1f5b4 <read>
   1b7c0:	00ffffc4 	movi	r3,-1
   1b7c4:	10c00526 	beq	r2,r3,1b7dc <_read_r+0x50>
   1b7c8:	dfc00217 	ldw	ra,8(sp)
   1b7cc:	dc400117 	ldw	r17,4(sp)
   1b7d0:	dc000017 	ldw	r16,0(sp)
   1b7d4:	dec00304 	addi	sp,sp,12
   1b7d8:	f800283a 	ret
   1b7dc:	80c00017 	ldw	r3,0(r16)
   1b7e0:	183ff926 	beq	r3,zero,1b7c8 <__alt_data_end+0xfc01b7c8>
   1b7e4:	88c00015 	stw	r3,0(r17)
   1b7e8:	003ff706 	br	1b7c8 <__alt_data_end+0xfc01b7c8>

0001b7ec <_wcrtomb_r>:
   1b7ec:	defff604 	addi	sp,sp,-40
   1b7f0:	008000f4 	movhi	r2,3
   1b7f4:	dc800815 	stw	r18,32(sp)
   1b7f8:	dc400715 	stw	r17,28(sp)
   1b7fc:	dc000615 	stw	r16,24(sp)
   1b800:	10b74f04 	addi	r2,r2,-8900
   1b804:	dfc00915 	stw	ra,36(sp)
   1b808:	2021883a 	mov	r16,r4
   1b80c:	3823883a 	mov	r17,r7
   1b810:	14800017 	ldw	r18,0(r2)
   1b814:	28001426 	beq	r5,zero,1b868 <_wcrtomb_r+0x7c>
   1b818:	d9400415 	stw	r5,16(sp)
   1b81c:	d9800515 	stw	r6,20(sp)
   1b820:	00166900 	call	16690 <__locale_charset>
   1b824:	d9800517 	ldw	r6,20(sp)
   1b828:	d9400417 	ldw	r5,16(sp)
   1b82c:	100f883a 	mov	r7,r2
   1b830:	dc400015 	stw	r17,0(sp)
   1b834:	8009883a 	mov	r4,r16
   1b838:	903ee83a 	callr	r18
   1b83c:	00ffffc4 	movi	r3,-1
   1b840:	10c0031e 	bne	r2,r3,1b850 <_wcrtomb_r+0x64>
   1b844:	88000015 	stw	zero,0(r17)
   1b848:	00c02284 	movi	r3,138
   1b84c:	80c00015 	stw	r3,0(r16)
   1b850:	dfc00917 	ldw	ra,36(sp)
   1b854:	dc800817 	ldw	r18,32(sp)
   1b858:	dc400717 	ldw	r17,28(sp)
   1b85c:	dc000617 	ldw	r16,24(sp)
   1b860:	dec00a04 	addi	sp,sp,40
   1b864:	f800283a 	ret
   1b868:	00166900 	call	16690 <__locale_charset>
   1b86c:	100f883a 	mov	r7,r2
   1b870:	dc400015 	stw	r17,0(sp)
   1b874:	000d883a 	mov	r6,zero
   1b878:	d9400104 	addi	r5,sp,4
   1b87c:	8009883a 	mov	r4,r16
   1b880:	903ee83a 	callr	r18
   1b884:	003fed06 	br	1b83c <__alt_data_end+0xfc01b83c>

0001b888 <wcrtomb>:
   1b888:	defff604 	addi	sp,sp,-40
   1b88c:	008000f4 	movhi	r2,3
   1b890:	dc800615 	stw	r18,24(sp)
   1b894:	dc400515 	stw	r17,20(sp)
   1b898:	10b74b04 	addi	r2,r2,-8916
   1b89c:	dfc00915 	stw	ra,36(sp)
   1b8a0:	dd000815 	stw	r20,32(sp)
   1b8a4:	dcc00715 	stw	r19,28(sp)
   1b8a8:	dc000415 	stw	r16,16(sp)
   1b8ac:	3025883a 	mov	r18,r6
   1b8b0:	14400017 	ldw	r17,0(r2)
   1b8b4:	20001926 	beq	r4,zero,1b91c <wcrtomb+0x94>
   1b8b8:	008000f4 	movhi	r2,3
   1b8bc:	10b74f04 	addi	r2,r2,-8900
   1b8c0:	15000017 	ldw	r20,0(r2)
   1b8c4:	2021883a 	mov	r16,r4
   1b8c8:	2827883a 	mov	r19,r5
   1b8cc:	00166900 	call	16690 <__locale_charset>
   1b8d0:	100f883a 	mov	r7,r2
   1b8d4:	dc800015 	stw	r18,0(sp)
   1b8d8:	980d883a 	mov	r6,r19
   1b8dc:	800b883a 	mov	r5,r16
   1b8e0:	8809883a 	mov	r4,r17
   1b8e4:	a03ee83a 	callr	r20
   1b8e8:	00ffffc4 	movi	r3,-1
   1b8ec:	10c0031e 	bne	r2,r3,1b8fc <wcrtomb+0x74>
   1b8f0:	90000015 	stw	zero,0(r18)
   1b8f4:	00c02284 	movi	r3,138
   1b8f8:	88c00015 	stw	r3,0(r17)
   1b8fc:	dfc00917 	ldw	ra,36(sp)
   1b900:	dd000817 	ldw	r20,32(sp)
   1b904:	dcc00717 	ldw	r19,28(sp)
   1b908:	dc800617 	ldw	r18,24(sp)
   1b90c:	dc400517 	ldw	r17,20(sp)
   1b910:	dc000417 	ldw	r16,16(sp)
   1b914:	dec00a04 	addi	sp,sp,40
   1b918:	f800283a 	ret
   1b91c:	008000f4 	movhi	r2,3
   1b920:	10b74f04 	addi	r2,r2,-8900
   1b924:	14000017 	ldw	r16,0(r2)
   1b928:	00166900 	call	16690 <__locale_charset>
   1b92c:	100f883a 	mov	r7,r2
   1b930:	dc800015 	stw	r18,0(sp)
   1b934:	000d883a 	mov	r6,zero
   1b938:	d9400104 	addi	r5,sp,4
   1b93c:	8809883a 	mov	r4,r17
   1b940:	803ee83a 	callr	r16
   1b944:	003fe806 	br	1b8e8 <__alt_data_end+0xfc01b8e8>

0001b948 <__ascii_wctomb>:
   1b948:	28000526 	beq	r5,zero,1b960 <__ascii_wctomb+0x18>
   1b94c:	00803fc4 	movi	r2,255
   1b950:	11800536 	bltu	r2,r6,1b968 <__ascii_wctomb+0x20>
   1b954:	29800005 	stb	r6,0(r5)
   1b958:	00800044 	movi	r2,1
   1b95c:	f800283a 	ret
   1b960:	0005883a 	mov	r2,zero
   1b964:	f800283a 	ret
   1b968:	00802284 	movi	r2,138
   1b96c:	20800015 	stw	r2,0(r4)
   1b970:	00bfffc4 	movi	r2,-1
   1b974:	f800283a 	ret

0001b978 <_wctomb_r>:
   1b978:	008000f4 	movhi	r2,3
   1b97c:	defff904 	addi	sp,sp,-28
   1b980:	10b74f04 	addi	r2,r2,-8900
   1b984:	dfc00615 	stw	ra,24(sp)
   1b988:	dc400515 	stw	r17,20(sp)
   1b98c:	dc000415 	stw	r16,16(sp)
   1b990:	3823883a 	mov	r17,r7
   1b994:	14000017 	ldw	r16,0(r2)
   1b998:	d9000115 	stw	r4,4(sp)
   1b99c:	d9400215 	stw	r5,8(sp)
   1b9a0:	d9800315 	stw	r6,12(sp)
   1b9a4:	00166900 	call	16690 <__locale_charset>
   1b9a8:	d9800317 	ldw	r6,12(sp)
   1b9ac:	d9400217 	ldw	r5,8(sp)
   1b9b0:	d9000117 	ldw	r4,4(sp)
   1b9b4:	100f883a 	mov	r7,r2
   1b9b8:	dc400015 	stw	r17,0(sp)
   1b9bc:	803ee83a 	callr	r16
   1b9c0:	dfc00617 	ldw	ra,24(sp)
   1b9c4:	dc400517 	ldw	r17,20(sp)
   1b9c8:	dc000417 	ldw	r16,16(sp)
   1b9cc:	dec00704 	addi	sp,sp,28
   1b9d0:	f800283a 	ret

0001b9d4 <__udivdi3>:
   1b9d4:	defff404 	addi	sp,sp,-48
   1b9d8:	dcc00515 	stw	r19,20(sp)
   1b9dc:	dc000215 	stw	r16,8(sp)
   1b9e0:	dfc00b15 	stw	ra,44(sp)
   1b9e4:	df000a15 	stw	fp,40(sp)
   1b9e8:	ddc00915 	stw	r23,36(sp)
   1b9ec:	dd800815 	stw	r22,32(sp)
   1b9f0:	dd400715 	stw	r21,28(sp)
   1b9f4:	dd000615 	stw	r20,24(sp)
   1b9f8:	dc800415 	stw	r18,16(sp)
   1b9fc:	dc400315 	stw	r17,12(sp)
   1ba00:	2027883a 	mov	r19,r4
   1ba04:	2821883a 	mov	r16,r5
   1ba08:	3800461e 	bne	r7,zero,1bb24 <__udivdi3+0x150>
   1ba0c:	3023883a 	mov	r17,r6
   1ba10:	2025883a 	mov	r18,r4
   1ba14:	2980572e 	bgeu	r5,r6,1bb74 <__udivdi3+0x1a0>
   1ba18:	00bfffd4 	movui	r2,65535
   1ba1c:	282d883a 	mov	r22,r5
   1ba20:	1180b236 	bltu	r2,r6,1bcec <__udivdi3+0x318>
   1ba24:	00803fc4 	movi	r2,255
   1ba28:	1185803a 	cmpltu	r2,r2,r6
   1ba2c:	100490fa 	slli	r2,r2,3
   1ba30:	3086d83a 	srl	r3,r6,r2
   1ba34:	010000f4 	movhi	r4,3
   1ba38:	212a0604 	addi	r4,r4,-22504
   1ba3c:	20c7883a 	add	r3,r4,r3
   1ba40:	18c00003 	ldbu	r3,0(r3)
   1ba44:	1885883a 	add	r2,r3,r2
   1ba48:	00c00804 	movi	r3,32
   1ba4c:	1887c83a 	sub	r3,r3,r2
   1ba50:	18000526 	beq	r3,zero,1ba68 <__udivdi3+0x94>
   1ba54:	80e0983a 	sll	r16,r16,r3
   1ba58:	9884d83a 	srl	r2,r19,r2
   1ba5c:	30e2983a 	sll	r17,r6,r3
   1ba60:	98e4983a 	sll	r18,r19,r3
   1ba64:	142cb03a 	or	r22,r2,r16
   1ba68:	882ad43a 	srli	r21,r17,16
   1ba6c:	b009883a 	mov	r4,r22
   1ba70:	8d3fffcc 	andi	r20,r17,65535
   1ba74:	a80b883a 	mov	r5,r21
   1ba78:	000cd500 	call	cd50 <__umodsi3>
   1ba7c:	b009883a 	mov	r4,r22
   1ba80:	a80b883a 	mov	r5,r21
   1ba84:	1027883a 	mov	r19,r2
   1ba88:	000ccec0 	call	ccec <__udivsi3>
   1ba8c:	100b883a 	mov	r5,r2
   1ba90:	a009883a 	mov	r4,r20
   1ba94:	102d883a 	mov	r22,r2
   1ba98:	000cda80 	call	cda8 <__mulsi3>
   1ba9c:	9826943a 	slli	r19,r19,16
   1baa0:	9006d43a 	srli	r3,r18,16
   1baa4:	1cc6b03a 	or	r3,r3,r19
   1baa8:	1880052e 	bgeu	r3,r2,1bac0 <__udivdi3+0xec>
   1baac:	1c47883a 	add	r3,r3,r17
   1bab0:	b13fffc4 	addi	r4,r22,-1
   1bab4:	1c400136 	bltu	r3,r17,1babc <__udivdi3+0xe8>
   1bab8:	18814236 	bltu	r3,r2,1bfc4 <__udivdi3+0x5f0>
   1babc:	202d883a 	mov	r22,r4
   1bac0:	18a1c83a 	sub	r16,r3,r2
   1bac4:	8009883a 	mov	r4,r16
   1bac8:	a80b883a 	mov	r5,r21
   1bacc:	000cd500 	call	cd50 <__umodsi3>
   1bad0:	1027883a 	mov	r19,r2
   1bad4:	8009883a 	mov	r4,r16
   1bad8:	a80b883a 	mov	r5,r21
   1badc:	9826943a 	slli	r19,r19,16
   1bae0:	000ccec0 	call	ccec <__udivsi3>
   1bae4:	100b883a 	mov	r5,r2
   1bae8:	a009883a 	mov	r4,r20
   1baec:	94bfffcc 	andi	r18,r18,65535
   1baf0:	1021883a 	mov	r16,r2
   1baf4:	94e4b03a 	or	r18,r18,r19
   1baf8:	000cda80 	call	cda8 <__mulsi3>
   1bafc:	9080052e 	bgeu	r18,r2,1bb14 <__udivdi3+0x140>
   1bb00:	8ca5883a 	add	r18,r17,r18
   1bb04:	80ffffc4 	addi	r3,r16,-1
   1bb08:	94410c36 	bltu	r18,r17,1bf3c <__udivdi3+0x568>
   1bb0c:	90810b2e 	bgeu	r18,r2,1bf3c <__udivdi3+0x568>
   1bb10:	843fff84 	addi	r16,r16,-2
   1bb14:	b004943a 	slli	r2,r22,16
   1bb18:	0007883a 	mov	r3,zero
   1bb1c:	1404b03a 	or	r2,r2,r16
   1bb20:	00005e06 	br	1bc9c <__udivdi3+0x2c8>
   1bb24:	29c05b36 	bltu	r5,r7,1bc94 <__udivdi3+0x2c0>
   1bb28:	00bfffd4 	movui	r2,65535
   1bb2c:	11c0672e 	bgeu	r2,r7,1bccc <__udivdi3+0x2f8>
   1bb30:	00804034 	movhi	r2,256
   1bb34:	10bfffc4 	addi	r2,r2,-1
   1bb38:	11c10a36 	bltu	r2,r7,1bf64 <__udivdi3+0x590>
   1bb3c:	00800404 	movi	r2,16
   1bb40:	3886d83a 	srl	r3,r7,r2
   1bb44:	010000f4 	movhi	r4,3
   1bb48:	212a0604 	addi	r4,r4,-22504
   1bb4c:	20c7883a 	add	r3,r4,r3
   1bb50:	18c00003 	ldbu	r3,0(r3)
   1bb54:	05c00804 	movi	r23,32
   1bb58:	1885883a 	add	r2,r3,r2
   1bb5c:	b8afc83a 	sub	r23,r23,r2
   1bb60:	b800671e 	bne	r23,zero,1bd00 <__udivdi3+0x32c>
   1bb64:	3c010536 	bltu	r7,r16,1bf7c <__udivdi3+0x5a8>
   1bb68:	9985403a 	cmpgeu	r2,r19,r6
   1bb6c:	0007883a 	mov	r3,zero
   1bb70:	00004a06 	br	1bc9c <__udivdi3+0x2c8>
   1bb74:	3000041e 	bne	r6,zero,1bb88 <__udivdi3+0x1b4>
   1bb78:	000b883a 	mov	r5,zero
   1bb7c:	01000044 	movi	r4,1
   1bb80:	000ccec0 	call	ccec <__udivsi3>
   1bb84:	1023883a 	mov	r17,r2
   1bb88:	00bfffd4 	movui	r2,65535
   1bb8c:	1440532e 	bgeu	r2,r17,1bcdc <__udivdi3+0x308>
   1bb90:	00804034 	movhi	r2,256
   1bb94:	10bfffc4 	addi	r2,r2,-1
   1bb98:	1440f436 	bltu	r2,r17,1bf6c <__udivdi3+0x598>
   1bb9c:	00800404 	movi	r2,16
   1bba0:	8886d83a 	srl	r3,r17,r2
   1bba4:	010000f4 	movhi	r4,3
   1bba8:	212a0604 	addi	r4,r4,-22504
   1bbac:	20c7883a 	add	r3,r4,r3
   1bbb0:	18c00003 	ldbu	r3,0(r3)
   1bbb4:	1885883a 	add	r2,r3,r2
   1bbb8:	00c00804 	movi	r3,32
   1bbbc:	1887c83a 	sub	r3,r3,r2
   1bbc0:	1800a51e 	bne	r3,zero,1be58 <__udivdi3+0x484>
   1bbc4:	882ad43a 	srli	r21,r17,16
   1bbc8:	8461c83a 	sub	r16,r16,r17
   1bbcc:	8d3fffcc 	andi	r20,r17,65535
   1bbd0:	00c00044 	movi	r3,1
   1bbd4:	a80b883a 	mov	r5,r21
   1bbd8:	8009883a 	mov	r4,r16
   1bbdc:	d8c00115 	stw	r3,4(sp)
   1bbe0:	000cd500 	call	cd50 <__umodsi3>
   1bbe4:	a80b883a 	mov	r5,r21
   1bbe8:	8009883a 	mov	r4,r16
   1bbec:	1027883a 	mov	r19,r2
   1bbf0:	000ccec0 	call	ccec <__udivsi3>
   1bbf4:	a00b883a 	mov	r5,r20
   1bbf8:	1009883a 	mov	r4,r2
   1bbfc:	102d883a 	mov	r22,r2
   1bc00:	000cda80 	call	cda8 <__mulsi3>
   1bc04:	9826943a 	slli	r19,r19,16
   1bc08:	900ed43a 	srli	r7,r18,16
   1bc0c:	d8c00117 	ldw	r3,4(sp)
   1bc10:	3cceb03a 	or	r7,r7,r19
   1bc14:	3880052e 	bgeu	r7,r2,1bc2c <__udivdi3+0x258>
   1bc18:	3c4f883a 	add	r7,r7,r17
   1bc1c:	b13fffc4 	addi	r4,r22,-1
   1bc20:	3c400136 	bltu	r7,r17,1bc28 <__udivdi3+0x254>
   1bc24:	3880e436 	bltu	r7,r2,1bfb8 <__udivdi3+0x5e4>
   1bc28:	202d883a 	mov	r22,r4
   1bc2c:	38a1c83a 	sub	r16,r7,r2
   1bc30:	8009883a 	mov	r4,r16
   1bc34:	a80b883a 	mov	r5,r21
   1bc38:	d8c00115 	stw	r3,4(sp)
   1bc3c:	000cd500 	call	cd50 <__umodsi3>
   1bc40:	1027883a 	mov	r19,r2
   1bc44:	8009883a 	mov	r4,r16
   1bc48:	a80b883a 	mov	r5,r21
   1bc4c:	9826943a 	slli	r19,r19,16
   1bc50:	000ccec0 	call	ccec <__udivsi3>
   1bc54:	a00b883a 	mov	r5,r20
   1bc58:	1009883a 	mov	r4,r2
   1bc5c:	94bfffcc 	andi	r18,r18,65535
   1bc60:	1021883a 	mov	r16,r2
   1bc64:	94e4b03a 	or	r18,r18,r19
   1bc68:	000cda80 	call	cda8 <__mulsi3>
   1bc6c:	d8c00117 	ldw	r3,4(sp)
   1bc70:	9080052e 	bgeu	r18,r2,1bc88 <__udivdi3+0x2b4>
   1bc74:	8ca5883a 	add	r18,r17,r18
   1bc78:	813fffc4 	addi	r4,r16,-1
   1bc7c:	9440ad36 	bltu	r18,r17,1bf34 <__udivdi3+0x560>
   1bc80:	9080ac2e 	bgeu	r18,r2,1bf34 <__udivdi3+0x560>
   1bc84:	843fff84 	addi	r16,r16,-2
   1bc88:	b004943a 	slli	r2,r22,16
   1bc8c:	1404b03a 	or	r2,r2,r16
   1bc90:	00000206 	br	1bc9c <__udivdi3+0x2c8>
   1bc94:	0007883a 	mov	r3,zero
   1bc98:	0005883a 	mov	r2,zero
   1bc9c:	dfc00b17 	ldw	ra,44(sp)
   1bca0:	df000a17 	ldw	fp,40(sp)
   1bca4:	ddc00917 	ldw	r23,36(sp)
   1bca8:	dd800817 	ldw	r22,32(sp)
   1bcac:	dd400717 	ldw	r21,28(sp)
   1bcb0:	dd000617 	ldw	r20,24(sp)
   1bcb4:	dcc00517 	ldw	r19,20(sp)
   1bcb8:	dc800417 	ldw	r18,16(sp)
   1bcbc:	dc400317 	ldw	r17,12(sp)
   1bcc0:	dc000217 	ldw	r16,8(sp)
   1bcc4:	dec00c04 	addi	sp,sp,48
   1bcc8:	f800283a 	ret
   1bccc:	00803fc4 	movi	r2,255
   1bcd0:	11c5803a 	cmpltu	r2,r2,r7
   1bcd4:	100490fa 	slli	r2,r2,3
   1bcd8:	003f9906 	br	1bb40 <__alt_data_end+0xfc01bb40>
   1bcdc:	00803fc4 	movi	r2,255
   1bce0:	1445803a 	cmpltu	r2,r2,r17
   1bce4:	100490fa 	slli	r2,r2,3
   1bce8:	003fad06 	br	1bba0 <__alt_data_end+0xfc01bba0>
   1bcec:	00804034 	movhi	r2,256
   1bcf0:	10bfffc4 	addi	r2,r2,-1
   1bcf4:	11809f36 	bltu	r2,r6,1bf74 <__udivdi3+0x5a0>
   1bcf8:	00800404 	movi	r2,16
   1bcfc:	003f4c06 	br	1ba30 <__alt_data_end+0xfc01ba30>
   1bd00:	3dce983a 	sll	r7,r7,r23
   1bd04:	30b8d83a 	srl	fp,r6,r2
   1bd08:	80a2d83a 	srl	r17,r16,r2
   1bd0c:	35cc983a 	sll	r6,r6,r23
   1bd10:	3f38b03a 	or	fp,r7,fp
   1bd14:	e024d43a 	srli	r18,fp,16
   1bd18:	9884d83a 	srl	r2,r19,r2
   1bd1c:	85e0983a 	sll	r16,r16,r23
   1bd20:	8809883a 	mov	r4,r17
   1bd24:	900b883a 	mov	r5,r18
   1bd28:	d9800015 	stw	r6,0(sp)
   1bd2c:	1420b03a 	or	r16,r2,r16
   1bd30:	000cd500 	call	cd50 <__umodsi3>
   1bd34:	900b883a 	mov	r5,r18
   1bd38:	8809883a 	mov	r4,r17
   1bd3c:	1029883a 	mov	r20,r2
   1bd40:	e5bfffcc 	andi	r22,fp,65535
   1bd44:	000ccec0 	call	ccec <__udivsi3>
   1bd48:	100b883a 	mov	r5,r2
   1bd4c:	b009883a 	mov	r4,r22
   1bd50:	102b883a 	mov	r21,r2
   1bd54:	000cda80 	call	cda8 <__mulsi3>
   1bd58:	a028943a 	slli	r20,r20,16
   1bd5c:	8006d43a 	srli	r3,r16,16
   1bd60:	1d06b03a 	or	r3,r3,r20
   1bd64:	1880042e 	bgeu	r3,r2,1bd78 <__udivdi3+0x3a4>
   1bd68:	1f07883a 	add	r3,r3,fp
   1bd6c:	a93fffc4 	addi	r4,r21,-1
   1bd70:	1f00892e 	bgeu	r3,fp,1bf98 <__udivdi3+0x5c4>
   1bd74:	202b883a 	mov	r21,r4
   1bd78:	18a3c83a 	sub	r17,r3,r2
   1bd7c:	8809883a 	mov	r4,r17
   1bd80:	900b883a 	mov	r5,r18
   1bd84:	000cd500 	call	cd50 <__umodsi3>
   1bd88:	1029883a 	mov	r20,r2
   1bd8c:	8809883a 	mov	r4,r17
   1bd90:	900b883a 	mov	r5,r18
   1bd94:	a028943a 	slli	r20,r20,16
   1bd98:	000ccec0 	call	ccec <__udivsi3>
   1bd9c:	100b883a 	mov	r5,r2
   1bda0:	b009883a 	mov	r4,r22
   1bda4:	843fffcc 	andi	r16,r16,65535
   1bda8:	1023883a 	mov	r17,r2
   1bdac:	8520b03a 	or	r16,r16,r20
   1bdb0:	000cda80 	call	cda8 <__mulsi3>
   1bdb4:	8080042e 	bgeu	r16,r2,1bdc8 <__udivdi3+0x3f4>
   1bdb8:	8721883a 	add	r16,r16,fp
   1bdbc:	88ffffc4 	addi	r3,r17,-1
   1bdc0:	8700712e 	bgeu	r16,fp,1bf88 <__udivdi3+0x5b4>
   1bdc4:	1823883a 	mov	r17,r3
   1bdc8:	a80e943a 	slli	r7,r21,16
   1bdcc:	d8c00017 	ldw	r3,0(sp)
   1bdd0:	80a1c83a 	sub	r16,r16,r2
   1bdd4:	3c64b03a 	or	r18,r7,r17
   1bdd8:	1d3fffcc 	andi	r20,r3,65535
   1bddc:	9022d43a 	srli	r17,r18,16
   1bde0:	95bfffcc 	andi	r22,r18,65535
   1bde4:	a00b883a 	mov	r5,r20
   1bde8:	b009883a 	mov	r4,r22
   1bdec:	182ad43a 	srli	r21,r3,16
   1bdf0:	000cda80 	call	cda8 <__mulsi3>
   1bdf4:	a00b883a 	mov	r5,r20
   1bdf8:	8809883a 	mov	r4,r17
   1bdfc:	1039883a 	mov	fp,r2
   1be00:	000cda80 	call	cda8 <__mulsi3>
   1be04:	8809883a 	mov	r4,r17
   1be08:	a80b883a 	mov	r5,r21
   1be0c:	1029883a 	mov	r20,r2
   1be10:	000cda80 	call	cda8 <__mulsi3>
   1be14:	a80b883a 	mov	r5,r21
   1be18:	b009883a 	mov	r4,r22
   1be1c:	1023883a 	mov	r17,r2
   1be20:	000cda80 	call	cda8 <__mulsi3>
   1be24:	e006d43a 	srli	r3,fp,16
   1be28:	1505883a 	add	r2,r2,r20
   1be2c:	1887883a 	add	r3,r3,r2
   1be30:	1d00022e 	bgeu	r3,r20,1be3c <__udivdi3+0x468>
   1be34:	00800074 	movhi	r2,1
   1be38:	88a3883a 	add	r17,r17,r2
   1be3c:	1804d43a 	srli	r2,r3,16
   1be40:	1463883a 	add	r17,r2,r17
   1be44:	84404436 	bltu	r16,r17,1bf58 <__udivdi3+0x584>
   1be48:	84403e26 	beq	r16,r17,1bf44 <__udivdi3+0x570>
   1be4c:	9005883a 	mov	r2,r18
   1be50:	0007883a 	mov	r3,zero
   1be54:	003f9106 	br	1bc9c <__alt_data_end+0xfc01bc9c>
   1be58:	88e2983a 	sll	r17,r17,r3
   1be5c:	80aed83a 	srl	r23,r16,r2
   1be60:	80e0983a 	sll	r16,r16,r3
   1be64:	882ad43a 	srli	r21,r17,16
   1be68:	9884d83a 	srl	r2,r19,r2
   1be6c:	b809883a 	mov	r4,r23
   1be70:	a80b883a 	mov	r5,r21
   1be74:	98e4983a 	sll	r18,r19,r3
   1be78:	142cb03a 	or	r22,r2,r16
   1be7c:	000cd500 	call	cd50 <__umodsi3>
   1be80:	b809883a 	mov	r4,r23
   1be84:	a80b883a 	mov	r5,r21
   1be88:	1027883a 	mov	r19,r2
   1be8c:	8d3fffcc 	andi	r20,r17,65535
   1be90:	000ccec0 	call	ccec <__udivsi3>
   1be94:	a009883a 	mov	r4,r20
   1be98:	100b883a 	mov	r5,r2
   1be9c:	102f883a 	mov	r23,r2
   1bea0:	000cda80 	call	cda8 <__mulsi3>
   1bea4:	9826943a 	slli	r19,r19,16
   1bea8:	b008d43a 	srli	r4,r22,16
   1beac:	24c8b03a 	or	r4,r4,r19
   1beb0:	2080062e 	bgeu	r4,r2,1becc <__udivdi3+0x4f8>
   1beb4:	2449883a 	add	r4,r4,r17
   1beb8:	b8ffffc4 	addi	r3,r23,-1
   1bebc:	24403c36 	bltu	r4,r17,1bfb0 <__udivdi3+0x5dc>
   1bec0:	20803b2e 	bgeu	r4,r2,1bfb0 <__udivdi3+0x5dc>
   1bec4:	bdffff84 	addi	r23,r23,-2
   1bec8:	2449883a 	add	r4,r4,r17
   1becc:	20a1c83a 	sub	r16,r4,r2
   1bed0:	a80b883a 	mov	r5,r21
   1bed4:	8009883a 	mov	r4,r16
   1bed8:	000cd500 	call	cd50 <__umodsi3>
   1bedc:	a80b883a 	mov	r5,r21
   1bee0:	8009883a 	mov	r4,r16
   1bee4:	1027883a 	mov	r19,r2
   1bee8:	000ccec0 	call	ccec <__udivsi3>
   1beec:	a009883a 	mov	r4,r20
   1bef0:	100b883a 	mov	r5,r2
   1bef4:	9826943a 	slli	r19,r19,16
   1bef8:	1039883a 	mov	fp,r2
   1befc:	000cda80 	call	cda8 <__mulsi3>
   1bf00:	b13fffcc 	andi	r4,r22,65535
   1bf04:	24c8b03a 	or	r4,r4,r19
   1bf08:	2080062e 	bgeu	r4,r2,1bf24 <__udivdi3+0x550>
   1bf0c:	2449883a 	add	r4,r4,r17
   1bf10:	e0ffffc4 	addi	r3,fp,-1
   1bf14:	24402436 	bltu	r4,r17,1bfa8 <__udivdi3+0x5d4>
   1bf18:	2080232e 	bgeu	r4,r2,1bfa8 <__udivdi3+0x5d4>
   1bf1c:	e73fff84 	addi	fp,fp,-2
   1bf20:	2449883a 	add	r4,r4,r17
   1bf24:	b82e943a 	slli	r23,r23,16
   1bf28:	20a1c83a 	sub	r16,r4,r2
   1bf2c:	bf06b03a 	or	r3,r23,fp
   1bf30:	003f2806 	br	1bbd4 <__alt_data_end+0xfc01bbd4>
   1bf34:	2021883a 	mov	r16,r4
   1bf38:	003f5306 	br	1bc88 <__alt_data_end+0xfc01bc88>
   1bf3c:	1821883a 	mov	r16,r3
   1bf40:	003ef406 	br	1bb14 <__alt_data_end+0xfc01bb14>
   1bf44:	1806943a 	slli	r3,r3,16
   1bf48:	9de6983a 	sll	r19,r19,r23
   1bf4c:	e73fffcc 	andi	fp,fp,65535
   1bf50:	1f07883a 	add	r3,r3,fp
   1bf54:	98ffbd2e 	bgeu	r19,r3,1be4c <__alt_data_end+0xfc01be4c>
   1bf58:	90bfffc4 	addi	r2,r18,-1
   1bf5c:	0007883a 	mov	r3,zero
   1bf60:	003f4e06 	br	1bc9c <__alt_data_end+0xfc01bc9c>
   1bf64:	00800604 	movi	r2,24
   1bf68:	003ef506 	br	1bb40 <__alt_data_end+0xfc01bb40>
   1bf6c:	00800604 	movi	r2,24
   1bf70:	003f0b06 	br	1bba0 <__alt_data_end+0xfc01bba0>
   1bf74:	00800604 	movi	r2,24
   1bf78:	003ead06 	br	1ba30 <__alt_data_end+0xfc01ba30>
   1bf7c:	0007883a 	mov	r3,zero
   1bf80:	00800044 	movi	r2,1
   1bf84:	003f4506 	br	1bc9c <__alt_data_end+0xfc01bc9c>
   1bf88:	80bf8e2e 	bgeu	r16,r2,1bdc4 <__alt_data_end+0xfc01bdc4>
   1bf8c:	8c7fff84 	addi	r17,r17,-2
   1bf90:	8721883a 	add	r16,r16,fp
   1bf94:	003f8c06 	br	1bdc8 <__alt_data_end+0xfc01bdc8>
   1bf98:	18bf762e 	bgeu	r3,r2,1bd74 <__alt_data_end+0xfc01bd74>
   1bf9c:	ad7fff84 	addi	r21,r21,-2
   1bfa0:	1f07883a 	add	r3,r3,fp
   1bfa4:	003f7406 	br	1bd78 <__alt_data_end+0xfc01bd78>
   1bfa8:	1839883a 	mov	fp,r3
   1bfac:	003fdd06 	br	1bf24 <__alt_data_end+0xfc01bf24>
   1bfb0:	182f883a 	mov	r23,r3
   1bfb4:	003fc506 	br	1becc <__alt_data_end+0xfc01becc>
   1bfb8:	b5bfff84 	addi	r22,r22,-2
   1bfbc:	3c4f883a 	add	r7,r7,r17
   1bfc0:	003f1a06 	br	1bc2c <__alt_data_end+0xfc01bc2c>
   1bfc4:	b5bfff84 	addi	r22,r22,-2
   1bfc8:	1c47883a 	add	r3,r3,r17
   1bfcc:	003ebc06 	br	1bac0 <__alt_data_end+0xfc01bac0>

0001bfd0 <__umoddi3>:
   1bfd0:	defff304 	addi	sp,sp,-52
   1bfd4:	df000b15 	stw	fp,44(sp)
   1bfd8:	dc400415 	stw	r17,16(sp)
   1bfdc:	dc000315 	stw	r16,12(sp)
   1bfe0:	dfc00c15 	stw	ra,48(sp)
   1bfe4:	ddc00a15 	stw	r23,40(sp)
   1bfe8:	dd800915 	stw	r22,36(sp)
   1bfec:	dd400815 	stw	r21,32(sp)
   1bff0:	dd000715 	stw	r20,28(sp)
   1bff4:	dcc00615 	stw	r19,24(sp)
   1bff8:	dc800515 	stw	r18,20(sp)
   1bffc:	2021883a 	mov	r16,r4
   1c000:	2823883a 	mov	r17,r5
   1c004:	2839883a 	mov	fp,r5
   1c008:	3800401e 	bne	r7,zero,1c10c <__umoddi3+0x13c>
   1c00c:	3027883a 	mov	r19,r6
   1c010:	2029883a 	mov	r20,r4
   1c014:	2980552e 	bgeu	r5,r6,1c16c <__umoddi3+0x19c>
   1c018:	00bfffd4 	movui	r2,65535
   1c01c:	1180a236 	bltu	r2,r6,1c2a8 <__umoddi3+0x2d8>
   1c020:	01003fc4 	movi	r4,255
   1c024:	2189803a 	cmpltu	r4,r4,r6
   1c028:	200890fa 	slli	r4,r4,3
   1c02c:	3104d83a 	srl	r2,r6,r4
   1c030:	00c000f4 	movhi	r3,3
   1c034:	18ea0604 	addi	r3,r3,-22504
   1c038:	1885883a 	add	r2,r3,r2
   1c03c:	10c00003 	ldbu	r3,0(r2)
   1c040:	00800804 	movi	r2,32
   1c044:	1909883a 	add	r4,r3,r4
   1c048:	1125c83a 	sub	r18,r2,r4
   1c04c:	90000526 	beq	r18,zero,1c064 <__umoddi3+0x94>
   1c050:	8ca2983a 	sll	r17,r17,r18
   1c054:	8108d83a 	srl	r4,r16,r4
   1c058:	34a6983a 	sll	r19,r6,r18
   1c05c:	84a8983a 	sll	r20,r16,r18
   1c060:	2478b03a 	or	fp,r4,r17
   1c064:	982cd43a 	srli	r22,r19,16
   1c068:	e009883a 	mov	r4,fp
   1c06c:	9dffffcc 	andi	r23,r19,65535
   1c070:	b00b883a 	mov	r5,r22
   1c074:	000cd500 	call	cd50 <__umodsi3>
   1c078:	b00b883a 	mov	r5,r22
   1c07c:	e009883a 	mov	r4,fp
   1c080:	102b883a 	mov	r21,r2
   1c084:	000ccec0 	call	ccec <__udivsi3>
   1c088:	100b883a 	mov	r5,r2
   1c08c:	b809883a 	mov	r4,r23
   1c090:	000cda80 	call	cda8 <__mulsi3>
   1c094:	a82a943a 	slli	r21,r21,16
   1c098:	a006d43a 	srli	r3,r20,16
   1c09c:	1d46b03a 	or	r3,r3,r21
   1c0a0:	1880032e 	bgeu	r3,r2,1c0b0 <__umoddi3+0xe0>
   1c0a4:	1cc7883a 	add	r3,r3,r19
   1c0a8:	1cc00136 	bltu	r3,r19,1c0b0 <__umoddi3+0xe0>
   1c0ac:	18813136 	bltu	r3,r2,1c574 <__umoddi3+0x5a4>
   1c0b0:	18a1c83a 	sub	r16,r3,r2
   1c0b4:	b00b883a 	mov	r5,r22
   1c0b8:	8009883a 	mov	r4,r16
   1c0bc:	000cd500 	call	cd50 <__umodsi3>
   1c0c0:	b00b883a 	mov	r5,r22
   1c0c4:	8009883a 	mov	r4,r16
   1c0c8:	1023883a 	mov	r17,r2
   1c0cc:	000ccec0 	call	ccec <__udivsi3>
   1c0d0:	100b883a 	mov	r5,r2
   1c0d4:	b809883a 	mov	r4,r23
   1c0d8:	8822943a 	slli	r17,r17,16
   1c0dc:	000cda80 	call	cda8 <__mulsi3>
   1c0e0:	a0ffffcc 	andi	r3,r20,65535
   1c0e4:	1c46b03a 	or	r3,r3,r17
   1c0e8:	1880042e 	bgeu	r3,r2,1c0fc <__umoddi3+0x12c>
   1c0ec:	1cc7883a 	add	r3,r3,r19
   1c0f0:	1cc00236 	bltu	r3,r19,1c0fc <__umoddi3+0x12c>
   1c0f4:	1880012e 	bgeu	r3,r2,1c0fc <__umoddi3+0x12c>
   1c0f8:	1cc7883a 	add	r3,r3,r19
   1c0fc:	1885c83a 	sub	r2,r3,r2
   1c100:	1484d83a 	srl	r2,r2,r18
   1c104:	0007883a 	mov	r3,zero
   1c108:	00005306 	br	1c258 <__umoddi3+0x288>
   1c10c:	29c05036 	bltu	r5,r7,1c250 <__umoddi3+0x280>
   1c110:	00bfffd4 	movui	r2,65535
   1c114:	11c05c2e 	bgeu	r2,r7,1c288 <__umoddi3+0x2b8>
   1c118:	00804034 	movhi	r2,256
   1c11c:	10bfffc4 	addi	r2,r2,-1
   1c120:	11c10636 	bltu	r2,r7,1c53c <__umoddi3+0x56c>
   1c124:	01000404 	movi	r4,16
   1c128:	3904d83a 	srl	r2,r7,r4
   1c12c:	00c000f4 	movhi	r3,3
   1c130:	18ea0604 	addi	r3,r3,-22504
   1c134:	1885883a 	add	r2,r3,r2
   1c138:	14c00003 	ldbu	r19,0(r2)
   1c13c:	00c00804 	movi	r3,32
   1c140:	9927883a 	add	r19,r19,r4
   1c144:	1ce9c83a 	sub	r20,r3,r19
   1c148:	a0005c1e 	bne	r20,zero,1c2bc <__umoddi3+0x2ec>
   1c14c:	3c400136 	bltu	r7,r17,1c154 <__umoddi3+0x184>
   1c150:	81810a36 	bltu	r16,r6,1c57c <__umoddi3+0x5ac>
   1c154:	8185c83a 	sub	r2,r16,r6
   1c158:	89e3c83a 	sub	r17,r17,r7
   1c15c:	8089803a 	cmpltu	r4,r16,r2
   1c160:	8939c83a 	sub	fp,r17,r4
   1c164:	e007883a 	mov	r3,fp
   1c168:	00003b06 	br	1c258 <__umoddi3+0x288>
   1c16c:	3000041e 	bne	r6,zero,1c180 <__umoddi3+0x1b0>
   1c170:	000b883a 	mov	r5,zero
   1c174:	01000044 	movi	r4,1
   1c178:	000ccec0 	call	ccec <__udivsi3>
   1c17c:	1027883a 	mov	r19,r2
   1c180:	00bfffd4 	movui	r2,65535
   1c184:	14c0442e 	bgeu	r2,r19,1c298 <__umoddi3+0x2c8>
   1c188:	00804034 	movhi	r2,256
   1c18c:	10bfffc4 	addi	r2,r2,-1
   1c190:	14c0ec36 	bltu	r2,r19,1c544 <__umoddi3+0x574>
   1c194:	00800404 	movi	r2,16
   1c198:	9886d83a 	srl	r3,r19,r2
   1c19c:	010000f4 	movhi	r4,3
   1c1a0:	212a0604 	addi	r4,r4,-22504
   1c1a4:	20c7883a 	add	r3,r4,r3
   1c1a8:	18c00003 	ldbu	r3,0(r3)
   1c1ac:	1887883a 	add	r3,r3,r2
   1c1b0:	00800804 	movi	r2,32
   1c1b4:	10e5c83a 	sub	r18,r2,r3
   1c1b8:	9000ab1e 	bne	r18,zero,1c468 <__umoddi3+0x498>
   1c1bc:	982cd43a 	srli	r22,r19,16
   1c1c0:	8ce3c83a 	sub	r17,r17,r19
   1c1c4:	9dffffcc 	andi	r23,r19,65535
   1c1c8:	b00b883a 	mov	r5,r22
   1c1cc:	8809883a 	mov	r4,r17
   1c1d0:	000cd500 	call	cd50 <__umodsi3>
   1c1d4:	b00b883a 	mov	r5,r22
   1c1d8:	8809883a 	mov	r4,r17
   1c1dc:	102b883a 	mov	r21,r2
   1c1e0:	000ccec0 	call	ccec <__udivsi3>
   1c1e4:	b80b883a 	mov	r5,r23
   1c1e8:	1009883a 	mov	r4,r2
   1c1ec:	000cda80 	call	cda8 <__mulsi3>
   1c1f0:	a82a943a 	slli	r21,r21,16
   1c1f4:	a006d43a 	srli	r3,r20,16
   1c1f8:	1d46b03a 	or	r3,r3,r21
   1c1fc:	1880042e 	bgeu	r3,r2,1c210 <__umoddi3+0x240>
   1c200:	1cc7883a 	add	r3,r3,r19
   1c204:	1cc00236 	bltu	r3,r19,1c210 <__umoddi3+0x240>
   1c208:	1880012e 	bgeu	r3,r2,1c210 <__umoddi3+0x240>
   1c20c:	1cc7883a 	add	r3,r3,r19
   1c210:	18a1c83a 	sub	r16,r3,r2
   1c214:	b00b883a 	mov	r5,r22
   1c218:	8009883a 	mov	r4,r16
   1c21c:	000cd500 	call	cd50 <__umodsi3>
   1c220:	1023883a 	mov	r17,r2
   1c224:	b00b883a 	mov	r5,r22
   1c228:	8009883a 	mov	r4,r16
   1c22c:	000ccec0 	call	ccec <__udivsi3>
   1c230:	8822943a 	slli	r17,r17,16
   1c234:	b80b883a 	mov	r5,r23
   1c238:	1009883a 	mov	r4,r2
   1c23c:	000cda80 	call	cda8 <__mulsi3>
   1c240:	a53fffcc 	andi	r20,r20,65535
   1c244:	a446b03a 	or	r3,r20,r17
   1c248:	18bfac2e 	bgeu	r3,r2,1c0fc <__alt_data_end+0xfc01c0fc>
   1c24c:	003fa706 	br	1c0ec <__alt_data_end+0xfc01c0ec>
   1c250:	2005883a 	mov	r2,r4
   1c254:	2807883a 	mov	r3,r5
   1c258:	dfc00c17 	ldw	ra,48(sp)
   1c25c:	df000b17 	ldw	fp,44(sp)
   1c260:	ddc00a17 	ldw	r23,40(sp)
   1c264:	dd800917 	ldw	r22,36(sp)
   1c268:	dd400817 	ldw	r21,32(sp)
   1c26c:	dd000717 	ldw	r20,28(sp)
   1c270:	dcc00617 	ldw	r19,24(sp)
   1c274:	dc800517 	ldw	r18,20(sp)
   1c278:	dc400417 	ldw	r17,16(sp)
   1c27c:	dc000317 	ldw	r16,12(sp)
   1c280:	dec00d04 	addi	sp,sp,52
   1c284:	f800283a 	ret
   1c288:	04c03fc4 	movi	r19,255
   1c28c:	99c9803a 	cmpltu	r4,r19,r7
   1c290:	200890fa 	slli	r4,r4,3
   1c294:	003fa406 	br	1c128 <__alt_data_end+0xfc01c128>
   1c298:	00803fc4 	movi	r2,255
   1c29c:	14c5803a 	cmpltu	r2,r2,r19
   1c2a0:	100490fa 	slli	r2,r2,3
   1c2a4:	003fbc06 	br	1c198 <__alt_data_end+0xfc01c198>
   1c2a8:	00804034 	movhi	r2,256
   1c2ac:	10bfffc4 	addi	r2,r2,-1
   1c2b0:	1180a636 	bltu	r2,r6,1c54c <__umoddi3+0x57c>
   1c2b4:	01000404 	movi	r4,16
   1c2b8:	003f5c06 	br	1c02c <__alt_data_end+0xfc01c02c>
   1c2bc:	3d0e983a 	sll	r7,r7,r20
   1c2c0:	34ead83a 	srl	r21,r6,r19
   1c2c4:	8cc6d83a 	srl	r3,r17,r19
   1c2c8:	8d10983a 	sll	r8,r17,r20
   1c2cc:	3d6ab03a 	or	r21,r7,r21
   1c2d0:	a82cd43a 	srli	r22,r21,16
   1c2d4:	84e2d83a 	srl	r17,r16,r19
   1c2d8:	1809883a 	mov	r4,r3
   1c2dc:	b00b883a 	mov	r5,r22
   1c2e0:	8a22b03a 	or	r17,r17,r8
   1c2e4:	3524983a 	sll	r18,r6,r20
   1c2e8:	dc400015 	stw	r17,0(sp)
   1c2ec:	d8c00115 	stw	r3,4(sp)
   1c2f0:	000cd500 	call	cd50 <__umodsi3>
   1c2f4:	d8c00117 	ldw	r3,4(sp)
   1c2f8:	b00b883a 	mov	r5,r22
   1c2fc:	1039883a 	mov	fp,r2
   1c300:	1809883a 	mov	r4,r3
   1c304:	000ccec0 	call	ccec <__udivsi3>
   1c308:	adffffcc 	andi	r23,r21,65535
   1c30c:	100b883a 	mov	r5,r2
   1c310:	b809883a 	mov	r4,r23
   1c314:	1023883a 	mov	r17,r2
   1c318:	000cda80 	call	cda8 <__mulsi3>
   1c31c:	d9400017 	ldw	r5,0(sp)
   1c320:	e008943a 	slli	r4,fp,16
   1c324:	8520983a 	sll	r16,r16,r20
   1c328:	2806d43a 	srli	r3,r5,16
   1c32c:	1906b03a 	or	r3,r3,r4
   1c330:	1880042e 	bgeu	r3,r2,1c344 <__umoddi3+0x374>
   1c334:	1d47883a 	add	r3,r3,r21
   1c338:	893fffc4 	addi	r4,r17,-1
   1c33c:	1d40892e 	bgeu	r3,r21,1c564 <__umoddi3+0x594>
   1c340:	2023883a 	mov	r17,r4
   1c344:	18b9c83a 	sub	fp,r3,r2
   1c348:	b00b883a 	mov	r5,r22
   1c34c:	e009883a 	mov	r4,fp
   1c350:	000cd500 	call	cd50 <__umodsi3>
   1c354:	b00b883a 	mov	r5,r22
   1c358:	e009883a 	mov	r4,fp
   1c35c:	d8800215 	stw	r2,8(sp)
   1c360:	000ccec0 	call	ccec <__udivsi3>
   1c364:	100b883a 	mov	r5,r2
   1c368:	b809883a 	mov	r4,r23
   1c36c:	102d883a 	mov	r22,r2
   1c370:	000cda80 	call	cda8 <__mulsi3>
   1c374:	d9800217 	ldw	r6,8(sp)
   1c378:	d8c00017 	ldw	r3,0(sp)
   1c37c:	300c943a 	slli	r6,r6,16
   1c380:	1a3fffcc 	andi	r8,r3,65535
   1c384:	4190b03a 	or	r8,r8,r6
   1c388:	4080042e 	bgeu	r8,r2,1c39c <__umoddi3+0x3cc>
   1c38c:	4551883a 	add	r8,r8,r21
   1c390:	b0ffffc4 	addi	r3,r22,-1
   1c394:	45406f2e 	bgeu	r8,r21,1c554 <__umoddi3+0x584>
   1c398:	182d883a 	mov	r22,r3
   1c39c:	880e943a 	slli	r7,r17,16
   1c3a0:	9006d43a 	srli	r3,r18,16
   1c3a4:	91bfffcc 	andi	r6,r18,65535
   1c3a8:	3dacb03a 	or	r22,r7,r22
   1c3ac:	b02ed43a 	srli	r23,r22,16
   1c3b0:	b5bfffcc 	andi	r22,r22,65535
   1c3b4:	300b883a 	mov	r5,r6
   1c3b8:	b009883a 	mov	r4,r22
   1c3bc:	40a3c83a 	sub	r17,r8,r2
   1c3c0:	d8c00115 	stw	r3,4(sp)
   1c3c4:	d9800215 	stw	r6,8(sp)
   1c3c8:	000cda80 	call	cda8 <__mulsi3>
   1c3cc:	d9800217 	ldw	r6,8(sp)
   1c3d0:	b809883a 	mov	r4,r23
   1c3d4:	1039883a 	mov	fp,r2
   1c3d8:	300b883a 	mov	r5,r6
   1c3dc:	000cda80 	call	cda8 <__mulsi3>
   1c3e0:	d8c00117 	ldw	r3,4(sp)
   1c3e4:	b809883a 	mov	r4,r23
   1c3e8:	d8800215 	stw	r2,8(sp)
   1c3ec:	180b883a 	mov	r5,r3
   1c3f0:	000cda80 	call	cda8 <__mulsi3>
   1c3f4:	d8c00117 	ldw	r3,4(sp)
   1c3f8:	b009883a 	mov	r4,r22
   1c3fc:	102f883a 	mov	r23,r2
   1c400:	180b883a 	mov	r5,r3
   1c404:	000cda80 	call	cda8 <__mulsi3>
   1c408:	d9800217 	ldw	r6,8(sp)
   1c40c:	e006d43a 	srli	r3,fp,16
   1c410:	1185883a 	add	r2,r2,r6
   1c414:	1885883a 	add	r2,r3,r2
   1c418:	1180022e 	bgeu	r2,r6,1c424 <__umoddi3+0x454>
   1c41c:	00c00074 	movhi	r3,1
   1c420:	b8ef883a 	add	r23,r23,r3
   1c424:	1006d43a 	srli	r3,r2,16
   1c428:	1004943a 	slli	r2,r2,16
   1c42c:	e73fffcc 	andi	fp,fp,65535
   1c430:	1dc7883a 	add	r3,r3,r23
   1c434:	1739883a 	add	fp,r2,fp
   1c438:	88c03a36 	bltu	r17,r3,1c524 <__umoddi3+0x554>
   1c43c:	88c05126 	beq	r17,r3,1c584 <__umoddi3+0x5b4>
   1c440:	88c9c83a 	sub	r4,r17,r3
   1c444:	e00f883a 	mov	r7,fp
   1c448:	81cfc83a 	sub	r7,r16,r7
   1c44c:	81c7803a 	cmpltu	r3,r16,r7
   1c450:	20c7c83a 	sub	r3,r4,r3
   1c454:	1cc4983a 	sll	r2,r3,r19
   1c458:	3d0ed83a 	srl	r7,r7,r20
   1c45c:	1d06d83a 	srl	r3,r3,r20
   1c460:	11c4b03a 	or	r2,r2,r7
   1c464:	003f7c06 	br	1c258 <__alt_data_end+0xfc01c258>
   1c468:	9ca6983a 	sll	r19,r19,r18
   1c46c:	88f8d83a 	srl	fp,r17,r3
   1c470:	80c4d83a 	srl	r2,r16,r3
   1c474:	982cd43a 	srli	r22,r19,16
   1c478:	8ca2983a 	sll	r17,r17,r18
   1c47c:	e009883a 	mov	r4,fp
   1c480:	b00b883a 	mov	r5,r22
   1c484:	146ab03a 	or	r21,r2,r17
   1c488:	000cd500 	call	cd50 <__umodsi3>
   1c48c:	b00b883a 	mov	r5,r22
   1c490:	e009883a 	mov	r4,fp
   1c494:	1029883a 	mov	r20,r2
   1c498:	9dffffcc 	andi	r23,r19,65535
   1c49c:	000ccec0 	call	ccec <__udivsi3>
   1c4a0:	b809883a 	mov	r4,r23
   1c4a4:	100b883a 	mov	r5,r2
   1c4a8:	000cda80 	call	cda8 <__mulsi3>
   1c4ac:	a008943a 	slli	r4,r20,16
   1c4b0:	a806d43a 	srli	r3,r21,16
   1c4b4:	84a8983a 	sll	r20,r16,r18
   1c4b8:	1906b03a 	or	r3,r3,r4
   1c4bc:	1880042e 	bgeu	r3,r2,1c4d0 <__umoddi3+0x500>
   1c4c0:	1cc7883a 	add	r3,r3,r19
   1c4c4:	1cc00236 	bltu	r3,r19,1c4d0 <__umoddi3+0x500>
   1c4c8:	1880012e 	bgeu	r3,r2,1c4d0 <__umoddi3+0x500>
   1c4cc:	1cc7883a 	add	r3,r3,r19
   1c4d0:	18a3c83a 	sub	r17,r3,r2
   1c4d4:	b00b883a 	mov	r5,r22
   1c4d8:	8809883a 	mov	r4,r17
   1c4dc:	000cd500 	call	cd50 <__umodsi3>
   1c4e0:	b00b883a 	mov	r5,r22
   1c4e4:	8809883a 	mov	r4,r17
   1c4e8:	1021883a 	mov	r16,r2
   1c4ec:	000ccec0 	call	ccec <__udivsi3>
   1c4f0:	100b883a 	mov	r5,r2
   1c4f4:	b809883a 	mov	r4,r23
   1c4f8:	8020943a 	slli	r16,r16,16
   1c4fc:	000cda80 	call	cda8 <__mulsi3>
   1c500:	a8ffffcc 	andi	r3,r21,65535
   1c504:	1c06b03a 	or	r3,r3,r16
   1c508:	1880042e 	bgeu	r3,r2,1c51c <__umoddi3+0x54c>
   1c50c:	1cc7883a 	add	r3,r3,r19
   1c510:	1cc00236 	bltu	r3,r19,1c51c <__umoddi3+0x54c>
   1c514:	1880012e 	bgeu	r3,r2,1c51c <__umoddi3+0x54c>
   1c518:	1cc7883a 	add	r3,r3,r19
   1c51c:	18a3c83a 	sub	r17,r3,r2
   1c520:	003f2906 	br	1c1c8 <__alt_data_end+0xfc01c1c8>
   1c524:	e48fc83a 	sub	r7,fp,r18
   1c528:	1d49c83a 	sub	r4,r3,r21
   1c52c:	e1f9803a 	cmpltu	fp,fp,r7
   1c530:	2739c83a 	sub	fp,r4,fp
   1c534:	8f09c83a 	sub	r4,r17,fp
   1c538:	003fc306 	br	1c448 <__alt_data_end+0xfc01c448>
   1c53c:	01000604 	movi	r4,24
   1c540:	003ef906 	br	1c128 <__alt_data_end+0xfc01c128>
   1c544:	00800604 	movi	r2,24
   1c548:	003f1306 	br	1c198 <__alt_data_end+0xfc01c198>
   1c54c:	01000604 	movi	r4,24
   1c550:	003eb606 	br	1c02c <__alt_data_end+0xfc01c02c>
   1c554:	40bf902e 	bgeu	r8,r2,1c398 <__alt_data_end+0xfc01c398>
   1c558:	b5bfff84 	addi	r22,r22,-2
   1c55c:	4551883a 	add	r8,r8,r21
   1c560:	003f8e06 	br	1c39c <__alt_data_end+0xfc01c39c>
   1c564:	18bf762e 	bgeu	r3,r2,1c340 <__alt_data_end+0xfc01c340>
   1c568:	8c7fff84 	addi	r17,r17,-2
   1c56c:	1d47883a 	add	r3,r3,r21
   1c570:	003f7406 	br	1c344 <__alt_data_end+0xfc01c344>
   1c574:	1cc7883a 	add	r3,r3,r19
   1c578:	003ecd06 	br	1c0b0 <__alt_data_end+0xfc01c0b0>
   1c57c:	8005883a 	mov	r2,r16
   1c580:	003ef806 	br	1c164 <__alt_data_end+0xfc01c164>
   1c584:	873fe736 	bltu	r16,fp,1c524 <__alt_data_end+0xfc01c524>
   1c588:	e00f883a 	mov	r7,fp
   1c58c:	0009883a 	mov	r4,zero
   1c590:	003fad06 	br	1c448 <__alt_data_end+0xfc01c448>

0001c594 <__adddf3>:
   1c594:	02c00434 	movhi	r11,16
   1c598:	5affffc4 	addi	r11,r11,-1
   1c59c:	2806d7fa 	srli	r3,r5,31
   1c5a0:	2ad4703a 	and	r10,r5,r11
   1c5a4:	3ad2703a 	and	r9,r7,r11
   1c5a8:	3804d53a 	srli	r2,r7,20
   1c5ac:	3018d77a 	srli	r12,r6,29
   1c5b0:	280ad53a 	srli	r5,r5,20
   1c5b4:	501490fa 	slli	r10,r10,3
   1c5b8:	2010d77a 	srli	r8,r4,29
   1c5bc:	481290fa 	slli	r9,r9,3
   1c5c0:	380ed7fa 	srli	r7,r7,31
   1c5c4:	defffb04 	addi	sp,sp,-20
   1c5c8:	dc800215 	stw	r18,8(sp)
   1c5cc:	dc400115 	stw	r17,4(sp)
   1c5d0:	dc000015 	stw	r16,0(sp)
   1c5d4:	dfc00415 	stw	ra,16(sp)
   1c5d8:	dcc00315 	stw	r19,12(sp)
   1c5dc:	1c803fcc 	andi	r18,r3,255
   1c5e0:	2c01ffcc 	andi	r16,r5,2047
   1c5e4:	5210b03a 	or	r8,r10,r8
   1c5e8:	202290fa 	slli	r17,r4,3
   1c5ec:	1081ffcc 	andi	r2,r2,2047
   1c5f0:	4b12b03a 	or	r9,r9,r12
   1c5f4:	300c90fa 	slli	r6,r6,3
   1c5f8:	91c07526 	beq	r18,r7,1c7d0 <__adddf3+0x23c>
   1c5fc:	8087c83a 	sub	r3,r16,r2
   1c600:	00c0ab0e 	bge	zero,r3,1c8b0 <__adddf3+0x31c>
   1c604:	10002a1e 	bne	r2,zero,1c6b0 <__adddf3+0x11c>
   1c608:	4984b03a 	or	r2,r9,r6
   1c60c:	1000961e 	bne	r2,zero,1c868 <__adddf3+0x2d4>
   1c610:	888001cc 	andi	r2,r17,7
   1c614:	10000726 	beq	r2,zero,1c634 <__adddf3+0xa0>
   1c618:	888003cc 	andi	r2,r17,15
   1c61c:	00c00104 	movi	r3,4
   1c620:	10c00426 	beq	r2,r3,1c634 <__adddf3+0xa0>
   1c624:	88c7883a 	add	r3,r17,r3
   1c628:	1c63803a 	cmpltu	r17,r3,r17
   1c62c:	4451883a 	add	r8,r8,r17
   1c630:	1823883a 	mov	r17,r3
   1c634:	4080202c 	andhi	r2,r8,128
   1c638:	10005926 	beq	r2,zero,1c7a0 <__adddf3+0x20c>
   1c63c:	84000044 	addi	r16,r16,1
   1c640:	0081ffc4 	movi	r2,2047
   1c644:	8080ba26 	beq	r16,r2,1c930 <__adddf3+0x39c>
   1c648:	00bfe034 	movhi	r2,65408
   1c64c:	10bfffc4 	addi	r2,r2,-1
   1c650:	4090703a 	and	r8,r8,r2
   1c654:	4004977a 	slli	r2,r8,29
   1c658:	4010927a 	slli	r8,r8,9
   1c65c:	8822d0fa 	srli	r17,r17,3
   1c660:	8401ffcc 	andi	r16,r16,2047
   1c664:	4010d33a 	srli	r8,r8,12
   1c668:	9007883a 	mov	r3,r18
   1c66c:	1444b03a 	or	r2,r2,r17
   1c670:	8401ffcc 	andi	r16,r16,2047
   1c674:	8020953a 	slli	r16,r16,20
   1c678:	18c03fcc 	andi	r3,r3,255
   1c67c:	01000434 	movhi	r4,16
   1c680:	213fffc4 	addi	r4,r4,-1
   1c684:	180697fa 	slli	r3,r3,31
   1c688:	4110703a 	and	r8,r8,r4
   1c68c:	4410b03a 	or	r8,r8,r16
   1c690:	40c6b03a 	or	r3,r8,r3
   1c694:	dfc00417 	ldw	ra,16(sp)
   1c698:	dcc00317 	ldw	r19,12(sp)
   1c69c:	dc800217 	ldw	r18,8(sp)
   1c6a0:	dc400117 	ldw	r17,4(sp)
   1c6a4:	dc000017 	ldw	r16,0(sp)
   1c6a8:	dec00504 	addi	sp,sp,20
   1c6ac:	f800283a 	ret
   1c6b0:	0081ffc4 	movi	r2,2047
   1c6b4:	80bfd626 	beq	r16,r2,1c610 <__alt_data_end+0xfc01c610>
   1c6b8:	4a402034 	orhi	r9,r9,128
   1c6bc:	00800e04 	movi	r2,56
   1c6c0:	10c09f16 	blt	r2,r3,1c940 <__adddf3+0x3ac>
   1c6c4:	008007c4 	movi	r2,31
   1c6c8:	10c0c216 	blt	r2,r3,1c9d4 <__adddf3+0x440>
   1c6cc:	00800804 	movi	r2,32
   1c6d0:	10c5c83a 	sub	r2,r2,r3
   1c6d4:	488a983a 	sll	r5,r9,r2
   1c6d8:	30c8d83a 	srl	r4,r6,r3
   1c6dc:	3084983a 	sll	r2,r6,r2
   1c6e0:	48c6d83a 	srl	r3,r9,r3
   1c6e4:	290cb03a 	or	r6,r5,r4
   1c6e8:	1004c03a 	cmpne	r2,r2,zero
   1c6ec:	308cb03a 	or	r6,r6,r2
   1c6f0:	898dc83a 	sub	r6,r17,r6
   1c6f4:	89a3803a 	cmpltu	r17,r17,r6
   1c6f8:	40d1c83a 	sub	r8,r8,r3
   1c6fc:	4451c83a 	sub	r8,r8,r17
   1c700:	3023883a 	mov	r17,r6
   1c704:	4080202c 	andhi	r2,r8,128
   1c708:	10002326 	beq	r2,zero,1c798 <__adddf3+0x204>
   1c70c:	04c02034 	movhi	r19,128
   1c710:	9cffffc4 	addi	r19,r19,-1
   1c714:	44e6703a 	and	r19,r8,r19
   1c718:	98007626 	beq	r19,zero,1c8f4 <__adddf3+0x360>
   1c71c:	9809883a 	mov	r4,r19
   1c720:	000e2600 	call	e260 <__clzsi2>
   1c724:	10fffe04 	addi	r3,r2,-8
   1c728:	010007c4 	movi	r4,31
   1c72c:	20c07716 	blt	r4,r3,1c90c <__adddf3+0x378>
   1c730:	00800804 	movi	r2,32
   1c734:	10c5c83a 	sub	r2,r2,r3
   1c738:	8884d83a 	srl	r2,r17,r2
   1c73c:	98d0983a 	sll	r8,r19,r3
   1c740:	88e2983a 	sll	r17,r17,r3
   1c744:	1204b03a 	or	r2,r2,r8
   1c748:	1c007416 	blt	r3,r16,1c91c <__adddf3+0x388>
   1c74c:	1c21c83a 	sub	r16,r3,r16
   1c750:	82000044 	addi	r8,r16,1
   1c754:	00c007c4 	movi	r3,31
   1c758:	1a009116 	blt	r3,r8,1c9a0 <__adddf3+0x40c>
   1c75c:	00c00804 	movi	r3,32
   1c760:	1a07c83a 	sub	r3,r3,r8
   1c764:	8a08d83a 	srl	r4,r17,r8
   1c768:	88e2983a 	sll	r17,r17,r3
   1c76c:	10c6983a 	sll	r3,r2,r3
   1c770:	1210d83a 	srl	r8,r2,r8
   1c774:	8804c03a 	cmpne	r2,r17,zero
   1c778:	1906b03a 	or	r3,r3,r4
   1c77c:	18a2b03a 	or	r17,r3,r2
   1c780:	0021883a 	mov	r16,zero
   1c784:	003fa206 	br	1c610 <__alt_data_end+0xfc01c610>
   1c788:	1890b03a 	or	r8,r3,r2
   1c78c:	40017d26 	beq	r8,zero,1cd84 <__adddf3+0x7f0>
   1c790:	1011883a 	mov	r8,r2
   1c794:	1823883a 	mov	r17,r3
   1c798:	888001cc 	andi	r2,r17,7
   1c79c:	103f9e1e 	bne	r2,zero,1c618 <__alt_data_end+0xfc01c618>
   1c7a0:	4004977a 	slli	r2,r8,29
   1c7a4:	8822d0fa 	srli	r17,r17,3
   1c7a8:	4010d0fa 	srli	r8,r8,3
   1c7ac:	9007883a 	mov	r3,r18
   1c7b0:	1444b03a 	or	r2,r2,r17
   1c7b4:	0101ffc4 	movi	r4,2047
   1c7b8:	81002426 	beq	r16,r4,1c84c <__adddf3+0x2b8>
   1c7bc:	8120703a 	and	r16,r16,r4
   1c7c0:	01000434 	movhi	r4,16
   1c7c4:	213fffc4 	addi	r4,r4,-1
   1c7c8:	4110703a 	and	r8,r8,r4
   1c7cc:	003fa806 	br	1c670 <__alt_data_end+0xfc01c670>
   1c7d0:	8089c83a 	sub	r4,r16,r2
   1c7d4:	01005e0e 	bge	zero,r4,1c950 <__adddf3+0x3bc>
   1c7d8:	10002b26 	beq	r2,zero,1c888 <__adddf3+0x2f4>
   1c7dc:	0081ffc4 	movi	r2,2047
   1c7e0:	80bf8b26 	beq	r16,r2,1c610 <__alt_data_end+0xfc01c610>
   1c7e4:	4a402034 	orhi	r9,r9,128
   1c7e8:	00800e04 	movi	r2,56
   1c7ec:	1100a40e 	bge	r2,r4,1ca80 <__adddf3+0x4ec>
   1c7f0:	498cb03a 	or	r6,r9,r6
   1c7f4:	300ac03a 	cmpne	r5,r6,zero
   1c7f8:	0013883a 	mov	r9,zero
   1c7fc:	2c4b883a 	add	r5,r5,r17
   1c800:	2c63803a 	cmpltu	r17,r5,r17
   1c804:	4a11883a 	add	r8,r9,r8
   1c808:	8a11883a 	add	r8,r17,r8
   1c80c:	2823883a 	mov	r17,r5
   1c810:	4080202c 	andhi	r2,r8,128
   1c814:	103fe026 	beq	r2,zero,1c798 <__alt_data_end+0xfc01c798>
   1c818:	84000044 	addi	r16,r16,1
   1c81c:	0081ffc4 	movi	r2,2047
   1c820:	8080d226 	beq	r16,r2,1cb6c <__adddf3+0x5d8>
   1c824:	00bfe034 	movhi	r2,65408
   1c828:	10bfffc4 	addi	r2,r2,-1
   1c82c:	4090703a 	and	r8,r8,r2
   1c830:	880ad07a 	srli	r5,r17,1
   1c834:	400897fa 	slli	r4,r8,31
   1c838:	88c0004c 	andi	r3,r17,1
   1c83c:	28e2b03a 	or	r17,r5,r3
   1c840:	4010d07a 	srli	r8,r8,1
   1c844:	2462b03a 	or	r17,r4,r17
   1c848:	003f7106 	br	1c610 <__alt_data_end+0xfc01c610>
   1c84c:	4088b03a 	or	r4,r8,r2
   1c850:	20014526 	beq	r4,zero,1cd68 <__adddf3+0x7d4>
   1c854:	01000434 	movhi	r4,16
   1c858:	42000234 	orhi	r8,r8,8
   1c85c:	213fffc4 	addi	r4,r4,-1
   1c860:	4110703a 	and	r8,r8,r4
   1c864:	003f8206 	br	1c670 <__alt_data_end+0xfc01c670>
   1c868:	18ffffc4 	addi	r3,r3,-1
   1c86c:	1800491e 	bne	r3,zero,1c994 <__adddf3+0x400>
   1c870:	898bc83a 	sub	r5,r17,r6
   1c874:	8963803a 	cmpltu	r17,r17,r5
   1c878:	4251c83a 	sub	r8,r8,r9
   1c87c:	4451c83a 	sub	r8,r8,r17
   1c880:	2823883a 	mov	r17,r5
   1c884:	003f9f06 	br	1c704 <__alt_data_end+0xfc01c704>
   1c888:	4984b03a 	or	r2,r9,r6
   1c88c:	103f6026 	beq	r2,zero,1c610 <__alt_data_end+0xfc01c610>
   1c890:	213fffc4 	addi	r4,r4,-1
   1c894:	2000931e 	bne	r4,zero,1cae4 <__adddf3+0x550>
   1c898:	898d883a 	add	r6,r17,r6
   1c89c:	3463803a 	cmpltu	r17,r6,r17
   1c8a0:	4251883a 	add	r8,r8,r9
   1c8a4:	8a11883a 	add	r8,r17,r8
   1c8a8:	3023883a 	mov	r17,r6
   1c8ac:	003fd806 	br	1c810 <__alt_data_end+0xfc01c810>
   1c8b0:	1800541e 	bne	r3,zero,1ca04 <__adddf3+0x470>
   1c8b4:	80800044 	addi	r2,r16,1
   1c8b8:	1081ffcc 	andi	r2,r2,2047
   1c8bc:	00c00044 	movi	r3,1
   1c8c0:	1880a00e 	bge	r3,r2,1cb44 <__adddf3+0x5b0>
   1c8c4:	8989c83a 	sub	r4,r17,r6
   1c8c8:	8905803a 	cmpltu	r2,r17,r4
   1c8cc:	4267c83a 	sub	r19,r8,r9
   1c8d0:	98a7c83a 	sub	r19,r19,r2
   1c8d4:	9880202c 	andhi	r2,r19,128
   1c8d8:	10006326 	beq	r2,zero,1ca68 <__adddf3+0x4d4>
   1c8dc:	3463c83a 	sub	r17,r6,r17
   1c8e0:	4a07c83a 	sub	r3,r9,r8
   1c8e4:	344d803a 	cmpltu	r6,r6,r17
   1c8e8:	19a7c83a 	sub	r19,r3,r6
   1c8ec:	3825883a 	mov	r18,r7
   1c8f0:	983f8a1e 	bne	r19,zero,1c71c <__alt_data_end+0xfc01c71c>
   1c8f4:	8809883a 	mov	r4,r17
   1c8f8:	000e2600 	call	e260 <__clzsi2>
   1c8fc:	10800804 	addi	r2,r2,32
   1c900:	10fffe04 	addi	r3,r2,-8
   1c904:	010007c4 	movi	r4,31
   1c908:	20ff890e 	bge	r4,r3,1c730 <__alt_data_end+0xfc01c730>
   1c90c:	10bff604 	addi	r2,r2,-40
   1c910:	8884983a 	sll	r2,r17,r2
   1c914:	0023883a 	mov	r17,zero
   1c918:	1c3f8c0e 	bge	r3,r16,1c74c <__alt_data_end+0xfc01c74c>
   1c91c:	023fe034 	movhi	r8,65408
   1c920:	423fffc4 	addi	r8,r8,-1
   1c924:	80e1c83a 	sub	r16,r16,r3
   1c928:	1210703a 	and	r8,r2,r8
   1c92c:	003f3806 	br	1c610 <__alt_data_end+0xfc01c610>
   1c930:	9007883a 	mov	r3,r18
   1c934:	0011883a 	mov	r8,zero
   1c938:	0005883a 	mov	r2,zero
   1c93c:	003f4c06 	br	1c670 <__alt_data_end+0xfc01c670>
   1c940:	498cb03a 	or	r6,r9,r6
   1c944:	300cc03a 	cmpne	r6,r6,zero
   1c948:	0007883a 	mov	r3,zero
   1c94c:	003f6806 	br	1c6f0 <__alt_data_end+0xfc01c6f0>
   1c950:	20009c1e 	bne	r4,zero,1cbc4 <__adddf3+0x630>
   1c954:	80800044 	addi	r2,r16,1
   1c958:	1141ffcc 	andi	r5,r2,2047
   1c95c:	01000044 	movi	r4,1
   1c960:	2140670e 	bge	r4,r5,1cb00 <__adddf3+0x56c>
   1c964:	0101ffc4 	movi	r4,2047
   1c968:	11007f26 	beq	r2,r4,1cb68 <__adddf3+0x5d4>
   1c96c:	898d883a 	add	r6,r17,r6
   1c970:	4247883a 	add	r3,r8,r9
   1c974:	3451803a 	cmpltu	r8,r6,r17
   1c978:	40d1883a 	add	r8,r8,r3
   1c97c:	402297fa 	slli	r17,r8,31
   1c980:	300cd07a 	srli	r6,r6,1
   1c984:	4010d07a 	srli	r8,r8,1
   1c988:	1021883a 	mov	r16,r2
   1c98c:	89a2b03a 	or	r17,r17,r6
   1c990:	003f1f06 	br	1c610 <__alt_data_end+0xfc01c610>
   1c994:	0081ffc4 	movi	r2,2047
   1c998:	80bf481e 	bne	r16,r2,1c6bc <__alt_data_end+0xfc01c6bc>
   1c99c:	003f1c06 	br	1c610 <__alt_data_end+0xfc01c610>
   1c9a0:	843ff844 	addi	r16,r16,-31
   1c9a4:	01000804 	movi	r4,32
   1c9a8:	1406d83a 	srl	r3,r2,r16
   1c9ac:	41005026 	beq	r8,r4,1caf0 <__adddf3+0x55c>
   1c9b0:	01001004 	movi	r4,64
   1c9b4:	2211c83a 	sub	r8,r4,r8
   1c9b8:	1204983a 	sll	r2,r2,r8
   1c9bc:	88a2b03a 	or	r17,r17,r2
   1c9c0:	8822c03a 	cmpne	r17,r17,zero
   1c9c4:	1c62b03a 	or	r17,r3,r17
   1c9c8:	0011883a 	mov	r8,zero
   1c9cc:	0021883a 	mov	r16,zero
   1c9d0:	003f7106 	br	1c798 <__alt_data_end+0xfc01c798>
   1c9d4:	193ff804 	addi	r4,r3,-32
   1c9d8:	00800804 	movi	r2,32
   1c9dc:	4908d83a 	srl	r4,r9,r4
   1c9e0:	18804526 	beq	r3,r2,1caf8 <__adddf3+0x564>
   1c9e4:	00801004 	movi	r2,64
   1c9e8:	10c5c83a 	sub	r2,r2,r3
   1c9ec:	4886983a 	sll	r3,r9,r2
   1c9f0:	198cb03a 	or	r6,r3,r6
   1c9f4:	300cc03a 	cmpne	r6,r6,zero
   1c9f8:	218cb03a 	or	r6,r4,r6
   1c9fc:	0007883a 	mov	r3,zero
   1ca00:	003f3b06 	br	1c6f0 <__alt_data_end+0xfc01c6f0>
   1ca04:	80002a26 	beq	r16,zero,1cab0 <__adddf3+0x51c>
   1ca08:	0101ffc4 	movi	r4,2047
   1ca0c:	11006826 	beq	r2,r4,1cbb0 <__adddf3+0x61c>
   1ca10:	00c7c83a 	sub	r3,zero,r3
   1ca14:	42002034 	orhi	r8,r8,128
   1ca18:	01000e04 	movi	r4,56
   1ca1c:	20c07c16 	blt	r4,r3,1cc10 <__adddf3+0x67c>
   1ca20:	010007c4 	movi	r4,31
   1ca24:	20c0da16 	blt	r4,r3,1cd90 <__adddf3+0x7fc>
   1ca28:	01000804 	movi	r4,32
   1ca2c:	20c9c83a 	sub	r4,r4,r3
   1ca30:	4114983a 	sll	r10,r8,r4
   1ca34:	88cad83a 	srl	r5,r17,r3
   1ca38:	8908983a 	sll	r4,r17,r4
   1ca3c:	40c6d83a 	srl	r3,r8,r3
   1ca40:	5162b03a 	or	r17,r10,r5
   1ca44:	2008c03a 	cmpne	r4,r4,zero
   1ca48:	8922b03a 	or	r17,r17,r4
   1ca4c:	3463c83a 	sub	r17,r6,r17
   1ca50:	48c7c83a 	sub	r3,r9,r3
   1ca54:	344d803a 	cmpltu	r6,r6,r17
   1ca58:	1991c83a 	sub	r8,r3,r6
   1ca5c:	1021883a 	mov	r16,r2
   1ca60:	3825883a 	mov	r18,r7
   1ca64:	003f2706 	br	1c704 <__alt_data_end+0xfc01c704>
   1ca68:	24d0b03a 	or	r8,r4,r19
   1ca6c:	40001b1e 	bne	r8,zero,1cadc <__adddf3+0x548>
   1ca70:	0005883a 	mov	r2,zero
   1ca74:	0007883a 	mov	r3,zero
   1ca78:	0021883a 	mov	r16,zero
   1ca7c:	003f4d06 	br	1c7b4 <__alt_data_end+0xfc01c7b4>
   1ca80:	008007c4 	movi	r2,31
   1ca84:	11003c16 	blt	r2,r4,1cb78 <__adddf3+0x5e4>
   1ca88:	00800804 	movi	r2,32
   1ca8c:	1105c83a 	sub	r2,r2,r4
   1ca90:	488e983a 	sll	r7,r9,r2
   1ca94:	310ad83a 	srl	r5,r6,r4
   1ca98:	3084983a 	sll	r2,r6,r2
   1ca9c:	4912d83a 	srl	r9,r9,r4
   1caa0:	394ab03a 	or	r5,r7,r5
   1caa4:	1004c03a 	cmpne	r2,r2,zero
   1caa8:	288ab03a 	or	r5,r5,r2
   1caac:	003f5306 	br	1c7fc <__alt_data_end+0xfc01c7fc>
   1cab0:	4448b03a 	or	r4,r8,r17
   1cab4:	20003e26 	beq	r4,zero,1cbb0 <__adddf3+0x61c>
   1cab8:	00c6303a 	nor	r3,zero,r3
   1cabc:	18003a1e 	bne	r3,zero,1cba8 <__adddf3+0x614>
   1cac0:	3463c83a 	sub	r17,r6,r17
   1cac4:	4a07c83a 	sub	r3,r9,r8
   1cac8:	344d803a 	cmpltu	r6,r6,r17
   1cacc:	1991c83a 	sub	r8,r3,r6
   1cad0:	1021883a 	mov	r16,r2
   1cad4:	3825883a 	mov	r18,r7
   1cad8:	003f0a06 	br	1c704 <__alt_data_end+0xfc01c704>
   1cadc:	2023883a 	mov	r17,r4
   1cae0:	003f0d06 	br	1c718 <__alt_data_end+0xfc01c718>
   1cae4:	0081ffc4 	movi	r2,2047
   1cae8:	80bf3f1e 	bne	r16,r2,1c7e8 <__alt_data_end+0xfc01c7e8>
   1caec:	003ec806 	br	1c610 <__alt_data_end+0xfc01c610>
   1caf0:	0005883a 	mov	r2,zero
   1caf4:	003fb106 	br	1c9bc <__alt_data_end+0xfc01c9bc>
   1caf8:	0007883a 	mov	r3,zero
   1cafc:	003fbc06 	br	1c9f0 <__alt_data_end+0xfc01c9f0>
   1cb00:	4444b03a 	or	r2,r8,r17
   1cb04:	8000871e 	bne	r16,zero,1cd24 <__adddf3+0x790>
   1cb08:	1000ba26 	beq	r2,zero,1cdf4 <__adddf3+0x860>
   1cb0c:	4984b03a 	or	r2,r9,r6
   1cb10:	103ebf26 	beq	r2,zero,1c610 <__alt_data_end+0xfc01c610>
   1cb14:	8985883a 	add	r2,r17,r6
   1cb18:	4247883a 	add	r3,r8,r9
   1cb1c:	1451803a 	cmpltu	r8,r2,r17
   1cb20:	40d1883a 	add	r8,r8,r3
   1cb24:	40c0202c 	andhi	r3,r8,128
   1cb28:	1023883a 	mov	r17,r2
   1cb2c:	183f1a26 	beq	r3,zero,1c798 <__alt_data_end+0xfc01c798>
   1cb30:	00bfe034 	movhi	r2,65408
   1cb34:	10bfffc4 	addi	r2,r2,-1
   1cb38:	2021883a 	mov	r16,r4
   1cb3c:	4090703a 	and	r8,r8,r2
   1cb40:	003eb306 	br	1c610 <__alt_data_end+0xfc01c610>
   1cb44:	4444b03a 	or	r2,r8,r17
   1cb48:	8000291e 	bne	r16,zero,1cbf0 <__adddf3+0x65c>
   1cb4c:	10004b1e 	bne	r2,zero,1cc7c <__adddf3+0x6e8>
   1cb50:	4990b03a 	or	r8,r9,r6
   1cb54:	40008b26 	beq	r8,zero,1cd84 <__adddf3+0x7f0>
   1cb58:	4811883a 	mov	r8,r9
   1cb5c:	3023883a 	mov	r17,r6
   1cb60:	3825883a 	mov	r18,r7
   1cb64:	003eaa06 	br	1c610 <__alt_data_end+0xfc01c610>
   1cb68:	1021883a 	mov	r16,r2
   1cb6c:	0011883a 	mov	r8,zero
   1cb70:	0005883a 	mov	r2,zero
   1cb74:	003f0f06 	br	1c7b4 <__alt_data_end+0xfc01c7b4>
   1cb78:	217ff804 	addi	r5,r4,-32
   1cb7c:	00800804 	movi	r2,32
   1cb80:	494ad83a 	srl	r5,r9,r5
   1cb84:	20807d26 	beq	r4,r2,1cd7c <__adddf3+0x7e8>
   1cb88:	00801004 	movi	r2,64
   1cb8c:	1109c83a 	sub	r4,r2,r4
   1cb90:	4912983a 	sll	r9,r9,r4
   1cb94:	498cb03a 	or	r6,r9,r6
   1cb98:	300cc03a 	cmpne	r6,r6,zero
   1cb9c:	298ab03a 	or	r5,r5,r6
   1cba0:	0013883a 	mov	r9,zero
   1cba4:	003f1506 	br	1c7fc <__alt_data_end+0xfc01c7fc>
   1cba8:	0101ffc4 	movi	r4,2047
   1cbac:	113f9a1e 	bne	r2,r4,1ca18 <__alt_data_end+0xfc01ca18>
   1cbb0:	4811883a 	mov	r8,r9
   1cbb4:	3023883a 	mov	r17,r6
   1cbb8:	1021883a 	mov	r16,r2
   1cbbc:	3825883a 	mov	r18,r7
   1cbc0:	003e9306 	br	1c610 <__alt_data_end+0xfc01c610>
   1cbc4:	8000161e 	bne	r16,zero,1cc20 <__adddf3+0x68c>
   1cbc8:	444ab03a 	or	r5,r8,r17
   1cbcc:	28005126 	beq	r5,zero,1cd14 <__adddf3+0x780>
   1cbd0:	0108303a 	nor	r4,zero,r4
   1cbd4:	20004d1e 	bne	r4,zero,1cd0c <__adddf3+0x778>
   1cbd8:	89a3883a 	add	r17,r17,r6
   1cbdc:	4253883a 	add	r9,r8,r9
   1cbe0:	898d803a 	cmpltu	r6,r17,r6
   1cbe4:	3251883a 	add	r8,r6,r9
   1cbe8:	1021883a 	mov	r16,r2
   1cbec:	003f0806 	br	1c810 <__alt_data_end+0xfc01c810>
   1cbf0:	1000301e 	bne	r2,zero,1ccb4 <__adddf3+0x720>
   1cbf4:	4984b03a 	or	r2,r9,r6
   1cbf8:	10007126 	beq	r2,zero,1cdc0 <__adddf3+0x82c>
   1cbfc:	4811883a 	mov	r8,r9
   1cc00:	3023883a 	mov	r17,r6
   1cc04:	3825883a 	mov	r18,r7
   1cc08:	0401ffc4 	movi	r16,2047
   1cc0c:	003e8006 	br	1c610 <__alt_data_end+0xfc01c610>
   1cc10:	4462b03a 	or	r17,r8,r17
   1cc14:	8822c03a 	cmpne	r17,r17,zero
   1cc18:	0007883a 	mov	r3,zero
   1cc1c:	003f8b06 	br	1ca4c <__alt_data_end+0xfc01ca4c>
   1cc20:	0141ffc4 	movi	r5,2047
   1cc24:	11403b26 	beq	r2,r5,1cd14 <__adddf3+0x780>
   1cc28:	0109c83a 	sub	r4,zero,r4
   1cc2c:	42002034 	orhi	r8,r8,128
   1cc30:	01400e04 	movi	r5,56
   1cc34:	29006716 	blt	r5,r4,1cdd4 <__adddf3+0x840>
   1cc38:	014007c4 	movi	r5,31
   1cc3c:	29007016 	blt	r5,r4,1ce00 <__adddf3+0x86c>
   1cc40:	01400804 	movi	r5,32
   1cc44:	290bc83a 	sub	r5,r5,r4
   1cc48:	4154983a 	sll	r10,r8,r5
   1cc4c:	890ed83a 	srl	r7,r17,r4
   1cc50:	894a983a 	sll	r5,r17,r5
   1cc54:	4108d83a 	srl	r4,r8,r4
   1cc58:	51e2b03a 	or	r17,r10,r7
   1cc5c:	280ac03a 	cmpne	r5,r5,zero
   1cc60:	8962b03a 	or	r17,r17,r5
   1cc64:	89a3883a 	add	r17,r17,r6
   1cc68:	2253883a 	add	r9,r4,r9
   1cc6c:	898d803a 	cmpltu	r6,r17,r6
   1cc70:	3251883a 	add	r8,r6,r9
   1cc74:	1021883a 	mov	r16,r2
   1cc78:	003ee506 	br	1c810 <__alt_data_end+0xfc01c810>
   1cc7c:	4984b03a 	or	r2,r9,r6
   1cc80:	103e6326 	beq	r2,zero,1c610 <__alt_data_end+0xfc01c610>
   1cc84:	8987c83a 	sub	r3,r17,r6
   1cc88:	88c9803a 	cmpltu	r4,r17,r3
   1cc8c:	4245c83a 	sub	r2,r8,r9
   1cc90:	1105c83a 	sub	r2,r2,r4
   1cc94:	1100202c 	andhi	r4,r2,128
   1cc98:	203ebb26 	beq	r4,zero,1c788 <__alt_data_end+0xfc01c788>
   1cc9c:	3463c83a 	sub	r17,r6,r17
   1cca0:	4a07c83a 	sub	r3,r9,r8
   1cca4:	344d803a 	cmpltu	r6,r6,r17
   1cca8:	1991c83a 	sub	r8,r3,r6
   1ccac:	3825883a 	mov	r18,r7
   1ccb0:	003e5706 	br	1c610 <__alt_data_end+0xfc01c610>
   1ccb4:	4984b03a 	or	r2,r9,r6
   1ccb8:	10002e26 	beq	r2,zero,1cd74 <__adddf3+0x7e0>
   1ccbc:	4004d0fa 	srli	r2,r8,3
   1ccc0:	8822d0fa 	srli	r17,r17,3
   1ccc4:	4010977a 	slli	r8,r8,29
   1ccc8:	10c0022c 	andhi	r3,r2,8
   1cccc:	4462b03a 	or	r17,r8,r17
   1ccd0:	18000826 	beq	r3,zero,1ccf4 <__adddf3+0x760>
   1ccd4:	4808d0fa 	srli	r4,r9,3
   1ccd8:	20c0022c 	andhi	r3,r4,8
   1ccdc:	1800051e 	bne	r3,zero,1ccf4 <__adddf3+0x760>
   1cce0:	300cd0fa 	srli	r6,r6,3
   1cce4:	4806977a 	slli	r3,r9,29
   1cce8:	2005883a 	mov	r2,r4
   1ccec:	3825883a 	mov	r18,r7
   1ccf0:	19a2b03a 	or	r17,r3,r6
   1ccf4:	8810d77a 	srli	r8,r17,29
   1ccf8:	100490fa 	slli	r2,r2,3
   1ccfc:	882290fa 	slli	r17,r17,3
   1cd00:	0401ffc4 	movi	r16,2047
   1cd04:	4090b03a 	or	r8,r8,r2
   1cd08:	003e4106 	br	1c610 <__alt_data_end+0xfc01c610>
   1cd0c:	0141ffc4 	movi	r5,2047
   1cd10:	117fc71e 	bne	r2,r5,1cc30 <__alt_data_end+0xfc01cc30>
   1cd14:	4811883a 	mov	r8,r9
   1cd18:	3023883a 	mov	r17,r6
   1cd1c:	1021883a 	mov	r16,r2
   1cd20:	003e3b06 	br	1c610 <__alt_data_end+0xfc01c610>
   1cd24:	10002f26 	beq	r2,zero,1cde4 <__adddf3+0x850>
   1cd28:	4984b03a 	or	r2,r9,r6
   1cd2c:	10001126 	beq	r2,zero,1cd74 <__adddf3+0x7e0>
   1cd30:	4004d0fa 	srli	r2,r8,3
   1cd34:	8822d0fa 	srli	r17,r17,3
   1cd38:	4010977a 	slli	r8,r8,29
   1cd3c:	10c0022c 	andhi	r3,r2,8
   1cd40:	4462b03a 	or	r17,r8,r17
   1cd44:	183feb26 	beq	r3,zero,1ccf4 <__alt_data_end+0xfc01ccf4>
   1cd48:	4808d0fa 	srli	r4,r9,3
   1cd4c:	20c0022c 	andhi	r3,r4,8
   1cd50:	183fe81e 	bne	r3,zero,1ccf4 <__alt_data_end+0xfc01ccf4>
   1cd54:	300cd0fa 	srli	r6,r6,3
   1cd58:	4806977a 	slli	r3,r9,29
   1cd5c:	2005883a 	mov	r2,r4
   1cd60:	19a2b03a 	or	r17,r3,r6
   1cd64:	003fe306 	br	1ccf4 <__alt_data_end+0xfc01ccf4>
   1cd68:	0011883a 	mov	r8,zero
   1cd6c:	0005883a 	mov	r2,zero
   1cd70:	003e3f06 	br	1c670 <__alt_data_end+0xfc01c670>
   1cd74:	0401ffc4 	movi	r16,2047
   1cd78:	003e2506 	br	1c610 <__alt_data_end+0xfc01c610>
   1cd7c:	0013883a 	mov	r9,zero
   1cd80:	003f8406 	br	1cb94 <__alt_data_end+0xfc01cb94>
   1cd84:	0005883a 	mov	r2,zero
   1cd88:	0007883a 	mov	r3,zero
   1cd8c:	003e8906 	br	1c7b4 <__alt_data_end+0xfc01c7b4>
   1cd90:	197ff804 	addi	r5,r3,-32
   1cd94:	01000804 	movi	r4,32
   1cd98:	414ad83a 	srl	r5,r8,r5
   1cd9c:	19002426 	beq	r3,r4,1ce30 <__adddf3+0x89c>
   1cda0:	01001004 	movi	r4,64
   1cda4:	20c7c83a 	sub	r3,r4,r3
   1cda8:	40c6983a 	sll	r3,r8,r3
   1cdac:	1c46b03a 	or	r3,r3,r17
   1cdb0:	1806c03a 	cmpne	r3,r3,zero
   1cdb4:	28e2b03a 	or	r17,r5,r3
   1cdb8:	0007883a 	mov	r3,zero
   1cdbc:	003f2306 	br	1ca4c <__alt_data_end+0xfc01ca4c>
   1cdc0:	0007883a 	mov	r3,zero
   1cdc4:	5811883a 	mov	r8,r11
   1cdc8:	00bfffc4 	movi	r2,-1
   1cdcc:	0401ffc4 	movi	r16,2047
   1cdd0:	003e7806 	br	1c7b4 <__alt_data_end+0xfc01c7b4>
   1cdd4:	4462b03a 	or	r17,r8,r17
   1cdd8:	8822c03a 	cmpne	r17,r17,zero
   1cddc:	0009883a 	mov	r4,zero
   1cde0:	003fa006 	br	1cc64 <__alt_data_end+0xfc01cc64>
   1cde4:	4811883a 	mov	r8,r9
   1cde8:	3023883a 	mov	r17,r6
   1cdec:	0401ffc4 	movi	r16,2047
   1cdf0:	003e0706 	br	1c610 <__alt_data_end+0xfc01c610>
   1cdf4:	4811883a 	mov	r8,r9
   1cdf8:	3023883a 	mov	r17,r6
   1cdfc:	003e0406 	br	1c610 <__alt_data_end+0xfc01c610>
   1ce00:	21fff804 	addi	r7,r4,-32
   1ce04:	01400804 	movi	r5,32
   1ce08:	41ced83a 	srl	r7,r8,r7
   1ce0c:	21400a26 	beq	r4,r5,1ce38 <__adddf3+0x8a4>
   1ce10:	01401004 	movi	r5,64
   1ce14:	2909c83a 	sub	r4,r5,r4
   1ce18:	4108983a 	sll	r4,r8,r4
   1ce1c:	2448b03a 	or	r4,r4,r17
   1ce20:	2008c03a 	cmpne	r4,r4,zero
   1ce24:	3922b03a 	or	r17,r7,r4
   1ce28:	0009883a 	mov	r4,zero
   1ce2c:	003f8d06 	br	1cc64 <__alt_data_end+0xfc01cc64>
   1ce30:	0007883a 	mov	r3,zero
   1ce34:	003fdd06 	br	1cdac <__alt_data_end+0xfc01cdac>
   1ce38:	0009883a 	mov	r4,zero
   1ce3c:	003ff706 	br	1ce1c <__alt_data_end+0xfc01ce1c>

0001ce40 <__divdf3>:
   1ce40:	defff004 	addi	sp,sp,-64
   1ce44:	dc800815 	stw	r18,32(sp)
   1ce48:	2824d53a 	srli	r18,r5,20
   1ce4c:	dd800c15 	stw	r22,48(sp)
   1ce50:	282cd7fa 	srli	r22,r5,31
   1ce54:	dc000615 	stw	r16,24(sp)
   1ce58:	04000434 	movhi	r16,16
   1ce5c:	843fffc4 	addi	r16,r16,-1
   1ce60:	dfc00f15 	stw	ra,60(sp)
   1ce64:	df000e15 	stw	fp,56(sp)
   1ce68:	ddc00d15 	stw	r23,52(sp)
   1ce6c:	dd400b15 	stw	r21,44(sp)
   1ce70:	dd000a15 	stw	r20,40(sp)
   1ce74:	dcc00915 	stw	r19,36(sp)
   1ce78:	dc400715 	stw	r17,28(sp)
   1ce7c:	9481ffcc 	andi	r18,r18,2047
   1ce80:	2c20703a 	and	r16,r5,r16
   1ce84:	b2003fcc 	andi	r8,r22,255
   1ce88:	90006126 	beq	r18,zero,1d010 <__divdf3+0x1d0>
   1ce8c:	0081ffc4 	movi	r2,2047
   1ce90:	202b883a 	mov	r21,r4
   1ce94:	90803726 	beq	r18,r2,1cf74 <__divdf3+0x134>
   1ce98:	80800434 	orhi	r2,r16,16
   1ce9c:	100490fa 	slli	r2,r2,3
   1cea0:	2020d77a 	srli	r16,r4,29
   1cea4:	202a90fa 	slli	r21,r4,3
   1cea8:	94bf0044 	addi	r18,r18,-1023
   1ceac:	80a0b03a 	or	r16,r16,r2
   1ceb0:	0013883a 	mov	r9,zero
   1ceb4:	000b883a 	mov	r5,zero
   1ceb8:	3806d53a 	srli	r3,r7,20
   1cebc:	382ed7fa 	srli	r23,r7,31
   1cec0:	04400434 	movhi	r17,16
   1cec4:	8c7fffc4 	addi	r17,r17,-1
   1cec8:	18c1ffcc 	andi	r3,r3,2047
   1cecc:	3029883a 	mov	r20,r6
   1ced0:	3c62703a 	and	r17,r7,r17
   1ced4:	bf003fcc 	andi	fp,r23,255
   1ced8:	18006e26 	beq	r3,zero,1d094 <__divdf3+0x254>
   1cedc:	0081ffc4 	movi	r2,2047
   1cee0:	18806626 	beq	r3,r2,1d07c <__divdf3+0x23c>
   1cee4:	88800434 	orhi	r2,r17,16
   1cee8:	100490fa 	slli	r2,r2,3
   1ceec:	3022d77a 	srli	r17,r6,29
   1cef0:	302890fa 	slli	r20,r6,3
   1cef4:	18ff0044 	addi	r3,r3,-1023
   1cef8:	88a2b03a 	or	r17,r17,r2
   1cefc:	000f883a 	mov	r7,zero
   1cf00:	b5e6f03a 	xor	r19,r22,r23
   1cf04:	3a4cb03a 	or	r6,r7,r9
   1cf08:	008003c4 	movi	r2,15
   1cf0c:	9809883a 	mov	r4,r19
   1cf10:	90c7c83a 	sub	r3,r18,r3
   1cf14:	9cc03fcc 	andi	r19,r19,255
   1cf18:	11809636 	bltu	r2,r6,1d174 <__divdf3+0x334>
   1cf1c:	300c90ba 	slli	r6,r6,2
   1cf20:	008000b4 	movhi	r2,2
   1cf24:	10b3cd04 	addi	r2,r2,-12492
   1cf28:	308d883a 	add	r6,r6,r2
   1cf2c:	30800017 	ldw	r2,0(r6)
   1cf30:	1000683a 	jmp	r2
   1cf34:	0001d174 	movhi	zero,1861
   1cf38:	0001cfac 	andhi	zero,zero,1854
   1cf3c:	0001d164 	muli	zero,zero,1861
   1cf40:	0001cfa0 	cmpeqi	zero,zero,1854
   1cf44:	0001d164 	muli	zero,zero,1861
   1cf48:	0001d138 	rdprs	zero,zero,1860
   1cf4c:	0001d164 	muli	zero,zero,1861
   1cf50:	0001cfa0 	cmpeqi	zero,zero,1854
   1cf54:	0001cfac 	andhi	zero,zero,1854
   1cf58:	0001cfac 	andhi	zero,zero,1854
   1cf5c:	0001d138 	rdprs	zero,zero,1860
   1cf60:	0001cfa0 	cmpeqi	zero,zero,1854
   1cf64:	0001cf90 	cmplti	zero,zero,1854
   1cf68:	0001cf90 	cmplti	zero,zero,1854
   1cf6c:	0001cf90 	cmplti	zero,zero,1854
   1cf70:	0001d4fc 	xorhi	zero,zero,1875
   1cf74:	2404b03a 	or	r2,r4,r16
   1cf78:	10006c1e 	bne	r2,zero,1d12c <__divdf3+0x2ec>
   1cf7c:	02400204 	movi	r9,8
   1cf80:	0021883a 	mov	r16,zero
   1cf84:	002b883a 	mov	r21,zero
   1cf88:	01400084 	movi	r5,2
   1cf8c:	003fca06 	br	1ceb8 <__alt_data_end+0xfc01ceb8>
   1cf90:	8023883a 	mov	r17,r16
   1cf94:	a829883a 	mov	r20,r21
   1cf98:	4039883a 	mov	fp,r8
   1cf9c:	280f883a 	mov	r7,r5
   1cfa0:	00800084 	movi	r2,2
   1cfa4:	3881601e 	bne	r7,r2,1d528 <__divdf3+0x6e8>
   1cfa8:	e027883a 	mov	r19,fp
   1cfac:	9900004c 	andi	r4,r19,1
   1cfb0:	0081ffc4 	movi	r2,2047
   1cfb4:	0021883a 	mov	r16,zero
   1cfb8:	002b883a 	mov	r21,zero
   1cfbc:	1004953a 	slli	r2,r2,20
   1cfc0:	20c03fcc 	andi	r3,r4,255
   1cfc4:	01400434 	movhi	r5,16
   1cfc8:	297fffc4 	addi	r5,r5,-1
   1cfcc:	180697fa 	slli	r3,r3,31
   1cfd0:	8160703a 	and	r16,r16,r5
   1cfd4:	80a0b03a 	or	r16,r16,r2
   1cfd8:	80c6b03a 	or	r3,r16,r3
   1cfdc:	a805883a 	mov	r2,r21
   1cfe0:	dfc00f17 	ldw	ra,60(sp)
   1cfe4:	df000e17 	ldw	fp,56(sp)
   1cfe8:	ddc00d17 	ldw	r23,52(sp)
   1cfec:	dd800c17 	ldw	r22,48(sp)
   1cff0:	dd400b17 	ldw	r21,44(sp)
   1cff4:	dd000a17 	ldw	r20,40(sp)
   1cff8:	dcc00917 	ldw	r19,36(sp)
   1cffc:	dc800817 	ldw	r18,32(sp)
   1d000:	dc400717 	ldw	r17,28(sp)
   1d004:	dc000617 	ldw	r16,24(sp)
   1d008:	dec01004 	addi	sp,sp,64
   1d00c:	f800283a 	ret
   1d010:	2404b03a 	or	r2,r4,r16
   1d014:	2023883a 	mov	r17,r4
   1d018:	10003f26 	beq	r2,zero,1d118 <__divdf3+0x2d8>
   1d01c:	80015e26 	beq	r16,zero,1d598 <__divdf3+0x758>
   1d020:	8009883a 	mov	r4,r16
   1d024:	d9800215 	stw	r6,8(sp)
   1d028:	d9c00515 	stw	r7,20(sp)
   1d02c:	da000415 	stw	r8,16(sp)
   1d030:	000e2600 	call	e260 <__clzsi2>
   1d034:	d9800217 	ldw	r6,8(sp)
   1d038:	d9c00517 	ldw	r7,20(sp)
   1d03c:	da000417 	ldw	r8,16(sp)
   1d040:	113ffd44 	addi	r4,r2,-11
   1d044:	00c00704 	movi	r3,28
   1d048:	19014f16 	blt	r3,r4,1d588 <__divdf3+0x748>
   1d04c:	00c00744 	movi	r3,29
   1d050:	157ffe04 	addi	r21,r2,-8
   1d054:	1907c83a 	sub	r3,r3,r4
   1d058:	8560983a 	sll	r16,r16,r21
   1d05c:	88c6d83a 	srl	r3,r17,r3
   1d060:	8d6a983a 	sll	r21,r17,r21
   1d064:	1c20b03a 	or	r16,r3,r16
   1d068:	1080fcc4 	addi	r2,r2,1011
   1d06c:	00a5c83a 	sub	r18,zero,r2
   1d070:	0013883a 	mov	r9,zero
   1d074:	000b883a 	mov	r5,zero
   1d078:	003f8f06 	br	1ceb8 <__alt_data_end+0xfc01ceb8>
   1d07c:	3444b03a 	or	r2,r6,r17
   1d080:	1000231e 	bne	r2,zero,1d110 <__divdf3+0x2d0>
   1d084:	0023883a 	mov	r17,zero
   1d088:	0029883a 	mov	r20,zero
   1d08c:	01c00084 	movi	r7,2
   1d090:	003f9b06 	br	1cf00 <__alt_data_end+0xfc01cf00>
   1d094:	3444b03a 	or	r2,r6,r17
   1d098:	10001926 	beq	r2,zero,1d100 <__divdf3+0x2c0>
   1d09c:	88014b26 	beq	r17,zero,1d5cc <__divdf3+0x78c>
   1d0a0:	8809883a 	mov	r4,r17
   1d0a4:	d9400115 	stw	r5,4(sp)
   1d0a8:	d9800215 	stw	r6,8(sp)
   1d0ac:	da000415 	stw	r8,16(sp)
   1d0b0:	da400315 	stw	r9,12(sp)
   1d0b4:	000e2600 	call	e260 <__clzsi2>
   1d0b8:	d9400117 	ldw	r5,4(sp)
   1d0bc:	d9800217 	ldw	r6,8(sp)
   1d0c0:	da000417 	ldw	r8,16(sp)
   1d0c4:	da400317 	ldw	r9,12(sp)
   1d0c8:	113ffd44 	addi	r4,r2,-11
   1d0cc:	00c00704 	movi	r3,28
   1d0d0:	19013a16 	blt	r3,r4,1d5bc <__divdf3+0x77c>
   1d0d4:	00c00744 	movi	r3,29
   1d0d8:	153ffe04 	addi	r20,r2,-8
   1d0dc:	1907c83a 	sub	r3,r3,r4
   1d0e0:	8d22983a 	sll	r17,r17,r20
   1d0e4:	30c6d83a 	srl	r3,r6,r3
   1d0e8:	3528983a 	sll	r20,r6,r20
   1d0ec:	1c62b03a 	or	r17,r3,r17
   1d0f0:	1080fcc4 	addi	r2,r2,1011
   1d0f4:	0087c83a 	sub	r3,zero,r2
   1d0f8:	000f883a 	mov	r7,zero
   1d0fc:	003f8006 	br	1cf00 <__alt_data_end+0xfc01cf00>
   1d100:	0023883a 	mov	r17,zero
   1d104:	0029883a 	mov	r20,zero
   1d108:	01c00044 	movi	r7,1
   1d10c:	003f7c06 	br	1cf00 <__alt_data_end+0xfc01cf00>
   1d110:	01c000c4 	movi	r7,3
   1d114:	003f7a06 	br	1cf00 <__alt_data_end+0xfc01cf00>
   1d118:	02400104 	movi	r9,4
   1d11c:	0021883a 	mov	r16,zero
   1d120:	002b883a 	mov	r21,zero
   1d124:	01400044 	movi	r5,1
   1d128:	003f6306 	br	1ceb8 <__alt_data_end+0xfc01ceb8>
   1d12c:	02400304 	movi	r9,12
   1d130:	014000c4 	movi	r5,3
   1d134:	003f6006 	br	1ceb8 <__alt_data_end+0xfc01ceb8>
   1d138:	04000434 	movhi	r16,16
   1d13c:	0009883a 	mov	r4,zero
   1d140:	843fffc4 	addi	r16,r16,-1
   1d144:	057fffc4 	movi	r21,-1
   1d148:	0081ffc4 	movi	r2,2047
   1d14c:	003f9b06 	br	1cfbc <__alt_data_end+0xfc01cfbc>
   1d150:	00c00044 	movi	r3,1
   1d154:	1887c83a 	sub	r3,r3,r2
   1d158:	01000e04 	movi	r4,56
   1d15c:	20c1530e 	bge	r4,r3,1d6ac <__divdf3+0x86c>
   1d160:	9900004c 	andi	r4,r19,1
   1d164:	0005883a 	mov	r2,zero
   1d168:	0021883a 	mov	r16,zero
   1d16c:	002b883a 	mov	r21,zero
   1d170:	003f9206 	br	1cfbc <__alt_data_end+0xfc01cfbc>
   1d174:	8c012e36 	bltu	r17,r16,1d630 <__divdf3+0x7f0>
   1d178:	84412c26 	beq	r16,r17,1d62c <__divdf3+0x7ec>
   1d17c:	a82f883a 	mov	r23,r21
   1d180:	18ffffc4 	addi	r3,r3,-1
   1d184:	002b883a 	mov	r21,zero
   1d188:	a004d63a 	srli	r2,r20,24
   1d18c:	8822923a 	slli	r17,r17,8
   1d190:	a028923a 	slli	r20,r20,8
   1d194:	8009883a 	mov	r4,r16
   1d198:	88acb03a 	or	r22,r17,r2
   1d19c:	dd000015 	stw	r20,0(sp)
   1d1a0:	b028d43a 	srli	r20,r22,16
   1d1a4:	d8c00215 	stw	r3,8(sp)
   1d1a8:	b4bfffcc 	andi	r18,r22,65535
   1d1ac:	a00b883a 	mov	r5,r20
   1d1b0:	000ccec0 	call	ccec <__udivsi3>
   1d1b4:	100b883a 	mov	r5,r2
   1d1b8:	9009883a 	mov	r4,r18
   1d1bc:	1023883a 	mov	r17,r2
   1d1c0:	000cda80 	call	cda8 <__mulsi3>
   1d1c4:	8009883a 	mov	r4,r16
   1d1c8:	a00b883a 	mov	r5,r20
   1d1cc:	1039883a 	mov	fp,r2
   1d1d0:	000cd500 	call	cd50 <__umodsi3>
   1d1d4:	1004943a 	slli	r2,r2,16
   1d1d8:	b808d43a 	srli	r4,r23,16
   1d1dc:	d8c00217 	ldw	r3,8(sp)
   1d1e0:	2084b03a 	or	r2,r4,r2
   1d1e4:	1700062e 	bgeu	r2,fp,1d200 <__divdf3+0x3c0>
   1d1e8:	1585883a 	add	r2,r2,r22
   1d1ec:	893fffc4 	addi	r4,r17,-1
   1d1f0:	15811d36 	bltu	r2,r22,1d668 <__divdf3+0x828>
   1d1f4:	17011c2e 	bgeu	r2,fp,1d668 <__divdf3+0x828>
   1d1f8:	8c7fff84 	addi	r17,r17,-2
   1d1fc:	1585883a 	add	r2,r2,r22
   1d200:	1739c83a 	sub	fp,r2,fp
   1d204:	a00b883a 	mov	r5,r20
   1d208:	e009883a 	mov	r4,fp
   1d20c:	d8c00215 	stw	r3,8(sp)
   1d210:	000ccec0 	call	ccec <__udivsi3>
   1d214:	100b883a 	mov	r5,r2
   1d218:	9009883a 	mov	r4,r18
   1d21c:	1021883a 	mov	r16,r2
   1d220:	000cda80 	call	cda8 <__mulsi3>
   1d224:	a00b883a 	mov	r5,r20
   1d228:	e009883a 	mov	r4,fp
   1d22c:	d8800415 	stw	r2,16(sp)
   1d230:	000cd500 	call	cd50 <__umodsi3>
   1d234:	1004943a 	slli	r2,r2,16
   1d238:	da000417 	ldw	r8,16(sp)
   1d23c:	bdffffcc 	andi	r23,r23,65535
   1d240:	b884b03a 	or	r2,r23,r2
   1d244:	d8c00217 	ldw	r3,8(sp)
   1d248:	1200062e 	bgeu	r2,r8,1d264 <__divdf3+0x424>
   1d24c:	1585883a 	add	r2,r2,r22
   1d250:	813fffc4 	addi	r4,r16,-1
   1d254:	15810236 	bltu	r2,r22,1d660 <__divdf3+0x820>
   1d258:	1201012e 	bgeu	r2,r8,1d660 <__divdf3+0x820>
   1d25c:	843fff84 	addi	r16,r16,-2
   1d260:	1585883a 	add	r2,r2,r22
   1d264:	8822943a 	slli	r17,r17,16
   1d268:	d9800017 	ldw	r6,0(sp)
   1d26c:	1211c83a 	sub	r8,r2,r8
   1d270:	8c22b03a 	or	r17,r17,r16
   1d274:	373fffcc 	andi	fp,r6,65535
   1d278:	8abfffcc 	andi	r10,r17,65535
   1d27c:	8820d43a 	srli	r16,r17,16
   1d280:	5009883a 	mov	r4,r10
   1d284:	e00b883a 	mov	r5,fp
   1d288:	302ed43a 	srli	r23,r6,16
   1d28c:	d8c00215 	stw	r3,8(sp)
   1d290:	da000415 	stw	r8,16(sp)
   1d294:	da800115 	stw	r10,4(sp)
   1d298:	000cda80 	call	cda8 <__mulsi3>
   1d29c:	800b883a 	mov	r5,r16
   1d2a0:	e009883a 	mov	r4,fp
   1d2a4:	d8800515 	stw	r2,20(sp)
   1d2a8:	000cda80 	call	cda8 <__mulsi3>
   1d2ac:	8009883a 	mov	r4,r16
   1d2b0:	b80b883a 	mov	r5,r23
   1d2b4:	d8800315 	stw	r2,12(sp)
   1d2b8:	000cda80 	call	cda8 <__mulsi3>
   1d2bc:	da800117 	ldw	r10,4(sp)
   1d2c0:	b80b883a 	mov	r5,r23
   1d2c4:	1021883a 	mov	r16,r2
   1d2c8:	5009883a 	mov	r4,r10
   1d2cc:	000cda80 	call	cda8 <__mulsi3>
   1d2d0:	d9c00517 	ldw	r7,20(sp)
   1d2d4:	da400317 	ldw	r9,12(sp)
   1d2d8:	d8c00217 	ldw	r3,8(sp)
   1d2dc:	3808d43a 	srli	r4,r7,16
   1d2e0:	1245883a 	add	r2,r2,r9
   1d2e4:	da000417 	ldw	r8,16(sp)
   1d2e8:	2085883a 	add	r2,r4,r2
   1d2ec:	1240022e 	bgeu	r2,r9,1d2f8 <__divdf3+0x4b8>
   1d2f0:	01000074 	movhi	r4,1
   1d2f4:	8121883a 	add	r16,r16,r4
   1d2f8:	1008d43a 	srli	r4,r2,16
   1d2fc:	1004943a 	slli	r2,r2,16
   1d300:	39ffffcc 	andi	r7,r7,65535
   1d304:	2409883a 	add	r4,r4,r16
   1d308:	11c5883a 	add	r2,r2,r7
   1d30c:	4100bb36 	bltu	r8,r4,1d5fc <__divdf3+0x7bc>
   1d310:	4100d726 	beq	r8,r4,1d670 <__divdf3+0x830>
   1d314:	4109c83a 	sub	r4,r8,r4
   1d318:	a8a1c83a 	sub	r16,r21,r2
   1d31c:	ac2b803a 	cmpltu	r21,r21,r16
   1d320:	256bc83a 	sub	r21,r4,r21
   1d324:	b540d926 	beq	r22,r21,1d68c <__divdf3+0x84c>
   1d328:	a00b883a 	mov	r5,r20
   1d32c:	a809883a 	mov	r4,r21
   1d330:	d8c00215 	stw	r3,8(sp)
   1d334:	000ccec0 	call	ccec <__udivsi3>
   1d338:	100b883a 	mov	r5,r2
   1d33c:	9009883a 	mov	r4,r18
   1d340:	d8800515 	stw	r2,20(sp)
   1d344:	000cda80 	call	cda8 <__mulsi3>
   1d348:	a809883a 	mov	r4,r21
   1d34c:	a00b883a 	mov	r5,r20
   1d350:	d8800415 	stw	r2,16(sp)
   1d354:	000cd500 	call	cd50 <__umodsi3>
   1d358:	1004943a 	slli	r2,r2,16
   1d35c:	8008d43a 	srli	r4,r16,16
   1d360:	da000417 	ldw	r8,16(sp)
   1d364:	d8c00217 	ldw	r3,8(sp)
   1d368:	2084b03a 	or	r2,r4,r2
   1d36c:	d9c00517 	ldw	r7,20(sp)
   1d370:	1200062e 	bgeu	r2,r8,1d38c <__divdf3+0x54c>
   1d374:	1585883a 	add	r2,r2,r22
   1d378:	393fffc4 	addi	r4,r7,-1
   1d37c:	1580c536 	bltu	r2,r22,1d694 <__divdf3+0x854>
   1d380:	1200c42e 	bgeu	r2,r8,1d694 <__divdf3+0x854>
   1d384:	39ffff84 	addi	r7,r7,-2
   1d388:	1585883a 	add	r2,r2,r22
   1d38c:	122bc83a 	sub	r21,r2,r8
   1d390:	a00b883a 	mov	r5,r20
   1d394:	a809883a 	mov	r4,r21
   1d398:	d8c00215 	stw	r3,8(sp)
   1d39c:	d9c00515 	stw	r7,20(sp)
   1d3a0:	000ccec0 	call	ccec <__udivsi3>
   1d3a4:	9009883a 	mov	r4,r18
   1d3a8:	100b883a 	mov	r5,r2
   1d3ac:	d8800415 	stw	r2,16(sp)
   1d3b0:	000cda80 	call	cda8 <__mulsi3>
   1d3b4:	a809883a 	mov	r4,r21
   1d3b8:	a00b883a 	mov	r5,r20
   1d3bc:	1025883a 	mov	r18,r2
   1d3c0:	000cd500 	call	cd50 <__umodsi3>
   1d3c4:	1004943a 	slli	r2,r2,16
   1d3c8:	813fffcc 	andi	r4,r16,65535
   1d3cc:	d8c00217 	ldw	r3,8(sp)
   1d3d0:	20a0b03a 	or	r16,r4,r2
   1d3d4:	d9c00517 	ldw	r7,20(sp)
   1d3d8:	da000417 	ldw	r8,16(sp)
   1d3dc:	8480062e 	bgeu	r16,r18,1d3f8 <__divdf3+0x5b8>
   1d3e0:	85a1883a 	add	r16,r16,r22
   1d3e4:	40bfffc4 	addi	r2,r8,-1
   1d3e8:	8580ac36 	bltu	r16,r22,1d69c <__divdf3+0x85c>
   1d3ec:	8480ab2e 	bgeu	r16,r18,1d69c <__divdf3+0x85c>
   1d3f0:	423fff84 	addi	r8,r8,-2
   1d3f4:	85a1883a 	add	r16,r16,r22
   1d3f8:	3804943a 	slli	r2,r7,16
   1d3fc:	84a1c83a 	sub	r16,r16,r18
   1d400:	e009883a 	mov	r4,fp
   1d404:	1228b03a 	or	r20,r2,r8
   1d408:	a1ffffcc 	andi	r7,r20,65535
   1d40c:	a024d43a 	srli	r18,r20,16
   1d410:	380b883a 	mov	r5,r7
   1d414:	d8c00215 	stw	r3,8(sp)
   1d418:	d9c00515 	stw	r7,20(sp)
   1d41c:	000cda80 	call	cda8 <__mulsi3>
   1d420:	900b883a 	mov	r5,r18
   1d424:	e009883a 	mov	r4,fp
   1d428:	102b883a 	mov	r21,r2
   1d42c:	000cda80 	call	cda8 <__mulsi3>
   1d430:	900b883a 	mov	r5,r18
   1d434:	b809883a 	mov	r4,r23
   1d438:	1039883a 	mov	fp,r2
   1d43c:	000cda80 	call	cda8 <__mulsi3>
   1d440:	d9c00517 	ldw	r7,20(sp)
   1d444:	b80b883a 	mov	r5,r23
   1d448:	1025883a 	mov	r18,r2
   1d44c:	3809883a 	mov	r4,r7
   1d450:	000cda80 	call	cda8 <__mulsi3>
   1d454:	a808d43a 	srli	r4,r21,16
   1d458:	1705883a 	add	r2,r2,fp
   1d45c:	d8c00217 	ldw	r3,8(sp)
   1d460:	2085883a 	add	r2,r4,r2
   1d464:	1700022e 	bgeu	r2,fp,1d470 <__divdf3+0x630>
   1d468:	01000074 	movhi	r4,1
   1d46c:	9125883a 	add	r18,r18,r4
   1d470:	1008d43a 	srli	r4,r2,16
   1d474:	1004943a 	slli	r2,r2,16
   1d478:	ad7fffcc 	andi	r21,r21,65535
   1d47c:	2489883a 	add	r4,r4,r18
   1d480:	1545883a 	add	r2,r2,r21
   1d484:	81003836 	bltu	r16,r4,1d568 <__divdf3+0x728>
   1d488:	81003626 	beq	r16,r4,1d564 <__divdf3+0x724>
   1d48c:	a5000054 	ori	r20,r20,1
   1d490:	1880ffc4 	addi	r2,r3,1023
   1d494:	00bf2e0e 	bge	zero,r2,1d150 <__alt_data_end+0xfc01d150>
   1d498:	a10001cc 	andi	r4,r20,7
   1d49c:	20000726 	beq	r4,zero,1d4bc <__divdf3+0x67c>
   1d4a0:	a10003cc 	andi	r4,r20,15
   1d4a4:	01400104 	movi	r5,4
   1d4a8:	21400426 	beq	r4,r5,1d4bc <__divdf3+0x67c>
   1d4ac:	a149883a 	add	r4,r20,r5
   1d4b0:	2529803a 	cmpltu	r20,r4,r20
   1d4b4:	8d23883a 	add	r17,r17,r20
   1d4b8:	2029883a 	mov	r20,r4
   1d4bc:	8900402c 	andhi	r4,r17,256
   1d4c0:	20000426 	beq	r4,zero,1d4d4 <__divdf3+0x694>
   1d4c4:	18810004 	addi	r2,r3,1024
   1d4c8:	00ffc034 	movhi	r3,65280
   1d4cc:	18ffffc4 	addi	r3,r3,-1
   1d4d0:	88e2703a 	and	r17,r17,r3
   1d4d4:	00c1ff84 	movi	r3,2046
   1d4d8:	18beb416 	blt	r3,r2,1cfac <__alt_data_end+0xfc01cfac>
   1d4dc:	a028d0fa 	srli	r20,r20,3
   1d4e0:	882a977a 	slli	r21,r17,29
   1d4e4:	8820927a 	slli	r16,r17,9
   1d4e8:	1081ffcc 	andi	r2,r2,2047
   1d4ec:	ad2ab03a 	or	r21,r21,r20
   1d4f0:	8020d33a 	srli	r16,r16,12
   1d4f4:	9900004c 	andi	r4,r19,1
   1d4f8:	003eb006 	br	1cfbc <__alt_data_end+0xfc01cfbc>
   1d4fc:	8080022c 	andhi	r2,r16,8
   1d500:	10001226 	beq	r2,zero,1d54c <__divdf3+0x70c>
   1d504:	8880022c 	andhi	r2,r17,8
   1d508:	1000101e 	bne	r2,zero,1d54c <__divdf3+0x70c>
   1d50c:	00800434 	movhi	r2,16
   1d510:	8c000234 	orhi	r16,r17,8
   1d514:	10bfffc4 	addi	r2,r2,-1
   1d518:	b809883a 	mov	r4,r23
   1d51c:	80a0703a 	and	r16,r16,r2
   1d520:	a02b883a 	mov	r21,r20
   1d524:	003f0806 	br	1d148 <__alt_data_end+0xfc01d148>
   1d528:	008000c4 	movi	r2,3
   1d52c:	3880b126 	beq	r7,r2,1d7f4 <__divdf3+0x9b4>
   1d530:	00800044 	movi	r2,1
   1d534:	38805b1e 	bne	r7,r2,1d6a4 <__divdf3+0x864>
   1d538:	e009883a 	mov	r4,fp
   1d53c:	0005883a 	mov	r2,zero
   1d540:	0021883a 	mov	r16,zero
   1d544:	002b883a 	mov	r21,zero
   1d548:	003e9c06 	br	1cfbc <__alt_data_end+0xfc01cfbc>
   1d54c:	00800434 	movhi	r2,16
   1d550:	84000234 	orhi	r16,r16,8
   1d554:	10bfffc4 	addi	r2,r2,-1
   1d558:	b009883a 	mov	r4,r22
   1d55c:	80a0703a 	and	r16,r16,r2
   1d560:	003ef906 	br	1d148 <__alt_data_end+0xfc01d148>
   1d564:	103fca26 	beq	r2,zero,1d490 <__alt_data_end+0xfc01d490>
   1d568:	b421883a 	add	r16,r22,r16
   1d56c:	a17fffc4 	addi	r5,r20,-1
   1d570:	8580422e 	bgeu	r16,r22,1d67c <__divdf3+0x83c>
   1d574:	2829883a 	mov	r20,r5
   1d578:	813fc41e 	bne	r16,r4,1d48c <__alt_data_end+0xfc01d48c>
   1d57c:	d9800017 	ldw	r6,0(sp)
   1d580:	30bfc21e 	bne	r6,r2,1d48c <__alt_data_end+0xfc01d48c>
   1d584:	003fc206 	br	1d490 <__alt_data_end+0xfc01d490>
   1d588:	143ff604 	addi	r16,r2,-40
   1d58c:	8c20983a 	sll	r16,r17,r16
   1d590:	002b883a 	mov	r21,zero
   1d594:	003eb406 	br	1d068 <__alt_data_end+0xfc01d068>
   1d598:	d9800215 	stw	r6,8(sp)
   1d59c:	d9c00515 	stw	r7,20(sp)
   1d5a0:	da000415 	stw	r8,16(sp)
   1d5a4:	000e2600 	call	e260 <__clzsi2>
   1d5a8:	10800804 	addi	r2,r2,32
   1d5ac:	da000417 	ldw	r8,16(sp)
   1d5b0:	d9c00517 	ldw	r7,20(sp)
   1d5b4:	d9800217 	ldw	r6,8(sp)
   1d5b8:	003ea106 	br	1d040 <__alt_data_end+0xfc01d040>
   1d5bc:	147ff604 	addi	r17,r2,-40
   1d5c0:	3462983a 	sll	r17,r6,r17
   1d5c4:	0029883a 	mov	r20,zero
   1d5c8:	003ec906 	br	1d0f0 <__alt_data_end+0xfc01d0f0>
   1d5cc:	3009883a 	mov	r4,r6
   1d5d0:	d9400115 	stw	r5,4(sp)
   1d5d4:	d9800215 	stw	r6,8(sp)
   1d5d8:	da000415 	stw	r8,16(sp)
   1d5dc:	da400315 	stw	r9,12(sp)
   1d5e0:	000e2600 	call	e260 <__clzsi2>
   1d5e4:	10800804 	addi	r2,r2,32
   1d5e8:	da400317 	ldw	r9,12(sp)
   1d5ec:	da000417 	ldw	r8,16(sp)
   1d5f0:	d9800217 	ldw	r6,8(sp)
   1d5f4:	d9400117 	ldw	r5,4(sp)
   1d5f8:	003eb306 	br	1d0c8 <__alt_data_end+0xfc01d0c8>
   1d5fc:	d9800017 	ldw	r6,0(sp)
   1d600:	a9ab883a 	add	r21,r21,r6
   1d604:	a98b803a 	cmpltu	r5,r21,r6
   1d608:	2d8b883a 	add	r5,r5,r22
   1d60c:	2a11883a 	add	r8,r5,r8
   1d610:	897fffc4 	addi	r5,r17,-1
   1d614:	b2000c2e 	bgeu	r22,r8,1d648 <__divdf3+0x808>
   1d618:	41003f36 	bltu	r8,r4,1d718 <__divdf3+0x8d8>
   1d61c:	22006c26 	beq	r4,r8,1d7d0 <__divdf3+0x990>
   1d620:	4109c83a 	sub	r4,r8,r4
   1d624:	2823883a 	mov	r17,r5
   1d628:	003f3b06 	br	1d318 <__alt_data_end+0xfc01d318>
   1d62c:	ad3ed336 	bltu	r21,r20,1d17c <__alt_data_end+0xfc01d17c>
   1d630:	a804d07a 	srli	r2,r21,1
   1d634:	802e97fa 	slli	r23,r16,31
   1d638:	a82a97fa 	slli	r21,r21,31
   1d63c:	8020d07a 	srli	r16,r16,1
   1d640:	b8aeb03a 	or	r23,r23,r2
   1d644:	003ed006 	br	1d188 <__alt_data_end+0xfc01d188>
   1d648:	b23ff51e 	bne	r22,r8,1d620 <__alt_data_end+0xfc01d620>
   1d64c:	d9800017 	ldw	r6,0(sp)
   1d650:	a9bff12e 	bgeu	r21,r6,1d618 <__alt_data_end+0xfc01d618>
   1d654:	b109c83a 	sub	r4,r22,r4
   1d658:	2823883a 	mov	r17,r5
   1d65c:	003f2e06 	br	1d318 <__alt_data_end+0xfc01d318>
   1d660:	2021883a 	mov	r16,r4
   1d664:	003eff06 	br	1d264 <__alt_data_end+0xfc01d264>
   1d668:	2023883a 	mov	r17,r4
   1d66c:	003ee406 	br	1d200 <__alt_data_end+0xfc01d200>
   1d670:	a8bfe236 	bltu	r21,r2,1d5fc <__alt_data_end+0xfc01d5fc>
   1d674:	0009883a 	mov	r4,zero
   1d678:	003f2706 	br	1d318 <__alt_data_end+0xfc01d318>
   1d67c:	81002d36 	bltu	r16,r4,1d734 <__divdf3+0x8f4>
   1d680:	24005626 	beq	r4,r16,1d7dc <__divdf3+0x99c>
   1d684:	2829883a 	mov	r20,r5
   1d688:	003f8006 	br	1d48c <__alt_data_end+0xfc01d48c>
   1d68c:	053fffc4 	movi	r20,-1
   1d690:	003f7f06 	br	1d490 <__alt_data_end+0xfc01d490>
   1d694:	200f883a 	mov	r7,r4
   1d698:	003f3c06 	br	1d38c <__alt_data_end+0xfc01d38c>
   1d69c:	1011883a 	mov	r8,r2
   1d6a0:	003f5506 	br	1d3f8 <__alt_data_end+0xfc01d3f8>
   1d6a4:	e027883a 	mov	r19,fp
   1d6a8:	003f7906 	br	1d490 <__alt_data_end+0xfc01d490>
   1d6ac:	010007c4 	movi	r4,31
   1d6b0:	20c02816 	blt	r4,r3,1d754 <__divdf3+0x914>
   1d6b4:	00800804 	movi	r2,32
   1d6b8:	10c5c83a 	sub	r2,r2,r3
   1d6bc:	888a983a 	sll	r5,r17,r2
   1d6c0:	a0c8d83a 	srl	r4,r20,r3
   1d6c4:	a084983a 	sll	r2,r20,r2
   1d6c8:	88e2d83a 	srl	r17,r17,r3
   1d6cc:	2906b03a 	or	r3,r5,r4
   1d6d0:	1004c03a 	cmpne	r2,r2,zero
   1d6d4:	1886b03a 	or	r3,r3,r2
   1d6d8:	188001cc 	andi	r2,r3,7
   1d6dc:	10000726 	beq	r2,zero,1d6fc <__divdf3+0x8bc>
   1d6e0:	188003cc 	andi	r2,r3,15
   1d6e4:	01000104 	movi	r4,4
   1d6e8:	11000426 	beq	r2,r4,1d6fc <__divdf3+0x8bc>
   1d6ec:	1805883a 	mov	r2,r3
   1d6f0:	10c00104 	addi	r3,r2,4
   1d6f4:	1885803a 	cmpltu	r2,r3,r2
   1d6f8:	88a3883a 	add	r17,r17,r2
   1d6fc:	8880202c 	andhi	r2,r17,128
   1d700:	10002926 	beq	r2,zero,1d7a8 <__divdf3+0x968>
   1d704:	9900004c 	andi	r4,r19,1
   1d708:	00800044 	movi	r2,1
   1d70c:	0021883a 	mov	r16,zero
   1d710:	002b883a 	mov	r21,zero
   1d714:	003e2906 	br	1cfbc <__alt_data_end+0xfc01cfbc>
   1d718:	d9800017 	ldw	r6,0(sp)
   1d71c:	8c7fff84 	addi	r17,r17,-2
   1d720:	a9ab883a 	add	r21,r21,r6
   1d724:	a98b803a 	cmpltu	r5,r21,r6
   1d728:	2d8b883a 	add	r5,r5,r22
   1d72c:	2a11883a 	add	r8,r5,r8
   1d730:	003ef806 	br	1d314 <__alt_data_end+0xfc01d314>
   1d734:	d9800017 	ldw	r6,0(sp)
   1d738:	318f883a 	add	r7,r6,r6
   1d73c:	398b803a 	cmpltu	r5,r7,r6
   1d740:	2d8d883a 	add	r6,r5,r22
   1d744:	81a1883a 	add	r16,r16,r6
   1d748:	a17fff84 	addi	r5,r20,-2
   1d74c:	d9c00015 	stw	r7,0(sp)
   1d750:	003f8806 	br	1d574 <__alt_data_end+0xfc01d574>
   1d754:	013ff844 	movi	r4,-31
   1d758:	2085c83a 	sub	r2,r4,r2
   1d75c:	8888d83a 	srl	r4,r17,r2
   1d760:	00800804 	movi	r2,32
   1d764:	18802126 	beq	r3,r2,1d7ec <__divdf3+0x9ac>
   1d768:	04001004 	movi	r16,64
   1d76c:	80c7c83a 	sub	r3,r16,r3
   1d770:	88e0983a 	sll	r16,r17,r3
   1d774:	8504b03a 	or	r2,r16,r20
   1d778:	1004c03a 	cmpne	r2,r2,zero
   1d77c:	2084b03a 	or	r2,r4,r2
   1d780:	144001cc 	andi	r17,r2,7
   1d784:	88000d1e 	bne	r17,zero,1d7bc <__divdf3+0x97c>
   1d788:	0021883a 	mov	r16,zero
   1d78c:	102ad0fa 	srli	r21,r2,3
   1d790:	9900004c 	andi	r4,r19,1
   1d794:	0005883a 	mov	r2,zero
   1d798:	ac6ab03a 	or	r21,r21,r17
   1d79c:	003e0706 	br	1cfbc <__alt_data_end+0xfc01cfbc>
   1d7a0:	1007883a 	mov	r3,r2
   1d7a4:	0023883a 	mov	r17,zero
   1d7a8:	8820927a 	slli	r16,r17,9
   1d7ac:	1805883a 	mov	r2,r3
   1d7b0:	8822977a 	slli	r17,r17,29
   1d7b4:	8020d33a 	srli	r16,r16,12
   1d7b8:	003ff406 	br	1d78c <__alt_data_end+0xfc01d78c>
   1d7bc:	10c003cc 	andi	r3,r2,15
   1d7c0:	01000104 	movi	r4,4
   1d7c4:	193ff626 	beq	r3,r4,1d7a0 <__alt_data_end+0xfc01d7a0>
   1d7c8:	0023883a 	mov	r17,zero
   1d7cc:	003fc806 	br	1d6f0 <__alt_data_end+0xfc01d6f0>
   1d7d0:	a8bfd136 	bltu	r21,r2,1d718 <__alt_data_end+0xfc01d718>
   1d7d4:	2823883a 	mov	r17,r5
   1d7d8:	003fa606 	br	1d674 <__alt_data_end+0xfc01d674>
   1d7dc:	d9800017 	ldw	r6,0(sp)
   1d7e0:	30bfd436 	bltu	r6,r2,1d734 <__alt_data_end+0xfc01d734>
   1d7e4:	2829883a 	mov	r20,r5
   1d7e8:	003f6406 	br	1d57c <__alt_data_end+0xfc01d57c>
   1d7ec:	0021883a 	mov	r16,zero
   1d7f0:	003fe006 	br	1d774 <__alt_data_end+0xfc01d774>
   1d7f4:	00800434 	movhi	r2,16
   1d7f8:	8c000234 	orhi	r16,r17,8
   1d7fc:	10bfffc4 	addi	r2,r2,-1
   1d800:	e009883a 	mov	r4,fp
   1d804:	80a0703a 	and	r16,r16,r2
   1d808:	a02b883a 	mov	r21,r20
   1d80c:	003e4e06 	br	1d148 <__alt_data_end+0xfc01d148>

0001d810 <__eqdf2>:
   1d810:	2804d53a 	srli	r2,r5,20
   1d814:	3806d53a 	srli	r3,r7,20
   1d818:	02000434 	movhi	r8,16
   1d81c:	423fffc4 	addi	r8,r8,-1
   1d820:	1081ffcc 	andi	r2,r2,2047
   1d824:	0281ffc4 	movi	r10,2047
   1d828:	2a12703a 	and	r9,r5,r8
   1d82c:	18c1ffcc 	andi	r3,r3,2047
   1d830:	3a10703a 	and	r8,r7,r8
   1d834:	280ad7fa 	srli	r5,r5,31
   1d838:	380ed7fa 	srli	r7,r7,31
   1d83c:	12801026 	beq	r2,r10,1d880 <__eqdf2+0x70>
   1d840:	0281ffc4 	movi	r10,2047
   1d844:	1a800a26 	beq	r3,r10,1d870 <__eqdf2+0x60>
   1d848:	10c00226 	beq	r2,r3,1d854 <__eqdf2+0x44>
   1d84c:	00800044 	movi	r2,1
   1d850:	f800283a 	ret
   1d854:	4a3ffd1e 	bne	r9,r8,1d84c <__alt_data_end+0xfc01d84c>
   1d858:	21bffc1e 	bne	r4,r6,1d84c <__alt_data_end+0xfc01d84c>
   1d85c:	29c00c26 	beq	r5,r7,1d890 <__eqdf2+0x80>
   1d860:	103ffa1e 	bne	r2,zero,1d84c <__alt_data_end+0xfc01d84c>
   1d864:	2244b03a 	or	r2,r4,r9
   1d868:	1004c03a 	cmpne	r2,r2,zero
   1d86c:	f800283a 	ret
   1d870:	3214b03a 	or	r10,r6,r8
   1d874:	503ff426 	beq	r10,zero,1d848 <__alt_data_end+0xfc01d848>
   1d878:	00800044 	movi	r2,1
   1d87c:	f800283a 	ret
   1d880:	2254b03a 	or	r10,r4,r9
   1d884:	503fee26 	beq	r10,zero,1d840 <__alt_data_end+0xfc01d840>
   1d888:	00800044 	movi	r2,1
   1d88c:	f800283a 	ret
   1d890:	0005883a 	mov	r2,zero
   1d894:	f800283a 	ret

0001d898 <__gedf2>:
   1d898:	2804d53a 	srli	r2,r5,20
   1d89c:	3806d53a 	srli	r3,r7,20
   1d8a0:	02000434 	movhi	r8,16
   1d8a4:	423fffc4 	addi	r8,r8,-1
   1d8a8:	1081ffcc 	andi	r2,r2,2047
   1d8ac:	0241ffc4 	movi	r9,2047
   1d8b0:	2a14703a 	and	r10,r5,r8
   1d8b4:	18c1ffcc 	andi	r3,r3,2047
   1d8b8:	3a10703a 	and	r8,r7,r8
   1d8bc:	280ad7fa 	srli	r5,r5,31
   1d8c0:	380ed7fa 	srli	r7,r7,31
   1d8c4:	12401d26 	beq	r2,r9,1d93c <__gedf2+0xa4>
   1d8c8:	0241ffc4 	movi	r9,2047
   1d8cc:	1a401226 	beq	r3,r9,1d918 <__gedf2+0x80>
   1d8d0:	1000081e 	bne	r2,zero,1d8f4 <__gedf2+0x5c>
   1d8d4:	2296b03a 	or	r11,r4,r10
   1d8d8:	5813003a 	cmpeq	r9,r11,zero
   1d8dc:	1800091e 	bne	r3,zero,1d904 <__gedf2+0x6c>
   1d8e0:	3218b03a 	or	r12,r6,r8
   1d8e4:	6000071e 	bne	r12,zero,1d904 <__gedf2+0x6c>
   1d8e8:	0005883a 	mov	r2,zero
   1d8ec:	5800101e 	bne	r11,zero,1d930 <__gedf2+0x98>
   1d8f0:	f800283a 	ret
   1d8f4:	18000c1e 	bne	r3,zero,1d928 <__gedf2+0x90>
   1d8f8:	3212b03a 	or	r9,r6,r8
   1d8fc:	48000c26 	beq	r9,zero,1d930 <__gedf2+0x98>
   1d900:	0013883a 	mov	r9,zero
   1d904:	39c03fcc 	andi	r7,r7,255
   1d908:	48000826 	beq	r9,zero,1d92c <__gedf2+0x94>
   1d90c:	38000926 	beq	r7,zero,1d934 <__gedf2+0x9c>
   1d910:	00800044 	movi	r2,1
   1d914:	f800283a 	ret
   1d918:	3212b03a 	or	r9,r6,r8
   1d91c:	483fec26 	beq	r9,zero,1d8d0 <__alt_data_end+0xfc01d8d0>
   1d920:	00bfff84 	movi	r2,-2
   1d924:	f800283a 	ret
   1d928:	39c03fcc 	andi	r7,r7,255
   1d92c:	29c00626 	beq	r5,r7,1d948 <__gedf2+0xb0>
   1d930:	283ff726 	beq	r5,zero,1d910 <__alt_data_end+0xfc01d910>
   1d934:	00bfffc4 	movi	r2,-1
   1d938:	f800283a 	ret
   1d93c:	2292b03a 	or	r9,r4,r10
   1d940:	483fe126 	beq	r9,zero,1d8c8 <__alt_data_end+0xfc01d8c8>
   1d944:	003ff606 	br	1d920 <__alt_data_end+0xfc01d920>
   1d948:	18bff916 	blt	r3,r2,1d930 <__alt_data_end+0xfc01d930>
   1d94c:	10c00316 	blt	r2,r3,1d95c <__gedf2+0xc4>
   1d950:	42bff736 	bltu	r8,r10,1d930 <__alt_data_end+0xfc01d930>
   1d954:	52000326 	beq	r10,r8,1d964 <__gedf2+0xcc>
   1d958:	5200042e 	bgeu	r10,r8,1d96c <__gedf2+0xd4>
   1d95c:	283fec1e 	bne	r5,zero,1d910 <__alt_data_end+0xfc01d910>
   1d960:	003ff406 	br	1d934 <__alt_data_end+0xfc01d934>
   1d964:	313ff236 	bltu	r6,r4,1d930 <__alt_data_end+0xfc01d930>
   1d968:	21bffc36 	bltu	r4,r6,1d95c <__alt_data_end+0xfc01d95c>
   1d96c:	0005883a 	mov	r2,zero
   1d970:	f800283a 	ret

0001d974 <__ledf2>:
   1d974:	2804d53a 	srli	r2,r5,20
   1d978:	3810d53a 	srli	r8,r7,20
   1d97c:	00c00434 	movhi	r3,16
   1d980:	18ffffc4 	addi	r3,r3,-1
   1d984:	1081ffcc 	andi	r2,r2,2047
   1d988:	0241ffc4 	movi	r9,2047
   1d98c:	28d4703a 	and	r10,r5,r3
   1d990:	4201ffcc 	andi	r8,r8,2047
   1d994:	38c6703a 	and	r3,r7,r3
   1d998:	280ad7fa 	srli	r5,r5,31
   1d99c:	380ed7fa 	srli	r7,r7,31
   1d9a0:	12401f26 	beq	r2,r9,1da20 <__ledf2+0xac>
   1d9a4:	0241ffc4 	movi	r9,2047
   1d9a8:	42401426 	beq	r8,r9,1d9fc <__ledf2+0x88>
   1d9ac:	1000091e 	bne	r2,zero,1d9d4 <__ledf2+0x60>
   1d9b0:	2296b03a 	or	r11,r4,r10
   1d9b4:	5813003a 	cmpeq	r9,r11,zero
   1d9b8:	29403fcc 	andi	r5,r5,255
   1d9bc:	40000a1e 	bne	r8,zero,1d9e8 <__ledf2+0x74>
   1d9c0:	30d8b03a 	or	r12,r6,r3
   1d9c4:	6000081e 	bne	r12,zero,1d9e8 <__ledf2+0x74>
   1d9c8:	0005883a 	mov	r2,zero
   1d9cc:	5800111e 	bne	r11,zero,1da14 <__ledf2+0xa0>
   1d9d0:	f800283a 	ret
   1d9d4:	29403fcc 	andi	r5,r5,255
   1d9d8:	40000c1e 	bne	r8,zero,1da0c <__ledf2+0x98>
   1d9dc:	30d2b03a 	or	r9,r6,r3
   1d9e0:	48000c26 	beq	r9,zero,1da14 <__ledf2+0xa0>
   1d9e4:	0013883a 	mov	r9,zero
   1d9e8:	39c03fcc 	andi	r7,r7,255
   1d9ec:	48000826 	beq	r9,zero,1da10 <__ledf2+0x9c>
   1d9f0:	38001126 	beq	r7,zero,1da38 <__ledf2+0xc4>
   1d9f4:	00800044 	movi	r2,1
   1d9f8:	f800283a 	ret
   1d9fc:	30d2b03a 	or	r9,r6,r3
   1da00:	483fea26 	beq	r9,zero,1d9ac <__alt_data_end+0xfc01d9ac>
   1da04:	00800084 	movi	r2,2
   1da08:	f800283a 	ret
   1da0c:	39c03fcc 	andi	r7,r7,255
   1da10:	39400726 	beq	r7,r5,1da30 <__ledf2+0xbc>
   1da14:	2800081e 	bne	r5,zero,1da38 <__ledf2+0xc4>
   1da18:	00800044 	movi	r2,1
   1da1c:	f800283a 	ret
   1da20:	2292b03a 	or	r9,r4,r10
   1da24:	483fdf26 	beq	r9,zero,1d9a4 <__alt_data_end+0xfc01d9a4>
   1da28:	00800084 	movi	r2,2
   1da2c:	f800283a 	ret
   1da30:	4080030e 	bge	r8,r2,1da40 <__ledf2+0xcc>
   1da34:	383fef26 	beq	r7,zero,1d9f4 <__alt_data_end+0xfc01d9f4>
   1da38:	00bfffc4 	movi	r2,-1
   1da3c:	f800283a 	ret
   1da40:	123feb16 	blt	r2,r8,1d9f0 <__alt_data_end+0xfc01d9f0>
   1da44:	1abff336 	bltu	r3,r10,1da14 <__alt_data_end+0xfc01da14>
   1da48:	50c00326 	beq	r10,r3,1da58 <__ledf2+0xe4>
   1da4c:	50c0042e 	bgeu	r10,r3,1da60 <__ledf2+0xec>
   1da50:	283fe81e 	bne	r5,zero,1d9f4 <__alt_data_end+0xfc01d9f4>
   1da54:	003ff806 	br	1da38 <__alt_data_end+0xfc01da38>
   1da58:	313fee36 	bltu	r6,r4,1da14 <__alt_data_end+0xfc01da14>
   1da5c:	21bffc36 	bltu	r4,r6,1da50 <__alt_data_end+0xfc01da50>
   1da60:	0005883a 	mov	r2,zero
   1da64:	f800283a 	ret

0001da68 <__muldf3>:
   1da68:	deffee04 	addi	sp,sp,-72
   1da6c:	dd000c15 	stw	r20,48(sp)
   1da70:	2828d53a 	srli	r20,r5,20
   1da74:	ddc00f15 	stw	r23,60(sp)
   1da78:	282ed7fa 	srli	r23,r5,31
   1da7c:	dc000815 	stw	r16,32(sp)
   1da80:	04000434 	movhi	r16,16
   1da84:	dcc00b15 	stw	r19,44(sp)
   1da88:	843fffc4 	addi	r16,r16,-1
   1da8c:	dfc01115 	stw	ra,68(sp)
   1da90:	df001015 	stw	fp,64(sp)
   1da94:	dd800e15 	stw	r22,56(sp)
   1da98:	dd400d15 	stw	r21,52(sp)
   1da9c:	dc800a15 	stw	r18,40(sp)
   1daa0:	dc400915 	stw	r17,36(sp)
   1daa4:	a501ffcc 	andi	r20,r20,2047
   1daa8:	2c20703a 	and	r16,r5,r16
   1daac:	b827883a 	mov	r19,r23
   1dab0:	ba403fcc 	andi	r9,r23,255
   1dab4:	a0006026 	beq	r20,zero,1dc38 <__muldf3+0x1d0>
   1dab8:	0081ffc4 	movi	r2,2047
   1dabc:	202d883a 	mov	r22,r4
   1dac0:	a0803626 	beq	r20,r2,1db9c <__muldf3+0x134>
   1dac4:	84000434 	orhi	r16,r16,16
   1dac8:	200ad77a 	srli	r5,r4,29
   1dacc:	800490fa 	slli	r2,r16,3
   1dad0:	202c90fa 	slli	r22,r4,3
   1dad4:	a53f0044 	addi	r20,r20,-1023
   1dad8:	28a0b03a 	or	r16,r5,r2
   1dadc:	002b883a 	mov	r21,zero
   1dae0:	000b883a 	mov	r5,zero
   1dae4:	3804d53a 	srli	r2,r7,20
   1dae8:	3838d7fa 	srli	fp,r7,31
   1daec:	04400434 	movhi	r17,16
   1daf0:	8c7fffc4 	addi	r17,r17,-1
   1daf4:	1081ffcc 	andi	r2,r2,2047
   1daf8:	3025883a 	mov	r18,r6
   1dafc:	3c62703a 	and	r17,r7,r17
   1db00:	e2803fcc 	andi	r10,fp,255
   1db04:	10006d26 	beq	r2,zero,1dcbc <__muldf3+0x254>
   1db08:	00c1ffc4 	movi	r3,2047
   1db0c:	10c06526 	beq	r2,r3,1dca4 <__muldf3+0x23c>
   1db10:	8c400434 	orhi	r17,r17,16
   1db14:	300ed77a 	srli	r7,r6,29
   1db18:	880690fa 	slli	r3,r17,3
   1db1c:	302490fa 	slli	r18,r6,3
   1db20:	10bf0044 	addi	r2,r2,-1023
   1db24:	38e2b03a 	or	r17,r7,r3
   1db28:	000f883a 	mov	r7,zero
   1db2c:	a087883a 	add	r3,r20,r2
   1db30:	010003c4 	movi	r4,15
   1db34:	3d44b03a 	or	r2,r7,r21
   1db38:	e5ccf03a 	xor	r6,fp,r23
   1db3c:	1a000044 	addi	r8,r3,1
   1db40:	20809b36 	bltu	r4,r2,1ddb0 <__muldf3+0x348>
   1db44:	100490ba 	slli	r2,r2,2
   1db48:	010000b4 	movhi	r4,2
   1db4c:	2136d704 	addi	r4,r4,-9380
   1db50:	1105883a 	add	r2,r2,r4
   1db54:	10800017 	ldw	r2,0(r2)
   1db58:	1000683a 	jmp	r2
   1db5c:	0001ddb0 	cmpltui	zero,zero,1910
   1db60:	0001dbbc 	xorhi	zero,zero,1902
   1db64:	0001dbbc 	xorhi	zero,zero,1902
   1db68:	0001dbb8 	rdprs	zero,zero,1902
   1db6c:	0001dd8c 	andi	zero,zero,1910
   1db70:	0001dd8c 	andi	zero,zero,1910
   1db74:	0001dd74 	movhi	zero,1909
   1db78:	0001dbb8 	rdprs	zero,zero,1902
   1db7c:	0001dd8c 	andi	zero,zero,1910
   1db80:	0001dd74 	movhi	zero,1909
   1db84:	0001dd8c 	andi	zero,zero,1910
   1db88:	0001dbb8 	rdprs	zero,zero,1902
   1db8c:	0001dd9c 	xori	zero,zero,1910
   1db90:	0001dd9c 	xori	zero,zero,1910
   1db94:	0001dd9c 	xori	zero,zero,1910
   1db98:	0001e0fc 	xorhi	zero,zero,1923
   1db9c:	2404b03a 	or	r2,r4,r16
   1dba0:	1000711e 	bne	r2,zero,1dd68 <__muldf3+0x300>
   1dba4:	05400204 	movi	r21,8
   1dba8:	0021883a 	mov	r16,zero
   1dbac:	002d883a 	mov	r22,zero
   1dbb0:	01400084 	movi	r5,2
   1dbb4:	003fcb06 	br	1dae4 <__alt_data_end+0xfc01dae4>
   1dbb8:	500d883a 	mov	r6,r10
   1dbbc:	00800084 	movi	r2,2
   1dbc0:	38805926 	beq	r7,r2,1dd28 <__muldf3+0x2c0>
   1dbc4:	008000c4 	movi	r2,3
   1dbc8:	3881bb26 	beq	r7,r2,1e2b8 <__muldf3+0x850>
   1dbcc:	00800044 	movi	r2,1
   1dbd0:	3881961e 	bne	r7,r2,1e22c <__muldf3+0x7c4>
   1dbd4:	3027883a 	mov	r19,r6
   1dbd8:	0005883a 	mov	r2,zero
   1dbdc:	0021883a 	mov	r16,zero
   1dbe0:	002d883a 	mov	r22,zero
   1dbe4:	1004953a 	slli	r2,r2,20
   1dbe8:	98c03fcc 	andi	r3,r19,255
   1dbec:	04400434 	movhi	r17,16
   1dbf0:	8c7fffc4 	addi	r17,r17,-1
   1dbf4:	180697fa 	slli	r3,r3,31
   1dbf8:	8460703a 	and	r16,r16,r17
   1dbfc:	80a0b03a 	or	r16,r16,r2
   1dc00:	80c6b03a 	or	r3,r16,r3
   1dc04:	b005883a 	mov	r2,r22
   1dc08:	dfc01117 	ldw	ra,68(sp)
   1dc0c:	df001017 	ldw	fp,64(sp)
   1dc10:	ddc00f17 	ldw	r23,60(sp)
   1dc14:	dd800e17 	ldw	r22,56(sp)
   1dc18:	dd400d17 	ldw	r21,52(sp)
   1dc1c:	dd000c17 	ldw	r20,48(sp)
   1dc20:	dcc00b17 	ldw	r19,44(sp)
   1dc24:	dc800a17 	ldw	r18,40(sp)
   1dc28:	dc400917 	ldw	r17,36(sp)
   1dc2c:	dc000817 	ldw	r16,32(sp)
   1dc30:	dec01204 	addi	sp,sp,72
   1dc34:	f800283a 	ret
   1dc38:	2404b03a 	or	r2,r4,r16
   1dc3c:	202b883a 	mov	r21,r4
   1dc40:	10004426 	beq	r2,zero,1dd54 <__muldf3+0x2ec>
   1dc44:	80015126 	beq	r16,zero,1e18c <__muldf3+0x724>
   1dc48:	8009883a 	mov	r4,r16
   1dc4c:	d9800715 	stw	r6,28(sp)
   1dc50:	d9c00215 	stw	r7,8(sp)
   1dc54:	da400415 	stw	r9,16(sp)
   1dc58:	000e2600 	call	e260 <__clzsi2>
   1dc5c:	d9800717 	ldw	r6,28(sp)
   1dc60:	d9c00217 	ldw	r7,8(sp)
   1dc64:	da400417 	ldw	r9,16(sp)
   1dc68:	113ffd44 	addi	r4,r2,-11
   1dc6c:	00c00704 	movi	r3,28
   1dc70:	19014216 	blt	r3,r4,1e17c <__muldf3+0x714>
   1dc74:	00c00744 	movi	r3,29
   1dc78:	15bffe04 	addi	r22,r2,-8
   1dc7c:	1907c83a 	sub	r3,r3,r4
   1dc80:	85a0983a 	sll	r16,r16,r22
   1dc84:	a8c6d83a 	srl	r3,r21,r3
   1dc88:	adac983a 	sll	r22,r21,r22
   1dc8c:	1c20b03a 	or	r16,r3,r16
   1dc90:	1080fcc4 	addi	r2,r2,1011
   1dc94:	00a9c83a 	sub	r20,zero,r2
   1dc98:	002b883a 	mov	r21,zero
   1dc9c:	000b883a 	mov	r5,zero
   1dca0:	003f9006 	br	1dae4 <__alt_data_end+0xfc01dae4>
   1dca4:	3446b03a 	or	r3,r6,r17
   1dca8:	1800281e 	bne	r3,zero,1dd4c <__muldf3+0x2e4>
   1dcac:	0023883a 	mov	r17,zero
   1dcb0:	0025883a 	mov	r18,zero
   1dcb4:	01c00084 	movi	r7,2
   1dcb8:	003f9c06 	br	1db2c <__alt_data_end+0xfc01db2c>
   1dcbc:	3446b03a 	or	r3,r6,r17
   1dcc0:	18001e26 	beq	r3,zero,1dd3c <__muldf3+0x2d4>
   1dcc4:	88012126 	beq	r17,zero,1e14c <__muldf3+0x6e4>
   1dcc8:	8809883a 	mov	r4,r17
   1dccc:	d9400215 	stw	r5,8(sp)
   1dcd0:	d9800715 	stw	r6,28(sp)
   1dcd4:	da400415 	stw	r9,16(sp)
   1dcd8:	da800315 	stw	r10,12(sp)
   1dcdc:	000e2600 	call	e260 <__clzsi2>
   1dce0:	d9400217 	ldw	r5,8(sp)
   1dce4:	d9800717 	ldw	r6,28(sp)
   1dce8:	da400417 	ldw	r9,16(sp)
   1dcec:	da800317 	ldw	r10,12(sp)
   1dcf0:	113ffd44 	addi	r4,r2,-11
   1dcf4:	00c00704 	movi	r3,28
   1dcf8:	19011016 	blt	r3,r4,1e13c <__muldf3+0x6d4>
   1dcfc:	00c00744 	movi	r3,29
   1dd00:	14bffe04 	addi	r18,r2,-8
   1dd04:	1907c83a 	sub	r3,r3,r4
   1dd08:	8ca2983a 	sll	r17,r17,r18
   1dd0c:	30c6d83a 	srl	r3,r6,r3
   1dd10:	34a4983a 	sll	r18,r6,r18
   1dd14:	1c62b03a 	or	r17,r3,r17
   1dd18:	1080fcc4 	addi	r2,r2,1011
   1dd1c:	0085c83a 	sub	r2,zero,r2
   1dd20:	000f883a 	mov	r7,zero
   1dd24:	003f8106 	br	1db2c <__alt_data_end+0xfc01db2c>
   1dd28:	3027883a 	mov	r19,r6
   1dd2c:	0081ffc4 	movi	r2,2047
   1dd30:	0021883a 	mov	r16,zero
   1dd34:	002d883a 	mov	r22,zero
   1dd38:	003faa06 	br	1dbe4 <__alt_data_end+0xfc01dbe4>
   1dd3c:	0023883a 	mov	r17,zero
   1dd40:	0025883a 	mov	r18,zero
   1dd44:	01c00044 	movi	r7,1
   1dd48:	003f7806 	br	1db2c <__alt_data_end+0xfc01db2c>
   1dd4c:	01c000c4 	movi	r7,3
   1dd50:	003f7606 	br	1db2c <__alt_data_end+0xfc01db2c>
   1dd54:	05400104 	movi	r21,4
   1dd58:	0021883a 	mov	r16,zero
   1dd5c:	002d883a 	mov	r22,zero
   1dd60:	01400044 	movi	r5,1
   1dd64:	003f5f06 	br	1dae4 <__alt_data_end+0xfc01dae4>
   1dd68:	05400304 	movi	r21,12
   1dd6c:	014000c4 	movi	r5,3
   1dd70:	003f5c06 	br	1dae4 <__alt_data_end+0xfc01dae4>
   1dd74:	04000434 	movhi	r16,16
   1dd78:	0027883a 	mov	r19,zero
   1dd7c:	843fffc4 	addi	r16,r16,-1
   1dd80:	05bfffc4 	movi	r22,-1
   1dd84:	0081ffc4 	movi	r2,2047
   1dd88:	003f9606 	br	1dbe4 <__alt_data_end+0xfc01dbe4>
   1dd8c:	8023883a 	mov	r17,r16
   1dd90:	b025883a 	mov	r18,r22
   1dd94:	280f883a 	mov	r7,r5
   1dd98:	003f8806 	br	1dbbc <__alt_data_end+0xfc01dbbc>
   1dd9c:	8023883a 	mov	r17,r16
   1dda0:	b025883a 	mov	r18,r22
   1dda4:	480d883a 	mov	r6,r9
   1dda8:	280f883a 	mov	r7,r5
   1ddac:	003f8306 	br	1dbbc <__alt_data_end+0xfc01dbbc>
   1ddb0:	b026d43a 	srli	r19,r22,16
   1ddb4:	902ed43a 	srli	r23,r18,16
   1ddb8:	b5bfffcc 	andi	r22,r22,65535
   1ddbc:	94bfffcc 	andi	r18,r18,65535
   1ddc0:	b00b883a 	mov	r5,r22
   1ddc4:	9009883a 	mov	r4,r18
   1ddc8:	d8c00515 	stw	r3,20(sp)
   1ddcc:	d9800715 	stw	r6,28(sp)
   1ddd0:	da000615 	stw	r8,24(sp)
   1ddd4:	000cda80 	call	cda8 <__mulsi3>
   1ddd8:	980b883a 	mov	r5,r19
   1dddc:	9009883a 	mov	r4,r18
   1dde0:	1029883a 	mov	r20,r2
   1dde4:	000cda80 	call	cda8 <__mulsi3>
   1dde8:	b80b883a 	mov	r5,r23
   1ddec:	9809883a 	mov	r4,r19
   1ddf0:	102b883a 	mov	r21,r2
   1ddf4:	000cda80 	call	cda8 <__mulsi3>
   1ddf8:	b809883a 	mov	r4,r23
   1ddfc:	b00b883a 	mov	r5,r22
   1de00:	1039883a 	mov	fp,r2
   1de04:	000cda80 	call	cda8 <__mulsi3>
   1de08:	a008d43a 	srli	r4,r20,16
   1de0c:	1545883a 	add	r2,r2,r21
   1de10:	d8c00517 	ldw	r3,20(sp)
   1de14:	2085883a 	add	r2,r4,r2
   1de18:	d9800717 	ldw	r6,28(sp)
   1de1c:	da000617 	ldw	r8,24(sp)
   1de20:	1540022e 	bgeu	r2,r21,1de2c <__muldf3+0x3c4>
   1de24:	01000074 	movhi	r4,1
   1de28:	e139883a 	add	fp,fp,r4
   1de2c:	100e943a 	slli	r7,r2,16
   1de30:	1004d43a 	srli	r2,r2,16
   1de34:	882ad43a 	srli	r21,r17,16
   1de38:	a53fffcc 	andi	r20,r20,65535
   1de3c:	8c7fffcc 	andi	r17,r17,65535
   1de40:	3d29883a 	add	r20,r7,r20
   1de44:	b00b883a 	mov	r5,r22
   1de48:	8809883a 	mov	r4,r17
   1de4c:	d8c00515 	stw	r3,20(sp)
   1de50:	d9800715 	stw	r6,28(sp)
   1de54:	da000615 	stw	r8,24(sp)
   1de58:	dd000115 	stw	r20,4(sp)
   1de5c:	d8800015 	stw	r2,0(sp)
   1de60:	000cda80 	call	cda8 <__mulsi3>
   1de64:	980b883a 	mov	r5,r19
   1de68:	8809883a 	mov	r4,r17
   1de6c:	d8800215 	stw	r2,8(sp)
   1de70:	000cda80 	call	cda8 <__mulsi3>
   1de74:	9809883a 	mov	r4,r19
   1de78:	a80b883a 	mov	r5,r21
   1de7c:	1029883a 	mov	r20,r2
   1de80:	000cda80 	call	cda8 <__mulsi3>
   1de84:	b00b883a 	mov	r5,r22
   1de88:	a809883a 	mov	r4,r21
   1de8c:	d8800415 	stw	r2,16(sp)
   1de90:	000cda80 	call	cda8 <__mulsi3>
   1de94:	d9c00217 	ldw	r7,8(sp)
   1de98:	1505883a 	add	r2,r2,r20
   1de9c:	d8c00517 	ldw	r3,20(sp)
   1dea0:	3826d43a 	srli	r19,r7,16
   1dea4:	d9800717 	ldw	r6,28(sp)
   1dea8:	da000617 	ldw	r8,24(sp)
   1deac:	9885883a 	add	r2,r19,r2
   1deb0:	da400417 	ldw	r9,16(sp)
   1deb4:	1500022e 	bgeu	r2,r20,1dec0 <__muldf3+0x458>
   1deb8:	01000074 	movhi	r4,1
   1debc:	4913883a 	add	r9,r9,r4
   1dec0:	1028d43a 	srli	r20,r2,16
   1dec4:	1004943a 	slli	r2,r2,16
   1dec8:	802cd43a 	srli	r22,r16,16
   1decc:	843fffcc 	andi	r16,r16,65535
   1ded0:	3cffffcc 	andi	r19,r7,65535
   1ded4:	9009883a 	mov	r4,r18
   1ded8:	800b883a 	mov	r5,r16
   1dedc:	a269883a 	add	r20,r20,r9
   1dee0:	d8c00515 	stw	r3,20(sp)
   1dee4:	d9800715 	stw	r6,28(sp)
   1dee8:	da000615 	stw	r8,24(sp)
   1deec:	14e7883a 	add	r19,r2,r19
   1def0:	000cda80 	call	cda8 <__mulsi3>
   1def4:	9009883a 	mov	r4,r18
   1def8:	b00b883a 	mov	r5,r22
   1defc:	d8800315 	stw	r2,12(sp)
   1df00:	000cda80 	call	cda8 <__mulsi3>
   1df04:	b809883a 	mov	r4,r23
   1df08:	b00b883a 	mov	r5,r22
   1df0c:	d8800215 	stw	r2,8(sp)
   1df10:	000cda80 	call	cda8 <__mulsi3>
   1df14:	b80b883a 	mov	r5,r23
   1df18:	8009883a 	mov	r4,r16
   1df1c:	d8800415 	stw	r2,16(sp)
   1df20:	000cda80 	call	cda8 <__mulsi3>
   1df24:	da800317 	ldw	r10,12(sp)
   1df28:	d9c00217 	ldw	r7,8(sp)
   1df2c:	d9000017 	ldw	r4,0(sp)
   1df30:	502ed43a 	srli	r23,r10,16
   1df34:	11c5883a 	add	r2,r2,r7
   1df38:	24e5883a 	add	r18,r4,r19
   1df3c:	b885883a 	add	r2,r23,r2
   1df40:	d8c00517 	ldw	r3,20(sp)
   1df44:	d9800717 	ldw	r6,28(sp)
   1df48:	da000617 	ldw	r8,24(sp)
   1df4c:	da400417 	ldw	r9,16(sp)
   1df50:	11c0022e 	bgeu	r2,r7,1df5c <__muldf3+0x4f4>
   1df54:	01000074 	movhi	r4,1
   1df58:	4913883a 	add	r9,r9,r4
   1df5c:	100ed43a 	srli	r7,r2,16
   1df60:	1004943a 	slli	r2,r2,16
   1df64:	55ffffcc 	andi	r23,r10,65535
   1df68:	3a53883a 	add	r9,r7,r9
   1df6c:	8809883a 	mov	r4,r17
   1df70:	800b883a 	mov	r5,r16
   1df74:	d8c00515 	stw	r3,20(sp)
   1df78:	d9800715 	stw	r6,28(sp)
   1df7c:	da000615 	stw	r8,24(sp)
   1df80:	da400415 	stw	r9,16(sp)
   1df84:	15ef883a 	add	r23,r2,r23
   1df88:	000cda80 	call	cda8 <__mulsi3>
   1df8c:	8809883a 	mov	r4,r17
   1df90:	b00b883a 	mov	r5,r22
   1df94:	d8800215 	stw	r2,8(sp)
   1df98:	000cda80 	call	cda8 <__mulsi3>
   1df9c:	b00b883a 	mov	r5,r22
   1dfa0:	a809883a 	mov	r4,r21
   1dfa4:	d8800315 	stw	r2,12(sp)
   1dfa8:	000cda80 	call	cda8 <__mulsi3>
   1dfac:	8009883a 	mov	r4,r16
   1dfb0:	a80b883a 	mov	r5,r21
   1dfb4:	1023883a 	mov	r17,r2
   1dfb8:	000cda80 	call	cda8 <__mulsi3>
   1dfbc:	d9c00217 	ldw	r7,8(sp)
   1dfc0:	da800317 	ldw	r10,12(sp)
   1dfc4:	d8c00517 	ldw	r3,20(sp)
   1dfc8:	3808d43a 	srli	r4,r7,16
   1dfcc:	1285883a 	add	r2,r2,r10
   1dfd0:	d9800717 	ldw	r6,28(sp)
   1dfd4:	2085883a 	add	r2,r4,r2
   1dfd8:	da000617 	ldw	r8,24(sp)
   1dfdc:	da400417 	ldw	r9,16(sp)
   1dfe0:	1280022e 	bgeu	r2,r10,1dfec <__muldf3+0x584>
   1dfe4:	01000074 	movhi	r4,1
   1dfe8:	8923883a 	add	r17,r17,r4
   1dfec:	1008943a 	slli	r4,r2,16
   1dff0:	39ffffcc 	andi	r7,r7,65535
   1dff4:	e4b9883a 	add	fp,fp,r18
   1dff8:	21cf883a 	add	r7,r4,r7
   1dffc:	e4e7803a 	cmpltu	r19,fp,r19
   1e000:	3d0f883a 	add	r7,r7,r20
   1e004:	bf39883a 	add	fp,r23,fp
   1e008:	99c9883a 	add	r4,r19,r7
   1e00c:	e5ef803a 	cmpltu	r23,fp,r23
   1e010:	490b883a 	add	r5,r9,r4
   1e014:	1004d43a 	srli	r2,r2,16
   1e018:	b965883a 	add	r18,r23,r5
   1e01c:	24c9803a 	cmpltu	r4,r4,r19
   1e020:	3d29803a 	cmpltu	r20,r7,r20
   1e024:	a128b03a 	or	r20,r20,r4
   1e028:	95ef803a 	cmpltu	r23,r18,r23
   1e02c:	2a53803a 	cmpltu	r9,r5,r9
   1e030:	a0a9883a 	add	r20,r20,r2
   1e034:	4deeb03a 	or	r23,r9,r23
   1e038:	a5ef883a 	add	r23,r20,r23
   1e03c:	bc63883a 	add	r17,r23,r17
   1e040:	e004927a 	slli	r2,fp,9
   1e044:	d9000117 	ldw	r4,4(sp)
   1e048:	882e927a 	slli	r23,r17,9
   1e04c:	9022d5fa 	srli	r17,r18,23
   1e050:	e038d5fa 	srli	fp,fp,23
   1e054:	1104b03a 	or	r2,r2,r4
   1e058:	9024927a 	slli	r18,r18,9
   1e05c:	1004c03a 	cmpne	r2,r2,zero
   1e060:	bc62b03a 	or	r17,r23,r17
   1e064:	1738b03a 	or	fp,r2,fp
   1e068:	8880402c 	andhi	r2,r17,256
   1e06c:	e4a4b03a 	or	r18,fp,r18
   1e070:	10000726 	beq	r2,zero,1e090 <__muldf3+0x628>
   1e074:	9006d07a 	srli	r3,r18,1
   1e078:	880497fa 	slli	r2,r17,31
   1e07c:	9480004c 	andi	r18,r18,1
   1e080:	8822d07a 	srli	r17,r17,1
   1e084:	1ca4b03a 	or	r18,r3,r18
   1e088:	14a4b03a 	or	r18,r2,r18
   1e08c:	4007883a 	mov	r3,r8
   1e090:	1880ffc4 	addi	r2,r3,1023
   1e094:	0080460e 	bge	zero,r2,1e1b0 <__muldf3+0x748>
   1e098:	910001cc 	andi	r4,r18,7
   1e09c:	20000726 	beq	r4,zero,1e0bc <__muldf3+0x654>
   1e0a0:	910003cc 	andi	r4,r18,15
   1e0a4:	01400104 	movi	r5,4
   1e0a8:	21400426 	beq	r4,r5,1e0bc <__muldf3+0x654>
   1e0ac:	9149883a 	add	r4,r18,r5
   1e0b0:	24a5803a 	cmpltu	r18,r4,r18
   1e0b4:	8ca3883a 	add	r17,r17,r18
   1e0b8:	2025883a 	mov	r18,r4
   1e0bc:	8900402c 	andhi	r4,r17,256
   1e0c0:	20000426 	beq	r4,zero,1e0d4 <__muldf3+0x66c>
   1e0c4:	18810004 	addi	r2,r3,1024
   1e0c8:	00ffc034 	movhi	r3,65280
   1e0cc:	18ffffc4 	addi	r3,r3,-1
   1e0d0:	88e2703a 	and	r17,r17,r3
   1e0d4:	00c1ff84 	movi	r3,2046
   1e0d8:	18bf1316 	blt	r3,r2,1dd28 <__alt_data_end+0xfc01dd28>
   1e0dc:	882c977a 	slli	r22,r17,29
   1e0e0:	9024d0fa 	srli	r18,r18,3
   1e0e4:	8822927a 	slli	r17,r17,9
   1e0e8:	1081ffcc 	andi	r2,r2,2047
   1e0ec:	b4acb03a 	or	r22,r22,r18
   1e0f0:	8820d33a 	srli	r16,r17,12
   1e0f4:	3027883a 	mov	r19,r6
   1e0f8:	003eba06 	br	1dbe4 <__alt_data_end+0xfc01dbe4>
   1e0fc:	8080022c 	andhi	r2,r16,8
   1e100:	10000926 	beq	r2,zero,1e128 <__muldf3+0x6c0>
   1e104:	8880022c 	andhi	r2,r17,8
   1e108:	1000071e 	bne	r2,zero,1e128 <__muldf3+0x6c0>
   1e10c:	00800434 	movhi	r2,16
   1e110:	8c000234 	orhi	r16,r17,8
   1e114:	10bfffc4 	addi	r2,r2,-1
   1e118:	e027883a 	mov	r19,fp
   1e11c:	80a0703a 	and	r16,r16,r2
   1e120:	902d883a 	mov	r22,r18
   1e124:	003f1706 	br	1dd84 <__alt_data_end+0xfc01dd84>
   1e128:	00800434 	movhi	r2,16
   1e12c:	84000234 	orhi	r16,r16,8
   1e130:	10bfffc4 	addi	r2,r2,-1
   1e134:	80a0703a 	and	r16,r16,r2
   1e138:	003f1206 	br	1dd84 <__alt_data_end+0xfc01dd84>
   1e13c:	147ff604 	addi	r17,r2,-40
   1e140:	3462983a 	sll	r17,r6,r17
   1e144:	0025883a 	mov	r18,zero
   1e148:	003ef306 	br	1dd18 <__alt_data_end+0xfc01dd18>
   1e14c:	3009883a 	mov	r4,r6
   1e150:	d9400215 	stw	r5,8(sp)
   1e154:	d9800715 	stw	r6,28(sp)
   1e158:	da400415 	stw	r9,16(sp)
   1e15c:	da800315 	stw	r10,12(sp)
   1e160:	000e2600 	call	e260 <__clzsi2>
   1e164:	10800804 	addi	r2,r2,32
   1e168:	da800317 	ldw	r10,12(sp)
   1e16c:	da400417 	ldw	r9,16(sp)
   1e170:	d9800717 	ldw	r6,28(sp)
   1e174:	d9400217 	ldw	r5,8(sp)
   1e178:	003edd06 	br	1dcf0 <__alt_data_end+0xfc01dcf0>
   1e17c:	143ff604 	addi	r16,r2,-40
   1e180:	ac20983a 	sll	r16,r21,r16
   1e184:	002d883a 	mov	r22,zero
   1e188:	003ec106 	br	1dc90 <__alt_data_end+0xfc01dc90>
   1e18c:	d9800715 	stw	r6,28(sp)
   1e190:	d9c00215 	stw	r7,8(sp)
   1e194:	da400415 	stw	r9,16(sp)
   1e198:	000e2600 	call	e260 <__clzsi2>
   1e19c:	10800804 	addi	r2,r2,32
   1e1a0:	da400417 	ldw	r9,16(sp)
   1e1a4:	d9c00217 	ldw	r7,8(sp)
   1e1a8:	d9800717 	ldw	r6,28(sp)
   1e1ac:	003eae06 	br	1dc68 <__alt_data_end+0xfc01dc68>
   1e1b0:	00c00044 	movi	r3,1
   1e1b4:	1887c83a 	sub	r3,r3,r2
   1e1b8:	01000e04 	movi	r4,56
   1e1bc:	20fe8516 	blt	r4,r3,1dbd4 <__alt_data_end+0xfc01dbd4>
   1e1c0:	010007c4 	movi	r4,31
   1e1c4:	20c01b16 	blt	r4,r3,1e234 <__muldf3+0x7cc>
   1e1c8:	00800804 	movi	r2,32
   1e1cc:	10c5c83a 	sub	r2,r2,r3
   1e1d0:	888a983a 	sll	r5,r17,r2
   1e1d4:	90c8d83a 	srl	r4,r18,r3
   1e1d8:	9084983a 	sll	r2,r18,r2
   1e1dc:	88e2d83a 	srl	r17,r17,r3
   1e1e0:	2906b03a 	or	r3,r5,r4
   1e1e4:	1004c03a 	cmpne	r2,r2,zero
   1e1e8:	1886b03a 	or	r3,r3,r2
   1e1ec:	188001cc 	andi	r2,r3,7
   1e1f0:	10000726 	beq	r2,zero,1e210 <__muldf3+0x7a8>
   1e1f4:	188003cc 	andi	r2,r3,15
   1e1f8:	01000104 	movi	r4,4
   1e1fc:	11000426 	beq	r2,r4,1e210 <__muldf3+0x7a8>
   1e200:	1805883a 	mov	r2,r3
   1e204:	10c00104 	addi	r3,r2,4
   1e208:	1885803a 	cmpltu	r2,r3,r2
   1e20c:	88a3883a 	add	r17,r17,r2
   1e210:	8880202c 	andhi	r2,r17,128
   1e214:	10001c26 	beq	r2,zero,1e288 <__muldf3+0x820>
   1e218:	3027883a 	mov	r19,r6
   1e21c:	00800044 	movi	r2,1
   1e220:	0021883a 	mov	r16,zero
   1e224:	002d883a 	mov	r22,zero
   1e228:	003e6e06 	br	1dbe4 <__alt_data_end+0xfc01dbe4>
   1e22c:	4007883a 	mov	r3,r8
   1e230:	003f9706 	br	1e090 <__alt_data_end+0xfc01e090>
   1e234:	017ff844 	movi	r5,-31
   1e238:	2885c83a 	sub	r2,r5,r2
   1e23c:	888ad83a 	srl	r5,r17,r2
   1e240:	00800804 	movi	r2,32
   1e244:	18801a26 	beq	r3,r2,1e2b0 <__muldf3+0x848>
   1e248:	01001004 	movi	r4,64
   1e24c:	20c7c83a 	sub	r3,r4,r3
   1e250:	88e2983a 	sll	r17,r17,r3
   1e254:	8ca4b03a 	or	r18,r17,r18
   1e258:	9004c03a 	cmpne	r2,r18,zero
   1e25c:	2884b03a 	or	r2,r5,r2
   1e260:	144001cc 	andi	r17,r2,7
   1e264:	88000d1e 	bne	r17,zero,1e29c <__muldf3+0x834>
   1e268:	0021883a 	mov	r16,zero
   1e26c:	102cd0fa 	srli	r22,r2,3
   1e270:	3027883a 	mov	r19,r6
   1e274:	0005883a 	mov	r2,zero
   1e278:	b46cb03a 	or	r22,r22,r17
   1e27c:	003e5906 	br	1dbe4 <__alt_data_end+0xfc01dbe4>
   1e280:	1007883a 	mov	r3,r2
   1e284:	0023883a 	mov	r17,zero
   1e288:	8820927a 	slli	r16,r17,9
   1e28c:	1805883a 	mov	r2,r3
   1e290:	8822977a 	slli	r17,r17,29
   1e294:	8020d33a 	srli	r16,r16,12
   1e298:	003ff406 	br	1e26c <__alt_data_end+0xfc01e26c>
   1e29c:	10c003cc 	andi	r3,r2,15
   1e2a0:	01000104 	movi	r4,4
   1e2a4:	193ff626 	beq	r3,r4,1e280 <__alt_data_end+0xfc01e280>
   1e2a8:	0023883a 	mov	r17,zero
   1e2ac:	003fd506 	br	1e204 <__alt_data_end+0xfc01e204>
   1e2b0:	0023883a 	mov	r17,zero
   1e2b4:	003fe706 	br	1e254 <__alt_data_end+0xfc01e254>
   1e2b8:	00800434 	movhi	r2,16
   1e2bc:	8c000234 	orhi	r16,r17,8
   1e2c0:	10bfffc4 	addi	r2,r2,-1
   1e2c4:	3027883a 	mov	r19,r6
   1e2c8:	80a0703a 	and	r16,r16,r2
   1e2cc:	902d883a 	mov	r22,r18
   1e2d0:	003eac06 	br	1dd84 <__alt_data_end+0xfc01dd84>

0001e2d4 <__subdf3>:
   1e2d4:	02000434 	movhi	r8,16
   1e2d8:	423fffc4 	addi	r8,r8,-1
   1e2dc:	defffb04 	addi	sp,sp,-20
   1e2e0:	2a14703a 	and	r10,r5,r8
   1e2e4:	3812d53a 	srli	r9,r7,20
   1e2e8:	3a10703a 	and	r8,r7,r8
   1e2ec:	2006d77a 	srli	r3,r4,29
   1e2f0:	3004d77a 	srli	r2,r6,29
   1e2f4:	dc000015 	stw	r16,0(sp)
   1e2f8:	501490fa 	slli	r10,r10,3
   1e2fc:	2820d53a 	srli	r16,r5,20
   1e300:	401090fa 	slli	r8,r8,3
   1e304:	dc800215 	stw	r18,8(sp)
   1e308:	dc400115 	stw	r17,4(sp)
   1e30c:	dfc00415 	stw	ra,16(sp)
   1e310:	202290fa 	slli	r17,r4,3
   1e314:	dcc00315 	stw	r19,12(sp)
   1e318:	4a41ffcc 	andi	r9,r9,2047
   1e31c:	0101ffc4 	movi	r4,2047
   1e320:	2824d7fa 	srli	r18,r5,31
   1e324:	8401ffcc 	andi	r16,r16,2047
   1e328:	50c6b03a 	or	r3,r10,r3
   1e32c:	380ed7fa 	srli	r7,r7,31
   1e330:	408ab03a 	or	r5,r8,r2
   1e334:	300c90fa 	slli	r6,r6,3
   1e338:	49009626 	beq	r9,r4,1e594 <__subdf3+0x2c0>
   1e33c:	39c0005c 	xori	r7,r7,1
   1e340:	8245c83a 	sub	r2,r16,r9
   1e344:	3c807426 	beq	r7,r18,1e518 <__subdf3+0x244>
   1e348:	0080af0e 	bge	zero,r2,1e608 <__subdf3+0x334>
   1e34c:	48002a1e 	bne	r9,zero,1e3f8 <__subdf3+0x124>
   1e350:	2988b03a 	or	r4,r5,r6
   1e354:	20009a1e 	bne	r4,zero,1e5c0 <__subdf3+0x2ec>
   1e358:	888001cc 	andi	r2,r17,7
   1e35c:	10000726 	beq	r2,zero,1e37c <__subdf3+0xa8>
   1e360:	888003cc 	andi	r2,r17,15
   1e364:	01000104 	movi	r4,4
   1e368:	11000426 	beq	r2,r4,1e37c <__subdf3+0xa8>
   1e36c:	890b883a 	add	r5,r17,r4
   1e370:	2c63803a 	cmpltu	r17,r5,r17
   1e374:	1c47883a 	add	r3,r3,r17
   1e378:	2823883a 	mov	r17,r5
   1e37c:	1880202c 	andhi	r2,r3,128
   1e380:	10005926 	beq	r2,zero,1e4e8 <__subdf3+0x214>
   1e384:	84000044 	addi	r16,r16,1
   1e388:	0081ffc4 	movi	r2,2047
   1e38c:	8080be26 	beq	r16,r2,1e688 <__subdf3+0x3b4>
   1e390:	017fe034 	movhi	r5,65408
   1e394:	297fffc4 	addi	r5,r5,-1
   1e398:	1946703a 	and	r3,r3,r5
   1e39c:	1804977a 	slli	r2,r3,29
   1e3a0:	1806927a 	slli	r3,r3,9
   1e3a4:	8822d0fa 	srli	r17,r17,3
   1e3a8:	8401ffcc 	andi	r16,r16,2047
   1e3ac:	180ad33a 	srli	r5,r3,12
   1e3b0:	9100004c 	andi	r4,r18,1
   1e3b4:	1444b03a 	or	r2,r2,r17
   1e3b8:	80c1ffcc 	andi	r3,r16,2047
   1e3bc:	1820953a 	slli	r16,r3,20
   1e3c0:	20c03fcc 	andi	r3,r4,255
   1e3c4:	180897fa 	slli	r4,r3,31
   1e3c8:	00c00434 	movhi	r3,16
   1e3cc:	18ffffc4 	addi	r3,r3,-1
   1e3d0:	28c6703a 	and	r3,r5,r3
   1e3d4:	1c06b03a 	or	r3,r3,r16
   1e3d8:	1906b03a 	or	r3,r3,r4
   1e3dc:	dfc00417 	ldw	ra,16(sp)
   1e3e0:	dcc00317 	ldw	r19,12(sp)
   1e3e4:	dc800217 	ldw	r18,8(sp)
   1e3e8:	dc400117 	ldw	r17,4(sp)
   1e3ec:	dc000017 	ldw	r16,0(sp)
   1e3f0:	dec00504 	addi	sp,sp,20
   1e3f4:	f800283a 	ret
   1e3f8:	0101ffc4 	movi	r4,2047
   1e3fc:	813fd626 	beq	r16,r4,1e358 <__alt_data_end+0xfc01e358>
   1e400:	29402034 	orhi	r5,r5,128
   1e404:	01000e04 	movi	r4,56
   1e408:	2080a316 	blt	r4,r2,1e698 <__subdf3+0x3c4>
   1e40c:	010007c4 	movi	r4,31
   1e410:	2080c616 	blt	r4,r2,1e72c <__subdf3+0x458>
   1e414:	01000804 	movi	r4,32
   1e418:	2089c83a 	sub	r4,r4,r2
   1e41c:	2910983a 	sll	r8,r5,r4
   1e420:	308ed83a 	srl	r7,r6,r2
   1e424:	3108983a 	sll	r4,r6,r4
   1e428:	2884d83a 	srl	r2,r5,r2
   1e42c:	41ccb03a 	or	r6,r8,r7
   1e430:	2008c03a 	cmpne	r4,r4,zero
   1e434:	310cb03a 	or	r6,r6,r4
   1e438:	898dc83a 	sub	r6,r17,r6
   1e43c:	89a3803a 	cmpltu	r17,r17,r6
   1e440:	1887c83a 	sub	r3,r3,r2
   1e444:	1c47c83a 	sub	r3,r3,r17
   1e448:	3023883a 	mov	r17,r6
   1e44c:	1880202c 	andhi	r2,r3,128
   1e450:	10002326 	beq	r2,zero,1e4e0 <__subdf3+0x20c>
   1e454:	04c02034 	movhi	r19,128
   1e458:	9cffffc4 	addi	r19,r19,-1
   1e45c:	1ce6703a 	and	r19,r3,r19
   1e460:	98007a26 	beq	r19,zero,1e64c <__subdf3+0x378>
   1e464:	9809883a 	mov	r4,r19
   1e468:	000e2600 	call	e260 <__clzsi2>
   1e46c:	113ffe04 	addi	r4,r2,-8
   1e470:	00c007c4 	movi	r3,31
   1e474:	19007b16 	blt	r3,r4,1e664 <__subdf3+0x390>
   1e478:	00800804 	movi	r2,32
   1e47c:	1105c83a 	sub	r2,r2,r4
   1e480:	8884d83a 	srl	r2,r17,r2
   1e484:	9906983a 	sll	r3,r19,r4
   1e488:	8922983a 	sll	r17,r17,r4
   1e48c:	10c4b03a 	or	r2,r2,r3
   1e490:	24007816 	blt	r4,r16,1e674 <__subdf3+0x3a0>
   1e494:	2421c83a 	sub	r16,r4,r16
   1e498:	80c00044 	addi	r3,r16,1
   1e49c:	010007c4 	movi	r4,31
   1e4a0:	20c09516 	blt	r4,r3,1e6f8 <__subdf3+0x424>
   1e4a4:	01400804 	movi	r5,32
   1e4a8:	28cbc83a 	sub	r5,r5,r3
   1e4ac:	88c8d83a 	srl	r4,r17,r3
   1e4b0:	8962983a 	sll	r17,r17,r5
   1e4b4:	114a983a 	sll	r5,r2,r5
   1e4b8:	10c6d83a 	srl	r3,r2,r3
   1e4bc:	8804c03a 	cmpne	r2,r17,zero
   1e4c0:	290ab03a 	or	r5,r5,r4
   1e4c4:	28a2b03a 	or	r17,r5,r2
   1e4c8:	0021883a 	mov	r16,zero
   1e4cc:	003fa206 	br	1e358 <__alt_data_end+0xfc01e358>
   1e4d0:	2090b03a 	or	r8,r4,r2
   1e4d4:	40018e26 	beq	r8,zero,1eb10 <__subdf3+0x83c>
   1e4d8:	1007883a 	mov	r3,r2
   1e4dc:	2023883a 	mov	r17,r4
   1e4e0:	888001cc 	andi	r2,r17,7
   1e4e4:	103f9e1e 	bne	r2,zero,1e360 <__alt_data_end+0xfc01e360>
   1e4e8:	1804977a 	slli	r2,r3,29
   1e4ec:	8822d0fa 	srli	r17,r17,3
   1e4f0:	1810d0fa 	srli	r8,r3,3
   1e4f4:	9100004c 	andi	r4,r18,1
   1e4f8:	1444b03a 	or	r2,r2,r17
   1e4fc:	00c1ffc4 	movi	r3,2047
   1e500:	80c02826 	beq	r16,r3,1e5a4 <__subdf3+0x2d0>
   1e504:	01400434 	movhi	r5,16
   1e508:	297fffc4 	addi	r5,r5,-1
   1e50c:	80e0703a 	and	r16,r16,r3
   1e510:	414a703a 	and	r5,r8,r5
   1e514:	003fa806 	br	1e3b8 <__alt_data_end+0xfc01e3b8>
   1e518:	0080630e 	bge	zero,r2,1e6a8 <__subdf3+0x3d4>
   1e51c:	48003026 	beq	r9,zero,1e5e0 <__subdf3+0x30c>
   1e520:	0101ffc4 	movi	r4,2047
   1e524:	813f8c26 	beq	r16,r4,1e358 <__alt_data_end+0xfc01e358>
   1e528:	29402034 	orhi	r5,r5,128
   1e52c:	01000e04 	movi	r4,56
   1e530:	2080a90e 	bge	r4,r2,1e7d8 <__subdf3+0x504>
   1e534:	298cb03a 	or	r6,r5,r6
   1e538:	3012c03a 	cmpne	r9,r6,zero
   1e53c:	0005883a 	mov	r2,zero
   1e540:	4c53883a 	add	r9,r9,r17
   1e544:	4c63803a 	cmpltu	r17,r9,r17
   1e548:	10c7883a 	add	r3,r2,r3
   1e54c:	88c7883a 	add	r3,r17,r3
   1e550:	4823883a 	mov	r17,r9
   1e554:	1880202c 	andhi	r2,r3,128
   1e558:	1000d026 	beq	r2,zero,1e89c <__subdf3+0x5c8>
   1e55c:	84000044 	addi	r16,r16,1
   1e560:	0081ffc4 	movi	r2,2047
   1e564:	8080fe26 	beq	r16,r2,1e960 <__subdf3+0x68c>
   1e568:	00bfe034 	movhi	r2,65408
   1e56c:	10bfffc4 	addi	r2,r2,-1
   1e570:	1886703a 	and	r3,r3,r2
   1e574:	880ad07a 	srli	r5,r17,1
   1e578:	180497fa 	slli	r2,r3,31
   1e57c:	8900004c 	andi	r4,r17,1
   1e580:	2922b03a 	or	r17,r5,r4
   1e584:	1806d07a 	srli	r3,r3,1
   1e588:	1462b03a 	or	r17,r2,r17
   1e58c:	3825883a 	mov	r18,r7
   1e590:	003f7106 	br	1e358 <__alt_data_end+0xfc01e358>
   1e594:	2984b03a 	or	r2,r5,r6
   1e598:	103f6826 	beq	r2,zero,1e33c <__alt_data_end+0xfc01e33c>
   1e59c:	39c03fcc 	andi	r7,r7,255
   1e5a0:	003f6706 	br	1e340 <__alt_data_end+0xfc01e340>
   1e5a4:	4086b03a 	or	r3,r8,r2
   1e5a8:	18015226 	beq	r3,zero,1eaf4 <__subdf3+0x820>
   1e5ac:	00c00434 	movhi	r3,16
   1e5b0:	41400234 	orhi	r5,r8,8
   1e5b4:	18ffffc4 	addi	r3,r3,-1
   1e5b8:	28ca703a 	and	r5,r5,r3
   1e5bc:	003f7e06 	br	1e3b8 <__alt_data_end+0xfc01e3b8>
   1e5c0:	10bfffc4 	addi	r2,r2,-1
   1e5c4:	1000491e 	bne	r2,zero,1e6ec <__subdf3+0x418>
   1e5c8:	898fc83a 	sub	r7,r17,r6
   1e5cc:	89e3803a 	cmpltu	r17,r17,r7
   1e5d0:	1947c83a 	sub	r3,r3,r5
   1e5d4:	1c47c83a 	sub	r3,r3,r17
   1e5d8:	3823883a 	mov	r17,r7
   1e5dc:	003f9b06 	br	1e44c <__alt_data_end+0xfc01e44c>
   1e5e0:	2988b03a 	or	r4,r5,r6
   1e5e4:	203f5c26 	beq	r4,zero,1e358 <__alt_data_end+0xfc01e358>
   1e5e8:	10bfffc4 	addi	r2,r2,-1
   1e5ec:	1000931e 	bne	r2,zero,1e83c <__subdf3+0x568>
   1e5f0:	898d883a 	add	r6,r17,r6
   1e5f4:	3463803a 	cmpltu	r17,r6,r17
   1e5f8:	1947883a 	add	r3,r3,r5
   1e5fc:	88c7883a 	add	r3,r17,r3
   1e600:	3023883a 	mov	r17,r6
   1e604:	003fd306 	br	1e554 <__alt_data_end+0xfc01e554>
   1e608:	1000541e 	bne	r2,zero,1e75c <__subdf3+0x488>
   1e60c:	80800044 	addi	r2,r16,1
   1e610:	1081ffcc 	andi	r2,r2,2047
   1e614:	01000044 	movi	r4,1
   1e618:	2080a20e 	bge	r4,r2,1e8a4 <__subdf3+0x5d0>
   1e61c:	8989c83a 	sub	r4,r17,r6
   1e620:	8905803a 	cmpltu	r2,r17,r4
   1e624:	1967c83a 	sub	r19,r3,r5
   1e628:	98a7c83a 	sub	r19,r19,r2
   1e62c:	9880202c 	andhi	r2,r19,128
   1e630:	10006326 	beq	r2,zero,1e7c0 <__subdf3+0x4ec>
   1e634:	3463c83a 	sub	r17,r6,r17
   1e638:	28c7c83a 	sub	r3,r5,r3
   1e63c:	344d803a 	cmpltu	r6,r6,r17
   1e640:	19a7c83a 	sub	r19,r3,r6
   1e644:	3825883a 	mov	r18,r7
   1e648:	983f861e 	bne	r19,zero,1e464 <__alt_data_end+0xfc01e464>
   1e64c:	8809883a 	mov	r4,r17
   1e650:	000e2600 	call	e260 <__clzsi2>
   1e654:	10800804 	addi	r2,r2,32
   1e658:	113ffe04 	addi	r4,r2,-8
   1e65c:	00c007c4 	movi	r3,31
   1e660:	193f850e 	bge	r3,r4,1e478 <__alt_data_end+0xfc01e478>
   1e664:	10bff604 	addi	r2,r2,-40
   1e668:	8884983a 	sll	r2,r17,r2
   1e66c:	0023883a 	mov	r17,zero
   1e670:	243f880e 	bge	r4,r16,1e494 <__alt_data_end+0xfc01e494>
   1e674:	00ffe034 	movhi	r3,65408
   1e678:	18ffffc4 	addi	r3,r3,-1
   1e67c:	8121c83a 	sub	r16,r16,r4
   1e680:	10c6703a 	and	r3,r2,r3
   1e684:	003f3406 	br	1e358 <__alt_data_end+0xfc01e358>
   1e688:	9100004c 	andi	r4,r18,1
   1e68c:	000b883a 	mov	r5,zero
   1e690:	0005883a 	mov	r2,zero
   1e694:	003f4806 	br	1e3b8 <__alt_data_end+0xfc01e3b8>
   1e698:	298cb03a 	or	r6,r5,r6
   1e69c:	300cc03a 	cmpne	r6,r6,zero
   1e6a0:	0005883a 	mov	r2,zero
   1e6a4:	003f6406 	br	1e438 <__alt_data_end+0xfc01e438>
   1e6a8:	10009a1e 	bne	r2,zero,1e914 <__subdf3+0x640>
   1e6ac:	82400044 	addi	r9,r16,1
   1e6b0:	4881ffcc 	andi	r2,r9,2047
   1e6b4:	02800044 	movi	r10,1
   1e6b8:	5080670e 	bge	r10,r2,1e858 <__subdf3+0x584>
   1e6bc:	0081ffc4 	movi	r2,2047
   1e6c0:	4880af26 	beq	r9,r2,1e980 <__subdf3+0x6ac>
   1e6c4:	898d883a 	add	r6,r17,r6
   1e6c8:	1945883a 	add	r2,r3,r5
   1e6cc:	3447803a 	cmpltu	r3,r6,r17
   1e6d0:	1887883a 	add	r3,r3,r2
   1e6d4:	182297fa 	slli	r17,r3,31
   1e6d8:	300cd07a 	srli	r6,r6,1
   1e6dc:	1806d07a 	srli	r3,r3,1
   1e6e0:	4821883a 	mov	r16,r9
   1e6e4:	89a2b03a 	or	r17,r17,r6
   1e6e8:	003f1b06 	br	1e358 <__alt_data_end+0xfc01e358>
   1e6ec:	0101ffc4 	movi	r4,2047
   1e6f0:	813f441e 	bne	r16,r4,1e404 <__alt_data_end+0xfc01e404>
   1e6f4:	003f1806 	br	1e358 <__alt_data_end+0xfc01e358>
   1e6f8:	843ff844 	addi	r16,r16,-31
   1e6fc:	01400804 	movi	r5,32
   1e700:	1408d83a 	srl	r4,r2,r16
   1e704:	19405026 	beq	r3,r5,1e848 <__subdf3+0x574>
   1e708:	01401004 	movi	r5,64
   1e70c:	28c7c83a 	sub	r3,r5,r3
   1e710:	10c4983a 	sll	r2,r2,r3
   1e714:	88a2b03a 	or	r17,r17,r2
   1e718:	8822c03a 	cmpne	r17,r17,zero
   1e71c:	2462b03a 	or	r17,r4,r17
   1e720:	0007883a 	mov	r3,zero
   1e724:	0021883a 	mov	r16,zero
   1e728:	003f6d06 	br	1e4e0 <__alt_data_end+0xfc01e4e0>
   1e72c:	11fff804 	addi	r7,r2,-32
   1e730:	01000804 	movi	r4,32
   1e734:	29ced83a 	srl	r7,r5,r7
   1e738:	11004526 	beq	r2,r4,1e850 <__subdf3+0x57c>
   1e73c:	01001004 	movi	r4,64
   1e740:	2089c83a 	sub	r4,r4,r2
   1e744:	2904983a 	sll	r2,r5,r4
   1e748:	118cb03a 	or	r6,r2,r6
   1e74c:	300cc03a 	cmpne	r6,r6,zero
   1e750:	398cb03a 	or	r6,r7,r6
   1e754:	0005883a 	mov	r2,zero
   1e758:	003f3706 	br	1e438 <__alt_data_end+0xfc01e438>
   1e75c:	80002a26 	beq	r16,zero,1e808 <__subdf3+0x534>
   1e760:	0101ffc4 	movi	r4,2047
   1e764:	49006626 	beq	r9,r4,1e900 <__subdf3+0x62c>
   1e768:	0085c83a 	sub	r2,zero,r2
   1e76c:	18c02034 	orhi	r3,r3,128
   1e770:	01000e04 	movi	r4,56
   1e774:	20807e16 	blt	r4,r2,1e970 <__subdf3+0x69c>
   1e778:	010007c4 	movi	r4,31
   1e77c:	2080e716 	blt	r4,r2,1eb1c <__subdf3+0x848>
   1e780:	01000804 	movi	r4,32
   1e784:	2089c83a 	sub	r4,r4,r2
   1e788:	1914983a 	sll	r10,r3,r4
   1e78c:	8890d83a 	srl	r8,r17,r2
   1e790:	8908983a 	sll	r4,r17,r4
   1e794:	1884d83a 	srl	r2,r3,r2
   1e798:	5222b03a 	or	r17,r10,r8
   1e79c:	2006c03a 	cmpne	r3,r4,zero
   1e7a0:	88e2b03a 	or	r17,r17,r3
   1e7a4:	3463c83a 	sub	r17,r6,r17
   1e7a8:	2885c83a 	sub	r2,r5,r2
   1e7ac:	344d803a 	cmpltu	r6,r6,r17
   1e7b0:	1187c83a 	sub	r3,r2,r6
   1e7b4:	4821883a 	mov	r16,r9
   1e7b8:	3825883a 	mov	r18,r7
   1e7bc:	003f2306 	br	1e44c <__alt_data_end+0xfc01e44c>
   1e7c0:	24d0b03a 	or	r8,r4,r19
   1e7c4:	40001b1e 	bne	r8,zero,1e834 <__subdf3+0x560>
   1e7c8:	0005883a 	mov	r2,zero
   1e7cc:	0009883a 	mov	r4,zero
   1e7d0:	0021883a 	mov	r16,zero
   1e7d4:	003f4906 	br	1e4fc <__alt_data_end+0xfc01e4fc>
   1e7d8:	010007c4 	movi	r4,31
   1e7dc:	20803a16 	blt	r4,r2,1e8c8 <__subdf3+0x5f4>
   1e7e0:	01000804 	movi	r4,32
   1e7e4:	2089c83a 	sub	r4,r4,r2
   1e7e8:	2912983a 	sll	r9,r5,r4
   1e7ec:	3090d83a 	srl	r8,r6,r2
   1e7f0:	3108983a 	sll	r4,r6,r4
   1e7f4:	2884d83a 	srl	r2,r5,r2
   1e7f8:	4a12b03a 	or	r9,r9,r8
   1e7fc:	2008c03a 	cmpne	r4,r4,zero
   1e800:	4912b03a 	or	r9,r9,r4
   1e804:	003f4e06 	br	1e540 <__alt_data_end+0xfc01e540>
   1e808:	1c48b03a 	or	r4,r3,r17
   1e80c:	20003c26 	beq	r4,zero,1e900 <__subdf3+0x62c>
   1e810:	0084303a 	nor	r2,zero,r2
   1e814:	1000381e 	bne	r2,zero,1e8f8 <__subdf3+0x624>
   1e818:	3463c83a 	sub	r17,r6,r17
   1e81c:	28c5c83a 	sub	r2,r5,r3
   1e820:	344d803a 	cmpltu	r6,r6,r17
   1e824:	1187c83a 	sub	r3,r2,r6
   1e828:	4821883a 	mov	r16,r9
   1e82c:	3825883a 	mov	r18,r7
   1e830:	003f0606 	br	1e44c <__alt_data_end+0xfc01e44c>
   1e834:	2023883a 	mov	r17,r4
   1e838:	003f0906 	br	1e460 <__alt_data_end+0xfc01e460>
   1e83c:	0101ffc4 	movi	r4,2047
   1e840:	813f3a1e 	bne	r16,r4,1e52c <__alt_data_end+0xfc01e52c>
   1e844:	003ec406 	br	1e358 <__alt_data_end+0xfc01e358>
   1e848:	0005883a 	mov	r2,zero
   1e84c:	003fb106 	br	1e714 <__alt_data_end+0xfc01e714>
   1e850:	0005883a 	mov	r2,zero
   1e854:	003fbc06 	br	1e748 <__alt_data_end+0xfc01e748>
   1e858:	1c44b03a 	or	r2,r3,r17
   1e85c:	80008e1e 	bne	r16,zero,1ea98 <__subdf3+0x7c4>
   1e860:	1000c826 	beq	r2,zero,1eb84 <__subdf3+0x8b0>
   1e864:	2984b03a 	or	r2,r5,r6
   1e868:	103ebb26 	beq	r2,zero,1e358 <__alt_data_end+0xfc01e358>
   1e86c:	8989883a 	add	r4,r17,r6
   1e870:	1945883a 	add	r2,r3,r5
   1e874:	2447803a 	cmpltu	r3,r4,r17
   1e878:	1887883a 	add	r3,r3,r2
   1e87c:	1880202c 	andhi	r2,r3,128
   1e880:	2023883a 	mov	r17,r4
   1e884:	103f1626 	beq	r2,zero,1e4e0 <__alt_data_end+0xfc01e4e0>
   1e888:	00bfe034 	movhi	r2,65408
   1e88c:	10bfffc4 	addi	r2,r2,-1
   1e890:	5021883a 	mov	r16,r10
   1e894:	1886703a 	and	r3,r3,r2
   1e898:	003eaf06 	br	1e358 <__alt_data_end+0xfc01e358>
   1e89c:	3825883a 	mov	r18,r7
   1e8a0:	003f0f06 	br	1e4e0 <__alt_data_end+0xfc01e4e0>
   1e8a4:	1c44b03a 	or	r2,r3,r17
   1e8a8:	8000251e 	bne	r16,zero,1e940 <__subdf3+0x66c>
   1e8ac:	1000661e 	bne	r2,zero,1ea48 <__subdf3+0x774>
   1e8b0:	2990b03a 	or	r8,r5,r6
   1e8b4:	40009626 	beq	r8,zero,1eb10 <__subdf3+0x83c>
   1e8b8:	2807883a 	mov	r3,r5
   1e8bc:	3023883a 	mov	r17,r6
   1e8c0:	3825883a 	mov	r18,r7
   1e8c4:	003ea406 	br	1e358 <__alt_data_end+0xfc01e358>
   1e8c8:	127ff804 	addi	r9,r2,-32
   1e8cc:	01000804 	movi	r4,32
   1e8d0:	2a52d83a 	srl	r9,r5,r9
   1e8d4:	11008c26 	beq	r2,r4,1eb08 <__subdf3+0x834>
   1e8d8:	01001004 	movi	r4,64
   1e8dc:	2085c83a 	sub	r2,r4,r2
   1e8e0:	2884983a 	sll	r2,r5,r2
   1e8e4:	118cb03a 	or	r6,r2,r6
   1e8e8:	300cc03a 	cmpne	r6,r6,zero
   1e8ec:	4992b03a 	or	r9,r9,r6
   1e8f0:	0005883a 	mov	r2,zero
   1e8f4:	003f1206 	br	1e540 <__alt_data_end+0xfc01e540>
   1e8f8:	0101ffc4 	movi	r4,2047
   1e8fc:	493f9c1e 	bne	r9,r4,1e770 <__alt_data_end+0xfc01e770>
   1e900:	2807883a 	mov	r3,r5
   1e904:	3023883a 	mov	r17,r6
   1e908:	4821883a 	mov	r16,r9
   1e90c:	3825883a 	mov	r18,r7
   1e910:	003e9106 	br	1e358 <__alt_data_end+0xfc01e358>
   1e914:	80001f1e 	bne	r16,zero,1e994 <__subdf3+0x6c0>
   1e918:	1c48b03a 	or	r4,r3,r17
   1e91c:	20005a26 	beq	r4,zero,1ea88 <__subdf3+0x7b4>
   1e920:	0084303a 	nor	r2,zero,r2
   1e924:	1000561e 	bne	r2,zero,1ea80 <__subdf3+0x7ac>
   1e928:	89a3883a 	add	r17,r17,r6
   1e92c:	1945883a 	add	r2,r3,r5
   1e930:	898d803a 	cmpltu	r6,r17,r6
   1e934:	3087883a 	add	r3,r6,r2
   1e938:	4821883a 	mov	r16,r9
   1e93c:	003f0506 	br	1e554 <__alt_data_end+0xfc01e554>
   1e940:	10002b1e 	bne	r2,zero,1e9f0 <__subdf3+0x71c>
   1e944:	2984b03a 	or	r2,r5,r6
   1e948:	10008026 	beq	r2,zero,1eb4c <__subdf3+0x878>
   1e94c:	2807883a 	mov	r3,r5
   1e950:	3023883a 	mov	r17,r6
   1e954:	3825883a 	mov	r18,r7
   1e958:	0401ffc4 	movi	r16,2047
   1e95c:	003e7e06 	br	1e358 <__alt_data_end+0xfc01e358>
   1e960:	3809883a 	mov	r4,r7
   1e964:	0011883a 	mov	r8,zero
   1e968:	0005883a 	mov	r2,zero
   1e96c:	003ee306 	br	1e4fc <__alt_data_end+0xfc01e4fc>
   1e970:	1c62b03a 	or	r17,r3,r17
   1e974:	8822c03a 	cmpne	r17,r17,zero
   1e978:	0005883a 	mov	r2,zero
   1e97c:	003f8906 	br	1e7a4 <__alt_data_end+0xfc01e7a4>
   1e980:	3809883a 	mov	r4,r7
   1e984:	4821883a 	mov	r16,r9
   1e988:	0011883a 	mov	r8,zero
   1e98c:	0005883a 	mov	r2,zero
   1e990:	003eda06 	br	1e4fc <__alt_data_end+0xfc01e4fc>
   1e994:	0101ffc4 	movi	r4,2047
   1e998:	49003b26 	beq	r9,r4,1ea88 <__subdf3+0x7b4>
   1e99c:	0085c83a 	sub	r2,zero,r2
   1e9a0:	18c02034 	orhi	r3,r3,128
   1e9a4:	01000e04 	movi	r4,56
   1e9a8:	20806e16 	blt	r4,r2,1eb64 <__subdf3+0x890>
   1e9ac:	010007c4 	movi	r4,31
   1e9b0:	20807716 	blt	r4,r2,1eb90 <__subdf3+0x8bc>
   1e9b4:	01000804 	movi	r4,32
   1e9b8:	2089c83a 	sub	r4,r4,r2
   1e9bc:	1914983a 	sll	r10,r3,r4
   1e9c0:	8890d83a 	srl	r8,r17,r2
   1e9c4:	8908983a 	sll	r4,r17,r4
   1e9c8:	1884d83a 	srl	r2,r3,r2
   1e9cc:	5222b03a 	or	r17,r10,r8
   1e9d0:	2006c03a 	cmpne	r3,r4,zero
   1e9d4:	88e2b03a 	or	r17,r17,r3
   1e9d8:	89a3883a 	add	r17,r17,r6
   1e9dc:	1145883a 	add	r2,r2,r5
   1e9e0:	898d803a 	cmpltu	r6,r17,r6
   1e9e4:	3087883a 	add	r3,r6,r2
   1e9e8:	4821883a 	mov	r16,r9
   1e9ec:	003ed906 	br	1e554 <__alt_data_end+0xfc01e554>
   1e9f0:	2984b03a 	or	r2,r5,r6
   1e9f4:	10004226 	beq	r2,zero,1eb00 <__subdf3+0x82c>
   1e9f8:	1808d0fa 	srli	r4,r3,3
   1e9fc:	8822d0fa 	srli	r17,r17,3
   1ea00:	1806977a 	slli	r3,r3,29
   1ea04:	2080022c 	andhi	r2,r4,8
   1ea08:	1c62b03a 	or	r17,r3,r17
   1ea0c:	10000826 	beq	r2,zero,1ea30 <__subdf3+0x75c>
   1ea10:	2812d0fa 	srli	r9,r5,3
   1ea14:	4880022c 	andhi	r2,r9,8
   1ea18:	1000051e 	bne	r2,zero,1ea30 <__subdf3+0x75c>
   1ea1c:	300cd0fa 	srli	r6,r6,3
   1ea20:	2804977a 	slli	r2,r5,29
   1ea24:	4809883a 	mov	r4,r9
   1ea28:	3825883a 	mov	r18,r7
   1ea2c:	11a2b03a 	or	r17,r2,r6
   1ea30:	8806d77a 	srli	r3,r17,29
   1ea34:	200890fa 	slli	r4,r4,3
   1ea38:	882290fa 	slli	r17,r17,3
   1ea3c:	0401ffc4 	movi	r16,2047
   1ea40:	1906b03a 	or	r3,r3,r4
   1ea44:	003e4406 	br	1e358 <__alt_data_end+0xfc01e358>
   1ea48:	2984b03a 	or	r2,r5,r6
   1ea4c:	103e4226 	beq	r2,zero,1e358 <__alt_data_end+0xfc01e358>
   1ea50:	8989c83a 	sub	r4,r17,r6
   1ea54:	8911803a 	cmpltu	r8,r17,r4
   1ea58:	1945c83a 	sub	r2,r3,r5
   1ea5c:	1205c83a 	sub	r2,r2,r8
   1ea60:	1200202c 	andhi	r8,r2,128
   1ea64:	403e9a26 	beq	r8,zero,1e4d0 <__alt_data_end+0xfc01e4d0>
   1ea68:	3463c83a 	sub	r17,r6,r17
   1ea6c:	28c5c83a 	sub	r2,r5,r3
   1ea70:	344d803a 	cmpltu	r6,r6,r17
   1ea74:	1187c83a 	sub	r3,r2,r6
   1ea78:	3825883a 	mov	r18,r7
   1ea7c:	003e3606 	br	1e358 <__alt_data_end+0xfc01e358>
   1ea80:	0101ffc4 	movi	r4,2047
   1ea84:	493fc71e 	bne	r9,r4,1e9a4 <__alt_data_end+0xfc01e9a4>
   1ea88:	2807883a 	mov	r3,r5
   1ea8c:	3023883a 	mov	r17,r6
   1ea90:	4821883a 	mov	r16,r9
   1ea94:	003e3006 	br	1e358 <__alt_data_end+0xfc01e358>
   1ea98:	10003626 	beq	r2,zero,1eb74 <__subdf3+0x8a0>
   1ea9c:	2984b03a 	or	r2,r5,r6
   1eaa0:	10001726 	beq	r2,zero,1eb00 <__subdf3+0x82c>
   1eaa4:	1808d0fa 	srli	r4,r3,3
   1eaa8:	8822d0fa 	srli	r17,r17,3
   1eaac:	1806977a 	slli	r3,r3,29
   1eab0:	2080022c 	andhi	r2,r4,8
   1eab4:	1c62b03a 	or	r17,r3,r17
   1eab8:	10000726 	beq	r2,zero,1ead8 <__subdf3+0x804>
   1eabc:	2812d0fa 	srli	r9,r5,3
   1eac0:	4880022c 	andhi	r2,r9,8
   1eac4:	1000041e 	bne	r2,zero,1ead8 <__subdf3+0x804>
   1eac8:	300cd0fa 	srli	r6,r6,3
   1eacc:	2804977a 	slli	r2,r5,29
   1ead0:	4809883a 	mov	r4,r9
   1ead4:	11a2b03a 	or	r17,r2,r6
   1ead8:	8806d77a 	srli	r3,r17,29
   1eadc:	200890fa 	slli	r4,r4,3
   1eae0:	882290fa 	slli	r17,r17,3
   1eae4:	3825883a 	mov	r18,r7
   1eae8:	1906b03a 	or	r3,r3,r4
   1eaec:	0401ffc4 	movi	r16,2047
   1eaf0:	003e1906 	br	1e358 <__alt_data_end+0xfc01e358>
   1eaf4:	000b883a 	mov	r5,zero
   1eaf8:	0005883a 	mov	r2,zero
   1eafc:	003e2e06 	br	1e3b8 <__alt_data_end+0xfc01e3b8>
   1eb00:	0401ffc4 	movi	r16,2047
   1eb04:	003e1406 	br	1e358 <__alt_data_end+0xfc01e358>
   1eb08:	0005883a 	mov	r2,zero
   1eb0c:	003f7506 	br	1e8e4 <__alt_data_end+0xfc01e8e4>
   1eb10:	0005883a 	mov	r2,zero
   1eb14:	0009883a 	mov	r4,zero
   1eb18:	003e7806 	br	1e4fc <__alt_data_end+0xfc01e4fc>
   1eb1c:	123ff804 	addi	r8,r2,-32
   1eb20:	01000804 	movi	r4,32
   1eb24:	1a10d83a 	srl	r8,r3,r8
   1eb28:	11002526 	beq	r2,r4,1ebc0 <__subdf3+0x8ec>
   1eb2c:	01001004 	movi	r4,64
   1eb30:	2085c83a 	sub	r2,r4,r2
   1eb34:	1884983a 	sll	r2,r3,r2
   1eb38:	1444b03a 	or	r2,r2,r17
   1eb3c:	1004c03a 	cmpne	r2,r2,zero
   1eb40:	40a2b03a 	or	r17,r8,r2
   1eb44:	0005883a 	mov	r2,zero
   1eb48:	003f1606 	br	1e7a4 <__alt_data_end+0xfc01e7a4>
   1eb4c:	02000434 	movhi	r8,16
   1eb50:	0009883a 	mov	r4,zero
   1eb54:	423fffc4 	addi	r8,r8,-1
   1eb58:	00bfffc4 	movi	r2,-1
   1eb5c:	0401ffc4 	movi	r16,2047
   1eb60:	003e6606 	br	1e4fc <__alt_data_end+0xfc01e4fc>
   1eb64:	1c62b03a 	or	r17,r3,r17
   1eb68:	8822c03a 	cmpne	r17,r17,zero
   1eb6c:	0005883a 	mov	r2,zero
   1eb70:	003f9906 	br	1e9d8 <__alt_data_end+0xfc01e9d8>
   1eb74:	2807883a 	mov	r3,r5
   1eb78:	3023883a 	mov	r17,r6
   1eb7c:	0401ffc4 	movi	r16,2047
   1eb80:	003df506 	br	1e358 <__alt_data_end+0xfc01e358>
   1eb84:	2807883a 	mov	r3,r5
   1eb88:	3023883a 	mov	r17,r6
   1eb8c:	003df206 	br	1e358 <__alt_data_end+0xfc01e358>
   1eb90:	123ff804 	addi	r8,r2,-32
   1eb94:	01000804 	movi	r4,32
   1eb98:	1a10d83a 	srl	r8,r3,r8
   1eb9c:	11000a26 	beq	r2,r4,1ebc8 <__subdf3+0x8f4>
   1eba0:	01001004 	movi	r4,64
   1eba4:	2085c83a 	sub	r2,r4,r2
   1eba8:	1884983a 	sll	r2,r3,r2
   1ebac:	1444b03a 	or	r2,r2,r17
   1ebb0:	1004c03a 	cmpne	r2,r2,zero
   1ebb4:	40a2b03a 	or	r17,r8,r2
   1ebb8:	0005883a 	mov	r2,zero
   1ebbc:	003f8606 	br	1e9d8 <__alt_data_end+0xfc01e9d8>
   1ebc0:	0005883a 	mov	r2,zero
   1ebc4:	003fdc06 	br	1eb38 <__alt_data_end+0xfc01eb38>
   1ebc8:	0005883a 	mov	r2,zero
   1ebcc:	003ff706 	br	1ebac <__alt_data_end+0xfc01ebac>

0001ebd0 <__fixdfsi>:
   1ebd0:	280cd53a 	srli	r6,r5,20
   1ebd4:	00c00434 	movhi	r3,16
   1ebd8:	18ffffc4 	addi	r3,r3,-1
   1ebdc:	3181ffcc 	andi	r6,r6,2047
   1ebe0:	01c0ff84 	movi	r7,1022
   1ebe4:	28c6703a 	and	r3,r5,r3
   1ebe8:	280ad7fa 	srli	r5,r5,31
   1ebec:	3980120e 	bge	r7,r6,1ec38 <__fixdfsi+0x68>
   1ebf0:	00810744 	movi	r2,1053
   1ebf4:	11800c16 	blt	r2,r6,1ec28 <__fixdfsi+0x58>
   1ebf8:	00810cc4 	movi	r2,1075
   1ebfc:	1185c83a 	sub	r2,r2,r6
   1ec00:	01c007c4 	movi	r7,31
   1ec04:	18c00434 	orhi	r3,r3,16
   1ec08:	38800d16 	blt	r7,r2,1ec40 <__fixdfsi+0x70>
   1ec0c:	31befb44 	addi	r6,r6,-1043
   1ec10:	2084d83a 	srl	r2,r4,r2
   1ec14:	1986983a 	sll	r3,r3,r6
   1ec18:	1884b03a 	or	r2,r3,r2
   1ec1c:	28000726 	beq	r5,zero,1ec3c <__fixdfsi+0x6c>
   1ec20:	0085c83a 	sub	r2,zero,r2
   1ec24:	f800283a 	ret
   1ec28:	00a00034 	movhi	r2,32768
   1ec2c:	10bfffc4 	addi	r2,r2,-1
   1ec30:	2885883a 	add	r2,r5,r2
   1ec34:	f800283a 	ret
   1ec38:	0005883a 	mov	r2,zero
   1ec3c:	f800283a 	ret
   1ec40:	008104c4 	movi	r2,1043
   1ec44:	1185c83a 	sub	r2,r2,r6
   1ec48:	1884d83a 	srl	r2,r3,r2
   1ec4c:	003ff306 	br	1ec1c <__alt_data_end+0xfc01ec1c>

0001ec50 <__floatsidf>:
   1ec50:	defffd04 	addi	sp,sp,-12
   1ec54:	dfc00215 	stw	ra,8(sp)
   1ec58:	dc400115 	stw	r17,4(sp)
   1ec5c:	dc000015 	stw	r16,0(sp)
   1ec60:	20002b26 	beq	r4,zero,1ed10 <__floatsidf+0xc0>
   1ec64:	2023883a 	mov	r17,r4
   1ec68:	2020d7fa 	srli	r16,r4,31
   1ec6c:	20002d16 	blt	r4,zero,1ed24 <__floatsidf+0xd4>
   1ec70:	8809883a 	mov	r4,r17
   1ec74:	000e2600 	call	e260 <__clzsi2>
   1ec78:	01410784 	movi	r5,1054
   1ec7c:	288bc83a 	sub	r5,r5,r2
   1ec80:	01010cc4 	movi	r4,1075
   1ec84:	2149c83a 	sub	r4,r4,r5
   1ec88:	00c007c4 	movi	r3,31
   1ec8c:	1900160e 	bge	r3,r4,1ece8 <__floatsidf+0x98>
   1ec90:	00c104c4 	movi	r3,1043
   1ec94:	1947c83a 	sub	r3,r3,r5
   1ec98:	88c6983a 	sll	r3,r17,r3
   1ec9c:	00800434 	movhi	r2,16
   1eca0:	10bfffc4 	addi	r2,r2,-1
   1eca4:	1886703a 	and	r3,r3,r2
   1eca8:	2941ffcc 	andi	r5,r5,2047
   1ecac:	800d883a 	mov	r6,r16
   1ecb0:	0005883a 	mov	r2,zero
   1ecb4:	280a953a 	slli	r5,r5,20
   1ecb8:	31803fcc 	andi	r6,r6,255
   1ecbc:	01000434 	movhi	r4,16
   1ecc0:	300c97fa 	slli	r6,r6,31
   1ecc4:	213fffc4 	addi	r4,r4,-1
   1ecc8:	1906703a 	and	r3,r3,r4
   1eccc:	1946b03a 	or	r3,r3,r5
   1ecd0:	1986b03a 	or	r3,r3,r6
   1ecd4:	dfc00217 	ldw	ra,8(sp)
   1ecd8:	dc400117 	ldw	r17,4(sp)
   1ecdc:	dc000017 	ldw	r16,0(sp)
   1ece0:	dec00304 	addi	sp,sp,12
   1ece4:	f800283a 	ret
   1ece8:	00c002c4 	movi	r3,11
   1ecec:	1887c83a 	sub	r3,r3,r2
   1ecf0:	88c6d83a 	srl	r3,r17,r3
   1ecf4:	8904983a 	sll	r2,r17,r4
   1ecf8:	01000434 	movhi	r4,16
   1ecfc:	213fffc4 	addi	r4,r4,-1
   1ed00:	2941ffcc 	andi	r5,r5,2047
   1ed04:	1906703a 	and	r3,r3,r4
   1ed08:	800d883a 	mov	r6,r16
   1ed0c:	003fe906 	br	1ecb4 <__alt_data_end+0xfc01ecb4>
   1ed10:	000d883a 	mov	r6,zero
   1ed14:	000b883a 	mov	r5,zero
   1ed18:	0007883a 	mov	r3,zero
   1ed1c:	0005883a 	mov	r2,zero
   1ed20:	003fe406 	br	1ecb4 <__alt_data_end+0xfc01ecb4>
   1ed24:	0123c83a 	sub	r17,zero,r4
   1ed28:	003fd106 	br	1ec70 <__alt_data_end+0xfc01ec70>

0001ed2c <__floatunsidf>:
   1ed2c:	defffe04 	addi	sp,sp,-8
   1ed30:	dc000015 	stw	r16,0(sp)
   1ed34:	dfc00115 	stw	ra,4(sp)
   1ed38:	2021883a 	mov	r16,r4
   1ed3c:	20002226 	beq	r4,zero,1edc8 <__floatunsidf+0x9c>
   1ed40:	000e2600 	call	e260 <__clzsi2>
   1ed44:	01010784 	movi	r4,1054
   1ed48:	2089c83a 	sub	r4,r4,r2
   1ed4c:	01810cc4 	movi	r6,1075
   1ed50:	310dc83a 	sub	r6,r6,r4
   1ed54:	00c007c4 	movi	r3,31
   1ed58:	1980120e 	bge	r3,r6,1eda4 <__floatunsidf+0x78>
   1ed5c:	00c104c4 	movi	r3,1043
   1ed60:	1907c83a 	sub	r3,r3,r4
   1ed64:	80ca983a 	sll	r5,r16,r3
   1ed68:	00800434 	movhi	r2,16
   1ed6c:	10bfffc4 	addi	r2,r2,-1
   1ed70:	2101ffcc 	andi	r4,r4,2047
   1ed74:	0021883a 	mov	r16,zero
   1ed78:	288a703a 	and	r5,r5,r2
   1ed7c:	2008953a 	slli	r4,r4,20
   1ed80:	00c00434 	movhi	r3,16
   1ed84:	18ffffc4 	addi	r3,r3,-1
   1ed88:	28c6703a 	and	r3,r5,r3
   1ed8c:	8005883a 	mov	r2,r16
   1ed90:	1906b03a 	or	r3,r3,r4
   1ed94:	dfc00117 	ldw	ra,4(sp)
   1ed98:	dc000017 	ldw	r16,0(sp)
   1ed9c:	dec00204 	addi	sp,sp,8
   1eda0:	f800283a 	ret
   1eda4:	00c002c4 	movi	r3,11
   1eda8:	188bc83a 	sub	r5,r3,r2
   1edac:	814ad83a 	srl	r5,r16,r5
   1edb0:	00c00434 	movhi	r3,16
   1edb4:	18ffffc4 	addi	r3,r3,-1
   1edb8:	81a0983a 	sll	r16,r16,r6
   1edbc:	2101ffcc 	andi	r4,r4,2047
   1edc0:	28ca703a 	and	r5,r5,r3
   1edc4:	003fed06 	br	1ed7c <__alt_data_end+0xfc01ed7c>
   1edc8:	0009883a 	mov	r4,zero
   1edcc:	000b883a 	mov	r5,zero
   1edd0:	003fea06 	br	1ed7c <__alt_data_end+0xfc01ed7c>

0001edd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1edd4:	defffe04 	addi	sp,sp,-8
   1edd8:	dfc00115 	stw	ra,4(sp)
   1eddc:	df000015 	stw	fp,0(sp)
   1ede0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ede4:	d0a5bb17 	ldw	r2,-26900(gp)
   1ede8:	10000326 	beq	r2,zero,1edf8 <alt_get_errno+0x24>
   1edec:	d0a5bb17 	ldw	r2,-26900(gp)
   1edf0:	103ee83a 	callr	r2
   1edf4:	00000106 	br	1edfc <alt_get_errno+0x28>
   1edf8:	d0b24704 	addi	r2,gp,-14052
}
   1edfc:	e037883a 	mov	sp,fp
   1ee00:	dfc00117 	ldw	ra,4(sp)
   1ee04:	df000017 	ldw	fp,0(sp)
   1ee08:	dec00204 	addi	sp,sp,8
   1ee0c:	f800283a 	ret

0001ee10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ee10:	defffb04 	addi	sp,sp,-20
   1ee14:	dfc00415 	stw	ra,16(sp)
   1ee18:	df000315 	stw	fp,12(sp)
   1ee1c:	df000304 	addi	fp,sp,12
   1ee20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ee24:	e0bfff17 	ldw	r2,-4(fp)
   1ee28:	10000816 	blt	r2,zero,1ee4c <close+0x3c>
   1ee2c:	01400304 	movi	r5,12
   1ee30:	e13fff17 	ldw	r4,-4(fp)
   1ee34:	000cda80 	call	cda8 <__mulsi3>
   1ee38:	1007883a 	mov	r3,r2
   1ee3c:	008000f4 	movhi	r2,3
   1ee40:	10ad1404 	addi	r2,r2,-19376
   1ee44:	1885883a 	add	r2,r3,r2
   1ee48:	00000106 	br	1ee50 <close+0x40>
   1ee4c:	0005883a 	mov	r2,zero
   1ee50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1ee54:	e0bffd17 	ldw	r2,-12(fp)
   1ee58:	10001926 	beq	r2,zero,1eec0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1ee5c:	e0bffd17 	ldw	r2,-12(fp)
   1ee60:	10800017 	ldw	r2,0(r2)
   1ee64:	10800417 	ldw	r2,16(r2)
   1ee68:	10000626 	beq	r2,zero,1ee84 <close+0x74>
   1ee6c:	e0bffd17 	ldw	r2,-12(fp)
   1ee70:	10800017 	ldw	r2,0(r2)
   1ee74:	10800417 	ldw	r2,16(r2)
   1ee78:	e13ffd17 	ldw	r4,-12(fp)
   1ee7c:	103ee83a 	callr	r2
   1ee80:	00000106 	br	1ee88 <close+0x78>
   1ee84:	0005883a 	mov	r2,zero
   1ee88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1ee8c:	e13fff17 	ldw	r4,-4(fp)
   1ee90:	001f6b80 	call	1f6b8 <alt_release_fd>
    if (rval < 0)
   1ee94:	e0bffe17 	ldw	r2,-8(fp)
   1ee98:	1000070e 	bge	r2,zero,1eeb8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1ee9c:	001edd40 	call	1edd4 <alt_get_errno>
   1eea0:	1007883a 	mov	r3,r2
   1eea4:	e0bffe17 	ldw	r2,-8(fp)
   1eea8:	0085c83a 	sub	r2,zero,r2
   1eeac:	18800015 	stw	r2,0(r3)
      return -1;
   1eeb0:	00bfffc4 	movi	r2,-1
   1eeb4:	00000706 	br	1eed4 <close+0xc4>
    }
    return 0;
   1eeb8:	0005883a 	mov	r2,zero
   1eebc:	00000506 	br	1eed4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1eec0:	001edd40 	call	1edd4 <alt_get_errno>
   1eec4:	1007883a 	mov	r3,r2
   1eec8:	00801444 	movi	r2,81
   1eecc:	18800015 	stw	r2,0(r3)
    return -1;
   1eed0:	00bfffc4 	movi	r2,-1
  }
}
   1eed4:	e037883a 	mov	sp,fp
   1eed8:	dfc00117 	ldw	ra,4(sp)
   1eedc:	df000017 	ldw	fp,0(sp)
   1eee0:	dec00204 	addi	sp,sp,8
   1eee4:	f800283a 	ret

0001eee8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1eee8:	defffc04 	addi	sp,sp,-16
   1eeec:	df000315 	stw	fp,12(sp)
   1eef0:	df000304 	addi	fp,sp,12
   1eef4:	e13ffd15 	stw	r4,-12(fp)
   1eef8:	e17ffe15 	stw	r5,-8(fp)
   1eefc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1ef00:	e0bfff17 	ldw	r2,-4(fp)
}
   1ef04:	e037883a 	mov	sp,fp
   1ef08:	df000017 	ldw	fp,0(sp)
   1ef0c:	dec00104 	addi	sp,sp,4
   1ef10:	f800283a 	ret

0001ef14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1ef14:	defffd04 	addi	sp,sp,-12
   1ef18:	df000215 	stw	fp,8(sp)
   1ef1c:	df000204 	addi	fp,sp,8
   1ef20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1ef24:	0001883a 	nop
   1ef28:	e0bfff17 	ldw	r2,-4(fp)
   1ef2c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1ef30:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1ef34:	10000226 	beq	r2,zero,1ef40 <_exit+0x2c>
    ALT_SIM_FAIL();
   1ef38:	002af070 	cmpltui	zero,zero,43969
   1ef3c:	00000106 	br	1ef44 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1ef40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1ef44:	003fff06 	br	1ef44 <__alt_data_end+0xfc01ef44>

0001ef48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ef48:	defffe04 	addi	sp,sp,-8
   1ef4c:	dfc00115 	stw	ra,4(sp)
   1ef50:	df000015 	stw	fp,0(sp)
   1ef54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ef58:	d0a5bb17 	ldw	r2,-26900(gp)
   1ef5c:	10000326 	beq	r2,zero,1ef6c <alt_get_errno+0x24>
   1ef60:	d0a5bb17 	ldw	r2,-26900(gp)
   1ef64:	103ee83a 	callr	r2
   1ef68:	00000106 	br	1ef70 <alt_get_errno+0x28>
   1ef6c:	d0b24704 	addi	r2,gp,-14052
}
   1ef70:	e037883a 	mov	sp,fp
   1ef74:	dfc00117 	ldw	ra,4(sp)
   1ef78:	df000017 	ldw	fp,0(sp)
   1ef7c:	dec00204 	addi	sp,sp,8
   1ef80:	f800283a 	ret

0001ef84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1ef84:	defffb04 	addi	sp,sp,-20
   1ef88:	dfc00415 	stw	ra,16(sp)
   1ef8c:	df000315 	stw	fp,12(sp)
   1ef90:	df000304 	addi	fp,sp,12
   1ef94:	e13ffe15 	stw	r4,-8(fp)
   1ef98:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1ef9c:	e0bffe17 	ldw	r2,-8(fp)
   1efa0:	10000816 	blt	r2,zero,1efc4 <fstat+0x40>
   1efa4:	01400304 	movi	r5,12
   1efa8:	e13ffe17 	ldw	r4,-8(fp)
   1efac:	000cda80 	call	cda8 <__mulsi3>
   1efb0:	1007883a 	mov	r3,r2
   1efb4:	008000f4 	movhi	r2,3
   1efb8:	10ad1404 	addi	r2,r2,-19376
   1efbc:	1885883a 	add	r2,r3,r2
   1efc0:	00000106 	br	1efc8 <fstat+0x44>
   1efc4:	0005883a 	mov	r2,zero
   1efc8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1efcc:	e0bffd17 	ldw	r2,-12(fp)
   1efd0:	10001026 	beq	r2,zero,1f014 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1efd4:	e0bffd17 	ldw	r2,-12(fp)
   1efd8:	10800017 	ldw	r2,0(r2)
   1efdc:	10800817 	ldw	r2,32(r2)
   1efe0:	10000726 	beq	r2,zero,1f000 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1efe4:	e0bffd17 	ldw	r2,-12(fp)
   1efe8:	10800017 	ldw	r2,0(r2)
   1efec:	10800817 	ldw	r2,32(r2)
   1eff0:	e17fff17 	ldw	r5,-4(fp)
   1eff4:	e13ffd17 	ldw	r4,-12(fp)
   1eff8:	103ee83a 	callr	r2
   1effc:	00000a06 	br	1f028 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1f000:	e0bfff17 	ldw	r2,-4(fp)
   1f004:	00c80004 	movi	r3,8192
   1f008:	10c00115 	stw	r3,4(r2)
      return 0;
   1f00c:	0005883a 	mov	r2,zero
   1f010:	00000506 	br	1f028 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f014:	001ef480 	call	1ef48 <alt_get_errno>
   1f018:	1007883a 	mov	r3,r2
   1f01c:	00801444 	movi	r2,81
   1f020:	18800015 	stw	r2,0(r3)
    return -1;
   1f024:	00bfffc4 	movi	r2,-1
  }
}
   1f028:	e037883a 	mov	sp,fp
   1f02c:	dfc00117 	ldw	ra,4(sp)
   1f030:	df000017 	ldw	fp,0(sp)
   1f034:	dec00204 	addi	sp,sp,8
   1f038:	f800283a 	ret

0001f03c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1f03c:	deffff04 	addi	sp,sp,-4
   1f040:	df000015 	stw	fp,0(sp)
   1f044:	d839883a 	mov	fp,sp
  return 0;
   1f048:	0005883a 	mov	r2,zero
}
   1f04c:	e037883a 	mov	sp,fp
   1f050:	df000017 	ldw	fp,0(sp)
   1f054:	dec00104 	addi	sp,sp,4
   1f058:	f800283a 	ret

0001f05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f05c:	defffe04 	addi	sp,sp,-8
   1f060:	dfc00115 	stw	ra,4(sp)
   1f064:	df000015 	stw	fp,0(sp)
   1f068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f06c:	d0a5bb17 	ldw	r2,-26900(gp)
   1f070:	10000326 	beq	r2,zero,1f080 <alt_get_errno+0x24>
   1f074:	d0a5bb17 	ldw	r2,-26900(gp)
   1f078:	103ee83a 	callr	r2
   1f07c:	00000106 	br	1f084 <alt_get_errno+0x28>
   1f080:	d0b24704 	addi	r2,gp,-14052
}
   1f084:	e037883a 	mov	sp,fp
   1f088:	dfc00117 	ldw	ra,4(sp)
   1f08c:	df000017 	ldw	fp,0(sp)
   1f090:	dec00204 	addi	sp,sp,8
   1f094:	f800283a 	ret

0001f098 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1f098:	deffed04 	addi	sp,sp,-76
   1f09c:	dfc01215 	stw	ra,72(sp)
   1f0a0:	df001115 	stw	fp,68(sp)
   1f0a4:	df001104 	addi	fp,sp,68
   1f0a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f0ac:	e0bfff17 	ldw	r2,-4(fp)
   1f0b0:	10000816 	blt	r2,zero,1f0d4 <isatty+0x3c>
   1f0b4:	01400304 	movi	r5,12
   1f0b8:	e13fff17 	ldw	r4,-4(fp)
   1f0bc:	000cda80 	call	cda8 <__mulsi3>
   1f0c0:	1007883a 	mov	r3,r2
   1f0c4:	008000f4 	movhi	r2,3
   1f0c8:	10ad1404 	addi	r2,r2,-19376
   1f0cc:	1885883a 	add	r2,r3,r2
   1f0d0:	00000106 	br	1f0d8 <isatty+0x40>
   1f0d4:	0005883a 	mov	r2,zero
   1f0d8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1f0dc:	e0bfef17 	ldw	r2,-68(fp)
   1f0e0:	10000e26 	beq	r2,zero,1f11c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1f0e4:	e0bfef17 	ldw	r2,-68(fp)
   1f0e8:	10800017 	ldw	r2,0(r2)
   1f0ec:	10800817 	ldw	r2,32(r2)
   1f0f0:	1000021e 	bne	r2,zero,1f0fc <isatty+0x64>
    {
      return 1;
   1f0f4:	00800044 	movi	r2,1
   1f0f8:	00000d06 	br	1f130 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1f0fc:	e0bff004 	addi	r2,fp,-64
   1f100:	100b883a 	mov	r5,r2
   1f104:	e13fff17 	ldw	r4,-4(fp)
   1f108:	001ef840 	call	1ef84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1f10c:	e0bff117 	ldw	r2,-60(fp)
   1f110:	10880020 	cmpeqi	r2,r2,8192
   1f114:	10803fcc 	andi	r2,r2,255
   1f118:	00000506 	br	1f130 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1f11c:	001f05c0 	call	1f05c <alt_get_errno>
   1f120:	1007883a 	mov	r3,r2
   1f124:	00801444 	movi	r2,81
   1f128:	18800015 	stw	r2,0(r3)
    return 0;
   1f12c:	0005883a 	mov	r2,zero
  }
}
   1f130:	e037883a 	mov	sp,fp
   1f134:	dfc00117 	ldw	ra,4(sp)
   1f138:	df000017 	ldw	fp,0(sp)
   1f13c:	dec00204 	addi	sp,sp,8
   1f140:	f800283a 	ret

0001f144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f144:	defffe04 	addi	sp,sp,-8
   1f148:	dfc00115 	stw	ra,4(sp)
   1f14c:	df000015 	stw	fp,0(sp)
   1f150:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f154:	d0a5bb17 	ldw	r2,-26900(gp)
   1f158:	10000326 	beq	r2,zero,1f168 <alt_get_errno+0x24>
   1f15c:	d0a5bb17 	ldw	r2,-26900(gp)
   1f160:	103ee83a 	callr	r2
   1f164:	00000106 	br	1f16c <alt_get_errno+0x28>
   1f168:	d0b24704 	addi	r2,gp,-14052
}
   1f16c:	e037883a 	mov	sp,fp
   1f170:	dfc00117 	ldw	ra,4(sp)
   1f174:	df000017 	ldw	fp,0(sp)
   1f178:	dec00204 	addi	sp,sp,8
   1f17c:	f800283a 	ret

0001f180 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1f180:	defffb04 	addi	sp,sp,-20
   1f184:	dfc00415 	stw	ra,16(sp)
   1f188:	df000315 	stw	fp,12(sp)
   1f18c:	df000304 	addi	fp,sp,12
   1f190:	e13ffe15 	stw	r4,-8(fp)
   1f194:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1f198:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1f19c:	e0bffe17 	ldw	r2,-8(fp)
   1f1a0:	00802f16 	blt	zero,r2,1f260 <kill+0xe0>
  {
    switch (sig)
   1f1a4:	e0bfff17 	ldw	r2,-4(fp)
   1f1a8:	10800828 	cmpgeui	r2,r2,32
   1f1ac:	1000291e 	bne	r2,zero,1f254 <kill+0xd4>
   1f1b0:	e0bfff17 	ldw	r2,-4(fp)
   1f1b4:	100690ba 	slli	r3,r2,2
   1f1b8:	008000b4 	movhi	r2,2
   1f1bc:	10bc7304 	addi	r2,r2,-3636
   1f1c0:	1885883a 	add	r2,r3,r2
   1f1c4:	10800017 	ldw	r2,0(r2)
   1f1c8:	1000683a 	jmp	r2
   1f1cc:	0001f274 	movhi	zero,1993
   1f1d0:	0001f254 	movui	zero,1993
   1f1d4:	0001f254 	movui	zero,1993
   1f1d8:	0001f24c 	andi	zero,zero,1993
   1f1dc:	0001f24c 	andi	zero,zero,1993
   1f1e0:	0001f24c 	andi	zero,zero,1993
   1f1e4:	0001f24c 	andi	zero,zero,1993
   1f1e8:	0001f254 	movui	zero,1993
   1f1ec:	0001f24c 	andi	zero,zero,1993
   1f1f0:	0001f24c 	andi	zero,zero,1993
   1f1f4:	0001f24c 	andi	zero,zero,1993
   1f1f8:	0001f24c 	andi	zero,zero,1993
   1f1fc:	0001f24c 	andi	zero,zero,1993
   1f200:	0001f24c 	andi	zero,zero,1993
   1f204:	0001f24c 	andi	zero,zero,1993
   1f208:	0001f24c 	andi	zero,zero,1993
   1f20c:	0001f274 	movhi	zero,1993
   1f210:	0001f254 	movui	zero,1993
   1f214:	0001f254 	movui	zero,1993
   1f218:	0001f254 	movui	zero,1993
   1f21c:	0001f274 	movhi	zero,1993
   1f220:	0001f254 	movui	zero,1993
   1f224:	0001f254 	movui	zero,1993
   1f228:	0001f24c 	andi	zero,zero,1993
   1f22c:	0001f24c 	andi	zero,zero,1993
   1f230:	0001f24c 	andi	zero,zero,1993
   1f234:	0001f24c 	andi	zero,zero,1993
   1f238:	0001f24c 	andi	zero,zero,1993
   1f23c:	0001f254 	movui	zero,1993
   1f240:	0001f254 	movui	zero,1993
   1f244:	0001f24c 	andi	zero,zero,1993
   1f248:	0001f24c 	andi	zero,zero,1993
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1f24c:	0009883a 	mov	r4,zero
   1f250:	001ef140 	call	1ef14 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1f254:	00800584 	movi	r2,22
   1f258:	e0bffd15 	stw	r2,-12(fp)
   1f25c:	00000606 	br	1f278 <kill+0xf8>
    }
  }

  else if (pid > 0)
   1f260:	e0bffe17 	ldw	r2,-8(fp)
   1f264:	0080040e 	bge	zero,r2,1f278 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1f268:	008000c4 	movi	r2,3
   1f26c:	e0bffd15 	stw	r2,-12(fp)
   1f270:	00000106 	br	1f278 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1f274:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1f278:	e0bffd17 	ldw	r2,-12(fp)
   1f27c:	10000626 	beq	r2,zero,1f298 <kill+0x118>
  {
    ALT_ERRNO = status;
   1f280:	001f1440 	call	1f144 <alt_get_errno>
   1f284:	1007883a 	mov	r3,r2
   1f288:	e0bffd17 	ldw	r2,-12(fp)
   1f28c:	18800015 	stw	r2,0(r3)
    return -1;
   1f290:	00bfffc4 	movi	r2,-1
   1f294:	00000106 	br	1f29c <kill+0x11c>
  }

  return 0;
   1f298:	0005883a 	mov	r2,zero
}
   1f29c:	e037883a 	mov	sp,fp
   1f2a0:	dfc00117 	ldw	ra,4(sp)
   1f2a4:	df000017 	ldw	fp,0(sp)
   1f2a8:	dec00204 	addi	sp,sp,8
   1f2ac:	f800283a 	ret

0001f2b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1f2b0:	defffc04 	addi	sp,sp,-16
   1f2b4:	df000315 	stw	fp,12(sp)
   1f2b8:	df000304 	addi	fp,sp,12
   1f2bc:	e13ffd15 	stw	r4,-12(fp)
   1f2c0:	e17ffe15 	stw	r5,-8(fp)
   1f2c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1f2c8:	e0fffe17 	ldw	r3,-8(fp)
   1f2cc:	e0bffd17 	ldw	r2,-12(fp)
   1f2d0:	18800c26 	beq	r3,r2,1f304 <alt_load_section+0x54>
  {
    while( to != end )
   1f2d4:	00000806 	br	1f2f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1f2d8:	e0bffe17 	ldw	r2,-8(fp)
   1f2dc:	10c00104 	addi	r3,r2,4
   1f2e0:	e0fffe15 	stw	r3,-8(fp)
   1f2e4:	e0fffd17 	ldw	r3,-12(fp)
   1f2e8:	19000104 	addi	r4,r3,4
   1f2ec:	e13ffd15 	stw	r4,-12(fp)
   1f2f0:	18c00017 	ldw	r3,0(r3)
   1f2f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1f2f8:	e0fffe17 	ldw	r3,-8(fp)
   1f2fc:	e0bfff17 	ldw	r2,-4(fp)
   1f300:	18bff51e 	bne	r3,r2,1f2d8 <__alt_data_end+0xfc01f2d8>
    {
      *to++ = *from++;
    }
  }
}
   1f304:	0001883a 	nop
   1f308:	e037883a 	mov	sp,fp
   1f30c:	df000017 	ldw	fp,0(sp)
   1f310:	dec00104 	addi	sp,sp,4
   1f314:	f800283a 	ret

0001f318 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1f318:	defffe04 	addi	sp,sp,-8
   1f31c:	dfc00115 	stw	ra,4(sp)
   1f320:	df000015 	stw	fp,0(sp)
   1f324:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1f328:	018000f4 	movhi	r6,3
   1f32c:	31b75c04 	addi	r6,r6,-8848
   1f330:	014000f4 	movhi	r5,3
   1f334:	296ae104 	addi	r5,r5,-21628
   1f338:	010000f4 	movhi	r4,3
   1f33c:	21375c04 	addi	r4,r4,-8848
   1f340:	001f2b00 	call	1f2b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1f344:	01800034 	movhi	r6,0
   1f348:	31808c04 	addi	r6,r6,560
   1f34c:	01400034 	movhi	r5,0
   1f350:	29400804 	addi	r5,r5,32
   1f354:	01000034 	movhi	r4,0
   1f358:	21000804 	addi	r4,r4,32
   1f35c:	001f2b00 	call	1f2b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1f360:	018000f4 	movhi	r6,3
   1f364:	31aae104 	addi	r6,r6,-21628
   1f368:	014000b4 	movhi	r5,2
   1f36c:	294e8304 	addi	r5,r5,14860
   1f370:	010000b4 	movhi	r4,2
   1f374:	210e8304 	addi	r4,r4,14860
   1f378:	001f2b00 	call	1f2b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1f37c:	00226e00 	call	226e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1f380:	00229300 	call	22930 <alt_icache_flush_all>
}
   1f384:	0001883a 	nop
   1f388:	e037883a 	mov	sp,fp
   1f38c:	dfc00117 	ldw	ra,4(sp)
   1f390:	df000017 	ldw	fp,0(sp)
   1f394:	dec00204 	addi	sp,sp,8
   1f398:	f800283a 	ret

0001f39c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f39c:	defffe04 	addi	sp,sp,-8
   1f3a0:	dfc00115 	stw	ra,4(sp)
   1f3a4:	df000015 	stw	fp,0(sp)
   1f3a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f3ac:	d0a5bb17 	ldw	r2,-26900(gp)
   1f3b0:	10000326 	beq	r2,zero,1f3c0 <alt_get_errno+0x24>
   1f3b4:	d0a5bb17 	ldw	r2,-26900(gp)
   1f3b8:	103ee83a 	callr	r2
   1f3bc:	00000106 	br	1f3c4 <alt_get_errno+0x28>
   1f3c0:	d0b24704 	addi	r2,gp,-14052
}
   1f3c4:	e037883a 	mov	sp,fp
   1f3c8:	dfc00117 	ldw	ra,4(sp)
   1f3cc:	df000017 	ldw	fp,0(sp)
   1f3d0:	dec00204 	addi	sp,sp,8
   1f3d4:	f800283a 	ret

0001f3d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1f3d8:	defff904 	addi	sp,sp,-28
   1f3dc:	dfc00615 	stw	ra,24(sp)
   1f3e0:	df000515 	stw	fp,20(sp)
   1f3e4:	df000504 	addi	fp,sp,20
   1f3e8:	e13ffd15 	stw	r4,-12(fp)
   1f3ec:	e17ffe15 	stw	r5,-8(fp)
   1f3f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1f3f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f3f8:	e0bffd17 	ldw	r2,-12(fp)
   1f3fc:	10000816 	blt	r2,zero,1f420 <lseek+0x48>
   1f400:	01400304 	movi	r5,12
   1f404:	e13ffd17 	ldw	r4,-12(fp)
   1f408:	000cda80 	call	cda8 <__mulsi3>
   1f40c:	1007883a 	mov	r3,r2
   1f410:	008000f4 	movhi	r2,3
   1f414:	10ad1404 	addi	r2,r2,-19376
   1f418:	1885883a 	add	r2,r3,r2
   1f41c:	00000106 	br	1f424 <lseek+0x4c>
   1f420:	0005883a 	mov	r2,zero
   1f424:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1f428:	e0bffc17 	ldw	r2,-16(fp)
   1f42c:	10001026 	beq	r2,zero,1f470 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1f430:	e0bffc17 	ldw	r2,-16(fp)
   1f434:	10800017 	ldw	r2,0(r2)
   1f438:	10800717 	ldw	r2,28(r2)
   1f43c:	10000926 	beq	r2,zero,1f464 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1f440:	e0bffc17 	ldw	r2,-16(fp)
   1f444:	10800017 	ldw	r2,0(r2)
   1f448:	10800717 	ldw	r2,28(r2)
   1f44c:	e1bfff17 	ldw	r6,-4(fp)
   1f450:	e17ffe17 	ldw	r5,-8(fp)
   1f454:	e13ffc17 	ldw	r4,-16(fp)
   1f458:	103ee83a 	callr	r2
   1f45c:	e0bffb15 	stw	r2,-20(fp)
   1f460:	00000506 	br	1f478 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1f464:	00bfde84 	movi	r2,-134
   1f468:	e0bffb15 	stw	r2,-20(fp)
   1f46c:	00000206 	br	1f478 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1f470:	00bfebc4 	movi	r2,-81
   1f474:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1f478:	e0bffb17 	ldw	r2,-20(fp)
   1f47c:	1000070e 	bge	r2,zero,1f49c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1f480:	001f39c0 	call	1f39c <alt_get_errno>
   1f484:	1007883a 	mov	r3,r2
   1f488:	e0bffb17 	ldw	r2,-20(fp)
   1f48c:	0085c83a 	sub	r2,zero,r2
   1f490:	18800015 	stw	r2,0(r3)
    rc = -1;
   1f494:	00bfffc4 	movi	r2,-1
   1f498:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1f49c:	e0bffb17 	ldw	r2,-20(fp)
}
   1f4a0:	e037883a 	mov	sp,fp
   1f4a4:	dfc00117 	ldw	ra,4(sp)
   1f4a8:	df000017 	ldw	fp,0(sp)
   1f4ac:	dec00204 	addi	sp,sp,8
   1f4b0:	f800283a 	ret

0001f4b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1f4b4:	defffd04 	addi	sp,sp,-12
   1f4b8:	dfc00215 	stw	ra,8(sp)
   1f4bc:	df000115 	stw	fp,4(sp)
   1f4c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1f4c4:	0009883a 	mov	r4,zero
   1f4c8:	001fa400 	call	1fa40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1f4cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1f4d0:	001fa780 	call	1fa78 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1f4d4:	018000f4 	movhi	r6,3
   1f4d8:	31aacc04 	addi	r6,r6,-21712
   1f4dc:	014000f4 	movhi	r5,3
   1f4e0:	296acc04 	addi	r5,r5,-21712
   1f4e4:	010000f4 	movhi	r4,3
   1f4e8:	212acc04 	addi	r4,r4,-21712
   1f4ec:	0022cd40 	call	22cd4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1f4f0:	00227e00 	call	227e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1f4f4:	010000b4 	movhi	r4,2
   1f4f8:	210a1004 	addi	r4,r4,10304
   1f4fc:	002366c0 	call	2366c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1f500:	d0b24b17 	ldw	r2,-14036(gp)
   1f504:	d0f24c17 	ldw	r3,-14032(gp)
   1f508:	d1324d17 	ldw	r4,-14028(gp)
   1f50c:	200d883a 	mov	r6,r4
   1f510:	180b883a 	mov	r5,r3
   1f514:	1009883a 	mov	r4,r2
   1f518:	000a0d80 	call	a0d8 <main>
   1f51c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1f520:	01000044 	movi	r4,1
   1f524:	001ee100 	call	1ee10 <close>
  exit (result);
   1f528:	e13fff17 	ldw	r4,-4(fp)
   1f52c:	00236800 	call	23680 <exit>

0001f530 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1f530:	defffe04 	addi	sp,sp,-8
   1f534:	df000115 	stw	fp,4(sp)
   1f538:	df000104 	addi	fp,sp,4
   1f53c:	e13fff15 	stw	r4,-4(fp)
}
   1f540:	0001883a 	nop
   1f544:	e037883a 	mov	sp,fp
   1f548:	df000017 	ldw	fp,0(sp)
   1f54c:	dec00104 	addi	sp,sp,4
   1f550:	f800283a 	ret

0001f554 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1f554:	defffe04 	addi	sp,sp,-8
   1f558:	df000115 	stw	fp,4(sp)
   1f55c:	df000104 	addi	fp,sp,4
   1f560:	e13fff15 	stw	r4,-4(fp)
}
   1f564:	0001883a 	nop
   1f568:	e037883a 	mov	sp,fp
   1f56c:	df000017 	ldw	fp,0(sp)
   1f570:	dec00104 	addi	sp,sp,4
   1f574:	f800283a 	ret

0001f578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f578:	defffe04 	addi	sp,sp,-8
   1f57c:	dfc00115 	stw	ra,4(sp)
   1f580:	df000015 	stw	fp,0(sp)
   1f584:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f588:	d0a5bb17 	ldw	r2,-26900(gp)
   1f58c:	10000326 	beq	r2,zero,1f59c <alt_get_errno+0x24>
   1f590:	d0a5bb17 	ldw	r2,-26900(gp)
   1f594:	103ee83a 	callr	r2
   1f598:	00000106 	br	1f5a0 <alt_get_errno+0x28>
   1f59c:	d0b24704 	addi	r2,gp,-14052
}
   1f5a0:	e037883a 	mov	sp,fp
   1f5a4:	dfc00117 	ldw	ra,4(sp)
   1f5a8:	df000017 	ldw	fp,0(sp)
   1f5ac:	dec00204 	addi	sp,sp,8
   1f5b0:	f800283a 	ret

0001f5b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1f5b4:	defff904 	addi	sp,sp,-28
   1f5b8:	dfc00615 	stw	ra,24(sp)
   1f5bc:	df000515 	stw	fp,20(sp)
   1f5c0:	df000504 	addi	fp,sp,20
   1f5c4:	e13ffd15 	stw	r4,-12(fp)
   1f5c8:	e17ffe15 	stw	r5,-8(fp)
   1f5cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f5d0:	e0bffd17 	ldw	r2,-12(fp)
   1f5d4:	10000816 	blt	r2,zero,1f5f8 <read+0x44>
   1f5d8:	01400304 	movi	r5,12
   1f5dc:	e13ffd17 	ldw	r4,-12(fp)
   1f5e0:	000cda80 	call	cda8 <__mulsi3>
   1f5e4:	1007883a 	mov	r3,r2
   1f5e8:	008000f4 	movhi	r2,3
   1f5ec:	10ad1404 	addi	r2,r2,-19376
   1f5f0:	1885883a 	add	r2,r3,r2
   1f5f4:	00000106 	br	1f5fc <read+0x48>
   1f5f8:	0005883a 	mov	r2,zero
   1f5fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f600:	e0bffb17 	ldw	r2,-20(fp)
   1f604:	10002226 	beq	r2,zero,1f690 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f608:	e0bffb17 	ldw	r2,-20(fp)
   1f60c:	10800217 	ldw	r2,8(r2)
   1f610:	108000cc 	andi	r2,r2,3
   1f614:	10800060 	cmpeqi	r2,r2,1
   1f618:	1000181e 	bne	r2,zero,1f67c <read+0xc8>
        (fd->dev->read))
   1f61c:	e0bffb17 	ldw	r2,-20(fp)
   1f620:	10800017 	ldw	r2,0(r2)
   1f624:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1f628:	10001426 	beq	r2,zero,1f67c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1f62c:	e0bffb17 	ldw	r2,-20(fp)
   1f630:	10800017 	ldw	r2,0(r2)
   1f634:	10800517 	ldw	r2,20(r2)
   1f638:	e0ffff17 	ldw	r3,-4(fp)
   1f63c:	180d883a 	mov	r6,r3
   1f640:	e17ffe17 	ldw	r5,-8(fp)
   1f644:	e13ffb17 	ldw	r4,-20(fp)
   1f648:	103ee83a 	callr	r2
   1f64c:	e0bffc15 	stw	r2,-16(fp)
   1f650:	e0bffc17 	ldw	r2,-16(fp)
   1f654:	1000070e 	bge	r2,zero,1f674 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1f658:	001f5780 	call	1f578 <alt_get_errno>
   1f65c:	1007883a 	mov	r3,r2
   1f660:	e0bffc17 	ldw	r2,-16(fp)
   1f664:	0085c83a 	sub	r2,zero,r2
   1f668:	18800015 	stw	r2,0(r3)
          return -1;
   1f66c:	00bfffc4 	movi	r2,-1
   1f670:	00000c06 	br	1f6a4 <read+0xf0>
        }
        return rval;
   1f674:	e0bffc17 	ldw	r2,-16(fp)
   1f678:	00000a06 	br	1f6a4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1f67c:	001f5780 	call	1f578 <alt_get_errno>
   1f680:	1007883a 	mov	r3,r2
   1f684:	00800344 	movi	r2,13
   1f688:	18800015 	stw	r2,0(r3)
   1f68c:	00000406 	br	1f6a0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1f690:	001f5780 	call	1f578 <alt_get_errno>
   1f694:	1007883a 	mov	r3,r2
   1f698:	00801444 	movi	r2,81
   1f69c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f6a0:	00bfffc4 	movi	r2,-1
}
   1f6a4:	e037883a 	mov	sp,fp
   1f6a8:	dfc00117 	ldw	ra,4(sp)
   1f6ac:	df000017 	ldw	fp,0(sp)
   1f6b0:	dec00204 	addi	sp,sp,8
   1f6b4:	f800283a 	ret

0001f6b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1f6b8:	defffc04 	addi	sp,sp,-16
   1f6bc:	dfc00315 	stw	ra,12(sp)
   1f6c0:	df000215 	stw	fp,8(sp)
   1f6c4:	dc000115 	stw	r16,4(sp)
   1f6c8:	df000204 	addi	fp,sp,8
   1f6cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1f6d0:	e0bffe17 	ldw	r2,-8(fp)
   1f6d4:	108000d0 	cmplti	r2,r2,3
   1f6d8:	1000111e 	bne	r2,zero,1f720 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1f6dc:	040000f4 	movhi	r16,3
   1f6e0:	842d1404 	addi	r16,r16,-19376
   1f6e4:	e0bffe17 	ldw	r2,-8(fp)
   1f6e8:	01400304 	movi	r5,12
   1f6ec:	1009883a 	mov	r4,r2
   1f6f0:	000cda80 	call	cda8 <__mulsi3>
   1f6f4:	8085883a 	add	r2,r16,r2
   1f6f8:	10800204 	addi	r2,r2,8
   1f6fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1f700:	040000f4 	movhi	r16,3
   1f704:	842d1404 	addi	r16,r16,-19376
   1f708:	e0bffe17 	ldw	r2,-8(fp)
   1f70c:	01400304 	movi	r5,12
   1f710:	1009883a 	mov	r4,r2
   1f714:	000cda80 	call	cda8 <__mulsi3>
   1f718:	8085883a 	add	r2,r16,r2
   1f71c:	10000015 	stw	zero,0(r2)
  }
}
   1f720:	0001883a 	nop
   1f724:	e6ffff04 	addi	sp,fp,-4
   1f728:	dfc00217 	ldw	ra,8(sp)
   1f72c:	df000117 	ldw	fp,4(sp)
   1f730:	dc000017 	ldw	r16,0(sp)
   1f734:	dec00304 	addi	sp,sp,12
   1f738:	f800283a 	ret

0001f73c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1f73c:	defff904 	addi	sp,sp,-28
   1f740:	df000615 	stw	fp,24(sp)
   1f744:	df000604 	addi	fp,sp,24
   1f748:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f74c:	0005303a 	rdctl	r2,status
   1f750:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f754:	e0fffe17 	ldw	r3,-8(fp)
   1f758:	00bfff84 	movi	r2,-2
   1f75c:	1884703a 	and	r2,r3,r2
   1f760:	1001703a 	wrctl	status,r2
  
  return context;
   1f764:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1f768:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1f76c:	d0a5bc17 	ldw	r2,-26896(gp)
   1f770:	10c000c4 	addi	r3,r2,3
   1f774:	00bfff04 	movi	r2,-4
   1f778:	1884703a 	and	r2,r3,r2
   1f77c:	d0a5bc15 	stw	r2,-26896(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1f780:	d0e5bc17 	ldw	r3,-26896(gp)
   1f784:	e0bfff17 	ldw	r2,-4(fp)
   1f788:	1887883a 	add	r3,r3,r2
   1f78c:	00810034 	movhi	r2,1024
   1f790:	10800004 	addi	r2,r2,0
   1f794:	10c0062e 	bgeu	r2,r3,1f7b0 <sbrk+0x74>
   1f798:	e0bffb17 	ldw	r2,-20(fp)
   1f79c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f7a0:	e0bffa17 	ldw	r2,-24(fp)
   1f7a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1f7a8:	00bfffc4 	movi	r2,-1
   1f7ac:	00000b06 	br	1f7dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1f7b0:	d0a5bc17 	ldw	r2,-26896(gp)
   1f7b4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1f7b8:	d0e5bc17 	ldw	r3,-26896(gp)
   1f7bc:	e0bfff17 	ldw	r2,-4(fp)
   1f7c0:	1885883a 	add	r2,r3,r2
   1f7c4:	d0a5bc15 	stw	r2,-26896(gp)
   1f7c8:	e0bffb17 	ldw	r2,-20(fp)
   1f7cc:	e0bffc15 	stw	r2,-16(fp)
   1f7d0:	e0bffc17 	ldw	r2,-16(fp)
   1f7d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1f7d8:	e0bffd17 	ldw	r2,-12(fp)
} 
   1f7dc:	e037883a 	mov	sp,fp
   1f7e0:	df000017 	ldw	fp,0(sp)
   1f7e4:	dec00104 	addi	sp,sp,4
   1f7e8:	f800283a 	ret

0001f7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f7ec:	defffe04 	addi	sp,sp,-8
   1f7f0:	dfc00115 	stw	ra,4(sp)
   1f7f4:	df000015 	stw	fp,0(sp)
   1f7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f7fc:	d0a5bb17 	ldw	r2,-26900(gp)
   1f800:	10000326 	beq	r2,zero,1f810 <alt_get_errno+0x24>
   1f804:	d0a5bb17 	ldw	r2,-26900(gp)
   1f808:	103ee83a 	callr	r2
   1f80c:	00000106 	br	1f814 <alt_get_errno+0x28>
   1f810:	d0b24704 	addi	r2,gp,-14052
}
   1f814:	e037883a 	mov	sp,fp
   1f818:	dfc00117 	ldw	ra,4(sp)
   1f81c:	df000017 	ldw	fp,0(sp)
   1f820:	dec00204 	addi	sp,sp,8
   1f824:	f800283a 	ret

0001f828 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1f828:	defffc04 	addi	sp,sp,-16
   1f82c:	dfc00315 	stw	ra,12(sp)
   1f830:	df000215 	stw	fp,8(sp)
   1f834:	df000204 	addi	fp,sp,8
   1f838:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f83c:	d0b25017 	ldw	r2,-14016(gp)
  clock_t ticks = alt_nticks(); 
   1f840:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f844:	d0b24f17 	ldw	r2,-14020(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1f848:	1000061e 	bne	r2,zero,1f864 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   1f84c:	001f7ec0 	call	1f7ec <alt_get_errno>
   1f850:	1007883a 	mov	r3,r2
   1f854:	00801604 	movi	r2,88
   1f858:	18800015 	stw	r2,0(r3)
    return 0;
   1f85c:	0005883a 	mov	r2,zero
   1f860:	00000a06 	br	1f88c <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1f864:	e0bfff17 	ldw	r2,-4(fp)
   1f868:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   1f86c:	e0bfff17 	ldw	r2,-4(fp)
   1f870:	e0fffe17 	ldw	r3,-8(fp)
   1f874:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   1f878:	e0bfff17 	ldw	r2,-4(fp)
   1f87c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1f880:	e0bfff17 	ldw	r2,-4(fp)
   1f884:	10000315 	stw	zero,12(r2)

  return ticks;
   1f888:	e0bffe17 	ldw	r2,-8(fp)
}
   1f88c:	e037883a 	mov	sp,fp
   1f890:	dfc00117 	ldw	ra,4(sp)
   1f894:	df000017 	ldw	fp,0(sp)
   1f898:	dec00204 	addi	sp,sp,8
   1f89c:	f800283a 	ret

0001f8a0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1f8a0:	defffd04 	addi	sp,sp,-12
   1f8a4:	dfc00215 	stw	ra,8(sp)
   1f8a8:	df000115 	stw	fp,4(sp)
   1f8ac:	df000104 	addi	fp,sp,4
   1f8b0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1f8b4:	e13fff17 	ldw	r4,-4(fp)
   1f8b8:	00225880 	call	22588 <alt_busy_sleep>
}
   1f8bc:	e037883a 	mov	sp,fp
   1f8c0:	dfc00117 	ldw	ra,4(sp)
   1f8c4:	df000017 	ldw	fp,0(sp)
   1f8c8:	dec00204 	addi	sp,sp,8
   1f8cc:	f800283a 	ret

0001f8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f8d0:	defffe04 	addi	sp,sp,-8
   1f8d4:	dfc00115 	stw	ra,4(sp)
   1f8d8:	df000015 	stw	fp,0(sp)
   1f8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f8e0:	d0a5bb17 	ldw	r2,-26900(gp)
   1f8e4:	10000326 	beq	r2,zero,1f8f4 <alt_get_errno+0x24>
   1f8e8:	d0a5bb17 	ldw	r2,-26900(gp)
   1f8ec:	103ee83a 	callr	r2
   1f8f0:	00000106 	br	1f8f8 <alt_get_errno+0x28>
   1f8f4:	d0b24704 	addi	r2,gp,-14052
}
   1f8f8:	e037883a 	mov	sp,fp
   1f8fc:	dfc00117 	ldw	ra,4(sp)
   1f900:	df000017 	ldw	fp,0(sp)
   1f904:	dec00204 	addi	sp,sp,8
   1f908:	f800283a 	ret

0001f90c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1f90c:	defff904 	addi	sp,sp,-28
   1f910:	dfc00615 	stw	ra,24(sp)
   1f914:	df000515 	stw	fp,20(sp)
   1f918:	df000504 	addi	fp,sp,20
   1f91c:	e13ffd15 	stw	r4,-12(fp)
   1f920:	e17ffe15 	stw	r5,-8(fp)
   1f924:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1f928:	e0bffd17 	ldw	r2,-12(fp)
   1f92c:	10000816 	blt	r2,zero,1f950 <write+0x44>
   1f930:	01400304 	movi	r5,12
   1f934:	e13ffd17 	ldw	r4,-12(fp)
   1f938:	000cda80 	call	cda8 <__mulsi3>
   1f93c:	1007883a 	mov	r3,r2
   1f940:	008000f4 	movhi	r2,3
   1f944:	10ad1404 	addi	r2,r2,-19376
   1f948:	1885883a 	add	r2,r3,r2
   1f94c:	00000106 	br	1f954 <write+0x48>
   1f950:	0005883a 	mov	r2,zero
   1f954:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1f958:	e0bffb17 	ldw	r2,-20(fp)
   1f95c:	10002126 	beq	r2,zero,1f9e4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1f960:	e0bffb17 	ldw	r2,-20(fp)
   1f964:	10800217 	ldw	r2,8(r2)
   1f968:	108000cc 	andi	r2,r2,3
   1f96c:	10001826 	beq	r2,zero,1f9d0 <write+0xc4>
   1f970:	e0bffb17 	ldw	r2,-20(fp)
   1f974:	10800017 	ldw	r2,0(r2)
   1f978:	10800617 	ldw	r2,24(r2)
   1f97c:	10001426 	beq	r2,zero,1f9d0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1f980:	e0bffb17 	ldw	r2,-20(fp)
   1f984:	10800017 	ldw	r2,0(r2)
   1f988:	10800617 	ldw	r2,24(r2)
   1f98c:	e0ffff17 	ldw	r3,-4(fp)
   1f990:	180d883a 	mov	r6,r3
   1f994:	e17ffe17 	ldw	r5,-8(fp)
   1f998:	e13ffb17 	ldw	r4,-20(fp)
   1f99c:	103ee83a 	callr	r2
   1f9a0:	e0bffc15 	stw	r2,-16(fp)
   1f9a4:	e0bffc17 	ldw	r2,-16(fp)
   1f9a8:	1000070e 	bge	r2,zero,1f9c8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1f9ac:	001f8d00 	call	1f8d0 <alt_get_errno>
   1f9b0:	1007883a 	mov	r3,r2
   1f9b4:	e0bffc17 	ldw	r2,-16(fp)
   1f9b8:	0085c83a 	sub	r2,zero,r2
   1f9bc:	18800015 	stw	r2,0(r3)
        return -1;
   1f9c0:	00bfffc4 	movi	r2,-1
   1f9c4:	00000c06 	br	1f9f8 <write+0xec>
      }
      return rval;
   1f9c8:	e0bffc17 	ldw	r2,-16(fp)
   1f9cc:	00000a06 	br	1f9f8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1f9d0:	001f8d00 	call	1f8d0 <alt_get_errno>
   1f9d4:	1007883a 	mov	r3,r2
   1f9d8:	00800344 	movi	r2,13
   1f9dc:	18800015 	stw	r2,0(r3)
   1f9e0:	00000406 	br	1f9f4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1f9e4:	001f8d00 	call	1f8d0 <alt_get_errno>
   1f9e8:	1007883a 	mov	r3,r2
   1f9ec:	00801444 	movi	r2,81
   1f9f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1f9f4:	00bfffc4 	movi	r2,-1
}
   1f9f8:	e037883a 	mov	sp,fp
   1f9fc:	dfc00117 	ldw	ra,4(sp)
   1fa00:	df000017 	ldw	fp,0(sp)
   1fa04:	dec00204 	addi	sp,sp,8
   1fa08:	f800283a 	ret

0001fa0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1fa0c:	defffd04 	addi	sp,sp,-12
   1fa10:	dfc00215 	stw	ra,8(sp)
   1fa14:	df000115 	stw	fp,4(sp)
   1fa18:	df000104 	addi	fp,sp,4
   1fa1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1fa20:	d165b804 	addi	r5,gp,-26912
   1fa24:	e13fff17 	ldw	r4,-4(fp)
   1fa28:	002273c0 	call	2273c <alt_dev_llist_insert>
}
   1fa2c:	e037883a 	mov	sp,fp
   1fa30:	dfc00117 	ldw	ra,4(sp)
   1fa34:	df000017 	ldw	fp,0(sp)
   1fa38:	dec00204 	addi	sp,sp,8
   1fa3c:	f800283a 	ret

0001fa40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1fa40:	defffd04 	addi	sp,sp,-12
   1fa44:	dfc00215 	stw	ra,8(sp)
   1fa48:	df000115 	stw	fp,4(sp)
   1fa4c:	df000104 	addi	fp,sp,4
   1fa50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   1fa54:	00233e00 	call	233e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1fa58:	00800044 	movi	r2,1
   1fa5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1fa60:	0001883a 	nop
   1fa64:	e037883a 	mov	sp,fp
   1fa68:	dfc00117 	ldw	ra,4(sp)
   1fa6c:	df000017 	ldw	fp,0(sp)
   1fa70:	dec00204 	addi	sp,sp,8
   1fa74:	f800283a 	ret

0001fa78 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1fa78:	defffe04 	addi	sp,sp,-8
   1fa7c:	dfc00115 	stw	ra,4(sp)
   1fa80:	df000015 	stw	fp,0(sp)
   1fa84:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1fa88:	01c0fa04 	movi	r7,1000
   1fa8c:	01800084 	movi	r6,2
   1fa90:	000b883a 	mov	r5,zero
   1fa94:	01010034 	movhi	r4,1024
   1fa98:	21042004 	addi	r4,r4,4224
   1fa9c:	00223e00 	call	223e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   1faa0:	010000f4 	movhi	r4,3
   1faa4:	212d7404 	addi	r4,r4,-18992
   1faa8:	001fd3c0 	call	1fd3c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1faac:	01800044 	movi	r6,1
   1fab0:	000b883a 	mov	r5,zero
   1fab4:	010000f4 	movhi	r4,3
   1fab8:	212d8c04 	addi	r4,r4,-18896
   1fabc:	00218680 	call	21868 <altera_avalon_jtag_uart_init>
   1fac0:	010000f4 	movhi	r4,3
   1fac4:	212d8204 	addi	r4,r4,-18936
   1fac8:	001fa0c0 	call	1fa0c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   1facc:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1fad0:	0001883a 	nop
}
   1fad4:	0001883a 	nop
   1fad8:	e037883a 	mov	sp,fp
   1fadc:	dfc00117 	ldw	ra,4(sp)
   1fae0:	df000017 	ldw	fp,0(sp)
   1fae4:	dec00204 	addi	sp,sp,8
   1fae8:	f800283a 	ret

0001faec <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1faec:	defff904 	addi	sp,sp,-28
   1faf0:	dfc00615 	stw	ra,24(sp)
   1faf4:	df000515 	stw	fp,20(sp)
   1faf8:	df000504 	addi	fp,sp,20
   1fafc:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   1fb00:	008000b4 	movhi	r2,2
   1fb04:	10a1a804 	addi	r2,r2,-31072
   1fb08:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   1fb0c:	e0bfff17 	ldw	r2,-4(fp)
   1fb10:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1fb14:	e0bffc17 	ldw	r2,-16(fp)
   1fb18:	10800717 	ldw	r2,28(r2)
   1fb1c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   1fb20:	e0bffd17 	ldw	r2,-12(fp)
   1fb24:	10800217 	ldw	r2,8(r2)
   1fb28:	10800098 	cmpnei	r2,r2,2
   1fb2c:	1000251e 	bne	r2,zero,1fbc4 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1fb30:	e0bffd17 	ldw	r2,-12(fp)
   1fb34:	10c00017 	ldw	r3,0(r2)
   1fb38:	e0bffd17 	ldw	r2,-12(fp)
   1fb3c:	10800117 	ldw	r2,4(r2)
   1fb40:	e13ffe04 	addi	r4,fp,-8
   1fb44:	200f883a 	mov	r7,r4
   1fb48:	100d883a 	mov	r6,r2
   1fb4c:	180b883a 	mov	r5,r3
   1fb50:	e13ffc17 	ldw	r4,-16(fp)
   1fb54:	002029c0 	call	2029c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1fb58:	e0bffd17 	ldw	r2,-12(fp)
   1fb5c:	10c00117 	ldw	r3,4(r2)
   1fb60:	e0bffe17 	ldw	r2,-8(fp)
   1fb64:	1887c83a 	sub	r3,r3,r2
   1fb68:	e0bffd17 	ldw	r2,-12(fp)
   1fb6c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   1fb70:	e0bffd17 	ldw	r2,-12(fp)
   1fb74:	10c00017 	ldw	r3,0(r2)
   1fb78:	e0bffe17 	ldw	r2,-8(fp)
   1fb7c:	1887883a 	add	r3,r3,r2
   1fb80:	e0bffd17 	ldw	r2,-12(fp)
   1fb84:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1fb88:	e0bffd17 	ldw	r2,-12(fp)
   1fb8c:	10800117 	ldw	r2,4(r2)
   1fb90:	10000c26 	beq	r2,zero,1fbc4 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fb94:	01400704 	movi	r5,28
   1fb98:	e13ffc17 	ldw	r4,-16(fp)
   1fb9c:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   1fba0:	01400084 	movi	r5,2
   1fba4:	e13ffc17 	ldw	r4,-16(fp)
   1fba8:	00214f80 	call	214f8 <alt_avalon_i2c_int_enable>
   1fbac:	00000e06 	br	1fbe8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1fbb0:	e0bffb17 	ldw	r2,-20(fp)
   1fbb4:	10bfffc4 	addi	r2,r2,-1
   1fbb8:	e0bffb15 	stw	r2,-20(fp)
   1fbbc:	e0bffb17 	ldw	r2,-20(fp)
   1fbc0:	10000426 	beq	r2,zero,1fbd4 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   1fbc4:	e13ffc17 	ldw	r4,-16(fp)
   1fbc8:	00202580 	call	20258 <alt_avalon_i2c_is_busy>
   1fbcc:	103ff81e 	bne	r2,zero,1fbb0 <__alt_data_end+0xfc01fbb0>
   1fbd0:	00000106 	br	1fbd8 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   1fbd4:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1fbd8:	e13ffc17 	ldw	r4,-16(fp)
   1fbdc:	001ff000 	call	1ff00 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1fbe0:	e0bffd17 	ldw	r2,-12(fp)
   1fbe4:	10000215 	stw	zero,8(r2)
}
   1fbe8:	e037883a 	mov	sp,fp
   1fbec:	dfc00117 	ldw	ra,4(sp)
   1fbf0:	df000017 	ldw	fp,0(sp)
   1fbf4:	dec00204 	addi	sp,sp,8
   1fbf8:	f800283a 	ret

0001fbfc <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   1fbfc:	defffc04 	addi	sp,sp,-16
   1fc00:	dfc00315 	stw	ra,12(sp)
   1fc04:	df000215 	stw	fp,8(sp)
   1fc08:	df000204 	addi	fp,sp,8
   1fc0c:	e13ffe15 	stw	r4,-8(fp)
   1fc10:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   1fc14:	e0bfff17 	ldw	r2,-4(fp)
   1fc18:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   1fc1c:	e1ffff17 	ldw	r7,-4(fp)
   1fc20:	000d883a 	mov	r6,zero
   1fc24:	014000b4 	movhi	r5,2
   1fc28:	297ebb04 	addi	r5,r5,-1300
   1fc2c:	e13ffe17 	ldw	r4,-8(fp)
   1fc30:	001fce80 	call	1fce8 <alt_avalon_i2c_register_callback>
}
   1fc34:	0001883a 	nop
   1fc38:	e037883a 	mov	sp,fp
   1fc3c:	dfc00117 	ldw	ra,4(sp)
   1fc40:	df000017 	ldw	fp,0(sp)
   1fc44:	dec00204 	addi	sp,sp,8
   1fc48:	f800283a 	ret

0001fc4c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   1fc4c:	defff904 	addi	sp,sp,-28
   1fc50:	dfc00615 	stw	ra,24(sp)
   1fc54:	df000515 	stw	fp,20(sp)
   1fc58:	df000504 	addi	fp,sp,20
   1fc5c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   1fc60:	e0bfff17 	ldw	r2,-4(fp)
   1fc64:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1fc68:	014007c4 	movi	r5,31
   1fc6c:	e13ffb17 	ldw	r4,-20(fp)
   1fc70:	00214900 	call	21490 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fc74:	01400704 	movi	r5,28
   1fc78:	e13ffb17 	ldw	r4,-20(fp)
   1fc7c:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   1fc80:	e0bffb17 	ldw	r2,-20(fp)
   1fc84:	10800617 	ldw	r2,24(r2)
   1fc88:	10001126 	beq	r2,zero,1fcd0 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fc8c:	0005303a 	rdctl	r2,status
   1fc90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fc94:	e0fffd17 	ldw	r3,-12(fp)
   1fc98:	00bfff84 	movi	r2,-2
   1fc9c:	1884703a 	and	r2,r3,r2
   1fca0:	1001703a 	wrctl	status,r2
  
  return context;
   1fca4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   1fca8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   1fcac:	e0bffb17 	ldw	r2,-20(fp)
   1fcb0:	10800617 	ldw	r2,24(r2)
   1fcb4:	e13ffb17 	ldw	r4,-20(fp)
   1fcb8:	103ee83a 	callr	r2
   1fcbc:	e0bffc17 	ldw	r2,-16(fp)
   1fcc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fcc4:	e0bffe17 	ldw	r2,-8(fp)
   1fcc8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   1fccc:	0001883a 	nop
   1fcd0:	0001883a 	nop
}
   1fcd4:	e037883a 	mov	sp,fp
   1fcd8:	dfc00117 	ldw	ra,4(sp)
   1fcdc:	df000017 	ldw	fp,0(sp)
   1fce0:	dec00204 	addi	sp,sp,8
   1fce4:	f800283a 	ret

0001fce8 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   1fce8:	defffb04 	addi	sp,sp,-20
   1fcec:	df000415 	stw	fp,16(sp)
   1fcf0:	df000404 	addi	fp,sp,16
   1fcf4:	e13ffc15 	stw	r4,-16(fp)
   1fcf8:	e17ffd15 	stw	r5,-12(fp)
   1fcfc:	e1bffe15 	stw	r6,-8(fp)
   1fd00:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   1fd04:	e0bffc17 	ldw	r2,-16(fp)
   1fd08:	e0fffd17 	ldw	r3,-12(fp)
   1fd0c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   1fd10:	e0bffc17 	ldw	r2,-16(fp)
   1fd14:	e0ffff17 	ldw	r3,-4(fp)
   1fd18:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   1fd1c:	e0bffc17 	ldw	r2,-16(fp)
   1fd20:	e0fffe17 	ldw	r3,-8(fp)
   1fd24:	10c00815 	stw	r3,32(r2)

    return ;
   1fd28:	0001883a 	nop
}
   1fd2c:	e037883a 	mov	sp,fp
   1fd30:	df000017 	ldw	fp,0(sp)
   1fd34:	dec00104 	addi	sp,sp,4
   1fd38:	f800283a 	ret

0001fd3c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   1fd3c:	defff704 	addi	sp,sp,-36
   1fd40:	dfc00815 	stw	ra,32(sp)
   1fd44:	df000715 	stw	fp,28(sp)
   1fd48:	df000704 	addi	fp,sp,28
   1fd4c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   1fd50:	e13fff17 	ldw	r4,-4(fp)
   1fd54:	001ff000 	call	1ff00 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1fd58:	014007c4 	movi	r5,31
   1fd5c:	e13fff17 	ldw	r4,-4(fp)
   1fd60:	00214900 	call	21490 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1fd64:	01400704 	movi	r5,28
   1fd68:	e13fff17 	ldw	r4,-4(fp)
   1fd6c:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   1fd70:	014000c4 	movi	r5,3
   1fd74:	e13fff17 	ldw	r4,-4(fp)
   1fd78:	002169c0 	call	2169c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   1fd7c:	014000c4 	movi	r5,3
   1fd80:	e13fff17 	ldw	r4,-4(fp)
   1fd84:	00215ec0 	call	215ec <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1fd88:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   1fd8c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   1fd90:	e0bffb04 	addi	r2,fp,-20
   1fd94:	018000b4 	movhi	r6,2
   1fd98:	31a1a804 	addi	r6,r6,-31072
   1fd9c:	100b883a 	mov	r5,r2
   1fda0:	e13fff17 	ldw	r4,-4(fp)
   1fda4:	002015c0 	call	2015c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1fda8:	e0bffb04 	addi	r2,fp,-20
   1fdac:	100b883a 	mov	r5,r2
   1fdb0:	e13fff17 	ldw	r4,-4(fp)
   1fdb4:	001fffc0 	call	1fffc <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   1fdb8:	d165bd04 	addi	r5,gp,-26892
   1fdbc:	e13fff17 	ldw	r4,-4(fp)
   1fdc0:	002273c0 	call	2273c <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1fdc4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   1fdc8:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   1fdcc:	e0bffa17 	ldw	r2,-24(fp)
   1fdd0:	10000c1e 	bne	r2,zero,1fe04 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   1fdd4:	e0bfff17 	ldw	r2,-4(fp)
   1fdd8:	10c00417 	ldw	r3,16(r2)
   1fddc:	e0bfff17 	ldw	r2,-4(fp)
   1fde0:	10800517 	ldw	r2,20(r2)
   1fde4:	d8000015 	stw	zero,0(sp)
   1fde8:	e1ffff17 	ldw	r7,-4(fp)
   1fdec:	018000b4 	movhi	r6,2
   1fdf0:	31bf1304 	addi	r6,r6,-948
   1fdf4:	100b883a 	mov	r5,r2
   1fdf8:	1809883a 	mov	r4,r3
   1fdfc:	00229500 	call	22950 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   1fe00:	00000406 	br	1fe14 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   1fe04:	010000f4 	movhi	r4,3
   1fe08:	212ad904 	addi	r4,r4,-21660
   1fe0c:	0022fd40 	call	22fd4 <alt_printf>
    }

    return;
   1fe10:	0001883a 	nop

}
   1fe14:	e037883a 	mov	sp,fp
   1fe18:	dfc00117 	ldw	ra,4(sp)
   1fe1c:	df000017 	ldw	fp,0(sp)
   1fe20:	dec00204 	addi	sp,sp,8
   1fe24:	f800283a 	ret

0001fe28 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1fe28:	defffc04 	addi	sp,sp,-16
   1fe2c:	dfc00315 	stw	ra,12(sp)
   1fe30:	df000215 	stw	fp,8(sp)
   1fe34:	df000204 	addi	fp,sp,8
   1fe38:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   1fe3c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   1fe40:	d165bd04 	addi	r5,gp,-26892
   1fe44:	e13fff17 	ldw	r4,-4(fp)
   1fe48:	00228a00 	call	228a0 <alt_find_dev>
   1fe4c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   1fe50:	e0bffe17 	ldw	r2,-8(fp)
}
   1fe54:	e037883a 	mov	sp,fp
   1fe58:	dfc00117 	ldw	ra,4(sp)
   1fe5c:	df000017 	ldw	fp,0(sp)
   1fe60:	dec00204 	addi	sp,sp,8
   1fe64:	f800283a 	ret

0001fe68 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1fe68:	defffc04 	addi	sp,sp,-16
   1fe6c:	df000315 	stw	fp,12(sp)
   1fe70:	df000304 	addi	fp,sp,12
   1fe74:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1fe78:	e0bfff17 	ldw	r2,-4(fp)
   1fe7c:	10800717 	ldw	r2,28(r2)
   1fe80:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1fe84:	e0bfff17 	ldw	r2,-4(fp)
   1fe88:	10800317 	ldw	r2,12(r2)
   1fe8c:	10800204 	addi	r2,r2,8
   1fe90:	10800037 	ldwio	r2,0(r2)
   1fe94:	1080004c 	andi	r2,r2,1
   1fe98:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   1fe9c:	e0bffe17 	ldw	r2,-8(fp)
   1fea0:	10000226 	beq	r2,zero,1feac <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   1fea4:	00bffe44 	movi	r2,-7
   1fea8:	00001106 	br	1fef0 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   1feac:	e0bfff17 	ldw	r2,-4(fp)
   1feb0:	10c00617 	ldw	r3,24(r2)
   1feb4:	008000b4 	movhi	r2,2
   1feb8:	10bebb04 	addi	r2,r2,-1300
   1febc:	1880021e 	bne	r3,r2,1fec8 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   1fec0:	e0bffd17 	ldw	r2,-12(fp)
   1fec4:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   1fec8:	e0bfff17 	ldw	r2,-4(fp)
   1fecc:	10800317 	ldw	r2,12(r2)
   1fed0:	10800204 	addi	r2,r2,8
   1fed4:	e0ffff17 	ldw	r3,-4(fp)
   1fed8:	18c00317 	ldw	r3,12(r3)
   1fedc:	18c00204 	addi	r3,r3,8
   1fee0:	18c00037 	ldwio	r3,0(r3)
   1fee4:	18c00054 	ori	r3,r3,1
   1fee8:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   1feec:	0005883a 	mov	r2,zero
}
   1fef0:	e037883a 	mov	sp,fp
   1fef4:	df000017 	ldw	fp,0(sp)
   1fef8:	dec00104 	addi	sp,sp,4
   1fefc:	f800283a 	ret

0001ff00 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1ff00:	defffe04 	addi	sp,sp,-8
   1ff04:	df000115 	stw	fp,4(sp)
   1ff08:	df000104 	addi	fp,sp,4
   1ff0c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   1ff10:	e0bfff17 	ldw	r2,-4(fp)
   1ff14:	10800317 	ldw	r2,12(r2)
   1ff18:	10800204 	addi	r2,r2,8
   1ff1c:	e0ffff17 	ldw	r3,-4(fp)
   1ff20:	18c00317 	ldw	r3,12(r3)
   1ff24:	18c00204 	addi	r3,r3,8
   1ff28:	19000037 	ldwio	r4,0(r3)
   1ff2c:	00ffff84 	movi	r3,-2
   1ff30:	20c6703a 	and	r3,r4,r3
   1ff34:	10c00035 	stwio	r3,0(r2)

}
   1ff38:	0001883a 	nop
   1ff3c:	e037883a 	mov	sp,fp
   1ff40:	df000017 	ldw	fp,0(sp)
   1ff44:	dec00104 	addi	sp,sp,4
   1ff48:	f800283a 	ret

0001ff4c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1ff4c:	defffd04 	addi	sp,sp,-12
   1ff50:	df000215 	stw	fp,8(sp)
   1ff54:	df000204 	addi	fp,sp,8
   1ff58:	e13ffe15 	stw	r4,-8(fp)
   1ff5c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   1ff60:	e0bffe17 	ldw	r2,-8(fp)
   1ff64:	10c00d17 	ldw	r3,52(r2)
   1ff68:	e0bfff17 	ldw	r2,-4(fp)
   1ff6c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   1ff70:	e0bffe17 	ldw	r2,-8(fp)
   1ff74:	10800317 	ldw	r2,12(r2)
   1ff78:	10800204 	addi	r2,r2,8
   1ff7c:	10800037 	ldwio	r2,0(r2)
   1ff80:	1080008c 	andi	r2,r2,2
   1ff84:	1005d07a 	srai	r2,r2,1
   1ff88:	1007883a 	mov	r3,r2
   1ff8c:	e0bfff17 	ldw	r2,-4(fp)
   1ff90:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   1ff94:	e0bffe17 	ldw	r2,-8(fp)
   1ff98:	10800317 	ldw	r2,12(r2)
   1ff9c:	10800904 	addi	r2,r2,36
   1ffa0:	10800037 	ldwio	r2,0(r2)
   1ffa4:	1007883a 	mov	r3,r2
   1ffa8:	e0bfff17 	ldw	r2,-4(fp)
   1ffac:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   1ffb0:	e0bffe17 	ldw	r2,-8(fp)
   1ffb4:	10800317 	ldw	r2,12(r2)
   1ffb8:	10800804 	addi	r2,r2,32
   1ffbc:	10800037 	ldwio	r2,0(r2)
   1ffc0:	1007883a 	mov	r3,r2
   1ffc4:	e0bfff17 	ldw	r2,-4(fp)
   1ffc8:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   1ffcc:	e0bffe17 	ldw	r2,-8(fp)
   1ffd0:	10800317 	ldw	r2,12(r2)
   1ffd4:	10800a04 	addi	r2,r2,40
   1ffd8:	10800037 	ldwio	r2,0(r2)
   1ffdc:	1007883a 	mov	r3,r2
   1ffe0:	e0bfff17 	ldw	r2,-4(fp)
   1ffe4:	10c0030d 	sth	r3,12(r2)
}
   1ffe8:	0001883a 	nop
   1ffec:	e037883a 	mov	sp,fp
   1fff0:	df000017 	ldw	fp,0(sp)
   1fff4:	dec00104 	addi	sp,sp,4
   1fff8:	f800283a 	ret

0001fffc <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   1fffc:	defffd04 	addi	sp,sp,-12
   20000:	df000215 	stw	fp,8(sp)
   20004:	df000204 	addi	fp,sp,8
   20008:	e13ffe15 	stw	r4,-8(fp)
   2000c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   20010:	e0bfff17 	ldw	r2,-4(fp)
   20014:	10c00017 	ldw	r3,0(r2)
   20018:	e0bffe17 	ldw	r2,-8(fp)
   2001c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   20020:	e0bffe17 	ldw	r2,-8(fp)
   20024:	10800317 	ldw	r2,12(r2)
   20028:	10c00204 	addi	r3,r2,8
   2002c:	e0bffe17 	ldw	r2,-8(fp)
   20030:	10800317 	ldw	r2,12(r2)
   20034:	10800204 	addi	r2,r2,8
   20038:	10800037 	ldwio	r2,0(r2)
   2003c:	1009883a 	mov	r4,r2
   20040:	00bfff44 	movi	r2,-3
   20044:	2088703a 	and	r4,r4,r2
   20048:	e0bfff17 	ldw	r2,-4(fp)
   2004c:	10800117 	ldw	r2,4(r2)
   20050:	1085883a 	add	r2,r2,r2
   20054:	1080008c 	andi	r2,r2,2
   20058:	2084b03a 	or	r2,r4,r2
   2005c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   20060:	e0bffe17 	ldw	r2,-8(fp)
   20064:	10800317 	ldw	r2,12(r2)
   20068:	10800904 	addi	r2,r2,36
   2006c:	e0ffff17 	ldw	r3,-4(fp)
   20070:	18c0020b 	ldhu	r3,8(r3)
   20074:	18ffffcc 	andi	r3,r3,65535
   20078:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   2007c:	e0bffe17 	ldw	r2,-8(fp)
   20080:	10800317 	ldw	r2,12(r2)
   20084:	10800804 	addi	r2,r2,32
   20088:	e0ffff17 	ldw	r3,-4(fp)
   2008c:	18c0028b 	ldhu	r3,10(r3)
   20090:	18ffffcc 	andi	r3,r3,65535
   20094:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   20098:	e0bffe17 	ldw	r2,-8(fp)
   2009c:	10800317 	ldw	r2,12(r2)
   200a0:	10800a04 	addi	r2,r2,40
   200a4:	e0ffff17 	ldw	r3,-4(fp)
   200a8:	18c0030b 	ldhu	r3,12(r3)
   200ac:	18ffffcc 	andi	r3,r3,65535
   200b0:	10c00035 	stwio	r3,0(r2)
}
   200b4:	0001883a 	nop
   200b8:	e037883a 	mov	sp,fp
   200bc:	df000017 	ldw	fp,0(sp)
   200c0:	dec00104 	addi	sp,sp,4
   200c4:	f800283a 	ret

000200c8 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   200c8:	defffb04 	addi	sp,sp,-20
   200cc:	dfc00415 	stw	ra,16(sp)
   200d0:	df000315 	stw	fp,12(sp)
   200d4:	df000304 	addi	fp,sp,12
   200d8:	e13ffd15 	stw	r4,-12(fp)
   200dc:	e17ffe15 	stw	r5,-8(fp)
   200e0:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   200e4:	e0bffe17 	ldw	r2,-8(fp)
   200e8:	1080028b 	ldhu	r2,10(r2)
   200ec:	10bfffcc 	andi	r2,r2,65535
   200f0:	10000426 	beq	r2,zero,20104 <alt_avalon_i2c_master_config_speed_get+0x3c>
   200f4:	e0bffe17 	ldw	r2,-8(fp)
   200f8:	1080020b 	ldhu	r2,8(r2)
   200fc:	10bfffcc 	andi	r2,r2,65535
   20100:	1000021e 	bne	r2,zero,2010c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   20104:	00bfff44 	movi	r2,-3
   20108:	00000f06 	br	20148 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   2010c:	e0bffd17 	ldw	r2,-12(fp)
   20110:	11000c17 	ldw	r4,48(r2)
   20114:	e0bffe17 	ldw	r2,-8(fp)
   20118:	1080028b 	ldhu	r2,10(r2)
   2011c:	10ffffcc 	andi	r3,r2,65535
   20120:	e0bffe17 	ldw	r2,-8(fp)
   20124:	1080020b 	ldhu	r2,8(r2)
   20128:	10bfffcc 	andi	r2,r2,65535
   2012c:	1885883a 	add	r2,r3,r2
   20130:	100b883a 	mov	r5,r2
   20134:	000ccec0 	call	ccec <__udivsi3>
   20138:	1007883a 	mov	r3,r2
   2013c:	e0bfff17 	ldw	r2,-4(fp)
   20140:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20144:	0005883a 	mov	r2,zero
}
   20148:	e037883a 	mov	sp,fp
   2014c:	dfc00117 	ldw	ra,4(sp)
   20150:	df000017 	ldw	fp,0(sp)
   20154:	dec00204 	addi	sp,sp,8
   20158:	f800283a 	ret

0002015c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   2015c:	defff904 	addi	sp,sp,-28
   20160:	dfc00615 	stw	ra,24(sp)
   20164:	df000515 	stw	fp,20(sp)
   20168:	df000504 	addi	fp,sp,20
   2016c:	e13ffd15 	stw	r4,-12(fp)
   20170:	e17ffe15 	stw	r5,-8(fp)
   20174:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   20178:	e0ffff17 	ldw	r3,-4(fp)
   2017c:	008001b4 	movhi	r2,6
   20180:	1086a004 	addi	r2,r2,6784
   20184:	10c00436 	bltu	r2,r3,20198 <alt_avalon_i2c_master_config_speed_set+0x3c>
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	10000226 	beq	r2,zero,20198 <alt_avalon_i2c_master_config_speed_set+0x3c>
   20190:	e0bfff17 	ldw	r2,-4(fp)
   20194:	1000021e 	bne	r2,zero,201a0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   20198:	00bfff04 	movi	r2,-4
   2019c:	00002906 	br	20244 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   201a0:	e0bffd17 	ldw	r2,-12(fp)
   201a4:	10c00c17 	ldw	r3,48(r2)
   201a8:	e0bfff17 	ldw	r2,-4(fp)
   201ac:	1085883a 	add	r2,r2,r2
   201b0:	100b883a 	mov	r5,r2
   201b4:	1809883a 	mov	r4,r3
   201b8:	000ccec0 	call	ccec <__udivsi3>
   201bc:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   201c0:	e0bffb17 	ldw	r2,-20(fp)
   201c4:	10800f04 	addi	r2,r2,60
   201c8:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   201cc:	e0bffb17 	ldw	r2,-20(fp)
   201d0:	10bff104 	addi	r2,r2,-60
   201d4:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   201d8:	e0ffff17 	ldw	r3,-4(fp)
   201dc:	008000b4 	movhi	r2,2
   201e0:	10a1a804 	addi	r2,r2,-31072
   201e4:	10c0042e 	bgeu	r2,r3,201f8 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   201e8:	e0bffe17 	ldw	r2,-8(fp)
   201ec:	00c00044 	movi	r3,1
   201f0:	10c00115 	stw	r3,4(r2)
   201f4:	00000206 	br	20200 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   201f8:	e0bffe17 	ldw	r2,-8(fp)
   201fc:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   20200:	e0bffb17 	ldw	r2,-20(fp)
   20204:	1007883a 	mov	r3,r2
   20208:	e0bffe17 	ldw	r2,-8(fp)
   2020c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   20210:	e0bffc17 	ldw	r2,-16(fp)
   20214:	1007883a 	mov	r3,r2
   20218:	e0bffe17 	ldw	r2,-8(fp)
   2021c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   20220:	e0bffb17 	ldw	r2,-20(fp)
   20224:	1007883a 	mov	r3,r2
   20228:	e0bffb17 	ldw	r2,-20(fp)
   2022c:	1004d07a 	srli	r2,r2,1
   20230:	1885c83a 	sub	r2,r3,r2
   20234:	1007883a 	mov	r3,r2
   20238:	e0bffe17 	ldw	r2,-8(fp)
   2023c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   20240:	0005883a 	mov	r2,zero

}
   20244:	e037883a 	mov	sp,fp
   20248:	dfc00117 	ldw	ra,4(sp)
   2024c:	df000017 	ldw	fp,0(sp)
   20250:	dec00204 	addi	sp,sp,8
   20254:	f800283a 	ret

00020258 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20258:	defffe04 	addi	sp,sp,-8
   2025c:	df000115 	stw	fp,4(sp)
   20260:	df000104 	addi	fp,sp,4
   20264:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   20268:	e0bfff17 	ldw	r2,-4(fp)
   2026c:	10800317 	ldw	r2,12(r2)
   20270:	10800504 	addi	r2,r2,20
   20274:	10800037 	ldwio	r2,0(r2)
   20278:	1080004c 	andi	r2,r2,1
   2027c:	10000226 	beq	r2,zero,20288 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   20280:	00800044 	movi	r2,1
   20284:	00000106 	br	2028c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   20288:	0005883a 	mov	r2,zero
}
   2028c:	e037883a 	mov	sp,fp
   20290:	df000017 	ldw	fp,0(sp)
   20294:	dec00104 	addi	sp,sp,4
   20298:	f800283a 	ret

0002029c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   2029c:	defffb04 	addi	sp,sp,-20
   202a0:	df000415 	stw	fp,16(sp)
   202a4:	df000404 	addi	fp,sp,16
   202a8:	e13ffc15 	stw	r4,-16(fp)
   202ac:	e17ffd15 	stw	r5,-12(fp)
   202b0:	e1bffe15 	stw	r6,-8(fp)
   202b4:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   202b8:	e0bfff17 	ldw	r2,-4(fp)
   202bc:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   202c0:	00001406 	br	20314 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   202c4:	e0bfff17 	ldw	r2,-4(fp)
   202c8:	10800017 	ldw	r2,0(r2)
   202cc:	e0fffd17 	ldw	r3,-12(fp)
   202d0:	1885883a 	add	r2,r3,r2
   202d4:	e0fffc17 	ldw	r3,-16(fp)
   202d8:	18c00317 	ldw	r3,12(r3)
   202dc:	18c00104 	addi	r3,r3,4
   202e0:	18c00037 	ldwio	r3,0(r3)
   202e4:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   202e8:	e0bfff17 	ldw	r2,-4(fp)
   202ec:	10800017 	ldw	r2,0(r2)
   202f0:	10c00044 	addi	r3,r2,1
   202f4:	e0bfff17 	ldw	r2,-4(fp)
   202f8:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   202fc:	e0bfff17 	ldw	r2,-4(fp)
   20300:	10c00017 	ldw	r3,0(r2)
   20304:	e0bffe17 	ldw	r2,-8(fp)
   20308:	1880021e 	bne	r3,r2,20314 <alt_avalon_i2c_rx_read_available+0x78>
   2030c:	e0bffe17 	ldw	r2,-8(fp)
   20310:	1000061e 	bne	r2,zero,2032c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   20314:	e0bffc17 	ldw	r2,-16(fp)
   20318:	10800317 	ldw	r2,12(r2)
   2031c:	10800704 	addi	r2,r2,28
   20320:	10800037 	ldwio	r2,0(r2)
   20324:	103fe71e 	bne	r2,zero,202c4 <__alt_data_end+0xfc0202c4>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   20328:	00000106 	br	20330 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2032c:	0001883a 	nop
    }
}
   20330:	0001883a 	nop
   20334:	e037883a 	mov	sp,fp
   20338:	df000017 	ldw	fp,0(sp)
   2033c:	dec00104 	addi	sp,sp,4
   20340:	f800283a 	ret

00020344 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   20344:	defffa04 	addi	sp,sp,-24
   20348:	dfc00515 	stw	ra,20(sp)
   2034c:	df000415 	stw	fp,16(sp)
   20350:	df000404 	addi	fp,sp,16
   20354:	e13ffe15 	stw	r4,-8(fp)
   20358:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   2035c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   20360:	008000b4 	movhi	r2,2
   20364:	10a1a804 	addi	r2,r2,-31072
   20368:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2036c:	00000d06 	br	203a4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   20370:	e0bffd17 	ldw	r2,-12(fp)
   20374:	108002a8 	cmpgeui	r2,r2,10
   20378:	1000021e 	bne	r2,zero,20384 <alt_avalon_i2c_rx_read+0x40>
   2037c:	0109c404 	movi	r4,10000
   20380:	00225880 	call	22588 <alt_busy_sleep>
      if (--timeout == 0)
   20384:	e0bffd17 	ldw	r2,-12(fp)
   20388:	10bfffc4 	addi	r2,r2,-1
   2038c:	e0bffd15 	stw	r2,-12(fp)
   20390:	e0bffd17 	ldw	r2,-12(fp)
   20394:	1000031e 	bne	r2,zero,203a4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   20398:	00bfff84 	movi	r2,-2
   2039c:	e0bffc15 	stw	r2,-16(fp)
        break;
   203a0:	00000506 	br	203b8 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   203a4:	e0bffe17 	ldw	r2,-8(fp)
   203a8:	10800317 	ldw	r2,12(r2)
   203ac:	10800704 	addi	r2,r2,28
   203b0:	10800037 	ldwio	r2,0(r2)
   203b4:	103fee26 	beq	r2,zero,20370 <__alt_data_end+0xfc020370>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   203b8:	e0bffe17 	ldw	r2,-8(fp)
   203bc:	10800317 	ldw	r2,12(r2)
   203c0:	10800104 	addi	r2,r2,4
   203c4:	10800037 	ldwio	r2,0(r2)
   203c8:	1007883a 	mov	r3,r2
   203cc:	e0bfff17 	ldw	r2,-4(fp)
   203d0:	10c00005 	stb	r3,0(r2)
        
    return status;
   203d4:	e0bffc17 	ldw	r2,-16(fp)
}
   203d8:	e037883a 	mov	sp,fp
   203dc:	dfc00117 	ldw	ra,4(sp)
   203e0:	df000017 	ldw	fp,0(sp)
   203e4:	dec00204 	addi	sp,sp,8
   203e8:	f800283a 	ret

000203ec <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   203ec:	defff804 	addi	sp,sp,-32
   203f0:	dfc00715 	stw	ra,28(sp)
   203f4:	df000615 	stw	fp,24(sp)
   203f8:	df000604 	addi	fp,sp,24
   203fc:	e13ffc15 	stw	r4,-16(fp)
   20400:	2809883a 	mov	r4,r5
   20404:	3007883a 	mov	r3,r6
   20408:	3805883a 	mov	r2,r7
   2040c:	e13ffd05 	stb	r4,-12(fp)
   20410:	e0fffe05 	stb	r3,-8(fp)
   20414:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   20418:	0089c404 	movi	r2,10000
   2041c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20420:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   20424:	00000c06 	br	20458 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   20428:	e0bffa17 	ldw	r2,-24(fp)
   2042c:	108002a8 	cmpgeui	r2,r2,10
   20430:	1000021e 	bne	r2,zero,2043c <alt_avalon_i2c_cmd_write+0x50>
   20434:	0109c404 	movi	r4,10000
   20438:	00225880 	call	22588 <alt_busy_sleep>
      if (--timeout == 0)
   2043c:	e0bffa17 	ldw	r2,-24(fp)
   20440:	10bfffc4 	addi	r2,r2,-1
   20444:	e0bffa15 	stw	r2,-24(fp)
   20448:	e0bffa17 	ldw	r2,-24(fp)
   2044c:	1000021e 	bne	r2,zero,20458 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   20450:	00bfff84 	movi	r2,-2
   20454:	00001906 	br	204bc <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   20458:	e0bffc17 	ldw	r2,-16(fp)
   2045c:	10800317 	ldw	r2,12(r2)
   20460:	10800404 	addi	r2,r2,16
   20464:	10800037 	ldwio	r2,0(r2)
   20468:	1080004c 	andi	r2,r2,1
   2046c:	103fee26 	beq	r2,zero,20428 <__alt_data_end+0xfc020428>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   20470:	e0bffc17 	ldw	r2,-16(fp)
   20474:	10800317 	ldw	r2,12(r2)
   20478:	e13ffd03 	ldbu	r4,-12(fp)
   2047c:	e0fffe03 	ldbu	r3,-8(fp)
   20480:	1806927a 	slli	r3,r3,9
   20484:	20c8b03a 	or	r4,r4,r3
   20488:	e0ffff03 	ldbu	r3,-4(fp)
   2048c:	1806923a 	slli	r3,r3,8
   20490:	20c6b03a 	or	r3,r4,r3
   20494:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   20498:	e0bffb04 	addi	r2,fp,-20
   2049c:	100b883a 	mov	r5,r2
   204a0:	e13ffc17 	ldw	r4,-16(fp)
   204a4:	002062c0 	call	2062c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   204a8:	e0bffb04 	addi	r2,fp,-20
   204ac:	100b883a 	mov	r5,r2
   204b0:	e13ffc17 	ldw	r4,-16(fp)
   204b4:	00206780 	call	20678 <alt_avalon_i2c_check_arblost>
    
    return status;
   204b8:	e0bffb17 	ldw	r2,-20(fp)
}
   204bc:	e037883a 	mov	sp,fp
   204c0:	dfc00117 	ldw	ra,4(sp)
   204c4:	df000017 	ldw	fp,0(sp)
   204c8:	dec00204 	addi	sp,sp,8
   204cc:	f800283a 	ret

000204d0 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   204d0:	defffa04 	addi	sp,sp,-24
   204d4:	dfc00515 	stw	ra,20(sp)
   204d8:	df000415 	stw	fp,16(sp)
   204dc:	df000404 	addi	fp,sp,16
   204e0:	e13ffd15 	stw	r4,-12(fp)
   204e4:	e17ffe15 	stw	r5,-8(fp)
   204e8:	3005883a 	mov	r2,r6
   204ec:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   204f0:	e0bffd17 	ldw	r2,-12(fp)
   204f4:	10800d17 	ldw	r2,52(r2)
   204f8:	10800058 	cmpnei	r2,r2,1
   204fc:	10001c1e 	bne	r2,zero,20570 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   20500:	e0bffd17 	ldw	r2,-12(fp)
   20504:	10800917 	ldw	r2,36(r2)
   20508:	109e0014 	ori	r2,r2,30720
   2050c:	1004d1fa 	srli	r2,r2,7
   20510:	1007883a 	mov	r3,r2
   20514:	00bfff84 	movi	r2,-2
   20518:	1884703a 	and	r2,r3,r2
   2051c:	1007883a 	mov	r3,r2
   20520:	e0bffe17 	ldw	r2,-8(fp)
   20524:	1884b03a 	or	r2,r3,r2
   20528:	10803fcc 	andi	r2,r2,255
   2052c:	e0ffff03 	ldbu	r3,-4(fp)
   20530:	000f883a 	mov	r7,zero
   20534:	180d883a 	mov	r6,r3
   20538:	100b883a 	mov	r5,r2
   2053c:	e13ffd17 	ldw	r4,-12(fp)
   20540:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   20544:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   20548:	e0bffd17 	ldw	r2,-12(fp)
   2054c:	10800917 	ldw	r2,36(r2)
   20550:	10803fcc 	andi	r2,r2,255
   20554:	000f883a 	mov	r7,zero
   20558:	000d883a 	mov	r6,zero
   2055c:	100b883a 	mov	r5,r2
   20560:	e13ffd17 	ldw	r4,-12(fp)
   20564:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   20568:	e0bffc15 	stw	r2,-16(fp)
   2056c:	00000e06 	br	205a8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   20570:	e0bffd17 	ldw	r2,-12(fp)
   20574:	10800917 	ldw	r2,36(r2)
   20578:	1085883a 	add	r2,r2,r2
   2057c:	1007883a 	mov	r3,r2
   20580:	e0bffe17 	ldw	r2,-8(fp)
   20584:	1884b03a 	or	r2,r3,r2
   20588:	10803fcc 	andi	r2,r2,255
   2058c:	e0ffff03 	ldbu	r3,-4(fp)
   20590:	000f883a 	mov	r7,zero
   20594:	180d883a 	mov	r6,r3
   20598:	100b883a 	mov	r5,r2
   2059c:	e13ffd17 	ldw	r4,-12(fp)
   205a0:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   205a4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   205a8:	e0bffc17 	ldw	r2,-16(fp)
}
   205ac:	e037883a 	mov	sp,fp
   205b0:	dfc00117 	ldw	ra,4(sp)
   205b4:	df000017 	ldw	fp,0(sp)
   205b8:	dec00204 	addi	sp,sp,8
   205bc:	f800283a 	ret

000205c0 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   205c0:	defffd04 	addi	sp,sp,-12
   205c4:	df000215 	stw	fp,8(sp)
   205c8:	df000204 	addi	fp,sp,8
   205cc:	e13ffe15 	stw	r4,-8(fp)
   205d0:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   205d4:	e0bffe17 	ldw	r2,-8(fp)
   205d8:	10c00917 	ldw	r3,36(r2)
   205dc:	e0bfff17 	ldw	r2,-4(fp)
   205e0:	10c00015 	stw	r3,0(r2)
}
   205e4:	0001883a 	nop
   205e8:	e037883a 	mov	sp,fp
   205ec:	df000017 	ldw	fp,0(sp)
   205f0:	dec00104 	addi	sp,sp,4
   205f4:	f800283a 	ret

000205f8 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   205f8:	defffd04 	addi	sp,sp,-12
   205fc:	df000215 	stw	fp,8(sp)
   20600:	df000204 	addi	fp,sp,8
   20604:	e13ffe15 	stw	r4,-8(fp)
   20608:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   2060c:	e0bffe17 	ldw	r2,-8(fp)
   20610:	e0ffff17 	ldw	r3,-4(fp)
   20614:	10c00915 	stw	r3,36(r2)
}
   20618:	0001883a 	nop
   2061c:	e037883a 	mov	sp,fp
   20620:	df000017 	ldw	fp,0(sp)
   20624:	dec00104 	addi	sp,sp,4
   20628:	f800283a 	ret

0002062c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   2062c:	defffd04 	addi	sp,sp,-12
   20630:	df000215 	stw	fp,8(sp)
   20634:	df000204 	addi	fp,sp,8
   20638:	e13ffe15 	stw	r4,-8(fp)
   2063c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	10800317 	ldw	r2,12(r2)
   20648:	10800404 	addi	r2,r2,16
   2064c:	10800037 	ldwio	r2,0(r2)
   20650:	1080010c 	andi	r2,r2,4
   20654:	10000326 	beq	r2,zero,20664 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   20658:	e0bfff17 	ldw	r2,-4(fp)
   2065c:	00fffec4 	movi	r3,-5
   20660:	10c00015 	stw	r3,0(r2)
    }
}
   20664:	0001883a 	nop
   20668:	e037883a 	mov	sp,fp
   2066c:	df000017 	ldw	fp,0(sp)
   20670:	dec00104 	addi	sp,sp,4
   20674:	f800283a 	ret

00020678 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   20678:	defffd04 	addi	sp,sp,-12
   2067c:	df000215 	stw	fp,8(sp)
   20680:	df000204 	addi	fp,sp,8
   20684:	e13ffe15 	stw	r4,-8(fp)
   20688:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   2068c:	e0bffe17 	ldw	r2,-8(fp)
   20690:	10800317 	ldw	r2,12(r2)
   20694:	10800404 	addi	r2,r2,16
   20698:	10800037 	ldwio	r2,0(r2)
   2069c:	1080020c 	andi	r2,r2,8
   206a0:	10000326 	beq	r2,zero,206b0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   206a4:	e0bfff17 	ldw	r2,-4(fp)
   206a8:	00fffe84 	movi	r3,-6
   206ac:	10c00015 	stw	r3,0(r2)
    }
}
   206b0:	0001883a 	nop
   206b4:	e037883a 	mov	sp,fp
   206b8:	df000017 	ldw	fp,0(sp)
   206bc:	dec00104 	addi	sp,sp,4
   206c0:	f800283a 	ret

000206c4 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   206c4:	defff804 	addi	sp,sp,-32
   206c8:	dfc00715 	stw	ra,28(sp)
   206cc:	df000615 	stw	fp,24(sp)
   206d0:	df000604 	addi	fp,sp,24
   206d4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   206d8:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   206dc:	e0bfff17 	ldw	r2,-4(fp)
   206e0:	10800717 	ldw	r2,28(r2)
   206e4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   206e8:	e0bffb17 	ldw	r2,-20(fp)
   206ec:	10800117 	ldw	r2,4(r2)
   206f0:	10800044 	addi	r2,r2,1
   206f4:	0149c404 	movi	r5,10000
   206f8:	1009883a 	mov	r4,r2
   206fc:	000cda80 	call	cda8 <__mulsi3>
   20700:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   20704:	e0bffd04 	addi	r2,fp,-12
   20708:	100b883a 	mov	r5,r2
   2070c:	e13fff17 	ldw	r4,-4(fp)
   20710:	002155c0 	call	2155c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   20714:	e0bffd17 	ldw	r2,-12(fp)
   20718:	100b883a 	mov	r5,r2
   2071c:	e13fff17 	ldw	r4,-4(fp)
   20720:	00214900 	call	21490 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   20724:	e0bffc04 	addi	r2,fp,-16
   20728:	100b883a 	mov	r5,r2
   2072c:	e13fff17 	ldw	r4,-4(fp)
   20730:	002062c0 	call	2062c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   20734:	e0bffc17 	ldw	r2,-16(fp)
   20738:	10002226 	beq	r2,zero,207c4 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   2073c:	e0bffb17 	ldw	r2,-20(fp)
   20740:	10800217 	ldw	r2,8(r2)
   20744:	10001d26 	beq	r2,zero,207bc <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20748:	00000d06 	br	20780 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   2074c:	e0bffa17 	ldw	r2,-24(fp)
   20750:	108002a8 	cmpgeui	r2,r2,10
   20754:	1000021e 	bne	r2,zero,20760 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   20758:	0109c404 	movi	r4,10000
   2075c:	00225880 	call	22588 <alt_busy_sleep>
              if (--timeout == 0)
   20760:	e0bffa17 	ldw	r2,-24(fp)
   20764:	10bfffc4 	addi	r2,r2,-1
   20768:	e0bffa15 	stw	r2,-24(fp)
   2076c:	e0bffa17 	ldw	r2,-24(fp)
   20770:	1000031e 	bne	r2,zero,20780 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   20774:	00bfff84 	movi	r2,-2
   20778:	e0bffc15 	stw	r2,-16(fp)
                 break;
   2077c:	00000306 	br	2078c <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   20780:	e13fff17 	ldw	r4,-4(fp)
   20784:	00202580 	call	20258 <alt_avalon_i2c_is_busy>
   20788:	103ff01e 	bne	r2,zero,2074c <__alt_data_end+0xfc02074c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   2078c:	e0bffb17 	ldw	r2,-20(fp)
   20790:	10800017 	ldw	r2,0(r2)
   20794:	e0fffe04 	addi	r3,fp,-8
   20798:	180f883a 	mov	r7,r3
   2079c:	000d883a 	mov	r6,zero
   207a0:	100b883a 	mov	r5,r2
   207a4:	e13fff17 	ldw	r4,-4(fp)
   207a8:	002029c0 	call	2029c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   207ac:	e13fff17 	ldw	r4,-4(fp)
   207b0:	001ff000 	call	1ff00 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   207b4:	e0bffb17 	ldw	r2,-20(fp)
   207b8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   207bc:	e0bffc17 	ldw	r2,-16(fp)
   207c0:	00000a06 	br	207ec <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   207c4:	e0bffb17 	ldw	r2,-20(fp)
   207c8:	10800217 	ldw	r2,8(r2)
   207cc:	10000626 	beq	r2,zero,207e8 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   207d0:	e0bffd17 	ldw	r2,-12(fp)
   207d4:	100b883a 	mov	r5,r2
   207d8:	e13fff17 	ldw	r4,-4(fp)
   207dc:	00214f80 	call	214f8 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   207e0:	00bffe44 	movi	r2,-7
   207e4:	00000106 	br	207ec <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   207e8:	0005883a 	mov	r2,zero
}
   207ec:	e037883a 	mov	sp,fp
   207f0:	dfc00117 	ldw	ra,4(sp)
   207f4:	df000017 	ldw	fp,0(sp)
   207f8:	dec00204 	addi	sp,sp,8
   207fc:	f800283a 	ret

00020800 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   20800:	defff704 	addi	sp,sp,-36
   20804:	dfc00815 	stw	ra,32(sp)
   20808:	df000715 	stw	fp,28(sp)
   2080c:	df000704 	addi	fp,sp,28
   20810:	e13ffc15 	stw	r4,-16(fp)
   20814:	e17ffd15 	stw	r5,-12(fp)
   20818:	e1bffe15 	stw	r6,-8(fp)
   2081c:	3805883a 	mov	r2,r7
   20820:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20824:	0089c404 	movi	r2,10000
   20828:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   2082c:	00002206 	br	208b8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   20830:	e0bffb17 	ldw	r2,-20(fp)
   20834:	108002a8 	cmpgeui	r2,r2,10
   20838:	1000021e 	bne	r2,zero,20844 <alt_avalon_i2c_master_tx+0x44>
   2083c:	0109c404 	movi	r4,10000
   20840:	00225880 	call	22588 <alt_busy_sleep>
      if (use_interrupts)
   20844:	e0bfff03 	ldbu	r2,-4(fp)
   20848:	10000926 	beq	r2,zero,20870 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   2084c:	00800044 	movi	r2,1
   20850:	d8800015 	stw	r2,0(sp)
   20854:	000f883a 	mov	r7,zero
   20858:	e1bffe17 	ldw	r6,-8(fp)
   2085c:	e17ffd17 	ldw	r5,-12(fp)
   20860:	e13ffc17 	ldw	r4,-16(fp)
   20864:	0020dac0 	call	20dac <alt_avalon_i2c_master_transmit_using_interrupts>
   20868:	e0bffa15 	stw	r2,-24(fp)
   2086c:	00000806 	br	20890 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   20870:	00800044 	movi	r2,1
   20874:	d8800015 	stw	r2,0(sp)
   20878:	000f883a 	mov	r7,zero
   2087c:	e1bffe17 	ldw	r6,-8(fp)
   20880:	e17ffd17 	ldw	r5,-12(fp)
   20884:	e13ffc17 	ldw	r4,-16(fp)
   20888:	0020bec0 	call	20bec <alt_avalon_i2c_master_transmit>
   2088c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20890:	e0bffa17 	ldw	r2,-24(fp)
   20894:	10bffea0 	cmpeqi	r2,r2,-6
   20898:	1000061e 	bne	r2,zero,208b4 <alt_avalon_i2c_master_tx+0xb4>
   2089c:	e0bffa17 	ldw	r2,-24(fp)
   208a0:	10bffee0 	cmpeqi	r2,r2,-5
   208a4:	1000031e 	bne	r2,zero,208b4 <alt_avalon_i2c_master_tx+0xb4>
   208a8:	e0bffa17 	ldw	r2,-24(fp)
   208ac:	10bffe58 	cmpnei	r2,r2,-7
   208b0:	1000061e 	bne	r2,zero,208cc <alt_avalon_i2c_master_tx+0xcc>
   208b4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   208b8:	e0bffb17 	ldw	r2,-20(fp)
   208bc:	10ffffc4 	addi	r3,r2,-1
   208c0:	e0fffb15 	stw	r3,-20(fp)
   208c4:	103fda1e 	bne	r2,zero,20830 <__alt_data_end+0xfc020830>
   208c8:	00000106 	br	208d0 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   208cc:	0001883a 	nop
    }

    return status;
   208d0:	e0bffa17 	ldw	r2,-24(fp)
}        
   208d4:	e037883a 	mov	sp,fp
   208d8:	dfc00117 	ldw	ra,4(sp)
   208dc:	df000017 	ldw	fp,0(sp)
   208e0:	dec00204 	addi	sp,sp,8
   208e4:	f800283a 	ret

000208e8 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   208e8:	defff704 	addi	sp,sp,-36
   208ec:	dfc00815 	stw	ra,32(sp)
   208f0:	df000715 	stw	fp,28(sp)
   208f4:	df000704 	addi	fp,sp,28
   208f8:	e13ffc15 	stw	r4,-16(fp)
   208fc:	e17ffd15 	stw	r5,-12(fp)
   20900:	e1bffe15 	stw	r6,-8(fp)
   20904:	3805883a 	mov	r2,r7
   20908:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2090c:	0089c404 	movi	r2,10000
   20910:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   20914:	e0bfff03 	ldbu	r2,-4(fp)
   20918:	10003426 	beq	r2,zero,209ec <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   2091c:	00001706 	br	2097c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20920:	e0bffb17 	ldw	r2,-20(fp)
   20924:	108002a8 	cmpgeui	r2,r2,10
   20928:	1000021e 	bne	r2,zero,20934 <alt_avalon_i2c_master_rx+0x4c>
   2092c:	0109c404 	movi	r4,10000
   20930:	00225880 	call	22588 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   20934:	00800044 	movi	r2,1
   20938:	d8800015 	stw	r2,0(sp)
   2093c:	000f883a 	mov	r7,zero
   20940:	e1bffe17 	ldw	r6,-8(fp)
   20944:	e17ffd17 	ldw	r5,-12(fp)
   20948:	e13ffc17 	ldw	r4,-16(fp)
   2094c:	00211c80 	call	211c8 <alt_avalon_i2c_master_receive_using_interrupts>
   20950:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20954:	e0bffa17 	ldw	r2,-24(fp)
   20958:	10bffea0 	cmpeqi	r2,r2,-6
   2095c:	1000061e 	bne	r2,zero,20978 <alt_avalon_i2c_master_rx+0x90>
   20960:	e0bffa17 	ldw	r2,-24(fp)
   20964:	10bffee0 	cmpeqi	r2,r2,-5
   20968:	1000031e 	bne	r2,zero,20978 <alt_avalon_i2c_master_rx+0x90>
   2096c:	e0bffa17 	ldw	r2,-24(fp)
   20970:	10bffe58 	cmpnei	r2,r2,-7
   20974:	1000221e 	bne	r2,zero,20a00 <alt_avalon_i2c_master_rx+0x118>
   20978:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   2097c:	e0bffb17 	ldw	r2,-20(fp)
   20980:	10ffffc4 	addi	r3,r2,-1
   20984:	e0fffb15 	stw	r3,-20(fp)
   20988:	103fe51e 	bne	r2,zero,20920 <__alt_data_end+0xfc020920>
   2098c:	00001f06 	br	20a0c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20990:	e0bffb17 	ldw	r2,-20(fp)
   20994:	108002a8 	cmpgeui	r2,r2,10
   20998:	1000021e 	bne	r2,zero,209a4 <alt_avalon_i2c_master_rx+0xbc>
   2099c:	0109c404 	movi	r4,10000
   209a0:	00225880 	call	22588 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   209a4:	00800044 	movi	r2,1
   209a8:	d8800015 	stw	r2,0(sp)
   209ac:	000f883a 	mov	r7,zero
   209b0:	e1bffe17 	ldw	r6,-8(fp)
   209b4:	e17ffd17 	ldw	r5,-12(fp)
   209b8:	e13ffc17 	ldw	r4,-16(fp)
   209bc:	0020fb80 	call	20fb8 <alt_avalon_i2c_master_receive>
   209c0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   209c4:	e0bffa17 	ldw	r2,-24(fp)
   209c8:	10bffea0 	cmpeqi	r2,r2,-6
   209cc:	1000061e 	bne	r2,zero,209e8 <alt_avalon_i2c_master_rx+0x100>
   209d0:	e0bffa17 	ldw	r2,-24(fp)
   209d4:	10bffee0 	cmpeqi	r2,r2,-5
   209d8:	1000031e 	bne	r2,zero,209e8 <alt_avalon_i2c_master_rx+0x100>
   209dc:	e0bffa17 	ldw	r2,-24(fp)
   209e0:	10bffe58 	cmpnei	r2,r2,-7
   209e4:	1000081e 	bne	r2,zero,20a08 <alt_avalon_i2c_master_rx+0x120>
   209e8:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   209ec:	e0bffb17 	ldw	r2,-20(fp)
   209f0:	10ffffc4 	addi	r3,r2,-1
   209f4:	e0fffb15 	stw	r3,-20(fp)
   209f8:	103fe51e 	bne	r2,zero,20990 <__alt_data_end+0xfc020990>
   209fc:	00000306 	br	20a0c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20a00:	0001883a 	nop
   20a04:	00000106 	br	20a0c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   20a08:	0001883a 	nop
      }
    }
    
    return status;
   20a0c:	e0bffa17 	ldw	r2,-24(fp)
}        
   20a10:	e037883a 	mov	sp,fp
   20a14:	dfc00117 	ldw	ra,4(sp)
   20a18:	df000017 	ldw	fp,0(sp)
   20a1c:	dec00204 	addi	sp,sp,8
   20a20:	f800283a 	ret

00020a24 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   20a24:	defff604 	addi	sp,sp,-40
   20a28:	dfc00915 	stw	ra,36(sp)
   20a2c:	df000815 	stw	fp,32(sp)
   20a30:	df000804 	addi	fp,sp,32
   20a34:	e13ffb15 	stw	r4,-20(fp)
   20a38:	e17ffc15 	stw	r5,-16(fp)
   20a3c:	e1bffd15 	stw	r6,-12(fp)
   20a40:	e1fffe15 	stw	r7,-8(fp)
   20a44:	e0800317 	ldw	r2,12(fp)
   20a48:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   20a4c:	0089c404 	movi	r2,10000
   20a50:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   20a54:	e0bfff03 	ldbu	r2,-4(fp)
   20a58:	10005626 	beq	r2,zero,20bb4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   20a5c:	00002806 	br	20b00 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   20a60:	e0bffa17 	ldw	r2,-24(fp)
   20a64:	108002a8 	cmpgeui	r2,r2,10
   20a68:	1000021e 	bne	r2,zero,20a74 <alt_avalon_i2c_master_tx_rx+0x50>
   20a6c:	0109c404 	movi	r4,10000
   20a70:	00225880 	call	22588 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20a74:	d8000015 	stw	zero,0(sp)
   20a78:	000f883a 	mov	r7,zero
   20a7c:	e1bffd17 	ldw	r6,-12(fp)
   20a80:	e17ffc17 	ldw	r5,-16(fp)
   20a84:	e13ffb17 	ldw	r4,-20(fp)
   20a88:	0020dac0 	call	20dac <alt_avalon_i2c_master_transmit_using_interrupts>
   20a8c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20a90:	e0bff917 	ldw	r2,-28(fp)
   20a94:	10bffea0 	cmpeqi	r2,r2,-6
   20a98:	1000191e 	bne	r2,zero,20b00 <alt_avalon_i2c_master_tx_rx+0xdc>
   20a9c:	e0bff917 	ldw	r2,-28(fp)
   20aa0:	10bffee0 	cmpeqi	r2,r2,-5
   20aa4:	1000161e 	bne	r2,zero,20b00 <alt_avalon_i2c_master_tx_rx+0xdc>
   20aa8:	e0bff917 	ldw	r2,-28(fp)
   20aac:	10bffe58 	cmpnei	r2,r2,-7
   20ab0:	1000011e 	bne	r2,zero,20ab8 <alt_avalon_i2c_master_tx_rx+0x94>
   20ab4:	00001206 	br	20b00 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20ab8:	00800044 	movi	r2,1
   20abc:	d8800015 	stw	r2,0(sp)
   20ac0:	01c00044 	movi	r7,1
   20ac4:	e1800217 	ldw	r6,8(fp)
   20ac8:	e17ffe17 	ldw	r5,-8(fp)
   20acc:	e13ffb17 	ldw	r4,-20(fp)
   20ad0:	00211c80 	call	211c8 <alt_avalon_i2c_master_receive_using_interrupts>
   20ad4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20ad8:	e0bff917 	ldw	r2,-28(fp)
   20adc:	10bffea0 	cmpeqi	r2,r2,-6
   20ae0:	1000061e 	bne	r2,zero,20afc <alt_avalon_i2c_master_tx_rx+0xd8>
   20ae4:	e0bff917 	ldw	r2,-28(fp)
   20ae8:	10bffee0 	cmpeqi	r2,r2,-5
   20aec:	1000031e 	bne	r2,zero,20afc <alt_avalon_i2c_master_tx_rx+0xd8>
   20af0:	e0bff917 	ldw	r2,-28(fp)
   20af4:	10bffe58 	cmpnei	r2,r2,-7
   20af8:	1000331e 	bne	r2,zero,20bc8 <alt_avalon_i2c_master_tx_rx+0x1a4>
   20afc:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   20b00:	e0bffa17 	ldw	r2,-24(fp)
   20b04:	10ffffc4 	addi	r3,r2,-1
   20b08:	e0fffa15 	stw	r3,-24(fp)
   20b0c:	103fd41e 	bne	r2,zero,20a60 <__alt_data_end+0xfc020a60>
   20b10:	00003006 	br	20bd4 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   20b14:	e0bffa17 	ldw	r2,-24(fp)
   20b18:	108002a8 	cmpgeui	r2,r2,10
   20b1c:	1000021e 	bne	r2,zero,20b28 <alt_avalon_i2c_master_tx_rx+0x104>
   20b20:	0109c404 	movi	r4,10000
   20b24:	00225880 	call	22588 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   20b28:	d8000015 	stw	zero,0(sp)
   20b2c:	000f883a 	mov	r7,zero
   20b30:	e1bffd17 	ldw	r6,-12(fp)
   20b34:	e17ffc17 	ldw	r5,-16(fp)
   20b38:	e13ffb17 	ldw	r4,-20(fp)
   20b3c:	0020bec0 	call	20bec <alt_avalon_i2c_master_transmit>
   20b40:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20b44:	e0bff917 	ldw	r2,-28(fp)
   20b48:	10bffea0 	cmpeqi	r2,r2,-6
   20b4c:	1000191e 	bne	r2,zero,20bb4 <alt_avalon_i2c_master_tx_rx+0x190>
   20b50:	e0bff917 	ldw	r2,-28(fp)
   20b54:	10bffee0 	cmpeqi	r2,r2,-5
   20b58:	1000161e 	bne	r2,zero,20bb4 <alt_avalon_i2c_master_tx_rx+0x190>
   20b5c:	e0bff917 	ldw	r2,-28(fp)
   20b60:	10bffe58 	cmpnei	r2,r2,-7
   20b64:	1000011e 	bne	r2,zero,20b6c <alt_avalon_i2c_master_tx_rx+0x148>
   20b68:	00001206 	br	20bb4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   20b6c:	00800044 	movi	r2,1
   20b70:	d8800015 	stw	r2,0(sp)
   20b74:	01c00044 	movi	r7,1
   20b78:	e1800217 	ldw	r6,8(fp)
   20b7c:	e17ffe17 	ldw	r5,-8(fp)
   20b80:	e13ffb17 	ldw	r4,-20(fp)
   20b84:	0020fb80 	call	20fb8 <alt_avalon_i2c_master_receive>
   20b88:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   20b8c:	e0bff917 	ldw	r2,-28(fp)
   20b90:	10bffea0 	cmpeqi	r2,r2,-6
   20b94:	1000061e 	bne	r2,zero,20bb0 <alt_avalon_i2c_master_tx_rx+0x18c>
   20b98:	e0bff917 	ldw	r2,-28(fp)
   20b9c:	10bffee0 	cmpeqi	r2,r2,-5
   20ba0:	1000031e 	bne	r2,zero,20bb0 <alt_avalon_i2c_master_tx_rx+0x18c>
   20ba4:	e0bff917 	ldw	r2,-28(fp)
   20ba8:	10bffe58 	cmpnei	r2,r2,-7
   20bac:	1000081e 	bne	r2,zero,20bd0 <alt_avalon_i2c_master_tx_rx+0x1ac>
   20bb0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   20bb4:	e0bffa17 	ldw	r2,-24(fp)
   20bb8:	10ffffc4 	addi	r3,r2,-1
   20bbc:	e0fffa15 	stw	r3,-24(fp)
   20bc0:	103fd41e 	bne	r2,zero,20b14 <__alt_data_end+0xfc020b14>
   20bc4:	00000306 	br	20bd4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20bc8:	0001883a 	nop
   20bcc:	00000106 	br	20bd4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   20bd0:	0001883a 	nop
      }
    }
    
    return status;
   20bd4:	e0bff917 	ldw	r2,-28(fp)
}                                       
   20bd8:	e037883a 	mov	sp,fp
   20bdc:	dfc00117 	ldw	ra,4(sp)
   20be0:	df000017 	ldw	fp,0(sp)
   20be4:	dec00204 	addi	sp,sp,8
   20be8:	f800283a 	ret

00020bec <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20bec:	defff704 	addi	sp,sp,-36
   20bf0:	dfc00815 	stw	ra,32(sp)
   20bf4:	df000715 	stw	fp,28(sp)
   20bf8:	df000704 	addi	fp,sp,28
   20bfc:	e13ffb15 	stw	r4,-20(fp)
   20c00:	e17ffc15 	stw	r5,-16(fp)
   20c04:	e1bffd15 	stw	r6,-12(fp)
   20c08:	3807883a 	mov	r3,r7
   20c0c:	e0800217 	ldw	r2,8(fp)
   20c10:	e0fffe05 	stb	r3,-8(fp)
   20c14:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20c18:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   20c1c:	0149c404 	movi	r5,10000
   20c20:	e13ffd17 	ldw	r4,-12(fp)
   20c24:	000cda80 	call	cda8 <__mulsi3>
   20c28:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   20c2c:	e0bffd17 	ldw	r2,-12(fp)
   20c30:	1000021e 	bne	r2,zero,20c3c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20c34:	0005883a 	mov	r2,zero
   20c38:	00005706 	br	20d98 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20c3c:	e0bffe03 	ldbu	r2,-8(fp)
   20c40:	10000a1e 	bne	r2,zero,20c6c <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20c44:	e13ffb17 	ldw	r4,-20(fp)
   20c48:	001fe680 	call	1fe68 <alt_avalon_i2c_enable>
   20c4c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20c50:	e0bffa17 	ldw	r2,-24(fp)
   20c54:	10000226 	beq	r2,zero,20c60 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   20c58:	e0bffa17 	ldw	r2,-24(fp)
   20c5c:	00004e06 	br	20d98 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20c60:	01400704 	movi	r5,28
   20c64:	e13ffb17 	ldw	r4,-20(fp)
   20c68:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20c6c:	e0bffe03 	ldbu	r2,-8(fp)
   20c70:	100d883a 	mov	r6,r2
   20c74:	000b883a 	mov	r5,zero
   20c78:	e13ffb17 	ldw	r4,-20(fp)
   20c7c:	00204d00 	call	204d0 <alt_avalon_i2c_send_address>
   20c80:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   20c84:	e0bffa17 	ldw	r2,-24(fp)
   20c88:	1000271e 	bne	r2,zero,20d28 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20c8c:	00000f06 	br	20ccc <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20c90:	e0bffc17 	ldw	r2,-16(fp)
   20c94:	10800003 	ldbu	r2,0(r2)
   20c98:	10803fcc 	andi	r2,r2,255
   20c9c:	000f883a 	mov	r7,zero
   20ca0:	000d883a 	mov	r6,zero
   20ca4:	100b883a 	mov	r5,r2
   20ca8:	e13ffb17 	ldw	r4,-20(fp)
   20cac:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   20cb0:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   20cb4:	e0bffc17 	ldw	r2,-16(fp)
   20cb8:	10800044 	addi	r2,r2,1
   20cbc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20cc0:	e0bffd17 	ldw	r2,-12(fp)
   20cc4:	10bfffc4 	addi	r2,r2,-1
   20cc8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20ccc:	e0bffd17 	ldw	r2,-12(fp)
   20cd0:	108000b0 	cmpltui	r2,r2,2
   20cd4:	1000021e 	bne	r2,zero,20ce0 <alt_avalon_i2c_master_transmit+0xf4>
   20cd8:	e0bffa17 	ldw	r2,-24(fp)
   20cdc:	103fec26 	beq	r2,zero,20c90 <__alt_data_end+0xfc020c90>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20ce0:	e0bffa17 	ldw	r2,-24(fp)
   20ce4:	1000101e 	bne	r2,zero,20d28 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20ce8:	e0bffc17 	ldw	r2,-16(fp)
   20cec:	10800003 	ldbu	r2,0(r2)
   20cf0:	10803fcc 	andi	r2,r2,255
   20cf4:	e0ffff03 	ldbu	r3,-4(fp)
   20cf8:	180f883a 	mov	r7,r3
   20cfc:	000d883a 	mov	r6,zero
   20d00:	100b883a 	mov	r5,r2
   20d04:	e13ffb17 	ldw	r4,-20(fp)
   20d08:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   20d0c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   20d10:	e0bffc17 	ldw	r2,-16(fp)
   20d14:	10800044 	addi	r2,r2,1
   20d18:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20d1c:	e0bffd17 	ldw	r2,-12(fp)
   20d20:	10bfffc4 	addi	r2,r2,-1
   20d24:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   20d28:	e0bfff03 	ldbu	r2,-4(fp)
   20d2c:	1000101e 	bne	r2,zero,20d70 <alt_avalon_i2c_master_transmit+0x184>
   20d30:	e0bffa17 	ldw	r2,-24(fp)
   20d34:	10001726 	beq	r2,zero,20d94 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20d38:	00000d06 	br	20d70 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   20d3c:	e0bff917 	ldw	r2,-28(fp)
   20d40:	108002a8 	cmpgeui	r2,r2,10
   20d44:	1000021e 	bne	r2,zero,20d50 <alt_avalon_i2c_master_transmit+0x164>
   20d48:	0109c404 	movi	r4,10000
   20d4c:	00225880 	call	22588 <alt_busy_sleep>
            if (--timeout == 0)
   20d50:	e0bff917 	ldw	r2,-28(fp)
   20d54:	10bfffc4 	addi	r2,r2,-1
   20d58:	e0bff915 	stw	r2,-28(fp)
   20d5c:	e0bff917 	ldw	r2,-28(fp)
   20d60:	1000031e 	bne	r2,zero,20d70 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20d64:	00bfff84 	movi	r2,-2
   20d68:	e0bffa15 	stw	r2,-24(fp)
               break;
   20d6c:	00000306 	br	20d7c <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20d70:	e13ffb17 	ldw	r4,-20(fp)
   20d74:	00202580 	call	20258 <alt_avalon_i2c_is_busy>
   20d78:	103ff01e 	bne	r2,zero,20d3c <__alt_data_end+0xfc020d3c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   20d7c:	e0bffa04 	addi	r2,fp,-24
   20d80:	100b883a 	mov	r5,r2
   20d84:	e13ffb17 	ldw	r4,-20(fp)
   20d88:	002062c0 	call	2062c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20d8c:	e13ffb17 	ldw	r4,-20(fp)
   20d90:	001ff000 	call	1ff00 <alt_avalon_i2c_disable>
    }


    return status;
   20d94:	e0bffa17 	ldw	r2,-24(fp)
}
   20d98:	e037883a 	mov	sp,fp
   20d9c:	dfc00117 	ldw	ra,4(sp)
   20da0:	df000017 	ldw	fp,0(sp)
   20da4:	dec00204 	addi	sp,sp,8
   20da8:	f800283a 	ret

00020dac <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   20dac:	defff604 	addi	sp,sp,-40
   20db0:	dfc00915 	stw	ra,36(sp)
   20db4:	df000815 	stw	fp,32(sp)
   20db8:	df000804 	addi	fp,sp,32
   20dbc:	e13ffb15 	stw	r4,-20(fp)
   20dc0:	e17ffc15 	stw	r5,-16(fp)
   20dc4:	e1bffd15 	stw	r6,-12(fp)
   20dc8:	3807883a 	mov	r3,r7
   20dcc:	e0800217 	ldw	r2,8(fp)
   20dd0:	e0fffe05 	stb	r3,-8(fp)
   20dd4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20dd8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   20ddc:	0149c404 	movi	r5,10000
   20de0:	e13ffd17 	ldw	r4,-12(fp)
   20de4:	000cda80 	call	cda8 <__mulsi3>
   20de8:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   20dec:	e0bffb17 	ldw	r2,-20(fp)
   20df0:	10800717 	ldw	r2,28(r2)
   20df4:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   20df8:	e0bffd17 	ldw	r2,-12(fp)
   20dfc:	1000021e 	bne	r2,zero,20e08 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20e00:	0005883a 	mov	r2,zero
   20e04:	00006706 	br	20fa4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   20e08:	e0bffb17 	ldw	r2,-20(fp)
   20e0c:	10c00617 	ldw	r3,24(r2)
   20e10:	008000b4 	movhi	r2,2
   20e14:	10bebb04 	addi	r2,r2,-1300
   20e18:	18800226 	beq	r3,r2,20e24 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   20e1c:	00bfff44 	movi	r2,-3
   20e20:	00006006 	br	20fa4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   20e24:	e0bffe03 	ldbu	r2,-8(fp)
   20e28:	10000a1e 	bne	r2,zero,20e54 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   20e2c:	e13ffb17 	ldw	r4,-20(fp)
   20e30:	001fe680 	call	1fe68 <alt_avalon_i2c_enable>
   20e34:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   20e38:	e0bff817 	ldw	r2,-32(fp)
   20e3c:	10000226 	beq	r2,zero,20e48 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   20e40:	e0bff817 	ldw	r2,-32(fp)
   20e44:	00005706 	br	20fa4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20e48:	01400704 	movi	r5,28
   20e4c:	e13ffb17 	ldw	r4,-20(fp)
   20e50:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   20e54:	e0bffe03 	ldbu	r2,-8(fp)
   20e58:	100d883a 	mov	r6,r2
   20e5c:	000b883a 	mov	r5,zero
   20e60:	e13ffb17 	ldw	r4,-20(fp)
   20e64:	00204d00 	call	204d0 <alt_avalon_i2c_send_address>
   20e68:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   20e6c:	e0bff817 	ldw	r2,-32(fp)
   20e70:	1000271e 	bne	r2,zero,20f10 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20e74:	00000f06 	br	20eb4 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   20e78:	e0bffc17 	ldw	r2,-16(fp)
   20e7c:	10800003 	ldbu	r2,0(r2)
   20e80:	10803fcc 	andi	r2,r2,255
   20e84:	000f883a 	mov	r7,zero
   20e88:	000d883a 	mov	r6,zero
   20e8c:	100b883a 	mov	r5,r2
   20e90:	e13ffb17 	ldw	r4,-20(fp)
   20e94:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   20e98:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   20e9c:	e0bffc17 	ldw	r2,-16(fp)
   20ea0:	10800044 	addi	r2,r2,1
   20ea4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20ea8:	e0bffd17 	ldw	r2,-12(fp)
   20eac:	10bfffc4 	addi	r2,r2,-1
   20eb0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   20eb4:	e0bffd17 	ldw	r2,-12(fp)
   20eb8:	108000b0 	cmpltui	r2,r2,2
   20ebc:	1000021e 	bne	r2,zero,20ec8 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   20ec0:	e0bff817 	ldw	r2,-32(fp)
   20ec4:	103fec26 	beq	r2,zero,20e78 <__alt_data_end+0xfc020e78>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   20ec8:	e0bff817 	ldw	r2,-32(fp)
   20ecc:	1000101e 	bne	r2,zero,20f10 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   20ed0:	e0bffc17 	ldw	r2,-16(fp)
   20ed4:	10800003 	ldbu	r2,0(r2)
   20ed8:	10803fcc 	andi	r2,r2,255
   20edc:	e0ffff03 	ldbu	r3,-4(fp)
   20ee0:	180f883a 	mov	r7,r3
   20ee4:	000d883a 	mov	r6,zero
   20ee8:	100b883a 	mov	r5,r2
   20eec:	e13ffb17 	ldw	r4,-20(fp)
   20ef0:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   20ef4:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   20ef8:	e0bffc17 	ldw	r2,-16(fp)
   20efc:	10800044 	addi	r2,r2,1
   20f00:	e0bffc15 	stw	r2,-16(fp)
            --size;
   20f04:	e0bffd17 	ldw	r2,-12(fp)
   20f08:	10bfffc4 	addi	r2,r2,-1
   20f0c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   20f10:	e0bff817 	ldw	r2,-32(fp)
   20f14:	10001426 	beq	r2,zero,20f68 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20f18:	00000d06 	br	20f50 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   20f1c:	e0bff917 	ldw	r2,-28(fp)
   20f20:	108002a8 	cmpgeui	r2,r2,10
   20f24:	1000021e 	bne	r2,zero,20f30 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   20f28:	0109c404 	movi	r4,10000
   20f2c:	00225880 	call	22588 <alt_busy_sleep>
            if (--timeout == 0)
   20f30:	e0bff917 	ldw	r2,-28(fp)
   20f34:	10bfffc4 	addi	r2,r2,-1
   20f38:	e0bff915 	stw	r2,-28(fp)
   20f3c:	e0bff917 	ldw	r2,-28(fp)
   20f40:	1000031e 	bne	r2,zero,20f50 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   20f44:	00bfff84 	movi	r2,-2
   20f48:	e0bff815 	stw	r2,-32(fp)
               break;
   20f4c:	00000306 	br	20f5c <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   20f50:	e13ffb17 	ldw	r4,-20(fp)
   20f54:	00202580 	call	20258 <alt_avalon_i2c_is_busy>
   20f58:	103ff01e 	bne	r2,zero,20f1c <__alt_data_end+0xfc020f1c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   20f5c:	e13ffb17 	ldw	r4,-20(fp)
   20f60:	001ff000 	call	1ff00 <alt_avalon_i2c_disable>
   20f64:	00000e06 	br	20fa0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   20f68:	e0bfff03 	ldbu	r2,-4(fp)
   20f6c:	10000c26 	beq	r2,zero,20fa0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20f70:	01400704 	movi	r5,28
   20f74:	e13ffb17 	ldw	r4,-20(fp)
   20f78:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   20f7c:	000b883a 	mov	r5,zero
   20f80:	e13ffb17 	ldw	r4,-20(fp)
   20f84:	002169c0 	call	2169c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   20f88:	e0bffa17 	ldw	r2,-24(fp)
   20f8c:	00c00044 	movi	r3,1
   20f90:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   20f94:	01400044 	movi	r5,1
   20f98:	e13ffb17 	ldw	r4,-20(fp)
   20f9c:	00214f80 	call	214f8 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   20fa0:	e0bff817 	ldw	r2,-32(fp)
}
   20fa4:	e037883a 	mov	sp,fp
   20fa8:	dfc00117 	ldw	ra,4(sp)
   20fac:	df000017 	ldw	fp,0(sp)
   20fb0:	dec00204 	addi	sp,sp,8
   20fb4:	f800283a 	ret

00020fb8 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   20fb8:	defff404 	addi	sp,sp,-48
   20fbc:	dfc00b15 	stw	ra,44(sp)
   20fc0:	df000a15 	stw	fp,40(sp)
   20fc4:	df000a04 	addi	fp,sp,40
   20fc8:	e13ffb15 	stw	r4,-20(fp)
   20fcc:	e17ffc15 	stw	r5,-16(fp)
   20fd0:	e1bffd15 	stw	r6,-12(fp)
   20fd4:	3807883a 	mov	r3,r7
   20fd8:	e0800217 	ldw	r2,8(fp)
   20fdc:	e0fffe05 	stb	r3,-8(fp)
   20fe0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   20fe4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   20fe8:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   20fec:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   20ff0:	e0bffd17 	ldw	r2,-12(fp)
   20ff4:	1000021e 	bne	r2,zero,21000 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   20ff8:	0005883a 	mov	r2,zero
   20ffc:	00006d06 	br	211b4 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21000:	e0bffe03 	ldbu	r2,-8(fp)
   21004:	10000a1e 	bne	r2,zero,21030 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21008:	e13ffb17 	ldw	r4,-20(fp)
   2100c:	001fe680 	call	1fe68 <alt_avalon_i2c_enable>
   21010:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21014:	e0bff917 	ldw	r2,-28(fp)
   21018:	10000226 	beq	r2,zero,21024 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   2101c:	e0bff917 	ldw	r2,-28(fp)
   21020:	00006406 	br	211b4 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21024:	01400704 	movi	r5,28
   21028:	e13ffb17 	ldw	r4,-20(fp)
   2102c:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21030:	e0bffe03 	ldbu	r2,-8(fp)
   21034:	100d883a 	mov	r6,r2
   21038:	01400044 	movi	r5,1
   2103c:	e13ffb17 	ldw	r4,-20(fp)
   21040:	00204d00 	call	204d0 <alt_avalon_i2c_send_address>
   21044:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   21048:	e0bff917 	ldw	r2,-28(fp)
   2104c:	1000341e 	bne	r2,zero,21120 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21050:	00001906 	br	210b8 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21054:	000f883a 	mov	r7,zero
   21058:	000d883a 	mov	r6,zero
   2105c:	000b883a 	mov	r5,zero
   21060:	e13ffb17 	ldw	r4,-20(fp)
   21064:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   21068:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   2106c:	e0bff817 	ldw	r2,-32(fp)
   21070:	10800044 	addi	r2,r2,1
   21074:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   21078:	e0bff917 	ldw	r2,-28(fp)
   2107c:	10000e1e 	bne	r2,zero,210b8 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   21080:	e0bffa04 	addi	r2,fp,-24
   21084:	100f883a 	mov	r7,r2
   21088:	000d883a 	mov	r6,zero
   2108c:	e17ffc17 	ldw	r5,-16(fp)
   21090:	e13ffb17 	ldw	r4,-20(fp)
   21094:	002029c0 	call	2029c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   21098:	e0bffa17 	ldw	r2,-24(fp)
   2109c:	e0fffc17 	ldw	r3,-16(fp)
   210a0:	1885883a 	add	r2,r3,r2
   210a4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   210a8:	e0bffa17 	ldw	r2,-24(fp)
   210ac:	e0fff717 	ldw	r3,-36(fp)
   210b0:	1885883a 	add	r2,r3,r2
   210b4:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   210b8:	e0bffd17 	ldw	r2,-12(fp)
   210bc:	10bfffc4 	addi	r2,r2,-1
   210c0:	e0fff817 	ldw	r3,-32(fp)
   210c4:	1880022e 	bgeu	r3,r2,210d0 <alt_avalon_i2c_master_receive+0x118>
   210c8:	e0bff917 	ldw	r2,-28(fp)
   210cc:	103fe126 	beq	r2,zero,21054 <__alt_data_end+0xfc021054>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   210d0:	e0bff917 	ldw	r2,-28(fp)
   210d4:	1000121e 	bne	r2,zero,21120 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   210d8:	e0bfff03 	ldbu	r2,-4(fp)
   210dc:	100f883a 	mov	r7,r2
   210e0:	000d883a 	mov	r6,zero
   210e4:	000b883a 	mov	r5,zero
   210e8:	e13ffb17 	ldw	r4,-20(fp)
   210ec:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   210f0:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   210f4:	00000a06 	br	21120 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   210f8:	e17ffc17 	ldw	r5,-16(fp)
   210fc:	e13ffb17 	ldw	r4,-20(fp)
   21100:	00203440 	call	20344 <alt_avalon_i2c_rx_read>
   21104:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   21108:	e0bffc17 	ldw	r2,-16(fp)
   2110c:	10800044 	addi	r2,r2,1
   21110:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   21114:	e0bff717 	ldw	r2,-36(fp)
   21118:	10800044 	addi	r2,r2,1
   2111c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   21120:	e0fff717 	ldw	r3,-36(fp)
   21124:	e0bffd17 	ldw	r2,-12(fp)
   21128:	1880022e 	bgeu	r3,r2,21134 <alt_avalon_i2c_master_receive+0x17c>
   2112c:	e0bff917 	ldw	r2,-28(fp)
   21130:	103ff126 	beq	r2,zero,210f8 <__alt_data_end+0xfc0210f8>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21134:	e0bfff03 	ldbu	r2,-4(fp)
   21138:	1000021e 	bne	r2,zero,21144 <alt_avalon_i2c_master_receive+0x18c>
   2113c:	e0bff917 	ldw	r2,-28(fp)
   21140:	10001b26 	beq	r2,zero,211b0 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   21144:	0149c404 	movi	r5,10000
   21148:	e13ffd17 	ldw	r4,-12(fp)
   2114c:	000cda80 	call	cda8 <__mulsi3>
   21150:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21154:	00000d06 	br	2118c <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21158:	e0bff617 	ldw	r2,-40(fp)
   2115c:	108002a8 	cmpgeui	r2,r2,10
   21160:	1000021e 	bne	r2,zero,2116c <alt_avalon_i2c_master_receive+0x1b4>
   21164:	0109c404 	movi	r4,10000
   21168:	00225880 	call	22588 <alt_busy_sleep>
            if (--timeout == 0)
   2116c:	e0bff617 	ldw	r2,-40(fp)
   21170:	10bfffc4 	addi	r2,r2,-1
   21174:	e0bff615 	stw	r2,-40(fp)
   21178:	e0bff617 	ldw	r2,-40(fp)
   2117c:	1000031e 	bne	r2,zero,2118c <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21180:	00bfff84 	movi	r2,-2
   21184:	e0bff915 	stw	r2,-28(fp)
               break;
   21188:	00000306 	br	21198 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2118c:	e13ffb17 	ldw	r4,-20(fp)
   21190:	00202580 	call	20258 <alt_avalon_i2c_is_busy>
   21194:	103ff01e 	bne	r2,zero,21158 <__alt_data_end+0xfc021158>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   21198:	e0bff904 	addi	r2,fp,-28
   2119c:	100b883a 	mov	r5,r2
   211a0:	e13ffb17 	ldw	r4,-20(fp)
   211a4:	002062c0 	call	2062c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   211a8:	e13ffb17 	ldw	r4,-20(fp)
   211ac:	001ff000 	call	1ff00 <alt_avalon_i2c_disable>
    }

    return status;
   211b0:	e0bff917 	ldw	r2,-28(fp)
}
   211b4:	e037883a 	mov	sp,fp
   211b8:	dfc00117 	ldw	ra,4(sp)
   211bc:	df000017 	ldw	fp,0(sp)
   211c0:	dec00204 	addi	sp,sp,8
   211c4:	f800283a 	ret

000211c8 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   211c8:	defff504 	addi	sp,sp,-44
   211cc:	dfc00a15 	stw	ra,40(sp)
   211d0:	df000915 	stw	fp,36(sp)
   211d4:	df000904 	addi	fp,sp,36
   211d8:	e13ffb15 	stw	r4,-20(fp)
   211dc:	e17ffc15 	stw	r5,-16(fp)
   211e0:	e1bffd15 	stw	r6,-12(fp)
   211e4:	3807883a 	mov	r3,r7
   211e8:	e0800217 	ldw	r2,8(fp)
   211ec:	e0fffe05 	stb	r3,-8(fp)
   211f0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   211f4:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   211f8:	e0bffb17 	ldw	r2,-20(fp)
   211fc:	10800717 	ldw	r2,28(r2)
   21200:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   21204:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   21208:	e0bffd17 	ldw	r2,-12(fp)
   2120c:	1000021e 	bne	r2,zero,21218 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21210:	0005883a 	mov	r2,zero
   21214:	00006306 	br	213a4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21218:	e0bffb17 	ldw	r2,-20(fp)
   2121c:	10c00617 	ldw	r3,24(r2)
   21220:	008000b4 	movhi	r2,2
   21224:	10bebb04 	addi	r2,r2,-1300
   21228:	18800226 	beq	r3,r2,21234 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2122c:	00bfff44 	movi	r2,-3
   21230:	00005c06 	br	213a4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21234:	e0bffe03 	ldbu	r2,-8(fp)
   21238:	10000a1e 	bne	r2,zero,21264 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2123c:	e13ffb17 	ldw	r4,-20(fp)
   21240:	001fe680 	call	1fe68 <alt_avalon_i2c_enable>
   21244:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21248:	e0bff717 	ldw	r2,-36(fp)
   2124c:	10000226 	beq	r2,zero,21258 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   21250:	e0bff717 	ldw	r2,-36(fp)
   21254:	00005306 	br	213a4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21258:	01400704 	movi	r5,28
   2125c:	e13ffb17 	ldw	r4,-20(fp)
   21260:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21264:	e0bffe03 	ldbu	r2,-8(fp)
   21268:	100d883a 	mov	r6,r2
   2126c:	01400044 	movi	r5,1
   21270:	e13ffb17 	ldw	r4,-20(fp)
   21274:	00204d00 	call	204d0 <alt_avalon_i2c_send_address>
   21278:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2127c:	e0bff717 	ldw	r2,-36(fp)
   21280:	1000191e 	bne	r2,zero,212e8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21284:	00000906 	br	212ac <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21288:	000f883a 	mov	r7,zero
   2128c:	000d883a 	mov	r6,zero
   21290:	000b883a 	mov	r5,zero
   21294:	e13ffb17 	ldw	r4,-20(fp)
   21298:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   2129c:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   212a0:	e0bff917 	ldw	r2,-28(fp)
   212a4:	10800044 	addi	r2,r2,1
   212a8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   212ac:	e0bffd17 	ldw	r2,-12(fp)
   212b0:	10bfffc4 	addi	r2,r2,-1
   212b4:	e0fff917 	ldw	r3,-28(fp)
   212b8:	1880022e 	bgeu	r3,r2,212c4 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   212bc:	e0bff717 	ldw	r2,-36(fp)
   212c0:	103ff126 	beq	r2,zero,21288 <__alt_data_end+0xfc021288>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   212c4:	e0bff717 	ldw	r2,-36(fp)
   212c8:	1000071e 	bne	r2,zero,212e8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   212cc:	e0bfff03 	ldbu	r2,-4(fp)
   212d0:	100f883a 	mov	r7,r2
   212d4:	000d883a 	mov	r6,zero
   212d8:	000b883a 	mov	r5,zero
   212dc:	e13ffb17 	ldw	r4,-20(fp)
   212e0:	00203ec0 	call	203ec <alt_avalon_i2c_cmd_write>
   212e4:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   212e8:	e0bff717 	ldw	r2,-36(fp)
   212ec:	10001826 	beq	r2,zero,21350 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   212f0:	0149c404 	movi	r5,10000
   212f4:	e13ffd17 	ldw	r4,-12(fp)
   212f8:	000cda80 	call	cda8 <__mulsi3>
   212fc:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21300:	00000d06 	br	21338 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21304:	e0bff817 	ldw	r2,-32(fp)
   21308:	108002a8 	cmpgeui	r2,r2,10
   2130c:	1000021e 	bne	r2,zero,21318 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   21310:	0109c404 	movi	r4,10000
   21314:	00225880 	call	22588 <alt_busy_sleep>
            if (--timeout == 0)
   21318:	e0bff817 	ldw	r2,-32(fp)
   2131c:	10bfffc4 	addi	r2,r2,-1
   21320:	e0bff815 	stw	r2,-32(fp)
   21324:	e0bff817 	ldw	r2,-32(fp)
   21328:	1000031e 	bne	r2,zero,21338 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2132c:	00bfff84 	movi	r2,-2
   21330:	e0bff715 	stw	r2,-36(fp)
               break;
   21334:	00000306 	br	21344 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21338:	e13ffb17 	ldw	r4,-20(fp)
   2133c:	00202580 	call	20258 <alt_avalon_i2c_is_busy>
   21340:	103ff01e 	bne	r2,zero,21304 <__alt_data_end+0xfc021304>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21344:	e13ffb17 	ldw	r4,-20(fp)
   21348:	001ff000 	call	1ff00 <alt_avalon_i2c_disable>
   2134c:	00001406 	br	213a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   21350:	e0bfff03 	ldbu	r2,-4(fp)
   21354:	10001226 	beq	r2,zero,213a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21358:	01400704 	movi	r5,28
   2135c:	e13ffb17 	ldw	r4,-20(fp)
   21360:	00214540 	call	21454 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   21364:	000b883a 	mov	r5,zero
   21368:	e13ffb17 	ldw	r4,-20(fp)
   2136c:	00215ec0 	call	215ec <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   21370:	e0bffa17 	ldw	r2,-24(fp)
   21374:	00c00084 	movi	r3,2
   21378:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   2137c:	e0bffa17 	ldw	r2,-24(fp)
   21380:	e0fffc17 	ldw	r3,-16(fp)
   21384:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   21388:	e0bffa17 	ldw	r2,-24(fp)
   2138c:	e0fffd17 	ldw	r3,-12(fp)
   21390:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   21394:	01400084 	movi	r5,2
   21398:	e13ffb17 	ldw	r4,-20(fp)
   2139c:	00214f80 	call	214f8 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   213a0:	e0bff717 	ldw	r2,-36(fp)
}
   213a4:	e037883a 	mov	sp,fp
   213a8:	dfc00117 	ldw	ra,4(sp)
   213ac:	df000017 	ldw	fp,0(sp)
   213b0:	dec00204 	addi	sp,sp,8
   213b4:	f800283a 	ret

000213b8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   213b8:	defffd04 	addi	sp,sp,-12
   213bc:	df000215 	stw	fp,8(sp)
   213c0:	df000204 	addi	fp,sp,8
   213c4:	e13ffe15 	stw	r4,-8(fp)
   213c8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   213cc:	e0bffe17 	ldw	r2,-8(fp)
   213d0:	10800317 	ldw	r2,12(r2)
   213d4:	10800404 	addi	r2,r2,16
   213d8:	10c00037 	ldwio	r3,0(r2)
   213dc:	e0bffe17 	ldw	r2,-8(fp)
   213e0:	10800317 	ldw	r2,12(r2)
   213e4:	10800304 	addi	r2,r2,12
   213e8:	10800037 	ldwio	r2,0(r2)
   213ec:	1884703a 	and	r2,r3,r2
   213f0:	1007883a 	mov	r3,r2
   213f4:	e0bfff17 	ldw	r2,-4(fp)
   213f8:	10c00015 	stw	r3,0(r2)
}
   213fc:	0001883a 	nop
   21400:	e037883a 	mov	sp,fp
   21404:	df000017 	ldw	fp,0(sp)
   21408:	dec00104 	addi	sp,sp,4
   2140c:	f800283a 	ret

00021410 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   21410:	defffd04 	addi	sp,sp,-12
   21414:	df000215 	stw	fp,8(sp)
   21418:	df000204 	addi	fp,sp,8
   2141c:	e13ffe15 	stw	r4,-8(fp)
   21420:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   21424:	e0bffe17 	ldw	r2,-8(fp)
   21428:	10800317 	ldw	r2,12(r2)
   2142c:	10800404 	addi	r2,r2,16
   21430:	10800037 	ldwio	r2,0(r2)
   21434:	1007883a 	mov	r3,r2
   21438:	e0bfff17 	ldw	r2,-4(fp)
   2143c:	10c00015 	stw	r3,0(r2)
}
   21440:	0001883a 	nop
   21444:	e037883a 	mov	sp,fp
   21448:	df000017 	ldw	fp,0(sp)
   2144c:	dec00104 	addi	sp,sp,4
   21450:	f800283a 	ret

00021454 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21454:	defffd04 	addi	sp,sp,-12
   21458:	df000215 	stw	fp,8(sp)
   2145c:	df000204 	addi	fp,sp,8
   21460:	e13ffe15 	stw	r4,-8(fp)
   21464:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   21468:	e0bffe17 	ldw	r2,-8(fp)
   2146c:	10800317 	ldw	r2,12(r2)
   21470:	10800404 	addi	r2,r2,16
   21474:	e0ffff17 	ldw	r3,-4(fp)
   21478:	10c00035 	stwio	r3,0(r2)
}
   2147c:	0001883a 	nop
   21480:	e037883a 	mov	sp,fp
   21484:	df000017 	ldw	fp,0(sp)
   21488:	dec00104 	addi	sp,sp,4
   2148c:	f800283a 	ret

00021490 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   21490:	defffb04 	addi	sp,sp,-20
   21494:	dfc00415 	stw	ra,16(sp)
   21498:	df000315 	stw	fp,12(sp)
   2149c:	df000304 	addi	fp,sp,12
   214a0:	e13ffe15 	stw	r4,-8(fp)
   214a4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   214a8:	e17ffd04 	addi	r5,fp,-12
   214ac:	e13ffe17 	ldw	r4,-8(fp)
   214b0:	002155c0 	call	2155c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   214b4:	e0bfff17 	ldw	r2,-4(fp)
   214b8:	0086303a 	nor	r3,zero,r2
   214bc:	e0bffd17 	ldw	r2,-12(fp)
   214c0:	1884703a 	and	r2,r3,r2
   214c4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   214c8:	e0bffe17 	ldw	r2,-8(fp)
   214cc:	10800317 	ldw	r2,12(r2)
   214d0:	10800304 	addi	r2,r2,12
   214d4:	e0fffd17 	ldw	r3,-12(fp)
   214d8:	18c007cc 	andi	r3,r3,31
   214dc:	10c00035 	stwio	r3,0(r2)
}
   214e0:	0001883a 	nop
   214e4:	e037883a 	mov	sp,fp
   214e8:	dfc00117 	ldw	ra,4(sp)
   214ec:	df000017 	ldw	fp,0(sp)
   214f0:	dec00204 	addi	sp,sp,8
   214f4:	f800283a 	ret

000214f8 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   214f8:	defffb04 	addi	sp,sp,-20
   214fc:	dfc00415 	stw	ra,16(sp)
   21500:	df000315 	stw	fp,12(sp)
   21504:	df000304 	addi	fp,sp,12
   21508:	e13ffe15 	stw	r4,-8(fp)
   2150c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   21510:	e17ffd04 	addi	r5,fp,-12
   21514:	e13ffe17 	ldw	r4,-8(fp)
   21518:	002155c0 	call	2155c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   2151c:	e0fffd17 	ldw	r3,-12(fp)
   21520:	e0bfff17 	ldw	r2,-4(fp)
   21524:	1884b03a 	or	r2,r3,r2
   21528:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2152c:	e0bffe17 	ldw	r2,-8(fp)
   21530:	10800317 	ldw	r2,12(r2)
   21534:	10800304 	addi	r2,r2,12
   21538:	e0fffd17 	ldw	r3,-12(fp)
   2153c:	18c007cc 	andi	r3,r3,31
   21540:	10c00035 	stwio	r3,0(r2)
}
   21544:	0001883a 	nop
   21548:	e037883a 	mov	sp,fp
   2154c:	dfc00117 	ldw	ra,4(sp)
   21550:	df000017 	ldw	fp,0(sp)
   21554:	dec00204 	addi	sp,sp,8
   21558:	f800283a 	ret

0002155c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   2155c:	defffd04 	addi	sp,sp,-12
   21560:	df000215 	stw	fp,8(sp)
   21564:	df000204 	addi	fp,sp,8
   21568:	e13ffe15 	stw	r4,-8(fp)
   2156c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   21570:	e0bffe17 	ldw	r2,-8(fp)
   21574:	10800317 	ldw	r2,12(r2)
   21578:	10800304 	addi	r2,r2,12
   2157c:	10800037 	ldwio	r2,0(r2)
   21580:	10c007cc 	andi	r3,r2,31
   21584:	e0bfff17 	ldw	r2,-4(fp)
   21588:	10c00015 	stw	r3,0(r2)
}
   2158c:	0001883a 	nop
   21590:	e037883a 	mov	sp,fp
   21594:	df000017 	ldw	fp,0(sp)
   21598:	dec00104 	addi	sp,sp,4
   2159c:	f800283a 	ret

000215a0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   215a0:	defffd04 	addi	sp,sp,-12
   215a4:	df000215 	stw	fp,8(sp)
   215a8:	df000204 	addi	fp,sp,8
   215ac:	e13ffe15 	stw	r4,-8(fp)
   215b0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   215b4:	e0bffe17 	ldw	r2,-8(fp)
   215b8:	10800317 	ldw	r2,12(r2)
   215bc:	10800204 	addi	r2,r2,8
   215c0:	10800037 	ldwio	r2,0(r2)
   215c4:	10800c0c 	andi	r2,r2,48
   215c8:	1005d13a 	srai	r2,r2,4
   215cc:	1007883a 	mov	r3,r2
   215d0:	e0bfff17 	ldw	r2,-4(fp)
   215d4:	10c00015 	stw	r3,0(r2)
}
   215d8:	0001883a 	nop
   215dc:	e037883a 	mov	sp,fp
   215e0:	df000017 	ldw	fp,0(sp)
   215e4:	dec00104 	addi	sp,sp,4
   215e8:	f800283a 	ret

000215ec <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   215ec:	defffd04 	addi	sp,sp,-12
   215f0:	df000215 	stw	fp,8(sp)
   215f4:	df000204 	addi	fp,sp,8
   215f8:	e13ffe15 	stw	r4,-8(fp)
   215fc:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   21600:	e0bffe17 	ldw	r2,-8(fp)
   21604:	10800317 	ldw	r2,12(r2)
   21608:	10800204 	addi	r2,r2,8
   2160c:	e0fffe17 	ldw	r3,-8(fp)
   21610:	18c00317 	ldw	r3,12(r3)
   21614:	18c00204 	addi	r3,r3,8
   21618:	18c00037 	ldwio	r3,0(r3)
   2161c:	1809883a 	mov	r4,r3
   21620:	00fff3c4 	movi	r3,-49
   21624:	20c8703a 	and	r4,r4,r3
   21628:	e0ffff17 	ldw	r3,-4(fp)
   2162c:	1806913a 	slli	r3,r3,4
   21630:	18c00c0c 	andi	r3,r3,48
   21634:	20c6b03a 	or	r3,r4,r3
   21638:	10c00035 	stwio	r3,0(r2)
}
   2163c:	0001883a 	nop
   21640:	e037883a 	mov	sp,fp
   21644:	df000017 	ldw	fp,0(sp)
   21648:	dec00104 	addi	sp,sp,4
   2164c:	f800283a 	ret

00021650 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   21650:	defffd04 	addi	sp,sp,-12
   21654:	df000215 	stw	fp,8(sp)
   21658:	df000204 	addi	fp,sp,8
   2165c:	e13ffe15 	stw	r4,-8(fp)
   21660:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   21664:	e0bffe17 	ldw	r2,-8(fp)
   21668:	10800317 	ldw	r2,12(r2)
   2166c:	10800204 	addi	r2,r2,8
   21670:	10800037 	ldwio	r2,0(r2)
   21674:	1080030c 	andi	r2,r2,12
   21678:	1005d0ba 	srai	r2,r2,2
   2167c:	1007883a 	mov	r3,r2
   21680:	e0bfff17 	ldw	r2,-4(fp)
   21684:	10c00015 	stw	r3,0(r2)
}
   21688:	0001883a 	nop
   2168c:	e037883a 	mov	sp,fp
   21690:	df000017 	ldw	fp,0(sp)
   21694:	dec00104 	addi	sp,sp,4
   21698:	f800283a 	ret

0002169c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   2169c:	defffd04 	addi	sp,sp,-12
   216a0:	df000215 	stw	fp,8(sp)
   216a4:	df000204 	addi	fp,sp,8
   216a8:	e13ffe15 	stw	r4,-8(fp)
   216ac:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   216b0:	e0bffe17 	ldw	r2,-8(fp)
   216b4:	10800317 	ldw	r2,12(r2)
   216b8:	10c00204 	addi	r3,r2,8
   216bc:	e0bffe17 	ldw	r2,-8(fp)
   216c0:	10800317 	ldw	r2,12(r2)
   216c4:	10800204 	addi	r2,r2,8
   216c8:	10800037 	ldwio	r2,0(r2)
   216cc:	1009883a 	mov	r4,r2
   216d0:	00bffcc4 	movi	r2,-13
   216d4:	2088703a 	and	r4,r4,r2
   216d8:	e0bfff17 	ldw	r2,-4(fp)
   216dc:	1085883a 	add	r2,r2,r2
   216e0:	1085883a 	add	r2,r2,r2
   216e4:	1080030c 	andi	r2,r2,12
   216e8:	2084b03a 	or	r2,r4,r2
   216ec:	18800035 	stwio	r2,0(r3)
}
   216f0:	0001883a 	nop
   216f4:	e037883a 	mov	sp,fp
   216f8:	df000017 	ldw	fp,0(sp)
   216fc:	dec00104 	addi	sp,sp,4
   21700:	f800283a 	ret

00021704 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21704:	defffa04 	addi	sp,sp,-24
   21708:	dfc00515 	stw	ra,20(sp)
   2170c:	df000415 	stw	fp,16(sp)
   21710:	df000404 	addi	fp,sp,16
   21714:	e13ffd15 	stw	r4,-12(fp)
   21718:	e17ffe15 	stw	r5,-8(fp)
   2171c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21720:	e0bffd17 	ldw	r2,-12(fp)
   21724:	10800017 	ldw	r2,0(r2)
   21728:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2172c:	e0bffc17 	ldw	r2,-16(fp)
   21730:	10c00a04 	addi	r3,r2,40
   21734:	e0bffd17 	ldw	r2,-12(fp)
   21738:	10800217 	ldw	r2,8(r2)
   2173c:	100f883a 	mov	r7,r2
   21740:	e1bfff17 	ldw	r6,-4(fp)
   21744:	e17ffe17 	ldw	r5,-8(fp)
   21748:	1809883a 	mov	r4,r3
   2174c:	0021d2c0 	call	21d2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   21750:	e037883a 	mov	sp,fp
   21754:	dfc00117 	ldw	ra,4(sp)
   21758:	df000017 	ldw	fp,0(sp)
   2175c:	dec00204 	addi	sp,sp,8
   21760:	f800283a 	ret

00021764 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21764:	defffa04 	addi	sp,sp,-24
   21768:	dfc00515 	stw	ra,20(sp)
   2176c:	df000415 	stw	fp,16(sp)
   21770:	df000404 	addi	fp,sp,16
   21774:	e13ffd15 	stw	r4,-12(fp)
   21778:	e17ffe15 	stw	r5,-8(fp)
   2177c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21780:	e0bffd17 	ldw	r2,-12(fp)
   21784:	10800017 	ldw	r2,0(r2)
   21788:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2178c:	e0bffc17 	ldw	r2,-16(fp)
   21790:	10c00a04 	addi	r3,r2,40
   21794:	e0bffd17 	ldw	r2,-12(fp)
   21798:	10800217 	ldw	r2,8(r2)
   2179c:	100f883a 	mov	r7,r2
   217a0:	e1bfff17 	ldw	r6,-4(fp)
   217a4:	e17ffe17 	ldw	r5,-8(fp)
   217a8:	1809883a 	mov	r4,r3
   217ac:	0021f480 	call	21f48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   217b0:	e037883a 	mov	sp,fp
   217b4:	dfc00117 	ldw	ra,4(sp)
   217b8:	df000017 	ldw	fp,0(sp)
   217bc:	dec00204 	addi	sp,sp,8
   217c0:	f800283a 	ret

000217c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   217c4:	defffc04 	addi	sp,sp,-16
   217c8:	dfc00315 	stw	ra,12(sp)
   217cc:	df000215 	stw	fp,8(sp)
   217d0:	df000204 	addi	fp,sp,8
   217d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   217d8:	e0bfff17 	ldw	r2,-4(fp)
   217dc:	10800017 	ldw	r2,0(r2)
   217e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   217e4:	e0bffe17 	ldw	r2,-8(fp)
   217e8:	10c00a04 	addi	r3,r2,40
   217ec:	e0bfff17 	ldw	r2,-4(fp)
   217f0:	10800217 	ldw	r2,8(r2)
   217f4:	100b883a 	mov	r5,r2
   217f8:	1809883a 	mov	r4,r3
   217fc:	0021bd40 	call	21bd4 <altera_avalon_jtag_uart_close>
}
   21800:	e037883a 	mov	sp,fp
   21804:	dfc00117 	ldw	ra,4(sp)
   21808:	df000017 	ldw	fp,0(sp)
   2180c:	dec00204 	addi	sp,sp,8
   21810:	f800283a 	ret

00021814 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21814:	defffa04 	addi	sp,sp,-24
   21818:	dfc00515 	stw	ra,20(sp)
   2181c:	df000415 	stw	fp,16(sp)
   21820:	df000404 	addi	fp,sp,16
   21824:	e13ffd15 	stw	r4,-12(fp)
   21828:	e17ffe15 	stw	r5,-8(fp)
   2182c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   21830:	e0bffd17 	ldw	r2,-12(fp)
   21834:	10800017 	ldw	r2,0(r2)
   21838:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2183c:	e0bffc17 	ldw	r2,-16(fp)
   21840:	10800a04 	addi	r2,r2,40
   21844:	e1bfff17 	ldw	r6,-4(fp)
   21848:	e17ffe17 	ldw	r5,-8(fp)
   2184c:	1009883a 	mov	r4,r2
   21850:	0021c3c0 	call	21c3c <altera_avalon_jtag_uart_ioctl>
}
   21854:	e037883a 	mov	sp,fp
   21858:	dfc00117 	ldw	ra,4(sp)
   2185c:	df000017 	ldw	fp,0(sp)
   21860:	dec00204 	addi	sp,sp,8
   21864:	f800283a 	ret

00021868 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21868:	defffa04 	addi	sp,sp,-24
   2186c:	dfc00515 	stw	ra,20(sp)
   21870:	df000415 	stw	fp,16(sp)
   21874:	df000404 	addi	fp,sp,16
   21878:	e13ffd15 	stw	r4,-12(fp)
   2187c:	e17ffe15 	stw	r5,-8(fp)
   21880:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21884:	e0bffd17 	ldw	r2,-12(fp)
   21888:	00c00044 	movi	r3,1
   2188c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   21890:	e0bffd17 	ldw	r2,-12(fp)
   21894:	10800017 	ldw	r2,0(r2)
   21898:	10800104 	addi	r2,r2,4
   2189c:	1007883a 	mov	r3,r2
   218a0:	e0bffd17 	ldw	r2,-12(fp)
   218a4:	10800817 	ldw	r2,32(r2)
   218a8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   218ac:	e0bffe17 	ldw	r2,-8(fp)
   218b0:	e0ffff17 	ldw	r3,-4(fp)
   218b4:	d8000015 	stw	zero,0(sp)
   218b8:	e1fffd17 	ldw	r7,-12(fp)
   218bc:	018000b4 	movhi	r6,2
   218c0:	31864a04 	addi	r6,r6,6440
   218c4:	180b883a 	mov	r5,r3
   218c8:	1009883a 	mov	r4,r2
   218cc:	00229500 	call	22950 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   218d0:	e0bffd17 	ldw	r2,-12(fp)
   218d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   218d8:	e0bffd17 	ldw	r2,-12(fp)
   218dc:	10800204 	addi	r2,r2,8
   218e0:	d0f24f17 	ldw	r3,-14020(gp)
   218e4:	e1fffd17 	ldw	r7,-12(fp)
   218e8:	018000b4 	movhi	r6,2
   218ec:	3186cd04 	addi	r6,r6,6964
   218f0:	180b883a 	mov	r5,r3
   218f4:	1009883a 	mov	r4,r2
   218f8:	002245c0 	call	2245c <alt_alarm_start>
   218fc:	1000040e 	bge	r2,zero,21910 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21900:	e0fffd17 	ldw	r3,-12(fp)
   21904:	00a00034 	movhi	r2,32768
   21908:	10bfffc4 	addi	r2,r2,-1
   2190c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21910:	0001883a 	nop
   21914:	e037883a 	mov	sp,fp
   21918:	dfc00117 	ldw	ra,4(sp)
   2191c:	df000017 	ldw	fp,0(sp)
   21920:	dec00204 	addi	sp,sp,8
   21924:	f800283a 	ret

00021928 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21928:	defff804 	addi	sp,sp,-32
   2192c:	df000715 	stw	fp,28(sp)
   21930:	df000704 	addi	fp,sp,28
   21934:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21938:	e0bfff17 	ldw	r2,-4(fp)
   2193c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   21940:	e0bffb17 	ldw	r2,-20(fp)
   21944:	10800017 	ldw	r2,0(r2)
   21948:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2194c:	e0bffc17 	ldw	r2,-16(fp)
   21950:	10800104 	addi	r2,r2,4
   21954:	10800037 	ldwio	r2,0(r2)
   21958:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2195c:	e0bffd17 	ldw	r2,-12(fp)
   21960:	1080c00c 	andi	r2,r2,768
   21964:	10006d26 	beq	r2,zero,21b1c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21968:	e0bffd17 	ldw	r2,-12(fp)
   2196c:	1080400c 	andi	r2,r2,256
   21970:	10003526 	beq	r2,zero,21a48 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21974:	00800074 	movhi	r2,1
   21978:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2197c:	e0bffb17 	ldw	r2,-20(fp)
   21980:	10800a17 	ldw	r2,40(r2)
   21984:	10800044 	addi	r2,r2,1
   21988:	1081ffcc 	andi	r2,r2,2047
   2198c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   21990:	e0bffb17 	ldw	r2,-20(fp)
   21994:	10c00b17 	ldw	r3,44(r2)
   21998:	e0bffe17 	ldw	r2,-8(fp)
   2199c:	18801526 	beq	r3,r2,219f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   219a0:	e0bffc17 	ldw	r2,-16(fp)
   219a4:	10800037 	ldwio	r2,0(r2)
   219a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   219ac:	e0bff917 	ldw	r2,-28(fp)
   219b0:	10a0000c 	andi	r2,r2,32768
   219b4:	10001126 	beq	r2,zero,219fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   219b8:	e0bffb17 	ldw	r2,-20(fp)
   219bc:	10800a17 	ldw	r2,40(r2)
   219c0:	e0fff917 	ldw	r3,-28(fp)
   219c4:	1809883a 	mov	r4,r3
   219c8:	e0fffb17 	ldw	r3,-20(fp)
   219cc:	1885883a 	add	r2,r3,r2
   219d0:	10800e04 	addi	r2,r2,56
   219d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   219d8:	e0bffb17 	ldw	r2,-20(fp)
   219dc:	10800a17 	ldw	r2,40(r2)
   219e0:	10800044 	addi	r2,r2,1
   219e4:	10c1ffcc 	andi	r3,r2,2047
   219e8:	e0bffb17 	ldw	r2,-20(fp)
   219ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   219f0:	003fe206 	br	2197c <__alt_data_end+0xfc02197c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   219f4:	0001883a 	nop
   219f8:	00000106 	br	21a00 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   219fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21a00:	e0bff917 	ldw	r2,-28(fp)
   21a04:	10bfffec 	andhi	r2,r2,65535
   21a08:	10000f26 	beq	r2,zero,21a48 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21a0c:	e0bffb17 	ldw	r2,-20(fp)
   21a10:	10c00817 	ldw	r3,32(r2)
   21a14:	00bfff84 	movi	r2,-2
   21a18:	1886703a 	and	r3,r3,r2
   21a1c:	e0bffb17 	ldw	r2,-20(fp)
   21a20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21a24:	e0bffc17 	ldw	r2,-16(fp)
   21a28:	10800104 	addi	r2,r2,4
   21a2c:	1007883a 	mov	r3,r2
   21a30:	e0bffb17 	ldw	r2,-20(fp)
   21a34:	10800817 	ldw	r2,32(r2)
   21a38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21a3c:	e0bffc17 	ldw	r2,-16(fp)
   21a40:	10800104 	addi	r2,r2,4
   21a44:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21a48:	e0bffd17 	ldw	r2,-12(fp)
   21a4c:	1080800c 	andi	r2,r2,512
   21a50:	103fbe26 	beq	r2,zero,2194c <__alt_data_end+0xfc02194c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21a54:	e0bffd17 	ldw	r2,-12(fp)
   21a58:	1004d43a 	srli	r2,r2,16
   21a5c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21a60:	00001406 	br	21ab4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21a64:	e0bffc17 	ldw	r2,-16(fp)
   21a68:	e0fffb17 	ldw	r3,-20(fp)
   21a6c:	18c00d17 	ldw	r3,52(r3)
   21a70:	e13ffb17 	ldw	r4,-20(fp)
   21a74:	20c7883a 	add	r3,r4,r3
   21a78:	18c20e04 	addi	r3,r3,2104
   21a7c:	18c00003 	ldbu	r3,0(r3)
   21a80:	18c03fcc 	andi	r3,r3,255
   21a84:	18c0201c 	xori	r3,r3,128
   21a88:	18ffe004 	addi	r3,r3,-128
   21a8c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21a90:	e0bffb17 	ldw	r2,-20(fp)
   21a94:	10800d17 	ldw	r2,52(r2)
   21a98:	10800044 	addi	r2,r2,1
   21a9c:	10c1ffcc 	andi	r3,r2,2047
   21aa0:	e0bffb17 	ldw	r2,-20(fp)
   21aa4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21aa8:	e0bffa17 	ldw	r2,-24(fp)
   21aac:	10bfffc4 	addi	r2,r2,-1
   21ab0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21ab4:	e0bffa17 	ldw	r2,-24(fp)
   21ab8:	10000526 	beq	r2,zero,21ad0 <altera_avalon_jtag_uart_irq+0x1a8>
   21abc:	e0bffb17 	ldw	r2,-20(fp)
   21ac0:	10c00d17 	ldw	r3,52(r2)
   21ac4:	e0bffb17 	ldw	r2,-20(fp)
   21ac8:	10800c17 	ldw	r2,48(r2)
   21acc:	18bfe51e 	bne	r3,r2,21a64 <__alt_data_end+0xfc021a64>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21ad0:	e0bffa17 	ldw	r2,-24(fp)
   21ad4:	103f9d26 	beq	r2,zero,2194c <__alt_data_end+0xfc02194c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21ad8:	e0bffb17 	ldw	r2,-20(fp)
   21adc:	10c00817 	ldw	r3,32(r2)
   21ae0:	00bfff44 	movi	r2,-3
   21ae4:	1886703a 	and	r3,r3,r2
   21ae8:	e0bffb17 	ldw	r2,-20(fp)
   21aec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21af0:	e0bffb17 	ldw	r2,-20(fp)
   21af4:	10800017 	ldw	r2,0(r2)
   21af8:	10800104 	addi	r2,r2,4
   21afc:	1007883a 	mov	r3,r2
   21b00:	e0bffb17 	ldw	r2,-20(fp)
   21b04:	10800817 	ldw	r2,32(r2)
   21b08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21b0c:	e0bffc17 	ldw	r2,-16(fp)
   21b10:	10800104 	addi	r2,r2,4
   21b14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21b18:	003f8c06 	br	2194c <__alt_data_end+0xfc02194c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21b1c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   21b20:	0001883a 	nop
   21b24:	e037883a 	mov	sp,fp
   21b28:	df000017 	ldw	fp,0(sp)
   21b2c:	dec00104 	addi	sp,sp,4
   21b30:	f800283a 	ret

00021b34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21b34:	defff804 	addi	sp,sp,-32
   21b38:	df000715 	stw	fp,28(sp)
   21b3c:	df000704 	addi	fp,sp,28
   21b40:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21b44:	e0bffb17 	ldw	r2,-20(fp)
   21b48:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21b4c:	e0bff917 	ldw	r2,-28(fp)
   21b50:	10800017 	ldw	r2,0(r2)
   21b54:	10800104 	addi	r2,r2,4
   21b58:	10800037 	ldwio	r2,0(r2)
   21b5c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21b60:	e0bffa17 	ldw	r2,-24(fp)
   21b64:	1081000c 	andi	r2,r2,1024
   21b68:	10000b26 	beq	r2,zero,21b98 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21b6c:	e0bff917 	ldw	r2,-28(fp)
   21b70:	10800017 	ldw	r2,0(r2)
   21b74:	10800104 	addi	r2,r2,4
   21b78:	1007883a 	mov	r3,r2
   21b7c:	e0bff917 	ldw	r2,-28(fp)
   21b80:	10800817 	ldw	r2,32(r2)
   21b84:	10810014 	ori	r2,r2,1024
   21b88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21b8c:	e0bff917 	ldw	r2,-28(fp)
   21b90:	10000915 	stw	zero,36(r2)
   21b94:	00000a06 	br	21bc0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21b98:	e0bff917 	ldw	r2,-28(fp)
   21b9c:	10c00917 	ldw	r3,36(r2)
   21ba0:	00a00034 	movhi	r2,32768
   21ba4:	10bfff04 	addi	r2,r2,-4
   21ba8:	10c00536 	bltu	r2,r3,21bc0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21bac:	e0bff917 	ldw	r2,-28(fp)
   21bb0:	10800917 	ldw	r2,36(r2)
   21bb4:	10c00044 	addi	r3,r2,1
   21bb8:	e0bff917 	ldw	r2,-28(fp)
   21bbc:	10c00915 	stw	r3,36(r2)
   21bc0:	d0b24f17 	ldw	r2,-14020(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21bc4:	e037883a 	mov	sp,fp
   21bc8:	df000017 	ldw	fp,0(sp)
   21bcc:	dec00104 	addi	sp,sp,4
   21bd0:	f800283a 	ret

00021bd4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21bd4:	defffd04 	addi	sp,sp,-12
   21bd8:	df000215 	stw	fp,8(sp)
   21bdc:	df000204 	addi	fp,sp,8
   21be0:	e13ffe15 	stw	r4,-8(fp)
   21be4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21be8:	00000506 	br	21c00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21bec:	e0bfff17 	ldw	r2,-4(fp)
   21bf0:	1090000c 	andi	r2,r2,16384
   21bf4:	10000226 	beq	r2,zero,21c00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21bf8:	00bffd44 	movi	r2,-11
   21bfc:	00000b06 	br	21c2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21c00:	e0bffe17 	ldw	r2,-8(fp)
   21c04:	10c00d17 	ldw	r3,52(r2)
   21c08:	e0bffe17 	ldw	r2,-8(fp)
   21c0c:	10800c17 	ldw	r2,48(r2)
   21c10:	18800526 	beq	r3,r2,21c28 <altera_avalon_jtag_uart_close+0x54>
   21c14:	e0bffe17 	ldw	r2,-8(fp)
   21c18:	10c00917 	ldw	r3,36(r2)
   21c1c:	e0bffe17 	ldw	r2,-8(fp)
   21c20:	10800117 	ldw	r2,4(r2)
   21c24:	18bff136 	bltu	r3,r2,21bec <__alt_data_end+0xfc021bec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21c28:	0005883a 	mov	r2,zero
}
   21c2c:	e037883a 	mov	sp,fp
   21c30:	df000017 	ldw	fp,0(sp)
   21c34:	dec00104 	addi	sp,sp,4
   21c38:	f800283a 	ret

00021c3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21c3c:	defffa04 	addi	sp,sp,-24
   21c40:	df000515 	stw	fp,20(sp)
   21c44:	df000504 	addi	fp,sp,20
   21c48:	e13ffd15 	stw	r4,-12(fp)
   21c4c:	e17ffe15 	stw	r5,-8(fp)
   21c50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21c54:	00bff9c4 	movi	r2,-25
   21c58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   21c5c:	e0bffe17 	ldw	r2,-8(fp)
   21c60:	10da8060 	cmpeqi	r3,r2,27137
   21c64:	1800031e 	bne	r3,zero,21c74 <altera_avalon_jtag_uart_ioctl+0x38>
   21c68:	109a80a0 	cmpeqi	r2,r2,27138
   21c6c:	1000181e 	bne	r2,zero,21cd0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   21c70:	00002906 	br	21d18 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21c74:	e0bffd17 	ldw	r2,-12(fp)
   21c78:	10c00117 	ldw	r3,4(r2)
   21c7c:	00a00034 	movhi	r2,32768
   21c80:	10bfffc4 	addi	r2,r2,-1
   21c84:	18802126 	beq	r3,r2,21d0c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   21c88:	e0bfff17 	ldw	r2,-4(fp)
   21c8c:	10800017 	ldw	r2,0(r2)
   21c90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21c94:	e0bffc17 	ldw	r2,-16(fp)
   21c98:	10800090 	cmplti	r2,r2,2
   21c9c:	1000061e 	bne	r2,zero,21cb8 <altera_avalon_jtag_uart_ioctl+0x7c>
   21ca0:	e0fffc17 	ldw	r3,-16(fp)
   21ca4:	00a00034 	movhi	r2,32768
   21ca8:	10bfffc4 	addi	r2,r2,-1
   21cac:	18800226 	beq	r3,r2,21cb8 <altera_avalon_jtag_uart_ioctl+0x7c>
   21cb0:	e0bffc17 	ldw	r2,-16(fp)
   21cb4:	00000206 	br	21cc0 <altera_avalon_jtag_uart_ioctl+0x84>
   21cb8:	00a00034 	movhi	r2,32768
   21cbc:	10bfff84 	addi	r2,r2,-2
   21cc0:	e0fffd17 	ldw	r3,-12(fp)
   21cc4:	18800115 	stw	r2,4(r3)
      rc = 0;
   21cc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21ccc:	00000f06 	br	21d0c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   21cd0:	e0bffd17 	ldw	r2,-12(fp)
   21cd4:	10c00117 	ldw	r3,4(r2)
   21cd8:	00a00034 	movhi	r2,32768
   21cdc:	10bfffc4 	addi	r2,r2,-1
   21ce0:	18800c26 	beq	r3,r2,21d14 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   21ce4:	e0bffd17 	ldw	r2,-12(fp)
   21ce8:	10c00917 	ldw	r3,36(r2)
   21cec:	e0bffd17 	ldw	r2,-12(fp)
   21cf0:	10800117 	ldw	r2,4(r2)
   21cf4:	1885803a 	cmpltu	r2,r3,r2
   21cf8:	10c03fcc 	andi	r3,r2,255
   21cfc:	e0bfff17 	ldw	r2,-4(fp)
   21d00:	10c00015 	stw	r3,0(r2)
      rc = 0;
   21d04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21d08:	00000206 	br	21d14 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   21d0c:	0001883a 	nop
   21d10:	00000106 	br	21d18 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   21d14:	0001883a 	nop

  default:
    break;
  }

  return rc;
   21d18:	e0bffb17 	ldw	r2,-20(fp)
}
   21d1c:	e037883a 	mov	sp,fp
   21d20:	df000017 	ldw	fp,0(sp)
   21d24:	dec00104 	addi	sp,sp,4
   21d28:	f800283a 	ret

00021d2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21d2c:	defff304 	addi	sp,sp,-52
   21d30:	dfc00c15 	stw	ra,48(sp)
   21d34:	df000b15 	stw	fp,44(sp)
   21d38:	df000b04 	addi	fp,sp,44
   21d3c:	e13ffc15 	stw	r4,-16(fp)
   21d40:	e17ffd15 	stw	r5,-12(fp)
   21d44:	e1bffe15 	stw	r6,-8(fp)
   21d48:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   21d4c:	e0bffd17 	ldw	r2,-12(fp)
   21d50:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21d54:	00004706 	br	21e74 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   21d58:	e0bffc17 	ldw	r2,-16(fp)
   21d5c:	10800a17 	ldw	r2,40(r2)
   21d60:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   21d64:	e0bffc17 	ldw	r2,-16(fp)
   21d68:	10800b17 	ldw	r2,44(r2)
   21d6c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   21d70:	e0fff717 	ldw	r3,-36(fp)
   21d74:	e0bff817 	ldw	r2,-32(fp)
   21d78:	18800536 	bltu	r3,r2,21d90 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   21d7c:	e0fff717 	ldw	r3,-36(fp)
   21d80:	e0bff817 	ldw	r2,-32(fp)
   21d84:	1885c83a 	sub	r2,r3,r2
   21d88:	e0bff615 	stw	r2,-40(fp)
   21d8c:	00000406 	br	21da0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   21d90:	00c20004 	movi	r3,2048
   21d94:	e0bff817 	ldw	r2,-32(fp)
   21d98:	1885c83a 	sub	r2,r3,r2
   21d9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21da0:	e0bff617 	ldw	r2,-40(fp)
   21da4:	10001e26 	beq	r2,zero,21e20 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   21da8:	e0fffe17 	ldw	r3,-8(fp)
   21dac:	e0bff617 	ldw	r2,-40(fp)
   21db0:	1880022e 	bgeu	r3,r2,21dbc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   21db4:	e0bffe17 	ldw	r2,-8(fp)
   21db8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   21dbc:	e0bffc17 	ldw	r2,-16(fp)
   21dc0:	10c00e04 	addi	r3,r2,56
   21dc4:	e0bff817 	ldw	r2,-32(fp)
   21dc8:	1885883a 	add	r2,r3,r2
   21dcc:	e1bff617 	ldw	r6,-40(fp)
   21dd0:	100b883a 	mov	r5,r2
   21dd4:	e13ff517 	ldw	r4,-44(fp)
   21dd8:	000eb5c0 	call	eb5c <memcpy>
      ptr   += n;
   21ddc:	e0fff517 	ldw	r3,-44(fp)
   21de0:	e0bff617 	ldw	r2,-40(fp)
   21de4:	1885883a 	add	r2,r3,r2
   21de8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   21dec:	e0fffe17 	ldw	r3,-8(fp)
   21df0:	e0bff617 	ldw	r2,-40(fp)
   21df4:	1885c83a 	sub	r2,r3,r2
   21df8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21dfc:	e0fff817 	ldw	r3,-32(fp)
   21e00:	e0bff617 	ldw	r2,-40(fp)
   21e04:	1885883a 	add	r2,r3,r2
   21e08:	10c1ffcc 	andi	r3,r2,2047
   21e0c:	e0bffc17 	ldw	r2,-16(fp)
   21e10:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   21e14:	e0bffe17 	ldw	r2,-8(fp)
   21e18:	00bfcf16 	blt	zero,r2,21d58 <__alt_data_end+0xfc021d58>
   21e1c:	00000106 	br	21e24 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   21e20:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21e24:	e0fff517 	ldw	r3,-44(fp)
   21e28:	e0bffd17 	ldw	r2,-12(fp)
   21e2c:	1880141e 	bne	r3,r2,21e80 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   21e30:	e0bfff17 	ldw	r2,-4(fp)
   21e34:	1090000c 	andi	r2,r2,16384
   21e38:	1000131e 	bne	r2,zero,21e88 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   21e3c:	0001883a 	nop
   21e40:	e0bffc17 	ldw	r2,-16(fp)
   21e44:	10c00a17 	ldw	r3,40(r2)
   21e48:	e0bff717 	ldw	r2,-36(fp)
   21e4c:	1880051e 	bne	r3,r2,21e64 <altera_avalon_jtag_uart_read+0x138>
   21e50:	e0bffc17 	ldw	r2,-16(fp)
   21e54:	10c00917 	ldw	r3,36(r2)
   21e58:	e0bffc17 	ldw	r2,-16(fp)
   21e5c:	10800117 	ldw	r2,4(r2)
   21e60:	18bff736 	bltu	r3,r2,21e40 <__alt_data_end+0xfc021e40>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21e64:	e0bffc17 	ldw	r2,-16(fp)
   21e68:	10c00a17 	ldw	r3,40(r2)
   21e6c:	e0bff717 	ldw	r2,-36(fp)
   21e70:	18800726 	beq	r3,r2,21e90 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21e74:	e0bffe17 	ldw	r2,-8(fp)
   21e78:	00bfb716 	blt	zero,r2,21d58 <__alt_data_end+0xfc021d58>
   21e7c:	00000506 	br	21e94 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   21e80:	0001883a 	nop
   21e84:	00000306 	br	21e94 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   21e88:	0001883a 	nop
   21e8c:	00000106 	br	21e94 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   21e90:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21e94:	e0fff517 	ldw	r3,-44(fp)
   21e98:	e0bffd17 	ldw	r2,-12(fp)
   21e9c:	18801826 	beq	r3,r2,21f00 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ea0:	0005303a 	rdctl	r2,status
   21ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21ea8:	e0fffb17 	ldw	r3,-20(fp)
   21eac:	00bfff84 	movi	r2,-2
   21eb0:	1884703a 	and	r2,r3,r2
   21eb4:	1001703a 	wrctl	status,r2
  
  return context;
   21eb8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   21ebc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21ec0:	e0bffc17 	ldw	r2,-16(fp)
   21ec4:	10800817 	ldw	r2,32(r2)
   21ec8:	10c00054 	ori	r3,r2,1
   21ecc:	e0bffc17 	ldw	r2,-16(fp)
   21ed0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21ed4:	e0bffc17 	ldw	r2,-16(fp)
   21ed8:	10800017 	ldw	r2,0(r2)
   21edc:	10800104 	addi	r2,r2,4
   21ee0:	1007883a 	mov	r3,r2
   21ee4:	e0bffc17 	ldw	r2,-16(fp)
   21ee8:	10800817 	ldw	r2,32(r2)
   21eec:	18800035 	stwio	r2,0(r3)
   21ef0:	e0bffa17 	ldw	r2,-24(fp)
   21ef4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21ef8:	e0bff917 	ldw	r2,-28(fp)
   21efc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   21f00:	e0fff517 	ldw	r3,-44(fp)
   21f04:	e0bffd17 	ldw	r2,-12(fp)
   21f08:	18800426 	beq	r3,r2,21f1c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   21f0c:	e0fff517 	ldw	r3,-44(fp)
   21f10:	e0bffd17 	ldw	r2,-12(fp)
   21f14:	1885c83a 	sub	r2,r3,r2
   21f18:	00000606 	br	21f34 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   21f1c:	e0bfff17 	ldw	r2,-4(fp)
   21f20:	1090000c 	andi	r2,r2,16384
   21f24:	10000226 	beq	r2,zero,21f30 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   21f28:	00bffd44 	movi	r2,-11
   21f2c:	00000106 	br	21f34 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   21f30:	00bffec4 	movi	r2,-5
}
   21f34:	e037883a 	mov	sp,fp
   21f38:	dfc00117 	ldw	ra,4(sp)
   21f3c:	df000017 	ldw	fp,0(sp)
   21f40:	dec00204 	addi	sp,sp,8
   21f44:	f800283a 	ret

00021f48 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21f48:	defff304 	addi	sp,sp,-52
   21f4c:	dfc00c15 	stw	ra,48(sp)
   21f50:	df000b15 	stw	fp,44(sp)
   21f54:	df000b04 	addi	fp,sp,44
   21f58:	e13ffc15 	stw	r4,-16(fp)
   21f5c:	e17ffd15 	stw	r5,-12(fp)
   21f60:	e1bffe15 	stw	r6,-8(fp)
   21f64:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   21f68:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   21f6c:	e0bffd17 	ldw	r2,-12(fp)
   21f70:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21f74:	00003706 	br	22054 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   21f78:	e0bffc17 	ldw	r2,-16(fp)
   21f7c:	10800c17 	ldw	r2,48(r2)
   21f80:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   21f84:	e0bffc17 	ldw	r2,-16(fp)
   21f88:	10800d17 	ldw	r2,52(r2)
   21f8c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   21f90:	e0fff917 	ldw	r3,-28(fp)
   21f94:	e0bff517 	ldw	r2,-44(fp)
   21f98:	1880062e 	bgeu	r3,r2,21fb4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21f9c:	e0fff517 	ldw	r3,-44(fp)
   21fa0:	e0bff917 	ldw	r2,-28(fp)
   21fa4:	1885c83a 	sub	r2,r3,r2
   21fa8:	10bfffc4 	addi	r2,r2,-1
   21fac:	e0bff615 	stw	r2,-40(fp)
   21fb0:	00000b06 	br	21fe0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21fb4:	e0bff517 	ldw	r2,-44(fp)
   21fb8:	10000526 	beq	r2,zero,21fd0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21fbc:	00c20004 	movi	r3,2048
   21fc0:	e0bff917 	ldw	r2,-28(fp)
   21fc4:	1885c83a 	sub	r2,r3,r2
   21fc8:	e0bff615 	stw	r2,-40(fp)
   21fcc:	00000406 	br	21fe0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   21fd0:	00c1ffc4 	movi	r3,2047
   21fd4:	e0bff917 	ldw	r2,-28(fp)
   21fd8:	1885c83a 	sub	r2,r3,r2
   21fdc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   21fe0:	e0bff617 	ldw	r2,-40(fp)
   21fe4:	10001e26 	beq	r2,zero,22060 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21fe8:	e0fffe17 	ldw	r3,-8(fp)
   21fec:	e0bff617 	ldw	r2,-40(fp)
   21ff0:	1880022e 	bgeu	r3,r2,21ffc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   21ff4:	e0bffe17 	ldw	r2,-8(fp)
   21ff8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   21ffc:	e0bffc17 	ldw	r2,-16(fp)
   22000:	10c20e04 	addi	r3,r2,2104
   22004:	e0bff917 	ldw	r2,-28(fp)
   22008:	1885883a 	add	r2,r3,r2
   2200c:	e1bff617 	ldw	r6,-40(fp)
   22010:	e17ffd17 	ldw	r5,-12(fp)
   22014:	1009883a 	mov	r4,r2
   22018:	000eb5c0 	call	eb5c <memcpy>
      ptr   += n;
   2201c:	e0fffd17 	ldw	r3,-12(fp)
   22020:	e0bff617 	ldw	r2,-40(fp)
   22024:	1885883a 	add	r2,r3,r2
   22028:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2202c:	e0fffe17 	ldw	r3,-8(fp)
   22030:	e0bff617 	ldw	r2,-40(fp)
   22034:	1885c83a 	sub	r2,r3,r2
   22038:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2203c:	e0fff917 	ldw	r3,-28(fp)
   22040:	e0bff617 	ldw	r2,-40(fp)
   22044:	1885883a 	add	r2,r3,r2
   22048:	10c1ffcc 	andi	r3,r2,2047
   2204c:	e0bffc17 	ldw	r2,-16(fp)
   22050:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   22054:	e0bffe17 	ldw	r2,-8(fp)
   22058:	00bfc716 	blt	zero,r2,21f78 <__alt_data_end+0xfc021f78>
   2205c:	00000106 	br	22064 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   22060:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22064:	0005303a 	rdctl	r2,status
   22068:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2206c:	e0fffb17 	ldw	r3,-20(fp)
   22070:	00bfff84 	movi	r2,-2
   22074:	1884703a 	and	r2,r3,r2
   22078:	1001703a 	wrctl	status,r2
  
  return context;
   2207c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   22080:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22084:	e0bffc17 	ldw	r2,-16(fp)
   22088:	10800817 	ldw	r2,32(r2)
   2208c:	10c00094 	ori	r3,r2,2
   22090:	e0bffc17 	ldw	r2,-16(fp)
   22094:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22098:	e0bffc17 	ldw	r2,-16(fp)
   2209c:	10800017 	ldw	r2,0(r2)
   220a0:	10800104 	addi	r2,r2,4
   220a4:	1007883a 	mov	r3,r2
   220a8:	e0bffc17 	ldw	r2,-16(fp)
   220ac:	10800817 	ldw	r2,32(r2)
   220b0:	18800035 	stwio	r2,0(r3)
   220b4:	e0bffa17 	ldw	r2,-24(fp)
   220b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   220bc:	e0bff817 	ldw	r2,-32(fp)
   220c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   220c4:	e0bffe17 	ldw	r2,-8(fp)
   220c8:	0080100e 	bge	zero,r2,2210c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   220cc:	e0bfff17 	ldw	r2,-4(fp)
   220d0:	1090000c 	andi	r2,r2,16384
   220d4:	1000101e 	bne	r2,zero,22118 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   220d8:	0001883a 	nop
   220dc:	e0bffc17 	ldw	r2,-16(fp)
   220e0:	10c00d17 	ldw	r3,52(r2)
   220e4:	e0bff517 	ldw	r2,-44(fp)
   220e8:	1880051e 	bne	r3,r2,22100 <altera_avalon_jtag_uart_write+0x1b8>
   220ec:	e0bffc17 	ldw	r2,-16(fp)
   220f0:	10c00917 	ldw	r3,36(r2)
   220f4:	e0bffc17 	ldw	r2,-16(fp)
   220f8:	10800117 	ldw	r2,4(r2)
   220fc:	18bff736 	bltu	r3,r2,220dc <__alt_data_end+0xfc0220dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   22100:	e0bffc17 	ldw	r2,-16(fp)
   22104:	10800917 	ldw	r2,36(r2)
   22108:	1000051e 	bne	r2,zero,22120 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2210c:	e0bffe17 	ldw	r2,-8(fp)
   22110:	00bfd016 	blt	zero,r2,22054 <__alt_data_end+0xfc022054>
   22114:	00000306 	br	22124 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   22118:	0001883a 	nop
   2211c:	00000106 	br	22124 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   22120:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   22124:	e0fffd17 	ldw	r3,-12(fp)
   22128:	e0bff717 	ldw	r2,-36(fp)
   2212c:	18800426 	beq	r3,r2,22140 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   22130:	e0fffd17 	ldw	r3,-12(fp)
   22134:	e0bff717 	ldw	r2,-36(fp)
   22138:	1885c83a 	sub	r2,r3,r2
   2213c:	00000606 	br	22158 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   22140:	e0bfff17 	ldw	r2,-4(fp)
   22144:	1090000c 	andi	r2,r2,16384
   22148:	10000226 	beq	r2,zero,22154 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2214c:	00bffd44 	movi	r2,-11
   22150:	00000106 	br	22158 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   22154:	00bffec4 	movi	r2,-5
}
   22158:	e037883a 	mov	sp,fp
   2215c:	dfc00117 	ldw	ra,4(sp)
   22160:	df000017 	ldw	fp,0(sp)
   22164:	dec00204 	addi	sp,sp,8
   22168:	f800283a 	ret

0002216c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   2216c:	defff404 	addi	sp,sp,-48
   22170:	df000b15 	stw	fp,44(sp)
   22174:	df000b04 	addi	fp,sp,44
   22178:	e13ffc15 	stw	r4,-16(fp)
   2217c:	e17ffd15 	stw	r5,-12(fp)
   22180:	e1bffe15 	stw	r6,-8(fp)
   22184:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   22188:	e0ffff17 	ldw	r3,-4(fp)
   2218c:	e0bffe17 	ldw	r2,-8(fp)
   22190:	1885883a 	add	r2,r3,r2
   22194:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   22198:	e0c00217 	ldw	r3,8(fp)
   2219c:	e0800117 	ldw	r2,4(fp)
   221a0:	1885883a 	add	r2,r3,r2
   221a4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   221a8:	e0800117 	ldw	r2,4(fp)
   221ac:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   221b0:	e0bffe17 	ldw	r2,-8(fp)
   221b4:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   221b8:	00800044 	movi	r2,1
   221bc:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   221c0:	e0bffc17 	ldw	r2,-16(fp)
   221c4:	10800504 	addi	r2,r2,20
   221c8:	1009883a 	mov	r4,r2
   221cc:	00c00044 	movi	r3,1
   221d0:	e0bffd17 	ldw	r2,-12(fp)
   221d4:	1884983a 	sll	r2,r3,r2
   221d8:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   221dc:	e0800317 	ldw	r2,12(fp)
   221e0:	1080008c 	andi	r2,r2,2
   221e4:	1000051e 	bne	r2,zero,221fc <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   221e8:	e0bffc17 	ldw	r2,-16(fp)
   221ec:	10800304 	addi	r2,r2,12
   221f0:	1007883a 	mov	r3,r2
   221f4:	00810004 	movi	r2,1024
   221f8:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   221fc:	e0bffc17 	ldw	r2,-16(fp)
   22200:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22204:	e0bffc17 	ldw	r2,-16(fp)
   22208:	10800204 	addi	r2,r2,8
   2220c:	10800037 	ldwio	r2,0(r2)
   22210:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22214:	e0bffa17 	ldw	r2,-24(fp)
   22218:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   2221c:	10000226 	beq	r2,zero,22228 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22220:	e0bff717 	ldw	r2,-36(fp)
   22224:	1000031e 	bne	r2,zero,22234 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22228:	e0bffa17 	ldw	r2,-24(fp)
   2222c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22230:	103ff426 	beq	r2,zero,22204 <__alt_data_end+0xfc022204>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   22234:	e0bffa17 	ldw	r2,-24(fp)
   22238:	1080100c 	andi	r2,r2,64
   2223c:	10001e26 	beq	r2,zero,222b8 <alt_avalon_spi_command+0x14c>
   22240:	e0bff717 	ldw	r2,-36(fp)
   22244:	00801c0e 	bge	zero,r2,222b8 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   22248:	e0bff717 	ldw	r2,-36(fp)
   2224c:	10bfffc4 	addi	r2,r2,-1
   22250:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   22254:	e0ffff17 	ldw	r3,-4(fp)
   22258:	e0bff817 	ldw	r2,-32(fp)
   2225c:	18800a2e 	bgeu	r3,r2,22288 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   22260:	e0bffc17 	ldw	r2,-16(fp)
   22264:	10800104 	addi	r2,r2,4
   22268:	1009883a 	mov	r4,r2
   2226c:	e0bfff17 	ldw	r2,-4(fp)
   22270:	10c00044 	addi	r3,r2,1
   22274:	e0ffff15 	stw	r3,-4(fp)
   22278:	10800003 	ldbu	r2,0(r2)
   2227c:	10803fcc 	andi	r2,r2,255
   22280:	20800035 	stwio	r2,0(r4)
   22284:	00000c06 	br	222b8 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   22288:	e0bff517 	ldw	r2,-44(fp)
   2228c:	10000826 	beq	r2,zero,222b0 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   22290:	e0bff517 	ldw	r2,-44(fp)
   22294:	10bfffc4 	addi	r2,r2,-1
   22298:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   2229c:	e0bffc17 	ldw	r2,-16(fp)
   222a0:	10800104 	addi	r2,r2,4
   222a4:	0007883a 	mov	r3,zero
   222a8:	10c00035 	stwio	r3,0(r2)
   222ac:	00000206 	br	222b8 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   222b0:	00bf0004 	movi	r2,-1024
   222b4:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   222b8:	e0bffa17 	ldw	r2,-24(fp)
   222bc:	1080200c 	andi	r2,r2,128
   222c0:	103fd026 	beq	r2,zero,22204 <__alt_data_end+0xfc022204>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   222c4:	e0bffc17 	ldw	r2,-16(fp)
   222c8:	10800037 	ldwio	r2,0(r2)
   222cc:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   222d0:	e0bff617 	ldw	r2,-40(fp)
   222d4:	10000426 	beq	r2,zero,222e8 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   222d8:	e0bff617 	ldw	r2,-40(fp)
   222dc:	10bfffc4 	addi	r2,r2,-1
   222e0:	e0bff615 	stw	r2,-40(fp)
   222e4:	00000506 	br	222fc <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   222e8:	e0800217 	ldw	r2,8(fp)
   222ec:	10c00044 	addi	r3,r2,1
   222f0:	e0c00215 	stw	r3,8(fp)
   222f4:	e0fffb17 	ldw	r3,-20(fp)
   222f8:	10c00005 	stb	r3,0(r2)
      credits++;
   222fc:	e0bff717 	ldw	r2,-36(fp)
   22300:	10800044 	addi	r2,r2,1
   22304:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   22308:	e0bff617 	ldw	r2,-40(fp)
   2230c:	103fbd1e 	bne	r2,zero,22204 <__alt_data_end+0xfc022204>
   22310:	e0c00217 	ldw	r3,8(fp)
   22314:	e0bff917 	ldw	r2,-28(fp)
   22318:	18bfba1e 	bne	r3,r2,22204 <__alt_data_end+0xfc022204>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   2231c:	e0bffc17 	ldw	r2,-16(fp)
   22320:	10800204 	addi	r2,r2,8
   22324:	10800037 	ldwio	r2,0(r2)
   22328:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   2232c:	e0bffa17 	ldw	r2,-24(fp)
   22330:	1080080c 	andi	r2,r2,32
   22334:	103ff926 	beq	r2,zero,2231c <__alt_data_end+0xfc02231c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   22338:	e0800317 	ldw	r2,12(fp)
   2233c:	1080004c 	andi	r2,r2,1
   22340:	1000041e 	bne	r2,zero,22354 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   22344:	e0bffc17 	ldw	r2,-16(fp)
   22348:	10800304 	addi	r2,r2,12
   2234c:	0007883a 	mov	r3,zero
   22350:	10c00035 	stwio	r3,0(r2)

  return read_length;
   22354:	e0800117 	ldw	r2,4(fp)
}
   22358:	e037883a 	mov	sp,fp
   2235c:	df000017 	ldw	fp,0(sp)
   22360:	dec00104 	addi	sp,sp,4
   22364:	f800283a 	ret

00022368 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   22368:	defffa04 	addi	sp,sp,-24
   2236c:	dfc00515 	stw	ra,20(sp)
   22370:	df000415 	stw	fp,16(sp)
   22374:	df000404 	addi	fp,sp,16
   22378:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2237c:	0007883a 	mov	r3,zero
   22380:	e0bfff17 	ldw	r2,-4(fp)
   22384:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   22388:	e0bfff17 	ldw	r2,-4(fp)
   2238c:	10800104 	addi	r2,r2,4
   22390:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22394:	0005303a 	rdctl	r2,status
   22398:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2239c:	e0fffd17 	ldw	r3,-12(fp)
   223a0:	00bfff84 	movi	r2,-2
   223a4:	1884703a 	and	r2,r3,r2
   223a8:	1001703a 	wrctl	status,r2
  
  return context;
   223ac:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   223b0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   223b4:	00232d80 	call	232d8 <alt_tick>
   223b8:	e0bffc17 	ldw	r2,-16(fp)
   223bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   223c0:	e0bffe17 	ldw	r2,-8(fp)
   223c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   223c8:	0001883a 	nop
   223cc:	e037883a 	mov	sp,fp
   223d0:	dfc00117 	ldw	ra,4(sp)
   223d4:	df000017 	ldw	fp,0(sp)
   223d8:	dec00204 	addi	sp,sp,8
   223dc:	f800283a 	ret

000223e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   223e0:	defff804 	addi	sp,sp,-32
   223e4:	dfc00715 	stw	ra,28(sp)
   223e8:	df000615 	stw	fp,24(sp)
   223ec:	df000604 	addi	fp,sp,24
   223f0:	e13ffc15 	stw	r4,-16(fp)
   223f4:	e17ffd15 	stw	r5,-12(fp)
   223f8:	e1bffe15 	stw	r6,-8(fp)
   223fc:	e1ffff15 	stw	r7,-4(fp)
   22400:	e0bfff17 	ldw	r2,-4(fp)
   22404:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22408:	d0b24f17 	ldw	r2,-14020(gp)
   2240c:	1000021e 	bne	r2,zero,22418 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   22410:	e0bffb17 	ldw	r2,-20(fp)
   22414:	d0b24f15 	stw	r2,-14020(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22418:	e0bffc17 	ldw	r2,-16(fp)
   2241c:	10800104 	addi	r2,r2,4
   22420:	00c001c4 	movi	r3,7
   22424:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   22428:	d8000015 	stw	zero,0(sp)
   2242c:	e1fffc17 	ldw	r7,-16(fp)
   22430:	018000b4 	movhi	r6,2
   22434:	3188da04 	addi	r6,r6,9064
   22438:	e17ffe17 	ldw	r5,-8(fp)
   2243c:	e13ffd17 	ldw	r4,-12(fp)
   22440:	00229500 	call	22950 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   22444:	0001883a 	nop
   22448:	e037883a 	mov	sp,fp
   2244c:	dfc00117 	ldw	ra,4(sp)
   22450:	df000017 	ldw	fp,0(sp)
   22454:	dec00204 	addi	sp,sp,8
   22458:	f800283a 	ret

0002245c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2245c:	defff504 	addi	sp,sp,-44
   22460:	df000a15 	stw	fp,40(sp)
   22464:	df000a04 	addi	fp,sp,40
   22468:	e13ffc15 	stw	r4,-16(fp)
   2246c:	e17ffd15 	stw	r5,-12(fp)
   22470:	e1bffe15 	stw	r6,-8(fp)
   22474:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   22478:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2247c:	d0b24f17 	ldw	r2,-14020(gp)
  
  if (alt_ticks_per_second ())
   22480:	10003c26 	beq	r2,zero,22574 <alt_alarm_start+0x118>
  {
    if (alarm)
   22484:	e0bffc17 	ldw	r2,-16(fp)
   22488:	10003826 	beq	r2,zero,2256c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2248c:	e0bffc17 	ldw	r2,-16(fp)
   22490:	e0fffe17 	ldw	r3,-8(fp)
   22494:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   22498:	e0bffc17 	ldw	r2,-16(fp)
   2249c:	e0ffff17 	ldw	r3,-4(fp)
   224a0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   224a4:	0005303a 	rdctl	r2,status
   224a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   224ac:	e0fff917 	ldw	r3,-28(fp)
   224b0:	00bfff84 	movi	r2,-2
   224b4:	1884703a 	and	r2,r3,r2
   224b8:	1001703a 	wrctl	status,r2
  
  return context;
   224bc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   224c0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   224c4:	d0b25017 	ldw	r2,-14016(gp)
      
      current_nticks = alt_nticks();
   224c8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   224cc:	e0fffd17 	ldw	r3,-12(fp)
   224d0:	e0bff617 	ldw	r2,-40(fp)
   224d4:	1885883a 	add	r2,r3,r2
   224d8:	10c00044 	addi	r3,r2,1
   224dc:	e0bffc17 	ldw	r2,-16(fp)
   224e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   224e4:	e0bffc17 	ldw	r2,-16(fp)
   224e8:	10c00217 	ldw	r3,8(r2)
   224ec:	e0bff617 	ldw	r2,-40(fp)
   224f0:	1880042e 	bgeu	r3,r2,22504 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   224f4:	e0bffc17 	ldw	r2,-16(fp)
   224f8:	00c00044 	movi	r3,1
   224fc:	10c00405 	stb	r3,16(r2)
   22500:	00000206 	br	2250c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   22504:	e0bffc17 	ldw	r2,-16(fp)
   22508:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2250c:	e0bffc17 	ldw	r2,-16(fp)
   22510:	d0e5c004 	addi	r3,gp,-26880
   22514:	e0fffa15 	stw	r3,-24(fp)
   22518:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2251c:	e0bffb17 	ldw	r2,-20(fp)
   22520:	e0fffa17 	ldw	r3,-24(fp)
   22524:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22528:	e0bffa17 	ldw	r2,-24(fp)
   2252c:	10c00017 	ldw	r3,0(r2)
   22530:	e0bffb17 	ldw	r2,-20(fp)
   22534:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22538:	e0bffa17 	ldw	r2,-24(fp)
   2253c:	10800017 	ldw	r2,0(r2)
   22540:	e0fffb17 	ldw	r3,-20(fp)
   22544:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22548:	e0bffa17 	ldw	r2,-24(fp)
   2254c:	e0fffb17 	ldw	r3,-20(fp)
   22550:	10c00015 	stw	r3,0(r2)
   22554:	e0bff817 	ldw	r2,-32(fp)
   22558:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2255c:	e0bff717 	ldw	r2,-36(fp)
   22560:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   22564:	0005883a 	mov	r2,zero
   22568:	00000306 	br	22578 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2256c:	00bffa84 	movi	r2,-22
   22570:	00000106 	br	22578 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   22574:	00bfde84 	movi	r2,-134
  }
}
   22578:	e037883a 	mov	sp,fp
   2257c:	df000017 	ldw	fp,0(sp)
   22580:	dec00104 	addi	sp,sp,4
   22584:	f800283a 	ret

00022588 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   22588:	defffa04 	addi	sp,sp,-24
   2258c:	dfc00515 	stw	ra,20(sp)
   22590:	df000415 	stw	fp,16(sp)
   22594:	df000404 	addi	fp,sp,16
   22598:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   2259c:	00800244 	movi	r2,9
   225a0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   225a4:	014003f4 	movhi	r5,15
   225a8:	29509004 	addi	r5,r5,16960
   225ac:	e13ffd17 	ldw	r4,-12(fp)
   225b0:	000cda80 	call	cda8 <__mulsi3>
   225b4:	100b883a 	mov	r5,r2
   225b8:	01017db4 	movhi	r4,1526
   225bc:	21384004 	addi	r4,r4,-7936
   225c0:	000ccec0 	call	ccec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   225c4:	100b883a 	mov	r5,r2
   225c8:	01200034 	movhi	r4,32768
   225cc:	213fffc4 	addi	r4,r4,-1
   225d0:	000ccec0 	call	ccec <__udivsi3>
   225d4:	100b883a 	mov	r5,r2
   225d8:	e13fff17 	ldw	r4,-4(fp)
   225dc:	000ccec0 	call	ccec <__udivsi3>
   225e0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   225e4:	e0bffe17 	ldw	r2,-8(fp)
   225e8:	10002a26 	beq	r2,zero,22694 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   225ec:	e03ffc15 	stw	zero,-16(fp)
   225f0:	00001706 	br	22650 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   225f4:	00a00034 	movhi	r2,32768
   225f8:	10bfffc4 	addi	r2,r2,-1
   225fc:	10bfffc4 	addi	r2,r2,-1
   22600:	103ffe1e 	bne	r2,zero,225fc <__alt_data_end+0xfc0225fc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   22604:	014003f4 	movhi	r5,15
   22608:	29509004 	addi	r5,r5,16960
   2260c:	e13ffd17 	ldw	r4,-12(fp)
   22610:	000cda80 	call	cda8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   22614:	100b883a 	mov	r5,r2
   22618:	01017db4 	movhi	r4,1526
   2261c:	21384004 	addi	r4,r4,-7936
   22620:	000ccec0 	call	ccec <__udivsi3>
   22624:	100b883a 	mov	r5,r2
   22628:	01200034 	movhi	r4,32768
   2262c:	213fffc4 	addi	r4,r4,-1
   22630:	000ccec0 	call	ccec <__udivsi3>
   22634:	1007883a 	mov	r3,r2
   22638:	e0bfff17 	ldw	r2,-4(fp)
   2263c:	10c5c83a 	sub	r2,r2,r3
   22640:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   22644:	e0bffc17 	ldw	r2,-16(fp)
   22648:	10800044 	addi	r2,r2,1
   2264c:	e0bffc15 	stw	r2,-16(fp)
   22650:	e0fffc17 	ldw	r3,-16(fp)
   22654:	e0bffe17 	ldw	r2,-8(fp)
   22658:	18bfe616 	blt	r3,r2,225f4 <__alt_data_end+0xfc0225f4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2265c:	014003f4 	movhi	r5,15
   22660:	29509004 	addi	r5,r5,16960
   22664:	e13ffd17 	ldw	r4,-12(fp)
   22668:	000cda80 	call	cda8 <__mulsi3>
   2266c:	100b883a 	mov	r5,r2
   22670:	01017db4 	movhi	r4,1526
   22674:	21384004 	addi	r4,r4,-7936
   22678:	000ccec0 	call	ccec <__udivsi3>
   2267c:	e17fff17 	ldw	r5,-4(fp)
   22680:	1009883a 	mov	r4,r2
   22684:	000cda80 	call	cda8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   22688:	10bfffc4 	addi	r2,r2,-1
   2268c:	103ffe1e 	bne	r2,zero,22688 <__alt_data_end+0xfc022688>
   22690:	00000d06 	br	226c8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22694:	014003f4 	movhi	r5,15
   22698:	29509004 	addi	r5,r5,16960
   2269c:	e13ffd17 	ldw	r4,-12(fp)
   226a0:	000cda80 	call	cda8 <__mulsi3>
   226a4:	100b883a 	mov	r5,r2
   226a8:	01017db4 	movhi	r4,1526
   226ac:	21384004 	addi	r4,r4,-7936
   226b0:	000ccec0 	call	ccec <__udivsi3>
   226b4:	e17fff17 	ldw	r5,-4(fp)
   226b8:	1009883a 	mov	r4,r2
   226bc:	000cda80 	call	cda8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   226c0:	10bfffc4 	addi	r2,r2,-1
   226c4:	00bffe16 	blt	zero,r2,226c0 <__alt_data_end+0xfc0226c0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   226c8:	0005883a 	mov	r2,zero
}
   226cc:	e037883a 	mov	sp,fp
   226d0:	dfc00117 	ldw	ra,4(sp)
   226d4:	df000017 	ldw	fp,0(sp)
   226d8:	dec00204 	addi	sp,sp,8
   226dc:	f800283a 	ret

000226e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   226e0:	deffff04 	addi	sp,sp,-4
   226e4:	df000015 	stw	fp,0(sp)
   226e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   226ec:	0001883a 	nop
   226f0:	e037883a 	mov	sp,fp
   226f4:	df000017 	ldw	fp,0(sp)
   226f8:	dec00104 	addi	sp,sp,4
   226fc:	f800283a 	ret

00022700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22700:	defffe04 	addi	sp,sp,-8
   22704:	dfc00115 	stw	ra,4(sp)
   22708:	df000015 	stw	fp,0(sp)
   2270c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22710:	d0a5bb17 	ldw	r2,-26900(gp)
   22714:	10000326 	beq	r2,zero,22724 <alt_get_errno+0x24>
   22718:	d0a5bb17 	ldw	r2,-26900(gp)
   2271c:	103ee83a 	callr	r2
   22720:	00000106 	br	22728 <alt_get_errno+0x28>
   22724:	d0b24704 	addi	r2,gp,-14052
}
   22728:	e037883a 	mov	sp,fp
   2272c:	dfc00117 	ldw	ra,4(sp)
   22730:	df000017 	ldw	fp,0(sp)
   22734:	dec00204 	addi	sp,sp,8
   22738:	f800283a 	ret

0002273c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2273c:	defffa04 	addi	sp,sp,-24
   22740:	dfc00515 	stw	ra,20(sp)
   22744:	df000415 	stw	fp,16(sp)
   22748:	df000404 	addi	fp,sp,16
   2274c:	e13ffe15 	stw	r4,-8(fp)
   22750:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22754:	e0bffe17 	ldw	r2,-8(fp)
   22758:	10000326 	beq	r2,zero,22768 <alt_dev_llist_insert+0x2c>
   2275c:	e0bffe17 	ldw	r2,-8(fp)
   22760:	10800217 	ldw	r2,8(r2)
   22764:	1000061e 	bne	r2,zero,22780 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22768:	00227000 	call	22700 <alt_get_errno>
   2276c:	1007883a 	mov	r3,r2
   22770:	00800584 	movi	r2,22
   22774:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22778:	00bffa84 	movi	r2,-22
   2277c:	00001306 	br	227cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22780:	e0bffe17 	ldw	r2,-8(fp)
   22784:	e0ffff17 	ldw	r3,-4(fp)
   22788:	e0fffc15 	stw	r3,-16(fp)
   2278c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22790:	e0bffd17 	ldw	r2,-12(fp)
   22794:	e0fffc17 	ldw	r3,-16(fp)
   22798:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2279c:	e0bffc17 	ldw	r2,-16(fp)
   227a0:	10c00017 	ldw	r3,0(r2)
   227a4:	e0bffd17 	ldw	r2,-12(fp)
   227a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   227ac:	e0bffc17 	ldw	r2,-16(fp)
   227b0:	10800017 	ldw	r2,0(r2)
   227b4:	e0fffd17 	ldw	r3,-12(fp)
   227b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   227bc:	e0bffc17 	ldw	r2,-16(fp)
   227c0:	e0fffd17 	ldw	r3,-12(fp)
   227c4:	10c00015 	stw	r3,0(r2)

  return 0;  
   227c8:	0005883a 	mov	r2,zero
}
   227cc:	e037883a 	mov	sp,fp
   227d0:	dfc00117 	ldw	ra,4(sp)
   227d4:	df000017 	ldw	fp,0(sp)
   227d8:	dec00204 	addi	sp,sp,8
   227dc:	f800283a 	ret

000227e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   227e0:	defffd04 	addi	sp,sp,-12
   227e4:	dfc00215 	stw	ra,8(sp)
   227e8:	df000115 	stw	fp,4(sp)
   227ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   227f0:	008000b4 	movhi	r2,2
   227f4:	108e8204 	addi	r2,r2,14856
   227f8:	e0bfff15 	stw	r2,-4(fp)
   227fc:	00000606 	br	22818 <_do_ctors+0x38>
        (*ctor) (); 
   22800:	e0bfff17 	ldw	r2,-4(fp)
   22804:	10800017 	ldw	r2,0(r2)
   22808:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2280c:	e0bfff17 	ldw	r2,-4(fp)
   22810:	10bfff04 	addi	r2,r2,-4
   22814:	e0bfff15 	stw	r2,-4(fp)
   22818:	e0ffff17 	ldw	r3,-4(fp)
   2281c:	008000b4 	movhi	r2,2
   22820:	108e8104 	addi	r2,r2,14852
   22824:	18bff62e 	bgeu	r3,r2,22800 <__alt_data_end+0xfc022800>
        (*ctor) (); 
}
   22828:	0001883a 	nop
   2282c:	e037883a 	mov	sp,fp
   22830:	dfc00117 	ldw	ra,4(sp)
   22834:	df000017 	ldw	fp,0(sp)
   22838:	dec00204 	addi	sp,sp,8
   2283c:	f800283a 	ret

00022840 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22840:	defffd04 	addi	sp,sp,-12
   22844:	dfc00215 	stw	ra,8(sp)
   22848:	df000115 	stw	fp,4(sp)
   2284c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22850:	008000b4 	movhi	r2,2
   22854:	108e8204 	addi	r2,r2,14856
   22858:	e0bfff15 	stw	r2,-4(fp)
   2285c:	00000606 	br	22878 <_do_dtors+0x38>
        (*dtor) (); 
   22860:	e0bfff17 	ldw	r2,-4(fp)
   22864:	10800017 	ldw	r2,0(r2)
   22868:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2286c:	e0bfff17 	ldw	r2,-4(fp)
   22870:	10bfff04 	addi	r2,r2,-4
   22874:	e0bfff15 	stw	r2,-4(fp)
   22878:	e0ffff17 	ldw	r3,-4(fp)
   2287c:	008000b4 	movhi	r2,2
   22880:	108e8304 	addi	r2,r2,14860
   22884:	18bff62e 	bgeu	r3,r2,22860 <__alt_data_end+0xfc022860>
        (*dtor) (); 
}
   22888:	0001883a 	nop
   2288c:	e037883a 	mov	sp,fp
   22890:	dfc00117 	ldw	ra,4(sp)
   22894:	df000017 	ldw	fp,0(sp)
   22898:	dec00204 	addi	sp,sp,8
   2289c:	f800283a 	ret

000228a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   228a0:	defffa04 	addi	sp,sp,-24
   228a4:	dfc00515 	stw	ra,20(sp)
   228a8:	df000415 	stw	fp,16(sp)
   228ac:	df000404 	addi	fp,sp,16
   228b0:	e13ffe15 	stw	r4,-8(fp)
   228b4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   228b8:	e0bfff17 	ldw	r2,-4(fp)
   228bc:	10800017 	ldw	r2,0(r2)
   228c0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   228c4:	e13ffe17 	ldw	r4,-8(fp)
   228c8:	000f4240 	call	f424 <strlen>
   228cc:	10800044 	addi	r2,r2,1
   228d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   228d4:	00000d06 	br	2290c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   228d8:	e0bffc17 	ldw	r2,-16(fp)
   228dc:	10800217 	ldw	r2,8(r2)
   228e0:	e0fffd17 	ldw	r3,-12(fp)
   228e4:	180d883a 	mov	r6,r3
   228e8:	e17ffe17 	ldw	r5,-8(fp)
   228ec:	1009883a 	mov	r4,r2
   228f0:	00236b80 	call	236b8 <memcmp>
   228f4:	1000021e 	bne	r2,zero,22900 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   228f8:	e0bffc17 	ldw	r2,-16(fp)
   228fc:	00000706 	br	2291c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22900:	e0bffc17 	ldw	r2,-16(fp)
   22904:	10800017 	ldw	r2,0(r2)
   22908:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2290c:	e0fffc17 	ldw	r3,-16(fp)
   22910:	e0bfff17 	ldw	r2,-4(fp)
   22914:	18bff01e 	bne	r3,r2,228d8 <__alt_data_end+0xfc0228d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   22918:	0005883a 	mov	r2,zero
}
   2291c:	e037883a 	mov	sp,fp
   22920:	dfc00117 	ldw	ra,4(sp)
   22924:	df000017 	ldw	fp,0(sp)
   22928:	dec00204 	addi	sp,sp,8
   2292c:	f800283a 	ret

00022930 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22930:	deffff04 	addi	sp,sp,-4
   22934:	df000015 	stw	fp,0(sp)
   22938:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2293c:	0001883a 	nop
   22940:	e037883a 	mov	sp,fp
   22944:	df000017 	ldw	fp,0(sp)
   22948:	dec00104 	addi	sp,sp,4
   2294c:	f800283a 	ret

00022950 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22950:	defff904 	addi	sp,sp,-28
   22954:	dfc00615 	stw	ra,24(sp)
   22958:	df000515 	stw	fp,20(sp)
   2295c:	df000504 	addi	fp,sp,20
   22960:	e13ffc15 	stw	r4,-16(fp)
   22964:	e17ffd15 	stw	r5,-12(fp)
   22968:	e1bffe15 	stw	r6,-8(fp)
   2296c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22970:	e0800217 	ldw	r2,8(fp)
   22974:	d8800015 	stw	r2,0(sp)
   22978:	e1ffff17 	ldw	r7,-4(fp)
   2297c:	e1bffe17 	ldw	r6,-8(fp)
   22980:	e17ffd17 	ldw	r5,-12(fp)
   22984:	e13ffc17 	ldw	r4,-16(fp)
   22988:	0022b000 	call	22b00 <alt_iic_isr_register>
}  
   2298c:	e037883a 	mov	sp,fp
   22990:	dfc00117 	ldw	ra,4(sp)
   22994:	df000017 	ldw	fp,0(sp)
   22998:	dec00204 	addi	sp,sp,8
   2299c:	f800283a 	ret

000229a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   229a0:	defff904 	addi	sp,sp,-28
   229a4:	df000615 	stw	fp,24(sp)
   229a8:	df000604 	addi	fp,sp,24
   229ac:	e13ffe15 	stw	r4,-8(fp)
   229b0:	e17fff15 	stw	r5,-4(fp)
   229b4:	e0bfff17 	ldw	r2,-4(fp)
   229b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   229bc:	0005303a 	rdctl	r2,status
   229c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   229c4:	e0fffb17 	ldw	r3,-20(fp)
   229c8:	00bfff84 	movi	r2,-2
   229cc:	1884703a 	and	r2,r3,r2
   229d0:	1001703a 	wrctl	status,r2
  
  return context;
   229d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   229d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   229dc:	00c00044 	movi	r3,1
   229e0:	e0bffa17 	ldw	r2,-24(fp)
   229e4:	1884983a 	sll	r2,r3,r2
   229e8:	1007883a 	mov	r3,r2
   229ec:	d0b24e17 	ldw	r2,-14024(gp)
   229f0:	1884b03a 	or	r2,r3,r2
   229f4:	d0b24e15 	stw	r2,-14024(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   229f8:	d0b24e17 	ldw	r2,-14024(gp)
   229fc:	100170fa 	wrctl	ienable,r2
   22a00:	e0bffc17 	ldw	r2,-16(fp)
   22a04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22a08:	e0bffd17 	ldw	r2,-12(fp)
   22a0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22a10:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22a14:	0001883a 	nop
}
   22a18:	e037883a 	mov	sp,fp
   22a1c:	df000017 	ldw	fp,0(sp)
   22a20:	dec00104 	addi	sp,sp,4
   22a24:	f800283a 	ret

00022a28 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22a28:	defff904 	addi	sp,sp,-28
   22a2c:	df000615 	stw	fp,24(sp)
   22a30:	df000604 	addi	fp,sp,24
   22a34:	e13ffe15 	stw	r4,-8(fp)
   22a38:	e17fff15 	stw	r5,-4(fp)
   22a3c:	e0bfff17 	ldw	r2,-4(fp)
   22a40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22a44:	0005303a 	rdctl	r2,status
   22a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22a4c:	e0fffb17 	ldw	r3,-20(fp)
   22a50:	00bfff84 	movi	r2,-2
   22a54:	1884703a 	and	r2,r3,r2
   22a58:	1001703a 	wrctl	status,r2
  
  return context;
   22a5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22a60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22a64:	00c00044 	movi	r3,1
   22a68:	e0bffa17 	ldw	r2,-24(fp)
   22a6c:	1884983a 	sll	r2,r3,r2
   22a70:	0084303a 	nor	r2,zero,r2
   22a74:	1007883a 	mov	r3,r2
   22a78:	d0b24e17 	ldw	r2,-14024(gp)
   22a7c:	1884703a 	and	r2,r3,r2
   22a80:	d0b24e15 	stw	r2,-14024(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22a84:	d0b24e17 	ldw	r2,-14024(gp)
   22a88:	100170fa 	wrctl	ienable,r2
   22a8c:	e0bffc17 	ldw	r2,-16(fp)
   22a90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22a94:	e0bffd17 	ldw	r2,-12(fp)
   22a98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22a9c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22aa0:	0001883a 	nop
}
   22aa4:	e037883a 	mov	sp,fp
   22aa8:	df000017 	ldw	fp,0(sp)
   22aac:	dec00104 	addi	sp,sp,4
   22ab0:	f800283a 	ret

00022ab4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   22ab4:	defffc04 	addi	sp,sp,-16
   22ab8:	df000315 	stw	fp,12(sp)
   22abc:	df000304 	addi	fp,sp,12
   22ac0:	e13ffe15 	stw	r4,-8(fp)
   22ac4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   22ac8:	000530fa 	rdctl	r2,ienable
   22acc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22ad0:	00c00044 	movi	r3,1
   22ad4:	e0bfff17 	ldw	r2,-4(fp)
   22ad8:	1884983a 	sll	r2,r3,r2
   22adc:	1007883a 	mov	r3,r2
   22ae0:	e0bffd17 	ldw	r2,-12(fp)
   22ae4:	1884703a 	and	r2,r3,r2
   22ae8:	1004c03a 	cmpne	r2,r2,zero
   22aec:	10803fcc 	andi	r2,r2,255
}
   22af0:	e037883a 	mov	sp,fp
   22af4:	df000017 	ldw	fp,0(sp)
   22af8:	dec00104 	addi	sp,sp,4
   22afc:	f800283a 	ret

00022b00 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22b00:	defff504 	addi	sp,sp,-44
   22b04:	dfc00a15 	stw	ra,40(sp)
   22b08:	df000915 	stw	fp,36(sp)
   22b0c:	df000904 	addi	fp,sp,36
   22b10:	e13ffc15 	stw	r4,-16(fp)
   22b14:	e17ffd15 	stw	r5,-12(fp)
   22b18:	e1bffe15 	stw	r6,-8(fp)
   22b1c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22b20:	00bffa84 	movi	r2,-22
   22b24:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22b28:	e0bffd17 	ldw	r2,-12(fp)
   22b2c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22b30:	e0bff817 	ldw	r2,-32(fp)
   22b34:	10800808 	cmpgei	r2,r2,32
   22b38:	1000271e 	bne	r2,zero,22bd8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22b3c:	0005303a 	rdctl	r2,status
   22b40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22b44:	e0fffb17 	ldw	r3,-20(fp)
   22b48:	00bfff84 	movi	r2,-2
   22b4c:	1884703a 	and	r2,r3,r2
   22b50:	1001703a 	wrctl	status,r2
  
  return context;
   22b54:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22b58:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   22b5c:	008000f4 	movhi	r2,3
   22b60:	10844204 	addi	r2,r2,4360
   22b64:	e0fff817 	ldw	r3,-32(fp)
   22b68:	180690fa 	slli	r3,r3,3
   22b6c:	10c5883a 	add	r2,r2,r3
   22b70:	e0fffe17 	ldw	r3,-8(fp)
   22b74:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22b78:	008000f4 	movhi	r2,3
   22b7c:	10844204 	addi	r2,r2,4360
   22b80:	e0fff817 	ldw	r3,-32(fp)
   22b84:	180690fa 	slli	r3,r3,3
   22b88:	10c5883a 	add	r2,r2,r3
   22b8c:	10800104 	addi	r2,r2,4
   22b90:	e0ffff17 	ldw	r3,-4(fp)
   22b94:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22b98:	e0bffe17 	ldw	r2,-8(fp)
   22b9c:	10000526 	beq	r2,zero,22bb4 <alt_iic_isr_register+0xb4>
   22ba0:	e0bff817 	ldw	r2,-32(fp)
   22ba4:	100b883a 	mov	r5,r2
   22ba8:	e13ffc17 	ldw	r4,-16(fp)
   22bac:	00229a00 	call	229a0 <alt_ic_irq_enable>
   22bb0:	00000406 	br	22bc4 <alt_iic_isr_register+0xc4>
   22bb4:	e0bff817 	ldw	r2,-32(fp)
   22bb8:	100b883a 	mov	r5,r2
   22bbc:	e13ffc17 	ldw	r4,-16(fp)
   22bc0:	0022a280 	call	22a28 <alt_ic_irq_disable>
   22bc4:	e0bff715 	stw	r2,-36(fp)
   22bc8:	e0bffa17 	ldw	r2,-24(fp)
   22bcc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22bd0:	e0bff917 	ldw	r2,-28(fp)
   22bd4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22bd8:	e0bff717 	ldw	r2,-36(fp)
}
   22bdc:	e037883a 	mov	sp,fp
   22be0:	dfc00117 	ldw	ra,4(sp)
   22be4:	df000017 	ldw	fp,0(sp)
   22be8:	dec00204 	addi	sp,sp,8
   22bec:	f800283a 	ret

00022bf0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22bf0:	defff804 	addi	sp,sp,-32
   22bf4:	dfc00715 	stw	ra,28(sp)
   22bf8:	df000615 	stw	fp,24(sp)
   22bfc:	dc000515 	stw	r16,20(sp)
   22c00:	df000604 	addi	fp,sp,24
   22c04:	e13ffb15 	stw	r4,-20(fp)
   22c08:	e17ffc15 	stw	r5,-16(fp)
   22c0c:	e1bffd15 	stw	r6,-12(fp)
   22c10:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   22c14:	e1bffe17 	ldw	r6,-8(fp)
   22c18:	e17ffd17 	ldw	r5,-12(fp)
   22c1c:	e13ffc17 	ldw	r4,-16(fp)
   22c20:	0022e780 	call	22e78 <open>
   22c24:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   22c28:	e0bffa17 	ldw	r2,-24(fp)
   22c2c:	10002216 	blt	r2,zero,22cb8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   22c30:	040000f4 	movhi	r16,3
   22c34:	842d1404 	addi	r16,r16,-19376
   22c38:	e0bffa17 	ldw	r2,-24(fp)
   22c3c:	01400304 	movi	r5,12
   22c40:	1009883a 	mov	r4,r2
   22c44:	000cda80 	call	cda8 <__mulsi3>
   22c48:	8085883a 	add	r2,r16,r2
   22c4c:	10c00017 	ldw	r3,0(r2)
   22c50:	e0bffb17 	ldw	r2,-20(fp)
   22c54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22c58:	040000f4 	movhi	r16,3
   22c5c:	842d1404 	addi	r16,r16,-19376
   22c60:	e0bffa17 	ldw	r2,-24(fp)
   22c64:	01400304 	movi	r5,12
   22c68:	1009883a 	mov	r4,r2
   22c6c:	000cda80 	call	cda8 <__mulsi3>
   22c70:	8085883a 	add	r2,r16,r2
   22c74:	10800104 	addi	r2,r2,4
   22c78:	10c00017 	ldw	r3,0(r2)
   22c7c:	e0bffb17 	ldw	r2,-20(fp)
   22c80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   22c84:	040000f4 	movhi	r16,3
   22c88:	842d1404 	addi	r16,r16,-19376
   22c8c:	e0bffa17 	ldw	r2,-24(fp)
   22c90:	01400304 	movi	r5,12
   22c94:	1009883a 	mov	r4,r2
   22c98:	000cda80 	call	cda8 <__mulsi3>
   22c9c:	8085883a 	add	r2,r16,r2
   22ca0:	10800204 	addi	r2,r2,8
   22ca4:	10c00017 	ldw	r3,0(r2)
   22ca8:	e0bffb17 	ldw	r2,-20(fp)
   22cac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22cb0:	e13ffa17 	ldw	r4,-24(fp)
   22cb4:	001f6b80 	call	1f6b8 <alt_release_fd>
  }
} 
   22cb8:	0001883a 	nop
   22cbc:	e6ffff04 	addi	sp,fp,-4
   22cc0:	dfc00217 	ldw	ra,8(sp)
   22cc4:	df000117 	ldw	fp,4(sp)
   22cc8:	dc000017 	ldw	r16,0(sp)
   22ccc:	dec00304 	addi	sp,sp,12
   22cd0:	f800283a 	ret

00022cd4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   22cd4:	defffb04 	addi	sp,sp,-20
   22cd8:	dfc00415 	stw	ra,16(sp)
   22cdc:	df000315 	stw	fp,12(sp)
   22ce0:	df000304 	addi	fp,sp,12
   22ce4:	e13ffd15 	stw	r4,-12(fp)
   22ce8:	e17ffe15 	stw	r5,-8(fp)
   22cec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22cf0:	01c07fc4 	movi	r7,511
   22cf4:	01800044 	movi	r6,1
   22cf8:	e17ffd17 	ldw	r5,-12(fp)
   22cfc:	010000f4 	movhi	r4,3
   22d00:	212d1704 	addi	r4,r4,-19364
   22d04:	0022bf00 	call	22bf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22d08:	01c07fc4 	movi	r7,511
   22d0c:	000d883a 	mov	r6,zero
   22d10:	e17ffe17 	ldw	r5,-8(fp)
   22d14:	010000f4 	movhi	r4,3
   22d18:	212d1404 	addi	r4,r4,-19376
   22d1c:	0022bf00 	call	22bf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22d20:	01c07fc4 	movi	r7,511
   22d24:	01800044 	movi	r6,1
   22d28:	e17fff17 	ldw	r5,-4(fp)
   22d2c:	010000f4 	movhi	r4,3
   22d30:	212d1a04 	addi	r4,r4,-19352
   22d34:	0022bf00 	call	22bf0 <alt_open_fd>
}  
   22d38:	0001883a 	nop
   22d3c:	e037883a 	mov	sp,fp
   22d40:	dfc00117 	ldw	ra,4(sp)
   22d44:	df000017 	ldw	fp,0(sp)
   22d48:	dec00204 	addi	sp,sp,8
   22d4c:	f800283a 	ret

00022d50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22d50:	defffe04 	addi	sp,sp,-8
   22d54:	dfc00115 	stw	ra,4(sp)
   22d58:	df000015 	stw	fp,0(sp)
   22d5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22d60:	d0a5bb17 	ldw	r2,-26900(gp)
   22d64:	10000326 	beq	r2,zero,22d74 <alt_get_errno+0x24>
   22d68:	d0a5bb17 	ldw	r2,-26900(gp)
   22d6c:	103ee83a 	callr	r2
   22d70:	00000106 	br	22d78 <alt_get_errno+0x28>
   22d74:	d0b24704 	addi	r2,gp,-14052
}
   22d78:	e037883a 	mov	sp,fp
   22d7c:	dfc00117 	ldw	ra,4(sp)
   22d80:	df000017 	ldw	fp,0(sp)
   22d84:	dec00204 	addi	sp,sp,8
   22d88:	f800283a 	ret

00022d8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22d8c:	defffb04 	addi	sp,sp,-20
   22d90:	dfc00415 	stw	ra,16(sp)
   22d94:	df000315 	stw	fp,12(sp)
   22d98:	dc000215 	stw	r16,8(sp)
   22d9c:	df000304 	addi	fp,sp,12
   22da0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22da4:	e0bffe17 	ldw	r2,-8(fp)
   22da8:	10800217 	ldw	r2,8(r2)
   22dac:	10d00034 	orhi	r3,r2,16384
   22db0:	e0bffe17 	ldw	r2,-8(fp)
   22db4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22db8:	e03ffd15 	stw	zero,-12(fp)
   22dbc:	00002306 	br	22e4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22dc0:	040000f4 	movhi	r16,3
   22dc4:	842d1404 	addi	r16,r16,-19376
   22dc8:	e0bffd17 	ldw	r2,-12(fp)
   22dcc:	01400304 	movi	r5,12
   22dd0:	1009883a 	mov	r4,r2
   22dd4:	000cda80 	call	cda8 <__mulsi3>
   22dd8:	8085883a 	add	r2,r16,r2
   22ddc:	10c00017 	ldw	r3,0(r2)
   22de0:	e0bffe17 	ldw	r2,-8(fp)
   22de4:	10800017 	ldw	r2,0(r2)
   22de8:	1880151e 	bne	r3,r2,22e40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22dec:	040000f4 	movhi	r16,3
   22df0:	842d1404 	addi	r16,r16,-19376
   22df4:	e0bffd17 	ldw	r2,-12(fp)
   22df8:	01400304 	movi	r5,12
   22dfc:	1009883a 	mov	r4,r2
   22e00:	000cda80 	call	cda8 <__mulsi3>
   22e04:	8085883a 	add	r2,r16,r2
   22e08:	10800204 	addi	r2,r2,8
   22e0c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22e10:	10000b0e 	bge	r2,zero,22e40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22e14:	01400304 	movi	r5,12
   22e18:	e13ffd17 	ldw	r4,-12(fp)
   22e1c:	000cda80 	call	cda8 <__mulsi3>
   22e20:	1007883a 	mov	r3,r2
   22e24:	008000f4 	movhi	r2,3
   22e28:	10ad1404 	addi	r2,r2,-19376
   22e2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22e30:	e0bffe17 	ldw	r2,-8(fp)
   22e34:	18800226 	beq	r3,r2,22e40 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22e38:	00bffcc4 	movi	r2,-13
   22e3c:	00000806 	br	22e60 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22e40:	e0bffd17 	ldw	r2,-12(fp)
   22e44:	10800044 	addi	r2,r2,1
   22e48:	e0bffd15 	stw	r2,-12(fp)
   22e4c:	d0a5ba17 	ldw	r2,-26904(gp)
   22e50:	1007883a 	mov	r3,r2
   22e54:	e0bffd17 	ldw	r2,-12(fp)
   22e58:	18bfd92e 	bgeu	r3,r2,22dc0 <__alt_data_end+0xfc022dc0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22e5c:	0005883a 	mov	r2,zero
}
   22e60:	e6ffff04 	addi	sp,fp,-4
   22e64:	dfc00217 	ldw	ra,8(sp)
   22e68:	df000117 	ldw	fp,4(sp)
   22e6c:	dc000017 	ldw	r16,0(sp)
   22e70:	dec00304 	addi	sp,sp,12
   22e74:	f800283a 	ret

00022e78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22e78:	defff604 	addi	sp,sp,-40
   22e7c:	dfc00915 	stw	ra,36(sp)
   22e80:	df000815 	stw	fp,32(sp)
   22e84:	df000804 	addi	fp,sp,32
   22e88:	e13ffd15 	stw	r4,-12(fp)
   22e8c:	e17ffe15 	stw	r5,-8(fp)
   22e90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22e94:	00bfffc4 	movi	r2,-1
   22e98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22e9c:	00bffb44 	movi	r2,-19
   22ea0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22ea4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22ea8:	d165b804 	addi	r5,gp,-26912
   22eac:	e13ffd17 	ldw	r4,-12(fp)
   22eb0:	00228a00 	call	228a0 <alt_find_dev>
   22eb4:	e0bff815 	stw	r2,-32(fp)
   22eb8:	e0bff817 	ldw	r2,-32(fp)
   22ebc:	1000051e 	bne	r2,zero,22ed4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22ec0:	e13ffd17 	ldw	r4,-12(fp)
   22ec4:	00234040 	call	23404 <alt_find_file>
   22ec8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22ecc:	00800044 	movi	r2,1
   22ed0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22ed4:	e0bff817 	ldw	r2,-32(fp)
   22ed8:	10002b26 	beq	r2,zero,22f88 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22edc:	e13ff817 	ldw	r4,-32(fp)
   22ee0:	002350c0 	call	2350c <alt_get_fd>
   22ee4:	e0bff915 	stw	r2,-28(fp)
   22ee8:	e0bff917 	ldw	r2,-28(fp)
   22eec:	1000030e 	bge	r2,zero,22efc <open+0x84>
    {
      status = index;
   22ef0:	e0bff917 	ldw	r2,-28(fp)
   22ef4:	e0bffa15 	stw	r2,-24(fp)
   22ef8:	00002506 	br	22f90 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   22efc:	01400304 	movi	r5,12
   22f00:	e13ff917 	ldw	r4,-28(fp)
   22f04:	000cda80 	call	cda8 <__mulsi3>
   22f08:	1007883a 	mov	r3,r2
   22f0c:	008000f4 	movhi	r2,3
   22f10:	10ad1404 	addi	r2,r2,-19376
   22f14:	1885883a 	add	r2,r3,r2
   22f18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22f1c:	e0fffe17 	ldw	r3,-8(fp)
   22f20:	00900034 	movhi	r2,16384
   22f24:	10bfffc4 	addi	r2,r2,-1
   22f28:	1886703a 	and	r3,r3,r2
   22f2c:	e0bffc17 	ldw	r2,-16(fp)
   22f30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22f34:	e0bffb17 	ldw	r2,-20(fp)
   22f38:	1000051e 	bne	r2,zero,22f50 <open+0xd8>
   22f3c:	e13ffc17 	ldw	r4,-16(fp)
   22f40:	0022d8c0 	call	22d8c <alt_file_locked>
   22f44:	e0bffa15 	stw	r2,-24(fp)
   22f48:	e0bffa17 	ldw	r2,-24(fp)
   22f4c:	10001016 	blt	r2,zero,22f90 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22f50:	e0bff817 	ldw	r2,-32(fp)
   22f54:	10800317 	ldw	r2,12(r2)
   22f58:	10000826 	beq	r2,zero,22f7c <open+0x104>
   22f5c:	e0bff817 	ldw	r2,-32(fp)
   22f60:	10800317 	ldw	r2,12(r2)
   22f64:	e1ffff17 	ldw	r7,-4(fp)
   22f68:	e1bffe17 	ldw	r6,-8(fp)
   22f6c:	e17ffd17 	ldw	r5,-12(fp)
   22f70:	e13ffc17 	ldw	r4,-16(fp)
   22f74:	103ee83a 	callr	r2
   22f78:	00000106 	br	22f80 <open+0x108>
   22f7c:	0005883a 	mov	r2,zero
   22f80:	e0bffa15 	stw	r2,-24(fp)
   22f84:	00000206 	br	22f90 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22f88:	00bffb44 	movi	r2,-19
   22f8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22f90:	e0bffa17 	ldw	r2,-24(fp)
   22f94:	1000090e 	bge	r2,zero,22fbc <open+0x144>
  {
    alt_release_fd (index);  
   22f98:	e13ff917 	ldw	r4,-28(fp)
   22f9c:	001f6b80 	call	1f6b8 <alt_release_fd>
    ALT_ERRNO = -status;
   22fa0:	0022d500 	call	22d50 <alt_get_errno>
   22fa4:	1007883a 	mov	r3,r2
   22fa8:	e0bffa17 	ldw	r2,-24(fp)
   22fac:	0085c83a 	sub	r2,zero,r2
   22fb0:	18800015 	stw	r2,0(r3)
    return -1;
   22fb4:	00bfffc4 	movi	r2,-1
   22fb8:	00000106 	br	22fc0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   22fbc:	e0bff917 	ldw	r2,-28(fp)
}
   22fc0:	e037883a 	mov	sp,fp
   22fc4:	dfc00117 	ldw	ra,4(sp)
   22fc8:	df000017 	ldw	fp,0(sp)
   22fcc:	dec00204 	addi	sp,sp,8
   22fd0:	f800283a 	ret

00022fd4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   22fd4:	defff204 	addi	sp,sp,-56
   22fd8:	dfc00a15 	stw	ra,40(sp)
   22fdc:	df000915 	stw	fp,36(sp)
   22fe0:	df000904 	addi	fp,sp,36
   22fe4:	e13fff15 	stw	r4,-4(fp)
   22fe8:	e1400215 	stw	r5,8(fp)
   22fec:	e1800315 	stw	r6,12(fp)
   22ff0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   22ff4:	e0800204 	addi	r2,fp,8
   22ff8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   22ffc:	e0bfff17 	ldw	r2,-4(fp)
   23000:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   23004:	00006f06 	br	231c4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   23008:	e0bff807 	ldb	r2,-32(fp)
   2300c:	10800960 	cmpeqi	r2,r2,37
   23010:	1000041e 	bne	r2,zero,23024 <alt_printf+0x50>
        {
            alt_putchar(c);
   23014:	e0bff807 	ldb	r2,-32(fp)
   23018:	1009883a 	mov	r4,r2
   2301c:	00232000 	call	23200 <alt_putchar>
   23020:	00006806 	br	231c4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   23024:	e0bff717 	ldw	r2,-36(fp)
   23028:	10c00044 	addi	r3,r2,1
   2302c:	e0fff715 	stw	r3,-36(fp)
   23030:	10800003 	ldbu	r2,0(r2)
   23034:	e0bff805 	stb	r2,-32(fp)
   23038:	e0bff807 	ldb	r2,-32(fp)
   2303c:	10006926 	beq	r2,zero,231e4 <alt_printf+0x210>
            {
                if (c == '%')
   23040:	e0bff807 	ldb	r2,-32(fp)
   23044:	10800958 	cmpnei	r2,r2,37
   23048:	1000041e 	bne	r2,zero,2305c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   2304c:	e0bff807 	ldb	r2,-32(fp)
   23050:	1009883a 	mov	r4,r2
   23054:	00232000 	call	23200 <alt_putchar>
   23058:	00005a06 	br	231c4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   2305c:	e0bff807 	ldb	r2,-32(fp)
   23060:	108018d8 	cmpnei	r2,r2,99
   23064:	1000081e 	bne	r2,zero,23088 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   23068:	e0bffe17 	ldw	r2,-8(fp)
   2306c:	10c00104 	addi	r3,r2,4
   23070:	e0fffe15 	stw	r3,-8(fp)
   23074:	10800017 	ldw	r2,0(r2)
   23078:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   2307c:	e13ffd17 	ldw	r4,-12(fp)
   23080:	00232000 	call	23200 <alt_putchar>
   23084:	00004f06 	br	231c4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   23088:	e0bff807 	ldb	r2,-32(fp)
   2308c:	10801e18 	cmpnei	r2,r2,120
   23090:	1000341e 	bne	r2,zero,23164 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   23094:	e0bffe17 	ldw	r2,-8(fp)
   23098:	10c00104 	addi	r3,r2,4
   2309c:	e0fffe15 	stw	r3,-8(fp)
   230a0:	10800017 	ldw	r2,0(r2)
   230a4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   230a8:	e0bffb17 	ldw	r2,-20(fp)
   230ac:	1000031e 	bne	r2,zero,230bc <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   230b0:	01000c04 	movi	r4,48
   230b4:	00232000 	call	23200 <alt_putchar>
                        continue;
   230b8:	00004206 	br	231c4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   230bc:	00800704 	movi	r2,28
   230c0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   230c4:	00000306 	br	230d4 <alt_printf+0x100>
                        digit_shift -= 4;
   230c8:	e0bff917 	ldw	r2,-28(fp)
   230cc:	10bfff04 	addi	r2,r2,-4
   230d0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   230d4:	00c003c4 	movi	r3,15
   230d8:	e0bff917 	ldw	r2,-28(fp)
   230dc:	1884983a 	sll	r2,r3,r2
   230e0:	1007883a 	mov	r3,r2
   230e4:	e0bffb17 	ldw	r2,-20(fp)
   230e8:	1884703a 	and	r2,r3,r2
   230ec:	103ff626 	beq	r2,zero,230c8 <__alt_data_end+0xfc0230c8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   230f0:	00001906 	br	23158 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   230f4:	00c003c4 	movi	r3,15
   230f8:	e0bff917 	ldw	r2,-28(fp)
   230fc:	1884983a 	sll	r2,r3,r2
   23100:	1007883a 	mov	r3,r2
   23104:	e0bffb17 	ldw	r2,-20(fp)
   23108:	1886703a 	and	r3,r3,r2
   2310c:	e0bff917 	ldw	r2,-28(fp)
   23110:	1884d83a 	srl	r2,r3,r2
   23114:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   23118:	e0bffc17 	ldw	r2,-16(fp)
   2311c:	108002a8 	cmpgeui	r2,r2,10
   23120:	1000041e 	bne	r2,zero,23134 <alt_printf+0x160>
                            c = '0' + digit;
   23124:	e0bffc17 	ldw	r2,-16(fp)
   23128:	10800c04 	addi	r2,r2,48
   2312c:	e0bff805 	stb	r2,-32(fp)
   23130:	00000306 	br	23140 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   23134:	e0bffc17 	ldw	r2,-16(fp)
   23138:	108015c4 	addi	r2,r2,87
   2313c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   23140:	e0bff807 	ldb	r2,-32(fp)
   23144:	1009883a 	mov	r4,r2
   23148:	00232000 	call	23200 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2314c:	e0bff917 	ldw	r2,-28(fp)
   23150:	10bfff04 	addi	r2,r2,-4
   23154:	e0bff915 	stw	r2,-28(fp)
   23158:	e0bff917 	ldw	r2,-28(fp)
   2315c:	103fe50e 	bge	r2,zero,230f4 <__alt_data_end+0xfc0230f4>
   23160:	00001806 	br	231c4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   23164:	e0bff807 	ldb	r2,-32(fp)
   23168:	10801cd8 	cmpnei	r2,r2,115
   2316c:	1000151e 	bne	r2,zero,231c4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   23170:	e0bffe17 	ldw	r2,-8(fp)
   23174:	10c00104 	addi	r3,r2,4
   23178:	e0fffe15 	stw	r3,-8(fp)
   2317c:	10800017 	ldw	r2,0(r2)
   23180:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   23184:	00000906 	br	231ac <alt_printf+0x1d8>
                      alt_putchar(*s++);
   23188:	e0bffa17 	ldw	r2,-24(fp)
   2318c:	10c00044 	addi	r3,r2,1
   23190:	e0fffa15 	stw	r3,-24(fp)
   23194:	10800003 	ldbu	r2,0(r2)
   23198:	10803fcc 	andi	r2,r2,255
   2319c:	1080201c 	xori	r2,r2,128
   231a0:	10bfe004 	addi	r2,r2,-128
   231a4:	1009883a 	mov	r4,r2
   231a8:	00232000 	call	23200 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   231ac:	e0bffa17 	ldw	r2,-24(fp)
   231b0:	10800003 	ldbu	r2,0(r2)
   231b4:	10803fcc 	andi	r2,r2,255
   231b8:	1080201c 	xori	r2,r2,128
   231bc:	10bfe004 	addi	r2,r2,-128
   231c0:	103ff11e 	bne	r2,zero,23188 <__alt_data_end+0xfc023188>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   231c4:	e0bff717 	ldw	r2,-36(fp)
   231c8:	10c00044 	addi	r3,r2,1
   231cc:	e0fff715 	stw	r3,-36(fp)
   231d0:	10800003 	ldbu	r2,0(r2)
   231d4:	e0bff805 	stb	r2,-32(fp)
   231d8:	e0bff807 	ldb	r2,-32(fp)
   231dc:	103f8a1e 	bne	r2,zero,23008 <__alt_data_end+0xfc023008>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   231e0:	00000106 	br	231e8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   231e4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   231e8:	0001883a 	nop
   231ec:	e037883a 	mov	sp,fp
   231f0:	dfc00117 	ldw	ra,4(sp)
   231f4:	df000017 	ldw	fp,0(sp)
   231f8:	dec00504 	addi	sp,sp,20
   231fc:	f800283a 	ret

00023200 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   23200:	defffd04 	addi	sp,sp,-12
   23204:	dfc00215 	stw	ra,8(sp)
   23208:	df000115 	stw	fp,4(sp)
   2320c:	df000104 	addi	fp,sp,4
   23210:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   23214:	d0a5b117 	ldw	r2,-26940(gp)
   23218:	10800217 	ldw	r2,8(r2)
   2321c:	100b883a 	mov	r5,r2
   23220:	e13fff17 	ldw	r4,-4(fp)
   23224:	0017c440 	call	17c44 <putc>
#endif
#endif
}
   23228:	e037883a 	mov	sp,fp
   2322c:	dfc00117 	ldw	ra,4(sp)
   23230:	df000017 	ldw	fp,0(sp)
   23234:	dec00204 	addi	sp,sp,8
   23238:	f800283a 	ret

0002323c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2323c:	defffa04 	addi	sp,sp,-24
   23240:	df000515 	stw	fp,20(sp)
   23244:	df000504 	addi	fp,sp,20
   23248:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2324c:	0005303a 	rdctl	r2,status
   23250:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23254:	e0fffc17 	ldw	r3,-16(fp)
   23258:	00bfff84 	movi	r2,-2
   2325c:	1884703a 	and	r2,r3,r2
   23260:	1001703a 	wrctl	status,r2
  
  return context;
   23264:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23268:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2326c:	e0bfff17 	ldw	r2,-4(fp)
   23270:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23274:	e0bffd17 	ldw	r2,-12(fp)
   23278:	10800017 	ldw	r2,0(r2)
   2327c:	e0fffd17 	ldw	r3,-12(fp)
   23280:	18c00117 	ldw	r3,4(r3)
   23284:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   23288:	e0bffd17 	ldw	r2,-12(fp)
   2328c:	10800117 	ldw	r2,4(r2)
   23290:	e0fffd17 	ldw	r3,-12(fp)
   23294:	18c00017 	ldw	r3,0(r3)
   23298:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2329c:	e0bffd17 	ldw	r2,-12(fp)
   232a0:	e0fffd17 	ldw	r3,-12(fp)
   232a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   232a8:	e0bffd17 	ldw	r2,-12(fp)
   232ac:	e0fffd17 	ldw	r3,-12(fp)
   232b0:	10c00015 	stw	r3,0(r2)
   232b4:	e0bffb17 	ldw	r2,-20(fp)
   232b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   232bc:	e0bffe17 	ldw	r2,-8(fp)
   232c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   232c4:	0001883a 	nop
   232c8:	e037883a 	mov	sp,fp
   232cc:	df000017 	ldw	fp,0(sp)
   232d0:	dec00104 	addi	sp,sp,4
   232d4:	f800283a 	ret

000232d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   232d8:	defffb04 	addi	sp,sp,-20
   232dc:	dfc00415 	stw	ra,16(sp)
   232e0:	df000315 	stw	fp,12(sp)
   232e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   232e8:	d0a5c017 	ldw	r2,-26880(gp)
   232ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   232f0:	d0b25017 	ldw	r2,-14016(gp)
   232f4:	10800044 	addi	r2,r2,1
   232f8:	d0b25015 	stw	r2,-14016(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   232fc:	00002e06 	br	233b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   23300:	e0bffd17 	ldw	r2,-12(fp)
   23304:	10800017 	ldw	r2,0(r2)
   23308:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2330c:	e0bffd17 	ldw	r2,-12(fp)
   23310:	10800403 	ldbu	r2,16(r2)
   23314:	10803fcc 	andi	r2,r2,255
   23318:	10000426 	beq	r2,zero,2332c <alt_tick+0x54>
   2331c:	d0b25017 	ldw	r2,-14016(gp)
   23320:	1000021e 	bne	r2,zero,2332c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23324:	e0bffd17 	ldw	r2,-12(fp)
   23328:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2332c:	e0bffd17 	ldw	r2,-12(fp)
   23330:	10800217 	ldw	r2,8(r2)
   23334:	d0f25017 	ldw	r3,-14016(gp)
   23338:	18801d36 	bltu	r3,r2,233b0 <alt_tick+0xd8>
   2333c:	e0bffd17 	ldw	r2,-12(fp)
   23340:	10800403 	ldbu	r2,16(r2)
   23344:	10803fcc 	andi	r2,r2,255
   23348:	1000191e 	bne	r2,zero,233b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2334c:	e0bffd17 	ldw	r2,-12(fp)
   23350:	10800317 	ldw	r2,12(r2)
   23354:	e0fffd17 	ldw	r3,-12(fp)
   23358:	18c00517 	ldw	r3,20(r3)
   2335c:	1809883a 	mov	r4,r3
   23360:	103ee83a 	callr	r2
   23364:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23368:	e0bfff17 	ldw	r2,-4(fp)
   2336c:	1000031e 	bne	r2,zero,2337c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23370:	e13ffd17 	ldw	r4,-12(fp)
   23374:	002323c0 	call	2323c <alt_alarm_stop>
   23378:	00000d06 	br	233b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2337c:	e0bffd17 	ldw	r2,-12(fp)
   23380:	10c00217 	ldw	r3,8(r2)
   23384:	e0bfff17 	ldw	r2,-4(fp)
   23388:	1887883a 	add	r3,r3,r2
   2338c:	e0bffd17 	ldw	r2,-12(fp)
   23390:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23394:	e0bffd17 	ldw	r2,-12(fp)
   23398:	10c00217 	ldw	r3,8(r2)
   2339c:	d0b25017 	ldw	r2,-14016(gp)
   233a0:	1880032e 	bgeu	r3,r2,233b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   233a4:	e0bffd17 	ldw	r2,-12(fp)
   233a8:	00c00044 	movi	r3,1
   233ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   233b0:	e0bffe17 	ldw	r2,-8(fp)
   233b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   233b8:	e0fffd17 	ldw	r3,-12(fp)
   233bc:	d0a5c004 	addi	r2,gp,-26880
   233c0:	18bfcf1e 	bne	r3,r2,23300 <__alt_data_end+0xfc023300>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   233c4:	0001883a 	nop
}
   233c8:	0001883a 	nop
   233cc:	e037883a 	mov	sp,fp
   233d0:	dfc00117 	ldw	ra,4(sp)
   233d4:	df000017 	ldw	fp,0(sp)
   233d8:	dec00204 	addi	sp,sp,8
   233dc:	f800283a 	ret

000233e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   233e0:	deffff04 	addi	sp,sp,-4
   233e4:	df000015 	stw	fp,0(sp)
   233e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   233ec:	000170fa 	wrctl	ienable,zero
}
   233f0:	0001883a 	nop
   233f4:	e037883a 	mov	sp,fp
   233f8:	df000017 	ldw	fp,0(sp)
   233fc:	dec00104 	addi	sp,sp,4
   23400:	f800283a 	ret

00023404 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23404:	defffb04 	addi	sp,sp,-20
   23408:	dfc00415 	stw	ra,16(sp)
   2340c:	df000315 	stw	fp,12(sp)
   23410:	df000304 	addi	fp,sp,12
   23414:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   23418:	d0a5b617 	ldw	r2,-26920(gp)
   2341c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23420:	00003106 	br	234e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23424:	e0bffd17 	ldw	r2,-12(fp)
   23428:	10800217 	ldw	r2,8(r2)
   2342c:	1009883a 	mov	r4,r2
   23430:	000f4240 	call	f424 <strlen>
   23434:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   23438:	e0bffd17 	ldw	r2,-12(fp)
   2343c:	10c00217 	ldw	r3,8(r2)
   23440:	e0bffe17 	ldw	r2,-8(fp)
   23444:	10bfffc4 	addi	r2,r2,-1
   23448:	1885883a 	add	r2,r3,r2
   2344c:	10800003 	ldbu	r2,0(r2)
   23450:	10803fcc 	andi	r2,r2,255
   23454:	1080201c 	xori	r2,r2,128
   23458:	10bfe004 	addi	r2,r2,-128
   2345c:	10800bd8 	cmpnei	r2,r2,47
   23460:	1000031e 	bne	r2,zero,23470 <alt_find_file+0x6c>
    {
      len -= 1;
   23464:	e0bffe17 	ldw	r2,-8(fp)
   23468:	10bfffc4 	addi	r2,r2,-1
   2346c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23470:	e0bffe17 	ldw	r2,-8(fp)
   23474:	e0ffff17 	ldw	r3,-4(fp)
   23478:	1885883a 	add	r2,r3,r2
   2347c:	10800003 	ldbu	r2,0(r2)
   23480:	10803fcc 	andi	r2,r2,255
   23484:	1080201c 	xori	r2,r2,128
   23488:	10bfe004 	addi	r2,r2,-128
   2348c:	10800be0 	cmpeqi	r2,r2,47
   23490:	1000081e 	bne	r2,zero,234b4 <alt_find_file+0xb0>
   23494:	e0bffe17 	ldw	r2,-8(fp)
   23498:	e0ffff17 	ldw	r3,-4(fp)
   2349c:	1885883a 	add	r2,r3,r2
   234a0:	10800003 	ldbu	r2,0(r2)
   234a4:	10803fcc 	andi	r2,r2,255
   234a8:	1080201c 	xori	r2,r2,128
   234ac:	10bfe004 	addi	r2,r2,-128
   234b0:	10000a1e 	bne	r2,zero,234dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   234b4:	e0bffd17 	ldw	r2,-12(fp)
   234b8:	10800217 	ldw	r2,8(r2)
   234bc:	e0fffe17 	ldw	r3,-8(fp)
   234c0:	180d883a 	mov	r6,r3
   234c4:	e17fff17 	ldw	r5,-4(fp)
   234c8:	1009883a 	mov	r4,r2
   234cc:	00236b80 	call	236b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   234d0:	1000021e 	bne	r2,zero,234dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   234d4:	e0bffd17 	ldw	r2,-12(fp)
   234d8:	00000706 	br	234f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   234dc:	e0bffd17 	ldw	r2,-12(fp)
   234e0:	10800017 	ldw	r2,0(r2)
   234e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   234e8:	e0fffd17 	ldw	r3,-12(fp)
   234ec:	d0a5b604 	addi	r2,gp,-26920
   234f0:	18bfcc1e 	bne	r3,r2,23424 <__alt_data_end+0xfc023424>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   234f4:	0005883a 	mov	r2,zero
}
   234f8:	e037883a 	mov	sp,fp
   234fc:	dfc00117 	ldw	ra,4(sp)
   23500:	df000017 	ldw	fp,0(sp)
   23504:	dec00204 	addi	sp,sp,8
   23508:	f800283a 	ret

0002350c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2350c:	defffa04 	addi	sp,sp,-24
   23510:	dfc00515 	stw	ra,20(sp)
   23514:	df000415 	stw	fp,16(sp)
   23518:	dc000315 	stw	r16,12(sp)
   2351c:	df000404 	addi	fp,sp,16
   23520:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   23524:	00bffa04 	movi	r2,-24
   23528:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2352c:	e03ffc15 	stw	zero,-16(fp)
   23530:	00001d06 	br	235a8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   23534:	040000f4 	movhi	r16,3
   23538:	842d1404 	addi	r16,r16,-19376
   2353c:	e0bffc17 	ldw	r2,-16(fp)
   23540:	01400304 	movi	r5,12
   23544:	1009883a 	mov	r4,r2
   23548:	000cda80 	call	cda8 <__mulsi3>
   2354c:	8085883a 	add	r2,r16,r2
   23550:	10800017 	ldw	r2,0(r2)
   23554:	1000111e 	bne	r2,zero,2359c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   23558:	040000f4 	movhi	r16,3
   2355c:	842d1404 	addi	r16,r16,-19376
   23560:	e0bffc17 	ldw	r2,-16(fp)
   23564:	01400304 	movi	r5,12
   23568:	1009883a 	mov	r4,r2
   2356c:	000cda80 	call	cda8 <__mulsi3>
   23570:	8085883a 	add	r2,r16,r2
   23574:	e0fffe17 	ldw	r3,-8(fp)
   23578:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2357c:	d0e5ba17 	ldw	r3,-26904(gp)
   23580:	e0bffc17 	ldw	r2,-16(fp)
   23584:	1880020e 	bge	r3,r2,23590 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   23588:	e0bffc17 	ldw	r2,-16(fp)
   2358c:	d0a5ba15 	stw	r2,-26904(gp)
      }
      rc = i;
   23590:	e0bffc17 	ldw	r2,-16(fp)
   23594:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   23598:	00000606 	br	235b4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2359c:	e0bffc17 	ldw	r2,-16(fp)
   235a0:	10800044 	addi	r2,r2,1
   235a4:	e0bffc15 	stw	r2,-16(fp)
   235a8:	e0bffc17 	ldw	r2,-16(fp)
   235ac:	10800810 	cmplti	r2,r2,32
   235b0:	103fe01e 	bne	r2,zero,23534 <__alt_data_end+0xfc023534>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   235b4:	e0bffd17 	ldw	r2,-12(fp)
}
   235b8:	e6ffff04 	addi	sp,fp,-4
   235bc:	dfc00217 	ldw	ra,8(sp)
   235c0:	df000117 	ldw	fp,4(sp)
   235c4:	dc000017 	ldw	r16,0(sp)
   235c8:	dec00304 	addi	sp,sp,12
   235cc:	f800283a 	ret

000235d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   235d0:	defffe04 	addi	sp,sp,-8
   235d4:	df000115 	stw	fp,4(sp)
   235d8:	df000104 	addi	fp,sp,4
   235dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   235e0:	e0bfff17 	ldw	r2,-4(fp)
   235e4:	10bffe84 	addi	r2,r2,-6
   235e8:	10c00428 	cmpgeui	r3,r2,16
   235ec:	18001a1e 	bne	r3,zero,23658 <alt_exception_cause_generated_bad_addr+0x88>
   235f0:	100690ba 	slli	r3,r2,2
   235f4:	008000b4 	movhi	r2,2
   235f8:	108d8204 	addi	r2,r2,13832
   235fc:	1885883a 	add	r2,r3,r2
   23600:	10800017 	ldw	r2,0(r2)
   23604:	1000683a 	jmp	r2
   23608:	00023648 	cmpgei	zero,zero,2265
   2360c:	00023648 	cmpgei	zero,zero,2265
   23610:	00023658 	cmpnei	zero,zero,2265
   23614:	00023658 	cmpnei	zero,zero,2265
   23618:	00023658 	cmpnei	zero,zero,2265
   2361c:	00023648 	cmpgei	zero,zero,2265
   23620:	00023650 	cmplti	zero,zero,2265
   23624:	00023658 	cmpnei	zero,zero,2265
   23628:	00023648 	cmpgei	zero,zero,2265
   2362c:	00023648 	cmpgei	zero,zero,2265
   23630:	00023658 	cmpnei	zero,zero,2265
   23634:	00023648 	cmpgei	zero,zero,2265
   23638:	00023650 	cmplti	zero,zero,2265
   2363c:	00023658 	cmpnei	zero,zero,2265
   23640:	00023658 	cmpnei	zero,zero,2265
   23644:	00023648 	cmpgei	zero,zero,2265
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23648:	00800044 	movi	r2,1
   2364c:	00000306 	br	2365c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23650:	0005883a 	mov	r2,zero
   23654:	00000106 	br	2365c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23658:	0005883a 	mov	r2,zero
  }
}
   2365c:	e037883a 	mov	sp,fp
   23660:	df000017 	ldw	fp,0(sp)
   23664:	dec00104 	addi	sp,sp,4
   23668:	f800283a 	ret

0002366c <atexit>:
   2366c:	200b883a 	mov	r5,r4
   23670:	000f883a 	mov	r7,zero
   23674:	000d883a 	mov	r6,zero
   23678:	0009883a 	mov	r4,zero
   2367c:	00237341 	jmpi	23734 <__register_exitproc>

00023680 <exit>:
   23680:	defffe04 	addi	sp,sp,-8
   23684:	000b883a 	mov	r5,zero
   23688:	dc000015 	stw	r16,0(sp)
   2368c:	dfc00115 	stw	ra,4(sp)
   23690:	2021883a 	mov	r16,r4
   23694:	002384c0 	call	2384c <__call_exitprocs>
   23698:	008000f4 	movhi	r2,3
   2369c:	10b74a04 	addi	r2,r2,-8920
   236a0:	11000017 	ldw	r4,0(r2)
   236a4:	20800f17 	ldw	r2,60(r4)
   236a8:	10000126 	beq	r2,zero,236b0 <exit+0x30>
   236ac:	103ee83a 	callr	r2
   236b0:	8009883a 	mov	r4,r16
   236b4:	001ef140 	call	1ef14 <_exit>

000236b8 <memcmp>:
   236b8:	01c000c4 	movi	r7,3
   236bc:	3980192e 	bgeu	r7,r6,23724 <memcmp+0x6c>
   236c0:	2144b03a 	or	r2,r4,r5
   236c4:	11c4703a 	and	r2,r2,r7
   236c8:	10000f26 	beq	r2,zero,23708 <memcmp+0x50>
   236cc:	20800003 	ldbu	r2,0(r4)
   236d0:	28c00003 	ldbu	r3,0(r5)
   236d4:	10c0151e 	bne	r2,r3,2372c <memcmp+0x74>
   236d8:	31bfff84 	addi	r6,r6,-2
   236dc:	01ffffc4 	movi	r7,-1
   236e0:	00000406 	br	236f4 <memcmp+0x3c>
   236e4:	20800003 	ldbu	r2,0(r4)
   236e8:	28c00003 	ldbu	r3,0(r5)
   236ec:	31bfffc4 	addi	r6,r6,-1
   236f0:	10c00e1e 	bne	r2,r3,2372c <memcmp+0x74>
   236f4:	21000044 	addi	r4,r4,1
   236f8:	29400044 	addi	r5,r5,1
   236fc:	31fff91e 	bne	r6,r7,236e4 <__alt_data_end+0xfc0236e4>
   23700:	0005883a 	mov	r2,zero
   23704:	f800283a 	ret
   23708:	20c00017 	ldw	r3,0(r4)
   2370c:	28800017 	ldw	r2,0(r5)
   23710:	18bfee1e 	bne	r3,r2,236cc <__alt_data_end+0xfc0236cc>
   23714:	31bfff04 	addi	r6,r6,-4
   23718:	21000104 	addi	r4,r4,4
   2371c:	29400104 	addi	r5,r5,4
   23720:	39bff936 	bltu	r7,r6,23708 <__alt_data_end+0xfc023708>
   23724:	303fe91e 	bne	r6,zero,236cc <__alt_data_end+0xfc0236cc>
   23728:	003ff506 	br	23700 <__alt_data_end+0xfc023700>
   2372c:	10c5c83a 	sub	r2,r2,r3
   23730:	f800283a 	ret

00023734 <__register_exitproc>:
   23734:	defffa04 	addi	sp,sp,-24
   23738:	dc000315 	stw	r16,12(sp)
   2373c:	040000f4 	movhi	r16,3
   23740:	84374a04 	addi	r16,r16,-8920
   23744:	80c00017 	ldw	r3,0(r16)
   23748:	dc400415 	stw	r17,16(sp)
   2374c:	dfc00515 	stw	ra,20(sp)
   23750:	18805217 	ldw	r2,328(r3)
   23754:	2023883a 	mov	r17,r4
   23758:	10003726 	beq	r2,zero,23838 <__register_exitproc+0x104>
   2375c:	10c00117 	ldw	r3,4(r2)
   23760:	010007c4 	movi	r4,31
   23764:	20c00e16 	blt	r4,r3,237a0 <__register_exitproc+0x6c>
   23768:	1a000044 	addi	r8,r3,1
   2376c:	8800221e 	bne	r17,zero,237f8 <__register_exitproc+0xc4>
   23770:	18c00084 	addi	r3,r3,2
   23774:	18c7883a 	add	r3,r3,r3
   23778:	18c7883a 	add	r3,r3,r3
   2377c:	12000115 	stw	r8,4(r2)
   23780:	10c7883a 	add	r3,r2,r3
   23784:	19400015 	stw	r5,0(r3)
   23788:	0005883a 	mov	r2,zero
   2378c:	dfc00517 	ldw	ra,20(sp)
   23790:	dc400417 	ldw	r17,16(sp)
   23794:	dc000317 	ldw	r16,12(sp)
   23798:	dec00604 	addi	sp,sp,24
   2379c:	f800283a 	ret
   237a0:	00800074 	movhi	r2,1
   237a4:	10b8ca04 	addi	r2,r2,-7384
   237a8:	10002626 	beq	r2,zero,23844 <__register_exitproc+0x110>
   237ac:	01006404 	movi	r4,400
   237b0:	d9400015 	stw	r5,0(sp)
   237b4:	d9800115 	stw	r6,4(sp)
   237b8:	d9c00215 	stw	r7,8(sp)
   237bc:	000e3280 	call	e328 <malloc>
   237c0:	d9400017 	ldw	r5,0(sp)
   237c4:	d9800117 	ldw	r6,4(sp)
   237c8:	d9c00217 	ldw	r7,8(sp)
   237cc:	10001d26 	beq	r2,zero,23844 <__register_exitproc+0x110>
   237d0:	81000017 	ldw	r4,0(r16)
   237d4:	10000115 	stw	zero,4(r2)
   237d8:	02000044 	movi	r8,1
   237dc:	22405217 	ldw	r9,328(r4)
   237e0:	0007883a 	mov	r3,zero
   237e4:	12400015 	stw	r9,0(r2)
   237e8:	20805215 	stw	r2,328(r4)
   237ec:	10006215 	stw	zero,392(r2)
   237f0:	10006315 	stw	zero,396(r2)
   237f4:	883fde26 	beq	r17,zero,23770 <__alt_data_end+0xfc023770>
   237f8:	18c9883a 	add	r4,r3,r3
   237fc:	2109883a 	add	r4,r4,r4
   23800:	1109883a 	add	r4,r2,r4
   23804:	21802215 	stw	r6,136(r4)
   23808:	01800044 	movi	r6,1
   2380c:	12406217 	ldw	r9,392(r2)
   23810:	30cc983a 	sll	r6,r6,r3
   23814:	4992b03a 	or	r9,r9,r6
   23818:	12406215 	stw	r9,392(r2)
   2381c:	21c04215 	stw	r7,264(r4)
   23820:	01000084 	movi	r4,2
   23824:	893fd21e 	bne	r17,r4,23770 <__alt_data_end+0xfc023770>
   23828:	11006317 	ldw	r4,396(r2)
   2382c:	218cb03a 	or	r6,r4,r6
   23830:	11806315 	stw	r6,396(r2)
   23834:	003fce06 	br	23770 <__alt_data_end+0xfc023770>
   23838:	18805304 	addi	r2,r3,332
   2383c:	18805215 	stw	r2,328(r3)
   23840:	003fc606 	br	2375c <__alt_data_end+0xfc02375c>
   23844:	00bfffc4 	movi	r2,-1
   23848:	003fd006 	br	2378c <__alt_data_end+0xfc02378c>

0002384c <__call_exitprocs>:
   2384c:	defff504 	addi	sp,sp,-44
   23850:	df000915 	stw	fp,36(sp)
   23854:	dd400615 	stw	r21,24(sp)
   23858:	dc800315 	stw	r18,12(sp)
   2385c:	dfc00a15 	stw	ra,40(sp)
   23860:	ddc00815 	stw	r23,32(sp)
   23864:	dd800715 	stw	r22,28(sp)
   23868:	dd000515 	stw	r20,20(sp)
   2386c:	dcc00415 	stw	r19,16(sp)
   23870:	dc400215 	stw	r17,8(sp)
   23874:	dc000115 	stw	r16,4(sp)
   23878:	d9000015 	stw	r4,0(sp)
   2387c:	2839883a 	mov	fp,r5
   23880:	04800044 	movi	r18,1
   23884:	057fffc4 	movi	r21,-1
   23888:	008000f4 	movhi	r2,3
   2388c:	10b74a04 	addi	r2,r2,-8920
   23890:	12000017 	ldw	r8,0(r2)
   23894:	45005217 	ldw	r20,328(r8)
   23898:	44c05204 	addi	r19,r8,328
   2389c:	a0001c26 	beq	r20,zero,23910 <__call_exitprocs+0xc4>
   238a0:	a0800117 	ldw	r2,4(r20)
   238a4:	15ffffc4 	addi	r23,r2,-1
   238a8:	b8000d16 	blt	r23,zero,238e0 <__call_exitprocs+0x94>
   238ac:	14000044 	addi	r16,r2,1
   238b0:	8421883a 	add	r16,r16,r16
   238b4:	8421883a 	add	r16,r16,r16
   238b8:	84402004 	addi	r17,r16,128
   238bc:	a463883a 	add	r17,r20,r17
   238c0:	a421883a 	add	r16,r20,r16
   238c4:	e0001e26 	beq	fp,zero,23940 <__call_exitprocs+0xf4>
   238c8:	80804017 	ldw	r2,256(r16)
   238cc:	e0801c26 	beq	fp,r2,23940 <__call_exitprocs+0xf4>
   238d0:	bdffffc4 	addi	r23,r23,-1
   238d4:	843fff04 	addi	r16,r16,-4
   238d8:	8c7fff04 	addi	r17,r17,-4
   238dc:	bd7ff91e 	bne	r23,r21,238c4 <__alt_data_end+0xfc0238c4>
   238e0:	00800074 	movhi	r2,1
   238e4:	10b8cf04 	addi	r2,r2,-7364
   238e8:	10000926 	beq	r2,zero,23910 <__call_exitprocs+0xc4>
   238ec:	a0800117 	ldw	r2,4(r20)
   238f0:	1000301e 	bne	r2,zero,239b4 <__call_exitprocs+0x168>
   238f4:	a0800017 	ldw	r2,0(r20)
   238f8:	10003226 	beq	r2,zero,239c4 <__call_exitprocs+0x178>
   238fc:	a009883a 	mov	r4,r20
   23900:	98800015 	stw	r2,0(r19)
   23904:	000e33c0 	call	e33c <free>
   23908:	9d000017 	ldw	r20,0(r19)
   2390c:	a03fe41e 	bne	r20,zero,238a0 <__alt_data_end+0xfc0238a0>
   23910:	dfc00a17 	ldw	ra,40(sp)
   23914:	df000917 	ldw	fp,36(sp)
   23918:	ddc00817 	ldw	r23,32(sp)
   2391c:	dd800717 	ldw	r22,28(sp)
   23920:	dd400617 	ldw	r21,24(sp)
   23924:	dd000517 	ldw	r20,20(sp)
   23928:	dcc00417 	ldw	r19,16(sp)
   2392c:	dc800317 	ldw	r18,12(sp)
   23930:	dc400217 	ldw	r17,8(sp)
   23934:	dc000117 	ldw	r16,4(sp)
   23938:	dec00b04 	addi	sp,sp,44
   2393c:	f800283a 	ret
   23940:	a0800117 	ldw	r2,4(r20)
   23944:	80c00017 	ldw	r3,0(r16)
   23948:	10bfffc4 	addi	r2,r2,-1
   2394c:	15c01426 	beq	r2,r23,239a0 <__call_exitprocs+0x154>
   23950:	80000015 	stw	zero,0(r16)
   23954:	183fde26 	beq	r3,zero,238d0 <__alt_data_end+0xfc0238d0>
   23958:	95c8983a 	sll	r4,r18,r23
   2395c:	a0806217 	ldw	r2,392(r20)
   23960:	a5800117 	ldw	r22,4(r20)
   23964:	2084703a 	and	r2,r4,r2
   23968:	10000b26 	beq	r2,zero,23998 <__call_exitprocs+0x14c>
   2396c:	a0806317 	ldw	r2,396(r20)
   23970:	2088703a 	and	r4,r4,r2
   23974:	20000c1e 	bne	r4,zero,239a8 <__call_exitprocs+0x15c>
   23978:	89400017 	ldw	r5,0(r17)
   2397c:	d9000017 	ldw	r4,0(sp)
   23980:	183ee83a 	callr	r3
   23984:	a0800117 	ldw	r2,4(r20)
   23988:	15bfbf1e 	bne	r2,r22,23888 <__alt_data_end+0xfc023888>
   2398c:	98800017 	ldw	r2,0(r19)
   23990:	153fcf26 	beq	r2,r20,238d0 <__alt_data_end+0xfc0238d0>
   23994:	003fbc06 	br	23888 <__alt_data_end+0xfc023888>
   23998:	183ee83a 	callr	r3
   2399c:	003ff906 	br	23984 <__alt_data_end+0xfc023984>
   239a0:	a5c00115 	stw	r23,4(r20)
   239a4:	003feb06 	br	23954 <__alt_data_end+0xfc023954>
   239a8:	89000017 	ldw	r4,0(r17)
   239ac:	183ee83a 	callr	r3
   239b0:	003ff406 	br	23984 <__alt_data_end+0xfc023984>
   239b4:	a0800017 	ldw	r2,0(r20)
   239b8:	a027883a 	mov	r19,r20
   239bc:	1029883a 	mov	r20,r2
   239c0:	003fb606 	br	2389c <__alt_data_end+0xfc02389c>
   239c4:	0005883a 	mov	r2,zero
   239c8:	003ffb06 	br	239b8 <__alt_data_end+0xfc0239b8>
   239cc:	01110bff 	0x1110bff
   239d0:	01010004 	movi	r4,1024
   239d4:	7f000105 	stb	fp,4(r15)
   239d8:	007d0000 	call	7d000 <_gp+0x48998>
   239dc:	00000000 	call	0 <__alt_mem_sdram>
   239e0:	01883a00 	call	1883a0 <_gp+0x153d38>
   239e4:	010d0bff 	0x10d0bff
   239e8:	01010002 	0x1010002
	...
   239f4:	010d0bff 	0x10d0bff
   239f8:	01010004 	movi	r4,1024
   239fc:	00000100 	call	10 <__alt_mem_sdram+0x10>
   23a00:	00000000 	call	0 <__alt_mem_sdram>
   23a04:	0000a2bc 	xorhi	zero,zero,650
   23a08:	0000ca90 	cmplti	zero,zero,810
